
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e0f4  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000e0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000045e4  20000094  0000e188  00020094  2**2
                  ALLOC
  3 .stack        00002000  20004678  0001276c  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00045c2a  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f64  00000000  00000000  00065d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008544  00000000  00000000  0006bca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017b8  00000000  00000000  000741e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000015f8  00000000  00000000  0007599f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000234d1  00000000  00000000  00076f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f682  00000000  00000000  0009a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a3f2  00000000  00000000  000b9aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005d98  00000000  00000000  00153edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006678 	.word	0x20006678
       4:	0000752d 	.word	0x0000752d
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	00007625 	.word	0x00007625
       c:	00007625 	.word	0x00007625
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000798d 	.word	0x0000798d
	...
      38:	00007ab1 	.word	0x00007ab1
      3c:	00007af9 	.word	0x00007af9
      40:	00007625 	.word	0x00007625

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	00007625 	.word	0x00007625
      48:	00007625 	.word	0x00007625
      4c:	0000448d 	.word	0x0000448d
      50:	000040bd 	.word	0x000040bd
      54:	00007625 	.word	0x00007625
      58:	00007625 	.word	0x00007625
		if (time.hour == 0) {
      5c:	00007625 	.word	0x00007625
      60:	00007625 	.word	0x00007625
			time.hour = 12;
      64:	00004b65 	.word	0x00004b65
      68:	00004b7d 	.word	0x00004b7d
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00004b95 	.word	0x00004b95
      70:	00004bad 	.word	0x00004bad
      74:	00004bc5 	.word	0x00004bc5
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00004bdd 	.word	0x00004bdd
      7c:	00007475 	.word	0x00007475
      80:	00007489 	.word	0x00007489
      84:	0000749d 	.word	0x0000749d
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00007625 	.word	0x00007625
      8c:	00007625 	.word	0x00007625
      90:	00007625 	.word	0x00007625
	...
      9c:	00003f4d 	.word	0x00003f4d
      a0:	00007625 	.word	0x00007625
      a4:	00007625 	.word	0x00007625
			alarm.time.hour = alarm.time.hour % 12;
      a8:	00007625 	.word	0x00007625
      ac:	00007625 	.word	0x00007625
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0000e0f4 	.word	0x0000e0f4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0000e0f4 	.word	0x0000e0f4
     10c:	0000e0f4 	.word	0x0000e0f4
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <display_init>:
    { BUTTON_UP,            display_button_up_handler },
    { 0, NULL },
};

void display_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
    wtc6508_init();   
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <display_init+0x14>)
     11a:	4798      	blx	r3
    tm1640_init();
     11c:	4b03      	ldr	r3, [pc, #12]	; (12c <display_init+0x18>)
     11e:	4798      	blx	r3
}
     120:	46c0      	nop			; (mov r8, r8)
     122:	46bd      	mov	sp, r7
     124:	bd80      	pop	{r7, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	000008d9 	.word	0x000008d9
     12c:	000004a5 	.word	0x000004a5

00000130 <display_update_50Hz>:


void display_update_50Hz(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
    uint8_t status = 0;
     136:	1dbb      	adds	r3, r7, #6
     138:	2200      	movs	r2, #0
     13a:	701a      	strb	r2, [r3, #0]
    uint8_t button_mask = 0x1;
     13c:	1dfb      	adds	r3, r7, #7
     13e:	2201      	movs	r2, #1
     140:	701a      	strb	r2, [r3, #0]
    
    // Check for user input
    if (wtc6508_read(&status)) {
     142:	1dbb      	adds	r3, r7, #6
     144:	0018      	movs	r0, r3
     146:	4b07      	ldr	r3, [pc, #28]	; (164 <display_update_50Hz+0x34>)
     148:	4798      	blx	r3
     14a:	1e03      	subs	r3, r0, #0
     14c:	d006      	beq.n	15c <display_update_50Hz+0x2c>
        printf("Error! Unable to read button status\n");
     14e:	4b06      	ldr	r3, [pc, #24]	; (168 <display_update_50Hz+0x38>)
     150:	0018      	movs	r0, r3
     152:	4b06      	ldr	r3, [pc, #24]	; (16c <display_update_50Hz+0x3c>)
     154:	4798      	blx	r3
        status = 0;
     156:	1dbb      	adds	r3, r7, #6
     158:	2200      	movs	r2, #0
     15a:	701a      	strb	r2, [r3, #0]
#if !DISPLAY_TEST_MODE    
    // Get temperature and error statuses

    // Update display if necessary
#endif
}
     15c:	46c0      	nop			; (mov r8, r8)
     15e:	46bd      	mov	sp, r7
     160:	b002      	add	sp, #8
     162:	bd80      	pop	{r7, pc}
     164:	000009a9 	.word	0x000009a9
     168:	0000cc28 	.word	0x0000cc28
     16c:	0000bcd1 	.word	0x0000bcd1

00000170 <display_led_test_1Hz>:
    SEG_0, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, SEG_7, SEG_8, SEG_9, 
    SEG_C, SEG_F, SEG_E, SEG_H, SEG_h
};

void display_led_test_1Hz(void)
{
     170:	b580      	push	{r7, lr}
     172:	b084      	sub	sp, #16
     174:	af00      	add	r7, sp, #0
#if DISPLAY_TEST_MODE    
    static uint8_t grid_number = 0;
    static uint8_t segment_number = 0;

    tm1640_display_t disp_conf = {0};    
     176:	003b      	movs	r3, r7
     178:	0018      	movs	r0, r3
     17a:	2310      	movs	r3, #16
     17c:	001a      	movs	r2, r3
     17e:	2100      	movs	r1, #0
     180:	4b19      	ldr	r3, [pc, #100]	; (1e8 <display_led_test_1Hz+0x78>)
     182:	4798      	blx	r3
    disp_conf.grid[grid_number] = tm1640_segments[segment_number];
     184:	4b19      	ldr	r3, [pc, #100]	; (1ec <display_led_test_1Hz+0x7c>)
     186:	781b      	ldrb	r3, [r3, #0]
     188:	001a      	movs	r2, r3
     18a:	4b19      	ldr	r3, [pc, #100]	; (1f0 <display_led_test_1Hz+0x80>)
     18c:	781b      	ldrb	r3, [r3, #0]
     18e:	0019      	movs	r1, r3
     190:	4b18      	ldr	r3, [pc, #96]	; (1f4 <display_led_test_1Hz+0x84>)
     192:	5c59      	ldrb	r1, [r3, r1]
     194:	003b      	movs	r3, r7
     196:	5499      	strb	r1, [r3, r2]
    tm1640_set_display(&disp_conf, BRIGHT_MAX);
     198:	003b      	movs	r3, r7
     19a:	218f      	movs	r1, #143	; 0x8f
     19c:	0018      	movs	r0, r3
     19e:	4b16      	ldr	r3, [pc, #88]	; (1f8 <display_led_test_1Hz+0x88>)
     1a0:	4798      	blx	r3

    segment_number = (segment_number + 1) % (sizeof(tm1640_segments) / sizeof(tm1640_seg_t));
     1a2:	4b13      	ldr	r3, [pc, #76]	; (1f0 <display_led_test_1Hz+0x80>)
     1a4:	781b      	ldrb	r3, [r3, #0]
     1a6:	3301      	adds	r3, #1
     1a8:	001a      	movs	r2, r3
     1aa:	4b14      	ldr	r3, [pc, #80]	; (1fc <display_led_test_1Hz+0x8c>)
     1ac:	2117      	movs	r1, #23
     1ae:	0010      	movs	r0, r2
     1b0:	4798      	blx	r3
     1b2:	000b      	movs	r3, r1
     1b4:	b2da      	uxtb	r2, r3
     1b6:	4b0e      	ldr	r3, [pc, #56]	; (1f0 <display_led_test_1Hz+0x80>)
     1b8:	701a      	strb	r2, [r3, #0]

    if (segment_number == 0) {
     1ba:	4b0d      	ldr	r3, [pc, #52]	; (1f0 <display_led_test_1Hz+0x80>)
     1bc:	781b      	ldrb	r3, [r3, #0]
     1be:	2b00      	cmp	r3, #0
     1c0:	d10d      	bne.n	1de <display_led_test_1Hz+0x6e>
        grid_number = (grid_number + 1) % TM1640_GRIDS;    
     1c2:	4b0a      	ldr	r3, [pc, #40]	; (1ec <display_led_test_1Hz+0x7c>)
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	4a0d      	ldr	r2, [pc, #52]	; (200 <display_led_test_1Hz+0x90>)
     1ca:	4013      	ands	r3, r2
     1cc:	d504      	bpl.n	1d8 <display_led_test_1Hz+0x68>
     1ce:	3b01      	subs	r3, #1
     1d0:	2210      	movs	r2, #16
     1d2:	4252      	negs	r2, r2
     1d4:	4313      	orrs	r3, r2
     1d6:	3301      	adds	r3, #1
     1d8:	b2da      	uxtb	r2, r3
     1da:	4b04      	ldr	r3, [pc, #16]	; (1ec <display_led_test_1Hz+0x7c>)
     1dc:	701a      	strb	r2, [r3, #0]
    }       

#endif
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	b004      	add	sp, #16
     1e4:	bd80      	pop	{r7, pc}
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	0000b5fb 	.word	0x0000b5fb
     1ec:	200000b0 	.word	0x200000b0
     1f0:	200000b1 	.word	0x200000b1
     1f4:	0000cc4c 	.word	0x0000cc4c
     1f8:	000005b9 	.word	0x000005b9
     1fc:	0000ad69 	.word	0x0000ad69
     200:	8000000f 	.word	0x8000000f

00000204 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     204:	b580      	push	{r7, lr}
     206:	b082      	sub	sp, #8
     208:	af00      	add	r7, sp, #0
     20a:	0002      	movs	r2, r0
     20c:	1dfb      	adds	r3, r7, #7
     20e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     210:	4b06      	ldr	r3, [pc, #24]	; (22c <NVIC_EnableIRQ+0x28>)
     212:	1dfa      	adds	r2, r7, #7
     214:	7812      	ldrb	r2, [r2, #0]
     216:	0011      	movs	r1, r2
     218:	221f      	movs	r2, #31
     21a:	400a      	ands	r2, r1
     21c:	2101      	movs	r1, #1
     21e:	4091      	lsls	r1, r2
     220:	000a      	movs	r2, r1
     222:	601a      	str	r2, [r3, #0]
}
     224:	46c0      	nop			; (mov r8, r8)
     226:	46bd      	mov	sp, r7
     228:	b002      	add	sp, #8
     22a:	bd80      	pop	{r7, pc}
     22c:	e000e100 	.word	0xe000e100

00000230 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     230:	b580      	push	{r7, lr}
     232:	b082      	sub	sp, #8
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     23c:	4a07      	ldr	r2, [pc, #28]	; (25c <NVIC_DisableIRQ+0x2c>)
     23e:	1dfb      	adds	r3, r7, #7
     240:	781b      	ldrb	r3, [r3, #0]
     242:	0019      	movs	r1, r3
     244:	231f      	movs	r3, #31
     246:	400b      	ands	r3, r1
     248:	2101      	movs	r1, #1
     24a:	4099      	lsls	r1, r3
     24c:	000b      	movs	r3, r1
     24e:	0019      	movs	r1, r3
     250:	2380      	movs	r3, #128	; 0x80
     252:	50d1      	str	r1, [r2, r3]
}
     254:	46c0      	nop			; (mov r8, r8)
     256:	46bd      	mov	sp, r7
     258:	b002      	add	sp, #8
     25a:	bd80      	pop	{r7, pc}
     25c:	e000e100 	.word	0xe000e100

00000260 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     260:	b580      	push	{r7, lr}
     262:	b082      	sub	sp, #8
     264:	af00      	add	r7, sp, #0
     266:	0002      	movs	r2, r0
     268:	1dfb      	adds	r3, r7, #7
     26a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     26c:	4b06      	ldr	r3, [pc, #24]	; (288 <system_interrupt_enable+0x28>)
     26e:	1dfa      	adds	r2, r7, #7
     270:	7812      	ldrb	r2, [r2, #0]
     272:	0011      	movs	r1, r2
     274:	221f      	movs	r2, #31
     276:	400a      	ands	r2, r1
     278:	2101      	movs	r1, #1
     27a:	4091      	lsls	r1, r2
     27c:	000a      	movs	r2, r1
     27e:	601a      	str	r2, [r3, #0]
}
     280:	46c0      	nop			; (mov r8, r8)
     282:	46bd      	mov	sp, r7
     284:	b002      	add	sp, #8
     286:	bd80      	pop	{r7, pc}
     288:	e000e100 	.word	0xe000e100

0000028c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     28c:	b580      	push	{r7, lr}
     28e:	b084      	sub	sp, #16
     290:	af00      	add	r7, sp, #0
     292:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     294:	687b      	ldr	r3, [r7, #4]
     296:	681b      	ldr	r3, [r3, #0]
     298:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     29a:	68fb      	ldr	r3, [r7, #12]
     29c:	69db      	ldr	r3, [r3, #28]
     29e:	1e5a      	subs	r2, r3, #1
     2a0:	4193      	sbcs	r3, r2
     2a2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     2a4:	0018      	movs	r0, r3
     2a6:	46bd      	mov	sp, r7
     2a8:	b004      	add	sp, #16
     2aa:	bd80      	pop	{r7, pc}

000002ac <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b084      	sub	sp, #16
     2b0:	af00      	add	r7, sp, #0
     2b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     2b4:	687b      	ldr	r3, [r7, #4]
     2b6:	681b      	ldr	r3, [r3, #0]
     2b8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2ba:	687b      	ldr	r3, [r7, #4]
     2bc:	681b      	ldr	r3, [r3, #0]
     2be:	0018      	movs	r0, r3
     2c0:	4b0b      	ldr	r3, [pc, #44]	; (2f0 <spi_enable+0x44>)
     2c2:	4798      	blx	r3
     2c4:	0003      	movs	r3, r0
     2c6:	0018      	movs	r0, r3
     2c8:	4b0a      	ldr	r3, [pc, #40]	; (2f4 <spi_enable+0x48>)
     2ca:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     2cc:	46c0      	nop			; (mov r8, r8)
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	0018      	movs	r0, r3
     2d2:	4b09      	ldr	r3, [pc, #36]	; (2f8 <spi_enable+0x4c>)
     2d4:	4798      	blx	r3
     2d6:	1e03      	subs	r3, r0, #0
     2d8:	d1f9      	bne.n	2ce <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     2da:	68fb      	ldr	r3, [r7, #12]
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	2202      	movs	r2, #2
     2e0:	431a      	orrs	r2, r3
     2e2:	68fb      	ldr	r3, [r7, #12]
     2e4:	601a      	str	r2, [r3, #0]
}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	46bd      	mov	sp, r7
     2ea:	b004      	add	sp, #16
     2ec:	bd80      	pop	{r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00004b19 	.word	0x00004b19
     2f4:	00000261 	.word	0x00000261
     2f8:	0000028d 	.word	0x0000028d

000002fc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     304:	687b      	ldr	r3, [r7, #4]
     306:	681b      	ldr	r3, [r3, #0]
     308:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     30a:	68fb      	ldr	r3, [r7, #12]
     30c:	7e1b      	ldrb	r3, [r3, #24]
     30e:	b2db      	uxtb	r3, r3
     310:	001a      	movs	r2, r3
     312:	2301      	movs	r3, #1
     314:	4013      	ands	r3, r2
     316:	1e5a      	subs	r2, r3, #1
     318:	4193      	sbcs	r3, r2
     31a:	b2db      	uxtb	r3, r3
}
     31c:	0018      	movs	r0, r3
     31e:	46bd      	mov	sp, r7
     320:	b004      	add	sp, #16
     322:	bd80      	pop	{r7, pc}

00000324 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     324:	b580      	push	{r7, lr}
     326:	b084      	sub	sp, #16
     328:	af00      	add	r7, sp, #0
     32a:	6078      	str	r0, [r7, #4]
     32c:	000a      	movs	r2, r1
     32e:	1cbb      	adds	r3, r7, #2
     330:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     332:	687b      	ldr	r3, [r7, #4]
     334:	681b      	ldr	r3, [r3, #0]
     336:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     338:	687b      	ldr	r3, [r7, #4]
     33a:	0018      	movs	r0, r3
     33c:	4b0a      	ldr	r3, [pc, #40]	; (368 <spi_write+0x44>)
     33e:	4798      	blx	r3
     340:	0003      	movs	r3, r0
     342:	001a      	movs	r2, r3
     344:	2301      	movs	r3, #1
     346:	4053      	eors	r3, r2
     348:	b2db      	uxtb	r3, r3
     34a:	2b00      	cmp	r3, #0
     34c:	d001      	beq.n	352 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     34e:	2305      	movs	r3, #5
     350:	e006      	b.n	360 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     352:	1cbb      	adds	r3, r7, #2
     354:	881b      	ldrh	r3, [r3, #0]
     356:	05db      	lsls	r3, r3, #23
     358:	0dda      	lsrs	r2, r3, #23
     35a:	68fb      	ldr	r3, [r7, #12]
     35c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     35e:	2300      	movs	r3, #0
}
     360:	0018      	movs	r0, r3
     362:	46bd      	mov	sp, r7
     364:	b004      	add	sp, #16
     366:	bd80      	pop	{r7, pc}
     368:	000002fd 	.word	0x000002fd

0000036c <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
     36c:	b580      	push	{r7, lr}
     36e:	b082      	sub	sp, #8
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
     374:	000a      	movs	r2, r1
     376:	1cfb      	adds	r3, r7, #3
     378:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     37a:	687b      	ldr	r3, [r7, #4]
     37c:	2237      	movs	r2, #55	; 0x37
     37e:	5c9b      	ldrb	r3, [r3, r2]
     380:	b25a      	sxtb	r2, r3
     382:	1cfb      	adds	r3, r7, #3
     384:	781b      	ldrb	r3, [r3, #0]
     386:	2101      	movs	r1, #1
     388:	4099      	lsls	r1, r3
     38a:	000b      	movs	r3, r1
     38c:	b25b      	sxtb	r3, r3
     38e:	4313      	orrs	r3, r2
     390:	b25b      	sxtb	r3, r3
     392:	b2d9      	uxtb	r1, r3
     394:	687b      	ldr	r3, [r7, #4]
     396:	2237      	movs	r2, #55	; 0x37
     398:	5499      	strb	r1, [r3, r2]
}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	46bd      	mov	sp, r7
     39e:	b002      	add	sp, #8
     3a0:	bd80      	pop	{r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)

000003a4 <tm1640_get_state>:
volatile tm1640_state_t tm1640_state;
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;

static tm1640_state_t tm1640_get_state(void)
{    
     3a4:	b580      	push	{r7, lr}
     3a6:	b082      	sub	sp, #8
     3a8:	af00      	add	r7, sp, #0
    // State will be updated from an interrupt so disable interrupts
    // to make this interaction atomic.
    tm1640_state_t temp_state;
    NVIC_DisableIRQ(TM1640_IRQ);
     3aa:	200d      	movs	r0, #13
     3ac:	4b07      	ldr	r3, [pc, #28]	; (3cc <tm1640_get_state+0x28>)
     3ae:	4798      	blx	r3
    temp_state = tm1640_state;
     3b0:	1dfb      	adds	r3, r7, #7
     3b2:	4a07      	ldr	r2, [pc, #28]	; (3d0 <tm1640_get_state+0x2c>)
     3b4:	7812      	ldrb	r2, [r2, #0]
     3b6:	701a      	strb	r2, [r3, #0]
    NVIC_EnableIRQ(TM1640_IRQ);
     3b8:	200d      	movs	r0, #13
     3ba:	4b06      	ldr	r3, [pc, #24]	; (3d4 <tm1640_get_state+0x30>)
     3bc:	4798      	blx	r3
    return temp_state;
     3be:	1dfb      	adds	r3, r7, #7
     3c0:	781b      	ldrb	r3, [r3, #0]
}
     3c2:	0018      	movs	r0, r3
     3c4:	46bd      	mov	sp, r7
     3c6:	b002      	add	sp, #8
     3c8:	bd80      	pop	{r7, pc}
     3ca:	46c0      	nop			; (mov r8, r8)
     3cc:	00000231 	.word	0x00000231
     3d0:	2000442c 	.word	0x2000442c
     3d4:	00000205 	.word	0x00000205

000003d8 <spi_cb_buffer_transmitted>:

static void spi_cb_buffer_transmitted(struct spi_module *const module) 
{
     3d8:	b580      	push	{r7, lr}
     3da:	b082      	sub	sp, #8
     3dc:	af00      	add	r7, sp, #0
     3de:	6078      	str	r0, [r7, #4]
    static BaseType_t wakeTask;

    // This function will be called from an interrupt context
    wakeTask = pdFALSE;
     3e0:	4b1e      	ldr	r3, [pc, #120]	; (45c <spi_cb_buffer_transmitted+0x84>)
     3e2:	2200      	movs	r2, #0
     3e4:	601a      	str	r2, [r3, #0]
    switch (tm1640_state) {
     3e6:	4b1e      	ldr	r3, [pc, #120]	; (460 <spi_cb_buffer_transmitted+0x88>)
     3e8:	781b      	ldrb	r3, [r3, #0]
     3ea:	b2db      	uxtb	r3, r3
     3ec:	2b01      	cmp	r3, #1
     3ee:	d002      	beq.n	3f6 <spi_cb_buffer_transmitted+0x1e>
     3f0:	2b02      	cmp	r3, #2
     3f2:	d012      	beq.n	41a <spi_cb_buffer_transmitted+0x42>
     3f4:	e01b      	b.n	42e <spi_cb_buffer_transmitted+0x56>
    case STATE_SET_DATA:
        tm1640_state = STATE_SET_ADDR;
     3f6:	4b1a      	ldr	r3, [pc, #104]	; (460 <spi_cb_buffer_transmitted+0x88>)
     3f8:	2202      	movs	r2, #2
     3fa:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_addr, TM1640_GRIDS + 1);
     3fc:	4919      	ldr	r1, [pc, #100]	; (464 <spi_cb_buffer_transmitted+0x8c>)
     3fe:	4b1a      	ldr	r3, [pc, #104]	; (468 <spi_cb_buffer_transmitted+0x90>)
     400:	2211      	movs	r2, #17
     402:	0018      	movs	r0, r3
     404:	4b19      	ldr	r3, [pc, #100]	; (46c <spi_cb_buffer_transmitted+0x94>)
     406:	4798      	blx	r3
        spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     408:	4b19      	ldr	r3, [pc, #100]	; (470 <spi_cb_buffer_transmitted+0x98>)
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	b29a      	uxth	r2, r3
     40e:	4b16      	ldr	r3, [pc, #88]	; (468 <spi_cb_buffer_transmitted+0x90>)
     410:	0011      	movs	r1, r2
     412:	0018      	movs	r0, r3
     414:	4b17      	ldr	r3, [pc, #92]	; (474 <spi_cb_buffer_transmitted+0x9c>)
     416:	4798      	blx	r3
        break;
     418:	e014      	b.n	444 <spi_cb_buffer_transmitted+0x6c>

    case STATE_SET_ADDR:
        tm1640_state = STATE_CONTROL;
     41a:	4b11      	ldr	r3, [pc, #68]	; (460 <spi_cb_buffer_transmitted+0x88>)
     41c:	2203      	movs	r2, #3
     41e:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.brigtness, 1);
     420:	4915      	ldr	r1, [pc, #84]	; (478 <spi_cb_buffer_transmitted+0xa0>)
     422:	4b11      	ldr	r3, [pc, #68]	; (468 <spi_cb_buffer_transmitted+0x90>)
     424:	2201      	movs	r2, #1
     426:	0018      	movs	r0, r3
     428:	4b10      	ldr	r3, [pc, #64]	; (46c <spi_cb_buffer_transmitted+0x94>)
     42a:	4798      	blx	r3
        break;
     42c:	e00a      	b.n	444 <spi_cb_buffer_transmitted+0x6c>

    case STATE_CONTROL:
    default:
        tm1640_state = STATE_IDLE;        
     42e:	4b0c      	ldr	r3, [pc, #48]	; (460 <spi_cb_buffer_transmitted+0x88>)
     430:	2200      	movs	r2, #0
     432:	701a      	strb	r2, [r3, #0]
        xSemaphoreGiveFromISR(tm1640_sem, &wakeTask);
     434:	4b11      	ldr	r3, [pc, #68]	; (47c <spi_cb_buffer_transmitted+0xa4>)
     436:	681b      	ldr	r3, [r3, #0]
     438:	4a08      	ldr	r2, [pc, #32]	; (45c <spi_cb_buffer_transmitted+0x84>)
     43a:	0011      	movs	r1, r2
     43c:	0018      	movs	r0, r3
     43e:	4b10      	ldr	r3, [pc, #64]	; (480 <spi_cb_buffer_transmitted+0xa8>)
     440:	4798      	blx	r3
        break;
     442:	46c0      	nop			; (mov r8, r8)
    }

    portYIELD_FROM_ISR(wakeTask);
     444:	4b05      	ldr	r3, [pc, #20]	; (45c <spi_cb_buffer_transmitted+0x84>)
     446:	681b      	ldr	r3, [r3, #0]
     448:	2b00      	cmp	r3, #0
     44a:	d003      	beq.n	454 <spi_cb_buffer_transmitted+0x7c>
     44c:	4b0d      	ldr	r3, [pc, #52]	; (484 <spi_cb_buffer_transmitted+0xac>)
     44e:	2280      	movs	r2, #128	; 0x80
     450:	0552      	lsls	r2, r2, #21
     452:	601a      	str	r2, [r3, #0]
}
     454:	46c0      	nop			; (mov r8, r8)
     456:	46bd      	mov	sp, r7
     458:	b002      	add	sp, #8
     45a:	bd80      	pop	{r7, pc}
     45c:	200000b4 	.word	0x200000b4
     460:	2000442c 	.word	0x2000442c
     464:	20004431 	.word	0x20004431
     468:	20004448 	.word	0x20004448
     46c:	0000550d 	.word	0x0000550d
     470:	20004430 	.word	0x20004430
     474:	00000325 	.word	0x00000325
     478:	20004442 	.word	0x20004442
     47c:	20004484 	.word	0x20004484
     480:	000080fd 	.word	0x000080fd
     484:	e000ed04 	.word	0xe000ed04

00000488 <spi_cb_error>:

static void spi_cb_error(struct spi_module *const module) 
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
    printf("Spi error!\n");
     490:	4b02      	ldr	r3, [pc, #8]	; (49c <spi_cb_error+0x14>)
     492:	0018      	movs	r0, r3
     494:	4b02      	ldr	r3, [pc, #8]	; (4a0 <spi_cb_error+0x18>)
     496:	4798      	blx	r3
    while(1) {}
     498:	e7fe      	b.n	498 <spi_cb_error+0x10>
     49a:	46c0      	nop			; (mov r8, r8)
     49c:	0000cc64 	.word	0x0000cc64
     4a0:	0000bcd1 	.word	0x0000bcd1

000004a4 <tm1640_init>:
}

void tm1640_init(void)
{
     4a4:	b580      	push	{r7, lr}
     4a6:	b08e      	sub	sp, #56	; 0x38
     4a8:	af00      	add	r7, sp, #0
    struct spi_config config;

    config.character_size = SPI_CHARACTER_SIZE_8BIT;
     4aa:	003b      	movs	r3, r7
     4ac:	2200      	movs	r2, #0
     4ae:	741a      	strb	r2, [r3, #16]
    config.data_order = SPI_DATA_ORDER_LSB;
     4b0:	003b      	movs	r3, r7
     4b2:	2280      	movs	r2, #128	; 0x80
     4b4:	05d2      	lsls	r2, r2, #23
     4b6:	605a      	str	r2, [r3, #4]
    config.mode = SPI_MODE_MASTER;
     4b8:	003b      	movs	r3, r7
     4ba:	2201      	movs	r2, #1
     4bc:	701a      	strb	r2, [r3, #0]
    config.transfer_mode = SPI_TRANSFER_MODE_3;
     4be:	003b      	movs	r3, r7
     4c0:	22c0      	movs	r2, #192	; 0xc0
     4c2:	0592      	lsls	r2, r2, #22
     4c4:	609a      	str	r2, [r3, #8]
    config.select_slave_low_detect_enable = false;
     4c6:	003b      	movs	r3, r7
     4c8:	2200      	movs	r2, #0
     4ca:	74da      	strb	r2, [r3, #19]
#ifndef XPLAINED
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;    
     4cc:	003b      	movs	r3, r7
     4ce:	2280      	movs	r2, #128	; 0x80
     4d0:	0252      	lsls	r2, r2, #9
     4d2:	60da      	str	r2, [r3, #12]
#else
    //config.mux_setting = SPI_SIGNAL_MUX_SETTING_O;
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
#endif
    config.receiver_enable = false;
     4d4:	003b      	movs	r3, r7
     4d6:	2200      	movs	r2, #0
     4d8:	749a      	strb	r2, [r3, #18]
    config.master_slave_select_enable = false;
     4da:	003b      	movs	r3, r7
     4dc:	2200      	movs	r2, #0
     4de:	751a      	strb	r2, [r3, #20]
    config.run_in_standby = true;
     4e0:	003b      	movs	r3, r7
     4e2:	2201      	movs	r2, #1
     4e4:	745a      	strb	r2, [r3, #17]
    config.mode_specific.master.baudrate = TM1640_BAUD_RATE;    
     4e6:	003b      	movs	r3, r7
     4e8:	4a24      	ldr	r2, [pc, #144]	; (57c <tm1640_init+0xd8>)
     4ea:	619a      	str	r2, [r3, #24]
    config.generator_source = GCLK_GENERATOR_4;
     4ec:	003b      	movs	r3, r7
     4ee:	2224      	movs	r2, #36	; 0x24
     4f0:	2104      	movs	r1, #4
     4f2:	5499      	strb	r1, [r3, r2]
    config.pinmux_pad0 = TM1640_PINMUX_PAD0;
     4f4:	003b      	movs	r3, r7
     4f6:	2201      	movs	r2, #1
     4f8:	4252      	negs	r2, r2
     4fa:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = TM1640_PINMUX_PAD1;
     4fc:	003b      	movs	r3, r7
     4fe:	2201      	movs	r2, #1
     500:	4252      	negs	r2, r2
     502:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = TM1640_PINMUX_PAD2;
     504:	003b      	movs	r3, r7
     506:	4a1e      	ldr	r2, [pc, #120]	; (580 <tm1640_init+0xdc>)
     508:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = TM1640_PINMUX_PAD3;
     50a:	003b      	movs	r3, r7
     50c:	2201      	movs	r2, #1
     50e:	4252      	negs	r2, r2
     510:	635a      	str	r2, [r3, #52]	; 0x34

    if (spi_init(&spi_module, TM1640_SERCOM, &config)) {
     512:	003a      	movs	r2, r7
     514:	491b      	ldr	r1, [pc, #108]	; (584 <tm1640_init+0xe0>)
     516:	4b1c      	ldr	r3, [pc, #112]	; (588 <tm1640_init+0xe4>)
     518:	0018      	movs	r0, r3
     51a:	4b1c      	ldr	r3, [pc, #112]	; (58c <tm1640_init+0xe8>)
     51c:	4798      	blx	r3
     51e:	1e03      	subs	r3, r0, #0
     520:	d004      	beq.n	52c <tm1640_init+0x88>
        printf("Failed to initialize TM1640_SERCOM!\n");
     522:	4b1b      	ldr	r3, [pc, #108]	; (590 <tm1640_init+0xec>)
     524:	0018      	movs	r0, r3
     526:	4b1b      	ldr	r3, [pc, #108]	; (594 <tm1640_init+0xf0>)
     528:	4798      	blx	r3
     52a:	e024      	b.n	576 <tm1640_init+0xd2>
        return;
    }

    spi_register_callback(&spi_module, spi_cb_buffer_transmitted, SPI_CALLBACK_BUFFER_TRANSMITTED);      
     52c:	491a      	ldr	r1, [pc, #104]	; (598 <tm1640_init+0xf4>)
     52e:	4b16      	ldr	r3, [pc, #88]	; (588 <tm1640_init+0xe4>)
     530:	2200      	movs	r2, #0
     532:	0018      	movs	r0, r3
     534:	4b19      	ldr	r3, [pc, #100]	; (59c <tm1640_init+0xf8>)
     536:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_BUFFER_TRANSMITTED);  
     538:	4b13      	ldr	r3, [pc, #76]	; (588 <tm1640_init+0xe4>)
     53a:	2100      	movs	r1, #0
     53c:	0018      	movs	r0, r3
     53e:	4b18      	ldr	r3, [pc, #96]	; (5a0 <tm1640_init+0xfc>)
     540:	4798      	blx	r3
    spi_register_callback(&spi_module, spi_cb_error, SPI_CALLBACK_ERROR);    
     542:	4918      	ldr	r1, [pc, #96]	; (5a4 <tm1640_init+0x100>)
     544:	4b10      	ldr	r3, [pc, #64]	; (588 <tm1640_init+0xe4>)
     546:	2203      	movs	r2, #3
     548:	0018      	movs	r0, r3
     54a:	4b14      	ldr	r3, [pc, #80]	; (59c <tm1640_init+0xf8>)
     54c:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_ERROR);
     54e:	4b0e      	ldr	r3, [pc, #56]	; (588 <tm1640_init+0xe4>)
     550:	2103      	movs	r1, #3
     552:	0018      	movs	r0, r3
     554:	4b12      	ldr	r3, [pc, #72]	; (5a0 <tm1640_init+0xfc>)
     556:	4798      	blx	r3

    NVIC_EnableIRQ(TM1640_IRQ);
     558:	200d      	movs	r0, #13
     55a:	4b13      	ldr	r3, [pc, #76]	; (5a8 <tm1640_init+0x104>)
     55c:	4798      	blx	r3
    spi_enable(&spi_module);
     55e:	4b0a      	ldr	r3, [pc, #40]	; (588 <tm1640_init+0xe4>)
     560:	0018      	movs	r0, r3
     562:	4b12      	ldr	r3, [pc, #72]	; (5ac <tm1640_init+0x108>)
     564:	4798      	blx	r3

    tm1640_sem = xSemaphoreCreateBinary();
     566:	2203      	movs	r2, #3
     568:	2100      	movs	r1, #0
     56a:	2001      	movs	r0, #1
     56c:	4b10      	ldr	r3, [pc, #64]	; (5b0 <tm1640_init+0x10c>)
     56e:	4798      	blx	r3
     570:	0002      	movs	r2, r0
     572:	4b10      	ldr	r3, [pc, #64]	; (5b4 <tm1640_init+0x110>)
     574:	601a      	str	r2, [r3, #0]
}
     576:	46bd      	mov	sp, r7
     578:	b00e      	add	sp, #56	; 0x38
     57a:	bd80      	pop	{r7, pc}
     57c:	00003a98 	.word	0x00003a98
     580:	002a0003 	.word	0x002a0003
     584:	42001800 	.word	0x42001800
     588:	20004448 	.word	0x20004448
     58c:	000050b9 	.word	0x000050b9
     590:	0000cc70 	.word	0x0000cc70
     594:	0000bcd1 	.word	0x0000bcd1
     598:	000003d9 	.word	0x000003d9
     59c:	000054c5 	.word	0x000054c5
     5a0:	0000036d 	.word	0x0000036d
     5a4:	00000489 	.word	0x00000489
     5a8:	00000205 	.word	0x00000205
     5ac:	000002ad 	.word	0x000002ad
     5b0:	00007cc9 	.word	0x00007cc9
     5b4:	20004484 	.word	0x20004484

000005b8 <tm1640_set_display>:

enum status_code tm1640_set_display(tm1640_display_t *disp, tm1640_brightness_t brightness)
{
     5b8:	b590      	push	{r4, r7, lr}
     5ba:	b085      	sub	sp, #20
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
     5c0:	000a      	movs	r2, r1
     5c2:	1cfb      	adds	r3, r7, #3
     5c4:	701a      	strb	r2, [r3, #0]
    enum status_code status;

    // Transactions have to be broken up into 3 segments because the data and clock need to go high
    // for a period of time between the data command, the address/display data, and the display control.
    // Start off with a single byte transfer and then keep the transaction moving with the callback.
    if (tm1640_get_state() == STATE_IDLE) {
     5c6:	4b30      	ldr	r3, [pc, #192]	; (688 <tm1640_set_display+0xd0>)
     5c8:	4798      	blx	r3
     5ca:	1e03      	subs	r3, r0, #0
     5cc:	d156      	bne.n	67c <tm1640_set_display+0xc4>
        tm1640_state = STATE_SET_DATA;
     5ce:	4b2f      	ldr	r3, [pc, #188]	; (68c <tm1640_set_display+0xd4>)
     5d0:	2201      	movs	r2, #1
     5d2:	701a      	strb	r2, [r3, #0]

        memcpy(&tm1640_display_pkt.disp_data, disp->grid, TM1640_GRIDS);
     5d4:	6879      	ldr	r1, [r7, #4]
     5d6:	4b2e      	ldr	r3, [pc, #184]	; (690 <tm1640_set_display+0xd8>)
     5d8:	2202      	movs	r2, #2
     5da:	189b      	adds	r3, r3, r2
     5dc:	2210      	movs	r2, #16
     5de:	0018      	movs	r0, r3
     5e0:	4b2c      	ldr	r3, [pc, #176]	; (694 <tm1640_set_display+0xdc>)
     5e2:	4798      	blx	r3
        tm1640_display_pkt.set_addr = ADDR_CMD_ADDR0;
     5e4:	4b2a      	ldr	r3, [pc, #168]	; (690 <tm1640_set_display+0xd8>)
     5e6:	22c0      	movs	r2, #192	; 0xc0
     5e8:	705a      	strb	r2, [r3, #1]
        tm1640_display_pkt.set_data = DATA_CMD_ADDR_INC;
     5ea:	4b29      	ldr	r3, [pc, #164]	; (690 <tm1640_set_display+0xd8>)
     5ec:	2240      	movs	r2, #64	; 0x40
     5ee:	701a      	strb	r2, [r3, #0]
        tm1640_display_pkt.brigtness = brightness;
     5f0:	4b27      	ldr	r3, [pc, #156]	; (690 <tm1640_set_display+0xd8>)
     5f2:	1cfa      	adds	r2, r7, #3
     5f4:	7812      	ldrb	r2, [r2, #0]
     5f6:	749a      	strb	r2, [r3, #18]
       
        // Take the display bus mutex
        if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
     5f8:	4b27      	ldr	r3, [pc, #156]	; (698 <tm1640_set_display+0xe0>)
     5fa:	6818      	ldr	r0, [r3, #0]
     5fc:	2301      	movs	r3, #1
     5fe:	425a      	negs	r2, r3
     600:	2300      	movs	r3, #0
     602:	2100      	movs	r1, #0
     604:	4c25      	ldr	r4, [pc, #148]	; (69c <tm1640_set_display+0xe4>)
     606:	47a0      	blx	r4
     608:	1e03      	subs	r3, r0, #0
     60a:	d101      	bne.n	610 <tm1640_set_display+0x58>
            // Timeout waiting for semaphore. Just return
            return STATUS_ERR_TIMEOUT;
     60c:	2312      	movs	r3, #18
     60e:	e036      	b.n	67e <tm1640_set_display+0xc6>
        }

        transfer_complete = 0;
     610:	4b23      	ldr	r3, [pc, #140]	; (6a0 <tm1640_set_display+0xe8>)
     612:	2200      	movs	r2, #0
     614:	701a      	strb	r2, [r3, #0]

        status = spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_data, 1);
     616:	230f      	movs	r3, #15
     618:	18fc      	adds	r4, r7, r3
     61a:	491d      	ldr	r1, [pc, #116]	; (690 <tm1640_set_display+0xd8>)
     61c:	4b21      	ldr	r3, [pc, #132]	; (6a4 <tm1640_set_display+0xec>)
     61e:	2201      	movs	r2, #1
     620:	0018      	movs	r0, r3
     622:	4b21      	ldr	r3, [pc, #132]	; (6a8 <tm1640_set_display+0xf0>)
     624:	4798      	blx	r3
     626:	0003      	movs	r3, r0
     628:	7023      	strb	r3, [r4, #0]

        // First byte needs to be started manually
        if (!status) {
     62a:	230f      	movs	r3, #15
     62c:	18fb      	adds	r3, r7, r3
     62e:	781b      	ldrb	r3, [r3, #0]
     630:	2b00      	cmp	r3, #0
     632:	d118      	bne.n	666 <tm1640_set_display+0xae>
            status = spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     634:	4b16      	ldr	r3, [pc, #88]	; (690 <tm1640_set_display+0xd8>)
     636:	781b      	ldrb	r3, [r3, #0]
     638:	b29a      	uxth	r2, r3
     63a:	230f      	movs	r3, #15
     63c:	18fc      	adds	r4, r7, r3
     63e:	4b19      	ldr	r3, [pc, #100]	; (6a4 <tm1640_set_display+0xec>)
     640:	0011      	movs	r1, r2
     642:	0018      	movs	r0, r3
     644:	4b19      	ldr	r3, [pc, #100]	; (6ac <tm1640_set_display+0xf4>)
     646:	4798      	blx	r3
     648:	0003      	movs	r3, r0
     64a:	7023      	strb	r3, [r4, #0]
            if (!status) {
     64c:	230f      	movs	r3, #15
     64e:	18fb      	adds	r3, r7, r3
     650:	781b      	ldrb	r3, [r3, #0]
     652:	2b00      	cmp	r3, #0
     654:	d107      	bne.n	666 <tm1640_set_display+0xae>
                xSemaphoreTake(tm1640_sem, portMAX_DELAY);
     656:	4b16      	ldr	r3, [pc, #88]	; (6b0 <tm1640_set_display+0xf8>)
     658:	6818      	ldr	r0, [r3, #0]
     65a:	2301      	movs	r3, #1
     65c:	425a      	negs	r2, r3
     65e:	2300      	movs	r3, #0
     660:	2100      	movs	r1, #0
     662:	4c0e      	ldr	r4, [pc, #56]	; (69c <tm1640_set_display+0xe4>)
     664:	47a0      	blx	r4
            }            
            // ISR will handle the rest of the transactions. TM1640 can give back the mutex after
            // the semaphore is given back by the ISR.            
        }   
                        
        xSemaphoreGive(display_mutex);     
     666:	4b0c      	ldr	r3, [pc, #48]	; (698 <tm1640_set_display+0xe0>)
     668:	6818      	ldr	r0, [r3, #0]
     66a:	2300      	movs	r3, #0
     66c:	2200      	movs	r2, #0
     66e:	2100      	movs	r1, #0
     670:	4c10      	ldr	r4, [pc, #64]	; (6b4 <tm1640_set_display+0xfc>)
     672:	47a0      	blx	r4
        return status;
     674:	230f      	movs	r3, #15
     676:	18fb      	adds	r3, r7, r3
     678:	781b      	ldrb	r3, [r3, #0]
     67a:	e000      	b.n	67e <tm1640_set_display+0xc6>
    }
    else
        return STATUS_BUSY;
     67c:	2305      	movs	r3, #5
}
     67e:	0018      	movs	r0, r3
     680:	46bd      	mov	sp, r7
     682:	b005      	add	sp, #20
     684:	bd90      	pop	{r4, r7, pc}
     686:	46c0      	nop			; (mov r8, r8)
     688:	000003a5 	.word	0x000003a5
     68c:	2000442c 	.word	0x2000442c
     690:	20004430 	.word	0x20004430
     694:	0000b5e9 	.word	0x0000b5e9
     698:	20004444 	.word	0x20004444
     69c:	000081fd 	.word	0x000081fd
     6a0:	20000000 	.word	0x20000000
     6a4:	20004448 	.word	0x20004448
     6a8:	0000550d 	.word	0x0000550d
     6ac:	00000325 	.word	0x00000325
     6b0:	20004484 	.word	0x20004484
     6b4:	00007dfd 	.word	0x00007dfd

000006b8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     6b8:	b580      	push	{r7, lr}
     6ba:	b082      	sub	sp, #8
     6bc:	af00      	add	r7, sp, #0
     6be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6c0:	687b      	ldr	r3, [r7, #4]
     6c2:	2280      	movs	r2, #128	; 0x80
     6c4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	2200      	movs	r2, #0
     6ca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6cc:	687b      	ldr	r3, [r7, #4]
     6ce:	2201      	movs	r2, #1
     6d0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	2200      	movs	r2, #0
     6d6:	70da      	strb	r2, [r3, #3]
}
     6d8:	46c0      	nop			; (mov r8, r8)
     6da:	46bd      	mov	sp, r7
     6dc:	b002      	add	sp, #8
     6de:	bd80      	pop	{r7, pc}

000006e0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     6e0:	b580      	push	{r7, lr}
     6e2:	b084      	sub	sp, #16
     6e4:	af00      	add	r7, sp, #0
     6e6:	0002      	movs	r2, r0
     6e8:	1dfb      	adds	r3, r7, #7
     6ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     6ec:	230f      	movs	r3, #15
     6ee:	18fb      	adds	r3, r7, r3
     6f0:	1dfa      	adds	r2, r7, #7
     6f2:	7812      	ldrb	r2, [r2, #0]
     6f4:	09d2      	lsrs	r2, r2, #7
     6f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     6f8:	230e      	movs	r3, #14
     6fa:	18fb      	adds	r3, r7, r3
     6fc:	1dfa      	adds	r2, r7, #7
     6fe:	7812      	ldrb	r2, [r2, #0]
     700:	0952      	lsrs	r2, r2, #5
     702:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     704:	4b0d      	ldr	r3, [pc, #52]	; (73c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     706:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     708:	230f      	movs	r3, #15
     70a:	18fb      	adds	r3, r7, r3
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	2b00      	cmp	r3, #0
     710:	d10f      	bne.n	732 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     712:	230f      	movs	r3, #15
     714:	18fb      	adds	r3, r7, r3
     716:	781b      	ldrb	r3, [r3, #0]
     718:	009b      	lsls	r3, r3, #2
     71a:	2210      	movs	r2, #16
     71c:	4694      	mov	ip, r2
     71e:	44bc      	add	ip, r7
     720:	4463      	add	r3, ip
     722:	3b08      	subs	r3, #8
     724:	681a      	ldr	r2, [r3, #0]
     726:	230e      	movs	r3, #14
     728:	18fb      	adds	r3, r7, r3
     72a:	781b      	ldrb	r3, [r3, #0]
     72c:	01db      	lsls	r3, r3, #7
     72e:	18d3      	adds	r3, r2, r3
     730:	e000      	b.n	734 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     732:	2300      	movs	r3, #0
	}
}
     734:	0018      	movs	r0, r3
     736:	46bd      	mov	sp, r7
     738:	b004      	add	sp, #16
     73a:	bd80      	pop	{r7, pc}
     73c:	41004400 	.word	0x41004400

00000740 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	0002      	movs	r2, r0
     748:	1dfb      	adds	r3, r7, #7
     74a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     74c:	4b06      	ldr	r3, [pc, #24]	; (768 <system_interrupt_enable+0x28>)
     74e:	1dfa      	adds	r2, r7, #7
     750:	7812      	ldrb	r2, [r2, #0]
     752:	0011      	movs	r1, r2
     754:	221f      	movs	r2, #31
     756:	400a      	ands	r2, r1
     758:	2101      	movs	r1, #1
     75a:	4091      	lsls	r1, r2
     75c:	000a      	movs	r2, r1
     75e:	601a      	str	r2, [r3, #0]
}
     760:	46c0      	nop			; (mov r8, r8)
     762:	46bd      	mov	sp, r7
     764:	b002      	add	sp, #8
     766:	bd80      	pop	{r7, pc}
     768:	e000e100 	.word	0xe000e100

0000076c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     76c:	b580      	push	{r7, lr}
     76e:	b082      	sub	sp, #8
     770:	af00      	add	r7, sp, #0
     772:	0002      	movs	r2, r0
     774:	1dfb      	adds	r3, r7, #7
     776:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     778:	1dfb      	adds	r3, r7, #7
     77a:	781b      	ldrb	r3, [r3, #0]
     77c:	0018      	movs	r0, r3
     77e:	4b03      	ldr	r3, [pc, #12]	; (78c <port_get_group_from_gpio_pin+0x20>)
     780:	4798      	blx	r3
     782:	0003      	movs	r3, r0
}
     784:	0018      	movs	r0, r3
     786:	46bd      	mov	sp, r7
     788:	b002      	add	sp, #8
     78a:	bd80      	pop	{r7, pc}
     78c:	000006e1 	.word	0x000006e1

00000790 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     790:	b580      	push	{r7, lr}
     792:	b084      	sub	sp, #16
     794:	af00      	add	r7, sp, #0
     796:	0002      	movs	r2, r0
     798:	1dfb      	adds	r3, r7, #7
     79a:	701a      	strb	r2, [r3, #0]
     79c:	1dbb      	adds	r3, r7, #6
     79e:	1c0a      	adds	r2, r1, #0
     7a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     7a2:	1dfb      	adds	r3, r7, #7
     7a4:	781b      	ldrb	r3, [r3, #0]
     7a6:	0018      	movs	r0, r3
     7a8:	4b0d      	ldr	r3, [pc, #52]	; (7e0 <port_pin_set_output_level+0x50>)
     7aa:	4798      	blx	r3
     7ac:	0003      	movs	r3, r0
     7ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     7b0:	1dfb      	adds	r3, r7, #7
     7b2:	781b      	ldrb	r3, [r3, #0]
     7b4:	221f      	movs	r2, #31
     7b6:	4013      	ands	r3, r2
     7b8:	2201      	movs	r2, #1
     7ba:	409a      	lsls	r2, r3
     7bc:	0013      	movs	r3, r2
     7be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     7c0:	1dbb      	adds	r3, r7, #6
     7c2:	781b      	ldrb	r3, [r3, #0]
     7c4:	2b00      	cmp	r3, #0
     7c6:	d003      	beq.n	7d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	68ba      	ldr	r2, [r7, #8]
     7cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     7ce:	e002      	b.n	7d6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     7d0:	68fb      	ldr	r3, [r7, #12]
     7d2:	68ba      	ldr	r2, [r7, #8]
     7d4:	615a      	str	r2, [r3, #20]
	}
}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	46bd      	mov	sp, r7
     7da:	b004      	add	sp, #16
     7dc:	bd80      	pop	{r7, pc}
     7de:	46c0      	nop			; (mov r8, r8)
     7e0:	0000076d 	.word	0x0000076d

000007e4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b084      	sub	sp, #16
     7e8:	af00      	add	r7, sp, #0
     7ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	681b      	ldr	r3, [r3, #0]
     7f0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	69db      	ldr	r3, [r3, #28]
     7f6:	1e5a      	subs	r2, r3, #1
     7f8:	4193      	sbcs	r3, r2
     7fa:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     7fc:	0018      	movs	r0, r3
     7fe:	46bd      	mov	sp, r7
     800:	b004      	add	sp, #16
     802:	bd80      	pop	{r7, pc}

00000804 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     804:	b580      	push	{r7, lr}
     806:	b082      	sub	sp, #8
     808:	af00      	add	r7, sp, #0
     80a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	2201      	movs	r2, #1
     810:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     812:	687b      	ldr	r3, [r7, #4]
     814:	2200      	movs	r2, #0
     816:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     818:	687b      	ldr	r3, [r7, #4]
     81a:	2200      	movs	r2, #0
     81c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     81e:	687b      	ldr	r3, [r7, #4]
     820:	22c0      	movs	r2, #192	; 0xc0
     822:	0392      	lsls	r2, r2, #14
     824:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     826:	687b      	ldr	r3, [r7, #4]
     828:	2200      	movs	r2, #0
     82a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	2200      	movs	r2, #0
     830:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     832:	687b      	ldr	r3, [r7, #4]
     834:	2201      	movs	r2, #1
     836:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     838:	687b      	ldr	r3, [r7, #4]
     83a:	2201      	movs	r2, #1
     83c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     83e:	687b      	ldr	r3, [r7, #4]
     840:	2200      	movs	r2, #0
     842:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     844:	687b      	ldr	r3, [r7, #4]
     846:	2224      	movs	r2, #36	; 0x24
     848:	2100      	movs	r1, #0
     84a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	3318      	adds	r3, #24
     850:	220c      	movs	r2, #12
     852:	2100      	movs	r1, #0
     854:	0018      	movs	r0, r3
     856:	4b0a      	ldr	r3, [pc, #40]	; (880 <spi_get_config_defaults+0x7c>)
     858:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	4a09      	ldr	r2, [pc, #36]	; (884 <spi_get_config_defaults+0x80>)
     85e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     860:	687b      	ldr	r3, [r7, #4]
     862:	2200      	movs	r2, #0
     864:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     866:	687b      	ldr	r3, [r7, #4]
     868:	2200      	movs	r2, #0
     86a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     86c:	687b      	ldr	r3, [r7, #4]
     86e:	2200      	movs	r2, #0
     870:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     872:	687b      	ldr	r3, [r7, #4]
     874:	2200      	movs	r2, #0
     876:	635a      	str	r2, [r3, #52]	; 0x34

};
     878:	46c0      	nop			; (mov r8, r8)
     87a:	46bd      	mov	sp, r7
     87c:	b002      	add	sp, #8
     87e:	bd80      	pop	{r7, pc}
     880:	0000b5fb 	.word	0x0000b5fb
     884:	000186a0 	.word	0x000186a0

00000888 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     888:	b580      	push	{r7, lr}
     88a:	b084      	sub	sp, #16
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     890:	687b      	ldr	r3, [r7, #4]
     892:	681b      	ldr	r3, [r3, #0]
     894:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     896:	687b      	ldr	r3, [r7, #4]
     898:	681b      	ldr	r3, [r3, #0]
     89a:	0018      	movs	r0, r3
     89c:	4b0b      	ldr	r3, [pc, #44]	; (8cc <spi_enable+0x44>)
     89e:	4798      	blx	r3
     8a0:	0003      	movs	r3, r0
     8a2:	0018      	movs	r0, r3
     8a4:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <spi_enable+0x48>)
     8a6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     8a8:	46c0      	nop			; (mov r8, r8)
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	0018      	movs	r0, r3
     8ae:	4b09      	ldr	r3, [pc, #36]	; (8d4 <spi_enable+0x4c>)
     8b0:	4798      	blx	r3
     8b2:	1e03      	subs	r3, r0, #0
     8b4:	d1f9      	bne.n	8aa <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     8b6:	68fb      	ldr	r3, [r7, #12]
     8b8:	681b      	ldr	r3, [r3, #0]
     8ba:	2202      	movs	r2, #2
     8bc:	431a      	orrs	r2, r3
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	601a      	str	r2, [r3, #0]
}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	46bd      	mov	sp, r7
     8c6:	b004      	add	sp, #16
     8c8:	bd80      	pop	{r7, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	00004b19 	.word	0x00004b19
     8d0:	00000741 	.word	0x00000741
     8d4:	000007e5 	.word	0x000007e5

000008d8 <wtc6508_init>:
struct spi_module wtc6508_module;

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
     8d8:	b580      	push	{r7, lr}
     8da:	b08e      	sub	sp, #56	; 0x38
     8dc:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
     8de:	003b      	movs	r3, r7
     8e0:	0018      	movs	r0, r3
     8e2:	4b1c      	ldr	r3, [pc, #112]	; (954 <wtc6508_init+0x7c>)
     8e4:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
     8e6:	003b      	movs	r3, r7
     8e8:	4a1b      	ldr	r2, [pc, #108]	; (958 <wtc6508_init+0x80>)
     8ea:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
     8ec:	003b      	movs	r3, r7
     8ee:	4a1b      	ldr	r2, [pc, #108]	; (95c <wtc6508_init+0x84>)
     8f0:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
     8f2:	003b      	movs	r3, r7
     8f4:	2201      	movs	r2, #1
     8f6:	4252      	negs	r2, r2
     8f8:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
     8fa:	003b      	movs	r3, r7
     8fc:	2201      	movs	r2, #1
     8fe:	4252      	negs	r2, r2
     900:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
     902:	003b      	movs	r3, r7
     904:	2280      	movs	r2, #128	; 0x80
     906:	0292      	lsls	r2, r2, #10
     908:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
     90a:	003b      	movs	r3, r7
     90c:	2200      	movs	r2, #0
     90e:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
     910:	003b      	movs	r3, r7
     912:	4a13      	ldr	r2, [pc, #76]	; (960 <wtc6508_init+0x88>)
     914:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
     916:	003b      	movs	r3, r7
     918:	22c0      	movs	r2, #192	; 0xc0
     91a:	0592      	lsls	r2, r2, #22
     91c:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
     91e:	003b      	movs	r3, r7
     920:	2224      	movs	r2, #36	; 0x24
     922:	2104      	movs	r1, #4
     924:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
     926:	003b      	movs	r3, r7
     928:	2200      	movs	r2, #0
     92a:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
     92c:	003a      	movs	r2, r7
     92e:	490d      	ldr	r1, [pc, #52]	; (964 <wtc6508_init+0x8c>)
     930:	4b0d      	ldr	r3, [pc, #52]	; (968 <wtc6508_init+0x90>)
     932:	0018      	movs	r0, r3
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <wtc6508_init+0x94>)
     936:	4798      	blx	r3
     938:	1e03      	subs	r3, r0, #0
     93a:	d004      	beq.n	946 <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
     93c:	4b0c      	ldr	r3, [pc, #48]	; (970 <wtc6508_init+0x98>)
     93e:	0018      	movs	r0, r3
     940:	4b0c      	ldr	r3, [pc, #48]	; (974 <wtc6508_init+0x9c>)
     942:	4798      	blx	r3
     944:	e003      	b.n	94e <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
     946:	4b08      	ldr	r3, [pc, #32]	; (968 <wtc6508_init+0x90>)
     948:	0018      	movs	r0, r3
     94a:	4b0b      	ldr	r3, [pc, #44]	; (978 <wtc6508_init+0xa0>)
     94c:	4798      	blx	r3
}
     94e:	46bd      	mov	sp, r7
     950:	b00e      	add	sp, #56	; 0x38
     952:	bd80      	pop	{r7, pc}
     954:	00000805 	.word	0x00000805
     958:	00080002 	.word	0x00080002
     95c:	00090002 	.word	0x00090002
     960:	00003a98 	.word	0x00003a98
     964:	42000800 	.word	0x42000800
     968:	20004488 	.word	0x20004488
     96c:	000050b9 	.word	0x000050b9
     970:	0000cc94 	.word	0x0000cc94
     974:	0000bcd1 	.word	0x0000bcd1
     978:	00000889 	.word	0x00000889

0000097c <delay_us_nop>:

static void delay_us_nop(uint32_t us_delay)
{
     97c:	b580      	push	{r7, lr}
     97e:	b084      	sub	sp, #16
     980:	af00      	add	r7, sp, #0
     982:	6078      	str	r0, [r7, #4]
    uint32_t delay_ticks = us_delay * N_NOP_PER_US;
     984:	687a      	ldr	r2, [r7, #4]
     986:	0013      	movs	r3, r2
     988:	005b      	lsls	r3, r3, #1
     98a:	189b      	adds	r3, r3, r2
     98c:	011b      	lsls	r3, r3, #4
     98e:	60fb      	str	r3, [r7, #12]

    while (delay_ticks-- > 0) {
     990:	e000      	b.n	994 <delay_us_nop+0x18>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
     992:	46c0      	nop			; (mov r8, r8)
     994:	68fb      	ldr	r3, [r7, #12]
     996:	1e5a      	subs	r2, r3, #1
     998:	60fa      	str	r2, [r7, #12]
     99a:	2b00      	cmp	r3, #0
     99c:	d1f9      	bne.n	992 <delay_us_nop+0x16>
        nop();
    }
}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	46bd      	mov	sp, r7
     9a2:	b004      	add	sp, #16
     9a4:	bd80      	pop	{r7, pc}
     9a6:	46c0      	nop			; (mov r8, r8)

000009a8 <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
     9a8:	b5b0      	push	{r4, r5, r7, lr}
     9aa:	b086      	sub	sp, #24
     9ac:	af00      	add	r7, sp, #0
     9ae:	6078      	str	r0, [r7, #4]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
     9b0:	2310      	movs	r3, #16
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	2201      	movs	r2, #1
     9b6:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
     9b8:	2310      	movs	r3, #16
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	2201      	movs	r2, #1
     9be:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
     9c0:	2310      	movs	r3, #16
     9c2:	18fb      	adds	r3, r7, r3
     9c4:	2200      	movs	r2, #0
     9c6:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
     9c8:	2314      	movs	r3, #20
     9ca:	18fb      	adds	r3, r7, r3
     9cc:	2200      	movs	r2, #0
     9ce:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
     9d0:	2314      	movs	r3, #20
     9d2:	18fb      	adds	r3, r7, r3
     9d4:	2201      	movs	r2, #1
     9d6:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
     9d8:	2314      	movs	r3, #20
     9da:	18fb      	adds	r3, r7, r3
     9dc:	2200      	movs	r2, #0
     9de:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
     9e0:	230c      	movs	r3, #12
     9e2:	18fb      	adds	r3, r7, r3
     9e4:	0018      	movs	r0, r3
     9e6:	4b42      	ldr	r3, [pc, #264]	; (af0 <wtc6508_read+0x148>)
     9e8:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9ea:	230c      	movs	r3, #12
     9ec:	18fb      	adds	r3, r7, r3
     9ee:	2200      	movs	r2, #0
     9f0:	705a      	strb	r2, [r3, #1]

    // Take the display bus semaphore
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
     9f2:	4b40      	ldr	r3, [pc, #256]	; (af4 <wtc6508_read+0x14c>)
     9f4:	6818      	ldr	r0, [r3, #0]
     9f6:	2301      	movs	r3, #1
     9f8:	425a      	negs	r2, r3
     9fa:	2300      	movs	r3, #0
     9fc:	2100      	movs	r1, #0
     9fe:	4c3e      	ldr	r4, [pc, #248]	; (af8 <wtc6508_read+0x150>)
     a00:	47a0      	blx	r4
     a02:	1e03      	subs	r3, r0, #0
     a04:	d101      	bne.n	a0a <wtc6508_read+0x62>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
     a06:	2312      	movs	r3, #18
     a08:	e06d      	b.n	ae6 <wtc6508_read+0x13e>
    }

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    vTaskSuspendAll();
     a0a:	4b3c      	ldr	r3, [pc, #240]	; (afc <wtc6508_read+0x154>)
     a0c:	4798      	blx	r3

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
     a0e:	2310      	movs	r3, #16
     a10:	18fb      	adds	r3, r7, r3
     a12:	0019      	movs	r1, r3
     a14:	2009      	movs	r0, #9
     a16:	4b3a      	ldr	r3, [pc, #232]	; (b00 <wtc6508_read+0x158>)
     a18:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
     a1a:	2314      	movs	r3, #20
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	0019      	movs	r1, r3
     a20:	2008      	movs	r0, #8
     a22:	4b37      	ldr	r3, [pc, #220]	; (b00 <wtc6508_read+0x158>)
     a24:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
     a26:	2100      	movs	r1, #0
     a28:	2009      	movs	r0, #9
     a2a:	4b36      	ldr	r3, [pc, #216]	; (b04 <wtc6508_read+0x15c>)
     a2c:	4798      	blx	r3
    delay_us_nop(3);
     a2e:	2003      	movs	r0, #3
     a30:	4b35      	ldr	r3, [pc, #212]	; (b08 <wtc6508_read+0x160>)
     a32:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
     a34:	2101      	movs	r1, #1
     a36:	2009      	movs	r0, #9
     a38:	4b32      	ldr	r3, [pc, #200]	; (b04 <wtc6508_read+0x15c>)
     a3a:	4798      	blx	r3
    //delay_us_nop(3);

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
     a3c:	230c      	movs	r3, #12
     a3e:	18fb      	adds	r3, r7, r3
     a40:	2202      	movs	r2, #2
     a42:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
     a44:	230c      	movs	r3, #12
     a46:	18fb      	adds	r3, r7, r3
     a48:	0019      	movs	r1, r3
     a4a:	2008      	movs	r0, #8
     a4c:	4b2f      	ldr	r3, [pc, #188]	; (b0c <wtc6508_read+0x164>)
     a4e:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
     a50:	230c      	movs	r3, #12
     a52:	18fb      	adds	r3, r7, r3
     a54:	2202      	movs	r2, #2
     a56:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
     a58:	230c      	movs	r3, #12
     a5a:	18fb      	adds	r3, r7, r3
     a5c:	0019      	movs	r1, r3
     a5e:	2009      	movs	r0, #9
     a60:	4b2a      	ldr	r3, [pc, #168]	; (b0c <wtc6508_read+0x164>)
     a62:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
     a64:	2317      	movs	r3, #23
     a66:	18fc      	adds	r4, r7, r3
     a68:	6879      	ldr	r1, [r7, #4]
     a6a:	4829      	ldr	r0, [pc, #164]	; (b10 <wtc6508_read+0x168>)
     a6c:	2300      	movs	r3, #0
     a6e:	2201      	movs	r2, #1
     a70:	4d28      	ldr	r5, [pc, #160]	; (b14 <wtc6508_read+0x16c>)
     a72:	47a8      	blx	r5
     a74:	0003      	movs	r3, r0
     a76:	7023      	strb	r3, [r4, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
     a78:	2310      	movs	r3, #16
     a7a:	18fb      	adds	r3, r7, r3
     a7c:	0019      	movs	r1, r3
     a7e:	2009      	movs	r0, #9
     a80:	4b1f      	ldr	r3, [pc, #124]	; (b00 <wtc6508_read+0x158>)
     a82:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
     a84:	2314      	movs	r3, #20
     a86:	18fb      	adds	r3, r7, r3
     a88:	0019      	movs	r1, r3
     a8a:	2008      	movs	r0, #8
     a8c:	4b1c      	ldr	r3, [pc, #112]	; (b00 <wtc6508_read+0x158>)
     a8e:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
     a90:	2100      	movs	r1, #0
     a92:	2009      	movs	r0, #9
     a94:	4b1b      	ldr	r3, [pc, #108]	; (b04 <wtc6508_read+0x15c>)
     a96:	4798      	blx	r3
    delay_us_nop(3);
     a98:	2003      	movs	r0, #3
     a9a:	4b1b      	ldr	r3, [pc, #108]	; (b08 <wtc6508_read+0x160>)
     a9c:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);
     a9e:	2101      	movs	r1, #1
     aa0:	2009      	movs	r0, #9
     aa2:	4b18      	ldr	r3, [pc, #96]	; (b04 <wtc6508_read+0x15c>)
     aa4:	4798      	blx	r3
    //delay_us_nop(3);

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
     aa6:	230c      	movs	r3, #12
     aa8:	18fb      	adds	r3, r7, r3
     aaa:	2202      	movs	r2, #2
     aac:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
     aae:	230c      	movs	r3, #12
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	0019      	movs	r1, r3
     ab4:	2008      	movs	r0, #8
     ab6:	4b15      	ldr	r3, [pc, #84]	; (b0c <wtc6508_read+0x164>)
     ab8:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
     aba:	230c      	movs	r3, #12
     abc:	18fb      	adds	r3, r7, r3
     abe:	2202      	movs	r2, #2
     ac0:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);    
     ac2:	230c      	movs	r3, #12
     ac4:	18fb      	adds	r3, r7, r3
     ac6:	0019      	movs	r1, r3
     ac8:	2009      	movs	r0, #9
     aca:	4b10      	ldr	r3, [pc, #64]	; (b0c <wtc6508_read+0x164>)
     acc:	4798      	blx	r3

    xTaskResumeAll();
     ace:	4b12      	ldr	r3, [pc, #72]	; (b18 <wtc6508_read+0x170>)
     ad0:	4798      	blx	r3

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
     ad2:	4b08      	ldr	r3, [pc, #32]	; (af4 <wtc6508_read+0x14c>)
     ad4:	6818      	ldr	r0, [r3, #0]
     ad6:	2300      	movs	r3, #0
     ad8:	2200      	movs	r2, #0
     ada:	2100      	movs	r1, #0
     adc:	4c0f      	ldr	r4, [pc, #60]	; (b1c <wtc6508_read+0x174>)
     ade:	47a0      	blx	r4

    return ret;
     ae0:	2317      	movs	r3, #23
     ae2:	18fb      	adds	r3, r7, r3
     ae4:	781b      	ldrb	r3, [r3, #0]
}
     ae6:	0018      	movs	r0, r3
     ae8:	46bd      	mov	sp, r7
     aea:	b006      	add	sp, #24
     aec:	bdb0      	pop	{r4, r5, r7, pc}
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	000006b9 	.word	0x000006b9
     af4:	20004444 	.word	0x20004444
     af8:	000081fd 	.word	0x000081fd
     afc:	00008b71 	.word	0x00008b71
     b00:	0000437d 	.word	0x0000437d
     b04:	00000791 	.word	0x00000791
     b08:	0000097d 	.word	0x0000097d
     b0c:	000073ed 	.word	0x000073ed
     b10:	20004488 	.word	0x20004488
     b14:	00005249 	.word	0x00005249
     b18:	00008b89 	.word	0x00008b89
     b1c:	00007dfd 	.word	0x00007dfd

00000b20 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     b20:	b580      	push	{r7, lr}
     b22:	b082      	sub	sp, #8
     b24:	af00      	add	r7, sp, #0
     b26:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     b28:	687b      	ldr	r3, [r7, #4]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d00c      	beq.n	b48 <delay_cycles+0x28>
		SysTick->LOAD = n;
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <delay_cycles+0x30>)
     b30:	687a      	ldr	r2, [r7, #4]
     b32:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     b34:	4b06      	ldr	r3, [pc, #24]	; (b50 <delay_cycles+0x30>)
     b36:	2200      	movs	r2, #0
     b38:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <delay_cycles+0x30>)
     b3e:	681a      	ldr	r2, [r3, #0]
     b40:	2380      	movs	r3, #128	; 0x80
     b42:	025b      	lsls	r3, r3, #9
     b44:	4013      	ands	r3, r2
     b46:	d0f9      	beq.n	b3c <delay_cycles+0x1c>
		};
	}
}
     b48:	46c0      	nop			; (mov r8, r8)
     b4a:	46bd      	mov	sp, r7
     b4c:	b002      	add	sp, #8
     b4e:	bd80      	pop	{r7, pc}
     b50:	e000e010 	.word	0xe000e010

00000b54 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b54:	b580      	push	{r7, lr}
     b56:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b58:	2000      	movs	r0, #0
     b5a:	4b0f      	ldr	r3, [pc, #60]	; (b98 <delay_init+0x44>)
     b5c:	4798      	blx	r3
     b5e:	0002      	movs	r2, r0
     b60:	4b0e      	ldr	r3, [pc, #56]	; (b9c <delay_init+0x48>)
     b62:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     b64:	4b0d      	ldr	r3, [pc, #52]	; (b9c <delay_init+0x48>)
     b66:	6818      	ldr	r0, [r3, #0]
     b68:	4b0d      	ldr	r3, [pc, #52]	; (ba0 <delay_init+0x4c>)
     b6a:	22fa      	movs	r2, #250	; 0xfa
     b6c:	0091      	lsls	r1, r2, #2
     b6e:	4798      	blx	r3
     b70:	0003      	movs	r3, r0
     b72:	001a      	movs	r2, r3
     b74:	4b09      	ldr	r3, [pc, #36]	; (b9c <delay_init+0x48>)
     b76:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     b78:	4b08      	ldr	r3, [pc, #32]	; (b9c <delay_init+0x48>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <delay_init+0x4c>)
     b7e:	22fa      	movs	r2, #250	; 0xfa
     b80:	0091      	lsls	r1, r2, #2
     b82:	4798      	blx	r3
     b84:	0003      	movs	r3, r0
     b86:	001a      	movs	r2, r3
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <delay_init+0x50>)
     b8a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     b8c:	4b06      	ldr	r3, [pc, #24]	; (ba8 <delay_init+0x54>)
     b8e:	2205      	movs	r2, #5
     b90:	601a      	str	r2, [r3, #0]
}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	46bd      	mov	sp, r7
     b96:	bd80      	pop	{r7, pc}
     b98:	00007029 	.word	0x00007029
     b9c:	20000004 	.word	0x20000004
     ba0:	0000ac5d 	.word	0x0000ac5d
     ba4:	20000008 	.word	0x20000008
     ba8:	e000e010 	.word	0xe000e010

00000bac <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     bac:	b580      	push	{r7, lr}
     bae:	b082      	sub	sp, #8
     bb0:	af00      	add	r7, sp, #0
     bb2:	6078      	str	r0, [r7, #4]
	while (n--) {
     bb4:	e004      	b.n	bc0 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     bb6:	4b07      	ldr	r3, [pc, #28]	; (bd4 <delay_cycles_ms+0x28>)
     bb8:	681b      	ldr	r3, [r3, #0]
     bba:	0018      	movs	r0, r3
     bbc:	4b06      	ldr	r3, [pc, #24]	; (bd8 <delay_cycles_ms+0x2c>)
     bbe:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	1e5a      	subs	r2, r3, #1
     bc4:	607a      	str	r2, [r7, #4]
     bc6:	2b00      	cmp	r3, #0
     bc8:	d1f5      	bne.n	bb6 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	46bd      	mov	sp, r7
     bce:	b002      	add	sp, #8
     bd0:	bd80      	pop	{r7, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	20000004 	.word	0x20000004
     bd8:	00000b21 	.word	0x00000b21

00000bdc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     bdc:	b580      	push	{r7, lr}
     bde:	b084      	sub	sp, #16
     be0:	af00      	add	r7, sp, #0
     be2:	0002      	movs	r2, r0
     be4:	1dfb      	adds	r3, r7, #7
     be6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     be8:	230f      	movs	r3, #15
     bea:	18fb      	adds	r3, r7, r3
     bec:	1dfa      	adds	r2, r7, #7
     bee:	7812      	ldrb	r2, [r2, #0]
     bf0:	09d2      	lsrs	r2, r2, #7
     bf2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     bf4:	230e      	movs	r3, #14
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	1dfa      	adds	r2, r7, #7
     bfa:	7812      	ldrb	r2, [r2, #0]
     bfc:	0952      	lsrs	r2, r2, #5
     bfe:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     c00:	4b0d      	ldr	r3, [pc, #52]	; (c38 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     c02:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     c04:	230f      	movs	r3, #15
     c06:	18fb      	adds	r3, r7, r3
     c08:	781b      	ldrb	r3, [r3, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d10f      	bne.n	c2e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     c0e:	230f      	movs	r3, #15
     c10:	18fb      	adds	r3, r7, r3
     c12:	781b      	ldrb	r3, [r3, #0]
     c14:	009b      	lsls	r3, r3, #2
     c16:	2210      	movs	r2, #16
     c18:	4694      	mov	ip, r2
     c1a:	44bc      	add	ip, r7
     c1c:	4463      	add	r3, ip
     c1e:	3b08      	subs	r3, #8
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	230e      	movs	r3, #14
     c24:	18fb      	adds	r3, r7, r3
     c26:	781b      	ldrb	r3, [r3, #0]
     c28:	01db      	lsls	r3, r3, #7
     c2a:	18d3      	adds	r3, r2, r3
     c2c:	e000      	b.n	c30 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     c2e:	2300      	movs	r3, #0
	}
}
     c30:	0018      	movs	r0, r3
     c32:	46bd      	mov	sp, r7
     c34:	b004      	add	sp, #16
     c36:	bd80      	pop	{r7, pc}
     c38:	41004400 	.word	0x41004400

00000c3c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     c40:	4b04      	ldr	r3, [pc, #16]	; (c54 <system_interrupt_enable_global+0x18>)
     c42:	2201      	movs	r2, #1
     c44:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c46:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     c4a:	b662      	cpsie	i
}
     c4c:	46c0      	nop			; (mov r8, r8)
     c4e:	46bd      	mov	sp, r7
     c50:	bd80      	pop	{r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	20000014 	.word	0x20000014

00000c58 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     c58:	b580      	push	{r7, lr}
     c5a:	b082      	sub	sp, #8
     c5c:	af00      	add	r7, sp, #0
     c5e:	0002      	movs	r2, r0
     c60:	1dfb      	adds	r3, r7, #7
     c62:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     c64:	1dfb      	adds	r3, r7, #7
     c66:	781b      	ldrb	r3, [r3, #0]
     c68:	0018      	movs	r0, r3
     c6a:	4b03      	ldr	r3, [pc, #12]	; (c78 <port_get_group_from_gpio_pin+0x20>)
     c6c:	4798      	blx	r3
     c6e:	0003      	movs	r3, r0
}
     c70:	0018      	movs	r0, r3
     c72:	46bd      	mov	sp, r7
     c74:	b002      	add	sp, #8
     c76:	bd80      	pop	{r7, pc}
     c78:	00000bdd 	.word	0x00000bdd

00000c7c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     c84:	687b      	ldr	r3, [r7, #4]
     c86:	2200      	movs	r2, #0
     c88:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	2201      	movs	r2, #1
     c8e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     c90:	687b      	ldr	r3, [r7, #4]
     c92:	2200      	movs	r2, #0
     c94:	709a      	strb	r2, [r3, #2]
}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	46bd      	mov	sp, r7
     c9a:	b002      	add	sp, #8
     c9c:	bd80      	pop	{r7, pc}
     c9e:	46c0      	nop			; (mov r8, r8)

00000ca0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	b084      	sub	sp, #16
     ca4:	af00      	add	r7, sp, #0
     ca6:	0002      	movs	r2, r0
     ca8:	1dfb      	adds	r3, r7, #7
     caa:	701a      	strb	r2, [r3, #0]
     cac:	1dbb      	adds	r3, r7, #6
     cae:	1c0a      	adds	r2, r1, #0
     cb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     cb2:	1dfb      	adds	r3, r7, #7
     cb4:	781b      	ldrb	r3, [r3, #0]
     cb6:	0018      	movs	r0, r3
     cb8:	4b0d      	ldr	r3, [pc, #52]	; (cf0 <port_pin_set_output_level+0x50>)
     cba:	4798      	blx	r3
     cbc:	0003      	movs	r3, r0
     cbe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cc0:	1dfb      	adds	r3, r7, #7
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	221f      	movs	r2, #31
     cc6:	4013      	ands	r3, r2
     cc8:	2201      	movs	r2, #1
     cca:	409a      	lsls	r2, r3
     ccc:	0013      	movs	r3, r2
     cce:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     cd0:	1dbb      	adds	r3, r7, #6
     cd2:	781b      	ldrb	r3, [r3, #0]
     cd4:	2b00      	cmp	r3, #0
     cd6:	d003      	beq.n	ce0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     cd8:	68fb      	ldr	r3, [r7, #12]
     cda:	68ba      	ldr	r2, [r7, #8]
     cdc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     cde:	e002      	b.n	ce6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     ce0:	68fb      	ldr	r3, [r7, #12]
     ce2:	68ba      	ldr	r2, [r7, #8]
     ce4:	615a      	str	r2, [r3, #20]
	}
}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	46bd      	mov	sp, r7
     cea:	b004      	add	sp, #16
     cec:	bd80      	pop	{r7, pc}
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	00000c59 	.word	0x00000c59

00000cf4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     cf4:	b580      	push	{r7, lr}
     cf6:	b082      	sub	sp, #8
     cf8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     cfa:	1d3b      	adds	r3, r7, #4
     cfc:	0018      	movs	r0, r3
     cfe:	4b0c      	ldr	r3, [pc, #48]	; (d30 <init_chip_pins+0x3c>)
     d00:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d02:	1d3b      	adds	r3, r7, #4
     d04:	2201      	movs	r2, #1
     d06:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     d08:	1d3b      	adds	r3, r7, #4
     d0a:	0019      	movs	r1, r3
     d0c:	201b      	movs	r0, #27
     d0e:	4b09      	ldr	r3, [pc, #36]	; (d34 <init_chip_pins+0x40>)
     d10:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     d12:	1d3b      	adds	r3, r7, #4
     d14:	0019      	movs	r1, r3
     d16:	201c      	movs	r0, #28
     d18:	4b06      	ldr	r3, [pc, #24]	; (d34 <init_chip_pins+0x40>)
     d1a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     d1c:	1d3b      	adds	r3, r7, #4
     d1e:	0019      	movs	r1, r3
     d20:	2028      	movs	r0, #40	; 0x28
     d22:	4b04      	ldr	r3, [pc, #16]	; (d34 <init_chip_pins+0x40>)
     d24:	4798      	blx	r3
}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	46bd      	mov	sp, r7
     d2a:	b002      	add	sp, #8
     d2c:	bd80      	pop	{r7, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	00000c7d 	.word	0x00000c7d
     d34:	0000437d 	.word	0x0000437d

00000d38 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     d38:	b580      	push	{r7, lr}
     d3a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     d3c:	4b0c      	ldr	r3, [pc, #48]	; (d70 <nm_bsp_init+0x38>)
     d3e:	2200      	movs	r2, #0
     d40:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     d42:	4b0c      	ldr	r3, [pc, #48]	; (d74 <nm_bsp_init+0x3c>)
     d44:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     d46:	4b0c      	ldr	r3, [pc, #48]	; (d78 <nm_bsp_init+0x40>)
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	2201      	movs	r2, #1
     d4c:	4013      	ands	r3, r2
     d4e:	d004      	beq.n	d5a <nm_bsp_init+0x22>
     d50:	4b09      	ldr	r3, [pc, #36]	; (d78 <nm_bsp_init+0x40>)
     d52:	681b      	ldr	r3, [r3, #0]
     d54:	2202      	movs	r2, #2
     d56:	4013      	ands	r3, r2
     d58:	d101      	bne.n	d5e <nm_bsp_init+0x26>
	    delay_init();
     d5a:	4b08      	ldr	r3, [pc, #32]	; (d7c <nm_bsp_init+0x44>)
     d5c:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     d5e:	4b08      	ldr	r3, [pc, #32]	; (d80 <nm_bsp_init+0x48>)
     d60:	4798      	blx	r3

	system_interrupt_enable_global();
     d62:	4b08      	ldr	r3, [pc, #32]	; (d84 <nm_bsp_init+0x4c>)
     d64:	4798      	blx	r3

	return M2M_SUCCESS;
     d66:	2300      	movs	r3, #0
}
     d68:	0018      	movs	r0, r3
     d6a:	46bd      	mov	sp, r7
     d6c:	bd80      	pop	{r7, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	200000b8 	.word	0x200000b8
     d74:	00000cf5 	.word	0x00000cf5
     d78:	e000e010 	.word	0xe000e010
     d7c:	00000b55 	.word	0x00000b55
     d80:	00000d89 	.word	0x00000d89
     d84:	00000c3d 	.word	0x00000c3d

00000d88 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     d88:	b580      	push	{r7, lr}
     d8a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     d8c:	2100      	movs	r1, #0
     d8e:	201c      	movs	r0, #28
     d90:	4b0c      	ldr	r3, [pc, #48]	; (dc4 <nm_bsp_reset+0x3c>)
     d92:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     d94:	2100      	movs	r1, #0
     d96:	201b      	movs	r0, #27
     d98:	4b0a      	ldr	r3, [pc, #40]	; (dc4 <nm_bsp_reset+0x3c>)
     d9a:	4798      	blx	r3
	nm_bsp_sleep(100);
     d9c:	2064      	movs	r0, #100	; 0x64
     d9e:	4b0a      	ldr	r3, [pc, #40]	; (dc8 <nm_bsp_reset+0x40>)
     da0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     da2:	2101      	movs	r1, #1
     da4:	201c      	movs	r0, #28
     da6:	4b07      	ldr	r3, [pc, #28]	; (dc4 <nm_bsp_reset+0x3c>)
     da8:	4798      	blx	r3
	nm_bsp_sleep(10);
     daa:	200a      	movs	r0, #10
     dac:	4b06      	ldr	r3, [pc, #24]	; (dc8 <nm_bsp_reset+0x40>)
     dae:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     db0:	2101      	movs	r1, #1
     db2:	201b      	movs	r0, #27
     db4:	4b03      	ldr	r3, [pc, #12]	; (dc4 <nm_bsp_reset+0x3c>)
     db6:	4798      	blx	r3
	nm_bsp_sleep(10);
     db8:	200a      	movs	r0, #10
     dba:	4b03      	ldr	r3, [pc, #12]	; (dc8 <nm_bsp_reset+0x40>)
     dbc:	4798      	blx	r3
}
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	46bd      	mov	sp, r7
     dc2:	bd80      	pop	{r7, pc}
     dc4:	00000ca1 	.word	0x00000ca1
     dc8:	00000dcd 	.word	0x00000dcd

00000dcc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     dcc:	b580      	push	{r7, lr}
     dce:	b082      	sub	sp, #8
     dd0:	af00      	add	r7, sp, #0
     dd2:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     dd4:	e002      	b.n	ddc <nm_bsp_sleep+0x10>
		delay_ms(1);
     dd6:	2001      	movs	r0, #1
     dd8:	4b05      	ldr	r3, [pc, #20]	; (df0 <nm_bsp_sleep+0x24>)
     dda:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     ddc:	687b      	ldr	r3, [r7, #4]
     dde:	1e5a      	subs	r2, r3, #1
     de0:	607a      	str	r2, [r7, #4]
     de2:	2b00      	cmp	r3, #0
     de4:	d1f7      	bne.n	dd6 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	46bd      	mov	sp, r7
     dea:	b002      	add	sp, #8
     dec:	bd80      	pop	{r7, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00000bad 	.word	0x00000bad

00000df4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     df4:	b580      	push	{r7, lr}
     df6:	b082      	sub	sp, #8
     df8:	af00      	add	r7, sp, #0
     dfa:	0002      	movs	r2, r0
     dfc:	1dfb      	adds	r3, r7, #7
     dfe:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     e00:	1dfb      	adds	r3, r7, #7
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	2b00      	cmp	r3, #0
     e06:	d004      	beq.n	e12 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     e08:	2100      	movs	r1, #0
     e0a:	2009      	movs	r0, #9
     e0c:	4b05      	ldr	r3, [pc, #20]	; (e24 <nm_bsp_interrupt_ctrl+0x30>)
     e0e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e10:	e003      	b.n	e1a <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     e12:	2100      	movs	r1, #0
     e14:	2009      	movs	r0, #9
     e16:	4b04      	ldr	r3, [pc, #16]	; (e28 <nm_bsp_interrupt_ctrl+0x34>)
     e18:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	46bd      	mov	sp, r7
     e1e:	b002      	add	sp, #8
     e20:	bd80      	pop	{r7, pc}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	0000402d 	.word	0x0000402d
     e28:	00004075 	.word	0x00004075

00000e2c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     e2c:	b580      	push	{r7, lr}
     e2e:	b084      	sub	sp, #16
     e30:	af00      	add	r7, sp, #0
     e32:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e34:	687b      	ldr	r3, [r7, #4]
     e36:	681b      	ldr	r3, [r3, #0]
     e38:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     e3a:	68fb      	ldr	r3, [r7, #12]
     e3c:	7e1b      	ldrb	r3, [r3, #24]
     e3e:	b2db      	uxtb	r3, r3
     e40:	001a      	movs	r2, r3
     e42:	2302      	movs	r3, #2
     e44:	4013      	ands	r3, r2
     e46:	1e5a      	subs	r2, r3, #1
     e48:	4193      	sbcs	r3, r2
     e4a:	b2db      	uxtb	r3, r3
}
     e4c:	0018      	movs	r0, r3
     e4e:	46bd      	mov	sp, r7
     e50:	b004      	add	sp, #16
     e52:	bd80      	pop	{r7, pc}

00000e54 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     e54:	b580      	push	{r7, lr}
     e56:	b084      	sub	sp, #16
     e58:	af00      	add	r7, sp, #0
     e5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e5c:	687b      	ldr	r3, [r7, #4]
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     e62:	68fb      	ldr	r3, [r7, #12]
     e64:	7e1b      	ldrb	r3, [r3, #24]
     e66:	b2db      	uxtb	r3, r3
     e68:	001a      	movs	r2, r3
     e6a:	2301      	movs	r3, #1
     e6c:	4013      	ands	r3, r2
     e6e:	1e5a      	subs	r2, r3, #1
     e70:	4193      	sbcs	r3, r2
     e72:	b2db      	uxtb	r3, r3
}
     e74:	0018      	movs	r0, r3
     e76:	46bd      	mov	sp, r7
     e78:	b004      	add	sp, #16
     e7a:	bd80      	pop	{r7, pc}

00000e7c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	b084      	sub	sp, #16
     e80:	af00      	add	r7, sp, #0
     e82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e84:	687b      	ldr	r3, [r7, #4]
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     e8a:	68fb      	ldr	r3, [r7, #12]
     e8c:	7e1b      	ldrb	r3, [r3, #24]
     e8e:	b2db      	uxtb	r3, r3
     e90:	001a      	movs	r2, r3
     e92:	2304      	movs	r3, #4
     e94:	4013      	ands	r3, r2
     e96:	1e5a      	subs	r2, r3, #1
     e98:	4193      	sbcs	r3, r2
     e9a:	b2db      	uxtb	r3, r3
}
     e9c:	0018      	movs	r0, r3
     e9e:	46bd      	mov	sp, r7
     ea0:	b004      	add	sp, #16
     ea2:	bd80      	pop	{r7, pc}

00000ea4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     ea4:	b580      	push	{r7, lr}
     ea6:	b084      	sub	sp, #16
     ea8:	af00      	add	r7, sp, #0
     eaa:	6078      	str	r0, [r7, #4]
     eac:	000a      	movs	r2, r1
     eae:	1cbb      	adds	r3, r7, #2
     eb0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	0018      	movs	r0, r3
     ebc:	4b0a      	ldr	r3, [pc, #40]	; (ee8 <spi_write+0x44>)
     ebe:	4798      	blx	r3
     ec0:	0003      	movs	r3, r0
     ec2:	001a      	movs	r2, r3
     ec4:	2301      	movs	r3, #1
     ec6:	4053      	eors	r3, r2
     ec8:	b2db      	uxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d001      	beq.n	ed2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     ece:	2305      	movs	r3, #5
     ed0:	e006      	b.n	ee0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     ed2:	1cbb      	adds	r3, r7, #2
     ed4:	881b      	ldrh	r3, [r3, #0]
     ed6:	05db      	lsls	r3, r3, #23
     ed8:	0dda      	lsrs	r2, r3, #23
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     ede:	2300      	movs	r3, #0
}
     ee0:	0018      	movs	r0, r3
     ee2:	46bd      	mov	sp, r7
     ee4:	b004      	add	sp, #16
     ee6:	bd80      	pop	{r7, pc}
     ee8:	00000e55 	.word	0x00000e55

00000eec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     eec:	b580      	push	{r7, lr}
     eee:	b084      	sub	sp, #16
     ef0:	af00      	add	r7, sp, #0
     ef2:	6078      	str	r0, [r7, #4]
     ef4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	0018      	movs	r0, r3
     f00:	4b1b      	ldr	r3, [pc, #108]	; (f70 <spi_read+0x84>)
     f02:	4798      	blx	r3
     f04:	0003      	movs	r3, r0
     f06:	001a      	movs	r2, r3
     f08:	2301      	movs	r3, #1
     f0a:	4053      	eors	r3, r2
     f0c:	b2db      	uxtb	r3, r3
     f0e:	2b00      	cmp	r3, #0
     f10:	d001      	beq.n	f16 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     f12:	2310      	movs	r3, #16
     f14:	e027      	b.n	f66 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     f16:	230f      	movs	r3, #15
     f18:	18fb      	adds	r3, r7, r3
     f1a:	2200      	movs	r2, #0
     f1c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     f1e:	68bb      	ldr	r3, [r7, #8]
     f20:	8b5b      	ldrh	r3, [r3, #26]
     f22:	b29b      	uxth	r3, r3
     f24:	001a      	movs	r2, r3
     f26:	2304      	movs	r3, #4
     f28:	4013      	ands	r3, r2
     f2a:	d006      	beq.n	f3a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     f2c:	230f      	movs	r3, #15
     f2e:	18fb      	adds	r3, r7, r3
     f30:	221e      	movs	r2, #30
     f32:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     f34:	68bb      	ldr	r3, [r7, #8]
     f36:	2204      	movs	r2, #4
     f38:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	799b      	ldrb	r3, [r3, #6]
     f3e:	2b01      	cmp	r3, #1
     f40:	d108      	bne.n	f54 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     f42:	68bb      	ldr	r3, [r7, #8]
     f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f46:	b29b      	uxth	r3, r3
     f48:	05db      	lsls	r3, r3, #23
     f4a:	0ddb      	lsrs	r3, r3, #23
     f4c:	b29a      	uxth	r2, r3
     f4e:	683b      	ldr	r3, [r7, #0]
     f50:	801a      	strh	r2, [r3, #0]
     f52:	e005      	b.n	f60 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     f54:	68bb      	ldr	r3, [r7, #8]
     f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     f58:	b2db      	uxtb	r3, r3
     f5a:	b29a      	uxth	r2, r3
     f5c:	683b      	ldr	r3, [r7, #0]
     f5e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     f60:	230f      	movs	r3, #15
     f62:	18fb      	adds	r3, r7, r3
     f64:	781b      	ldrb	r3, [r3, #0]
}
     f66:	0018      	movs	r0, r3
     f68:	46bd      	mov	sp, r7
     f6a:	b004      	add	sp, #16
     f6c:	bd80      	pop	{r7, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00000e7d 	.word	0x00000e7d

00000f74 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     f74:	b580      	push	{r7, lr}
     f76:	b086      	sub	sp, #24
     f78:	af00      	add	r7, sp, #0
     f7a:	60f8      	str	r0, [r7, #12]
     f7c:	60b9      	str	r1, [r7, #8]
     f7e:	1dbb      	adds	r3, r7, #6
     f80:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     f82:	2313      	movs	r3, #19
     f84:	18fb      	adds	r3, r7, r3
     f86:	2200      	movs	r2, #0
     f88:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     f8a:	2317      	movs	r3, #23
     f8c:	18fb      	adds	r3, r7, r3
     f8e:	2200      	movs	r2, #0
     f90:	701a      	strb	r2, [r3, #0]
     f92:	2316      	movs	r3, #22
     f94:	18fb      	adds	r3, r7, r3
     f96:	2200      	movs	r2, #0
     f98:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     f9a:	2314      	movs	r3, #20
     f9c:	18fb      	adds	r3, r7, r3
     f9e:	2200      	movs	r2, #0
     fa0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     fa2:	2310      	movs	r3, #16
     fa4:	18fb      	adds	r3, r7, r3
     fa6:	2200      	movs	r2, #0
     fa8:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     faa:	68fb      	ldr	r3, [r7, #12]
     fac:	2b00      	cmp	r3, #0
     fae:	d107      	bne.n	fc0 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     fb0:	2313      	movs	r3, #19
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     fb6:	2317      	movs	r3, #23
     fb8:	18fb      	adds	r3, r7, r3
     fba:	2201      	movs	r2, #1
     fbc:	701a      	strb	r2, [r3, #0]
     fbe:	e00d      	b.n	fdc <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     fc0:	68bb      	ldr	r3, [r7, #8]
     fc2:	2b00      	cmp	r3, #0
     fc4:	d107      	bne.n	fd6 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     fc6:	2313      	movs	r3, #19
     fc8:	18fb      	adds	r3, r7, r3
     fca:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     fcc:	2316      	movs	r3, #22
     fce:	18fb      	adds	r3, r7, r3
     fd0:	2201      	movs	r2, #1
     fd2:	701a      	strb	r2, [r3, #0]
     fd4:	e002      	b.n	fdc <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     fd6:	2306      	movs	r3, #6
     fd8:	425b      	negs	r3, r3
     fda:	e06a      	b.n	10b2 <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
     fdc:	4937      	ldr	r1, [pc, #220]	; (10bc <spi_rw+0x148>)
     fde:	4b38      	ldr	r3, [pc, #224]	; (10c0 <spi_rw+0x14c>)
     fe0:	2201      	movs	r2, #1
     fe2:	0018      	movs	r0, r3
     fe4:	4b37      	ldr	r3, [pc, #220]	; (10c4 <spi_rw+0x150>)
     fe6:	4798      	blx	r3

	while (u16Sz) {
     fe8:	e04c      	b.n	1084 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	781a      	ldrb	r2, [r3, #0]
     fee:	2314      	movs	r3, #20
     ff0:	18fb      	adds	r3, r7, r3
     ff2:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     ff4:	46c0      	nop			; (mov r8, r8)
     ff6:	4b32      	ldr	r3, [pc, #200]	; (10c0 <spi_rw+0x14c>)
     ff8:	0018      	movs	r0, r3
     ffa:	4b33      	ldr	r3, [pc, #204]	; (10c8 <spi_rw+0x154>)
     ffc:	4798      	blx	r3
     ffe:	0003      	movs	r3, r0
    1000:	001a      	movs	r2, r3
    1002:	2301      	movs	r3, #1
    1004:	4053      	eors	r3, r2
    1006:	b2db      	uxtb	r3, r3
    1008:	2b00      	cmp	r3, #0
    100a:	d1f4      	bne.n	ff6 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    100c:	46c0      	nop			; (mov r8, r8)
    100e:	2314      	movs	r3, #20
    1010:	18fb      	adds	r3, r7, r3
    1012:	881a      	ldrh	r2, [r3, #0]
    1014:	4b2a      	ldr	r3, [pc, #168]	; (10c0 <spi_rw+0x14c>)
    1016:	0011      	movs	r1, r2
    1018:	0018      	movs	r0, r3
    101a:	4b2c      	ldr	r3, [pc, #176]	; (10cc <spi_rw+0x158>)
    101c:	4798      	blx	r3
    101e:	1e03      	subs	r3, r0, #0
    1020:	d1f5      	bne.n	100e <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	4b26      	ldr	r3, [pc, #152]	; (10c0 <spi_rw+0x14c>)
    1026:	0018      	movs	r0, r3
    1028:	4b29      	ldr	r3, [pc, #164]	; (10d0 <spi_rw+0x15c>)
    102a:	4798      	blx	r3
    102c:	0003      	movs	r3, r0
    102e:	001a      	movs	r2, r3
    1030:	2301      	movs	r3, #1
    1032:	4053      	eors	r3, r2
    1034:	b2db      	uxtb	r3, r3
    1036:	2b00      	cmp	r3, #0
    1038:	d1f4      	bne.n	1024 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	2310      	movs	r3, #16
    103e:	18fa      	adds	r2, r7, r3
    1040:	4b1f      	ldr	r3, [pc, #124]	; (10c0 <spi_rw+0x14c>)
    1042:	0011      	movs	r1, r2
    1044:	0018      	movs	r0, r3
    1046:	4b23      	ldr	r3, [pc, #140]	; (10d4 <spi_rw+0x160>)
    1048:	4798      	blx	r3
    104a:	1e03      	subs	r3, r0, #0
    104c:	d1f6      	bne.n	103c <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    104e:	2310      	movs	r3, #16
    1050:	18fb      	adds	r3, r7, r3
    1052:	881b      	ldrh	r3, [r3, #0]
    1054:	b2da      	uxtb	r2, r3
    1056:	68bb      	ldr	r3, [r7, #8]
    1058:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    105a:	1dbb      	adds	r3, r7, #6
    105c:	881a      	ldrh	r2, [r3, #0]
    105e:	1dbb      	adds	r3, r7, #6
    1060:	3a01      	subs	r2, #1
    1062:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    1064:	2316      	movs	r3, #22
    1066:	18fb      	adds	r3, r7, r3
    1068:	781b      	ldrb	r3, [r3, #0]
    106a:	2b00      	cmp	r3, #0
    106c:	d102      	bne.n	1074 <spi_rw+0x100>
			pu8Miso++;
    106e:	68bb      	ldr	r3, [r7, #8]
    1070:	3301      	adds	r3, #1
    1072:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    1074:	2317      	movs	r3, #23
    1076:	18fb      	adds	r3, r7, r3
    1078:	781b      	ldrb	r3, [r3, #0]
    107a:	2b00      	cmp	r3, #0
    107c:	d102      	bne.n	1084 <spi_rw+0x110>
			pu8Mosi++;
    107e:	68fb      	ldr	r3, [r7, #12]
    1080:	3301      	adds	r3, #1
    1082:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    1084:	1dbb      	adds	r3, r7, #6
    1086:	881b      	ldrh	r3, [r3, #0]
    1088:	2b00      	cmp	r3, #0
    108a:	d1ae      	bne.n	fea <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    108c:	46c0      	nop			; (mov r8, r8)
    108e:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <spi_rw+0x14c>)
    1090:	0018      	movs	r0, r3
    1092:	4b11      	ldr	r3, [pc, #68]	; (10d8 <spi_rw+0x164>)
    1094:	4798      	blx	r3
    1096:	0003      	movs	r3, r0
    1098:	001a      	movs	r2, r3
    109a:	2301      	movs	r3, #1
    109c:	4053      	eors	r3, r2
    109e:	b2db      	uxtb	r3, r3
    10a0:	2b00      	cmp	r3, #0
    10a2:	d1f4      	bne.n	108e <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    10a4:	4905      	ldr	r1, [pc, #20]	; (10bc <spi_rw+0x148>)
    10a6:	4b06      	ldr	r3, [pc, #24]	; (10c0 <spi_rw+0x14c>)
    10a8:	2200      	movs	r2, #0
    10aa:	0018      	movs	r0, r3
    10ac:	4b05      	ldr	r3, [pc, #20]	; (10c4 <spi_rw+0x150>)
    10ae:	4798      	blx	r3

	return M2M_SUCCESS;
    10b0:	2300      	movs	r3, #0
}
    10b2:	0018      	movs	r0, r3
    10b4:	46bd      	mov	sp, r7
    10b6:	b006      	add	sp, #24
    10b8:	bd80      	pop	{r7, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	200044c4 	.word	0x200044c4
    10c0:	200044c8 	.word	0x200044c8
    10c4:	0000537d 	.word	0x0000537d
    10c8:	00000e55 	.word	0x00000e55
    10cc:	00000ea5 	.word	0x00000ea5
    10d0:	00000e7d 	.word	0x00000e7d
    10d4:	00000eed 	.word	0x00000eed
    10d8:	00000e2d 	.word	0x00000e2d

000010dc <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    10dc:	b590      	push	{r4, r7, lr}
    10de:	b085      	sub	sp, #20
    10e0:	af00      	add	r7, sp, #0
    10e2:	0002      	movs	r2, r0
    10e4:	6039      	str	r1, [r7, #0]
    10e6:	1dfb      	adds	r3, r7, #7
    10e8:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    10ea:	230f      	movs	r3, #15
    10ec:	18fb      	adds	r3, r7, r3
    10ee:	2200      	movs	r2, #0
    10f0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    10f2:	1dfb      	adds	r3, r7, #7
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	2b03      	cmp	r3, #3
    10f8:	d10f      	bne.n	111a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    10fa:	683b      	ldr	r3, [r7, #0]
    10fc:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    10fe:	68bb      	ldr	r3, [r7, #8]
    1100:	6818      	ldr	r0, [r3, #0]
    1102:	68bb      	ldr	r3, [r7, #8]
    1104:	6859      	ldr	r1, [r3, #4]
    1106:	68bb      	ldr	r3, [r7, #8]
    1108:	891b      	ldrh	r3, [r3, #8]
    110a:	220f      	movs	r2, #15
    110c:	18bc      	adds	r4, r7, r2
    110e:	001a      	movs	r2, r3
    1110:	4b0f      	ldr	r3, [pc, #60]	; (1150 <nm_bus_ioctl+0x74>)
    1112:	4798      	blx	r3
    1114:	0003      	movs	r3, r0
    1116:	7023      	strb	r3, [r4, #0]
		}
		break;
    1118:	e012      	b.n	1140 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    111a:	230f      	movs	r3, #15
    111c:	18fb      	adds	r3, r7, r3
    111e:	22ff      	movs	r2, #255	; 0xff
    1120:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    1122:	2386      	movs	r3, #134	; 0x86
    1124:	005a      	lsls	r2, r3, #1
    1126:	490b      	ldr	r1, [pc, #44]	; (1154 <nm_bus_ioctl+0x78>)
    1128:	4b0b      	ldr	r3, [pc, #44]	; (1158 <nm_bus_ioctl+0x7c>)
    112a:	0018      	movs	r0, r3
    112c:	4b0b      	ldr	r3, [pc, #44]	; (115c <nm_bus_ioctl+0x80>)
    112e:	4798      	blx	r3
    1130:	4b0b      	ldr	r3, [pc, #44]	; (1160 <nm_bus_ioctl+0x84>)
    1132:	0018      	movs	r0, r3
    1134:	4b0b      	ldr	r3, [pc, #44]	; (1164 <nm_bus_ioctl+0x88>)
    1136:	4798      	blx	r3
    1138:	200d      	movs	r0, #13
    113a:	4b0b      	ldr	r3, [pc, #44]	; (1168 <nm_bus_ioctl+0x8c>)
    113c:	4798      	blx	r3
			break;
    113e:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    1140:	230f      	movs	r3, #15
    1142:	18fb      	adds	r3, r7, r3
    1144:	781b      	ldrb	r3, [r3, #0]
    1146:	b25b      	sxtb	r3, r3
}
    1148:	0018      	movs	r0, r3
    114a:	46bd      	mov	sp, r7
    114c:	b005      	add	sp, #20
    114e:	bd90      	pop	{r4, r7, pc}
    1150:	00000f75 	.word	0x00000f75
    1154:	0000ccdc 	.word	0x0000ccdc
    1158:	0000ccb4 	.word	0x0000ccb4
    115c:	0000bbb1 	.word	0x0000bbb1
    1160:	0000ccc8 	.word	0x0000ccc8
    1164:	0000bcd1 	.word	0x0000bcd1
    1168:	0000bbe5 	.word	0x0000bbe5

0000116c <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    116c:	b580      	push	{r7, lr}
    116e:	b084      	sub	sp, #16
    1170:	af00      	add	r7, sp, #0
    1172:	60f8      	str	r0, [r7, #12]
    1174:	60b9      	str	r1, [r7, #8]
    1176:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    1178:	687b      	ldr	r3, [r7, #4]
    117a:	2b00      	cmp	r3, #0
    117c:	d010      	beq.n	11a0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    117e:	68bb      	ldr	r3, [r7, #8]
    1180:	781a      	ldrb	r2, [r3, #0]
    1182:	68fb      	ldr	r3, [r7, #12]
    1184:	701a      	strb	r2, [r3, #0]
		pDst++;
    1186:	68fb      	ldr	r3, [r7, #12]
    1188:	3301      	adds	r3, #1
    118a:	60fb      	str	r3, [r7, #12]
		pSrc++;
    118c:	68bb      	ldr	r3, [r7, #8]
    118e:	3301      	adds	r3, #1
    1190:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    1192:	687b      	ldr	r3, [r7, #4]
    1194:	3b01      	subs	r3, #1
    1196:	607b      	str	r3, [r7, #4]
    1198:	687b      	ldr	r3, [r7, #4]
    119a:	2b00      	cmp	r3, #0
    119c:	d1ef      	bne.n	117e <m2m_memcpy+0x12>
    119e:	e000      	b.n	11a2 <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    11a0:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    11a2:	46bd      	mov	sp, r7
    11a4:	b004      	add	sp, #16
    11a6:	bd80      	pop	{r7, pc}

000011a8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    11a8:	b580      	push	{r7, lr}
    11aa:	b084      	sub	sp, #16
    11ac:	af00      	add	r7, sp, #0
    11ae:	60f8      	str	r0, [r7, #12]
    11b0:	607a      	str	r2, [r7, #4]
    11b2:	230b      	movs	r3, #11
    11b4:	18fb      	adds	r3, r7, r3
    11b6:	1c0a      	adds	r2, r1, #0
    11b8:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    11ba:	687b      	ldr	r3, [r7, #4]
    11bc:	2b00      	cmp	r3, #0
    11be:	d00e      	beq.n	11de <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    11c0:	68fb      	ldr	r3, [r7, #12]
    11c2:	220b      	movs	r2, #11
    11c4:	18ba      	adds	r2, r7, r2
    11c6:	7812      	ldrb	r2, [r2, #0]
    11c8:	701a      	strb	r2, [r3, #0]
		pBuf++;
    11ca:	68fb      	ldr	r3, [r7, #12]
    11cc:	3301      	adds	r3, #1
    11ce:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    11d0:	687b      	ldr	r3, [r7, #4]
    11d2:	3b01      	subs	r3, #1
    11d4:	607b      	str	r3, [r7, #4]
    11d6:	687b      	ldr	r3, [r7, #4]
    11d8:	2b00      	cmp	r3, #0
    11da:	d1f1      	bne.n	11c0 <m2m_memset+0x18>
    11dc:	e000      	b.n	11e0 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    11de:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    11e0:	46bd      	mov	sp, r7
    11e2:	b004      	add	sp, #16
    11e4:	bd80      	pop	{r7, pc}
    11e6:	46c0      	nop			; (mov r8, r8)

000011e8 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    11e8:	b580      	push	{r7, lr}
    11ea:	b084      	sub	sp, #16
    11ec:	af00      	add	r7, sp, #0
    11ee:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    11f0:	230e      	movs	r3, #14
    11f2:	18fb      	adds	r3, r7, r3
    11f4:	2200      	movs	r2, #0
    11f6:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    11f8:	e009      	b.n	120e <m2m_strlen+0x26>
	{
		u16StrLen ++;
    11fa:	230e      	movs	r3, #14
    11fc:	18fb      	adds	r3, r7, r3
    11fe:	881a      	ldrh	r2, [r3, #0]
    1200:	230e      	movs	r3, #14
    1202:	18fb      	adds	r3, r7, r3
    1204:	3201      	adds	r2, #1
    1206:	801a      	strh	r2, [r3, #0]
		pcStr++;
    1208:	687b      	ldr	r3, [r7, #4]
    120a:	3301      	adds	r3, #1
    120c:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    120e:	687b      	ldr	r3, [r7, #4]
    1210:	781b      	ldrb	r3, [r3, #0]
    1212:	2b00      	cmp	r3, #0
    1214:	d1f1      	bne.n	11fa <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    1216:	230e      	movs	r3, #14
    1218:	18fb      	adds	r3, r7, r3
    121a:	881b      	ldrh	r3, [r3, #0]
}
    121c:	0018      	movs	r0, r3
    121e:	46bd      	mov	sp, r7
    1220:	b004      	add	sp, #16
    1222:	bd80      	pop	{r7, pc}

00001224 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
    1224:	b590      	push	{r4, r7, lr}
    1226:	b083      	sub	sp, #12
    1228:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    122a:	1dfb      	adds	r3, r7, #7
    122c:	2200      	movs	r2, #0
    122e:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    1230:	2001      	movs	r0, #1
    1232:	4b13      	ldr	r3, [pc, #76]	; (1280 <hif_set_rx_done+0x5c>)
    1234:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1236:	1dfc      	adds	r4, r7, #7
    1238:	003b      	movs	r3, r7
    123a:	4a12      	ldr	r2, [pc, #72]	; (1284 <hif_set_rx_done+0x60>)
    123c:	0019      	movs	r1, r3
    123e:	0010      	movs	r0, r2
    1240:	4b11      	ldr	r3, [pc, #68]	; (1288 <hif_set_rx_done+0x64>)
    1242:	4798      	blx	r3
    1244:	0003      	movs	r3, r0
    1246:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1248:	1dfb      	adds	r3, r7, #7
    124a:	781b      	ldrb	r3, [r3, #0]
    124c:	b25b      	sxtb	r3, r3
    124e:	2b00      	cmp	r3, #0
    1250:	d10d      	bne.n	126e <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    1252:	683b      	ldr	r3, [r7, #0]
    1254:	2202      	movs	r2, #2
    1256:	4313      	orrs	r3, r2
    1258:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    125a:	683b      	ldr	r3, [r7, #0]
    125c:	1dfc      	adds	r4, r7, #7
    125e:	4a09      	ldr	r2, [pc, #36]	; (1284 <hif_set_rx_done+0x60>)
    1260:	0019      	movs	r1, r3
    1262:	0010      	movs	r0, r2
    1264:	4b09      	ldr	r3, [pc, #36]	; (128c <hif_set_rx_done+0x68>)
    1266:	4798      	blx	r3
    1268:	0003      	movs	r3, r0
    126a:	7023      	strb	r3, [r4, #0]
    126c:	e000      	b.n	1270 <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    126e:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    1270:	1dfb      	adds	r3, r7, #7
    1272:	781b      	ldrb	r3, [r3, #0]
    1274:	b25b      	sxtb	r3, r3

}
    1276:	0018      	movs	r0, r3
    1278:	46bd      	mov	sp, r7
    127a:	b003      	add	sp, #12
    127c:	bd90      	pop	{r4, r7, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00000df5 	.word	0x00000df5
    1284:	00001070 	.word	0x00001070
    1288:	00002289 	.word	0x00002289
    128c:	000022ad 	.word	0x000022ad

00001290 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1290:	b590      	push	{r4, r7, lr}
    1292:	b083      	sub	sp, #12
    1294:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1296:	1dfb      	adds	r3, r7, #7
    1298:	2200      	movs	r2, #0
    129a:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    129c:	4b1c      	ldr	r3, [pc, #112]	; (1310 <hif_chip_wake+0x80>)
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	b2db      	uxtb	r3, r3
    12a2:	2b00      	cmp	r3, #0
    12a4:	d121      	bne.n	12ea <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    12a6:	4b1b      	ldr	r3, [pc, #108]	; (1314 <hif_chip_wake+0x84>)
    12a8:	781b      	ldrb	r3, [r3, #0]
    12aa:	b2db      	uxtb	r3, r3
    12ac:	2b03      	cmp	r3, #3
    12ae:	d004      	beq.n	12ba <hif_chip_wake+0x2a>
    12b0:	4b18      	ldr	r3, [pc, #96]	; (1314 <hif_chip_wake+0x84>)
    12b2:	781b      	ldrb	r3, [r3, #0]
    12b4:	b2db      	uxtb	r3, r3
    12b6:	2b04      	cmp	r3, #4
    12b8:	d117      	bne.n	12ea <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    12ba:	1dfc      	adds	r4, r7, #7
    12bc:	4b16      	ldr	r3, [pc, #88]	; (1318 <hif_chip_wake+0x88>)
    12be:	4798      	blx	r3
    12c0:	0003      	movs	r3, r0
    12c2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	b25b      	sxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	d115      	bne.n	12fa <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    12ce:	1dfc      	adds	r4, r7, #7
    12d0:	4a12      	ldr	r2, [pc, #72]	; (131c <hif_chip_wake+0x8c>)
    12d2:	4b13      	ldr	r3, [pc, #76]	; (1320 <hif_chip_wake+0x90>)
    12d4:	0011      	movs	r1, r2
    12d6:	0018      	movs	r0, r3
    12d8:	4b12      	ldr	r3, [pc, #72]	; (1324 <hif_chip_wake+0x94>)
    12da:	4798      	blx	r3
    12dc:	0003      	movs	r3, r0
    12de:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    12e0:	1dfb      	adds	r3, r7, #7
    12e2:	781b      	ldrb	r3, [r3, #0]
    12e4:	b25b      	sxtb	r3, r3
    12e6:	2b00      	cmp	r3, #0
    12e8:	d109      	bne.n	12fe <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    12ea:	4b09      	ldr	r3, [pc, #36]	; (1310 <hif_chip_wake+0x80>)
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	b2db      	uxtb	r3, r3
    12f0:	3301      	adds	r3, #1
    12f2:	b2da      	uxtb	r2, r3
    12f4:	4b06      	ldr	r3, [pc, #24]	; (1310 <hif_chip_wake+0x80>)
    12f6:	701a      	strb	r2, [r3, #0]
    12f8:	e002      	b.n	1300 <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    12fa:	46c0      	nop			; (mov r8, r8)
    12fc:	e000      	b.n	1300 <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    12fe:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    1300:	1dfb      	adds	r3, r7, #7
    1302:	781b      	ldrb	r3, [r3, #0]
    1304:	b25b      	sxtb	r3, r3
}
    1306:	0018      	movs	r0, r3
    1308:	46bd      	mov	sp, r7
    130a:	b003      	add	sp, #12
    130c:	bd90      	pop	{r4, r7, pc}
    130e:	46c0      	nop			; (mov r8, r8)
    1310:	200000bd 	.word	0x200000bd
    1314:	200000bc 	.word	0x200000bc
    1318:	000020ad 	.word	0x000020ad
    131c:	00005678 	.word	0x00005678
    1320:	00001074 	.word	0x00001074
    1324:	000022ad 	.word	0x000022ad

00001328 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1328:	b590      	push	{r4, r7, lr}
    132a:	b083      	sub	sp, #12
    132c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    132e:	1dfb      	adds	r3, r7, #7
    1330:	2200      	movs	r2, #0
    1332:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    1334:	4b29      	ldr	r3, [pc, #164]	; (13dc <hif_chip_sleep+0xb4>)
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	b2db      	uxtb	r3, r3
    133a:	2b00      	cmp	r3, #0
    133c:	d006      	beq.n	134c <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    133e:	4b27      	ldr	r3, [pc, #156]	; (13dc <hif_chip_sleep+0xb4>)
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	b2db      	uxtb	r3, r3
    1344:	3b01      	subs	r3, #1
    1346:	b2da      	uxtb	r2, r3
    1348:	4b24      	ldr	r3, [pc, #144]	; (13dc <hif_chip_sleep+0xb4>)
    134a:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    134c:	4b23      	ldr	r3, [pc, #140]	; (13dc <hif_chip_sleep+0xb4>)
    134e:	781b      	ldrb	r3, [r3, #0]
    1350:	b2db      	uxtb	r3, r3
    1352:	2b00      	cmp	r3, #0
    1354:	d13a      	bne.n	13cc <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1356:	4b22      	ldr	r3, [pc, #136]	; (13e0 <hif_chip_sleep+0xb8>)
    1358:	781b      	ldrb	r3, [r3, #0]
    135a:	b2db      	uxtb	r3, r3
    135c:	2b03      	cmp	r3, #3
    135e:	d004      	beq.n	136a <hif_chip_sleep+0x42>
    1360:	4b1f      	ldr	r3, [pc, #124]	; (13e0 <hif_chip_sleep+0xb8>)
    1362:	781b      	ldrb	r3, [r3, #0]
    1364:	b2db      	uxtb	r3, r3
    1366:	2b04      	cmp	r3, #4
    1368:	d130      	bne.n	13cc <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    136a:	2300      	movs	r3, #0
    136c:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    136e:	1dfc      	adds	r4, r7, #7
    1370:	4a1c      	ldr	r2, [pc, #112]	; (13e4 <hif_chip_sleep+0xbc>)
    1372:	4b1d      	ldr	r3, [pc, #116]	; (13e8 <hif_chip_sleep+0xc0>)
    1374:	0011      	movs	r1, r2
    1376:	0018      	movs	r0, r3
    1378:	4b1c      	ldr	r3, [pc, #112]	; (13ec <hif_chip_sleep+0xc4>)
    137a:	4798      	blx	r3
    137c:	0003      	movs	r3, r0
    137e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1380:	1dfb      	adds	r3, r7, #7
    1382:	781b      	ldrb	r3, [r3, #0]
    1384:	b25b      	sxtb	r3, r3
    1386:	2b00      	cmp	r3, #0
    1388:	d11d      	bne.n	13c6 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    138a:	1dfc      	adds	r4, r7, #7
    138c:	003b      	movs	r3, r7
    138e:	0019      	movs	r1, r3
    1390:	2001      	movs	r0, #1
    1392:	4b17      	ldr	r3, [pc, #92]	; (13f0 <hif_chip_sleep+0xc8>)
    1394:	4798      	blx	r3
    1396:	0003      	movs	r3, r0
    1398:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    139a:	1dfb      	adds	r3, r7, #7
    139c:	781b      	ldrb	r3, [r3, #0]
    139e:	b25b      	sxtb	r3, r3
    13a0:	2b00      	cmp	r3, #0
    13a2:	d112      	bne.n	13ca <hif_chip_sleep+0xa2>
			if(reg&0x2)
    13a4:	683b      	ldr	r3, [r7, #0]
    13a6:	2202      	movs	r2, #2
    13a8:	4013      	ands	r3, r2
    13aa:	d00f      	beq.n	13cc <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    13ac:	683b      	ldr	r3, [r7, #0]
    13ae:	2202      	movs	r2, #2
    13b0:	4393      	bics	r3, r2
    13b2:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    13b4:	683b      	ldr	r3, [r7, #0]
    13b6:	1dfc      	adds	r4, r7, #7
    13b8:	0019      	movs	r1, r3
    13ba:	2001      	movs	r0, #1
    13bc:	4b0b      	ldr	r3, [pc, #44]	; (13ec <hif_chip_sleep+0xc4>)
    13be:	4798      	blx	r3
    13c0:	0003      	movs	r3, r0
    13c2:	7023      	strb	r3, [r4, #0]
    13c4:	e002      	b.n	13cc <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    13c6:	46c0      	nop			; (mov r8, r8)
    13c8:	e000      	b.n	13cc <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    13ca:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    13cc:	1dfb      	adds	r3, r7, #7
    13ce:	781b      	ldrb	r3, [r3, #0]
    13d0:	b25b      	sxtb	r3, r3
}
    13d2:	0018      	movs	r0, r3
    13d4:	46bd      	mov	sp, r7
    13d6:	b003      	add	sp, #12
    13d8:	bd90      	pop	{r4, r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	200000bd 	.word	0x200000bd
    13e0:	200000bc 	.word	0x200000bc
    13e4:	00004321 	.word	0x00004321
    13e8:	00001074 	.word	0x00001074
    13ec:	000022ad 	.word	0x000022ad
    13f0:	00002289 	.word	0x00002289

000013f4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    13f4:	b590      	push	{r4, r7, lr}
    13f6:	b089      	sub	sp, #36	; 0x24
    13f8:	af00      	add	r7, sp, #0
    13fa:	0004      	movs	r4, r0
    13fc:	0008      	movs	r0, r1
    13fe:	603a      	str	r2, [r7, #0]
    1400:	0019      	movs	r1, r3
    1402:	1dfb      	adds	r3, r7, #7
    1404:	1c22      	adds	r2, r4, #0
    1406:	701a      	strb	r2, [r3, #0]
    1408:	1dbb      	adds	r3, r7, #6
    140a:	1c02      	adds	r2, r0, #0
    140c:	701a      	strb	r2, [r3, #0]
    140e:	1d3b      	adds	r3, r7, #4
    1410:	1c0a      	adds	r2, r1, #0
    1412:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    1414:	231f      	movs	r3, #31
    1416:	18fb      	adds	r3, r7, r3
    1418:	22ff      	movs	r2, #255	; 0xff
    141a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    141c:	1dbb      	adds	r3, r7, #6
    141e:	781b      	ldrb	r3, [r3, #0]
    1420:	227f      	movs	r2, #127	; 0x7f
    1422:	4013      	ands	r3, r2
    1424:	b2da      	uxtb	r2, r3
    1426:	2318      	movs	r3, #24
    1428:	18fb      	adds	r3, r7, r3
    142a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    142c:	2318      	movs	r3, #24
    142e:	18fb      	adds	r3, r7, r3
    1430:	1dfa      	adds	r2, r7, #7
    1432:	7812      	ldrb	r2, [r2, #0]
    1434:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1436:	2318      	movs	r3, #24
    1438:	18fb      	adds	r3, r7, r3
    143a:	2208      	movs	r2, #8
    143c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1440:	2b00      	cmp	r3, #0
    1442:	d011      	beq.n	1468 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1444:	2318      	movs	r3, #24
    1446:	18fb      	adds	r3, r7, r3
    1448:	885b      	ldrh	r3, [r3, #2]
    144a:	b29a      	uxth	r2, r3
    144c:	2338      	movs	r3, #56	; 0x38
    144e:	18f9      	adds	r1, r7, r3
    1450:	2334      	movs	r3, #52	; 0x34
    1452:	18fb      	adds	r3, r7, r3
    1454:	8809      	ldrh	r1, [r1, #0]
    1456:	881b      	ldrh	r3, [r3, #0]
    1458:	18cb      	adds	r3, r1, r3
    145a:	b29b      	uxth	r3, r3
    145c:	18d3      	adds	r3, r2, r3
    145e:	b29a      	uxth	r2, r3
    1460:	2318      	movs	r3, #24
    1462:	18fb      	adds	r3, r7, r3
    1464:	805a      	strh	r2, [r3, #2]
    1466:	e00a      	b.n	147e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    1468:	2318      	movs	r3, #24
    146a:	18fb      	adds	r3, r7, r3
    146c:	885b      	ldrh	r3, [r3, #2]
    146e:	b29a      	uxth	r2, r3
    1470:	1d3b      	adds	r3, r7, #4
    1472:	881b      	ldrh	r3, [r3, #0]
    1474:	18d3      	adds	r3, r2, r3
    1476:	b29a      	uxth	r2, r3
    1478:	2318      	movs	r3, #24
    147a:	18fb      	adds	r3, r7, r3
    147c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    147e:	231f      	movs	r3, #31
    1480:	18fc      	adds	r4, r7, r3
    1482:	4b9b      	ldr	r3, [pc, #620]	; (16f0 <hif_send+0x2fc>)
    1484:	4798      	blx	r3
    1486:	0003      	movs	r3, r0
    1488:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    148a:	231f      	movs	r3, #31
    148c:	18fb      	adds	r3, r7, r3
    148e:	781b      	ldrb	r3, [r3, #0]
    1490:	b25b      	sxtb	r3, r3
    1492:	2b00      	cmp	r3, #0
    1494:	d000      	beq.n	1498 <hif_send+0xa4>
    1496:	e103      	b.n	16a0 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    1498:	2300      	movs	r3, #0
    149a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    149c:	230e      	movs	r3, #14
    149e:	18fb      	adds	r3, r7, r3
    14a0:	2200      	movs	r2, #0
    14a2:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    14a4:	2300      	movs	r3, #0
    14a6:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    14a8:	1dfb      	adds	r3, r7, #7
    14aa:	781a      	ldrb	r2, [r3, #0]
    14ac:	697b      	ldr	r3, [r7, #20]
    14ae:	4313      	orrs	r3, r2
    14b0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    14b2:	1dbb      	adds	r3, r7, #6
    14b4:	781b      	ldrb	r3, [r3, #0]
    14b6:	021a      	lsls	r2, r3, #8
    14b8:	697b      	ldr	r3, [r7, #20]
    14ba:	4313      	orrs	r3, r2
    14bc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    14be:	2318      	movs	r3, #24
    14c0:	18fb      	adds	r3, r7, r3
    14c2:	885b      	ldrh	r3, [r3, #2]
    14c4:	b29b      	uxth	r3, r3
    14c6:	041a      	lsls	r2, r3, #16
    14c8:	697b      	ldr	r3, [r7, #20]
    14ca:	4313      	orrs	r3, r2
    14cc:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    14ce:	697b      	ldr	r3, [r7, #20]
    14d0:	221f      	movs	r2, #31
    14d2:	18bc      	adds	r4, r7, r2
    14d4:	4a87      	ldr	r2, [pc, #540]	; (16f4 <hif_send+0x300>)
    14d6:	0019      	movs	r1, r3
    14d8:	0010      	movs	r0, r2
    14da:	4b87      	ldr	r3, [pc, #540]	; (16f8 <hif_send+0x304>)
    14dc:	4798      	blx	r3
    14de:	0003      	movs	r3, r0
    14e0:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    14e2:	231f      	movs	r3, #31
    14e4:	18fb      	adds	r3, r7, r3
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	b25b      	sxtb	r3, r3
    14ea:	2b00      	cmp	r3, #0
    14ec:	d000      	beq.n	14f0 <hif_send+0xfc>
    14ee:	e0ee      	b.n	16ce <hif_send+0x2da>


		reg = 0;
    14f0:	2300      	movs	r3, #0
    14f2:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    14f4:	697b      	ldr	r3, [r7, #20]
    14f6:	2202      	movs	r2, #2
    14f8:	4313      	orrs	r3, r2
    14fa:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    14fc:	697b      	ldr	r3, [r7, #20]
    14fe:	221f      	movs	r2, #31
    1500:	18bc      	adds	r4, r7, r2
    1502:	4a7e      	ldr	r2, [pc, #504]	; (16fc <hif_send+0x308>)
    1504:	0019      	movs	r1, r3
    1506:	0010      	movs	r0, r2
    1508:	4b7b      	ldr	r3, [pc, #492]	; (16f8 <hif_send+0x304>)
    150a:	4798      	blx	r3
    150c:	0003      	movs	r3, r0
    150e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1510:	231f      	movs	r3, #31
    1512:	18fb      	adds	r3, r7, r3
    1514:	781b      	ldrb	r3, [r3, #0]
    1516:	b25b      	sxtb	r3, r3
    1518:	2b00      	cmp	r3, #0
    151a:	d000      	beq.n	151e <hif_send+0x12a>
    151c:	e0d9      	b.n	16d2 <hif_send+0x2de>
		dma_addr = 0;
    151e:	2300      	movs	r3, #0
    1520:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1522:	230e      	movs	r3, #14
    1524:	18fb      	adds	r3, r7, r3
    1526:	2200      	movs	r2, #0
    1528:	801a      	strh	r2, [r3, #0]
    152a:	e031      	b.n	1590 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    152c:	231f      	movs	r3, #31
    152e:	18fc      	adds	r4, r7, r3
    1530:	2314      	movs	r3, #20
    1532:	18fb      	adds	r3, r7, r3
    1534:	4a71      	ldr	r2, [pc, #452]	; (16fc <hif_send+0x308>)
    1536:	0019      	movs	r1, r3
    1538:	0010      	movs	r0, r2
    153a:	4b71      	ldr	r3, [pc, #452]	; (1700 <hif_send+0x30c>)
    153c:	4798      	blx	r3
    153e:	0003      	movs	r3, r0
    1540:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    1542:	231f      	movs	r3, #31
    1544:	18fb      	adds	r3, r7, r3
    1546:	781b      	ldrb	r3, [r3, #0]
    1548:	b25b      	sxtb	r3, r3
    154a:	2b00      	cmp	r3, #0
    154c:	d128      	bne.n	15a0 <hif_send+0x1ac>
			if (!(reg & 0x2))
    154e:	697b      	ldr	r3, [r7, #20]
    1550:	2202      	movs	r2, #2
    1552:	4013      	ands	r3, r2
    1554:	d113      	bne.n	157e <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    1556:	231f      	movs	r3, #31
    1558:	18fc      	adds	r4, r7, r3
    155a:	2310      	movs	r3, #16
    155c:	18fb      	adds	r3, r7, r3
    155e:	4a69      	ldr	r2, [pc, #420]	; (1704 <hif_send+0x310>)
    1560:	0019      	movs	r1, r3
    1562:	0010      	movs	r0, r2
    1564:	4b66      	ldr	r3, [pc, #408]	; (1700 <hif_send+0x30c>)
    1566:	4798      	blx	r3
    1568:	0003      	movs	r3, r0
    156a:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    156c:	231f      	movs	r3, #31
    156e:	18fb      	adds	r3, r7, r3
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	b25b      	sxtb	r3, r3
    1574:	2b00      	cmp	r3, #0
    1576:	d015      	beq.n	15a4 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    1578:	2300      	movs	r3, #0
    157a:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    157c:	e012      	b.n	15a4 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    157e:	230e      	movs	r3, #14
    1580:	18fb      	adds	r3, r7, r3
    1582:	881b      	ldrh	r3, [r3, #0]
    1584:	b29b      	uxth	r3, r3
    1586:	3301      	adds	r3, #1
    1588:	b29a      	uxth	r2, r3
    158a:	230e      	movs	r3, #14
    158c:	18fb      	adds	r3, r7, r3
    158e:	801a      	strh	r2, [r3, #0]
    1590:	230e      	movs	r3, #14
    1592:	18fb      	adds	r3, r7, r3
    1594:	881b      	ldrh	r3, [r3, #0]
    1596:	b29b      	uxth	r3, r3
    1598:	4a5b      	ldr	r2, [pc, #364]	; (1708 <hif_send+0x314>)
    159a:	4293      	cmp	r3, r2
    159c:	d9c6      	bls.n	152c <hif_send+0x138>
    159e:	e002      	b.n	15a6 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    15a0:	46c0      	nop			; (mov r8, r8)
    15a2:	e000      	b.n	15a6 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    15a4:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    15a6:	693b      	ldr	r3, [r7, #16]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d100      	bne.n	15ae <hif_send+0x1ba>
    15ac:	e073      	b.n	1696 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    15ae:	693b      	ldr	r3, [r7, #16]
    15b0:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    15b2:	2318      	movs	r3, #24
    15b4:	18fb      	adds	r3, r7, r3
    15b6:	885b      	ldrh	r3, [r3, #2]
    15b8:	b29a      	uxth	r2, r3
    15ba:	2318      	movs	r3, #24
    15bc:	18fb      	adds	r3, r7, r3
    15be:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    15c0:	68bb      	ldr	r3, [r7, #8]
    15c2:	221f      	movs	r2, #31
    15c4:	18bc      	adds	r4, r7, r2
    15c6:	2218      	movs	r2, #24
    15c8:	18b9      	adds	r1, r7, r2
    15ca:	2208      	movs	r2, #8
    15cc:	0018      	movs	r0, r3
    15ce:	4b4f      	ldr	r3, [pc, #316]	; (170c <hif_send+0x318>)
    15d0:	4798      	blx	r3
    15d2:	0003      	movs	r3, r0
    15d4:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    15d6:	231f      	movs	r3, #31
    15d8:	18fb      	adds	r3, r7, r3
    15da:	781b      	ldrb	r3, [r3, #0]
    15dc:	b25b      	sxtb	r3, r3
    15de:	2b00      	cmp	r3, #0
    15e0:	d000      	beq.n	15e4 <hif_send+0x1f0>
    15e2:	e078      	b.n	16d6 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    15e4:	68bb      	ldr	r3, [r7, #8]
    15e6:	3308      	adds	r3, #8
    15e8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    15ea:	683b      	ldr	r3, [r7, #0]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d015      	beq.n	161c <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    15f0:	68b8      	ldr	r0, [r7, #8]
    15f2:	1d3b      	adds	r3, r7, #4
    15f4:	881a      	ldrh	r2, [r3, #0]
    15f6:	231f      	movs	r3, #31
    15f8:	18fc      	adds	r4, r7, r3
    15fa:	683b      	ldr	r3, [r7, #0]
    15fc:	0019      	movs	r1, r3
    15fe:	4b43      	ldr	r3, [pc, #268]	; (170c <hif_send+0x318>)
    1600:	4798      	blx	r3
    1602:	0003      	movs	r3, r0
    1604:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1606:	231f      	movs	r3, #31
    1608:	18fb      	adds	r3, r7, r3
    160a:	781b      	ldrb	r3, [r3, #0]
    160c:	b25b      	sxtb	r3, r3
    160e:	2b00      	cmp	r3, #0
    1610:	d163      	bne.n	16da <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    1612:	1d3b      	adds	r3, r7, #4
    1614:	881a      	ldrh	r2, [r3, #0]
    1616:	68bb      	ldr	r3, [r7, #8]
    1618:	18d3      	adds	r3, r2, r3
    161a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    161e:	2b00      	cmp	r3, #0
    1620:	d021      	beq.n	1666 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1622:	2338      	movs	r3, #56	; 0x38
    1624:	18fb      	adds	r3, r7, r3
    1626:	881a      	ldrh	r2, [r3, #0]
    1628:	1d3b      	adds	r3, r7, #4
    162a:	881b      	ldrh	r3, [r3, #0]
    162c:	1ad3      	subs	r3, r2, r3
    162e:	001a      	movs	r2, r3
    1630:	68bb      	ldr	r3, [r7, #8]
    1632:	18d3      	adds	r3, r2, r3
    1634:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1636:	68b8      	ldr	r0, [r7, #8]
    1638:	2334      	movs	r3, #52	; 0x34
    163a:	18fb      	adds	r3, r7, r3
    163c:	881a      	ldrh	r2, [r3, #0]
    163e:	231f      	movs	r3, #31
    1640:	18fc      	adds	r4, r7, r3
    1642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1644:	0019      	movs	r1, r3
    1646:	4b31      	ldr	r3, [pc, #196]	; (170c <hif_send+0x318>)
    1648:	4798      	blx	r3
    164a:	0003      	movs	r3, r0
    164c:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    164e:	231f      	movs	r3, #31
    1650:	18fb      	adds	r3, r7, r3
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	b25b      	sxtb	r3, r3
    1656:	2b00      	cmp	r3, #0
    1658:	d141      	bne.n	16de <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    165a:	2334      	movs	r3, #52	; 0x34
    165c:	18fb      	adds	r3, r7, r3
    165e:	881a      	ldrh	r2, [r3, #0]
    1660:	68bb      	ldr	r3, [r7, #8]
    1662:	18d3      	adds	r3, r2, r3
    1664:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    1666:	693b      	ldr	r3, [r7, #16]
    1668:	009b      	lsls	r3, r3, #2
    166a:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    166c:	697b      	ldr	r3, [r7, #20]
    166e:	2202      	movs	r2, #2
    1670:	4313      	orrs	r3, r2
    1672:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1674:	697b      	ldr	r3, [r7, #20]
    1676:	221f      	movs	r2, #31
    1678:	18bc      	adds	r4, r7, r2
    167a:	4a25      	ldr	r2, [pc, #148]	; (1710 <hif_send+0x31c>)
    167c:	0019      	movs	r1, r3
    167e:	0010      	movs	r0, r2
    1680:	4b1d      	ldr	r3, [pc, #116]	; (16f8 <hif_send+0x304>)
    1682:	4798      	blx	r3
    1684:	0003      	movs	r3, r0
    1686:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1688:	231f      	movs	r3, #31
    168a:	18fb      	adds	r3, r7, r3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	b25b      	sxtb	r3, r3
    1690:	2b00      	cmp	r3, #0
    1692:	d015      	beq.n	16c0 <hif_send+0x2cc>
    1694:	e024      	b.n	16e0 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    1696:	231f      	movs	r3, #31
    1698:	18fb      	adds	r3, r7, r3
    169a:	22fd      	movs	r2, #253	; 0xfd
    169c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    169e:	e01f      	b.n	16e0 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    16a0:	23a0      	movs	r3, #160	; 0xa0
    16a2:	33ff      	adds	r3, #255	; 0xff
    16a4:	001a      	movs	r2, r3
    16a6:	491b      	ldr	r1, [pc, #108]	; (1714 <hif_send+0x320>)
    16a8:	4b1b      	ldr	r3, [pc, #108]	; (1718 <hif_send+0x324>)
    16aa:	0018      	movs	r0, r3
    16ac:	4b1b      	ldr	r3, [pc, #108]	; (171c <hif_send+0x328>)
    16ae:	4798      	blx	r3
    16b0:	4b1b      	ldr	r3, [pc, #108]	; (1720 <hif_send+0x32c>)
    16b2:	0018      	movs	r0, r3
    16b4:	4b1b      	ldr	r3, [pc, #108]	; (1724 <hif_send+0x330>)
    16b6:	4798      	blx	r3
    16b8:	200d      	movs	r0, #13
    16ba:	4b1b      	ldr	r3, [pc, #108]	; (1728 <hif_send+0x334>)
    16bc:	4798      	blx	r3
		goto ERR1;
    16be:	e00f      	b.n	16e0 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    16c0:	231f      	movs	r3, #31
    16c2:	18fc      	adds	r4, r7, r3
    16c4:	4b19      	ldr	r3, [pc, #100]	; (172c <hif_send+0x338>)
    16c6:	4798      	blx	r3
    16c8:	0003      	movs	r3, r0
    16ca:	7023      	strb	r3, [r4, #0]
    16cc:	e008      	b.n	16e0 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	e006      	b.n	16e0 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	e004      	b.n	16e0 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	e002      	b.n	16e0 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	e000      	b.n	16e0 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    16de:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    16e0:	231f      	movs	r3, #31
    16e2:	18fb      	adds	r3, r7, r3
    16e4:	781b      	ldrb	r3, [r3, #0]
    16e6:	b25b      	sxtb	r3, r3
}
    16e8:	0018      	movs	r0, r3
    16ea:	46bd      	mov	sp, r7
    16ec:	b009      	add	sp, #36	; 0x24
    16ee:	bd90      	pop	{r4, r7, pc}
    16f0:	00001291 	.word	0x00001291
    16f4:	0000108c 	.word	0x0000108c
    16f8:	000022ad 	.word	0x000022ad
    16fc:	00001078 	.word	0x00001078
    1700:	00002289 	.word	0x00002289
    1704:	00150400 	.word	0x00150400
    1708:	000003e7 	.word	0x000003e7
    170c:	000023f5 	.word	0x000023f5
    1710:	0000106c 	.word	0x0000106c
    1714:	0000cf2c 	.word	0x0000cf2c
    1718:	0000ccec 	.word	0x0000ccec
    171c:	0000bbb1 	.word	0x0000bbb1
    1720:	0000cd00 	.word	0x0000cd00
    1724:	0000bcd1 	.word	0x0000bcd1
    1728:	0000bbe5 	.word	0x0000bbe5
    172c:	00001329 	.word	0x00001329

00001730 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1730:	b590      	push	{r4, r7, lr}
    1732:	b087      	sub	sp, #28
    1734:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    1736:	230f      	movs	r3, #15
    1738:	18fb      	adds	r3, r7, r3
    173a:	22fa      	movs	r2, #250	; 0xfa
    173c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    173e:	230f      	movs	r3, #15
    1740:	18fc      	adds	r4, r7, r3
    1742:	4bda      	ldr	r3, [pc, #872]	; (1aac <hif_isr+0x37c>)
    1744:	4798      	blx	r3
    1746:	0003      	movs	r3, r0
    1748:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    174a:	230f      	movs	r3, #15
    174c:	18fb      	adds	r3, r7, r3
    174e:	781b      	ldrb	r3, [r3, #0]
    1750:	b25b      	sxtb	r3, r3
    1752:	2b00      	cmp	r3, #0
    1754:	d000      	beq.n	1758 <hif_isr+0x28>
    1756:	e192      	b.n	1a7e <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1758:	230f      	movs	r3, #15
    175a:	18fc      	adds	r4, r7, r3
    175c:	2308      	movs	r3, #8
    175e:	18fb      	adds	r3, r7, r3
    1760:	4ad3      	ldr	r2, [pc, #844]	; (1ab0 <hif_isr+0x380>)
    1762:	0019      	movs	r1, r3
    1764:	0010      	movs	r0, r2
    1766:	4bd3      	ldr	r3, [pc, #844]	; (1ab4 <hif_isr+0x384>)
    1768:	4798      	blx	r3
    176a:	0003      	movs	r3, r0
    176c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    176e:	230f      	movs	r3, #15
    1770:	18fb      	adds	r3, r7, r3
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	b25b      	sxtb	r3, r3
    1776:	2b00      	cmp	r3, #0
    1778:	d000      	beq.n	177c <hif_isr+0x4c>
    177a:	e172      	b.n	1a62 <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	2201      	movs	r2, #1
    1780:	4013      	ands	r3, r2
    1782:	d100      	bne.n	1786 <hif_isr+0x56>
    1784:	e15c      	b.n	1a40 <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    1786:	2000      	movs	r0, #0
    1788:	4bcb      	ldr	r3, [pc, #812]	; (1ab8 <hif_isr+0x388>)
    178a:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    178c:	68bb      	ldr	r3, [r7, #8]
    178e:	2201      	movs	r2, #1
    1790:	4393      	bics	r3, r2
    1792:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1794:	68bb      	ldr	r3, [r7, #8]
    1796:	220f      	movs	r2, #15
    1798:	18bc      	adds	r4, r7, r2
    179a:	4ac5      	ldr	r2, [pc, #788]	; (1ab0 <hif_isr+0x380>)
    179c:	0019      	movs	r1, r3
    179e:	0010      	movs	r0, r2
    17a0:	4bc6      	ldr	r3, [pc, #792]	; (1abc <hif_isr+0x38c>)
    17a2:	4798      	blx	r3
    17a4:	0003      	movs	r3, r0
    17a6:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    17a8:	230f      	movs	r3, #15
    17aa:	18fb      	adds	r3, r7, r3
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	b25b      	sxtb	r3, r3
    17b0:	2b00      	cmp	r3, #0
    17b2:	d000      	beq.n	17b6 <hif_isr+0x86>
    17b4:	e1bc      	b.n	1b30 <hif_isr+0x400>
				gu8HifSizeDone = 0;
    17b6:	4bc2      	ldr	r3, [pc, #776]	; (1ac0 <hif_isr+0x390>)
    17b8:	2200      	movs	r2, #0
    17ba:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    17bc:	68bb      	ldr	r3, [r7, #8]
    17be:	089b      	lsrs	r3, r3, #2
    17c0:	b29a      	uxth	r2, r3
    17c2:	230c      	movs	r3, #12
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	0512      	lsls	r2, r2, #20
    17c8:	0d12      	lsrs	r2, r2, #20
    17ca:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    17cc:	230c      	movs	r3, #12
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	881b      	ldrh	r3, [r3, #0]
    17d2:	2b00      	cmp	r3, #0
    17d4:	d100      	bne.n	17d8 <hif_isr+0xa8>
    17d6:	e121      	b.n	1a1c <hif_isr+0x2ec>
					uint32 address = 0;
    17d8:	2300      	movs	r3, #0
    17da:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    17dc:	230f      	movs	r3, #15
    17de:	18fc      	adds	r4, r7, r3
    17e0:	003b      	movs	r3, r7
    17e2:	4ab8      	ldr	r2, [pc, #736]	; (1ac4 <hif_isr+0x394>)
    17e4:	0019      	movs	r1, r3
    17e6:	0010      	movs	r0, r2
    17e8:	4bb2      	ldr	r3, [pc, #712]	; (1ab4 <hif_isr+0x384>)
    17ea:	4798      	blx	r3
    17ec:	0003      	movs	r3, r0
    17ee:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    17f0:	230f      	movs	r3, #15
    17f2:	18fb      	adds	r3, r7, r3
    17f4:	781b      	ldrb	r3, [r3, #0]
    17f6:	b25b      	sxtb	r3, r3
    17f8:	2b00      	cmp	r3, #0
    17fa:	d011      	beq.n	1820 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    17fc:	23e7      	movs	r3, #231	; 0xe7
    17fe:	005a      	lsls	r2, r3, #1
    1800:	49b1      	ldr	r1, [pc, #708]	; (1ac8 <hif_isr+0x398>)
    1802:	4bb2      	ldr	r3, [pc, #712]	; (1acc <hif_isr+0x39c>)
    1804:	0018      	movs	r0, r3
    1806:	4bb2      	ldr	r3, [pc, #712]	; (1ad0 <hif_isr+0x3a0>)
    1808:	4798      	blx	r3
    180a:	4bb2      	ldr	r3, [pc, #712]	; (1ad4 <hif_isr+0x3a4>)
    180c:	0018      	movs	r0, r3
    180e:	4bb2      	ldr	r3, [pc, #712]	; (1ad8 <hif_isr+0x3a8>)
    1810:	4798      	blx	r3
    1812:	200d      	movs	r0, #13
    1814:	4bb1      	ldr	r3, [pc, #708]	; (1adc <hif_isr+0x3ac>)
    1816:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1818:	2001      	movs	r0, #1
    181a:	4ba7      	ldr	r3, [pc, #668]	; (1ab8 <hif_isr+0x388>)
    181c:	4798      	blx	r3
						goto ERR1;
    181e:	e188      	b.n	1b32 <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1820:	683b      	ldr	r3, [r7, #0]
    1822:	220f      	movs	r2, #15
    1824:	18bc      	adds	r4, r7, r2
    1826:	1d39      	adds	r1, r7, #4
    1828:	2204      	movs	r2, #4
    182a:	0018      	movs	r0, r3
    182c:	4bac      	ldr	r3, [pc, #688]	; (1ae0 <hif_isr+0x3b0>)
    182e:	4798      	blx	r3
    1830:	0003      	movs	r3, r0
    1832:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1834:	1d3b      	adds	r3, r7, #4
    1836:	885b      	ldrh	r3, [r3, #2]
    1838:	b29a      	uxth	r2, r3
    183a:	1d3b      	adds	r3, r7, #4
    183c:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    183e:	230f      	movs	r3, #15
    1840:	18fb      	adds	r3, r7, r3
    1842:	781b      	ldrb	r3, [r3, #0]
    1844:	b25b      	sxtb	r3, r3
    1846:	2b00      	cmp	r3, #0
    1848:	d011      	beq.n	186e <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    184a:	23eb      	movs	r3, #235	; 0xeb
    184c:	005a      	lsls	r2, r3, #1
    184e:	499e      	ldr	r1, [pc, #632]	; (1ac8 <hif_isr+0x398>)
    1850:	4b9e      	ldr	r3, [pc, #632]	; (1acc <hif_isr+0x39c>)
    1852:	0018      	movs	r0, r3
    1854:	4b9e      	ldr	r3, [pc, #632]	; (1ad0 <hif_isr+0x3a0>)
    1856:	4798      	blx	r3
    1858:	4ba2      	ldr	r3, [pc, #648]	; (1ae4 <hif_isr+0x3b4>)
    185a:	0018      	movs	r0, r3
    185c:	4b9e      	ldr	r3, [pc, #632]	; (1ad8 <hif_isr+0x3a8>)
    185e:	4798      	blx	r3
    1860:	200d      	movs	r0, #13
    1862:	4b9e      	ldr	r3, [pc, #632]	; (1adc <hif_isr+0x3ac>)
    1864:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1866:	2001      	movs	r0, #1
    1868:	4b93      	ldr	r3, [pc, #588]	; (1ab8 <hif_isr+0x388>)
    186a:	4798      	blx	r3
						goto ERR1;
    186c:	e161      	b.n	1b32 <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    186e:	1d3b      	adds	r3, r7, #4
    1870:	885b      	ldrh	r3, [r3, #2]
    1872:	b29b      	uxth	r3, r3
    1874:	220c      	movs	r2, #12
    1876:	18ba      	adds	r2, r7, r2
    1878:	8812      	ldrh	r2, [r2, #0]
    187a:	429a      	cmp	r2, r3
    187c:	d02e      	beq.n	18dc <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    187e:	230c      	movs	r3, #12
    1880:	18fb      	adds	r3, r7, r3
    1882:	881b      	ldrh	r3, [r3, #0]
    1884:	1d3a      	adds	r2, r7, #4
    1886:	8852      	ldrh	r2, [r2, #2]
    1888:	b292      	uxth	r2, r2
    188a:	1a9b      	subs	r3, r3, r2
    188c:	2b04      	cmp	r3, #4
    188e:	dd25      	ble.n	18dc <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1890:	23e0      	movs	r3, #224	; 0xe0
    1892:	33ff      	adds	r3, #255	; 0xff
    1894:	001a      	movs	r2, r3
    1896:	498c      	ldr	r1, [pc, #560]	; (1ac8 <hif_isr+0x398>)
    1898:	4b8c      	ldr	r3, [pc, #560]	; (1acc <hif_isr+0x39c>)
    189a:	0018      	movs	r0, r3
    189c:	4b8c      	ldr	r3, [pc, #560]	; (1ad0 <hif_isr+0x3a0>)
    189e:	4798      	blx	r3
    18a0:	230c      	movs	r3, #12
    18a2:	18fb      	adds	r3, r7, r3
    18a4:	8819      	ldrh	r1, [r3, #0]
    18a6:	1d3b      	adds	r3, r7, #4
    18a8:	885b      	ldrh	r3, [r3, #2]
    18aa:	b29b      	uxth	r3, r3
    18ac:	001a      	movs	r2, r3
    18ae:	1d3b      	adds	r3, r7, #4
    18b0:	781b      	ldrb	r3, [r3, #0]
    18b2:	b2db      	uxtb	r3, r3
    18b4:	001c      	movs	r4, r3
    18b6:	1d3b      	adds	r3, r7, #4
    18b8:	785b      	ldrb	r3, [r3, #1]
    18ba:	b2db      	uxtb	r3, r3
    18bc:	488a      	ldr	r0, [pc, #552]	; (1ae8 <hif_isr+0x3b8>)
    18be:	9300      	str	r3, [sp, #0]
    18c0:	0023      	movs	r3, r4
    18c2:	4c83      	ldr	r4, [pc, #524]	; (1ad0 <hif_isr+0x3a0>)
    18c4:	47a0      	blx	r4
    18c6:	200d      	movs	r0, #13
    18c8:	4b84      	ldr	r3, [pc, #528]	; (1adc <hif_isr+0x3ac>)
    18ca:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    18cc:	2001      	movs	r0, #1
    18ce:	4b7a      	ldr	r3, [pc, #488]	; (1ab8 <hif_isr+0x388>)
    18d0:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    18d2:	230f      	movs	r3, #15
    18d4:	18fb      	adds	r3, r7, r3
    18d6:	22fa      	movs	r2, #250	; 0xfa
    18d8:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    18da:	e12a      	b.n	1b32 <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    18dc:	1d3b      	adds	r3, r7, #4
    18de:	781b      	ldrb	r3, [r3, #0]
    18e0:	b2db      	uxtb	r3, r3
    18e2:	2b01      	cmp	r3, #1
    18e4:	d112      	bne.n	190c <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    18e6:	4b81      	ldr	r3, [pc, #516]	; (1aec <hif_isr+0x3bc>)
    18e8:	681b      	ldr	r3, [r3, #0]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d100      	bne.n	18f0 <hif_isr+0x1c0>
    18ee:	e07c      	b.n	19ea <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    18f0:	4b7e      	ldr	r3, [pc, #504]	; (1aec <hif_isr+0x3bc>)
    18f2:	681b      	ldr	r3, [r3, #0]
    18f4:	1d3a      	adds	r2, r7, #4
    18f6:	7852      	ldrb	r2, [r2, #1]
    18f8:	b2d0      	uxtb	r0, r2
    18fa:	1d3a      	adds	r2, r7, #4
    18fc:	8852      	ldrh	r2, [r2, #2]
    18fe:	b292      	uxth	r2, r2
    1900:	3a08      	subs	r2, #8
    1902:	b291      	uxth	r1, r2
    1904:	683a      	ldr	r2, [r7, #0]
    1906:	3208      	adds	r2, #8
    1908:	4798      	blx	r3
    190a:	e06e      	b.n	19ea <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    190c:	1d3b      	adds	r3, r7, #4
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	b2db      	uxtb	r3, r3
    1912:	2b02      	cmp	r3, #2
    1914:	d111      	bne.n	193a <hif_isr+0x20a>
					{
						if(pfIpCb)
    1916:	4b76      	ldr	r3, [pc, #472]	; (1af0 <hif_isr+0x3c0>)
    1918:	681b      	ldr	r3, [r3, #0]
    191a:	2b00      	cmp	r3, #0
    191c:	d065      	beq.n	19ea <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    191e:	4b74      	ldr	r3, [pc, #464]	; (1af0 <hif_isr+0x3c0>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	1d3a      	adds	r2, r7, #4
    1924:	7852      	ldrb	r2, [r2, #1]
    1926:	b2d0      	uxtb	r0, r2
    1928:	1d3a      	adds	r2, r7, #4
    192a:	8852      	ldrh	r2, [r2, #2]
    192c:	b292      	uxth	r2, r2
    192e:	3a08      	subs	r2, #8
    1930:	b291      	uxth	r1, r2
    1932:	683a      	ldr	r2, [r7, #0]
    1934:	3208      	adds	r2, #8
    1936:	4798      	blx	r3
    1938:	e057      	b.n	19ea <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    193a:	1d3b      	adds	r3, r7, #4
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	b2db      	uxtb	r3, r3
    1940:	2b04      	cmp	r3, #4
    1942:	d111      	bne.n	1968 <hif_isr+0x238>
					{
						if(pfOtaCb)
    1944:	4b6b      	ldr	r3, [pc, #428]	; (1af4 <hif_isr+0x3c4>)
    1946:	681b      	ldr	r3, [r3, #0]
    1948:	2b00      	cmp	r3, #0
    194a:	d04e      	beq.n	19ea <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    194c:	4b69      	ldr	r3, [pc, #420]	; (1af4 <hif_isr+0x3c4>)
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	1d3a      	adds	r2, r7, #4
    1952:	7852      	ldrb	r2, [r2, #1]
    1954:	b2d0      	uxtb	r0, r2
    1956:	1d3a      	adds	r2, r7, #4
    1958:	8852      	ldrh	r2, [r2, #2]
    195a:	b292      	uxth	r2, r2
    195c:	3a08      	subs	r2, #8
    195e:	b291      	uxth	r1, r2
    1960:	683a      	ldr	r2, [r7, #0]
    1962:	3208      	adds	r2, #8
    1964:	4798      	blx	r3
    1966:	e040      	b.n	19ea <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1968:	1d3b      	adds	r3, r7, #4
    196a:	781b      	ldrb	r3, [r3, #0]
    196c:	b2db      	uxtb	r3, r3
    196e:	2b06      	cmp	r3, #6
    1970:	d111      	bne.n	1996 <hif_isr+0x266>
					{
						if(pfCryptoCb)
    1972:	4b61      	ldr	r3, [pc, #388]	; (1af8 <hif_isr+0x3c8>)
    1974:	681b      	ldr	r3, [r3, #0]
    1976:	2b00      	cmp	r3, #0
    1978:	d037      	beq.n	19ea <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    197a:	4b5f      	ldr	r3, [pc, #380]	; (1af8 <hif_isr+0x3c8>)
    197c:	681b      	ldr	r3, [r3, #0]
    197e:	1d3a      	adds	r2, r7, #4
    1980:	7852      	ldrb	r2, [r2, #1]
    1982:	b2d0      	uxtb	r0, r2
    1984:	1d3a      	adds	r2, r7, #4
    1986:	8852      	ldrh	r2, [r2, #2]
    1988:	b292      	uxth	r2, r2
    198a:	3a08      	subs	r2, #8
    198c:	b291      	uxth	r1, r2
    198e:	683a      	ldr	r2, [r7, #0]
    1990:	3208      	adds	r2, #8
    1992:	4798      	blx	r3
    1994:	e029      	b.n	19ea <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1996:	1d3b      	adds	r3, r7, #4
    1998:	781b      	ldrb	r3, [r3, #0]
    199a:	b2db      	uxtb	r3, r3
    199c:	2b07      	cmp	r3, #7
    199e:	d111      	bne.n	19c4 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    19a0:	4b56      	ldr	r3, [pc, #344]	; (1afc <hif_isr+0x3cc>)
    19a2:	681b      	ldr	r3, [r3, #0]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d020      	beq.n	19ea <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    19a8:	4b54      	ldr	r3, [pc, #336]	; (1afc <hif_isr+0x3cc>)
    19aa:	681b      	ldr	r3, [r3, #0]
    19ac:	1d3a      	adds	r2, r7, #4
    19ae:	7852      	ldrb	r2, [r2, #1]
    19b0:	b2d0      	uxtb	r0, r2
    19b2:	1d3a      	adds	r2, r7, #4
    19b4:	8852      	ldrh	r2, [r2, #2]
    19b6:	b292      	uxth	r2, r2
    19b8:	3a08      	subs	r2, #8
    19ba:	b291      	uxth	r1, r2
    19bc:	683a      	ldr	r2, [r7, #0]
    19be:	3208      	adds	r2, #8
    19c0:	4798      	blx	r3
    19c2:	e012      	b.n	19ea <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    19c4:	4a4e      	ldr	r2, [pc, #312]	; (1b00 <hif_isr+0x3d0>)
    19c6:	4940      	ldr	r1, [pc, #256]	; (1ac8 <hif_isr+0x398>)
    19c8:	4b40      	ldr	r3, [pc, #256]	; (1acc <hif_isr+0x39c>)
    19ca:	0018      	movs	r0, r3
    19cc:	4b40      	ldr	r3, [pc, #256]	; (1ad0 <hif_isr+0x3a0>)
    19ce:	4798      	blx	r3
    19d0:	4b4c      	ldr	r3, [pc, #304]	; (1b04 <hif_isr+0x3d4>)
    19d2:	0018      	movs	r0, r3
    19d4:	4b40      	ldr	r3, [pc, #256]	; (1ad8 <hif_isr+0x3a8>)
    19d6:	4798      	blx	r3
    19d8:	200d      	movs	r0, #13
    19da:	4b40      	ldr	r3, [pc, #256]	; (1adc <hif_isr+0x3ac>)
    19dc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    19de:	230f      	movs	r3, #15
    19e0:	18fb      	adds	r3, r7, r3
    19e2:	22fa      	movs	r2, #250	; 0xfa
    19e4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	e0a3      	b.n	1b32 <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    19ea:	4b35      	ldr	r3, [pc, #212]	; (1ac0 <hif_isr+0x390>)
    19ec:	781b      	ldrb	r3, [r3, #0]
    19ee:	b2db      	uxtb	r3, r3
    19f0:	2b00      	cmp	r3, #0
    19f2:	d153      	bne.n	1a9c <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    19f4:	4a44      	ldr	r2, [pc, #272]	; (1b08 <hif_isr+0x3d8>)
    19f6:	4934      	ldr	r1, [pc, #208]	; (1ac8 <hif_isr+0x398>)
    19f8:	4b34      	ldr	r3, [pc, #208]	; (1acc <hif_isr+0x39c>)
    19fa:	0018      	movs	r0, r3
    19fc:	4b34      	ldr	r3, [pc, #208]	; (1ad0 <hif_isr+0x3a0>)
    19fe:	4798      	blx	r3
    1a00:	4b42      	ldr	r3, [pc, #264]	; (1b0c <hif_isr+0x3dc>)
    1a02:	0018      	movs	r0, r3
    1a04:	4b34      	ldr	r3, [pc, #208]	; (1ad8 <hif_isr+0x3a8>)
    1a06:	4798      	blx	r3
    1a08:	200d      	movs	r0, #13
    1a0a:	4b34      	ldr	r3, [pc, #208]	; (1adc <hif_isr+0x3ac>)
    1a0c:	4798      	blx	r3
						ret = hif_set_rx_done();
    1a0e:	230f      	movs	r3, #15
    1a10:	18fc      	adds	r4, r7, r3
    1a12:	4b3f      	ldr	r3, [pc, #252]	; (1b10 <hif_isr+0x3e0>)
    1a14:	4798      	blx	r3
    1a16:	0003      	movs	r3, r0
    1a18:	7023      	strb	r3, [r4, #0]
    1a1a:	e03f      	b.n	1a9c <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    1a1c:	230f      	movs	r3, #15
    1a1e:	18fb      	adds	r3, r7, r3
    1a20:	22fe      	movs	r2, #254	; 0xfe
    1a22:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    1a24:	4a3b      	ldr	r2, [pc, #236]	; (1b14 <hif_isr+0x3e4>)
    1a26:	4928      	ldr	r1, [pc, #160]	; (1ac8 <hif_isr+0x398>)
    1a28:	4b28      	ldr	r3, [pc, #160]	; (1acc <hif_isr+0x39c>)
    1a2a:	0018      	movs	r0, r3
    1a2c:	4b28      	ldr	r3, [pc, #160]	; (1ad0 <hif_isr+0x3a0>)
    1a2e:	4798      	blx	r3
    1a30:	4b39      	ldr	r3, [pc, #228]	; (1b18 <hif_isr+0x3e8>)
    1a32:	0018      	movs	r0, r3
    1a34:	4b28      	ldr	r3, [pc, #160]	; (1ad8 <hif_isr+0x3a8>)
    1a36:	4798      	blx	r3
    1a38:	200d      	movs	r0, #13
    1a3a:	4b28      	ldr	r3, [pc, #160]	; (1adc <hif_isr+0x3ac>)
    1a3c:	4798      	blx	r3
					goto ERR1;
    1a3e:	e078      	b.n	1b32 <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    1a40:	2386      	movs	r3, #134	; 0x86
    1a42:	009a      	lsls	r2, r3, #2
    1a44:	4920      	ldr	r1, [pc, #128]	; (1ac8 <hif_isr+0x398>)
    1a46:	4b21      	ldr	r3, [pc, #132]	; (1acc <hif_isr+0x39c>)
    1a48:	0018      	movs	r0, r3
    1a4a:	4b21      	ldr	r3, [pc, #132]	; (1ad0 <hif_isr+0x3a0>)
    1a4c:	4798      	blx	r3
    1a4e:	68ba      	ldr	r2, [r7, #8]
    1a50:	4b32      	ldr	r3, [pc, #200]	; (1b1c <hif_isr+0x3ec>)
    1a52:	0011      	movs	r1, r2
    1a54:	0018      	movs	r0, r3
    1a56:	4b1e      	ldr	r3, [pc, #120]	; (1ad0 <hif_isr+0x3a0>)
    1a58:	4798      	blx	r3
    1a5a:	200d      	movs	r0, #13
    1a5c:	4b1f      	ldr	r3, [pc, #124]	; (1adc <hif_isr+0x3ac>)
    1a5e:	4798      	blx	r3
    1a60:	e01c      	b.n	1a9c <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1a62:	4a2f      	ldr	r2, [pc, #188]	; (1b20 <hif_isr+0x3f0>)
    1a64:	4918      	ldr	r1, [pc, #96]	; (1ac8 <hif_isr+0x398>)
    1a66:	4b19      	ldr	r3, [pc, #100]	; (1acc <hif_isr+0x39c>)
    1a68:	0018      	movs	r0, r3
    1a6a:	4b19      	ldr	r3, [pc, #100]	; (1ad0 <hif_isr+0x3a0>)
    1a6c:	4798      	blx	r3
    1a6e:	4b2d      	ldr	r3, [pc, #180]	; (1b24 <hif_isr+0x3f4>)
    1a70:	0018      	movs	r0, r3
    1a72:	4b19      	ldr	r3, [pc, #100]	; (1ad8 <hif_isr+0x3a8>)
    1a74:	4798      	blx	r3
    1a76:	200d      	movs	r0, #13
    1a78:	4b18      	ldr	r3, [pc, #96]	; (1adc <hif_isr+0x3ac>)
    1a7a:	4798      	blx	r3
			goto ERR1;
    1a7c:	e059      	b.n	1b32 <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    1a7e:	2389      	movs	r3, #137	; 0x89
    1a80:	009a      	lsls	r2, r3, #2
    1a82:	4911      	ldr	r1, [pc, #68]	; (1ac8 <hif_isr+0x398>)
    1a84:	4b11      	ldr	r3, [pc, #68]	; (1acc <hif_isr+0x39c>)
    1a86:	0018      	movs	r0, r3
    1a88:	4b11      	ldr	r3, [pc, #68]	; (1ad0 <hif_isr+0x3a0>)
    1a8a:	4798      	blx	r3
    1a8c:	4b26      	ldr	r3, [pc, #152]	; (1b28 <hif_isr+0x3f8>)
    1a8e:	0018      	movs	r0, r3
    1a90:	4b11      	ldr	r3, [pc, #68]	; (1ad8 <hif_isr+0x3a8>)
    1a92:	4798      	blx	r3
    1a94:	200d      	movs	r0, #13
    1a96:	4b11      	ldr	r3, [pc, #68]	; (1adc <hif_isr+0x3ac>)
    1a98:	4798      	blx	r3
		goto ERR1;
    1a9a:	e04a      	b.n	1b32 <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    1a9c:	230f      	movs	r3, #15
    1a9e:	18fc      	adds	r4, r7, r3
    1aa0:	4b22      	ldr	r3, [pc, #136]	; (1b2c <hif_isr+0x3fc>)
    1aa2:	4798      	blx	r3
    1aa4:	0003      	movs	r3, r0
    1aa6:	7023      	strb	r3, [r4, #0]
    1aa8:	e043      	b.n	1b32 <hif_isr+0x402>
    1aaa:	46c0      	nop			; (mov r8, r8)
    1aac:	00001291 	.word	0x00001291
    1ab0:	00001070 	.word	0x00001070
    1ab4:	00002289 	.word	0x00002289
    1ab8:	00000df5 	.word	0x00000df5
    1abc:	000022ad 	.word	0x000022ad
    1ac0:	200000be 	.word	0x200000be
    1ac4:	00001084 	.word	0x00001084
    1ac8:	0000cf38 	.word	0x0000cf38
    1acc:	0000ccec 	.word	0x0000ccec
    1ad0:	0000bbb1 	.word	0x0000bbb1
    1ad4:	0000cd1c 	.word	0x0000cd1c
    1ad8:	0000bcd1 	.word	0x0000bcd1
    1adc:	0000bbe5 	.word	0x0000bbe5
    1ae0:	000022fd 	.word	0x000022fd
    1ae4:	0000cd40 	.word	0x0000cd40
    1ae8:	0000cd58 	.word	0x0000cd58
    1aec:	200000c0 	.word	0x200000c0
    1af0:	200000c4 	.word	0x200000c4
    1af4:	200000c8 	.word	0x200000c8
    1af8:	200000d0 	.word	0x200000d0
    1afc:	200000cc 	.word	0x200000cc
    1b00:	00000202 	.word	0x00000202
    1b04:	0000cd98 	.word	0x0000cd98
    1b08:	00000209 	.word	0x00000209
    1b0c:	0000cdb0 	.word	0x0000cdb0
    1b10:	00001225 	.word	0x00001225
    1b14:	00000211 	.word	0x00000211
    1b18:	0000cdd4 	.word	0x0000cdd4
    1b1c:	0000cde8 	.word	0x0000cde8
    1b20:	0000021e 	.word	0x0000021e
    1b24:	0000ce04 	.word	0x0000ce04
    1b28:	0000ce28 	.word	0x0000ce28
    1b2c:	00001329 	.word	0x00001329

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    1b30:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    1b32:	230f      	movs	r3, #15
    1b34:	18fb      	adds	r3, r7, r3
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	b25b      	sxtb	r3, r3
}
    1b3a:	0018      	movs	r0, r3
    1b3c:	46bd      	mov	sp, r7
    1b3e:	b005      	add	sp, #20
    1b40:	bd90      	pop	{r4, r7, pc}
    1b42:	46c0      	nop			; (mov r8, r8)

00001b44 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1b44:	b590      	push	{r4, r7, lr}
    1b46:	b083      	sub	sp, #12
    1b48:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1b4a:	1dfb      	adds	r3, r7, #7
    1b4c:	2200      	movs	r2, #0
    1b4e:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    1b50:	e023      	b.n	1b9a <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    1b52:	4b18      	ldr	r3, [pc, #96]	; (1bb4 <hif_handle_isr+0x70>)
    1b54:	781b      	ldrb	r3, [r3, #0]
    1b56:	b2db      	uxtb	r3, r3
    1b58:	3b01      	subs	r3, #1
    1b5a:	b2da      	uxtb	r2, r3
    1b5c:	4b15      	ldr	r3, [pc, #84]	; (1bb4 <hif_handle_isr+0x70>)
    1b5e:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    1b60:	1dfc      	adds	r4, r7, #7
    1b62:	4b15      	ldr	r3, [pc, #84]	; (1bb8 <hif_handle_isr+0x74>)
    1b64:	4798      	blx	r3
    1b66:	0003      	movs	r3, r0
    1b68:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    1b6a:	1dfb      	adds	r3, r7, #7
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	b25b      	sxtb	r3, r3
    1b70:	2b00      	cmp	r3, #0
    1b72:	d100      	bne.n	1b76 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    1b74:	e011      	b.n	1b9a <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1b76:	4a11      	ldr	r2, [pc, #68]	; (1bbc <hif_handle_isr+0x78>)
    1b78:	4911      	ldr	r1, [pc, #68]	; (1bc0 <hif_handle_isr+0x7c>)
    1b7a:	4b12      	ldr	r3, [pc, #72]	; (1bc4 <hif_handle_isr+0x80>)
    1b7c:	0018      	movs	r0, r3
    1b7e:	4b12      	ldr	r3, [pc, #72]	; (1bc8 <hif_handle_isr+0x84>)
    1b80:	4798      	blx	r3
    1b82:	1dfb      	adds	r3, r7, #7
    1b84:	2200      	movs	r2, #0
    1b86:	569a      	ldrsb	r2, [r3, r2]
    1b88:	4b10      	ldr	r3, [pc, #64]	; (1bcc <hif_handle_isr+0x88>)
    1b8a:	0011      	movs	r1, r2
    1b8c:	0018      	movs	r0, r3
    1b8e:	4b0e      	ldr	r3, [pc, #56]	; (1bc8 <hif_handle_isr+0x84>)
    1b90:	4798      	blx	r3
    1b92:	200d      	movs	r0, #13
    1b94:	4b0e      	ldr	r3, [pc, #56]	; (1bd0 <hif_handle_isr+0x8c>)
    1b96:	4798      	blx	r3
			}
		}
    1b98:	e7e2      	b.n	1b60 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    1b9a:	4b06      	ldr	r3, [pc, #24]	; (1bb4 <hif_handle_isr+0x70>)
    1b9c:	781b      	ldrb	r3, [r3, #0]
    1b9e:	b2db      	uxtb	r3, r3
    1ba0:	2b00      	cmp	r3, #0
    1ba2:	d1d6      	bne.n	1b52 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    1ba4:	1dfb      	adds	r3, r7, #7
    1ba6:	781b      	ldrb	r3, [r3, #0]
    1ba8:	b25b      	sxtb	r3, r3
}
    1baa:	0018      	movs	r0, r3
    1bac:	46bd      	mov	sp, r7
    1bae:	b003      	add	sp, #12
    1bb0:	bd90      	pop	{r4, r7, pc}
    1bb2:	46c0      	nop			; (mov r8, r8)
    1bb4:	200000bf 	.word	0x200000bf
    1bb8:	00001731 	.word	0x00001731
    1bbc:	00000243 	.word	0x00000243
    1bc0:	0000cf40 	.word	0x0000cf40
    1bc4:	0000ccec 	.word	0x0000ccec
    1bc8:	0000bbb1 	.word	0x0000bbb1
    1bcc:	0000ce48 	.word	0x0000ce48
    1bd0:	0000bbe5 	.word	0x0000bbe5

00001bd4 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	b082      	sub	sp, #8
    1bd8:	af00      	add	r7, sp, #0
    1bda:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1bdc:	4b03      	ldr	r3, [pc, #12]	; (1bec <m2m_wifi_handle_events+0x18>)
    1bde:	4798      	blx	r3
    1be0:	0003      	movs	r3, r0
}
    1be2:	0018      	movs	r0, r3
    1be4:	46bd      	mov	sp, r7
    1be6:	b002      	add	sp, #8
    1be8:	bd80      	pop	{r7, pc}
    1bea:	46c0      	nop			; (mov r8, r8)
    1bec:	00001b45 	.word	0x00001b45

00001bf0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1bf0:	b590      	push	{r4, r7, lr}
    1bf2:	b087      	sub	sp, #28
    1bf4:	af02      	add	r7, sp, #8
    1bf6:	60f8      	str	r0, [r7, #12]
    1bf8:	0008      	movs	r0, r1
    1bfa:	0011      	movs	r1, r2
    1bfc:	607b      	str	r3, [r7, #4]
    1bfe:	230b      	movs	r3, #11
    1c00:	18fb      	adds	r3, r7, r3
    1c02:	1c02      	adds	r2, r0, #0
    1c04:	701a      	strb	r2, [r3, #0]
    1c06:	230a      	movs	r3, #10
    1c08:	18fb      	adds	r3, r7, r3
    1c0a:	1c0a      	adds	r2, r1, #0
    1c0c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1c0e:	687c      	ldr	r4, [r7, #4]
    1c10:	230a      	movs	r3, #10
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781a      	ldrb	r2, [r3, #0]
    1c16:	230b      	movs	r3, #11
    1c18:	18fb      	adds	r3, r7, r3
    1c1a:	7819      	ldrb	r1, [r3, #0]
    1c1c:	68f8      	ldr	r0, [r7, #12]
    1c1e:	2300      	movs	r3, #0
    1c20:	9301      	str	r3, [sp, #4]
    1c22:	2320      	movs	r3, #32
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	881b      	ldrh	r3, [r3, #0]
    1c28:	9300      	str	r3, [sp, #0]
    1c2a:	0023      	movs	r3, r4
    1c2c:	4c03      	ldr	r4, [pc, #12]	; (1c3c <m2m_wifi_connect+0x4c>)
    1c2e:	47a0      	blx	r4
    1c30:	0003      	movs	r3, r0
}
    1c32:	0018      	movs	r0, r3
    1c34:	46bd      	mov	sp, r7
    1c36:	b005      	add	sp, #20
    1c38:	bd90      	pop	{r4, r7, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	00001c41 	.word	0x00001c41

00001c40 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1c40:	b5b0      	push	{r4, r5, r7, lr}
    1c42:	b0aa      	sub	sp, #168	; 0xa8
    1c44:	af04      	add	r7, sp, #16
    1c46:	60f8      	str	r0, [r7, #12]
    1c48:	0008      	movs	r0, r1
    1c4a:	0011      	movs	r1, r2
    1c4c:	607b      	str	r3, [r7, #4]
    1c4e:	230b      	movs	r3, #11
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	1c02      	adds	r2, r0, #0
    1c54:	701a      	strb	r2, [r3, #0]
    1c56:	230a      	movs	r3, #10
    1c58:	18fb      	adds	r3, r7, r3
    1c5a:	1c0a      	adds	r2, r1, #0
    1c5c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    1c5e:	2397      	movs	r3, #151	; 0x97
    1c60:	18fb      	adds	r3, r7, r3
    1c62:	2200      	movs	r2, #0
    1c64:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1c66:	230a      	movs	r3, #10
    1c68:	18fb      	adds	r3, r7, r3
    1c6a:	781b      	ldrb	r3, [r3, #0]
    1c6c:	2b01      	cmp	r3, #1
    1c6e:	d100      	bne.n	1c72 <m2m_wifi_connect_sc+0x32>
    1c70:	e083      	b.n	1d7a <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	2b00      	cmp	r3, #0
    1c76:	d111      	bne.n	1c9c <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    1c78:	4ad8      	ldr	r2, [pc, #864]	; (1fdc <m2m_wifi_connect_sc+0x39c>)
    1c7a:	49d9      	ldr	r1, [pc, #868]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1c7c:	4bd9      	ldr	r3, [pc, #868]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1c7e:	0018      	movs	r0, r3
    1c80:	4bd9      	ldr	r3, [pc, #868]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1c82:	4798      	blx	r3
    1c84:	4bd9      	ldr	r3, [pc, #868]	; (1fec <m2m_wifi_connect_sc+0x3ac>)
    1c86:	0018      	movs	r0, r3
    1c88:	4bd9      	ldr	r3, [pc, #868]	; (1ff0 <m2m_wifi_connect_sc+0x3b0>)
    1c8a:	4798      	blx	r3
    1c8c:	200d      	movs	r0, #13
    1c8e:	4bd9      	ldr	r3, [pc, #868]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1c90:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c92:	2397      	movs	r3, #151	; 0x97
    1c94:	18fb      	adds	r3, r7, r3
    1c96:	22f4      	movs	r2, #244	; 0xf4
    1c98:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1c9a:	e1ef      	b.n	207c <STACK_SIZE+0x7c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1c9c:	230a      	movs	r3, #10
    1c9e:	18fb      	adds	r3, r7, r3
    1ca0:	781b      	ldrb	r3, [r3, #0]
    1ca2:	2b02      	cmp	r3, #2
    1ca4:	d169      	bne.n	1d7a <m2m_wifi_connect_sc+0x13a>
    1ca6:	687b      	ldr	r3, [r7, #4]
    1ca8:	0018      	movs	r0, r3
    1caa:	4bd3      	ldr	r3, [pc, #844]	; (1ff8 <m2m_wifi_connect_sc+0x3b8>)
    1cac:	4798      	blx	r3
    1cae:	1e03      	subs	r3, r0, #0
    1cb0:	2b40      	cmp	r3, #64	; 0x40
    1cb2:	d162      	bne.n	1d7a <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    1cb4:	2396      	movs	r3, #150	; 0x96
    1cb6:	18fb      	adds	r3, r7, r3
    1cb8:	2200      	movs	r2, #0
    1cba:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	2290      	movs	r2, #144	; 0x90
    1cc0:	18ba      	adds	r2, r7, r2
    1cc2:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    1cc4:	e054      	b.n	1d70 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1cc6:	2396      	movs	r3, #150	; 0x96
    1cc8:	18fb      	adds	r3, r7, r3
    1cca:	781b      	ldrb	r3, [r3, #0]
    1ccc:	2290      	movs	r2, #144	; 0x90
    1cce:	18ba      	adds	r2, r7, r2
    1cd0:	6812      	ldr	r2, [r2, #0]
    1cd2:	18d3      	adds	r3, r2, r3
    1cd4:	781b      	ldrb	r3, [r3, #0]
    1cd6:	2b2f      	cmp	r3, #47	; 0x2f
    1cd8:	d931      	bls.n	1d3e <m2m_wifi_connect_sc+0xfe>
    1cda:	2396      	movs	r3, #150	; 0x96
    1cdc:	18fb      	adds	r3, r7, r3
    1cde:	781b      	ldrb	r3, [r3, #0]
    1ce0:	2290      	movs	r2, #144	; 0x90
    1ce2:	18ba      	adds	r2, r7, r2
    1ce4:	6812      	ldr	r2, [r2, #0]
    1ce6:	18d3      	adds	r3, r2, r3
    1ce8:	781b      	ldrb	r3, [r3, #0]
    1cea:	2b39      	cmp	r3, #57	; 0x39
    1cec:	d909      	bls.n	1d02 <m2m_wifi_connect_sc+0xc2>
    1cee:	2396      	movs	r3, #150	; 0x96
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	2290      	movs	r2, #144	; 0x90
    1cf6:	18ba      	adds	r2, r7, r2
    1cf8:	6812      	ldr	r2, [r2, #0]
    1cfa:	18d3      	adds	r3, r2, r3
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	2b40      	cmp	r3, #64	; 0x40
    1d00:	d91d      	bls.n	1d3e <m2m_wifi_connect_sc+0xfe>
    1d02:	2396      	movs	r3, #150	; 0x96
    1d04:	18fb      	adds	r3, r7, r3
    1d06:	781b      	ldrb	r3, [r3, #0]
    1d08:	2290      	movs	r2, #144	; 0x90
    1d0a:	18ba      	adds	r2, r7, r2
    1d0c:	6812      	ldr	r2, [r2, #0]
    1d0e:	18d3      	adds	r3, r2, r3
    1d10:	781b      	ldrb	r3, [r3, #0]
    1d12:	2b46      	cmp	r3, #70	; 0x46
    1d14:	d909      	bls.n	1d2a <m2m_wifi_connect_sc+0xea>
    1d16:	2396      	movs	r3, #150	; 0x96
    1d18:	18fb      	adds	r3, r7, r3
    1d1a:	781b      	ldrb	r3, [r3, #0]
    1d1c:	2290      	movs	r2, #144	; 0x90
    1d1e:	18ba      	adds	r2, r7, r2
    1d20:	6812      	ldr	r2, [r2, #0]
    1d22:	18d3      	adds	r3, r2, r3
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	2b60      	cmp	r3, #96	; 0x60
    1d28:	d909      	bls.n	1d3e <m2m_wifi_connect_sc+0xfe>
    1d2a:	2396      	movs	r3, #150	; 0x96
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	2290      	movs	r2, #144	; 0x90
    1d32:	18ba      	adds	r2, r7, r2
    1d34:	6812      	ldr	r2, [r2, #0]
    1d36:	18d3      	adds	r3, r2, r3
    1d38:	781b      	ldrb	r3, [r3, #0]
    1d3a:	2b66      	cmp	r3, #102	; 0x66
    1d3c:	d911      	bls.n	1d62 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    1d3e:	4aaf      	ldr	r2, [pc, #700]	; (1ffc <m2m_wifi_connect_sc+0x3bc>)
    1d40:	49a7      	ldr	r1, [pc, #668]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1d42:	4ba8      	ldr	r3, [pc, #672]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1d44:	0018      	movs	r0, r3
    1d46:	4ba8      	ldr	r3, [pc, #672]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1d48:	4798      	blx	r3
    1d4a:	4bad      	ldr	r3, [pc, #692]	; (2000 <STACK_SIZE>)
    1d4c:	0018      	movs	r0, r3
    1d4e:	4ba8      	ldr	r3, [pc, #672]	; (1ff0 <m2m_wifi_connect_sc+0x3b0>)
    1d50:	4798      	blx	r3
    1d52:	200d      	movs	r0, #13
    1d54:	4ba7      	ldr	r3, [pc, #668]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1d56:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1d58:	2397      	movs	r3, #151	; 0x97
    1d5a:	18fb      	adds	r3, r7, r3
    1d5c:	22f4      	movs	r2, #244	; 0xf4
    1d5e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    1d60:	e18c      	b.n	207c <STACK_SIZE+0x7c>
				}
				i++;
    1d62:	2396      	movs	r3, #150	; 0x96
    1d64:	18fb      	adds	r3, r7, r3
    1d66:	781a      	ldrb	r2, [r3, #0]
    1d68:	2396      	movs	r3, #150	; 0x96
    1d6a:	18fb      	adds	r3, r7, r3
    1d6c:	3201      	adds	r2, #1
    1d6e:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    1d70:	2396      	movs	r3, #150	; 0x96
    1d72:	18fb      	adds	r3, r7, r3
    1d74:	781b      	ldrb	r3, [r3, #0]
    1d76:	2b3f      	cmp	r3, #63	; 0x3f
    1d78:	d9a5      	bls.n	1cc6 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1d7a:	230b      	movs	r3, #11
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	781b      	ldrb	r3, [r3, #0]
    1d80:	2b00      	cmp	r3, #0
    1d82:	d004      	beq.n	1d8e <m2m_wifi_connect_sc+0x14e>
    1d84:	230b      	movs	r3, #11
    1d86:	18fb      	adds	r3, r7, r3
    1d88:	781b      	ldrb	r3, [r3, #0]
    1d8a:	2b20      	cmp	r3, #32
    1d8c:	d911      	bls.n	1db2 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    1d8e:	4a9d      	ldr	r2, [pc, #628]	; (2004 <STACK_SIZE+0x4>)
    1d90:	4993      	ldr	r1, [pc, #588]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1d92:	4b94      	ldr	r3, [pc, #592]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1d94:	0018      	movs	r0, r3
    1d96:	4b94      	ldr	r3, [pc, #592]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1d98:	4798      	blx	r3
    1d9a:	4b9b      	ldr	r3, [pc, #620]	; (2008 <STACK_SIZE+0x8>)
    1d9c:	0018      	movs	r0, r3
    1d9e:	4b94      	ldr	r3, [pc, #592]	; (1ff0 <m2m_wifi_connect_sc+0x3b0>)
    1da0:	4798      	blx	r3
    1da2:	200d      	movs	r0, #13
    1da4:	4b93      	ldr	r3, [pc, #588]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1da6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1da8:	2397      	movs	r3, #151	; 0x97
    1daa:	18fb      	adds	r3, r7, r3
    1dac:	22f4      	movs	r2, #244	; 0xf4
    1dae:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    1db0:	e164      	b.n	207c <STACK_SIZE+0x7c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    1db2:	23a8      	movs	r3, #168	; 0xa8
    1db4:	18fb      	adds	r3, r7, r3
    1db6:	881b      	ldrh	r3, [r3, #0]
    1db8:	2b0d      	cmp	r3, #13
    1dba:	d916      	bls.n	1dea <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1dbc:	23a8      	movs	r3, #168	; 0xa8
    1dbe:	18fb      	adds	r3, r7, r3
    1dc0:	881b      	ldrh	r3, [r3, #0]
    1dc2:	2bff      	cmp	r3, #255	; 0xff
    1dc4:	d011      	beq.n	1dea <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    1dc6:	4a91      	ldr	r2, [pc, #580]	; (200c <STACK_SIZE+0xc>)
    1dc8:	4985      	ldr	r1, [pc, #532]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1dca:	4b86      	ldr	r3, [pc, #536]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1dcc:	0018      	movs	r0, r3
    1dce:	4b86      	ldr	r3, [pc, #536]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1dd0:	4798      	blx	r3
    1dd2:	4b8f      	ldr	r3, [pc, #572]	; (2010 <STACK_SIZE+0x10>)
    1dd4:	0018      	movs	r0, r3
    1dd6:	4b86      	ldr	r3, [pc, #536]	; (1ff0 <m2m_wifi_connect_sc+0x3b0>)
    1dd8:	4798      	blx	r3
    1dda:	200d      	movs	r0, #13
    1ddc:	4b85      	ldr	r3, [pc, #532]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1dde:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1de0:	2397      	movs	r3, #151	; 0x97
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	22f4      	movs	r2, #244	; 0xf4
    1de6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1de8:	e148      	b.n	207c <STACK_SIZE+0x7c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1dea:	230b      	movs	r3, #11
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	781a      	ldrb	r2, [r3, #0]
    1df0:	68f9      	ldr	r1, [r7, #12]
    1df2:	2314      	movs	r3, #20
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	3346      	adds	r3, #70	; 0x46
    1df8:	0018      	movs	r0, r3
    1dfa:	4b86      	ldr	r3, [pc, #536]	; (2014 <STACK_SIZE+0x14>)
    1dfc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1dfe:	230b      	movs	r3, #11
    1e00:	18fb      	adds	r3, r7, r3
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	2214      	movs	r2, #20
    1e06:	18ba      	adds	r2, r7, r2
    1e08:	2146      	movs	r1, #70	; 0x46
    1e0a:	18d3      	adds	r3, r2, r3
    1e0c:	185b      	adds	r3, r3, r1
    1e0e:	2200      	movs	r2, #0
    1e10:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1e12:	2314      	movs	r3, #20
    1e14:	18fb      	adds	r3, r7, r3
    1e16:	22a8      	movs	r2, #168	; 0xa8
    1e18:	18ba      	adds	r2, r7, r2
    1e1a:	2144      	movs	r1, #68	; 0x44
    1e1c:	8812      	ldrh	r2, [r2, #0]
    1e1e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1e20:	23ac      	movs	r3, #172	; 0xac
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	781b      	ldrb	r3, [r3, #0]
    1e26:	1e5a      	subs	r2, r3, #1
    1e28:	4193      	sbcs	r3, r2
    1e2a:	b2db      	uxtb	r3, r3
    1e2c:	0019      	movs	r1, r3
    1e2e:	2314      	movs	r3, #20
    1e30:	18fb      	adds	r3, r7, r3
    1e32:	2267      	movs	r2, #103	; 0x67
    1e34:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    1e36:	2314      	movs	r3, #20
    1e38:	18fb      	adds	r3, r7, r3
    1e3a:	228c      	movs	r2, #140	; 0x8c
    1e3c:	18ba      	adds	r2, r7, r2
    1e3e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    1e40:	238c      	movs	r3, #140	; 0x8c
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	220a      	movs	r2, #10
    1e48:	18ba      	adds	r2, r7, r2
    1e4a:	2141      	movs	r1, #65	; 0x41
    1e4c:	7812      	ldrb	r2, [r2, #0]
    1e4e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1e50:	230a      	movs	r3, #10
    1e52:	18fb      	adds	r3, r7, r3
    1e54:	781b      	ldrb	r3, [r3, #0]
    1e56:	2b03      	cmp	r3, #3
    1e58:	d000      	beq.n	1e5c <m2m_wifi_connect_sc+0x21c>
    1e5a:	e07b      	b.n	1f54 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	2288      	movs	r2, #136	; 0x88
    1e60:	18ba      	adds	r2, r7, r2
    1e62:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    1e64:	238c      	movs	r3, #140	; 0x8c
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	681b      	ldr	r3, [r3, #0]
    1e6a:	2284      	movs	r2, #132	; 0x84
    1e6c:	18ba      	adds	r2, r7, r2
    1e6e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1e70:	2388      	movs	r3, #136	; 0x88
    1e72:	18fb      	adds	r3, r7, r3
    1e74:	681b      	ldr	r3, [r3, #0]
    1e76:	781b      	ldrb	r3, [r3, #0]
    1e78:	3b01      	subs	r3, #1
    1e7a:	b2da      	uxtb	r2, r3
    1e7c:	2384      	movs	r3, #132	; 0x84
    1e7e:	18fb      	adds	r3, r7, r3
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1e84:	2384      	movs	r3, #132	; 0x84
    1e86:	18fb      	adds	r3, r7, r3
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	781b      	ldrb	r3, [r3, #0]
    1e8c:	2b03      	cmp	r3, #3
    1e8e:	d917      	bls.n	1ec0 <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1e90:	4a61      	ldr	r2, [pc, #388]	; (2018 <STACK_SIZE+0x18>)
    1e92:	4953      	ldr	r1, [pc, #332]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1e94:	4b53      	ldr	r3, [pc, #332]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1e96:	0018      	movs	r0, r3
    1e98:	4b53      	ldr	r3, [pc, #332]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1e9a:	4798      	blx	r3
    1e9c:	2384      	movs	r3, #132	; 0x84
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	781b      	ldrb	r3, [r3, #0]
    1ea4:	001a      	movs	r2, r3
    1ea6:	4b5d      	ldr	r3, [pc, #372]	; (201c <STACK_SIZE+0x1c>)
    1ea8:	0011      	movs	r1, r2
    1eaa:	0018      	movs	r0, r3
    1eac:	4b4e      	ldr	r3, [pc, #312]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1eae:	4798      	blx	r3
    1eb0:	200d      	movs	r0, #13
    1eb2:	4b50      	ldr	r3, [pc, #320]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1eb4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1eb6:	2397      	movs	r3, #151	; 0x97
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	22f4      	movs	r2, #244	; 0xf4
    1ebc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1ebe:	e0dd      	b.n	207c <STACK_SIZE+0x7c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1ec0:	2388      	movs	r3, #136	; 0x88
    1ec2:	18fb      	adds	r3, r7, r3
    1ec4:	681b      	ldr	r3, [r3, #0]
    1ec6:	785b      	ldrb	r3, [r3, #1]
    1ec8:	3b01      	subs	r3, #1
    1eca:	b2da      	uxtb	r2, r3
    1ecc:	2384      	movs	r3, #132	; 0x84
    1ece:	18fb      	adds	r3, r7, r3
    1ed0:	681b      	ldr	r3, [r3, #0]
    1ed2:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1ed4:	2384      	movs	r3, #132	; 0x84
    1ed6:	18fb      	adds	r3, r7, r3
    1ed8:	681b      	ldr	r3, [r3, #0]
    1eda:	785b      	ldrb	r3, [r3, #1]
    1edc:	2b0a      	cmp	r3, #10
    1ede:	d01e      	beq.n	1f1e <m2m_wifi_connect_sc+0x2de>
    1ee0:	2384      	movs	r3, #132	; 0x84
    1ee2:	18fb      	adds	r3, r7, r3
    1ee4:	681b      	ldr	r3, [r3, #0]
    1ee6:	785b      	ldrb	r3, [r3, #1]
    1ee8:	2b1a      	cmp	r3, #26
    1eea:	d018      	beq.n	1f1e <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1eec:	2390      	movs	r3, #144	; 0x90
    1eee:	009a      	lsls	r2, r3, #2
    1ef0:	493b      	ldr	r1, [pc, #236]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1ef2:	4b3c      	ldr	r3, [pc, #240]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1ef4:	0018      	movs	r0, r3
    1ef6:	4b3c      	ldr	r3, [pc, #240]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1ef8:	4798      	blx	r3
    1efa:	2384      	movs	r3, #132	; 0x84
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	681b      	ldr	r3, [r3, #0]
    1f00:	785b      	ldrb	r3, [r3, #1]
    1f02:	001a      	movs	r2, r3
    1f04:	4b46      	ldr	r3, [pc, #280]	; (2020 <STACK_SIZE+0x20>)
    1f06:	0011      	movs	r1, r2
    1f08:	0018      	movs	r0, r3
    1f0a:	4b37      	ldr	r3, [pc, #220]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1f0c:	4798      	blx	r3
    1f0e:	200d      	movs	r0, #13
    1f10:	4b38      	ldr	r3, [pc, #224]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1f12:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f14:	2397      	movs	r3, #151	; 0x97
    1f16:	18fb      	adds	r3, r7, r3
    1f18:	22f4      	movs	r2, #244	; 0xf4
    1f1a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1f1c:	e0ae      	b.n	207c <STACK_SIZE+0x7c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1f1e:	2384      	movs	r3, #132	; 0x84
    1f20:	18fb      	adds	r3, r7, r3
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	1c98      	adds	r0, r3, #2
    1f26:	2388      	movs	r3, #136	; 0x88
    1f28:	18fb      	adds	r3, r7, r3
    1f2a:	681b      	ldr	r3, [r3, #0]
    1f2c:	1c99      	adds	r1, r3, #2
    1f2e:	2388      	movs	r3, #136	; 0x88
    1f30:	18fb      	adds	r3, r7, r3
    1f32:	681b      	ldr	r3, [r3, #0]
    1f34:	785b      	ldrb	r3, [r3, #1]
    1f36:	001a      	movs	r2, r3
    1f38:	4b36      	ldr	r3, [pc, #216]	; (2014 <STACK_SIZE+0x14>)
    1f3a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1f3c:	2388      	movs	r3, #136	; 0x88
    1f3e:	18fb      	adds	r3, r7, r3
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	785b      	ldrb	r3, [r3, #1]
    1f44:	001a      	movs	r2, r3
    1f46:	2384      	movs	r3, #132	; 0x84
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	681b      	ldr	r3, [r3, #0]
    1f4c:	189b      	adds	r3, r3, r2
    1f4e:	2200      	movs	r2, #0
    1f50:	709a      	strb	r2, [r3, #2]
    1f52:	e082      	b.n	205a <STACK_SIZE+0x5a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1f54:	230a      	movs	r3, #10
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	2b02      	cmp	r3, #2
    1f5c:	d130      	bne.n	1fc0 <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1f5e:	2382      	movs	r3, #130	; 0x82
    1f60:	18fc      	adds	r4, r7, r3
    1f62:	687b      	ldr	r3, [r7, #4]
    1f64:	0018      	movs	r0, r3
    1f66:	4b24      	ldr	r3, [pc, #144]	; (1ff8 <m2m_wifi_connect_sc+0x3b8>)
    1f68:	4798      	blx	r3
    1f6a:	0003      	movs	r3, r0
    1f6c:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1f6e:	2382      	movs	r3, #130	; 0x82
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	881b      	ldrh	r3, [r3, #0]
    1f74:	2b00      	cmp	r3, #0
    1f76:	d004      	beq.n	1f82 <m2m_wifi_connect_sc+0x342>
    1f78:	2382      	movs	r3, #130	; 0x82
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	881b      	ldrh	r3, [r3, #0]
    1f7e:	2b40      	cmp	r3, #64	; 0x40
    1f80:	d911      	bls.n	1fa6 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    1f82:	4a28      	ldr	r2, [pc, #160]	; (2024 <STACK_SIZE+0x24>)
    1f84:	4916      	ldr	r1, [pc, #88]	; (1fe0 <m2m_wifi_connect_sc+0x3a0>)
    1f86:	4b17      	ldr	r3, [pc, #92]	; (1fe4 <m2m_wifi_connect_sc+0x3a4>)
    1f88:	0018      	movs	r0, r3
    1f8a:	4b17      	ldr	r3, [pc, #92]	; (1fe8 <m2m_wifi_connect_sc+0x3a8>)
    1f8c:	4798      	blx	r3
    1f8e:	4b26      	ldr	r3, [pc, #152]	; (2028 <STACK_SIZE+0x28>)
    1f90:	0018      	movs	r0, r3
    1f92:	4b17      	ldr	r3, [pc, #92]	; (1ff0 <m2m_wifi_connect_sc+0x3b0>)
    1f94:	4798      	blx	r3
    1f96:	200d      	movs	r0, #13
    1f98:	4b16      	ldr	r3, [pc, #88]	; (1ff4 <m2m_wifi_connect_sc+0x3b4>)
    1f9a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f9c:	2397      	movs	r3, #151	; 0x97
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	22f4      	movs	r2, #244	; 0xf4
    1fa2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1fa4:	e06a      	b.n	207c <STACK_SIZE+0x7c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1fa6:	238c      	movs	r3, #140	; 0x8c
    1fa8:	18fb      	adds	r3, r7, r3
    1faa:	6818      	ldr	r0, [r3, #0]
    1fac:	2382      	movs	r3, #130	; 0x82
    1fae:	18fb      	adds	r3, r7, r3
    1fb0:	881b      	ldrh	r3, [r3, #0]
    1fb2:	3301      	adds	r3, #1
    1fb4:	001a      	movs	r2, r3
    1fb6:	687b      	ldr	r3, [r7, #4]
    1fb8:	0019      	movs	r1, r3
    1fba:	4b16      	ldr	r3, [pc, #88]	; (2014 <STACK_SIZE+0x14>)
    1fbc:	4798      	blx	r3
    1fbe:	e04c      	b.n	205a <STACK_SIZE+0x5a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1fc0:	230a      	movs	r3, #10
    1fc2:	18fb      	adds	r3, r7, r3
    1fc4:	781b      	ldrb	r3, [r3, #0]
    1fc6:	2b04      	cmp	r3, #4
    1fc8:	d130      	bne.n	202c <STACK_SIZE+0x2c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1fca:	238c      	movs	r3, #140	; 0x8c
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	681b      	ldr	r3, [r3, #0]
    1fd0:	6879      	ldr	r1, [r7, #4]
    1fd2:	223e      	movs	r2, #62	; 0x3e
    1fd4:	0018      	movs	r0, r3
    1fd6:	4b0f      	ldr	r3, [pc, #60]	; (2014 <STACK_SIZE+0x14>)
    1fd8:	4798      	blx	r3
    1fda:	e03e      	b.n	205a <STACK_SIZE+0x5a>
    1fdc:	00000203 	.word	0x00000203
    1fe0:	0000d274 	.word	0x0000d274
    1fe4:	0000cf7c 	.word	0x0000cf7c
    1fe8:	0000bbb1 	.word	0x0000bbb1
    1fec:	0000d128 	.word	0x0000d128
    1ff0:	0000bcd1 	.word	0x0000bcd1
    1ff4:	0000bbe5 	.word	0x0000bbe5
    1ff8:	000011e9 	.word	0x000011e9
    1ffc:	0000020f 	.word	0x0000020f
    2000:	0000d13c 	.word	0x0000d13c
    2004:	00000219 	.word	0x00000219
    2008:	0000d148 	.word	0x0000d148
    200c:	00000222 	.word	0x00000222
    2010:	0000d15c 	.word	0x0000d15c
    2014:	0000116d 	.word	0x0000116d
    2018:	00000239 	.word	0x00000239
    201c:	0000d168 	.word	0x0000d168
    2020:	0000d184 	.word	0x0000d184
    2024:	0000024f 	.word	0x0000024f
    2028:	0000d1a0 	.word	0x0000d1a0
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    202c:	230a      	movs	r3, #10
    202e:	18fb      	adds	r3, r7, r3
    2030:	781b      	ldrb	r3, [r3, #0]
    2032:	2b01      	cmp	r3, #1
    2034:	d011      	beq.n	205a <STACK_SIZE+0x5a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    2036:	4a15      	ldr	r2, [pc, #84]	; (208c <STACK_SIZE+0x8c>)
    2038:	4915      	ldr	r1, [pc, #84]	; (2090 <STACK_SIZE+0x90>)
    203a:	4b16      	ldr	r3, [pc, #88]	; (2094 <STACK_SIZE+0x94>)
    203c:	0018      	movs	r0, r3
    203e:	4b16      	ldr	r3, [pc, #88]	; (2098 <STACK_SIZE+0x98>)
    2040:	4798      	blx	r3
    2042:	4b16      	ldr	r3, [pc, #88]	; (209c <STACK_SIZE+0x9c>)
    2044:	0018      	movs	r0, r3
    2046:	4b16      	ldr	r3, [pc, #88]	; (20a0 <STACK_SIZE+0xa0>)
    2048:	4798      	blx	r3
    204a:	200d      	movs	r0, #13
    204c:	4b15      	ldr	r3, [pc, #84]	; (20a4 <STACK_SIZE+0xa4>)
    204e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2050:	2397      	movs	r3, #151	; 0x97
    2052:	18fb      	adds	r3, r7, r3
    2054:	22f4      	movs	r2, #244	; 0xf4
    2056:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2058:	e010      	b.n	207c <STACK_SIZE+0x7c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    205a:	2397      	movs	r3, #151	; 0x97
    205c:	18fc      	adds	r4, r7, r3
    205e:	2314      	movs	r3, #20
    2060:	18fa      	adds	r2, r7, r3
    2062:	2300      	movs	r3, #0
    2064:	9302      	str	r3, [sp, #8]
    2066:	2300      	movs	r3, #0
    2068:	9301      	str	r3, [sp, #4]
    206a:	2300      	movs	r3, #0
    206c:	9300      	str	r3, [sp, #0]
    206e:	236c      	movs	r3, #108	; 0x6c
    2070:	2128      	movs	r1, #40	; 0x28
    2072:	2001      	movs	r0, #1
    2074:	4d0c      	ldr	r5, [pc, #48]	; (20a8 <STACK_SIZE+0xa8>)
    2076:	47a8      	blx	r5
    2078:	0003      	movs	r3, r0
    207a:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    207c:	2397      	movs	r3, #151	; 0x97
    207e:	18fb      	adds	r3, r7, r3
    2080:	781b      	ldrb	r3, [r3, #0]
    2082:	b25b      	sxtb	r3, r3
}
    2084:	0018      	movs	r0, r3
    2086:	46bd      	mov	sp, r7
    2088:	b026      	add	sp, #152	; 0x98
    208a:	bdb0      	pop	{r4, r5, r7, pc}
    208c:	0000025f 	.word	0x0000025f
    2090:	0000d274 	.word	0x0000d274
    2094:	0000cf7c 	.word	0x0000cf7c
    2098:	0000bbb1 	.word	0x0000bbb1
    209c:	0000d1bc 	.word	0x0000d1bc
    20a0:	0000bcd1 	.word	0x0000bcd1
    20a4:	0000bbe5 	.word	0x0000bbe5
    20a8:	000013f5 	.word	0x000013f5

000020ac <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    20ac:	b590      	push	{r4, r7, lr}
    20ae:	b085      	sub	sp, #20
    20b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    20b2:	230f      	movs	r3, #15
    20b4:	18fb      	adds	r3, r7, r3
    20b6:	2200      	movs	r2, #0
    20b8:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    20ba:	2300      	movs	r3, #0
    20bc:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    20be:	2001      	movs	r0, #1
    20c0:	4b64      	ldr	r3, [pc, #400]	; (2254 <nm_clkless_wake+0x1a8>)
    20c2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    20c4:	230f      	movs	r3, #15
    20c6:	18fc      	adds	r4, r7, r3
    20c8:	1d3b      	adds	r3, r7, #4
    20ca:	0019      	movs	r1, r3
    20cc:	2001      	movs	r0, #1
    20ce:	4b62      	ldr	r3, [pc, #392]	; (2258 <nm_clkless_wake+0x1ac>)
    20d0:	4798      	blx	r3
    20d2:	0003      	movs	r3, r0
    20d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    20d6:	230f      	movs	r3, #15
    20d8:	18fb      	adds	r3, r7, r3
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	b25b      	sxtb	r3, r3
    20de:	2b00      	cmp	r3, #0
    20e0:	d00d      	beq.n	20fe <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    20e2:	495e      	ldr	r1, [pc, #376]	; (225c <nm_clkless_wake+0x1b0>)
    20e4:	4b5e      	ldr	r3, [pc, #376]	; (2260 <nm_clkless_wake+0x1b4>)
    20e6:	2272      	movs	r2, #114	; 0x72
    20e8:	0018      	movs	r0, r3
    20ea:	4b5e      	ldr	r3, [pc, #376]	; (2264 <nm_clkless_wake+0x1b8>)
    20ec:	4798      	blx	r3
    20ee:	4b5e      	ldr	r3, [pc, #376]	; (2268 <nm_clkless_wake+0x1bc>)
    20f0:	0018      	movs	r0, r3
    20f2:	4b5e      	ldr	r3, [pc, #376]	; (226c <nm_clkless_wake+0x1c0>)
    20f4:	4798      	blx	r3
    20f6:	200d      	movs	r0, #13
    20f8:	4b5d      	ldr	r3, [pc, #372]	; (2270 <nm_clkless_wake+0x1c4>)
    20fa:	4798      	blx	r3
		goto _WAKE_EXIT;
    20fc:	e0a1      	b.n	2242 <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    20fe:	687b      	ldr	r3, [r7, #4]
    2100:	2202      	movs	r2, #2
    2102:	4313      	orrs	r3, r2
    2104:	0019      	movs	r1, r3
    2106:	2001      	movs	r0, #1
    2108:	4b5a      	ldr	r3, [pc, #360]	; (2274 <nm_clkless_wake+0x1c8>)
    210a:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    210c:	2001      	movs	r0, #1
    210e:	4b51      	ldr	r3, [pc, #324]	; (2254 <nm_clkless_wake+0x1a8>)
    2110:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2112:	4b59      	ldr	r3, [pc, #356]	; (2278 <nm_clkless_wake+0x1cc>)
    2114:	681b      	ldr	r3, [r3, #0]
    2116:	220f      	movs	r2, #15
    2118:	18bc      	adds	r4, r7, r2
    211a:	003a      	movs	r2, r7
    211c:	0011      	movs	r1, r2
    211e:	0018      	movs	r0, r3
    2120:	4b4d      	ldr	r3, [pc, #308]	; (2258 <nm_clkless_wake+0x1ac>)
    2122:	4798      	blx	r3
    2124:	0003      	movs	r3, r0
    2126:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    2128:	230f      	movs	r3, #15
    212a:	18fb      	adds	r3, r7, r3
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	b25b      	sxtb	r3, r3
    2130:	2b00      	cmp	r3, #0
    2132:	d108      	bne.n	2146 <nm_clkless_wake+0x9a>
    2134:	230f      	movs	r3, #15
    2136:	18fb      	adds	r3, r7, r3
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	b25b      	sxtb	r3, r3
    213c:	2b00      	cmp	r3, #0
    213e:	d162      	bne.n	2206 <nm_clkless_wake+0x15a>
    2140:	683b      	ldr	r3, [r7, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d15f      	bne.n	2206 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    2146:	4b4c      	ldr	r3, [pc, #304]	; (2278 <nm_clkless_wake+0x1cc>)
    2148:	220e      	movs	r2, #14
    214a:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    214c:	2001      	movs	r0, #1
    214e:	4b41      	ldr	r3, [pc, #260]	; (2254 <nm_clkless_wake+0x1a8>)
    2150:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2152:	4b49      	ldr	r3, [pc, #292]	; (2278 <nm_clkless_wake+0x1cc>)
    2154:	681b      	ldr	r3, [r3, #0]
    2156:	220f      	movs	r2, #15
    2158:	18bc      	adds	r4, r7, r2
    215a:	003a      	movs	r2, r7
    215c:	0011      	movs	r1, r2
    215e:	0018      	movs	r0, r3
    2160:	4b3d      	ldr	r3, [pc, #244]	; (2258 <nm_clkless_wake+0x1ac>)
    2162:	4798      	blx	r3
    2164:	0003      	movs	r3, r0
    2166:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    2168:	230f      	movs	r3, #15
    216a:	18fb      	adds	r3, r7, r3
    216c:	781b      	ldrb	r3, [r3, #0]
    216e:	b25b      	sxtb	r3, r3
    2170:	2b00      	cmp	r3, #0
    2172:	d108      	bne.n	2186 <nm_clkless_wake+0xda>
    2174:	230f      	movs	r3, #15
    2176:	18fb      	adds	r3, r7, r3
    2178:	781b      	ldrb	r3, [r3, #0]
    217a:	b25b      	sxtb	r3, r3
    217c:	2b00      	cmp	r3, #0
    217e:	d142      	bne.n	2206 <nm_clkless_wake+0x15a>
    2180:	683b      	ldr	r3, [r7, #0]
    2182:	2b00      	cmp	r3, #0
    2184:	d13f      	bne.n	2206 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    2186:	4b3c      	ldr	r3, [pc, #240]	; (2278 <nm_clkless_wake+0x1cc>)
    2188:	2213      	movs	r2, #19
    218a:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    218c:	2001      	movs	r0, #1
    218e:	4b31      	ldr	r3, [pc, #196]	; (2254 <nm_clkless_wake+0x1a8>)
    2190:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2192:	4b39      	ldr	r3, [pc, #228]	; (2278 <nm_clkless_wake+0x1cc>)
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	220f      	movs	r2, #15
    2198:	18bc      	adds	r4, r7, r2
    219a:	003a      	movs	r2, r7
    219c:	0011      	movs	r1, r2
    219e:	0018      	movs	r0, r3
    21a0:	4b2d      	ldr	r3, [pc, #180]	; (2258 <nm_clkless_wake+0x1ac>)
    21a2:	4798      	blx	r3
    21a4:	0003      	movs	r3, r0
    21a6:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    21a8:	230f      	movs	r3, #15
    21aa:	18fb      	adds	r3, r7, r3
    21ac:	781b      	ldrb	r3, [r3, #0]
    21ae:	b25b      	sxtb	r3, r3
    21b0:	2b00      	cmp	r3, #0
    21b2:	d028      	beq.n	2206 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    21b4:	4929      	ldr	r1, [pc, #164]	; (225c <nm_clkless_wake+0x1b0>)
    21b6:	4b2a      	ldr	r3, [pc, #168]	; (2260 <nm_clkless_wake+0x1b4>)
    21b8:	2296      	movs	r2, #150	; 0x96
    21ba:	0018      	movs	r0, r3
    21bc:	4b29      	ldr	r3, [pc, #164]	; (2264 <nm_clkless_wake+0x1b8>)
    21be:	4798      	blx	r3
    21c0:	4b2e      	ldr	r3, [pc, #184]	; (227c <nm_clkless_wake+0x1d0>)
    21c2:	0018      	movs	r0, r3
    21c4:	4b29      	ldr	r3, [pc, #164]	; (226c <nm_clkless_wake+0x1c0>)
    21c6:	4798      	blx	r3
    21c8:	200d      	movs	r0, #13
    21ca:	4b29      	ldr	r3, [pc, #164]	; (2270 <nm_clkless_wake+0x1c4>)
    21cc:	4798      	blx	r3
					goto _WAKE_EXIT;
    21ce:	e038      	b.n	2242 <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    21d0:	2002      	movs	r0, #2
    21d2:	4b20      	ldr	r3, [pc, #128]	; (2254 <nm_clkless_wake+0x1a8>)
    21d4:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    21d6:	4b28      	ldr	r3, [pc, #160]	; (2278 <nm_clkless_wake+0x1cc>)
    21d8:	681b      	ldr	r3, [r3, #0]
    21da:	003a      	movs	r2, r7
    21dc:	0011      	movs	r1, r2
    21de:	0018      	movs	r0, r3
    21e0:	4b1d      	ldr	r3, [pc, #116]	; (2258 <nm_clkless_wake+0x1ac>)
    21e2:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    21e4:	683b      	ldr	r3, [r7, #0]
    21e6:	2204      	movs	r2, #4
    21e8:	4013      	ands	r3, r2
    21ea:	d10c      	bne.n	2206 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    21ec:	491b      	ldr	r1, [pc, #108]	; (225c <nm_clkless_wake+0x1b0>)
    21ee:	4b1c      	ldr	r3, [pc, #112]	; (2260 <nm_clkless_wake+0x1b4>)
    21f0:	22aa      	movs	r2, #170	; 0xaa
    21f2:	0018      	movs	r0, r3
    21f4:	4b1b      	ldr	r3, [pc, #108]	; (2264 <nm_clkless_wake+0x1b8>)
    21f6:	4798      	blx	r3
    21f8:	4b21      	ldr	r3, [pc, #132]	; (2280 <nm_clkless_wake+0x1d4>)
    21fa:	0018      	movs	r0, r3
    21fc:	4b1b      	ldr	r3, [pc, #108]	; (226c <nm_clkless_wake+0x1c0>)
    21fe:	4798      	blx	r3
    2200:	200d      	movs	r0, #13
    2202:	4b1b      	ldr	r3, [pc, #108]	; (2270 <nm_clkless_wake+0x1c4>)
    2204:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    2206:	683b      	ldr	r3, [r7, #0]
    2208:	2204      	movs	r2, #4
    220a:	4013      	ands	r3, r2
    220c:	d109      	bne.n	2222 <nm_clkless_wake+0x176>
    220e:	68bb      	ldr	r3, [r7, #8]
    2210:	3301      	adds	r3, #1
    2212:	60bb      	str	r3, [r7, #8]
    2214:	68ba      	ldr	r2, [r7, #8]
    2216:	4b1b      	ldr	r3, [pc, #108]	; (2284 <nm_clkless_wake+0x1d8>)
    2218:	2103      	movs	r1, #3
    221a:	0010      	movs	r0, r2
    221c:	4798      	blx	r3
    221e:	1e0b      	subs	r3, r1, #0
    2220:	d0d6      	beq.n	21d0 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    2222:	683b      	ldr	r3, [r7, #0]
    2224:	2204      	movs	r2, #4
    2226:	4013      	ands	r3, r2
    2228:	d106      	bne.n	2238 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	2202      	movs	r2, #2
    222e:	4313      	orrs	r3, r2
    2230:	0019      	movs	r1, r3
    2232:	2001      	movs	r0, #1
    2234:	4b0f      	ldr	r3, [pc, #60]	; (2274 <nm_clkless_wake+0x1c8>)
    2236:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    2238:	683b      	ldr	r3, [r7, #0]
    223a:	2204      	movs	r2, #4
    223c:	4013      	ands	r3, r2
    223e:	d100      	bne.n	2242 <nm_clkless_wake+0x196>
    2240:	e75d      	b.n	20fe <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    2242:	230f      	movs	r3, #15
    2244:	18fb      	adds	r3, r7, r3
    2246:	781b      	ldrb	r3, [r3, #0]
    2248:	b25b      	sxtb	r3, r3
}
    224a:	0018      	movs	r0, r3
    224c:	46bd      	mov	sp, r7
    224e:	b005      	add	sp, #20
    2250:	bd90      	pop	{r4, r7, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	00000dcd 	.word	0x00000dcd
    2258:	00002289 	.word	0x00002289
    225c:	0000d3b0 	.word	0x0000d3b0
    2260:	0000d288 	.word	0x0000d288
    2264:	0000bbb1 	.word	0x0000bbb1
    2268:	0000d29c 	.word	0x0000d29c
    226c:	0000bcd1 	.word	0x0000bcd1
    2270:	0000bbe5 	.word	0x0000bbe5
    2274:	000022ad 	.word	0x000022ad
    2278:	20000010 	.word	0x20000010
    227c:	0000d2bc 	.word	0x0000d2bc
    2280:	0000d2dc 	.word	0x0000d2dc
    2284:	0000ad69 	.word	0x0000ad69

00002288 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2288:	b580      	push	{r7, lr}
    228a:	b082      	sub	sp, #8
    228c:	af00      	add	r7, sp, #0
    228e:	6078      	str	r0, [r7, #4]
    2290:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2292:	683a      	ldr	r2, [r7, #0]
    2294:	687b      	ldr	r3, [r7, #4]
    2296:	0011      	movs	r1, r2
    2298:	0018      	movs	r0, r3
    229a:	4b03      	ldr	r3, [pc, #12]	; (22a8 <nm_read_reg_with_ret+0x20>)
    229c:	4798      	blx	r3
    229e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    22a0:	0018      	movs	r0, r3
    22a2:	46bd      	mov	sp, r7
    22a4:	b002      	add	sp, #8
    22a6:	bd80      	pop	{r7, pc}
    22a8:	00003371 	.word	0x00003371

000022ac <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    22ac:	b580      	push	{r7, lr}
    22ae:	b082      	sub	sp, #8
    22b0:	af00      	add	r7, sp, #0
    22b2:	6078      	str	r0, [r7, #4]
    22b4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    22b6:	683a      	ldr	r2, [r7, #0]
    22b8:	687b      	ldr	r3, [r7, #4]
    22ba:	0011      	movs	r1, r2
    22bc:	0018      	movs	r0, r3
    22be:	4b03      	ldr	r3, [pc, #12]	; (22cc <nm_write_reg+0x20>)
    22c0:	4798      	blx	r3
    22c2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    22c4:	0018      	movs	r0, r3
    22c6:	46bd      	mov	sp, r7
    22c8:	b002      	add	sp, #8
    22ca:	bd80      	pop	{r7, pc}
    22cc:	000033c1 	.word	0x000033c1

000022d0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b084      	sub	sp, #16
    22d4:	af00      	add	r7, sp, #0
    22d6:	60f8      	str	r0, [r7, #12]
    22d8:	60b9      	str	r1, [r7, #8]
    22da:	1dbb      	adds	r3, r7, #6
    22dc:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    22de:	1dbb      	adds	r3, r7, #6
    22e0:	881a      	ldrh	r2, [r3, #0]
    22e2:	68b9      	ldr	r1, [r7, #8]
    22e4:	68fb      	ldr	r3, [r7, #12]
    22e6:	0018      	movs	r0, r3
    22e8:	4b03      	ldr	r3, [pc, #12]	; (22f8 <p_nm_read_block+0x28>)
    22ea:	4798      	blx	r3
    22ec:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    22ee:	0018      	movs	r0, r3
    22f0:	46bd      	mov	sp, r7
    22f2:	b004      	add	sp, #16
    22f4:	bd80      	pop	{r7, pc}
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	00003411 	.word	0x00003411

000022fc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    22fc:	b580      	push	{r7, lr}
    22fe:	b086      	sub	sp, #24
    2300:	af00      	add	r7, sp, #0
    2302:	60f8      	str	r0, [r7, #12]
    2304:	60b9      	str	r1, [r7, #8]
    2306:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2308:	4b2d      	ldr	r3, [pc, #180]	; (23c0 <nm_read_block+0xc4>)
    230a:	881a      	ldrh	r2, [r3, #0]
    230c:	2310      	movs	r3, #16
    230e:	18fb      	adds	r3, r7, r3
    2310:	3a08      	subs	r2, #8
    2312:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2314:	2300      	movs	r3, #0
    2316:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2318:	2313      	movs	r3, #19
    231a:	18fb      	adds	r3, r7, r3
    231c:	2200      	movs	r2, #0
    231e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2320:	2310      	movs	r3, #16
    2322:	18fb      	adds	r3, r7, r3
    2324:	881a      	ldrh	r2, [r3, #0]
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	429a      	cmp	r2, r3
    232a:	d313      	bcc.n	2354 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    232c:	68ba      	ldr	r2, [r7, #8]
    232e:	697b      	ldr	r3, [r7, #20]
    2330:	18d1      	adds	r1, r2, r3
    2332:	687b      	ldr	r3, [r7, #4]
    2334:	b29a      	uxth	r2, r3
    2336:	68fb      	ldr	r3, [r7, #12]
    2338:	0018      	movs	r0, r3
    233a:	4b22      	ldr	r3, [pc, #136]	; (23c4 <nm_read_block+0xc8>)
    233c:	4798      	blx	r3
    233e:	0003      	movs	r3, r0
    2340:	b2da      	uxtb	r2, r3
    2342:	2313      	movs	r3, #19
    2344:	18fb      	adds	r3, r7, r3
    2346:	781b      	ldrb	r3, [r3, #0]
    2348:	18d3      	adds	r3, r2, r3
    234a:	b2da      	uxtb	r2, r3
    234c:	2313      	movs	r3, #19
    234e:	18fb      	adds	r3, r7, r3
    2350:	701a      	strb	r2, [r3, #0]
			break;
    2352:	e02d      	b.n	23b0 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2354:	68ba      	ldr	r2, [r7, #8]
    2356:	697b      	ldr	r3, [r7, #20]
    2358:	18d1      	adds	r1, r2, r3
    235a:	2310      	movs	r3, #16
    235c:	18fb      	adds	r3, r7, r3
    235e:	881a      	ldrh	r2, [r3, #0]
    2360:	68fb      	ldr	r3, [r7, #12]
    2362:	0018      	movs	r0, r3
    2364:	4b17      	ldr	r3, [pc, #92]	; (23c4 <nm_read_block+0xc8>)
    2366:	4798      	blx	r3
    2368:	0003      	movs	r3, r0
    236a:	b2da      	uxtb	r2, r3
    236c:	2313      	movs	r3, #19
    236e:	18fb      	adds	r3, r7, r3
    2370:	781b      	ldrb	r3, [r3, #0]
    2372:	18d3      	adds	r3, r2, r3
    2374:	b2da      	uxtb	r2, r3
    2376:	2313      	movs	r3, #19
    2378:	18fb      	adds	r3, r7, r3
    237a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    237c:	2313      	movs	r3, #19
    237e:	18fb      	adds	r3, r7, r3
    2380:	781b      	ldrb	r3, [r3, #0]
    2382:	b25b      	sxtb	r3, r3
    2384:	2b00      	cmp	r3, #0
    2386:	d112      	bne.n	23ae <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2388:	2310      	movs	r3, #16
    238a:	18fb      	adds	r3, r7, r3
    238c:	881b      	ldrh	r3, [r3, #0]
    238e:	687a      	ldr	r2, [r7, #4]
    2390:	1ad3      	subs	r3, r2, r3
    2392:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2394:	2310      	movs	r3, #16
    2396:	18fb      	adds	r3, r7, r3
    2398:	881b      	ldrh	r3, [r3, #0]
    239a:	697a      	ldr	r2, [r7, #20]
    239c:	18d3      	adds	r3, r2, r3
    239e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    23a0:	2310      	movs	r3, #16
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	881b      	ldrh	r3, [r3, #0]
    23a6:	68fa      	ldr	r2, [r7, #12]
    23a8:	18d3      	adds	r3, r2, r3
    23aa:	60fb      	str	r3, [r7, #12]
		}
	}
    23ac:	e7b8      	b.n	2320 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    23ae:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    23b0:	2313      	movs	r3, #19
    23b2:	18fb      	adds	r3, r7, r3
    23b4:	781b      	ldrb	r3, [r3, #0]
    23b6:	b25b      	sxtb	r3, r3
}
    23b8:	0018      	movs	r0, r3
    23ba:	46bd      	mov	sp, r7
    23bc:	b006      	add	sp, #24
    23be:	bd80      	pop	{r7, pc}
    23c0:	2000000c 	.word	0x2000000c
    23c4:	000022d1 	.word	0x000022d1

000023c8 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    23c8:	b580      	push	{r7, lr}
    23ca:	b084      	sub	sp, #16
    23cc:	af00      	add	r7, sp, #0
    23ce:	60f8      	str	r0, [r7, #12]
    23d0:	60b9      	str	r1, [r7, #8]
    23d2:	1dbb      	adds	r3, r7, #6
    23d4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    23d6:	1dbb      	adds	r3, r7, #6
    23d8:	881a      	ldrh	r2, [r3, #0]
    23da:	68b9      	ldr	r1, [r7, #8]
    23dc:	68fb      	ldr	r3, [r7, #12]
    23de:	0018      	movs	r0, r3
    23e0:	4b03      	ldr	r3, [pc, #12]	; (23f0 <p_nm_write_block+0x28>)
    23e2:	4798      	blx	r3
    23e4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    23e6:	0018      	movs	r0, r3
    23e8:	46bd      	mov	sp, r7
    23ea:	b004      	add	sp, #16
    23ec:	bd80      	pop	{r7, pc}
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	00003469 	.word	0x00003469

000023f4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    23f4:	b580      	push	{r7, lr}
    23f6:	b086      	sub	sp, #24
    23f8:	af00      	add	r7, sp, #0
    23fa:	60f8      	str	r0, [r7, #12]
    23fc:	60b9      	str	r1, [r7, #8]
    23fe:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2400:	4b2d      	ldr	r3, [pc, #180]	; (24b8 <nm_write_block+0xc4>)
    2402:	881a      	ldrh	r2, [r3, #0]
    2404:	2310      	movs	r3, #16
    2406:	18fb      	adds	r3, r7, r3
    2408:	3a08      	subs	r2, #8
    240a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    240c:	2300      	movs	r3, #0
    240e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2410:	2313      	movs	r3, #19
    2412:	18fb      	adds	r3, r7, r3
    2414:	2200      	movs	r2, #0
    2416:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2418:	2310      	movs	r3, #16
    241a:	18fb      	adds	r3, r7, r3
    241c:	881a      	ldrh	r2, [r3, #0]
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	429a      	cmp	r2, r3
    2422:	d313      	bcc.n	244c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2424:	68ba      	ldr	r2, [r7, #8]
    2426:	697b      	ldr	r3, [r7, #20]
    2428:	18d1      	adds	r1, r2, r3
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	b29a      	uxth	r2, r3
    242e:	68fb      	ldr	r3, [r7, #12]
    2430:	0018      	movs	r0, r3
    2432:	4b22      	ldr	r3, [pc, #136]	; (24bc <nm_write_block+0xc8>)
    2434:	4798      	blx	r3
    2436:	0003      	movs	r3, r0
    2438:	b2da      	uxtb	r2, r3
    243a:	2313      	movs	r3, #19
    243c:	18fb      	adds	r3, r7, r3
    243e:	781b      	ldrb	r3, [r3, #0]
    2440:	18d3      	adds	r3, r2, r3
    2442:	b2da      	uxtb	r2, r3
    2444:	2313      	movs	r3, #19
    2446:	18fb      	adds	r3, r7, r3
    2448:	701a      	strb	r2, [r3, #0]
			break;
    244a:	e02d      	b.n	24a8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    244c:	68ba      	ldr	r2, [r7, #8]
    244e:	697b      	ldr	r3, [r7, #20]
    2450:	18d1      	adds	r1, r2, r3
    2452:	2310      	movs	r3, #16
    2454:	18fb      	adds	r3, r7, r3
    2456:	881a      	ldrh	r2, [r3, #0]
    2458:	68fb      	ldr	r3, [r7, #12]
    245a:	0018      	movs	r0, r3
    245c:	4b17      	ldr	r3, [pc, #92]	; (24bc <nm_write_block+0xc8>)
    245e:	4798      	blx	r3
    2460:	0003      	movs	r3, r0
    2462:	b2da      	uxtb	r2, r3
    2464:	2313      	movs	r3, #19
    2466:	18fb      	adds	r3, r7, r3
    2468:	781b      	ldrb	r3, [r3, #0]
    246a:	18d3      	adds	r3, r2, r3
    246c:	b2da      	uxtb	r2, r3
    246e:	2313      	movs	r3, #19
    2470:	18fb      	adds	r3, r7, r3
    2472:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2474:	2313      	movs	r3, #19
    2476:	18fb      	adds	r3, r7, r3
    2478:	781b      	ldrb	r3, [r3, #0]
    247a:	b25b      	sxtb	r3, r3
    247c:	2b00      	cmp	r3, #0
    247e:	d112      	bne.n	24a6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2480:	2310      	movs	r3, #16
    2482:	18fb      	adds	r3, r7, r3
    2484:	881b      	ldrh	r3, [r3, #0]
    2486:	687a      	ldr	r2, [r7, #4]
    2488:	1ad3      	subs	r3, r2, r3
    248a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    248c:	2310      	movs	r3, #16
    248e:	18fb      	adds	r3, r7, r3
    2490:	881b      	ldrh	r3, [r3, #0]
    2492:	697a      	ldr	r2, [r7, #20]
    2494:	18d3      	adds	r3, r2, r3
    2496:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2498:	2310      	movs	r3, #16
    249a:	18fb      	adds	r3, r7, r3
    249c:	881b      	ldrh	r3, [r3, #0]
    249e:	68fa      	ldr	r2, [r7, #12]
    24a0:	18d3      	adds	r3, r2, r3
    24a2:	60fb      	str	r3, [r7, #12]
		}
	}
    24a4:	e7b8      	b.n	2418 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    24a6:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    24a8:	2313      	movs	r3, #19
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	b25b      	sxtb	r3, r3
}
    24b0:	0018      	movs	r0, r3
    24b2:	46bd      	mov	sp, r7
    24b4:	b006      	add	sp, #24
    24b6:	bd80      	pop	{r7, pc}
    24b8:	2000000c 	.word	0x2000000c
    24bc:	000023c9 	.word	0x000023c9

000024c0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    24c0:	b580      	push	{r7, lr}
    24c2:	b086      	sub	sp, #24
    24c4:	af00      	add	r7, sp, #0
    24c6:	6078      	str	r0, [r7, #4]
    24c8:	000a      	movs	r2, r1
    24ca:	1cbb      	adds	r3, r7, #2
    24cc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    24ce:	230c      	movs	r3, #12
    24d0:	18fb      	adds	r3, r7, r3
    24d2:	2200      	movs	r2, #0
    24d4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    24d6:	230c      	movs	r3, #12
    24d8:	18fb      	adds	r3, r7, r3
    24da:	687a      	ldr	r2, [r7, #4]
    24dc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    24de:	230c      	movs	r3, #12
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	1cba      	adds	r2, r7, #2
    24e4:	8812      	ldrh	r2, [r2, #0]
    24e6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    24e8:	230c      	movs	r3, #12
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	0019      	movs	r1, r3
    24ee:	2003      	movs	r0, #3
    24f0:	4b03      	ldr	r3, [pc, #12]	; (2500 <nmi_spi_read+0x40>)
    24f2:	4798      	blx	r3
    24f4:	0003      	movs	r3, r0
}
    24f6:	0018      	movs	r0, r3
    24f8:	46bd      	mov	sp, r7
    24fa:	b006      	add	sp, #24
    24fc:	bd80      	pop	{r7, pc}
    24fe:	46c0      	nop			; (mov r8, r8)
    2500:	000010dd 	.word	0x000010dd

00002504 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2504:	b580      	push	{r7, lr}
    2506:	b086      	sub	sp, #24
    2508:	af00      	add	r7, sp, #0
    250a:	6078      	str	r0, [r7, #4]
    250c:	000a      	movs	r2, r1
    250e:	1cbb      	adds	r3, r7, #2
    2510:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2512:	230c      	movs	r3, #12
    2514:	18fb      	adds	r3, r7, r3
    2516:	687a      	ldr	r2, [r7, #4]
    2518:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    251a:	230c      	movs	r3, #12
    251c:	18fb      	adds	r3, r7, r3
    251e:	2200      	movs	r2, #0
    2520:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    2522:	230c      	movs	r3, #12
    2524:	18fb      	adds	r3, r7, r3
    2526:	1cba      	adds	r2, r7, #2
    2528:	8812      	ldrh	r2, [r2, #0]
    252a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    252c:	230c      	movs	r3, #12
    252e:	18fb      	adds	r3, r7, r3
    2530:	0019      	movs	r1, r3
    2532:	2003      	movs	r0, #3
    2534:	4b03      	ldr	r3, [pc, #12]	; (2544 <nmi_spi_write+0x40>)
    2536:	4798      	blx	r3
    2538:	0003      	movs	r3, r0
}
    253a:	0018      	movs	r0, r3
    253c:	46bd      	mov	sp, r7
    253e:	b006      	add	sp, #24
    2540:	bd80      	pop	{r7, pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	000010dd 	.word	0x000010dd

00002548 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    2548:	b580      	push	{r7, lr}
    254a:	b082      	sub	sp, #8
    254c:	af00      	add	r7, sp, #0
    254e:	0002      	movs	r2, r0
    2550:	1dfb      	adds	r3, r7, #7
    2552:	701a      	strb	r2, [r3, #0]
    2554:	1dbb      	adds	r3, r7, #6
    2556:	1c0a      	adds	r2, r1, #0
    2558:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    255a:	1dfb      	adds	r3, r7, #7
    255c:	781b      	ldrb	r3, [r3, #0]
    255e:	005a      	lsls	r2, r3, #1
    2560:	1dbb      	adds	r3, r7, #6
    2562:	781b      	ldrb	r3, [r3, #0]
    2564:	4053      	eors	r3, r2
    2566:	4a03      	ldr	r2, [pc, #12]	; (2574 <crc7_byte+0x2c>)
    2568:	5cd3      	ldrb	r3, [r2, r3]
}
    256a:	0018      	movs	r0, r3
    256c:	46bd      	mov	sp, r7
    256e:	b002      	add	sp, #8
    2570:	bd80      	pop	{r7, pc}
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	0000d3c0 	.word	0x0000d3c0

00002578 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    2578:	b590      	push	{r4, r7, lr}
    257a:	b085      	sub	sp, #20
    257c:	af00      	add	r7, sp, #0
    257e:	60b9      	str	r1, [r7, #8]
    2580:	607a      	str	r2, [r7, #4]
    2582:	230f      	movs	r3, #15
    2584:	18fb      	adds	r3, r7, r3
    2586:	1c02      	adds	r2, r0, #0
    2588:	701a      	strb	r2, [r3, #0]
	while (len--)
    258a:	e00e      	b.n	25aa <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    258c:	68bb      	ldr	r3, [r7, #8]
    258e:	1c5a      	adds	r2, r3, #1
    2590:	60ba      	str	r2, [r7, #8]
    2592:	781a      	ldrb	r2, [r3, #0]
    2594:	230f      	movs	r3, #15
    2596:	18fc      	adds	r4, r7, r3
    2598:	230f      	movs	r3, #15
    259a:	18fb      	adds	r3, r7, r3
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	0011      	movs	r1, r2
    25a0:	0018      	movs	r0, r3
    25a2:	4b08      	ldr	r3, [pc, #32]	; (25c4 <crc7+0x4c>)
    25a4:	4798      	blx	r3
    25a6:	0003      	movs	r3, r0
    25a8:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	1e5a      	subs	r2, r3, #1
    25ae:	607a      	str	r2, [r7, #4]
    25b0:	2b00      	cmp	r3, #0
    25b2:	d1eb      	bne.n	258c <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    25b4:	230f      	movs	r3, #15
    25b6:	18fb      	adds	r3, r7, r3
    25b8:	781b      	ldrb	r3, [r3, #0]
}
    25ba:	0018      	movs	r0, r3
    25bc:	46bd      	mov	sp, r7
    25be:	b005      	add	sp, #20
    25c0:	bd90      	pop	{r4, r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00002549 	.word	0x00002549

000025c8 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    25c8:	b590      	push	{r4, r7, lr}
    25ca:	b089      	sub	sp, #36	; 0x24
    25cc:	af00      	add	r7, sp, #0
    25ce:	60b9      	str	r1, [r7, #8]
    25d0:	607a      	str	r2, [r7, #4]
    25d2:	603b      	str	r3, [r7, #0]
    25d4:	230f      	movs	r3, #15
    25d6:	18fb      	adds	r3, r7, r3
    25d8:	1c02      	adds	r2, r0, #0
    25da:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    25dc:	231f      	movs	r3, #31
    25de:	18fb      	adds	r3, r7, r3
    25e0:	2205      	movs	r2, #5
    25e2:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    25e4:	231e      	movs	r3, #30
    25e6:	18fb      	adds	r3, r7, r3
    25e8:	2201      	movs	r2, #1
    25ea:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    25ec:	2314      	movs	r3, #20
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	220f      	movs	r2, #15
    25f2:	18ba      	adds	r2, r7, r2
    25f4:	7812      	ldrb	r2, [r2, #0]
    25f6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    25f8:	230f      	movs	r3, #15
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	781b      	ldrb	r3, [r3, #0]
    25fe:	3bc1      	subs	r3, #193	; 0xc1
    2600:	2b0e      	cmp	r3, #14
    2602:	d900      	bls.n	2606 <spi_cmd+0x3e>
    2604:	e11b      	b.n	283e <spi_cmd+0x276>
    2606:	009a      	lsls	r2, r3, #2
    2608:	4bb6      	ldr	r3, [pc, #728]	; (28e4 <spi_cmd+0x31c>)
    260a:	18d3      	adds	r3, r2, r3
    260c:	681b      	ldr	r3, [r3, #0]
    260e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2610:	68bb      	ldr	r3, [r7, #8]
    2612:	0c1b      	lsrs	r3, r3, #16
    2614:	b2da      	uxtb	r2, r3
    2616:	2314      	movs	r3, #20
    2618:	18fb      	adds	r3, r7, r3
    261a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    261c:	68bb      	ldr	r3, [r7, #8]
    261e:	0a1b      	lsrs	r3, r3, #8
    2620:	b2da      	uxtb	r2, r3
    2622:	2314      	movs	r3, #20
    2624:	18fb      	adds	r3, r7, r3
    2626:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2628:	68bb      	ldr	r3, [r7, #8]
    262a:	b2da      	uxtb	r2, r3
    262c:	2314      	movs	r3, #20
    262e:	18fb      	adds	r3, r7, r3
    2630:	70da      	strb	r2, [r3, #3]
		len = 5;
    2632:	231f      	movs	r3, #31
    2634:	18fb      	adds	r3, r7, r3
    2636:	2205      	movs	r2, #5
    2638:	701a      	strb	r2, [r3, #0]
		break;
    263a:	e105      	b.n	2848 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    263c:	68bb      	ldr	r3, [r7, #8]
    263e:	0a1b      	lsrs	r3, r3, #8
    2640:	b2da      	uxtb	r2, r3
    2642:	2314      	movs	r3, #20
    2644:	18fb      	adds	r3, r7, r3
    2646:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    2648:	2330      	movs	r3, #48	; 0x30
    264a:	18fb      	adds	r3, r7, r3
    264c:	781b      	ldrb	r3, [r3, #0]
    264e:	2b00      	cmp	r3, #0
    2650:	d009      	beq.n	2666 <spi_cmd+0x9e>
    2652:	2314      	movs	r3, #20
    2654:	18fb      	adds	r3, r7, r3
    2656:	785b      	ldrb	r3, [r3, #1]
    2658:	2280      	movs	r2, #128	; 0x80
    265a:	4252      	negs	r2, r2
    265c:	4313      	orrs	r3, r2
    265e:	b2da      	uxtb	r2, r3
    2660:	2314      	movs	r3, #20
    2662:	18fb      	adds	r3, r7, r3
    2664:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    2666:	68bb      	ldr	r3, [r7, #8]
    2668:	b2da      	uxtb	r2, r3
    266a:	2314      	movs	r3, #20
    266c:	18fb      	adds	r3, r7, r3
    266e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2670:	2314      	movs	r3, #20
    2672:	18fb      	adds	r3, r7, r3
    2674:	2200      	movs	r2, #0
    2676:	70da      	strb	r2, [r3, #3]
		len = 5;
    2678:	231f      	movs	r3, #31
    267a:	18fb      	adds	r3, r7, r3
    267c:	2205      	movs	r2, #5
    267e:	701a      	strb	r2, [r3, #0]
		break;
    2680:	e0e2      	b.n	2848 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    2682:	2314      	movs	r3, #20
    2684:	18fb      	adds	r3, r7, r3
    2686:	2200      	movs	r2, #0
    2688:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    268a:	2314      	movs	r3, #20
    268c:	18fb      	adds	r3, r7, r3
    268e:	2200      	movs	r2, #0
    2690:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2692:	2314      	movs	r3, #20
    2694:	18fb      	adds	r3, r7, r3
    2696:	2200      	movs	r2, #0
    2698:	70da      	strb	r2, [r3, #3]
		len = 5;
    269a:	231f      	movs	r3, #31
    269c:	18fb      	adds	r3, r7, r3
    269e:	2205      	movs	r2, #5
    26a0:	701a      	strb	r2, [r3, #0]
		break;
    26a2:	e0d1      	b.n	2848 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    26a4:	2314      	movs	r3, #20
    26a6:	18fb      	adds	r3, r7, r3
    26a8:	2200      	movs	r2, #0
    26aa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    26ac:	2314      	movs	r3, #20
    26ae:	18fb      	adds	r3, r7, r3
    26b0:	2200      	movs	r2, #0
    26b2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    26b4:	2314      	movs	r3, #20
    26b6:	18fb      	adds	r3, r7, r3
    26b8:	2200      	movs	r2, #0
    26ba:	70da      	strb	r2, [r3, #3]
		len = 5;
    26bc:	231f      	movs	r3, #31
    26be:	18fb      	adds	r3, r7, r3
    26c0:	2205      	movs	r2, #5
    26c2:	701a      	strb	r2, [r3, #0]
		break;
    26c4:	e0c0      	b.n	2848 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    26c6:	2314      	movs	r3, #20
    26c8:	18fb      	adds	r3, r7, r3
    26ca:	22ff      	movs	r2, #255	; 0xff
    26cc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    26ce:	2314      	movs	r3, #20
    26d0:	18fb      	adds	r3, r7, r3
    26d2:	22ff      	movs	r2, #255	; 0xff
    26d4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    26d6:	2314      	movs	r3, #20
    26d8:	18fb      	adds	r3, r7, r3
    26da:	22ff      	movs	r2, #255	; 0xff
    26dc:	70da      	strb	r2, [r3, #3]
		len = 5;
    26de:	231f      	movs	r3, #31
    26e0:	18fb      	adds	r3, r7, r3
    26e2:	2205      	movs	r2, #5
    26e4:	701a      	strb	r2, [r3, #0]
		break;
    26e6:	e0af      	b.n	2848 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    26e8:	68bb      	ldr	r3, [r7, #8]
    26ea:	0c1b      	lsrs	r3, r3, #16
    26ec:	b2da      	uxtb	r2, r3
    26ee:	2314      	movs	r3, #20
    26f0:	18fb      	adds	r3, r7, r3
    26f2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    26f4:	68bb      	ldr	r3, [r7, #8]
    26f6:	0a1b      	lsrs	r3, r3, #8
    26f8:	b2da      	uxtb	r2, r3
    26fa:	2314      	movs	r3, #20
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2700:	68bb      	ldr	r3, [r7, #8]
    2702:	b2da      	uxtb	r2, r3
    2704:	2314      	movs	r3, #20
    2706:	18fb      	adds	r3, r7, r3
    2708:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    270a:	683b      	ldr	r3, [r7, #0]
    270c:	0a1b      	lsrs	r3, r3, #8
    270e:	b2da      	uxtb	r2, r3
    2710:	2314      	movs	r3, #20
    2712:	18fb      	adds	r3, r7, r3
    2714:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    2716:	683b      	ldr	r3, [r7, #0]
    2718:	b2da      	uxtb	r2, r3
    271a:	2314      	movs	r3, #20
    271c:	18fb      	adds	r3, r7, r3
    271e:	715a      	strb	r2, [r3, #5]
		len = 7;
    2720:	231f      	movs	r3, #31
    2722:	18fb      	adds	r3, r7, r3
    2724:	2207      	movs	r2, #7
    2726:	701a      	strb	r2, [r3, #0]
		break;
    2728:	e08e      	b.n	2848 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    272a:	68bb      	ldr	r3, [r7, #8]
    272c:	0c1b      	lsrs	r3, r3, #16
    272e:	b2da      	uxtb	r2, r3
    2730:	2314      	movs	r3, #20
    2732:	18fb      	adds	r3, r7, r3
    2734:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2736:	68bb      	ldr	r3, [r7, #8]
    2738:	0a1b      	lsrs	r3, r3, #8
    273a:	b2da      	uxtb	r2, r3
    273c:	2314      	movs	r3, #20
    273e:	18fb      	adds	r3, r7, r3
    2740:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2742:	68bb      	ldr	r3, [r7, #8]
    2744:	b2da      	uxtb	r2, r3
    2746:	2314      	movs	r3, #20
    2748:	18fb      	adds	r3, r7, r3
    274a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    274c:	683b      	ldr	r3, [r7, #0]
    274e:	0c1b      	lsrs	r3, r3, #16
    2750:	b2da      	uxtb	r2, r3
    2752:	2314      	movs	r3, #20
    2754:	18fb      	adds	r3, r7, r3
    2756:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    2758:	683b      	ldr	r3, [r7, #0]
    275a:	0a1b      	lsrs	r3, r3, #8
    275c:	b2da      	uxtb	r2, r3
    275e:	2314      	movs	r3, #20
    2760:	18fb      	adds	r3, r7, r3
    2762:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    2764:	683b      	ldr	r3, [r7, #0]
    2766:	b2da      	uxtb	r2, r3
    2768:	2314      	movs	r3, #20
    276a:	18fb      	adds	r3, r7, r3
    276c:	719a      	strb	r2, [r3, #6]
		len = 8;
    276e:	231f      	movs	r3, #31
    2770:	18fb      	adds	r3, r7, r3
    2772:	2208      	movs	r2, #8
    2774:	701a      	strb	r2, [r3, #0]
		break;
    2776:	e067      	b.n	2848 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2778:	68bb      	ldr	r3, [r7, #8]
    277a:	0a1b      	lsrs	r3, r3, #8
    277c:	b2da      	uxtb	r2, r3
    277e:	2314      	movs	r3, #20
    2780:	18fb      	adds	r3, r7, r3
    2782:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    2784:	2330      	movs	r3, #48	; 0x30
    2786:	18fb      	adds	r3, r7, r3
    2788:	781b      	ldrb	r3, [r3, #0]
    278a:	2b00      	cmp	r3, #0
    278c:	d009      	beq.n	27a2 <spi_cmd+0x1da>
    278e:	2314      	movs	r3, #20
    2790:	18fb      	adds	r3, r7, r3
    2792:	785b      	ldrb	r3, [r3, #1]
    2794:	2280      	movs	r2, #128	; 0x80
    2796:	4252      	negs	r2, r2
    2798:	4313      	orrs	r3, r2
    279a:	b2da      	uxtb	r2, r3
    279c:	2314      	movs	r3, #20
    279e:	18fb      	adds	r3, r7, r3
    27a0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    27a2:	68bb      	ldr	r3, [r7, #8]
    27a4:	b2da      	uxtb	r2, r3
    27a6:	2314      	movs	r3, #20
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    27ac:	687b      	ldr	r3, [r7, #4]
    27ae:	0e1b      	lsrs	r3, r3, #24
    27b0:	b2da      	uxtb	r2, r3
    27b2:	2314      	movs	r3, #20
    27b4:	18fb      	adds	r3, r7, r3
    27b6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	0c1b      	lsrs	r3, r3, #16
    27bc:	b2da      	uxtb	r2, r3
    27be:	2314      	movs	r3, #20
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    27c4:	687b      	ldr	r3, [r7, #4]
    27c6:	0a1b      	lsrs	r3, r3, #8
    27c8:	b2da      	uxtb	r2, r3
    27ca:	2314      	movs	r3, #20
    27cc:	18fb      	adds	r3, r7, r3
    27ce:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    27d0:	687b      	ldr	r3, [r7, #4]
    27d2:	b2da      	uxtb	r2, r3
    27d4:	2314      	movs	r3, #20
    27d6:	18fb      	adds	r3, r7, r3
    27d8:	719a      	strb	r2, [r3, #6]
		len = 8;
    27da:	231f      	movs	r3, #31
    27dc:	18fb      	adds	r3, r7, r3
    27de:	2208      	movs	r2, #8
    27e0:	701a      	strb	r2, [r3, #0]
		break;
    27e2:	e031      	b.n	2848 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    27e4:	68bb      	ldr	r3, [r7, #8]
    27e6:	0c1b      	lsrs	r3, r3, #16
    27e8:	b2da      	uxtb	r2, r3
    27ea:	2314      	movs	r3, #20
    27ec:	18fb      	adds	r3, r7, r3
    27ee:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    27f0:	68bb      	ldr	r3, [r7, #8]
    27f2:	0a1b      	lsrs	r3, r3, #8
    27f4:	b2da      	uxtb	r2, r3
    27f6:	2314      	movs	r3, #20
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    27fc:	68bb      	ldr	r3, [r7, #8]
    27fe:	b2da      	uxtb	r2, r3
    2800:	2314      	movs	r3, #20
    2802:	18fb      	adds	r3, r7, r3
    2804:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2806:	687b      	ldr	r3, [r7, #4]
    2808:	0e1b      	lsrs	r3, r3, #24
    280a:	b2da      	uxtb	r2, r3
    280c:	2314      	movs	r3, #20
    280e:	18fb      	adds	r3, r7, r3
    2810:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	0c1b      	lsrs	r3, r3, #16
    2816:	b2da      	uxtb	r2, r3
    2818:	2314      	movs	r3, #20
    281a:	18fb      	adds	r3, r7, r3
    281c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	0a1b      	lsrs	r3, r3, #8
    2822:	b2da      	uxtb	r2, r3
    2824:	2314      	movs	r3, #20
    2826:	18fb      	adds	r3, r7, r3
    2828:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    282a:	687b      	ldr	r3, [r7, #4]
    282c:	b2da      	uxtb	r2, r3
    282e:	2314      	movs	r3, #20
    2830:	18fb      	adds	r3, r7, r3
    2832:	71da      	strb	r2, [r3, #7]
		len = 9;
    2834:	231f      	movs	r3, #31
    2836:	18fb      	adds	r3, r7, r3
    2838:	2209      	movs	r2, #9
    283a:	701a      	strb	r2, [r3, #0]
		break;
    283c:	e004      	b.n	2848 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    283e:	231e      	movs	r3, #30
    2840:	18fb      	adds	r3, r7, r3
    2842:	2200      	movs	r2, #0
    2844:	701a      	strb	r2, [r3, #0]
		break;
    2846:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    2848:	231e      	movs	r3, #30
    284a:	18fb      	adds	r3, r7, r3
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	b25b      	sxtb	r3, r3
    2850:	2b00      	cmp	r3, #0
    2852:	d03e      	beq.n	28d2 <spi_cmd+0x30a>
		if (!gu8Crc_off)
    2854:	4b24      	ldr	r3, [pc, #144]	; (28e8 <spi_cmd+0x320>)
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	2b00      	cmp	r3, #0
    285a:	d115      	bne.n	2888 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    285c:	231f      	movs	r3, #31
    285e:	18fb      	adds	r3, r7, r3
    2860:	781b      	ldrb	r3, [r3, #0]
    2862:	1e5c      	subs	r4, r3, #1
    2864:	231f      	movs	r3, #31
    2866:	18fb      	adds	r3, r7, r3
    2868:	781b      	ldrb	r3, [r3, #0]
    286a:	3b01      	subs	r3, #1
    286c:	001a      	movs	r2, r3
    286e:	2314      	movs	r3, #20
    2870:	18fb      	adds	r3, r7, r3
    2872:	0019      	movs	r1, r3
    2874:	207f      	movs	r0, #127	; 0x7f
    2876:	4b1d      	ldr	r3, [pc, #116]	; (28ec <spi_cmd+0x324>)
    2878:	4798      	blx	r3
    287a:	0003      	movs	r3, r0
    287c:	18db      	adds	r3, r3, r3
    287e:	b2da      	uxtb	r2, r3
    2880:	2314      	movs	r3, #20
    2882:	18fb      	adds	r3, r7, r3
    2884:	551a      	strb	r2, [r3, r4]
    2886:	e006      	b.n	2896 <spi_cmd+0x2ce>
		else
			len-=1;
    2888:	231f      	movs	r3, #31
    288a:	18fb      	adds	r3, r7, r3
    288c:	221f      	movs	r2, #31
    288e:	18ba      	adds	r2, r7, r2
    2890:	7812      	ldrb	r2, [r2, #0]
    2892:	3a01      	subs	r2, #1
    2894:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2896:	231f      	movs	r3, #31
    2898:	18fb      	adds	r3, r7, r3
    289a:	781b      	ldrb	r3, [r3, #0]
    289c:	b29a      	uxth	r2, r3
    289e:	2314      	movs	r3, #20
    28a0:	18fb      	adds	r3, r7, r3
    28a2:	0011      	movs	r1, r2
    28a4:	0018      	movs	r0, r3
    28a6:	4b12      	ldr	r3, [pc, #72]	; (28f0 <spi_cmd+0x328>)
    28a8:	4798      	blx	r3
    28aa:	1e03      	subs	r3, r0, #0
    28ac:	d011      	beq.n	28d2 <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    28ae:	2384      	movs	r3, #132	; 0x84
    28b0:	005a      	lsls	r2, r3, #1
    28b2:	4910      	ldr	r1, [pc, #64]	; (28f4 <spi_cmd+0x32c>)
    28b4:	4b10      	ldr	r3, [pc, #64]	; (28f8 <spi_cmd+0x330>)
    28b6:	0018      	movs	r0, r3
    28b8:	4b10      	ldr	r3, [pc, #64]	; (28fc <spi_cmd+0x334>)
    28ba:	4798      	blx	r3
    28bc:	4b10      	ldr	r3, [pc, #64]	; (2900 <spi_cmd+0x338>)
    28be:	0018      	movs	r0, r3
    28c0:	4b10      	ldr	r3, [pc, #64]	; (2904 <spi_cmd+0x33c>)
    28c2:	4798      	blx	r3
    28c4:	200d      	movs	r0, #13
    28c6:	4b10      	ldr	r3, [pc, #64]	; (2908 <spi_cmd+0x340>)
    28c8:	4798      	blx	r3
			result = N_FAIL;
    28ca:	231e      	movs	r3, #30
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	2200      	movs	r2, #0
    28d0:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    28d2:	231e      	movs	r3, #30
    28d4:	18fb      	adds	r3, r7, r3
    28d6:	781b      	ldrb	r3, [r3, #0]
    28d8:	b25b      	sxtb	r3, r3
}
    28da:	0018      	movs	r0, r3
    28dc:	46bd      	mov	sp, r7
    28de:	b009      	add	sp, #36	; 0x24
    28e0:	bd90      	pop	{r4, r7, pc}
    28e2:	46c0      	nop			; (mov r8, r8)
    28e4:	0000d978 	.word	0x0000d978
    28e8:	200000d4 	.word	0x200000d4
    28ec:	00002579 	.word	0x00002579
    28f0:	00002505 	.word	0x00002505
    28f4:	0000d9b4 	.word	0x0000d9b4
    28f8:	0000d4c0 	.word	0x0000d4c0
    28fc:	0000bbb1 	.word	0x0000bbb1
    2900:	0000d4d4 	.word	0x0000d4d4
    2904:	0000bcd1 	.word	0x0000bcd1
    2908:	0000bbe5 	.word	0x0000bbe5

0000290c <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    290c:	b580      	push	{r7, lr}
    290e:	b084      	sub	sp, #16
    2910:	af00      	add	r7, sp, #0
    2912:	0002      	movs	r2, r0
    2914:	1dfb      	adds	r3, r7, #7
    2916:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    2918:	230f      	movs	r3, #15
    291a:	18fb      	adds	r3, r7, r3
    291c:	2201      	movs	r2, #1
    291e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2920:	1dfb      	adds	r3, r7, #7
    2922:	781b      	ldrb	r3, [r3, #0]
    2924:	2bcf      	cmp	r3, #207	; 0xcf
    2926:	d007      	beq.n	2938 <spi_cmd_rsp+0x2c>
    2928:	1dfb      	adds	r3, r7, #7
    292a:	781b      	ldrb	r3, [r3, #0]
    292c:	2bc5      	cmp	r3, #197	; 0xc5
    292e:	d003      	beq.n	2938 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    2930:	1dfb      	adds	r3, r7, #7
    2932:	781b      	ldrb	r3, [r3, #0]
    2934:	2bc6      	cmp	r3, #198	; 0xc6
    2936:	d10c      	bne.n	2952 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2938:	230d      	movs	r3, #13
    293a:	18fb      	adds	r3, r7, r3
    293c:	2101      	movs	r1, #1
    293e:	0018      	movs	r0, r3
    2940:	4b3a      	ldr	r3, [pc, #232]	; (2a2c <spi_cmd_rsp+0x120>)
    2942:	4798      	blx	r3
    2944:	1e03      	subs	r3, r0, #0
    2946:	d004      	beq.n	2952 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    2948:	230f      	movs	r3, #15
    294a:	18fb      	adds	r3, r7, r3
    294c:	2200      	movs	r2, #0
    294e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    2950:	e063      	b.n	2a1a <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    2952:	230e      	movs	r3, #14
    2954:	18fb      	adds	r3, r7, r3
    2956:	220a      	movs	r2, #10
    2958:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    295a:	230d      	movs	r3, #13
    295c:	18fb      	adds	r3, r7, r3
    295e:	2101      	movs	r1, #1
    2960:	0018      	movs	r0, r3
    2962:	4b32      	ldr	r3, [pc, #200]	; (2a2c <spi_cmd_rsp+0x120>)
    2964:	4798      	blx	r3
    2966:	1e03      	subs	r3, r0, #0
    2968:	d013      	beq.n	2992 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    296a:	2328      	movs	r3, #40	; 0x28
    296c:	33ff      	adds	r3, #255	; 0xff
    296e:	001a      	movs	r2, r3
    2970:	492f      	ldr	r1, [pc, #188]	; (2a30 <spi_cmd_rsp+0x124>)
    2972:	4b30      	ldr	r3, [pc, #192]	; (2a34 <spi_cmd_rsp+0x128>)
    2974:	0018      	movs	r0, r3
    2976:	4b30      	ldr	r3, [pc, #192]	; (2a38 <spi_cmd_rsp+0x12c>)
    2978:	4798      	blx	r3
    297a:	4b30      	ldr	r3, [pc, #192]	; (2a3c <spi_cmd_rsp+0x130>)
    297c:	0018      	movs	r0, r3
    297e:	4b30      	ldr	r3, [pc, #192]	; (2a40 <spi_cmd_rsp+0x134>)
    2980:	4798      	blx	r3
    2982:	200d      	movs	r0, #13
    2984:	4b2f      	ldr	r3, [pc, #188]	; (2a44 <spi_cmd_rsp+0x138>)
    2986:	4798      	blx	r3
			result = N_FAIL;
    2988:	230f      	movs	r3, #15
    298a:	18fb      	adds	r3, r7, r3
    298c:	2200      	movs	r2, #0
    298e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    2990:	e043      	b.n	2a1a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2992:	230d      	movs	r3, #13
    2994:	18fb      	adds	r3, r7, r3
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	1dfa      	adds	r2, r7, #7
    299a:	7812      	ldrb	r2, [r2, #0]
    299c:	429a      	cmp	r2, r3
    299e:	d00b      	beq.n	29b8 <spi_cmd_rsp+0xac>
    29a0:	230e      	movs	r3, #14
    29a2:	18fb      	adds	r3, r7, r3
    29a4:	781b      	ldrb	r3, [r3, #0]
    29a6:	b25b      	sxtb	r3, r3
    29a8:	b2da      	uxtb	r2, r3
    29aa:	3a01      	subs	r2, #1
    29ac:	b2d1      	uxtb	r1, r2
    29ae:	220e      	movs	r2, #14
    29b0:	18ba      	adds	r2, r7, r2
    29b2:	7011      	strb	r1, [r2, #0]
    29b4:	2b00      	cmp	r3, #0
    29b6:	dcd0      	bgt.n	295a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    29b8:	230e      	movs	r3, #14
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	220a      	movs	r2, #10
    29be:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    29c0:	230d      	movs	r3, #13
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	2101      	movs	r1, #1
    29c6:	0018      	movs	r0, r3
    29c8:	4b18      	ldr	r3, [pc, #96]	; (2a2c <spi_cmd_rsp+0x120>)
    29ca:	4798      	blx	r3
    29cc:	1e03      	subs	r3, r0, #0
    29ce:	d013      	beq.n	29f8 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    29d0:	2336      	movs	r3, #54	; 0x36
    29d2:	33ff      	adds	r3, #255	; 0xff
    29d4:	001a      	movs	r2, r3
    29d6:	4916      	ldr	r1, [pc, #88]	; (2a30 <spi_cmd_rsp+0x124>)
    29d8:	4b16      	ldr	r3, [pc, #88]	; (2a34 <spi_cmd_rsp+0x128>)
    29da:	0018      	movs	r0, r3
    29dc:	4b16      	ldr	r3, [pc, #88]	; (2a38 <spi_cmd_rsp+0x12c>)
    29de:	4798      	blx	r3
    29e0:	4b16      	ldr	r3, [pc, #88]	; (2a3c <spi_cmd_rsp+0x130>)
    29e2:	0018      	movs	r0, r3
    29e4:	4b16      	ldr	r3, [pc, #88]	; (2a40 <spi_cmd_rsp+0x134>)
    29e6:	4798      	blx	r3
    29e8:	200d      	movs	r0, #13
    29ea:	4b16      	ldr	r3, [pc, #88]	; (2a44 <spi_cmd_rsp+0x138>)
    29ec:	4798      	blx	r3
			result = N_FAIL;
    29ee:	230f      	movs	r3, #15
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	2200      	movs	r2, #0
    29f4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    29f6:	e010      	b.n	2a1a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    29f8:	230d      	movs	r3, #13
    29fa:	18fb      	adds	r3, r7, r3
    29fc:	781b      	ldrb	r3, [r3, #0]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d00b      	beq.n	2a1a <spi_cmd_rsp+0x10e>
    2a02:	230e      	movs	r3, #14
    2a04:	18fb      	adds	r3, r7, r3
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	b25b      	sxtb	r3, r3
    2a0a:	b2da      	uxtb	r2, r3
    2a0c:	3a01      	subs	r2, #1
    2a0e:	b2d1      	uxtb	r1, r2
    2a10:	220e      	movs	r2, #14
    2a12:	18ba      	adds	r2, r7, r2
    2a14:	7011      	strb	r1, [r2, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	dcd2      	bgt.n	29c0 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    2a1a:	230f      	movs	r3, #15
    2a1c:	18fb      	adds	r3, r7, r3
    2a1e:	781b      	ldrb	r3, [r3, #0]
    2a20:	b25b      	sxtb	r3, r3
}
    2a22:	0018      	movs	r0, r3
    2a24:	46bd      	mov	sp, r7
    2a26:	b004      	add	sp, #16
    2a28:	bd80      	pop	{r7, pc}
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	000024c1 	.word	0x000024c1
    2a30:	0000d9bc 	.word	0x0000d9bc
    2a34:	0000d4c0 	.word	0x0000d4c0
    2a38:	0000bbb1 	.word	0x0000bbb1
    2a3c:	0000d500 	.word	0x0000d500
    2a40:	0000bcd1 	.word	0x0000bcd1
    2a44:	0000bbe5 	.word	0x0000bbe5

00002a48 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2a48:	b580      	push	{r7, lr}
    2a4a:	b086      	sub	sp, #24
    2a4c:	af00      	add	r7, sp, #0
    2a4e:	6078      	str	r0, [r7, #4]
    2a50:	0008      	movs	r0, r1
    2a52:	0011      	movs	r1, r2
    2a54:	1cbb      	adds	r3, r7, #2
    2a56:	1c02      	adds	r2, r0, #0
    2a58:	801a      	strh	r2, [r3, #0]
    2a5a:	1c7b      	adds	r3, r7, #1
    2a5c:	1c0a      	adds	r2, r1, #0
    2a5e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    2a60:	2311      	movs	r3, #17
    2a62:	18fb      	adds	r3, r7, r3
    2a64:	2201      	movs	r2, #1
    2a66:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2a68:	2314      	movs	r3, #20
    2a6a:	18fb      	adds	r3, r7, r3
    2a6c:	2200      	movs	r2, #0
    2a6e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    2a70:	1cbb      	adds	r3, r7, #2
    2a72:	881a      	ldrh	r2, [r3, #0]
    2a74:	2380      	movs	r3, #128	; 0x80
    2a76:	019b      	lsls	r3, r3, #6
    2a78:	429a      	cmp	r2, r3
    2a7a:	d805      	bhi.n	2a88 <spi_data_read+0x40>
			nbytes = sz;
    2a7c:	2312      	movs	r3, #18
    2a7e:	18fb      	adds	r3, r7, r3
    2a80:	1cba      	adds	r2, r7, #2
    2a82:	8812      	ldrh	r2, [r2, #0]
    2a84:	801a      	strh	r2, [r3, #0]
    2a86:	e004      	b.n	2a92 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    2a88:	2312      	movs	r3, #18
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	2280      	movs	r2, #128	; 0x80
    2a8e:	0192      	lsls	r2, r2, #6
    2a90:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    2a92:	2316      	movs	r3, #22
    2a94:	18fb      	adds	r3, r7, r3
    2a96:	220a      	movs	r2, #10
    2a98:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2a9a:	230b      	movs	r3, #11
    2a9c:	18fb      	adds	r3, r7, r3
    2a9e:	2101      	movs	r1, #1
    2aa0:	0018      	movs	r0, r3
    2aa2:	4b5f      	ldr	r3, [pc, #380]	; (2c20 <spi_data_read+0x1d8>)
    2aa4:	4798      	blx	r3
    2aa6:	1e03      	subs	r3, r0, #0
    2aa8:	d013      	beq.n	2ad2 <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2aaa:	2358      	movs	r3, #88	; 0x58
    2aac:	33ff      	adds	r3, #255	; 0xff
    2aae:	001a      	movs	r2, r3
    2ab0:	495c      	ldr	r1, [pc, #368]	; (2c24 <spi_data_read+0x1dc>)
    2ab2:	4b5d      	ldr	r3, [pc, #372]	; (2c28 <spi_data_read+0x1e0>)
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b5d      	ldr	r3, [pc, #372]	; (2c2c <spi_data_read+0x1e4>)
    2ab8:	4798      	blx	r3
    2aba:	4b5d      	ldr	r3, [pc, #372]	; (2c30 <spi_data_read+0x1e8>)
    2abc:	0018      	movs	r0, r3
    2abe:	4b5d      	ldr	r3, [pc, #372]	; (2c34 <spi_data_read+0x1ec>)
    2ac0:	4798      	blx	r3
    2ac2:	200d      	movs	r0, #13
    2ac4:	4b5c      	ldr	r3, [pc, #368]	; (2c38 <spi_data_read+0x1f0>)
    2ac6:	4798      	blx	r3
				result = N_FAIL;
    2ac8:	2311      	movs	r3, #17
    2aca:	18fb      	adds	r3, r7, r3
    2acc:	2200      	movs	r2, #0
    2ace:	701a      	strb	r2, [r3, #0]
				break;
    2ad0:	e017      	b.n	2b02 <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    2ad2:	230b      	movs	r3, #11
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	091b      	lsrs	r3, r3, #4
    2ada:	b2db      	uxtb	r3, r3
    2adc:	001a      	movs	r2, r3
    2ade:	230f      	movs	r3, #15
    2ae0:	4013      	ands	r3, r2
    2ae2:	2b0f      	cmp	r3, #15
    2ae4:	d00c      	beq.n	2b00 <spi_data_read+0xb8>
				break;
		} while (retry--);
    2ae6:	2316      	movs	r3, #22
    2ae8:	18fb      	adds	r3, r7, r3
    2aea:	2200      	movs	r2, #0
    2aec:	5e9b      	ldrsh	r3, [r3, r2]
    2aee:	b29a      	uxth	r2, r3
    2af0:	3a01      	subs	r2, #1
    2af2:	b291      	uxth	r1, r2
    2af4:	2216      	movs	r2, #22
    2af6:	18ba      	adds	r2, r7, r2
    2af8:	8011      	strh	r1, [r2, #0]
    2afa:	2b00      	cmp	r3, #0
    2afc:	d1cd      	bne.n	2a9a <spi_data_read+0x52>
    2afe:	e000      	b.n	2b02 <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    2b00:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    2b02:	2311      	movs	r3, #17
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	781b      	ldrb	r3, [r3, #0]
    2b08:	b25b      	sxtb	r3, r3
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	d100      	bne.n	2b10 <spi_data_read+0xc8>
    2b0e:	e07d      	b.n	2c0c <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    2b10:	2316      	movs	r3, #22
    2b12:	18fb      	adds	r3, r7, r3
    2b14:	2200      	movs	r2, #0
    2b16:	5e9b      	ldrsh	r3, [r3, r2]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	dc18      	bgt.n	2b4e <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2b1c:	2364      	movs	r3, #100	; 0x64
    2b1e:	33ff      	adds	r3, #255	; 0xff
    2b20:	001a      	movs	r2, r3
    2b22:	4940      	ldr	r1, [pc, #256]	; (2c24 <spi_data_read+0x1dc>)
    2b24:	4b40      	ldr	r3, [pc, #256]	; (2c28 <spi_data_read+0x1e0>)
    2b26:	0018      	movs	r0, r3
    2b28:	4b40      	ldr	r3, [pc, #256]	; (2c2c <spi_data_read+0x1e4>)
    2b2a:	4798      	blx	r3
    2b2c:	230b      	movs	r3, #11
    2b2e:	18fb      	adds	r3, r7, r3
    2b30:	781b      	ldrb	r3, [r3, #0]
    2b32:	001a      	movs	r2, r3
    2b34:	4b41      	ldr	r3, [pc, #260]	; (2c3c <spi_data_read+0x1f4>)
    2b36:	0011      	movs	r1, r2
    2b38:	0018      	movs	r0, r3
    2b3a:	4b3c      	ldr	r3, [pc, #240]	; (2c2c <spi_data_read+0x1e4>)
    2b3c:	4798      	blx	r3
    2b3e:	200d      	movs	r0, #13
    2b40:	4b3d      	ldr	r3, [pc, #244]	; (2c38 <spi_data_read+0x1f0>)
    2b42:	4798      	blx	r3
			result = N_FAIL;
    2b44:	2311      	movs	r3, #17
    2b46:	18fb      	adds	r3, r7, r3
    2b48:	2200      	movs	r2, #0
    2b4a:	701a      	strb	r2, [r3, #0]
			break;
    2b4c:	e05f      	b.n	2c0e <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2b4e:	2314      	movs	r3, #20
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	2200      	movs	r2, #0
    2b54:	5e9b      	ldrsh	r3, [r3, r2]
    2b56:	687a      	ldr	r2, [r7, #4]
    2b58:	18d2      	adds	r2, r2, r3
    2b5a:	2312      	movs	r3, #18
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	881b      	ldrh	r3, [r3, #0]
    2b60:	0019      	movs	r1, r3
    2b62:	0010      	movs	r0, r2
    2b64:	4b2e      	ldr	r3, [pc, #184]	; (2c20 <spi_data_read+0x1d8>)
    2b66:	4798      	blx	r3
    2b68:	1e03      	subs	r3, r0, #0
    2b6a:	d012      	beq.n	2b92 <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2b6c:	23b6      	movs	r3, #182	; 0xb6
    2b6e:	005a      	lsls	r2, r3, #1
    2b70:	492c      	ldr	r1, [pc, #176]	; (2c24 <spi_data_read+0x1dc>)
    2b72:	4b2d      	ldr	r3, [pc, #180]	; (2c28 <spi_data_read+0x1e0>)
    2b74:	0018      	movs	r0, r3
    2b76:	4b2d      	ldr	r3, [pc, #180]	; (2c2c <spi_data_read+0x1e4>)
    2b78:	4798      	blx	r3
    2b7a:	4b31      	ldr	r3, [pc, #196]	; (2c40 <spi_data_read+0x1f8>)
    2b7c:	0018      	movs	r0, r3
    2b7e:	4b2d      	ldr	r3, [pc, #180]	; (2c34 <spi_data_read+0x1ec>)
    2b80:	4798      	blx	r3
    2b82:	200d      	movs	r0, #13
    2b84:	4b2c      	ldr	r3, [pc, #176]	; (2c38 <spi_data_read+0x1f0>)
    2b86:	4798      	blx	r3
			result = N_FAIL;
    2b88:	2311      	movs	r3, #17
    2b8a:	18fb      	adds	r3, r7, r3
    2b8c:	2200      	movs	r2, #0
    2b8e:	701a      	strb	r2, [r3, #0]
			break;
    2b90:	e03d      	b.n	2c0e <spi_data_read+0x1c6>
		}
		if(!clockless)
    2b92:	1c7b      	adds	r3, r7, #1
    2b94:	781b      	ldrb	r3, [r3, #0]
    2b96:	2b00      	cmp	r3, #0
    2b98:	d11f      	bne.n	2bda <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2b9a:	4b2a      	ldr	r3, [pc, #168]	; (2c44 <spi_data_read+0x1fc>)
    2b9c:	781b      	ldrb	r3, [r3, #0]
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	d11b      	bne.n	2bda <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2ba2:	230c      	movs	r3, #12
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	2102      	movs	r1, #2
    2ba8:	0018      	movs	r0, r3
    2baa:	4b1d      	ldr	r3, [pc, #116]	; (2c20 <spi_data_read+0x1d8>)
    2bac:	4798      	blx	r3
    2bae:	1e03      	subs	r3, r0, #0
    2bb0:	d013      	beq.n	2bda <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2bb2:	2378      	movs	r3, #120	; 0x78
    2bb4:	33ff      	adds	r3, #255	; 0xff
    2bb6:	001a      	movs	r2, r3
    2bb8:	491a      	ldr	r1, [pc, #104]	; (2c24 <spi_data_read+0x1dc>)
    2bba:	4b1b      	ldr	r3, [pc, #108]	; (2c28 <spi_data_read+0x1e0>)
    2bbc:	0018      	movs	r0, r3
    2bbe:	4b1b      	ldr	r3, [pc, #108]	; (2c2c <spi_data_read+0x1e4>)
    2bc0:	4798      	blx	r3
    2bc2:	4b21      	ldr	r3, [pc, #132]	; (2c48 <spi_data_read+0x200>)
    2bc4:	0018      	movs	r0, r3
    2bc6:	4b1b      	ldr	r3, [pc, #108]	; (2c34 <spi_data_read+0x1ec>)
    2bc8:	4798      	blx	r3
    2bca:	200d      	movs	r0, #13
    2bcc:	4b1a      	ldr	r3, [pc, #104]	; (2c38 <spi_data_read+0x1f0>)
    2bce:	4798      	blx	r3
					result = N_FAIL;
    2bd0:	2311      	movs	r3, #17
    2bd2:	18fb      	adds	r3, r7, r3
    2bd4:	2200      	movs	r2, #0
    2bd6:	701a      	strb	r2, [r3, #0]
					break;
    2bd8:	e019      	b.n	2c0e <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    2bda:	2314      	movs	r3, #20
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	881a      	ldrh	r2, [r3, #0]
    2be0:	2312      	movs	r3, #18
    2be2:	18fb      	adds	r3, r7, r3
    2be4:	881b      	ldrh	r3, [r3, #0]
    2be6:	18d3      	adds	r3, r2, r3
    2be8:	b29a      	uxth	r2, r3
    2bea:	2314      	movs	r3, #20
    2bec:	18fb      	adds	r3, r7, r3
    2bee:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    2bf0:	2312      	movs	r3, #18
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	881a      	ldrh	r2, [r3, #0]
    2bf6:	1cbb      	adds	r3, r7, #2
    2bf8:	1cb9      	adds	r1, r7, #2
    2bfa:	8809      	ldrh	r1, [r1, #0]
    2bfc:	1a8a      	subs	r2, r1, r2
    2bfe:	801a      	strh	r2, [r3, #0]

	} while (sz);
    2c00:	1cbb      	adds	r3, r7, #2
    2c02:	881b      	ldrh	r3, [r3, #0]
    2c04:	2b00      	cmp	r3, #0
    2c06:	d000      	beq.n	2c0a <spi_data_read+0x1c2>
    2c08:	e732      	b.n	2a70 <spi_data_read+0x28>
    2c0a:	e000      	b.n	2c0e <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    2c0c:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    2c0e:	2311      	movs	r3, #17
    2c10:	18fb      	adds	r3, r7, r3
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	b25b      	sxtb	r3, r3
}
    2c16:	0018      	movs	r0, r3
    2c18:	46bd      	mov	sp, r7
    2c1a:	b006      	add	sp, #24
    2c1c:	bd80      	pop	{r7, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	000024c1 	.word	0x000024c1
    2c24:	0000d9c8 	.word	0x0000d9c8
    2c28:	0000d4c0 	.word	0x0000d4c0
    2c2c:	0000bbb1 	.word	0x0000bbb1
    2c30:	0000d534 	.word	0x0000d534
    2c34:	0000bcd1 	.word	0x0000bcd1
    2c38:	0000bbe5 	.word	0x0000bbe5
    2c3c:	0000d568 	.word	0x0000d568
    2c40:	0000d598 	.word	0x0000d598
    2c44:	200000d4 	.word	0x200000d4
    2c48:	0000d5c8 	.word	0x0000d5c8

00002c4c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    2c4c:	b580      	push	{r7, lr}
    2c4e:	b086      	sub	sp, #24
    2c50:	af00      	add	r7, sp, #0
    2c52:	6078      	str	r0, [r7, #4]
    2c54:	000a      	movs	r2, r1
    2c56:	1cbb      	adds	r3, r7, #2
    2c58:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    2c5a:	2313      	movs	r3, #19
    2c5c:	18fb      	adds	r3, r7, r3
    2c5e:	2201      	movs	r2, #1
    2c60:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    2c62:	230c      	movs	r3, #12
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	2200      	movs	r2, #0
    2c68:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    2c6a:	2316      	movs	r3, #22
    2c6c:	18fb      	adds	r3, r7, r3
    2c6e:	2200      	movs	r2, #0
    2c70:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    2c72:	1cbb      	adds	r3, r7, #2
    2c74:	881a      	ldrh	r2, [r3, #0]
    2c76:	2380      	movs	r3, #128	; 0x80
    2c78:	019b      	lsls	r3, r3, #6
    2c7a:	429a      	cmp	r2, r3
    2c7c:	d805      	bhi.n	2c8a <spi_data_write+0x3e>
			nbytes = sz;
    2c7e:	2314      	movs	r3, #20
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	1cba      	adds	r2, r7, #2
    2c84:	8812      	ldrh	r2, [r2, #0]
    2c86:	801a      	strh	r2, [r3, #0]
    2c88:	e004      	b.n	2c94 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    2c8a:	2314      	movs	r3, #20
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	2280      	movs	r2, #128	; 0x80
    2c90:	0192      	lsls	r2, r2, #6
    2c92:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    2c94:	2311      	movs	r3, #17
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	22f0      	movs	r2, #240	; 0xf0
    2c9a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    2c9c:	2316      	movs	r3, #22
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	2200      	movs	r2, #0
    2ca2:	5e9b      	ldrsh	r3, [r3, r2]
    2ca4:	2b00      	cmp	r3, #0
    2ca6:	d10f      	bne.n	2cc8 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    2ca8:	1cbb      	adds	r3, r7, #2
    2caa:	881a      	ldrh	r2, [r3, #0]
    2cac:	2380      	movs	r3, #128	; 0x80
    2cae:	019b      	lsls	r3, r3, #6
    2cb0:	429a      	cmp	r2, r3
    2cb2:	d804      	bhi.n	2cbe <spi_data_write+0x72>
				order = 0x3;
    2cb4:	2312      	movs	r3, #18
    2cb6:	18fb      	adds	r3, r7, r3
    2cb8:	2203      	movs	r2, #3
    2cba:	701a      	strb	r2, [r3, #0]
    2cbc:	e013      	b.n	2ce6 <spi_data_write+0x9a>
			else
				order = 0x1;
    2cbe:	2312      	movs	r3, #18
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	2201      	movs	r2, #1
    2cc4:	701a      	strb	r2, [r3, #0]
    2cc6:	e00e      	b.n	2ce6 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    2cc8:	1cbb      	adds	r3, r7, #2
    2cca:	881a      	ldrh	r2, [r3, #0]
    2ccc:	2380      	movs	r3, #128	; 0x80
    2cce:	019b      	lsls	r3, r3, #6
    2cd0:	429a      	cmp	r2, r3
    2cd2:	d804      	bhi.n	2cde <spi_data_write+0x92>
				order = 0x3;
    2cd4:	2312      	movs	r3, #18
    2cd6:	18fb      	adds	r3, r7, r3
    2cd8:	2203      	movs	r2, #3
    2cda:	701a      	strb	r2, [r3, #0]
    2cdc:	e003      	b.n	2ce6 <spi_data_write+0x9a>
			else
				order = 0x2;
    2cde:	2312      	movs	r3, #18
    2ce0:	18fb      	adds	r3, r7, r3
    2ce2:	2202      	movs	r2, #2
    2ce4:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    2ce6:	2311      	movs	r3, #17
    2ce8:	18fb      	adds	r3, r7, r3
    2cea:	781a      	ldrb	r2, [r3, #0]
    2cec:	2312      	movs	r3, #18
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	781b      	ldrb	r3, [r3, #0]
    2cf2:	4313      	orrs	r3, r2
    2cf4:	b2da      	uxtb	r2, r3
    2cf6:	2311      	movs	r3, #17
    2cf8:	18fb      	adds	r3, r7, r3
    2cfa:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2cfc:	2311      	movs	r3, #17
    2cfe:	18fb      	adds	r3, r7, r3
    2d00:	2101      	movs	r1, #1
    2d02:	0018      	movs	r0, r3
    2d04:	4b3c      	ldr	r3, [pc, #240]	; (2df8 <spi_data_write+0x1ac>)
    2d06:	4798      	blx	r3
    2d08:	1e03      	subs	r3, r0, #0
    2d0a:	d012      	beq.n	2d32 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2d0c:	23d4      	movs	r3, #212	; 0xd4
    2d0e:	005a      	lsls	r2, r3, #1
    2d10:	493a      	ldr	r1, [pc, #232]	; (2dfc <spi_data_write+0x1b0>)
    2d12:	4b3b      	ldr	r3, [pc, #236]	; (2e00 <spi_data_write+0x1b4>)
    2d14:	0018      	movs	r0, r3
    2d16:	4b3b      	ldr	r3, [pc, #236]	; (2e04 <spi_data_write+0x1b8>)
    2d18:	4798      	blx	r3
    2d1a:	4b3b      	ldr	r3, [pc, #236]	; (2e08 <spi_data_write+0x1bc>)
    2d1c:	0018      	movs	r0, r3
    2d1e:	4b3b      	ldr	r3, [pc, #236]	; (2e0c <spi_data_write+0x1c0>)
    2d20:	4798      	blx	r3
    2d22:	200d      	movs	r0, #13
    2d24:	4b3a      	ldr	r3, [pc, #232]	; (2e10 <spi_data_write+0x1c4>)
    2d26:	4798      	blx	r3
			result = N_FAIL;
    2d28:	2313      	movs	r3, #19
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	2200      	movs	r2, #0
    2d2e:	701a      	strb	r2, [r3, #0]
			break;
    2d30:	e05a      	b.n	2de8 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2d32:	2316      	movs	r3, #22
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	2200      	movs	r2, #0
    2d38:	5e9b      	ldrsh	r3, [r3, r2]
    2d3a:	687a      	ldr	r2, [r7, #4]
    2d3c:	18d2      	adds	r2, r2, r3
    2d3e:	2314      	movs	r3, #20
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	881b      	ldrh	r3, [r3, #0]
    2d44:	0019      	movs	r1, r3
    2d46:	0010      	movs	r0, r2
    2d48:	4b2b      	ldr	r3, [pc, #172]	; (2df8 <spi_data_write+0x1ac>)
    2d4a:	4798      	blx	r3
    2d4c:	1e03      	subs	r3, r0, #0
    2d4e:	d013      	beq.n	2d78 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    2d50:	23b2      	movs	r3, #178	; 0xb2
    2d52:	33ff      	adds	r3, #255	; 0xff
    2d54:	001a      	movs	r2, r3
    2d56:	4929      	ldr	r1, [pc, #164]	; (2dfc <spi_data_write+0x1b0>)
    2d58:	4b29      	ldr	r3, [pc, #164]	; (2e00 <spi_data_write+0x1b4>)
    2d5a:	0018      	movs	r0, r3
    2d5c:	4b29      	ldr	r3, [pc, #164]	; (2e04 <spi_data_write+0x1b8>)
    2d5e:	4798      	blx	r3
    2d60:	4b2c      	ldr	r3, [pc, #176]	; (2e14 <spi_data_write+0x1c8>)
    2d62:	0018      	movs	r0, r3
    2d64:	4b29      	ldr	r3, [pc, #164]	; (2e0c <spi_data_write+0x1c0>)
    2d66:	4798      	blx	r3
    2d68:	200d      	movs	r0, #13
    2d6a:	4b29      	ldr	r3, [pc, #164]	; (2e10 <spi_data_write+0x1c4>)
    2d6c:	4798      	blx	r3
			result = N_FAIL;
    2d6e:	2313      	movs	r3, #19
    2d70:	18fb      	adds	r3, r7, r3
    2d72:	2200      	movs	r2, #0
    2d74:	701a      	strb	r2, [r3, #0]
			break;
    2d76:	e037      	b.n	2de8 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    2d78:	4b27      	ldr	r3, [pc, #156]	; (2e18 <spi_data_write+0x1cc>)
    2d7a:	781b      	ldrb	r3, [r3, #0]
    2d7c:	2b00      	cmp	r3, #0
    2d7e:	d11b      	bne.n	2db8 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2d80:	230c      	movs	r3, #12
    2d82:	18fb      	adds	r3, r7, r3
    2d84:	2102      	movs	r1, #2
    2d86:	0018      	movs	r0, r3
    2d88:	4b1b      	ldr	r3, [pc, #108]	; (2df8 <spi_data_write+0x1ac>)
    2d8a:	4798      	blx	r3
    2d8c:	1e03      	subs	r3, r0, #0
    2d8e:	d013      	beq.n	2db8 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2d90:	23bc      	movs	r3, #188	; 0xbc
    2d92:	33ff      	adds	r3, #255	; 0xff
    2d94:	001a      	movs	r2, r3
    2d96:	4919      	ldr	r1, [pc, #100]	; (2dfc <spi_data_write+0x1b0>)
    2d98:	4b19      	ldr	r3, [pc, #100]	; (2e00 <spi_data_write+0x1b4>)
    2d9a:	0018      	movs	r0, r3
    2d9c:	4b19      	ldr	r3, [pc, #100]	; (2e04 <spi_data_write+0x1b8>)
    2d9e:	4798      	blx	r3
    2da0:	4b1e      	ldr	r3, [pc, #120]	; (2e1c <spi_data_write+0x1d0>)
    2da2:	0018      	movs	r0, r3
    2da4:	4b19      	ldr	r3, [pc, #100]	; (2e0c <spi_data_write+0x1c0>)
    2da6:	4798      	blx	r3
    2da8:	200d      	movs	r0, #13
    2daa:	4b19      	ldr	r3, [pc, #100]	; (2e10 <spi_data_write+0x1c4>)
    2dac:	4798      	blx	r3
				result = N_FAIL;
    2dae:	2313      	movs	r3, #19
    2db0:	18fb      	adds	r3, r7, r3
    2db2:	2200      	movs	r2, #0
    2db4:	701a      	strb	r2, [r3, #0]
				break;
    2db6:	e017      	b.n	2de8 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    2db8:	2316      	movs	r3, #22
    2dba:	18fb      	adds	r3, r7, r3
    2dbc:	881a      	ldrh	r2, [r3, #0]
    2dbe:	2314      	movs	r3, #20
    2dc0:	18fb      	adds	r3, r7, r3
    2dc2:	881b      	ldrh	r3, [r3, #0]
    2dc4:	18d3      	adds	r3, r2, r3
    2dc6:	b29a      	uxth	r2, r3
    2dc8:	2316      	movs	r3, #22
    2dca:	18fb      	adds	r3, r7, r3
    2dcc:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    2dce:	1cbb      	adds	r3, r7, #2
    2dd0:	1cb9      	adds	r1, r7, #2
    2dd2:	2214      	movs	r2, #20
    2dd4:	18ba      	adds	r2, r7, r2
    2dd6:	8809      	ldrh	r1, [r1, #0]
    2dd8:	8812      	ldrh	r2, [r2, #0]
    2dda:	1a8a      	subs	r2, r1, r2
    2ddc:	801a      	strh	r2, [r3, #0]
	} while (sz);
    2dde:	1cbb      	adds	r3, r7, #2
    2de0:	881b      	ldrh	r3, [r3, #0]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d000      	beq.n	2de8 <spi_data_write+0x19c>
    2de6:	e744      	b.n	2c72 <spi_data_write+0x26>


	return result;
    2de8:	2313      	movs	r3, #19
    2dea:	18fb      	adds	r3, r7, r3
    2dec:	781b      	ldrb	r3, [r3, #0]
    2dee:	b25b      	sxtb	r3, r3
}
    2df0:	0018      	movs	r0, r3
    2df2:	46bd      	mov	sp, r7
    2df4:	b006      	add	sp, #24
    2df6:	bd80      	pop	{r7, pc}
    2df8:	00002505 	.word	0x00002505
    2dfc:	0000d9d8 	.word	0x0000d9d8
    2e00:	0000d4c0 	.word	0x0000d4c0
    2e04:	0000bbb1 	.word	0x0000bbb1
    2e08:	0000d5fc 	.word	0x0000d5fc
    2e0c:	0000bcd1 	.word	0x0000bcd1
    2e10:	0000bbe5 	.word	0x0000bbe5
    2e14:	0000d634 	.word	0x0000d634
    2e18:	200000d4 	.word	0x200000d4
    2e1c:	0000d668 	.word	0x0000d668

00002e20 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2e20:	b5b0      	push	{r4, r5, r7, lr}
    2e22:	b086      	sub	sp, #24
    2e24:	af02      	add	r7, sp, #8
    2e26:	6078      	str	r0, [r7, #4]
    2e28:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    2e2a:	230d      	movs	r3, #13
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	2201      	movs	r2, #1
    2e30:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    2e32:	230f      	movs	r3, #15
    2e34:	18fb      	adds	r3, r7, r3
    2e36:	22c9      	movs	r2, #201	; 0xc9
    2e38:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    2e3a:	230e      	movs	r3, #14
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	2200      	movs	r2, #0
    2e40:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	2b30      	cmp	r3, #48	; 0x30
    2e46:	d808      	bhi.n	2e5a <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2e48:	230f      	movs	r3, #15
    2e4a:	18fb      	adds	r3, r7, r3
    2e4c:	22c3      	movs	r2, #195	; 0xc3
    2e4e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    2e50:	230e      	movs	r3, #14
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	2201      	movs	r2, #1
    2e56:	701a      	strb	r2, [r3, #0]
    2e58:	e007      	b.n	2e6a <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    2e5a:	230f      	movs	r3, #15
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	22c9      	movs	r2, #201	; 0xc9
    2e60:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    2e62:	230e      	movs	r3, #14
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	2200      	movs	r2, #0
    2e68:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2e6a:	230d      	movs	r3, #13
    2e6c:	18fc      	adds	r4, r7, r3
    2e6e:	683a      	ldr	r2, [r7, #0]
    2e70:	6879      	ldr	r1, [r7, #4]
    2e72:	230f      	movs	r3, #15
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	7818      	ldrb	r0, [r3, #0]
    2e78:	230e      	movs	r3, #14
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	9300      	str	r3, [sp, #0]
    2e80:	2304      	movs	r3, #4
    2e82:	4d26      	ldr	r5, [pc, #152]	; (2f1c <spi_write_reg+0xfc>)
    2e84:	47a8      	blx	r5
    2e86:	0003      	movs	r3, r0
    2e88:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2e8a:	230d      	movs	r3, #13
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	781b      	ldrb	r3, [r3, #0]
    2e90:	b25b      	sxtb	r3, r3
    2e92:	2b01      	cmp	r3, #1
    2e94:	d012      	beq.n	2ebc <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2e96:	23ec      	movs	r3, #236	; 0xec
    2e98:	33ff      	adds	r3, #255	; 0xff
    2e9a:	001a      	movs	r2, r3
    2e9c:	4920      	ldr	r1, [pc, #128]	; (2f20 <spi_write_reg+0x100>)
    2e9e:	4b21      	ldr	r3, [pc, #132]	; (2f24 <spi_write_reg+0x104>)
    2ea0:	0018      	movs	r0, r3
    2ea2:	4b21      	ldr	r3, [pc, #132]	; (2f28 <spi_write_reg+0x108>)
    2ea4:	4798      	blx	r3
    2ea6:	687a      	ldr	r2, [r7, #4]
    2ea8:	4b20      	ldr	r3, [pc, #128]	; (2f2c <spi_write_reg+0x10c>)
    2eaa:	0011      	movs	r1, r2
    2eac:	0018      	movs	r0, r3
    2eae:	4b1e      	ldr	r3, [pc, #120]	; (2f28 <spi_write_reg+0x108>)
    2eb0:	4798      	blx	r3
    2eb2:	200d      	movs	r0, #13
    2eb4:	4b1e      	ldr	r3, [pc, #120]	; (2f30 <spi_write_reg+0x110>)
    2eb6:	4798      	blx	r3
		return N_FAIL;
    2eb8:	2300      	movs	r3, #0
    2eba:	e02b      	b.n	2f14 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    2ebc:	230d      	movs	r3, #13
    2ebe:	18fc      	adds	r4, r7, r3
    2ec0:	230f      	movs	r3, #15
    2ec2:	18fb      	adds	r3, r7, r3
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	0018      	movs	r0, r3
    2ec8:	4b1a      	ldr	r3, [pc, #104]	; (2f34 <spi_write_reg+0x114>)
    2eca:	4798      	blx	r3
    2ecc:	0003      	movs	r3, r0
    2ece:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2ed0:	230d      	movs	r3, #13
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	781b      	ldrb	r3, [r3, #0]
    2ed6:	b25b      	sxtb	r3, r3
    2ed8:	2b01      	cmp	r3, #1
    2eda:	d01a      	beq.n	2f12 <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2edc:	23f2      	movs	r3, #242	; 0xf2
    2ede:	33ff      	adds	r3, #255	; 0xff
    2ee0:	001a      	movs	r2, r3
    2ee2:	490f      	ldr	r1, [pc, #60]	; (2f20 <spi_write_reg+0x100>)
    2ee4:	4b0f      	ldr	r3, [pc, #60]	; (2f24 <spi_write_reg+0x104>)
    2ee6:	0018      	movs	r0, r3
    2ee8:	4b0f      	ldr	r3, [pc, #60]	; (2f28 <spi_write_reg+0x108>)
    2eea:	4798      	blx	r3
    2eec:	687a      	ldr	r2, [r7, #4]
    2eee:	4b12      	ldr	r3, [pc, #72]	; (2f38 <spi_write_reg+0x118>)
    2ef0:	0011      	movs	r1, r2
    2ef2:	0018      	movs	r0, r3
    2ef4:	4b0c      	ldr	r3, [pc, #48]	; (2f28 <spi_write_reg+0x108>)
    2ef6:	4798      	blx	r3
    2ef8:	200d      	movs	r0, #13
    2efa:	4b0d      	ldr	r3, [pc, #52]	; (2f30 <spi_write_reg+0x110>)
    2efc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2efe:	2300      	movs	r3, #0
    2f00:	9300      	str	r3, [sp, #0]
    2f02:	2300      	movs	r3, #0
    2f04:	2200      	movs	r2, #0
    2f06:	2100      	movs	r1, #0
    2f08:	20cf      	movs	r0, #207	; 0xcf
    2f0a:	4c04      	ldr	r4, [pc, #16]	; (2f1c <spi_write_reg+0xfc>)
    2f0c:	47a0      	blx	r4
		return N_FAIL;
    2f0e:	2300      	movs	r3, #0
    2f10:	e000      	b.n	2f14 <spi_write_reg+0xf4>
	}

	return N_OK;
    2f12:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    2f14:	0018      	movs	r0, r3
    2f16:	46bd      	mov	sp, r7
    2f18:	b004      	add	sp, #16
    2f1a:	bdb0      	pop	{r4, r5, r7, pc}
    2f1c:	000025c9 	.word	0x000025c9
    2f20:	0000d9e8 	.word	0x0000d9e8
    2f24:	0000d4c0 	.word	0x0000d4c0
    2f28:	0000bbb1 	.word	0x0000bbb1
    2f2c:	0000d6a0 	.word	0x0000d6a0
    2f30:	0000bbe5 	.word	0x0000bbe5
    2f34:	0000290d 	.word	0x0000290d
    2f38:	0000d6cc 	.word	0x0000d6cc

00002f3c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    2f3c:	b5b0      	push	{r4, r5, r7, lr}
    2f3e:	b088      	sub	sp, #32
    2f40:	af02      	add	r7, sp, #8
    2f42:	60f8      	str	r0, [r7, #12]
    2f44:	60b9      	str	r1, [r7, #8]
    2f46:	1dbb      	adds	r3, r7, #6
    2f48:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    2f4a:	2317      	movs	r3, #23
    2f4c:	18fb      	adds	r3, r7, r3
    2f4e:	22c7      	movs	r2, #199	; 0xc7
    2f50:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2f52:	1dbb      	adds	r3, r7, #6
    2f54:	881a      	ldrh	r2, [r3, #0]
    2f56:	2316      	movs	r3, #22
    2f58:	18fc      	adds	r4, r7, r3
    2f5a:	68f9      	ldr	r1, [r7, #12]
    2f5c:	2317      	movs	r3, #23
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	7818      	ldrb	r0, [r3, #0]
    2f62:	2300      	movs	r3, #0
    2f64:	9300      	str	r3, [sp, #0]
    2f66:	0013      	movs	r3, r2
    2f68:	2200      	movs	r2, #0
    2f6a:	4d37      	ldr	r5, [pc, #220]	; (3048 <nm_spi_write+0x10c>)
    2f6c:	47a8      	blx	r5
    2f6e:	0003      	movs	r3, r0
    2f70:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2f72:	2316      	movs	r3, #22
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	b25b      	sxtb	r3, r3
    2f7a:	2b01      	cmp	r3, #1
    2f7c:	d010      	beq.n	2fa0 <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2f7e:	4a33      	ldr	r2, [pc, #204]	; (304c <nm_spi_write+0x110>)
    2f80:	4933      	ldr	r1, [pc, #204]	; (3050 <nm_spi_write+0x114>)
    2f82:	4b34      	ldr	r3, [pc, #208]	; (3054 <nm_spi_write+0x118>)
    2f84:	0018      	movs	r0, r3
    2f86:	4b34      	ldr	r3, [pc, #208]	; (3058 <nm_spi_write+0x11c>)
    2f88:	4798      	blx	r3
    2f8a:	68fa      	ldr	r2, [r7, #12]
    2f8c:	4b33      	ldr	r3, [pc, #204]	; (305c <nm_spi_write+0x120>)
    2f8e:	0011      	movs	r1, r2
    2f90:	0018      	movs	r0, r3
    2f92:	4b31      	ldr	r3, [pc, #196]	; (3058 <nm_spi_write+0x11c>)
    2f94:	4798      	blx	r3
    2f96:	200d      	movs	r0, #13
    2f98:	4b31      	ldr	r3, [pc, #196]	; (3060 <nm_spi_write+0x124>)
    2f9a:	4798      	blx	r3
		return N_FAIL;
    2f9c:	2300      	movs	r3, #0
    2f9e:	e04f      	b.n	3040 <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    2fa0:	2316      	movs	r3, #22
    2fa2:	18fc      	adds	r4, r7, r3
    2fa4:	2317      	movs	r3, #23
    2fa6:	18fb      	adds	r3, r7, r3
    2fa8:	781b      	ldrb	r3, [r3, #0]
    2faa:	0018      	movs	r0, r3
    2fac:	4b2d      	ldr	r3, [pc, #180]	; (3064 <nm_spi_write+0x128>)
    2fae:	4798      	blx	r3
    2fb0:	0003      	movs	r3, r0
    2fb2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2fb4:	2316      	movs	r3, #22
    2fb6:	18fb      	adds	r3, r7, r3
    2fb8:	781b      	ldrb	r3, [r3, #0]
    2fba:	b25b      	sxtb	r3, r3
    2fbc:	2b01      	cmp	r3, #1
    2fbe:	d018      	beq.n	2ff2 <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2fc0:	4a29      	ldr	r2, [pc, #164]	; (3068 <nm_spi_write+0x12c>)
    2fc2:	4923      	ldr	r1, [pc, #140]	; (3050 <nm_spi_write+0x114>)
    2fc4:	4b23      	ldr	r3, [pc, #140]	; (3054 <nm_spi_write+0x118>)
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b23      	ldr	r3, [pc, #140]	; (3058 <nm_spi_write+0x11c>)
    2fca:	4798      	blx	r3
    2fcc:	68fa      	ldr	r2, [r7, #12]
    2fce:	4b27      	ldr	r3, [pc, #156]	; (306c <nm_spi_write+0x130>)
    2fd0:	0011      	movs	r1, r2
    2fd2:	0018      	movs	r0, r3
    2fd4:	4b20      	ldr	r3, [pc, #128]	; (3058 <nm_spi_write+0x11c>)
    2fd6:	4798      	blx	r3
    2fd8:	200d      	movs	r0, #13
    2fda:	4b21      	ldr	r3, [pc, #132]	; (3060 <nm_spi_write+0x124>)
    2fdc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2fde:	2300      	movs	r3, #0
    2fe0:	9300      	str	r3, [sp, #0]
    2fe2:	2300      	movs	r3, #0
    2fe4:	2200      	movs	r2, #0
    2fe6:	2100      	movs	r1, #0
    2fe8:	20cf      	movs	r0, #207	; 0xcf
    2fea:	4c17      	ldr	r4, [pc, #92]	; (3048 <nm_spi_write+0x10c>)
    2fec:	47a0      	blx	r4
		return N_FAIL;
    2fee:	2300      	movs	r3, #0
    2ff0:	e026      	b.n	3040 <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    2ff2:	2316      	movs	r3, #22
    2ff4:	18fc      	adds	r4, r7, r3
    2ff6:	1dbb      	adds	r3, r7, #6
    2ff8:	881a      	ldrh	r2, [r3, #0]
    2ffa:	68bb      	ldr	r3, [r7, #8]
    2ffc:	0011      	movs	r1, r2
    2ffe:	0018      	movs	r0, r3
    3000:	4b1b      	ldr	r3, [pc, #108]	; (3070 <nm_spi_write+0x134>)
    3002:	4798      	blx	r3
    3004:	0003      	movs	r3, r0
    3006:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3008:	2316      	movs	r3, #22
    300a:	18fb      	adds	r3, r7, r3
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	b25b      	sxtb	r3, r3
    3010:	2b01      	cmp	r3, #1
    3012:	d014      	beq.n	303e <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3014:	4a17      	ldr	r2, [pc, #92]	; (3074 <nm_spi_write+0x138>)
    3016:	490e      	ldr	r1, [pc, #56]	; (3050 <nm_spi_write+0x114>)
    3018:	4b0e      	ldr	r3, [pc, #56]	; (3054 <nm_spi_write+0x118>)
    301a:	0018      	movs	r0, r3
    301c:	4b0e      	ldr	r3, [pc, #56]	; (3058 <nm_spi_write+0x11c>)
    301e:	4798      	blx	r3
    3020:	4b15      	ldr	r3, [pc, #84]	; (3078 <nm_spi_write+0x13c>)
    3022:	0018      	movs	r0, r3
    3024:	4b15      	ldr	r3, [pc, #84]	; (307c <nm_spi_write+0x140>)
    3026:	4798      	blx	r3
    3028:	200d      	movs	r0, #13
    302a:	4b0d      	ldr	r3, [pc, #52]	; (3060 <nm_spi_write+0x124>)
    302c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    302e:	2300      	movs	r3, #0
    3030:	9300      	str	r3, [sp, #0]
    3032:	2300      	movs	r3, #0
    3034:	2200      	movs	r2, #0
    3036:	2100      	movs	r1, #0
    3038:	20cf      	movs	r0, #207	; 0xcf
    303a:	4c03      	ldr	r4, [pc, #12]	; (3048 <nm_spi_write+0x10c>)
    303c:	47a0      	blx	r4
	}

	return N_OK;
    303e:	2301      	movs	r3, #1
}
    3040:	0018      	movs	r0, r3
    3042:	46bd      	mov	sp, r7
    3044:	b006      	add	sp, #24
    3046:	bdb0      	pop	{r4, r5, r7, pc}
    3048:	000025c9 	.word	0x000025c9
    304c:	0000020f 	.word	0x0000020f
    3050:	0000d9f8 	.word	0x0000d9f8
    3054:	0000d4c0 	.word	0x0000d4c0
    3058:	0000bbb1 	.word	0x0000bbb1
    305c:	0000d704 	.word	0x0000d704
    3060:	0000bbe5 	.word	0x0000bbe5
    3064:	0000290d 	.word	0x0000290d
    3068:	00000215 	.word	0x00000215
    306c:	0000d734 	.word	0x0000d734
    3070:	00002c4d 	.word	0x00002c4d
    3074:	00000226 	.word	0x00000226
    3078:	0000d76c 	.word	0x0000d76c
    307c:	0000bcd1 	.word	0x0000bcd1

00003080 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3080:	b5b0      	push	{r4, r5, r7, lr}
    3082:	b086      	sub	sp, #24
    3084:	af02      	add	r7, sp, #8
    3086:	6078      	str	r0, [r7, #4]
    3088:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    308a:	230d      	movs	r3, #13
    308c:	18fb      	adds	r3, r7, r3
    308e:	2201      	movs	r2, #1
    3090:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    3092:	230f      	movs	r3, #15
    3094:	18fb      	adds	r3, r7, r3
    3096:	22ca      	movs	r2, #202	; 0xca
    3098:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    309a:	230e      	movs	r3, #14
    309c:	18fb      	adds	r3, r7, r3
    309e:	2200      	movs	r2, #0
    30a0:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	2bff      	cmp	r3, #255	; 0xff
    30a6:	d808      	bhi.n	30ba <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    30a8:	230f      	movs	r3, #15
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	22c4      	movs	r2, #196	; 0xc4
    30ae:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    30b0:	230e      	movs	r3, #14
    30b2:	18fb      	adds	r3, r7, r3
    30b4:	2201      	movs	r2, #1
    30b6:	701a      	strb	r2, [r3, #0]
    30b8:	e007      	b.n	30ca <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    30ba:	230f      	movs	r3, #15
    30bc:	18fb      	adds	r3, r7, r3
    30be:	22ca      	movs	r2, #202	; 0xca
    30c0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    30c2:	230e      	movs	r3, #14
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	2200      	movs	r2, #0
    30c8:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    30ca:	230d      	movs	r3, #13
    30cc:	18fc      	adds	r4, r7, r3
    30ce:	6879      	ldr	r1, [r7, #4]
    30d0:	230f      	movs	r3, #15
    30d2:	18fb      	adds	r3, r7, r3
    30d4:	7818      	ldrb	r0, [r3, #0]
    30d6:	230e      	movs	r3, #14
    30d8:	18fb      	adds	r3, r7, r3
    30da:	781b      	ldrb	r3, [r3, #0]
    30dc:	9300      	str	r3, [sp, #0]
    30de:	2304      	movs	r3, #4
    30e0:	2200      	movs	r2, #0
    30e2:	4d44      	ldr	r5, [pc, #272]	; (31f4 <spi_read_reg+0x174>)
    30e4:	47a8      	blx	r5
    30e6:	0003      	movs	r3, r0
    30e8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    30ea:	230d      	movs	r3, #13
    30ec:	18fb      	adds	r3, r7, r3
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	b25b      	sxtb	r3, r3
    30f2:	2b01      	cmp	r3, #1
    30f4:	d010      	beq.n	3118 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    30f6:	4a40      	ldr	r2, [pc, #256]	; (31f8 <spi_read_reg+0x178>)
    30f8:	4940      	ldr	r1, [pc, #256]	; (31fc <spi_read_reg+0x17c>)
    30fa:	4b41      	ldr	r3, [pc, #260]	; (3200 <spi_read_reg+0x180>)
    30fc:	0018      	movs	r0, r3
    30fe:	4b41      	ldr	r3, [pc, #260]	; (3204 <spi_read_reg+0x184>)
    3100:	4798      	blx	r3
    3102:	687a      	ldr	r2, [r7, #4]
    3104:	4b40      	ldr	r3, [pc, #256]	; (3208 <spi_read_reg+0x188>)
    3106:	0011      	movs	r1, r2
    3108:	0018      	movs	r0, r3
    310a:	4b3e      	ldr	r3, [pc, #248]	; (3204 <spi_read_reg+0x184>)
    310c:	4798      	blx	r3
    310e:	200d      	movs	r0, #13
    3110:	4b3e      	ldr	r3, [pc, #248]	; (320c <spi_read_reg+0x18c>)
    3112:	4798      	blx	r3
		return N_FAIL;
    3114:	2300      	movs	r3, #0
    3116:	e068      	b.n	31ea <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    3118:	230d      	movs	r3, #13
    311a:	18fc      	adds	r4, r7, r3
    311c:	230f      	movs	r3, #15
    311e:	18fb      	adds	r3, r7, r3
    3120:	781b      	ldrb	r3, [r3, #0]
    3122:	0018      	movs	r0, r3
    3124:	4b3a      	ldr	r3, [pc, #232]	; (3210 <spi_read_reg+0x190>)
    3126:	4798      	blx	r3
    3128:	0003      	movs	r3, r0
    312a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    312c:	230d      	movs	r3, #13
    312e:	18fb      	adds	r3, r7, r3
    3130:	781b      	ldrb	r3, [r3, #0]
    3132:	b25b      	sxtb	r3, r3
    3134:	2b01      	cmp	r3, #1
    3136:	d018      	beq.n	316a <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    3138:	4a36      	ldr	r2, [pc, #216]	; (3214 <spi_read_reg+0x194>)
    313a:	4930      	ldr	r1, [pc, #192]	; (31fc <spi_read_reg+0x17c>)
    313c:	4b30      	ldr	r3, [pc, #192]	; (3200 <spi_read_reg+0x180>)
    313e:	0018      	movs	r0, r3
    3140:	4b30      	ldr	r3, [pc, #192]	; (3204 <spi_read_reg+0x184>)
    3142:	4798      	blx	r3
    3144:	687a      	ldr	r2, [r7, #4]
    3146:	4b34      	ldr	r3, [pc, #208]	; (3218 <spi_read_reg+0x198>)
    3148:	0011      	movs	r1, r2
    314a:	0018      	movs	r0, r3
    314c:	4b2d      	ldr	r3, [pc, #180]	; (3204 <spi_read_reg+0x184>)
    314e:	4798      	blx	r3
    3150:	200d      	movs	r0, #13
    3152:	4b2e      	ldr	r3, [pc, #184]	; (320c <spi_read_reg+0x18c>)
    3154:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3156:	2300      	movs	r3, #0
    3158:	9300      	str	r3, [sp, #0]
    315a:	2300      	movs	r3, #0
    315c:	2200      	movs	r2, #0
    315e:	2100      	movs	r1, #0
    3160:	20cf      	movs	r0, #207	; 0xcf
    3162:	4c24      	ldr	r4, [pc, #144]	; (31f4 <spi_read_reg+0x174>)
    3164:	47a0      	blx	r4
		return N_FAIL;
    3166:	2300      	movs	r3, #0
    3168:	e03f      	b.n	31ea <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    316a:	230d      	movs	r3, #13
    316c:	18fc      	adds	r4, r7, r3
    316e:	230e      	movs	r3, #14
    3170:	18fb      	adds	r3, r7, r3
    3172:	781a      	ldrb	r2, [r3, #0]
    3174:	2308      	movs	r3, #8
    3176:	18fb      	adds	r3, r7, r3
    3178:	2104      	movs	r1, #4
    317a:	0018      	movs	r0, r3
    317c:	4b27      	ldr	r3, [pc, #156]	; (321c <spi_read_reg+0x19c>)
    317e:	4798      	blx	r3
    3180:	0003      	movs	r3, r0
    3182:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3184:	230d      	movs	r3, #13
    3186:	18fb      	adds	r3, r7, r3
    3188:	781b      	ldrb	r3, [r3, #0]
    318a:	b25b      	sxtb	r3, r3
    318c:	2b01      	cmp	r3, #1
    318e:	d016      	beq.n	31be <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    3190:	4a23      	ldr	r2, [pc, #140]	; (3220 <spi_read_reg+0x1a0>)
    3192:	491a      	ldr	r1, [pc, #104]	; (31fc <spi_read_reg+0x17c>)
    3194:	4b1a      	ldr	r3, [pc, #104]	; (3200 <spi_read_reg+0x180>)
    3196:	0018      	movs	r0, r3
    3198:	4b1a      	ldr	r3, [pc, #104]	; (3204 <spi_read_reg+0x184>)
    319a:	4798      	blx	r3
    319c:	4b21      	ldr	r3, [pc, #132]	; (3224 <spi_read_reg+0x1a4>)
    319e:	0018      	movs	r0, r3
    31a0:	4b21      	ldr	r3, [pc, #132]	; (3228 <spi_read_reg+0x1a8>)
    31a2:	4798      	blx	r3
    31a4:	200d      	movs	r0, #13
    31a6:	4b19      	ldr	r3, [pc, #100]	; (320c <spi_read_reg+0x18c>)
    31a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    31aa:	2300      	movs	r3, #0
    31ac:	9300      	str	r3, [sp, #0]
    31ae:	2300      	movs	r3, #0
    31b0:	2200      	movs	r2, #0
    31b2:	2100      	movs	r1, #0
    31b4:	20cf      	movs	r0, #207	; 0xcf
    31b6:	4c0f      	ldr	r4, [pc, #60]	; (31f4 <spi_read_reg+0x174>)
    31b8:	47a0      	blx	r4
		return N_FAIL;
    31ba:	2300      	movs	r3, #0
    31bc:	e015      	b.n	31ea <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    31be:	2308      	movs	r3, #8
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    31c6:	2308      	movs	r3, #8
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	785b      	ldrb	r3, [r3, #1]
    31cc:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    31ce:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    31d0:	2308      	movs	r3, #8
    31d2:	18fb      	adds	r3, r7, r3
    31d4:	789b      	ldrb	r3, [r3, #2]
    31d6:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    31d8:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    31da:	2308      	movs	r3, #8
    31dc:	18fb      	adds	r3, r7, r3
    31de:	78db      	ldrb	r3, [r3, #3]
    31e0:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    31e2:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    31e4:	683b      	ldr	r3, [r7, #0]
    31e6:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    31e8:	2301      	movs	r3, #1
}
    31ea:	0018      	movs	r0, r3
    31ec:	46bd      	mov	sp, r7
    31ee:	b004      	add	sp, #16
    31f0:	bdb0      	pop	{r4, r5, r7, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	000025c9 	.word	0x000025c9
    31f8:	00000245 	.word	0x00000245
    31fc:	0000da08 	.word	0x0000da08
    3200:	0000d4c0 	.word	0x0000d4c0
    3204:	0000bbb1 	.word	0x0000bbb1
    3208:	0000d794 	.word	0x0000d794
    320c:	0000bbe5 	.word	0x0000bbe5
    3210:	0000290d 	.word	0x0000290d
    3214:	0000024b 	.word	0x0000024b
    3218:	0000d7c0 	.word	0x0000d7c0
    321c:	00002a49 	.word	0x00002a49
    3220:	00000253 	.word	0x00000253
    3224:	0000d7f4 	.word	0x0000d7f4
    3228:	0000bcd1 	.word	0x0000bcd1

0000322c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    322c:	b5b0      	push	{r4, r5, r7, lr}
    322e:	b088      	sub	sp, #32
    3230:	af02      	add	r7, sp, #8
    3232:	60f8      	str	r0, [r7, #12]
    3234:	60b9      	str	r1, [r7, #8]
    3236:	1dbb      	adds	r3, r7, #6
    3238:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    323a:	2317      	movs	r3, #23
    323c:	18fb      	adds	r3, r7, r3
    323e:	22c8      	movs	r2, #200	; 0xc8
    3240:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    3242:	1dbb      	adds	r3, r7, #6
    3244:	881a      	ldrh	r2, [r3, #0]
    3246:	2316      	movs	r3, #22
    3248:	18fc      	adds	r4, r7, r3
    324a:	68f9      	ldr	r1, [r7, #12]
    324c:	2317      	movs	r3, #23
    324e:	18fb      	adds	r3, r7, r3
    3250:	7818      	ldrb	r0, [r3, #0]
    3252:	2300      	movs	r3, #0
    3254:	9300      	str	r3, [sp, #0]
    3256:	0013      	movs	r3, r2
    3258:	2200      	movs	r2, #0
    325a:	4d39      	ldr	r5, [pc, #228]	; (3340 <nm_spi_read+0x114>)
    325c:	47a8      	blx	r5
    325e:	0003      	movs	r3, r0
    3260:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3262:	2316      	movs	r3, #22
    3264:	18fb      	adds	r3, r7, r3
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	b25b      	sxtb	r3, r3
    326a:	2b01      	cmp	r3, #1
    326c:	d011      	beq.n	3292 <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    326e:	239d      	movs	r3, #157	; 0x9d
    3270:	009a      	lsls	r2, r3, #2
    3272:	4934      	ldr	r1, [pc, #208]	; (3344 <nm_spi_read+0x118>)
    3274:	4b34      	ldr	r3, [pc, #208]	; (3348 <nm_spi_read+0x11c>)
    3276:	0018      	movs	r0, r3
    3278:	4b34      	ldr	r3, [pc, #208]	; (334c <nm_spi_read+0x120>)
    327a:	4798      	blx	r3
    327c:	68fa      	ldr	r2, [r7, #12]
    327e:	4b34      	ldr	r3, [pc, #208]	; (3350 <nm_spi_read+0x124>)
    3280:	0011      	movs	r1, r2
    3282:	0018      	movs	r0, r3
    3284:	4b31      	ldr	r3, [pc, #196]	; (334c <nm_spi_read+0x120>)
    3286:	4798      	blx	r3
    3288:	200d      	movs	r0, #13
    328a:	4b32      	ldr	r3, [pc, #200]	; (3354 <nm_spi_read+0x128>)
    328c:	4798      	blx	r3
		return N_FAIL;
    328e:	2300      	movs	r3, #0
    3290:	e052      	b.n	3338 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    3292:	2316      	movs	r3, #22
    3294:	18fc      	adds	r4, r7, r3
    3296:	2317      	movs	r3, #23
    3298:	18fb      	adds	r3, r7, r3
    329a:	781b      	ldrb	r3, [r3, #0]
    329c:	0018      	movs	r0, r3
    329e:	4b2e      	ldr	r3, [pc, #184]	; (3358 <nm_spi_read+0x12c>)
    32a0:	4798      	blx	r3
    32a2:	0003      	movs	r3, r0
    32a4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    32a6:	2316      	movs	r3, #22
    32a8:	18fb      	adds	r3, r7, r3
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	b25b      	sxtb	r3, r3
    32ae:	2b01      	cmp	r3, #1
    32b0:	d018      	beq.n	32e4 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    32b2:	4a2a      	ldr	r2, [pc, #168]	; (335c <nm_spi_read+0x130>)
    32b4:	4923      	ldr	r1, [pc, #140]	; (3344 <nm_spi_read+0x118>)
    32b6:	4b24      	ldr	r3, [pc, #144]	; (3348 <nm_spi_read+0x11c>)
    32b8:	0018      	movs	r0, r3
    32ba:	4b24      	ldr	r3, [pc, #144]	; (334c <nm_spi_read+0x120>)
    32bc:	4798      	blx	r3
    32be:	68fa      	ldr	r2, [r7, #12]
    32c0:	4b27      	ldr	r3, [pc, #156]	; (3360 <nm_spi_read+0x134>)
    32c2:	0011      	movs	r1, r2
    32c4:	0018      	movs	r0, r3
    32c6:	4b21      	ldr	r3, [pc, #132]	; (334c <nm_spi_read+0x120>)
    32c8:	4798      	blx	r3
    32ca:	200d      	movs	r0, #13
    32cc:	4b21      	ldr	r3, [pc, #132]	; (3354 <nm_spi_read+0x128>)
    32ce:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    32d0:	2300      	movs	r3, #0
    32d2:	9300      	str	r3, [sp, #0]
    32d4:	2300      	movs	r3, #0
    32d6:	2200      	movs	r2, #0
    32d8:	2100      	movs	r1, #0
    32da:	20cf      	movs	r0, #207	; 0xcf
    32dc:	4c18      	ldr	r4, [pc, #96]	; (3340 <nm_spi_read+0x114>)
    32de:	47a0      	blx	r4
		return N_FAIL;
    32e0:	2300      	movs	r3, #0
    32e2:	e029      	b.n	3338 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    32e4:	2316      	movs	r3, #22
    32e6:	18fc      	adds	r4, r7, r3
    32e8:	1dbb      	adds	r3, r7, #6
    32ea:	8819      	ldrh	r1, [r3, #0]
    32ec:	68bb      	ldr	r3, [r7, #8]
    32ee:	2200      	movs	r2, #0
    32f0:	0018      	movs	r0, r3
    32f2:	4b1c      	ldr	r3, [pc, #112]	; (3364 <nm_spi_read+0x138>)
    32f4:	4798      	blx	r3
    32f6:	0003      	movs	r3, r0
    32f8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    32fa:	2316      	movs	r3, #22
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	781b      	ldrb	r3, [r3, #0]
    3300:	b25b      	sxtb	r3, r3
    3302:	2b01      	cmp	r3, #1
    3304:	d017      	beq.n	3336 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3306:	23a1      	movs	r3, #161	; 0xa1
    3308:	009a      	lsls	r2, r3, #2
    330a:	490e      	ldr	r1, [pc, #56]	; (3344 <nm_spi_read+0x118>)
    330c:	4b0e      	ldr	r3, [pc, #56]	; (3348 <nm_spi_read+0x11c>)
    330e:	0018      	movs	r0, r3
    3310:	4b0e      	ldr	r3, [pc, #56]	; (334c <nm_spi_read+0x120>)
    3312:	4798      	blx	r3
    3314:	4b14      	ldr	r3, [pc, #80]	; (3368 <nm_spi_read+0x13c>)
    3316:	0018      	movs	r0, r3
    3318:	4b14      	ldr	r3, [pc, #80]	; (336c <nm_spi_read+0x140>)
    331a:	4798      	blx	r3
    331c:	200d      	movs	r0, #13
    331e:	4b0d      	ldr	r3, [pc, #52]	; (3354 <nm_spi_read+0x128>)
    3320:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3322:	2300      	movs	r3, #0
    3324:	9300      	str	r3, [sp, #0]
    3326:	2300      	movs	r3, #0
    3328:	2200      	movs	r2, #0
    332a:	2100      	movs	r1, #0
    332c:	20cf      	movs	r0, #207	; 0xcf
    332e:	4c04      	ldr	r4, [pc, #16]	; (3340 <nm_spi_read+0x114>)
    3330:	47a0      	blx	r4
		return N_FAIL;
    3332:	2300      	movs	r3, #0
    3334:	e000      	b.n	3338 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    3336:	2301      	movs	r3, #1
}
    3338:	0018      	movs	r0, r3
    333a:	46bd      	mov	sp, r7
    333c:	b006      	add	sp, #24
    333e:	bdb0      	pop	{r4, r5, r7, pc}
    3340:	000025c9 	.word	0x000025c9
    3344:	0000da18 	.word	0x0000da18
    3348:	0000d4c0 	.word	0x0000d4c0
    334c:	0000bbb1 	.word	0x0000bbb1
    3350:	0000d814 	.word	0x0000d814
    3354:	0000bbe5 	.word	0x0000bbe5
    3358:	0000290d 	.word	0x0000290d
    335c:	0000027a 	.word	0x0000027a
    3360:	0000d844 	.word	0x0000d844
    3364:	00002a49 	.word	0x00002a49
    3368:	0000d87c 	.word	0x0000d87c
    336c:	0000bcd1 	.word	0x0000bcd1

00003370 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3370:	b590      	push	{r4, r7, lr}
    3372:	b085      	sub	sp, #20
    3374:	af00      	add	r7, sp, #0
    3376:	6078      	str	r0, [r7, #4]
    3378:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    337a:	230f      	movs	r3, #15
    337c:	18fc      	adds	r4, r7, r3
    337e:	683a      	ldr	r2, [r7, #0]
    3380:	687b      	ldr	r3, [r7, #4]
    3382:	0011      	movs	r1, r2
    3384:	0018      	movs	r0, r3
    3386:	4b0d      	ldr	r3, [pc, #52]	; (33bc <nm_spi_read_reg_with_ret+0x4c>)
    3388:	4798      	blx	r3
    338a:	0003      	movs	r3, r0
    338c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    338e:	230f      	movs	r3, #15
    3390:	18fb      	adds	r3, r7, r3
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	b25b      	sxtb	r3, r3
    3396:	2b01      	cmp	r3, #1
    3398:	d104      	bne.n	33a4 <nm_spi_read_reg_with_ret+0x34>
    339a:	230f      	movs	r3, #15
    339c:	18fb      	adds	r3, r7, r3
    339e:	2200      	movs	r2, #0
    33a0:	701a      	strb	r2, [r3, #0]
    33a2:	e003      	b.n	33ac <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    33a4:	230f      	movs	r3, #15
    33a6:	18fb      	adds	r3, r7, r3
    33a8:	22fa      	movs	r2, #250	; 0xfa
    33aa:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    33ac:	230f      	movs	r3, #15
    33ae:	18fb      	adds	r3, r7, r3
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	b25b      	sxtb	r3, r3
}
    33b4:	0018      	movs	r0, r3
    33b6:	46bd      	mov	sp, r7
    33b8:	b005      	add	sp, #20
    33ba:	bd90      	pop	{r4, r7, pc}
    33bc:	00003081 	.word	0x00003081

000033c0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    33c0:	b590      	push	{r4, r7, lr}
    33c2:	b085      	sub	sp, #20
    33c4:	af00      	add	r7, sp, #0
    33c6:	6078      	str	r0, [r7, #4]
    33c8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    33ca:	230f      	movs	r3, #15
    33cc:	18fc      	adds	r4, r7, r3
    33ce:	683a      	ldr	r2, [r7, #0]
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	0011      	movs	r1, r2
    33d4:	0018      	movs	r0, r3
    33d6:	4b0d      	ldr	r3, [pc, #52]	; (340c <nm_spi_write_reg+0x4c>)
    33d8:	4798      	blx	r3
    33da:	0003      	movs	r3, r0
    33dc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    33de:	230f      	movs	r3, #15
    33e0:	18fb      	adds	r3, r7, r3
    33e2:	781b      	ldrb	r3, [r3, #0]
    33e4:	b25b      	sxtb	r3, r3
    33e6:	2b01      	cmp	r3, #1
    33e8:	d104      	bne.n	33f4 <nm_spi_write_reg+0x34>
    33ea:	230f      	movs	r3, #15
    33ec:	18fb      	adds	r3, r7, r3
    33ee:	2200      	movs	r2, #0
    33f0:	701a      	strb	r2, [r3, #0]
    33f2:	e003      	b.n	33fc <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    33f4:	230f      	movs	r3, #15
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	22fa      	movs	r2, #250	; 0xfa
    33fa:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    33fc:	230f      	movs	r3, #15
    33fe:	18fb      	adds	r3, r7, r3
    3400:	781b      	ldrb	r3, [r3, #0]
    3402:	b25b      	sxtb	r3, r3
}
    3404:	0018      	movs	r0, r3
    3406:	46bd      	mov	sp, r7
    3408:	b005      	add	sp, #20
    340a:	bd90      	pop	{r4, r7, pc}
    340c:	00002e21 	.word	0x00002e21

00003410 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3410:	b590      	push	{r4, r7, lr}
    3412:	b087      	sub	sp, #28
    3414:	af00      	add	r7, sp, #0
    3416:	60f8      	str	r0, [r7, #12]
    3418:	60b9      	str	r1, [r7, #8]
    341a:	1dbb      	adds	r3, r7, #6
    341c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    341e:	2317      	movs	r3, #23
    3420:	18fc      	adds	r4, r7, r3
    3422:	1dbb      	adds	r3, r7, #6
    3424:	881a      	ldrh	r2, [r3, #0]
    3426:	68b9      	ldr	r1, [r7, #8]
    3428:	68fb      	ldr	r3, [r7, #12]
    342a:	0018      	movs	r0, r3
    342c:	4b0d      	ldr	r3, [pc, #52]	; (3464 <nm_spi_read_block+0x54>)
    342e:	4798      	blx	r3
    3430:	0003      	movs	r3, r0
    3432:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3434:	2317      	movs	r3, #23
    3436:	18fb      	adds	r3, r7, r3
    3438:	781b      	ldrb	r3, [r3, #0]
    343a:	b25b      	sxtb	r3, r3
    343c:	2b01      	cmp	r3, #1
    343e:	d104      	bne.n	344a <nm_spi_read_block+0x3a>
    3440:	2317      	movs	r3, #23
    3442:	18fb      	adds	r3, r7, r3
    3444:	2200      	movs	r2, #0
    3446:	701a      	strb	r2, [r3, #0]
    3448:	e003      	b.n	3452 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    344a:	2317      	movs	r3, #23
    344c:	18fb      	adds	r3, r7, r3
    344e:	22fa      	movs	r2, #250	; 0xfa
    3450:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    3452:	2317      	movs	r3, #23
    3454:	18fb      	adds	r3, r7, r3
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	b25b      	sxtb	r3, r3
}
    345a:	0018      	movs	r0, r3
    345c:	46bd      	mov	sp, r7
    345e:	b007      	add	sp, #28
    3460:	bd90      	pop	{r4, r7, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	0000322d 	.word	0x0000322d

00003468 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3468:	b590      	push	{r4, r7, lr}
    346a:	b087      	sub	sp, #28
    346c:	af00      	add	r7, sp, #0
    346e:	60f8      	str	r0, [r7, #12]
    3470:	60b9      	str	r1, [r7, #8]
    3472:	1dbb      	adds	r3, r7, #6
    3474:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    3476:	2317      	movs	r3, #23
    3478:	18fc      	adds	r4, r7, r3
    347a:	1dbb      	adds	r3, r7, #6
    347c:	881a      	ldrh	r2, [r3, #0]
    347e:	68b9      	ldr	r1, [r7, #8]
    3480:	68fb      	ldr	r3, [r7, #12]
    3482:	0018      	movs	r0, r3
    3484:	4b0d      	ldr	r3, [pc, #52]	; (34bc <nm_spi_write_block+0x54>)
    3486:	4798      	blx	r3
    3488:	0003      	movs	r3, r0
    348a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    348c:	2317      	movs	r3, #23
    348e:	18fb      	adds	r3, r7, r3
    3490:	781b      	ldrb	r3, [r3, #0]
    3492:	b25b      	sxtb	r3, r3
    3494:	2b01      	cmp	r3, #1
    3496:	d104      	bne.n	34a2 <nm_spi_write_block+0x3a>
    3498:	2317      	movs	r3, #23
    349a:	18fb      	adds	r3, r7, r3
    349c:	2200      	movs	r2, #0
    349e:	701a      	strb	r2, [r3, #0]
    34a0:	e003      	b.n	34aa <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    34a2:	2317      	movs	r3, #23
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	22fa      	movs	r2, #250	; 0xfa
    34a8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    34aa:	2317      	movs	r3, #23
    34ac:	18fb      	adds	r3, r7, r3
    34ae:	781b      	ldrb	r3, [r3, #0]
    34b0:	b25b      	sxtb	r3, r3
}
    34b2:	0018      	movs	r0, r3
    34b4:	46bd      	mov	sp, r7
    34b6:	b007      	add	sp, #28
    34b8:	bd90      	pop	{r4, r7, pc}
    34ba:	46c0      	nop			; (mov r8, r8)
    34bc:	00002f3d 	.word	0x00002f3d

000034c0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    34c0:	b590      	push	{r4, r7, lr}
    34c2:	b08b      	sub	sp, #44	; 0x2c
    34c4:	af04      	add	r7, sp, #16
    34c6:	0004      	movs	r4, r0
    34c8:	0008      	movs	r0, r1
    34ca:	0011      	movs	r1, r2
    34cc:	1dbb      	adds	r3, r7, #6
    34ce:	1c22      	adds	r2, r4, #0
    34d0:	801a      	strh	r2, [r3, #0]
    34d2:	1d7b      	adds	r3, r7, #5
    34d4:	1c02      	adds	r2, r0, #0
    34d6:	701a      	strb	r2, [r3, #0]
    34d8:	1d3b      	adds	r3, r7, #4
    34da:	1c0a      	adds	r2, r1, #0
    34dc:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    34de:	2317      	movs	r3, #23
    34e0:	18fb      	adds	r3, r7, r3
    34e2:	22ff      	movs	r2, #255	; 0xff
    34e4:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    34e6:	2315      	movs	r3, #21
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	220b      	movs	r2, #11
    34ec:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    34ee:	1dbb      	adds	r3, r7, #6
    34f0:	881b      	ldrh	r3, [r3, #0]
    34f2:	2b02      	cmp	r3, #2
    34f4:	d000      	beq.n	34f8 <socket+0x38>
    34f6:	e07e      	b.n	35f6 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    34f8:	1d7b      	adds	r3, r7, #5
    34fa:	781b      	ldrb	r3, [r3, #0]
    34fc:	2b01      	cmp	r3, #1
    34fe:	d108      	bne.n	3512 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    3500:	2315      	movs	r3, #21
    3502:	18fb      	adds	r3, r7, r3
    3504:	2207      	movs	r2, #7
    3506:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    3508:	2316      	movs	r3, #22
    350a:	18fb      	adds	r3, r7, r3
    350c:	2200      	movs	r2, #0
    350e:	701a      	strb	r2, [r3, #0]
    3510:	e067      	b.n	35e2 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    3512:	1d7b      	adds	r3, r7, #5
    3514:	781b      	ldrb	r3, [r3, #0]
    3516:	2b02      	cmp	r3, #2
    3518:	d108      	bne.n	352c <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    351a:	2315      	movs	r3, #21
    351c:	18fb      	adds	r3, r7, r3
    351e:	220b      	movs	r2, #11
    3520:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    3522:	2316      	movs	r3, #22
    3524:	18fb      	adds	r3, r7, r3
    3526:	2207      	movs	r2, #7
    3528:	701a      	strb	r2, [r3, #0]
    352a:	e05a      	b.n	35e2 <socket+0x122>
		}
		else
			return sock;
    352c:	2317      	movs	r3, #23
    352e:	18fb      	adds	r3, r7, r3
    3530:	781b      	ldrb	r3, [r3, #0]
    3532:	b25b      	sxtb	r3, r3
    3534:	e063      	b.n	35fe <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    3536:	2316      	movs	r3, #22
    3538:	18fb      	adds	r3, r7, r3
    353a:	781b      	ldrb	r3, [r3, #0]
    353c:	011a      	lsls	r2, r3, #4
    353e:	4b32      	ldr	r3, [pc, #200]	; (3608 <socket+0x148>)
    3540:	18d3      	adds	r3, r2, r3
    3542:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    3544:	693b      	ldr	r3, [r7, #16]
    3546:	7a9b      	ldrb	r3, [r3, #10]
    3548:	b2db      	uxtb	r3, r3
    354a:	2b00      	cmp	r3, #0
    354c:	d142      	bne.n	35d4 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    354e:	693b      	ldr	r3, [r7, #16]
    3550:	2210      	movs	r2, #16
    3552:	2100      	movs	r1, #0
    3554:	0018      	movs	r0, r3
    3556:	4b2d      	ldr	r3, [pc, #180]	; (360c <socket+0x14c>)
    3558:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    355a:	693b      	ldr	r3, [r7, #16]
    355c:	2201      	movs	r2, #1
    355e:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    3560:	4b2b      	ldr	r3, [pc, #172]	; (3610 <socket+0x150>)
    3562:	881b      	ldrh	r3, [r3, #0]
    3564:	b29b      	uxth	r3, r3
    3566:	3301      	adds	r3, #1
    3568:	b29a      	uxth	r2, r3
    356a:	4b29      	ldr	r3, [pc, #164]	; (3610 <socket+0x150>)
    356c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    356e:	4b28      	ldr	r3, [pc, #160]	; (3610 <socket+0x150>)
    3570:	881b      	ldrh	r3, [r3, #0]
    3572:	b29b      	uxth	r3, r3
    3574:	2b00      	cmp	r3, #0
    3576:	d106      	bne.n	3586 <socket+0xc6>
					++gu16SessionID;
    3578:	4b25      	ldr	r3, [pc, #148]	; (3610 <socket+0x150>)
    357a:	881b      	ldrh	r3, [r3, #0]
    357c:	b29b      	uxth	r3, r3
    357e:	3301      	adds	r3, #1
    3580:	b29a      	uxth	r2, r3
    3582:	4b23      	ldr	r3, [pc, #140]	; (3610 <socket+0x150>)
    3584:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    3586:	4b22      	ldr	r3, [pc, #136]	; (3610 <socket+0x150>)
    3588:	881b      	ldrh	r3, [r3, #0]
    358a:	b29a      	uxth	r2, r3
    358c:	693b      	ldr	r3, [r7, #16]
    358e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    3590:	2317      	movs	r3, #23
    3592:	18fb      	adds	r3, r7, r3
    3594:	2216      	movs	r2, #22
    3596:	18ba      	adds	r2, r7, r2
    3598:	7812      	ldrb	r2, [r2, #0]
    359a:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    359c:	1d3b      	adds	r3, r7, #4
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	2201      	movs	r2, #1
    35a2:	4013      	ands	r3, r2
    35a4:	d026      	beq.n	35f4 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    35a6:	230c      	movs	r3, #12
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	2217      	movs	r2, #23
    35ac:	18ba      	adds	r2, r7, r2
    35ae:	7812      	ldrb	r2, [r2, #0]
    35b0:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    35b2:	693b      	ldr	r3, [r7, #16]
    35b4:	2221      	movs	r2, #33	; 0x21
    35b6:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    35b8:	230c      	movs	r3, #12
    35ba:	18fa      	adds	r2, r7, r3
    35bc:	2300      	movs	r3, #0
    35be:	9302      	str	r3, [sp, #8]
    35c0:	2300      	movs	r3, #0
    35c2:	9301      	str	r3, [sp, #4]
    35c4:	2300      	movs	r3, #0
    35c6:	9300      	str	r3, [sp, #0]
    35c8:	2304      	movs	r3, #4
    35ca:	2150      	movs	r1, #80	; 0x50
    35cc:	2002      	movs	r0, #2
    35ce:	4c11      	ldr	r4, [pc, #68]	; (3614 <socket+0x154>)
    35d0:	47a0      	blx	r4
				}
				break;
    35d2:	e00f      	b.n	35f4 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    35d4:	2316      	movs	r3, #22
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	781a      	ldrb	r2, [r3, #0]
    35da:	2316      	movs	r3, #22
    35dc:	18fb      	adds	r3, r7, r3
    35de:	3201      	adds	r2, #1
    35e0:	701a      	strb	r2, [r3, #0]
    35e2:	2316      	movs	r3, #22
    35e4:	18fa      	adds	r2, r7, r3
    35e6:	2315      	movs	r3, #21
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	7812      	ldrb	r2, [r2, #0]
    35ec:	781b      	ldrb	r3, [r3, #0]
    35ee:	429a      	cmp	r2, r3
    35f0:	d3a1      	bcc.n	3536 <socket+0x76>
    35f2:	e000      	b.n	35f6 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    35f4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    35f6:	2317      	movs	r3, #23
    35f8:	18fb      	adds	r3, r7, r3
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	b25b      	sxtb	r3, r3
}
    35fe:	0018      	movs	r0, r3
    3600:	46bd      	mov	sp, r7
    3602:	b007      	add	sp, #28
    3604:	bd90      	pop	{r4, r7, pc}
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	20004508 	.word	0x20004508
    360c:	000011a9 	.word	0x000011a9
    3610:	200000d6 	.word	0x200000d6
    3614:	000013f5 	.word	0x000013f5

00003618 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3618:	b5b0      	push	{r4, r5, r7, lr}
    361a:	b08a      	sub	sp, #40	; 0x28
    361c:	af04      	add	r7, sp, #16
    361e:	6039      	str	r1, [r7, #0]
    3620:	0011      	movs	r1, r2
    3622:	1dfb      	adds	r3, r7, #7
    3624:	1c02      	adds	r2, r0, #0
    3626:	701a      	strb	r2, [r3, #0]
    3628:	1dbb      	adds	r3, r7, #6
    362a:	1c0a      	adds	r2, r1, #0
    362c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    362e:	2317      	movs	r3, #23
    3630:	18fb      	adds	r3, r7, r3
    3632:	22fa      	movs	r2, #250	; 0xfa
    3634:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3636:	1dfb      	adds	r3, r7, #7
    3638:	781b      	ldrb	r3, [r3, #0]
    363a:	2b7f      	cmp	r3, #127	; 0x7f
    363c:	d867      	bhi.n	370e <connect+0xf6>
    363e:	683b      	ldr	r3, [r7, #0]
    3640:	2b00      	cmp	r3, #0
    3642:	d064      	beq.n	370e <connect+0xf6>
    3644:	1dfb      	adds	r3, r7, #7
    3646:	781b      	ldrb	r3, [r3, #0]
    3648:	b25b      	sxtb	r3, r3
    364a:	4a35      	ldr	r2, [pc, #212]	; (3720 <connect+0x108>)
    364c:	011b      	lsls	r3, r3, #4
    364e:	18d3      	adds	r3, r2, r3
    3650:	330a      	adds	r3, #10
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	b2db      	uxtb	r3, r3
    3656:	2b01      	cmp	r3, #1
    3658:	d159      	bne.n	370e <connect+0xf6>
    365a:	1dbb      	adds	r3, r7, #6
    365c:	781b      	ldrb	r3, [r3, #0]
    365e:	2b00      	cmp	r3, #0
    3660:	d055      	beq.n	370e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3662:	2316      	movs	r3, #22
    3664:	18fb      	adds	r3, r7, r3
    3666:	2244      	movs	r2, #68	; 0x44
    3668:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    366a:	1dfb      	adds	r3, r7, #7
    366c:	781b      	ldrb	r3, [r3, #0]
    366e:	b25b      	sxtb	r3, r3
    3670:	4a2b      	ldr	r2, [pc, #172]	; (3720 <connect+0x108>)
    3672:	011b      	lsls	r3, r3, #4
    3674:	18d3      	adds	r3, r2, r3
    3676:	330b      	adds	r3, #11
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	b2db      	uxtb	r3, r3
    367c:	001a      	movs	r2, r3
    367e:	2301      	movs	r3, #1
    3680:	4013      	ands	r3, r2
    3682:	d00f      	beq.n	36a4 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3684:	2316      	movs	r3, #22
    3686:	18fb      	adds	r3, r7, r3
    3688:	224b      	movs	r2, #75	; 0x4b
    368a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    368c:	1dfb      	adds	r3, r7, #7
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	b25b      	sxtb	r3, r3
    3692:	4a23      	ldr	r2, [pc, #140]	; (3720 <connect+0x108>)
    3694:	011b      	lsls	r3, r3, #4
    3696:	18d3      	adds	r3, r2, r3
    3698:	330b      	adds	r3, #11
    369a:	781b      	ldrb	r3, [r3, #0]
    369c:	b2da      	uxtb	r2, r3
    369e:	2308      	movs	r3, #8
    36a0:	18fb      	adds	r3, r7, r3
    36a2:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    36a4:	2308      	movs	r3, #8
    36a6:	18fb      	adds	r3, r7, r3
    36a8:	1dfa      	adds	r2, r7, #7
    36aa:	7812      	ldrb	r2, [r2, #0]
    36ac:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    36ae:	6839      	ldr	r1, [r7, #0]
    36b0:	2308      	movs	r3, #8
    36b2:	18fb      	adds	r3, r7, r3
    36b4:	2208      	movs	r2, #8
    36b6:	0018      	movs	r0, r3
    36b8:	4b1a      	ldr	r3, [pc, #104]	; (3724 <connect+0x10c>)
    36ba:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    36bc:	1dfb      	adds	r3, r7, #7
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	b25b      	sxtb	r3, r3
    36c2:	4a17      	ldr	r2, [pc, #92]	; (3720 <connect+0x108>)
    36c4:	011b      	lsls	r3, r3, #4
    36c6:	18d3      	adds	r3, r2, r3
    36c8:	3306      	adds	r3, #6
    36ca:	881b      	ldrh	r3, [r3, #0]
    36cc:	b29a      	uxth	r2, r3
    36ce:	2308      	movs	r3, #8
    36d0:	18fb      	adds	r3, r7, r3
    36d2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    36d4:	2317      	movs	r3, #23
    36d6:	18fc      	adds	r4, r7, r3
    36d8:	2308      	movs	r3, #8
    36da:	18fa      	adds	r2, r7, r3
    36dc:	2316      	movs	r3, #22
    36de:	18fb      	adds	r3, r7, r3
    36e0:	7819      	ldrb	r1, [r3, #0]
    36e2:	2300      	movs	r3, #0
    36e4:	9302      	str	r3, [sp, #8]
    36e6:	2300      	movs	r3, #0
    36e8:	9301      	str	r3, [sp, #4]
    36ea:	2300      	movs	r3, #0
    36ec:	9300      	str	r3, [sp, #0]
    36ee:	230c      	movs	r3, #12
    36f0:	2002      	movs	r0, #2
    36f2:	4d0d      	ldr	r5, [pc, #52]	; (3728 <connect+0x110>)
    36f4:	47a8      	blx	r5
    36f6:	0003      	movs	r3, r0
    36f8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    36fa:	2317      	movs	r3, #23
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	b25b      	sxtb	r3, r3
    3702:	2b00      	cmp	r3, #0
    3704:	d003      	beq.n	370e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    3706:	2317      	movs	r3, #23
    3708:	18fb      	adds	r3, r7, r3
    370a:	22f7      	movs	r2, #247	; 0xf7
    370c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    370e:	2317      	movs	r3, #23
    3710:	18fb      	adds	r3, r7, r3
    3712:	781b      	ldrb	r3, [r3, #0]
    3714:	b25b      	sxtb	r3, r3
}
    3716:	0018      	movs	r0, r3
    3718:	46bd      	mov	sp, r7
    371a:	b006      	add	sp, #24
    371c:	bdb0      	pop	{r4, r5, r7, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	20004508 	.word	0x20004508
    3724:	0000116d 	.word	0x0000116d
    3728:	000013f5 	.word	0x000013f5

0000372c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    372c:	b590      	push	{r4, r7, lr}
    372e:	b08f      	sub	sp, #60	; 0x3c
    3730:	af04      	add	r7, sp, #16
    3732:	0004      	movs	r4, r0
    3734:	60b9      	str	r1, [r7, #8]
    3736:	0010      	movs	r0, r2
    3738:	0019      	movs	r1, r3
    373a:	230f      	movs	r3, #15
    373c:	18fb      	adds	r3, r7, r3
    373e:	1c22      	adds	r2, r4, #0
    3740:	701a      	strb	r2, [r3, #0]
    3742:	230c      	movs	r3, #12
    3744:	18fb      	adds	r3, r7, r3
    3746:	1c02      	adds	r2, r0, #0
    3748:	801a      	strh	r2, [r3, #0]
    374a:	1dbb      	adds	r3, r7, #6
    374c:	1c0a      	adds	r2, r1, #0
    374e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3750:	2326      	movs	r3, #38	; 0x26
    3752:	18fb      	adds	r3, r7, r3
    3754:	2206      	movs	r2, #6
    3756:	4252      	negs	r2, r2
    3758:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    375a:	230f      	movs	r3, #15
    375c:	18fb      	adds	r3, r7, r3
    375e:	781b      	ldrb	r3, [r3, #0]
    3760:	2b7f      	cmp	r3, #127	; 0x7f
    3762:	d900      	bls.n	3766 <send+0x3a>
    3764:	e087      	b.n	3876 <send+0x14a>
    3766:	68bb      	ldr	r3, [r7, #8]
    3768:	2b00      	cmp	r3, #0
    376a:	d100      	bne.n	376e <send+0x42>
    376c:	e083      	b.n	3876 <send+0x14a>
    376e:	230c      	movs	r3, #12
    3770:	18fb      	adds	r3, r7, r3
    3772:	881a      	ldrh	r2, [r3, #0]
    3774:	23af      	movs	r3, #175	; 0xaf
    3776:	00db      	lsls	r3, r3, #3
    3778:	429a      	cmp	r2, r3
    377a:	d900      	bls.n	377e <send+0x52>
    377c:	e07b      	b.n	3876 <send+0x14a>
    377e:	230f      	movs	r3, #15
    3780:	18fb      	adds	r3, r7, r3
    3782:	781b      	ldrb	r3, [r3, #0]
    3784:	b25b      	sxtb	r3, r3
    3786:	4a40      	ldr	r2, [pc, #256]	; (3888 <send+0x15c>)
    3788:	011b      	lsls	r3, r3, #4
    378a:	18d3      	adds	r3, r2, r3
    378c:	330a      	adds	r3, #10
    378e:	781b      	ldrb	r3, [r3, #0]
    3790:	b2db      	uxtb	r3, r3
    3792:	2b01      	cmp	r3, #1
    3794:	d16f      	bne.n	3876 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3796:	2323      	movs	r3, #35	; 0x23
    3798:	18fb      	adds	r3, r7, r3
    379a:	2245      	movs	r2, #69	; 0x45
    379c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    379e:	2324      	movs	r3, #36	; 0x24
    37a0:	18fb      	adds	r3, r7, r3
    37a2:	2250      	movs	r2, #80	; 0x50
    37a4:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    37a6:	2310      	movs	r3, #16
    37a8:	18fb      	adds	r3, r7, r3
    37aa:	220f      	movs	r2, #15
    37ac:	18ba      	adds	r2, r7, r2
    37ae:	7812      	ldrb	r2, [r2, #0]
    37b0:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    37b2:	2310      	movs	r3, #16
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	220c      	movs	r2, #12
    37b8:	18ba      	adds	r2, r7, r2
    37ba:	8812      	ldrh	r2, [r2, #0]
    37bc:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    37be:	230f      	movs	r3, #15
    37c0:	18fb      	adds	r3, r7, r3
    37c2:	781b      	ldrb	r3, [r3, #0]
    37c4:	b25b      	sxtb	r3, r3
    37c6:	4a30      	ldr	r2, [pc, #192]	; (3888 <send+0x15c>)
    37c8:	011b      	lsls	r3, r3, #4
    37ca:	18d3      	adds	r3, r2, r3
    37cc:	3306      	adds	r3, #6
    37ce:	881b      	ldrh	r3, [r3, #0]
    37d0:	b29a      	uxth	r2, r3
    37d2:	2310      	movs	r3, #16
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    37d8:	230f      	movs	r3, #15
    37da:	18fb      	adds	r3, r7, r3
    37dc:	781b      	ldrb	r3, [r3, #0]
    37de:	b25b      	sxtb	r3, r3
    37e0:	2b06      	cmp	r3, #6
    37e2:	dd03      	ble.n	37ec <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    37e4:	2324      	movs	r3, #36	; 0x24
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	2244      	movs	r2, #68	; 0x44
    37ea:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    37ec:	230f      	movs	r3, #15
    37ee:	18fb      	adds	r3, r7, r3
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	b25b      	sxtb	r3, r3
    37f4:	4a24      	ldr	r2, [pc, #144]	; (3888 <send+0x15c>)
    37f6:	011b      	lsls	r3, r3, #4
    37f8:	18d3      	adds	r3, r2, r3
    37fa:	330b      	adds	r3, #11
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	b2db      	uxtb	r3, r3
    3800:	001a      	movs	r2, r3
    3802:	2301      	movs	r3, #1
    3804:	4013      	ands	r3, r2
    3806:	d00f      	beq.n	3828 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3808:	2323      	movs	r3, #35	; 0x23
    380a:	18fb      	adds	r3, r7, r3
    380c:	224c      	movs	r2, #76	; 0x4c
    380e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3810:	230f      	movs	r3, #15
    3812:	18fb      	adds	r3, r7, r3
    3814:	2200      	movs	r2, #0
    3816:	569a      	ldrsb	r2, [r3, r2]
    3818:	2324      	movs	r3, #36	; 0x24
    381a:	18fb      	adds	r3, r7, r3
    381c:	491a      	ldr	r1, [pc, #104]	; (3888 <send+0x15c>)
    381e:	0112      	lsls	r2, r2, #4
    3820:	188a      	adds	r2, r1, r2
    3822:	3208      	adds	r2, #8
    3824:	8812      	ldrh	r2, [r2, #0]
    3826:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3828:	2323      	movs	r3, #35	; 0x23
    382a:	18fb      	adds	r3, r7, r3
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	2280      	movs	r2, #128	; 0x80
    3830:	4252      	negs	r2, r2
    3832:	4313      	orrs	r3, r2
    3834:	b2d9      	uxtb	r1, r3
    3836:	2310      	movs	r3, #16
    3838:	18fa      	adds	r2, r7, r3
    383a:	2324      	movs	r3, #36	; 0x24
    383c:	18fb      	adds	r3, r7, r3
    383e:	881b      	ldrh	r3, [r3, #0]
    3840:	9302      	str	r3, [sp, #8]
    3842:	230c      	movs	r3, #12
    3844:	18fb      	adds	r3, r7, r3
    3846:	881b      	ldrh	r3, [r3, #0]
    3848:	9301      	str	r3, [sp, #4]
    384a:	68bb      	ldr	r3, [r7, #8]
    384c:	9300      	str	r3, [sp, #0]
    384e:	2310      	movs	r3, #16
    3850:	2002      	movs	r0, #2
    3852:	4c0e      	ldr	r4, [pc, #56]	; (388c <send+0x160>)
    3854:	47a0      	blx	r4
    3856:	0003      	movs	r3, r0
    3858:	001a      	movs	r2, r3
    385a:	2326      	movs	r3, #38	; 0x26
    385c:	18fb      	adds	r3, r7, r3
    385e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3860:	2326      	movs	r3, #38	; 0x26
    3862:	18fb      	adds	r3, r7, r3
    3864:	2200      	movs	r2, #0
    3866:	5e9b      	ldrsh	r3, [r3, r2]
    3868:	2b00      	cmp	r3, #0
    386a:	d004      	beq.n	3876 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    386c:	2326      	movs	r3, #38	; 0x26
    386e:	18fb      	adds	r3, r7, r3
    3870:	220e      	movs	r2, #14
    3872:	4252      	negs	r2, r2
    3874:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    3876:	2326      	movs	r3, #38	; 0x26
    3878:	18fb      	adds	r3, r7, r3
    387a:	2200      	movs	r2, #0
    387c:	5e9b      	ldrsh	r3, [r3, r2]
}
    387e:	0018      	movs	r0, r3
    3880:	46bd      	mov	sp, r7
    3882:	b00b      	add	sp, #44	; 0x2c
    3884:	bd90      	pop	{r4, r7, pc}
    3886:	46c0      	nop			; (mov r8, r8)
    3888:	20004508 	.word	0x20004508
    388c:	000013f5 	.word	0x000013f5

00003890 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3890:	b590      	push	{r4, r7, lr}
    3892:	b08d      	sub	sp, #52	; 0x34
    3894:	af04      	add	r7, sp, #16
    3896:	60b9      	str	r1, [r7, #8]
    3898:	0011      	movs	r1, r2
    389a:	607b      	str	r3, [r7, #4]
    389c:	230f      	movs	r3, #15
    389e:	18fb      	adds	r3, r7, r3
    38a0:	1c02      	adds	r2, r0, #0
    38a2:	701a      	strb	r2, [r3, #0]
    38a4:	230c      	movs	r3, #12
    38a6:	18fb      	adds	r3, r7, r3
    38a8:	1c0a      	adds	r2, r1, #0
    38aa:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    38ac:	231e      	movs	r3, #30
    38ae:	18fb      	adds	r3, r7, r3
    38b0:	2206      	movs	r2, #6
    38b2:	4252      	negs	r2, r2
    38b4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    38b6:	230f      	movs	r3, #15
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	781b      	ldrb	r3, [r3, #0]
    38bc:	2b7f      	cmp	r3, #127	; 0x7f
    38be:	d900      	bls.n	38c2 <recv+0x32>
    38c0:	e099      	b.n	39f6 <recv+0x166>
    38c2:	68bb      	ldr	r3, [r7, #8]
    38c4:	2b00      	cmp	r3, #0
    38c6:	d100      	bne.n	38ca <recv+0x3a>
    38c8:	e095      	b.n	39f6 <recv+0x166>
    38ca:	230c      	movs	r3, #12
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	881b      	ldrh	r3, [r3, #0]
    38d0:	2b00      	cmp	r3, #0
    38d2:	d100      	bne.n	38d6 <recv+0x46>
    38d4:	e08f      	b.n	39f6 <recv+0x166>
    38d6:	230f      	movs	r3, #15
    38d8:	18fb      	adds	r3, r7, r3
    38da:	781b      	ldrb	r3, [r3, #0]
    38dc:	b25b      	sxtb	r3, r3
    38de:	4a4a      	ldr	r2, [pc, #296]	; (3a08 <recv+0x178>)
    38e0:	011b      	lsls	r3, r3, #4
    38e2:	18d3      	adds	r3, r2, r3
    38e4:	330a      	adds	r3, #10
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	b2db      	uxtb	r3, r3
    38ea:	2b01      	cmp	r3, #1
    38ec:	d000      	beq.n	38f0 <recv+0x60>
    38ee:	e082      	b.n	39f6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    38f0:	231e      	movs	r3, #30
    38f2:	18fb      	adds	r3, r7, r3
    38f4:	2200      	movs	r2, #0
    38f6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    38f8:	230f      	movs	r3, #15
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	2200      	movs	r2, #0
    38fe:	569a      	ldrsb	r2, [r3, r2]
    3900:	4b41      	ldr	r3, [pc, #260]	; (3a08 <recv+0x178>)
    3902:	0112      	lsls	r2, r2, #4
    3904:	68b9      	ldr	r1, [r7, #8]
    3906:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3908:	230f      	movs	r3, #15
    390a:	18fb      	adds	r3, r7, r3
    390c:	781b      	ldrb	r3, [r3, #0]
    390e:	b25b      	sxtb	r3, r3
    3910:	4a3d      	ldr	r2, [pc, #244]	; (3a08 <recv+0x178>)
    3912:	011b      	lsls	r3, r3, #4
    3914:	18d3      	adds	r3, r2, r3
    3916:	3304      	adds	r3, #4
    3918:	220c      	movs	r2, #12
    391a:	18ba      	adds	r2, r7, r2
    391c:	8812      	ldrh	r2, [r2, #0]
    391e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    3920:	230f      	movs	r3, #15
    3922:	18fb      	adds	r3, r7, r3
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	b25b      	sxtb	r3, r3
    3928:	4a37      	ldr	r2, [pc, #220]	; (3a08 <recv+0x178>)
    392a:	011b      	lsls	r3, r3, #4
    392c:	18d3      	adds	r3, r2, r3
    392e:	330c      	adds	r3, #12
    3930:	781b      	ldrb	r3, [r3, #0]
    3932:	b2db      	uxtb	r3, r3
    3934:	2b00      	cmp	r3, #0
    3936:	d15e      	bne.n	39f6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3938:	231d      	movs	r3, #29
    393a:	18fb      	adds	r3, r7, r3
    393c:	2246      	movs	r2, #70	; 0x46
    393e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    3940:	230f      	movs	r3, #15
    3942:	18fb      	adds	r3, r7, r3
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	b25b      	sxtb	r3, r3
    3948:	4a2f      	ldr	r2, [pc, #188]	; (3a08 <recv+0x178>)
    394a:	011b      	lsls	r3, r3, #4
    394c:	18d3      	adds	r3, r2, r3
    394e:	330c      	adds	r3, #12
    3950:	2201      	movs	r2, #1
    3952:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3954:	230f      	movs	r3, #15
    3956:	18fb      	adds	r3, r7, r3
    3958:	781b      	ldrb	r3, [r3, #0]
    395a:	b25b      	sxtb	r3, r3
    395c:	4a2a      	ldr	r2, [pc, #168]	; (3a08 <recv+0x178>)
    395e:	011b      	lsls	r3, r3, #4
    3960:	18d3      	adds	r3, r2, r3
    3962:	330b      	adds	r3, #11
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	b2db      	uxtb	r3, r3
    3968:	001a      	movs	r2, r3
    396a:	2301      	movs	r3, #1
    396c:	4013      	ands	r3, r2
    396e:	d003      	beq.n	3978 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3970:	231d      	movs	r3, #29
    3972:	18fb      	adds	r3, r7, r3
    3974:	224d      	movs	r2, #77	; 0x4d
    3976:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	2b00      	cmp	r3, #0
    397c:	d105      	bne.n	398a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    397e:	2314      	movs	r3, #20
    3980:	18fb      	adds	r3, r7, r3
    3982:	2201      	movs	r2, #1
    3984:	4252      	negs	r2, r2
    3986:	601a      	str	r2, [r3, #0]
    3988:	e003      	b.n	3992 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    398a:	2314      	movs	r3, #20
    398c:	18fb      	adds	r3, r7, r3
    398e:	687a      	ldr	r2, [r7, #4]
    3990:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    3992:	2314      	movs	r3, #20
    3994:	18fb      	adds	r3, r7, r3
    3996:	220f      	movs	r2, #15
    3998:	18ba      	adds	r2, r7, r2
    399a:	7812      	ldrb	r2, [r2, #0]
    399c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    399e:	230f      	movs	r3, #15
    39a0:	18fb      	adds	r3, r7, r3
    39a2:	781b      	ldrb	r3, [r3, #0]
    39a4:	b25b      	sxtb	r3, r3
    39a6:	4a18      	ldr	r2, [pc, #96]	; (3a08 <recv+0x178>)
    39a8:	011b      	lsls	r3, r3, #4
    39aa:	18d3      	adds	r3, r2, r3
    39ac:	3306      	adds	r3, #6
    39ae:	881b      	ldrh	r3, [r3, #0]
    39b0:	b29a      	uxth	r2, r3
    39b2:	2314      	movs	r3, #20
    39b4:	18fb      	adds	r3, r7, r3
    39b6:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    39b8:	2314      	movs	r3, #20
    39ba:	18fa      	adds	r2, r7, r3
    39bc:	231d      	movs	r3, #29
    39be:	18fb      	adds	r3, r7, r3
    39c0:	7819      	ldrb	r1, [r3, #0]
    39c2:	2300      	movs	r3, #0
    39c4:	9302      	str	r3, [sp, #8]
    39c6:	2300      	movs	r3, #0
    39c8:	9301      	str	r3, [sp, #4]
    39ca:	2300      	movs	r3, #0
    39cc:	9300      	str	r3, [sp, #0]
    39ce:	2308      	movs	r3, #8
    39d0:	2002      	movs	r0, #2
    39d2:	4c0e      	ldr	r4, [pc, #56]	; (3a0c <recv+0x17c>)
    39d4:	47a0      	blx	r4
    39d6:	0003      	movs	r3, r0
    39d8:	001a      	movs	r2, r3
    39da:	231e      	movs	r3, #30
    39dc:	18fb      	adds	r3, r7, r3
    39de:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    39e0:	231e      	movs	r3, #30
    39e2:	18fb      	adds	r3, r7, r3
    39e4:	2200      	movs	r2, #0
    39e6:	5e9b      	ldrsh	r3, [r3, r2]
    39e8:	2b00      	cmp	r3, #0
    39ea:	d004      	beq.n	39f6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    39ec:	231e      	movs	r3, #30
    39ee:	18fb      	adds	r3, r7, r3
    39f0:	220e      	movs	r2, #14
    39f2:	4252      	negs	r2, r2
    39f4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    39f6:	231e      	movs	r3, #30
    39f8:	18fb      	adds	r3, r7, r3
    39fa:	2200      	movs	r2, #0
    39fc:	5e9b      	ldrsh	r3, [r3, r2]
}
    39fe:	0018      	movs	r0, r3
    3a00:	46bd      	mov	sp, r7
    3a02:	b009      	add	sp, #36	; 0x24
    3a04:	bd90      	pop	{r4, r7, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	20004508 	.word	0x20004508
    3a0c:	000013f5 	.word	0x000013f5

00003a10 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3a10:	b5b0      	push	{r4, r5, r7, lr}
    3a12:	b088      	sub	sp, #32
    3a14:	af04      	add	r7, sp, #16
    3a16:	0002      	movs	r2, r0
    3a18:	1dfb      	adds	r3, r7, #7
    3a1a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3a1c:	230f      	movs	r3, #15
    3a1e:	18fb      	adds	r3, r7, r3
    3a20:	22fa      	movs	r2, #250	; 0xfa
    3a22:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3a24:	1dfb      	adds	r3, r7, #7
    3a26:	781b      	ldrb	r3, [r3, #0]
    3a28:	2b7f      	cmp	r3, #127	; 0x7f
    3a2a:	d86a      	bhi.n	3b02 <close+0xf2>
    3a2c:	1dfb      	adds	r3, r7, #7
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	b25b      	sxtb	r3, r3
    3a32:	4a38      	ldr	r2, [pc, #224]	; (3b14 <close+0x104>)
    3a34:	011b      	lsls	r3, r3, #4
    3a36:	18d3      	adds	r3, r2, r3
    3a38:	330a      	adds	r3, #10
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	b2db      	uxtb	r3, r3
    3a3e:	2b01      	cmp	r3, #1
    3a40:	d15f      	bne.n	3b02 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3a42:	230e      	movs	r3, #14
    3a44:	18fb      	adds	r3, r7, r3
    3a46:	2249      	movs	r2, #73	; 0x49
    3a48:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3a4a:	2308      	movs	r3, #8
    3a4c:	18fb      	adds	r3, r7, r3
    3a4e:	1dfa      	adds	r2, r7, #7
    3a50:	7812      	ldrb	r2, [r2, #0]
    3a52:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3a54:	1dfb      	adds	r3, r7, #7
    3a56:	781b      	ldrb	r3, [r3, #0]
    3a58:	b25b      	sxtb	r3, r3
    3a5a:	4a2e      	ldr	r2, [pc, #184]	; (3b14 <close+0x104>)
    3a5c:	011b      	lsls	r3, r3, #4
    3a5e:	18d3      	adds	r3, r2, r3
    3a60:	3306      	adds	r3, #6
    3a62:	881b      	ldrh	r3, [r3, #0]
    3a64:	b29a      	uxth	r2, r3
    3a66:	2308      	movs	r3, #8
    3a68:	18fb      	adds	r3, r7, r3
    3a6a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3a6c:	1dfb      	adds	r3, r7, #7
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	b25b      	sxtb	r3, r3
    3a72:	4a28      	ldr	r2, [pc, #160]	; (3b14 <close+0x104>)
    3a74:	011b      	lsls	r3, r3, #4
    3a76:	18d3      	adds	r3, r2, r3
    3a78:	330a      	adds	r3, #10
    3a7a:	2200      	movs	r2, #0
    3a7c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    3a7e:	1dfb      	adds	r3, r7, #7
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	b25b      	sxtb	r3, r3
    3a84:	4a23      	ldr	r2, [pc, #140]	; (3b14 <close+0x104>)
    3a86:	011b      	lsls	r3, r3, #4
    3a88:	18d3      	adds	r3, r2, r3
    3a8a:	3306      	adds	r3, #6
    3a8c:	2200      	movs	r2, #0
    3a8e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3a90:	1dfb      	adds	r3, r7, #7
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	b25b      	sxtb	r3, r3
    3a96:	4a1f      	ldr	r2, [pc, #124]	; (3b14 <close+0x104>)
    3a98:	011b      	lsls	r3, r3, #4
    3a9a:	18d3      	adds	r3, r2, r3
    3a9c:	330b      	adds	r3, #11
    3a9e:	781b      	ldrb	r3, [r3, #0]
    3aa0:	b2db      	uxtb	r3, r3
    3aa2:	001a      	movs	r2, r3
    3aa4:	2301      	movs	r3, #1
    3aa6:	4013      	ands	r3, r2
    3aa8:	d003      	beq.n	3ab2 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3aaa:	230e      	movs	r3, #14
    3aac:	18fb      	adds	r3, r7, r3
    3aae:	224e      	movs	r2, #78	; 0x4e
    3ab0:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3ab2:	230f      	movs	r3, #15
    3ab4:	18fc      	adds	r4, r7, r3
    3ab6:	2308      	movs	r3, #8
    3ab8:	18fa      	adds	r2, r7, r3
    3aba:	230e      	movs	r3, #14
    3abc:	18fb      	adds	r3, r7, r3
    3abe:	7819      	ldrb	r1, [r3, #0]
    3ac0:	2300      	movs	r3, #0
    3ac2:	9302      	str	r3, [sp, #8]
    3ac4:	2300      	movs	r3, #0
    3ac6:	9301      	str	r3, [sp, #4]
    3ac8:	2300      	movs	r3, #0
    3aca:	9300      	str	r3, [sp, #0]
    3acc:	2304      	movs	r3, #4
    3ace:	2002      	movs	r0, #2
    3ad0:	4d11      	ldr	r5, [pc, #68]	; (3b18 <close+0x108>)
    3ad2:	47a8      	blx	r5
    3ad4:	0003      	movs	r3, r0
    3ad6:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3ad8:	230f      	movs	r3, #15
    3ada:	18fb      	adds	r3, r7, r3
    3adc:	781b      	ldrb	r3, [r3, #0]
    3ade:	b25b      	sxtb	r3, r3
    3ae0:	2b00      	cmp	r3, #0
    3ae2:	d003      	beq.n	3aec <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    3ae4:	230f      	movs	r3, #15
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	22f7      	movs	r2, #247	; 0xf7
    3aea:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3aec:	1dfb      	adds	r3, r7, #7
    3aee:	781b      	ldrb	r3, [r3, #0]
    3af0:	b25b      	sxtb	r3, r3
    3af2:	011a      	lsls	r2, r3, #4
    3af4:	4b07      	ldr	r3, [pc, #28]	; (3b14 <close+0x104>)
    3af6:	18d3      	adds	r3, r2, r3
    3af8:	2210      	movs	r2, #16
    3afa:	2100      	movs	r1, #0
    3afc:	0018      	movs	r0, r3
    3afe:	4b07      	ldr	r3, [pc, #28]	; (3b1c <close+0x10c>)
    3b00:	4798      	blx	r3
	}
	return s8Ret;
    3b02:	230f      	movs	r3, #15
    3b04:	18fb      	adds	r3, r7, r3
    3b06:	781b      	ldrb	r3, [r3, #0]
    3b08:	b25b      	sxtb	r3, r3
}
    3b0a:	0018      	movs	r0, r3
    3b0c:	46bd      	mov	sp, r7
    3b0e:	b004      	add	sp, #16
    3b10:	bdb0      	pop	{r4, r5, r7, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	20004508 	.word	0x20004508
    3b18:	000013f5 	.word	0x000013f5
    3b1c:	000011a9 	.word	0x000011a9

00003b20 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3b20:	b5b0      	push	{r4, r5, r7, lr}
    3b22:	b088      	sub	sp, #32
    3b24:	af04      	add	r7, sp, #16
    3b26:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3b28:	230f      	movs	r3, #15
    3b2a:	18fb      	adds	r3, r7, r3
    3b2c:	22fa      	movs	r2, #250	; 0xfa
    3b2e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3b30:	687b      	ldr	r3, [r7, #4]
    3b32:	0018      	movs	r0, r3
    3b34:	4b19      	ldr	r3, [pc, #100]	; (3b9c <gethostbyname+0x7c>)
    3b36:	4798      	blx	r3
    3b38:	0003      	movs	r3, r0
    3b3a:	001a      	movs	r2, r3
    3b3c:	230e      	movs	r3, #14
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3b42:	230e      	movs	r3, #14
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	781b      	ldrb	r3, [r3, #0]
    3b48:	2b40      	cmp	r3, #64	; 0x40
    3b4a:	d81f      	bhi.n	3b8c <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3b4c:	230e      	movs	r3, #14
    3b4e:	18fb      	adds	r3, r7, r3
    3b50:	781b      	ldrb	r3, [r3, #0]
    3b52:	b29b      	uxth	r3, r3
    3b54:	3301      	adds	r3, #1
    3b56:	b299      	uxth	r1, r3
    3b58:	230f      	movs	r3, #15
    3b5a:	18fc      	adds	r4, r7, r3
    3b5c:	687a      	ldr	r2, [r7, #4]
    3b5e:	2300      	movs	r3, #0
    3b60:	9302      	str	r3, [sp, #8]
    3b62:	2300      	movs	r3, #0
    3b64:	9301      	str	r3, [sp, #4]
    3b66:	2300      	movs	r3, #0
    3b68:	9300      	str	r3, [sp, #0]
    3b6a:	000b      	movs	r3, r1
    3b6c:	21ca      	movs	r1, #202	; 0xca
    3b6e:	2002      	movs	r0, #2
    3b70:	4d0b      	ldr	r5, [pc, #44]	; (3ba0 <gethostbyname+0x80>)
    3b72:	47a8      	blx	r5
    3b74:	0003      	movs	r3, r0
    3b76:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    3b78:	230f      	movs	r3, #15
    3b7a:	18fb      	adds	r3, r7, r3
    3b7c:	781b      	ldrb	r3, [r3, #0]
    3b7e:	b25b      	sxtb	r3, r3
    3b80:	2b00      	cmp	r3, #0
    3b82:	d003      	beq.n	3b8c <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    3b84:	230f      	movs	r3, #15
    3b86:	18fb      	adds	r3, r7, r3
    3b88:	22f7      	movs	r2, #247	; 0xf7
    3b8a:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    3b8c:	230f      	movs	r3, #15
    3b8e:	18fb      	adds	r3, r7, r3
    3b90:	781b      	ldrb	r3, [r3, #0]
    3b92:	b25b      	sxtb	r3, r3
}
    3b94:	0018      	movs	r0, r3
    3b96:	46bd      	mov	sp, r7
    3b98:	b004      	add	sp, #16
    3b9a:	bdb0      	pop	{r4, r5, r7, pc}
    3b9c:	000011e9 	.word	0x000011e9
    3ba0:	000013f5 	.word	0x000013f5

00003ba4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b082      	sub	sp, #8
    3ba8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3baa:	4b10      	ldr	r3, [pc, #64]	; (3bec <cpu_irq_enter_critical+0x48>)
    3bac:	681b      	ldr	r3, [r3, #0]
    3bae:	2b00      	cmp	r3, #0
    3bb0:	d112      	bne.n	3bd8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3bb2:	f3ef 8310 	mrs	r3, PRIMASK
    3bb6:	607b      	str	r3, [r7, #4]
  return(result);
    3bb8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d109      	bne.n	3bd2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    3bbe:	b672      	cpsid	i
    3bc0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3bc4:	4b0a      	ldr	r3, [pc, #40]	; (3bf0 <cpu_irq_enter_critical+0x4c>)
    3bc6:	2200      	movs	r2, #0
    3bc8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3bca:	4b0a      	ldr	r3, [pc, #40]	; (3bf4 <cpu_irq_enter_critical+0x50>)
    3bcc:	2201      	movs	r2, #1
    3bce:	701a      	strb	r2, [r3, #0]
    3bd0:	e002      	b.n	3bd8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3bd2:	4b08      	ldr	r3, [pc, #32]	; (3bf4 <cpu_irq_enter_critical+0x50>)
    3bd4:	2200      	movs	r2, #0
    3bd6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3bd8:	4b04      	ldr	r3, [pc, #16]	; (3bec <cpu_irq_enter_critical+0x48>)
    3bda:	681b      	ldr	r3, [r3, #0]
    3bdc:	1c5a      	adds	r2, r3, #1
    3bde:	4b03      	ldr	r3, [pc, #12]	; (3bec <cpu_irq_enter_critical+0x48>)
    3be0:	601a      	str	r2, [r3, #0]
}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	46bd      	mov	sp, r7
    3be6:	b002      	add	sp, #8
    3be8:	bd80      	pop	{r7, pc}
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	200000d8 	.word	0x200000d8
    3bf0:	20000014 	.word	0x20000014
    3bf4:	200000dc 	.word	0x200000dc

00003bf8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3bfc:	4b0b      	ldr	r3, [pc, #44]	; (3c2c <cpu_irq_leave_critical+0x34>)
    3bfe:	681b      	ldr	r3, [r3, #0]
    3c00:	1e5a      	subs	r2, r3, #1
    3c02:	4b0a      	ldr	r3, [pc, #40]	; (3c2c <cpu_irq_leave_critical+0x34>)
    3c04:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3c06:	4b09      	ldr	r3, [pc, #36]	; (3c2c <cpu_irq_leave_critical+0x34>)
    3c08:	681b      	ldr	r3, [r3, #0]
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d10a      	bne.n	3c24 <cpu_irq_leave_critical+0x2c>
    3c0e:	4b08      	ldr	r3, [pc, #32]	; (3c30 <cpu_irq_leave_critical+0x38>)
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	b2db      	uxtb	r3, r3
    3c14:	2b00      	cmp	r3, #0
    3c16:	d005      	beq.n	3c24 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3c18:	4b06      	ldr	r3, [pc, #24]	; (3c34 <cpu_irq_leave_critical+0x3c>)
    3c1a:	2201      	movs	r2, #1
    3c1c:	701a      	strb	r2, [r3, #0]
    3c1e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    3c22:	b662      	cpsie	i
	}
}
    3c24:	46c0      	nop			; (mov r8, r8)
    3c26:	46bd      	mov	sp, r7
    3c28:	bd80      	pop	{r7, pc}
    3c2a:	46c0      	nop			; (mov r8, r8)
    3c2c:	200000d8 	.word	0x200000d8
    3c30:	200000dc 	.word	0x200000dc
    3c34:	20000014 	.word	0x20000014

00003c38 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c38:	b580      	push	{r7, lr}
    3c3a:	b084      	sub	sp, #16
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	0002      	movs	r2, r0
    3c40:	1dfb      	adds	r3, r7, #7
    3c42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c44:	230f      	movs	r3, #15
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	1dfa      	adds	r2, r7, #7
    3c4a:	7812      	ldrb	r2, [r2, #0]
    3c4c:	09d2      	lsrs	r2, r2, #7
    3c4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c50:	230e      	movs	r3, #14
    3c52:	18fb      	adds	r3, r7, r3
    3c54:	1dfa      	adds	r2, r7, #7
    3c56:	7812      	ldrb	r2, [r2, #0]
    3c58:	0952      	lsrs	r2, r2, #5
    3c5a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c5c:	4b0d      	ldr	r3, [pc, #52]	; (3c94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c5e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    3c60:	230f      	movs	r3, #15
    3c62:	18fb      	adds	r3, r7, r3
    3c64:	781b      	ldrb	r3, [r3, #0]
    3c66:	2b00      	cmp	r3, #0
    3c68:	d10f      	bne.n	3c8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c6a:	230f      	movs	r3, #15
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	009b      	lsls	r3, r3, #2
    3c72:	2210      	movs	r2, #16
    3c74:	4694      	mov	ip, r2
    3c76:	44bc      	add	ip, r7
    3c78:	4463      	add	r3, ip
    3c7a:	3b08      	subs	r3, #8
    3c7c:	681a      	ldr	r2, [r3, #0]
    3c7e:	230e      	movs	r3, #14
    3c80:	18fb      	adds	r3, r7, r3
    3c82:	781b      	ldrb	r3, [r3, #0]
    3c84:	01db      	lsls	r3, r3, #7
    3c86:	18d3      	adds	r3, r2, r3
    3c88:	e000      	b.n	3c8c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3c8a:	2300      	movs	r3, #0
	}
}
    3c8c:	0018      	movs	r0, r3
    3c8e:	46bd      	mov	sp, r7
    3c90:	b004      	add	sp, #16
    3c92:	bd80      	pop	{r7, pc}
    3c94:	41004400 	.word	0x41004400

00003c98 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	b082      	sub	sp, #8
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	0002      	movs	r2, r0
    3ca0:	1dfb      	adds	r3, r7, #7
    3ca2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3ca4:	1dfb      	adds	r3, r7, #7
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	0018      	movs	r0, r3
    3caa:	4b03      	ldr	r3, [pc, #12]	; (3cb8 <port_get_group_from_gpio_pin+0x20>)
    3cac:	4798      	blx	r3
    3cae:	0003      	movs	r3, r0
}
    3cb0:	0018      	movs	r0, r3
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b002      	add	sp, #8
    3cb6:	bd80      	pop	{r7, pc}
    3cb8:	00003c39 	.word	0x00003c39

00003cbc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3cbc:	b580      	push	{r7, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	af00      	add	r7, sp, #0
    3cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3cc4:	687b      	ldr	r3, [r7, #4]
    3cc6:	2200      	movs	r2, #0
    3cc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	2201      	movs	r2, #1
    3cce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3cd0:	687b      	ldr	r3, [r7, #4]
    3cd2:	2200      	movs	r2, #0
    3cd4:	709a      	strb	r2, [r3, #2]
}
    3cd6:	46c0      	nop			; (mov r8, r8)
    3cd8:	46bd      	mov	sp, r7
    3cda:	b002      	add	sp, #8
    3cdc:	bd80      	pop	{r7, pc}
    3cde:	46c0      	nop			; (mov r8, r8)

00003ce0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3ce0:	b580      	push	{r7, lr}
    3ce2:	b084      	sub	sp, #16
    3ce4:	af00      	add	r7, sp, #0
    3ce6:	0002      	movs	r2, r0
    3ce8:	1dfb      	adds	r3, r7, #7
    3cea:	701a      	strb	r2, [r3, #0]
    3cec:	1dbb      	adds	r3, r7, #6
    3cee:	1c0a      	adds	r2, r1, #0
    3cf0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3cf2:	1dfb      	adds	r3, r7, #7
    3cf4:	781b      	ldrb	r3, [r3, #0]
    3cf6:	0018      	movs	r0, r3
    3cf8:	4b0d      	ldr	r3, [pc, #52]	; (3d30 <port_pin_set_output_level+0x50>)
    3cfa:	4798      	blx	r3
    3cfc:	0003      	movs	r3, r0
    3cfe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d00:	1dfb      	adds	r3, r7, #7
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	221f      	movs	r2, #31
    3d06:	4013      	ands	r3, r2
    3d08:	2201      	movs	r2, #1
    3d0a:	409a      	lsls	r2, r3
    3d0c:	0013      	movs	r3, r2
    3d0e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3d10:	1dbb      	adds	r3, r7, #6
    3d12:	781b      	ldrb	r3, [r3, #0]
    3d14:	2b00      	cmp	r3, #0
    3d16:	d003      	beq.n	3d20 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3d18:	68fb      	ldr	r3, [r7, #12]
    3d1a:	68ba      	ldr	r2, [r7, #8]
    3d1c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3d1e:	e002      	b.n	3d26 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3d20:	68fb      	ldr	r3, [r7, #12]
    3d22:	68ba      	ldr	r2, [r7, #8]
    3d24:	615a      	str	r2, [r3, #20]
	}
}
    3d26:	46c0      	nop			; (mov r8, r8)
    3d28:	46bd      	mov	sp, r7
    3d2a:	b004      	add	sp, #16
    3d2c:	bd80      	pop	{r7, pc}
    3d2e:	46c0      	nop			; (mov r8, r8)
    3d30:	00003c99 	.word	0x00003c99

00003d34 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3d34:	b580      	push	{r7, lr}
    3d36:	b082      	sub	sp, #8
    3d38:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3d3a:	1d3b      	adds	r3, r7, #4
    3d3c:	0018      	movs	r0, r3
    3d3e:	4b0e      	ldr	r3, [pc, #56]	; (3d78 <system_board_init+0x44>)
    3d40:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3d42:	1d3b      	adds	r3, r7, #4
    3d44:	2201      	movs	r2, #1
    3d46:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3d48:	1d3b      	adds	r3, r7, #4
    3d4a:	0019      	movs	r1, r3
    3d4c:	2017      	movs	r0, #23
    3d4e:	4b0b      	ldr	r3, [pc, #44]	; (3d7c <system_board_init+0x48>)
    3d50:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    3d52:	2101      	movs	r1, #1
    3d54:	2017      	movs	r0, #23
    3d56:	4b0a      	ldr	r3, [pc, #40]	; (3d80 <system_board_init+0x4c>)
    3d58:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3d5a:	1d3b      	adds	r3, r7, #4
    3d5c:	2200      	movs	r2, #0
    3d5e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3d60:	1d3b      	adds	r3, r7, #4
    3d62:	2201      	movs	r2, #1
    3d64:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3d66:	1d3b      	adds	r3, r7, #4
    3d68:	0019      	movs	r1, r3
    3d6a:	2037      	movs	r0, #55	; 0x37
    3d6c:	4b03      	ldr	r3, [pc, #12]	; (3d7c <system_board_init+0x48>)
    3d6e:	4798      	blx	r3
}
    3d70:	46c0      	nop			; (mov r8, r8)
    3d72:	46bd      	mov	sp, r7
    3d74:	b002      	add	sp, #8
    3d76:	bd80      	pop	{r7, pc}
    3d78:	00003cbd 	.word	0x00003cbd
    3d7c:	0000437d 	.word	0x0000437d
    3d80:	00003ce1 	.word	0x00003ce1

00003d84 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3d84:	b580      	push	{r7, lr}
    3d86:	b084      	sub	sp, #16
    3d88:	af00      	add	r7, sp, #0
    3d8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3d8c:	687b      	ldr	r3, [r7, #4]
    3d8e:	681b      	ldr	r3, [r3, #0]
    3d90:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3d92:	68fb      	ldr	r3, [r7, #12]
    3d94:	7e5b      	ldrb	r3, [r3, #25]
    3d96:	b2db      	uxtb	r3, r3
    3d98:	b25b      	sxtb	r3, r3
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	da01      	bge.n	3da2 <adc_is_syncing+0x1e>
		return true;
    3d9e:	2301      	movs	r3, #1
    3da0:	e000      	b.n	3da4 <adc_is_syncing+0x20>
	}

	return false;
    3da2:	2300      	movs	r3, #0
}
    3da4:	0018      	movs	r0, r3
    3da6:	46bd      	mov	sp, r7
    3da8:	b004      	add	sp, #16
    3daa:	bd80      	pop	{r7, pc}

00003dac <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3dac:	b580      	push	{r7, lr}
    3dae:	b084      	sub	sp, #16
    3db0:	af00      	add	r7, sp, #0
    3db2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	0018      	movs	r0, r3
    3dc0:	4b0b      	ldr	r3, [pc, #44]	; (3df0 <adc_start_conversion+0x44>)
    3dc2:	4798      	blx	r3
    3dc4:	1e03      	subs	r3, r0, #0
    3dc6:	d1f9      	bne.n	3dbc <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3dc8:	68fb      	ldr	r3, [r7, #12]
    3dca:	7b1b      	ldrb	r3, [r3, #12]
    3dcc:	b2db      	uxtb	r3, r3
    3dce:	2202      	movs	r2, #2
    3dd0:	4313      	orrs	r3, r2
    3dd2:	b2da      	uxtb	r2, r3
    3dd4:	68fb      	ldr	r3, [r7, #12]
    3dd6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3dd8:	46c0      	nop			; (mov r8, r8)
    3dda:	687b      	ldr	r3, [r7, #4]
    3ddc:	0018      	movs	r0, r3
    3dde:	4b04      	ldr	r3, [pc, #16]	; (3df0 <adc_start_conversion+0x44>)
    3de0:	4798      	blx	r3
    3de2:	1e03      	subs	r3, r0, #0
    3de4:	d1f9      	bne.n	3dda <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	46bd      	mov	sp, r7
    3dea:	b004      	add	sp, #16
    3dec:	bd80      	pop	{r7, pc}
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	00003d85 	.word	0x00003d85

00003df4 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b084      	sub	sp, #16
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	000a      	movs	r2, r1
    3dfe:	1cfb      	adds	r3, r7, #3
    3e00:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3e02:	687b      	ldr	r3, [r7, #4]
    3e04:	681b      	ldr	r3, [r3, #0]
    3e06:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3e08:	68fb      	ldr	r3, [r7, #12]
    3e0a:	1cfa      	adds	r2, r7, #3
    3e0c:	7812      	ldrb	r2, [r2, #0]
    3e0e:	759a      	strb	r2, [r3, #22]
}
    3e10:	46c0      	nop			; (mov r8, r8)
    3e12:	46bd      	mov	sp, r7
    3e14:	b004      	add	sp, #16
    3e16:	bd80      	pop	{r7, pc}

00003e18 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    3e18:	b580      	push	{r7, lr}
    3e1a:	b084      	sub	sp, #16
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	0002      	movs	r2, r0
    3e20:	1dfb      	adds	r3, r7, #7
    3e22:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    3e24:	1dfb      	adds	r3, r7, #7
    3e26:	781a      	ldrb	r2, [r3, #0]
    3e28:	4b44      	ldr	r3, [pc, #272]	; (3f3c <_adc_interrupt_handler+0x124>)
    3e2a:	0092      	lsls	r2, r2, #2
    3e2c:	58d3      	ldr	r3, [r2, r3]
    3e2e:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    3e30:	68fb      	ldr	r3, [r7, #12]
    3e32:	681b      	ldr	r3, [r3, #0]
    3e34:	7e1b      	ldrb	r3, [r3, #24]
    3e36:	b2db      	uxtb	r3, r3
    3e38:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    3e3a:	68bb      	ldr	r3, [r7, #8]
    3e3c:	2201      	movs	r2, #1
    3e3e:	4013      	ands	r3, r2
    3e40:	d045      	beq.n	3ece <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3e42:	68fb      	ldr	r3, [r7, #12]
    3e44:	7edb      	ldrb	r3, [r3, #27]
    3e46:	001a      	movs	r2, r3
    3e48:	2301      	movs	r3, #1
    3e4a:	4013      	ands	r3, r2
    3e4c:	d03f      	beq.n	3ece <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    3e4e:	68fb      	ldr	r3, [r7, #12]
    3e50:	7e9b      	ldrb	r3, [r3, #26]
    3e52:	001a      	movs	r2, r3
    3e54:	2301      	movs	r3, #1
    3e56:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    3e58:	d039      	beq.n	3ece <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3e5a:	68fb      	ldr	r3, [r7, #12]
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	2201      	movs	r2, #1
    3e60:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	68fb      	ldr	r3, [r7, #12]
    3e66:	0018      	movs	r0, r3
    3e68:	4b35      	ldr	r3, [pc, #212]	; (3f40 <_adc_interrupt_handler+0x128>)
    3e6a:	4798      	blx	r3
    3e6c:	1e03      	subs	r3, r0, #0
    3e6e:	d1f9      	bne.n	3e64 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3e70:	68fb      	ldr	r3, [r7, #12]
    3e72:	695b      	ldr	r3, [r3, #20]
    3e74:	1c99      	adds	r1, r3, #2
    3e76:	68fa      	ldr	r2, [r7, #12]
    3e78:	6151      	str	r1, [r2, #20]
    3e7a:	68fa      	ldr	r2, [r7, #12]
    3e7c:	6812      	ldr	r2, [r2, #0]
    3e7e:	8b52      	ldrh	r2, [r2, #26]
    3e80:	b292      	uxth	r2, r2
    3e82:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3e84:	68fb      	ldr	r3, [r7, #12]
    3e86:	8b1b      	ldrh	r3, [r3, #24]
    3e88:	b29b      	uxth	r3, r3
    3e8a:	3b01      	subs	r3, #1
    3e8c:	b29b      	uxth	r3, r3
    3e8e:	68fa      	ldr	r2, [r7, #12]
    3e90:	1c19      	adds	r1, r3, #0
    3e92:	8311      	strh	r1, [r2, #24]
    3e94:	2b00      	cmp	r3, #0
    3e96:	d008      	beq.n	3eaa <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    3e98:	68fb      	ldr	r3, [r7, #12]
    3e9a:	7f5b      	ldrb	r3, [r3, #29]
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	d016      	beq.n	3ece <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    3ea0:	68fb      	ldr	r3, [r7, #12]
    3ea2:	0018      	movs	r0, r3
    3ea4:	4b27      	ldr	r3, [pc, #156]	; (3f44 <_adc_interrupt_handler+0x12c>)
    3ea6:	4798      	blx	r3
    3ea8:	e011      	b.n	3ece <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3eaa:	68fb      	ldr	r3, [r7, #12]
    3eac:	7f1b      	ldrb	r3, [r3, #28]
    3eae:	b2db      	uxtb	r3, r3
    3eb0:	2b05      	cmp	r3, #5
    3eb2:	d10c      	bne.n	3ece <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3eb4:	68fb      	ldr	r3, [r7, #12]
    3eb6:	2200      	movs	r2, #0
    3eb8:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3eba:	68fb      	ldr	r3, [r7, #12]
    3ebc:	2101      	movs	r1, #1
    3ebe:	0018      	movs	r0, r3
    3ec0:	4b21      	ldr	r3, [pc, #132]	; (3f48 <_adc_interrupt_handler+0x130>)
    3ec2:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3ec4:	68fb      	ldr	r3, [r7, #12]
    3ec6:	689b      	ldr	r3, [r3, #8]
    3ec8:	68fa      	ldr	r2, [r7, #12]
    3eca:	0010      	movs	r0, r2
    3ecc:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3ece:	68bb      	ldr	r3, [r7, #8]
    3ed0:	2204      	movs	r2, #4
    3ed2:	4013      	ands	r3, r2
    3ed4:	d014      	beq.n	3f00 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3ed6:	68fb      	ldr	r3, [r7, #12]
    3ed8:	681b      	ldr	r3, [r3, #0]
    3eda:	2204      	movs	r2, #4
    3edc:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	7edb      	ldrb	r3, [r3, #27]
    3ee2:	001a      	movs	r2, r3
    3ee4:	2302      	movs	r3, #2
    3ee6:	4013      	ands	r3, r2
    3ee8:	d00a      	beq.n	3f00 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3eea:	68fb      	ldr	r3, [r7, #12]
    3eec:	7e9b      	ldrb	r3, [r3, #26]
    3eee:	001a      	movs	r2, r3
    3ef0:	2302      	movs	r3, #2
    3ef2:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3ef4:	d004      	beq.n	3f00 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	68db      	ldr	r3, [r3, #12]
    3efa:	68fa      	ldr	r2, [r7, #12]
    3efc:	0010      	movs	r0, r2
    3efe:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3f00:	68bb      	ldr	r3, [r7, #8]
    3f02:	2202      	movs	r2, #2
    3f04:	4013      	ands	r3, r2
    3f06:	d014      	beq.n	3f32 <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3f08:	68fb      	ldr	r3, [r7, #12]
    3f0a:	681b      	ldr	r3, [r3, #0]
    3f0c:	2202      	movs	r2, #2
    3f0e:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3f10:	68fb      	ldr	r3, [r7, #12]
    3f12:	7edb      	ldrb	r3, [r3, #27]
    3f14:	001a      	movs	r2, r3
    3f16:	2304      	movs	r3, #4
    3f18:	4013      	ands	r3, r2
    3f1a:	d00a      	beq.n	3f32 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3f1c:	68fb      	ldr	r3, [r7, #12]
    3f1e:	7e9b      	ldrb	r3, [r3, #26]
    3f20:	001a      	movs	r2, r3
    3f22:	2304      	movs	r3, #4
    3f24:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3f26:	d004      	beq.n	3f32 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    3f28:	68fb      	ldr	r3, [r7, #12]
    3f2a:	691b      	ldr	r3, [r3, #16]
    3f2c:	68fa      	ldr	r2, [r7, #12]
    3f2e:	0010      	movs	r0, r2
    3f30:	4798      	blx	r3
		}
	}
}
    3f32:	46c0      	nop			; (mov r8, r8)
    3f34:	46bd      	mov	sp, r7
    3f36:	b004      	add	sp, #16
    3f38:	bd80      	pop	{r7, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)
    3f3c:	200045c4 	.word	0x200045c4
    3f40:	00003d85 	.word	0x00003d85
    3f44:	00003dad 	.word	0x00003dad
    3f48:	00003df5 	.word	0x00003df5

00003f4c <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3f4c:	b580      	push	{r7, lr}
    3f4e:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    3f50:	2000      	movs	r0, #0
    3f52:	4b02      	ldr	r3, [pc, #8]	; (3f5c <ADC_Handler+0x10>)
    3f54:	4798      	blx	r3
}
    3f56:	46c0      	nop			; (mov r8, r8)
    3f58:	46bd      	mov	sp, r7
    3f5a:	bd80      	pop	{r7, pc}
    3f5c:	00003e19 	.word	0x00003e19

00003f60 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    3f60:	b580      	push	{r7, lr}
    3f62:	b084      	sub	sp, #16
    3f64:	af00      	add	r7, sp, #0
    3f66:	0002      	movs	r2, r0
    3f68:	1dfb      	adds	r3, r7, #7
    3f6a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3f6c:	230f      	movs	r3, #15
    3f6e:	18fb      	adds	r3, r7, r3
    3f70:	1dfa      	adds	r2, r7, #7
    3f72:	7812      	ldrb	r2, [r2, #0]
    3f74:	0952      	lsrs	r2, r2, #5
    3f76:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3f78:	230f      	movs	r3, #15
    3f7a:	18fb      	adds	r3, r7, r3
    3f7c:	781b      	ldrb	r3, [r3, #0]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d10c      	bne.n	3f9c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3f82:	4b09      	ldr	r3, [pc, #36]	; (3fa8 <_extint_get_eic_from_channel+0x48>)
    3f84:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3f86:	230f      	movs	r3, #15
    3f88:	18fb      	adds	r3, r7, r3
    3f8a:	781b      	ldrb	r3, [r3, #0]
    3f8c:	009b      	lsls	r3, r3, #2
    3f8e:	2210      	movs	r2, #16
    3f90:	4694      	mov	ip, r2
    3f92:	44bc      	add	ip, r7
    3f94:	4463      	add	r3, ip
    3f96:	3b08      	subs	r3, #8
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	e000      	b.n	3f9e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3f9c:	2300      	movs	r3, #0
	}
}
    3f9e:	0018      	movs	r0, r3
    3fa0:	46bd      	mov	sp, r7
    3fa2:	b004      	add	sp, #16
    3fa4:	bd80      	pop	{r7, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	40001800 	.word	0x40001800

00003fac <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3fac:	b580      	push	{r7, lr}
    3fae:	b084      	sub	sp, #16
    3fb0:	af00      	add	r7, sp, #0
    3fb2:	0002      	movs	r2, r0
    3fb4:	1dfb      	adds	r3, r7, #7
    3fb6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3fb8:	1dfb      	adds	r3, r7, #7
    3fba:	781b      	ldrb	r3, [r3, #0]
    3fbc:	0018      	movs	r0, r3
    3fbe:	4b0b      	ldr	r3, [pc, #44]	; (3fec <extint_chan_is_detected+0x40>)
    3fc0:	4798      	blx	r3
    3fc2:	0003      	movs	r3, r0
    3fc4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3fc6:	1dfb      	adds	r3, r7, #7
    3fc8:	781b      	ldrb	r3, [r3, #0]
    3fca:	221f      	movs	r2, #31
    3fcc:	4013      	ands	r3, r2
    3fce:	2201      	movs	r2, #1
    3fd0:	409a      	lsls	r2, r3
    3fd2:	0013      	movs	r3, r2
    3fd4:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3fd6:	68fb      	ldr	r3, [r7, #12]
    3fd8:	691b      	ldr	r3, [r3, #16]
    3fda:	68ba      	ldr	r2, [r7, #8]
    3fdc:	4013      	ands	r3, r2
    3fde:	1e5a      	subs	r2, r3, #1
    3fe0:	4193      	sbcs	r3, r2
    3fe2:	b2db      	uxtb	r3, r3
}
    3fe4:	0018      	movs	r0, r3
    3fe6:	46bd      	mov	sp, r7
    3fe8:	b004      	add	sp, #16
    3fea:	bd80      	pop	{r7, pc}
    3fec:	00003f61 	.word	0x00003f61

00003ff0 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    3ff0:	b580      	push	{r7, lr}
    3ff2:	b084      	sub	sp, #16
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	0002      	movs	r2, r0
    3ff8:	1dfb      	adds	r3, r7, #7
    3ffa:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3ffc:	1dfb      	adds	r3, r7, #7
    3ffe:	781b      	ldrb	r3, [r3, #0]
    4000:	0018      	movs	r0, r3
    4002:	4b09      	ldr	r3, [pc, #36]	; (4028 <extint_chan_clear_detected+0x38>)
    4004:	4798      	blx	r3
    4006:	0003      	movs	r3, r0
    4008:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    400a:	1dfb      	adds	r3, r7, #7
    400c:	781b      	ldrb	r3, [r3, #0]
    400e:	221f      	movs	r2, #31
    4010:	4013      	ands	r3, r2
    4012:	2201      	movs	r2, #1
    4014:	409a      	lsls	r2, r3
    4016:	0013      	movs	r3, r2
    4018:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    401a:	68fb      	ldr	r3, [r7, #12]
    401c:	68ba      	ldr	r2, [r7, #8]
    401e:	611a      	str	r2, [r3, #16]
}
    4020:	46c0      	nop			; (mov r8, r8)
    4022:	46bd      	mov	sp, r7
    4024:	b004      	add	sp, #16
    4026:	bd80      	pop	{r7, pc}
    4028:	00003f61 	.word	0x00003f61

0000402c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    402c:	b580      	push	{r7, lr}
    402e:	b084      	sub	sp, #16
    4030:	af00      	add	r7, sp, #0
    4032:	0002      	movs	r2, r0
    4034:	1dfb      	adds	r3, r7, #7
    4036:	701a      	strb	r2, [r3, #0]
    4038:	1dbb      	adds	r3, r7, #6
    403a:	1c0a      	adds	r2, r1, #0
    403c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    403e:	1dbb      	adds	r3, r7, #6
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	2b00      	cmp	r3, #0
    4044:	d10e      	bne.n	4064 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    4046:	1dfb      	adds	r3, r7, #7
    4048:	781b      	ldrb	r3, [r3, #0]
    404a:	0018      	movs	r0, r3
    404c:	4b08      	ldr	r3, [pc, #32]	; (4070 <extint_chan_enable_callback+0x44>)
    404e:	4798      	blx	r3
    4050:	0003      	movs	r3, r0
    4052:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    4054:	1dfb      	adds	r3, r7, #7
    4056:	781b      	ldrb	r3, [r3, #0]
    4058:	2201      	movs	r2, #1
    405a:	409a      	lsls	r2, r3
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4060:	2300      	movs	r3, #0
    4062:	e000      	b.n	4066 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4064:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4066:	0018      	movs	r0, r3
    4068:	46bd      	mov	sp, r7
    406a:	b004      	add	sp, #16
    406c:	bd80      	pop	{r7, pc}
    406e:	46c0      	nop			; (mov r8, r8)
    4070:	00003f61 	.word	0x00003f61

00004074 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4074:	b580      	push	{r7, lr}
    4076:	b084      	sub	sp, #16
    4078:	af00      	add	r7, sp, #0
    407a:	0002      	movs	r2, r0
    407c:	1dfb      	adds	r3, r7, #7
    407e:	701a      	strb	r2, [r3, #0]
    4080:	1dbb      	adds	r3, r7, #6
    4082:	1c0a      	adds	r2, r1, #0
    4084:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4086:	1dbb      	adds	r3, r7, #6
    4088:	781b      	ldrb	r3, [r3, #0]
    408a:	2b00      	cmp	r3, #0
    408c:	d10e      	bne.n	40ac <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    408e:	1dfb      	adds	r3, r7, #7
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	0018      	movs	r0, r3
    4094:	4b08      	ldr	r3, [pc, #32]	; (40b8 <extint_chan_disable_callback+0x44>)
    4096:	4798      	blx	r3
    4098:	0003      	movs	r3, r0
    409a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    409c:	1dfb      	adds	r3, r7, #7
    409e:	781b      	ldrb	r3, [r3, #0]
    40a0:	2201      	movs	r2, #1
    40a2:	409a      	lsls	r2, r3
    40a4:	68fb      	ldr	r3, [r7, #12]
    40a6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    40a8:	2300      	movs	r3, #0
    40aa:	e000      	b.n	40ae <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    40ac:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    40ae:	0018      	movs	r0, r3
    40b0:	46bd      	mov	sp, r7
    40b2:	b004      	add	sp, #16
    40b4:	bd80      	pop	{r7, pc}
    40b6:	46c0      	nop			; (mov r8, r8)
    40b8:	00003f61 	.word	0x00003f61

000040bc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    40bc:	b580      	push	{r7, lr}
    40be:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    40c0:	4b15      	ldr	r3, [pc, #84]	; (4118 <EIC_Handler+0x5c>)
    40c2:	2200      	movs	r2, #0
    40c4:	701a      	strb	r2, [r3, #0]
    40c6:	e020      	b.n	410a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    40c8:	4b13      	ldr	r3, [pc, #76]	; (4118 <EIC_Handler+0x5c>)
    40ca:	781b      	ldrb	r3, [r3, #0]
    40cc:	0018      	movs	r0, r3
    40ce:	4b13      	ldr	r3, [pc, #76]	; (411c <EIC_Handler+0x60>)
    40d0:	4798      	blx	r3
    40d2:	1e03      	subs	r3, r0, #0
    40d4:	d013      	beq.n	40fe <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    40d6:	4b10      	ldr	r3, [pc, #64]	; (4118 <EIC_Handler+0x5c>)
    40d8:	781b      	ldrb	r3, [r3, #0]
    40da:	0018      	movs	r0, r3
    40dc:	4b10      	ldr	r3, [pc, #64]	; (4120 <EIC_Handler+0x64>)
    40de:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    40e0:	4b0d      	ldr	r3, [pc, #52]	; (4118 <EIC_Handler+0x5c>)
    40e2:	781b      	ldrb	r3, [r3, #0]
    40e4:	001a      	movs	r2, r3
    40e6:	4b0f      	ldr	r3, [pc, #60]	; (4124 <EIC_Handler+0x68>)
    40e8:	0092      	lsls	r2, r2, #2
    40ea:	58d3      	ldr	r3, [r2, r3]
    40ec:	2b00      	cmp	r3, #0
    40ee:	d006      	beq.n	40fe <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    40f0:	4b09      	ldr	r3, [pc, #36]	; (4118 <EIC_Handler+0x5c>)
    40f2:	781b      	ldrb	r3, [r3, #0]
    40f4:	001a      	movs	r2, r3
    40f6:	4b0b      	ldr	r3, [pc, #44]	; (4124 <EIC_Handler+0x68>)
    40f8:	0092      	lsls	r2, r2, #2
    40fa:	58d3      	ldr	r3, [r2, r3]
    40fc:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    40fe:	4b06      	ldr	r3, [pc, #24]	; (4118 <EIC_Handler+0x5c>)
    4100:	781b      	ldrb	r3, [r3, #0]
    4102:	3301      	adds	r3, #1
    4104:	b2da      	uxtb	r2, r3
    4106:	4b04      	ldr	r3, [pc, #16]	; (4118 <EIC_Handler+0x5c>)
    4108:	701a      	strb	r2, [r3, #0]
    410a:	4b03      	ldr	r3, [pc, #12]	; (4118 <EIC_Handler+0x5c>)
    410c:	781b      	ldrb	r3, [r3, #0]
    410e:	2b0f      	cmp	r3, #15
    4110:	d9da      	bls.n	40c8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	46bd      	mov	sp, r7
    4116:	bd80      	pop	{r7, pc}
    4118:	200045c8 	.word	0x200045c8
    411c:	00003fad 	.word	0x00003fad
    4120:	00003ff1 	.word	0x00003ff1
    4124:	200045cc 	.word	0x200045cc

00004128 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4128:	b580      	push	{r7, lr}
    412a:	b082      	sub	sp, #8
    412c:	af00      	add	r7, sp, #0
    412e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	2200      	movs	r2, #0
    4134:	701a      	strb	r2, [r3, #0]
}
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	46bd      	mov	sp, r7
    413a:	b002      	add	sp, #8
    413c:	bd80      	pop	{r7, pc}
    413e:	46c0      	nop			; (mov r8, r8)

00004140 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4140:	b580      	push	{r7, lr}
    4142:	b082      	sub	sp, #8
    4144:	af00      	add	r7, sp, #0
    4146:	0002      	movs	r2, r0
    4148:	6039      	str	r1, [r7, #0]
    414a:	1dfb      	adds	r3, r7, #7
    414c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    414e:	1dfb      	adds	r3, r7, #7
    4150:	781b      	ldrb	r3, [r3, #0]
    4152:	2b01      	cmp	r3, #1
    4154:	d00a      	beq.n	416c <system_apb_clock_set_mask+0x2c>
    4156:	2b02      	cmp	r3, #2
    4158:	d00f      	beq.n	417a <system_apb_clock_set_mask+0x3a>
    415a:	2b00      	cmp	r3, #0
    415c:	d114      	bne.n	4188 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    415e:	4b0e      	ldr	r3, [pc, #56]	; (4198 <system_apb_clock_set_mask+0x58>)
    4160:	4a0d      	ldr	r2, [pc, #52]	; (4198 <system_apb_clock_set_mask+0x58>)
    4162:	6991      	ldr	r1, [r2, #24]
    4164:	683a      	ldr	r2, [r7, #0]
    4166:	430a      	orrs	r2, r1
    4168:	619a      	str	r2, [r3, #24]
			break;
    416a:	e00f      	b.n	418c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    416c:	4b0a      	ldr	r3, [pc, #40]	; (4198 <system_apb_clock_set_mask+0x58>)
    416e:	4a0a      	ldr	r2, [pc, #40]	; (4198 <system_apb_clock_set_mask+0x58>)
    4170:	69d1      	ldr	r1, [r2, #28]
    4172:	683a      	ldr	r2, [r7, #0]
    4174:	430a      	orrs	r2, r1
    4176:	61da      	str	r2, [r3, #28]
			break;
    4178:	e008      	b.n	418c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    417a:	4b07      	ldr	r3, [pc, #28]	; (4198 <system_apb_clock_set_mask+0x58>)
    417c:	4a06      	ldr	r2, [pc, #24]	; (4198 <system_apb_clock_set_mask+0x58>)
    417e:	6a11      	ldr	r1, [r2, #32]
    4180:	683a      	ldr	r2, [r7, #0]
    4182:	430a      	orrs	r2, r1
    4184:	621a      	str	r2, [r3, #32]
			break;
    4186:	e001      	b.n	418c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4188:	2317      	movs	r3, #23
    418a:	e000      	b.n	418e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    418c:	2300      	movs	r3, #0
}
    418e:	0018      	movs	r0, r3
    4190:	46bd      	mov	sp, r7
    4192:	b002      	add	sp, #8
    4194:	bd80      	pop	{r7, pc}
    4196:	46c0      	nop			; (mov r8, r8)
    4198:	40000400 	.word	0x40000400

0000419c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    419c:	b580      	push	{r7, lr}
    419e:	b082      	sub	sp, #8
    41a0:	af00      	add	r7, sp, #0
    41a2:	0002      	movs	r2, r0
    41a4:	1dfb      	adds	r3, r7, #7
    41a6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    41a8:	4b06      	ldr	r3, [pc, #24]	; (41c4 <system_interrupt_enable+0x28>)
    41aa:	1dfa      	adds	r2, r7, #7
    41ac:	7812      	ldrb	r2, [r2, #0]
    41ae:	0011      	movs	r1, r2
    41b0:	221f      	movs	r2, #31
    41b2:	400a      	ands	r2, r1
    41b4:	2101      	movs	r1, #1
    41b6:	4091      	lsls	r1, r2
    41b8:	000a      	movs	r2, r1
    41ba:	601a      	str	r2, [r3, #0]
}
    41bc:	46c0      	nop			; (mov r8, r8)
    41be:	46bd      	mov	sp, r7
    41c0:	b002      	add	sp, #8
    41c2:	bd80      	pop	{r7, pc}
    41c4:	e000e100 	.word	0xe000e100

000041c8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    41ce:	4b0f      	ldr	r3, [pc, #60]	; (420c <extint_is_syncing+0x44>)
    41d0:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    41d2:	2300      	movs	r3, #0
    41d4:	607b      	str	r3, [r7, #4]
    41d6:	e011      	b.n	41fc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    41d8:	687b      	ldr	r3, [r7, #4]
    41da:	009b      	lsls	r3, r3, #2
    41dc:	2208      	movs	r2, #8
    41de:	4694      	mov	ip, r2
    41e0:	44bc      	add	ip, r7
    41e2:	4463      	add	r3, ip
    41e4:	3b08      	subs	r3, #8
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	785b      	ldrb	r3, [r3, #1]
    41ea:	b2db      	uxtb	r3, r3
    41ec:	b25b      	sxtb	r3, r3
    41ee:	2b00      	cmp	r3, #0
    41f0:	da01      	bge.n	41f6 <extint_is_syncing+0x2e>
			return true;
    41f2:	2301      	movs	r3, #1
    41f4:	e006      	b.n	4204 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    41f6:	687b      	ldr	r3, [r7, #4]
    41f8:	3301      	adds	r3, #1
    41fa:	607b      	str	r3, [r7, #4]
    41fc:	687b      	ldr	r3, [r7, #4]
    41fe:	2b00      	cmp	r3, #0
    4200:	d0ea      	beq.n	41d8 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    4202:	2300      	movs	r3, #0
}
    4204:	0018      	movs	r0, r3
    4206:	46bd      	mov	sp, r7
    4208:	b002      	add	sp, #8
    420a:	bd80      	pop	{r7, pc}
    420c:	40001800 	.word	0x40001800

00004210 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4210:	b580      	push	{r7, lr}
    4212:	b084      	sub	sp, #16
    4214:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4216:	4b2d      	ldr	r3, [pc, #180]	; (42cc <_system_extint_init+0xbc>)
    4218:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    421a:	2140      	movs	r1, #64	; 0x40
    421c:	2000      	movs	r0, #0
    421e:	4b2c      	ldr	r3, [pc, #176]	; (42d0 <_system_extint_init+0xc0>)
    4220:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4222:	003b      	movs	r3, r7
    4224:	0018      	movs	r0, r3
    4226:	4b2b      	ldr	r3, [pc, #172]	; (42d4 <_system_extint_init+0xc4>)
    4228:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    422a:	003b      	movs	r3, r7
    422c:	2200      	movs	r2, #0
    422e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4230:	003b      	movs	r3, r7
    4232:	0019      	movs	r1, r3
    4234:	2005      	movs	r0, #5
    4236:	4b28      	ldr	r3, [pc, #160]	; (42d8 <_system_extint_init+0xc8>)
    4238:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    423a:	2005      	movs	r0, #5
    423c:	4b27      	ldr	r3, [pc, #156]	; (42dc <_system_extint_init+0xcc>)
    423e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4240:	2300      	movs	r3, #0
    4242:	60fb      	str	r3, [r7, #12]
    4244:	e018      	b.n	4278 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4246:	68fb      	ldr	r3, [r7, #12]
    4248:	009b      	lsls	r3, r3, #2
    424a:	2210      	movs	r2, #16
    424c:	4694      	mov	ip, r2
    424e:	44bc      	add	ip, r7
    4250:	4463      	add	r3, ip
    4252:	3b0c      	subs	r3, #12
    4254:	681a      	ldr	r2, [r3, #0]
    4256:	68fb      	ldr	r3, [r7, #12]
    4258:	009b      	lsls	r3, r3, #2
    425a:	2110      	movs	r1, #16
    425c:	468c      	mov	ip, r1
    425e:	44bc      	add	ip, r7
    4260:	4463      	add	r3, ip
    4262:	3b0c      	subs	r3, #12
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	781b      	ldrb	r3, [r3, #0]
    4268:	b2db      	uxtb	r3, r3
    426a:	2101      	movs	r1, #1
    426c:	430b      	orrs	r3, r1
    426e:	b2db      	uxtb	r3, r3
    4270:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4272:	68fb      	ldr	r3, [r7, #12]
    4274:	3301      	adds	r3, #1
    4276:	60fb      	str	r3, [r7, #12]
    4278:	68fb      	ldr	r3, [r7, #12]
    427a:	2b00      	cmp	r3, #0
    427c:	d0e3      	beq.n	4246 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    427e:	46c0      	nop			; (mov r8, r8)
    4280:	4b17      	ldr	r3, [pc, #92]	; (42e0 <_system_extint_init+0xd0>)
    4282:	4798      	blx	r3
    4284:	1e03      	subs	r3, r0, #0
    4286:	d1fb      	bne.n	4280 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4288:	230b      	movs	r3, #11
    428a:	18fb      	adds	r3, r7, r3
    428c:	2200      	movs	r2, #0
    428e:	701a      	strb	r2, [r3, #0]
    4290:	e00d      	b.n	42ae <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    4292:	230b      	movs	r3, #11
    4294:	18fb      	adds	r3, r7, r3
    4296:	781a      	ldrb	r2, [r3, #0]
    4298:	4b12      	ldr	r3, [pc, #72]	; (42e4 <_system_extint_init+0xd4>)
    429a:	0092      	lsls	r2, r2, #2
    429c:	2100      	movs	r1, #0
    429e:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    42a0:	230b      	movs	r3, #11
    42a2:	18fb      	adds	r3, r7, r3
    42a4:	781a      	ldrb	r2, [r3, #0]
    42a6:	230b      	movs	r3, #11
    42a8:	18fb      	adds	r3, r7, r3
    42aa:	3201      	adds	r2, #1
    42ac:	701a      	strb	r2, [r3, #0]
    42ae:	230b      	movs	r3, #11
    42b0:	18fb      	adds	r3, r7, r3
    42b2:	781b      	ldrb	r3, [r3, #0]
    42b4:	2b0f      	cmp	r3, #15
    42b6:	d9ec      	bls.n	4292 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    42b8:	2004      	movs	r0, #4
    42ba:	4b0b      	ldr	r3, [pc, #44]	; (42e8 <_system_extint_init+0xd8>)
    42bc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    42be:	4b0b      	ldr	r3, [pc, #44]	; (42ec <_system_extint_init+0xdc>)
    42c0:	4798      	blx	r3
}
    42c2:	46c0      	nop			; (mov r8, r8)
    42c4:	46bd      	mov	sp, r7
    42c6:	b004      	add	sp, #16
    42c8:	bd80      	pop	{r7, pc}
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	40001800 	.word	0x40001800
    42d0:	00004141 	.word	0x00004141
    42d4:	00004129 	.word	0x00004129
    42d8:	00007101 	.word	0x00007101
    42dc:	00007145 	.word	0x00007145
    42e0:	000041c9 	.word	0x000041c9
    42e4:	200045cc 	.word	0x200045cc
    42e8:	0000419d 	.word	0x0000419d
    42ec:	000042f1 	.word	0x000042f1

000042f0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    42f0:	b580      	push	{r7, lr}
    42f2:	b082      	sub	sp, #8
    42f4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    42f6:	4b15      	ldr	r3, [pc, #84]	; (434c <_extint_enable+0x5c>)
    42f8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    42fa:	2300      	movs	r3, #0
    42fc:	607b      	str	r3, [r7, #4]
    42fe:	e018      	b.n	4332 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	009b      	lsls	r3, r3, #2
    4304:	2208      	movs	r2, #8
    4306:	4694      	mov	ip, r2
    4308:	44bc      	add	ip, r7
    430a:	4463      	add	r3, ip
    430c:	3b08      	subs	r3, #8
    430e:	681a      	ldr	r2, [r3, #0]
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	009b      	lsls	r3, r3, #2
    4314:	2108      	movs	r1, #8
    4316:	468c      	mov	ip, r1
    4318:	44bc      	add	ip, r7
    431a:	4463      	add	r3, ip
    431c:	3b08      	subs	r3, #8
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	b2db      	uxtb	r3, r3
    4324:	2102      	movs	r1, #2
    4326:	430b      	orrs	r3, r1
    4328:	b2db      	uxtb	r3, r3
    432a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	3301      	adds	r3, #1
    4330:	607b      	str	r3, [r7, #4]
    4332:	687b      	ldr	r3, [r7, #4]
    4334:	2b00      	cmp	r3, #0
    4336:	d0e3      	beq.n	4300 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4338:	46c0      	nop			; (mov r8, r8)
    433a:	4b05      	ldr	r3, [pc, #20]	; (4350 <_extint_enable+0x60>)
    433c:	4798      	blx	r3
    433e:	1e03      	subs	r3, r0, #0
    4340:	d1fb      	bne.n	433a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	46bd      	mov	sp, r7
    4346:	b002      	add	sp, #8
    4348:	bd80      	pop	{r7, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	40001800 	.word	0x40001800
    4350:	000041c9 	.word	0x000041c9

00004354 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4354:	b580      	push	{r7, lr}
    4356:	b082      	sub	sp, #8
    4358:	af00      	add	r7, sp, #0
    435a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	2280      	movs	r2, #128	; 0x80
    4360:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	2200      	movs	r2, #0
    4366:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	2201      	movs	r2, #1
    436c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	2200      	movs	r2, #0
    4372:	70da      	strb	r2, [r3, #3]
}
    4374:	46c0      	nop			; (mov r8, r8)
    4376:	46bd      	mov	sp, r7
    4378:	b002      	add	sp, #8
    437a:	bd80      	pop	{r7, pc}

0000437c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    437c:	b580      	push	{r7, lr}
    437e:	b084      	sub	sp, #16
    4380:	af00      	add	r7, sp, #0
    4382:	0002      	movs	r2, r0
    4384:	6039      	str	r1, [r7, #0]
    4386:	1dfb      	adds	r3, r7, #7
    4388:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    438a:	230c      	movs	r3, #12
    438c:	18fb      	adds	r3, r7, r3
    438e:	0018      	movs	r0, r3
    4390:	4b10      	ldr	r3, [pc, #64]	; (43d4 <port_pin_set_config+0x58>)
    4392:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4394:	230c      	movs	r3, #12
    4396:	18fb      	adds	r3, r7, r3
    4398:	2280      	movs	r2, #128	; 0x80
    439a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    439c:	683b      	ldr	r3, [r7, #0]
    439e:	781a      	ldrb	r2, [r3, #0]
    43a0:	230c      	movs	r3, #12
    43a2:	18fb      	adds	r3, r7, r3
    43a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    43a6:	683b      	ldr	r3, [r7, #0]
    43a8:	785a      	ldrb	r2, [r3, #1]
    43aa:	230c      	movs	r3, #12
    43ac:	18fb      	adds	r3, r7, r3
    43ae:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    43b0:	683b      	ldr	r3, [r7, #0]
    43b2:	789a      	ldrb	r2, [r3, #2]
    43b4:	230c      	movs	r3, #12
    43b6:	18fb      	adds	r3, r7, r3
    43b8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    43ba:	230c      	movs	r3, #12
    43bc:	18fa      	adds	r2, r7, r3
    43be:	1dfb      	adds	r3, r7, #7
    43c0:	781b      	ldrb	r3, [r3, #0]
    43c2:	0011      	movs	r1, r2
    43c4:	0018      	movs	r0, r3
    43c6:	4b04      	ldr	r3, [pc, #16]	; (43d8 <port_pin_set_config+0x5c>)
    43c8:	4798      	blx	r3
}
    43ca:	46c0      	nop			; (mov r8, r8)
    43cc:	46bd      	mov	sp, r7
    43ce:	b004      	add	sp, #16
    43d0:	bd80      	pop	{r7, pc}
    43d2:	46c0      	nop			; (mov r8, r8)
    43d4:	00004355 	.word	0x00004355
    43d8:	000073ed 	.word	0x000073ed

000043dc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    43dc:	b580      	push	{r7, lr}
    43de:	b086      	sub	sp, #24
    43e0:	af00      	add	r7, sp, #0
    43e2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    43e4:	4b28      	ldr	r3, [pc, #160]	; (4488 <_rtc_interrupt_handler+0xac>)
    43e6:	687a      	ldr	r2, [r7, #4]
    43e8:	0092      	lsls	r2, r2, #2
    43ea:	58d3      	ldr	r3, [r2, r3]
    43ec:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    43ee:	697b      	ldr	r3, [r7, #20]
    43f0:	681b      	ldr	r3, [r3, #0]
    43f2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    43f4:	230e      	movs	r3, #14
    43f6:	18fb      	adds	r3, r7, r3
    43f8:	697a      	ldr	r2, [r7, #20]
    43fa:	8a52      	ldrh	r2, [r2, #18]
    43fc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    43fe:	697b      	ldr	r3, [r7, #20]
    4400:	8a1b      	ldrh	r3, [r3, #16]
    4402:	b29a      	uxth	r2, r3
    4404:	230e      	movs	r3, #14
    4406:	18fb      	adds	r3, r7, r3
    4408:	210e      	movs	r1, #14
    440a:	1879      	adds	r1, r7, r1
    440c:	8809      	ldrh	r1, [r1, #0]
    440e:	400a      	ands	r2, r1
    4410:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4412:	693b      	ldr	r3, [r7, #16]
    4414:	7a1b      	ldrb	r3, [r3, #8]
    4416:	b2da      	uxtb	r2, r3
    4418:	230c      	movs	r3, #12
    441a:	18fb      	adds	r3, r7, r3
    441c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    441e:	693b      	ldr	r3, [r7, #16]
    4420:	79db      	ldrb	r3, [r3, #7]
    4422:	b2db      	uxtb	r3, r3
    4424:	b29a      	uxth	r2, r3
    4426:	230c      	movs	r3, #12
    4428:	18fb      	adds	r3, r7, r3
    442a:	210c      	movs	r1, #12
    442c:	1879      	adds	r1, r7, r1
    442e:	8809      	ldrh	r1, [r1, #0]
    4430:	400a      	ands	r2, r1
    4432:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    4434:	230c      	movs	r3, #12
    4436:	18fb      	adds	r3, r7, r3
    4438:	881b      	ldrh	r3, [r3, #0]
    443a:	2280      	movs	r2, #128	; 0x80
    443c:	4013      	ands	r3, r2
    443e:	d00c      	beq.n	445a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    4440:	230e      	movs	r3, #14
    4442:	18fb      	adds	r3, r7, r3
    4444:	881b      	ldrh	r3, [r3, #0]
    4446:	2202      	movs	r2, #2
    4448:	4013      	ands	r3, r2
    444a:	d002      	beq.n	4452 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    444c:	697b      	ldr	r3, [r7, #20]
    444e:	68db      	ldr	r3, [r3, #12]
    4450:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4452:	693b      	ldr	r3, [r7, #16]
    4454:	2280      	movs	r2, #128	; 0x80
    4456:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    4458:	e011      	b.n	447e <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    445a:	230c      	movs	r3, #12
    445c:	18fb      	adds	r3, r7, r3
    445e:	881b      	ldrh	r3, [r3, #0]
    4460:	2201      	movs	r2, #1
    4462:	4013      	ands	r3, r2
    4464:	d00b      	beq.n	447e <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4466:	230e      	movs	r3, #14
    4468:	18fb      	adds	r3, r7, r3
    446a:	881b      	ldrh	r3, [r3, #0]
    446c:	2201      	movs	r2, #1
    446e:	4013      	ands	r3, r2
    4470:	d002      	beq.n	4478 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    4472:	697b      	ldr	r3, [r7, #20]
    4474:	689b      	ldr	r3, [r3, #8]
    4476:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    4478:	693b      	ldr	r3, [r7, #16]
    447a:	2201      	movs	r2, #1
    447c:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    447e:	46c0      	nop			; (mov r8, r8)
    4480:	46bd      	mov	sp, r7
    4482:	b006      	add	sp, #24
    4484:	bd80      	pop	{r7, pc}
    4486:	46c0      	nop			; (mov r8, r8)
    4488:	2000460c 	.word	0x2000460c

0000448c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    448c:	b580      	push	{r7, lr}
    448e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    4490:	2000      	movs	r0, #0
    4492:	4b02      	ldr	r3, [pc, #8]	; (449c <RTC_Handler+0x10>)
    4494:	4798      	blx	r3
}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	46bd      	mov	sp, r7
    449a:	bd80      	pop	{r7, pc}
    449c:	000043dd 	.word	0x000043dd

000044a0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    44a0:	b580      	push	{r7, lr}
    44a2:	b082      	sub	sp, #8
    44a4:	af00      	add	r7, sp, #0
    44a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	2200      	movs	r2, #0
    44ac:	701a      	strb	r2, [r3, #0]
}
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	46bd      	mov	sp, r7
    44b2:	b002      	add	sp, #8
    44b4:	bd80      	pop	{r7, pc}
    44b6:	46c0      	nop			; (mov r8, r8)

000044b8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    44b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44ba:	b08d      	sub	sp, #52	; 0x34
    44bc:	af00      	add	r7, sp, #0
    44be:	60b8      	str	r0, [r7, #8]
    44c0:	60f9      	str	r1, [r7, #12]
    44c2:	603a      	str	r2, [r7, #0]
    44c4:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    44c6:	2300      	movs	r3, #0
    44c8:	2400      	movs	r4, #0
    44ca:	623b      	str	r3, [r7, #32]
    44cc:	627c      	str	r4, [r7, #36]	; 0x24
    44ce:	2300      	movs	r3, #0
    44d0:	2400      	movs	r4, #0
    44d2:	61bb      	str	r3, [r7, #24]
    44d4:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    44d6:	233f      	movs	r3, #63	; 0x3f
    44d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    44da:	e053      	b.n	4584 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    44dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44de:	3b20      	subs	r3, #32
    44e0:	2b00      	cmp	r3, #0
    44e2:	db04      	blt.n	44ee <long_division+0x36>
    44e4:	2201      	movs	r2, #1
    44e6:	409a      	lsls	r2, r3
    44e8:	0013      	movs	r3, r2
    44ea:	617b      	str	r3, [r7, #20]
    44ec:	e00b      	b.n	4506 <long_division+0x4e>
    44ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    44f0:	2220      	movs	r2, #32
    44f2:	1ad3      	subs	r3, r2, r3
    44f4:	2201      	movs	r2, #1
    44f6:	40da      	lsrs	r2, r3
    44f8:	0013      	movs	r3, r2
    44fa:	2100      	movs	r1, #0
    44fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    44fe:	4091      	lsls	r1, r2
    4500:	000a      	movs	r2, r1
    4502:	4313      	orrs	r3, r2
    4504:	617b      	str	r3, [r7, #20]
    4506:	2201      	movs	r2, #1
    4508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    450a:	409a      	lsls	r2, r3
    450c:	0013      	movs	r3, r2
    450e:	613b      	str	r3, [r7, #16]

		r = r << 1;
    4510:	69bb      	ldr	r3, [r7, #24]
    4512:	69fc      	ldr	r4, [r7, #28]
    4514:	18db      	adds	r3, r3, r3
    4516:	4164      	adcs	r4, r4
    4518:	61bb      	str	r3, [r7, #24]
    451a:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    451c:	68bb      	ldr	r3, [r7, #8]
    451e:	693a      	ldr	r2, [r7, #16]
    4520:	401a      	ands	r2, r3
    4522:	0015      	movs	r5, r2
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	697a      	ldr	r2, [r7, #20]
    4528:	401a      	ands	r2, r3
    452a:	0016      	movs	r6, r2
    452c:	002b      	movs	r3, r5
    452e:	4333      	orrs	r3, r6
    4530:	d007      	beq.n	4542 <long_division+0x8a>
			r |= 0x01;
    4532:	69bb      	ldr	r3, [r7, #24]
    4534:	2201      	movs	r2, #1
    4536:	4313      	orrs	r3, r2
    4538:	61bb      	str	r3, [r7, #24]
    453a:	69fb      	ldr	r3, [r7, #28]
    453c:	2200      	movs	r2, #0
    453e:	4313      	orrs	r3, r2
    4540:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    4542:	687a      	ldr	r2, [r7, #4]
    4544:	69fb      	ldr	r3, [r7, #28]
    4546:	429a      	cmp	r2, r3
    4548:	d819      	bhi.n	457e <long_division+0xc6>
    454a:	687a      	ldr	r2, [r7, #4]
    454c:	69fb      	ldr	r3, [r7, #28]
    454e:	429a      	cmp	r2, r3
    4550:	d103      	bne.n	455a <long_division+0xa2>
    4552:	683a      	ldr	r2, [r7, #0]
    4554:	69bb      	ldr	r3, [r7, #24]
    4556:	429a      	cmp	r2, r3
    4558:	d811      	bhi.n	457e <long_division+0xc6>
			r = r - d;
    455a:	69b9      	ldr	r1, [r7, #24]
    455c:	69fa      	ldr	r2, [r7, #28]
    455e:	683b      	ldr	r3, [r7, #0]
    4560:	687c      	ldr	r4, [r7, #4]
    4562:	1ac9      	subs	r1, r1, r3
    4564:	41a2      	sbcs	r2, r4
    4566:	000b      	movs	r3, r1
    4568:	0014      	movs	r4, r2
    456a:	61bb      	str	r3, [r7, #24]
    456c:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    456e:	6a3a      	ldr	r2, [r7, #32]
    4570:	693b      	ldr	r3, [r7, #16]
    4572:	4313      	orrs	r3, r2
    4574:	623b      	str	r3, [r7, #32]
    4576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4578:	697b      	ldr	r3, [r7, #20]
    457a:	4313      	orrs	r3, r2
    457c:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4580:	3b01      	subs	r3, #1
    4582:	62fb      	str	r3, [r7, #44]	; 0x2c
    4584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4586:	2b00      	cmp	r3, #0
    4588:	daa8      	bge.n	44dc <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    458a:	6a3b      	ldr	r3, [r7, #32]
    458c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    458e:	0018      	movs	r0, r3
    4590:	0021      	movs	r1, r4
    4592:	46bd      	mov	sp, r7
    4594:	b00d      	add	sp, #52	; 0x34
    4596:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004598 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4598:	b580      	push	{r7, lr}
    459a:	b086      	sub	sp, #24
    459c:	af00      	add	r7, sp, #0
    459e:	60f8      	str	r0, [r7, #12]
    45a0:	60b9      	str	r1, [r7, #8]
    45a2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    45a4:	2316      	movs	r3, #22
    45a6:	18fb      	adds	r3, r7, r3
    45a8:	2200      	movs	r2, #0
    45aa:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    45ac:	68bb      	ldr	r3, [r7, #8]
    45ae:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    45b0:	68bb      	ldr	r3, [r7, #8]
    45b2:	085a      	lsrs	r2, r3, #1
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	429a      	cmp	r2, r3
    45b8:	d201      	bcs.n	45be <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    45ba:	2340      	movs	r3, #64	; 0x40
    45bc:	e026      	b.n	460c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    45be:	68bb      	ldr	r3, [r7, #8]
    45c0:	085b      	lsrs	r3, r3, #1
    45c2:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    45c4:	e00a      	b.n	45dc <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    45c6:	693a      	ldr	r2, [r7, #16]
    45c8:	68fb      	ldr	r3, [r7, #12]
    45ca:	1ad3      	subs	r3, r2, r3
    45cc:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    45ce:	2316      	movs	r3, #22
    45d0:	18fb      	adds	r3, r7, r3
    45d2:	881a      	ldrh	r2, [r3, #0]
    45d4:	2316      	movs	r3, #22
    45d6:	18fb      	adds	r3, r7, r3
    45d8:	3201      	adds	r2, #1
    45da:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    45dc:	693a      	ldr	r2, [r7, #16]
    45de:	68fb      	ldr	r3, [r7, #12]
    45e0:	429a      	cmp	r2, r3
    45e2:	d2f0      	bcs.n	45c6 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    45e4:	2316      	movs	r3, #22
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	2216      	movs	r2, #22
    45ea:	18ba      	adds	r2, r7, r2
    45ec:	8812      	ldrh	r2, [r2, #0]
    45ee:	3a01      	subs	r2, #1
    45f0:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    45f2:	2316      	movs	r3, #22
    45f4:	18fb      	adds	r3, r7, r3
    45f6:	881b      	ldrh	r3, [r3, #0]
    45f8:	2bff      	cmp	r3, #255	; 0xff
    45fa:	d901      	bls.n	4600 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    45fc:	2340      	movs	r3, #64	; 0x40
    45fe:	e005      	b.n	460c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	2216      	movs	r2, #22
    4604:	18ba      	adds	r2, r7, r2
    4606:	8812      	ldrh	r2, [r2, #0]
    4608:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    460a:	2300      	movs	r3, #0
	}
}
    460c:	0018      	movs	r0, r3
    460e:	46bd      	mov	sp, r7
    4610:	b006      	add	sp, #24
    4612:	bd80      	pop	{r7, pc}

00004614 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4614:	b5f0      	push	{r4, r5, r6, r7, lr}
    4616:	b09d      	sub	sp, #116	; 0x74
    4618:	af00      	add	r7, sp, #0
    461a:	63f8      	str	r0, [r7, #60]	; 0x3c
    461c:	63b9      	str	r1, [r7, #56]	; 0x38
    461e:	637a      	str	r2, [r7, #52]	; 0x34
    4620:	2233      	movs	r2, #51	; 0x33
    4622:	18ba      	adds	r2, r7, r2
    4624:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    4626:	2300      	movs	r3, #0
    4628:	2400      	movs	r4, #0
    462a:	65bb      	str	r3, [r7, #88]	; 0x58
    462c:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    462e:	2300      	movs	r3, #0
    4630:	2400      	movs	r4, #0
    4632:	653b      	str	r3, [r7, #80]	; 0x50
    4634:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    4636:	2300      	movs	r3, #0
    4638:	2400      	movs	r4, #0
    463a:	66bb      	str	r3, [r7, #104]	; 0x68
    463c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    463e:	2300      	movs	r3, #0
    4640:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4642:	2358      	movs	r3, #88	; 0x58
    4644:	2230      	movs	r2, #48	; 0x30
    4646:	4694      	mov	ip, r2
    4648:	44bc      	add	ip, r7
    464a:	4463      	add	r3, ip
    464c:	781a      	ldrb	r2, [r3, #0]
    464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4650:	435a      	muls	r2, r3
    4652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4654:	429a      	cmp	r2, r3
    4656:	d901      	bls.n	465c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4658:	2340      	movs	r3, #64	; 0x40
    465a:	e0c6      	b.n	47ea <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    465c:	2333      	movs	r3, #51	; 0x33
    465e:	18fb      	adds	r3, r7, r3
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	2b00      	cmp	r3, #0
    4664:	d13d      	bne.n	46e2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4666:	2358      	movs	r3, #88	; 0x58
    4668:	2230      	movs	r2, #48	; 0x30
    466a:	4694      	mov	ip, r2
    466c:	44bc      	add	ip, r7
    466e:	4463      	add	r3, ip
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	b2db      	uxtb	r3, r3
    4674:	613b      	str	r3, [r7, #16]
    4676:	2300      	movs	r3, #0
    4678:	617b      	str	r3, [r7, #20]
    467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    467c:	60bb      	str	r3, [r7, #8]
    467e:	2300      	movs	r3, #0
    4680:	60fb      	str	r3, [r7, #12]
    4682:	4c5c      	ldr	r4, [pc, #368]	; (47f4 <_sercom_get_async_baud_val+0x1e0>)
    4684:	68ba      	ldr	r2, [r7, #8]
    4686:	68fb      	ldr	r3, [r7, #12]
    4688:	6938      	ldr	r0, [r7, #16]
    468a:	6979      	ldr	r1, [r7, #20]
    468c:	47a0      	blx	r4
    468e:	0003      	movs	r3, r0
    4690:	000c      	movs	r4, r1
    4692:	001b      	movs	r3, r3
    4694:	64fb      	str	r3, [r7, #76]	; 0x4c
    4696:	2300      	movs	r3, #0
    4698:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    469c:	603b      	str	r3, [r7, #0]
    469e:	2300      	movs	r3, #0
    46a0:	607b      	str	r3, [r7, #4]
    46a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    46a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    46a6:	683a      	ldr	r2, [r7, #0]
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	4c53      	ldr	r4, [pc, #332]	; (47f8 <_sercom_get_async_baud_val+0x1e4>)
    46ac:	47a0      	blx	r4
    46ae:	0003      	movs	r3, r0
    46b0:	000c      	movs	r4, r1
    46b2:	65bb      	str	r3, [r7, #88]	; 0x58
    46b4:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    46b6:	2100      	movs	r1, #0
    46b8:	2201      	movs	r2, #1
    46ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    46bc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    46be:	1ac9      	subs	r1, r1, r3
    46c0:	41a2      	sbcs	r2, r4
    46c2:	000b      	movs	r3, r1
    46c4:	0014      	movs	r4, r2
    46c6:	653b      	str	r3, [r7, #80]	; 0x50
    46c8:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    46ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    46cc:	0c1b      	lsrs	r3, r3, #16
    46ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    46d0:	0416      	lsls	r6, r2, #16
    46d2:	431e      	orrs	r6, r3
    46d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    46d6:	041d      	lsls	r5, r3, #16
    46d8:	0033      	movs	r3, r6
    46da:	66bb      	str	r3, [r7, #104]	; 0x68
    46dc:	2300      	movs	r3, #0
    46de:	66fb      	str	r3, [r7, #108]	; 0x6c
    46e0:	e07d      	b.n	47de <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    46e2:	2333      	movs	r3, #51	; 0x33
    46e4:	18fb      	adds	r3, r7, r3
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	2b01      	cmp	r3, #1
    46ea:	d000      	beq.n	46ee <_sercom_get_async_baud_val+0xda>
    46ec:	e077      	b.n	47de <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    46ee:	2337      	movs	r3, #55	; 0x37
    46f0:	2230      	movs	r2, #48	; 0x30
    46f2:	4694      	mov	ip, r2
    46f4:	44bc      	add	ip, r7
    46f6:	4463      	add	r3, ip
    46f8:	2200      	movs	r2, #0
    46fa:	701a      	strb	r2, [r3, #0]
    46fc:	e04e      	b.n	479c <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    46fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4700:	62bb      	str	r3, [r7, #40]	; 0x28
    4702:	2300      	movs	r3, #0
    4704:	62fb      	str	r3, [r7, #44]	; 0x2c
    4706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    470a:	0003      	movs	r3, r0
    470c:	0f5b      	lsrs	r3, r3, #29
    470e:	000a      	movs	r2, r1
    4710:	00d2      	lsls	r2, r2, #3
    4712:	4313      	orrs	r3, r2
    4714:	64fb      	str	r3, [r7, #76]	; 0x4c
    4716:	0003      	movs	r3, r0
    4718:	00db      	lsls	r3, r3, #3
    471a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    471c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    471e:	623b      	str	r3, [r7, #32]
    4720:	2300      	movs	r3, #0
    4722:	627b      	str	r3, [r7, #36]	; 0x24
    4724:	2358      	movs	r3, #88	; 0x58
    4726:	2230      	movs	r2, #48	; 0x30
    4728:	4694      	mov	ip, r2
    472a:	44bc      	add	ip, r7
    472c:	4463      	add	r3, ip
    472e:	781b      	ldrb	r3, [r3, #0]
    4730:	b2db      	uxtb	r3, r3
    4732:	61bb      	str	r3, [r7, #24]
    4734:	2300      	movs	r3, #0
    4736:	61fb      	str	r3, [r7, #28]
    4738:	4c2e      	ldr	r4, [pc, #184]	; (47f4 <_sercom_get_async_baud_val+0x1e0>)
    473a:	69ba      	ldr	r2, [r7, #24]
    473c:	69fb      	ldr	r3, [r7, #28]
    473e:	6a38      	ldr	r0, [r7, #32]
    4740:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4742:	47a0      	blx	r4
    4744:	0003      	movs	r3, r0
    4746:	000c      	movs	r4, r1
    4748:	643b      	str	r3, [r7, #64]	; 0x40
    474a:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    474e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    4750:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4752:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4754:	001a      	movs	r2, r3
    4756:	0023      	movs	r3, r4
    4758:	4c27      	ldr	r4, [pc, #156]	; (47f8 <_sercom_get_async_baud_val+0x1e4>)
    475a:	47a0      	blx	r4
    475c:	0003      	movs	r3, r0
    475e:	000c      	movs	r4, r1
    4760:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    4762:	2337      	movs	r3, #55	; 0x37
    4764:	2230      	movs	r2, #48	; 0x30
    4766:	4694      	mov	ip, r2
    4768:	44bc      	add	ip, r7
    476a:	4463      	add	r3, ip
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4770:	1ad3      	subs	r3, r2, r3
    4772:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    4774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4776:	08db      	lsrs	r3, r3, #3
    4778:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    477a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    477c:	4a1f      	ldr	r2, [pc, #124]	; (47fc <_sercom_get_async_baud_val+0x1e8>)
    477e:	4293      	cmp	r3, r2
    4780:	d915      	bls.n	47ae <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4782:	2337      	movs	r3, #55	; 0x37
    4784:	2230      	movs	r2, #48	; 0x30
    4786:	4694      	mov	ip, r2
    4788:	44bc      	add	ip, r7
    478a:	4463      	add	r3, ip
    478c:	781a      	ldrb	r2, [r3, #0]
    478e:	2337      	movs	r3, #55	; 0x37
    4790:	2130      	movs	r1, #48	; 0x30
    4792:	468c      	mov	ip, r1
    4794:	44bc      	add	ip, r7
    4796:	4463      	add	r3, ip
    4798:	3201      	adds	r2, #1
    479a:	701a      	strb	r2, [r3, #0]
    479c:	2337      	movs	r3, #55	; 0x37
    479e:	2230      	movs	r2, #48	; 0x30
    47a0:	4694      	mov	ip, r2
    47a2:	44bc      	add	ip, r7
    47a4:	4463      	add	r3, ip
    47a6:	781b      	ldrb	r3, [r3, #0]
    47a8:	2b07      	cmp	r3, #7
    47aa:	d9a8      	bls.n	46fe <_sercom_get_async_baud_val+0xea>
    47ac:	e000      	b.n	47b0 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    47ae:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    47b0:	2337      	movs	r3, #55	; 0x37
    47b2:	2230      	movs	r2, #48	; 0x30
    47b4:	4694      	mov	ip, r2
    47b6:	44bc      	add	ip, r7
    47b8:	4463      	add	r3, ip
    47ba:	781b      	ldrb	r3, [r3, #0]
    47bc:	2b08      	cmp	r3, #8
    47be:	d101      	bne.n	47c4 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    47c0:	2340      	movs	r3, #64	; 0x40
    47c2:	e012      	b.n	47ea <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    47c4:	2337      	movs	r3, #55	; 0x37
    47c6:	2230      	movs	r2, #48	; 0x30
    47c8:	4694      	mov	ip, r2
    47ca:	44bc      	add	ip, r7
    47cc:	4463      	add	r3, ip
    47ce:	781b      	ldrb	r3, [r3, #0]
    47d0:	035b      	lsls	r3, r3, #13
    47d2:	001a      	movs	r2, r3
    47d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    47d6:	4313      	orrs	r3, r2
    47d8:	66bb      	str	r3, [r7, #104]	; 0x68
    47da:	2300      	movs	r3, #0
    47dc:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    47de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    47e0:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    47e2:	b29a      	uxth	r2, r3
    47e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47e6:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    47e8:	2300      	movs	r3, #0
}
    47ea:	0018      	movs	r0, r3
    47ec:	46bd      	mov	sp, r7
    47ee:	b01d      	add	sp, #116	; 0x74
    47f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47f2:	46c0      	nop			; (mov r8, r8)
    47f4:	0000af49 	.word	0x0000af49
    47f8:	000044b9 	.word	0x000044b9
    47fc:	00001fff 	.word	0x00001fff

00004800 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4800:	b580      	push	{r7, lr}
    4802:	b084      	sub	sp, #16
    4804:	af00      	add	r7, sp, #0
    4806:	0002      	movs	r2, r0
    4808:	1dfb      	adds	r3, r7, #7
    480a:	701a      	strb	r2, [r3, #0]
    480c:	1dbb      	adds	r3, r7, #6
    480e:	1c0a      	adds	r2, r1, #0
    4810:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4812:	4b1a      	ldr	r3, [pc, #104]	; (487c <sercom_set_gclk_generator+0x7c>)
    4814:	781b      	ldrb	r3, [r3, #0]
    4816:	2201      	movs	r2, #1
    4818:	4053      	eors	r3, r2
    481a:	b2db      	uxtb	r3, r3
    481c:	2b00      	cmp	r3, #0
    481e:	d103      	bne.n	4828 <sercom_set_gclk_generator+0x28>
    4820:	1dbb      	adds	r3, r7, #6
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b00      	cmp	r3, #0
    4826:	d01b      	beq.n	4860 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4828:	230c      	movs	r3, #12
    482a:	18fb      	adds	r3, r7, r3
    482c:	0018      	movs	r0, r3
    482e:	4b14      	ldr	r3, [pc, #80]	; (4880 <sercom_set_gclk_generator+0x80>)
    4830:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4832:	230c      	movs	r3, #12
    4834:	18fb      	adds	r3, r7, r3
    4836:	1dfa      	adds	r2, r7, #7
    4838:	7812      	ldrb	r2, [r2, #0]
    483a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    483c:	230c      	movs	r3, #12
    483e:	18fb      	adds	r3, r7, r3
    4840:	0019      	movs	r1, r3
    4842:	2013      	movs	r0, #19
    4844:	4b0f      	ldr	r3, [pc, #60]	; (4884 <sercom_set_gclk_generator+0x84>)
    4846:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4848:	2013      	movs	r0, #19
    484a:	4b0f      	ldr	r3, [pc, #60]	; (4888 <sercom_set_gclk_generator+0x88>)
    484c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    484e:	4b0b      	ldr	r3, [pc, #44]	; (487c <sercom_set_gclk_generator+0x7c>)
    4850:	1dfa      	adds	r2, r7, #7
    4852:	7812      	ldrb	r2, [r2, #0]
    4854:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4856:	4b09      	ldr	r3, [pc, #36]	; (487c <sercom_set_gclk_generator+0x7c>)
    4858:	2201      	movs	r2, #1
    485a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    485c:	2300      	movs	r3, #0
    485e:	e008      	b.n	4872 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4860:	4b06      	ldr	r3, [pc, #24]	; (487c <sercom_set_gclk_generator+0x7c>)
    4862:	785b      	ldrb	r3, [r3, #1]
    4864:	1dfa      	adds	r2, r7, #7
    4866:	7812      	ldrb	r2, [r2, #0]
    4868:	429a      	cmp	r2, r3
    486a:	d101      	bne.n	4870 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    486c:	2300      	movs	r3, #0
    486e:	e000      	b.n	4872 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4870:	231d      	movs	r3, #29
}
    4872:	0018      	movs	r0, r3
    4874:	46bd      	mov	sp, r7
    4876:	b004      	add	sp, #16
    4878:	bd80      	pop	{r7, pc}
    487a:	46c0      	nop			; (mov r8, r8)
    487c:	200000e0 	.word	0x200000e0
    4880:	000044a1 	.word	0x000044a1
    4884:	00007101 	.word	0x00007101
    4888:	00007145 	.word	0x00007145

0000488c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    488c:	b580      	push	{r7, lr}
    488e:	b082      	sub	sp, #8
    4890:	af00      	add	r7, sp, #0
    4892:	6078      	str	r0, [r7, #4]
    4894:	000a      	movs	r2, r1
    4896:	1cfb      	adds	r3, r7, #3
    4898:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    489a:	687b      	ldr	r3, [r7, #4]
    489c:	4a4d      	ldr	r2, [pc, #308]	; (49d4 <_sercom_get_default_pad+0x148>)
    489e:	4293      	cmp	r3, r2
    48a0:	d03f      	beq.n	4922 <_sercom_get_default_pad+0x96>
    48a2:	4a4c      	ldr	r2, [pc, #304]	; (49d4 <_sercom_get_default_pad+0x148>)
    48a4:	4293      	cmp	r3, r2
    48a6:	d806      	bhi.n	48b6 <_sercom_get_default_pad+0x2a>
    48a8:	4a4b      	ldr	r2, [pc, #300]	; (49d8 <_sercom_get_default_pad+0x14c>)
    48aa:	4293      	cmp	r3, r2
    48ac:	d00f      	beq.n	48ce <_sercom_get_default_pad+0x42>
    48ae:	4a4b      	ldr	r2, [pc, #300]	; (49dc <_sercom_get_default_pad+0x150>)
    48b0:	4293      	cmp	r3, r2
    48b2:	d021      	beq.n	48f8 <_sercom_get_default_pad+0x6c>
    48b4:	e089      	b.n	49ca <_sercom_get_default_pad+0x13e>
    48b6:	4a4a      	ldr	r2, [pc, #296]	; (49e0 <_sercom_get_default_pad+0x154>)
    48b8:	4293      	cmp	r3, r2
    48ba:	d100      	bne.n	48be <_sercom_get_default_pad+0x32>
    48bc:	e05b      	b.n	4976 <_sercom_get_default_pad+0xea>
    48be:	4a49      	ldr	r2, [pc, #292]	; (49e4 <_sercom_get_default_pad+0x158>)
    48c0:	4293      	cmp	r3, r2
    48c2:	d100      	bne.n	48c6 <_sercom_get_default_pad+0x3a>
    48c4:	e06c      	b.n	49a0 <_sercom_get_default_pad+0x114>
    48c6:	4a48      	ldr	r2, [pc, #288]	; (49e8 <_sercom_get_default_pad+0x15c>)
    48c8:	4293      	cmp	r3, r2
    48ca:	d03f      	beq.n	494c <_sercom_get_default_pad+0xc0>
    48cc:	e07d      	b.n	49ca <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    48ce:	1cfb      	adds	r3, r7, #3
    48d0:	781b      	ldrb	r3, [r3, #0]
    48d2:	2b01      	cmp	r3, #1
    48d4:	d00a      	beq.n	48ec <_sercom_get_default_pad+0x60>
    48d6:	dc02      	bgt.n	48de <_sercom_get_default_pad+0x52>
    48d8:	2b00      	cmp	r3, #0
    48da:	d005      	beq.n	48e8 <_sercom_get_default_pad+0x5c>
    48dc:	e075      	b.n	49ca <_sercom_get_default_pad+0x13e>
    48de:	2b02      	cmp	r3, #2
    48e0:	d006      	beq.n	48f0 <_sercom_get_default_pad+0x64>
    48e2:	2b03      	cmp	r3, #3
    48e4:	d006      	beq.n	48f4 <_sercom_get_default_pad+0x68>
    48e6:	e070      	b.n	49ca <_sercom_get_default_pad+0x13e>
    48e8:	4b40      	ldr	r3, [pc, #256]	; (49ec <_sercom_get_default_pad+0x160>)
    48ea:	e06f      	b.n	49cc <_sercom_get_default_pad+0x140>
    48ec:	4b40      	ldr	r3, [pc, #256]	; (49f0 <_sercom_get_default_pad+0x164>)
    48ee:	e06d      	b.n	49cc <_sercom_get_default_pad+0x140>
    48f0:	4b40      	ldr	r3, [pc, #256]	; (49f4 <_sercom_get_default_pad+0x168>)
    48f2:	e06b      	b.n	49cc <_sercom_get_default_pad+0x140>
    48f4:	4b40      	ldr	r3, [pc, #256]	; (49f8 <_sercom_get_default_pad+0x16c>)
    48f6:	e069      	b.n	49cc <_sercom_get_default_pad+0x140>
    48f8:	1cfb      	adds	r3, r7, #3
    48fa:	781b      	ldrb	r3, [r3, #0]
    48fc:	2b01      	cmp	r3, #1
    48fe:	d00a      	beq.n	4916 <_sercom_get_default_pad+0x8a>
    4900:	dc02      	bgt.n	4908 <_sercom_get_default_pad+0x7c>
    4902:	2b00      	cmp	r3, #0
    4904:	d005      	beq.n	4912 <_sercom_get_default_pad+0x86>
    4906:	e060      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4908:	2b02      	cmp	r3, #2
    490a:	d006      	beq.n	491a <_sercom_get_default_pad+0x8e>
    490c:	2b03      	cmp	r3, #3
    490e:	d006      	beq.n	491e <_sercom_get_default_pad+0x92>
    4910:	e05b      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4912:	2303      	movs	r3, #3
    4914:	e05a      	b.n	49cc <_sercom_get_default_pad+0x140>
    4916:	4b39      	ldr	r3, [pc, #228]	; (49fc <_sercom_get_default_pad+0x170>)
    4918:	e058      	b.n	49cc <_sercom_get_default_pad+0x140>
    491a:	4b39      	ldr	r3, [pc, #228]	; (4a00 <_sercom_get_default_pad+0x174>)
    491c:	e056      	b.n	49cc <_sercom_get_default_pad+0x140>
    491e:	4b39      	ldr	r3, [pc, #228]	; (4a04 <_sercom_get_default_pad+0x178>)
    4920:	e054      	b.n	49cc <_sercom_get_default_pad+0x140>
    4922:	1cfb      	adds	r3, r7, #3
    4924:	781b      	ldrb	r3, [r3, #0]
    4926:	2b01      	cmp	r3, #1
    4928:	d00a      	beq.n	4940 <_sercom_get_default_pad+0xb4>
    492a:	dc02      	bgt.n	4932 <_sercom_get_default_pad+0xa6>
    492c:	2b00      	cmp	r3, #0
    492e:	d005      	beq.n	493c <_sercom_get_default_pad+0xb0>
    4930:	e04b      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4932:	2b02      	cmp	r3, #2
    4934:	d006      	beq.n	4944 <_sercom_get_default_pad+0xb8>
    4936:	2b03      	cmp	r3, #3
    4938:	d006      	beq.n	4948 <_sercom_get_default_pad+0xbc>
    493a:	e046      	b.n	49ca <_sercom_get_default_pad+0x13e>
    493c:	4b32      	ldr	r3, [pc, #200]	; (4a08 <_sercom_get_default_pad+0x17c>)
    493e:	e045      	b.n	49cc <_sercom_get_default_pad+0x140>
    4940:	4b32      	ldr	r3, [pc, #200]	; (4a0c <_sercom_get_default_pad+0x180>)
    4942:	e043      	b.n	49cc <_sercom_get_default_pad+0x140>
    4944:	4b32      	ldr	r3, [pc, #200]	; (4a10 <_sercom_get_default_pad+0x184>)
    4946:	e041      	b.n	49cc <_sercom_get_default_pad+0x140>
    4948:	4b32      	ldr	r3, [pc, #200]	; (4a14 <_sercom_get_default_pad+0x188>)
    494a:	e03f      	b.n	49cc <_sercom_get_default_pad+0x140>
    494c:	1cfb      	adds	r3, r7, #3
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	2b01      	cmp	r3, #1
    4952:	d00a      	beq.n	496a <_sercom_get_default_pad+0xde>
    4954:	dc02      	bgt.n	495c <_sercom_get_default_pad+0xd0>
    4956:	2b00      	cmp	r3, #0
    4958:	d005      	beq.n	4966 <_sercom_get_default_pad+0xda>
    495a:	e036      	b.n	49ca <_sercom_get_default_pad+0x13e>
    495c:	2b02      	cmp	r3, #2
    495e:	d006      	beq.n	496e <_sercom_get_default_pad+0xe2>
    4960:	2b03      	cmp	r3, #3
    4962:	d006      	beq.n	4972 <_sercom_get_default_pad+0xe6>
    4964:	e031      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4966:	4b2c      	ldr	r3, [pc, #176]	; (4a18 <_sercom_get_default_pad+0x18c>)
    4968:	e030      	b.n	49cc <_sercom_get_default_pad+0x140>
    496a:	4b2c      	ldr	r3, [pc, #176]	; (4a1c <_sercom_get_default_pad+0x190>)
    496c:	e02e      	b.n	49cc <_sercom_get_default_pad+0x140>
    496e:	4b2c      	ldr	r3, [pc, #176]	; (4a20 <_sercom_get_default_pad+0x194>)
    4970:	e02c      	b.n	49cc <_sercom_get_default_pad+0x140>
    4972:	4b2c      	ldr	r3, [pc, #176]	; (4a24 <_sercom_get_default_pad+0x198>)
    4974:	e02a      	b.n	49cc <_sercom_get_default_pad+0x140>
    4976:	1cfb      	adds	r3, r7, #3
    4978:	781b      	ldrb	r3, [r3, #0]
    497a:	2b01      	cmp	r3, #1
    497c:	d00a      	beq.n	4994 <_sercom_get_default_pad+0x108>
    497e:	dc02      	bgt.n	4986 <_sercom_get_default_pad+0xfa>
    4980:	2b00      	cmp	r3, #0
    4982:	d005      	beq.n	4990 <_sercom_get_default_pad+0x104>
    4984:	e021      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4986:	2b02      	cmp	r3, #2
    4988:	d006      	beq.n	4998 <_sercom_get_default_pad+0x10c>
    498a:	2b03      	cmp	r3, #3
    498c:	d006      	beq.n	499c <_sercom_get_default_pad+0x110>
    498e:	e01c      	b.n	49ca <_sercom_get_default_pad+0x13e>
    4990:	4b25      	ldr	r3, [pc, #148]	; (4a28 <_sercom_get_default_pad+0x19c>)
    4992:	e01b      	b.n	49cc <_sercom_get_default_pad+0x140>
    4994:	4b25      	ldr	r3, [pc, #148]	; (4a2c <_sercom_get_default_pad+0x1a0>)
    4996:	e019      	b.n	49cc <_sercom_get_default_pad+0x140>
    4998:	4b25      	ldr	r3, [pc, #148]	; (4a30 <_sercom_get_default_pad+0x1a4>)
    499a:	e017      	b.n	49cc <_sercom_get_default_pad+0x140>
    499c:	4b25      	ldr	r3, [pc, #148]	; (4a34 <_sercom_get_default_pad+0x1a8>)
    499e:	e015      	b.n	49cc <_sercom_get_default_pad+0x140>
    49a0:	1cfb      	adds	r3, r7, #3
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	2b01      	cmp	r3, #1
    49a6:	d00a      	beq.n	49be <_sercom_get_default_pad+0x132>
    49a8:	dc02      	bgt.n	49b0 <_sercom_get_default_pad+0x124>
    49aa:	2b00      	cmp	r3, #0
    49ac:	d005      	beq.n	49ba <_sercom_get_default_pad+0x12e>
    49ae:	e00c      	b.n	49ca <_sercom_get_default_pad+0x13e>
    49b0:	2b02      	cmp	r3, #2
    49b2:	d006      	beq.n	49c2 <_sercom_get_default_pad+0x136>
    49b4:	2b03      	cmp	r3, #3
    49b6:	d006      	beq.n	49c6 <_sercom_get_default_pad+0x13a>
    49b8:	e007      	b.n	49ca <_sercom_get_default_pad+0x13e>
    49ba:	4b1f      	ldr	r3, [pc, #124]	; (4a38 <_sercom_get_default_pad+0x1ac>)
    49bc:	e006      	b.n	49cc <_sercom_get_default_pad+0x140>
    49be:	4b1f      	ldr	r3, [pc, #124]	; (4a3c <_sercom_get_default_pad+0x1b0>)
    49c0:	e004      	b.n	49cc <_sercom_get_default_pad+0x140>
    49c2:	4b1f      	ldr	r3, [pc, #124]	; (4a40 <_sercom_get_default_pad+0x1b4>)
    49c4:	e002      	b.n	49cc <_sercom_get_default_pad+0x140>
    49c6:	4b1f      	ldr	r3, [pc, #124]	; (4a44 <_sercom_get_default_pad+0x1b8>)
    49c8:	e000      	b.n	49cc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    49ca:	2300      	movs	r3, #0
}
    49cc:	0018      	movs	r0, r3
    49ce:	46bd      	mov	sp, r7
    49d0:	b002      	add	sp, #8
    49d2:	bd80      	pop	{r7, pc}
    49d4:	42001000 	.word	0x42001000
    49d8:	42000800 	.word	0x42000800
    49dc:	42000c00 	.word	0x42000c00
    49e0:	42001800 	.word	0x42001800
    49e4:	42001c00 	.word	0x42001c00
    49e8:	42001400 	.word	0x42001400
    49ec:	00040003 	.word	0x00040003
    49f0:	00050003 	.word	0x00050003
    49f4:	00060003 	.word	0x00060003
    49f8:	00070003 	.word	0x00070003
    49fc:	00010003 	.word	0x00010003
    4a00:	001e0003 	.word	0x001e0003
    4a04:	001f0003 	.word	0x001f0003
    4a08:	00080003 	.word	0x00080003
    4a0c:	00090003 	.word	0x00090003
    4a10:	000a0003 	.word	0x000a0003
    4a14:	000b0003 	.word	0x000b0003
    4a18:	00100003 	.word	0x00100003
    4a1c:	00110003 	.word	0x00110003
    4a20:	00120003 	.word	0x00120003
    4a24:	00130003 	.word	0x00130003
    4a28:	000c0003 	.word	0x000c0003
    4a2c:	000d0003 	.word	0x000d0003
    4a30:	000e0003 	.word	0x000e0003
    4a34:	000f0003 	.word	0x000f0003
    4a38:	00160003 	.word	0x00160003
    4a3c:	00170003 	.word	0x00170003
    4a40:	00180003 	.word	0x00180003
    4a44:	00190003 	.word	0x00190003

00004a48 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4a48:	b590      	push	{r4, r7, lr}
    4a4a:	b08b      	sub	sp, #44	; 0x2c
    4a4c:	af00      	add	r7, sp, #0
    4a4e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4a50:	230c      	movs	r3, #12
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	4a0f      	ldr	r2, [pc, #60]	; (4a94 <_sercom_get_sercom_inst_index+0x4c>)
    4a56:	ca13      	ldmia	r2!, {r0, r1, r4}
    4a58:	c313      	stmia	r3!, {r0, r1, r4}
    4a5a:	ca13      	ldmia	r2!, {r0, r1, r4}
    4a5c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a5e:	2300      	movs	r3, #0
    4a60:	627b      	str	r3, [r7, #36]	; 0x24
    4a62:	e00e      	b.n	4a82 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4a64:	230c      	movs	r3, #12
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4a6a:	0092      	lsls	r2, r2, #2
    4a6c:	58d3      	ldr	r3, [r2, r3]
    4a6e:	1e1a      	subs	r2, r3, #0
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	429a      	cmp	r2, r3
    4a74:	d102      	bne.n	4a7c <_sercom_get_sercom_inst_index+0x34>
			return i;
    4a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a78:	b2db      	uxtb	r3, r3
    4a7a:	e006      	b.n	4a8a <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a7e:	3301      	adds	r3, #1
    4a80:	627b      	str	r3, [r7, #36]	; 0x24
    4a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4a84:	2b05      	cmp	r3, #5
    4a86:	d9ed      	bls.n	4a64 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4a88:	2300      	movs	r3, #0
}
    4a8a:	0018      	movs	r0, r3
    4a8c:	46bd      	mov	sp, r7
    4a8e:	b00b      	add	sp, #44	; 0x2c
    4a90:	bd90      	pop	{r4, r7, pc}
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	0000da24 	.word	0x0000da24

00004a98 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4a98:	b580      	push	{r7, lr}
    4a9a:	b082      	sub	sp, #8
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	0002      	movs	r2, r0
    4aa0:	1dfb      	adds	r3, r7, #7
    4aa2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4aa4:	46c0      	nop			; (mov r8, r8)
    4aa6:	46bd      	mov	sp, r7
    4aa8:	b002      	add	sp, #8
    4aaa:	bd80      	pop	{r7, pc}

00004aac <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	0002      	movs	r2, r0
    4ab4:	6039      	str	r1, [r7, #0]
    4ab6:	1dfb      	adds	r3, r7, #7
    4ab8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4aba:	4b13      	ldr	r3, [pc, #76]	; (4b08 <_sercom_set_handler+0x5c>)
    4abc:	781b      	ldrb	r3, [r3, #0]
    4abe:	2201      	movs	r2, #1
    4ac0:	4053      	eors	r3, r2
    4ac2:	b2db      	uxtb	r3, r3
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d015      	beq.n	4af4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4ac8:	2300      	movs	r3, #0
    4aca:	60fb      	str	r3, [r7, #12]
    4acc:	e00c      	b.n	4ae8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4ace:	4b0f      	ldr	r3, [pc, #60]	; (4b0c <_sercom_set_handler+0x60>)
    4ad0:	68fa      	ldr	r2, [r7, #12]
    4ad2:	0092      	lsls	r2, r2, #2
    4ad4:	490e      	ldr	r1, [pc, #56]	; (4b10 <_sercom_set_handler+0x64>)
    4ad6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4ad8:	4b0e      	ldr	r3, [pc, #56]	; (4b14 <_sercom_set_handler+0x68>)
    4ada:	68fa      	ldr	r2, [r7, #12]
    4adc:	0092      	lsls	r2, r2, #2
    4ade:	2100      	movs	r1, #0
    4ae0:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4ae2:	68fb      	ldr	r3, [r7, #12]
    4ae4:	3301      	adds	r3, #1
    4ae6:	60fb      	str	r3, [r7, #12]
    4ae8:	68fb      	ldr	r3, [r7, #12]
    4aea:	2b05      	cmp	r3, #5
    4aec:	d9ef      	bls.n	4ace <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4aee:	4b06      	ldr	r3, [pc, #24]	; (4b08 <_sercom_set_handler+0x5c>)
    4af0:	2201      	movs	r2, #1
    4af2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4af4:	1dfb      	adds	r3, r7, #7
    4af6:	781a      	ldrb	r2, [r3, #0]
    4af8:	4b04      	ldr	r3, [pc, #16]	; (4b0c <_sercom_set_handler+0x60>)
    4afa:	0092      	lsls	r2, r2, #2
    4afc:	6839      	ldr	r1, [r7, #0]
    4afe:	50d1      	str	r1, [r2, r3]
}
    4b00:	46c0      	nop			; (mov r8, r8)
    4b02:	46bd      	mov	sp, r7
    4b04:	b004      	add	sp, #16
    4b06:	bd80      	pop	{r7, pc}
    4b08:	200000e2 	.word	0x200000e2
    4b0c:	200000e4 	.word	0x200000e4
    4b10:	00004a99 	.word	0x00004a99
    4b14:	20004610 	.word	0x20004610

00004b18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4b18:	b590      	push	{r4, r7, lr}
    4b1a:	b085      	sub	sp, #20
    4b1c:	af00      	add	r7, sp, #0
    4b1e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4b20:	2308      	movs	r3, #8
    4b22:	18fa      	adds	r2, r7, r3
    4b24:	4b0c      	ldr	r3, [pc, #48]	; (4b58 <_sercom_get_interrupt_vector+0x40>)
    4b26:	0010      	movs	r0, r2
    4b28:	0019      	movs	r1, r3
    4b2a:	2306      	movs	r3, #6
    4b2c:	001a      	movs	r2, r3
    4b2e:	4b0b      	ldr	r3, [pc, #44]	; (4b5c <_sercom_get_interrupt_vector+0x44>)
    4b30:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4b32:	230f      	movs	r3, #15
    4b34:	18fc      	adds	r4, r7, r3
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	0018      	movs	r0, r3
    4b3a:	4b09      	ldr	r3, [pc, #36]	; (4b60 <_sercom_get_interrupt_vector+0x48>)
    4b3c:	4798      	blx	r3
    4b3e:	0003      	movs	r3, r0
    4b40:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4b42:	230f      	movs	r3, #15
    4b44:	18fb      	adds	r3, r7, r3
    4b46:	781b      	ldrb	r3, [r3, #0]
    4b48:	2208      	movs	r2, #8
    4b4a:	18ba      	adds	r2, r7, r2
    4b4c:	5cd3      	ldrb	r3, [r2, r3]
    4b4e:	b25b      	sxtb	r3, r3
}
    4b50:	0018      	movs	r0, r3
    4b52:	46bd      	mov	sp, r7
    4b54:	b005      	add	sp, #20
    4b56:	bd90      	pop	{r4, r7, pc}
    4b58:	0000da3c 	.word	0x0000da3c
    4b5c:	0000b5e9 	.word	0x0000b5e9
    4b60:	00004a49 	.word	0x00004a49

00004b64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4b64:	b580      	push	{r7, lr}
    4b66:	af00      	add	r7, sp, #0
    4b68:	4b03      	ldr	r3, [pc, #12]	; (4b78 <SERCOM0_Handler+0x14>)
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	2000      	movs	r0, #0
    4b6e:	4798      	blx	r3
    4b70:	46c0      	nop			; (mov r8, r8)
    4b72:	46bd      	mov	sp, r7
    4b74:	bd80      	pop	{r7, pc}
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	200000e4 	.word	0x200000e4

00004b7c <SERCOM1_Handler>:
    4b7c:	b580      	push	{r7, lr}
    4b7e:	af00      	add	r7, sp, #0
    4b80:	4b03      	ldr	r3, [pc, #12]	; (4b90 <SERCOM1_Handler+0x14>)
    4b82:	685b      	ldr	r3, [r3, #4]
    4b84:	2001      	movs	r0, #1
    4b86:	4798      	blx	r3
    4b88:	46c0      	nop			; (mov r8, r8)
    4b8a:	46bd      	mov	sp, r7
    4b8c:	bd80      	pop	{r7, pc}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	200000e4 	.word	0x200000e4

00004b94 <SERCOM2_Handler>:
    4b94:	b580      	push	{r7, lr}
    4b96:	af00      	add	r7, sp, #0
    4b98:	4b03      	ldr	r3, [pc, #12]	; (4ba8 <SERCOM2_Handler+0x14>)
    4b9a:	689b      	ldr	r3, [r3, #8]
    4b9c:	2002      	movs	r0, #2
    4b9e:	4798      	blx	r3
    4ba0:	46c0      	nop			; (mov r8, r8)
    4ba2:	46bd      	mov	sp, r7
    4ba4:	bd80      	pop	{r7, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	200000e4 	.word	0x200000e4

00004bac <SERCOM3_Handler>:
    4bac:	b580      	push	{r7, lr}
    4bae:	af00      	add	r7, sp, #0
    4bb0:	4b03      	ldr	r3, [pc, #12]	; (4bc0 <SERCOM3_Handler+0x14>)
    4bb2:	68db      	ldr	r3, [r3, #12]
    4bb4:	2003      	movs	r0, #3
    4bb6:	4798      	blx	r3
    4bb8:	46c0      	nop			; (mov r8, r8)
    4bba:	46bd      	mov	sp, r7
    4bbc:	bd80      	pop	{r7, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	200000e4 	.word	0x200000e4

00004bc4 <SERCOM4_Handler>:
    4bc4:	b580      	push	{r7, lr}
    4bc6:	af00      	add	r7, sp, #0
    4bc8:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <SERCOM4_Handler+0x14>)
    4bca:	691b      	ldr	r3, [r3, #16]
    4bcc:	2004      	movs	r0, #4
    4bce:	4798      	blx	r3
    4bd0:	46c0      	nop			; (mov r8, r8)
    4bd2:	46bd      	mov	sp, r7
    4bd4:	bd80      	pop	{r7, pc}
    4bd6:	46c0      	nop			; (mov r8, r8)
    4bd8:	200000e4 	.word	0x200000e4

00004bdc <SERCOM5_Handler>:
    4bdc:	b580      	push	{r7, lr}
    4bde:	af00      	add	r7, sp, #0
    4be0:	4b03      	ldr	r3, [pc, #12]	; (4bf0 <SERCOM5_Handler+0x14>)
    4be2:	695b      	ldr	r3, [r3, #20]
    4be4:	2005      	movs	r0, #5
    4be6:	4798      	blx	r3
    4be8:	46c0      	nop			; (mov r8, r8)
    4bea:	46bd      	mov	sp, r7
    4bec:	bd80      	pop	{r7, pc}
    4bee:	46c0      	nop			; (mov r8, r8)
    4bf0:	200000e4 	.word	0x200000e4

00004bf4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4bf4:	b580      	push	{r7, lr}
    4bf6:	b082      	sub	sp, #8
    4bf8:	af00      	add	r7, sp, #0
    4bfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	2280      	movs	r2, #128	; 0x80
    4c00:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	2200      	movs	r2, #0
    4c06:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4c08:	687b      	ldr	r3, [r7, #4]
    4c0a:	2201      	movs	r2, #1
    4c0c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4c0e:	687b      	ldr	r3, [r7, #4]
    4c10:	2200      	movs	r2, #0
    4c12:	70da      	strb	r2, [r3, #3]
}
    4c14:	46c0      	nop			; (mov r8, r8)
    4c16:	46bd      	mov	sp, r7
    4c18:	b002      	add	sp, #8
    4c1a:	bd80      	pop	{r7, pc}

00004c1c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c1c:	b580      	push	{r7, lr}
    4c1e:	b084      	sub	sp, #16
    4c20:	af00      	add	r7, sp, #0
    4c22:	0002      	movs	r2, r0
    4c24:	1dfb      	adds	r3, r7, #7
    4c26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4c28:	230f      	movs	r3, #15
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	1dfa      	adds	r2, r7, #7
    4c2e:	7812      	ldrb	r2, [r2, #0]
    4c30:	09d2      	lsrs	r2, r2, #7
    4c32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4c34:	230e      	movs	r3, #14
    4c36:	18fb      	adds	r3, r7, r3
    4c38:	1dfa      	adds	r2, r7, #7
    4c3a:	7812      	ldrb	r2, [r2, #0]
    4c3c:	0952      	lsrs	r2, r2, #5
    4c3e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4c40:	4b0d      	ldr	r3, [pc, #52]	; (4c78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4c42:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4c44:	230f      	movs	r3, #15
    4c46:	18fb      	adds	r3, r7, r3
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	d10f      	bne.n	4c6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4c4e:	230f      	movs	r3, #15
    4c50:	18fb      	adds	r3, r7, r3
    4c52:	781b      	ldrb	r3, [r3, #0]
    4c54:	009b      	lsls	r3, r3, #2
    4c56:	2210      	movs	r2, #16
    4c58:	4694      	mov	ip, r2
    4c5a:	44bc      	add	ip, r7
    4c5c:	4463      	add	r3, ip
    4c5e:	3b08      	subs	r3, #8
    4c60:	681a      	ldr	r2, [r3, #0]
    4c62:	230e      	movs	r3, #14
    4c64:	18fb      	adds	r3, r7, r3
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	01db      	lsls	r3, r3, #7
    4c6a:	18d3      	adds	r3, r2, r3
    4c6c:	e000      	b.n	4c70 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4c6e:	2300      	movs	r3, #0
	}
}
    4c70:	0018      	movs	r0, r3
    4c72:	46bd      	mov	sp, r7
    4c74:	b004      	add	sp, #16
    4c76:	bd80      	pop	{r7, pc}
    4c78:	41004400 	.word	0x41004400

00004c7c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4c7c:	b580      	push	{r7, lr}
    4c7e:	b082      	sub	sp, #8
    4c80:	af00      	add	r7, sp, #0
    4c82:	0002      	movs	r2, r0
    4c84:	1dfb      	adds	r3, r7, #7
    4c86:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4c88:	1dfb      	adds	r3, r7, #7
    4c8a:	781b      	ldrb	r3, [r3, #0]
    4c8c:	0018      	movs	r0, r3
    4c8e:	4b03      	ldr	r3, [pc, #12]	; (4c9c <port_get_group_from_gpio_pin+0x20>)
    4c90:	4798      	blx	r3
    4c92:	0003      	movs	r3, r0
}
    4c94:	0018      	movs	r0, r3
    4c96:	46bd      	mov	sp, r7
    4c98:	b002      	add	sp, #8
    4c9a:	bd80      	pop	{r7, pc}
    4c9c:	00004c1d 	.word	0x00004c1d

00004ca0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b084      	sub	sp, #16
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	0002      	movs	r2, r0
    4ca8:	1dfb      	adds	r3, r7, #7
    4caa:	701a      	strb	r2, [r3, #0]
    4cac:	1dbb      	adds	r3, r7, #6
    4cae:	1c0a      	adds	r2, r1, #0
    4cb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4cb2:	1dfb      	adds	r3, r7, #7
    4cb4:	781b      	ldrb	r3, [r3, #0]
    4cb6:	0018      	movs	r0, r3
    4cb8:	4b0d      	ldr	r3, [pc, #52]	; (4cf0 <port_pin_set_output_level+0x50>)
    4cba:	4798      	blx	r3
    4cbc:	0003      	movs	r3, r0
    4cbe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4cc0:	1dfb      	adds	r3, r7, #7
    4cc2:	781b      	ldrb	r3, [r3, #0]
    4cc4:	221f      	movs	r2, #31
    4cc6:	4013      	ands	r3, r2
    4cc8:	2201      	movs	r2, #1
    4cca:	409a      	lsls	r2, r3
    4ccc:	0013      	movs	r3, r2
    4cce:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4cd0:	1dbb      	adds	r3, r7, #6
    4cd2:	781b      	ldrb	r3, [r3, #0]
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d003      	beq.n	4ce0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4cd8:	68fb      	ldr	r3, [r7, #12]
    4cda:	68ba      	ldr	r2, [r7, #8]
    4cdc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4cde:	e002      	b.n	4ce6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4ce0:	68fb      	ldr	r3, [r7, #12]
    4ce2:	68ba      	ldr	r2, [r7, #8]
    4ce4:	615a      	str	r2, [r3, #20]
	}
}
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	46bd      	mov	sp, r7
    4cea:	b004      	add	sp, #16
    4cec:	bd80      	pop	{r7, pc}
    4cee:	46c0      	nop			; (mov r8, r8)
    4cf0:	00004c7d 	.word	0x00004c7d

00004cf4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4cf4:	b580      	push	{r7, lr}
    4cf6:	b082      	sub	sp, #8
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4cfc:	687b      	ldr	r3, [r7, #4]
    4cfe:	2200      	movs	r2, #0
    4d00:	701a      	strb	r2, [r3, #0]
}
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	46bd      	mov	sp, r7
    4d06:	b002      	add	sp, #8
    4d08:	bd80      	pop	{r7, pc}
    4d0a:	46c0      	nop			; (mov r8, r8)

00004d0c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4d0c:	b580      	push	{r7, lr}
    4d0e:	b082      	sub	sp, #8
    4d10:	af00      	add	r7, sp, #0
    4d12:	0002      	movs	r2, r0
    4d14:	6039      	str	r1, [r7, #0]
    4d16:	1dfb      	adds	r3, r7, #7
    4d18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4d1a:	1dfb      	adds	r3, r7, #7
    4d1c:	781b      	ldrb	r3, [r3, #0]
    4d1e:	2b01      	cmp	r3, #1
    4d20:	d00a      	beq.n	4d38 <system_apb_clock_set_mask+0x2c>
    4d22:	2b02      	cmp	r3, #2
    4d24:	d00f      	beq.n	4d46 <system_apb_clock_set_mask+0x3a>
    4d26:	2b00      	cmp	r3, #0
    4d28:	d114      	bne.n	4d54 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4d2a:	4b0e      	ldr	r3, [pc, #56]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d2c:	4a0d      	ldr	r2, [pc, #52]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d2e:	6991      	ldr	r1, [r2, #24]
    4d30:	683a      	ldr	r2, [r7, #0]
    4d32:	430a      	orrs	r2, r1
    4d34:	619a      	str	r2, [r3, #24]
			break;
    4d36:	e00f      	b.n	4d58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4d38:	4b0a      	ldr	r3, [pc, #40]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d3a:	4a0a      	ldr	r2, [pc, #40]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d3c:	69d1      	ldr	r1, [r2, #28]
    4d3e:	683a      	ldr	r2, [r7, #0]
    4d40:	430a      	orrs	r2, r1
    4d42:	61da      	str	r2, [r3, #28]
			break;
    4d44:	e008      	b.n	4d58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4d46:	4b07      	ldr	r3, [pc, #28]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d48:	4a06      	ldr	r2, [pc, #24]	; (4d64 <system_apb_clock_set_mask+0x58>)
    4d4a:	6a11      	ldr	r1, [r2, #32]
    4d4c:	683a      	ldr	r2, [r7, #0]
    4d4e:	430a      	orrs	r2, r1
    4d50:	621a      	str	r2, [r3, #32]
			break;
    4d52:	e001      	b.n	4d58 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4d54:	2317      	movs	r3, #23
    4d56:	e000      	b.n	4d5a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4d58:	2300      	movs	r3, #0
}
    4d5a:	0018      	movs	r0, r3
    4d5c:	46bd      	mov	sp, r7
    4d5e:	b002      	add	sp, #8
    4d60:	bd80      	pop	{r7, pc}
    4d62:	46c0      	nop			; (mov r8, r8)
    4d64:	40000400 	.word	0x40000400

00004d68 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4d68:	b580      	push	{r7, lr}
    4d6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4d6c:	4b05      	ldr	r3, [pc, #20]	; (4d84 <system_is_debugger_present+0x1c>)
    4d6e:	789b      	ldrb	r3, [r3, #2]
    4d70:	b2db      	uxtb	r3, r3
    4d72:	001a      	movs	r2, r3
    4d74:	2302      	movs	r3, #2
    4d76:	4013      	ands	r3, r2
    4d78:	1e5a      	subs	r2, r3, #1
    4d7a:	4193      	sbcs	r3, r2
    4d7c:	b2db      	uxtb	r3, r3
}
    4d7e:	0018      	movs	r0, r3
    4d80:	46bd      	mov	sp, r7
    4d82:	bd80      	pop	{r7, pc}
    4d84:	41002000 	.word	0x41002000

00004d88 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4d88:	b580      	push	{r7, lr}
    4d8a:	b084      	sub	sp, #16
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4d90:	687b      	ldr	r3, [r7, #4]
    4d92:	681b      	ldr	r3, [r3, #0]
    4d94:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4d96:	68fb      	ldr	r3, [r7, #12]
    4d98:	7e1b      	ldrb	r3, [r3, #24]
    4d9a:	b2db      	uxtb	r3, r3
    4d9c:	001a      	movs	r2, r3
    4d9e:	2301      	movs	r3, #1
    4da0:	4013      	ands	r3, r2
    4da2:	1e5a      	subs	r2, r3, #1
    4da4:	4193      	sbcs	r3, r2
    4da6:	b2db      	uxtb	r3, r3
}
    4da8:	0018      	movs	r0, r3
    4daa:	46bd      	mov	sp, r7
    4dac:	b004      	add	sp, #16
    4dae:	bd80      	pop	{r7, pc}

00004db0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    4db0:	b580      	push	{r7, lr}
    4db2:	b084      	sub	sp, #16
    4db4:	af00      	add	r7, sp, #0
    4db6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	681b      	ldr	r3, [r3, #0]
    4dbc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4dbe:	68fb      	ldr	r3, [r7, #12]
    4dc0:	7e1b      	ldrb	r3, [r3, #24]
    4dc2:	b2db      	uxtb	r3, r3
    4dc4:	001a      	movs	r2, r3
    4dc6:	2304      	movs	r3, #4
    4dc8:	4013      	ands	r3, r2
    4dca:	1e5a      	subs	r2, r3, #1
    4dcc:	4193      	sbcs	r3, r2
    4dce:	b2db      	uxtb	r3, r3
}
    4dd0:	0018      	movs	r0, r3
    4dd2:	46bd      	mov	sp, r7
    4dd4:	b004      	add	sp, #16
    4dd6:	bd80      	pop	{r7, pc}

00004dd8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4dd8:	b580      	push	{r7, lr}
    4dda:	b084      	sub	sp, #16
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
    4de0:	000a      	movs	r2, r1
    4de2:	1cbb      	adds	r3, r7, #2
    4de4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	0018      	movs	r0, r3
    4df0:	4b0a      	ldr	r3, [pc, #40]	; (4e1c <spi_write+0x44>)
    4df2:	4798      	blx	r3
    4df4:	0003      	movs	r3, r0
    4df6:	001a      	movs	r2, r3
    4df8:	2301      	movs	r3, #1
    4dfa:	4053      	eors	r3, r2
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d001      	beq.n	4e06 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    4e02:	2305      	movs	r3, #5
    4e04:	e006      	b.n	4e14 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4e06:	1cbb      	adds	r3, r7, #2
    4e08:	881b      	ldrh	r3, [r3, #0]
    4e0a:	05db      	lsls	r3, r3, #23
    4e0c:	0dda      	lsrs	r2, r3, #23
    4e0e:	68fb      	ldr	r3, [r7, #12]
    4e10:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4e12:	2300      	movs	r3, #0
}
    4e14:	0018      	movs	r0, r3
    4e16:	46bd      	mov	sp, r7
    4e18:	b004      	add	sp, #16
    4e1a:	bd80      	pop	{r7, pc}
    4e1c:	00004d89 	.word	0x00004d89

00004e20 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4e20:	b580      	push	{r7, lr}
    4e22:	b084      	sub	sp, #16
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
    4e28:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	681b      	ldr	r3, [r3, #0]
    4e2e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4e30:	687b      	ldr	r3, [r7, #4]
    4e32:	0018      	movs	r0, r3
    4e34:	4b1b      	ldr	r3, [pc, #108]	; (4ea4 <spi_read+0x84>)
    4e36:	4798      	blx	r3
    4e38:	0003      	movs	r3, r0
    4e3a:	001a      	movs	r2, r3
    4e3c:	2301      	movs	r3, #1
    4e3e:	4053      	eors	r3, r2
    4e40:	b2db      	uxtb	r3, r3
    4e42:	2b00      	cmp	r3, #0
    4e44:	d001      	beq.n	4e4a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4e46:	2310      	movs	r3, #16
    4e48:	e027      	b.n	4e9a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4e4a:	230f      	movs	r3, #15
    4e4c:	18fb      	adds	r3, r7, r3
    4e4e:	2200      	movs	r2, #0
    4e50:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4e52:	68bb      	ldr	r3, [r7, #8]
    4e54:	8b5b      	ldrh	r3, [r3, #26]
    4e56:	b29b      	uxth	r3, r3
    4e58:	001a      	movs	r2, r3
    4e5a:	2304      	movs	r3, #4
    4e5c:	4013      	ands	r3, r2
    4e5e:	d006      	beq.n	4e6e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4e60:	230f      	movs	r3, #15
    4e62:	18fb      	adds	r3, r7, r3
    4e64:	221e      	movs	r2, #30
    4e66:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	2204      	movs	r2, #4
    4e6c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e6e:	687b      	ldr	r3, [r7, #4]
    4e70:	799b      	ldrb	r3, [r3, #6]
    4e72:	2b01      	cmp	r3, #1
    4e74:	d108      	bne.n	4e88 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e76:	68bb      	ldr	r3, [r7, #8]
    4e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e7a:	b29b      	uxth	r3, r3
    4e7c:	05db      	lsls	r3, r3, #23
    4e7e:	0ddb      	lsrs	r3, r3, #23
    4e80:	b29a      	uxth	r2, r3
    4e82:	683b      	ldr	r3, [r7, #0]
    4e84:	801a      	strh	r2, [r3, #0]
    4e86:	e005      	b.n	4e94 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4e88:	68bb      	ldr	r3, [r7, #8]
    4e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e8c:	b2db      	uxtb	r3, r3
    4e8e:	b29a      	uxth	r2, r3
    4e90:	683b      	ldr	r3, [r7, #0]
    4e92:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4e94:	230f      	movs	r3, #15
    4e96:	18fb      	adds	r3, r7, r3
    4e98:	781b      	ldrb	r3, [r3, #0]
}
    4e9a:	0018      	movs	r0, r3
    4e9c:	46bd      	mov	sp, r7
    4e9e:	b004      	add	sp, #16
    4ea0:	bd80      	pop	{r7, pc}
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	00004db1 	.word	0x00004db1

00004ea8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4ea8:	b590      	push	{r4, r7, lr}
    4eaa:	b093      	sub	sp, #76	; 0x4c
    4eac:	af00      	add	r7, sp, #0
    4eae:	6078      	str	r0, [r7, #4]
    4eb0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	681b      	ldr	r3, [r3, #0]
    4ebc:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4ebe:	231c      	movs	r3, #28
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	0018      	movs	r0, r3
    4ec4:	4b75      	ldr	r3, [pc, #468]	; (509c <_spi_set_config+0x1f4>)
    4ec6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4ec8:	231c      	movs	r3, #28
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	2200      	movs	r2, #0
    4ece:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4ed0:	683b      	ldr	r3, [r7, #0]
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	2b00      	cmp	r3, #0
    4ed6:	d103      	bne.n	4ee0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4ed8:	231c      	movs	r3, #28
    4eda:	18fb      	adds	r3, r7, r3
    4edc:	2200      	movs	r2, #0
    4ede:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4ee0:	683b      	ldr	r3, [r7, #0]
    4ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4ee4:	230c      	movs	r3, #12
    4ee6:	18fb      	adds	r3, r7, r3
    4ee8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4eea:	683b      	ldr	r3, [r7, #0]
    4eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4eee:	230c      	movs	r3, #12
    4ef0:	18fb      	adds	r3, r7, r3
    4ef2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4ef4:	683b      	ldr	r3, [r7, #0]
    4ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4ef8:	230c      	movs	r3, #12
    4efa:	18fb      	adds	r3, r7, r3
    4efc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4efe:	683b      	ldr	r3, [r7, #0]
    4f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4f02:	230c      	movs	r3, #12
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f08:	2347      	movs	r3, #71	; 0x47
    4f0a:	18fb      	adds	r3, r7, r3
    4f0c:	2200      	movs	r2, #0
    4f0e:	701a      	strb	r2, [r3, #0]
    4f10:	e02c      	b.n	4f6c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4f12:	2347      	movs	r3, #71	; 0x47
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	781a      	ldrb	r2, [r3, #0]
    4f18:	230c      	movs	r3, #12
    4f1a:	18fb      	adds	r3, r7, r3
    4f1c:	0092      	lsls	r2, r2, #2
    4f1e:	58d3      	ldr	r3, [r2, r3]
    4f20:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f24:	2b00      	cmp	r3, #0
    4f26:	d109      	bne.n	4f3c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4f28:	2347      	movs	r3, #71	; 0x47
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	781a      	ldrb	r2, [r3, #0]
    4f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4f30:	0011      	movs	r1, r2
    4f32:	0018      	movs	r0, r3
    4f34:	4b5a      	ldr	r3, [pc, #360]	; (50a0 <_spi_set_config+0x1f8>)
    4f36:	4798      	blx	r3
    4f38:	0003      	movs	r3, r0
    4f3a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f3e:	3301      	adds	r3, #1
    4f40:	d00d      	beq.n	4f5e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f44:	b2da      	uxtb	r2, r3
    4f46:	231c      	movs	r3, #28
    4f48:	18fb      	adds	r3, r7, r3
    4f4a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4f4e:	0c1b      	lsrs	r3, r3, #16
    4f50:	b2db      	uxtb	r3, r3
    4f52:	221c      	movs	r2, #28
    4f54:	18ba      	adds	r2, r7, r2
    4f56:	0011      	movs	r1, r2
    4f58:	0018      	movs	r0, r3
    4f5a:	4b52      	ldr	r3, [pc, #328]	; (50a4 <_spi_set_config+0x1fc>)
    4f5c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4f5e:	2347      	movs	r3, #71	; 0x47
    4f60:	18fb      	adds	r3, r7, r3
    4f62:	781a      	ldrb	r2, [r3, #0]
    4f64:	2347      	movs	r3, #71	; 0x47
    4f66:	18fb      	adds	r3, r7, r3
    4f68:	3201      	adds	r2, #1
    4f6a:	701a      	strb	r2, [r3, #0]
    4f6c:	2347      	movs	r3, #71	; 0x47
    4f6e:	18fb      	adds	r3, r7, r3
    4f70:	781b      	ldrb	r3, [r3, #0]
    4f72:	2b03      	cmp	r3, #3
    4f74:	d9cd      	bls.n	4f12 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    4f76:	683b      	ldr	r3, [r7, #0]
    4f78:	781a      	ldrb	r2, [r3, #0]
    4f7a:	687b      	ldr	r3, [r7, #4]
    4f7c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4f7e:	683b      	ldr	r3, [r7, #0]
    4f80:	7c1a      	ldrb	r2, [r3, #16]
    4f82:	687b      	ldr	r3, [r7, #4]
    4f84:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4f86:	683b      	ldr	r3, [r7, #0]
    4f88:	7c9a      	ldrb	r2, [r3, #18]
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4f8e:	683b      	ldr	r3, [r7, #0]
    4f90:	7d1a      	ldrb	r2, [r3, #20]
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4f96:	230a      	movs	r3, #10
    4f98:	18fb      	adds	r3, r7, r3
    4f9a:	2200      	movs	r2, #0
    4f9c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4f9e:	2300      	movs	r3, #0
    4fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4fa2:	2300      	movs	r3, #0
    4fa4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    4fa6:	683b      	ldr	r3, [r7, #0]
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	2b01      	cmp	r3, #1
    4fac:	d129      	bne.n	5002 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4fae:	687b      	ldr	r3, [r7, #4]
    4fb0:	681b      	ldr	r3, [r3, #0]
    4fb2:	0018      	movs	r0, r3
    4fb4:	4b3c      	ldr	r3, [pc, #240]	; (50a8 <_spi_set_config+0x200>)
    4fb6:	4798      	blx	r3
    4fb8:	0003      	movs	r3, r0
    4fba:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4fbe:	3314      	adds	r3, #20
    4fc0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4fc4:	b2db      	uxtb	r3, r3
    4fc6:	0018      	movs	r0, r3
    4fc8:	4b38      	ldr	r3, [pc, #224]	; (50ac <_spi_set_config+0x204>)
    4fca:	4798      	blx	r3
    4fcc:	0003      	movs	r3, r0
    4fce:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4fd0:	683b      	ldr	r3, [r7, #0]
    4fd2:	699b      	ldr	r3, [r3, #24]
    4fd4:	2223      	movs	r2, #35	; 0x23
    4fd6:	18bc      	adds	r4, r7, r2
    4fd8:	220a      	movs	r2, #10
    4fda:	18ba      	adds	r2, r7, r2
    4fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4fde:	0018      	movs	r0, r3
    4fe0:	4b33      	ldr	r3, [pc, #204]	; (50b0 <_spi_set_config+0x208>)
    4fe2:	4798      	blx	r3
    4fe4:	0003      	movs	r3, r0
    4fe6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4fe8:	2323      	movs	r3, #35	; 0x23
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	2b00      	cmp	r3, #0
    4ff0:	d001      	beq.n	4ff6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4ff2:	2317      	movs	r3, #23
    4ff4:	e04e      	b.n	5094 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4ff6:	230a      	movs	r3, #10
    4ff8:	18fb      	adds	r3, r7, r3
    4ffa:	881b      	ldrh	r3, [r3, #0]
    4ffc:	b2da      	uxtb	r2, r3
    4ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5000:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    5002:	683b      	ldr	r3, [r7, #0]
    5004:	685b      	ldr	r3, [r3, #4]
    5006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5008:	4313      	orrs	r3, r2
    500a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    500c:	683b      	ldr	r3, [r7, #0]
    500e:	689b      	ldr	r3, [r3, #8]
    5010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5012:	4313      	orrs	r3, r2
    5014:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    5016:	683b      	ldr	r3, [r7, #0]
    5018:	68db      	ldr	r3, [r3, #12]
    501a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    501c:	4313      	orrs	r3, r2
    501e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    5020:	683b      	ldr	r3, [r7, #0]
    5022:	7c1b      	ldrb	r3, [r3, #16]
    5024:	001a      	movs	r2, r3
    5026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5028:	4313      	orrs	r3, r2
    502a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    502c:	683b      	ldr	r3, [r7, #0]
    502e:	7c5b      	ldrb	r3, [r3, #17]
    5030:	2b00      	cmp	r3, #0
    5032:	d103      	bne.n	503c <_spi_set_config+0x194>
    5034:	4b1f      	ldr	r3, [pc, #124]	; (50b4 <_spi_set_config+0x20c>)
    5036:	4798      	blx	r3
    5038:	1e03      	subs	r3, r0, #0
    503a:	d003      	beq.n	5044 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    503e:	2280      	movs	r2, #128	; 0x80
    5040:	4313      	orrs	r3, r2
    5042:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    5044:	683b      	ldr	r3, [r7, #0]
    5046:	7c9b      	ldrb	r3, [r3, #18]
    5048:	2b00      	cmp	r3, #0
    504a:	d004      	beq.n	5056 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    504e:	2280      	movs	r2, #128	; 0x80
    5050:	0292      	lsls	r2, r2, #10
    5052:	4313      	orrs	r3, r2
    5054:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    5056:	683b      	ldr	r3, [r7, #0]
    5058:	7cdb      	ldrb	r3, [r3, #19]
    505a:	2b00      	cmp	r3, #0
    505c:	d004      	beq.n	5068 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5060:	2280      	movs	r2, #128	; 0x80
    5062:	0092      	lsls	r2, r2, #2
    5064:	4313      	orrs	r3, r2
    5066:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    5068:	683b      	ldr	r3, [r7, #0]
    506a:	7d1b      	ldrb	r3, [r3, #20]
    506c:	2b00      	cmp	r3, #0
    506e:	d004      	beq.n	507a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    5070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5072:	2280      	movs	r2, #128	; 0x80
    5074:	0192      	lsls	r2, r2, #6
    5076:	4313      	orrs	r3, r2
    5078:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    507c:	681a      	ldr	r2, [r3, #0]
    507e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5080:	431a      	orrs	r2, r3
    5082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5084:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    5086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5088:	685a      	ldr	r2, [r3, #4]
    508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    508c:	431a      	orrs	r2, r3
    508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5090:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    5092:	2300      	movs	r3, #0
}
    5094:	0018      	movs	r0, r3
    5096:	46bd      	mov	sp, r7
    5098:	b013      	add	sp, #76	; 0x4c
    509a:	bd90      	pop	{r4, r7, pc}
    509c:	00004bf5 	.word	0x00004bf5
    50a0:	0000488d 	.word	0x0000488d
    50a4:	000073ed 	.word	0x000073ed
    50a8:	00004a49 	.word	0x00004a49
    50ac:	00007225 	.word	0x00007225
    50b0:	00004599 	.word	0x00004599
    50b4:	00004d69 	.word	0x00004d69

000050b8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    50b8:	b590      	push	{r4, r7, lr}
    50ba:	b08b      	sub	sp, #44	; 0x2c
    50bc:	af00      	add	r7, sp, #0
    50be:	60f8      	str	r0, [r7, #12]
    50c0:	60b9      	str	r1, [r7, #8]
    50c2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    50c4:	68fb      	ldr	r3, [r7, #12]
    50c6:	68ba      	ldr	r2, [r7, #8]
    50c8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    50d0:	6a3b      	ldr	r3, [r7, #32]
    50d2:	681b      	ldr	r3, [r3, #0]
    50d4:	2202      	movs	r2, #2
    50d6:	4013      	ands	r3, r2
    50d8:	d001      	beq.n	50de <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    50da:	231c      	movs	r3, #28
    50dc:	e09c      	b.n	5218 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    50de:	6a3b      	ldr	r3, [r7, #32]
    50e0:	681b      	ldr	r3, [r3, #0]
    50e2:	2201      	movs	r2, #1
    50e4:	4013      	ands	r3, r2
    50e6:	d001      	beq.n	50ec <spi_init+0x34>
		return STATUS_BUSY;
    50e8:	2305      	movs	r3, #5
    50ea:	e095      	b.n	5218 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    50ec:	68fb      	ldr	r3, [r7, #12]
    50ee:	681b      	ldr	r3, [r3, #0]
    50f0:	0018      	movs	r0, r3
    50f2:	4b4b      	ldr	r3, [pc, #300]	; (5220 <spi_init+0x168>)
    50f4:	4798      	blx	r3
    50f6:	0003      	movs	r3, r0
    50f8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    50fa:	69fb      	ldr	r3, [r7, #28]
    50fc:	3302      	adds	r3, #2
    50fe:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5100:	69fb      	ldr	r3, [r7, #28]
    5102:	3314      	adds	r3, #20
    5104:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5106:	2201      	movs	r2, #1
    5108:	69bb      	ldr	r3, [r7, #24]
    510a:	409a      	lsls	r2, r3
    510c:	0013      	movs	r3, r2
    510e:	0019      	movs	r1, r3
    5110:	2002      	movs	r0, #2
    5112:	4b44      	ldr	r3, [pc, #272]	; (5224 <spi_init+0x16c>)
    5114:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5116:	2310      	movs	r3, #16
    5118:	18fb      	adds	r3, r7, r3
    511a:	0018      	movs	r0, r3
    511c:	4b42      	ldr	r3, [pc, #264]	; (5228 <spi_init+0x170>)
    511e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	2224      	movs	r2, #36	; 0x24
    5124:	5c9a      	ldrb	r2, [r3, r2]
    5126:	2310      	movs	r3, #16
    5128:	18fb      	adds	r3, r7, r3
    512a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    512c:	697b      	ldr	r3, [r7, #20]
    512e:	b2db      	uxtb	r3, r3
    5130:	2210      	movs	r2, #16
    5132:	18ba      	adds	r2, r7, r2
    5134:	0011      	movs	r1, r2
    5136:	0018      	movs	r0, r3
    5138:	4b3c      	ldr	r3, [pc, #240]	; (522c <spi_init+0x174>)
    513a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    513c:	697b      	ldr	r3, [r7, #20]
    513e:	b2db      	uxtb	r3, r3
    5140:	0018      	movs	r0, r3
    5142:	4b3b      	ldr	r3, [pc, #236]	; (5230 <spi_init+0x178>)
    5144:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5146:	687b      	ldr	r3, [r7, #4]
    5148:	2224      	movs	r2, #36	; 0x24
    514a:	5c9b      	ldrb	r3, [r3, r2]
    514c:	2100      	movs	r1, #0
    514e:	0018      	movs	r0, r3
    5150:	4b38      	ldr	r3, [pc, #224]	; (5234 <spi_init+0x17c>)
    5152:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	781b      	ldrb	r3, [r3, #0]
    5158:	2b01      	cmp	r3, #1
    515a:	d105      	bne.n	5168 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    515c:	6a3b      	ldr	r3, [r7, #32]
    515e:	681b      	ldr	r3, [r3, #0]
    5160:	220c      	movs	r2, #12
    5162:	431a      	orrs	r2, r3
    5164:	6a3b      	ldr	r3, [r7, #32]
    5166:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5168:	2327      	movs	r3, #39	; 0x27
    516a:	18fb      	adds	r3, r7, r3
    516c:	2200      	movs	r2, #0
    516e:	701a      	strb	r2, [r3, #0]
    5170:	e010      	b.n	5194 <spi_init+0xdc>
		module->callback[i]        = NULL;
    5172:	2327      	movs	r3, #39	; 0x27
    5174:	18fb      	adds	r3, r7, r3
    5176:	781b      	ldrb	r3, [r3, #0]
    5178:	68fa      	ldr	r2, [r7, #12]
    517a:	3302      	adds	r3, #2
    517c:	009b      	lsls	r3, r3, #2
    517e:	18d3      	adds	r3, r2, r3
    5180:	3304      	adds	r3, #4
    5182:	2200      	movs	r2, #0
    5184:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5186:	2327      	movs	r3, #39	; 0x27
    5188:	18fb      	adds	r3, r7, r3
    518a:	781a      	ldrb	r2, [r3, #0]
    518c:	2327      	movs	r3, #39	; 0x27
    518e:	18fb      	adds	r3, r7, r3
    5190:	3201      	adds	r2, #1
    5192:	701a      	strb	r2, [r3, #0]
    5194:	2327      	movs	r3, #39	; 0x27
    5196:	18fb      	adds	r3, r7, r3
    5198:	781b      	ldrb	r3, [r3, #0]
    519a:	2b06      	cmp	r3, #6
    519c:	d9e9      	bls.n	5172 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	2200      	movs	r2, #0
    51a2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    51a4:	68fb      	ldr	r3, [r7, #12]
    51a6:	2200      	movs	r2, #0
    51a8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    51aa:	68fb      	ldr	r3, [r7, #12]
    51ac:	2200      	movs	r2, #0
    51ae:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    51b0:	68fb      	ldr	r3, [r7, #12]
    51b2:	2200      	movs	r2, #0
    51b4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    51b6:	68fb      	ldr	r3, [r7, #12]
    51b8:	2236      	movs	r2, #54	; 0x36
    51ba:	2100      	movs	r1, #0
    51bc:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    51be:	68fb      	ldr	r3, [r7, #12]
    51c0:	2237      	movs	r2, #55	; 0x37
    51c2:	2100      	movs	r1, #0
    51c4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    51c6:	68fb      	ldr	r3, [r7, #12]
    51c8:	2238      	movs	r2, #56	; 0x38
    51ca:	2100      	movs	r1, #0
    51cc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    51ce:	68fb      	ldr	r3, [r7, #12]
    51d0:	2203      	movs	r2, #3
    51d2:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    51d4:	68fb      	ldr	r3, [r7, #12]
    51d6:	2200      	movs	r2, #0
    51d8:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    51da:	68fb      	ldr	r3, [r7, #12]
    51dc:	681b      	ldr	r3, [r3, #0]
    51de:	2213      	movs	r2, #19
    51e0:	18bc      	adds	r4, r7, r2
    51e2:	0018      	movs	r0, r3
    51e4:	4b0e      	ldr	r3, [pc, #56]	; (5220 <spi_init+0x168>)
    51e6:	4798      	blx	r3
    51e8:	0003      	movs	r3, r0
    51ea:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    51ec:	4a12      	ldr	r2, [pc, #72]	; (5238 <spi_init+0x180>)
    51ee:	2313      	movs	r3, #19
    51f0:	18fb      	adds	r3, r7, r3
    51f2:	781b      	ldrb	r3, [r3, #0]
    51f4:	0011      	movs	r1, r2
    51f6:	0018      	movs	r0, r3
    51f8:	4b10      	ldr	r3, [pc, #64]	; (523c <spi_init+0x184>)
    51fa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    51fc:	2313      	movs	r3, #19
    51fe:	18fb      	adds	r3, r7, r3
    5200:	781a      	ldrb	r2, [r3, #0]
    5202:	4b0f      	ldr	r3, [pc, #60]	; (5240 <spi_init+0x188>)
    5204:	0092      	lsls	r2, r2, #2
    5206:	68f9      	ldr	r1, [r7, #12]
    5208:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    520a:	687a      	ldr	r2, [r7, #4]
    520c:	68fb      	ldr	r3, [r7, #12]
    520e:	0011      	movs	r1, r2
    5210:	0018      	movs	r0, r3
    5212:	4b0c      	ldr	r3, [pc, #48]	; (5244 <spi_init+0x18c>)
    5214:	4798      	blx	r3
    5216:	0003      	movs	r3, r0
}
    5218:	0018      	movs	r0, r3
    521a:	46bd      	mov	sp, r7
    521c:	b00b      	add	sp, #44	; 0x2c
    521e:	bd90      	pop	{r4, r7, pc}
    5220:	00004a49 	.word	0x00004a49
    5224:	00004d0d 	.word	0x00004d0d
    5228:	00004cf5 	.word	0x00004cf5
    522c:	00007101 	.word	0x00007101
    5230:	00007145 	.word	0x00007145
    5234:	00004801 	.word	0x00004801
    5238:	000056ad 	.word	0x000056ad
    523c:	00004aad 	.word	0x00004aad
    5240:	20004610 	.word	0x20004610
    5244:	00004ea9 	.word	0x00004ea9

00005248 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    5248:	b590      	push	{r4, r7, lr}
    524a:	b087      	sub	sp, #28
    524c:	af00      	add	r7, sp, #0
    524e:	60f8      	str	r0, [r7, #12]
    5250:	60b9      	str	r1, [r7, #8]
    5252:	0019      	movs	r1, r3
    5254:	1dbb      	adds	r3, r7, #6
    5256:	801a      	strh	r2, [r3, #0]
    5258:	1d3b      	adds	r3, r7, #4
    525a:	1c0a      	adds	r2, r1, #0
    525c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    525e:	68fb      	ldr	r3, [r7, #12]
    5260:	2238      	movs	r2, #56	; 0x38
    5262:	5c9b      	ldrb	r3, [r3, r2]
    5264:	b2db      	uxtb	r3, r3
    5266:	2b05      	cmp	r3, #5
    5268:	d101      	bne.n	526e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    526a:	2305      	movs	r3, #5
    526c:	e07a      	b.n	5364 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    526e:	1dbb      	adds	r3, r7, #6
    5270:	881b      	ldrh	r3, [r3, #0]
    5272:	2b00      	cmp	r3, #0
    5274:	d101      	bne.n	527a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    5276:	2317      	movs	r3, #23
    5278:	e074      	b.n	5364 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    527a:	68fb      	ldr	r3, [r7, #12]
    527c:	79db      	ldrb	r3, [r3, #7]
    527e:	2201      	movs	r2, #1
    5280:	4053      	eors	r3, r2
    5282:	b2db      	uxtb	r3, r3
    5284:	2b00      	cmp	r3, #0
    5286:	d001      	beq.n	528c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    5288:	231c      	movs	r3, #28
    528a:	e06b      	b.n	5364 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    528c:	2316      	movs	r3, #22
    528e:	18fb      	adds	r3, r7, r3
    5290:	2200      	movs	r2, #0
    5292:	801a      	strh	r2, [r3, #0]

	while (length--) {
    5294:	e05e      	b.n	5354 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    5296:	68fb      	ldr	r3, [r7, #12]
    5298:	795b      	ldrb	r3, [r3, #5]
    529a:	2b01      	cmp	r3, #1
    529c:	d112      	bne.n	52c4 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	68fb      	ldr	r3, [r7, #12]
    52a2:	0018      	movs	r0, r3
    52a4:	4b31      	ldr	r3, [pc, #196]	; (536c <spi_read_buffer_wait+0x124>)
    52a6:	4798      	blx	r3
    52a8:	0003      	movs	r3, r0
    52aa:	001a      	movs	r2, r3
    52ac:	2301      	movs	r3, #1
    52ae:	4053      	eors	r3, r2
    52b0:	b2db      	uxtb	r3, r3
    52b2:	2b00      	cmp	r3, #0
    52b4:	d1f4      	bne.n	52a0 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    52b6:	1d3b      	adds	r3, r7, #4
    52b8:	881a      	ldrh	r2, [r3, #0]
    52ba:	68fb      	ldr	r3, [r7, #12]
    52bc:	0011      	movs	r1, r2
    52be:	0018      	movs	r0, r3
    52c0:	4b2b      	ldr	r3, [pc, #172]	; (5370 <spi_read_buffer_wait+0x128>)
    52c2:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    52c4:	46c0      	nop			; (mov r8, r8)
    52c6:	68fb      	ldr	r3, [r7, #12]
    52c8:	0018      	movs	r0, r3
    52ca:	4b2a      	ldr	r3, [pc, #168]	; (5374 <spi_read_buffer_wait+0x12c>)
    52cc:	4798      	blx	r3
    52ce:	0003      	movs	r3, r0
    52d0:	001a      	movs	r2, r3
    52d2:	2301      	movs	r3, #1
    52d4:	4053      	eors	r3, r2
    52d6:	b2db      	uxtb	r3, r3
    52d8:	2b00      	cmp	r3, #0
    52da:	d1f4      	bne.n	52c6 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    52dc:	2312      	movs	r3, #18
    52de:	18fb      	adds	r3, r7, r3
    52e0:	2200      	movs	r2, #0
    52e2:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    52e4:	2315      	movs	r3, #21
    52e6:	18fc      	adds	r4, r7, r3
    52e8:	2312      	movs	r3, #18
    52ea:	18fa      	adds	r2, r7, r3
    52ec:	68fb      	ldr	r3, [r7, #12]
    52ee:	0011      	movs	r1, r2
    52f0:	0018      	movs	r0, r3
    52f2:	4b21      	ldr	r3, [pc, #132]	; (5378 <spi_read_buffer_wait+0x130>)
    52f4:	4798      	blx	r3
    52f6:	0003      	movs	r3, r0
    52f8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    52fa:	2315      	movs	r3, #21
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	781b      	ldrb	r3, [r3, #0]
    5300:	2b00      	cmp	r3, #0
    5302:	d003      	beq.n	530c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    5304:	2315      	movs	r3, #21
    5306:	18fb      	adds	r3, r7, r3
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	e02b      	b.n	5364 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    530c:	2316      	movs	r3, #22
    530e:	18fb      	adds	r3, r7, r3
    5310:	881b      	ldrh	r3, [r3, #0]
    5312:	2216      	movs	r2, #22
    5314:	18ba      	adds	r2, r7, r2
    5316:	1c59      	adds	r1, r3, #1
    5318:	8011      	strh	r1, [r2, #0]
    531a:	001a      	movs	r2, r3
    531c:	68bb      	ldr	r3, [r7, #8]
    531e:	189b      	adds	r3, r3, r2
    5320:	2212      	movs	r2, #18
    5322:	18ba      	adds	r2, r7, r2
    5324:	8812      	ldrh	r2, [r2, #0]
    5326:	b2d2      	uxtb	r2, r2
    5328:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    532a:	68fb      	ldr	r3, [r7, #12]
    532c:	799b      	ldrb	r3, [r3, #6]
    532e:	2b01      	cmp	r3, #1
    5330:	d110      	bne.n	5354 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    5332:	2316      	movs	r3, #22
    5334:	18fb      	adds	r3, r7, r3
    5336:	881b      	ldrh	r3, [r3, #0]
    5338:	2216      	movs	r2, #22
    533a:	18ba      	adds	r2, r7, r2
    533c:	1c59      	adds	r1, r3, #1
    533e:	8011      	strh	r1, [r2, #0]
    5340:	001a      	movs	r2, r3
    5342:	68bb      	ldr	r3, [r7, #8]
    5344:	189b      	adds	r3, r3, r2
    5346:	2212      	movs	r2, #18
    5348:	18ba      	adds	r2, r7, r2
    534a:	8812      	ldrh	r2, [r2, #0]
    534c:	0a12      	lsrs	r2, r2, #8
    534e:	b292      	uxth	r2, r2
    5350:	b2d2      	uxtb	r2, r2
    5352:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5354:	1dbb      	adds	r3, r7, #6
    5356:	881b      	ldrh	r3, [r3, #0]
    5358:	1dba      	adds	r2, r7, #6
    535a:	1e59      	subs	r1, r3, #1
    535c:	8011      	strh	r1, [r2, #0]
    535e:	2b00      	cmp	r3, #0
    5360:	d199      	bne.n	5296 <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    5362:	2300      	movs	r3, #0
}
    5364:	0018      	movs	r0, r3
    5366:	46bd      	mov	sp, r7
    5368:	b007      	add	sp, #28
    536a:	bd90      	pop	{r4, r7, pc}
    536c:	00004d89 	.word	0x00004d89
    5370:	00004dd9 	.word	0x00004dd9
    5374:	00004db1 	.word	0x00004db1
    5378:	00004e21 	.word	0x00004e21

0000537c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    537c:	b580      	push	{r7, lr}
    537e:	b086      	sub	sp, #24
    5380:	af00      	add	r7, sp, #0
    5382:	60f8      	str	r0, [r7, #12]
    5384:	60b9      	str	r1, [r7, #8]
    5386:	1dfb      	adds	r3, r7, #7
    5388:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    538a:	68fb      	ldr	r3, [r7, #12]
    538c:	795b      	ldrb	r3, [r3, #5]
    538e:	2b01      	cmp	r3, #1
    5390:	d001      	beq.n	5396 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    5392:	2315      	movs	r3, #21
    5394:	e05c      	b.n	5450 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    5396:	68fb      	ldr	r3, [r7, #12]
    5398:	7a1b      	ldrb	r3, [r3, #8]
    539a:	2201      	movs	r2, #1
    539c:	4053      	eors	r3, r2
    539e:	b2db      	uxtb	r3, r3
    53a0:	2b00      	cmp	r3, #0
    53a2:	d054      	beq.n	544e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    53a4:	1dfb      	adds	r3, r7, #7
    53a6:	781b      	ldrb	r3, [r3, #0]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d04a      	beq.n	5442 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    53ac:	68bb      	ldr	r3, [r7, #8]
    53ae:	785b      	ldrb	r3, [r3, #1]
    53b0:	2b00      	cmp	r3, #0
    53b2:	d03f      	beq.n	5434 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    53b4:	68fb      	ldr	r3, [r7, #12]
    53b6:	0018      	movs	r0, r3
    53b8:	4b27      	ldr	r3, [pc, #156]	; (5458 <spi_select_slave+0xdc>)
    53ba:	4798      	blx	r3
    53bc:	0003      	movs	r3, r0
    53be:	001a      	movs	r2, r3
    53c0:	2301      	movs	r3, #1
    53c2:	4053      	eors	r3, r2
    53c4:	b2db      	uxtb	r3, r3
    53c6:	2b00      	cmp	r3, #0
    53c8:	d007      	beq.n	53da <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    53ca:	68bb      	ldr	r3, [r7, #8]
    53cc:	781b      	ldrb	r3, [r3, #0]
    53ce:	2101      	movs	r1, #1
    53d0:	0018      	movs	r0, r3
    53d2:	4b22      	ldr	r3, [pc, #136]	; (545c <spi_select_slave+0xe0>)
    53d4:	4798      	blx	r3
					return STATUS_BUSY;
    53d6:	2305      	movs	r3, #5
    53d8:	e03a      	b.n	5450 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    53da:	68bb      	ldr	r3, [r7, #8]
    53dc:	781b      	ldrb	r3, [r3, #0]
    53de:	2100      	movs	r1, #0
    53e0:	0018      	movs	r0, r3
    53e2:	4b1e      	ldr	r3, [pc, #120]	; (545c <spi_select_slave+0xe0>)
    53e4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    53e6:	68bb      	ldr	r3, [r7, #8]
    53e8:	789b      	ldrb	r3, [r3, #2]
    53ea:	b29a      	uxth	r2, r3
    53ec:	68fb      	ldr	r3, [r7, #12]
    53ee:	0011      	movs	r1, r2
    53f0:	0018      	movs	r0, r3
    53f2:	4b1b      	ldr	r3, [pc, #108]	; (5460 <spi_select_slave+0xe4>)
    53f4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    53f6:	68fb      	ldr	r3, [r7, #12]
    53f8:	79db      	ldrb	r3, [r3, #7]
    53fa:	2201      	movs	r2, #1
    53fc:	4053      	eors	r3, r2
    53fe:	b2db      	uxtb	r3, r3
    5400:	2b00      	cmp	r3, #0
    5402:	d024      	beq.n	544e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    5404:	46c0      	nop			; (mov r8, r8)
    5406:	68fb      	ldr	r3, [r7, #12]
    5408:	0018      	movs	r0, r3
    540a:	4b16      	ldr	r3, [pc, #88]	; (5464 <spi_select_slave+0xe8>)
    540c:	4798      	blx	r3
    540e:	0003      	movs	r3, r0
    5410:	001a      	movs	r2, r3
    5412:	2301      	movs	r3, #1
    5414:	4053      	eors	r3, r2
    5416:	b2db      	uxtb	r3, r3
    5418:	2b00      	cmp	r3, #0
    541a:	d1f4      	bne.n	5406 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    541c:	2316      	movs	r3, #22
    541e:	18fb      	adds	r3, r7, r3
    5420:	2200      	movs	r2, #0
    5422:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    5424:	2316      	movs	r3, #22
    5426:	18fa      	adds	r2, r7, r3
    5428:	68fb      	ldr	r3, [r7, #12]
    542a:	0011      	movs	r1, r2
    542c:	0018      	movs	r0, r3
    542e:	4b0e      	ldr	r3, [pc, #56]	; (5468 <spi_select_slave+0xec>)
    5430:	4798      	blx	r3
    5432:	e00c      	b.n	544e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    5434:	68bb      	ldr	r3, [r7, #8]
    5436:	781b      	ldrb	r3, [r3, #0]
    5438:	2100      	movs	r1, #0
    543a:	0018      	movs	r0, r3
    543c:	4b07      	ldr	r3, [pc, #28]	; (545c <spi_select_slave+0xe0>)
    543e:	4798      	blx	r3
    5440:	e005      	b.n	544e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    5442:	68bb      	ldr	r3, [r7, #8]
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	2101      	movs	r1, #1
    5448:	0018      	movs	r0, r3
    544a:	4b04      	ldr	r3, [pc, #16]	; (545c <spi_select_slave+0xe0>)
    544c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    544e:	2300      	movs	r3, #0
}
    5450:	0018      	movs	r0, r3
    5452:	46bd      	mov	sp, r7
    5454:	b006      	add	sp, #24
    5456:	bd80      	pop	{r7, pc}
    5458:	00004d89 	.word	0x00004d89
    545c:	00004ca1 	.word	0x00004ca1
    5460:	00004dd9 	.word	0x00004dd9
    5464:	00004db1 	.word	0x00004db1
    5468:	00004e21 	.word	0x00004e21

0000546c <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    546c:	b580      	push	{r7, lr}
    546e:	b086      	sub	sp, #24
    5470:	af00      	add	r7, sp, #0
    5472:	60f8      	str	r0, [r7, #12]
    5474:	60b9      	str	r1, [r7, #8]
    5476:	1dbb      	adds	r3, r7, #6
    5478:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    547a:	68fb      	ldr	r3, [r7, #12]
    547c:	1dba      	adds	r2, r7, #6
    547e:	8812      	ldrh	r2, [r2, #0]
    5480:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    5482:	68fb      	ldr	r3, [r7, #12]
    5484:	1dba      	adds	r2, r7, #6
    5486:	8812      	ldrh	r2, [r2, #0]
    5488:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    548a:	68fb      	ldr	r3, [r7, #12]
    548c:	68ba      	ldr	r2, [r7, #8]
    548e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    5490:	68fb      	ldr	r3, [r7, #12]
    5492:	2238      	movs	r2, #56	; 0x38
    5494:	2105      	movs	r1, #5
    5496:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    5498:	68fb      	ldr	r3, [r7, #12]
    549a:	2201      	movs	r2, #1
    549c:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    549e:	68fb      	ldr	r3, [r7, #12]
    54a0:	681b      	ldr	r3, [r3, #0]
    54a2:	617b      	str	r3, [r7, #20]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
	}
#  endif

	if (module->receiver_enabled) {
    54a4:	68fb      	ldr	r3, [r7, #12]
    54a6:	79db      	ldrb	r3, [r3, #7]
    54a8:	2b00      	cmp	r3, #0
    54aa:	d003      	beq.n	54b4 <_spi_write_buffer+0x48>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    54ac:	697b      	ldr	r3, [r7, #20]
    54ae:	2205      	movs	r2, #5
    54b0:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    54b2:	e002      	b.n	54ba <_spi_write_buffer+0x4e>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    54b4:	697b      	ldr	r3, [r7, #20]
    54b6:	2201      	movs	r2, #1
    54b8:	759a      	strb	r2, [r3, #22]
	}
}
    54ba:	46c0      	nop			; (mov r8, r8)
    54bc:	46bd      	mov	sp, r7
    54be:	b006      	add	sp, #24
    54c0:	bd80      	pop	{r7, pc}
    54c2:	46c0      	nop			; (mov r8, r8)

000054c4 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    54c4:	b580      	push	{r7, lr}
    54c6:	b084      	sub	sp, #16
    54c8:	af00      	add	r7, sp, #0
    54ca:	60f8      	str	r0, [r7, #12]
    54cc:	60b9      	str	r1, [r7, #8]
    54ce:	1dfb      	adds	r3, r7, #7
    54d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    54d2:	1dfb      	adds	r3, r7, #7
    54d4:	781b      	ldrb	r3, [r3, #0]
    54d6:	68fa      	ldr	r2, [r7, #12]
    54d8:	3302      	adds	r3, #2
    54da:	009b      	lsls	r3, r3, #2
    54dc:	18d3      	adds	r3, r2, r3
    54de:	3304      	adds	r3, #4
    54e0:	68ba      	ldr	r2, [r7, #8]
    54e2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    54e4:	68fb      	ldr	r3, [r7, #12]
    54e6:	2236      	movs	r2, #54	; 0x36
    54e8:	5c9b      	ldrb	r3, [r3, r2]
    54ea:	b25a      	sxtb	r2, r3
    54ec:	1dfb      	adds	r3, r7, #7
    54ee:	781b      	ldrb	r3, [r3, #0]
    54f0:	2101      	movs	r1, #1
    54f2:	4099      	lsls	r1, r3
    54f4:	000b      	movs	r3, r1
    54f6:	b25b      	sxtb	r3, r3
    54f8:	4313      	orrs	r3, r2
    54fa:	b25b      	sxtb	r3, r3
    54fc:	b2d9      	uxtb	r1, r3
    54fe:	68fb      	ldr	r3, [r7, #12]
    5500:	2236      	movs	r2, #54	; 0x36
    5502:	5499      	strb	r1, [r3, r2]
}
    5504:	46c0      	nop			; (mov r8, r8)
    5506:	46bd      	mov	sp, r7
    5508:	b004      	add	sp, #16
    550a:	bd80      	pop	{r7, pc}

0000550c <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    550c:	b580      	push	{r7, lr}
    550e:	b084      	sub	sp, #16
    5510:	af00      	add	r7, sp, #0
    5512:	60f8      	str	r0, [r7, #12]
    5514:	60b9      	str	r1, [r7, #8]
    5516:	1dbb      	adds	r3, r7, #6
    5518:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    551a:	1dbb      	adds	r3, r7, #6
    551c:	881b      	ldrh	r3, [r3, #0]
    551e:	2b00      	cmp	r3, #0
    5520:	d101      	bne.n	5526 <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5522:	2317      	movs	r3, #23
    5524:	e00f      	b.n	5546 <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    5526:	68fb      	ldr	r3, [r7, #12]
    5528:	2238      	movs	r2, #56	; 0x38
    552a:	5c9b      	ldrb	r3, [r3, r2]
    552c:	b2db      	uxtb	r3, r3
    552e:	2b05      	cmp	r3, #5
    5530:	d101      	bne.n	5536 <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    5532:	2305      	movs	r3, #5
    5534:	e007      	b.n	5546 <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    5536:	1dbb      	adds	r3, r7, #6
    5538:	881a      	ldrh	r2, [r3, #0]
    553a:	68b9      	ldr	r1, [r7, #8]
    553c:	68fb      	ldr	r3, [r7, #12]
    553e:	0018      	movs	r0, r3
    5540:	4b03      	ldr	r3, [pc, #12]	; (5550 <spi_write_buffer_job+0x44>)
    5542:	4798      	blx	r3

	return STATUS_OK;
    5544:	2300      	movs	r3, #0
}
    5546:	0018      	movs	r0, r3
    5548:	46bd      	mov	sp, r7
    554a:	b004      	add	sp, #16
    554c:	bd80      	pop	{r7, pc}
    554e:	46c0      	nop			; (mov r8, r8)
    5550:	0000546d 	.word	0x0000546d

00005554 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    5554:	b580      	push	{r7, lr}
    5556:	b084      	sub	sp, #16
    5558:	af00      	add	r7, sp, #0
    555a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	681b      	ldr	r3, [r3, #0]
    5560:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5566:	781b      	ldrb	r3, [r3, #0]
    5568:	b2da      	uxtb	r2, r3
    556a:	230e      	movs	r3, #14
    556c:	18fb      	adds	r3, r7, r3
    556e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    5570:	687b      	ldr	r3, [r7, #4]
    5572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5574:	1c5a      	adds	r2, r3, #1
    5576:	687b      	ldr	r3, [r7, #4]
    5578:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    557a:	687b      	ldr	r3, [r7, #4]
    557c:	799b      	ldrb	r3, [r3, #6]
    557e:	2b01      	cmp	r3, #1
    5580:	d113      	bne.n	55aa <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5582:	687b      	ldr	r3, [r7, #4]
    5584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5586:	781b      	ldrb	r3, [r3, #0]
    5588:	b2db      	uxtb	r3, r3
    558a:	021b      	lsls	r3, r3, #8
    558c:	b21a      	sxth	r2, r3
    558e:	230e      	movs	r3, #14
    5590:	18fb      	adds	r3, r7, r3
    5592:	2100      	movs	r1, #0
    5594:	5e5b      	ldrsh	r3, [r3, r1]
    5596:	4313      	orrs	r3, r2
    5598:	b21a      	sxth	r2, r3
    559a:	230e      	movs	r3, #14
    559c:	18fb      	adds	r3, r7, r3
    559e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55a4:	1c5a      	adds	r2, r3, #1
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    55aa:	230e      	movs	r3, #14
    55ac:	18fb      	adds	r3, r7, r3
    55ae:	881b      	ldrh	r3, [r3, #0]
    55b0:	05db      	lsls	r3, r3, #23
    55b2:	0dda      	lsrs	r2, r3, #23
    55b4:	68bb      	ldr	r3, [r7, #8]
    55b6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    55b8:	687b      	ldr	r3, [r7, #4]
    55ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    55bc:	b29b      	uxth	r3, r3
    55be:	3b01      	subs	r3, #1
    55c0:	b29a      	uxth	r2, r3
    55c2:	687b      	ldr	r3, [r7, #4]
    55c4:	869a      	strh	r2, [r3, #52]	; 0x34
}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	46bd      	mov	sp, r7
    55ca:	b004      	add	sp, #16
    55cc:	bd80      	pop	{r7, pc}
    55ce:	46c0      	nop			; (mov r8, r8)

000055d0 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    55d0:	b580      	push	{r7, lr}
    55d2:	b084      	sub	sp, #16
    55d4:	af00      	add	r7, sp, #0
    55d6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    55d8:	687b      	ldr	r3, [r7, #4]
    55da:	681b      	ldr	r3, [r3, #0]
    55dc:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    55de:	4b08      	ldr	r3, [pc, #32]	; (5600 <_spi_write_dummy+0x30>)
    55e0:	881b      	ldrh	r3, [r3, #0]
    55e2:	001a      	movs	r2, r3
    55e4:	68fb      	ldr	r3, [r7, #12]
    55e6:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    55ec:	b29b      	uxth	r3, r3
    55ee:	3b01      	subs	r3, #1
    55f0:	b29a      	uxth	r2, r3
    55f2:	687b      	ldr	r3, [r7, #4]
    55f4:	865a      	strh	r2, [r3, #50]	; 0x32
}
    55f6:	46c0      	nop			; (mov r8, r8)
    55f8:	46bd      	mov	sp, r7
    55fa:	b004      	add	sp, #16
    55fc:	bd80      	pop	{r7, pc}
    55fe:	46c0      	nop			; (mov r8, r8)
    5600:	20004628 	.word	0x20004628

00005604 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    5604:	b580      	push	{r7, lr}
    5606:	b084      	sub	sp, #16
    5608:	af00      	add	r7, sp, #0
    560a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	681b      	ldr	r3, [r3, #0]
    5610:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    5612:	230a      	movs	r3, #10
    5614:	18fb      	adds	r3, r7, r3
    5616:	2200      	movs	r2, #0
    5618:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    561a:	68fb      	ldr	r3, [r7, #12]
    561c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    561e:	230a      	movs	r3, #10
    5620:	18fb      	adds	r3, r7, r3
    5622:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5628:	b29b      	uxth	r3, r3
    562a:	3b01      	subs	r3, #1
    562c:	b29a      	uxth	r2, r3
    562e:	687b      	ldr	r3, [r7, #4]
    5630:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	46bd      	mov	sp, r7
    5636:	b004      	add	sp, #16
    5638:	bd80      	pop	{r7, pc}
    563a:	46c0      	nop			; (mov r8, r8)

0000563c <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    563c:	b580      	push	{r7, lr}
    563e:	b084      	sub	sp, #16
    5640:	af00      	add	r7, sp, #0
    5642:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5644:	687b      	ldr	r3, [r7, #4]
    5646:	681b      	ldr	r3, [r3, #0]
    5648:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    564a:	68fb      	ldr	r3, [r7, #12]
    564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    564e:	b29a      	uxth	r2, r3
    5650:	230a      	movs	r3, #10
    5652:	18fb      	adds	r3, r7, r3
    5654:	05d2      	lsls	r2, r2, #23
    5656:	0dd2      	lsrs	r2, r2, #23
    5658:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    565e:	220a      	movs	r2, #10
    5660:	18ba      	adds	r2, r7, r2
    5662:	8812      	ldrh	r2, [r2, #0]
    5664:	b2d2      	uxtb	r2, r2
    5666:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    5668:	687b      	ldr	r3, [r7, #4]
    566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    566c:	1c5a      	adds	r2, r3, #1
    566e:	687b      	ldr	r3, [r7, #4]
    5670:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	799b      	ldrb	r3, [r3, #6]
    5676:	2b01      	cmp	r3, #1
    5678:	d10d      	bne.n	5696 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    567a:	687b      	ldr	r3, [r7, #4]
    567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    567e:	220a      	movs	r2, #10
    5680:	18ba      	adds	r2, r7, r2
    5682:	8812      	ldrh	r2, [r2, #0]
    5684:	0a12      	lsrs	r2, r2, #8
    5686:	b292      	uxth	r2, r2
    5688:	b2d2      	uxtb	r2, r2
    568a:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5690:	1c5a      	adds	r2, r3, #1
    5692:	687b      	ldr	r3, [r7, #4]
    5694:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    5696:	687b      	ldr	r3, [r7, #4]
    5698:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    569a:	b29b      	uxth	r3, r3
    569c:	3b01      	subs	r3, #1
    569e:	b29a      	uxth	r2, r3
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	861a      	strh	r2, [r3, #48]	; 0x30
}
    56a4:	46c0      	nop			; (mov r8, r8)
    56a6:	46bd      	mov	sp, r7
    56a8:	b004      	add	sp, #16
    56aa:	bd80      	pop	{r7, pc}

000056ac <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    56ac:	b580      	push	{r7, lr}
    56ae:	b086      	sub	sp, #24
    56b0:	af00      	add	r7, sp, #0
    56b2:	0002      	movs	r2, r0
    56b4:	1dfb      	adds	r3, r7, #7
    56b6:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    56b8:	1dfb      	adds	r3, r7, #7
    56ba:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    56bc:	4b96      	ldr	r3, [pc, #600]	; (5918 <_spi_interrupt_handler+0x26c>)
    56be:	0092      	lsls	r2, r2, #2
    56c0:	58d3      	ldr	r3, [r2, r3]
    56c2:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    56c4:	697b      	ldr	r3, [r7, #20]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    56ca:	697b      	ldr	r3, [r7, #20]
    56cc:	2237      	movs	r2, #55	; 0x37
    56ce:	5c9a      	ldrb	r2, [r3, r2]
    56d0:	697b      	ldr	r3, [r7, #20]
    56d2:	2136      	movs	r1, #54	; 0x36
    56d4:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    56d6:	230f      	movs	r3, #15
    56d8:	18fb      	adds	r3, r7, r3
    56da:	400a      	ands	r2, r1
    56dc:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    56de:	693b      	ldr	r3, [r7, #16]
    56e0:	7e1b      	ldrb	r3, [r3, #24]
    56e2:	b2da      	uxtb	r2, r3
    56e4:	230c      	movs	r3, #12
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    56ea:	693b      	ldr	r3, [r7, #16]
    56ec:	7d9b      	ldrb	r3, [r3, #22]
    56ee:	b2db      	uxtb	r3, r3
    56f0:	b29a      	uxth	r2, r3
    56f2:	230c      	movs	r3, #12
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	210c      	movs	r1, #12
    56f8:	1879      	adds	r1, r7, r1
    56fa:	8809      	ldrh	r1, [r1, #0]
    56fc:	400a      	ands	r2, r1
    56fe:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5700:	230c      	movs	r3, #12
    5702:	18fb      	adds	r3, r7, r3
    5704:	881b      	ldrh	r3, [r3, #0]
    5706:	2201      	movs	r2, #1
    5708:	4013      	ands	r3, r2
    570a:	d038      	beq.n	577e <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    570c:	697b      	ldr	r3, [r7, #20]
    570e:	795b      	ldrb	r3, [r3, #5]
    5710:	2b01      	cmp	r3, #1
    5712:	d110      	bne.n	5736 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    5714:	697b      	ldr	r3, [r7, #20]
    5716:	7a5b      	ldrb	r3, [r3, #9]
    5718:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    571a:	2b00      	cmp	r3, #0
    571c:	d10b      	bne.n	5736 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    571e:	697b      	ldr	r3, [r7, #20]
    5720:	0018      	movs	r0, r3
    5722:	4b7e      	ldr	r3, [pc, #504]	; (591c <_spi_interrupt_handler+0x270>)
    5724:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    5726:	697b      	ldr	r3, [r7, #20]
    5728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    572a:	b29b      	uxth	r3, r3
    572c:	2b00      	cmp	r3, #0
    572e:	d102      	bne.n	5736 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5730:	693b      	ldr	r3, [r7, #16]
    5732:	2201      	movs	r2, #1
    5734:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5736:	697b      	ldr	r3, [r7, #20]
    5738:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    573a:	2b01      	cmp	r3, #1
    573c:	d11f      	bne.n	577e <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    573e:	697b      	ldr	r3, [r7, #20]
    5740:	7a5b      	ldrb	r3, [r3, #9]
    5742:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5744:	2b00      	cmp	r3, #0
    5746:	d01a      	beq.n	577e <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    5748:	697b      	ldr	r3, [r7, #20]
    574a:	0018      	movs	r0, r3
    574c:	4b74      	ldr	r3, [pc, #464]	; (5920 <_spi_interrupt_handler+0x274>)
    574e:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    5750:	697b      	ldr	r3, [r7, #20]
    5752:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5754:	b29b      	uxth	r3, r3
    5756:	2b00      	cmp	r3, #0
    5758:	d111      	bne.n	577e <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    575a:	693b      	ldr	r3, [r7, #16]
    575c:	2201      	movs	r2, #1
    575e:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5760:	697b      	ldr	r3, [r7, #20]
    5762:	7a5b      	ldrb	r3, [r3, #9]
    5764:	b2db      	uxtb	r3, r3
    5766:	2b01      	cmp	r3, #1
    5768:	d109      	bne.n	577e <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    576a:	697b      	ldr	r3, [r7, #20]
    576c:	79db      	ldrb	r3, [r3, #7]
    576e:	2201      	movs	r2, #1
    5770:	4053      	eors	r3, r2
    5772:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    5774:	2b00      	cmp	r3, #0
    5776:	d002      	beq.n	577e <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5778:	693b      	ldr	r3, [r7, #16]
    577a:	2202      	movs	r2, #2
    577c:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    577e:	230c      	movs	r3, #12
    5780:	18fb      	adds	r3, r7, r3
    5782:	881b      	ldrh	r3, [r3, #0]
    5784:	2204      	movs	r2, #4
    5786:	4013      	ands	r3, r2
    5788:	d100      	bne.n	578c <_spi_interrupt_handler+0xe0>
    578a:	e07e      	b.n	588a <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    578c:	693b      	ldr	r3, [r7, #16]
    578e:	8b5b      	ldrh	r3, [r3, #26]
    5790:	b29b      	uxth	r3, r3
    5792:	001a      	movs	r2, r3
    5794:	2304      	movs	r3, #4
    5796:	4013      	ands	r3, r2
    5798:	d022      	beq.n	57e0 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    579a:	697b      	ldr	r3, [r7, #20]
    579c:	7a5b      	ldrb	r3, [r3, #9]
    579e:	b2db      	uxtb	r3, r3
    57a0:	2b01      	cmp	r3, #1
    57a2:	d014      	beq.n	57ce <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    57a4:	697b      	ldr	r3, [r7, #20]
    57a6:	2238      	movs	r2, #56	; 0x38
    57a8:	211e      	movs	r1, #30
    57aa:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    57ac:	697b      	ldr	r3, [r7, #20]
    57ae:	2203      	movs	r2, #3
    57b0:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    57b2:	693b      	ldr	r3, [r7, #16]
    57b4:	2205      	movs	r2, #5
    57b6:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    57b8:	230f      	movs	r3, #15
    57ba:	18fb      	adds	r3, r7, r3
    57bc:	781b      	ldrb	r3, [r3, #0]
    57be:	2208      	movs	r2, #8
    57c0:	4013      	ands	r3, r2
    57c2:	d004      	beq.n	57ce <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    57c4:	697b      	ldr	r3, [r7, #20]
    57c6:	699b      	ldr	r3, [r3, #24]
    57c8:	697a      	ldr	r2, [r7, #20]
    57ca:	0010      	movs	r0, r2
    57cc:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    57ce:	693b      	ldr	r3, [r7, #16]
    57d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    57d2:	230a      	movs	r3, #10
    57d4:	18fb      	adds	r3, r7, r3
    57d6:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    57d8:	693b      	ldr	r3, [r7, #16]
    57da:	2204      	movs	r2, #4
    57dc:	835a      	strh	r2, [r3, #26]
    57de:	e054      	b.n	588a <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    57e0:	697b      	ldr	r3, [r7, #20]
    57e2:	7a5b      	ldrb	r3, [r3, #9]
    57e4:	b2db      	uxtb	r3, r3
    57e6:	2b01      	cmp	r3, #1
    57e8:	d11e      	bne.n	5828 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    57ea:	697b      	ldr	r3, [r7, #20]
    57ec:	0018      	movs	r0, r3
    57ee:	4b4d      	ldr	r3, [pc, #308]	; (5924 <_spi_interrupt_handler+0x278>)
    57f0:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    57f2:	697b      	ldr	r3, [r7, #20]
    57f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    57f6:	b29b      	uxth	r3, r3
    57f8:	2b00      	cmp	r3, #0
    57fa:	d146      	bne.n	588a <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    57fc:	693b      	ldr	r3, [r7, #16]
    57fe:	2204      	movs	r2, #4
    5800:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	2238      	movs	r2, #56	; 0x38
    5806:	2100      	movs	r1, #0
    5808:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    580a:	697b      	ldr	r3, [r7, #20]
    580c:	2203      	movs	r2, #3
    580e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5810:	230f      	movs	r3, #15
    5812:	18fb      	adds	r3, r7, r3
    5814:	781b      	ldrb	r3, [r3, #0]
    5816:	2201      	movs	r2, #1
    5818:	4013      	ands	r3, r2
    581a:	d036      	beq.n	588a <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    581c:	697b      	ldr	r3, [r7, #20]
    581e:	68db      	ldr	r3, [r3, #12]
    5820:	697a      	ldr	r2, [r7, #20]
    5822:	0010      	movs	r0, r2
    5824:	4798      	blx	r3
    5826:	e030      	b.n	588a <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5828:	697b      	ldr	r3, [r7, #20]
    582a:	0018      	movs	r0, r3
    582c:	4b3e      	ldr	r3, [pc, #248]	; (5928 <_spi_interrupt_handler+0x27c>)
    582e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5830:	697b      	ldr	r3, [r7, #20]
    5832:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5834:	b29b      	uxth	r3, r3
    5836:	2b00      	cmp	r3, #0
    5838:	d127      	bne.n	588a <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    583a:	697b      	ldr	r3, [r7, #20]
    583c:	2238      	movs	r2, #56	; 0x38
    583e:	2100      	movs	r1, #0
    5840:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5842:	693b      	ldr	r3, [r7, #16]
    5844:	2204      	movs	r2, #4
    5846:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5848:	697b      	ldr	r3, [r7, #20]
    584a:	7a5b      	ldrb	r3, [r3, #9]
    584c:	b2db      	uxtb	r3, r3
    584e:	2b02      	cmp	r3, #2
    5850:	d10b      	bne.n	586a <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5852:	230f      	movs	r3, #15
    5854:	18fb      	adds	r3, r7, r3
    5856:	781b      	ldrb	r3, [r3, #0]
    5858:	2204      	movs	r2, #4
    585a:	4013      	ands	r3, r2
    585c:	d015      	beq.n	588a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    585e:	697b      	ldr	r3, [r7, #20]
    5860:	695b      	ldr	r3, [r3, #20]
    5862:	697a      	ldr	r2, [r7, #20]
    5864:	0010      	movs	r0, r2
    5866:	4798      	blx	r3
    5868:	e00f      	b.n	588a <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    586a:	697b      	ldr	r3, [r7, #20]
    586c:	7a5b      	ldrb	r3, [r3, #9]
    586e:	b2db      	uxtb	r3, r3
    5870:	2b00      	cmp	r3, #0
    5872:	d10a      	bne.n	588a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    5874:	230f      	movs	r3, #15
    5876:	18fb      	adds	r3, r7, r3
    5878:	781b      	ldrb	r3, [r3, #0]
    587a:	2202      	movs	r2, #2
    587c:	4013      	ands	r3, r2
    587e:	d004      	beq.n	588a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5880:	697b      	ldr	r3, [r7, #20]
    5882:	691b      	ldr	r3, [r3, #16]
    5884:	697a      	ldr	r2, [r7, #20]
    5886:	0010      	movs	r0, r2
    5888:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    588a:	230c      	movs	r3, #12
    588c:	18fb      	adds	r3, r7, r3
    588e:	881b      	ldrh	r3, [r3, #0]
    5890:	2202      	movs	r2, #2
    5892:	4013      	ands	r3, r2
    5894:	d024      	beq.n	58e0 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5896:	697b      	ldr	r3, [r7, #20]
    5898:	795b      	ldrb	r3, [r3, #5]
    589a:	2b01      	cmp	r3, #1
    589c:	d120      	bne.n	58e0 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    589e:	697b      	ldr	r3, [r7, #20]
    58a0:	7a5b      	ldrb	r3, [r3, #9]
    58a2:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    58a4:	2b01      	cmp	r3, #1
    58a6:	d11b      	bne.n	58e0 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    58a8:	697b      	ldr	r3, [r7, #20]
    58aa:	79db      	ldrb	r3, [r3, #7]
    58ac:	2201      	movs	r2, #1
    58ae:	4053      	eors	r3, r2
    58b0:	b2db      	uxtb	r3, r3
    58b2:	2b00      	cmp	r3, #0
    58b4:	d014      	beq.n	58e0 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    58b6:	693b      	ldr	r3, [r7, #16]
    58b8:	2202      	movs	r2, #2
    58ba:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    58bc:	697b      	ldr	r3, [r7, #20]
    58be:	2203      	movs	r2, #3
    58c0:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    58c2:	697b      	ldr	r3, [r7, #20]
    58c4:	2238      	movs	r2, #56	; 0x38
    58c6:	2100      	movs	r1, #0
    58c8:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    58ca:	230f      	movs	r3, #15
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	781b      	ldrb	r3, [r3, #0]
    58d0:	2201      	movs	r2, #1
    58d2:	4013      	ands	r3, r2
    58d4:	d004      	beq.n	58e0 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    58d6:	697b      	ldr	r3, [r7, #20]
    58d8:	68db      	ldr	r3, [r3, #12]
    58da:	697a      	ldr	r2, [r7, #20]
    58dc:	0010      	movs	r0, r2
    58de:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    58e0:	230c      	movs	r3, #12
    58e2:	18fb      	adds	r3, r7, r3
    58e4:	881b      	ldrh	r3, [r3, #0]
    58e6:	2280      	movs	r2, #128	; 0x80
    58e8:	4013      	ands	r3, r2
    58ea:	d010      	beq.n	590e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    58ec:	693b      	ldr	r3, [r7, #16]
    58ee:	2280      	movs	r2, #128	; 0x80
    58f0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    58f2:	693b      	ldr	r3, [r7, #16]
    58f4:	2280      	movs	r2, #128	; 0x80
    58f6:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    58f8:	230f      	movs	r3, #15
    58fa:	18fb      	adds	r3, r7, r3
    58fc:	781b      	ldrb	r3, [r3, #0]
    58fe:	2240      	movs	r2, #64	; 0x40
    5900:	4013      	ands	r3, r2
    5902:	d004      	beq.n	590e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5904:	697b      	ldr	r3, [r7, #20]
    5906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5908:	697a      	ldr	r2, [r7, #20]
    590a:	0010      	movs	r0, r2
    590c:	4798      	blx	r3
		}
	}
#  endif
}
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	46bd      	mov	sp, r7
    5912:	b006      	add	sp, #24
    5914:	bd80      	pop	{r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	20004610 	.word	0x20004610
    591c:	000055d1 	.word	0x000055d1
    5920:	00005555 	.word	0x00005555
    5924:	00005605 	.word	0x00005605
    5928:	0000563d 	.word	0x0000563d

0000592c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    592c:	b580      	push	{r7, lr}
    592e:	b082      	sub	sp, #8
    5930:	af00      	add	r7, sp, #0
    5932:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	2200      	movs	r2, #0
    5938:	701a      	strb	r2, [r3, #0]
}
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	46bd      	mov	sp, r7
    593e:	b002      	add	sp, #8
    5940:	bd80      	pop	{r7, pc}
    5942:	46c0      	nop			; (mov r8, r8)

00005944 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5944:	b580      	push	{r7, lr}
    5946:	b082      	sub	sp, #8
    5948:	af00      	add	r7, sp, #0
    594a:	0002      	movs	r2, r0
    594c:	6039      	str	r1, [r7, #0]
    594e:	1dfb      	adds	r3, r7, #7
    5950:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5952:	1dfb      	adds	r3, r7, #7
    5954:	781b      	ldrb	r3, [r3, #0]
    5956:	2b01      	cmp	r3, #1
    5958:	d00a      	beq.n	5970 <system_apb_clock_set_mask+0x2c>
    595a:	2b02      	cmp	r3, #2
    595c:	d00f      	beq.n	597e <system_apb_clock_set_mask+0x3a>
    595e:	2b00      	cmp	r3, #0
    5960:	d114      	bne.n	598c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5962:	4b0e      	ldr	r3, [pc, #56]	; (599c <system_apb_clock_set_mask+0x58>)
    5964:	4a0d      	ldr	r2, [pc, #52]	; (599c <system_apb_clock_set_mask+0x58>)
    5966:	6991      	ldr	r1, [r2, #24]
    5968:	683a      	ldr	r2, [r7, #0]
    596a:	430a      	orrs	r2, r1
    596c:	619a      	str	r2, [r3, #24]
			break;
    596e:	e00f      	b.n	5990 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5970:	4b0a      	ldr	r3, [pc, #40]	; (599c <system_apb_clock_set_mask+0x58>)
    5972:	4a0a      	ldr	r2, [pc, #40]	; (599c <system_apb_clock_set_mask+0x58>)
    5974:	69d1      	ldr	r1, [r2, #28]
    5976:	683a      	ldr	r2, [r7, #0]
    5978:	430a      	orrs	r2, r1
    597a:	61da      	str	r2, [r3, #28]
			break;
    597c:	e008      	b.n	5990 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    597e:	4b07      	ldr	r3, [pc, #28]	; (599c <system_apb_clock_set_mask+0x58>)
    5980:	4a06      	ldr	r2, [pc, #24]	; (599c <system_apb_clock_set_mask+0x58>)
    5982:	6a11      	ldr	r1, [r2, #32]
    5984:	683a      	ldr	r2, [r7, #0]
    5986:	430a      	orrs	r2, r1
    5988:	621a      	str	r2, [r3, #32]
			break;
    598a:	e001      	b.n	5990 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    598c:	2317      	movs	r3, #23
    598e:	e000      	b.n	5992 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5990:	2300      	movs	r3, #0
}
    5992:	0018      	movs	r0, r3
    5994:	46bd      	mov	sp, r7
    5996:	b002      	add	sp, #8
    5998:	bd80      	pop	{r7, pc}
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	40000400 	.word	0x40000400

000059a0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    59a0:	b580      	push	{r7, lr}
    59a2:	b082      	sub	sp, #8
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	2280      	movs	r2, #128	; 0x80
    59ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	2200      	movs	r2, #0
    59b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	2201      	movs	r2, #1
    59b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    59ba:	687b      	ldr	r3, [r7, #4]
    59bc:	2200      	movs	r2, #0
    59be:	70da      	strb	r2, [r3, #3]
}
    59c0:	46c0      	nop			; (mov r8, r8)
    59c2:	46bd      	mov	sp, r7
    59c4:	b002      	add	sp, #8
    59c6:	bd80      	pop	{r7, pc}

000059c8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    59c8:	b580      	push	{r7, lr}
    59ca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    59cc:	4b05      	ldr	r3, [pc, #20]	; (59e4 <system_is_debugger_present+0x1c>)
    59ce:	789b      	ldrb	r3, [r3, #2]
    59d0:	b2db      	uxtb	r3, r3
    59d2:	001a      	movs	r2, r3
    59d4:	2302      	movs	r3, #2
    59d6:	4013      	ands	r3, r2
    59d8:	1e5a      	subs	r2, r3, #1
    59da:	4193      	sbcs	r3, r2
    59dc:	b2db      	uxtb	r3, r3
}
    59de:	0018      	movs	r0, r3
    59e0:	46bd      	mov	sp, r7
    59e2:	bd80      	pop	{r7, pc}
    59e4:	41002000 	.word	0x41002000

000059e8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    59e8:	b580      	push	{r7, lr}
    59ea:	b084      	sub	sp, #16
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    59f6:	68fb      	ldr	r3, [r7, #12]
    59f8:	69db      	ldr	r3, [r3, #28]
    59fa:	1e5a      	subs	r2, r3, #1
    59fc:	4193      	sbcs	r3, r2
    59fe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    5a00:	0018      	movs	r0, r3
    5a02:	46bd      	mov	sp, r7
    5a04:	b004      	add	sp, #16
    5a06:	bd80      	pop	{r7, pc}

00005a08 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    5a08:	b580      	push	{r7, lr}
    5a0a:	b082      	sub	sp, #8
    5a0c:	af00      	add	r7, sp, #0
    5a0e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5a10:	46c0      	nop			; (mov r8, r8)
    5a12:	687b      	ldr	r3, [r7, #4]
    5a14:	0018      	movs	r0, r3
    5a16:	4b04      	ldr	r3, [pc, #16]	; (5a28 <_usart_wait_for_sync+0x20>)
    5a18:	4798      	blx	r3
    5a1a:	1e03      	subs	r3, r0, #0
    5a1c:	d1f9      	bne.n	5a12 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	46bd      	mov	sp, r7
    5a22:	b002      	add	sp, #8
    5a24:	bd80      	pop	{r7, pc}
    5a26:	46c0      	nop			; (mov r8, r8)
    5a28:	000059e9 	.word	0x000059e9

00005a2c <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5a2c:	b5b0      	push	{r4, r5, r7, lr}
    5a2e:	b08c      	sub	sp, #48	; 0x30
    5a30:	af02      	add	r7, sp, #8
    5a32:	6078      	str	r0, [r7, #4]
    5a34:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	681b      	ldr	r3, [r3, #0]
    5a40:	0018      	movs	r0, r3
    5a42:	4ba8      	ldr	r3, [pc, #672]	; (5ce4 <_usart_set_config+0x2b8>)
    5a44:	4798      	blx	r3
    5a46:	0003      	movs	r3, r0
    5a48:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5a4a:	697b      	ldr	r3, [r7, #20]
    5a4c:	3314      	adds	r3, #20
    5a4e:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5a50:	2300      	movs	r3, #0
    5a52:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    5a54:	2300      	movs	r3, #0
    5a56:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5a58:	230a      	movs	r3, #10
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	2200      	movs	r2, #0
    5a5e:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5a60:	231f      	movs	r3, #31
    5a62:	18fb      	adds	r3, r7, r3
    5a64:	2200      	movs	r2, #0
    5a66:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5a68:	231e      	movs	r3, #30
    5a6a:	18fb      	adds	r3, r7, r3
    5a6c:	2210      	movs	r2, #16
    5a6e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5a70:	683b      	ldr	r3, [r7, #0]
    5a72:	8a1b      	ldrh	r3, [r3, #16]
    5a74:	2280      	movs	r2, #128	; 0x80
    5a76:	01d2      	lsls	r2, r2, #7
    5a78:	4293      	cmp	r3, r2
    5a7a:	d01c      	beq.n	5ab6 <_usart_set_config+0x8a>
    5a7c:	2280      	movs	r2, #128	; 0x80
    5a7e:	01d2      	lsls	r2, r2, #7
    5a80:	4293      	cmp	r3, r2
    5a82:	dc06      	bgt.n	5a92 <_usart_set_config+0x66>
    5a84:	2b00      	cmp	r3, #0
    5a86:	d00d      	beq.n	5aa4 <_usart_set_config+0x78>
    5a88:	2280      	movs	r2, #128	; 0x80
    5a8a:	0192      	lsls	r2, r2, #6
    5a8c:	4293      	cmp	r3, r2
    5a8e:	d024      	beq.n	5ada <_usart_set_config+0xae>
    5a90:	e035      	b.n	5afe <_usart_set_config+0xd2>
    5a92:	22c0      	movs	r2, #192	; 0xc0
    5a94:	01d2      	lsls	r2, r2, #7
    5a96:	4293      	cmp	r3, r2
    5a98:	d028      	beq.n	5aec <_usart_set_config+0xc0>
    5a9a:	2280      	movs	r2, #128	; 0x80
    5a9c:	0212      	lsls	r2, r2, #8
    5a9e:	4293      	cmp	r3, r2
    5aa0:	d012      	beq.n	5ac8 <_usart_set_config+0x9c>
    5aa2:	e02c      	b.n	5afe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5aa4:	231f      	movs	r3, #31
    5aa6:	18fb      	adds	r3, r7, r3
    5aa8:	2200      	movs	r2, #0
    5aaa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5aac:	231e      	movs	r3, #30
    5aae:	18fb      	adds	r3, r7, r3
    5ab0:	2210      	movs	r2, #16
    5ab2:	701a      	strb	r2, [r3, #0]
			break;
    5ab4:	e023      	b.n	5afe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5ab6:	231f      	movs	r3, #31
    5ab8:	18fb      	adds	r3, r7, r3
    5aba:	2200      	movs	r2, #0
    5abc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5abe:	231e      	movs	r3, #30
    5ac0:	18fb      	adds	r3, r7, r3
    5ac2:	2208      	movs	r2, #8
    5ac4:	701a      	strb	r2, [r3, #0]
			break;
    5ac6:	e01a      	b.n	5afe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5ac8:	231f      	movs	r3, #31
    5aca:	18fb      	adds	r3, r7, r3
    5acc:	2200      	movs	r2, #0
    5ace:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    5ad0:	231e      	movs	r3, #30
    5ad2:	18fb      	adds	r3, r7, r3
    5ad4:	2203      	movs	r2, #3
    5ad6:	701a      	strb	r2, [r3, #0]
			break;
    5ad8:	e011      	b.n	5afe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5ada:	231f      	movs	r3, #31
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	2201      	movs	r2, #1
    5ae0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5ae2:	231e      	movs	r3, #30
    5ae4:	18fb      	adds	r3, r7, r3
    5ae6:	2210      	movs	r2, #16
    5ae8:	701a      	strb	r2, [r3, #0]
			break;
    5aea:	e008      	b.n	5afe <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5aec:	231f      	movs	r3, #31
    5aee:	18fb      	adds	r3, r7, r3
    5af0:	2201      	movs	r2, #1
    5af2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5af4:	231e      	movs	r3, #30
    5af6:	18fb      	adds	r3, r7, r3
    5af8:	2208      	movs	r2, #8
    5afa:	701a      	strb	r2, [r3, #0]
			break;
    5afc:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5afe:	683b      	ldr	r3, [r7, #0]
    5b00:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    5b02:	683b      	ldr	r3, [r7, #0]
    5b04:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5b06:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5b08:	683b      	ldr	r3, [r7, #0]
    5b0a:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    5b0c:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    5b0e:	683a      	ldr	r2, [r7, #0]
    5b10:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5b12:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5b14:	683a      	ldr	r2, [r7, #0]
    5b16:	7e12      	ldrb	r2, [r2, #24]
    5b18:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    5b1a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5b1c:	683a      	ldr	r2, [r7, #0]
    5b1e:	2126      	movs	r1, #38	; 0x26
    5b20:	5c52      	ldrb	r2, [r2, r1]
    5b22:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5b24:	4313      	orrs	r3, r2
    5b26:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    5b28:	231d      	movs	r3, #29
    5b2a:	18fb      	adds	r3, r7, r3
    5b2c:	2200      	movs	r2, #0
    5b2e:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5b30:	683b      	ldr	r3, [r7, #0]
    5b32:	685b      	ldr	r3, [r3, #4]
    5b34:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    5b36:	68fb      	ldr	r3, [r7, #12]
    5b38:	2b00      	cmp	r3, #0
    5b3a:	d01e      	beq.n	5b7a <_usart_set_config+0x14e>
    5b3c:	2280      	movs	r2, #128	; 0x80
    5b3e:	0552      	lsls	r2, r2, #21
    5b40:	4293      	cmp	r3, r2
    5b42:	d14f      	bne.n	5be4 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    5b44:	683b      	ldr	r3, [r7, #0]
    5b46:	2227      	movs	r2, #39	; 0x27
    5b48:	5c9b      	ldrb	r3, [r3, r2]
    5b4a:	2201      	movs	r2, #1
    5b4c:	4053      	eors	r3, r2
    5b4e:	b2db      	uxtb	r3, r3
    5b50:	2b00      	cmp	r3, #0
    5b52:	d046      	beq.n	5be2 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5b54:	683b      	ldr	r3, [r7, #0]
    5b56:	6a1d      	ldr	r5, [r3, #32]
    5b58:	693b      	ldr	r3, [r7, #16]
    5b5a:	b2db      	uxtb	r3, r3
    5b5c:	0018      	movs	r0, r3
    5b5e:	4b62      	ldr	r3, [pc, #392]	; (5ce8 <_usart_set_config+0x2bc>)
    5b60:	4798      	blx	r3
    5b62:	0001      	movs	r1, r0
    5b64:	231d      	movs	r3, #29
    5b66:	18fc      	adds	r4, r7, r3
    5b68:	230a      	movs	r3, #10
    5b6a:	18fb      	adds	r3, r7, r3
    5b6c:	001a      	movs	r2, r3
    5b6e:	0028      	movs	r0, r5
    5b70:	4b5e      	ldr	r3, [pc, #376]	; (5cec <_usart_set_config+0x2c0>)
    5b72:	4798      	blx	r3
    5b74:	0003      	movs	r3, r0
    5b76:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5b78:	e033      	b.n	5be2 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    5b7a:	683b      	ldr	r3, [r7, #0]
    5b7c:	2227      	movs	r2, #39	; 0x27
    5b7e:	5c9b      	ldrb	r3, [r3, r2]
    5b80:	2b00      	cmp	r3, #0
    5b82:	d014      	beq.n	5bae <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5b84:	683b      	ldr	r3, [r7, #0]
    5b86:	6a18      	ldr	r0, [r3, #32]
    5b88:	683b      	ldr	r3, [r7, #0]
    5b8a:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    5b8c:	231d      	movs	r3, #29
    5b8e:	18fc      	adds	r4, r7, r3
    5b90:	231f      	movs	r3, #31
    5b92:	18fb      	adds	r3, r7, r3
    5b94:	781d      	ldrb	r5, [r3, #0]
    5b96:	230a      	movs	r3, #10
    5b98:	18fa      	adds	r2, r7, r3
    5b9a:	231e      	movs	r3, #30
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	781b      	ldrb	r3, [r3, #0]
    5ba0:	9300      	str	r3, [sp, #0]
    5ba2:	002b      	movs	r3, r5
    5ba4:	4d52      	ldr	r5, [pc, #328]	; (5cf0 <_usart_set_config+0x2c4>)
    5ba6:	47a8      	blx	r5
    5ba8:	0003      	movs	r3, r0
    5baa:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5bac:	e01a      	b.n	5be4 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    5bae:	683b      	ldr	r3, [r7, #0]
    5bb0:	6a1d      	ldr	r5, [r3, #32]
    5bb2:	693b      	ldr	r3, [r7, #16]
    5bb4:	b2db      	uxtb	r3, r3
    5bb6:	0018      	movs	r0, r3
    5bb8:	4b4b      	ldr	r3, [pc, #300]	; (5ce8 <_usart_set_config+0x2bc>)
    5bba:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    5bbc:	231d      	movs	r3, #29
    5bbe:	18fc      	adds	r4, r7, r3
    5bc0:	231f      	movs	r3, #31
    5bc2:	18fb      	adds	r3, r7, r3
    5bc4:	7819      	ldrb	r1, [r3, #0]
    5bc6:	230a      	movs	r3, #10
    5bc8:	18fa      	adds	r2, r7, r3
    5bca:	231e      	movs	r3, #30
    5bcc:	18fb      	adds	r3, r7, r3
    5bce:	781b      	ldrb	r3, [r3, #0]
    5bd0:	9300      	str	r3, [sp, #0]
    5bd2:	000b      	movs	r3, r1
    5bd4:	0001      	movs	r1, r0
    5bd6:	0028      	movs	r0, r5
    5bd8:	4d45      	ldr	r5, [pc, #276]	; (5cf0 <_usart_set_config+0x2c4>)
    5bda:	47a8      	blx	r5
    5bdc:	0003      	movs	r3, r0
    5bde:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    5be0:	e000      	b.n	5be4 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    5be2:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    5be4:	231d      	movs	r3, #29
    5be6:	18fb      	adds	r3, r7, r3
    5be8:	781b      	ldrb	r3, [r3, #0]
    5bea:	2b00      	cmp	r3, #0
    5bec:	d003      	beq.n	5bf6 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5bee:	231d      	movs	r3, #29
    5bf0:	18fb      	adds	r3, r7, r3
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	e071      	b.n	5cda <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    5bf6:	683b      	ldr	r3, [r7, #0]
    5bf8:	7e5b      	ldrb	r3, [r3, #25]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d003      	beq.n	5c06 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5bfe:	683b      	ldr	r3, [r7, #0]
    5c00:	7e9a      	ldrb	r2, [r3, #26]
    5c02:	69bb      	ldr	r3, [r7, #24]
    5c04:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	0018      	movs	r0, r3
    5c0a:	4b3a      	ldr	r3, [pc, #232]	; (5cf4 <_usart_set_config+0x2c8>)
    5c0c:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5c0e:	230a      	movs	r3, #10
    5c10:	18fb      	adds	r3, r7, r3
    5c12:	881a      	ldrh	r2, [r3, #0]
    5c14:	69bb      	ldr	r3, [r7, #24]
    5c16:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5c1a:	68fb      	ldr	r3, [r7, #12]
    5c1c:	4313      	orrs	r3, r2
    5c1e:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5c20:	683b      	ldr	r3, [r7, #0]
    5c22:	2227      	movs	r2, #39	; 0x27
    5c24:	5c9b      	ldrb	r3, [r3, r2]
    5c26:	2201      	movs	r2, #1
    5c28:	4053      	eors	r3, r2
    5c2a:	b2db      	uxtb	r3, r3
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d003      	beq.n	5c38 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c32:	2204      	movs	r2, #4
    5c34:	4313      	orrs	r3, r2
    5c36:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5c38:	683b      	ldr	r3, [r7, #0]
    5c3a:	7e5b      	ldrb	r3, [r3, #25]
    5c3c:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5c3e:	683b      	ldr	r3, [r7, #0]
    5c40:	7f1b      	ldrb	r3, [r3, #28]
    5c42:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5c44:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5c46:	683b      	ldr	r3, [r7, #0]
    5c48:	7f5b      	ldrb	r3, [r3, #29]
    5c4a:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5c4c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5c4e:	683b      	ldr	r3, [r7, #0]
    5c50:	2124      	movs	r1, #36	; 0x24
    5c52:	5c5b      	ldrb	r3, [r3, r1]
    5c54:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5c56:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5c58:	683b      	ldr	r3, [r7, #0]
    5c5a:	2125      	movs	r1, #37	; 0x25
    5c5c:	5c5b      	ldrb	r3, [r3, r1]
    5c5e:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5c60:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    5c62:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    5c64:	683b      	ldr	r3, [r7, #0]
    5c66:	7adb      	ldrb	r3, [r3, #11]
    5c68:	001a      	movs	r2, r3
    5c6a:	6a3b      	ldr	r3, [r7, #32]
    5c6c:	4313      	orrs	r3, r2
    5c6e:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    5c70:	683b      	ldr	r3, [r7, #0]
    5c72:	891b      	ldrh	r3, [r3, #8]
    5c74:	2bff      	cmp	r3, #255	; 0xff
    5c76:	d00b      	beq.n	5c90 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c7a:	2280      	movs	r2, #128	; 0x80
    5c7c:	0452      	lsls	r2, r2, #17
    5c7e:	4313      	orrs	r3, r2
    5c80:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    5c82:	683b      	ldr	r3, [r7, #0]
    5c84:	891b      	ldrh	r3, [r3, #8]
    5c86:	001a      	movs	r2, r3
    5c88:	6a3b      	ldr	r3, [r7, #32]
    5c8a:	4313      	orrs	r3, r2
    5c8c:	623b      	str	r3, [r7, #32]
    5c8e:	e008      	b.n	5ca2 <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    5c90:	683b      	ldr	r3, [r7, #0]
    5c92:	7edb      	ldrb	r3, [r3, #27]
    5c94:	2b00      	cmp	r3, #0
    5c96:	d004      	beq.n	5ca2 <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    5c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c9a:	2280      	movs	r2, #128	; 0x80
    5c9c:	04d2      	lsls	r2, r2, #19
    5c9e:	4313      	orrs	r3, r2
    5ca0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    5ca2:	683b      	ldr	r3, [r7, #0]
    5ca4:	222c      	movs	r2, #44	; 0x2c
    5ca6:	5c9b      	ldrb	r3, [r3, r2]
    5ca8:	2b00      	cmp	r3, #0
    5caa:	d103      	bne.n	5cb4 <_usart_set_config+0x288>
    5cac:	4b12      	ldr	r3, [pc, #72]	; (5cf8 <_usart_set_config+0x2cc>)
    5cae:	4798      	blx	r3
    5cb0:	1e03      	subs	r3, r0, #0
    5cb2:	d003      	beq.n	5cbc <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    5cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5cb6:	2280      	movs	r2, #128	; 0x80
    5cb8:	4313      	orrs	r3, r2
    5cba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5cbc:	687b      	ldr	r3, [r7, #4]
    5cbe:	0018      	movs	r0, r3
    5cc0:	4b0c      	ldr	r3, [pc, #48]	; (5cf4 <_usart_set_config+0x2c8>)
    5cc2:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    5cc4:	69bb      	ldr	r3, [r7, #24]
    5cc6:	6a3a      	ldr	r2, [r7, #32]
    5cc8:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5cca:	687b      	ldr	r3, [r7, #4]
    5ccc:	0018      	movs	r0, r3
    5cce:	4b09      	ldr	r3, [pc, #36]	; (5cf4 <_usart_set_config+0x2c8>)
    5cd0:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5cd2:	69bb      	ldr	r3, [r7, #24]
    5cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5cd6:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    5cd8:	2300      	movs	r3, #0
}
    5cda:	0018      	movs	r0, r3
    5cdc:	46bd      	mov	sp, r7
    5cde:	b00a      	add	sp, #40	; 0x28
    5ce0:	bdb0      	pop	{r4, r5, r7, pc}
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	00004a49 	.word	0x00004a49
    5ce8:	00007225 	.word	0x00007225
    5cec:	00004599 	.word	0x00004599
    5cf0:	00004615 	.word	0x00004615
    5cf4:	00005a09 	.word	0x00005a09
    5cf8:	000059c9 	.word	0x000059c9

00005cfc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5cfc:	b590      	push	{r4, r7, lr}
    5cfe:	b093      	sub	sp, #76	; 0x4c
    5d00:	af00      	add	r7, sp, #0
    5d02:	60f8      	str	r0, [r7, #12]
    5d04:	60b9      	str	r1, [r7, #8]
    5d06:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    5d08:	233b      	movs	r3, #59	; 0x3b
    5d0a:	18fb      	adds	r3, r7, r3
    5d0c:	2200      	movs	r2, #0
    5d0e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5d10:	68fb      	ldr	r3, [r7, #12]
    5d12:	68ba      	ldr	r2, [r7, #8]
    5d14:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5d16:	68fb      	ldr	r3, [r7, #12]
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5d1c:	68fb      	ldr	r3, [r7, #12]
    5d1e:	681b      	ldr	r3, [r3, #0]
    5d20:	0018      	movs	r0, r3
    5d22:	4b86      	ldr	r3, [pc, #536]	; (5f3c <usart_init+0x240>)
    5d24:	4798      	blx	r3
    5d26:	0003      	movs	r3, r0
    5d28:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d2c:	3302      	adds	r3, #2
    5d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5d32:	3314      	adds	r3, #20
    5d34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d38:	681b      	ldr	r3, [r3, #0]
    5d3a:	2201      	movs	r2, #1
    5d3c:	4013      	ands	r3, r2
    5d3e:	d001      	beq.n	5d44 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5d40:	2305      	movs	r3, #5
    5d42:	e0f6      	b.n	5f32 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	2202      	movs	r2, #2
    5d4a:	4013      	ands	r3, r2
    5d4c:	d001      	beq.n	5d52 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5d4e:	231c      	movs	r3, #28
    5d50:	e0ef      	b.n	5f32 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5d52:	2201      	movs	r2, #1
    5d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5d56:	409a      	lsls	r2, r3
    5d58:	0013      	movs	r3, r2
    5d5a:	0019      	movs	r1, r3
    5d5c:	2002      	movs	r0, #2
    5d5e:	4b78      	ldr	r3, [pc, #480]	; (5f40 <usart_init+0x244>)
    5d60:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5d62:	2324      	movs	r3, #36	; 0x24
    5d64:	18fb      	adds	r3, r7, r3
    5d66:	0018      	movs	r0, r3
    5d68:	4b76      	ldr	r3, [pc, #472]	; (5f44 <usart_init+0x248>)
    5d6a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5d6c:	687b      	ldr	r3, [r7, #4]
    5d6e:	222d      	movs	r2, #45	; 0x2d
    5d70:	5c9a      	ldrb	r2, [r3, r2]
    5d72:	2324      	movs	r3, #36	; 0x24
    5d74:	18fb      	adds	r3, r7, r3
    5d76:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5d7a:	b2db      	uxtb	r3, r3
    5d7c:	2224      	movs	r2, #36	; 0x24
    5d7e:	18ba      	adds	r2, r7, r2
    5d80:	0011      	movs	r1, r2
    5d82:	0018      	movs	r0, r3
    5d84:	4b70      	ldr	r3, [pc, #448]	; (5f48 <usart_init+0x24c>)
    5d86:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5d8a:	b2db      	uxtb	r3, r3
    5d8c:	0018      	movs	r0, r3
    5d8e:	4b6f      	ldr	r3, [pc, #444]	; (5f4c <usart_init+0x250>)
    5d90:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	222d      	movs	r2, #45	; 0x2d
    5d96:	5c9b      	ldrb	r3, [r3, r2]
    5d98:	2100      	movs	r1, #0
    5d9a:	0018      	movs	r0, r3
    5d9c:	4b6c      	ldr	r3, [pc, #432]	; (5f50 <usart_init+0x254>)
    5d9e:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	7ada      	ldrb	r2, [r3, #11]
    5da4:	68fb      	ldr	r3, [r7, #12]
    5da6:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5da8:	687b      	ldr	r3, [r7, #4]
    5daa:	2224      	movs	r2, #36	; 0x24
    5dac:	5c9a      	ldrb	r2, [r3, r2]
    5dae:	68fb      	ldr	r3, [r7, #12]
    5db0:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5db2:	687b      	ldr	r3, [r7, #4]
    5db4:	2225      	movs	r2, #37	; 0x25
    5db6:	5c9a      	ldrb	r2, [r3, r2]
    5db8:	68fb      	ldr	r3, [r7, #12]
    5dba:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5dbc:	687b      	ldr	r3, [r7, #4]
    5dbe:	7eda      	ldrb	r2, [r3, #27]
    5dc0:	68fb      	ldr	r3, [r7, #12]
    5dc2:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5dc4:	687b      	ldr	r3, [r7, #4]
    5dc6:	7f1a      	ldrb	r2, [r3, #28]
    5dc8:	68fb      	ldr	r3, [r7, #12]
    5dca:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5dcc:	233b      	movs	r3, #59	; 0x3b
    5dce:	18fc      	adds	r4, r7, r3
    5dd0:	687a      	ldr	r2, [r7, #4]
    5dd2:	68fb      	ldr	r3, [r7, #12]
    5dd4:	0011      	movs	r1, r2
    5dd6:	0018      	movs	r0, r3
    5dd8:	4b5e      	ldr	r3, [pc, #376]	; (5f54 <usart_init+0x258>)
    5dda:	4798      	blx	r3
    5ddc:	0003      	movs	r3, r0
    5dde:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5de0:	233b      	movs	r3, #59	; 0x3b
    5de2:	18fb      	adds	r3, r7, r3
    5de4:	781b      	ldrb	r3, [r3, #0]
    5de6:	2b00      	cmp	r3, #0
    5de8:	d003      	beq.n	5df2 <usart_init+0xf6>
		return status_code;
    5dea:	233b      	movs	r3, #59	; 0x3b
    5dec:	18fb      	adds	r3, r7, r3
    5dee:	781b      	ldrb	r3, [r3, #0]
    5df0:	e09f      	b.n	5f32 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5df2:	2320      	movs	r3, #32
    5df4:	18fb      	adds	r3, r7, r3
    5df6:	0018      	movs	r0, r3
    5df8:	4b57      	ldr	r3, [pc, #348]	; (5f58 <usart_init+0x25c>)
    5dfa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5dfc:	2320      	movs	r3, #32
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	2200      	movs	r2, #0
    5e02:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5e04:	2320      	movs	r3, #32
    5e06:	18fb      	adds	r3, r7, r3
    5e08:	2200      	movs	r2, #0
    5e0a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5e0c:	687b      	ldr	r3, [r7, #4]
    5e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5e10:	2310      	movs	r3, #16
    5e12:	18fb      	adds	r3, r7, r3
    5e14:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5e1a:	2310      	movs	r3, #16
    5e1c:	18fb      	adds	r3, r7, r3
    5e1e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5e20:	687b      	ldr	r3, [r7, #4]
    5e22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5e24:	2310      	movs	r3, #16
    5e26:	18fb      	adds	r3, r7, r3
    5e28:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    5e2a:	687b      	ldr	r3, [r7, #4]
    5e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    5e2e:	2310      	movs	r3, #16
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e34:	2347      	movs	r3, #71	; 0x47
    5e36:	18fb      	adds	r3, r7, r3
    5e38:	2200      	movs	r2, #0
    5e3a:	701a      	strb	r2, [r3, #0]
    5e3c:	e02c      	b.n	5e98 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5e3e:	2347      	movs	r3, #71	; 0x47
    5e40:	18fb      	adds	r3, r7, r3
    5e42:	781a      	ldrb	r2, [r3, #0]
    5e44:	2310      	movs	r3, #16
    5e46:	18fb      	adds	r3, r7, r3
    5e48:	0092      	lsls	r2, r2, #2
    5e4a:	58d3      	ldr	r3, [r2, r3]
    5e4c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e50:	2b00      	cmp	r3, #0
    5e52:	d109      	bne.n	5e68 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5e54:	2347      	movs	r3, #71	; 0x47
    5e56:	18fb      	adds	r3, r7, r3
    5e58:	781a      	ldrb	r2, [r3, #0]
    5e5a:	68bb      	ldr	r3, [r7, #8]
    5e5c:	0011      	movs	r1, r2
    5e5e:	0018      	movs	r0, r3
    5e60:	4b3e      	ldr	r3, [pc, #248]	; (5f5c <usart_init+0x260>)
    5e62:	4798      	blx	r3
    5e64:	0003      	movs	r3, r0
    5e66:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e6a:	3301      	adds	r3, #1
    5e6c:	d00d      	beq.n	5e8a <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    5e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e70:	b2da      	uxtb	r2, r3
    5e72:	2320      	movs	r3, #32
    5e74:	18fb      	adds	r3, r7, r3
    5e76:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5e7a:	0c1b      	lsrs	r3, r3, #16
    5e7c:	b2db      	uxtb	r3, r3
    5e7e:	2220      	movs	r2, #32
    5e80:	18ba      	adds	r2, r7, r2
    5e82:	0011      	movs	r1, r2
    5e84:	0018      	movs	r0, r3
    5e86:	4b36      	ldr	r3, [pc, #216]	; (5f60 <usart_init+0x264>)
    5e88:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5e8a:	2347      	movs	r3, #71	; 0x47
    5e8c:	18fb      	adds	r3, r7, r3
    5e8e:	781a      	ldrb	r2, [r3, #0]
    5e90:	2347      	movs	r3, #71	; 0x47
    5e92:	18fb      	adds	r3, r7, r3
    5e94:	3201      	adds	r2, #1
    5e96:	701a      	strb	r2, [r3, #0]
    5e98:	2347      	movs	r3, #71	; 0x47
    5e9a:	18fb      	adds	r3, r7, r3
    5e9c:	781b      	ldrb	r3, [r3, #0]
    5e9e:	2b03      	cmp	r3, #3
    5ea0:	d9cd      	bls.n	5e3e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5ea2:	2300      	movs	r3, #0
    5ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ea6:	e00a      	b.n	5ebe <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5ea8:	68fa      	ldr	r2, [r7, #12]
    5eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5eac:	3302      	adds	r3, #2
    5eae:	009b      	lsls	r3, r3, #2
    5eb0:	18d3      	adds	r3, r2, r3
    5eb2:	3304      	adds	r3, #4
    5eb4:	2200      	movs	r2, #0
    5eb6:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5eba:	3301      	adds	r3, #1
    5ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5ec0:	2b05      	cmp	r3, #5
    5ec2:	d9f1      	bls.n	5ea8 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    5ec4:	68fb      	ldr	r3, [r7, #12]
    5ec6:	2200      	movs	r2, #0
    5ec8:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5eca:	68fb      	ldr	r3, [r7, #12]
    5ecc:	2200      	movs	r2, #0
    5ece:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5ed0:	68fb      	ldr	r3, [r7, #12]
    5ed2:	2200      	movs	r2, #0
    5ed4:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5ed6:	68fb      	ldr	r3, [r7, #12]
    5ed8:	2200      	movs	r2, #0
    5eda:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5edc:	68fb      	ldr	r3, [r7, #12]
    5ede:	2230      	movs	r2, #48	; 0x30
    5ee0:	2100      	movs	r1, #0
    5ee2:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5ee4:	68fb      	ldr	r3, [r7, #12]
    5ee6:	2231      	movs	r2, #49	; 0x31
    5ee8:	2100      	movs	r1, #0
    5eea:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5eec:	68fb      	ldr	r3, [r7, #12]
    5eee:	2232      	movs	r2, #50	; 0x32
    5ef0:	2100      	movs	r1, #0
    5ef2:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5ef4:	68fb      	ldr	r3, [r7, #12]
    5ef6:	2233      	movs	r2, #51	; 0x33
    5ef8:	2100      	movs	r1, #0
    5efa:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5efc:	68fb      	ldr	r3, [r7, #12]
    5efe:	681b      	ldr	r3, [r3, #0]
    5f00:	2227      	movs	r2, #39	; 0x27
    5f02:	18bc      	adds	r4, r7, r2
    5f04:	0018      	movs	r0, r3
    5f06:	4b0d      	ldr	r3, [pc, #52]	; (5f3c <usart_init+0x240>)
    5f08:	4798      	blx	r3
    5f0a:	0003      	movs	r3, r0
    5f0c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5f0e:	4a15      	ldr	r2, [pc, #84]	; (5f64 <usart_init+0x268>)
    5f10:	2327      	movs	r3, #39	; 0x27
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	0011      	movs	r1, r2
    5f18:	0018      	movs	r0, r3
    5f1a:	4b13      	ldr	r3, [pc, #76]	; (5f68 <usart_init+0x26c>)
    5f1c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5f1e:	2327      	movs	r3, #39	; 0x27
    5f20:	18fb      	adds	r3, r7, r3
    5f22:	781a      	ldrb	r2, [r3, #0]
    5f24:	4b11      	ldr	r3, [pc, #68]	; (5f6c <usart_init+0x270>)
    5f26:	0092      	lsls	r2, r2, #2
    5f28:	68f9      	ldr	r1, [r7, #12]
    5f2a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5f2c:	233b      	movs	r3, #59	; 0x3b
    5f2e:	18fb      	adds	r3, r7, r3
    5f30:	781b      	ldrb	r3, [r3, #0]
}
    5f32:	0018      	movs	r0, r3
    5f34:	46bd      	mov	sp, r7
    5f36:	b013      	add	sp, #76	; 0x4c
    5f38:	bd90      	pop	{r4, r7, pc}
    5f3a:	46c0      	nop			; (mov r8, r8)
    5f3c:	00004a49 	.word	0x00004a49
    5f40:	00005945 	.word	0x00005945
    5f44:	0000592d 	.word	0x0000592d
    5f48:	00007101 	.word	0x00007101
    5f4c:	00007145 	.word	0x00007145
    5f50:	00004801 	.word	0x00004801
    5f54:	00005a2d 	.word	0x00005a2d
    5f58:	000059a1 	.word	0x000059a1
    5f5c:	0000488d 	.word	0x0000488d
    5f60:	000073ed 	.word	0x000073ed
    5f64:	00006105 	.word	0x00006105
    5f68:	00004aad 	.word	0x00004aad
    5f6c:	20004610 	.word	0x20004610

00005f70 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    5f70:	b580      	push	{r7, lr}
    5f72:	b084      	sub	sp, #16
    5f74:	af00      	add	r7, sp, #0
    5f76:	6078      	str	r0, [r7, #4]
    5f78:	000a      	movs	r2, r1
    5f7a:	1cbb      	adds	r3, r7, #2
    5f7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	681b      	ldr	r3, [r3, #0]
    5f82:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	79db      	ldrb	r3, [r3, #7]
    5f88:	2201      	movs	r2, #1
    5f8a:	4053      	eors	r3, r2
    5f8c:	b2db      	uxtb	r3, r3
    5f8e:	2b00      	cmp	r3, #0
    5f90:	d001      	beq.n	5f96 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    5f92:	231c      	movs	r3, #28
    5f94:	e017      	b.n	5fc6 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5f96:	687b      	ldr	r3, [r7, #4]
    5f98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5f9a:	b29b      	uxth	r3, r3
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d001      	beq.n	5fa4 <usart_write_wait+0x34>
		return STATUS_BUSY;
    5fa0:	2305      	movs	r3, #5
    5fa2:	e010      	b.n	5fc6 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5fa4:	687b      	ldr	r3, [r7, #4]
    5fa6:	0018      	movs	r0, r3
    5fa8:	4b09      	ldr	r3, [pc, #36]	; (5fd0 <usart_write_wait+0x60>)
    5faa:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5fac:	68fb      	ldr	r3, [r7, #12]
    5fae:	1cba      	adds	r2, r7, #2
    5fb0:	8812      	ldrh	r2, [r2, #0]
    5fb2:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5fb4:	46c0      	nop			; (mov r8, r8)
    5fb6:	68fb      	ldr	r3, [r7, #12]
    5fb8:	7e1b      	ldrb	r3, [r3, #24]
    5fba:	b2db      	uxtb	r3, r3
    5fbc:	001a      	movs	r2, r3
    5fbe:	2302      	movs	r3, #2
    5fc0:	4013      	ands	r3, r2
    5fc2:	d0f8      	beq.n	5fb6 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5fc4:	2300      	movs	r3, #0
}
    5fc6:	0018      	movs	r0, r3
    5fc8:	46bd      	mov	sp, r7
    5fca:	b004      	add	sp, #16
    5fcc:	bd80      	pop	{r7, pc}
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	00005a09 	.word	0x00005a09

00005fd4 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5fd4:	b580      	push	{r7, lr}
    5fd6:	b084      	sub	sp, #16
    5fd8:	af00      	add	r7, sp, #0
    5fda:	6078      	str	r0, [r7, #4]
    5fdc:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5fde:	687b      	ldr	r3, [r7, #4]
    5fe0:	681b      	ldr	r3, [r3, #0]
    5fe2:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5fe4:	687b      	ldr	r3, [r7, #4]
    5fe6:	799b      	ldrb	r3, [r3, #6]
    5fe8:	2201      	movs	r2, #1
    5fea:	4053      	eors	r3, r2
    5fec:	b2db      	uxtb	r3, r3
    5fee:	2b00      	cmp	r3, #0
    5ff0:	d001      	beq.n	5ff6 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5ff2:	231c      	movs	r3, #28
    5ff4:	e05e      	b.n	60b4 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5ffa:	b29b      	uxth	r3, r3
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	d001      	beq.n	6004 <usart_read_wait+0x30>
		return STATUS_BUSY;
    6000:	2305      	movs	r3, #5
    6002:	e057      	b.n	60b4 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    6004:	68fb      	ldr	r3, [r7, #12]
    6006:	7e1b      	ldrb	r3, [r3, #24]
    6008:	b2db      	uxtb	r3, r3
    600a:	001a      	movs	r2, r3
    600c:	2304      	movs	r3, #4
    600e:	4013      	ands	r3, r2
    6010:	d101      	bne.n	6016 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    6012:	2305      	movs	r3, #5
    6014:	e04e      	b.n	60b4 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6016:	687b      	ldr	r3, [r7, #4]
    6018:	0018      	movs	r0, r3
    601a:	4b28      	ldr	r3, [pc, #160]	; (60bc <usart_read_wait+0xe8>)
    601c:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    601e:	68fb      	ldr	r3, [r7, #12]
    6020:	8b5b      	ldrh	r3, [r3, #26]
    6022:	b29b      	uxth	r3, r3
    6024:	b2da      	uxtb	r2, r3
    6026:	230b      	movs	r3, #11
    6028:	18fb      	adds	r3, r7, r3
    602a:	213f      	movs	r1, #63	; 0x3f
    602c:	400a      	ands	r2, r1
    602e:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    6030:	230b      	movs	r3, #11
    6032:	18fb      	adds	r3, r7, r3
    6034:	781b      	ldrb	r3, [r3, #0]
    6036:	2b00      	cmp	r3, #0
    6038:	d036      	beq.n	60a8 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    603a:	230b      	movs	r3, #11
    603c:	18fb      	adds	r3, r7, r3
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	2202      	movs	r2, #2
    6042:	4013      	ands	r3, r2
    6044:	d004      	beq.n	6050 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6046:	68fb      	ldr	r3, [r7, #12]
    6048:	2202      	movs	r2, #2
    604a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    604c:	231a      	movs	r3, #26
    604e:	e031      	b.n	60b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6050:	230b      	movs	r3, #11
    6052:	18fb      	adds	r3, r7, r3
    6054:	781b      	ldrb	r3, [r3, #0]
    6056:	2204      	movs	r2, #4
    6058:	4013      	ands	r3, r2
    605a:	d004      	beq.n	6066 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    605c:	68fb      	ldr	r3, [r7, #12]
    605e:	2204      	movs	r2, #4
    6060:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    6062:	231e      	movs	r3, #30
    6064:	e026      	b.n	60b4 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6066:	230b      	movs	r3, #11
    6068:	18fb      	adds	r3, r7, r3
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	2201      	movs	r2, #1
    606e:	4013      	ands	r3, r2
    6070:	d004      	beq.n	607c <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6072:	68fb      	ldr	r3, [r7, #12]
    6074:	2201      	movs	r2, #1
    6076:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    6078:	2313      	movs	r3, #19
    607a:	e01b      	b.n	60b4 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    607c:	230b      	movs	r3, #11
    607e:	18fb      	adds	r3, r7, r3
    6080:	781b      	ldrb	r3, [r3, #0]
    6082:	2210      	movs	r2, #16
    6084:	4013      	ands	r3, r2
    6086:	d004      	beq.n	6092 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6088:	68fb      	ldr	r3, [r7, #12]
    608a:	2210      	movs	r2, #16
    608c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    608e:	2342      	movs	r3, #66	; 0x42
    6090:	e010      	b.n	60b4 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    6092:	230b      	movs	r3, #11
    6094:	18fb      	adds	r3, r7, r3
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	2220      	movs	r2, #32
    609a:	4013      	ands	r3, r2
    609c:	d004      	beq.n	60a8 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    609e:	68fb      	ldr	r3, [r7, #12]
    60a0:	2220      	movs	r2, #32
    60a2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    60a4:	2341      	movs	r3, #65	; 0x41
    60a6:	e005      	b.n	60b4 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    60a8:	68fb      	ldr	r3, [r7, #12]
    60aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    60ac:	b29a      	uxth	r2, r3
    60ae:	683b      	ldr	r3, [r7, #0]
    60b0:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    60b2:	2300      	movs	r3, #0
}
    60b4:	0018      	movs	r0, r3
    60b6:	46bd      	mov	sp, r7
    60b8:	b004      	add	sp, #16
    60ba:	bd80      	pop	{r7, pc}
    60bc:	00005a09 	.word	0x00005a09

000060c0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b084      	sub	sp, #16
    60c4:	af00      	add	r7, sp, #0
    60c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    60c8:	687b      	ldr	r3, [r7, #4]
    60ca:	681b      	ldr	r3, [r3, #0]
    60cc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    60ce:	68fb      	ldr	r3, [r7, #12]
    60d0:	69db      	ldr	r3, [r3, #28]
    60d2:	1e5a      	subs	r2, r3, #1
    60d4:	4193      	sbcs	r3, r2
    60d6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    60d8:	0018      	movs	r0, r3
    60da:	46bd      	mov	sp, r7
    60dc:	b004      	add	sp, #16
    60de:	bd80      	pop	{r7, pc}

000060e0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    60e0:	b580      	push	{r7, lr}
    60e2:	b082      	sub	sp, #8
    60e4:	af00      	add	r7, sp, #0
    60e6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    60e8:	46c0      	nop			; (mov r8, r8)
    60ea:	687b      	ldr	r3, [r7, #4]
    60ec:	0018      	movs	r0, r3
    60ee:	4b04      	ldr	r3, [pc, #16]	; (6100 <_usart_wait_for_sync+0x20>)
    60f0:	4798      	blx	r3
    60f2:	1e03      	subs	r3, r0, #0
    60f4:	d1f9      	bne.n	60ea <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    60f6:	46c0      	nop			; (mov r8, r8)
    60f8:	46bd      	mov	sp, r7
    60fa:	b002      	add	sp, #8
    60fc:	bd80      	pop	{r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	000060c1 	.word	0x000060c1

00006104 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6104:	b580      	push	{r7, lr}
    6106:	b088      	sub	sp, #32
    6108:	af00      	add	r7, sp, #0
    610a:	0002      	movs	r2, r0
    610c:	1dfb      	adds	r3, r7, #7
    610e:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    6110:	1dfb      	adds	r3, r7, #7
    6112:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    6114:	4ba3      	ldr	r3, [pc, #652]	; (63a4 <_usart_interrupt_handler+0x2a0>)
    6116:	0092      	lsls	r2, r2, #2
    6118:	58d3      	ldr	r3, [r2, r3]
    611a:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    611c:	69bb      	ldr	r3, [r7, #24]
    611e:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    6120:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    6122:	69bb      	ldr	r3, [r7, #24]
    6124:	0018      	movs	r0, r3
    6126:	4ba0      	ldr	r3, [pc, #640]	; (63a8 <_usart_interrupt_handler+0x2a4>)
    6128:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    612a:	697b      	ldr	r3, [r7, #20]
    612c:	7e1b      	ldrb	r3, [r3, #24]
    612e:	b2da      	uxtb	r2, r3
    6130:	2312      	movs	r3, #18
    6132:	18fb      	adds	r3, r7, r3
    6134:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    6136:	697b      	ldr	r3, [r7, #20]
    6138:	7d9b      	ldrb	r3, [r3, #22]
    613a:	b2db      	uxtb	r3, r3
    613c:	b29a      	uxth	r2, r3
    613e:	2312      	movs	r3, #18
    6140:	18fb      	adds	r3, r7, r3
    6142:	2112      	movs	r1, #18
    6144:	1879      	adds	r1, r7, r1
    6146:	8809      	ldrh	r1, [r1, #0]
    6148:	400a      	ands	r2, r1
    614a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    614c:	69bb      	ldr	r3, [r7, #24]
    614e:	2230      	movs	r2, #48	; 0x30
    6150:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    6152:	69ba      	ldr	r2, [r7, #24]
    6154:	2131      	movs	r1, #49	; 0x31
    6156:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    6158:	4013      	ands	r3, r2
    615a:	b2da      	uxtb	r2, r3
    615c:	2310      	movs	r3, #16
    615e:	18fb      	adds	r3, r7, r3
    6160:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6162:	2312      	movs	r3, #18
    6164:	18fb      	adds	r3, r7, r3
    6166:	881b      	ldrh	r3, [r3, #0]
    6168:	2201      	movs	r2, #1
    616a:	4013      	ands	r3, r2
    616c:	d044      	beq.n	61f8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    616e:	69bb      	ldr	r3, [r7, #24]
    6170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6172:	b29b      	uxth	r3, r3
    6174:	2b00      	cmp	r3, #0
    6176:	d03c      	beq.n	61f2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6178:	69bb      	ldr	r3, [r7, #24]
    617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	b2da      	uxtb	r2, r3
    6180:	231c      	movs	r3, #28
    6182:	18fb      	adds	r3, r7, r3
    6184:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6186:	69bb      	ldr	r3, [r7, #24]
    6188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    618a:	1c5a      	adds	r2, r3, #1
    618c:	69bb      	ldr	r3, [r7, #24]
    618e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6190:	69bb      	ldr	r3, [r7, #24]
    6192:	795b      	ldrb	r3, [r3, #5]
    6194:	2b01      	cmp	r3, #1
    6196:	d113      	bne.n	61c0 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6198:	69bb      	ldr	r3, [r7, #24]
    619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    619c:	781b      	ldrb	r3, [r3, #0]
    619e:	b2db      	uxtb	r3, r3
    61a0:	021b      	lsls	r3, r3, #8
    61a2:	b21a      	sxth	r2, r3
    61a4:	231c      	movs	r3, #28
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	2100      	movs	r1, #0
    61aa:	5e5b      	ldrsh	r3, [r3, r1]
    61ac:	4313      	orrs	r3, r2
    61ae:	b21a      	sxth	r2, r3
    61b0:	231c      	movs	r3, #28
    61b2:	18fb      	adds	r3, r7, r3
    61b4:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    61b6:	69bb      	ldr	r3, [r7, #24]
    61b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61ba:	1c5a      	adds	r2, r3, #1
    61bc:	69bb      	ldr	r3, [r7, #24]
    61be:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    61c0:	231c      	movs	r3, #28
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	881b      	ldrh	r3, [r3, #0]
    61c6:	05db      	lsls	r3, r3, #23
    61c8:	0ddb      	lsrs	r3, r3, #23
    61ca:	b29a      	uxth	r2, r3
    61cc:	697b      	ldr	r3, [r7, #20]
    61ce:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    61d0:	69bb      	ldr	r3, [r7, #24]
    61d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    61d4:	b29b      	uxth	r3, r3
    61d6:	3b01      	subs	r3, #1
    61d8:	b29b      	uxth	r3, r3
    61da:	69ba      	ldr	r2, [r7, #24]
    61dc:	1c19      	adds	r1, r3, #0
    61de:	85d1      	strh	r1, [r2, #46]	; 0x2e
    61e0:	2b00      	cmp	r3, #0
    61e2:	d109      	bne.n	61f8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61e4:	697b      	ldr	r3, [r7, #20]
    61e6:	2201      	movs	r2, #1
    61e8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    61ea:	697b      	ldr	r3, [r7, #20]
    61ec:	2202      	movs	r2, #2
    61ee:	759a      	strb	r2, [r3, #22]
    61f0:	e002      	b.n	61f8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    61f2:	697b      	ldr	r3, [r7, #20]
    61f4:	2201      	movs	r2, #1
    61f6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    61f8:	2312      	movs	r3, #18
    61fa:	18fb      	adds	r3, r7, r3
    61fc:	881b      	ldrh	r3, [r3, #0]
    61fe:	2202      	movs	r2, #2
    6200:	4013      	ands	r3, r2
    6202:	d011      	beq.n	6228 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    6204:	697b      	ldr	r3, [r7, #20]
    6206:	2202      	movs	r2, #2
    6208:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    620a:	69bb      	ldr	r3, [r7, #24]
    620c:	2233      	movs	r2, #51	; 0x33
    620e:	2100      	movs	r1, #0
    6210:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    6212:	2310      	movs	r3, #16
    6214:	18fb      	adds	r3, r7, r3
    6216:	881b      	ldrh	r3, [r3, #0]
    6218:	2201      	movs	r2, #1
    621a:	4013      	ands	r3, r2
    621c:	d004      	beq.n	6228 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    621e:	69bb      	ldr	r3, [r7, #24]
    6220:	68db      	ldr	r3, [r3, #12]
    6222:	69ba      	ldr	r2, [r7, #24]
    6224:	0010      	movs	r0, r2
    6226:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    6228:	2312      	movs	r3, #18
    622a:	18fb      	adds	r3, r7, r3
    622c:	881b      	ldrh	r3, [r3, #0]
    622e:	2204      	movs	r2, #4
    6230:	4013      	ands	r3, r2
    6232:	d100      	bne.n	6236 <_usart_interrupt_handler+0x132>
    6234:	e0bd      	b.n	63b2 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    6236:	69bb      	ldr	r3, [r7, #24]
    6238:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    623a:	b29b      	uxth	r3, r3
    623c:	2b00      	cmp	r3, #0
    623e:	d100      	bne.n	6242 <_usart_interrupt_handler+0x13e>
    6240:	e0b4      	b.n	63ac <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    6242:	697b      	ldr	r3, [r7, #20]
    6244:	8b5b      	ldrh	r3, [r3, #26]
    6246:	b29b      	uxth	r3, r3
    6248:	b2da      	uxtb	r2, r3
    624a:	231f      	movs	r3, #31
    624c:	18fb      	adds	r3, r7, r3
    624e:	213f      	movs	r1, #63	; 0x3f
    6250:	400a      	ands	r2, r1
    6252:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6254:	231f      	movs	r3, #31
    6256:	18fb      	adds	r3, r7, r3
    6258:	781b      	ldrb	r3, [r3, #0]
    625a:	2208      	movs	r2, #8
    625c:	4013      	ands	r3, r2
    625e:	d007      	beq.n	6270 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6260:	231f      	movs	r3, #31
    6262:	18fb      	adds	r3, r7, r3
    6264:	221f      	movs	r2, #31
    6266:	18ba      	adds	r2, r7, r2
    6268:	7812      	ldrb	r2, [r2, #0]
    626a:	2108      	movs	r1, #8
    626c:	438a      	bics	r2, r1
    626e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6270:	231f      	movs	r3, #31
    6272:	18fb      	adds	r3, r7, r3
    6274:	781b      	ldrb	r3, [r3, #0]
    6276:	2b00      	cmp	r3, #0
    6278:	d050      	beq.n	631c <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    627a:	231f      	movs	r3, #31
    627c:	18fb      	adds	r3, r7, r3
    627e:	781b      	ldrb	r3, [r3, #0]
    6280:	2202      	movs	r2, #2
    6282:	4013      	ands	r3, r2
    6284:	d007      	beq.n	6296 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6286:	69bb      	ldr	r3, [r7, #24]
    6288:	2232      	movs	r2, #50	; 0x32
    628a:	211a      	movs	r1, #26
    628c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    628e:	697b      	ldr	r3, [r7, #20]
    6290:	2202      	movs	r2, #2
    6292:	835a      	strh	r2, [r3, #26]
    6294:	e036      	b.n	6304 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6296:	231f      	movs	r3, #31
    6298:	18fb      	adds	r3, r7, r3
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	2204      	movs	r2, #4
    629e:	4013      	ands	r3, r2
    62a0:	d007      	beq.n	62b2 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    62a2:	69bb      	ldr	r3, [r7, #24]
    62a4:	2232      	movs	r2, #50	; 0x32
    62a6:	211e      	movs	r1, #30
    62a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    62aa:	697b      	ldr	r3, [r7, #20]
    62ac:	2204      	movs	r2, #4
    62ae:	835a      	strh	r2, [r3, #26]
    62b0:	e028      	b.n	6304 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    62b2:	231f      	movs	r3, #31
    62b4:	18fb      	adds	r3, r7, r3
    62b6:	781b      	ldrb	r3, [r3, #0]
    62b8:	2201      	movs	r2, #1
    62ba:	4013      	ands	r3, r2
    62bc:	d007      	beq.n	62ce <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    62be:	69bb      	ldr	r3, [r7, #24]
    62c0:	2232      	movs	r2, #50	; 0x32
    62c2:	2113      	movs	r1, #19
    62c4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    62c6:	697b      	ldr	r3, [r7, #20]
    62c8:	2201      	movs	r2, #1
    62ca:	835a      	strh	r2, [r3, #26]
    62cc:	e01a      	b.n	6304 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    62ce:	231f      	movs	r3, #31
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	781b      	ldrb	r3, [r3, #0]
    62d4:	2210      	movs	r2, #16
    62d6:	4013      	ands	r3, r2
    62d8:	d007      	beq.n	62ea <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    62da:	69bb      	ldr	r3, [r7, #24]
    62dc:	2232      	movs	r2, #50	; 0x32
    62de:	2142      	movs	r1, #66	; 0x42
    62e0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    62e2:	697b      	ldr	r3, [r7, #20]
    62e4:	2210      	movs	r2, #16
    62e6:	835a      	strh	r2, [r3, #26]
    62e8:	e00c      	b.n	6304 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    62ea:	231f      	movs	r3, #31
    62ec:	18fb      	adds	r3, r7, r3
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	2220      	movs	r2, #32
    62f2:	4013      	ands	r3, r2
    62f4:	d006      	beq.n	6304 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    62f6:	69bb      	ldr	r3, [r7, #24]
    62f8:	2232      	movs	r2, #50	; 0x32
    62fa:	2141      	movs	r1, #65	; 0x41
    62fc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    62fe:	697b      	ldr	r3, [r7, #20]
    6300:	2220      	movs	r2, #32
    6302:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6304:	2310      	movs	r3, #16
    6306:	18fb      	adds	r3, r7, r3
    6308:	881b      	ldrh	r3, [r3, #0]
    630a:	2204      	movs	r2, #4
    630c:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    630e:	d050      	beq.n	63b2 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6310:	69bb      	ldr	r3, [r7, #24]
    6312:	695b      	ldr	r3, [r3, #20]
    6314:	69ba      	ldr	r2, [r7, #24]
    6316:	0010      	movs	r0, r2
    6318:	4798      	blx	r3
    631a:	e04a      	b.n	63b2 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    631c:	697b      	ldr	r3, [r7, #20]
    631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6320:	b29a      	uxth	r2, r3
    6322:	230e      	movs	r3, #14
    6324:	18fb      	adds	r3, r7, r3
    6326:	05d2      	lsls	r2, r2, #23
    6328:	0dd2      	lsrs	r2, r2, #23
    632a:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    632c:	69bb      	ldr	r3, [r7, #24]
    632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6330:	220e      	movs	r2, #14
    6332:	18ba      	adds	r2, r7, r2
    6334:	8812      	ldrh	r2, [r2, #0]
    6336:	b2d2      	uxtb	r2, r2
    6338:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    633a:	69bb      	ldr	r3, [r7, #24]
    633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    633e:	1c5a      	adds	r2, r3, #1
    6340:	69bb      	ldr	r3, [r7, #24]
    6342:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6344:	69bb      	ldr	r3, [r7, #24]
    6346:	795b      	ldrb	r3, [r3, #5]
    6348:	2b01      	cmp	r3, #1
    634a:	d10d      	bne.n	6368 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    634c:	69bb      	ldr	r3, [r7, #24]
    634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6350:	220e      	movs	r2, #14
    6352:	18ba      	adds	r2, r7, r2
    6354:	8812      	ldrh	r2, [r2, #0]
    6356:	0a12      	lsrs	r2, r2, #8
    6358:	b292      	uxth	r2, r2
    635a:	b2d2      	uxtb	r2, r2
    635c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    635e:	69bb      	ldr	r3, [r7, #24]
    6360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6362:	1c5a      	adds	r2, r3, #1
    6364:	69bb      	ldr	r3, [r7, #24]
    6366:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6368:	69bb      	ldr	r3, [r7, #24]
    636a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    636c:	b29b      	uxth	r3, r3
    636e:	3b01      	subs	r3, #1
    6370:	b29b      	uxth	r3, r3
    6372:	69ba      	ldr	r2, [r7, #24]
    6374:	1c19      	adds	r1, r3, #0
    6376:	8591      	strh	r1, [r2, #44]	; 0x2c
    6378:	2b00      	cmp	r3, #0
    637a:	d11a      	bne.n	63b2 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    637c:	697b      	ldr	r3, [r7, #20]
    637e:	2204      	movs	r2, #4
    6380:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6382:	69bb      	ldr	r3, [r7, #24]
    6384:	2232      	movs	r2, #50	; 0x32
    6386:	2100      	movs	r1, #0
    6388:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    638a:	2310      	movs	r3, #16
    638c:	18fb      	adds	r3, r7, r3
    638e:	881b      	ldrh	r3, [r3, #0]
    6390:	2202      	movs	r2, #2
    6392:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    6394:	d00d      	beq.n	63b2 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6396:	69bb      	ldr	r3, [r7, #24]
    6398:	691b      	ldr	r3, [r3, #16]
    639a:	69ba      	ldr	r2, [r7, #24]
    639c:	0010      	movs	r0, r2
    639e:	4798      	blx	r3
    63a0:	e007      	b.n	63b2 <_usart_interrupt_handler+0x2ae>
    63a2:	46c0      	nop			; (mov r8, r8)
    63a4:	20004610 	.word	0x20004610
    63a8:	000060e1 	.word	0x000060e1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    63ac:	697b      	ldr	r3, [r7, #20]
    63ae:	2204      	movs	r2, #4
    63b0:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    63b2:	2312      	movs	r3, #18
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	881b      	ldrh	r3, [r3, #0]
    63b8:	2210      	movs	r2, #16
    63ba:	4013      	ands	r3, r2
    63bc:	d010      	beq.n	63e0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    63be:	697b      	ldr	r3, [r7, #20]
    63c0:	2210      	movs	r2, #16
    63c2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    63c4:	697b      	ldr	r3, [r7, #20]
    63c6:	2210      	movs	r2, #16
    63c8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    63ca:	2310      	movs	r3, #16
    63cc:	18fb      	adds	r3, r7, r3
    63ce:	881b      	ldrh	r3, [r3, #0]
    63d0:	2210      	movs	r2, #16
    63d2:	4013      	ands	r3, r2
    63d4:	d004      	beq.n	63e0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    63d6:	69bb      	ldr	r3, [r7, #24]
    63d8:	69db      	ldr	r3, [r3, #28]
    63da:	69ba      	ldr	r2, [r7, #24]
    63dc:	0010      	movs	r0, r2
    63de:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    63e0:	2312      	movs	r3, #18
    63e2:	18fb      	adds	r3, r7, r3
    63e4:	881b      	ldrh	r3, [r3, #0]
    63e6:	2220      	movs	r2, #32
    63e8:	4013      	ands	r3, r2
    63ea:	d010      	beq.n	640e <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    63ec:	697b      	ldr	r3, [r7, #20]
    63ee:	2220      	movs	r2, #32
    63f0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    63f2:	697b      	ldr	r3, [r7, #20]
    63f4:	2220      	movs	r2, #32
    63f6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    63f8:	2310      	movs	r3, #16
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	881b      	ldrh	r3, [r3, #0]
    63fe:	2208      	movs	r2, #8
    6400:	4013      	ands	r3, r2
    6402:	d004      	beq.n	640e <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6404:	69bb      	ldr	r3, [r7, #24]
    6406:	699b      	ldr	r3, [r3, #24]
    6408:	69ba      	ldr	r2, [r7, #24]
    640a:	0010      	movs	r0, r2
    640c:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    640e:	2312      	movs	r3, #18
    6410:	18fb      	adds	r3, r7, r3
    6412:	881b      	ldrh	r3, [r3, #0]
    6414:	2208      	movs	r2, #8
    6416:	4013      	ands	r3, r2
    6418:	d010      	beq.n	643c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    641a:	697b      	ldr	r3, [r7, #20]
    641c:	2208      	movs	r2, #8
    641e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6420:	697b      	ldr	r3, [r7, #20]
    6422:	2208      	movs	r2, #8
    6424:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6426:	2310      	movs	r3, #16
    6428:	18fb      	adds	r3, r7, r3
    642a:	881b      	ldrh	r3, [r3, #0]
    642c:	2220      	movs	r2, #32
    642e:	4013      	ands	r3, r2
    6430:	d004      	beq.n	643c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6432:	69bb      	ldr	r3, [r7, #24]
    6434:	6a1b      	ldr	r3, [r3, #32]
    6436:	69ba      	ldr	r2, [r7, #24]
    6438:	0010      	movs	r0, r2
    643a:	4798      	blx	r3
		}
	}
#endif
}
    643c:	46c0      	nop			; (mov r8, r8)
    643e:	46bd      	mov	sp, r7
    6440:	b008      	add	sp, #32
    6442:	bd80      	pop	{r7, pc}

00006444 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    6444:	b580      	push	{r7, lr}
    6446:	b082      	sub	sp, #8
    6448:	af00      	add	r7, sp, #0
    644a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    644c:	687b      	ldr	r3, [r7, #4]
    644e:	2201      	movs	r2, #1
    6450:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6452:	687b      	ldr	r3, [r7, #4]
    6454:	2200      	movs	r2, #0
    6456:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6458:	687b      	ldr	r3, [r7, #4]
    645a:	2206      	movs	r2, #6
    645c:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    645e:	687b      	ldr	r3, [r7, #4]
    6460:	2200      	movs	r2, #0
    6462:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6464:	687b      	ldr	r3, [r7, #4]
    6466:	2200      	movs	r2, #0
    6468:	725a      	strb	r2, [r3, #9]
}
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	46bd      	mov	sp, r7
    646e:	b002      	add	sp, #8
    6470:	bd80      	pop	{r7, pc}
    6472:	46c0      	nop			; (mov r8, r8)

00006474 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6474:	b580      	push	{r7, lr}
    6476:	b082      	sub	sp, #8
    6478:	af00      	add	r7, sp, #0
    647a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    647c:	687b      	ldr	r3, [r7, #4]
    647e:	2200      	movs	r2, #0
    6480:	701a      	strb	r2, [r3, #0]
}
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	46bd      	mov	sp, r7
    6486:	b002      	add	sp, #8
    6488:	bd80      	pop	{r7, pc}
    648a:	46c0      	nop			; (mov r8, r8)

0000648c <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    648c:	b580      	push	{r7, lr}
    648e:	b082      	sub	sp, #8
    6490:	af00      	add	r7, sp, #0
    6492:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6494:	687b      	ldr	r3, [r7, #4]
    6496:	2200      	movs	r2, #0
    6498:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    649a:	687b      	ldr	r3, [r7, #4]
    649c:	2204      	movs	r2, #4
    649e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	2200      	movs	r2, #0
    64a4:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    64a6:	687b      	ldr	r3, [r7, #4]
    64a8:	2280      	movs	r2, #128	; 0x80
    64aa:	0212      	lsls	r2, r2, #8
    64ac:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    64ae:	687b      	ldr	r3, [r7, #4]
    64b0:	2200      	movs	r2, #0
    64b2:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	2201      	movs	r2, #1
    64b8:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    64ba:	687b      	ldr	r3, [r7, #4]
    64bc:	2200      	movs	r2, #0
    64be:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	2201      	movs	r2, #1
    64c4:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    64c6:	687b      	ldr	r3, [r7, #4]
    64c8:	2200      	movs	r2, #0
    64ca:	739a      	strb	r2, [r3, #14]
}
    64cc:	46c0      	nop			; (mov r8, r8)
    64ce:	46bd      	mov	sp, r7
    64d0:	b002      	add	sp, #8
    64d2:	bd80      	pop	{r7, pc}

000064d4 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    64d4:	b580      	push	{r7, lr}
    64d6:	b082      	sub	sp, #8
    64d8:	af00      	add	r7, sp, #0
    64da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    64dc:	687b      	ldr	r3, [r7, #4]
    64de:	2203      	movs	r2, #3
    64e0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    64e2:	687b      	ldr	r3, [r7, #4]
    64e4:	2200      	movs	r2, #0
    64e6:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    64e8:	687b      	ldr	r3, [r7, #4]
    64ea:	2201      	movs	r2, #1
    64ec:	709a      	strb	r2, [r3, #2]
}
    64ee:	46c0      	nop			; (mov r8, r8)
    64f0:	46bd      	mov	sp, r7
    64f2:	b002      	add	sp, #8
    64f4:	bd80      	pop	{r7, pc}
    64f6:	46c0      	nop			; (mov r8, r8)

000064f8 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    64f8:	b580      	push	{r7, lr}
    64fa:	b082      	sub	sp, #8
    64fc:	af00      	add	r7, sp, #0
    64fe:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    6500:	687b      	ldr	r3, [r7, #4]
    6502:	2200      	movs	r2, #0
    6504:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6506:	687b      	ldr	r3, [r7, #4]
    6508:	2200      	movs	r2, #0
    650a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    650c:	687b      	ldr	r3, [r7, #4]
    650e:	2200      	movs	r2, #0
    6510:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6512:	687b      	ldr	r3, [r7, #4]
    6514:	2200      	movs	r2, #0
    6516:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	2200      	movs	r2, #0
    651c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    651e:	687b      	ldr	r3, [r7, #4]
    6520:	2201      	movs	r2, #1
    6522:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6524:	687b      	ldr	r3, [r7, #4]
    6526:	2207      	movs	r2, #7
    6528:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    652a:	687b      	ldr	r3, [r7, #4]
    652c:	223f      	movs	r2, #63	; 0x3f
    652e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    6530:	687b      	ldr	r3, [r7, #4]
    6532:	2201      	movs	r2, #1
    6534:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	2201      	movs	r2, #1
    653a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    653c:	687b      	ldr	r3, [r7, #4]
    653e:	2206      	movs	r2, #6
    6540:	821a      	strh	r2, [r3, #16]
}
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	46bd      	mov	sp, r7
    6546:	b002      	add	sp, #8
    6548:	bd80      	pop	{r7, pc}
    654a:	46c0      	nop			; (mov r8, r8)

0000654c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    654c:	b580      	push	{r7, lr}
    654e:	b082      	sub	sp, #8
    6550:	af00      	add	r7, sp, #0
    6552:	0002      	movs	r2, r0
    6554:	1dfb      	adds	r3, r7, #7
    6556:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    6558:	4a03      	ldr	r2, [pc, #12]	; (6568 <system_cpu_clock_set_divider+0x1c>)
    655a:	1dfb      	adds	r3, r7, #7
    655c:	781b      	ldrb	r3, [r3, #0]
    655e:	7213      	strb	r3, [r2, #8]
}
    6560:	46c0      	nop			; (mov r8, r8)
    6562:	46bd      	mov	sp, r7
    6564:	b002      	add	sp, #8
    6566:	bd80      	pop	{r7, pc}
    6568:	40000400 	.word	0x40000400

0000656c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    656c:	b580      	push	{r7, lr}
    656e:	b082      	sub	sp, #8
    6570:	af00      	add	r7, sp, #0
    6572:	0002      	movs	r2, r0
    6574:	1dfb      	adds	r3, r7, #7
    6576:	701a      	strb	r2, [r3, #0]
    6578:	1dbb      	adds	r3, r7, #6
    657a:	1c0a      	adds	r2, r1, #0
    657c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    657e:	1dfb      	adds	r3, r7, #7
    6580:	781b      	ldrb	r3, [r3, #0]
    6582:	2b01      	cmp	r3, #1
    6584:	d008      	beq.n	6598 <system_apb_clock_set_divider+0x2c>
    6586:	2b02      	cmp	r3, #2
    6588:	d00b      	beq.n	65a2 <system_apb_clock_set_divider+0x36>
    658a:	2b00      	cmp	r3, #0
    658c:	d10e      	bne.n	65ac <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    658e:	4a0b      	ldr	r2, [pc, #44]	; (65bc <system_apb_clock_set_divider+0x50>)
    6590:	1dbb      	adds	r3, r7, #6
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	7253      	strb	r3, [r2, #9]
			break;
    6596:	e00b      	b.n	65b0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    6598:	4a08      	ldr	r2, [pc, #32]	; (65bc <system_apb_clock_set_divider+0x50>)
    659a:	1dbb      	adds	r3, r7, #6
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	7293      	strb	r3, [r2, #10]
			break;
    65a0:	e006      	b.n	65b0 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    65a2:	4a06      	ldr	r2, [pc, #24]	; (65bc <system_apb_clock_set_divider+0x50>)
    65a4:	1dbb      	adds	r3, r7, #6
    65a6:	781b      	ldrb	r3, [r3, #0]
    65a8:	72d3      	strb	r3, [r2, #11]
			break;
    65aa:	e001      	b.n	65b0 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    65ac:	2317      	movs	r3, #23
    65ae:	e000      	b.n	65b2 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    65b0:	2300      	movs	r3, #0
}
    65b2:	0018      	movs	r0, r3
    65b4:	46bd      	mov	sp, r7
    65b6:	b002      	add	sp, #8
    65b8:	bd80      	pop	{r7, pc}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	40000400 	.word	0x40000400

000065c0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b082      	sub	sp, #8
    65c4:	af00      	add	r7, sp, #0
    65c6:	0002      	movs	r2, r0
    65c8:	1dfb      	adds	r3, r7, #7
    65ca:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    65cc:	4a08      	ldr	r2, [pc, #32]	; (65f0 <system_flash_set_waitstates+0x30>)
    65ce:	1dfb      	adds	r3, r7, #7
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	210f      	movs	r1, #15
    65d4:	400b      	ands	r3, r1
    65d6:	b2d9      	uxtb	r1, r3
    65d8:	6853      	ldr	r3, [r2, #4]
    65da:	200f      	movs	r0, #15
    65dc:	4001      	ands	r1, r0
    65de:	0049      	lsls	r1, r1, #1
    65e0:	201e      	movs	r0, #30
    65e2:	4383      	bics	r3, r0
    65e4:	430b      	orrs	r3, r1
    65e6:	6053      	str	r3, [r2, #4]
}
    65e8:	46c0      	nop			; (mov r8, r8)
    65ea:	46bd      	mov	sp, r7
    65ec:	b002      	add	sp, #8
    65ee:	bd80      	pop	{r7, pc}
    65f0:	41004000 	.word	0x41004000

000065f4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    65f4:	b580      	push	{r7, lr}
    65f6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    65f8:	46c0      	nop			; (mov r8, r8)
    65fa:	4b04      	ldr	r3, [pc, #16]	; (660c <_system_dfll_wait_for_sync+0x18>)
    65fc:	68db      	ldr	r3, [r3, #12]
    65fe:	2210      	movs	r2, #16
    6600:	4013      	ands	r3, r2
    6602:	d0fa      	beq.n	65fa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6604:	46c0      	nop			; (mov r8, r8)
    6606:	46bd      	mov	sp, r7
    6608:	bd80      	pop	{r7, pc}
    660a:	46c0      	nop			; (mov r8, r8)
    660c:	40000800 	.word	0x40000800

00006610 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6610:	b580      	push	{r7, lr}
    6612:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6614:	4b0c      	ldr	r3, [pc, #48]	; (6648 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6616:	2202      	movs	r2, #2
    6618:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    661a:	4b0c      	ldr	r3, [pc, #48]	; (664c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    661c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    661e:	4a0a      	ldr	r2, [pc, #40]	; (6648 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6620:	4b0b      	ldr	r3, [pc, #44]	; (6650 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6622:	689b      	ldr	r3, [r3, #8]
    6624:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6626:	4a08      	ldr	r2, [pc, #32]	; (6648 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6628:	4b09      	ldr	r3, [pc, #36]	; (6650 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    662a:	685b      	ldr	r3, [r3, #4]
    662c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    662e:	4b06      	ldr	r3, [pc, #24]	; (6648 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6630:	2200      	movs	r2, #0
    6632:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6634:	4b05      	ldr	r3, [pc, #20]	; (664c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6636:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6638:	4a03      	ldr	r2, [pc, #12]	; (6648 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    663a:	4b05      	ldr	r3, [pc, #20]	; (6650 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    663c:	681b      	ldr	r3, [r3, #0]
    663e:	b29b      	uxth	r3, r3
    6640:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6642:	46c0      	nop			; (mov r8, r8)
    6644:	46bd      	mov	sp, r7
    6646:	bd80      	pop	{r7, pc}
    6648:	40000800 	.word	0x40000800
    664c:	000065f5 	.word	0x000065f5
    6650:	200000fc 	.word	0x200000fc

00006654 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6654:	b580      	push	{r7, lr}
    6656:	b082      	sub	sp, #8
    6658:	af00      	add	r7, sp, #0
    665a:	0002      	movs	r2, r0
    665c:	1dfb      	adds	r3, r7, #7
    665e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6660:	1dfb      	adds	r3, r7, #7
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	2b08      	cmp	r3, #8
    6666:	d840      	bhi.n	66ea <system_clock_source_get_hz+0x96>
    6668:	009a      	lsls	r2, r3, #2
    666a:	4b22      	ldr	r3, [pc, #136]	; (66f4 <system_clock_source_get_hz+0xa0>)
    666c:	18d3      	adds	r3, r2, r3
    666e:	681b      	ldr	r3, [r3, #0]
    6670:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6672:	4b21      	ldr	r3, [pc, #132]	; (66f8 <system_clock_source_get_hz+0xa4>)
    6674:	691b      	ldr	r3, [r3, #16]
    6676:	e039      	b.n	66ec <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6678:	4b20      	ldr	r3, [pc, #128]	; (66fc <system_clock_source_get_hz+0xa8>)
    667a:	6a1b      	ldr	r3, [r3, #32]
    667c:	059b      	lsls	r3, r3, #22
    667e:	0f9b      	lsrs	r3, r3, #30
    6680:	b2db      	uxtb	r3, r3
    6682:	001a      	movs	r2, r3
    6684:	4b1e      	ldr	r3, [pc, #120]	; (6700 <system_clock_source_get_hz+0xac>)
    6686:	40d3      	lsrs	r3, r2
    6688:	e030      	b.n	66ec <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    668a:	2380      	movs	r3, #128	; 0x80
    668c:	021b      	lsls	r3, r3, #8
    668e:	e02d      	b.n	66ec <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6690:	2380      	movs	r3, #128	; 0x80
    6692:	021b      	lsls	r3, r3, #8
    6694:	e02a      	b.n	66ec <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6696:	4b18      	ldr	r3, [pc, #96]	; (66f8 <system_clock_source_get_hz+0xa4>)
    6698:	695b      	ldr	r3, [r3, #20]
    669a:	e027      	b.n	66ec <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    669c:	4b16      	ldr	r3, [pc, #88]	; (66f8 <system_clock_source_get_hz+0xa4>)
    669e:	681b      	ldr	r3, [r3, #0]
    66a0:	2202      	movs	r2, #2
    66a2:	4013      	ands	r3, r2
    66a4:	d101      	bne.n	66aa <system_clock_source_get_hz+0x56>
			return 0;
    66a6:	2300      	movs	r3, #0
    66a8:	e020      	b.n	66ec <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    66aa:	4b16      	ldr	r3, [pc, #88]	; (6704 <system_clock_source_get_hz+0xb0>)
    66ac:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    66ae:	4b12      	ldr	r3, [pc, #72]	; (66f8 <system_clock_source_get_hz+0xa4>)
    66b0:	681b      	ldr	r3, [r3, #0]
    66b2:	2204      	movs	r2, #4
    66b4:	4013      	ands	r3, r2
    66b6:	d009      	beq.n	66cc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    66b8:	2000      	movs	r0, #0
    66ba:	4b13      	ldr	r3, [pc, #76]	; (6708 <system_clock_source_get_hz+0xb4>)
    66bc:	4798      	blx	r3
    66be:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    66c0:	4b0d      	ldr	r3, [pc, #52]	; (66f8 <system_clock_source_get_hz+0xa4>)
    66c2:	689b      	ldr	r3, [r3, #8]
    66c4:	041b      	lsls	r3, r3, #16
    66c6:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    66c8:	4353      	muls	r3, r2
    66ca:	e00f      	b.n	66ec <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    66cc:	4b0f      	ldr	r3, [pc, #60]	; (670c <system_clock_source_get_hz+0xb8>)
    66ce:	e00d      	b.n	66ec <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    66d0:	4a0a      	ldr	r2, [pc, #40]	; (66fc <system_clock_source_get_hz+0xa8>)
    66d2:	2350      	movs	r3, #80	; 0x50
    66d4:	5cd3      	ldrb	r3, [r2, r3]
    66d6:	b2db      	uxtb	r3, r3
    66d8:	001a      	movs	r2, r3
    66da:	2304      	movs	r3, #4
    66dc:	4013      	ands	r3, r2
    66de:	d101      	bne.n	66e4 <system_clock_source_get_hz+0x90>
			return 0;
    66e0:	2300      	movs	r3, #0
    66e2:	e003      	b.n	66ec <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    66e4:	4b04      	ldr	r3, [pc, #16]	; (66f8 <system_clock_source_get_hz+0xa4>)
    66e6:	68db      	ldr	r3, [r3, #12]
    66e8:	e000      	b.n	66ec <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    66ea:	2300      	movs	r3, #0
	}
}
    66ec:	0018      	movs	r0, r3
    66ee:	46bd      	mov	sp, r7
    66f0:	b002      	add	sp, #8
    66f2:	bd80      	pop	{r7, pc}
    66f4:	0000da44 	.word	0x0000da44
    66f8:	200000fc 	.word	0x200000fc
    66fc:	40000800 	.word	0x40000800
    6700:	007a1200 	.word	0x007a1200
    6704:	000065f5 	.word	0x000065f5
    6708:	00007225 	.word	0x00007225
    670c:	02dc6c00 	.word	0x02dc6c00

00006710 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6710:	b580      	push	{r7, lr}
    6712:	b084      	sub	sp, #16
    6714:	af00      	add	r7, sp, #0
    6716:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6718:	4b1a      	ldr	r3, [pc, #104]	; (6784 <system_clock_source_osc8m_set_config+0x74>)
    671a:	6a1b      	ldr	r3, [r3, #32]
    671c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    671e:	687b      	ldr	r3, [r7, #4]
    6720:	781b      	ldrb	r3, [r3, #0]
    6722:	1c1a      	adds	r2, r3, #0
    6724:	2303      	movs	r3, #3
    6726:	4013      	ands	r3, r2
    6728:	b2da      	uxtb	r2, r3
    672a:	230d      	movs	r3, #13
    672c:	18fb      	adds	r3, r7, r3
    672e:	2103      	movs	r1, #3
    6730:	400a      	ands	r2, r1
    6732:	0010      	movs	r0, r2
    6734:	781a      	ldrb	r2, [r3, #0]
    6736:	2103      	movs	r1, #3
    6738:	438a      	bics	r2, r1
    673a:	1c11      	adds	r1, r2, #0
    673c:	1c02      	adds	r2, r0, #0
    673e:	430a      	orrs	r2, r1
    6740:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	789a      	ldrb	r2, [r3, #2]
    6746:	230c      	movs	r3, #12
    6748:	18fb      	adds	r3, r7, r3
    674a:	01d0      	lsls	r0, r2, #7
    674c:	781a      	ldrb	r2, [r3, #0]
    674e:	217f      	movs	r1, #127	; 0x7f
    6750:	400a      	ands	r2, r1
    6752:	1c11      	adds	r1, r2, #0
    6754:	1c02      	adds	r2, r0, #0
    6756:	430a      	orrs	r2, r1
    6758:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    675a:	687b      	ldr	r3, [r7, #4]
    675c:	785a      	ldrb	r2, [r3, #1]
    675e:	230c      	movs	r3, #12
    6760:	18fb      	adds	r3, r7, r3
    6762:	2101      	movs	r1, #1
    6764:	400a      	ands	r2, r1
    6766:	0190      	lsls	r0, r2, #6
    6768:	781a      	ldrb	r2, [r3, #0]
    676a:	2140      	movs	r1, #64	; 0x40
    676c:	438a      	bics	r2, r1
    676e:	1c11      	adds	r1, r2, #0
    6770:	1c02      	adds	r2, r0, #0
    6772:	430a      	orrs	r2, r1
    6774:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    6776:	4b03      	ldr	r3, [pc, #12]	; (6784 <system_clock_source_osc8m_set_config+0x74>)
    6778:	68fa      	ldr	r2, [r7, #12]
    677a:	621a      	str	r2, [r3, #32]
}
    677c:	46c0      	nop			; (mov r8, r8)
    677e:	46bd      	mov	sp, r7
    6780:	b004      	add	sp, #16
    6782:	bd80      	pop	{r7, pc}
    6784:	40000800 	.word	0x40000800

00006788 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6788:	b580      	push	{r7, lr}
    678a:	b084      	sub	sp, #16
    678c:	af00      	add	r7, sp, #0
    678e:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6790:	4a43      	ldr	r2, [pc, #268]	; (68a0 <system_clock_source_xosc32k_set_config+0x118>)
    6792:	230c      	movs	r3, #12
    6794:	18fb      	adds	r3, r7, r3
    6796:	8a92      	ldrh	r2, [r2, #20]
    6798:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    679a:	687b      	ldr	r3, [r7, #4]
    679c:	785b      	ldrb	r3, [r3, #1]
    679e:	1c1a      	adds	r2, r3, #0
    67a0:	2307      	movs	r3, #7
    67a2:	4013      	ands	r3, r2
    67a4:	b2da      	uxtb	r2, r3
    67a6:	230c      	movs	r3, #12
    67a8:	18fb      	adds	r3, r7, r3
    67aa:	2107      	movs	r1, #7
    67ac:	400a      	ands	r2, r1
    67ae:	0010      	movs	r0, r2
    67b0:	785a      	ldrb	r2, [r3, #1]
    67b2:	2107      	movs	r1, #7
    67b4:	438a      	bics	r2, r1
    67b6:	1c11      	adds	r1, r2, #0
    67b8:	1c02      	adds	r2, r0, #0
    67ba:	430a      	orrs	r2, r1
    67bc:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    67be:	687b      	ldr	r3, [r7, #4]
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	2b00      	cmp	r3, #0
    67c4:	d106      	bne.n	67d4 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    67c6:	230c      	movs	r3, #12
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	781a      	ldrb	r2, [r3, #0]
    67cc:	2104      	movs	r1, #4
    67ce:	430a      	orrs	r2, r1
    67d0:	701a      	strb	r2, [r3, #0]
    67d2:	e005      	b.n	67e0 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    67d4:	230c      	movs	r3, #12
    67d6:	18fb      	adds	r3, r7, r3
    67d8:	781a      	ldrb	r2, [r3, #0]
    67da:	2104      	movs	r1, #4
    67dc:	438a      	bics	r2, r1
    67de:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    67e0:	687b      	ldr	r3, [r7, #4]
    67e2:	789a      	ldrb	r2, [r3, #2]
    67e4:	230c      	movs	r3, #12
    67e6:	18fb      	adds	r3, r7, r3
    67e8:	2101      	movs	r1, #1
    67ea:	400a      	ands	r2, r1
    67ec:	0150      	lsls	r0, r2, #5
    67ee:	781a      	ldrb	r2, [r3, #0]
    67f0:	2120      	movs	r1, #32
    67f2:	438a      	bics	r2, r1
    67f4:	1c11      	adds	r1, r2, #0
    67f6:	1c02      	adds	r2, r0, #0
    67f8:	430a      	orrs	r2, r1
    67fa:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    67fc:	687b      	ldr	r3, [r7, #4]
    67fe:	78da      	ldrb	r2, [r3, #3]
    6800:	230c      	movs	r3, #12
    6802:	18fb      	adds	r3, r7, r3
    6804:	2101      	movs	r1, #1
    6806:	400a      	ands	r2, r1
    6808:	0110      	lsls	r0, r2, #4
    680a:	781a      	ldrb	r2, [r3, #0]
    680c:	2110      	movs	r1, #16
    680e:	438a      	bics	r2, r1
    6810:	1c11      	adds	r1, r2, #0
    6812:	1c02      	adds	r2, r0, #0
    6814:	430a      	orrs	r2, r1
    6816:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	791a      	ldrb	r2, [r3, #4]
    681c:	230c      	movs	r3, #12
    681e:	18fb      	adds	r3, r7, r3
    6820:	2101      	movs	r1, #1
    6822:	400a      	ands	r2, r1
    6824:	00d0      	lsls	r0, r2, #3
    6826:	781a      	ldrb	r2, [r3, #0]
    6828:	2108      	movs	r1, #8
    682a:	438a      	bics	r2, r1
    682c:	1c11      	adds	r1, r2, #0
    682e:	1c02      	adds	r2, r0, #0
    6830:	430a      	orrs	r2, r1
    6832:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	7b5a      	ldrb	r2, [r3, #13]
    6838:	230c      	movs	r3, #12
    683a:	18fb      	adds	r3, r7, r3
    683c:	01d0      	lsls	r0, r2, #7
    683e:	781a      	ldrb	r2, [r3, #0]
    6840:	217f      	movs	r1, #127	; 0x7f
    6842:	400a      	ands	r2, r1
    6844:	1c11      	adds	r1, r2, #0
    6846:	1c02      	adds	r2, r0, #0
    6848:	430a      	orrs	r2, r1
    684a:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    684c:	687b      	ldr	r3, [r7, #4]
    684e:	7b1a      	ldrb	r2, [r3, #12]
    6850:	230c      	movs	r3, #12
    6852:	18fb      	adds	r3, r7, r3
    6854:	2101      	movs	r1, #1
    6856:	400a      	ands	r2, r1
    6858:	0190      	lsls	r0, r2, #6
    685a:	781a      	ldrb	r2, [r3, #0]
    685c:	2140      	movs	r1, #64	; 0x40
    685e:	438a      	bics	r2, r1
    6860:	1c11      	adds	r1, r2, #0
    6862:	1c02      	adds	r2, r0, #0
    6864:	430a      	orrs	r2, r1
    6866:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	7b9a      	ldrb	r2, [r3, #14]
    686c:	230c      	movs	r3, #12
    686e:	18fb      	adds	r3, r7, r3
    6870:	2101      	movs	r1, #1
    6872:	400a      	ands	r2, r1
    6874:	0110      	lsls	r0, r2, #4
    6876:	785a      	ldrb	r2, [r3, #1]
    6878:	2110      	movs	r1, #16
    687a:	438a      	bics	r2, r1
    687c:	1c11      	adds	r1, r2, #0
    687e:	1c02      	adds	r2, r0, #0
    6880:	430a      	orrs	r2, r1
    6882:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	689a      	ldr	r2, [r3, #8]
    6888:	4b06      	ldr	r3, [pc, #24]	; (68a4 <system_clock_source_xosc32k_set_config+0x11c>)
    688a:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    688c:	4a04      	ldr	r2, [pc, #16]	; (68a0 <system_clock_source_xosc32k_set_config+0x118>)
    688e:	230c      	movs	r3, #12
    6890:	18fb      	adds	r3, r7, r3
    6892:	881b      	ldrh	r3, [r3, #0]
    6894:	8293      	strh	r3, [r2, #20]
}
    6896:	46c0      	nop			; (mov r8, r8)
    6898:	46bd      	mov	sp, r7
    689a:	b004      	add	sp, #16
    689c:	bd80      	pop	{r7, pc}
    689e:	46c0      	nop			; (mov r8, r8)
    68a0:	40000800 	.word	0x40000800
    68a4:	200000fc 	.word	0x200000fc

000068a8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    68a8:	b580      	push	{r7, lr}
    68aa:	b082      	sub	sp, #8
    68ac:	af00      	add	r7, sp, #0
    68ae:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    68b0:	687b      	ldr	r3, [r7, #4]
    68b2:	7a1b      	ldrb	r3, [r3, #8]
    68b4:	029b      	lsls	r3, r3, #10
    68b6:	041b      	lsls	r3, r3, #16
    68b8:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    68ba:	687b      	ldr	r3, [r7, #4]
    68bc:	895b      	ldrh	r3, [r3, #10]
    68be:	059b      	lsls	r3, r3, #22
    68c0:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    68c2:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    68c4:	4b2a      	ldr	r3, [pc, #168]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    68c6:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    68c8:	687b      	ldr	r3, [r7, #4]
    68ca:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    68cc:	687b      	ldr	r3, [r7, #4]
    68ce:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    68d0:	4313      	orrs	r3, r2
    68d2:	b2db      	uxtb	r3, r3
    68d4:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    68d6:	687b      	ldr	r3, [r7, #4]
    68d8:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    68da:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    68dc:	687a      	ldr	r2, [r7, #4]
    68de:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    68e0:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    68e2:	687b      	ldr	r3, [r7, #4]
    68e4:	785b      	ldrb	r3, [r3, #1]
    68e6:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    68e8:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    68ea:	4b21      	ldr	r3, [pc, #132]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    68ec:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    68ee:	687b      	ldr	r3, [r7, #4]
    68f0:	781b      	ldrb	r3, [r3, #0]
    68f2:	2b04      	cmp	r3, #4
    68f4:	d116      	bne.n	6924 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    68f6:	687b      	ldr	r3, [r7, #4]
    68f8:	7b1b      	ldrb	r3, [r3, #12]
    68fa:	069b      	lsls	r3, r3, #26
    68fc:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	89db      	ldrh	r3, [r3, #14]
    6902:	041b      	lsls	r3, r3, #16
    6904:	0019      	movs	r1, r3
    6906:	4b1b      	ldr	r3, [pc, #108]	; (6974 <system_clock_source_dfll_set_config+0xcc>)
    6908:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    690a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    690c:	687a      	ldr	r2, [r7, #4]
    690e:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6910:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    6912:	4b17      	ldr	r3, [pc, #92]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    6914:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    6916:	4b16      	ldr	r3, [pc, #88]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    6918:	681b      	ldr	r3, [r3, #0]
    691a:	687a      	ldr	r2, [r7, #4]
    691c:	7812      	ldrb	r2, [r2, #0]
    691e:	431a      	orrs	r2, r3
    6920:	4b13      	ldr	r3, [pc, #76]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    6922:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6924:	687b      	ldr	r3, [r7, #4]
    6926:	781b      	ldrb	r3, [r3, #0]
    6928:	2b20      	cmp	r3, #32
    692a:	d11c      	bne.n	6966 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    692c:	687b      	ldr	r3, [r7, #4]
    692e:	7b1b      	ldrb	r3, [r3, #12]
    6930:	069b      	lsls	r3, r3, #26
    6932:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6934:	687b      	ldr	r3, [r7, #4]
    6936:	89db      	ldrh	r3, [r3, #14]
    6938:	041b      	lsls	r3, r3, #16
    693a:	0019      	movs	r1, r3
    693c:	4b0d      	ldr	r3, [pc, #52]	; (6974 <system_clock_source_dfll_set_config+0xcc>)
    693e:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6940:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6942:	687a      	ldr	r2, [r7, #4]
    6944:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6946:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    6948:	4b09      	ldr	r3, [pc, #36]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    694a:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    694c:	4b08      	ldr	r3, [pc, #32]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    694e:	681b      	ldr	r3, [r3, #0]
    6950:	687a      	ldr	r2, [r7, #4]
    6952:	7812      	ldrb	r2, [r2, #0]
    6954:	2104      	movs	r1, #4
    6956:	430a      	orrs	r2, r1
    6958:	b2d2      	uxtb	r2, r2
    695a:	4313      	orrs	r3, r2
    695c:	2280      	movs	r2, #128	; 0x80
    695e:	00d2      	lsls	r2, r2, #3
    6960:	431a      	orrs	r2, r3
    6962:	4b03      	ldr	r3, [pc, #12]	; (6970 <system_clock_source_dfll_set_config+0xc8>)
    6964:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	46bd      	mov	sp, r7
    696a:	b002      	add	sp, #8
    696c:	bd80      	pop	{r7, pc}
    696e:	46c0      	nop			; (mov r8, r8)
    6970:	200000fc 	.word	0x200000fc
    6974:	03ff0000 	.word	0x03ff0000

00006978 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    6978:	b580      	push	{r7, lr}
    697a:	b082      	sub	sp, #8
    697c:	af00      	add	r7, sp, #0
    697e:	0002      	movs	r2, r0
    6980:	1dfb      	adds	r3, r7, #7
    6982:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6984:	1dfb      	adds	r3, r7, #7
    6986:	781b      	ldrb	r3, [r3, #0]
    6988:	2b08      	cmp	r3, #8
    698a:	d83b      	bhi.n	6a04 <system_clock_source_enable+0x8c>
    698c:	009a      	lsls	r2, r3, #2
    698e:	4b21      	ldr	r3, [pc, #132]	; (6a14 <system_clock_source_enable+0x9c>)
    6990:	18d3      	adds	r3, r2, r3
    6992:	681b      	ldr	r3, [r3, #0]
    6994:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    6996:	4b20      	ldr	r3, [pc, #128]	; (6a18 <system_clock_source_enable+0xa0>)
    6998:	4a1f      	ldr	r2, [pc, #124]	; (6a18 <system_clock_source_enable+0xa0>)
    699a:	6a12      	ldr	r2, [r2, #32]
    699c:	2102      	movs	r1, #2
    699e:	430a      	orrs	r2, r1
    69a0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    69a2:	2300      	movs	r3, #0
    69a4:	e031      	b.n	6a0a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    69a6:	4b1c      	ldr	r3, [pc, #112]	; (6a18 <system_clock_source_enable+0xa0>)
    69a8:	4a1b      	ldr	r2, [pc, #108]	; (6a18 <system_clock_source_enable+0xa0>)
    69aa:	6992      	ldr	r2, [r2, #24]
    69ac:	2102      	movs	r1, #2
    69ae:	430a      	orrs	r2, r1
    69b0:	619a      	str	r2, [r3, #24]
		break;
    69b2:	e029      	b.n	6a08 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    69b4:	4a18      	ldr	r2, [pc, #96]	; (6a18 <system_clock_source_enable+0xa0>)
    69b6:	4b18      	ldr	r3, [pc, #96]	; (6a18 <system_clock_source_enable+0xa0>)
    69b8:	8a1b      	ldrh	r3, [r3, #16]
    69ba:	b29b      	uxth	r3, r3
    69bc:	2102      	movs	r1, #2
    69be:	430b      	orrs	r3, r1
    69c0:	b29b      	uxth	r3, r3
    69c2:	8213      	strh	r3, [r2, #16]
		break;
    69c4:	e020      	b.n	6a08 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    69c6:	4a14      	ldr	r2, [pc, #80]	; (6a18 <system_clock_source_enable+0xa0>)
    69c8:	4b13      	ldr	r3, [pc, #76]	; (6a18 <system_clock_source_enable+0xa0>)
    69ca:	8a9b      	ldrh	r3, [r3, #20]
    69cc:	b29b      	uxth	r3, r3
    69ce:	2102      	movs	r1, #2
    69d0:	430b      	orrs	r3, r1
    69d2:	b29b      	uxth	r3, r3
    69d4:	8293      	strh	r3, [r2, #20]
		break;
    69d6:	e017      	b.n	6a08 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    69d8:	4b10      	ldr	r3, [pc, #64]	; (6a1c <system_clock_source_enable+0xa4>)
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	2202      	movs	r2, #2
    69de:	431a      	orrs	r2, r3
    69e0:	4b0e      	ldr	r3, [pc, #56]	; (6a1c <system_clock_source_enable+0xa4>)
    69e2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    69e4:	4b0e      	ldr	r3, [pc, #56]	; (6a20 <system_clock_source_enable+0xa8>)
    69e6:	4798      	blx	r3
		break;
    69e8:	e00e      	b.n	6a08 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    69ea:	4a0b      	ldr	r2, [pc, #44]	; (6a18 <system_clock_source_enable+0xa0>)
    69ec:	490a      	ldr	r1, [pc, #40]	; (6a18 <system_clock_source_enable+0xa0>)
    69ee:	2344      	movs	r3, #68	; 0x44
    69f0:	5ccb      	ldrb	r3, [r1, r3]
    69f2:	b2db      	uxtb	r3, r3
    69f4:	2102      	movs	r1, #2
    69f6:	430b      	orrs	r3, r1
    69f8:	b2d9      	uxtb	r1, r3
    69fa:	2344      	movs	r3, #68	; 0x44
    69fc:	54d1      	strb	r1, [r2, r3]
		break;
    69fe:	e003      	b.n	6a08 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6a00:	2300      	movs	r3, #0
    6a02:	e002      	b.n	6a0a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6a04:	2317      	movs	r3, #23
    6a06:	e000      	b.n	6a0a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6a08:	2300      	movs	r3, #0
}
    6a0a:	0018      	movs	r0, r3
    6a0c:	46bd      	mov	sp, r7
    6a0e:	b002      	add	sp, #8
    6a10:	bd80      	pop	{r7, pc}
    6a12:	46c0      	nop			; (mov r8, r8)
    6a14:	0000da68 	.word	0x0000da68
    6a18:	40000800 	.word	0x40000800
    6a1c:	200000fc 	.word	0x200000fc
    6a20:	00006611 	.word	0x00006611

00006a24 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6a24:	b580      	push	{r7, lr}
    6a26:	b084      	sub	sp, #16
    6a28:	af00      	add	r7, sp, #0
    6a2a:	0002      	movs	r2, r0
    6a2c:	1dfb      	adds	r3, r7, #7
    6a2e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6a30:	2300      	movs	r3, #0
    6a32:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6a34:	1dfb      	adds	r3, r7, #7
    6a36:	781b      	ldrb	r3, [r3, #0]
    6a38:	2b08      	cmp	r3, #8
    6a3a:	d821      	bhi.n	6a80 <system_clock_source_is_ready+0x5c>
    6a3c:	009a      	lsls	r2, r3, #2
    6a3e:	4b18      	ldr	r3, [pc, #96]	; (6aa0 <system_clock_source_is_ready+0x7c>)
    6a40:	18d3      	adds	r3, r2, r3
    6a42:	681b      	ldr	r3, [r3, #0]
    6a44:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    6a46:	2308      	movs	r3, #8
    6a48:	60fb      	str	r3, [r7, #12]
		break;
    6a4a:	e01b      	b.n	6a84 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    6a4c:	2304      	movs	r3, #4
    6a4e:	60fb      	str	r3, [r7, #12]
		break;
    6a50:	e018      	b.n	6a84 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    6a52:	2301      	movs	r3, #1
    6a54:	60fb      	str	r3, [r7, #12]
		break;
    6a56:	e015      	b.n	6a84 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    6a58:	2302      	movs	r3, #2
    6a5a:	60fb      	str	r3, [r7, #12]
		break;
    6a5c:	e012      	b.n	6a84 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    6a5e:	23d0      	movs	r3, #208	; 0xd0
    6a60:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    6a62:	e00f      	b.n	6a84 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    6a64:	4a0f      	ldr	r2, [pc, #60]	; (6aa4 <system_clock_source_is_ready+0x80>)
    6a66:	2350      	movs	r3, #80	; 0x50
    6a68:	5cd3      	ldrb	r3, [r2, r3]
    6a6a:	b2db      	uxtb	r3, r3
    6a6c:	001a      	movs	r2, r3
    6a6e:	2303      	movs	r3, #3
    6a70:	4013      	ands	r3, r2
    6a72:	3b03      	subs	r3, #3
    6a74:	425a      	negs	r2, r3
    6a76:	4153      	adcs	r3, r2
    6a78:	b2db      	uxtb	r3, r3
    6a7a:	e00c      	b.n	6a96 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    6a7c:	2301      	movs	r3, #1
    6a7e:	e00a      	b.n	6a96 <system_clock_source_is_ready+0x72>

	default:
		return false;
    6a80:	2300      	movs	r3, #0
    6a82:	e008      	b.n	6a96 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    6a84:	4b07      	ldr	r3, [pc, #28]	; (6aa4 <system_clock_source_is_ready+0x80>)
    6a86:	68db      	ldr	r3, [r3, #12]
    6a88:	68fa      	ldr	r2, [r7, #12]
    6a8a:	401a      	ands	r2, r3
    6a8c:	68fb      	ldr	r3, [r7, #12]
    6a8e:	1ad3      	subs	r3, r2, r3
    6a90:	425a      	negs	r2, r3
    6a92:	4153      	adcs	r3, r2
    6a94:	b2db      	uxtb	r3, r3
}
    6a96:	0018      	movs	r0, r3
    6a98:	46bd      	mov	sp, r7
    6a9a:	b004      	add	sp, #16
    6a9c:	bd80      	pop	{r7, pc}
    6a9e:	46c0      	nop			; (mov r8, r8)
    6aa0:	0000da8c 	.word	0x0000da8c
    6aa4:	40000800 	.word	0x40000800

00006aa8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	b082      	sub	sp, #8
    6aac:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6aae:	003b      	movs	r3, r7
    6ab0:	2202      	movs	r2, #2
    6ab2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6ab4:	2300      	movs	r3, #0
    6ab6:	607b      	str	r3, [r7, #4]
    6ab8:	e009      	b.n	6ace <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    6aba:	687b      	ldr	r3, [r7, #4]
    6abc:	b2db      	uxtb	r3, r3
    6abe:	003a      	movs	r2, r7
    6ac0:	0011      	movs	r1, r2
    6ac2:	0018      	movs	r0, r3
    6ac4:	4b05      	ldr	r3, [pc, #20]	; (6adc <_switch_peripheral_gclk+0x34>)
    6ac6:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	3301      	adds	r3, #1
    6acc:	607b      	str	r3, [r7, #4]
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	2b24      	cmp	r3, #36	; 0x24
    6ad2:	d9f2      	bls.n	6aba <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    6ad4:	46c0      	nop			; (mov r8, r8)
    6ad6:	46bd      	mov	sp, r7
    6ad8:	b002      	add	sp, #8
    6ada:	bd80      	pop	{r7, pc}
    6adc:	00007101 	.word	0x00007101

00006ae0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6ae0:	b580      	push	{r7, lr}
    6ae2:	b0aa      	sub	sp, #168	; 0xa8
    6ae4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6ae6:	4ba5      	ldr	r3, [pc, #660]	; (6d7c <system_clock_init+0x29c>)
    6ae8:	22c2      	movs	r2, #194	; 0xc2
    6aea:	00d2      	lsls	r2, r2, #3
    6aec:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6aee:	2002      	movs	r0, #2
    6af0:	4ba3      	ldr	r3, [pc, #652]	; (6d80 <system_clock_init+0x2a0>)
    6af2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6af4:	4ba3      	ldr	r3, [pc, #652]	; (6d84 <system_clock_init+0x2a4>)
    6af6:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6af8:	2394      	movs	r3, #148	; 0x94
    6afa:	18fb      	adds	r3, r7, r3
    6afc:	0018      	movs	r0, r3
    6afe:	4ba2      	ldr	r3, [pc, #648]	; (6d88 <system_clock_init+0x2a8>)
    6b00:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6b02:	2394      	movs	r3, #148	; 0x94
    6b04:	18fb      	adds	r3, r7, r3
    6b06:	2280      	movs	r2, #128	; 0x80
    6b08:	0212      	lsls	r2, r2, #8
    6b0a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6b0c:	2394      	movs	r3, #148	; 0x94
    6b0e:	18fb      	adds	r3, r7, r3
    6b10:	2200      	movs	r2, #0
    6b12:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6b14:	2394      	movs	r3, #148	; 0x94
    6b16:	18fb      	adds	r3, r7, r3
    6b18:	2203      	movs	r2, #3
    6b1a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6b1c:	2394      	movs	r3, #148	; 0x94
    6b1e:	18fb      	adds	r3, r7, r3
    6b20:	2200      	movs	r2, #0
    6b22:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6b24:	2394      	movs	r3, #148	; 0x94
    6b26:	18fb      	adds	r3, r7, r3
    6b28:	2200      	movs	r2, #0
    6b2a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6b2c:	2394      	movs	r3, #148	; 0x94
    6b2e:	18fb      	adds	r3, r7, r3
    6b30:	2201      	movs	r2, #1
    6b32:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6b34:	2394      	movs	r3, #148	; 0x94
    6b36:	18fb      	adds	r3, r7, r3
    6b38:	2200      	movs	r2, #0
    6b3a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6b3c:	2394      	movs	r3, #148	; 0x94
    6b3e:	18fb      	adds	r3, r7, r3
    6b40:	2200      	movs	r2, #0
    6b42:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6b44:	2394      	movs	r3, #148	; 0x94
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	0018      	movs	r0, r3
    6b4a:	4b90      	ldr	r3, [pc, #576]	; (6d8c <system_clock_init+0x2ac>)
    6b4c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6b4e:	2005      	movs	r0, #5
    6b50:	4b8f      	ldr	r3, [pc, #572]	; (6d90 <system_clock_init+0x2b0>)
    6b52:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6b54:	46c0      	nop			; (mov r8, r8)
    6b56:	2005      	movs	r0, #5
    6b58:	4b8e      	ldr	r3, [pc, #568]	; (6d94 <system_clock_init+0x2b4>)
    6b5a:	4798      	blx	r3
    6b5c:	0003      	movs	r3, r0
    6b5e:	001a      	movs	r2, r3
    6b60:	2301      	movs	r3, #1
    6b62:	4053      	eors	r3, r2
    6b64:	b2db      	uxtb	r3, r3
    6b66:	2b00      	cmp	r3, #0
    6b68:	d1f5      	bne.n	6b56 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    6b6a:	4a84      	ldr	r2, [pc, #528]	; (6d7c <system_clock_init+0x29c>)
    6b6c:	8a93      	ldrh	r3, [r2, #20]
    6b6e:	2180      	movs	r1, #128	; 0x80
    6b70:	430b      	orrs	r3, r1
    6b72:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6b74:	2380      	movs	r3, #128	; 0x80
    6b76:	18fb      	adds	r3, r7, r3
    6b78:	0018      	movs	r0, r3
    6b7a:	4b87      	ldr	r3, [pc, #540]	; (6d98 <system_clock_init+0x2b8>)
    6b7c:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6b7e:	2380      	movs	r3, #128	; 0x80
    6b80:	18fb      	adds	r3, r7, r3
    6b82:	2204      	movs	r2, #4
    6b84:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6b86:	2380      	movs	r3, #128	; 0x80
    6b88:	18fb      	adds	r3, r7, r3
    6b8a:	2200      	movs	r2, #0
    6b8c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6b8e:	4b83      	ldr	r3, [pc, #524]	; (6d9c <system_clock_init+0x2bc>)
    6b90:	681b      	ldr	r3, [r3, #0]
    6b92:	0e9b      	lsrs	r3, r3, #26
    6b94:	22a4      	movs	r2, #164	; 0xa4
    6b96:	18ba      	adds	r2, r7, r2
    6b98:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    6b9a:	23a4      	movs	r3, #164	; 0xa4
    6b9c:	18fb      	adds	r3, r7, r3
    6b9e:	681b      	ldr	r3, [r3, #0]
    6ba0:	2b3f      	cmp	r3, #63	; 0x3f
    6ba2:	d103      	bne.n	6bac <system_clock_init+0xcc>
		coarse = 0x1f;
    6ba4:	231f      	movs	r3, #31
    6ba6:	22a4      	movs	r2, #164	; 0xa4
    6ba8:	18ba      	adds	r2, r7, r2
    6baa:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    6bac:	23a4      	movs	r3, #164	; 0xa4
    6bae:	18fb      	adds	r3, r7, r3
    6bb0:	681b      	ldr	r3, [r3, #0]
    6bb2:	b2da      	uxtb	r2, r3
    6bb4:	2380      	movs	r3, #128	; 0x80
    6bb6:	18fb      	adds	r3, r7, r3
    6bb8:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6bba:	2380      	movs	r3, #128	; 0x80
    6bbc:	18fb      	adds	r3, r7, r3
    6bbe:	2200      	movs	r2, #0
    6bc0:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6bc2:	2380      	movs	r3, #128	; 0x80
    6bc4:	18fb      	adds	r3, r7, r3
    6bc6:	2200      	movs	r2, #0
    6bc8:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6bca:	2380      	movs	r3, #128	; 0x80
    6bcc:	18fb      	adds	r3, r7, r3
    6bce:	2200      	movs	r2, #0
    6bd0:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6bd2:	2380      	movs	r3, #128	; 0x80
    6bd4:	18fb      	adds	r3, r7, r3
    6bd6:	2200      	movs	r2, #0
    6bd8:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6bda:	2380      	movs	r3, #128	; 0x80
    6bdc:	18fb      	adds	r3, r7, r3
    6bde:	4a70      	ldr	r2, [pc, #448]	; (6da0 <system_clock_init+0x2c0>)
    6be0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6be2:	2380      	movs	r3, #128	; 0x80
    6be4:	18fb      	adds	r3, r7, r3
    6be6:	2207      	movs	r2, #7
    6be8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6bea:	2380      	movs	r3, #128	; 0x80
    6bec:	18fb      	adds	r3, r7, r3
    6bee:	223f      	movs	r2, #63	; 0x3f
    6bf0:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6bf2:	2380      	movs	r3, #128	; 0x80
    6bf4:	18fb      	adds	r3, r7, r3
    6bf6:	0018      	movs	r0, r3
    6bf8:	4b6a      	ldr	r3, [pc, #424]	; (6da4 <system_clock_init+0x2c4>)
    6bfa:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6bfc:	237c      	movs	r3, #124	; 0x7c
    6bfe:	18fb      	adds	r3, r7, r3
    6c00:	0018      	movs	r0, r3
    6c02:	4b69      	ldr	r3, [pc, #420]	; (6da8 <system_clock_init+0x2c8>)
    6c04:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6c06:	237c      	movs	r3, #124	; 0x7c
    6c08:	18fb      	adds	r3, r7, r3
    6c0a:	2200      	movs	r2, #0
    6c0c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    6c0e:	237c      	movs	r3, #124	; 0x7c
    6c10:	18fb      	adds	r3, r7, r3
    6c12:	2201      	movs	r2, #1
    6c14:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6c16:	237c      	movs	r3, #124	; 0x7c
    6c18:	18fb      	adds	r3, r7, r3
    6c1a:	2200      	movs	r2, #0
    6c1c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    6c1e:	237c      	movs	r3, #124	; 0x7c
    6c20:	18fb      	adds	r3, r7, r3
    6c22:	0018      	movs	r0, r3
    6c24:	4b61      	ldr	r3, [pc, #388]	; (6dac <system_clock_init+0x2cc>)
    6c26:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6c28:	2006      	movs	r0, #6
    6c2a:	4b59      	ldr	r3, [pc, #356]	; (6d90 <system_clock_init+0x2b0>)
    6c2c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6c2e:	4b60      	ldr	r3, [pc, #384]	; (6db0 <system_clock_init+0x2d0>)
    6c30:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6c32:	2364      	movs	r3, #100	; 0x64
    6c34:	18fb      	adds	r3, r7, r3
    6c36:	0018      	movs	r0, r3
    6c38:	4b5e      	ldr	r3, [pc, #376]	; (6db4 <system_clock_init+0x2d4>)
    6c3a:	4798      	blx	r3
    6c3c:	2364      	movs	r3, #100	; 0x64
    6c3e:	18fb      	adds	r3, r7, r3
    6c40:	2205      	movs	r2, #5
    6c42:	701a      	strb	r2, [r3, #0]
    6c44:	2364      	movs	r3, #100	; 0x64
    6c46:	18fb      	adds	r3, r7, r3
    6c48:	2201      	movs	r2, #1
    6c4a:	605a      	str	r2, [r3, #4]
    6c4c:	2364      	movs	r3, #100	; 0x64
    6c4e:	18fb      	adds	r3, r7, r3
    6c50:	2200      	movs	r2, #0
    6c52:	721a      	strb	r2, [r3, #8]
    6c54:	2364      	movs	r3, #100	; 0x64
    6c56:	18fb      	adds	r3, r7, r3
    6c58:	2200      	movs	r2, #0
    6c5a:	725a      	strb	r2, [r3, #9]
    6c5c:	2364      	movs	r3, #100	; 0x64
    6c5e:	18fb      	adds	r3, r7, r3
    6c60:	0019      	movs	r1, r3
    6c62:	2001      	movs	r0, #1
    6c64:	4b54      	ldr	r3, [pc, #336]	; (6db8 <system_clock_init+0x2d8>)
    6c66:	4798      	blx	r3
    6c68:	2001      	movs	r0, #1
    6c6a:	4b54      	ldr	r3, [pc, #336]	; (6dbc <system_clock_init+0x2dc>)
    6c6c:	4798      	blx	r3
    6c6e:	2340      	movs	r3, #64	; 0x40
    6c70:	18fb      	adds	r3, r7, r3
    6c72:	0018      	movs	r0, r3
    6c74:	4b4f      	ldr	r3, [pc, #316]	; (6db4 <system_clock_init+0x2d4>)
    6c76:	4798      	blx	r3
    6c78:	2340      	movs	r3, #64	; 0x40
    6c7a:	18fb      	adds	r3, r7, r3
    6c7c:	2206      	movs	r2, #6
    6c7e:	701a      	strb	r2, [r3, #0]
    6c80:	2340      	movs	r3, #64	; 0x40
    6c82:	18fb      	adds	r3, r7, r3
    6c84:	2202      	movs	r2, #2
    6c86:	605a      	str	r2, [r3, #4]
    6c88:	2340      	movs	r3, #64	; 0x40
    6c8a:	18fb      	adds	r3, r7, r3
    6c8c:	2200      	movs	r2, #0
    6c8e:	721a      	strb	r2, [r3, #8]
    6c90:	2340      	movs	r3, #64	; 0x40
    6c92:	18fb      	adds	r3, r7, r3
    6c94:	2201      	movs	r2, #1
    6c96:	725a      	strb	r2, [r3, #9]
    6c98:	2340      	movs	r3, #64	; 0x40
    6c9a:	18fb      	adds	r3, r7, r3
    6c9c:	0019      	movs	r1, r3
    6c9e:	2004      	movs	r0, #4
    6ca0:	4b45      	ldr	r3, [pc, #276]	; (6db8 <system_clock_init+0x2d8>)
    6ca2:	4798      	blx	r3
    6ca4:	2004      	movs	r0, #4
    6ca6:	4b45      	ldr	r3, [pc, #276]	; (6dbc <system_clock_init+0x2dc>)
    6ca8:	4798      	blx	r3
    6caa:	2334      	movs	r3, #52	; 0x34
    6cac:	18fb      	adds	r3, r7, r3
    6cae:	0018      	movs	r0, r3
    6cb0:	4b40      	ldr	r3, [pc, #256]	; (6db4 <system_clock_init+0x2d4>)
    6cb2:	4798      	blx	r3
    6cb4:	2334      	movs	r3, #52	; 0x34
    6cb6:	18fb      	adds	r3, r7, r3
    6cb8:	2206      	movs	r2, #6
    6cba:	701a      	strb	r2, [r3, #0]
    6cbc:	2334      	movs	r3, #52	; 0x34
    6cbe:	18fb      	adds	r3, r7, r3
    6cc0:	2210      	movs	r2, #16
    6cc2:	605a      	str	r2, [r3, #4]
    6cc4:	2334      	movs	r3, #52	; 0x34
    6cc6:	18fb      	adds	r3, r7, r3
    6cc8:	2200      	movs	r2, #0
    6cca:	721a      	strb	r2, [r3, #8]
    6ccc:	2334      	movs	r3, #52	; 0x34
    6cce:	18fb      	adds	r3, r7, r3
    6cd0:	2201      	movs	r2, #1
    6cd2:	725a      	strb	r2, [r3, #9]
    6cd4:	2334      	movs	r3, #52	; 0x34
    6cd6:	18fb      	adds	r3, r7, r3
    6cd8:	0019      	movs	r1, r3
    6cda:	2005      	movs	r0, #5
    6cdc:	4b36      	ldr	r3, [pc, #216]	; (6db8 <system_clock_init+0x2d8>)
    6cde:	4798      	blx	r3
    6ce0:	2005      	movs	r0, #5
    6ce2:	4b36      	ldr	r3, [pc, #216]	; (6dbc <system_clock_init+0x2dc>)
    6ce4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6ce6:	230c      	movs	r3, #12
    6ce8:	18fb      	adds	r3, r7, r3
    6cea:	0018      	movs	r0, r3
    6cec:	4b34      	ldr	r3, [pc, #208]	; (6dc0 <system_clock_init+0x2e0>)
    6cee:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6cf0:	230c      	movs	r3, #12
    6cf2:	18fb      	adds	r3, r7, r3
    6cf4:	2201      	movs	r2, #1
    6cf6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6cf8:	230c      	movs	r3, #12
    6cfa:	18fb      	adds	r3, r7, r3
    6cfc:	0019      	movs	r1, r3
    6cfe:	2000      	movs	r0, #0
    6d00:	4b30      	ldr	r3, [pc, #192]	; (6dc4 <system_clock_init+0x2e4>)
    6d02:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6d04:	2000      	movs	r0, #0
    6d06:	4b30      	ldr	r3, [pc, #192]	; (6dc8 <system_clock_init+0x2e8>)
    6d08:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6d0a:	2007      	movs	r0, #7
    6d0c:	4b20      	ldr	r3, [pc, #128]	; (6d90 <system_clock_init+0x2b0>)
    6d0e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6d10:	46c0      	nop			; (mov r8, r8)
    6d12:	2007      	movs	r0, #7
    6d14:	4b1f      	ldr	r3, [pc, #124]	; (6d94 <system_clock_init+0x2b4>)
    6d16:	4798      	blx	r3
    6d18:	0003      	movs	r3, r0
    6d1a:	001a      	movs	r2, r3
    6d1c:	2301      	movs	r3, #1
    6d1e:	4053      	eors	r3, r2
    6d20:	b2db      	uxtb	r3, r3
    6d22:	2b00      	cmp	r3, #0
    6d24:	d1f5      	bne.n	6d12 <system_clock_init+0x232>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6d26:	2000      	movs	r0, #0
    6d28:	4b28      	ldr	r3, [pc, #160]	; (6dcc <system_clock_init+0x2ec>)
    6d2a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6d2c:	2100      	movs	r1, #0
    6d2e:	2000      	movs	r0, #0
    6d30:	4b27      	ldr	r3, [pc, #156]	; (6dd0 <system_clock_init+0x2f0>)
    6d32:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6d34:	2100      	movs	r1, #0
    6d36:	2001      	movs	r0, #1
    6d38:	4b25      	ldr	r3, [pc, #148]	; (6dd0 <system_clock_init+0x2f0>)
    6d3a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6d3c:	2100      	movs	r1, #0
    6d3e:	2002      	movs	r0, #2
    6d40:	4b23      	ldr	r3, [pc, #140]	; (6dd0 <system_clock_init+0x2f0>)
    6d42:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6d44:	003b      	movs	r3, r7
    6d46:	0018      	movs	r0, r3
    6d48:	4b1a      	ldr	r3, [pc, #104]	; (6db4 <system_clock_init+0x2d4>)
    6d4a:	4798      	blx	r3
    6d4c:	003b      	movs	r3, r7
    6d4e:	2207      	movs	r2, #7
    6d50:	701a      	strb	r2, [r3, #0]
    6d52:	003b      	movs	r3, r7
    6d54:	2201      	movs	r2, #1
    6d56:	605a      	str	r2, [r3, #4]
    6d58:	003b      	movs	r3, r7
    6d5a:	2200      	movs	r2, #0
    6d5c:	721a      	strb	r2, [r3, #8]
    6d5e:	003b      	movs	r3, r7
    6d60:	2200      	movs	r2, #0
    6d62:	725a      	strb	r2, [r3, #9]
    6d64:	003b      	movs	r3, r7
    6d66:	0019      	movs	r1, r3
    6d68:	2000      	movs	r0, #0
    6d6a:	4b13      	ldr	r3, [pc, #76]	; (6db8 <system_clock_init+0x2d8>)
    6d6c:	4798      	blx	r3
    6d6e:	2000      	movs	r0, #0
    6d70:	4b12      	ldr	r3, [pc, #72]	; (6dbc <system_clock_init+0x2dc>)
    6d72:	4798      	blx	r3
#endif
}
    6d74:	46c0      	nop			; (mov r8, r8)
    6d76:	46bd      	mov	sp, r7
    6d78:	b02a      	add	sp, #168	; 0xa8
    6d7a:	bd80      	pop	{r7, pc}
    6d7c:	40000800 	.word	0x40000800
    6d80:	000065c1 	.word	0x000065c1
    6d84:	00006aa9 	.word	0x00006aa9
    6d88:	0000648d 	.word	0x0000648d
    6d8c:	00006789 	.word	0x00006789
    6d90:	00006979 	.word	0x00006979
    6d94:	00006a25 	.word	0x00006a25
    6d98:	000064f9 	.word	0x000064f9
    6d9c:	00806024 	.word	0x00806024
    6da0:	000005b9 	.word	0x000005b9
    6da4:	000068a9 	.word	0x000068a9
    6da8:	000064d5 	.word	0x000064d5
    6dac:	00006711 	.word	0x00006711
    6db0:	00006e79 	.word	0x00006e79
    6db4:	00006445 	.word	0x00006445
    6db8:	00006ea9 	.word	0x00006ea9
    6dbc:	00006fcd 	.word	0x00006fcd
    6dc0:	00006475 	.word	0x00006475
    6dc4:	00007101 	.word	0x00007101
    6dc8:	00007145 	.word	0x00007145
    6dcc:	0000654d 	.word	0x0000654d
    6dd0:	0000656d 	.word	0x0000656d

00006dd4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6dd4:	b580      	push	{r7, lr}
    6dd6:	b082      	sub	sp, #8
    6dd8:	af00      	add	r7, sp, #0
    6dda:	0002      	movs	r2, r0
    6ddc:	6039      	str	r1, [r7, #0]
    6dde:	1dfb      	adds	r3, r7, #7
    6de0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6de2:	1dfb      	adds	r3, r7, #7
    6de4:	781b      	ldrb	r3, [r3, #0]
    6de6:	2b01      	cmp	r3, #1
    6de8:	d00a      	beq.n	6e00 <system_apb_clock_set_mask+0x2c>
    6dea:	2b02      	cmp	r3, #2
    6dec:	d00f      	beq.n	6e0e <system_apb_clock_set_mask+0x3a>
    6dee:	2b00      	cmp	r3, #0
    6df0:	d114      	bne.n	6e1c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6df2:	4b0e      	ldr	r3, [pc, #56]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6df4:	4a0d      	ldr	r2, [pc, #52]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6df6:	6991      	ldr	r1, [r2, #24]
    6df8:	683a      	ldr	r2, [r7, #0]
    6dfa:	430a      	orrs	r2, r1
    6dfc:	619a      	str	r2, [r3, #24]
			break;
    6dfe:	e00f      	b.n	6e20 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6e00:	4b0a      	ldr	r3, [pc, #40]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6e02:	4a0a      	ldr	r2, [pc, #40]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6e04:	69d1      	ldr	r1, [r2, #28]
    6e06:	683a      	ldr	r2, [r7, #0]
    6e08:	430a      	orrs	r2, r1
    6e0a:	61da      	str	r2, [r3, #28]
			break;
    6e0c:	e008      	b.n	6e20 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6e0e:	4b07      	ldr	r3, [pc, #28]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6e10:	4a06      	ldr	r2, [pc, #24]	; (6e2c <system_apb_clock_set_mask+0x58>)
    6e12:	6a11      	ldr	r1, [r2, #32]
    6e14:	683a      	ldr	r2, [r7, #0]
    6e16:	430a      	orrs	r2, r1
    6e18:	621a      	str	r2, [r3, #32]
			break;
    6e1a:	e001      	b.n	6e20 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6e1c:	2317      	movs	r3, #23
    6e1e:	e000      	b.n	6e22 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6e20:	2300      	movs	r3, #0
}
    6e22:	0018      	movs	r0, r3
    6e24:	46bd      	mov	sp, r7
    6e26:	b002      	add	sp, #8
    6e28:	bd80      	pop	{r7, pc}
    6e2a:	46c0      	nop			; (mov r8, r8)
    6e2c:	40000400 	.word	0x40000400

00006e30 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6e30:	b580      	push	{r7, lr}
    6e32:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6e34:	4b02      	ldr	r3, [pc, #8]	; (6e40 <system_interrupt_enter_critical_section+0x10>)
    6e36:	4798      	blx	r3
}
    6e38:	46c0      	nop			; (mov r8, r8)
    6e3a:	46bd      	mov	sp, r7
    6e3c:	bd80      	pop	{r7, pc}
    6e3e:	46c0      	nop			; (mov r8, r8)
    6e40:	00003ba5 	.word	0x00003ba5

00006e44 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6e48:	4b02      	ldr	r3, [pc, #8]	; (6e54 <system_interrupt_leave_critical_section+0x10>)
    6e4a:	4798      	blx	r3
}
    6e4c:	46c0      	nop			; (mov r8, r8)
    6e4e:	46bd      	mov	sp, r7
    6e50:	bd80      	pop	{r7, pc}
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	00003bf9 	.word	0x00003bf9

00006e58 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6e58:	b580      	push	{r7, lr}
    6e5a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6e5c:	4b05      	ldr	r3, [pc, #20]	; (6e74 <system_gclk_is_syncing+0x1c>)
    6e5e:	785b      	ldrb	r3, [r3, #1]
    6e60:	b2db      	uxtb	r3, r3
    6e62:	b25b      	sxtb	r3, r3
    6e64:	2b00      	cmp	r3, #0
    6e66:	da01      	bge.n	6e6c <system_gclk_is_syncing+0x14>
		return true;
    6e68:	2301      	movs	r3, #1
    6e6a:	e000      	b.n	6e6e <system_gclk_is_syncing+0x16>
	}

	return false;
    6e6c:	2300      	movs	r3, #0
}
    6e6e:	0018      	movs	r0, r3
    6e70:	46bd      	mov	sp, r7
    6e72:	bd80      	pop	{r7, pc}
    6e74:	40000c00 	.word	0x40000c00

00006e78 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    6e7c:	2108      	movs	r1, #8
    6e7e:	2000      	movs	r0, #0
    6e80:	4b07      	ldr	r3, [pc, #28]	; (6ea0 <system_gclk_init+0x28>)
    6e82:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6e84:	4b07      	ldr	r3, [pc, #28]	; (6ea4 <system_gclk_init+0x2c>)
    6e86:	2201      	movs	r2, #1
    6e88:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    6e8a:	46c0      	nop			; (mov r8, r8)
    6e8c:	4b05      	ldr	r3, [pc, #20]	; (6ea4 <system_gclk_init+0x2c>)
    6e8e:	781b      	ldrb	r3, [r3, #0]
    6e90:	b2db      	uxtb	r3, r3
    6e92:	001a      	movs	r2, r3
    6e94:	2301      	movs	r3, #1
    6e96:	4013      	ands	r3, r2
    6e98:	d1f8      	bne.n	6e8c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    6e9a:	46c0      	nop			; (mov r8, r8)
    6e9c:	46bd      	mov	sp, r7
    6e9e:	bd80      	pop	{r7, pc}
    6ea0:	00006dd5 	.word	0x00006dd5
    6ea4:	40000c00 	.word	0x40000c00

00006ea8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6ea8:	b580      	push	{r7, lr}
    6eaa:	b086      	sub	sp, #24
    6eac:	af00      	add	r7, sp, #0
    6eae:	0002      	movs	r2, r0
    6eb0:	6039      	str	r1, [r7, #0]
    6eb2:	1dfb      	adds	r3, r7, #7
    6eb4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6eb6:	1dfb      	adds	r3, r7, #7
    6eb8:	781b      	ldrb	r3, [r3, #0]
    6eba:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6ebc:	1dfb      	adds	r3, r7, #7
    6ebe:	781b      	ldrb	r3, [r3, #0]
    6ec0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6ec2:	683b      	ldr	r3, [r7, #0]
    6ec4:	781b      	ldrb	r3, [r3, #0]
    6ec6:	021b      	lsls	r3, r3, #8
    6ec8:	001a      	movs	r2, r3
    6eca:	697b      	ldr	r3, [r7, #20]
    6ecc:	4313      	orrs	r3, r2
    6ece:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6ed0:	683b      	ldr	r3, [r7, #0]
    6ed2:	785b      	ldrb	r3, [r3, #1]
    6ed4:	2b00      	cmp	r3, #0
    6ed6:	d004      	beq.n	6ee2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6ed8:	697b      	ldr	r3, [r7, #20]
    6eda:	2280      	movs	r2, #128	; 0x80
    6edc:	02d2      	lsls	r2, r2, #11
    6ede:	4313      	orrs	r3, r2
    6ee0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6ee2:	683b      	ldr	r3, [r7, #0]
    6ee4:	7a5b      	ldrb	r3, [r3, #9]
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d004      	beq.n	6ef4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6eea:	697b      	ldr	r3, [r7, #20]
    6eec:	2280      	movs	r2, #128	; 0x80
    6eee:	0312      	lsls	r2, r2, #12
    6ef0:	4313      	orrs	r3, r2
    6ef2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6ef4:	683b      	ldr	r3, [r7, #0]
    6ef6:	685b      	ldr	r3, [r3, #4]
    6ef8:	2b01      	cmp	r3, #1
    6efa:	d92c      	bls.n	6f56 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6efc:	683b      	ldr	r3, [r7, #0]
    6efe:	685a      	ldr	r2, [r3, #4]
    6f00:	683b      	ldr	r3, [r7, #0]
    6f02:	685b      	ldr	r3, [r3, #4]
    6f04:	3b01      	subs	r3, #1
    6f06:	4013      	ands	r3, r2
    6f08:	d11a      	bne.n	6f40 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6f0a:	2300      	movs	r3, #0
    6f0c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6f0e:	2302      	movs	r3, #2
    6f10:	60bb      	str	r3, [r7, #8]
    6f12:	e005      	b.n	6f20 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6f14:	68fb      	ldr	r3, [r7, #12]
    6f16:	3301      	adds	r3, #1
    6f18:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    6f1a:	68bb      	ldr	r3, [r7, #8]
    6f1c:	005b      	lsls	r3, r3, #1
    6f1e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6f20:	683b      	ldr	r3, [r7, #0]
    6f22:	685a      	ldr	r2, [r3, #4]
    6f24:	68bb      	ldr	r3, [r7, #8]
    6f26:	429a      	cmp	r2, r3
    6f28:	d8f4      	bhi.n	6f14 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6f2a:	68fb      	ldr	r3, [r7, #12]
    6f2c:	021b      	lsls	r3, r3, #8
    6f2e:	693a      	ldr	r2, [r7, #16]
    6f30:	4313      	orrs	r3, r2
    6f32:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6f34:	697b      	ldr	r3, [r7, #20]
    6f36:	2280      	movs	r2, #128	; 0x80
    6f38:	0352      	lsls	r2, r2, #13
    6f3a:	4313      	orrs	r3, r2
    6f3c:	617b      	str	r3, [r7, #20]
    6f3e:	e00a      	b.n	6f56 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6f40:	683b      	ldr	r3, [r7, #0]
    6f42:	685b      	ldr	r3, [r3, #4]
    6f44:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6f46:	693a      	ldr	r2, [r7, #16]
    6f48:	4313      	orrs	r3, r2
    6f4a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6f4c:	697b      	ldr	r3, [r7, #20]
    6f4e:	2280      	movs	r2, #128	; 0x80
    6f50:	0292      	lsls	r2, r2, #10
    6f52:	4313      	orrs	r3, r2
    6f54:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6f56:	683b      	ldr	r3, [r7, #0]
    6f58:	7a1b      	ldrb	r3, [r3, #8]
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d004      	beq.n	6f68 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6f5e:	697b      	ldr	r3, [r7, #20]
    6f60:	2280      	movs	r2, #128	; 0x80
    6f62:	0392      	lsls	r2, r2, #14
    6f64:	4313      	orrs	r3, r2
    6f66:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6f68:	46c0      	nop			; (mov r8, r8)
    6f6a:	4b13      	ldr	r3, [pc, #76]	; (6fb8 <system_gclk_gen_set_config+0x110>)
    6f6c:	4798      	blx	r3
    6f6e:	1e03      	subs	r3, r0, #0
    6f70:	d1fb      	bne.n	6f6a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6f72:	4b12      	ldr	r3, [pc, #72]	; (6fbc <system_gclk_gen_set_config+0x114>)
    6f74:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6f76:	4a12      	ldr	r2, [pc, #72]	; (6fc0 <system_gclk_gen_set_config+0x118>)
    6f78:	1dfb      	adds	r3, r7, #7
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    6f7e:	46c0      	nop			; (mov r8, r8)
    6f80:	4b0d      	ldr	r3, [pc, #52]	; (6fb8 <system_gclk_gen_set_config+0x110>)
    6f82:	4798      	blx	r3
    6f84:	1e03      	subs	r3, r0, #0
    6f86:	d1fb      	bne.n	6f80 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6f88:	4b0e      	ldr	r3, [pc, #56]	; (6fc4 <system_gclk_gen_set_config+0x11c>)
    6f8a:	693a      	ldr	r2, [r7, #16]
    6f8c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	4b09      	ldr	r3, [pc, #36]	; (6fb8 <system_gclk_gen_set_config+0x110>)
    6f92:	4798      	blx	r3
    6f94:	1e03      	subs	r3, r0, #0
    6f96:	d1fb      	bne.n	6f90 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6f98:	4b0a      	ldr	r3, [pc, #40]	; (6fc4 <system_gclk_gen_set_config+0x11c>)
    6f9a:	4a0a      	ldr	r2, [pc, #40]	; (6fc4 <system_gclk_gen_set_config+0x11c>)
    6f9c:	6851      	ldr	r1, [r2, #4]
    6f9e:	2280      	movs	r2, #128	; 0x80
    6fa0:	0252      	lsls	r2, r2, #9
    6fa2:	4011      	ands	r1, r2
    6fa4:	697a      	ldr	r2, [r7, #20]
    6fa6:	430a      	orrs	r2, r1
    6fa8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    6faa:	4b07      	ldr	r3, [pc, #28]	; (6fc8 <system_gclk_gen_set_config+0x120>)
    6fac:	4798      	blx	r3
}
    6fae:	46c0      	nop			; (mov r8, r8)
    6fb0:	46bd      	mov	sp, r7
    6fb2:	b006      	add	sp, #24
    6fb4:	bd80      	pop	{r7, pc}
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	00006e59 	.word	0x00006e59
    6fbc:	00006e31 	.word	0x00006e31
    6fc0:	40000c08 	.word	0x40000c08
    6fc4:	40000c00 	.word	0x40000c00
    6fc8:	00006e45 	.word	0x00006e45

00006fcc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6fcc:	b580      	push	{r7, lr}
    6fce:	b082      	sub	sp, #8
    6fd0:	af00      	add	r7, sp, #0
    6fd2:	0002      	movs	r2, r0
    6fd4:	1dfb      	adds	r3, r7, #7
    6fd6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6fd8:	46c0      	nop			; (mov r8, r8)
    6fda:	4b0e      	ldr	r3, [pc, #56]	; (7014 <system_gclk_gen_enable+0x48>)
    6fdc:	4798      	blx	r3
    6fde:	1e03      	subs	r3, r0, #0
    6fe0:	d1fb      	bne.n	6fda <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6fe2:	4b0d      	ldr	r3, [pc, #52]	; (7018 <system_gclk_gen_enable+0x4c>)
    6fe4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6fe6:	4a0d      	ldr	r2, [pc, #52]	; (701c <system_gclk_gen_enable+0x50>)
    6fe8:	1dfb      	adds	r3, r7, #7
    6fea:	781b      	ldrb	r3, [r3, #0]
    6fec:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6fee:	46c0      	nop			; (mov r8, r8)
    6ff0:	4b08      	ldr	r3, [pc, #32]	; (7014 <system_gclk_gen_enable+0x48>)
    6ff2:	4798      	blx	r3
    6ff4:	1e03      	subs	r3, r0, #0
    6ff6:	d1fb      	bne.n	6ff0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6ff8:	4b09      	ldr	r3, [pc, #36]	; (7020 <system_gclk_gen_enable+0x54>)
    6ffa:	4a09      	ldr	r2, [pc, #36]	; (7020 <system_gclk_gen_enable+0x54>)
    6ffc:	6852      	ldr	r2, [r2, #4]
    6ffe:	2180      	movs	r1, #128	; 0x80
    7000:	0249      	lsls	r1, r1, #9
    7002:	430a      	orrs	r2, r1
    7004:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7006:	4b07      	ldr	r3, [pc, #28]	; (7024 <system_gclk_gen_enable+0x58>)
    7008:	4798      	blx	r3
}
    700a:	46c0      	nop			; (mov r8, r8)
    700c:	46bd      	mov	sp, r7
    700e:	b002      	add	sp, #8
    7010:	bd80      	pop	{r7, pc}
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	00006e59 	.word	0x00006e59
    7018:	00006e31 	.word	0x00006e31
    701c:	40000c04 	.word	0x40000c04
    7020:	40000c00 	.word	0x40000c00
    7024:	00006e45 	.word	0x00006e45

00007028 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7028:	b580      	push	{r7, lr}
    702a:	b086      	sub	sp, #24
    702c:	af00      	add	r7, sp, #0
    702e:	0002      	movs	r2, r0
    7030:	1dfb      	adds	r3, r7, #7
    7032:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7034:	46c0      	nop			; (mov r8, r8)
    7036:	4b2a      	ldr	r3, [pc, #168]	; (70e0 <system_gclk_gen_get_hz+0xb8>)
    7038:	4798      	blx	r3
    703a:	1e03      	subs	r3, r0, #0
    703c:	d1fb      	bne.n	7036 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    703e:	4b29      	ldr	r3, [pc, #164]	; (70e4 <system_gclk_gen_get_hz+0xbc>)
    7040:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7042:	4a29      	ldr	r2, [pc, #164]	; (70e8 <system_gclk_gen_get_hz+0xc0>)
    7044:	1dfb      	adds	r3, r7, #7
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	4b24      	ldr	r3, [pc, #144]	; (70e0 <system_gclk_gen_get_hz+0xb8>)
    704e:	4798      	blx	r3
    7050:	1e03      	subs	r3, r0, #0
    7052:	d1fb      	bne.n	704c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7054:	4b25      	ldr	r3, [pc, #148]	; (70ec <system_gclk_gen_get_hz+0xc4>)
    7056:	685b      	ldr	r3, [r3, #4]
    7058:	04db      	lsls	r3, r3, #19
    705a:	0edb      	lsrs	r3, r3, #27
    705c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    705e:	0018      	movs	r0, r3
    7060:	4b23      	ldr	r3, [pc, #140]	; (70f0 <system_gclk_gen_get_hz+0xc8>)
    7062:	4798      	blx	r3
    7064:	0003      	movs	r3, r0
    7066:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7068:	4a1f      	ldr	r2, [pc, #124]	; (70e8 <system_gclk_gen_get_hz+0xc0>)
    706a:	1dfb      	adds	r3, r7, #7
    706c:	781b      	ldrb	r3, [r3, #0]
    706e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    7070:	4b1e      	ldr	r3, [pc, #120]	; (70ec <system_gclk_gen_get_hz+0xc4>)
    7072:	685b      	ldr	r3, [r3, #4]
    7074:	02db      	lsls	r3, r3, #11
    7076:	0fdb      	lsrs	r3, r3, #31
    7078:	b2da      	uxtb	r2, r3
    707a:	2313      	movs	r3, #19
    707c:	18fb      	adds	r3, r7, r3
    707e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7080:	4a1c      	ldr	r2, [pc, #112]	; (70f4 <system_gclk_gen_get_hz+0xcc>)
    7082:	1dfb      	adds	r3, r7, #7
    7084:	781b      	ldrb	r3, [r3, #0]
    7086:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7088:	46c0      	nop			; (mov r8, r8)
    708a:	4b15      	ldr	r3, [pc, #84]	; (70e0 <system_gclk_gen_get_hz+0xb8>)
    708c:	4798      	blx	r3
    708e:	1e03      	subs	r3, r0, #0
    7090:	d1fb      	bne.n	708a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    7092:	4b16      	ldr	r3, [pc, #88]	; (70ec <system_gclk_gen_get_hz+0xc4>)
    7094:	689b      	ldr	r3, [r3, #8]
    7096:	021b      	lsls	r3, r3, #8
    7098:	0c1b      	lsrs	r3, r3, #16
    709a:	b29b      	uxth	r3, r3
    709c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    709e:	4b16      	ldr	r3, [pc, #88]	; (70f8 <system_gclk_gen_get_hz+0xd0>)
    70a0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    70a2:	2313      	movs	r3, #19
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	2b00      	cmp	r3, #0
    70aa:	d109      	bne.n	70c0 <system_gclk_gen_get_hz+0x98>
    70ac:	68fb      	ldr	r3, [r7, #12]
    70ae:	2b01      	cmp	r3, #1
    70b0:	d906      	bls.n	70c0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    70b2:	4b12      	ldr	r3, [pc, #72]	; (70fc <system_gclk_gen_get_hz+0xd4>)
    70b4:	68f9      	ldr	r1, [r7, #12]
    70b6:	6978      	ldr	r0, [r7, #20]
    70b8:	4798      	blx	r3
    70ba:	0003      	movs	r3, r0
    70bc:	617b      	str	r3, [r7, #20]
    70be:	e00a      	b.n	70d6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    70c0:	2313      	movs	r3, #19
    70c2:	18fb      	adds	r3, r7, r3
    70c4:	781b      	ldrb	r3, [r3, #0]
    70c6:	2b00      	cmp	r3, #0
    70c8:	d005      	beq.n	70d6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    70ca:	68fb      	ldr	r3, [r7, #12]
    70cc:	3301      	adds	r3, #1
    70ce:	697a      	ldr	r2, [r7, #20]
    70d0:	40da      	lsrs	r2, r3
    70d2:	0013      	movs	r3, r2
    70d4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    70d6:	697b      	ldr	r3, [r7, #20]
}
    70d8:	0018      	movs	r0, r3
    70da:	46bd      	mov	sp, r7
    70dc:	b006      	add	sp, #24
    70de:	bd80      	pop	{r7, pc}
    70e0:	00006e59 	.word	0x00006e59
    70e4:	00006e31 	.word	0x00006e31
    70e8:	40000c04 	.word	0x40000c04
    70ec:	40000c00 	.word	0x40000c00
    70f0:	00006655 	.word	0x00006655
    70f4:	40000c08 	.word	0x40000c08
    70f8:	00006e45 	.word	0x00006e45
    70fc:	0000ac5d 	.word	0x0000ac5d

00007100 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    7100:	b580      	push	{r7, lr}
    7102:	b084      	sub	sp, #16
    7104:	af00      	add	r7, sp, #0
    7106:	0002      	movs	r2, r0
    7108:	6039      	str	r1, [r7, #0]
    710a:	1dfb      	adds	r3, r7, #7
    710c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    710e:	1dfb      	adds	r3, r7, #7
    7110:	781b      	ldrb	r3, [r3, #0]
    7112:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    7114:	683b      	ldr	r3, [r7, #0]
    7116:	781b      	ldrb	r3, [r3, #0]
    7118:	021b      	lsls	r3, r3, #8
    711a:	001a      	movs	r2, r3
    711c:	68fb      	ldr	r3, [r7, #12]
    711e:	4313      	orrs	r3, r2
    7120:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    7122:	1dfb      	adds	r3, r7, #7
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	0018      	movs	r0, r3
    7128:	4b04      	ldr	r3, [pc, #16]	; (713c <system_gclk_chan_set_config+0x3c>)
    712a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    712c:	4b04      	ldr	r3, [pc, #16]	; (7140 <system_gclk_chan_set_config+0x40>)
    712e:	68fa      	ldr	r2, [r7, #12]
    7130:	b292      	uxth	r2, r2
    7132:	805a      	strh	r2, [r3, #2]
}
    7134:	46c0      	nop			; (mov r8, r8)
    7136:	46bd      	mov	sp, r7
    7138:	b004      	add	sp, #16
    713a:	bd80      	pop	{r7, pc}
    713c:	0000718d 	.word	0x0000718d
    7140:	40000c00 	.word	0x40000c00

00007144 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7144:	b580      	push	{r7, lr}
    7146:	b082      	sub	sp, #8
    7148:	af00      	add	r7, sp, #0
    714a:	0002      	movs	r2, r0
    714c:	1dfb      	adds	r3, r7, #7
    714e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7150:	4b0a      	ldr	r3, [pc, #40]	; (717c <system_gclk_chan_enable+0x38>)
    7152:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7154:	4a0a      	ldr	r2, [pc, #40]	; (7180 <system_gclk_chan_enable+0x3c>)
    7156:	1dfb      	adds	r3, r7, #7
    7158:	781b      	ldrb	r3, [r3, #0]
    715a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    715c:	4909      	ldr	r1, [pc, #36]	; (7184 <system_gclk_chan_enable+0x40>)
    715e:	4b09      	ldr	r3, [pc, #36]	; (7184 <system_gclk_chan_enable+0x40>)
    7160:	885b      	ldrh	r3, [r3, #2]
    7162:	b29b      	uxth	r3, r3
    7164:	2280      	movs	r2, #128	; 0x80
    7166:	01d2      	lsls	r2, r2, #7
    7168:	4313      	orrs	r3, r2
    716a:	b29b      	uxth	r3, r3
    716c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    716e:	4b06      	ldr	r3, [pc, #24]	; (7188 <system_gclk_chan_enable+0x44>)
    7170:	4798      	blx	r3
}
    7172:	46c0      	nop			; (mov r8, r8)
    7174:	46bd      	mov	sp, r7
    7176:	b002      	add	sp, #8
    7178:	bd80      	pop	{r7, pc}
    717a:	46c0      	nop			; (mov r8, r8)
    717c:	00006e31 	.word	0x00006e31
    7180:	40000c02 	.word	0x40000c02
    7184:	40000c00 	.word	0x40000c00
    7188:	00006e45 	.word	0x00006e45

0000718c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    718c:	b580      	push	{r7, lr}
    718e:	b084      	sub	sp, #16
    7190:	af00      	add	r7, sp, #0
    7192:	0002      	movs	r2, r0
    7194:	1dfb      	adds	r3, r7, #7
    7196:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7198:	4b1c      	ldr	r3, [pc, #112]	; (720c <system_gclk_chan_disable+0x80>)
    719a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    719c:	4a1c      	ldr	r2, [pc, #112]	; (7210 <system_gclk_chan_disable+0x84>)
    719e:	1dfb      	adds	r3, r7, #7
    71a0:	781b      	ldrb	r3, [r3, #0]
    71a2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    71a4:	4b1b      	ldr	r3, [pc, #108]	; (7214 <system_gclk_chan_disable+0x88>)
    71a6:	885b      	ldrh	r3, [r3, #2]
    71a8:	051b      	lsls	r3, r3, #20
    71aa:	0f1b      	lsrs	r3, r3, #28
    71ac:	b2db      	uxtb	r3, r3
    71ae:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    71b0:	4a18      	ldr	r2, [pc, #96]	; (7214 <system_gclk_chan_disable+0x88>)
    71b2:	8853      	ldrh	r3, [r2, #2]
    71b4:	4918      	ldr	r1, [pc, #96]	; (7218 <system_gclk_chan_disable+0x8c>)
    71b6:	400b      	ands	r3, r1
    71b8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    71ba:	4a16      	ldr	r2, [pc, #88]	; (7214 <system_gclk_chan_disable+0x88>)
    71bc:	4b15      	ldr	r3, [pc, #84]	; (7214 <system_gclk_chan_disable+0x88>)
    71be:	885b      	ldrh	r3, [r3, #2]
    71c0:	b29b      	uxth	r3, r3
    71c2:	4916      	ldr	r1, [pc, #88]	; (721c <system_gclk_chan_disable+0x90>)
    71c4:	400b      	ands	r3, r1
    71c6:	b29b      	uxth	r3, r3
    71c8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    71ca:	46c0      	nop			; (mov r8, r8)
    71cc:	4b11      	ldr	r3, [pc, #68]	; (7214 <system_gclk_chan_disable+0x88>)
    71ce:	885b      	ldrh	r3, [r3, #2]
    71d0:	b29b      	uxth	r3, r3
    71d2:	001a      	movs	r2, r3
    71d4:	2380      	movs	r3, #128	; 0x80
    71d6:	01db      	lsls	r3, r3, #7
    71d8:	4013      	ands	r3, r2
    71da:	d1f7      	bne.n	71cc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    71dc:	4a0d      	ldr	r2, [pc, #52]	; (7214 <system_gclk_chan_disable+0x88>)
    71de:	68fb      	ldr	r3, [r7, #12]
    71e0:	b2db      	uxtb	r3, r3
    71e2:	1c19      	adds	r1, r3, #0
    71e4:	230f      	movs	r3, #15
    71e6:	400b      	ands	r3, r1
    71e8:	b2d9      	uxtb	r1, r3
    71ea:	8853      	ldrh	r3, [r2, #2]
    71ec:	1c08      	adds	r0, r1, #0
    71ee:	210f      	movs	r1, #15
    71f0:	4001      	ands	r1, r0
    71f2:	0208      	lsls	r0, r1, #8
    71f4:	4908      	ldr	r1, [pc, #32]	; (7218 <system_gclk_chan_disable+0x8c>)
    71f6:	400b      	ands	r3, r1
    71f8:	1c19      	adds	r1, r3, #0
    71fa:	1c03      	adds	r3, r0, #0
    71fc:	430b      	orrs	r3, r1
    71fe:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    7200:	4b07      	ldr	r3, [pc, #28]	; (7220 <system_gclk_chan_disable+0x94>)
    7202:	4798      	blx	r3
}
    7204:	46c0      	nop			; (mov r8, r8)
    7206:	46bd      	mov	sp, r7
    7208:	b004      	add	sp, #16
    720a:	bd80      	pop	{r7, pc}
    720c:	00006e31 	.word	0x00006e31
    7210:	40000c02 	.word	0x40000c02
    7214:	40000c00 	.word	0x40000c00
    7218:	fffff0ff 	.word	0xfffff0ff
    721c:	ffffbfff 	.word	0xffffbfff
    7220:	00006e45 	.word	0x00006e45

00007224 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7224:	b580      	push	{r7, lr}
    7226:	b084      	sub	sp, #16
    7228:	af00      	add	r7, sp, #0
    722a:	0002      	movs	r2, r0
    722c:	1dfb      	adds	r3, r7, #7
    722e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    7230:	4b0d      	ldr	r3, [pc, #52]	; (7268 <system_gclk_chan_get_hz+0x44>)
    7232:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7234:	4a0d      	ldr	r2, [pc, #52]	; (726c <system_gclk_chan_get_hz+0x48>)
    7236:	1dfb      	adds	r3, r7, #7
    7238:	781b      	ldrb	r3, [r3, #0]
    723a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    723c:	4b0c      	ldr	r3, [pc, #48]	; (7270 <system_gclk_chan_get_hz+0x4c>)
    723e:	885b      	ldrh	r3, [r3, #2]
    7240:	051b      	lsls	r3, r3, #20
    7242:	0f1b      	lsrs	r3, r3, #28
    7244:	b2da      	uxtb	r2, r3
    7246:	230f      	movs	r3, #15
    7248:	18fb      	adds	r3, r7, r3
    724a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    724c:	4b09      	ldr	r3, [pc, #36]	; (7274 <system_gclk_chan_get_hz+0x50>)
    724e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7250:	230f      	movs	r3, #15
    7252:	18fb      	adds	r3, r7, r3
    7254:	781b      	ldrb	r3, [r3, #0]
    7256:	0018      	movs	r0, r3
    7258:	4b07      	ldr	r3, [pc, #28]	; (7278 <system_gclk_chan_get_hz+0x54>)
    725a:	4798      	blx	r3
    725c:	0003      	movs	r3, r0
}
    725e:	0018      	movs	r0, r3
    7260:	46bd      	mov	sp, r7
    7262:	b004      	add	sp, #16
    7264:	bd80      	pop	{r7, pc}
    7266:	46c0      	nop			; (mov r8, r8)
    7268:	00006e31 	.word	0x00006e31
    726c:	40000c02 	.word	0x40000c02
    7270:	40000c00 	.word	0x40000c00
    7274:	00006e45 	.word	0x00006e45
    7278:	00007029 	.word	0x00007029

0000727c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    727c:	b580      	push	{r7, lr}
    727e:	b084      	sub	sp, #16
    7280:	af00      	add	r7, sp, #0
    7282:	0002      	movs	r2, r0
    7284:	1dfb      	adds	r3, r7, #7
    7286:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7288:	230f      	movs	r3, #15
    728a:	18fb      	adds	r3, r7, r3
    728c:	1dfa      	adds	r2, r7, #7
    728e:	7812      	ldrb	r2, [r2, #0]
    7290:	09d2      	lsrs	r2, r2, #7
    7292:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7294:	230e      	movs	r3, #14
    7296:	18fb      	adds	r3, r7, r3
    7298:	1dfa      	adds	r2, r7, #7
    729a:	7812      	ldrb	r2, [r2, #0]
    729c:	0952      	lsrs	r2, r2, #5
    729e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    72a0:	4b0d      	ldr	r3, [pc, #52]	; (72d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    72a2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    72a4:	230f      	movs	r3, #15
    72a6:	18fb      	adds	r3, r7, r3
    72a8:	781b      	ldrb	r3, [r3, #0]
    72aa:	2b00      	cmp	r3, #0
    72ac:	d10f      	bne.n	72ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    72ae:	230f      	movs	r3, #15
    72b0:	18fb      	adds	r3, r7, r3
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	009b      	lsls	r3, r3, #2
    72b6:	2210      	movs	r2, #16
    72b8:	4694      	mov	ip, r2
    72ba:	44bc      	add	ip, r7
    72bc:	4463      	add	r3, ip
    72be:	3b08      	subs	r3, #8
    72c0:	681a      	ldr	r2, [r3, #0]
    72c2:	230e      	movs	r3, #14
    72c4:	18fb      	adds	r3, r7, r3
    72c6:	781b      	ldrb	r3, [r3, #0]
    72c8:	01db      	lsls	r3, r3, #7
    72ca:	18d3      	adds	r3, r2, r3
    72cc:	e000      	b.n	72d0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    72ce:	2300      	movs	r3, #0
	}
}
    72d0:	0018      	movs	r0, r3
    72d2:	46bd      	mov	sp, r7
    72d4:	b004      	add	sp, #16
    72d6:	bd80      	pop	{r7, pc}
    72d8:	41004400 	.word	0x41004400

000072dc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    72dc:	b580      	push	{r7, lr}
    72de:	b088      	sub	sp, #32
    72e0:	af00      	add	r7, sp, #0
    72e2:	60f8      	str	r0, [r7, #12]
    72e4:	60b9      	str	r1, [r7, #8]
    72e6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    72e8:	2300      	movs	r3, #0
    72ea:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    72ec:	687b      	ldr	r3, [r7, #4]
    72ee:	78db      	ldrb	r3, [r3, #3]
    72f0:	2201      	movs	r2, #1
    72f2:	4053      	eors	r3, r2
    72f4:	b2db      	uxtb	r3, r3
    72f6:	2b00      	cmp	r3, #0
    72f8:	d035      	beq.n	7366 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	781b      	ldrb	r3, [r3, #0]
    72fe:	2b80      	cmp	r3, #128	; 0x80
    7300:	d00b      	beq.n	731a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7302:	69fb      	ldr	r3, [r7, #28]
    7304:	2280      	movs	r2, #128	; 0x80
    7306:	0252      	lsls	r2, r2, #9
    7308:	4313      	orrs	r3, r2
    730a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    730c:	687b      	ldr	r3, [r7, #4]
    730e:	781b      	ldrb	r3, [r3, #0]
    7310:	061b      	lsls	r3, r3, #24
    7312:	001a      	movs	r2, r3
    7314:	69fb      	ldr	r3, [r7, #28]
    7316:	4313      	orrs	r3, r2
    7318:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    731a:	687b      	ldr	r3, [r7, #4]
    731c:	785b      	ldrb	r3, [r3, #1]
    731e:	2b00      	cmp	r3, #0
    7320:	d003      	beq.n	732a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7322:	687b      	ldr	r3, [r7, #4]
    7324:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7326:	2b02      	cmp	r3, #2
    7328:	d110      	bne.n	734c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    732a:	69fb      	ldr	r3, [r7, #28]
    732c:	2280      	movs	r2, #128	; 0x80
    732e:	0292      	lsls	r2, r2, #10
    7330:	4313      	orrs	r3, r2
    7332:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7334:	687b      	ldr	r3, [r7, #4]
    7336:	789b      	ldrb	r3, [r3, #2]
    7338:	2b00      	cmp	r3, #0
    733a:	d004      	beq.n	7346 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    733c:	69fb      	ldr	r3, [r7, #28]
    733e:	2280      	movs	r2, #128	; 0x80
    7340:	02d2      	lsls	r2, r2, #11
    7342:	4313      	orrs	r3, r2
    7344:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7346:	68fb      	ldr	r3, [r7, #12]
    7348:	68ba      	ldr	r2, [r7, #8]
    734a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    734c:	687b      	ldr	r3, [r7, #4]
    734e:	785b      	ldrb	r3, [r3, #1]
    7350:	2b01      	cmp	r3, #1
    7352:	d003      	beq.n	735c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7354:	687b      	ldr	r3, [r7, #4]
    7356:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7358:	2b02      	cmp	r3, #2
    735a:	d107      	bne.n	736c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    735c:	69fb      	ldr	r3, [r7, #28]
    735e:	4a22      	ldr	r2, [pc, #136]	; (73e8 <_system_pinmux_config+0x10c>)
    7360:	4013      	ands	r3, r2
    7362:	61fb      	str	r3, [r7, #28]
    7364:	e002      	b.n	736c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7366:	68fb      	ldr	r3, [r7, #12]
    7368:	68ba      	ldr	r2, [r7, #8]
    736a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    736c:	68bb      	ldr	r3, [r7, #8]
    736e:	041b      	lsls	r3, r3, #16
    7370:	0c1b      	lsrs	r3, r3, #16
    7372:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7374:	68bb      	ldr	r3, [r7, #8]
    7376:	0c1b      	lsrs	r3, r3, #16
    7378:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    737a:	69ba      	ldr	r2, [r7, #24]
    737c:	69fb      	ldr	r3, [r7, #28]
    737e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7380:	22a0      	movs	r2, #160	; 0xa0
    7382:	05d2      	lsls	r2, r2, #23
    7384:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7386:	68fb      	ldr	r3, [r7, #12]
    7388:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    738a:	697a      	ldr	r2, [r7, #20]
    738c:	69fb      	ldr	r3, [r7, #28]
    738e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7390:	22d0      	movs	r2, #208	; 0xd0
    7392:	0612      	lsls	r2, r2, #24
    7394:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7396:	68fb      	ldr	r3, [r7, #12]
    7398:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    739a:	687b      	ldr	r3, [r7, #4]
    739c:	78db      	ldrb	r3, [r3, #3]
    739e:	2201      	movs	r2, #1
    73a0:	4053      	eors	r3, r2
    73a2:	b2db      	uxtb	r3, r3
    73a4:	2b00      	cmp	r3, #0
    73a6:	d01a      	beq.n	73de <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    73a8:	69fa      	ldr	r2, [r7, #28]
    73aa:	2380      	movs	r3, #128	; 0x80
    73ac:	02db      	lsls	r3, r3, #11
    73ae:	4013      	ands	r3, r2
    73b0:	d00a      	beq.n	73c8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	789b      	ldrb	r3, [r3, #2]
    73b6:	2b01      	cmp	r3, #1
    73b8:	d103      	bne.n	73c2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    73ba:	68fb      	ldr	r3, [r7, #12]
    73bc:	68ba      	ldr	r2, [r7, #8]
    73be:	619a      	str	r2, [r3, #24]
    73c0:	e002      	b.n	73c8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    73c2:	68fb      	ldr	r3, [r7, #12]
    73c4:	68ba      	ldr	r2, [r7, #8]
    73c6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73c8:	687b      	ldr	r3, [r7, #4]
    73ca:	785b      	ldrb	r3, [r3, #1]
    73cc:	2b01      	cmp	r3, #1
    73ce:	d003      	beq.n	73d8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    73d0:	687b      	ldr	r3, [r7, #4]
    73d2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    73d4:	2b02      	cmp	r3, #2
    73d6:	d102      	bne.n	73de <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    73d8:	68fb      	ldr	r3, [r7, #12]
    73da:	68ba      	ldr	r2, [r7, #8]
    73dc:	609a      	str	r2, [r3, #8]
		}
	}
}
    73de:	46c0      	nop			; (mov r8, r8)
    73e0:	46bd      	mov	sp, r7
    73e2:	b008      	add	sp, #32
    73e4:	bd80      	pop	{r7, pc}
    73e6:	46c0      	nop			; (mov r8, r8)
    73e8:	fffbffff 	.word	0xfffbffff

000073ec <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    73ec:	b580      	push	{r7, lr}
    73ee:	b084      	sub	sp, #16
    73f0:	af00      	add	r7, sp, #0
    73f2:	0002      	movs	r2, r0
    73f4:	6039      	str	r1, [r7, #0]
    73f6:	1dfb      	adds	r3, r7, #7
    73f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    73fa:	1dfb      	adds	r3, r7, #7
    73fc:	781b      	ldrb	r3, [r3, #0]
    73fe:	0018      	movs	r0, r3
    7400:	4b0a      	ldr	r3, [pc, #40]	; (742c <system_pinmux_pin_set_config+0x40>)
    7402:	4798      	blx	r3
    7404:	0003      	movs	r3, r0
    7406:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7408:	1dfb      	adds	r3, r7, #7
    740a:	781b      	ldrb	r3, [r3, #0]
    740c:	221f      	movs	r2, #31
    740e:	4013      	ands	r3, r2
    7410:	2201      	movs	r2, #1
    7412:	409a      	lsls	r2, r3
    7414:	0013      	movs	r3, r2
    7416:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7418:	683a      	ldr	r2, [r7, #0]
    741a:	68b9      	ldr	r1, [r7, #8]
    741c:	68fb      	ldr	r3, [r7, #12]
    741e:	0018      	movs	r0, r3
    7420:	4b03      	ldr	r3, [pc, #12]	; (7430 <system_pinmux_pin_set_config+0x44>)
    7422:	4798      	blx	r3
}
    7424:	46c0      	nop			; (mov r8, r8)
    7426:	46bd      	mov	sp, r7
    7428:	b004      	add	sp, #16
    742a:	bd80      	pop	{r7, pc}
    742c:	0000727d 	.word	0x0000727d
    7430:	000072dd 	.word	0x000072dd

00007434 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7434:	b580      	push	{r7, lr}
    7436:	af00      	add	r7, sp, #0
	return;
    7438:	46c0      	nop			; (mov r8, r8)
}
    743a:	46bd      	mov	sp, r7
    743c:	bd80      	pop	{r7, pc}
    743e:	46c0      	nop			; (mov r8, r8)

00007440 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7440:	b580      	push	{r7, lr}
    7442:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7444:	4b06      	ldr	r3, [pc, #24]	; (7460 <system_init+0x20>)
    7446:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7448:	4b06      	ldr	r3, [pc, #24]	; (7464 <system_init+0x24>)
    744a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    744c:	4b06      	ldr	r3, [pc, #24]	; (7468 <system_init+0x28>)
    744e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7450:	4b06      	ldr	r3, [pc, #24]	; (746c <system_init+0x2c>)
    7452:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7454:	4b06      	ldr	r3, [pc, #24]	; (7470 <system_init+0x30>)
    7456:	4798      	blx	r3
}
    7458:	46c0      	nop			; (mov r8, r8)
    745a:	46bd      	mov	sp, r7
    745c:	bd80      	pop	{r7, pc}
    745e:	46c0      	nop			; (mov r8, r8)
    7460:	00006ae1 	.word	0x00006ae1
    7464:	00003d35 	.word	0x00003d35
    7468:	00007435 	.word	0x00007435
    746c:	00004211 	.word	0x00004211
    7470:	00007435 	.word	0x00007435

00007474 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    7474:	b580      	push	{r7, lr}
    7476:	af00      	add	r7, sp, #0
    7478:	2000      	movs	r0, #0
    747a:	4b02      	ldr	r3, [pc, #8]	; (7484 <TCC0_Handler+0x10>)
    747c:	4798      	blx	r3
    747e:	46c0      	nop			; (mov r8, r8)
    7480:	46bd      	mov	sp, r7
    7482:	bd80      	pop	{r7, pc}
    7484:	000074b1 	.word	0x000074b1

00007488 <TCC1_Handler>:
    7488:	b580      	push	{r7, lr}
    748a:	af00      	add	r7, sp, #0
    748c:	2001      	movs	r0, #1
    748e:	4b02      	ldr	r3, [pc, #8]	; (7498 <TCC1_Handler+0x10>)
    7490:	4798      	blx	r3
    7492:	46c0      	nop			; (mov r8, r8)
    7494:	46bd      	mov	sp, r7
    7496:	bd80      	pop	{r7, pc}
    7498:	000074b1 	.word	0x000074b1

0000749c <TCC2_Handler>:
    749c:	b580      	push	{r7, lr}
    749e:	af00      	add	r7, sp, #0
    74a0:	2002      	movs	r0, #2
    74a2:	4b02      	ldr	r3, [pc, #8]	; (74ac <TCC2_Handler+0x10>)
    74a4:	4798      	blx	r3
    74a6:	46c0      	nop			; (mov r8, r8)
    74a8:	46bd      	mov	sp, r7
    74aa:	bd80      	pop	{r7, pc}
    74ac:	000074b1 	.word	0x000074b1

000074b0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    74b0:	b580      	push	{r7, lr}
    74b2:	b086      	sub	sp, #24
    74b4:	af00      	add	r7, sp, #0
    74b6:	0002      	movs	r2, r0
    74b8:	1dfb      	adds	r3, r7, #7
    74ba:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    74bc:	1dfb      	adds	r3, r7, #7
    74be:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    74c0:	4b18      	ldr	r3, [pc, #96]	; (7524 <_tcc_interrupt_handler+0x74>)
    74c2:	0092      	lsls	r2, r2, #2
    74c4:	58d3      	ldr	r3, [r2, r3]
    74c6:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    74c8:	693b      	ldr	r3, [r7, #16]
    74ca:	681b      	ldr	r3, [r3, #0]
    74cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    74ce:	693b      	ldr	r3, [r7, #16]
    74d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    74d2:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    74d4:	693b      	ldr	r3, [r7, #16]
    74d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    74d8:	4013      	ands	r3, r2
    74da:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    74dc:	2300      	movs	r3, #0
    74de:	617b      	str	r3, [r7, #20]
    74e0:	e019      	b.n	7516 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    74e2:	4b11      	ldr	r3, [pc, #68]	; (7528 <_tcc_interrupt_handler+0x78>)
    74e4:	697a      	ldr	r2, [r7, #20]
    74e6:	0092      	lsls	r2, r2, #2
    74e8:	58d3      	ldr	r3, [r2, r3]
    74ea:	68fa      	ldr	r2, [r7, #12]
    74ec:	4013      	ands	r3, r2
    74ee:	d00f      	beq.n	7510 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    74f0:	693a      	ldr	r2, [r7, #16]
    74f2:	697b      	ldr	r3, [r7, #20]
    74f4:	009b      	lsls	r3, r3, #2
    74f6:	18d3      	adds	r3, r2, r3
    74f8:	3304      	adds	r3, #4
    74fa:	681b      	ldr	r3, [r3, #0]
    74fc:	693a      	ldr	r2, [r7, #16]
    74fe:	0010      	movs	r0, r2
    7500:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    7502:	693b      	ldr	r3, [r7, #16]
    7504:	681b      	ldr	r3, [r3, #0]
    7506:	4a08      	ldr	r2, [pc, #32]	; (7528 <_tcc_interrupt_handler+0x78>)
    7508:	6979      	ldr	r1, [r7, #20]
    750a:	0089      	lsls	r1, r1, #2
    750c:	588a      	ldr	r2, [r1, r2]
    750e:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7510:	697b      	ldr	r3, [r7, #20]
    7512:	3301      	adds	r3, #1
    7514:	617b      	str	r3, [r7, #20]
    7516:	697b      	ldr	r3, [r7, #20]
    7518:	2b0b      	cmp	r3, #11
    751a:	dde2      	ble.n	74e2 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    751c:	46c0      	nop			; (mov r8, r8)
    751e:	46bd      	mov	sp, r7
    7520:	b006      	add	sp, #24
    7522:	bd80      	pop	{r7, pc}
    7524:	2000462c 	.word	0x2000462c
    7528:	0000dab0 	.word	0x0000dab0

0000752c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    752c:	b580      	push	{r7, lr}
    752e:	b082      	sub	sp, #8
    7530:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    7532:	4b2f      	ldr	r3, [pc, #188]	; (75f0 <Reset_Handler+0xc4>)
    7534:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    7536:	4b2f      	ldr	r3, [pc, #188]	; (75f4 <Reset_Handler+0xc8>)
    7538:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    753a:	687a      	ldr	r2, [r7, #4]
    753c:	683b      	ldr	r3, [r7, #0]
    753e:	429a      	cmp	r2, r3
    7540:	d00c      	beq.n	755c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    7542:	e007      	b.n	7554 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    7544:	683b      	ldr	r3, [r7, #0]
    7546:	1d1a      	adds	r2, r3, #4
    7548:	603a      	str	r2, [r7, #0]
    754a:	687a      	ldr	r2, [r7, #4]
    754c:	1d11      	adds	r1, r2, #4
    754e:	6079      	str	r1, [r7, #4]
    7550:	6812      	ldr	r2, [r2, #0]
    7552:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    7554:	683a      	ldr	r2, [r7, #0]
    7556:	4b28      	ldr	r3, [pc, #160]	; (75f8 <Reset_Handler+0xcc>)
    7558:	429a      	cmp	r2, r3
    755a:	d3f3      	bcc.n	7544 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    755c:	4b27      	ldr	r3, [pc, #156]	; (75fc <Reset_Handler+0xd0>)
    755e:	603b      	str	r3, [r7, #0]
    7560:	e004      	b.n	756c <Reset_Handler+0x40>
                *pDest++ = 0;
    7562:	683b      	ldr	r3, [r7, #0]
    7564:	1d1a      	adds	r2, r3, #4
    7566:	603a      	str	r2, [r7, #0]
    7568:	2200      	movs	r2, #0
    756a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    756c:	683a      	ldr	r2, [r7, #0]
    756e:	4b24      	ldr	r3, [pc, #144]	; (7600 <Reset_Handler+0xd4>)
    7570:	429a      	cmp	r2, r3
    7572:	d3f6      	bcc.n	7562 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    7574:	4b23      	ldr	r3, [pc, #140]	; (7604 <Reset_Handler+0xd8>)
    7576:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7578:	4b23      	ldr	r3, [pc, #140]	; (7608 <Reset_Handler+0xdc>)
    757a:	687a      	ldr	r2, [r7, #4]
    757c:	21ff      	movs	r1, #255	; 0xff
    757e:	438a      	bics	r2, r1
    7580:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7582:	4a22      	ldr	r2, [pc, #136]	; (760c <Reset_Handler+0xe0>)
    7584:	2390      	movs	r3, #144	; 0x90
    7586:	005b      	lsls	r3, r3, #1
    7588:	2102      	movs	r1, #2
    758a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    758c:	4a20      	ldr	r2, [pc, #128]	; (7610 <Reset_Handler+0xe4>)
    758e:	78d3      	ldrb	r3, [r2, #3]
    7590:	2103      	movs	r1, #3
    7592:	438b      	bics	r3, r1
    7594:	1c19      	adds	r1, r3, #0
    7596:	2302      	movs	r3, #2
    7598:	430b      	orrs	r3, r1
    759a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    759c:	4a1c      	ldr	r2, [pc, #112]	; (7610 <Reset_Handler+0xe4>)
    759e:	78d3      	ldrb	r3, [r2, #3]
    75a0:	210c      	movs	r1, #12
    75a2:	438b      	bics	r3, r1
    75a4:	1c19      	adds	r1, r3, #0
    75a6:	2308      	movs	r3, #8
    75a8:	430b      	orrs	r3, r1
    75aa:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    75ac:	4a19      	ldr	r2, [pc, #100]	; (7614 <Reset_Handler+0xe8>)
    75ae:	7b93      	ldrb	r3, [r2, #14]
    75b0:	2130      	movs	r1, #48	; 0x30
    75b2:	438b      	bics	r3, r1
    75b4:	1c19      	adds	r1, r3, #0
    75b6:	2320      	movs	r3, #32
    75b8:	430b      	orrs	r3, r1
    75ba:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    75bc:	4a15      	ldr	r2, [pc, #84]	; (7614 <Reset_Handler+0xe8>)
    75be:	7b93      	ldrb	r3, [r2, #14]
    75c0:	210c      	movs	r1, #12
    75c2:	438b      	bics	r3, r1
    75c4:	1c19      	adds	r1, r3, #0
    75c6:	2308      	movs	r3, #8
    75c8:	430b      	orrs	r3, r1
    75ca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    75cc:	4a11      	ldr	r2, [pc, #68]	; (7614 <Reset_Handler+0xe8>)
    75ce:	7b93      	ldrb	r3, [r2, #14]
    75d0:	2103      	movs	r1, #3
    75d2:	438b      	bics	r3, r1
    75d4:	1c19      	adds	r1, r3, #0
    75d6:	2302      	movs	r3, #2
    75d8:	430b      	orrs	r3, r1
    75da:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    75dc:	4a0e      	ldr	r2, [pc, #56]	; (7618 <Reset_Handler+0xec>)
    75de:	6853      	ldr	r3, [r2, #4]
    75e0:	2180      	movs	r1, #128	; 0x80
    75e2:	430b      	orrs	r3, r1
    75e4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    75e6:	4b0d      	ldr	r3, [pc, #52]	; (761c <Reset_Handler+0xf0>)
    75e8:	4798      	blx	r3

        /* Branch to main function */
        main();
    75ea:	4b0d      	ldr	r3, [pc, #52]	; (7620 <Reset_Handler+0xf4>)
    75ec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    75ee:	e7fe      	b.n	75ee <Reset_Handler+0xc2>
    75f0:	0000e0f4 	.word	0x0000e0f4
    75f4:	20000000 	.word	0x20000000
    75f8:	20000094 	.word	0x20000094
    75fc:	20000094 	.word	0x20000094
    7600:	20004678 	.word	0x20004678
    7604:	00000000 	.word	0x00000000
    7608:	e000ed00 	.word	0xe000ed00
    760c:	41007000 	.word	0x41007000
    7610:	41005000 	.word	0x41005000
    7614:	41004800 	.word	0x41004800
    7618:	41004000 	.word	0x41004000
    761c:	0000b59d 	.word	0x0000b59d
    7620:	0000a58d 	.word	0x0000a58d

00007624 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    7624:	b580      	push	{r7, lr}
    7626:	b082      	sub	sp, #8
    7628:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    762a:	f3ef 8305 	mrs	r3, IPSR
    762e:	607b      	str	r3, [r7, #4]
  return(result);
    7630:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    7632:	4b01      	ldr	r3, [pc, #4]	; (7638 <Dummy_Handler+0x14>)
    7634:	601a      	str	r2, [r3, #0]
        }
    7636:	e7f8      	b.n	762a <Dummy_Handler+0x6>
    7638:	20000018 	.word	0x20000018

0000763c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    763c:	b580      	push	{r7, lr}
    763e:	b086      	sub	sp, #24
    7640:	af00      	add	r7, sp, #0
    7642:	60f8      	str	r0, [r7, #12]
    7644:	60b9      	str	r1, [r7, #8]
    7646:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7648:	2300      	movs	r3, #0
    764a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    764c:	68fb      	ldr	r3, [r7, #12]
    764e:	2b00      	cmp	r3, #0
    7650:	d012      	beq.n	7678 <_read+0x3c>
		return -1;
    7652:	2301      	movs	r3, #1
    7654:	425b      	negs	r3, r3
    7656:	e013      	b.n	7680 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    7658:	4b0b      	ldr	r3, [pc, #44]	; (7688 <_read+0x4c>)
    765a:	681a      	ldr	r2, [r3, #0]
    765c:	4b0b      	ldr	r3, [pc, #44]	; (768c <_read+0x50>)
    765e:	681b      	ldr	r3, [r3, #0]
    7660:	68b9      	ldr	r1, [r7, #8]
    7662:	0018      	movs	r0, r3
    7664:	4790      	blx	r2
		ptr++;
    7666:	68bb      	ldr	r3, [r7, #8]
    7668:	3301      	adds	r3, #1
    766a:	60bb      	str	r3, [r7, #8]
		nChars++;
    766c:	697b      	ldr	r3, [r7, #20]
    766e:	3301      	adds	r3, #1
    7670:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    7672:	687b      	ldr	r3, [r7, #4]
    7674:	3b01      	subs	r3, #1
    7676:	607b      	str	r3, [r7, #4]
    7678:	687b      	ldr	r3, [r7, #4]
    767a:	2b00      	cmp	r3, #0
    767c:	dcec      	bgt.n	7658 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    767e:	697b      	ldr	r3, [r7, #20]
}
    7680:	0018      	movs	r0, r3
    7682:	46bd      	mov	sp, r7
    7684:	b006      	add	sp, #24
    7686:	bd80      	pop	{r7, pc}
    7688:	20004638 	.word	0x20004638
    768c:	20004640 	.word	0x20004640

00007690 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7690:	b580      	push	{r7, lr}
    7692:	b086      	sub	sp, #24
    7694:	af00      	add	r7, sp, #0
    7696:	60f8      	str	r0, [r7, #12]
    7698:	60b9      	str	r1, [r7, #8]
    769a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    769c:	2300      	movs	r3, #0
    769e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    76a0:	68fb      	ldr	r3, [r7, #12]
    76a2:	2b01      	cmp	r3, #1
    76a4:	d01d      	beq.n	76e2 <_write+0x52>
    76a6:	68fb      	ldr	r3, [r7, #12]
    76a8:	2b02      	cmp	r3, #2
    76aa:	d01a      	beq.n	76e2 <_write+0x52>
    76ac:	68fb      	ldr	r3, [r7, #12]
    76ae:	2b03      	cmp	r3, #3
    76b0:	d017      	beq.n	76e2 <_write+0x52>
		return -1;
    76b2:	2301      	movs	r3, #1
    76b4:	425b      	negs	r3, r3
    76b6:	e018      	b.n	76ea <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    76b8:	4b0e      	ldr	r3, [pc, #56]	; (76f4 <_write+0x64>)
    76ba:	681a      	ldr	r2, [r3, #0]
    76bc:	4b0e      	ldr	r3, [pc, #56]	; (76f8 <_write+0x68>)
    76be:	6818      	ldr	r0, [r3, #0]
    76c0:	68bb      	ldr	r3, [r7, #8]
    76c2:	1c59      	adds	r1, r3, #1
    76c4:	60b9      	str	r1, [r7, #8]
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	0019      	movs	r1, r3
    76ca:	4790      	blx	r2
    76cc:	1e03      	subs	r3, r0, #0
    76ce:	da02      	bge.n	76d6 <_write+0x46>
			return -1;
    76d0:	2301      	movs	r3, #1
    76d2:	425b      	negs	r3, r3
    76d4:	e009      	b.n	76ea <_write+0x5a>
		}
		++nChars;
    76d6:	697b      	ldr	r3, [r7, #20]
    76d8:	3301      	adds	r3, #1
    76da:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    76dc:	687b      	ldr	r3, [r7, #4]
    76de:	3b01      	subs	r3, #1
    76e0:	607b      	str	r3, [r7, #4]
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d1e7      	bne.n	76b8 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    76e8:	697b      	ldr	r3, [r7, #20]
}
    76ea:	0018      	movs	r0, r3
    76ec:	46bd      	mov	sp, r7
    76ee:	b006      	add	sp, #24
    76f0:	bd80      	pop	{r7, pc}
    76f2:	46c0      	nop			; (mov r8, r8)
    76f4:	2000463c 	.word	0x2000463c
    76f8:	20004640 	.word	0x20004640

000076fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    76fc:	b580      	push	{r7, lr}
    76fe:	b084      	sub	sp, #16
    7700:	af00      	add	r7, sp, #0
    7702:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7704:	4b0a      	ldr	r3, [pc, #40]	; (7730 <_sbrk+0x34>)
    7706:	681b      	ldr	r3, [r3, #0]
    7708:	2b00      	cmp	r3, #0
    770a:	d102      	bne.n	7712 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    770c:	4b08      	ldr	r3, [pc, #32]	; (7730 <_sbrk+0x34>)
    770e:	4a09      	ldr	r2, [pc, #36]	; (7734 <_sbrk+0x38>)
    7710:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    7712:	4b07      	ldr	r3, [pc, #28]	; (7730 <_sbrk+0x34>)
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	60fb      	str	r3, [r7, #12]

	heap += incr;
    7718:	4b05      	ldr	r3, [pc, #20]	; (7730 <_sbrk+0x34>)
    771a:	681a      	ldr	r2, [r3, #0]
    771c:	687b      	ldr	r3, [r7, #4]
    771e:	18d2      	adds	r2, r2, r3
    7720:	4b03      	ldr	r3, [pc, #12]	; (7730 <_sbrk+0x34>)
    7722:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    7724:	68fb      	ldr	r3, [r7, #12]
}
    7726:	0018      	movs	r0, r3
    7728:	46bd      	mov	sp, r7
    772a:	b004      	add	sp, #16
    772c:	bd80      	pop	{r7, pc}
    772e:	46c0      	nop			; (mov r8, r8)
    7730:	20000114 	.word	0x20000114
    7734:	20006678 	.word	0x20006678

00007738 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    7738:	b580      	push	{r7, lr}
    773a:	b082      	sub	sp, #8
    773c:	af00      	add	r7, sp, #0
    773e:	6078      	str	r0, [r7, #4]
	return -1;
    7740:	2301      	movs	r3, #1
    7742:	425b      	negs	r3, r3
}
    7744:	0018      	movs	r0, r3
    7746:	46bd      	mov	sp, r7
    7748:	b002      	add	sp, #8
    774a:	bd80      	pop	{r7, pc}

0000774c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    774c:	b580      	push	{r7, lr}
    774e:	b082      	sub	sp, #8
    7750:	af00      	add	r7, sp, #0
    7752:	6078      	str	r0, [r7, #4]
    7754:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    7756:	683b      	ldr	r3, [r7, #0]
    7758:	2280      	movs	r2, #128	; 0x80
    775a:	0192      	lsls	r2, r2, #6
    775c:	605a      	str	r2, [r3, #4]

	return 0;
    775e:	2300      	movs	r3, #0
}
    7760:	0018      	movs	r0, r3
    7762:	46bd      	mov	sp, r7
    7764:	b002      	add	sp, #8
    7766:	bd80      	pop	{r7, pc}

00007768 <_isatty>:

extern int _isatty(int file)
{
    7768:	b580      	push	{r7, lr}
    776a:	b082      	sub	sp, #8
    776c:	af00      	add	r7, sp, #0
    776e:	6078      	str	r0, [r7, #4]
	return 1;
    7770:	2301      	movs	r3, #1
}
    7772:	0018      	movs	r0, r3
    7774:	46bd      	mov	sp, r7
    7776:	b002      	add	sp, #8
    7778:	bd80      	pop	{r7, pc}
    777a:	46c0      	nop			; (mov r8, r8)

0000777c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    777c:	b580      	push	{r7, lr}
    777e:	b084      	sub	sp, #16
    7780:	af00      	add	r7, sp, #0
    7782:	60f8      	str	r0, [r7, #12]
    7784:	60b9      	str	r1, [r7, #8]
    7786:	607a      	str	r2, [r7, #4]
	return 0;
    7788:	2300      	movs	r3, #0
}
    778a:	0018      	movs	r0, r3
    778c:	46bd      	mov	sp, r7
    778e:	b004      	add	sp, #16
    7790:	bd80      	pop	{r7, pc}
    7792:	46c0      	nop			; (mov r8, r8)

00007794 <_exit>:

extern void _exit(int status)
{
    7794:	b580      	push	{r7, lr}
    7796:	b082      	sub	sp, #8
    7798:	af00      	add	r7, sp, #0
    779a:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    779c:	be00      	bkpt	0x0000
}
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	46bd      	mov	sp, r7
    77a2:	b002      	add	sp, #8
    77a4:	bd80      	pop	{r7, pc}
    77a6:	46c0      	nop			; (mov r8, r8)

000077a8 <_kill>:

extern void _kill(int pid, int sig)
{
    77a8:	b580      	push	{r7, lr}
    77aa:	b082      	sub	sp, #8
    77ac:	af00      	add	r7, sp, #0
    77ae:	6078      	str	r0, [r7, #4]
    77b0:	6039      	str	r1, [r7, #0]
	return;
    77b2:	46c0      	nop			; (mov r8, r8)
}
    77b4:	46bd      	mov	sp, r7
    77b6:	b002      	add	sp, #8
    77b8:	bd80      	pop	{r7, pc}
    77ba:	46c0      	nop			; (mov r8, r8)

000077bc <_getpid>:

extern int _getpid(void)
{
    77bc:	b580      	push	{r7, lr}
    77be:	af00      	add	r7, sp, #0
	return -1;
    77c0:	2301      	movs	r3, #1
    77c2:	425b      	negs	r3, r3
}
    77c4:	0018      	movs	r0, r3
    77c6:	46bd      	mov	sp, r7
    77c8:	bd80      	pop	{r7, pc}
    77ca:	46c0      	nop			; (mov r8, r8)

000077cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    77cc:	b580      	push	{r7, lr}
    77ce:	b082      	sub	sp, #8
    77d0:	af00      	add	r7, sp, #0
    77d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	3308      	adds	r3, #8
    77d8:	001a      	movs	r2, r3
    77da:	687b      	ldr	r3, [r7, #4]
    77dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	2201      	movs	r2, #1
    77e2:	4252      	negs	r2, r2
    77e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	3308      	adds	r3, #8
    77ea:	001a      	movs	r2, r3
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    77f0:	687b      	ldr	r3, [r7, #4]
    77f2:	3308      	adds	r3, #8
    77f4:	001a      	movs	r2, r3
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	2200      	movs	r2, #0
    77fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    7800:	46c0      	nop			; (mov r8, r8)
    7802:	46bd      	mov	sp, r7
    7804:	b002      	add	sp, #8
    7806:	bd80      	pop	{r7, pc}

00007808 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    7808:	b580      	push	{r7, lr}
    780a:	b082      	sub	sp, #8
    780c:	af00      	add	r7, sp, #0
    780e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    7810:	687b      	ldr	r3, [r7, #4]
    7812:	2200      	movs	r2, #0
    7814:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    7816:	46c0      	nop			; (mov r8, r8)
    7818:	46bd      	mov	sp, r7
    781a:	b002      	add	sp, #8
    781c:	bd80      	pop	{r7, pc}
    781e:	46c0      	nop			; (mov r8, r8)

00007820 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    7820:	b580      	push	{r7, lr}
    7822:	b084      	sub	sp, #16
    7824:	af00      	add	r7, sp, #0
    7826:	6078      	str	r0, [r7, #4]
    7828:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	685b      	ldr	r3, [r3, #4]
    782e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    7830:	683b      	ldr	r3, [r7, #0]
    7832:	68fa      	ldr	r2, [r7, #12]
    7834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    7836:	68fb      	ldr	r3, [r7, #12]
    7838:	689a      	ldr	r2, [r3, #8]
    783a:	683b      	ldr	r3, [r7, #0]
    783c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    783e:	68fb      	ldr	r3, [r7, #12]
    7840:	689b      	ldr	r3, [r3, #8]
    7842:	683a      	ldr	r2, [r7, #0]
    7844:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    7846:	68fb      	ldr	r3, [r7, #12]
    7848:	683a      	ldr	r2, [r7, #0]
    784a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    784c:	683b      	ldr	r3, [r7, #0]
    784e:	687a      	ldr	r2, [r7, #4]
    7850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	681b      	ldr	r3, [r3, #0]
    7856:	1c5a      	adds	r2, r3, #1
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	601a      	str	r2, [r3, #0]
}
    785c:	46c0      	nop			; (mov r8, r8)
    785e:	46bd      	mov	sp, r7
    7860:	b004      	add	sp, #16
    7862:	bd80      	pop	{r7, pc}

00007864 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    7864:	b580      	push	{r7, lr}
    7866:	b084      	sub	sp, #16
    7868:	af00      	add	r7, sp, #0
    786a:	6078      	str	r0, [r7, #4]
    786c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	681b      	ldr	r3, [r3, #0]
    7872:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    7874:	68bb      	ldr	r3, [r7, #8]
    7876:	3301      	adds	r3, #1
    7878:	d103      	bne.n	7882 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    787a:	687b      	ldr	r3, [r7, #4]
    787c:	691b      	ldr	r3, [r3, #16]
    787e:	60fb      	str	r3, [r7, #12]
    7880:	e00c      	b.n	789c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7882:	687b      	ldr	r3, [r7, #4]
    7884:	3308      	adds	r3, #8
    7886:	60fb      	str	r3, [r7, #12]
    7888:	e002      	b.n	7890 <vListInsert+0x2c>
    788a:	68fb      	ldr	r3, [r7, #12]
    788c:	685b      	ldr	r3, [r3, #4]
    788e:	60fb      	str	r3, [r7, #12]
    7890:	68fb      	ldr	r3, [r7, #12]
    7892:	685b      	ldr	r3, [r3, #4]
    7894:	681a      	ldr	r2, [r3, #0]
    7896:	68bb      	ldr	r3, [r7, #8]
    7898:	429a      	cmp	r2, r3
    789a:	d9f6      	bls.n	788a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    789c:	68fb      	ldr	r3, [r7, #12]
    789e:	685a      	ldr	r2, [r3, #4]
    78a0:	683b      	ldr	r3, [r7, #0]
    78a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    78a4:	683b      	ldr	r3, [r7, #0]
    78a6:	685b      	ldr	r3, [r3, #4]
    78a8:	683a      	ldr	r2, [r7, #0]
    78aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    78ac:	683b      	ldr	r3, [r7, #0]
    78ae:	68fa      	ldr	r2, [r7, #12]
    78b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    78b2:	68fb      	ldr	r3, [r7, #12]
    78b4:	683a      	ldr	r2, [r7, #0]
    78b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    78b8:	683b      	ldr	r3, [r7, #0]
    78ba:	687a      	ldr	r2, [r7, #4]
    78bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    78be:	687b      	ldr	r3, [r7, #4]
    78c0:	681b      	ldr	r3, [r3, #0]
    78c2:	1c5a      	adds	r2, r3, #1
    78c4:	687b      	ldr	r3, [r7, #4]
    78c6:	601a      	str	r2, [r3, #0]
}
    78c8:	46c0      	nop			; (mov r8, r8)
    78ca:	46bd      	mov	sp, r7
    78cc:	b004      	add	sp, #16
    78ce:	bd80      	pop	{r7, pc}

000078d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    78d0:	b580      	push	{r7, lr}
    78d2:	b084      	sub	sp, #16
    78d4:	af00      	add	r7, sp, #0
    78d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    78d8:	687b      	ldr	r3, [r7, #4]
    78da:	691b      	ldr	r3, [r3, #16]
    78dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    78de:	687b      	ldr	r3, [r7, #4]
    78e0:	685b      	ldr	r3, [r3, #4]
    78e2:	687a      	ldr	r2, [r7, #4]
    78e4:	6892      	ldr	r2, [r2, #8]
    78e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    78e8:	687b      	ldr	r3, [r7, #4]
    78ea:	689b      	ldr	r3, [r3, #8]
    78ec:	687a      	ldr	r2, [r7, #4]
    78ee:	6852      	ldr	r2, [r2, #4]
    78f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    78f2:	68fb      	ldr	r3, [r7, #12]
    78f4:	685a      	ldr	r2, [r3, #4]
    78f6:	687b      	ldr	r3, [r7, #4]
    78f8:	429a      	cmp	r2, r3
    78fa:	d103      	bne.n	7904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    78fc:	687b      	ldr	r3, [r7, #4]
    78fe:	689a      	ldr	r2, [r3, #8]
    7900:	68fb      	ldr	r3, [r7, #12]
    7902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	2200      	movs	r2, #0
    7908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    790a:	68fb      	ldr	r3, [r7, #12]
    790c:	681b      	ldr	r3, [r3, #0]
    790e:	1e5a      	subs	r2, r3, #1
    7910:	68fb      	ldr	r3, [r7, #12]
    7912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    7914:	68fb      	ldr	r3, [r7, #12]
    7916:	681b      	ldr	r3, [r3, #0]
}
    7918:	0018      	movs	r0, r3
    791a:	46bd      	mov	sp, r7
    791c:	b004      	add	sp, #16
    791e:	bd80      	pop	{r7, pc}

00007920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    7920:	b580      	push	{r7, lr}
    7922:	b084      	sub	sp, #16
    7924:	af00      	add	r7, sp, #0
    7926:	60f8      	str	r0, [r7, #12]
    7928:	60b9      	str	r1, [r7, #8]
    792a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    792c:	68fb      	ldr	r3, [r7, #12]
    792e:	3b04      	subs	r3, #4
    7930:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    7932:	68fb      	ldr	r3, [r7, #12]
    7934:	2280      	movs	r2, #128	; 0x80
    7936:	0452      	lsls	r2, r2, #17
    7938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    793a:	68fb      	ldr	r3, [r7, #12]
    793c:	3b04      	subs	r3, #4
    793e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    7940:	68ba      	ldr	r2, [r7, #8]
    7942:	68fb      	ldr	r3, [r7, #12]
    7944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7946:	68fb      	ldr	r3, [r7, #12]
    7948:	3b04      	subs	r3, #4
    794a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    794c:	4a08      	ldr	r2, [pc, #32]	; (7970 <pxPortInitialiseStack+0x50>)
    794e:	68fb      	ldr	r3, [r7, #12]
    7950:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    7952:	68fb      	ldr	r3, [r7, #12]
    7954:	3b14      	subs	r3, #20
    7956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    7958:	687a      	ldr	r2, [r7, #4]
    795a:	68fb      	ldr	r3, [r7, #12]
    795c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    795e:	68fb      	ldr	r3, [r7, #12]
    7960:	3b20      	subs	r3, #32
    7962:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    7964:	68fb      	ldr	r3, [r7, #12]
}
    7966:	0018      	movs	r0, r3
    7968:	46bd      	mov	sp, r7
    796a:	b004      	add	sp, #16
    796c:	bd80      	pop	{r7, pc}
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	00007975 	.word	0x00007975

00007974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    7974:	b580      	push	{r7, lr}
    7976:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    7978:	4b03      	ldr	r3, [pc, #12]	; (7988 <prvTaskExitError+0x14>)
    797a:	681b      	ldr	r3, [r3, #0]
    797c:	3301      	adds	r3, #1
    797e:	d001      	beq.n	7984 <prvTaskExitError+0x10>
    7980:	b672      	cpsid	i
    7982:	e7fe      	b.n	7982 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    7984:	b672      	cpsid	i
	for( ;; );
    7986:	e7fe      	b.n	7986 <prvTaskExitError+0x12>
    7988:	2000001c 	.word	0x2000001c

0000798c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    798c:	b580      	push	{r7, lr}
    798e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    7990:	46c0      	nop			; (mov r8, r8)
    7992:	46bd      	mov	sp, r7
    7994:	bd80      	pop	{r7, pc}
    7996:	46c0      	nop			; (mov r8, r8)
	...

000079a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    79a0:	4a0b      	ldr	r2, [pc, #44]	; (79d0 <pxCurrentTCBConst2>)
    79a2:	6813      	ldr	r3, [r2, #0]
    79a4:	6818      	ldr	r0, [r3, #0]
    79a6:	3020      	adds	r0, #32
    79a8:	f380 8809 	msr	PSP, r0
    79ac:	2002      	movs	r0, #2
    79ae:	f380 8814 	msr	CONTROL, r0
    79b2:	f3bf 8f6f 	isb	sy
    79b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    79b8:	46ae      	mov	lr, r5
    79ba:	bc08      	pop	{r3}
    79bc:	bc04      	pop	{r2}
    79be:	b662      	cpsie	i
    79c0:	4718      	bx	r3
    79c2:	46c0      	nop			; (mov r8, r8)
    79c4:	46c0      	nop			; (mov r8, r8)
    79c6:	46c0      	nop			; (mov r8, r8)
    79c8:	46c0      	nop			; (mov r8, r8)
    79ca:	46c0      	nop			; (mov r8, r8)
    79cc:	46c0      	nop			; (mov r8, r8)
    79ce:	46c0      	nop			; (mov r8, r8)

000079d0 <pxCurrentTCBConst2>:
    79d0:	20003bb8 	.word	0x20003bb8
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    79d4:	46c0      	nop			; (mov r8, r8)
    79d6:	46c0      	nop			; (mov r8, r8)

000079d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    79d8:	b580      	push	{r7, lr}
    79da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    79dc:	4b0d      	ldr	r3, [pc, #52]	; (7a14 <xPortStartScheduler+0x3c>)
    79de:	4a0d      	ldr	r2, [pc, #52]	; (7a14 <xPortStartScheduler+0x3c>)
    79e0:	6812      	ldr	r2, [r2, #0]
    79e2:	21ff      	movs	r1, #255	; 0xff
    79e4:	0409      	lsls	r1, r1, #16
    79e6:	430a      	orrs	r2, r1
    79e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    79ea:	4b0a      	ldr	r3, [pc, #40]	; (7a14 <xPortStartScheduler+0x3c>)
    79ec:	4a09      	ldr	r2, [pc, #36]	; (7a14 <xPortStartScheduler+0x3c>)
    79ee:	6812      	ldr	r2, [r2, #0]
    79f0:	21ff      	movs	r1, #255	; 0xff
    79f2:	0609      	lsls	r1, r1, #24
    79f4:	430a      	orrs	r2, r1
    79f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    79f8:	4b07      	ldr	r3, [pc, #28]	; (7a18 <xPortStartScheduler+0x40>)
    79fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    79fc:	4b07      	ldr	r3, [pc, #28]	; (7a1c <xPortStartScheduler+0x44>)
    79fe:	2200      	movs	r2, #0
    7a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    7a02:	4b07      	ldr	r3, [pc, #28]	; (7a20 <xPortStartScheduler+0x48>)
    7a04:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    7a06:	4b07      	ldr	r3, [pc, #28]	; (7a24 <xPortStartScheduler+0x4c>)
    7a08:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    7a0a:	2300      	movs	r3, #0
}
    7a0c:	0018      	movs	r0, r3
    7a0e:	46bd      	mov	sp, r7
    7a10:	bd80      	pop	{r7, pc}
    7a12:	46c0      	nop			; (mov r8, r8)
    7a14:	e000ed20 	.word	0xe000ed20
    7a18:	00007b39 	.word	0x00007b39
    7a1c:	2000001c 	.word	0x2000001c
    7a20:	000079a1 	.word	0x000079a1
    7a24:	00007975 	.word	0x00007975

00007a28 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    7a2c:	4b05      	ldr	r3, [pc, #20]	; (7a44 <vPortYield+0x1c>)
    7a2e:	2280      	movs	r2, #128	; 0x80
    7a30:	0552      	lsls	r2, r2, #21
    7a32:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    7a34:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7a38:	f3bf 8f6f 	isb	sy
}
    7a3c:	46c0      	nop			; (mov r8, r8)
    7a3e:	46bd      	mov	sp, r7
    7a40:	bd80      	pop	{r7, pc}
    7a42:	46c0      	nop			; (mov r8, r8)
    7a44:	e000ed04 	.word	0xe000ed04

00007a48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7a48:	b580      	push	{r7, lr}
    7a4a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    7a4c:	b672      	cpsid	i
    uxCriticalNesting++;
    7a4e:	4b06      	ldr	r3, [pc, #24]	; (7a68 <vPortEnterCritical+0x20>)
    7a50:	681b      	ldr	r3, [r3, #0]
    7a52:	1c5a      	adds	r2, r3, #1
    7a54:	4b04      	ldr	r3, [pc, #16]	; (7a68 <vPortEnterCritical+0x20>)
    7a56:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    7a58:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7a5c:	f3bf 8f6f 	isb	sy
}
    7a60:	46c0      	nop			; (mov r8, r8)
    7a62:	46bd      	mov	sp, r7
    7a64:	bd80      	pop	{r7, pc}
    7a66:	46c0      	nop			; (mov r8, r8)
    7a68:	2000001c 	.word	0x2000001c

00007a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    7a6c:	b580      	push	{r7, lr}
    7a6e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    7a70:	4b09      	ldr	r3, [pc, #36]	; (7a98 <vPortExitCritical+0x2c>)
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	2b00      	cmp	r3, #0
    7a76:	d101      	bne.n	7a7c <vPortExitCritical+0x10>
    7a78:	b672      	cpsid	i
    7a7a:	e7fe      	b.n	7a7a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    7a7c:	4b06      	ldr	r3, [pc, #24]	; (7a98 <vPortExitCritical+0x2c>)
    7a7e:	681b      	ldr	r3, [r3, #0]
    7a80:	1e5a      	subs	r2, r3, #1
    7a82:	4b05      	ldr	r3, [pc, #20]	; (7a98 <vPortExitCritical+0x2c>)
    7a84:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    7a86:	4b04      	ldr	r3, [pc, #16]	; (7a98 <vPortExitCritical+0x2c>)
    7a88:	681b      	ldr	r3, [r3, #0]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	d100      	bne.n	7a90 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    7a8e:	b662      	cpsie	i
    }
}
    7a90:	46c0      	nop			; (mov r8, r8)
    7a92:	46bd      	mov	sp, r7
    7a94:	bd80      	pop	{r7, pc}
    7a96:	46c0      	nop			; (mov r8, r8)
    7a98:	2000001c 	.word	0x2000001c

00007a9c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    7a9c:	f3ef 8010 	mrs	r0, PRIMASK
    7aa0:	b672      	cpsid	i
    7aa2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    7aa4:	46c0      	nop			; (mov r8, r8)
    7aa6:	0018      	movs	r0, r3

00007aa8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    7aa8:	f380 8810 	msr	PRIMASK, r0
    7aac:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    7aae:	46c0      	nop			; (mov r8, r8)

00007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    7ab0:	f3ef 8009 	mrs	r0, PSP
    7ab4:	4b0e      	ldr	r3, [pc, #56]	; (7af0 <pxCurrentTCBConst>)
    7ab6:	681a      	ldr	r2, [r3, #0]
    7ab8:	3820      	subs	r0, #32
    7aba:	6010      	str	r0, [r2, #0]
    7abc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    7abe:	4644      	mov	r4, r8
    7ac0:	464d      	mov	r5, r9
    7ac2:	4656      	mov	r6, sl
    7ac4:	465f      	mov	r7, fp
    7ac6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    7ac8:	b508      	push	{r3, lr}
    7aca:	b672      	cpsid	i
    7acc:	f001 f9be 	bl	8e4c <vTaskSwitchContext>
    7ad0:	b662      	cpsie	i
    7ad2:	bc0c      	pop	{r2, r3}
    7ad4:	6811      	ldr	r1, [r2, #0]
    7ad6:	6808      	ldr	r0, [r1, #0]
    7ad8:	3010      	adds	r0, #16
    7ada:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    7adc:	46a0      	mov	r8, r4
    7ade:	46a9      	mov	r9, r5
    7ae0:	46b2      	mov	sl, r6
    7ae2:	46bb      	mov	fp, r7
    7ae4:	f380 8809 	msr	PSP, r0
    7ae8:	3820      	subs	r0, #32
    7aea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    7aec:	4718      	bx	r3
    7aee:	46c0      	nop			; (mov r8, r8)

00007af0 <pxCurrentTCBConst>:
    7af0:	20003bb8 	.word	0x20003bb8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    7af4:	46c0      	nop			; (mov r8, r8)
    7af6:	46c0      	nop			; (mov r8, r8)

00007af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b082      	sub	sp, #8
    7afc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    7afe:	4b0a      	ldr	r3, [pc, #40]	; (7b28 <SysTick_Handler+0x30>)
    7b00:	4798      	blx	r3
    7b02:	0003      	movs	r3, r0
    7b04:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    7b06:	4b09      	ldr	r3, [pc, #36]	; (7b2c <SysTick_Handler+0x34>)
    7b08:	4798      	blx	r3
    7b0a:	1e03      	subs	r3, r0, #0
    7b0c:	d003      	beq.n	7b16 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    7b0e:	4b08      	ldr	r3, [pc, #32]	; (7b30 <SysTick_Handler+0x38>)
    7b10:	2280      	movs	r2, #128	; 0x80
    7b12:	0552      	lsls	r2, r2, #21
    7b14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	0018      	movs	r0, r3
    7b1a:	4b06      	ldr	r3, [pc, #24]	; (7b34 <SysTick_Handler+0x3c>)
    7b1c:	4798      	blx	r3
}
    7b1e:	46c0      	nop			; (mov r8, r8)
    7b20:	46bd      	mov	sp, r7
    7b22:	b002      	add	sp, #8
    7b24:	bd80      	pop	{r7, pc}
    7b26:	46c0      	nop			; (mov r8, r8)
    7b28:	00007a9d 	.word	0x00007a9d
    7b2c:	00008cd9 	.word	0x00008cd9
    7b30:	e000ed04 	.word	0xe000ed04
    7b34:	00007aa9 	.word	0x00007aa9

00007b38 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7b38:	b580      	push	{r7, lr}
    7b3a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7b3c:	4b04      	ldr	r3, [pc, #16]	; (7b50 <prvSetupTimerInterrupt+0x18>)
    7b3e:	4a05      	ldr	r2, [pc, #20]	; (7b54 <prvSetupTimerInterrupt+0x1c>)
    7b40:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    7b42:	4b05      	ldr	r3, [pc, #20]	; (7b58 <prvSetupTimerInterrupt+0x20>)
    7b44:	2207      	movs	r2, #7
    7b46:	601a      	str	r2, [r3, #0]
}
    7b48:	46c0      	nop			; (mov r8, r8)
    7b4a:	46bd      	mov	sp, r7
    7b4c:	bd80      	pop	{r7, pc}
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	e000e014 	.word	0xe000e014
    7b54:	0000bb7f 	.word	0x0000bb7f
    7b58:	e000e010 	.word	0xe000e010

00007b5c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	b084      	sub	sp, #16
    7b60:	af00      	add	r7, sp, #0
    7b62:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    7b64:	2300      	movs	r3, #0
    7b66:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    7b68:	687b      	ldr	r3, [r7, #4]
    7b6a:	2207      	movs	r2, #7
    7b6c:	4013      	ands	r3, r2
    7b6e:	d004      	beq.n	7b7a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    7b70:	687b      	ldr	r3, [r7, #4]
    7b72:	2207      	movs	r2, #7
    7b74:	4393      	bics	r3, r2
    7b76:	3308      	adds	r3, #8
    7b78:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    7b7a:	4b17      	ldr	r3, [pc, #92]	; (7bd8 <pvPortMalloc+0x7c>)
    7b7c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    7b7e:	4b17      	ldr	r3, [pc, #92]	; (7bdc <pvPortMalloc+0x80>)
    7b80:	681b      	ldr	r3, [r3, #0]
    7b82:	2b00      	cmp	r3, #0
    7b84:	d105      	bne.n	7b92 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    7b86:	4b16      	ldr	r3, [pc, #88]	; (7be0 <pvPortMalloc+0x84>)
    7b88:	2207      	movs	r2, #7
    7b8a:	4393      	bics	r3, r2
    7b8c:	001a      	movs	r2, r3
    7b8e:	4b13      	ldr	r3, [pc, #76]	; (7bdc <pvPortMalloc+0x80>)
    7b90:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    7b92:	4b14      	ldr	r3, [pc, #80]	; (7be4 <pvPortMalloc+0x88>)
    7b94:	681a      	ldr	r2, [r3, #0]
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	18d3      	adds	r3, r2, r3
    7b9a:	4a13      	ldr	r2, [pc, #76]	; (7be8 <pvPortMalloc+0x8c>)
    7b9c:	4293      	cmp	r3, r2
    7b9e:	d813      	bhi.n	7bc8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    7ba0:	4b10      	ldr	r3, [pc, #64]	; (7be4 <pvPortMalloc+0x88>)
    7ba2:	681a      	ldr	r2, [r3, #0]
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	18d2      	adds	r2, r2, r3
    7ba8:	4b0e      	ldr	r3, [pc, #56]	; (7be4 <pvPortMalloc+0x88>)
    7baa:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    7bac:	429a      	cmp	r2, r3
    7bae:	d90b      	bls.n	7bc8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    7bb0:	4b0a      	ldr	r3, [pc, #40]	; (7bdc <pvPortMalloc+0x80>)
    7bb2:	681a      	ldr	r2, [r3, #0]
    7bb4:	4b0b      	ldr	r3, [pc, #44]	; (7be4 <pvPortMalloc+0x88>)
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	18d3      	adds	r3, r2, r3
    7bba:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    7bbc:	4b09      	ldr	r3, [pc, #36]	; (7be4 <pvPortMalloc+0x88>)
    7bbe:	681a      	ldr	r2, [r3, #0]
    7bc0:	687b      	ldr	r3, [r7, #4]
    7bc2:	18d2      	adds	r2, r2, r3
    7bc4:	4b07      	ldr	r3, [pc, #28]	; (7be4 <pvPortMalloc+0x88>)
    7bc6:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    7bc8:	4b08      	ldr	r3, [pc, #32]	; (7bec <pvPortMalloc+0x90>)
    7bca:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    7bcc:	68fb      	ldr	r3, [r7, #12]
}
    7bce:	0018      	movs	r0, r3
    7bd0:	46bd      	mov	sp, r7
    7bd2:	b004      	add	sp, #16
    7bd4:	bd80      	pop	{r7, pc}
    7bd6:	46c0      	nop			; (mov r8, r8)
    7bd8:	00008b71 	.word	0x00008b71
    7bdc:	20003bb4 	.word	0x20003bb4
    7be0:	20000120 	.word	0x20000120
    7be4:	20003bb0 	.word	0x20003bb0
    7be8:	00003a8f 	.word	0x00003a8f
    7bec:	00008b89 	.word	0x00008b89

00007bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    7bf0:	b580      	push	{r7, lr}
    7bf2:	b082      	sub	sp, #8
    7bf4:	af00      	add	r7, sp, #0
    7bf6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    7bf8:	687b      	ldr	r3, [r7, #4]
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	d001      	beq.n	7c02 <vPortFree+0x12>
    7bfe:	b672      	cpsid	i
    7c00:	e7fe      	b.n	7c00 <vPortFree+0x10>
}
    7c02:	46c0      	nop			; (mov r8, r8)
    7c04:	46bd      	mov	sp, r7
    7c06:	b002      	add	sp, #8
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)

00007c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b084      	sub	sp, #16
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
    7c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7c16:	687b      	ldr	r3, [r7, #4]
    7c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    7c1a:	68fb      	ldr	r3, [r7, #12]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	d101      	bne.n	7c24 <xQueueGenericReset+0x18>
    7c20:	b672      	cpsid	i
    7c22:	e7fe      	b.n	7c22 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    7c24:	4b23      	ldr	r3, [pc, #140]	; (7cb4 <xQueueGenericReset+0xa8>)
    7c26:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7c28:	68fb      	ldr	r3, [r7, #12]
    7c2a:	681a      	ldr	r2, [r3, #0]
    7c2c:	68fb      	ldr	r3, [r7, #12]
    7c2e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    7c30:	68fb      	ldr	r3, [r7, #12]
    7c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c34:	434b      	muls	r3, r1
    7c36:	18d2      	adds	r2, r2, r3
    7c38:	68fb      	ldr	r3, [r7, #12]
    7c3a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    7c3c:	68fb      	ldr	r3, [r7, #12]
    7c3e:	2200      	movs	r2, #0
    7c40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    7c42:	68fb      	ldr	r3, [r7, #12]
    7c44:	681a      	ldr	r2, [r3, #0]
    7c46:	68fb      	ldr	r3, [r7, #12]
    7c48:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    7c4a:	68fb      	ldr	r3, [r7, #12]
    7c4c:	681a      	ldr	r2, [r3, #0]
    7c4e:	68fb      	ldr	r3, [r7, #12]
    7c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7c52:	1e59      	subs	r1, r3, #1
    7c54:	68fb      	ldr	r3, [r7, #12]
    7c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7c58:	434b      	muls	r3, r1
    7c5a:	18d2      	adds	r2, r2, r3
    7c5c:	68fb      	ldr	r3, [r7, #12]
    7c5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    7c60:	68fb      	ldr	r3, [r7, #12]
    7c62:	2244      	movs	r2, #68	; 0x44
    7c64:	21ff      	movs	r1, #255	; 0xff
    7c66:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    7c68:	68fb      	ldr	r3, [r7, #12]
    7c6a:	2245      	movs	r2, #69	; 0x45
    7c6c:	21ff      	movs	r1, #255	; 0xff
    7c6e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d10d      	bne.n	7c92 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7c76:	68fb      	ldr	r3, [r7, #12]
    7c78:	691b      	ldr	r3, [r3, #16]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d013      	beq.n	7ca6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7c7e:	68fb      	ldr	r3, [r7, #12]
    7c80:	3310      	adds	r3, #16
    7c82:	0018      	movs	r0, r3
    7c84:	4b0c      	ldr	r3, [pc, #48]	; (7cb8 <xQueueGenericReset+0xac>)
    7c86:	4798      	blx	r3
    7c88:	1e03      	subs	r3, r0, #0
    7c8a:	d00c      	beq.n	7ca6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    7c8c:	4b0b      	ldr	r3, [pc, #44]	; (7cbc <xQueueGenericReset+0xb0>)
    7c8e:	4798      	blx	r3
    7c90:	e009      	b.n	7ca6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    7c92:	68fb      	ldr	r3, [r7, #12]
    7c94:	3310      	adds	r3, #16
    7c96:	0018      	movs	r0, r3
    7c98:	4b09      	ldr	r3, [pc, #36]	; (7cc0 <xQueueGenericReset+0xb4>)
    7c9a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    7c9c:	68fb      	ldr	r3, [r7, #12]
    7c9e:	3324      	adds	r3, #36	; 0x24
    7ca0:	0018      	movs	r0, r3
    7ca2:	4b07      	ldr	r3, [pc, #28]	; (7cc0 <xQueueGenericReset+0xb4>)
    7ca4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    7ca6:	4b07      	ldr	r3, [pc, #28]	; (7cc4 <xQueueGenericReset+0xb8>)
    7ca8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    7caa:	2301      	movs	r3, #1
}
    7cac:	0018      	movs	r0, r3
    7cae:	46bd      	mov	sp, r7
    7cb0:	b004      	add	sp, #16
    7cb2:	bd80      	pop	{r7, pc}
    7cb4:	00007a49 	.word	0x00007a49
    7cb8:	00008fad 	.word	0x00008fad
    7cbc:	00007a29 	.word	0x00007a29
    7cc0:	000077cd 	.word	0x000077cd
    7cc4:	00007a6d 	.word	0x00007a6d

00007cc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    7cc8:	b590      	push	{r4, r7, lr}
    7cca:	b08b      	sub	sp, #44	; 0x2c
    7ccc:	af02      	add	r7, sp, #8
    7cce:	60f8      	str	r0, [r7, #12]
    7cd0:	60b9      	str	r1, [r7, #8]
    7cd2:	1dfb      	adds	r3, r7, #7
    7cd4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    7cd6:	68fb      	ldr	r3, [r7, #12]
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d101      	bne.n	7ce0 <xQueueGenericCreate+0x18>
    7cdc:	b672      	cpsid	i
    7cde:	e7fe      	b.n	7cde <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    7ce0:	68bb      	ldr	r3, [r7, #8]
    7ce2:	2b00      	cmp	r3, #0
    7ce4:	d102      	bne.n	7cec <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    7ce6:	2300      	movs	r3, #0
    7ce8:	61fb      	str	r3, [r7, #28]
    7cea:	e003      	b.n	7cf4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7cec:	68fb      	ldr	r3, [r7, #12]
    7cee:	68ba      	ldr	r2, [r7, #8]
    7cf0:	4353      	muls	r3, r2
    7cf2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    7cf4:	69fb      	ldr	r3, [r7, #28]
    7cf6:	334c      	adds	r3, #76	; 0x4c
    7cf8:	0018      	movs	r0, r3
    7cfa:	4b0c      	ldr	r3, [pc, #48]	; (7d2c <xQueueGenericCreate+0x64>)
    7cfc:	4798      	blx	r3
    7cfe:	0003      	movs	r3, r0
    7d00:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    7d02:	69bb      	ldr	r3, [r7, #24]
    7d04:	2b00      	cmp	r3, #0
    7d06:	d00c      	beq.n	7d22 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    7d08:	69bb      	ldr	r3, [r7, #24]
    7d0a:	334c      	adds	r3, #76	; 0x4c
    7d0c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    7d0e:	1dfb      	adds	r3, r7, #7
    7d10:	781c      	ldrb	r4, [r3, #0]
    7d12:	697a      	ldr	r2, [r7, #20]
    7d14:	68b9      	ldr	r1, [r7, #8]
    7d16:	68f8      	ldr	r0, [r7, #12]
    7d18:	69bb      	ldr	r3, [r7, #24]
    7d1a:	9300      	str	r3, [sp, #0]
    7d1c:	0023      	movs	r3, r4
    7d1e:	4c04      	ldr	r4, [pc, #16]	; (7d30 <xQueueGenericCreate+0x68>)
    7d20:	47a0      	blx	r4
		}

		return pxNewQueue;
    7d22:	69bb      	ldr	r3, [r7, #24]
	}
    7d24:	0018      	movs	r0, r3
    7d26:	46bd      	mov	sp, r7
    7d28:	b009      	add	sp, #36	; 0x24
    7d2a:	bd90      	pop	{r4, r7, pc}
    7d2c:	00007b5d 	.word	0x00007b5d
    7d30:	00007d35 	.word	0x00007d35

00007d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    7d34:	b580      	push	{r7, lr}
    7d36:	b084      	sub	sp, #16
    7d38:	af00      	add	r7, sp, #0
    7d3a:	60f8      	str	r0, [r7, #12]
    7d3c:	60b9      	str	r1, [r7, #8]
    7d3e:	607a      	str	r2, [r7, #4]
    7d40:	001a      	movs	r2, r3
    7d42:	1cfb      	adds	r3, r7, #3
    7d44:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    7d46:	68bb      	ldr	r3, [r7, #8]
    7d48:	2b00      	cmp	r3, #0
    7d4a:	d103      	bne.n	7d54 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    7d4c:	69bb      	ldr	r3, [r7, #24]
    7d4e:	69ba      	ldr	r2, [r7, #24]
    7d50:	601a      	str	r2, [r3, #0]
    7d52:	e002      	b.n	7d5a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    7d54:	69bb      	ldr	r3, [r7, #24]
    7d56:	687a      	ldr	r2, [r7, #4]
    7d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    7d5a:	69bb      	ldr	r3, [r7, #24]
    7d5c:	68fa      	ldr	r2, [r7, #12]
    7d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    7d60:	69bb      	ldr	r3, [r7, #24]
    7d62:	68ba      	ldr	r2, [r7, #8]
    7d64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    7d66:	69bb      	ldr	r3, [r7, #24]
    7d68:	2101      	movs	r1, #1
    7d6a:	0018      	movs	r0, r3
    7d6c:	4b04      	ldr	r3, [pc, #16]	; (7d80 <prvInitialiseNewQueue+0x4c>)
    7d6e:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    7d70:	69bb      	ldr	r3, [r7, #24]
    7d72:	2200      	movs	r2, #0
    7d74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    7d76:	46c0      	nop			; (mov r8, r8)
    7d78:	46bd      	mov	sp, r7
    7d7a:	b004      	add	sp, #16
    7d7c:	bd80      	pop	{r7, pc}
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	00007c0d 	.word	0x00007c0d

00007d84 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    7d84:	b590      	push	{r4, r7, lr}
    7d86:	b083      	sub	sp, #12
    7d88:	af00      	add	r7, sp, #0
    7d8a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    7d8c:	687b      	ldr	r3, [r7, #4]
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d00e      	beq.n	7db0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    7d92:	687b      	ldr	r3, [r7, #4]
    7d94:	2200      	movs	r2, #0
    7d96:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    7d98:	687b      	ldr	r3, [r7, #4]
    7d9a:	2200      	movs	r2, #0
    7d9c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    7d9e:	687b      	ldr	r3, [r7, #4]
    7da0:	2200      	movs	r2, #0
    7da2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    7da4:	6878      	ldr	r0, [r7, #4]
    7da6:	2300      	movs	r3, #0
    7da8:	2200      	movs	r2, #0
    7daa:	2100      	movs	r1, #0
    7dac:	4c02      	ldr	r4, [pc, #8]	; (7db8 <prvInitialiseMutex+0x34>)
    7dae:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    7db0:	46c0      	nop			; (mov r8, r8)
    7db2:	46bd      	mov	sp, r7
    7db4:	b003      	add	sp, #12
    7db6:	bd90      	pop	{r4, r7, pc}
    7db8:	00007dfd 	.word	0x00007dfd

00007dbc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    7dbc:	b580      	push	{r7, lr}
    7dbe:	b086      	sub	sp, #24
    7dc0:	af00      	add	r7, sp, #0
    7dc2:	0002      	movs	r2, r0
    7dc4:	1dfb      	adds	r3, r7, #7
    7dc6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    7dc8:	2301      	movs	r3, #1
    7dca:	617b      	str	r3, [r7, #20]
    7dcc:	2300      	movs	r3, #0
    7dce:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    7dd0:	1dfb      	adds	r3, r7, #7
    7dd2:	781a      	ldrb	r2, [r3, #0]
    7dd4:	6939      	ldr	r1, [r7, #16]
    7dd6:	697b      	ldr	r3, [r7, #20]
    7dd8:	0018      	movs	r0, r3
    7dda:	4b06      	ldr	r3, [pc, #24]	; (7df4 <xQueueCreateMutex+0x38>)
    7ddc:	4798      	blx	r3
    7dde:	0003      	movs	r3, r0
    7de0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    7de2:	68fb      	ldr	r3, [r7, #12]
    7de4:	0018      	movs	r0, r3
    7de6:	4b04      	ldr	r3, [pc, #16]	; (7df8 <xQueueCreateMutex+0x3c>)
    7de8:	4798      	blx	r3

		return pxNewQueue;
    7dea:	68fb      	ldr	r3, [r7, #12]
	}
    7dec:	0018      	movs	r0, r3
    7dee:	46bd      	mov	sp, r7
    7df0:	b006      	add	sp, #24
    7df2:	bd80      	pop	{r7, pc}
    7df4:	00007cc9 	.word	0x00007cc9
    7df8:	00007d85 	.word	0x00007d85

00007dfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    7dfc:	b580      	push	{r7, lr}
    7dfe:	b08a      	sub	sp, #40	; 0x28
    7e00:	af00      	add	r7, sp, #0
    7e02:	60f8      	str	r0, [r7, #12]
    7e04:	60b9      	str	r1, [r7, #8]
    7e06:	607a      	str	r2, [r7, #4]
    7e08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    7e0a:	2300      	movs	r3, #0
    7e0c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7e0e:	68fb      	ldr	r3, [r7, #12]
    7e10:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    7e12:	6a3b      	ldr	r3, [r7, #32]
    7e14:	2b00      	cmp	r3, #0
    7e16:	d101      	bne.n	7e1c <xQueueGenericSend+0x20>
    7e18:	b672      	cpsid	i
    7e1a:	e7fe      	b.n	7e1a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7e1c:	68bb      	ldr	r3, [r7, #8]
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d103      	bne.n	7e2a <xQueueGenericSend+0x2e>
    7e22:	6a3b      	ldr	r3, [r7, #32]
    7e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7e26:	2b00      	cmp	r3, #0
    7e28:	d101      	bne.n	7e2e <xQueueGenericSend+0x32>
    7e2a:	2301      	movs	r3, #1
    7e2c:	e000      	b.n	7e30 <xQueueGenericSend+0x34>
    7e2e:	2300      	movs	r3, #0
    7e30:	2b00      	cmp	r3, #0
    7e32:	d101      	bne.n	7e38 <xQueueGenericSend+0x3c>
    7e34:	b672      	cpsid	i
    7e36:	e7fe      	b.n	7e36 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	2b02      	cmp	r3, #2
    7e3c:	d103      	bne.n	7e46 <xQueueGenericSend+0x4a>
    7e3e:	6a3b      	ldr	r3, [r7, #32]
    7e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7e42:	2b01      	cmp	r3, #1
    7e44:	d101      	bne.n	7e4a <xQueueGenericSend+0x4e>
    7e46:	2301      	movs	r3, #1
    7e48:	e000      	b.n	7e4c <xQueueGenericSend+0x50>
    7e4a:	2300      	movs	r3, #0
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d101      	bne.n	7e54 <xQueueGenericSend+0x58>
    7e50:	b672      	cpsid	i
    7e52:	e7fe      	b.n	7e52 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    7e54:	4b53      	ldr	r3, [pc, #332]	; (7fa4 <xQueueGenericSend+0x1a8>)
    7e56:	4798      	blx	r3
    7e58:	1e03      	subs	r3, r0, #0
    7e5a:	d102      	bne.n	7e62 <xQueueGenericSend+0x66>
    7e5c:	687b      	ldr	r3, [r7, #4]
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d101      	bne.n	7e66 <xQueueGenericSend+0x6a>
    7e62:	2301      	movs	r3, #1
    7e64:	e000      	b.n	7e68 <xQueueGenericSend+0x6c>
    7e66:	2300      	movs	r3, #0
    7e68:	2b00      	cmp	r3, #0
    7e6a:	d101      	bne.n	7e70 <xQueueGenericSend+0x74>
    7e6c:	b672      	cpsid	i
    7e6e:	e7fe      	b.n	7e6e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    7e70:	4b4d      	ldr	r3, [pc, #308]	; (7fa8 <xQueueGenericSend+0x1ac>)
    7e72:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    7e74:	6a3b      	ldr	r3, [r7, #32]
    7e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7e78:	6a3b      	ldr	r3, [r7, #32]
    7e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7e7c:	429a      	cmp	r2, r3
    7e7e:	d302      	bcc.n	7e86 <xQueueGenericSend+0x8a>
    7e80:	683b      	ldr	r3, [r7, #0]
    7e82:	2b02      	cmp	r3, #2
    7e84:	d12d      	bne.n	7ee2 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    7e86:	683a      	ldr	r2, [r7, #0]
    7e88:	68b9      	ldr	r1, [r7, #8]
    7e8a:	6a3b      	ldr	r3, [r7, #32]
    7e8c:	0018      	movs	r0, r3
    7e8e:	4b47      	ldr	r3, [pc, #284]	; (7fac <xQueueGenericSend+0x1b0>)
    7e90:	4798      	blx	r3
    7e92:	0003      	movs	r3, r0
    7e94:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7e96:	6a3b      	ldr	r3, [r7, #32]
    7e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7e9a:	2b00      	cmp	r3, #0
    7e9c:	d00a      	beq.n	7eb4 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7e9e:	683a      	ldr	r2, [r7, #0]
    7ea0:	6a3b      	ldr	r3, [r7, #32]
    7ea2:	0011      	movs	r1, r2
    7ea4:	0018      	movs	r0, r3
    7ea6:	4b42      	ldr	r3, [pc, #264]	; (7fb0 <xQueueGenericSend+0x1b4>)
    7ea8:	4798      	blx	r3
    7eaa:	1e03      	subs	r3, r0, #0
    7eac:	d015      	beq.n	7eda <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    7eae:	4b41      	ldr	r3, [pc, #260]	; (7fb4 <xQueueGenericSend+0x1b8>)
    7eb0:	4798      	blx	r3
    7eb2:	e012      	b.n	7eda <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7eb4:	6a3b      	ldr	r3, [r7, #32]
    7eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7eb8:	2b00      	cmp	r3, #0
    7eba:	d009      	beq.n	7ed0 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7ebc:	6a3b      	ldr	r3, [r7, #32]
    7ebe:	3324      	adds	r3, #36	; 0x24
    7ec0:	0018      	movs	r0, r3
    7ec2:	4b3d      	ldr	r3, [pc, #244]	; (7fb8 <xQueueGenericSend+0x1bc>)
    7ec4:	4798      	blx	r3
    7ec6:	1e03      	subs	r3, r0, #0
    7ec8:	d007      	beq.n	7eda <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    7eca:	4b3a      	ldr	r3, [pc, #232]	; (7fb4 <xQueueGenericSend+0x1b8>)
    7ecc:	4798      	blx	r3
    7ece:	e004      	b.n	7eda <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    7ed0:	69fb      	ldr	r3, [r7, #28]
    7ed2:	2b00      	cmp	r3, #0
    7ed4:	d001      	beq.n	7eda <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    7ed6:	4b37      	ldr	r3, [pc, #220]	; (7fb4 <xQueueGenericSend+0x1b8>)
    7ed8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    7eda:	4b38      	ldr	r3, [pc, #224]	; (7fbc <xQueueGenericSend+0x1c0>)
    7edc:	4798      	blx	r3
				return pdPASS;
    7ede:	2301      	movs	r3, #1
    7ee0:	e05c      	b.n	7f9c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7ee2:	687b      	ldr	r3, [r7, #4]
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d103      	bne.n	7ef0 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7ee8:	4b34      	ldr	r3, [pc, #208]	; (7fbc <xQueueGenericSend+0x1c0>)
    7eea:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    7eec:	2300      	movs	r3, #0
    7eee:	e055      	b.n	7f9c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    7ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7ef2:	2b00      	cmp	r3, #0
    7ef4:	d106      	bne.n	7f04 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    7ef6:	2314      	movs	r3, #20
    7ef8:	18fb      	adds	r3, r7, r3
    7efa:	0018      	movs	r0, r3
    7efc:	4b30      	ldr	r3, [pc, #192]	; (7fc0 <xQueueGenericSend+0x1c4>)
    7efe:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7f00:	2301      	movs	r3, #1
    7f02:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7f04:	4b2d      	ldr	r3, [pc, #180]	; (7fbc <xQueueGenericSend+0x1c0>)
    7f06:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    7f08:	4b2e      	ldr	r3, [pc, #184]	; (7fc4 <xQueueGenericSend+0x1c8>)
    7f0a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7f0c:	4b26      	ldr	r3, [pc, #152]	; (7fa8 <xQueueGenericSend+0x1ac>)
    7f0e:	4798      	blx	r3
    7f10:	6a3b      	ldr	r3, [r7, #32]
    7f12:	2244      	movs	r2, #68	; 0x44
    7f14:	5c9b      	ldrb	r3, [r3, r2]
    7f16:	b25b      	sxtb	r3, r3
    7f18:	3301      	adds	r3, #1
    7f1a:	d103      	bne.n	7f24 <xQueueGenericSend+0x128>
    7f1c:	6a3b      	ldr	r3, [r7, #32]
    7f1e:	2244      	movs	r2, #68	; 0x44
    7f20:	2100      	movs	r1, #0
    7f22:	5499      	strb	r1, [r3, r2]
    7f24:	6a3b      	ldr	r3, [r7, #32]
    7f26:	2245      	movs	r2, #69	; 0x45
    7f28:	5c9b      	ldrb	r3, [r3, r2]
    7f2a:	b25b      	sxtb	r3, r3
    7f2c:	3301      	adds	r3, #1
    7f2e:	d103      	bne.n	7f38 <xQueueGenericSend+0x13c>
    7f30:	6a3b      	ldr	r3, [r7, #32]
    7f32:	2245      	movs	r2, #69	; 0x45
    7f34:	2100      	movs	r1, #0
    7f36:	5499      	strb	r1, [r3, r2]
    7f38:	4b20      	ldr	r3, [pc, #128]	; (7fbc <xQueueGenericSend+0x1c0>)
    7f3a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    7f3c:	1d3a      	adds	r2, r7, #4
    7f3e:	2314      	movs	r3, #20
    7f40:	18fb      	adds	r3, r7, r3
    7f42:	0011      	movs	r1, r2
    7f44:	0018      	movs	r0, r3
    7f46:	4b20      	ldr	r3, [pc, #128]	; (7fc8 <xQueueGenericSend+0x1cc>)
    7f48:	4798      	blx	r3
    7f4a:	1e03      	subs	r3, r0, #0
    7f4c:	d11f      	bne.n	7f8e <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    7f4e:	6a3b      	ldr	r3, [r7, #32]
    7f50:	0018      	movs	r0, r3
    7f52:	4b1e      	ldr	r3, [pc, #120]	; (7fcc <xQueueGenericSend+0x1d0>)
    7f54:	4798      	blx	r3
    7f56:	1e03      	subs	r3, r0, #0
    7f58:	d012      	beq.n	7f80 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    7f5a:	6a3b      	ldr	r3, [r7, #32]
    7f5c:	3310      	adds	r3, #16
    7f5e:	687a      	ldr	r2, [r7, #4]
    7f60:	0011      	movs	r1, r2
    7f62:	0018      	movs	r0, r3
    7f64:	4b1a      	ldr	r3, [pc, #104]	; (7fd0 <xQueueGenericSend+0x1d4>)
    7f66:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    7f68:	6a3b      	ldr	r3, [r7, #32]
    7f6a:	0018      	movs	r0, r3
    7f6c:	4b19      	ldr	r3, [pc, #100]	; (7fd4 <xQueueGenericSend+0x1d8>)
    7f6e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    7f70:	4b19      	ldr	r3, [pc, #100]	; (7fd8 <xQueueGenericSend+0x1dc>)
    7f72:	4798      	blx	r3
    7f74:	1e03      	subs	r3, r0, #0
    7f76:	d000      	beq.n	7f7a <xQueueGenericSend+0x17e>
    7f78:	e77a      	b.n	7e70 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    7f7a:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <xQueueGenericSend+0x1b8>)
    7f7c:	4798      	blx	r3
    7f7e:	e777      	b.n	7e70 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    7f80:	6a3b      	ldr	r3, [r7, #32]
    7f82:	0018      	movs	r0, r3
    7f84:	4b13      	ldr	r3, [pc, #76]	; (7fd4 <xQueueGenericSend+0x1d8>)
    7f86:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7f88:	4b13      	ldr	r3, [pc, #76]	; (7fd8 <xQueueGenericSend+0x1dc>)
    7f8a:	4798      	blx	r3
    7f8c:	e770      	b.n	7e70 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    7f8e:	6a3b      	ldr	r3, [r7, #32]
    7f90:	0018      	movs	r0, r3
    7f92:	4b10      	ldr	r3, [pc, #64]	; (7fd4 <xQueueGenericSend+0x1d8>)
    7f94:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7f96:	4b10      	ldr	r3, [pc, #64]	; (7fd8 <xQueueGenericSend+0x1dc>)
    7f98:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    7f9a:	2300      	movs	r3, #0
		}
	}
}
    7f9c:	0018      	movs	r0, r3
    7f9e:	46bd      	mov	sp, r7
    7fa0:	b00a      	add	sp, #40	; 0x28
    7fa2:	bd80      	pop	{r7, pc}
    7fa4:	00009315 	.word	0x00009315
    7fa8:	00007a49 	.word	0x00007a49
    7fac:	00008401 	.word	0x00008401
    7fb0:	00008705 	.word	0x00008705
    7fb4:	00007a29 	.word	0x00007a29
    7fb8:	00008fad 	.word	0x00008fad
    7fbc:	00007a6d 	.word	0x00007a6d
    7fc0:	0000906d 	.word	0x0000906d
    7fc4:	00008b71 	.word	0x00008b71
    7fc8:	000090a1 	.word	0x000090a1
    7fcc:	00008655 	.word	0x00008655
    7fd0:	00008f15 	.word	0x00008f15
    7fd4:	00008531 	.word	0x00008531
    7fd8:	00008b89 	.word	0x00008b89

00007fdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7fdc:	b580      	push	{r7, lr}
    7fde:	b088      	sub	sp, #32
    7fe0:	af00      	add	r7, sp, #0
    7fe2:	60f8      	str	r0, [r7, #12]
    7fe4:	60b9      	str	r1, [r7, #8]
    7fe6:	607a      	str	r2, [r7, #4]
    7fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7fea:	68fb      	ldr	r3, [r7, #12]
    7fec:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7fee:	69bb      	ldr	r3, [r7, #24]
    7ff0:	2b00      	cmp	r3, #0
    7ff2:	d101      	bne.n	7ff8 <xQueueGenericSendFromISR+0x1c>
    7ff4:	b672      	cpsid	i
    7ff6:	e7fe      	b.n	7ff6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7ff8:	68bb      	ldr	r3, [r7, #8]
    7ffa:	2b00      	cmp	r3, #0
    7ffc:	d103      	bne.n	8006 <xQueueGenericSendFromISR+0x2a>
    7ffe:	69bb      	ldr	r3, [r7, #24]
    8000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8002:	2b00      	cmp	r3, #0
    8004:	d101      	bne.n	800a <xQueueGenericSendFromISR+0x2e>
    8006:	2301      	movs	r3, #1
    8008:	e000      	b.n	800c <xQueueGenericSendFromISR+0x30>
    800a:	2300      	movs	r3, #0
    800c:	2b00      	cmp	r3, #0
    800e:	d101      	bne.n	8014 <xQueueGenericSendFromISR+0x38>
    8010:	b672      	cpsid	i
    8012:	e7fe      	b.n	8012 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    8014:	683b      	ldr	r3, [r7, #0]
    8016:	2b02      	cmp	r3, #2
    8018:	d103      	bne.n	8022 <xQueueGenericSendFromISR+0x46>
    801a:	69bb      	ldr	r3, [r7, #24]
    801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    801e:	2b01      	cmp	r3, #1
    8020:	d101      	bne.n	8026 <xQueueGenericSendFromISR+0x4a>
    8022:	2301      	movs	r3, #1
    8024:	e000      	b.n	8028 <xQueueGenericSendFromISR+0x4c>
    8026:	2300      	movs	r3, #0
    8028:	2b00      	cmp	r3, #0
    802a:	d101      	bne.n	8030 <xQueueGenericSendFromISR+0x54>
    802c:	b672      	cpsid	i
    802e:	e7fe      	b.n	802e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    8030:	4b2d      	ldr	r3, [pc, #180]	; (80e8 <xQueueGenericSendFromISR+0x10c>)
    8032:	4798      	blx	r3
    8034:	0003      	movs	r3, r0
    8036:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    8038:	69bb      	ldr	r3, [r7, #24]
    803a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    803c:	69bb      	ldr	r3, [r7, #24]
    803e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8040:	429a      	cmp	r2, r3
    8042:	d302      	bcc.n	804a <xQueueGenericSendFromISR+0x6e>
    8044:	683b      	ldr	r3, [r7, #0]
    8046:	2b02      	cmp	r3, #2
    8048:	d142      	bne.n	80d0 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    804a:	2313      	movs	r3, #19
    804c:	18fb      	adds	r3, r7, r3
    804e:	69ba      	ldr	r2, [r7, #24]
    8050:	2145      	movs	r1, #69	; 0x45
    8052:	5c52      	ldrb	r2, [r2, r1]
    8054:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    8056:	683a      	ldr	r2, [r7, #0]
    8058:	68b9      	ldr	r1, [r7, #8]
    805a:	69bb      	ldr	r3, [r7, #24]
    805c:	0018      	movs	r0, r3
    805e:	4b23      	ldr	r3, [pc, #140]	; (80ec <xQueueGenericSendFromISR+0x110>)
    8060:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    8062:	2313      	movs	r3, #19
    8064:	18fb      	adds	r3, r7, r3
    8066:	781b      	ldrb	r3, [r3, #0]
    8068:	b25b      	sxtb	r3, r3
    806a:	3301      	adds	r3, #1
    806c:	d124      	bne.n	80b8 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    806e:	69bb      	ldr	r3, [r7, #24]
    8070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8072:	2b00      	cmp	r3, #0
    8074:	d00e      	beq.n	8094 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    8076:	683a      	ldr	r2, [r7, #0]
    8078:	69bb      	ldr	r3, [r7, #24]
    807a:	0011      	movs	r1, r2
    807c:	0018      	movs	r0, r3
    807e:	4b1c      	ldr	r3, [pc, #112]	; (80f0 <xQueueGenericSendFromISR+0x114>)
    8080:	4798      	blx	r3
    8082:	1e03      	subs	r3, r0, #0
    8084:	d021      	beq.n	80ca <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    8086:	687b      	ldr	r3, [r7, #4]
    8088:	2b00      	cmp	r3, #0
    808a:	d01e      	beq.n	80ca <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    808c:	687b      	ldr	r3, [r7, #4]
    808e:	2201      	movs	r2, #1
    8090:	601a      	str	r2, [r3, #0]
    8092:	e01a      	b.n	80ca <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8094:	69bb      	ldr	r3, [r7, #24]
    8096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8098:	2b00      	cmp	r3, #0
    809a:	d016      	beq.n	80ca <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    809c:	69bb      	ldr	r3, [r7, #24]
    809e:	3324      	adds	r3, #36	; 0x24
    80a0:	0018      	movs	r0, r3
    80a2:	4b14      	ldr	r3, [pc, #80]	; (80f4 <xQueueGenericSendFromISR+0x118>)
    80a4:	4798      	blx	r3
    80a6:	1e03      	subs	r3, r0, #0
    80a8:	d00f      	beq.n	80ca <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    80aa:	687b      	ldr	r3, [r7, #4]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d00c      	beq.n	80ca <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	2201      	movs	r2, #1
    80b4:	601a      	str	r2, [r3, #0]
    80b6:	e008      	b.n	80ca <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    80b8:	2313      	movs	r3, #19
    80ba:	18fb      	adds	r3, r7, r3
    80bc:	781b      	ldrb	r3, [r3, #0]
    80be:	3301      	adds	r3, #1
    80c0:	b2db      	uxtb	r3, r3
    80c2:	b259      	sxtb	r1, r3
    80c4:	69bb      	ldr	r3, [r7, #24]
    80c6:	2245      	movs	r2, #69	; 0x45
    80c8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    80ca:	2301      	movs	r3, #1
    80cc:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    80ce:	e001      	b.n	80d4 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    80d0:	2300      	movs	r3, #0
    80d2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    80d4:	697b      	ldr	r3, [r7, #20]
    80d6:	0018      	movs	r0, r3
    80d8:	4b07      	ldr	r3, [pc, #28]	; (80f8 <xQueueGenericSendFromISR+0x11c>)
    80da:	4798      	blx	r3

	return xReturn;
    80dc:	69fb      	ldr	r3, [r7, #28]
}
    80de:	0018      	movs	r0, r3
    80e0:	46bd      	mov	sp, r7
    80e2:	b008      	add	sp, #32
    80e4:	bd80      	pop	{r7, pc}
    80e6:	46c0      	nop			; (mov r8, r8)
    80e8:	00007a9d 	.word	0x00007a9d
    80ec:	00008401 	.word	0x00008401
    80f0:	00008705 	.word	0x00008705
    80f4:	00008fad 	.word	0x00008fad
    80f8:	00007aa9 	.word	0x00007aa9

000080fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    80fc:	b580      	push	{r7, lr}
    80fe:	b088      	sub	sp, #32
    8100:	af00      	add	r7, sp, #0
    8102:	6078      	str	r0, [r7, #4]
    8104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8106:	687b      	ldr	r3, [r7, #4]
    8108:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    810a:	69bb      	ldr	r3, [r7, #24]
    810c:	2b00      	cmp	r3, #0
    810e:	d101      	bne.n	8114 <xQueueGiveFromISR+0x18>
    8110:	b672      	cpsid	i
    8112:	e7fe      	b.n	8112 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    8114:	69bb      	ldr	r3, [r7, #24]
    8116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8118:	2b00      	cmp	r3, #0
    811a:	d001      	beq.n	8120 <xQueueGiveFromISR+0x24>
    811c:	b672      	cpsid	i
    811e:	e7fe      	b.n	811e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    8120:	69bb      	ldr	r3, [r7, #24]
    8122:	681b      	ldr	r3, [r3, #0]
    8124:	2b00      	cmp	r3, #0
    8126:	d103      	bne.n	8130 <xQueueGiveFromISR+0x34>
    8128:	69bb      	ldr	r3, [r7, #24]
    812a:	685b      	ldr	r3, [r3, #4]
    812c:	2b00      	cmp	r3, #0
    812e:	d101      	bne.n	8134 <xQueueGiveFromISR+0x38>
    8130:	2301      	movs	r3, #1
    8132:	e000      	b.n	8136 <xQueueGiveFromISR+0x3a>
    8134:	2300      	movs	r3, #0
    8136:	2b00      	cmp	r3, #0
    8138:	d101      	bne.n	813e <xQueueGiveFromISR+0x42>
    813a:	b672      	cpsid	i
    813c:	e7fe      	b.n	813c <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    813e:	4b2b      	ldr	r3, [pc, #172]	; (81ec <xQueueGiveFromISR+0xf0>)
    8140:	4798      	blx	r3
    8142:	0003      	movs	r3, r0
    8144:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8146:	69bb      	ldr	r3, [r7, #24]
    8148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    814a:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    814c:	69bb      	ldr	r3, [r7, #24]
    814e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8150:	693b      	ldr	r3, [r7, #16]
    8152:	429a      	cmp	r2, r3
    8154:	d93f      	bls.n	81d6 <xQueueGiveFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    8156:	230f      	movs	r3, #15
    8158:	18fb      	adds	r3, r7, r3
    815a:	69ba      	ldr	r2, [r7, #24]
    815c:	2145      	movs	r1, #69	; 0x45
    815e:	5c52      	ldrb	r2, [r2, r1]
    8160:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    8162:	693b      	ldr	r3, [r7, #16]
    8164:	1c5a      	adds	r2, r3, #1
    8166:	69bb      	ldr	r3, [r7, #24]
    8168:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    816a:	230f      	movs	r3, #15
    816c:	18fb      	adds	r3, r7, r3
    816e:	781b      	ldrb	r3, [r3, #0]
    8170:	b25b      	sxtb	r3, r3
    8172:	3301      	adds	r3, #1
    8174:	d123      	bne.n	81be <xQueueGiveFromISR+0xc2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    8176:	69bb      	ldr	r3, [r7, #24]
    8178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    817a:	2b00      	cmp	r3, #0
    817c:	d00d      	beq.n	819a <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    817e:	69bb      	ldr	r3, [r7, #24]
    8180:	2100      	movs	r1, #0
    8182:	0018      	movs	r0, r3
    8184:	4b1a      	ldr	r3, [pc, #104]	; (81f0 <xQueueGiveFromISR+0xf4>)
    8186:	4798      	blx	r3
    8188:	1e03      	subs	r3, r0, #0
    818a:	d021      	beq.n	81d0 <xQueueGiveFromISR+0xd4>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    818c:	683b      	ldr	r3, [r7, #0]
    818e:	2b00      	cmp	r3, #0
    8190:	d01e      	beq.n	81d0 <xQueueGiveFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    8192:	683b      	ldr	r3, [r7, #0]
    8194:	2201      	movs	r2, #1
    8196:	601a      	str	r2, [r3, #0]
    8198:	e01a      	b.n	81d0 <xQueueGiveFromISR+0xd4>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    819a:	69bb      	ldr	r3, [r7, #24]
    819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    819e:	2b00      	cmp	r3, #0
    81a0:	d016      	beq.n	81d0 <xQueueGiveFromISR+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    81a2:	69bb      	ldr	r3, [r7, #24]
    81a4:	3324      	adds	r3, #36	; 0x24
    81a6:	0018      	movs	r0, r3
    81a8:	4b12      	ldr	r3, [pc, #72]	; (81f4 <xQueueGiveFromISR+0xf8>)
    81aa:	4798      	blx	r3
    81ac:	1e03      	subs	r3, r0, #0
    81ae:	d00f      	beq.n	81d0 <xQueueGiveFromISR+0xd4>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    81b0:	683b      	ldr	r3, [r7, #0]
    81b2:	2b00      	cmp	r3, #0
    81b4:	d00c      	beq.n	81d0 <xQueueGiveFromISR+0xd4>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    81b6:	683b      	ldr	r3, [r7, #0]
    81b8:	2201      	movs	r2, #1
    81ba:	601a      	str	r2, [r3, #0]
    81bc:	e008      	b.n	81d0 <xQueueGiveFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    81be:	230f      	movs	r3, #15
    81c0:	18fb      	adds	r3, r7, r3
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	3301      	adds	r3, #1
    81c6:	b2db      	uxtb	r3, r3
    81c8:	b259      	sxtb	r1, r3
    81ca:	69bb      	ldr	r3, [r7, #24]
    81cc:	2245      	movs	r2, #69	; 0x45
    81ce:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    81d0:	2301      	movs	r3, #1
    81d2:	61fb      	str	r3, [r7, #28]
    81d4:	e001      	b.n	81da <xQueueGiveFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    81d6:	2300      	movs	r3, #0
    81d8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    81da:	697b      	ldr	r3, [r7, #20]
    81dc:	0018      	movs	r0, r3
    81de:	4b06      	ldr	r3, [pc, #24]	; (81f8 <xQueueGiveFromISR+0xfc>)
    81e0:	4798      	blx	r3

	return xReturn;
    81e2:	69fb      	ldr	r3, [r7, #28]
}
    81e4:	0018      	movs	r0, r3
    81e6:	46bd      	mov	sp, r7
    81e8:	b008      	add	sp, #32
    81ea:	bd80      	pop	{r7, pc}
    81ec:	00007a9d 	.word	0x00007a9d
    81f0:	00008705 	.word	0x00008705
    81f4:	00008fad 	.word	0x00008fad
    81f8:	00007aa9 	.word	0x00007aa9

000081fc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    81fc:	b580      	push	{r7, lr}
    81fe:	b08a      	sub	sp, #40	; 0x28
    8200:	af00      	add	r7, sp, #0
    8202:	60f8      	str	r0, [r7, #12]
    8204:	60b9      	str	r1, [r7, #8]
    8206:	607a      	str	r2, [r7, #4]
    8208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    820a:	2300      	movs	r3, #0
    820c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    820e:	68fb      	ldr	r3, [r7, #12]
    8210:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    8212:	6a3b      	ldr	r3, [r7, #32]
    8214:	2b00      	cmp	r3, #0
    8216:	d101      	bne.n	821c <xQueueGenericReceive+0x20>
    8218:	b672      	cpsid	i
    821a:	e7fe      	b.n	821a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    821c:	68bb      	ldr	r3, [r7, #8]
    821e:	2b00      	cmp	r3, #0
    8220:	d103      	bne.n	822a <xQueueGenericReceive+0x2e>
    8222:	6a3b      	ldr	r3, [r7, #32]
    8224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8226:	2b00      	cmp	r3, #0
    8228:	d101      	bne.n	822e <xQueueGenericReceive+0x32>
    822a:	2301      	movs	r3, #1
    822c:	e000      	b.n	8230 <xQueueGenericReceive+0x34>
    822e:	2300      	movs	r3, #0
    8230:	2b00      	cmp	r3, #0
    8232:	d101      	bne.n	8238 <xQueueGenericReceive+0x3c>
    8234:	b672      	cpsid	i
    8236:	e7fe      	b.n	8236 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8238:	4b62      	ldr	r3, [pc, #392]	; (83c4 <xQueueGenericReceive+0x1c8>)
    823a:	4798      	blx	r3
    823c:	1e03      	subs	r3, r0, #0
    823e:	d102      	bne.n	8246 <xQueueGenericReceive+0x4a>
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	2b00      	cmp	r3, #0
    8244:	d101      	bne.n	824a <xQueueGenericReceive+0x4e>
    8246:	2301      	movs	r3, #1
    8248:	e000      	b.n	824c <xQueueGenericReceive+0x50>
    824a:	2300      	movs	r3, #0
    824c:	2b00      	cmp	r3, #0
    824e:	d101      	bne.n	8254 <xQueueGenericReceive+0x58>
    8250:	b672      	cpsid	i
    8252:	e7fe      	b.n	8252 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    8254:	4b5c      	ldr	r3, [pc, #368]	; (83c8 <xQueueGenericReceive+0x1cc>)
    8256:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8258:	6a3b      	ldr	r3, [r7, #32]
    825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    825c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    825e:	69fb      	ldr	r3, [r7, #28]
    8260:	2b00      	cmp	r3, #0
    8262:	d03a      	beq.n	82da <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    8264:	6a3b      	ldr	r3, [r7, #32]
    8266:	68db      	ldr	r3, [r3, #12]
    8268:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    826a:	68ba      	ldr	r2, [r7, #8]
    826c:	6a3b      	ldr	r3, [r7, #32]
    826e:	0011      	movs	r1, r2
    8270:	0018      	movs	r0, r3
    8272:	4b56      	ldr	r3, [pc, #344]	; (83cc <xQueueGenericReceive+0x1d0>)
    8274:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    8276:	683b      	ldr	r3, [r7, #0]
    8278:	2b00      	cmp	r3, #0
    827a:	d11a      	bne.n	82b2 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    827c:	69fb      	ldr	r3, [r7, #28]
    827e:	1e5a      	subs	r2, r3, #1
    8280:	6a3b      	ldr	r3, [r7, #32]
    8282:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8284:	6a3b      	ldr	r3, [r7, #32]
    8286:	681b      	ldr	r3, [r3, #0]
    8288:	2b00      	cmp	r3, #0
    828a:	d104      	bne.n	8296 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    828c:	4b50      	ldr	r3, [pc, #320]	; (83d0 <xQueueGenericReceive+0x1d4>)
    828e:	4798      	blx	r3
    8290:	0002      	movs	r2, r0
    8292:	6a3b      	ldr	r3, [r7, #32]
    8294:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    8296:	6a3b      	ldr	r3, [r7, #32]
    8298:	691b      	ldr	r3, [r3, #16]
    829a:	2b00      	cmp	r3, #0
    829c:	d019      	beq.n	82d2 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    829e:	6a3b      	ldr	r3, [r7, #32]
    82a0:	3310      	adds	r3, #16
    82a2:	0018      	movs	r0, r3
    82a4:	4b4b      	ldr	r3, [pc, #300]	; (83d4 <xQueueGenericReceive+0x1d8>)
    82a6:	4798      	blx	r3
    82a8:	1e03      	subs	r3, r0, #0
    82aa:	d012      	beq.n	82d2 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    82ac:	4b4a      	ldr	r3, [pc, #296]	; (83d8 <xQueueGenericReceive+0x1dc>)
    82ae:	4798      	blx	r3
    82b0:	e00f      	b.n	82d2 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    82b2:	6a3b      	ldr	r3, [r7, #32]
    82b4:	69ba      	ldr	r2, [r7, #24]
    82b6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    82b8:	6a3b      	ldr	r3, [r7, #32]
    82ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    82bc:	2b00      	cmp	r3, #0
    82be:	d008      	beq.n	82d2 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    82c0:	6a3b      	ldr	r3, [r7, #32]
    82c2:	3324      	adds	r3, #36	; 0x24
    82c4:	0018      	movs	r0, r3
    82c6:	4b43      	ldr	r3, [pc, #268]	; (83d4 <xQueueGenericReceive+0x1d8>)
    82c8:	4798      	blx	r3
    82ca:	1e03      	subs	r3, r0, #0
    82cc:	d001      	beq.n	82d2 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    82ce:	4b42      	ldr	r3, [pc, #264]	; (83d8 <xQueueGenericReceive+0x1dc>)
    82d0:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    82d2:	4b42      	ldr	r3, [pc, #264]	; (83dc <xQueueGenericReceive+0x1e0>)
    82d4:	4798      	blx	r3
				return pdPASS;
    82d6:	2301      	movs	r3, #1
    82d8:	e070      	b.n	83bc <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    82da:	687b      	ldr	r3, [r7, #4]
    82dc:	2b00      	cmp	r3, #0
    82de:	d103      	bne.n	82e8 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    82e0:	4b3e      	ldr	r3, [pc, #248]	; (83dc <xQueueGenericReceive+0x1e0>)
    82e2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    82e4:	2300      	movs	r3, #0
    82e6:	e069      	b.n	83bc <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    82e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    82ea:	2b00      	cmp	r3, #0
    82ec:	d106      	bne.n	82fc <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    82ee:	2310      	movs	r3, #16
    82f0:	18fb      	adds	r3, r7, r3
    82f2:	0018      	movs	r0, r3
    82f4:	4b3a      	ldr	r3, [pc, #232]	; (83e0 <xQueueGenericReceive+0x1e4>)
    82f6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    82f8:	2301      	movs	r3, #1
    82fa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    82fc:	4b37      	ldr	r3, [pc, #220]	; (83dc <xQueueGenericReceive+0x1e0>)
    82fe:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    8300:	4b38      	ldr	r3, [pc, #224]	; (83e4 <xQueueGenericReceive+0x1e8>)
    8302:	4798      	blx	r3
		prvLockQueue( pxQueue );
    8304:	4b30      	ldr	r3, [pc, #192]	; (83c8 <xQueueGenericReceive+0x1cc>)
    8306:	4798      	blx	r3
    8308:	6a3b      	ldr	r3, [r7, #32]
    830a:	2244      	movs	r2, #68	; 0x44
    830c:	5c9b      	ldrb	r3, [r3, r2]
    830e:	b25b      	sxtb	r3, r3
    8310:	3301      	adds	r3, #1
    8312:	d103      	bne.n	831c <xQueueGenericReceive+0x120>
    8314:	6a3b      	ldr	r3, [r7, #32]
    8316:	2244      	movs	r2, #68	; 0x44
    8318:	2100      	movs	r1, #0
    831a:	5499      	strb	r1, [r3, r2]
    831c:	6a3b      	ldr	r3, [r7, #32]
    831e:	2245      	movs	r2, #69	; 0x45
    8320:	5c9b      	ldrb	r3, [r3, r2]
    8322:	b25b      	sxtb	r3, r3
    8324:	3301      	adds	r3, #1
    8326:	d103      	bne.n	8330 <xQueueGenericReceive+0x134>
    8328:	6a3b      	ldr	r3, [r7, #32]
    832a:	2245      	movs	r2, #69	; 0x45
    832c:	2100      	movs	r1, #0
    832e:	5499      	strb	r1, [r3, r2]
    8330:	4b2a      	ldr	r3, [pc, #168]	; (83dc <xQueueGenericReceive+0x1e0>)
    8332:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    8334:	1d3a      	adds	r2, r7, #4
    8336:	2310      	movs	r3, #16
    8338:	18fb      	adds	r3, r7, r3
    833a:	0011      	movs	r1, r2
    833c:	0018      	movs	r0, r3
    833e:	4b2a      	ldr	r3, [pc, #168]	; (83e8 <xQueueGenericReceive+0x1ec>)
    8340:	4798      	blx	r3
    8342:	1e03      	subs	r3, r0, #0
    8344:	d12c      	bne.n	83a0 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8346:	6a3b      	ldr	r3, [r7, #32]
    8348:	0018      	movs	r0, r3
    834a:	4b28      	ldr	r3, [pc, #160]	; (83ec <xQueueGenericReceive+0x1f0>)
    834c:	4798      	blx	r3
    834e:	1e03      	subs	r3, r0, #0
    8350:	d01f      	beq.n	8392 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8352:	6a3b      	ldr	r3, [r7, #32]
    8354:	681b      	ldr	r3, [r3, #0]
    8356:	2b00      	cmp	r3, #0
    8358:	d108      	bne.n	836c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    835a:	4b1b      	ldr	r3, [pc, #108]	; (83c8 <xQueueGenericReceive+0x1cc>)
    835c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    835e:	6a3b      	ldr	r3, [r7, #32]
    8360:	685b      	ldr	r3, [r3, #4]
    8362:	0018      	movs	r0, r3
    8364:	4b22      	ldr	r3, [pc, #136]	; (83f0 <xQueueGenericReceive+0x1f4>)
    8366:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    8368:	4b1c      	ldr	r3, [pc, #112]	; (83dc <xQueueGenericReceive+0x1e0>)
    836a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    836c:	6a3b      	ldr	r3, [r7, #32]
    836e:	3324      	adds	r3, #36	; 0x24
    8370:	687a      	ldr	r2, [r7, #4]
    8372:	0011      	movs	r1, r2
    8374:	0018      	movs	r0, r3
    8376:	4b1f      	ldr	r3, [pc, #124]	; (83f4 <xQueueGenericReceive+0x1f8>)
    8378:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    837a:	6a3b      	ldr	r3, [r7, #32]
    837c:	0018      	movs	r0, r3
    837e:	4b1e      	ldr	r3, [pc, #120]	; (83f8 <xQueueGenericReceive+0x1fc>)
    8380:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8382:	4b1e      	ldr	r3, [pc, #120]	; (83fc <xQueueGenericReceive+0x200>)
    8384:	4798      	blx	r3
    8386:	1e03      	subs	r3, r0, #0
    8388:	d000      	beq.n	838c <xQueueGenericReceive+0x190>
    838a:	e763      	b.n	8254 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    838c:	4b12      	ldr	r3, [pc, #72]	; (83d8 <xQueueGenericReceive+0x1dc>)
    838e:	4798      	blx	r3
    8390:	e760      	b.n	8254 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    8392:	6a3b      	ldr	r3, [r7, #32]
    8394:	0018      	movs	r0, r3
    8396:	4b18      	ldr	r3, [pc, #96]	; (83f8 <xQueueGenericReceive+0x1fc>)
    8398:	4798      	blx	r3
				( void ) xTaskResumeAll();
    839a:	4b18      	ldr	r3, [pc, #96]	; (83fc <xQueueGenericReceive+0x200>)
    839c:	4798      	blx	r3
    839e:	e759      	b.n	8254 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    83a0:	6a3b      	ldr	r3, [r7, #32]
    83a2:	0018      	movs	r0, r3
    83a4:	4b14      	ldr	r3, [pc, #80]	; (83f8 <xQueueGenericReceive+0x1fc>)
    83a6:	4798      	blx	r3
			( void ) xTaskResumeAll();
    83a8:	4b14      	ldr	r3, [pc, #80]	; (83fc <xQueueGenericReceive+0x200>)
    83aa:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    83ac:	6a3b      	ldr	r3, [r7, #32]
    83ae:	0018      	movs	r0, r3
    83b0:	4b0e      	ldr	r3, [pc, #56]	; (83ec <xQueueGenericReceive+0x1f0>)
    83b2:	4798      	blx	r3
    83b4:	1e03      	subs	r3, r0, #0
    83b6:	d100      	bne.n	83ba <xQueueGenericReceive+0x1be>
    83b8:	e74c      	b.n	8254 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    83ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    83bc:	0018      	movs	r0, r3
    83be:	46bd      	mov	sp, r7
    83c0:	b00a      	add	sp, #40	; 0x28
    83c2:	bd80      	pop	{r7, pc}
    83c4:	00009315 	.word	0x00009315
    83c8:	00007a49 	.word	0x00007a49
    83cc:	000084e1 	.word	0x000084e1
    83d0:	000094d1 	.word	0x000094d1
    83d4:	00008fad 	.word	0x00008fad
    83d8:	00007a29 	.word	0x00007a29
    83dc:	00007a6d 	.word	0x00007a6d
    83e0:	0000906d 	.word	0x0000906d
    83e4:	00008b71 	.word	0x00008b71
    83e8:	000090a1 	.word	0x000090a1
    83ec:	00008621 	.word	0x00008621
    83f0:	0000934d 	.word	0x0000934d
    83f4:	00008f15 	.word	0x00008f15
    83f8:	00008531 	.word	0x00008531
    83fc:	00008b89 	.word	0x00008b89

00008400 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    8400:	b580      	push	{r7, lr}
    8402:	b086      	sub	sp, #24
    8404:	af00      	add	r7, sp, #0
    8406:	60f8      	str	r0, [r7, #12]
    8408:	60b9      	str	r1, [r7, #8]
    840a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    840c:	2300      	movs	r3, #0
    840e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8410:	68fb      	ldr	r3, [r7, #12]
    8412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8414:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    8416:	68fb      	ldr	r3, [r7, #12]
    8418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    841a:	2b00      	cmp	r3, #0
    841c:	d10e      	bne.n	843c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    841e:	68fb      	ldr	r3, [r7, #12]
    8420:	681b      	ldr	r3, [r3, #0]
    8422:	2b00      	cmp	r3, #0
    8424:	d14e      	bne.n	84c4 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    8426:	68fb      	ldr	r3, [r7, #12]
    8428:	685b      	ldr	r3, [r3, #4]
    842a:	0018      	movs	r0, r3
    842c:	4b2a      	ldr	r3, [pc, #168]	; (84d8 <prvCopyDataToQueue+0xd8>)
    842e:	4798      	blx	r3
    8430:	0003      	movs	r3, r0
    8432:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    8434:	68fb      	ldr	r3, [r7, #12]
    8436:	2200      	movs	r2, #0
    8438:	605a      	str	r2, [r3, #4]
    843a:	e043      	b.n	84c4 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    843c:	687b      	ldr	r3, [r7, #4]
    843e:	2b00      	cmp	r3, #0
    8440:	d119      	bne.n	8476 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    8442:	68fb      	ldr	r3, [r7, #12]
    8444:	6898      	ldr	r0, [r3, #8]
    8446:	68fb      	ldr	r3, [r7, #12]
    8448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    844a:	68bb      	ldr	r3, [r7, #8]
    844c:	0019      	movs	r1, r3
    844e:	4b23      	ldr	r3, [pc, #140]	; (84dc <prvCopyDataToQueue+0xdc>)
    8450:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    8452:	68fb      	ldr	r3, [r7, #12]
    8454:	689a      	ldr	r2, [r3, #8]
    8456:	68fb      	ldr	r3, [r7, #12]
    8458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    845a:	18d2      	adds	r2, r2, r3
    845c:	68fb      	ldr	r3, [r7, #12]
    845e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    8460:	68fb      	ldr	r3, [r7, #12]
    8462:	689a      	ldr	r2, [r3, #8]
    8464:	68fb      	ldr	r3, [r7, #12]
    8466:	685b      	ldr	r3, [r3, #4]
    8468:	429a      	cmp	r2, r3
    846a:	d32b      	bcc.n	84c4 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    846c:	68fb      	ldr	r3, [r7, #12]
    846e:	681a      	ldr	r2, [r3, #0]
    8470:	68fb      	ldr	r3, [r7, #12]
    8472:	609a      	str	r2, [r3, #8]
    8474:	e026      	b.n	84c4 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8476:	68fb      	ldr	r3, [r7, #12]
    8478:	68d8      	ldr	r0, [r3, #12]
    847a:	68fb      	ldr	r3, [r7, #12]
    847c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    847e:	68bb      	ldr	r3, [r7, #8]
    8480:	0019      	movs	r1, r3
    8482:	4b16      	ldr	r3, [pc, #88]	; (84dc <prvCopyDataToQueue+0xdc>)
    8484:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    8486:	68fb      	ldr	r3, [r7, #12]
    8488:	68da      	ldr	r2, [r3, #12]
    848a:	68fb      	ldr	r3, [r7, #12]
    848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    848e:	425b      	negs	r3, r3
    8490:	18d2      	adds	r2, r2, r3
    8492:	68fb      	ldr	r3, [r7, #12]
    8494:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    8496:	68fb      	ldr	r3, [r7, #12]
    8498:	68da      	ldr	r2, [r3, #12]
    849a:	68fb      	ldr	r3, [r7, #12]
    849c:	681b      	ldr	r3, [r3, #0]
    849e:	429a      	cmp	r2, r3
    84a0:	d207      	bcs.n	84b2 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    84a2:	68fb      	ldr	r3, [r7, #12]
    84a4:	685a      	ldr	r2, [r3, #4]
    84a6:	68fb      	ldr	r3, [r7, #12]
    84a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84aa:	425b      	negs	r3, r3
    84ac:	18d2      	adds	r2, r2, r3
    84ae:	68fb      	ldr	r3, [r7, #12]
    84b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	2b02      	cmp	r3, #2
    84b6:	d105      	bne.n	84c4 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    84b8:	693b      	ldr	r3, [r7, #16]
    84ba:	2b00      	cmp	r3, #0
    84bc:	d002      	beq.n	84c4 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    84be:	693b      	ldr	r3, [r7, #16]
    84c0:	3b01      	subs	r3, #1
    84c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    84c4:	693b      	ldr	r3, [r7, #16]
    84c6:	1c5a      	adds	r2, r3, #1
    84c8:	68fb      	ldr	r3, [r7, #12]
    84ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    84cc:	697b      	ldr	r3, [r7, #20]
}
    84ce:	0018      	movs	r0, r3
    84d0:	46bd      	mov	sp, r7
    84d2:	b006      	add	sp, #24
    84d4:	bd80      	pop	{r7, pc}
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	00009411 	.word	0x00009411
    84dc:	0000b5e9 	.word	0x0000b5e9

000084e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    84e0:	b580      	push	{r7, lr}
    84e2:	b082      	sub	sp, #8
    84e4:	af00      	add	r7, sp, #0
    84e6:	6078      	str	r0, [r7, #4]
    84e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    84ea:	687b      	ldr	r3, [r7, #4]
    84ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84ee:	2b00      	cmp	r3, #0
    84f0:	d018      	beq.n	8524 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    84f2:	687b      	ldr	r3, [r7, #4]
    84f4:	68da      	ldr	r2, [r3, #12]
    84f6:	687b      	ldr	r3, [r7, #4]
    84f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    84fa:	18d2      	adds	r2, r2, r3
    84fc:	687b      	ldr	r3, [r7, #4]
    84fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    8500:	687b      	ldr	r3, [r7, #4]
    8502:	68da      	ldr	r2, [r3, #12]
    8504:	687b      	ldr	r3, [r7, #4]
    8506:	685b      	ldr	r3, [r3, #4]
    8508:	429a      	cmp	r2, r3
    850a:	d303      	bcc.n	8514 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    850c:	687b      	ldr	r3, [r7, #4]
    850e:	681a      	ldr	r2, [r3, #0]
    8510:	687b      	ldr	r3, [r7, #4]
    8512:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    8514:	687b      	ldr	r3, [r7, #4]
    8516:	68d9      	ldr	r1, [r3, #12]
    8518:	687b      	ldr	r3, [r7, #4]
    851a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    851c:	683b      	ldr	r3, [r7, #0]
    851e:	0018      	movs	r0, r3
    8520:	4b02      	ldr	r3, [pc, #8]	; (852c <prvCopyDataFromQueue+0x4c>)
    8522:	4798      	blx	r3
	}
}
    8524:	46c0      	nop			; (mov r8, r8)
    8526:	46bd      	mov	sp, r7
    8528:	b002      	add	sp, #8
    852a:	bd80      	pop	{r7, pc}
    852c:	0000b5e9 	.word	0x0000b5e9

00008530 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    8530:	b580      	push	{r7, lr}
    8532:	b084      	sub	sp, #16
    8534:	af00      	add	r7, sp, #0
    8536:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    8538:	4b34      	ldr	r3, [pc, #208]	; (860c <prvUnlockQueue+0xdc>)
    853a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    853c:	230f      	movs	r3, #15
    853e:	18fb      	adds	r3, r7, r3
    8540:	687a      	ldr	r2, [r7, #4]
    8542:	2145      	movs	r1, #69	; 0x45
    8544:	5c52      	ldrb	r2, [r2, r1]
    8546:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8548:	e022      	b.n	8590 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    854a:	687b      	ldr	r3, [r7, #4]
    854c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    854e:	2b00      	cmp	r3, #0
    8550:	d009      	beq.n	8566 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	2100      	movs	r1, #0
    8556:	0018      	movs	r0, r3
    8558:	4b2d      	ldr	r3, [pc, #180]	; (8610 <prvUnlockQueue+0xe0>)
    855a:	4798      	blx	r3
    855c:	1e03      	subs	r3, r0, #0
    855e:	d00f      	beq.n	8580 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    8560:	4b2c      	ldr	r3, [pc, #176]	; (8614 <prvUnlockQueue+0xe4>)
    8562:	4798      	blx	r3
    8564:	e00c      	b.n	8580 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8566:	687b      	ldr	r3, [r7, #4]
    8568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    856a:	2b00      	cmp	r3, #0
    856c:	d017      	beq.n	859e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    856e:	687b      	ldr	r3, [r7, #4]
    8570:	3324      	adds	r3, #36	; 0x24
    8572:	0018      	movs	r0, r3
    8574:	4b28      	ldr	r3, [pc, #160]	; (8618 <prvUnlockQueue+0xe8>)
    8576:	4798      	blx	r3
    8578:	1e03      	subs	r3, r0, #0
    857a:	d001      	beq.n	8580 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    857c:	4b25      	ldr	r3, [pc, #148]	; (8614 <prvUnlockQueue+0xe4>)
    857e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    8580:	230f      	movs	r3, #15
    8582:	18fb      	adds	r3, r7, r3
    8584:	781b      	ldrb	r3, [r3, #0]
    8586:	3b01      	subs	r3, #1
    8588:	b2da      	uxtb	r2, r3
    858a:	230f      	movs	r3, #15
    858c:	18fb      	adds	r3, r7, r3
    858e:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8590:	230f      	movs	r3, #15
    8592:	18fb      	adds	r3, r7, r3
    8594:	781b      	ldrb	r3, [r3, #0]
    8596:	b25b      	sxtb	r3, r3
    8598:	2b00      	cmp	r3, #0
    859a:	dcd6      	bgt.n	854a <prvUnlockQueue+0x1a>
    859c:	e000      	b.n	85a0 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    859e:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	2245      	movs	r2, #69	; 0x45
    85a4:	21ff      	movs	r1, #255	; 0xff
    85a6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    85a8:	4b1c      	ldr	r3, [pc, #112]	; (861c <prvUnlockQueue+0xec>)
    85aa:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    85ac:	4b17      	ldr	r3, [pc, #92]	; (860c <prvUnlockQueue+0xdc>)
    85ae:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    85b0:	230e      	movs	r3, #14
    85b2:	18fb      	adds	r3, r7, r3
    85b4:	687a      	ldr	r2, [r7, #4]
    85b6:	2144      	movs	r1, #68	; 0x44
    85b8:	5c52      	ldrb	r2, [r2, r1]
    85ba:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    85bc:	e014      	b.n	85e8 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    85be:	687b      	ldr	r3, [r7, #4]
    85c0:	691b      	ldr	r3, [r3, #16]
    85c2:	2b00      	cmp	r3, #0
    85c4:	d017      	beq.n	85f6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    85c6:	687b      	ldr	r3, [r7, #4]
    85c8:	3310      	adds	r3, #16
    85ca:	0018      	movs	r0, r3
    85cc:	4b12      	ldr	r3, [pc, #72]	; (8618 <prvUnlockQueue+0xe8>)
    85ce:	4798      	blx	r3
    85d0:	1e03      	subs	r3, r0, #0
    85d2:	d001      	beq.n	85d8 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    85d4:	4b0f      	ldr	r3, [pc, #60]	; (8614 <prvUnlockQueue+0xe4>)
    85d6:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    85d8:	230e      	movs	r3, #14
    85da:	18fb      	adds	r3, r7, r3
    85dc:	781b      	ldrb	r3, [r3, #0]
    85de:	3b01      	subs	r3, #1
    85e0:	b2da      	uxtb	r2, r3
    85e2:	230e      	movs	r3, #14
    85e4:	18fb      	adds	r3, r7, r3
    85e6:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    85e8:	230e      	movs	r3, #14
    85ea:	18fb      	adds	r3, r7, r3
    85ec:	781b      	ldrb	r3, [r3, #0]
    85ee:	b25b      	sxtb	r3, r3
    85f0:	2b00      	cmp	r3, #0
    85f2:	dce4      	bgt.n	85be <prvUnlockQueue+0x8e>
    85f4:	e000      	b.n	85f8 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    85f6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    85f8:	687b      	ldr	r3, [r7, #4]
    85fa:	2244      	movs	r2, #68	; 0x44
    85fc:	21ff      	movs	r1, #255	; 0xff
    85fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8600:	4b06      	ldr	r3, [pc, #24]	; (861c <prvUnlockQueue+0xec>)
    8602:	4798      	blx	r3
}
    8604:	46c0      	nop			; (mov r8, r8)
    8606:	46bd      	mov	sp, r7
    8608:	b004      	add	sp, #16
    860a:	bd80      	pop	{r7, pc}
    860c:	00007a49 	.word	0x00007a49
    8610:	00008705 	.word	0x00008705
    8614:	00009149 	.word	0x00009149
    8618:	00008fad 	.word	0x00008fad
    861c:	00007a6d 	.word	0x00007a6d

00008620 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    8620:	b580      	push	{r7, lr}
    8622:	b084      	sub	sp, #16
    8624:	af00      	add	r7, sp, #0
    8626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8628:	4b08      	ldr	r3, [pc, #32]	; (864c <prvIsQueueEmpty+0x2c>)
    862a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    862c:	687b      	ldr	r3, [r7, #4]
    862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8630:	2b00      	cmp	r3, #0
    8632:	d102      	bne.n	863a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    8634:	2301      	movs	r3, #1
    8636:	60fb      	str	r3, [r7, #12]
    8638:	e001      	b.n	863e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    863a:	2300      	movs	r3, #0
    863c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    863e:	4b04      	ldr	r3, [pc, #16]	; (8650 <prvIsQueueEmpty+0x30>)
    8640:	4798      	blx	r3

	return xReturn;
    8642:	68fb      	ldr	r3, [r7, #12]
}
    8644:	0018      	movs	r0, r3
    8646:	46bd      	mov	sp, r7
    8648:	b004      	add	sp, #16
    864a:	bd80      	pop	{r7, pc}
    864c:	00007a49 	.word	0x00007a49
    8650:	00007a6d 	.word	0x00007a6d

00008654 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    8654:	b580      	push	{r7, lr}
    8656:	b084      	sub	sp, #16
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    865c:	4b09      	ldr	r3, [pc, #36]	; (8684 <prvIsQueueFull+0x30>)
    865e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    8660:	687b      	ldr	r3, [r7, #4]
    8662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8664:	687b      	ldr	r3, [r7, #4]
    8666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8668:	429a      	cmp	r2, r3
    866a:	d102      	bne.n	8672 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    866c:	2301      	movs	r3, #1
    866e:	60fb      	str	r3, [r7, #12]
    8670:	e001      	b.n	8676 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    8672:	2300      	movs	r3, #0
    8674:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8676:	4b04      	ldr	r3, [pc, #16]	; (8688 <prvIsQueueFull+0x34>)
    8678:	4798      	blx	r3

	return xReturn;
    867a:	68fb      	ldr	r3, [r7, #12]
}
    867c:	0018      	movs	r0, r3
    867e:	46bd      	mov	sp, r7
    8680:	b004      	add	sp, #16
    8682:	bd80      	pop	{r7, pc}
    8684:	00007a49 	.word	0x00007a49
    8688:	00007a6d 	.word	0x00007a6d

0000868c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    868c:	b580      	push	{r7, lr}
    868e:	b086      	sub	sp, #24
    8690:	af00      	add	r7, sp, #0
    8692:	60f8      	str	r0, [r7, #12]
    8694:	60b9      	str	r1, [r7, #8]
    8696:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    869c:	4b15      	ldr	r3, [pc, #84]	; (86f4 <vQueueWaitForMessageRestricted+0x68>)
    869e:	4798      	blx	r3
    86a0:	697b      	ldr	r3, [r7, #20]
    86a2:	2244      	movs	r2, #68	; 0x44
    86a4:	5c9b      	ldrb	r3, [r3, r2]
    86a6:	b25b      	sxtb	r3, r3
    86a8:	3301      	adds	r3, #1
    86aa:	d103      	bne.n	86b4 <vQueueWaitForMessageRestricted+0x28>
    86ac:	697b      	ldr	r3, [r7, #20]
    86ae:	2244      	movs	r2, #68	; 0x44
    86b0:	2100      	movs	r1, #0
    86b2:	5499      	strb	r1, [r3, r2]
    86b4:	697b      	ldr	r3, [r7, #20]
    86b6:	2245      	movs	r2, #69	; 0x45
    86b8:	5c9b      	ldrb	r3, [r3, r2]
    86ba:	b25b      	sxtb	r3, r3
    86bc:	3301      	adds	r3, #1
    86be:	d103      	bne.n	86c8 <vQueueWaitForMessageRestricted+0x3c>
    86c0:	697b      	ldr	r3, [r7, #20]
    86c2:	2245      	movs	r2, #69	; 0x45
    86c4:	2100      	movs	r1, #0
    86c6:	5499      	strb	r1, [r3, r2]
    86c8:	4b0b      	ldr	r3, [pc, #44]	; (86f8 <vQueueWaitForMessageRestricted+0x6c>)
    86ca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    86cc:	697b      	ldr	r3, [r7, #20]
    86ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    86d0:	2b00      	cmp	r3, #0
    86d2:	d106      	bne.n	86e2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    86d4:	697b      	ldr	r3, [r7, #20]
    86d6:	3324      	adds	r3, #36	; 0x24
    86d8:	687a      	ldr	r2, [r7, #4]
    86da:	68b9      	ldr	r1, [r7, #8]
    86dc:	0018      	movs	r0, r3
    86de:	4b07      	ldr	r3, [pc, #28]	; (86fc <vQueueWaitForMessageRestricted+0x70>)
    86e0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    86e2:	697b      	ldr	r3, [r7, #20]
    86e4:	0018      	movs	r0, r3
    86e6:	4b06      	ldr	r3, [pc, #24]	; (8700 <vQueueWaitForMessageRestricted+0x74>)
    86e8:	4798      	blx	r3
	}
    86ea:	46c0      	nop			; (mov r8, r8)
    86ec:	46bd      	mov	sp, r7
    86ee:	b006      	add	sp, #24
    86f0:	bd80      	pop	{r7, pc}
    86f2:	46c0      	nop			; (mov r8, r8)
    86f4:	00007a49 	.word	0x00007a49
    86f8:	00007a6d 	.word	0x00007a6d
    86fc:	00008f59 	.word	0x00008f59
    8700:	00008531 	.word	0x00008531

00008704 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    8704:	b580      	push	{r7, lr}
    8706:	b086      	sub	sp, #24
    8708:	af00      	add	r7, sp, #0
    870a:	6078      	str	r0, [r7, #4]
    870c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    870e:	687b      	ldr	r3, [r7, #4]
    8710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    8714:	2300      	movs	r3, #0
    8716:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    8718:	693b      	ldr	r3, [r7, #16]
    871a:	2b00      	cmp	r3, #0
    871c:	d101      	bne.n	8722 <prvNotifyQueueSetContainer+0x1e>
    871e:	b672      	cpsid	i
    8720:	e7fe      	b.n	8720 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    8722:	693b      	ldr	r3, [r7, #16]
    8724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8726:	693b      	ldr	r3, [r7, #16]
    8728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    872a:	429a      	cmp	r2, r3
    872c:	d301      	bcc.n	8732 <prvNotifyQueueSetContainer+0x2e>
    872e:	b672      	cpsid	i
    8730:	e7fe      	b.n	8730 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    8732:	693b      	ldr	r3, [r7, #16]
    8734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8736:	693b      	ldr	r3, [r7, #16]
    8738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    873a:	429a      	cmp	r2, r3
    873c:	d22a      	bcs.n	8794 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    873e:	230f      	movs	r3, #15
    8740:	18fb      	adds	r3, r7, r3
    8742:	693a      	ldr	r2, [r7, #16]
    8744:	2145      	movs	r1, #69	; 0x45
    8746:	5c52      	ldrb	r2, [r2, r1]
    8748:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    874a:	683a      	ldr	r2, [r7, #0]
    874c:	1d39      	adds	r1, r7, #4
    874e:	693b      	ldr	r3, [r7, #16]
    8750:	0018      	movs	r0, r3
    8752:	4b13      	ldr	r3, [pc, #76]	; (87a0 <prvNotifyQueueSetContainer+0x9c>)
    8754:	4798      	blx	r3
    8756:	0003      	movs	r3, r0
    8758:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    875a:	230f      	movs	r3, #15
    875c:	18fb      	adds	r3, r7, r3
    875e:	781b      	ldrb	r3, [r3, #0]
    8760:	b25b      	sxtb	r3, r3
    8762:	3301      	adds	r3, #1
    8764:	d10d      	bne.n	8782 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    8766:	693b      	ldr	r3, [r7, #16]
    8768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    876a:	2b00      	cmp	r3, #0
    876c:	d012      	beq.n	8794 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    876e:	693b      	ldr	r3, [r7, #16]
    8770:	3324      	adds	r3, #36	; 0x24
    8772:	0018      	movs	r0, r3
    8774:	4b0b      	ldr	r3, [pc, #44]	; (87a4 <prvNotifyQueueSetContainer+0xa0>)
    8776:	4798      	blx	r3
    8778:	1e03      	subs	r3, r0, #0
    877a:	d00b      	beq.n	8794 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    877c:	2301      	movs	r3, #1
    877e:	617b      	str	r3, [r7, #20]
    8780:	e008      	b.n	8794 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    8782:	230f      	movs	r3, #15
    8784:	18fb      	adds	r3, r7, r3
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	3301      	adds	r3, #1
    878a:	b2db      	uxtb	r3, r3
    878c:	b259      	sxtb	r1, r3
    878e:	693b      	ldr	r3, [r7, #16]
    8790:	2245      	movs	r2, #69	; 0x45
    8792:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8794:	697b      	ldr	r3, [r7, #20]
	}
    8796:	0018      	movs	r0, r3
    8798:	46bd      	mov	sp, r7
    879a:	b006      	add	sp, #24
    879c:	bd80      	pop	{r7, pc}
    879e:	46c0      	nop			; (mov r8, r8)
    87a0:	00008401 	.word	0x00008401
    87a4:	00008fad 	.word	0x00008fad

000087a8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    87a8:	b590      	push	{r4, r7, lr}
    87aa:	b08d      	sub	sp, #52	; 0x34
    87ac:	af04      	add	r7, sp, #16
    87ae:	60f8      	str	r0, [r7, #12]
    87b0:	60b9      	str	r1, [r7, #8]
    87b2:	603b      	str	r3, [r7, #0]
    87b4:	1dbb      	adds	r3, r7, #6
    87b6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    87b8:	1dbb      	adds	r3, r7, #6
    87ba:	881b      	ldrh	r3, [r3, #0]
    87bc:	009b      	lsls	r3, r3, #2
    87be:	0018      	movs	r0, r3
    87c0:	4b1d      	ldr	r3, [pc, #116]	; (8838 <xTaskCreate+0x90>)
    87c2:	4798      	blx	r3
    87c4:	0003      	movs	r3, r0
    87c6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    87c8:	697b      	ldr	r3, [r7, #20]
    87ca:	2b00      	cmp	r3, #0
    87cc:	d010      	beq.n	87f0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    87ce:	2050      	movs	r0, #80	; 0x50
    87d0:	4b19      	ldr	r3, [pc, #100]	; (8838 <xTaskCreate+0x90>)
    87d2:	4798      	blx	r3
    87d4:	0003      	movs	r3, r0
    87d6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    87d8:	69fb      	ldr	r3, [r7, #28]
    87da:	2b00      	cmp	r3, #0
    87dc:	d003      	beq.n	87e6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    87de:	69fb      	ldr	r3, [r7, #28]
    87e0:	697a      	ldr	r2, [r7, #20]
    87e2:	631a      	str	r2, [r3, #48]	; 0x30
    87e4:	e006      	b.n	87f4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    87e6:	697b      	ldr	r3, [r7, #20]
    87e8:	0018      	movs	r0, r3
    87ea:	4b14      	ldr	r3, [pc, #80]	; (883c <xTaskCreate+0x94>)
    87ec:	4798      	blx	r3
    87ee:	e001      	b.n	87f4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    87f0:	2300      	movs	r3, #0
    87f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    87f4:	69fb      	ldr	r3, [r7, #28]
    87f6:	2b00      	cmp	r3, #0
    87f8:	d016      	beq.n	8828 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    87fa:	1dbb      	adds	r3, r7, #6
    87fc:	881a      	ldrh	r2, [r3, #0]
    87fe:	683c      	ldr	r4, [r7, #0]
    8800:	68b9      	ldr	r1, [r7, #8]
    8802:	68f8      	ldr	r0, [r7, #12]
    8804:	2300      	movs	r3, #0
    8806:	9303      	str	r3, [sp, #12]
    8808:	69fb      	ldr	r3, [r7, #28]
    880a:	9302      	str	r3, [sp, #8]
    880c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    880e:	9301      	str	r3, [sp, #4]
    8810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8812:	9300      	str	r3, [sp, #0]
    8814:	0023      	movs	r3, r4
    8816:	4c0a      	ldr	r4, [pc, #40]	; (8840 <xTaskCreate+0x98>)
    8818:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    881a:	69fb      	ldr	r3, [r7, #28]
    881c:	0018      	movs	r0, r3
    881e:	4b09      	ldr	r3, [pc, #36]	; (8844 <xTaskCreate+0x9c>)
    8820:	4798      	blx	r3
			xReturn = pdPASS;
    8822:	2301      	movs	r3, #1
    8824:	61bb      	str	r3, [r7, #24]
    8826:	e002      	b.n	882e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    8828:	2301      	movs	r3, #1
    882a:	425b      	negs	r3, r3
    882c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    882e:	69bb      	ldr	r3, [r7, #24]
	}
    8830:	0018      	movs	r0, r3
    8832:	46bd      	mov	sp, r7
    8834:	b009      	add	sp, #36	; 0x24
    8836:	bd90      	pop	{r4, r7, pc}
    8838:	00007b5d 	.word	0x00007b5d
    883c:	00007bf1 	.word	0x00007bf1
    8840:	00008849 	.word	0x00008849
    8844:	00008945 	.word	0x00008945

00008848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    8848:	b580      	push	{r7, lr}
    884a:	b086      	sub	sp, #24
    884c:	af00      	add	r7, sp, #0
    884e:	60f8      	str	r0, [r7, #12]
    8850:	60b9      	str	r1, [r7, #8]
    8852:	607a      	str	r2, [r7, #4]
    8854:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    8856:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	4936      	ldr	r1, [pc, #216]	; (8938 <prvInitialiseNewTask+0xf0>)
    885e:	468c      	mov	ip, r1
    8860:	4463      	add	r3, ip
    8862:	009b      	lsls	r3, r3, #2
    8864:	18d3      	adds	r3, r2, r3
    8866:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    8868:	693b      	ldr	r3, [r7, #16]
    886a:	2207      	movs	r2, #7
    886c:	4393      	bics	r3, r2
    886e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    8870:	693b      	ldr	r3, [r7, #16]
    8872:	2207      	movs	r2, #7
    8874:	4013      	ands	r3, r2
    8876:	d001      	beq.n	887c <prvInitialiseNewTask+0x34>
    8878:	b672      	cpsid	i
    887a:	e7fe      	b.n	887a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    887c:	2300      	movs	r3, #0
    887e:	617b      	str	r3, [r7, #20]
    8880:	e013      	b.n	88aa <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    8882:	68ba      	ldr	r2, [r7, #8]
    8884:	697b      	ldr	r3, [r7, #20]
    8886:	18d3      	adds	r3, r2, r3
    8888:	7818      	ldrb	r0, [r3, #0]
    888a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    888c:	2134      	movs	r1, #52	; 0x34
    888e:	697b      	ldr	r3, [r7, #20]
    8890:	18d3      	adds	r3, r2, r3
    8892:	185b      	adds	r3, r3, r1
    8894:	1c02      	adds	r2, r0, #0
    8896:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    8898:	68ba      	ldr	r2, [r7, #8]
    889a:	697b      	ldr	r3, [r7, #20]
    889c:	18d3      	adds	r3, r2, r3
    889e:	781b      	ldrb	r3, [r3, #0]
    88a0:	2b00      	cmp	r3, #0
    88a2:	d006      	beq.n	88b2 <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    88a4:	697b      	ldr	r3, [r7, #20]
    88a6:	3301      	adds	r3, #1
    88a8:	617b      	str	r3, [r7, #20]
    88aa:	697b      	ldr	r3, [r7, #20]
    88ac:	2b0b      	cmp	r3, #11
    88ae:	d9e8      	bls.n	8882 <prvInitialiseNewTask+0x3a>
    88b0:	e000      	b.n	88b4 <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    88b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    88b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88b6:	223f      	movs	r2, #63	; 0x3f
    88b8:	2100      	movs	r1, #0
    88ba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    88bc:	6a3b      	ldr	r3, [r7, #32]
    88be:	2b04      	cmp	r3, #4
    88c0:	d901      	bls.n	88c6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    88c2:	2304      	movs	r3, #4
    88c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    88c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88c8:	6a3a      	ldr	r2, [r7, #32]
    88ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    88cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88ce:	6a3a      	ldr	r2, [r7, #32]
    88d0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    88d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88d4:	2200      	movs	r2, #0
    88d6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    88d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88da:	3304      	adds	r3, #4
    88dc:	0018      	movs	r0, r3
    88de:	4b17      	ldr	r3, [pc, #92]	; (893c <prvInitialiseNewTask+0xf4>)
    88e0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    88e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88e4:	3318      	adds	r3, #24
    88e6:	0018      	movs	r0, r3
    88e8:	4b14      	ldr	r3, [pc, #80]	; (893c <prvInitialiseNewTask+0xf4>)
    88ea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    88ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    88f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    88f2:	6a3b      	ldr	r3, [r7, #32]
    88f4:	2205      	movs	r2, #5
    88f6:	1ad2      	subs	r2, r2, r3
    88f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    88fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    88fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8900:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    8902:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8904:	2200      	movs	r2, #0
    8906:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    8908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    890a:	224c      	movs	r2, #76	; 0x4c
    890c:	2100      	movs	r1, #0
    890e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    8910:	683a      	ldr	r2, [r7, #0]
    8912:	68f9      	ldr	r1, [r7, #12]
    8914:	693b      	ldr	r3, [r7, #16]
    8916:	0018      	movs	r0, r3
    8918:	4b09      	ldr	r3, [pc, #36]	; (8940 <prvInitialiseNewTask+0xf8>)
    891a:	4798      	blx	r3
    891c:	0002      	movs	r2, r0
    891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8920:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    8922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8924:	2b00      	cmp	r3, #0
    8926:	d002      	beq.n	892e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    8928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    892a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    892c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	46bd      	mov	sp, r7
    8932:	b006      	add	sp, #24
    8934:	bd80      	pop	{r7, pc}
    8936:	46c0      	nop			; (mov r8, r8)
    8938:	3fffffff 	.word	0x3fffffff
    893c:	00007809 	.word	0x00007809
    8940:	00007921 	.word	0x00007921

00008944 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    8944:	b580      	push	{r7, lr}
    8946:	b082      	sub	sp, #8
    8948:	af00      	add	r7, sp, #0
    894a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    894c:	4b29      	ldr	r3, [pc, #164]	; (89f4 <prvAddNewTaskToReadyList+0xb0>)
    894e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    8950:	4b29      	ldr	r3, [pc, #164]	; (89f8 <prvAddNewTaskToReadyList+0xb4>)
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	1c5a      	adds	r2, r3, #1
    8956:	4b28      	ldr	r3, [pc, #160]	; (89f8 <prvAddNewTaskToReadyList+0xb4>)
    8958:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    895a:	4b28      	ldr	r3, [pc, #160]	; (89fc <prvAddNewTaskToReadyList+0xb8>)
    895c:	681b      	ldr	r3, [r3, #0]
    895e:	2b00      	cmp	r3, #0
    8960:	d109      	bne.n	8976 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    8962:	4b26      	ldr	r3, [pc, #152]	; (89fc <prvAddNewTaskToReadyList+0xb8>)
    8964:	687a      	ldr	r2, [r7, #4]
    8966:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    8968:	4b23      	ldr	r3, [pc, #140]	; (89f8 <prvAddNewTaskToReadyList+0xb4>)
    896a:	681b      	ldr	r3, [r3, #0]
    896c:	2b01      	cmp	r3, #1
    896e:	d110      	bne.n	8992 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    8970:	4b23      	ldr	r3, [pc, #140]	; (8a00 <prvAddNewTaskToReadyList+0xbc>)
    8972:	4798      	blx	r3
    8974:	e00d      	b.n	8992 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    8976:	4b23      	ldr	r3, [pc, #140]	; (8a04 <prvAddNewTaskToReadyList+0xc0>)
    8978:	681b      	ldr	r3, [r3, #0]
    897a:	2b00      	cmp	r3, #0
    897c:	d109      	bne.n	8992 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    897e:	4b1f      	ldr	r3, [pc, #124]	; (89fc <prvAddNewTaskToReadyList+0xb8>)
    8980:	681b      	ldr	r3, [r3, #0]
    8982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8988:	429a      	cmp	r2, r3
    898a:	d802      	bhi.n	8992 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    898c:	4b1b      	ldr	r3, [pc, #108]	; (89fc <prvAddNewTaskToReadyList+0xb8>)
    898e:	687a      	ldr	r2, [r7, #4]
    8990:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    8992:	4b1d      	ldr	r3, [pc, #116]	; (8a08 <prvAddNewTaskToReadyList+0xc4>)
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	1c5a      	adds	r2, r3, #1
    8998:	4b1b      	ldr	r3, [pc, #108]	; (8a08 <prvAddNewTaskToReadyList+0xc4>)
    899a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    899c:	687b      	ldr	r3, [r7, #4]
    899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89a0:	4b1a      	ldr	r3, [pc, #104]	; (8a0c <prvAddNewTaskToReadyList+0xc8>)
    89a2:	681b      	ldr	r3, [r3, #0]
    89a4:	429a      	cmp	r2, r3
    89a6:	d903      	bls.n	89b0 <prvAddNewTaskToReadyList+0x6c>
    89a8:	687b      	ldr	r3, [r7, #4]
    89aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89ac:	4b17      	ldr	r3, [pc, #92]	; (8a0c <prvAddNewTaskToReadyList+0xc8>)
    89ae:	601a      	str	r2, [r3, #0]
    89b0:	687b      	ldr	r3, [r7, #4]
    89b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89b4:	0013      	movs	r3, r2
    89b6:	009b      	lsls	r3, r3, #2
    89b8:	189b      	adds	r3, r3, r2
    89ba:	009b      	lsls	r3, r3, #2
    89bc:	4a14      	ldr	r2, [pc, #80]	; (8a10 <prvAddNewTaskToReadyList+0xcc>)
    89be:	189a      	adds	r2, r3, r2
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	3304      	adds	r3, #4
    89c4:	0019      	movs	r1, r3
    89c6:	0010      	movs	r0, r2
    89c8:	4b12      	ldr	r3, [pc, #72]	; (8a14 <prvAddNewTaskToReadyList+0xd0>)
    89ca:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    89cc:	4b12      	ldr	r3, [pc, #72]	; (8a18 <prvAddNewTaskToReadyList+0xd4>)
    89ce:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    89d0:	4b0c      	ldr	r3, [pc, #48]	; (8a04 <prvAddNewTaskToReadyList+0xc0>)
    89d2:	681b      	ldr	r3, [r3, #0]
    89d4:	2b00      	cmp	r3, #0
    89d6:	d008      	beq.n	89ea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    89d8:	4b08      	ldr	r3, [pc, #32]	; (89fc <prvAddNewTaskToReadyList+0xb8>)
    89da:	681b      	ldr	r3, [r3, #0]
    89dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    89e2:	429a      	cmp	r2, r3
    89e4:	d201      	bcs.n	89ea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    89e6:	4b0d      	ldr	r3, [pc, #52]	; (8a1c <prvAddNewTaskToReadyList+0xd8>)
    89e8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    89ea:	46c0      	nop			; (mov r8, r8)
    89ec:	46bd      	mov	sp, r7
    89ee:	b002      	add	sp, #8
    89f0:	bd80      	pop	{r7, pc}
    89f2:	46c0      	nop			; (mov r8, r8)
    89f4:	00007a49 	.word	0x00007a49
    89f8:	20003c90 	.word	0x20003c90
    89fc:	20003bb8 	.word	0x20003bb8
    8a00:	0000918d 	.word	0x0000918d
    8a04:	20003c9c 	.word	0x20003c9c
    8a08:	20003cac 	.word	0x20003cac
    8a0c:	20003c98 	.word	0x20003c98
    8a10:	20003bbc 	.word	0x20003bbc
    8a14:	00007821 	.word	0x00007821
    8a18:	00007a6d 	.word	0x00007a6d
    8a1c:	00007a29 	.word	0x00007a29

00008a20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    8a20:	b580      	push	{r7, lr}
    8a22:	b086      	sub	sp, #24
    8a24:	af00      	add	r7, sp, #0
    8a26:	6078      	str	r0, [r7, #4]
    8a28:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    8a2a:	2300      	movs	r3, #0
    8a2c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    8a2e:	687b      	ldr	r3, [r7, #4]
    8a30:	2b00      	cmp	r3, #0
    8a32:	d101      	bne.n	8a38 <vTaskDelayUntil+0x18>
    8a34:	b672      	cpsid	i
    8a36:	e7fe      	b.n	8a36 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    8a38:	683b      	ldr	r3, [r7, #0]
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d101      	bne.n	8a42 <vTaskDelayUntil+0x22>
    8a3e:	b672      	cpsid	i
    8a40:	e7fe      	b.n	8a40 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    8a42:	4b23      	ldr	r3, [pc, #140]	; (8ad0 <vTaskDelayUntil+0xb0>)
    8a44:	681b      	ldr	r3, [r3, #0]
    8a46:	2b00      	cmp	r3, #0
    8a48:	d001      	beq.n	8a4e <vTaskDelayUntil+0x2e>
    8a4a:	b672      	cpsid	i
    8a4c:	e7fe      	b.n	8a4c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    8a4e:	4b21      	ldr	r3, [pc, #132]	; (8ad4 <vTaskDelayUntil+0xb4>)
    8a50:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    8a52:	4b21      	ldr	r3, [pc, #132]	; (8ad8 <vTaskDelayUntil+0xb8>)
    8a54:	681b      	ldr	r3, [r3, #0]
    8a56:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	681a      	ldr	r2, [r3, #0]
    8a5c:	683b      	ldr	r3, [r7, #0]
    8a5e:	18d3      	adds	r3, r2, r3
    8a60:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    8a62:	687b      	ldr	r3, [r7, #4]
    8a64:	681a      	ldr	r2, [r3, #0]
    8a66:	693b      	ldr	r3, [r7, #16]
    8a68:	429a      	cmp	r2, r3
    8a6a:	d90b      	bls.n	8a84 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	681a      	ldr	r2, [r3, #0]
    8a70:	68fb      	ldr	r3, [r7, #12]
    8a72:	429a      	cmp	r2, r3
    8a74:	d911      	bls.n	8a9a <vTaskDelayUntil+0x7a>
    8a76:	68fa      	ldr	r2, [r7, #12]
    8a78:	693b      	ldr	r3, [r7, #16]
    8a7a:	429a      	cmp	r2, r3
    8a7c:	d90d      	bls.n	8a9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    8a7e:	2301      	movs	r3, #1
    8a80:	617b      	str	r3, [r7, #20]
    8a82:	e00a      	b.n	8a9a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    8a84:	687b      	ldr	r3, [r7, #4]
    8a86:	681a      	ldr	r2, [r3, #0]
    8a88:	68fb      	ldr	r3, [r7, #12]
    8a8a:	429a      	cmp	r2, r3
    8a8c:	d803      	bhi.n	8a96 <vTaskDelayUntil+0x76>
    8a8e:	68fa      	ldr	r2, [r7, #12]
    8a90:	693b      	ldr	r3, [r7, #16]
    8a92:	429a      	cmp	r2, r3
    8a94:	d901      	bls.n	8a9a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    8a96:	2301      	movs	r3, #1
    8a98:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	68fa      	ldr	r2, [r7, #12]
    8a9e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    8aa0:	697b      	ldr	r3, [r7, #20]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d006      	beq.n	8ab4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    8aa6:	68fa      	ldr	r2, [r7, #12]
    8aa8:	693b      	ldr	r3, [r7, #16]
    8aaa:	1ad3      	subs	r3, r2, r3
    8aac:	2100      	movs	r1, #0
    8aae:	0018      	movs	r0, r3
    8ab0:	4b0a      	ldr	r3, [pc, #40]	; (8adc <vTaskDelayUntil+0xbc>)
    8ab2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    8ab4:	4b0a      	ldr	r3, [pc, #40]	; (8ae0 <vTaskDelayUntil+0xc0>)
    8ab6:	4798      	blx	r3
    8ab8:	0003      	movs	r3, r0
    8aba:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    8abc:	68bb      	ldr	r3, [r7, #8]
    8abe:	2b00      	cmp	r3, #0
    8ac0:	d101      	bne.n	8ac6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    8ac2:	4b08      	ldr	r3, [pc, #32]	; (8ae4 <vTaskDelayUntil+0xc4>)
    8ac4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8ac6:	46c0      	nop			; (mov r8, r8)
    8ac8:	46bd      	mov	sp, r7
    8aca:	b006      	add	sp, #24
    8acc:	bd80      	pop	{r7, pc}
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	20003cb8 	.word	0x20003cb8
    8ad4:	00008b71 	.word	0x00008b71
    8ad8:	20003c94 	.word	0x20003c94
    8adc:	000094f5 	.word	0x000094f5
    8ae0:	00008b89 	.word	0x00008b89
    8ae4:	00007a29 	.word	0x00007a29

00008ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    8ae8:	b590      	push	{r4, r7, lr}
    8aea:	b085      	sub	sp, #20
    8aec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    8aee:	2380      	movs	r3, #128	; 0x80
    8af0:	005a      	lsls	r2, r3, #1
    8af2:	4916      	ldr	r1, [pc, #88]	; (8b4c <vTaskStartScheduler+0x64>)
    8af4:	4816      	ldr	r0, [pc, #88]	; (8b50 <vTaskStartScheduler+0x68>)
    8af6:	4b17      	ldr	r3, [pc, #92]	; (8b54 <vTaskStartScheduler+0x6c>)
    8af8:	9301      	str	r3, [sp, #4]
    8afa:	2300      	movs	r3, #0
    8afc:	9300      	str	r3, [sp, #0]
    8afe:	2300      	movs	r3, #0
    8b00:	4c15      	ldr	r4, [pc, #84]	; (8b58 <vTaskStartScheduler+0x70>)
    8b02:	47a0      	blx	r4
    8b04:	0003      	movs	r3, r0
    8b06:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	2b01      	cmp	r3, #1
    8b0c:	d103      	bne.n	8b16 <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    8b0e:	4b13      	ldr	r3, [pc, #76]	; (8b5c <vTaskStartScheduler+0x74>)
    8b10:	4798      	blx	r3
    8b12:	0003      	movs	r3, r0
    8b14:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    8b16:	687b      	ldr	r3, [r7, #4]
    8b18:	2b01      	cmp	r3, #1
    8b1a:	d10d      	bne.n	8b38 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    8b1c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    8b1e:	4b10      	ldr	r3, [pc, #64]	; (8b60 <vTaskStartScheduler+0x78>)
    8b20:	2201      	movs	r2, #1
    8b22:	4252      	negs	r2, r2
    8b24:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    8b26:	4b0f      	ldr	r3, [pc, #60]	; (8b64 <vTaskStartScheduler+0x7c>)
    8b28:	2201      	movs	r2, #1
    8b2a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    8b2c:	4b0e      	ldr	r3, [pc, #56]	; (8b68 <vTaskStartScheduler+0x80>)
    8b2e:	2200      	movs	r2, #0
    8b30:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    8b32:	4b0e      	ldr	r3, [pc, #56]	; (8b6c <vTaskStartScheduler+0x84>)
    8b34:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    8b36:	e004      	b.n	8b42 <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	3301      	adds	r3, #1
    8b3c:	d101      	bne.n	8b42 <vTaskStartScheduler+0x5a>
    8b3e:	b672      	cpsid	i
    8b40:	e7fe      	b.n	8b40 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	46bd      	mov	sp, r7
    8b46:	b003      	add	sp, #12
    8b48:	bd90      	pop	{r4, r7, pc}
    8b4a:	46c0      	nop			; (mov r8, r8)
    8b4c:	0000dae0 	.word	0x0000dae0
    8b50:	0000915d 	.word	0x0000915d
    8b54:	20003cb4 	.word	0x20003cb4
    8b58:	000087a9 	.word	0x000087a9
    8b5c:	000095a9 	.word	0x000095a9
    8b60:	20003cb0 	.word	0x20003cb0
    8b64:	20003c9c 	.word	0x20003c9c
    8b68:	20003c94 	.word	0x20003c94
    8b6c:	000079d9 	.word	0x000079d9

00008b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    8b70:	b580      	push	{r7, lr}
    8b72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    8b74:	4b03      	ldr	r3, [pc, #12]	; (8b84 <vTaskSuspendAll+0x14>)
    8b76:	681b      	ldr	r3, [r3, #0]
    8b78:	1c5a      	adds	r2, r3, #1
    8b7a:	4b02      	ldr	r3, [pc, #8]	; (8b84 <vTaskSuspendAll+0x14>)
    8b7c:	601a      	str	r2, [r3, #0]
}
    8b7e:	46c0      	nop			; (mov r8, r8)
    8b80:	46bd      	mov	sp, r7
    8b82:	bd80      	pop	{r7, pc}
    8b84:	20003cb8 	.word	0x20003cb8

00008b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b084      	sub	sp, #16
    8b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    8b8e:	2300      	movs	r3, #0
    8b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    8b92:	2300      	movs	r3, #0
    8b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    8b96:	4b3a      	ldr	r3, [pc, #232]	; (8c80 <xTaskResumeAll+0xf8>)
    8b98:	681b      	ldr	r3, [r3, #0]
    8b9a:	2b00      	cmp	r3, #0
    8b9c:	d101      	bne.n	8ba2 <xTaskResumeAll+0x1a>
    8b9e:	b672      	cpsid	i
    8ba0:	e7fe      	b.n	8ba0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    8ba2:	4b38      	ldr	r3, [pc, #224]	; (8c84 <xTaskResumeAll+0xfc>)
    8ba4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    8ba6:	4b36      	ldr	r3, [pc, #216]	; (8c80 <xTaskResumeAll+0xf8>)
    8ba8:	681b      	ldr	r3, [r3, #0]
    8baa:	1e5a      	subs	r2, r3, #1
    8bac:	4b34      	ldr	r3, [pc, #208]	; (8c80 <xTaskResumeAll+0xf8>)
    8bae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8bb0:	4b33      	ldr	r3, [pc, #204]	; (8c80 <xTaskResumeAll+0xf8>)
    8bb2:	681b      	ldr	r3, [r3, #0]
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d15b      	bne.n	8c70 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    8bb8:	4b33      	ldr	r3, [pc, #204]	; (8c88 <xTaskResumeAll+0x100>)
    8bba:	681b      	ldr	r3, [r3, #0]
    8bbc:	2b00      	cmp	r3, #0
    8bbe:	d057      	beq.n	8c70 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8bc0:	e02f      	b.n	8c22 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    8bc2:	4b32      	ldr	r3, [pc, #200]	; (8c8c <xTaskResumeAll+0x104>)
    8bc4:	68db      	ldr	r3, [r3, #12]
    8bc6:	68db      	ldr	r3, [r3, #12]
    8bc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8bca:	68fb      	ldr	r3, [r7, #12]
    8bcc:	3318      	adds	r3, #24
    8bce:	0018      	movs	r0, r3
    8bd0:	4b2f      	ldr	r3, [pc, #188]	; (8c90 <xTaskResumeAll+0x108>)
    8bd2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8bd4:	68fb      	ldr	r3, [r7, #12]
    8bd6:	3304      	adds	r3, #4
    8bd8:	0018      	movs	r0, r3
    8bda:	4b2d      	ldr	r3, [pc, #180]	; (8c90 <xTaskResumeAll+0x108>)
    8bdc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    8bde:	68fb      	ldr	r3, [r7, #12]
    8be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8be2:	4b2c      	ldr	r3, [pc, #176]	; (8c94 <xTaskResumeAll+0x10c>)
    8be4:	681b      	ldr	r3, [r3, #0]
    8be6:	429a      	cmp	r2, r3
    8be8:	d903      	bls.n	8bf2 <xTaskResumeAll+0x6a>
    8bea:	68fb      	ldr	r3, [r7, #12]
    8bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bee:	4b29      	ldr	r3, [pc, #164]	; (8c94 <xTaskResumeAll+0x10c>)
    8bf0:	601a      	str	r2, [r3, #0]
    8bf2:	68fb      	ldr	r3, [r7, #12]
    8bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8bf6:	0013      	movs	r3, r2
    8bf8:	009b      	lsls	r3, r3, #2
    8bfa:	189b      	adds	r3, r3, r2
    8bfc:	009b      	lsls	r3, r3, #2
    8bfe:	4a26      	ldr	r2, [pc, #152]	; (8c98 <xTaskResumeAll+0x110>)
    8c00:	189a      	adds	r2, r3, r2
    8c02:	68fb      	ldr	r3, [r7, #12]
    8c04:	3304      	adds	r3, #4
    8c06:	0019      	movs	r1, r3
    8c08:	0010      	movs	r0, r2
    8c0a:	4b24      	ldr	r3, [pc, #144]	; (8c9c <xTaskResumeAll+0x114>)
    8c0c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8c0e:	68fb      	ldr	r3, [r7, #12]
    8c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8c12:	4b23      	ldr	r3, [pc, #140]	; (8ca0 <xTaskResumeAll+0x118>)
    8c14:	681b      	ldr	r3, [r3, #0]
    8c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8c18:	429a      	cmp	r2, r3
    8c1a:	d302      	bcc.n	8c22 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    8c1c:	4b21      	ldr	r3, [pc, #132]	; (8ca4 <xTaskResumeAll+0x11c>)
    8c1e:	2201      	movs	r2, #1
    8c20:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8c22:	4b1a      	ldr	r3, [pc, #104]	; (8c8c <xTaskResumeAll+0x104>)
    8c24:	681b      	ldr	r3, [r3, #0]
    8c26:	2b00      	cmp	r3, #0
    8c28:	d1cb      	bne.n	8bc2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    8c2a:	68fb      	ldr	r3, [r7, #12]
    8c2c:	2b00      	cmp	r3, #0
    8c2e:	d001      	beq.n	8c34 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    8c30:	4b1d      	ldr	r3, [pc, #116]	; (8ca8 <xTaskResumeAll+0x120>)
    8c32:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    8c34:	4b1d      	ldr	r3, [pc, #116]	; (8cac <xTaskResumeAll+0x124>)
    8c36:	681b      	ldr	r3, [r3, #0]
    8c38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	2b00      	cmp	r3, #0
    8c3e:	d00f      	beq.n	8c60 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    8c40:	4b1b      	ldr	r3, [pc, #108]	; (8cb0 <xTaskResumeAll+0x128>)
    8c42:	4798      	blx	r3
    8c44:	1e03      	subs	r3, r0, #0
    8c46:	d002      	beq.n	8c4e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    8c48:	4b16      	ldr	r3, [pc, #88]	; (8ca4 <xTaskResumeAll+0x11c>)
    8c4a:	2201      	movs	r2, #1
    8c4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	3b01      	subs	r3, #1
    8c52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d1f2      	bne.n	8c40 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    8c5a:	4b14      	ldr	r3, [pc, #80]	; (8cac <xTaskResumeAll+0x124>)
    8c5c:	2200      	movs	r2, #0
    8c5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    8c60:	4b10      	ldr	r3, [pc, #64]	; (8ca4 <xTaskResumeAll+0x11c>)
    8c62:	681b      	ldr	r3, [r3, #0]
    8c64:	2b00      	cmp	r3, #0
    8c66:	d003      	beq.n	8c70 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    8c68:	2301      	movs	r3, #1
    8c6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    8c6c:	4b11      	ldr	r3, [pc, #68]	; (8cb4 <xTaskResumeAll+0x12c>)
    8c6e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8c70:	4b11      	ldr	r3, [pc, #68]	; (8cb8 <xTaskResumeAll+0x130>)
    8c72:	4798      	blx	r3

	return xAlreadyYielded;
    8c74:	68bb      	ldr	r3, [r7, #8]
}
    8c76:	0018      	movs	r0, r3
    8c78:	46bd      	mov	sp, r7
    8c7a:	b004      	add	sp, #16
    8c7c:	bd80      	pop	{r7, pc}
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	20003cb8 	.word	0x20003cb8
    8c84:	00007a49 	.word	0x00007a49
    8c88:	20003c90 	.word	0x20003c90
    8c8c:	20003c50 	.word	0x20003c50
    8c90:	000078d1 	.word	0x000078d1
    8c94:	20003c98 	.word	0x20003c98
    8c98:	20003bbc 	.word	0x20003bbc
    8c9c:	00007821 	.word	0x00007821
    8ca0:	20003bb8 	.word	0x20003bb8
    8ca4:	20003ca4 	.word	0x20003ca4
    8ca8:	000092cd 	.word	0x000092cd
    8cac:	20003ca0 	.word	0x20003ca0
    8cb0:	00008cd9 	.word	0x00008cd9
    8cb4:	00007a29 	.word	0x00007a29
    8cb8:	00007a6d 	.word	0x00007a6d

00008cbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    8cbc:	b580      	push	{r7, lr}
    8cbe:	b082      	sub	sp, #8
    8cc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    8cc2:	4b04      	ldr	r3, [pc, #16]	; (8cd4 <xTaskGetTickCount+0x18>)
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8cc8:	687b      	ldr	r3, [r7, #4]
}
    8cca:	0018      	movs	r0, r3
    8ccc:	46bd      	mov	sp, r7
    8cce:	b002      	add	sp, #8
    8cd0:	bd80      	pop	{r7, pc}
    8cd2:	46c0      	nop			; (mov r8, r8)
    8cd4:	20003c94 	.word	0x20003c94

00008cd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8cd8:	b580      	push	{r7, lr}
    8cda:	b086      	sub	sp, #24
    8cdc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    8cde:	2300      	movs	r3, #0
    8ce0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8ce2:	4b4c      	ldr	r3, [pc, #304]	; (8e14 <xTaskIncrementTick+0x13c>)
    8ce4:	681b      	ldr	r3, [r3, #0]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d000      	beq.n	8cec <xTaskIncrementTick+0x14>
    8cea:	e083      	b.n	8df4 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    8cec:	4b4a      	ldr	r3, [pc, #296]	; (8e18 <xTaskIncrementTick+0x140>)
    8cee:	681b      	ldr	r3, [r3, #0]
    8cf0:	3301      	adds	r3, #1
    8cf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    8cf4:	4b48      	ldr	r3, [pc, #288]	; (8e18 <xTaskIncrementTick+0x140>)
    8cf6:	693a      	ldr	r2, [r7, #16]
    8cf8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    8cfa:	693b      	ldr	r3, [r7, #16]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	d117      	bne.n	8d30 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    8d00:	4b46      	ldr	r3, [pc, #280]	; (8e1c <xTaskIncrementTick+0x144>)
    8d02:	681b      	ldr	r3, [r3, #0]
    8d04:	681b      	ldr	r3, [r3, #0]
    8d06:	2b00      	cmp	r3, #0
    8d08:	d001      	beq.n	8d0e <xTaskIncrementTick+0x36>
    8d0a:	b672      	cpsid	i
    8d0c:	e7fe      	b.n	8d0c <xTaskIncrementTick+0x34>
    8d0e:	4b43      	ldr	r3, [pc, #268]	; (8e1c <xTaskIncrementTick+0x144>)
    8d10:	681b      	ldr	r3, [r3, #0]
    8d12:	60fb      	str	r3, [r7, #12]
    8d14:	4b42      	ldr	r3, [pc, #264]	; (8e20 <xTaskIncrementTick+0x148>)
    8d16:	681a      	ldr	r2, [r3, #0]
    8d18:	4b40      	ldr	r3, [pc, #256]	; (8e1c <xTaskIncrementTick+0x144>)
    8d1a:	601a      	str	r2, [r3, #0]
    8d1c:	4b40      	ldr	r3, [pc, #256]	; (8e20 <xTaskIncrementTick+0x148>)
    8d1e:	68fa      	ldr	r2, [r7, #12]
    8d20:	601a      	str	r2, [r3, #0]
    8d22:	4b40      	ldr	r3, [pc, #256]	; (8e24 <xTaskIncrementTick+0x14c>)
    8d24:	681b      	ldr	r3, [r3, #0]
    8d26:	1c5a      	adds	r2, r3, #1
    8d28:	4b3e      	ldr	r3, [pc, #248]	; (8e24 <xTaskIncrementTick+0x14c>)
    8d2a:	601a      	str	r2, [r3, #0]
    8d2c:	4b3e      	ldr	r3, [pc, #248]	; (8e28 <xTaskIncrementTick+0x150>)
    8d2e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    8d30:	4b3e      	ldr	r3, [pc, #248]	; (8e2c <xTaskIncrementTick+0x154>)
    8d32:	681b      	ldr	r3, [r3, #0]
    8d34:	693a      	ldr	r2, [r7, #16]
    8d36:	429a      	cmp	r2, r3
    8d38:	d34e      	bcc.n	8dd8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    8d3a:	4b38      	ldr	r3, [pc, #224]	; (8e1c <xTaskIncrementTick+0x144>)
    8d3c:	681b      	ldr	r3, [r3, #0]
    8d3e:	681b      	ldr	r3, [r3, #0]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d101      	bne.n	8d48 <xTaskIncrementTick+0x70>
    8d44:	2301      	movs	r3, #1
    8d46:	e000      	b.n	8d4a <xTaskIncrementTick+0x72>
    8d48:	2300      	movs	r3, #0
    8d4a:	2b00      	cmp	r3, #0
    8d4c:	d004      	beq.n	8d58 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8d4e:	4b37      	ldr	r3, [pc, #220]	; (8e2c <xTaskIncrementTick+0x154>)
    8d50:	2201      	movs	r2, #1
    8d52:	4252      	negs	r2, r2
    8d54:	601a      	str	r2, [r3, #0]
					break;
    8d56:	e03f      	b.n	8dd8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8d58:	4b30      	ldr	r3, [pc, #192]	; (8e1c <xTaskIncrementTick+0x144>)
    8d5a:	681b      	ldr	r3, [r3, #0]
    8d5c:	68db      	ldr	r3, [r3, #12]
    8d5e:	68db      	ldr	r3, [r3, #12]
    8d60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    8d62:	68bb      	ldr	r3, [r7, #8]
    8d64:	685b      	ldr	r3, [r3, #4]
    8d66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    8d68:	693a      	ldr	r2, [r7, #16]
    8d6a:	687b      	ldr	r3, [r7, #4]
    8d6c:	429a      	cmp	r2, r3
    8d6e:	d203      	bcs.n	8d78 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    8d70:	4b2e      	ldr	r3, [pc, #184]	; (8e2c <xTaskIncrementTick+0x154>)
    8d72:	687a      	ldr	r2, [r7, #4]
    8d74:	601a      	str	r2, [r3, #0]
						break;
    8d76:	e02f      	b.n	8dd8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8d78:	68bb      	ldr	r3, [r7, #8]
    8d7a:	3304      	adds	r3, #4
    8d7c:	0018      	movs	r0, r3
    8d7e:	4b2c      	ldr	r3, [pc, #176]	; (8e30 <xTaskIncrementTick+0x158>)
    8d80:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    8d82:	68bb      	ldr	r3, [r7, #8]
    8d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8d86:	2b00      	cmp	r3, #0
    8d88:	d004      	beq.n	8d94 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8d8a:	68bb      	ldr	r3, [r7, #8]
    8d8c:	3318      	adds	r3, #24
    8d8e:	0018      	movs	r0, r3
    8d90:	4b27      	ldr	r3, [pc, #156]	; (8e30 <xTaskIncrementTick+0x158>)
    8d92:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    8d94:	68bb      	ldr	r3, [r7, #8]
    8d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8d98:	4b26      	ldr	r3, [pc, #152]	; (8e34 <xTaskIncrementTick+0x15c>)
    8d9a:	681b      	ldr	r3, [r3, #0]
    8d9c:	429a      	cmp	r2, r3
    8d9e:	d903      	bls.n	8da8 <xTaskIncrementTick+0xd0>
    8da0:	68bb      	ldr	r3, [r7, #8]
    8da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8da4:	4b23      	ldr	r3, [pc, #140]	; (8e34 <xTaskIncrementTick+0x15c>)
    8da6:	601a      	str	r2, [r3, #0]
    8da8:	68bb      	ldr	r3, [r7, #8]
    8daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8dac:	0013      	movs	r3, r2
    8dae:	009b      	lsls	r3, r3, #2
    8db0:	189b      	adds	r3, r3, r2
    8db2:	009b      	lsls	r3, r3, #2
    8db4:	4a20      	ldr	r2, [pc, #128]	; (8e38 <xTaskIncrementTick+0x160>)
    8db6:	189a      	adds	r2, r3, r2
    8db8:	68bb      	ldr	r3, [r7, #8]
    8dba:	3304      	adds	r3, #4
    8dbc:	0019      	movs	r1, r3
    8dbe:	0010      	movs	r0, r2
    8dc0:	4b1e      	ldr	r3, [pc, #120]	; (8e3c <xTaskIncrementTick+0x164>)
    8dc2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    8dc4:	68bb      	ldr	r3, [r7, #8]
    8dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8dc8:	4b1d      	ldr	r3, [pc, #116]	; (8e40 <xTaskIncrementTick+0x168>)
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8dce:	429a      	cmp	r2, r3
    8dd0:	d3b3      	bcc.n	8d3a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    8dd2:	2301      	movs	r3, #1
    8dd4:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    8dd6:	e7b0      	b.n	8d3a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8dd8:	4b19      	ldr	r3, [pc, #100]	; (8e40 <xTaskIncrementTick+0x168>)
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8dde:	4916      	ldr	r1, [pc, #88]	; (8e38 <xTaskIncrementTick+0x160>)
    8de0:	0013      	movs	r3, r2
    8de2:	009b      	lsls	r3, r3, #2
    8de4:	189b      	adds	r3, r3, r2
    8de6:	009b      	lsls	r3, r3, #2
    8de8:	585b      	ldr	r3, [r3, r1]
    8dea:	2b01      	cmp	r3, #1
    8dec:	d907      	bls.n	8dfe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    8dee:	2301      	movs	r3, #1
    8df0:	617b      	str	r3, [r7, #20]
    8df2:	e004      	b.n	8dfe <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    8df4:	4b13      	ldr	r3, [pc, #76]	; (8e44 <xTaskIncrementTick+0x16c>)
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	1c5a      	adds	r2, r3, #1
    8dfa:	4b12      	ldr	r3, [pc, #72]	; (8e44 <xTaskIncrementTick+0x16c>)
    8dfc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    8dfe:	4b12      	ldr	r3, [pc, #72]	; (8e48 <xTaskIncrementTick+0x170>)
    8e00:	681b      	ldr	r3, [r3, #0]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d001      	beq.n	8e0a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    8e06:	2301      	movs	r3, #1
    8e08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    8e0a:	697b      	ldr	r3, [r7, #20]
}
    8e0c:	0018      	movs	r0, r3
    8e0e:	46bd      	mov	sp, r7
    8e10:	b006      	add	sp, #24
    8e12:	bd80      	pop	{r7, pc}
    8e14:	20003cb8 	.word	0x20003cb8
    8e18:	20003c94 	.word	0x20003c94
    8e1c:	20003c48 	.word	0x20003c48
    8e20:	20003c4c 	.word	0x20003c4c
    8e24:	20003ca8 	.word	0x20003ca8
    8e28:	000092cd 	.word	0x000092cd
    8e2c:	20003cb0 	.word	0x20003cb0
    8e30:	000078d1 	.word	0x000078d1
    8e34:	20003c98 	.word	0x20003c98
    8e38:	20003bbc 	.word	0x20003bbc
    8e3c:	00007821 	.word	0x00007821
    8e40:	20003bb8 	.word	0x20003bb8
    8e44:	20003ca0 	.word	0x20003ca0
    8e48:	20003ca4 	.word	0x20003ca4

00008e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b082      	sub	sp, #8
    8e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    8e52:	4b2a      	ldr	r3, [pc, #168]	; (8efc <vTaskSwitchContext+0xb0>)
    8e54:	681b      	ldr	r3, [r3, #0]
    8e56:	2b00      	cmp	r3, #0
    8e58:	d003      	beq.n	8e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8e5a:	4b29      	ldr	r3, [pc, #164]	; (8f00 <vTaskSwitchContext+0xb4>)
    8e5c:	2201      	movs	r2, #1
    8e5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8e60:	e048      	b.n	8ef4 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    8e62:	4b27      	ldr	r3, [pc, #156]	; (8f00 <vTaskSwitchContext+0xb4>)
    8e64:	2200      	movs	r2, #0
    8e66:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    8e68:	4b26      	ldr	r3, [pc, #152]	; (8f04 <vTaskSwitchContext+0xb8>)
    8e6a:	681b      	ldr	r3, [r3, #0]
    8e6c:	681a      	ldr	r2, [r3, #0]
    8e6e:	4b25      	ldr	r3, [pc, #148]	; (8f04 <vTaskSwitchContext+0xb8>)
    8e70:	681b      	ldr	r3, [r3, #0]
    8e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8e74:	429a      	cmp	r2, r3
    8e76:	d808      	bhi.n	8e8a <vTaskSwitchContext+0x3e>
    8e78:	4b22      	ldr	r3, [pc, #136]	; (8f04 <vTaskSwitchContext+0xb8>)
    8e7a:	681a      	ldr	r2, [r3, #0]
    8e7c:	4b21      	ldr	r3, [pc, #132]	; (8f04 <vTaskSwitchContext+0xb8>)
    8e7e:	681b      	ldr	r3, [r3, #0]
    8e80:	3334      	adds	r3, #52	; 0x34
    8e82:	0019      	movs	r1, r3
    8e84:	0010      	movs	r0, r2
    8e86:	4b20      	ldr	r3, [pc, #128]	; (8f08 <vTaskSwitchContext+0xbc>)
    8e88:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8e8a:	4b20      	ldr	r3, [pc, #128]	; (8f0c <vTaskSwitchContext+0xc0>)
    8e8c:	681b      	ldr	r3, [r3, #0]
    8e8e:	607b      	str	r3, [r7, #4]
    8e90:	e007      	b.n	8ea2 <vTaskSwitchContext+0x56>
    8e92:	687b      	ldr	r3, [r7, #4]
    8e94:	2b00      	cmp	r3, #0
    8e96:	d101      	bne.n	8e9c <vTaskSwitchContext+0x50>
    8e98:	b672      	cpsid	i
    8e9a:	e7fe      	b.n	8e9a <vTaskSwitchContext+0x4e>
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	3b01      	subs	r3, #1
    8ea0:	607b      	str	r3, [r7, #4]
    8ea2:	491b      	ldr	r1, [pc, #108]	; (8f10 <vTaskSwitchContext+0xc4>)
    8ea4:	687a      	ldr	r2, [r7, #4]
    8ea6:	0013      	movs	r3, r2
    8ea8:	009b      	lsls	r3, r3, #2
    8eaa:	189b      	adds	r3, r3, r2
    8eac:	009b      	lsls	r3, r3, #2
    8eae:	585b      	ldr	r3, [r3, r1]
    8eb0:	2b00      	cmp	r3, #0
    8eb2:	d0ee      	beq.n	8e92 <vTaskSwitchContext+0x46>
    8eb4:	687a      	ldr	r2, [r7, #4]
    8eb6:	0013      	movs	r3, r2
    8eb8:	009b      	lsls	r3, r3, #2
    8eba:	189b      	adds	r3, r3, r2
    8ebc:	009b      	lsls	r3, r3, #2
    8ebe:	4a14      	ldr	r2, [pc, #80]	; (8f10 <vTaskSwitchContext+0xc4>)
    8ec0:	189b      	adds	r3, r3, r2
    8ec2:	603b      	str	r3, [r7, #0]
    8ec4:	683b      	ldr	r3, [r7, #0]
    8ec6:	685b      	ldr	r3, [r3, #4]
    8ec8:	685a      	ldr	r2, [r3, #4]
    8eca:	683b      	ldr	r3, [r7, #0]
    8ecc:	605a      	str	r2, [r3, #4]
    8ece:	683b      	ldr	r3, [r7, #0]
    8ed0:	685a      	ldr	r2, [r3, #4]
    8ed2:	683b      	ldr	r3, [r7, #0]
    8ed4:	3308      	adds	r3, #8
    8ed6:	429a      	cmp	r2, r3
    8ed8:	d104      	bne.n	8ee4 <vTaskSwitchContext+0x98>
    8eda:	683b      	ldr	r3, [r7, #0]
    8edc:	685b      	ldr	r3, [r3, #4]
    8ede:	685a      	ldr	r2, [r3, #4]
    8ee0:	683b      	ldr	r3, [r7, #0]
    8ee2:	605a      	str	r2, [r3, #4]
    8ee4:	683b      	ldr	r3, [r7, #0]
    8ee6:	685b      	ldr	r3, [r3, #4]
    8ee8:	68da      	ldr	r2, [r3, #12]
    8eea:	4b06      	ldr	r3, [pc, #24]	; (8f04 <vTaskSwitchContext+0xb8>)
    8eec:	601a      	str	r2, [r3, #0]
    8eee:	4b07      	ldr	r3, [pc, #28]	; (8f0c <vTaskSwitchContext+0xc0>)
    8ef0:	687a      	ldr	r2, [r7, #4]
    8ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8ef4:	46c0      	nop			; (mov r8, r8)
    8ef6:	46bd      	mov	sp, r7
    8ef8:	b002      	add	sp, #8
    8efa:	bd80      	pop	{r7, pc}
    8efc:	20003cb8 	.word	0x20003cb8
    8f00:	20003ca4 	.word	0x20003ca4
    8f04:	20003bb8 	.word	0x20003bb8
    8f08:	0000a56d 	.word	0x0000a56d
    8f0c:	20003c98 	.word	0x20003c98
    8f10:	20003bbc 	.word	0x20003bbc

00008f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    8f14:	b580      	push	{r7, lr}
    8f16:	b082      	sub	sp, #8
    8f18:	af00      	add	r7, sp, #0
    8f1a:	6078      	str	r0, [r7, #4]
    8f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    8f1e:	687b      	ldr	r3, [r7, #4]
    8f20:	2b00      	cmp	r3, #0
    8f22:	d101      	bne.n	8f28 <vTaskPlaceOnEventList+0x14>
    8f24:	b672      	cpsid	i
    8f26:	e7fe      	b.n	8f26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8f28:	4b08      	ldr	r3, [pc, #32]	; (8f4c <vTaskPlaceOnEventList+0x38>)
    8f2a:	681b      	ldr	r3, [r3, #0]
    8f2c:	3318      	adds	r3, #24
    8f2e:	001a      	movs	r2, r3
    8f30:	687b      	ldr	r3, [r7, #4]
    8f32:	0011      	movs	r1, r2
    8f34:	0018      	movs	r0, r3
    8f36:	4b06      	ldr	r3, [pc, #24]	; (8f50 <vTaskPlaceOnEventList+0x3c>)
    8f38:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8f3a:	683b      	ldr	r3, [r7, #0]
    8f3c:	2101      	movs	r1, #1
    8f3e:	0018      	movs	r0, r3
    8f40:	4b04      	ldr	r3, [pc, #16]	; (8f54 <vTaskPlaceOnEventList+0x40>)
    8f42:	4798      	blx	r3
}
    8f44:	46c0      	nop			; (mov r8, r8)
    8f46:	46bd      	mov	sp, r7
    8f48:	b002      	add	sp, #8
    8f4a:	bd80      	pop	{r7, pc}
    8f4c:	20003bb8 	.word	0x20003bb8
    8f50:	00007865 	.word	0x00007865
    8f54:	000094f5 	.word	0x000094f5

00008f58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8f58:	b580      	push	{r7, lr}
    8f5a:	b084      	sub	sp, #16
    8f5c:	af00      	add	r7, sp, #0
    8f5e:	60f8      	str	r0, [r7, #12]
    8f60:	60b9      	str	r1, [r7, #8]
    8f62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    8f64:	68fb      	ldr	r3, [r7, #12]
    8f66:	2b00      	cmp	r3, #0
    8f68:	d101      	bne.n	8f6e <vTaskPlaceOnEventListRestricted+0x16>
    8f6a:	b672      	cpsid	i
    8f6c:	e7fe      	b.n	8f6c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8f6e:	4b0c      	ldr	r3, [pc, #48]	; (8fa0 <vTaskPlaceOnEventListRestricted+0x48>)
    8f70:	681b      	ldr	r3, [r3, #0]
    8f72:	3318      	adds	r3, #24
    8f74:	001a      	movs	r2, r3
    8f76:	68fb      	ldr	r3, [r7, #12]
    8f78:	0011      	movs	r1, r2
    8f7a:	0018      	movs	r0, r3
    8f7c:	4b09      	ldr	r3, [pc, #36]	; (8fa4 <vTaskPlaceOnEventListRestricted+0x4c>)
    8f7e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	2b00      	cmp	r3, #0
    8f84:	d002      	beq.n	8f8c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    8f86:	2301      	movs	r3, #1
    8f88:	425b      	negs	r3, r3
    8f8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8f8c:	687a      	ldr	r2, [r7, #4]
    8f8e:	68bb      	ldr	r3, [r7, #8]
    8f90:	0011      	movs	r1, r2
    8f92:	0018      	movs	r0, r3
    8f94:	4b04      	ldr	r3, [pc, #16]	; (8fa8 <vTaskPlaceOnEventListRestricted+0x50>)
    8f96:	4798      	blx	r3
	}
    8f98:	46c0      	nop			; (mov r8, r8)
    8f9a:	46bd      	mov	sp, r7
    8f9c:	b004      	add	sp, #16
    8f9e:	bd80      	pop	{r7, pc}
    8fa0:	20003bb8 	.word	0x20003bb8
    8fa4:	00007821 	.word	0x00007821
    8fa8:	000094f5 	.word	0x000094f5

00008fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    8fac:	b580      	push	{r7, lr}
    8fae:	b084      	sub	sp, #16
    8fb0:	af00      	add	r7, sp, #0
    8fb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	68db      	ldr	r3, [r3, #12]
    8fb8:	68db      	ldr	r3, [r3, #12]
    8fba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    8fbc:	68bb      	ldr	r3, [r7, #8]
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d101      	bne.n	8fc6 <xTaskRemoveFromEventList+0x1a>
    8fc2:	b672      	cpsid	i
    8fc4:	e7fe      	b.n	8fc4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    8fc6:	68bb      	ldr	r3, [r7, #8]
    8fc8:	3318      	adds	r3, #24
    8fca:	0018      	movs	r0, r3
    8fcc:	4b1f      	ldr	r3, [pc, #124]	; (904c <xTaskRemoveFromEventList+0xa0>)
    8fce:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8fd0:	4b1f      	ldr	r3, [pc, #124]	; (9050 <xTaskRemoveFromEventList+0xa4>)
    8fd2:	681b      	ldr	r3, [r3, #0]
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	d11d      	bne.n	9014 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8fd8:	68bb      	ldr	r3, [r7, #8]
    8fda:	3304      	adds	r3, #4
    8fdc:	0018      	movs	r0, r3
    8fde:	4b1b      	ldr	r3, [pc, #108]	; (904c <xTaskRemoveFromEventList+0xa0>)
    8fe0:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    8fe2:	68bb      	ldr	r3, [r7, #8]
    8fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8fe6:	4b1b      	ldr	r3, [pc, #108]	; (9054 <xTaskRemoveFromEventList+0xa8>)
    8fe8:	681b      	ldr	r3, [r3, #0]
    8fea:	429a      	cmp	r2, r3
    8fec:	d903      	bls.n	8ff6 <xTaskRemoveFromEventList+0x4a>
    8fee:	68bb      	ldr	r3, [r7, #8]
    8ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ff2:	4b18      	ldr	r3, [pc, #96]	; (9054 <xTaskRemoveFromEventList+0xa8>)
    8ff4:	601a      	str	r2, [r3, #0]
    8ff6:	68bb      	ldr	r3, [r7, #8]
    8ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8ffa:	0013      	movs	r3, r2
    8ffc:	009b      	lsls	r3, r3, #2
    8ffe:	189b      	adds	r3, r3, r2
    9000:	009b      	lsls	r3, r3, #2
    9002:	4a15      	ldr	r2, [pc, #84]	; (9058 <xTaskRemoveFromEventList+0xac>)
    9004:	189a      	adds	r2, r3, r2
    9006:	68bb      	ldr	r3, [r7, #8]
    9008:	3304      	adds	r3, #4
    900a:	0019      	movs	r1, r3
    900c:	0010      	movs	r0, r2
    900e:	4b13      	ldr	r3, [pc, #76]	; (905c <xTaskRemoveFromEventList+0xb0>)
    9010:	4798      	blx	r3
    9012:	e007      	b.n	9024 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    9014:	68bb      	ldr	r3, [r7, #8]
    9016:	3318      	adds	r3, #24
    9018:	001a      	movs	r2, r3
    901a:	4b11      	ldr	r3, [pc, #68]	; (9060 <xTaskRemoveFromEventList+0xb4>)
    901c:	0011      	movs	r1, r2
    901e:	0018      	movs	r0, r3
    9020:	4b0e      	ldr	r3, [pc, #56]	; (905c <xTaskRemoveFromEventList+0xb0>)
    9022:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    9024:	68bb      	ldr	r3, [r7, #8]
    9026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9028:	4b0e      	ldr	r3, [pc, #56]	; (9064 <xTaskRemoveFromEventList+0xb8>)
    902a:	681b      	ldr	r3, [r3, #0]
    902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    902e:	429a      	cmp	r2, r3
    9030:	d905      	bls.n	903e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    9032:	2301      	movs	r3, #1
    9034:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    9036:	4b0c      	ldr	r3, [pc, #48]	; (9068 <xTaskRemoveFromEventList+0xbc>)
    9038:	2201      	movs	r2, #1
    903a:	601a      	str	r2, [r3, #0]
    903c:	e001      	b.n	9042 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    903e:	2300      	movs	r3, #0
    9040:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    9042:	68fb      	ldr	r3, [r7, #12]
}
    9044:	0018      	movs	r0, r3
    9046:	46bd      	mov	sp, r7
    9048:	b004      	add	sp, #16
    904a:	bd80      	pop	{r7, pc}
    904c:	000078d1 	.word	0x000078d1
    9050:	20003cb8 	.word	0x20003cb8
    9054:	20003c98 	.word	0x20003c98
    9058:	20003bbc 	.word	0x20003bbc
    905c:	00007821 	.word	0x00007821
    9060:	20003c50 	.word	0x20003c50
    9064:	20003bb8 	.word	0x20003bb8
    9068:	20003ca4 	.word	0x20003ca4

0000906c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	af00      	add	r7, sp, #0
    9072:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    9074:	687b      	ldr	r3, [r7, #4]
    9076:	2b00      	cmp	r3, #0
    9078:	d101      	bne.n	907e <vTaskSetTimeOutState+0x12>
    907a:	b672      	cpsid	i
    907c:	e7fe      	b.n	907c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    907e:	4b06      	ldr	r3, [pc, #24]	; (9098 <vTaskSetTimeOutState+0x2c>)
    9080:	681a      	ldr	r2, [r3, #0]
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    9086:	4b05      	ldr	r3, [pc, #20]	; (909c <vTaskSetTimeOutState+0x30>)
    9088:	681a      	ldr	r2, [r3, #0]
    908a:	687b      	ldr	r3, [r7, #4]
    908c:	605a      	str	r2, [r3, #4]
}
    908e:	46c0      	nop			; (mov r8, r8)
    9090:	46bd      	mov	sp, r7
    9092:	b002      	add	sp, #8
    9094:	bd80      	pop	{r7, pc}
    9096:	46c0      	nop			; (mov r8, r8)
    9098:	20003ca8 	.word	0x20003ca8
    909c:	20003c94 	.word	0x20003c94

000090a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    90a0:	b580      	push	{r7, lr}
    90a2:	b084      	sub	sp, #16
    90a4:	af00      	add	r7, sp, #0
    90a6:	6078      	str	r0, [r7, #4]
    90a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    90aa:	687b      	ldr	r3, [r7, #4]
    90ac:	2b00      	cmp	r3, #0
    90ae:	d101      	bne.n	90b4 <xTaskCheckForTimeOut+0x14>
    90b0:	b672      	cpsid	i
    90b2:	e7fe      	b.n	90b2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    90b4:	683b      	ldr	r3, [r7, #0]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d101      	bne.n	90be <xTaskCheckForTimeOut+0x1e>
    90ba:	b672      	cpsid	i
    90bc:	e7fe      	b.n	90bc <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    90be:	4b1d      	ldr	r3, [pc, #116]	; (9134 <xTaskCheckForTimeOut+0x94>)
    90c0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    90c2:	4b1d      	ldr	r3, [pc, #116]	; (9138 <xTaskCheckForTimeOut+0x98>)
    90c4:	681b      	ldr	r3, [r3, #0]
    90c6:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    90c8:	683b      	ldr	r3, [r7, #0]
    90ca:	681b      	ldr	r3, [r3, #0]
    90cc:	3301      	adds	r3, #1
    90ce:	d102      	bne.n	90d6 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    90d0:	2300      	movs	r3, #0
    90d2:	60fb      	str	r3, [r7, #12]
    90d4:	e027      	b.n	9126 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    90d6:	687b      	ldr	r3, [r7, #4]
    90d8:	681a      	ldr	r2, [r3, #0]
    90da:	4b18      	ldr	r3, [pc, #96]	; (913c <xTaskCheckForTimeOut+0x9c>)
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	429a      	cmp	r2, r3
    90e0:	d007      	beq.n	90f2 <xTaskCheckForTimeOut+0x52>
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	685a      	ldr	r2, [r3, #4]
    90e6:	68bb      	ldr	r3, [r7, #8]
    90e8:	429a      	cmp	r2, r3
    90ea:	d802      	bhi.n	90f2 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    90ec:	2301      	movs	r3, #1
    90ee:	60fb      	str	r3, [r7, #12]
    90f0:	e019      	b.n	9126 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    90f2:	687b      	ldr	r3, [r7, #4]
    90f4:	685b      	ldr	r3, [r3, #4]
    90f6:	68ba      	ldr	r2, [r7, #8]
    90f8:	1ad2      	subs	r2, r2, r3
    90fa:	683b      	ldr	r3, [r7, #0]
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	429a      	cmp	r2, r3
    9100:	d20f      	bcs.n	9122 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    9102:	683b      	ldr	r3, [r7, #0]
    9104:	681a      	ldr	r2, [r3, #0]
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	6859      	ldr	r1, [r3, #4]
    910a:	68bb      	ldr	r3, [r7, #8]
    910c:	1acb      	subs	r3, r1, r3
    910e:	18d2      	adds	r2, r2, r3
    9110:	683b      	ldr	r3, [r7, #0]
    9112:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	0018      	movs	r0, r3
    9118:	4b09      	ldr	r3, [pc, #36]	; (9140 <xTaskCheckForTimeOut+0xa0>)
    911a:	4798      	blx	r3
			xReturn = pdFALSE;
    911c:	2300      	movs	r3, #0
    911e:	60fb      	str	r3, [r7, #12]
    9120:	e001      	b.n	9126 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    9122:	2301      	movs	r3, #1
    9124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    9126:	4b07      	ldr	r3, [pc, #28]	; (9144 <xTaskCheckForTimeOut+0xa4>)
    9128:	4798      	blx	r3

	return xReturn;
    912a:	68fb      	ldr	r3, [r7, #12]
}
    912c:	0018      	movs	r0, r3
    912e:	46bd      	mov	sp, r7
    9130:	b004      	add	sp, #16
    9132:	bd80      	pop	{r7, pc}
    9134:	00007a49 	.word	0x00007a49
    9138:	20003c94 	.word	0x20003c94
    913c:	20003ca8 	.word	0x20003ca8
    9140:	0000906d 	.word	0x0000906d
    9144:	00007a6d 	.word	0x00007a6d

00009148 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    9148:	b580      	push	{r7, lr}
    914a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    914c:	4b02      	ldr	r3, [pc, #8]	; (9158 <vTaskMissedYield+0x10>)
    914e:	2201      	movs	r2, #1
    9150:	601a      	str	r2, [r3, #0]
}
    9152:	46c0      	nop			; (mov r8, r8)
    9154:	46bd      	mov	sp, r7
    9156:	bd80      	pop	{r7, pc}
    9158:	20003ca4 	.word	0x20003ca4

0000915c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    915c:	b580      	push	{r7, lr}
    915e:	b082      	sub	sp, #8
    9160:	af00      	add	r7, sp, #0
    9162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9164:	4b05      	ldr	r3, [pc, #20]	; (917c <prvIdleTask+0x20>)
    9166:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    9168:	4b05      	ldr	r3, [pc, #20]	; (9180 <prvIdleTask+0x24>)
    916a:	681b      	ldr	r3, [r3, #0]
    916c:	2b01      	cmp	r3, #1
    916e:	d901      	bls.n	9174 <prvIdleTask+0x18>
			{
				taskYIELD();
    9170:	4b04      	ldr	r3, [pc, #16]	; (9184 <prvIdleTask+0x28>)
    9172:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    9174:	4b04      	ldr	r3, [pc, #16]	; (9188 <prvIdleTask+0x2c>)
    9176:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    9178:	e7f4      	b.n	9164 <prvIdleTask+0x8>
    917a:	46c0      	nop			; (mov r8, r8)
    917c:	00009219 	.word	0x00009219
    9180:	20003bbc 	.word	0x20003bbc
    9184:	00007a29 	.word	0x00007a29
    9188:	0000a559 	.word	0x0000a559

0000918c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    918c:	b580      	push	{r7, lr}
    918e:	b082      	sub	sp, #8
    9190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9192:	2300      	movs	r3, #0
    9194:	607b      	str	r3, [r7, #4]
    9196:	e00c      	b.n	91b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9198:	687a      	ldr	r2, [r7, #4]
    919a:	0013      	movs	r3, r2
    919c:	009b      	lsls	r3, r3, #2
    919e:	189b      	adds	r3, r3, r2
    91a0:	009b      	lsls	r3, r3, #2
    91a2:	4a14      	ldr	r2, [pc, #80]	; (91f4 <prvInitialiseTaskLists+0x68>)
    91a4:	189b      	adds	r3, r3, r2
    91a6:	0018      	movs	r0, r3
    91a8:	4b13      	ldr	r3, [pc, #76]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91aa:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	3301      	adds	r3, #1
    91b0:	607b      	str	r3, [r7, #4]
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	2b04      	cmp	r3, #4
    91b6:	d9ef      	bls.n	9198 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    91b8:	4b10      	ldr	r3, [pc, #64]	; (91fc <prvInitialiseTaskLists+0x70>)
    91ba:	0018      	movs	r0, r3
    91bc:	4b0e      	ldr	r3, [pc, #56]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91be:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    91c0:	4b0f      	ldr	r3, [pc, #60]	; (9200 <prvInitialiseTaskLists+0x74>)
    91c2:	0018      	movs	r0, r3
    91c4:	4b0c      	ldr	r3, [pc, #48]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91c6:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    91c8:	4b0e      	ldr	r3, [pc, #56]	; (9204 <prvInitialiseTaskLists+0x78>)
    91ca:	0018      	movs	r0, r3
    91cc:	4b0a      	ldr	r3, [pc, #40]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91ce:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    91d0:	4b0d      	ldr	r3, [pc, #52]	; (9208 <prvInitialiseTaskLists+0x7c>)
    91d2:	0018      	movs	r0, r3
    91d4:	4b08      	ldr	r3, [pc, #32]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91d6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    91d8:	4b0c      	ldr	r3, [pc, #48]	; (920c <prvInitialiseTaskLists+0x80>)
    91da:	0018      	movs	r0, r3
    91dc:	4b06      	ldr	r3, [pc, #24]	; (91f8 <prvInitialiseTaskLists+0x6c>)
    91de:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    91e0:	4b0b      	ldr	r3, [pc, #44]	; (9210 <prvInitialiseTaskLists+0x84>)
    91e2:	4a06      	ldr	r2, [pc, #24]	; (91fc <prvInitialiseTaskLists+0x70>)
    91e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    91e6:	4b0b      	ldr	r3, [pc, #44]	; (9214 <prvInitialiseTaskLists+0x88>)
    91e8:	4a05      	ldr	r2, [pc, #20]	; (9200 <prvInitialiseTaskLists+0x74>)
    91ea:	601a      	str	r2, [r3, #0]
}
    91ec:	46c0      	nop			; (mov r8, r8)
    91ee:	46bd      	mov	sp, r7
    91f0:	b002      	add	sp, #8
    91f2:	bd80      	pop	{r7, pc}
    91f4:	20003bbc 	.word	0x20003bbc
    91f8:	000077cd 	.word	0x000077cd
    91fc:	20003c20 	.word	0x20003c20
    9200:	20003c34 	.word	0x20003c34
    9204:	20003c50 	.word	0x20003c50
    9208:	20003c64 	.word	0x20003c64
    920c:	20003c7c 	.word	0x20003c7c
    9210:	20003c48 	.word	0x20003c48
    9214:	20003c4c 	.word	0x20003c4c

00009218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    9218:	b580      	push	{r7, lr}
    921a:	b082      	sub	sp, #8
    921c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    921e:	e027      	b.n	9270 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    9220:	4b17      	ldr	r3, [pc, #92]	; (9280 <prvCheckTasksWaitingTermination+0x68>)
    9222:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    9224:	4b17      	ldr	r3, [pc, #92]	; (9284 <prvCheckTasksWaitingTermination+0x6c>)
    9226:	681b      	ldr	r3, [r3, #0]
    9228:	425a      	negs	r2, r3
    922a:	4153      	adcs	r3, r2
    922c:	b2db      	uxtb	r3, r3
    922e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    9230:	4b15      	ldr	r3, [pc, #84]	; (9288 <prvCheckTasksWaitingTermination+0x70>)
    9232:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	2b00      	cmp	r3, #0
    9238:	d11a      	bne.n	9270 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    923a:	4b14      	ldr	r3, [pc, #80]	; (928c <prvCheckTasksWaitingTermination+0x74>)
    923c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    923e:	4b11      	ldr	r3, [pc, #68]	; (9284 <prvCheckTasksWaitingTermination+0x6c>)
    9240:	68db      	ldr	r3, [r3, #12]
    9242:	68db      	ldr	r3, [r3, #12]
    9244:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9246:	683b      	ldr	r3, [r7, #0]
    9248:	3304      	adds	r3, #4
    924a:	0018      	movs	r0, r3
    924c:	4b10      	ldr	r3, [pc, #64]	; (9290 <prvCheckTasksWaitingTermination+0x78>)
    924e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    9250:	4b10      	ldr	r3, [pc, #64]	; (9294 <prvCheckTasksWaitingTermination+0x7c>)
    9252:	681b      	ldr	r3, [r3, #0]
    9254:	1e5a      	subs	r2, r3, #1
    9256:	4b0f      	ldr	r3, [pc, #60]	; (9294 <prvCheckTasksWaitingTermination+0x7c>)
    9258:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    925a:	4b0f      	ldr	r3, [pc, #60]	; (9298 <prvCheckTasksWaitingTermination+0x80>)
    925c:	681b      	ldr	r3, [r3, #0]
    925e:	1e5a      	subs	r2, r3, #1
    9260:	4b0d      	ldr	r3, [pc, #52]	; (9298 <prvCheckTasksWaitingTermination+0x80>)
    9262:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    9264:	4b0d      	ldr	r3, [pc, #52]	; (929c <prvCheckTasksWaitingTermination+0x84>)
    9266:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    9268:	683b      	ldr	r3, [r7, #0]
    926a:	0018      	movs	r0, r3
    926c:	4b0c      	ldr	r3, [pc, #48]	; (92a0 <prvCheckTasksWaitingTermination+0x88>)
    926e:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9270:	4b09      	ldr	r3, [pc, #36]	; (9298 <prvCheckTasksWaitingTermination+0x80>)
    9272:	681b      	ldr	r3, [r3, #0]
    9274:	2b00      	cmp	r3, #0
    9276:	d1d3      	bne.n	9220 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    9278:	46c0      	nop			; (mov r8, r8)
    927a:	46bd      	mov	sp, r7
    927c:	b002      	add	sp, #8
    927e:	bd80      	pop	{r7, pc}
    9280:	00008b71 	.word	0x00008b71
    9284:	20003c64 	.word	0x20003c64
    9288:	00008b89 	.word	0x00008b89
    928c:	00007a49 	.word	0x00007a49
    9290:	000078d1 	.word	0x000078d1
    9294:	20003c90 	.word	0x20003c90
    9298:	20003c78 	.word	0x20003c78
    929c:	00007a6d 	.word	0x00007a6d
    92a0:	000092a5 	.word	0x000092a5

000092a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    92a4:	b580      	push	{r7, lr}
    92a6:	b082      	sub	sp, #8
    92a8:	af00      	add	r7, sp, #0
    92aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    92ac:	687b      	ldr	r3, [r7, #4]
    92ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    92b0:	0018      	movs	r0, r3
    92b2:	4b05      	ldr	r3, [pc, #20]	; (92c8 <prvDeleteTCB+0x24>)
    92b4:	4798      	blx	r3
			vPortFree( pxTCB );
    92b6:	687b      	ldr	r3, [r7, #4]
    92b8:	0018      	movs	r0, r3
    92ba:	4b03      	ldr	r3, [pc, #12]	; (92c8 <prvDeleteTCB+0x24>)
    92bc:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    92be:	46c0      	nop			; (mov r8, r8)
    92c0:	46bd      	mov	sp, r7
    92c2:	b002      	add	sp, #8
    92c4:	bd80      	pop	{r7, pc}
    92c6:	46c0      	nop			; (mov r8, r8)
    92c8:	00007bf1 	.word	0x00007bf1

000092cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    92cc:	b580      	push	{r7, lr}
    92ce:	b082      	sub	sp, #8
    92d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    92d2:	4b0e      	ldr	r3, [pc, #56]	; (930c <prvResetNextTaskUnblockTime+0x40>)
    92d4:	681b      	ldr	r3, [r3, #0]
    92d6:	681b      	ldr	r3, [r3, #0]
    92d8:	2b00      	cmp	r3, #0
    92da:	d101      	bne.n	92e0 <prvResetNextTaskUnblockTime+0x14>
    92dc:	2301      	movs	r3, #1
    92de:	e000      	b.n	92e2 <prvResetNextTaskUnblockTime+0x16>
    92e0:	2300      	movs	r3, #0
    92e2:	2b00      	cmp	r3, #0
    92e4:	d004      	beq.n	92f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    92e6:	4b0a      	ldr	r3, [pc, #40]	; (9310 <prvResetNextTaskUnblockTime+0x44>)
    92e8:	2201      	movs	r2, #1
    92ea:	4252      	negs	r2, r2
    92ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    92ee:	e008      	b.n	9302 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    92f0:	4b06      	ldr	r3, [pc, #24]	; (930c <prvResetNextTaskUnblockTime+0x40>)
    92f2:	681b      	ldr	r3, [r3, #0]
    92f4:	68db      	ldr	r3, [r3, #12]
    92f6:	68db      	ldr	r3, [r3, #12]
    92f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    92fa:	687b      	ldr	r3, [r7, #4]
    92fc:	685a      	ldr	r2, [r3, #4]
    92fe:	4b04      	ldr	r3, [pc, #16]	; (9310 <prvResetNextTaskUnblockTime+0x44>)
    9300:	601a      	str	r2, [r3, #0]
	}
}
    9302:	46c0      	nop			; (mov r8, r8)
    9304:	46bd      	mov	sp, r7
    9306:	b002      	add	sp, #8
    9308:	bd80      	pop	{r7, pc}
    930a:	46c0      	nop			; (mov r8, r8)
    930c:	20003c48 	.word	0x20003c48
    9310:	20003cb0 	.word	0x20003cb0

00009314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    9314:	b580      	push	{r7, lr}
    9316:	b082      	sub	sp, #8
    9318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    931a:	4b0a      	ldr	r3, [pc, #40]	; (9344 <xTaskGetSchedulerState+0x30>)
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	2b00      	cmp	r3, #0
    9320:	d102      	bne.n	9328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    9322:	2301      	movs	r3, #1
    9324:	607b      	str	r3, [r7, #4]
    9326:	e008      	b.n	933a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9328:	4b07      	ldr	r3, [pc, #28]	; (9348 <xTaskGetSchedulerState+0x34>)
    932a:	681b      	ldr	r3, [r3, #0]
    932c:	2b00      	cmp	r3, #0
    932e:	d102      	bne.n	9336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    9330:	2302      	movs	r3, #2
    9332:	607b      	str	r3, [r7, #4]
    9334:	e001      	b.n	933a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    9336:	2300      	movs	r3, #0
    9338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    933a:	687b      	ldr	r3, [r7, #4]
	}
    933c:	0018      	movs	r0, r3
    933e:	46bd      	mov	sp, r7
    9340:	b002      	add	sp, #8
    9342:	bd80      	pop	{r7, pc}
    9344:	20003c9c 	.word	0x20003c9c
    9348:	20003cb8 	.word	0x20003cb8

0000934c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    934c:	b580      	push	{r7, lr}
    934e:	b084      	sub	sp, #16
    9350:	af00      	add	r7, sp, #0
    9352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9354:	687b      	ldr	r3, [r7, #4]
    9356:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    9358:	687b      	ldr	r3, [r7, #4]
    935a:	2b00      	cmp	r3, #0
    935c:	d04a      	beq.n	93f4 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    935e:	68fb      	ldr	r3, [r7, #12]
    9360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9362:	4b26      	ldr	r3, [pc, #152]	; (93fc <vTaskPriorityInherit+0xb0>)
    9364:	681b      	ldr	r3, [r3, #0]
    9366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9368:	429a      	cmp	r2, r3
    936a:	d243      	bcs.n	93f4 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    936c:	68fb      	ldr	r3, [r7, #12]
    936e:	699b      	ldr	r3, [r3, #24]
    9370:	2b00      	cmp	r3, #0
    9372:	db06      	blt.n	9382 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9374:	4b21      	ldr	r3, [pc, #132]	; (93fc <vTaskPriorityInherit+0xb0>)
    9376:	681b      	ldr	r3, [r3, #0]
    9378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    937a:	2205      	movs	r2, #5
    937c:	1ad2      	subs	r2, r2, r3
    937e:	68fb      	ldr	r3, [r7, #12]
    9380:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    9382:	68fb      	ldr	r3, [r7, #12]
    9384:	6959      	ldr	r1, [r3, #20]
    9386:	68fb      	ldr	r3, [r7, #12]
    9388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    938a:	0013      	movs	r3, r2
    938c:	009b      	lsls	r3, r3, #2
    938e:	189b      	adds	r3, r3, r2
    9390:	009b      	lsls	r3, r3, #2
    9392:	4a1b      	ldr	r2, [pc, #108]	; (9400 <vTaskPriorityInherit+0xb4>)
    9394:	189b      	adds	r3, r3, r2
    9396:	4299      	cmp	r1, r3
    9398:	d101      	bne.n	939e <vTaskPriorityInherit+0x52>
    939a:	2301      	movs	r3, #1
    939c:	e000      	b.n	93a0 <vTaskPriorityInherit+0x54>
    939e:	2300      	movs	r3, #0
    93a0:	2b00      	cmp	r3, #0
    93a2:	d022      	beq.n	93ea <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    93a4:	68fb      	ldr	r3, [r7, #12]
    93a6:	3304      	adds	r3, #4
    93a8:	0018      	movs	r0, r3
    93aa:	4b16      	ldr	r3, [pc, #88]	; (9404 <vTaskPriorityInherit+0xb8>)
    93ac:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    93ae:	4b13      	ldr	r3, [pc, #76]	; (93fc <vTaskPriorityInherit+0xb0>)
    93b0:	681b      	ldr	r3, [r3, #0]
    93b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93b4:	68fb      	ldr	r3, [r7, #12]
    93b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    93b8:	68fb      	ldr	r3, [r7, #12]
    93ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93bc:	4b12      	ldr	r3, [pc, #72]	; (9408 <vTaskPriorityInherit+0xbc>)
    93be:	681b      	ldr	r3, [r3, #0]
    93c0:	429a      	cmp	r2, r3
    93c2:	d903      	bls.n	93cc <vTaskPriorityInherit+0x80>
    93c4:	68fb      	ldr	r3, [r7, #12]
    93c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93c8:	4b0f      	ldr	r3, [pc, #60]	; (9408 <vTaskPriorityInherit+0xbc>)
    93ca:	601a      	str	r2, [r3, #0]
    93cc:	68fb      	ldr	r3, [r7, #12]
    93ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93d0:	0013      	movs	r3, r2
    93d2:	009b      	lsls	r3, r3, #2
    93d4:	189b      	adds	r3, r3, r2
    93d6:	009b      	lsls	r3, r3, #2
    93d8:	4a09      	ldr	r2, [pc, #36]	; (9400 <vTaskPriorityInherit+0xb4>)
    93da:	189a      	adds	r2, r3, r2
    93dc:	68fb      	ldr	r3, [r7, #12]
    93de:	3304      	adds	r3, #4
    93e0:	0019      	movs	r1, r3
    93e2:	0010      	movs	r0, r2
    93e4:	4b09      	ldr	r3, [pc, #36]	; (940c <vTaskPriorityInherit+0xc0>)
    93e6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    93e8:	e004      	b.n	93f4 <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    93ea:	4b04      	ldr	r3, [pc, #16]	; (93fc <vTaskPriorityInherit+0xb0>)
    93ec:	681b      	ldr	r3, [r3, #0]
    93ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93f0:	68fb      	ldr	r3, [r7, #12]
    93f2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    93f4:	46c0      	nop			; (mov r8, r8)
    93f6:	46bd      	mov	sp, r7
    93f8:	b004      	add	sp, #16
    93fa:	bd80      	pop	{r7, pc}
    93fc:	20003bb8 	.word	0x20003bb8
    9400:	20003bbc 	.word	0x20003bbc
    9404:	000078d1 	.word	0x000078d1
    9408:	20003c98 	.word	0x20003c98
    940c:	00007821 	.word	0x00007821

00009410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    9410:	b580      	push	{r7, lr}
    9412:	b084      	sub	sp, #16
    9414:	af00      	add	r7, sp, #0
    9416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9418:	687b      	ldr	r3, [r7, #4]
    941a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    941c:	2300      	movs	r3, #0
    941e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    9420:	687b      	ldr	r3, [r7, #4]
    9422:	2b00      	cmp	r3, #0
    9424:	d044      	beq.n	94b0 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    9426:	4b25      	ldr	r3, [pc, #148]	; (94bc <xTaskPriorityDisinherit+0xac>)
    9428:	681b      	ldr	r3, [r3, #0]
    942a:	68ba      	ldr	r2, [r7, #8]
    942c:	429a      	cmp	r2, r3
    942e:	d001      	beq.n	9434 <xTaskPriorityDisinherit+0x24>
    9430:	b672      	cpsid	i
    9432:	e7fe      	b.n	9432 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    9434:	68bb      	ldr	r3, [r7, #8]
    9436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9438:	2b00      	cmp	r3, #0
    943a:	d101      	bne.n	9440 <xTaskPriorityDisinherit+0x30>
    943c:	b672      	cpsid	i
    943e:	e7fe      	b.n	943e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    9440:	68bb      	ldr	r3, [r7, #8]
    9442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9444:	1e5a      	subs	r2, r3, #1
    9446:	68bb      	ldr	r3, [r7, #8]
    9448:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    944a:	68bb      	ldr	r3, [r7, #8]
    944c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    944e:	68bb      	ldr	r3, [r7, #8]
    9450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9452:	429a      	cmp	r2, r3
    9454:	d02c      	beq.n	94b0 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    9456:	68bb      	ldr	r3, [r7, #8]
    9458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    945a:	2b00      	cmp	r3, #0
    945c:	d128      	bne.n	94b0 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    945e:	68bb      	ldr	r3, [r7, #8]
    9460:	3304      	adds	r3, #4
    9462:	0018      	movs	r0, r3
    9464:	4b16      	ldr	r3, [pc, #88]	; (94c0 <xTaskPriorityDisinherit+0xb0>)
    9466:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    9468:	68bb      	ldr	r3, [r7, #8]
    946a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    946c:	68bb      	ldr	r3, [r7, #8]
    946e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9470:	68bb      	ldr	r3, [r7, #8]
    9472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9474:	2205      	movs	r2, #5
    9476:	1ad2      	subs	r2, r2, r3
    9478:	68bb      	ldr	r3, [r7, #8]
    947a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    947c:	68bb      	ldr	r3, [r7, #8]
    947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9480:	4b10      	ldr	r3, [pc, #64]	; (94c4 <xTaskPriorityDisinherit+0xb4>)
    9482:	681b      	ldr	r3, [r3, #0]
    9484:	429a      	cmp	r2, r3
    9486:	d903      	bls.n	9490 <xTaskPriorityDisinherit+0x80>
    9488:	68bb      	ldr	r3, [r7, #8]
    948a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    948c:	4b0d      	ldr	r3, [pc, #52]	; (94c4 <xTaskPriorityDisinherit+0xb4>)
    948e:	601a      	str	r2, [r3, #0]
    9490:	68bb      	ldr	r3, [r7, #8]
    9492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9494:	0013      	movs	r3, r2
    9496:	009b      	lsls	r3, r3, #2
    9498:	189b      	adds	r3, r3, r2
    949a:	009b      	lsls	r3, r3, #2
    949c:	4a0a      	ldr	r2, [pc, #40]	; (94c8 <xTaskPriorityDisinherit+0xb8>)
    949e:	189a      	adds	r2, r3, r2
    94a0:	68bb      	ldr	r3, [r7, #8]
    94a2:	3304      	adds	r3, #4
    94a4:	0019      	movs	r1, r3
    94a6:	0010      	movs	r0, r2
    94a8:	4b08      	ldr	r3, [pc, #32]	; (94cc <xTaskPriorityDisinherit+0xbc>)
    94aa:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    94ac:	2301      	movs	r3, #1
    94ae:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    94b0:	68fb      	ldr	r3, [r7, #12]
	}
    94b2:	0018      	movs	r0, r3
    94b4:	46bd      	mov	sp, r7
    94b6:	b004      	add	sp, #16
    94b8:	bd80      	pop	{r7, pc}
    94ba:	46c0      	nop			; (mov r8, r8)
    94bc:	20003bb8 	.word	0x20003bb8
    94c0:	000078d1 	.word	0x000078d1
    94c4:	20003c98 	.word	0x20003c98
    94c8:	20003bbc 	.word	0x20003bbc
    94cc:	00007821 	.word	0x00007821

000094d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    94d0:	b580      	push	{r7, lr}
    94d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    94d4:	4b06      	ldr	r3, [pc, #24]	; (94f0 <pvTaskIncrementMutexHeldCount+0x20>)
    94d6:	681b      	ldr	r3, [r3, #0]
    94d8:	2b00      	cmp	r3, #0
    94da:	d004      	beq.n	94e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    94dc:	4b04      	ldr	r3, [pc, #16]	; (94f0 <pvTaskIncrementMutexHeldCount+0x20>)
    94de:	681b      	ldr	r3, [r3, #0]
    94e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    94e2:	3201      	adds	r2, #1
    94e4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    94e6:	4b02      	ldr	r3, [pc, #8]	; (94f0 <pvTaskIncrementMutexHeldCount+0x20>)
    94e8:	681b      	ldr	r3, [r3, #0]
	}
    94ea:	0018      	movs	r0, r3
    94ec:	46bd      	mov	sp, r7
    94ee:	bd80      	pop	{r7, pc}
    94f0:	20003bb8 	.word	0x20003bb8

000094f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b084      	sub	sp, #16
    94f8:	af00      	add	r7, sp, #0
    94fa:	6078      	str	r0, [r7, #4]
    94fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    94fe:	4b21      	ldr	r3, [pc, #132]	; (9584 <prvAddCurrentTaskToDelayedList+0x90>)
    9500:	681b      	ldr	r3, [r3, #0]
    9502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9504:	4b20      	ldr	r3, [pc, #128]	; (9588 <prvAddCurrentTaskToDelayedList+0x94>)
    9506:	681b      	ldr	r3, [r3, #0]
    9508:	3304      	adds	r3, #4
    950a:	0018      	movs	r0, r3
    950c:	4b1f      	ldr	r3, [pc, #124]	; (958c <prvAddCurrentTaskToDelayedList+0x98>)
    950e:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	3301      	adds	r3, #1
    9514:	d10b      	bne.n	952e <prvAddCurrentTaskToDelayedList+0x3a>
    9516:	683b      	ldr	r3, [r7, #0]
    9518:	2b00      	cmp	r3, #0
    951a:	d008      	beq.n	952e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    951c:	4b1a      	ldr	r3, [pc, #104]	; (9588 <prvAddCurrentTaskToDelayedList+0x94>)
    951e:	681b      	ldr	r3, [r3, #0]
    9520:	1d1a      	adds	r2, r3, #4
    9522:	4b1b      	ldr	r3, [pc, #108]	; (9590 <prvAddCurrentTaskToDelayedList+0x9c>)
    9524:	0011      	movs	r1, r2
    9526:	0018      	movs	r0, r3
    9528:	4b1a      	ldr	r3, [pc, #104]	; (9594 <prvAddCurrentTaskToDelayedList+0xa0>)
    952a:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    952c:	e026      	b.n	957c <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    952e:	68fa      	ldr	r2, [r7, #12]
    9530:	687b      	ldr	r3, [r7, #4]
    9532:	18d3      	adds	r3, r2, r3
    9534:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9536:	4b14      	ldr	r3, [pc, #80]	; (9588 <prvAddCurrentTaskToDelayedList+0x94>)
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	68ba      	ldr	r2, [r7, #8]
    953c:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    953e:	68ba      	ldr	r2, [r7, #8]
    9540:	68fb      	ldr	r3, [r7, #12]
    9542:	429a      	cmp	r2, r3
    9544:	d209      	bcs.n	955a <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9546:	4b14      	ldr	r3, [pc, #80]	; (9598 <prvAddCurrentTaskToDelayedList+0xa4>)
    9548:	681a      	ldr	r2, [r3, #0]
    954a:	4b0f      	ldr	r3, [pc, #60]	; (9588 <prvAddCurrentTaskToDelayedList+0x94>)
    954c:	681b      	ldr	r3, [r3, #0]
    954e:	3304      	adds	r3, #4
    9550:	0019      	movs	r1, r3
    9552:	0010      	movs	r0, r2
    9554:	4b11      	ldr	r3, [pc, #68]	; (959c <prvAddCurrentTaskToDelayedList+0xa8>)
    9556:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9558:	e010      	b.n	957c <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    955a:	4b11      	ldr	r3, [pc, #68]	; (95a0 <prvAddCurrentTaskToDelayedList+0xac>)
    955c:	681a      	ldr	r2, [r3, #0]
    955e:	4b0a      	ldr	r3, [pc, #40]	; (9588 <prvAddCurrentTaskToDelayedList+0x94>)
    9560:	681b      	ldr	r3, [r3, #0]
    9562:	3304      	adds	r3, #4
    9564:	0019      	movs	r1, r3
    9566:	0010      	movs	r0, r2
    9568:	4b0c      	ldr	r3, [pc, #48]	; (959c <prvAddCurrentTaskToDelayedList+0xa8>)
    956a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    956c:	4b0d      	ldr	r3, [pc, #52]	; (95a4 <prvAddCurrentTaskToDelayedList+0xb0>)
    956e:	681b      	ldr	r3, [r3, #0]
    9570:	68ba      	ldr	r2, [r7, #8]
    9572:	429a      	cmp	r2, r3
    9574:	d202      	bcs.n	957c <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    9576:	4b0b      	ldr	r3, [pc, #44]	; (95a4 <prvAddCurrentTaskToDelayedList+0xb0>)
    9578:	68ba      	ldr	r2, [r7, #8]
    957a:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    957c:	46c0      	nop			; (mov r8, r8)
    957e:	46bd      	mov	sp, r7
    9580:	b004      	add	sp, #16
    9582:	bd80      	pop	{r7, pc}
    9584:	20003c94 	.word	0x20003c94
    9588:	20003bb8 	.word	0x20003bb8
    958c:	000078d1 	.word	0x000078d1
    9590:	20003c7c 	.word	0x20003c7c
    9594:	00007821 	.word	0x00007821
    9598:	20003c4c 	.word	0x20003c4c
    959c:	00007865 	.word	0x00007865
    95a0:	20003c48 	.word	0x20003c48
    95a4:	20003cb0 	.word	0x20003cb0

000095a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    95a8:	b590      	push	{r4, r7, lr}
    95aa:	b085      	sub	sp, #20
    95ac:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    95ae:	2300      	movs	r3, #0
    95b0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    95b2:	4b0e      	ldr	r3, [pc, #56]	; (95ec <xTimerCreateTimerTask+0x44>)
    95b4:	4798      	blx	r3

	if( xTimerQueue != NULL )
    95b6:	4b0e      	ldr	r3, [pc, #56]	; (95f0 <xTimerCreateTimerTask+0x48>)
    95b8:	681b      	ldr	r3, [r3, #0]
    95ba:	2b00      	cmp	r3, #0
    95bc:	d00b      	beq.n	95d6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    95be:	490d      	ldr	r1, [pc, #52]	; (95f4 <xTimerCreateTimerTask+0x4c>)
    95c0:	480d      	ldr	r0, [pc, #52]	; (95f8 <xTimerCreateTimerTask+0x50>)
    95c2:	4b0e      	ldr	r3, [pc, #56]	; (95fc <xTimerCreateTimerTask+0x54>)
    95c4:	9301      	str	r3, [sp, #4]
    95c6:	2302      	movs	r3, #2
    95c8:	9300      	str	r3, [sp, #0]
    95ca:	2300      	movs	r3, #0
    95cc:	2250      	movs	r2, #80	; 0x50
    95ce:	4c0c      	ldr	r4, [pc, #48]	; (9600 <xTimerCreateTimerTask+0x58>)
    95d0:	47a0      	blx	r4
    95d2:	0003      	movs	r3, r0
    95d4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	2b00      	cmp	r3, #0
    95da:	d101      	bne.n	95e0 <xTimerCreateTimerTask+0x38>
    95dc:	b672      	cpsid	i
    95de:	e7fe      	b.n	95de <xTimerCreateTimerTask+0x36>
	return xReturn;
    95e0:	687b      	ldr	r3, [r7, #4]
}
    95e2:	0018      	movs	r0, r3
    95e4:	46bd      	mov	sp, r7
    95e6:	b003      	add	sp, #12
    95e8:	bd90      	pop	{r4, r7, pc}
    95ea:	46c0      	nop			; (mov r8, r8)
    95ec:	00009ae9 	.word	0x00009ae9
    95f0:	20003cec 	.word	0x20003cec
    95f4:	0000dae8 	.word	0x0000dae8
    95f8:	00009729 	.word	0x00009729
    95fc:	20003cf0 	.word	0x20003cf0
    9600:	000087a9 	.word	0x000087a9

00009604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    9604:	b590      	push	{r4, r7, lr}
    9606:	b089      	sub	sp, #36	; 0x24
    9608:	af00      	add	r7, sp, #0
    960a:	60f8      	str	r0, [r7, #12]
    960c:	60b9      	str	r1, [r7, #8]
    960e:	607a      	str	r2, [r7, #4]
    9610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    9612:	2300      	movs	r3, #0
    9614:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    9616:	68fb      	ldr	r3, [r7, #12]
    9618:	2b00      	cmp	r3, #0
    961a:	d101      	bne.n	9620 <xTimerGenericCommand+0x1c>
    961c:	b672      	cpsid	i
    961e:	e7fe      	b.n	961e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    9620:	4b1e      	ldr	r3, [pc, #120]	; (969c <xTimerGenericCommand+0x98>)
    9622:	681b      	ldr	r3, [r3, #0]
    9624:	2b00      	cmp	r3, #0
    9626:	d033      	beq.n	9690 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    9628:	2310      	movs	r3, #16
    962a:	18fb      	adds	r3, r7, r3
    962c:	68ba      	ldr	r2, [r7, #8]
    962e:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    9630:	2310      	movs	r3, #16
    9632:	18fb      	adds	r3, r7, r3
    9634:	687a      	ldr	r2, [r7, #4]
    9636:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    9638:	2310      	movs	r3, #16
    963a:	18fb      	adds	r3, r7, r3
    963c:	68fa      	ldr	r2, [r7, #12]
    963e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    9640:	68bb      	ldr	r3, [r7, #8]
    9642:	2b05      	cmp	r3, #5
    9644:	dc1a      	bgt.n	967c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    9646:	4b16      	ldr	r3, [pc, #88]	; (96a0 <xTimerGenericCommand+0x9c>)
    9648:	4798      	blx	r3
    964a:	1e03      	subs	r3, r0, #0
    964c:	2b02      	cmp	r3, #2
    964e:	d10a      	bne.n	9666 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    9650:	4b12      	ldr	r3, [pc, #72]	; (969c <xTimerGenericCommand+0x98>)
    9652:	6818      	ldr	r0, [r3, #0]
    9654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9656:	2310      	movs	r3, #16
    9658:	18f9      	adds	r1, r7, r3
    965a:	2300      	movs	r3, #0
    965c:	4c11      	ldr	r4, [pc, #68]	; (96a4 <xTimerGenericCommand+0xa0>)
    965e:	47a0      	blx	r4
    9660:	0003      	movs	r3, r0
    9662:	61fb      	str	r3, [r7, #28]
    9664:	e014      	b.n	9690 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    9666:	4b0d      	ldr	r3, [pc, #52]	; (969c <xTimerGenericCommand+0x98>)
    9668:	6818      	ldr	r0, [r3, #0]
    966a:	2310      	movs	r3, #16
    966c:	18f9      	adds	r1, r7, r3
    966e:	2300      	movs	r3, #0
    9670:	2200      	movs	r2, #0
    9672:	4c0c      	ldr	r4, [pc, #48]	; (96a4 <xTimerGenericCommand+0xa0>)
    9674:	47a0      	blx	r4
    9676:	0003      	movs	r3, r0
    9678:	61fb      	str	r3, [r7, #28]
    967a:	e009      	b.n	9690 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    967c:	4b07      	ldr	r3, [pc, #28]	; (969c <xTimerGenericCommand+0x98>)
    967e:	6818      	ldr	r0, [r3, #0]
    9680:	683a      	ldr	r2, [r7, #0]
    9682:	2310      	movs	r3, #16
    9684:	18f9      	adds	r1, r7, r3
    9686:	2300      	movs	r3, #0
    9688:	4c07      	ldr	r4, [pc, #28]	; (96a8 <xTimerGenericCommand+0xa4>)
    968a:	47a0      	blx	r4
    968c:	0003      	movs	r3, r0
    968e:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    9690:	69fb      	ldr	r3, [r7, #28]
}
    9692:	0018      	movs	r0, r3
    9694:	46bd      	mov	sp, r7
    9696:	b009      	add	sp, #36	; 0x24
    9698:	bd90      	pop	{r4, r7, pc}
    969a:	46c0      	nop			; (mov r8, r8)
    969c:	20003cec 	.word	0x20003cec
    96a0:	00009315 	.word	0x00009315
    96a4:	00007dfd 	.word	0x00007dfd
    96a8:	00007fdd 	.word	0x00007fdd

000096ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    96ac:	b590      	push	{r4, r7, lr}
    96ae:	b087      	sub	sp, #28
    96b0:	af02      	add	r7, sp, #8
    96b2:	6078      	str	r0, [r7, #4]
    96b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    96b6:	4b18      	ldr	r3, [pc, #96]	; (9718 <prvProcessExpiredTimer+0x6c>)
    96b8:	681b      	ldr	r3, [r3, #0]
    96ba:	68db      	ldr	r3, [r3, #12]
    96bc:	68db      	ldr	r3, [r3, #12]
    96be:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    96c0:	68fb      	ldr	r3, [r7, #12]
    96c2:	3304      	adds	r3, #4
    96c4:	0018      	movs	r0, r3
    96c6:	4b15      	ldr	r3, [pc, #84]	; (971c <prvProcessExpiredTimer+0x70>)
    96c8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    96ca:	68fb      	ldr	r3, [r7, #12]
    96cc:	69db      	ldr	r3, [r3, #28]
    96ce:	2b01      	cmp	r3, #1
    96d0:	d119      	bne.n	9706 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    96d2:	68fb      	ldr	r3, [r7, #12]
    96d4:	699a      	ldr	r2, [r3, #24]
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	18d1      	adds	r1, r2, r3
    96da:	687b      	ldr	r3, [r7, #4]
    96dc:	683a      	ldr	r2, [r7, #0]
    96de:	68f8      	ldr	r0, [r7, #12]
    96e0:	4c0f      	ldr	r4, [pc, #60]	; (9720 <prvProcessExpiredTimer+0x74>)
    96e2:	47a0      	blx	r4
    96e4:	1e03      	subs	r3, r0, #0
    96e6:	d00e      	beq.n	9706 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    96e8:	687a      	ldr	r2, [r7, #4]
    96ea:	68f8      	ldr	r0, [r7, #12]
    96ec:	2300      	movs	r3, #0
    96ee:	9300      	str	r3, [sp, #0]
    96f0:	2300      	movs	r3, #0
    96f2:	2100      	movs	r1, #0
    96f4:	4c0b      	ldr	r4, [pc, #44]	; (9724 <prvProcessExpiredTimer+0x78>)
    96f6:	47a0      	blx	r4
    96f8:	0003      	movs	r3, r0
    96fa:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    96fc:	68bb      	ldr	r3, [r7, #8]
    96fe:	2b00      	cmp	r3, #0
    9700:	d101      	bne.n	9706 <prvProcessExpiredTimer+0x5a>
    9702:	b672      	cpsid	i
    9704:	e7fe      	b.n	9704 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9706:	68fb      	ldr	r3, [r7, #12]
    9708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    970a:	68fa      	ldr	r2, [r7, #12]
    970c:	0010      	movs	r0, r2
    970e:	4798      	blx	r3
}
    9710:	46c0      	nop			; (mov r8, r8)
    9712:	46bd      	mov	sp, r7
    9714:	b005      	add	sp, #20
    9716:	bd90      	pop	{r4, r7, pc}
    9718:	20003ce4 	.word	0x20003ce4
    971c:	000078d1 	.word	0x000078d1
    9720:	00009889 	.word	0x00009889
    9724:	00009605 	.word	0x00009605

00009728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    9728:	b580      	push	{r7, lr}
    972a:	b084      	sub	sp, #16
    972c:	af00      	add	r7, sp, #0
    972e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9730:	2308      	movs	r3, #8
    9732:	18fb      	adds	r3, r7, r3
    9734:	0018      	movs	r0, r3
    9736:	4b06      	ldr	r3, [pc, #24]	; (9750 <prvTimerTask+0x28>)
    9738:	4798      	blx	r3
    973a:	0003      	movs	r3, r0
    973c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    973e:	68ba      	ldr	r2, [r7, #8]
    9740:	68fb      	ldr	r3, [r7, #12]
    9742:	0011      	movs	r1, r2
    9744:	0018      	movs	r0, r3
    9746:	4b03      	ldr	r3, [pc, #12]	; (9754 <prvTimerTask+0x2c>)
    9748:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    974a:	4b03      	ldr	r3, [pc, #12]	; (9758 <prvTimerTask+0x30>)
    974c:	4798      	blx	r3
	}
    974e:	e7ef      	b.n	9730 <prvTimerTask+0x8>
    9750:	00009801 	.word	0x00009801
    9754:	0000975d 	.word	0x0000975d
    9758:	00009911 	.word	0x00009911

0000975c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    975c:	b580      	push	{r7, lr}
    975e:	b084      	sub	sp, #16
    9760:	af00      	add	r7, sp, #0
    9762:	6078      	str	r0, [r7, #4]
    9764:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    9766:	4b1e      	ldr	r3, [pc, #120]	; (97e0 <prvProcessTimerOrBlockTask+0x84>)
    9768:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    976a:	2308      	movs	r3, #8
    976c:	18fb      	adds	r3, r7, r3
    976e:	0018      	movs	r0, r3
    9770:	4b1c      	ldr	r3, [pc, #112]	; (97e4 <prvProcessTimerOrBlockTask+0x88>)
    9772:	4798      	blx	r3
    9774:	0003      	movs	r3, r0
    9776:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    9778:	68bb      	ldr	r3, [r7, #8]
    977a:	2b00      	cmp	r3, #0
    977c:	d129      	bne.n	97d2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    977e:	683b      	ldr	r3, [r7, #0]
    9780:	2b00      	cmp	r3, #0
    9782:	d10c      	bne.n	979e <prvProcessTimerOrBlockTask+0x42>
    9784:	687a      	ldr	r2, [r7, #4]
    9786:	68fb      	ldr	r3, [r7, #12]
    9788:	429a      	cmp	r2, r3
    978a:	d808      	bhi.n	979e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    978c:	4b16      	ldr	r3, [pc, #88]	; (97e8 <prvProcessTimerOrBlockTask+0x8c>)
    978e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9790:	68fa      	ldr	r2, [r7, #12]
    9792:	687b      	ldr	r3, [r7, #4]
    9794:	0011      	movs	r1, r2
    9796:	0018      	movs	r0, r3
    9798:	4b14      	ldr	r3, [pc, #80]	; (97ec <prvProcessTimerOrBlockTask+0x90>)
    979a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    979c:	e01b      	b.n	97d6 <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    979e:	683b      	ldr	r3, [r7, #0]
    97a0:	2b00      	cmp	r3, #0
    97a2:	d006      	beq.n	97b2 <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    97a4:	4b12      	ldr	r3, [pc, #72]	; (97f0 <prvProcessTimerOrBlockTask+0x94>)
    97a6:	681b      	ldr	r3, [r3, #0]
    97a8:	681b      	ldr	r3, [r3, #0]
    97aa:	425a      	negs	r2, r3
    97ac:	4153      	adcs	r3, r2
    97ae:	b2db      	uxtb	r3, r3
    97b0:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    97b2:	4b10      	ldr	r3, [pc, #64]	; (97f4 <prvProcessTimerOrBlockTask+0x98>)
    97b4:	6818      	ldr	r0, [r3, #0]
    97b6:	687a      	ldr	r2, [r7, #4]
    97b8:	68fb      	ldr	r3, [r7, #12]
    97ba:	1ad3      	subs	r3, r2, r3
    97bc:	683a      	ldr	r2, [r7, #0]
    97be:	0019      	movs	r1, r3
    97c0:	4b0d      	ldr	r3, [pc, #52]	; (97f8 <prvProcessTimerOrBlockTask+0x9c>)
    97c2:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    97c4:	4b08      	ldr	r3, [pc, #32]	; (97e8 <prvProcessTimerOrBlockTask+0x8c>)
    97c6:	4798      	blx	r3
    97c8:	1e03      	subs	r3, r0, #0
    97ca:	d104      	bne.n	97d6 <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    97cc:	4b0b      	ldr	r3, [pc, #44]	; (97fc <prvProcessTimerOrBlockTask+0xa0>)
    97ce:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    97d0:	e001      	b.n	97d6 <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    97d2:	4b05      	ldr	r3, [pc, #20]	; (97e8 <prvProcessTimerOrBlockTask+0x8c>)
    97d4:	4798      	blx	r3
		}
	}
}
    97d6:	46c0      	nop			; (mov r8, r8)
    97d8:	46bd      	mov	sp, r7
    97da:	b004      	add	sp, #16
    97dc:	bd80      	pop	{r7, pc}
    97de:	46c0      	nop			; (mov r8, r8)
    97e0:	00008b71 	.word	0x00008b71
    97e4:	00009841 	.word	0x00009841
    97e8:	00008b89 	.word	0x00008b89
    97ec:	000096ad 	.word	0x000096ad
    97f0:	20003ce8 	.word	0x20003ce8
    97f4:	20003cec 	.word	0x20003cec
    97f8:	0000868d 	.word	0x0000868d
    97fc:	00007a29 	.word	0x00007a29

00009800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    9800:	b580      	push	{r7, lr}
    9802:	b084      	sub	sp, #16
    9804:	af00      	add	r7, sp, #0
    9806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9808:	4b0c      	ldr	r3, [pc, #48]	; (983c <prvGetNextExpireTime+0x3c>)
    980a:	681b      	ldr	r3, [r3, #0]
    980c:	681b      	ldr	r3, [r3, #0]
    980e:	425a      	negs	r2, r3
    9810:	4153      	adcs	r3, r2
    9812:	b2db      	uxtb	r3, r3
    9814:	001a      	movs	r2, r3
    9816:	687b      	ldr	r3, [r7, #4]
    9818:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    981a:	687b      	ldr	r3, [r7, #4]
    981c:	681b      	ldr	r3, [r3, #0]
    981e:	2b00      	cmp	r3, #0
    9820:	d105      	bne.n	982e <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9822:	4b06      	ldr	r3, [pc, #24]	; (983c <prvGetNextExpireTime+0x3c>)
    9824:	681b      	ldr	r3, [r3, #0]
    9826:	68db      	ldr	r3, [r3, #12]
    9828:	681b      	ldr	r3, [r3, #0]
    982a:	60fb      	str	r3, [r7, #12]
    982c:	e001      	b.n	9832 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    982e:	2300      	movs	r3, #0
    9830:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    9832:	68fb      	ldr	r3, [r7, #12]
}
    9834:	0018      	movs	r0, r3
    9836:	46bd      	mov	sp, r7
    9838:	b004      	add	sp, #16
    983a:	bd80      	pop	{r7, pc}
    983c:	20003ce4 	.word	0x20003ce4

00009840 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    9840:	b580      	push	{r7, lr}
    9842:	b084      	sub	sp, #16
    9844:	af00      	add	r7, sp, #0
    9846:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    9848:	4b0c      	ldr	r3, [pc, #48]	; (987c <prvSampleTimeNow+0x3c>)
    984a:	4798      	blx	r3
    984c:	0003      	movs	r3, r0
    984e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    9850:	4b0b      	ldr	r3, [pc, #44]	; (9880 <prvSampleTimeNow+0x40>)
    9852:	681b      	ldr	r3, [r3, #0]
    9854:	68fa      	ldr	r2, [r7, #12]
    9856:	429a      	cmp	r2, r3
    9858:	d205      	bcs.n	9866 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    985a:	4b0a      	ldr	r3, [pc, #40]	; (9884 <prvSampleTimeNow+0x44>)
    985c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    985e:	687b      	ldr	r3, [r7, #4]
    9860:	2201      	movs	r2, #1
    9862:	601a      	str	r2, [r3, #0]
    9864:	e002      	b.n	986c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	2200      	movs	r2, #0
    986a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    986c:	4b04      	ldr	r3, [pc, #16]	; (9880 <prvSampleTimeNow+0x40>)
    986e:	68fa      	ldr	r2, [r7, #12]
    9870:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    9872:	68fb      	ldr	r3, [r7, #12]
}
    9874:	0018      	movs	r0, r3
    9876:	46bd      	mov	sp, r7
    9878:	b004      	add	sp, #16
    987a:	bd80      	pop	{r7, pc}
    987c:	00008cbd 	.word	0x00008cbd
    9880:	20003cf4 	.word	0x20003cf4
    9884:	00009a29 	.word	0x00009a29

00009888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    9888:	b580      	push	{r7, lr}
    988a:	b086      	sub	sp, #24
    988c:	af00      	add	r7, sp, #0
    988e:	60f8      	str	r0, [r7, #12]
    9890:	60b9      	str	r1, [r7, #8]
    9892:	607a      	str	r2, [r7, #4]
    9894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    9896:	2300      	movs	r3, #0
    9898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    989a:	68fb      	ldr	r3, [r7, #12]
    989c:	68ba      	ldr	r2, [r7, #8]
    989e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    98a0:	68fb      	ldr	r3, [r7, #12]
    98a2:	68fa      	ldr	r2, [r7, #12]
    98a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    98a6:	68ba      	ldr	r2, [r7, #8]
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	429a      	cmp	r2, r3
    98ac:	d812      	bhi.n	98d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    98ae:	687a      	ldr	r2, [r7, #4]
    98b0:	683b      	ldr	r3, [r7, #0]
    98b2:	1ad2      	subs	r2, r2, r3
    98b4:	68fb      	ldr	r3, [r7, #12]
    98b6:	699b      	ldr	r3, [r3, #24]
    98b8:	429a      	cmp	r2, r3
    98ba:	d302      	bcc.n	98c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    98bc:	2301      	movs	r3, #1
    98be:	617b      	str	r3, [r7, #20]
    98c0:	e01b      	b.n	98fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    98c2:	4b10      	ldr	r3, [pc, #64]	; (9904 <prvInsertTimerInActiveList+0x7c>)
    98c4:	681a      	ldr	r2, [r3, #0]
    98c6:	68fb      	ldr	r3, [r7, #12]
    98c8:	3304      	adds	r3, #4
    98ca:	0019      	movs	r1, r3
    98cc:	0010      	movs	r0, r2
    98ce:	4b0e      	ldr	r3, [pc, #56]	; (9908 <prvInsertTimerInActiveList+0x80>)
    98d0:	4798      	blx	r3
    98d2:	e012      	b.n	98fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    98d4:	687a      	ldr	r2, [r7, #4]
    98d6:	683b      	ldr	r3, [r7, #0]
    98d8:	429a      	cmp	r2, r3
    98da:	d206      	bcs.n	98ea <prvInsertTimerInActiveList+0x62>
    98dc:	68ba      	ldr	r2, [r7, #8]
    98de:	683b      	ldr	r3, [r7, #0]
    98e0:	429a      	cmp	r2, r3
    98e2:	d302      	bcc.n	98ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    98e4:	2301      	movs	r3, #1
    98e6:	617b      	str	r3, [r7, #20]
    98e8:	e007      	b.n	98fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    98ea:	4b08      	ldr	r3, [pc, #32]	; (990c <prvInsertTimerInActiveList+0x84>)
    98ec:	681a      	ldr	r2, [r3, #0]
    98ee:	68fb      	ldr	r3, [r7, #12]
    98f0:	3304      	adds	r3, #4
    98f2:	0019      	movs	r1, r3
    98f4:	0010      	movs	r0, r2
    98f6:	4b04      	ldr	r3, [pc, #16]	; (9908 <prvInsertTimerInActiveList+0x80>)
    98f8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    98fa:	697b      	ldr	r3, [r7, #20]
}
    98fc:	0018      	movs	r0, r3
    98fe:	46bd      	mov	sp, r7
    9900:	b006      	add	sp, #24
    9902:	bd80      	pop	{r7, pc}
    9904:	20003ce8 	.word	0x20003ce8
    9908:	00007865 	.word	0x00007865
    990c:	20003ce4 	.word	0x20003ce4

00009910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    9910:	b590      	push	{r4, r7, lr}
    9912:	b08b      	sub	sp, #44	; 0x2c
    9914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    9916:	e068      	b.n	99ea <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    9918:	2308      	movs	r3, #8
    991a:	18fb      	adds	r3, r7, r3
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	2b00      	cmp	r3, #0
    9920:	db63      	blt.n	99ea <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    9922:	2308      	movs	r3, #8
    9924:	18fb      	adds	r3, r7, r3
    9926:	689b      	ldr	r3, [r3, #8]
    9928:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    992a:	69fb      	ldr	r3, [r7, #28]
    992c:	695b      	ldr	r3, [r3, #20]
    992e:	2b00      	cmp	r3, #0
    9930:	d004      	beq.n	993c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9932:	69fb      	ldr	r3, [r7, #28]
    9934:	3304      	adds	r3, #4
    9936:	0018      	movs	r0, r3
    9938:	4b33      	ldr	r3, [pc, #204]	; (9a08 <prvProcessReceivedCommands+0xf8>)
    993a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    993c:	1d3b      	adds	r3, r7, #4
    993e:	0018      	movs	r0, r3
    9940:	4b32      	ldr	r3, [pc, #200]	; (9a0c <prvProcessReceivedCommands+0xfc>)
    9942:	4798      	blx	r3
    9944:	0003      	movs	r3, r0
    9946:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    9948:	2308      	movs	r3, #8
    994a:	18fb      	adds	r3, r7, r3
    994c:	681b      	ldr	r3, [r3, #0]
    994e:	2b09      	cmp	r3, #9
    9950:	d84a      	bhi.n	99e8 <prvProcessReceivedCommands+0xd8>
    9952:	009a      	lsls	r2, r3, #2
    9954:	4b2e      	ldr	r3, [pc, #184]	; (9a10 <prvProcessReceivedCommands+0x100>)
    9956:	18d3      	adds	r3, r2, r3
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    995c:	2308      	movs	r3, #8
    995e:	18fb      	adds	r3, r7, r3
    9960:	685a      	ldr	r2, [r3, #4]
    9962:	69fb      	ldr	r3, [r7, #28]
    9964:	699b      	ldr	r3, [r3, #24]
    9966:	18d1      	adds	r1, r2, r3
    9968:	2308      	movs	r3, #8
    996a:	18fb      	adds	r3, r7, r3
    996c:	685b      	ldr	r3, [r3, #4]
    996e:	69ba      	ldr	r2, [r7, #24]
    9970:	69f8      	ldr	r0, [r7, #28]
    9972:	4c28      	ldr	r4, [pc, #160]	; (9a14 <prvProcessReceivedCommands+0x104>)
    9974:	47a0      	blx	r4
    9976:	1e03      	subs	r3, r0, #0
    9978:	d037      	beq.n	99ea <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    997a:	69fb      	ldr	r3, [r7, #28]
    997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    997e:	69fa      	ldr	r2, [r7, #28]
    9980:	0010      	movs	r0, r2
    9982:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9984:	69fb      	ldr	r3, [r7, #28]
    9986:	69db      	ldr	r3, [r3, #28]
    9988:	2b01      	cmp	r3, #1
    998a:	d12e      	bne.n	99ea <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    998c:	2308      	movs	r3, #8
    998e:	18fb      	adds	r3, r7, r3
    9990:	685a      	ldr	r2, [r3, #4]
    9992:	69fb      	ldr	r3, [r7, #28]
    9994:	699b      	ldr	r3, [r3, #24]
    9996:	18d2      	adds	r2, r2, r3
    9998:	69f8      	ldr	r0, [r7, #28]
    999a:	2300      	movs	r3, #0
    999c:	9300      	str	r3, [sp, #0]
    999e:	2300      	movs	r3, #0
    99a0:	2100      	movs	r1, #0
    99a2:	4c1d      	ldr	r4, [pc, #116]	; (9a18 <prvProcessReceivedCommands+0x108>)
    99a4:	47a0      	blx	r4
    99a6:	0003      	movs	r3, r0
    99a8:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    99aa:	697b      	ldr	r3, [r7, #20]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d11c      	bne.n	99ea <prvProcessReceivedCommands+0xda>
    99b0:	b672      	cpsid	i
    99b2:	e7fe      	b.n	99b2 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    99b4:	2308      	movs	r3, #8
    99b6:	18fb      	adds	r3, r7, r3
    99b8:	685a      	ldr	r2, [r3, #4]
    99ba:	69fb      	ldr	r3, [r7, #28]
    99bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    99be:	69fb      	ldr	r3, [r7, #28]
    99c0:	699b      	ldr	r3, [r3, #24]
    99c2:	2b00      	cmp	r3, #0
    99c4:	d101      	bne.n	99ca <prvProcessReceivedCommands+0xba>
    99c6:	b672      	cpsid	i
    99c8:	e7fe      	b.n	99c8 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    99ca:	69fb      	ldr	r3, [r7, #28]
    99cc:	699a      	ldr	r2, [r3, #24]
    99ce:	69bb      	ldr	r3, [r7, #24]
    99d0:	18d1      	adds	r1, r2, r3
    99d2:	69bb      	ldr	r3, [r7, #24]
    99d4:	69ba      	ldr	r2, [r7, #24]
    99d6:	69f8      	ldr	r0, [r7, #28]
    99d8:	4c0e      	ldr	r4, [pc, #56]	; (9a14 <prvProcessReceivedCommands+0x104>)
    99da:	47a0      	blx	r4
					break;
    99dc:	e005      	b.n	99ea <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    99de:	69fb      	ldr	r3, [r7, #28]
    99e0:	0018      	movs	r0, r3
    99e2:	4b0e      	ldr	r3, [pc, #56]	; (9a1c <prvProcessReceivedCommands+0x10c>)
    99e4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    99e6:	e000      	b.n	99ea <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    99e8:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    99ea:	4b0d      	ldr	r3, [pc, #52]	; (9a20 <prvProcessReceivedCommands+0x110>)
    99ec:	6818      	ldr	r0, [r3, #0]
    99ee:	2308      	movs	r3, #8
    99f0:	18f9      	adds	r1, r7, r3
    99f2:	2300      	movs	r3, #0
    99f4:	2200      	movs	r2, #0
    99f6:	4c0b      	ldr	r4, [pc, #44]	; (9a24 <prvProcessReceivedCommands+0x114>)
    99f8:	47a0      	blx	r4
    99fa:	1e03      	subs	r3, r0, #0
    99fc:	d18c      	bne.n	9918 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    99fe:	46c0      	nop			; (mov r8, r8)
    9a00:	46bd      	mov	sp, r7
    9a02:	b009      	add	sp, #36	; 0x24
    9a04:	bd90      	pop	{r4, r7, pc}
    9a06:	46c0      	nop			; (mov r8, r8)
    9a08:	000078d1 	.word	0x000078d1
    9a0c:	00009841 	.word	0x00009841
    9a10:	0000daf0 	.word	0x0000daf0
    9a14:	00009889 	.word	0x00009889
    9a18:	00009605 	.word	0x00009605
    9a1c:	00007bf1 	.word	0x00007bf1
    9a20:	20003cec 	.word	0x20003cec
    9a24:	000081fd 	.word	0x000081fd

00009a28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    9a28:	b590      	push	{r4, r7, lr}
    9a2a:	b089      	sub	sp, #36	; 0x24
    9a2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9a2e:	e03e      	b.n	9aae <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9a30:	4b28      	ldr	r3, [pc, #160]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9a32:	681b      	ldr	r3, [r3, #0]
    9a34:	68db      	ldr	r3, [r3, #12]
    9a36:	681b      	ldr	r3, [r3, #0]
    9a38:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9a3a:	4b26      	ldr	r3, [pc, #152]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9a3c:	681b      	ldr	r3, [r3, #0]
    9a3e:	68db      	ldr	r3, [r3, #12]
    9a40:	68db      	ldr	r3, [r3, #12]
    9a42:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9a44:	693b      	ldr	r3, [r7, #16]
    9a46:	3304      	adds	r3, #4
    9a48:	0018      	movs	r0, r3
    9a4a:	4b23      	ldr	r3, [pc, #140]	; (9ad8 <prvSwitchTimerLists+0xb0>)
    9a4c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9a4e:	693b      	ldr	r3, [r7, #16]
    9a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9a52:	693a      	ldr	r2, [r7, #16]
    9a54:	0010      	movs	r0, r2
    9a56:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9a58:	693b      	ldr	r3, [r7, #16]
    9a5a:	69db      	ldr	r3, [r3, #28]
    9a5c:	2b01      	cmp	r3, #1
    9a5e:	d126      	bne.n	9aae <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    9a60:	693b      	ldr	r3, [r7, #16]
    9a62:	699a      	ldr	r2, [r3, #24]
    9a64:	697b      	ldr	r3, [r7, #20]
    9a66:	18d3      	adds	r3, r2, r3
    9a68:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    9a6a:	68fa      	ldr	r2, [r7, #12]
    9a6c:	697b      	ldr	r3, [r7, #20]
    9a6e:	429a      	cmp	r2, r3
    9a70:	d90e      	bls.n	9a90 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    9a72:	693b      	ldr	r3, [r7, #16]
    9a74:	68fa      	ldr	r2, [r7, #12]
    9a76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    9a78:	693b      	ldr	r3, [r7, #16]
    9a7a:	693a      	ldr	r2, [r7, #16]
    9a7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    9a7e:	4b15      	ldr	r3, [pc, #84]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9a80:	681a      	ldr	r2, [r3, #0]
    9a82:	693b      	ldr	r3, [r7, #16]
    9a84:	3304      	adds	r3, #4
    9a86:	0019      	movs	r1, r3
    9a88:	0010      	movs	r0, r2
    9a8a:	4b14      	ldr	r3, [pc, #80]	; (9adc <prvSwitchTimerLists+0xb4>)
    9a8c:	4798      	blx	r3
    9a8e:	e00e      	b.n	9aae <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9a90:	697a      	ldr	r2, [r7, #20]
    9a92:	6938      	ldr	r0, [r7, #16]
    9a94:	2300      	movs	r3, #0
    9a96:	9300      	str	r3, [sp, #0]
    9a98:	2300      	movs	r3, #0
    9a9a:	2100      	movs	r1, #0
    9a9c:	4c10      	ldr	r4, [pc, #64]	; (9ae0 <prvSwitchTimerLists+0xb8>)
    9a9e:	47a0      	blx	r4
    9aa0:	0003      	movs	r3, r0
    9aa2:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    9aa4:	68bb      	ldr	r3, [r7, #8]
    9aa6:	2b00      	cmp	r3, #0
    9aa8:	d101      	bne.n	9aae <prvSwitchTimerLists+0x86>
    9aaa:	b672      	cpsid	i
    9aac:	e7fe      	b.n	9aac <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    9aae:	4b09      	ldr	r3, [pc, #36]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9ab0:	681b      	ldr	r3, [r3, #0]
    9ab2:	681b      	ldr	r3, [r3, #0]
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	d1bb      	bne.n	9a30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    9ab8:	4b06      	ldr	r3, [pc, #24]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9aba:	681b      	ldr	r3, [r3, #0]
    9abc:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    9abe:	4b09      	ldr	r3, [pc, #36]	; (9ae4 <prvSwitchTimerLists+0xbc>)
    9ac0:	681a      	ldr	r2, [r3, #0]
    9ac2:	4b04      	ldr	r3, [pc, #16]	; (9ad4 <prvSwitchTimerLists+0xac>)
    9ac4:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    9ac6:	4b07      	ldr	r3, [pc, #28]	; (9ae4 <prvSwitchTimerLists+0xbc>)
    9ac8:	687a      	ldr	r2, [r7, #4]
    9aca:	601a      	str	r2, [r3, #0]
}
    9acc:	46c0      	nop			; (mov r8, r8)
    9ace:	46bd      	mov	sp, r7
    9ad0:	b007      	add	sp, #28
    9ad2:	bd90      	pop	{r4, r7, pc}
    9ad4:	20003ce4 	.word	0x20003ce4
    9ad8:	000078d1 	.word	0x000078d1
    9adc:	00007865 	.word	0x00007865
    9ae0:	00009605 	.word	0x00009605
    9ae4:	20003ce8 	.word	0x20003ce8

00009ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    9aec:	4b10      	ldr	r3, [pc, #64]	; (9b30 <prvCheckForValidListAndQueue+0x48>)
    9aee:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    9af0:	4b10      	ldr	r3, [pc, #64]	; (9b34 <prvCheckForValidListAndQueue+0x4c>)
    9af2:	681b      	ldr	r3, [r3, #0]
    9af4:	2b00      	cmp	r3, #0
    9af6:	d115      	bne.n	9b24 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    9af8:	4b0f      	ldr	r3, [pc, #60]	; (9b38 <prvCheckForValidListAndQueue+0x50>)
    9afa:	0018      	movs	r0, r3
    9afc:	4b0f      	ldr	r3, [pc, #60]	; (9b3c <prvCheckForValidListAndQueue+0x54>)
    9afe:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    9b00:	4b0f      	ldr	r3, [pc, #60]	; (9b40 <prvCheckForValidListAndQueue+0x58>)
    9b02:	0018      	movs	r0, r3
    9b04:	4b0d      	ldr	r3, [pc, #52]	; (9b3c <prvCheckForValidListAndQueue+0x54>)
    9b06:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    9b08:	4b0e      	ldr	r3, [pc, #56]	; (9b44 <prvCheckForValidListAndQueue+0x5c>)
    9b0a:	4a0b      	ldr	r2, [pc, #44]	; (9b38 <prvCheckForValidListAndQueue+0x50>)
    9b0c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    9b0e:	4b0e      	ldr	r3, [pc, #56]	; (9b48 <prvCheckForValidListAndQueue+0x60>)
    9b10:	4a0b      	ldr	r2, [pc, #44]	; (9b40 <prvCheckForValidListAndQueue+0x58>)
    9b12:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    9b14:	2200      	movs	r2, #0
    9b16:	210c      	movs	r1, #12
    9b18:	2002      	movs	r0, #2
    9b1a:	4b0c      	ldr	r3, [pc, #48]	; (9b4c <prvCheckForValidListAndQueue+0x64>)
    9b1c:	4798      	blx	r3
    9b1e:	0002      	movs	r2, r0
    9b20:	4b04      	ldr	r3, [pc, #16]	; (9b34 <prvCheckForValidListAndQueue+0x4c>)
    9b22:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9b24:	4b0a      	ldr	r3, [pc, #40]	; (9b50 <prvCheckForValidListAndQueue+0x68>)
    9b26:	4798      	blx	r3
}
    9b28:	46c0      	nop			; (mov r8, r8)
    9b2a:	46bd      	mov	sp, r7
    9b2c:	bd80      	pop	{r7, pc}
    9b2e:	46c0      	nop			; (mov r8, r8)
    9b30:	00007a49 	.word	0x00007a49
    9b34:	20003cec 	.word	0x20003cec
    9b38:	20003cbc 	.word	0x20003cbc
    9b3c:	000077cd 	.word	0x000077cd
    9b40:	20003cd0 	.word	0x20003cd0
    9b44:	20003ce4 	.word	0x20003ce4
    9b48:	20003ce8 	.word	0x20003ce8
    9b4c:	00007cc9 	.word	0x00007cc9
    9b50:	00007a6d 	.word	0x00007a6d

00009b54 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9b54:	b580      	push	{r7, lr}
    9b56:	b084      	sub	sp, #16
    9b58:	af00      	add	r7, sp, #0
    9b5a:	0002      	movs	r2, r0
    9b5c:	1dfb      	adds	r3, r7, #7
    9b5e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9b60:	230f      	movs	r3, #15
    9b62:	18fb      	adds	r3, r7, r3
    9b64:	1dfa      	adds	r2, r7, #7
    9b66:	7812      	ldrb	r2, [r2, #0]
    9b68:	09d2      	lsrs	r2, r2, #7
    9b6a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9b6c:	230e      	movs	r3, #14
    9b6e:	18fb      	adds	r3, r7, r3
    9b70:	1dfa      	adds	r2, r7, #7
    9b72:	7812      	ldrb	r2, [r2, #0]
    9b74:	0952      	lsrs	r2, r2, #5
    9b76:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9b78:	4b0d      	ldr	r3, [pc, #52]	; (9bb0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9b7a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    9b7c:	230f      	movs	r3, #15
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	781b      	ldrb	r3, [r3, #0]
    9b82:	2b00      	cmp	r3, #0
    9b84:	d10f      	bne.n	9ba6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9b86:	230f      	movs	r3, #15
    9b88:	18fb      	adds	r3, r7, r3
    9b8a:	781b      	ldrb	r3, [r3, #0]
    9b8c:	009b      	lsls	r3, r3, #2
    9b8e:	2210      	movs	r2, #16
    9b90:	4694      	mov	ip, r2
    9b92:	44bc      	add	ip, r7
    9b94:	4463      	add	r3, ip
    9b96:	3b08      	subs	r3, #8
    9b98:	681a      	ldr	r2, [r3, #0]
    9b9a:	230e      	movs	r3, #14
    9b9c:	18fb      	adds	r3, r7, r3
    9b9e:	781b      	ldrb	r3, [r3, #0]
    9ba0:	01db      	lsls	r3, r3, #7
    9ba2:	18d3      	adds	r3, r2, r3
    9ba4:	e000      	b.n	9ba8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    9ba6:	2300      	movs	r3, #0
	}
}
    9ba8:	0018      	movs	r0, r3
    9baa:	46bd      	mov	sp, r7
    9bac:	b004      	add	sp, #16
    9bae:	bd80      	pop	{r7, pc}
    9bb0:	41004400 	.word	0x41004400

00009bb4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    9bb4:	b580      	push	{r7, lr}
    9bb6:	b082      	sub	sp, #8
    9bb8:	af00      	add	r7, sp, #0
    9bba:	0002      	movs	r2, r0
    9bbc:	1dfb      	adds	r3, r7, #7
    9bbe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9bc0:	4b06      	ldr	r3, [pc, #24]	; (9bdc <system_interrupt_enable+0x28>)
    9bc2:	1dfa      	adds	r2, r7, #7
    9bc4:	7812      	ldrb	r2, [r2, #0]
    9bc6:	0011      	movs	r1, r2
    9bc8:	221f      	movs	r2, #31
    9bca:	400a      	ands	r2, r1
    9bcc:	2101      	movs	r1, #1
    9bce:	4091      	lsls	r1, r2
    9bd0:	000a      	movs	r2, r1
    9bd2:	601a      	str	r2, [r3, #0]
}
    9bd4:	46c0      	nop			; (mov r8, r8)
    9bd6:	46bd      	mov	sp, r7
    9bd8:	b002      	add	sp, #8
    9bda:	bd80      	pop	{r7, pc}
    9bdc:	e000e100 	.word	0xe000e100

00009be0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    9be0:	b580      	push	{r7, lr}
    9be2:	b084      	sub	sp, #16
    9be4:	af00      	add	r7, sp, #0
    9be6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	681b      	ldr	r3, [r3, #0]
    9bec:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    9bee:	68fb      	ldr	r3, [r7, #12]
    9bf0:	7e5b      	ldrb	r3, [r3, #25]
    9bf2:	b2db      	uxtb	r3, r3
    9bf4:	b25b      	sxtb	r3, r3
    9bf6:	2b00      	cmp	r3, #0
    9bf8:	da01      	bge.n	9bfe <adc_is_syncing+0x1e>
		return true;
    9bfa:	2301      	movs	r3, #1
    9bfc:	e000      	b.n	9c00 <adc_is_syncing+0x20>
	}

	return false;
    9bfe:	2300      	movs	r3, #0
}
    9c00:	0018      	movs	r0, r3
    9c02:	46bd      	mov	sp, r7
    9c04:	b004      	add	sp, #16
    9c06:	bd80      	pop	{r7, pc}

00009c08 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    9c08:	b580      	push	{r7, lr}
    9c0a:	b086      	sub	sp, #24
    9c0c:	af00      	add	r7, sp, #0
    9c0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	681b      	ldr	r3, [r3, #0]
    9c14:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    9c16:	693b      	ldr	r3, [r7, #16]
    9c18:	7e1b      	ldrb	r3, [r3, #24]
    9c1a:	b2db      	uxtb	r3, r3
    9c1c:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    9c1e:	2300      	movs	r3, #0
    9c20:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    9c22:	68fb      	ldr	r3, [r7, #12]
    9c24:	2201      	movs	r2, #1
    9c26:	4013      	ands	r3, r2
    9c28:	d003      	beq.n	9c32 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    9c2a:	697b      	ldr	r3, [r7, #20]
    9c2c:	2201      	movs	r2, #1
    9c2e:	4313      	orrs	r3, r2
    9c30:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    9c32:	68fb      	ldr	r3, [r7, #12]
    9c34:	2204      	movs	r2, #4
    9c36:	4013      	ands	r3, r2
    9c38:	d003      	beq.n	9c42 <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    9c3a:	697b      	ldr	r3, [r7, #20]
    9c3c:	2202      	movs	r2, #2
    9c3e:	4313      	orrs	r3, r2
    9c40:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    9c42:	68fb      	ldr	r3, [r7, #12]
    9c44:	2202      	movs	r2, #2
    9c46:	4013      	ands	r3, r2
    9c48:	d003      	beq.n	9c52 <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    9c4a:	697b      	ldr	r3, [r7, #20]
    9c4c:	2204      	movs	r2, #4
    9c4e:	4313      	orrs	r3, r2
    9c50:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    9c52:	697b      	ldr	r3, [r7, #20]
}
    9c54:	0018      	movs	r0, r3
    9c56:	46bd      	mov	sp, r7
    9c58:	b006      	add	sp, #24
    9c5a:	bd80      	pop	{r7, pc}

00009c5c <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    9c5c:	b580      	push	{r7, lr}
    9c5e:	b084      	sub	sp, #16
    9c60:	af00      	add	r7, sp, #0
    9c62:	6078      	str	r0, [r7, #4]
    9c64:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	681b      	ldr	r3, [r3, #0]
    9c6a:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    9c6c:	2300      	movs	r3, #0
    9c6e:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    9c70:	683b      	ldr	r3, [r7, #0]
    9c72:	2201      	movs	r2, #1
    9c74:	4013      	ands	r3, r2
    9c76:	d003      	beq.n	9c80 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    9c78:	68fb      	ldr	r3, [r7, #12]
    9c7a:	2201      	movs	r2, #1
    9c7c:	4313      	orrs	r3, r2
    9c7e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    9c80:	683b      	ldr	r3, [r7, #0]
    9c82:	2202      	movs	r2, #2
    9c84:	4013      	ands	r3, r2
    9c86:	d003      	beq.n	9c90 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    9c88:	68fb      	ldr	r3, [r7, #12]
    9c8a:	2204      	movs	r2, #4
    9c8c:	4313      	orrs	r3, r2
    9c8e:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    9c90:	683b      	ldr	r3, [r7, #0]
    9c92:	2204      	movs	r2, #4
    9c94:	4013      	ands	r3, r2
    9c96:	d003      	beq.n	9ca0 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    9c98:	68fb      	ldr	r3, [r7, #12]
    9c9a:	2202      	movs	r2, #2
    9c9c:	4313      	orrs	r3, r2
    9c9e:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    9ca0:	68fb      	ldr	r3, [r7, #12]
    9ca2:	b2da      	uxtb	r2, r3
    9ca4:	68bb      	ldr	r3, [r7, #8]
    9ca6:	761a      	strb	r2, [r3, #24]
}
    9ca8:	46c0      	nop			; (mov r8, r8)
    9caa:	46bd      	mov	sp, r7
    9cac:	b004      	add	sp, #16
    9cae:	bd80      	pop	{r7, pc}

00009cb0 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    9cb0:	b580      	push	{r7, lr}
    9cb2:	b084      	sub	sp, #16
    9cb4:	af00      	add	r7, sp, #0
    9cb6:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9cb8:	687b      	ldr	r3, [r7, #4]
    9cba:	681b      	ldr	r3, [r3, #0]
    9cbc:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    9cbe:	46c0      	nop			; (mov r8, r8)
    9cc0:	687b      	ldr	r3, [r7, #4]
    9cc2:	0018      	movs	r0, r3
    9cc4:	4b0b      	ldr	r3, [pc, #44]	; (9cf4 <adc_start_conversion+0x44>)
    9cc6:	4798      	blx	r3
    9cc8:	1e03      	subs	r3, r0, #0
    9cca:	d1f9      	bne.n	9cc0 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    9ccc:	68fb      	ldr	r3, [r7, #12]
    9cce:	7b1b      	ldrb	r3, [r3, #12]
    9cd0:	b2db      	uxtb	r3, r3
    9cd2:	2202      	movs	r2, #2
    9cd4:	4313      	orrs	r3, r2
    9cd6:	b2da      	uxtb	r2, r3
    9cd8:	68fb      	ldr	r3, [r7, #12]
    9cda:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    9cdc:	46c0      	nop			; (mov r8, r8)
    9cde:	687b      	ldr	r3, [r7, #4]
    9ce0:	0018      	movs	r0, r3
    9ce2:	4b04      	ldr	r3, [pc, #16]	; (9cf4 <adc_start_conversion+0x44>)
    9ce4:	4798      	blx	r3
    9ce6:	1e03      	subs	r3, r0, #0
    9ce8:	d1f9      	bne.n	9cde <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    9cea:	46c0      	nop			; (mov r8, r8)
    9cec:	46bd      	mov	sp, r7
    9cee:	b004      	add	sp, #16
    9cf0:	bd80      	pop	{r7, pc}
    9cf2:	46c0      	nop			; (mov r8, r8)
    9cf4:	00009be1 	.word	0x00009be1

00009cf8 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    9cf8:	b580      	push	{r7, lr}
    9cfa:	b084      	sub	sp, #16
    9cfc:	af00      	add	r7, sp, #0
    9cfe:	6078      	str	r0, [r7, #4]
    9d00:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	0018      	movs	r0, r3
    9d06:	4b18      	ldr	r3, [pc, #96]	; (9d68 <adc_read+0x70>)
    9d08:	4798      	blx	r3
    9d0a:	0002      	movs	r2, r0
    9d0c:	2301      	movs	r3, #1
    9d0e:	4013      	ands	r3, r2
    9d10:	d101      	bne.n	9d16 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    9d12:	2305      	movs	r3, #5
    9d14:	e023      	b.n	9d5e <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    9d16:	687b      	ldr	r3, [r7, #4]
    9d18:	681b      	ldr	r3, [r3, #0]
    9d1a:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    9d1c:	46c0      	nop			; (mov r8, r8)
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	0018      	movs	r0, r3
    9d22:	4b12      	ldr	r3, [pc, #72]	; (9d6c <adc_read+0x74>)
    9d24:	4798      	blx	r3
    9d26:	1e03      	subs	r3, r0, #0
    9d28:	d1f9      	bne.n	9d1e <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    9d2a:	68fb      	ldr	r3, [r7, #12]
    9d2c:	8b5b      	ldrh	r3, [r3, #26]
    9d2e:	b29a      	uxth	r2, r3
    9d30:	683b      	ldr	r3, [r7, #0]
    9d32:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    9d34:	687b      	ldr	r3, [r7, #4]
    9d36:	2101      	movs	r1, #1
    9d38:	0018      	movs	r0, r3
    9d3a:	4b0d      	ldr	r3, [pc, #52]	; (9d70 <adc_read+0x78>)
    9d3c:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	0018      	movs	r0, r3
    9d42:	4b09      	ldr	r3, [pc, #36]	; (9d68 <adc_read+0x70>)
    9d44:	4798      	blx	r3
    9d46:	0002      	movs	r2, r0
    9d48:	2304      	movs	r3, #4
    9d4a:	4013      	ands	r3, r2
    9d4c:	d006      	beq.n	9d5c <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    9d4e:	687b      	ldr	r3, [r7, #4]
    9d50:	2104      	movs	r1, #4
    9d52:	0018      	movs	r0, r3
    9d54:	4b06      	ldr	r3, [pc, #24]	; (9d70 <adc_read+0x78>)
    9d56:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    9d58:	231e      	movs	r3, #30
    9d5a:	e000      	b.n	9d5e <adc_read+0x66>
	}

	return STATUS_OK;
    9d5c:	2300      	movs	r3, #0
}
    9d5e:	0018      	movs	r0, r3
    9d60:	46bd      	mov	sp, r7
    9d62:	b004      	add	sp, #16
    9d64:	bd80      	pop	{r7, pc}
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	00009c09 	.word	0x00009c09
    9d6c:	00009be1 	.word	0x00009be1
    9d70:	00009c5d 	.word	0x00009c5d

00009d74 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    9d74:	b580      	push	{r7, lr}
    9d76:	b082      	sub	sp, #8
    9d78:	af00      	add	r7, sp, #0
    9d7a:	0002      	movs	r2, r0
    9d7c:	1dfb      	adds	r3, r7, #7
    9d7e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    9d80:	1dfb      	adds	r3, r7, #7
    9d82:	781b      	ldrb	r3, [r3, #0]
    9d84:	0018      	movs	r0, r3
    9d86:	4b03      	ldr	r3, [pc, #12]	; (9d94 <port_get_group_from_gpio_pin+0x20>)
    9d88:	4798      	blx	r3
    9d8a:	0003      	movs	r3, r0
}
    9d8c:	0018      	movs	r0, r3
    9d8e:	46bd      	mov	sp, r7
    9d90:	b002      	add	sp, #8
    9d92:	bd80      	pop	{r7, pc}
    9d94:	00009b55 	.word	0x00009b55

00009d98 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    9d98:	b580      	push	{r7, lr}
    9d9a:	b084      	sub	sp, #16
    9d9c:	af00      	add	r7, sp, #0
    9d9e:	0002      	movs	r2, r0
    9da0:	1dfb      	adds	r3, r7, #7
    9da2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9da4:	1dfb      	adds	r3, r7, #7
    9da6:	781b      	ldrb	r3, [r3, #0]
    9da8:	0018      	movs	r0, r3
    9daa:	4b0b      	ldr	r3, [pc, #44]	; (9dd8 <port_pin_get_output_level+0x40>)
    9dac:	4798      	blx	r3
    9dae:	0003      	movs	r3, r0
    9db0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9db2:	1dfb      	adds	r3, r7, #7
    9db4:	781b      	ldrb	r3, [r3, #0]
    9db6:	221f      	movs	r2, #31
    9db8:	4013      	ands	r3, r2
    9dba:	2201      	movs	r2, #1
    9dbc:	409a      	lsls	r2, r3
    9dbe:	0013      	movs	r3, r2
    9dc0:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    9dc2:	68fb      	ldr	r3, [r7, #12]
    9dc4:	691b      	ldr	r3, [r3, #16]
    9dc6:	68ba      	ldr	r2, [r7, #8]
    9dc8:	4013      	ands	r3, r2
    9dca:	1e5a      	subs	r2, r3, #1
    9dcc:	4193      	sbcs	r3, r2
    9dce:	b2db      	uxtb	r3, r3
}
    9dd0:	0018      	movs	r0, r3
    9dd2:	46bd      	mov	sp, r7
    9dd4:	b004      	add	sp, #16
    9dd6:	bd80      	pop	{r7, pc}
    9dd8:	00009d75 	.word	0x00009d75

00009ddc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9ddc:	b580      	push	{r7, lr}
    9dde:	b084      	sub	sp, #16
    9de0:	af00      	add	r7, sp, #0
    9de2:	0002      	movs	r2, r0
    9de4:	1dfb      	adds	r3, r7, #7
    9de6:	701a      	strb	r2, [r3, #0]
    9de8:	1dbb      	adds	r3, r7, #6
    9dea:	1c0a      	adds	r2, r1, #0
    9dec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9dee:	1dfb      	adds	r3, r7, #7
    9df0:	781b      	ldrb	r3, [r3, #0]
    9df2:	0018      	movs	r0, r3
    9df4:	4b0d      	ldr	r3, [pc, #52]	; (9e2c <port_pin_set_output_level+0x50>)
    9df6:	4798      	blx	r3
    9df8:	0003      	movs	r3, r0
    9dfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9dfc:	1dfb      	adds	r3, r7, #7
    9dfe:	781b      	ldrb	r3, [r3, #0]
    9e00:	221f      	movs	r2, #31
    9e02:	4013      	ands	r3, r2
    9e04:	2201      	movs	r2, #1
    9e06:	409a      	lsls	r2, r3
    9e08:	0013      	movs	r3, r2
    9e0a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9e0c:	1dbb      	adds	r3, r7, #6
    9e0e:	781b      	ldrb	r3, [r3, #0]
    9e10:	2b00      	cmp	r3, #0
    9e12:	d003      	beq.n	9e1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9e14:	68fb      	ldr	r3, [r7, #12]
    9e16:	68ba      	ldr	r2, [r7, #8]
    9e18:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9e1a:	e002      	b.n	9e22 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9e1c:	68fb      	ldr	r3, [r7, #12]
    9e1e:	68ba      	ldr	r2, [r7, #8]
    9e20:	615a      	str	r2, [r3, #20]
	}
}
    9e22:	46c0      	nop			; (mov r8, r8)
    9e24:	46bd      	mov	sp, r7
    9e26:	b004      	add	sp, #16
    9e28:	bd80      	pop	{r7, pc}
    9e2a:	46c0      	nop			; (mov r8, r8)
    9e2c:	00009d75 	.word	0x00009d75

00009e30 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9e30:	b580      	push	{r7, lr}
    9e32:	b084      	sub	sp, #16
    9e34:	af00      	add	r7, sp, #0
    9e36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9e38:	687b      	ldr	r3, [r7, #4]
    9e3a:	681b      	ldr	r3, [r3, #0]
    9e3c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    9e3e:	68fb      	ldr	r3, [r7, #12]
    9e40:	69db      	ldr	r3, [r3, #28]
    9e42:	1e5a      	subs	r2, r3, #1
    9e44:	4193      	sbcs	r3, r2
    9e46:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9e48:	0018      	movs	r0, r3
    9e4a:	46bd      	mov	sp, r7
    9e4c:	b004      	add	sp, #16
    9e4e:	bd80      	pop	{r7, pc}

00009e50 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9e50:	b580      	push	{r7, lr}
    9e52:	b082      	sub	sp, #8
    9e54:	af00      	add	r7, sp, #0
    9e56:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    9e58:	46c0      	nop			; (mov r8, r8)
    9e5a:	687b      	ldr	r3, [r7, #4]
    9e5c:	0018      	movs	r0, r3
    9e5e:	4b04      	ldr	r3, [pc, #16]	; (9e70 <_usart_wait_for_sync+0x20>)
    9e60:	4798      	blx	r3
    9e62:	1e03      	subs	r3, r0, #0
    9e64:	d1f9      	bne.n	9e5a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    9e66:	46c0      	nop			; (mov r8, r8)
    9e68:	46bd      	mov	sp, r7
    9e6a:	b002      	add	sp, #8
    9e6c:	bd80      	pop	{r7, pc}
    9e6e:	46c0      	nop			; (mov r8, r8)
    9e70:	00009e31 	.word	0x00009e31

00009e74 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    9e74:	b580      	push	{r7, lr}
    9e76:	b082      	sub	sp, #8
    9e78:	af00      	add	r7, sp, #0
    9e7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    9e7c:	687b      	ldr	r3, [r7, #4]
    9e7e:	2280      	movs	r2, #128	; 0x80
    9e80:	05d2      	lsls	r2, r2, #23
    9e82:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    9e84:	687b      	ldr	r3, [r7, #4]
    9e86:	2200      	movs	r2, #0
    9e88:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    9e8a:	687b      	ldr	r3, [r7, #4]
    9e8c:	22ff      	movs	r2, #255	; 0xff
    9e8e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    9e90:	687b      	ldr	r3, [r7, #4]
    9e92:	2200      	movs	r2, #0
    9e94:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    9e96:	687b      	ldr	r3, [r7, #4]
    9e98:	2200      	movs	r2, #0
    9e9a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    9e9c:	687b      	ldr	r3, [r7, #4]
    9e9e:	2296      	movs	r2, #150	; 0x96
    9ea0:	0192      	lsls	r2, r2, #6
    9ea2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    9ea4:	687b      	ldr	r3, [r7, #4]
    9ea6:	2224      	movs	r2, #36	; 0x24
    9ea8:	2101      	movs	r1, #1
    9eaa:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    9eac:	687b      	ldr	r3, [r7, #4]
    9eae:	2225      	movs	r2, #37	; 0x25
    9eb0:	2101      	movs	r1, #1
    9eb2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    9eb4:	687b      	ldr	r3, [r7, #4]
    9eb6:	2226      	movs	r2, #38	; 0x26
    9eb8:	2100      	movs	r1, #0
    9eba:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	2227      	movs	r2, #39	; 0x27
    9ec0:	2100      	movs	r1, #0
    9ec2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    9ec4:	687b      	ldr	r3, [r7, #4]
    9ec6:	2200      	movs	r2, #0
    9ec8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	2288      	movs	r2, #136	; 0x88
    9ece:	0352      	lsls	r2, r2, #13
    9ed0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	222c      	movs	r2, #44	; 0x2c
    9ed6:	2100      	movs	r1, #0
    9ed8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    9eda:	687b      	ldr	r3, [r7, #4]
    9edc:	222d      	movs	r2, #45	; 0x2d
    9ede:	2100      	movs	r1, #0
    9ee0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	2200      	movs	r2, #0
    9ee6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    9ee8:	687b      	ldr	r3, [r7, #4]
    9eea:	2200      	movs	r2, #0
    9eec:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    9eee:	687b      	ldr	r3, [r7, #4]
    9ef0:	2200      	movs	r2, #0
    9ef2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    9ef4:	687b      	ldr	r3, [r7, #4]
    9ef6:	2200      	movs	r2, #0
    9ef8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    9efa:	687b      	ldr	r3, [r7, #4]
    9efc:	2200      	movs	r2, #0
    9efe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    9f00:	687b      	ldr	r3, [r7, #4]
    9f02:	2200      	movs	r2, #0
    9f04:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    9f06:	687b      	ldr	r3, [r7, #4]
    9f08:	2200      	movs	r2, #0
    9f0a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    9f0c:	687b      	ldr	r3, [r7, #4]
    9f0e:	2200      	movs	r2, #0
    9f10:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    9f12:	687b      	ldr	r3, [r7, #4]
    9f14:	2200      	movs	r2, #0
    9f16:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    9f18:	687b      	ldr	r3, [r7, #4]
    9f1a:	2200      	movs	r2, #0
    9f1c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    9f1e:	687b      	ldr	r3, [r7, #4]
    9f20:	2213      	movs	r2, #19
    9f22:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    9f24:	687b      	ldr	r3, [r7, #4]
    9f26:	2200      	movs	r2, #0
    9f28:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    9f2a:	46c0      	nop			; (mov r8, r8)
    9f2c:	46bd      	mov	sp, r7
    9f2e:	b002      	add	sp, #8
    9f30:	bd80      	pop	{r7, pc}
    9f32:	46c0      	nop			; (mov r8, r8)

00009f34 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    9f34:	b580      	push	{r7, lr}
    9f36:	b084      	sub	sp, #16
    9f38:	af00      	add	r7, sp, #0
    9f3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9f3c:	687b      	ldr	r3, [r7, #4]
    9f3e:	681b      	ldr	r3, [r3, #0]
    9f40:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	681b      	ldr	r3, [r3, #0]
    9f46:	0018      	movs	r0, r3
    9f48:	4b09      	ldr	r3, [pc, #36]	; (9f70 <usart_enable+0x3c>)
    9f4a:	4798      	blx	r3
    9f4c:	0003      	movs	r3, r0
    9f4e:	0018      	movs	r0, r3
    9f50:	4b08      	ldr	r3, [pc, #32]	; (9f74 <usart_enable+0x40>)
    9f52:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9f54:	687b      	ldr	r3, [r7, #4]
    9f56:	0018      	movs	r0, r3
    9f58:	4b07      	ldr	r3, [pc, #28]	; (9f78 <usart_enable+0x44>)
    9f5a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    9f5c:	68fb      	ldr	r3, [r7, #12]
    9f5e:	681b      	ldr	r3, [r3, #0]
    9f60:	2202      	movs	r2, #2
    9f62:	431a      	orrs	r2, r3
    9f64:	68fb      	ldr	r3, [r7, #12]
    9f66:	601a      	str	r2, [r3, #0]
}
    9f68:	46c0      	nop			; (mov r8, r8)
    9f6a:	46bd      	mov	sp, r7
    9f6c:	b004      	add	sp, #16
    9f6e:	bd80      	pop	{r7, pc}
    9f70:	00004b19 	.word	0x00004b19
    9f74:	00009bb5 	.word	0x00009bb5
    9f78:	00009e51 	.word	0x00009e51

00009f7c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    9f7c:	b580      	push	{r7, lr}
    9f7e:	b084      	sub	sp, #16
    9f80:	af00      	add	r7, sp, #0
    9f82:	60f8      	str	r0, [r7, #12]
    9f84:	60b9      	str	r1, [r7, #8]
    9f86:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    9f88:	687a      	ldr	r2, [r7, #4]
    9f8a:	68b9      	ldr	r1, [r7, #8]
    9f8c:	68fb      	ldr	r3, [r7, #12]
    9f8e:	0018      	movs	r0, r3
    9f90:	4b05      	ldr	r3, [pc, #20]	; (9fa8 <usart_serial_init+0x2c>)
    9f92:	4798      	blx	r3
    9f94:	1e03      	subs	r3, r0, #0
    9f96:	d101      	bne.n	9f9c <usart_serial_init+0x20>
		return true;
    9f98:	2301      	movs	r3, #1
    9f9a:	e000      	b.n	9f9e <usart_serial_init+0x22>
	}
	else {
		return false;
    9f9c:	2300      	movs	r3, #0
	}
}
    9f9e:	0018      	movs	r0, r3
    9fa0:	46bd      	mov	sp, r7
    9fa2:	b004      	add	sp, #16
    9fa4:	bd80      	pop	{r7, pc}
    9fa6:	46c0      	nop			; (mov r8, r8)
    9fa8:	00005cfd 	.word	0x00005cfd

00009fac <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    9fac:	b580      	push	{r7, lr}
    9fae:	b082      	sub	sp, #8
    9fb0:	af00      	add	r7, sp, #0
    9fb2:	6078      	str	r0, [r7, #4]
    9fb4:	000a      	movs	r2, r1
    9fb6:	1cfb      	adds	r3, r7, #3
    9fb8:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    9fba:	46c0      	nop			; (mov r8, r8)
    9fbc:	1cfb      	adds	r3, r7, #3
    9fbe:	781b      	ldrb	r3, [r3, #0]
    9fc0:	b29a      	uxth	r2, r3
    9fc2:	687b      	ldr	r3, [r7, #4]
    9fc4:	0011      	movs	r1, r2
    9fc6:	0018      	movs	r0, r3
    9fc8:	4b04      	ldr	r3, [pc, #16]	; (9fdc <usart_serial_putchar+0x30>)
    9fca:	4798      	blx	r3
    9fcc:	1e03      	subs	r3, r0, #0
    9fce:	d1f5      	bne.n	9fbc <usart_serial_putchar+0x10>

	return STATUS_OK;
    9fd0:	2300      	movs	r3, #0
}
    9fd2:	0018      	movs	r0, r3
    9fd4:	46bd      	mov	sp, r7
    9fd6:	b002      	add	sp, #8
    9fd8:	bd80      	pop	{r7, pc}
    9fda:	46c0      	nop			; (mov r8, r8)
    9fdc:	00005f71 	.word	0x00005f71

00009fe0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    9fe0:	b580      	push	{r7, lr}
    9fe2:	b084      	sub	sp, #16
    9fe4:	af00      	add	r7, sp, #0
    9fe6:	6078      	str	r0, [r7, #4]
    9fe8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    9fea:	230e      	movs	r3, #14
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	2200      	movs	r2, #0
    9ff0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    9ff2:	46c0      	nop			; (mov r8, r8)
    9ff4:	230e      	movs	r3, #14
    9ff6:	18fa      	adds	r2, r7, r3
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	0011      	movs	r1, r2
    9ffc:	0018      	movs	r0, r3
    9ffe:	4b07      	ldr	r3, [pc, #28]	; (a01c <usart_serial_getchar+0x3c>)
    a000:	4798      	blx	r3
    a002:	1e03      	subs	r3, r0, #0
    a004:	d1f6      	bne.n	9ff4 <usart_serial_getchar+0x14>

	*c = temp;
    a006:	230e      	movs	r3, #14
    a008:	18fb      	adds	r3, r7, r3
    a00a:	881b      	ldrh	r3, [r3, #0]
    a00c:	b2da      	uxtb	r2, r3
    a00e:	683b      	ldr	r3, [r7, #0]
    a010:	701a      	strb	r2, [r3, #0]
}
    a012:	46c0      	nop			; (mov r8, r8)
    a014:	46bd      	mov	sp, r7
    a016:	b004      	add	sp, #16
    a018:	bd80      	pop	{r7, pc}
    a01a:	46c0      	nop			; (mov r8, r8)
    a01c:	00005fd5 	.word	0x00005fd5

0000a020 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a020:	b580      	push	{r7, lr}
    a022:	b084      	sub	sp, #16
    a024:	af00      	add	r7, sp, #0
    a026:	60f8      	str	r0, [r7, #12]
    a028:	60b9      	str	r1, [r7, #8]
    a02a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    a02c:	4b10      	ldr	r3, [pc, #64]	; (a070 <stdio_serial_init+0x50>)
    a02e:	68fa      	ldr	r2, [r7, #12]
    a030:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    a032:	4b10      	ldr	r3, [pc, #64]	; (a074 <stdio_serial_init+0x54>)
    a034:	4a10      	ldr	r2, [pc, #64]	; (a078 <stdio_serial_init+0x58>)
    a036:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    a038:	4b10      	ldr	r3, [pc, #64]	; (a07c <stdio_serial_init+0x5c>)
    a03a:	4a11      	ldr	r2, [pc, #68]	; (a080 <stdio_serial_init+0x60>)
    a03c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    a03e:	687a      	ldr	r2, [r7, #4]
    a040:	68b9      	ldr	r1, [r7, #8]
    a042:	68fb      	ldr	r3, [r7, #12]
    a044:	0018      	movs	r0, r3
    a046:	4b0f      	ldr	r3, [pc, #60]	; (a084 <stdio_serial_init+0x64>)
    a048:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    a04a:	4b0f      	ldr	r3, [pc, #60]	; (a088 <stdio_serial_init+0x68>)
    a04c:	681b      	ldr	r3, [r3, #0]
    a04e:	689b      	ldr	r3, [r3, #8]
    a050:	2100      	movs	r1, #0
    a052:	0018      	movs	r0, r3
    a054:	4b0d      	ldr	r3, [pc, #52]	; (a08c <stdio_serial_init+0x6c>)
    a056:	4798      	blx	r3
	setbuf(stdin, NULL);
    a058:	4b0b      	ldr	r3, [pc, #44]	; (a088 <stdio_serial_init+0x68>)
    a05a:	681b      	ldr	r3, [r3, #0]
    a05c:	685b      	ldr	r3, [r3, #4]
    a05e:	2100      	movs	r1, #0
    a060:	0018      	movs	r0, r3
    a062:	4b0a      	ldr	r3, [pc, #40]	; (a08c <stdio_serial_init+0x6c>)
    a064:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    a066:	46c0      	nop			; (mov r8, r8)
    a068:	46bd      	mov	sp, r7
    a06a:	b004      	add	sp, #16
    a06c:	bd80      	pop	{r7, pc}
    a06e:	46c0      	nop			; (mov r8, r8)
    a070:	20004640 	.word	0x20004640
    a074:	2000463c 	.word	0x2000463c
    a078:	00009fad 	.word	0x00009fad
    a07c:	20004638 	.word	0x20004638
    a080:	00009fe1 	.word	0x00009fe1
    a084:	00009f7d 	.word	0x00009f7d
    a088:	20000090 	.word	0x20000090
    a08c:	0000bce5 	.word	0x0000bce5

0000a090 <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    a090:	b590      	push	{r4, r7, lr}
    a092:	b087      	sub	sp, #28
    a094:	af02      	add	r7, sp, #8
    a096:	0002      	movs	r2, r0
    a098:	6039      	str	r1, [r7, #0]
    a09a:	1dfb      	adds	r3, r7, #7
    a09c:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    a09e:	1dfb      	adds	r3, r7, #7
    a0a0:	781b      	ldrb	r3, [r3, #0]
    a0a2:	2b2c      	cmp	r3, #44	; 0x2c
    a0a4:	d002      	beq.n	a0ac <m2m_wifi_state+0x1c>
    a0a6:	2b32      	cmp	r3, #50	; 0x32
    a0a8:	d025      	beq.n	a0f6 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    a0aa:	e042      	b.n	a132 <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    a0ac:	683b      	ldr	r3, [r7, #0]
    a0ae:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    a0b0:	68fb      	ldr	r3, [r7, #12]
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	2b01      	cmp	r3, #1
    a0b6:	d104      	bne.n	a0c2 <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    a0b8:	4b20      	ldr	r3, [pc, #128]	; (a13c <m2m_wifi_state+0xac>)
    a0ba:	0018      	movs	r0, r3
    a0bc:	4b20      	ldr	r3, [pc, #128]	; (a140 <m2m_wifi_state+0xb0>)
    a0be:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    a0c0:	e036      	b.n	a130 <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a0c2:	68fb      	ldr	r3, [r7, #12]
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d132      	bne.n	a130 <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    a0ca:	4b1e      	ldr	r3, [pc, #120]	; (a144 <m2m_wifi_state+0xb4>)
    a0cc:	0018      	movs	r0, r3
    a0ce:	4b1c      	ldr	r3, [pc, #112]	; (a140 <m2m_wifi_state+0xb0>)
    a0d0:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    a0d2:	4b1d      	ldr	r3, [pc, #116]	; (a148 <m2m_wifi_state+0xb8>)
    a0d4:	781b      	ldrb	r3, [r3, #0]
    a0d6:	b2db      	uxtb	r3, r3
    a0d8:	2b03      	cmp	r3, #3
    a0da:	d129      	bne.n	a130 <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    a0dc:	4b1a      	ldr	r3, [pc, #104]	; (a148 <m2m_wifi_state+0xb8>)
    a0de:	2204      	movs	r2, #4
    a0e0:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    a0e2:	4a1a      	ldr	r2, [pc, #104]	; (a14c <m2m_wifi_state+0xbc>)
    a0e4:	481a      	ldr	r0, [pc, #104]	; (a150 <m2m_wifi_state+0xc0>)
    a0e6:	23ff      	movs	r3, #255	; 0xff
    a0e8:	9300      	str	r3, [sp, #0]
    a0ea:	0013      	movs	r3, r2
    a0ec:	2202      	movs	r2, #2
    a0ee:	211b      	movs	r1, #27
    a0f0:	4c18      	ldr	r4, [pc, #96]	; (a154 <m2m_wifi_state+0xc4>)
    a0f2:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    a0f4:	e01c      	b.n	a130 <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    a0f6:	683b      	ldr	r3, [r7, #0]
    a0f8:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    a0fa:	4b17      	ldr	r3, [pc, #92]	; (a158 <m2m_wifi_state+0xc8>)
    a0fc:	681a      	ldr	r2, [r3, #0]
    a0fe:	4b17      	ldr	r3, [pc, #92]	; (a15c <m2m_wifi_state+0xcc>)
    a100:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    a102:	68bb      	ldr	r3, [r7, #8]
    a104:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    a106:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    a108:	68bb      	ldr	r3, [r7, #8]
    a10a:	3301      	adds	r3, #1
    a10c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    a10e:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    a110:	68bb      	ldr	r3, [r7, #8]
    a112:	3302      	adds	r3, #2
    a114:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    a116:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    a118:	68bb      	ldr	r3, [r7, #8]
    a11a:	3303      	adds	r3, #3
    a11c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    a11e:	4810      	ldr	r0, [pc, #64]	; (a160 <m2m_wifi_state+0xd0>)
    a120:	9300      	str	r3, [sp, #0]
    a122:	0023      	movs	r3, r4
    a124:	4c0f      	ldr	r4, [pc, #60]	; (a164 <m2m_wifi_state+0xd4>)
    a126:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    a128:	4b07      	ldr	r3, [pc, #28]	; (a148 <m2m_wifi_state+0xb8>)
    a12a:	2203      	movs	r2, #3
    a12c:	701a      	strb	r2, [r3, #0]

		break;
    a12e:	e000      	b.n	a132 <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    a130:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    a132:	46c0      	nop			; (mov r8, r8)
    a134:	46bd      	mov	sp, r7
    a136:	b005      	add	sp, #20
    a138:	bd90      	pop	{r4, r7, pc}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	0000db50 	.word	0x0000db50
    a140:	0000bcd1 	.word	0x0000bcd1
    a144:	0000db8c 	.word	0x0000db8c
    a148:	20003cf8 	.word	0x20003cf8
    a14c:	0000dbcc 	.word	0x0000dbcc
    a150:	0000dbd8 	.word	0x0000dbd8
    a154:	00001bf1 	.word	0x00001bf1
    a158:	20003cfc 	.word	0x20003cfc
    a15c:	20003d08 	.word	0x20003d08
    a160:	0000dbf4 	.word	0x0000dbf4
    a164:	0000bbb1 	.word	0x0000bbb1

0000a168 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    a168:	b580      	push	{r7, lr}
    a16a:	b090      	sub	sp, #64	; 0x40
    a16c:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    a16e:	003b      	movs	r3, r7
    a170:	0018      	movs	r0, r3
    a172:	4b13      	ldr	r3, [pc, #76]	; (a1c0 <configure_console+0x58>)
    a174:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    a176:	003b      	movs	r3, r7
    a178:	2280      	movs	r2, #128	; 0x80
    a17a:	0352      	lsls	r2, r2, #13
    a17c:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    a17e:	003b      	movs	r3, r7
    a180:	4a10      	ldr	r2, [pc, #64]	; (a1c4 <configure_console+0x5c>)
    a182:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    a184:	003b      	movs	r3, r7
    a186:	4a10      	ldr	r2, [pc, #64]	; (a1c8 <configure_console+0x60>)
    a188:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    a18a:	003b      	movs	r3, r7
    a18c:	2201      	movs	r2, #1
    a18e:	4252      	negs	r2, r2
    a190:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    a192:	003b      	movs	r3, r7
    a194:	2201      	movs	r2, #1
    a196:	4252      	negs	r2, r2
    a198:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    a19a:	003b      	movs	r3, r7
    a19c:	22e1      	movs	r2, #225	; 0xe1
    a19e:	0252      	lsls	r2, r2, #9
    a1a0:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    a1a2:	003a      	movs	r2, r7
    a1a4:	4909      	ldr	r1, [pc, #36]	; (a1cc <configure_console+0x64>)
    a1a6:	4b0a      	ldr	r3, [pc, #40]	; (a1d0 <configure_console+0x68>)
    a1a8:	0018      	movs	r0, r3
    a1aa:	4b0a      	ldr	r3, [pc, #40]	; (a1d4 <configure_console+0x6c>)
    a1ac:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    a1ae:	4b08      	ldr	r3, [pc, #32]	; (a1d0 <configure_console+0x68>)
    a1b0:	0018      	movs	r0, r3
    a1b2:	4b09      	ldr	r3, [pc, #36]	; (a1d8 <configure_console+0x70>)
    a1b4:	4798      	blx	r3
}
    a1b6:	46c0      	nop			; (mov r8, r8)
    a1b8:	46bd      	mov	sp, r7
    a1ba:	b010      	add	sp, #64	; 0x40
    a1bc:	bd80      	pop	{r7, pc}
    a1be:	46c0      	nop			; (mov r8, r8)
    a1c0:	00009e75 	.word	0x00009e75
    a1c4:	00100002 	.word	0x00100002
    a1c8:	00110002 	.word	0x00110002
    a1cc:	42000c00 	.word	0x42000c00
    a1d0:	20003d10 	.word	0x20003d10
    a1d4:	0000a021 	.word	0x0000a021
    a1d8:	00009f35 	.word	0x00009f35

0000a1dc <task_3s>:
	adc_enable(&adc_instance);
}


static void task_3s(void *args)
{
    a1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1de:	b0cd      	sub	sp, #308	; 0x134
    a1e0:	af04      	add	r7, sp, #16
    a1e2:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    a1e4:	2300      	movs	r3, #0
    a1e6:	2400      	movs	r4, #0
    a1e8:	228c      	movs	r2, #140	; 0x8c
    a1ea:	0052      	lsls	r2, r2, #1
    a1ec:	18ba      	adds	r2, r7, r2
    a1ee:	6013      	str	r3, [r2, #0]
    a1f0:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    a1f2:	2389      	movs	r3, #137	; 0x89
    a1f4:	005b      	lsls	r3, r3, #1
    a1f6:	18fb      	adds	r3, r7, r3
    a1f8:	2200      	movs	r2, #0
    a1fa:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    a1fc:	4b4f      	ldr	r3, [pc, #316]	; (a33c <task_3s+0x160>)
    a1fe:	2290      	movs	r2, #144	; 0x90
    a200:	0052      	lsls	r2, r2, #1
    a202:	4694      	mov	ip, r2
    a204:	44bc      	add	ip, r7
    a206:	4463      	add	r3, ip
    a208:	0018      	movs	r0, r3
    a20a:	2380      	movs	r3, #128	; 0x80
    a20c:	005b      	lsls	r3, r3, #1
    a20e:	001a      	movs	r2, r3
    a210:	2100      	movs	r1, #0
    a212:	4b4b      	ldr	r3, [pc, #300]	; (a340 <task_3s+0x164>)
    a214:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    a216:	4b4b      	ldr	r3, [pc, #300]	; (a344 <task_3s+0x168>)
    a218:	228a      	movs	r2, #138	; 0x8a
    a21a:	0052      	lsls	r2, r2, #1
    a21c:	18ba      	adds	r2, r7, r2
    a21e:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    a220:	4b49      	ldr	r3, [pc, #292]	; (a348 <task_3s+0x16c>)
    a222:	4798      	blx	r3
    a224:	0003      	movs	r3, r0
    a226:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);
    a228:	238a      	movs	r3, #138	; 0x8a
    a22a:	005b      	lsls	r3, r3, #1
    a22c:	18fb      	adds	r3, r7, r3
    a22e:	681a      	ldr	r2, [r3, #0]
    a230:	230c      	movs	r3, #12
    a232:	18fb      	adds	r3, r7, r3
    a234:	0011      	movs	r1, r2
    a236:	0018      	movs	r0, r3
    a238:	4b44      	ldr	r3, [pc, #272]	; (a34c <task_3s+0x170>)
    a23a:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    a23c:	4b44      	ldr	r3, [pc, #272]	; (a350 <task_3s+0x174>)
    a23e:	781b      	ldrb	r3, [r3, #0]
    a240:	b2db      	uxtb	r3, r3
    a242:	2b03      	cmp	r3, #3
    a244:	d1f0      	bne.n	a228 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    a246:	4b43      	ldr	r3, [pc, #268]	; (a354 <task_3s+0x178>)
    a248:	681a      	ldr	r2, [r3, #0]
    a24a:	4b43      	ldr	r3, [pc, #268]	; (a358 <task_3s+0x17c>)
    a24c:	601a      	str	r2, [r3, #0]
            adc_start_conversion(&adc_instance);            
    a24e:	4b43      	ldr	r3, [pc, #268]	; (a35c <task_3s+0x180>)
    a250:	0018      	movs	r0, r3
    a252:	4b43      	ldr	r3, [pc, #268]	; (a360 <task_3s+0x184>)
    a254:	4798      	blx	r3
            temperature = 0;
    a256:	2300      	movs	r3, #0
    a258:	2400      	movs	r4, #0
    a25a:	228c      	movs	r2, #140	; 0x8c
    a25c:	0052      	lsls	r2, r2, #1
    a25e:	18ba      	adds	r2, r7, r2
    a260:	6013      	str	r3, [r2, #0]
    a262:	6054      	str	r4, [r2, #4]
            adc_read(&adc_instance, &light);
    a264:	2389      	movs	r3, #137	; 0x89
    a266:	005b      	lsls	r3, r3, #1
    a268:	18fa      	adds	r2, r7, r3
    a26a:	4b3c      	ldr	r3, [pc, #240]	; (a35c <task_3s+0x180>)
    a26c:	0011      	movs	r1, r2
    a26e:	0018      	movs	r0, r3
    a270:	4b3c      	ldr	r3, [pc, #240]	; (a364 <task_3s+0x188>)
    a272:	4798      	blx	r3
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    a274:	4b3c      	ldr	r3, [pc, #240]	; (a368 <task_3s+0x18c>)
    a276:	228c      	movs	r2, #140	; 0x8c
    a278:	0052      	lsls	r2, r2, #1
    a27a:	18ba      	adds	r2, r7, r2
    a27c:	6810      	ldr	r0, [r2, #0]
    a27e:	6851      	ldr	r1, [r2, #4]
    a280:	4798      	blx	r3
    a282:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    a284:	4c39      	ldr	r4, [pc, #228]	; (a36c <task_3s+0x190>)
    a286:	2200      	movs	r2, #0
    a288:	4b39      	ldr	r3, [pc, #228]	; (a370 <task_3s+0x194>)
    a28a:	218c      	movs	r1, #140	; 0x8c
    a28c:	0049      	lsls	r1, r1, #1
    a28e:	1879      	adds	r1, r7, r1
    a290:	6808      	ldr	r0, [r1, #0]
    a292:	6849      	ldr	r1, [r1, #4]
    a294:	47a0      	blx	r4
    a296:	0003      	movs	r3, r0
    a298:	000c      	movs	r4, r1
    a29a:	0019      	movs	r1, r3
    a29c:	0022      	movs	r2, r4
    a29e:	4b32      	ldr	r3, [pc, #200]	; (a368 <task_3s+0x18c>)
    a2a0:	0008      	movs	r0, r1
    a2a2:	0011      	movs	r1, r2
    a2a4:	4798      	blx	r3
    a2a6:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    a2a8:	4b32      	ldr	r3, [pc, #200]	; (a374 <task_3s+0x198>)
    a2aa:	2164      	movs	r1, #100	; 0x64
    a2ac:	0010      	movs	r0, r2
    a2ae:	4798      	blx	r3
    a2b0:	000b      	movs	r3, r1
    a2b2:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    a2b4:	2389      	movs	r3, #137	; 0x89
    a2b6:	005b      	lsls	r3, r3, #1
    a2b8:	18fb      	adds	r3, r7, r3
    a2ba:	881b      	ldrh	r3, [r3, #0]
    a2bc:	001a      	movs	r2, r3
    a2be:	2380      	movs	r3, #128	; 0x80
    a2c0:	015b      	lsls	r3, r3, #5
    a2c2:	1a9b      	subs	r3, r3, r2
    a2c4:	2264      	movs	r2, #100	; 0x64
    a2c6:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	da02      	bge.n	a2d2 <task_3s+0xf6>
    a2cc:	4a2a      	ldr	r2, [pc, #168]	; (a378 <task_3s+0x19c>)
    a2ce:	4694      	mov	ip, r2
    a2d0:	4463      	add	r3, ip
    a2d2:	131b      	asrs	r3, r3, #12
    a2d4:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    a2d6:	2017      	movs	r0, #23
    a2d8:	4b28      	ldr	r3, [pc, #160]	; (a37c <task_3s+0x1a0>)
    a2da:	4798      	blx	r3
    a2dc:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    a2de:	d001      	beq.n	a2e4 <task_3s+0x108>
    a2e0:	4b27      	ldr	r3, [pc, #156]	; (a380 <task_3s+0x1a4>)
    a2e2:	e000      	b.n	a2e6 <task_3s+0x10a>
    a2e4:	4b27      	ldr	r3, [pc, #156]	; (a384 <task_3s+0x1a8>)
    a2e6:	4a28      	ldr	r2, [pc, #160]	; (a388 <task_3s+0x1ac>)
    a2e8:	4928      	ldr	r1, [pc, #160]	; (a38c <task_3s+0x1b0>)
    a2ea:	2010      	movs	r0, #16
    a2ec:	1838      	adds	r0, r7, r0
    a2ee:	9302      	str	r3, [sp, #8]
    a2f0:	9501      	str	r5, [sp, #4]
    a2f2:	9400      	str	r4, [sp, #0]
    a2f4:	0033      	movs	r3, r6
    a2f6:	4c26      	ldr	r4, [pc, #152]	; (a390 <task_3s+0x1b4>)
    a2f8:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    a2fa:	2310      	movs	r3, #16
    a2fc:	18fa      	adds	r2, r7, r3
    a2fe:	4b25      	ldr	r3, [pc, #148]	; (a394 <task_3s+0x1b8>)
    a300:	0011      	movs	r1, r2
    a302:	0018      	movs	r0, r3
    a304:	4b24      	ldr	r3, [pc, #144]	; (a398 <task_3s+0x1bc>)
    a306:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    a308:	4b24      	ldr	r3, [pc, #144]	; (a39c <task_3s+0x1c0>)
    a30a:	681b      	ldr	r3, [r3, #0]
    a30c:	2253      	movs	r2, #83	; 0x53
    a30e:	569b      	ldrsb	r3, [r3, r2]
    a310:	0018      	movs	r0, r3
    a312:	4b23      	ldr	r3, [pc, #140]	; (a3a0 <task_3s+0x1c4>)
    a314:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    a316:	4b21      	ldr	r3, [pc, #132]	; (a39c <task_3s+0x1c0>)
    a318:	681b      	ldr	r3, [r3, #0]
    a31a:	2252      	movs	r2, #82	; 0x52
    a31c:	2100      	movs	r1, #0
    a31e:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    a320:	4b1e      	ldr	r3, [pc, #120]	; (a39c <task_3s+0x1c0>)
    a322:	681b      	ldr	r3, [r3, #0]
    a324:	2250      	movs	r2, #80	; 0x50
    a326:	2102      	movs	r1, #2
    a328:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    a32a:	4b1c      	ldr	r3, [pc, #112]	; (a39c <task_3s+0x1c0>)
    a32c:	681b      	ldr	r3, [r3, #0]
    a32e:	2210      	movs	r2, #16
    a330:	18ba      	adds	r2, r7, r2
    a332:	4915      	ldr	r1, [pc, #84]	; (a388 <task_3s+0x1ac>)
    a334:	0018      	movs	r0, r3
    a336:	4b1b      	ldr	r3, [pc, #108]	; (a3a4 <task_3s+0x1c8>)
    a338:	4798      	blx	r3
        }        
    }
    a33a:	e775      	b.n	a228 <task_3s+0x4c>
    a33c:	fffffef0 	.word	0xfffffef0
    a340:	0000b5fb 	.word	0x0000b5fb
    a344:	00000bb8 	.word	0x00000bb8
    a348:	00008cbd 	.word	0x00008cbd
    a34c:	00008a21 	.word	0x00008a21
    a350:	20003cf8 	.word	0x20003cf8
    a354:	20003cfc 	.word	0x20003cfc
    a358:	20003d00 	.word	0x20003d00
    a35c:	20004644 	.word	0x20004644
    a360:	00009cb1 	.word	0x00009cb1
    a364:	00009cf9 	.word	0x00009cf9
    a368:	0000b495 	.word	0x0000b495
    a36c:	0000afa1 	.word	0x0000afa1
    a370:	40590000 	.word	0x40590000
    a374:	0000af3d 	.word	0x0000af3d
    a378:	00000fff 	.word	0x00000fff
    a37c:	00009d99 	.word	0x00009d99
    a380:	0000dc30 	.word	0x0000dc30
    a384:	0000dc34 	.word	0x0000dc34
    a388:	20000020 	.word	0x20000020
    a38c:	0000dc38 	.word	0x0000dc38
    a390:	0000bebd 	.word	0x0000bebd
    a394:	0000dc7c 	.word	0x0000dc7c
    a398:	0000bbb1 	.word	0x0000bbb1
    a39c:	20003d0c 	.word	0x20003d0c
    a3a0:	00003a11 	.word	0x00003a11
    a3a4:	0000a83d 	.word	0x0000a83d

0000a3a8 <task_1s>:
}

static void task_1s(void *args)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b086      	sub	sp, #24
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    a3b0:	4b47      	ldr	r3, [pc, #284]	; (a4d0 <task_1s+0x128>)
    a3b2:	4798      	blx	r3
    a3b4:	0003      	movs	r3, r0
    a3b6:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    a3b8:	23fa      	movs	r3, #250	; 0xfa
    a3ba:	009b      	lsls	r3, r3, #2
    a3bc:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    a3be:	697a      	ldr	r2, [r7, #20]
    a3c0:	230c      	movs	r3, #12
    a3c2:	18fb      	adds	r3, r7, r3
    a3c4:	0011      	movs	r1, r2
    a3c6:	0018      	movs	r0, r3
    a3c8:	4b42      	ldr	r3, [pc, #264]	; (a4d4 <task_1s+0x12c>)
    a3ca:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    a3cc:	4b42      	ldr	r3, [pc, #264]	; (a4d8 <task_1s+0x130>)
    a3ce:	781b      	ldrb	r3, [r3, #0]
    a3d0:	b2db      	uxtb	r3, r3
    a3d2:	2b03      	cmp	r3, #3
    a3d4:	d000      	beq.n	a3d8 <task_1s+0x30>
    a3d6:	e078      	b.n	a4ca <task_1s+0x122>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    a3d8:	4b40      	ldr	r3, [pc, #256]	; (a4dc <task_1s+0x134>)
    a3da:	681b      	ldr	r3, [r3, #0]
    a3dc:	2252      	movs	r2, #82	; 0x52
    a3de:	5c9b      	ldrb	r3, [r3, r2]
    a3e0:	2b00      	cmp	r3, #0
    a3e2:	d000      	beq.n	a3e6 <task_1s+0x3e>
    a3e4:	e071      	b.n	a4ca <task_1s+0x122>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    a3e6:	4b3d      	ldr	r3, [pc, #244]	; (a4dc <task_1s+0x134>)
    a3e8:	681b      	ldr	r3, [r3, #0]
    a3ea:	2251      	movs	r2, #81	; 0x51
    a3ec:	5c9b      	ldrb	r3, [r3, r2]
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d00b      	beq.n	a40a <task_1s+0x62>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    a3f2:	4b3a      	ldr	r3, [pc, #232]	; (a4dc <task_1s+0x134>)
    a3f4:	681b      	ldr	r3, [r3, #0]
    a3f6:	2251      	movs	r2, #81	; 0x51
    a3f8:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    a3fa:	2b02      	cmp	r3, #2
    a3fc:	d110      	bne.n	a420 <task_1s+0x78>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    a3fe:	4b37      	ldr	r3, [pc, #220]	; (a4dc <task_1s+0x134>)
    a400:	681b      	ldr	r3, [r3, #0]
    a402:	2250      	movs	r2, #80	; 0x50
    a404:	5c9b      	ldrb	r3, [r3, r2]
    a406:	2b00      	cmp	r3, #0
    a408:	d10a      	bne.n	a420 <task_1s+0x78>
                    printf("main: subscribe event, PNR_OK\r\n");
    a40a:	4b35      	ldr	r3, [pc, #212]	; (a4e0 <task_1s+0x138>)
    a40c:	0018      	movs	r0, r3
    a40e:	4b35      	ldr	r3, [pc, #212]	; (a4e4 <task_1s+0x13c>)
    a410:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    a412:	4b32      	ldr	r3, [pc, #200]	; (a4dc <task_1s+0x134>)
    a414:	681b      	ldr	r3, [r3, #0]
    a416:	4a34      	ldr	r2, [pc, #208]	; (a4e8 <task_1s+0x140>)
    a418:	0011      	movs	r1, r2
    a41a:	0018      	movs	r0, r3
    a41c:	4b33      	ldr	r3, [pc, #204]	; (a4ec <task_1s+0x144>)
    a41e:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    a420:	4b2e      	ldr	r3, [pc, #184]	; (a4dc <task_1s+0x134>)
    a422:	681b      	ldr	r3, [r3, #0]
    a424:	0018      	movs	r0, r3
    a426:	4b32      	ldr	r3, [pc, #200]	; (a4f0 <task_1s+0x148>)
    a428:	4798      	blx	r3
    a42a:	0003      	movs	r3, r0
    a42c:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    a42e:	693b      	ldr	r3, [r7, #16]
    a430:	2b00      	cmp	r3, #0
    a432:	d031      	beq.n	a498 <task_1s+0xf0>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    a434:	693b      	ldr	r3, [r7, #16]
    a436:	3302      	adds	r3, #2
    a438:	492e      	ldr	r1, [pc, #184]	; (a4f4 <task_1s+0x14c>)
    a43a:	2203      	movs	r2, #3
    a43c:	0018      	movs	r0, r3
    a43e:	4b2e      	ldr	r3, [pc, #184]	; (a4f8 <task_1s+0x150>)
    a440:	4798      	blx	r3
    a442:	1e03      	subs	r3, r0, #0
    a444:	d121      	bne.n	a48a <task_1s+0xe2>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    a446:	693a      	ldr	r2, [r7, #16]
    a448:	4b2c      	ldr	r3, [pc, #176]	; (a4fc <task_1s+0x154>)
    a44a:	0011      	movs	r1, r2
    a44c:	0018      	movs	r0, r3
    a44e:	4b2c      	ldr	r3, [pc, #176]	; (a500 <task_1s+0x158>)
    a450:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    a452:	693b      	ldr	r3, [r7, #16]
    a454:	3308      	adds	r3, #8
    a456:	492b      	ldr	r1, [pc, #172]	; (a504 <task_1s+0x15c>)
    a458:	2202      	movs	r2, #2
    a45a:	0018      	movs	r0, r3
    a45c:	4b26      	ldr	r3, [pc, #152]	; (a4f8 <task_1s+0x150>)
    a45e:	4798      	blx	r3
    a460:	1e03      	subs	r3, r0, #0
    a462:	d104      	bne.n	a46e <task_1s+0xc6>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    a464:	2100      	movs	r1, #0
    a466:	2017      	movs	r0, #23
    a468:	4b27      	ldr	r3, [pc, #156]	; (a508 <task_1s+0x160>)
    a46a:	4798      	blx	r3
    a46c:	e7d8      	b.n	a420 <task_1s+0x78>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    a46e:	693b      	ldr	r3, [r7, #16]
    a470:	3308      	adds	r3, #8
    a472:	4926      	ldr	r1, [pc, #152]	; (a50c <task_1s+0x164>)
    a474:	2203      	movs	r2, #3
    a476:	0018      	movs	r0, r3
    a478:	4b1f      	ldr	r3, [pc, #124]	; (a4f8 <task_1s+0x150>)
    a47a:	4798      	blx	r3
    a47c:	1e03      	subs	r3, r0, #0
    a47e:	d1cf      	bne.n	a420 <task_1s+0x78>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    a480:	2101      	movs	r1, #1
    a482:	2017      	movs	r0, #23
    a484:	4b20      	ldr	r3, [pc, #128]	; (a508 <task_1s+0x160>)
    a486:	4798      	blx	r3
    a488:	e7ca      	b.n	a420 <task_1s+0x78>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    a48a:	693a      	ldr	r2, [r7, #16]
    a48c:	4b20      	ldr	r3, [pc, #128]	; (a510 <task_1s+0x168>)
    a48e:	0011      	movs	r1, r2
    a490:	0018      	movs	r0, r3
    a492:	4b1b      	ldr	r3, [pc, #108]	; (a500 <task_1s+0x158>)
    a494:	4798      	blx	r3
                    }
                }
    a496:	e7c3      	b.n	a420 <task_1s+0x78>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    a498:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    a49a:	4b1e      	ldr	r3, [pc, #120]	; (a514 <task_1s+0x16c>)
    a49c:	681a      	ldr	r2, [r3, #0]
    a49e:	4b1e      	ldr	r3, [pc, #120]	; (a518 <task_1s+0x170>)
    a4a0:	681b      	ldr	r3, [r3, #0]
    a4a2:	1ad2      	subs	r2, r2, r3
    a4a4:	23fa      	movs	r3, #250	; 0xfa
    a4a6:	009b      	lsls	r3, r3, #2
    a4a8:	429a      	cmp	r2, r3
    a4aa:	d90e      	bls.n	a4ca <task_1s+0x122>
                    gu32subscribeDelay = gu32MsTicks;
    a4ac:	4b19      	ldr	r3, [pc, #100]	; (a514 <task_1s+0x16c>)
    a4ae:	681a      	ldr	r2, [r3, #0]
    a4b0:	4b19      	ldr	r3, [pc, #100]	; (a518 <task_1s+0x170>)
    a4b2:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    a4b4:	4b19      	ldr	r3, [pc, #100]	; (a51c <task_1s+0x174>)
    a4b6:	0018      	movs	r0, r3
    a4b8:	4b0a      	ldr	r3, [pc, #40]	; (a4e4 <task_1s+0x13c>)
    a4ba:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    a4bc:	4b07      	ldr	r3, [pc, #28]	; (a4dc <task_1s+0x134>)
    a4be:	681b      	ldr	r3, [r3, #0]
    a4c0:	4a09      	ldr	r2, [pc, #36]	; (a4e8 <task_1s+0x140>)
    a4c2:	0011      	movs	r1, r2
    a4c4:	0018      	movs	r0, r3
    a4c6:	4b09      	ldr	r3, [pc, #36]	; (a4ec <task_1s+0x144>)
    a4c8:	4798      	blx	r3
                }
            }
        }    
        
       display_led_test_1Hz();
    a4ca:	4b15      	ldr	r3, [pc, #84]	; (a520 <task_1s+0x178>)
    a4cc:	4798      	blx	r3
    }
    a4ce:	e776      	b.n	a3be <task_1s+0x16>
    a4d0:	00008cbd 	.word	0x00008cbd
    a4d4:	00008a21 	.word	0x00008a21
    a4d8:	20003cf8 	.word	0x20003cf8
    a4dc:	20003d0c 	.word	0x20003d0c
    a4e0:	0000dc98 	.word	0x0000dc98
    a4e4:	0000bcd1 	.word	0x0000bcd1
    a4e8:	20000020 	.word	0x20000020
    a4ec:	0000aa35 	.word	0x0000aa35
    a4f0:	0000abb1 	.word	0x0000abb1
    a4f4:	0000dcb8 	.word	0x0000dcb8
    a4f8:	0000bf0f 	.word	0x0000bf0f
    a4fc:	0000dcbc 	.word	0x0000dcbc
    a500:	0000bbb1 	.word	0x0000bbb1
    a504:	0000dce8 	.word	0x0000dce8
    a508:	00009ddd 	.word	0x00009ddd
    a50c:	0000dcec 	.word	0x0000dcec
    a510:	0000dcf0 	.word	0x0000dcf0
    a514:	20003cfc 	.word	0x20003cfc
    a518:	20003d04 	.word	0x20003d04
    a51c:	0000dd10 	.word	0x0000dd10
    a520:	00000171 	.word	0x00000171

0000a524 <task_50Hz>:

}

static void task_50Hz(void *args)
{
    a524:	b580      	push	{r7, lr}
    a526:	b084      	sub	sp, #16
    a528:	af00      	add	r7, sp, #0
    a52a:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    a52c:	4b07      	ldr	r3, [pc, #28]	; (a54c <task_50Hz+0x28>)
    a52e:	4798      	blx	r3
    a530:	0003      	movs	r3, r0
    a532:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(30);    
    a534:	231e      	movs	r3, #30
    a536:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    a538:	68fa      	ldr	r2, [r7, #12]
    a53a:	2308      	movs	r3, #8
    a53c:	18fb      	adds	r3, r7, r3
    a53e:	0011      	movs	r1, r2
    a540:	0018      	movs	r0, r3
    a542:	4b03      	ldr	r3, [pc, #12]	; (a550 <task_50Hz+0x2c>)
    a544:	4798      	blx	r3

        display_update_50Hz();
    a546:	4b03      	ldr	r3, [pc, #12]	; (a554 <task_50Hz+0x30>)
    a548:	4798      	blx	r3

    }
    a54a:	e7f5      	b.n	a538 <task_50Hz+0x14>
    a54c:	00008cbd 	.word	0x00008cbd
    a550:	00008a21 	.word	0x00008a21
    a554:	00000131 	.word	0x00000131

0000a558 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{   
    a558:	b580      	push	{r7, lr}
    a55a:	af00      	add	r7, sp, #0
   // NOTE: NO BLOCKING FUNCTIONS MAY GO IN THE IDLE HOOK
   m2m_wifi_handle_events(NULL);   
    a55c:	2000      	movs	r0, #0
    a55e:	4b02      	ldr	r3, [pc, #8]	; (a568 <vApplicationIdleHook+0x10>)
    a560:	4798      	blx	r3
}
    a562:	46c0      	nop			; (mov r8, r8)
    a564:	46bd      	mov	sp, r7
    a566:	bd80      	pop	{r7, pc}
    a568:	00001bd5 	.word	0x00001bd5

0000a56c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    a56c:	b580      	push	{r7, lr}
    a56e:	b082      	sub	sp, #8
    a570:	af00      	add	r7, sp, #0
    a572:	6078      	str	r0, [r7, #4]
    a574:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    a576:	683a      	ldr	r2, [r7, #0]
    a578:	4b02      	ldr	r3, [pc, #8]	; (a584 <vApplicationStackOverflowHook+0x18>)
    a57a:	0011      	movs	r1, r2
    a57c:	0018      	movs	r0, r3
    a57e:	4b02      	ldr	r3, [pc, #8]	; (a588 <vApplicationStackOverflowHook+0x1c>)
    a580:	4798      	blx	r3
    while (1) {}
    a582:	e7fe      	b.n	a582 <vApplicationStackOverflowHook+0x16>
    a584:	0000dd34 	.word	0x0000dd34
    a588:	0000bbb1 	.word	0x0000bbb1

0000a58c <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    a58c:	b590      	push	{r4, r7, lr}
    a58e:	b08b      	sub	sp, #44	; 0x2c
    a590:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    a592:	4b1f      	ldr	r3, [pc, #124]	; (a610 <main+0x84>)
    a594:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    a596:	4b1f      	ldr	r3, [pc, #124]	; (a614 <main+0x88>)
    a598:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();	
    a59a:	4b1f      	ldr	r3, [pc, #124]	; (a618 <main+0x8c>)
    a59c:	4798      	blx	r3

    /* Initialize the display */
    display_init();
    a59e:	4b1f      	ldr	r3, [pc, #124]	; (a61c <main+0x90>)
    a5a0:	4798      	blx	r3

	/* Initialize the Button/LED. */
	//configure_button_led();

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    a5a2:	4b1f      	ldr	r3, [pc, #124]	; (a620 <main+0x94>)
    a5a4:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    a5a6:	2308      	movs	r3, #8
    a5a8:	18fb      	adds	r3, r7, r3
    a5aa:	2218      	movs	r2, #24
    a5ac:	2100      	movs	r1, #0
    a5ae:	0018      	movs	r0, r3
    a5b0:	4b1c      	ldr	r3, [pc, #112]	; (a624 <main+0x98>)
    a5b2:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    a5b4:	2308      	movs	r3, #8
    a5b6:	18fb      	adds	r3, r7, r3
    a5b8:	4a1b      	ldr	r2, [pc, #108]	; (a628 <main+0x9c>)
    a5ba:	601a      	str	r2, [r3, #0]
	///* Connect to AP using Wi-Fi settings from main.h. */
	//printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
	//m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			//MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);    

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE + 256, 0, TASK_3S_PRIORITY, NULL);
    a5bc:	2380      	movs	r3, #128	; 0x80
    a5be:	009a      	lsls	r2, r3, #2
    a5c0:	491a      	ldr	r1, [pc, #104]	; (a62c <main+0xa0>)
    a5c2:	481b      	ldr	r0, [pc, #108]	; (a630 <main+0xa4>)
    a5c4:	2300      	movs	r3, #0
    a5c6:	9301      	str	r3, [sp, #4]
    a5c8:	2301      	movs	r3, #1
    a5ca:	9300      	str	r3, [sp, #0]
    a5cc:	2300      	movs	r3, #0
    a5ce:	4c19      	ldr	r4, [pc, #100]	; (a634 <main+0xa8>)
    a5d0:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE + 256, 0, TASK_1S_PRIORITY, NULL);    
    a5d2:	2380      	movs	r3, #128	; 0x80
    a5d4:	009a      	lsls	r2, r3, #2
    a5d6:	4918      	ldr	r1, [pc, #96]	; (a638 <main+0xac>)
    a5d8:	4818      	ldr	r0, [pc, #96]	; (a63c <main+0xb0>)
    a5da:	2300      	movs	r3, #0
    a5dc:	9301      	str	r3, [sp, #4]
    a5de:	2301      	movs	r3, #1
    a5e0:	9300      	str	r3, [sp, #0]
    a5e2:	2300      	movs	r3, #0
    a5e4:	4c13      	ldr	r4, [pc, #76]	; (a634 <main+0xa8>)
    a5e6:	47a0      	blx	r4
    xTaskCreate(task_50Hz, "task_50Hz", configMINIMAL_STACK_SIZE + 256, 0, TASK_50HZ_PRIORITY, NULL); 
    a5e8:	2380      	movs	r3, #128	; 0x80
    a5ea:	009a      	lsls	r2, r3, #2
    a5ec:	4914      	ldr	r1, [pc, #80]	; (a640 <main+0xb4>)
    a5ee:	4815      	ldr	r0, [pc, #84]	; (a644 <main+0xb8>)
    a5f0:	2300      	movs	r3, #0
    a5f2:	9301      	str	r3, [sp, #4]
    a5f4:	2302      	movs	r3, #2
    a5f6:	9300      	str	r3, [sp, #0]
    a5f8:	2300      	movs	r3, #0
    a5fa:	4c0e      	ldr	r4, [pc, #56]	; (a634 <main+0xa8>)
    a5fc:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    a5fe:	2001      	movs	r0, #1
    a600:	4b11      	ldr	r3, [pc, #68]	; (a648 <main+0xbc>)
    a602:	4798      	blx	r3
    a604:	0002      	movs	r2, r0
    a606:	4b11      	ldr	r3, [pc, #68]	; (a64c <main+0xc0>)
    a608:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    a60a:	4b11      	ldr	r3, [pc, #68]	; (a650 <main+0xc4>)
    a60c:	4798      	blx	r3

    while(1) {}
    a60e:	e7fe      	b.n	a60e <main+0x82>
    a610:	00007441 	.word	0x00007441
    a614:	0000a169 	.word	0x0000a169
    a618:	00000b55 	.word	0x00000b55
    a61c:	00000115 	.word	0x00000115
    a620:	00000d39 	.word	0x00000d39
    a624:	0000b5fb 	.word	0x0000b5fb
    a628:	0000a091 	.word	0x0000a091
    a62c:	0000dd4c 	.word	0x0000dd4c
    a630:	0000a1dd 	.word	0x0000a1dd
    a634:	000087a9 	.word	0x000087a9
    a638:	0000dd54 	.word	0x0000dd54
    a63c:	0000a3a9 	.word	0x0000a3a9
    a640:	0000dd5c 	.word	0x0000dd5c
    a644:	0000a525 	.word	0x0000a525
    a648:	00007dbd 	.word	0x00007dbd
    a64c:	20004444 	.word	0x20004444
    a650:	00008ae9 	.word	0x00008ae9

0000a654 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    a654:	b590      	push	{r4, r7, lr}
    a656:	b0dd      	sub	sp, #372	; 0x174
    a658:	af00      	add	r7, sp, #0
    a65a:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    a65c:	687b      	ldr	r3, [r7, #4]
    a65e:	2252      	movs	r2, #82	; 0x52
    a660:	5c9b      	ldrb	r3, [r3, r2]
    a662:	2b03      	cmp	r3, #3
    a664:	d126      	bne.n	a6b4 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    a666:	4b1e      	ldr	r3, [pc, #120]	; (a6e0 <handle_transaction+0x8c>)
    a668:	22b8      	movs	r2, #184	; 0xb8
    a66a:	0052      	lsls	r2, r2, #1
    a66c:	4694      	mov	ip, r2
    a66e:	44bc      	add	ip, r7
    a670:	4463      	add	r3, ip
    a672:	0018      	movs	r0, r3
    a674:	2366      	movs	r3, #102	; 0x66
    a676:	33ff      	adds	r3, #255	; 0xff
    a678:	001a      	movs	r2, r3
    a67a:	2100      	movs	r1, #0
    a67c:	4b19      	ldr	r3, [pc, #100]	; (a6e4 <handle_transaction+0x90>)
    a67e:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    a680:	687b      	ldr	r3, [r7, #4]
    a682:	3354      	adds	r3, #84	; 0x54
    a684:	001a      	movs	r2, r3
    a686:	4b18      	ldr	r3, [pc, #96]	; (a6e8 <handle_transaction+0x94>)
    a688:	4918      	ldr	r1, [pc, #96]	; (a6ec <handle_transaction+0x98>)
    a68a:	2008      	movs	r0, #8
    a68c:	1838      	adds	r0, r7, r0
    a68e:	4c18      	ldr	r4, [pc, #96]	; (a6f0 <handle_transaction+0x9c>)
    a690:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    a692:	687b      	ldr	r3, [r7, #4]
    a694:	2253      	movs	r2, #83	; 0x53
    a696:	569c      	ldrsb	r4, [r3, r2]
    a698:	2308      	movs	r3, #8
    a69a:	18fb      	adds	r3, r7, r3
    a69c:	0018      	movs	r0, r3
    a69e:	4b15      	ldr	r3, [pc, #84]	; (a6f4 <handle_transaction+0xa0>)
    a6a0:	4798      	blx	r3
    a6a2:	0003      	movs	r3, r0
    a6a4:	b29a      	uxth	r2, r3
    a6a6:	2308      	movs	r3, #8
    a6a8:	18f9      	adds	r1, r7, r3
    a6aa:	2300      	movs	r3, #0
    a6ac:	0020      	movs	r0, r4
    a6ae:	4c12      	ldr	r4, [pc, #72]	; (a6f8 <handle_transaction+0xa4>)
    a6b0:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    a6b2:	e010      	b.n	a6d6 <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    a6b4:	687b      	ldr	r3, [r7, #4]
    a6b6:	2252      	movs	r2, #82	; 0x52
    a6b8:	5c9b      	ldrb	r3, [r3, r2]
    a6ba:	2b04      	cmp	r3, #4
    a6bc:	d10b      	bne.n	a6d6 <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	2253      	movs	r2, #83	; 0x53
    a6c2:	5698      	ldrsb	r0, [r3, r2]
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	3354      	adds	r3, #84	; 0x54
    a6c8:	0019      	movs	r1, r3
    a6ca:	4c0c      	ldr	r4, [pc, #48]	; (a6fc <handle_transaction+0xa8>)
    a6cc:	2380      	movs	r3, #128	; 0x80
    a6ce:	005a      	lsls	r2, r3, #1
    a6d0:	0023      	movs	r3, r4
    a6d2:	4c0b      	ldr	r4, [pc, #44]	; (a700 <handle_transaction+0xac>)
    a6d4:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    a6d6:	46c0      	nop			; (mov r8, r8)
    a6d8:	46bd      	mov	sp, r7
    a6da:	b05d      	add	sp, #372	; 0x174
    a6dc:	bd90      	pop	{r4, r7, pc}
    a6de:	46c0      	nop			; (mov r8, r8)
    a6e0:	fffffe98 	.word	0xfffffe98
    a6e4:	0000b5fb 	.word	0x0000b5fb
    a6e8:	0000dd68 	.word	0x0000dd68
    a6ec:	0000dd7c 	.word	0x0000dd7c
    a6f0:	0000bebd 	.word	0x0000bebd
    a6f4:	0000bf01 	.word	0x0000bf01
    a6f8:	0000372d 	.word	0x0000372d
    a6fc:	00007530 	.word	0x00007530
    a700:	00003891 	.word	0x00003891

0000a704 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    a704:	b580      	push	{r7, lr}
    a706:	b082      	sub	sp, #8
    a708:	af00      	add	r7, sp, #0
    a70a:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    a70c:	687a      	ldr	r2, [r7, #4]
    a70e:	4b09      	ldr	r3, [pc, #36]	; (a734 <valid_ctx_prt+0x30>)
    a710:	429a      	cmp	r2, r3
    a712:	d305      	bcc.n	a720 <valid_ctx_prt+0x1c>
    a714:	4b08      	ldr	r3, [pc, #32]	; (a738 <valid_ctx_prt+0x34>)
    a716:	687a      	ldr	r2, [r7, #4]
    a718:	429a      	cmp	r2, r3
    a71a:	d201      	bcs.n	a720 <valid_ctx_prt+0x1c>
    a71c:	2301      	movs	r3, #1
    a71e:	e000      	b.n	a722 <valid_ctx_prt+0x1e>
    a720:	2300      	movs	r3, #0
    a722:	1c1a      	adds	r2, r3, #0
    a724:	2301      	movs	r3, #1
    a726:	4013      	ands	r3, r2
    a728:	b2db      	uxtb	r3, r3
}
    a72a:	0018      	movs	r0, r3
    a72c:	46bd      	mov	sp, r7
    a72e:	b002      	add	sp, #8
    a730:	bd80      	pop	{r7, pc}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	20003d44 	.word	0x20003d44
    a738:	20004424 	.word	0x20004424

0000a73c <handle_start_connect>:
	return NULL;
}

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    a73c:	b590      	push	{r4, r7, lr}
    a73e:	b083      	sub	sp, #12
    a740:	af00      	add	r7, sp, #0
    a742:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	0018      	movs	r0, r3
    a748:	4b2f      	ldr	r3, [pc, #188]	; (a808 <handle_start_connect+0xcc>)
    a74a:	4798      	blx	r3
    a74c:	1e03      	subs	r3, r0, #0
    a74e:	d105      	bne.n	a75c <handle_start_connect+0x20>
    a750:	4b2e      	ldr	r3, [pc, #184]	; (a80c <handle_start_connect+0xd0>)
    a752:	4a2f      	ldr	r2, [pc, #188]	; (a810 <handle_start_connect+0xd4>)
    a754:	482f      	ldr	r0, [pc, #188]	; (a814 <handle_start_connect+0xd8>)
    a756:	2154      	movs	r1, #84	; 0x54
    a758:	4c2f      	ldr	r4, [pc, #188]	; (a818 <handle_start_connect+0xdc>)
    a75a:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    a75c:	687b      	ldr	r3, [r7, #4]
    a75e:	2252      	movs	r2, #82	; 0x52
    a760:	5c9b      	ldrb	r3, [r3, r2]
    a762:	2b00      	cmp	r3, #0
    a764:	d00f      	beq.n	a786 <handle_start_connect+0x4a>
    a766:	687b      	ldr	r3, [r7, #4]
    a768:	2252      	movs	r2, #82	; 0x52
    a76a:	5c9b      	ldrb	r3, [r3, r2]
    a76c:	2b01      	cmp	r3, #1
    a76e:	d00a      	beq.n	a786 <handle_start_connect+0x4a>
    a770:	687b      	ldr	r3, [r7, #4]
    a772:	2252      	movs	r2, #82	; 0x52
    a774:	5c9b      	ldrb	r3, [r3, r2]
    a776:	2b02      	cmp	r3, #2
    a778:	d005      	beq.n	a786 <handle_start_connect+0x4a>
    a77a:	4b28      	ldr	r3, [pc, #160]	; (a81c <handle_start_connect+0xe0>)
    a77c:	4a24      	ldr	r2, [pc, #144]	; (a810 <handle_start_connect+0xd4>)
    a77e:	4825      	ldr	r0, [pc, #148]	; (a814 <handle_start_connect+0xd8>)
    a780:	2155      	movs	r1, #85	; 0x55
    a782:	4c25      	ldr	r4, [pc, #148]	; (a818 <handle_start_connect+0xdc>)
    a784:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    a786:	687b      	ldr	r3, [r7, #4]
    a788:	2252      	movs	r2, #82	; 0x52
    a78a:	5c9b      	ldrb	r3, [r3, r2]
    a78c:	2b00      	cmp	r3, #0
    a78e:	d12c      	bne.n	a7ea <handle_start_connect+0xae>
    a790:	687b      	ldr	r3, [r7, #4]
    a792:	2253      	movs	r2, #83	; 0x53
    a794:	569b      	ldrsb	r3, [r3, r2]
    a796:	2b00      	cmp	r3, #0
    a798:	dc27      	bgt.n	a7ea <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    a79a:	2200      	movs	r2, #0
    a79c:	2101      	movs	r1, #1
    a79e:	2002      	movs	r0, #2
    a7a0:	4b1f      	ldr	r3, [pc, #124]	; (a820 <handle_start_connect+0xe4>)
    a7a2:	4798      	blx	r3
    a7a4:	0003      	movs	r3, r0
    a7a6:	0019      	movs	r1, r3
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	2253      	movs	r2, #83	; 0x53
    a7ac:	5499      	strb	r1, [r3, r2]
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	2253      	movs	r2, #83	; 0x53
    a7b2:	569b      	ldrsb	r3, [r3, r2]
    a7b4:	2b00      	cmp	r3, #0
    a7b6:	da04      	bge.n	a7c2 <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    a7b8:	4b1a      	ldr	r3, [pc, #104]	; (a824 <handle_start_connect+0xe8>)
    a7ba:	0018      	movs	r0, r3
    a7bc:	4b1a      	ldr	r3, [pc, #104]	; (a828 <handle_start_connect+0xec>)
    a7be:	4798      	blx	r3
			return;
    a7c0:	e01f      	b.n	a802 <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    a7c2:	4b1a      	ldr	r3, [pc, #104]	; (a82c <handle_start_connect+0xf0>)
    a7c4:	685b      	ldr	r3, [r3, #4]
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	d10f      	bne.n	a7ea <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    a7ca:	4b18      	ldr	r3, [pc, #96]	; (a82c <handle_start_connect+0xf0>)
    a7cc:	2202      	movs	r2, #2
    a7ce:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    a7d0:	4b16      	ldr	r3, [pc, #88]	; (a82c <handle_start_connect+0xf0>)
    a7d2:	22a0      	movs	r2, #160	; 0xa0
    a7d4:	01d2      	lsls	r2, r2, #7
    a7d6:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	2252      	movs	r2, #82	; 0x52
    a7dc:	2101      	movs	r1, #1
    a7de:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    a7e0:	4b13      	ldr	r3, [pc, #76]	; (a830 <handle_start_connect+0xf4>)
    a7e2:	0018      	movs	r0, r3
    a7e4:	4b13      	ldr	r3, [pc, #76]	; (a834 <handle_start_connect+0xf8>)
    a7e6:	4798      	blx	r3
			return;
    a7e8:	e00b      	b.n	a802 <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    a7ea:	687b      	ldr	r3, [r7, #4]
    a7ec:	2253      	movs	r2, #83	; 0x53
    a7ee:	569b      	ldrsb	r3, [r3, r2]
    a7f0:	490e      	ldr	r1, [pc, #56]	; (a82c <handle_start_connect+0xf0>)
    a7f2:	2210      	movs	r2, #16
    a7f4:	0018      	movs	r0, r3
    a7f6:	4b10      	ldr	r3, [pc, #64]	; (a838 <handle_start_connect+0xfc>)
    a7f8:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    a7fa:	687b      	ldr	r3, [r7, #4]
    a7fc:	2252      	movs	r2, #82	; 0x52
    a7fe:	2102      	movs	r1, #2
    a800:	5499      	strb	r1, [r3, r2]
}
    a802:	46bd      	mov	sp, r7
    a804:	b003      	add	sp, #12
    a806:	bd90      	pop	{r4, r7, pc}
    a808:	0000a705 	.word	0x0000a705
    a80c:	0000ddd0 	.word	0x0000ddd0
    a810:	0000df74 	.word	0x0000df74
    a814:	0000dde4 	.word	0x0000dde4
    a818:	0000b53d 	.word	0x0000b53d
    a81c:	0000ddf4 	.word	0x0000ddf4
    a820:	000034c1 	.word	0x000034c1
    a824:	0000de4c 	.word	0x0000de4c
    a828:	0000bcd1 	.word	0x0000bcd1
    a82c:	20004664 	.word	0x20004664
    a830:	0000dd68 	.word	0x0000dd68
    a834:	00003b21 	.word	0x00003b21
    a838:	00003619 	.word	0x00003619

0000a83c <pubnub_publish>:
	pb->state = PS_IDLE;
	pb->last_result = PNR_IO_ERROR;
}

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    a83c:	b5b0      	push	{r4, r5, r7, lr}
    a83e:	b08a      	sub	sp, #40	; 0x28
    a840:	af02      	add	r7, sp, #8
    a842:	60f8      	str	r0, [r7, #12]
    a844:	60b9      	str	r1, [r7, #8]
    a846:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    a848:	68fb      	ldr	r3, [r7, #12]
    a84a:	0018      	movs	r0, r3
    a84c:	4b6c      	ldr	r3, [pc, #432]	; (aa00 <pubnub_publish+0x1c4>)
    a84e:	4798      	blx	r3
    a850:	1e03      	subs	r3, r0, #0
    a852:	d108      	bne.n	a866 <pubnub_publish+0x2a>
    a854:	4c6b      	ldr	r4, [pc, #428]	; (aa04 <pubnub_publish+0x1c8>)
    a856:	4a6c      	ldr	r2, [pc, #432]	; (aa08 <pubnub_publish+0x1cc>)
    a858:	238a      	movs	r3, #138	; 0x8a
    a85a:	33ff      	adds	r3, #255	; 0xff
    a85c:	0019      	movs	r1, r3
    a85e:	486b      	ldr	r0, [pc, #428]	; (aa0c <pubnub_publish+0x1d0>)
    a860:	0023      	movs	r3, r4
    a862:	4c6b      	ldr	r4, [pc, #428]	; (aa10 <pubnub_publish+0x1d4>)
    a864:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    a866:	68fb      	ldr	r3, [r7, #12]
    a868:	2252      	movs	r2, #82	; 0x52
    a86a:	5c9b      	ldrb	r3, [r3, r2]
    a86c:	2b00      	cmp	r3, #0
    a86e:	d001      	beq.n	a874 <pubnub_publish+0x38>
		return false;
    a870:	2300      	movs	r3, #0
    a872:	e0c0      	b.n	a9f6 <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    a874:	68fb      	ldr	r3, [r7, #12]
    a876:	2251      	movs	r2, #81	; 0x51
    a878:	2102      	movs	r1, #2
    a87a:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    a87c:	68fb      	ldr	r3, [r7, #12]
    a87e:	3354      	adds	r3, #84	; 0x54
    a880:	0018      	movs	r0, r3
    a882:	68fb      	ldr	r3, [r7, #12]
    a884:	681d      	ldr	r5, [r3, #0]
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	685b      	ldr	r3, [r3, #4]
    a88a:	4c62      	ldr	r4, [pc, #392]	; (aa14 <pubnub_publish+0x1d8>)
    a88c:	2280      	movs	r2, #128	; 0x80
    a88e:	0051      	lsls	r1, r2, #1
    a890:	68ba      	ldr	r2, [r7, #8]
    a892:	9201      	str	r2, [sp, #4]
    a894:	9300      	str	r3, [sp, #0]
    a896:	002b      	movs	r3, r5
    a898:	0022      	movs	r2, r4
    a89a:	4c5f      	ldr	r4, [pc, #380]	; (aa18 <pubnub_publish+0x1dc>)
    a89c:	47a0      	blx	r4
    a89e:	0003      	movs	r3, r0
    a8a0:	0019      	movs	r1, r3
    a8a2:	68fa      	ldr	r2, [r7, #12]
    a8a4:	23ac      	movs	r3, #172	; 0xac
    a8a6:	005b      	lsls	r3, r3, #1
    a8a8:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    a8ae:	e08a      	b.n	a9c6 <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    a8b0:	4a5a      	ldr	r2, [pc, #360]	; (aa1c <pubnub_publish+0x1e0>)
    a8b2:	69fb      	ldr	r3, [r7, #28]
    a8b4:	0011      	movs	r1, r2
    a8b6:	0018      	movs	r0, r3
    a8b8:	4b59      	ldr	r3, [pc, #356]	; (aa20 <pubnub_publish+0x1e4>)
    a8ba:	4798      	blx	r3
    a8bc:	0003      	movs	r3, r0
    a8be:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    a8c0:	69bb      	ldr	r3, [r7, #24]
    a8c2:	2b00      	cmp	r3, #0
    a8c4:	d034      	beq.n	a930 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    a8c6:	68fa      	ldr	r2, [r7, #12]
    a8c8:	23ac      	movs	r3, #172	; 0xac
    a8ca:	005b      	lsls	r3, r3, #1
    a8cc:	58d3      	ldr	r3, [r2, r3]
    a8ce:	22ff      	movs	r2, #255	; 0xff
    a8d0:	1ad2      	subs	r2, r2, r3
    a8d2:	69bb      	ldr	r3, [r7, #24]
    a8d4:	429a      	cmp	r2, r3
    a8d6:	d206      	bcs.n	a8e6 <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    a8d8:	68fa      	ldr	r2, [r7, #12]
    a8da:	23ac      	movs	r3, #172	; 0xac
    a8dc:	005b      	lsls	r3, r3, #1
    a8de:	2100      	movs	r1, #0
    a8e0:	50d1      	str	r1, [r2, r3]
				return false;
    a8e2:	2300      	movs	r3, #0
    a8e4:	e087      	b.n	a9f6 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    a8e6:	68fb      	ldr	r3, [r7, #12]
    a8e8:	3354      	adds	r3, #84	; 0x54
    a8ea:	001a      	movs	r2, r3
    a8ec:	68f9      	ldr	r1, [r7, #12]
    a8ee:	23ac      	movs	r3, #172	; 0xac
    a8f0:	005b      	lsls	r3, r3, #1
    a8f2:	58cb      	ldr	r3, [r1, r3]
    a8f4:	18d3      	adds	r3, r2, r3
    a8f6:	69ba      	ldr	r2, [r7, #24]
    a8f8:	69f9      	ldr	r1, [r7, #28]
    a8fa:	0018      	movs	r0, r3
    a8fc:	4b49      	ldr	r3, [pc, #292]	; (aa24 <pubnub_publish+0x1e8>)
    a8fe:	4798      	blx	r3
			pb->http_buf_len += okspan;
    a900:	68fa      	ldr	r2, [r7, #12]
    a902:	23ac      	movs	r3, #172	; 0xac
    a904:	005b      	lsls	r3, r3, #1
    a906:	58d2      	ldr	r2, [r2, r3]
    a908:	69bb      	ldr	r3, [r7, #24]
    a90a:	18d1      	adds	r1, r2, r3
    a90c:	68fa      	ldr	r2, [r7, #12]
    a90e:	23ac      	movs	r3, #172	; 0xac
    a910:	005b      	lsls	r3, r3, #1
    a912:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    a914:	68fa      	ldr	r2, [r7, #12]
    a916:	23ac      	movs	r3, #172	; 0xac
    a918:	005b      	lsls	r3, r3, #1
    a91a:	58d3      	ldr	r3, [r2, r3]
    a91c:	68fa      	ldr	r2, [r7, #12]
    a91e:	2154      	movs	r1, #84	; 0x54
    a920:	18d3      	adds	r3, r2, r3
    a922:	185b      	adds	r3, r3, r1
    a924:	2200      	movs	r2, #0
    a926:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    a928:	69fa      	ldr	r2, [r7, #28]
    a92a:	69bb      	ldr	r3, [r7, #24]
    a92c:	18d3      	adds	r3, r2, r3
    a92e:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    a930:	69fb      	ldr	r3, [r7, #28]
    a932:	781b      	ldrb	r3, [r3, #0]
    a934:	2b00      	cmp	r3, #0
    a936:	d046      	beq.n	a9c6 <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    a938:	2314      	movs	r3, #20
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	2200      	movs	r2, #0
    a93e:	601a      	str	r2, [r3, #0]
    a940:	2314      	movs	r3, #20
    a942:	18fb      	adds	r3, r7, r3
    a944:	2225      	movs	r2, #37	; 0x25
    a946:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    a948:	69fb      	ldr	r3, [r7, #28]
    a94a:	781b      	ldrb	r3, [r3, #0]
    a94c:	091b      	lsrs	r3, r3, #4
    a94e:	b2db      	uxtb	r3, r3
    a950:	001a      	movs	r2, r3
    a952:	4b35      	ldr	r3, [pc, #212]	; (aa28 <pubnub_publish+0x1ec>)
    a954:	5c9a      	ldrb	r2, [r3, r2]
    a956:	2314      	movs	r3, #20
    a958:	18fb      	adds	r3, r7, r3
    a95a:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    a95c:	69fb      	ldr	r3, [r7, #28]
    a95e:	781b      	ldrb	r3, [r3, #0]
    a960:	001a      	movs	r2, r3
    a962:	230f      	movs	r3, #15
    a964:	4013      	ands	r3, r2
    a966:	4a30      	ldr	r2, [pc, #192]	; (aa28 <pubnub_publish+0x1ec>)
    a968:	5cd2      	ldrb	r2, [r2, r3]
    a96a:	2314      	movs	r3, #20
    a96c:	18fb      	adds	r3, r7, r3
    a96e:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    a970:	68fa      	ldr	r2, [r7, #12]
    a972:	23ac      	movs	r3, #172	; 0xac
    a974:	005b      	lsls	r3, r3, #1
    a976:	58d3      	ldr	r3, [r2, r3]
    a978:	22ff      	movs	r2, #255	; 0xff
    a97a:	1ad3      	subs	r3, r2, r3
    a97c:	2b02      	cmp	r3, #2
    a97e:	d806      	bhi.n	a98e <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    a980:	68fa      	ldr	r2, [r7, #12]
    a982:	23ac      	movs	r3, #172	; 0xac
    a984:	005b      	lsls	r3, r3, #1
    a986:	2100      	movs	r1, #0
    a988:	50d1      	str	r1, [r2, r3]
				return false;
    a98a:	2300      	movs	r3, #0
    a98c:	e033      	b.n	a9f6 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    a98e:	68fb      	ldr	r3, [r7, #12]
    a990:	3354      	adds	r3, #84	; 0x54
    a992:	001a      	movs	r2, r3
    a994:	68f9      	ldr	r1, [r7, #12]
    a996:	23ac      	movs	r3, #172	; 0xac
    a998:	005b      	lsls	r3, r3, #1
    a99a:	58cb      	ldr	r3, [r1, r3]
    a99c:	18d2      	adds	r2, r2, r3
    a99e:	2314      	movs	r3, #20
    a9a0:	18fb      	adds	r3, r7, r3
    a9a2:	0010      	movs	r0, r2
    a9a4:	0019      	movs	r1, r3
    a9a6:	2304      	movs	r3, #4
    a9a8:	001a      	movs	r2, r3
    a9aa:	4b1e      	ldr	r3, [pc, #120]	; (aa24 <pubnub_publish+0x1e8>)
    a9ac:	4798      	blx	r3
			pb->http_buf_len += 3;
    a9ae:	68fa      	ldr	r2, [r7, #12]
    a9b0:	23ac      	movs	r3, #172	; 0xac
    a9b2:	005b      	lsls	r3, r3, #1
    a9b4:	58d3      	ldr	r3, [r2, r3]
    a9b6:	1cd9      	adds	r1, r3, #3
    a9b8:	68fa      	ldr	r2, [r7, #12]
    a9ba:	23ac      	movs	r3, #172	; 0xac
    a9bc:	005b      	lsls	r3, r3, #1
    a9be:	50d1      	str	r1, [r2, r3]
			++pmessage;
    a9c0:	69fb      	ldr	r3, [r7, #28]
    a9c2:	3301      	adds	r3, #1
    a9c4:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    a9c6:	69fb      	ldr	r3, [r7, #28]
    a9c8:	781b      	ldrb	r3, [r3, #0]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d000      	beq.n	a9d0 <pubnub_publish+0x194>
    a9ce:	e76f      	b.n	a8b0 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    a9d0:	68fb      	ldr	r3, [r7, #12]
    a9d2:	2250      	movs	r2, #80	; 0x50
    a9d4:	5c9b      	ldrb	r3, [r3, r2]
    a9d6:	2b00      	cmp	r3, #0
    a9d8:	d108      	bne.n	a9ec <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    a9da:	68fb      	ldr	r3, [r7, #12]
    a9dc:	2252      	movs	r2, #82	; 0x52
    a9de:	2103      	movs	r1, #3
    a9e0:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    a9e2:	68fb      	ldr	r3, [r7, #12]
    a9e4:	0018      	movs	r0, r3
    a9e6:	4b11      	ldr	r3, [pc, #68]	; (aa2c <pubnub_publish+0x1f0>)
    a9e8:	4798      	blx	r3
    a9ea:	e003      	b.n	a9f4 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    a9ec:	68fb      	ldr	r3, [r7, #12]
    a9ee:	0018      	movs	r0, r3
    a9f0:	4b0f      	ldr	r3, [pc, #60]	; (aa30 <pubnub_publish+0x1f4>)
    a9f2:	4798      	blx	r3
	}

	return true;
    a9f4:	2301      	movs	r3, #1
}
    a9f6:	0018      	movs	r0, r3
    a9f8:	46bd      	mov	sp, r7
    a9fa:	b008      	add	sp, #32
    a9fc:	bdb0      	pop	{r4, r5, r7, pc}
    a9fe:	46c0      	nop			; (mov r8, r8)
    aa00:	0000a705 	.word	0x0000a705
    aa04:	0000ddd0 	.word	0x0000ddd0
    aa08:	0000df8c 	.word	0x0000df8c
    aa0c:	0000dde4 	.word	0x0000dde4
    aa10:	0000b53d 	.word	0x0000b53d
    aa14:	0000dea8 	.word	0x0000dea8
    aa18:	0000be59 	.word	0x0000be59
    aa1c:	0000dec0 	.word	0x0000dec0
    aa20:	0000bf33 	.word	0x0000bf33
    aa24:	0000b5e9 	.word	0x0000b5e9
    aa28:	0000df0c 	.word	0x0000df0c
    aa2c:	0000a655 	.word	0x0000a655
    aa30:	0000a73d 	.word	0x0000a73d

0000aa34 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa36:	4657      	mov	r7, sl
    aa38:	464e      	mov	r6, r9
    aa3a:	4645      	mov	r5, r8
    aa3c:	b4e0      	push	{r5, r6, r7}
    aa3e:	b08c      	sub	sp, #48	; 0x30
    aa40:	af0a      	add	r7, sp, #40	; 0x28
    aa42:	6078      	str	r0, [r7, #4]
    aa44:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    aa46:	687b      	ldr	r3, [r7, #4]
    aa48:	0018      	movs	r0, r3
    aa4a:	4b4a      	ldr	r3, [pc, #296]	; (ab74 <pubnub_subscribe+0x140>)
    aa4c:	4798      	blx	r3
    aa4e:	1e03      	subs	r3, r0, #0
    aa50:	d108      	bne.n	aa64 <pubnub_subscribe+0x30>
    aa52:	4c49      	ldr	r4, [pc, #292]	; (ab78 <pubnub_subscribe+0x144>)
    aa54:	4a49      	ldr	r2, [pc, #292]	; (ab7c <pubnub_subscribe+0x148>)
    aa56:	23c2      	movs	r3, #194	; 0xc2
    aa58:	33ff      	adds	r3, #255	; 0xff
    aa5a:	0019      	movs	r1, r3
    aa5c:	4848      	ldr	r0, [pc, #288]	; (ab80 <pubnub_subscribe+0x14c>)
    aa5e:	0023      	movs	r3, r4
    aa60:	4c48      	ldr	r4, [pc, #288]	; (ab84 <pubnub_subscribe+0x150>)
    aa62:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    aa64:	687b      	ldr	r3, [r7, #4]
    aa66:	2252      	movs	r2, #82	; 0x52
    aa68:	5c9b      	ldrb	r3, [r3, r2]
    aa6a:	2b00      	cmp	r3, #0
    aa6c:	d001      	beq.n	aa72 <pubnub_subscribe+0x3e>
		return false;
    aa6e:	2300      	movs	r3, #0
    aa70:	e078      	b.n	ab64 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    aa72:	687b      	ldr	r3, [r7, #4]
    aa74:	2251      	movs	r2, #81	; 0x51
    aa76:	2101      	movs	r1, #1
    aa78:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    aa7a:	687b      	ldr	r3, [r7, #4]
    aa7c:	3366      	adds	r3, #102	; 0x66
    aa7e:	33ff      	adds	r3, #255	; 0xff
    aa80:	0018      	movs	r0, r3
    aa82:	2380      	movs	r3, #128	; 0x80
    aa84:	009b      	lsls	r3, r3, #2
    aa86:	001a      	movs	r2, r3
    aa88:	2100      	movs	r1, #0
    aa8a:	4b3f      	ldr	r3, [pc, #252]	; (ab88 <pubnub_subscribe+0x154>)
    aa8c:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aa8e:	687b      	ldr	r3, [r7, #4]
    aa90:	2254      	movs	r2, #84	; 0x54
    aa92:	4694      	mov	ip, r2
    aa94:	449c      	add	ip, r3
    aa96:	687b      	ldr	r3, [r7, #4]
    aa98:	685b      	ldr	r3, [r3, #4]
    aa9a:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    aa9c:	687b      	ldr	r3, [r7, #4]
    aa9e:	3310      	adds	r3, #16
    aaa0:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    aaa2:	687b      	ldr	r3, [r7, #4]
    aaa4:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d001      	beq.n	aaae <pubnub_subscribe+0x7a>
    aaaa:	4b38      	ldr	r3, [pc, #224]	; (ab8c <pubnub_subscribe+0x158>)
    aaac:	e000      	b.n	aab0 <pubnub_subscribe+0x7c>
    aaae:	4b38      	ldr	r3, [pc, #224]	; (ab90 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    aab0:	687a      	ldr	r2, [r7, #4]
    aab2:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aab4:	2a00      	cmp	r2, #0
    aab6:	d002      	beq.n	aabe <pubnub_subscribe+0x8a>
    aab8:	687a      	ldr	r2, [r7, #4]
    aaba:	6892      	ldr	r2, [r2, #8]
    aabc:	e000      	b.n	aac0 <pubnub_subscribe+0x8c>
    aabe:	4a34      	ldr	r2, [pc, #208]	; (ab90 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    aac0:	6879      	ldr	r1, [r7, #4]
    aac2:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aac4:	2900      	cmp	r1, #0
    aac6:	d005      	beq.n	aad4 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    aac8:	6879      	ldr	r1, [r7, #4]
    aaca:	68c9      	ldr	r1, [r1, #12]
    aacc:	2900      	cmp	r1, #0
    aace:	d001      	beq.n	aad4 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aad0:	4930      	ldr	r1, [pc, #192]	; (ab94 <pubnub_subscribe+0x160>)
    aad2:	e000      	b.n	aad6 <pubnub_subscribe+0xa2>
    aad4:	492e      	ldr	r1, [pc, #184]	; (ab90 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    aad6:	6878      	ldr	r0, [r7, #4]
    aad8:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aada:	2800      	cmp	r0, #0
    aadc:	d005      	beq.n	aaea <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    aade:	6878      	ldr	r0, [r7, #4]
    aae0:	68c0      	ldr	r0, [r0, #12]
    aae2:	2800      	cmp	r0, #0
    aae4:	d001      	beq.n	aaea <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aae6:	482c      	ldr	r0, [pc, #176]	; (ab98 <pubnub_subscribe+0x164>)
    aae8:	e000      	b.n	aaec <pubnub_subscribe+0xb8>
    aaea:	4829      	ldr	r0, [pc, #164]	; (ab90 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    aaec:	687c      	ldr	r4, [r7, #4]
    aaee:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aaf0:	2c00      	cmp	r4, #0
    aaf2:	d006      	beq.n	ab02 <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    aaf4:	687c      	ldr	r4, [r7, #4]
    aaf6:	68e4      	ldr	r4, [r4, #12]
    aaf8:	2c00      	cmp	r4, #0
    aafa:	d002      	beq.n	ab02 <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    aafc:	687c      	ldr	r4, [r7, #4]
    aafe:	68e4      	ldr	r4, [r4, #12]
    ab00:	e000      	b.n	ab04 <pubnub_subscribe+0xd0>
    ab02:	4c23      	ldr	r4, [pc, #140]	; (ab90 <pubnub_subscribe+0x15c>)
    ab04:	4e25      	ldr	r6, [pc, #148]	; (ab9c <pubnub_subscribe+0x168>)
    ab06:	46b1      	mov	r9, r6
    ab08:	2680      	movs	r6, #128	; 0x80
    ab0a:	0076      	lsls	r6, r6, #1
    ab0c:	46b0      	mov	r8, r6
    ab0e:	4e24      	ldr	r6, [pc, #144]	; (aba0 <pubnub_subscribe+0x16c>)
    ab10:	9608      	str	r6, [sp, #32]
    ab12:	4e1f      	ldr	r6, [pc, #124]	; (ab90 <pubnub_subscribe+0x15c>)
    ab14:	9607      	str	r6, [sp, #28]
    ab16:	9406      	str	r4, [sp, #24]
    ab18:	9005      	str	r0, [sp, #20]
    ab1a:	9104      	str	r1, [sp, #16]
    ab1c:	9203      	str	r2, [sp, #12]
    ab1e:	9302      	str	r3, [sp, #8]
    ab20:	9501      	str	r5, [sp, #4]
    ab22:	683b      	ldr	r3, [r7, #0]
    ab24:	9300      	str	r3, [sp, #0]
    ab26:	4653      	mov	r3, sl
    ab28:	464a      	mov	r2, r9
    ab2a:	4641      	mov	r1, r8
    ab2c:	4660      	mov	r0, ip
    ab2e:	4c1d      	ldr	r4, [pc, #116]	; (aba4 <pubnub_subscribe+0x170>)
    ab30:	47a0      	blx	r4
    ab32:	0003      	movs	r3, r0
    ab34:	0019      	movs	r1, r3
    ab36:	687a      	ldr	r2, [r7, #4]
    ab38:	23ac      	movs	r3, #172	; 0xac
    ab3a:	005b      	lsls	r3, r3, #1
    ab3c:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    ab3e:	687b      	ldr	r3, [r7, #4]
    ab40:	2250      	movs	r2, #80	; 0x50
    ab42:	5c9b      	ldrb	r3, [r3, r2]
    ab44:	2b00      	cmp	r3, #0
    ab46:	d108      	bne.n	ab5a <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    ab48:	687b      	ldr	r3, [r7, #4]
    ab4a:	2252      	movs	r2, #82	; 0x52
    ab4c:	2103      	movs	r1, #3
    ab4e:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    ab50:	687b      	ldr	r3, [r7, #4]
    ab52:	0018      	movs	r0, r3
    ab54:	4b14      	ldr	r3, [pc, #80]	; (aba8 <pubnub_subscribe+0x174>)
    ab56:	4798      	blx	r3
    ab58:	e003      	b.n	ab62 <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    ab5a:	687b      	ldr	r3, [r7, #4]
    ab5c:	0018      	movs	r0, r3
    ab5e:	4b13      	ldr	r3, [pc, #76]	; (abac <pubnub_subscribe+0x178>)
    ab60:	4798      	blx	r3
	}

	return true;
    ab62:	2301      	movs	r3, #1
}
    ab64:	0018      	movs	r0, r3
    ab66:	46bd      	mov	sp, r7
    ab68:	b002      	add	sp, #8
    ab6a:	bc1c      	pop	{r2, r3, r4}
    ab6c:	4690      	mov	r8, r2
    ab6e:	4699      	mov	r9, r3
    ab70:	46a2      	mov	sl, r4
    ab72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab74:	0000a705 	.word	0x0000a705
    ab78:	0000ddd0 	.word	0x0000ddd0
    ab7c:	0000df9c 	.word	0x0000df9c
    ab80:	0000dde4 	.word	0x0000dde4
    ab84:	0000b53d 	.word	0x0000b53d
    ab88:	0000b5fb 	.word	0x0000b5fb
    ab8c:	0000df20 	.word	0x0000df20
    ab90:	0000df28 	.word	0x0000df28
    ab94:	0000df2c 	.word	0x0000df2c
    ab98:	0000df30 	.word	0x0000df30
    ab9c:	0000df38 	.word	0x0000df38
    aba0:	0000df70 	.word	0x0000df70
    aba4:	0000be59 	.word	0x0000be59
    aba8:	0000a655 	.word	0x0000a655
    abac:	0000a73d 	.word	0x0000a73d

0000abb0 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    abb0:	b590      	push	{r4, r7, lr}
    abb2:	b085      	sub	sp, #20
    abb4:	af00      	add	r7, sp, #0
    abb6:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    abb8:	687b      	ldr	r3, [r7, #4]
    abba:	0018      	movs	r0, r3
    abbc:	4b20      	ldr	r3, [pc, #128]	; (ac40 <pubnub_get+0x90>)
    abbe:	4798      	blx	r3
    abc0:	1e03      	subs	r3, r0, #0
    abc2:	d108      	bne.n	abd6 <pubnub_get+0x26>
    abc4:	4c1f      	ldr	r4, [pc, #124]	; (ac44 <pubnub_get+0x94>)
    abc6:	4a20      	ldr	r2, [pc, #128]	; (ac48 <pubnub_get+0x98>)
    abc8:	23e0      	movs	r3, #224	; 0xe0
    abca:	33ff      	adds	r3, #255	; 0xff
    abcc:	0019      	movs	r1, r3
    abce:	481f      	ldr	r0, [pc, #124]	; (ac4c <pubnub_get+0x9c>)
    abd0:	0023      	movs	r3, r4
    abd2:	4c1f      	ldr	r4, [pc, #124]	; (ac50 <pubnub_get+0xa0>)
    abd4:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    abd6:	687b      	ldr	r3, [r7, #4]
    abd8:	4a1e      	ldr	r2, [pc, #120]	; (ac54 <pubnub_get+0xa4>)
    abda:	5a9a      	ldrh	r2, [r3, r2]
    abdc:	6879      	ldr	r1, [r7, #4]
    abde:	23da      	movs	r3, #218	; 0xda
    abe0:	009b      	lsls	r3, r3, #2
    abe2:	5acb      	ldrh	r3, [r1, r3]
    abe4:	429a      	cmp	r2, r3
    abe6:	d225      	bcs.n	ac34 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	3366      	adds	r3, #102	; 0x66
    abec:	33ff      	adds	r3, #255	; 0xff
    abee:	687a      	ldr	r2, [r7, #4]
    abf0:	4918      	ldr	r1, [pc, #96]	; (ac54 <pubnub_get+0xa4>)
    abf2:	5a52      	ldrh	r2, [r2, r1]
    abf4:	189b      	adds	r3, r3, r2
    abf6:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	4a16      	ldr	r2, [pc, #88]	; (ac54 <pubnub_get+0xa4>)
    abfc:	5a9c      	ldrh	r4, [r3, r2]
    abfe:	68fb      	ldr	r3, [r7, #12]
    ac00:	0018      	movs	r0, r3
    ac02:	4b15      	ldr	r3, [pc, #84]	; (ac58 <pubnub_get+0xa8>)
    ac04:	4798      	blx	r3
    ac06:	0003      	movs	r3, r0
    ac08:	b29b      	uxth	r3, r3
    ac0a:	18e3      	adds	r3, r4, r3
    ac0c:	b299      	uxth	r1, r3
    ac0e:	687b      	ldr	r3, [r7, #4]
    ac10:	4a10      	ldr	r2, [pc, #64]	; (ac54 <pubnub_get+0xa4>)
    ac12:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	4a0f      	ldr	r2, [pc, #60]	; (ac54 <pubnub_get+0xa4>)
    ac18:	5a9b      	ldrh	r3, [r3, r2]
    ac1a:	1c5a      	adds	r2, r3, #1
    ac1c:	b290      	uxth	r0, r2
    ac1e:	687a      	ldr	r2, [r7, #4]
    ac20:	490c      	ldr	r1, [pc, #48]	; (ac54 <pubnub_get+0xa4>)
    ac22:	5250      	strh	r0, [r2, r1]
    ac24:	6879      	ldr	r1, [r7, #4]
    ac26:	22da      	movs	r2, #218	; 0xda
    ac28:	0092      	lsls	r2, r2, #2
    ac2a:	5a8a      	ldrh	r2, [r1, r2]
    ac2c:	4293      	cmp	r3, r2
    ac2e:	d801      	bhi.n	ac34 <pubnub_get+0x84>
			return rslt;
    ac30:	68fb      	ldr	r3, [r7, #12]
    ac32:	e000      	b.n	ac36 <pubnub_get+0x86>
		}
	}

	return NULL;
    ac34:	2300      	movs	r3, #0
}
    ac36:	0018      	movs	r0, r3
    ac38:	46bd      	mov	sp, r7
    ac3a:	b005      	add	sp, #20
    ac3c:	bd90      	pop	{r4, r7, pc}
    ac3e:	46c0      	nop			; (mov r8, r8)
    ac40:	0000a705 	.word	0x0000a705
    ac44:	0000ddd0 	.word	0x0000ddd0
    ac48:	0000dfb0 	.word	0x0000dfb0
    ac4c:	0000dde4 	.word	0x0000dde4
    ac50:	0000b53d 	.word	0x0000b53d
    ac54:	00000366 	.word	0x00000366
    ac58:	0000bf01 	.word	0x0000bf01

0000ac5c <__aeabi_uidiv>:
    ac5c:	2200      	movs	r2, #0
    ac5e:	0843      	lsrs	r3, r0, #1
    ac60:	428b      	cmp	r3, r1
    ac62:	d374      	bcc.n	ad4e <__aeabi_uidiv+0xf2>
    ac64:	0903      	lsrs	r3, r0, #4
    ac66:	428b      	cmp	r3, r1
    ac68:	d35f      	bcc.n	ad2a <__aeabi_uidiv+0xce>
    ac6a:	0a03      	lsrs	r3, r0, #8
    ac6c:	428b      	cmp	r3, r1
    ac6e:	d344      	bcc.n	acfa <__aeabi_uidiv+0x9e>
    ac70:	0b03      	lsrs	r3, r0, #12
    ac72:	428b      	cmp	r3, r1
    ac74:	d328      	bcc.n	acc8 <__aeabi_uidiv+0x6c>
    ac76:	0c03      	lsrs	r3, r0, #16
    ac78:	428b      	cmp	r3, r1
    ac7a:	d30d      	bcc.n	ac98 <__aeabi_uidiv+0x3c>
    ac7c:	22ff      	movs	r2, #255	; 0xff
    ac7e:	0209      	lsls	r1, r1, #8
    ac80:	ba12      	rev	r2, r2
    ac82:	0c03      	lsrs	r3, r0, #16
    ac84:	428b      	cmp	r3, r1
    ac86:	d302      	bcc.n	ac8e <__aeabi_uidiv+0x32>
    ac88:	1212      	asrs	r2, r2, #8
    ac8a:	0209      	lsls	r1, r1, #8
    ac8c:	d065      	beq.n	ad5a <__aeabi_uidiv+0xfe>
    ac8e:	0b03      	lsrs	r3, r0, #12
    ac90:	428b      	cmp	r3, r1
    ac92:	d319      	bcc.n	acc8 <__aeabi_uidiv+0x6c>
    ac94:	e000      	b.n	ac98 <__aeabi_uidiv+0x3c>
    ac96:	0a09      	lsrs	r1, r1, #8
    ac98:	0bc3      	lsrs	r3, r0, #15
    ac9a:	428b      	cmp	r3, r1
    ac9c:	d301      	bcc.n	aca2 <__aeabi_uidiv+0x46>
    ac9e:	03cb      	lsls	r3, r1, #15
    aca0:	1ac0      	subs	r0, r0, r3
    aca2:	4152      	adcs	r2, r2
    aca4:	0b83      	lsrs	r3, r0, #14
    aca6:	428b      	cmp	r3, r1
    aca8:	d301      	bcc.n	acae <__aeabi_uidiv+0x52>
    acaa:	038b      	lsls	r3, r1, #14
    acac:	1ac0      	subs	r0, r0, r3
    acae:	4152      	adcs	r2, r2
    acb0:	0b43      	lsrs	r3, r0, #13
    acb2:	428b      	cmp	r3, r1
    acb4:	d301      	bcc.n	acba <__aeabi_uidiv+0x5e>
    acb6:	034b      	lsls	r3, r1, #13
    acb8:	1ac0      	subs	r0, r0, r3
    acba:	4152      	adcs	r2, r2
    acbc:	0b03      	lsrs	r3, r0, #12
    acbe:	428b      	cmp	r3, r1
    acc0:	d301      	bcc.n	acc6 <__aeabi_uidiv+0x6a>
    acc2:	030b      	lsls	r3, r1, #12
    acc4:	1ac0      	subs	r0, r0, r3
    acc6:	4152      	adcs	r2, r2
    acc8:	0ac3      	lsrs	r3, r0, #11
    acca:	428b      	cmp	r3, r1
    accc:	d301      	bcc.n	acd2 <__aeabi_uidiv+0x76>
    acce:	02cb      	lsls	r3, r1, #11
    acd0:	1ac0      	subs	r0, r0, r3
    acd2:	4152      	adcs	r2, r2
    acd4:	0a83      	lsrs	r3, r0, #10
    acd6:	428b      	cmp	r3, r1
    acd8:	d301      	bcc.n	acde <__aeabi_uidiv+0x82>
    acda:	028b      	lsls	r3, r1, #10
    acdc:	1ac0      	subs	r0, r0, r3
    acde:	4152      	adcs	r2, r2
    ace0:	0a43      	lsrs	r3, r0, #9
    ace2:	428b      	cmp	r3, r1
    ace4:	d301      	bcc.n	acea <__aeabi_uidiv+0x8e>
    ace6:	024b      	lsls	r3, r1, #9
    ace8:	1ac0      	subs	r0, r0, r3
    acea:	4152      	adcs	r2, r2
    acec:	0a03      	lsrs	r3, r0, #8
    acee:	428b      	cmp	r3, r1
    acf0:	d301      	bcc.n	acf6 <__aeabi_uidiv+0x9a>
    acf2:	020b      	lsls	r3, r1, #8
    acf4:	1ac0      	subs	r0, r0, r3
    acf6:	4152      	adcs	r2, r2
    acf8:	d2cd      	bcs.n	ac96 <__aeabi_uidiv+0x3a>
    acfa:	09c3      	lsrs	r3, r0, #7
    acfc:	428b      	cmp	r3, r1
    acfe:	d301      	bcc.n	ad04 <__aeabi_uidiv+0xa8>
    ad00:	01cb      	lsls	r3, r1, #7
    ad02:	1ac0      	subs	r0, r0, r3
    ad04:	4152      	adcs	r2, r2
    ad06:	0983      	lsrs	r3, r0, #6
    ad08:	428b      	cmp	r3, r1
    ad0a:	d301      	bcc.n	ad10 <__aeabi_uidiv+0xb4>
    ad0c:	018b      	lsls	r3, r1, #6
    ad0e:	1ac0      	subs	r0, r0, r3
    ad10:	4152      	adcs	r2, r2
    ad12:	0943      	lsrs	r3, r0, #5
    ad14:	428b      	cmp	r3, r1
    ad16:	d301      	bcc.n	ad1c <__aeabi_uidiv+0xc0>
    ad18:	014b      	lsls	r3, r1, #5
    ad1a:	1ac0      	subs	r0, r0, r3
    ad1c:	4152      	adcs	r2, r2
    ad1e:	0903      	lsrs	r3, r0, #4
    ad20:	428b      	cmp	r3, r1
    ad22:	d301      	bcc.n	ad28 <__aeabi_uidiv+0xcc>
    ad24:	010b      	lsls	r3, r1, #4
    ad26:	1ac0      	subs	r0, r0, r3
    ad28:	4152      	adcs	r2, r2
    ad2a:	08c3      	lsrs	r3, r0, #3
    ad2c:	428b      	cmp	r3, r1
    ad2e:	d301      	bcc.n	ad34 <__aeabi_uidiv+0xd8>
    ad30:	00cb      	lsls	r3, r1, #3
    ad32:	1ac0      	subs	r0, r0, r3
    ad34:	4152      	adcs	r2, r2
    ad36:	0883      	lsrs	r3, r0, #2
    ad38:	428b      	cmp	r3, r1
    ad3a:	d301      	bcc.n	ad40 <__aeabi_uidiv+0xe4>
    ad3c:	008b      	lsls	r3, r1, #2
    ad3e:	1ac0      	subs	r0, r0, r3
    ad40:	4152      	adcs	r2, r2
    ad42:	0843      	lsrs	r3, r0, #1
    ad44:	428b      	cmp	r3, r1
    ad46:	d301      	bcc.n	ad4c <__aeabi_uidiv+0xf0>
    ad48:	004b      	lsls	r3, r1, #1
    ad4a:	1ac0      	subs	r0, r0, r3
    ad4c:	4152      	adcs	r2, r2
    ad4e:	1a41      	subs	r1, r0, r1
    ad50:	d200      	bcs.n	ad54 <__aeabi_uidiv+0xf8>
    ad52:	4601      	mov	r1, r0
    ad54:	4152      	adcs	r2, r2
    ad56:	4610      	mov	r0, r2
    ad58:	4770      	bx	lr
    ad5a:	e7ff      	b.n	ad5c <__aeabi_uidiv+0x100>
    ad5c:	b501      	push	{r0, lr}
    ad5e:	2000      	movs	r0, #0
    ad60:	f000 f8f0 	bl	af44 <__aeabi_idiv0>
    ad64:	bd02      	pop	{r1, pc}
    ad66:	46c0      	nop			; (mov r8, r8)

0000ad68 <__aeabi_uidivmod>:
    ad68:	2900      	cmp	r1, #0
    ad6a:	d0f7      	beq.n	ad5c <__aeabi_uidiv+0x100>
    ad6c:	e776      	b.n	ac5c <__aeabi_uidiv>
    ad6e:	4770      	bx	lr

0000ad70 <__aeabi_idiv>:
    ad70:	4603      	mov	r3, r0
    ad72:	430b      	orrs	r3, r1
    ad74:	d47f      	bmi.n	ae76 <__aeabi_idiv+0x106>
    ad76:	2200      	movs	r2, #0
    ad78:	0843      	lsrs	r3, r0, #1
    ad7a:	428b      	cmp	r3, r1
    ad7c:	d374      	bcc.n	ae68 <__aeabi_idiv+0xf8>
    ad7e:	0903      	lsrs	r3, r0, #4
    ad80:	428b      	cmp	r3, r1
    ad82:	d35f      	bcc.n	ae44 <__aeabi_idiv+0xd4>
    ad84:	0a03      	lsrs	r3, r0, #8
    ad86:	428b      	cmp	r3, r1
    ad88:	d344      	bcc.n	ae14 <__aeabi_idiv+0xa4>
    ad8a:	0b03      	lsrs	r3, r0, #12
    ad8c:	428b      	cmp	r3, r1
    ad8e:	d328      	bcc.n	ade2 <__aeabi_idiv+0x72>
    ad90:	0c03      	lsrs	r3, r0, #16
    ad92:	428b      	cmp	r3, r1
    ad94:	d30d      	bcc.n	adb2 <__aeabi_idiv+0x42>
    ad96:	22ff      	movs	r2, #255	; 0xff
    ad98:	0209      	lsls	r1, r1, #8
    ad9a:	ba12      	rev	r2, r2
    ad9c:	0c03      	lsrs	r3, r0, #16
    ad9e:	428b      	cmp	r3, r1
    ada0:	d302      	bcc.n	ada8 <__aeabi_idiv+0x38>
    ada2:	1212      	asrs	r2, r2, #8
    ada4:	0209      	lsls	r1, r1, #8
    ada6:	d065      	beq.n	ae74 <__aeabi_idiv+0x104>
    ada8:	0b03      	lsrs	r3, r0, #12
    adaa:	428b      	cmp	r3, r1
    adac:	d319      	bcc.n	ade2 <__aeabi_idiv+0x72>
    adae:	e000      	b.n	adb2 <__aeabi_idiv+0x42>
    adb0:	0a09      	lsrs	r1, r1, #8
    adb2:	0bc3      	lsrs	r3, r0, #15
    adb4:	428b      	cmp	r3, r1
    adb6:	d301      	bcc.n	adbc <__aeabi_idiv+0x4c>
    adb8:	03cb      	lsls	r3, r1, #15
    adba:	1ac0      	subs	r0, r0, r3
    adbc:	4152      	adcs	r2, r2
    adbe:	0b83      	lsrs	r3, r0, #14
    adc0:	428b      	cmp	r3, r1
    adc2:	d301      	bcc.n	adc8 <__aeabi_idiv+0x58>
    adc4:	038b      	lsls	r3, r1, #14
    adc6:	1ac0      	subs	r0, r0, r3
    adc8:	4152      	adcs	r2, r2
    adca:	0b43      	lsrs	r3, r0, #13
    adcc:	428b      	cmp	r3, r1
    adce:	d301      	bcc.n	add4 <__aeabi_idiv+0x64>
    add0:	034b      	lsls	r3, r1, #13
    add2:	1ac0      	subs	r0, r0, r3
    add4:	4152      	adcs	r2, r2
    add6:	0b03      	lsrs	r3, r0, #12
    add8:	428b      	cmp	r3, r1
    adda:	d301      	bcc.n	ade0 <__aeabi_idiv+0x70>
    addc:	030b      	lsls	r3, r1, #12
    adde:	1ac0      	subs	r0, r0, r3
    ade0:	4152      	adcs	r2, r2
    ade2:	0ac3      	lsrs	r3, r0, #11
    ade4:	428b      	cmp	r3, r1
    ade6:	d301      	bcc.n	adec <__aeabi_idiv+0x7c>
    ade8:	02cb      	lsls	r3, r1, #11
    adea:	1ac0      	subs	r0, r0, r3
    adec:	4152      	adcs	r2, r2
    adee:	0a83      	lsrs	r3, r0, #10
    adf0:	428b      	cmp	r3, r1
    adf2:	d301      	bcc.n	adf8 <__aeabi_idiv+0x88>
    adf4:	028b      	lsls	r3, r1, #10
    adf6:	1ac0      	subs	r0, r0, r3
    adf8:	4152      	adcs	r2, r2
    adfa:	0a43      	lsrs	r3, r0, #9
    adfc:	428b      	cmp	r3, r1
    adfe:	d301      	bcc.n	ae04 <__aeabi_idiv+0x94>
    ae00:	024b      	lsls	r3, r1, #9
    ae02:	1ac0      	subs	r0, r0, r3
    ae04:	4152      	adcs	r2, r2
    ae06:	0a03      	lsrs	r3, r0, #8
    ae08:	428b      	cmp	r3, r1
    ae0a:	d301      	bcc.n	ae10 <__aeabi_idiv+0xa0>
    ae0c:	020b      	lsls	r3, r1, #8
    ae0e:	1ac0      	subs	r0, r0, r3
    ae10:	4152      	adcs	r2, r2
    ae12:	d2cd      	bcs.n	adb0 <__aeabi_idiv+0x40>
    ae14:	09c3      	lsrs	r3, r0, #7
    ae16:	428b      	cmp	r3, r1
    ae18:	d301      	bcc.n	ae1e <__aeabi_idiv+0xae>
    ae1a:	01cb      	lsls	r3, r1, #7
    ae1c:	1ac0      	subs	r0, r0, r3
    ae1e:	4152      	adcs	r2, r2
    ae20:	0983      	lsrs	r3, r0, #6
    ae22:	428b      	cmp	r3, r1
    ae24:	d301      	bcc.n	ae2a <__aeabi_idiv+0xba>
    ae26:	018b      	lsls	r3, r1, #6
    ae28:	1ac0      	subs	r0, r0, r3
    ae2a:	4152      	adcs	r2, r2
    ae2c:	0943      	lsrs	r3, r0, #5
    ae2e:	428b      	cmp	r3, r1
    ae30:	d301      	bcc.n	ae36 <__aeabi_idiv+0xc6>
    ae32:	014b      	lsls	r3, r1, #5
    ae34:	1ac0      	subs	r0, r0, r3
    ae36:	4152      	adcs	r2, r2
    ae38:	0903      	lsrs	r3, r0, #4
    ae3a:	428b      	cmp	r3, r1
    ae3c:	d301      	bcc.n	ae42 <__aeabi_idiv+0xd2>
    ae3e:	010b      	lsls	r3, r1, #4
    ae40:	1ac0      	subs	r0, r0, r3
    ae42:	4152      	adcs	r2, r2
    ae44:	08c3      	lsrs	r3, r0, #3
    ae46:	428b      	cmp	r3, r1
    ae48:	d301      	bcc.n	ae4e <__aeabi_idiv+0xde>
    ae4a:	00cb      	lsls	r3, r1, #3
    ae4c:	1ac0      	subs	r0, r0, r3
    ae4e:	4152      	adcs	r2, r2
    ae50:	0883      	lsrs	r3, r0, #2
    ae52:	428b      	cmp	r3, r1
    ae54:	d301      	bcc.n	ae5a <__aeabi_idiv+0xea>
    ae56:	008b      	lsls	r3, r1, #2
    ae58:	1ac0      	subs	r0, r0, r3
    ae5a:	4152      	adcs	r2, r2
    ae5c:	0843      	lsrs	r3, r0, #1
    ae5e:	428b      	cmp	r3, r1
    ae60:	d301      	bcc.n	ae66 <__aeabi_idiv+0xf6>
    ae62:	004b      	lsls	r3, r1, #1
    ae64:	1ac0      	subs	r0, r0, r3
    ae66:	4152      	adcs	r2, r2
    ae68:	1a41      	subs	r1, r0, r1
    ae6a:	d200      	bcs.n	ae6e <__aeabi_idiv+0xfe>
    ae6c:	4601      	mov	r1, r0
    ae6e:	4152      	adcs	r2, r2
    ae70:	4610      	mov	r0, r2
    ae72:	4770      	bx	lr
    ae74:	e05d      	b.n	af32 <__aeabi_idiv+0x1c2>
    ae76:	0fca      	lsrs	r2, r1, #31
    ae78:	d000      	beq.n	ae7c <__aeabi_idiv+0x10c>
    ae7a:	4249      	negs	r1, r1
    ae7c:	1003      	asrs	r3, r0, #32
    ae7e:	d300      	bcc.n	ae82 <__aeabi_idiv+0x112>
    ae80:	4240      	negs	r0, r0
    ae82:	4053      	eors	r3, r2
    ae84:	2200      	movs	r2, #0
    ae86:	469c      	mov	ip, r3
    ae88:	0903      	lsrs	r3, r0, #4
    ae8a:	428b      	cmp	r3, r1
    ae8c:	d32d      	bcc.n	aeea <__aeabi_idiv+0x17a>
    ae8e:	0a03      	lsrs	r3, r0, #8
    ae90:	428b      	cmp	r3, r1
    ae92:	d312      	bcc.n	aeba <__aeabi_idiv+0x14a>
    ae94:	22fc      	movs	r2, #252	; 0xfc
    ae96:	0189      	lsls	r1, r1, #6
    ae98:	ba12      	rev	r2, r2
    ae9a:	0a03      	lsrs	r3, r0, #8
    ae9c:	428b      	cmp	r3, r1
    ae9e:	d30c      	bcc.n	aeba <__aeabi_idiv+0x14a>
    aea0:	0189      	lsls	r1, r1, #6
    aea2:	1192      	asrs	r2, r2, #6
    aea4:	428b      	cmp	r3, r1
    aea6:	d308      	bcc.n	aeba <__aeabi_idiv+0x14a>
    aea8:	0189      	lsls	r1, r1, #6
    aeaa:	1192      	asrs	r2, r2, #6
    aeac:	428b      	cmp	r3, r1
    aeae:	d304      	bcc.n	aeba <__aeabi_idiv+0x14a>
    aeb0:	0189      	lsls	r1, r1, #6
    aeb2:	d03a      	beq.n	af2a <__aeabi_idiv+0x1ba>
    aeb4:	1192      	asrs	r2, r2, #6
    aeb6:	e000      	b.n	aeba <__aeabi_idiv+0x14a>
    aeb8:	0989      	lsrs	r1, r1, #6
    aeba:	09c3      	lsrs	r3, r0, #7
    aebc:	428b      	cmp	r3, r1
    aebe:	d301      	bcc.n	aec4 <__aeabi_idiv+0x154>
    aec0:	01cb      	lsls	r3, r1, #7
    aec2:	1ac0      	subs	r0, r0, r3
    aec4:	4152      	adcs	r2, r2
    aec6:	0983      	lsrs	r3, r0, #6
    aec8:	428b      	cmp	r3, r1
    aeca:	d301      	bcc.n	aed0 <__aeabi_idiv+0x160>
    aecc:	018b      	lsls	r3, r1, #6
    aece:	1ac0      	subs	r0, r0, r3
    aed0:	4152      	adcs	r2, r2
    aed2:	0943      	lsrs	r3, r0, #5
    aed4:	428b      	cmp	r3, r1
    aed6:	d301      	bcc.n	aedc <__aeabi_idiv+0x16c>
    aed8:	014b      	lsls	r3, r1, #5
    aeda:	1ac0      	subs	r0, r0, r3
    aedc:	4152      	adcs	r2, r2
    aede:	0903      	lsrs	r3, r0, #4
    aee0:	428b      	cmp	r3, r1
    aee2:	d301      	bcc.n	aee8 <__aeabi_idiv+0x178>
    aee4:	010b      	lsls	r3, r1, #4
    aee6:	1ac0      	subs	r0, r0, r3
    aee8:	4152      	adcs	r2, r2
    aeea:	08c3      	lsrs	r3, r0, #3
    aeec:	428b      	cmp	r3, r1
    aeee:	d301      	bcc.n	aef4 <__aeabi_idiv+0x184>
    aef0:	00cb      	lsls	r3, r1, #3
    aef2:	1ac0      	subs	r0, r0, r3
    aef4:	4152      	adcs	r2, r2
    aef6:	0883      	lsrs	r3, r0, #2
    aef8:	428b      	cmp	r3, r1
    aefa:	d301      	bcc.n	af00 <__aeabi_idiv+0x190>
    aefc:	008b      	lsls	r3, r1, #2
    aefe:	1ac0      	subs	r0, r0, r3
    af00:	4152      	adcs	r2, r2
    af02:	d2d9      	bcs.n	aeb8 <__aeabi_idiv+0x148>
    af04:	0843      	lsrs	r3, r0, #1
    af06:	428b      	cmp	r3, r1
    af08:	d301      	bcc.n	af0e <__aeabi_idiv+0x19e>
    af0a:	004b      	lsls	r3, r1, #1
    af0c:	1ac0      	subs	r0, r0, r3
    af0e:	4152      	adcs	r2, r2
    af10:	1a41      	subs	r1, r0, r1
    af12:	d200      	bcs.n	af16 <__aeabi_idiv+0x1a6>
    af14:	4601      	mov	r1, r0
    af16:	4663      	mov	r3, ip
    af18:	4152      	adcs	r2, r2
    af1a:	105b      	asrs	r3, r3, #1
    af1c:	4610      	mov	r0, r2
    af1e:	d301      	bcc.n	af24 <__aeabi_idiv+0x1b4>
    af20:	4240      	negs	r0, r0
    af22:	2b00      	cmp	r3, #0
    af24:	d500      	bpl.n	af28 <__aeabi_idiv+0x1b8>
    af26:	4249      	negs	r1, r1
    af28:	4770      	bx	lr
    af2a:	4663      	mov	r3, ip
    af2c:	105b      	asrs	r3, r3, #1
    af2e:	d300      	bcc.n	af32 <__aeabi_idiv+0x1c2>
    af30:	4240      	negs	r0, r0
    af32:	b501      	push	{r0, lr}
    af34:	2000      	movs	r0, #0
    af36:	f000 f805 	bl	af44 <__aeabi_idiv0>
    af3a:	bd02      	pop	{r1, pc}

0000af3c <__aeabi_idivmod>:
    af3c:	2900      	cmp	r1, #0
    af3e:	d0f8      	beq.n	af32 <__aeabi_idiv+0x1c2>
    af40:	e716      	b.n	ad70 <__aeabi_idiv>
    af42:	4770      	bx	lr

0000af44 <__aeabi_idiv0>:
    af44:	4770      	bx	lr
    af46:	46c0      	nop			; (mov r8, r8)

0000af48 <__aeabi_lmul>:
    af48:	b5f0      	push	{r4, r5, r6, r7, lr}
    af4a:	464f      	mov	r7, r9
    af4c:	4646      	mov	r6, r8
    af4e:	b4c0      	push	{r6, r7}
    af50:	0416      	lsls	r6, r2, #16
    af52:	0c36      	lsrs	r6, r6, #16
    af54:	4699      	mov	r9, r3
    af56:	0033      	movs	r3, r6
    af58:	0405      	lsls	r5, r0, #16
    af5a:	0c2c      	lsrs	r4, r5, #16
    af5c:	0c07      	lsrs	r7, r0, #16
    af5e:	0c15      	lsrs	r5, r2, #16
    af60:	4363      	muls	r3, r4
    af62:	437e      	muls	r6, r7
    af64:	436f      	muls	r7, r5
    af66:	4365      	muls	r5, r4
    af68:	0c1c      	lsrs	r4, r3, #16
    af6a:	19ad      	adds	r5, r5, r6
    af6c:	1964      	adds	r4, r4, r5
    af6e:	469c      	mov	ip, r3
    af70:	42a6      	cmp	r6, r4
    af72:	d903      	bls.n	af7c <__aeabi_lmul+0x34>
    af74:	2380      	movs	r3, #128	; 0x80
    af76:	025b      	lsls	r3, r3, #9
    af78:	4698      	mov	r8, r3
    af7a:	4447      	add	r7, r8
    af7c:	4663      	mov	r3, ip
    af7e:	0c25      	lsrs	r5, r4, #16
    af80:	19ef      	adds	r7, r5, r7
    af82:	041d      	lsls	r5, r3, #16
    af84:	464b      	mov	r3, r9
    af86:	434a      	muls	r2, r1
    af88:	4343      	muls	r3, r0
    af8a:	0c2d      	lsrs	r5, r5, #16
    af8c:	0424      	lsls	r4, r4, #16
    af8e:	1964      	adds	r4, r4, r5
    af90:	1899      	adds	r1, r3, r2
    af92:	19c9      	adds	r1, r1, r7
    af94:	0020      	movs	r0, r4
    af96:	bc0c      	pop	{r2, r3}
    af98:	4690      	mov	r8, r2
    af9a:	4699      	mov	r9, r3
    af9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af9e:	46c0      	nop			; (mov r8, r8)

0000afa0 <__aeabi_dmul>:
    afa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    afa2:	465f      	mov	r7, fp
    afa4:	4656      	mov	r6, sl
    afa6:	464d      	mov	r5, r9
    afa8:	4644      	mov	r4, r8
    afaa:	b4f0      	push	{r4, r5, r6, r7}
    afac:	030d      	lsls	r5, r1, #12
    afae:	4699      	mov	r9, r3
    afb0:	004e      	lsls	r6, r1, #1
    afb2:	0b2b      	lsrs	r3, r5, #12
    afb4:	b087      	sub	sp, #28
    afb6:	0007      	movs	r7, r0
    afb8:	4692      	mov	sl, r2
    afba:	4680      	mov	r8, r0
    afbc:	469b      	mov	fp, r3
    afbe:	0d76      	lsrs	r6, r6, #21
    afc0:	0fcc      	lsrs	r4, r1, #31
    afc2:	2e00      	cmp	r6, #0
    afc4:	d069      	beq.n	b09a <__aeabi_dmul+0xfa>
    afc6:	4b6d      	ldr	r3, [pc, #436]	; (b17c <__aeabi_dmul+0x1dc>)
    afc8:	429e      	cmp	r6, r3
    afca:	d035      	beq.n	b038 <__aeabi_dmul+0x98>
    afcc:	465b      	mov	r3, fp
    afce:	2280      	movs	r2, #128	; 0x80
    afd0:	00dd      	lsls	r5, r3, #3
    afd2:	0412      	lsls	r2, r2, #16
    afd4:	0f43      	lsrs	r3, r0, #29
    afd6:	4313      	orrs	r3, r2
    afd8:	432b      	orrs	r3, r5
    afda:	469b      	mov	fp, r3
    afdc:	00c3      	lsls	r3, r0, #3
    afde:	4698      	mov	r8, r3
    afe0:	4b67      	ldr	r3, [pc, #412]	; (b180 <__aeabi_dmul+0x1e0>)
    afe2:	2700      	movs	r7, #0
    afe4:	469c      	mov	ip, r3
    afe6:	2300      	movs	r3, #0
    afe8:	4466      	add	r6, ip
    afea:	9301      	str	r3, [sp, #4]
    afec:	464a      	mov	r2, r9
    afee:	0315      	lsls	r5, r2, #12
    aff0:	0050      	lsls	r0, r2, #1
    aff2:	0fd2      	lsrs	r2, r2, #31
    aff4:	4653      	mov	r3, sl
    aff6:	0b2d      	lsrs	r5, r5, #12
    aff8:	0d40      	lsrs	r0, r0, #21
    affa:	4691      	mov	r9, r2
    affc:	d100      	bne.n	b000 <__aeabi_dmul+0x60>
    affe:	e076      	b.n	b0ee <__aeabi_dmul+0x14e>
    b000:	4a5e      	ldr	r2, [pc, #376]	; (b17c <__aeabi_dmul+0x1dc>)
    b002:	4290      	cmp	r0, r2
    b004:	d06c      	beq.n	b0e0 <__aeabi_dmul+0x140>
    b006:	2280      	movs	r2, #128	; 0x80
    b008:	0f5b      	lsrs	r3, r3, #29
    b00a:	0412      	lsls	r2, r2, #16
    b00c:	4313      	orrs	r3, r2
    b00e:	4a5c      	ldr	r2, [pc, #368]	; (b180 <__aeabi_dmul+0x1e0>)
    b010:	00ed      	lsls	r5, r5, #3
    b012:	4694      	mov	ip, r2
    b014:	431d      	orrs	r5, r3
    b016:	4653      	mov	r3, sl
    b018:	2200      	movs	r2, #0
    b01a:	00db      	lsls	r3, r3, #3
    b01c:	4460      	add	r0, ip
    b01e:	4649      	mov	r1, r9
    b020:	1836      	adds	r6, r6, r0
    b022:	1c70      	adds	r0, r6, #1
    b024:	4061      	eors	r1, r4
    b026:	9002      	str	r0, [sp, #8]
    b028:	4317      	orrs	r7, r2
    b02a:	2f0f      	cmp	r7, #15
    b02c:	d900      	bls.n	b030 <__aeabi_dmul+0x90>
    b02e:	e0af      	b.n	b190 <__aeabi_dmul+0x1f0>
    b030:	4854      	ldr	r0, [pc, #336]	; (b184 <__aeabi_dmul+0x1e4>)
    b032:	00bf      	lsls	r7, r7, #2
    b034:	59c7      	ldr	r7, [r0, r7]
    b036:	46bf      	mov	pc, r7
    b038:	465b      	mov	r3, fp
    b03a:	431f      	orrs	r7, r3
    b03c:	d000      	beq.n	b040 <__aeabi_dmul+0xa0>
    b03e:	e088      	b.n	b152 <__aeabi_dmul+0x1b2>
    b040:	2300      	movs	r3, #0
    b042:	469b      	mov	fp, r3
    b044:	4698      	mov	r8, r3
    b046:	3302      	adds	r3, #2
    b048:	2708      	movs	r7, #8
    b04a:	9301      	str	r3, [sp, #4]
    b04c:	e7ce      	b.n	afec <__aeabi_dmul+0x4c>
    b04e:	4649      	mov	r1, r9
    b050:	2a02      	cmp	r2, #2
    b052:	d06a      	beq.n	b12a <__aeabi_dmul+0x18a>
    b054:	2a03      	cmp	r2, #3
    b056:	d100      	bne.n	b05a <__aeabi_dmul+0xba>
    b058:	e209      	b.n	b46e <__aeabi_dmul+0x4ce>
    b05a:	2a01      	cmp	r2, #1
    b05c:	d000      	beq.n	b060 <__aeabi_dmul+0xc0>
    b05e:	e1bb      	b.n	b3d8 <__aeabi_dmul+0x438>
    b060:	4011      	ands	r1, r2
    b062:	2200      	movs	r2, #0
    b064:	2300      	movs	r3, #0
    b066:	2500      	movs	r5, #0
    b068:	4690      	mov	r8, r2
    b06a:	b2cc      	uxtb	r4, r1
    b06c:	2100      	movs	r1, #0
    b06e:	032d      	lsls	r5, r5, #12
    b070:	0d0a      	lsrs	r2, r1, #20
    b072:	0512      	lsls	r2, r2, #20
    b074:	0b2d      	lsrs	r5, r5, #12
    b076:	4315      	orrs	r5, r2
    b078:	4a43      	ldr	r2, [pc, #268]	; (b188 <__aeabi_dmul+0x1e8>)
    b07a:	051b      	lsls	r3, r3, #20
    b07c:	4015      	ands	r5, r2
    b07e:	431d      	orrs	r5, r3
    b080:	006d      	lsls	r5, r5, #1
    b082:	07e4      	lsls	r4, r4, #31
    b084:	086d      	lsrs	r5, r5, #1
    b086:	4325      	orrs	r5, r4
    b088:	4640      	mov	r0, r8
    b08a:	0029      	movs	r1, r5
    b08c:	b007      	add	sp, #28
    b08e:	bc3c      	pop	{r2, r3, r4, r5}
    b090:	4690      	mov	r8, r2
    b092:	4699      	mov	r9, r3
    b094:	46a2      	mov	sl, r4
    b096:	46ab      	mov	fp, r5
    b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b09a:	4303      	orrs	r3, r0
    b09c:	d052      	beq.n	b144 <__aeabi_dmul+0x1a4>
    b09e:	465b      	mov	r3, fp
    b0a0:	2b00      	cmp	r3, #0
    b0a2:	d100      	bne.n	b0a6 <__aeabi_dmul+0x106>
    b0a4:	e18a      	b.n	b3bc <__aeabi_dmul+0x41c>
    b0a6:	4658      	mov	r0, fp
    b0a8:	f000 fa2a 	bl	b500 <__clzsi2>
    b0ac:	0003      	movs	r3, r0
    b0ae:	3b0b      	subs	r3, #11
    b0b0:	2b1c      	cmp	r3, #28
    b0b2:	dd00      	ble.n	b0b6 <__aeabi_dmul+0x116>
    b0b4:	e17b      	b.n	b3ae <__aeabi_dmul+0x40e>
    b0b6:	221d      	movs	r2, #29
    b0b8:	1ad3      	subs	r3, r2, r3
    b0ba:	003a      	movs	r2, r7
    b0bc:	0001      	movs	r1, r0
    b0be:	465d      	mov	r5, fp
    b0c0:	40da      	lsrs	r2, r3
    b0c2:	3908      	subs	r1, #8
    b0c4:	408d      	lsls	r5, r1
    b0c6:	0013      	movs	r3, r2
    b0c8:	408f      	lsls	r7, r1
    b0ca:	432b      	orrs	r3, r5
    b0cc:	469b      	mov	fp, r3
    b0ce:	46b8      	mov	r8, r7
    b0d0:	4b2e      	ldr	r3, [pc, #184]	; (b18c <__aeabi_dmul+0x1ec>)
    b0d2:	2700      	movs	r7, #0
    b0d4:	469c      	mov	ip, r3
    b0d6:	2300      	movs	r3, #0
    b0d8:	4460      	add	r0, ip
    b0da:	4246      	negs	r6, r0
    b0dc:	9301      	str	r3, [sp, #4]
    b0de:	e785      	b.n	afec <__aeabi_dmul+0x4c>
    b0e0:	4652      	mov	r2, sl
    b0e2:	432a      	orrs	r2, r5
    b0e4:	d12c      	bne.n	b140 <__aeabi_dmul+0x1a0>
    b0e6:	2500      	movs	r5, #0
    b0e8:	2300      	movs	r3, #0
    b0ea:	2202      	movs	r2, #2
    b0ec:	e797      	b.n	b01e <__aeabi_dmul+0x7e>
    b0ee:	4652      	mov	r2, sl
    b0f0:	432a      	orrs	r2, r5
    b0f2:	d021      	beq.n	b138 <__aeabi_dmul+0x198>
    b0f4:	2d00      	cmp	r5, #0
    b0f6:	d100      	bne.n	b0fa <__aeabi_dmul+0x15a>
    b0f8:	e154      	b.n	b3a4 <__aeabi_dmul+0x404>
    b0fa:	0028      	movs	r0, r5
    b0fc:	f000 fa00 	bl	b500 <__clzsi2>
    b100:	0003      	movs	r3, r0
    b102:	3b0b      	subs	r3, #11
    b104:	2b1c      	cmp	r3, #28
    b106:	dd00      	ble.n	b10a <__aeabi_dmul+0x16a>
    b108:	e146      	b.n	b398 <__aeabi_dmul+0x3f8>
    b10a:	211d      	movs	r1, #29
    b10c:	1acb      	subs	r3, r1, r3
    b10e:	4651      	mov	r1, sl
    b110:	0002      	movs	r2, r0
    b112:	40d9      	lsrs	r1, r3
    b114:	4653      	mov	r3, sl
    b116:	3a08      	subs	r2, #8
    b118:	4095      	lsls	r5, r2
    b11a:	4093      	lsls	r3, r2
    b11c:	430d      	orrs	r5, r1
    b11e:	4a1b      	ldr	r2, [pc, #108]	; (b18c <__aeabi_dmul+0x1ec>)
    b120:	4694      	mov	ip, r2
    b122:	4460      	add	r0, ip
    b124:	4240      	negs	r0, r0
    b126:	2200      	movs	r2, #0
    b128:	e779      	b.n	b01e <__aeabi_dmul+0x7e>
    b12a:	2401      	movs	r4, #1
    b12c:	2200      	movs	r2, #0
    b12e:	400c      	ands	r4, r1
    b130:	4b12      	ldr	r3, [pc, #72]	; (b17c <__aeabi_dmul+0x1dc>)
    b132:	2500      	movs	r5, #0
    b134:	4690      	mov	r8, r2
    b136:	e799      	b.n	b06c <__aeabi_dmul+0xcc>
    b138:	2500      	movs	r5, #0
    b13a:	2300      	movs	r3, #0
    b13c:	2201      	movs	r2, #1
    b13e:	e76e      	b.n	b01e <__aeabi_dmul+0x7e>
    b140:	2203      	movs	r2, #3
    b142:	e76c      	b.n	b01e <__aeabi_dmul+0x7e>
    b144:	2300      	movs	r3, #0
    b146:	469b      	mov	fp, r3
    b148:	4698      	mov	r8, r3
    b14a:	3301      	adds	r3, #1
    b14c:	2704      	movs	r7, #4
    b14e:	9301      	str	r3, [sp, #4]
    b150:	e74c      	b.n	afec <__aeabi_dmul+0x4c>
    b152:	2303      	movs	r3, #3
    b154:	270c      	movs	r7, #12
    b156:	9301      	str	r3, [sp, #4]
    b158:	e748      	b.n	afec <__aeabi_dmul+0x4c>
    b15a:	2300      	movs	r3, #0
    b15c:	2580      	movs	r5, #128	; 0x80
    b15e:	4698      	mov	r8, r3
    b160:	2400      	movs	r4, #0
    b162:	032d      	lsls	r5, r5, #12
    b164:	4b05      	ldr	r3, [pc, #20]	; (b17c <__aeabi_dmul+0x1dc>)
    b166:	e781      	b.n	b06c <__aeabi_dmul+0xcc>
    b168:	465d      	mov	r5, fp
    b16a:	4643      	mov	r3, r8
    b16c:	9a01      	ldr	r2, [sp, #4]
    b16e:	e76f      	b.n	b050 <__aeabi_dmul+0xb0>
    b170:	465d      	mov	r5, fp
    b172:	4643      	mov	r3, r8
    b174:	0021      	movs	r1, r4
    b176:	9a01      	ldr	r2, [sp, #4]
    b178:	e76a      	b.n	b050 <__aeabi_dmul+0xb0>
    b17a:	46c0      	nop			; (mov r8, r8)
    b17c:	000007ff 	.word	0x000007ff
    b180:	fffffc01 	.word	0xfffffc01
    b184:	0000dfbc 	.word	0x0000dfbc
    b188:	800fffff 	.word	0x800fffff
    b18c:	000003f3 	.word	0x000003f3
    b190:	4642      	mov	r2, r8
    b192:	0c12      	lsrs	r2, r2, #16
    b194:	4691      	mov	r9, r2
    b196:	0c1a      	lsrs	r2, r3, #16
    b198:	4694      	mov	ip, r2
    b19a:	4642      	mov	r2, r8
    b19c:	0417      	lsls	r7, r2, #16
    b19e:	464a      	mov	r2, r9
    b1a0:	041b      	lsls	r3, r3, #16
    b1a2:	0c1b      	lsrs	r3, r3, #16
    b1a4:	435a      	muls	r2, r3
    b1a6:	4660      	mov	r0, ip
    b1a8:	4690      	mov	r8, r2
    b1aa:	464a      	mov	r2, r9
    b1ac:	4342      	muls	r2, r0
    b1ae:	0010      	movs	r0, r2
    b1b0:	9203      	str	r2, [sp, #12]
    b1b2:	4662      	mov	r2, ip
    b1b4:	001c      	movs	r4, r3
    b1b6:	0c3f      	lsrs	r7, r7, #16
    b1b8:	437a      	muls	r2, r7
    b1ba:	437c      	muls	r4, r7
    b1bc:	4442      	add	r2, r8
    b1be:	9201      	str	r2, [sp, #4]
    b1c0:	0c22      	lsrs	r2, r4, #16
    b1c2:	4692      	mov	sl, r2
    b1c4:	9a01      	ldr	r2, [sp, #4]
    b1c6:	4452      	add	r2, sl
    b1c8:	4590      	cmp	r8, r2
    b1ca:	d906      	bls.n	b1da <__aeabi_dmul+0x23a>
    b1cc:	4682      	mov	sl, r0
    b1ce:	2080      	movs	r0, #128	; 0x80
    b1d0:	0240      	lsls	r0, r0, #9
    b1d2:	4680      	mov	r8, r0
    b1d4:	44c2      	add	sl, r8
    b1d6:	4650      	mov	r0, sl
    b1d8:	9003      	str	r0, [sp, #12]
    b1da:	0c10      	lsrs	r0, r2, #16
    b1dc:	9004      	str	r0, [sp, #16]
    b1de:	4648      	mov	r0, r9
    b1e0:	0424      	lsls	r4, r4, #16
    b1e2:	0c24      	lsrs	r4, r4, #16
    b1e4:	0412      	lsls	r2, r2, #16
    b1e6:	1912      	adds	r2, r2, r4
    b1e8:	9205      	str	r2, [sp, #20]
    b1ea:	0c2a      	lsrs	r2, r5, #16
    b1ec:	042d      	lsls	r5, r5, #16
    b1ee:	0c2d      	lsrs	r5, r5, #16
    b1f0:	4368      	muls	r0, r5
    b1f2:	002c      	movs	r4, r5
    b1f4:	4682      	mov	sl, r0
    b1f6:	4648      	mov	r0, r9
    b1f8:	437c      	muls	r4, r7
    b1fa:	4350      	muls	r0, r2
    b1fc:	4681      	mov	r9, r0
    b1fe:	0c20      	lsrs	r0, r4, #16
    b200:	4680      	mov	r8, r0
    b202:	4357      	muls	r7, r2
    b204:	4457      	add	r7, sl
    b206:	4447      	add	r7, r8
    b208:	45ba      	cmp	sl, r7
    b20a:	d903      	bls.n	b214 <__aeabi_dmul+0x274>
    b20c:	2080      	movs	r0, #128	; 0x80
    b20e:	0240      	lsls	r0, r0, #9
    b210:	4680      	mov	r8, r0
    b212:	44c1      	add	r9, r8
    b214:	0c38      	lsrs	r0, r7, #16
    b216:	043f      	lsls	r7, r7, #16
    b218:	46b8      	mov	r8, r7
    b21a:	4448      	add	r0, r9
    b21c:	0424      	lsls	r4, r4, #16
    b21e:	0c24      	lsrs	r4, r4, #16
    b220:	9001      	str	r0, [sp, #4]
    b222:	9804      	ldr	r0, [sp, #16]
    b224:	44a0      	add	r8, r4
    b226:	4440      	add	r0, r8
    b228:	9004      	str	r0, [sp, #16]
    b22a:	4658      	mov	r0, fp
    b22c:	0c00      	lsrs	r0, r0, #16
    b22e:	4681      	mov	r9, r0
    b230:	4658      	mov	r0, fp
    b232:	0404      	lsls	r4, r0, #16
    b234:	0c20      	lsrs	r0, r4, #16
    b236:	4682      	mov	sl, r0
    b238:	0007      	movs	r7, r0
    b23a:	4648      	mov	r0, r9
    b23c:	435f      	muls	r7, r3
    b23e:	464c      	mov	r4, r9
    b240:	4343      	muls	r3, r0
    b242:	4660      	mov	r0, ip
    b244:	4360      	muls	r0, r4
    b246:	4664      	mov	r4, ip
    b248:	4683      	mov	fp, r0
    b24a:	4650      	mov	r0, sl
    b24c:	4344      	muls	r4, r0
    b24e:	0c38      	lsrs	r0, r7, #16
    b250:	4684      	mov	ip, r0
    b252:	18e4      	adds	r4, r4, r3
    b254:	4464      	add	r4, ip
    b256:	42a3      	cmp	r3, r4
    b258:	d903      	bls.n	b262 <__aeabi_dmul+0x2c2>
    b25a:	2380      	movs	r3, #128	; 0x80
    b25c:	025b      	lsls	r3, r3, #9
    b25e:	469c      	mov	ip, r3
    b260:	44e3      	add	fp, ip
    b262:	4648      	mov	r0, r9
    b264:	043f      	lsls	r7, r7, #16
    b266:	0c23      	lsrs	r3, r4, #16
    b268:	0c3f      	lsrs	r7, r7, #16
    b26a:	0424      	lsls	r4, r4, #16
    b26c:	19e4      	adds	r4, r4, r7
    b26e:	4657      	mov	r7, sl
    b270:	4368      	muls	r0, r5
    b272:	436f      	muls	r7, r5
    b274:	4684      	mov	ip, r0
    b276:	464d      	mov	r5, r9
    b278:	4650      	mov	r0, sl
    b27a:	4355      	muls	r5, r2
    b27c:	4342      	muls	r2, r0
    b27e:	0c38      	lsrs	r0, r7, #16
    b280:	4681      	mov	r9, r0
    b282:	4462      	add	r2, ip
    b284:	444a      	add	r2, r9
    b286:	445b      	add	r3, fp
    b288:	4594      	cmp	ip, r2
    b28a:	d903      	bls.n	b294 <__aeabi_dmul+0x2f4>
    b28c:	2080      	movs	r0, #128	; 0x80
    b28e:	0240      	lsls	r0, r0, #9
    b290:	4684      	mov	ip, r0
    b292:	4465      	add	r5, ip
    b294:	9803      	ldr	r0, [sp, #12]
    b296:	043f      	lsls	r7, r7, #16
    b298:	4683      	mov	fp, r0
    b29a:	9804      	ldr	r0, [sp, #16]
    b29c:	0c3f      	lsrs	r7, r7, #16
    b29e:	4684      	mov	ip, r0
    b2a0:	44e3      	add	fp, ip
    b2a2:	45c3      	cmp	fp, r8
    b2a4:	4180      	sbcs	r0, r0
    b2a6:	4240      	negs	r0, r0
    b2a8:	4682      	mov	sl, r0
    b2aa:	0410      	lsls	r0, r2, #16
    b2ac:	4684      	mov	ip, r0
    b2ae:	9801      	ldr	r0, [sp, #4]
    b2b0:	4467      	add	r7, ip
    b2b2:	4684      	mov	ip, r0
    b2b4:	4467      	add	r7, ip
    b2b6:	44a3      	add	fp, r4
    b2b8:	46bc      	mov	ip, r7
    b2ba:	45a3      	cmp	fp, r4
    b2bc:	41a4      	sbcs	r4, r4
    b2be:	4699      	mov	r9, r3
    b2c0:	44d4      	add	ip, sl
    b2c2:	4264      	negs	r4, r4
    b2c4:	4287      	cmp	r7, r0
    b2c6:	41bf      	sbcs	r7, r7
    b2c8:	45d4      	cmp	ip, sl
    b2ca:	4180      	sbcs	r0, r0
    b2cc:	44e1      	add	r9, ip
    b2ce:	46a0      	mov	r8, r4
    b2d0:	4599      	cmp	r9, r3
    b2d2:	419b      	sbcs	r3, r3
    b2d4:	427f      	negs	r7, r7
    b2d6:	4240      	negs	r0, r0
    b2d8:	44c8      	add	r8, r9
    b2da:	4307      	orrs	r7, r0
    b2dc:	0c12      	lsrs	r2, r2, #16
    b2de:	18ba      	adds	r2, r7, r2
    b2e0:	45a0      	cmp	r8, r4
    b2e2:	41a4      	sbcs	r4, r4
    b2e4:	425f      	negs	r7, r3
    b2e6:	003b      	movs	r3, r7
    b2e8:	4264      	negs	r4, r4
    b2ea:	4323      	orrs	r3, r4
    b2ec:	18d7      	adds	r7, r2, r3
    b2ee:	4643      	mov	r3, r8
    b2f0:	197d      	adds	r5, r7, r5
    b2f2:	0ddb      	lsrs	r3, r3, #23
    b2f4:	026d      	lsls	r5, r5, #9
    b2f6:	431d      	orrs	r5, r3
    b2f8:	465b      	mov	r3, fp
    b2fa:	025a      	lsls	r2, r3, #9
    b2fc:	9b05      	ldr	r3, [sp, #20]
    b2fe:	431a      	orrs	r2, r3
    b300:	1e53      	subs	r3, r2, #1
    b302:	419a      	sbcs	r2, r3
    b304:	465b      	mov	r3, fp
    b306:	0ddb      	lsrs	r3, r3, #23
    b308:	431a      	orrs	r2, r3
    b30a:	4643      	mov	r3, r8
    b30c:	025b      	lsls	r3, r3, #9
    b30e:	4313      	orrs	r3, r2
    b310:	01ea      	lsls	r2, r5, #7
    b312:	d507      	bpl.n	b324 <__aeabi_dmul+0x384>
    b314:	2201      	movs	r2, #1
    b316:	085c      	lsrs	r4, r3, #1
    b318:	4013      	ands	r3, r2
    b31a:	4323      	orrs	r3, r4
    b31c:	07ea      	lsls	r2, r5, #31
    b31e:	9e02      	ldr	r6, [sp, #8]
    b320:	4313      	orrs	r3, r2
    b322:	086d      	lsrs	r5, r5, #1
    b324:	4a57      	ldr	r2, [pc, #348]	; (b484 <__aeabi_dmul+0x4e4>)
    b326:	18b2      	adds	r2, r6, r2
    b328:	2a00      	cmp	r2, #0
    b32a:	dd4b      	ble.n	b3c4 <__aeabi_dmul+0x424>
    b32c:	0758      	lsls	r0, r3, #29
    b32e:	d009      	beq.n	b344 <__aeabi_dmul+0x3a4>
    b330:	200f      	movs	r0, #15
    b332:	4018      	ands	r0, r3
    b334:	2804      	cmp	r0, #4
    b336:	d005      	beq.n	b344 <__aeabi_dmul+0x3a4>
    b338:	1d18      	adds	r0, r3, #4
    b33a:	4298      	cmp	r0, r3
    b33c:	419b      	sbcs	r3, r3
    b33e:	425b      	negs	r3, r3
    b340:	18ed      	adds	r5, r5, r3
    b342:	0003      	movs	r3, r0
    b344:	01e8      	lsls	r0, r5, #7
    b346:	d504      	bpl.n	b352 <__aeabi_dmul+0x3b2>
    b348:	4a4f      	ldr	r2, [pc, #316]	; (b488 <__aeabi_dmul+0x4e8>)
    b34a:	4015      	ands	r5, r2
    b34c:	2280      	movs	r2, #128	; 0x80
    b34e:	00d2      	lsls	r2, r2, #3
    b350:	18b2      	adds	r2, r6, r2
    b352:	484e      	ldr	r0, [pc, #312]	; (b48c <__aeabi_dmul+0x4ec>)
    b354:	4282      	cmp	r2, r0
    b356:	dd00      	ble.n	b35a <__aeabi_dmul+0x3ba>
    b358:	e6e7      	b.n	b12a <__aeabi_dmul+0x18a>
    b35a:	2401      	movs	r4, #1
    b35c:	08db      	lsrs	r3, r3, #3
    b35e:	0768      	lsls	r0, r5, #29
    b360:	4318      	orrs	r0, r3
    b362:	026d      	lsls	r5, r5, #9
    b364:	0553      	lsls	r3, r2, #21
    b366:	4680      	mov	r8, r0
    b368:	0b2d      	lsrs	r5, r5, #12
    b36a:	0d5b      	lsrs	r3, r3, #21
    b36c:	400c      	ands	r4, r1
    b36e:	e67d      	b.n	b06c <__aeabi_dmul+0xcc>
    b370:	2280      	movs	r2, #128	; 0x80
    b372:	4659      	mov	r1, fp
    b374:	0312      	lsls	r2, r2, #12
    b376:	4211      	tst	r1, r2
    b378:	d008      	beq.n	b38c <__aeabi_dmul+0x3ec>
    b37a:	4215      	tst	r5, r2
    b37c:	d106      	bne.n	b38c <__aeabi_dmul+0x3ec>
    b37e:	4315      	orrs	r5, r2
    b380:	032d      	lsls	r5, r5, #12
    b382:	4698      	mov	r8, r3
    b384:	0b2d      	lsrs	r5, r5, #12
    b386:	464c      	mov	r4, r9
    b388:	4b41      	ldr	r3, [pc, #260]	; (b490 <__aeabi_dmul+0x4f0>)
    b38a:	e66f      	b.n	b06c <__aeabi_dmul+0xcc>
    b38c:	465d      	mov	r5, fp
    b38e:	4315      	orrs	r5, r2
    b390:	032d      	lsls	r5, r5, #12
    b392:	0b2d      	lsrs	r5, r5, #12
    b394:	4b3e      	ldr	r3, [pc, #248]	; (b490 <__aeabi_dmul+0x4f0>)
    b396:	e669      	b.n	b06c <__aeabi_dmul+0xcc>
    b398:	0003      	movs	r3, r0
    b39a:	4655      	mov	r5, sl
    b39c:	3b28      	subs	r3, #40	; 0x28
    b39e:	409d      	lsls	r5, r3
    b3a0:	2300      	movs	r3, #0
    b3a2:	e6bc      	b.n	b11e <__aeabi_dmul+0x17e>
    b3a4:	4650      	mov	r0, sl
    b3a6:	f000 f8ab 	bl	b500 <__clzsi2>
    b3aa:	3020      	adds	r0, #32
    b3ac:	e6a8      	b.n	b100 <__aeabi_dmul+0x160>
    b3ae:	0003      	movs	r3, r0
    b3b0:	3b28      	subs	r3, #40	; 0x28
    b3b2:	409f      	lsls	r7, r3
    b3b4:	2300      	movs	r3, #0
    b3b6:	46bb      	mov	fp, r7
    b3b8:	4698      	mov	r8, r3
    b3ba:	e689      	b.n	b0d0 <__aeabi_dmul+0x130>
    b3bc:	f000 f8a0 	bl	b500 <__clzsi2>
    b3c0:	3020      	adds	r0, #32
    b3c2:	e673      	b.n	b0ac <__aeabi_dmul+0x10c>
    b3c4:	2401      	movs	r4, #1
    b3c6:	1aa6      	subs	r6, r4, r2
    b3c8:	2e38      	cmp	r6, #56	; 0x38
    b3ca:	dd07      	ble.n	b3dc <__aeabi_dmul+0x43c>
    b3cc:	2200      	movs	r2, #0
    b3ce:	400c      	ands	r4, r1
    b3d0:	2300      	movs	r3, #0
    b3d2:	2500      	movs	r5, #0
    b3d4:	4690      	mov	r8, r2
    b3d6:	e649      	b.n	b06c <__aeabi_dmul+0xcc>
    b3d8:	9e02      	ldr	r6, [sp, #8]
    b3da:	e7a3      	b.n	b324 <__aeabi_dmul+0x384>
    b3dc:	2e1f      	cmp	r6, #31
    b3de:	dc20      	bgt.n	b422 <__aeabi_dmul+0x482>
    b3e0:	2220      	movs	r2, #32
    b3e2:	002c      	movs	r4, r5
    b3e4:	0018      	movs	r0, r3
    b3e6:	1b92      	subs	r2, r2, r6
    b3e8:	40f0      	lsrs	r0, r6
    b3ea:	4094      	lsls	r4, r2
    b3ec:	4093      	lsls	r3, r2
    b3ee:	4304      	orrs	r4, r0
    b3f0:	1e58      	subs	r0, r3, #1
    b3f2:	4183      	sbcs	r3, r0
    b3f4:	431c      	orrs	r4, r3
    b3f6:	40f5      	lsrs	r5, r6
    b3f8:	0763      	lsls	r3, r4, #29
    b3fa:	d009      	beq.n	b410 <__aeabi_dmul+0x470>
    b3fc:	230f      	movs	r3, #15
    b3fe:	4023      	ands	r3, r4
    b400:	2b04      	cmp	r3, #4
    b402:	d005      	beq.n	b410 <__aeabi_dmul+0x470>
    b404:	0023      	movs	r3, r4
    b406:	1d1c      	adds	r4, r3, #4
    b408:	429c      	cmp	r4, r3
    b40a:	4192      	sbcs	r2, r2
    b40c:	4252      	negs	r2, r2
    b40e:	18ad      	adds	r5, r5, r2
    b410:	022b      	lsls	r3, r5, #8
    b412:	d51f      	bpl.n	b454 <__aeabi_dmul+0x4b4>
    b414:	2401      	movs	r4, #1
    b416:	2200      	movs	r2, #0
    b418:	400c      	ands	r4, r1
    b41a:	2301      	movs	r3, #1
    b41c:	2500      	movs	r5, #0
    b41e:	4690      	mov	r8, r2
    b420:	e624      	b.n	b06c <__aeabi_dmul+0xcc>
    b422:	201f      	movs	r0, #31
    b424:	002c      	movs	r4, r5
    b426:	4240      	negs	r0, r0
    b428:	1a82      	subs	r2, r0, r2
    b42a:	40d4      	lsrs	r4, r2
    b42c:	2e20      	cmp	r6, #32
    b42e:	d01c      	beq.n	b46a <__aeabi_dmul+0x4ca>
    b430:	2240      	movs	r2, #64	; 0x40
    b432:	1b96      	subs	r6, r2, r6
    b434:	40b5      	lsls	r5, r6
    b436:	432b      	orrs	r3, r5
    b438:	1e58      	subs	r0, r3, #1
    b43a:	4183      	sbcs	r3, r0
    b43c:	2007      	movs	r0, #7
    b43e:	4323      	orrs	r3, r4
    b440:	4018      	ands	r0, r3
    b442:	2500      	movs	r5, #0
    b444:	2800      	cmp	r0, #0
    b446:	d009      	beq.n	b45c <__aeabi_dmul+0x4bc>
    b448:	220f      	movs	r2, #15
    b44a:	2500      	movs	r5, #0
    b44c:	401a      	ands	r2, r3
    b44e:	001c      	movs	r4, r3
    b450:	2a04      	cmp	r2, #4
    b452:	d1d8      	bne.n	b406 <__aeabi_dmul+0x466>
    b454:	0023      	movs	r3, r4
    b456:	0768      	lsls	r0, r5, #29
    b458:	026d      	lsls	r5, r5, #9
    b45a:	0b2d      	lsrs	r5, r5, #12
    b45c:	2401      	movs	r4, #1
    b45e:	08db      	lsrs	r3, r3, #3
    b460:	4303      	orrs	r3, r0
    b462:	4698      	mov	r8, r3
    b464:	400c      	ands	r4, r1
    b466:	2300      	movs	r3, #0
    b468:	e600      	b.n	b06c <__aeabi_dmul+0xcc>
    b46a:	2500      	movs	r5, #0
    b46c:	e7e3      	b.n	b436 <__aeabi_dmul+0x496>
    b46e:	2280      	movs	r2, #128	; 0x80
    b470:	2401      	movs	r4, #1
    b472:	0312      	lsls	r2, r2, #12
    b474:	4315      	orrs	r5, r2
    b476:	032d      	lsls	r5, r5, #12
    b478:	4698      	mov	r8, r3
    b47a:	0b2d      	lsrs	r5, r5, #12
    b47c:	400c      	ands	r4, r1
    b47e:	4b04      	ldr	r3, [pc, #16]	; (b490 <__aeabi_dmul+0x4f0>)
    b480:	e5f4      	b.n	b06c <__aeabi_dmul+0xcc>
    b482:	46c0      	nop			; (mov r8, r8)
    b484:	000003ff 	.word	0x000003ff
    b488:	feffffff 	.word	0xfeffffff
    b48c:	000007fe 	.word	0x000007fe
    b490:	000007ff 	.word	0x000007ff

0000b494 <__aeabi_d2iz>:
    b494:	030b      	lsls	r3, r1, #12
    b496:	b530      	push	{r4, r5, lr}
    b498:	4d13      	ldr	r5, [pc, #76]	; (b4e8 <__aeabi_d2iz+0x54>)
    b49a:	0b1a      	lsrs	r2, r3, #12
    b49c:	004b      	lsls	r3, r1, #1
    b49e:	0d5b      	lsrs	r3, r3, #21
    b4a0:	0fc9      	lsrs	r1, r1, #31
    b4a2:	2400      	movs	r4, #0
    b4a4:	42ab      	cmp	r3, r5
    b4a6:	dd11      	ble.n	b4cc <__aeabi_d2iz+0x38>
    b4a8:	4c10      	ldr	r4, [pc, #64]	; (b4ec <__aeabi_d2iz+0x58>)
    b4aa:	42a3      	cmp	r3, r4
    b4ac:	dc10      	bgt.n	b4d0 <__aeabi_d2iz+0x3c>
    b4ae:	2480      	movs	r4, #128	; 0x80
    b4b0:	0364      	lsls	r4, r4, #13
    b4b2:	4322      	orrs	r2, r4
    b4b4:	4c0e      	ldr	r4, [pc, #56]	; (b4f0 <__aeabi_d2iz+0x5c>)
    b4b6:	1ae4      	subs	r4, r4, r3
    b4b8:	2c1f      	cmp	r4, #31
    b4ba:	dd0c      	ble.n	b4d6 <__aeabi_d2iz+0x42>
    b4bc:	480d      	ldr	r0, [pc, #52]	; (b4f4 <__aeabi_d2iz+0x60>)
    b4be:	1ac3      	subs	r3, r0, r3
    b4c0:	40da      	lsrs	r2, r3
    b4c2:	0013      	movs	r3, r2
    b4c4:	425c      	negs	r4, r3
    b4c6:	2900      	cmp	r1, #0
    b4c8:	d100      	bne.n	b4cc <__aeabi_d2iz+0x38>
    b4ca:	001c      	movs	r4, r3
    b4cc:	0020      	movs	r0, r4
    b4ce:	bd30      	pop	{r4, r5, pc}
    b4d0:	4b09      	ldr	r3, [pc, #36]	; (b4f8 <__aeabi_d2iz+0x64>)
    b4d2:	18cc      	adds	r4, r1, r3
    b4d4:	e7fa      	b.n	b4cc <__aeabi_d2iz+0x38>
    b4d6:	40e0      	lsrs	r0, r4
    b4d8:	4c08      	ldr	r4, [pc, #32]	; (b4fc <__aeabi_d2iz+0x68>)
    b4da:	46a4      	mov	ip, r4
    b4dc:	4463      	add	r3, ip
    b4de:	409a      	lsls	r2, r3
    b4e0:	0013      	movs	r3, r2
    b4e2:	4303      	orrs	r3, r0
    b4e4:	e7ee      	b.n	b4c4 <__aeabi_d2iz+0x30>
    b4e6:	46c0      	nop			; (mov r8, r8)
    b4e8:	000003fe 	.word	0x000003fe
    b4ec:	0000041d 	.word	0x0000041d
    b4f0:	00000433 	.word	0x00000433
    b4f4:	00000413 	.word	0x00000413
    b4f8:	7fffffff 	.word	0x7fffffff
    b4fc:	fffffbed 	.word	0xfffffbed

0000b500 <__clzsi2>:
    b500:	211c      	movs	r1, #28
    b502:	2301      	movs	r3, #1
    b504:	041b      	lsls	r3, r3, #16
    b506:	4298      	cmp	r0, r3
    b508:	d301      	bcc.n	b50e <__clzsi2+0xe>
    b50a:	0c00      	lsrs	r0, r0, #16
    b50c:	3910      	subs	r1, #16
    b50e:	0a1b      	lsrs	r3, r3, #8
    b510:	4298      	cmp	r0, r3
    b512:	d301      	bcc.n	b518 <__clzsi2+0x18>
    b514:	0a00      	lsrs	r0, r0, #8
    b516:	3908      	subs	r1, #8
    b518:	091b      	lsrs	r3, r3, #4
    b51a:	4298      	cmp	r0, r3
    b51c:	d301      	bcc.n	b522 <__clzsi2+0x22>
    b51e:	0900      	lsrs	r0, r0, #4
    b520:	3904      	subs	r1, #4
    b522:	a202      	add	r2, pc, #8	; (adr r2, b52c <__clzsi2+0x2c>)
    b524:	5c10      	ldrb	r0, [r2, r0]
    b526:	1840      	adds	r0, r0, r1
    b528:	4770      	bx	lr
    b52a:	46c0      	nop			; (mov r8, r8)
    b52c:	02020304 	.word	0x02020304
    b530:	01010101 	.word	0x01010101
	...

0000b53c <__assert_func>:
    b53c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b53e:	001d      	movs	r5, r3
    b540:	4b0a      	ldr	r3, [pc, #40]	; (b56c <__assert_func+0x30>)
    b542:	0006      	movs	r6, r0
    b544:	681b      	ldr	r3, [r3, #0]
    b546:	68d8      	ldr	r0, [r3, #12]
    b548:	2a00      	cmp	r2, #0
    b54a:	d102      	bne.n	b552 <__assert_func+0x16>
    b54c:	4c08      	ldr	r4, [pc, #32]	; (b570 <__assert_func+0x34>)
    b54e:	0023      	movs	r3, r4
    b550:	e001      	b.n	b556 <__assert_func+0x1a>
    b552:	0013      	movs	r3, r2
    b554:	4c07      	ldr	r4, [pc, #28]	; (b574 <__assert_func+0x38>)
    b556:	9302      	str	r3, [sp, #8]
    b558:	9100      	str	r1, [sp, #0]
    b55a:	0033      	movs	r3, r6
    b55c:	002a      	movs	r2, r5
    b55e:	4906      	ldr	r1, [pc, #24]	; (b578 <__assert_func+0x3c>)
    b560:	9401      	str	r4, [sp, #4]
    b562:	f000 f80b 	bl	b57c <fiprintf>
    b566:	f000 fdc3 	bl	c0f0 <abort>
    b56a:	46c0      	nop			; (mov r8, r8)
    b56c:	20000090 	.word	0x20000090
    b570:	0000e037 	.word	0x0000e037
    b574:	0000dffc 	.word	0x0000dffc
    b578:	0000e009 	.word	0x0000e009

0000b57c <fiprintf>:
    b57c:	b40e      	push	{r1, r2, r3}
    b57e:	b503      	push	{r0, r1, lr}
    b580:	0001      	movs	r1, r0
    b582:	ab03      	add	r3, sp, #12
    b584:	4804      	ldr	r0, [pc, #16]	; (b598 <fiprintf+0x1c>)
    b586:	cb04      	ldmia	r3!, {r2}
    b588:	6800      	ldr	r0, [r0, #0]
    b58a:	9301      	str	r3, [sp, #4]
    b58c:	f000 f864 	bl	b658 <_vfiprintf_r>
    b590:	b002      	add	sp, #8
    b592:	bc08      	pop	{r3}
    b594:	b003      	add	sp, #12
    b596:	4718      	bx	r3
    b598:	20000090 	.word	0x20000090

0000b59c <__libc_init_array>:
    b59c:	4b0e      	ldr	r3, [pc, #56]	; (b5d8 <__libc_init_array+0x3c>)
    b59e:	b570      	push	{r4, r5, r6, lr}
    b5a0:	2500      	movs	r5, #0
    b5a2:	001e      	movs	r6, r3
    b5a4:	4c0d      	ldr	r4, [pc, #52]	; (b5dc <__libc_init_array+0x40>)
    b5a6:	1ae4      	subs	r4, r4, r3
    b5a8:	10a4      	asrs	r4, r4, #2
    b5aa:	42a5      	cmp	r5, r4
    b5ac:	d004      	beq.n	b5b8 <__libc_init_array+0x1c>
    b5ae:	00ab      	lsls	r3, r5, #2
    b5b0:	58f3      	ldr	r3, [r6, r3]
    b5b2:	4798      	blx	r3
    b5b4:	3501      	adds	r5, #1
    b5b6:	e7f8      	b.n	b5aa <__libc_init_array+0xe>
    b5b8:	f002 fd8c 	bl	e0d4 <_init>
    b5bc:	4b08      	ldr	r3, [pc, #32]	; (b5e0 <__libc_init_array+0x44>)
    b5be:	2500      	movs	r5, #0
    b5c0:	001e      	movs	r6, r3
    b5c2:	4c08      	ldr	r4, [pc, #32]	; (b5e4 <__libc_init_array+0x48>)
    b5c4:	1ae4      	subs	r4, r4, r3
    b5c6:	10a4      	asrs	r4, r4, #2
    b5c8:	42a5      	cmp	r5, r4
    b5ca:	d004      	beq.n	b5d6 <__libc_init_array+0x3a>
    b5cc:	00ab      	lsls	r3, r5, #2
    b5ce:	58f3      	ldr	r3, [r6, r3]
    b5d0:	4798      	blx	r3
    b5d2:	3501      	adds	r5, #1
    b5d4:	e7f8      	b.n	b5c8 <__libc_init_array+0x2c>
    b5d6:	bd70      	pop	{r4, r5, r6, pc}
    b5d8:	0000e0e0 	.word	0x0000e0e0
    b5dc:	0000e0e0 	.word	0x0000e0e0
    b5e0:	0000e0e0 	.word	0x0000e0e0
    b5e4:	0000e0e4 	.word	0x0000e0e4

0000b5e8 <memcpy>:
    b5e8:	2300      	movs	r3, #0
    b5ea:	b510      	push	{r4, lr}
    b5ec:	429a      	cmp	r2, r3
    b5ee:	d003      	beq.n	b5f8 <memcpy+0x10>
    b5f0:	5ccc      	ldrb	r4, [r1, r3]
    b5f2:	54c4      	strb	r4, [r0, r3]
    b5f4:	3301      	adds	r3, #1
    b5f6:	e7f9      	b.n	b5ec <memcpy+0x4>
    b5f8:	bd10      	pop	{r4, pc}

0000b5fa <memset>:
    b5fa:	0003      	movs	r3, r0
    b5fc:	1882      	adds	r2, r0, r2
    b5fe:	4293      	cmp	r3, r2
    b600:	d002      	beq.n	b608 <memset+0xe>
    b602:	7019      	strb	r1, [r3, #0]
    b604:	3301      	adds	r3, #1
    b606:	e7fa      	b.n	b5fe <memset+0x4>
    b608:	4770      	bx	lr

0000b60a <__sfputc_r>:
    b60a:	6893      	ldr	r3, [r2, #8]
    b60c:	b510      	push	{r4, lr}
    b60e:	3b01      	subs	r3, #1
    b610:	6093      	str	r3, [r2, #8]
    b612:	2b00      	cmp	r3, #0
    b614:	da05      	bge.n	b622 <__sfputc_r+0x18>
    b616:	6994      	ldr	r4, [r2, #24]
    b618:	42a3      	cmp	r3, r4
    b61a:	db08      	blt.n	b62e <__sfputc_r+0x24>
    b61c:	b2cb      	uxtb	r3, r1
    b61e:	2b0a      	cmp	r3, #10
    b620:	d005      	beq.n	b62e <__sfputc_r+0x24>
    b622:	6813      	ldr	r3, [r2, #0]
    b624:	1c58      	adds	r0, r3, #1
    b626:	6010      	str	r0, [r2, #0]
    b628:	7019      	strb	r1, [r3, #0]
    b62a:	b2c8      	uxtb	r0, r1
    b62c:	e001      	b.n	b632 <__sfputc_r+0x28>
    b62e:	f000 fc91 	bl	bf54 <__swbuf_r>
    b632:	bd10      	pop	{r4, pc}

0000b634 <__sfputs_r>:
    b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b636:	0006      	movs	r6, r0
    b638:	000f      	movs	r7, r1
    b63a:	0014      	movs	r4, r2
    b63c:	18d5      	adds	r5, r2, r3
    b63e:	42ac      	cmp	r4, r5
    b640:	d008      	beq.n	b654 <__sfputs_r+0x20>
    b642:	7821      	ldrb	r1, [r4, #0]
    b644:	003a      	movs	r2, r7
    b646:	0030      	movs	r0, r6
    b648:	f7ff ffdf 	bl	b60a <__sfputc_r>
    b64c:	3401      	adds	r4, #1
    b64e:	1c43      	adds	r3, r0, #1
    b650:	d1f5      	bne.n	b63e <__sfputs_r+0xa>
    b652:	e000      	b.n	b656 <__sfputs_r+0x22>
    b654:	2000      	movs	r0, #0
    b656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b658 <_vfiprintf_r>:
    b658:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65a:	b09f      	sub	sp, #124	; 0x7c
    b65c:	0006      	movs	r6, r0
    b65e:	000f      	movs	r7, r1
    b660:	9202      	str	r2, [sp, #8]
    b662:	9305      	str	r3, [sp, #20]
    b664:	2800      	cmp	r0, #0
    b666:	d004      	beq.n	b672 <_vfiprintf_r+0x1a>
    b668:	6983      	ldr	r3, [r0, #24]
    b66a:	2b00      	cmp	r3, #0
    b66c:	d101      	bne.n	b672 <_vfiprintf_r+0x1a>
    b66e:	f000 fe3b 	bl	c2e8 <__sinit>
    b672:	4b7f      	ldr	r3, [pc, #508]	; (b870 <_vfiprintf_r+0x218>)
    b674:	429f      	cmp	r7, r3
    b676:	d101      	bne.n	b67c <_vfiprintf_r+0x24>
    b678:	6877      	ldr	r7, [r6, #4]
    b67a:	e008      	b.n	b68e <_vfiprintf_r+0x36>
    b67c:	4b7d      	ldr	r3, [pc, #500]	; (b874 <_vfiprintf_r+0x21c>)
    b67e:	429f      	cmp	r7, r3
    b680:	d101      	bne.n	b686 <_vfiprintf_r+0x2e>
    b682:	68b7      	ldr	r7, [r6, #8]
    b684:	e003      	b.n	b68e <_vfiprintf_r+0x36>
    b686:	4b7c      	ldr	r3, [pc, #496]	; (b878 <_vfiprintf_r+0x220>)
    b688:	429f      	cmp	r7, r3
    b68a:	d100      	bne.n	b68e <_vfiprintf_r+0x36>
    b68c:	68f7      	ldr	r7, [r6, #12]
    b68e:	89bb      	ldrh	r3, [r7, #12]
    b690:	071b      	lsls	r3, r3, #28
    b692:	d50a      	bpl.n	b6aa <_vfiprintf_r+0x52>
    b694:	693b      	ldr	r3, [r7, #16]
    b696:	2b00      	cmp	r3, #0
    b698:	d007      	beq.n	b6aa <_vfiprintf_r+0x52>
    b69a:	2300      	movs	r3, #0
    b69c:	ad06      	add	r5, sp, #24
    b69e:	616b      	str	r3, [r5, #20]
    b6a0:	3320      	adds	r3, #32
    b6a2:	766b      	strb	r3, [r5, #25]
    b6a4:	3310      	adds	r3, #16
    b6a6:	76ab      	strb	r3, [r5, #26]
    b6a8:	e03d      	b.n	b726 <_vfiprintf_r+0xce>
    b6aa:	0039      	movs	r1, r7
    b6ac:	0030      	movs	r0, r6
    b6ae:	f000 fca9 	bl	c004 <__swsetup_r>
    b6b2:	2800      	cmp	r0, #0
    b6b4:	d0f1      	beq.n	b69a <_vfiprintf_r+0x42>
    b6b6:	2001      	movs	r0, #1
    b6b8:	4240      	negs	r0, r0
    b6ba:	e0d6      	b.n	b86a <_vfiprintf_r+0x212>
    b6bc:	9a05      	ldr	r2, [sp, #20]
    b6be:	1d11      	adds	r1, r2, #4
    b6c0:	6812      	ldr	r2, [r2, #0]
    b6c2:	9105      	str	r1, [sp, #20]
    b6c4:	2a00      	cmp	r2, #0
    b6c6:	da00      	bge.n	b6ca <_vfiprintf_r+0x72>
    b6c8:	e07f      	b.n	b7ca <_vfiprintf_r+0x172>
    b6ca:	9209      	str	r2, [sp, #36]	; 0x24
    b6cc:	3401      	adds	r4, #1
    b6ce:	7823      	ldrb	r3, [r4, #0]
    b6d0:	2b2e      	cmp	r3, #46	; 0x2e
    b6d2:	d100      	bne.n	b6d6 <_vfiprintf_r+0x7e>
    b6d4:	e08d      	b.n	b7f2 <_vfiprintf_r+0x19a>
    b6d6:	7821      	ldrb	r1, [r4, #0]
    b6d8:	2203      	movs	r2, #3
    b6da:	4868      	ldr	r0, [pc, #416]	; (b87c <_vfiprintf_r+0x224>)
    b6dc:	f000 ff06 	bl	c4ec <memchr>
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d007      	beq.n	b6f4 <_vfiprintf_r+0x9c>
    b6e4:	4b65      	ldr	r3, [pc, #404]	; (b87c <_vfiprintf_r+0x224>)
    b6e6:	682a      	ldr	r2, [r5, #0]
    b6e8:	1ac0      	subs	r0, r0, r3
    b6ea:	2340      	movs	r3, #64	; 0x40
    b6ec:	4083      	lsls	r3, r0
    b6ee:	4313      	orrs	r3, r2
    b6f0:	602b      	str	r3, [r5, #0]
    b6f2:	3401      	adds	r4, #1
    b6f4:	7821      	ldrb	r1, [r4, #0]
    b6f6:	1c63      	adds	r3, r4, #1
    b6f8:	2206      	movs	r2, #6
    b6fa:	4861      	ldr	r0, [pc, #388]	; (b880 <_vfiprintf_r+0x228>)
    b6fc:	9302      	str	r3, [sp, #8]
    b6fe:	7629      	strb	r1, [r5, #24]
    b700:	f000 fef4 	bl	c4ec <memchr>
    b704:	2800      	cmp	r0, #0
    b706:	d100      	bne.n	b70a <_vfiprintf_r+0xb2>
    b708:	e09d      	b.n	b846 <_vfiprintf_r+0x1ee>
    b70a:	4b5e      	ldr	r3, [pc, #376]	; (b884 <_vfiprintf_r+0x22c>)
    b70c:	2b00      	cmp	r3, #0
    b70e:	d000      	beq.n	b712 <_vfiprintf_r+0xba>
    b710:	e090      	b.n	b834 <_vfiprintf_r+0x1dc>
    b712:	2207      	movs	r2, #7
    b714:	9b05      	ldr	r3, [sp, #20]
    b716:	3307      	adds	r3, #7
    b718:	4393      	bics	r3, r2
    b71a:	3308      	adds	r3, #8
    b71c:	9305      	str	r3, [sp, #20]
    b71e:	696b      	ldr	r3, [r5, #20]
    b720:	9a03      	ldr	r2, [sp, #12]
    b722:	189b      	adds	r3, r3, r2
    b724:	616b      	str	r3, [r5, #20]
    b726:	9c02      	ldr	r4, [sp, #8]
    b728:	7823      	ldrb	r3, [r4, #0]
    b72a:	2b00      	cmp	r3, #0
    b72c:	d104      	bne.n	b738 <_vfiprintf_r+0xe0>
    b72e:	9b02      	ldr	r3, [sp, #8]
    b730:	1ae3      	subs	r3, r4, r3
    b732:	9304      	str	r3, [sp, #16]
    b734:	d012      	beq.n	b75c <_vfiprintf_r+0x104>
    b736:	e003      	b.n	b740 <_vfiprintf_r+0xe8>
    b738:	2b25      	cmp	r3, #37	; 0x25
    b73a:	d0f8      	beq.n	b72e <_vfiprintf_r+0xd6>
    b73c:	3401      	adds	r4, #1
    b73e:	e7f3      	b.n	b728 <_vfiprintf_r+0xd0>
    b740:	9b04      	ldr	r3, [sp, #16]
    b742:	9a02      	ldr	r2, [sp, #8]
    b744:	0039      	movs	r1, r7
    b746:	0030      	movs	r0, r6
    b748:	f7ff ff74 	bl	b634 <__sfputs_r>
    b74c:	1c43      	adds	r3, r0, #1
    b74e:	d100      	bne.n	b752 <_vfiprintf_r+0xfa>
    b750:	e086      	b.n	b860 <_vfiprintf_r+0x208>
    b752:	696a      	ldr	r2, [r5, #20]
    b754:	9b04      	ldr	r3, [sp, #16]
    b756:	4694      	mov	ip, r2
    b758:	4463      	add	r3, ip
    b75a:	616b      	str	r3, [r5, #20]
    b75c:	7823      	ldrb	r3, [r4, #0]
    b75e:	2b00      	cmp	r3, #0
    b760:	d07e      	beq.n	b860 <_vfiprintf_r+0x208>
    b762:	2201      	movs	r2, #1
    b764:	2300      	movs	r3, #0
    b766:	4252      	negs	r2, r2
    b768:	606a      	str	r2, [r5, #4]
    b76a:	a902      	add	r1, sp, #8
    b76c:	3254      	adds	r2, #84	; 0x54
    b76e:	1852      	adds	r2, r2, r1
    b770:	3401      	adds	r4, #1
    b772:	602b      	str	r3, [r5, #0]
    b774:	60eb      	str	r3, [r5, #12]
    b776:	60ab      	str	r3, [r5, #8]
    b778:	7013      	strb	r3, [r2, #0]
    b77a:	65ab      	str	r3, [r5, #88]	; 0x58
    b77c:	7821      	ldrb	r1, [r4, #0]
    b77e:	2205      	movs	r2, #5
    b780:	4841      	ldr	r0, [pc, #260]	; (b888 <_vfiprintf_r+0x230>)
    b782:	f000 feb3 	bl	c4ec <memchr>
    b786:	2800      	cmp	r0, #0
    b788:	d008      	beq.n	b79c <_vfiprintf_r+0x144>
    b78a:	4b3f      	ldr	r3, [pc, #252]	; (b888 <_vfiprintf_r+0x230>)
    b78c:	682a      	ldr	r2, [r5, #0]
    b78e:	1ac0      	subs	r0, r0, r3
    b790:	2301      	movs	r3, #1
    b792:	4083      	lsls	r3, r0
    b794:	4313      	orrs	r3, r2
    b796:	602b      	str	r3, [r5, #0]
    b798:	3401      	adds	r4, #1
    b79a:	e7ef      	b.n	b77c <_vfiprintf_r+0x124>
    b79c:	682b      	ldr	r3, [r5, #0]
    b79e:	06da      	lsls	r2, r3, #27
    b7a0:	d504      	bpl.n	b7ac <_vfiprintf_r+0x154>
    b7a2:	2253      	movs	r2, #83	; 0x53
    b7a4:	2120      	movs	r1, #32
    b7a6:	a802      	add	r0, sp, #8
    b7a8:	1812      	adds	r2, r2, r0
    b7aa:	7011      	strb	r1, [r2, #0]
    b7ac:	071a      	lsls	r2, r3, #28
    b7ae:	d504      	bpl.n	b7ba <_vfiprintf_r+0x162>
    b7b0:	2253      	movs	r2, #83	; 0x53
    b7b2:	212b      	movs	r1, #43	; 0x2b
    b7b4:	a802      	add	r0, sp, #8
    b7b6:	1812      	adds	r2, r2, r0
    b7b8:	7011      	strb	r1, [r2, #0]
    b7ba:	7822      	ldrb	r2, [r4, #0]
    b7bc:	2a2a      	cmp	r2, #42	; 0x2a
    b7be:	d100      	bne.n	b7c2 <_vfiprintf_r+0x16a>
    b7c0:	e77c      	b.n	b6bc <_vfiprintf_r+0x64>
    b7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7c4:	2000      	movs	r0, #0
    b7c6:	210a      	movs	r1, #10
    b7c8:	e005      	b.n	b7d6 <_vfiprintf_r+0x17e>
    b7ca:	4252      	negs	r2, r2
    b7cc:	60ea      	str	r2, [r5, #12]
    b7ce:	2202      	movs	r2, #2
    b7d0:	4313      	orrs	r3, r2
    b7d2:	602b      	str	r3, [r5, #0]
    b7d4:	e77a      	b.n	b6cc <_vfiprintf_r+0x74>
    b7d6:	7822      	ldrb	r2, [r4, #0]
    b7d8:	3a30      	subs	r2, #48	; 0x30
    b7da:	2a09      	cmp	r2, #9
    b7dc:	d804      	bhi.n	b7e8 <_vfiprintf_r+0x190>
    b7de:	434b      	muls	r3, r1
    b7e0:	3401      	adds	r4, #1
    b7e2:	189b      	adds	r3, r3, r2
    b7e4:	2001      	movs	r0, #1
    b7e6:	e7f6      	b.n	b7d6 <_vfiprintf_r+0x17e>
    b7e8:	2800      	cmp	r0, #0
    b7ea:	d100      	bne.n	b7ee <_vfiprintf_r+0x196>
    b7ec:	e76f      	b.n	b6ce <_vfiprintf_r+0x76>
    b7ee:	9309      	str	r3, [sp, #36]	; 0x24
    b7f0:	e76d      	b.n	b6ce <_vfiprintf_r+0x76>
    b7f2:	7863      	ldrb	r3, [r4, #1]
    b7f4:	2b2a      	cmp	r3, #42	; 0x2a
    b7f6:	d10a      	bne.n	b80e <_vfiprintf_r+0x1b6>
    b7f8:	9b05      	ldr	r3, [sp, #20]
    b7fa:	3402      	adds	r4, #2
    b7fc:	1d1a      	adds	r2, r3, #4
    b7fe:	681b      	ldr	r3, [r3, #0]
    b800:	9205      	str	r2, [sp, #20]
    b802:	2b00      	cmp	r3, #0
    b804:	da01      	bge.n	b80a <_vfiprintf_r+0x1b2>
    b806:	2301      	movs	r3, #1
    b808:	425b      	negs	r3, r3
    b80a:	9307      	str	r3, [sp, #28]
    b80c:	e763      	b.n	b6d6 <_vfiprintf_r+0x7e>
    b80e:	2300      	movs	r3, #0
    b810:	200a      	movs	r0, #10
    b812:	001a      	movs	r2, r3
    b814:	3401      	adds	r4, #1
    b816:	606b      	str	r3, [r5, #4]
    b818:	7821      	ldrb	r1, [r4, #0]
    b81a:	3930      	subs	r1, #48	; 0x30
    b81c:	2909      	cmp	r1, #9
    b81e:	d804      	bhi.n	b82a <_vfiprintf_r+0x1d2>
    b820:	4342      	muls	r2, r0
    b822:	3401      	adds	r4, #1
    b824:	1852      	adds	r2, r2, r1
    b826:	2301      	movs	r3, #1
    b828:	e7f6      	b.n	b818 <_vfiprintf_r+0x1c0>
    b82a:	2b00      	cmp	r3, #0
    b82c:	d100      	bne.n	b830 <_vfiprintf_r+0x1d8>
    b82e:	e752      	b.n	b6d6 <_vfiprintf_r+0x7e>
    b830:	9207      	str	r2, [sp, #28]
    b832:	e750      	b.n	b6d6 <_vfiprintf_r+0x7e>
    b834:	ab05      	add	r3, sp, #20
    b836:	9300      	str	r3, [sp, #0]
    b838:	003a      	movs	r2, r7
    b83a:	4b14      	ldr	r3, [pc, #80]	; (b88c <_vfiprintf_r+0x234>)
    b83c:	0029      	movs	r1, r5
    b83e:	0030      	movs	r0, r6
    b840:	e000      	b.n	b844 <_vfiprintf_r+0x1ec>
    b842:	bf00      	nop
    b844:	e007      	b.n	b856 <_vfiprintf_r+0x1fe>
    b846:	ab05      	add	r3, sp, #20
    b848:	9300      	str	r3, [sp, #0]
    b84a:	003a      	movs	r2, r7
    b84c:	4b0f      	ldr	r3, [pc, #60]	; (b88c <_vfiprintf_r+0x234>)
    b84e:	0029      	movs	r1, r5
    b850:	0030      	movs	r0, r6
    b852:	f000 f88b 	bl	b96c <_printf_i>
    b856:	9003      	str	r0, [sp, #12]
    b858:	9b03      	ldr	r3, [sp, #12]
    b85a:	3301      	adds	r3, #1
    b85c:	d000      	beq.n	b860 <_vfiprintf_r+0x208>
    b85e:	e75e      	b.n	b71e <_vfiprintf_r+0xc6>
    b860:	89bb      	ldrh	r3, [r7, #12]
    b862:	065b      	lsls	r3, r3, #25
    b864:	d500      	bpl.n	b868 <_vfiprintf_r+0x210>
    b866:	e726      	b.n	b6b6 <_vfiprintf_r+0x5e>
    b868:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b86a:	b01f      	add	sp, #124	; 0x7c
    b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b86e:	46c0      	nop			; (mov r8, r8)
    b870:	0000e074 	.word	0x0000e074
    b874:	0000e094 	.word	0x0000e094
    b878:	0000e0b4 	.word	0x0000e0b4
    b87c:	0000e046 	.word	0x0000e046
    b880:	0000e04a 	.word	0x0000e04a
    b884:	00000000 	.word	0x00000000
    b888:	0000e040 	.word	0x0000e040
    b88c:	0000b635 	.word	0x0000b635

0000b890 <_printf_common>:
    b890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    b892:	0017      	movs	r7, r2
    b894:	9301      	str	r3, [sp, #4]
    b896:	688a      	ldr	r2, [r1, #8]
    b898:	690b      	ldr	r3, [r1, #16]
    b89a:	9000      	str	r0, [sp, #0]
    b89c:	000c      	movs	r4, r1
    b89e:	4293      	cmp	r3, r2
    b8a0:	da00      	bge.n	b8a4 <_printf_common+0x14>
    b8a2:	0013      	movs	r3, r2
    b8a4:	0022      	movs	r2, r4
    b8a6:	603b      	str	r3, [r7, #0]
    b8a8:	3243      	adds	r2, #67	; 0x43
    b8aa:	7812      	ldrb	r2, [r2, #0]
    b8ac:	2a00      	cmp	r2, #0
    b8ae:	d001      	beq.n	b8b4 <_printf_common+0x24>
    b8b0:	3301      	adds	r3, #1
    b8b2:	603b      	str	r3, [r7, #0]
    b8b4:	6823      	ldr	r3, [r4, #0]
    b8b6:	069b      	lsls	r3, r3, #26
    b8b8:	d502      	bpl.n	b8c0 <_printf_common+0x30>
    b8ba:	683b      	ldr	r3, [r7, #0]
    b8bc:	3302      	adds	r3, #2
    b8be:	603b      	str	r3, [r7, #0]
    b8c0:	2506      	movs	r5, #6
    b8c2:	6823      	ldr	r3, [r4, #0]
    b8c4:	401d      	ands	r5, r3
    b8c6:	d01e      	beq.n	b906 <_printf_common+0x76>
    b8c8:	0023      	movs	r3, r4
    b8ca:	3343      	adds	r3, #67	; 0x43
    b8cc:	781b      	ldrb	r3, [r3, #0]
    b8ce:	1e5a      	subs	r2, r3, #1
    b8d0:	4193      	sbcs	r3, r2
    b8d2:	6822      	ldr	r2, [r4, #0]
    b8d4:	0692      	lsls	r2, r2, #26
    b8d6:	d51c      	bpl.n	b912 <_printf_common+0x82>
    b8d8:	2030      	movs	r0, #48	; 0x30
    b8da:	18e1      	adds	r1, r4, r3
    b8dc:	3143      	adds	r1, #67	; 0x43
    b8de:	7008      	strb	r0, [r1, #0]
    b8e0:	0021      	movs	r1, r4
    b8e2:	1c5a      	adds	r2, r3, #1
    b8e4:	3145      	adds	r1, #69	; 0x45
    b8e6:	7809      	ldrb	r1, [r1, #0]
    b8e8:	18a2      	adds	r2, r4, r2
    b8ea:	3243      	adds	r2, #67	; 0x43
    b8ec:	3302      	adds	r3, #2
    b8ee:	7011      	strb	r1, [r2, #0]
    b8f0:	e00f      	b.n	b912 <_printf_common+0x82>
    b8f2:	0022      	movs	r2, r4
    b8f4:	2301      	movs	r3, #1
    b8f6:	3219      	adds	r2, #25
    b8f8:	9901      	ldr	r1, [sp, #4]
    b8fa:	9800      	ldr	r0, [sp, #0]
    b8fc:	9e08      	ldr	r6, [sp, #32]
    b8fe:	47b0      	blx	r6
    b900:	1c43      	adds	r3, r0, #1
    b902:	d00e      	beq.n	b922 <_printf_common+0x92>
    b904:	3501      	adds	r5, #1
    b906:	68e3      	ldr	r3, [r4, #12]
    b908:	683a      	ldr	r2, [r7, #0]
    b90a:	1a9b      	subs	r3, r3, r2
    b90c:	429d      	cmp	r5, r3
    b90e:	dbf0      	blt.n	b8f2 <_printf_common+0x62>
    b910:	e7da      	b.n	b8c8 <_printf_common+0x38>
    b912:	0022      	movs	r2, r4
    b914:	9901      	ldr	r1, [sp, #4]
    b916:	3243      	adds	r2, #67	; 0x43
    b918:	9800      	ldr	r0, [sp, #0]
    b91a:	9d08      	ldr	r5, [sp, #32]
    b91c:	47a8      	blx	r5
    b91e:	1c43      	adds	r3, r0, #1
    b920:	d102      	bne.n	b928 <_printf_common+0x98>
    b922:	2001      	movs	r0, #1
    b924:	4240      	negs	r0, r0
    b926:	e020      	b.n	b96a <_printf_common+0xda>
    b928:	2306      	movs	r3, #6
    b92a:	6820      	ldr	r0, [r4, #0]
    b92c:	68e1      	ldr	r1, [r4, #12]
    b92e:	683a      	ldr	r2, [r7, #0]
    b930:	4003      	ands	r3, r0
    b932:	2500      	movs	r5, #0
    b934:	2b04      	cmp	r3, #4
    b936:	d103      	bne.n	b940 <_printf_common+0xb0>
    b938:	1a8d      	subs	r5, r1, r2
    b93a:	43eb      	mvns	r3, r5
    b93c:	17db      	asrs	r3, r3, #31
    b93e:	401d      	ands	r5, r3
    b940:	68a3      	ldr	r3, [r4, #8]
    b942:	6922      	ldr	r2, [r4, #16]
    b944:	4293      	cmp	r3, r2
    b946:	dd01      	ble.n	b94c <_printf_common+0xbc>
    b948:	1a9b      	subs	r3, r3, r2
    b94a:	18ed      	adds	r5, r5, r3
    b94c:	2700      	movs	r7, #0
    b94e:	42bd      	cmp	r5, r7
    b950:	d00a      	beq.n	b968 <_printf_common+0xd8>
    b952:	0022      	movs	r2, r4
    b954:	2301      	movs	r3, #1
    b956:	321a      	adds	r2, #26
    b958:	9901      	ldr	r1, [sp, #4]
    b95a:	9800      	ldr	r0, [sp, #0]
    b95c:	9e08      	ldr	r6, [sp, #32]
    b95e:	47b0      	blx	r6
    b960:	1c43      	adds	r3, r0, #1
    b962:	d0de      	beq.n	b922 <_printf_common+0x92>
    b964:	3701      	adds	r7, #1
    b966:	e7f2      	b.n	b94e <_printf_common+0xbe>
    b968:	2000      	movs	r0, #0
    b96a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000b96c <_printf_i>:
    b96c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b96e:	b08b      	sub	sp, #44	; 0x2c
    b970:	9206      	str	r2, [sp, #24]
    b972:	000a      	movs	r2, r1
    b974:	3243      	adds	r2, #67	; 0x43
    b976:	9307      	str	r3, [sp, #28]
    b978:	9005      	str	r0, [sp, #20]
    b97a:	9204      	str	r2, [sp, #16]
    b97c:	7e0a      	ldrb	r2, [r1, #24]
    b97e:	000c      	movs	r4, r1
    b980:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b982:	2a6e      	cmp	r2, #110	; 0x6e
    b984:	d100      	bne.n	b988 <_printf_i+0x1c>
    b986:	e0ab      	b.n	bae0 <_printf_i+0x174>
    b988:	d811      	bhi.n	b9ae <_printf_i+0x42>
    b98a:	2a63      	cmp	r2, #99	; 0x63
    b98c:	d022      	beq.n	b9d4 <_printf_i+0x68>
    b98e:	d809      	bhi.n	b9a4 <_printf_i+0x38>
    b990:	2a00      	cmp	r2, #0
    b992:	d100      	bne.n	b996 <_printf_i+0x2a>
    b994:	e0b5      	b.n	bb02 <_printf_i+0x196>
    b996:	2a58      	cmp	r2, #88	; 0x58
    b998:	d000      	beq.n	b99c <_printf_i+0x30>
    b99a:	e0c5      	b.n	bb28 <_printf_i+0x1bc>
    b99c:	3145      	adds	r1, #69	; 0x45
    b99e:	700a      	strb	r2, [r1, #0]
    b9a0:	4a81      	ldr	r2, [pc, #516]	; (bba8 <_printf_i+0x23c>)
    b9a2:	e04f      	b.n	ba44 <_printf_i+0xd8>
    b9a4:	2a64      	cmp	r2, #100	; 0x64
    b9a6:	d01d      	beq.n	b9e4 <_printf_i+0x78>
    b9a8:	2a69      	cmp	r2, #105	; 0x69
    b9aa:	d01b      	beq.n	b9e4 <_printf_i+0x78>
    b9ac:	e0bc      	b.n	bb28 <_printf_i+0x1bc>
    b9ae:	2a73      	cmp	r2, #115	; 0x73
    b9b0:	d100      	bne.n	b9b4 <_printf_i+0x48>
    b9b2:	e0aa      	b.n	bb0a <_printf_i+0x19e>
    b9b4:	d809      	bhi.n	b9ca <_printf_i+0x5e>
    b9b6:	2a6f      	cmp	r2, #111	; 0x6f
    b9b8:	d029      	beq.n	ba0e <_printf_i+0xa2>
    b9ba:	2a70      	cmp	r2, #112	; 0x70
    b9bc:	d000      	beq.n	b9c0 <_printf_i+0x54>
    b9be:	e0b3      	b.n	bb28 <_printf_i+0x1bc>
    b9c0:	2220      	movs	r2, #32
    b9c2:	6809      	ldr	r1, [r1, #0]
    b9c4:	430a      	orrs	r2, r1
    b9c6:	6022      	str	r2, [r4, #0]
    b9c8:	e037      	b.n	ba3a <_printf_i+0xce>
    b9ca:	2a75      	cmp	r2, #117	; 0x75
    b9cc:	d01f      	beq.n	ba0e <_printf_i+0xa2>
    b9ce:	2a78      	cmp	r2, #120	; 0x78
    b9d0:	d033      	beq.n	ba3a <_printf_i+0xce>
    b9d2:	e0a9      	b.n	bb28 <_printf_i+0x1bc>
    b9d4:	000e      	movs	r6, r1
    b9d6:	681a      	ldr	r2, [r3, #0]
    b9d8:	3642      	adds	r6, #66	; 0x42
    b9da:	1d11      	adds	r1, r2, #4
    b9dc:	6019      	str	r1, [r3, #0]
    b9de:	6813      	ldr	r3, [r2, #0]
    b9e0:	7033      	strb	r3, [r6, #0]
    b9e2:	e0a4      	b.n	bb2e <_printf_i+0x1c2>
    b9e4:	6821      	ldr	r1, [r4, #0]
    b9e6:	681a      	ldr	r2, [r3, #0]
    b9e8:	0608      	lsls	r0, r1, #24
    b9ea:	d406      	bmi.n	b9fa <_printf_i+0x8e>
    b9ec:	0649      	lsls	r1, r1, #25
    b9ee:	d504      	bpl.n	b9fa <_printf_i+0x8e>
    b9f0:	1d11      	adds	r1, r2, #4
    b9f2:	6019      	str	r1, [r3, #0]
    b9f4:	2300      	movs	r3, #0
    b9f6:	5ed5      	ldrsh	r5, [r2, r3]
    b9f8:	e002      	b.n	ba00 <_printf_i+0x94>
    b9fa:	1d11      	adds	r1, r2, #4
    b9fc:	6019      	str	r1, [r3, #0]
    b9fe:	6815      	ldr	r5, [r2, #0]
    ba00:	2d00      	cmp	r5, #0
    ba02:	da3b      	bge.n	ba7c <_printf_i+0x110>
    ba04:	232d      	movs	r3, #45	; 0x2d
    ba06:	9a04      	ldr	r2, [sp, #16]
    ba08:	426d      	negs	r5, r5
    ba0a:	7013      	strb	r3, [r2, #0]
    ba0c:	e036      	b.n	ba7c <_printf_i+0x110>
    ba0e:	6821      	ldr	r1, [r4, #0]
    ba10:	681a      	ldr	r2, [r3, #0]
    ba12:	0608      	lsls	r0, r1, #24
    ba14:	d406      	bmi.n	ba24 <_printf_i+0xb8>
    ba16:	0649      	lsls	r1, r1, #25
    ba18:	d504      	bpl.n	ba24 <_printf_i+0xb8>
    ba1a:	6815      	ldr	r5, [r2, #0]
    ba1c:	1d11      	adds	r1, r2, #4
    ba1e:	6019      	str	r1, [r3, #0]
    ba20:	b2ad      	uxth	r5, r5
    ba22:	e002      	b.n	ba2a <_printf_i+0xbe>
    ba24:	1d11      	adds	r1, r2, #4
    ba26:	6019      	str	r1, [r3, #0]
    ba28:	6815      	ldr	r5, [r2, #0]
    ba2a:	4b5f      	ldr	r3, [pc, #380]	; (bba8 <_printf_i+0x23c>)
    ba2c:	7e22      	ldrb	r2, [r4, #24]
    ba2e:	9303      	str	r3, [sp, #12]
    ba30:	2708      	movs	r7, #8
    ba32:	2a6f      	cmp	r2, #111	; 0x6f
    ba34:	d01d      	beq.n	ba72 <_printf_i+0x106>
    ba36:	270a      	movs	r7, #10
    ba38:	e01b      	b.n	ba72 <_printf_i+0x106>
    ba3a:	0022      	movs	r2, r4
    ba3c:	2178      	movs	r1, #120	; 0x78
    ba3e:	3245      	adds	r2, #69	; 0x45
    ba40:	7011      	strb	r1, [r2, #0]
    ba42:	4a5a      	ldr	r2, [pc, #360]	; (bbac <_printf_i+0x240>)
    ba44:	6819      	ldr	r1, [r3, #0]
    ba46:	9203      	str	r2, [sp, #12]
    ba48:	1d08      	adds	r0, r1, #4
    ba4a:	6822      	ldr	r2, [r4, #0]
    ba4c:	6018      	str	r0, [r3, #0]
    ba4e:	680d      	ldr	r5, [r1, #0]
    ba50:	0610      	lsls	r0, r2, #24
    ba52:	d402      	bmi.n	ba5a <_printf_i+0xee>
    ba54:	0650      	lsls	r0, r2, #25
    ba56:	d500      	bpl.n	ba5a <_printf_i+0xee>
    ba58:	b2ad      	uxth	r5, r5
    ba5a:	07d3      	lsls	r3, r2, #31
    ba5c:	d502      	bpl.n	ba64 <_printf_i+0xf8>
    ba5e:	2320      	movs	r3, #32
    ba60:	431a      	orrs	r2, r3
    ba62:	6022      	str	r2, [r4, #0]
    ba64:	2710      	movs	r7, #16
    ba66:	2d00      	cmp	r5, #0
    ba68:	d103      	bne.n	ba72 <_printf_i+0x106>
    ba6a:	2320      	movs	r3, #32
    ba6c:	6822      	ldr	r2, [r4, #0]
    ba6e:	439a      	bics	r2, r3
    ba70:	6022      	str	r2, [r4, #0]
    ba72:	0023      	movs	r3, r4
    ba74:	2200      	movs	r2, #0
    ba76:	3343      	adds	r3, #67	; 0x43
    ba78:	701a      	strb	r2, [r3, #0]
    ba7a:	e002      	b.n	ba82 <_printf_i+0x116>
    ba7c:	270a      	movs	r7, #10
    ba7e:	4b4a      	ldr	r3, [pc, #296]	; (bba8 <_printf_i+0x23c>)
    ba80:	9303      	str	r3, [sp, #12]
    ba82:	6863      	ldr	r3, [r4, #4]
    ba84:	60a3      	str	r3, [r4, #8]
    ba86:	2b00      	cmp	r3, #0
    ba88:	db09      	blt.n	ba9e <_printf_i+0x132>
    ba8a:	2204      	movs	r2, #4
    ba8c:	6821      	ldr	r1, [r4, #0]
    ba8e:	4391      	bics	r1, r2
    ba90:	6021      	str	r1, [r4, #0]
    ba92:	2d00      	cmp	r5, #0
    ba94:	d105      	bne.n	baa2 <_printf_i+0x136>
    ba96:	9e04      	ldr	r6, [sp, #16]
    ba98:	2b00      	cmp	r3, #0
    ba9a:	d011      	beq.n	bac0 <_printf_i+0x154>
    ba9c:	e07b      	b.n	bb96 <_printf_i+0x22a>
    ba9e:	2d00      	cmp	r5, #0
    baa0:	d079      	beq.n	bb96 <_printf_i+0x22a>
    baa2:	9e04      	ldr	r6, [sp, #16]
    baa4:	0028      	movs	r0, r5
    baa6:	0039      	movs	r1, r7
    baa8:	f7ff f95e 	bl	ad68 <__aeabi_uidivmod>
    baac:	9b03      	ldr	r3, [sp, #12]
    baae:	3e01      	subs	r6, #1
    bab0:	5c5b      	ldrb	r3, [r3, r1]
    bab2:	0028      	movs	r0, r5
    bab4:	7033      	strb	r3, [r6, #0]
    bab6:	0039      	movs	r1, r7
    bab8:	f7ff f8d0 	bl	ac5c <__aeabi_uidiv>
    babc:	1e05      	subs	r5, r0, #0
    babe:	d1f1      	bne.n	baa4 <_printf_i+0x138>
    bac0:	2f08      	cmp	r7, #8
    bac2:	d109      	bne.n	bad8 <_printf_i+0x16c>
    bac4:	6823      	ldr	r3, [r4, #0]
    bac6:	07db      	lsls	r3, r3, #31
    bac8:	d506      	bpl.n	bad8 <_printf_i+0x16c>
    baca:	6863      	ldr	r3, [r4, #4]
    bacc:	6922      	ldr	r2, [r4, #16]
    bace:	4293      	cmp	r3, r2
    bad0:	dc02      	bgt.n	bad8 <_printf_i+0x16c>
    bad2:	2330      	movs	r3, #48	; 0x30
    bad4:	3e01      	subs	r6, #1
    bad6:	7033      	strb	r3, [r6, #0]
    bad8:	9b04      	ldr	r3, [sp, #16]
    bada:	1b9b      	subs	r3, r3, r6
    badc:	6123      	str	r3, [r4, #16]
    bade:	e02b      	b.n	bb38 <_printf_i+0x1cc>
    bae0:	6809      	ldr	r1, [r1, #0]
    bae2:	681a      	ldr	r2, [r3, #0]
    bae4:	0608      	lsls	r0, r1, #24
    bae6:	d407      	bmi.n	baf8 <_printf_i+0x18c>
    bae8:	0649      	lsls	r1, r1, #25
    baea:	d505      	bpl.n	baf8 <_printf_i+0x18c>
    baec:	1d11      	adds	r1, r2, #4
    baee:	6019      	str	r1, [r3, #0]
    baf0:	6813      	ldr	r3, [r2, #0]
    baf2:	8aa2      	ldrh	r2, [r4, #20]
    baf4:	801a      	strh	r2, [r3, #0]
    baf6:	e004      	b.n	bb02 <_printf_i+0x196>
    baf8:	1d11      	adds	r1, r2, #4
    bafa:	6019      	str	r1, [r3, #0]
    bafc:	6813      	ldr	r3, [r2, #0]
    bafe:	6962      	ldr	r2, [r4, #20]
    bb00:	601a      	str	r2, [r3, #0]
    bb02:	2300      	movs	r3, #0
    bb04:	9e04      	ldr	r6, [sp, #16]
    bb06:	6123      	str	r3, [r4, #16]
    bb08:	e016      	b.n	bb38 <_printf_i+0x1cc>
    bb0a:	681a      	ldr	r2, [r3, #0]
    bb0c:	1d11      	adds	r1, r2, #4
    bb0e:	6019      	str	r1, [r3, #0]
    bb10:	6816      	ldr	r6, [r2, #0]
    bb12:	2100      	movs	r1, #0
    bb14:	6862      	ldr	r2, [r4, #4]
    bb16:	0030      	movs	r0, r6
    bb18:	f000 fce8 	bl	c4ec <memchr>
    bb1c:	2800      	cmp	r0, #0
    bb1e:	d001      	beq.n	bb24 <_printf_i+0x1b8>
    bb20:	1b80      	subs	r0, r0, r6
    bb22:	6060      	str	r0, [r4, #4]
    bb24:	6863      	ldr	r3, [r4, #4]
    bb26:	e003      	b.n	bb30 <_printf_i+0x1c4>
    bb28:	0026      	movs	r6, r4
    bb2a:	3642      	adds	r6, #66	; 0x42
    bb2c:	7032      	strb	r2, [r6, #0]
    bb2e:	2301      	movs	r3, #1
    bb30:	6123      	str	r3, [r4, #16]
    bb32:	2300      	movs	r3, #0
    bb34:	9a04      	ldr	r2, [sp, #16]
    bb36:	7013      	strb	r3, [r2, #0]
    bb38:	9b07      	ldr	r3, [sp, #28]
    bb3a:	aa09      	add	r2, sp, #36	; 0x24
    bb3c:	9300      	str	r3, [sp, #0]
    bb3e:	0021      	movs	r1, r4
    bb40:	9b06      	ldr	r3, [sp, #24]
    bb42:	9805      	ldr	r0, [sp, #20]
    bb44:	f7ff fea4 	bl	b890 <_printf_common>
    bb48:	1c43      	adds	r3, r0, #1
    bb4a:	d102      	bne.n	bb52 <_printf_i+0x1e6>
    bb4c:	2001      	movs	r0, #1
    bb4e:	4240      	negs	r0, r0
    bb50:	e027      	b.n	bba2 <_printf_i+0x236>
    bb52:	6923      	ldr	r3, [r4, #16]
    bb54:	0032      	movs	r2, r6
    bb56:	9906      	ldr	r1, [sp, #24]
    bb58:	9805      	ldr	r0, [sp, #20]
    bb5a:	9d07      	ldr	r5, [sp, #28]
    bb5c:	47a8      	blx	r5
    bb5e:	1c43      	adds	r3, r0, #1
    bb60:	d0f4      	beq.n	bb4c <_printf_i+0x1e0>
    bb62:	6823      	ldr	r3, [r4, #0]
    bb64:	2500      	movs	r5, #0
    bb66:	079b      	lsls	r3, r3, #30
    bb68:	d40f      	bmi.n	bb8a <_printf_i+0x21e>
    bb6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb6c:	68e0      	ldr	r0, [r4, #12]
    bb6e:	4298      	cmp	r0, r3
    bb70:	da17      	bge.n	bba2 <_printf_i+0x236>
    bb72:	0018      	movs	r0, r3
    bb74:	e015      	b.n	bba2 <_printf_i+0x236>
    bb76:	0022      	movs	r2, r4
    bb78:	2301      	movs	r3, #1
    bb7a:	3219      	adds	r2, #25
    bb7c:	9906      	ldr	r1, [sp, #24]
    bb7e:	9805      	ldr	r0, [sp, #20]
    bb80:	9e07      	ldr	r6, [sp, #28]
    bb82:	47b0      	blx	r6
    bb84:	1c43      	adds	r3, r0, #1
    bb86:	d0e1      	beq.n	bb4c <_printf_i+0x1e0>
    bb88:	3501      	adds	r5, #1
    bb8a:	68e3      	ldr	r3, [r4, #12]
    bb8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb8e:	1a9b      	subs	r3, r3, r2
    bb90:	429d      	cmp	r5, r3
    bb92:	dbf0      	blt.n	bb76 <_printf_i+0x20a>
    bb94:	e7e9      	b.n	bb6a <_printf_i+0x1fe>
    bb96:	0026      	movs	r6, r4
    bb98:	9b03      	ldr	r3, [sp, #12]
    bb9a:	3642      	adds	r6, #66	; 0x42
    bb9c:	781b      	ldrb	r3, [r3, #0]
    bb9e:	7033      	strb	r3, [r6, #0]
    bba0:	e78e      	b.n	bac0 <_printf_i+0x154>
    bba2:	b00b      	add	sp, #44	; 0x2c
    bba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bba6:	46c0      	nop			; (mov r8, r8)
    bba8:	0000e051 	.word	0x0000e051
    bbac:	0000e062 	.word	0x0000e062

0000bbb0 <iprintf>:
    bbb0:	b40f      	push	{r0, r1, r2, r3}
    bbb2:	4b0b      	ldr	r3, [pc, #44]	; (bbe0 <iprintf+0x30>)
    bbb4:	b513      	push	{r0, r1, r4, lr}
    bbb6:	681c      	ldr	r4, [r3, #0]
    bbb8:	2c00      	cmp	r4, #0
    bbba:	d005      	beq.n	bbc8 <iprintf+0x18>
    bbbc:	69a3      	ldr	r3, [r4, #24]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d102      	bne.n	bbc8 <iprintf+0x18>
    bbc2:	0020      	movs	r0, r4
    bbc4:	f000 fb90 	bl	c2e8 <__sinit>
    bbc8:	ab05      	add	r3, sp, #20
    bbca:	9a04      	ldr	r2, [sp, #16]
    bbcc:	68a1      	ldr	r1, [r4, #8]
    bbce:	0020      	movs	r0, r4
    bbd0:	9301      	str	r3, [sp, #4]
    bbd2:	f7ff fd41 	bl	b658 <_vfiprintf_r>
    bbd6:	bc16      	pop	{r1, r2, r4}
    bbd8:	bc08      	pop	{r3}
    bbda:	b004      	add	sp, #16
    bbdc:	4718      	bx	r3
    bbde:	46c0      	nop			; (mov r8, r8)
    bbe0:	20000090 	.word	0x20000090

0000bbe4 <putchar>:
    bbe4:	4b08      	ldr	r3, [pc, #32]	; (bc08 <putchar+0x24>)
    bbe6:	b570      	push	{r4, r5, r6, lr}
    bbe8:	681c      	ldr	r4, [r3, #0]
    bbea:	0005      	movs	r5, r0
    bbec:	2c00      	cmp	r4, #0
    bbee:	d005      	beq.n	bbfc <putchar+0x18>
    bbf0:	69a3      	ldr	r3, [r4, #24]
    bbf2:	2b00      	cmp	r3, #0
    bbf4:	d102      	bne.n	bbfc <putchar+0x18>
    bbf6:	0020      	movs	r0, r4
    bbf8:	f000 fb76 	bl	c2e8 <__sinit>
    bbfc:	0029      	movs	r1, r5
    bbfe:	68a2      	ldr	r2, [r4, #8]
    bc00:	0020      	movs	r0, r4
    bc02:	f000 feb5 	bl	c970 <_putc_r>
    bc06:	bd70      	pop	{r4, r5, r6, pc}
    bc08:	20000090 	.word	0x20000090

0000bc0c <_puts_r>:
    bc0c:	b570      	push	{r4, r5, r6, lr}
    bc0e:	0005      	movs	r5, r0
    bc10:	000e      	movs	r6, r1
    bc12:	2800      	cmp	r0, #0
    bc14:	d004      	beq.n	bc20 <_puts_r+0x14>
    bc16:	6983      	ldr	r3, [r0, #24]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d101      	bne.n	bc20 <_puts_r+0x14>
    bc1c:	f000 fb64 	bl	c2e8 <__sinit>
    bc20:	69ab      	ldr	r3, [r5, #24]
    bc22:	68ac      	ldr	r4, [r5, #8]
    bc24:	2b00      	cmp	r3, #0
    bc26:	d102      	bne.n	bc2e <_puts_r+0x22>
    bc28:	0028      	movs	r0, r5
    bc2a:	f000 fb5d 	bl	c2e8 <__sinit>
    bc2e:	4b25      	ldr	r3, [pc, #148]	; (bcc4 <_puts_r+0xb8>)
    bc30:	429c      	cmp	r4, r3
    bc32:	d101      	bne.n	bc38 <_puts_r+0x2c>
    bc34:	686c      	ldr	r4, [r5, #4]
    bc36:	e008      	b.n	bc4a <_puts_r+0x3e>
    bc38:	4b23      	ldr	r3, [pc, #140]	; (bcc8 <_puts_r+0xbc>)
    bc3a:	429c      	cmp	r4, r3
    bc3c:	d101      	bne.n	bc42 <_puts_r+0x36>
    bc3e:	68ac      	ldr	r4, [r5, #8]
    bc40:	e003      	b.n	bc4a <_puts_r+0x3e>
    bc42:	4b22      	ldr	r3, [pc, #136]	; (bccc <_puts_r+0xc0>)
    bc44:	429c      	cmp	r4, r3
    bc46:	d100      	bne.n	bc4a <_puts_r+0x3e>
    bc48:	68ec      	ldr	r4, [r5, #12]
    bc4a:	89a3      	ldrh	r3, [r4, #12]
    bc4c:	071b      	lsls	r3, r3, #28
    bc4e:	d502      	bpl.n	bc56 <_puts_r+0x4a>
    bc50:	6923      	ldr	r3, [r4, #16]
    bc52:	2b00      	cmp	r3, #0
    bc54:	d111      	bne.n	bc7a <_puts_r+0x6e>
    bc56:	0021      	movs	r1, r4
    bc58:	0028      	movs	r0, r5
    bc5a:	f000 f9d3 	bl	c004 <__swsetup_r>
    bc5e:	2800      	cmp	r0, #0
    bc60:	d00b      	beq.n	bc7a <_puts_r+0x6e>
    bc62:	2001      	movs	r0, #1
    bc64:	4240      	negs	r0, r0
    bc66:	e02b      	b.n	bcc0 <_puts_r+0xb4>
    bc68:	3b01      	subs	r3, #1
    bc6a:	3601      	adds	r6, #1
    bc6c:	60a3      	str	r3, [r4, #8]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	db08      	blt.n	bc84 <_puts_r+0x78>
    bc72:	6823      	ldr	r3, [r4, #0]
    bc74:	1c5a      	adds	r2, r3, #1
    bc76:	6022      	str	r2, [r4, #0]
    bc78:	7019      	strb	r1, [r3, #0]
    bc7a:	7831      	ldrb	r1, [r6, #0]
    bc7c:	68a3      	ldr	r3, [r4, #8]
    bc7e:	2900      	cmp	r1, #0
    bc80:	d1f2      	bne.n	bc68 <_puts_r+0x5c>
    bc82:	e00b      	b.n	bc9c <_puts_r+0x90>
    bc84:	69a2      	ldr	r2, [r4, #24]
    bc86:	4293      	cmp	r3, r2
    bc88:	db01      	blt.n	bc8e <_puts_r+0x82>
    bc8a:	290a      	cmp	r1, #10
    bc8c:	d1f1      	bne.n	bc72 <_puts_r+0x66>
    bc8e:	0022      	movs	r2, r4
    bc90:	0028      	movs	r0, r5
    bc92:	f000 f95f 	bl	bf54 <__swbuf_r>
    bc96:	1c43      	adds	r3, r0, #1
    bc98:	d1ef      	bne.n	bc7a <_puts_r+0x6e>
    bc9a:	e7e2      	b.n	bc62 <_puts_r+0x56>
    bc9c:	3b01      	subs	r3, #1
    bc9e:	60a3      	str	r3, [r4, #8]
    bca0:	2b00      	cmp	r3, #0
    bca2:	da08      	bge.n	bcb6 <_puts_r+0xaa>
    bca4:	0022      	movs	r2, r4
    bca6:	310a      	adds	r1, #10
    bca8:	0028      	movs	r0, r5
    bcaa:	f000 f953 	bl	bf54 <__swbuf_r>
    bcae:	1c43      	adds	r3, r0, #1
    bcb0:	d0d7      	beq.n	bc62 <_puts_r+0x56>
    bcb2:	200a      	movs	r0, #10
    bcb4:	e004      	b.n	bcc0 <_puts_r+0xb4>
    bcb6:	200a      	movs	r0, #10
    bcb8:	6823      	ldr	r3, [r4, #0]
    bcba:	1c5a      	adds	r2, r3, #1
    bcbc:	6022      	str	r2, [r4, #0]
    bcbe:	7018      	strb	r0, [r3, #0]
    bcc0:	bd70      	pop	{r4, r5, r6, pc}
    bcc2:	46c0      	nop			; (mov r8, r8)
    bcc4:	0000e074 	.word	0x0000e074
    bcc8:	0000e094 	.word	0x0000e094
    bccc:	0000e0b4 	.word	0x0000e0b4

0000bcd0 <puts>:
    bcd0:	b510      	push	{r4, lr}
    bcd2:	4b03      	ldr	r3, [pc, #12]	; (bce0 <puts+0x10>)
    bcd4:	0001      	movs	r1, r0
    bcd6:	6818      	ldr	r0, [r3, #0]
    bcd8:	f7ff ff98 	bl	bc0c <_puts_r>
    bcdc:	bd10      	pop	{r4, pc}
    bcde:	46c0      	nop			; (mov r8, r8)
    bce0:	20000090 	.word	0x20000090

0000bce4 <setbuf>:
    bce4:	424a      	negs	r2, r1
    bce6:	414a      	adcs	r2, r1
    bce8:	2380      	movs	r3, #128	; 0x80
    bcea:	b510      	push	{r4, lr}
    bcec:	0052      	lsls	r2, r2, #1
    bcee:	00db      	lsls	r3, r3, #3
    bcf0:	f000 f802 	bl	bcf8 <setvbuf>
    bcf4:	bd10      	pop	{r4, pc}
	...

0000bcf8 <setvbuf>:
    bcf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcfa:	001d      	movs	r5, r3
    bcfc:	4b51      	ldr	r3, [pc, #324]	; (be44 <setvbuf+0x14c>)
    bcfe:	b085      	sub	sp, #20
    bd00:	681e      	ldr	r6, [r3, #0]
    bd02:	0004      	movs	r4, r0
    bd04:	000f      	movs	r7, r1
    bd06:	9200      	str	r2, [sp, #0]
    bd08:	2e00      	cmp	r6, #0
    bd0a:	d005      	beq.n	bd18 <setvbuf+0x20>
    bd0c:	69b3      	ldr	r3, [r6, #24]
    bd0e:	2b00      	cmp	r3, #0
    bd10:	d102      	bne.n	bd18 <setvbuf+0x20>
    bd12:	0030      	movs	r0, r6
    bd14:	f000 fae8 	bl	c2e8 <__sinit>
    bd18:	4b4b      	ldr	r3, [pc, #300]	; (be48 <setvbuf+0x150>)
    bd1a:	429c      	cmp	r4, r3
    bd1c:	d101      	bne.n	bd22 <setvbuf+0x2a>
    bd1e:	6874      	ldr	r4, [r6, #4]
    bd20:	e008      	b.n	bd34 <setvbuf+0x3c>
    bd22:	4b4a      	ldr	r3, [pc, #296]	; (be4c <setvbuf+0x154>)
    bd24:	429c      	cmp	r4, r3
    bd26:	d101      	bne.n	bd2c <setvbuf+0x34>
    bd28:	68b4      	ldr	r4, [r6, #8]
    bd2a:	e003      	b.n	bd34 <setvbuf+0x3c>
    bd2c:	4b48      	ldr	r3, [pc, #288]	; (be50 <setvbuf+0x158>)
    bd2e:	429c      	cmp	r4, r3
    bd30:	d100      	bne.n	bd34 <setvbuf+0x3c>
    bd32:	68f4      	ldr	r4, [r6, #12]
    bd34:	9b00      	ldr	r3, [sp, #0]
    bd36:	2b02      	cmp	r3, #2
    bd38:	d005      	beq.n	bd46 <setvbuf+0x4e>
    bd3a:	2b01      	cmp	r3, #1
    bd3c:	d900      	bls.n	bd40 <setvbuf+0x48>
    bd3e:	e07c      	b.n	be3a <setvbuf+0x142>
    bd40:	2d00      	cmp	r5, #0
    bd42:	da00      	bge.n	bd46 <setvbuf+0x4e>
    bd44:	e079      	b.n	be3a <setvbuf+0x142>
    bd46:	0021      	movs	r1, r4
    bd48:	0030      	movs	r0, r6
    bd4a:	f000 fa5f 	bl	c20c <_fflush_r>
    bd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bd50:	2900      	cmp	r1, #0
    bd52:	d008      	beq.n	bd66 <setvbuf+0x6e>
    bd54:	0023      	movs	r3, r4
    bd56:	3344      	adds	r3, #68	; 0x44
    bd58:	4299      	cmp	r1, r3
    bd5a:	d002      	beq.n	bd62 <setvbuf+0x6a>
    bd5c:	0030      	movs	r0, r6
    bd5e:	f000 fbe5 	bl	c52c <_free_r>
    bd62:	2300      	movs	r3, #0
    bd64:	6363      	str	r3, [r4, #52]	; 0x34
    bd66:	2300      	movs	r3, #0
    bd68:	61a3      	str	r3, [r4, #24]
    bd6a:	6063      	str	r3, [r4, #4]
    bd6c:	89a3      	ldrh	r3, [r4, #12]
    bd6e:	061b      	lsls	r3, r3, #24
    bd70:	d503      	bpl.n	bd7a <setvbuf+0x82>
    bd72:	6921      	ldr	r1, [r4, #16]
    bd74:	0030      	movs	r0, r6
    bd76:	f000 fbd9 	bl	c52c <_free_r>
    bd7a:	89a2      	ldrh	r2, [r4, #12]
    bd7c:	4b35      	ldr	r3, [pc, #212]	; (be54 <setvbuf+0x15c>)
    bd7e:	4013      	ands	r3, r2
    bd80:	81a3      	strh	r3, [r4, #12]
    bd82:	9b00      	ldr	r3, [sp, #0]
    bd84:	2b02      	cmp	r3, #2
    bd86:	d021      	beq.n	bdcc <setvbuf+0xd4>
    bd88:	ab03      	add	r3, sp, #12
    bd8a:	aa02      	add	r2, sp, #8
    bd8c:	0021      	movs	r1, r4
    bd8e:	0030      	movs	r0, r6
    bd90:	f000 fb3e 	bl	c410 <__swhatbuf_r>
    bd94:	89a3      	ldrh	r3, [r4, #12]
    bd96:	4318      	orrs	r0, r3
    bd98:	81a0      	strh	r0, [r4, #12]
    bd9a:	2d00      	cmp	r5, #0
    bd9c:	d101      	bne.n	bda2 <setvbuf+0xaa>
    bd9e:	9d02      	ldr	r5, [sp, #8]
    bda0:	e001      	b.n	bda6 <setvbuf+0xae>
    bda2:	2f00      	cmp	r7, #0
    bda4:	d125      	bne.n	bdf2 <setvbuf+0xfa>
    bda6:	0028      	movs	r0, r5
    bda8:	f000 fb96 	bl	c4d8 <malloc>
    bdac:	9501      	str	r5, [sp, #4]
    bdae:	1e07      	subs	r7, r0, #0
    bdb0:	d11a      	bne.n	bde8 <setvbuf+0xf0>
    bdb2:	9b02      	ldr	r3, [sp, #8]
    bdb4:	9301      	str	r3, [sp, #4]
    bdb6:	42ab      	cmp	r3, r5
    bdb8:	d102      	bne.n	bdc0 <setvbuf+0xc8>
    bdba:	2001      	movs	r0, #1
    bdbc:	4240      	negs	r0, r0
    bdbe:	e006      	b.n	bdce <setvbuf+0xd6>
    bdc0:	9801      	ldr	r0, [sp, #4]
    bdc2:	f000 fb89 	bl	c4d8 <malloc>
    bdc6:	1e07      	subs	r7, r0, #0
    bdc8:	d10e      	bne.n	bde8 <setvbuf+0xf0>
    bdca:	e7f6      	b.n	bdba <setvbuf+0xc2>
    bdcc:	2000      	movs	r0, #0
    bdce:	2202      	movs	r2, #2
    bdd0:	89a3      	ldrh	r3, [r4, #12]
    bdd2:	4313      	orrs	r3, r2
    bdd4:	81a3      	strh	r3, [r4, #12]
    bdd6:	2300      	movs	r3, #0
    bdd8:	60a3      	str	r3, [r4, #8]
    bdda:	0023      	movs	r3, r4
    bddc:	3347      	adds	r3, #71	; 0x47
    bdde:	6023      	str	r3, [r4, #0]
    bde0:	6123      	str	r3, [r4, #16]
    bde2:	2301      	movs	r3, #1
    bde4:	6163      	str	r3, [r4, #20]
    bde6:	e02a      	b.n	be3e <setvbuf+0x146>
    bde8:	2280      	movs	r2, #128	; 0x80
    bdea:	89a3      	ldrh	r3, [r4, #12]
    bdec:	9d01      	ldr	r5, [sp, #4]
    bdee:	4313      	orrs	r3, r2
    bdf0:	81a3      	strh	r3, [r4, #12]
    bdf2:	69b3      	ldr	r3, [r6, #24]
    bdf4:	2b00      	cmp	r3, #0
    bdf6:	d102      	bne.n	bdfe <setvbuf+0x106>
    bdf8:	0030      	movs	r0, r6
    bdfa:	f000 fa75 	bl	c2e8 <__sinit>
    bdfe:	9b00      	ldr	r3, [sp, #0]
    be00:	2b01      	cmp	r3, #1
    be02:	d103      	bne.n	be0c <setvbuf+0x114>
    be04:	89a3      	ldrh	r3, [r4, #12]
    be06:	9a00      	ldr	r2, [sp, #0]
    be08:	431a      	orrs	r2, r3
    be0a:	81a2      	strh	r2, [r4, #12]
    be0c:	2308      	movs	r3, #8
    be0e:	89a2      	ldrh	r2, [r4, #12]
    be10:	6027      	str	r7, [r4, #0]
    be12:	4013      	ands	r3, r2
    be14:	6127      	str	r7, [r4, #16]
    be16:	6165      	str	r5, [r4, #20]
    be18:	1e18      	subs	r0, r3, #0
    be1a:	d00c      	beq.n	be36 <setvbuf+0x13e>
    be1c:	2301      	movs	r3, #1
    be1e:	401a      	ands	r2, r3
    be20:	2300      	movs	r3, #0
    be22:	1e10      	subs	r0, r2, #0
    be24:	4298      	cmp	r0, r3
    be26:	d004      	beq.n	be32 <setvbuf+0x13a>
    be28:	426d      	negs	r5, r5
    be2a:	60a3      	str	r3, [r4, #8]
    be2c:	61a5      	str	r5, [r4, #24]
    be2e:	0018      	movs	r0, r3
    be30:	e005      	b.n	be3e <setvbuf+0x146>
    be32:	60a5      	str	r5, [r4, #8]
    be34:	e003      	b.n	be3e <setvbuf+0x146>
    be36:	60a3      	str	r3, [r4, #8]
    be38:	e001      	b.n	be3e <setvbuf+0x146>
    be3a:	2001      	movs	r0, #1
    be3c:	4240      	negs	r0, r0
    be3e:	b005      	add	sp, #20
    be40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be42:	46c0      	nop			; (mov r8, r8)
    be44:	20000090 	.word	0x20000090
    be48:	0000e074 	.word	0x0000e074
    be4c:	0000e094 	.word	0x0000e094
    be50:	0000e0b4 	.word	0x0000e0b4
    be54:	fffff35c 	.word	0xfffff35c

0000be58 <sniprintf>:
    be58:	b40c      	push	{r2, r3}
    be5a:	b530      	push	{r4, r5, lr}
    be5c:	4b16      	ldr	r3, [pc, #88]	; (beb8 <sniprintf+0x60>)
    be5e:	b09d      	sub	sp, #116	; 0x74
    be60:	1e0c      	subs	r4, r1, #0
    be62:	681d      	ldr	r5, [r3, #0]
    be64:	da04      	bge.n	be70 <sniprintf+0x18>
    be66:	238b      	movs	r3, #139	; 0x8b
    be68:	2001      	movs	r0, #1
    be6a:	602b      	str	r3, [r5, #0]
    be6c:	4240      	negs	r0, r0
    be6e:	e01d      	b.n	beac <sniprintf+0x54>
    be70:	2382      	movs	r3, #130	; 0x82
    be72:	a902      	add	r1, sp, #8
    be74:	009b      	lsls	r3, r3, #2
    be76:	818b      	strh	r3, [r1, #12]
    be78:	2300      	movs	r3, #0
    be7a:	9002      	str	r0, [sp, #8]
    be7c:	6108      	str	r0, [r1, #16]
    be7e:	429c      	cmp	r4, r3
    be80:	d000      	beq.n	be84 <sniprintf+0x2c>
    be82:	1e63      	subs	r3, r4, #1
    be84:	608b      	str	r3, [r1, #8]
    be86:	614b      	str	r3, [r1, #20]
    be88:	2301      	movs	r3, #1
    be8a:	425b      	negs	r3, r3
    be8c:	81cb      	strh	r3, [r1, #14]
    be8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    be90:	ab21      	add	r3, sp, #132	; 0x84
    be92:	0028      	movs	r0, r5
    be94:	9301      	str	r3, [sp, #4]
    be96:	f000 fc6d 	bl	c774 <_svfiprintf_r>
    be9a:	1c43      	adds	r3, r0, #1
    be9c:	da01      	bge.n	bea2 <sniprintf+0x4a>
    be9e:	238b      	movs	r3, #139	; 0x8b
    bea0:	602b      	str	r3, [r5, #0]
    bea2:	2c00      	cmp	r4, #0
    bea4:	d002      	beq.n	beac <sniprintf+0x54>
    bea6:	2300      	movs	r3, #0
    bea8:	9a02      	ldr	r2, [sp, #8]
    beaa:	7013      	strb	r3, [r2, #0]
    beac:	b01d      	add	sp, #116	; 0x74
    beae:	bc30      	pop	{r4, r5}
    beb0:	bc08      	pop	{r3}
    beb2:	b002      	add	sp, #8
    beb4:	4718      	bx	r3
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	20000090 	.word	0x20000090

0000bebc <siprintf>:
    bebc:	b40e      	push	{r1, r2, r3}
    bebe:	b510      	push	{r4, lr}
    bec0:	b09d      	sub	sp, #116	; 0x74
    bec2:	a902      	add	r1, sp, #8
    bec4:	9002      	str	r0, [sp, #8]
    bec6:	6108      	str	r0, [r1, #16]
    bec8:	480b      	ldr	r0, [pc, #44]	; (bef8 <siprintf+0x3c>)
    beca:	2482      	movs	r4, #130	; 0x82
    becc:	6088      	str	r0, [r1, #8]
    bece:	6148      	str	r0, [r1, #20]
    bed0:	2001      	movs	r0, #1
    bed2:	4240      	negs	r0, r0
    bed4:	ab1f      	add	r3, sp, #124	; 0x7c
    bed6:	81c8      	strh	r0, [r1, #14]
    bed8:	4808      	ldr	r0, [pc, #32]	; (befc <siprintf+0x40>)
    beda:	cb04      	ldmia	r3!, {r2}
    bedc:	00a4      	lsls	r4, r4, #2
    bede:	6800      	ldr	r0, [r0, #0]
    bee0:	9301      	str	r3, [sp, #4]
    bee2:	818c      	strh	r4, [r1, #12]
    bee4:	f000 fc46 	bl	c774 <_svfiprintf_r>
    bee8:	2300      	movs	r3, #0
    beea:	9a02      	ldr	r2, [sp, #8]
    beec:	7013      	strb	r3, [r2, #0]
    beee:	b01d      	add	sp, #116	; 0x74
    bef0:	bc10      	pop	{r4}
    bef2:	bc08      	pop	{r3}
    bef4:	b003      	add	sp, #12
    bef6:	4718      	bx	r3
    bef8:	7fffffff 	.word	0x7fffffff
    befc:	20000090 	.word	0x20000090

0000bf00 <strlen>:
    bf00:	2300      	movs	r3, #0
    bf02:	5cc2      	ldrb	r2, [r0, r3]
    bf04:	3301      	adds	r3, #1
    bf06:	2a00      	cmp	r2, #0
    bf08:	d1fb      	bne.n	bf02 <strlen+0x2>
    bf0a:	1e58      	subs	r0, r3, #1
    bf0c:	4770      	bx	lr

0000bf0e <strncmp>:
    bf0e:	2300      	movs	r3, #0
    bf10:	b530      	push	{r4, r5, lr}
    bf12:	429a      	cmp	r2, r3
    bf14:	d00b      	beq.n	bf2e <strncmp+0x20>
    bf16:	3a01      	subs	r2, #1
    bf18:	5cc4      	ldrb	r4, [r0, r3]
    bf1a:	5ccd      	ldrb	r5, [r1, r3]
    bf1c:	42ac      	cmp	r4, r5
    bf1e:	d105      	bne.n	bf2c <strncmp+0x1e>
    bf20:	429a      	cmp	r2, r3
    bf22:	d002      	beq.n	bf2a <strncmp+0x1c>
    bf24:	3301      	adds	r3, #1
    bf26:	2c00      	cmp	r4, #0
    bf28:	d1f6      	bne.n	bf18 <strncmp+0xa>
    bf2a:	0025      	movs	r5, r4
    bf2c:	1b63      	subs	r3, r4, r5
    bf2e:	0018      	movs	r0, r3
    bf30:	bd30      	pop	{r4, r5, pc}

0000bf32 <strspn>:
    bf32:	0003      	movs	r3, r0
    bf34:	b530      	push	{r4, r5, lr}
    bf36:	781c      	ldrb	r4, [r3, #0]
    bf38:	2c00      	cmp	r4, #0
    bf3a:	d009      	beq.n	bf50 <strspn+0x1e>
    bf3c:	000a      	movs	r2, r1
    bf3e:	7815      	ldrb	r5, [r2, #0]
    bf40:	2d00      	cmp	r5, #0
    bf42:	d005      	beq.n	bf50 <strspn+0x1e>
    bf44:	42ac      	cmp	r4, r5
    bf46:	d001      	beq.n	bf4c <strspn+0x1a>
    bf48:	3201      	adds	r2, #1
    bf4a:	e7f8      	b.n	bf3e <strspn+0xc>
    bf4c:	3301      	adds	r3, #1
    bf4e:	e7f2      	b.n	bf36 <strspn+0x4>
    bf50:	1a18      	subs	r0, r3, r0
    bf52:	bd30      	pop	{r4, r5, pc}

0000bf54 <__swbuf_r>:
    bf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf56:	0005      	movs	r5, r0
    bf58:	000f      	movs	r7, r1
    bf5a:	0014      	movs	r4, r2
    bf5c:	2800      	cmp	r0, #0
    bf5e:	d004      	beq.n	bf6a <__swbuf_r+0x16>
    bf60:	6983      	ldr	r3, [r0, #24]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d101      	bne.n	bf6a <__swbuf_r+0x16>
    bf66:	f000 f9bf 	bl	c2e8 <__sinit>
    bf6a:	4b23      	ldr	r3, [pc, #140]	; (bff8 <__swbuf_r+0xa4>)
    bf6c:	429c      	cmp	r4, r3
    bf6e:	d101      	bne.n	bf74 <__swbuf_r+0x20>
    bf70:	686c      	ldr	r4, [r5, #4]
    bf72:	e008      	b.n	bf86 <__swbuf_r+0x32>
    bf74:	4b21      	ldr	r3, [pc, #132]	; (bffc <__swbuf_r+0xa8>)
    bf76:	429c      	cmp	r4, r3
    bf78:	d101      	bne.n	bf7e <__swbuf_r+0x2a>
    bf7a:	68ac      	ldr	r4, [r5, #8]
    bf7c:	e003      	b.n	bf86 <__swbuf_r+0x32>
    bf7e:	4b20      	ldr	r3, [pc, #128]	; (c000 <__swbuf_r+0xac>)
    bf80:	429c      	cmp	r4, r3
    bf82:	d100      	bne.n	bf86 <__swbuf_r+0x32>
    bf84:	68ec      	ldr	r4, [r5, #12]
    bf86:	69a3      	ldr	r3, [r4, #24]
    bf88:	60a3      	str	r3, [r4, #8]
    bf8a:	89a3      	ldrh	r3, [r4, #12]
    bf8c:	071b      	lsls	r3, r3, #28
    bf8e:	d50a      	bpl.n	bfa6 <__swbuf_r+0x52>
    bf90:	6923      	ldr	r3, [r4, #16]
    bf92:	2b00      	cmp	r3, #0
    bf94:	d007      	beq.n	bfa6 <__swbuf_r+0x52>
    bf96:	6823      	ldr	r3, [r4, #0]
    bf98:	6922      	ldr	r2, [r4, #16]
    bf9a:	b2fe      	uxtb	r6, r7
    bf9c:	1a98      	subs	r0, r3, r2
    bf9e:	6963      	ldr	r3, [r4, #20]
    bfa0:	4298      	cmp	r0, r3
    bfa2:	db0f      	blt.n	bfc4 <__swbuf_r+0x70>
    bfa4:	e008      	b.n	bfb8 <__swbuf_r+0x64>
    bfa6:	0021      	movs	r1, r4
    bfa8:	0028      	movs	r0, r5
    bfaa:	f000 f82b 	bl	c004 <__swsetup_r>
    bfae:	2800      	cmp	r0, #0
    bfb0:	d0f1      	beq.n	bf96 <__swbuf_r+0x42>
    bfb2:	2001      	movs	r0, #1
    bfb4:	4240      	negs	r0, r0
    bfb6:	e01d      	b.n	bff4 <__swbuf_r+0xa0>
    bfb8:	0021      	movs	r1, r4
    bfba:	0028      	movs	r0, r5
    bfbc:	f000 f926 	bl	c20c <_fflush_r>
    bfc0:	2800      	cmp	r0, #0
    bfc2:	d1f6      	bne.n	bfb2 <__swbuf_r+0x5e>
    bfc4:	68a3      	ldr	r3, [r4, #8]
    bfc6:	3001      	adds	r0, #1
    bfc8:	3b01      	subs	r3, #1
    bfca:	60a3      	str	r3, [r4, #8]
    bfcc:	6823      	ldr	r3, [r4, #0]
    bfce:	1c5a      	adds	r2, r3, #1
    bfd0:	6022      	str	r2, [r4, #0]
    bfd2:	701f      	strb	r7, [r3, #0]
    bfd4:	6963      	ldr	r3, [r4, #20]
    bfd6:	4298      	cmp	r0, r3
    bfd8:	d005      	beq.n	bfe6 <__swbuf_r+0x92>
    bfda:	89a3      	ldrh	r3, [r4, #12]
    bfdc:	0030      	movs	r0, r6
    bfde:	07db      	lsls	r3, r3, #31
    bfe0:	d508      	bpl.n	bff4 <__swbuf_r+0xa0>
    bfe2:	2e0a      	cmp	r6, #10
    bfe4:	d106      	bne.n	bff4 <__swbuf_r+0xa0>
    bfe6:	0021      	movs	r1, r4
    bfe8:	0028      	movs	r0, r5
    bfea:	f000 f90f 	bl	c20c <_fflush_r>
    bfee:	2800      	cmp	r0, #0
    bff0:	d1df      	bne.n	bfb2 <__swbuf_r+0x5e>
    bff2:	0030      	movs	r0, r6
    bff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bff6:	46c0      	nop			; (mov r8, r8)
    bff8:	0000e074 	.word	0x0000e074
    bffc:	0000e094 	.word	0x0000e094
    c000:	0000e0b4 	.word	0x0000e0b4

0000c004 <__swsetup_r>:
    c004:	4b36      	ldr	r3, [pc, #216]	; (c0e0 <__swsetup_r+0xdc>)
    c006:	b570      	push	{r4, r5, r6, lr}
    c008:	681d      	ldr	r5, [r3, #0]
    c00a:	0006      	movs	r6, r0
    c00c:	000c      	movs	r4, r1
    c00e:	2d00      	cmp	r5, #0
    c010:	d005      	beq.n	c01e <__swsetup_r+0x1a>
    c012:	69ab      	ldr	r3, [r5, #24]
    c014:	2b00      	cmp	r3, #0
    c016:	d102      	bne.n	c01e <__swsetup_r+0x1a>
    c018:	0028      	movs	r0, r5
    c01a:	f000 f965 	bl	c2e8 <__sinit>
    c01e:	4b31      	ldr	r3, [pc, #196]	; (c0e4 <__swsetup_r+0xe0>)
    c020:	429c      	cmp	r4, r3
    c022:	d101      	bne.n	c028 <__swsetup_r+0x24>
    c024:	686c      	ldr	r4, [r5, #4]
    c026:	e008      	b.n	c03a <__swsetup_r+0x36>
    c028:	4b2f      	ldr	r3, [pc, #188]	; (c0e8 <__swsetup_r+0xe4>)
    c02a:	429c      	cmp	r4, r3
    c02c:	d101      	bne.n	c032 <__swsetup_r+0x2e>
    c02e:	68ac      	ldr	r4, [r5, #8]
    c030:	e003      	b.n	c03a <__swsetup_r+0x36>
    c032:	4b2e      	ldr	r3, [pc, #184]	; (c0ec <__swsetup_r+0xe8>)
    c034:	429c      	cmp	r4, r3
    c036:	d100      	bne.n	c03a <__swsetup_r+0x36>
    c038:	68ec      	ldr	r4, [r5, #12]
    c03a:	220c      	movs	r2, #12
    c03c:	5ea3      	ldrsh	r3, [r4, r2]
    c03e:	b29a      	uxth	r2, r3
    c040:	0711      	lsls	r1, r2, #28
    c042:	d423      	bmi.n	c08c <__swsetup_r+0x88>
    c044:	06d1      	lsls	r1, r2, #27
    c046:	d407      	bmi.n	c058 <__swsetup_r+0x54>
    c048:	2209      	movs	r2, #9
    c04a:	2001      	movs	r0, #1
    c04c:	6032      	str	r2, [r6, #0]
    c04e:	3237      	adds	r2, #55	; 0x37
    c050:	4313      	orrs	r3, r2
    c052:	81a3      	strh	r3, [r4, #12]
    c054:	4240      	negs	r0, r0
    c056:	e042      	b.n	c0de <__swsetup_r+0xda>
    c058:	0753      	lsls	r3, r2, #29
    c05a:	d513      	bpl.n	c084 <__swsetup_r+0x80>
    c05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c05e:	2900      	cmp	r1, #0
    c060:	d008      	beq.n	c074 <__swsetup_r+0x70>
    c062:	0023      	movs	r3, r4
    c064:	3344      	adds	r3, #68	; 0x44
    c066:	4299      	cmp	r1, r3
    c068:	d002      	beq.n	c070 <__swsetup_r+0x6c>
    c06a:	0030      	movs	r0, r6
    c06c:	f000 fa5e 	bl	c52c <_free_r>
    c070:	2300      	movs	r3, #0
    c072:	6363      	str	r3, [r4, #52]	; 0x34
    c074:	2224      	movs	r2, #36	; 0x24
    c076:	89a3      	ldrh	r3, [r4, #12]
    c078:	4393      	bics	r3, r2
    c07a:	81a3      	strh	r3, [r4, #12]
    c07c:	2300      	movs	r3, #0
    c07e:	6063      	str	r3, [r4, #4]
    c080:	6923      	ldr	r3, [r4, #16]
    c082:	6023      	str	r3, [r4, #0]
    c084:	2208      	movs	r2, #8
    c086:	89a3      	ldrh	r3, [r4, #12]
    c088:	4313      	orrs	r3, r2
    c08a:	81a3      	strh	r3, [r4, #12]
    c08c:	6923      	ldr	r3, [r4, #16]
    c08e:	2b00      	cmp	r3, #0
    c090:	d10b      	bne.n	c0aa <__swsetup_r+0xa6>
    c092:	23a0      	movs	r3, #160	; 0xa0
    c094:	89a2      	ldrh	r2, [r4, #12]
    c096:	009b      	lsls	r3, r3, #2
    c098:	4013      	ands	r3, r2
    c09a:	2280      	movs	r2, #128	; 0x80
    c09c:	0092      	lsls	r2, r2, #2
    c09e:	4293      	cmp	r3, r2
    c0a0:	d003      	beq.n	c0aa <__swsetup_r+0xa6>
    c0a2:	0021      	movs	r1, r4
    c0a4:	0030      	movs	r0, r6
    c0a6:	f000 f9d9 	bl	c45c <__smakebuf_r>
    c0aa:	2301      	movs	r3, #1
    c0ac:	89a2      	ldrh	r2, [r4, #12]
    c0ae:	4013      	ands	r3, r2
    c0b0:	d005      	beq.n	c0be <__swsetup_r+0xba>
    c0b2:	2300      	movs	r3, #0
    c0b4:	60a3      	str	r3, [r4, #8]
    c0b6:	6963      	ldr	r3, [r4, #20]
    c0b8:	425b      	negs	r3, r3
    c0ba:	61a3      	str	r3, [r4, #24]
    c0bc:	e003      	b.n	c0c6 <__swsetup_r+0xc2>
    c0be:	0792      	lsls	r2, r2, #30
    c0c0:	d400      	bmi.n	c0c4 <__swsetup_r+0xc0>
    c0c2:	6963      	ldr	r3, [r4, #20]
    c0c4:	60a3      	str	r3, [r4, #8]
    c0c6:	2000      	movs	r0, #0
    c0c8:	6923      	ldr	r3, [r4, #16]
    c0ca:	4283      	cmp	r3, r0
    c0cc:	d107      	bne.n	c0de <__swsetup_r+0xda>
    c0ce:	220c      	movs	r2, #12
    c0d0:	5ea3      	ldrsh	r3, [r4, r2]
    c0d2:	061a      	lsls	r2, r3, #24
    c0d4:	d503      	bpl.n	c0de <__swsetup_r+0xda>
    c0d6:	2240      	movs	r2, #64	; 0x40
    c0d8:	4313      	orrs	r3, r2
    c0da:	81a3      	strh	r3, [r4, #12]
    c0dc:	3801      	subs	r0, #1
    c0de:	bd70      	pop	{r4, r5, r6, pc}
    c0e0:	20000090 	.word	0x20000090
    c0e4:	0000e074 	.word	0x0000e074
    c0e8:	0000e094 	.word	0x0000e094
    c0ec:	0000e0b4 	.word	0x0000e0b4

0000c0f0 <abort>:
    c0f0:	b510      	push	{r4, lr}
    c0f2:	2006      	movs	r0, #6
    c0f4:	f000 fcae 	bl	ca54 <raise>
    c0f8:	2001      	movs	r0, #1
    c0fa:	f7fb fb4b 	bl	7794 <_exit>
	...

0000c100 <__sflush_r>:
    c100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c102:	898a      	ldrh	r2, [r1, #12]
    c104:	0005      	movs	r5, r0
    c106:	000c      	movs	r4, r1
    c108:	0713      	lsls	r3, r2, #28
    c10a:	d45a      	bmi.n	c1c2 <__sflush_r+0xc2>
    c10c:	684b      	ldr	r3, [r1, #4]
    c10e:	2b00      	cmp	r3, #0
    c110:	dc02      	bgt.n	c118 <__sflush_r+0x18>
    c112:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c114:	2b00      	cmp	r3, #0
    c116:	dd19      	ble.n	c14c <__sflush_r+0x4c>
    c118:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c11a:	2f00      	cmp	r7, #0
    c11c:	d016      	beq.n	c14c <__sflush_r+0x4c>
    c11e:	2300      	movs	r3, #0
    c120:	682e      	ldr	r6, [r5, #0]
    c122:	602b      	str	r3, [r5, #0]
    c124:	2380      	movs	r3, #128	; 0x80
    c126:	015b      	lsls	r3, r3, #5
    c128:	401a      	ands	r2, r3
    c12a:	d001      	beq.n	c130 <__sflush_r+0x30>
    c12c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c12e:	e014      	b.n	c15a <__sflush_r+0x5a>
    c130:	2301      	movs	r3, #1
    c132:	6a21      	ldr	r1, [r4, #32]
    c134:	0028      	movs	r0, r5
    c136:	47b8      	blx	r7
    c138:	1c43      	adds	r3, r0, #1
    c13a:	d10e      	bne.n	c15a <__sflush_r+0x5a>
    c13c:	682b      	ldr	r3, [r5, #0]
    c13e:	2b00      	cmp	r3, #0
    c140:	d00b      	beq.n	c15a <__sflush_r+0x5a>
    c142:	2b1d      	cmp	r3, #29
    c144:	d001      	beq.n	c14a <__sflush_r+0x4a>
    c146:	2b16      	cmp	r3, #22
    c148:	d102      	bne.n	c150 <__sflush_r+0x50>
    c14a:	602e      	str	r6, [r5, #0]
    c14c:	2000      	movs	r0, #0
    c14e:	e05a      	b.n	c206 <__sflush_r+0x106>
    c150:	2240      	movs	r2, #64	; 0x40
    c152:	89a3      	ldrh	r3, [r4, #12]
    c154:	4313      	orrs	r3, r2
    c156:	81a3      	strh	r3, [r4, #12]
    c158:	e055      	b.n	c206 <__sflush_r+0x106>
    c15a:	89a3      	ldrh	r3, [r4, #12]
    c15c:	075b      	lsls	r3, r3, #29
    c15e:	d506      	bpl.n	c16e <__sflush_r+0x6e>
    c160:	6863      	ldr	r3, [r4, #4]
    c162:	1ac0      	subs	r0, r0, r3
    c164:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c166:	2b00      	cmp	r3, #0
    c168:	d001      	beq.n	c16e <__sflush_r+0x6e>
    c16a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c16c:	1ac0      	subs	r0, r0, r3
    c16e:	2300      	movs	r3, #0
    c170:	0002      	movs	r2, r0
    c172:	6a21      	ldr	r1, [r4, #32]
    c174:	0028      	movs	r0, r5
    c176:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c178:	47b8      	blx	r7
    c17a:	89a3      	ldrh	r3, [r4, #12]
    c17c:	1c42      	adds	r2, r0, #1
    c17e:	d106      	bne.n	c18e <__sflush_r+0x8e>
    c180:	6829      	ldr	r1, [r5, #0]
    c182:	291d      	cmp	r1, #29
    c184:	d83a      	bhi.n	c1fc <__sflush_r+0xfc>
    c186:	4a20      	ldr	r2, [pc, #128]	; (c208 <__sflush_r+0x108>)
    c188:	40ca      	lsrs	r2, r1
    c18a:	07d2      	lsls	r2, r2, #31
    c18c:	d536      	bpl.n	c1fc <__sflush_r+0xfc>
    c18e:	2200      	movs	r2, #0
    c190:	6062      	str	r2, [r4, #4]
    c192:	6922      	ldr	r2, [r4, #16]
    c194:	6022      	str	r2, [r4, #0]
    c196:	04db      	lsls	r3, r3, #19
    c198:	d505      	bpl.n	c1a6 <__sflush_r+0xa6>
    c19a:	1c43      	adds	r3, r0, #1
    c19c:	d102      	bne.n	c1a4 <__sflush_r+0xa4>
    c19e:	682b      	ldr	r3, [r5, #0]
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d100      	bne.n	c1a6 <__sflush_r+0xa6>
    c1a4:	6560      	str	r0, [r4, #84]	; 0x54
    c1a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c1a8:	602e      	str	r6, [r5, #0]
    c1aa:	2900      	cmp	r1, #0
    c1ac:	d0ce      	beq.n	c14c <__sflush_r+0x4c>
    c1ae:	0023      	movs	r3, r4
    c1b0:	3344      	adds	r3, #68	; 0x44
    c1b2:	4299      	cmp	r1, r3
    c1b4:	d002      	beq.n	c1bc <__sflush_r+0xbc>
    c1b6:	0028      	movs	r0, r5
    c1b8:	f000 f9b8 	bl	c52c <_free_r>
    c1bc:	2000      	movs	r0, #0
    c1be:	6360      	str	r0, [r4, #52]	; 0x34
    c1c0:	e021      	b.n	c206 <__sflush_r+0x106>
    c1c2:	690f      	ldr	r7, [r1, #16]
    c1c4:	2f00      	cmp	r7, #0
    c1c6:	d0c1      	beq.n	c14c <__sflush_r+0x4c>
    c1c8:	680b      	ldr	r3, [r1, #0]
    c1ca:	600f      	str	r7, [r1, #0]
    c1cc:	1bdb      	subs	r3, r3, r7
    c1ce:	9301      	str	r3, [sp, #4]
    c1d0:	2300      	movs	r3, #0
    c1d2:	0792      	lsls	r2, r2, #30
    c1d4:	d100      	bne.n	c1d8 <__sflush_r+0xd8>
    c1d6:	694b      	ldr	r3, [r1, #20]
    c1d8:	60a3      	str	r3, [r4, #8]
    c1da:	e003      	b.n	c1e4 <__sflush_r+0xe4>
    c1dc:	9b01      	ldr	r3, [sp, #4]
    c1de:	183f      	adds	r7, r7, r0
    c1e0:	1a1b      	subs	r3, r3, r0
    c1e2:	9301      	str	r3, [sp, #4]
    c1e4:	9b01      	ldr	r3, [sp, #4]
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	ddb0      	ble.n	c14c <__sflush_r+0x4c>
    c1ea:	9b01      	ldr	r3, [sp, #4]
    c1ec:	003a      	movs	r2, r7
    c1ee:	6a21      	ldr	r1, [r4, #32]
    c1f0:	0028      	movs	r0, r5
    c1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c1f4:	47b0      	blx	r6
    c1f6:	2800      	cmp	r0, #0
    c1f8:	dcf0      	bgt.n	c1dc <__sflush_r+0xdc>
    c1fa:	89a3      	ldrh	r3, [r4, #12]
    c1fc:	2240      	movs	r2, #64	; 0x40
    c1fe:	2001      	movs	r0, #1
    c200:	4313      	orrs	r3, r2
    c202:	81a3      	strh	r3, [r4, #12]
    c204:	4240      	negs	r0, r0
    c206:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c208:	20400001 	.word	0x20400001

0000c20c <_fflush_r>:
    c20c:	690b      	ldr	r3, [r1, #16]
    c20e:	b570      	push	{r4, r5, r6, lr}
    c210:	0005      	movs	r5, r0
    c212:	000c      	movs	r4, r1
    c214:	2b00      	cmp	r3, #0
    c216:	d101      	bne.n	c21c <_fflush_r+0x10>
    c218:	2000      	movs	r0, #0
    c21a:	e01c      	b.n	c256 <_fflush_r+0x4a>
    c21c:	2800      	cmp	r0, #0
    c21e:	d004      	beq.n	c22a <_fflush_r+0x1e>
    c220:	6983      	ldr	r3, [r0, #24]
    c222:	2b00      	cmp	r3, #0
    c224:	d101      	bne.n	c22a <_fflush_r+0x1e>
    c226:	f000 f85f 	bl	c2e8 <__sinit>
    c22a:	4b0b      	ldr	r3, [pc, #44]	; (c258 <_fflush_r+0x4c>)
    c22c:	429c      	cmp	r4, r3
    c22e:	d101      	bne.n	c234 <_fflush_r+0x28>
    c230:	686c      	ldr	r4, [r5, #4]
    c232:	e008      	b.n	c246 <_fflush_r+0x3a>
    c234:	4b09      	ldr	r3, [pc, #36]	; (c25c <_fflush_r+0x50>)
    c236:	429c      	cmp	r4, r3
    c238:	d101      	bne.n	c23e <_fflush_r+0x32>
    c23a:	68ac      	ldr	r4, [r5, #8]
    c23c:	e003      	b.n	c246 <_fflush_r+0x3a>
    c23e:	4b08      	ldr	r3, [pc, #32]	; (c260 <_fflush_r+0x54>)
    c240:	429c      	cmp	r4, r3
    c242:	d100      	bne.n	c246 <_fflush_r+0x3a>
    c244:	68ec      	ldr	r4, [r5, #12]
    c246:	220c      	movs	r2, #12
    c248:	5ea3      	ldrsh	r3, [r4, r2]
    c24a:	2b00      	cmp	r3, #0
    c24c:	d0e4      	beq.n	c218 <_fflush_r+0xc>
    c24e:	0021      	movs	r1, r4
    c250:	0028      	movs	r0, r5
    c252:	f7ff ff55 	bl	c100 <__sflush_r>
    c256:	bd70      	pop	{r4, r5, r6, pc}
    c258:	0000e074 	.word	0x0000e074
    c25c:	0000e094 	.word	0x0000e094
    c260:	0000e0b4 	.word	0x0000e0b4

0000c264 <_cleanup_r>:
    c264:	b510      	push	{r4, lr}
    c266:	4902      	ldr	r1, [pc, #8]	; (c270 <_cleanup_r+0xc>)
    c268:	f000 f8b0 	bl	c3cc <_fwalk_reent>
    c26c:	bd10      	pop	{r4, pc}
    c26e:	46c0      	nop			; (mov r8, r8)
    c270:	0000c20d 	.word	0x0000c20d

0000c274 <std.isra.0>:
    c274:	2300      	movs	r3, #0
    c276:	b510      	push	{r4, lr}
    c278:	0004      	movs	r4, r0
    c27a:	6003      	str	r3, [r0, #0]
    c27c:	6043      	str	r3, [r0, #4]
    c27e:	6083      	str	r3, [r0, #8]
    c280:	8181      	strh	r1, [r0, #12]
    c282:	6643      	str	r3, [r0, #100]	; 0x64
    c284:	81c2      	strh	r2, [r0, #14]
    c286:	6103      	str	r3, [r0, #16]
    c288:	6143      	str	r3, [r0, #20]
    c28a:	6183      	str	r3, [r0, #24]
    c28c:	0019      	movs	r1, r3
    c28e:	2208      	movs	r2, #8
    c290:	305c      	adds	r0, #92	; 0x5c
    c292:	f7ff f9b2 	bl	b5fa <memset>
    c296:	4b05      	ldr	r3, [pc, #20]	; (c2ac <std.isra.0+0x38>)
    c298:	6224      	str	r4, [r4, #32]
    c29a:	6263      	str	r3, [r4, #36]	; 0x24
    c29c:	4b04      	ldr	r3, [pc, #16]	; (c2b0 <std.isra.0+0x3c>)
    c29e:	62a3      	str	r3, [r4, #40]	; 0x28
    c2a0:	4b04      	ldr	r3, [pc, #16]	; (c2b4 <std.isra.0+0x40>)
    c2a2:	62e3      	str	r3, [r4, #44]	; 0x2c
    c2a4:	4b04      	ldr	r3, [pc, #16]	; (c2b8 <std.isra.0+0x44>)
    c2a6:	6323      	str	r3, [r4, #48]	; 0x30
    c2a8:	bd10      	pop	{r4, pc}
    c2aa:	46c0      	nop			; (mov r8, r8)
    c2ac:	0000ca95 	.word	0x0000ca95
    c2b0:	0000cabd 	.word	0x0000cabd
    c2b4:	0000caf5 	.word	0x0000caf5
    c2b8:	0000cb21 	.word	0x0000cb21

0000c2bc <__sfmoreglue>:
    c2bc:	b570      	push	{r4, r5, r6, lr}
    c2be:	2568      	movs	r5, #104	; 0x68
    c2c0:	1e4b      	subs	r3, r1, #1
    c2c2:	435d      	muls	r5, r3
    c2c4:	000e      	movs	r6, r1
    c2c6:	0029      	movs	r1, r5
    c2c8:	3174      	adds	r1, #116	; 0x74
    c2ca:	f000 f975 	bl	c5b8 <_malloc_r>
    c2ce:	1e04      	subs	r4, r0, #0
    c2d0:	d008      	beq.n	c2e4 <__sfmoreglue+0x28>
    c2d2:	2100      	movs	r1, #0
    c2d4:	002a      	movs	r2, r5
    c2d6:	6001      	str	r1, [r0, #0]
    c2d8:	6046      	str	r6, [r0, #4]
    c2da:	300c      	adds	r0, #12
    c2dc:	60a0      	str	r0, [r4, #8]
    c2de:	3268      	adds	r2, #104	; 0x68
    c2e0:	f7ff f98b 	bl	b5fa <memset>
    c2e4:	0020      	movs	r0, r4
    c2e6:	bd70      	pop	{r4, r5, r6, pc}

0000c2e8 <__sinit>:
    c2e8:	6983      	ldr	r3, [r0, #24]
    c2ea:	b513      	push	{r0, r1, r4, lr}
    c2ec:	0004      	movs	r4, r0
    c2ee:	2b00      	cmp	r3, #0
    c2f0:	d128      	bne.n	c344 <__sinit+0x5c>
    c2f2:	6483      	str	r3, [r0, #72]	; 0x48
    c2f4:	64c3      	str	r3, [r0, #76]	; 0x4c
    c2f6:	6503      	str	r3, [r0, #80]	; 0x50
    c2f8:	4b13      	ldr	r3, [pc, #76]	; (c348 <__sinit+0x60>)
    c2fa:	4a14      	ldr	r2, [pc, #80]	; (c34c <__sinit+0x64>)
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	6282      	str	r2, [r0, #40]	; 0x28
    c300:	9301      	str	r3, [sp, #4]
    c302:	4298      	cmp	r0, r3
    c304:	d101      	bne.n	c30a <__sinit+0x22>
    c306:	2301      	movs	r3, #1
    c308:	6183      	str	r3, [r0, #24]
    c30a:	0020      	movs	r0, r4
    c30c:	f000 f820 	bl	c350 <__sfp>
    c310:	6060      	str	r0, [r4, #4]
    c312:	0020      	movs	r0, r4
    c314:	f000 f81c 	bl	c350 <__sfp>
    c318:	60a0      	str	r0, [r4, #8]
    c31a:	0020      	movs	r0, r4
    c31c:	f000 f818 	bl	c350 <__sfp>
    c320:	2200      	movs	r2, #0
    c322:	60e0      	str	r0, [r4, #12]
    c324:	2104      	movs	r1, #4
    c326:	6860      	ldr	r0, [r4, #4]
    c328:	f7ff ffa4 	bl	c274 <std.isra.0>
    c32c:	2201      	movs	r2, #1
    c32e:	2109      	movs	r1, #9
    c330:	68a0      	ldr	r0, [r4, #8]
    c332:	f7ff ff9f 	bl	c274 <std.isra.0>
    c336:	2202      	movs	r2, #2
    c338:	2112      	movs	r1, #18
    c33a:	68e0      	ldr	r0, [r4, #12]
    c33c:	f7ff ff9a 	bl	c274 <std.isra.0>
    c340:	2301      	movs	r3, #1
    c342:	61a3      	str	r3, [r4, #24]
    c344:	bd13      	pop	{r0, r1, r4, pc}
    c346:	46c0      	nop			; (mov r8, r8)
    c348:	0000e03c 	.word	0x0000e03c
    c34c:	0000c265 	.word	0x0000c265

0000c350 <__sfp>:
    c350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c352:	4b1d      	ldr	r3, [pc, #116]	; (c3c8 <__sfp+0x78>)
    c354:	0006      	movs	r6, r0
    c356:	681d      	ldr	r5, [r3, #0]
    c358:	69ab      	ldr	r3, [r5, #24]
    c35a:	2b00      	cmp	r3, #0
    c35c:	d102      	bne.n	c364 <__sfp+0x14>
    c35e:	0028      	movs	r0, r5
    c360:	f7ff ffc2 	bl	c2e8 <__sinit>
    c364:	3548      	adds	r5, #72	; 0x48
    c366:	68ac      	ldr	r4, [r5, #8]
    c368:	686b      	ldr	r3, [r5, #4]
    c36a:	3b01      	subs	r3, #1
    c36c:	d405      	bmi.n	c37a <__sfp+0x2a>
    c36e:	220c      	movs	r2, #12
    c370:	5ea7      	ldrsh	r7, [r4, r2]
    c372:	2f00      	cmp	r7, #0
    c374:	d010      	beq.n	c398 <__sfp+0x48>
    c376:	3468      	adds	r4, #104	; 0x68
    c378:	e7f7      	b.n	c36a <__sfp+0x1a>
    c37a:	682b      	ldr	r3, [r5, #0]
    c37c:	2b00      	cmp	r3, #0
    c37e:	d001      	beq.n	c384 <__sfp+0x34>
    c380:	682d      	ldr	r5, [r5, #0]
    c382:	e7f0      	b.n	c366 <__sfp+0x16>
    c384:	2104      	movs	r1, #4
    c386:	0030      	movs	r0, r6
    c388:	f7ff ff98 	bl	c2bc <__sfmoreglue>
    c38c:	6028      	str	r0, [r5, #0]
    c38e:	2800      	cmp	r0, #0
    c390:	d1f6      	bne.n	c380 <__sfp+0x30>
    c392:	230c      	movs	r3, #12
    c394:	6033      	str	r3, [r6, #0]
    c396:	e016      	b.n	c3c6 <__sfp+0x76>
    c398:	2301      	movs	r3, #1
    c39a:	0020      	movs	r0, r4
    c39c:	425b      	negs	r3, r3
    c39e:	81e3      	strh	r3, [r4, #14]
    c3a0:	3302      	adds	r3, #2
    c3a2:	81a3      	strh	r3, [r4, #12]
    c3a4:	6667      	str	r7, [r4, #100]	; 0x64
    c3a6:	6027      	str	r7, [r4, #0]
    c3a8:	60a7      	str	r7, [r4, #8]
    c3aa:	6067      	str	r7, [r4, #4]
    c3ac:	6127      	str	r7, [r4, #16]
    c3ae:	6167      	str	r7, [r4, #20]
    c3b0:	61a7      	str	r7, [r4, #24]
    c3b2:	305c      	adds	r0, #92	; 0x5c
    c3b4:	2208      	movs	r2, #8
    c3b6:	0039      	movs	r1, r7
    c3b8:	f7ff f91f 	bl	b5fa <memset>
    c3bc:	0020      	movs	r0, r4
    c3be:	6367      	str	r7, [r4, #52]	; 0x34
    c3c0:	63a7      	str	r7, [r4, #56]	; 0x38
    c3c2:	64a7      	str	r7, [r4, #72]	; 0x48
    c3c4:	64e7      	str	r7, [r4, #76]	; 0x4c
    c3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3c8:	0000e03c 	.word	0x0000e03c

0000c3cc <_fwalk_reent>:
    c3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c3ce:	0004      	movs	r4, r0
    c3d0:	0007      	movs	r7, r0
    c3d2:	2600      	movs	r6, #0
    c3d4:	9101      	str	r1, [sp, #4]
    c3d6:	3448      	adds	r4, #72	; 0x48
    c3d8:	2c00      	cmp	r4, #0
    c3da:	d016      	beq.n	c40a <_fwalk_reent+0x3e>
    c3dc:	6863      	ldr	r3, [r4, #4]
    c3de:	68a5      	ldr	r5, [r4, #8]
    c3e0:	9300      	str	r3, [sp, #0]
    c3e2:	9b00      	ldr	r3, [sp, #0]
    c3e4:	3b01      	subs	r3, #1
    c3e6:	9300      	str	r3, [sp, #0]
    c3e8:	d40d      	bmi.n	c406 <_fwalk_reent+0x3a>
    c3ea:	89ab      	ldrh	r3, [r5, #12]
    c3ec:	2b01      	cmp	r3, #1
    c3ee:	d908      	bls.n	c402 <_fwalk_reent+0x36>
    c3f0:	220e      	movs	r2, #14
    c3f2:	5eab      	ldrsh	r3, [r5, r2]
    c3f4:	3301      	adds	r3, #1
    c3f6:	d004      	beq.n	c402 <_fwalk_reent+0x36>
    c3f8:	0029      	movs	r1, r5
    c3fa:	0038      	movs	r0, r7
    c3fc:	9b01      	ldr	r3, [sp, #4]
    c3fe:	4798      	blx	r3
    c400:	4306      	orrs	r6, r0
    c402:	3568      	adds	r5, #104	; 0x68
    c404:	e7ed      	b.n	c3e2 <_fwalk_reent+0x16>
    c406:	6824      	ldr	r4, [r4, #0]
    c408:	e7e6      	b.n	c3d8 <_fwalk_reent+0xc>
    c40a:	0030      	movs	r0, r6
    c40c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000c410 <__swhatbuf_r>:
    c410:	b570      	push	{r4, r5, r6, lr}
    c412:	000e      	movs	r6, r1
    c414:	001d      	movs	r5, r3
    c416:	230e      	movs	r3, #14
    c418:	5ec9      	ldrsh	r1, [r1, r3]
    c41a:	b090      	sub	sp, #64	; 0x40
    c41c:	0014      	movs	r4, r2
    c41e:	2900      	cmp	r1, #0
    c420:	da06      	bge.n	c430 <__swhatbuf_r+0x20>
    c422:	2300      	movs	r3, #0
    c424:	602b      	str	r3, [r5, #0]
    c426:	89b3      	ldrh	r3, [r6, #12]
    c428:	061b      	lsls	r3, r3, #24
    c42a:	d50f      	bpl.n	c44c <__swhatbuf_r+0x3c>
    c42c:	2340      	movs	r3, #64	; 0x40
    c42e:	e00f      	b.n	c450 <__swhatbuf_r+0x40>
    c430:	aa01      	add	r2, sp, #4
    c432:	f000 fba1 	bl	cb78 <_fstat_r>
    c436:	2800      	cmp	r0, #0
    c438:	dbf3      	blt.n	c422 <__swhatbuf_r+0x12>
    c43a:	23f0      	movs	r3, #240	; 0xf0
    c43c:	9a02      	ldr	r2, [sp, #8]
    c43e:	021b      	lsls	r3, r3, #8
    c440:	4013      	ands	r3, r2
    c442:	4a05      	ldr	r2, [pc, #20]	; (c458 <__swhatbuf_r+0x48>)
    c444:	189b      	adds	r3, r3, r2
    c446:	425a      	negs	r2, r3
    c448:	4153      	adcs	r3, r2
    c44a:	602b      	str	r3, [r5, #0]
    c44c:	2380      	movs	r3, #128	; 0x80
    c44e:	00db      	lsls	r3, r3, #3
    c450:	2000      	movs	r0, #0
    c452:	6023      	str	r3, [r4, #0]
    c454:	b010      	add	sp, #64	; 0x40
    c456:	bd70      	pop	{r4, r5, r6, pc}
    c458:	ffffe000 	.word	0xffffe000

0000c45c <__smakebuf_r>:
    c45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c45e:	2602      	movs	r6, #2
    c460:	898b      	ldrh	r3, [r1, #12]
    c462:	0005      	movs	r5, r0
    c464:	000c      	movs	r4, r1
    c466:	4233      	tst	r3, r6
    c468:	d110      	bne.n	c48c <__smakebuf_r+0x30>
    c46a:	ab01      	add	r3, sp, #4
    c46c:	466a      	mov	r2, sp
    c46e:	f7ff ffcf 	bl	c410 <__swhatbuf_r>
    c472:	9900      	ldr	r1, [sp, #0]
    c474:	0007      	movs	r7, r0
    c476:	0028      	movs	r0, r5
    c478:	f000 f89e 	bl	c5b8 <_malloc_r>
    c47c:	2800      	cmp	r0, #0
    c47e:	d10c      	bne.n	c49a <__smakebuf_r+0x3e>
    c480:	220c      	movs	r2, #12
    c482:	5ea3      	ldrsh	r3, [r4, r2]
    c484:	059a      	lsls	r2, r3, #22
    c486:	d423      	bmi.n	c4d0 <__smakebuf_r+0x74>
    c488:	4333      	orrs	r3, r6
    c48a:	81a3      	strh	r3, [r4, #12]
    c48c:	0023      	movs	r3, r4
    c48e:	3347      	adds	r3, #71	; 0x47
    c490:	6023      	str	r3, [r4, #0]
    c492:	6123      	str	r3, [r4, #16]
    c494:	2301      	movs	r3, #1
    c496:	6163      	str	r3, [r4, #20]
    c498:	e01a      	b.n	c4d0 <__smakebuf_r+0x74>
    c49a:	2280      	movs	r2, #128	; 0x80
    c49c:	4b0d      	ldr	r3, [pc, #52]	; (c4d4 <__smakebuf_r+0x78>)
    c49e:	62ab      	str	r3, [r5, #40]	; 0x28
    c4a0:	89a3      	ldrh	r3, [r4, #12]
    c4a2:	6020      	str	r0, [r4, #0]
    c4a4:	4313      	orrs	r3, r2
    c4a6:	81a3      	strh	r3, [r4, #12]
    c4a8:	9b00      	ldr	r3, [sp, #0]
    c4aa:	6120      	str	r0, [r4, #16]
    c4ac:	6163      	str	r3, [r4, #20]
    c4ae:	9b01      	ldr	r3, [sp, #4]
    c4b0:	2b00      	cmp	r3, #0
    c4b2:	d00a      	beq.n	c4ca <__smakebuf_r+0x6e>
    c4b4:	230e      	movs	r3, #14
    c4b6:	5ee1      	ldrsh	r1, [r4, r3]
    c4b8:	0028      	movs	r0, r5
    c4ba:	f000 fb6f 	bl	cb9c <_isatty_r>
    c4be:	2800      	cmp	r0, #0
    c4c0:	d003      	beq.n	c4ca <__smakebuf_r+0x6e>
    c4c2:	2201      	movs	r2, #1
    c4c4:	89a3      	ldrh	r3, [r4, #12]
    c4c6:	4313      	orrs	r3, r2
    c4c8:	81a3      	strh	r3, [r4, #12]
    c4ca:	89a3      	ldrh	r3, [r4, #12]
    c4cc:	431f      	orrs	r7, r3
    c4ce:	81a7      	strh	r7, [r4, #12]
    c4d0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c4d2:	46c0      	nop			; (mov r8, r8)
    c4d4:	0000c265 	.word	0x0000c265

0000c4d8 <malloc>:
    c4d8:	b510      	push	{r4, lr}
    c4da:	4b03      	ldr	r3, [pc, #12]	; (c4e8 <malloc+0x10>)
    c4dc:	0001      	movs	r1, r0
    c4de:	6818      	ldr	r0, [r3, #0]
    c4e0:	f000 f86a 	bl	c5b8 <_malloc_r>
    c4e4:	bd10      	pop	{r4, pc}
    c4e6:	46c0      	nop			; (mov r8, r8)
    c4e8:	20000090 	.word	0x20000090

0000c4ec <memchr>:
    c4ec:	b2c9      	uxtb	r1, r1
    c4ee:	1882      	adds	r2, r0, r2
    c4f0:	4290      	cmp	r0, r2
    c4f2:	d004      	beq.n	c4fe <memchr+0x12>
    c4f4:	7803      	ldrb	r3, [r0, #0]
    c4f6:	428b      	cmp	r3, r1
    c4f8:	d002      	beq.n	c500 <memchr+0x14>
    c4fa:	3001      	adds	r0, #1
    c4fc:	e7f8      	b.n	c4f0 <memchr+0x4>
    c4fe:	2000      	movs	r0, #0
    c500:	4770      	bx	lr

0000c502 <memmove>:
    c502:	b510      	push	{r4, lr}
    c504:	4288      	cmp	r0, r1
    c506:	d902      	bls.n	c50e <memmove+0xc>
    c508:	188b      	adds	r3, r1, r2
    c50a:	4298      	cmp	r0, r3
    c50c:	d301      	bcc.n	c512 <memmove+0x10>
    c50e:	2300      	movs	r3, #0
    c510:	e005      	b.n	c51e <memmove+0x1c>
    c512:	1a9b      	subs	r3, r3, r2
    c514:	3a01      	subs	r2, #1
    c516:	d308      	bcc.n	c52a <memmove+0x28>
    c518:	5c99      	ldrb	r1, [r3, r2]
    c51a:	5481      	strb	r1, [r0, r2]
    c51c:	e7fa      	b.n	c514 <memmove+0x12>
    c51e:	4293      	cmp	r3, r2
    c520:	d003      	beq.n	c52a <memmove+0x28>
    c522:	5ccc      	ldrb	r4, [r1, r3]
    c524:	54c4      	strb	r4, [r0, r3]
    c526:	3301      	adds	r3, #1
    c528:	e7f9      	b.n	c51e <memmove+0x1c>
    c52a:	bd10      	pop	{r4, pc}

0000c52c <_free_r>:
    c52c:	b530      	push	{r4, r5, lr}
    c52e:	2900      	cmp	r1, #0
    c530:	d03e      	beq.n	c5b0 <_free_r+0x84>
    c532:	3904      	subs	r1, #4
    c534:	680b      	ldr	r3, [r1, #0]
    c536:	2b00      	cmp	r3, #0
    c538:	da00      	bge.n	c53c <_free_r+0x10>
    c53a:	18c9      	adds	r1, r1, r3
    c53c:	4a1d      	ldr	r2, [pc, #116]	; (c5b4 <_free_r+0x88>)
    c53e:	6813      	ldr	r3, [r2, #0]
    c540:	0014      	movs	r4, r2
    c542:	2b00      	cmp	r3, #0
    c544:	d102      	bne.n	c54c <_free_r+0x20>
    c546:	604b      	str	r3, [r1, #4]
    c548:	6011      	str	r1, [r2, #0]
    c54a:	e031      	b.n	c5b0 <_free_r+0x84>
    c54c:	428b      	cmp	r3, r1
    c54e:	d90d      	bls.n	c56c <_free_r+0x40>
    c550:	680a      	ldr	r2, [r1, #0]
    c552:	1888      	adds	r0, r1, r2
    c554:	4283      	cmp	r3, r0
    c556:	d103      	bne.n	c560 <_free_r+0x34>
    c558:	6818      	ldr	r0, [r3, #0]
    c55a:	685b      	ldr	r3, [r3, #4]
    c55c:	1882      	adds	r2, r0, r2
    c55e:	600a      	str	r2, [r1, #0]
    c560:	604b      	str	r3, [r1, #4]
    c562:	6021      	str	r1, [r4, #0]
    c564:	e024      	b.n	c5b0 <_free_r+0x84>
    c566:	428a      	cmp	r2, r1
    c568:	d803      	bhi.n	c572 <_free_r+0x46>
    c56a:	0013      	movs	r3, r2
    c56c:	685a      	ldr	r2, [r3, #4]
    c56e:	2a00      	cmp	r2, #0
    c570:	d1f9      	bne.n	c566 <_free_r+0x3a>
    c572:	681d      	ldr	r5, [r3, #0]
    c574:	195c      	adds	r4, r3, r5
    c576:	428c      	cmp	r4, r1
    c578:	d10b      	bne.n	c592 <_free_r+0x66>
    c57a:	6809      	ldr	r1, [r1, #0]
    c57c:	1869      	adds	r1, r5, r1
    c57e:	1858      	adds	r0, r3, r1
    c580:	6019      	str	r1, [r3, #0]
    c582:	4282      	cmp	r2, r0
    c584:	d114      	bne.n	c5b0 <_free_r+0x84>
    c586:	6810      	ldr	r0, [r2, #0]
    c588:	6852      	ldr	r2, [r2, #4]
    c58a:	1841      	adds	r1, r0, r1
    c58c:	6019      	str	r1, [r3, #0]
    c58e:	605a      	str	r2, [r3, #4]
    c590:	e00e      	b.n	c5b0 <_free_r+0x84>
    c592:	428c      	cmp	r4, r1
    c594:	d902      	bls.n	c59c <_free_r+0x70>
    c596:	230c      	movs	r3, #12
    c598:	6003      	str	r3, [r0, #0]
    c59a:	e009      	b.n	c5b0 <_free_r+0x84>
    c59c:	6808      	ldr	r0, [r1, #0]
    c59e:	180c      	adds	r4, r1, r0
    c5a0:	42a2      	cmp	r2, r4
    c5a2:	d103      	bne.n	c5ac <_free_r+0x80>
    c5a4:	6814      	ldr	r4, [r2, #0]
    c5a6:	6852      	ldr	r2, [r2, #4]
    c5a8:	1820      	adds	r0, r4, r0
    c5aa:	6008      	str	r0, [r1, #0]
    c5ac:	604a      	str	r2, [r1, #4]
    c5ae:	6059      	str	r1, [r3, #4]
    c5b0:	bd30      	pop	{r4, r5, pc}
    c5b2:	46c0      	nop			; (mov r8, r8)
    c5b4:	20004428 	.word	0x20004428

0000c5b8 <_malloc_r>:
    c5b8:	2303      	movs	r3, #3
    c5ba:	b570      	push	{r4, r5, r6, lr}
    c5bc:	1ccd      	adds	r5, r1, #3
    c5be:	439d      	bics	r5, r3
    c5c0:	3508      	adds	r5, #8
    c5c2:	0006      	movs	r6, r0
    c5c4:	2d0c      	cmp	r5, #12
    c5c6:	d201      	bcs.n	c5cc <_malloc_r+0x14>
    c5c8:	250c      	movs	r5, #12
    c5ca:	e005      	b.n	c5d8 <_malloc_r+0x20>
    c5cc:	2d00      	cmp	r5, #0
    c5ce:	da03      	bge.n	c5d8 <_malloc_r+0x20>
    c5d0:	230c      	movs	r3, #12
    c5d2:	2000      	movs	r0, #0
    c5d4:	6033      	str	r3, [r6, #0]
    c5d6:	e040      	b.n	c65a <_malloc_r+0xa2>
    c5d8:	42a9      	cmp	r1, r5
    c5da:	d8f9      	bhi.n	c5d0 <_malloc_r+0x18>
    c5dc:	4b1f      	ldr	r3, [pc, #124]	; (c65c <_malloc_r+0xa4>)
    c5de:	681c      	ldr	r4, [r3, #0]
    c5e0:	001a      	movs	r2, r3
    c5e2:	0021      	movs	r1, r4
    c5e4:	2900      	cmp	r1, #0
    c5e6:	d013      	beq.n	c610 <_malloc_r+0x58>
    c5e8:	680b      	ldr	r3, [r1, #0]
    c5ea:	1b5b      	subs	r3, r3, r5
    c5ec:	d40d      	bmi.n	c60a <_malloc_r+0x52>
    c5ee:	2b0b      	cmp	r3, #11
    c5f0:	d902      	bls.n	c5f8 <_malloc_r+0x40>
    c5f2:	600b      	str	r3, [r1, #0]
    c5f4:	18cc      	adds	r4, r1, r3
    c5f6:	e01e      	b.n	c636 <_malloc_r+0x7e>
    c5f8:	428c      	cmp	r4, r1
    c5fa:	d102      	bne.n	c602 <_malloc_r+0x4a>
    c5fc:	6863      	ldr	r3, [r4, #4]
    c5fe:	6013      	str	r3, [r2, #0]
    c600:	e01a      	b.n	c638 <_malloc_r+0x80>
    c602:	684b      	ldr	r3, [r1, #4]
    c604:	6063      	str	r3, [r4, #4]
    c606:	000c      	movs	r4, r1
    c608:	e016      	b.n	c638 <_malloc_r+0x80>
    c60a:	000c      	movs	r4, r1
    c60c:	6849      	ldr	r1, [r1, #4]
    c60e:	e7e9      	b.n	c5e4 <_malloc_r+0x2c>
    c610:	4c13      	ldr	r4, [pc, #76]	; (c660 <_malloc_r+0xa8>)
    c612:	6823      	ldr	r3, [r4, #0]
    c614:	2b00      	cmp	r3, #0
    c616:	d103      	bne.n	c620 <_malloc_r+0x68>
    c618:	0030      	movs	r0, r6
    c61a:	f000 f9df 	bl	c9dc <_sbrk_r>
    c61e:	6020      	str	r0, [r4, #0]
    c620:	0029      	movs	r1, r5
    c622:	0030      	movs	r0, r6
    c624:	f000 f9da 	bl	c9dc <_sbrk_r>
    c628:	1c43      	adds	r3, r0, #1
    c62a:	d0d1      	beq.n	c5d0 <_malloc_r+0x18>
    c62c:	2303      	movs	r3, #3
    c62e:	1cc4      	adds	r4, r0, #3
    c630:	439c      	bics	r4, r3
    c632:	42a0      	cmp	r0, r4
    c634:	d10a      	bne.n	c64c <_malloc_r+0x94>
    c636:	6025      	str	r5, [r4, #0]
    c638:	0020      	movs	r0, r4
    c63a:	2207      	movs	r2, #7
    c63c:	300b      	adds	r0, #11
    c63e:	1d23      	adds	r3, r4, #4
    c640:	4390      	bics	r0, r2
    c642:	1ac3      	subs	r3, r0, r3
    c644:	d009      	beq.n	c65a <_malloc_r+0xa2>
    c646:	425a      	negs	r2, r3
    c648:	50e2      	str	r2, [r4, r3]
    c64a:	e006      	b.n	c65a <_malloc_r+0xa2>
    c64c:	1a21      	subs	r1, r4, r0
    c64e:	0030      	movs	r0, r6
    c650:	f000 f9c4 	bl	c9dc <_sbrk_r>
    c654:	1c43      	adds	r3, r0, #1
    c656:	d1ee      	bne.n	c636 <_malloc_r+0x7e>
    c658:	e7ba      	b.n	c5d0 <_malloc_r+0x18>
    c65a:	bd70      	pop	{r4, r5, r6, pc}
    c65c:	20004428 	.word	0x20004428
    c660:	20004424 	.word	0x20004424

0000c664 <_realloc_r>:
    c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c666:	0006      	movs	r6, r0
    c668:	000c      	movs	r4, r1
    c66a:	0015      	movs	r5, r2
    c66c:	2900      	cmp	r1, #0
    c66e:	d104      	bne.n	c67a <_realloc_r+0x16>
    c670:	0011      	movs	r1, r2
    c672:	f7ff ffa1 	bl	c5b8 <_malloc_r>
    c676:	0004      	movs	r4, r0
    c678:	e018      	b.n	c6ac <_realloc_r+0x48>
    c67a:	2a00      	cmp	r2, #0
    c67c:	d103      	bne.n	c686 <_realloc_r+0x22>
    c67e:	f7ff ff55 	bl	c52c <_free_r>
    c682:	002c      	movs	r4, r5
    c684:	e012      	b.n	c6ac <_realloc_r+0x48>
    c686:	f000 faaf 	bl	cbe8 <_malloc_usable_size_r>
    c68a:	4285      	cmp	r5, r0
    c68c:	d90e      	bls.n	c6ac <_realloc_r+0x48>
    c68e:	0029      	movs	r1, r5
    c690:	0030      	movs	r0, r6
    c692:	f7ff ff91 	bl	c5b8 <_malloc_r>
    c696:	1e07      	subs	r7, r0, #0
    c698:	d007      	beq.n	c6aa <_realloc_r+0x46>
    c69a:	0021      	movs	r1, r4
    c69c:	002a      	movs	r2, r5
    c69e:	f7fe ffa3 	bl	b5e8 <memcpy>
    c6a2:	0021      	movs	r1, r4
    c6a4:	0030      	movs	r0, r6
    c6a6:	f7ff ff41 	bl	c52c <_free_r>
    c6aa:	003c      	movs	r4, r7
    c6ac:	0020      	movs	r0, r4
    c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c6b0 <__ssputs_r>:
    c6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6b2:	688e      	ldr	r6, [r1, #8]
    c6b4:	b085      	sub	sp, #20
    c6b6:	0007      	movs	r7, r0
    c6b8:	000c      	movs	r4, r1
    c6ba:	9203      	str	r2, [sp, #12]
    c6bc:	9301      	str	r3, [sp, #4]
    c6be:	429e      	cmp	r6, r3
    c6c0:	d843      	bhi.n	c74a <__ssputs_r+0x9a>
    c6c2:	2390      	movs	r3, #144	; 0x90
    c6c4:	898a      	ldrh	r2, [r1, #12]
    c6c6:	00db      	lsls	r3, r3, #3
    c6c8:	421a      	tst	r2, r3
    c6ca:	d03e      	beq.n	c74a <__ssputs_r+0x9a>
    c6cc:	2503      	movs	r5, #3
    c6ce:	6909      	ldr	r1, [r1, #16]
    c6d0:	6823      	ldr	r3, [r4, #0]
    c6d2:	9801      	ldr	r0, [sp, #4]
    c6d4:	1a5b      	subs	r3, r3, r1
    c6d6:	9302      	str	r3, [sp, #8]
    c6d8:	6963      	ldr	r3, [r4, #20]
    c6da:	435d      	muls	r5, r3
    c6dc:	0feb      	lsrs	r3, r5, #31
    c6de:	195d      	adds	r5, r3, r5
    c6e0:	9b02      	ldr	r3, [sp, #8]
    c6e2:	106d      	asrs	r5, r5, #1
    c6e4:	3301      	adds	r3, #1
    c6e6:	181b      	adds	r3, r3, r0
    c6e8:	42ab      	cmp	r3, r5
    c6ea:	d900      	bls.n	c6ee <__ssputs_r+0x3e>
    c6ec:	001d      	movs	r5, r3
    c6ee:	0553      	lsls	r3, r2, #21
    c6f0:	d510      	bpl.n	c714 <__ssputs_r+0x64>
    c6f2:	0029      	movs	r1, r5
    c6f4:	0038      	movs	r0, r7
    c6f6:	f7ff ff5f 	bl	c5b8 <_malloc_r>
    c6fa:	1e06      	subs	r6, r0, #0
    c6fc:	d014      	beq.n	c728 <__ssputs_r+0x78>
    c6fe:	9a02      	ldr	r2, [sp, #8]
    c700:	6921      	ldr	r1, [r4, #16]
    c702:	f7fe ff71 	bl	b5e8 <memcpy>
    c706:	89a2      	ldrh	r2, [r4, #12]
    c708:	4b19      	ldr	r3, [pc, #100]	; (c770 <__ssputs_r+0xc0>)
    c70a:	4013      	ands	r3, r2
    c70c:	2280      	movs	r2, #128	; 0x80
    c70e:	4313      	orrs	r3, r2
    c710:	81a3      	strh	r3, [r4, #12]
    c712:	e012      	b.n	c73a <__ssputs_r+0x8a>
    c714:	002a      	movs	r2, r5
    c716:	0038      	movs	r0, r7
    c718:	f7ff ffa4 	bl	c664 <_realloc_r>
    c71c:	1e06      	subs	r6, r0, #0
    c71e:	d10c      	bne.n	c73a <__ssputs_r+0x8a>
    c720:	6921      	ldr	r1, [r4, #16]
    c722:	0038      	movs	r0, r7
    c724:	f7ff ff02 	bl	c52c <_free_r>
    c728:	230c      	movs	r3, #12
    c72a:	2240      	movs	r2, #64	; 0x40
    c72c:	2001      	movs	r0, #1
    c72e:	603b      	str	r3, [r7, #0]
    c730:	89a3      	ldrh	r3, [r4, #12]
    c732:	4240      	negs	r0, r0
    c734:	4313      	orrs	r3, r2
    c736:	81a3      	strh	r3, [r4, #12]
    c738:	e017      	b.n	c76a <__ssputs_r+0xba>
    c73a:	9b02      	ldr	r3, [sp, #8]
    c73c:	6126      	str	r6, [r4, #16]
    c73e:	18f6      	adds	r6, r6, r3
    c740:	6026      	str	r6, [r4, #0]
    c742:	6165      	str	r5, [r4, #20]
    c744:	9e01      	ldr	r6, [sp, #4]
    c746:	1aed      	subs	r5, r5, r3
    c748:	60a5      	str	r5, [r4, #8]
    c74a:	9b01      	ldr	r3, [sp, #4]
    c74c:	42b3      	cmp	r3, r6
    c74e:	d200      	bcs.n	c752 <__ssputs_r+0xa2>
    c750:	001e      	movs	r6, r3
    c752:	0032      	movs	r2, r6
    c754:	9903      	ldr	r1, [sp, #12]
    c756:	6820      	ldr	r0, [r4, #0]
    c758:	f7ff fed3 	bl	c502 <memmove>
    c75c:	2000      	movs	r0, #0
    c75e:	68a3      	ldr	r3, [r4, #8]
    c760:	1b9b      	subs	r3, r3, r6
    c762:	60a3      	str	r3, [r4, #8]
    c764:	6823      	ldr	r3, [r4, #0]
    c766:	199e      	adds	r6, r3, r6
    c768:	6026      	str	r6, [r4, #0]
    c76a:	b005      	add	sp, #20
    c76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c76e:	46c0      	nop			; (mov r8, r8)
    c770:	fffffb7f 	.word	0xfffffb7f

0000c774 <_svfiprintf_r>:
    c774:	b5f0      	push	{r4, r5, r6, r7, lr}
    c776:	b09f      	sub	sp, #124	; 0x7c
    c778:	9002      	str	r0, [sp, #8]
    c77a:	9305      	str	r3, [sp, #20]
    c77c:	898b      	ldrh	r3, [r1, #12]
    c77e:	000f      	movs	r7, r1
    c780:	0016      	movs	r6, r2
    c782:	061b      	lsls	r3, r3, #24
    c784:	d510      	bpl.n	c7a8 <_svfiprintf_r+0x34>
    c786:	690b      	ldr	r3, [r1, #16]
    c788:	2b00      	cmp	r3, #0
    c78a:	d10d      	bne.n	c7a8 <_svfiprintf_r+0x34>
    c78c:	2140      	movs	r1, #64	; 0x40
    c78e:	f7ff ff13 	bl	c5b8 <_malloc_r>
    c792:	6038      	str	r0, [r7, #0]
    c794:	6138      	str	r0, [r7, #16]
    c796:	2800      	cmp	r0, #0
    c798:	d104      	bne.n	c7a4 <_svfiprintf_r+0x30>
    c79a:	230c      	movs	r3, #12
    c79c:	9a02      	ldr	r2, [sp, #8]
    c79e:	3801      	subs	r0, #1
    c7a0:	6013      	str	r3, [r2, #0]
    c7a2:	e0d8      	b.n	c956 <_svfiprintf_r+0x1e2>
    c7a4:	2340      	movs	r3, #64	; 0x40
    c7a6:	617b      	str	r3, [r7, #20]
    c7a8:	2300      	movs	r3, #0
    c7aa:	ad06      	add	r5, sp, #24
    c7ac:	616b      	str	r3, [r5, #20]
    c7ae:	3320      	adds	r3, #32
    c7b0:	766b      	strb	r3, [r5, #25]
    c7b2:	3310      	adds	r3, #16
    c7b4:	76ab      	strb	r3, [r5, #26]
    c7b6:	0034      	movs	r4, r6
    c7b8:	7823      	ldrb	r3, [r4, #0]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d103      	bne.n	c7c6 <_svfiprintf_r+0x52>
    c7be:	1ba3      	subs	r3, r4, r6
    c7c0:	9304      	str	r3, [sp, #16]
    c7c2:	d012      	beq.n	c7ea <_svfiprintf_r+0x76>
    c7c4:	e003      	b.n	c7ce <_svfiprintf_r+0x5a>
    c7c6:	2b25      	cmp	r3, #37	; 0x25
    c7c8:	d0f9      	beq.n	c7be <_svfiprintf_r+0x4a>
    c7ca:	3401      	adds	r4, #1
    c7cc:	e7f4      	b.n	c7b8 <_svfiprintf_r+0x44>
    c7ce:	1ba3      	subs	r3, r4, r6
    c7d0:	0032      	movs	r2, r6
    c7d2:	0039      	movs	r1, r7
    c7d4:	9802      	ldr	r0, [sp, #8]
    c7d6:	f7ff ff6b 	bl	c6b0 <__ssputs_r>
    c7da:	1c43      	adds	r3, r0, #1
    c7dc:	d100      	bne.n	c7e0 <_svfiprintf_r+0x6c>
    c7de:	e0b4      	b.n	c94a <_svfiprintf_r+0x1d6>
    c7e0:	696a      	ldr	r2, [r5, #20]
    c7e2:	9b04      	ldr	r3, [sp, #16]
    c7e4:	4694      	mov	ip, r2
    c7e6:	4463      	add	r3, ip
    c7e8:	616b      	str	r3, [r5, #20]
    c7ea:	7823      	ldrb	r3, [r4, #0]
    c7ec:	2b00      	cmp	r3, #0
    c7ee:	d100      	bne.n	c7f2 <_svfiprintf_r+0x7e>
    c7f0:	e0ab      	b.n	c94a <_svfiprintf_r+0x1d6>
    c7f2:	2201      	movs	r2, #1
    c7f4:	2300      	movs	r3, #0
    c7f6:	4252      	negs	r2, r2
    c7f8:	606a      	str	r2, [r5, #4]
    c7fa:	a902      	add	r1, sp, #8
    c7fc:	3254      	adds	r2, #84	; 0x54
    c7fe:	1852      	adds	r2, r2, r1
    c800:	3401      	adds	r4, #1
    c802:	602b      	str	r3, [r5, #0]
    c804:	60eb      	str	r3, [r5, #12]
    c806:	60ab      	str	r3, [r5, #8]
    c808:	7013      	strb	r3, [r2, #0]
    c80a:	65ab      	str	r3, [r5, #88]	; 0x58
    c80c:	4e53      	ldr	r6, [pc, #332]	; (c95c <_svfiprintf_r+0x1e8>)
    c80e:	7821      	ldrb	r1, [r4, #0]
    c810:	2205      	movs	r2, #5
    c812:	0030      	movs	r0, r6
    c814:	f7ff fe6a 	bl	c4ec <memchr>
    c818:	2800      	cmp	r0, #0
    c81a:	d007      	beq.n	c82c <_svfiprintf_r+0xb8>
    c81c:	2301      	movs	r3, #1
    c81e:	1b80      	subs	r0, r0, r6
    c820:	4083      	lsls	r3, r0
    c822:	682a      	ldr	r2, [r5, #0]
    c824:	3401      	adds	r4, #1
    c826:	4313      	orrs	r3, r2
    c828:	602b      	str	r3, [r5, #0]
    c82a:	e7ef      	b.n	c80c <_svfiprintf_r+0x98>
    c82c:	682b      	ldr	r3, [r5, #0]
    c82e:	06da      	lsls	r2, r3, #27
    c830:	d504      	bpl.n	c83c <_svfiprintf_r+0xc8>
    c832:	2253      	movs	r2, #83	; 0x53
    c834:	2120      	movs	r1, #32
    c836:	a802      	add	r0, sp, #8
    c838:	1812      	adds	r2, r2, r0
    c83a:	7011      	strb	r1, [r2, #0]
    c83c:	071a      	lsls	r2, r3, #28
    c83e:	d504      	bpl.n	c84a <_svfiprintf_r+0xd6>
    c840:	2253      	movs	r2, #83	; 0x53
    c842:	212b      	movs	r1, #43	; 0x2b
    c844:	a802      	add	r0, sp, #8
    c846:	1812      	adds	r2, r2, r0
    c848:	7011      	strb	r1, [r2, #0]
    c84a:	7822      	ldrb	r2, [r4, #0]
    c84c:	2a2a      	cmp	r2, #42	; 0x2a
    c84e:	d003      	beq.n	c858 <_svfiprintf_r+0xe4>
    c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c852:	2000      	movs	r0, #0
    c854:	210a      	movs	r1, #10
    c856:	e00e      	b.n	c876 <_svfiprintf_r+0x102>
    c858:	9a05      	ldr	r2, [sp, #20]
    c85a:	1d11      	adds	r1, r2, #4
    c85c:	6812      	ldr	r2, [r2, #0]
    c85e:	9105      	str	r1, [sp, #20]
    c860:	2a00      	cmp	r2, #0
    c862:	db01      	blt.n	c868 <_svfiprintf_r+0xf4>
    c864:	9209      	str	r2, [sp, #36]	; 0x24
    c866:	e004      	b.n	c872 <_svfiprintf_r+0xfe>
    c868:	4252      	negs	r2, r2
    c86a:	60ea      	str	r2, [r5, #12]
    c86c:	2202      	movs	r2, #2
    c86e:	4313      	orrs	r3, r2
    c870:	602b      	str	r3, [r5, #0]
    c872:	3401      	adds	r4, #1
    c874:	e00b      	b.n	c88e <_svfiprintf_r+0x11a>
    c876:	7822      	ldrb	r2, [r4, #0]
    c878:	3a30      	subs	r2, #48	; 0x30
    c87a:	2a09      	cmp	r2, #9
    c87c:	d804      	bhi.n	c888 <_svfiprintf_r+0x114>
    c87e:	434b      	muls	r3, r1
    c880:	3401      	adds	r4, #1
    c882:	189b      	adds	r3, r3, r2
    c884:	2001      	movs	r0, #1
    c886:	e7f6      	b.n	c876 <_svfiprintf_r+0x102>
    c888:	2800      	cmp	r0, #0
    c88a:	d000      	beq.n	c88e <_svfiprintf_r+0x11a>
    c88c:	9309      	str	r3, [sp, #36]	; 0x24
    c88e:	7823      	ldrb	r3, [r4, #0]
    c890:	2b2e      	cmp	r3, #46	; 0x2e
    c892:	d11e      	bne.n	c8d2 <_svfiprintf_r+0x15e>
    c894:	7863      	ldrb	r3, [r4, #1]
    c896:	2b2a      	cmp	r3, #42	; 0x2a
    c898:	d10a      	bne.n	c8b0 <_svfiprintf_r+0x13c>
    c89a:	9b05      	ldr	r3, [sp, #20]
    c89c:	3402      	adds	r4, #2
    c89e:	1d1a      	adds	r2, r3, #4
    c8a0:	681b      	ldr	r3, [r3, #0]
    c8a2:	9205      	str	r2, [sp, #20]
    c8a4:	2b00      	cmp	r3, #0
    c8a6:	da01      	bge.n	c8ac <_svfiprintf_r+0x138>
    c8a8:	2301      	movs	r3, #1
    c8aa:	425b      	negs	r3, r3
    c8ac:	9307      	str	r3, [sp, #28]
    c8ae:	e010      	b.n	c8d2 <_svfiprintf_r+0x15e>
    c8b0:	2300      	movs	r3, #0
    c8b2:	200a      	movs	r0, #10
    c8b4:	001a      	movs	r2, r3
    c8b6:	3401      	adds	r4, #1
    c8b8:	606b      	str	r3, [r5, #4]
    c8ba:	7821      	ldrb	r1, [r4, #0]
    c8bc:	3930      	subs	r1, #48	; 0x30
    c8be:	2909      	cmp	r1, #9
    c8c0:	d804      	bhi.n	c8cc <_svfiprintf_r+0x158>
    c8c2:	4342      	muls	r2, r0
    c8c4:	3401      	adds	r4, #1
    c8c6:	1852      	adds	r2, r2, r1
    c8c8:	2301      	movs	r3, #1
    c8ca:	e7f6      	b.n	c8ba <_svfiprintf_r+0x146>
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	d000      	beq.n	c8d2 <_svfiprintf_r+0x15e>
    c8d0:	9207      	str	r2, [sp, #28]
    c8d2:	4e23      	ldr	r6, [pc, #140]	; (c960 <_svfiprintf_r+0x1ec>)
    c8d4:	7821      	ldrb	r1, [r4, #0]
    c8d6:	2203      	movs	r2, #3
    c8d8:	0030      	movs	r0, r6
    c8da:	f7ff fe07 	bl	c4ec <memchr>
    c8de:	2800      	cmp	r0, #0
    c8e0:	d006      	beq.n	c8f0 <_svfiprintf_r+0x17c>
    c8e2:	2340      	movs	r3, #64	; 0x40
    c8e4:	1b80      	subs	r0, r0, r6
    c8e6:	4083      	lsls	r3, r0
    c8e8:	682a      	ldr	r2, [r5, #0]
    c8ea:	3401      	adds	r4, #1
    c8ec:	4313      	orrs	r3, r2
    c8ee:	602b      	str	r3, [r5, #0]
    c8f0:	7821      	ldrb	r1, [r4, #0]
    c8f2:	2206      	movs	r2, #6
    c8f4:	481b      	ldr	r0, [pc, #108]	; (c964 <_svfiprintf_r+0x1f0>)
    c8f6:	1c66      	adds	r6, r4, #1
    c8f8:	7629      	strb	r1, [r5, #24]
    c8fa:	f7ff fdf7 	bl	c4ec <memchr>
    c8fe:	2800      	cmp	r0, #0
    c900:	d012      	beq.n	c928 <_svfiprintf_r+0x1b4>
    c902:	4b19      	ldr	r3, [pc, #100]	; (c968 <_svfiprintf_r+0x1f4>)
    c904:	2b00      	cmp	r3, #0
    c906:	d106      	bne.n	c916 <_svfiprintf_r+0x1a2>
    c908:	2207      	movs	r2, #7
    c90a:	9b05      	ldr	r3, [sp, #20]
    c90c:	3307      	adds	r3, #7
    c90e:	4393      	bics	r3, r2
    c910:	3308      	adds	r3, #8
    c912:	9305      	str	r3, [sp, #20]
    c914:	e014      	b.n	c940 <_svfiprintf_r+0x1cc>
    c916:	ab05      	add	r3, sp, #20
    c918:	9300      	str	r3, [sp, #0]
    c91a:	003a      	movs	r2, r7
    c91c:	4b13      	ldr	r3, [pc, #76]	; (c96c <_svfiprintf_r+0x1f8>)
    c91e:	0029      	movs	r1, r5
    c920:	9802      	ldr	r0, [sp, #8]
    c922:	e000      	b.n	c926 <_svfiprintf_r+0x1b2>
    c924:	bf00      	nop
    c926:	e007      	b.n	c938 <_svfiprintf_r+0x1c4>
    c928:	ab05      	add	r3, sp, #20
    c92a:	9300      	str	r3, [sp, #0]
    c92c:	003a      	movs	r2, r7
    c92e:	4b0f      	ldr	r3, [pc, #60]	; (c96c <_svfiprintf_r+0x1f8>)
    c930:	0029      	movs	r1, r5
    c932:	9802      	ldr	r0, [sp, #8]
    c934:	f7ff f81a 	bl	b96c <_printf_i>
    c938:	9003      	str	r0, [sp, #12]
    c93a:	9b03      	ldr	r3, [sp, #12]
    c93c:	3301      	adds	r3, #1
    c93e:	d004      	beq.n	c94a <_svfiprintf_r+0x1d6>
    c940:	696b      	ldr	r3, [r5, #20]
    c942:	9a03      	ldr	r2, [sp, #12]
    c944:	189b      	adds	r3, r3, r2
    c946:	616b      	str	r3, [r5, #20]
    c948:	e735      	b.n	c7b6 <_svfiprintf_r+0x42>
    c94a:	89bb      	ldrh	r3, [r7, #12]
    c94c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c94e:	065b      	lsls	r3, r3, #25
    c950:	d501      	bpl.n	c956 <_svfiprintf_r+0x1e2>
    c952:	2001      	movs	r0, #1
    c954:	4240      	negs	r0, r0
    c956:	b01f      	add	sp, #124	; 0x7c
    c958:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c95a:	46c0      	nop			; (mov r8, r8)
    c95c:	0000e040 	.word	0x0000e040
    c960:	0000e046 	.word	0x0000e046
    c964:	0000e04a 	.word	0x0000e04a
    c968:	00000000 	.word	0x00000000
    c96c:	0000c6b1 	.word	0x0000c6b1

0000c970 <_putc_r>:
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	0006      	movs	r6, r0
    c974:	000d      	movs	r5, r1
    c976:	0014      	movs	r4, r2
    c978:	2800      	cmp	r0, #0
    c97a:	d004      	beq.n	c986 <_putc_r+0x16>
    c97c:	6983      	ldr	r3, [r0, #24]
    c97e:	2b00      	cmp	r3, #0
    c980:	d101      	bne.n	c986 <_putc_r+0x16>
    c982:	f7ff fcb1 	bl	c2e8 <__sinit>
    c986:	4b12      	ldr	r3, [pc, #72]	; (c9d0 <_putc_r+0x60>)
    c988:	429c      	cmp	r4, r3
    c98a:	d101      	bne.n	c990 <_putc_r+0x20>
    c98c:	6874      	ldr	r4, [r6, #4]
    c98e:	e008      	b.n	c9a2 <_putc_r+0x32>
    c990:	4b10      	ldr	r3, [pc, #64]	; (c9d4 <_putc_r+0x64>)
    c992:	429c      	cmp	r4, r3
    c994:	d101      	bne.n	c99a <_putc_r+0x2a>
    c996:	68b4      	ldr	r4, [r6, #8]
    c998:	e003      	b.n	c9a2 <_putc_r+0x32>
    c99a:	4b0f      	ldr	r3, [pc, #60]	; (c9d8 <_putc_r+0x68>)
    c99c:	429c      	cmp	r4, r3
    c99e:	d100      	bne.n	c9a2 <_putc_r+0x32>
    c9a0:	68f4      	ldr	r4, [r6, #12]
    c9a2:	68a3      	ldr	r3, [r4, #8]
    c9a4:	3b01      	subs	r3, #1
    c9a6:	60a3      	str	r3, [r4, #8]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	da05      	bge.n	c9b8 <_putc_r+0x48>
    c9ac:	69a2      	ldr	r2, [r4, #24]
    c9ae:	4293      	cmp	r3, r2
    c9b0:	db08      	blt.n	c9c4 <_putc_r+0x54>
    c9b2:	b2eb      	uxtb	r3, r5
    c9b4:	2b0a      	cmp	r3, #10
    c9b6:	d005      	beq.n	c9c4 <_putc_r+0x54>
    c9b8:	6823      	ldr	r3, [r4, #0]
    c9ba:	b2e8      	uxtb	r0, r5
    c9bc:	1c5a      	adds	r2, r3, #1
    c9be:	6022      	str	r2, [r4, #0]
    c9c0:	701d      	strb	r5, [r3, #0]
    c9c2:	e004      	b.n	c9ce <_putc_r+0x5e>
    c9c4:	0022      	movs	r2, r4
    c9c6:	0029      	movs	r1, r5
    c9c8:	0030      	movs	r0, r6
    c9ca:	f7ff fac3 	bl	bf54 <__swbuf_r>
    c9ce:	bd70      	pop	{r4, r5, r6, pc}
    c9d0:	0000e074 	.word	0x0000e074
    c9d4:	0000e094 	.word	0x0000e094
    c9d8:	0000e0b4 	.word	0x0000e0b4

0000c9dc <_sbrk_r>:
    c9dc:	2300      	movs	r3, #0
    c9de:	b570      	push	{r4, r5, r6, lr}
    c9e0:	4c06      	ldr	r4, [pc, #24]	; (c9fc <_sbrk_r+0x20>)
    c9e2:	0005      	movs	r5, r0
    c9e4:	0008      	movs	r0, r1
    c9e6:	6023      	str	r3, [r4, #0]
    c9e8:	f7fa fe88 	bl	76fc <_sbrk>
    c9ec:	1c43      	adds	r3, r0, #1
    c9ee:	d103      	bne.n	c9f8 <_sbrk_r+0x1c>
    c9f0:	6823      	ldr	r3, [r4, #0]
    c9f2:	2b00      	cmp	r3, #0
    c9f4:	d000      	beq.n	c9f8 <_sbrk_r+0x1c>
    c9f6:	602b      	str	r3, [r5, #0]
    c9f8:	bd70      	pop	{r4, r5, r6, pc}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	20004674 	.word	0x20004674

0000ca00 <_raise_r>:
    ca00:	b570      	push	{r4, r5, r6, lr}
    ca02:	0004      	movs	r4, r0
    ca04:	1e0d      	subs	r5, r1, #0
    ca06:	2d1f      	cmp	r5, #31
    ca08:	d904      	bls.n	ca14 <_raise_r+0x14>
    ca0a:	2316      	movs	r3, #22
    ca0c:	6003      	str	r3, [r0, #0]
    ca0e:	2001      	movs	r0, #1
    ca10:	4240      	negs	r0, r0
    ca12:	e01e      	b.n	ca52 <_raise_r+0x52>
    ca14:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ca16:	2a00      	cmp	r2, #0
    ca18:	d004      	beq.n	ca24 <_raise_r+0x24>
    ca1a:	008b      	lsls	r3, r1, #2
    ca1c:	18d2      	adds	r2, r2, r3
    ca1e:	6813      	ldr	r3, [r2, #0]
    ca20:	2b00      	cmp	r3, #0
    ca22:	d108      	bne.n	ca36 <_raise_r+0x36>
    ca24:	0020      	movs	r0, r4
    ca26:	f000 f831 	bl	ca8c <_getpid_r>
    ca2a:	002a      	movs	r2, r5
    ca2c:	0001      	movs	r1, r0
    ca2e:	0020      	movs	r0, r4
    ca30:	f000 f81a 	bl	ca68 <_kill_r>
    ca34:	e00d      	b.n	ca52 <_raise_r+0x52>
    ca36:	2000      	movs	r0, #0
    ca38:	2b01      	cmp	r3, #1
    ca3a:	d00a      	beq.n	ca52 <_raise_r+0x52>
    ca3c:	1c59      	adds	r1, r3, #1
    ca3e:	d103      	bne.n	ca48 <_raise_r+0x48>
    ca40:	3317      	adds	r3, #23
    ca42:	6023      	str	r3, [r4, #0]
    ca44:	3001      	adds	r0, #1
    ca46:	e004      	b.n	ca52 <_raise_r+0x52>
    ca48:	2400      	movs	r4, #0
    ca4a:	0028      	movs	r0, r5
    ca4c:	6014      	str	r4, [r2, #0]
    ca4e:	4798      	blx	r3
    ca50:	0020      	movs	r0, r4
    ca52:	bd70      	pop	{r4, r5, r6, pc}

0000ca54 <raise>:
    ca54:	b510      	push	{r4, lr}
    ca56:	4b03      	ldr	r3, [pc, #12]	; (ca64 <raise+0x10>)
    ca58:	0001      	movs	r1, r0
    ca5a:	6818      	ldr	r0, [r3, #0]
    ca5c:	f7ff ffd0 	bl	ca00 <_raise_r>
    ca60:	bd10      	pop	{r4, pc}
    ca62:	46c0      	nop			; (mov r8, r8)
    ca64:	20000090 	.word	0x20000090

0000ca68 <_kill_r>:
    ca68:	2300      	movs	r3, #0
    ca6a:	b570      	push	{r4, r5, r6, lr}
    ca6c:	4c06      	ldr	r4, [pc, #24]	; (ca88 <_kill_r+0x20>)
    ca6e:	0005      	movs	r5, r0
    ca70:	0008      	movs	r0, r1
    ca72:	0011      	movs	r1, r2
    ca74:	6023      	str	r3, [r4, #0]
    ca76:	f7fa fe97 	bl	77a8 <_kill>
    ca7a:	1c43      	adds	r3, r0, #1
    ca7c:	d103      	bne.n	ca86 <_kill_r+0x1e>
    ca7e:	6823      	ldr	r3, [r4, #0]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d000      	beq.n	ca86 <_kill_r+0x1e>
    ca84:	602b      	str	r3, [r5, #0]
    ca86:	bd70      	pop	{r4, r5, r6, pc}
    ca88:	20004674 	.word	0x20004674

0000ca8c <_getpid_r>:
    ca8c:	b510      	push	{r4, lr}
    ca8e:	f7fa fe95 	bl	77bc <_getpid>
    ca92:	bd10      	pop	{r4, pc}

0000ca94 <__sread>:
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	000c      	movs	r4, r1
    ca98:	250e      	movs	r5, #14
    ca9a:	5f49      	ldrsh	r1, [r1, r5]
    ca9c:	f000 f8b0 	bl	cc00 <_read_r>
    caa0:	2800      	cmp	r0, #0
    caa2:	db03      	blt.n	caac <__sread+0x18>
    caa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    caa6:	181b      	adds	r3, r3, r0
    caa8:	6563      	str	r3, [r4, #84]	; 0x54
    caaa:	e003      	b.n	cab4 <__sread+0x20>
    caac:	89a2      	ldrh	r2, [r4, #12]
    caae:	4b02      	ldr	r3, [pc, #8]	; (cab8 <__sread+0x24>)
    cab0:	4013      	ands	r3, r2
    cab2:	81a3      	strh	r3, [r4, #12]
    cab4:	bd70      	pop	{r4, r5, r6, pc}
    cab6:	46c0      	nop			; (mov r8, r8)
    cab8:	ffffefff 	.word	0xffffefff

0000cabc <__swrite>:
    cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cabe:	001f      	movs	r7, r3
    cac0:	898b      	ldrh	r3, [r1, #12]
    cac2:	0005      	movs	r5, r0
    cac4:	000c      	movs	r4, r1
    cac6:	0016      	movs	r6, r2
    cac8:	05db      	lsls	r3, r3, #23
    caca:	d505      	bpl.n	cad8 <__swrite+0x1c>
    cacc:	230e      	movs	r3, #14
    cace:	5ec9      	ldrsh	r1, [r1, r3]
    cad0:	2200      	movs	r2, #0
    cad2:	2302      	movs	r3, #2
    cad4:	f000 f874 	bl	cbc0 <_lseek_r>
    cad8:	89a2      	ldrh	r2, [r4, #12]
    cada:	4b05      	ldr	r3, [pc, #20]	; (caf0 <__swrite+0x34>)
    cadc:	0028      	movs	r0, r5
    cade:	4013      	ands	r3, r2
    cae0:	81a3      	strh	r3, [r4, #12]
    cae2:	0032      	movs	r2, r6
    cae4:	230e      	movs	r3, #14
    cae6:	5ee1      	ldrsh	r1, [r4, r3]
    cae8:	003b      	movs	r3, r7
    caea:	f000 f81f 	bl	cb2c <_write_r>
    caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    caf0:	ffffefff 	.word	0xffffefff

0000caf4 <__sseek>:
    caf4:	b570      	push	{r4, r5, r6, lr}
    caf6:	000c      	movs	r4, r1
    caf8:	250e      	movs	r5, #14
    cafa:	5f49      	ldrsh	r1, [r1, r5]
    cafc:	f000 f860 	bl	cbc0 <_lseek_r>
    cb00:	89a3      	ldrh	r3, [r4, #12]
    cb02:	1c42      	adds	r2, r0, #1
    cb04:	d103      	bne.n	cb0e <__sseek+0x1a>
    cb06:	4a05      	ldr	r2, [pc, #20]	; (cb1c <__sseek+0x28>)
    cb08:	4013      	ands	r3, r2
    cb0a:	81a3      	strh	r3, [r4, #12]
    cb0c:	e004      	b.n	cb18 <__sseek+0x24>
    cb0e:	2280      	movs	r2, #128	; 0x80
    cb10:	0152      	lsls	r2, r2, #5
    cb12:	4313      	orrs	r3, r2
    cb14:	81a3      	strh	r3, [r4, #12]
    cb16:	6560      	str	r0, [r4, #84]	; 0x54
    cb18:	bd70      	pop	{r4, r5, r6, pc}
    cb1a:	46c0      	nop			; (mov r8, r8)
    cb1c:	ffffefff 	.word	0xffffefff

0000cb20 <__sclose>:
    cb20:	b510      	push	{r4, lr}
    cb22:	230e      	movs	r3, #14
    cb24:	5ec9      	ldrsh	r1, [r1, r3]
    cb26:	f000 f815 	bl	cb54 <_close_r>
    cb2a:	bd10      	pop	{r4, pc}

0000cb2c <_write_r>:
    cb2c:	b570      	push	{r4, r5, r6, lr}
    cb2e:	0005      	movs	r5, r0
    cb30:	0008      	movs	r0, r1
    cb32:	0011      	movs	r1, r2
    cb34:	2200      	movs	r2, #0
    cb36:	4c06      	ldr	r4, [pc, #24]	; (cb50 <_write_r+0x24>)
    cb38:	6022      	str	r2, [r4, #0]
    cb3a:	001a      	movs	r2, r3
    cb3c:	f7fa fda8 	bl	7690 <_write>
    cb40:	1c43      	adds	r3, r0, #1
    cb42:	d103      	bne.n	cb4c <_write_r+0x20>
    cb44:	6823      	ldr	r3, [r4, #0]
    cb46:	2b00      	cmp	r3, #0
    cb48:	d000      	beq.n	cb4c <_write_r+0x20>
    cb4a:	602b      	str	r3, [r5, #0]
    cb4c:	bd70      	pop	{r4, r5, r6, pc}
    cb4e:	46c0      	nop			; (mov r8, r8)
    cb50:	20004674 	.word	0x20004674

0000cb54 <_close_r>:
    cb54:	2300      	movs	r3, #0
    cb56:	b570      	push	{r4, r5, r6, lr}
    cb58:	4c06      	ldr	r4, [pc, #24]	; (cb74 <_close_r+0x20>)
    cb5a:	0005      	movs	r5, r0
    cb5c:	0008      	movs	r0, r1
    cb5e:	6023      	str	r3, [r4, #0]
    cb60:	f7fa fdea 	bl	7738 <_close>
    cb64:	1c43      	adds	r3, r0, #1
    cb66:	d103      	bne.n	cb70 <_close_r+0x1c>
    cb68:	6823      	ldr	r3, [r4, #0]
    cb6a:	2b00      	cmp	r3, #0
    cb6c:	d000      	beq.n	cb70 <_close_r+0x1c>
    cb6e:	602b      	str	r3, [r5, #0]
    cb70:	bd70      	pop	{r4, r5, r6, pc}
    cb72:	46c0      	nop			; (mov r8, r8)
    cb74:	20004674 	.word	0x20004674

0000cb78 <_fstat_r>:
    cb78:	2300      	movs	r3, #0
    cb7a:	b570      	push	{r4, r5, r6, lr}
    cb7c:	4c06      	ldr	r4, [pc, #24]	; (cb98 <_fstat_r+0x20>)
    cb7e:	0005      	movs	r5, r0
    cb80:	0008      	movs	r0, r1
    cb82:	0011      	movs	r1, r2
    cb84:	6023      	str	r3, [r4, #0]
    cb86:	f7fa fde1 	bl	774c <_fstat>
    cb8a:	1c43      	adds	r3, r0, #1
    cb8c:	d103      	bne.n	cb96 <_fstat_r+0x1e>
    cb8e:	6823      	ldr	r3, [r4, #0]
    cb90:	2b00      	cmp	r3, #0
    cb92:	d000      	beq.n	cb96 <_fstat_r+0x1e>
    cb94:	602b      	str	r3, [r5, #0]
    cb96:	bd70      	pop	{r4, r5, r6, pc}
    cb98:	20004674 	.word	0x20004674

0000cb9c <_isatty_r>:
    cb9c:	2300      	movs	r3, #0
    cb9e:	b570      	push	{r4, r5, r6, lr}
    cba0:	4c06      	ldr	r4, [pc, #24]	; (cbbc <_isatty_r+0x20>)
    cba2:	0005      	movs	r5, r0
    cba4:	0008      	movs	r0, r1
    cba6:	6023      	str	r3, [r4, #0]
    cba8:	f7fa fdde 	bl	7768 <_isatty>
    cbac:	1c43      	adds	r3, r0, #1
    cbae:	d103      	bne.n	cbb8 <_isatty_r+0x1c>
    cbb0:	6823      	ldr	r3, [r4, #0]
    cbb2:	2b00      	cmp	r3, #0
    cbb4:	d000      	beq.n	cbb8 <_isatty_r+0x1c>
    cbb6:	602b      	str	r3, [r5, #0]
    cbb8:	bd70      	pop	{r4, r5, r6, pc}
    cbba:	46c0      	nop			; (mov r8, r8)
    cbbc:	20004674 	.word	0x20004674

0000cbc0 <_lseek_r>:
    cbc0:	b570      	push	{r4, r5, r6, lr}
    cbc2:	0005      	movs	r5, r0
    cbc4:	0008      	movs	r0, r1
    cbc6:	0011      	movs	r1, r2
    cbc8:	2200      	movs	r2, #0
    cbca:	4c06      	ldr	r4, [pc, #24]	; (cbe4 <_lseek_r+0x24>)
    cbcc:	6022      	str	r2, [r4, #0]
    cbce:	001a      	movs	r2, r3
    cbd0:	f7fa fdd4 	bl	777c <_lseek>
    cbd4:	1c43      	adds	r3, r0, #1
    cbd6:	d103      	bne.n	cbe0 <_lseek_r+0x20>
    cbd8:	6823      	ldr	r3, [r4, #0]
    cbda:	2b00      	cmp	r3, #0
    cbdc:	d000      	beq.n	cbe0 <_lseek_r+0x20>
    cbde:	602b      	str	r3, [r5, #0]
    cbe0:	bd70      	pop	{r4, r5, r6, pc}
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	20004674 	.word	0x20004674

0000cbe8 <_malloc_usable_size_r>:
    cbe8:	1f0b      	subs	r3, r1, #4
    cbea:	681a      	ldr	r2, [r3, #0]
    cbec:	1f10      	subs	r0, r2, #4
    cbee:	2a00      	cmp	r2, #0
    cbf0:	da04      	bge.n	cbfc <_malloc_usable_size_r+0x14>
    cbf2:	1889      	adds	r1, r1, r2
    cbf4:	3904      	subs	r1, #4
    cbf6:	680b      	ldr	r3, [r1, #0]
    cbf8:	18d0      	adds	r0, r2, r3
    cbfa:	3804      	subs	r0, #4
    cbfc:	4770      	bx	lr
	...

0000cc00 <_read_r>:
    cc00:	b570      	push	{r4, r5, r6, lr}
    cc02:	0005      	movs	r5, r0
    cc04:	0008      	movs	r0, r1
    cc06:	0011      	movs	r1, r2
    cc08:	2200      	movs	r2, #0
    cc0a:	4c06      	ldr	r4, [pc, #24]	; (cc24 <_read_r+0x24>)
    cc0c:	6022      	str	r2, [r4, #0]
    cc0e:	001a      	movs	r2, r3
    cc10:	f7fa fd14 	bl	763c <_read>
    cc14:	1c43      	adds	r3, r0, #1
    cc16:	d103      	bne.n	cc20 <_read_r+0x20>
    cc18:	6823      	ldr	r3, [r4, #0]
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	d000      	beq.n	cc20 <_read_r+0x20>
    cc1e:	602b      	str	r3, [r5, #0]
    cc20:	bd70      	pop	{r4, r5, r6, pc}
    cc22:	46c0      	nop			; (mov r8, r8)
    cc24:	20004674 	.word	0x20004674
    cc28:	6f727245 	.word	0x6f727245
    cc2c:	55202172 	.word	0x55202172
    cc30:	6c62616e 	.word	0x6c62616e
    cc34:	6f742065 	.word	0x6f742065
    cc38:	61657220 	.word	0x61657220
    cc3c:	75622064 	.word	0x75622064
    cc40:	6e6f7474 	.word	0x6e6f7474
    cc44:	61747320 	.word	0x61747320
    cc48:	00737574 	.word	0x00737574

0000cc4c <tm1640_segments>:
    cc4c:	04020100 40201008 4f5b061f 077d6d66     ...... @..[Ofm}.
    cc5c:	71396f7f 00747679 20697053 6f727265     .o9qyvt.Spi erro
    cc6c:	00002172 6c696146 74206465 6e69206f     r!..Failed to in
    cc7c:	61697469 657a696c 314d5420 5f303436     itialize TM1640_
    cc8c:	43524553 00214d4f 6c696166 74206465     SERCOM!.failed t
    cc9c:	6e69206f 61697469 657a696c 43545720     o initialize WTC
    ccac:	38303536 00000021 50504128 52452829     6508!...(APP)(ER
    ccbc:	255b2952 255b5d73 00005d64 61766e69     R)[%s][%d]..inva
    cccc:	6564696c 636f6920 6320746c 0000646d     lide ioclt cmd..

0000ccdc <__FUNCTION__.14703>:
    ccdc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    ccec:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    ccfc:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
    cd0c:	6b617720 74207075 63206568 00706968      wakup the chip.
    cd1c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    cd2c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    cd3c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    cd4c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    cd5c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    cd6c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    cd7c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    cd8c:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    cd9c:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    cdac:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    cdbc:	64207070 276e6469 65732074 58522074     pp didn't set RX
    cdcc:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    cddc:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    cdec:	61462029 2065736c 65746e69 70757272     ) False interrup
    cdfc:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    ce0c:	74206c69 6552206f 69206461 7265746e     il to Read inter
    ce1c:	74707572 67657220 00000000 66696828     rupt reg....(hif
    ce2c:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    ce3c:	65687420 69686320 00000070 46494828      the chip...(HIF
    ce4c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    ce5c:	746e6920 75727265 25207470 72742064      interrupt %d tr
    ce6c:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    ce7c:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    ce8c:	72612064 656d7567 0000746e 20505041     d argument..APP 
    ce9c:	75716552 65747365 69532064 6920657a     Requested Size i
    ceac:	616c2073 72656772 61687420 6874206e     s larger than th
    cebc:	65722065 65766963 75622064 72656666     e recived buffer
    cecc:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    cedc:	20505041 75716552 65747365 64412064     APP Requested Ad
    ceec:	73657264 65622073 646e6f79 65687420     dress beyond the
    cefc:	63657220 64657669 66756220 20726566      recived buffer 
    cf0c:	72646461 20737365 20646e61 676e656c     address and leng
    cf1c:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

0000cf2c <__FUNCTION__.12480>:
    cf2c:	5f666968 646e6573 00000000              hif_send....

0000cf38 <__FUNCTION__.12490>:
    cf38:	5f666968 00727369                       hif_isr.

0000cf40 <__FUNCTION__.12496>:
    cf40:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
    cf50:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    cf60:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    cf70:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    cf80:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    cf90:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    cfa0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    cfb0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    cfc0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    cfd0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    cfe0:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    cff0:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    d000:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    d010:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    d020:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    d030:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    d040:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    d050:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    d060:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    d070:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    d080:	2065626f 75716572 73747365 72657020     obe requests per
    d090:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    d0a0:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    d0b0:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
    d0c0:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    d0d0:	00000a75 206e694d 76697264 76207265     u...Min driver v
    d0e0:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    d0f0:	72727543 69726420 20726576 3a726576     Curr driver ver:
    d100:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    d110:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    d120:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    d130:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    d140:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    d150:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    d160:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    d170:	20706557 2079656b 65646e69 64252078     Wep key index %d
    d180:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    d190:	2079656b 676e656c 25206874 00000a64     key length %d...
    d1a0:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    d1b0:	656c2079 6874676e 00000000 65646e75     y length....unde
    d1c0:	656e6966 65732064 79742063 00006570     fined sec type..
    d1d0:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
    d1e0:	6420746f 6e696665 00006465 7473694c     ot defined..List
    d1f0:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
    d200:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
    d210:	31312072 00000000 45574f50 41532052     r 11....POWER SA
    d220:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    d230:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    d240:	66754220 20726566 65637865 64656465      Buffer exceeded
    d250:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    d260:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    d270:	00000000                                ....

0000d274 <__FUNCTION__.12505>:
    d274:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    d284:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    d294:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    d2a4:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
    d2b4:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
    d2c4:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
    d2d4:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
    d2e4:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
    d2f4:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
    d304:	61747320 3a5d7472 69616620 6572206c      start]: fail re
    d314:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
    d324:	0000002e 6c696166 74206465 6564206f     ....failed to de
    d334:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
    d344:	68772072 20656c69 74697277 20676e69     r while writing 
    d354:	00676572 6f727245 68772072 20656c69     reg.Error while 
    d364:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
    d374:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    d384:	6f742064 61657220 00000064 6c75705b     d to read...[pul
    d394:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    d3a4:	6f742064 69727720 00006574              d to write..

0000d3b0 <__FUNCTION__.12290>:
    d3b0:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0000d3c0 <crc7_syndrome_table>:
    d3c0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    d3d0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    d3e0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    d3f0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    d400:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    d410:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    d420:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    d430:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    d440:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    d450:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    d460:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    d470:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    d480:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    d490:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    d4a0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    d4b0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    d4c0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d4d0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    d4e0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    d4f0:	73756220 72726520 2e2e726f 0000002e      bus error......
    d500:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d510:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    d520:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    d530:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d540:	656c6961 61642064 72206174 6f707365     ailed data respo
    d550:	2065736e 64616572 7562202c 72652073     nse read, bus er
    d560:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    d570:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    d580:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    d590:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    d5a0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d5b0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    d5c0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    d5d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d5e0:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    d5f0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    d600:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    d610:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    d620:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    d630:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d640:	656c6961 61642064 62206174 6b636f6c     ailed data block
    d650:	69727720 202c6574 20737562 6f727265      write, bus erro
    d660:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    d670:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d680:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    d690:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    d6a0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d6b0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    d6c0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    d6d0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    d6e0:	65722064 6e6f7073 202c6573 74697277     d response, writ
    d6f0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    d700:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d710:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    d720:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    d730:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    d740:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    d750:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    d760:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    d770:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    d780:	206b636f 61746164 69727720 2e2e6574     ock data write..
    d790:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d7a0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    d7b0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    d7c0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d7d0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    d7e0:	64616572 67657220 30252820 2e297838     read reg (%08x).
    d7f0:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d800:	656c6961 61642064 72206174 2e646165     ailed data read.
    d810:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d820:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    d830:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    d840:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d850:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    d860:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    d870:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    d880:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    d890:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    d8a0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d8b0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    d8c0:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    d8d0:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    d8e0:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    d8f0:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d900:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    d910:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    d920:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d930:	6e692064 6e726574 77206c61 65746972     d internal write
    d940:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    d950:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d960:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    d970:	64692070 002e2e2e 000026e8 000026e8     p id.....&...&..
    d980:	00002778 0000263c 00002682 000026a4     x'..<&...&...&..
    d990:	0000272a 0000272a 000027e4 00002610     *'..*'...'...&..
    d9a0:	0000283e 0000283e 0000283e 0000283e     >(..>(..>(..>(..
    d9b0:	000026c6                                .&..

0000d9b4 <__FUNCTION__.11755>:
    d9b4:	5f697073 00646d63                       spi_cmd.

0000d9bc <__FUNCTION__.11763>:
    d9bc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000d9c8 <__FUNCTION__.11779>:
    d9c8:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000d9d8 <__FUNCTION__.11794>:
    d9d8:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000d9e8 <__FUNCTION__.11804>:
    d9e8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000d9f8 <__FUNCTION__.11812>:
    d9f8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000da08 <__FUNCTION__.11821>:
    da08:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000da18 <__FUNCTION__.11829>:
    da18:	735f6d6e 725f6970 00646165 42000800     nm_spi_read....B
    da28:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    da38:	42001c00 0c0b0a09 00000e0d 00006672     ...B........rf..
    da48:	000066ea 000066ea 00006690 0000668a     .f...f...f...f..
    da58:	00006696 00006678 0000669c 000066d0     .f..xf...f...f..
    da68:	000069b4 00006a04 00006a04 00006a00     .i...j...j...j..
    da78:	000069a6 000069c6 00006996 000069d8     .i...i...i...i..
    da88:	000069ea 00006a52 00006a80 00006a80     .i..Rj...j...j..
    da98:	00006a7c 00006a4c 00006a58 00006a46     |j..Lj..Xj..Fj..
    daa8:	00006a5e 00006a64                       ^j..dj..

0000dab0 <_tcc_intflag>:
    dab0:	00000001 00000002 00000004 00000008     ................
    dac0:	00001000 00002000 00004000 00008000     ..... ...@......
    dad0:	00010000 00020000 00040000 00080000     ................
    dae0:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    daf0:	0000995c 0000995c 0000995c 000099ea     \...\...\.......
    db00:	000099b4 000099de 0000995c 0000995c     ........\...\...
    db10:	000099ea 000099b4 6b636f73 725f7465     ........socket_r
    db20:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
    db30:	766c6f73 77206465 20687469 25205049     solved with IP %
    db40:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
    db50:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
    db60:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
    db70:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
    db80:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
    db90:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    dba0:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
    dbb0:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
    dbc0:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
    dbd0:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
    dbe0:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
    dbf0:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
    dc00:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
    dc10:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
    dc20:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
    dc30:	00000030 00000031 6564227b 65636976     0...1...{"device
    dc40:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
    dc50:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
    dc60:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
    dc70:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
    dc80:	7570203a 73696c62 76652068 3a746e65     : publish event:
    dc90:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
    dca0:	72637362 20656269 6e657665 50202c74     bscribe event, P
    dcb0:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
    dcc0:	6572203a 76696563 4c206465 63204445     : received LED c
    dcd0:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
    dce0:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
    dcf0:	6e69616d 6572203a 76696563 6d206465     main: received m
    dd00:	61737365 203a6567 0a0d7325 00000000     essage: %s......
    dd10:	6e69616d 7573203a 72637362 20656269     main: subscribe 
    dd20:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
    dd30:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
    dd40:	3a21776f 0a732520 0000000d 6b736174     ow!: %s.....task
    dd50:	0073335f 6b736174 0073315f 6b736174     _3s.task_1s.task
    dd60:	4830355f 0000007a 73627570 702e6275     _50Hz...pubsub.p
    dd70:	756e6275 6f632e62 0000006d 20544547     ubnub.com...GET 
    dd80:	48207325 2f505454 0d312e31 736f480a     %s HTTP/1.1..Hos
    dd90:	25203a74 550a0d73 2d726573 6e656741     t: %s..User-Agen
    dda0:	50203a74 754e6275 49572d62 3531434e     t: PubNub-WINC15
    ddb0:	0a0d3030 6e6e6f43 69746365 203a6e6f     00..Connection: 
    ddc0:	7065654b 696c412d 0a0d6576 00000a0d     Keep-Alive......
    ddd0:	696c6176 74635f64 72705f78 62702874     valid_ctx_prt(pb
    dde0:	00000029 732f2e2e 502f6372 754e6275     )...../src/PubNu
    ddf0:	00632e62 2d627028 6174733e 3d206574     b.c.(pb->state =
    de00:	5350203d 4c44495f 7c202945 7028207c     = PS_IDLE) || (p
    de10:	733e2d62 65746174 203d3d20 575f5350     b->state == PS_W
    de20:	5f544941 29534e44 207c7c20 2d627028     AIT_DNS) || (pb-
    de30:	6174733e 3d206574 5350203d 4941575f     >state == PS_WAI
    de40:	4f435f54 43454e4e 00002954 6c696166     T_CONNECT)..fail
    de50:	74206465 7263206f 65746165 50435420     ed to create TCP
    de60:	696c6320 20746e65 6b636f73 65207465      client socket e
    de70:	726f7272 00000d21 746e6f43 2d746e65     rror!...Content-
    de80:	676e654c 203a6874 00000000 0000005b     Length: ....[...
    de90:	65646e69 203c2078 4e425550 435f4255     index < PUBNUB_C
    dea0:	4d5f5854 00005841 6275702f 6873696c     TX_MAX../publish
    deb0:	2f73252f 302f7325 2f73252f 00002f30     /%s/%s/0/%s/0/..
    dec0:	64636261 68676665 6c6b6a69 706f6e6d     abcdefghijklmnop
    ded0:	74737271 78777675 42417a79 46454443     qrstuvwxyzABCDEF
    dee0:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
    def0:	5a595857 33323130 37363534 5f2d3938     WXYZ0123456789-_
    df00:	3d2c7e2e 5b403b3a 0000005d 33323130     .~,=:;@[]...0123
    df10:	37363534 42413938 46454443 00000000     456789ABCDEF....
    df20:	64697575 0000003d 00000000 00000026     uuid=.......&...
    df30:	68747561 0000003d 6275732f 69726373     auth=.../subscri
    df40:	252f6562 73252f73 252f302f 73253f73     be/%s/%s/0/%s?%s
    df50:	73257325 73257325 736e7026 573d6b64     %s%s%s%s&pnsdk=W
    df60:	31434e49 25303035 32252573 00732546     INC1500%s%%2F%s.
    df70:	00312e30                                0.1.

0000df74 <__func__.12046>:
    df74:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
    df84:	7463656e 00000000                       nect....

0000df8c <__func__.12136>:
    df8c:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

0000df9c <__func__.12147>:
    df9c:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
    dfac:	00000000                                ....

0000dfb0 <__func__.12151>:
    dfb0:	6e627570 675f6275 00007465 0000b190     pubnub_get......
    dfc0:	0000b050 0000b050 0000b04e 0000b168     P...P...N...h...
    dfd0:	0000b168 0000b15a 0000b04e 0000b168     h...Z...N...h...
    dfe0:	0000b15a 0000b168 0000b04e 0000b170     Z...h...N...p...
    dff0:	0000b170 0000b170 0000b370 7566202c     p...p...p..., fu
    e000:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
    e010:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
    e020:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
    e030:	73256425 000a7325 00000043              %d%s%s..C...

0000e03c <_global_impure_ptr>:
    e03c:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
    e04c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    e05c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    e06c:	64636261 00006665                       abcdef..

0000e074 <__sf_fake_stdin>:
	...

0000e094 <__sf_fake_stdout>:
	...

0000e0b4 <__sf_fake_stderr>:
	...

0000e0d4 <_init>:
    e0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0d6:	46c0      	nop			; (mov r8, r8)
    e0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e0da:	bc08      	pop	{r3}
    e0dc:	469e      	mov	lr, r3
    e0de:	4770      	bx	lr

0000e0e0 <__init_array_start>:
    e0e0:	000000dd 	.word	0x000000dd

0000e0e4 <_fini>:
    e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0e6:	46c0      	nop			; (mov r8, r8)
    e0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e0ea:	bc08      	pop	{r3}
    e0ec:	469e      	mov	lr, r3
    e0ee:	4770      	bx	lr

0000e0f0 <__fini_array_start>:
    e0f0:	000000b5 	.word	0x000000b5
