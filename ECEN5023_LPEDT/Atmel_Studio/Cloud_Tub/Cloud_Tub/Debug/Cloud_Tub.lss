
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014088  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00014088  00014088  00024088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000a0  20000000  00014090  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004768  200000a0  00014130  000300a0  2**2
                  ALLOC
  4 .stack        00002000  20004808  00018898  000300a0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00055f76  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000071cf  00000000  00000000  00086097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000098a9  00000000  00000000  0008d266  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b20  00000000  00000000  00096b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001900  00000000  00000000  0009862f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002628e  00000000  00000000  00099f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002575b  00000000  00000000  000c01bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c5f0  00000000  00000000  000e5918  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006a60  00000000  00000000  00181f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006808 	.word	0x20006808
       4:	0000bef1 	.word	0x0000bef1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	0000bfe9 	.word	0x0000bfe9
       c:	0000f35d 	.word	0x0000f35d
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000c351 	.word	0x0000c351
	...
      38:	0000c471 	.word	0x0000c471
      3c:	0000c4b9 	.word	0x0000c4b9
      40:	0000bfe9 	.word	0x0000bfe9

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	0000bfe9 	.word	0x0000bfe9
      48:	0000bfe9 	.word	0x0000bfe9
      4c:	00008efd 	.word	0x00008efd
      50:	00008989 	.word	0x00008989
      54:	0000bfe9 	.word	0x0000bfe9
      58:	0000bfe9 	.word	0x0000bfe9
		if (time.hour == 0) {
      5c:	0000bfe9 	.word	0x0000bfe9
      60:	0000bfe9 	.word	0x0000bfe9
			time.hour = 12;
      64:	000095d5 	.word	0x000095d5
      68:	000095ed 	.word	0x000095ed
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00009605 	.word	0x00009605
      70:	0000961d 	.word	0x0000961d
      74:	00009635 	.word	0x00009635
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	0000964d 	.word	0x0000964d
      7c:	0000be39 	.word	0x0000be39
      80:	0000be4d 	.word	0x0000be4d
      84:	0000be61 	.word	0x0000be61
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00000121 	.word	0x00000121
      8c:	00000135 	.word	0x00000135
      90:	00000149 	.word	0x00000149
	...
      9c:	000087b5 	.word	0x000087b5
      a0:	0000bfe9 	.word	0x0000bfe9
      a4:	0000bfe9 	.word	0x0000bfe9
			alarm.time.hour = alarm.time.hour % 12;
      a8:	0000bfe9 	.word	0x0000bfe9
      ac:	0000bfe9 	.word	0x0000bfe9
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	00014090 	.word	0x00014090

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	00014090 	.word	0x00014090
     10c:	00014090 	.word	0x00014090
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
			time.hour = time.hour + 12;
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
     124:	2000      	movs	r0, #0
     126:	4b02      	ldr	r3, [pc, #8]	; (130 <TC3_Handler+0x10>)
     128:	4798      	blx	r3
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	46bd      	mov	sp, r7
     12e:	bd80      	pop	{r7, pc}
     130:	0000015d 	.word	0x0000015d

00000134 <TC4_Handler>:
     134:	b580      	push	{r7, lr}
     136:	af00      	add	r7, sp, #0
     138:	2001      	movs	r0, #1
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <TC4_Handler+0x10>)
     13c:	4798      	blx	r3
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	bd80      	pop	{r7, pc}
     144:	0000015d 	.word	0x0000015d

00000148 <TC5_Handler>:
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
     14c:	2002      	movs	r0, #2
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <TC5_Handler+0x10>)
     150:	4798      	blx	r3
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	bd80      	pop	{r7, pc}
     158:	0000015d 	.word	0x0000015d

0000015c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     15c:	b580      	push	{r7, lr}
     15e:	b084      	sub	sp, #16
     160:	af00      	add	r7, sp, #0
     162:	0002      	movs	r2, r0
     164:	1dfb      	adds	r3, r7, #7
     166:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     168:	1dfb      	adds	r3, r7, #7
     16a:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     16c:	4b28      	ldr	r3, [pc, #160]	; (210 <_tc_interrupt_handler+0xb4>)
     16e:	0092      	lsls	r2, r2, #2
     170:	58d3      	ldr	r3, [r2, r3]
     172:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     174:	68fb      	ldr	r3, [r7, #12]
     176:	681b      	ldr	r3, [r3, #0]
     178:	7b9b      	ldrb	r3, [r3, #14]
     17a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     17c:	68fa      	ldr	r2, [r7, #12]
     17e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     180:	4013      	ands	r3, r2
     182:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     184:	68fb      	ldr	r3, [r7, #12]
     186:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     188:	230b      	movs	r3, #11
     18a:	18fb      	adds	r3, r7, r3
     18c:	400a      	ands	r2, r1
     18e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     190:	230b      	movs	r3, #11
     192:	18fb      	adds	r3, r7, r3
     194:	781b      	ldrb	r3, [r3, #0]
     196:	2201      	movs	r2, #1
     198:	4013      	ands	r3, r2
     19a:	d008      	beq.n	1ae <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     19c:	68fb      	ldr	r3, [r7, #12]
     19e:	689b      	ldr	r3, [r3, #8]
     1a0:	68fa      	ldr	r2, [r7, #12]
     1a2:	0010      	movs	r0, r2
     1a4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     1a6:	68fb      	ldr	r3, [r7, #12]
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	2201      	movs	r2, #1
     1ac:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     1ae:	230b      	movs	r3, #11
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	2202      	movs	r2, #2
     1b6:	4013      	ands	r3, r2
     1b8:	d008      	beq.n	1cc <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     1ba:	68fb      	ldr	r3, [r7, #12]
     1bc:	68db      	ldr	r3, [r3, #12]
     1be:	68fa      	ldr	r2, [r7, #12]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     1c4:	68fb      	ldr	r3, [r7, #12]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	2202      	movs	r2, #2
     1ca:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2210      	movs	r2, #16
     1d4:	4013      	ands	r3, r2
     1d6:	d008      	beq.n	1ea <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	691b      	ldr	r3, [r3, #16]
     1dc:	68fa      	ldr	r2, [r7, #12]
     1de:	0010      	movs	r0, r2
     1e0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	2210      	movs	r2, #16
     1e8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     1ea:	230b      	movs	r3, #11
     1ec:	18fb      	adds	r3, r7, r3
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2220      	movs	r2, #32
     1f2:	4013      	ands	r3, r2
     1f4:	d008      	beq.n	208 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     1f6:	68fb      	ldr	r3, [r7, #12]
     1f8:	695b      	ldr	r3, [r3, #20]
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	0010      	movs	r0, r2
     1fe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     200:	68fb      	ldr	r3, [r7, #12]
     202:	681b      	ldr	r3, [r3, #0]
     204:	2220      	movs	r2, #32
     206:	739a      	strb	r2, [r3, #14]
	}
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b004      	add	sp, #16
     20e:	bd80      	pop	{r7, pc}
     210:	200045b8 	.word	0x200045b8

00000214 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	701a      	strb	r2, [r3, #0]
}
     222:	46c0      	nop			; (mov r8, r8)
     224:	46bd      	mov	sp, r7
     226:	b002      	add	sp, #8
     228:	bd80      	pop	{r7, pc}
     22a:	46c0      	nop			; (mov r8, r8)

0000022c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	0002      	movs	r2, r0
     234:	6039      	str	r1, [r7, #0]
     236:	1dfb      	adds	r3, r7, #7
     238:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b01      	cmp	r3, #1
     240:	d00a      	beq.n	258 <system_apb_clock_set_mask+0x2c>
     242:	2b02      	cmp	r3, #2
     244:	d00f      	beq.n	266 <system_apb_clock_set_mask+0x3a>
     246:	2b00      	cmp	r3, #0
     248:	d114      	bne.n	274 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     24a:	4b0e      	ldr	r3, [pc, #56]	; (284 <system_apb_clock_set_mask+0x58>)
     24c:	4a0d      	ldr	r2, [pc, #52]	; (284 <system_apb_clock_set_mask+0x58>)
     24e:	6991      	ldr	r1, [r2, #24]
     250:	683a      	ldr	r2, [r7, #0]
     252:	430a      	orrs	r2, r1
     254:	619a      	str	r2, [r3, #24]
			break;
     256:	e00f      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     258:	4b0a      	ldr	r3, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25a:	4a0a      	ldr	r2, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25c:	69d1      	ldr	r1, [r2, #28]
     25e:	683a      	ldr	r2, [r7, #0]
     260:	430a      	orrs	r2, r1
     262:	61da      	str	r2, [r3, #28]
			break;
     264:	e008      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4b07      	ldr	r3, [pc, #28]	; (284 <system_apb_clock_set_mask+0x58>)
     268:	4a06      	ldr	r2, [pc, #24]	; (284 <system_apb_clock_set_mask+0x58>)
     26a:	6a11      	ldr	r1, [r2, #32]
     26c:	683a      	ldr	r2, [r7, #0]
     26e:	430a      	orrs	r2, r1
     270:	621a      	str	r2, [r3, #32]
			break;
     272:	e001      	b.n	278 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     274:	2317      	movs	r3, #23
     276:	e000      	b.n	27a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     278:	2300      	movs	r3, #0
}
     27a:	0018      	movs	r0, r3
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	40000400 	.word	0x40000400

00000288 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2280      	movs	r2, #128	; 0x80
     294:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2201      	movs	r2, #1
     2a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	2200      	movs	r2, #0
     2a6:	70da      	strb	r2, [r3, #3]
}
     2a8:	46c0      	nop			; (mov r8, r8)
     2aa:	46bd      	mov	sp, r7
     2ac:	b002      	add	sp, #8
     2ae:	bd80      	pop	{r7, pc}

000002b0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b084      	sub	sp, #16
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2be:	68fb      	ldr	r3, [r7, #12]
     2c0:	7bdb      	ldrb	r3, [r3, #15]
     2c2:	b2db      	uxtb	r3, r3
     2c4:	001a      	movs	r2, r3
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	4013      	ands	r3, r2
     2ca:	1e5a      	subs	r2, r3, #1
     2cc:	4193      	sbcs	r3, r2
     2ce:	b2db      	uxtb	r3, r3
#endif
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	b004      	add	sp, #16
     2d6:	bd80      	pop	{r7, pc}

000002d8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     2d8:	b590      	push	{r4, r7, lr}
     2da:	b087      	sub	sp, #28
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     2e0:	2308      	movs	r3, #8
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	4a0d      	ldr	r2, [pc, #52]	; (31c <_tc_get_inst_index+0x44>)
     2e6:	ca13      	ldmia	r2!, {r0, r1, r4}
     2e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     2ea:	2300      	movs	r3, #0
     2ec:	617b      	str	r3, [r7, #20]
     2ee:	e00d      	b.n	30c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
     2f0:	2308      	movs	r3, #8
     2f2:	18fb      	adds	r3, r7, r3
     2f4:	697a      	ldr	r2, [r7, #20]
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	58d2      	ldr	r2, [r2, r3]
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	429a      	cmp	r2, r3
     2fe:	d102      	bne.n	306 <_tc_get_inst_index+0x2e>
			return i;
     300:	697b      	ldr	r3, [r7, #20]
     302:	b2db      	uxtb	r3, r3
     304:	e006      	b.n	314 <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     306:	697b      	ldr	r3, [r7, #20]
     308:	3301      	adds	r3, #1
     30a:	617b      	str	r3, [r7, #20]
     30c:	697b      	ldr	r3, [r7, #20]
     30e:	2b02      	cmp	r3, #2
     310:	d9ee      	bls.n	2f0 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     312:	2300      	movs	r3, #0
}
     314:	0018      	movs	r0, r3
     316:	46bd      	mov	sp, r7
     318:	b007      	add	sp, #28
     31a:	bd90      	pop	{r4, r7, pc}
     31c:	000123f4 	.word	0x000123f4

00000320 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     320:	b590      	push	{r4, r7, lr}
     322:	b08d      	sub	sp, #52	; 0x34
     324:	af00      	add	r7, sp, #0
     326:	60f8      	str	r0, [r7, #12]
     328:	60b9      	str	r1, [r7, #8]
     32a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     32c:	232e      	movs	r3, #46	; 0x2e
     32e:	18fb      	adds	r3, r7, r3
     330:	2200      	movs	r2, #0
     332:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     334:	232d      	movs	r3, #45	; 0x2d
     336:	18fb      	adds	r3, r7, r3
     338:	2200      	movs	r2, #0
     33a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     33c:	232c      	movs	r3, #44	; 0x2c
     33e:	18fb      	adds	r3, r7, r3
     340:	2200      	movs	r2, #0
     342:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     344:	2329      	movs	r3, #41	; 0x29
     346:	18fc      	adds	r4, r7, r3
     348:	68bb      	ldr	r3, [r7, #8]
     34a:	0018      	movs	r0, r3
     34c:	4bbf      	ldr	r3, [pc, #764]	; (64c <tc_init+0x32c>)
     34e:	4798      	blx	r3
     350:	0003      	movs	r3, r0
     352:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     354:	2324      	movs	r3, #36	; 0x24
     356:	18fa      	adds	r2, r7, r3
     358:	4bbd      	ldr	r3, [pc, #756]	; (650 <tc_init+0x330>)
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	2303      	movs	r3, #3
     360:	001a      	movs	r2, r3
     362:	4bbc      	ldr	r3, [pc, #752]	; (654 <tc_init+0x334>)
     364:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     366:	231c      	movs	r3, #28
     368:	18fa      	adds	r2, r7, r3
     36a:	4bbb      	ldr	r3, [pc, #748]	; (658 <tc_init+0x338>)
     36c:	0010      	movs	r0, r2
     36e:	0019      	movs	r1, r3
     370:	2306      	movs	r3, #6
     372:	001a      	movs	r2, r3
     374:	4bb7      	ldr	r3, [pc, #732]	; (654 <tc_init+0x334>)
     376:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     378:	232b      	movs	r3, #43	; 0x2b
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	701a      	strb	r2, [r3, #0]
     380:	e00e      	b.n	3a0 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
     382:	232b      	movs	r3, #43	; 0x2b
     384:	18fb      	adds	r3, r7, r3
     386:	781a      	ldrb	r2, [r3, #0]
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	3202      	adds	r2, #2
     38c:	0092      	lsls	r2, r2, #2
     38e:	2100      	movs	r1, #0
     390:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     392:	232b      	movs	r3, #43	; 0x2b
     394:	18fb      	adds	r3, r7, r3
     396:	781a      	ldrb	r2, [r3, #0]
     398:	232b      	movs	r3, #43	; 0x2b
     39a:	18fb      	adds	r3, r7, r3
     39c:	3201      	adds	r2, #1
     39e:	701a      	strb	r2, [r3, #0]
     3a0:	232b      	movs	r3, #43	; 0x2b
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	2b03      	cmp	r3, #3
     3a8:	d9eb      	bls.n	382 <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     3aa:	68fb      	ldr	r3, [r7, #12]
     3ac:	2200      	movs	r2, #0
     3ae:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     3b0:	68fb      	ldr	r3, [r7, #12]
     3b2:	2200      	movs	r2, #0
     3b4:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     3b6:	2329      	movs	r3, #41	; 0x29
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	781a      	ldrb	r2, [r3, #0]
     3bc:	4ba7      	ldr	r3, [pc, #668]	; (65c <tc_init+0x33c>)
     3be:	0092      	lsls	r2, r2, #2
     3c0:	68f9      	ldr	r1, [r7, #12]
     3c2:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     3c4:	68fb      	ldr	r3, [r7, #12]
     3c6:	68ba      	ldr	r2, [r7, #8]
     3c8:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	789b      	ldrb	r3, [r3, #2]
     3ce:	2b08      	cmp	r3, #8
     3d0:	d108      	bne.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     3d2:	2329      	movs	r3, #41	; 0x29
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	3303      	adds	r3, #3
     3da:	2201      	movs	r2, #1
     3dc:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3de:	d001      	beq.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3e0:	2317      	movs	r3, #23
     3e2:	e1c4      	b.n	76e <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	789a      	ldrb	r2, [r3, #2]
     3e8:	68fb      	ldr	r3, [r7, #12]
     3ea:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     3ec:	68bb      	ldr	r3, [r7, #8]
     3ee:	881b      	ldrh	r3, [r3, #0]
     3f0:	b29b      	uxth	r3, r3
     3f2:	001a      	movs	r2, r3
     3f4:	2301      	movs	r3, #1
     3f6:	4013      	ands	r3, r2
     3f8:	d001      	beq.n	3fe <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e1b7      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     3fe:	68bb      	ldr	r3, [r7, #8]
     400:	7bdb      	ldrb	r3, [r3, #15]
     402:	b2db      	uxtb	r3, r3
     404:	001a      	movs	r2, r3
     406:	2310      	movs	r3, #16
     408:	4013      	ands	r3, r2
     40a:	d001      	beq.n	410 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     40c:	231c      	movs	r3, #28
     40e:	e1ae      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     410:	68bb      	ldr	r3, [r7, #8]
     412:	881b      	ldrh	r3, [r3, #0]
     414:	b29b      	uxth	r3, r3
     416:	001a      	movs	r2, r3
     418:	2302      	movs	r3, #2
     41a:	4013      	ands	r3, r2
     41c:	d001      	beq.n	422 <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     41e:	231c      	movs	r3, #28
     420:	e1a5      	b.n	76e <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     422:	687b      	ldr	r3, [r7, #4]
     424:	7c1b      	ldrb	r3, [r3, #16]
     426:	2b00      	cmp	r3, #0
     428:	d017      	beq.n	45a <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
     42a:	2318      	movs	r3, #24
     42c:	18fb      	adds	r3, r7, r3
     42e:	0018      	movs	r0, r3
     430:	4b8b      	ldr	r3, [pc, #556]	; (660 <tc_init+0x340>)
     432:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     434:	687b      	ldr	r3, [r7, #4]
     436:	699b      	ldr	r3, [r3, #24]
     438:	b2da      	uxtb	r2, r3
     43a:	2318      	movs	r3, #24
     43c:	18fb      	adds	r3, r7, r3
     43e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     440:	2318      	movs	r3, #24
     442:	18fb      	adds	r3, r7, r3
     444:	2201      	movs	r2, #1
     446:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     44c:	b2db      	uxtb	r3, r3
     44e:	2218      	movs	r2, #24
     450:	18ba      	adds	r2, r7, r2
     452:	0011      	movs	r1, r2
     454:	0018      	movs	r0, r3
     456:	4b83      	ldr	r3, [pc, #524]	; (664 <tc_init+0x344>)
     458:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	7f1b      	ldrb	r3, [r3, #28]
     45e:	2b00      	cmp	r3, #0
     460:	d017      	beq.n	492 <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
     462:	2318      	movs	r3, #24
     464:	18fb      	adds	r3, r7, r3
     466:	0018      	movs	r0, r3
     468:	4b7d      	ldr	r3, [pc, #500]	; (660 <tc_init+0x340>)
     46a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     470:	b2da      	uxtb	r2, r3
     472:	2318      	movs	r3, #24
     474:	18fb      	adds	r3, r7, r3
     476:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     478:	2318      	movs	r3, #24
     47a:	18fb      	adds	r3, r7, r3
     47c:	2201      	movs	r2, #1
     47e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     480:	687b      	ldr	r3, [r7, #4]
     482:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     484:	b2db      	uxtb	r3, r3
     486:	2218      	movs	r2, #24
     488:	18ba      	adds	r2, r7, r2
     48a:	0011      	movs	r1, r2
     48c:	0018      	movs	r0, r3
     48e:	4b75      	ldr	r3, [pc, #468]	; (664 <tc_init+0x344>)
     490:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     492:	2329      	movs	r3, #41	; 0x29
     494:	18fb      	adds	r3, r7, r3
     496:	781a      	ldrb	r2, [r3, #0]
     498:	231c      	movs	r3, #28
     49a:	18fb      	adds	r3, r7, r3
     49c:	0052      	lsls	r2, r2, #1
     49e:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4a0:	0019      	movs	r1, r3
     4a2:	2002      	movs	r0, #2
     4a4:	4b70      	ldr	r3, [pc, #448]	; (668 <tc_init+0x348>)
     4a6:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	789b      	ldrb	r3, [r3, #2]
     4ac:	2b08      	cmp	r3, #8
     4ae:	d10b      	bne.n	4c8 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     4b0:	2329      	movs	r3, #41	; 0x29
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	1c5a      	adds	r2, r3, #1
     4b8:	231c      	movs	r3, #28
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	0052      	lsls	r2, r2, #1
     4be:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4c0:	0019      	movs	r1, r3
     4c2:	2002      	movs	r0, #2
     4c4:	4b68      	ldr	r3, [pc, #416]	; (668 <tc_init+0x348>)
     4c6:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     4c8:	2314      	movs	r3, #20
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	0018      	movs	r0, r3
     4ce:	4b67      	ldr	r3, [pc, #412]	; (66c <tc_init+0x34c>)
     4d0:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	781a      	ldrb	r2, [r3, #0]
     4d6:	2314      	movs	r3, #20
     4d8:	18fb      	adds	r3, r7, r3
     4da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     4dc:	2329      	movs	r3, #41	; 0x29
     4de:	18fb      	adds	r3, r7, r3
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	2224      	movs	r2, #36	; 0x24
     4e4:	18ba      	adds	r2, r7, r2
     4e6:	5cd3      	ldrb	r3, [r2, r3]
     4e8:	2214      	movs	r2, #20
     4ea:	18ba      	adds	r2, r7, r2
     4ec:	0011      	movs	r1, r2
     4ee:	0018      	movs	r0, r3
     4f0:	4b5f      	ldr	r3, [pc, #380]	; (670 <tc_init+0x350>)
     4f2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     4f4:	2329      	movs	r3, #41	; 0x29
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	2224      	movs	r2, #36	; 0x24
     4fc:	18ba      	adds	r2, r7, r2
     4fe:	5cd3      	ldrb	r3, [r2, r3]
     500:	0018      	movs	r0, r3
     502:	4b5c      	ldr	r3, [pc, #368]	; (674 <tc_init+0x354>)
     504:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     506:	687b      	ldr	r3, [r7, #4]
     508:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     50e:	4313      	orrs	r3, r2
     510:	b2db      	uxtb	r3, r3
     512:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     514:	687b      	ldr	r3, [r7, #4]
     516:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     518:	4313      	orrs	r3, r2
     51a:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     520:	232e      	movs	r3, #46	; 0x2e
     522:	18fb      	adds	r3, r7, r3
     524:	430a      	orrs	r2, r1
     526:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     528:	687b      	ldr	r3, [r7, #4]
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	2b00      	cmp	r3, #0
     52e:	d008      	beq.n	542 <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     530:	232e      	movs	r3, #46	; 0x2e
     532:	18fb      	adds	r3, r7, r3
     534:	222e      	movs	r2, #46	; 0x2e
     536:	18ba      	adds	r2, r7, r2
     538:	8812      	ldrh	r2, [r2, #0]
     53a:	2180      	movs	r1, #128	; 0x80
     53c:	0109      	lsls	r1, r1, #4
     53e:	430a      	orrs	r2, r1
     540:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     542:	46c0      	nop			; (mov r8, r8)
     544:	68fb      	ldr	r3, [r7, #12]
     546:	0018      	movs	r0, r3
     548:	4b4b      	ldr	r3, [pc, #300]	; (678 <tc_init+0x358>)
     54a:	4798      	blx	r3
     54c:	1e03      	subs	r3, r0, #0
     54e:	d1f9      	bne.n	544 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     550:	68bb      	ldr	r3, [r7, #8]
     552:	222e      	movs	r2, #46	; 0x2e
     554:	18ba      	adds	r2, r7, r2
     556:	8812      	ldrh	r2, [r2, #0]
     558:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	7b5b      	ldrb	r3, [r3, #13]
     55e:	2b00      	cmp	r3, #0
     560:	d003      	beq.n	56a <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     562:	232d      	movs	r3, #45	; 0x2d
     564:	18fb      	adds	r3, r7, r3
     566:	2204      	movs	r2, #4
     568:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	7b9b      	ldrb	r3, [r3, #14]
     56e:	2b00      	cmp	r3, #0
     570:	d007      	beq.n	582 <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     572:	232d      	movs	r3, #45	; 0x2d
     574:	18fb      	adds	r3, r7, r3
     576:	222d      	movs	r2, #45	; 0x2d
     578:	18ba      	adds	r2, r7, r2
     57a:	7812      	ldrb	r2, [r2, #0]
     57c:	2101      	movs	r1, #1
     57e:	430a      	orrs	r2, r1
     580:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     582:	46c0      	nop			; (mov r8, r8)
     584:	68fb      	ldr	r3, [r7, #12]
     586:	0018      	movs	r0, r3
     588:	4b3b      	ldr	r3, [pc, #236]	; (678 <tc_init+0x358>)
     58a:	4798      	blx	r3
     58c:	1e03      	subs	r3, r0, #0
     58e:	d1f9      	bne.n	584 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     590:	68bb      	ldr	r3, [r7, #8]
     592:	22ff      	movs	r2, #255	; 0xff
     594:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     596:	232d      	movs	r3, #45	; 0x2d
     598:	18fb      	adds	r3, r7, r3
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d00b      	beq.n	5b8 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	0018      	movs	r0, r3
     5a6:	4b34      	ldr	r3, [pc, #208]	; (678 <tc_init+0x358>)
     5a8:	4798      	blx	r3
     5aa:	1e03      	subs	r3, r0, #0
     5ac:	d1f9      	bne.n	5a2 <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5ae:	68bb      	ldr	r3, [r7, #8]
     5b0:	222d      	movs	r2, #45	; 0x2d
     5b2:	18ba      	adds	r2, r7, r2
     5b4:	7812      	ldrb	r2, [r2, #0]
     5b6:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     5b8:	232c      	movs	r3, #44	; 0x2c
     5ba:	18fb      	adds	r3, r7, r3
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	7a92      	ldrb	r2, [r2, #10]
     5c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5c2:	232a      	movs	r3, #42	; 0x2a
     5c4:	18fb      	adds	r3, r7, r3
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	e01c      	b.n	606 <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
     5cc:	232a      	movs	r3, #42	; 0x2a
     5ce:	18fb      	adds	r3, r7, r3
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	687a      	ldr	r2, [r7, #4]
     5d4:	18d3      	adds	r3, r2, r3
     5d6:	7adb      	ldrb	r3, [r3, #11]
     5d8:	2b00      	cmp	r3, #0
     5da:	d00d      	beq.n	5f8 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5dc:	232a      	movs	r3, #42	; 0x2a
     5de:	18fb      	adds	r3, r7, r3
     5e0:	781b      	ldrb	r3, [r3, #0]
     5e2:	2210      	movs	r2, #16
     5e4:	409a      	lsls	r2, r3
     5e6:	0013      	movs	r3, r2
     5e8:	b2d9      	uxtb	r1, r3
     5ea:	232c      	movs	r3, #44	; 0x2c
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	222c      	movs	r2, #44	; 0x2c
     5f0:	18ba      	adds	r2, r7, r2
     5f2:	7812      	ldrb	r2, [r2, #0]
     5f4:	430a      	orrs	r2, r1
     5f6:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5f8:	232a      	movs	r3, #42	; 0x2a
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	232a      	movs	r3, #42	; 0x2a
     600:	18fb      	adds	r3, r7, r3
     602:	3201      	adds	r2, #1
     604:	701a      	strb	r2, [r3, #0]
     606:	232a      	movs	r3, #42	; 0x2a
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b01      	cmp	r3, #1
     60e:	d9dd      	bls.n	5cc <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     610:	46c0      	nop			; (mov r8, r8)
     612:	68fb      	ldr	r3, [r7, #12]
     614:	0018      	movs	r0, r3
     616:	4b18      	ldr	r3, [pc, #96]	; (678 <tc_init+0x358>)
     618:	4798      	blx	r3
     61a:	1e03      	subs	r3, r0, #0
     61c:	d1f9      	bne.n	612 <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     61e:	68bb      	ldr	r3, [r7, #8]
     620:	222c      	movs	r2, #44	; 0x2c
     622:	18ba      	adds	r2, r7, r2
     624:	7812      	ldrb	r2, [r2, #0]
     626:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	0018      	movs	r0, r3
     62e:	4b12      	ldr	r3, [pc, #72]	; (678 <tc_init+0x358>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     636:	68fb      	ldr	r3, [r7, #12]
     638:	791b      	ldrb	r3, [r3, #4]
     63a:	2b04      	cmp	r3, #4
     63c:	d01e      	beq.n	67c <tc_init+0x35c>
     63e:	2b08      	cmp	r3, #8
     640:	d100      	bne.n	644 <tc_init+0x324>
     642:	e070      	b.n	726 <tc_init+0x406>
     644:	2b00      	cmp	r3, #0
     646:	d04b      	beq.n	6e0 <tc_init+0x3c0>
     648:	e090      	b.n	76c <tc_init+0x44c>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000002d9 	.word	0x000002d9
     650:	00012400 	.word	0x00012400
     654:	00010c55 	.word	0x00010c55
     658:	00012404 	.word	0x00012404
     65c:	200045b8 	.word	0x200045b8
     660:	00000289 	.word	0x00000289
     664:	0000bdb1 	.word	0x0000bdb1
     668:	0000022d 	.word	0x0000022d
     66c:	00000215 	.word	0x00000215
     670:	0000bac5 	.word	0x0000bac5
     674:	0000bb09 	.word	0x0000bb09
     678:	000002b1 	.word	0x000002b1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	68fb      	ldr	r3, [r7, #12]
     680:	0018      	movs	r0, r3
     682:	4b3d      	ldr	r3, [pc, #244]	; (778 <tc_init+0x458>)
     684:	4798      	blx	r3
     686:	1e03      	subs	r3, r0, #0
     688:	d1f9      	bne.n	67e <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2228      	movs	r2, #40	; 0x28
     68e:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     690:	68bb      	ldr	r3, [r7, #8]
     692:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     694:	46c0      	nop			; (mov r8, r8)
     696:	68fb      	ldr	r3, [r7, #12]
     698:	0018      	movs	r0, r3
     69a:	4b37      	ldr	r3, [pc, #220]	; (778 <tc_init+0x458>)
     69c:	4798      	blx	r3
     69e:	1e03      	subs	r3, r0, #0
     6a0:	d1f9      	bne.n	696 <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2229      	movs	r2, #41	; 0x29
     6a6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     6a8:	68bb      	ldr	r3, [r7, #8]
     6aa:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     6ac:	46c0      	nop			; (mov r8, r8)
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	0018      	movs	r0, r3
     6b2:	4b31      	ldr	r3, [pc, #196]	; (778 <tc_init+0x458>)
     6b4:	4798      	blx	r3
     6b6:	1e03      	subs	r3, r0, #0
     6b8:	d1f9      	bne.n	6ae <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	222a      	movs	r2, #42	; 0x2a
     6be:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     6c0:	68bb      	ldr	r3, [r7, #8]
     6c2:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	0018      	movs	r0, r3
     6ca:	4b2b      	ldr	r3, [pc, #172]	; (778 <tc_init+0x458>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	222b      	movs	r2, #43	; 0x2b
     6d6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     6d8:	68bb      	ldr	r3, [r7, #8]
     6da:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     6dc:	2300      	movs	r3, #0
     6de:	e046      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     6e0:	46c0      	nop			; (mov r8, r8)
     6e2:	68fb      	ldr	r3, [r7, #12]
     6e4:	0018      	movs	r0, r3
     6e6:	4b24      	ldr	r3, [pc, #144]	; (778 <tc_init+0x458>)
     6e8:	4798      	blx	r3
     6ea:	1e03      	subs	r3, r0, #0
     6ec:	d1f9      	bne.n	6e2 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     6f2:	68bb      	ldr	r3, [r7, #8]
     6f4:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	68fb      	ldr	r3, [r7, #12]
     6fa:	0018      	movs	r0, r3
     6fc:	4b1e      	ldr	r3, [pc, #120]	; (778 <tc_init+0x458>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     704:	687b      	ldr	r3, [r7, #4]
     706:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     708:	68bb      	ldr	r3, [r7, #8]
     70a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     70c:	46c0      	nop			; (mov r8, r8)
     70e:	68fb      	ldr	r3, [r7, #12]
     710:	0018      	movs	r0, r3
     712:	4b19      	ldr	r3, [pc, #100]	; (778 <tc_init+0x458>)
     714:	4798      	blx	r3
     716:	1e03      	subs	r3, r0, #0
     718:	d1f9      	bne.n	70e <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     71e:	68bb      	ldr	r3, [r7, #8]
     720:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     722:	2300      	movs	r3, #0
     724:	e023      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     726:	46c0      	nop			; (mov r8, r8)
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	0018      	movs	r0, r3
     72c:	4b12      	ldr	r3, [pc, #72]	; (778 <tc_init+0x458>)
     72e:	4798      	blx	r3
     730:	1e03      	subs	r3, r0, #0
     732:	d1f9      	bne.n	728 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     734:	687b      	ldr	r3, [r7, #4]
     736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     738:	68bb      	ldr	r3, [r7, #8]
     73a:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     73c:	46c0      	nop			; (mov r8, r8)
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	0018      	movs	r0, r3
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <tc_init+0x458>)
     744:	4798      	blx	r3
     746:	1e03      	subs	r3, r0, #0
     748:	d1f9      	bne.n	73e <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     74e:	68bb      	ldr	r3, [r7, #8]
     750:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     752:	46c0      	nop			; (mov r8, r8)
     754:	68fb      	ldr	r3, [r7, #12]
     756:	0018      	movs	r0, r3
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <tc_init+0x458>)
     75a:	4798      	blx	r3
     75c:	1e03      	subs	r3, r0, #0
     75e:	d1f9      	bne.n	754 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     760:	687b      	ldr	r3, [r7, #4]
     762:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     764:	68bb      	ldr	r3, [r7, #8]
     766:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     768:	2300      	movs	r3, #0
     76a:	e000      	b.n	76e <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     76c:	2317      	movs	r3, #23
}
     76e:	0018      	movs	r0, r3
     770:	46bd      	mov	sp, r7
     772:	b00d      	add	sp, #52	; 0x34
     774:	bd90      	pop	{r4, r7, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	000002b1 	.word	0x000002b1

0000077c <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
     77c:	b580      	push	{r7, lr}
     77e:	b084      	sub	sp, #16
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     786:	687b      	ldr	r3, [r7, #4]
     788:	681b      	ldr	r3, [r3, #0]
     78a:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b11      	ldr	r3, [pc, #68]	; (7d8 <tc_set_count_value+0x5c>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	791b      	ldrb	r3, [r3, #4]
     79e:	2b04      	cmp	r3, #4
     7a0:	d004      	beq.n	7ac <tc_set_count_value+0x30>
     7a2:	2b08      	cmp	r3, #8
     7a4:	d00e      	beq.n	7c4 <tc_set_count_value+0x48>
     7a6:	2b00      	cmp	r3, #0
     7a8:	d006      	beq.n	7b8 <tc_set_count_value+0x3c>
     7aa:	e010      	b.n	7ce <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	b2da      	uxtb	r2, r3
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
     7b4:	2300      	movs	r3, #0
     7b6:	e00b      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	b29a      	uxth	r2, r3
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
     7c0:	2300      	movs	r3, #0
     7c2:	e005      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	683a      	ldr	r2, [r7, #0]
     7c8:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
     7ca:	2300      	movs	r3, #0
     7cc:	e000      	b.n	7d0 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
     7ce:	2317      	movs	r3, #23
	}
}
     7d0:	0018      	movs	r0, r3
     7d2:	46bd      	mov	sp, r7
     7d4:	b004      	add	sp, #16
     7d6:	bd80      	pop	{r7, pc}
     7d8:	000002b1 	.word	0x000002b1

000007dc <display_update>:
};

SemaphoreHandle_t display_update_mutex;

static void display_update(bool update)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	0002      	movs	r2, r0
     7e4:	1dfb      	adds	r3, r7, #7
     7e6:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <display_update+0x30>)
     7ea:	4798      	blx	r3
    
    display_state.display_update = update;
     7ec:	4b08      	ldr	r3, [pc, #32]	; (810 <display_update+0x34>)
     7ee:	1dfa      	adds	r2, r7, #7
     7f0:	7812      	ldrb	r2, [r2, #0]
     7f2:	725a      	strb	r2, [r3, #9]
    display_state.display_blink = false;
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <display_update+0x34>)
     7f6:	2200      	movs	r2, #0
     7f8:	729a      	strb	r2, [r3, #10]
    display_state.display_blink_timer = 0;
     7fa:	4b05      	ldr	r3, [pc, #20]	; (810 <display_update+0x34>)
     7fc:	2200      	movs	r2, #0
     7fe:	72da      	strb	r2, [r3, #11]
    
    taskEXIT_CRITICAL();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <display_update+0x38>)
     802:	4798      	blx	r3
}
     804:	46c0      	nop			; (mov r8, r8)
     806:	46bd      	mov	sp, r7
     808:	b002      	add	sp, #8
     80a:	bd80      	pop	{r7, pc}
     80c:	0000c409 	.word	0x0000c409
     810:	20004608 	.word	0x20004608
     814:	0000c42d 	.word	0x0000c42d

00000818 <display_number_to_seg>:

static void display_number_to_seg(uint8_t num, uint8_t *chars)
{
     818:	b590      	push	{r4, r7, lr}
     81a:	b083      	sub	sp, #12
     81c:	af00      	add	r7, sp, #0
     81e:	0002      	movs	r2, r0
     820:	6039      	str	r1, [r7, #0]
     822:	1dfb      	adds	r3, r7, #7
     824:	701a      	strb	r2, [r3, #0]
    if (num / 100)
     826:	1dfb      	adds	r3, r7, #7
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b63      	cmp	r3, #99	; 0x63
     82c:	d90d      	bls.n	84a <display_number_to_seg+0x32>
        chars[0] = num_to_seg[num/100];
     82e:	1dfb      	adds	r3, r7, #7
     830:	781a      	ldrb	r2, [r3, #0]
     832:	4b25      	ldr	r3, [pc, #148]	; (8c8 <display_number_to_seg+0xb0>)
     834:	2164      	movs	r1, #100	; 0x64
     836:	0010      	movs	r0, r2
     838:	4798      	blx	r3
     83a:	0003      	movs	r3, r0
     83c:	b2db      	uxtb	r3, r3
     83e:	001a      	movs	r2, r3
     840:	4b22      	ldr	r3, [pc, #136]	; (8cc <display_number_to_seg+0xb4>)
     842:	5c9a      	ldrb	r2, [r3, r2]
     844:	683b      	ldr	r3, [r7, #0]
     846:	701a      	strb	r2, [r3, #0]
     848:	e002      	b.n	850 <display_number_to_seg+0x38>
    else
        chars[0] = SEG_OFF;
     84a:	683b      	ldr	r3, [r7, #0]
     84c:	2200      	movs	r2, #0
     84e:	701a      	strb	r2, [r3, #0]

    num -= (num / 100) * 100;    
     850:	1dfb      	adds	r3, r7, #7
     852:	781a      	ldrb	r2, [r3, #0]
     854:	4b1c      	ldr	r3, [pc, #112]	; (8c8 <display_number_to_seg+0xb0>)
     856:	2164      	movs	r1, #100	; 0x64
     858:	0010      	movs	r0, r2
     85a:	4798      	blx	r3
     85c:	0003      	movs	r3, r0
     85e:	b2db      	uxtb	r3, r3
     860:	2264      	movs	r2, #100	; 0x64
     862:	4252      	negs	r2, r2
     864:	4353      	muls	r3, r2
     866:	b2d9      	uxtb	r1, r3
     868:	1dfb      	adds	r3, r7, #7
     86a:	1dfa      	adds	r2, r7, #7
     86c:	7812      	ldrb	r2, [r2, #0]
     86e:	188a      	adds	r2, r1, r2
     870:	701a      	strb	r2, [r3, #0]
    chars[1] = num_to_seg[num / 10];
     872:	683b      	ldr	r3, [r7, #0]
     874:	1c5c      	adds	r4, r3, #1
     876:	1dfb      	adds	r3, r7, #7
     878:	781a      	ldrb	r2, [r3, #0]
     87a:	4b13      	ldr	r3, [pc, #76]	; (8c8 <display_number_to_seg+0xb0>)
     87c:	210a      	movs	r1, #10
     87e:	0010      	movs	r0, r2
     880:	4798      	blx	r3
     882:	0003      	movs	r3, r0
     884:	b2db      	uxtb	r3, r3
     886:	001a      	movs	r2, r3
     888:	4b10      	ldr	r3, [pc, #64]	; (8cc <display_number_to_seg+0xb4>)
     88a:	5c9b      	ldrb	r3, [r3, r2]
     88c:	7023      	strb	r3, [r4, #0]

    num -= (num / 10) * 10;    
     88e:	1dfb      	adds	r3, r7, #7
     890:	781a      	ldrb	r2, [r3, #0]
     892:	4b0d      	ldr	r3, [pc, #52]	; (8c8 <display_number_to_seg+0xb0>)
     894:	210a      	movs	r1, #10
     896:	0010      	movs	r0, r2
     898:	4798      	blx	r3
     89a:	0003      	movs	r3, r0
     89c:	b2db      	uxtb	r3, r3
     89e:	220a      	movs	r2, #10
     8a0:	4252      	negs	r2, r2
     8a2:	4353      	muls	r3, r2
     8a4:	b2d9      	uxtb	r1, r3
     8a6:	1dfb      	adds	r3, r7, #7
     8a8:	1dfa      	adds	r2, r7, #7
     8aa:	7812      	ldrb	r2, [r2, #0]
     8ac:	188a      	adds	r2, r1, r2
     8ae:	701a      	strb	r2, [r3, #0]
    chars[2] = num_to_seg[num];
     8b0:	683b      	ldr	r3, [r7, #0]
     8b2:	3302      	adds	r3, #2
     8b4:	1dfa      	adds	r2, r7, #7
     8b6:	7812      	ldrb	r2, [r2, #0]
     8b8:	4904      	ldr	r1, [pc, #16]	; (8cc <display_number_to_seg+0xb4>)
     8ba:	5c8a      	ldrb	r2, [r1, r2]
     8bc:	701a      	strb	r2, [r3, #0]
}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	46bd      	mov	sp, r7
     8c2:	b003      	add	sp, #12
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	000100e5 	.word	0x000100e5
     8cc:	0001240c 	.word	0x0001240c

000008d0 <display_button_lock_unlock_handler>:

static void display_button_lock_unlock_handler(void)
{
     8d0:	b5b0      	push	{r4, r5, r7, lr}
     8d2:	af00      	add	r7, sp, #0
    if (display_state.display_locked) {
     8d4:	4b10      	ldr	r3, [pc, #64]	; (918 <display_button_lock_unlock_handler+0x48>)
     8d6:	7b1b      	ldrb	r3, [r3, #12]
     8d8:	2b00      	cmp	r3, #0
     8da:	d019      	beq.n	910 <display_button_lock_unlock_handler+0x40>
        if (display_state.display_unlock_timer++ > DISPLAY_UNLOCK_TIME) {
     8dc:	4b0e      	ldr	r3, [pc, #56]	; (918 <display_button_lock_unlock_handler+0x48>)
     8de:	695b      	ldr	r3, [r3, #20]
     8e0:	1c59      	adds	r1, r3, #1
     8e2:	4a0d      	ldr	r2, [pc, #52]	; (918 <display_button_lock_unlock_handler+0x48>)
     8e4:	6151      	str	r1, [r2, #20]
     8e6:	2b10      	cmp	r3, #16
     8e8:	d912      	bls.n	910 <display_button_lock_unlock_handler+0x40>
            xSemaphoreGive(buzzer_sem);
     8ea:	4b0c      	ldr	r3, [pc, #48]	; (91c <display_button_lock_unlock_handler+0x4c>)
     8ec:	6818      	ldr	r0, [r3, #0]
     8ee:	2300      	movs	r3, #0
     8f0:	2200      	movs	r2, #0
     8f2:	2100      	movs	r1, #0
     8f4:	4c0a      	ldr	r4, [pc, #40]	; (920 <display_button_lock_unlock_handler+0x50>)
     8f6:	47a0      	blx	r4
            display_state.display_locked = false;
     8f8:	4b07      	ldr	r3, [pc, #28]	; (918 <display_button_lock_unlock_handler+0x48>)
     8fa:	2200      	movs	r2, #0
     8fc:	731a      	strb	r2, [r3, #12]
            display_state.display_unlock_timer = 0;
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <display_button_lock_unlock_handler+0x48>)
     900:	2200      	movs	r2, #0
     902:	615a      	str	r2, [r3, #20]
            display_state.display_lock_timer = 0;
     904:	4b04      	ldr	r3, [pc, #16]	; (918 <display_button_lock_unlock_handler+0x48>)
     906:	2200      	movs	r2, #0
     908:	611a      	str	r2, [r3, #16]
            display_update(true);            
     90a:	2001      	movs	r0, #1
     90c:	4b05      	ldr	r3, [pc, #20]	; (924 <display_button_lock_unlock_handler+0x54>)
     90e:	4798      	blx	r3
        }                
    }
}
     910:	46c0      	nop			; (mov r8, r8)
     912:	46bd      	mov	sp, r7
     914:	bdb0      	pop	{r4, r5, r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	20004608 	.word	0x20004608
     91c:	20004620 	.word	0x20004620
     920:	0000c7c9 	.word	0x0000c7c9
     924:	000007dd 	.word	0x000007dd

00000928 <display_timer_handler>:

static void display_timer_handler(void)
{
     928:	b5b0      	push	{r4, r5, r7, lr}
     92a:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     92c:	4b09      	ldr	r3, [pc, #36]	; (954 <display_timer_handler+0x2c>)
     92e:	7b1b      	ldrb	r3, [r3, #12]
     930:	2201      	movs	r2, #1
     932:	4053      	eors	r3, r2
     934:	b2db      	uxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d009      	beq.n	94e <display_timer_handler+0x26>
        display_state.display_lock_timer = 0;
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <display_timer_handler+0x2c>)
     93c:	2200      	movs	r2, #0
     93e:	611a      	str	r2, [r3, #16]
        xSemaphoreGive(buzzer_sem);
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <display_timer_handler+0x30>)
     942:	6818      	ldr	r0, [r3, #0]
     944:	2300      	movs	r3, #0
     946:	2200      	movs	r2, #0
     948:	2100      	movs	r1, #0
     94a:	4c04      	ldr	r4, [pc, #16]	; (95c <display_timer_handler+0x34>)
     94c:	47a0      	blx	r4
    }

}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	46bd      	mov	sp, r7
     952:	bdb0      	pop	{r4, r5, r7, pc}
     954:	20004608 	.word	0x20004608
     958:	20004620 	.word	0x20004620
     95c:	0000c7c9 	.word	0x0000c7c9

00000960 <display_button_water_pump_handler>:

static void display_button_water_pump_handler(void)
{
     960:	b5b0      	push	{r4, r5, r7, lr}
     962:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     964:	4b1d      	ldr	r3, [pc, #116]	; (9dc <display_button_water_pump_handler+0x7c>)
     966:	7b1b      	ldrb	r3, [r3, #12]
     968:	2201      	movs	r2, #1
     96a:	4053      	eors	r3, r2
     96c:	b2db      	uxtb	r3, r3
     96e:	2b00      	cmp	r3, #0
     970:	d031      	beq.n	9d6 <display_button_water_pump_handler+0x76>
        xSemaphoreGive(buzzer_sem);
     972:	4b1b      	ldr	r3, [pc, #108]	; (9e0 <display_button_water_pump_handler+0x80>)
     974:	6818      	ldr	r0, [r3, #0]
     976:	2300      	movs	r3, #0
     978:	2200      	movs	r2, #0
     97a:	2100      	movs	r1, #0
     97c:	4c19      	ldr	r4, [pc, #100]	; (9e4 <display_button_water_pump_handler+0x84>)
     97e:	47a0      	blx	r4
        display_state.display_lock_timer = 0;    
     980:	4b16      	ldr	r3, [pc, #88]	; (9dc <display_button_water_pump_handler+0x7c>)
     982:	2200      	movs	r2, #0
     984:	611a      	str	r2, [r3, #16]
        
        // Water and air pump cannot run at the same time
        if (display_state.bubbles_on) {
     986:	4b15      	ldr	r3, [pc, #84]	; (9dc <display_button_water_pump_handler+0x7c>)
     988:	79db      	ldrb	r3, [r3, #7]
     98a:	2b00      	cmp	r3, #0
     98c:	d005      	beq.n	99a <display_button_water_pump_handler+0x3a>
            display_state.bubbles_on = false;
     98e:	4b13      	ldr	r3, [pc, #76]	; (9dc <display_button_water_pump_handler+0x7c>)
     990:	2200      	movs	r2, #0
     992:	71da      	strb	r2, [r3, #7]

            thermal_turn_on_air_pump(false);
     994:	2000      	movs	r0, #0
     996:	4b14      	ldr	r3, [pc, #80]	; (9e8 <display_button_water_pump_handler+0x88>)
     998:	4798      	blx	r3
        }
        
        if (display_state.pump_on) {
     99a:	4b10      	ldr	r3, [pc, #64]	; (9dc <display_button_water_pump_handler+0x7c>)
     99c:	7a1b      	ldrb	r3, [r3, #8]
     99e:	2b00      	cmp	r3, #0
     9a0:	d010      	beq.n	9c4 <display_button_water_pump_handler+0x64>
            display_state.pump_on = false;
     9a2:	4b0e      	ldr	r3, [pc, #56]	; (9dc <display_button_water_pump_handler+0x7c>)
     9a4:	2200      	movs	r2, #0
     9a6:	721a      	strb	r2, [r3, #8]
            thermal_turn_on_water_pump(false);
     9a8:	2000      	movs	r0, #0
     9aa:	4b10      	ldr	r3, [pc, #64]	; (9ec <display_button_water_pump_handler+0x8c>)
     9ac:	4798      	blx	r3

            // Pump is already on. Open pump and heater relays (if heater is on)
            if (display_state.heater_on) {
     9ae:	4b0b      	ldr	r3, [pc, #44]	; (9dc <display_button_water_pump_handler+0x7c>)
     9b0:	799b      	ldrb	r3, [r3, #6]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d00c      	beq.n	9d0 <display_button_water_pump_handler+0x70>
                display_state.heater_on = false;
     9b6:	4b09      	ldr	r3, [pc, #36]	; (9dc <display_button_water_pump_handler+0x7c>)
     9b8:	2200      	movs	r2, #0
     9ba:	719a      	strb	r2, [r3, #6]
                thermal_turn_on_heater(false);
     9bc:	2000      	movs	r0, #0
     9be:	4b0c      	ldr	r3, [pc, #48]	; (9f0 <display_button_water_pump_handler+0x90>)
     9c0:	4798      	blx	r3
     9c2:	e005      	b.n	9d0 <display_button_water_pump_handler+0x70>
            }                        
        }
        else {
            display_state.pump_on = true;
     9c4:	4b05      	ldr	r3, [pc, #20]	; (9dc <display_button_water_pump_handler+0x7c>)
     9c6:	2201      	movs	r2, #1
     9c8:	721a      	strb	r2, [r3, #8]

            thermal_turn_on_water_pump(true);
     9ca:	2001      	movs	r0, #1
     9cc:	4b07      	ldr	r3, [pc, #28]	; (9ec <display_button_water_pump_handler+0x8c>)
     9ce:	4798      	blx	r3
        }
                
        display_update(true);
     9d0:	2001      	movs	r0, #1
     9d2:	4b08      	ldr	r3, [pc, #32]	; (9f4 <display_button_water_pump_handler+0x94>)
     9d4:	4798      	blx	r3
    }
}
     9d6:	46c0      	nop			; (mov r8, r8)
     9d8:	46bd      	mov	sp, r7
     9da:	bdb0      	pop	{r4, r5, r7, pc}
     9dc:	20004608 	.word	0x20004608
     9e0:	20004620 	.word	0x20004620
     9e4:	0000c7c9 	.word	0x0000c7c9
     9e8:	00001a21 	.word	0x00001a21
     9ec:	000019e9 	.word	0x000019e9
     9f0:	000019a9 	.word	0x000019a9
     9f4:	000007dd 	.word	0x000007dd

000009f8 <display_cf_handler>:

static void display_cf_handler(void)
{
     9f8:	b5b0      	push	{r4, r5, r7, lr}
     9fa:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     9fc:	4b12      	ldr	r3, [pc, #72]	; (a48 <display_cf_handler+0x50>)
     9fe:	7b1b      	ldrb	r3, [r3, #12]
     a00:	2201      	movs	r2, #1
     a02:	4053      	eors	r3, r2
     a04:	b2db      	uxtb	r3, r3
     a06:	2b00      	cmp	r3, #0
     a08:	d01b      	beq.n	a42 <display_cf_handler+0x4a>
        xSemaphoreGive(buzzer_sem);
     a0a:	4b10      	ldr	r3, [pc, #64]	; (a4c <display_cf_handler+0x54>)
     a0c:	6818      	ldr	r0, [r3, #0]
     a0e:	2300      	movs	r3, #0
     a10:	2200      	movs	r2, #0
     a12:	2100      	movs	r1, #0
     a14:	4c0e      	ldr	r4, [pc, #56]	; (a50 <display_cf_handler+0x58>)
     a16:	47a0      	blx	r4
        display_state.display_lock_timer = 0;        
     a18:	4b0b      	ldr	r3, [pc, #44]	; (a48 <display_cf_handler+0x50>)
     a1a:	2200      	movs	r2, #0
     a1c:	611a      	str	r2, [r3, #16]
        display_state.degrees_F ^= 1;
     a1e:	4b0a      	ldr	r3, [pc, #40]	; (a48 <display_cf_handler+0x50>)
     a20:	78db      	ldrb	r3, [r3, #3]
     a22:	2201      	movs	r2, #1
     a24:	4053      	eors	r3, r2
     a26:	b2db      	uxtb	r3, r3
     a28:	1e5a      	subs	r2, r3, #1
     a2a:	4193      	sbcs	r3, r2
     a2c:	b2da      	uxtb	r2, r3
     a2e:	4b06      	ldr	r3, [pc, #24]	; (a48 <display_cf_handler+0x50>)
     a30:	70da      	strb	r2, [r3, #3]
        thermal_change_scale(display_state.degrees_F);
     a32:	4b05      	ldr	r3, [pc, #20]	; (a48 <display_cf_handler+0x50>)
     a34:	78db      	ldrb	r3, [r3, #3]
     a36:	0018      	movs	r0, r3
     a38:	4b06      	ldr	r3, [pc, #24]	; (a54 <display_cf_handler+0x5c>)
     a3a:	4798      	blx	r3
        display_update(true);        
     a3c:	2001      	movs	r0, #1
     a3e:	4b06      	ldr	r3, [pc, #24]	; (a58 <display_cf_handler+0x60>)
     a40:	4798      	blx	r3
    }
}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	46bd      	mov	sp, r7
     a46:	bdb0      	pop	{r4, r5, r7, pc}
     a48:	20004608 	.word	0x20004608
     a4c:	20004620 	.word	0x20004620
     a50:	0000c7c9 	.word	0x0000c7c9
     a54:	00001809 	.word	0x00001809
     a58:	000007dd 	.word	0x000007dd

00000a5c <display_button_heater_handler>:

static void display_button_heater_handler(void)
{
     a5c:	b5b0      	push	{r4, r5, r7, lr}
     a5e:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     a60:	4b1e      	ldr	r3, [pc, #120]	; (adc <display_button_heater_handler+0x80>)
     a62:	7b1b      	ldrb	r3, [r3, #12]
     a64:	2201      	movs	r2, #1
     a66:	4053      	eors	r3, r2
     a68:	b2db      	uxtb	r3, r3
     a6a:	2b00      	cmp	r3, #0
     a6c:	d032      	beq.n	ad4 <display_button_heater_handler+0x78>
        xSemaphoreGive(buzzer_sem);
     a6e:	4b1c      	ldr	r3, [pc, #112]	; (ae0 <display_button_heater_handler+0x84>)
     a70:	6818      	ldr	r0, [r3, #0]
     a72:	2300      	movs	r3, #0
     a74:	2200      	movs	r2, #0
     a76:	2100      	movs	r1, #0
     a78:	4c1a      	ldr	r4, [pc, #104]	; (ae4 <display_button_heater_handler+0x88>)
     a7a:	47a0      	blx	r4
        display_state.display_lock_timer = 0;
     a7c:	4b17      	ldr	r3, [pc, #92]	; (adc <display_button_heater_handler+0x80>)
     a7e:	2200      	movs	r2, #0
     a80:	611a      	str	r2, [r3, #16]
        display_state.heater_on ^= 1;        
     a82:	4b16      	ldr	r3, [pc, #88]	; (adc <display_button_heater_handler+0x80>)
     a84:	799b      	ldrb	r3, [r3, #6]
     a86:	2201      	movs	r2, #1
     a88:	4053      	eors	r3, r2
     a8a:	b2db      	uxtb	r3, r3
     a8c:	1e5a      	subs	r2, r3, #1
     a8e:	4193      	sbcs	r3, r2
     a90:	b2da      	uxtb	r2, r3
     a92:	4b12      	ldr	r3, [pc, #72]	; (adc <display_button_heater_handler+0x80>)
     a94:	719a      	strb	r2, [r3, #6]

        if (display_state.bubbles_on) {
     a96:	4b11      	ldr	r3, [pc, #68]	; (adc <display_button_heater_handler+0x80>)
     a98:	79db      	ldrb	r3, [r3, #7]
     a9a:	2b00      	cmp	r3, #0
     a9c:	d005      	beq.n	aaa <display_button_heater_handler+0x4e>
            display_state.bubbles_on = false;
     a9e:	4b0f      	ldr	r3, [pc, #60]	; (adc <display_button_heater_handler+0x80>)
     aa0:	2200      	movs	r2, #0
     aa2:	71da      	strb	r2, [r3, #7]

            thermal_turn_on_air_pump(false);
     aa4:	2000      	movs	r0, #0
     aa6:	4b10      	ldr	r3, [pc, #64]	; (ae8 <display_button_heater_handler+0x8c>)
     aa8:	4798      	blx	r3
        }

        // Pump must be running before turning on heater
        if (!display_state.pump_on) {            
     aaa:	4b0c      	ldr	r3, [pc, #48]	; (adc <display_button_heater_handler+0x80>)
     aac:	7a1b      	ldrb	r3, [r3, #8]
     aae:	2201      	movs	r2, #1
     ab0:	4053      	eors	r3, r2
     ab2:	b2db      	uxtb	r3, r3
     ab4:	2b00      	cmp	r3, #0
     ab6:	d005      	beq.n	ac4 <display_button_heater_handler+0x68>
            display_state.pump_on = true;
     ab8:	4b08      	ldr	r3, [pc, #32]	; (adc <display_button_heater_handler+0x80>)
     aba:	2201      	movs	r2, #1
     abc:	721a      	strb	r2, [r3, #8]

            thermal_turn_on_water_pump(true);            
     abe:	2001      	movs	r0, #1
     ac0:	4b0a      	ldr	r3, [pc, #40]	; (aec <display_button_heater_handler+0x90>)
     ac2:	4798      	blx	r3
        }

        thermal_turn_on_heater(display_state.heater_on);
     ac4:	4b05      	ldr	r3, [pc, #20]	; (adc <display_button_heater_handler+0x80>)
     ac6:	799b      	ldrb	r3, [r3, #6]
     ac8:	0018      	movs	r0, r3
     aca:	4b09      	ldr	r3, [pc, #36]	; (af0 <display_button_heater_handler+0x94>)
     acc:	4798      	blx	r3

        display_update(true);
     ace:	2001      	movs	r0, #1
     ad0:	4b08      	ldr	r3, [pc, #32]	; (af4 <display_button_heater_handler+0x98>)
     ad2:	4798      	blx	r3
    }
}
     ad4:	46c0      	nop			; (mov r8, r8)
     ad6:	46bd      	mov	sp, r7
     ad8:	bdb0      	pop	{r4, r5, r7, pc}
     ada:	46c0      	nop			; (mov r8, r8)
     adc:	20004608 	.word	0x20004608
     ae0:	20004620 	.word	0x20004620
     ae4:	0000c7c9 	.word	0x0000c7c9
     ae8:	00001a21 	.word	0x00001a21
     aec:	000019e9 	.word	0x000019e9
     af0:	000019a9 	.word	0x000019a9
     af4:	000007dd 	.word	0x000007dd

00000af8 <display_button_air_pump_handler>:

static void display_button_air_pump_handler(void)
{
     af8:	b5b0      	push	{r4, r5, r7, lr}
     afa:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     afc:	4b1c      	ldr	r3, [pc, #112]	; (b70 <display_button_air_pump_handler+0x78>)
     afe:	7b1b      	ldrb	r3, [r3, #12]
     b00:	2201      	movs	r2, #1
     b02:	4053      	eors	r3, r2
     b04:	b2db      	uxtb	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	d02f      	beq.n	b6a <display_button_air_pump_handler+0x72>
        // Water pump/heater cannot run while air pump is on
        display_state.bubbles_on ^= 1;
     b0a:	4b19      	ldr	r3, [pc, #100]	; (b70 <display_button_air_pump_handler+0x78>)
     b0c:	79db      	ldrb	r3, [r3, #7]
     b0e:	2201      	movs	r2, #1
     b10:	4053      	eors	r3, r2
     b12:	b2db      	uxtb	r3, r3
     b14:	1e5a      	subs	r2, r3, #1
     b16:	4193      	sbcs	r3, r2
     b18:	b2da      	uxtb	r2, r3
     b1a:	4b15      	ldr	r3, [pc, #84]	; (b70 <display_button_air_pump_handler+0x78>)
     b1c:	71da      	strb	r2, [r3, #7]

        if (display_state.pump_on && display_state.bubbles_on) {                        
     b1e:	4b14      	ldr	r3, [pc, #80]	; (b70 <display_button_air_pump_handler+0x78>)
     b20:	7a1b      	ldrb	r3, [r3, #8]
     b22:	2b00      	cmp	r3, #0
     b24:	d00f      	beq.n	b46 <display_button_air_pump_handler+0x4e>
     b26:	4b12      	ldr	r3, [pc, #72]	; (b70 <display_button_air_pump_handler+0x78>)
     b28:	79db      	ldrb	r3, [r3, #7]
     b2a:	2b00      	cmp	r3, #0
     b2c:	d00b      	beq.n	b46 <display_button_air_pump_handler+0x4e>
            display_state.pump_on = false;
     b2e:	4b10      	ldr	r3, [pc, #64]	; (b70 <display_button_air_pump_handler+0x78>)
     b30:	2200      	movs	r2, #0
     b32:	721a      	strb	r2, [r3, #8]
            display_state.heater_on = false;
     b34:	4b0e      	ldr	r3, [pc, #56]	; (b70 <display_button_air_pump_handler+0x78>)
     b36:	2200      	movs	r2, #0
     b38:	719a      	strb	r2, [r3, #6]

            thermal_turn_on_heater(false);
     b3a:	2000      	movs	r0, #0
     b3c:	4b0d      	ldr	r3, [pc, #52]	; (b74 <display_button_air_pump_handler+0x7c>)
     b3e:	4798      	blx	r3
            thermal_turn_on_water_pump(false);
     b40:	2000      	movs	r0, #0
     b42:	4b0d      	ldr	r3, [pc, #52]	; (b78 <display_button_air_pump_handler+0x80>)
     b44:	4798      	blx	r3
        }   
        
        thermal_turn_on_air_pump(display_state.bubbles_on);
     b46:	4b0a      	ldr	r3, [pc, #40]	; (b70 <display_button_air_pump_handler+0x78>)
     b48:	79db      	ldrb	r3, [r3, #7]
     b4a:	0018      	movs	r0, r3
     b4c:	4b0b      	ldr	r3, [pc, #44]	; (b7c <display_button_air_pump_handler+0x84>)
     b4e:	4798      	blx	r3

        xSemaphoreGive(buzzer_sem);
     b50:	4b0b      	ldr	r3, [pc, #44]	; (b80 <display_button_air_pump_handler+0x88>)
     b52:	6818      	ldr	r0, [r3, #0]
     b54:	2300      	movs	r3, #0
     b56:	2200      	movs	r2, #0
     b58:	2100      	movs	r1, #0
     b5a:	4c0a      	ldr	r4, [pc, #40]	; (b84 <display_button_air_pump_handler+0x8c>)
     b5c:	47a0      	blx	r4
        display_state.display_lock_timer = 0;                   
     b5e:	4b04      	ldr	r3, [pc, #16]	; (b70 <display_button_air_pump_handler+0x78>)
     b60:	2200      	movs	r2, #0
     b62:	611a      	str	r2, [r3, #16]

        display_update(true);
     b64:	2001      	movs	r0, #1
     b66:	4b08      	ldr	r3, [pc, #32]	; (b88 <display_button_air_pump_handler+0x90>)
     b68:	4798      	blx	r3
    }
}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	46bd      	mov	sp, r7
     b6e:	bdb0      	pop	{r4, r5, r7, pc}
     b70:	20004608 	.word	0x20004608
     b74:	000019a9 	.word	0x000019a9
     b78:	000019e9 	.word	0x000019e9
     b7c:	00001a21 	.word	0x00001a21
     b80:	20004620 	.word	0x20004620
     b84:	0000c7c9 	.word	0x0000c7c9
     b88:	000007dd 	.word	0x000007dd

00000b8c <display_button_down_handler>:

static void display_button_down_handler(void)
{
     b8c:	b590      	push	{r4, r7, lr}
     b8e:	b083      	sub	sp, #12
     b90:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     b92:	4b16      	ldr	r3, [pc, #88]	; (bec <display_button_down_handler+0x60>)
     b94:	7b1b      	ldrb	r3, [r3, #12]
     b96:	2201      	movs	r2, #1
     b98:	4053      	eors	r3, r2
     b9a:	b2db      	uxtb	r3, r3
     b9c:	2b00      	cmp	r3, #0
     b9e:	d020      	beq.n	be2 <display_button_down_handler+0x56>
        display_state.display_lock_timer = 0;
     ba0:	4b12      	ldr	r3, [pc, #72]	; (bec <display_button_down_handler+0x60>)
     ba2:	2200      	movs	r2, #0
     ba4:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     ba6:	1dfc      	adds	r4, r7, #7
     ba8:	4b11      	ldr	r3, [pc, #68]	; (bf0 <display_button_down_handler+0x64>)
     baa:	4798      	blx	r3
     bac:	0003      	movs	r3, r0
     bae:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp-1) == STATUS_OK) {
     bb0:	1dfb      	adds	r3, r7, #7
     bb2:	781b      	ldrb	r3, [r3, #0]
     bb4:	3b01      	subs	r3, #1
     bb6:	b2db      	uxtb	r3, r3
     bb8:	0018      	movs	r0, r3
     bba:	4b0e      	ldr	r3, [pc, #56]	; (bf4 <display_button_down_handler+0x68>)
     bbc:	4798      	blx	r3
     bbe:	1e03      	subs	r3, r0, #0
     bc0:	d10f      	bne.n	be2 <display_button_down_handler+0x56>
            xSemaphoreGive(buzzer_sem);
     bc2:	4b0d      	ldr	r3, [pc, #52]	; (bf8 <display_button_down_handler+0x6c>)
     bc4:	6818      	ldr	r0, [r3, #0]
     bc6:	2300      	movs	r3, #0
     bc8:	2200      	movs	r2, #0
     bca:	2100      	movs	r1, #0
     bcc:	4c0b      	ldr	r4, [pc, #44]	; (bfc <display_button_down_handler+0x70>)
     bce:	47a0      	blx	r4
            display_update(false);
     bd0:	2000      	movs	r0, #0
     bd2:	4b0b      	ldr	r3, [pc, #44]	; (c00 <display_button_down_handler+0x74>)
     bd4:	4798      	blx	r3
            display_state.display_blink = true;
     bd6:	4b05      	ldr	r3, [pc, #20]	; (bec <display_button_down_handler+0x60>)
     bd8:	2201      	movs	r2, #1
     bda:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
     bdc:	4b03      	ldr	r3, [pc, #12]	; (bec <display_button_down_handler+0x60>)
     bde:	2200      	movs	r2, #0
     be0:	72da      	strb	r2, [r3, #11]
        }
    }
}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	46bd      	mov	sp, r7
     be6:	b003      	add	sp, #12
     be8:	bd90      	pop	{r4, r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	20004608 	.word	0x20004608
     bf0:	00001955 	.word	0x00001955
     bf4:	000018a1 	.word	0x000018a1
     bf8:	20004620 	.word	0x20004620
     bfc:	0000c7c9 	.word	0x0000c7c9
     c00:	000007dd 	.word	0x000007dd

00000c04 <display_button_up_handler>:

static void display_button_up_handler(void)
{
     c04:	b590      	push	{r4, r7, lr}
     c06:	b083      	sub	sp, #12
     c08:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     c0a:	4b16      	ldr	r3, [pc, #88]	; (c64 <display_button_up_handler+0x60>)
     c0c:	7b1b      	ldrb	r3, [r3, #12]
     c0e:	2201      	movs	r2, #1
     c10:	4053      	eors	r3, r2
     c12:	b2db      	uxtb	r3, r3
     c14:	2b00      	cmp	r3, #0
     c16:	d020      	beq.n	c5a <display_button_up_handler+0x56>
        display_state.display_lock_timer = 0;
     c18:	4b12      	ldr	r3, [pc, #72]	; (c64 <display_button_up_handler+0x60>)
     c1a:	2200      	movs	r2, #0
     c1c:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     c1e:	1dfc      	adds	r4, r7, #7
     c20:	4b11      	ldr	r3, [pc, #68]	; (c68 <display_button_up_handler+0x64>)
     c22:	4798      	blx	r3
     c24:	0003      	movs	r3, r0
     c26:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp+1) == STATUS_OK) {
     c28:	1dfb      	adds	r3, r7, #7
     c2a:	781b      	ldrb	r3, [r3, #0]
     c2c:	3301      	adds	r3, #1
     c2e:	b2db      	uxtb	r3, r3
     c30:	0018      	movs	r0, r3
     c32:	4b0e      	ldr	r3, [pc, #56]	; (c6c <display_button_up_handler+0x68>)
     c34:	4798      	blx	r3
     c36:	1e03      	subs	r3, r0, #0
     c38:	d10f      	bne.n	c5a <display_button_up_handler+0x56>
            xSemaphoreGive(buzzer_sem);            
     c3a:	4b0d      	ldr	r3, [pc, #52]	; (c70 <display_button_up_handler+0x6c>)
     c3c:	6818      	ldr	r0, [r3, #0]
     c3e:	2300      	movs	r3, #0
     c40:	2200      	movs	r2, #0
     c42:	2100      	movs	r1, #0
     c44:	4c0b      	ldr	r4, [pc, #44]	; (c74 <display_button_up_handler+0x70>)
     c46:	47a0      	blx	r4
            display_update(false);
     c48:	2000      	movs	r0, #0
     c4a:	4b0b      	ldr	r3, [pc, #44]	; (c78 <display_button_up_handler+0x74>)
     c4c:	4798      	blx	r3
            display_state.display_blink = true;
     c4e:	4b05      	ldr	r3, [pc, #20]	; (c64 <display_button_up_handler+0x60>)
     c50:	2201      	movs	r2, #1
     c52:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
     c54:	4b03      	ldr	r3, [pc, #12]	; (c64 <display_button_up_handler+0x60>)
     c56:	2200      	movs	r2, #0
     c58:	72da      	strb	r2, [r3, #11]
        }
    }
}
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	46bd      	mov	sp, r7
     c5e:	b003      	add	sp, #12
     c60:	bd90      	pop	{r4, r7, pc}
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	20004608 	.word	0x20004608
     c68:	00001955 	.word	0x00001955
     c6c:	000018a1 	.word	0x000018a1
     c70:	20004620 	.word	0x20004620
     c74:	0000c7c9 	.word	0x0000c7c9
     c78:	000007dd 	.word	0x000007dd

00000c7c <display_set_display>:

static void display_set_display(uint8_t *new_conf)
{    
     c7c:	b580      	push	{r7, lr}
     c7e:	b082      	sub	sp, #8
     c80:	af00      	add	r7, sp, #0
     c82:	6078      	str	r0, [r7, #4]
    new_conf[0] = display_state.char_display[0];
     c84:	4b45      	ldr	r3, [pc, #276]	; (d9c <display_set_display+0x120>)
     c86:	781a      	ldrb	r2, [r3, #0]
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	701a      	strb	r2, [r3, #0]
    new_conf[1] = display_state.char_display[1];
     c8c:	687b      	ldr	r3, [r7, #4]
     c8e:	3301      	adds	r3, #1
     c90:	4a42      	ldr	r2, [pc, #264]	; (d9c <display_set_display+0x120>)
     c92:	7852      	ldrb	r2, [r2, #1]
     c94:	701a      	strb	r2, [r3, #0]
    new_conf[2] = display_state.char_display[2];
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	3302      	adds	r3, #2
     c9a:	4a40      	ldr	r2, [pc, #256]	; (d9c <display_set_display+0x120>)
     c9c:	7892      	ldrb	r2, [r2, #2]
     c9e:	701a      	strb	r2, [r3, #0]
        
    if (display_state.bubbles_on)
     ca0:	4b3e      	ldr	r3, [pc, #248]	; (d9c <display_set_display+0x120>)
     ca2:	79db      	ldrb	r3, [r3, #7]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d008      	beq.n	cba <display_set_display+0x3e>
        new_conf[4] |= LED_BUBBLES;
     ca8:	687b      	ldr	r3, [r7, #4]
     caa:	3304      	adds	r3, #4
     cac:	687a      	ldr	r2, [r7, #4]
     cae:	3204      	adds	r2, #4
     cb0:	7812      	ldrb	r2, [r2, #0]
     cb2:	2104      	movs	r1, #4
     cb4:	430a      	orrs	r2, r1
     cb6:	b2d2      	uxtb	r2, r2
     cb8:	701a      	strb	r2, [r3, #0]

    if (display_state.degrees_F)
     cba:	4b38      	ldr	r3, [pc, #224]	; (d9c <display_set_display+0x120>)
     cbc:	78db      	ldrb	r3, [r3, #3]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d009      	beq.n	cd6 <display_set_display+0x5a>
        new_conf[4] |= LED_DEG_F;
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	3304      	adds	r3, #4
     cc6:	687a      	ldr	r2, [r7, #4]
     cc8:	3204      	adds	r2, #4
     cca:	7812      	ldrb	r2, [r2, #0]
     ccc:	2102      	movs	r1, #2
     cce:	430a      	orrs	r2, r1
     cd0:	b2d2      	uxtb	r2, r2
     cd2:	701a      	strb	r2, [r3, #0]
     cd4:	e008      	b.n	ce8 <display_set_display+0x6c>
    else
        new_conf[4] |= LED_DEG_C;
     cd6:	687b      	ldr	r3, [r7, #4]
     cd8:	3304      	adds	r3, #4
     cda:	687a      	ldr	r2, [r7, #4]
     cdc:	3204      	adds	r2, #4
     cde:	7812      	ldrb	r2, [r2, #0]
     ce0:	2101      	movs	r1, #1
     ce2:	430a      	orrs	r2, r1
     ce4:	b2d2      	uxtb	r2, r2
     ce6:	701a      	strb	r2, [r3, #0]

    if (display_state.pump_on) {
     ce8:	4b2c      	ldr	r3, [pc, #176]	; (d9c <display_set_display+0x120>)
     cea:	7a1b      	ldrb	r3, [r3, #8]
     cec:	2b00      	cmp	r3, #0
     cee:	d028      	beq.n	d42 <display_set_display+0xc6>
        new_conf[3] |= LED_PUMP;
     cf0:	687b      	ldr	r3, [r7, #4]
     cf2:	3303      	adds	r3, #3
     cf4:	687a      	ldr	r2, [r7, #4]
     cf6:	3203      	adds	r2, #3
     cf8:	7812      	ldrb	r2, [r2, #0]
     cfa:	2102      	movs	r1, #2
     cfc:	430a      	orrs	r2, r1
     cfe:	b2d2      	uxtb	r2, r2
     d00:	701a      	strb	r2, [r3, #0]
        new_conf[3] |= LED_TIMER;
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	3303      	adds	r3, #3
     d06:	687a      	ldr	r2, [r7, #4]
     d08:	3203      	adds	r2, #3
     d0a:	7812      	ldrb	r2, [r2, #0]
     d0c:	2110      	movs	r1, #16
     d0e:	430a      	orrs	r2, r1
     d10:	b2d2      	uxtb	r2, r2
     d12:	701a      	strb	r2, [r3, #0]
        if (display_state.heater_on)
     d14:	4b21      	ldr	r3, [pc, #132]	; (d9c <display_set_display+0x120>)
     d16:	799b      	ldrb	r3, [r3, #6]
     d18:	2b00      	cmp	r3, #0
     d1a:	d009      	beq.n	d30 <display_set_display+0xb4>
            new_conf[3] |= LED_HEATON;
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	3303      	adds	r3, #3
     d20:	687a      	ldr	r2, [r7, #4]
     d22:	3203      	adds	r2, #3
     d24:	7812      	ldrb	r2, [r2, #0]
     d26:	2104      	movs	r1, #4
     d28:	430a      	orrs	r2, r1
     d2a:	b2d2      	uxtb	r2, r2
     d2c:	701a      	strb	r2, [r3, #0]
     d2e:	e008      	b.n	d42 <display_set_display+0xc6>
        else
            new_conf[3] |= LED_HEATOFF;
     d30:	687b      	ldr	r3, [r7, #4]
     d32:	3303      	adds	r3, #3
     d34:	687a      	ldr	r2, [r7, #4]
     d36:	3203      	adds	r2, #3
     d38:	7812      	ldrb	r2, [r2, #0]
     d3a:	2108      	movs	r1, #8
     d3c:	430a      	orrs	r2, r1
     d3e:	b2d2      	uxtb	r2, r2
     d40:	701a      	strb	r2, [r3, #0]
    }

    if (display_state.timer_set)
     d42:	4b16      	ldr	r3, [pc, #88]	; (d9c <display_set_display+0x120>)
     d44:	791b      	ldrb	r3, [r3, #4]
     d46:	2b00      	cmp	r3, #0
     d48:	d008      	beq.n	d5c <display_set_display+0xe0>
        new_conf[3] |= LED_TIMER_SET;
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	3303      	adds	r3, #3
     d4e:	687a      	ldr	r2, [r7, #4]
     d50:	3203      	adds	r2, #3
     d52:	7812      	ldrb	r2, [r2, #0]
     d54:	2140      	movs	r1, #64	; 0x40
     d56:	430a      	orrs	r2, r1
     d58:	b2d2      	uxtb	r2, r2
     d5a:	701a      	strb	r2, [r3, #0]

    if (display_state.display_locked)
     d5c:	4b0f      	ldr	r3, [pc, #60]	; (d9c <display_set_display+0x120>)
     d5e:	7b1b      	ldrb	r3, [r3, #12]
     d60:	2b00      	cmp	r3, #0
     d62:	d008      	beq.n	d76 <display_set_display+0xfa>
        new_conf[3] |= LED_LOCK;
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	3303      	adds	r3, #3
     d68:	687a      	ldr	r2, [r7, #4]
     d6a:	3203      	adds	r2, #3
     d6c:	7812      	ldrb	r2, [r2, #0]
     d6e:	2120      	movs	r1, #32
     d70:	430a      	orrs	r2, r1
     d72:	b2d2      	uxtb	r2, r2
     d74:	701a      	strb	r2, [r3, #0]

    if (display_state.timer_on)
     d76:	4b09      	ldr	r3, [pc, #36]	; (d9c <display_set_display+0x120>)
     d78:	795b      	ldrb	r3, [r3, #5]
     d7a:	2b00      	cmp	r3, #0
     d7c:	d009      	beq.n	d92 <display_set_display+0x116>
        new_conf[3] |= LED_CLOCK;    
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	3303      	adds	r3, #3
     d82:	687a      	ldr	r2, [r7, #4]
     d84:	3203      	adds	r2, #3
     d86:	7812      	ldrb	r2, [r2, #0]
     d88:	2180      	movs	r1, #128	; 0x80
     d8a:	4249      	negs	r1, r1
     d8c:	430a      	orrs	r2, r1
     d8e:	b2d2      	uxtb	r2, r2
     d90:	701a      	strb	r2, [r3, #0]
}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	46bd      	mov	sp, r7
     d96:	b002      	add	sp, #8
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	20004608 	.word	0x20004608

00000da0 <display_init>:
    {BUTTON_TIMER,          display_timer_handler },
    { 0, NULL },
};

void display_init(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	af00      	add	r7, sp, #0
    wtc6508_init();   
     da4:	4b10      	ldr	r3, [pc, #64]	; (de8 <display_init+0x48>)
     da6:	4798      	blx	r3
    tm1640_init();
     da8:	4b10      	ldr	r3, [pc, #64]	; (dec <display_init+0x4c>)
     daa:	4798      	blx	r3

    memset(&display_state, 0, sizeof(display_state));
     dac:	4b10      	ldr	r3, [pc, #64]	; (df0 <display_init+0x50>)
     dae:	2218      	movs	r2, #24
     db0:	2100      	movs	r1, #0
     db2:	0018      	movs	r0, r3
     db4:	4b0f      	ldr	r3, [pc, #60]	; (df4 <display_init+0x54>)
     db6:	4798      	blx	r3

    // Set the initial display state
    display_state.char_display[0] = SEG_0;
     db8:	4b0d      	ldr	r3, [pc, #52]	; (df0 <display_init+0x50>)
     dba:	223f      	movs	r2, #63	; 0x3f
     dbc:	701a      	strb	r2, [r3, #0]
    display_state.char_display[1] = SEG_0;
     dbe:	4b0c      	ldr	r3, [pc, #48]	; (df0 <display_init+0x50>)
     dc0:	223f      	movs	r2, #63	; 0x3f
     dc2:	705a      	strb	r2, [r3, #1]
    display_state.char_display[2] = SEG_0;
     dc4:	4b0a      	ldr	r3, [pc, #40]	; (df0 <display_init+0x50>)
     dc6:	223f      	movs	r2, #63	; 0x3f
     dc8:	709a      	strb	r2, [r3, #2]

    display_state.degrees_F = true;        
     dca:	4b09      	ldr	r3, [pc, #36]	; (df0 <display_init+0x50>)
     dcc:	2201      	movs	r2, #1
     dce:	70da      	strb	r2, [r3, #3]
    display_state.display_update = true;    
     dd0:	4b07      	ldr	r3, [pc, #28]	; (df0 <display_init+0x50>)
     dd2:	2201      	movs	r2, #1
     dd4:	725a      	strb	r2, [r3, #9]

    display_update_mutex = xSemaphoreCreateMutex();
     dd6:	2001      	movs	r0, #1
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <display_init+0x58>)
     dda:	4798      	blx	r3
     ddc:	0002      	movs	r2, r0
     dde:	4b07      	ldr	r3, [pc, #28]	; (dfc <display_init+0x5c>)
     de0:	601a      	str	r2, [r3, #0]
}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	46bd      	mov	sp, r7
     de6:	bd80      	pop	{r7, pc}
     de8:	00002229 	.word	0x00002229
     dec:	00001e31 	.word	0x00001e31
     df0:	20004608 	.word	0x20004608
     df4:	00010c67 	.word	0x00010c67
     df8:	0000c789 	.word	0x0000c789
     dfc:	200045c4 	.word	0x200045c4

00000e00 <display_idle>:

void display_idle(void)
{
     e00:	b580      	push	{r7, lr}
     e02:	b082      	sub	sp, #8
     e04:	af00      	add	r7, sp, #0
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
     e06:	003b      	movs	r3, r7
     e08:	0018      	movs	r0, r3
     e0a:	2305      	movs	r3, #5
     e0c:	001a      	movs	r2, r3
     e0e:	2100      	movs	r1, #0
     e10:	4b0e      	ldr	r3, [pc, #56]	; (e4c <display_idle+0x4c>)
     e12:	4798      	blx	r3

    if (display_state.display_update && !display_state.display_blink) {
     e14:	4b0e      	ldr	r3, [pc, #56]	; (e50 <display_idle+0x50>)
     e16:	7a5b      	ldrb	r3, [r3, #9]
     e18:	2b00      	cmp	r3, #0
     e1a:	d013      	beq.n	e44 <display_idle+0x44>
     e1c:	4b0c      	ldr	r3, [pc, #48]	; (e50 <display_idle+0x50>)
     e1e:	7a9b      	ldrb	r3, [r3, #10]
     e20:	2201      	movs	r2, #1
     e22:	4053      	eors	r3, r2
     e24:	b2db      	uxtb	r3, r3
     e26:	2b00      	cmp	r3, #0
     e28:	d00c      	beq.n	e44 <display_idle+0x44>
        display_update(false);
     e2a:	2000      	movs	r0, #0
     e2c:	4b09      	ldr	r3, [pc, #36]	; (e54 <display_idle+0x54>)
     e2e:	4798      	blx	r3

        // Perform a display update        
        display_set_display(disp_conf);
     e30:	003b      	movs	r3, r7
     e32:	0018      	movs	r0, r3
     e34:	4b08      	ldr	r3, [pc, #32]	; (e58 <display_idle+0x58>)
     e36:	4798      	blx	r3

        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
     e38:	003b      	movs	r3, r7
     e3a:	228f      	movs	r2, #143	; 0x8f
     e3c:	2105      	movs	r1, #5
     e3e:	0018      	movs	r0, r3
     e40:	4b06      	ldr	r3, [pc, #24]	; (e5c <display_idle+0x5c>)
     e42:	4798      	blx	r3
    }
}
     e44:	46c0      	nop			; (mov r8, r8)
     e46:	46bd      	mov	sp, r7
     e48:	b002      	add	sp, #8
     e4a:	bd80      	pop	{r7, pc}
     e4c:	00010c67 	.word	0x00010c67
     e50:	20004608 	.word	0x20004608
     e54:	000007dd 	.word	0x000007dd
     e58:	00000c7d 	.word	0x00000c7d
     e5c:	00001ead 	.word	0x00001ead

00000e60 <display_update_1Hz>:

void display_update_1Hz(void)
{
     e60:	b590      	push	{r4, r7, lr}
     e62:	b083      	sub	sp, #12
     e64:	af00      	add	r7, sp, #0
    static bool blink_state = false;
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
     e66:	003b      	movs	r3, r7
     e68:	0018      	movs	r0, r3
     e6a:	2305      	movs	r3, #5
     e6c:	001a      	movs	r2, r3
     e6e:	2100      	movs	r1, #0
     e70:	4b4b      	ldr	r3, [pc, #300]	; (fa0 <display_update_1Hz+0x140>)
     e72:	4798      	blx	r3
    uint8_t temperature;

    if (display_state.display_blink) {
     e74:	4b4b      	ldr	r3, [pc, #300]	; (fa4 <display_update_1Hz+0x144>)
     e76:	7a9b      	ldrb	r3, [r3, #10]
     e78:	2b00      	cmp	r3, #0
     e7a:	d040      	beq.n	efe <display_update_1Hz+0x9e>

        display_set_display(disp_conf);
     e7c:	003b      	movs	r3, r7
     e7e:	0018      	movs	r0, r3
     e80:	4b49      	ldr	r3, [pc, #292]	; (fa8 <display_update_1Hz+0x148>)
     e82:	4798      	blx	r3
        // Only the character display should blink        
        if (blink_state) {
     e84:	4b49      	ldr	r3, [pc, #292]	; (fac <display_update_1Hz+0x14c>)
     e86:	781b      	ldrb	r3, [r3, #0]
     e88:	2b00      	cmp	r3, #0
     e8a:	d009      	beq.n	ea0 <display_update_1Hz+0x40>
            disp_conf[0] = SEG_OFF;
     e8c:	003b      	movs	r3, r7
     e8e:	2200      	movs	r2, #0
     e90:	701a      	strb	r2, [r3, #0]
            disp_conf[1] = SEG_OFF;
     e92:	003b      	movs	r3, r7
     e94:	2200      	movs	r2, #0
     e96:	705a      	strb	r2, [r3, #1]
            disp_conf[2] = SEG_OFF;
     e98:	003b      	movs	r3, r7
     e9a:	2200      	movs	r2, #0
     e9c:	709a      	strb	r2, [r3, #2]
     e9e:	e00b      	b.n	eb8 <display_update_1Hz+0x58>
        }
        else {
            temperature = thermal_get_temperature();
     ea0:	1dfc      	adds	r4, r7, #7
     ea2:	4b43      	ldr	r3, [pc, #268]	; (fb0 <display_update_1Hz+0x150>)
     ea4:	4798      	blx	r3
     ea6:	0003      	movs	r3, r0
     ea8:	7023      	strb	r3, [r4, #0]
            display_number_to_seg(temperature, disp_conf);
     eaa:	003a      	movs	r2, r7
     eac:	1dfb      	adds	r3, r7, #7
     eae:	781b      	ldrb	r3, [r3, #0]
     eb0:	0011      	movs	r1, r2
     eb2:	0018      	movs	r0, r3
     eb4:	4b3f      	ldr	r3, [pc, #252]	; (fb4 <display_update_1Hz+0x154>)
     eb6:	4798      	blx	r3
        }

        if (display_state.display_blink_timer++ >= DISPLAY_BLINK_TIME) {
     eb8:	4b3a      	ldr	r3, [pc, #232]	; (fa4 <display_update_1Hz+0x144>)
     eba:	7adb      	ldrb	r3, [r3, #11]
     ebc:	1c5a      	adds	r2, r3, #1
     ebe:	b2d1      	uxtb	r1, r2
     ec0:	4a38      	ldr	r2, [pc, #224]	; (fa4 <display_update_1Hz+0x144>)
     ec2:	72d1      	strb	r1, [r2, #11]
     ec4:	2b04      	cmp	r3, #4
     ec6:	d909      	bls.n	edc <display_update_1Hz+0x7c>
            display_state.display_blink_timer = 0;
     ec8:	4b36      	ldr	r3, [pc, #216]	; (fa4 <display_update_1Hz+0x144>)
     eca:	2200      	movs	r2, #0
     ecc:	72da      	strb	r2, [r3, #11]
            display_state.display_blink = 0;
     ece:	4b35      	ldr	r3, [pc, #212]	; (fa4 <display_update_1Hz+0x144>)
     ed0:	2200      	movs	r2, #0
     ed2:	729a      	strb	r2, [r3, #10]
            blink_state = false;
     ed4:	4b35      	ldr	r3, [pc, #212]	; (fac <display_update_1Hz+0x14c>)
     ed6:	2200      	movs	r2, #0
     ed8:	701a      	strb	r2, [r3, #0]
     eda:	e009      	b.n	ef0 <display_update_1Hz+0x90>
        }
        else
            blink_state ^= 1;
     edc:	4b33      	ldr	r3, [pc, #204]	; (fac <display_update_1Hz+0x14c>)
     ede:	781b      	ldrb	r3, [r3, #0]
     ee0:	2201      	movs	r2, #1
     ee2:	4053      	eors	r3, r2
     ee4:	b2db      	uxtb	r3, r3
     ee6:	1e5a      	subs	r2, r3, #1
     ee8:	4193      	sbcs	r3, r2
     eea:	b2da      	uxtb	r2, r3
     eec:	4b2f      	ldr	r3, [pc, #188]	; (fac <display_update_1Hz+0x14c>)
     eee:	701a      	strb	r2, [r3, #0]
                        
        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
     ef0:	003b      	movs	r3, r7
     ef2:	228f      	movs	r2, #143	; 0x8f
     ef4:	2105      	movs	r1, #5
     ef6:	0018      	movs	r0, r3
     ef8:	4b2f      	ldr	r3, [pc, #188]	; (fb8 <display_update_1Hz+0x158>)
     efa:	4798      	blx	r3
     efc:	e01c      	b.n	f38 <display_update_1Hz+0xd8>
    }
    else {
        // Check to see if the temperature changed
        temperature = thermal_get_water_temp();
     efe:	1dfc      	adds	r4, r7, #7
     f00:	4b2e      	ldr	r3, [pc, #184]	; (fbc <display_update_1Hz+0x15c>)
     f02:	4798      	blx	r3
     f04:	0003      	movs	r3, r0
     f06:	7023      	strb	r3, [r4, #0]
        if (temperature != 0xFF) {
     f08:	1dfb      	adds	r3, r7, #7
     f0a:	781b      	ldrb	r3, [r3, #0]
     f0c:	2bff      	cmp	r3, #255	; 0xff
     f0e:	d007      	beq.n	f20 <display_update_1Hz+0xc0>
            // 255 represents an invalid/un-updated temperature
            display_number_to_seg(temperature, (uint8_t *) &display_state.char_display[0]);
     f10:	4a24      	ldr	r2, [pc, #144]	; (fa4 <display_update_1Hz+0x144>)
     f12:	1dfb      	adds	r3, r7, #7
     f14:	781b      	ldrb	r3, [r3, #0]
     f16:	0011      	movs	r1, r2
     f18:	0018      	movs	r0, r3
     f1a:	4b26      	ldr	r3, [pc, #152]	; (fb4 <display_update_1Hz+0x154>)
     f1c:	4798      	blx	r3
     f1e:	e008      	b.n	f32 <display_update_1Hz+0xd2>
        }        
        else {
            display_state.char_display[0] = SEG_0;
     f20:	4b20      	ldr	r3, [pc, #128]	; (fa4 <display_update_1Hz+0x144>)
     f22:	223f      	movs	r2, #63	; 0x3f
     f24:	701a      	strb	r2, [r3, #0]
            display_state.char_display[1] = SEG_0;
     f26:	4b1f      	ldr	r3, [pc, #124]	; (fa4 <display_update_1Hz+0x144>)
     f28:	223f      	movs	r2, #63	; 0x3f
     f2a:	705a      	strb	r2, [r3, #1]
            display_state.char_display[2] = SEG_0;
     f2c:	4b1d      	ldr	r3, [pc, #116]	; (fa4 <display_update_1Hz+0x144>)
     f2e:	223f      	movs	r2, #63	; 0x3f
     f30:	709a      	strb	r2, [r3, #2]
        }
        display_update(true);
     f32:	2001      	movs	r0, #1
     f34:	4b22      	ldr	r3, [pc, #136]	; (fc0 <display_update_1Hz+0x160>)
     f36:	4798      	blx	r3
    }    

    if (display_state.heater_on) {
     f38:	4b1a      	ldr	r3, [pc, #104]	; (fa4 <display_update_1Hz+0x144>)
     f3a:	799b      	ldrb	r3, [r3, #6]
     f3c:	2b00      	cmp	r3, #0
     f3e:	d013      	beq.n	f68 <display_update_1Hz+0x108>
        if (thermal_get_water_temp() >= (thermal_get_temperature() + WATER_TEMP_HYST)) {
     f40:	4b1e      	ldr	r3, [pc, #120]	; (fbc <display_update_1Hz+0x15c>)
     f42:	4798      	blx	r3
     f44:	0003      	movs	r3, r0
     f46:	001c      	movs	r4, r3
     f48:	4b19      	ldr	r3, [pc, #100]	; (fb0 <display_update_1Hz+0x150>)
     f4a:	4798      	blx	r3
     f4c:	0003      	movs	r3, r0
     f4e:	3301      	adds	r3, #1
     f50:	429c      	cmp	r4, r3
     f52:	db20      	blt.n	f96 <display_update_1Hz+0x136>
            display_state.heater_on = false;            
     f54:	4b13      	ldr	r3, [pc, #76]	; (fa4 <display_update_1Hz+0x144>)
     f56:	2200      	movs	r2, #0
     f58:	719a      	strb	r2, [r3, #6]
            thermal_turn_on_heater(false);
     f5a:	2000      	movs	r0, #0
     f5c:	4b19      	ldr	r3, [pc, #100]	; (fc4 <display_update_1Hz+0x164>)
     f5e:	4798      	blx	r3
            display_update(true);
     f60:	2001      	movs	r0, #1
     f62:	4b17      	ldr	r3, [pc, #92]	; (fc0 <display_update_1Hz+0x160>)
     f64:	4798      	blx	r3
                thermal_turn_on_heater(true);
                display_update(true);
            }
        }
    }
}
     f66:	e016      	b.n	f96 <display_update_1Hz+0x136>
            thermal_turn_on_heater(false);
            display_update(true);
        }
    }
    else {
        if (display_state.pump_on) {
     f68:	4b0e      	ldr	r3, [pc, #56]	; (fa4 <display_update_1Hz+0x144>)
     f6a:	7a1b      	ldrb	r3, [r3, #8]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d012      	beq.n	f96 <display_update_1Hz+0x136>
            if (thermal_get_water_temp() < (thermal_get_temperature() - WATER_TEMP_HYST)) {
     f70:	4b12      	ldr	r3, [pc, #72]	; (fbc <display_update_1Hz+0x15c>)
     f72:	4798      	blx	r3
     f74:	0003      	movs	r3, r0
     f76:	001c      	movs	r4, r3
     f78:	4b0d      	ldr	r3, [pc, #52]	; (fb0 <display_update_1Hz+0x150>)
     f7a:	4798      	blx	r3
     f7c:	0003      	movs	r3, r0
     f7e:	3b01      	subs	r3, #1
     f80:	429c      	cmp	r4, r3
     f82:	da08      	bge.n	f96 <display_update_1Hz+0x136>
                display_state.heater_on = true;                
     f84:	4b07      	ldr	r3, [pc, #28]	; (fa4 <display_update_1Hz+0x144>)
     f86:	2201      	movs	r2, #1
     f88:	719a      	strb	r2, [r3, #6]
                thermal_turn_on_heater(true);
     f8a:	2001      	movs	r0, #1
     f8c:	4b0d      	ldr	r3, [pc, #52]	; (fc4 <display_update_1Hz+0x164>)
     f8e:	4798      	blx	r3
                display_update(true);
     f90:	2001      	movs	r0, #1
     f92:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <display_update_1Hz+0x160>)
     f94:	4798      	blx	r3
            }
        }
    }
}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	46bd      	mov	sp, r7
     f9a:	b003      	add	sp, #12
     f9c:	bd90      	pop	{r4, r7, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	00010c67 	.word	0x00010c67
     fa4:	20004608 	.word	0x20004608
     fa8:	00000c7d 	.word	0x00000c7d
     fac:	200000bc 	.word	0x200000bc
     fb0:	00001955 	.word	0x00001955
     fb4:	00000819 	.word	0x00000819
     fb8:	00001ead 	.word	0x00001ead
     fbc:	00001969 	.word	0x00001969
     fc0:	000007dd 	.word	0x000007dd
     fc4:	000019a9 	.word	0x000019a9

00000fc8 <display_update_33Hz>:

void display_update_33Hz(void)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b082      	sub	sp, #8
     fcc:	af00      	add	r7, sp, #0
    static uint8_t touch_detect_delay = 0;

    uint8_t status = 0;    
     fce:	1dbb      	adds	r3, r7, #6
     fd0:	2200      	movs	r2, #0
     fd2:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
     fd4:	1dfb      	adds	r3, r7, #7
     fd6:	2200      	movs	r2, #0
     fd8:	701a      	strb	r2, [r3, #0]
    
    if (!touch_detect_delay) {
     fda:	4b34      	ldr	r3, [pc, #208]	; (10ac <display_update_33Hz+0xe4>)
     fdc:	781b      	ldrb	r3, [r3, #0]
     fde:	2b00      	cmp	r3, #0
     fe0:	d145      	bne.n	106e <display_update_33Hz+0xa6>
        // Check for user input
        if (wtc6508_read(&status)) {
     fe2:	1dbb      	adds	r3, r7, #6
     fe4:	0018      	movs	r0, r3
     fe6:	4b32      	ldr	r3, [pc, #200]	; (10b0 <display_update_33Hz+0xe8>)
     fe8:	4798      	blx	r3
     fea:	1e03      	subs	r3, r0, #0
     fec:	d006      	beq.n	ffc <display_update_33Hz+0x34>
            printf("Error! Unable to read button status\n");
     fee:	4b31      	ldr	r3, [pc, #196]	; (10b4 <display_update_33Hz+0xec>)
     ff0:	0018      	movs	r0, r3
     ff2:	4b31      	ldr	r3, [pc, #196]	; (10b8 <display_update_33Hz+0xf0>)
     ff4:	4798      	blx	r3
            status = 0;
     ff6:	1dbb      	adds	r3, r7, #6
     ff8:	2200      	movs	r2, #0
     ffa:	701a      	strb	r2, [r3, #0]
        }

        // Handle user input
        if (status) {          
     ffc:	1dbb      	adds	r3, r7, #6
     ffe:	781b      	ldrb	r3, [r3, #0]
    1000:	2b00      	cmp	r3, #0
    1002:	d02c      	beq.n	105e <display_update_33Hz+0x96>
            touch_detect_delay = TOUCH_DETECT_DELAY;            
    1004:	4b29      	ldr	r3, [pc, #164]	; (10ac <display_update_33Hz+0xe4>)
    1006:	2205      	movs	r2, #5
    1008:	701a      	strb	r2, [r3, #0]

            while (display_handlers[i].button_mask) {
    100a:	e020      	b.n	104e <display_update_33Hz+0x86>
                if ((display_handlers[i].button_mask & status) && 
    100c:	1dfb      	adds	r3, r7, #7
    100e:	781a      	ldrb	r2, [r3, #0]
    1010:	4b2a      	ldr	r3, [pc, #168]	; (10bc <display_update_33Hz+0xf4>)
    1012:	00d2      	lsls	r2, r2, #3
    1014:	5cd3      	ldrb	r3, [r2, r3]
    1016:	1dba      	adds	r2, r7, #6
    1018:	7812      	ldrb	r2, [r2, #0]
    101a:	4013      	ands	r3, r2
    101c:	b2db      	uxtb	r3, r3
    101e:	2b00      	cmp	r3, #0
    1020:	d010      	beq.n	1044 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
    1022:	1dfb      	adds	r3, r7, #7
    1024:	781b      	ldrb	r3, [r3, #0]
    1026:	4a25      	ldr	r2, [pc, #148]	; (10bc <display_update_33Hz+0xf4>)
    1028:	00db      	lsls	r3, r3, #3
    102a:	18d3      	adds	r3, r2, r3
    102c:	3304      	adds	r3, #4
    102e:	681b      	ldr	r3, [r3, #0]
        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
                if ((display_handlers[i].button_mask & status) && 
    1030:	2b00      	cmp	r3, #0
    1032:	d007      	beq.n	1044 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
                     display_handlers[i].handler();
    1034:	1dfb      	adds	r3, r7, #7
    1036:	781b      	ldrb	r3, [r3, #0]
    1038:	4a20      	ldr	r2, [pc, #128]	; (10bc <display_update_33Hz+0xf4>)
    103a:	00db      	lsls	r3, r3, #3
    103c:	18d3      	adds	r3, r2, r3
    103e:	3304      	adds	r3, #4
    1040:	681b      	ldr	r3, [r3, #0]
    1042:	4798      	blx	r3
                }
                i++;
    1044:	1dfb      	adds	r3, r7, #7
    1046:	781a      	ldrb	r2, [r3, #0]
    1048:	1dfb      	adds	r3, r7, #7
    104a:	3201      	adds	r2, #1
    104c:	701a      	strb	r2, [r3, #0]

        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
    104e:	1dfb      	adds	r3, r7, #7
    1050:	781a      	ldrb	r2, [r3, #0]
    1052:	4b1a      	ldr	r3, [pc, #104]	; (10bc <display_update_33Hz+0xf4>)
    1054:	00d2      	lsls	r2, r2, #3
    1056:	5cd3      	ldrb	r3, [r2, r3]
    1058:	2b00      	cmp	r3, #0
    105a:	d1d7      	bne.n	100c <display_update_33Hz+0x44>
    105c:	e00d      	b.n	107a <display_update_33Hz+0xb2>
                     display_handlers[i].handler();
                }
                i++;
            }
        }
        else if (display_state.display_unlock_timer > 0)
    105e:	4b18      	ldr	r3, [pc, #96]	; (10c0 <display_update_33Hz+0xf8>)
    1060:	695b      	ldr	r3, [r3, #20]
    1062:	2b00      	cmp	r3, #0
    1064:	d009      	beq.n	107a <display_update_33Hz+0xb2>
            // Reset the display unlock timer because the user isn't holding the button anymore
            display_state.display_unlock_timer = 0;
    1066:	4b16      	ldr	r3, [pc, #88]	; (10c0 <display_update_33Hz+0xf8>)
    1068:	2200      	movs	r2, #0
    106a:	615a      	str	r2, [r3, #20]
    106c:	e005      	b.n	107a <display_update_33Hz+0xb2>
    }
    else
        touch_detect_delay--;
    106e:	4b0f      	ldr	r3, [pc, #60]	; (10ac <display_update_33Hz+0xe4>)
    1070:	781b      	ldrb	r3, [r3, #0]
    1072:	3b01      	subs	r3, #1
    1074:	b2da      	uxtb	r2, r3
    1076:	4b0d      	ldr	r3, [pc, #52]	; (10ac <display_update_33Hz+0xe4>)
    1078:	701a      	strb	r2, [r3, #0]

    if (!display_state.display_locked && display_state.display_lock_timer++ > DISPLAY_LOCK_TIME) {
    107a:	4b11      	ldr	r3, [pc, #68]	; (10c0 <display_update_33Hz+0xf8>)
    107c:	7b1b      	ldrb	r3, [r3, #12]
    107e:	2201      	movs	r2, #1
    1080:	4053      	eors	r3, r2
    1082:	b2db      	uxtb	r3, r3
    1084:	2b00      	cmp	r3, #0
    1086:	d00d      	beq.n	10a4 <display_update_33Hz+0xdc>
    1088:	4b0d      	ldr	r3, [pc, #52]	; (10c0 <display_update_33Hz+0xf8>)
    108a:	691b      	ldr	r3, [r3, #16]
    108c:	1c59      	adds	r1, r3, #1
    108e:	4a0c      	ldr	r2, [pc, #48]	; (10c0 <display_update_33Hz+0xf8>)
    1090:	6111      	str	r1, [r2, #16]
    1092:	4a0c      	ldr	r2, [pc, #48]	; (10c4 <display_update_33Hz+0xfc>)
    1094:	4293      	cmp	r3, r2
    1096:	d905      	bls.n	10a4 <display_update_33Hz+0xdc>
        display_state.display_locked = true;
    1098:	4b09      	ldr	r3, [pc, #36]	; (10c0 <display_update_33Hz+0xf8>)
    109a:	2201      	movs	r2, #1
    109c:	731a      	strb	r2, [r3, #12]
        display_update(true);
    109e:	2001      	movs	r0, #1
    10a0:	4b09      	ldr	r3, [pc, #36]	; (10c8 <display_update_33Hz+0x100>)
    10a2:	4798      	blx	r3
    }
}
    10a4:	46c0      	nop			; (mov r8, r8)
    10a6:	46bd      	mov	sp, r7
    10a8:	b002      	add	sp, #8
    10aa:	bd80      	pop	{r7, pc}
    10ac:	200000bd 	.word	0x200000bd
    10b0:	000022cd 	.word	0x000022cd
    10b4:	00012460 	.word	0x00012460
    10b8:	0001133d 	.word	0x0001133d
    10bc:	00012418 	.word	0x00012418
    10c0:	20004608 	.word	0x20004608
    10c4:	00002710 	.word	0x00002710
    10c8:	000007dd 	.word	0x000007dd

000010cc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    10cc:	b580      	push	{r7, lr}
    10ce:	b084      	sub	sp, #16
    10d0:	af00      	add	r7, sp, #0
    10d2:	0002      	movs	r2, r0
    10d4:	1dfb      	adds	r3, r7, #7
    10d6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    10d8:	230f      	movs	r3, #15
    10da:	18fb      	adds	r3, r7, r3
    10dc:	1dfa      	adds	r2, r7, #7
    10de:	7812      	ldrb	r2, [r2, #0]
    10e0:	09d2      	lsrs	r2, r2, #7
    10e2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    10e4:	230e      	movs	r3, #14
    10e6:	18fb      	adds	r3, r7, r3
    10e8:	1dfa      	adds	r2, r7, #7
    10ea:	7812      	ldrb	r2, [r2, #0]
    10ec:	0952      	lsrs	r2, r2, #5
    10ee:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    10f0:	4b0d      	ldr	r3, [pc, #52]	; (1128 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    10f2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    10f4:	230f      	movs	r3, #15
    10f6:	18fb      	adds	r3, r7, r3
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d10f      	bne.n	111e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    10fe:	230f      	movs	r3, #15
    1100:	18fb      	adds	r3, r7, r3
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	009b      	lsls	r3, r3, #2
    1106:	2210      	movs	r2, #16
    1108:	4694      	mov	ip, r2
    110a:	44bc      	add	ip, r7
    110c:	4463      	add	r3, ip
    110e:	3b08      	subs	r3, #8
    1110:	681a      	ldr	r2, [r3, #0]
    1112:	230e      	movs	r3, #14
    1114:	18fb      	adds	r3, r7, r3
    1116:	781b      	ldrb	r3, [r3, #0]
    1118:	01db      	lsls	r3, r3, #7
    111a:	18d3      	adds	r3, r2, r3
    111c:	e000      	b.n	1120 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    111e:	2300      	movs	r3, #0
	}
}
    1120:	0018      	movs	r0, r3
    1122:	46bd      	mov	sp, r7
    1124:	b004      	add	sp, #16
    1126:	bd80      	pop	{r7, pc}
    1128:	41004400 	.word	0x41004400

0000112c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    112c:	b580      	push	{r7, lr}
    112e:	b082      	sub	sp, #8
    1130:	af00      	add	r7, sp, #0
    1132:	0002      	movs	r2, r0
    1134:	1dfb      	adds	r3, r7, #7
    1136:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1138:	4b06      	ldr	r3, [pc, #24]	; (1154 <system_interrupt_enable+0x28>)
    113a:	1dfa      	adds	r2, r7, #7
    113c:	7812      	ldrb	r2, [r2, #0]
    113e:	0011      	movs	r1, r2
    1140:	221f      	movs	r2, #31
    1142:	400a      	ands	r2, r1
    1144:	2101      	movs	r1, #1
    1146:	4091      	lsls	r1, r2
    1148:	000a      	movs	r2, r1
    114a:	601a      	str	r2, [r3, #0]
}
    114c:	46c0      	nop			; (mov r8, r8)
    114e:	46bd      	mov	sp, r7
    1150:	b002      	add	sp, #8
    1152:	bd80      	pop	{r7, pc}
    1154:	e000e100 	.word	0xe000e100

00001158 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1158:	b580      	push	{r7, lr}
    115a:	b084      	sub	sp, #16
    115c:	af00      	add	r7, sp, #0
    115e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1160:	687b      	ldr	r3, [r7, #4]
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	7e5b      	ldrb	r3, [r3, #25]
    116a:	b2db      	uxtb	r3, r3
    116c:	b25b      	sxtb	r3, r3
    116e:	2b00      	cmp	r3, #0
    1170:	da01      	bge.n	1176 <adc_is_syncing+0x1e>
		return true;
    1172:	2301      	movs	r3, #1
    1174:	e000      	b.n	1178 <adc_is_syncing+0x20>
	}

	return false;
    1176:	2300      	movs	r3, #0
}
    1178:	0018      	movs	r0, r3
    117a:	46bd      	mov	sp, r7
    117c:	b004      	add	sp, #16
    117e:	bd80      	pop	{r7, pc}

00001180 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    1180:	b580      	push	{r7, lr}
    1182:	b086      	sub	sp, #24
    1184:	af00      	add	r7, sp, #0
    1186:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1188:	687b      	ldr	r3, [r7, #4]
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    118e:	693b      	ldr	r3, [r7, #16]
    1190:	7e1b      	ldrb	r3, [r3, #24]
    1192:	b2db      	uxtb	r3, r3
    1194:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    1196:	2300      	movs	r3, #0
    1198:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    119a:	68fb      	ldr	r3, [r7, #12]
    119c:	2201      	movs	r2, #1
    119e:	4013      	ands	r3, r2
    11a0:	d003      	beq.n	11aa <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    11a2:	697b      	ldr	r3, [r7, #20]
    11a4:	2201      	movs	r2, #1
    11a6:	4313      	orrs	r3, r2
    11a8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    11aa:	68fb      	ldr	r3, [r7, #12]
    11ac:	2204      	movs	r2, #4
    11ae:	4013      	ands	r3, r2
    11b0:	d003      	beq.n	11ba <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    11b2:	697b      	ldr	r3, [r7, #20]
    11b4:	2202      	movs	r2, #2
    11b6:	4313      	orrs	r3, r2
    11b8:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    11ba:	68fb      	ldr	r3, [r7, #12]
    11bc:	2202      	movs	r2, #2
    11be:	4013      	ands	r3, r2
    11c0:	d003      	beq.n	11ca <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    11c2:	697b      	ldr	r3, [r7, #20]
    11c4:	2204      	movs	r2, #4
    11c6:	4313      	orrs	r3, r2
    11c8:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    11ca:	697b      	ldr	r3, [r7, #20]
}
    11cc:	0018      	movs	r0, r3
    11ce:	46bd      	mov	sp, r7
    11d0:	b006      	add	sp, #24
    11d2:	bd80      	pop	{r7, pc}

000011d4 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    11d4:	b580      	push	{r7, lr}
    11d6:	b084      	sub	sp, #16
    11d8:	af00      	add	r7, sp, #0
    11da:	6078      	str	r0, [r7, #4]
    11dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	681b      	ldr	r3, [r3, #0]
    11e2:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    11e4:	2300      	movs	r3, #0
    11e6:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    11e8:	683b      	ldr	r3, [r7, #0]
    11ea:	2201      	movs	r2, #1
    11ec:	4013      	ands	r3, r2
    11ee:	d003      	beq.n	11f8 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    11f0:	68fb      	ldr	r3, [r7, #12]
    11f2:	2201      	movs	r2, #1
    11f4:	4313      	orrs	r3, r2
    11f6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    11f8:	683b      	ldr	r3, [r7, #0]
    11fa:	2202      	movs	r2, #2
    11fc:	4013      	ands	r3, r2
    11fe:	d003      	beq.n	1208 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	2204      	movs	r2, #4
    1204:	4313      	orrs	r3, r2
    1206:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    1208:	683b      	ldr	r3, [r7, #0]
    120a:	2204      	movs	r2, #4
    120c:	4013      	ands	r3, r2
    120e:	d003      	beq.n	1218 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    1210:	68fb      	ldr	r3, [r7, #12]
    1212:	2202      	movs	r2, #2
    1214:	4313      	orrs	r3, r2
    1216:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    1218:	68fb      	ldr	r3, [r7, #12]
    121a:	b2da      	uxtb	r2, r3
    121c:	68bb      	ldr	r3, [r7, #8]
    121e:	761a      	strb	r2, [r3, #24]
}
    1220:	46c0      	nop			; (mov r8, r8)
    1222:	46bd      	mov	sp, r7
    1224:	b004      	add	sp, #16
    1226:	bd80      	pop	{r7, pc}

00001228 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    1228:	b580      	push	{r7, lr}
    122a:	b084      	sub	sp, #16
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1230:	687b      	ldr	r3, [r7, #4]
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	687b      	ldr	r3, [r7, #4]
    123a:	0018      	movs	r0, r3
    123c:	4b10      	ldr	r3, [pc, #64]	; (1280 <adc_enable+0x58>)
    123e:	4798      	blx	r3
    1240:	1e03      	subs	r3, r0, #0
    1242:	d1f9      	bne.n	1238 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    1244:	2017      	movs	r0, #23
    1246:	4b0f      	ldr	r3, [pc, #60]	; (1284 <adc_enable+0x5c>)
    1248:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    124a:	68fb      	ldr	r3, [r7, #12]
    124c:	220f      	movs	r2, #15
    124e:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    1250:	68fb      	ldr	r3, [r7, #12]
    1252:	220f      	movs	r2, #15
    1254:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1256:	68fb      	ldr	r3, [r7, #12]
    1258:	781b      	ldrb	r3, [r3, #0]
    125a:	b2db      	uxtb	r3, r3
    125c:	2202      	movs	r2, #2
    125e:	4313      	orrs	r3, r2
    1260:	b2da      	uxtb	r2, r3
    1262:	68fb      	ldr	r3, [r7, #12]
    1264:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	687b      	ldr	r3, [r7, #4]
    126a:	0018      	movs	r0, r3
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <adc_enable+0x58>)
    126e:	4798      	blx	r3
    1270:	1e03      	subs	r3, r0, #0
    1272:	d1f9      	bne.n	1268 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    1274:	2300      	movs	r3, #0
}
    1276:	0018      	movs	r0, r3
    1278:	46bd      	mov	sp, r7
    127a:	b004      	add	sp, #16
    127c:	bd80      	pop	{r7, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00001159 	.word	0x00001159
    1284:	0000112d 	.word	0x0000112d

00001288 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    1288:	b580      	push	{r7, lr}
    128a:	b084      	sub	sp, #16
    128c:	af00      	add	r7, sp, #0
    128e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1290:	687b      	ldr	r3, [r7, #4]
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	687b      	ldr	r3, [r7, #4]
    129a:	0018      	movs	r0, r3
    129c:	4b0b      	ldr	r3, [pc, #44]	; (12cc <adc_start_conversion+0x44>)
    129e:	4798      	blx	r3
    12a0:	1e03      	subs	r3, r0, #0
    12a2:	d1f9      	bne.n	1298 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    12a4:	68fb      	ldr	r3, [r7, #12]
    12a6:	7b1b      	ldrb	r3, [r3, #12]
    12a8:	b2db      	uxtb	r3, r3
    12aa:	2202      	movs	r2, #2
    12ac:	4313      	orrs	r3, r2
    12ae:	b2da      	uxtb	r2, r3
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    12b4:	46c0      	nop			; (mov r8, r8)
    12b6:	687b      	ldr	r3, [r7, #4]
    12b8:	0018      	movs	r0, r3
    12ba:	4b04      	ldr	r3, [pc, #16]	; (12cc <adc_start_conversion+0x44>)
    12bc:	4798      	blx	r3
    12be:	1e03      	subs	r3, r0, #0
    12c0:	d1f9      	bne.n	12b6 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	46bd      	mov	sp, r7
    12c6:	b004      	add	sp, #16
    12c8:	bd80      	pop	{r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	00001159 	.word	0x00001159

000012d0 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    12d0:	b580      	push	{r7, lr}
    12d2:	b084      	sub	sp, #16
    12d4:	af00      	add	r7, sp, #0
    12d6:	6078      	str	r0, [r7, #4]
    12d8:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	0018      	movs	r0, r3
    12de:	4b18      	ldr	r3, [pc, #96]	; (1340 <adc_read+0x70>)
    12e0:	4798      	blx	r3
    12e2:	0002      	movs	r2, r0
    12e4:	2301      	movs	r3, #1
    12e6:	4013      	ands	r3, r2
    12e8:	d101      	bne.n	12ee <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    12ea:	2305      	movs	r3, #5
    12ec:	e023      	b.n	1336 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    12ee:	687b      	ldr	r3, [r7, #4]
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    12f4:	46c0      	nop			; (mov r8, r8)
    12f6:	687b      	ldr	r3, [r7, #4]
    12f8:	0018      	movs	r0, r3
    12fa:	4b12      	ldr	r3, [pc, #72]	; (1344 <adc_read+0x74>)
    12fc:	4798      	blx	r3
    12fe:	1e03      	subs	r3, r0, #0
    1300:	d1f9      	bne.n	12f6 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	8b5b      	ldrh	r3, [r3, #26]
    1306:	b29a      	uxth	r2, r3
    1308:	683b      	ldr	r3, [r7, #0]
    130a:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	2101      	movs	r1, #1
    1310:	0018      	movs	r0, r3
    1312:	4b0d      	ldr	r3, [pc, #52]	; (1348 <adc_read+0x78>)
    1314:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    1316:	687b      	ldr	r3, [r7, #4]
    1318:	0018      	movs	r0, r3
    131a:	4b09      	ldr	r3, [pc, #36]	; (1340 <adc_read+0x70>)
    131c:	4798      	blx	r3
    131e:	0002      	movs	r2, r0
    1320:	2304      	movs	r3, #4
    1322:	4013      	ands	r3, r2
    1324:	d006      	beq.n	1334 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    1326:	687b      	ldr	r3, [r7, #4]
    1328:	2104      	movs	r1, #4
    132a:	0018      	movs	r0, r3
    132c:	4b06      	ldr	r3, [pc, #24]	; (1348 <adc_read+0x78>)
    132e:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    1330:	231e      	movs	r3, #30
    1332:	e000      	b.n	1336 <adc_read+0x66>
	}

	return STATUS_OK;
    1334:	2300      	movs	r3, #0
}
    1336:	0018      	movs	r0, r3
    1338:	46bd      	mov	sp, r7
    133a:	b004      	add	sp, #16
    133c:	bd80      	pop	{r7, pc}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	00001181 	.word	0x00001181
    1344:	00001159 	.word	0x00001159
    1348:	000011d5 	.word	0x000011d5

0000134c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    134c:	b580      	push	{r7, lr}
    134e:	b082      	sub	sp, #8
    1350:	af00      	add	r7, sp, #0
    1352:	0002      	movs	r2, r0
    1354:	1dfb      	adds	r3, r7, #7
    1356:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1358:	1dfb      	adds	r3, r7, #7
    135a:	781b      	ldrb	r3, [r3, #0]
    135c:	0018      	movs	r0, r3
    135e:	4b03      	ldr	r3, [pc, #12]	; (136c <port_get_group_from_gpio_pin+0x20>)
    1360:	4798      	blx	r3
    1362:	0003      	movs	r3, r0
}
    1364:	0018      	movs	r0, r3
    1366:	46bd      	mov	sp, r7
    1368:	b002      	add	sp, #8
    136a:	bd80      	pop	{r7, pc}
    136c:	000010cd 	.word	0x000010cd

00001370 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    1370:	b580      	push	{r7, lr}
    1372:	b084      	sub	sp, #16
    1374:	af00      	add	r7, sp, #0
    1376:	0002      	movs	r2, r0
    1378:	1dfb      	adds	r3, r7, #7
    137a:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    137c:	1dfb      	adds	r3, r7, #7
    137e:	781b      	ldrb	r3, [r3, #0]
    1380:	0018      	movs	r0, r3
    1382:	4b0b      	ldr	r3, [pc, #44]	; (13b0 <port_pin_get_output_level+0x40>)
    1384:	4798      	blx	r3
    1386:	0003      	movs	r3, r0
    1388:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    138a:	1dfb      	adds	r3, r7, #7
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	221f      	movs	r2, #31
    1390:	4013      	ands	r3, r2
    1392:	2201      	movs	r2, #1
    1394:	409a      	lsls	r2, r3
    1396:	0013      	movs	r3, r2
    1398:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	691b      	ldr	r3, [r3, #16]
    139e:	68ba      	ldr	r2, [r7, #8]
    13a0:	4013      	ands	r3, r2
    13a2:	1e5a      	subs	r2, r3, #1
    13a4:	4193      	sbcs	r3, r2
    13a6:	b2db      	uxtb	r3, r3
}
    13a8:	0018      	movs	r0, r3
    13aa:	46bd      	mov	sp, r7
    13ac:	b004      	add	sp, #16
    13ae:	bd80      	pop	{r7, pc}
    13b0:	0000134d 	.word	0x0000134d

000013b4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    13b4:	b580      	push	{r7, lr}
    13b6:	b084      	sub	sp, #16
    13b8:	af00      	add	r7, sp, #0
    13ba:	0002      	movs	r2, r0
    13bc:	1dfb      	adds	r3, r7, #7
    13be:	701a      	strb	r2, [r3, #0]
    13c0:	1dbb      	adds	r3, r7, #6
    13c2:	1c0a      	adds	r2, r1, #0
    13c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    13c6:	1dfb      	adds	r3, r7, #7
    13c8:	781b      	ldrb	r3, [r3, #0]
    13ca:	0018      	movs	r0, r3
    13cc:	4b0d      	ldr	r3, [pc, #52]	; (1404 <port_pin_set_output_level+0x50>)
    13ce:	4798      	blx	r3
    13d0:	0003      	movs	r3, r0
    13d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13d4:	1dfb      	adds	r3, r7, #7
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	221f      	movs	r2, #31
    13da:	4013      	ands	r3, r2
    13dc:	2201      	movs	r2, #1
    13de:	409a      	lsls	r2, r3
    13e0:	0013      	movs	r3, r2
    13e2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    13e4:	1dbb      	adds	r3, r7, #6
    13e6:	781b      	ldrb	r3, [r3, #0]
    13e8:	2b00      	cmp	r3, #0
    13ea:	d003      	beq.n	13f4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	68ba      	ldr	r2, [r7, #8]
    13f0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    13f2:	e002      	b.n	13fa <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    13f4:	68fb      	ldr	r3, [r7, #12]
    13f6:	68ba      	ldr	r2, [r7, #8]
    13f8:	615a      	str	r2, [r3, #20]
	}
}
    13fa:	46c0      	nop			; (mov r8, r8)
    13fc:	46bd      	mov	sp, r7
    13fe:	b004      	add	sp, #16
    1400:	bd80      	pop	{r7, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	0000134d 	.word	0x0000134d

00001408 <fahrenheit_to_celsius>:

SemaphoreHandle_t                                       display_mutex;
SemaphoreHandle_t                                       buzzer_sem;

static inline uint8_t fahrenheit_to_celsius(uint8_t deg_f)
{
    1408:	b580      	push	{r7, lr}
    140a:	b084      	sub	sp, #16
    140c:	af00      	add	r7, sp, #0
    140e:	0002      	movs	r2, r0
    1410:	1dfb      	adds	r3, r7, #7
    1412:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_f;
    1414:	230e      	movs	r3, #14
    1416:	18fb      	adds	r3, r7, r3
    1418:	1dfa      	adds	r2, r7, #7
    141a:	7812      	ldrb	r2, [r2, #0]
    141c:	801a      	strh	r2, [r3, #0]
    convert = (convert - 32) * 5 / 9;
    141e:	230e      	movs	r3, #14
    1420:	18fb      	adds	r3, r7, r3
    1422:	881b      	ldrh	r3, [r3, #0]
    1424:	3b20      	subs	r3, #32
    1426:	001a      	movs	r2, r3
    1428:	0013      	movs	r3, r2
    142a:	009b      	lsls	r3, r3, #2
    142c:	189a      	adds	r2, r3, r2
    142e:	4b08      	ldr	r3, [pc, #32]	; (1450 <fahrenheit_to_celsius+0x48>)
    1430:	2109      	movs	r1, #9
    1432:	0010      	movs	r0, r2
    1434:	4798      	blx	r3
    1436:	0003      	movs	r3, r0
    1438:	001a      	movs	r2, r3
    143a:	230e      	movs	r3, #14
    143c:	18fb      	adds	r3, r7, r3
    143e:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    1440:	230e      	movs	r3, #14
    1442:	18fb      	adds	r3, r7, r3
    1444:	881b      	ldrh	r3, [r3, #0]
    1446:	b2db      	uxtb	r3, r3
}
    1448:	0018      	movs	r0, r3
    144a:	46bd      	mov	sp, r7
    144c:	b004      	add	sp, #16
    144e:	bd80      	pop	{r7, pc}
    1450:	000101f9 	.word	0x000101f9

00001454 <celsius_to_fahrenheit>:

static inline uint8_t celsius_to_fahrenheit(uint8_t deg_c)
{
    1454:	b580      	push	{r7, lr}
    1456:	b084      	sub	sp, #16
    1458:	af00      	add	r7, sp, #0
    145a:	0002      	movs	r2, r0
    145c:	1dfb      	adds	r3, r7, #7
    145e:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_c;
    1460:	230e      	movs	r3, #14
    1462:	18fb      	adds	r3, r7, r3
    1464:	1dfa      	adds	r2, r7, #7
    1466:	7812      	ldrb	r2, [r2, #0]
    1468:	801a      	strh	r2, [r3, #0]
    convert = (convert * 9 / 5) + 32;
    146a:	230e      	movs	r3, #14
    146c:	18fb      	adds	r3, r7, r3
    146e:	881a      	ldrh	r2, [r3, #0]
    1470:	0013      	movs	r3, r2
    1472:	00db      	lsls	r3, r3, #3
    1474:	189a      	adds	r2, r3, r2
    1476:	4b09      	ldr	r3, [pc, #36]	; (149c <celsius_to_fahrenheit+0x48>)
    1478:	2105      	movs	r1, #5
    147a:	0010      	movs	r0, r2
    147c:	4798      	blx	r3
    147e:	0003      	movs	r3, r0
    1480:	b29a      	uxth	r2, r3
    1482:	230e      	movs	r3, #14
    1484:	18fb      	adds	r3, r7, r3
    1486:	3220      	adds	r2, #32
    1488:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    148a:	230e      	movs	r3, #14
    148c:	18fb      	adds	r3, r7, r3
    148e:	881b      	ldrh	r3, [r3, #0]
    1490:	b2db      	uxtb	r3, r3
}
    1492:	0018      	movs	r0, r3
    1494:	46bd      	mov	sp, r7
    1496:	b004      	add	sp, #16
    1498:	bd80      	pop	{r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	000101f9 	.word	0x000101f9

000014a0 <task_Thermal>:
    uint8_t water_temp;

} thermal_state;

static void task_Thermal(void *args)
{
    14a0:	b590      	push	{r4, r7, lr}
    14a2:	b083      	sub	sp, #12
    14a4:	af00      	add	r7, sp, #0
    14a6:	6078      	str	r0, [r7, #4]
    while(1) {
        xSemaphoreTake(therm_sem, portMAX_DELAY);
    14a8:	4b3e      	ldr	r3, [pc, #248]	; (15a4 <task_Thermal+0x104>)
    14aa:	6818      	ldr	r0, [r3, #0]
    14ac:	2301      	movs	r3, #1
    14ae:	425a      	negs	r2, r3
    14b0:	2300      	movs	r3, #0
    14b2:	2100      	movs	r1, #0
    14b4:	4c3c      	ldr	r4, [pc, #240]	; (15a8 <task_Thermal+0x108>)
    14b6:	47a0      	blx	r4

        if (port_pin_get_output_level(HEATER_1_GPIO) != thermal_state.heater_1_state) {
    14b8:	2006      	movs	r0, #6
    14ba:	4b3c      	ldr	r3, [pc, #240]	; (15ac <task_Thermal+0x10c>)
    14bc:	4798      	blx	r3
    14be:	0003      	movs	r3, r0
    14c0:	001a      	movs	r2, r3
    14c2:	4b3b      	ldr	r3, [pc, #236]	; (15b0 <task_Thermal+0x110>)
    14c4:	781b      	ldrb	r3, [r3, #0]
    14c6:	429a      	cmp	r2, r3
    14c8:	d013      	beq.n	14f2 <task_Thermal+0x52>
            if (port_pin_get_output_level(HEATER_1_GPIO)) {
    14ca:	2006      	movs	r0, #6
    14cc:	4b37      	ldr	r3, [pc, #220]	; (15ac <task_Thermal+0x10c>)
    14ce:	4798      	blx	r3
    14d0:	1e03      	subs	r3, r0, #0
    14d2:	d007      	beq.n	14e4 <task_Thermal+0x44>
                port_pin_set_output_level(HEATER_1_GPIO, 0);
    14d4:	2100      	movs	r1, #0
    14d6:	2006      	movs	r0, #6
    14d8:	4b36      	ldr	r3, [pc, #216]	; (15b4 <task_Thermal+0x114>)
    14da:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    14dc:	2000      	movs	r0, #0
    14de:	4b36      	ldr	r3, [pc, #216]	; (15b8 <task_Thermal+0x118>)
    14e0:	4798      	blx	r3
    14e2:	e006      	b.n	14f2 <task_Thermal+0x52>
            }
            else {
                port_pin_set_output_level(HEATER_1_GPIO, 1);
    14e4:	2101      	movs	r1, #1
    14e6:	2006      	movs	r0, #6
    14e8:	4b32      	ldr	r3, [pc, #200]	; (15b4 <task_Thermal+0x114>)
    14ea:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    14ec:	2001      	movs	r0, #1
    14ee:	4b32      	ldr	r3, [pc, #200]	; (15b8 <task_Thermal+0x118>)
    14f0:	4798      	blx	r3
            }
        }

        if (port_pin_get_output_level(HEATER_2_GPIO) != thermal_state.heater_2_state) {
    14f2:	2019      	movs	r0, #25
    14f4:	4b2d      	ldr	r3, [pc, #180]	; (15ac <task_Thermal+0x10c>)
    14f6:	4798      	blx	r3
    14f8:	0003      	movs	r3, r0
    14fa:	001a      	movs	r2, r3
    14fc:	4b2c      	ldr	r3, [pc, #176]	; (15b0 <task_Thermal+0x110>)
    14fe:	785b      	ldrb	r3, [r3, #1]
    1500:	429a      	cmp	r2, r3
    1502:	d013      	beq.n	152c <task_Thermal+0x8c>
            if (port_pin_get_output_level(HEATER_2_GPIO)) {
    1504:	2019      	movs	r0, #25
    1506:	4b29      	ldr	r3, [pc, #164]	; (15ac <task_Thermal+0x10c>)
    1508:	4798      	blx	r3
    150a:	1e03      	subs	r3, r0, #0
    150c:	d007      	beq.n	151e <task_Thermal+0x7e>
                port_pin_set_output_level(HEATER_2_GPIO, 0);
    150e:	2100      	movs	r1, #0
    1510:	2019      	movs	r0, #25
    1512:	4b28      	ldr	r3, [pc, #160]	; (15b4 <task_Thermal+0x114>)
    1514:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    1516:	2000      	movs	r0, #0
    1518:	4b27      	ldr	r3, [pc, #156]	; (15b8 <task_Thermal+0x118>)
    151a:	4798      	blx	r3
    151c:	e006      	b.n	152c <task_Thermal+0x8c>
            }
            else {
                port_pin_set_output_level(HEATER_2_GPIO, 1);
    151e:	2101      	movs	r1, #1
    1520:	2019      	movs	r0, #25
    1522:	4b24      	ldr	r3, [pc, #144]	; (15b4 <task_Thermal+0x114>)
    1524:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    1526:	2001      	movs	r0, #1
    1528:	4b23      	ldr	r3, [pc, #140]	; (15b8 <task_Thermal+0x118>)
    152a:	4798      	blx	r3
            }
        }
         
        if (port_pin_get_output_level(AIR_PUMP_GPIO) != thermal_state.air_pump_state) {
    152c:	2018      	movs	r0, #24
    152e:	4b1f      	ldr	r3, [pc, #124]	; (15ac <task_Thermal+0x10c>)
    1530:	4798      	blx	r3
    1532:	0003      	movs	r3, r0
    1534:	001a      	movs	r2, r3
    1536:	4b1e      	ldr	r3, [pc, #120]	; (15b0 <task_Thermal+0x110>)
    1538:	789b      	ldrb	r3, [r3, #2]
    153a:	429a      	cmp	r2, r3
    153c:	d013      	beq.n	1566 <task_Thermal+0xc6>
            if (port_pin_get_output_level(AIR_PUMP_GPIO)) {
    153e:	2018      	movs	r0, #24
    1540:	4b1a      	ldr	r3, [pc, #104]	; (15ac <task_Thermal+0x10c>)
    1542:	4798      	blx	r3
    1544:	1e03      	subs	r3, r0, #0
    1546:	d007      	beq.n	1558 <task_Thermal+0xb8>
                port_pin_set_output_level(AIR_PUMP_GPIO, 0);
    1548:	2100      	movs	r1, #0
    154a:	2018      	movs	r0, #24
    154c:	4b19      	ldr	r3, [pc, #100]	; (15b4 <task_Thermal+0x114>)
    154e:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    1550:	2000      	movs	r0, #0
    1552:	4b19      	ldr	r3, [pc, #100]	; (15b8 <task_Thermal+0x118>)
    1554:	4798      	blx	r3
    1556:	e006      	b.n	1566 <task_Thermal+0xc6>
            }
            else {
                port_pin_set_output_level(AIR_PUMP_GPIO, 1);
    1558:	2101      	movs	r1, #1
    155a:	2018      	movs	r0, #24
    155c:	4b15      	ldr	r3, [pc, #84]	; (15b4 <task_Thermal+0x114>)
    155e:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    1560:	2001      	movs	r0, #1
    1562:	4b15      	ldr	r3, [pc, #84]	; (15b8 <task_Thermal+0x118>)
    1564:	4798      	blx	r3
            }
        }

        if (port_pin_get_output_level(WATER_PUMP_GPIO) != thermal_state.water_pump_state) {
    1566:	2012      	movs	r0, #18
    1568:	4b10      	ldr	r3, [pc, #64]	; (15ac <task_Thermal+0x10c>)
    156a:	4798      	blx	r3
    156c:	0003      	movs	r3, r0
    156e:	001a      	movs	r2, r3
    1570:	4b0f      	ldr	r3, [pc, #60]	; (15b0 <task_Thermal+0x110>)
    1572:	78db      	ldrb	r3, [r3, #3]
    1574:	429a      	cmp	r2, r3
    1576:	d097      	beq.n	14a8 <task_Thermal+0x8>
            if (port_pin_get_output_level(WATER_PUMP_GPIO)) {
    1578:	2012      	movs	r0, #18
    157a:	4b0c      	ldr	r3, [pc, #48]	; (15ac <task_Thermal+0x10c>)
    157c:	4798      	blx	r3
    157e:	1e03      	subs	r3, r0, #0
    1580:	d007      	beq.n	1592 <task_Thermal+0xf2>
                port_pin_set_output_level(WATER_PUMP_GPIO, 0);
    1582:	2100      	movs	r1, #0
    1584:	2012      	movs	r0, #18
    1586:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <task_Thermal+0x114>)
    1588:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    158a:	2000      	movs	r0, #0
    158c:	4b0a      	ldr	r3, [pc, #40]	; (15b8 <task_Thermal+0x118>)
    158e:	4798      	blx	r3
    1590:	e78a      	b.n	14a8 <task_Thermal+0x8>
            }
            else {
                port_pin_set_output_level(WATER_PUMP_GPIO, 1);
    1592:	2101      	movs	r1, #1
    1594:	2012      	movs	r0, #18
    1596:	4b07      	ldr	r3, [pc, #28]	; (15b4 <task_Thermal+0x114>)
    1598:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    159a:	2001      	movs	r0, #1
    159c:	4b06      	ldr	r3, [pc, #24]	; (15b8 <task_Thermal+0x118>)
    159e:	4798      	blx	r3
            }
        }             
    }
    15a0:	e782      	b.n	14a8 <task_Thermal+0x8>
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	200000c0 	.word	0x200000c0
    15a8:	0000cac9 	.word	0x0000cac9
    15ac:	00001371 	.word	0x00001371
    15b0:	20004624 	.word	0x20004624
    15b4:	000013b5 	.word	0x000013b5
    15b8:	0000d405 	.word	0x0000d405

000015bc <thermal_look_up_water_temp>:
}

static uint8_t thermal_look_up_water_temp(uint16_t digital_value)
{
    15bc:	b580      	push	{r7, lr}
    15be:	b084      	sub	sp, #16
    15c0:	af00      	add	r7, sp, #0
    15c2:	0002      	movs	r2, r0
    15c4:	1dbb      	adds	r3, r7, #6
    15c6:	801a      	strh	r2, [r3, #0]
    uint32_t i = 0;    
    15c8:	2300      	movs	r3, #0
    15ca:	60fb      	str	r3, [r7, #12]

    while (i < (sizeof(water_temp_LUT) / sizeof(lut_t))) {
    15cc:	e011      	b.n	15f2 <thermal_look_up_water_temp+0x36>
        if (digital_value <= water_temp_LUT[i].digital_value) {
    15ce:	4a0d      	ldr	r2, [pc, #52]	; (1604 <thermal_look_up_water_temp+0x48>)
    15d0:	68fb      	ldr	r3, [r7, #12]
    15d2:	009b      	lsls	r3, r3, #2
    15d4:	18d3      	adds	r3, r2, r3
    15d6:	3302      	adds	r3, #2
    15d8:	881b      	ldrh	r3, [r3, #0]
    15da:	1dba      	adds	r2, r7, #6
    15dc:	8812      	ldrh	r2, [r2, #0]
    15de:	429a      	cmp	r2, r3
    15e0:	d804      	bhi.n	15ec <thermal_look_up_water_temp+0x30>
            return water_temp_LUT[i].temperature;        
    15e2:	4b08      	ldr	r3, [pc, #32]	; (1604 <thermal_look_up_water_temp+0x48>)
    15e4:	68fa      	ldr	r2, [r7, #12]
    15e6:	0092      	lsls	r2, r2, #2
    15e8:	5cd3      	ldrb	r3, [r2, r3]
    15ea:	e006      	b.n	15fa <thermal_look_up_water_temp+0x3e>
        }
        i++;
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	3301      	adds	r3, #1
    15f0:	60fb      	str	r3, [r7, #12]

static uint8_t thermal_look_up_water_temp(uint16_t digital_value)
{
    uint32_t i = 0;    

    while (i < (sizeof(water_temp_LUT) / sizeof(lut_t))) {
    15f2:	68fb      	ldr	r3, [r7, #12]
    15f4:	2b68      	cmp	r3, #104	; 0x68
    15f6:	d9ea      	bls.n	15ce <thermal_look_up_water_temp+0x12>
        }
        i++;
    }

    // If no valid value is found, return an invalid result
    return WATER_TEMP_INVALID;
    15f8:	23ff      	movs	r3, #255	; 0xff
}
    15fa:	0018      	movs	r0, r3
    15fc:	46bd      	mov	sp, r7
    15fe:	b004      	add	sp, #16
    1600:	bd80      	pop	{r7, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00012484 	.word	0x00012484

00001608 <thermal_init>:

void thermal_init(void)
{
    1608:	b590      	push	{r4, r7, lr}
    160a:	b091      	sub	sp, #68	; 0x44
    160c:	af02      	add	r7, sp, #8
    memset(&thermal_state, 0, sizeof(thermal_state));
    160e:	4b42      	ldr	r3, [pc, #264]	; (1718 <thermal_init+0x110>)
    1610:	2208      	movs	r2, #8
    1612:	2100      	movs	r1, #0
    1614:	0018      	movs	r0, r3
    1616:	4b41      	ldr	r3, [pc, #260]	; (171c <thermal_init+0x114>)
    1618:	4798      	blx	r3
    thermal_state.degrees_F = true;
    161a:	4b3f      	ldr	r3, [pc, #252]	; (1718 <thermal_init+0x110>)
    161c:	2201      	movs	r2, #1
    161e:	715a      	strb	r2, [r3, #5]
    thermal_state.temp_set_point = 80;  //F
    1620:	4b3d      	ldr	r3, [pc, #244]	; (1718 <thermal_init+0x110>)
    1622:	2250      	movs	r2, #80	; 0x50
    1624:	719a      	strb	r2, [r3, #6]
    thermal_state.water_temp = WATER_TEMP_INVALID;
    1626:	4b3c      	ldr	r3, [pc, #240]	; (1718 <thermal_init+0x110>)
    1628:	22ff      	movs	r2, #255	; 0xff
    162a:	71da      	strb	r2, [r3, #7]

    struct port_config gpio_config;
    gpio_config.direction = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    162c:	2334      	movs	r3, #52	; 0x34
    162e:	18fb      	adds	r3, r7, r3
    1630:	2202      	movs	r2, #2
    1632:	701a      	strb	r2, [r3, #0]
    gpio_config.input_pull = PORT_PIN_PULL_DOWN;
    1634:	2334      	movs	r3, #52	; 0x34
    1636:	18fb      	adds	r3, r7, r3
    1638:	2202      	movs	r2, #2
    163a:	705a      	strb	r2, [r3, #1]
    gpio_config.powersave = false;
    163c:	2334      	movs	r3, #52	; 0x34
    163e:	18fb      	adds	r3, r7, r3
    1640:	2200      	movs	r2, #0
    1642:	709a      	strb	r2, [r3, #2]

    // Initialize relay drivers
    port_pin_set_config(HEATER_1_GPIO, &gpio_config);
    1644:	2334      	movs	r3, #52	; 0x34
    1646:	18fb      	adds	r3, r7, r3
    1648:	0019      	movs	r1, r3
    164a:	2006      	movs	r0, #6
    164c:	4b34      	ldr	r3, [pc, #208]	; (1720 <thermal_init+0x118>)
    164e:	4798      	blx	r3
    port_pin_set_config(HEATER_2_GPIO, &gpio_config);
    1650:	2334      	movs	r3, #52	; 0x34
    1652:	18fb      	adds	r3, r7, r3
    1654:	0019      	movs	r1, r3
    1656:	2019      	movs	r0, #25
    1658:	4b31      	ldr	r3, [pc, #196]	; (1720 <thermal_init+0x118>)
    165a:	4798      	blx	r3
    port_pin_set_config(AIR_PUMP_GPIO, &gpio_config);
    165c:	2334      	movs	r3, #52	; 0x34
    165e:	18fb      	adds	r3, r7, r3
    1660:	0019      	movs	r1, r3
    1662:	2018      	movs	r0, #24
    1664:	4b2e      	ldr	r3, [pc, #184]	; (1720 <thermal_init+0x118>)
    1666:	4798      	blx	r3
    port_pin_set_config(WATER_PUMP_GPIO, &gpio_config);
    1668:	2334      	movs	r3, #52	; 0x34
    166a:	18fb      	adds	r3, r7, r3
    166c:	0019      	movs	r1, r3
    166e:	2012      	movs	r0, #18
    1670:	4b2b      	ldr	r3, [pc, #172]	; (1720 <thermal_init+0x118>)
    1672:	4798      	blx	r3
    
    // Initialize ADC
    struct adc_config config_adc;
    adc_get_config_defaults(&config_adc);
    1674:	1d3b      	adds	r3, r7, #4
    1676:	0018      	movs	r0, r3
    1678:	4b2a      	ldr	r3, [pc, #168]	; (1724 <thermal_init+0x11c>)
    167a:	4798      	blx	r3
    
    config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV512;
    167c:	1d3b      	adds	r3, r7, #4
    167e:	22e0      	movs	r2, #224	; 0xe0
    1680:	00d2      	lsls	r2, r2, #3
    1682:	805a      	strh	r2, [r3, #2]
    config_adc.reference = ADC_REFERENCE_INTVCC1;   
    1684:	1d3b      	adds	r3, r7, #4
    1686:	2202      	movs	r2, #2
    1688:	705a      	strb	r2, [r3, #1]
    config_adc.resolution = ADC_RESOLUTION_12BIT;
    168a:	1d3b      	adds	r3, r7, #4
    168c:	2200      	movs	r2, #0
    168e:	711a      	strb	r2, [r3, #4]
    config_adc.clock_source = GCLK_GENERATOR_0;
    1690:	1d3b      	adds	r3, r7, #4
    1692:	2200      	movs	r2, #0
    1694:	701a      	strb	r2, [r3, #0]
    config_adc.positive_input = WATER_TEMP_AN_CH;
    1696:	1d3b      	adds	r3, r7, #4
    1698:	2212      	movs	r2, #18
    169a:	731a      	strb	r2, [r3, #12]
    config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    169c:	1d3b      	adds	r3, r7, #4
    169e:	22f0      	movs	r2, #240	; 0xf0
    16a0:	0512      	lsls	r2, r2, #20
    16a2:	609a      	str	r2, [r3, #8]
    
    adc_init(&adc_instance, ADC, &config_adc);
    16a4:	1d3a      	adds	r2, r7, #4
    16a6:	4920      	ldr	r1, [pc, #128]	; (1728 <thermal_init+0x120>)
    16a8:	4b20      	ldr	r3, [pc, #128]	; (172c <thermal_init+0x124>)
    16aa:	0018      	movs	r0, r3
    16ac:	4b20      	ldr	r3, [pc, #128]	; (1730 <thermal_init+0x128>)
    16ae:	4798      	blx	r3

    adc_regular_ain_channel(analog_channels, sizeof(analog_channels) / sizeof(uint32_t));
    16b0:	4b20      	ldr	r3, [pc, #128]	; (1734 <thermal_init+0x12c>)
    16b2:	2102      	movs	r1, #2
    16b4:	0018      	movs	r0, r3
    16b6:	4b20      	ldr	r3, [pc, #128]	; (1738 <thermal_init+0x130>)
    16b8:	4798      	blx	r3

    adc_enable(&adc_instance);
    16ba:	4b1c      	ldr	r3, [pc, #112]	; (172c <thermal_init+0x124>)
    16bc:	0018      	movs	r0, r3
    16be:	4b1f      	ldr	r3, [pc, #124]	; (173c <thermal_init+0x134>)
    16c0:	4798      	blx	r3

    if (xTaskCreate(task_Thermal, "task_Therm", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, NULL) != pdPASS) {
    16c2:	2380      	movs	r3, #128	; 0x80
    16c4:	009a      	lsls	r2, r3, #2
    16c6:	491e      	ldr	r1, [pc, #120]	; (1740 <thermal_init+0x138>)
    16c8:	481e      	ldr	r0, [pc, #120]	; (1744 <thermal_init+0x13c>)
    16ca:	2300      	movs	r3, #0
    16cc:	9301      	str	r3, [sp, #4]
    16ce:	2300      	movs	r3, #0
    16d0:	9300      	str	r3, [sp, #0]
    16d2:	2300      	movs	r3, #0
    16d4:	4c1c      	ldr	r4, [pc, #112]	; (1748 <thermal_init+0x140>)
    16d6:	47a0      	blx	r4
    16d8:	1e03      	subs	r3, r0, #0
    16da:	2b01      	cmp	r3, #1
    16dc:	d003      	beq.n	16e6 <thermal_init+0xde>
        printf("Failed to create task_Thermal thread!\n");
    16de:	4b1b      	ldr	r3, [pc, #108]	; (174c <thermal_init+0x144>)
    16e0:	0018      	movs	r0, r3
    16e2:	4b1b      	ldr	r3, [pc, #108]	; (1750 <thermal_init+0x148>)
    16e4:	4798      	blx	r3
    }

    therm_sem = xSemaphoreCreateBinary();    
    16e6:	2203      	movs	r2, #3
    16e8:	2100      	movs	r1, #0
    16ea:	2001      	movs	r0, #1
    16ec:	4b19      	ldr	r3, [pc, #100]	; (1754 <thermal_init+0x14c>)
    16ee:	4798      	blx	r3
    16f0:	0002      	movs	r2, r0
    16f2:	4b19      	ldr	r3, [pc, #100]	; (1758 <thermal_init+0x150>)
    16f4:	601a      	str	r2, [r3, #0]
    if (therm_sem == NULL) {
    16f6:	4b18      	ldr	r3, [pc, #96]	; (1758 <thermal_init+0x150>)
    16f8:	681b      	ldr	r3, [r3, #0]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d103      	bne.n	1706 <thermal_init+0xfe>
        printf("Failed to create therm_sem!\n");
    16fe:	4b17      	ldr	r3, [pc, #92]	; (175c <thermal_init+0x154>)
    1700:	0018      	movs	r0, r3
    1702:	4b13      	ldr	r3, [pc, #76]	; (1750 <thermal_init+0x148>)
    1704:	4798      	blx	r3
    }

    // Start the conversion
    adc_start_conversion(&adc_instance);
    1706:	4b09      	ldr	r3, [pc, #36]	; (172c <thermal_init+0x124>)
    1708:	0018      	movs	r0, r3
    170a:	4b15      	ldr	r3, [pc, #84]	; (1760 <thermal_init+0x158>)
    170c:	4798      	blx	r3
}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	46bd      	mov	sp, r7
    1712:	b00f      	add	sp, #60	; 0x3c
    1714:	bd90      	pop	{r4, r7, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	20004624 	.word	0x20004624
    171c:	00010c67 	.word	0x00010c67
    1720:	00008ded 	.word	0x00008ded
    1724:	00007e69 	.word	0x00007e69
    1728:	42004000 	.word	0x42004000
    172c:	2000462c 	.word	0x2000462c
    1730:	000084f9 	.word	0x000084f9
    1734:	2000000c 	.word	0x2000000c
    1738:	000084b9 	.word	0x000084b9
    173c:	00001229 	.word	0x00001229
    1740:	00012628 	.word	0x00012628
    1744:	000014a1 	.word	0x000014a1
    1748:	0000d0c5 	.word	0x0000d0c5
    174c:	00012634 	.word	0x00012634
    1750:	0001133d 	.word	0x0001133d
    1754:	0000c695 	.word	0x0000c695
    1758:	200000c0 	.word	0x200000c0
    175c:	0001265c 	.word	0x0001265c
    1760:	00001289 	.word	0x00001289

00001764 <thermal_3s>:

void thermal_3s(void)
{
    1764:	b590      	push	{r4, r7, lr}
    1766:	b083      	sub	sp, #12
    1768:	af00      	add	r7, sp, #0
    uint16_t result;
    uint8_t temp_water_temp;

    if (adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) {
    176a:	4b20      	ldr	r3, [pc, #128]	; (17ec <thermal_3s+0x88>)
    176c:	0018      	movs	r0, r3
    176e:	4b20      	ldr	r3, [pc, #128]	; (17f0 <thermal_3s+0x8c>)
    1770:	4798      	blx	r3
    1772:	0002      	movs	r2, r0
    1774:	2301      	movs	r3, #1
    1776:	4013      	ands	r3, r2
    1778:	d034      	beq.n	17e4 <thermal_3s+0x80>
        adc_read(&adc_instance, &result);
    177a:	1d3a      	adds	r2, r7, #4
    177c:	4b1b      	ldr	r3, [pc, #108]	; (17ec <thermal_3s+0x88>)
    177e:	0011      	movs	r1, r2
    1780:	0018      	movs	r0, r3
    1782:	4b1c      	ldr	r3, [pc, #112]	; (17f4 <thermal_3s+0x90>)
    1784:	4798      	blx	r3

        // Check the thermistor LUT
        temp_water_temp = thermal_look_up_water_temp(result);
    1786:	1d3b      	adds	r3, r7, #4
    1788:	881b      	ldrh	r3, [r3, #0]
    178a:	1dfc      	adds	r4, r7, #7
    178c:	0018      	movs	r0, r3
    178e:	4b1a      	ldr	r3, [pc, #104]	; (17f8 <thermal_3s+0x94>)
    1790:	4798      	blx	r3
    1792:	0003      	movs	r3, r0
    1794:	7023      	strb	r3, [r4, #0]

        // Set water temperature (converting to whatever our units are set to)
        if (temp_water_temp != WATER_TEMP_INVALID) {
    1796:	1dfb      	adds	r3, r7, #7
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	2bff      	cmp	r3, #255	; 0xff
    179c:	d01e      	beq.n	17dc <thermal_3s+0x78>
            thermal_state.water_temp = temp_water_temp;
    179e:	4b17      	ldr	r3, [pc, #92]	; (17fc <thermal_3s+0x98>)
    17a0:	1dfa      	adds	r2, r7, #7
    17a2:	7812      	ldrb	r2, [r2, #0]
    17a4:	71da      	strb	r2, [r3, #7]

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
    17a6:	4b15      	ldr	r3, [pc, #84]	; (17fc <thermal_3s+0x98>)
    17a8:	79da      	ldrb	r2, [r3, #7]
    17aa:	4b14      	ldr	r3, [pc, #80]	; (17fc <thermal_3s+0x98>)
    17ac:	799b      	ldrb	r3, [r3, #6]
    17ae:	429a      	cmp	r2, r3
    17b0:	d214      	bcs.n	17dc <thermal_3s+0x78>
                 thermal_state.water_pump_state && 
    17b2:	4b12      	ldr	r3, [pc, #72]	; (17fc <thermal_3s+0x98>)
    17b4:	78db      	ldrb	r3, [r3, #3]
        // Set water temperature (converting to whatever our units are set to)
        if (temp_water_temp != WATER_TEMP_INVALID) {
            thermal_state.water_temp = temp_water_temp;

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
    17b6:	2b00      	cmp	r3, #0
    17b8:	d010      	beq.n	17dc <thermal_3s+0x78>
                 thermal_state.water_pump_state && 
                !(thermal_state.heater_1_state && thermal_state.heater_2_state)) {
    17ba:	4b10      	ldr	r3, [pc, #64]	; (17fc <thermal_3s+0x98>)
    17bc:	781b      	ldrb	r3, [r3, #0]
    17be:	2201      	movs	r2, #1
    17c0:	4053      	eors	r3, r2
    17c2:	b2db      	uxtb	r3, r3
        if (temp_water_temp != WATER_TEMP_INVALID) {
            thermal_state.water_temp = temp_water_temp;

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
                 thermal_state.water_pump_state && 
    17c4:	2b00      	cmp	r3, #0
    17c6:	d106      	bne.n	17d6 <thermal_3s+0x72>
                !(thermal_state.heater_1_state && thermal_state.heater_2_state)) {
    17c8:	4b0c      	ldr	r3, [pc, #48]	; (17fc <thermal_3s+0x98>)
    17ca:	785b      	ldrb	r3, [r3, #1]
    17cc:	2201      	movs	r2, #1
    17ce:	4053      	eors	r3, r2
    17d0:	b2db      	uxtb	r3, r3
    17d2:	2b00      	cmp	r3, #0
    17d4:	d002      	beq.n	17dc <thermal_3s+0x78>
                thermal_turn_on_heater(true);
    17d6:	2001      	movs	r0, #1
    17d8:	4b09      	ldr	r3, [pc, #36]	; (1800 <thermal_3s+0x9c>)
    17da:	4798      	blx	r3
            }
        }

        // Start the next conversion
        adc_start_conversion(&adc_instance);
    17dc:	4b03      	ldr	r3, [pc, #12]	; (17ec <thermal_3s+0x88>)
    17de:	0018      	movs	r0, r3
    17e0:	4b08      	ldr	r3, [pc, #32]	; (1804 <thermal_3s+0xa0>)
    17e2:	4798      	blx	r3
    }
}
    17e4:	46c0      	nop			; (mov r8, r8)
    17e6:	46bd      	mov	sp, r7
    17e8:	b003      	add	sp, #12
    17ea:	bd90      	pop	{r4, r7, pc}
    17ec:	2000462c 	.word	0x2000462c
    17f0:	00001181 	.word	0x00001181
    17f4:	000012d1 	.word	0x000012d1
    17f8:	000015bd 	.word	0x000015bd
    17fc:	20004624 	.word	0x20004624
    1800:	000019a9 	.word	0x000019a9
    1804:	00001289 	.word	0x00001289

00001808 <thermal_change_scale>:

void thermal_change_scale(bool new_scale)
{
    1808:	b580      	push	{r7, lr}
    180a:	b082      	sub	sp, #8
    180c:	af00      	add	r7, sp, #0
    180e:	0002      	movs	r2, r0
    1810:	1dfb      	adds	r3, r7, #7
    1812:	701a      	strb	r2, [r3, #0]
    if (thermal_state.degrees_F != new_scale) {
    1814:	4b1f      	ldr	r3, [pc, #124]	; (1894 <thermal_change_scale+0x8c>)
    1816:	795b      	ldrb	r3, [r3, #5]
    1818:	1dfa      	adds	r2, r7, #7
    181a:	7812      	ldrb	r2, [r2, #0]
    181c:	429a      	cmp	r2, r3
    181e:	d034      	beq.n	188a <thermal_change_scale+0x82>
        thermal_state.degrees_F = new_scale;
    1820:	4b1c      	ldr	r3, [pc, #112]	; (1894 <thermal_change_scale+0x8c>)
    1822:	1dfa      	adds	r2, r7, #7
    1824:	7812      	ldrb	r2, [r2, #0]
    1826:	715a      	strb	r2, [r3, #5]
        if (new_scale) {
    1828:	1dfb      	adds	r3, r7, #7
    182a:	781b      	ldrb	r3, [r3, #0]
    182c:	2b00      	cmp	r3, #0
    182e:	d016      	beq.n	185e <thermal_change_scale+0x56>
            if (thermal_state.water_temp != WATER_TEMP_INVALID) 
    1830:	4b18      	ldr	r3, [pc, #96]	; (1894 <thermal_change_scale+0x8c>)
    1832:	79db      	ldrb	r3, [r3, #7]
    1834:	2bff      	cmp	r3, #255	; 0xff
    1836:	d008      	beq.n	184a <thermal_change_scale+0x42>
                thermal_state.water_temp = celsius_to_fahrenheit(thermal_state.water_temp);       
    1838:	4b16      	ldr	r3, [pc, #88]	; (1894 <thermal_change_scale+0x8c>)
    183a:	79db      	ldrb	r3, [r3, #7]
    183c:	0018      	movs	r0, r3
    183e:	4b16      	ldr	r3, [pc, #88]	; (1898 <thermal_change_scale+0x90>)
    1840:	4798      	blx	r3
    1842:	0003      	movs	r3, r0
    1844:	001a      	movs	r2, r3
    1846:	4b13      	ldr	r3, [pc, #76]	; (1894 <thermal_change_scale+0x8c>)
    1848:	71da      	strb	r2, [r3, #7]
                
            thermal_state.temp_set_point = celsius_to_fahrenheit(thermal_state.temp_set_point);
    184a:	4b12      	ldr	r3, [pc, #72]	; (1894 <thermal_change_scale+0x8c>)
    184c:	799b      	ldrb	r3, [r3, #6]
    184e:	0018      	movs	r0, r3
    1850:	4b11      	ldr	r3, [pc, #68]	; (1898 <thermal_change_scale+0x90>)
    1852:	4798      	blx	r3
    1854:	0003      	movs	r3, r0
    1856:	001a      	movs	r2, r3
    1858:	4b0e      	ldr	r3, [pc, #56]	; (1894 <thermal_change_scale+0x8c>)
    185a:	719a      	strb	r2, [r3, #6]

            thermal_state.temp_set_point = fahrenheit_to_celsius(thermal_state.temp_set_point);
        }
    }

}
    185c:	e015      	b.n	188a <thermal_change_scale+0x82>
                thermal_state.water_temp = celsius_to_fahrenheit(thermal_state.water_temp);       
                
            thermal_state.temp_set_point = celsius_to_fahrenheit(thermal_state.temp_set_point);
        }
        else {
            if (thermal_state.water_temp != WATER_TEMP_INVALID)
    185e:	4b0d      	ldr	r3, [pc, #52]	; (1894 <thermal_change_scale+0x8c>)
    1860:	79db      	ldrb	r3, [r3, #7]
    1862:	2bff      	cmp	r3, #255	; 0xff
    1864:	d008      	beq.n	1878 <thermal_change_scale+0x70>
                thermal_state.water_temp = fahrenheit_to_celsius(thermal_state.water_temp);
    1866:	4b0b      	ldr	r3, [pc, #44]	; (1894 <thermal_change_scale+0x8c>)
    1868:	79db      	ldrb	r3, [r3, #7]
    186a:	0018      	movs	r0, r3
    186c:	4b0b      	ldr	r3, [pc, #44]	; (189c <thermal_change_scale+0x94>)
    186e:	4798      	blx	r3
    1870:	0003      	movs	r3, r0
    1872:	001a      	movs	r2, r3
    1874:	4b07      	ldr	r3, [pc, #28]	; (1894 <thermal_change_scale+0x8c>)
    1876:	71da      	strb	r2, [r3, #7]

            thermal_state.temp_set_point = fahrenheit_to_celsius(thermal_state.temp_set_point);
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <thermal_change_scale+0x8c>)
    187a:	799b      	ldrb	r3, [r3, #6]
    187c:	0018      	movs	r0, r3
    187e:	4b07      	ldr	r3, [pc, #28]	; (189c <thermal_change_scale+0x94>)
    1880:	4798      	blx	r3
    1882:	0003      	movs	r3, r0
    1884:	001a      	movs	r2, r3
    1886:	4b03      	ldr	r3, [pc, #12]	; (1894 <thermal_change_scale+0x8c>)
    1888:	719a      	strb	r2, [r3, #6]
        }
    }

}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	46bd      	mov	sp, r7
    188e:	b002      	add	sp, #8
    1890:	bd80      	pop	{r7, pc}
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	20004624 	.word	0x20004624
    1898:	00001455 	.word	0x00001455
    189c:	00001409 	.word	0x00001409

000018a0 <thermal_set_temperature>:

enum status_code thermal_set_temperature(uint8_t temperature)
{        
    18a0:	b590      	push	{r4, r7, lr}
    18a2:	b085      	sub	sp, #20
    18a4:	af00      	add	r7, sp, #0
    18a6:	0002      	movs	r2, r0
    18a8:	1dfb      	adds	r3, r7, #7
    18aa:	701a      	strb	r2, [r3, #0]
    uint8_t temp_max, temp_min, temp_scaled;

    temp_scaled = thermal_state.temp_set_point;
    18ac:	230d      	movs	r3, #13
    18ae:	18fb      	adds	r3, r7, r3
    18b0:	4a25      	ldr	r2, [pc, #148]	; (1948 <thermal_set_temperature+0xa8>)
    18b2:	7992      	ldrb	r2, [r2, #6]
    18b4:	701a      	strb	r2, [r3, #0]

    if (thermal_state.degrees_F) {
    18b6:	4b24      	ldr	r3, [pc, #144]	; (1948 <thermal_set_temperature+0xa8>)
    18b8:	795b      	ldrb	r3, [r3, #5]
    18ba:	2b00      	cmp	r3, #0
    18bc:	d008      	beq.n	18d0 <thermal_set_temperature+0x30>
        temp_min = MIN_SETPOINT_TEMP_F;
    18be:	230e      	movs	r3, #14
    18c0:	18fb      	adds	r3, r7, r3
    18c2:	2244      	movs	r2, #68	; 0x44
    18c4:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_F;
    18c6:	230f      	movs	r3, #15
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	2268      	movs	r2, #104	; 0x68
    18cc:	701a      	strb	r2, [r3, #0]
    18ce:	e011      	b.n	18f4 <thermal_set_temperature+0x54>
    }
    else {        
        temp_scaled = fahrenheit_to_celsius(temp_scaled);
    18d0:	230d      	movs	r3, #13
    18d2:	18fc      	adds	r4, r7, r3
    18d4:	230d      	movs	r3, #13
    18d6:	18fb      	adds	r3, r7, r3
    18d8:	781b      	ldrb	r3, [r3, #0]
    18da:	0018      	movs	r0, r3
    18dc:	4b1b      	ldr	r3, [pc, #108]	; (194c <thermal_set_temperature+0xac>)
    18de:	4798      	blx	r3
    18e0:	0003      	movs	r3, r0
    18e2:	7023      	strb	r3, [r4, #0]
        temp_min = MIN_SETPOINT_TEMP_C;
    18e4:	230e      	movs	r3, #14
    18e6:	18fb      	adds	r3, r7, r3
    18e8:	2214      	movs	r2, #20
    18ea:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_C;
    18ec:	230f      	movs	r3, #15
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	2228      	movs	r2, #40	; 0x28
    18f2:	701a      	strb	r2, [r3, #0]
    }
    
    if ((temperature >= temp_min) && (temperature <= temp_max)) {
    18f4:	1dfa      	adds	r2, r7, #7
    18f6:	230e      	movs	r3, #14
    18f8:	18fb      	adds	r3, r7, r3
    18fa:	7812      	ldrb	r2, [r2, #0]
    18fc:	781b      	ldrb	r3, [r3, #0]
    18fe:	429a      	cmp	r2, r3
    1900:	d31d      	bcc.n	193e <thermal_set_temperature+0x9e>
    1902:	1dfa      	adds	r2, r7, #7
    1904:	230f      	movs	r3, #15
    1906:	18fb      	adds	r3, r7, r3
    1908:	7812      	ldrb	r2, [r2, #0]
    190a:	781b      	ldrb	r3, [r3, #0]
    190c:	429a      	cmp	r2, r3
    190e:	d816      	bhi.n	193e <thermal_set_temperature+0x9e>
        // Only store/manipulate with degrees F
        if (!thermal_state.degrees_F) {
    1910:	4b0d      	ldr	r3, [pc, #52]	; (1948 <thermal_set_temperature+0xa8>)
    1912:	795b      	ldrb	r3, [r3, #5]
    1914:	2201      	movs	r2, #1
    1916:	4053      	eors	r3, r2
    1918:	b2db      	uxtb	r3, r3
    191a:	2b00      	cmp	r3, #0
    191c:	d009      	beq.n	1932 <thermal_set_temperature+0x92>
            thermal_state.temp_set_point = celsius_to_fahrenheit(temperature);
    191e:	1dfb      	adds	r3, r7, #7
    1920:	781b      	ldrb	r3, [r3, #0]
    1922:	0018      	movs	r0, r3
    1924:	4b0a      	ldr	r3, [pc, #40]	; (1950 <thermal_set_temperature+0xb0>)
    1926:	4798      	blx	r3
    1928:	0003      	movs	r3, r0
    192a:	001a      	movs	r2, r3
    192c:	4b06      	ldr	r3, [pc, #24]	; (1948 <thermal_set_temperature+0xa8>)
    192e:	719a      	strb	r2, [r3, #6]
    1930:	e003      	b.n	193a <thermal_set_temperature+0x9a>
        }
        else
            thermal_state.temp_set_point = temperature;
    1932:	4b05      	ldr	r3, [pc, #20]	; (1948 <thermal_set_temperature+0xa8>)
    1934:	1dfa      	adds	r2, r7, #7
    1936:	7812      	ldrb	r2, [r2, #0]
    1938:	719a      	strb	r2, [r3, #6]

        return STATUS_OK;
    193a:	2300      	movs	r3, #0
    193c:	e000      	b.n	1940 <thermal_set_temperature+0xa0>
    }
    else
        return STATUS_ERR_BAD_DATA;
    193e:	2313      	movs	r3, #19
}
    1940:	0018      	movs	r0, r3
    1942:	46bd      	mov	sp, r7
    1944:	b005      	add	sp, #20
    1946:	bd90      	pop	{r4, r7, pc}
    1948:	20004624 	.word	0x20004624
    194c:	00001409 	.word	0x00001409
    1950:	00001455 	.word	0x00001455

00001954 <thermal_get_temperature>:

uint8_t thermal_get_temperature(void)
{
    1954:	b580      	push	{r7, lr}
    1956:	af00      	add	r7, sp, #0
    return thermal_state.temp_set_point;
    1958:	4b02      	ldr	r3, [pc, #8]	; (1964 <thermal_get_temperature+0x10>)
    195a:	799b      	ldrb	r3, [r3, #6]
}
    195c:	0018      	movs	r0, r3
    195e:	46bd      	mov	sp, r7
    1960:	bd80      	pop	{r7, pc}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	20004624 	.word	0x20004624

00001968 <thermal_get_water_temp>:

uint8_t thermal_get_water_temp(void)
{    
    1968:	b590      	push	{r4, r7, lr}
    196a:	b083      	sub	sp, #12
    196c:	af00      	add	r7, sp, #0
    uint8_t return_temp = thermal_state.water_temp;
    196e:	1dfb      	adds	r3, r7, #7
    1970:	4a0b      	ldr	r2, [pc, #44]	; (19a0 <thermal_get_water_temp+0x38>)
    1972:	79d2      	ldrb	r2, [r2, #7]
    1974:	701a      	strb	r2, [r3, #0]

    if (!thermal_state.degrees_F) {
    1976:	4b0a      	ldr	r3, [pc, #40]	; (19a0 <thermal_get_water_temp+0x38>)
    1978:	795b      	ldrb	r3, [r3, #5]
    197a:	2201      	movs	r2, #1
    197c:	4053      	eors	r3, r2
    197e:	b2db      	uxtb	r3, r3
    1980:	2b00      	cmp	r3, #0
    1982:	d007      	beq.n	1994 <thermal_get_water_temp+0x2c>
        return_temp = fahrenheit_to_celsius(thermal_state.water_temp);
    1984:	4b06      	ldr	r3, [pc, #24]	; (19a0 <thermal_get_water_temp+0x38>)
    1986:	79db      	ldrb	r3, [r3, #7]
    1988:	1dfc      	adds	r4, r7, #7
    198a:	0018      	movs	r0, r3
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <thermal_get_water_temp+0x3c>)
    198e:	4798      	blx	r3
    1990:	0003      	movs	r3, r0
    1992:	7023      	strb	r3, [r4, #0]
    }

	return return_temp;    
    1994:	1dfb      	adds	r3, r7, #7
    1996:	781b      	ldrb	r3, [r3, #0]
}
    1998:	0018      	movs	r0, r3
    199a:	46bd      	mov	sp, r7
    199c:	b003      	add	sp, #12
    199e:	bd90      	pop	{r4, r7, pc}
    19a0:	20004624 	.word	0x20004624
    19a4:	00001409 	.word	0x00001409

000019a8 <thermal_turn_on_heater>:

void thermal_turn_on_heater(bool on)
{
    19a8:	b590      	push	{r4, r7, lr}
    19aa:	b083      	sub	sp, #12
    19ac:	af00      	add	r7, sp, #0
    19ae:	0002      	movs	r2, r0
    19b0:	1dfb      	adds	r3, r7, #7
    19b2:	701a      	strb	r2, [r3, #0]
    thermal_state.heater_1_state = on;
    19b4:	4b09      	ldr	r3, [pc, #36]	; (19dc <thermal_turn_on_heater+0x34>)
    19b6:	1dfa      	adds	r2, r7, #7
    19b8:	7812      	ldrb	r2, [r2, #0]
    19ba:	701a      	strb	r2, [r3, #0]
    thermal_state.heater_2_state = on;
    19bc:	4b07      	ldr	r3, [pc, #28]	; (19dc <thermal_turn_on_heater+0x34>)
    19be:	1dfa      	adds	r2, r7, #7
    19c0:	7812      	ldrb	r2, [r2, #0]
    19c2:	705a      	strb	r2, [r3, #1]
    xSemaphoreGive(therm_sem);
    19c4:	4b06      	ldr	r3, [pc, #24]	; (19e0 <thermal_turn_on_heater+0x38>)
    19c6:	6818      	ldr	r0, [r3, #0]
    19c8:	2300      	movs	r3, #0
    19ca:	2200      	movs	r2, #0
    19cc:	2100      	movs	r1, #0
    19ce:	4c05      	ldr	r4, [pc, #20]	; (19e4 <thermal_turn_on_heater+0x3c>)
    19d0:	47a0      	blx	r4
}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	46bd      	mov	sp, r7
    19d6:	b003      	add	sp, #12
    19d8:	bd90      	pop	{r4, r7, pc}
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	20004624 	.word	0x20004624
    19e0:	200000c0 	.word	0x200000c0
    19e4:	0000c7c9 	.word	0x0000c7c9

000019e8 <thermal_turn_on_water_pump>:

void thermal_turn_on_water_pump(bool on)
{
    19e8:	b590      	push	{r4, r7, lr}
    19ea:	b083      	sub	sp, #12
    19ec:	af00      	add	r7, sp, #0
    19ee:	0002      	movs	r2, r0
    19f0:	1dfb      	adds	r3, r7, #7
    19f2:	701a      	strb	r2, [r3, #0]
    thermal_state.water_pump_state = on;
    19f4:	4b07      	ldr	r3, [pc, #28]	; (1a14 <thermal_turn_on_water_pump+0x2c>)
    19f6:	1dfa      	adds	r2, r7, #7
    19f8:	7812      	ldrb	r2, [r2, #0]
    19fa:	70da      	strb	r2, [r3, #3]
    xSemaphoreGive(therm_sem);
    19fc:	4b06      	ldr	r3, [pc, #24]	; (1a18 <thermal_turn_on_water_pump+0x30>)
    19fe:	6818      	ldr	r0, [r3, #0]
    1a00:	2300      	movs	r3, #0
    1a02:	2200      	movs	r2, #0
    1a04:	2100      	movs	r1, #0
    1a06:	4c05      	ldr	r4, [pc, #20]	; (1a1c <thermal_turn_on_water_pump+0x34>)
    1a08:	47a0      	blx	r4
}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	46bd      	mov	sp, r7
    1a0e:	b003      	add	sp, #12
    1a10:	bd90      	pop	{r4, r7, pc}
    1a12:	46c0      	nop			; (mov r8, r8)
    1a14:	20004624 	.word	0x20004624
    1a18:	200000c0 	.word	0x200000c0
    1a1c:	0000c7c9 	.word	0x0000c7c9

00001a20 <thermal_turn_on_air_pump>:

void thermal_turn_on_air_pump(bool on)
{
    1a20:	b590      	push	{r4, r7, lr}
    1a22:	b083      	sub	sp, #12
    1a24:	af00      	add	r7, sp, #0
    1a26:	0002      	movs	r2, r0
    1a28:	1dfb      	adds	r3, r7, #7
    1a2a:	701a      	strb	r2, [r3, #0]
    thermal_state.air_pump_state = on;
    1a2c:	4b07      	ldr	r3, [pc, #28]	; (1a4c <thermal_turn_on_air_pump+0x2c>)
    1a2e:	1dfa      	adds	r2, r7, #7
    1a30:	7812      	ldrb	r2, [r2, #0]
    1a32:	709a      	strb	r2, [r3, #2]
    xSemaphoreGive(therm_sem);
    1a34:	4b06      	ldr	r3, [pc, #24]	; (1a50 <thermal_turn_on_air_pump+0x30>)
    1a36:	6818      	ldr	r0, [r3, #0]
    1a38:	2300      	movs	r3, #0
    1a3a:	2200      	movs	r2, #0
    1a3c:	2100      	movs	r1, #0
    1a3e:	4c05      	ldr	r4, [pc, #20]	; (1a54 <thermal_turn_on_air_pump+0x34>)
    1a40:	47a0      	blx	r4
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	46bd      	mov	sp, r7
    1a46:	b003      	add	sp, #12
    1a48:	bd90      	pop	{r4, r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	20004624 	.word	0x20004624
    1a50:	200000c0 	.word	0x200000c0
    1a54:	0000c7c9 	.word	0x0000c7c9

00001a58 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1a58:	b580      	push	{r7, lr}
    1a5a:	b082      	sub	sp, #8
    1a5c:	af00      	add	r7, sp, #0
    1a5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a60:	687b      	ldr	r3, [r7, #4]
    1a62:	2280      	movs	r2, #128	; 0x80
    1a64:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1a66:	687b      	ldr	r3, [r7, #4]
    1a68:	2200      	movs	r2, #0
    1a6a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1a6c:	687b      	ldr	r3, [r7, #4]
    1a6e:	2201      	movs	r2, #1
    1a70:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	2200      	movs	r2, #0
    1a76:	70da      	strb	r2, [r3, #3]
}
    1a78:	46c0      	nop			; (mov r8, r8)
    1a7a:	46bd      	mov	sp, r7
    1a7c:	b002      	add	sp, #8
    1a7e:	bd80      	pop	{r7, pc}

00001a80 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b084      	sub	sp, #16
    1a84:	af00      	add	r7, sp, #0
    1a86:	0002      	movs	r2, r0
    1a88:	1dfb      	adds	r3, r7, #7
    1a8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1a8c:	230f      	movs	r3, #15
    1a8e:	18fb      	adds	r3, r7, r3
    1a90:	1dfa      	adds	r2, r7, #7
    1a92:	7812      	ldrb	r2, [r2, #0]
    1a94:	09d2      	lsrs	r2, r2, #7
    1a96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1a98:	230e      	movs	r3, #14
    1a9a:	18fb      	adds	r3, r7, r3
    1a9c:	1dfa      	adds	r2, r7, #7
    1a9e:	7812      	ldrb	r2, [r2, #0]
    1aa0:	0952      	lsrs	r2, r2, #5
    1aa2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1aa4:	4b0d      	ldr	r3, [pc, #52]	; (1adc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1aa6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1aa8:	230f      	movs	r3, #15
    1aaa:	18fb      	adds	r3, r7, r3
    1aac:	781b      	ldrb	r3, [r3, #0]
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d10f      	bne.n	1ad2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1ab2:	230f      	movs	r3, #15
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	781b      	ldrb	r3, [r3, #0]
    1ab8:	009b      	lsls	r3, r3, #2
    1aba:	2210      	movs	r2, #16
    1abc:	4694      	mov	ip, r2
    1abe:	44bc      	add	ip, r7
    1ac0:	4463      	add	r3, ip
    1ac2:	3b08      	subs	r3, #8
    1ac4:	681a      	ldr	r2, [r3, #0]
    1ac6:	230e      	movs	r3, #14
    1ac8:	18fb      	adds	r3, r7, r3
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	01db      	lsls	r3, r3, #7
    1ace:	18d3      	adds	r3, r2, r3
    1ad0:	e000      	b.n	1ad4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1ad2:	2300      	movs	r3, #0
	}
}
    1ad4:	0018      	movs	r0, r3
    1ad6:	46bd      	mov	sp, r7
    1ad8:	b004      	add	sp, #16
    1ada:	bd80      	pop	{r7, pc}
    1adc:	41004400 	.word	0x41004400

00001ae0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1ae0:	b580      	push	{r7, lr}
    1ae2:	b082      	sub	sp, #8
    1ae4:	af00      	add	r7, sp, #0
    1ae6:	0002      	movs	r2, r0
    1ae8:	1dfb      	adds	r3, r7, #7
    1aea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1aec:	1dfb      	adds	r3, r7, #7
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	0018      	movs	r0, r3
    1af2:	4b03      	ldr	r3, [pc, #12]	; (1b00 <port_get_group_from_gpio_pin+0x20>)
    1af4:	4798      	blx	r3
    1af6:	0003      	movs	r3, r0
}
    1af8:	0018      	movs	r0, r3
    1afa:	46bd      	mov	sp, r7
    1afc:	b002      	add	sp, #8
    1afe:	bd80      	pop	{r7, pc}
    1b00:	00001a81 	.word	0x00001a81

00001b04 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1b04:	b580      	push	{r7, lr}
    1b06:	b084      	sub	sp, #16
    1b08:	af00      	add	r7, sp, #0
    1b0a:	0002      	movs	r2, r0
    1b0c:	1dfb      	adds	r3, r7, #7
    1b0e:	701a      	strb	r2, [r3, #0]
    1b10:	1dbb      	adds	r3, r7, #6
    1b12:	1c0a      	adds	r2, r1, #0
    1b14:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1b16:	1dfb      	adds	r3, r7, #7
    1b18:	781b      	ldrb	r3, [r3, #0]
    1b1a:	0018      	movs	r0, r3
    1b1c:	4b0d      	ldr	r3, [pc, #52]	; (1b54 <port_pin_set_output_level+0x50>)
    1b1e:	4798      	blx	r3
    1b20:	0003      	movs	r3, r0
    1b22:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1b24:	1dfb      	adds	r3, r7, #7
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	221f      	movs	r2, #31
    1b2a:	4013      	ands	r3, r2
    1b2c:	2201      	movs	r2, #1
    1b2e:	409a      	lsls	r2, r3
    1b30:	0013      	movs	r3, r2
    1b32:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1b34:	1dbb      	adds	r3, r7, #6
    1b36:	781b      	ldrb	r3, [r3, #0]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d003      	beq.n	1b44 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1b3c:	68fb      	ldr	r3, [r7, #12]
    1b3e:	68ba      	ldr	r2, [r7, #8]
    1b40:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1b42:	e002      	b.n	1b4a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b44:	68fb      	ldr	r3, [r7, #12]
    1b46:	68ba      	ldr	r2, [r7, #8]
    1b48:	615a      	str	r2, [r3, #20]
	}
}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	46bd      	mov	sp, r7
    1b4e:	b004      	add	sp, #16
    1b50:	bd80      	pop	{r7, pc}
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	00001ae1 	.word	0x00001ae1

00001b58 <tm1640_start>:
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;
uint8_t wtc_bus_dummy_data[TM1640_GRIDS + 1] = {0};

static inline void tm1640_start(void)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	b083      	sub	sp, #12
    1b5c:	af00      	add	r7, sp, #0
    // Switch the CLK pin over to GPIO
    struct port_config gpio_conf;  
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    1b5e:	1d3b      	adds	r3, r7, #4
    1b60:	2201      	movs	r2, #1
    1b62:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    1b64:	1d3b      	adds	r3, r7, #4
    1b66:	2201      	movs	r2, #1
    1b68:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    1b6a:	1d3b      	adds	r3, r7, #4
    1b6c:	2200      	movs	r2, #0
    1b6e:	709a      	strb	r2, [r3, #2]
    
    port_pin_set_config(TM1640_CLK_PIN, &gpio_conf);
    1b70:	1d3b      	adds	r3, r7, #4
    1b72:	0019      	movs	r1, r3
    1b74:	2009      	movs	r0, #9
    1b76:	4b12      	ldr	r3, [pc, #72]	; (1bc0 <tm1640_start+0x68>)
    1b78:	4798      	blx	r3

    // Bring DOUT and CLK low for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    1b7a:	2100      	movs	r1, #0
    1b7c:	202a      	movs	r0, #42	; 0x2a
    1b7e:	4b11      	ldr	r3, [pc, #68]	; (1bc4 <tm1640_start+0x6c>)
    1b80:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    1b82:	2000      	movs	r0, #0
    1b84:	4b10      	ldr	r3, [pc, #64]	; (1bc8 <tm1640_start+0x70>)
    1b86:	4798      	blx	r3
    1b88:	0003      	movs	r3, r0
    1b8a:	001d      	movs	r5, r3
    1b8c:	2300      	movs	r3, #0
    1b8e:	001e      	movs	r6, r3
    1b90:	4b0e      	ldr	r3, [pc, #56]	; (1bcc <tm1640_start+0x74>)
    1b92:	2400      	movs	r4, #0
    1b94:	0028      	movs	r0, r5
    1b96:	0031      	movs	r1, r6
    1b98:	18c0      	adds	r0, r0, r3
    1b9a:	4161      	adcs	r1, r4
    1b9c:	4c0c      	ldr	r4, [pc, #48]	; (1bd0 <tm1640_start+0x78>)
    1b9e:	4a0d      	ldr	r2, [pc, #52]	; (1bd4 <tm1640_start+0x7c>)
    1ba0:	2300      	movs	r3, #0
    1ba2:	47a0      	blx	r4
    1ba4:	0003      	movs	r3, r0
    1ba6:	000c      	movs	r4, r1
    1ba8:	0018      	movs	r0, r3
    1baa:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <tm1640_start+0x80>)
    1bac:	4798      	blx	r3
    port_pin_set_output_level(TM1640_CLK_PIN, 0);    
    1bae:	2100      	movs	r1, #0
    1bb0:	2009      	movs	r0, #9
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <tm1640_start+0x6c>)
    1bb4:	4798      	blx	r3
}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	46bd      	mov	sp, r7
    1bba:	b003      	add	sp, #12
    1bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bbe:	46c0      	nop			; (mov r8, r8)
    1bc0:	00008ded 	.word	0x00008ded
    1bc4:	00001b05 	.word	0x00001b05
    1bc8:	0000b9ed 	.word	0x0000b9ed
    1bcc:	006acfbf 	.word	0x006acfbf
    1bd0:	000103d1 	.word	0x000103d1
    1bd4:	006acfc0 	.word	0x006acfc0
    1bd8:	20000001 	.word	0x20000001

00001bdc <tm1640_stop>:

static inline void tm1640_stop(void)
{
    1bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bde:	b085      	sub	sp, #20
    1be0:	af00      	add	r7, sp, #0
    // Switch the DO and CLK pins over to GPIOs    
    struct system_pinmux_config clk_conf;        
        
    // Bring DOUT low for 1us, then bring DOUT and CLK high for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    1be2:	2100      	movs	r1, #0
    1be4:	202a      	movs	r0, #42	; 0x2a
    1be6:	4b26      	ldr	r3, [pc, #152]	; (1c80 <tm1640_stop+0xa4>)
    1be8:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    1bea:	2000      	movs	r0, #0
    1bec:	4b25      	ldr	r3, [pc, #148]	; (1c84 <tm1640_stop+0xa8>)
    1bee:	4798      	blx	r3
    1bf0:	0003      	movs	r3, r0
    1bf2:	603b      	str	r3, [r7, #0]
    1bf4:	2300      	movs	r3, #0
    1bf6:	607b      	str	r3, [r7, #4]
    1bf8:	4b23      	ldr	r3, [pc, #140]	; (1c88 <tm1640_stop+0xac>)
    1bfa:	2400      	movs	r4, #0
    1bfc:	6838      	ldr	r0, [r7, #0]
    1bfe:	6879      	ldr	r1, [r7, #4]
    1c00:	18c0      	adds	r0, r0, r3
    1c02:	4161      	adcs	r1, r4
    1c04:	4c21      	ldr	r4, [pc, #132]	; (1c8c <tm1640_stop+0xb0>)
    1c06:	4a22      	ldr	r2, [pc, #136]	; (1c90 <tm1640_stop+0xb4>)
    1c08:	2300      	movs	r3, #0
    1c0a:	47a0      	blx	r4
    1c0c:	0003      	movs	r3, r0
    1c0e:	000c      	movs	r4, r1
    1c10:	0018      	movs	r0, r3
    1c12:	4b20      	ldr	r3, [pc, #128]	; (1c94 <tm1640_stop+0xb8>)
    1c14:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);
    1c16:	2101      	movs	r1, #1
    1c18:	2009      	movs	r0, #9
    1c1a:	4b19      	ldr	r3, [pc, #100]	; (1c80 <tm1640_stop+0xa4>)
    1c1c:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    1c1e:	2000      	movs	r0, #0
    1c20:	4b18      	ldr	r3, [pc, #96]	; (1c84 <tm1640_stop+0xa8>)
    1c22:	4798      	blx	r3
    1c24:	0003      	movs	r3, r0
    1c26:	001d      	movs	r5, r3
    1c28:	2300      	movs	r3, #0
    1c2a:	001e      	movs	r6, r3
    1c2c:	4b16      	ldr	r3, [pc, #88]	; (1c88 <tm1640_stop+0xac>)
    1c2e:	2400      	movs	r4, #0
    1c30:	0028      	movs	r0, r5
    1c32:	0031      	movs	r1, r6
    1c34:	18c0      	adds	r0, r0, r3
    1c36:	4161      	adcs	r1, r4
    1c38:	4c14      	ldr	r4, [pc, #80]	; (1c8c <tm1640_stop+0xb0>)
    1c3a:	4a15      	ldr	r2, [pc, #84]	; (1c90 <tm1640_stop+0xb4>)
    1c3c:	2300      	movs	r3, #0
    1c3e:	47a0      	blx	r4
    1c40:	0003      	movs	r3, r0
    1c42:	000c      	movs	r4, r1
    1c44:	0018      	movs	r0, r3
    1c46:	4b13      	ldr	r3, [pc, #76]	; (1c94 <tm1640_stop+0xb8>)
    1c48:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    1c4a:	2101      	movs	r1, #1
    1c4c:	202a      	movs	r0, #42	; 0x2a
    1c4e:	4b0c      	ldr	r3, [pc, #48]	; (1c80 <tm1640_stop+0xa4>)
    1c50:	4798      	blx	r3

    // Restore peripheral control
    system_pinmux_get_config_defaults(&clk_conf);
    1c52:	230c      	movs	r3, #12
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	0018      	movs	r0, r3
    1c58:	4b0f      	ldr	r3, [pc, #60]	; (1c98 <tm1640_stop+0xbc>)
    1c5a:	4798      	blx	r3
    clk_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1c5c:	230c      	movs	r3, #12
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	2200      	movs	r2, #0
    1c62:	705a      	strb	r2, [r3, #1]
    clk_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    1c64:	230c      	movs	r3, #12
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	2202      	movs	r2, #2
    1c6a:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &clk_conf);    
    1c6c:	230c      	movs	r3, #12
    1c6e:	18fb      	adds	r3, r7, r3
    1c70:	0019      	movs	r1, r3
    1c72:	2009      	movs	r0, #9
    1c74:	4b09      	ldr	r3, [pc, #36]	; (1c9c <tm1640_stop+0xc0>)
    1c76:	4798      	blx	r3
}
    1c78:	46c0      	nop			; (mov r8, r8)
    1c7a:	46bd      	mov	sp, r7
    1c7c:	b005      	add	sp, #20
    1c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c80:	00001b05 	.word	0x00001b05
    1c84:	0000b9ed 	.word	0x0000b9ed
    1c88:	006acfbf 	.word	0x006acfbf
    1c8c:	000103d1 	.word	0x000103d1
    1c90:	006acfc0 	.word	0x006acfc0
    1c94:	20000001 	.word	0x20000001
    1c98:	00001a59 	.word	0x00001a59
    1c9c:	0000bdb1 	.word	0x0000bdb1

00001ca0 <tm1640_write>:

static inline void tm1640_write(uint8_t byte)
{
    1ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca2:	b089      	sub	sp, #36	; 0x24
    1ca4:	af00      	add	r7, sp, #0
    1ca6:	0002      	movs	r2, r0
    1ca8:	2317      	movs	r3, #23
    1caa:	18fb      	adds	r3, r7, r3
    1cac:	701a      	strb	r2, [r3, #0]
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    1cae:	230f      	movs	r3, #15
    1cb0:	2210      	movs	r2, #16
    1cb2:	4694      	mov	ip, r2
    1cb4:	44bc      	add	ip, r7
    1cb6:	4463      	add	r3, ip
    1cb8:	2200      	movs	r2, #0
    1cba:	701a      	strb	r2, [r3, #0]
    1cbc:	e06d      	b.n	1d9a <tm1640_write+0xfa>
        if ((byte >> bit) & 0x01) 
    1cbe:	2317      	movs	r3, #23
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	781a      	ldrb	r2, [r3, #0]
    1cc4:	230f      	movs	r3, #15
    1cc6:	2110      	movs	r1, #16
    1cc8:	468c      	mov	ip, r1
    1cca:	44bc      	add	ip, r7
    1ccc:	4463      	add	r3, ip
    1cce:	781b      	ldrb	r3, [r3, #0]
    1cd0:	411a      	asrs	r2, r3
    1cd2:	0013      	movs	r3, r2
    1cd4:	2201      	movs	r2, #1
    1cd6:	4013      	ands	r3, r2
    1cd8:	d004      	beq.n	1ce4 <tm1640_write+0x44>
            port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    1cda:	2101      	movs	r1, #1
    1cdc:	202a      	movs	r0, #42	; 0x2a
    1cde:	4b35      	ldr	r3, [pc, #212]	; (1db4 <tm1640_write+0x114>)
    1ce0:	4798      	blx	r3
    1ce2:	e003      	b.n	1cec <tm1640_write+0x4c>
        else
            port_pin_set_output_level(TM1640_DOUT_PIN, 0);    
    1ce4:	2100      	movs	r1, #0
    1ce6:	202a      	movs	r0, #42	; 0x2a
    1ce8:	4b32      	ldr	r3, [pc, #200]	; (1db4 <tm1640_write+0x114>)
    1cea:	4798      	blx	r3

        delay_us(TM1640_BIT_TIME);
    1cec:	2000      	movs	r0, #0
    1cee:	4b32      	ldr	r3, [pc, #200]	; (1db8 <tm1640_write+0x118>)
    1cf0:	4798      	blx	r3
    1cf2:	0003      	movs	r3, r0
    1cf4:	001d      	movs	r5, r3
    1cf6:	2300      	movs	r3, #0
    1cf8:	001e      	movs	r6, r3
    1cfa:	4b30      	ldr	r3, [pc, #192]	; (1dbc <tm1640_write+0x11c>)
    1cfc:	2400      	movs	r4, #0
    1cfe:	195b      	adds	r3, r3, r5
    1d00:	4174      	adcs	r4, r6
    1d02:	0018      	movs	r0, r3
    1d04:	0021      	movs	r1, r4
    1d06:	4c2e      	ldr	r4, [pc, #184]	; (1dc0 <tm1640_write+0x120>)
    1d08:	4a2e      	ldr	r2, [pc, #184]	; (1dc4 <tm1640_write+0x124>)
    1d0a:	2300      	movs	r3, #0
    1d0c:	47a0      	blx	r4
    1d0e:	0003      	movs	r3, r0
    1d10:	000c      	movs	r4, r1
    1d12:	0018      	movs	r0, r3
    1d14:	4b2c      	ldr	r3, [pc, #176]	; (1dc8 <tm1640_write+0x128>)
    1d16:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
    1d18:	2101      	movs	r1, #1
    1d1a:	2009      	movs	r0, #9
    1d1c:	4b25      	ldr	r3, [pc, #148]	; (1db4 <tm1640_write+0x114>)
    1d1e:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    1d20:	2000      	movs	r0, #0
    1d22:	4b25      	ldr	r3, [pc, #148]	; (1db8 <tm1640_write+0x118>)
    1d24:	4798      	blx	r3
    1d26:	0003      	movs	r3, r0
    1d28:	60bb      	str	r3, [r7, #8]
    1d2a:	2300      	movs	r3, #0
    1d2c:	60fb      	str	r3, [r7, #12]
    1d2e:	4b23      	ldr	r3, [pc, #140]	; (1dbc <tm1640_write+0x11c>)
    1d30:	2400      	movs	r4, #0
    1d32:	68b8      	ldr	r0, [r7, #8]
    1d34:	68f9      	ldr	r1, [r7, #12]
    1d36:	18c0      	adds	r0, r0, r3
    1d38:	4161      	adcs	r1, r4
    1d3a:	4c21      	ldr	r4, [pc, #132]	; (1dc0 <tm1640_write+0x120>)
    1d3c:	4a21      	ldr	r2, [pc, #132]	; (1dc4 <tm1640_write+0x124>)
    1d3e:	2300      	movs	r3, #0
    1d40:	47a0      	blx	r4
    1d42:	0003      	movs	r3, r0
    1d44:	000c      	movs	r4, r1
    1d46:	0018      	movs	r0, r3
    1d48:	4b1f      	ldr	r3, [pc, #124]	; (1dc8 <tm1640_write+0x128>)
    1d4a:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
    1d4c:	2100      	movs	r1, #0
    1d4e:	2009      	movs	r0, #9
    1d50:	4b18      	ldr	r3, [pc, #96]	; (1db4 <tm1640_write+0x114>)
    1d52:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    1d54:	2000      	movs	r0, #0
    1d56:	4b18      	ldr	r3, [pc, #96]	; (1db8 <tm1640_write+0x118>)
    1d58:	4798      	blx	r3
    1d5a:	0003      	movs	r3, r0
    1d5c:	603b      	str	r3, [r7, #0]
    1d5e:	2300      	movs	r3, #0
    1d60:	607b      	str	r3, [r7, #4]
    1d62:	4b16      	ldr	r3, [pc, #88]	; (1dbc <tm1640_write+0x11c>)
    1d64:	2400      	movs	r4, #0
    1d66:	6838      	ldr	r0, [r7, #0]
    1d68:	6879      	ldr	r1, [r7, #4]
    1d6a:	18c0      	adds	r0, r0, r3
    1d6c:	4161      	adcs	r1, r4
    1d6e:	4c14      	ldr	r4, [pc, #80]	; (1dc0 <tm1640_write+0x120>)
    1d70:	4a14      	ldr	r2, [pc, #80]	; (1dc4 <tm1640_write+0x124>)
    1d72:	2300      	movs	r3, #0
    1d74:	47a0      	blx	r4
    1d76:	0003      	movs	r3, r0
    1d78:	000c      	movs	r4, r1
    1d7a:	0018      	movs	r0, r3
    1d7c:	4b12      	ldr	r3, [pc, #72]	; (1dc8 <tm1640_write+0x128>)
    1d7e:	4798      	blx	r3
static inline void tm1640_write(uint8_t byte)
{
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    1d80:	230f      	movs	r3, #15
    1d82:	2210      	movs	r2, #16
    1d84:	4694      	mov	ip, r2
    1d86:	44bc      	add	ip, r7
    1d88:	4463      	add	r3, ip
    1d8a:	781a      	ldrb	r2, [r3, #0]
    1d8c:	230f      	movs	r3, #15
    1d8e:	2110      	movs	r1, #16
    1d90:	468c      	mov	ip, r1
    1d92:	44bc      	add	ip, r7
    1d94:	4463      	add	r3, ip
    1d96:	3201      	adds	r2, #1
    1d98:	701a      	strb	r2, [r3, #0]
    1d9a:	230f      	movs	r3, #15
    1d9c:	2210      	movs	r2, #16
    1d9e:	4694      	mov	ip, r2
    1da0:	44bc      	add	ip, r7
    1da2:	4463      	add	r3, ip
    1da4:	781b      	ldrb	r3, [r3, #0]
    1da6:	2b07      	cmp	r3, #7
    1da8:	d989      	bls.n	1cbe <tm1640_write+0x1e>
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
        delay_us(TM1640_BIT_TIME);
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
        delay_us(TM1640_BIT_TIME);
    }
}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	46bd      	mov	sp, r7
    1dae:	b009      	add	sp, #36	; 0x24
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	00001b05 	.word	0x00001b05
    1db8:	0000b9ed 	.word	0x0000b9ed
    1dbc:	006acfbf 	.word	0x006acfbf
    1dc0:	000103d1 	.word	0x000103d1
    1dc4:	006acfc0 	.word	0x006acfc0
    1dc8:	20000001 	.word	0x20000001

00001dcc <tm1640_write_cmd>:


static enum status_code tm1640_write_cmd(uint8_t cmd, uint8_t data)
{
    1dcc:	b580      	push	{r7, lr}
    1dce:	b082      	sub	sp, #8
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	0002      	movs	r2, r0
    1dd4:	1dfb      	adds	r3, r7, #7
    1dd6:	701a      	strb	r2, [r3, #0]
    1dd8:	1dbb      	adds	r3, r7, #6
    1dda:	1c0a      	adds	r2, r1, #0
    1ddc:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
    1dde:	4b0f      	ldr	r3, [pc, #60]	; (1e1c <tm1640_write_cmd+0x50>)
    1de0:	4798      	blx	r3
    
    tm1640_start();
    1de2:	4b0f      	ldr	r3, [pc, #60]	; (1e20 <tm1640_write_cmd+0x54>)
    1de4:	4798      	blx	r3
    tm1640_write((cmd & CTRL_CMD_MASK) | (data & ~CTRL_CMD_MASK));
    1de6:	1dfb      	adds	r3, r7, #7
    1de8:	781b      	ldrb	r3, [r3, #0]
    1dea:	b25b      	sxtb	r3, r3
    1dec:	223f      	movs	r2, #63	; 0x3f
    1dee:	4393      	bics	r3, r2
    1df0:	b25a      	sxtb	r2, r3
    1df2:	1dbb      	adds	r3, r7, #6
    1df4:	781b      	ldrb	r3, [r3, #0]
    1df6:	b25b      	sxtb	r3, r3
    1df8:	213f      	movs	r1, #63	; 0x3f
    1dfa:	400b      	ands	r3, r1
    1dfc:	b25b      	sxtb	r3, r3
    1dfe:	4313      	orrs	r3, r2
    1e00:	b25b      	sxtb	r3, r3
    1e02:	b2db      	uxtb	r3, r3
    1e04:	0018      	movs	r0, r3
    1e06:	4b07      	ldr	r3, [pc, #28]	; (1e24 <tm1640_write_cmd+0x58>)
    1e08:	4798      	blx	r3
    tm1640_stop();
    1e0a:	4b07      	ldr	r3, [pc, #28]	; (1e28 <tm1640_write_cmd+0x5c>)
    1e0c:	4798      	blx	r3

    taskEXIT_CRITICAL();
    1e0e:	4b07      	ldr	r3, [pc, #28]	; (1e2c <tm1640_write_cmd+0x60>)
    1e10:	4798      	blx	r3

    return STATUS_OK;
    1e12:	2300      	movs	r3, #0
}
    1e14:	0018      	movs	r0, r3
    1e16:	46bd      	mov	sp, r7
    1e18:	b002      	add	sp, #8
    1e1a:	bd80      	pop	{r7, pc}
    1e1c:	0000c409 	.word	0x0000c409
    1e20:	00001b59 	.word	0x00001b59
    1e24:	00001ca1 	.word	0x00001ca1
    1e28:	00001bdd 	.word	0x00001bdd
    1e2c:	0000c42d 	.word	0x0000c42d

00001e30 <tm1640_init>:

void tm1640_init(void)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b082      	sub	sp, #8
    1e34:	af00      	add	r7, sp, #0
    struct port_config gpio_conf;
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    1e36:	1d3b      	adds	r3, r7, #4
    1e38:	2201      	movs	r2, #1
    1e3a:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    1e3c:	1d3b      	adds	r3, r7, #4
    1e3e:	2201      	movs	r2, #1
    1e40:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    1e42:	1d3b      	adds	r3, r7, #4
    1e44:	2200      	movs	r2, #0
    1e46:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(TM1640_DOUT_PIN, &gpio_conf);
    1e48:	1d3b      	adds	r3, r7, #4
    1e4a:	0019      	movs	r1, r3
    1e4c:	202a      	movs	r0, #42	; 0x2a
    1e4e:	4b05      	ldr	r3, [pc, #20]	; (1e64 <tm1640_init+0x34>)
    1e50:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);
    1e52:	2101      	movs	r1, #1
    1e54:	202a      	movs	r0, #42	; 0x2a
    1e56:	4b04      	ldr	r3, [pc, #16]	; (1e68 <tm1640_init+0x38>)
    1e58:	4798      	blx	r3
}
    1e5a:	46c0      	nop			; (mov r8, r8)
    1e5c:	46bd      	mov	sp, r7
    1e5e:	b002      	add	sp, #8
    1e60:	bd80      	pop	{r7, pc}
    1e62:	46c0      	nop			; (mov r8, r8)
    1e64:	00008ded 	.word	0x00008ded
    1e68:	00001b05 	.word	0x00001b05

00001e6c <tm1640_display_on>:


enum status_code tm1640_display_on(uint8_t on)
{
    1e6c:	b580      	push	{r7, lr}
    1e6e:	b084      	sub	sp, #16
    1e70:	af00      	add	r7, sp, #0
    1e72:	0002      	movs	r2, r0
    1e74:	1dfb      	adds	r3, r7, #7
    1e76:	701a      	strb	r2, [r3, #0]
    uint8_t display_on = CTRL_CMD_DISP_OFF;
    1e78:	230f      	movs	r3, #15
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	2200      	movs	r2, #0
    1e7e:	701a      	strb	r2, [r3, #0]

    if (on) 
    1e80:	1dfb      	adds	r3, r7, #7
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d003      	beq.n	1e90 <tm1640_display_on+0x24>
        display_on = CTRL_CMD_DISP_ON | BRIGHT_3; 
    1e88:	230f      	movs	r3, #15
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	228b      	movs	r2, #139	; 0x8b
    1e8e:	701a      	strb	r2, [r3, #0]

    return tm1640_write_cmd(CTRL_CMD, display_on); 
    1e90:	230f      	movs	r3, #15
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	0019      	movs	r1, r3
    1e98:	2080      	movs	r0, #128	; 0x80
    1e9a:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <tm1640_display_on+0x3c>)
    1e9c:	4798      	blx	r3
    1e9e:	0003      	movs	r3, r0
}
    1ea0:	0018      	movs	r0, r3
    1ea2:	46bd      	mov	sp, r7
    1ea4:	b004      	add	sp, #16
    1ea6:	bd80      	pop	{r7, pc}
    1ea8:	00001dcd 	.word	0x00001dcd

00001eac <tm1640_set_display>:

enum status_code tm1640_set_display(uint8_t *disp, uint8_t length, tm1640_brightness_t brightness)
{
    1eac:	b590      	push	{r4, r7, lr}
    1eae:	b087      	sub	sp, #28
    1eb0:	af00      	add	r7, sp, #0
    1eb2:	6078      	str	r0, [r7, #4]
    1eb4:	0008      	movs	r0, r1
    1eb6:	0011      	movs	r1, r2
    1eb8:	1cfb      	adds	r3, r7, #3
    1eba:	1c02      	adds	r2, r0, #0
    1ebc:	701a      	strb	r2, [r3, #0]
    1ebe:	1cbb      	adds	r3, r7, #2
    1ec0:	1c0a      	adds	r2, r1, #0
    1ec2:	701a      	strb	r2, [r3, #0]
    enum status_code status = STATUS_OK;
    1ec4:	2316      	movs	r3, #22
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	2200      	movs	r2, #0
    1eca:	701a      	strb	r2, [r3, #0]
    struct port_config di_conf;    
    struct system_pinmux_config pin_conf;
    uint8_t grids;
       
    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    1ecc:	4b32      	ldr	r3, [pc, #200]	; (1f98 <tm1640_set_display+0xec>)
    1ece:	6818      	ldr	r0, [r3, #0]
    1ed0:	2301      	movs	r3, #1
    1ed2:	425a      	negs	r2, r3
    1ed4:	2300      	movs	r3, #0
    1ed6:	2100      	movs	r1, #0
    1ed8:	4c30      	ldr	r4, [pc, #192]	; (1f9c <tm1640_set_display+0xf0>)
    1eda:	47a0      	blx	r4
    1edc:	1e03      	subs	r3, r0, #0
    1ede:	d101      	bne.n	1ee4 <tm1640_set_display+0x38>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    1ee0:	2312      	movs	r3, #18
    1ee2:	e055      	b.n	1f90 <tm1640_set_display+0xe4>
    }

    taskENTER_CRITICAL();
    1ee4:	4b2e      	ldr	r3, [pc, #184]	; (1fa0 <tm1640_set_display+0xf4>)
    1ee6:	4798      	blx	r3

    system_pinmux_get_config_defaults(&pin_conf);
    1ee8:	230c      	movs	r3, #12
    1eea:	18fb      	adds	r3, r7, r3
    1eec:	0018      	movs	r0, r3
    1eee:	4b2d      	ldr	r3, [pc, #180]	; (1fa4 <tm1640_set_display+0xf8>)
    1ef0:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ef2:	230c      	movs	r3, #12
    1ef4:	18fb      	adds	r3, r7, r3
    1ef6:	2200      	movs	r2, #0
    1ef8:	705a      	strb	r2, [r3, #1]
    pin_conf.mux_position = PINMUX_PA08C_SERCOM0_PAD0 & 0xFFFF;
    1efa:	230c      	movs	r3, #12
    1efc:	18fb      	adds	r3, r7, r3
    1efe:	2202      	movs	r2, #2
    1f00:	701a      	strb	r2, [r3, #0]

    // Data input pin for the WTC6508 needs to be set to a GPIO so it isn't driven
    // when the clock is generated for the TM1640
    di_conf.direction = PORT_PIN_DIR_INPUT;
    1f02:	2310      	movs	r3, #16
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	2200      	movs	r2, #0
    1f08:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    1f0a:	2310      	movs	r3, #16
    1f0c:	18fb      	adds	r3, r7, r3
    1f0e:	2201      	movs	r2, #1
    1f10:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    1f12:	2310      	movs	r3, #16
    1f14:	18fb      	adds	r3, r7, r3
    1f16:	2200      	movs	r2, #0
    1f18:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1f1a:	2310      	movs	r3, #16
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	0019      	movs	r1, r3
    1f20:	2008      	movs	r0, #8
    1f22:	4b21      	ldr	r3, [pc, #132]	; (1fa8 <tm1640_set_display+0xfc>)
    1f24:	4798      	blx	r3

    tm1640_start();
    1f26:	4b21      	ldr	r3, [pc, #132]	; (1fac <tm1640_set_display+0x100>)
    1f28:	4798      	blx	r3
    tm1640_write(ADDR_CMD_ADDR0);
    1f2a:	20c0      	movs	r0, #192	; 0xc0
    1f2c:	4b20      	ldr	r3, [pc, #128]	; (1fb0 <tm1640_set_display+0x104>)
    1f2e:	4798      	blx	r3
    for (grids = 0; grids < length; grids++) {
    1f30:	2317      	movs	r3, #23
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	2200      	movs	r2, #0
    1f36:	701a      	strb	r2, [r3, #0]
    1f38:	e00f      	b.n	1f5a <tm1640_set_display+0xae>
        tm1640_write(disp[grids]);
    1f3a:	2317      	movs	r3, #23
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	687a      	ldr	r2, [r7, #4]
    1f42:	18d3      	adds	r3, r2, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	0018      	movs	r0, r3
    1f48:	4b19      	ldr	r3, [pc, #100]	; (1fb0 <tm1640_set_display+0x104>)
    1f4a:	4798      	blx	r3
    di_conf.powersave = false;
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);

    tm1640_start();
    tm1640_write(ADDR_CMD_ADDR0);
    for (grids = 0; grids < length; grids++) {
    1f4c:	2317      	movs	r3, #23
    1f4e:	18fb      	adds	r3, r7, r3
    1f50:	781a      	ldrb	r2, [r3, #0]
    1f52:	2317      	movs	r3, #23
    1f54:	18fb      	adds	r3, r7, r3
    1f56:	3201      	adds	r2, #1
    1f58:	701a      	strb	r2, [r3, #0]
    1f5a:	2317      	movs	r3, #23
    1f5c:	18fa      	adds	r2, r7, r3
    1f5e:	1cfb      	adds	r3, r7, #3
    1f60:	7812      	ldrb	r2, [r2, #0]
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	429a      	cmp	r2, r3
    1f66:	d3e8      	bcc.n	1f3a <tm1640_set_display+0x8e>
        tm1640_write(disp[grids]);
    }
    tm1640_stop();                    
    1f68:	4b12      	ldr	r3, [pc, #72]	; (1fb4 <tm1640_set_display+0x108>)
    1f6a:	4798      	blx	r3

    // Restore pin function to the WTC6508 SPI
    system_pinmux_pin_set_config(PINMUX_PA08C_SERCOM0_PAD0 >> 16, &pin_conf);       
    1f6c:	230c      	movs	r3, #12
    1f6e:	18fb      	adds	r3, r7, r3
    1f70:	0019      	movs	r1, r3
    1f72:	2008      	movs	r0, #8
    1f74:	4b10      	ldr	r3, [pc, #64]	; (1fb8 <tm1640_set_display+0x10c>)
    1f76:	4798      	blx	r3
    
    taskEXIT_CRITICAL();                 
    1f78:	4b10      	ldr	r3, [pc, #64]	; (1fbc <tm1640_set_display+0x110>)
    1f7a:	4798      	blx	r3

    xSemaphoreGive(display_mutex);     
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <tm1640_set_display+0xec>)
    1f7e:	6818      	ldr	r0, [r3, #0]
    1f80:	2300      	movs	r3, #0
    1f82:	2200      	movs	r2, #0
    1f84:	2100      	movs	r1, #0
    1f86:	4c0e      	ldr	r4, [pc, #56]	; (1fc0 <tm1640_set_display+0x114>)
    1f88:	47a0      	blx	r4
    return status;
    1f8a:	2316      	movs	r3, #22
    1f8c:	18fb      	adds	r3, r7, r3
    1f8e:	781b      	ldrb	r3, [r3, #0]
}
    1f90:	0018      	movs	r0, r3
    1f92:	46bd      	mov	sp, r7
    1f94:	b007      	add	sp, #28
    1f96:	bd90      	pop	{r4, r7, pc}
    1f98:	20004604 	.word	0x20004604
    1f9c:	0000cac9 	.word	0x0000cac9
    1fa0:	0000c409 	.word	0x0000c409
    1fa4:	00001a59 	.word	0x00001a59
    1fa8:	00008ded 	.word	0x00008ded
    1fac:	00001b59 	.word	0x00001b59
    1fb0:	00001ca1 	.word	0x00001ca1
    1fb4:	00001bdd 	.word	0x00001bdd
    1fb8:	0000bdb1 	.word	0x0000bdb1
    1fbc:	0000c42d 	.word	0x0000c42d
    1fc0:	0000c7c9 	.word	0x0000c7c9

00001fc4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1fc4:	b580      	push	{r7, lr}
    1fc6:	b082      	sub	sp, #8
    1fc8:	af00      	add	r7, sp, #0
    1fca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	2280      	movs	r2, #128	; 0x80
    1fd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1fd2:	687b      	ldr	r3, [r7, #4]
    1fd4:	2200      	movs	r2, #0
    1fd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	2201      	movs	r2, #1
    1fdc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1fde:	687b      	ldr	r3, [r7, #4]
    1fe0:	2200      	movs	r2, #0
    1fe2:	70da      	strb	r2, [r3, #3]
}
    1fe4:	46c0      	nop			; (mov r8, r8)
    1fe6:	46bd      	mov	sp, r7
    1fe8:	b002      	add	sp, #8
    1fea:	bd80      	pop	{r7, pc}

00001fec <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	0002      	movs	r2, r0
    1ff4:	1dfb      	adds	r3, r7, #7
    1ff6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1ff8:	230f      	movs	r3, #15
    1ffa:	18fb      	adds	r3, r7, r3
    1ffc:	1dfa      	adds	r2, r7, #7
    1ffe:	7812      	ldrb	r2, [r2, #0]
    2000:	09d2      	lsrs	r2, r2, #7
    2002:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2004:	230e      	movs	r3, #14
    2006:	18fb      	adds	r3, r7, r3
    2008:	1dfa      	adds	r2, r7, #7
    200a:	7812      	ldrb	r2, [r2, #0]
    200c:	0952      	lsrs	r2, r2, #5
    200e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2010:	4b0d      	ldr	r3, [pc, #52]	; (2048 <STACK_SIZE+0x48>)
    2012:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2014:	230f      	movs	r3, #15
    2016:	18fb      	adds	r3, r7, r3
    2018:	781b      	ldrb	r3, [r3, #0]
    201a:	2b00      	cmp	r3, #0
    201c:	d10f      	bne.n	203e <STACK_SIZE+0x3e>
		return &(ports[port_index]->Group[group_index]);
    201e:	230f      	movs	r3, #15
    2020:	18fb      	adds	r3, r7, r3
    2022:	781b      	ldrb	r3, [r3, #0]
    2024:	009b      	lsls	r3, r3, #2
    2026:	2210      	movs	r2, #16
    2028:	4694      	mov	ip, r2
    202a:	44bc      	add	ip, r7
    202c:	4463      	add	r3, ip
    202e:	3b08      	subs	r3, #8
    2030:	681a      	ldr	r2, [r3, #0]
    2032:	230e      	movs	r3, #14
    2034:	18fb      	adds	r3, r7, r3
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	01db      	lsls	r3, r3, #7
    203a:	18d3      	adds	r3, r2, r3
    203c:	e000      	b.n	2040 <STACK_SIZE+0x40>
	} else {
		Assert(false);
		return NULL;
    203e:	2300      	movs	r3, #0
	}
}
    2040:	0018      	movs	r0, r3
    2042:	46bd      	mov	sp, r7
    2044:	b004      	add	sp, #16
    2046:	bd80      	pop	{r7, pc}
    2048:	41004400 	.word	0x41004400

0000204c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    204c:	b580      	push	{r7, lr}
    204e:	b082      	sub	sp, #8
    2050:	af00      	add	r7, sp, #0
    2052:	0002      	movs	r2, r0
    2054:	1dfb      	adds	r3, r7, #7
    2056:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <system_interrupt_enable+0x28>)
    205a:	1dfa      	adds	r2, r7, #7
    205c:	7812      	ldrb	r2, [r2, #0]
    205e:	0011      	movs	r1, r2
    2060:	221f      	movs	r2, #31
    2062:	400a      	ands	r2, r1
    2064:	2101      	movs	r1, #1
    2066:	4091      	lsls	r1, r2
    2068:	000a      	movs	r2, r1
    206a:	601a      	str	r2, [r3, #0]
}
    206c:	46c0      	nop			; (mov r8, r8)
    206e:	46bd      	mov	sp, r7
    2070:	b002      	add	sp, #8
    2072:	bd80      	pop	{r7, pc}
    2074:	e000e100 	.word	0xe000e100

00002078 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2078:	b580      	push	{r7, lr}
    207a:	b082      	sub	sp, #8
    207c:	af00      	add	r7, sp, #0
    207e:	0002      	movs	r2, r0
    2080:	1dfb      	adds	r3, r7, #7
    2082:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2084:	1dfb      	adds	r3, r7, #7
    2086:	781b      	ldrb	r3, [r3, #0]
    2088:	0018      	movs	r0, r3
    208a:	4b03      	ldr	r3, [pc, #12]	; (2098 <port_get_group_from_gpio_pin+0x20>)
    208c:	4798      	blx	r3
    208e:	0003      	movs	r3, r0
}
    2090:	0018      	movs	r0, r3
    2092:	46bd      	mov	sp, r7
    2094:	b002      	add	sp, #8
    2096:	bd80      	pop	{r7, pc}
    2098:	00001fed 	.word	0x00001fed

0000209c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    209c:	b580      	push	{r7, lr}
    209e:	b084      	sub	sp, #16
    20a0:	af00      	add	r7, sp, #0
    20a2:	0002      	movs	r2, r0
    20a4:	1dfb      	adds	r3, r7, #7
    20a6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20a8:	1dfb      	adds	r3, r7, #7
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	0018      	movs	r0, r3
    20ae:	4b0b      	ldr	r3, [pc, #44]	; (20dc <port_pin_get_input_level+0x40>)
    20b0:	4798      	blx	r3
    20b2:	0003      	movs	r3, r0
    20b4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    20b6:	1dfb      	adds	r3, r7, #7
    20b8:	781b      	ldrb	r3, [r3, #0]
    20ba:	221f      	movs	r2, #31
    20bc:	4013      	ands	r3, r2
    20be:	2201      	movs	r2, #1
    20c0:	409a      	lsls	r2, r3
    20c2:	0013      	movs	r3, r2
    20c4:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    20c6:	68fb      	ldr	r3, [r7, #12]
    20c8:	6a1b      	ldr	r3, [r3, #32]
    20ca:	68ba      	ldr	r2, [r7, #8]
    20cc:	4013      	ands	r3, r2
    20ce:	1e5a      	subs	r2, r3, #1
    20d0:	4193      	sbcs	r3, r2
    20d2:	b2db      	uxtb	r3, r3
}
    20d4:	0018      	movs	r0, r3
    20d6:	46bd      	mov	sp, r7
    20d8:	b004      	add	sp, #16
    20da:	bd80      	pop	{r7, pc}
    20dc:	00002079 	.word	0x00002079

000020e0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    20e0:	b580      	push	{r7, lr}
    20e2:	b084      	sub	sp, #16
    20e4:	af00      	add	r7, sp, #0
    20e6:	0002      	movs	r2, r0
    20e8:	1dfb      	adds	r3, r7, #7
    20ea:	701a      	strb	r2, [r3, #0]
    20ec:	1dbb      	adds	r3, r7, #6
    20ee:	1c0a      	adds	r2, r1, #0
    20f0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    20f2:	1dfb      	adds	r3, r7, #7
    20f4:	781b      	ldrb	r3, [r3, #0]
    20f6:	0018      	movs	r0, r3
    20f8:	4b0d      	ldr	r3, [pc, #52]	; (2130 <port_pin_set_output_level+0x50>)
    20fa:	4798      	blx	r3
    20fc:	0003      	movs	r3, r0
    20fe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2100:	1dfb      	adds	r3, r7, #7
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	221f      	movs	r2, #31
    2106:	4013      	ands	r3, r2
    2108:	2201      	movs	r2, #1
    210a:	409a      	lsls	r2, r3
    210c:	0013      	movs	r3, r2
    210e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2110:	1dbb      	adds	r3, r7, #6
    2112:	781b      	ldrb	r3, [r3, #0]
    2114:	2b00      	cmp	r3, #0
    2116:	d003      	beq.n	2120 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2118:	68fb      	ldr	r3, [r7, #12]
    211a:	68ba      	ldr	r2, [r7, #8]
    211c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    211e:	e002      	b.n	2126 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2120:	68fb      	ldr	r3, [r7, #12]
    2122:	68ba      	ldr	r2, [r7, #8]
    2124:	615a      	str	r2, [r3, #20]
	}
}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	46bd      	mov	sp, r7
    212a:	b004      	add	sp, #16
    212c:	bd80      	pop	{r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	00002079 	.word	0x00002079

00002134 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2134:	b580      	push	{r7, lr}
    2136:	b084      	sub	sp, #16
    2138:	af00      	add	r7, sp, #0
    213a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    213c:	687b      	ldr	r3, [r7, #4]
    213e:	681b      	ldr	r3, [r3, #0]
    2140:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2142:	68fb      	ldr	r3, [r7, #12]
    2144:	69db      	ldr	r3, [r3, #28]
    2146:	1e5a      	subs	r2, r3, #1
    2148:	4193      	sbcs	r3, r2
    214a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    214c:	0018      	movs	r0, r3
    214e:	46bd      	mov	sp, r7
    2150:	b004      	add	sp, #16
    2152:	bd80      	pop	{r7, pc}

00002154 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2154:	b580      	push	{r7, lr}
    2156:	b082      	sub	sp, #8
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    215c:	687b      	ldr	r3, [r7, #4]
    215e:	2201      	movs	r2, #1
    2160:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	2200      	movs	r2, #0
    2166:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	2200      	movs	r2, #0
    216c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    216e:	687b      	ldr	r3, [r7, #4]
    2170:	22c0      	movs	r2, #192	; 0xc0
    2172:	0392      	lsls	r2, r2, #14
    2174:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2176:	687b      	ldr	r3, [r7, #4]
    2178:	2200      	movs	r2, #0
    217a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    217c:	687b      	ldr	r3, [r7, #4]
    217e:	2200      	movs	r2, #0
    2180:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	2201      	movs	r2, #1
    2186:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2188:	687b      	ldr	r3, [r7, #4]
    218a:	2201      	movs	r2, #1
    218c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	2200      	movs	r2, #0
    2192:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2224      	movs	r2, #36	; 0x24
    2198:	2100      	movs	r1, #0
    219a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	3318      	adds	r3, #24
    21a0:	220c      	movs	r2, #12
    21a2:	2100      	movs	r1, #0
    21a4:	0018      	movs	r0, r3
    21a6:	4b0a      	ldr	r3, [pc, #40]	; (21d0 <spi_get_config_defaults+0x7c>)
    21a8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	4a09      	ldr	r2, [pc, #36]	; (21d4 <spi_get_config_defaults+0x80>)
    21ae:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2200      	movs	r2, #0
    21b4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	2200      	movs	r2, #0
    21ba:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2200      	movs	r2, #0
    21c0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	2200      	movs	r2, #0
    21c6:	635a      	str	r2, [r3, #52]	; 0x34

};
    21c8:	46c0      	nop			; (mov r8, r8)
    21ca:	46bd      	mov	sp, r7
    21cc:	b002      	add	sp, #8
    21ce:	bd80      	pop	{r7, pc}
    21d0:	00010c67 	.word	0x00010c67
    21d4:	000186a0 	.word	0x000186a0

000021d8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    21d8:	b580      	push	{r7, lr}
    21da:	b084      	sub	sp, #16
    21dc:	af00      	add	r7, sp, #0
    21de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21e0:	687b      	ldr	r3, [r7, #4]
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	681b      	ldr	r3, [r3, #0]
    21ea:	0018      	movs	r0, r3
    21ec:	4b0b      	ldr	r3, [pc, #44]	; (221c <spi_enable+0x44>)
    21ee:	4798      	blx	r3
    21f0:	0003      	movs	r3, r0
    21f2:	0018      	movs	r0, r3
    21f4:	4b0a      	ldr	r3, [pc, #40]	; (2220 <spi_enable+0x48>)
    21f6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    21f8:	46c0      	nop			; (mov r8, r8)
    21fa:	687b      	ldr	r3, [r7, #4]
    21fc:	0018      	movs	r0, r3
    21fe:	4b09      	ldr	r3, [pc, #36]	; (2224 <spi_enable+0x4c>)
    2200:	4798      	blx	r3
    2202:	1e03      	subs	r3, r0, #0
    2204:	d1f9      	bne.n	21fa <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2206:	68fb      	ldr	r3, [r7, #12]
    2208:	681b      	ldr	r3, [r3, #0]
    220a:	2202      	movs	r2, #2
    220c:	431a      	orrs	r2, r3
    220e:	68fb      	ldr	r3, [r7, #12]
    2210:	601a      	str	r2, [r3, #0]
}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	46bd      	mov	sp, r7
    2216:	b004      	add	sp, #16
    2218:	bd80      	pop	{r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	00009589 	.word	0x00009589
    2220:	0000204d 	.word	0x0000204d
    2224:	00002135 	.word	0x00002135

00002228 <wtc6508_init>:
#define DISPLAY_MUTEX_TIMEOUT   pdMS_TO_TICKS(5)

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
    2228:	b580      	push	{r7, lr}
    222a:	b08e      	sub	sp, #56	; 0x38
    222c:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
    222e:	003b      	movs	r3, r7
    2230:	0018      	movs	r0, r3
    2232:	4b1c      	ldr	r3, [pc, #112]	; (22a4 <wtc6508_init+0x7c>)
    2234:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
    2236:	003b      	movs	r3, r7
    2238:	4a1b      	ldr	r2, [pc, #108]	; (22a8 <wtc6508_init+0x80>)
    223a:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
    223c:	003b      	movs	r3, r7
    223e:	4a1b      	ldr	r2, [pc, #108]	; (22ac <wtc6508_init+0x84>)
    2240:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
    2242:	003b      	movs	r3, r7
    2244:	2201      	movs	r2, #1
    2246:	4252      	negs	r2, r2
    2248:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
    224a:	003b      	movs	r3, r7
    224c:	2201      	movs	r2, #1
    224e:	4252      	negs	r2, r2
    2250:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    2252:	003b      	movs	r3, r7
    2254:	2280      	movs	r2, #128	; 0x80
    2256:	0292      	lsls	r2, r2, #10
    2258:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
    225a:	003b      	movs	r3, r7
    225c:	2200      	movs	r2, #0
    225e:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
    2260:	003b      	movs	r3, r7
    2262:	4a13      	ldr	r2, [pc, #76]	; (22b0 <wtc6508_init+0x88>)
    2264:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
    2266:	003b      	movs	r3, r7
    2268:	22c0      	movs	r2, #192	; 0xc0
    226a:	0592      	lsls	r2, r2, #22
    226c:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
    226e:	003b      	movs	r3, r7
    2270:	2224      	movs	r2, #36	; 0x24
    2272:	2104      	movs	r1, #4
    2274:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
    2276:	003b      	movs	r3, r7
    2278:	2200      	movs	r2, #0
    227a:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
    227c:	003a      	movs	r2, r7
    227e:	490d      	ldr	r1, [pc, #52]	; (22b4 <wtc6508_init+0x8c>)
    2280:	4b0d      	ldr	r3, [pc, #52]	; (22b8 <wtc6508_init+0x90>)
    2282:	0018      	movs	r0, r3
    2284:	4b0d      	ldr	r3, [pc, #52]	; (22bc <wtc6508_init+0x94>)
    2286:	4798      	blx	r3
    2288:	1e03      	subs	r3, r0, #0
    228a:	d004      	beq.n	2296 <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
    228c:	4b0c      	ldr	r3, [pc, #48]	; (22c0 <wtc6508_init+0x98>)
    228e:	0018      	movs	r0, r3
    2290:	4b0c      	ldr	r3, [pc, #48]	; (22c4 <wtc6508_init+0x9c>)
    2292:	4798      	blx	r3
    2294:	e003      	b.n	229e <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
    2296:	4b08      	ldr	r3, [pc, #32]	; (22b8 <wtc6508_init+0x90>)
    2298:	0018      	movs	r0, r3
    229a:	4b0b      	ldr	r3, [pc, #44]	; (22c8 <wtc6508_init+0xa0>)
    229c:	4798      	blx	r3
}
    229e:	46bd      	mov	sp, r7
    22a0:	b00e      	add	sp, #56	; 0x38
    22a2:	bd80      	pop	{r7, pc}
    22a4:	00002155 	.word	0x00002155
    22a8:	00080002 	.word	0x00080002
    22ac:	00090002 	.word	0x00090002
    22b0:	00003a98 	.word	0x00003a98
    22b4:	42000800 	.word	0x42000800
    22b8:	200045c8 	.word	0x200045c8
    22bc:	00009b29 	.word	0x00009b29
    22c0:	00012678 	.word	0x00012678
    22c4:	0001133d 	.word	0x0001133d
    22c8:	000021d9 	.word	0x000021d9

000022cc <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
    22cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ce:	464f      	mov	r7, r9
    22d0:	4646      	mov	r6, r8
    22d2:	b4c0      	push	{r6, r7}
    22d4:	b089      	sub	sp, #36	; 0x24
    22d6:	af00      	add	r7, sp, #0
    22d8:	60f8      	str	r0, [r7, #12]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
    22da:	2310      	movs	r3, #16
    22dc:	2208      	movs	r2, #8
    22de:	4694      	mov	ip, r2
    22e0:	44bc      	add	ip, r7
    22e2:	4463      	add	r3, ip
    22e4:	2201      	movs	r2, #1
    22e6:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
    22e8:	2310      	movs	r3, #16
    22ea:	2208      	movs	r2, #8
    22ec:	4694      	mov	ip, r2
    22ee:	44bc      	add	ip, r7
    22f0:	4463      	add	r3, ip
    22f2:	2201      	movs	r2, #1
    22f4:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
    22f6:	2310      	movs	r3, #16
    22f8:	2208      	movs	r2, #8
    22fa:	4694      	mov	ip, r2
    22fc:	44bc      	add	ip, r7
    22fe:	4463      	add	r3, ip
    2300:	2200      	movs	r2, #0
    2302:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
    2304:	2314      	movs	r3, #20
    2306:	2208      	movs	r2, #8
    2308:	4694      	mov	ip, r2
    230a:	44bc      	add	ip, r7
    230c:	4463      	add	r3, ip
    230e:	2200      	movs	r2, #0
    2310:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    2312:	2314      	movs	r3, #20
    2314:	2208      	movs	r2, #8
    2316:	4694      	mov	ip, r2
    2318:	44bc      	add	ip, r7
    231a:	4463      	add	r3, ip
    231c:	2201      	movs	r2, #1
    231e:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    2320:	2314      	movs	r3, #20
    2322:	2208      	movs	r2, #8
    2324:	4694      	mov	ip, r2
    2326:	44bc      	add	ip, r7
    2328:	4463      	add	r3, ip
    232a:	2200      	movs	r2, #0
    232c:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
    232e:	230c      	movs	r3, #12
    2330:	2208      	movs	r2, #8
    2332:	4694      	mov	ip, r2
    2334:	44bc      	add	ip, r7
    2336:	4463      	add	r3, ip
    2338:	0018      	movs	r0, r3
    233a:	4b80      	ldr	r3, [pc, #512]	; (253c <wtc6508_read+0x270>)
    233c:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    233e:	230c      	movs	r3, #12
    2340:	2208      	movs	r2, #8
    2342:	4694      	mov	ip, r2
    2344:	44bc      	add	ip, r7
    2346:	4463      	add	r3, ip
    2348:	2200      	movs	r2, #0
    234a:	705a      	strb	r2, [r3, #1]

    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    234c:	4b7c      	ldr	r3, [pc, #496]	; (2540 <wtc6508_read+0x274>)
    234e:	6818      	ldr	r0, [r3, #0]
    2350:	2301      	movs	r3, #1
    2352:	425a      	negs	r2, r3
    2354:	2300      	movs	r3, #0
    2356:	2100      	movs	r1, #0
    2358:	4c7a      	ldr	r4, [pc, #488]	; (2544 <wtc6508_read+0x278>)
    235a:	47a0      	blx	r4
    235c:	1e03      	subs	r3, r0, #0
    235e:	d101      	bne.n	2364 <wtc6508_read+0x98>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    2360:	2312      	movs	r3, #18
    2362:	e0e3      	b.n	252c <wtc6508_read+0x260>
    }

    taskENTER_CRITICAL();
    2364:	4b78      	ldr	r3, [pc, #480]	; (2548 <wtc6508_read+0x27c>)
    2366:	4798      	blx	r3

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    //vTaskSuspendAll();

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    2368:	2310      	movs	r3, #16
    236a:	2208      	movs	r2, #8
    236c:	4694      	mov	ip, r2
    236e:	44bc      	add	ip, r7
    2370:	4463      	add	r3, ip
    2372:	0019      	movs	r1, r3
    2374:	2009      	movs	r0, #9
    2376:	4b75      	ldr	r3, [pc, #468]	; (254c <wtc6508_read+0x280>)
    2378:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    237a:	2314      	movs	r3, #20
    237c:	2208      	movs	r2, #8
    237e:	4694      	mov	ip, r2
    2380:	44bc      	add	ip, r7
    2382:	4463      	add	r3, ip
    2384:	0019      	movs	r1, r3
    2386:	2008      	movs	r0, #8
    2388:	4b70      	ldr	r3, [pc, #448]	; (254c <wtc6508_read+0x280>)
    238a:	4798      	blx	r3

    // If the DI pin is already low, then the bus is still busy from the last TM1640 transaction.
    // Skip the read.
    if (!port_pin_get_input_level(WTC6508_DI_GPIO)) {
    238c:	2008      	movs	r0, #8
    238e:	4b70      	ldr	r3, [pc, #448]	; (2550 <wtc6508_read+0x284>)
    2390:	4798      	blx	r3
    2392:	0003      	movs	r3, r0
    2394:	001a      	movs	r2, r3
    2396:	2301      	movs	r3, #1
    2398:	4053      	eors	r3, r2
    239a:	b2db      	uxtb	r3, r3
    239c:	2b00      	cmp	r3, #0
    239e:	d00a      	beq.n	23b6 <wtc6508_read+0xea>
        xSemaphoreGive(display_mutex);
    23a0:	4b67      	ldr	r3, [pc, #412]	; (2540 <wtc6508_read+0x274>)
    23a2:	6818      	ldr	r0, [r3, #0]
    23a4:	2300      	movs	r3, #0
    23a6:	2200      	movs	r2, #0
    23a8:	2100      	movs	r1, #0
    23aa:	4c6a      	ldr	r4, [pc, #424]	; (2554 <wtc6508_read+0x288>)
    23ac:	47a0      	blx	r4
        taskEXIT_CRITICAL();
    23ae:	4b6a      	ldr	r3, [pc, #424]	; (2558 <wtc6508_read+0x28c>)
    23b0:	4798      	blx	r3
        return STATUS_BUSY;
    23b2:	2305      	movs	r3, #5
    23b4:	e0ba      	b.n	252c <wtc6508_read+0x260>
    }

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
    23b6:	2100      	movs	r1, #0
    23b8:	2009      	movs	r0, #9
    23ba:	4b68      	ldr	r3, [pc, #416]	; (255c <wtc6508_read+0x290>)
    23bc:	4798      	blx	r3
    delay_us(3);
    23be:	2000      	movs	r0, #0
    23c0:	4b67      	ldr	r3, [pc, #412]	; (2560 <wtc6508_read+0x294>)
    23c2:	4798      	blx	r3
    23c4:	0003      	movs	r3, r0
    23c6:	603b      	str	r3, [r7, #0]
    23c8:	2300      	movs	r3, #0
    23ca:	607b      	str	r3, [r7, #4]
    23cc:	6839      	ldr	r1, [r7, #0]
    23ce:	687a      	ldr	r2, [r7, #4]
    23d0:	000b      	movs	r3, r1
    23d2:	0014      	movs	r4, r2
    23d4:	18db      	adds	r3, r3, r3
    23d6:	4164      	adcs	r4, r4
    23d8:	185b      	adds	r3, r3, r1
    23da:	4154      	adcs	r4, r2
    23dc:	4961      	ldr	r1, [pc, #388]	; (2564 <wtc6508_read+0x298>)
    23de:	2200      	movs	r2, #0
    23e0:	185b      	adds	r3, r3, r1
    23e2:	4154      	adcs	r4, r2
    23e4:	0018      	movs	r0, r3
    23e6:	0021      	movs	r1, r4
    23e8:	4c5f      	ldr	r4, [pc, #380]	; (2568 <wtc6508_read+0x29c>)
    23ea:	4a60      	ldr	r2, [pc, #384]	; (256c <wtc6508_read+0x2a0>)
    23ec:	2300      	movs	r3, #0
    23ee:	47a0      	blx	r4
    23f0:	0003      	movs	r3, r0
    23f2:	000c      	movs	r4, r1
    23f4:	0018      	movs	r0, r3
    23f6:	4b5e      	ldr	r3, [pc, #376]	; (2570 <wtc6508_read+0x2a4>)
    23f8:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);        
    23fa:	2101      	movs	r1, #1
    23fc:	2009      	movs	r0, #9
    23fe:	4b57      	ldr	r3, [pc, #348]	; (255c <wtc6508_read+0x290>)
    2400:	4798      	blx	r3

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    2402:	230c      	movs	r3, #12
    2404:	2208      	movs	r2, #8
    2406:	4694      	mov	ip, r2
    2408:	44bc      	add	ip, r7
    240a:	4463      	add	r3, ip
    240c:	2202      	movs	r2, #2
    240e:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    2410:	230c      	movs	r3, #12
    2412:	2208      	movs	r2, #8
    2414:	4694      	mov	ip, r2
    2416:	44bc      	add	ip, r7
    2418:	4463      	add	r3, ip
    241a:	0019      	movs	r1, r3
    241c:	2008      	movs	r0, #8
    241e:	4b55      	ldr	r3, [pc, #340]	; (2574 <wtc6508_read+0x2a8>)
    2420:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    2422:	230c      	movs	r3, #12
    2424:	2208      	movs	r2, #8
    2426:	4694      	mov	ip, r2
    2428:	44bc      	add	ip, r7
    242a:	4463      	add	r3, ip
    242c:	2202      	movs	r2, #2
    242e:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
    2430:	230c      	movs	r3, #12
    2432:	2208      	movs	r2, #8
    2434:	4694      	mov	ip, r2
    2436:	44bc      	add	ip, r7
    2438:	4463      	add	r3, ip
    243a:	0019      	movs	r1, r3
    243c:	2009      	movs	r0, #9
    243e:	4b4d      	ldr	r3, [pc, #308]	; (2574 <wtc6508_read+0x2a8>)
    2440:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
    2442:	2317      	movs	r3, #23
    2444:	4699      	mov	r9, r3
    2446:	2308      	movs	r3, #8
    2448:	469c      	mov	ip, r3
    244a:	44bc      	add	ip, r7
    244c:	44e1      	add	r9, ip
    244e:	68f9      	ldr	r1, [r7, #12]
    2450:	4849      	ldr	r0, [pc, #292]	; (2578 <wtc6508_read+0x2ac>)
    2452:	2300      	movs	r3, #0
    2454:	2201      	movs	r2, #1
    2456:	4c49      	ldr	r4, [pc, #292]	; (257c <wtc6508_read+0x2b0>)
    2458:	46a0      	mov	r8, r4
    245a:	47c0      	blx	r8
    245c:	0003      	movs	r3, r0
    245e:	464a      	mov	r2, r9
    2460:	7013      	strb	r3, [r2, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    2462:	2310      	movs	r3, #16
    2464:	2208      	movs	r2, #8
    2466:	4694      	mov	ip, r2
    2468:	44bc      	add	ip, r7
    246a:	4463      	add	r3, ip
    246c:	0019      	movs	r1, r3
    246e:	2009      	movs	r0, #9
    2470:	4b36      	ldr	r3, [pc, #216]	; (254c <wtc6508_read+0x280>)
    2472:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    2474:	2314      	movs	r3, #20
    2476:	2208      	movs	r2, #8
    2478:	4694      	mov	ip, r2
    247a:	44bc      	add	ip, r7
    247c:	4463      	add	r3, ip
    247e:	0019      	movs	r1, r3
    2480:	2008      	movs	r0, #8
    2482:	4b32      	ldr	r3, [pc, #200]	; (254c <wtc6508_read+0x280>)
    2484:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
    2486:	2100      	movs	r1, #0
    2488:	2009      	movs	r0, #9
    248a:	4b34      	ldr	r3, [pc, #208]	; (255c <wtc6508_read+0x290>)
    248c:	4798      	blx	r3
    delay_us(3);
    248e:	2000      	movs	r0, #0
    2490:	4b33      	ldr	r3, [pc, #204]	; (2560 <wtc6508_read+0x294>)
    2492:	4798      	blx	r3
    2494:	0003      	movs	r3, r0
    2496:	001d      	movs	r5, r3
    2498:	2300      	movs	r3, #0
    249a:	001e      	movs	r6, r3
    249c:	002b      	movs	r3, r5
    249e:	0034      	movs	r4, r6
    24a0:	18db      	adds	r3, r3, r3
    24a2:	4164      	adcs	r4, r4
    24a4:	195b      	adds	r3, r3, r5
    24a6:	4174      	adcs	r4, r6
    24a8:	492e      	ldr	r1, [pc, #184]	; (2564 <wtc6508_read+0x298>)
    24aa:	2200      	movs	r2, #0
    24ac:	185b      	adds	r3, r3, r1
    24ae:	4154      	adcs	r4, r2
    24b0:	0018      	movs	r0, r3
    24b2:	0021      	movs	r1, r4
    24b4:	4c2c      	ldr	r4, [pc, #176]	; (2568 <wtc6508_read+0x29c>)
    24b6:	4a2d      	ldr	r2, [pc, #180]	; (256c <wtc6508_read+0x2a0>)
    24b8:	2300      	movs	r3, #0
    24ba:	47a0      	blx	r4
    24bc:	0003      	movs	r3, r0
    24be:	000c      	movs	r4, r1
    24c0:	0018      	movs	r0, r3
    24c2:	4b2b      	ldr	r3, [pc, #172]	; (2570 <wtc6508_read+0x2a4>)
    24c4:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
    24c6:	2101      	movs	r1, #1
    24c8:	2009      	movs	r0, #9
    24ca:	4b24      	ldr	r3, [pc, #144]	; (255c <wtc6508_read+0x290>)
    24cc:	4798      	blx	r3

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    24ce:	230c      	movs	r3, #12
    24d0:	2208      	movs	r2, #8
    24d2:	4694      	mov	ip, r2
    24d4:	44bc      	add	ip, r7
    24d6:	4463      	add	r3, ip
    24d8:	2202      	movs	r2, #2
    24da:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    24dc:	230c      	movs	r3, #12
    24de:	2208      	movs	r2, #8
    24e0:	4694      	mov	ip, r2
    24e2:	44bc      	add	ip, r7
    24e4:	4463      	add	r3, ip
    24e6:	0019      	movs	r1, r3
    24e8:	2008      	movs	r0, #8
    24ea:	4b22      	ldr	r3, [pc, #136]	; (2574 <wtc6508_read+0x2a8>)
    24ec:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    24ee:	230c      	movs	r3, #12
    24f0:	2208      	movs	r2, #8
    24f2:	4694      	mov	ip, r2
    24f4:	44bc      	add	ip, r7
    24f6:	4463      	add	r3, ip
    24f8:	2202      	movs	r2, #2
    24fa:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);        
    24fc:	230c      	movs	r3, #12
    24fe:	2208      	movs	r2, #8
    2500:	4694      	mov	ip, r2
    2502:	44bc      	add	ip, r7
    2504:	4463      	add	r3, ip
    2506:	0019      	movs	r1, r3
    2508:	2009      	movs	r0, #9
    250a:	4b1a      	ldr	r3, [pc, #104]	; (2574 <wtc6508_read+0x2a8>)
    250c:	4798      	blx	r3

    //xTaskResumeAll();

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
    250e:	4b0c      	ldr	r3, [pc, #48]	; (2540 <wtc6508_read+0x274>)
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	2300      	movs	r3, #0
    2514:	2200      	movs	r2, #0
    2516:	2100      	movs	r1, #0
    2518:	4c0e      	ldr	r4, [pc, #56]	; (2554 <wtc6508_read+0x288>)
    251a:	47a0      	blx	r4
    taskEXIT_CRITICAL();
    251c:	4b0e      	ldr	r3, [pc, #56]	; (2558 <wtc6508_read+0x28c>)
    251e:	4798      	blx	r3

    return ret;
    2520:	2317      	movs	r3, #23
    2522:	2208      	movs	r2, #8
    2524:	4694      	mov	ip, r2
    2526:	44bc      	add	ip, r7
    2528:	4463      	add	r3, ip
    252a:	781b      	ldrb	r3, [r3, #0]
}
    252c:	0018      	movs	r0, r3
    252e:	46bd      	mov	sp, r7
    2530:	b009      	add	sp, #36	; 0x24
    2532:	bc0c      	pop	{r2, r3}
    2534:	4690      	mov	r8, r2
    2536:	4699      	mov	r9, r3
    2538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	00001fc5 	.word	0x00001fc5
    2540:	20004604 	.word	0x20004604
    2544:	0000cac9 	.word	0x0000cac9
    2548:	0000c409 	.word	0x0000c409
    254c:	00008ded 	.word	0x00008ded
    2550:	0000209d 	.word	0x0000209d
    2554:	0000c7c9 	.word	0x0000c7c9
    2558:	0000c42d 	.word	0x0000c42d
    255c:	000020e1 	.word	0x000020e1
    2560:	0000b9ed 	.word	0x0000b9ed
    2564:	006acfbf 	.word	0x006acfbf
    2568:	000103d1 	.word	0x000103d1
    256c:	006acfc0 	.word	0x006acfc0
    2570:	20000001 	.word	0x20000001
    2574:	0000bdb1 	.word	0x0000bdb1
    2578:	200045c8 	.word	0x200045c8
    257c:	00009cb9 	.word	0x00009cb9

00002580 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2580:	b580      	push	{r7, lr}
    2582:	b084      	sub	sp, #16
    2584:	af00      	add	r7, sp, #0
    2586:	0002      	movs	r2, r0
    2588:	1dfb      	adds	r3, r7, #7
    258a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    258c:	230f      	movs	r3, #15
    258e:	18fb      	adds	r3, r7, r3
    2590:	1dfa      	adds	r2, r7, #7
    2592:	7812      	ldrb	r2, [r2, #0]
    2594:	09d2      	lsrs	r2, r2, #7
    2596:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2598:	230e      	movs	r3, #14
    259a:	18fb      	adds	r3, r7, r3
    259c:	1dfa      	adds	r2, r7, #7
    259e:	7812      	ldrb	r2, [r2, #0]
    25a0:	0952      	lsrs	r2, r2, #5
    25a2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    25a4:	4b0d      	ldr	r3, [pc, #52]	; (25dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    25a6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    25a8:	230f      	movs	r3, #15
    25aa:	18fb      	adds	r3, r7, r3
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	2b00      	cmp	r3, #0
    25b0:	d10f      	bne.n	25d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    25b2:	230f      	movs	r3, #15
    25b4:	18fb      	adds	r3, r7, r3
    25b6:	781b      	ldrb	r3, [r3, #0]
    25b8:	009b      	lsls	r3, r3, #2
    25ba:	2210      	movs	r2, #16
    25bc:	4694      	mov	ip, r2
    25be:	44bc      	add	ip, r7
    25c0:	4463      	add	r3, ip
    25c2:	3b08      	subs	r3, #8
    25c4:	681a      	ldr	r2, [r3, #0]
    25c6:	230e      	movs	r3, #14
    25c8:	18fb      	adds	r3, r7, r3
    25ca:	781b      	ldrb	r3, [r3, #0]
    25cc:	01db      	lsls	r3, r3, #7
    25ce:	18d3      	adds	r3, r2, r3
    25d0:	e000      	b.n	25d4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    25d2:	2300      	movs	r3, #0
	}
}
    25d4:	0018      	movs	r0, r3
    25d6:	46bd      	mov	sp, r7
    25d8:	b004      	add	sp, #16
    25da:	bd80      	pop	{r7, pc}
    25dc:	41004400 	.word	0x41004400

000025e0 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    25e4:	4b04      	ldr	r3, [pc, #16]	; (25f8 <system_interrupt_enable_global+0x18>)
    25e6:	2201      	movs	r2, #1
    25e8:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    25ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    25ee:	b662      	cpsie	i
}
    25f0:	46c0      	nop			; (mov r8, r8)
    25f2:	46bd      	mov	sp, r7
    25f4:	bd80      	pop	{r7, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	2000001c 	.word	0x2000001c

000025fc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    25fc:	b580      	push	{r7, lr}
    25fe:	b082      	sub	sp, #8
    2600:	af00      	add	r7, sp, #0
    2602:	0002      	movs	r2, r0
    2604:	1dfb      	adds	r3, r7, #7
    2606:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2608:	1dfb      	adds	r3, r7, #7
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	0018      	movs	r0, r3
    260e:	4b03      	ldr	r3, [pc, #12]	; (261c <port_get_group_from_gpio_pin+0x20>)
    2610:	4798      	blx	r3
    2612:	0003      	movs	r3, r0
}
    2614:	0018      	movs	r0, r3
    2616:	46bd      	mov	sp, r7
    2618:	b002      	add	sp, #8
    261a:	bd80      	pop	{r7, pc}
    261c:	00002581 	.word	0x00002581

00002620 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2620:	b580      	push	{r7, lr}
    2622:	b082      	sub	sp, #8
    2624:	af00      	add	r7, sp, #0
    2626:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2628:	687b      	ldr	r3, [r7, #4]
    262a:	2200      	movs	r2, #0
    262c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	2201      	movs	r2, #1
    2632:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2634:	687b      	ldr	r3, [r7, #4]
    2636:	2200      	movs	r2, #0
    2638:	709a      	strb	r2, [r3, #2]
}
    263a:	46c0      	nop			; (mov r8, r8)
    263c:	46bd      	mov	sp, r7
    263e:	b002      	add	sp, #8
    2640:	bd80      	pop	{r7, pc}
    2642:	46c0      	nop			; (mov r8, r8)

00002644 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2644:	b580      	push	{r7, lr}
    2646:	b084      	sub	sp, #16
    2648:	af00      	add	r7, sp, #0
    264a:	0002      	movs	r2, r0
    264c:	1dfb      	adds	r3, r7, #7
    264e:	701a      	strb	r2, [r3, #0]
    2650:	1dbb      	adds	r3, r7, #6
    2652:	1c0a      	adds	r2, r1, #0
    2654:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2656:	1dfb      	adds	r3, r7, #7
    2658:	781b      	ldrb	r3, [r3, #0]
    265a:	0018      	movs	r0, r3
    265c:	4b0d      	ldr	r3, [pc, #52]	; (2694 <port_pin_set_output_level+0x50>)
    265e:	4798      	blx	r3
    2660:	0003      	movs	r3, r0
    2662:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2664:	1dfb      	adds	r3, r7, #7
    2666:	781b      	ldrb	r3, [r3, #0]
    2668:	221f      	movs	r2, #31
    266a:	4013      	ands	r3, r2
    266c:	2201      	movs	r2, #1
    266e:	409a      	lsls	r2, r3
    2670:	0013      	movs	r3, r2
    2672:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2674:	1dbb      	adds	r3, r7, #6
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b00      	cmp	r3, #0
    267a:	d003      	beq.n	2684 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    267c:	68fb      	ldr	r3, [r7, #12]
    267e:	68ba      	ldr	r2, [r7, #8]
    2680:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2682:	e002      	b.n	268a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2684:	68fb      	ldr	r3, [r7, #12]
    2686:	68ba      	ldr	r2, [r7, #8]
    2688:	615a      	str	r2, [r3, #20]
	}
}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	46bd      	mov	sp, r7
    268e:	b004      	add	sp, #16
    2690:	bd80      	pop	{r7, pc}
    2692:	46c0      	nop			; (mov r8, r8)
    2694:	000025fd 	.word	0x000025fd

00002698 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    2698:	b580      	push	{r7, lr}
    269a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <chip_isr+0x18>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	2b00      	cmp	r3, #0
    26a2:	d002      	beq.n	26aa <chip_isr+0x12>
		gpfIsr();
    26a4:	4b02      	ldr	r3, [pc, #8]	; (26b0 <chip_isr+0x18>)
    26a6:	681b      	ldr	r3, [r3, #0]
    26a8:	4798      	blx	r3
	}
}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	200000c4 	.word	0x200000c4

000026b4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    26b4:	b580      	push	{r7, lr}
    26b6:	b082      	sub	sp, #8
    26b8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    26ba:	1d3b      	adds	r3, r7, #4
    26bc:	0018      	movs	r0, r3
    26be:	4b0c      	ldr	r3, [pc, #48]	; (26f0 <init_chip_pins+0x3c>)
    26c0:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    26c2:	1d3b      	adds	r3, r7, #4
    26c4:	2201      	movs	r2, #1
    26c6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    26c8:	1d3b      	adds	r3, r7, #4
    26ca:	0019      	movs	r1, r3
    26cc:	201b      	movs	r0, #27
    26ce:	4b09      	ldr	r3, [pc, #36]	; (26f4 <init_chip_pins+0x40>)
    26d0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    26d2:	1d3b      	adds	r3, r7, #4
    26d4:	0019      	movs	r1, r3
    26d6:	201c      	movs	r0, #28
    26d8:	4b06      	ldr	r3, [pc, #24]	; (26f4 <init_chip_pins+0x40>)
    26da:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    26dc:	1d3b      	adds	r3, r7, #4
    26de:	0019      	movs	r1, r3
    26e0:	2028      	movs	r0, #40	; 0x28
    26e2:	4b04      	ldr	r3, [pc, #16]	; (26f4 <init_chip_pins+0x40>)
    26e4:	4798      	blx	r3
}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	46bd      	mov	sp, r7
    26ea:	b002      	add	sp, #8
    26ec:	bd80      	pop	{r7, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	00002621 	.word	0x00002621
    26f4:	00008ded 	.word	0x00008ded

000026f8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    26f8:	b580      	push	{r7, lr}
    26fa:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    26fc:	4b0c      	ldr	r3, [pc, #48]	; (2730 <nm_bsp_init+0x38>)
    26fe:	2200      	movs	r2, #0
    2700:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    2702:	4b0c      	ldr	r3, [pc, #48]	; (2734 <nm_bsp_init+0x3c>)
    2704:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    2706:	4b0c      	ldr	r3, [pc, #48]	; (2738 <nm_bsp_init+0x40>)
    2708:	681b      	ldr	r3, [r3, #0]
    270a:	2201      	movs	r2, #1
    270c:	4013      	ands	r3, r2
    270e:	d004      	beq.n	271a <nm_bsp_init+0x22>
    2710:	4b09      	ldr	r3, [pc, #36]	; (2738 <nm_bsp_init+0x40>)
    2712:	681b      	ldr	r3, [r3, #0]
    2714:	2202      	movs	r2, #2
    2716:	4013      	ands	r3, r2
    2718:	d101      	bne.n	271e <nm_bsp_init+0x26>
	    delay_init();
    271a:	4b08      	ldr	r3, [pc, #32]	; (273c <nm_bsp_init+0x44>)
    271c:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    271e:	4b08      	ldr	r3, [pc, #32]	; (2740 <nm_bsp_init+0x48>)
    2720:	4798      	blx	r3

	system_interrupt_enable_global();
    2722:	4b08      	ldr	r3, [pc, #32]	; (2744 <nm_bsp_init+0x4c>)
    2724:	4798      	blx	r3

	return M2M_SUCCESS;
    2726:	2300      	movs	r3, #0
}
    2728:	0018      	movs	r0, r3
    272a:	46bd      	mov	sp, r7
    272c:	bd80      	pop	{r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	200000c4 	.word	0x200000c4
    2734:	000026b5 	.word	0x000026b5
    2738:	e000e010 	.word	0xe000e010
    273c:	00000115 	.word	0x00000115
    2740:	00002749 	.word	0x00002749
    2744:	000025e1 	.word	0x000025e1

00002748 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    2748:	b580      	push	{r7, lr}
    274a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    274c:	2100      	movs	r1, #0
    274e:	201c      	movs	r0, #28
    2750:	4b0c      	ldr	r3, [pc, #48]	; (2784 <nm_bsp_reset+0x3c>)
    2752:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    2754:	2100      	movs	r1, #0
    2756:	201b      	movs	r0, #27
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <nm_bsp_reset+0x3c>)
    275a:	4798      	blx	r3
	nm_bsp_sleep(100);
    275c:	2064      	movs	r0, #100	; 0x64
    275e:	4b0a      	ldr	r3, [pc, #40]	; (2788 <nm_bsp_reset+0x40>)
    2760:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    2762:	2101      	movs	r1, #1
    2764:	201c      	movs	r0, #28
    2766:	4b07      	ldr	r3, [pc, #28]	; (2784 <nm_bsp_reset+0x3c>)
    2768:	4798      	blx	r3
	nm_bsp_sleep(10);
    276a:	200a      	movs	r0, #10
    276c:	4b06      	ldr	r3, [pc, #24]	; (2788 <nm_bsp_reset+0x40>)
    276e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    2770:	2101      	movs	r1, #1
    2772:	201b      	movs	r0, #27
    2774:	4b03      	ldr	r3, [pc, #12]	; (2784 <nm_bsp_reset+0x3c>)
    2776:	4798      	blx	r3
	nm_bsp_sleep(10);
    2778:	200a      	movs	r0, #10
    277a:	4b03      	ldr	r3, [pc, #12]	; (2788 <nm_bsp_reset+0x40>)
    277c:	4798      	blx	r3
}
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	46bd      	mov	sp, r7
    2782:	bd80      	pop	{r7, pc}
    2784:	00002645 	.word	0x00002645
    2788:	0000278d 	.word	0x0000278d

0000278c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    278c:	b5f0      	push	{r4, r5, r6, r7, lr}
    278e:	b083      	sub	sp, #12
    2790:	af00      	add	r7, sp, #0
    2792:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    2794:	e015      	b.n	27c2 <nm_bsp_sleep+0x36>
		delay_ms(1);
    2796:	2000      	movs	r0, #0
    2798:	4b0e      	ldr	r3, [pc, #56]	; (27d4 <nm_bsp_sleep+0x48>)
    279a:	4798      	blx	r3
    279c:	0003      	movs	r3, r0
    279e:	001d      	movs	r5, r3
    27a0:	2300      	movs	r3, #0
    27a2:	001e      	movs	r6, r3
    27a4:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <nm_bsp_sleep+0x4c>)
    27a6:	2400      	movs	r4, #0
    27a8:	195b      	adds	r3, r3, r5
    27aa:	4174      	adcs	r4, r6
    27ac:	0018      	movs	r0, r3
    27ae:	0021      	movs	r1, r4
    27b0:	4c0a      	ldr	r4, [pc, #40]	; (27dc <nm_bsp_sleep+0x50>)
    27b2:	4a0b      	ldr	r2, [pc, #44]	; (27e0 <nm_bsp_sleep+0x54>)
    27b4:	2300      	movs	r3, #0
    27b6:	47a0      	blx	r4
    27b8:	0003      	movs	r3, r0
    27ba:	000c      	movs	r4, r1
    27bc:	0018      	movs	r0, r3
    27be:	4b09      	ldr	r3, [pc, #36]	; (27e4 <nm_bsp_sleep+0x58>)
    27c0:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    27c2:	687b      	ldr	r3, [r7, #4]
    27c4:	1e5a      	subs	r2, r3, #1
    27c6:	607a      	str	r2, [r7, #4]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d1e4      	bne.n	2796 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    27cc:	46c0      	nop			; (mov r8, r8)
    27ce:	46bd      	mov	sp, r7
    27d0:	b003      	add	sp, #12
    27d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27d4:	0000b9ed 	.word	0x0000b9ed
    27d8:	00001b57 	.word	0x00001b57
    27dc:	000103d1 	.word	0x000103d1
    27e0:	00001b58 	.word	0x00001b58
    27e4:	20000001 	.word	0x20000001

000027e8 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b086      	sub	sp, #24
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    27f0:	4b15      	ldr	r3, [pc, #84]	; (2848 <nm_bsp_register_isr+0x60>)
    27f2:	687a      	ldr	r2, [r7, #4]
    27f4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    27f6:	230c      	movs	r3, #12
    27f8:	18fb      	adds	r3, r7, r3
    27fa:	0018      	movs	r0, r3
    27fc:	4b13      	ldr	r3, [pc, #76]	; (284c <nm_bsp_register_isr+0x64>)
    27fe:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    2800:	230c      	movs	r3, #12
    2802:	18fb      	adds	r3, r7, r3
    2804:	2229      	movs	r2, #41	; 0x29
    2806:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    2808:	230c      	movs	r3, #12
    280a:	18fb      	adds	r3, r7, r3
    280c:	2200      	movs	r2, #0
    280e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    2810:	230c      	movs	r3, #12
    2812:	18fb      	adds	r3, r7, r3
    2814:	2201      	movs	r2, #1
    2816:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    2818:	230c      	movs	r3, #12
    281a:	18fb      	adds	r3, r7, r3
    281c:	2202      	movs	r2, #2
    281e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    2820:	230c      	movs	r3, #12
    2822:	18fb      	adds	r3, r7, r3
    2824:	0019      	movs	r1, r3
    2826:	2009      	movs	r0, #9
    2828:	4b09      	ldr	r3, [pc, #36]	; (2850 <nm_bsp_register_isr+0x68>)
    282a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    282c:	4b09      	ldr	r3, [pc, #36]	; (2854 <nm_bsp_register_isr+0x6c>)
    282e:	2200      	movs	r2, #0
    2830:	2109      	movs	r1, #9
    2832:	0018      	movs	r0, r3
    2834:	4b08      	ldr	r3, [pc, #32]	; (2858 <nm_bsp_register_isr+0x70>)
    2836:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    2838:	2100      	movs	r1, #0
    283a:	2009      	movs	r0, #9
    283c:	4b07      	ldr	r3, [pc, #28]	; (285c <nm_bsp_register_isr+0x74>)
    283e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    2840:	46c0      	nop			; (mov r8, r8)
    2842:	46bd      	mov	sp, r7
    2844:	b006      	add	sp, #24
    2846:	bd80      	pop	{r7, pc}
    2848:	200000c4 	.word	0x200000c4
    284c:	00008c95 	.word	0x00008c95
    2850:	00008cc9 	.word	0x00008cc9
    2854:	00002699 	.word	0x00002699
    2858:	00008895 	.word	0x00008895
    285c:	000088f9 	.word	0x000088f9

00002860 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    2860:	b580      	push	{r7, lr}
    2862:	b082      	sub	sp, #8
    2864:	af00      	add	r7, sp, #0
    2866:	0002      	movs	r2, r0
    2868:	1dfb      	adds	r3, r7, #7
    286a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    286c:	1dfb      	adds	r3, r7, #7
    286e:	781b      	ldrb	r3, [r3, #0]
    2870:	2b00      	cmp	r3, #0
    2872:	d004      	beq.n	287e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    2874:	2100      	movs	r1, #0
    2876:	2009      	movs	r0, #9
    2878:	4b05      	ldr	r3, [pc, #20]	; (2890 <nm_bsp_interrupt_ctrl+0x30>)
    287a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    287c:	e003      	b.n	2886 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    287e:	2100      	movs	r1, #0
    2880:	2009      	movs	r0, #9
    2882:	4b04      	ldr	r3, [pc, #16]	; (2894 <nm_bsp_interrupt_ctrl+0x34>)
    2884:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	46bd      	mov	sp, r7
    288a:	b002      	add	sp, #8
    288c:	bd80      	pop	{r7, pc}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	000088f9 	.word	0x000088f9
    2894:	00008941 	.word	0x00008941

00002898 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2898:	b580      	push	{r7, lr}
    289a:	b084      	sub	sp, #16
    289c:	af00      	add	r7, sp, #0
    289e:	0002      	movs	r2, r0
    28a0:	1dfb      	adds	r3, r7, #7
    28a2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    28a4:	230f      	movs	r3, #15
    28a6:	18fb      	adds	r3, r7, r3
    28a8:	1dfa      	adds	r2, r7, #7
    28aa:	7812      	ldrb	r2, [r2, #0]
    28ac:	09d2      	lsrs	r2, r2, #7
    28ae:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    28b0:	230e      	movs	r3, #14
    28b2:	18fb      	adds	r3, r7, r3
    28b4:	1dfa      	adds	r2, r7, #7
    28b6:	7812      	ldrb	r2, [r2, #0]
    28b8:	0952      	lsrs	r2, r2, #5
    28ba:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    28bc:	4b0d      	ldr	r3, [pc, #52]	; (28f4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    28be:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    28c0:	230f      	movs	r3, #15
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	781b      	ldrb	r3, [r3, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d10f      	bne.n	28ea <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    28ca:	230f      	movs	r3, #15
    28cc:	18fb      	adds	r3, r7, r3
    28ce:	781b      	ldrb	r3, [r3, #0]
    28d0:	009b      	lsls	r3, r3, #2
    28d2:	2210      	movs	r2, #16
    28d4:	4694      	mov	ip, r2
    28d6:	44bc      	add	ip, r7
    28d8:	4463      	add	r3, ip
    28da:	3b08      	subs	r3, #8
    28dc:	681a      	ldr	r2, [r3, #0]
    28de:	230e      	movs	r3, #14
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	781b      	ldrb	r3, [r3, #0]
    28e4:	01db      	lsls	r3, r3, #7
    28e6:	18d3      	adds	r3, r2, r3
    28e8:	e000      	b.n	28ec <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    28ea:	2300      	movs	r3, #0
	}
}
    28ec:	0018      	movs	r0, r3
    28ee:	46bd      	mov	sp, r7
    28f0:	b004      	add	sp, #16
    28f2:	bd80      	pop	{r7, pc}
    28f4:	41004400 	.word	0x41004400

000028f8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b082      	sub	sp, #8
    28fc:	af00      	add	r7, sp, #0
    28fe:	0002      	movs	r2, r0
    2900:	1dfb      	adds	r3, r7, #7
    2902:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2904:	4b06      	ldr	r3, [pc, #24]	; (2920 <system_interrupt_enable+0x28>)
    2906:	1dfa      	adds	r2, r7, #7
    2908:	7812      	ldrb	r2, [r2, #0]
    290a:	0011      	movs	r1, r2
    290c:	221f      	movs	r2, #31
    290e:	400a      	ands	r2, r1
    2910:	2101      	movs	r1, #1
    2912:	4091      	lsls	r1, r2
    2914:	000a      	movs	r2, r1
    2916:	601a      	str	r2, [r3, #0]
}
    2918:	46c0      	nop			; (mov r8, r8)
    291a:	46bd      	mov	sp, r7
    291c:	b002      	add	sp, #8
    291e:	bd80      	pop	{r7, pc}
    2920:	e000e100 	.word	0xe000e100

00002924 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    2924:	b580      	push	{r7, lr}
    2926:	b082      	sub	sp, #8
    2928:	af00      	add	r7, sp, #0
    292a:	0002      	movs	r2, r0
    292c:	1dfb      	adds	r3, r7, #7
    292e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2930:	4a07      	ldr	r2, [pc, #28]	; (2950 <system_interrupt_disable+0x2c>)
    2932:	1dfb      	adds	r3, r7, #7
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	0019      	movs	r1, r3
    2938:	231f      	movs	r3, #31
    293a:	400b      	ands	r3, r1
    293c:	2101      	movs	r1, #1
    293e:	4099      	lsls	r1, r3
    2940:	000b      	movs	r3, r1
    2942:	0019      	movs	r1, r3
    2944:	2380      	movs	r3, #128	; 0x80
    2946:	50d1      	str	r1, [r2, r3]
}
    2948:	46c0      	nop			; (mov r8, r8)
    294a:	46bd      	mov	sp, r7
    294c:	b002      	add	sp, #8
    294e:	bd80      	pop	{r7, pc}
    2950:	e000e100 	.word	0xe000e100

00002954 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2954:	b580      	push	{r7, lr}
    2956:	b082      	sub	sp, #8
    2958:	af00      	add	r7, sp, #0
    295a:	0002      	movs	r2, r0
    295c:	1dfb      	adds	r3, r7, #7
    295e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2960:	1dfb      	adds	r3, r7, #7
    2962:	781b      	ldrb	r3, [r3, #0]
    2964:	0018      	movs	r0, r3
    2966:	4b03      	ldr	r3, [pc, #12]	; (2974 <port_get_group_from_gpio_pin+0x20>)
    2968:	4798      	blx	r3
    296a:	0003      	movs	r3, r0
}
    296c:	0018      	movs	r0, r3
    296e:	46bd      	mov	sp, r7
    2970:	b002      	add	sp, #8
    2972:	bd80      	pop	{r7, pc}
    2974:	00002899 	.word	0x00002899

00002978 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    2978:	b580      	push	{r7, lr}
    297a:	b082      	sub	sp, #8
    297c:	af00      	add	r7, sp, #0
    297e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	2200      	movs	r2, #0
    2984:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2986:	687b      	ldr	r3, [r7, #4]
    2988:	2201      	movs	r2, #1
    298a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	2200      	movs	r2, #0
    2990:	709a      	strb	r2, [r3, #2]
}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	46bd      	mov	sp, r7
    2996:	b002      	add	sp, #8
    2998:	bd80      	pop	{r7, pc}
    299a:	46c0      	nop			; (mov r8, r8)

0000299c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    299c:	b580      	push	{r7, lr}
    299e:	b084      	sub	sp, #16
    29a0:	af00      	add	r7, sp, #0
    29a2:	0002      	movs	r2, r0
    29a4:	1dfb      	adds	r3, r7, #7
    29a6:	701a      	strb	r2, [r3, #0]
    29a8:	1dbb      	adds	r3, r7, #6
    29aa:	1c0a      	adds	r2, r1, #0
    29ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    29ae:	1dfb      	adds	r3, r7, #7
    29b0:	781b      	ldrb	r3, [r3, #0]
    29b2:	0018      	movs	r0, r3
    29b4:	4b0d      	ldr	r3, [pc, #52]	; (29ec <port_pin_set_output_level+0x50>)
    29b6:	4798      	blx	r3
    29b8:	0003      	movs	r3, r0
    29ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    29bc:	1dfb      	adds	r3, r7, #7
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	221f      	movs	r2, #31
    29c2:	4013      	ands	r3, r2
    29c4:	2201      	movs	r2, #1
    29c6:	409a      	lsls	r2, r3
    29c8:	0013      	movs	r3, r2
    29ca:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    29cc:	1dbb      	adds	r3, r7, #6
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	2b00      	cmp	r3, #0
    29d2:	d003      	beq.n	29dc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    29d4:	68fb      	ldr	r3, [r7, #12]
    29d6:	68ba      	ldr	r2, [r7, #8]
    29d8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    29da:	e002      	b.n	29e2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    29dc:	68fb      	ldr	r3, [r7, #12]
    29de:	68ba      	ldr	r2, [r7, #8]
    29e0:	615a      	str	r2, [r3, #20]
	}
}
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	46bd      	mov	sp, r7
    29e6:	b004      	add	sp, #16
    29e8:	bd80      	pop	{r7, pc}
    29ea:	46c0      	nop			; (mov r8, r8)
    29ec:	00002955 	.word	0x00002955

000029f0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b084      	sub	sp, #16
    29f4:	af00      	add	r7, sp, #0
    29f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    29f8:	687b      	ldr	r3, [r7, #4]
    29fa:	681b      	ldr	r3, [r3, #0]
    29fc:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    29fe:	68fb      	ldr	r3, [r7, #12]
    2a00:	69db      	ldr	r3, [r3, #28]
    2a02:	1e5a      	subs	r2, r3, #1
    2a04:	4193      	sbcs	r3, r2
    2a06:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2a08:	0018      	movs	r0, r3
    2a0a:	46bd      	mov	sp, r7
    2a0c:	b004      	add	sp, #16
    2a0e:	bd80      	pop	{r7, pc}

00002a10 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2a10:	b580      	push	{r7, lr}
    2a12:	b082      	sub	sp, #8
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	2201      	movs	r2, #1
    2a1c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	2200      	movs	r2, #0
    2a22:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	2200      	movs	r2, #0
    2a28:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2a2a:	687b      	ldr	r3, [r7, #4]
    2a2c:	22c0      	movs	r2, #192	; 0xc0
    2a2e:	0392      	lsls	r2, r2, #14
    2a30:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2a32:	687b      	ldr	r3, [r7, #4]
    2a34:	2200      	movs	r2, #0
    2a36:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2a38:	687b      	ldr	r3, [r7, #4]
    2a3a:	2200      	movs	r2, #0
    2a3c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2a3e:	687b      	ldr	r3, [r7, #4]
    2a40:	2201      	movs	r2, #1
    2a42:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2a44:	687b      	ldr	r3, [r7, #4]
    2a46:	2201      	movs	r2, #1
    2a48:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2a4a:	687b      	ldr	r3, [r7, #4]
    2a4c:	2200      	movs	r2, #0
    2a4e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	2224      	movs	r2, #36	; 0x24
    2a54:	2100      	movs	r1, #0
    2a56:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2a58:	687b      	ldr	r3, [r7, #4]
    2a5a:	3318      	adds	r3, #24
    2a5c:	220c      	movs	r2, #12
    2a5e:	2100      	movs	r1, #0
    2a60:	0018      	movs	r0, r3
    2a62:	4b0a      	ldr	r3, [pc, #40]	; (2a8c <spi_get_config_defaults+0x7c>)
    2a64:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2a66:	687b      	ldr	r3, [r7, #4]
    2a68:	4a09      	ldr	r2, [pc, #36]	; (2a90 <spi_get_config_defaults+0x80>)
    2a6a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	2200      	movs	r2, #0
    2a70:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2a72:	687b      	ldr	r3, [r7, #4]
    2a74:	2200      	movs	r2, #0
    2a76:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	2200      	movs	r2, #0
    2a7c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	2200      	movs	r2, #0
    2a82:	635a      	str	r2, [r3, #52]	; 0x34

};
    2a84:	46c0      	nop			; (mov r8, r8)
    2a86:	46bd      	mov	sp, r7
    2a88:	b002      	add	sp, #8
    2a8a:	bd80      	pop	{r7, pc}
    2a8c:	00010c67 	.word	0x00010c67
    2a90:	000186a0 	.word	0x000186a0

00002a94 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	220a      	movs	r2, #10
    2aa0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	2200      	movs	r2, #0
    2aa6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2aa8:	687b      	ldr	r3, [r7, #4]
    2aaa:	2200      	movs	r2, #0
    2aac:	709a      	strb	r2, [r3, #2]
}
    2aae:	46c0      	nop			; (mov r8, r8)
    2ab0:	46bd      	mov	sp, r7
    2ab2:	b002      	add	sp, #8
    2ab4:	bd80      	pop	{r7, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)

00002ab8 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2ab8:	b580      	push	{r7, lr}
    2aba:	b084      	sub	sp, #16
    2abc:	af00      	add	r7, sp, #0
    2abe:	6078      	str	r0, [r7, #4]
    2ac0:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2ac2:	683b      	ldr	r3, [r7, #0]
    2ac4:	781a      	ldrb	r2, [r3, #0]
    2ac6:	687b      	ldr	r3, [r7, #4]
    2ac8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2aca:	683b      	ldr	r3, [r7, #0]
    2acc:	785a      	ldrb	r2, [r3, #1]
    2ace:	687b      	ldr	r3, [r7, #4]
    2ad0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2ad2:	683b      	ldr	r3, [r7, #0]
    2ad4:	789a      	ldrb	r2, [r3, #2]
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2ada:	230c      	movs	r3, #12
    2adc:	18fb      	adds	r3, r7, r3
    2ade:	0018      	movs	r0, r3
    2ae0:	4b0b      	ldr	r3, [pc, #44]	; (2b10 <spi_attach_slave+0x58>)
    2ae2:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2ae4:	230c      	movs	r3, #12
    2ae6:	18fb      	adds	r3, r7, r3
    2ae8:	2201      	movs	r2, #1
    2aea:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	781b      	ldrb	r3, [r3, #0]
    2af0:	220c      	movs	r2, #12
    2af2:	18ba      	adds	r2, r7, r2
    2af4:	0011      	movs	r1, r2
    2af6:	0018      	movs	r0, r3
    2af8:	4b06      	ldr	r3, [pc, #24]	; (2b14 <spi_attach_slave+0x5c>)
    2afa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2afc:	687b      	ldr	r3, [r7, #4]
    2afe:	781b      	ldrb	r3, [r3, #0]
    2b00:	2101      	movs	r1, #1
    2b02:	0018      	movs	r0, r3
    2b04:	4b04      	ldr	r3, [pc, #16]	; (2b18 <spi_attach_slave+0x60>)
    2b06:	4798      	blx	r3
}
    2b08:	46c0      	nop			; (mov r8, r8)
    2b0a:	46bd      	mov	sp, r7
    2b0c:	b004      	add	sp, #16
    2b0e:	bd80      	pop	{r7, pc}
    2b10:	00002979 	.word	0x00002979
    2b14:	00008ded 	.word	0x00008ded
    2b18:	0000299d 	.word	0x0000299d

00002b1c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b084      	sub	sp, #16
    2b20:	af00      	add	r7, sp, #0
    2b22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b24:	687b      	ldr	r3, [r7, #4]
    2b26:	681b      	ldr	r3, [r3, #0]
    2b28:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2b2a:	687b      	ldr	r3, [r7, #4]
    2b2c:	681b      	ldr	r3, [r3, #0]
    2b2e:	0018      	movs	r0, r3
    2b30:	4b0b      	ldr	r3, [pc, #44]	; (2b60 <spi_enable+0x44>)
    2b32:	4798      	blx	r3
    2b34:	0003      	movs	r3, r0
    2b36:	0018      	movs	r0, r3
    2b38:	4b0a      	ldr	r3, [pc, #40]	; (2b64 <spi_enable+0x48>)
    2b3a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2b3c:	46c0      	nop			; (mov r8, r8)
    2b3e:	687b      	ldr	r3, [r7, #4]
    2b40:	0018      	movs	r0, r3
    2b42:	4b09      	ldr	r3, [pc, #36]	; (2b68 <spi_enable+0x4c>)
    2b44:	4798      	blx	r3
    2b46:	1e03      	subs	r3, r0, #0
    2b48:	d1f9      	bne.n	2b3e <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2b4a:	68fb      	ldr	r3, [r7, #12]
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	2202      	movs	r2, #2
    2b50:	431a      	orrs	r2, r3
    2b52:	68fb      	ldr	r3, [r7, #12]
    2b54:	601a      	str	r2, [r3, #0]
}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	46bd      	mov	sp, r7
    2b5a:	b004      	add	sp, #16
    2b5c:	bd80      	pop	{r7, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	00009589 	.word	0x00009589
    2b64:	000028f9 	.word	0x000028f9
    2b68:	000029f1 	.word	0x000029f1

00002b6c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    2b6c:	b580      	push	{r7, lr}
    2b6e:	b084      	sub	sp, #16
    2b70:	af00      	add	r7, sp, #0
    2b72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	681b      	ldr	r3, [r3, #0]
    2b78:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2b7a:	687b      	ldr	r3, [r7, #4]
    2b7c:	681b      	ldr	r3, [r3, #0]
    2b7e:	0018      	movs	r0, r3
    2b80:	4b0e      	ldr	r3, [pc, #56]	; (2bbc <spi_disable+0x50>)
    2b82:	4798      	blx	r3
    2b84:	0003      	movs	r3, r0
    2b86:	0018      	movs	r0, r3
    2b88:	4b0d      	ldr	r3, [pc, #52]	; (2bc0 <spi_disable+0x54>)
    2b8a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2b8c:	46c0      	nop			; (mov r8, r8)
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	0018      	movs	r0, r3
    2b92:	4b0c      	ldr	r3, [pc, #48]	; (2bc4 <spi_disable+0x58>)
    2b94:	4798      	blx	r3
    2b96:	1e03      	subs	r3, r0, #0
    2b98:	d1f9      	bne.n	2b8e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2b9a:	68fb      	ldr	r3, [r7, #12]
    2b9c:	228f      	movs	r2, #143	; 0x8f
    2b9e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2ba0:	68fb      	ldr	r3, [r7, #12]
    2ba2:	228f      	movs	r2, #143	; 0x8f
    2ba4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2ba6:	68fb      	ldr	r3, [r7, #12]
    2ba8:	681b      	ldr	r3, [r3, #0]
    2baa:	2202      	movs	r2, #2
    2bac:	4393      	bics	r3, r2
    2bae:	001a      	movs	r2, r3
    2bb0:	68fb      	ldr	r3, [r7, #12]
    2bb2:	601a      	str	r2, [r3, #0]
}
    2bb4:	46c0      	nop			; (mov r8, r8)
    2bb6:	46bd      	mov	sp, r7
    2bb8:	b004      	add	sp, #16
    2bba:	bd80      	pop	{r7, pc}
    2bbc:	00009589 	.word	0x00009589
    2bc0:	00002925 	.word	0x00002925
    2bc4:	000029f1 	.word	0x000029f1

00002bc8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2bc8:	b580      	push	{r7, lr}
    2bca:	b084      	sub	sp, #16
    2bcc:	af00      	add	r7, sp, #0
    2bce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	681b      	ldr	r3, [r3, #0]
    2bd4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2bd6:	68fb      	ldr	r3, [r7, #12]
    2bd8:	7e1b      	ldrb	r3, [r3, #24]
    2bda:	b2db      	uxtb	r3, r3
    2bdc:	001a      	movs	r2, r3
    2bde:	2302      	movs	r3, #2
    2be0:	4013      	ands	r3, r2
    2be2:	1e5a      	subs	r2, r3, #1
    2be4:	4193      	sbcs	r3, r2
    2be6:	b2db      	uxtb	r3, r3
}
    2be8:	0018      	movs	r0, r3
    2bea:	46bd      	mov	sp, r7
    2bec:	b004      	add	sp, #16
    2bee:	bd80      	pop	{r7, pc}

00002bf0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2bf0:	b580      	push	{r7, lr}
    2bf2:	b084      	sub	sp, #16
    2bf4:	af00      	add	r7, sp, #0
    2bf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2bf8:	687b      	ldr	r3, [r7, #4]
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2bfe:	68fb      	ldr	r3, [r7, #12]
    2c00:	7e1b      	ldrb	r3, [r3, #24]
    2c02:	b2db      	uxtb	r3, r3
    2c04:	001a      	movs	r2, r3
    2c06:	2301      	movs	r3, #1
    2c08:	4013      	ands	r3, r2
    2c0a:	1e5a      	subs	r2, r3, #1
    2c0c:	4193      	sbcs	r3, r2
    2c0e:	b2db      	uxtb	r3, r3
}
    2c10:	0018      	movs	r0, r3
    2c12:	46bd      	mov	sp, r7
    2c14:	b004      	add	sp, #16
    2c16:	bd80      	pop	{r7, pc}

00002c18 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b084      	sub	sp, #16
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c20:	687b      	ldr	r3, [r7, #4]
    2c22:	681b      	ldr	r3, [r3, #0]
    2c24:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c26:	68fb      	ldr	r3, [r7, #12]
    2c28:	7e1b      	ldrb	r3, [r3, #24]
    2c2a:	b2db      	uxtb	r3, r3
    2c2c:	001a      	movs	r2, r3
    2c2e:	2304      	movs	r3, #4
    2c30:	4013      	ands	r3, r2
    2c32:	1e5a      	subs	r2, r3, #1
    2c34:	4193      	sbcs	r3, r2
    2c36:	b2db      	uxtb	r3, r3
}
    2c38:	0018      	movs	r0, r3
    2c3a:	46bd      	mov	sp, r7
    2c3c:	b004      	add	sp, #16
    2c3e:	bd80      	pop	{r7, pc}

00002c40 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b084      	sub	sp, #16
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
    2c48:	000a      	movs	r2, r1
    2c4a:	1cbb      	adds	r3, r7, #2
    2c4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c4e:	687b      	ldr	r3, [r7, #4]
    2c50:	681b      	ldr	r3, [r3, #0]
    2c52:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	0018      	movs	r0, r3
    2c58:	4b0a      	ldr	r3, [pc, #40]	; (2c84 <spi_write+0x44>)
    2c5a:	4798      	blx	r3
    2c5c:	0003      	movs	r3, r0
    2c5e:	001a      	movs	r2, r3
    2c60:	2301      	movs	r3, #1
    2c62:	4053      	eors	r3, r2
    2c64:	b2db      	uxtb	r3, r3
    2c66:	2b00      	cmp	r3, #0
    2c68:	d001      	beq.n	2c6e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2c6a:	2305      	movs	r3, #5
    2c6c:	e006      	b.n	2c7c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2c6e:	1cbb      	adds	r3, r7, #2
    2c70:	881b      	ldrh	r3, [r3, #0]
    2c72:	05db      	lsls	r3, r3, #23
    2c74:	0dda      	lsrs	r2, r3, #23
    2c76:	68fb      	ldr	r3, [r7, #12]
    2c78:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2c7a:	2300      	movs	r3, #0
}
    2c7c:	0018      	movs	r0, r3
    2c7e:	46bd      	mov	sp, r7
    2c80:	b004      	add	sp, #16
    2c82:	bd80      	pop	{r7, pc}
    2c84:	00002bf1 	.word	0x00002bf1

00002c88 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2c88:	b580      	push	{r7, lr}
    2c8a:	b084      	sub	sp, #16
    2c8c:	af00      	add	r7, sp, #0
    2c8e:	6078      	str	r0, [r7, #4]
    2c90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2c92:	687b      	ldr	r3, [r7, #4]
    2c94:	681b      	ldr	r3, [r3, #0]
    2c96:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	0018      	movs	r0, r3
    2c9c:	4b1b      	ldr	r3, [pc, #108]	; (2d0c <spi_read+0x84>)
    2c9e:	4798      	blx	r3
    2ca0:	0003      	movs	r3, r0
    2ca2:	001a      	movs	r2, r3
    2ca4:	2301      	movs	r3, #1
    2ca6:	4053      	eors	r3, r2
    2ca8:	b2db      	uxtb	r3, r3
    2caa:	2b00      	cmp	r3, #0
    2cac:	d001      	beq.n	2cb2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2cae:	2310      	movs	r3, #16
    2cb0:	e027      	b.n	2d02 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    2cb2:	230f      	movs	r3, #15
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	2200      	movs	r2, #0
    2cb8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2cba:	68bb      	ldr	r3, [r7, #8]
    2cbc:	8b5b      	ldrh	r3, [r3, #26]
    2cbe:	b29b      	uxth	r3, r3
    2cc0:	001a      	movs	r2, r3
    2cc2:	2304      	movs	r3, #4
    2cc4:	4013      	ands	r3, r2
    2cc6:	d006      	beq.n	2cd6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2cc8:	230f      	movs	r3, #15
    2cca:	18fb      	adds	r3, r7, r3
    2ccc:	221e      	movs	r2, #30
    2cce:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2cd0:	68bb      	ldr	r3, [r7, #8]
    2cd2:	2204      	movs	r2, #4
    2cd4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2cd6:	687b      	ldr	r3, [r7, #4]
    2cd8:	799b      	ldrb	r3, [r3, #6]
    2cda:	2b01      	cmp	r3, #1
    2cdc:	d108      	bne.n	2cf0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2cde:	68bb      	ldr	r3, [r7, #8]
    2ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ce2:	b29b      	uxth	r3, r3
    2ce4:	05db      	lsls	r3, r3, #23
    2ce6:	0ddb      	lsrs	r3, r3, #23
    2ce8:	b29a      	uxth	r2, r3
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	801a      	strh	r2, [r3, #0]
    2cee:	e005      	b.n	2cfc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2cf0:	68bb      	ldr	r3, [r7, #8]
    2cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cf4:	b2db      	uxtb	r3, r3
    2cf6:	b29a      	uxth	r2, r3
    2cf8:	683b      	ldr	r3, [r7, #0]
    2cfa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    2cfc:	230f      	movs	r3, #15
    2cfe:	18fb      	adds	r3, r7, r3
    2d00:	781b      	ldrb	r3, [r3, #0]
}
    2d02:	0018      	movs	r0, r3
    2d04:	46bd      	mov	sp, r7
    2d06:	b004      	add	sp, #16
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	00002c19 	.word	0x00002c19

00002d10 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    2d10:	b580      	push	{r7, lr}
    2d12:	b086      	sub	sp, #24
    2d14:	af00      	add	r7, sp, #0
    2d16:	60f8      	str	r0, [r7, #12]
    2d18:	60b9      	str	r1, [r7, #8]
    2d1a:	1dbb      	adds	r3, r7, #6
    2d1c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    2d1e:	2313      	movs	r3, #19
    2d20:	18fb      	adds	r3, r7, r3
    2d22:	2200      	movs	r2, #0
    2d24:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    2d26:	2317      	movs	r3, #23
    2d28:	18fb      	adds	r3, r7, r3
    2d2a:	2200      	movs	r2, #0
    2d2c:	701a      	strb	r2, [r3, #0]
    2d2e:	2316      	movs	r3, #22
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	2200      	movs	r2, #0
    2d34:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    2d36:	2314      	movs	r3, #20
    2d38:	18fb      	adds	r3, r7, r3
    2d3a:	2200      	movs	r2, #0
    2d3c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    2d3e:	2310      	movs	r3, #16
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	2200      	movs	r2, #0
    2d44:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    2d46:	68fb      	ldr	r3, [r7, #12]
    2d48:	2b00      	cmp	r3, #0
    2d4a:	d107      	bne.n	2d5c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    2d4c:	2313      	movs	r3, #19
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    2d52:	2317      	movs	r3, #23
    2d54:	18fb      	adds	r3, r7, r3
    2d56:	2201      	movs	r2, #1
    2d58:	701a      	strb	r2, [r3, #0]
    2d5a:	e00d      	b.n	2d78 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    2d5c:	68bb      	ldr	r3, [r7, #8]
    2d5e:	2b00      	cmp	r3, #0
    2d60:	d107      	bne.n	2d72 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    2d62:	2313      	movs	r3, #19
    2d64:	18fb      	adds	r3, r7, r3
    2d66:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    2d68:	2316      	movs	r3, #22
    2d6a:	18fb      	adds	r3, r7, r3
    2d6c:	2201      	movs	r2, #1
    2d6e:	701a      	strb	r2, [r3, #0]
    2d70:	e002      	b.n	2d78 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    2d72:	2306      	movs	r3, #6
    2d74:	425b      	negs	r3, r3
    2d76:	e06a      	b.n	2e4e <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    2d78:	4937      	ldr	r1, [pc, #220]	; (2e58 <spi_rw+0x148>)
    2d7a:	4b38      	ldr	r3, [pc, #224]	; (2e5c <spi_rw+0x14c>)
    2d7c:	2201      	movs	r2, #1
    2d7e:	0018      	movs	r0, r3
    2d80:	4b37      	ldr	r3, [pc, #220]	; (2e60 <spi_rw+0x150>)
    2d82:	4798      	blx	r3

	while (u16Sz) {
    2d84:	e04c      	b.n	2e20 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	781a      	ldrb	r2, [r3, #0]
    2d8a:	2314      	movs	r3, #20
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    2d90:	46c0      	nop			; (mov r8, r8)
    2d92:	4b32      	ldr	r3, [pc, #200]	; (2e5c <spi_rw+0x14c>)
    2d94:	0018      	movs	r0, r3
    2d96:	4b33      	ldr	r3, [pc, #204]	; (2e64 <spi_rw+0x154>)
    2d98:	4798      	blx	r3
    2d9a:	0003      	movs	r3, r0
    2d9c:	001a      	movs	r2, r3
    2d9e:	2301      	movs	r3, #1
    2da0:	4053      	eors	r3, r2
    2da2:	b2db      	uxtb	r3, r3
    2da4:	2b00      	cmp	r3, #0
    2da6:	d1f4      	bne.n	2d92 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    2da8:	46c0      	nop			; (mov r8, r8)
    2daa:	2314      	movs	r3, #20
    2dac:	18fb      	adds	r3, r7, r3
    2dae:	881a      	ldrh	r2, [r3, #0]
    2db0:	4b2a      	ldr	r3, [pc, #168]	; (2e5c <spi_rw+0x14c>)
    2db2:	0011      	movs	r1, r2
    2db4:	0018      	movs	r0, r3
    2db6:	4b2c      	ldr	r3, [pc, #176]	; (2e68 <spi_rw+0x158>)
    2db8:	4798      	blx	r3
    2dba:	1e03      	subs	r3, r0, #0
    2dbc:	d1f5      	bne.n	2daa <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	4b26      	ldr	r3, [pc, #152]	; (2e5c <spi_rw+0x14c>)
    2dc2:	0018      	movs	r0, r3
    2dc4:	4b29      	ldr	r3, [pc, #164]	; (2e6c <spi_rw+0x15c>)
    2dc6:	4798      	blx	r3
    2dc8:	0003      	movs	r3, r0
    2dca:	001a      	movs	r2, r3
    2dcc:	2301      	movs	r3, #1
    2dce:	4053      	eors	r3, r2
    2dd0:	b2db      	uxtb	r3, r3
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d1f4      	bne.n	2dc0 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	2310      	movs	r3, #16
    2dda:	18fa      	adds	r2, r7, r3
    2ddc:	4b1f      	ldr	r3, [pc, #124]	; (2e5c <spi_rw+0x14c>)
    2dde:	0011      	movs	r1, r2
    2de0:	0018      	movs	r0, r3
    2de2:	4b23      	ldr	r3, [pc, #140]	; (2e70 <spi_rw+0x160>)
    2de4:	4798      	blx	r3
    2de6:	1e03      	subs	r3, r0, #0
    2de8:	d1f6      	bne.n	2dd8 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    2dea:	2310      	movs	r3, #16
    2dec:	18fb      	adds	r3, r7, r3
    2dee:	881b      	ldrh	r3, [r3, #0]
    2df0:	b2da      	uxtb	r2, r3
    2df2:	68bb      	ldr	r3, [r7, #8]
    2df4:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    2df6:	1dbb      	adds	r3, r7, #6
    2df8:	881a      	ldrh	r2, [r3, #0]
    2dfa:	1dbb      	adds	r3, r7, #6
    2dfc:	3a01      	subs	r2, #1
    2dfe:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    2e00:	2316      	movs	r3, #22
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	781b      	ldrb	r3, [r3, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d102      	bne.n	2e10 <spi_rw+0x100>
			pu8Miso++;
    2e0a:	68bb      	ldr	r3, [r7, #8]
    2e0c:	3301      	adds	r3, #1
    2e0e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    2e10:	2317      	movs	r3, #23
    2e12:	18fb      	adds	r3, r7, r3
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d102      	bne.n	2e20 <spi_rw+0x110>
			pu8Mosi++;
    2e1a:	68fb      	ldr	r3, [r7, #12]
    2e1c:	3301      	adds	r3, #1
    2e1e:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    2e20:	1dbb      	adds	r3, r7, #6
    2e22:	881b      	ldrh	r3, [r3, #0]
    2e24:	2b00      	cmp	r3, #0
    2e26:	d1ae      	bne.n	2d86 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    2e28:	46c0      	nop			; (mov r8, r8)
    2e2a:	4b0c      	ldr	r3, [pc, #48]	; (2e5c <spi_rw+0x14c>)
    2e2c:	0018      	movs	r0, r3
    2e2e:	4b11      	ldr	r3, [pc, #68]	; (2e74 <spi_rw+0x164>)
    2e30:	4798      	blx	r3
    2e32:	0003      	movs	r3, r0
    2e34:	001a      	movs	r2, r3
    2e36:	2301      	movs	r3, #1
    2e38:	4053      	eors	r3, r2
    2e3a:	b2db      	uxtb	r3, r3
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	d1f4      	bne.n	2e2a <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    2e40:	4905      	ldr	r1, [pc, #20]	; (2e58 <spi_rw+0x148>)
    2e42:	4b06      	ldr	r3, [pc, #24]	; (2e5c <spi_rw+0x14c>)
    2e44:	2200      	movs	r2, #0
    2e46:	0018      	movs	r0, r3
    2e48:	4b05      	ldr	r3, [pc, #20]	; (2e60 <spi_rw+0x150>)
    2e4a:	4798      	blx	r3

	return M2M_SUCCESS;
    2e4c:	2300      	movs	r3, #0
}
    2e4e:	0018      	movs	r0, r3
    2e50:	46bd      	mov	sp, r7
    2e52:	b006      	add	sp, #24
    2e54:	bd80      	pop	{r7, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	2000464c 	.word	0x2000464c
    2e5c:	20004650 	.word	0x20004650
    2e60:	00009ded 	.word	0x00009ded
    2e64:	00002bf1 	.word	0x00002bf1
    2e68:	00002c41 	.word	0x00002c41
    2e6c:	00002c19 	.word	0x00002c19
    2e70:	00002c89 	.word	0x00002c89
    2e74:	00002bc9 	.word	0x00002bc9

00002e78 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b092      	sub	sp, #72	; 0x48
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    2e80:	2347      	movs	r3, #71	; 0x47
    2e82:	18fb      	adds	r3, r7, r3
    2e84:	2200      	movs	r2, #0
    2e86:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    2e88:	2308      	movs	r3, #8
    2e8a:	18fb      	adds	r3, r7, r3
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b26      	ldr	r3, [pc, #152]	; (2f28 <nm_bus_init+0xb0>)
    2e90:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    2e92:	2308      	movs	r3, #8
    2e94:	18fb      	adds	r3, r7, r3
    2e96:	220e      	movs	r2, #14
    2e98:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    2e9a:	2308      	movs	r3, #8
    2e9c:	18fa      	adds	r2, r7, r3
    2e9e:	4b23      	ldr	r3, [pc, #140]	; (2f2c <nm_bus_init+0xb4>)
    2ea0:	0011      	movs	r1, r2
    2ea2:	0018      	movs	r0, r3
    2ea4:	4b22      	ldr	r3, [pc, #136]	; (2f30 <nm_bus_init+0xb8>)
    2ea6:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    2ea8:	230c      	movs	r3, #12
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	0018      	movs	r0, r3
    2eae:	4b21      	ldr	r3, [pc, #132]	; (2f34 <nm_bus_init+0xbc>)
    2eb0:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    2eb2:	230c      	movs	r3, #12
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	22c0      	movs	r2, #192	; 0xc0
    2eb8:	0392      	lsls	r2, r2, #14
    2eba:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    2ebc:	230c      	movs	r3, #12
    2ebe:	18fb      	adds	r3, r7, r3
    2ec0:	4a1d      	ldr	r2, [pc, #116]	; (2f38 <nm_bus_init+0xc0>)
    2ec2:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    2ec4:	230c      	movs	r3, #12
    2ec6:	18fb      	adds	r3, r7, r3
    2ec8:	4a1c      	ldr	r2, [pc, #112]	; (2f3c <nm_bus_init+0xc4>)
    2eca:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    2ecc:	230c      	movs	r3, #12
    2ece:	18fb      	adds	r3, r7, r3
    2ed0:	2201      	movs	r2, #1
    2ed2:	4252      	negs	r2, r2
    2ed4:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    2ed6:	230c      	movs	r3, #12
    2ed8:	18fb      	adds	r3, r7, r3
    2eda:	4a19      	ldr	r2, [pc, #100]	; (2f40 <nm_bus_init+0xc8>)
    2edc:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    2ede:	230c      	movs	r3, #12
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	2200      	movs	r2, #0
    2ee4:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    2ee6:	230c      	movs	r3, #12
    2ee8:	18fb      	adds	r3, r7, r3
    2eea:	4a16      	ldr	r2, [pc, #88]	; (2f44 <nm_bus_init+0xcc>)
    2eec:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    2eee:	230c      	movs	r3, #12
    2ef0:	18fa      	adds	r2, r7, r3
    2ef2:	4915      	ldr	r1, [pc, #84]	; (2f48 <nm_bus_init+0xd0>)
    2ef4:	4b15      	ldr	r3, [pc, #84]	; (2f4c <nm_bus_init+0xd4>)
    2ef6:	0018      	movs	r0, r3
    2ef8:	4b15      	ldr	r3, [pc, #84]	; (2f50 <nm_bus_init+0xd8>)
    2efa:	4798      	blx	r3
    2efc:	1e03      	subs	r3, r0, #0
    2efe:	d002      	beq.n	2f06 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    2f00:	2306      	movs	r3, #6
    2f02:	425b      	negs	r3, r3
    2f04:	e00c      	b.n	2f20 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    2f06:	4b11      	ldr	r3, [pc, #68]	; (2f4c <nm_bus_init+0xd4>)
    2f08:	0018      	movs	r0, r3
    2f0a:	4b12      	ldr	r3, [pc, #72]	; (2f54 <nm_bus_init+0xdc>)
    2f0c:	4798      	blx	r3

	nm_bsp_reset();
    2f0e:	4b12      	ldr	r3, [pc, #72]	; (2f58 <nm_bus_init+0xe0>)
    2f10:	4798      	blx	r3
	nm_bsp_sleep(1);
    2f12:	2001      	movs	r0, #1
    2f14:	4b11      	ldr	r3, [pc, #68]	; (2f5c <nm_bus_init+0xe4>)
    2f16:	4798      	blx	r3
#endif
	return result;
    2f18:	2347      	movs	r3, #71	; 0x47
    2f1a:	18fb      	adds	r3, r7, r3
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	b25b      	sxtb	r3, r3
}
    2f20:	0018      	movs	r0, r3
    2f22:	46bd      	mov	sp, r7
    2f24:	b012      	add	sp, #72	; 0x48
    2f26:	bd80      	pop	{r7, pc}
    2f28:	00002a95 	.word	0x00002a95
    2f2c:	2000464c 	.word	0x2000464c
    2f30:	00002ab9 	.word	0x00002ab9
    2f34:	00002a11 	.word	0x00002a11
    2f38:	000c0002 	.word	0x000c0002
    2f3c:	000d0002 	.word	0x000d0002
    2f40:	000f0002 	.word	0x000f0002
    2f44:	00b71b00 	.word	0x00b71b00
    2f48:	42001000 	.word	0x42001000
    2f4c:	20004650 	.word	0x20004650
    2f50:	00009b29 	.word	0x00009b29
    2f54:	00002b1d 	.word	0x00002b1d
    2f58:	00002749 	.word	0x00002749
    2f5c:	0000278d 	.word	0x0000278d

00002f60 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    2f60:	b590      	push	{r4, r7, lr}
    2f62:	b085      	sub	sp, #20
    2f64:	af00      	add	r7, sp, #0
    2f66:	0002      	movs	r2, r0
    2f68:	6039      	str	r1, [r7, #0]
    2f6a:	1dfb      	adds	r3, r7, #7
    2f6c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    2f6e:	230f      	movs	r3, #15
    2f70:	18fb      	adds	r3, r7, r3
    2f72:	2200      	movs	r2, #0
    2f74:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    2f76:	1dfb      	adds	r3, r7, #7
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	2b03      	cmp	r3, #3
    2f7c:	d10f      	bne.n	2f9e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    2f7e:	683b      	ldr	r3, [r7, #0]
    2f80:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    2f82:	68bb      	ldr	r3, [r7, #8]
    2f84:	6818      	ldr	r0, [r3, #0]
    2f86:	68bb      	ldr	r3, [r7, #8]
    2f88:	6859      	ldr	r1, [r3, #4]
    2f8a:	68bb      	ldr	r3, [r7, #8]
    2f8c:	891b      	ldrh	r3, [r3, #8]
    2f8e:	220f      	movs	r2, #15
    2f90:	18bc      	adds	r4, r7, r2
    2f92:	001a      	movs	r2, r3
    2f94:	4b0f      	ldr	r3, [pc, #60]	; (2fd4 <nm_bus_ioctl+0x74>)
    2f96:	4798      	blx	r3
    2f98:	0003      	movs	r3, r0
    2f9a:	7023      	strb	r3, [r4, #0]
		}
		break;
    2f9c:	e012      	b.n	2fc4 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    2f9e:	230f      	movs	r3, #15
    2fa0:	18fb      	adds	r3, r7, r3
    2fa2:	22ff      	movs	r2, #255	; 0xff
    2fa4:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    2fa6:	2386      	movs	r3, #134	; 0x86
    2fa8:	005a      	lsls	r2, r3, #1
    2faa:	490b      	ldr	r1, [pc, #44]	; (2fd8 <nm_bus_ioctl+0x78>)
    2fac:	4b0b      	ldr	r3, [pc, #44]	; (2fdc <nm_bus_ioctl+0x7c>)
    2fae:	0018      	movs	r0, r3
    2fb0:	4b0b      	ldr	r3, [pc, #44]	; (2fe0 <nm_bus_ioctl+0x80>)
    2fb2:	4798      	blx	r3
    2fb4:	4b0b      	ldr	r3, [pc, #44]	; (2fe4 <nm_bus_ioctl+0x84>)
    2fb6:	0018      	movs	r0, r3
    2fb8:	4b0b      	ldr	r3, [pc, #44]	; (2fe8 <nm_bus_ioctl+0x88>)
    2fba:	4798      	blx	r3
    2fbc:	200d      	movs	r0, #13
    2fbe:	4b0b      	ldr	r3, [pc, #44]	; (2fec <nm_bus_ioctl+0x8c>)
    2fc0:	4798      	blx	r3
			break;
    2fc2:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    2fc4:	230f      	movs	r3, #15
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	781b      	ldrb	r3, [r3, #0]
    2fca:	b25b      	sxtb	r3, r3
}
    2fcc:	0018      	movs	r0, r3
    2fce:	46bd      	mov	sp, r7
    2fd0:	b005      	add	sp, #20
    2fd2:	bd90      	pop	{r4, r7, pc}
    2fd4:	00002d11 	.word	0x00002d11
    2fd8:	000126c0 	.word	0x000126c0
    2fdc:	00012698 	.word	0x00012698
    2fe0:	0001121d 	.word	0x0001121d
    2fe4:	000126ac 	.word	0x000126ac
    2fe8:	0001133d 	.word	0x0001133d
    2fec:	00011251 	.word	0x00011251

00002ff0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    2ff6:	1dfb      	adds	r3, r7, #7
    2ff8:	2200      	movs	r2, #0
    2ffa:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    2ffc:	1d3b      	adds	r3, r7, #4
    2ffe:	0018      	movs	r0, r3
    3000:	4b09      	ldr	r3, [pc, #36]	; (3028 <nm_bus_deinit+0x38>)
    3002:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3004:	1d3b      	adds	r3, r7, #4
    3006:	2200      	movs	r2, #0
    3008:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    300a:	1d3b      	adds	r3, r7, #4
    300c:	2200      	movs	r2, #0
    300e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
    3010:	4b06      	ldr	r3, [pc, #24]	; (302c <nm_bus_deinit+0x3c>)
    3012:	0018      	movs	r0, r3
    3014:	4b06      	ldr	r3, [pc, #24]	; (3030 <nm_bus_deinit+0x40>)
    3016:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
    3018:	1dfb      	adds	r3, r7, #7
    301a:	781b      	ldrb	r3, [r3, #0]
    301c:	b25b      	sxtb	r3, r3
}
    301e:	0018      	movs	r0, r3
    3020:	46bd      	mov	sp, r7
    3022:	b002      	add	sp, #8
    3024:	bd80      	pop	{r7, pc}
    3026:	46c0      	nop			; (mov r8, r8)
    3028:	00002979 	.word	0x00002979
    302c:	20004650 	.word	0x20004650
    3030:	00002b6d 	.word	0x00002b6d

00003034 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    3034:	b580      	push	{r7, lr}
    3036:	b084      	sub	sp, #16
    3038:	af00      	add	r7, sp, #0
    303a:	60f8      	str	r0, [r7, #12]
    303c:	60b9      	str	r1, [r7, #8]
    303e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	2b00      	cmp	r3, #0
    3044:	d010      	beq.n	3068 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    3046:	68bb      	ldr	r3, [r7, #8]
    3048:	781a      	ldrb	r2, [r3, #0]
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	701a      	strb	r2, [r3, #0]
		pDst++;
    304e:	68fb      	ldr	r3, [r7, #12]
    3050:	3301      	adds	r3, #1
    3052:	60fb      	str	r3, [r7, #12]
		pSrc++;
    3054:	68bb      	ldr	r3, [r7, #8]
    3056:	3301      	adds	r3, #1
    3058:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    305a:	687b      	ldr	r3, [r7, #4]
    305c:	3b01      	subs	r3, #1
    305e:	607b      	str	r3, [r7, #4]
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	2b00      	cmp	r3, #0
    3064:	d1ef      	bne.n	3046 <m2m_memcpy+0x12>
    3066:	e000      	b.n	306a <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    3068:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    306a:	46bd      	mov	sp, r7
    306c:	b004      	add	sp, #16
    306e:	bd80      	pop	{r7, pc}

00003070 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    3070:	b580      	push	{r7, lr}
    3072:	b084      	sub	sp, #16
    3074:	af00      	add	r7, sp, #0
    3076:	60f8      	str	r0, [r7, #12]
    3078:	607a      	str	r2, [r7, #4]
    307a:	230b      	movs	r3, #11
    307c:	18fb      	adds	r3, r7, r3
    307e:	1c0a      	adds	r2, r1, #0
    3080:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    3082:	687b      	ldr	r3, [r7, #4]
    3084:	2b00      	cmp	r3, #0
    3086:	d00e      	beq.n	30a6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    3088:	68fb      	ldr	r3, [r7, #12]
    308a:	220b      	movs	r2, #11
    308c:	18ba      	adds	r2, r7, r2
    308e:	7812      	ldrb	r2, [r2, #0]
    3090:	701a      	strb	r2, [r3, #0]
		pBuf++;
    3092:	68fb      	ldr	r3, [r7, #12]
    3094:	3301      	adds	r3, #1
    3096:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	3b01      	subs	r3, #1
    309c:	607b      	str	r3, [r7, #4]
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d1f1      	bne.n	3088 <m2m_memset+0x18>
    30a4:	e000      	b.n	30a8 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    30a6:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    30a8:	46bd      	mov	sp, r7
    30aa:	b004      	add	sp, #16
    30ac:	bd80      	pop	{r7, pc}
    30ae:	46c0      	nop			; (mov r8, r8)

000030b0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    30b0:	b580      	push	{r7, lr}
    30b2:	b084      	sub	sp, #16
    30b4:	af00      	add	r7, sp, #0
    30b6:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    30b8:	230e      	movs	r3, #14
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	2200      	movs	r2, #0
    30be:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    30c0:	e009      	b.n	30d6 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    30c2:	230e      	movs	r3, #14
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	881a      	ldrh	r2, [r3, #0]
    30c8:	230e      	movs	r3, #14
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	3201      	adds	r2, #1
    30ce:	801a      	strh	r2, [r3, #0]
		pcStr++;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	3301      	adds	r3, #1
    30d4:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    30d6:	687b      	ldr	r3, [r7, #4]
    30d8:	781b      	ldrb	r3, [r3, #0]
    30da:	2b00      	cmp	r3, #0
    30dc:	d1f1      	bne.n	30c2 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    30de:	230e      	movs	r3, #14
    30e0:	18fb      	adds	r3, r7, r3
    30e2:	881b      	ldrh	r3, [r3, #0]
}
    30e4:	0018      	movs	r0, r3
    30e6:	46bd      	mov	sp, r7
    30e8:	b004      	add	sp, #16
    30ea:	bd80      	pop	{r7, pc}

000030ec <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    30ec:	b580      	push	{r7, lr}
    30ee:	b084      	sub	sp, #16
    30f0:	af00      	add	r7, sp, #0
    30f2:	60f8      	str	r0, [r7, #12]
    30f4:	60b9      	str	r1, [r7, #8]
    30f6:	1dbb      	adds	r3, r7, #6
    30f8:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    30fa:	e020      	b.n	313e <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
    30fc:	68fb      	ldr	r3, [r7, #12]
    30fe:	781a      	ldrb	r2, [r3, #0]
    3100:	68bb      	ldr	r3, [r7, #8]
    3102:	781b      	ldrb	r3, [r3, #0]
    3104:	429a      	cmp	r2, r3
    3106:	d009      	beq.n	311c <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    3108:	68fb      	ldr	r3, [r7, #12]
    310a:	781a      	ldrb	r2, [r3, #0]
    310c:	68bb      	ldr	r3, [r7, #8]
    310e:	781b      	ldrb	r3, [r3, #0]
    3110:	429a      	cmp	r2, r3
    3112:	d201      	bcs.n	3118 <m2m_strncmp+0x2c>
    3114:	23ff      	movs	r3, #255	; 0xff
    3116:	e017      	b.n	3148 <m2m_strncmp+0x5c>
    3118:	2301      	movs	r3, #1
    311a:	e015      	b.n	3148 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
    311c:	68fb      	ldr	r3, [r7, #12]
    311e:	781b      	ldrb	r3, [r3, #0]
    3120:	2b00      	cmp	r3, #0
    3122:	d101      	bne.n	3128 <m2m_strncmp+0x3c>
	    return 0;
    3124:	2300      	movs	r3, #0
    3126:	e00f      	b.n	3148 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    3128:	68fb      	ldr	r3, [r7, #12]
    312a:	3301      	adds	r3, #1
    312c:	60fb      	str	r3, [r7, #12]
    312e:	68bb      	ldr	r3, [r7, #8]
    3130:	3301      	adds	r3, #1
    3132:	60bb      	str	r3, [r7, #8]
    3134:	1dbb      	adds	r3, r7, #6
    3136:	1dba      	adds	r2, r7, #6
    3138:	8812      	ldrh	r2, [r2, #0]
    313a:	3a01      	subs	r2, #1
    313c:	801a      	strh	r2, [r3, #0]
    313e:	1dbb      	adds	r3, r7, #6
    3140:	881b      	ldrh	r3, [r3, #0]
    3142:	2b00      	cmp	r3, #0
    3144:	d1da      	bne.n	30fc <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    3146:	2300      	movs	r3, #0
}
    3148:	0018      	movs	r0, r3
    314a:	46bd      	mov	sp, r7
    314c:	b004      	add	sp, #16
    314e:	bd80      	pop	{r7, pc}

00003150 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    3150:	b590      	push	{r4, r7, lr}
    3152:	b085      	sub	sp, #20
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
    3158:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    315a:	683b      	ldr	r3, [r7, #0]
    315c:	1c5a      	adds	r2, r3, #1
    315e:	603a      	str	r2, [r7, #0]
    3160:	220f      	movs	r2, #15
    3162:	18ba      	adds	r2, r7, r2
    3164:	781b      	ldrb	r3, [r3, #0]
    3166:	7013      	strb	r3, [r2, #0]
    if (!u8c)
    3168:	230f      	movs	r3, #15
    316a:	18fb      	adds	r3, r7, r3
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	2b00      	cmp	r3, #0
    3170:	d101      	bne.n	3176 <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	e029      	b.n	31ca <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
    3176:	230c      	movs	r3, #12
    3178:	18fc      	adds	r4, r7, r3
    317a:	683b      	ldr	r3, [r7, #0]
    317c:	0018      	movs	r0, r3
    317e:	4b15      	ldr	r3, [pc, #84]	; (31d4 <m2m_strstr+0x84>)
    3180:	4798      	blx	r3
    3182:	0003      	movs	r3, r0
    3184:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    3186:	687b      	ldr	r3, [r7, #4]
    3188:	1c5a      	adds	r2, r3, #1
    318a:	607a      	str	r2, [r7, #4]
    318c:	220b      	movs	r2, #11
    318e:	18ba      	adds	r2, r7, r2
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
    3194:	230b      	movs	r3, #11
    3196:	18fb      	adds	r3, r7, r3
    3198:	781b      	ldrb	r3, [r3, #0]
    319a:	2b00      	cmp	r3, #0
    319c:	d101      	bne.n	31a2 <m2m_strstr+0x52>
                return (uint8 *) 0;
    319e:	2300      	movs	r3, #0
    31a0:	e013      	b.n	31ca <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
    31a2:	230b      	movs	r3, #11
    31a4:	18fa      	adds	r2, r7, r3
    31a6:	230f      	movs	r3, #15
    31a8:	18fb      	adds	r3, r7, r3
    31aa:	7812      	ldrb	r2, [r2, #0]
    31ac:	781b      	ldrb	r3, [r3, #0]
    31ae:	429a      	cmp	r2, r3
    31b0:	d1e9      	bne.n	3186 <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    31b2:	230c      	movs	r3, #12
    31b4:	18fb      	adds	r3, r7, r3
    31b6:	881a      	ldrh	r2, [r3, #0]
    31b8:	6839      	ldr	r1, [r7, #0]
    31ba:	687b      	ldr	r3, [r7, #4]
    31bc:	0018      	movs	r0, r3
    31be:	4b06      	ldr	r3, [pc, #24]	; (31d8 <m2m_strstr+0x88>)
    31c0:	4798      	blx	r3
    31c2:	1e03      	subs	r3, r0, #0
    31c4:	d1df      	bne.n	3186 <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
    31c6:	687b      	ldr	r3, [r7, #4]
    31c8:	3b01      	subs	r3, #1
}
    31ca:	0018      	movs	r0, r3
    31cc:	46bd      	mov	sp, r7
    31ce:	b005      	add	sp, #20
    31d0:	bd90      	pop	{r4, r7, pc}
    31d2:	46c0      	nop			; (mov r8, r8)
    31d4:	000030b1 	.word	0x000030b1
    31d8:	000030ed 	.word	0x000030ed

000031dc <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
    31dc:	b580      	push	{r7, lr}
    31de:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    31e0:	4b04      	ldr	r3, [pc, #16]	; (31f4 <isr+0x18>)
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	b2db      	uxtb	r3, r3
    31e6:	3301      	adds	r3, #1
    31e8:	b2da      	uxtb	r2, r3
    31ea:	4b02      	ldr	r3, [pc, #8]	; (31f4 <isr+0x18>)
    31ec:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    31ee:	46c0      	nop			; (mov r8, r8)
    31f0:	46bd      	mov	sp, r7
    31f2:	bd80      	pop	{r7, pc}
    31f4:	200000cb 	.word	0x200000cb

000031f8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    31f8:	b590      	push	{r4, r7, lr}
    31fa:	b083      	sub	sp, #12
    31fc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    31fe:	1dfb      	adds	r3, r7, #7
    3200:	2200      	movs	r2, #0
    3202:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    3204:	2001      	movs	r0, #1
    3206:	4b13      	ldr	r3, [pc, #76]	; (3254 <hif_set_rx_done+0x5c>)
    3208:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    320a:	1dfc      	adds	r4, r7, #7
    320c:	003b      	movs	r3, r7
    320e:	4a12      	ldr	r2, [pc, #72]	; (3258 <hif_set_rx_done+0x60>)
    3210:	0019      	movs	r1, r3
    3212:	0010      	movs	r0, r2
    3214:	4b11      	ldr	r3, [pc, #68]	; (325c <hif_set_rx_done+0x64>)
    3216:	4798      	blx	r3
    3218:	0003      	movs	r3, r0
    321a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    321c:	1dfb      	adds	r3, r7, #7
    321e:	781b      	ldrb	r3, [r3, #0]
    3220:	b25b      	sxtb	r3, r3
    3222:	2b00      	cmp	r3, #0
    3224:	d10d      	bne.n	3242 <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    3226:	683b      	ldr	r3, [r7, #0]
    3228:	2202      	movs	r2, #2
    322a:	4313      	orrs	r3, r2
    322c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    322e:	683b      	ldr	r3, [r7, #0]
    3230:	1dfc      	adds	r4, r7, #7
    3232:	4a09      	ldr	r2, [pc, #36]	; (3258 <hif_set_rx_done+0x60>)
    3234:	0019      	movs	r1, r3
    3236:	0010      	movs	r0, r2
    3238:	4b09      	ldr	r3, [pc, #36]	; (3260 <hif_set_rx_done+0x68>)
    323a:	4798      	blx	r3
    323c:	0003      	movs	r3, r0
    323e:	7023      	strb	r3, [r4, #0]
    3240:	e000      	b.n	3244 <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    3242:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    3244:	1dfb      	adds	r3, r7, #7
    3246:	781b      	ldrb	r3, [r3, #0]
    3248:	b25b      	sxtb	r3, r3

}
    324a:	0018      	movs	r0, r3
    324c:	46bd      	mov	sp, r7
    324e:	b003      	add	sp, #12
    3250:	bd90      	pop	{r4, r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	00002861 	.word	0x00002861
    3258:	00001070 	.word	0x00001070
    325c:	0000538d 	.word	0x0000538d
    3260:	000053b1 	.word	0x000053b1

00003264 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    3264:	b580      	push	{r7, lr}
    3266:	b082      	sub	sp, #8
    3268:	af00      	add	r7, sp, #0
    326a:	603a      	str	r2, [r7, #0]
    326c:	1dfb      	adds	r3, r7, #7
    326e:	1c02      	adds	r2, r0, #0
    3270:	701a      	strb	r2, [r3, #0]
    3272:	1d3b      	adds	r3, r7, #4
    3274:	1c0a      	adds	r2, r1, #0
    3276:	801a      	strh	r2, [r3, #0]


}
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	46bd      	mov	sp, r7
    327c:	b002      	add	sp, #8
    327e:	bd80      	pop	{r7, pc}

00003280 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    3280:	b590      	push	{r4, r7, lr}
    3282:	b083      	sub	sp, #12
    3284:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3286:	1dfb      	adds	r3, r7, #7
    3288:	2200      	movs	r2, #0
    328a:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    328c:	4b1c      	ldr	r3, [pc, #112]	; (3300 <hif_chip_wake+0x80>)
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	b2db      	uxtb	r3, r3
    3292:	2b00      	cmp	r3, #0
    3294:	d121      	bne.n	32da <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    3296:	4b1b      	ldr	r3, [pc, #108]	; (3304 <hif_chip_wake+0x84>)
    3298:	781b      	ldrb	r3, [r3, #0]
    329a:	b2db      	uxtb	r3, r3
    329c:	2b03      	cmp	r3, #3
    329e:	d004      	beq.n	32aa <hif_chip_wake+0x2a>
    32a0:	4b18      	ldr	r3, [pc, #96]	; (3304 <hif_chip_wake+0x84>)
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	b2db      	uxtb	r3, r3
    32a6:	2b04      	cmp	r3, #4
    32a8:	d117      	bne.n	32da <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    32aa:	1dfc      	adds	r4, r7, #7
    32ac:	4b16      	ldr	r3, [pc, #88]	; (3308 <hif_chip_wake+0x88>)
    32ae:	4798      	blx	r3
    32b0:	0003      	movs	r3, r0
    32b2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    32b4:	1dfb      	adds	r3, r7, #7
    32b6:	781b      	ldrb	r3, [r3, #0]
    32b8:	b25b      	sxtb	r3, r3
    32ba:	2b00      	cmp	r3, #0
    32bc:	d115      	bne.n	32ea <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    32be:	1dfc      	adds	r4, r7, #7
    32c0:	4a12      	ldr	r2, [pc, #72]	; (330c <hif_chip_wake+0x8c>)
    32c2:	4b13      	ldr	r3, [pc, #76]	; (3310 <hif_chip_wake+0x90>)
    32c4:	0011      	movs	r1, r2
    32c6:	0018      	movs	r0, r3
    32c8:	4b12      	ldr	r3, [pc, #72]	; (3314 <hif_chip_wake+0x94>)
    32ca:	4798      	blx	r3
    32cc:	0003      	movs	r3, r0
    32ce:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	781b      	ldrb	r3, [r3, #0]
    32d4:	b25b      	sxtb	r3, r3
    32d6:	2b00      	cmp	r3, #0
    32d8:	d109      	bne.n	32ee <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    32da:	4b09      	ldr	r3, [pc, #36]	; (3300 <hif_chip_wake+0x80>)
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	b2db      	uxtb	r3, r3
    32e0:	3301      	adds	r3, #1
    32e2:	b2da      	uxtb	r2, r3
    32e4:	4b06      	ldr	r3, [pc, #24]	; (3300 <hif_chip_wake+0x80>)
    32e6:	701a      	strb	r2, [r3, #0]
    32e8:	e002      	b.n	32f0 <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    32ea:	46c0      	nop			; (mov r8, r8)
    32ec:	e000      	b.n	32f0 <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    32ee:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    32f0:	1dfb      	adds	r3, r7, #7
    32f2:	781b      	ldrb	r3, [r3, #0]
    32f4:	b25b      	sxtb	r3, r3
}
    32f6:	0018      	movs	r0, r3
    32f8:	46bd      	mov	sp, r7
    32fa:	b003      	add	sp, #12
    32fc:	bd90      	pop	{r4, r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	200000c9 	.word	0x200000c9
    3304:	200000c8 	.word	0x200000c8
    3308:	00004a61 	.word	0x00004a61
    330c:	00005678 	.word	0x00005678
    3310:	00001074 	.word	0x00001074
    3314:	000053b1 	.word	0x000053b1

00003318 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    3318:	b590      	push	{r4, r7, lr}
    331a:	b083      	sub	sp, #12
    331c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    331e:	1dfb      	adds	r3, r7, #7
    3320:	2200      	movs	r2, #0
    3322:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    3324:	4b29      	ldr	r3, [pc, #164]	; (33cc <hif_chip_sleep+0xb4>)
    3326:	781b      	ldrb	r3, [r3, #0]
    3328:	b2db      	uxtb	r3, r3
    332a:	2b00      	cmp	r3, #0
    332c:	d006      	beq.n	333c <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    332e:	4b27      	ldr	r3, [pc, #156]	; (33cc <hif_chip_sleep+0xb4>)
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	b2db      	uxtb	r3, r3
    3334:	3b01      	subs	r3, #1
    3336:	b2da      	uxtb	r2, r3
    3338:	4b24      	ldr	r3, [pc, #144]	; (33cc <hif_chip_sleep+0xb4>)
    333a:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    333c:	4b23      	ldr	r3, [pc, #140]	; (33cc <hif_chip_sleep+0xb4>)
    333e:	781b      	ldrb	r3, [r3, #0]
    3340:	b2db      	uxtb	r3, r3
    3342:	2b00      	cmp	r3, #0
    3344:	d13a      	bne.n	33bc <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    3346:	4b22      	ldr	r3, [pc, #136]	; (33d0 <hif_chip_sleep+0xb8>)
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	b2db      	uxtb	r3, r3
    334c:	2b03      	cmp	r3, #3
    334e:	d004      	beq.n	335a <hif_chip_sleep+0x42>
    3350:	4b1f      	ldr	r3, [pc, #124]	; (33d0 <hif_chip_sleep+0xb8>)
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	b2db      	uxtb	r3, r3
    3356:	2b04      	cmp	r3, #4
    3358:	d130      	bne.n	33bc <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    335a:	2300      	movs	r3, #0
    335c:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    335e:	1dfc      	adds	r4, r7, #7
    3360:	4a1c      	ldr	r2, [pc, #112]	; (33d4 <hif_chip_sleep+0xbc>)
    3362:	4b1d      	ldr	r3, [pc, #116]	; (33d8 <hif_chip_sleep+0xc0>)
    3364:	0011      	movs	r1, r2
    3366:	0018      	movs	r0, r3
    3368:	4b1c      	ldr	r3, [pc, #112]	; (33dc <hif_chip_sleep+0xc4>)
    336a:	4798      	blx	r3
    336c:	0003      	movs	r3, r0
    336e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    3370:	1dfb      	adds	r3, r7, #7
    3372:	781b      	ldrb	r3, [r3, #0]
    3374:	b25b      	sxtb	r3, r3
    3376:	2b00      	cmp	r3, #0
    3378:	d11d      	bne.n	33b6 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    337a:	1dfc      	adds	r4, r7, #7
    337c:	003b      	movs	r3, r7
    337e:	0019      	movs	r1, r3
    3380:	2001      	movs	r0, #1
    3382:	4b17      	ldr	r3, [pc, #92]	; (33e0 <hif_chip_sleep+0xc8>)
    3384:	4798      	blx	r3
    3386:	0003      	movs	r3, r0
    3388:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    338a:	1dfb      	adds	r3, r7, #7
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	b25b      	sxtb	r3, r3
    3390:	2b00      	cmp	r3, #0
    3392:	d112      	bne.n	33ba <hif_chip_sleep+0xa2>
			if(reg&0x2)
    3394:	683b      	ldr	r3, [r7, #0]
    3396:	2202      	movs	r2, #2
    3398:	4013      	ands	r3, r2
    339a:	d00f      	beq.n	33bc <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    339c:	683b      	ldr	r3, [r7, #0]
    339e:	2202      	movs	r2, #2
    33a0:	4393      	bics	r3, r2
    33a2:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    33a4:	683b      	ldr	r3, [r7, #0]
    33a6:	1dfc      	adds	r4, r7, #7
    33a8:	0019      	movs	r1, r3
    33aa:	2001      	movs	r0, #1
    33ac:	4b0b      	ldr	r3, [pc, #44]	; (33dc <hif_chip_sleep+0xc4>)
    33ae:	4798      	blx	r3
    33b0:	0003      	movs	r3, r0
    33b2:	7023      	strb	r3, [r4, #0]
    33b4:	e002      	b.n	33bc <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	e000      	b.n	33bc <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    33ba:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    33bc:	1dfb      	adds	r3, r7, #7
    33be:	781b      	ldrb	r3, [r3, #0]
    33c0:	b25b      	sxtb	r3, r3
}
    33c2:	0018      	movs	r0, r3
    33c4:	46bd      	mov	sp, r7
    33c6:	b003      	add	sp, #12
    33c8:	bd90      	pop	{r4, r7, pc}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	200000c9 	.word	0x200000c9
    33d0:	200000c8 	.word	0x200000c8
    33d4:	00004321 	.word	0x00004321
    33d8:	00001074 	.word	0x00001074
    33dc:	000053b1 	.word	0x000053b1
    33e0:	0000538d 	.word	0x0000538d

000033e4 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	af00      	add	r7, sp, #0
    33ea:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    33ec:	4b0e      	ldr	r3, [pc, #56]	; (3428 <hif_init+0x44>)
    33ee:	2200      	movs	r2, #0
    33f0:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    33f2:	4b0e      	ldr	r3, [pc, #56]	; (342c <hif_init+0x48>)
    33f4:	2200      	movs	r2, #0
    33f6:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    33f8:	4b0d      	ldr	r3, [pc, #52]	; (3430 <hif_init+0x4c>)
    33fa:	2200      	movs	r2, #0
    33fc:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    33fe:	4b0d      	ldr	r3, [pc, #52]	; (3434 <hif_init+0x50>)
    3400:	2200      	movs	r2, #0
    3402:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    3404:	4b0c      	ldr	r3, [pc, #48]	; (3438 <hif_init+0x54>)
    3406:	2200      	movs	r2, #0
    3408:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    340a:	4b0c      	ldr	r3, [pc, #48]	; (343c <hif_init+0x58>)
    340c:	0018      	movs	r0, r3
    340e:	4b0c      	ldr	r3, [pc, #48]	; (3440 <hif_init+0x5c>)
    3410:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    3412:	4b0c      	ldr	r3, [pc, #48]	; (3444 <hif_init+0x60>)
    3414:	0019      	movs	r1, r3
    3416:	2003      	movs	r0, #3
    3418:	4b0b      	ldr	r3, [pc, #44]	; (3448 <hif_init+0x64>)
    341a:	4798      	blx	r3

	return M2M_SUCCESS;
    341c:	2300      	movs	r3, #0
}
    341e:	0018      	movs	r0, r3
    3420:	46bd      	mov	sp, r7
    3422:	b002      	add	sp, #8
    3424:	bd80      	pop	{r7, pc}
    3426:	46c0      	nop			; (mov r8, r8)
    3428:	200000cc 	.word	0x200000cc
    342c:	200000d0 	.word	0x200000d0
    3430:	200000c9 	.word	0x200000c9
    3434:	200000c8 	.word	0x200000c8
    3438:	200000cb 	.word	0x200000cb
    343c:	000031dd 	.word	0x000031dd
    3440:	000027e9 	.word	0x000027e9
    3444:	00003265 	.word	0x00003265
    3448:	00003e25 	.word	0x00003e25

0000344c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    344c:	b590      	push	{r4, r7, lr}
    344e:	b089      	sub	sp, #36	; 0x24
    3450:	af00      	add	r7, sp, #0
    3452:	0004      	movs	r4, r0
    3454:	0008      	movs	r0, r1
    3456:	603a      	str	r2, [r7, #0]
    3458:	0019      	movs	r1, r3
    345a:	1dfb      	adds	r3, r7, #7
    345c:	1c22      	adds	r2, r4, #0
    345e:	701a      	strb	r2, [r3, #0]
    3460:	1dbb      	adds	r3, r7, #6
    3462:	1c02      	adds	r2, r0, #0
    3464:	701a      	strb	r2, [r3, #0]
    3466:	1d3b      	adds	r3, r7, #4
    3468:	1c0a      	adds	r2, r1, #0
    346a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    346c:	231f      	movs	r3, #31
    346e:	18fb      	adds	r3, r7, r3
    3470:	22ff      	movs	r2, #255	; 0xff
    3472:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    3474:	1dbb      	adds	r3, r7, #6
    3476:	781b      	ldrb	r3, [r3, #0]
    3478:	227f      	movs	r2, #127	; 0x7f
    347a:	4013      	ands	r3, r2
    347c:	b2da      	uxtb	r2, r3
    347e:	2318      	movs	r3, #24
    3480:	18fb      	adds	r3, r7, r3
    3482:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    3484:	2318      	movs	r3, #24
    3486:	18fb      	adds	r3, r7, r3
    3488:	1dfa      	adds	r2, r7, #7
    348a:	7812      	ldrb	r2, [r2, #0]
    348c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    348e:	2318      	movs	r3, #24
    3490:	18fb      	adds	r3, r7, r3
    3492:	2208      	movs	r2, #8
    3494:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    3496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3498:	2b00      	cmp	r3, #0
    349a:	d011      	beq.n	34c0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    349c:	2318      	movs	r3, #24
    349e:	18fb      	adds	r3, r7, r3
    34a0:	885b      	ldrh	r3, [r3, #2]
    34a2:	b29a      	uxth	r2, r3
    34a4:	2338      	movs	r3, #56	; 0x38
    34a6:	18f9      	adds	r1, r7, r3
    34a8:	2334      	movs	r3, #52	; 0x34
    34aa:	18fb      	adds	r3, r7, r3
    34ac:	8809      	ldrh	r1, [r1, #0]
    34ae:	881b      	ldrh	r3, [r3, #0]
    34b0:	18cb      	adds	r3, r1, r3
    34b2:	b29b      	uxth	r3, r3
    34b4:	18d3      	adds	r3, r2, r3
    34b6:	b29a      	uxth	r2, r3
    34b8:	2318      	movs	r3, #24
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	805a      	strh	r2, [r3, #2]
    34be:	e00a      	b.n	34d6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    34c0:	2318      	movs	r3, #24
    34c2:	18fb      	adds	r3, r7, r3
    34c4:	885b      	ldrh	r3, [r3, #2]
    34c6:	b29a      	uxth	r2, r3
    34c8:	1d3b      	adds	r3, r7, #4
    34ca:	881b      	ldrh	r3, [r3, #0]
    34cc:	18d3      	adds	r3, r2, r3
    34ce:	b29a      	uxth	r2, r3
    34d0:	2318      	movs	r3, #24
    34d2:	18fb      	adds	r3, r7, r3
    34d4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    34d6:	231f      	movs	r3, #31
    34d8:	18fc      	adds	r4, r7, r3
    34da:	4b9b      	ldr	r3, [pc, #620]	; (3748 <hif_send+0x2fc>)
    34dc:	4798      	blx	r3
    34de:	0003      	movs	r3, r0
    34e0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    34e2:	231f      	movs	r3, #31
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	781b      	ldrb	r3, [r3, #0]
    34e8:	b25b      	sxtb	r3, r3
    34ea:	2b00      	cmp	r3, #0
    34ec:	d000      	beq.n	34f0 <hif_send+0xa4>
    34ee:	e103      	b.n	36f8 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    34f0:	2300      	movs	r3, #0
    34f2:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    34f4:	230e      	movs	r3, #14
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	2200      	movs	r2, #0
    34fa:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    34fc:	2300      	movs	r3, #0
    34fe:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    3500:	1dfb      	adds	r3, r7, #7
    3502:	781a      	ldrb	r2, [r3, #0]
    3504:	697b      	ldr	r3, [r7, #20]
    3506:	4313      	orrs	r3, r2
    3508:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    350a:	1dbb      	adds	r3, r7, #6
    350c:	781b      	ldrb	r3, [r3, #0]
    350e:	021a      	lsls	r2, r3, #8
    3510:	697b      	ldr	r3, [r7, #20]
    3512:	4313      	orrs	r3, r2
    3514:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    3516:	2318      	movs	r3, #24
    3518:	18fb      	adds	r3, r7, r3
    351a:	885b      	ldrh	r3, [r3, #2]
    351c:	b29b      	uxth	r3, r3
    351e:	041a      	lsls	r2, r3, #16
    3520:	697b      	ldr	r3, [r7, #20]
    3522:	4313      	orrs	r3, r2
    3524:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    3526:	697b      	ldr	r3, [r7, #20]
    3528:	221f      	movs	r2, #31
    352a:	18bc      	adds	r4, r7, r2
    352c:	4a87      	ldr	r2, [pc, #540]	; (374c <hif_send+0x300>)
    352e:	0019      	movs	r1, r3
    3530:	0010      	movs	r0, r2
    3532:	4b87      	ldr	r3, [pc, #540]	; (3750 <hif_send+0x304>)
    3534:	4798      	blx	r3
    3536:	0003      	movs	r3, r0
    3538:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    353a:	231f      	movs	r3, #31
    353c:	18fb      	adds	r3, r7, r3
    353e:	781b      	ldrb	r3, [r3, #0]
    3540:	b25b      	sxtb	r3, r3
    3542:	2b00      	cmp	r3, #0
    3544:	d000      	beq.n	3548 <hif_send+0xfc>
    3546:	e0ee      	b.n	3726 <hif_send+0x2da>


		reg = 0;
    3548:	2300      	movs	r3, #0
    354a:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    354c:	697b      	ldr	r3, [r7, #20]
    354e:	2202      	movs	r2, #2
    3550:	4313      	orrs	r3, r2
    3552:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    3554:	697b      	ldr	r3, [r7, #20]
    3556:	221f      	movs	r2, #31
    3558:	18bc      	adds	r4, r7, r2
    355a:	4a7e      	ldr	r2, [pc, #504]	; (3754 <hif_send+0x308>)
    355c:	0019      	movs	r1, r3
    355e:	0010      	movs	r0, r2
    3560:	4b7b      	ldr	r3, [pc, #492]	; (3750 <hif_send+0x304>)
    3562:	4798      	blx	r3
    3564:	0003      	movs	r3, r0
    3566:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    3568:	231f      	movs	r3, #31
    356a:	18fb      	adds	r3, r7, r3
    356c:	781b      	ldrb	r3, [r3, #0]
    356e:	b25b      	sxtb	r3, r3
    3570:	2b00      	cmp	r3, #0
    3572:	d000      	beq.n	3576 <hif_send+0x12a>
    3574:	e0d9      	b.n	372a <hif_send+0x2de>
		dma_addr = 0;
    3576:	2300      	movs	r3, #0
    3578:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    357a:	230e      	movs	r3, #14
    357c:	18fb      	adds	r3, r7, r3
    357e:	2200      	movs	r2, #0
    3580:	801a      	strh	r2, [r3, #0]
    3582:	e031      	b.n	35e8 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    3584:	231f      	movs	r3, #31
    3586:	18fc      	adds	r4, r7, r3
    3588:	2314      	movs	r3, #20
    358a:	18fb      	adds	r3, r7, r3
    358c:	4a71      	ldr	r2, [pc, #452]	; (3754 <hif_send+0x308>)
    358e:	0019      	movs	r1, r3
    3590:	0010      	movs	r0, r2
    3592:	4b71      	ldr	r3, [pc, #452]	; (3758 <hif_send+0x30c>)
    3594:	4798      	blx	r3
    3596:	0003      	movs	r3, r0
    3598:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    359a:	231f      	movs	r3, #31
    359c:	18fb      	adds	r3, r7, r3
    359e:	781b      	ldrb	r3, [r3, #0]
    35a0:	b25b      	sxtb	r3, r3
    35a2:	2b00      	cmp	r3, #0
    35a4:	d128      	bne.n	35f8 <hif_send+0x1ac>
			if (!(reg & 0x2))
    35a6:	697b      	ldr	r3, [r7, #20]
    35a8:	2202      	movs	r2, #2
    35aa:	4013      	ands	r3, r2
    35ac:	d113      	bne.n	35d6 <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    35ae:	231f      	movs	r3, #31
    35b0:	18fc      	adds	r4, r7, r3
    35b2:	2310      	movs	r3, #16
    35b4:	18fb      	adds	r3, r7, r3
    35b6:	4a69      	ldr	r2, [pc, #420]	; (375c <hif_send+0x310>)
    35b8:	0019      	movs	r1, r3
    35ba:	0010      	movs	r0, r2
    35bc:	4b66      	ldr	r3, [pc, #408]	; (3758 <hif_send+0x30c>)
    35be:	4798      	blx	r3
    35c0:	0003      	movs	r3, r0
    35c2:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    35c4:	231f      	movs	r3, #31
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	b25b      	sxtb	r3, r3
    35cc:	2b00      	cmp	r3, #0
    35ce:	d015      	beq.n	35fc <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    35d0:	2300      	movs	r3, #0
    35d2:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    35d4:	e012      	b.n	35fc <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    35d6:	230e      	movs	r3, #14
    35d8:	18fb      	adds	r3, r7, r3
    35da:	881b      	ldrh	r3, [r3, #0]
    35dc:	b29b      	uxth	r3, r3
    35de:	3301      	adds	r3, #1
    35e0:	b29a      	uxth	r2, r3
    35e2:	230e      	movs	r3, #14
    35e4:	18fb      	adds	r3, r7, r3
    35e6:	801a      	strh	r2, [r3, #0]
    35e8:	230e      	movs	r3, #14
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	881b      	ldrh	r3, [r3, #0]
    35ee:	b29b      	uxth	r3, r3
    35f0:	4a5b      	ldr	r2, [pc, #364]	; (3760 <hif_send+0x314>)
    35f2:	4293      	cmp	r3, r2
    35f4:	d9c6      	bls.n	3584 <hif_send+0x138>
    35f6:	e002      	b.n	35fe <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    35f8:	46c0      	nop			; (mov r8, r8)
    35fa:	e000      	b.n	35fe <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    35fc:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    35fe:	693b      	ldr	r3, [r7, #16]
    3600:	2b00      	cmp	r3, #0
    3602:	d100      	bne.n	3606 <hif_send+0x1ba>
    3604:	e073      	b.n	36ee <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    3606:	693b      	ldr	r3, [r7, #16]
    3608:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    360a:	2318      	movs	r3, #24
    360c:	18fb      	adds	r3, r7, r3
    360e:	885b      	ldrh	r3, [r3, #2]
    3610:	b29a      	uxth	r2, r3
    3612:	2318      	movs	r3, #24
    3614:	18fb      	adds	r3, r7, r3
    3616:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    3618:	68bb      	ldr	r3, [r7, #8]
    361a:	221f      	movs	r2, #31
    361c:	18bc      	adds	r4, r7, r2
    361e:	2218      	movs	r2, #24
    3620:	18b9      	adds	r1, r7, r2
    3622:	2208      	movs	r2, #8
    3624:	0018      	movs	r0, r3
    3626:	4b4f      	ldr	r3, [pc, #316]	; (3764 <hif_send+0x318>)
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
    362c:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    362e:	231f      	movs	r3, #31
    3630:	18fb      	adds	r3, r7, r3
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	b25b      	sxtb	r3, r3
    3636:	2b00      	cmp	r3, #0
    3638:	d000      	beq.n	363c <hif_send+0x1f0>
    363a:	e078      	b.n	372e <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    363c:	68bb      	ldr	r3, [r7, #8]
    363e:	3308      	adds	r3, #8
    3640:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    3642:	683b      	ldr	r3, [r7, #0]
    3644:	2b00      	cmp	r3, #0
    3646:	d015      	beq.n	3674 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    3648:	68b8      	ldr	r0, [r7, #8]
    364a:	1d3b      	adds	r3, r7, #4
    364c:	881a      	ldrh	r2, [r3, #0]
    364e:	231f      	movs	r3, #31
    3650:	18fc      	adds	r4, r7, r3
    3652:	683b      	ldr	r3, [r7, #0]
    3654:	0019      	movs	r1, r3
    3656:	4b43      	ldr	r3, [pc, #268]	; (3764 <hif_send+0x318>)
    3658:	4798      	blx	r3
    365a:	0003      	movs	r3, r0
    365c:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    365e:	231f      	movs	r3, #31
    3660:	18fb      	adds	r3, r7, r3
    3662:	781b      	ldrb	r3, [r3, #0]
    3664:	b25b      	sxtb	r3, r3
    3666:	2b00      	cmp	r3, #0
    3668:	d163      	bne.n	3732 <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    366a:	1d3b      	adds	r3, r7, #4
    366c:	881a      	ldrh	r2, [r3, #0]
    366e:	68bb      	ldr	r3, [r7, #8]
    3670:	18d3      	adds	r3, r2, r3
    3672:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    3674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3676:	2b00      	cmp	r3, #0
    3678:	d021      	beq.n	36be <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    367a:	2338      	movs	r3, #56	; 0x38
    367c:	18fb      	adds	r3, r7, r3
    367e:	881a      	ldrh	r2, [r3, #0]
    3680:	1d3b      	adds	r3, r7, #4
    3682:	881b      	ldrh	r3, [r3, #0]
    3684:	1ad3      	subs	r3, r2, r3
    3686:	001a      	movs	r2, r3
    3688:	68bb      	ldr	r3, [r7, #8]
    368a:	18d3      	adds	r3, r2, r3
    368c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    368e:	68b8      	ldr	r0, [r7, #8]
    3690:	2334      	movs	r3, #52	; 0x34
    3692:	18fb      	adds	r3, r7, r3
    3694:	881a      	ldrh	r2, [r3, #0]
    3696:	231f      	movs	r3, #31
    3698:	18fc      	adds	r4, r7, r3
    369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    369c:	0019      	movs	r1, r3
    369e:	4b31      	ldr	r3, [pc, #196]	; (3764 <hif_send+0x318>)
    36a0:	4798      	blx	r3
    36a2:	0003      	movs	r3, r0
    36a4:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    36a6:	231f      	movs	r3, #31
    36a8:	18fb      	adds	r3, r7, r3
    36aa:	781b      	ldrb	r3, [r3, #0]
    36ac:	b25b      	sxtb	r3, r3
    36ae:	2b00      	cmp	r3, #0
    36b0:	d141      	bne.n	3736 <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    36b2:	2334      	movs	r3, #52	; 0x34
    36b4:	18fb      	adds	r3, r7, r3
    36b6:	881a      	ldrh	r2, [r3, #0]
    36b8:	68bb      	ldr	r3, [r7, #8]
    36ba:	18d3      	adds	r3, r2, r3
    36bc:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    36be:	693b      	ldr	r3, [r7, #16]
    36c0:	009b      	lsls	r3, r3, #2
    36c2:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    36c4:	697b      	ldr	r3, [r7, #20]
    36c6:	2202      	movs	r2, #2
    36c8:	4313      	orrs	r3, r2
    36ca:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    36cc:	697b      	ldr	r3, [r7, #20]
    36ce:	221f      	movs	r2, #31
    36d0:	18bc      	adds	r4, r7, r2
    36d2:	4a25      	ldr	r2, [pc, #148]	; (3768 <hif_send+0x31c>)
    36d4:	0019      	movs	r1, r3
    36d6:	0010      	movs	r0, r2
    36d8:	4b1d      	ldr	r3, [pc, #116]	; (3750 <hif_send+0x304>)
    36da:	4798      	blx	r3
    36dc:	0003      	movs	r3, r0
    36de:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    36e0:	231f      	movs	r3, #31
    36e2:	18fb      	adds	r3, r7, r3
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	b25b      	sxtb	r3, r3
    36e8:	2b00      	cmp	r3, #0
    36ea:	d015      	beq.n	3718 <hif_send+0x2cc>
    36ec:	e024      	b.n	3738 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    36ee:	231f      	movs	r3, #31
    36f0:	18fb      	adds	r3, r7, r3
    36f2:	22fd      	movs	r2, #253	; 0xfd
    36f4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    36f6:	e01f      	b.n	3738 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    36f8:	23a0      	movs	r3, #160	; 0xa0
    36fa:	33ff      	adds	r3, #255	; 0xff
    36fc:	001a      	movs	r2, r3
    36fe:	491b      	ldr	r1, [pc, #108]	; (376c <hif_send+0x320>)
    3700:	4b1b      	ldr	r3, [pc, #108]	; (3770 <hif_send+0x324>)
    3702:	0018      	movs	r0, r3
    3704:	4b1b      	ldr	r3, [pc, #108]	; (3774 <hif_send+0x328>)
    3706:	4798      	blx	r3
    3708:	4b1b      	ldr	r3, [pc, #108]	; (3778 <hif_send+0x32c>)
    370a:	0018      	movs	r0, r3
    370c:	4b1b      	ldr	r3, [pc, #108]	; (377c <hif_send+0x330>)
    370e:	4798      	blx	r3
    3710:	200d      	movs	r0, #13
    3712:	4b1b      	ldr	r3, [pc, #108]	; (3780 <hif_send+0x334>)
    3714:	4798      	blx	r3
		goto ERR1;
    3716:	e00f      	b.n	3738 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    3718:	231f      	movs	r3, #31
    371a:	18fc      	adds	r4, r7, r3
    371c:	4b19      	ldr	r3, [pc, #100]	; (3784 <hif_send+0x338>)
    371e:	4798      	blx	r3
    3720:	0003      	movs	r3, r0
    3722:	7023      	strb	r3, [r4, #0]
    3724:	e008      	b.n	3738 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	e006      	b.n	3738 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    372a:	46c0      	nop			; (mov r8, r8)
    372c:	e004      	b.n	3738 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	e002      	b.n	3738 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    3732:	46c0      	nop			; (mov r8, r8)
    3734:	e000      	b.n	3738 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    3736:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    3738:	231f      	movs	r3, #31
    373a:	18fb      	adds	r3, r7, r3
    373c:	781b      	ldrb	r3, [r3, #0]
    373e:	b25b      	sxtb	r3, r3
}
    3740:	0018      	movs	r0, r3
    3742:	46bd      	mov	sp, r7
    3744:	b009      	add	sp, #36	; 0x24
    3746:	bd90      	pop	{r4, r7, pc}
    3748:	00003281 	.word	0x00003281
    374c:	0000108c 	.word	0x0000108c
    3750:	000053b1 	.word	0x000053b1
    3754:	00001078 	.word	0x00001078
    3758:	0000538d 	.word	0x0000538d
    375c:	00150400 	.word	0x00150400
    3760:	000003e7 	.word	0x000003e7
    3764:	000054f9 	.word	0x000054f9
    3768:	0000106c 	.word	0x0000106c
    376c:	00012930 	.word	0x00012930
    3770:	000126d0 	.word	0x000126d0
    3774:	0001121d 	.word	0x0001121d
    3778:	000126e4 	.word	0x000126e4
    377c:	0001133d 	.word	0x0001133d
    3780:	00011251 	.word	0x00011251
    3784:	00003319 	.word	0x00003319

00003788 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    3788:	b590      	push	{r4, r7, lr}
    378a:	b087      	sub	sp, #28
    378c:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    378e:	230f      	movs	r3, #15
    3790:	18fb      	adds	r3, r7, r3
    3792:	22fa      	movs	r2, #250	; 0xfa
    3794:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    3796:	230f      	movs	r3, #15
    3798:	18fc      	adds	r4, r7, r3
    379a:	4bda      	ldr	r3, [pc, #872]	; (3b04 <hif_isr+0x37c>)
    379c:	4798      	blx	r3
    379e:	0003      	movs	r3, r0
    37a0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    37a2:	230f      	movs	r3, #15
    37a4:	18fb      	adds	r3, r7, r3
    37a6:	781b      	ldrb	r3, [r3, #0]
    37a8:	b25b      	sxtb	r3, r3
    37aa:	2b00      	cmp	r3, #0
    37ac:	d000      	beq.n	37b0 <hif_isr+0x28>
    37ae:	e192      	b.n	3ad6 <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    37b0:	230f      	movs	r3, #15
    37b2:	18fc      	adds	r4, r7, r3
    37b4:	2308      	movs	r3, #8
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	4ad3      	ldr	r2, [pc, #844]	; (3b08 <hif_isr+0x380>)
    37ba:	0019      	movs	r1, r3
    37bc:	0010      	movs	r0, r2
    37be:	4bd3      	ldr	r3, [pc, #844]	; (3b0c <hif_isr+0x384>)
    37c0:	4798      	blx	r3
    37c2:	0003      	movs	r3, r0
    37c4:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    37c6:	230f      	movs	r3, #15
    37c8:	18fb      	adds	r3, r7, r3
    37ca:	781b      	ldrb	r3, [r3, #0]
    37cc:	b25b      	sxtb	r3, r3
    37ce:	2b00      	cmp	r3, #0
    37d0:	d000      	beq.n	37d4 <hif_isr+0x4c>
    37d2:	e172      	b.n	3aba <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    37d4:	68bb      	ldr	r3, [r7, #8]
    37d6:	2201      	movs	r2, #1
    37d8:	4013      	ands	r3, r2
    37da:	d100      	bne.n	37de <hif_isr+0x56>
    37dc:	e15c      	b.n	3a98 <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    37de:	2000      	movs	r0, #0
    37e0:	4bcb      	ldr	r3, [pc, #812]	; (3b10 <hif_isr+0x388>)
    37e2:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    37e4:	68bb      	ldr	r3, [r7, #8]
    37e6:	2201      	movs	r2, #1
    37e8:	4393      	bics	r3, r2
    37ea:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    37ec:	68bb      	ldr	r3, [r7, #8]
    37ee:	220f      	movs	r2, #15
    37f0:	18bc      	adds	r4, r7, r2
    37f2:	4ac5      	ldr	r2, [pc, #788]	; (3b08 <hif_isr+0x380>)
    37f4:	0019      	movs	r1, r3
    37f6:	0010      	movs	r0, r2
    37f8:	4bc6      	ldr	r3, [pc, #792]	; (3b14 <hif_isr+0x38c>)
    37fa:	4798      	blx	r3
    37fc:	0003      	movs	r3, r0
    37fe:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    3800:	230f      	movs	r3, #15
    3802:	18fb      	adds	r3, r7, r3
    3804:	781b      	ldrb	r3, [r3, #0]
    3806:	b25b      	sxtb	r3, r3
    3808:	2b00      	cmp	r3, #0
    380a:	d000      	beq.n	380e <hif_isr+0x86>
    380c:	e1bc      	b.n	3b88 <hif_isr+0x400>
				gu8HifSizeDone = 0;
    380e:	4bc2      	ldr	r3, [pc, #776]	; (3b18 <hif_isr+0x390>)
    3810:	2200      	movs	r2, #0
    3812:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    3814:	68bb      	ldr	r3, [r7, #8]
    3816:	089b      	lsrs	r3, r3, #2
    3818:	b29a      	uxth	r2, r3
    381a:	230c      	movs	r3, #12
    381c:	18fb      	adds	r3, r7, r3
    381e:	0512      	lsls	r2, r2, #20
    3820:	0d12      	lsrs	r2, r2, #20
    3822:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    3824:	230c      	movs	r3, #12
    3826:	18fb      	adds	r3, r7, r3
    3828:	881b      	ldrh	r3, [r3, #0]
    382a:	2b00      	cmp	r3, #0
    382c:	d100      	bne.n	3830 <hif_isr+0xa8>
    382e:	e121      	b.n	3a74 <hif_isr+0x2ec>
					uint32 address = 0;
    3830:	2300      	movs	r3, #0
    3832:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    3834:	230f      	movs	r3, #15
    3836:	18fc      	adds	r4, r7, r3
    3838:	003b      	movs	r3, r7
    383a:	4ab8      	ldr	r2, [pc, #736]	; (3b1c <hif_isr+0x394>)
    383c:	0019      	movs	r1, r3
    383e:	0010      	movs	r0, r2
    3840:	4bb2      	ldr	r3, [pc, #712]	; (3b0c <hif_isr+0x384>)
    3842:	4798      	blx	r3
    3844:	0003      	movs	r3, r0
    3846:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    3848:	230f      	movs	r3, #15
    384a:	18fb      	adds	r3, r7, r3
    384c:	781b      	ldrb	r3, [r3, #0]
    384e:	b25b      	sxtb	r3, r3
    3850:	2b00      	cmp	r3, #0
    3852:	d011      	beq.n	3878 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    3854:	23e7      	movs	r3, #231	; 0xe7
    3856:	005a      	lsls	r2, r3, #1
    3858:	49b1      	ldr	r1, [pc, #708]	; (3b20 <hif_isr+0x398>)
    385a:	4bb2      	ldr	r3, [pc, #712]	; (3b24 <hif_isr+0x39c>)
    385c:	0018      	movs	r0, r3
    385e:	4bb2      	ldr	r3, [pc, #712]	; (3b28 <hif_isr+0x3a0>)
    3860:	4798      	blx	r3
    3862:	4bb2      	ldr	r3, [pc, #712]	; (3b2c <hif_isr+0x3a4>)
    3864:	0018      	movs	r0, r3
    3866:	4bb2      	ldr	r3, [pc, #712]	; (3b30 <hif_isr+0x3a8>)
    3868:	4798      	blx	r3
    386a:	200d      	movs	r0, #13
    386c:	4bb1      	ldr	r3, [pc, #708]	; (3b34 <hif_isr+0x3ac>)
    386e:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    3870:	2001      	movs	r0, #1
    3872:	4ba7      	ldr	r3, [pc, #668]	; (3b10 <hif_isr+0x388>)
    3874:	4798      	blx	r3
						goto ERR1;
    3876:	e188      	b.n	3b8a <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    3878:	683b      	ldr	r3, [r7, #0]
    387a:	220f      	movs	r2, #15
    387c:	18bc      	adds	r4, r7, r2
    387e:	1d39      	adds	r1, r7, #4
    3880:	2204      	movs	r2, #4
    3882:	0018      	movs	r0, r3
    3884:	4bac      	ldr	r3, [pc, #688]	; (3b38 <hif_isr+0x3b0>)
    3886:	4798      	blx	r3
    3888:	0003      	movs	r3, r0
    388a:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    388c:	1d3b      	adds	r3, r7, #4
    388e:	885b      	ldrh	r3, [r3, #2]
    3890:	b29a      	uxth	r2, r3
    3892:	1d3b      	adds	r3, r7, #4
    3894:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    3896:	230f      	movs	r3, #15
    3898:	18fb      	adds	r3, r7, r3
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	b25b      	sxtb	r3, r3
    389e:	2b00      	cmp	r3, #0
    38a0:	d011      	beq.n	38c6 <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    38a2:	23eb      	movs	r3, #235	; 0xeb
    38a4:	005a      	lsls	r2, r3, #1
    38a6:	499e      	ldr	r1, [pc, #632]	; (3b20 <hif_isr+0x398>)
    38a8:	4b9e      	ldr	r3, [pc, #632]	; (3b24 <hif_isr+0x39c>)
    38aa:	0018      	movs	r0, r3
    38ac:	4b9e      	ldr	r3, [pc, #632]	; (3b28 <hif_isr+0x3a0>)
    38ae:	4798      	blx	r3
    38b0:	4ba2      	ldr	r3, [pc, #648]	; (3b3c <hif_isr+0x3b4>)
    38b2:	0018      	movs	r0, r3
    38b4:	4b9e      	ldr	r3, [pc, #632]	; (3b30 <hif_isr+0x3a8>)
    38b6:	4798      	blx	r3
    38b8:	200d      	movs	r0, #13
    38ba:	4b9e      	ldr	r3, [pc, #632]	; (3b34 <hif_isr+0x3ac>)
    38bc:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    38be:	2001      	movs	r0, #1
    38c0:	4b93      	ldr	r3, [pc, #588]	; (3b10 <hif_isr+0x388>)
    38c2:	4798      	blx	r3
						goto ERR1;
    38c4:	e161      	b.n	3b8a <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    38c6:	1d3b      	adds	r3, r7, #4
    38c8:	885b      	ldrh	r3, [r3, #2]
    38ca:	b29b      	uxth	r3, r3
    38cc:	220c      	movs	r2, #12
    38ce:	18ba      	adds	r2, r7, r2
    38d0:	8812      	ldrh	r2, [r2, #0]
    38d2:	429a      	cmp	r2, r3
    38d4:	d02e      	beq.n	3934 <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    38d6:	230c      	movs	r3, #12
    38d8:	18fb      	adds	r3, r7, r3
    38da:	881b      	ldrh	r3, [r3, #0]
    38dc:	1d3a      	adds	r2, r7, #4
    38de:	8852      	ldrh	r2, [r2, #2]
    38e0:	b292      	uxth	r2, r2
    38e2:	1a9b      	subs	r3, r3, r2
    38e4:	2b04      	cmp	r3, #4
    38e6:	dd25      	ble.n	3934 <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    38e8:	23e0      	movs	r3, #224	; 0xe0
    38ea:	33ff      	adds	r3, #255	; 0xff
    38ec:	001a      	movs	r2, r3
    38ee:	498c      	ldr	r1, [pc, #560]	; (3b20 <hif_isr+0x398>)
    38f0:	4b8c      	ldr	r3, [pc, #560]	; (3b24 <hif_isr+0x39c>)
    38f2:	0018      	movs	r0, r3
    38f4:	4b8c      	ldr	r3, [pc, #560]	; (3b28 <hif_isr+0x3a0>)
    38f6:	4798      	blx	r3
    38f8:	230c      	movs	r3, #12
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	8819      	ldrh	r1, [r3, #0]
    38fe:	1d3b      	adds	r3, r7, #4
    3900:	885b      	ldrh	r3, [r3, #2]
    3902:	b29b      	uxth	r3, r3
    3904:	001a      	movs	r2, r3
    3906:	1d3b      	adds	r3, r7, #4
    3908:	781b      	ldrb	r3, [r3, #0]
    390a:	b2db      	uxtb	r3, r3
    390c:	001c      	movs	r4, r3
    390e:	1d3b      	adds	r3, r7, #4
    3910:	785b      	ldrb	r3, [r3, #1]
    3912:	b2db      	uxtb	r3, r3
    3914:	488a      	ldr	r0, [pc, #552]	; (3b40 <hif_isr+0x3b8>)
    3916:	9300      	str	r3, [sp, #0]
    3918:	0023      	movs	r3, r4
    391a:	4c83      	ldr	r4, [pc, #524]	; (3b28 <hif_isr+0x3a0>)
    391c:	47a0      	blx	r4
    391e:	200d      	movs	r0, #13
    3920:	4b84      	ldr	r3, [pc, #528]	; (3b34 <hif_isr+0x3ac>)
    3922:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    3924:	2001      	movs	r0, #1
    3926:	4b7a      	ldr	r3, [pc, #488]	; (3b10 <hif_isr+0x388>)
    3928:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    392a:	230f      	movs	r3, #15
    392c:	18fb      	adds	r3, r7, r3
    392e:	22fa      	movs	r2, #250	; 0xfa
    3930:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    3932:	e12a      	b.n	3b8a <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    3934:	1d3b      	adds	r3, r7, #4
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	b2db      	uxtb	r3, r3
    393a:	2b01      	cmp	r3, #1
    393c:	d112      	bne.n	3964 <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    393e:	4b81      	ldr	r3, [pc, #516]	; (3b44 <hif_isr+0x3bc>)
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	2b00      	cmp	r3, #0
    3944:	d100      	bne.n	3948 <hif_isr+0x1c0>
    3946:	e07c      	b.n	3a42 <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3948:	4b7e      	ldr	r3, [pc, #504]	; (3b44 <hif_isr+0x3bc>)
    394a:	681b      	ldr	r3, [r3, #0]
    394c:	1d3a      	adds	r2, r7, #4
    394e:	7852      	ldrb	r2, [r2, #1]
    3950:	b2d0      	uxtb	r0, r2
    3952:	1d3a      	adds	r2, r7, #4
    3954:	8852      	ldrh	r2, [r2, #2]
    3956:	b292      	uxth	r2, r2
    3958:	3a08      	subs	r2, #8
    395a:	b291      	uxth	r1, r2
    395c:	683a      	ldr	r2, [r7, #0]
    395e:	3208      	adds	r2, #8
    3960:	4798      	blx	r3
    3962:	e06e      	b.n	3a42 <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    3964:	1d3b      	adds	r3, r7, #4
    3966:	781b      	ldrb	r3, [r3, #0]
    3968:	b2db      	uxtb	r3, r3
    396a:	2b02      	cmp	r3, #2
    396c:	d111      	bne.n	3992 <hif_isr+0x20a>
					{
						if(pfIpCb)
    396e:	4b76      	ldr	r3, [pc, #472]	; (3b48 <hif_isr+0x3c0>)
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	2b00      	cmp	r3, #0
    3974:	d065      	beq.n	3a42 <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3976:	4b74      	ldr	r3, [pc, #464]	; (3b48 <hif_isr+0x3c0>)
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	1d3a      	adds	r2, r7, #4
    397c:	7852      	ldrb	r2, [r2, #1]
    397e:	b2d0      	uxtb	r0, r2
    3980:	1d3a      	adds	r2, r7, #4
    3982:	8852      	ldrh	r2, [r2, #2]
    3984:	b292      	uxth	r2, r2
    3986:	3a08      	subs	r2, #8
    3988:	b291      	uxth	r1, r2
    398a:	683a      	ldr	r2, [r7, #0]
    398c:	3208      	adds	r2, #8
    398e:	4798      	blx	r3
    3990:	e057      	b.n	3a42 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    3992:	1d3b      	adds	r3, r7, #4
    3994:	781b      	ldrb	r3, [r3, #0]
    3996:	b2db      	uxtb	r3, r3
    3998:	2b04      	cmp	r3, #4
    399a:	d111      	bne.n	39c0 <hif_isr+0x238>
					{
						if(pfOtaCb)
    399c:	4b6b      	ldr	r3, [pc, #428]	; (3b4c <hif_isr+0x3c4>)
    399e:	681b      	ldr	r3, [r3, #0]
    39a0:	2b00      	cmp	r3, #0
    39a2:	d04e      	beq.n	3a42 <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    39a4:	4b69      	ldr	r3, [pc, #420]	; (3b4c <hif_isr+0x3c4>)
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	1d3a      	adds	r2, r7, #4
    39aa:	7852      	ldrb	r2, [r2, #1]
    39ac:	b2d0      	uxtb	r0, r2
    39ae:	1d3a      	adds	r2, r7, #4
    39b0:	8852      	ldrh	r2, [r2, #2]
    39b2:	b292      	uxth	r2, r2
    39b4:	3a08      	subs	r2, #8
    39b6:	b291      	uxth	r1, r2
    39b8:	683a      	ldr	r2, [r7, #0]
    39ba:	3208      	adds	r2, #8
    39bc:	4798      	blx	r3
    39be:	e040      	b.n	3a42 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    39c0:	1d3b      	adds	r3, r7, #4
    39c2:	781b      	ldrb	r3, [r3, #0]
    39c4:	b2db      	uxtb	r3, r3
    39c6:	2b06      	cmp	r3, #6
    39c8:	d111      	bne.n	39ee <hif_isr+0x266>
					{
						if(pfCryptoCb)
    39ca:	4b61      	ldr	r3, [pc, #388]	; (3b50 <hif_isr+0x3c8>)
    39cc:	681b      	ldr	r3, [r3, #0]
    39ce:	2b00      	cmp	r3, #0
    39d0:	d037      	beq.n	3a42 <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    39d2:	4b5f      	ldr	r3, [pc, #380]	; (3b50 <hif_isr+0x3c8>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	1d3a      	adds	r2, r7, #4
    39d8:	7852      	ldrb	r2, [r2, #1]
    39da:	b2d0      	uxtb	r0, r2
    39dc:	1d3a      	adds	r2, r7, #4
    39de:	8852      	ldrh	r2, [r2, #2]
    39e0:	b292      	uxth	r2, r2
    39e2:	3a08      	subs	r2, #8
    39e4:	b291      	uxth	r1, r2
    39e6:	683a      	ldr	r2, [r7, #0]
    39e8:	3208      	adds	r2, #8
    39ea:	4798      	blx	r3
    39ec:	e029      	b.n	3a42 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    39ee:	1d3b      	adds	r3, r7, #4
    39f0:	781b      	ldrb	r3, [r3, #0]
    39f2:	b2db      	uxtb	r3, r3
    39f4:	2b07      	cmp	r3, #7
    39f6:	d111      	bne.n	3a1c <hif_isr+0x294>
					{
						if(pfSigmaCb)
    39f8:	4b56      	ldr	r3, [pc, #344]	; (3b54 <hif_isr+0x3cc>)
    39fa:	681b      	ldr	r3, [r3, #0]
    39fc:	2b00      	cmp	r3, #0
    39fe:	d020      	beq.n	3a42 <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3a00:	4b54      	ldr	r3, [pc, #336]	; (3b54 <hif_isr+0x3cc>)
    3a02:	681b      	ldr	r3, [r3, #0]
    3a04:	1d3a      	adds	r2, r7, #4
    3a06:	7852      	ldrb	r2, [r2, #1]
    3a08:	b2d0      	uxtb	r0, r2
    3a0a:	1d3a      	adds	r2, r7, #4
    3a0c:	8852      	ldrh	r2, [r2, #2]
    3a0e:	b292      	uxth	r2, r2
    3a10:	3a08      	subs	r2, #8
    3a12:	b291      	uxth	r1, r2
    3a14:	683a      	ldr	r2, [r7, #0]
    3a16:	3208      	adds	r2, #8
    3a18:	4798      	blx	r3
    3a1a:	e012      	b.n	3a42 <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    3a1c:	4a4e      	ldr	r2, [pc, #312]	; (3b58 <hif_isr+0x3d0>)
    3a1e:	4940      	ldr	r1, [pc, #256]	; (3b20 <hif_isr+0x398>)
    3a20:	4b40      	ldr	r3, [pc, #256]	; (3b24 <hif_isr+0x39c>)
    3a22:	0018      	movs	r0, r3
    3a24:	4b40      	ldr	r3, [pc, #256]	; (3b28 <hif_isr+0x3a0>)
    3a26:	4798      	blx	r3
    3a28:	4b4c      	ldr	r3, [pc, #304]	; (3b5c <hif_isr+0x3d4>)
    3a2a:	0018      	movs	r0, r3
    3a2c:	4b40      	ldr	r3, [pc, #256]	; (3b30 <hif_isr+0x3a8>)
    3a2e:	4798      	blx	r3
    3a30:	200d      	movs	r0, #13
    3a32:	4b40      	ldr	r3, [pc, #256]	; (3b34 <hif_isr+0x3ac>)
    3a34:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    3a36:	230f      	movs	r3, #15
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	22fa      	movs	r2, #250	; 0xfa
    3a3c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	e0a3      	b.n	3b8a <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    3a42:	4b35      	ldr	r3, [pc, #212]	; (3b18 <hif_isr+0x390>)
    3a44:	781b      	ldrb	r3, [r3, #0]
    3a46:	b2db      	uxtb	r3, r3
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d153      	bne.n	3af4 <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    3a4c:	4a44      	ldr	r2, [pc, #272]	; (3b60 <hif_isr+0x3d8>)
    3a4e:	4934      	ldr	r1, [pc, #208]	; (3b20 <hif_isr+0x398>)
    3a50:	4b34      	ldr	r3, [pc, #208]	; (3b24 <hif_isr+0x39c>)
    3a52:	0018      	movs	r0, r3
    3a54:	4b34      	ldr	r3, [pc, #208]	; (3b28 <hif_isr+0x3a0>)
    3a56:	4798      	blx	r3
    3a58:	4b42      	ldr	r3, [pc, #264]	; (3b64 <hif_isr+0x3dc>)
    3a5a:	0018      	movs	r0, r3
    3a5c:	4b34      	ldr	r3, [pc, #208]	; (3b30 <hif_isr+0x3a8>)
    3a5e:	4798      	blx	r3
    3a60:	200d      	movs	r0, #13
    3a62:	4b34      	ldr	r3, [pc, #208]	; (3b34 <hif_isr+0x3ac>)
    3a64:	4798      	blx	r3
						ret = hif_set_rx_done();
    3a66:	230f      	movs	r3, #15
    3a68:	18fc      	adds	r4, r7, r3
    3a6a:	4b3f      	ldr	r3, [pc, #252]	; (3b68 <hif_isr+0x3e0>)
    3a6c:	4798      	blx	r3
    3a6e:	0003      	movs	r3, r0
    3a70:	7023      	strb	r3, [r4, #0]
    3a72:	e03f      	b.n	3af4 <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    3a74:	230f      	movs	r3, #15
    3a76:	18fb      	adds	r3, r7, r3
    3a78:	22fe      	movs	r2, #254	; 0xfe
    3a7a:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    3a7c:	4a3b      	ldr	r2, [pc, #236]	; (3b6c <hif_isr+0x3e4>)
    3a7e:	4928      	ldr	r1, [pc, #160]	; (3b20 <hif_isr+0x398>)
    3a80:	4b28      	ldr	r3, [pc, #160]	; (3b24 <hif_isr+0x39c>)
    3a82:	0018      	movs	r0, r3
    3a84:	4b28      	ldr	r3, [pc, #160]	; (3b28 <hif_isr+0x3a0>)
    3a86:	4798      	blx	r3
    3a88:	4b39      	ldr	r3, [pc, #228]	; (3b70 <hif_isr+0x3e8>)
    3a8a:	0018      	movs	r0, r3
    3a8c:	4b28      	ldr	r3, [pc, #160]	; (3b30 <hif_isr+0x3a8>)
    3a8e:	4798      	blx	r3
    3a90:	200d      	movs	r0, #13
    3a92:	4b28      	ldr	r3, [pc, #160]	; (3b34 <hif_isr+0x3ac>)
    3a94:	4798      	blx	r3
					goto ERR1;
    3a96:	e078      	b.n	3b8a <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    3a98:	2386      	movs	r3, #134	; 0x86
    3a9a:	009a      	lsls	r2, r3, #2
    3a9c:	4920      	ldr	r1, [pc, #128]	; (3b20 <hif_isr+0x398>)
    3a9e:	4b21      	ldr	r3, [pc, #132]	; (3b24 <hif_isr+0x39c>)
    3aa0:	0018      	movs	r0, r3
    3aa2:	4b21      	ldr	r3, [pc, #132]	; (3b28 <hif_isr+0x3a0>)
    3aa4:	4798      	blx	r3
    3aa6:	68ba      	ldr	r2, [r7, #8]
    3aa8:	4b32      	ldr	r3, [pc, #200]	; (3b74 <hif_isr+0x3ec>)
    3aaa:	0011      	movs	r1, r2
    3aac:	0018      	movs	r0, r3
    3aae:	4b1e      	ldr	r3, [pc, #120]	; (3b28 <hif_isr+0x3a0>)
    3ab0:	4798      	blx	r3
    3ab2:	200d      	movs	r0, #13
    3ab4:	4b1f      	ldr	r3, [pc, #124]	; (3b34 <hif_isr+0x3ac>)
    3ab6:	4798      	blx	r3
    3ab8:	e01c      	b.n	3af4 <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    3aba:	4a2f      	ldr	r2, [pc, #188]	; (3b78 <hif_isr+0x3f0>)
    3abc:	4918      	ldr	r1, [pc, #96]	; (3b20 <hif_isr+0x398>)
    3abe:	4b19      	ldr	r3, [pc, #100]	; (3b24 <hif_isr+0x39c>)
    3ac0:	0018      	movs	r0, r3
    3ac2:	4b19      	ldr	r3, [pc, #100]	; (3b28 <hif_isr+0x3a0>)
    3ac4:	4798      	blx	r3
    3ac6:	4b2d      	ldr	r3, [pc, #180]	; (3b7c <hif_isr+0x3f4>)
    3ac8:	0018      	movs	r0, r3
    3aca:	4b19      	ldr	r3, [pc, #100]	; (3b30 <hif_isr+0x3a8>)
    3acc:	4798      	blx	r3
    3ace:	200d      	movs	r0, #13
    3ad0:	4b18      	ldr	r3, [pc, #96]	; (3b34 <hif_isr+0x3ac>)
    3ad2:	4798      	blx	r3
			goto ERR1;
    3ad4:	e059      	b.n	3b8a <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    3ad6:	2389      	movs	r3, #137	; 0x89
    3ad8:	009a      	lsls	r2, r3, #2
    3ada:	4911      	ldr	r1, [pc, #68]	; (3b20 <hif_isr+0x398>)
    3adc:	4b11      	ldr	r3, [pc, #68]	; (3b24 <hif_isr+0x39c>)
    3ade:	0018      	movs	r0, r3
    3ae0:	4b11      	ldr	r3, [pc, #68]	; (3b28 <hif_isr+0x3a0>)
    3ae2:	4798      	blx	r3
    3ae4:	4b26      	ldr	r3, [pc, #152]	; (3b80 <hif_isr+0x3f8>)
    3ae6:	0018      	movs	r0, r3
    3ae8:	4b11      	ldr	r3, [pc, #68]	; (3b30 <hif_isr+0x3a8>)
    3aea:	4798      	blx	r3
    3aec:	200d      	movs	r0, #13
    3aee:	4b11      	ldr	r3, [pc, #68]	; (3b34 <hif_isr+0x3ac>)
    3af0:	4798      	blx	r3
		goto ERR1;
    3af2:	e04a      	b.n	3b8a <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    3af4:	230f      	movs	r3, #15
    3af6:	18fc      	adds	r4, r7, r3
    3af8:	4b22      	ldr	r3, [pc, #136]	; (3b84 <hif_isr+0x3fc>)
    3afa:	4798      	blx	r3
    3afc:	0003      	movs	r3, r0
    3afe:	7023      	strb	r3, [r4, #0]
    3b00:	e043      	b.n	3b8a <hif_isr+0x402>
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	00003281 	.word	0x00003281
    3b08:	00001070 	.word	0x00001070
    3b0c:	0000538d 	.word	0x0000538d
    3b10:	00002861 	.word	0x00002861
    3b14:	000053b1 	.word	0x000053b1
    3b18:	200000ca 	.word	0x200000ca
    3b1c:	00001084 	.word	0x00001084
    3b20:	0001293c 	.word	0x0001293c
    3b24:	000126d0 	.word	0x000126d0
    3b28:	0001121d 	.word	0x0001121d
    3b2c:	00012700 	.word	0x00012700
    3b30:	0001133d 	.word	0x0001133d
    3b34:	00011251 	.word	0x00011251
    3b38:	00005401 	.word	0x00005401
    3b3c:	00012724 	.word	0x00012724
    3b40:	0001273c 	.word	0x0001273c
    3b44:	200000cc 	.word	0x200000cc
    3b48:	200000d0 	.word	0x200000d0
    3b4c:	200000d4 	.word	0x200000d4
    3b50:	200000e0 	.word	0x200000e0
    3b54:	200000d8 	.word	0x200000d8
    3b58:	00000202 	.word	0x00000202
    3b5c:	0001277c 	.word	0x0001277c
    3b60:	00000209 	.word	0x00000209
    3b64:	00012794 	.word	0x00012794
    3b68:	000031f9 	.word	0x000031f9
    3b6c:	00000211 	.word	0x00000211
    3b70:	000127b8 	.word	0x000127b8
    3b74:	000127cc 	.word	0x000127cc
    3b78:	0000021e 	.word	0x0000021e
    3b7c:	000127e8 	.word	0x000127e8
    3b80:	0001280c 	.word	0x0001280c
    3b84:	00003319 	.word	0x00003319

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    3b88:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    3b8a:	230f      	movs	r3, #15
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	b25b      	sxtb	r3, r3
}
    3b92:	0018      	movs	r0, r3
    3b94:	46bd      	mov	sp, r7
    3b96:	b005      	add	sp, #20
    3b98:	bd90      	pop	{r4, r7, pc}
    3b9a:	46c0      	nop			; (mov r8, r8)

00003b9c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    3b9c:	b590      	push	{r4, r7, lr}
    3b9e:	b083      	sub	sp, #12
    3ba0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3ba2:	1dfb      	adds	r3, r7, #7
    3ba4:	2200      	movs	r2, #0
    3ba6:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    3ba8:	e023      	b.n	3bf2 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    3baa:	4b18      	ldr	r3, [pc, #96]	; (3c0c <hif_handle_isr+0x70>)
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	3b01      	subs	r3, #1
    3bb2:	b2da      	uxtb	r2, r3
    3bb4:	4b15      	ldr	r3, [pc, #84]	; (3c0c <hif_handle_isr+0x70>)
    3bb6:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    3bb8:	1dfc      	adds	r4, r7, #7
    3bba:	4b15      	ldr	r3, [pc, #84]	; (3c10 <hif_handle_isr+0x74>)
    3bbc:	4798      	blx	r3
    3bbe:	0003      	movs	r3, r0
    3bc0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    3bc2:	1dfb      	adds	r3, r7, #7
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	b25b      	sxtb	r3, r3
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d100      	bne.n	3bce <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    3bcc:	e011      	b.n	3bf2 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    3bce:	4a11      	ldr	r2, [pc, #68]	; (3c14 <hif_handle_isr+0x78>)
    3bd0:	4911      	ldr	r1, [pc, #68]	; (3c18 <hif_handle_isr+0x7c>)
    3bd2:	4b12      	ldr	r3, [pc, #72]	; (3c1c <hif_handle_isr+0x80>)
    3bd4:	0018      	movs	r0, r3
    3bd6:	4b12      	ldr	r3, [pc, #72]	; (3c20 <hif_handle_isr+0x84>)
    3bd8:	4798      	blx	r3
    3bda:	1dfb      	adds	r3, r7, #7
    3bdc:	2200      	movs	r2, #0
    3bde:	569a      	ldrsb	r2, [r3, r2]
    3be0:	4b10      	ldr	r3, [pc, #64]	; (3c24 <hif_handle_isr+0x88>)
    3be2:	0011      	movs	r1, r2
    3be4:	0018      	movs	r0, r3
    3be6:	4b0e      	ldr	r3, [pc, #56]	; (3c20 <hif_handle_isr+0x84>)
    3be8:	4798      	blx	r3
    3bea:	200d      	movs	r0, #13
    3bec:	4b0e      	ldr	r3, [pc, #56]	; (3c28 <hif_handle_isr+0x8c>)
    3bee:	4798      	blx	r3
			}
		}
    3bf0:	e7e2      	b.n	3bb8 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    3bf2:	4b06      	ldr	r3, [pc, #24]	; (3c0c <hif_handle_isr+0x70>)
    3bf4:	781b      	ldrb	r3, [r3, #0]
    3bf6:	b2db      	uxtb	r3, r3
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d1d6      	bne.n	3baa <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    3bfc:	1dfb      	adds	r3, r7, #7
    3bfe:	781b      	ldrb	r3, [r3, #0]
    3c00:	b25b      	sxtb	r3, r3
}
    3c02:	0018      	movs	r0, r3
    3c04:	46bd      	mov	sp, r7
    3c06:	b003      	add	sp, #12
    3c08:	bd90      	pop	{r4, r7, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	200000cb 	.word	0x200000cb
    3c10:	00003789 	.word	0x00003789
    3c14:	00000243 	.word	0x00000243
    3c18:	00012944 	.word	0x00012944
    3c1c:	000126d0 	.word	0x000126d0
    3c20:	0001121d 	.word	0x0001121d
    3c24:	0001282c 	.word	0x0001282c
    3c28:	00011251 	.word	0x00011251

00003c2c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    3c2c:	b590      	push	{r4, r7, lr}
    3c2e:	b089      	sub	sp, #36	; 0x24
    3c30:	af00      	add	r7, sp, #0
    3c32:	60f8      	str	r0, [r7, #12]
    3c34:	60b9      	str	r1, [r7, #8]
    3c36:	0019      	movs	r1, r3
    3c38:	1dbb      	adds	r3, r7, #6
    3c3a:	801a      	strh	r2, [r3, #0]
    3c3c:	1d7b      	adds	r3, r7, #5
    3c3e:	1c0a      	adds	r2, r1, #0
    3c40:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    3c42:	231f      	movs	r3, #31
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	2200      	movs	r2, #0
    3c48:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    3c4a:	68fb      	ldr	r3, [r7, #12]
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d006      	beq.n	3c5e <hif_receive+0x32>
    3c50:	68bb      	ldr	r3, [r7, #8]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d003      	beq.n	3c5e <hif_receive+0x32>
    3c56:	1dbb      	adds	r3, r7, #6
    3c58:	881b      	ldrh	r3, [r3, #0]
    3c5a:	2b00      	cmp	r3, #0
    3c5c:	d11f      	bne.n	3c9e <hif_receive+0x72>
	{
		if(isDone)
    3c5e:	1d7b      	adds	r3, r7, #5
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d009      	beq.n	3c7a <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    3c66:	4b5f      	ldr	r3, [pc, #380]	; (3de4 <hif_receive+0x1b8>)
    3c68:	2201      	movs	r2, #1
    3c6a:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    3c6c:	231f      	movs	r3, #31
    3c6e:	18fc      	adds	r4, r7, r3
    3c70:	4b5d      	ldr	r3, [pc, #372]	; (3de8 <hif_receive+0x1bc>)
    3c72:	4798      	blx	r3
    3c74:	0003      	movs	r3, r0
    3c76:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    3c78:	e0ac      	b.n	3dd4 <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    3c7a:	231f      	movs	r3, #31
    3c7c:	18fb      	adds	r3, r7, r3
    3c7e:	22f4      	movs	r2, #244	; 0xf4
    3c80:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    3c82:	4a5a      	ldr	r2, [pc, #360]	; (3dec <hif_receive+0x1c0>)
    3c84:	495a      	ldr	r1, [pc, #360]	; (3df0 <hif_receive+0x1c4>)
    3c86:	4b5b      	ldr	r3, [pc, #364]	; (3df4 <hif_receive+0x1c8>)
    3c88:	0018      	movs	r0, r3
    3c8a:	4b5b      	ldr	r3, [pc, #364]	; (3df8 <hif_receive+0x1cc>)
    3c8c:	4798      	blx	r3
    3c8e:	4b5b      	ldr	r3, [pc, #364]	; (3dfc <hif_receive+0x1d0>)
    3c90:	0018      	movs	r0, r3
    3c92:	4b5b      	ldr	r3, [pc, #364]	; (3e00 <hif_receive+0x1d4>)
    3c94:	4798      	blx	r3
    3c96:	200d      	movs	r0, #13
    3c98:	4b5a      	ldr	r3, [pc, #360]	; (3e04 <hif_receive+0x1d8>)
    3c9a:	4798      	blx	r3
		}
		goto ERR1;
    3c9c:	e09a      	b.n	3dd4 <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    3c9e:	231f      	movs	r3, #31
    3ca0:	18fc      	adds	r4, r7, r3
    3ca2:	2314      	movs	r3, #20
    3ca4:	18fb      	adds	r3, r7, r3
    3ca6:	4a58      	ldr	r2, [pc, #352]	; (3e08 <hif_receive+0x1dc>)
    3ca8:	0019      	movs	r1, r3
    3caa:	0010      	movs	r0, r2
    3cac:	4b57      	ldr	r3, [pc, #348]	; (3e0c <hif_receive+0x1e0>)
    3cae:	4798      	blx	r3
    3cb0:	0003      	movs	r3, r0
    3cb2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3cb4:	231f      	movs	r3, #31
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	781b      	ldrb	r3, [r3, #0]
    3cba:	b25b      	sxtb	r3, r3
    3cbc:	2b00      	cmp	r3, #0
    3cbe:	d000      	beq.n	3cc2 <hif_receive+0x96>
    3cc0:	e083      	b.n	3dca <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    3cc2:	697b      	ldr	r3, [r7, #20]
    3cc4:	089b      	lsrs	r3, r3, #2
    3cc6:	b29a      	uxth	r2, r3
    3cc8:	231c      	movs	r3, #28
    3cca:	18fb      	adds	r3, r7, r3
    3ccc:	0512      	lsls	r2, r2, #20
    3cce:	0d12      	lsrs	r2, r2, #20
    3cd0:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    3cd2:	231f      	movs	r3, #31
    3cd4:	18fc      	adds	r4, r7, r3
    3cd6:	2318      	movs	r3, #24
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	4a4d      	ldr	r2, [pc, #308]	; (3e10 <hif_receive+0x1e4>)
    3cdc:	0019      	movs	r1, r3
    3cde:	0010      	movs	r0, r2
    3ce0:	4b4a      	ldr	r3, [pc, #296]	; (3e0c <hif_receive+0x1e0>)
    3ce2:	4798      	blx	r3
    3ce4:	0003      	movs	r3, r0
    3ce6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3ce8:	231f      	movs	r3, #31
    3cea:	18fb      	adds	r3, r7, r3
    3cec:	781b      	ldrb	r3, [r3, #0]
    3cee:	b25b      	sxtb	r3, r3
    3cf0:	2b00      	cmp	r3, #0
    3cf2:	d000      	beq.n	3cf6 <hif_receive+0xca>
    3cf4:	e06b      	b.n	3dce <hif_receive+0x1a2>


	if(u16Sz > size)
    3cf6:	1dba      	adds	r2, r7, #6
    3cf8:	231c      	movs	r3, #28
    3cfa:	18fb      	adds	r3, r7, r3
    3cfc:	8812      	ldrh	r2, [r2, #0]
    3cfe:	881b      	ldrh	r3, [r3, #0]
    3d00:	429a      	cmp	r2, r3
    3d02:	d916      	bls.n	3d32 <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    3d04:	231f      	movs	r3, #31
    3d06:	18fb      	adds	r3, r7, r3
    3d08:	22f4      	movs	r2, #244	; 0xf4
    3d0a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    3d0c:	4a41      	ldr	r2, [pc, #260]	; (3e14 <hif_receive+0x1e8>)
    3d0e:	4938      	ldr	r1, [pc, #224]	; (3df0 <hif_receive+0x1c4>)
    3d10:	4b38      	ldr	r3, [pc, #224]	; (3df4 <hif_receive+0x1c8>)
    3d12:	0018      	movs	r0, r3
    3d14:	4b38      	ldr	r3, [pc, #224]	; (3df8 <hif_receive+0x1cc>)
    3d16:	4798      	blx	r3
    3d18:	1dbb      	adds	r3, r7, #6
    3d1a:	8819      	ldrh	r1, [r3, #0]
    3d1c:	231c      	movs	r3, #28
    3d1e:	18fb      	adds	r3, r7, r3
    3d20:	881a      	ldrh	r2, [r3, #0]
    3d22:	4b3d      	ldr	r3, [pc, #244]	; (3e18 <hif_receive+0x1ec>)
    3d24:	0018      	movs	r0, r3
    3d26:	4b34      	ldr	r3, [pc, #208]	; (3df8 <hif_receive+0x1cc>)
    3d28:	4798      	blx	r3
    3d2a:	200d      	movs	r0, #13
    3d2c:	4b35      	ldr	r3, [pc, #212]	; (3e04 <hif_receive+0x1d8>)
    3d2e:	4798      	blx	r3
		goto ERR1;
    3d30:	e050      	b.n	3dd4 <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    3d32:	69bb      	ldr	r3, [r7, #24]
    3d34:	68fa      	ldr	r2, [r7, #12]
    3d36:	429a      	cmp	r2, r3
    3d38:	d30a      	bcc.n	3d50 <hif_receive+0x124>
    3d3a:	1dbb      	adds	r3, r7, #6
    3d3c:	881a      	ldrh	r2, [r3, #0]
    3d3e:	68fb      	ldr	r3, [r7, #12]
    3d40:	18d2      	adds	r2, r2, r3
    3d42:	231c      	movs	r3, #28
    3d44:	18fb      	adds	r3, r7, r3
    3d46:	8819      	ldrh	r1, [r3, #0]
    3d48:	69bb      	ldr	r3, [r7, #24]
    3d4a:	18cb      	adds	r3, r1, r3
    3d4c:	429a      	cmp	r2, r3
    3d4e:	d912      	bls.n	3d76 <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    3d50:	231f      	movs	r3, #31
    3d52:	18fb      	adds	r3, r7, r3
    3d54:	22f4      	movs	r2, #244	; 0xf4
    3d56:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    3d58:	23a0      	movs	r3, #160	; 0xa0
    3d5a:	009a      	lsls	r2, r3, #2
    3d5c:	4924      	ldr	r1, [pc, #144]	; (3df0 <hif_receive+0x1c4>)
    3d5e:	4b25      	ldr	r3, [pc, #148]	; (3df4 <hif_receive+0x1c8>)
    3d60:	0018      	movs	r0, r3
    3d62:	4b25      	ldr	r3, [pc, #148]	; (3df8 <hif_receive+0x1cc>)
    3d64:	4798      	blx	r3
    3d66:	4b2d      	ldr	r3, [pc, #180]	; (3e1c <hif_receive+0x1f0>)
    3d68:	0018      	movs	r0, r3
    3d6a:	4b25      	ldr	r3, [pc, #148]	; (3e00 <hif_receive+0x1d4>)
    3d6c:	4798      	blx	r3
    3d6e:	200d      	movs	r0, #13
    3d70:	4b24      	ldr	r3, [pc, #144]	; (3e04 <hif_receive+0x1d8>)
    3d72:	4798      	blx	r3
		goto ERR1;
    3d74:	e02e      	b.n	3dd4 <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3d76:	1dbb      	adds	r3, r7, #6
    3d78:	881a      	ldrh	r2, [r3, #0]
    3d7a:	231f      	movs	r3, #31
    3d7c:	18fc      	adds	r4, r7, r3
    3d7e:	68b9      	ldr	r1, [r7, #8]
    3d80:	68fb      	ldr	r3, [r7, #12]
    3d82:	0018      	movs	r0, r3
    3d84:	4b26      	ldr	r3, [pc, #152]	; (3e20 <hif_receive+0x1f4>)
    3d86:	4798      	blx	r3
    3d88:	0003      	movs	r3, r0
    3d8a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3d8c:	231f      	movs	r3, #31
    3d8e:	18fb      	adds	r3, r7, r3
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	b25b      	sxtb	r3, r3
    3d94:	2b00      	cmp	r3, #0
    3d96:	d11c      	bne.n	3dd2 <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    3d98:	231c      	movs	r3, #28
    3d9a:	18fb      	adds	r3, r7, r3
    3d9c:	881a      	ldrh	r2, [r3, #0]
    3d9e:	69bb      	ldr	r3, [r7, #24]
    3da0:	18d2      	adds	r2, r2, r3
    3da2:	1dbb      	adds	r3, r7, #6
    3da4:	8819      	ldrh	r1, [r3, #0]
    3da6:	68fb      	ldr	r3, [r7, #12]
    3da8:	18cb      	adds	r3, r1, r3
    3daa:	429a      	cmp	r2, r3
    3dac:	d003      	beq.n	3db6 <hif_receive+0x18a>
    3dae:	1d7b      	adds	r3, r7, #5
    3db0:	781b      	ldrb	r3, [r3, #0]
    3db2:	2b00      	cmp	r3, #0
    3db4:	d00e      	beq.n	3dd4 <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    3db6:	4b0b      	ldr	r3, [pc, #44]	; (3de4 <hif_receive+0x1b8>)
    3db8:	2201      	movs	r2, #1
    3dba:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    3dbc:	231f      	movs	r3, #31
    3dbe:	18fc      	adds	r4, r7, r3
    3dc0:	4b09      	ldr	r3, [pc, #36]	; (3de8 <hif_receive+0x1bc>)
    3dc2:	4798      	blx	r3
    3dc4:	0003      	movs	r3, r0
    3dc6:	7023      	strb	r3, [r4, #0]
    3dc8:	e004      	b.n	3dd4 <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	e002      	b.n	3dd4 <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	e000      	b.n	3dd4 <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    3dd2:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    3dd4:	231f      	movs	r3, #31
    3dd6:	18fb      	adds	r3, r7, r3
    3dd8:	781b      	ldrb	r3, [r3, #0]
    3dda:	b25b      	sxtb	r3, r3
}
    3ddc:	0018      	movs	r0, r3
    3dde:	46bd      	mov	sp, r7
    3de0:	b009      	add	sp, #36	; 0x24
    3de2:	bd90      	pop	{r4, r7, pc}
    3de4:	200000ca 	.word	0x200000ca
    3de8:	000031f9 	.word	0x000031f9
    3dec:	00000269 	.word	0x00000269
    3df0:	00012954 	.word	0x00012954
    3df4:	000126d0 	.word	0x000126d0
    3df8:	0001121d 	.word	0x0001121d
    3dfc:	0001285c 	.word	0x0001285c
    3e00:	0001133d 	.word	0x0001133d
    3e04:	00011251 	.word	0x00011251
    3e08:	00001070 	.word	0x00001070
    3e0c:	0000538d 	.word	0x0000538d
    3e10:	00001084 	.word	0x00001084
    3e14:	0000027a 	.word	0x0000027a
    3e18:	0001287c 	.word	0x0001287c
    3e1c:	000128c0 	.word	0x000128c0
    3e20:	00005401 	.word	0x00005401

00003e24 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    3e24:	b580      	push	{r7, lr}
    3e26:	b084      	sub	sp, #16
    3e28:	af00      	add	r7, sp, #0
    3e2a:	0002      	movs	r2, r0
    3e2c:	6039      	str	r1, [r7, #0]
    3e2e:	1dfb      	adds	r3, r7, #7
    3e30:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    3e32:	230f      	movs	r3, #15
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	2200      	movs	r2, #0
    3e38:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    3e3a:	1dfb      	adds	r3, r7, #7
    3e3c:	781b      	ldrb	r3, [r3, #0]
    3e3e:	2b07      	cmp	r3, #7
    3e40:	d81c      	bhi.n	3e7c <hif_register_cb+0x58>
    3e42:	009a      	lsls	r2, r3, #2
    3e44:	4b1c      	ldr	r3, [pc, #112]	; (3eb8 <hif_register_cb+0x94>)
    3e46:	18d3      	adds	r3, r2, r3
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    3e4c:	4b1b      	ldr	r3, [pc, #108]	; (3ebc <hif_register_cb+0x98>)
    3e4e:	683a      	ldr	r2, [r7, #0]
    3e50:	601a      	str	r2, [r3, #0]
			break;
    3e52:	e028      	b.n	3ea6 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    3e54:	4b1a      	ldr	r3, [pc, #104]	; (3ec0 <hif_register_cb+0x9c>)
    3e56:	683a      	ldr	r2, [r7, #0]
    3e58:	601a      	str	r2, [r3, #0]
			break;
    3e5a:	e024      	b.n	3ea6 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    3e5c:	4b19      	ldr	r3, [pc, #100]	; (3ec4 <hif_register_cb+0xa0>)
    3e5e:	683a      	ldr	r2, [r7, #0]
    3e60:	601a      	str	r2, [r3, #0]
			break;
    3e62:	e020      	b.n	3ea6 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    3e64:	4b18      	ldr	r3, [pc, #96]	; (3ec8 <hif_register_cb+0xa4>)
    3e66:	683a      	ldr	r2, [r7, #0]
    3e68:	601a      	str	r2, [r3, #0]
			break;
    3e6a:	e01c      	b.n	3ea6 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    3e6c:	4b17      	ldr	r3, [pc, #92]	; (3ecc <hif_register_cb+0xa8>)
    3e6e:	683a      	ldr	r2, [r7, #0]
    3e70:	601a      	str	r2, [r3, #0]
			break;
    3e72:	e018      	b.n	3ea6 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    3e74:	4b16      	ldr	r3, [pc, #88]	; (3ed0 <hif_register_cb+0xac>)
    3e76:	683a      	ldr	r2, [r7, #0]
    3e78:	601a      	str	r2, [r3, #0]
			break;
    3e7a:	e014      	b.n	3ea6 <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    3e7c:	4a15      	ldr	r2, [pc, #84]	; (3ed4 <hif_register_cb+0xb0>)
    3e7e:	4916      	ldr	r1, [pc, #88]	; (3ed8 <hif_register_cb+0xb4>)
    3e80:	4b16      	ldr	r3, [pc, #88]	; (3edc <hif_register_cb+0xb8>)
    3e82:	0018      	movs	r0, r3
    3e84:	4b16      	ldr	r3, [pc, #88]	; (3ee0 <hif_register_cb+0xbc>)
    3e86:	4798      	blx	r3
    3e88:	1dfb      	adds	r3, r7, #7
    3e8a:	781a      	ldrb	r2, [r3, #0]
    3e8c:	4b15      	ldr	r3, [pc, #84]	; (3ee4 <hif_register_cb+0xc0>)
    3e8e:	0011      	movs	r1, r2
    3e90:	0018      	movs	r0, r3
    3e92:	4b13      	ldr	r3, [pc, #76]	; (3ee0 <hif_register_cb+0xbc>)
    3e94:	4798      	blx	r3
    3e96:	200d      	movs	r0, #13
    3e98:	4b13      	ldr	r3, [pc, #76]	; (3ee8 <hif_register_cb+0xc4>)
    3e9a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3e9c:	230f      	movs	r3, #15
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	22f4      	movs	r2, #244	; 0xf4
    3ea2:	701a      	strb	r2, [r3, #0]
			break;
    3ea4:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    3ea6:	230f      	movs	r3, #15
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	b25b      	sxtb	r3, r3
}
    3eae:	0018      	movs	r0, r3
    3eb0:	46bd      	mov	sp, r7
    3eb2:	b004      	add	sp, #16
    3eb4:	bd80      	pop	{r7, pc}
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	00012910 	.word	0x00012910
    3ebc:	200000d0 	.word	0x200000d0
    3ec0:	200000cc 	.word	0x200000cc
    3ec4:	200000d4 	.word	0x200000d4
    3ec8:	200000dc 	.word	0x200000dc
    3ecc:	200000e0 	.word	0x200000e0
    3ed0:	200000d8 	.word	0x200000d8
    3ed4:	000002b9 	.word	0x000002b9
    3ed8:	00012960 	.word	0x00012960
    3edc:	000126d0 	.word	0x000126d0
    3ee0:	0001121d 	.word	0x0001121d
    3ee4:	00012904 	.word	0x00012904
    3ee8:	00011251 	.word	0x00011251

00003eec <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    3eec:	b590      	push	{r4, r7, lr}
    3eee:	b0ad      	sub	sp, #180	; 0xb4
    3ef0:	af02      	add	r7, sp, #8
    3ef2:	603a      	str	r2, [r7, #0]
    3ef4:	1dfb      	adds	r3, r7, #7
    3ef6:	1c02      	adds	r2, r0, #0
    3ef8:	701a      	strb	r2, [r3, #0]
    3efa:	1d3b      	adds	r3, r7, #4
    3efc:	1c0a      	adds	r2, r1, #0
    3efe:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    3f00:	1dfb      	adds	r3, r7, #7
    3f02:	781b      	ldrb	r3, [r3, #0]
    3f04:	2b2c      	cmp	r3, #44	; 0x2c
    3f06:	d116      	bne.n	3f36 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    3f08:	239c      	movs	r3, #156	; 0x9c
    3f0a:	18f9      	adds	r1, r7, r3
    3f0c:	6838      	ldr	r0, [r7, #0]
    3f0e:	2300      	movs	r3, #0
    3f10:	2204      	movs	r2, #4
    3f12:	4ccc      	ldr	r4, [pc, #816]	; (4244 <m2m_wifi_cb+0x358>)
    3f14:	47a0      	blx	r4
    3f16:	1e03      	subs	r3, r0, #0
    3f18:	d000      	beq.n	3f1c <m2m_wifi_cb+0x30>
    3f1a:	e1b6      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3f1c:	4bca      	ldr	r3, [pc, #808]	; (4248 <m2m_wifi_cb+0x35c>)
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	2b00      	cmp	r3, #0
    3f22:	d100      	bne.n	3f26 <m2m_wifi_cb+0x3a>
    3f24:	e1b1      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    3f26:	4bc8      	ldr	r3, [pc, #800]	; (4248 <m2m_wifi_cb+0x35c>)
    3f28:	681b      	ldr	r3, [r3, #0]
    3f2a:	229c      	movs	r2, #156	; 0x9c
    3f2c:	18ba      	adds	r2, r7, r2
    3f2e:	0011      	movs	r1, r2
    3f30:	202c      	movs	r0, #44	; 0x2c
    3f32:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3f34:	e1a9      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    3f36:	1dfb      	adds	r3, r7, #7
    3f38:	781b      	ldrb	r3, [r3, #0]
    3f3a:	2b1b      	cmp	r3, #27
    3f3c:	d116      	bne.n	3f6c <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    3f3e:	2394      	movs	r3, #148	; 0x94
    3f40:	18f9      	adds	r1, r7, r3
    3f42:	6838      	ldr	r0, [r7, #0]
    3f44:	2300      	movs	r3, #0
    3f46:	2208      	movs	r2, #8
    3f48:	4cbe      	ldr	r4, [pc, #760]	; (4244 <m2m_wifi_cb+0x358>)
    3f4a:	47a0      	blx	r4
    3f4c:	1e03      	subs	r3, r0, #0
    3f4e:	d000      	beq.n	3f52 <m2m_wifi_cb+0x66>
    3f50:	e19b      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3f52:	4bbd      	ldr	r3, [pc, #756]	; (4248 <m2m_wifi_cb+0x35c>)
    3f54:	681b      	ldr	r3, [r3, #0]
    3f56:	2b00      	cmp	r3, #0
    3f58:	d100      	bne.n	3f5c <m2m_wifi_cb+0x70>
    3f5a:	e196      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    3f5c:	4bba      	ldr	r3, [pc, #744]	; (4248 <m2m_wifi_cb+0x35c>)
    3f5e:	681b      	ldr	r3, [r3, #0]
    3f60:	2294      	movs	r2, #148	; 0x94
    3f62:	18ba      	adds	r2, r7, r2
    3f64:	0011      	movs	r1, r2
    3f66:	201b      	movs	r0, #27
    3f68:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3f6a:	e18e      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    3f6c:	1dfb      	adds	r3, r7, #7
    3f6e:	781b      	ldrb	r3, [r3, #0]
    3f70:	2b06      	cmp	r3, #6
    3f72:	d116      	bne.n	3fa2 <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    3f74:	230c      	movs	r3, #12
    3f76:	18f9      	adds	r1, r7, r3
    3f78:	6838      	ldr	r0, [r7, #0]
    3f7a:	2301      	movs	r3, #1
    3f7c:	2230      	movs	r2, #48	; 0x30
    3f7e:	4cb1      	ldr	r4, [pc, #708]	; (4244 <m2m_wifi_cb+0x358>)
    3f80:	47a0      	blx	r4
    3f82:	1e03      	subs	r3, r0, #0
    3f84:	d000      	beq.n	3f88 <m2m_wifi_cb+0x9c>
    3f86:	e180      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3f88:	4baf      	ldr	r3, [pc, #700]	; (4248 <m2m_wifi_cb+0x35c>)
    3f8a:	681b      	ldr	r3, [r3, #0]
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d100      	bne.n	3f92 <m2m_wifi_cb+0xa6>
    3f90:	e17b      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    3f92:	4bad      	ldr	r3, [pc, #692]	; (4248 <m2m_wifi_cb+0x35c>)
    3f94:	681b      	ldr	r3, [r3, #0]
    3f96:	220c      	movs	r2, #12
    3f98:	18ba      	adds	r2, r7, r2
    3f9a:	0011      	movs	r1, r2
    3f9c:	2006      	movs	r0, #6
    3f9e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3fa0:	e173      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    3fa2:	1dfb      	adds	r3, r7, #7
    3fa4:	781b      	ldrb	r3, [r3, #0]
    3fa6:	2b0e      	cmp	r3, #14
    3fa8:	d100      	bne.n	3fac <m2m_wifi_cb+0xc0>
    3faa:	e16e      	b.n	428a <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    3fac:	1dfb      	adds	r3, r7, #7
    3fae:	781b      	ldrb	r3, [r3, #0]
    3fb0:	2b32      	cmp	r3, #50	; 0x32
    3fb2:	d116      	bne.n	3fe2 <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    3fb4:	2384      	movs	r3, #132	; 0x84
    3fb6:	18f9      	adds	r1, r7, r3
    3fb8:	6838      	ldr	r0, [r7, #0]
    3fba:	2300      	movs	r3, #0
    3fbc:	2210      	movs	r2, #16
    3fbe:	4ca1      	ldr	r4, [pc, #644]	; (4244 <m2m_wifi_cb+0x358>)
    3fc0:	47a0      	blx	r4
    3fc2:	1e03      	subs	r3, r0, #0
    3fc4:	d000      	beq.n	3fc8 <m2m_wifi_cb+0xdc>
    3fc6:	e160      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3fc8:	4b9f      	ldr	r3, [pc, #636]	; (4248 <m2m_wifi_cb+0x35c>)
    3fca:	681b      	ldr	r3, [r3, #0]
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d100      	bne.n	3fd2 <m2m_wifi_cb+0xe6>
    3fd0:	e15b      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    3fd2:	4b9d      	ldr	r3, [pc, #628]	; (4248 <m2m_wifi_cb+0x35c>)
    3fd4:	681b      	ldr	r3, [r3, #0]
    3fd6:	2284      	movs	r2, #132	; 0x84
    3fd8:	18ba      	adds	r2, r7, r2
    3fda:	0011      	movs	r1, r2
    3fdc:	2032      	movs	r0, #50	; 0x32
    3fde:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3fe0:	e153      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    3fe2:	1dfb      	adds	r3, r7, #7
    3fe4:	781b      	ldrb	r3, [r3, #0]
    3fe6:	2b2f      	cmp	r3, #47	; 0x2f
    3fe8:	d11d      	bne.n	4026 <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    3fea:	230c      	movs	r3, #12
    3fec:	18fb      	adds	r3, r7, r3
    3fee:	2264      	movs	r2, #100	; 0x64
    3ff0:	2100      	movs	r1, #0
    3ff2:	0018      	movs	r0, r3
    3ff4:	4b95      	ldr	r3, [pc, #596]	; (424c <m2m_wifi_cb+0x360>)
    3ff6:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    3ff8:	230c      	movs	r3, #12
    3ffa:	18f9      	adds	r1, r7, r3
    3ffc:	6838      	ldr	r0, [r7, #0]
    3ffe:	2300      	movs	r3, #0
    4000:	2264      	movs	r2, #100	; 0x64
    4002:	4c90      	ldr	r4, [pc, #576]	; (4244 <m2m_wifi_cb+0x358>)
    4004:	47a0      	blx	r4
    4006:	1e03      	subs	r3, r0, #0
    4008:	d000      	beq.n	400c <m2m_wifi_cb+0x120>
    400a:	e13e      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    400c:	4b8e      	ldr	r3, [pc, #568]	; (4248 <m2m_wifi_cb+0x35c>)
    400e:	681b      	ldr	r3, [r3, #0]
    4010:	2b00      	cmp	r3, #0
    4012:	d100      	bne.n	4016 <m2m_wifi_cb+0x12a>
    4014:	e139      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    4016:	4b8c      	ldr	r3, [pc, #560]	; (4248 <m2m_wifi_cb+0x35c>)
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	220c      	movs	r2, #12
    401c:	18ba      	adds	r2, r7, r2
    401e:	0011      	movs	r1, r2
    4020:	202f      	movs	r0, #47	; 0x2f
    4022:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4024:	e131      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    4026:	1dfb      	adds	r3, r7, #7
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	2b34      	cmp	r3, #52	; 0x34
    402c:	d13a      	bne.n	40a4 <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    402e:	2380      	movs	r3, #128	; 0x80
    4030:	18f9      	adds	r1, r7, r3
    4032:	6838      	ldr	r0, [r7, #0]
    4034:	2300      	movs	r3, #0
    4036:	2204      	movs	r2, #4
    4038:	4c82      	ldr	r4, [pc, #520]	; (4244 <m2m_wifi_cb+0x358>)
    403a:	47a0      	blx	r4
    403c:	1e03      	subs	r3, r0, #0
    403e:	d000      	beq.n	4042 <m2m_wifi_cb+0x156>
    4040:	e123      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    4042:	4b83      	ldr	r3, [pc, #524]	; (4250 <m2m_wifi_cb+0x364>)
    4044:	0018      	movs	r0, r3
    4046:	4b83      	ldr	r3, [pc, #524]	; (4254 <m2m_wifi_cb+0x368>)
    4048:	4798      	blx	r3
    404a:	2380      	movs	r3, #128	; 0x80
    404c:	18fb      	adds	r3, r7, r3
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	001a      	movs	r2, r3
    4052:	23ff      	movs	r3, #255	; 0xff
    4054:	401a      	ands	r2, r3
    4056:	0011      	movs	r1, r2
    4058:	2380      	movs	r3, #128	; 0x80
    405a:	18fb      	adds	r3, r7, r3
    405c:	681b      	ldr	r3, [r3, #0]
    405e:	0a1b      	lsrs	r3, r3, #8
    4060:	001a      	movs	r2, r3
    4062:	23ff      	movs	r3, #255	; 0xff
    4064:	401a      	ands	r2, r3
    4066:	2380      	movs	r3, #128	; 0x80
    4068:	18fb      	adds	r3, r7, r3
    406a:	681b      	ldr	r3, [r3, #0]
    406c:	0c1b      	lsrs	r3, r3, #16
    406e:	0018      	movs	r0, r3
    4070:	23ff      	movs	r3, #255	; 0xff
    4072:	4018      	ands	r0, r3
    4074:	0004      	movs	r4, r0
    4076:	2380      	movs	r3, #128	; 0x80
    4078:	18fb      	adds	r3, r7, r3
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	0e1b      	lsrs	r3, r3, #24
    407e:	4876      	ldr	r0, [pc, #472]	; (4258 <m2m_wifi_cb+0x36c>)
    4080:	9300      	str	r3, [sp, #0]
    4082:	0023      	movs	r3, r4
    4084:	4c73      	ldr	r4, [pc, #460]	; (4254 <m2m_wifi_cb+0x368>)
    4086:	47a0      	blx	r4
    4088:	200d      	movs	r0, #13
    408a:	4b74      	ldr	r3, [pc, #464]	; (425c <m2m_wifi_cb+0x370>)
    408c:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    408e:	4b6e      	ldr	r3, [pc, #440]	; (4248 <m2m_wifi_cb+0x35c>)
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	2b00      	cmp	r3, #0
    4094:	d100      	bne.n	4098 <m2m_wifi_cb+0x1ac>
    4096:	e0f8      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    4098:	4b6b      	ldr	r3, [pc, #428]	; (4248 <m2m_wifi_cb+0x35c>)
    409a:	681b      	ldr	r3, [r3, #0]
    409c:	2100      	movs	r1, #0
    409e:	2034      	movs	r0, #52	; 0x34
    40a0:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    40a2:	e0f2      	b.n	428a <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    40a4:	1dfb      	adds	r3, r7, #7
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	2b11      	cmp	r3, #17
    40aa:	d11e      	bne.n	40ea <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    40ac:	4b6c      	ldr	r3, [pc, #432]	; (4260 <m2m_wifi_cb+0x374>)
    40ae:	2200      	movs	r2, #0
    40b0:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    40b2:	237c      	movs	r3, #124	; 0x7c
    40b4:	18f9      	adds	r1, r7, r3
    40b6:	6838      	ldr	r0, [r7, #0]
    40b8:	2300      	movs	r3, #0
    40ba:	2204      	movs	r2, #4
    40bc:	4c61      	ldr	r4, [pc, #388]	; (4244 <m2m_wifi_cb+0x358>)
    40be:	47a0      	blx	r4
    40c0:	1e03      	subs	r3, r0, #0
    40c2:	d000      	beq.n	40c6 <m2m_wifi_cb+0x1da>
    40c4:	e0e1      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    40c6:	237c      	movs	r3, #124	; 0x7c
    40c8:	18fb      	adds	r3, r7, r3
    40ca:	781a      	ldrb	r2, [r3, #0]
    40cc:	4b65      	ldr	r3, [pc, #404]	; (4264 <m2m_wifi_cb+0x378>)
    40ce:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    40d0:	4b5d      	ldr	r3, [pc, #372]	; (4248 <m2m_wifi_cb+0x35c>)
    40d2:	681b      	ldr	r3, [r3, #0]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d100      	bne.n	40da <m2m_wifi_cb+0x1ee>
    40d8:	e0d7      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    40da:	4b5b      	ldr	r3, [pc, #364]	; (4248 <m2m_wifi_cb+0x35c>)
    40dc:	681b      	ldr	r3, [r3, #0]
    40de:	227c      	movs	r2, #124	; 0x7c
    40e0:	18ba      	adds	r2, r7, r2
    40e2:	0011      	movs	r1, r2
    40e4:	2011      	movs	r0, #17
    40e6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    40e8:	e0cf      	b.n	428a <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    40ea:	1dfb      	adds	r3, r7, #7
    40ec:	781b      	ldrb	r3, [r3, #0]
    40ee:	2b13      	cmp	r3, #19
    40f0:	d116      	bne.n	4120 <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    40f2:	230c      	movs	r3, #12
    40f4:	18f9      	adds	r1, r7, r3
    40f6:	6838      	ldr	r0, [r7, #0]
    40f8:	2300      	movs	r3, #0
    40fa:	222c      	movs	r2, #44	; 0x2c
    40fc:	4c51      	ldr	r4, [pc, #324]	; (4244 <m2m_wifi_cb+0x358>)
    40fe:	47a0      	blx	r4
    4100:	1e03      	subs	r3, r0, #0
    4102:	d000      	beq.n	4106 <m2m_wifi_cb+0x21a>
    4104:	e0c1      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4106:	4b50      	ldr	r3, [pc, #320]	; (4248 <m2m_wifi_cb+0x35c>)
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	2b00      	cmp	r3, #0
    410c:	d100      	bne.n	4110 <m2m_wifi_cb+0x224>
    410e:	e0bc      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    4110:	4b4d      	ldr	r3, [pc, #308]	; (4248 <m2m_wifi_cb+0x35c>)
    4112:	681b      	ldr	r3, [r3, #0]
    4114:	220c      	movs	r2, #12
    4116:	18ba      	adds	r2, r7, r2
    4118:	0011      	movs	r1, r2
    411a:	2013      	movs	r0, #19
    411c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    411e:	e0b4      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    4120:	1dfb      	adds	r3, r7, #7
    4122:	781b      	ldrb	r3, [r3, #0]
    4124:	2b04      	cmp	r3, #4
    4126:	d116      	bne.n	4156 <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4128:	23a0      	movs	r3, #160	; 0xa0
    412a:	18f9      	adds	r1, r7, r3
    412c:	6838      	ldr	r0, [r7, #0]
    412e:	2300      	movs	r3, #0
    4130:	2204      	movs	r2, #4
    4132:	4c44      	ldr	r4, [pc, #272]	; (4244 <m2m_wifi_cb+0x358>)
    4134:	47a0      	blx	r4
    4136:	1e03      	subs	r3, r0, #0
    4138:	d000      	beq.n	413c <m2m_wifi_cb+0x250>
    413a:	e0a6      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    413c:	4b42      	ldr	r3, [pc, #264]	; (4248 <m2m_wifi_cb+0x35c>)
    413e:	681b      	ldr	r3, [r3, #0]
    4140:	2b00      	cmp	r3, #0
    4142:	d100      	bne.n	4146 <m2m_wifi_cb+0x25a>
    4144:	e0a1      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    4146:	4b40      	ldr	r3, [pc, #256]	; (4248 <m2m_wifi_cb+0x35c>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	22a0      	movs	r2, #160	; 0xa0
    414c:	18ba      	adds	r2, r7, r2
    414e:	0011      	movs	r1, r2
    4150:	2004      	movs	r0, #4
    4152:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4154:	e099      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    4156:	1dfb      	adds	r3, r7, #7
    4158:	781b      	ldrb	r3, [r3, #0]
    415a:	2b65      	cmp	r3, #101	; 0x65
    415c:	d116      	bne.n	418c <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    415e:	23a0      	movs	r3, #160	; 0xa0
    4160:	18f9      	adds	r1, r7, r3
    4162:	6838      	ldr	r0, [r7, #0]
    4164:	2300      	movs	r3, #0
    4166:	2204      	movs	r2, #4
    4168:	4c36      	ldr	r4, [pc, #216]	; (4244 <m2m_wifi_cb+0x358>)
    416a:	47a0      	blx	r4
    416c:	1e03      	subs	r3, r0, #0
    416e:	d000      	beq.n	4172 <m2m_wifi_cb+0x286>
    4170:	e08b      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4172:	4b35      	ldr	r3, [pc, #212]	; (4248 <m2m_wifi_cb+0x35c>)
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d100      	bne.n	417c <m2m_wifi_cb+0x290>
    417a:	e086      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    417c:	4b32      	ldr	r3, [pc, #200]	; (4248 <m2m_wifi_cb+0x35c>)
    417e:	681b      	ldr	r3, [r3, #0]
    4180:	22a0      	movs	r2, #160	; 0xa0
    4182:	18ba      	adds	r2, r7, r2
    4184:	0011      	movs	r1, r2
    4186:	2065      	movs	r0, #101	; 0x65
    4188:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    418a:	e07e      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    418c:	1dfb      	adds	r3, r7, #7
    418e:	781b      	ldrb	r3, [r3, #0]
    4190:	2b09      	cmp	r3, #9
    4192:	d116      	bne.n	41c2 <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    4194:	230c      	movs	r3, #12
    4196:	18f9      	adds	r1, r7, r3
    4198:	6838      	ldr	r0, [r7, #0]
    419a:	2301      	movs	r3, #1
    419c:	2264      	movs	r2, #100	; 0x64
    419e:	4c29      	ldr	r4, [pc, #164]	; (4244 <m2m_wifi_cb+0x358>)
    41a0:	47a0      	blx	r4
    41a2:	1e03      	subs	r3, r0, #0
    41a4:	d000      	beq.n	41a8 <m2m_wifi_cb+0x2bc>
    41a6:	e070      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    41a8:	4b27      	ldr	r3, [pc, #156]	; (4248 <m2m_wifi_cb+0x35c>)
    41aa:	681b      	ldr	r3, [r3, #0]
    41ac:	2b00      	cmp	r3, #0
    41ae:	d100      	bne.n	41b2 <m2m_wifi_cb+0x2c6>
    41b0:	e06b      	b.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    41b2:	4b25      	ldr	r3, [pc, #148]	; (4248 <m2m_wifi_cb+0x35c>)
    41b4:	681b      	ldr	r3, [r3, #0]
    41b6:	220c      	movs	r2, #12
    41b8:	18ba      	adds	r2, r7, r2
    41ba:	0011      	movs	r1, r2
    41bc:	2009      	movs	r0, #9
    41be:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    41c0:	e063      	b.n	428a <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    41c2:	1dfb      	adds	r3, r7, #7
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	2b2a      	cmp	r3, #42	; 0x2a
    41c8:	d114      	bne.n	41f4 <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    41ca:	2378      	movs	r3, #120	; 0x78
    41cc:	18f9      	adds	r1, r7, r3
    41ce:	6838      	ldr	r0, [r7, #0]
    41d0:	2301      	movs	r3, #1
    41d2:	2204      	movs	r2, #4
    41d4:	4c1b      	ldr	r4, [pc, #108]	; (4244 <m2m_wifi_cb+0x358>)
    41d6:	47a0      	blx	r4
    41d8:	1e03      	subs	r3, r0, #0
    41da:	d156      	bne.n	428a <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    41dc:	4b1a      	ldr	r3, [pc, #104]	; (4248 <m2m_wifi_cb+0x35c>)
    41de:	681b      	ldr	r3, [r3, #0]
    41e0:	2b00      	cmp	r3, #0
    41e2:	d052      	beq.n	428a <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    41e4:	4b18      	ldr	r3, [pc, #96]	; (4248 <m2m_wifi_cb+0x35c>)
    41e6:	681b      	ldr	r3, [r3, #0]
    41e8:	2278      	movs	r2, #120	; 0x78
    41ea:	18ba      	adds	r2, r7, r2
    41ec:	0011      	movs	r1, r2
    41ee:	202a      	movs	r0, #42	; 0x2a
    41f0:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    41f2:	e04a      	b.n	428a <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    41f4:	1dfb      	adds	r3, r7, #7
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	2b20      	cmp	r3, #32
    41fa:	d135      	bne.n	4268 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    41fc:	2370      	movs	r3, #112	; 0x70
    41fe:	18f9      	adds	r1, r7, r3
    4200:	6838      	ldr	r0, [r7, #0]
    4202:	2300      	movs	r3, #0
    4204:	2208      	movs	r2, #8
    4206:	4c0f      	ldr	r4, [pc, #60]	; (4244 <m2m_wifi_cb+0x358>)
    4208:	47a0      	blx	r4
    420a:	1e03      	subs	r3, r0, #0
    420c:	d13d      	bne.n	428a <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    420e:	683b      	ldr	r3, [r7, #0]
    4210:	3308      	adds	r3, #8
    4212:	0018      	movs	r0, r3
    4214:	2370      	movs	r3, #112	; 0x70
    4216:	18fb      	adds	r3, r7, r3
    4218:	6819      	ldr	r1, [r3, #0]
    421a:	2370      	movs	r3, #112	; 0x70
    421c:	18fb      	adds	r3, r7, r3
    421e:	889a      	ldrh	r2, [r3, #4]
    4220:	2301      	movs	r3, #1
    4222:	4c08      	ldr	r4, [pc, #32]	; (4244 <m2m_wifi_cb+0x358>)
    4224:	47a0      	blx	r4
    4226:	1e03      	subs	r3, r0, #0
    4228:	d12f      	bne.n	428a <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    422a:	4b07      	ldr	r3, [pc, #28]	; (4248 <m2m_wifi_cb+0x35c>)
    422c:	681b      	ldr	r3, [r3, #0]
    422e:	2b00      	cmp	r3, #0
    4230:	d02b      	beq.n	428a <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    4232:	4b05      	ldr	r3, [pc, #20]	; (4248 <m2m_wifi_cb+0x35c>)
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	2270      	movs	r2, #112	; 0x70
    4238:	18ba      	adds	r2, r7, r2
    423a:	0011      	movs	r1, r2
    423c:	2020      	movs	r0, #32
    423e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4240:	e023      	b.n	428a <m2m_wifi_cb+0x39e>
    4242:	46c0      	nop			; (mov r8, r8)
    4244:	00003c2d 	.word	0x00003c2d
    4248:	200000e8 	.word	0x200000e8
    424c:	00003071 	.word	0x00003071
    4250:	00012970 	.word	0x00012970
    4254:	0001121d 	.word	0x0001121d
    4258:	0001297c 	.word	0x0001297c
    425c:	00011251 	.word	0x00011251
    4260:	200000e5 	.word	0x200000e5
    4264:	200000e4 	.word	0x200000e4
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    4268:	2395      	movs	r3, #149	; 0x95
    426a:	005a      	lsls	r2, r3, #1
    426c:	4909      	ldr	r1, [pc, #36]	; (4294 <m2m_wifi_cb+0x3a8>)
    426e:	4b0a      	ldr	r3, [pc, #40]	; (4298 <m2m_wifi_cb+0x3ac>)
    4270:	0018      	movs	r0, r3
    4272:	4b0a      	ldr	r3, [pc, #40]	; (429c <m2m_wifi_cb+0x3b0>)
    4274:	4798      	blx	r3
    4276:	1dfb      	adds	r3, r7, #7
    4278:	781a      	ldrb	r2, [r3, #0]
    427a:	4b09      	ldr	r3, [pc, #36]	; (42a0 <m2m_wifi_cb+0x3b4>)
    427c:	0011      	movs	r1, r2
    427e:	0018      	movs	r0, r3
    4280:	4b06      	ldr	r3, [pc, #24]	; (429c <m2m_wifi_cb+0x3b0>)
    4282:	4798      	blx	r3
    4284:	200d      	movs	r0, #13
    4286:	4b07      	ldr	r3, [pc, #28]	; (42a4 <m2m_wifi_cb+0x3b8>)
    4288:	4798      	blx	r3
	}
}
    428a:	46c0      	nop			; (mov r8, r8)
    428c:	46bd      	mov	sp, r7
    428e:	b02b      	add	sp, #172	; 0xac
    4290:	bd90      	pop	{r4, r7, pc}
    4292:	46c0      	nop			; (mov r8, r8)
    4294:	00012c94 	.word	0x00012c94
    4298:	0001299c 	.word	0x0001299c
    429c:	0001121d 	.word	0x0001121d
    42a0:	000129b0 	.word	0x000129b0
    42a4:	00011251 	.word	0x00011251

000042a8 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    42a8:	b590      	push	{r4, r7, lr}
    42aa:	b08d      	sub	sp, #52	; 0x34
    42ac:	af00      	add	r7, sp, #0
    42ae:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    42b0:	232f      	movs	r3, #47	; 0x2f
    42b2:	18fb      	adds	r3, r7, r3
    42b4:	2200      	movs	r2, #0
    42b6:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    42b8:	230b      	movs	r3, #11
    42ba:	18fb      	adds	r3, r7, r3
    42bc:	2201      	movs	r2, #1
    42be:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    42c0:	687b      	ldr	r3, [r7, #4]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d104      	bne.n	42d0 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    42c6:	232f      	movs	r3, #47	; 0x2f
    42c8:	18fb      	adds	r3, r7, r3
    42ca:	22f4      	movs	r2, #244	; 0xf4
    42cc:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    42ce:	e085      	b.n	43dc <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    42d0:	687b      	ldr	r3, [r7, #4]
    42d2:	681a      	ldr	r2, [r3, #0]
    42d4:	4b45      	ldr	r3, [pc, #276]	; (43ec <m2m_wifi_init+0x144>)
    42d6:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    42d8:	4b45      	ldr	r3, [pc, #276]	; (43f0 <m2m_wifi_init+0x148>)
    42da:	2200      	movs	r2, #0
    42dc:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    42de:	232f      	movs	r3, #47	; 0x2f
    42e0:	18fc      	adds	r4, r7, r3
    42e2:	230b      	movs	r3, #11
    42e4:	18fb      	adds	r3, r7, r3
    42e6:	0018      	movs	r0, r3
    42e8:	4b42      	ldr	r3, [pc, #264]	; (43f4 <m2m_wifi_init+0x14c>)
    42ea:	4798      	blx	r3
    42ec:	0003      	movs	r3, r0
    42ee:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    42f0:	232f      	movs	r3, #47	; 0x2f
    42f2:	18fb      	adds	r3, r7, r3
    42f4:	781b      	ldrb	r3, [r3, #0]
    42f6:	b25b      	sxtb	r3, r3
    42f8:	2b00      	cmp	r3, #0
    42fa:	d16c      	bne.n	43d6 <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    42fc:	232f      	movs	r3, #47	; 0x2f
    42fe:	18fc      	adds	r4, r7, r3
    4300:	2000      	movs	r0, #0
    4302:	4b3d      	ldr	r3, [pc, #244]	; (43f8 <m2m_wifi_init+0x150>)
    4304:	4798      	blx	r3
    4306:	0003      	movs	r3, r0
    4308:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    430a:	232f      	movs	r3, #47	; 0x2f
    430c:	18fb      	adds	r3, r7, r3
    430e:	781b      	ldrb	r3, [r3, #0]
    4310:	b25b      	sxtb	r3, r3
    4312:	2b00      	cmp	r3, #0
    4314:	d15a      	bne.n	43cc <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    4316:	4b39      	ldr	r3, [pc, #228]	; (43fc <m2m_wifi_init+0x154>)
    4318:	0019      	movs	r1, r3
    431a:	2001      	movs	r0, #1
    431c:	4b38      	ldr	r3, [pc, #224]	; (4400 <m2m_wifi_init+0x158>)
    431e:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    4320:	232f      	movs	r3, #47	; 0x2f
    4322:	18fc      	adds	r4, r7, r3
    4324:	230c      	movs	r3, #12
    4326:	18fb      	adds	r3, r7, r3
    4328:	0018      	movs	r0, r3
    432a:	4b36      	ldr	r3, [pc, #216]	; (4404 <m2m_wifi_init+0x15c>)
    432c:	4798      	blx	r3
    432e:	0003      	movs	r3, r0
    4330:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    4332:	4b35      	ldr	r3, [pc, #212]	; (4408 <m2m_wifi_init+0x160>)
    4334:	0018      	movs	r0, r3
    4336:	4b35      	ldr	r3, [pc, #212]	; (440c <m2m_wifi_init+0x164>)
    4338:	4798      	blx	r3
    433a:	230c      	movs	r3, #12
    433c:	18fb      	adds	r3, r7, r3
    433e:	791b      	ldrb	r3, [r3, #4]
    4340:	0019      	movs	r1, r3
    4342:	230c      	movs	r3, #12
    4344:	18fb      	adds	r3, r7, r3
    4346:	795b      	ldrb	r3, [r3, #5]
    4348:	001a      	movs	r2, r3
    434a:	230c      	movs	r3, #12
    434c:	18fb      	adds	r3, r7, r3
    434e:	799b      	ldrb	r3, [r3, #6]
    4350:	482f      	ldr	r0, [pc, #188]	; (4410 <m2m_wifi_init+0x168>)
    4352:	4c2e      	ldr	r4, [pc, #184]	; (440c <m2m_wifi_init+0x164>)
    4354:	47a0      	blx	r4
    4356:	200d      	movs	r0, #13
    4358:	4b2e      	ldr	r3, [pc, #184]	; (4414 <m2m_wifi_init+0x16c>)
    435a:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    435c:	4b2a      	ldr	r3, [pc, #168]	; (4408 <m2m_wifi_init+0x160>)
    435e:	0018      	movs	r0, r3
    4360:	4b2a      	ldr	r3, [pc, #168]	; (440c <m2m_wifi_init+0x164>)
    4362:	4798      	blx	r3
    4364:	230c      	movs	r3, #12
    4366:	18fb      	adds	r3, r7, r3
    4368:	79db      	ldrb	r3, [r3, #7]
    436a:	0019      	movs	r1, r3
    436c:	230c      	movs	r3, #12
    436e:	18fb      	adds	r3, r7, r3
    4370:	7a1b      	ldrb	r3, [r3, #8]
    4372:	001a      	movs	r2, r3
    4374:	230c      	movs	r3, #12
    4376:	18fb      	adds	r3, r7, r3
    4378:	7a5b      	ldrb	r3, [r3, #9]
    437a:	4827      	ldr	r0, [pc, #156]	; (4418 <m2m_wifi_init+0x170>)
    437c:	4c23      	ldr	r4, [pc, #140]	; (440c <m2m_wifi_init+0x164>)
    437e:	47a0      	blx	r4
    4380:	200d      	movs	r0, #13
    4382:	4b24      	ldr	r3, [pc, #144]	; (4414 <m2m_wifi_init+0x16c>)
    4384:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    4386:	4b20      	ldr	r3, [pc, #128]	; (4408 <m2m_wifi_init+0x160>)
    4388:	0018      	movs	r0, r3
    438a:	4b20      	ldr	r3, [pc, #128]	; (440c <m2m_wifi_init+0x164>)
    438c:	4798      	blx	r3
    438e:	4823      	ldr	r0, [pc, #140]	; (441c <m2m_wifi_init+0x174>)
    4390:	2300      	movs	r3, #0
    4392:	2203      	movs	r2, #3
    4394:	2113      	movs	r1, #19
    4396:	4c1d      	ldr	r4, [pc, #116]	; (440c <m2m_wifi_init+0x164>)
    4398:	47a0      	blx	r4
    439a:	200d      	movs	r0, #13
    439c:	4b1d      	ldr	r3, [pc, #116]	; (4414 <m2m_wifi_init+0x16c>)
    439e:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    43a0:	232f      	movs	r3, #47	; 0x2f
    43a2:	18fb      	adds	r3, r7, r3
    43a4:	781b      	ldrb	r3, [r3, #0]
    43a6:	b25b      	sxtb	r3, r3
    43a8:	330d      	adds	r3, #13
    43aa:	d116      	bne.n	43da <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    43ac:	23d6      	movs	r3, #214	; 0xd6
    43ae:	33ff      	adds	r3, #255	; 0xff
    43b0:	001a      	movs	r2, r3
    43b2:	491b      	ldr	r1, [pc, #108]	; (4420 <m2m_wifi_init+0x178>)
    43b4:	4b1b      	ldr	r3, [pc, #108]	; (4424 <m2m_wifi_init+0x17c>)
    43b6:	0018      	movs	r0, r3
    43b8:	4b14      	ldr	r3, [pc, #80]	; (440c <m2m_wifi_init+0x164>)
    43ba:	4798      	blx	r3
    43bc:	4b1a      	ldr	r3, [pc, #104]	; (4428 <m2m_wifi_init+0x180>)
    43be:	0018      	movs	r0, r3
    43c0:	4b1a      	ldr	r3, [pc, #104]	; (442c <m2m_wifi_init+0x184>)
    43c2:	4798      	blx	r3
    43c4:	200d      	movs	r0, #13
    43c6:	4b13      	ldr	r3, [pc, #76]	; (4414 <m2m_wifi_init+0x16c>)
    43c8:	4798      	blx	r3
	}

	goto _EXIT0;
    43ca:	e006      	b.n	43da <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    43cc:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    43ce:	2000      	movs	r0, #0
    43d0:	4b17      	ldr	r3, [pc, #92]	; (4430 <m2m_wifi_init+0x188>)
    43d2:	4798      	blx	r3
    43d4:	e002      	b.n	43dc <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	e000      	b.n	43dc <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    43da:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    43dc:	232f      	movs	r3, #47	; 0x2f
    43de:	18fb      	adds	r3, r7, r3
    43e0:	781b      	ldrb	r3, [r3, #0]
    43e2:	b25b      	sxtb	r3, r3
}
    43e4:	0018      	movs	r0, r3
    43e6:	46bd      	mov	sp, r7
    43e8:	b00d      	add	sp, #52	; 0x34
    43ea:	bd90      	pop	{r4, r7, pc}
    43ec:	200000e8 	.word	0x200000e8
    43f0:	200000e5 	.word	0x200000e5
    43f4:	0000572d 	.word	0x0000572d
    43f8:	000033e5 	.word	0x000033e5
    43fc:	00003eed 	.word	0x00003eed
    4400:	00003e25 	.word	0x00003e25
    4404:	000055c5 	.word	0x000055c5
    4408:	00012970 	.word	0x00012970
    440c:	0001121d 	.word	0x0001121d
    4410:	00012ad8 	.word	0x00012ad8
    4414:	00011251 	.word	0x00011251
    4418:	00012af4 	.word	0x00012af4
    441c:	00012b10 	.word	0x00012b10
    4420:	00012ca0 	.word	0x00012ca0
    4424:	0001299c 	.word	0x0001299c
    4428:	00012b2c 	.word	0x00012b2c
    442c:	0001133d 	.word	0x0001133d
    4430:	000058bd 	.word	0x000058bd

00004434 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    4434:	b580      	push	{r7, lr}
    4436:	b082      	sub	sp, #8
    4438:	af00      	add	r7, sp, #0
    443a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    443c:	4b03      	ldr	r3, [pc, #12]	; (444c <m2m_wifi_handle_events+0x18>)
    443e:	4798      	blx	r3
    4440:	0003      	movs	r3, r0
}
    4442:	0018      	movs	r0, r3
    4444:	46bd      	mov	sp, r7
    4446:	b002      	add	sp, #8
    4448:	bd80      	pop	{r7, pc}
    444a:	46c0      	nop			; (mov r8, r8)
    444c:	00003b9d 	.word	0x00003b9d

00004450 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    4450:	b590      	push	{r4, r7, lr}
    4452:	b087      	sub	sp, #28
    4454:	af02      	add	r7, sp, #8
    4456:	60f8      	str	r0, [r7, #12]
    4458:	0008      	movs	r0, r1
    445a:	0011      	movs	r1, r2
    445c:	607b      	str	r3, [r7, #4]
    445e:	230b      	movs	r3, #11
    4460:	18fb      	adds	r3, r7, r3
    4462:	1c02      	adds	r2, r0, #0
    4464:	701a      	strb	r2, [r3, #0]
    4466:	230a      	movs	r3, #10
    4468:	18fb      	adds	r3, r7, r3
    446a:	1c0a      	adds	r2, r1, #0
    446c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    446e:	687c      	ldr	r4, [r7, #4]
    4470:	230a      	movs	r3, #10
    4472:	18fb      	adds	r3, r7, r3
    4474:	781a      	ldrb	r2, [r3, #0]
    4476:	230b      	movs	r3, #11
    4478:	18fb      	adds	r3, r7, r3
    447a:	7819      	ldrb	r1, [r3, #0]
    447c:	68f8      	ldr	r0, [r7, #12]
    447e:	2300      	movs	r3, #0
    4480:	9301      	str	r3, [sp, #4]
    4482:	2320      	movs	r3, #32
    4484:	18fb      	adds	r3, r7, r3
    4486:	881b      	ldrh	r3, [r3, #0]
    4488:	9300      	str	r3, [sp, #0]
    448a:	0023      	movs	r3, r4
    448c:	4c03      	ldr	r4, [pc, #12]	; (449c <m2m_wifi_connect+0x4c>)
    448e:	47a0      	blx	r4
    4490:	0003      	movs	r3, r0
}
    4492:	0018      	movs	r0, r3
    4494:	46bd      	mov	sp, r7
    4496:	b005      	add	sp, #20
    4498:	bd90      	pop	{r4, r7, pc}
    449a:	46c0      	nop			; (mov r8, r8)
    449c:	000044a1 	.word	0x000044a1

000044a0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    44a0:	b5b0      	push	{r4, r5, r7, lr}
    44a2:	b0aa      	sub	sp, #168	; 0xa8
    44a4:	af04      	add	r7, sp, #16
    44a6:	60f8      	str	r0, [r7, #12]
    44a8:	0008      	movs	r0, r1
    44aa:	0011      	movs	r1, r2
    44ac:	607b      	str	r3, [r7, #4]
    44ae:	230b      	movs	r3, #11
    44b0:	18fb      	adds	r3, r7, r3
    44b2:	1c02      	adds	r2, r0, #0
    44b4:	701a      	strb	r2, [r3, #0]
    44b6:	230a      	movs	r3, #10
    44b8:	18fb      	adds	r3, r7, r3
    44ba:	1c0a      	adds	r2, r1, #0
    44bc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    44be:	2397      	movs	r3, #151	; 0x97
    44c0:	18fb      	adds	r3, r7, r3
    44c2:	2200      	movs	r2, #0
    44c4:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    44c6:	230a      	movs	r3, #10
    44c8:	18fb      	adds	r3, r7, r3
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	2b01      	cmp	r3, #1
    44ce:	d100      	bne.n	44d2 <m2m_wifi_connect_sc+0x32>
    44d0:	e083      	b.n	45da <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    44d2:	687b      	ldr	r3, [r7, #4]
    44d4:	2b00      	cmp	r3, #0
    44d6:	d111      	bne.n	44fc <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    44d8:	4ad8      	ldr	r2, [pc, #864]	; (483c <m2m_wifi_connect_sc+0x39c>)
    44da:	49d9      	ldr	r1, [pc, #868]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    44dc:	4bd9      	ldr	r3, [pc, #868]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    44de:	0018      	movs	r0, r3
    44e0:	4bd9      	ldr	r3, [pc, #868]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    44e2:	4798      	blx	r3
    44e4:	4bd9      	ldr	r3, [pc, #868]	; (484c <m2m_wifi_connect_sc+0x3ac>)
    44e6:	0018      	movs	r0, r3
    44e8:	4bd9      	ldr	r3, [pc, #868]	; (4850 <m2m_wifi_connect_sc+0x3b0>)
    44ea:	4798      	blx	r3
    44ec:	200d      	movs	r0, #13
    44ee:	4bd9      	ldr	r3, [pc, #868]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    44f0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    44f2:	2397      	movs	r3, #151	; 0x97
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	22f4      	movs	r2, #244	; 0xf4
    44f8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    44fa:	e1ef      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    44fc:	230a      	movs	r3, #10
    44fe:	18fb      	adds	r3, r7, r3
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	2b02      	cmp	r3, #2
    4504:	d169      	bne.n	45da <m2m_wifi_connect_sc+0x13a>
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	0018      	movs	r0, r3
    450a:	4bd3      	ldr	r3, [pc, #844]	; (4858 <m2m_wifi_connect_sc+0x3b8>)
    450c:	4798      	blx	r3
    450e:	1e03      	subs	r3, r0, #0
    4510:	2b40      	cmp	r3, #64	; 0x40
    4512:	d162      	bne.n	45da <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    4514:	2396      	movs	r3, #150	; 0x96
    4516:	18fb      	adds	r3, r7, r3
    4518:	2200      	movs	r2, #0
    451a:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	2290      	movs	r2, #144	; 0x90
    4520:	18ba      	adds	r2, r7, r2
    4522:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    4524:	e054      	b.n	45d0 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    4526:	2396      	movs	r3, #150	; 0x96
    4528:	18fb      	adds	r3, r7, r3
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	2290      	movs	r2, #144	; 0x90
    452e:	18ba      	adds	r2, r7, r2
    4530:	6812      	ldr	r2, [r2, #0]
    4532:	18d3      	adds	r3, r2, r3
    4534:	781b      	ldrb	r3, [r3, #0]
    4536:	2b2f      	cmp	r3, #47	; 0x2f
    4538:	d931      	bls.n	459e <m2m_wifi_connect_sc+0xfe>
    453a:	2396      	movs	r3, #150	; 0x96
    453c:	18fb      	adds	r3, r7, r3
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	2290      	movs	r2, #144	; 0x90
    4542:	18ba      	adds	r2, r7, r2
    4544:	6812      	ldr	r2, [r2, #0]
    4546:	18d3      	adds	r3, r2, r3
    4548:	781b      	ldrb	r3, [r3, #0]
    454a:	2b39      	cmp	r3, #57	; 0x39
    454c:	d909      	bls.n	4562 <m2m_wifi_connect_sc+0xc2>
    454e:	2396      	movs	r3, #150	; 0x96
    4550:	18fb      	adds	r3, r7, r3
    4552:	781b      	ldrb	r3, [r3, #0]
    4554:	2290      	movs	r2, #144	; 0x90
    4556:	18ba      	adds	r2, r7, r2
    4558:	6812      	ldr	r2, [r2, #0]
    455a:	18d3      	adds	r3, r2, r3
    455c:	781b      	ldrb	r3, [r3, #0]
    455e:	2b40      	cmp	r3, #64	; 0x40
    4560:	d91d      	bls.n	459e <m2m_wifi_connect_sc+0xfe>
    4562:	2396      	movs	r3, #150	; 0x96
    4564:	18fb      	adds	r3, r7, r3
    4566:	781b      	ldrb	r3, [r3, #0]
    4568:	2290      	movs	r2, #144	; 0x90
    456a:	18ba      	adds	r2, r7, r2
    456c:	6812      	ldr	r2, [r2, #0]
    456e:	18d3      	adds	r3, r2, r3
    4570:	781b      	ldrb	r3, [r3, #0]
    4572:	2b46      	cmp	r3, #70	; 0x46
    4574:	d909      	bls.n	458a <m2m_wifi_connect_sc+0xea>
    4576:	2396      	movs	r3, #150	; 0x96
    4578:	18fb      	adds	r3, r7, r3
    457a:	781b      	ldrb	r3, [r3, #0]
    457c:	2290      	movs	r2, #144	; 0x90
    457e:	18ba      	adds	r2, r7, r2
    4580:	6812      	ldr	r2, [r2, #0]
    4582:	18d3      	adds	r3, r2, r3
    4584:	781b      	ldrb	r3, [r3, #0]
    4586:	2b60      	cmp	r3, #96	; 0x60
    4588:	d909      	bls.n	459e <m2m_wifi_connect_sc+0xfe>
    458a:	2396      	movs	r3, #150	; 0x96
    458c:	18fb      	adds	r3, r7, r3
    458e:	781b      	ldrb	r3, [r3, #0]
    4590:	2290      	movs	r2, #144	; 0x90
    4592:	18ba      	adds	r2, r7, r2
    4594:	6812      	ldr	r2, [r2, #0]
    4596:	18d3      	adds	r3, r2, r3
    4598:	781b      	ldrb	r3, [r3, #0]
    459a:	2b66      	cmp	r3, #102	; 0x66
    459c:	d911      	bls.n	45c2 <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    459e:	4aaf      	ldr	r2, [pc, #700]	; (485c <m2m_wifi_connect_sc+0x3bc>)
    45a0:	49a7      	ldr	r1, [pc, #668]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    45a2:	4ba8      	ldr	r3, [pc, #672]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    45a4:	0018      	movs	r0, r3
    45a6:	4ba8      	ldr	r3, [pc, #672]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    45a8:	4798      	blx	r3
    45aa:	4bad      	ldr	r3, [pc, #692]	; (4860 <m2m_wifi_connect_sc+0x3c0>)
    45ac:	0018      	movs	r0, r3
    45ae:	4ba8      	ldr	r3, [pc, #672]	; (4850 <m2m_wifi_connect_sc+0x3b0>)
    45b0:	4798      	blx	r3
    45b2:	200d      	movs	r0, #13
    45b4:	4ba7      	ldr	r3, [pc, #668]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    45b6:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    45b8:	2397      	movs	r3, #151	; 0x97
    45ba:	18fb      	adds	r3, r7, r3
    45bc:	22f4      	movs	r2, #244	; 0xf4
    45be:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    45c0:	e18c      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    45c2:	2396      	movs	r3, #150	; 0x96
    45c4:	18fb      	adds	r3, r7, r3
    45c6:	781a      	ldrb	r2, [r3, #0]
    45c8:	2396      	movs	r3, #150	; 0x96
    45ca:	18fb      	adds	r3, r7, r3
    45cc:	3201      	adds	r2, #1
    45ce:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    45d0:	2396      	movs	r3, #150	; 0x96
    45d2:	18fb      	adds	r3, r7, r3
    45d4:	781b      	ldrb	r3, [r3, #0]
    45d6:	2b3f      	cmp	r3, #63	; 0x3f
    45d8:	d9a5      	bls.n	4526 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    45da:	230b      	movs	r3, #11
    45dc:	18fb      	adds	r3, r7, r3
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	2b00      	cmp	r3, #0
    45e2:	d004      	beq.n	45ee <m2m_wifi_connect_sc+0x14e>
    45e4:	230b      	movs	r3, #11
    45e6:	18fb      	adds	r3, r7, r3
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	2b20      	cmp	r3, #32
    45ec:	d911      	bls.n	4612 <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    45ee:	4a9d      	ldr	r2, [pc, #628]	; (4864 <m2m_wifi_connect_sc+0x3c4>)
    45f0:	4993      	ldr	r1, [pc, #588]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    45f2:	4b94      	ldr	r3, [pc, #592]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    45f4:	0018      	movs	r0, r3
    45f6:	4b94      	ldr	r3, [pc, #592]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    45f8:	4798      	blx	r3
    45fa:	4b9b      	ldr	r3, [pc, #620]	; (4868 <m2m_wifi_connect_sc+0x3c8>)
    45fc:	0018      	movs	r0, r3
    45fe:	4b94      	ldr	r3, [pc, #592]	; (4850 <m2m_wifi_connect_sc+0x3b0>)
    4600:	4798      	blx	r3
    4602:	200d      	movs	r0, #13
    4604:	4b93      	ldr	r3, [pc, #588]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    4606:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    4608:	2397      	movs	r3, #151	; 0x97
    460a:	18fb      	adds	r3, r7, r3
    460c:	22f4      	movs	r2, #244	; 0xf4
    460e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    4610:	e164      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    4612:	23a8      	movs	r3, #168	; 0xa8
    4614:	18fb      	adds	r3, r7, r3
    4616:	881b      	ldrh	r3, [r3, #0]
    4618:	2b0d      	cmp	r3, #13
    461a:	d916      	bls.n	464a <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    461c:	23a8      	movs	r3, #168	; 0xa8
    461e:	18fb      	adds	r3, r7, r3
    4620:	881b      	ldrh	r3, [r3, #0]
    4622:	2bff      	cmp	r3, #255	; 0xff
    4624:	d011      	beq.n	464a <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    4626:	4a91      	ldr	r2, [pc, #580]	; (486c <m2m_wifi_connect_sc+0x3cc>)
    4628:	4985      	ldr	r1, [pc, #532]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    462a:	4b86      	ldr	r3, [pc, #536]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    462c:	0018      	movs	r0, r3
    462e:	4b86      	ldr	r3, [pc, #536]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    4630:	4798      	blx	r3
    4632:	4b8f      	ldr	r3, [pc, #572]	; (4870 <m2m_wifi_connect_sc+0x3d0>)
    4634:	0018      	movs	r0, r3
    4636:	4b86      	ldr	r3, [pc, #536]	; (4850 <m2m_wifi_connect_sc+0x3b0>)
    4638:	4798      	blx	r3
    463a:	200d      	movs	r0, #13
    463c:	4b85      	ldr	r3, [pc, #532]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    463e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4640:	2397      	movs	r3, #151	; 0x97
    4642:	18fb      	adds	r3, r7, r3
    4644:	22f4      	movs	r2, #244	; 0xf4
    4646:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    4648:	e148      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    464a:	230b      	movs	r3, #11
    464c:	18fb      	adds	r3, r7, r3
    464e:	781a      	ldrb	r2, [r3, #0]
    4650:	68f9      	ldr	r1, [r7, #12]
    4652:	2314      	movs	r3, #20
    4654:	18fb      	adds	r3, r7, r3
    4656:	3346      	adds	r3, #70	; 0x46
    4658:	0018      	movs	r0, r3
    465a:	4b86      	ldr	r3, [pc, #536]	; (4874 <m2m_wifi_connect_sc+0x3d4>)
    465c:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    465e:	230b      	movs	r3, #11
    4660:	18fb      	adds	r3, r7, r3
    4662:	781b      	ldrb	r3, [r3, #0]
    4664:	2214      	movs	r2, #20
    4666:	18ba      	adds	r2, r7, r2
    4668:	2146      	movs	r1, #70	; 0x46
    466a:	18d3      	adds	r3, r2, r3
    466c:	185b      	adds	r3, r3, r1
    466e:	2200      	movs	r2, #0
    4670:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    4672:	2314      	movs	r3, #20
    4674:	18fb      	adds	r3, r7, r3
    4676:	22a8      	movs	r2, #168	; 0xa8
    4678:	18ba      	adds	r2, r7, r2
    467a:	2144      	movs	r1, #68	; 0x44
    467c:	8812      	ldrh	r2, [r2, #0]
    467e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    4680:	23ac      	movs	r3, #172	; 0xac
    4682:	18fb      	adds	r3, r7, r3
    4684:	781b      	ldrb	r3, [r3, #0]
    4686:	1e5a      	subs	r2, r3, #1
    4688:	4193      	sbcs	r3, r2
    468a:	b2db      	uxtb	r3, r3
    468c:	0019      	movs	r1, r3
    468e:	2314      	movs	r3, #20
    4690:	18fb      	adds	r3, r7, r3
    4692:	2267      	movs	r2, #103	; 0x67
    4694:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    4696:	2314      	movs	r3, #20
    4698:	18fb      	adds	r3, r7, r3
    469a:	228c      	movs	r2, #140	; 0x8c
    469c:	18ba      	adds	r2, r7, r2
    469e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    46a0:	238c      	movs	r3, #140	; 0x8c
    46a2:	18fb      	adds	r3, r7, r3
    46a4:	681b      	ldr	r3, [r3, #0]
    46a6:	220a      	movs	r2, #10
    46a8:	18ba      	adds	r2, r7, r2
    46aa:	2141      	movs	r1, #65	; 0x41
    46ac:	7812      	ldrb	r2, [r2, #0]
    46ae:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    46b0:	230a      	movs	r3, #10
    46b2:	18fb      	adds	r3, r7, r3
    46b4:	781b      	ldrb	r3, [r3, #0]
    46b6:	2b03      	cmp	r3, #3
    46b8:	d000      	beq.n	46bc <m2m_wifi_connect_sc+0x21c>
    46ba:	e07b      	b.n	47b4 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	2288      	movs	r2, #136	; 0x88
    46c0:	18ba      	adds	r2, r7, r2
    46c2:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    46c4:	238c      	movs	r3, #140	; 0x8c
    46c6:	18fb      	adds	r3, r7, r3
    46c8:	681b      	ldr	r3, [r3, #0]
    46ca:	2284      	movs	r2, #132	; 0x84
    46cc:	18ba      	adds	r2, r7, r2
    46ce:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    46d0:	2388      	movs	r3, #136	; 0x88
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	681b      	ldr	r3, [r3, #0]
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	3b01      	subs	r3, #1
    46da:	b2da      	uxtb	r2, r3
    46dc:	2384      	movs	r3, #132	; 0x84
    46de:	18fb      	adds	r3, r7, r3
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    46e4:	2384      	movs	r3, #132	; 0x84
    46e6:	18fb      	adds	r3, r7, r3
    46e8:	681b      	ldr	r3, [r3, #0]
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	2b03      	cmp	r3, #3
    46ee:	d917      	bls.n	4720 <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    46f0:	4a61      	ldr	r2, [pc, #388]	; (4878 <m2m_wifi_connect_sc+0x3d8>)
    46f2:	4953      	ldr	r1, [pc, #332]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    46f4:	4b53      	ldr	r3, [pc, #332]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    46f6:	0018      	movs	r0, r3
    46f8:	4b53      	ldr	r3, [pc, #332]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    46fa:	4798      	blx	r3
    46fc:	2384      	movs	r3, #132	; 0x84
    46fe:	18fb      	adds	r3, r7, r3
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	781b      	ldrb	r3, [r3, #0]
    4704:	001a      	movs	r2, r3
    4706:	4b5d      	ldr	r3, [pc, #372]	; (487c <m2m_wifi_connect_sc+0x3dc>)
    4708:	0011      	movs	r1, r2
    470a:	0018      	movs	r0, r3
    470c:	4b4e      	ldr	r3, [pc, #312]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    470e:	4798      	blx	r3
    4710:	200d      	movs	r0, #13
    4712:	4b50      	ldr	r3, [pc, #320]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    4714:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4716:	2397      	movs	r3, #151	; 0x97
    4718:	18fb      	adds	r3, r7, r3
    471a:	22f4      	movs	r2, #244	; 0xf4
    471c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    471e:	e0dd      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    4720:	2388      	movs	r3, #136	; 0x88
    4722:	18fb      	adds	r3, r7, r3
    4724:	681b      	ldr	r3, [r3, #0]
    4726:	785b      	ldrb	r3, [r3, #1]
    4728:	3b01      	subs	r3, #1
    472a:	b2da      	uxtb	r2, r3
    472c:	2384      	movs	r3, #132	; 0x84
    472e:	18fb      	adds	r3, r7, r3
    4730:	681b      	ldr	r3, [r3, #0]
    4732:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    4734:	2384      	movs	r3, #132	; 0x84
    4736:	18fb      	adds	r3, r7, r3
    4738:	681b      	ldr	r3, [r3, #0]
    473a:	785b      	ldrb	r3, [r3, #1]
    473c:	2b0a      	cmp	r3, #10
    473e:	d01e      	beq.n	477e <m2m_wifi_connect_sc+0x2de>
    4740:	2384      	movs	r3, #132	; 0x84
    4742:	18fb      	adds	r3, r7, r3
    4744:	681b      	ldr	r3, [r3, #0]
    4746:	785b      	ldrb	r3, [r3, #1]
    4748:	2b1a      	cmp	r3, #26
    474a:	d018      	beq.n	477e <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    474c:	2390      	movs	r3, #144	; 0x90
    474e:	009a      	lsls	r2, r3, #2
    4750:	493b      	ldr	r1, [pc, #236]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    4752:	4b3c      	ldr	r3, [pc, #240]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    4754:	0018      	movs	r0, r3
    4756:	4b3c      	ldr	r3, [pc, #240]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    4758:	4798      	blx	r3
    475a:	2384      	movs	r3, #132	; 0x84
    475c:	18fb      	adds	r3, r7, r3
    475e:	681b      	ldr	r3, [r3, #0]
    4760:	785b      	ldrb	r3, [r3, #1]
    4762:	001a      	movs	r2, r3
    4764:	4b46      	ldr	r3, [pc, #280]	; (4880 <m2m_wifi_connect_sc+0x3e0>)
    4766:	0011      	movs	r1, r2
    4768:	0018      	movs	r0, r3
    476a:	4b37      	ldr	r3, [pc, #220]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    476c:	4798      	blx	r3
    476e:	200d      	movs	r0, #13
    4770:	4b38      	ldr	r3, [pc, #224]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    4772:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4774:	2397      	movs	r3, #151	; 0x97
    4776:	18fb      	adds	r3, r7, r3
    4778:	22f4      	movs	r2, #244	; 0xf4
    477a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    477c:	e0ae      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    477e:	2384      	movs	r3, #132	; 0x84
    4780:	18fb      	adds	r3, r7, r3
    4782:	681b      	ldr	r3, [r3, #0]
    4784:	1c98      	adds	r0, r3, #2
    4786:	2388      	movs	r3, #136	; 0x88
    4788:	18fb      	adds	r3, r7, r3
    478a:	681b      	ldr	r3, [r3, #0]
    478c:	1c99      	adds	r1, r3, #2
    478e:	2388      	movs	r3, #136	; 0x88
    4790:	18fb      	adds	r3, r7, r3
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	785b      	ldrb	r3, [r3, #1]
    4796:	001a      	movs	r2, r3
    4798:	4b36      	ldr	r3, [pc, #216]	; (4874 <m2m_wifi_connect_sc+0x3d4>)
    479a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    479c:	2388      	movs	r3, #136	; 0x88
    479e:	18fb      	adds	r3, r7, r3
    47a0:	681b      	ldr	r3, [r3, #0]
    47a2:	785b      	ldrb	r3, [r3, #1]
    47a4:	001a      	movs	r2, r3
    47a6:	2384      	movs	r3, #132	; 0x84
    47a8:	18fb      	adds	r3, r7, r3
    47aa:	681b      	ldr	r3, [r3, #0]
    47ac:	189b      	adds	r3, r3, r2
    47ae:	2200      	movs	r2, #0
    47b0:	709a      	strb	r2, [r3, #2]
    47b2:	e082      	b.n	48ba <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    47b4:	230a      	movs	r3, #10
    47b6:	18fb      	adds	r3, r7, r3
    47b8:	781b      	ldrb	r3, [r3, #0]
    47ba:	2b02      	cmp	r3, #2
    47bc:	d130      	bne.n	4820 <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    47be:	2382      	movs	r3, #130	; 0x82
    47c0:	18fc      	adds	r4, r7, r3
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	0018      	movs	r0, r3
    47c6:	4b24      	ldr	r3, [pc, #144]	; (4858 <m2m_wifi_connect_sc+0x3b8>)
    47c8:	4798      	blx	r3
    47ca:	0003      	movs	r3, r0
    47cc:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    47ce:	2382      	movs	r3, #130	; 0x82
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	881b      	ldrh	r3, [r3, #0]
    47d4:	2b00      	cmp	r3, #0
    47d6:	d004      	beq.n	47e2 <m2m_wifi_connect_sc+0x342>
    47d8:	2382      	movs	r3, #130	; 0x82
    47da:	18fb      	adds	r3, r7, r3
    47dc:	881b      	ldrh	r3, [r3, #0]
    47de:	2b40      	cmp	r3, #64	; 0x40
    47e0:	d911      	bls.n	4806 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    47e2:	4a28      	ldr	r2, [pc, #160]	; (4884 <m2m_wifi_connect_sc+0x3e4>)
    47e4:	4916      	ldr	r1, [pc, #88]	; (4840 <m2m_wifi_connect_sc+0x3a0>)
    47e6:	4b17      	ldr	r3, [pc, #92]	; (4844 <m2m_wifi_connect_sc+0x3a4>)
    47e8:	0018      	movs	r0, r3
    47ea:	4b17      	ldr	r3, [pc, #92]	; (4848 <m2m_wifi_connect_sc+0x3a8>)
    47ec:	4798      	blx	r3
    47ee:	4b26      	ldr	r3, [pc, #152]	; (4888 <m2m_wifi_connect_sc+0x3e8>)
    47f0:	0018      	movs	r0, r3
    47f2:	4b17      	ldr	r3, [pc, #92]	; (4850 <m2m_wifi_connect_sc+0x3b0>)
    47f4:	4798      	blx	r3
    47f6:	200d      	movs	r0, #13
    47f8:	4b16      	ldr	r3, [pc, #88]	; (4854 <m2m_wifi_connect_sc+0x3b4>)
    47fa:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    47fc:	2397      	movs	r3, #151	; 0x97
    47fe:	18fb      	adds	r3, r7, r3
    4800:	22f4      	movs	r2, #244	; 0xf4
    4802:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    4804:	e06a      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    4806:	238c      	movs	r3, #140	; 0x8c
    4808:	18fb      	adds	r3, r7, r3
    480a:	6818      	ldr	r0, [r3, #0]
    480c:	2382      	movs	r3, #130	; 0x82
    480e:	18fb      	adds	r3, r7, r3
    4810:	881b      	ldrh	r3, [r3, #0]
    4812:	3301      	adds	r3, #1
    4814:	001a      	movs	r2, r3
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	0019      	movs	r1, r3
    481a:	4b16      	ldr	r3, [pc, #88]	; (4874 <m2m_wifi_connect_sc+0x3d4>)
    481c:	4798      	blx	r3
    481e:	e04c      	b.n	48ba <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    4820:	230a      	movs	r3, #10
    4822:	18fb      	adds	r3, r7, r3
    4824:	781b      	ldrb	r3, [r3, #0]
    4826:	2b04      	cmp	r3, #4
    4828:	d130      	bne.n	488c <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    482a:	238c      	movs	r3, #140	; 0x8c
    482c:	18fb      	adds	r3, r7, r3
    482e:	681b      	ldr	r3, [r3, #0]
    4830:	6879      	ldr	r1, [r7, #4]
    4832:	223e      	movs	r2, #62	; 0x3e
    4834:	0018      	movs	r0, r3
    4836:	4b0f      	ldr	r3, [pc, #60]	; (4874 <m2m_wifi_connect_sc+0x3d4>)
    4838:	4798      	blx	r3
    483a:	e03e      	b.n	48ba <m2m_wifi_connect_sc+0x41a>
    483c:	00000203 	.word	0x00000203
    4840:	00012cb0 	.word	0x00012cb0
    4844:	0001299c 	.word	0x0001299c
    4848:	0001121d 	.word	0x0001121d
    484c:	00012b48 	.word	0x00012b48
    4850:	0001133d 	.word	0x0001133d
    4854:	00011251 	.word	0x00011251
    4858:	000030b1 	.word	0x000030b1
    485c:	0000020f 	.word	0x0000020f
    4860:	00012b5c 	.word	0x00012b5c
    4864:	00000219 	.word	0x00000219
    4868:	00012b68 	.word	0x00012b68
    486c:	00000222 	.word	0x00000222
    4870:	00012b7c 	.word	0x00012b7c
    4874:	00003035 	.word	0x00003035
    4878:	00000239 	.word	0x00000239
    487c:	00012b88 	.word	0x00012b88
    4880:	00012ba4 	.word	0x00012ba4
    4884:	0000024f 	.word	0x0000024f
    4888:	00012bc0 	.word	0x00012bc0
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    488c:	230a      	movs	r3, #10
    488e:	18fb      	adds	r3, r7, r3
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	2b01      	cmp	r3, #1
    4894:	d011      	beq.n	48ba <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    4896:	4a15      	ldr	r2, [pc, #84]	; (48ec <m2m_wifi_connect_sc+0x44c>)
    4898:	4915      	ldr	r1, [pc, #84]	; (48f0 <m2m_wifi_connect_sc+0x450>)
    489a:	4b16      	ldr	r3, [pc, #88]	; (48f4 <m2m_wifi_connect_sc+0x454>)
    489c:	0018      	movs	r0, r3
    489e:	4b16      	ldr	r3, [pc, #88]	; (48f8 <m2m_wifi_connect_sc+0x458>)
    48a0:	4798      	blx	r3
    48a2:	4b16      	ldr	r3, [pc, #88]	; (48fc <m2m_wifi_connect_sc+0x45c>)
    48a4:	0018      	movs	r0, r3
    48a6:	4b16      	ldr	r3, [pc, #88]	; (4900 <m2m_wifi_connect_sc+0x460>)
    48a8:	4798      	blx	r3
    48aa:	200d      	movs	r0, #13
    48ac:	4b15      	ldr	r3, [pc, #84]	; (4904 <m2m_wifi_connect_sc+0x464>)
    48ae:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    48b0:	2397      	movs	r3, #151	; 0x97
    48b2:	18fb      	adds	r3, r7, r3
    48b4:	22f4      	movs	r2, #244	; 0xf4
    48b6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    48b8:	e010      	b.n	48dc <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    48ba:	2397      	movs	r3, #151	; 0x97
    48bc:	18fc      	adds	r4, r7, r3
    48be:	2314      	movs	r3, #20
    48c0:	18fa      	adds	r2, r7, r3
    48c2:	2300      	movs	r3, #0
    48c4:	9302      	str	r3, [sp, #8]
    48c6:	2300      	movs	r3, #0
    48c8:	9301      	str	r3, [sp, #4]
    48ca:	2300      	movs	r3, #0
    48cc:	9300      	str	r3, [sp, #0]
    48ce:	236c      	movs	r3, #108	; 0x6c
    48d0:	2128      	movs	r1, #40	; 0x28
    48d2:	2001      	movs	r0, #1
    48d4:	4d0c      	ldr	r5, [pc, #48]	; (4908 <m2m_wifi_connect_sc+0x468>)
    48d6:	47a8      	blx	r5
    48d8:	0003      	movs	r3, r0
    48da:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    48dc:	2397      	movs	r3, #151	; 0x97
    48de:	18fb      	adds	r3, r7, r3
    48e0:	781b      	ldrb	r3, [r3, #0]
    48e2:	b25b      	sxtb	r3, r3
}
    48e4:	0018      	movs	r0, r3
    48e6:	46bd      	mov	sp, r7
    48e8:	b026      	add	sp, #152	; 0x98
    48ea:	bdb0      	pop	{r4, r5, r7, pc}
    48ec:	0000025f 	.word	0x0000025f
    48f0:	00012cb0 	.word	0x00012cb0
    48f4:	0001299c 	.word	0x0001299c
    48f8:	0001121d 	.word	0x0001121d
    48fc:	00012bdc 	.word	0x00012bdc
    4900:	0001133d 	.word	0x0001133d
    4904:	00011251 	.word	0x00011251
    4908:	0000344d 	.word	0x0000344d

0000490c <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    490c:	b590      	push	{r4, r7, lr}
    490e:	b085      	sub	sp, #20
    4910:	af00      	add	r7, sp, #0
    4912:	6078      	str	r0, [r7, #4]
    4914:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    4916:	230f      	movs	r3, #15
    4918:	18fb      	adds	r3, r7, r3
    491a:	2200      	movs	r2, #0
    491c:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    491e:	230f      	movs	r3, #15
    4920:	18fc      	adds	r4, r7, r3
    4922:	4b14      	ldr	r3, [pc, #80]	; (4974 <m2m_wifi_get_otp_mac_address+0x68>)
    4924:	4798      	blx	r3
    4926:	0003      	movs	r3, r0
    4928:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    492a:	230f      	movs	r3, #15
    492c:	18fb      	adds	r3, r7, r3
    492e:	781b      	ldrb	r3, [r3, #0]
    4930:	b25b      	sxtb	r3, r3
    4932:	2b00      	cmp	r3, #0
    4934:	d115      	bne.n	4962 <m2m_wifi_get_otp_mac_address+0x56>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    4936:	230f      	movs	r3, #15
    4938:	18fc      	adds	r4, r7, r3
    493a:	683a      	ldr	r2, [r7, #0]
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	0011      	movs	r1, r2
    4940:	0018      	movs	r0, r3
    4942:	4b0d      	ldr	r3, [pc, #52]	; (4978 <m2m_wifi_get_otp_mac_address+0x6c>)
    4944:	4798      	blx	r3
    4946:	0003      	movs	r3, r0
    4948:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    494a:	230f      	movs	r3, #15
    494c:	18fb      	adds	r3, r7, r3
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	b25b      	sxtb	r3, r3
    4952:	2b00      	cmp	r3, #0
    4954:	d105      	bne.n	4962 <m2m_wifi_get_otp_mac_address+0x56>
		{
			ret = hif_chip_sleep();
    4956:	230f      	movs	r3, #15
    4958:	18fc      	adds	r4, r7, r3
    495a:	4b08      	ldr	r3, [pc, #32]	; (497c <m2m_wifi_get_otp_mac_address+0x70>)
    495c:	4798      	blx	r3
    495e:	0003      	movs	r3, r0
    4960:	7023      	strb	r3, [r4, #0]
		}
	}
	return ret;
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	b25b      	sxtb	r3, r3
}
    496a:	0018      	movs	r0, r3
    496c:	46bd      	mov	sp, r7
    496e:	b005      	add	sp, #20
    4970:	bd90      	pop	{r4, r7, pc}
    4972:	46c0      	nop			; (mov r8, r8)
    4974:	00003281 	.word	0x00003281
    4978:	0000513d 	.word	0x0000513d
    497c:	00003319 	.word	0x00003319

00004980 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    4980:	b590      	push	{r4, r7, lr}
    4982:	b085      	sub	sp, #20
    4984:	af00      	add	r7, sp, #0
    4986:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4988:	230f      	movs	r3, #15
    498a:	18fb      	adds	r3, r7, r3
    498c:	2200      	movs	r2, #0
    498e:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    4990:	230f      	movs	r3, #15
    4992:	18fc      	adds	r4, r7, r3
    4994:	4b12      	ldr	r3, [pc, #72]	; (49e0 <m2m_wifi_get_mac_address+0x60>)
    4996:	4798      	blx	r3
    4998:	0003      	movs	r3, r0
    499a:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    499c:	230f      	movs	r3, #15
    499e:	18fb      	adds	r3, r7, r3
    49a0:	781b      	ldrb	r3, [r3, #0]
    49a2:	b25b      	sxtb	r3, r3
    49a4:	2b00      	cmp	r3, #0
    49a6:	d113      	bne.n	49d0 <m2m_wifi_get_mac_address+0x50>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    49a8:	230f      	movs	r3, #15
    49aa:	18fc      	adds	r4, r7, r3
    49ac:	687b      	ldr	r3, [r7, #4]
    49ae:	0018      	movs	r0, r3
    49b0:	4b0c      	ldr	r3, [pc, #48]	; (49e4 <m2m_wifi_get_mac_address+0x64>)
    49b2:	4798      	blx	r3
    49b4:	0003      	movs	r3, r0
    49b6:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    49b8:	230f      	movs	r3, #15
    49ba:	18fb      	adds	r3, r7, r3
    49bc:	781b      	ldrb	r3, [r3, #0]
    49be:	b25b      	sxtb	r3, r3
    49c0:	2b00      	cmp	r3, #0
    49c2:	d105      	bne.n	49d0 <m2m_wifi_get_mac_address+0x50>
		{
			ret = hif_chip_sleep();
    49c4:	230f      	movs	r3, #15
    49c6:	18fc      	adds	r4, r7, r3
    49c8:	4b07      	ldr	r3, [pc, #28]	; (49e8 <m2m_wifi_get_mac_address+0x68>)
    49ca:	4798      	blx	r3
    49cc:	0003      	movs	r3, r0
    49ce:	7023      	strb	r3, [r4, #0]
		}
	}

	return ret;
    49d0:	230f      	movs	r3, #15
    49d2:	18fb      	adds	r3, r7, r3
    49d4:	781b      	ldrb	r3, [r3, #0]
    49d6:	b25b      	sxtb	r3, r3
}
    49d8:	0018      	movs	r0, r3
    49da:	46bd      	mov	sp, r7
    49dc:	b005      	add	sp, #20
    49de:	bd90      	pop	{r4, r7, pc}
    49e0:	00003281 	.word	0x00003281
    49e4:	00005241 	.word	0x00005241
    49e8:	00003319 	.word	0x00003319

000049ec <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    49ec:	b590      	push	{r4, r7, lr}
    49ee:	b087      	sub	sp, #28
    49f0:	af00      	add	r7, sp, #0
    49f2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    49f4:	2317      	movs	r3, #23
    49f6:	18fb      	adds	r3, r7, r3
    49f8:	2200      	movs	r2, #0
    49fa:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    4a00:	693a      	ldr	r2, [r7, #16]
    4a02:	23a5      	movs	r3, #165	; 0xa5
    4a04:	015b      	lsls	r3, r3, #5
    4a06:	0011      	movs	r1, r2
    4a08:	0018      	movs	r0, r3
    4a0a:	4b13      	ldr	r3, [pc, #76]	; (4a58 <chip_apply_conf+0x6c>)
    4a0c:	4798      	blx	r3
		if(val32 != 0) {		
    4a0e:	693b      	ldr	r3, [r7, #16]
    4a10:	2b00      	cmp	r3, #0
    4a12:	d018      	beq.n	4a46 <chip_apply_conf+0x5a>
			uint32 reg = 0;
    4a14:	2300      	movs	r3, #0
    4a16:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    4a18:	2317      	movs	r3, #23
    4a1a:	18fc      	adds	r4, r7, r3
    4a1c:	230c      	movs	r3, #12
    4a1e:	18fa      	adds	r2, r7, r3
    4a20:	23a5      	movs	r3, #165	; 0xa5
    4a22:	015b      	lsls	r3, r3, #5
    4a24:	0011      	movs	r1, r2
    4a26:	0018      	movs	r0, r3
    4a28:	4b0c      	ldr	r3, [pc, #48]	; (4a5c <chip_apply_conf+0x70>)
    4a2a:	4798      	blx	r3
    4a2c:	0003      	movs	r3, r0
    4a2e:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    4a30:	2317      	movs	r3, #23
    4a32:	18fb      	adds	r3, r7, r3
    4a34:	781b      	ldrb	r3, [r3, #0]
    4a36:	b25b      	sxtb	r3, r3
    4a38:	2b00      	cmp	r3, #0
    4a3a:	d1e1      	bne.n	4a00 <chip_apply_conf+0x14>
				if(reg == val32)
    4a3c:	68fa      	ldr	r2, [r7, #12]
    4a3e:	693b      	ldr	r3, [r7, #16]
    4a40:	429a      	cmp	r2, r3
    4a42:	d002      	beq.n	4a4a <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    4a44:	e7dc      	b.n	4a00 <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    4a46:	46c0      	nop			; (mov r8, r8)
    4a48:	e000      	b.n	4a4c <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    4a4a:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    4a4c:	2300      	movs	r3, #0
}
    4a4e:	0018      	movs	r0, r3
    4a50:	46bd      	mov	sp, r7
    4a52:	b007      	add	sp, #28
    4a54:	bd90      	pop	{r4, r7, pc}
    4a56:	46c0      	nop			; (mov r8, r8)
    4a58:	000053b1 	.word	0x000053b1
    4a5c:	0000538d 	.word	0x0000538d

00004a60 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    4a60:	b590      	push	{r4, r7, lr}
    4a62:	b085      	sub	sp, #20
    4a64:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    4a66:	230f      	movs	r3, #15
    4a68:	18fb      	adds	r3, r7, r3
    4a6a:	2200      	movs	r2, #0
    4a6c:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    4a6e:	2300      	movs	r3, #0
    4a70:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    4a72:	2001      	movs	r0, #1
    4a74:	4b64      	ldr	r3, [pc, #400]	; (4c08 <nm_clkless_wake+0x1a8>)
    4a76:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    4a78:	230f      	movs	r3, #15
    4a7a:	18fc      	adds	r4, r7, r3
    4a7c:	1d3b      	adds	r3, r7, #4
    4a7e:	0019      	movs	r1, r3
    4a80:	2001      	movs	r0, #1
    4a82:	4b62      	ldr	r3, [pc, #392]	; (4c0c <nm_clkless_wake+0x1ac>)
    4a84:	4798      	blx	r3
    4a86:	0003      	movs	r3, r0
    4a88:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    4a8a:	230f      	movs	r3, #15
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	781b      	ldrb	r3, [r3, #0]
    4a90:	b25b      	sxtb	r3, r3
    4a92:	2b00      	cmp	r3, #0
    4a94:	d00d      	beq.n	4ab2 <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    4a96:	495e      	ldr	r1, [pc, #376]	; (4c10 <nm_clkless_wake+0x1b0>)
    4a98:	4b5e      	ldr	r3, [pc, #376]	; (4c14 <nm_clkless_wake+0x1b4>)
    4a9a:	2272      	movs	r2, #114	; 0x72
    4a9c:	0018      	movs	r0, r3
    4a9e:	4b5e      	ldr	r3, [pc, #376]	; (4c18 <nm_clkless_wake+0x1b8>)
    4aa0:	4798      	blx	r3
    4aa2:	4b5e      	ldr	r3, [pc, #376]	; (4c1c <nm_clkless_wake+0x1bc>)
    4aa4:	0018      	movs	r0, r3
    4aa6:	4b5e      	ldr	r3, [pc, #376]	; (4c20 <nm_clkless_wake+0x1c0>)
    4aa8:	4798      	blx	r3
    4aaa:	200d      	movs	r0, #13
    4aac:	4b5d      	ldr	r3, [pc, #372]	; (4c24 <nm_clkless_wake+0x1c4>)
    4aae:	4798      	blx	r3
		goto _WAKE_EXIT;
    4ab0:	e0a1      	b.n	4bf6 <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	2202      	movs	r2, #2
    4ab6:	4313      	orrs	r3, r2
    4ab8:	0019      	movs	r1, r3
    4aba:	2001      	movs	r0, #1
    4abc:	4b5a      	ldr	r3, [pc, #360]	; (4c28 <nm_clkless_wake+0x1c8>)
    4abe:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    4ac0:	2001      	movs	r0, #1
    4ac2:	4b51      	ldr	r3, [pc, #324]	; (4c08 <nm_clkless_wake+0x1a8>)
    4ac4:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4ac6:	4b59      	ldr	r3, [pc, #356]	; (4c2c <nm_clkless_wake+0x1cc>)
    4ac8:	681b      	ldr	r3, [r3, #0]
    4aca:	220f      	movs	r2, #15
    4acc:	18bc      	adds	r4, r7, r2
    4ace:	003a      	movs	r2, r7
    4ad0:	0011      	movs	r1, r2
    4ad2:	0018      	movs	r0, r3
    4ad4:	4b4d      	ldr	r3, [pc, #308]	; (4c0c <nm_clkless_wake+0x1ac>)
    4ad6:	4798      	blx	r3
    4ad8:	0003      	movs	r3, r0
    4ada:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    4adc:	230f      	movs	r3, #15
    4ade:	18fb      	adds	r3, r7, r3
    4ae0:	781b      	ldrb	r3, [r3, #0]
    4ae2:	b25b      	sxtb	r3, r3
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d108      	bne.n	4afa <nm_clkless_wake+0x9a>
    4ae8:	230f      	movs	r3, #15
    4aea:	18fb      	adds	r3, r7, r3
    4aec:	781b      	ldrb	r3, [r3, #0]
    4aee:	b25b      	sxtb	r3, r3
    4af0:	2b00      	cmp	r3, #0
    4af2:	d162      	bne.n	4bba <nm_clkless_wake+0x15a>
    4af4:	683b      	ldr	r3, [r7, #0]
    4af6:	2b00      	cmp	r3, #0
    4af8:	d15f      	bne.n	4bba <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    4afa:	4b4c      	ldr	r3, [pc, #304]	; (4c2c <nm_clkless_wake+0x1cc>)
    4afc:	220e      	movs	r2, #14
    4afe:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    4b00:	2001      	movs	r0, #1
    4b02:	4b41      	ldr	r3, [pc, #260]	; (4c08 <nm_clkless_wake+0x1a8>)
    4b04:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4b06:	4b49      	ldr	r3, [pc, #292]	; (4c2c <nm_clkless_wake+0x1cc>)
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	220f      	movs	r2, #15
    4b0c:	18bc      	adds	r4, r7, r2
    4b0e:	003a      	movs	r2, r7
    4b10:	0011      	movs	r1, r2
    4b12:	0018      	movs	r0, r3
    4b14:	4b3d      	ldr	r3, [pc, #244]	; (4c0c <nm_clkless_wake+0x1ac>)
    4b16:	4798      	blx	r3
    4b18:	0003      	movs	r3, r0
    4b1a:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    4b1c:	230f      	movs	r3, #15
    4b1e:	18fb      	adds	r3, r7, r3
    4b20:	781b      	ldrb	r3, [r3, #0]
    4b22:	b25b      	sxtb	r3, r3
    4b24:	2b00      	cmp	r3, #0
    4b26:	d108      	bne.n	4b3a <nm_clkless_wake+0xda>
    4b28:	230f      	movs	r3, #15
    4b2a:	18fb      	adds	r3, r7, r3
    4b2c:	781b      	ldrb	r3, [r3, #0]
    4b2e:	b25b      	sxtb	r3, r3
    4b30:	2b00      	cmp	r3, #0
    4b32:	d142      	bne.n	4bba <nm_clkless_wake+0x15a>
    4b34:	683b      	ldr	r3, [r7, #0]
    4b36:	2b00      	cmp	r3, #0
    4b38:	d13f      	bne.n	4bba <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    4b3a:	4b3c      	ldr	r3, [pc, #240]	; (4c2c <nm_clkless_wake+0x1cc>)
    4b3c:	2213      	movs	r2, #19
    4b3e:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    4b40:	2001      	movs	r0, #1
    4b42:	4b31      	ldr	r3, [pc, #196]	; (4c08 <nm_clkless_wake+0x1a8>)
    4b44:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4b46:	4b39      	ldr	r3, [pc, #228]	; (4c2c <nm_clkless_wake+0x1cc>)
    4b48:	681b      	ldr	r3, [r3, #0]
    4b4a:	220f      	movs	r2, #15
    4b4c:	18bc      	adds	r4, r7, r2
    4b4e:	003a      	movs	r2, r7
    4b50:	0011      	movs	r1, r2
    4b52:	0018      	movs	r0, r3
    4b54:	4b2d      	ldr	r3, [pc, #180]	; (4c0c <nm_clkless_wake+0x1ac>)
    4b56:	4798      	blx	r3
    4b58:	0003      	movs	r3, r0
    4b5a:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    4b5c:	230f      	movs	r3, #15
    4b5e:	18fb      	adds	r3, r7, r3
    4b60:	781b      	ldrb	r3, [r3, #0]
    4b62:	b25b      	sxtb	r3, r3
    4b64:	2b00      	cmp	r3, #0
    4b66:	d028      	beq.n	4bba <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    4b68:	4929      	ldr	r1, [pc, #164]	; (4c10 <nm_clkless_wake+0x1b0>)
    4b6a:	4b2a      	ldr	r3, [pc, #168]	; (4c14 <nm_clkless_wake+0x1b4>)
    4b6c:	2296      	movs	r2, #150	; 0x96
    4b6e:	0018      	movs	r0, r3
    4b70:	4b29      	ldr	r3, [pc, #164]	; (4c18 <nm_clkless_wake+0x1b8>)
    4b72:	4798      	blx	r3
    4b74:	4b2e      	ldr	r3, [pc, #184]	; (4c30 <nm_clkless_wake+0x1d0>)
    4b76:	0018      	movs	r0, r3
    4b78:	4b29      	ldr	r3, [pc, #164]	; (4c20 <nm_clkless_wake+0x1c0>)
    4b7a:	4798      	blx	r3
    4b7c:	200d      	movs	r0, #13
    4b7e:	4b29      	ldr	r3, [pc, #164]	; (4c24 <nm_clkless_wake+0x1c4>)
    4b80:	4798      	blx	r3
					goto _WAKE_EXIT;
    4b82:	e038      	b.n	4bf6 <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    4b84:	2002      	movs	r0, #2
    4b86:	4b20      	ldr	r3, [pc, #128]	; (4c08 <nm_clkless_wake+0x1a8>)
    4b88:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4b8a:	4b28      	ldr	r3, [pc, #160]	; (4c2c <nm_clkless_wake+0x1cc>)
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	003a      	movs	r2, r7
    4b90:	0011      	movs	r1, r2
    4b92:	0018      	movs	r0, r3
    4b94:	4b1d      	ldr	r3, [pc, #116]	; (4c0c <nm_clkless_wake+0x1ac>)
    4b96:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    4b98:	683b      	ldr	r3, [r7, #0]
    4b9a:	2204      	movs	r2, #4
    4b9c:	4013      	ands	r3, r2
    4b9e:	d10c      	bne.n	4bba <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    4ba0:	491b      	ldr	r1, [pc, #108]	; (4c10 <nm_clkless_wake+0x1b0>)
    4ba2:	4b1c      	ldr	r3, [pc, #112]	; (4c14 <nm_clkless_wake+0x1b4>)
    4ba4:	22aa      	movs	r2, #170	; 0xaa
    4ba6:	0018      	movs	r0, r3
    4ba8:	4b1b      	ldr	r3, [pc, #108]	; (4c18 <nm_clkless_wake+0x1b8>)
    4baa:	4798      	blx	r3
    4bac:	4b21      	ldr	r3, [pc, #132]	; (4c34 <nm_clkless_wake+0x1d4>)
    4bae:	0018      	movs	r0, r3
    4bb0:	4b1b      	ldr	r3, [pc, #108]	; (4c20 <nm_clkless_wake+0x1c0>)
    4bb2:	4798      	blx	r3
    4bb4:	200d      	movs	r0, #13
    4bb6:	4b1b      	ldr	r3, [pc, #108]	; (4c24 <nm_clkless_wake+0x1c4>)
    4bb8:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    4bba:	683b      	ldr	r3, [r7, #0]
    4bbc:	2204      	movs	r2, #4
    4bbe:	4013      	ands	r3, r2
    4bc0:	d109      	bne.n	4bd6 <nm_clkless_wake+0x176>
    4bc2:	68bb      	ldr	r3, [r7, #8]
    4bc4:	3301      	adds	r3, #1
    4bc6:	60bb      	str	r3, [r7, #8]
    4bc8:	68ba      	ldr	r2, [r7, #8]
    4bca:	4b1b      	ldr	r3, [pc, #108]	; (4c38 <nm_clkless_wake+0x1d8>)
    4bcc:	2103      	movs	r1, #3
    4bce:	0010      	movs	r0, r2
    4bd0:	4798      	blx	r3
    4bd2:	1e0b      	subs	r3, r1, #0
    4bd4:	d0d6      	beq.n	4b84 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    4bd6:	683b      	ldr	r3, [r7, #0]
    4bd8:	2204      	movs	r2, #4
    4bda:	4013      	ands	r3, r2
    4bdc:	d106      	bne.n	4bec <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    4bde:	687b      	ldr	r3, [r7, #4]
    4be0:	2202      	movs	r2, #2
    4be2:	4313      	orrs	r3, r2
    4be4:	0019      	movs	r1, r3
    4be6:	2001      	movs	r0, #1
    4be8:	4b0f      	ldr	r3, [pc, #60]	; (4c28 <nm_clkless_wake+0x1c8>)
    4bea:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    4bec:	683b      	ldr	r3, [r7, #0]
    4bee:	2204      	movs	r2, #4
    4bf0:	4013      	ands	r3, r2
    4bf2:	d100      	bne.n	4bf6 <nm_clkless_wake+0x196>
    4bf4:	e75d      	b.n	4ab2 <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    4bf6:	230f      	movs	r3, #15
    4bf8:	18fb      	adds	r3, r7, r3
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	b25b      	sxtb	r3, r3
}
    4bfe:	0018      	movs	r0, r3
    4c00:	46bd      	mov	sp, r7
    4c02:	b005      	add	sp, #20
    4c04:	bd90      	pop	{r4, r7, pc}
    4c06:	46c0      	nop			; (mov r8, r8)
    4c08:	0000278d 	.word	0x0000278d
    4c0c:	0000538d 	.word	0x0000538d
    4c10:	00012dec 	.word	0x00012dec
    4c14:	00012cc4 	.word	0x00012cc4
    4c18:	0001121d 	.word	0x0001121d
    4c1c:	00012cd8 	.word	0x00012cd8
    4c20:	0001133d 	.word	0x0001133d
    4c24:	00011251 	.word	0x00011251
    4c28:	000053b1 	.word	0x000053b1
    4c2c:	20000018 	.word	0x20000018
    4c30:	00012cf8 	.word	0x00012cf8
    4c34:	00012d18 	.word	0x00012d18
    4c38:	000101f1 	.word	0x000101f1

00004c3c <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    4c3c:	b590      	push	{r4, r7, lr}
    4c3e:	b083      	sub	sp, #12
    4c40:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    4c42:	1dfc      	adds	r4, r7, #7
    4c44:	003b      	movs	r3, r7
    4c46:	4a29      	ldr	r2, [pc, #164]	; (4cec <enable_interrupts+0xb0>)
    4c48:	0019      	movs	r1, r3
    4c4a:	0010      	movs	r0, r2
    4c4c:	4b28      	ldr	r3, [pc, #160]	; (4cf0 <enable_interrupts+0xb4>)
    4c4e:	4798      	blx	r3
    4c50:	0003      	movs	r3, r0
    4c52:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4c54:	1dfb      	adds	r3, r7, #7
    4c56:	781b      	ldrb	r3, [r3, #0]
    4c58:	b25b      	sxtb	r3, r3
    4c5a:	2b00      	cmp	r3, #0
    4c5c:	d002      	beq.n	4c64 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    4c5e:	2306      	movs	r3, #6
    4c60:	425b      	negs	r3, r3
    4c62:	e03f      	b.n	4ce4 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    4c64:	683b      	ldr	r3, [r7, #0]
    4c66:	2280      	movs	r2, #128	; 0x80
    4c68:	0052      	lsls	r2, r2, #1
    4c6a:	4313      	orrs	r3, r2
    4c6c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    4c6e:	683b      	ldr	r3, [r7, #0]
    4c70:	1dfc      	adds	r4, r7, #7
    4c72:	4a1e      	ldr	r2, [pc, #120]	; (4cec <enable_interrupts+0xb0>)
    4c74:	0019      	movs	r1, r3
    4c76:	0010      	movs	r0, r2
    4c78:	4b1e      	ldr	r3, [pc, #120]	; (4cf4 <enable_interrupts+0xb8>)
    4c7a:	4798      	blx	r3
    4c7c:	0003      	movs	r3, r0
    4c7e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4c80:	1dfb      	adds	r3, r7, #7
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	b25b      	sxtb	r3, r3
    4c86:	2b00      	cmp	r3, #0
    4c88:	d002      	beq.n	4c90 <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    4c8a:	2306      	movs	r3, #6
    4c8c:	425b      	negs	r3, r3
    4c8e:	e029      	b.n	4ce4 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    4c90:	1dfc      	adds	r4, r7, #7
    4c92:	003a      	movs	r2, r7
    4c94:	23d0      	movs	r3, #208	; 0xd0
    4c96:	015b      	lsls	r3, r3, #5
    4c98:	0011      	movs	r1, r2
    4c9a:	0018      	movs	r0, r3
    4c9c:	4b14      	ldr	r3, [pc, #80]	; (4cf0 <enable_interrupts+0xb4>)
    4c9e:	4798      	blx	r3
    4ca0:	0003      	movs	r3, r0
    4ca2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4ca4:	1dfb      	adds	r3, r7, #7
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	b25b      	sxtb	r3, r3
    4caa:	2b00      	cmp	r3, #0
    4cac:	d002      	beq.n	4cb4 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    4cae:	2306      	movs	r3, #6
    4cb0:	425b      	negs	r3, r3
    4cb2:	e017      	b.n	4ce4 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    4cb4:	683b      	ldr	r3, [r7, #0]
    4cb6:	2280      	movs	r2, #128	; 0x80
    4cb8:	0252      	lsls	r2, r2, #9
    4cba:	4313      	orrs	r3, r2
    4cbc:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    4cbe:	683a      	ldr	r2, [r7, #0]
    4cc0:	1dfc      	adds	r4, r7, #7
    4cc2:	23d0      	movs	r3, #208	; 0xd0
    4cc4:	015b      	lsls	r3, r3, #5
    4cc6:	0011      	movs	r1, r2
    4cc8:	0018      	movs	r0, r3
    4cca:	4b0a      	ldr	r3, [pc, #40]	; (4cf4 <enable_interrupts+0xb8>)
    4ccc:	4798      	blx	r3
    4cce:	0003      	movs	r3, r0
    4cd0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4cd2:	1dfb      	adds	r3, r7, #7
    4cd4:	781b      	ldrb	r3, [r3, #0]
    4cd6:	b25b      	sxtb	r3, r3
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d002      	beq.n	4ce2 <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    4cdc:	2306      	movs	r3, #6
    4cde:	425b      	negs	r3, r3
    4ce0:	e000      	b.n	4ce4 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    4ce2:	2300      	movs	r3, #0
}
    4ce4:	0018      	movs	r0, r3
    4ce6:	46bd      	mov	sp, r7
    4ce8:	b003      	add	sp, #12
    4cea:	bd90      	pop	{r4, r7, pc}
    4cec:	00001408 	.word	0x00001408
    4cf0:	0000538d 	.word	0x0000538d
    4cf4:	000053b1 	.word	0x000053b1

00004cf8 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    4cf8:	b580      	push	{r7, lr}
    4cfa:	b082      	sub	sp, #8
    4cfc:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    4cfe:	4b32      	ldr	r3, [pc, #200]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d00:	681b      	ldr	r3, [r3, #0]
    4d02:	2b00      	cmp	r3, #0
    4d04:	d159      	bne.n	4dba <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    4d06:	4a30      	ldr	r2, [pc, #192]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d08:	2380      	movs	r3, #128	; 0x80
    4d0a:	015b      	lsls	r3, r3, #5
    4d0c:	0011      	movs	r1, r2
    4d0e:	0018      	movs	r0, r3
    4d10:	4b2e      	ldr	r3, [pc, #184]	; (4dcc <nmi_get_chipid+0xd4>)
    4d12:	4798      	blx	r3
    4d14:	1e03      	subs	r3, r0, #0
    4d16:	d004      	beq.n	4d22 <nmi_get_chipid+0x2a>
			chipid = 0;
    4d18:	4b2b      	ldr	r3, [pc, #172]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d1a:	2200      	movs	r2, #0
    4d1c:	601a      	str	r2, [r3, #0]
			return 0;
    4d1e:	2300      	movs	r3, #0
    4d20:	e04d      	b.n	4dbe <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    4d22:	1d3b      	adds	r3, r7, #4
    4d24:	4a2a      	ldr	r2, [pc, #168]	; (4dd0 <nmi_get_chipid+0xd8>)
    4d26:	0019      	movs	r1, r3
    4d28:	0010      	movs	r0, r2
    4d2a:	4b28      	ldr	r3, [pc, #160]	; (4dcc <nmi_get_chipid+0xd4>)
    4d2c:	4798      	blx	r3
    4d2e:	1e03      	subs	r3, r0, #0
    4d30:	d004      	beq.n	4d3c <nmi_get_chipid+0x44>
			chipid = 0;
    4d32:	4b25      	ldr	r3, [pc, #148]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d34:	2200      	movs	r2, #0
    4d36:	601a      	str	r2, [r3, #0]
			return 0;
    4d38:	2300      	movs	r3, #0
    4d3a:	e040      	b.n	4dbe <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    4d3c:	4b22      	ldr	r3, [pc, #136]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	4a24      	ldr	r2, [pc, #144]	; (4dd4 <nmi_get_chipid+0xdc>)
    4d42:	4293      	cmp	r3, r2
    4d44:	d106      	bne.n	4d54 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    4d46:	687b      	ldr	r3, [r7, #4]
    4d48:	2b01      	cmp	r3, #1
    4d4a:	d029      	beq.n	4da0 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    4d4c:	4b1e      	ldr	r3, [pc, #120]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d4e:	4a22      	ldr	r2, [pc, #136]	; (4dd8 <nmi_get_chipid+0xe0>)
    4d50:	601a      	str	r2, [r3, #0]
    4d52:	e025      	b.n	4da0 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    4d54:	4b1c      	ldr	r3, [pc, #112]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	4a20      	ldr	r2, [pc, #128]	; (4ddc <nmi_get_chipid+0xe4>)
    4d5a:	4293      	cmp	r3, r2
    4d5c:	d10d      	bne.n	4d7a <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	2b03      	cmp	r3, #3
    4d62:	d01d      	beq.n	4da0 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    4d64:	687b      	ldr	r3, [r7, #4]
    4d66:	2b04      	cmp	r3, #4
    4d68:	d103      	bne.n	4d72 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    4d6a:	4b17      	ldr	r3, [pc, #92]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d6c:	4a1c      	ldr	r2, [pc, #112]	; (4de0 <nmi_get_chipid+0xe8>)
    4d6e:	601a      	str	r2, [r3, #0]
    4d70:	e016      	b.n	4da0 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    4d72:	4b15      	ldr	r3, [pc, #84]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d74:	4a1b      	ldr	r2, [pc, #108]	; (4de4 <nmi_get_chipid+0xec>)
    4d76:	601a      	str	r2, [r3, #0]
    4d78:	e012      	b.n	4da0 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    4d7a:	4b13      	ldr	r3, [pc, #76]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	4a1a      	ldr	r2, [pc, #104]	; (4de8 <nmi_get_chipid+0xf0>)
    4d80:	4293      	cmp	r3, r2
    4d82:	d10d      	bne.n	4da0 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    4d84:	4a10      	ldr	r2, [pc, #64]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d86:	23ec      	movs	r3, #236	; 0xec
    4d88:	039b      	lsls	r3, r3, #14
    4d8a:	0011      	movs	r1, r2
    4d8c:	0018      	movs	r0, r3
    4d8e:	4b0f      	ldr	r3, [pc, #60]	; (4dcc <nmi_get_chipid+0xd4>)
    4d90:	4798      	blx	r3
    4d92:	1e03      	subs	r3, r0, #0
    4d94:	d004      	beq.n	4da0 <nmi_get_chipid+0xa8>
			chipid = 0;
    4d96:	4b0c      	ldr	r3, [pc, #48]	; (4dc8 <nmi_get_chipid+0xd0>)
    4d98:	2200      	movs	r2, #0
    4d9a:	601a      	str	r2, [r3, #0]
			return 0;
    4d9c:	2300      	movs	r3, #0
    4d9e:	e00e      	b.n	4dbe <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    4da0:	4b09      	ldr	r3, [pc, #36]	; (4dc8 <nmi_get_chipid+0xd0>)
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	4a11      	ldr	r2, [pc, #68]	; (4dec <nmi_get_chipid+0xf4>)
    4da6:	401a      	ands	r2, r3
    4da8:	4b07      	ldr	r3, [pc, #28]	; (4dc8 <nmi_get_chipid+0xd0>)
    4daa:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    4dac:	4b06      	ldr	r3, [pc, #24]	; (4dc8 <nmi_get_chipid+0xd0>)
    4dae:	681b      	ldr	r3, [r3, #0]
    4db0:	22a0      	movs	r2, #160	; 0xa0
    4db2:	02d2      	lsls	r2, r2, #11
    4db4:	431a      	orrs	r2, r3
    4db6:	4b04      	ldr	r3, [pc, #16]	; (4dc8 <nmi_get_chipid+0xd0>)
    4db8:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    4dba:	4b03      	ldr	r3, [pc, #12]	; (4dc8 <nmi_get_chipid+0xd0>)
    4dbc:	681b      	ldr	r3, [r3, #0]
}
    4dbe:	0018      	movs	r0, r3
    4dc0:	46bd      	mov	sp, r7
    4dc2:	b002      	add	sp, #8
    4dc4:	bd80      	pop	{r7, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	200000ec 	.word	0x200000ec
    4dcc:	0000538d 	.word	0x0000538d
    4dd0:	000013f4 	.word	0x000013f4
    4dd4:	001002a0 	.word	0x001002a0
    4dd8:	001002a1 	.word	0x001002a1
    4ddc:	001002b0 	.word	0x001002b0
    4de0:	001002b1 	.word	0x001002b1
    4de4:	001002b2 	.word	0x001002b2
    4de8:	001000f0 	.word	0x001000f0
    4dec:	fff0ffff 	.word	0xfff0ffff

00004df0 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    4df0:	b580      	push	{r7, lr}
    4df2:	b086      	sub	sp, #24
    4df4:	af00      	add	r7, sp, #0
    4df6:	0002      	movs	r2, r0
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4dfc:	230b      	movs	r3, #11
    4dfe:	18fb      	adds	r3, r7, r3
    4e00:	2200      	movs	r2, #0
    4e02:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    4e04:	2300      	movs	r3, #0
    4e06:	617b      	str	r3, [r7, #20]
    4e08:	2300      	movs	r3, #0
    4e0a:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    4e0c:	2300      	movs	r3, #0
    4e0e:	60fb      	str	r3, [r7, #12]

	reg = 0;
    4e10:	2300      	movs	r3, #0
    4e12:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    4e14:	4b3b      	ldr	r3, [pc, #236]	; (4f04 <wait_for_bootrom+0x114>)
    4e16:	0018      	movs	r0, r3
    4e18:	4b3b      	ldr	r3, [pc, #236]	; (4f08 <wait_for_bootrom+0x118>)
    4e1a:	4798      	blx	r3
    4e1c:	0003      	movs	r3, r0
    4e1e:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    4e20:	697b      	ldr	r3, [r7, #20]
    4e22:	2b00      	cmp	r3, #0
    4e24:	db03      	blt.n	4e2e <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    4e26:	2001      	movs	r0, #1
    4e28:	4b38      	ldr	r3, [pc, #224]	; (4f0c <wait_for_bootrom+0x11c>)
    4e2a:	4798      	blx	r3
	}
    4e2c:	e7f2      	b.n	4e14 <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    4e2e:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    4e30:	4b37      	ldr	r3, [pc, #220]	; (4f10 <wait_for_bootrom+0x120>)
    4e32:	0018      	movs	r0, r3
    4e34:	4b34      	ldr	r3, [pc, #208]	; (4f08 <wait_for_bootrom+0x118>)
    4e36:	4798      	blx	r3
    4e38:	0003      	movs	r3, r0
    4e3a:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    4e3c:	697b      	ldr	r3, [r7, #20]
    4e3e:	2201      	movs	r2, #1
    4e40:	4013      	ands	r3, r2
    4e42:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    4e44:	697b      	ldr	r3, [r7, #20]
    4e46:	2b00      	cmp	r3, #0
    4e48:	d112      	bne.n	4e70 <wait_for_bootrom+0x80>
	{
		reg = 0;
    4e4a:	2300      	movs	r3, #0
    4e4c:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    4e4e:	e00b      	b.n	4e68 <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    4e50:	2001      	movs	r0, #1
    4e52:	4b2e      	ldr	r3, [pc, #184]	; (4f0c <wait_for_bootrom+0x11c>)
    4e54:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    4e56:	4b2f      	ldr	r3, [pc, #188]	; (4f14 <wait_for_bootrom+0x124>)
    4e58:	0018      	movs	r0, r3
    4e5a:	4b2b      	ldr	r3, [pc, #172]	; (4f08 <wait_for_bootrom+0x118>)
    4e5c:	4798      	blx	r3
    4e5e:	0003      	movs	r3, r0
    4e60:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    4e62:	693b      	ldr	r3, [r7, #16]
    4e64:	3301      	adds	r3, #1
    4e66:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    4e68:	697b      	ldr	r3, [r7, #20]
    4e6a:	4a2b      	ldr	r2, [pc, #172]	; (4f18 <wait_for_bootrom+0x128>)
    4e6c:	4293      	cmp	r3, r2
    4e6e:	d1ef      	bne.n	4e50 <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    4e70:	1dfb      	adds	r3, r7, #7
    4e72:	781b      	ldrb	r3, [r3, #0]
    4e74:	2b02      	cmp	r3, #2
    4e76:	d10d      	bne.n	4e94 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4e78:	4a28      	ldr	r2, [pc, #160]	; (4f1c <wait_for_bootrom+0x12c>)
    4e7a:	4b29      	ldr	r3, [pc, #164]	; (4f20 <wait_for_bootrom+0x130>)
    4e7c:	0011      	movs	r1, r2
    4e7e:	0018      	movs	r0, r3
    4e80:	4b28      	ldr	r3, [pc, #160]	; (4f24 <wait_for_bootrom+0x134>)
    4e82:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    4e84:	2380      	movs	r3, #128	; 0x80
    4e86:	035b      	lsls	r3, r3, #13
    4e88:	4a27      	ldr	r2, [pc, #156]	; (4f28 <wait_for_bootrom+0x138>)
    4e8a:	0019      	movs	r1, r3
    4e8c:	0010      	movs	r0, r2
    4e8e:	4b25      	ldr	r3, [pc, #148]	; (4f24 <wait_for_bootrom+0x134>)
    4e90:	4798      	blx	r3
    4e92:	e015      	b.n	4ec0 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    4e94:	1dfb      	adds	r3, r7, #7
    4e96:	781b      	ldrb	r3, [r3, #0]
    4e98:	2b03      	cmp	r3, #3
    4e9a:	d10b      	bne.n	4eb4 <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4e9c:	4a1f      	ldr	r2, [pc, #124]	; (4f1c <wait_for_bootrom+0x12c>)
    4e9e:	4b20      	ldr	r3, [pc, #128]	; (4f20 <wait_for_bootrom+0x130>)
    4ea0:	0011      	movs	r1, r2
    4ea2:	0018      	movs	r0, r3
    4ea4:	4b1f      	ldr	r3, [pc, #124]	; (4f24 <wait_for_bootrom+0x134>)
    4ea6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    4ea8:	4b1f      	ldr	r3, [pc, #124]	; (4f28 <wait_for_bootrom+0x138>)
    4eaa:	2100      	movs	r1, #0
    4eac:	0018      	movs	r0, r3
    4eae:	4b1d      	ldr	r3, [pc, #116]	; (4f24 <wait_for_bootrom+0x134>)
    4eb0:	4798      	blx	r3
    4eb2:	e005      	b.n	4ec0 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    4eb4:	1dfb      	adds	r3, r7, #7
    4eb6:	781b      	ldrb	r3, [r3, #0]
    4eb8:	2b04      	cmp	r3, #4
    4eba:	d101      	bne.n	4ec0 <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    4ebc:	2380      	movs	r3, #128	; 0x80
    4ebe:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    4ec0:	4b1a      	ldr	r3, [pc, #104]	; (4f2c <wait_for_bootrom+0x13c>)
    4ec2:	4798      	blx	r3
    4ec4:	0003      	movs	r3, r0
    4ec6:	051b      	lsls	r3, r3, #20
    4ec8:	0d1a      	lsrs	r2, r3, #20
    4eca:	23e8      	movs	r3, #232	; 0xe8
    4ecc:	009b      	lsls	r3, r3, #2
    4ece:	429a      	cmp	r2, r3
    4ed0:	d106      	bne.n	4ee0 <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    4ed2:	68fb      	ldr	r3, [r7, #12]
    4ed4:	2202      	movs	r2, #2
    4ed6:	4313      	orrs	r3, r2
    4ed8:	0018      	movs	r0, r3
    4eda:	4b15      	ldr	r3, [pc, #84]	; (4f30 <wait_for_bootrom+0x140>)
    4edc:	4798      	blx	r3
    4ede:	e003      	b.n	4ee8 <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    4ee0:	68fb      	ldr	r3, [r7, #12]
    4ee2:	0018      	movs	r0, r3
    4ee4:	4b12      	ldr	r3, [pc, #72]	; (4f30 <wait_for_bootrom+0x140>)
    4ee6:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    4ee8:	4a12      	ldr	r2, [pc, #72]	; (4f34 <wait_for_bootrom+0x144>)
    4eea:	4b0a      	ldr	r3, [pc, #40]	; (4f14 <wait_for_bootrom+0x124>)
    4eec:	0011      	movs	r1, r2
    4eee:	0018      	movs	r0, r3
    4ef0:	4b0c      	ldr	r3, [pc, #48]	; (4f24 <wait_for_bootrom+0x134>)
    4ef2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    4ef4:	230b      	movs	r3, #11
    4ef6:	18fb      	adds	r3, r7, r3
    4ef8:	781b      	ldrb	r3, [r3, #0]
    4efa:	b25b      	sxtb	r3, r3
}
    4efc:	0018      	movs	r0, r3
    4efe:	46bd      	mov	sp, r7
    4f00:	b006      	add	sp, #24
    4f02:	bd80      	pop	{r7, pc}
    4f04:	00001014 	.word	0x00001014
    4f08:	0000536d 	.word	0x0000536d
    4f0c:	0000278d 	.word	0x0000278d
    4f10:	000207bc 	.word	0x000207bc
    4f14:	000c000c 	.word	0x000c000c
    4f18:	10add09e 	.word	0x10add09e
    4f1c:	3c1cd57d 	.word	0x3c1cd57d
    4f20:	000207ac 	.word	0x000207ac
    4f24:	000053b1 	.word	0x000053b1
    4f28:	0000108c 	.word	0x0000108c
    4f2c:	00004cf9 	.word	0x00004cf9
    4f30:	000049ed 	.word	0x000049ed
    4f34:	ef522f61 	.word	0xef522f61

00004f38 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4f38:	b580      	push	{r7, lr}
    4f3a:	b088      	sub	sp, #32
    4f3c:	af00      	add	r7, sp, #0
    4f3e:	0002      	movs	r2, r0
    4f40:	1dfb      	adds	r3, r7, #7
    4f42:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4f44:	231f      	movs	r3, #31
    4f46:	18fb      	adds	r3, r7, r3
    4f48:	2200      	movs	r2, #0
    4f4a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    4f4c:	2300      	movs	r3, #0
    4f4e:	61bb      	str	r3, [r7, #24]
    4f50:	2300      	movs	r3, #0
    4f52:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    4f54:	2301      	movs	r3, #1
    4f56:	425b      	negs	r3, r3
    4f58:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    4f5a:	4b1d      	ldr	r3, [pc, #116]	; (4fd0 <wait_for_firmware_start+0x98>)
    4f5c:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    4f5e:	4b1d      	ldr	r3, [pc, #116]	; (4fd4 <wait_for_firmware_start+0x9c>)
    4f60:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    4f62:	1dfb      	adds	r3, r7, #7
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2b02      	cmp	r3, #2
    4f68:	d003      	beq.n	4f72 <wait_for_firmware_start+0x3a>
    4f6a:	1dfb      	adds	r3, r7, #7
    4f6c:	781b      	ldrb	r3, [r3, #0]
    4f6e:	2b03      	cmp	r3, #3
    4f70:	d119      	bne.n	4fa6 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    4f72:	4b19      	ldr	r3, [pc, #100]	; (4fd8 <wait_for_firmware_start+0xa0>)
    4f74:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4f76:	4b19      	ldr	r3, [pc, #100]	; (4fdc <wait_for_firmware_start+0xa4>)
    4f78:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4f7a:	e014      	b.n	4fa6 <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    4f7c:	2002      	movs	r0, #2
    4f7e:	4b18      	ldr	r3, [pc, #96]	; (4fe0 <wait_for_firmware_start+0xa8>)
    4f80:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    4f82:	68fb      	ldr	r3, [r7, #12]
    4f84:	0018      	movs	r0, r3
    4f86:	4b17      	ldr	r3, [pc, #92]	; (4fe4 <wait_for_firmware_start+0xac>)
    4f88:	4798      	blx	r3
    4f8a:	0003      	movs	r3, r0
    4f8c:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    4f8e:	697b      	ldr	r3, [r7, #20]
    4f90:	3301      	adds	r3, #1
    4f92:	617b      	str	r3, [r7, #20]
    4f94:	697a      	ldr	r2, [r7, #20]
    4f96:	693b      	ldr	r3, [r7, #16]
    4f98:	429a      	cmp	r2, r3
    4f9a:	d304      	bcc.n	4fa6 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4f9c:	231f      	movs	r3, #31
    4f9e:	18fb      	adds	r3, r7, r3
    4fa0:	22fb      	movs	r2, #251	; 0xfb
    4fa2:	701a      	strb	r2, [r3, #0]
			goto ERR;
    4fa4:	e00c      	b.n	4fc0 <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4fa6:	68ba      	ldr	r2, [r7, #8]
    4fa8:	69bb      	ldr	r3, [r7, #24]
    4faa:	429a      	cmp	r2, r3
    4fac:	d1e6      	bne.n	4f7c <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    4fae:	68bb      	ldr	r3, [r7, #8]
    4fb0:	4a08      	ldr	r2, [pc, #32]	; (4fd4 <wait_for_firmware_start+0x9c>)
    4fb2:	4293      	cmp	r3, r2
    4fb4:	d104      	bne.n	4fc0 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    4fb6:	4b06      	ldr	r3, [pc, #24]	; (4fd0 <wait_for_firmware_start+0x98>)
    4fb8:	2100      	movs	r1, #0
    4fba:	0018      	movs	r0, r3
    4fbc:	4b0a      	ldr	r3, [pc, #40]	; (4fe8 <wait_for_firmware_start+0xb0>)
    4fbe:	4798      	blx	r3
	}
ERR:
	return ret;
    4fc0:	231f      	movs	r3, #31
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	b25b      	sxtb	r3, r3
}
    4fc8:	0018      	movs	r0, r3
    4fca:	46bd      	mov	sp, r7
    4fcc:	b008      	add	sp, #32
    4fce:	bd80      	pop	{r7, pc}
    4fd0:	0000108c 	.word	0x0000108c
    4fd4:	02532636 	.word	0x02532636
    4fd8:	000207ac 	.word	0x000207ac
    4fdc:	d75dc1c3 	.word	0xd75dc1c3
    4fe0:	0000278d 	.word	0x0000278d
    4fe4:	0000536d 	.word	0x0000536d
    4fe8:	000053b1 	.word	0x000053b1

00004fec <chip_deinit>:

sint8 chip_deinit(void)
{
    4fec:	b590      	push	{r4, r7, lr}
    4fee:	b083      	sub	sp, #12
    4ff0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    4ff2:	2300      	movs	r3, #0
    4ff4:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    4ff6:	1dbb      	adds	r3, r7, #6
    4ff8:	220a      	movs	r2, #10
    4ffa:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4ffc:	1dfc      	adds	r4, r7, #7
    4ffe:	003a      	movs	r2, r7
    5000:	23a0      	movs	r3, #160	; 0xa0
    5002:	015b      	lsls	r3, r3, #5
    5004:	0011      	movs	r1, r2
    5006:	0018      	movs	r0, r3
    5008:	4b3f      	ldr	r3, [pc, #252]	; (5108 <chip_deinit+0x11c>)
    500a:	4798      	blx	r3
    500c:	0003      	movs	r3, r0
    500e:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5010:	1dfb      	adds	r3, r7, #7
    5012:	781b      	ldrb	r3, [r3, #0]
    5014:	b25b      	sxtb	r3, r3
    5016:	2b00      	cmp	r3, #0
    5018:	d00c      	beq.n	5034 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    501a:	4a3c      	ldr	r2, [pc, #240]	; (510c <chip_deinit+0x120>)
    501c:	493c      	ldr	r1, [pc, #240]	; (5110 <chip_deinit+0x124>)
    501e:	4b3d      	ldr	r3, [pc, #244]	; (5114 <chip_deinit+0x128>)
    5020:	0018      	movs	r0, r3
    5022:	4b3d      	ldr	r3, [pc, #244]	; (5118 <chip_deinit+0x12c>)
    5024:	4798      	blx	r3
    5026:	4b3d      	ldr	r3, [pc, #244]	; (511c <chip_deinit+0x130>)
    5028:	0018      	movs	r0, r3
    502a:	4b3d      	ldr	r3, [pc, #244]	; (5120 <chip_deinit+0x134>)
    502c:	4798      	blx	r3
    502e:	200d      	movs	r0, #13
    5030:	4b3c      	ldr	r3, [pc, #240]	; (5124 <chip_deinit+0x138>)
    5032:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	4a3c      	ldr	r2, [pc, #240]	; (5128 <chip_deinit+0x13c>)
    5038:	4013      	ands	r3, r2
    503a:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    503c:	683a      	ldr	r2, [r7, #0]
    503e:	1dfc      	adds	r4, r7, #7
    5040:	23a0      	movs	r3, #160	; 0xa0
    5042:	015b      	lsls	r3, r3, #5
    5044:	0011      	movs	r1, r2
    5046:	0018      	movs	r0, r3
    5048:	4b38      	ldr	r3, [pc, #224]	; (512c <chip_deinit+0x140>)
    504a:	4798      	blx	r3
    504c:	0003      	movs	r3, r0
    504e:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    5050:	1dfb      	adds	r3, r7, #7
    5052:	781b      	ldrb	r3, [r3, #0]
    5054:	b25b      	sxtb	r3, r3
    5056:	2b00      	cmp	r3, #0
    5058:	d010      	beq.n	507c <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    505a:	4a35      	ldr	r2, [pc, #212]	; (5130 <chip_deinit+0x144>)
    505c:	492c      	ldr	r1, [pc, #176]	; (5110 <chip_deinit+0x124>)
    505e:	4b2d      	ldr	r3, [pc, #180]	; (5114 <chip_deinit+0x128>)
    5060:	0018      	movs	r0, r3
    5062:	4b2d      	ldr	r3, [pc, #180]	; (5118 <chip_deinit+0x12c>)
    5064:	4798      	blx	r3
    5066:	4b33      	ldr	r3, [pc, #204]	; (5134 <chip_deinit+0x148>)
    5068:	0018      	movs	r0, r3
    506a:	4b2d      	ldr	r3, [pc, #180]	; (5120 <chip_deinit+0x134>)
    506c:	4798      	blx	r3
    506e:	200d      	movs	r0, #13
    5070:	4b2c      	ldr	r3, [pc, #176]	; (5124 <chip_deinit+0x138>)
    5072:	4798      	blx	r3
		return ret;
    5074:	1dfb      	adds	r3, r7, #7
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	b25b      	sxtb	r3, r3
    507a:	e041      	b.n	5100 <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    507c:	1dfc      	adds	r4, r7, #7
    507e:	003a      	movs	r2, r7
    5080:	23a0      	movs	r3, #160	; 0xa0
    5082:	015b      	lsls	r3, r3, #5
    5084:	0011      	movs	r1, r2
    5086:	0018      	movs	r0, r3
    5088:	4b1f      	ldr	r3, [pc, #124]	; (5108 <chip_deinit+0x11c>)
    508a:	4798      	blx	r3
    508c:	0003      	movs	r3, r0
    508e:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    5090:	1dfb      	adds	r3, r7, #7
    5092:	781b      	ldrb	r3, [r3, #0]
    5094:	b25b      	sxtb	r3, r3
    5096:	2b00      	cmp	r3, #0
    5098:	d011      	beq.n	50be <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    509a:	238f      	movs	r3, #143	; 0x8f
    509c:	009a      	lsls	r2, r3, #2
    509e:	491c      	ldr	r1, [pc, #112]	; (5110 <chip_deinit+0x124>)
    50a0:	4b1c      	ldr	r3, [pc, #112]	; (5114 <chip_deinit+0x128>)
    50a2:	0018      	movs	r0, r3
    50a4:	4b1c      	ldr	r3, [pc, #112]	; (5118 <chip_deinit+0x12c>)
    50a6:	4798      	blx	r3
    50a8:	4b23      	ldr	r3, [pc, #140]	; (5138 <chip_deinit+0x14c>)
    50aa:	0018      	movs	r0, r3
    50ac:	4b1c      	ldr	r3, [pc, #112]	; (5120 <chip_deinit+0x134>)
    50ae:	4798      	blx	r3
    50b0:	200d      	movs	r0, #13
    50b2:	4b1c      	ldr	r3, [pc, #112]	; (5124 <chip_deinit+0x138>)
    50b4:	4798      	blx	r3
			return ret;
    50b6:	1dfb      	adds	r3, r7, #7
    50b8:	781b      	ldrb	r3, [r3, #0]
    50ba:	b25b      	sxtb	r3, r3
    50bc:	e020      	b.n	5100 <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    50be:	683a      	ldr	r2, [r7, #0]
    50c0:	2380      	movs	r3, #128	; 0x80
    50c2:	00db      	lsls	r3, r3, #3
    50c4:	4013      	ands	r3, r2
    50c6:	d017      	beq.n	50f8 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    50c8:	683b      	ldr	r3, [r7, #0]
    50ca:	4a17      	ldr	r2, [pc, #92]	; (5128 <chip_deinit+0x13c>)
    50cc:	4013      	ands	r3, r2
    50ce:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    50d0:	683a      	ldr	r2, [r7, #0]
    50d2:	1dfc      	adds	r4, r7, #7
    50d4:	23a0      	movs	r3, #160	; 0xa0
    50d6:	015b      	lsls	r3, r3, #5
    50d8:	0011      	movs	r1, r2
    50da:	0018      	movs	r0, r3
    50dc:	4b13      	ldr	r3, [pc, #76]	; (512c <chip_deinit+0x140>)
    50de:	4798      	blx	r3
    50e0:	0003      	movs	r3, r0
    50e2:	7023      	strb	r3, [r4, #0]
			timeout--;
    50e4:	1dbb      	adds	r3, r7, #6
    50e6:	781a      	ldrb	r2, [r3, #0]
    50e8:	1dbb      	adds	r3, r7, #6
    50ea:	3a01      	subs	r2, #1
    50ec:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    50ee:	1dbb      	adds	r3, r7, #6
    50f0:	781b      	ldrb	r3, [r3, #0]
    50f2:	2b00      	cmp	r3, #0
    50f4:	d1c2      	bne.n	507c <chip_deinit+0x90>
    50f6:	e000      	b.n	50fa <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    50f8:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    50fa:	1dfb      	adds	r3, r7, #7
    50fc:	781b      	ldrb	r3, [r3, #0]
    50fe:	b25b      	sxtb	r3, r3
}
    5100:	0018      	movs	r0, r3
    5102:	46bd      	mov	sp, r7
    5104:	b003      	add	sp, #12
    5106:	bd90      	pop	{r4, r7, pc}
    5108:	0000538d 	.word	0x0000538d
    510c:	0000022f 	.word	0x0000022f
    5110:	00012dfc 	.word	0x00012dfc
    5114:	00012cc4 	.word	0x00012cc4
    5118:	0001121d 	.word	0x0001121d
    511c:	00012d64 	.word	0x00012d64
    5120:	0001133d 	.word	0x0001133d
    5124:	00011251 	.word	0x00011251
    5128:	fffffbff 	.word	0xfffffbff
    512c:	000053b1 	.word	0x000053b1
    5130:	00000235 	.word	0x00000235
    5134:	00012d7c 	.word	0x00012d7c
    5138:	00012d94 	.word	0x00012d94

0000513c <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    513c:	b590      	push	{r4, r7, lr}
    513e:	b089      	sub	sp, #36	; 0x24
    5140:	af00      	add	r7, sp, #0
    5142:	6078      	str	r0, [r7, #4]
    5144:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    5146:	2308      	movs	r3, #8
    5148:	18fb      	adds	r3, r7, r3
    514a:	0018      	movs	r0, r3
    514c:	2308      	movs	r3, #8
    514e:	001a      	movs	r2, r3
    5150:	2100      	movs	r1, #0
    5152:	4b35      	ldr	r3, [pc, #212]	; (5228 <nmi_get_otp_mac_address+0xec>)
    5154:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    5156:	231f      	movs	r3, #31
    5158:	18fc      	adds	r4, r7, r3
    515a:	2318      	movs	r3, #24
    515c:	18fb      	adds	r3, r7, r3
    515e:	4a33      	ldr	r2, [pc, #204]	; (522c <nmi_get_otp_mac_address+0xf0>)
    5160:	0019      	movs	r1, r3
    5162:	0010      	movs	r0, r2
    5164:	4b32      	ldr	r3, [pc, #200]	; (5230 <nmi_get_otp_mac_address+0xf4>)
    5166:	4798      	blx	r3
    5168:	0003      	movs	r3, r0
    516a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    516c:	231f      	movs	r3, #31
    516e:	18fb      	adds	r3, r7, r3
    5170:	781b      	ldrb	r3, [r3, #0]
    5172:	b25b      	sxtb	r3, r3
    5174:	2b00      	cmp	r3, #0
    5176:	d145      	bne.n	5204 <nmi_get_otp_mac_address+0xc8>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    5178:	69bb      	ldr	r3, [r7, #24]
    517a:	22c0      	movs	r2, #192	; 0xc0
    517c:	0292      	lsls	r2, r2, #10
    517e:	4313      	orrs	r3, r2
    5180:	221f      	movs	r2, #31
    5182:	18bc      	adds	r4, r7, r2
    5184:	2208      	movs	r2, #8
    5186:	18b9      	adds	r1, r7, r2
    5188:	2208      	movs	r2, #8
    518a:	0018      	movs	r0, r3
    518c:	4b29      	ldr	r3, [pc, #164]	; (5234 <nmi_get_otp_mac_address+0xf8>)
    518e:	4798      	blx	r3
    5190:	0003      	movs	r3, r0
    5192:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5194:	231f      	movs	r3, #31
    5196:	18fb      	adds	r3, r7, r3
    5198:	781b      	ldrb	r3, [r3, #0]
    519a:	b25b      	sxtb	r3, r3
    519c:	2b00      	cmp	r3, #0
    519e:	d133      	bne.n	5208 <nmi_get_otp_mac_address+0xcc>
	u32RegValue = strgp.u32Mac_efuse_mib;
    51a0:	2308      	movs	r3, #8
    51a2:	18fb      	adds	r3, r7, r3
    51a4:	681b      	ldr	r3, [r3, #0]
    51a6:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
    51a8:	69bb      	ldr	r3, [r7, #24]
    51aa:	0c1b      	lsrs	r3, r3, #16
    51ac:	041b      	lsls	r3, r3, #16
    51ae:	d106      	bne.n	51be <nmi_get_otp_mac_address+0x82>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    51b0:	687b      	ldr	r3, [r7, #4]
    51b2:	2206      	movs	r2, #6
    51b4:	2100      	movs	r1, #0
    51b6:	0018      	movs	r0, r3
    51b8:	4b1f      	ldr	r3, [pc, #124]	; (5238 <nmi_get_otp_mac_address+0xfc>)
    51ba:	4798      	blx	r3
		goto _EXIT_ERR;
    51bc:	e025      	b.n	520a <nmi_get_otp_mac_address+0xce>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    51be:	69bb      	ldr	r3, [r7, #24]
    51c0:	0c1b      	lsrs	r3, r3, #16
    51c2:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    51c4:	69bb      	ldr	r3, [r7, #24]
    51c6:	22c0      	movs	r2, #192	; 0xc0
    51c8:	0292      	lsls	r2, r2, #10
    51ca:	4313      	orrs	r3, r2
    51cc:	221f      	movs	r2, #31
    51ce:	18bc      	adds	r4, r7, r2
    51d0:	2210      	movs	r2, #16
    51d2:	18b9      	adds	r1, r7, r2
    51d4:	2206      	movs	r2, #6
    51d6:	0018      	movs	r0, r3
    51d8:	4b16      	ldr	r3, [pc, #88]	; (5234 <nmi_get_otp_mac_address+0xf8>)
    51da:	4798      	blx	r3
    51dc:	0003      	movs	r3, r0
    51de:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr,mac,6);
    51e0:	2310      	movs	r3, #16
    51e2:	18f9      	adds	r1, r7, r3
    51e4:	687b      	ldr	r3, [r7, #4]
    51e6:	2206      	movs	r2, #6
    51e8:	0018      	movs	r0, r3
    51ea:	4b14      	ldr	r3, [pc, #80]	; (523c <nmi_get_otp_mac_address+0x100>)
    51ec:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    51ee:	683b      	ldr	r3, [r7, #0]
    51f0:	2b00      	cmp	r3, #0
    51f2:	d002      	beq.n	51fa <nmi_get_otp_mac_address+0xbe>
    51f4:	683b      	ldr	r3, [r7, #0]
    51f6:	2201      	movs	r2, #1
    51f8:	701a      	strb	r2, [r3, #0]
	return ret;
    51fa:	231f      	movs	r3, #31
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	781b      	ldrb	r3, [r3, #0]
    5200:	b25b      	sxtb	r3, r3
    5202:	e00c      	b.n	521e <nmi_get_otp_mac_address+0xe2>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5204:	46c0      	nop			; (mov r8, r8)
    5206:	e000      	b.n	520a <nmi_get_otp_mac_address+0xce>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5208:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    520a:	683b      	ldr	r3, [r7, #0]
    520c:	2b00      	cmp	r3, #0
    520e:	d002      	beq.n	5216 <nmi_get_otp_mac_address+0xda>
    5210:	683b      	ldr	r3, [r7, #0]
    5212:	2200      	movs	r2, #0
    5214:	701a      	strb	r2, [r3, #0]
	return ret;
    5216:	231f      	movs	r3, #31
    5218:	18fb      	adds	r3, r7, r3
    521a:	781b      	ldrb	r3, [r3, #0]
    521c:	b25b      	sxtb	r3, r3
}
    521e:	0018      	movs	r0, r3
    5220:	46bd      	mov	sp, r7
    5222:	b009      	add	sp, #36	; 0x24
    5224:	bd90      	pop	{r4, r7, pc}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	00010c67 	.word	0x00010c67
    522c:	000c0008 	.word	0x000c0008
    5230:	0000538d 	.word	0x0000538d
    5234:	00005401 	.word	0x00005401
    5238:	00003071 	.word	0x00003071
    523c:	00003035 	.word	0x00003035

00005240 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    5240:	b590      	push	{r4, r7, lr}
    5242:	b089      	sub	sp, #36	; 0x24
    5244:	af00      	add	r7, sp, #0
    5246:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    5248:	2308      	movs	r3, #8
    524a:	18fb      	adds	r3, r7, r3
    524c:	0018      	movs	r0, r3
    524e:	2308      	movs	r3, #8
    5250:	001a      	movs	r2, r3
    5252:	2100      	movs	r1, #0
    5254:	4b29      	ldr	r3, [pc, #164]	; (52fc <nmi_get_mac_address+0xbc>)
    5256:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    5258:	231f      	movs	r3, #31
    525a:	18fc      	adds	r4, r7, r3
    525c:	2318      	movs	r3, #24
    525e:	18fb      	adds	r3, r7, r3
    5260:	4a27      	ldr	r2, [pc, #156]	; (5300 <nmi_get_mac_address+0xc0>)
    5262:	0019      	movs	r1, r3
    5264:	0010      	movs	r0, r2
    5266:	4b27      	ldr	r3, [pc, #156]	; (5304 <nmi_get_mac_address+0xc4>)
    5268:	4798      	blx	r3
    526a:	0003      	movs	r3, r0
    526c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    526e:	231f      	movs	r3, #31
    5270:	18fb      	adds	r3, r7, r3
    5272:	781b      	ldrb	r3, [r3, #0]
    5274:	b25b      	sxtb	r3, r3
    5276:	2b00      	cmp	r3, #0
    5278:	d135      	bne.n	52e6 <nmi_get_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    527a:	69bb      	ldr	r3, [r7, #24]
    527c:	22c0      	movs	r2, #192	; 0xc0
    527e:	0292      	lsls	r2, r2, #10
    5280:	4313      	orrs	r3, r2
    5282:	221f      	movs	r2, #31
    5284:	18bc      	adds	r4, r7, r2
    5286:	2208      	movs	r2, #8
    5288:	18b9      	adds	r1, r7, r2
    528a:	2208      	movs	r2, #8
    528c:	0018      	movs	r0, r3
    528e:	4b1e      	ldr	r3, [pc, #120]	; (5308 <nmi_get_mac_address+0xc8>)
    5290:	4798      	blx	r3
    5292:	0003      	movs	r3, r0
    5294:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5296:	231f      	movs	r3, #31
    5298:	18fb      	adds	r3, r7, r3
    529a:	781b      	ldrb	r3, [r3, #0]
    529c:	b25b      	sxtb	r3, r3
    529e:	2b00      	cmp	r3, #0
    52a0:	d123      	bne.n	52ea <nmi_get_mac_address+0xaa>
	u32RegValue = strgp.u32Mac_efuse_mib;
    52a2:	2308      	movs	r3, #8
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
    52aa:	69bb      	ldr	r3, [r7, #24]
    52ac:	041b      	lsls	r3, r3, #16
    52ae:	0c1b      	lsrs	r3, r3, #16
    52b0:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    52b2:	69bb      	ldr	r3, [r7, #24]
    52b4:	22c0      	movs	r2, #192	; 0xc0
    52b6:	0292      	lsls	r2, r2, #10
    52b8:	4313      	orrs	r3, r2
    52ba:	221f      	movs	r2, #31
    52bc:	18bc      	adds	r4, r7, r2
    52be:	2210      	movs	r2, #16
    52c0:	18b9      	adds	r1, r7, r2
    52c2:	2206      	movs	r2, #6
    52c4:	0018      	movs	r0, r3
    52c6:	4b10      	ldr	r3, [pc, #64]	; (5308 <nmi_get_mac_address+0xc8>)
    52c8:	4798      	blx	r3
    52ca:	0003      	movs	r3, r0
    52cc:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr, mac, 6);
    52ce:	2310      	movs	r3, #16
    52d0:	18f9      	adds	r1, r7, r3
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	2206      	movs	r2, #6
    52d6:	0018      	movs	r0, r3
    52d8:	4b0c      	ldr	r3, [pc, #48]	; (530c <nmi_get_mac_address+0xcc>)
    52da:	4798      	blx	r3

	return ret;
    52dc:	231f      	movs	r3, #31
    52de:	18fb      	adds	r3, r7, r3
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	b25b      	sxtb	r3, r3
    52e4:	e006      	b.n	52f4 <nmi_get_mac_address+0xb4>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	e000      	b.n	52ec <nmi_get_mac_address+0xac>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    52ea:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
    52ec:	231f      	movs	r3, #31
    52ee:	18fb      	adds	r3, r7, r3
    52f0:	781b      	ldrb	r3, [r3, #0]
    52f2:	b25b      	sxtb	r3, r3
    52f4:	0018      	movs	r0, r3
    52f6:	46bd      	mov	sp, r7
    52f8:	b009      	add	sp, #36	; 0x24
    52fa:	bd90      	pop	{r4, r7, pc}
    52fc:	00010c67 	.word	0x00010c67
    5300:	000c0008 	.word	0x000c0008
    5304:	0000538d 	.word	0x0000538d
    5308:	00005401 	.word	0x00005401
    530c:	00003035 	.word	0x00003035

00005310 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    5310:	b590      	push	{r4, r7, lr}
    5312:	b085      	sub	sp, #20
    5314:	af00      	add	r7, sp, #0
    5316:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5318:	230f      	movs	r3, #15
    531a:	18fb      	adds	r3, r7, r3
    531c:	2200      	movs	r2, #0
    531e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    5320:	230f      	movs	r3, #15
    5322:	18fc      	adds	r4, r7, r3
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	0018      	movs	r0, r3
    5328:	4b05      	ldr	r3, [pc, #20]	; (5340 <nm_bus_iface_init+0x30>)
    532a:	4798      	blx	r3
    532c:	0003      	movs	r3, r0
    532e:	7023      	strb	r3, [r4, #0]

	return ret;
    5330:	230f      	movs	r3, #15
    5332:	18fb      	adds	r3, r7, r3
    5334:	781b      	ldrb	r3, [r3, #0]
    5336:	b25b      	sxtb	r3, r3
}
    5338:	0018      	movs	r0, r3
    533a:	46bd      	mov	sp, r7
    533c:	b005      	add	sp, #20
    533e:	bd90      	pop	{r4, r7, pc}
    5340:	00002e79 	.word	0x00002e79

00005344 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    5344:	b590      	push	{r4, r7, lr}
    5346:	b083      	sub	sp, #12
    5348:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    534a:	1dfb      	adds	r3, r7, #7
    534c:	2200      	movs	r2, #0
    534e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    5350:	1dfc      	adds	r4, r7, #7
    5352:	4b05      	ldr	r3, [pc, #20]	; (5368 <nm_bus_iface_deinit+0x24>)
    5354:	4798      	blx	r3
    5356:	0003      	movs	r3, r0
    5358:	7023      	strb	r3, [r4, #0]

	return ret;
    535a:	1dfb      	adds	r3, r7, #7
    535c:	781b      	ldrb	r3, [r3, #0]
    535e:	b25b      	sxtb	r3, r3
}
    5360:	0018      	movs	r0, r3
    5362:	46bd      	mov	sp, r7
    5364:	b003      	add	sp, #12
    5366:	bd90      	pop	{r4, r7, pc}
    5368:	00002ff1 	.word	0x00002ff1

0000536c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    536c:	b580      	push	{r7, lr}
    536e:	b082      	sub	sp, #8
    5370:	af00      	add	r7, sp, #0
    5372:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    5374:	687b      	ldr	r3, [r7, #4]
    5376:	0018      	movs	r0, r3
    5378:	4b03      	ldr	r3, [pc, #12]	; (5388 <nm_read_reg+0x1c>)
    537a:	4798      	blx	r3
    537c:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    537e:	0018      	movs	r0, r3
    5380:	46bd      	mov	sp, r7
    5382:	b002      	add	sp, #8
    5384:	bd80      	pop	{r7, pc}
    5386:	46c0      	nop			; (mov r8, r8)
    5388:	00006a05 	.word	0x00006a05

0000538c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    538c:	b580      	push	{r7, lr}
    538e:	b082      	sub	sp, #8
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
    5394:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    5396:	683a      	ldr	r2, [r7, #0]
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	0011      	movs	r1, r2
    539c:	0018      	movs	r0, r3
    539e:	4b03      	ldr	r3, [pc, #12]	; (53ac <nm_read_reg_with_ret+0x20>)
    53a0:	4798      	blx	r3
    53a2:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    53a4:	0018      	movs	r0, r3
    53a6:	46bd      	mov	sp, r7
    53a8:	b002      	add	sp, #8
    53aa:	bd80      	pop	{r7, pc}
    53ac:	00006a29 	.word	0x00006a29

000053b0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    53b0:	b580      	push	{r7, lr}
    53b2:	b082      	sub	sp, #8
    53b4:	af00      	add	r7, sp, #0
    53b6:	6078      	str	r0, [r7, #4]
    53b8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    53ba:	683a      	ldr	r2, [r7, #0]
    53bc:	687b      	ldr	r3, [r7, #4]
    53be:	0011      	movs	r1, r2
    53c0:	0018      	movs	r0, r3
    53c2:	4b03      	ldr	r3, [pc, #12]	; (53d0 <nm_write_reg+0x20>)
    53c4:	4798      	blx	r3
    53c6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    53c8:	0018      	movs	r0, r3
    53ca:	46bd      	mov	sp, r7
    53cc:	b002      	add	sp, #8
    53ce:	bd80      	pop	{r7, pc}
    53d0:	00006a79 	.word	0x00006a79

000053d4 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b084      	sub	sp, #16
    53d8:	af00      	add	r7, sp, #0
    53da:	60f8      	str	r0, [r7, #12]
    53dc:	60b9      	str	r1, [r7, #8]
    53de:	1dbb      	adds	r3, r7, #6
    53e0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    53e2:	1dbb      	adds	r3, r7, #6
    53e4:	881a      	ldrh	r2, [r3, #0]
    53e6:	68b9      	ldr	r1, [r7, #8]
    53e8:	68fb      	ldr	r3, [r7, #12]
    53ea:	0018      	movs	r0, r3
    53ec:	4b03      	ldr	r3, [pc, #12]	; (53fc <p_nm_read_block+0x28>)
    53ee:	4798      	blx	r3
    53f0:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    53f2:	0018      	movs	r0, r3
    53f4:	46bd      	mov	sp, r7
    53f6:	b004      	add	sp, #16
    53f8:	bd80      	pop	{r7, pc}
    53fa:	46c0      	nop			; (mov r8, r8)
    53fc:	00006ac9 	.word	0x00006ac9

00005400 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    5400:	b580      	push	{r7, lr}
    5402:	b086      	sub	sp, #24
    5404:	af00      	add	r7, sp, #0
    5406:	60f8      	str	r0, [r7, #12]
    5408:	60b9      	str	r1, [r7, #8]
    540a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    540c:	4b2d      	ldr	r3, [pc, #180]	; (54c4 <nm_read_block+0xc4>)
    540e:	881a      	ldrh	r2, [r3, #0]
    5410:	2310      	movs	r3, #16
    5412:	18fb      	adds	r3, r7, r3
    5414:	3a08      	subs	r2, #8
    5416:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    5418:	2300      	movs	r3, #0
    541a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    541c:	2313      	movs	r3, #19
    541e:	18fb      	adds	r3, r7, r3
    5420:	2200      	movs	r2, #0
    5422:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    5424:	2310      	movs	r3, #16
    5426:	18fb      	adds	r3, r7, r3
    5428:	881a      	ldrh	r2, [r3, #0]
    542a:	687b      	ldr	r3, [r7, #4]
    542c:	429a      	cmp	r2, r3
    542e:	d313      	bcc.n	5458 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    5430:	68ba      	ldr	r2, [r7, #8]
    5432:	697b      	ldr	r3, [r7, #20]
    5434:	18d1      	adds	r1, r2, r3
    5436:	687b      	ldr	r3, [r7, #4]
    5438:	b29a      	uxth	r2, r3
    543a:	68fb      	ldr	r3, [r7, #12]
    543c:	0018      	movs	r0, r3
    543e:	4b22      	ldr	r3, [pc, #136]	; (54c8 <nm_read_block+0xc8>)
    5440:	4798      	blx	r3
    5442:	0003      	movs	r3, r0
    5444:	b2da      	uxtb	r2, r3
    5446:	2313      	movs	r3, #19
    5448:	18fb      	adds	r3, r7, r3
    544a:	781b      	ldrb	r3, [r3, #0]
    544c:	18d3      	adds	r3, r2, r3
    544e:	b2da      	uxtb	r2, r3
    5450:	2313      	movs	r3, #19
    5452:	18fb      	adds	r3, r7, r3
    5454:	701a      	strb	r2, [r3, #0]
			break;
    5456:	e02d      	b.n	54b4 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5458:	68ba      	ldr	r2, [r7, #8]
    545a:	697b      	ldr	r3, [r7, #20]
    545c:	18d1      	adds	r1, r2, r3
    545e:	2310      	movs	r3, #16
    5460:	18fb      	adds	r3, r7, r3
    5462:	881a      	ldrh	r2, [r3, #0]
    5464:	68fb      	ldr	r3, [r7, #12]
    5466:	0018      	movs	r0, r3
    5468:	4b17      	ldr	r3, [pc, #92]	; (54c8 <nm_read_block+0xc8>)
    546a:	4798      	blx	r3
    546c:	0003      	movs	r3, r0
    546e:	b2da      	uxtb	r2, r3
    5470:	2313      	movs	r3, #19
    5472:	18fb      	adds	r3, r7, r3
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	18d3      	adds	r3, r2, r3
    5478:	b2da      	uxtb	r2, r3
    547a:	2313      	movs	r3, #19
    547c:	18fb      	adds	r3, r7, r3
    547e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    5480:	2313      	movs	r3, #19
    5482:	18fb      	adds	r3, r7, r3
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	b25b      	sxtb	r3, r3
    5488:	2b00      	cmp	r3, #0
    548a:	d112      	bne.n	54b2 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    548c:	2310      	movs	r3, #16
    548e:	18fb      	adds	r3, r7, r3
    5490:	881b      	ldrh	r3, [r3, #0]
    5492:	687a      	ldr	r2, [r7, #4]
    5494:	1ad3      	subs	r3, r2, r3
    5496:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    5498:	2310      	movs	r3, #16
    549a:	18fb      	adds	r3, r7, r3
    549c:	881b      	ldrh	r3, [r3, #0]
    549e:	697a      	ldr	r2, [r7, #20]
    54a0:	18d3      	adds	r3, r2, r3
    54a2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    54a4:	2310      	movs	r3, #16
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	881b      	ldrh	r3, [r3, #0]
    54aa:	68fa      	ldr	r2, [r7, #12]
    54ac:	18d3      	adds	r3, r2, r3
    54ae:	60fb      	str	r3, [r7, #12]
		}
	}
    54b0:	e7b8      	b.n	5424 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    54b2:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    54b4:	2313      	movs	r3, #19
    54b6:	18fb      	adds	r3, r7, r3
    54b8:	781b      	ldrb	r3, [r3, #0]
    54ba:	b25b      	sxtb	r3, r3
}
    54bc:	0018      	movs	r0, r3
    54be:	46bd      	mov	sp, r7
    54c0:	b006      	add	sp, #24
    54c2:	bd80      	pop	{r7, pc}
    54c4:	20000014 	.word	0x20000014
    54c8:	000053d5 	.word	0x000053d5

000054cc <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    54cc:	b580      	push	{r7, lr}
    54ce:	b084      	sub	sp, #16
    54d0:	af00      	add	r7, sp, #0
    54d2:	60f8      	str	r0, [r7, #12]
    54d4:	60b9      	str	r1, [r7, #8]
    54d6:	1dbb      	adds	r3, r7, #6
    54d8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    54da:	1dbb      	adds	r3, r7, #6
    54dc:	881a      	ldrh	r2, [r3, #0]
    54de:	68b9      	ldr	r1, [r7, #8]
    54e0:	68fb      	ldr	r3, [r7, #12]
    54e2:	0018      	movs	r0, r3
    54e4:	4b03      	ldr	r3, [pc, #12]	; (54f4 <p_nm_write_block+0x28>)
    54e6:	4798      	blx	r3
    54e8:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    54ea:	0018      	movs	r0, r3
    54ec:	46bd      	mov	sp, r7
    54ee:	b004      	add	sp, #16
    54f0:	bd80      	pop	{r7, pc}
    54f2:	46c0      	nop			; (mov r8, r8)
    54f4:	00006b21 	.word	0x00006b21

000054f8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    54f8:	b580      	push	{r7, lr}
    54fa:	b086      	sub	sp, #24
    54fc:	af00      	add	r7, sp, #0
    54fe:	60f8      	str	r0, [r7, #12]
    5500:	60b9      	str	r1, [r7, #8]
    5502:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    5504:	4b2d      	ldr	r3, [pc, #180]	; (55bc <nm_write_block+0xc4>)
    5506:	881a      	ldrh	r2, [r3, #0]
    5508:	2310      	movs	r3, #16
    550a:	18fb      	adds	r3, r7, r3
    550c:	3a08      	subs	r2, #8
    550e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    5510:	2300      	movs	r3, #0
    5512:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    5514:	2313      	movs	r3, #19
    5516:	18fb      	adds	r3, r7, r3
    5518:	2200      	movs	r2, #0
    551a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    551c:	2310      	movs	r3, #16
    551e:	18fb      	adds	r3, r7, r3
    5520:	881a      	ldrh	r2, [r3, #0]
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	429a      	cmp	r2, r3
    5526:	d313      	bcc.n	5550 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    5528:	68ba      	ldr	r2, [r7, #8]
    552a:	697b      	ldr	r3, [r7, #20]
    552c:	18d1      	adds	r1, r2, r3
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	b29a      	uxth	r2, r3
    5532:	68fb      	ldr	r3, [r7, #12]
    5534:	0018      	movs	r0, r3
    5536:	4b22      	ldr	r3, [pc, #136]	; (55c0 <nm_write_block+0xc8>)
    5538:	4798      	blx	r3
    553a:	0003      	movs	r3, r0
    553c:	b2da      	uxtb	r2, r3
    553e:	2313      	movs	r3, #19
    5540:	18fb      	adds	r3, r7, r3
    5542:	781b      	ldrb	r3, [r3, #0]
    5544:	18d3      	adds	r3, r2, r3
    5546:	b2da      	uxtb	r2, r3
    5548:	2313      	movs	r3, #19
    554a:	18fb      	adds	r3, r7, r3
    554c:	701a      	strb	r2, [r3, #0]
			break;
    554e:	e02d      	b.n	55ac <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    5550:	68ba      	ldr	r2, [r7, #8]
    5552:	697b      	ldr	r3, [r7, #20]
    5554:	18d1      	adds	r1, r2, r3
    5556:	2310      	movs	r3, #16
    5558:	18fb      	adds	r3, r7, r3
    555a:	881a      	ldrh	r2, [r3, #0]
    555c:	68fb      	ldr	r3, [r7, #12]
    555e:	0018      	movs	r0, r3
    5560:	4b17      	ldr	r3, [pc, #92]	; (55c0 <nm_write_block+0xc8>)
    5562:	4798      	blx	r3
    5564:	0003      	movs	r3, r0
    5566:	b2da      	uxtb	r2, r3
    5568:	2313      	movs	r3, #19
    556a:	18fb      	adds	r3, r7, r3
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	18d3      	adds	r3, r2, r3
    5570:	b2da      	uxtb	r2, r3
    5572:	2313      	movs	r3, #19
    5574:	18fb      	adds	r3, r7, r3
    5576:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    5578:	2313      	movs	r3, #19
    557a:	18fb      	adds	r3, r7, r3
    557c:	781b      	ldrb	r3, [r3, #0]
    557e:	b25b      	sxtb	r3, r3
    5580:	2b00      	cmp	r3, #0
    5582:	d112      	bne.n	55aa <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    5584:	2310      	movs	r3, #16
    5586:	18fb      	adds	r3, r7, r3
    5588:	881b      	ldrh	r3, [r3, #0]
    558a:	687a      	ldr	r2, [r7, #4]
    558c:	1ad3      	subs	r3, r2, r3
    558e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    5590:	2310      	movs	r3, #16
    5592:	18fb      	adds	r3, r7, r3
    5594:	881b      	ldrh	r3, [r3, #0]
    5596:	697a      	ldr	r2, [r7, #20]
    5598:	18d3      	adds	r3, r2, r3
    559a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    559c:	2310      	movs	r3, #16
    559e:	18fb      	adds	r3, r7, r3
    55a0:	881b      	ldrh	r3, [r3, #0]
    55a2:	68fa      	ldr	r2, [r7, #12]
    55a4:	18d3      	adds	r3, r2, r3
    55a6:	60fb      	str	r3, [r7, #12]
		}
	}
    55a8:	e7b8      	b.n	551c <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    55aa:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    55ac:	2313      	movs	r3, #19
    55ae:	18fb      	adds	r3, r7, r3
    55b0:	781b      	ldrb	r3, [r3, #0]
    55b2:	b25b      	sxtb	r3, r3
}
    55b4:	0018      	movs	r0, r3
    55b6:	46bd      	mov	sp, r7
    55b8:	b006      	add	sp, #24
    55ba:	bd80      	pop	{r7, pc}
    55bc:	20000014 	.word	0x20000014
    55c0:	000054cd 	.word	0x000054cd

000055c4 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    55c4:	b590      	push	{r4, r7, lr}
    55c6:	b087      	sub	sp, #28
    55c8:	af00      	add	r7, sp, #0
    55ca:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    55cc:	2300      	movs	r3, #0
    55ce:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    55d0:	2317      	movs	r3, #23
    55d2:	18fb      	adds	r3, r7, r3
    55d4:	2200      	movs	r2, #0
    55d6:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    55d8:	2317      	movs	r3, #23
    55da:	18fc      	adds	r4, r7, r3
    55dc:	230c      	movs	r3, #12
    55de:	18fb      	adds	r3, r7, r3
    55e0:	4a4c      	ldr	r2, [pc, #304]	; (5714 <nm_get_firmware_info+0x150>)
    55e2:	0019      	movs	r1, r3
    55e4:	0010      	movs	r0, r2
    55e6:	4b4c      	ldr	r3, [pc, #304]	; (5718 <nm_get_firmware_info+0x154>)
    55e8:	4798      	blx	r3
    55ea:	0003      	movs	r3, r0
    55ec:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    55ee:	68fb      	ldr	r3, [r7, #12]
    55f0:	4a4a      	ldr	r2, [pc, #296]	; (571c <nm_get_firmware_info+0x158>)
    55f2:	4293      	cmp	r3, r2
    55f4:	d10a      	bne.n	560c <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    55f6:	2317      	movs	r3, #23
    55f8:	18fc      	adds	r4, r7, r3
    55fa:	230c      	movs	r3, #12
    55fc:	18fb      	adds	r3, r7, r3
    55fe:	4a48      	ldr	r2, [pc, #288]	; (5720 <nm_get_firmware_info+0x15c>)
    5600:	0019      	movs	r1, r3
    5602:	0010      	movs	r0, r2
    5604:	4b44      	ldr	r3, [pc, #272]	; (5718 <nm_get_firmware_info+0x154>)
    5606:	4798      	blx	r3
    5608:	0003      	movs	r3, r0
    560a:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    560c:	68fb      	ldr	r3, [r7, #12]
    560e:	0c1b      	lsrs	r3, r3, #16
    5610:	121b      	asrs	r3, r3, #8
    5612:	b2da      	uxtb	r2, r3
    5614:	687b      	ldr	r3, [r7, #4]
    5616:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	0c1b      	lsrs	r3, r3, #16
    561c:	111b      	asrs	r3, r3, #4
    561e:	b2db      	uxtb	r3, r3
    5620:	220f      	movs	r2, #15
    5622:	4013      	ands	r3, r2
    5624:	b2da      	uxtb	r2, r3
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    562a:	68fb      	ldr	r3, [r7, #12]
    562c:	0c1b      	lsrs	r3, r3, #16
    562e:	b2db      	uxtb	r3, r3
    5630:	220f      	movs	r2, #15
    5632:	4013      	ands	r3, r2
    5634:	b2da      	uxtb	r2, r3
    5636:	687b      	ldr	r3, [r7, #4]
    5638:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    563a:	68fb      	ldr	r3, [r7, #12]
    563c:	121b      	asrs	r3, r3, #8
    563e:	b2da      	uxtb	r2, r3
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    5644:	68fb      	ldr	r3, [r7, #12]
    5646:	111b      	asrs	r3, r3, #4
    5648:	b2db      	uxtb	r3, r3
    564a:	220f      	movs	r2, #15
    564c:	4013      	ands	r3, r2
    564e:	b2da      	uxtb	r2, r3
    5650:	687b      	ldr	r3, [r7, #4]
    5652:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    5654:	68fb      	ldr	r3, [r7, #12]
    5656:	b2db      	uxtb	r3, r3
    5658:	220f      	movs	r2, #15
    565a:	4013      	ands	r3, r2
    565c:	b2da      	uxtb	r2, r3
    565e:	687b      	ldr	r3, [r7, #4]
    5660:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    5662:	4b30      	ldr	r3, [pc, #192]	; (5724 <nm_get_firmware_info+0x160>)
    5664:	4798      	blx	r3
    5666:	0002      	movs	r2, r0
    5668:	687b      	ldr	r3, [r7, #4]
    566a:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	791b      	ldrb	r3, [r3, #4]
    5670:	021b      	lsls	r3, r3, #8
    5672:	b21a      	sxth	r2, r3
    5674:	687b      	ldr	r3, [r7, #4]
    5676:	795b      	ldrb	r3, [r3, #5]
    5678:	011b      	lsls	r3, r3, #4
    567a:	b21b      	sxth	r3, r3
    567c:	21ff      	movs	r1, #255	; 0xff
    567e:	400b      	ands	r3, r1
    5680:	b21b      	sxth	r3, r3
    5682:	4313      	orrs	r3, r2
    5684:	b21a      	sxth	r2, r3
    5686:	687b      	ldr	r3, [r7, #4]
    5688:	799b      	ldrb	r3, [r3, #6]
    568a:	b21b      	sxth	r3, r3
    568c:	210f      	movs	r1, #15
    568e:	400b      	ands	r3, r1
    5690:	b21b      	sxth	r3, r3
    5692:	4313      	orrs	r3, r2
    5694:	b21a      	sxth	r2, r3
    5696:	2314      	movs	r3, #20
    5698:	18fb      	adds	r3, r7, r3
    569a:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    569c:	2312      	movs	r3, #18
    569e:	18fb      	adds	r3, r7, r3
    56a0:	4a21      	ldr	r2, [pc, #132]	; (5728 <nm_get_firmware_info+0x164>)
    56a2:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	79db      	ldrb	r3, [r3, #7]
    56a8:	021b      	lsls	r3, r3, #8
    56aa:	b21a      	sxth	r2, r3
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	7a1b      	ldrb	r3, [r3, #8]
    56b0:	011b      	lsls	r3, r3, #4
    56b2:	b21b      	sxth	r3, r3
    56b4:	21ff      	movs	r1, #255	; 0xff
    56b6:	400b      	ands	r3, r1
    56b8:	b21b      	sxth	r3, r3
    56ba:	4313      	orrs	r3, r2
    56bc:	b21a      	sxth	r2, r3
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	7a5b      	ldrb	r3, [r3, #9]
    56c2:	b21b      	sxth	r3, r3
    56c4:	210f      	movs	r1, #15
    56c6:	400b      	ands	r3, r1
    56c8:	b21b      	sxth	r3, r3
    56ca:	4313      	orrs	r3, r2
    56cc:	b21a      	sxth	r2, r3
    56ce:	2310      	movs	r3, #16
    56d0:	18fb      	adds	r3, r7, r3
    56d2:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    56d4:	2312      	movs	r3, #18
    56d6:	18fa      	adds	r2, r7, r3
    56d8:	2310      	movs	r3, #16
    56da:	18fb      	adds	r3, r7, r3
    56dc:	8812      	ldrh	r2, [r2, #0]
    56de:	881b      	ldrh	r3, [r3, #0]
    56e0:	429a      	cmp	r2, r3
    56e2:	d203      	bcs.n	56ec <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    56e4:	2317      	movs	r3, #23
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	22f3      	movs	r2, #243	; 0xf3
    56ea:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    56ec:	2312      	movs	r3, #18
    56ee:	18fa      	adds	r2, r7, r3
    56f0:	2314      	movs	r3, #20
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	8812      	ldrh	r2, [r2, #0]
    56f6:	881b      	ldrh	r3, [r3, #0]
    56f8:	429a      	cmp	r2, r3
    56fa:	d903      	bls.n	5704 <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    56fc:	2317      	movs	r3, #23
    56fe:	18fb      	adds	r3, r7, r3
    5700:	22f3      	movs	r2, #243	; 0xf3
    5702:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    5704:	2317      	movs	r3, #23
    5706:	18fb      	adds	r3, r7, r3
    5708:	781b      	ldrb	r3, [r3, #0]
    570a:	b25b      	sxtb	r3, r3
}
    570c:	0018      	movs	r0, r3
    570e:	46bd      	mov	sp, r7
    5710:	b007      	add	sp, #28
    5712:	bd90      	pop	{r4, r7, pc}
    5714:	000207ac 	.word	0x000207ac
    5718:	0000538d 	.word	0x0000538d
    571c:	d75dc1c3 	.word	0xd75dc1c3
    5720:	00001048 	.word	0x00001048
    5724:	00004cf9 	.word	0x00004cf9
    5728:	00001330 	.word	0x00001330

0000572c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    572c:	b590      	push	{r4, r7, lr}
    572e:	b085      	sub	sp, #20
    5730:	af00      	add	r7, sp, #0
    5732:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5734:	230f      	movs	r3, #15
    5736:	18fb      	adds	r3, r7, r3
    5738:	2200      	movs	r2, #0
    573a:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    573c:	687b      	ldr	r3, [r7, #4]
    573e:	2b00      	cmp	r3, #0
    5740:	d013      	beq.n	576a <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    5742:	230e      	movs	r3, #14
    5744:	18fb      	adds	r3, r7, r3
    5746:	687a      	ldr	r2, [r7, #4]
    5748:	7812      	ldrb	r2, [r2, #0]
    574a:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    574c:	230e      	movs	r3, #14
    574e:	18fb      	adds	r3, r7, r3
    5750:	781b      	ldrb	r3, [r3, #0]
    5752:	2b00      	cmp	r3, #0
    5754:	d004      	beq.n	5760 <nm_drv_init+0x34>
    5756:	230e      	movs	r3, #14
    5758:	18fb      	adds	r3, r7, r3
    575a:	781b      	ldrb	r3, [r3, #0]
    575c:	2b04      	cmp	r3, #4
    575e:	d908      	bls.n	5772 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    5760:	230e      	movs	r3, #14
    5762:	18fb      	adds	r3, r7, r3
    5764:	2201      	movs	r2, #1
    5766:	701a      	strb	r2, [r3, #0]
    5768:	e003      	b.n	5772 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    576a:	230e      	movs	r3, #14
    576c:	18fb      	adds	r3, r7, r3
    576e:	2201      	movs	r2, #1
    5770:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    5772:	230f      	movs	r3, #15
    5774:	18fc      	adds	r4, r7, r3
    5776:	2000      	movs	r0, #0
    5778:	4b40      	ldr	r3, [pc, #256]	; (587c <nm_drv_init+0x150>)
    577a:	4798      	blx	r3
    577c:	0003      	movs	r3, r0
    577e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5780:	230f      	movs	r3, #15
    5782:	18fb      	adds	r3, r7, r3
    5784:	781b      	ldrb	r3, [r3, #0]
    5786:	b25b      	sxtb	r3, r3
    5788:	2b00      	cmp	r3, #0
    578a:	d00e      	beq.n	57aa <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    578c:	2392      	movs	r3, #146	; 0x92
    578e:	005a      	lsls	r2, r3, #1
    5790:	493b      	ldr	r1, [pc, #236]	; (5880 <nm_drv_init+0x154>)
    5792:	4b3c      	ldr	r3, [pc, #240]	; (5884 <nm_drv_init+0x158>)
    5794:	0018      	movs	r0, r3
    5796:	4b3c      	ldr	r3, [pc, #240]	; (5888 <nm_drv_init+0x15c>)
    5798:	4798      	blx	r3
    579a:	4b3c      	ldr	r3, [pc, #240]	; (588c <nm_drv_init+0x160>)
    579c:	0018      	movs	r0, r3
    579e:	4b3c      	ldr	r3, [pc, #240]	; (5890 <nm_drv_init+0x164>)
    57a0:	4798      	blx	r3
    57a2:	200d      	movs	r0, #13
    57a4:	4b3b      	ldr	r3, [pc, #236]	; (5894 <nm_drv_init+0x168>)
    57a6:	4798      	blx	r3
		goto ERR1;
    57a8:	e05f      	b.n	586a <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    57aa:	4b3b      	ldr	r3, [pc, #236]	; (5898 <nm_drv_init+0x16c>)
    57ac:	0018      	movs	r0, r3
    57ae:	4b36      	ldr	r3, [pc, #216]	; (5888 <nm_drv_init+0x15c>)
    57b0:	4798      	blx	r3
    57b2:	4b3a      	ldr	r3, [pc, #232]	; (589c <nm_drv_init+0x170>)
    57b4:	4798      	blx	r3
    57b6:	0002      	movs	r2, r0
    57b8:	4b39      	ldr	r3, [pc, #228]	; (58a0 <nm_drv_init+0x174>)
    57ba:	0011      	movs	r1, r2
    57bc:	0018      	movs	r0, r3
    57be:	4b32      	ldr	r3, [pc, #200]	; (5888 <nm_drv_init+0x15c>)
    57c0:	4798      	blx	r3
    57c2:	200d      	movs	r0, #13
    57c4:	4b33      	ldr	r3, [pc, #204]	; (5894 <nm_drv_init+0x168>)
    57c6:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    57c8:	4b36      	ldr	r3, [pc, #216]	; (58a4 <nm_drv_init+0x178>)
    57ca:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    57cc:	230f      	movs	r3, #15
    57ce:	18fc      	adds	r4, r7, r3
    57d0:	230e      	movs	r3, #14
    57d2:	18fb      	adds	r3, r7, r3
    57d4:	781b      	ldrb	r3, [r3, #0]
    57d6:	0018      	movs	r0, r3
    57d8:	4b33      	ldr	r3, [pc, #204]	; (58a8 <nm_drv_init+0x17c>)
    57da:	4798      	blx	r3
    57dc:	0003      	movs	r3, r0
    57de:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    57e0:	230f      	movs	r3, #15
    57e2:	18fb      	adds	r3, r7, r3
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	b25b      	sxtb	r3, r3
    57e8:	2b00      	cmp	r3, #0
    57ea:	d139      	bne.n	5860 <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    57ec:	230f      	movs	r3, #15
    57ee:	18fc      	adds	r4, r7, r3
    57f0:	230e      	movs	r3, #14
    57f2:	18fb      	adds	r3, r7, r3
    57f4:	781b      	ldrb	r3, [r3, #0]
    57f6:	0018      	movs	r0, r3
    57f8:	4b2c      	ldr	r3, [pc, #176]	; (58ac <nm_drv_init+0x180>)
    57fa:	4798      	blx	r3
    57fc:	0003      	movs	r3, r0
    57fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5800:	230f      	movs	r3, #15
    5802:	18fb      	adds	r3, r7, r3
    5804:	781b      	ldrb	r3, [r3, #0]
    5806:	b25b      	sxtb	r3, r3
    5808:	2b00      	cmp	r3, #0
    580a:	d12b      	bne.n	5864 <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    580c:	230e      	movs	r3, #14
    580e:	18fb      	adds	r3, r7, r3
    5810:	781b      	ldrb	r3, [r3, #0]
    5812:	2b02      	cmp	r3, #2
    5814:	d029      	beq.n	586a <nm_drv_init+0x13e>
    5816:	230e      	movs	r3, #14
    5818:	18fb      	adds	r3, r7, r3
    581a:	781b      	ldrb	r3, [r3, #0]
    581c:	2b03      	cmp	r3, #3
    581e:	d024      	beq.n	586a <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    5820:	230f      	movs	r3, #15
    5822:	18fc      	adds	r4, r7, r3
    5824:	4b22      	ldr	r3, [pc, #136]	; (58b0 <nm_drv_init+0x184>)
    5826:	4798      	blx	r3
    5828:	0003      	movs	r3, r0
    582a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    582c:	230f      	movs	r3, #15
    582e:	18fb      	adds	r3, r7, r3
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	b25b      	sxtb	r3, r3
    5834:	2b00      	cmp	r3, #0
    5836:	d00e      	beq.n	5856 <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    5838:	23ae      	movs	r3, #174	; 0xae
    583a:	005a      	lsls	r2, r3, #1
    583c:	4910      	ldr	r1, [pc, #64]	; (5880 <nm_drv_init+0x154>)
    583e:	4b11      	ldr	r3, [pc, #68]	; (5884 <nm_drv_init+0x158>)
    5840:	0018      	movs	r0, r3
    5842:	4b11      	ldr	r3, [pc, #68]	; (5888 <nm_drv_init+0x15c>)
    5844:	4798      	blx	r3
    5846:	4b1b      	ldr	r3, [pc, #108]	; (58b4 <nm_drv_init+0x188>)
    5848:	0018      	movs	r0, r3
    584a:	4b11      	ldr	r3, [pc, #68]	; (5890 <nm_drv_init+0x164>)
    584c:	4798      	blx	r3
    584e:	200d      	movs	r0, #13
    5850:	4b10      	ldr	r3, [pc, #64]	; (5894 <nm_drv_init+0x168>)
    5852:	4798      	blx	r3
		goto ERR2;
    5854:	e007      	b.n	5866 <nm_drv_init+0x13a>
	}
	
	return ret;
    5856:	230f      	movs	r3, #15
    5858:	18fb      	adds	r3, r7, r3
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	b25b      	sxtb	r3, r3
    585e:	e008      	b.n	5872 <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    5860:	46c0      	nop			; (mov r8, r8)
    5862:	e000      	b.n	5866 <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    5864:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    5866:	4b14      	ldr	r3, [pc, #80]	; (58b8 <nm_drv_init+0x18c>)
    5868:	4798      	blx	r3
ERR1:
	return ret;
    586a:	230f      	movs	r3, #15
    586c:	18fb      	adds	r3, r7, r3
    586e:	781b      	ldrb	r3, [r3, #0]
    5870:	b25b      	sxtb	r3, r3
}
    5872:	0018      	movs	r0, r3
    5874:	46bd      	mov	sp, r7
    5876:	b005      	add	sp, #20
    5878:	bd90      	pop	{r4, r7, pc}
    587a:	46c0      	nop			; (mov r8, r8)
    587c:	00005311 	.word	0x00005311
    5880:	00012ed4 	.word	0x00012ed4
    5884:	00012e08 	.word	0x00012e08
    5888:	0001121d 	.word	0x0001121d
    588c:	00012e1c 	.word	0x00012e1c
    5890:	0001133d 	.word	0x0001133d
    5894:	00011251 	.word	0x00011251
    5898:	00012e38 	.word	0x00012e38
    589c:	00004cf9 	.word	0x00004cf9
    58a0:	00012e44 	.word	0x00012e44
    58a4:	000068a5 	.word	0x000068a5
    58a8:	00004df1 	.word	0x00004df1
    58ac:	00004f39 	.word	0x00004f39
    58b0:	00004c3d 	.word	0x00004c3d
    58b4:	00012e54 	.word	0x00012e54
    58b8:	00005345 	.word	0x00005345

000058bc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    58bc:	b590      	push	{r4, r7, lr}
    58be:	b085      	sub	sp, #20
    58c0:	af00      	add	r7, sp, #0
    58c2:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    58c4:	230f      	movs	r3, #15
    58c6:	18fc      	adds	r4, r7, r3
    58c8:	4b2d      	ldr	r3, [pc, #180]	; (5980 <nm_drv_deinit+0xc4>)
    58ca:	4798      	blx	r3
    58cc:	0003      	movs	r3, r0
    58ce:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    58d0:	230f      	movs	r3, #15
    58d2:	18fb      	adds	r3, r7, r3
    58d4:	781b      	ldrb	r3, [r3, #0]
    58d6:	b25b      	sxtb	r3, r3
    58d8:	2b00      	cmp	r3, #0
    58da:	d00e      	beq.n	58fa <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    58dc:	23ba      	movs	r3, #186	; 0xba
    58de:	005a      	lsls	r2, r3, #1
    58e0:	4928      	ldr	r1, [pc, #160]	; (5984 <nm_drv_deinit+0xc8>)
    58e2:	4b29      	ldr	r3, [pc, #164]	; (5988 <nm_drv_deinit+0xcc>)
    58e4:	0018      	movs	r0, r3
    58e6:	4b29      	ldr	r3, [pc, #164]	; (598c <nm_drv_deinit+0xd0>)
    58e8:	4798      	blx	r3
    58ea:	4b29      	ldr	r3, [pc, #164]	; (5990 <nm_drv_deinit+0xd4>)
    58ec:	0018      	movs	r0, r3
    58ee:	4b29      	ldr	r3, [pc, #164]	; (5994 <nm_drv_deinit+0xd8>)
    58f0:	4798      	blx	r3
    58f2:	200d      	movs	r0, #13
    58f4:	4b28      	ldr	r3, [pc, #160]	; (5998 <nm_drv_deinit+0xdc>)
    58f6:	4798      	blx	r3
		goto ERR1;
    58f8:	e03a      	b.n	5970 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    58fa:	230f      	movs	r3, #15
    58fc:	18fc      	adds	r4, r7, r3
    58fe:	2000      	movs	r0, #0
    5900:	4b26      	ldr	r3, [pc, #152]	; (599c <nm_drv_deinit+0xe0>)
    5902:	4798      	blx	r3
    5904:	0003      	movs	r3, r0
    5906:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5908:	230f      	movs	r3, #15
    590a:	18fb      	adds	r3, r7, r3
    590c:	781b      	ldrb	r3, [r3, #0]
    590e:	b25b      	sxtb	r3, r3
    5910:	2b00      	cmp	r3, #0
    5912:	d00f      	beq.n	5934 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    5914:	237c      	movs	r3, #124	; 0x7c
    5916:	33ff      	adds	r3, #255	; 0xff
    5918:	001a      	movs	r2, r3
    591a:	491a      	ldr	r1, [pc, #104]	; (5984 <nm_drv_deinit+0xc8>)
    591c:	4b1a      	ldr	r3, [pc, #104]	; (5988 <nm_drv_deinit+0xcc>)
    591e:	0018      	movs	r0, r3
    5920:	4b1a      	ldr	r3, [pc, #104]	; (598c <nm_drv_deinit+0xd0>)
    5922:	4798      	blx	r3
    5924:	4b1e      	ldr	r3, [pc, #120]	; (59a0 <nm_drv_deinit+0xe4>)
    5926:	0018      	movs	r0, r3
    5928:	4b1a      	ldr	r3, [pc, #104]	; (5994 <nm_drv_deinit+0xd8>)
    592a:	4798      	blx	r3
    592c:	200d      	movs	r0, #13
    592e:	4b1a      	ldr	r3, [pc, #104]	; (5998 <nm_drv_deinit+0xdc>)
    5930:	4798      	blx	r3
		goto ERR1;
    5932:	e01d      	b.n	5970 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    5934:	230f      	movs	r3, #15
    5936:	18fc      	adds	r4, r7, r3
    5938:	4b1a      	ldr	r3, [pc, #104]	; (59a4 <nm_drv_deinit+0xe8>)
    593a:	4798      	blx	r3
    593c:	0003      	movs	r3, r0
    593e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5940:	230f      	movs	r3, #15
    5942:	18fb      	adds	r3, r7, r3
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	b25b      	sxtb	r3, r3
    5948:	2b00      	cmp	r3, #0
    594a:	d00f      	beq.n	596c <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    594c:	2382      	movs	r3, #130	; 0x82
    594e:	33ff      	adds	r3, #255	; 0xff
    5950:	001a      	movs	r2, r3
    5952:	490c      	ldr	r1, [pc, #48]	; (5984 <nm_drv_deinit+0xc8>)
    5954:	4b0c      	ldr	r3, [pc, #48]	; (5988 <nm_drv_deinit+0xcc>)
    5956:	0018      	movs	r0, r3
    5958:	4b0c      	ldr	r3, [pc, #48]	; (598c <nm_drv_deinit+0xd0>)
    595a:	4798      	blx	r3
    595c:	4b12      	ldr	r3, [pc, #72]	; (59a8 <nm_drv_deinit+0xec>)
    595e:	0018      	movs	r0, r3
    5960:	4b0c      	ldr	r3, [pc, #48]	; (5994 <nm_drv_deinit+0xd8>)
    5962:	4798      	blx	r3
    5964:	200d      	movs	r0, #13
    5966:	4b0c      	ldr	r3, [pc, #48]	; (5998 <nm_drv_deinit+0xdc>)
    5968:	4798      	blx	r3
		goto ERR1;
    596a:	e001      	b.n	5970 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    596c:	4b0f      	ldr	r3, [pc, #60]	; (59ac <nm_drv_deinit+0xf0>)
    596e:	4798      	blx	r3
#endif

ERR1:
	return ret;
    5970:	230f      	movs	r3, #15
    5972:	18fb      	adds	r3, r7, r3
    5974:	781b      	ldrb	r3, [r3, #0]
    5976:	b25b      	sxtb	r3, r3
}
    5978:	0018      	movs	r0, r3
    597a:	46bd      	mov	sp, r7
    597c:	b005      	add	sp, #20
    597e:	bd90      	pop	{r4, r7, pc}
    5980:	00004fed 	.word	0x00004fed
    5984:	00012ee0 	.word	0x00012ee0
    5988:	00012e08 	.word	0x00012e08
    598c:	0001121d 	.word	0x0001121d
    5990:	00012e74 	.word	0x00012e74
    5994:	0001133d 	.word	0x0001133d
    5998:	00011251 	.word	0x00011251
    599c:	00007ab9 	.word	0x00007ab9
    59a0:	00012e94 	.word	0x00012e94
    59a4:	00005345 	.word	0x00005345
    59a8:	00012eb8 	.word	0x00012eb8
    59ac:	000069ed 	.word	0x000069ed

000059b0 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    59b0:	b580      	push	{r7, lr}
    59b2:	b086      	sub	sp, #24
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
    59b8:	000a      	movs	r2, r1
    59ba:	1cbb      	adds	r3, r7, #2
    59bc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    59be:	230c      	movs	r3, #12
    59c0:	18fb      	adds	r3, r7, r3
    59c2:	2200      	movs	r2, #0
    59c4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    59c6:	230c      	movs	r3, #12
    59c8:	18fb      	adds	r3, r7, r3
    59ca:	687a      	ldr	r2, [r7, #4]
    59cc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    59ce:	230c      	movs	r3, #12
    59d0:	18fb      	adds	r3, r7, r3
    59d2:	1cba      	adds	r2, r7, #2
    59d4:	8812      	ldrh	r2, [r2, #0]
    59d6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    59d8:	230c      	movs	r3, #12
    59da:	18fb      	adds	r3, r7, r3
    59dc:	0019      	movs	r1, r3
    59de:	2003      	movs	r0, #3
    59e0:	4b03      	ldr	r3, [pc, #12]	; (59f0 <nmi_spi_read+0x40>)
    59e2:	4798      	blx	r3
    59e4:	0003      	movs	r3, r0
}
    59e6:	0018      	movs	r0, r3
    59e8:	46bd      	mov	sp, r7
    59ea:	b006      	add	sp, #24
    59ec:	bd80      	pop	{r7, pc}
    59ee:	46c0      	nop			; (mov r8, r8)
    59f0:	00002f61 	.word	0x00002f61

000059f4 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    59f4:	b580      	push	{r7, lr}
    59f6:	b086      	sub	sp, #24
    59f8:	af00      	add	r7, sp, #0
    59fa:	6078      	str	r0, [r7, #4]
    59fc:	000a      	movs	r2, r1
    59fe:	1cbb      	adds	r3, r7, #2
    5a00:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    5a02:	230c      	movs	r3, #12
    5a04:	18fb      	adds	r3, r7, r3
    5a06:	687a      	ldr	r2, [r7, #4]
    5a08:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    5a0a:	230c      	movs	r3, #12
    5a0c:	18fb      	adds	r3, r7, r3
    5a0e:	2200      	movs	r2, #0
    5a10:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    5a12:	230c      	movs	r3, #12
    5a14:	18fb      	adds	r3, r7, r3
    5a16:	1cba      	adds	r2, r7, #2
    5a18:	8812      	ldrh	r2, [r2, #0]
    5a1a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5a1c:	230c      	movs	r3, #12
    5a1e:	18fb      	adds	r3, r7, r3
    5a20:	0019      	movs	r1, r3
    5a22:	2003      	movs	r0, #3
    5a24:	4b03      	ldr	r3, [pc, #12]	; (5a34 <nmi_spi_write+0x40>)
    5a26:	4798      	blx	r3
    5a28:	0003      	movs	r3, r0
}
    5a2a:	0018      	movs	r0, r3
    5a2c:	46bd      	mov	sp, r7
    5a2e:	b006      	add	sp, #24
    5a30:	bd80      	pop	{r7, pc}
    5a32:	46c0      	nop			; (mov r8, r8)
    5a34:	00002f61 	.word	0x00002f61

00005a38 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    5a38:	b580      	push	{r7, lr}
    5a3a:	b082      	sub	sp, #8
    5a3c:	af00      	add	r7, sp, #0
    5a3e:	0002      	movs	r2, r0
    5a40:	1dfb      	adds	r3, r7, #7
    5a42:	701a      	strb	r2, [r3, #0]
    5a44:	1dbb      	adds	r3, r7, #6
    5a46:	1c0a      	adds	r2, r1, #0
    5a48:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    5a4a:	1dfb      	adds	r3, r7, #7
    5a4c:	781b      	ldrb	r3, [r3, #0]
    5a4e:	005a      	lsls	r2, r3, #1
    5a50:	1dbb      	adds	r3, r7, #6
    5a52:	781b      	ldrb	r3, [r3, #0]
    5a54:	4053      	eors	r3, r2
    5a56:	4a03      	ldr	r2, [pc, #12]	; (5a64 <crc7_byte+0x2c>)
    5a58:	5cd3      	ldrb	r3, [r2, r3]
}
    5a5a:	0018      	movs	r0, r3
    5a5c:	46bd      	mov	sp, r7
    5a5e:	b002      	add	sp, #8
    5a60:	bd80      	pop	{r7, pc}
    5a62:	46c0      	nop			; (mov r8, r8)
    5a64:	00012ef0 	.word	0x00012ef0

00005a68 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    5a68:	b590      	push	{r4, r7, lr}
    5a6a:	b085      	sub	sp, #20
    5a6c:	af00      	add	r7, sp, #0
    5a6e:	60b9      	str	r1, [r7, #8]
    5a70:	607a      	str	r2, [r7, #4]
    5a72:	230f      	movs	r3, #15
    5a74:	18fb      	adds	r3, r7, r3
    5a76:	1c02      	adds	r2, r0, #0
    5a78:	701a      	strb	r2, [r3, #0]
	while (len--)
    5a7a:	e00e      	b.n	5a9a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    5a7c:	68bb      	ldr	r3, [r7, #8]
    5a7e:	1c5a      	adds	r2, r3, #1
    5a80:	60ba      	str	r2, [r7, #8]
    5a82:	781a      	ldrb	r2, [r3, #0]
    5a84:	230f      	movs	r3, #15
    5a86:	18fc      	adds	r4, r7, r3
    5a88:	230f      	movs	r3, #15
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	0011      	movs	r1, r2
    5a90:	0018      	movs	r0, r3
    5a92:	4b08      	ldr	r3, [pc, #32]	; (5ab4 <crc7+0x4c>)
    5a94:	4798      	blx	r3
    5a96:	0003      	movs	r3, r0
    5a98:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    5a9a:	687b      	ldr	r3, [r7, #4]
    5a9c:	1e5a      	subs	r2, r3, #1
    5a9e:	607a      	str	r2, [r7, #4]
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d1eb      	bne.n	5a7c <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    5aa4:	230f      	movs	r3, #15
    5aa6:	18fb      	adds	r3, r7, r3
    5aa8:	781b      	ldrb	r3, [r3, #0]
}
    5aaa:	0018      	movs	r0, r3
    5aac:	46bd      	mov	sp, r7
    5aae:	b005      	add	sp, #20
    5ab0:	bd90      	pop	{r4, r7, pc}
    5ab2:	46c0      	nop			; (mov r8, r8)
    5ab4:	00005a39 	.word	0x00005a39

00005ab8 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    5ab8:	b590      	push	{r4, r7, lr}
    5aba:	b089      	sub	sp, #36	; 0x24
    5abc:	af00      	add	r7, sp, #0
    5abe:	60b9      	str	r1, [r7, #8]
    5ac0:	607a      	str	r2, [r7, #4]
    5ac2:	603b      	str	r3, [r7, #0]
    5ac4:	230f      	movs	r3, #15
    5ac6:	18fb      	adds	r3, r7, r3
    5ac8:	1c02      	adds	r2, r0, #0
    5aca:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    5acc:	231f      	movs	r3, #31
    5ace:	18fb      	adds	r3, r7, r3
    5ad0:	2205      	movs	r2, #5
    5ad2:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    5ad4:	231e      	movs	r3, #30
    5ad6:	18fb      	adds	r3, r7, r3
    5ad8:	2201      	movs	r2, #1
    5ada:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    5adc:	2314      	movs	r3, #20
    5ade:	18fb      	adds	r3, r7, r3
    5ae0:	220f      	movs	r2, #15
    5ae2:	18ba      	adds	r2, r7, r2
    5ae4:	7812      	ldrb	r2, [r2, #0]
    5ae6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    5ae8:	230f      	movs	r3, #15
    5aea:	18fb      	adds	r3, r7, r3
    5aec:	781b      	ldrb	r3, [r3, #0]
    5aee:	3bc1      	subs	r3, #193	; 0xc1
    5af0:	2b0e      	cmp	r3, #14
    5af2:	d900      	bls.n	5af6 <spi_cmd+0x3e>
    5af4:	e11b      	b.n	5d2e <spi_cmd+0x276>
    5af6:	009a      	lsls	r2, r3, #2
    5af8:	4bb6      	ldr	r3, [pc, #728]	; (5dd4 <spi_cmd+0x31c>)
    5afa:	18d3      	adds	r3, r2, r3
    5afc:	681b      	ldr	r3, [r3, #0]
    5afe:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5b00:	68bb      	ldr	r3, [r7, #8]
    5b02:	0c1b      	lsrs	r3, r3, #16
    5b04:	b2da      	uxtb	r2, r3
    5b06:	2314      	movs	r3, #20
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5b0c:	68bb      	ldr	r3, [r7, #8]
    5b0e:	0a1b      	lsrs	r3, r3, #8
    5b10:	b2da      	uxtb	r2, r3
    5b12:	2314      	movs	r3, #20
    5b14:	18fb      	adds	r3, r7, r3
    5b16:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5b18:	68bb      	ldr	r3, [r7, #8]
    5b1a:	b2da      	uxtb	r2, r3
    5b1c:	2314      	movs	r3, #20
    5b1e:	18fb      	adds	r3, r7, r3
    5b20:	70da      	strb	r2, [r3, #3]
		len = 5;
    5b22:	231f      	movs	r3, #31
    5b24:	18fb      	adds	r3, r7, r3
    5b26:	2205      	movs	r2, #5
    5b28:	701a      	strb	r2, [r3, #0]
		break;
    5b2a:	e105      	b.n	5d38 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    5b2c:	68bb      	ldr	r3, [r7, #8]
    5b2e:	0a1b      	lsrs	r3, r3, #8
    5b30:	b2da      	uxtb	r2, r3
    5b32:	2314      	movs	r3, #20
    5b34:	18fb      	adds	r3, r7, r3
    5b36:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    5b38:	2330      	movs	r3, #48	; 0x30
    5b3a:	18fb      	adds	r3, r7, r3
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	2b00      	cmp	r3, #0
    5b40:	d009      	beq.n	5b56 <spi_cmd+0x9e>
    5b42:	2314      	movs	r3, #20
    5b44:	18fb      	adds	r3, r7, r3
    5b46:	785b      	ldrb	r3, [r3, #1]
    5b48:	2280      	movs	r2, #128	; 0x80
    5b4a:	4252      	negs	r2, r2
    5b4c:	4313      	orrs	r3, r2
    5b4e:	b2da      	uxtb	r2, r3
    5b50:	2314      	movs	r3, #20
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    5b56:	68bb      	ldr	r3, [r7, #8]
    5b58:	b2da      	uxtb	r2, r3
    5b5a:	2314      	movs	r3, #20
    5b5c:	18fb      	adds	r3, r7, r3
    5b5e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    5b60:	2314      	movs	r3, #20
    5b62:	18fb      	adds	r3, r7, r3
    5b64:	2200      	movs	r2, #0
    5b66:	70da      	strb	r2, [r3, #3]
		len = 5;
    5b68:	231f      	movs	r3, #31
    5b6a:	18fb      	adds	r3, r7, r3
    5b6c:	2205      	movs	r2, #5
    5b6e:	701a      	strb	r2, [r3, #0]
		break;
    5b70:	e0e2      	b.n	5d38 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    5b72:	2314      	movs	r3, #20
    5b74:	18fb      	adds	r3, r7, r3
    5b76:	2200      	movs	r2, #0
    5b78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    5b7a:	2314      	movs	r3, #20
    5b7c:	18fb      	adds	r3, r7, r3
    5b7e:	2200      	movs	r2, #0
    5b80:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    5b82:	2314      	movs	r3, #20
    5b84:	18fb      	adds	r3, r7, r3
    5b86:	2200      	movs	r2, #0
    5b88:	70da      	strb	r2, [r3, #3]
		len = 5;
    5b8a:	231f      	movs	r3, #31
    5b8c:	18fb      	adds	r3, r7, r3
    5b8e:	2205      	movs	r2, #5
    5b90:	701a      	strb	r2, [r3, #0]
		break;
    5b92:	e0d1      	b.n	5d38 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    5b94:	2314      	movs	r3, #20
    5b96:	18fb      	adds	r3, r7, r3
    5b98:	2200      	movs	r2, #0
    5b9a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    5b9c:	2314      	movs	r3, #20
    5b9e:	18fb      	adds	r3, r7, r3
    5ba0:	2200      	movs	r2, #0
    5ba2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    5ba4:	2314      	movs	r3, #20
    5ba6:	18fb      	adds	r3, r7, r3
    5ba8:	2200      	movs	r2, #0
    5baa:	70da      	strb	r2, [r3, #3]
		len = 5;
    5bac:	231f      	movs	r3, #31
    5bae:	18fb      	adds	r3, r7, r3
    5bb0:	2205      	movs	r2, #5
    5bb2:	701a      	strb	r2, [r3, #0]
		break;
    5bb4:	e0c0      	b.n	5d38 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    5bb6:	2314      	movs	r3, #20
    5bb8:	18fb      	adds	r3, r7, r3
    5bba:	22ff      	movs	r2, #255	; 0xff
    5bbc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    5bbe:	2314      	movs	r3, #20
    5bc0:	18fb      	adds	r3, r7, r3
    5bc2:	22ff      	movs	r2, #255	; 0xff
    5bc4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    5bc6:	2314      	movs	r3, #20
    5bc8:	18fb      	adds	r3, r7, r3
    5bca:	22ff      	movs	r2, #255	; 0xff
    5bcc:	70da      	strb	r2, [r3, #3]
		len = 5;
    5bce:	231f      	movs	r3, #31
    5bd0:	18fb      	adds	r3, r7, r3
    5bd2:	2205      	movs	r2, #5
    5bd4:	701a      	strb	r2, [r3, #0]
		break;
    5bd6:	e0af      	b.n	5d38 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    5bd8:	68bb      	ldr	r3, [r7, #8]
    5bda:	0c1b      	lsrs	r3, r3, #16
    5bdc:	b2da      	uxtb	r2, r3
    5bde:	2314      	movs	r3, #20
    5be0:	18fb      	adds	r3, r7, r3
    5be2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5be4:	68bb      	ldr	r3, [r7, #8]
    5be6:	0a1b      	lsrs	r3, r3, #8
    5be8:	b2da      	uxtb	r2, r3
    5bea:	2314      	movs	r3, #20
    5bec:	18fb      	adds	r3, r7, r3
    5bee:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5bf0:	68bb      	ldr	r3, [r7, #8]
    5bf2:	b2da      	uxtb	r2, r3
    5bf4:	2314      	movs	r3, #20
    5bf6:	18fb      	adds	r3, r7, r3
    5bf8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    5bfa:	683b      	ldr	r3, [r7, #0]
    5bfc:	0a1b      	lsrs	r3, r3, #8
    5bfe:	b2da      	uxtb	r2, r3
    5c00:	2314      	movs	r3, #20
    5c02:	18fb      	adds	r3, r7, r3
    5c04:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    5c06:	683b      	ldr	r3, [r7, #0]
    5c08:	b2da      	uxtb	r2, r3
    5c0a:	2314      	movs	r3, #20
    5c0c:	18fb      	adds	r3, r7, r3
    5c0e:	715a      	strb	r2, [r3, #5]
		len = 7;
    5c10:	231f      	movs	r3, #31
    5c12:	18fb      	adds	r3, r7, r3
    5c14:	2207      	movs	r2, #7
    5c16:	701a      	strb	r2, [r3, #0]
		break;
    5c18:	e08e      	b.n	5d38 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    5c1a:	68bb      	ldr	r3, [r7, #8]
    5c1c:	0c1b      	lsrs	r3, r3, #16
    5c1e:	b2da      	uxtb	r2, r3
    5c20:	2314      	movs	r3, #20
    5c22:	18fb      	adds	r3, r7, r3
    5c24:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5c26:	68bb      	ldr	r3, [r7, #8]
    5c28:	0a1b      	lsrs	r3, r3, #8
    5c2a:	b2da      	uxtb	r2, r3
    5c2c:	2314      	movs	r3, #20
    5c2e:	18fb      	adds	r3, r7, r3
    5c30:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5c32:	68bb      	ldr	r3, [r7, #8]
    5c34:	b2da      	uxtb	r2, r3
    5c36:	2314      	movs	r3, #20
    5c38:	18fb      	adds	r3, r7, r3
    5c3a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    5c3c:	683b      	ldr	r3, [r7, #0]
    5c3e:	0c1b      	lsrs	r3, r3, #16
    5c40:	b2da      	uxtb	r2, r3
    5c42:	2314      	movs	r3, #20
    5c44:	18fb      	adds	r3, r7, r3
    5c46:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    5c48:	683b      	ldr	r3, [r7, #0]
    5c4a:	0a1b      	lsrs	r3, r3, #8
    5c4c:	b2da      	uxtb	r2, r3
    5c4e:	2314      	movs	r3, #20
    5c50:	18fb      	adds	r3, r7, r3
    5c52:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    5c54:	683b      	ldr	r3, [r7, #0]
    5c56:	b2da      	uxtb	r2, r3
    5c58:	2314      	movs	r3, #20
    5c5a:	18fb      	adds	r3, r7, r3
    5c5c:	719a      	strb	r2, [r3, #6]
		len = 8;
    5c5e:	231f      	movs	r3, #31
    5c60:	18fb      	adds	r3, r7, r3
    5c62:	2208      	movs	r2, #8
    5c64:	701a      	strb	r2, [r3, #0]
		break;
    5c66:	e067      	b.n	5d38 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    5c68:	68bb      	ldr	r3, [r7, #8]
    5c6a:	0a1b      	lsrs	r3, r3, #8
    5c6c:	b2da      	uxtb	r2, r3
    5c6e:	2314      	movs	r3, #20
    5c70:	18fb      	adds	r3, r7, r3
    5c72:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    5c74:	2330      	movs	r3, #48	; 0x30
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	781b      	ldrb	r3, [r3, #0]
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d009      	beq.n	5c92 <spi_cmd+0x1da>
    5c7e:	2314      	movs	r3, #20
    5c80:	18fb      	adds	r3, r7, r3
    5c82:	785b      	ldrb	r3, [r3, #1]
    5c84:	2280      	movs	r2, #128	; 0x80
    5c86:	4252      	negs	r2, r2
    5c88:	4313      	orrs	r3, r2
    5c8a:	b2da      	uxtb	r2, r3
    5c8c:	2314      	movs	r3, #20
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    5c92:	68bb      	ldr	r3, [r7, #8]
    5c94:	b2da      	uxtb	r2, r3
    5c96:	2314      	movs	r3, #20
    5c98:	18fb      	adds	r3, r7, r3
    5c9a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    5c9c:	687b      	ldr	r3, [r7, #4]
    5c9e:	0e1b      	lsrs	r3, r3, #24
    5ca0:	b2da      	uxtb	r2, r3
    5ca2:	2314      	movs	r3, #20
    5ca4:	18fb      	adds	r3, r7, r3
    5ca6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    5ca8:	687b      	ldr	r3, [r7, #4]
    5caa:	0c1b      	lsrs	r3, r3, #16
    5cac:	b2da      	uxtb	r2, r3
    5cae:	2314      	movs	r3, #20
    5cb0:	18fb      	adds	r3, r7, r3
    5cb2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	0a1b      	lsrs	r3, r3, #8
    5cb8:	b2da      	uxtb	r2, r3
    5cba:	2314      	movs	r3, #20
    5cbc:	18fb      	adds	r3, r7, r3
    5cbe:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	b2da      	uxtb	r2, r3
    5cc4:	2314      	movs	r3, #20
    5cc6:	18fb      	adds	r3, r7, r3
    5cc8:	719a      	strb	r2, [r3, #6]
		len = 8;
    5cca:	231f      	movs	r3, #31
    5ccc:	18fb      	adds	r3, r7, r3
    5cce:	2208      	movs	r2, #8
    5cd0:	701a      	strb	r2, [r3, #0]
		break;
    5cd2:	e031      	b.n	5d38 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    5cd4:	68bb      	ldr	r3, [r7, #8]
    5cd6:	0c1b      	lsrs	r3, r3, #16
    5cd8:	b2da      	uxtb	r2, r3
    5cda:	2314      	movs	r3, #20
    5cdc:	18fb      	adds	r3, r7, r3
    5cde:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5ce0:	68bb      	ldr	r3, [r7, #8]
    5ce2:	0a1b      	lsrs	r3, r3, #8
    5ce4:	b2da      	uxtb	r2, r3
    5ce6:	2314      	movs	r3, #20
    5ce8:	18fb      	adds	r3, r7, r3
    5cea:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    5cec:	68bb      	ldr	r3, [r7, #8]
    5cee:	b2da      	uxtb	r2, r3
    5cf0:	2314      	movs	r3, #20
    5cf2:	18fb      	adds	r3, r7, r3
    5cf4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    5cf6:	687b      	ldr	r3, [r7, #4]
    5cf8:	0e1b      	lsrs	r3, r3, #24
    5cfa:	b2da      	uxtb	r2, r3
    5cfc:	2314      	movs	r3, #20
    5cfe:	18fb      	adds	r3, r7, r3
    5d00:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    5d02:	687b      	ldr	r3, [r7, #4]
    5d04:	0c1b      	lsrs	r3, r3, #16
    5d06:	b2da      	uxtb	r2, r3
    5d08:	2314      	movs	r3, #20
    5d0a:	18fb      	adds	r3, r7, r3
    5d0c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	0a1b      	lsrs	r3, r3, #8
    5d12:	b2da      	uxtb	r2, r3
    5d14:	2314      	movs	r3, #20
    5d16:	18fb      	adds	r3, r7, r3
    5d18:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    5d1a:	687b      	ldr	r3, [r7, #4]
    5d1c:	b2da      	uxtb	r2, r3
    5d1e:	2314      	movs	r3, #20
    5d20:	18fb      	adds	r3, r7, r3
    5d22:	71da      	strb	r2, [r3, #7]
		len = 9;
    5d24:	231f      	movs	r3, #31
    5d26:	18fb      	adds	r3, r7, r3
    5d28:	2209      	movs	r2, #9
    5d2a:	701a      	strb	r2, [r3, #0]
		break;
    5d2c:	e004      	b.n	5d38 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    5d2e:	231e      	movs	r3, #30
    5d30:	18fb      	adds	r3, r7, r3
    5d32:	2200      	movs	r2, #0
    5d34:	701a      	strb	r2, [r3, #0]
		break;
    5d36:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    5d38:	231e      	movs	r3, #30
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	781b      	ldrb	r3, [r3, #0]
    5d3e:	b25b      	sxtb	r3, r3
    5d40:	2b00      	cmp	r3, #0
    5d42:	d03e      	beq.n	5dc2 <spi_cmd+0x30a>
		if (!gu8Crc_off)
    5d44:	4b24      	ldr	r3, [pc, #144]	; (5dd8 <spi_cmd+0x320>)
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	2b00      	cmp	r3, #0
    5d4a:	d115      	bne.n	5d78 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    5d4c:	231f      	movs	r3, #31
    5d4e:	18fb      	adds	r3, r7, r3
    5d50:	781b      	ldrb	r3, [r3, #0]
    5d52:	1e5c      	subs	r4, r3, #1
    5d54:	231f      	movs	r3, #31
    5d56:	18fb      	adds	r3, r7, r3
    5d58:	781b      	ldrb	r3, [r3, #0]
    5d5a:	3b01      	subs	r3, #1
    5d5c:	001a      	movs	r2, r3
    5d5e:	2314      	movs	r3, #20
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	0019      	movs	r1, r3
    5d64:	207f      	movs	r0, #127	; 0x7f
    5d66:	4b1d      	ldr	r3, [pc, #116]	; (5ddc <spi_cmd+0x324>)
    5d68:	4798      	blx	r3
    5d6a:	0003      	movs	r3, r0
    5d6c:	18db      	adds	r3, r3, r3
    5d6e:	b2da      	uxtb	r2, r3
    5d70:	2314      	movs	r3, #20
    5d72:	18fb      	adds	r3, r7, r3
    5d74:	551a      	strb	r2, [r3, r4]
    5d76:	e006      	b.n	5d86 <spi_cmd+0x2ce>
		else
			len-=1;
    5d78:	231f      	movs	r3, #31
    5d7a:	18fb      	adds	r3, r7, r3
    5d7c:	221f      	movs	r2, #31
    5d7e:	18ba      	adds	r2, r7, r2
    5d80:	7812      	ldrb	r2, [r2, #0]
    5d82:	3a01      	subs	r2, #1
    5d84:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5d86:	231f      	movs	r3, #31
    5d88:	18fb      	adds	r3, r7, r3
    5d8a:	781b      	ldrb	r3, [r3, #0]
    5d8c:	b29a      	uxth	r2, r3
    5d8e:	2314      	movs	r3, #20
    5d90:	18fb      	adds	r3, r7, r3
    5d92:	0011      	movs	r1, r2
    5d94:	0018      	movs	r0, r3
    5d96:	4b12      	ldr	r3, [pc, #72]	; (5de0 <spi_cmd+0x328>)
    5d98:	4798      	blx	r3
    5d9a:	1e03      	subs	r3, r0, #0
    5d9c:	d011      	beq.n	5dc2 <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    5d9e:	2384      	movs	r3, #132	; 0x84
    5da0:	005a      	lsls	r2, r3, #1
    5da2:	4910      	ldr	r1, [pc, #64]	; (5de4 <spi_cmd+0x32c>)
    5da4:	4b10      	ldr	r3, [pc, #64]	; (5de8 <spi_cmd+0x330>)
    5da6:	0018      	movs	r0, r3
    5da8:	4b10      	ldr	r3, [pc, #64]	; (5dec <spi_cmd+0x334>)
    5daa:	4798      	blx	r3
    5dac:	4b10      	ldr	r3, [pc, #64]	; (5df0 <spi_cmd+0x338>)
    5dae:	0018      	movs	r0, r3
    5db0:	4b10      	ldr	r3, [pc, #64]	; (5df4 <spi_cmd+0x33c>)
    5db2:	4798      	blx	r3
    5db4:	200d      	movs	r0, #13
    5db6:	4b10      	ldr	r3, [pc, #64]	; (5df8 <spi_cmd+0x340>)
    5db8:	4798      	blx	r3
			result = N_FAIL;
    5dba:	231e      	movs	r3, #30
    5dbc:	18fb      	adds	r3, r7, r3
    5dbe:	2200      	movs	r2, #0
    5dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    5dc2:	231e      	movs	r3, #30
    5dc4:	18fb      	adds	r3, r7, r3
    5dc6:	781b      	ldrb	r3, [r3, #0]
    5dc8:	b25b      	sxtb	r3, r3
}
    5dca:	0018      	movs	r0, r3
    5dcc:	46bd      	mov	sp, r7
    5dce:	b009      	add	sp, #36	; 0x24
    5dd0:	bd90      	pop	{r4, r7, pc}
    5dd2:	46c0      	nop			; (mov r8, r8)
    5dd4:	000134a8 	.word	0x000134a8
    5dd8:	200000f0 	.word	0x200000f0
    5ddc:	00005a69 	.word	0x00005a69
    5de0:	000059f5 	.word	0x000059f5
    5de4:	000134e4 	.word	0x000134e4
    5de8:	00012ff0 	.word	0x00012ff0
    5dec:	0001121d 	.word	0x0001121d
    5df0:	00013004 	.word	0x00013004
    5df4:	0001133d 	.word	0x0001133d
    5df8:	00011251 	.word	0x00011251

00005dfc <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    5dfc:	b580      	push	{r7, lr}
    5dfe:	b084      	sub	sp, #16
    5e00:	af00      	add	r7, sp, #0
    5e02:	0002      	movs	r2, r0
    5e04:	1dfb      	adds	r3, r7, #7
    5e06:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    5e08:	230f      	movs	r3, #15
    5e0a:	18fb      	adds	r3, r7, r3
    5e0c:	2201      	movs	r2, #1
    5e0e:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    5e10:	1dfb      	adds	r3, r7, #7
    5e12:	781b      	ldrb	r3, [r3, #0]
    5e14:	2bcf      	cmp	r3, #207	; 0xcf
    5e16:	d007      	beq.n	5e28 <spi_cmd_rsp+0x2c>
    5e18:	1dfb      	adds	r3, r7, #7
    5e1a:	781b      	ldrb	r3, [r3, #0]
    5e1c:	2bc5      	cmp	r3, #197	; 0xc5
    5e1e:	d003      	beq.n	5e28 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    5e20:	1dfb      	adds	r3, r7, #7
    5e22:	781b      	ldrb	r3, [r3, #0]
    5e24:	2bc6      	cmp	r3, #198	; 0xc6
    5e26:	d10c      	bne.n	5e42 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5e28:	230d      	movs	r3, #13
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	2101      	movs	r1, #1
    5e2e:	0018      	movs	r0, r3
    5e30:	4b3a      	ldr	r3, [pc, #232]	; (5f1c <spi_cmd_rsp+0x120>)
    5e32:	4798      	blx	r3
    5e34:	1e03      	subs	r3, r0, #0
    5e36:	d004      	beq.n	5e42 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    5e38:	230f      	movs	r3, #15
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	2200      	movs	r2, #0
    5e3e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    5e40:	e063      	b.n	5f0a <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    5e42:	230e      	movs	r3, #14
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	220a      	movs	r2, #10
    5e48:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5e4a:	230d      	movs	r3, #13
    5e4c:	18fb      	adds	r3, r7, r3
    5e4e:	2101      	movs	r1, #1
    5e50:	0018      	movs	r0, r3
    5e52:	4b32      	ldr	r3, [pc, #200]	; (5f1c <spi_cmd_rsp+0x120>)
    5e54:	4798      	blx	r3
    5e56:	1e03      	subs	r3, r0, #0
    5e58:	d013      	beq.n	5e82 <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5e5a:	2328      	movs	r3, #40	; 0x28
    5e5c:	33ff      	adds	r3, #255	; 0xff
    5e5e:	001a      	movs	r2, r3
    5e60:	492f      	ldr	r1, [pc, #188]	; (5f20 <spi_cmd_rsp+0x124>)
    5e62:	4b30      	ldr	r3, [pc, #192]	; (5f24 <spi_cmd_rsp+0x128>)
    5e64:	0018      	movs	r0, r3
    5e66:	4b30      	ldr	r3, [pc, #192]	; (5f28 <spi_cmd_rsp+0x12c>)
    5e68:	4798      	blx	r3
    5e6a:	4b30      	ldr	r3, [pc, #192]	; (5f2c <spi_cmd_rsp+0x130>)
    5e6c:	0018      	movs	r0, r3
    5e6e:	4b30      	ldr	r3, [pc, #192]	; (5f30 <spi_cmd_rsp+0x134>)
    5e70:	4798      	blx	r3
    5e72:	200d      	movs	r0, #13
    5e74:	4b2f      	ldr	r3, [pc, #188]	; (5f34 <spi_cmd_rsp+0x138>)
    5e76:	4798      	blx	r3
			result = N_FAIL;
    5e78:	230f      	movs	r3, #15
    5e7a:	18fb      	adds	r3, r7, r3
    5e7c:	2200      	movs	r2, #0
    5e7e:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    5e80:	e043      	b.n	5f0a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    5e82:	230d      	movs	r3, #13
    5e84:	18fb      	adds	r3, r7, r3
    5e86:	781b      	ldrb	r3, [r3, #0]
    5e88:	1dfa      	adds	r2, r7, #7
    5e8a:	7812      	ldrb	r2, [r2, #0]
    5e8c:	429a      	cmp	r2, r3
    5e8e:	d00b      	beq.n	5ea8 <spi_cmd_rsp+0xac>
    5e90:	230e      	movs	r3, #14
    5e92:	18fb      	adds	r3, r7, r3
    5e94:	781b      	ldrb	r3, [r3, #0]
    5e96:	b25b      	sxtb	r3, r3
    5e98:	b2da      	uxtb	r2, r3
    5e9a:	3a01      	subs	r2, #1
    5e9c:	b2d1      	uxtb	r1, r2
    5e9e:	220e      	movs	r2, #14
    5ea0:	18ba      	adds	r2, r7, r2
    5ea2:	7011      	strb	r1, [r2, #0]
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	dcd0      	bgt.n	5e4a <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    5ea8:	230e      	movs	r3, #14
    5eaa:	18fb      	adds	r3, r7, r3
    5eac:	220a      	movs	r2, #10
    5eae:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5eb0:	230d      	movs	r3, #13
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2101      	movs	r1, #1
    5eb6:	0018      	movs	r0, r3
    5eb8:	4b18      	ldr	r3, [pc, #96]	; (5f1c <spi_cmd_rsp+0x120>)
    5eba:	4798      	blx	r3
    5ebc:	1e03      	subs	r3, r0, #0
    5ebe:	d013      	beq.n	5ee8 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5ec0:	2336      	movs	r3, #54	; 0x36
    5ec2:	33ff      	adds	r3, #255	; 0xff
    5ec4:	001a      	movs	r2, r3
    5ec6:	4916      	ldr	r1, [pc, #88]	; (5f20 <spi_cmd_rsp+0x124>)
    5ec8:	4b16      	ldr	r3, [pc, #88]	; (5f24 <spi_cmd_rsp+0x128>)
    5eca:	0018      	movs	r0, r3
    5ecc:	4b16      	ldr	r3, [pc, #88]	; (5f28 <spi_cmd_rsp+0x12c>)
    5ece:	4798      	blx	r3
    5ed0:	4b16      	ldr	r3, [pc, #88]	; (5f2c <spi_cmd_rsp+0x130>)
    5ed2:	0018      	movs	r0, r3
    5ed4:	4b16      	ldr	r3, [pc, #88]	; (5f30 <spi_cmd_rsp+0x134>)
    5ed6:	4798      	blx	r3
    5ed8:	200d      	movs	r0, #13
    5eda:	4b16      	ldr	r3, [pc, #88]	; (5f34 <spi_cmd_rsp+0x138>)
    5edc:	4798      	blx	r3
			result = N_FAIL;
    5ede:	230f      	movs	r3, #15
    5ee0:	18fb      	adds	r3, r7, r3
    5ee2:	2200      	movs	r2, #0
    5ee4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    5ee6:	e010      	b.n	5f0a <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    5ee8:	230d      	movs	r3, #13
    5eea:	18fb      	adds	r3, r7, r3
    5eec:	781b      	ldrb	r3, [r3, #0]
    5eee:	2b00      	cmp	r3, #0
    5ef0:	d00b      	beq.n	5f0a <spi_cmd_rsp+0x10e>
    5ef2:	230e      	movs	r3, #14
    5ef4:	18fb      	adds	r3, r7, r3
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	b25b      	sxtb	r3, r3
    5efa:	b2da      	uxtb	r2, r3
    5efc:	3a01      	subs	r2, #1
    5efe:	b2d1      	uxtb	r1, r2
    5f00:	220e      	movs	r2, #14
    5f02:	18ba      	adds	r2, r7, r2
    5f04:	7011      	strb	r1, [r2, #0]
    5f06:	2b00      	cmp	r3, #0
    5f08:	dcd2      	bgt.n	5eb0 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    5f0a:	230f      	movs	r3, #15
    5f0c:	18fb      	adds	r3, r7, r3
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	b25b      	sxtb	r3, r3
}
    5f12:	0018      	movs	r0, r3
    5f14:	46bd      	mov	sp, r7
    5f16:	b004      	add	sp, #16
    5f18:	bd80      	pop	{r7, pc}
    5f1a:	46c0      	nop			; (mov r8, r8)
    5f1c:	000059b1 	.word	0x000059b1
    5f20:	000134ec 	.word	0x000134ec
    5f24:	00012ff0 	.word	0x00012ff0
    5f28:	0001121d 	.word	0x0001121d
    5f2c:	00013030 	.word	0x00013030
    5f30:	0001133d 	.word	0x0001133d
    5f34:	00011251 	.word	0x00011251

00005f38 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    5f38:	b580      	push	{r7, lr}
    5f3a:	b086      	sub	sp, #24
    5f3c:	af00      	add	r7, sp, #0
    5f3e:	6078      	str	r0, [r7, #4]
    5f40:	0008      	movs	r0, r1
    5f42:	0011      	movs	r1, r2
    5f44:	1cbb      	adds	r3, r7, #2
    5f46:	1c02      	adds	r2, r0, #0
    5f48:	801a      	strh	r2, [r3, #0]
    5f4a:	1c7b      	adds	r3, r7, #1
    5f4c:	1c0a      	adds	r2, r1, #0
    5f4e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    5f50:	2311      	movs	r3, #17
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	2201      	movs	r2, #1
    5f56:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5f58:	2314      	movs	r3, #20
    5f5a:	18fb      	adds	r3, r7, r3
    5f5c:	2200      	movs	r2, #0
    5f5e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    5f60:	1cbb      	adds	r3, r7, #2
    5f62:	881a      	ldrh	r2, [r3, #0]
    5f64:	2380      	movs	r3, #128	; 0x80
    5f66:	019b      	lsls	r3, r3, #6
    5f68:	429a      	cmp	r2, r3
    5f6a:	d805      	bhi.n	5f78 <spi_data_read+0x40>
			nbytes = sz;
    5f6c:	2312      	movs	r3, #18
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	1cba      	adds	r2, r7, #2
    5f72:	8812      	ldrh	r2, [r2, #0]
    5f74:	801a      	strh	r2, [r3, #0]
    5f76:	e004      	b.n	5f82 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    5f78:	2312      	movs	r3, #18
    5f7a:	18fb      	adds	r3, r7, r3
    5f7c:	2280      	movs	r2, #128	; 0x80
    5f7e:	0192      	lsls	r2, r2, #6
    5f80:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    5f82:	2316      	movs	r3, #22
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	220a      	movs	r2, #10
    5f88:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5f8a:	230b      	movs	r3, #11
    5f8c:	18fb      	adds	r3, r7, r3
    5f8e:	2101      	movs	r1, #1
    5f90:	0018      	movs	r0, r3
    5f92:	4b5f      	ldr	r3, [pc, #380]	; (6110 <spi_data_read+0x1d8>)
    5f94:	4798      	blx	r3
    5f96:	1e03      	subs	r3, r0, #0
    5f98:	d013      	beq.n	5fc2 <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    5f9a:	2358      	movs	r3, #88	; 0x58
    5f9c:	33ff      	adds	r3, #255	; 0xff
    5f9e:	001a      	movs	r2, r3
    5fa0:	495c      	ldr	r1, [pc, #368]	; (6114 <spi_data_read+0x1dc>)
    5fa2:	4b5d      	ldr	r3, [pc, #372]	; (6118 <spi_data_read+0x1e0>)
    5fa4:	0018      	movs	r0, r3
    5fa6:	4b5d      	ldr	r3, [pc, #372]	; (611c <spi_data_read+0x1e4>)
    5fa8:	4798      	blx	r3
    5faa:	4b5d      	ldr	r3, [pc, #372]	; (6120 <spi_data_read+0x1e8>)
    5fac:	0018      	movs	r0, r3
    5fae:	4b5d      	ldr	r3, [pc, #372]	; (6124 <spi_data_read+0x1ec>)
    5fb0:	4798      	blx	r3
    5fb2:	200d      	movs	r0, #13
    5fb4:	4b5c      	ldr	r3, [pc, #368]	; (6128 <spi_data_read+0x1f0>)
    5fb6:	4798      	blx	r3
				result = N_FAIL;
    5fb8:	2311      	movs	r3, #17
    5fba:	18fb      	adds	r3, r7, r3
    5fbc:	2200      	movs	r2, #0
    5fbe:	701a      	strb	r2, [r3, #0]
				break;
    5fc0:	e017      	b.n	5ff2 <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    5fc2:	230b      	movs	r3, #11
    5fc4:	18fb      	adds	r3, r7, r3
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	091b      	lsrs	r3, r3, #4
    5fca:	b2db      	uxtb	r3, r3
    5fcc:	001a      	movs	r2, r3
    5fce:	230f      	movs	r3, #15
    5fd0:	4013      	ands	r3, r2
    5fd2:	2b0f      	cmp	r3, #15
    5fd4:	d00c      	beq.n	5ff0 <spi_data_read+0xb8>
				break;
		} while (retry--);
    5fd6:	2316      	movs	r3, #22
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	2200      	movs	r2, #0
    5fdc:	5e9b      	ldrsh	r3, [r3, r2]
    5fde:	b29a      	uxth	r2, r3
    5fe0:	3a01      	subs	r2, #1
    5fe2:	b291      	uxth	r1, r2
    5fe4:	2216      	movs	r2, #22
    5fe6:	18ba      	adds	r2, r7, r2
    5fe8:	8011      	strh	r1, [r2, #0]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d1cd      	bne.n	5f8a <spi_data_read+0x52>
    5fee:	e000      	b.n	5ff2 <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    5ff0:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    5ff2:	2311      	movs	r3, #17
    5ff4:	18fb      	adds	r3, r7, r3
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	b25b      	sxtb	r3, r3
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d100      	bne.n	6000 <spi_data_read+0xc8>
    5ffe:	e07d      	b.n	60fc <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    6000:	2316      	movs	r3, #22
    6002:	18fb      	adds	r3, r7, r3
    6004:	2200      	movs	r2, #0
    6006:	5e9b      	ldrsh	r3, [r3, r2]
    6008:	2b00      	cmp	r3, #0
    600a:	dc18      	bgt.n	603e <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    600c:	2364      	movs	r3, #100	; 0x64
    600e:	33ff      	adds	r3, #255	; 0xff
    6010:	001a      	movs	r2, r3
    6012:	4940      	ldr	r1, [pc, #256]	; (6114 <spi_data_read+0x1dc>)
    6014:	4b40      	ldr	r3, [pc, #256]	; (6118 <spi_data_read+0x1e0>)
    6016:	0018      	movs	r0, r3
    6018:	4b40      	ldr	r3, [pc, #256]	; (611c <spi_data_read+0x1e4>)
    601a:	4798      	blx	r3
    601c:	230b      	movs	r3, #11
    601e:	18fb      	adds	r3, r7, r3
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	001a      	movs	r2, r3
    6024:	4b41      	ldr	r3, [pc, #260]	; (612c <spi_data_read+0x1f4>)
    6026:	0011      	movs	r1, r2
    6028:	0018      	movs	r0, r3
    602a:	4b3c      	ldr	r3, [pc, #240]	; (611c <spi_data_read+0x1e4>)
    602c:	4798      	blx	r3
    602e:	200d      	movs	r0, #13
    6030:	4b3d      	ldr	r3, [pc, #244]	; (6128 <spi_data_read+0x1f0>)
    6032:	4798      	blx	r3
			result = N_FAIL;
    6034:	2311      	movs	r3, #17
    6036:	18fb      	adds	r3, r7, r3
    6038:	2200      	movs	r2, #0
    603a:	701a      	strb	r2, [r3, #0]
			break;
    603c:	e05f      	b.n	60fe <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    603e:	2314      	movs	r3, #20
    6040:	18fb      	adds	r3, r7, r3
    6042:	2200      	movs	r2, #0
    6044:	5e9b      	ldrsh	r3, [r3, r2]
    6046:	687a      	ldr	r2, [r7, #4]
    6048:	18d2      	adds	r2, r2, r3
    604a:	2312      	movs	r3, #18
    604c:	18fb      	adds	r3, r7, r3
    604e:	881b      	ldrh	r3, [r3, #0]
    6050:	0019      	movs	r1, r3
    6052:	0010      	movs	r0, r2
    6054:	4b2e      	ldr	r3, [pc, #184]	; (6110 <spi_data_read+0x1d8>)
    6056:	4798      	blx	r3
    6058:	1e03      	subs	r3, r0, #0
    605a:	d012      	beq.n	6082 <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    605c:	23b6      	movs	r3, #182	; 0xb6
    605e:	005a      	lsls	r2, r3, #1
    6060:	492c      	ldr	r1, [pc, #176]	; (6114 <spi_data_read+0x1dc>)
    6062:	4b2d      	ldr	r3, [pc, #180]	; (6118 <spi_data_read+0x1e0>)
    6064:	0018      	movs	r0, r3
    6066:	4b2d      	ldr	r3, [pc, #180]	; (611c <spi_data_read+0x1e4>)
    6068:	4798      	blx	r3
    606a:	4b31      	ldr	r3, [pc, #196]	; (6130 <spi_data_read+0x1f8>)
    606c:	0018      	movs	r0, r3
    606e:	4b2d      	ldr	r3, [pc, #180]	; (6124 <spi_data_read+0x1ec>)
    6070:	4798      	blx	r3
    6072:	200d      	movs	r0, #13
    6074:	4b2c      	ldr	r3, [pc, #176]	; (6128 <spi_data_read+0x1f0>)
    6076:	4798      	blx	r3
			result = N_FAIL;
    6078:	2311      	movs	r3, #17
    607a:	18fb      	adds	r3, r7, r3
    607c:	2200      	movs	r2, #0
    607e:	701a      	strb	r2, [r3, #0]
			break;
    6080:	e03d      	b.n	60fe <spi_data_read+0x1c6>
		}
		if(!clockless)
    6082:	1c7b      	adds	r3, r7, #1
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	2b00      	cmp	r3, #0
    6088:	d11f      	bne.n	60ca <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    608a:	4b2a      	ldr	r3, [pc, #168]	; (6134 <spi_data_read+0x1fc>)
    608c:	781b      	ldrb	r3, [r3, #0]
    608e:	2b00      	cmp	r3, #0
    6090:	d11b      	bne.n	60ca <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    6092:	230c      	movs	r3, #12
    6094:	18fb      	adds	r3, r7, r3
    6096:	2102      	movs	r1, #2
    6098:	0018      	movs	r0, r3
    609a:	4b1d      	ldr	r3, [pc, #116]	; (6110 <spi_data_read+0x1d8>)
    609c:	4798      	blx	r3
    609e:	1e03      	subs	r3, r0, #0
    60a0:	d013      	beq.n	60ca <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    60a2:	2378      	movs	r3, #120	; 0x78
    60a4:	33ff      	adds	r3, #255	; 0xff
    60a6:	001a      	movs	r2, r3
    60a8:	491a      	ldr	r1, [pc, #104]	; (6114 <spi_data_read+0x1dc>)
    60aa:	4b1b      	ldr	r3, [pc, #108]	; (6118 <spi_data_read+0x1e0>)
    60ac:	0018      	movs	r0, r3
    60ae:	4b1b      	ldr	r3, [pc, #108]	; (611c <spi_data_read+0x1e4>)
    60b0:	4798      	blx	r3
    60b2:	4b21      	ldr	r3, [pc, #132]	; (6138 <spi_data_read+0x200>)
    60b4:	0018      	movs	r0, r3
    60b6:	4b1b      	ldr	r3, [pc, #108]	; (6124 <spi_data_read+0x1ec>)
    60b8:	4798      	blx	r3
    60ba:	200d      	movs	r0, #13
    60bc:	4b1a      	ldr	r3, [pc, #104]	; (6128 <spi_data_read+0x1f0>)
    60be:	4798      	blx	r3
					result = N_FAIL;
    60c0:	2311      	movs	r3, #17
    60c2:	18fb      	adds	r3, r7, r3
    60c4:	2200      	movs	r2, #0
    60c6:	701a      	strb	r2, [r3, #0]
					break;
    60c8:	e019      	b.n	60fe <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    60ca:	2314      	movs	r3, #20
    60cc:	18fb      	adds	r3, r7, r3
    60ce:	881a      	ldrh	r2, [r3, #0]
    60d0:	2312      	movs	r3, #18
    60d2:	18fb      	adds	r3, r7, r3
    60d4:	881b      	ldrh	r3, [r3, #0]
    60d6:	18d3      	adds	r3, r2, r3
    60d8:	b29a      	uxth	r2, r3
    60da:	2314      	movs	r3, #20
    60dc:	18fb      	adds	r3, r7, r3
    60de:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    60e0:	2312      	movs	r3, #18
    60e2:	18fb      	adds	r3, r7, r3
    60e4:	881a      	ldrh	r2, [r3, #0]
    60e6:	1cbb      	adds	r3, r7, #2
    60e8:	1cb9      	adds	r1, r7, #2
    60ea:	8809      	ldrh	r1, [r1, #0]
    60ec:	1a8a      	subs	r2, r1, r2
    60ee:	801a      	strh	r2, [r3, #0]

	} while (sz);
    60f0:	1cbb      	adds	r3, r7, #2
    60f2:	881b      	ldrh	r3, [r3, #0]
    60f4:	2b00      	cmp	r3, #0
    60f6:	d000      	beq.n	60fa <spi_data_read+0x1c2>
    60f8:	e732      	b.n	5f60 <spi_data_read+0x28>
    60fa:	e000      	b.n	60fe <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    60fc:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    60fe:	2311      	movs	r3, #17
    6100:	18fb      	adds	r3, r7, r3
    6102:	781b      	ldrb	r3, [r3, #0]
    6104:	b25b      	sxtb	r3, r3
}
    6106:	0018      	movs	r0, r3
    6108:	46bd      	mov	sp, r7
    610a:	b006      	add	sp, #24
    610c:	bd80      	pop	{r7, pc}
    610e:	46c0      	nop			; (mov r8, r8)
    6110:	000059b1 	.word	0x000059b1
    6114:	000134f8 	.word	0x000134f8
    6118:	00012ff0 	.word	0x00012ff0
    611c:	0001121d 	.word	0x0001121d
    6120:	00013064 	.word	0x00013064
    6124:	0001133d 	.word	0x0001133d
    6128:	00011251 	.word	0x00011251
    612c:	00013098 	.word	0x00013098
    6130:	000130c8 	.word	0x000130c8
    6134:	200000f0 	.word	0x200000f0
    6138:	000130f8 	.word	0x000130f8

0000613c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    613c:	b580      	push	{r7, lr}
    613e:	b086      	sub	sp, #24
    6140:	af00      	add	r7, sp, #0
    6142:	6078      	str	r0, [r7, #4]
    6144:	000a      	movs	r2, r1
    6146:	1cbb      	adds	r3, r7, #2
    6148:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    614a:	2313      	movs	r3, #19
    614c:	18fb      	adds	r3, r7, r3
    614e:	2201      	movs	r2, #1
    6150:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    6152:	230c      	movs	r3, #12
    6154:	18fb      	adds	r3, r7, r3
    6156:	2200      	movs	r2, #0
    6158:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    615a:	2316      	movs	r3, #22
    615c:	18fb      	adds	r3, r7, r3
    615e:	2200      	movs	r2, #0
    6160:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6162:	1cbb      	adds	r3, r7, #2
    6164:	881a      	ldrh	r2, [r3, #0]
    6166:	2380      	movs	r3, #128	; 0x80
    6168:	019b      	lsls	r3, r3, #6
    616a:	429a      	cmp	r2, r3
    616c:	d805      	bhi.n	617a <spi_data_write+0x3e>
			nbytes = sz;
    616e:	2314      	movs	r3, #20
    6170:	18fb      	adds	r3, r7, r3
    6172:	1cba      	adds	r2, r7, #2
    6174:	8812      	ldrh	r2, [r2, #0]
    6176:	801a      	strh	r2, [r3, #0]
    6178:	e004      	b.n	6184 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    617a:	2314      	movs	r3, #20
    617c:	18fb      	adds	r3, r7, r3
    617e:	2280      	movs	r2, #128	; 0x80
    6180:	0192      	lsls	r2, r2, #6
    6182:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    6184:	2311      	movs	r3, #17
    6186:	18fb      	adds	r3, r7, r3
    6188:	22f0      	movs	r2, #240	; 0xf0
    618a:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    618c:	2316      	movs	r3, #22
    618e:	18fb      	adds	r3, r7, r3
    6190:	2200      	movs	r2, #0
    6192:	5e9b      	ldrsh	r3, [r3, r2]
    6194:	2b00      	cmp	r3, #0
    6196:	d10f      	bne.n	61b8 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    6198:	1cbb      	adds	r3, r7, #2
    619a:	881a      	ldrh	r2, [r3, #0]
    619c:	2380      	movs	r3, #128	; 0x80
    619e:	019b      	lsls	r3, r3, #6
    61a0:	429a      	cmp	r2, r3
    61a2:	d804      	bhi.n	61ae <spi_data_write+0x72>
				order = 0x3;
    61a4:	2312      	movs	r3, #18
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	2203      	movs	r2, #3
    61aa:	701a      	strb	r2, [r3, #0]
    61ac:	e013      	b.n	61d6 <spi_data_write+0x9a>
			else
				order = 0x1;
    61ae:	2312      	movs	r3, #18
    61b0:	18fb      	adds	r3, r7, r3
    61b2:	2201      	movs	r2, #1
    61b4:	701a      	strb	r2, [r3, #0]
    61b6:	e00e      	b.n	61d6 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    61b8:	1cbb      	adds	r3, r7, #2
    61ba:	881a      	ldrh	r2, [r3, #0]
    61bc:	2380      	movs	r3, #128	; 0x80
    61be:	019b      	lsls	r3, r3, #6
    61c0:	429a      	cmp	r2, r3
    61c2:	d804      	bhi.n	61ce <spi_data_write+0x92>
				order = 0x3;
    61c4:	2312      	movs	r3, #18
    61c6:	18fb      	adds	r3, r7, r3
    61c8:	2203      	movs	r2, #3
    61ca:	701a      	strb	r2, [r3, #0]
    61cc:	e003      	b.n	61d6 <spi_data_write+0x9a>
			else
				order = 0x2;
    61ce:	2312      	movs	r3, #18
    61d0:	18fb      	adds	r3, r7, r3
    61d2:	2202      	movs	r2, #2
    61d4:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    61d6:	2311      	movs	r3, #17
    61d8:	18fb      	adds	r3, r7, r3
    61da:	781a      	ldrb	r2, [r3, #0]
    61dc:	2312      	movs	r3, #18
    61de:	18fb      	adds	r3, r7, r3
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	4313      	orrs	r3, r2
    61e4:	b2da      	uxtb	r2, r3
    61e6:	2311      	movs	r3, #17
    61e8:	18fb      	adds	r3, r7, r3
    61ea:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    61ec:	2311      	movs	r3, #17
    61ee:	18fb      	adds	r3, r7, r3
    61f0:	2101      	movs	r1, #1
    61f2:	0018      	movs	r0, r3
    61f4:	4b3c      	ldr	r3, [pc, #240]	; (62e8 <spi_data_write+0x1ac>)
    61f6:	4798      	blx	r3
    61f8:	1e03      	subs	r3, r0, #0
    61fa:	d012      	beq.n	6222 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    61fc:	23d4      	movs	r3, #212	; 0xd4
    61fe:	005a      	lsls	r2, r3, #1
    6200:	493a      	ldr	r1, [pc, #232]	; (62ec <spi_data_write+0x1b0>)
    6202:	4b3b      	ldr	r3, [pc, #236]	; (62f0 <spi_data_write+0x1b4>)
    6204:	0018      	movs	r0, r3
    6206:	4b3b      	ldr	r3, [pc, #236]	; (62f4 <spi_data_write+0x1b8>)
    6208:	4798      	blx	r3
    620a:	4b3b      	ldr	r3, [pc, #236]	; (62f8 <spi_data_write+0x1bc>)
    620c:	0018      	movs	r0, r3
    620e:	4b3b      	ldr	r3, [pc, #236]	; (62fc <spi_data_write+0x1c0>)
    6210:	4798      	blx	r3
    6212:	200d      	movs	r0, #13
    6214:	4b3a      	ldr	r3, [pc, #232]	; (6300 <spi_data_write+0x1c4>)
    6216:	4798      	blx	r3
			result = N_FAIL;
    6218:	2313      	movs	r3, #19
    621a:	18fb      	adds	r3, r7, r3
    621c:	2200      	movs	r2, #0
    621e:	701a      	strb	r2, [r3, #0]
			break;
    6220:	e05a      	b.n	62d8 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    6222:	2316      	movs	r3, #22
    6224:	18fb      	adds	r3, r7, r3
    6226:	2200      	movs	r2, #0
    6228:	5e9b      	ldrsh	r3, [r3, r2]
    622a:	687a      	ldr	r2, [r7, #4]
    622c:	18d2      	adds	r2, r2, r3
    622e:	2314      	movs	r3, #20
    6230:	18fb      	adds	r3, r7, r3
    6232:	881b      	ldrh	r3, [r3, #0]
    6234:	0019      	movs	r1, r3
    6236:	0010      	movs	r0, r2
    6238:	4b2b      	ldr	r3, [pc, #172]	; (62e8 <spi_data_write+0x1ac>)
    623a:	4798      	blx	r3
    623c:	1e03      	subs	r3, r0, #0
    623e:	d013      	beq.n	6268 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    6240:	23b2      	movs	r3, #178	; 0xb2
    6242:	33ff      	adds	r3, #255	; 0xff
    6244:	001a      	movs	r2, r3
    6246:	4929      	ldr	r1, [pc, #164]	; (62ec <spi_data_write+0x1b0>)
    6248:	4b29      	ldr	r3, [pc, #164]	; (62f0 <spi_data_write+0x1b4>)
    624a:	0018      	movs	r0, r3
    624c:	4b29      	ldr	r3, [pc, #164]	; (62f4 <spi_data_write+0x1b8>)
    624e:	4798      	blx	r3
    6250:	4b2c      	ldr	r3, [pc, #176]	; (6304 <spi_data_write+0x1c8>)
    6252:	0018      	movs	r0, r3
    6254:	4b29      	ldr	r3, [pc, #164]	; (62fc <spi_data_write+0x1c0>)
    6256:	4798      	blx	r3
    6258:	200d      	movs	r0, #13
    625a:	4b29      	ldr	r3, [pc, #164]	; (6300 <spi_data_write+0x1c4>)
    625c:	4798      	blx	r3
			result = N_FAIL;
    625e:	2313      	movs	r3, #19
    6260:	18fb      	adds	r3, r7, r3
    6262:	2200      	movs	r2, #0
    6264:	701a      	strb	r2, [r3, #0]
			break;
    6266:	e037      	b.n	62d8 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    6268:	4b27      	ldr	r3, [pc, #156]	; (6308 <spi_data_write+0x1cc>)
    626a:	781b      	ldrb	r3, [r3, #0]
    626c:	2b00      	cmp	r3, #0
    626e:	d11b      	bne.n	62a8 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    6270:	230c      	movs	r3, #12
    6272:	18fb      	adds	r3, r7, r3
    6274:	2102      	movs	r1, #2
    6276:	0018      	movs	r0, r3
    6278:	4b1b      	ldr	r3, [pc, #108]	; (62e8 <spi_data_write+0x1ac>)
    627a:	4798      	blx	r3
    627c:	1e03      	subs	r3, r0, #0
    627e:	d013      	beq.n	62a8 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    6280:	23bc      	movs	r3, #188	; 0xbc
    6282:	33ff      	adds	r3, #255	; 0xff
    6284:	001a      	movs	r2, r3
    6286:	4919      	ldr	r1, [pc, #100]	; (62ec <spi_data_write+0x1b0>)
    6288:	4b19      	ldr	r3, [pc, #100]	; (62f0 <spi_data_write+0x1b4>)
    628a:	0018      	movs	r0, r3
    628c:	4b19      	ldr	r3, [pc, #100]	; (62f4 <spi_data_write+0x1b8>)
    628e:	4798      	blx	r3
    6290:	4b1e      	ldr	r3, [pc, #120]	; (630c <spi_data_write+0x1d0>)
    6292:	0018      	movs	r0, r3
    6294:	4b19      	ldr	r3, [pc, #100]	; (62fc <spi_data_write+0x1c0>)
    6296:	4798      	blx	r3
    6298:	200d      	movs	r0, #13
    629a:	4b19      	ldr	r3, [pc, #100]	; (6300 <spi_data_write+0x1c4>)
    629c:	4798      	blx	r3
				result = N_FAIL;
    629e:	2313      	movs	r3, #19
    62a0:	18fb      	adds	r3, r7, r3
    62a2:	2200      	movs	r2, #0
    62a4:	701a      	strb	r2, [r3, #0]
				break;
    62a6:	e017      	b.n	62d8 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    62a8:	2316      	movs	r3, #22
    62aa:	18fb      	adds	r3, r7, r3
    62ac:	881a      	ldrh	r2, [r3, #0]
    62ae:	2314      	movs	r3, #20
    62b0:	18fb      	adds	r3, r7, r3
    62b2:	881b      	ldrh	r3, [r3, #0]
    62b4:	18d3      	adds	r3, r2, r3
    62b6:	b29a      	uxth	r2, r3
    62b8:	2316      	movs	r3, #22
    62ba:	18fb      	adds	r3, r7, r3
    62bc:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    62be:	1cbb      	adds	r3, r7, #2
    62c0:	1cb9      	adds	r1, r7, #2
    62c2:	2214      	movs	r2, #20
    62c4:	18ba      	adds	r2, r7, r2
    62c6:	8809      	ldrh	r1, [r1, #0]
    62c8:	8812      	ldrh	r2, [r2, #0]
    62ca:	1a8a      	subs	r2, r1, r2
    62cc:	801a      	strh	r2, [r3, #0]
	} while (sz);
    62ce:	1cbb      	adds	r3, r7, #2
    62d0:	881b      	ldrh	r3, [r3, #0]
    62d2:	2b00      	cmp	r3, #0
    62d4:	d000      	beq.n	62d8 <spi_data_write+0x19c>
    62d6:	e744      	b.n	6162 <spi_data_write+0x26>


	return result;
    62d8:	2313      	movs	r3, #19
    62da:	18fb      	adds	r3, r7, r3
    62dc:	781b      	ldrb	r3, [r3, #0]
    62de:	b25b      	sxtb	r3, r3
}
    62e0:	0018      	movs	r0, r3
    62e2:	46bd      	mov	sp, r7
    62e4:	b006      	add	sp, #24
    62e6:	bd80      	pop	{r7, pc}
    62e8:	000059f5 	.word	0x000059f5
    62ec:	00013508 	.word	0x00013508
    62f0:	00012ff0 	.word	0x00012ff0
    62f4:	0001121d 	.word	0x0001121d
    62f8:	0001312c 	.word	0x0001312c
    62fc:	0001133d 	.word	0x0001133d
    6300:	00011251 	.word	0x00011251
    6304:	00013164 	.word	0x00013164
    6308:	200000f0 	.word	0x200000f0
    630c:	00013198 	.word	0x00013198

00006310 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    6310:	b5b0      	push	{r4, r5, r7, lr}
    6312:	b086      	sub	sp, #24
    6314:	af02      	add	r7, sp, #8
    6316:	6078      	str	r0, [r7, #4]
    6318:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    631a:	230d      	movs	r3, #13
    631c:	18fb      	adds	r3, r7, r3
    631e:	2201      	movs	r2, #1
    6320:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    6322:	230f      	movs	r3, #15
    6324:	18fb      	adds	r3, r7, r3
    6326:	22c9      	movs	r2, #201	; 0xc9
    6328:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    632a:	230e      	movs	r3, #14
    632c:	18fb      	adds	r3, r7, r3
    632e:	2200      	movs	r2, #0
    6330:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    6332:	687b      	ldr	r3, [r7, #4]
    6334:	2b30      	cmp	r3, #48	; 0x30
    6336:	d808      	bhi.n	634a <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    6338:	230f      	movs	r3, #15
    633a:	18fb      	adds	r3, r7, r3
    633c:	22c3      	movs	r2, #195	; 0xc3
    633e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    6340:	230e      	movs	r3, #14
    6342:	18fb      	adds	r3, r7, r3
    6344:	2201      	movs	r2, #1
    6346:	701a      	strb	r2, [r3, #0]
    6348:	e007      	b.n	635a <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    634a:	230f      	movs	r3, #15
    634c:	18fb      	adds	r3, r7, r3
    634e:	22c9      	movs	r2, #201	; 0xc9
    6350:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    6352:	230e      	movs	r3, #14
    6354:	18fb      	adds	r3, r7, r3
    6356:	2200      	movs	r2, #0
    6358:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    635a:	230d      	movs	r3, #13
    635c:	18fc      	adds	r4, r7, r3
    635e:	683a      	ldr	r2, [r7, #0]
    6360:	6879      	ldr	r1, [r7, #4]
    6362:	230f      	movs	r3, #15
    6364:	18fb      	adds	r3, r7, r3
    6366:	7818      	ldrb	r0, [r3, #0]
    6368:	230e      	movs	r3, #14
    636a:	18fb      	adds	r3, r7, r3
    636c:	781b      	ldrb	r3, [r3, #0]
    636e:	9300      	str	r3, [sp, #0]
    6370:	2304      	movs	r3, #4
    6372:	4d26      	ldr	r5, [pc, #152]	; (640c <spi_write_reg+0xfc>)
    6374:	47a8      	blx	r5
    6376:	0003      	movs	r3, r0
    6378:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    637a:	230d      	movs	r3, #13
    637c:	18fb      	adds	r3, r7, r3
    637e:	781b      	ldrb	r3, [r3, #0]
    6380:	b25b      	sxtb	r3, r3
    6382:	2b01      	cmp	r3, #1
    6384:	d012      	beq.n	63ac <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    6386:	23ec      	movs	r3, #236	; 0xec
    6388:	33ff      	adds	r3, #255	; 0xff
    638a:	001a      	movs	r2, r3
    638c:	4920      	ldr	r1, [pc, #128]	; (6410 <spi_write_reg+0x100>)
    638e:	4b21      	ldr	r3, [pc, #132]	; (6414 <spi_write_reg+0x104>)
    6390:	0018      	movs	r0, r3
    6392:	4b21      	ldr	r3, [pc, #132]	; (6418 <spi_write_reg+0x108>)
    6394:	4798      	blx	r3
    6396:	687a      	ldr	r2, [r7, #4]
    6398:	4b20      	ldr	r3, [pc, #128]	; (641c <spi_write_reg+0x10c>)
    639a:	0011      	movs	r1, r2
    639c:	0018      	movs	r0, r3
    639e:	4b1e      	ldr	r3, [pc, #120]	; (6418 <spi_write_reg+0x108>)
    63a0:	4798      	blx	r3
    63a2:	200d      	movs	r0, #13
    63a4:	4b1e      	ldr	r3, [pc, #120]	; (6420 <spi_write_reg+0x110>)
    63a6:	4798      	blx	r3
		return N_FAIL;
    63a8:	2300      	movs	r3, #0
    63aa:	e02b      	b.n	6404 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    63ac:	230d      	movs	r3, #13
    63ae:	18fc      	adds	r4, r7, r3
    63b0:	230f      	movs	r3, #15
    63b2:	18fb      	adds	r3, r7, r3
    63b4:	781b      	ldrb	r3, [r3, #0]
    63b6:	0018      	movs	r0, r3
    63b8:	4b1a      	ldr	r3, [pc, #104]	; (6424 <spi_write_reg+0x114>)
    63ba:	4798      	blx	r3
    63bc:	0003      	movs	r3, r0
    63be:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    63c0:	230d      	movs	r3, #13
    63c2:	18fb      	adds	r3, r7, r3
    63c4:	781b      	ldrb	r3, [r3, #0]
    63c6:	b25b      	sxtb	r3, r3
    63c8:	2b01      	cmp	r3, #1
    63ca:	d01a      	beq.n	6402 <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    63cc:	23f2      	movs	r3, #242	; 0xf2
    63ce:	33ff      	adds	r3, #255	; 0xff
    63d0:	001a      	movs	r2, r3
    63d2:	490f      	ldr	r1, [pc, #60]	; (6410 <spi_write_reg+0x100>)
    63d4:	4b0f      	ldr	r3, [pc, #60]	; (6414 <spi_write_reg+0x104>)
    63d6:	0018      	movs	r0, r3
    63d8:	4b0f      	ldr	r3, [pc, #60]	; (6418 <spi_write_reg+0x108>)
    63da:	4798      	blx	r3
    63dc:	687a      	ldr	r2, [r7, #4]
    63de:	4b12      	ldr	r3, [pc, #72]	; (6428 <spi_write_reg+0x118>)
    63e0:	0011      	movs	r1, r2
    63e2:	0018      	movs	r0, r3
    63e4:	4b0c      	ldr	r3, [pc, #48]	; (6418 <spi_write_reg+0x108>)
    63e6:	4798      	blx	r3
    63e8:	200d      	movs	r0, #13
    63ea:	4b0d      	ldr	r3, [pc, #52]	; (6420 <spi_write_reg+0x110>)
    63ec:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    63ee:	2300      	movs	r3, #0
    63f0:	9300      	str	r3, [sp, #0]
    63f2:	2300      	movs	r3, #0
    63f4:	2200      	movs	r2, #0
    63f6:	2100      	movs	r1, #0
    63f8:	20cf      	movs	r0, #207	; 0xcf
    63fa:	4c04      	ldr	r4, [pc, #16]	; (640c <spi_write_reg+0xfc>)
    63fc:	47a0      	blx	r4
		return N_FAIL;
    63fe:	2300      	movs	r3, #0
    6400:	e000      	b.n	6404 <spi_write_reg+0xf4>
	}

	return N_OK;
    6402:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    6404:	0018      	movs	r0, r3
    6406:	46bd      	mov	sp, r7
    6408:	b004      	add	sp, #16
    640a:	bdb0      	pop	{r4, r5, r7, pc}
    640c:	00005ab9 	.word	0x00005ab9
    6410:	00013518 	.word	0x00013518
    6414:	00012ff0 	.word	0x00012ff0
    6418:	0001121d 	.word	0x0001121d
    641c:	000131d0 	.word	0x000131d0
    6420:	00011251 	.word	0x00011251
    6424:	00005dfd 	.word	0x00005dfd
    6428:	000131fc 	.word	0x000131fc

0000642c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    642c:	b5b0      	push	{r4, r5, r7, lr}
    642e:	b088      	sub	sp, #32
    6430:	af02      	add	r7, sp, #8
    6432:	60f8      	str	r0, [r7, #12]
    6434:	60b9      	str	r1, [r7, #8]
    6436:	1dbb      	adds	r3, r7, #6
    6438:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    643a:	2317      	movs	r3, #23
    643c:	18fb      	adds	r3, r7, r3
    643e:	22c7      	movs	r2, #199	; 0xc7
    6440:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    6442:	1dbb      	adds	r3, r7, #6
    6444:	881a      	ldrh	r2, [r3, #0]
    6446:	2316      	movs	r3, #22
    6448:	18fc      	adds	r4, r7, r3
    644a:	68f9      	ldr	r1, [r7, #12]
    644c:	2317      	movs	r3, #23
    644e:	18fb      	adds	r3, r7, r3
    6450:	7818      	ldrb	r0, [r3, #0]
    6452:	2300      	movs	r3, #0
    6454:	9300      	str	r3, [sp, #0]
    6456:	0013      	movs	r3, r2
    6458:	2200      	movs	r2, #0
    645a:	4d37      	ldr	r5, [pc, #220]	; (6538 <nm_spi_write+0x10c>)
    645c:	47a8      	blx	r5
    645e:	0003      	movs	r3, r0
    6460:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6462:	2316      	movs	r3, #22
    6464:	18fb      	adds	r3, r7, r3
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	b25b      	sxtb	r3, r3
    646a:	2b01      	cmp	r3, #1
    646c:	d010      	beq.n	6490 <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    646e:	4a33      	ldr	r2, [pc, #204]	; (653c <nm_spi_write+0x110>)
    6470:	4933      	ldr	r1, [pc, #204]	; (6540 <nm_spi_write+0x114>)
    6472:	4b34      	ldr	r3, [pc, #208]	; (6544 <nm_spi_write+0x118>)
    6474:	0018      	movs	r0, r3
    6476:	4b34      	ldr	r3, [pc, #208]	; (6548 <nm_spi_write+0x11c>)
    6478:	4798      	blx	r3
    647a:	68fa      	ldr	r2, [r7, #12]
    647c:	4b33      	ldr	r3, [pc, #204]	; (654c <nm_spi_write+0x120>)
    647e:	0011      	movs	r1, r2
    6480:	0018      	movs	r0, r3
    6482:	4b31      	ldr	r3, [pc, #196]	; (6548 <nm_spi_write+0x11c>)
    6484:	4798      	blx	r3
    6486:	200d      	movs	r0, #13
    6488:	4b31      	ldr	r3, [pc, #196]	; (6550 <nm_spi_write+0x124>)
    648a:	4798      	blx	r3
		return N_FAIL;
    648c:	2300      	movs	r3, #0
    648e:	e04f      	b.n	6530 <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    6490:	2316      	movs	r3, #22
    6492:	18fc      	adds	r4, r7, r3
    6494:	2317      	movs	r3, #23
    6496:	18fb      	adds	r3, r7, r3
    6498:	781b      	ldrb	r3, [r3, #0]
    649a:	0018      	movs	r0, r3
    649c:	4b2d      	ldr	r3, [pc, #180]	; (6554 <nm_spi_write+0x128>)
    649e:	4798      	blx	r3
    64a0:	0003      	movs	r3, r0
    64a2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    64a4:	2316      	movs	r3, #22
    64a6:	18fb      	adds	r3, r7, r3
    64a8:	781b      	ldrb	r3, [r3, #0]
    64aa:	b25b      	sxtb	r3, r3
    64ac:	2b01      	cmp	r3, #1
    64ae:	d018      	beq.n	64e2 <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    64b0:	4a29      	ldr	r2, [pc, #164]	; (6558 <nm_spi_write+0x12c>)
    64b2:	4923      	ldr	r1, [pc, #140]	; (6540 <nm_spi_write+0x114>)
    64b4:	4b23      	ldr	r3, [pc, #140]	; (6544 <nm_spi_write+0x118>)
    64b6:	0018      	movs	r0, r3
    64b8:	4b23      	ldr	r3, [pc, #140]	; (6548 <nm_spi_write+0x11c>)
    64ba:	4798      	blx	r3
    64bc:	68fa      	ldr	r2, [r7, #12]
    64be:	4b27      	ldr	r3, [pc, #156]	; (655c <nm_spi_write+0x130>)
    64c0:	0011      	movs	r1, r2
    64c2:	0018      	movs	r0, r3
    64c4:	4b20      	ldr	r3, [pc, #128]	; (6548 <nm_spi_write+0x11c>)
    64c6:	4798      	blx	r3
    64c8:	200d      	movs	r0, #13
    64ca:	4b21      	ldr	r3, [pc, #132]	; (6550 <nm_spi_write+0x124>)
    64cc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    64ce:	2300      	movs	r3, #0
    64d0:	9300      	str	r3, [sp, #0]
    64d2:	2300      	movs	r3, #0
    64d4:	2200      	movs	r2, #0
    64d6:	2100      	movs	r1, #0
    64d8:	20cf      	movs	r0, #207	; 0xcf
    64da:	4c17      	ldr	r4, [pc, #92]	; (6538 <nm_spi_write+0x10c>)
    64dc:	47a0      	blx	r4
		return N_FAIL;
    64de:	2300      	movs	r3, #0
    64e0:	e026      	b.n	6530 <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    64e2:	2316      	movs	r3, #22
    64e4:	18fc      	adds	r4, r7, r3
    64e6:	1dbb      	adds	r3, r7, #6
    64e8:	881a      	ldrh	r2, [r3, #0]
    64ea:	68bb      	ldr	r3, [r7, #8]
    64ec:	0011      	movs	r1, r2
    64ee:	0018      	movs	r0, r3
    64f0:	4b1b      	ldr	r3, [pc, #108]	; (6560 <nm_spi_write+0x134>)
    64f2:	4798      	blx	r3
    64f4:	0003      	movs	r3, r0
    64f6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    64f8:	2316      	movs	r3, #22
    64fa:	18fb      	adds	r3, r7, r3
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	b25b      	sxtb	r3, r3
    6500:	2b01      	cmp	r3, #1
    6502:	d014      	beq.n	652e <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    6504:	4a17      	ldr	r2, [pc, #92]	; (6564 <nm_spi_write+0x138>)
    6506:	490e      	ldr	r1, [pc, #56]	; (6540 <nm_spi_write+0x114>)
    6508:	4b0e      	ldr	r3, [pc, #56]	; (6544 <nm_spi_write+0x118>)
    650a:	0018      	movs	r0, r3
    650c:	4b0e      	ldr	r3, [pc, #56]	; (6548 <nm_spi_write+0x11c>)
    650e:	4798      	blx	r3
    6510:	4b15      	ldr	r3, [pc, #84]	; (6568 <nm_spi_write+0x13c>)
    6512:	0018      	movs	r0, r3
    6514:	4b15      	ldr	r3, [pc, #84]	; (656c <nm_spi_write+0x140>)
    6516:	4798      	blx	r3
    6518:	200d      	movs	r0, #13
    651a:	4b0d      	ldr	r3, [pc, #52]	; (6550 <nm_spi_write+0x124>)
    651c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    651e:	2300      	movs	r3, #0
    6520:	9300      	str	r3, [sp, #0]
    6522:	2300      	movs	r3, #0
    6524:	2200      	movs	r2, #0
    6526:	2100      	movs	r1, #0
    6528:	20cf      	movs	r0, #207	; 0xcf
    652a:	4c03      	ldr	r4, [pc, #12]	; (6538 <nm_spi_write+0x10c>)
    652c:	47a0      	blx	r4
	}

	return N_OK;
    652e:	2301      	movs	r3, #1
}
    6530:	0018      	movs	r0, r3
    6532:	46bd      	mov	sp, r7
    6534:	b006      	add	sp, #24
    6536:	bdb0      	pop	{r4, r5, r7, pc}
    6538:	00005ab9 	.word	0x00005ab9
    653c:	0000020f 	.word	0x0000020f
    6540:	00013528 	.word	0x00013528
    6544:	00012ff0 	.word	0x00012ff0
    6548:	0001121d 	.word	0x0001121d
    654c:	00013234 	.word	0x00013234
    6550:	00011251 	.word	0x00011251
    6554:	00005dfd 	.word	0x00005dfd
    6558:	00000215 	.word	0x00000215
    655c:	00013264 	.word	0x00013264
    6560:	0000613d 	.word	0x0000613d
    6564:	00000226 	.word	0x00000226
    6568:	0001329c 	.word	0x0001329c
    656c:	0001133d 	.word	0x0001133d

00006570 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    6570:	b5b0      	push	{r4, r5, r7, lr}
    6572:	b086      	sub	sp, #24
    6574:	af02      	add	r7, sp, #8
    6576:	6078      	str	r0, [r7, #4]
    6578:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    657a:	230d      	movs	r3, #13
    657c:	18fb      	adds	r3, r7, r3
    657e:	2201      	movs	r2, #1
    6580:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    6582:	230f      	movs	r3, #15
    6584:	18fb      	adds	r3, r7, r3
    6586:	22ca      	movs	r2, #202	; 0xca
    6588:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    658a:	230e      	movs	r3, #14
    658c:	18fb      	adds	r3, r7, r3
    658e:	2200      	movs	r2, #0
    6590:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	2bff      	cmp	r3, #255	; 0xff
    6596:	d808      	bhi.n	65aa <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    6598:	230f      	movs	r3, #15
    659a:	18fb      	adds	r3, r7, r3
    659c:	22c4      	movs	r2, #196	; 0xc4
    659e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    65a0:	230e      	movs	r3, #14
    65a2:	18fb      	adds	r3, r7, r3
    65a4:	2201      	movs	r2, #1
    65a6:	701a      	strb	r2, [r3, #0]
    65a8:	e007      	b.n	65ba <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    65aa:	230f      	movs	r3, #15
    65ac:	18fb      	adds	r3, r7, r3
    65ae:	22ca      	movs	r2, #202	; 0xca
    65b0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    65b2:	230e      	movs	r3, #14
    65b4:	18fb      	adds	r3, r7, r3
    65b6:	2200      	movs	r2, #0
    65b8:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    65ba:	230d      	movs	r3, #13
    65bc:	18fc      	adds	r4, r7, r3
    65be:	6879      	ldr	r1, [r7, #4]
    65c0:	230f      	movs	r3, #15
    65c2:	18fb      	adds	r3, r7, r3
    65c4:	7818      	ldrb	r0, [r3, #0]
    65c6:	230e      	movs	r3, #14
    65c8:	18fb      	adds	r3, r7, r3
    65ca:	781b      	ldrb	r3, [r3, #0]
    65cc:	9300      	str	r3, [sp, #0]
    65ce:	2304      	movs	r3, #4
    65d0:	2200      	movs	r2, #0
    65d2:	4d44      	ldr	r5, [pc, #272]	; (66e4 <spi_read_reg+0x174>)
    65d4:	47a8      	blx	r5
    65d6:	0003      	movs	r3, r0
    65d8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    65da:	230d      	movs	r3, #13
    65dc:	18fb      	adds	r3, r7, r3
    65de:	781b      	ldrb	r3, [r3, #0]
    65e0:	b25b      	sxtb	r3, r3
    65e2:	2b01      	cmp	r3, #1
    65e4:	d010      	beq.n	6608 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    65e6:	4a40      	ldr	r2, [pc, #256]	; (66e8 <spi_read_reg+0x178>)
    65e8:	4940      	ldr	r1, [pc, #256]	; (66ec <spi_read_reg+0x17c>)
    65ea:	4b41      	ldr	r3, [pc, #260]	; (66f0 <spi_read_reg+0x180>)
    65ec:	0018      	movs	r0, r3
    65ee:	4b41      	ldr	r3, [pc, #260]	; (66f4 <spi_read_reg+0x184>)
    65f0:	4798      	blx	r3
    65f2:	687a      	ldr	r2, [r7, #4]
    65f4:	4b40      	ldr	r3, [pc, #256]	; (66f8 <spi_read_reg+0x188>)
    65f6:	0011      	movs	r1, r2
    65f8:	0018      	movs	r0, r3
    65fa:	4b3e      	ldr	r3, [pc, #248]	; (66f4 <spi_read_reg+0x184>)
    65fc:	4798      	blx	r3
    65fe:	200d      	movs	r0, #13
    6600:	4b3e      	ldr	r3, [pc, #248]	; (66fc <spi_read_reg+0x18c>)
    6602:	4798      	blx	r3
		return N_FAIL;
    6604:	2300      	movs	r3, #0
    6606:	e068      	b.n	66da <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    6608:	230d      	movs	r3, #13
    660a:	18fc      	adds	r4, r7, r3
    660c:	230f      	movs	r3, #15
    660e:	18fb      	adds	r3, r7, r3
    6610:	781b      	ldrb	r3, [r3, #0]
    6612:	0018      	movs	r0, r3
    6614:	4b3a      	ldr	r3, [pc, #232]	; (6700 <spi_read_reg+0x190>)
    6616:	4798      	blx	r3
    6618:	0003      	movs	r3, r0
    661a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    661c:	230d      	movs	r3, #13
    661e:	18fb      	adds	r3, r7, r3
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	b25b      	sxtb	r3, r3
    6624:	2b01      	cmp	r3, #1
    6626:	d018      	beq.n	665a <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    6628:	4a36      	ldr	r2, [pc, #216]	; (6704 <spi_read_reg+0x194>)
    662a:	4930      	ldr	r1, [pc, #192]	; (66ec <spi_read_reg+0x17c>)
    662c:	4b30      	ldr	r3, [pc, #192]	; (66f0 <spi_read_reg+0x180>)
    662e:	0018      	movs	r0, r3
    6630:	4b30      	ldr	r3, [pc, #192]	; (66f4 <spi_read_reg+0x184>)
    6632:	4798      	blx	r3
    6634:	687a      	ldr	r2, [r7, #4]
    6636:	4b34      	ldr	r3, [pc, #208]	; (6708 <spi_read_reg+0x198>)
    6638:	0011      	movs	r1, r2
    663a:	0018      	movs	r0, r3
    663c:	4b2d      	ldr	r3, [pc, #180]	; (66f4 <spi_read_reg+0x184>)
    663e:	4798      	blx	r3
    6640:	200d      	movs	r0, #13
    6642:	4b2e      	ldr	r3, [pc, #184]	; (66fc <spi_read_reg+0x18c>)
    6644:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6646:	2300      	movs	r3, #0
    6648:	9300      	str	r3, [sp, #0]
    664a:	2300      	movs	r3, #0
    664c:	2200      	movs	r2, #0
    664e:	2100      	movs	r1, #0
    6650:	20cf      	movs	r0, #207	; 0xcf
    6652:	4c24      	ldr	r4, [pc, #144]	; (66e4 <spi_read_reg+0x174>)
    6654:	47a0      	blx	r4
		return N_FAIL;
    6656:	2300      	movs	r3, #0
    6658:	e03f      	b.n	66da <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    665a:	230d      	movs	r3, #13
    665c:	18fc      	adds	r4, r7, r3
    665e:	230e      	movs	r3, #14
    6660:	18fb      	adds	r3, r7, r3
    6662:	781a      	ldrb	r2, [r3, #0]
    6664:	2308      	movs	r3, #8
    6666:	18fb      	adds	r3, r7, r3
    6668:	2104      	movs	r1, #4
    666a:	0018      	movs	r0, r3
    666c:	4b27      	ldr	r3, [pc, #156]	; (670c <spi_read_reg+0x19c>)
    666e:	4798      	blx	r3
    6670:	0003      	movs	r3, r0
    6672:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6674:	230d      	movs	r3, #13
    6676:	18fb      	adds	r3, r7, r3
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	b25b      	sxtb	r3, r3
    667c:	2b01      	cmp	r3, #1
    667e:	d016      	beq.n	66ae <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    6680:	4a23      	ldr	r2, [pc, #140]	; (6710 <spi_read_reg+0x1a0>)
    6682:	491a      	ldr	r1, [pc, #104]	; (66ec <spi_read_reg+0x17c>)
    6684:	4b1a      	ldr	r3, [pc, #104]	; (66f0 <spi_read_reg+0x180>)
    6686:	0018      	movs	r0, r3
    6688:	4b1a      	ldr	r3, [pc, #104]	; (66f4 <spi_read_reg+0x184>)
    668a:	4798      	blx	r3
    668c:	4b21      	ldr	r3, [pc, #132]	; (6714 <spi_read_reg+0x1a4>)
    668e:	0018      	movs	r0, r3
    6690:	4b21      	ldr	r3, [pc, #132]	; (6718 <spi_read_reg+0x1a8>)
    6692:	4798      	blx	r3
    6694:	200d      	movs	r0, #13
    6696:	4b19      	ldr	r3, [pc, #100]	; (66fc <spi_read_reg+0x18c>)
    6698:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    669a:	2300      	movs	r3, #0
    669c:	9300      	str	r3, [sp, #0]
    669e:	2300      	movs	r3, #0
    66a0:	2200      	movs	r2, #0
    66a2:	2100      	movs	r1, #0
    66a4:	20cf      	movs	r0, #207	; 0xcf
    66a6:	4c0f      	ldr	r4, [pc, #60]	; (66e4 <spi_read_reg+0x174>)
    66a8:	47a0      	blx	r4
		return N_FAIL;
    66aa:	2300      	movs	r3, #0
    66ac:	e015      	b.n	66da <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    66ae:	2308      	movs	r3, #8
    66b0:	18fb      	adds	r3, r7, r3
    66b2:	781b      	ldrb	r3, [r3, #0]
    66b4:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    66b6:	2308      	movs	r3, #8
    66b8:	18fb      	adds	r3, r7, r3
    66ba:	785b      	ldrb	r3, [r3, #1]
    66bc:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    66be:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    66c0:	2308      	movs	r3, #8
    66c2:	18fb      	adds	r3, r7, r3
    66c4:	789b      	ldrb	r3, [r3, #2]
    66c6:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    66c8:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    66ca:	2308      	movs	r3, #8
    66cc:	18fb      	adds	r3, r7, r3
    66ce:	78db      	ldrb	r3, [r3, #3]
    66d0:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    66d2:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    66d4:	683b      	ldr	r3, [r7, #0]
    66d6:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    66d8:	2301      	movs	r3, #1
}
    66da:	0018      	movs	r0, r3
    66dc:	46bd      	mov	sp, r7
    66de:	b004      	add	sp, #16
    66e0:	bdb0      	pop	{r4, r5, r7, pc}
    66e2:	46c0      	nop			; (mov r8, r8)
    66e4:	00005ab9 	.word	0x00005ab9
    66e8:	00000245 	.word	0x00000245
    66ec:	00013538 	.word	0x00013538
    66f0:	00012ff0 	.word	0x00012ff0
    66f4:	0001121d 	.word	0x0001121d
    66f8:	000132c4 	.word	0x000132c4
    66fc:	00011251 	.word	0x00011251
    6700:	00005dfd 	.word	0x00005dfd
    6704:	0000024b 	.word	0x0000024b
    6708:	000132f0 	.word	0x000132f0
    670c:	00005f39 	.word	0x00005f39
    6710:	00000253 	.word	0x00000253
    6714:	00013324 	.word	0x00013324
    6718:	0001133d 	.word	0x0001133d

0000671c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    671c:	b5b0      	push	{r4, r5, r7, lr}
    671e:	b088      	sub	sp, #32
    6720:	af02      	add	r7, sp, #8
    6722:	60f8      	str	r0, [r7, #12]
    6724:	60b9      	str	r1, [r7, #8]
    6726:	1dbb      	adds	r3, r7, #6
    6728:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    672a:	2317      	movs	r3, #23
    672c:	18fb      	adds	r3, r7, r3
    672e:	22c8      	movs	r2, #200	; 0xc8
    6730:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    6732:	1dbb      	adds	r3, r7, #6
    6734:	881a      	ldrh	r2, [r3, #0]
    6736:	2316      	movs	r3, #22
    6738:	18fc      	adds	r4, r7, r3
    673a:	68f9      	ldr	r1, [r7, #12]
    673c:	2317      	movs	r3, #23
    673e:	18fb      	adds	r3, r7, r3
    6740:	7818      	ldrb	r0, [r3, #0]
    6742:	2300      	movs	r3, #0
    6744:	9300      	str	r3, [sp, #0]
    6746:	0013      	movs	r3, r2
    6748:	2200      	movs	r2, #0
    674a:	4d39      	ldr	r5, [pc, #228]	; (6830 <nm_spi_read+0x114>)
    674c:	47a8      	blx	r5
    674e:	0003      	movs	r3, r0
    6750:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6752:	2316      	movs	r3, #22
    6754:	18fb      	adds	r3, r7, r3
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	b25b      	sxtb	r3, r3
    675a:	2b01      	cmp	r3, #1
    675c:	d011      	beq.n	6782 <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    675e:	239d      	movs	r3, #157	; 0x9d
    6760:	009a      	lsls	r2, r3, #2
    6762:	4934      	ldr	r1, [pc, #208]	; (6834 <nm_spi_read+0x118>)
    6764:	4b34      	ldr	r3, [pc, #208]	; (6838 <nm_spi_read+0x11c>)
    6766:	0018      	movs	r0, r3
    6768:	4b34      	ldr	r3, [pc, #208]	; (683c <nm_spi_read+0x120>)
    676a:	4798      	blx	r3
    676c:	68fa      	ldr	r2, [r7, #12]
    676e:	4b34      	ldr	r3, [pc, #208]	; (6840 <nm_spi_read+0x124>)
    6770:	0011      	movs	r1, r2
    6772:	0018      	movs	r0, r3
    6774:	4b31      	ldr	r3, [pc, #196]	; (683c <nm_spi_read+0x120>)
    6776:	4798      	blx	r3
    6778:	200d      	movs	r0, #13
    677a:	4b32      	ldr	r3, [pc, #200]	; (6844 <nm_spi_read+0x128>)
    677c:	4798      	blx	r3
		return N_FAIL;
    677e:	2300      	movs	r3, #0
    6780:	e052      	b.n	6828 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    6782:	2316      	movs	r3, #22
    6784:	18fc      	adds	r4, r7, r3
    6786:	2317      	movs	r3, #23
    6788:	18fb      	adds	r3, r7, r3
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	0018      	movs	r0, r3
    678e:	4b2e      	ldr	r3, [pc, #184]	; (6848 <nm_spi_read+0x12c>)
    6790:	4798      	blx	r3
    6792:	0003      	movs	r3, r0
    6794:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    6796:	2316      	movs	r3, #22
    6798:	18fb      	adds	r3, r7, r3
    679a:	781b      	ldrb	r3, [r3, #0]
    679c:	b25b      	sxtb	r3, r3
    679e:	2b01      	cmp	r3, #1
    67a0:	d018      	beq.n	67d4 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    67a2:	4a2a      	ldr	r2, [pc, #168]	; (684c <nm_spi_read+0x130>)
    67a4:	4923      	ldr	r1, [pc, #140]	; (6834 <nm_spi_read+0x118>)
    67a6:	4b24      	ldr	r3, [pc, #144]	; (6838 <nm_spi_read+0x11c>)
    67a8:	0018      	movs	r0, r3
    67aa:	4b24      	ldr	r3, [pc, #144]	; (683c <nm_spi_read+0x120>)
    67ac:	4798      	blx	r3
    67ae:	68fa      	ldr	r2, [r7, #12]
    67b0:	4b27      	ldr	r3, [pc, #156]	; (6850 <nm_spi_read+0x134>)
    67b2:	0011      	movs	r1, r2
    67b4:	0018      	movs	r0, r3
    67b6:	4b21      	ldr	r3, [pc, #132]	; (683c <nm_spi_read+0x120>)
    67b8:	4798      	blx	r3
    67ba:	200d      	movs	r0, #13
    67bc:	4b21      	ldr	r3, [pc, #132]	; (6844 <nm_spi_read+0x128>)
    67be:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    67c0:	2300      	movs	r3, #0
    67c2:	9300      	str	r3, [sp, #0]
    67c4:	2300      	movs	r3, #0
    67c6:	2200      	movs	r2, #0
    67c8:	2100      	movs	r1, #0
    67ca:	20cf      	movs	r0, #207	; 0xcf
    67cc:	4c18      	ldr	r4, [pc, #96]	; (6830 <nm_spi_read+0x114>)
    67ce:	47a0      	blx	r4
		return N_FAIL;
    67d0:	2300      	movs	r3, #0
    67d2:	e029      	b.n	6828 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    67d4:	2316      	movs	r3, #22
    67d6:	18fc      	adds	r4, r7, r3
    67d8:	1dbb      	adds	r3, r7, #6
    67da:	8819      	ldrh	r1, [r3, #0]
    67dc:	68bb      	ldr	r3, [r7, #8]
    67de:	2200      	movs	r2, #0
    67e0:	0018      	movs	r0, r3
    67e2:	4b1c      	ldr	r3, [pc, #112]	; (6854 <nm_spi_read+0x138>)
    67e4:	4798      	blx	r3
    67e6:	0003      	movs	r3, r0
    67e8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    67ea:	2316      	movs	r3, #22
    67ec:	18fb      	adds	r3, r7, r3
    67ee:	781b      	ldrb	r3, [r3, #0]
    67f0:	b25b      	sxtb	r3, r3
    67f2:	2b01      	cmp	r3, #1
    67f4:	d017      	beq.n	6826 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    67f6:	23a1      	movs	r3, #161	; 0xa1
    67f8:	009a      	lsls	r2, r3, #2
    67fa:	490e      	ldr	r1, [pc, #56]	; (6834 <nm_spi_read+0x118>)
    67fc:	4b0e      	ldr	r3, [pc, #56]	; (6838 <nm_spi_read+0x11c>)
    67fe:	0018      	movs	r0, r3
    6800:	4b0e      	ldr	r3, [pc, #56]	; (683c <nm_spi_read+0x120>)
    6802:	4798      	blx	r3
    6804:	4b14      	ldr	r3, [pc, #80]	; (6858 <nm_spi_read+0x13c>)
    6806:	0018      	movs	r0, r3
    6808:	4b14      	ldr	r3, [pc, #80]	; (685c <nm_spi_read+0x140>)
    680a:	4798      	blx	r3
    680c:	200d      	movs	r0, #13
    680e:	4b0d      	ldr	r3, [pc, #52]	; (6844 <nm_spi_read+0x128>)
    6810:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    6812:	2300      	movs	r3, #0
    6814:	9300      	str	r3, [sp, #0]
    6816:	2300      	movs	r3, #0
    6818:	2200      	movs	r2, #0
    681a:	2100      	movs	r1, #0
    681c:	20cf      	movs	r0, #207	; 0xcf
    681e:	4c04      	ldr	r4, [pc, #16]	; (6830 <nm_spi_read+0x114>)
    6820:	47a0      	blx	r4
		return N_FAIL;
    6822:	2300      	movs	r3, #0
    6824:	e000      	b.n	6828 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    6826:	2301      	movs	r3, #1
}
    6828:	0018      	movs	r0, r3
    682a:	46bd      	mov	sp, r7
    682c:	b006      	add	sp, #24
    682e:	bdb0      	pop	{r4, r5, r7, pc}
    6830:	00005ab9 	.word	0x00005ab9
    6834:	00013548 	.word	0x00013548
    6838:	00012ff0 	.word	0x00012ff0
    683c:	0001121d 	.word	0x0001121d
    6840:	00013344 	.word	0x00013344
    6844:	00011251 	.word	0x00011251
    6848:	00005dfd 	.word	0x00005dfd
    684c:	0000027a 	.word	0x0000027a
    6850:	00013374 	.word	0x00013374
    6854:	00005f39 	.word	0x00005f39
    6858:	000133ac 	.word	0x000133ac
    685c:	0001133d 	.word	0x0001133d

00006860 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    6860:	b580      	push	{r7, lr}
    6862:	b082      	sub	sp, #8
    6864:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    6866:	4b0c      	ldr	r3, [pc, #48]	; (6898 <spi_init_pkt_sz+0x38>)
    6868:	0018      	movs	r0, r3
    686a:	4b0c      	ldr	r3, [pc, #48]	; (689c <spi_init_pkt_sz+0x3c>)
    686c:	4798      	blx	r3
    686e:	0003      	movs	r3, r0
    6870:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    6872:	687b      	ldr	r3, [r7, #4]
    6874:	2270      	movs	r2, #112	; 0x70
    6876:	4393      	bics	r3, r2
    6878:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    687a:	687b      	ldr	r3, [r7, #4]
    687c:	2250      	movs	r2, #80	; 0x50
    687e:	4313      	orrs	r3, r2
    6880:	607b      	str	r3, [r7, #4]
    6882:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    6884:	687b      	ldr	r3, [r7, #4]
    6886:	4a04      	ldr	r2, [pc, #16]	; (6898 <spi_init_pkt_sz+0x38>)
    6888:	0019      	movs	r1, r3
    688a:	0010      	movs	r0, r2
    688c:	4b04      	ldr	r3, [pc, #16]	; (68a0 <spi_init_pkt_sz+0x40>)
    688e:	4798      	blx	r3
}
    6890:	46c0      	nop			; (mov r8, r8)
    6892:	46bd      	mov	sp, r7
    6894:	b002      	add	sp, #8
    6896:	bd80      	pop	{r7, pc}
    6898:	0000e824 	.word	0x0000e824
    689c:	00006a05 	.word	0x00006a05
    68a0:	00006a79 	.word	0x00006a79

000068a4 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    68a4:	b580      	push	{r7, lr}
    68a6:	b082      	sub	sp, #8
    68a8:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    68aa:	2300      	movs	r3, #0
    68ac:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    68ae:	4b3f      	ldr	r3, [pc, #252]	; (69ac <nm_spi_init+0x108>)
    68b0:	2200      	movs	r2, #0
    68b2:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    68b4:	003b      	movs	r3, r7
    68b6:	4a3e      	ldr	r2, [pc, #248]	; (69b0 <nm_spi_init+0x10c>)
    68b8:	0019      	movs	r1, r3
    68ba:	0010      	movs	r0, r2
    68bc:	4b3d      	ldr	r3, [pc, #244]	; (69b4 <nm_spi_init+0x110>)
    68be:	4798      	blx	r3
    68c0:	1e03      	subs	r3, r0, #0
    68c2:	d127      	bne.n	6914 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    68c4:	4b39      	ldr	r3, [pc, #228]	; (69ac <nm_spi_init+0x108>)
    68c6:	2201      	movs	r2, #1
    68c8:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    68ca:	4a3b      	ldr	r2, [pc, #236]	; (69b8 <nm_spi_init+0x114>)
    68cc:	493b      	ldr	r1, [pc, #236]	; (69bc <nm_spi_init+0x118>)
    68ce:	4b3c      	ldr	r3, [pc, #240]	; (69c0 <nm_spi_init+0x11c>)
    68d0:	0018      	movs	r0, r3
    68d2:	4b3c      	ldr	r3, [pc, #240]	; (69c4 <nm_spi_init+0x120>)
    68d4:	4798      	blx	r3
    68d6:	4b3c      	ldr	r3, [pc, #240]	; (69c8 <nm_spi_init+0x124>)
    68d8:	0018      	movs	r0, r3
    68da:	4b3c      	ldr	r3, [pc, #240]	; (69cc <nm_spi_init+0x128>)
    68dc:	4798      	blx	r3
    68de:	200d      	movs	r0, #13
    68e0:	4b3b      	ldr	r3, [pc, #236]	; (69d0 <nm_spi_init+0x12c>)
    68e2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    68e4:	003b      	movs	r3, r7
    68e6:	4a32      	ldr	r2, [pc, #200]	; (69b0 <nm_spi_init+0x10c>)
    68e8:	0019      	movs	r1, r3
    68ea:	0010      	movs	r0, r2
    68ec:	4b31      	ldr	r3, [pc, #196]	; (69b4 <nm_spi_init+0x110>)
    68ee:	4798      	blx	r3
    68f0:	1e03      	subs	r3, r0, #0
    68f2:	d10f      	bne.n	6914 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    68f4:	23b2      	movs	r3, #178	; 0xb2
    68f6:	009a      	lsls	r2, r3, #2
    68f8:	4930      	ldr	r1, [pc, #192]	; (69bc <nm_spi_init+0x118>)
    68fa:	4b31      	ldr	r3, [pc, #196]	; (69c0 <nm_spi_init+0x11c>)
    68fc:	0018      	movs	r0, r3
    68fe:	4b31      	ldr	r3, [pc, #196]	; (69c4 <nm_spi_init+0x120>)
    6900:	4798      	blx	r3
    6902:	4b34      	ldr	r3, [pc, #208]	; (69d4 <nm_spi_init+0x130>)
    6904:	0018      	movs	r0, r3
    6906:	4b31      	ldr	r3, [pc, #196]	; (69cc <nm_spi_init+0x128>)
    6908:	4798      	blx	r3
    690a:	200d      	movs	r0, #13
    690c:	4b30      	ldr	r3, [pc, #192]	; (69d0 <nm_spi_init+0x12c>)
    690e:	4798      	blx	r3
			return 0;
    6910:	2300      	movs	r3, #0
    6912:	e046      	b.n	69a2 <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    6914:	4b25      	ldr	r3, [pc, #148]	; (69ac <nm_spi_init+0x108>)
    6916:	781b      	ldrb	r3, [r3, #0]
    6918:	2b00      	cmp	r3, #0
    691a:	d125      	bne.n	6968 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	220c      	movs	r2, #12
    6920:	4393      	bics	r3, r2
    6922:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    6924:	683b      	ldr	r3, [r7, #0]
    6926:	2270      	movs	r2, #112	; 0x70
    6928:	4393      	bics	r3, r2
    692a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    692c:	683b      	ldr	r3, [r7, #0]
    692e:	2250      	movs	r2, #80	; 0x50
    6930:	4313      	orrs	r3, r2
    6932:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    6934:	683b      	ldr	r3, [r7, #0]
    6936:	4a1e      	ldr	r2, [pc, #120]	; (69b0 <nm_spi_init+0x10c>)
    6938:	0019      	movs	r1, r3
    693a:	0010      	movs	r0, r2
    693c:	4b26      	ldr	r3, [pc, #152]	; (69d8 <nm_spi_init+0x134>)
    693e:	4798      	blx	r3
    6940:	1e03      	subs	r3, r0, #0
    6942:	d10e      	bne.n	6962 <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    6944:	4a25      	ldr	r2, [pc, #148]	; (69dc <nm_spi_init+0x138>)
    6946:	491d      	ldr	r1, [pc, #116]	; (69bc <nm_spi_init+0x118>)
    6948:	4b1d      	ldr	r3, [pc, #116]	; (69c0 <nm_spi_init+0x11c>)
    694a:	0018      	movs	r0, r3
    694c:	4b1d      	ldr	r3, [pc, #116]	; (69c4 <nm_spi_init+0x120>)
    694e:	4798      	blx	r3
    6950:	4b23      	ldr	r3, [pc, #140]	; (69e0 <nm_spi_init+0x13c>)
    6952:	0018      	movs	r0, r3
    6954:	4b1d      	ldr	r3, [pc, #116]	; (69cc <nm_spi_init+0x128>)
    6956:	4798      	blx	r3
    6958:	200d      	movs	r0, #13
    695a:	4b1d      	ldr	r3, [pc, #116]	; (69d0 <nm_spi_init+0x12c>)
    695c:	4798      	blx	r3
			return 0;
    695e:	2300      	movs	r3, #0
    6960:	e01f      	b.n	69a2 <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    6962:	4b12      	ldr	r3, [pc, #72]	; (69ac <nm_spi_init+0x108>)
    6964:	2201      	movs	r2, #1
    6966:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    6968:	1d3a      	adds	r2, r7, #4
    696a:	2380      	movs	r3, #128	; 0x80
    696c:	015b      	lsls	r3, r3, #5
    696e:	0011      	movs	r1, r2
    6970:	0018      	movs	r0, r3
    6972:	4b10      	ldr	r3, [pc, #64]	; (69b4 <nm_spi_init+0x110>)
    6974:	4798      	blx	r3
    6976:	1e03      	subs	r3, r0, #0
    6978:	d110      	bne.n	699c <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    697a:	23b7      	movs	r3, #183	; 0xb7
    697c:	009a      	lsls	r2, r3, #2
    697e:	490f      	ldr	r1, [pc, #60]	; (69bc <nm_spi_init+0x118>)
    6980:	4b0f      	ldr	r3, [pc, #60]	; (69c0 <nm_spi_init+0x11c>)
    6982:	0018      	movs	r0, r3
    6984:	4b0f      	ldr	r3, [pc, #60]	; (69c4 <nm_spi_init+0x120>)
    6986:	4798      	blx	r3
    6988:	4b16      	ldr	r3, [pc, #88]	; (69e4 <nm_spi_init+0x140>)
    698a:	0018      	movs	r0, r3
    698c:	4b0f      	ldr	r3, [pc, #60]	; (69cc <nm_spi_init+0x128>)
    698e:	4798      	blx	r3
    6990:	200d      	movs	r0, #13
    6992:	4b0f      	ldr	r3, [pc, #60]	; (69d0 <nm_spi_init+0x12c>)
    6994:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    6996:	2306      	movs	r3, #6
    6998:	425b      	negs	r3, r3
    699a:	e002      	b.n	69a2 <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    699c:	4b12      	ldr	r3, [pc, #72]	; (69e8 <nm_spi_init+0x144>)
    699e:	4798      	blx	r3


	return M2M_SUCCESS;
    69a0:	2300      	movs	r3, #0
}
    69a2:	0018      	movs	r0, r3
    69a4:	46bd      	mov	sp, r7
    69a6:	b002      	add	sp, #8
    69a8:	bd80      	pop	{r7, pc}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	200000f0 	.word	0x200000f0
    69b0:	0000e824 	.word	0x0000e824
    69b4:	00006571 	.word	0x00006571
    69b8:	000002c5 	.word	0x000002c5
    69bc:	00013554 	.word	0x00013554
    69c0:	00012ff0 	.word	0x00012ff0
    69c4:	0001121d 	.word	0x0001121d
    69c8:	000133d4 	.word	0x000133d4
    69cc:	0001133d 	.word	0x0001133d
    69d0:	00011251 	.word	0x00011251
    69d4:	00013424 	.word	0x00013424
    69d8:	00006311 	.word	0x00006311
    69dc:	000002d2 	.word	0x000002d2
    69e0:	00013450 	.word	0x00013450
    69e4:	00013484 	.word	0x00013484
    69e8:	00006861 	.word	0x00006861

000069ec <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    69ec:	b580      	push	{r7, lr}
    69ee:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    69f0:	4b03      	ldr	r3, [pc, #12]	; (6a00 <nm_spi_deinit+0x14>)
    69f2:	2200      	movs	r2, #0
    69f4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    69f6:	2300      	movs	r3, #0
}
    69f8:	0018      	movs	r0, r3
    69fa:	46bd      	mov	sp, r7
    69fc:	bd80      	pop	{r7, pc}
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	200000f0 	.word	0x200000f0

00006a04 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    6a04:	b580      	push	{r7, lr}
    6a06:	b084      	sub	sp, #16
    6a08:	af00      	add	r7, sp, #0
    6a0a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    6a0c:	230c      	movs	r3, #12
    6a0e:	18fa      	adds	r2, r7, r3
    6a10:	687b      	ldr	r3, [r7, #4]
    6a12:	0011      	movs	r1, r2
    6a14:	0018      	movs	r0, r3
    6a16:	4b03      	ldr	r3, [pc, #12]	; (6a24 <nm_spi_read_reg+0x20>)
    6a18:	4798      	blx	r3

	return u32Val;
    6a1a:	68fb      	ldr	r3, [r7, #12]
}
    6a1c:	0018      	movs	r0, r3
    6a1e:	46bd      	mov	sp, r7
    6a20:	b004      	add	sp, #16
    6a22:	bd80      	pop	{r7, pc}
    6a24:	00006571 	.word	0x00006571

00006a28 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    6a28:	b590      	push	{r4, r7, lr}
    6a2a:	b085      	sub	sp, #20
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	6078      	str	r0, [r7, #4]
    6a30:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    6a32:	230f      	movs	r3, #15
    6a34:	18fc      	adds	r4, r7, r3
    6a36:	683a      	ldr	r2, [r7, #0]
    6a38:	687b      	ldr	r3, [r7, #4]
    6a3a:	0011      	movs	r1, r2
    6a3c:	0018      	movs	r0, r3
    6a3e:	4b0d      	ldr	r3, [pc, #52]	; (6a74 <nm_spi_read_reg_with_ret+0x4c>)
    6a40:	4798      	blx	r3
    6a42:	0003      	movs	r3, r0
    6a44:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6a46:	230f      	movs	r3, #15
    6a48:	18fb      	adds	r3, r7, r3
    6a4a:	781b      	ldrb	r3, [r3, #0]
    6a4c:	b25b      	sxtb	r3, r3
    6a4e:	2b01      	cmp	r3, #1
    6a50:	d104      	bne.n	6a5c <nm_spi_read_reg_with_ret+0x34>
    6a52:	230f      	movs	r3, #15
    6a54:	18fb      	adds	r3, r7, r3
    6a56:	2200      	movs	r2, #0
    6a58:	701a      	strb	r2, [r3, #0]
    6a5a:	e003      	b.n	6a64 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6a5c:	230f      	movs	r3, #15
    6a5e:	18fb      	adds	r3, r7, r3
    6a60:	22fa      	movs	r2, #250	; 0xfa
    6a62:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    6a64:	230f      	movs	r3, #15
    6a66:	18fb      	adds	r3, r7, r3
    6a68:	781b      	ldrb	r3, [r3, #0]
    6a6a:	b25b      	sxtb	r3, r3
}
    6a6c:	0018      	movs	r0, r3
    6a6e:	46bd      	mov	sp, r7
    6a70:	b005      	add	sp, #20
    6a72:	bd90      	pop	{r4, r7, pc}
    6a74:	00006571 	.word	0x00006571

00006a78 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    6a78:	b590      	push	{r4, r7, lr}
    6a7a:	b085      	sub	sp, #20
    6a7c:	af00      	add	r7, sp, #0
    6a7e:	6078      	str	r0, [r7, #4]
    6a80:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    6a82:	230f      	movs	r3, #15
    6a84:	18fc      	adds	r4, r7, r3
    6a86:	683a      	ldr	r2, [r7, #0]
    6a88:	687b      	ldr	r3, [r7, #4]
    6a8a:	0011      	movs	r1, r2
    6a8c:	0018      	movs	r0, r3
    6a8e:	4b0d      	ldr	r3, [pc, #52]	; (6ac4 <nm_spi_write_reg+0x4c>)
    6a90:	4798      	blx	r3
    6a92:	0003      	movs	r3, r0
    6a94:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6a96:	230f      	movs	r3, #15
    6a98:	18fb      	adds	r3, r7, r3
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	b25b      	sxtb	r3, r3
    6a9e:	2b01      	cmp	r3, #1
    6aa0:	d104      	bne.n	6aac <nm_spi_write_reg+0x34>
    6aa2:	230f      	movs	r3, #15
    6aa4:	18fb      	adds	r3, r7, r3
    6aa6:	2200      	movs	r2, #0
    6aa8:	701a      	strb	r2, [r3, #0]
    6aaa:	e003      	b.n	6ab4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6aac:	230f      	movs	r3, #15
    6aae:	18fb      	adds	r3, r7, r3
    6ab0:	22fa      	movs	r2, #250	; 0xfa
    6ab2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    6ab4:	230f      	movs	r3, #15
    6ab6:	18fb      	adds	r3, r7, r3
    6ab8:	781b      	ldrb	r3, [r3, #0]
    6aba:	b25b      	sxtb	r3, r3
}
    6abc:	0018      	movs	r0, r3
    6abe:	46bd      	mov	sp, r7
    6ac0:	b005      	add	sp, #20
    6ac2:	bd90      	pop	{r4, r7, pc}
    6ac4:	00006311 	.word	0x00006311

00006ac8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6ac8:	b590      	push	{r4, r7, lr}
    6aca:	b087      	sub	sp, #28
    6acc:	af00      	add	r7, sp, #0
    6ace:	60f8      	str	r0, [r7, #12]
    6ad0:	60b9      	str	r1, [r7, #8]
    6ad2:	1dbb      	adds	r3, r7, #6
    6ad4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    6ad6:	2317      	movs	r3, #23
    6ad8:	18fc      	adds	r4, r7, r3
    6ada:	1dbb      	adds	r3, r7, #6
    6adc:	881a      	ldrh	r2, [r3, #0]
    6ade:	68b9      	ldr	r1, [r7, #8]
    6ae0:	68fb      	ldr	r3, [r7, #12]
    6ae2:	0018      	movs	r0, r3
    6ae4:	4b0d      	ldr	r3, [pc, #52]	; (6b1c <nm_spi_read_block+0x54>)
    6ae6:	4798      	blx	r3
    6ae8:	0003      	movs	r3, r0
    6aea:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6aec:	2317      	movs	r3, #23
    6aee:	18fb      	adds	r3, r7, r3
    6af0:	781b      	ldrb	r3, [r3, #0]
    6af2:	b25b      	sxtb	r3, r3
    6af4:	2b01      	cmp	r3, #1
    6af6:	d104      	bne.n	6b02 <nm_spi_read_block+0x3a>
    6af8:	2317      	movs	r3, #23
    6afa:	18fb      	adds	r3, r7, r3
    6afc:	2200      	movs	r2, #0
    6afe:	701a      	strb	r2, [r3, #0]
    6b00:	e003      	b.n	6b0a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6b02:	2317      	movs	r3, #23
    6b04:	18fb      	adds	r3, r7, r3
    6b06:	22fa      	movs	r2, #250	; 0xfa
    6b08:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    6b0a:	2317      	movs	r3, #23
    6b0c:	18fb      	adds	r3, r7, r3
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	b25b      	sxtb	r3, r3
}
    6b12:	0018      	movs	r0, r3
    6b14:	46bd      	mov	sp, r7
    6b16:	b007      	add	sp, #28
    6b18:	bd90      	pop	{r4, r7, pc}
    6b1a:	46c0      	nop			; (mov r8, r8)
    6b1c:	0000671d 	.word	0x0000671d

00006b20 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6b20:	b590      	push	{r4, r7, lr}
    6b22:	b087      	sub	sp, #28
    6b24:	af00      	add	r7, sp, #0
    6b26:	60f8      	str	r0, [r7, #12]
    6b28:	60b9      	str	r1, [r7, #8]
    6b2a:	1dbb      	adds	r3, r7, #6
    6b2c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    6b2e:	2317      	movs	r3, #23
    6b30:	18fc      	adds	r4, r7, r3
    6b32:	1dbb      	adds	r3, r7, #6
    6b34:	881a      	ldrh	r2, [r3, #0]
    6b36:	68b9      	ldr	r1, [r7, #8]
    6b38:	68fb      	ldr	r3, [r7, #12]
    6b3a:	0018      	movs	r0, r3
    6b3c:	4b0d      	ldr	r3, [pc, #52]	; (6b74 <nm_spi_write_block+0x54>)
    6b3e:	4798      	blx	r3
    6b40:	0003      	movs	r3, r0
    6b42:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6b44:	2317      	movs	r3, #23
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	781b      	ldrb	r3, [r3, #0]
    6b4a:	b25b      	sxtb	r3, r3
    6b4c:	2b01      	cmp	r3, #1
    6b4e:	d104      	bne.n	6b5a <nm_spi_write_block+0x3a>
    6b50:	2317      	movs	r3, #23
    6b52:	18fb      	adds	r3, r7, r3
    6b54:	2200      	movs	r2, #0
    6b56:	701a      	strb	r2, [r3, #0]
    6b58:	e003      	b.n	6b62 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6b5a:	2317      	movs	r3, #23
    6b5c:	18fb      	adds	r3, r7, r3
    6b5e:	22fa      	movs	r2, #250	; 0xfa
    6b60:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    6b62:	2317      	movs	r3, #23
    6b64:	18fb      	adds	r3, r7, r3
    6b66:	781b      	ldrb	r3, [r3, #0]
    6b68:	b25b      	sxtb	r3, r3
}
    6b6a:	0018      	movs	r0, r3
    6b6c:	46bd      	mov	sp, r7
    6b6e:	b007      	add	sp, #28
    6b70:	bd90      	pop	{r4, r7, pc}
    6b72:	46c0      	nop			; (mov r8, r8)
    6b74:	0000642d 	.word	0x0000642d

00006b78 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    6b78:	b590      	push	{r4, r7, lr}
    6b7a:	b089      	sub	sp, #36	; 0x24
    6b7c:	af00      	add	r7, sp, #0
    6b7e:	60b9      	str	r1, [r7, #8]
    6b80:	0011      	movs	r1, r2
    6b82:	607b      	str	r3, [r7, #4]
    6b84:	230f      	movs	r3, #15
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	1c02      	adds	r2, r0, #0
    6b8a:	701a      	strb	r2, [r3, #0]
    6b8c:	230e      	movs	r3, #14
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	1c0a      	adds	r2, r1, #0
    6b92:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    6b94:	2330      	movs	r3, #48	; 0x30
    6b96:	18fb      	adds	r3, r7, r3
    6b98:	881b      	ldrh	r3, [r3, #0]
    6b9a:	2b00      	cmp	r3, #0
    6b9c:	d100      	bne.n	6ba0 <Socket_ReadSocketData+0x28>
    6b9e:	e0bf      	b.n	6d20 <Socket_ReadSocketData+0x1a8>
    6ba0:	230f      	movs	r3, #15
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	2200      	movs	r2, #0
    6ba6:	569a      	ldrsb	r2, [r3, r2]
    6ba8:	4b5f      	ldr	r3, [pc, #380]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6baa:	0112      	lsls	r2, r2, #4
    6bac:	58d3      	ldr	r3, [r2, r3]
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d100      	bne.n	6bb4 <Socket_ReadSocketData+0x3c>
    6bb2:	e0b5      	b.n	6d20 <Socket_ReadSocketData+0x1a8>
    6bb4:	230f      	movs	r3, #15
    6bb6:	18fb      	adds	r3, r7, r3
    6bb8:	781b      	ldrb	r3, [r3, #0]
    6bba:	b25b      	sxtb	r3, r3
    6bbc:	4a5a      	ldr	r2, [pc, #360]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6bbe:	011b      	lsls	r3, r3, #4
    6bc0:	18d3      	adds	r3, r2, r3
    6bc2:	3304      	adds	r3, #4
    6bc4:	881b      	ldrh	r3, [r3, #0]
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d100      	bne.n	6bce <Socket_ReadSocketData+0x56>
    6bcc:	e0a8      	b.n	6d20 <Socket_ReadSocketData+0x1a8>
    6bce:	230f      	movs	r3, #15
    6bd0:	18fb      	adds	r3, r7, r3
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	b25b      	sxtb	r3, r3
    6bd6:	4a54      	ldr	r2, [pc, #336]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6bd8:	011b      	lsls	r3, r3, #4
    6bda:	18d3      	adds	r3, r2, r3
    6bdc:	330a      	adds	r3, #10
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	b2db      	uxtb	r3, r3
    6be2:	2b01      	cmp	r3, #1
    6be4:	d000      	beq.n	6be8 <Socket_ReadSocketData+0x70>
    6be6:	e09b      	b.n	6d20 <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    6be8:	687b      	ldr	r3, [r7, #4]
    6bea:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    6bec:	68bb      	ldr	r3, [r7, #8]
    6bee:	2230      	movs	r2, #48	; 0x30
    6bf0:	18ba      	adds	r2, r7, r2
    6bf2:	8812      	ldrh	r2, [r2, #0]
    6bf4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    6bf6:	2319      	movs	r3, #25
    6bf8:	18fb      	adds	r3, r7, r3
    6bfa:	2201      	movs	r2, #1
    6bfc:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    6bfe:	231a      	movs	r3, #26
    6c00:	18fb      	adds	r3, r7, r3
    6c02:	2230      	movs	r2, #48	; 0x30
    6c04:	18ba      	adds	r2, r7, r2
    6c06:	8812      	ldrh	r2, [r2, #0]
    6c08:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    6c0a:	230f      	movs	r3, #15
    6c0c:	18fb      	adds	r3, r7, r3
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	b25b      	sxtb	r3, r3
    6c12:	4a45      	ldr	r2, [pc, #276]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6c14:	011b      	lsls	r3, r3, #4
    6c16:	18d3      	adds	r3, r2, r3
    6c18:	3304      	adds	r3, #4
    6c1a:	881b      	ldrh	r3, [r3, #0]
    6c1c:	b29b      	uxth	r3, r3
    6c1e:	221a      	movs	r2, #26
    6c20:	18ba      	adds	r2, r7, r2
    6c22:	8812      	ldrh	r2, [r2, #0]
    6c24:	1ad3      	subs	r3, r2, r3
    6c26:	b29a      	uxth	r2, r3
    6c28:	2316      	movs	r3, #22
    6c2a:	18fb      	adds	r3, r7, r3
    6c2c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    6c2e:	2316      	movs	r3, #22
    6c30:	18fb      	adds	r3, r7, r3
    6c32:	2200      	movs	r2, #0
    6c34:	5e9b      	ldrsh	r3, [r3, r2]
    6c36:	2b00      	cmp	r3, #0
    6c38:	dd0f      	ble.n	6c5a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    6c3a:	2319      	movs	r3, #25
    6c3c:	18fb      	adds	r3, r7, r3
    6c3e:	2200      	movs	r2, #0
    6c40:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    6c42:	230f      	movs	r3, #15
    6c44:	18fb      	adds	r3, r7, r3
    6c46:	2200      	movs	r2, #0
    6c48:	569a      	ldrsb	r2, [r3, r2]
    6c4a:	231a      	movs	r3, #26
    6c4c:	18fb      	adds	r3, r7, r3
    6c4e:	4936      	ldr	r1, [pc, #216]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6c50:	0112      	lsls	r2, r2, #4
    6c52:	188a      	adds	r2, r1, r2
    6c54:	3204      	adds	r2, #4
    6c56:	8812      	ldrh	r2, [r2, #0]
    6c58:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    6c5a:	230f      	movs	r3, #15
    6c5c:	18fb      	adds	r3, r7, r3
    6c5e:	2200      	movs	r2, #0
    6c60:	569a      	ldrsb	r2, [r3, r2]
    6c62:	4b31      	ldr	r3, [pc, #196]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6c64:	0112      	lsls	r2, r2, #4
    6c66:	58d1      	ldr	r1, [r2, r3]
    6c68:	2319      	movs	r3, #25
    6c6a:	18fb      	adds	r3, r7, r3
    6c6c:	781c      	ldrb	r4, [r3, #0]
    6c6e:	231a      	movs	r3, #26
    6c70:	18fb      	adds	r3, r7, r3
    6c72:	881a      	ldrh	r2, [r3, #0]
    6c74:	69f8      	ldr	r0, [r7, #28]
    6c76:	0023      	movs	r3, r4
    6c78:	4c2c      	ldr	r4, [pc, #176]	; (6d2c <Socket_ReadSocketData+0x1b4>)
    6c7a:	47a0      	blx	r4
    6c7c:	1e03      	subs	r3, r0, #0
    6c7e:	d138      	bne.n	6cf2 <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    6c80:	230f      	movs	r3, #15
    6c82:	18fb      	adds	r3, r7, r3
    6c84:	2200      	movs	r2, #0
    6c86:	569a      	ldrsb	r2, [r3, r2]
    6c88:	4b27      	ldr	r3, [pc, #156]	; (6d28 <Socket_ReadSocketData+0x1b0>)
    6c8a:	0112      	lsls	r2, r2, #4
    6c8c:	58d2      	ldr	r2, [r2, r3]
    6c8e:	68bb      	ldr	r3, [r7, #8]
    6c90:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    6c92:	231a      	movs	r3, #26
    6c94:	18fb      	adds	r3, r7, r3
    6c96:	2200      	movs	r2, #0
    6c98:	5e9a      	ldrsh	r2, [r3, r2]
    6c9a:	68bb      	ldr	r3, [r7, #8]
    6c9c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    6c9e:	68bb      	ldr	r3, [r7, #8]
    6ca0:	88da      	ldrh	r2, [r3, #6]
    6ca2:	231a      	movs	r3, #26
    6ca4:	18fb      	adds	r3, r7, r3
    6ca6:	881b      	ldrh	r3, [r3, #0]
    6ca8:	1ad3      	subs	r3, r2, r3
    6caa:	b29a      	uxth	r2, r3
    6cac:	68bb      	ldr	r3, [r7, #8]
    6cae:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    6cb0:	4b1f      	ldr	r3, [pc, #124]	; (6d30 <Socket_ReadSocketData+0x1b8>)
    6cb2:	681b      	ldr	r3, [r3, #0]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d00b      	beq.n	6cd0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    6cb8:	4b1d      	ldr	r3, [pc, #116]	; (6d30 <Socket_ReadSocketData+0x1b8>)
    6cba:	681b      	ldr	r3, [r3, #0]
    6cbc:	68bc      	ldr	r4, [r7, #8]
    6cbe:	220e      	movs	r2, #14
    6cc0:	18ba      	adds	r2, r7, r2
    6cc2:	7811      	ldrb	r1, [r2, #0]
    6cc4:	220f      	movs	r2, #15
    6cc6:	18ba      	adds	r2, r7, r2
    6cc8:	2000      	movs	r0, #0
    6cca:	5610      	ldrsb	r0, [r2, r0]
    6ccc:	0022      	movs	r2, r4
    6cce:	4798      	blx	r3

				u16ReadCount -= u16Read;
    6cd0:	2330      	movs	r3, #48	; 0x30
    6cd2:	18f9      	adds	r1, r7, r3
    6cd4:	2330      	movs	r3, #48	; 0x30
    6cd6:	18fa      	adds	r2, r7, r3
    6cd8:	231a      	movs	r3, #26
    6cda:	18fb      	adds	r3, r7, r3
    6cdc:	8812      	ldrh	r2, [r2, #0]
    6cde:	881b      	ldrh	r3, [r3, #0]
    6ce0:	1ad3      	subs	r3, r2, r3
    6ce2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    6ce4:	231a      	movs	r3, #26
    6ce6:	18fb      	adds	r3, r7, r3
    6ce8:	881b      	ldrh	r3, [r3, #0]
    6cea:	69fa      	ldr	r2, [r7, #28]
    6cec:	18d3      	adds	r3, r2, r3
    6cee:	61fb      	str	r3, [r7, #28]
    6cf0:	e010      	b.n	6d14 <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    6cf2:	4b10      	ldr	r3, [pc, #64]	; (6d34 <Socket_ReadSocketData+0x1bc>)
    6cf4:	0018      	movs	r0, r3
    6cf6:	4b10      	ldr	r3, [pc, #64]	; (6d38 <Socket_ReadSocketData+0x1c0>)
    6cf8:	4798      	blx	r3
    6cfa:	2330      	movs	r3, #48	; 0x30
    6cfc:	18fb      	adds	r3, r7, r3
    6cfe:	881a      	ldrh	r2, [r3, #0]
    6d00:	4b0e      	ldr	r3, [pc, #56]	; (6d3c <Socket_ReadSocketData+0x1c4>)
    6d02:	0011      	movs	r1, r2
    6d04:	0018      	movs	r0, r3
    6d06:	4b0c      	ldr	r3, [pc, #48]	; (6d38 <Socket_ReadSocketData+0x1c0>)
    6d08:	4798      	blx	r3
    6d0a:	200d      	movs	r0, #13
    6d0c:	4b0c      	ldr	r3, [pc, #48]	; (6d40 <Socket_ReadSocketData+0x1c8>)
    6d0e:	4798      	blx	r3
				break;
    6d10:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    6d12:	e005      	b.n	6d20 <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    6d14:	2330      	movs	r3, #48	; 0x30
    6d16:	18fb      	adds	r3, r7, r3
    6d18:	881b      	ldrh	r3, [r3, #0]
    6d1a:	2b00      	cmp	r3, #0
    6d1c:	d000      	beq.n	6d20 <Socket_ReadSocketData+0x1a8>
    6d1e:	e76a      	b.n	6bf6 <Socket_ReadSocketData+0x7e>
	}
}
    6d20:	46c0      	nop			; (mov r8, r8)
    6d22:	46bd      	mov	sp, r7
    6d24:	b009      	add	sp, #36	; 0x24
    6d26:	bd90      	pop	{r4, r7, pc}
    6d28:	20004690 	.word	0x20004690
    6d2c:	00003c2d 	.word	0x00003c2d
    6d30:	20004740 	.word	0x20004740
    6d34:	00013560 	.word	0x00013560
    6d38:	0001121d 	.word	0x0001121d
    6d3c:	0001356c 	.word	0x0001356c
    6d40:	00011251 	.word	0x00011251

00006d44 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    6d44:	b590      	push	{r4, r7, lr}
    6d46:	b0bb      	sub	sp, #236	; 0xec
    6d48:	af02      	add	r7, sp, #8
    6d4a:	603a      	str	r2, [r7, #0]
    6d4c:	1dfb      	adds	r3, r7, #7
    6d4e:	1c02      	adds	r2, r0, #0
    6d50:	701a      	strb	r2, [r3, #0]
    6d52:	1d3b      	adds	r3, r7, #4
    6d54:	1c0a      	adds	r2, r1, #0
    6d56:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    6d58:	1dfb      	adds	r3, r7, #7
    6d5a:	781b      	ldrb	r3, [r3, #0]
    6d5c:	2b41      	cmp	r3, #65	; 0x41
    6d5e:	d120      	bne.n	6da2 <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    6d60:	23cc      	movs	r3, #204	; 0xcc
    6d62:	18f9      	adds	r1, r7, r3
    6d64:	6838      	ldr	r0, [r7, #0]
    6d66:	2300      	movs	r3, #0
    6d68:	2204      	movs	r2, #4
    6d6a:	4c8d      	ldr	r4, [pc, #564]	; (6fa0 <m2m_ip_cb+0x25c>)
    6d6c:	47a0      	blx	r4
    6d6e:	1e03      	subs	r3, r0, #0
    6d70:	d000      	beq.n	6d74 <m2m_ip_cb+0x30>
    6d72:	e264      	b.n	723e <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    6d74:	23cc      	movs	r3, #204	; 0xcc
    6d76:	18fb      	adds	r3, r7, r3
    6d78:	2201      	movs	r2, #1
    6d7a:	569a      	ldrsb	r2, [r3, r2]
    6d7c:	23c8      	movs	r3, #200	; 0xc8
    6d7e:	18fb      	adds	r3, r7, r3
    6d80:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6d82:	4b88      	ldr	r3, [pc, #544]	; (6fa4 <m2m_ip_cb+0x260>)
    6d84:	681b      	ldr	r3, [r3, #0]
    6d86:	2b00      	cmp	r3, #0
    6d88:	d100      	bne.n	6d8c <m2m_ip_cb+0x48>
    6d8a:	e258      	b.n	723e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    6d8c:	4b85      	ldr	r3, [pc, #532]	; (6fa4 <m2m_ip_cb+0x260>)
    6d8e:	681b      	ldr	r3, [r3, #0]
    6d90:	22cc      	movs	r2, #204	; 0xcc
    6d92:	18ba      	adds	r2, r7, r2
    6d94:	2000      	movs	r0, #0
    6d96:	5610      	ldrsb	r0, [r2, r0]
    6d98:	22c8      	movs	r2, #200	; 0xc8
    6d9a:	18ba      	adds	r2, r7, r2
    6d9c:	2101      	movs	r1, #1
    6d9e:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6da0:	e24d      	b.n	723e <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    6da2:	1dfb      	adds	r3, r7, #7
    6da4:	781b      	ldrb	r3, [r3, #0]
    6da6:	2b42      	cmp	r3, #66	; 0x42
    6da8:	d120      	bne.n	6dec <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    6daa:	23c4      	movs	r3, #196	; 0xc4
    6dac:	18f9      	adds	r1, r7, r3
    6dae:	6838      	ldr	r0, [r7, #0]
    6db0:	2300      	movs	r3, #0
    6db2:	2204      	movs	r2, #4
    6db4:	4c7a      	ldr	r4, [pc, #488]	; (6fa0 <m2m_ip_cb+0x25c>)
    6db6:	47a0      	blx	r4
    6db8:	1e03      	subs	r3, r0, #0
    6dba:	d000      	beq.n	6dbe <m2m_ip_cb+0x7a>
    6dbc:	e23f      	b.n	723e <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    6dbe:	23c4      	movs	r3, #196	; 0xc4
    6dc0:	18fb      	adds	r3, r7, r3
    6dc2:	2201      	movs	r2, #1
    6dc4:	569a      	ldrsb	r2, [r3, r2]
    6dc6:	23c0      	movs	r3, #192	; 0xc0
    6dc8:	18fb      	adds	r3, r7, r3
    6dca:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6dcc:	4b75      	ldr	r3, [pc, #468]	; (6fa4 <m2m_ip_cb+0x260>)
    6dce:	681b      	ldr	r3, [r3, #0]
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d100      	bne.n	6dd6 <m2m_ip_cb+0x92>
    6dd4:	e233      	b.n	723e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    6dd6:	4b73      	ldr	r3, [pc, #460]	; (6fa4 <m2m_ip_cb+0x260>)
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	22c4      	movs	r2, #196	; 0xc4
    6ddc:	18ba      	adds	r2, r7, r2
    6dde:	2000      	movs	r0, #0
    6de0:	5610      	ldrsb	r0, [r2, r0]
    6de2:	22c0      	movs	r2, #192	; 0xc0
    6de4:	18ba      	adds	r2, r7, r2
    6de6:	2102      	movs	r1, #2
    6de8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6dea:	e228      	b.n	723e <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    6dec:	1dfb      	adds	r3, r7, #7
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	2b43      	cmp	r3, #67	; 0x43
    6df2:	d16b      	bne.n	6ecc <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    6df4:	23b4      	movs	r3, #180	; 0xb4
    6df6:	18f9      	adds	r1, r7, r3
    6df8:	6838      	ldr	r0, [r7, #0]
    6dfa:	2300      	movs	r3, #0
    6dfc:	220c      	movs	r2, #12
    6dfe:	4c68      	ldr	r4, [pc, #416]	; (6fa0 <m2m_ip_cb+0x25c>)
    6e00:	47a0      	blx	r4
    6e02:	1e03      	subs	r3, r0, #0
    6e04:	d000      	beq.n	6e08 <m2m_ip_cb+0xc4>
    6e06:	e21a      	b.n	723e <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    6e08:	23b4      	movs	r3, #180	; 0xb4
    6e0a:	18fb      	adds	r3, r7, r3
    6e0c:	7a5b      	ldrb	r3, [r3, #9]
    6e0e:	b25b      	sxtb	r3, r3
    6e10:	2b00      	cmp	r3, #0
    6e12:	db34      	blt.n	6e7e <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    6e14:	23b4      	movs	r3, #180	; 0xb4
    6e16:	18fb      	adds	r3, r7, r3
    6e18:	7a5b      	ldrb	r3, [r3, #9]
    6e1a:	b25b      	sxtb	r3, r3
    6e1c:	4a62      	ldr	r2, [pc, #392]	; (6fa8 <m2m_ip_cb+0x264>)
    6e1e:	011b      	lsls	r3, r3, #4
    6e20:	18d3      	adds	r3, r2, r3
    6e22:	330b      	adds	r3, #11
    6e24:	2200      	movs	r2, #0
    6e26:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    6e28:	23b4      	movs	r3, #180	; 0xb4
    6e2a:	18fb      	adds	r3, r7, r3
    6e2c:	7a5b      	ldrb	r3, [r3, #9]
    6e2e:	b25b      	sxtb	r3, r3
    6e30:	4a5d      	ldr	r2, [pc, #372]	; (6fa8 <m2m_ip_cb+0x264>)
    6e32:	011b      	lsls	r3, r3, #4
    6e34:	18d3      	adds	r3, r2, r3
    6e36:	330a      	adds	r3, #10
    6e38:	2201      	movs	r2, #1
    6e3a:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    6e3c:	4b5b      	ldr	r3, [pc, #364]	; (6fac <m2m_ip_cb+0x268>)
    6e3e:	881b      	ldrh	r3, [r3, #0]
    6e40:	b29b      	uxth	r3, r3
    6e42:	3301      	adds	r3, #1
    6e44:	b29a      	uxth	r2, r3
    6e46:	4b59      	ldr	r3, [pc, #356]	; (6fac <m2m_ip_cb+0x268>)
    6e48:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    6e4a:	4b58      	ldr	r3, [pc, #352]	; (6fac <m2m_ip_cb+0x268>)
    6e4c:	881b      	ldrh	r3, [r3, #0]
    6e4e:	b29b      	uxth	r3, r3
    6e50:	2b00      	cmp	r3, #0
    6e52:	d106      	bne.n	6e62 <m2m_ip_cb+0x11e>
					++gu16SessionID;
    6e54:	4b55      	ldr	r3, [pc, #340]	; (6fac <m2m_ip_cb+0x268>)
    6e56:	881b      	ldrh	r3, [r3, #0]
    6e58:	b29b      	uxth	r3, r3
    6e5a:	3301      	adds	r3, #1
    6e5c:	b29a      	uxth	r2, r3
    6e5e:	4b53      	ldr	r3, [pc, #332]	; (6fac <m2m_ip_cb+0x268>)
    6e60:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    6e62:	23b4      	movs	r3, #180	; 0xb4
    6e64:	18fb      	adds	r3, r7, r3
    6e66:	7a5b      	ldrb	r3, [r3, #9]
    6e68:	b25b      	sxtb	r3, r3
    6e6a:	0018      	movs	r0, r3
    6e6c:	4b4f      	ldr	r3, [pc, #316]	; (6fac <m2m_ip_cb+0x268>)
    6e6e:	881b      	ldrh	r3, [r3, #0]
    6e70:	b299      	uxth	r1, r3
    6e72:	4a4d      	ldr	r2, [pc, #308]	; (6fa8 <m2m_ip_cb+0x264>)
    6e74:	0103      	lsls	r3, r0, #4
    6e76:	18d3      	adds	r3, r2, r3
    6e78:	3306      	adds	r3, #6
    6e7a:	1c0a      	adds	r2, r1, #0
    6e7c:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    6e7e:	23b4      	movs	r3, #180	; 0xb4
    6e80:	18fb      	adds	r3, r7, r3
    6e82:	2209      	movs	r2, #9
    6e84:	569a      	ldrsb	r2, [r3, r2]
    6e86:	23a0      	movs	r3, #160	; 0xa0
    6e88:	18fb      	adds	r3, r7, r3
    6e8a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    6e8c:	23a0      	movs	r3, #160	; 0xa0
    6e8e:	18fb      	adds	r3, r7, r3
    6e90:	2202      	movs	r2, #2
    6e92:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    6e94:	23b4      	movs	r3, #180	; 0xb4
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	885a      	ldrh	r2, [r3, #2]
    6e9a:	23a0      	movs	r3, #160	; 0xa0
    6e9c:	18fb      	adds	r3, r7, r3
    6e9e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    6ea0:	23b4      	movs	r3, #180	; 0xb4
    6ea2:	18fb      	adds	r3, r7, r3
    6ea4:	685a      	ldr	r2, [r3, #4]
    6ea6:	23a0      	movs	r3, #160	; 0xa0
    6ea8:	18fb      	adds	r3, r7, r3
    6eaa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    6eac:	4b3d      	ldr	r3, [pc, #244]	; (6fa4 <m2m_ip_cb+0x260>)
    6eae:	681b      	ldr	r3, [r3, #0]
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d100      	bne.n	6eb6 <m2m_ip_cb+0x172>
    6eb4:	e1c3      	b.n	723e <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    6eb6:	4b3b      	ldr	r3, [pc, #236]	; (6fa4 <m2m_ip_cb+0x260>)
    6eb8:	681b      	ldr	r3, [r3, #0]
    6eba:	22b4      	movs	r2, #180	; 0xb4
    6ebc:	18ba      	adds	r2, r7, r2
    6ebe:	2008      	movs	r0, #8
    6ec0:	5610      	ldrsb	r0, [r2, r0]
    6ec2:	22a0      	movs	r2, #160	; 0xa0
    6ec4:	18ba      	adds	r2, r7, r2
    6ec6:	2104      	movs	r1, #4
    6ec8:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6eca:	e1b8      	b.n	723e <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    6ecc:	1dfb      	adds	r3, r7, #7
    6ece:	781b      	ldrb	r3, [r3, #0]
    6ed0:	2b44      	cmp	r3, #68	; 0x44
    6ed2:	d003      	beq.n	6edc <m2m_ip_cb+0x198>
    6ed4:	1dfb      	adds	r3, r7, #7
    6ed6:	781b      	ldrb	r3, [r3, #0]
    6ed8:	2b4b      	cmp	r3, #75	; 0x4b
    6eda:	d13d      	bne.n	6f58 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    6edc:	239c      	movs	r3, #156	; 0x9c
    6ede:	18f9      	adds	r1, r7, r3
    6ee0:	6838      	ldr	r0, [r7, #0]
    6ee2:	2300      	movs	r3, #0
    6ee4:	2204      	movs	r2, #4
    6ee6:	4c2e      	ldr	r4, [pc, #184]	; (6fa0 <m2m_ip_cb+0x25c>)
    6ee8:	47a0      	blx	r4
    6eea:	1e03      	subs	r3, r0, #0
    6eec:	d000      	beq.n	6ef0 <m2m_ip_cb+0x1ac>
    6eee:	e1a1      	b.n	7234 <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    6ef0:	239c      	movs	r3, #156	; 0x9c
    6ef2:	18fb      	adds	r3, r7, r3
    6ef4:	2200      	movs	r2, #0
    6ef6:	569a      	ldrsb	r2, [r3, r2]
    6ef8:	2398      	movs	r3, #152	; 0x98
    6efa:	18fb      	adds	r3, r7, r3
    6efc:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    6efe:	239c      	movs	r3, #156	; 0x9c
    6f00:	18fb      	adds	r3, r7, r3
    6f02:	2201      	movs	r2, #1
    6f04:	569a      	ldrsb	r2, [r3, r2]
    6f06:	2398      	movs	r3, #152	; 0x98
    6f08:	18fb      	adds	r3, r7, r3
    6f0a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    6f0c:	239c      	movs	r3, #156	; 0x9c
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	785b      	ldrb	r3, [r3, #1]
    6f12:	b25b      	sxtb	r3, r3
    6f14:	2b00      	cmp	r3, #0
    6f16:	d10f      	bne.n	6f38 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    6f18:	239c      	movs	r3, #156	; 0x9c
    6f1a:	18fb      	adds	r3, r7, r3
    6f1c:	781b      	ldrb	r3, [r3, #0]
    6f1e:	b25b      	sxtb	r3, r3
    6f20:	0018      	movs	r0, r3
    6f22:	239c      	movs	r3, #156	; 0x9c
    6f24:	18fb      	adds	r3, r7, r3
    6f26:	885b      	ldrh	r3, [r3, #2]
    6f28:	3b08      	subs	r3, #8
    6f2a:	b299      	uxth	r1, r3
    6f2c:	4a1e      	ldr	r2, [pc, #120]	; (6fa8 <m2m_ip_cb+0x264>)
    6f2e:	0103      	lsls	r3, r0, #4
    6f30:	18d3      	adds	r3, r2, r3
    6f32:	3308      	adds	r3, #8
    6f34:	1c0a      	adds	r2, r1, #0
    6f36:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    6f38:	4b1a      	ldr	r3, [pc, #104]	; (6fa4 <m2m_ip_cb+0x260>)
    6f3a:	681b      	ldr	r3, [r3, #0]
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d100      	bne.n	6f42 <m2m_ip_cb+0x1fe>
    6f40:	e178      	b.n	7234 <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    6f42:	4b18      	ldr	r3, [pc, #96]	; (6fa4 <m2m_ip_cb+0x260>)
    6f44:	681b      	ldr	r3, [r3, #0]
    6f46:	229c      	movs	r2, #156	; 0x9c
    6f48:	18ba      	adds	r2, r7, r2
    6f4a:	2000      	movs	r0, #0
    6f4c:	5610      	ldrsb	r0, [r2, r0]
    6f4e:	2298      	movs	r2, #152	; 0x98
    6f50:	18ba      	adds	r2, r7, r2
    6f52:	2105      	movs	r1, #5
    6f54:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    6f56:	e16d      	b.n	7234 <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    6f58:	1dfb      	adds	r3, r7, #7
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	2b4a      	cmp	r3, #74	; 0x4a
    6f5e:	d129      	bne.n	6fb4 <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    6f60:	230c      	movs	r3, #12
    6f62:	18f9      	adds	r1, r7, r3
    6f64:	6838      	ldr	r0, [r7, #0]
    6f66:	2300      	movs	r3, #0
    6f68:	2244      	movs	r2, #68	; 0x44
    6f6a:	4c0d      	ldr	r4, [pc, #52]	; (6fa0 <m2m_ip_cb+0x25c>)
    6f6c:	47a0      	blx	r4
    6f6e:	1e03      	subs	r3, r0, #0
    6f70:	d000      	beq.n	6f74 <m2m_ip_cb+0x230>
    6f72:	e164      	b.n	723e <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    6f74:	230c      	movs	r3, #12
    6f76:	18fb      	adds	r3, r7, r3
    6f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6f7a:	230c      	movs	r3, #12
    6f7c:	18fb      	adds	r3, r7, r3
    6f7e:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    6f80:	4b0b      	ldr	r3, [pc, #44]	; (6fb0 <m2m_ip_cb+0x26c>)
    6f82:	681b      	ldr	r3, [r3, #0]
    6f84:	2b00      	cmp	r3, #0
    6f86:	d100      	bne.n	6f8a <m2m_ip_cb+0x246>
    6f88:	e159      	b.n	723e <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    6f8a:	4b09      	ldr	r3, [pc, #36]	; (6fb0 <m2m_ip_cb+0x26c>)
    6f8c:	681a      	ldr	r2, [r3, #0]
    6f8e:	230c      	movs	r3, #12
    6f90:	18fb      	adds	r3, r7, r3
    6f92:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6f94:	230c      	movs	r3, #12
    6f96:	18fb      	adds	r3, r7, r3
    6f98:	0018      	movs	r0, r3
    6f9a:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6f9c:	e14f      	b.n	723e <m2m_ip_cb+0x4fa>
    6f9e:	46c0      	nop			; (mov r8, r8)
    6fa0:	00003c2d 	.word	0x00003c2d
    6fa4:	20004740 	.word	0x20004740
    6fa8:	20004690 	.word	0x20004690
    6fac:	200000f2 	.word	0x200000f2
    6fb0:	20004748 	.word	0x20004748
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    6fb4:	1dfb      	adds	r3, r7, #7
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	2b46      	cmp	r3, #70	; 0x46
    6fba:	d008      	beq.n	6fce <m2m_ip_cb+0x28a>
    6fbc:	1dfb      	adds	r3, r7, #7
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	2b48      	cmp	r3, #72	; 0x48
    6fc2:	d004      	beq.n	6fce <m2m_ip_cb+0x28a>
    6fc4:	1dfb      	adds	r3, r7, #7
    6fc6:	781b      	ldrb	r3, [r3, #0]
    6fc8:	2b4d      	cmp	r3, #77	; 0x4d
    6fca:	d000      	beq.n	6fce <m2m_ip_cb+0x28a>
    6fcc:	e0b4      	b.n	7138 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    6fce:	23df      	movs	r3, #223	; 0xdf
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2206      	movs	r2, #6
    6fd4:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    6fd6:	1dfb      	adds	r3, r7, #7
    6fd8:	781b      	ldrb	r3, [r3, #0]
    6fda:	2b48      	cmp	r3, #72	; 0x48
    6fdc:	d103      	bne.n	6fe6 <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    6fde:	23df      	movs	r3, #223	; 0xdf
    6fe0:	18fb      	adds	r3, r7, r3
    6fe2:	2209      	movs	r2, #9
    6fe4:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    6fe6:	23d8      	movs	r3, #216	; 0xd8
    6fe8:	18fb      	adds	r3, r7, r3
    6fea:	2210      	movs	r2, #16
    6fec:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    6fee:	23d8      	movs	r3, #216	; 0xd8
    6ff0:	18fb      	adds	r3, r7, r3
    6ff2:	881a      	ldrh	r2, [r3, #0]
    6ff4:	2388      	movs	r3, #136	; 0x88
    6ff6:	18f9      	adds	r1, r7, r3
    6ff8:	6838      	ldr	r0, [r7, #0]
    6ffa:	2300      	movs	r3, #0
    6ffc:	4c92      	ldr	r4, [pc, #584]	; (7248 <m2m_ip_cb+0x504>)
    6ffe:	47a0      	blx	r4
    7000:	1e03      	subs	r3, r0, #0
    7002:	d000      	beq.n	7006 <m2m_ip_cb+0x2c2>
    7004:	e118      	b.n	7238 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    7006:	23d6      	movs	r3, #214	; 0xd6
    7008:	18fb      	adds	r3, r7, r3
    700a:	2200      	movs	r2, #0
    700c:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    700e:	23d5      	movs	r3, #213	; 0xd5
    7010:	18fb      	adds	r3, r7, r3
    7012:	2288      	movs	r2, #136	; 0x88
    7014:	18ba      	adds	r2, r7, r2
    7016:	7b12      	ldrb	r2, [r2, #12]
    7018:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    701a:	23d6      	movs	r3, #214	; 0xd6
    701c:	18fb      	adds	r3, r7, r3
    701e:	2288      	movs	r2, #136	; 0x88
    7020:	18ba      	adds	r2, r7, r2
    7022:	89d2      	ldrh	r2, [r2, #14]
    7024:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    7026:	23d5      	movs	r3, #213	; 0xd5
    7028:	18fb      	adds	r3, r7, r3
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b25b      	sxtb	r3, r3
    702e:	4a87      	ldr	r2, [pc, #540]	; (724c <m2m_ip_cb+0x508>)
    7030:	011b      	lsls	r3, r3, #4
    7032:	18d3      	adds	r3, r2, r3
    7034:	330c      	adds	r3, #12
    7036:	2200      	movs	r2, #0
    7038:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    703a:	23d2      	movs	r3, #210	; 0xd2
    703c:	18fb      	adds	r3, r7, r3
    703e:	2288      	movs	r2, #136	; 0x88
    7040:	18ba      	adds	r2, r7, r2
    7042:	8912      	ldrh	r2, [r2, #8]
    7044:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    7046:	23d0      	movs	r3, #208	; 0xd0
    7048:	18fb      	adds	r3, r7, r3
    704a:	2288      	movs	r2, #136	; 0x88
    704c:	18ba      	adds	r2, r7, r2
    704e:	8952      	ldrh	r2, [r2, #10]
    7050:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    7052:	2388      	movs	r3, #136	; 0x88
    7054:	18fb      	adds	r3, r7, r3
    7056:	885a      	ldrh	r2, [r3, #2]
    7058:	2370      	movs	r3, #112	; 0x70
    705a:	18fb      	adds	r3, r7, r3
    705c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    705e:	2388      	movs	r3, #136	; 0x88
    7060:	18fb      	adds	r3, r7, r3
    7062:	685a      	ldr	r2, [r3, #4]
    7064:	2370      	movs	r3, #112	; 0x70
    7066:	18fb      	adds	r3, r7, r3
    7068:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    706a:	23d5      	movs	r3, #213	; 0xd5
    706c:	18fb      	adds	r3, r7, r3
    706e:	781b      	ldrb	r3, [r3, #0]
    7070:	b25b      	sxtb	r3, r3
    7072:	4a76      	ldr	r2, [pc, #472]	; (724c <m2m_ip_cb+0x508>)
    7074:	011b      	lsls	r3, r3, #4
    7076:	18d3      	adds	r3, r2, r3
    7078:	3306      	adds	r3, #6
    707a:	881b      	ldrh	r3, [r3, #0]
    707c:	b29b      	uxth	r3, r3
    707e:	22d6      	movs	r2, #214	; 0xd6
    7080:	18ba      	adds	r2, r7, r2
    7082:	8812      	ldrh	r2, [r2, #0]
    7084:	429a      	cmp	r2, r3
    7086:	d148      	bne.n	711a <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    7088:	23d2      	movs	r3, #210	; 0xd2
    708a:	18fb      	adds	r3, r7, r3
    708c:	2200      	movs	r2, #0
    708e:	5e9b      	ldrsh	r3, [r3, r2]
    7090:	2b00      	cmp	r3, #0
    7092:	dd25      	ble.n	70e0 <m2m_ip_cb+0x39c>
    7094:	23d2      	movs	r3, #210	; 0xd2
    7096:	18fb      	adds	r3, r7, r3
    7098:	2200      	movs	r2, #0
    709a:	5e9a      	ldrsh	r2, [r3, r2]
    709c:	1d3b      	adds	r3, r7, #4
    709e:	881b      	ldrh	r3, [r3, #0]
    70a0:	429a      	cmp	r2, r3
    70a2:	da1d      	bge.n	70e0 <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    70a4:	23d0      	movs	r3, #208	; 0xd0
    70a6:	18fb      	adds	r3, r7, r3
    70a8:	881b      	ldrh	r3, [r3, #0]
    70aa:	683a      	ldr	r2, [r7, #0]
    70ac:	18d3      	adds	r3, r2, r3
    70ae:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    70b0:	23d8      	movs	r3, #216	; 0xd8
    70b2:	18fb      	adds	r3, r7, r3
    70b4:	22d2      	movs	r2, #210	; 0xd2
    70b6:	18ba      	adds	r2, r7, r2
    70b8:	8812      	ldrh	r2, [r2, #0]
    70ba:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    70bc:	683c      	ldr	r4, [r7, #0]
    70be:	23df      	movs	r3, #223	; 0xdf
    70c0:	18fb      	adds	r3, r7, r3
    70c2:	781a      	ldrb	r2, [r3, #0]
    70c4:	2370      	movs	r3, #112	; 0x70
    70c6:	18f9      	adds	r1, r7, r3
    70c8:	23d5      	movs	r3, #213	; 0xd5
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	2000      	movs	r0, #0
    70ce:	5618      	ldrsb	r0, [r3, r0]
    70d0:	23d8      	movs	r3, #216	; 0xd8
    70d2:	18fb      	adds	r3, r7, r3
    70d4:	881b      	ldrh	r3, [r3, #0]
    70d6:	9300      	str	r3, [sp, #0]
    70d8:	0023      	movs	r3, r4
    70da:	4c5d      	ldr	r4, [pc, #372]	; (7250 <m2m_ip_cb+0x50c>)
    70dc:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    70de:	e0ab      	b.n	7238 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    70e0:	2370      	movs	r3, #112	; 0x70
    70e2:	18fb      	adds	r3, r7, r3
    70e4:	22d2      	movs	r2, #210	; 0xd2
    70e6:	18ba      	adds	r2, r7, r2
    70e8:	8812      	ldrh	r2, [r2, #0]
    70ea:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    70ec:	2370      	movs	r3, #112	; 0x70
    70ee:	18fb      	adds	r3, r7, r3
    70f0:	2200      	movs	r2, #0
    70f2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    70f4:	4b57      	ldr	r3, [pc, #348]	; (7254 <m2m_ip_cb+0x510>)
    70f6:	681b      	ldr	r3, [r3, #0]
    70f8:	2b00      	cmp	r3, #0
    70fa:	d100      	bne.n	70fe <m2m_ip_cb+0x3ba>
    70fc:	e09c      	b.n	7238 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    70fe:	4b55      	ldr	r3, [pc, #340]	; (7254 <m2m_ip_cb+0x510>)
    7100:	681b      	ldr	r3, [r3, #0]
    7102:	2270      	movs	r2, #112	; 0x70
    7104:	18bc      	adds	r4, r7, r2
    7106:	22df      	movs	r2, #223	; 0xdf
    7108:	18ba      	adds	r2, r7, r2
    710a:	7811      	ldrb	r1, [r2, #0]
    710c:	22d5      	movs	r2, #213	; 0xd5
    710e:	18ba      	adds	r2, r7, r2
    7110:	2000      	movs	r0, #0
    7112:	5610      	ldrsb	r0, [r2, r0]
    7114:	0022      	movs	r2, r4
    7116:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7118:	e08e      	b.n	7238 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    711a:	23d8      	movs	r3, #216	; 0xd8
    711c:	18fa      	adds	r2, r7, r3
    711e:	1d3b      	adds	r3, r7, #4
    7120:	8812      	ldrh	r2, [r2, #0]
    7122:	881b      	ldrh	r3, [r3, #0]
    7124:	429a      	cmp	r2, r3
    7126:	d300      	bcc.n	712a <m2m_ip_cb+0x3e6>
    7128:	e086      	b.n	7238 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    712a:	2301      	movs	r3, #1
    712c:	2200      	movs	r2, #0
    712e:	2100      	movs	r1, #0
    7130:	2000      	movs	r0, #0
    7132:	4c45      	ldr	r4, [pc, #276]	; (7248 <m2m_ip_cb+0x504>)
    7134:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7136:	e07f      	b.n	7238 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    7138:	1dfb      	adds	r3, r7, #7
    713a:	781b      	ldrb	r3, [r3, #0]
    713c:	2b45      	cmp	r3, #69	; 0x45
    713e:	d007      	beq.n	7150 <m2m_ip_cb+0x40c>
    7140:	1dfb      	adds	r3, r7, #7
    7142:	781b      	ldrb	r3, [r3, #0]
    7144:	2b47      	cmp	r3, #71	; 0x47
    7146:	d003      	beq.n	7150 <m2m_ip_cb+0x40c>
    7148:	1dfb      	adds	r3, r7, #7
    714a:	781b      	ldrb	r3, [r3, #0]
    714c:	2b4c      	cmp	r3, #76	; 0x4c
    714e:	d14c      	bne.n	71ea <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    7150:	23de      	movs	r3, #222	; 0xde
    7152:	18fb      	adds	r3, r7, r3
    7154:	2207      	movs	r2, #7
    7156:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    7158:	1dfb      	adds	r3, r7, #7
    715a:	781b      	ldrb	r3, [r3, #0]
    715c:	2b47      	cmp	r3, #71	; 0x47
    715e:	d103      	bne.n	7168 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7160:	23de      	movs	r3, #222	; 0xde
    7162:	18fb      	adds	r3, r7, r3
    7164:	2208      	movs	r2, #8
    7166:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7168:	2364      	movs	r3, #100	; 0x64
    716a:	18f9      	adds	r1, r7, r3
    716c:	6838      	ldr	r0, [r7, #0]
    716e:	2300      	movs	r3, #0
    7170:	2208      	movs	r2, #8
    7172:	4c35      	ldr	r4, [pc, #212]	; (7248 <m2m_ip_cb+0x504>)
    7174:	47a0      	blx	r4
    7176:	1e03      	subs	r3, r0, #0
    7178:	d160      	bne.n	723c <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    717a:	23dc      	movs	r3, #220	; 0xdc
    717c:	18fb      	adds	r3, r7, r3
    717e:	2200      	movs	r2, #0
    7180:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    7182:	23db      	movs	r3, #219	; 0xdb
    7184:	18fb      	adds	r3, r7, r3
    7186:	2264      	movs	r2, #100	; 0x64
    7188:	18ba      	adds	r2, r7, r2
    718a:	7812      	ldrb	r2, [r2, #0]
    718c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    718e:	23dc      	movs	r3, #220	; 0xdc
    7190:	18fb      	adds	r3, r7, r3
    7192:	2264      	movs	r2, #100	; 0x64
    7194:	18ba      	adds	r2, r7, r2
    7196:	8892      	ldrh	r2, [r2, #4]
    7198:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    719a:	2364      	movs	r3, #100	; 0x64
    719c:	18fb      	adds	r3, r7, r3
    719e:	2202      	movs	r2, #2
    71a0:	5e9a      	ldrsh	r2, [r3, r2]
    71a2:	236e      	movs	r3, #110	; 0x6e
    71a4:	18fb      	adds	r3, r7, r3
    71a6:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    71a8:	23db      	movs	r3, #219	; 0xdb
    71aa:	18fb      	adds	r3, r7, r3
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	b25b      	sxtb	r3, r3
    71b0:	4a26      	ldr	r2, [pc, #152]	; (724c <m2m_ip_cb+0x508>)
    71b2:	011b      	lsls	r3, r3, #4
    71b4:	18d3      	adds	r3, r2, r3
    71b6:	3306      	adds	r3, #6
    71b8:	881b      	ldrh	r3, [r3, #0]
    71ba:	b29b      	uxth	r3, r3
    71bc:	22dc      	movs	r2, #220	; 0xdc
    71be:	18ba      	adds	r2, r7, r2
    71c0:	8812      	ldrh	r2, [r2, #0]
    71c2:	429a      	cmp	r2, r3
    71c4:	d13a      	bne.n	723c <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    71c6:	4b23      	ldr	r3, [pc, #140]	; (7254 <m2m_ip_cb+0x510>)
    71c8:	681b      	ldr	r3, [r3, #0]
    71ca:	2b00      	cmp	r3, #0
    71cc:	d036      	beq.n	723c <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    71ce:	4b21      	ldr	r3, [pc, #132]	; (7254 <m2m_ip_cb+0x510>)
    71d0:	681b      	ldr	r3, [r3, #0]
    71d2:	226e      	movs	r2, #110	; 0x6e
    71d4:	18bc      	adds	r4, r7, r2
    71d6:	22de      	movs	r2, #222	; 0xde
    71d8:	18ba      	adds	r2, r7, r2
    71da:	7811      	ldrb	r1, [r2, #0]
    71dc:	22db      	movs	r2, #219	; 0xdb
    71de:	18ba      	adds	r2, r7, r2
    71e0:	2000      	movs	r0, #0
    71e2:	5610      	ldrsb	r0, [r2, r0]
    71e4:	0022      	movs	r2, r4
    71e6:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    71e8:	e028      	b.n	723c <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    71ea:	1dfb      	adds	r3, r7, #7
    71ec:	781b      	ldrb	r3, [r3, #0]
    71ee:	2b52      	cmp	r3, #82	; 0x52
    71f0:	d125      	bne.n	723e <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    71f2:	2350      	movs	r3, #80	; 0x50
    71f4:	18f9      	adds	r1, r7, r3
    71f6:	6838      	ldr	r0, [r7, #0]
    71f8:	2301      	movs	r3, #1
    71fa:	2214      	movs	r2, #20
    71fc:	4c12      	ldr	r4, [pc, #72]	; (7248 <m2m_ip_cb+0x504>)
    71fe:	47a0      	blx	r4
    7200:	1e03      	subs	r3, r0, #0
    7202:	d11c      	bne.n	723e <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    7204:	2350      	movs	r3, #80	; 0x50
    7206:	18fb      	adds	r3, r7, r3
    7208:	685b      	ldr	r3, [r3, #4]
    720a:	001a      	movs	r2, r3
    720c:	4b12      	ldr	r3, [pc, #72]	; (7258 <m2m_ip_cb+0x514>)
    720e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    7210:	4b11      	ldr	r3, [pc, #68]	; (7258 <m2m_ip_cb+0x514>)
    7212:	681b      	ldr	r3, [r3, #0]
    7214:	2b00      	cmp	r3, #0
    7216:	d012      	beq.n	723e <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    7218:	4b0f      	ldr	r3, [pc, #60]	; (7258 <m2m_ip_cb+0x514>)
    721a:	681c      	ldr	r4, [r3, #0]
    721c:	2350      	movs	r3, #80	; 0x50
    721e:	18fb      	adds	r3, r7, r3
    7220:	6818      	ldr	r0, [r3, #0]
    7222:	2350      	movs	r3, #80	; 0x50
    7224:	18fb      	adds	r3, r7, r3
    7226:	6899      	ldr	r1, [r3, #8]
    7228:	2350      	movs	r3, #80	; 0x50
    722a:	18fb      	adds	r3, r7, r3
    722c:	7c1b      	ldrb	r3, [r3, #16]
    722e:	001a      	movs	r2, r3
    7230:	47a0      	blx	r4
			}
		}
	}
}
    7232:	e004      	b.n	723e <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    7234:	46c0      	nop			; (mov r8, r8)
    7236:	e002      	b.n	723e <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7238:	46c0      	nop			; (mov r8, r8)
    723a:	e000      	b.n	723e <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    723c:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	46bd      	mov	sp, r7
    7242:	b039      	add	sp, #228	; 0xe4
    7244:	bd90      	pop	{r4, r7, pc}
    7246:	46c0      	nop			; (mov r8, r8)
    7248:	00003c2d 	.word	0x00003c2d
    724c:	20004690 	.word	0x20004690
    7250:	00006b79 	.word	0x00006b79
    7254:	20004740 	.word	0x20004740
    7258:	20004744 	.word	0x20004744

0000725c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    725c:	b580      	push	{r7, lr}
    725e:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    7260:	4b0c      	ldr	r3, [pc, #48]	; (7294 <socketInit+0x38>)
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	b2db      	uxtb	r3, r3
    7266:	2b00      	cmp	r3, #0
    7268:	d110      	bne.n	728c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    726a:	4b0b      	ldr	r3, [pc, #44]	; (7298 <socketInit+0x3c>)
    726c:	22b0      	movs	r2, #176	; 0xb0
    726e:	2100      	movs	r1, #0
    7270:	0018      	movs	r0, r3
    7272:	4b0a      	ldr	r3, [pc, #40]	; (729c <socketInit+0x40>)
    7274:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    7276:	4b0a      	ldr	r3, [pc, #40]	; (72a0 <socketInit+0x44>)
    7278:	0019      	movs	r1, r3
    727a:	2002      	movs	r0, #2
    727c:	4b09      	ldr	r3, [pc, #36]	; (72a4 <socketInit+0x48>)
    727e:	4798      	blx	r3
		gbSocketInit=1;
    7280:	4b04      	ldr	r3, [pc, #16]	; (7294 <socketInit+0x38>)
    7282:	2201      	movs	r2, #1
    7284:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    7286:	4b08      	ldr	r3, [pc, #32]	; (72a8 <socketInit+0x4c>)
    7288:	2200      	movs	r2, #0
    728a:	801a      	strh	r2, [r3, #0]
	}
}
    728c:	46c0      	nop			; (mov r8, r8)
    728e:	46bd      	mov	sp, r7
    7290:	bd80      	pop	{r7, pc}
    7292:	46c0      	nop			; (mov r8, r8)
    7294:	200000f4 	.word	0x200000f4
    7298:	20004690 	.word	0x20004690
    729c:	00003071 	.word	0x00003071
    72a0:	00006d45 	.word	0x00006d45
    72a4:	00003e25 	.word	0x00003e25
    72a8:	200000f2 	.word	0x200000f2

000072ac <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b082      	sub	sp, #8
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
    72b4:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    72b6:	4b05      	ldr	r3, [pc, #20]	; (72cc <registerSocketCallback+0x20>)
    72b8:	687a      	ldr	r2, [r7, #4]
    72ba:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    72bc:	4b04      	ldr	r3, [pc, #16]	; (72d0 <registerSocketCallback+0x24>)
    72be:	683a      	ldr	r2, [r7, #0]
    72c0:	601a      	str	r2, [r3, #0]
}
    72c2:	46c0      	nop			; (mov r8, r8)
    72c4:	46bd      	mov	sp, r7
    72c6:	b002      	add	sp, #8
    72c8:	bd80      	pop	{r7, pc}
    72ca:	46c0      	nop			; (mov r8, r8)
    72cc:	20004740 	.word	0x20004740
    72d0:	20004748 	.word	0x20004748

000072d4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    72d4:	b590      	push	{r4, r7, lr}
    72d6:	b08b      	sub	sp, #44	; 0x2c
    72d8:	af04      	add	r7, sp, #16
    72da:	0004      	movs	r4, r0
    72dc:	0008      	movs	r0, r1
    72de:	0011      	movs	r1, r2
    72e0:	1dbb      	adds	r3, r7, #6
    72e2:	1c22      	adds	r2, r4, #0
    72e4:	801a      	strh	r2, [r3, #0]
    72e6:	1d7b      	adds	r3, r7, #5
    72e8:	1c02      	adds	r2, r0, #0
    72ea:	701a      	strb	r2, [r3, #0]
    72ec:	1d3b      	adds	r3, r7, #4
    72ee:	1c0a      	adds	r2, r1, #0
    72f0:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    72f2:	2317      	movs	r3, #23
    72f4:	18fb      	adds	r3, r7, r3
    72f6:	22ff      	movs	r2, #255	; 0xff
    72f8:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    72fa:	2315      	movs	r3, #21
    72fc:	18fb      	adds	r3, r7, r3
    72fe:	220b      	movs	r2, #11
    7300:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    7302:	1dbb      	adds	r3, r7, #6
    7304:	881b      	ldrh	r3, [r3, #0]
    7306:	2b02      	cmp	r3, #2
    7308:	d000      	beq.n	730c <socket+0x38>
    730a:	e07e      	b.n	740a <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    730c:	1d7b      	adds	r3, r7, #5
    730e:	781b      	ldrb	r3, [r3, #0]
    7310:	2b01      	cmp	r3, #1
    7312:	d108      	bne.n	7326 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    7314:	2315      	movs	r3, #21
    7316:	18fb      	adds	r3, r7, r3
    7318:	2207      	movs	r2, #7
    731a:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    731c:	2316      	movs	r3, #22
    731e:	18fb      	adds	r3, r7, r3
    7320:	2200      	movs	r2, #0
    7322:	701a      	strb	r2, [r3, #0]
    7324:	e067      	b.n	73f6 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    7326:	1d7b      	adds	r3, r7, #5
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	2b02      	cmp	r3, #2
    732c:	d108      	bne.n	7340 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    732e:	2315      	movs	r3, #21
    7330:	18fb      	adds	r3, r7, r3
    7332:	220b      	movs	r2, #11
    7334:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    7336:	2316      	movs	r3, #22
    7338:	18fb      	adds	r3, r7, r3
    733a:	2207      	movs	r2, #7
    733c:	701a      	strb	r2, [r3, #0]
    733e:	e05a      	b.n	73f6 <socket+0x122>
		}
		else
			return sock;
    7340:	2317      	movs	r3, #23
    7342:	18fb      	adds	r3, r7, r3
    7344:	781b      	ldrb	r3, [r3, #0]
    7346:	b25b      	sxtb	r3, r3
    7348:	e063      	b.n	7412 <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    734a:	2316      	movs	r3, #22
    734c:	18fb      	adds	r3, r7, r3
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	011a      	lsls	r2, r3, #4
    7352:	4b32      	ldr	r3, [pc, #200]	; (741c <socket+0x148>)
    7354:	18d3      	adds	r3, r2, r3
    7356:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    7358:	693b      	ldr	r3, [r7, #16]
    735a:	7a9b      	ldrb	r3, [r3, #10]
    735c:	b2db      	uxtb	r3, r3
    735e:	2b00      	cmp	r3, #0
    7360:	d142      	bne.n	73e8 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    7362:	693b      	ldr	r3, [r7, #16]
    7364:	2210      	movs	r2, #16
    7366:	2100      	movs	r1, #0
    7368:	0018      	movs	r0, r3
    736a:	4b2d      	ldr	r3, [pc, #180]	; (7420 <socket+0x14c>)
    736c:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    736e:	693b      	ldr	r3, [r7, #16]
    7370:	2201      	movs	r2, #1
    7372:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    7374:	4b2b      	ldr	r3, [pc, #172]	; (7424 <socket+0x150>)
    7376:	881b      	ldrh	r3, [r3, #0]
    7378:	b29b      	uxth	r3, r3
    737a:	3301      	adds	r3, #1
    737c:	b29a      	uxth	r2, r3
    737e:	4b29      	ldr	r3, [pc, #164]	; (7424 <socket+0x150>)
    7380:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    7382:	4b28      	ldr	r3, [pc, #160]	; (7424 <socket+0x150>)
    7384:	881b      	ldrh	r3, [r3, #0]
    7386:	b29b      	uxth	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	d106      	bne.n	739a <socket+0xc6>
					++gu16SessionID;
    738c:	4b25      	ldr	r3, [pc, #148]	; (7424 <socket+0x150>)
    738e:	881b      	ldrh	r3, [r3, #0]
    7390:	b29b      	uxth	r3, r3
    7392:	3301      	adds	r3, #1
    7394:	b29a      	uxth	r2, r3
    7396:	4b23      	ldr	r3, [pc, #140]	; (7424 <socket+0x150>)
    7398:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    739a:	4b22      	ldr	r3, [pc, #136]	; (7424 <socket+0x150>)
    739c:	881b      	ldrh	r3, [r3, #0]
    739e:	b29a      	uxth	r2, r3
    73a0:	693b      	ldr	r3, [r7, #16]
    73a2:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    73a4:	2317      	movs	r3, #23
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	2216      	movs	r2, #22
    73aa:	18ba      	adds	r2, r7, r2
    73ac:	7812      	ldrb	r2, [r2, #0]
    73ae:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    73b0:	1d3b      	adds	r3, r7, #4
    73b2:	781b      	ldrb	r3, [r3, #0]
    73b4:	2201      	movs	r2, #1
    73b6:	4013      	ands	r3, r2
    73b8:	d026      	beq.n	7408 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    73ba:	230c      	movs	r3, #12
    73bc:	18fb      	adds	r3, r7, r3
    73be:	2217      	movs	r2, #23
    73c0:	18ba      	adds	r2, r7, r2
    73c2:	7812      	ldrb	r2, [r2, #0]
    73c4:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    73c6:	693b      	ldr	r3, [r7, #16]
    73c8:	2221      	movs	r2, #33	; 0x21
    73ca:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    73cc:	230c      	movs	r3, #12
    73ce:	18fa      	adds	r2, r7, r3
    73d0:	2300      	movs	r3, #0
    73d2:	9302      	str	r3, [sp, #8]
    73d4:	2300      	movs	r3, #0
    73d6:	9301      	str	r3, [sp, #4]
    73d8:	2300      	movs	r3, #0
    73da:	9300      	str	r3, [sp, #0]
    73dc:	2304      	movs	r3, #4
    73de:	2150      	movs	r1, #80	; 0x50
    73e0:	2002      	movs	r0, #2
    73e2:	4c11      	ldr	r4, [pc, #68]	; (7428 <socket+0x154>)
    73e4:	47a0      	blx	r4
				}
				break;
    73e6:	e00f      	b.n	7408 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    73e8:	2316      	movs	r3, #22
    73ea:	18fb      	adds	r3, r7, r3
    73ec:	781a      	ldrb	r2, [r3, #0]
    73ee:	2316      	movs	r3, #22
    73f0:	18fb      	adds	r3, r7, r3
    73f2:	3201      	adds	r2, #1
    73f4:	701a      	strb	r2, [r3, #0]
    73f6:	2316      	movs	r3, #22
    73f8:	18fa      	adds	r2, r7, r3
    73fa:	2315      	movs	r3, #21
    73fc:	18fb      	adds	r3, r7, r3
    73fe:	7812      	ldrb	r2, [r2, #0]
    7400:	781b      	ldrb	r3, [r3, #0]
    7402:	429a      	cmp	r2, r3
    7404:	d3a1      	bcc.n	734a <socket+0x76>
    7406:	e000      	b.n	740a <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    7408:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    740a:	2317      	movs	r3, #23
    740c:	18fb      	adds	r3, r7, r3
    740e:	781b      	ldrb	r3, [r3, #0]
    7410:	b25b      	sxtb	r3, r3
}
    7412:	0018      	movs	r0, r3
    7414:	46bd      	mov	sp, r7
    7416:	b007      	add	sp, #28
    7418:	bd90      	pop	{r4, r7, pc}
    741a:	46c0      	nop			; (mov r8, r8)
    741c:	20004690 	.word	0x20004690
    7420:	00003071 	.word	0x00003071
    7424:	200000f2 	.word	0x200000f2
    7428:	0000344d 	.word	0x0000344d

0000742c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    742c:	b5b0      	push	{r4, r5, r7, lr}
    742e:	b08a      	sub	sp, #40	; 0x28
    7430:	af04      	add	r7, sp, #16
    7432:	6039      	str	r1, [r7, #0]
    7434:	0011      	movs	r1, r2
    7436:	1dfb      	adds	r3, r7, #7
    7438:	1c02      	adds	r2, r0, #0
    743a:	701a      	strb	r2, [r3, #0]
    743c:	1dbb      	adds	r3, r7, #6
    743e:	1c0a      	adds	r2, r1, #0
    7440:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7442:	2317      	movs	r3, #23
    7444:	18fb      	adds	r3, r7, r3
    7446:	22fa      	movs	r2, #250	; 0xfa
    7448:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    744a:	1dfb      	adds	r3, r7, #7
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	2b7f      	cmp	r3, #127	; 0x7f
    7450:	d867      	bhi.n	7522 <connect+0xf6>
    7452:	683b      	ldr	r3, [r7, #0]
    7454:	2b00      	cmp	r3, #0
    7456:	d064      	beq.n	7522 <connect+0xf6>
    7458:	1dfb      	adds	r3, r7, #7
    745a:	781b      	ldrb	r3, [r3, #0]
    745c:	b25b      	sxtb	r3, r3
    745e:	4a35      	ldr	r2, [pc, #212]	; (7534 <connect+0x108>)
    7460:	011b      	lsls	r3, r3, #4
    7462:	18d3      	adds	r3, r2, r3
    7464:	330a      	adds	r3, #10
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	b2db      	uxtb	r3, r3
    746a:	2b01      	cmp	r3, #1
    746c:	d159      	bne.n	7522 <connect+0xf6>
    746e:	1dbb      	adds	r3, r7, #6
    7470:	781b      	ldrb	r3, [r3, #0]
    7472:	2b00      	cmp	r3, #0
    7474:	d055      	beq.n	7522 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    7476:	2316      	movs	r3, #22
    7478:	18fb      	adds	r3, r7, r3
    747a:	2244      	movs	r2, #68	; 0x44
    747c:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    747e:	1dfb      	adds	r3, r7, #7
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	b25b      	sxtb	r3, r3
    7484:	4a2b      	ldr	r2, [pc, #172]	; (7534 <connect+0x108>)
    7486:	011b      	lsls	r3, r3, #4
    7488:	18d3      	adds	r3, r2, r3
    748a:	330b      	adds	r3, #11
    748c:	781b      	ldrb	r3, [r3, #0]
    748e:	b2db      	uxtb	r3, r3
    7490:	001a      	movs	r2, r3
    7492:	2301      	movs	r3, #1
    7494:	4013      	ands	r3, r2
    7496:	d00f      	beq.n	74b8 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    7498:	2316      	movs	r3, #22
    749a:	18fb      	adds	r3, r7, r3
    749c:	224b      	movs	r2, #75	; 0x4b
    749e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    74a0:	1dfb      	adds	r3, r7, #7
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	b25b      	sxtb	r3, r3
    74a6:	4a23      	ldr	r2, [pc, #140]	; (7534 <connect+0x108>)
    74a8:	011b      	lsls	r3, r3, #4
    74aa:	18d3      	adds	r3, r2, r3
    74ac:	330b      	adds	r3, #11
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	b2da      	uxtb	r2, r3
    74b2:	2308      	movs	r3, #8
    74b4:	18fb      	adds	r3, r7, r3
    74b6:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    74b8:	2308      	movs	r3, #8
    74ba:	18fb      	adds	r3, r7, r3
    74bc:	1dfa      	adds	r2, r7, #7
    74be:	7812      	ldrb	r2, [r2, #0]
    74c0:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    74c2:	6839      	ldr	r1, [r7, #0]
    74c4:	2308      	movs	r3, #8
    74c6:	18fb      	adds	r3, r7, r3
    74c8:	2208      	movs	r2, #8
    74ca:	0018      	movs	r0, r3
    74cc:	4b1a      	ldr	r3, [pc, #104]	; (7538 <connect+0x10c>)
    74ce:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    74d0:	1dfb      	adds	r3, r7, #7
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	b25b      	sxtb	r3, r3
    74d6:	4a17      	ldr	r2, [pc, #92]	; (7534 <connect+0x108>)
    74d8:	011b      	lsls	r3, r3, #4
    74da:	18d3      	adds	r3, r2, r3
    74dc:	3306      	adds	r3, #6
    74de:	881b      	ldrh	r3, [r3, #0]
    74e0:	b29a      	uxth	r2, r3
    74e2:	2308      	movs	r3, #8
    74e4:	18fb      	adds	r3, r7, r3
    74e6:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    74e8:	2317      	movs	r3, #23
    74ea:	18fc      	adds	r4, r7, r3
    74ec:	2308      	movs	r3, #8
    74ee:	18fa      	adds	r2, r7, r3
    74f0:	2316      	movs	r3, #22
    74f2:	18fb      	adds	r3, r7, r3
    74f4:	7819      	ldrb	r1, [r3, #0]
    74f6:	2300      	movs	r3, #0
    74f8:	9302      	str	r3, [sp, #8]
    74fa:	2300      	movs	r3, #0
    74fc:	9301      	str	r3, [sp, #4]
    74fe:	2300      	movs	r3, #0
    7500:	9300      	str	r3, [sp, #0]
    7502:	230c      	movs	r3, #12
    7504:	2002      	movs	r0, #2
    7506:	4d0d      	ldr	r5, [pc, #52]	; (753c <connect+0x110>)
    7508:	47a8      	blx	r5
    750a:	0003      	movs	r3, r0
    750c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    750e:	2317      	movs	r3, #23
    7510:	18fb      	adds	r3, r7, r3
    7512:	781b      	ldrb	r3, [r3, #0]
    7514:	b25b      	sxtb	r3, r3
    7516:	2b00      	cmp	r3, #0
    7518:	d003      	beq.n	7522 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    751a:	2317      	movs	r3, #23
    751c:	18fb      	adds	r3, r7, r3
    751e:	22f7      	movs	r2, #247	; 0xf7
    7520:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    7522:	2317      	movs	r3, #23
    7524:	18fb      	adds	r3, r7, r3
    7526:	781b      	ldrb	r3, [r3, #0]
    7528:	b25b      	sxtb	r3, r3
}
    752a:	0018      	movs	r0, r3
    752c:	46bd      	mov	sp, r7
    752e:	b006      	add	sp, #24
    7530:	bdb0      	pop	{r4, r5, r7, pc}
    7532:	46c0      	nop			; (mov r8, r8)
    7534:	20004690 	.word	0x20004690
    7538:	00003035 	.word	0x00003035
    753c:	0000344d 	.word	0x0000344d

00007540 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    7540:	b590      	push	{r4, r7, lr}
    7542:	b08f      	sub	sp, #60	; 0x3c
    7544:	af04      	add	r7, sp, #16
    7546:	0004      	movs	r4, r0
    7548:	60b9      	str	r1, [r7, #8]
    754a:	0010      	movs	r0, r2
    754c:	0019      	movs	r1, r3
    754e:	230f      	movs	r3, #15
    7550:	18fb      	adds	r3, r7, r3
    7552:	1c22      	adds	r2, r4, #0
    7554:	701a      	strb	r2, [r3, #0]
    7556:	230c      	movs	r3, #12
    7558:	18fb      	adds	r3, r7, r3
    755a:	1c02      	adds	r2, r0, #0
    755c:	801a      	strh	r2, [r3, #0]
    755e:	1dbb      	adds	r3, r7, #6
    7560:	1c0a      	adds	r2, r1, #0
    7562:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    7564:	2326      	movs	r3, #38	; 0x26
    7566:	18fb      	adds	r3, r7, r3
    7568:	2206      	movs	r2, #6
    756a:	4252      	negs	r2, r2
    756c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    756e:	230f      	movs	r3, #15
    7570:	18fb      	adds	r3, r7, r3
    7572:	781b      	ldrb	r3, [r3, #0]
    7574:	2b7f      	cmp	r3, #127	; 0x7f
    7576:	d900      	bls.n	757a <send+0x3a>
    7578:	e087      	b.n	768a <send+0x14a>
    757a:	68bb      	ldr	r3, [r7, #8]
    757c:	2b00      	cmp	r3, #0
    757e:	d100      	bne.n	7582 <send+0x42>
    7580:	e083      	b.n	768a <send+0x14a>
    7582:	230c      	movs	r3, #12
    7584:	18fb      	adds	r3, r7, r3
    7586:	881a      	ldrh	r2, [r3, #0]
    7588:	23af      	movs	r3, #175	; 0xaf
    758a:	00db      	lsls	r3, r3, #3
    758c:	429a      	cmp	r2, r3
    758e:	d900      	bls.n	7592 <send+0x52>
    7590:	e07b      	b.n	768a <send+0x14a>
    7592:	230f      	movs	r3, #15
    7594:	18fb      	adds	r3, r7, r3
    7596:	781b      	ldrb	r3, [r3, #0]
    7598:	b25b      	sxtb	r3, r3
    759a:	4a40      	ldr	r2, [pc, #256]	; (769c <send+0x15c>)
    759c:	011b      	lsls	r3, r3, #4
    759e:	18d3      	adds	r3, r2, r3
    75a0:	330a      	adds	r3, #10
    75a2:	781b      	ldrb	r3, [r3, #0]
    75a4:	b2db      	uxtb	r3, r3
    75a6:	2b01      	cmp	r3, #1
    75a8:	d16f      	bne.n	768a <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    75aa:	2323      	movs	r3, #35	; 0x23
    75ac:	18fb      	adds	r3, r7, r3
    75ae:	2245      	movs	r2, #69	; 0x45
    75b0:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    75b2:	2324      	movs	r3, #36	; 0x24
    75b4:	18fb      	adds	r3, r7, r3
    75b6:	2250      	movs	r2, #80	; 0x50
    75b8:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    75ba:	2310      	movs	r3, #16
    75bc:	18fb      	adds	r3, r7, r3
    75be:	220f      	movs	r2, #15
    75c0:	18ba      	adds	r2, r7, r2
    75c2:	7812      	ldrb	r2, [r2, #0]
    75c4:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    75c6:	2310      	movs	r3, #16
    75c8:	18fb      	adds	r3, r7, r3
    75ca:	220c      	movs	r2, #12
    75cc:	18ba      	adds	r2, r7, r2
    75ce:	8812      	ldrh	r2, [r2, #0]
    75d0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    75d2:	230f      	movs	r3, #15
    75d4:	18fb      	adds	r3, r7, r3
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	b25b      	sxtb	r3, r3
    75da:	4a30      	ldr	r2, [pc, #192]	; (769c <send+0x15c>)
    75dc:	011b      	lsls	r3, r3, #4
    75de:	18d3      	adds	r3, r2, r3
    75e0:	3306      	adds	r3, #6
    75e2:	881b      	ldrh	r3, [r3, #0]
    75e4:	b29a      	uxth	r2, r3
    75e6:	2310      	movs	r3, #16
    75e8:	18fb      	adds	r3, r7, r3
    75ea:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    75ec:	230f      	movs	r3, #15
    75ee:	18fb      	adds	r3, r7, r3
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	b25b      	sxtb	r3, r3
    75f4:	2b06      	cmp	r3, #6
    75f6:	dd03      	ble.n	7600 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    75f8:	2324      	movs	r3, #36	; 0x24
    75fa:	18fb      	adds	r3, r7, r3
    75fc:	2244      	movs	r2, #68	; 0x44
    75fe:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7600:	230f      	movs	r3, #15
    7602:	18fb      	adds	r3, r7, r3
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	b25b      	sxtb	r3, r3
    7608:	4a24      	ldr	r2, [pc, #144]	; (769c <send+0x15c>)
    760a:	011b      	lsls	r3, r3, #4
    760c:	18d3      	adds	r3, r2, r3
    760e:	330b      	adds	r3, #11
    7610:	781b      	ldrb	r3, [r3, #0]
    7612:	b2db      	uxtb	r3, r3
    7614:	001a      	movs	r2, r3
    7616:	2301      	movs	r3, #1
    7618:	4013      	ands	r3, r2
    761a:	d00f      	beq.n	763c <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    761c:	2323      	movs	r3, #35	; 0x23
    761e:	18fb      	adds	r3, r7, r3
    7620:	224c      	movs	r2, #76	; 0x4c
    7622:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    7624:	230f      	movs	r3, #15
    7626:	18fb      	adds	r3, r7, r3
    7628:	2200      	movs	r2, #0
    762a:	569a      	ldrsb	r2, [r3, r2]
    762c:	2324      	movs	r3, #36	; 0x24
    762e:	18fb      	adds	r3, r7, r3
    7630:	491a      	ldr	r1, [pc, #104]	; (769c <send+0x15c>)
    7632:	0112      	lsls	r2, r2, #4
    7634:	188a      	adds	r2, r1, r2
    7636:	3208      	adds	r2, #8
    7638:	8812      	ldrh	r2, [r2, #0]
    763a:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    763c:	2323      	movs	r3, #35	; 0x23
    763e:	18fb      	adds	r3, r7, r3
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	2280      	movs	r2, #128	; 0x80
    7644:	4252      	negs	r2, r2
    7646:	4313      	orrs	r3, r2
    7648:	b2d9      	uxtb	r1, r3
    764a:	2310      	movs	r3, #16
    764c:	18fa      	adds	r2, r7, r3
    764e:	2324      	movs	r3, #36	; 0x24
    7650:	18fb      	adds	r3, r7, r3
    7652:	881b      	ldrh	r3, [r3, #0]
    7654:	9302      	str	r3, [sp, #8]
    7656:	230c      	movs	r3, #12
    7658:	18fb      	adds	r3, r7, r3
    765a:	881b      	ldrh	r3, [r3, #0]
    765c:	9301      	str	r3, [sp, #4]
    765e:	68bb      	ldr	r3, [r7, #8]
    7660:	9300      	str	r3, [sp, #0]
    7662:	2310      	movs	r3, #16
    7664:	2002      	movs	r0, #2
    7666:	4c0e      	ldr	r4, [pc, #56]	; (76a0 <send+0x160>)
    7668:	47a0      	blx	r4
    766a:	0003      	movs	r3, r0
    766c:	001a      	movs	r2, r3
    766e:	2326      	movs	r3, #38	; 0x26
    7670:	18fb      	adds	r3, r7, r3
    7672:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    7674:	2326      	movs	r3, #38	; 0x26
    7676:	18fb      	adds	r3, r7, r3
    7678:	2200      	movs	r2, #0
    767a:	5e9b      	ldrsh	r3, [r3, r2]
    767c:	2b00      	cmp	r3, #0
    767e:	d004      	beq.n	768a <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    7680:	2326      	movs	r3, #38	; 0x26
    7682:	18fb      	adds	r3, r7, r3
    7684:	220e      	movs	r2, #14
    7686:	4252      	negs	r2, r2
    7688:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    768a:	2326      	movs	r3, #38	; 0x26
    768c:	18fb      	adds	r3, r7, r3
    768e:	2200      	movs	r2, #0
    7690:	5e9b      	ldrsh	r3, [r3, r2]
}
    7692:	0018      	movs	r0, r3
    7694:	46bd      	mov	sp, r7
    7696:	b00b      	add	sp, #44	; 0x2c
    7698:	bd90      	pop	{r4, r7, pc}
    769a:	46c0      	nop			; (mov r8, r8)
    769c:	20004690 	.word	0x20004690
    76a0:	0000344d 	.word	0x0000344d

000076a4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    76a4:	b590      	push	{r4, r7, lr}
    76a6:	b08d      	sub	sp, #52	; 0x34
    76a8:	af04      	add	r7, sp, #16
    76aa:	60b9      	str	r1, [r7, #8]
    76ac:	0011      	movs	r1, r2
    76ae:	607b      	str	r3, [r7, #4]
    76b0:	230f      	movs	r3, #15
    76b2:	18fb      	adds	r3, r7, r3
    76b4:	1c02      	adds	r2, r0, #0
    76b6:	701a      	strb	r2, [r3, #0]
    76b8:	230c      	movs	r3, #12
    76ba:	18fb      	adds	r3, r7, r3
    76bc:	1c0a      	adds	r2, r1, #0
    76be:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    76c0:	231e      	movs	r3, #30
    76c2:	18fb      	adds	r3, r7, r3
    76c4:	2206      	movs	r2, #6
    76c6:	4252      	negs	r2, r2
    76c8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    76ca:	230f      	movs	r3, #15
    76cc:	18fb      	adds	r3, r7, r3
    76ce:	781b      	ldrb	r3, [r3, #0]
    76d0:	2b7f      	cmp	r3, #127	; 0x7f
    76d2:	d900      	bls.n	76d6 <recv+0x32>
    76d4:	e099      	b.n	780a <recv+0x166>
    76d6:	68bb      	ldr	r3, [r7, #8]
    76d8:	2b00      	cmp	r3, #0
    76da:	d100      	bne.n	76de <recv+0x3a>
    76dc:	e095      	b.n	780a <recv+0x166>
    76de:	230c      	movs	r3, #12
    76e0:	18fb      	adds	r3, r7, r3
    76e2:	881b      	ldrh	r3, [r3, #0]
    76e4:	2b00      	cmp	r3, #0
    76e6:	d100      	bne.n	76ea <recv+0x46>
    76e8:	e08f      	b.n	780a <recv+0x166>
    76ea:	230f      	movs	r3, #15
    76ec:	18fb      	adds	r3, r7, r3
    76ee:	781b      	ldrb	r3, [r3, #0]
    76f0:	b25b      	sxtb	r3, r3
    76f2:	4a4a      	ldr	r2, [pc, #296]	; (781c <recv+0x178>)
    76f4:	011b      	lsls	r3, r3, #4
    76f6:	18d3      	adds	r3, r2, r3
    76f8:	330a      	adds	r3, #10
    76fa:	781b      	ldrb	r3, [r3, #0]
    76fc:	b2db      	uxtb	r3, r3
    76fe:	2b01      	cmp	r3, #1
    7700:	d000      	beq.n	7704 <recv+0x60>
    7702:	e082      	b.n	780a <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    7704:	231e      	movs	r3, #30
    7706:	18fb      	adds	r3, r7, r3
    7708:	2200      	movs	r2, #0
    770a:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    770c:	230f      	movs	r3, #15
    770e:	18fb      	adds	r3, r7, r3
    7710:	2200      	movs	r2, #0
    7712:	569a      	ldrsb	r2, [r3, r2]
    7714:	4b41      	ldr	r3, [pc, #260]	; (781c <recv+0x178>)
    7716:	0112      	lsls	r2, r2, #4
    7718:	68b9      	ldr	r1, [r7, #8]
    771a:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    771c:	230f      	movs	r3, #15
    771e:	18fb      	adds	r3, r7, r3
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	b25b      	sxtb	r3, r3
    7724:	4a3d      	ldr	r2, [pc, #244]	; (781c <recv+0x178>)
    7726:	011b      	lsls	r3, r3, #4
    7728:	18d3      	adds	r3, r2, r3
    772a:	3304      	adds	r3, #4
    772c:	220c      	movs	r2, #12
    772e:	18ba      	adds	r2, r7, r2
    7730:	8812      	ldrh	r2, [r2, #0]
    7732:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    7734:	230f      	movs	r3, #15
    7736:	18fb      	adds	r3, r7, r3
    7738:	781b      	ldrb	r3, [r3, #0]
    773a:	b25b      	sxtb	r3, r3
    773c:	4a37      	ldr	r2, [pc, #220]	; (781c <recv+0x178>)
    773e:	011b      	lsls	r3, r3, #4
    7740:	18d3      	adds	r3, r2, r3
    7742:	330c      	adds	r3, #12
    7744:	781b      	ldrb	r3, [r3, #0]
    7746:	b2db      	uxtb	r3, r3
    7748:	2b00      	cmp	r3, #0
    774a:	d15e      	bne.n	780a <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    774c:	231d      	movs	r3, #29
    774e:	18fb      	adds	r3, r7, r3
    7750:	2246      	movs	r2, #70	; 0x46
    7752:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    7754:	230f      	movs	r3, #15
    7756:	18fb      	adds	r3, r7, r3
    7758:	781b      	ldrb	r3, [r3, #0]
    775a:	b25b      	sxtb	r3, r3
    775c:	4a2f      	ldr	r2, [pc, #188]	; (781c <recv+0x178>)
    775e:	011b      	lsls	r3, r3, #4
    7760:	18d3      	adds	r3, r2, r3
    7762:	330c      	adds	r3, #12
    7764:	2201      	movs	r2, #1
    7766:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7768:	230f      	movs	r3, #15
    776a:	18fb      	adds	r3, r7, r3
    776c:	781b      	ldrb	r3, [r3, #0]
    776e:	b25b      	sxtb	r3, r3
    7770:	4a2a      	ldr	r2, [pc, #168]	; (781c <recv+0x178>)
    7772:	011b      	lsls	r3, r3, #4
    7774:	18d3      	adds	r3, r2, r3
    7776:	330b      	adds	r3, #11
    7778:	781b      	ldrb	r3, [r3, #0]
    777a:	b2db      	uxtb	r3, r3
    777c:	001a      	movs	r2, r3
    777e:	2301      	movs	r3, #1
    7780:	4013      	ands	r3, r2
    7782:	d003      	beq.n	778c <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    7784:	231d      	movs	r3, #29
    7786:	18fb      	adds	r3, r7, r3
    7788:	224d      	movs	r2, #77	; 0x4d
    778a:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	2b00      	cmp	r3, #0
    7790:	d105      	bne.n	779e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    7792:	2314      	movs	r3, #20
    7794:	18fb      	adds	r3, r7, r3
    7796:	2201      	movs	r2, #1
    7798:	4252      	negs	r2, r2
    779a:	601a      	str	r2, [r3, #0]
    779c:	e003      	b.n	77a6 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    779e:	2314      	movs	r3, #20
    77a0:	18fb      	adds	r3, r7, r3
    77a2:	687a      	ldr	r2, [r7, #4]
    77a4:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    77a6:	2314      	movs	r3, #20
    77a8:	18fb      	adds	r3, r7, r3
    77aa:	220f      	movs	r2, #15
    77ac:	18ba      	adds	r2, r7, r2
    77ae:	7812      	ldrb	r2, [r2, #0]
    77b0:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    77b2:	230f      	movs	r3, #15
    77b4:	18fb      	adds	r3, r7, r3
    77b6:	781b      	ldrb	r3, [r3, #0]
    77b8:	b25b      	sxtb	r3, r3
    77ba:	4a18      	ldr	r2, [pc, #96]	; (781c <recv+0x178>)
    77bc:	011b      	lsls	r3, r3, #4
    77be:	18d3      	adds	r3, r2, r3
    77c0:	3306      	adds	r3, #6
    77c2:	881b      	ldrh	r3, [r3, #0]
    77c4:	b29a      	uxth	r2, r3
    77c6:	2314      	movs	r3, #20
    77c8:	18fb      	adds	r3, r7, r3
    77ca:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    77cc:	2314      	movs	r3, #20
    77ce:	18fa      	adds	r2, r7, r3
    77d0:	231d      	movs	r3, #29
    77d2:	18fb      	adds	r3, r7, r3
    77d4:	7819      	ldrb	r1, [r3, #0]
    77d6:	2300      	movs	r3, #0
    77d8:	9302      	str	r3, [sp, #8]
    77da:	2300      	movs	r3, #0
    77dc:	9301      	str	r3, [sp, #4]
    77de:	2300      	movs	r3, #0
    77e0:	9300      	str	r3, [sp, #0]
    77e2:	2308      	movs	r3, #8
    77e4:	2002      	movs	r0, #2
    77e6:	4c0e      	ldr	r4, [pc, #56]	; (7820 <recv+0x17c>)
    77e8:	47a0      	blx	r4
    77ea:	0003      	movs	r3, r0
    77ec:	001a      	movs	r2, r3
    77ee:	231e      	movs	r3, #30
    77f0:	18fb      	adds	r3, r7, r3
    77f2:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    77f4:	231e      	movs	r3, #30
    77f6:	18fb      	adds	r3, r7, r3
    77f8:	2200      	movs	r2, #0
    77fa:	5e9b      	ldrsh	r3, [r3, r2]
    77fc:	2b00      	cmp	r3, #0
    77fe:	d004      	beq.n	780a <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    7800:	231e      	movs	r3, #30
    7802:	18fb      	adds	r3, r7, r3
    7804:	220e      	movs	r2, #14
    7806:	4252      	negs	r2, r2
    7808:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    780a:	231e      	movs	r3, #30
    780c:	18fb      	adds	r3, r7, r3
    780e:	2200      	movs	r2, #0
    7810:	5e9b      	ldrsh	r3, [r3, r2]
}
    7812:	0018      	movs	r0, r3
    7814:	46bd      	mov	sp, r7
    7816:	b009      	add	sp, #36	; 0x24
    7818:	bd90      	pop	{r4, r7, pc}
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	20004690 	.word	0x20004690
    7820:	0000344d 	.word	0x0000344d

00007824 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    7824:	b5b0      	push	{r4, r5, r7, lr}
    7826:	b088      	sub	sp, #32
    7828:	af04      	add	r7, sp, #16
    782a:	0002      	movs	r2, r0
    782c:	1dfb      	adds	r3, r7, #7
    782e:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7830:	230f      	movs	r3, #15
    7832:	18fb      	adds	r3, r7, r3
    7834:	22fa      	movs	r2, #250	; 0xfa
    7836:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    7838:	1dfb      	adds	r3, r7, #7
    783a:	781b      	ldrb	r3, [r3, #0]
    783c:	2b7f      	cmp	r3, #127	; 0x7f
    783e:	d86a      	bhi.n	7916 <close+0xf2>
    7840:	1dfb      	adds	r3, r7, #7
    7842:	781b      	ldrb	r3, [r3, #0]
    7844:	b25b      	sxtb	r3, r3
    7846:	4a38      	ldr	r2, [pc, #224]	; (7928 <close+0x104>)
    7848:	011b      	lsls	r3, r3, #4
    784a:	18d3      	adds	r3, r2, r3
    784c:	330a      	adds	r3, #10
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	b2db      	uxtb	r3, r3
    7852:	2b01      	cmp	r3, #1
    7854:	d15f      	bne.n	7916 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    7856:	230e      	movs	r3, #14
    7858:	18fb      	adds	r3, r7, r3
    785a:	2249      	movs	r2, #73	; 0x49
    785c:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    785e:	2308      	movs	r3, #8
    7860:	18fb      	adds	r3, r7, r3
    7862:	1dfa      	adds	r2, r7, #7
    7864:	7812      	ldrb	r2, [r2, #0]
    7866:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    7868:	1dfb      	adds	r3, r7, #7
    786a:	781b      	ldrb	r3, [r3, #0]
    786c:	b25b      	sxtb	r3, r3
    786e:	4a2e      	ldr	r2, [pc, #184]	; (7928 <close+0x104>)
    7870:	011b      	lsls	r3, r3, #4
    7872:	18d3      	adds	r3, r2, r3
    7874:	3306      	adds	r3, #6
    7876:	881b      	ldrh	r3, [r3, #0]
    7878:	b29a      	uxth	r2, r3
    787a:	2308      	movs	r3, #8
    787c:	18fb      	adds	r3, r7, r3
    787e:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    7880:	1dfb      	adds	r3, r7, #7
    7882:	781b      	ldrb	r3, [r3, #0]
    7884:	b25b      	sxtb	r3, r3
    7886:	4a28      	ldr	r2, [pc, #160]	; (7928 <close+0x104>)
    7888:	011b      	lsls	r3, r3, #4
    788a:	18d3      	adds	r3, r2, r3
    788c:	330a      	adds	r3, #10
    788e:	2200      	movs	r2, #0
    7890:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    7892:	1dfb      	adds	r3, r7, #7
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	b25b      	sxtb	r3, r3
    7898:	4a23      	ldr	r2, [pc, #140]	; (7928 <close+0x104>)
    789a:	011b      	lsls	r3, r3, #4
    789c:	18d3      	adds	r3, r2, r3
    789e:	3306      	adds	r3, #6
    78a0:	2200      	movs	r2, #0
    78a2:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    78a4:	1dfb      	adds	r3, r7, #7
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	b25b      	sxtb	r3, r3
    78aa:	4a1f      	ldr	r2, [pc, #124]	; (7928 <close+0x104>)
    78ac:	011b      	lsls	r3, r3, #4
    78ae:	18d3      	adds	r3, r2, r3
    78b0:	330b      	adds	r3, #11
    78b2:	781b      	ldrb	r3, [r3, #0]
    78b4:	b2db      	uxtb	r3, r3
    78b6:	001a      	movs	r2, r3
    78b8:	2301      	movs	r3, #1
    78ba:	4013      	ands	r3, r2
    78bc:	d003      	beq.n	78c6 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    78be:	230e      	movs	r3, #14
    78c0:	18fb      	adds	r3, r7, r3
    78c2:	224e      	movs	r2, #78	; 0x4e
    78c4:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    78c6:	230f      	movs	r3, #15
    78c8:	18fc      	adds	r4, r7, r3
    78ca:	2308      	movs	r3, #8
    78cc:	18fa      	adds	r2, r7, r3
    78ce:	230e      	movs	r3, #14
    78d0:	18fb      	adds	r3, r7, r3
    78d2:	7819      	ldrb	r1, [r3, #0]
    78d4:	2300      	movs	r3, #0
    78d6:	9302      	str	r3, [sp, #8]
    78d8:	2300      	movs	r3, #0
    78da:	9301      	str	r3, [sp, #4]
    78dc:	2300      	movs	r3, #0
    78de:	9300      	str	r3, [sp, #0]
    78e0:	2304      	movs	r3, #4
    78e2:	2002      	movs	r0, #2
    78e4:	4d11      	ldr	r5, [pc, #68]	; (792c <close+0x108>)
    78e6:	47a8      	blx	r5
    78e8:	0003      	movs	r3, r0
    78ea:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    78ec:	230f      	movs	r3, #15
    78ee:	18fb      	adds	r3, r7, r3
    78f0:	781b      	ldrb	r3, [r3, #0]
    78f2:	b25b      	sxtb	r3, r3
    78f4:	2b00      	cmp	r3, #0
    78f6:	d003      	beq.n	7900 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    78f8:	230f      	movs	r3, #15
    78fa:	18fb      	adds	r3, r7, r3
    78fc:	22f7      	movs	r2, #247	; 0xf7
    78fe:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    7900:	1dfb      	adds	r3, r7, #7
    7902:	781b      	ldrb	r3, [r3, #0]
    7904:	b25b      	sxtb	r3, r3
    7906:	011a      	lsls	r2, r3, #4
    7908:	4b07      	ldr	r3, [pc, #28]	; (7928 <close+0x104>)
    790a:	18d3      	adds	r3, r2, r3
    790c:	2210      	movs	r2, #16
    790e:	2100      	movs	r1, #0
    7910:	0018      	movs	r0, r3
    7912:	4b07      	ldr	r3, [pc, #28]	; (7930 <close+0x10c>)
    7914:	4798      	blx	r3
	}
	return s8Ret;
    7916:	230f      	movs	r3, #15
    7918:	18fb      	adds	r3, r7, r3
    791a:	781b      	ldrb	r3, [r3, #0]
    791c:	b25b      	sxtb	r3, r3
}
    791e:	0018      	movs	r0, r3
    7920:	46bd      	mov	sp, r7
    7922:	b004      	add	sp, #16
    7924:	bdb0      	pop	{r4, r5, r7, pc}
    7926:	46c0      	nop			; (mov r8, r8)
    7928:	20004690 	.word	0x20004690
    792c:	0000344d 	.word	0x0000344d
    7930:	00003071 	.word	0x00003071

00007934 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    7934:	b5b0      	push	{r4, r5, r7, lr}
    7936:	b088      	sub	sp, #32
    7938:	af04      	add	r7, sp, #16
    793a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    793c:	230f      	movs	r3, #15
    793e:	18fb      	adds	r3, r7, r3
    7940:	22fa      	movs	r2, #250	; 0xfa
    7942:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    7944:	687b      	ldr	r3, [r7, #4]
    7946:	0018      	movs	r0, r3
    7948:	4b19      	ldr	r3, [pc, #100]	; (79b0 <gethostbyname+0x7c>)
    794a:	4798      	blx	r3
    794c:	0003      	movs	r3, r0
    794e:	001a      	movs	r2, r3
    7950:	230e      	movs	r3, #14
    7952:	18fb      	adds	r3, r7, r3
    7954:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    7956:	230e      	movs	r3, #14
    7958:	18fb      	adds	r3, r7, r3
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	2b40      	cmp	r3, #64	; 0x40
    795e:	d81f      	bhi.n	79a0 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    7960:	230e      	movs	r3, #14
    7962:	18fb      	adds	r3, r7, r3
    7964:	781b      	ldrb	r3, [r3, #0]
    7966:	b29b      	uxth	r3, r3
    7968:	3301      	adds	r3, #1
    796a:	b299      	uxth	r1, r3
    796c:	230f      	movs	r3, #15
    796e:	18fc      	adds	r4, r7, r3
    7970:	687a      	ldr	r2, [r7, #4]
    7972:	2300      	movs	r3, #0
    7974:	9302      	str	r3, [sp, #8]
    7976:	2300      	movs	r3, #0
    7978:	9301      	str	r3, [sp, #4]
    797a:	2300      	movs	r3, #0
    797c:	9300      	str	r3, [sp, #0]
    797e:	000b      	movs	r3, r1
    7980:	21ca      	movs	r1, #202	; 0xca
    7982:	2002      	movs	r0, #2
    7984:	4d0b      	ldr	r5, [pc, #44]	; (79b4 <gethostbyname+0x80>)
    7986:	47a8      	blx	r5
    7988:	0003      	movs	r3, r0
    798a:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    798c:	230f      	movs	r3, #15
    798e:	18fb      	adds	r3, r7, r3
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	b25b      	sxtb	r3, r3
    7994:	2b00      	cmp	r3, #0
    7996:	d003      	beq.n	79a0 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    7998:	230f      	movs	r3, #15
    799a:	18fb      	adds	r3, r7, r3
    799c:	22f7      	movs	r2, #247	; 0xf7
    799e:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    79a0:	230f      	movs	r3, #15
    79a2:	18fb      	adds	r3, r7, r3
    79a4:	781b      	ldrb	r3, [r3, #0]
    79a6:	b25b      	sxtb	r3, r3
}
    79a8:	0018      	movs	r0, r3
    79aa:	46bd      	mov	sp, r7
    79ac:	b004      	add	sp, #16
    79ae:	bdb0      	pop	{r4, r5, r7, pc}
    79b0:	000030b1 	.word	0x000030b1
    79b4:	0000344d 	.word	0x0000344d

000079b8 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    79b8:	b580      	push	{r7, lr}
    79ba:	b082      	sub	sp, #8
    79bc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    79be:	003b      	movs	r3, r7
    79c0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	22b9      	movs	r2, #185	; 0xb9
    79c6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    79c8:	4b13      	ldr	r3, [pc, #76]	; (7a18 <spi_flash_enter_low_power_mode+0x60>)
    79ca:	2100      	movs	r1, #0
    79cc:	0018      	movs	r0, r3
    79ce:	4b13      	ldr	r3, [pc, #76]	; (7a1c <spi_flash_enter_low_power_mode+0x64>)
    79d0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    79d2:	687b      	ldr	r3, [r7, #4]
    79d4:	781b      	ldrb	r3, [r3, #0]
    79d6:	001a      	movs	r2, r3
    79d8:	4b11      	ldr	r3, [pc, #68]	; (7a20 <spi_flash_enter_low_power_mode+0x68>)
    79da:	0011      	movs	r1, r2
    79dc:	0018      	movs	r0, r3
    79de:	4b0f      	ldr	r3, [pc, #60]	; (7a1c <spi_flash_enter_low_power_mode+0x64>)
    79e0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    79e2:	4b10      	ldr	r3, [pc, #64]	; (7a24 <spi_flash_enter_low_power_mode+0x6c>)
    79e4:	2101      	movs	r1, #1
    79e6:	0018      	movs	r0, r3
    79e8:	4b0c      	ldr	r3, [pc, #48]	; (7a1c <spi_flash_enter_low_power_mode+0x64>)
    79ea:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    79ec:	4b0e      	ldr	r3, [pc, #56]	; (7a28 <spi_flash_enter_low_power_mode+0x70>)
    79ee:	2100      	movs	r1, #0
    79f0:	0018      	movs	r0, r3
    79f2:	4b0a      	ldr	r3, [pc, #40]	; (7a1c <spi_flash_enter_low_power_mode+0x64>)
    79f4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    79f6:	4b0d      	ldr	r3, [pc, #52]	; (7a2c <spi_flash_enter_low_power_mode+0x74>)
    79f8:	2181      	movs	r1, #129	; 0x81
    79fa:	0018      	movs	r0, r3
    79fc:	4b07      	ldr	r3, [pc, #28]	; (7a1c <spi_flash_enter_low_power_mode+0x64>)
    79fe:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    7a00:	46c0      	nop			; (mov r8, r8)
    7a02:	4b0b      	ldr	r3, [pc, #44]	; (7a30 <spi_flash_enter_low_power_mode+0x78>)
    7a04:	0018      	movs	r0, r3
    7a06:	4b0b      	ldr	r3, [pc, #44]	; (7a34 <spi_flash_enter_low_power_mode+0x7c>)
    7a08:	4798      	blx	r3
    7a0a:	1e03      	subs	r3, r0, #0
    7a0c:	2b01      	cmp	r3, #1
    7a0e:	d1f8      	bne.n	7a02 <spi_flash_enter_low_power_mode+0x4a>
}
    7a10:	46c0      	nop			; (mov r8, r8)
    7a12:	46bd      	mov	sp, r7
    7a14:	b002      	add	sp, #8
    7a16:	bd80      	pop	{r7, pc}
    7a18:	00010208 	.word	0x00010208
    7a1c:	000053b1 	.word	0x000053b1
    7a20:	0001020c 	.word	0x0001020c
    7a24:	00010214 	.word	0x00010214
    7a28:	0001021c 	.word	0x0001021c
    7a2c:	00010204 	.word	0x00010204
    7a30:	00010218 	.word	0x00010218
    7a34:	0000536d 	.word	0x0000536d

00007a38 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    7a38:	b580      	push	{r7, lr}
    7a3a:	b082      	sub	sp, #8
    7a3c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    7a3e:	003b      	movs	r3, r7
    7a40:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    7a42:	687b      	ldr	r3, [r7, #4]
    7a44:	22ab      	movs	r2, #171	; 0xab
    7a46:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    7a48:	4b13      	ldr	r3, [pc, #76]	; (7a98 <spi_flash_leave_low_power_mode+0x60>)
    7a4a:	2100      	movs	r1, #0
    7a4c:	0018      	movs	r0, r3
    7a4e:	4b13      	ldr	r3, [pc, #76]	; (7a9c <spi_flash_leave_low_power_mode+0x64>)
    7a50:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    7a52:	687b      	ldr	r3, [r7, #4]
    7a54:	781b      	ldrb	r3, [r3, #0]
    7a56:	001a      	movs	r2, r3
    7a58:	4b11      	ldr	r3, [pc, #68]	; (7aa0 <spi_flash_leave_low_power_mode+0x68>)
    7a5a:	0011      	movs	r1, r2
    7a5c:	0018      	movs	r0, r3
    7a5e:	4b0f      	ldr	r3, [pc, #60]	; (7a9c <spi_flash_leave_low_power_mode+0x64>)
    7a60:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    7a62:	4b10      	ldr	r3, [pc, #64]	; (7aa4 <spi_flash_leave_low_power_mode+0x6c>)
    7a64:	2101      	movs	r1, #1
    7a66:	0018      	movs	r0, r3
    7a68:	4b0c      	ldr	r3, [pc, #48]	; (7a9c <spi_flash_leave_low_power_mode+0x64>)
    7a6a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    7a6c:	4b0e      	ldr	r3, [pc, #56]	; (7aa8 <spi_flash_leave_low_power_mode+0x70>)
    7a6e:	2100      	movs	r1, #0
    7a70:	0018      	movs	r0, r3
    7a72:	4b0a      	ldr	r3, [pc, #40]	; (7a9c <spi_flash_leave_low_power_mode+0x64>)
    7a74:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    7a76:	4b0d      	ldr	r3, [pc, #52]	; (7aac <spi_flash_leave_low_power_mode+0x74>)
    7a78:	2181      	movs	r1, #129	; 0x81
    7a7a:	0018      	movs	r0, r3
    7a7c:	4b07      	ldr	r3, [pc, #28]	; (7a9c <spi_flash_leave_low_power_mode+0x64>)
    7a7e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    7a80:	46c0      	nop			; (mov r8, r8)
    7a82:	4b0b      	ldr	r3, [pc, #44]	; (7ab0 <spi_flash_leave_low_power_mode+0x78>)
    7a84:	0018      	movs	r0, r3
    7a86:	4b0b      	ldr	r3, [pc, #44]	; (7ab4 <spi_flash_leave_low_power_mode+0x7c>)
    7a88:	4798      	blx	r3
    7a8a:	1e03      	subs	r3, r0, #0
    7a8c:	2b01      	cmp	r3, #1
    7a8e:	d1f8      	bne.n	7a82 <spi_flash_leave_low_power_mode+0x4a>
}
    7a90:	46c0      	nop			; (mov r8, r8)
    7a92:	46bd      	mov	sp, r7
    7a94:	b002      	add	sp, #8
    7a96:	bd80      	pop	{r7, pc}
    7a98:	00010208 	.word	0x00010208
    7a9c:	000053b1 	.word	0x000053b1
    7aa0:	0001020c 	.word	0x0001020c
    7aa4:	00010214 	.word	0x00010214
    7aa8:	0001021c 	.word	0x0001021c
    7aac:	00010204 	.word	0x00010204
    7ab0:	00010218 	.word	0x00010218
    7ab4:	0000536d 	.word	0x0000536d

00007ab8 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    7ab8:	b590      	push	{r4, r7, lr}
    7aba:	b085      	sub	sp, #20
    7abc:	af00      	add	r7, sp, #0
    7abe:	0002      	movs	r2, r0
    7ac0:	1dfb      	adds	r3, r7, #7
    7ac2:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    7ac4:	230f      	movs	r3, #15
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	2200      	movs	r2, #0
    7aca:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    7acc:	4b24      	ldr	r3, [pc, #144]	; (7b60 <spi_flash_enable+0xa8>)
    7ace:	4798      	blx	r3
    7ad0:	0003      	movs	r3, r0
    7ad2:	051b      	lsls	r3, r3, #20
    7ad4:	0d1b      	lsrs	r3, r3, #20
    7ad6:	4a23      	ldr	r2, [pc, #140]	; (7b64 <spi_flash_enable+0xac>)
    7ad8:	4293      	cmp	r3, r2
    7ada:	d938      	bls.n	7b4e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    7adc:	230f      	movs	r3, #15
    7ade:	18fc      	adds	r4, r7, r3
    7ae0:	2308      	movs	r3, #8
    7ae2:	18fb      	adds	r3, r7, r3
    7ae4:	4a20      	ldr	r2, [pc, #128]	; (7b68 <spi_flash_enable+0xb0>)
    7ae6:	0019      	movs	r1, r3
    7ae8:	0010      	movs	r0, r2
    7aea:	4b20      	ldr	r3, [pc, #128]	; (7b6c <spi_flash_enable+0xb4>)
    7aec:	4798      	blx	r3
    7aee:	0003      	movs	r3, r0
    7af0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    7af2:	230f      	movs	r3, #15
    7af4:	18fb      	adds	r3, r7, r3
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	b25b      	sxtb	r3, r3
    7afa:	2b00      	cmp	r3, #0
    7afc:	d126      	bne.n	7b4c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    7afe:	68bb      	ldr	r3, [r7, #8]
    7b00:	4a1b      	ldr	r2, [pc, #108]	; (7b70 <spi_flash_enable+0xb8>)
    7b02:	4013      	ands	r3, r2
    7b04:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    7b06:	68bb      	ldr	r3, [r7, #8]
    7b08:	4a1a      	ldr	r2, [pc, #104]	; (7b74 <spi_flash_enable+0xbc>)
    7b0a:	4313      	orrs	r3, r2
    7b0c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    7b0e:	68bb      	ldr	r3, [r7, #8]
    7b10:	4a15      	ldr	r2, [pc, #84]	; (7b68 <spi_flash_enable+0xb0>)
    7b12:	0019      	movs	r1, r3
    7b14:	0010      	movs	r0, r2
    7b16:	4b18      	ldr	r3, [pc, #96]	; (7b78 <spi_flash_enable+0xc0>)
    7b18:	4798      	blx	r3
		if(enable) {
    7b1a:	1dfb      	adds	r3, r7, #7
    7b1c:	781b      	ldrb	r3, [r3, #0]
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d002      	beq.n	7b28 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    7b22:	4b16      	ldr	r3, [pc, #88]	; (7b7c <spi_flash_enable+0xc4>)
    7b24:	4798      	blx	r3
    7b26:	e001      	b.n	7b2c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    7b28:	4b15      	ldr	r3, [pc, #84]	; (7b80 <spi_flash_enable+0xc8>)
    7b2a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    7b2c:	68bb      	ldr	r3, [r7, #8]
    7b2e:	4a10      	ldr	r2, [pc, #64]	; (7b70 <spi_flash_enable+0xb8>)
    7b30:	4013      	ands	r3, r2
    7b32:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    7b34:	68bb      	ldr	r3, [r7, #8]
    7b36:	2280      	movs	r2, #128	; 0x80
    7b38:	0252      	lsls	r2, r2, #9
    7b3a:	4313      	orrs	r3, r2
    7b3c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    7b3e:	68bb      	ldr	r3, [r7, #8]
    7b40:	4a09      	ldr	r2, [pc, #36]	; (7b68 <spi_flash_enable+0xb0>)
    7b42:	0019      	movs	r1, r3
    7b44:	0010      	movs	r0, r2
    7b46:	4b0c      	ldr	r3, [pc, #48]	; (7b78 <spi_flash_enable+0xc0>)
    7b48:	4798      	blx	r3
    7b4a:	e000      	b.n	7b4e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    7b4c:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    7b4e:	230f      	movs	r3, #15
    7b50:	18fb      	adds	r3, r7, r3
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	b25b      	sxtb	r3, r3
}
    7b56:	0018      	movs	r0, r3
    7b58:	46bd      	mov	sp, r7
    7b5a:	b005      	add	sp, #20
    7b5c:	bd90      	pop	{r4, r7, pc}
    7b5e:	46c0      	nop			; (mov r8, r8)
    7b60:	00004cf9 	.word	0x00004cf9
    7b64:	0000039f 	.word	0x0000039f
    7b68:	00001410 	.word	0x00001410
    7b6c:	0000538d 	.word	0x0000538d
    7b70:	f8888fff 	.word	0xf8888fff
    7b74:	01111000 	.word	0x01111000
    7b78:	000053b1 	.word	0x000053b1
    7b7c:	00007a39 	.word	0x00007a39
    7b80:	000079b9 	.word	0x000079b9

00007b84 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    7b84:	b580      	push	{r7, lr}
    7b86:	b082      	sub	sp, #8
    7b88:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7b8a:	4b10      	ldr	r3, [pc, #64]	; (7bcc <cpu_irq_enter_critical+0x48>)
    7b8c:	681b      	ldr	r3, [r3, #0]
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d112      	bne.n	7bb8 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7b92:	f3ef 8310 	mrs	r3, PRIMASK
    7b96:	607b      	str	r3, [r7, #4]
  return(result);
    7b98:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7b9a:	2b00      	cmp	r3, #0
    7b9c:	d109      	bne.n	7bb2 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    7b9e:	b672      	cpsid	i
    7ba0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    7ba4:	4b0a      	ldr	r3, [pc, #40]	; (7bd0 <cpu_irq_enter_critical+0x4c>)
    7ba6:	2200      	movs	r2, #0
    7ba8:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7baa:	4b0a      	ldr	r3, [pc, #40]	; (7bd4 <cpu_irq_enter_critical+0x50>)
    7bac:	2201      	movs	r2, #1
    7bae:	701a      	strb	r2, [r3, #0]
    7bb0:	e002      	b.n	7bb8 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    7bb2:	4b08      	ldr	r3, [pc, #32]	; (7bd4 <cpu_irq_enter_critical+0x50>)
    7bb4:	2200      	movs	r2, #0
    7bb6:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    7bb8:	4b04      	ldr	r3, [pc, #16]	; (7bcc <cpu_irq_enter_critical+0x48>)
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	1c5a      	adds	r2, r3, #1
    7bbe:	4b03      	ldr	r3, [pc, #12]	; (7bcc <cpu_irq_enter_critical+0x48>)
    7bc0:	601a      	str	r2, [r3, #0]
}
    7bc2:	46c0      	nop			; (mov r8, r8)
    7bc4:	46bd      	mov	sp, r7
    7bc6:	b002      	add	sp, #8
    7bc8:	bd80      	pop	{r7, pc}
    7bca:	46c0      	nop			; (mov r8, r8)
    7bcc:	200000f8 	.word	0x200000f8
    7bd0:	2000001c 	.word	0x2000001c
    7bd4:	200000fc 	.word	0x200000fc

00007bd8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7bd8:	b580      	push	{r7, lr}
    7bda:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7bdc:	4b0b      	ldr	r3, [pc, #44]	; (7c0c <cpu_irq_leave_critical+0x34>)
    7bde:	681b      	ldr	r3, [r3, #0]
    7be0:	1e5a      	subs	r2, r3, #1
    7be2:	4b0a      	ldr	r3, [pc, #40]	; (7c0c <cpu_irq_leave_critical+0x34>)
    7be4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    7be6:	4b09      	ldr	r3, [pc, #36]	; (7c0c <cpu_irq_leave_critical+0x34>)
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	2b00      	cmp	r3, #0
    7bec:	d10a      	bne.n	7c04 <cpu_irq_leave_critical+0x2c>
    7bee:	4b08      	ldr	r3, [pc, #32]	; (7c10 <cpu_irq_leave_critical+0x38>)
    7bf0:	781b      	ldrb	r3, [r3, #0]
    7bf2:	b2db      	uxtb	r3, r3
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	d005      	beq.n	7c04 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7bf8:	4b06      	ldr	r3, [pc, #24]	; (7c14 <cpu_irq_leave_critical+0x3c>)
    7bfa:	2201      	movs	r2, #1
    7bfc:	701a      	strb	r2, [r3, #0]
    7bfe:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    7c02:	b662      	cpsie	i
	}
}
    7c04:	46c0      	nop			; (mov r8, r8)
    7c06:	46bd      	mov	sp, r7
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)
    7c0c:	200000f8 	.word	0x200000f8
    7c10:	200000fc 	.word	0x200000fc
    7c14:	2000001c 	.word	0x2000001c

00007c18 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7c18:	b580      	push	{r7, lr}
    7c1a:	b084      	sub	sp, #16
    7c1c:	af00      	add	r7, sp, #0
    7c1e:	0002      	movs	r2, r0
    7c20:	1dfb      	adds	r3, r7, #7
    7c22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7c24:	230f      	movs	r3, #15
    7c26:	18fb      	adds	r3, r7, r3
    7c28:	1dfa      	adds	r2, r7, #7
    7c2a:	7812      	ldrb	r2, [r2, #0]
    7c2c:	09d2      	lsrs	r2, r2, #7
    7c2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7c30:	230e      	movs	r3, #14
    7c32:	18fb      	adds	r3, r7, r3
    7c34:	1dfa      	adds	r2, r7, #7
    7c36:	7812      	ldrb	r2, [r2, #0]
    7c38:	0952      	lsrs	r2, r2, #5
    7c3a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7c3c:	4b0d      	ldr	r3, [pc, #52]	; (7c74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7c3e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7c40:	230f      	movs	r3, #15
    7c42:	18fb      	adds	r3, r7, r3
    7c44:	781b      	ldrb	r3, [r3, #0]
    7c46:	2b00      	cmp	r3, #0
    7c48:	d10f      	bne.n	7c6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7c4a:	230f      	movs	r3, #15
    7c4c:	18fb      	adds	r3, r7, r3
    7c4e:	781b      	ldrb	r3, [r3, #0]
    7c50:	009b      	lsls	r3, r3, #2
    7c52:	2210      	movs	r2, #16
    7c54:	4694      	mov	ip, r2
    7c56:	44bc      	add	ip, r7
    7c58:	4463      	add	r3, ip
    7c5a:	3b08      	subs	r3, #8
    7c5c:	681a      	ldr	r2, [r3, #0]
    7c5e:	230e      	movs	r3, #14
    7c60:	18fb      	adds	r3, r7, r3
    7c62:	781b      	ldrb	r3, [r3, #0]
    7c64:	01db      	lsls	r3, r3, #7
    7c66:	18d3      	adds	r3, r2, r3
    7c68:	e000      	b.n	7c6c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7c6a:	2300      	movs	r3, #0
	}
}
    7c6c:	0018      	movs	r0, r3
    7c6e:	46bd      	mov	sp, r7
    7c70:	b004      	add	sp, #16
    7c72:	bd80      	pop	{r7, pc}
    7c74:	41004400 	.word	0x41004400

00007c78 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7c78:	b580      	push	{r7, lr}
    7c7a:	b082      	sub	sp, #8
    7c7c:	af00      	add	r7, sp, #0
    7c7e:	0002      	movs	r2, r0
    7c80:	1dfb      	adds	r3, r7, #7
    7c82:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7c84:	1dfb      	adds	r3, r7, #7
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	0018      	movs	r0, r3
    7c8a:	4b03      	ldr	r3, [pc, #12]	; (7c98 <port_get_group_from_gpio_pin+0x20>)
    7c8c:	4798      	blx	r3
    7c8e:	0003      	movs	r3, r0
}
    7c90:	0018      	movs	r0, r3
    7c92:	46bd      	mov	sp, r7
    7c94:	b002      	add	sp, #8
    7c96:	bd80      	pop	{r7, pc}
    7c98:	00007c19 	.word	0x00007c19

00007c9c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    7c9c:	b580      	push	{r7, lr}
    7c9e:	b082      	sub	sp, #8
    7ca0:	af00      	add	r7, sp, #0
    7ca2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    7ca4:	687b      	ldr	r3, [r7, #4]
    7ca6:	2200      	movs	r2, #0
    7ca8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7caa:	687b      	ldr	r3, [r7, #4]
    7cac:	2201      	movs	r2, #1
    7cae:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    7cb0:	687b      	ldr	r3, [r7, #4]
    7cb2:	2200      	movs	r2, #0
    7cb4:	709a      	strb	r2, [r3, #2]
}
    7cb6:	46c0      	nop			; (mov r8, r8)
    7cb8:	46bd      	mov	sp, r7
    7cba:	b002      	add	sp, #8
    7cbc:	bd80      	pop	{r7, pc}
    7cbe:	46c0      	nop			; (mov r8, r8)

00007cc0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    7cc0:	b580      	push	{r7, lr}
    7cc2:	b084      	sub	sp, #16
    7cc4:	af00      	add	r7, sp, #0
    7cc6:	0002      	movs	r2, r0
    7cc8:	1dfb      	adds	r3, r7, #7
    7cca:	701a      	strb	r2, [r3, #0]
    7ccc:	1dbb      	adds	r3, r7, #6
    7cce:	1c0a      	adds	r2, r1, #0
    7cd0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    7cd2:	1dfb      	adds	r3, r7, #7
    7cd4:	781b      	ldrb	r3, [r3, #0]
    7cd6:	0018      	movs	r0, r3
    7cd8:	4b0d      	ldr	r3, [pc, #52]	; (7d10 <port_pin_set_output_level+0x50>)
    7cda:	4798      	blx	r3
    7cdc:	0003      	movs	r3, r0
    7cde:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7ce0:	1dfb      	adds	r3, r7, #7
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	221f      	movs	r2, #31
    7ce6:	4013      	ands	r3, r2
    7ce8:	2201      	movs	r2, #1
    7cea:	409a      	lsls	r2, r3
    7cec:	0013      	movs	r3, r2
    7cee:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    7cf0:	1dbb      	adds	r3, r7, #6
    7cf2:	781b      	ldrb	r3, [r3, #0]
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	d003      	beq.n	7d00 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7cf8:	68fb      	ldr	r3, [r7, #12]
    7cfa:	68ba      	ldr	r2, [r7, #8]
    7cfc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    7cfe:	e002      	b.n	7d06 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    7d00:	68fb      	ldr	r3, [r7, #12]
    7d02:	68ba      	ldr	r2, [r7, #8]
    7d04:	615a      	str	r2, [r3, #20]
	}
}
    7d06:	46c0      	nop			; (mov r8, r8)
    7d08:	46bd      	mov	sp, r7
    7d0a:	b004      	add	sp, #16
    7d0c:	bd80      	pop	{r7, pc}
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	00007c79 	.word	0x00007c79

00007d14 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    7d14:	b580      	push	{r7, lr}
    7d16:	b082      	sub	sp, #8
    7d18:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    7d1a:	1d3b      	adds	r3, r7, #4
    7d1c:	0018      	movs	r0, r3
    7d1e:	4b0e      	ldr	r3, [pc, #56]	; (7d58 <system_board_init+0x44>)
    7d20:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7d22:	1d3b      	adds	r3, r7, #4
    7d24:	2201      	movs	r2, #1
    7d26:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    7d28:	1d3b      	adds	r3, r7, #4
    7d2a:	0019      	movs	r1, r3
    7d2c:	2017      	movs	r0, #23
    7d2e:	4b0b      	ldr	r3, [pc, #44]	; (7d5c <system_board_init+0x48>)
    7d30:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    7d32:	2101      	movs	r1, #1
    7d34:	2017      	movs	r0, #23
    7d36:	4b0a      	ldr	r3, [pc, #40]	; (7d60 <system_board_init+0x4c>)
    7d38:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7d3a:	1d3b      	adds	r3, r7, #4
    7d3c:	2200      	movs	r2, #0
    7d3e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    7d40:	1d3b      	adds	r3, r7, #4
    7d42:	2201      	movs	r2, #1
    7d44:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    7d46:	1d3b      	adds	r3, r7, #4
    7d48:	0019      	movs	r1, r3
    7d4a:	2037      	movs	r0, #55	; 0x37
    7d4c:	4b03      	ldr	r3, [pc, #12]	; (7d5c <system_board_init+0x48>)
    7d4e:	4798      	blx	r3
}
    7d50:	46c0      	nop			; (mov r8, r8)
    7d52:	46bd      	mov	sp, r7
    7d54:	b002      	add	sp, #8
    7d56:	bd80      	pop	{r7, pc}
    7d58:	00007c9d 	.word	0x00007c9d
    7d5c:	00008ded 	.word	0x00008ded
    7d60:	00007cc1 	.word	0x00007cc1

00007d64 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7d64:	b580      	push	{r7, lr}
    7d66:	b082      	sub	sp, #8
    7d68:	af00      	add	r7, sp, #0
    7d6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7d6c:	687b      	ldr	r3, [r7, #4]
    7d6e:	2200      	movs	r2, #0
    7d70:	701a      	strb	r2, [r3, #0]
}
    7d72:	46c0      	nop			; (mov r8, r8)
    7d74:	46bd      	mov	sp, r7
    7d76:	b002      	add	sp, #8
    7d78:	bd80      	pop	{r7, pc}
    7d7a:	46c0      	nop			; (mov r8, r8)

00007d7c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    7d7c:	b580      	push	{r7, lr}
    7d7e:	b082      	sub	sp, #8
    7d80:	af00      	add	r7, sp, #0
    7d82:	0002      	movs	r2, r0
    7d84:	6039      	str	r1, [r7, #0]
    7d86:	1dfb      	adds	r3, r7, #7
    7d88:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7d8a:	1dfb      	adds	r3, r7, #7
    7d8c:	781b      	ldrb	r3, [r3, #0]
    7d8e:	2b01      	cmp	r3, #1
    7d90:	d00a      	beq.n	7da8 <system_apb_clock_set_mask+0x2c>
    7d92:	2b02      	cmp	r3, #2
    7d94:	d00f      	beq.n	7db6 <system_apb_clock_set_mask+0x3a>
    7d96:	2b00      	cmp	r3, #0
    7d98:	d114      	bne.n	7dc4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    7d9a:	4b0e      	ldr	r3, [pc, #56]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7d9c:	4a0d      	ldr	r2, [pc, #52]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7d9e:	6991      	ldr	r1, [r2, #24]
    7da0:	683a      	ldr	r2, [r7, #0]
    7da2:	430a      	orrs	r2, r1
    7da4:	619a      	str	r2, [r3, #24]
			break;
    7da6:	e00f      	b.n	7dc8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    7da8:	4b0a      	ldr	r3, [pc, #40]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7daa:	4a0a      	ldr	r2, [pc, #40]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7dac:	69d1      	ldr	r1, [r2, #28]
    7dae:	683a      	ldr	r2, [r7, #0]
    7db0:	430a      	orrs	r2, r1
    7db2:	61da      	str	r2, [r3, #28]
			break;
    7db4:	e008      	b.n	7dc8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    7db6:	4b07      	ldr	r3, [pc, #28]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7db8:	4a06      	ldr	r2, [pc, #24]	; (7dd4 <system_apb_clock_set_mask+0x58>)
    7dba:	6a11      	ldr	r1, [r2, #32]
    7dbc:	683a      	ldr	r2, [r7, #0]
    7dbe:	430a      	orrs	r2, r1
    7dc0:	621a      	str	r2, [r3, #32]
			break;
    7dc2:	e001      	b.n	7dc8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7dc4:	2317      	movs	r3, #23
    7dc6:	e000      	b.n	7dca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    7dc8:	2300      	movs	r3, #0
}
    7dca:	0018      	movs	r0, r3
    7dcc:	46bd      	mov	sp, r7
    7dce:	b002      	add	sp, #8
    7dd0:	bd80      	pop	{r7, pc}
    7dd2:	46c0      	nop			; (mov r8, r8)
    7dd4:	40000400 	.word	0x40000400

00007dd8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    7dd8:	b580      	push	{r7, lr}
    7dda:	b082      	sub	sp, #8
    7ddc:	af00      	add	r7, sp, #0
    7dde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7de0:	687b      	ldr	r3, [r7, #4]
    7de2:	2280      	movs	r2, #128	; 0x80
    7de4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7de6:	687b      	ldr	r3, [r7, #4]
    7de8:	2200      	movs	r2, #0
    7dea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7dec:	687b      	ldr	r3, [r7, #4]
    7dee:	2201      	movs	r2, #1
    7df0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7df2:	687b      	ldr	r3, [r7, #4]
    7df4:	2200      	movs	r2, #0
    7df6:	70da      	strb	r2, [r3, #3]
}
    7df8:	46c0      	nop			; (mov r8, r8)
    7dfa:	46bd      	mov	sp, r7
    7dfc:	b002      	add	sp, #8
    7dfe:	bd80      	pop	{r7, pc}

00007e00 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b082      	sub	sp, #8
    7e04:	af00      	add	r7, sp, #0
    7e06:	0002      	movs	r2, r0
    7e08:	1dfb      	adds	r3, r7, #7
    7e0a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    7e0c:	1dfb      	adds	r3, r7, #7
    7e0e:	781b      	ldrb	r3, [r3, #0]
    7e10:	2b00      	cmp	r3, #0
    7e12:	d002      	beq.n	7e1a <system_voltage_reference_enable+0x1a>
    7e14:	2b01      	cmp	r3, #1
    7e16:	d007      	beq.n	7e28 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    7e18:	e00d      	b.n	7e36 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    7e1a:	4b08      	ldr	r3, [pc, #32]	; (7e3c <system_voltage_reference_enable+0x3c>)
    7e1c:	4a07      	ldr	r2, [pc, #28]	; (7e3c <system_voltage_reference_enable+0x3c>)
    7e1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    7e20:	2102      	movs	r1, #2
    7e22:	430a      	orrs	r2, r1
    7e24:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    7e26:	e006      	b.n	7e36 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    7e28:	4b04      	ldr	r3, [pc, #16]	; (7e3c <system_voltage_reference_enable+0x3c>)
    7e2a:	4a04      	ldr	r2, [pc, #16]	; (7e3c <system_voltage_reference_enable+0x3c>)
    7e2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    7e2e:	2104      	movs	r1, #4
    7e30:	430a      	orrs	r2, r1
    7e32:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    7e34:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    7e36:	46bd      	mov	sp, r7
    7e38:	b002      	add	sp, #8
    7e3a:	bd80      	pop	{r7, pc}
    7e3c:	40000800 	.word	0x40000800

00007e40 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    7e40:	b580      	push	{r7, lr}
    7e42:	b084      	sub	sp, #16
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    7e48:	687b      	ldr	r3, [r7, #4]
    7e4a:	681b      	ldr	r3, [r3, #0]
    7e4c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    7e4e:	68fb      	ldr	r3, [r7, #12]
    7e50:	7e5b      	ldrb	r3, [r3, #25]
    7e52:	b2db      	uxtb	r3, r3
    7e54:	b25b      	sxtb	r3, r3
    7e56:	2b00      	cmp	r3, #0
    7e58:	da01      	bge.n	7e5e <adc_is_syncing+0x1e>
		return true;
    7e5a:	2301      	movs	r3, #1
    7e5c:	e000      	b.n	7e60 <adc_is_syncing+0x20>
	}

	return false;
    7e5e:	2300      	movs	r3, #0
}
    7e60:	0018      	movs	r0, r3
    7e62:	46bd      	mov	sp, r7
    7e64:	b004      	add	sp, #16
    7e66:	bd80      	pop	{r7, pc}

00007e68 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    7e68:	b580      	push	{r7, lr}
    7e6a:	b082      	sub	sp, #8
    7e6c:	af00      	add	r7, sp, #0
    7e6e:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    7e70:	687b      	ldr	r3, [r7, #4]
    7e72:	2200      	movs	r2, #0
    7e74:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	2200      	movs	r2, #0
    7e7a:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    7e7c:	687b      	ldr	r3, [r7, #4]
    7e7e:	2200      	movs	r2, #0
    7e80:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    7e82:	687b      	ldr	r3, [r7, #4]
    7e84:	2200      	movs	r2, #0
    7e86:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	2200      	movs	r2, #0
    7e8c:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	2200      	movs	r2, #0
    7e92:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    7e94:	687b      	ldr	r3, [r7, #4]
    7e96:	2200      	movs	r2, #0
    7e98:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    7e9a:	687b      	ldr	r3, [r7, #4]
    7e9c:	2200      	movs	r2, #0
    7e9e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    7ea0:	687b      	ldr	r3, [r7, #4]
    7ea2:	2200      	movs	r2, #0
    7ea4:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    7ea6:	687b      	ldr	r3, [r7, #4]
    7ea8:	22c0      	movs	r2, #192	; 0xc0
    7eaa:	0152      	lsls	r2, r2, #5
    7eac:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    7eae:	687b      	ldr	r3, [r7, #4]
    7eb0:	2200      	movs	r2, #0
    7eb2:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    7eb4:	687b      	ldr	r3, [r7, #4]
    7eb6:	2200      	movs	r2, #0
    7eb8:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    7eba:	687b      	ldr	r3, [r7, #4]
    7ebc:	2200      	movs	r2, #0
    7ebe:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	2200      	movs	r2, #0
    7ec4:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    7ec6:	687b      	ldr	r3, [r7, #4]
    7ec8:	2200      	movs	r2, #0
    7eca:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	222a      	movs	r2, #42	; 0x2a
    7ed0:	2100      	movs	r1, #0
    7ed2:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	2200      	movs	r2, #0
    7ed8:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    7eda:	687b      	ldr	r3, [r7, #4]
    7edc:	2200      	movs	r2, #0
    7ede:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    7ee0:	687b      	ldr	r3, [r7, #4]
    7ee2:	2224      	movs	r2, #36	; 0x24
    7ee4:	2100      	movs	r1, #0
    7ee6:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    7ee8:	687b      	ldr	r3, [r7, #4]
    7eea:	2200      	movs	r2, #0
    7eec:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	2200      	movs	r2, #0
    7ef2:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    7ef4:	687b      	ldr	r3, [r7, #4]
    7ef6:	2200      	movs	r2, #0
    7ef8:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    7efa:	687b      	ldr	r3, [r7, #4]
    7efc:	222b      	movs	r2, #43	; 0x2b
    7efe:	2100      	movs	r1, #0
    7f00:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	222c      	movs	r2, #44	; 0x2c
    7f06:	2100      	movs	r1, #0
    7f08:	5499      	strb	r1, [r3, r2]
}
    7f0a:	46c0      	nop			; (mov r8, r8)
    7f0c:	46bd      	mov	sp, r7
    7f0e:	b002      	add	sp, #8
    7f10:	bd80      	pop	{r7, pc}
    7f12:	46c0      	nop			; (mov r8, r8)

00007f14 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b098      	sub	sp, #96	; 0x60
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    7f1c:	230c      	movs	r3, #12
    7f1e:	18fa      	adds	r2, r7, r3
    7f20:	4b15      	ldr	r3, [pc, #84]	; (7f78 <_adc_configure_ain_pin+0x64>)
    7f22:	0010      	movs	r0, r2
    7f24:	0019      	movs	r1, r3
    7f26:	2350      	movs	r3, #80	; 0x50
    7f28:	001a      	movs	r2, r3
    7f2a:	4b14      	ldr	r3, [pc, #80]	; (7f7c <_adc_configure_ain_pin+0x68>)
    7f2c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    7f2e:	4b14      	ldr	r3, [pc, #80]	; (7f80 <_adc_configure_ain_pin+0x6c>)
    7f30:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    7f32:	687b      	ldr	r3, [r7, #4]
    7f34:	2b13      	cmp	r3, #19
    7f36:	d81a      	bhi.n	7f6e <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    7f38:	230c      	movs	r3, #12
    7f3a:	18fb      	adds	r3, r7, r3
    7f3c:	687a      	ldr	r2, [r7, #4]
    7f3e:	0092      	lsls	r2, r2, #2
    7f40:	58d3      	ldr	r3, [r2, r3]
    7f42:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    7f44:	2308      	movs	r3, #8
    7f46:	18fb      	adds	r3, r7, r3
    7f48:	0018      	movs	r0, r3
    7f4a:	4b0e      	ldr	r3, [pc, #56]	; (7f84 <_adc_configure_ain_pin+0x70>)
    7f4c:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    7f4e:	2308      	movs	r3, #8
    7f50:	18fb      	adds	r3, r7, r3
    7f52:	2200      	movs	r2, #0
    7f54:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    7f56:	2308      	movs	r3, #8
    7f58:	18fb      	adds	r3, r7, r3
    7f5a:	2201      	movs	r2, #1
    7f5c:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    7f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7f60:	b2db      	uxtb	r3, r3
    7f62:	2208      	movs	r2, #8
    7f64:	18ba      	adds	r2, r7, r2
    7f66:	0011      	movs	r1, r2
    7f68:	0018      	movs	r0, r3
    7f6a:	4b07      	ldr	r3, [pc, #28]	; (7f88 <_adc_configure_ain_pin+0x74>)
    7f6c:	4798      	blx	r3
	}
}
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	46bd      	mov	sp, r7
    7f72:	b018      	add	sp, #96	; 0x60
    7f74:	bd80      	pop	{r7, pc}
    7f76:	46c0      	nop			; (mov r8, r8)
    7f78:	000135dc 	.word	0x000135dc
    7f7c:	00010c55 	.word	0x00010c55
    7f80:	0000ffff 	.word	0x0000ffff
    7f84:	00007dd9 	.word	0x00007dd9
    7f88:	0000bdb1 	.word	0x0000bdb1

00007f8c <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    7f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f8e:	b089      	sub	sp, #36	; 0x24
    7f90:	af00      	add	r7, sp, #0
    7f92:	6078      	str	r0, [r7, #4]
    7f94:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    7f96:	231f      	movs	r3, #31
    7f98:	18fb      	adds	r3, r7, r3
    7f9a:	2200      	movs	r2, #0
    7f9c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    7f9e:	2310      	movs	r3, #16
    7fa0:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    7fa2:	2317      	movs	r3, #23
    7fa4:	18fb      	adds	r3, r7, r3
    7fa6:	2200      	movs	r2, #0
    7fa8:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    7faa:	687b      	ldr	r3, [r7, #4]
    7fac:	681b      	ldr	r3, [r3, #0]
    7fae:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7fb0:	230c      	movs	r3, #12
    7fb2:	18fb      	adds	r3, r7, r3
    7fb4:	0018      	movs	r0, r3
    7fb6:	4bce      	ldr	r3, [pc, #824]	; (82f0 <_adc_set_config+0x364>)
    7fb8:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    7fba:	683b      	ldr	r3, [r7, #0]
    7fbc:	781a      	ldrb	r2, [r3, #0]
    7fbe:	230c      	movs	r3, #12
    7fc0:	18fb      	adds	r3, r7, r3
    7fc2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    7fc4:	230c      	movs	r3, #12
    7fc6:	18fb      	adds	r3, r7, r3
    7fc8:	0019      	movs	r1, r3
    7fca:	201e      	movs	r0, #30
    7fcc:	4bc9      	ldr	r3, [pc, #804]	; (82f4 <_adc_set_config+0x368>)
    7fce:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    7fd0:	201e      	movs	r0, #30
    7fd2:	4bc9      	ldr	r3, [pc, #804]	; (82f8 <_adc_set_config+0x36c>)
    7fd4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    7fd6:	683b      	ldr	r3, [r7, #0]
    7fd8:	222c      	movs	r2, #44	; 0x2c
    7fda:	5c9b      	ldrb	r3, [r3, r2]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d040      	beq.n	8062 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    7fe0:	2316      	movs	r3, #22
    7fe2:	18fb      	adds	r3, r7, r3
    7fe4:	683a      	ldr	r2, [r7, #0]
    7fe6:	212b      	movs	r1, #43	; 0x2b
    7fe8:	5c52      	ldrb	r2, [r2, r1]
    7fea:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    7fec:	683b      	ldr	r3, [r7, #0]
    7fee:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    7ff0:	2315      	movs	r3, #21
    7ff2:	18fb      	adds	r3, r7, r3
    7ff4:	2216      	movs	r2, #22
    7ff6:	18ba      	adds	r2, r7, r2
    7ff8:	7812      	ldrb	r2, [r2, #0]
    7ffa:	188a      	adds	r2, r1, r2
    7ffc:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    7ffe:	683b      	ldr	r3, [r7, #0]
    8000:	222c      	movs	r2, #44	; 0x2c
    8002:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    8004:	230f      	movs	r3, #15
    8006:	18fb      	adds	r3, r7, r3
    8008:	2215      	movs	r2, #21
    800a:	18ba      	adds	r2, r7, r2
    800c:	7812      	ldrb	r2, [r2, #0]
    800e:	188a      	adds	r2, r1, r2
    8010:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    8012:	e018      	b.n	8046 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    8014:	2316      	movs	r3, #22
    8016:	18fb      	adds	r3, r7, r3
    8018:	781b      	ldrb	r3, [r3, #0]
    801a:	220f      	movs	r2, #15
    801c:	4013      	ands	r3, r2
    801e:	683a      	ldr	r2, [r7, #0]
    8020:	7b12      	ldrb	r2, [r2, #12]
    8022:	189b      	adds	r3, r3, r2
    8024:	0018      	movs	r0, r3
    8026:	4bb5      	ldr	r3, [pc, #724]	; (82fc <_adc_set_config+0x370>)
    8028:	4798      	blx	r3
			start_pin++;
    802a:	2315      	movs	r3, #21
    802c:	18fb      	adds	r3, r7, r3
    802e:	781a      	ldrb	r2, [r3, #0]
    8030:	2315      	movs	r3, #21
    8032:	18fb      	adds	r3, r7, r3
    8034:	3201      	adds	r2, #1
    8036:	701a      	strb	r2, [r3, #0]
			offset++;
    8038:	2316      	movs	r3, #22
    803a:	18fb      	adds	r3, r7, r3
    803c:	781a      	ldrb	r2, [r3, #0]
    803e:	2316      	movs	r3, #22
    8040:	18fb      	adds	r3, r7, r3
    8042:	3201      	adds	r2, #1
    8044:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    8046:	2315      	movs	r3, #21
    8048:	18fa      	adds	r2, r7, r3
    804a:	230f      	movs	r3, #15
    804c:	18fb      	adds	r3, r7, r3
    804e:	7812      	ldrb	r2, [r2, #0]
    8050:	781b      	ldrb	r3, [r3, #0]
    8052:	429a      	cmp	r2, r3
    8054:	d3de      	bcc.n	8014 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    8056:	683b      	ldr	r3, [r7, #0]
    8058:	89db      	ldrh	r3, [r3, #14]
    805a:	0018      	movs	r0, r3
    805c:	4ba7      	ldr	r3, [pc, #668]	; (82fc <_adc_set_config+0x370>)
    805e:	4798      	blx	r3
    8060:	e009      	b.n	8076 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    8062:	683b      	ldr	r3, [r7, #0]
    8064:	7b1b      	ldrb	r3, [r3, #12]
    8066:	0018      	movs	r0, r3
    8068:	4ba4      	ldr	r3, [pc, #656]	; (82fc <_adc_set_config+0x370>)
    806a:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    806c:	683b      	ldr	r3, [r7, #0]
    806e:	89db      	ldrh	r3, [r3, #14]
    8070:	0018      	movs	r0, r3
    8072:	4ba2      	ldr	r3, [pc, #648]	; (82fc <_adc_set_config+0x370>)
    8074:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    8076:	683b      	ldr	r3, [r7, #0]
    8078:	7d5b      	ldrb	r3, [r3, #21]
    807a:	009b      	lsls	r3, r3, #2
    807c:	b2da      	uxtb	r2, r3
    807e:	693b      	ldr	r3, [r7, #16]
    8080:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8082:	683b      	ldr	r3, [r7, #0]
    8084:	7d9b      	ldrb	r3, [r3, #22]
    8086:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    8088:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    808a:	683b      	ldr	r3, [r7, #0]
    808c:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    808e:	b25b      	sxtb	r3, r3
    8090:	4313      	orrs	r3, r2
    8092:	b25b      	sxtb	r3, r3
    8094:	b2da      	uxtb	r2, r3
    8096:	693b      	ldr	r3, [r7, #16]
    8098:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    809a:	683b      	ldr	r3, [r7, #0]
    809c:	791b      	ldrb	r3, [r3, #4]
    809e:	2b34      	cmp	r3, #52	; 0x34
    80a0:	d846      	bhi.n	8130 <_adc_set_config+0x1a4>
    80a2:	009a      	lsls	r2, r3, #2
    80a4:	4b96      	ldr	r3, [pc, #600]	; (8300 <_adc_set_config+0x374>)
    80a6:	18d3      	adds	r3, r2, r3
    80a8:	681b      	ldr	r3, [r3, #0]
    80aa:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    80ac:	231f      	movs	r3, #31
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	683a      	ldr	r2, [r7, #0]
    80b2:	7c52      	ldrb	r2, [r2, #17]
    80b4:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    80b6:	2317      	movs	r3, #23
    80b8:	18fb      	adds	r3, r7, r3
    80ba:	683a      	ldr	r2, [r7, #0]
    80bc:	7c12      	ldrb	r2, [r2, #16]
    80be:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    80c0:	2310      	movs	r3, #16
    80c2:	61bb      	str	r3, [r7, #24]
		break;
    80c4:	e036      	b.n	8134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    80c6:	231f      	movs	r3, #31
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	2201      	movs	r2, #1
    80cc:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    80ce:	2317      	movs	r3, #23
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	2202      	movs	r2, #2
    80d4:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    80d6:	2310      	movs	r3, #16
    80d8:	61bb      	str	r3, [r7, #24]
		break;
    80da:	e02b      	b.n	8134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    80dc:	231f      	movs	r3, #31
    80de:	18fb      	adds	r3, r7, r3
    80e0:	2202      	movs	r2, #2
    80e2:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    80e4:	2317      	movs	r3, #23
    80e6:	18fb      	adds	r3, r7, r3
    80e8:	2204      	movs	r2, #4
    80ea:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    80ec:	2310      	movs	r3, #16
    80ee:	61bb      	str	r3, [r7, #24]
		break;
    80f0:	e020      	b.n	8134 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    80f2:	231f      	movs	r3, #31
    80f4:	18fb      	adds	r3, r7, r3
    80f6:	2201      	movs	r2, #1
    80f8:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    80fa:	2317      	movs	r3, #23
    80fc:	18fb      	adds	r3, r7, r3
    80fe:	2206      	movs	r2, #6
    8100:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8102:	2310      	movs	r3, #16
    8104:	61bb      	str	r3, [r7, #24]
		break;
    8106:	e015      	b.n	8134 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    8108:	231f      	movs	r3, #31
    810a:	18fb      	adds	r3, r7, r3
    810c:	2200      	movs	r2, #0
    810e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    8110:	2317      	movs	r3, #23
    8112:	18fb      	adds	r3, r7, r3
    8114:	2208      	movs	r2, #8
    8116:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8118:	2310      	movs	r3, #16
    811a:	61bb      	str	r3, [r7, #24]
		break;
    811c:	e00a      	b.n	8134 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    811e:	2330      	movs	r3, #48	; 0x30
    8120:	61bb      	str	r3, [r7, #24]
		break;
    8122:	e007      	b.n	8134 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    8124:	2320      	movs	r3, #32
    8126:	61bb      	str	r3, [r7, #24]
		break;
    8128:	e004      	b.n	8134 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    812a:	2300      	movs	r3, #0
    812c:	61bb      	str	r3, [r7, #24]
		break;
    812e:	e001      	b.n	8134 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    8130:	2317      	movs	r3, #23
    8132:	e1ae      	b.n	8492 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    8134:	231f      	movs	r3, #31
    8136:	18fb      	adds	r3, r7, r3
    8138:	781b      	ldrb	r3, [r3, #0]
    813a:	011b      	lsls	r3, r3, #4
    813c:	b2db      	uxtb	r3, r3
    813e:	2270      	movs	r2, #112	; 0x70
    8140:	4013      	ands	r3, r2
    8142:	b2da      	uxtb	r2, r3
    8144:	2317      	movs	r3, #23
    8146:	18fb      	adds	r3, r7, r3
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	4313      	orrs	r3, r2
    814c:	b2da      	uxtb	r2, r3
    814e:	693b      	ldr	r3, [r7, #16]
    8150:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    8152:	683b      	ldr	r3, [r7, #0]
    8154:	7ddb      	ldrb	r3, [r3, #23]
    8156:	2b3f      	cmp	r3, #63	; 0x3f
    8158:	d901      	bls.n	815e <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    815a:	2317      	movs	r3, #23
    815c:	e199      	b.n	8492 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    815e:	683b      	ldr	r3, [r7, #0]
    8160:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    8162:	693b      	ldr	r3, [r7, #16]
    8164:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    8166:	46c0      	nop			; (mov r8, r8)
    8168:	687b      	ldr	r3, [r7, #4]
    816a:	0018      	movs	r0, r3
    816c:	4b65      	ldr	r3, [pc, #404]	; (8304 <_adc_set_config+0x378>)
    816e:	4798      	blx	r3
    8170:	1e03      	subs	r3, r0, #0
    8172:	d1f9      	bne.n	8168 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    8174:	683b      	ldr	r3, [r7, #0]
    8176:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8178:	69bb      	ldr	r3, [r7, #24]
    817a:	b29b      	uxth	r3, r3
    817c:	4313      	orrs	r3, r2
    817e:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8180:	683b      	ldr	r3, [r7, #0]
    8182:	2124      	movs	r1, #36	; 0x24
    8184:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8186:	b29b      	uxth	r3, r3
    8188:	00db      	lsls	r3, r3, #3
    818a:	b29b      	uxth	r3, r3
    818c:	4313      	orrs	r3, r2
    818e:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8190:	683b      	ldr	r3, [r7, #0]
    8192:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8194:	b29b      	uxth	r3, r3
    8196:	009b      	lsls	r3, r3, #2
    8198:	b29b      	uxth	r3, r3
    819a:	4313      	orrs	r3, r2
    819c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    819e:	683b      	ldr	r3, [r7, #0]
    81a0:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    81a2:	b29b      	uxth	r3, r3
    81a4:	18db      	adds	r3, r3, r3
    81a6:	b29b      	uxth	r3, r3
    81a8:	4313      	orrs	r3, r2
    81aa:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    81ac:	683b      	ldr	r3, [r7, #0]
    81ae:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    81b0:	b29b      	uxth	r3, r3
    81b2:	4313      	orrs	r3, r2
    81b4:	b29a      	uxth	r2, r3
    81b6:	693b      	ldr	r3, [r7, #16]
    81b8:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    81ba:	683b      	ldr	r3, [r7, #0]
    81bc:	7e1b      	ldrb	r3, [r3, #24]
    81be:	2b00      	cmp	r3, #0
    81c0:	d100      	bne.n	81c4 <_adc_set_config+0x238>
    81c2:	e0c4      	b.n	834e <_adc_set_config+0x3c2>
		switch (resolution) {
    81c4:	69bb      	ldr	r3, [r7, #24]
    81c6:	2b10      	cmp	r3, #16
    81c8:	d100      	bne.n	81cc <_adc_set_config+0x240>
    81ca:	e076      	b.n	82ba <_adc_set_config+0x32e>
    81cc:	d802      	bhi.n	81d4 <_adc_set_config+0x248>
    81ce:	2b00      	cmp	r3, #0
    81d0:	d04d      	beq.n	826e <_adc_set_config+0x2e2>
    81d2:	e0bc      	b.n	834e <_adc_set_config+0x3c2>
    81d4:	2b20      	cmp	r3, #32
    81d6:	d023      	beq.n	8220 <_adc_set_config+0x294>
    81d8:	2b30      	cmp	r3, #48	; 0x30
    81da:	d000      	beq.n	81de <_adc_set_config+0x252>
    81dc:	e0b7      	b.n	834e <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    81de:	683b      	ldr	r3, [r7, #0]
    81e0:	7cdb      	ldrb	r3, [r3, #19]
    81e2:	2b00      	cmp	r3, #0
    81e4:	d011      	beq.n	820a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    81e6:	683b      	ldr	r3, [r7, #0]
    81e8:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    81ea:	2b7f      	cmp	r3, #127	; 0x7f
    81ec:	dc0b      	bgt.n	8206 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    81ee:	683b      	ldr	r3, [r7, #0]
    81f0:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    81f2:	3380      	adds	r3, #128	; 0x80
    81f4:	db07      	blt.n	8206 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    81f6:	683b      	ldr	r3, [r7, #0]
    81f8:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    81fa:	2b7f      	cmp	r3, #127	; 0x7f
    81fc:	dc03      	bgt.n	8206 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    81fe:	683b      	ldr	r3, [r7, #0]
    8200:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    8202:	3380      	adds	r3, #128	; 0x80
    8204:	da01      	bge.n	820a <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8206:	2317      	movs	r3, #23
    8208:	e143      	b.n	8492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    820a:	683b      	ldr	r3, [r7, #0]
    820c:	69db      	ldr	r3, [r3, #28]
    820e:	2bff      	cmp	r3, #255	; 0xff
    8210:	dc04      	bgt.n	821c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    8212:	683b      	ldr	r3, [r7, #0]
    8214:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    8216:	2bff      	cmp	r3, #255	; 0xff
    8218:	dc00      	bgt.n	821c <_adc_set_config+0x290>
    821a:	e091      	b.n	8340 <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    821c:	2317      	movs	r3, #23
    821e:	e138      	b.n	8492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    8220:	683b      	ldr	r3, [r7, #0]
    8222:	7cdb      	ldrb	r3, [r3, #19]
    8224:	2b00      	cmp	r3, #0
    8226:	d015      	beq.n	8254 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    8228:	683b      	ldr	r3, [r7, #0]
    822a:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    822c:	4a36      	ldr	r2, [pc, #216]	; (8308 <_adc_set_config+0x37c>)
    822e:	4293      	cmp	r3, r2
    8230:	dc0e      	bgt.n	8250 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    8232:	683b      	ldr	r3, [r7, #0]
    8234:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    8236:	4a35      	ldr	r2, [pc, #212]	; (830c <_adc_set_config+0x380>)
    8238:	4293      	cmp	r3, r2
    823a:	db09      	blt.n	8250 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    823c:	683b      	ldr	r3, [r7, #0]
    823e:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    8240:	4a31      	ldr	r2, [pc, #196]	; (8308 <_adc_set_config+0x37c>)
    8242:	4293      	cmp	r3, r2
    8244:	dc04      	bgt.n	8250 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
    8246:	683b      	ldr	r3, [r7, #0]
    8248:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    824a:	4a30      	ldr	r2, [pc, #192]	; (830c <_adc_set_config+0x380>)
    824c:	4293      	cmp	r3, r2
    824e:	da01      	bge.n	8254 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    8250:	2317      	movs	r3, #23
    8252:	e11e      	b.n	8492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    8254:	683b      	ldr	r3, [r7, #0]
    8256:	69db      	ldr	r3, [r3, #28]
    8258:	4a2d      	ldr	r2, [pc, #180]	; (8310 <_adc_set_config+0x384>)
    825a:	4293      	cmp	r3, r2
    825c:	dc05      	bgt.n	826a <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    825e:	683b      	ldr	r3, [r7, #0]
    8260:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    8262:	4a2b      	ldr	r2, [pc, #172]	; (8310 <_adc_set_config+0x384>)
    8264:	4293      	cmp	r3, r2
    8266:	dc00      	bgt.n	826a <_adc_set_config+0x2de>
    8268:	e06c      	b.n	8344 <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    826a:	2317      	movs	r3, #23
    826c:	e111      	b.n	8492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    826e:	683b      	ldr	r3, [r7, #0]
    8270:	7cdb      	ldrb	r3, [r3, #19]
    8272:	2b00      	cmp	r3, #0
    8274:	d015      	beq.n	82a2 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    8276:	683b      	ldr	r3, [r7, #0]
    8278:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    827a:	4a26      	ldr	r2, [pc, #152]	; (8314 <_adc_set_config+0x388>)
    827c:	4293      	cmp	r3, r2
    827e:	dc0e      	bgt.n	829e <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    8280:	683b      	ldr	r3, [r7, #0]
    8282:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    8284:	4a24      	ldr	r2, [pc, #144]	; (8318 <_adc_set_config+0x38c>)
    8286:	4293      	cmp	r3, r2
    8288:	db09      	blt.n	829e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    828a:	683b      	ldr	r3, [r7, #0]
    828c:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    828e:	4a21      	ldr	r2, [pc, #132]	; (8314 <_adc_set_config+0x388>)
    8290:	4293      	cmp	r3, r2
    8292:	dc04      	bgt.n	829e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    8294:	683b      	ldr	r3, [r7, #0]
    8296:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    8298:	4a1f      	ldr	r2, [pc, #124]	; (8318 <_adc_set_config+0x38c>)
    829a:	4293      	cmp	r3, r2
    829c:	da01      	bge.n	82a2 <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    829e:	2317      	movs	r3, #23
    82a0:	e0f7      	b.n	8492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    82a2:	683b      	ldr	r3, [r7, #0]
    82a4:	69db      	ldr	r3, [r3, #28]
    82a6:	4a1d      	ldr	r2, [pc, #116]	; (831c <_adc_set_config+0x390>)
    82a8:	4293      	cmp	r3, r2
    82aa:	dc04      	bgt.n	82b6 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    82ac:	683b      	ldr	r3, [r7, #0]
    82ae:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    82b0:	4a1a      	ldr	r2, [pc, #104]	; (831c <_adc_set_config+0x390>)
    82b2:	4293      	cmp	r3, r2
    82b4:	dd48      	ble.n	8348 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    82b6:	2317      	movs	r3, #23
    82b8:	e0eb      	b.n	8492 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    82ba:	683b      	ldr	r3, [r7, #0]
    82bc:	7cdb      	ldrb	r3, [r3, #19]
    82be:	2b00      	cmp	r3, #0
    82c0:	d032      	beq.n	8328 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    82c2:	683b      	ldr	r3, [r7, #0]
    82c4:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    82c6:	4a16      	ldr	r2, [pc, #88]	; (8320 <_adc_set_config+0x394>)
    82c8:	4293      	cmp	r3, r2
    82ca:	dc0e      	bgt.n	82ea <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    82cc:	683b      	ldr	r3, [r7, #0]
    82ce:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    82d0:	4a14      	ldr	r2, [pc, #80]	; (8324 <_adc_set_config+0x398>)
    82d2:	4293      	cmp	r3, r2
    82d4:	db09      	blt.n	82ea <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    82d6:	683b      	ldr	r3, [r7, #0]
    82d8:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    82da:	4a11      	ldr	r2, [pc, #68]	; (8320 <_adc_set_config+0x394>)
    82dc:	4293      	cmp	r3, r2
    82de:	dc04      	bgt.n	82ea <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    82e0:	683b      	ldr	r3, [r7, #0]
    82e2:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    82e4:	4a0f      	ldr	r2, [pc, #60]	; (8324 <_adc_set_config+0x398>)
    82e6:	4293      	cmp	r3, r2
    82e8:	da1e      	bge.n	8328 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    82ea:	2317      	movs	r3, #23
    82ec:	e0d1      	b.n	8492 <_adc_set_config+0x506>
    82ee:	46c0      	nop			; (mov r8, r8)
    82f0:	00007d65 	.word	0x00007d65
    82f4:	0000bac5 	.word	0x0000bac5
    82f8:	0000bb09 	.word	0x0000bb09
    82fc:	00007f15 	.word	0x00007f15
    8300:	0001362c 	.word	0x0001362c
    8304:	00007e41 	.word	0x00007e41
    8308:	000001ff 	.word	0x000001ff
    830c:	fffffe00 	.word	0xfffffe00
    8310:	000003ff 	.word	0x000003ff
    8314:	000007ff 	.word	0x000007ff
    8318:	fffff800 	.word	0xfffff800
    831c:	00000fff 	.word	0x00000fff
    8320:	00007fff 	.word	0x00007fff
    8324:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    8328:	683b      	ldr	r3, [r7, #0]
    832a:	69db      	ldr	r3, [r3, #28]
    832c:	4a5b      	ldr	r2, [pc, #364]	; (849c <_adc_set_config+0x510>)
    832e:	4293      	cmp	r3, r2
    8330:	dc04      	bgt.n	833c <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    8332:	683b      	ldr	r3, [r7, #0]
    8334:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    8336:	4a59      	ldr	r2, [pc, #356]	; (849c <_adc_set_config+0x510>)
    8338:	4293      	cmp	r3, r2
    833a:	dd07      	ble.n	834c <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    833c:	2317      	movs	r3, #23
    833e:	e0a8      	b.n	8492 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    8340:	46c0      	nop			; (mov r8, r8)
    8342:	e004      	b.n	834e <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    8344:	46c0      	nop			; (mov r8, r8)
    8346:	e002      	b.n	834e <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    8348:	46c0      	nop			; (mov r8, r8)
    834a:	e000      	b.n	834e <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    834c:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    834e:	46c0      	nop			; (mov r8, r8)
    8350:	687b      	ldr	r3, [r7, #4]
    8352:	0018      	movs	r0, r3
    8354:	4b52      	ldr	r3, [pc, #328]	; (84a0 <_adc_set_config+0x514>)
    8356:	4798      	blx	r3
    8358:	1e03      	subs	r3, r0, #0
    835a:	d1f9      	bne.n	8350 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    835c:	683b      	ldr	r3, [r7, #0]
    835e:	7e1a      	ldrb	r2, [r3, #24]
    8360:	693b      	ldr	r3, [r7, #16]
    8362:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    8364:	46c0      	nop			; (mov r8, r8)
    8366:	687b      	ldr	r3, [r7, #4]
    8368:	0018      	movs	r0, r3
    836a:	4b4d      	ldr	r3, [pc, #308]	; (84a0 <_adc_set_config+0x514>)
    836c:	4798      	blx	r3
    836e:	1e03      	subs	r3, r0, #0
    8370:	d1f9      	bne.n	8366 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    8372:	683b      	ldr	r3, [r7, #0]
    8374:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    8376:	b29a      	uxth	r2, r3
    8378:	693b      	ldr	r3, [r7, #16]
    837a:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    837c:	46c0      	nop			; (mov r8, r8)
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	0018      	movs	r0, r3
    8382:	4b47      	ldr	r3, [pc, #284]	; (84a0 <_adc_set_config+0x514>)
    8384:	4798      	blx	r3
    8386:	1e03      	subs	r3, r0, #0
    8388:	d1f9      	bne.n	837e <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    838a:	683b      	ldr	r3, [r7, #0]
    838c:	6a1b      	ldr	r3, [r3, #32]
    838e:	b29a      	uxth	r2, r3
    8390:	693b      	ldr	r3, [r7, #16]
    8392:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    8394:	2314      	movs	r3, #20
    8396:	18fb      	adds	r3, r7, r3
    8398:	683a      	ldr	r2, [r7, #0]
    839a:	212c      	movs	r1, #44	; 0x2c
    839c:	5c52      	ldrb	r2, [r2, r1]
    839e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    83a0:	2314      	movs	r3, #20
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	2b00      	cmp	r3, #0
    83a8:	d006      	beq.n	83b8 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    83aa:	2314      	movs	r3, #20
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	781a      	ldrb	r2, [r3, #0]
    83b0:	2314      	movs	r3, #20
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	3a01      	subs	r2, #1
    83b6:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    83b8:	2314      	movs	r3, #20
    83ba:	18fb      	adds	r3, r7, r3
    83bc:	781b      	ldrb	r3, [r3, #0]
    83be:	2b0f      	cmp	r3, #15
    83c0:	d804      	bhi.n	83cc <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    83c2:	683b      	ldr	r3, [r7, #0]
    83c4:	222b      	movs	r2, #43	; 0x2b
    83c6:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    83c8:	2b0f      	cmp	r3, #15
    83ca:	d901      	bls.n	83d0 <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    83cc:	2317      	movs	r3, #23
    83ce:	e060      	b.n	8492 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    83d0:	46c0      	nop			; (mov r8, r8)
    83d2:	687b      	ldr	r3, [r7, #4]
    83d4:	0018      	movs	r0, r3
    83d6:	4b32      	ldr	r3, [pc, #200]	; (84a0 <_adc_set_config+0x514>)
    83d8:	4798      	blx	r3
    83da:	1e03      	subs	r3, r0, #0
    83dc:	d1f9      	bne.n	83d2 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    83de:	683b      	ldr	r3, [r7, #0]
    83e0:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    83e2:	683a      	ldr	r2, [r7, #0]
    83e4:	212b      	movs	r1, #43	; 0x2b
    83e6:	5c52      	ldrb	r2, [r2, r1]
    83e8:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    83ea:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    83ec:	2214      	movs	r2, #20
    83ee:	18ba      	adds	r2, r7, r2
    83f0:	7812      	ldrb	r2, [r2, #0]
    83f2:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    83f4:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    83f6:	683a      	ldr	r2, [r7, #0]
    83f8:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    83fa:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
    83fc:	683a      	ldr	r2, [r7, #0]
    83fe:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    8400:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    8402:	693b      	ldr	r3, [r7, #16]
    8404:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    8406:	683b      	ldr	r3, [r7, #0]
    8408:	222a      	movs	r2, #42	; 0x2a
    840a:	5c9a      	ldrb	r2, [r3, r2]
    840c:	693b      	ldr	r3, [r7, #16]
    840e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    8410:	693b      	ldr	r3, [r7, #16]
    8412:	220f      	movs	r2, #15
    8414:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    8416:	683b      	ldr	r3, [r7, #0]
    8418:	2224      	movs	r2, #36	; 0x24
    841a:	5c9b      	ldrb	r3, [r3, r2]
    841c:	2b00      	cmp	r3, #0
    841e:	d01e      	beq.n	845e <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    8424:	4a1f      	ldr	r2, [pc, #124]	; (84a4 <_adc_set_config+0x518>)
    8426:	4293      	cmp	r3, r2
    8428:	d901      	bls.n	842e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    842a:	2317      	movs	r3, #23
    842c:	e031      	b.n	8492 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    842e:	683b      	ldr	r3, [r7, #0]
    8430:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    8432:	693b      	ldr	r3, [r7, #16]
    8434:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    8436:	683b      	ldr	r3, [r7, #0]
    8438:	2228      	movs	r2, #40	; 0x28
    843a:	5e9b      	ldrsh	r3, [r3, r2]
    843c:	4a1a      	ldr	r2, [pc, #104]	; (84a8 <_adc_set_config+0x51c>)
    843e:	4293      	cmp	r3, r2
    8440:	dc05      	bgt.n	844e <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    8442:	683b      	ldr	r3, [r7, #0]
    8444:	2228      	movs	r2, #40	; 0x28
    8446:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    8448:	4a18      	ldr	r2, [pc, #96]	; (84ac <_adc_set_config+0x520>)
    844a:	4293      	cmp	r3, r2
    844c:	da01      	bge.n	8452 <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    844e:	2317      	movs	r3, #23
    8450:	e01f      	b.n	8492 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    8452:	683b      	ldr	r3, [r7, #0]
    8454:	2228      	movs	r2, #40	; 0x28
    8456:	5e9b      	ldrsh	r3, [r3, r2]
    8458:	b29a      	uxth	r2, r3
    845a:	693b      	ldr	r3, [r7, #16]
    845c:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    845e:	4b14      	ldr	r3, [pc, #80]	; (84b0 <_adc_set_config+0x524>)
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    8464:	b29b      	uxth	r3, r3
    8466:	021b      	lsls	r3, r3, #8
    8468:	b29a      	uxth	r2, r3
    846a:	23e0      	movs	r3, #224	; 0xe0
    846c:	00db      	lsls	r3, r3, #3
    846e:	4013      	ands	r3, r2
    8470:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    8472:	4b10      	ldr	r3, [pc, #64]	; (84b4 <_adc_set_config+0x528>)
    8474:	685c      	ldr	r4, [r3, #4]
    8476:	681b      	ldr	r3, [r3, #0]
    8478:	0161      	lsls	r1, r4, #5
    847a:	0edd      	lsrs	r5, r3, #27
    847c:	430d      	orrs	r5, r1
    847e:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    8480:	b2ab      	uxth	r3, r5
    8482:	21ff      	movs	r1, #255	; 0xff
    8484:	400b      	ands	r3, r1
    8486:	b29b      	uxth	r3, r3
    8488:	4313      	orrs	r3, r2
    848a:	b29a      	uxth	r2, r3
    848c:	693b      	ldr	r3, [r7, #16]
    848e:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    8490:	2300      	movs	r3, #0
}
    8492:	0018      	movs	r0, r3
    8494:	46bd      	mov	sp, r7
    8496:	b009      	add	sp, #36	; 0x24
    8498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	0000ffff 	.word	0x0000ffff
    84a0:	00007e41 	.word	0x00007e41
    84a4:	00000fff 	.word	0x00000fff
    84a8:	000007ff 	.word	0x000007ff
    84ac:	fffff800 	.word	0xfffff800
    84b0:	00806024 	.word	0x00806024
    84b4:	00806020 	.word	0x00806020

000084b8 <adc_regular_ain_channel>:
 *
 * \param[in]  pin_array   The array of the Mux selection for the positive ADC input
 * \param[in]  size        The size of pin_array
 */
void adc_regular_ain_channel(uint32_t *pin_array, uint8_t size)
{
    84b8:	b580      	push	{r7, lr}
    84ba:	b084      	sub	sp, #16
    84bc:	af00      	add	r7, sp, #0
    84be:	6078      	str	r0, [r7, #4]
    84c0:	000a      	movs	r2, r1
    84c2:	1cfb      	adds	r3, r7, #3
    84c4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
    84c6:	2300      	movs	r3, #0
    84c8:	60fb      	str	r3, [r7, #12]
    84ca:	e00a      	b.n	84e2 <adc_regular_ain_channel+0x2a>
		_adc_configure_ain_pin(pin_array[i]);
    84cc:	68fb      	ldr	r3, [r7, #12]
    84ce:	009b      	lsls	r3, r3, #2
    84d0:	687a      	ldr	r2, [r7, #4]
    84d2:	18d3      	adds	r3, r2, r3
    84d4:	681b      	ldr	r3, [r3, #0]
    84d6:	0018      	movs	r0, r3
    84d8:	4b06      	ldr	r3, [pc, #24]	; (84f4 <adc_regular_ain_channel+0x3c>)
    84da:	4798      	blx	r3
 * \param[in]  pin_array   The array of the Mux selection for the positive ADC input
 * \param[in]  size        The size of pin_array
 */
void adc_regular_ain_channel(uint32_t *pin_array, uint8_t size)
{
	for (int i = 0; i < size; i++) {
    84dc:	68fb      	ldr	r3, [r7, #12]
    84de:	3301      	adds	r3, #1
    84e0:	60fb      	str	r3, [r7, #12]
    84e2:	1cfb      	adds	r3, r7, #3
    84e4:	781a      	ldrb	r2, [r3, #0]
    84e6:	68fb      	ldr	r3, [r7, #12]
    84e8:	429a      	cmp	r2, r3
    84ea:	dcef      	bgt.n	84cc <adc_regular_ain_channel+0x14>
		_adc_configure_ain_pin(pin_array[i]);
  	}
}	
    84ec:	46c0      	nop			; (mov r8, r8)
    84ee:	46bd      	mov	sp, r7
    84f0:	b004      	add	sp, #16
    84f2:	bd80      	pop	{r7, pc}
    84f4:	00007f15 	.word	0x00007f15

000084f8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    84f8:	b580      	push	{r7, lr}
    84fa:	b086      	sub	sp, #24
    84fc:	af00      	add	r7, sp, #0
    84fe:	60f8      	str	r0, [r7, #12]
    8500:	60b9      	str	r1, [r7, #8]
    8502:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    8504:	68fb      	ldr	r3, [r7, #12]
    8506:	68ba      	ldr	r2, [r7, #8]
    8508:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    850a:	2380      	movs	r3, #128	; 0x80
    850c:	025b      	lsls	r3, r3, #9
    850e:	0019      	movs	r1, r3
    8510:	2002      	movs	r0, #2
    8512:	4b32      	ldr	r3, [pc, #200]	; (85dc <adc_init+0xe4>)
    8514:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    8516:	68bb      	ldr	r3, [r7, #8]
    8518:	781b      	ldrb	r3, [r3, #0]
    851a:	b2db      	uxtb	r3, r3
    851c:	001a      	movs	r2, r3
    851e:	2301      	movs	r3, #1
    8520:	4013      	ands	r3, r2
    8522:	d001      	beq.n	8528 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    8524:	2305      	movs	r3, #5
    8526:	e055      	b.n	85d4 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    8528:	68bb      	ldr	r3, [r7, #8]
    852a:	781b      	ldrb	r3, [r3, #0]
    852c:	b2db      	uxtb	r3, r3
    852e:	001a      	movs	r2, r3
    8530:	2302      	movs	r3, #2
    8532:	4013      	ands	r3, r2
    8534:	d001      	beq.n	853a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    8536:	231c      	movs	r3, #28
    8538:	e04c      	b.n	85d4 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    853a:	687b      	ldr	r3, [r7, #4]
    853c:	785a      	ldrb	r2, [r3, #1]
    853e:	68fb      	ldr	r3, [r7, #12]
    8540:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    8542:	68fb      	ldr	r3, [r7, #12]
    8544:	791b      	ldrb	r3, [r3, #4]
    8546:	2b00      	cmp	r3, #0
    8548:	d102      	bne.n	8550 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    854a:	2001      	movs	r0, #1
    854c:	4b24      	ldr	r3, [pc, #144]	; (85e0 <adc_init+0xe8>)
    854e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    8550:	2317      	movs	r3, #23
    8552:	18fb      	adds	r3, r7, r3
    8554:	2200      	movs	r2, #0
    8556:	701a      	strb	r2, [r3, #0]
    8558:	e00e      	b.n	8578 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    855a:	2317      	movs	r3, #23
    855c:	18fb      	adds	r3, r7, r3
    855e:	781a      	ldrb	r2, [r3, #0]
    8560:	68fb      	ldr	r3, [r7, #12]
    8562:	3202      	adds	r2, #2
    8564:	0092      	lsls	r2, r2, #2
    8566:	2100      	movs	r1, #0
    8568:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    856a:	2317      	movs	r3, #23
    856c:	18fb      	adds	r3, r7, r3
    856e:	781a      	ldrb	r2, [r3, #0]
    8570:	2317      	movs	r3, #23
    8572:	18fb      	adds	r3, r7, r3
    8574:	3201      	adds	r2, #1
    8576:	701a      	strb	r2, [r3, #0]
    8578:	2317      	movs	r3, #23
    857a:	18fb      	adds	r3, r7, r3
    857c:	781b      	ldrb	r3, [r3, #0]
    857e:	2b02      	cmp	r3, #2
    8580:	d9eb      	bls.n	855a <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    8582:	68fb      	ldr	r3, [r7, #12]
    8584:	2200      	movs	r2, #0
    8586:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    8588:	68fb      	ldr	r3, [r7, #12]
    858a:	2200      	movs	r2, #0
    858c:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    858e:	68fb      	ldr	r3, [r7, #12]
    8590:	2200      	movs	r2, #0
    8592:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    8594:	68fb      	ldr	r3, [r7, #12]
    8596:	2200      	movs	r2, #0
    8598:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    859a:	4b12      	ldr	r3, [pc, #72]	; (85e4 <adc_init+0xec>)
    859c:	68fa      	ldr	r2, [r7, #12]
    859e:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    85a0:	687b      	ldr	r3, [r7, #4]
    85a2:	222a      	movs	r2, #42	; 0x2a
    85a4:	5c9b      	ldrb	r3, [r3, r2]
    85a6:	2b00      	cmp	r3, #0
    85a8:	d10a      	bne.n	85c0 <adc_init+0xc8>
			!config->freerunning) {
    85aa:	687b      	ldr	r3, [r7, #4]
    85ac:	7d1b      	ldrb	r3, [r3, #20]
    85ae:	2201      	movs	r2, #1
    85b0:	4053      	eors	r3, r2
    85b2:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    85b4:	2b00      	cmp	r3, #0
    85b6:	d003      	beq.n	85c0 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    85b8:	68fb      	ldr	r3, [r7, #12]
    85ba:	2201      	movs	r2, #1
    85bc:	775a      	strb	r2, [r3, #29]
    85be:	e002      	b.n	85c6 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    85c0:	68fb      	ldr	r3, [r7, #12]
    85c2:	2200      	movs	r2, #0
    85c4:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    85c6:	687a      	ldr	r2, [r7, #4]
    85c8:	68fb      	ldr	r3, [r7, #12]
    85ca:	0011      	movs	r1, r2
    85cc:	0018      	movs	r0, r3
    85ce:	4b06      	ldr	r3, [pc, #24]	; (85e8 <adc_init+0xf0>)
    85d0:	4798      	blx	r3
    85d2:	0003      	movs	r3, r0
}
    85d4:	0018      	movs	r0, r3
    85d6:	46bd      	mov	sp, r7
    85d8:	b006      	add	sp, #24
    85da:	bd80      	pop	{r7, pc}
    85dc:	00007d7d 	.word	0x00007d7d
    85e0:	00007e01 	.word	0x00007e01
    85e4:	2000474c 	.word	0x2000474c
    85e8:	00007f8d 	.word	0x00007f8d

000085ec <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    85ec:	b580      	push	{r7, lr}
    85ee:	b084      	sub	sp, #16
    85f0:	af00      	add	r7, sp, #0
    85f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    85f4:	687b      	ldr	r3, [r7, #4]
    85f6:	681b      	ldr	r3, [r3, #0]
    85f8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    85fa:	68fb      	ldr	r3, [r7, #12]
    85fc:	7e5b      	ldrb	r3, [r3, #25]
    85fe:	b2db      	uxtb	r3, r3
    8600:	b25b      	sxtb	r3, r3
    8602:	2b00      	cmp	r3, #0
    8604:	da01      	bge.n	860a <adc_is_syncing+0x1e>
		return true;
    8606:	2301      	movs	r3, #1
    8608:	e000      	b.n	860c <adc_is_syncing+0x20>
	}

	return false;
    860a:	2300      	movs	r3, #0
}
    860c:	0018      	movs	r0, r3
    860e:	46bd      	mov	sp, r7
    8610:	b004      	add	sp, #16
    8612:	bd80      	pop	{r7, pc}

00008614 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8614:	b580      	push	{r7, lr}
    8616:	b084      	sub	sp, #16
    8618:	af00      	add	r7, sp, #0
    861a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    861c:	687b      	ldr	r3, [r7, #4]
    861e:	681b      	ldr	r3, [r3, #0]
    8620:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	0018      	movs	r0, r3
    8628:	4b0b      	ldr	r3, [pc, #44]	; (8658 <adc_start_conversion+0x44>)
    862a:	4798      	blx	r3
    862c:	1e03      	subs	r3, r0, #0
    862e:	d1f9      	bne.n	8624 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8630:	68fb      	ldr	r3, [r7, #12]
    8632:	7b1b      	ldrb	r3, [r3, #12]
    8634:	b2db      	uxtb	r3, r3
    8636:	2202      	movs	r2, #2
    8638:	4313      	orrs	r3, r2
    863a:	b2da      	uxtb	r2, r3
    863c:	68fb      	ldr	r3, [r7, #12]
    863e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    8640:	46c0      	nop			; (mov r8, r8)
    8642:	687b      	ldr	r3, [r7, #4]
    8644:	0018      	movs	r0, r3
    8646:	4b04      	ldr	r3, [pc, #16]	; (8658 <adc_start_conversion+0x44>)
    8648:	4798      	blx	r3
    864a:	1e03      	subs	r3, r0, #0
    864c:	d1f9      	bne.n	8642 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    864e:	46c0      	nop			; (mov r8, r8)
    8650:	46bd      	mov	sp, r7
    8652:	b004      	add	sp, #16
    8654:	bd80      	pop	{r7, pc}
    8656:	46c0      	nop			; (mov r8, r8)
    8658:	000085ed 	.word	0x000085ed

0000865c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    865c:	b580      	push	{r7, lr}
    865e:	b084      	sub	sp, #16
    8660:	af00      	add	r7, sp, #0
    8662:	6078      	str	r0, [r7, #4]
    8664:	000a      	movs	r2, r1
    8666:	1cfb      	adds	r3, r7, #3
    8668:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    866a:	687b      	ldr	r3, [r7, #4]
    866c:	681b      	ldr	r3, [r3, #0]
    866e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    8670:	68fb      	ldr	r3, [r7, #12]
    8672:	1cfa      	adds	r2, r7, #3
    8674:	7812      	ldrb	r2, [r2, #0]
    8676:	759a      	strb	r2, [r3, #22]
}
    8678:	46c0      	nop			; (mov r8, r8)
    867a:	46bd      	mov	sp, r7
    867c:	b004      	add	sp, #16
    867e:	bd80      	pop	{r7, pc}

00008680 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    8680:	b580      	push	{r7, lr}
    8682:	b084      	sub	sp, #16
    8684:	af00      	add	r7, sp, #0
    8686:	0002      	movs	r2, r0
    8688:	1dfb      	adds	r3, r7, #7
    868a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    868c:	1dfb      	adds	r3, r7, #7
    868e:	781a      	ldrb	r2, [r3, #0]
    8690:	4b44      	ldr	r3, [pc, #272]	; (87a4 <_adc_interrupt_handler+0x124>)
    8692:	0092      	lsls	r2, r2, #2
    8694:	58d3      	ldr	r3, [r2, r3]
    8696:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	681b      	ldr	r3, [r3, #0]
    869c:	7e1b      	ldrb	r3, [r3, #24]
    869e:	b2db      	uxtb	r3, r3
    86a0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    86a2:	68bb      	ldr	r3, [r7, #8]
    86a4:	2201      	movs	r2, #1
    86a6:	4013      	ands	r3, r2
    86a8:	d045      	beq.n	8736 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    86aa:	68fb      	ldr	r3, [r7, #12]
    86ac:	7edb      	ldrb	r3, [r3, #27]
    86ae:	001a      	movs	r2, r3
    86b0:	2301      	movs	r3, #1
    86b2:	4013      	ands	r3, r2
    86b4:	d03f      	beq.n	8736 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    86b6:	68fb      	ldr	r3, [r7, #12]
    86b8:	7e9b      	ldrb	r3, [r3, #26]
    86ba:	001a      	movs	r2, r3
    86bc:	2301      	movs	r3, #1
    86be:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    86c0:	d039      	beq.n	8736 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    86c2:	68fb      	ldr	r3, [r7, #12]
    86c4:	681b      	ldr	r3, [r3, #0]
    86c6:	2201      	movs	r2, #1
    86c8:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    86ca:	46c0      	nop			; (mov r8, r8)
    86cc:	68fb      	ldr	r3, [r7, #12]
    86ce:	0018      	movs	r0, r3
    86d0:	4b35      	ldr	r3, [pc, #212]	; (87a8 <_adc_interrupt_handler+0x128>)
    86d2:	4798      	blx	r3
    86d4:	1e03      	subs	r3, r0, #0
    86d6:	d1f9      	bne.n	86cc <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    86d8:	68fb      	ldr	r3, [r7, #12]
    86da:	695b      	ldr	r3, [r3, #20]
    86dc:	1c99      	adds	r1, r3, #2
    86de:	68fa      	ldr	r2, [r7, #12]
    86e0:	6151      	str	r1, [r2, #20]
    86e2:	68fa      	ldr	r2, [r7, #12]
    86e4:	6812      	ldr	r2, [r2, #0]
    86e6:	8b52      	ldrh	r2, [r2, #26]
    86e8:	b292      	uxth	r2, r2
    86ea:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    86ec:	68fb      	ldr	r3, [r7, #12]
    86ee:	8b1b      	ldrh	r3, [r3, #24]
    86f0:	b29b      	uxth	r3, r3
    86f2:	3b01      	subs	r3, #1
    86f4:	b29b      	uxth	r3, r3
    86f6:	68fa      	ldr	r2, [r7, #12]
    86f8:	1c19      	adds	r1, r3, #0
    86fa:	8311      	strh	r1, [r2, #24]
    86fc:	2b00      	cmp	r3, #0
    86fe:	d008      	beq.n	8712 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    8700:	68fb      	ldr	r3, [r7, #12]
    8702:	7f5b      	ldrb	r3, [r3, #29]
    8704:	2b00      	cmp	r3, #0
    8706:	d016      	beq.n	8736 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    8708:	68fb      	ldr	r3, [r7, #12]
    870a:	0018      	movs	r0, r3
    870c:	4b27      	ldr	r3, [pc, #156]	; (87ac <_adc_interrupt_handler+0x12c>)
    870e:	4798      	blx	r3
    8710:	e011      	b.n	8736 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    8712:	68fb      	ldr	r3, [r7, #12]
    8714:	7f1b      	ldrb	r3, [r3, #28]
    8716:	b2db      	uxtb	r3, r3
    8718:	2b05      	cmp	r3, #5
    871a:	d10c      	bne.n	8736 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    871c:	68fb      	ldr	r3, [r7, #12]
    871e:	2200      	movs	r2, #0
    8720:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    8722:	68fb      	ldr	r3, [r7, #12]
    8724:	2101      	movs	r1, #1
    8726:	0018      	movs	r0, r3
    8728:	4b21      	ldr	r3, [pc, #132]	; (87b0 <_adc_interrupt_handler+0x130>)
    872a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    872c:	68fb      	ldr	r3, [r7, #12]
    872e:	689b      	ldr	r3, [r3, #8]
    8730:	68fa      	ldr	r2, [r7, #12]
    8732:	0010      	movs	r0, r2
    8734:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    8736:	68bb      	ldr	r3, [r7, #8]
    8738:	2204      	movs	r2, #4
    873a:	4013      	ands	r3, r2
    873c:	d014      	beq.n	8768 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    873e:	68fb      	ldr	r3, [r7, #12]
    8740:	681b      	ldr	r3, [r3, #0]
    8742:	2204      	movs	r2, #4
    8744:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    8746:	68fb      	ldr	r3, [r7, #12]
    8748:	7edb      	ldrb	r3, [r3, #27]
    874a:	001a      	movs	r2, r3
    874c:	2302      	movs	r3, #2
    874e:	4013      	ands	r3, r2
    8750:	d00a      	beq.n	8768 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    8752:	68fb      	ldr	r3, [r7, #12]
    8754:	7e9b      	ldrb	r3, [r3, #26]
    8756:	001a      	movs	r2, r3
    8758:	2302      	movs	r3, #2
    875a:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    875c:	d004      	beq.n	8768 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    875e:	68fb      	ldr	r3, [r7, #12]
    8760:	68db      	ldr	r3, [r3, #12]
    8762:	68fa      	ldr	r2, [r7, #12]
    8764:	0010      	movs	r0, r2
    8766:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    8768:	68bb      	ldr	r3, [r7, #8]
    876a:	2202      	movs	r2, #2
    876c:	4013      	ands	r3, r2
    876e:	d014      	beq.n	879a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    8770:	68fb      	ldr	r3, [r7, #12]
    8772:	681b      	ldr	r3, [r3, #0]
    8774:	2202      	movs	r2, #2
    8776:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    8778:	68fb      	ldr	r3, [r7, #12]
    877a:	7edb      	ldrb	r3, [r3, #27]
    877c:	001a      	movs	r2, r3
    877e:	2304      	movs	r3, #4
    8780:	4013      	ands	r3, r2
    8782:	d00a      	beq.n	879a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    8784:	68fb      	ldr	r3, [r7, #12]
    8786:	7e9b      	ldrb	r3, [r3, #26]
    8788:	001a      	movs	r2, r3
    878a:	2304      	movs	r3, #4
    878c:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    878e:	d004      	beq.n	879a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    8790:	68fb      	ldr	r3, [r7, #12]
    8792:	691b      	ldr	r3, [r3, #16]
    8794:	68fa      	ldr	r2, [r7, #12]
    8796:	0010      	movs	r0, r2
    8798:	4798      	blx	r3
		}
	}
}
    879a:	46c0      	nop			; (mov r8, r8)
    879c:	46bd      	mov	sp, r7
    879e:	b004      	add	sp, #16
    87a0:	bd80      	pop	{r7, pc}
    87a2:	46c0      	nop			; (mov r8, r8)
    87a4:	2000474c 	.word	0x2000474c
    87a8:	000085ed 	.word	0x000085ed
    87ac:	00008615 	.word	0x00008615
    87b0:	0000865d 	.word	0x0000865d

000087b4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    87b4:	b580      	push	{r7, lr}
    87b6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    87b8:	2000      	movs	r0, #0
    87ba:	4b02      	ldr	r3, [pc, #8]	; (87c4 <ADC_Handler+0x10>)
    87bc:	4798      	blx	r3
}
    87be:	46c0      	nop			; (mov r8, r8)
    87c0:	46bd      	mov	sp, r7
    87c2:	bd80      	pop	{r7, pc}
    87c4:	00008681 	.word	0x00008681

000087c8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    87c8:	b580      	push	{r7, lr}
    87ca:	b084      	sub	sp, #16
    87cc:	af00      	add	r7, sp, #0
    87ce:	0002      	movs	r2, r0
    87d0:	1dfb      	adds	r3, r7, #7
    87d2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    87d4:	230f      	movs	r3, #15
    87d6:	18fb      	adds	r3, r7, r3
    87d8:	1dfa      	adds	r2, r7, #7
    87da:	7812      	ldrb	r2, [r2, #0]
    87dc:	0952      	lsrs	r2, r2, #5
    87de:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    87e0:	230f      	movs	r3, #15
    87e2:	18fb      	adds	r3, r7, r3
    87e4:	781b      	ldrb	r3, [r3, #0]
    87e6:	2b00      	cmp	r3, #0
    87e8:	d10c      	bne.n	8804 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    87ea:	4b09      	ldr	r3, [pc, #36]	; (8810 <_extint_get_eic_from_channel+0x48>)
    87ec:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    87ee:	230f      	movs	r3, #15
    87f0:	18fb      	adds	r3, r7, r3
    87f2:	781b      	ldrb	r3, [r3, #0]
    87f4:	009b      	lsls	r3, r3, #2
    87f6:	2210      	movs	r2, #16
    87f8:	4694      	mov	ip, r2
    87fa:	44bc      	add	ip, r7
    87fc:	4463      	add	r3, ip
    87fe:	3b08      	subs	r3, #8
    8800:	681b      	ldr	r3, [r3, #0]
    8802:	e000      	b.n	8806 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    8804:	2300      	movs	r3, #0
	}
}
    8806:	0018      	movs	r0, r3
    8808:	46bd      	mov	sp, r7
    880a:	b004      	add	sp, #16
    880c:	bd80      	pop	{r7, pc}
    880e:	46c0      	nop			; (mov r8, r8)
    8810:	40001800 	.word	0x40001800

00008814 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    8814:	b580      	push	{r7, lr}
    8816:	b084      	sub	sp, #16
    8818:	af00      	add	r7, sp, #0
    881a:	0002      	movs	r2, r0
    881c:	1dfb      	adds	r3, r7, #7
    881e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8820:	1dfb      	adds	r3, r7, #7
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	0018      	movs	r0, r3
    8826:	4b0b      	ldr	r3, [pc, #44]	; (8854 <extint_chan_is_detected+0x40>)
    8828:	4798      	blx	r3
    882a:	0003      	movs	r3, r0
    882c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    882e:	1dfb      	adds	r3, r7, #7
    8830:	781b      	ldrb	r3, [r3, #0]
    8832:	221f      	movs	r2, #31
    8834:	4013      	ands	r3, r2
    8836:	2201      	movs	r2, #1
    8838:	409a      	lsls	r2, r3
    883a:	0013      	movs	r3, r2
    883c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    883e:	68fb      	ldr	r3, [r7, #12]
    8840:	691b      	ldr	r3, [r3, #16]
    8842:	68ba      	ldr	r2, [r7, #8]
    8844:	4013      	ands	r3, r2
    8846:	1e5a      	subs	r2, r3, #1
    8848:	4193      	sbcs	r3, r2
    884a:	b2db      	uxtb	r3, r3
}
    884c:	0018      	movs	r0, r3
    884e:	46bd      	mov	sp, r7
    8850:	b004      	add	sp, #16
    8852:	bd80      	pop	{r7, pc}
    8854:	000087c9 	.word	0x000087c9

00008858 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    8858:	b580      	push	{r7, lr}
    885a:	b084      	sub	sp, #16
    885c:	af00      	add	r7, sp, #0
    885e:	0002      	movs	r2, r0
    8860:	1dfb      	adds	r3, r7, #7
    8862:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    8864:	1dfb      	adds	r3, r7, #7
    8866:	781b      	ldrb	r3, [r3, #0]
    8868:	0018      	movs	r0, r3
    886a:	4b09      	ldr	r3, [pc, #36]	; (8890 <extint_chan_clear_detected+0x38>)
    886c:	4798      	blx	r3
    886e:	0003      	movs	r3, r0
    8870:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    8872:	1dfb      	adds	r3, r7, #7
    8874:	781b      	ldrb	r3, [r3, #0]
    8876:	221f      	movs	r2, #31
    8878:	4013      	ands	r3, r2
    887a:	2201      	movs	r2, #1
    887c:	409a      	lsls	r2, r3
    887e:	0013      	movs	r3, r2
    8880:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    8882:	68fb      	ldr	r3, [r7, #12]
    8884:	68ba      	ldr	r2, [r7, #8]
    8886:	611a      	str	r2, [r3, #16]
}
    8888:	46c0      	nop			; (mov r8, r8)
    888a:	46bd      	mov	sp, r7
    888c:	b004      	add	sp, #16
    888e:	bd80      	pop	{r7, pc}
    8890:	000087c9 	.word	0x000087c9

00008894 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8894:	b580      	push	{r7, lr}
    8896:	b082      	sub	sp, #8
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
    889c:	0008      	movs	r0, r1
    889e:	0011      	movs	r1, r2
    88a0:	1cfb      	adds	r3, r7, #3
    88a2:	1c02      	adds	r2, r0, #0
    88a4:	701a      	strb	r2, [r3, #0]
    88a6:	1cbb      	adds	r3, r7, #2
    88a8:	1c0a      	adds	r2, r1, #0
    88aa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    88ac:	1cbb      	adds	r3, r7, #2
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	2b00      	cmp	r3, #0
    88b2:	d001      	beq.n	88b8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    88b4:	2317      	movs	r3, #23
    88b6:	e019      	b.n	88ec <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    88b8:	1cfb      	adds	r3, r7, #3
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	4b0d      	ldr	r3, [pc, #52]	; (88f4 <extint_register_callback+0x60>)
    88be:	0092      	lsls	r2, r2, #2
    88c0:	58d3      	ldr	r3, [r2, r3]
    88c2:	2b00      	cmp	r3, #0
    88c4:	d107      	bne.n	88d6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    88c6:	1cfb      	adds	r3, r7, #3
    88c8:	781a      	ldrb	r2, [r3, #0]
    88ca:	4b0a      	ldr	r3, [pc, #40]	; (88f4 <extint_register_callback+0x60>)
    88cc:	0092      	lsls	r2, r2, #2
    88ce:	6879      	ldr	r1, [r7, #4]
    88d0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    88d2:	2300      	movs	r3, #0
    88d4:	e00a      	b.n	88ec <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    88d6:	1cfb      	adds	r3, r7, #3
    88d8:	781a      	ldrb	r2, [r3, #0]
    88da:	4b06      	ldr	r3, [pc, #24]	; (88f4 <extint_register_callback+0x60>)
    88dc:	0092      	lsls	r2, r2, #2
    88de:	58d2      	ldr	r2, [r2, r3]
    88e0:	687b      	ldr	r3, [r7, #4]
    88e2:	429a      	cmp	r2, r3
    88e4:	d101      	bne.n	88ea <extint_register_callback+0x56>
		return STATUS_OK;
    88e6:	2300      	movs	r3, #0
    88e8:	e000      	b.n	88ec <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    88ea:	231d      	movs	r3, #29
}
    88ec:	0018      	movs	r0, r3
    88ee:	46bd      	mov	sp, r7
    88f0:	b002      	add	sp, #8
    88f2:	bd80      	pop	{r7, pc}
    88f4:	20004754 	.word	0x20004754

000088f8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    88f8:	b580      	push	{r7, lr}
    88fa:	b084      	sub	sp, #16
    88fc:	af00      	add	r7, sp, #0
    88fe:	0002      	movs	r2, r0
    8900:	1dfb      	adds	r3, r7, #7
    8902:	701a      	strb	r2, [r3, #0]
    8904:	1dbb      	adds	r3, r7, #6
    8906:	1c0a      	adds	r2, r1, #0
    8908:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    890a:	1dbb      	adds	r3, r7, #6
    890c:	781b      	ldrb	r3, [r3, #0]
    890e:	2b00      	cmp	r3, #0
    8910:	d10e      	bne.n	8930 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    8912:	1dfb      	adds	r3, r7, #7
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	0018      	movs	r0, r3
    8918:	4b08      	ldr	r3, [pc, #32]	; (893c <extint_chan_enable_callback+0x44>)
    891a:	4798      	blx	r3
    891c:	0003      	movs	r3, r0
    891e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    8920:	1dfb      	adds	r3, r7, #7
    8922:	781b      	ldrb	r3, [r3, #0]
    8924:	2201      	movs	r2, #1
    8926:	409a      	lsls	r2, r3
    8928:	68fb      	ldr	r3, [r7, #12]
    892a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    892c:	2300      	movs	r3, #0
    892e:	e000      	b.n	8932 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8930:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    8932:	0018      	movs	r0, r3
    8934:	46bd      	mov	sp, r7
    8936:	b004      	add	sp, #16
    8938:	bd80      	pop	{r7, pc}
    893a:	46c0      	nop			; (mov r8, r8)
    893c:	000087c9 	.word	0x000087c9

00008940 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8940:	b580      	push	{r7, lr}
    8942:	b084      	sub	sp, #16
    8944:	af00      	add	r7, sp, #0
    8946:	0002      	movs	r2, r0
    8948:	1dfb      	adds	r3, r7, #7
    894a:	701a      	strb	r2, [r3, #0]
    894c:	1dbb      	adds	r3, r7, #6
    894e:	1c0a      	adds	r2, r1, #0
    8950:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    8952:	1dbb      	adds	r3, r7, #6
    8954:	781b      	ldrb	r3, [r3, #0]
    8956:	2b00      	cmp	r3, #0
    8958:	d10e      	bne.n	8978 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    895a:	1dfb      	adds	r3, r7, #7
    895c:	781b      	ldrb	r3, [r3, #0]
    895e:	0018      	movs	r0, r3
    8960:	4b08      	ldr	r3, [pc, #32]	; (8984 <extint_chan_disable_callback+0x44>)
    8962:	4798      	blx	r3
    8964:	0003      	movs	r3, r0
    8966:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    8968:	1dfb      	adds	r3, r7, #7
    896a:	781b      	ldrb	r3, [r3, #0]
    896c:	2201      	movs	r2, #1
    896e:	409a      	lsls	r2, r3
    8970:	68fb      	ldr	r3, [r7, #12]
    8972:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    8974:	2300      	movs	r3, #0
    8976:	e000      	b.n	897a <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8978:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    897a:	0018      	movs	r0, r3
    897c:	46bd      	mov	sp, r7
    897e:	b004      	add	sp, #16
    8980:	bd80      	pop	{r7, pc}
    8982:	46c0      	nop			; (mov r8, r8)
    8984:	000087c9 	.word	0x000087c9

00008988 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    8988:	b580      	push	{r7, lr}
    898a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    898c:	4b15      	ldr	r3, [pc, #84]	; (89e4 <EIC_Handler+0x5c>)
    898e:	2200      	movs	r2, #0
    8990:	701a      	strb	r2, [r3, #0]
    8992:	e020      	b.n	89d6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    8994:	4b13      	ldr	r3, [pc, #76]	; (89e4 <EIC_Handler+0x5c>)
    8996:	781b      	ldrb	r3, [r3, #0]
    8998:	0018      	movs	r0, r3
    899a:	4b13      	ldr	r3, [pc, #76]	; (89e8 <EIC_Handler+0x60>)
    899c:	4798      	blx	r3
    899e:	1e03      	subs	r3, r0, #0
    89a0:	d013      	beq.n	89ca <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    89a2:	4b10      	ldr	r3, [pc, #64]	; (89e4 <EIC_Handler+0x5c>)
    89a4:	781b      	ldrb	r3, [r3, #0]
    89a6:	0018      	movs	r0, r3
    89a8:	4b10      	ldr	r3, [pc, #64]	; (89ec <EIC_Handler+0x64>)
    89aa:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    89ac:	4b0d      	ldr	r3, [pc, #52]	; (89e4 <EIC_Handler+0x5c>)
    89ae:	781b      	ldrb	r3, [r3, #0]
    89b0:	001a      	movs	r2, r3
    89b2:	4b0f      	ldr	r3, [pc, #60]	; (89f0 <EIC_Handler+0x68>)
    89b4:	0092      	lsls	r2, r2, #2
    89b6:	58d3      	ldr	r3, [r2, r3]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d006      	beq.n	89ca <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    89bc:	4b09      	ldr	r3, [pc, #36]	; (89e4 <EIC_Handler+0x5c>)
    89be:	781b      	ldrb	r3, [r3, #0]
    89c0:	001a      	movs	r2, r3
    89c2:	4b0b      	ldr	r3, [pc, #44]	; (89f0 <EIC_Handler+0x68>)
    89c4:	0092      	lsls	r2, r2, #2
    89c6:	58d3      	ldr	r3, [r2, r3]
    89c8:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    89ca:	4b06      	ldr	r3, [pc, #24]	; (89e4 <EIC_Handler+0x5c>)
    89cc:	781b      	ldrb	r3, [r3, #0]
    89ce:	3301      	adds	r3, #1
    89d0:	b2da      	uxtb	r2, r3
    89d2:	4b04      	ldr	r3, [pc, #16]	; (89e4 <EIC_Handler+0x5c>)
    89d4:	701a      	strb	r2, [r3, #0]
    89d6:	4b03      	ldr	r3, [pc, #12]	; (89e4 <EIC_Handler+0x5c>)
    89d8:	781b      	ldrb	r3, [r3, #0]
    89da:	2b0f      	cmp	r3, #15
    89dc:	d9da      	bls.n	8994 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	46bd      	mov	sp, r7
    89e2:	bd80      	pop	{r7, pc}
    89e4:	20004750 	.word	0x20004750
    89e8:	00008815 	.word	0x00008815
    89ec:	00008859 	.word	0x00008859
    89f0:	20004754 	.word	0x20004754

000089f4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    89f4:	b580      	push	{r7, lr}
    89f6:	b082      	sub	sp, #8
    89f8:	af00      	add	r7, sp, #0
    89fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    89fc:	687b      	ldr	r3, [r7, #4]
    89fe:	2200      	movs	r2, #0
    8a00:	701a      	strb	r2, [r3, #0]
}
    8a02:	46c0      	nop			; (mov r8, r8)
    8a04:	46bd      	mov	sp, r7
    8a06:	b002      	add	sp, #8
    8a08:	bd80      	pop	{r7, pc}
    8a0a:	46c0      	nop			; (mov r8, r8)

00008a0c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8a0c:	b580      	push	{r7, lr}
    8a0e:	b082      	sub	sp, #8
    8a10:	af00      	add	r7, sp, #0
    8a12:	0002      	movs	r2, r0
    8a14:	6039      	str	r1, [r7, #0]
    8a16:	1dfb      	adds	r3, r7, #7
    8a18:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8a1a:	1dfb      	adds	r3, r7, #7
    8a1c:	781b      	ldrb	r3, [r3, #0]
    8a1e:	2b01      	cmp	r3, #1
    8a20:	d00a      	beq.n	8a38 <system_apb_clock_set_mask+0x2c>
    8a22:	2b02      	cmp	r3, #2
    8a24:	d00f      	beq.n	8a46 <system_apb_clock_set_mask+0x3a>
    8a26:	2b00      	cmp	r3, #0
    8a28:	d114      	bne.n	8a54 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8a2a:	4b0e      	ldr	r3, [pc, #56]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a2c:	4a0d      	ldr	r2, [pc, #52]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a2e:	6991      	ldr	r1, [r2, #24]
    8a30:	683a      	ldr	r2, [r7, #0]
    8a32:	430a      	orrs	r2, r1
    8a34:	619a      	str	r2, [r3, #24]
			break;
    8a36:	e00f      	b.n	8a58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8a38:	4b0a      	ldr	r3, [pc, #40]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a3a:	4a0a      	ldr	r2, [pc, #40]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a3c:	69d1      	ldr	r1, [r2, #28]
    8a3e:	683a      	ldr	r2, [r7, #0]
    8a40:	430a      	orrs	r2, r1
    8a42:	61da      	str	r2, [r3, #28]
			break;
    8a44:	e008      	b.n	8a58 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8a46:	4b07      	ldr	r3, [pc, #28]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a48:	4a06      	ldr	r2, [pc, #24]	; (8a64 <system_apb_clock_set_mask+0x58>)
    8a4a:	6a11      	ldr	r1, [r2, #32]
    8a4c:	683a      	ldr	r2, [r7, #0]
    8a4e:	430a      	orrs	r2, r1
    8a50:	621a      	str	r2, [r3, #32]
			break;
    8a52:	e001      	b.n	8a58 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8a54:	2317      	movs	r3, #23
    8a56:	e000      	b.n	8a5a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8a58:	2300      	movs	r3, #0
}
    8a5a:	0018      	movs	r0, r3
    8a5c:	46bd      	mov	sp, r7
    8a5e:	b002      	add	sp, #8
    8a60:	bd80      	pop	{r7, pc}
    8a62:	46c0      	nop			; (mov r8, r8)
    8a64:	40000400 	.word	0x40000400

00008a68 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8a68:	b580      	push	{r7, lr}
    8a6a:	b082      	sub	sp, #8
    8a6c:	af00      	add	r7, sp, #0
    8a6e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8a70:	687b      	ldr	r3, [r7, #4]
    8a72:	2280      	movs	r2, #128	; 0x80
    8a74:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8a76:	687b      	ldr	r3, [r7, #4]
    8a78:	2200      	movs	r2, #0
    8a7a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	2201      	movs	r2, #1
    8a80:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8a82:	687b      	ldr	r3, [r7, #4]
    8a84:	2200      	movs	r2, #0
    8a86:	70da      	strb	r2, [r3, #3]
}
    8a88:	46c0      	nop			; (mov r8, r8)
    8a8a:	46bd      	mov	sp, r7
    8a8c:	b002      	add	sp, #8
    8a8e:	bd80      	pop	{r7, pc}

00008a90 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    8a90:	b580      	push	{r7, lr}
    8a92:	b082      	sub	sp, #8
    8a94:	af00      	add	r7, sp, #0
    8a96:	0002      	movs	r2, r0
    8a98:	1dfb      	adds	r3, r7, #7
    8a9a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8a9c:	4b06      	ldr	r3, [pc, #24]	; (8ab8 <system_interrupt_enable+0x28>)
    8a9e:	1dfa      	adds	r2, r7, #7
    8aa0:	7812      	ldrb	r2, [r2, #0]
    8aa2:	0011      	movs	r1, r2
    8aa4:	221f      	movs	r2, #31
    8aa6:	400a      	ands	r2, r1
    8aa8:	2101      	movs	r1, #1
    8aaa:	4091      	lsls	r1, r2
    8aac:	000a      	movs	r2, r1
    8aae:	601a      	str	r2, [r3, #0]
}
    8ab0:	46c0      	nop			; (mov r8, r8)
    8ab2:	46bd      	mov	sp, r7
    8ab4:	b002      	add	sp, #8
    8ab6:	bd80      	pop	{r7, pc}
    8ab8:	e000e100 	.word	0xe000e100

00008abc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    8abc:	b580      	push	{r7, lr}
    8abe:	b084      	sub	sp, #16
    8ac0:	af00      	add	r7, sp, #0
    8ac2:	0002      	movs	r2, r0
    8ac4:	1dfb      	adds	r3, r7, #7
    8ac6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    8ac8:	230f      	movs	r3, #15
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	1dfa      	adds	r2, r7, #7
    8ace:	7812      	ldrb	r2, [r2, #0]
    8ad0:	0952      	lsrs	r2, r2, #5
    8ad2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    8ad4:	230f      	movs	r3, #15
    8ad6:	18fb      	adds	r3, r7, r3
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	2b00      	cmp	r3, #0
    8adc:	d10c      	bne.n	8af8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8ade:	4b09      	ldr	r3, [pc, #36]	; (8b04 <_extint_get_eic_from_channel+0x48>)
    8ae0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    8ae2:	230f      	movs	r3, #15
    8ae4:	18fb      	adds	r3, r7, r3
    8ae6:	781b      	ldrb	r3, [r3, #0]
    8ae8:	009b      	lsls	r3, r3, #2
    8aea:	2210      	movs	r2, #16
    8aec:	4694      	mov	ip, r2
    8aee:	44bc      	add	ip, r7
    8af0:	4463      	add	r3, ip
    8af2:	3b08      	subs	r3, #8
    8af4:	681b      	ldr	r3, [r3, #0]
    8af6:	e000      	b.n	8afa <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    8af8:	2300      	movs	r3, #0
	}
}
    8afa:	0018      	movs	r0, r3
    8afc:	46bd      	mov	sp, r7
    8afe:	b004      	add	sp, #16
    8b00:	bd80      	pop	{r7, pc}
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	40001800 	.word	0x40001800

00008b08 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b082      	sub	sp, #8
    8b0c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8b0e:	4b0f      	ldr	r3, [pc, #60]	; (8b4c <extint_is_syncing+0x44>)
    8b10:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8b12:	2300      	movs	r3, #0
    8b14:	607b      	str	r3, [r7, #4]
    8b16:	e011      	b.n	8b3c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	009b      	lsls	r3, r3, #2
    8b1c:	2208      	movs	r2, #8
    8b1e:	4694      	mov	ip, r2
    8b20:	44bc      	add	ip, r7
    8b22:	4463      	add	r3, ip
    8b24:	3b08      	subs	r3, #8
    8b26:	681b      	ldr	r3, [r3, #0]
    8b28:	785b      	ldrb	r3, [r3, #1]
    8b2a:	b2db      	uxtb	r3, r3
    8b2c:	b25b      	sxtb	r3, r3
    8b2e:	2b00      	cmp	r3, #0
    8b30:	da01      	bge.n	8b36 <extint_is_syncing+0x2e>
			return true;
    8b32:	2301      	movs	r3, #1
    8b34:	e006      	b.n	8b44 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	3301      	adds	r3, #1
    8b3a:	607b      	str	r3, [r7, #4]
    8b3c:	687b      	ldr	r3, [r7, #4]
    8b3e:	2b00      	cmp	r3, #0
    8b40:	d0ea      	beq.n	8b18 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    8b42:	2300      	movs	r3, #0
}
    8b44:	0018      	movs	r0, r3
    8b46:	46bd      	mov	sp, r7
    8b48:	b002      	add	sp, #8
    8b4a:	bd80      	pop	{r7, pc}
    8b4c:	40001800 	.word	0x40001800

00008b50 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    8b50:	b580      	push	{r7, lr}
    8b52:	b084      	sub	sp, #16
    8b54:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8b56:	4b2d      	ldr	r3, [pc, #180]	; (8c0c <_system_extint_init+0xbc>)
    8b58:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    8b5a:	2140      	movs	r1, #64	; 0x40
    8b5c:	2000      	movs	r0, #0
    8b5e:	4b2c      	ldr	r3, [pc, #176]	; (8c10 <_system_extint_init+0xc0>)
    8b60:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8b62:	003b      	movs	r3, r7
    8b64:	0018      	movs	r0, r3
    8b66:	4b2b      	ldr	r3, [pc, #172]	; (8c14 <_system_extint_init+0xc4>)
    8b68:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    8b6a:	003b      	movs	r3, r7
    8b6c:	2200      	movs	r2, #0
    8b6e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    8b70:	003b      	movs	r3, r7
    8b72:	0019      	movs	r1, r3
    8b74:	2005      	movs	r0, #5
    8b76:	4b28      	ldr	r3, [pc, #160]	; (8c18 <_system_extint_init+0xc8>)
    8b78:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    8b7a:	2005      	movs	r0, #5
    8b7c:	4b27      	ldr	r3, [pc, #156]	; (8c1c <_system_extint_init+0xcc>)
    8b7e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8b80:	2300      	movs	r3, #0
    8b82:	60fb      	str	r3, [r7, #12]
    8b84:	e018      	b.n	8bb8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    8b86:	68fb      	ldr	r3, [r7, #12]
    8b88:	009b      	lsls	r3, r3, #2
    8b8a:	2210      	movs	r2, #16
    8b8c:	4694      	mov	ip, r2
    8b8e:	44bc      	add	ip, r7
    8b90:	4463      	add	r3, ip
    8b92:	3b0c      	subs	r3, #12
    8b94:	681a      	ldr	r2, [r3, #0]
    8b96:	68fb      	ldr	r3, [r7, #12]
    8b98:	009b      	lsls	r3, r3, #2
    8b9a:	2110      	movs	r1, #16
    8b9c:	468c      	mov	ip, r1
    8b9e:	44bc      	add	ip, r7
    8ba0:	4463      	add	r3, ip
    8ba2:	3b0c      	subs	r3, #12
    8ba4:	681b      	ldr	r3, [r3, #0]
    8ba6:	781b      	ldrb	r3, [r3, #0]
    8ba8:	b2db      	uxtb	r3, r3
    8baa:	2101      	movs	r1, #1
    8bac:	430b      	orrs	r3, r1
    8bae:	b2db      	uxtb	r3, r3
    8bb0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8bb2:	68fb      	ldr	r3, [r7, #12]
    8bb4:	3301      	adds	r3, #1
    8bb6:	60fb      	str	r3, [r7, #12]
    8bb8:	68fb      	ldr	r3, [r7, #12]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	d0e3      	beq.n	8b86 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    8bbe:	46c0      	nop			; (mov r8, r8)
    8bc0:	4b17      	ldr	r3, [pc, #92]	; (8c20 <_system_extint_init+0xd0>)
    8bc2:	4798      	blx	r3
    8bc4:	1e03      	subs	r3, r0, #0
    8bc6:	d1fb      	bne.n	8bc0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    8bc8:	230b      	movs	r3, #11
    8bca:	18fb      	adds	r3, r7, r3
    8bcc:	2200      	movs	r2, #0
    8bce:	701a      	strb	r2, [r3, #0]
    8bd0:	e00d      	b.n	8bee <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    8bd2:	230b      	movs	r3, #11
    8bd4:	18fb      	adds	r3, r7, r3
    8bd6:	781a      	ldrb	r2, [r3, #0]
    8bd8:	4b12      	ldr	r3, [pc, #72]	; (8c24 <_system_extint_init+0xd4>)
    8bda:	0092      	lsls	r2, r2, #2
    8bdc:	2100      	movs	r1, #0
    8bde:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    8be0:	230b      	movs	r3, #11
    8be2:	18fb      	adds	r3, r7, r3
    8be4:	781a      	ldrb	r2, [r3, #0]
    8be6:	230b      	movs	r3, #11
    8be8:	18fb      	adds	r3, r7, r3
    8bea:	3201      	adds	r2, #1
    8bec:	701a      	strb	r2, [r3, #0]
    8bee:	230b      	movs	r3, #11
    8bf0:	18fb      	adds	r3, r7, r3
    8bf2:	781b      	ldrb	r3, [r3, #0]
    8bf4:	2b0f      	cmp	r3, #15
    8bf6:	d9ec      	bls.n	8bd2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    8bf8:	2004      	movs	r0, #4
    8bfa:	4b0b      	ldr	r3, [pc, #44]	; (8c28 <_system_extint_init+0xd8>)
    8bfc:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    8bfe:	4b0b      	ldr	r3, [pc, #44]	; (8c2c <_system_extint_init+0xdc>)
    8c00:	4798      	blx	r3
}
    8c02:	46c0      	nop			; (mov r8, r8)
    8c04:	46bd      	mov	sp, r7
    8c06:	b004      	add	sp, #16
    8c08:	bd80      	pop	{r7, pc}
    8c0a:	46c0      	nop			; (mov r8, r8)
    8c0c:	40001800 	.word	0x40001800
    8c10:	00008a0d 	.word	0x00008a0d
    8c14:	000089f5 	.word	0x000089f5
    8c18:	0000bac5 	.word	0x0000bac5
    8c1c:	0000bb09 	.word	0x0000bb09
    8c20:	00008b09 	.word	0x00008b09
    8c24:	20004754 	.word	0x20004754
    8c28:	00008a91 	.word	0x00008a91
    8c2c:	00008c31 	.word	0x00008c31

00008c30 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    8c30:	b580      	push	{r7, lr}
    8c32:	b082      	sub	sp, #8
    8c34:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    8c36:	4b15      	ldr	r3, [pc, #84]	; (8c8c <_extint_enable+0x5c>)
    8c38:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8c3a:	2300      	movs	r3, #0
    8c3c:	607b      	str	r3, [r7, #4]
    8c3e:	e018      	b.n	8c72 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    8c40:	687b      	ldr	r3, [r7, #4]
    8c42:	009b      	lsls	r3, r3, #2
    8c44:	2208      	movs	r2, #8
    8c46:	4694      	mov	ip, r2
    8c48:	44bc      	add	ip, r7
    8c4a:	4463      	add	r3, ip
    8c4c:	3b08      	subs	r3, #8
    8c4e:	681a      	ldr	r2, [r3, #0]
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	009b      	lsls	r3, r3, #2
    8c54:	2108      	movs	r1, #8
    8c56:	468c      	mov	ip, r1
    8c58:	44bc      	add	ip, r7
    8c5a:	4463      	add	r3, ip
    8c5c:	3b08      	subs	r3, #8
    8c5e:	681b      	ldr	r3, [r3, #0]
    8c60:	781b      	ldrb	r3, [r3, #0]
    8c62:	b2db      	uxtb	r3, r3
    8c64:	2102      	movs	r1, #2
    8c66:	430b      	orrs	r3, r1
    8c68:	b2db      	uxtb	r3, r3
    8c6a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    8c6c:	687b      	ldr	r3, [r7, #4]
    8c6e:	3301      	adds	r3, #1
    8c70:	607b      	str	r3, [r7, #4]
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	2b00      	cmp	r3, #0
    8c76:	d0e3      	beq.n	8c40 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    8c78:	46c0      	nop			; (mov r8, r8)
    8c7a:	4b05      	ldr	r3, [pc, #20]	; (8c90 <_extint_enable+0x60>)
    8c7c:	4798      	blx	r3
    8c7e:	1e03      	subs	r3, r0, #0
    8c80:	d1fb      	bne.n	8c7a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    8c82:	46c0      	nop			; (mov r8, r8)
    8c84:	46bd      	mov	sp, r7
    8c86:	b002      	add	sp, #8
    8c88:	bd80      	pop	{r7, pc}
    8c8a:	46c0      	nop			; (mov r8, r8)
    8c8c:	40001800 	.word	0x40001800
    8c90:	00008b09 	.word	0x00008b09

00008c94 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    8c94:	b580      	push	{r7, lr}
    8c96:	b082      	sub	sp, #8
    8c98:	af00      	add	r7, sp, #0
    8c9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	2200      	movs	r2, #0
    8ca0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    8ca2:	687b      	ldr	r3, [r7, #4]
    8ca4:	2200      	movs	r2, #0
    8ca6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	2201      	movs	r2, #1
    8cac:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	2201      	movs	r2, #1
    8cb2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	2200      	movs	r2, #0
    8cb8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	2202      	movs	r2, #2
    8cbe:	72da      	strb	r2, [r3, #11]
}
    8cc0:	46c0      	nop			; (mov r8, r8)
    8cc2:	46bd      	mov	sp, r7
    8cc4:	b002      	add	sp, #8
    8cc6:	bd80      	pop	{r7, pc}

00008cc8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	b086      	sub	sp, #24
    8ccc:	af00      	add	r7, sp, #0
    8cce:	0002      	movs	r2, r0
    8cd0:	6039      	str	r1, [r7, #0]
    8cd2:	1dfb      	adds	r3, r7, #7
    8cd4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    8cd6:	2308      	movs	r3, #8
    8cd8:	18fb      	adds	r3, r7, r3
    8cda:	0018      	movs	r0, r3
    8cdc:	4b36      	ldr	r3, [pc, #216]	; (8db8 <extint_chan_set_config+0xf0>)
    8cde:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    8ce0:	683b      	ldr	r3, [r7, #0]
    8ce2:	685b      	ldr	r3, [r3, #4]
    8ce4:	b2da      	uxtb	r2, r3
    8ce6:	2308      	movs	r3, #8
    8ce8:	18fb      	adds	r3, r7, r3
    8cea:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8cec:	2308      	movs	r3, #8
    8cee:	18fb      	adds	r3, r7, r3
    8cf0:	2200      	movs	r2, #0
    8cf2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    8cf4:	683b      	ldr	r3, [r7, #0]
    8cf6:	7a1a      	ldrb	r2, [r3, #8]
    8cf8:	2308      	movs	r3, #8
    8cfa:	18fb      	adds	r3, r7, r3
    8cfc:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    8cfe:	683b      	ldr	r3, [r7, #0]
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	b2db      	uxtb	r3, r3
    8d04:	2208      	movs	r2, #8
    8d06:	18ba      	adds	r2, r7, r2
    8d08:	0011      	movs	r1, r2
    8d0a:	0018      	movs	r0, r3
    8d0c:	4b2b      	ldr	r3, [pc, #172]	; (8dbc <extint_chan_set_config+0xf4>)
    8d0e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    8d10:	1dfb      	adds	r3, r7, #7
    8d12:	781b      	ldrb	r3, [r3, #0]
    8d14:	0018      	movs	r0, r3
    8d16:	4b2a      	ldr	r3, [pc, #168]	; (8dc0 <extint_chan_set_config+0xf8>)
    8d18:	4798      	blx	r3
    8d1a:	0003      	movs	r3, r0
    8d1c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    8d1e:	1dfb      	adds	r3, r7, #7
    8d20:	781b      	ldrb	r3, [r3, #0]
    8d22:	2207      	movs	r2, #7
    8d24:	4013      	ands	r3, r2
    8d26:	009b      	lsls	r3, r3, #2
    8d28:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    8d2a:	683b      	ldr	r3, [r7, #0]
    8d2c:	7adb      	ldrb	r3, [r3, #11]
    8d2e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    8d30:	683b      	ldr	r3, [r7, #0]
    8d32:	7a9b      	ldrb	r3, [r3, #10]
    8d34:	2b00      	cmp	r3, #0
    8d36:	d003      	beq.n	8d40 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    8d38:	697b      	ldr	r3, [r7, #20]
    8d3a:	2208      	movs	r2, #8
    8d3c:	4313      	orrs	r3, r2
    8d3e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    8d40:	1dfb      	adds	r3, r7, #7
    8d42:	781b      	ldrb	r3, [r3, #0]
    8d44:	08db      	lsrs	r3, r3, #3
    8d46:	b2db      	uxtb	r3, r3
    8d48:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    8d4a:	1dfb      	adds	r3, r7, #7
    8d4c:	781b      	ldrb	r3, [r3, #0]
    8d4e:	08db      	lsrs	r3, r3, #3
    8d50:	b2db      	uxtb	r3, r3
    8d52:	001a      	movs	r2, r3
    8d54:	693b      	ldr	r3, [r7, #16]
    8d56:	3206      	adds	r2, #6
    8d58:	0092      	lsls	r2, r2, #2
    8d5a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    8d5c:	210f      	movs	r1, #15
    8d5e:	68fa      	ldr	r2, [r7, #12]
    8d60:	4091      	lsls	r1, r2
    8d62:	000a      	movs	r2, r1
    8d64:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    8d66:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    8d68:	6979      	ldr	r1, [r7, #20]
    8d6a:	68fb      	ldr	r3, [r7, #12]
    8d6c:	4099      	lsls	r1, r3
    8d6e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    8d70:	431a      	orrs	r2, r3
    8d72:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    8d74:	693b      	ldr	r3, [r7, #16]
    8d76:	1d82      	adds	r2, r0, #6
    8d78:	0092      	lsls	r2, r2, #2
    8d7a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    8d7c:	683b      	ldr	r3, [r7, #0]
    8d7e:	7a5b      	ldrb	r3, [r3, #9]
    8d80:	2b00      	cmp	r3, #0
    8d82:	d00a      	beq.n	8d9a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    8d84:	693b      	ldr	r3, [r7, #16]
    8d86:	695a      	ldr	r2, [r3, #20]
    8d88:	1dfb      	adds	r3, r7, #7
    8d8a:	781b      	ldrb	r3, [r3, #0]
    8d8c:	2101      	movs	r1, #1
    8d8e:	4099      	lsls	r1, r3
    8d90:	000b      	movs	r3, r1
    8d92:	431a      	orrs	r2, r3
    8d94:	693b      	ldr	r3, [r7, #16]
    8d96:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    8d98:	e00a      	b.n	8db0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    8d9a:	693b      	ldr	r3, [r7, #16]
    8d9c:	695b      	ldr	r3, [r3, #20]
    8d9e:	1dfa      	adds	r2, r7, #7
    8da0:	7812      	ldrb	r2, [r2, #0]
    8da2:	2101      	movs	r1, #1
    8da4:	4091      	lsls	r1, r2
    8da6:	000a      	movs	r2, r1
    8da8:	43d2      	mvns	r2, r2
    8daa:	401a      	ands	r2, r3
    8dac:	693b      	ldr	r3, [r7, #16]
    8dae:	615a      	str	r2, [r3, #20]
	}
}
    8db0:	46c0      	nop			; (mov r8, r8)
    8db2:	46bd      	mov	sp, r7
    8db4:	b006      	add	sp, #24
    8db6:	bd80      	pop	{r7, pc}
    8db8:	00008a69 	.word	0x00008a69
    8dbc:	0000bdb1 	.word	0x0000bdb1
    8dc0:	00008abd 	.word	0x00008abd

00008dc4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8dc4:	b580      	push	{r7, lr}
    8dc6:	b082      	sub	sp, #8
    8dc8:	af00      	add	r7, sp, #0
    8dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8dcc:	687b      	ldr	r3, [r7, #4]
    8dce:	2280      	movs	r2, #128	; 0x80
    8dd0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8dd2:	687b      	ldr	r3, [r7, #4]
    8dd4:	2200      	movs	r2, #0
    8dd6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8dd8:	687b      	ldr	r3, [r7, #4]
    8dda:	2201      	movs	r2, #1
    8ddc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8dde:	687b      	ldr	r3, [r7, #4]
    8de0:	2200      	movs	r2, #0
    8de2:	70da      	strb	r2, [r3, #3]
}
    8de4:	46c0      	nop			; (mov r8, r8)
    8de6:	46bd      	mov	sp, r7
    8de8:	b002      	add	sp, #8
    8dea:	bd80      	pop	{r7, pc}

00008dec <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8dec:	b580      	push	{r7, lr}
    8dee:	b084      	sub	sp, #16
    8df0:	af00      	add	r7, sp, #0
    8df2:	0002      	movs	r2, r0
    8df4:	6039      	str	r1, [r7, #0]
    8df6:	1dfb      	adds	r3, r7, #7
    8df8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    8dfa:	230c      	movs	r3, #12
    8dfc:	18fb      	adds	r3, r7, r3
    8dfe:	0018      	movs	r0, r3
    8e00:	4b10      	ldr	r3, [pc, #64]	; (8e44 <port_pin_set_config+0x58>)
    8e02:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    8e04:	230c      	movs	r3, #12
    8e06:	18fb      	adds	r3, r7, r3
    8e08:	2280      	movs	r2, #128	; 0x80
    8e0a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8e0c:	683b      	ldr	r3, [r7, #0]
    8e0e:	781a      	ldrb	r2, [r3, #0]
    8e10:	230c      	movs	r3, #12
    8e12:	18fb      	adds	r3, r7, r3
    8e14:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    8e16:	683b      	ldr	r3, [r7, #0]
    8e18:	785a      	ldrb	r2, [r3, #1]
    8e1a:	230c      	movs	r3, #12
    8e1c:	18fb      	adds	r3, r7, r3
    8e1e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    8e20:	683b      	ldr	r3, [r7, #0]
    8e22:	789a      	ldrb	r2, [r3, #2]
    8e24:	230c      	movs	r3, #12
    8e26:	18fb      	adds	r3, r7, r3
    8e28:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8e2a:	230c      	movs	r3, #12
    8e2c:	18fa      	adds	r2, r7, r3
    8e2e:	1dfb      	adds	r3, r7, #7
    8e30:	781b      	ldrb	r3, [r3, #0]
    8e32:	0011      	movs	r1, r2
    8e34:	0018      	movs	r0, r3
    8e36:	4b04      	ldr	r3, [pc, #16]	; (8e48 <port_pin_set_config+0x5c>)
    8e38:	4798      	blx	r3
}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	46bd      	mov	sp, r7
    8e3e:	b004      	add	sp, #16
    8e40:	bd80      	pop	{r7, pc}
    8e42:	46c0      	nop			; (mov r8, r8)
    8e44:	00008dc5 	.word	0x00008dc5
    8e48:	0000bdb1 	.word	0x0000bdb1

00008e4c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    8e4c:	b580      	push	{r7, lr}
    8e4e:	b086      	sub	sp, #24
    8e50:	af00      	add	r7, sp, #0
    8e52:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    8e54:	4b28      	ldr	r3, [pc, #160]	; (8ef8 <_rtc_interrupt_handler+0xac>)
    8e56:	687a      	ldr	r2, [r7, #4]
    8e58:	0092      	lsls	r2, r2, #2
    8e5a:	58d3      	ldr	r3, [r2, r3]
    8e5c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    8e5e:	697b      	ldr	r3, [r7, #20]
    8e60:	681b      	ldr	r3, [r3, #0]
    8e62:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    8e64:	230e      	movs	r3, #14
    8e66:	18fb      	adds	r3, r7, r3
    8e68:	697a      	ldr	r2, [r7, #20]
    8e6a:	8a52      	ldrh	r2, [r2, #18]
    8e6c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    8e6e:	697b      	ldr	r3, [r7, #20]
    8e70:	8a1b      	ldrh	r3, [r3, #16]
    8e72:	b29a      	uxth	r2, r3
    8e74:	230e      	movs	r3, #14
    8e76:	18fb      	adds	r3, r7, r3
    8e78:	210e      	movs	r1, #14
    8e7a:	1879      	adds	r1, r7, r1
    8e7c:	8809      	ldrh	r1, [r1, #0]
    8e7e:	400a      	ands	r2, r1
    8e80:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    8e82:	693b      	ldr	r3, [r7, #16]
    8e84:	7a1b      	ldrb	r3, [r3, #8]
    8e86:	b2da      	uxtb	r2, r3
    8e88:	230c      	movs	r3, #12
    8e8a:	18fb      	adds	r3, r7, r3
    8e8c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    8e8e:	693b      	ldr	r3, [r7, #16]
    8e90:	79db      	ldrb	r3, [r3, #7]
    8e92:	b2db      	uxtb	r3, r3
    8e94:	b29a      	uxth	r2, r3
    8e96:	230c      	movs	r3, #12
    8e98:	18fb      	adds	r3, r7, r3
    8e9a:	210c      	movs	r1, #12
    8e9c:	1879      	adds	r1, r7, r1
    8e9e:	8809      	ldrh	r1, [r1, #0]
    8ea0:	400a      	ands	r2, r1
    8ea2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    8ea4:	230c      	movs	r3, #12
    8ea6:	18fb      	adds	r3, r7, r3
    8ea8:	881b      	ldrh	r3, [r3, #0]
    8eaa:	2280      	movs	r2, #128	; 0x80
    8eac:	4013      	ands	r3, r2
    8eae:	d00c      	beq.n	8eca <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    8eb0:	230e      	movs	r3, #14
    8eb2:	18fb      	adds	r3, r7, r3
    8eb4:	881b      	ldrh	r3, [r3, #0]
    8eb6:	2202      	movs	r2, #2
    8eb8:	4013      	ands	r3, r2
    8eba:	d002      	beq.n	8ec2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    8ebc:	697b      	ldr	r3, [r7, #20]
    8ebe:	68db      	ldr	r3, [r3, #12]
    8ec0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    8ec2:	693b      	ldr	r3, [r7, #16]
    8ec4:	2280      	movs	r2, #128	; 0x80
    8ec6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    8ec8:	e011      	b.n	8eee <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    8eca:	230c      	movs	r3, #12
    8ecc:	18fb      	adds	r3, r7, r3
    8ece:	881b      	ldrh	r3, [r3, #0]
    8ed0:	2201      	movs	r2, #1
    8ed2:	4013      	ands	r3, r2
    8ed4:	d00b      	beq.n	8eee <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    8ed6:	230e      	movs	r3, #14
    8ed8:	18fb      	adds	r3, r7, r3
    8eda:	881b      	ldrh	r3, [r3, #0]
    8edc:	2201      	movs	r2, #1
    8ede:	4013      	ands	r3, r2
    8ee0:	d002      	beq.n	8ee8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    8ee2:	697b      	ldr	r3, [r7, #20]
    8ee4:	689b      	ldr	r3, [r3, #8]
    8ee6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    8ee8:	693b      	ldr	r3, [r7, #16]
    8eea:	2201      	movs	r2, #1
    8eec:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    8eee:	46c0      	nop			; (mov r8, r8)
    8ef0:	46bd      	mov	sp, r7
    8ef2:	b006      	add	sp, #24
    8ef4:	bd80      	pop	{r7, pc}
    8ef6:	46c0      	nop			; (mov r8, r8)
    8ef8:	20004794 	.word	0x20004794

00008efc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    8efc:	b580      	push	{r7, lr}
    8efe:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    8f00:	2000      	movs	r0, #0
    8f02:	4b02      	ldr	r3, [pc, #8]	; (8f0c <RTC_Handler+0x10>)
    8f04:	4798      	blx	r3
}
    8f06:	46c0      	nop			; (mov r8, r8)
    8f08:	46bd      	mov	sp, r7
    8f0a:	bd80      	pop	{r7, pc}
    8f0c:	00008e4d 	.word	0x00008e4d

00008f10 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8f10:	b580      	push	{r7, lr}
    8f12:	b082      	sub	sp, #8
    8f14:	af00      	add	r7, sp, #0
    8f16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	2200      	movs	r2, #0
    8f1c:	701a      	strb	r2, [r3, #0]
}
    8f1e:	46c0      	nop			; (mov r8, r8)
    8f20:	46bd      	mov	sp, r7
    8f22:	b002      	add	sp, #8
    8f24:	bd80      	pop	{r7, pc}
    8f26:	46c0      	nop			; (mov r8, r8)

00008f28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    8f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f2a:	b08d      	sub	sp, #52	; 0x34
    8f2c:	af00      	add	r7, sp, #0
    8f2e:	60b8      	str	r0, [r7, #8]
    8f30:	60f9      	str	r1, [r7, #12]
    8f32:	603a      	str	r2, [r7, #0]
    8f34:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    8f36:	2300      	movs	r3, #0
    8f38:	2400      	movs	r4, #0
    8f3a:	623b      	str	r3, [r7, #32]
    8f3c:	627c      	str	r4, [r7, #36]	; 0x24
    8f3e:	2300      	movs	r3, #0
    8f40:	2400      	movs	r4, #0
    8f42:	61bb      	str	r3, [r7, #24]
    8f44:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    8f46:	233f      	movs	r3, #63	; 0x3f
    8f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    8f4a:	e053      	b.n	8ff4 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    8f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f4e:	3b20      	subs	r3, #32
    8f50:	2b00      	cmp	r3, #0
    8f52:	db04      	blt.n	8f5e <long_division+0x36>
    8f54:	2201      	movs	r2, #1
    8f56:	409a      	lsls	r2, r3
    8f58:	0013      	movs	r3, r2
    8f5a:	617b      	str	r3, [r7, #20]
    8f5c:	e00b      	b.n	8f76 <long_division+0x4e>
    8f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f60:	2220      	movs	r2, #32
    8f62:	1ad3      	subs	r3, r2, r3
    8f64:	2201      	movs	r2, #1
    8f66:	40da      	lsrs	r2, r3
    8f68:	0013      	movs	r3, r2
    8f6a:	2100      	movs	r1, #0
    8f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8f6e:	4091      	lsls	r1, r2
    8f70:	000a      	movs	r2, r1
    8f72:	4313      	orrs	r3, r2
    8f74:	617b      	str	r3, [r7, #20]
    8f76:	2201      	movs	r2, #1
    8f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8f7a:	409a      	lsls	r2, r3
    8f7c:	0013      	movs	r3, r2
    8f7e:	613b      	str	r3, [r7, #16]

		r = r << 1;
    8f80:	69bb      	ldr	r3, [r7, #24]
    8f82:	69fc      	ldr	r4, [r7, #28]
    8f84:	18db      	adds	r3, r3, r3
    8f86:	4164      	adcs	r4, r4
    8f88:	61bb      	str	r3, [r7, #24]
    8f8a:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    8f8c:	68bb      	ldr	r3, [r7, #8]
    8f8e:	693a      	ldr	r2, [r7, #16]
    8f90:	401a      	ands	r2, r3
    8f92:	0015      	movs	r5, r2
    8f94:	68fb      	ldr	r3, [r7, #12]
    8f96:	697a      	ldr	r2, [r7, #20]
    8f98:	401a      	ands	r2, r3
    8f9a:	0016      	movs	r6, r2
    8f9c:	002b      	movs	r3, r5
    8f9e:	4333      	orrs	r3, r6
    8fa0:	d007      	beq.n	8fb2 <long_division+0x8a>
			r |= 0x01;
    8fa2:	69bb      	ldr	r3, [r7, #24]
    8fa4:	2201      	movs	r2, #1
    8fa6:	4313      	orrs	r3, r2
    8fa8:	61bb      	str	r3, [r7, #24]
    8faa:	69fb      	ldr	r3, [r7, #28]
    8fac:	2200      	movs	r2, #0
    8fae:	4313      	orrs	r3, r2
    8fb0:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    8fb2:	687a      	ldr	r2, [r7, #4]
    8fb4:	69fb      	ldr	r3, [r7, #28]
    8fb6:	429a      	cmp	r2, r3
    8fb8:	d819      	bhi.n	8fee <long_division+0xc6>
    8fba:	687a      	ldr	r2, [r7, #4]
    8fbc:	69fb      	ldr	r3, [r7, #28]
    8fbe:	429a      	cmp	r2, r3
    8fc0:	d103      	bne.n	8fca <long_division+0xa2>
    8fc2:	683a      	ldr	r2, [r7, #0]
    8fc4:	69bb      	ldr	r3, [r7, #24]
    8fc6:	429a      	cmp	r2, r3
    8fc8:	d811      	bhi.n	8fee <long_division+0xc6>
			r = r - d;
    8fca:	69b9      	ldr	r1, [r7, #24]
    8fcc:	69fa      	ldr	r2, [r7, #28]
    8fce:	683b      	ldr	r3, [r7, #0]
    8fd0:	687c      	ldr	r4, [r7, #4]
    8fd2:	1ac9      	subs	r1, r1, r3
    8fd4:	41a2      	sbcs	r2, r4
    8fd6:	000b      	movs	r3, r1
    8fd8:	0014      	movs	r4, r2
    8fda:	61bb      	str	r3, [r7, #24]
    8fdc:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    8fde:	6a3a      	ldr	r2, [r7, #32]
    8fe0:	693b      	ldr	r3, [r7, #16]
    8fe2:	4313      	orrs	r3, r2
    8fe4:	623b      	str	r3, [r7, #32]
    8fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8fe8:	697b      	ldr	r3, [r7, #20]
    8fea:	4313      	orrs	r3, r2
    8fec:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    8fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ff0:	3b01      	subs	r3, #1
    8ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    8ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	daa8      	bge.n	8f4c <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    8ffa:	6a3b      	ldr	r3, [r7, #32]
    8ffc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    8ffe:	0018      	movs	r0, r3
    9000:	0021      	movs	r1, r4
    9002:	46bd      	mov	sp, r7
    9004:	b00d      	add	sp, #52	; 0x34
    9006:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009008 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    9008:	b580      	push	{r7, lr}
    900a:	b086      	sub	sp, #24
    900c:	af00      	add	r7, sp, #0
    900e:	60f8      	str	r0, [r7, #12]
    9010:	60b9      	str	r1, [r7, #8]
    9012:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    9014:	2316      	movs	r3, #22
    9016:	18fb      	adds	r3, r7, r3
    9018:	2200      	movs	r2, #0
    901a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    901c:	68bb      	ldr	r3, [r7, #8]
    901e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    9020:	68bb      	ldr	r3, [r7, #8]
    9022:	085a      	lsrs	r2, r3, #1
    9024:	68fb      	ldr	r3, [r7, #12]
    9026:	429a      	cmp	r2, r3
    9028:	d201      	bcs.n	902e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    902a:	2340      	movs	r3, #64	; 0x40
    902c:	e026      	b.n	907c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    902e:	68bb      	ldr	r3, [r7, #8]
    9030:	085b      	lsrs	r3, r3, #1
    9032:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    9034:	e00a      	b.n	904c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    9036:	693a      	ldr	r2, [r7, #16]
    9038:	68fb      	ldr	r3, [r7, #12]
    903a:	1ad3      	subs	r3, r2, r3
    903c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    903e:	2316      	movs	r3, #22
    9040:	18fb      	adds	r3, r7, r3
    9042:	881a      	ldrh	r2, [r3, #0]
    9044:	2316      	movs	r3, #22
    9046:	18fb      	adds	r3, r7, r3
    9048:	3201      	adds	r2, #1
    904a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    904c:	693a      	ldr	r2, [r7, #16]
    904e:	68fb      	ldr	r3, [r7, #12]
    9050:	429a      	cmp	r2, r3
    9052:	d2f0      	bcs.n	9036 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    9054:	2316      	movs	r3, #22
    9056:	18fb      	adds	r3, r7, r3
    9058:	2216      	movs	r2, #22
    905a:	18ba      	adds	r2, r7, r2
    905c:	8812      	ldrh	r2, [r2, #0]
    905e:	3a01      	subs	r2, #1
    9060:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    9062:	2316      	movs	r3, #22
    9064:	18fb      	adds	r3, r7, r3
    9066:	881b      	ldrh	r3, [r3, #0]
    9068:	2bff      	cmp	r3, #255	; 0xff
    906a:	d901      	bls.n	9070 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    906c:	2340      	movs	r3, #64	; 0x40
    906e:	e005      	b.n	907c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    9070:	687b      	ldr	r3, [r7, #4]
    9072:	2216      	movs	r2, #22
    9074:	18ba      	adds	r2, r7, r2
    9076:	8812      	ldrh	r2, [r2, #0]
    9078:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    907a:	2300      	movs	r3, #0
	}
}
    907c:	0018      	movs	r0, r3
    907e:	46bd      	mov	sp, r7
    9080:	b006      	add	sp, #24
    9082:	bd80      	pop	{r7, pc}

00009084 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9084:	b5f0      	push	{r4, r5, r6, r7, lr}
    9086:	b09d      	sub	sp, #116	; 0x74
    9088:	af00      	add	r7, sp, #0
    908a:	63f8      	str	r0, [r7, #60]	; 0x3c
    908c:	63b9      	str	r1, [r7, #56]	; 0x38
    908e:	637a      	str	r2, [r7, #52]	; 0x34
    9090:	2233      	movs	r2, #51	; 0x33
    9092:	18ba      	adds	r2, r7, r2
    9094:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    9096:	2300      	movs	r3, #0
    9098:	2400      	movs	r4, #0
    909a:	65bb      	str	r3, [r7, #88]	; 0x58
    909c:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    909e:	2300      	movs	r3, #0
    90a0:	2400      	movs	r4, #0
    90a2:	653b      	str	r3, [r7, #80]	; 0x50
    90a4:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    90a6:	2300      	movs	r3, #0
    90a8:	2400      	movs	r4, #0
    90aa:	66bb      	str	r3, [r7, #104]	; 0x68
    90ac:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    90ae:	2300      	movs	r3, #0
    90b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    90b2:	2358      	movs	r3, #88	; 0x58
    90b4:	2230      	movs	r2, #48	; 0x30
    90b6:	4694      	mov	ip, r2
    90b8:	44bc      	add	ip, r7
    90ba:	4463      	add	r3, ip
    90bc:	781a      	ldrb	r2, [r3, #0]
    90be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    90c0:	435a      	muls	r2, r3
    90c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    90c4:	429a      	cmp	r2, r3
    90c6:	d901      	bls.n	90cc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    90c8:	2340      	movs	r3, #64	; 0x40
    90ca:	e0c6      	b.n	925a <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    90cc:	2333      	movs	r3, #51	; 0x33
    90ce:	18fb      	adds	r3, r7, r3
    90d0:	781b      	ldrb	r3, [r3, #0]
    90d2:	2b00      	cmp	r3, #0
    90d4:	d13d      	bne.n	9152 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    90d6:	2358      	movs	r3, #88	; 0x58
    90d8:	2230      	movs	r2, #48	; 0x30
    90da:	4694      	mov	ip, r2
    90dc:	44bc      	add	ip, r7
    90de:	4463      	add	r3, ip
    90e0:	781b      	ldrb	r3, [r3, #0]
    90e2:	b2db      	uxtb	r3, r3
    90e4:	613b      	str	r3, [r7, #16]
    90e6:	2300      	movs	r3, #0
    90e8:	617b      	str	r3, [r7, #20]
    90ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    90ec:	60bb      	str	r3, [r7, #8]
    90ee:	2300      	movs	r3, #0
    90f0:	60fb      	str	r3, [r7, #12]
    90f2:	4c5c      	ldr	r4, [pc, #368]	; (9264 <_sercom_get_async_baud_val+0x1e0>)
    90f4:	68ba      	ldr	r2, [r7, #8]
    90f6:	68fb      	ldr	r3, [r7, #12]
    90f8:	6938      	ldr	r0, [r7, #16]
    90fa:	6979      	ldr	r1, [r7, #20]
    90fc:	47a0      	blx	r4
    90fe:	0003      	movs	r3, r0
    9100:	000c      	movs	r4, r1
    9102:	001b      	movs	r3, r3
    9104:	64fb      	str	r3, [r7, #76]	; 0x4c
    9106:	2300      	movs	r3, #0
    9108:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    910c:	603b      	str	r3, [r7, #0]
    910e:	2300      	movs	r3, #0
    9110:	607b      	str	r3, [r7, #4]
    9112:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    9114:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    9116:	683a      	ldr	r2, [r7, #0]
    9118:	687b      	ldr	r3, [r7, #4]
    911a:	4c53      	ldr	r4, [pc, #332]	; (9268 <_sercom_get_async_baud_val+0x1e4>)
    911c:	47a0      	blx	r4
    911e:	0003      	movs	r3, r0
    9120:	000c      	movs	r4, r1
    9122:	65bb      	str	r3, [r7, #88]	; 0x58
    9124:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    9126:	2100      	movs	r1, #0
    9128:	2201      	movs	r2, #1
    912a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    912c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    912e:	1ac9      	subs	r1, r1, r3
    9130:	41a2      	sbcs	r2, r4
    9132:	000b      	movs	r3, r1
    9134:	0014      	movs	r4, r2
    9136:	653b      	str	r3, [r7, #80]	; 0x50
    9138:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    913a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    913c:	0c1b      	lsrs	r3, r3, #16
    913e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9140:	0416      	lsls	r6, r2, #16
    9142:	431e      	orrs	r6, r3
    9144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9146:	041d      	lsls	r5, r3, #16
    9148:	0033      	movs	r3, r6
    914a:	66bb      	str	r3, [r7, #104]	; 0x68
    914c:	2300      	movs	r3, #0
    914e:	66fb      	str	r3, [r7, #108]	; 0x6c
    9150:	e07d      	b.n	924e <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    9152:	2333      	movs	r3, #51	; 0x33
    9154:	18fb      	adds	r3, r7, r3
    9156:	781b      	ldrb	r3, [r3, #0]
    9158:	2b01      	cmp	r3, #1
    915a:	d000      	beq.n	915e <_sercom_get_async_baud_val+0xda>
    915c:	e077      	b.n	924e <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    915e:	2337      	movs	r3, #55	; 0x37
    9160:	2230      	movs	r2, #48	; 0x30
    9162:	4694      	mov	ip, r2
    9164:	44bc      	add	ip, r7
    9166:	4463      	add	r3, ip
    9168:	2200      	movs	r2, #0
    916a:	701a      	strb	r2, [r3, #0]
    916c:	e04e      	b.n	920c <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9170:	62bb      	str	r3, [r7, #40]	; 0x28
    9172:	2300      	movs	r3, #0
    9174:	62fb      	str	r3, [r7, #44]	; 0x2c
    9176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    917a:	0003      	movs	r3, r0
    917c:	0f5b      	lsrs	r3, r3, #29
    917e:	000a      	movs	r2, r1
    9180:	00d2      	lsls	r2, r2, #3
    9182:	4313      	orrs	r3, r2
    9184:	64fb      	str	r3, [r7, #76]	; 0x4c
    9186:	0003      	movs	r3, r0
    9188:	00db      	lsls	r3, r3, #3
    918a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    918c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    918e:	623b      	str	r3, [r7, #32]
    9190:	2300      	movs	r3, #0
    9192:	627b      	str	r3, [r7, #36]	; 0x24
    9194:	2358      	movs	r3, #88	; 0x58
    9196:	2230      	movs	r2, #48	; 0x30
    9198:	4694      	mov	ip, r2
    919a:	44bc      	add	ip, r7
    919c:	4463      	add	r3, ip
    919e:	781b      	ldrb	r3, [r3, #0]
    91a0:	b2db      	uxtb	r3, r3
    91a2:	61bb      	str	r3, [r7, #24]
    91a4:	2300      	movs	r3, #0
    91a6:	61fb      	str	r3, [r7, #28]
    91a8:	4c2e      	ldr	r4, [pc, #184]	; (9264 <_sercom_get_async_baud_val+0x1e0>)
    91aa:	69ba      	ldr	r2, [r7, #24]
    91ac:	69fb      	ldr	r3, [r7, #28]
    91ae:	6a38      	ldr	r0, [r7, #32]
    91b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    91b2:	47a0      	blx	r4
    91b4:	0003      	movs	r3, r0
    91b6:	000c      	movs	r4, r1
    91b8:	643b      	str	r3, [r7, #64]	; 0x40
    91ba:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    91bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    91be:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    91c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    91c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    91c4:	001a      	movs	r2, r3
    91c6:	0023      	movs	r3, r4
    91c8:	4c27      	ldr	r4, [pc, #156]	; (9268 <_sercom_get_async_baud_val+0x1e4>)
    91ca:	47a0      	blx	r4
    91cc:	0003      	movs	r3, r0
    91ce:	000c      	movs	r4, r1
    91d0:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    91d2:	2337      	movs	r3, #55	; 0x37
    91d4:	2230      	movs	r2, #48	; 0x30
    91d6:	4694      	mov	ip, r2
    91d8:	44bc      	add	ip, r7
    91da:	4463      	add	r3, ip
    91dc:	781b      	ldrb	r3, [r3, #0]
    91de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    91e0:	1ad3      	subs	r3, r2, r3
    91e2:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    91e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    91e6:	08db      	lsrs	r3, r3, #3
    91e8:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    91ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    91ec:	4a1f      	ldr	r2, [pc, #124]	; (926c <_sercom_get_async_baud_val+0x1e8>)
    91ee:	4293      	cmp	r3, r2
    91f0:	d915      	bls.n	921e <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    91f2:	2337      	movs	r3, #55	; 0x37
    91f4:	2230      	movs	r2, #48	; 0x30
    91f6:	4694      	mov	ip, r2
    91f8:	44bc      	add	ip, r7
    91fa:	4463      	add	r3, ip
    91fc:	781a      	ldrb	r2, [r3, #0]
    91fe:	2337      	movs	r3, #55	; 0x37
    9200:	2130      	movs	r1, #48	; 0x30
    9202:	468c      	mov	ip, r1
    9204:	44bc      	add	ip, r7
    9206:	4463      	add	r3, ip
    9208:	3201      	adds	r2, #1
    920a:	701a      	strb	r2, [r3, #0]
    920c:	2337      	movs	r3, #55	; 0x37
    920e:	2230      	movs	r2, #48	; 0x30
    9210:	4694      	mov	ip, r2
    9212:	44bc      	add	ip, r7
    9214:	4463      	add	r3, ip
    9216:	781b      	ldrb	r3, [r3, #0]
    9218:	2b07      	cmp	r3, #7
    921a:	d9a8      	bls.n	916e <_sercom_get_async_baud_val+0xea>
    921c:	e000      	b.n	9220 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    921e:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    9220:	2337      	movs	r3, #55	; 0x37
    9222:	2230      	movs	r2, #48	; 0x30
    9224:	4694      	mov	ip, r2
    9226:	44bc      	add	ip, r7
    9228:	4463      	add	r3, ip
    922a:	781b      	ldrb	r3, [r3, #0]
    922c:	2b08      	cmp	r3, #8
    922e:	d101      	bne.n	9234 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9230:	2340      	movs	r3, #64	; 0x40
    9232:	e012      	b.n	925a <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    9234:	2337      	movs	r3, #55	; 0x37
    9236:	2230      	movs	r2, #48	; 0x30
    9238:	4694      	mov	ip, r2
    923a:	44bc      	add	ip, r7
    923c:	4463      	add	r3, ip
    923e:	781b      	ldrb	r3, [r3, #0]
    9240:	035b      	lsls	r3, r3, #13
    9242:	001a      	movs	r2, r3
    9244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9246:	4313      	orrs	r3, r2
    9248:	66bb      	str	r3, [r7, #104]	; 0x68
    924a:	2300      	movs	r3, #0
    924c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    924e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    9250:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    9252:	b29a      	uxth	r2, r3
    9254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9256:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    9258:	2300      	movs	r3, #0
}
    925a:	0018      	movs	r0, r3
    925c:	46bd      	mov	sp, r7
    925e:	b01d      	add	sp, #116	; 0x74
    9260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9262:	46c0      	nop			; (mov r8, r8)
    9264:	00010411 	.word	0x00010411
    9268:	00008f29 	.word	0x00008f29
    926c:	00001fff 	.word	0x00001fff

00009270 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    9270:	b580      	push	{r7, lr}
    9272:	b084      	sub	sp, #16
    9274:	af00      	add	r7, sp, #0
    9276:	0002      	movs	r2, r0
    9278:	1dfb      	adds	r3, r7, #7
    927a:	701a      	strb	r2, [r3, #0]
    927c:	1dbb      	adds	r3, r7, #6
    927e:	1c0a      	adds	r2, r1, #0
    9280:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    9282:	4b1a      	ldr	r3, [pc, #104]	; (92ec <sercom_set_gclk_generator+0x7c>)
    9284:	781b      	ldrb	r3, [r3, #0]
    9286:	2201      	movs	r2, #1
    9288:	4053      	eors	r3, r2
    928a:	b2db      	uxtb	r3, r3
    928c:	2b00      	cmp	r3, #0
    928e:	d103      	bne.n	9298 <sercom_set_gclk_generator+0x28>
    9290:	1dbb      	adds	r3, r7, #6
    9292:	781b      	ldrb	r3, [r3, #0]
    9294:	2b00      	cmp	r3, #0
    9296:	d01b      	beq.n	92d0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9298:	230c      	movs	r3, #12
    929a:	18fb      	adds	r3, r7, r3
    929c:	0018      	movs	r0, r3
    929e:	4b14      	ldr	r3, [pc, #80]	; (92f0 <sercom_set_gclk_generator+0x80>)
    92a0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    92a2:	230c      	movs	r3, #12
    92a4:	18fb      	adds	r3, r7, r3
    92a6:	1dfa      	adds	r2, r7, #7
    92a8:	7812      	ldrb	r2, [r2, #0]
    92aa:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    92ac:	230c      	movs	r3, #12
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	0019      	movs	r1, r3
    92b2:	2013      	movs	r0, #19
    92b4:	4b0f      	ldr	r3, [pc, #60]	; (92f4 <sercom_set_gclk_generator+0x84>)
    92b6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    92b8:	2013      	movs	r0, #19
    92ba:	4b0f      	ldr	r3, [pc, #60]	; (92f8 <sercom_set_gclk_generator+0x88>)
    92bc:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    92be:	4b0b      	ldr	r3, [pc, #44]	; (92ec <sercom_set_gclk_generator+0x7c>)
    92c0:	1dfa      	adds	r2, r7, #7
    92c2:	7812      	ldrb	r2, [r2, #0]
    92c4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    92c6:	4b09      	ldr	r3, [pc, #36]	; (92ec <sercom_set_gclk_generator+0x7c>)
    92c8:	2201      	movs	r2, #1
    92ca:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    92cc:	2300      	movs	r3, #0
    92ce:	e008      	b.n	92e2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    92d0:	4b06      	ldr	r3, [pc, #24]	; (92ec <sercom_set_gclk_generator+0x7c>)
    92d2:	785b      	ldrb	r3, [r3, #1]
    92d4:	1dfa      	adds	r2, r7, #7
    92d6:	7812      	ldrb	r2, [r2, #0]
    92d8:	429a      	cmp	r2, r3
    92da:	d101      	bne.n	92e0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    92dc:	2300      	movs	r3, #0
    92de:	e000      	b.n	92e2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    92e0:	231d      	movs	r3, #29
}
    92e2:	0018      	movs	r0, r3
    92e4:	46bd      	mov	sp, r7
    92e6:	b004      	add	sp, #16
    92e8:	bd80      	pop	{r7, pc}
    92ea:	46c0      	nop			; (mov r8, r8)
    92ec:	20000100 	.word	0x20000100
    92f0:	00008f11 	.word	0x00008f11
    92f4:	0000bac5 	.word	0x0000bac5
    92f8:	0000bb09 	.word	0x0000bb09

000092fc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    92fc:	b580      	push	{r7, lr}
    92fe:	b082      	sub	sp, #8
    9300:	af00      	add	r7, sp, #0
    9302:	6078      	str	r0, [r7, #4]
    9304:	000a      	movs	r2, r1
    9306:	1cfb      	adds	r3, r7, #3
    9308:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    930a:	687b      	ldr	r3, [r7, #4]
    930c:	4a4d      	ldr	r2, [pc, #308]	; (9444 <_sercom_get_default_pad+0x148>)
    930e:	4293      	cmp	r3, r2
    9310:	d03f      	beq.n	9392 <_sercom_get_default_pad+0x96>
    9312:	4a4c      	ldr	r2, [pc, #304]	; (9444 <_sercom_get_default_pad+0x148>)
    9314:	4293      	cmp	r3, r2
    9316:	d806      	bhi.n	9326 <_sercom_get_default_pad+0x2a>
    9318:	4a4b      	ldr	r2, [pc, #300]	; (9448 <_sercom_get_default_pad+0x14c>)
    931a:	4293      	cmp	r3, r2
    931c:	d00f      	beq.n	933e <_sercom_get_default_pad+0x42>
    931e:	4a4b      	ldr	r2, [pc, #300]	; (944c <_sercom_get_default_pad+0x150>)
    9320:	4293      	cmp	r3, r2
    9322:	d021      	beq.n	9368 <_sercom_get_default_pad+0x6c>
    9324:	e089      	b.n	943a <_sercom_get_default_pad+0x13e>
    9326:	4a4a      	ldr	r2, [pc, #296]	; (9450 <_sercom_get_default_pad+0x154>)
    9328:	4293      	cmp	r3, r2
    932a:	d100      	bne.n	932e <_sercom_get_default_pad+0x32>
    932c:	e05b      	b.n	93e6 <_sercom_get_default_pad+0xea>
    932e:	4a49      	ldr	r2, [pc, #292]	; (9454 <_sercom_get_default_pad+0x158>)
    9330:	4293      	cmp	r3, r2
    9332:	d100      	bne.n	9336 <_sercom_get_default_pad+0x3a>
    9334:	e06c      	b.n	9410 <_sercom_get_default_pad+0x114>
    9336:	4a48      	ldr	r2, [pc, #288]	; (9458 <_sercom_get_default_pad+0x15c>)
    9338:	4293      	cmp	r3, r2
    933a:	d03f      	beq.n	93bc <_sercom_get_default_pad+0xc0>
    933c:	e07d      	b.n	943a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    933e:	1cfb      	adds	r3, r7, #3
    9340:	781b      	ldrb	r3, [r3, #0]
    9342:	2b01      	cmp	r3, #1
    9344:	d00a      	beq.n	935c <_sercom_get_default_pad+0x60>
    9346:	dc02      	bgt.n	934e <_sercom_get_default_pad+0x52>
    9348:	2b00      	cmp	r3, #0
    934a:	d005      	beq.n	9358 <_sercom_get_default_pad+0x5c>
    934c:	e075      	b.n	943a <_sercom_get_default_pad+0x13e>
    934e:	2b02      	cmp	r3, #2
    9350:	d006      	beq.n	9360 <_sercom_get_default_pad+0x64>
    9352:	2b03      	cmp	r3, #3
    9354:	d006      	beq.n	9364 <_sercom_get_default_pad+0x68>
    9356:	e070      	b.n	943a <_sercom_get_default_pad+0x13e>
    9358:	4b40      	ldr	r3, [pc, #256]	; (945c <_sercom_get_default_pad+0x160>)
    935a:	e06f      	b.n	943c <_sercom_get_default_pad+0x140>
    935c:	4b40      	ldr	r3, [pc, #256]	; (9460 <_sercom_get_default_pad+0x164>)
    935e:	e06d      	b.n	943c <_sercom_get_default_pad+0x140>
    9360:	4b40      	ldr	r3, [pc, #256]	; (9464 <_sercom_get_default_pad+0x168>)
    9362:	e06b      	b.n	943c <_sercom_get_default_pad+0x140>
    9364:	4b40      	ldr	r3, [pc, #256]	; (9468 <_sercom_get_default_pad+0x16c>)
    9366:	e069      	b.n	943c <_sercom_get_default_pad+0x140>
    9368:	1cfb      	adds	r3, r7, #3
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	2b01      	cmp	r3, #1
    936e:	d00a      	beq.n	9386 <_sercom_get_default_pad+0x8a>
    9370:	dc02      	bgt.n	9378 <_sercom_get_default_pad+0x7c>
    9372:	2b00      	cmp	r3, #0
    9374:	d005      	beq.n	9382 <_sercom_get_default_pad+0x86>
    9376:	e060      	b.n	943a <_sercom_get_default_pad+0x13e>
    9378:	2b02      	cmp	r3, #2
    937a:	d006      	beq.n	938a <_sercom_get_default_pad+0x8e>
    937c:	2b03      	cmp	r3, #3
    937e:	d006      	beq.n	938e <_sercom_get_default_pad+0x92>
    9380:	e05b      	b.n	943a <_sercom_get_default_pad+0x13e>
    9382:	2303      	movs	r3, #3
    9384:	e05a      	b.n	943c <_sercom_get_default_pad+0x140>
    9386:	4b39      	ldr	r3, [pc, #228]	; (946c <_sercom_get_default_pad+0x170>)
    9388:	e058      	b.n	943c <_sercom_get_default_pad+0x140>
    938a:	4b39      	ldr	r3, [pc, #228]	; (9470 <_sercom_get_default_pad+0x174>)
    938c:	e056      	b.n	943c <_sercom_get_default_pad+0x140>
    938e:	4b39      	ldr	r3, [pc, #228]	; (9474 <_sercom_get_default_pad+0x178>)
    9390:	e054      	b.n	943c <_sercom_get_default_pad+0x140>
    9392:	1cfb      	adds	r3, r7, #3
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	2b01      	cmp	r3, #1
    9398:	d00a      	beq.n	93b0 <_sercom_get_default_pad+0xb4>
    939a:	dc02      	bgt.n	93a2 <_sercom_get_default_pad+0xa6>
    939c:	2b00      	cmp	r3, #0
    939e:	d005      	beq.n	93ac <_sercom_get_default_pad+0xb0>
    93a0:	e04b      	b.n	943a <_sercom_get_default_pad+0x13e>
    93a2:	2b02      	cmp	r3, #2
    93a4:	d006      	beq.n	93b4 <_sercom_get_default_pad+0xb8>
    93a6:	2b03      	cmp	r3, #3
    93a8:	d006      	beq.n	93b8 <_sercom_get_default_pad+0xbc>
    93aa:	e046      	b.n	943a <_sercom_get_default_pad+0x13e>
    93ac:	4b32      	ldr	r3, [pc, #200]	; (9478 <_sercom_get_default_pad+0x17c>)
    93ae:	e045      	b.n	943c <_sercom_get_default_pad+0x140>
    93b0:	4b32      	ldr	r3, [pc, #200]	; (947c <_sercom_get_default_pad+0x180>)
    93b2:	e043      	b.n	943c <_sercom_get_default_pad+0x140>
    93b4:	4b32      	ldr	r3, [pc, #200]	; (9480 <_sercom_get_default_pad+0x184>)
    93b6:	e041      	b.n	943c <_sercom_get_default_pad+0x140>
    93b8:	4b32      	ldr	r3, [pc, #200]	; (9484 <_sercom_get_default_pad+0x188>)
    93ba:	e03f      	b.n	943c <_sercom_get_default_pad+0x140>
    93bc:	1cfb      	adds	r3, r7, #3
    93be:	781b      	ldrb	r3, [r3, #0]
    93c0:	2b01      	cmp	r3, #1
    93c2:	d00a      	beq.n	93da <_sercom_get_default_pad+0xde>
    93c4:	dc02      	bgt.n	93cc <_sercom_get_default_pad+0xd0>
    93c6:	2b00      	cmp	r3, #0
    93c8:	d005      	beq.n	93d6 <_sercom_get_default_pad+0xda>
    93ca:	e036      	b.n	943a <_sercom_get_default_pad+0x13e>
    93cc:	2b02      	cmp	r3, #2
    93ce:	d006      	beq.n	93de <_sercom_get_default_pad+0xe2>
    93d0:	2b03      	cmp	r3, #3
    93d2:	d006      	beq.n	93e2 <_sercom_get_default_pad+0xe6>
    93d4:	e031      	b.n	943a <_sercom_get_default_pad+0x13e>
    93d6:	4b2c      	ldr	r3, [pc, #176]	; (9488 <_sercom_get_default_pad+0x18c>)
    93d8:	e030      	b.n	943c <_sercom_get_default_pad+0x140>
    93da:	4b2c      	ldr	r3, [pc, #176]	; (948c <_sercom_get_default_pad+0x190>)
    93dc:	e02e      	b.n	943c <_sercom_get_default_pad+0x140>
    93de:	4b2c      	ldr	r3, [pc, #176]	; (9490 <_sercom_get_default_pad+0x194>)
    93e0:	e02c      	b.n	943c <_sercom_get_default_pad+0x140>
    93e2:	4b2c      	ldr	r3, [pc, #176]	; (9494 <_sercom_get_default_pad+0x198>)
    93e4:	e02a      	b.n	943c <_sercom_get_default_pad+0x140>
    93e6:	1cfb      	adds	r3, r7, #3
    93e8:	781b      	ldrb	r3, [r3, #0]
    93ea:	2b01      	cmp	r3, #1
    93ec:	d00a      	beq.n	9404 <_sercom_get_default_pad+0x108>
    93ee:	dc02      	bgt.n	93f6 <_sercom_get_default_pad+0xfa>
    93f0:	2b00      	cmp	r3, #0
    93f2:	d005      	beq.n	9400 <_sercom_get_default_pad+0x104>
    93f4:	e021      	b.n	943a <_sercom_get_default_pad+0x13e>
    93f6:	2b02      	cmp	r3, #2
    93f8:	d006      	beq.n	9408 <_sercom_get_default_pad+0x10c>
    93fa:	2b03      	cmp	r3, #3
    93fc:	d006      	beq.n	940c <_sercom_get_default_pad+0x110>
    93fe:	e01c      	b.n	943a <_sercom_get_default_pad+0x13e>
    9400:	4b25      	ldr	r3, [pc, #148]	; (9498 <_sercom_get_default_pad+0x19c>)
    9402:	e01b      	b.n	943c <_sercom_get_default_pad+0x140>
    9404:	4b25      	ldr	r3, [pc, #148]	; (949c <_sercom_get_default_pad+0x1a0>)
    9406:	e019      	b.n	943c <_sercom_get_default_pad+0x140>
    9408:	4b25      	ldr	r3, [pc, #148]	; (94a0 <_sercom_get_default_pad+0x1a4>)
    940a:	e017      	b.n	943c <_sercom_get_default_pad+0x140>
    940c:	4b25      	ldr	r3, [pc, #148]	; (94a4 <_sercom_get_default_pad+0x1a8>)
    940e:	e015      	b.n	943c <_sercom_get_default_pad+0x140>
    9410:	1cfb      	adds	r3, r7, #3
    9412:	781b      	ldrb	r3, [r3, #0]
    9414:	2b01      	cmp	r3, #1
    9416:	d00a      	beq.n	942e <_sercom_get_default_pad+0x132>
    9418:	dc02      	bgt.n	9420 <_sercom_get_default_pad+0x124>
    941a:	2b00      	cmp	r3, #0
    941c:	d005      	beq.n	942a <_sercom_get_default_pad+0x12e>
    941e:	e00c      	b.n	943a <_sercom_get_default_pad+0x13e>
    9420:	2b02      	cmp	r3, #2
    9422:	d006      	beq.n	9432 <_sercom_get_default_pad+0x136>
    9424:	2b03      	cmp	r3, #3
    9426:	d006      	beq.n	9436 <_sercom_get_default_pad+0x13a>
    9428:	e007      	b.n	943a <_sercom_get_default_pad+0x13e>
    942a:	4b1f      	ldr	r3, [pc, #124]	; (94a8 <_sercom_get_default_pad+0x1ac>)
    942c:	e006      	b.n	943c <_sercom_get_default_pad+0x140>
    942e:	4b1f      	ldr	r3, [pc, #124]	; (94ac <_sercom_get_default_pad+0x1b0>)
    9430:	e004      	b.n	943c <_sercom_get_default_pad+0x140>
    9432:	4b1f      	ldr	r3, [pc, #124]	; (94b0 <_sercom_get_default_pad+0x1b4>)
    9434:	e002      	b.n	943c <_sercom_get_default_pad+0x140>
    9436:	4b1f      	ldr	r3, [pc, #124]	; (94b4 <_sercom_get_default_pad+0x1b8>)
    9438:	e000      	b.n	943c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    943a:	2300      	movs	r3, #0
}
    943c:	0018      	movs	r0, r3
    943e:	46bd      	mov	sp, r7
    9440:	b002      	add	sp, #8
    9442:	bd80      	pop	{r7, pc}
    9444:	42001000 	.word	0x42001000
    9448:	42000800 	.word	0x42000800
    944c:	42000c00 	.word	0x42000c00
    9450:	42001800 	.word	0x42001800
    9454:	42001c00 	.word	0x42001c00
    9458:	42001400 	.word	0x42001400
    945c:	00040003 	.word	0x00040003
    9460:	00050003 	.word	0x00050003
    9464:	00060003 	.word	0x00060003
    9468:	00070003 	.word	0x00070003
    946c:	00010003 	.word	0x00010003
    9470:	001e0003 	.word	0x001e0003
    9474:	001f0003 	.word	0x001f0003
    9478:	00080003 	.word	0x00080003
    947c:	00090003 	.word	0x00090003
    9480:	000a0003 	.word	0x000a0003
    9484:	000b0003 	.word	0x000b0003
    9488:	00100003 	.word	0x00100003
    948c:	00110003 	.word	0x00110003
    9490:	00120003 	.word	0x00120003
    9494:	00130003 	.word	0x00130003
    9498:	000c0003 	.word	0x000c0003
    949c:	000d0003 	.word	0x000d0003
    94a0:	000e0003 	.word	0x000e0003
    94a4:	000f0003 	.word	0x000f0003
    94a8:	00160003 	.word	0x00160003
    94ac:	00170003 	.word	0x00170003
    94b0:	00180003 	.word	0x00180003
    94b4:	00190003 	.word	0x00190003

000094b8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    94b8:	b590      	push	{r4, r7, lr}
    94ba:	b08b      	sub	sp, #44	; 0x2c
    94bc:	af00      	add	r7, sp, #0
    94be:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    94c0:	230c      	movs	r3, #12
    94c2:	18fb      	adds	r3, r7, r3
    94c4:	4a0f      	ldr	r2, [pc, #60]	; (9504 <_sercom_get_sercom_inst_index+0x4c>)
    94c6:	ca13      	ldmia	r2!, {r0, r1, r4}
    94c8:	c313      	stmia	r3!, {r0, r1, r4}
    94ca:	ca13      	ldmia	r2!, {r0, r1, r4}
    94cc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    94ce:	2300      	movs	r3, #0
    94d0:	627b      	str	r3, [r7, #36]	; 0x24
    94d2:	e00e      	b.n	94f2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    94d4:	230c      	movs	r3, #12
    94d6:	18fb      	adds	r3, r7, r3
    94d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    94da:	0092      	lsls	r2, r2, #2
    94dc:	58d3      	ldr	r3, [r2, r3]
    94de:	1e1a      	subs	r2, r3, #0
    94e0:	687b      	ldr	r3, [r7, #4]
    94e2:	429a      	cmp	r2, r3
    94e4:	d102      	bne.n	94ec <_sercom_get_sercom_inst_index+0x34>
			return i;
    94e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94e8:	b2db      	uxtb	r3, r3
    94ea:	e006      	b.n	94fa <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    94ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94ee:	3301      	adds	r3, #1
    94f0:	627b      	str	r3, [r7, #36]	; 0x24
    94f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94f4:	2b05      	cmp	r3, #5
    94f6:	d9ed      	bls.n	94d4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    94f8:	2300      	movs	r3, #0
}
    94fa:	0018      	movs	r0, r3
    94fc:	46bd      	mov	sp, r7
    94fe:	b00b      	add	sp, #44	; 0x2c
    9500:	bd90      	pop	{r4, r7, pc}
    9502:	46c0      	nop			; (mov r8, r8)
    9504:	00013700 	.word	0x00013700

00009508 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    9508:	b580      	push	{r7, lr}
    950a:	b082      	sub	sp, #8
    950c:	af00      	add	r7, sp, #0
    950e:	0002      	movs	r2, r0
    9510:	1dfb      	adds	r3, r7, #7
    9512:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    9514:	46c0      	nop			; (mov r8, r8)
    9516:	46bd      	mov	sp, r7
    9518:	b002      	add	sp, #8
    951a:	bd80      	pop	{r7, pc}

0000951c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    951c:	b580      	push	{r7, lr}
    951e:	b084      	sub	sp, #16
    9520:	af00      	add	r7, sp, #0
    9522:	0002      	movs	r2, r0
    9524:	6039      	str	r1, [r7, #0]
    9526:	1dfb      	adds	r3, r7, #7
    9528:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    952a:	4b13      	ldr	r3, [pc, #76]	; (9578 <_sercom_set_handler+0x5c>)
    952c:	781b      	ldrb	r3, [r3, #0]
    952e:	2201      	movs	r2, #1
    9530:	4053      	eors	r3, r2
    9532:	b2db      	uxtb	r3, r3
    9534:	2b00      	cmp	r3, #0
    9536:	d015      	beq.n	9564 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9538:	2300      	movs	r3, #0
    953a:	60fb      	str	r3, [r7, #12]
    953c:	e00c      	b.n	9558 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    953e:	4b0f      	ldr	r3, [pc, #60]	; (957c <_sercom_set_handler+0x60>)
    9540:	68fa      	ldr	r2, [r7, #12]
    9542:	0092      	lsls	r2, r2, #2
    9544:	490e      	ldr	r1, [pc, #56]	; (9580 <_sercom_set_handler+0x64>)
    9546:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    9548:	4b0e      	ldr	r3, [pc, #56]	; (9584 <_sercom_set_handler+0x68>)
    954a:	68fa      	ldr	r2, [r7, #12]
    954c:	0092      	lsls	r2, r2, #2
    954e:	2100      	movs	r1, #0
    9550:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9552:	68fb      	ldr	r3, [r7, #12]
    9554:	3301      	adds	r3, #1
    9556:	60fb      	str	r3, [r7, #12]
    9558:	68fb      	ldr	r3, [r7, #12]
    955a:	2b05      	cmp	r3, #5
    955c:	d9ef      	bls.n	953e <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    955e:	4b06      	ldr	r3, [pc, #24]	; (9578 <_sercom_set_handler+0x5c>)
    9560:	2201      	movs	r2, #1
    9562:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    9564:	1dfb      	adds	r3, r7, #7
    9566:	781a      	ldrb	r2, [r3, #0]
    9568:	4b04      	ldr	r3, [pc, #16]	; (957c <_sercom_set_handler+0x60>)
    956a:	0092      	lsls	r2, r2, #2
    956c:	6839      	ldr	r1, [r7, #0]
    956e:	50d1      	str	r1, [r2, r3]
}
    9570:	46c0      	nop			; (mov r8, r8)
    9572:	46bd      	mov	sp, r7
    9574:	b004      	add	sp, #16
    9576:	bd80      	pop	{r7, pc}
    9578:	20000102 	.word	0x20000102
    957c:	20000104 	.word	0x20000104
    9580:	00009509 	.word	0x00009509
    9584:	20004798 	.word	0x20004798

00009588 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    9588:	b590      	push	{r4, r7, lr}
    958a:	b085      	sub	sp, #20
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    9590:	2308      	movs	r3, #8
    9592:	18fa      	adds	r2, r7, r3
    9594:	4b0c      	ldr	r3, [pc, #48]	; (95c8 <_sercom_get_interrupt_vector+0x40>)
    9596:	0010      	movs	r0, r2
    9598:	0019      	movs	r1, r3
    959a:	2306      	movs	r3, #6
    959c:	001a      	movs	r2, r3
    959e:	4b0b      	ldr	r3, [pc, #44]	; (95cc <_sercom_get_interrupt_vector+0x44>)
    95a0:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    95a2:	230f      	movs	r3, #15
    95a4:	18fc      	adds	r4, r7, r3
    95a6:	687b      	ldr	r3, [r7, #4]
    95a8:	0018      	movs	r0, r3
    95aa:	4b09      	ldr	r3, [pc, #36]	; (95d0 <_sercom_get_interrupt_vector+0x48>)
    95ac:	4798      	blx	r3
    95ae:	0003      	movs	r3, r0
    95b0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    95b2:	230f      	movs	r3, #15
    95b4:	18fb      	adds	r3, r7, r3
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	2208      	movs	r2, #8
    95ba:	18ba      	adds	r2, r7, r2
    95bc:	5cd3      	ldrb	r3, [r2, r3]
    95be:	b25b      	sxtb	r3, r3
}
    95c0:	0018      	movs	r0, r3
    95c2:	46bd      	mov	sp, r7
    95c4:	b005      	add	sp, #20
    95c6:	bd90      	pop	{r4, r7, pc}
    95c8:	00013718 	.word	0x00013718
    95cc:	00010c55 	.word	0x00010c55
    95d0:	000094b9 	.word	0x000094b9

000095d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    95d4:	b580      	push	{r7, lr}
    95d6:	af00      	add	r7, sp, #0
    95d8:	4b03      	ldr	r3, [pc, #12]	; (95e8 <SERCOM0_Handler+0x14>)
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	2000      	movs	r0, #0
    95de:	4798      	blx	r3
    95e0:	46c0      	nop			; (mov r8, r8)
    95e2:	46bd      	mov	sp, r7
    95e4:	bd80      	pop	{r7, pc}
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	20000104 	.word	0x20000104

000095ec <SERCOM1_Handler>:
    95ec:	b580      	push	{r7, lr}
    95ee:	af00      	add	r7, sp, #0
    95f0:	4b03      	ldr	r3, [pc, #12]	; (9600 <SERCOM1_Handler+0x14>)
    95f2:	685b      	ldr	r3, [r3, #4]
    95f4:	2001      	movs	r0, #1
    95f6:	4798      	blx	r3
    95f8:	46c0      	nop			; (mov r8, r8)
    95fa:	46bd      	mov	sp, r7
    95fc:	bd80      	pop	{r7, pc}
    95fe:	46c0      	nop			; (mov r8, r8)
    9600:	20000104 	.word	0x20000104

00009604 <SERCOM2_Handler>:
    9604:	b580      	push	{r7, lr}
    9606:	af00      	add	r7, sp, #0
    9608:	4b03      	ldr	r3, [pc, #12]	; (9618 <SERCOM2_Handler+0x14>)
    960a:	689b      	ldr	r3, [r3, #8]
    960c:	2002      	movs	r0, #2
    960e:	4798      	blx	r3
    9610:	46c0      	nop			; (mov r8, r8)
    9612:	46bd      	mov	sp, r7
    9614:	bd80      	pop	{r7, pc}
    9616:	46c0      	nop			; (mov r8, r8)
    9618:	20000104 	.word	0x20000104

0000961c <SERCOM3_Handler>:
    961c:	b580      	push	{r7, lr}
    961e:	af00      	add	r7, sp, #0
    9620:	4b03      	ldr	r3, [pc, #12]	; (9630 <SERCOM3_Handler+0x14>)
    9622:	68db      	ldr	r3, [r3, #12]
    9624:	2003      	movs	r0, #3
    9626:	4798      	blx	r3
    9628:	46c0      	nop			; (mov r8, r8)
    962a:	46bd      	mov	sp, r7
    962c:	bd80      	pop	{r7, pc}
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	20000104 	.word	0x20000104

00009634 <SERCOM4_Handler>:
    9634:	b580      	push	{r7, lr}
    9636:	af00      	add	r7, sp, #0
    9638:	4b03      	ldr	r3, [pc, #12]	; (9648 <SERCOM4_Handler+0x14>)
    963a:	691b      	ldr	r3, [r3, #16]
    963c:	2004      	movs	r0, #4
    963e:	4798      	blx	r3
    9640:	46c0      	nop			; (mov r8, r8)
    9642:	46bd      	mov	sp, r7
    9644:	bd80      	pop	{r7, pc}
    9646:	46c0      	nop			; (mov r8, r8)
    9648:	20000104 	.word	0x20000104

0000964c <SERCOM5_Handler>:
    964c:	b580      	push	{r7, lr}
    964e:	af00      	add	r7, sp, #0
    9650:	4b03      	ldr	r3, [pc, #12]	; (9660 <SERCOM5_Handler+0x14>)
    9652:	695b      	ldr	r3, [r3, #20]
    9654:	2005      	movs	r0, #5
    9656:	4798      	blx	r3
    9658:	46c0      	nop			; (mov r8, r8)
    965a:	46bd      	mov	sp, r7
    965c:	bd80      	pop	{r7, pc}
    965e:	46c0      	nop			; (mov r8, r8)
    9660:	20000104 	.word	0x20000104

00009664 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    9664:	b580      	push	{r7, lr}
    9666:	b082      	sub	sp, #8
    9668:	af00      	add	r7, sp, #0
    966a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    966c:	687b      	ldr	r3, [r7, #4]
    966e:	2280      	movs	r2, #128	; 0x80
    9670:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	2200      	movs	r2, #0
    9676:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	2201      	movs	r2, #1
    967c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    967e:	687b      	ldr	r3, [r7, #4]
    9680:	2200      	movs	r2, #0
    9682:	70da      	strb	r2, [r3, #3]
}
    9684:	46c0      	nop			; (mov r8, r8)
    9686:	46bd      	mov	sp, r7
    9688:	b002      	add	sp, #8
    968a:	bd80      	pop	{r7, pc}

0000968c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    968c:	b580      	push	{r7, lr}
    968e:	b084      	sub	sp, #16
    9690:	af00      	add	r7, sp, #0
    9692:	0002      	movs	r2, r0
    9694:	1dfb      	adds	r3, r7, #7
    9696:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9698:	230f      	movs	r3, #15
    969a:	18fb      	adds	r3, r7, r3
    969c:	1dfa      	adds	r2, r7, #7
    969e:	7812      	ldrb	r2, [r2, #0]
    96a0:	09d2      	lsrs	r2, r2, #7
    96a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    96a4:	230e      	movs	r3, #14
    96a6:	18fb      	adds	r3, r7, r3
    96a8:	1dfa      	adds	r2, r7, #7
    96aa:	7812      	ldrb	r2, [r2, #0]
    96ac:	0952      	lsrs	r2, r2, #5
    96ae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    96b0:	4b0d      	ldr	r3, [pc, #52]	; (96e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    96b2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    96b4:	230f      	movs	r3, #15
    96b6:	18fb      	adds	r3, r7, r3
    96b8:	781b      	ldrb	r3, [r3, #0]
    96ba:	2b00      	cmp	r3, #0
    96bc:	d10f      	bne.n	96de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    96be:	230f      	movs	r3, #15
    96c0:	18fb      	adds	r3, r7, r3
    96c2:	781b      	ldrb	r3, [r3, #0]
    96c4:	009b      	lsls	r3, r3, #2
    96c6:	2210      	movs	r2, #16
    96c8:	4694      	mov	ip, r2
    96ca:	44bc      	add	ip, r7
    96cc:	4463      	add	r3, ip
    96ce:	3b08      	subs	r3, #8
    96d0:	681a      	ldr	r2, [r3, #0]
    96d2:	230e      	movs	r3, #14
    96d4:	18fb      	adds	r3, r7, r3
    96d6:	781b      	ldrb	r3, [r3, #0]
    96d8:	01db      	lsls	r3, r3, #7
    96da:	18d3      	adds	r3, r2, r3
    96dc:	e000      	b.n	96e0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    96de:	2300      	movs	r3, #0
	}
}
    96e0:	0018      	movs	r0, r3
    96e2:	46bd      	mov	sp, r7
    96e4:	b004      	add	sp, #16
    96e6:	bd80      	pop	{r7, pc}
    96e8:	41004400 	.word	0x41004400

000096ec <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    96ec:	b580      	push	{r7, lr}
    96ee:	b082      	sub	sp, #8
    96f0:	af00      	add	r7, sp, #0
    96f2:	0002      	movs	r2, r0
    96f4:	1dfb      	adds	r3, r7, #7
    96f6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    96f8:	1dfb      	adds	r3, r7, #7
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	0018      	movs	r0, r3
    96fe:	4b03      	ldr	r3, [pc, #12]	; (970c <port_get_group_from_gpio_pin+0x20>)
    9700:	4798      	blx	r3
    9702:	0003      	movs	r3, r0
}
    9704:	0018      	movs	r0, r3
    9706:	46bd      	mov	sp, r7
    9708:	b002      	add	sp, #8
    970a:	bd80      	pop	{r7, pc}
    970c:	0000968d 	.word	0x0000968d

00009710 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9710:	b580      	push	{r7, lr}
    9712:	b084      	sub	sp, #16
    9714:	af00      	add	r7, sp, #0
    9716:	0002      	movs	r2, r0
    9718:	1dfb      	adds	r3, r7, #7
    971a:	701a      	strb	r2, [r3, #0]
    971c:	1dbb      	adds	r3, r7, #6
    971e:	1c0a      	adds	r2, r1, #0
    9720:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9722:	1dfb      	adds	r3, r7, #7
    9724:	781b      	ldrb	r3, [r3, #0]
    9726:	0018      	movs	r0, r3
    9728:	4b0d      	ldr	r3, [pc, #52]	; (9760 <port_pin_set_output_level+0x50>)
    972a:	4798      	blx	r3
    972c:	0003      	movs	r3, r0
    972e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9730:	1dfb      	adds	r3, r7, #7
    9732:	781b      	ldrb	r3, [r3, #0]
    9734:	221f      	movs	r2, #31
    9736:	4013      	ands	r3, r2
    9738:	2201      	movs	r2, #1
    973a:	409a      	lsls	r2, r3
    973c:	0013      	movs	r3, r2
    973e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9740:	1dbb      	adds	r3, r7, #6
    9742:	781b      	ldrb	r3, [r3, #0]
    9744:	2b00      	cmp	r3, #0
    9746:	d003      	beq.n	9750 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	68ba      	ldr	r2, [r7, #8]
    974c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    974e:	e002      	b.n	9756 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9750:	68fb      	ldr	r3, [r7, #12]
    9752:	68ba      	ldr	r2, [r7, #8]
    9754:	615a      	str	r2, [r3, #20]
	}
}
    9756:	46c0      	nop			; (mov r8, r8)
    9758:	46bd      	mov	sp, r7
    975a:	b004      	add	sp, #16
    975c:	bd80      	pop	{r7, pc}
    975e:	46c0      	nop			; (mov r8, r8)
    9760:	000096ed 	.word	0x000096ed

00009764 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9764:	b580      	push	{r7, lr}
    9766:	b082      	sub	sp, #8
    9768:	af00      	add	r7, sp, #0
    976a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	2200      	movs	r2, #0
    9770:	701a      	strb	r2, [r3, #0]
}
    9772:	46c0      	nop			; (mov r8, r8)
    9774:	46bd      	mov	sp, r7
    9776:	b002      	add	sp, #8
    9778:	bd80      	pop	{r7, pc}
    977a:	46c0      	nop			; (mov r8, r8)

0000977c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    977c:	b580      	push	{r7, lr}
    977e:	b082      	sub	sp, #8
    9780:	af00      	add	r7, sp, #0
    9782:	0002      	movs	r2, r0
    9784:	6039      	str	r1, [r7, #0]
    9786:	1dfb      	adds	r3, r7, #7
    9788:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    978a:	1dfb      	adds	r3, r7, #7
    978c:	781b      	ldrb	r3, [r3, #0]
    978e:	2b01      	cmp	r3, #1
    9790:	d00a      	beq.n	97a8 <system_apb_clock_set_mask+0x2c>
    9792:	2b02      	cmp	r3, #2
    9794:	d00f      	beq.n	97b6 <system_apb_clock_set_mask+0x3a>
    9796:	2b00      	cmp	r3, #0
    9798:	d114      	bne.n	97c4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    979a:	4b0e      	ldr	r3, [pc, #56]	; (97d4 <system_apb_clock_set_mask+0x58>)
    979c:	4a0d      	ldr	r2, [pc, #52]	; (97d4 <system_apb_clock_set_mask+0x58>)
    979e:	6991      	ldr	r1, [r2, #24]
    97a0:	683a      	ldr	r2, [r7, #0]
    97a2:	430a      	orrs	r2, r1
    97a4:	619a      	str	r2, [r3, #24]
			break;
    97a6:	e00f      	b.n	97c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    97a8:	4b0a      	ldr	r3, [pc, #40]	; (97d4 <system_apb_clock_set_mask+0x58>)
    97aa:	4a0a      	ldr	r2, [pc, #40]	; (97d4 <system_apb_clock_set_mask+0x58>)
    97ac:	69d1      	ldr	r1, [r2, #28]
    97ae:	683a      	ldr	r2, [r7, #0]
    97b0:	430a      	orrs	r2, r1
    97b2:	61da      	str	r2, [r3, #28]
			break;
    97b4:	e008      	b.n	97c8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    97b6:	4b07      	ldr	r3, [pc, #28]	; (97d4 <system_apb_clock_set_mask+0x58>)
    97b8:	4a06      	ldr	r2, [pc, #24]	; (97d4 <system_apb_clock_set_mask+0x58>)
    97ba:	6a11      	ldr	r1, [r2, #32]
    97bc:	683a      	ldr	r2, [r7, #0]
    97be:	430a      	orrs	r2, r1
    97c0:	621a      	str	r2, [r3, #32]
			break;
    97c2:	e001      	b.n	97c8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    97c4:	2317      	movs	r3, #23
    97c6:	e000      	b.n	97ca <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    97c8:	2300      	movs	r3, #0
}
    97ca:	0018      	movs	r0, r3
    97cc:	46bd      	mov	sp, r7
    97ce:	b002      	add	sp, #8
    97d0:	bd80      	pop	{r7, pc}
    97d2:	46c0      	nop			; (mov r8, r8)
    97d4:	40000400 	.word	0x40000400

000097d8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    97d8:	b580      	push	{r7, lr}
    97da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    97dc:	4b05      	ldr	r3, [pc, #20]	; (97f4 <system_is_debugger_present+0x1c>)
    97de:	789b      	ldrb	r3, [r3, #2]
    97e0:	b2db      	uxtb	r3, r3
    97e2:	001a      	movs	r2, r3
    97e4:	2302      	movs	r3, #2
    97e6:	4013      	ands	r3, r2
    97e8:	1e5a      	subs	r2, r3, #1
    97ea:	4193      	sbcs	r3, r2
    97ec:	b2db      	uxtb	r3, r3
}
    97ee:	0018      	movs	r0, r3
    97f0:	46bd      	mov	sp, r7
    97f2:	bd80      	pop	{r7, pc}
    97f4:	41002000 	.word	0x41002000

000097f8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    97f8:	b580      	push	{r7, lr}
    97fa:	b084      	sub	sp, #16
    97fc:	af00      	add	r7, sp, #0
    97fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9800:	687b      	ldr	r3, [r7, #4]
    9802:	681b      	ldr	r3, [r3, #0]
    9804:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    9806:	68fb      	ldr	r3, [r7, #12]
    9808:	7e1b      	ldrb	r3, [r3, #24]
    980a:	b2db      	uxtb	r3, r3
    980c:	001a      	movs	r2, r3
    980e:	2301      	movs	r3, #1
    9810:	4013      	ands	r3, r2
    9812:	1e5a      	subs	r2, r3, #1
    9814:	4193      	sbcs	r3, r2
    9816:	b2db      	uxtb	r3, r3
}
    9818:	0018      	movs	r0, r3
    981a:	46bd      	mov	sp, r7
    981c:	b004      	add	sp, #16
    981e:	bd80      	pop	{r7, pc}

00009820 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    9820:	b580      	push	{r7, lr}
    9822:	b084      	sub	sp, #16
    9824:	af00      	add	r7, sp, #0
    9826:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9828:	687b      	ldr	r3, [r7, #4]
    982a:	681b      	ldr	r3, [r3, #0]
    982c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    982e:	68fb      	ldr	r3, [r7, #12]
    9830:	7e1b      	ldrb	r3, [r3, #24]
    9832:	b2db      	uxtb	r3, r3
    9834:	001a      	movs	r2, r3
    9836:	2304      	movs	r3, #4
    9838:	4013      	ands	r3, r2
    983a:	1e5a      	subs	r2, r3, #1
    983c:	4193      	sbcs	r3, r2
    983e:	b2db      	uxtb	r3, r3
}
    9840:	0018      	movs	r0, r3
    9842:	46bd      	mov	sp, r7
    9844:	b004      	add	sp, #16
    9846:	bd80      	pop	{r7, pc}

00009848 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    9848:	b580      	push	{r7, lr}
    984a:	b084      	sub	sp, #16
    984c:	af00      	add	r7, sp, #0
    984e:	6078      	str	r0, [r7, #4]
    9850:	000a      	movs	r2, r1
    9852:	1cbb      	adds	r3, r7, #2
    9854:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9856:	687b      	ldr	r3, [r7, #4]
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	0018      	movs	r0, r3
    9860:	4b0a      	ldr	r3, [pc, #40]	; (988c <spi_write+0x44>)
    9862:	4798      	blx	r3
    9864:	0003      	movs	r3, r0
    9866:	001a      	movs	r2, r3
    9868:	2301      	movs	r3, #1
    986a:	4053      	eors	r3, r2
    986c:	b2db      	uxtb	r3, r3
    986e:	2b00      	cmp	r3, #0
    9870:	d001      	beq.n	9876 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    9872:	2305      	movs	r3, #5
    9874:	e006      	b.n	9884 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    9876:	1cbb      	adds	r3, r7, #2
    9878:	881b      	ldrh	r3, [r3, #0]
    987a:	05db      	lsls	r3, r3, #23
    987c:	0dda      	lsrs	r2, r3, #23
    987e:	68fb      	ldr	r3, [r7, #12]
    9880:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    9882:	2300      	movs	r3, #0
}
    9884:	0018      	movs	r0, r3
    9886:	46bd      	mov	sp, r7
    9888:	b004      	add	sp, #16
    988a:	bd80      	pop	{r7, pc}
    988c:	000097f9 	.word	0x000097f9

00009890 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    9890:	b580      	push	{r7, lr}
    9892:	b084      	sub	sp, #16
    9894:	af00      	add	r7, sp, #0
    9896:	6078      	str	r0, [r7, #4]
    9898:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	681b      	ldr	r3, [r3, #0]
    989e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    98a0:	687b      	ldr	r3, [r7, #4]
    98a2:	0018      	movs	r0, r3
    98a4:	4b1b      	ldr	r3, [pc, #108]	; (9914 <spi_read+0x84>)
    98a6:	4798      	blx	r3
    98a8:	0003      	movs	r3, r0
    98aa:	001a      	movs	r2, r3
    98ac:	2301      	movs	r3, #1
    98ae:	4053      	eors	r3, r2
    98b0:	b2db      	uxtb	r3, r3
    98b2:	2b00      	cmp	r3, #0
    98b4:	d001      	beq.n	98ba <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    98b6:	2310      	movs	r3, #16
    98b8:	e027      	b.n	990a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    98ba:	230f      	movs	r3, #15
    98bc:	18fb      	adds	r3, r7, r3
    98be:	2200      	movs	r2, #0
    98c0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    98c2:	68bb      	ldr	r3, [r7, #8]
    98c4:	8b5b      	ldrh	r3, [r3, #26]
    98c6:	b29b      	uxth	r3, r3
    98c8:	001a      	movs	r2, r3
    98ca:	2304      	movs	r3, #4
    98cc:	4013      	ands	r3, r2
    98ce:	d006      	beq.n	98de <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    98d0:	230f      	movs	r3, #15
    98d2:	18fb      	adds	r3, r7, r3
    98d4:	221e      	movs	r2, #30
    98d6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    98d8:	68bb      	ldr	r3, [r7, #8]
    98da:	2204      	movs	r2, #4
    98dc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	799b      	ldrb	r3, [r3, #6]
    98e2:	2b01      	cmp	r3, #1
    98e4:	d108      	bne.n	98f8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    98e6:	68bb      	ldr	r3, [r7, #8]
    98e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    98ea:	b29b      	uxth	r3, r3
    98ec:	05db      	lsls	r3, r3, #23
    98ee:	0ddb      	lsrs	r3, r3, #23
    98f0:	b29a      	uxth	r2, r3
    98f2:	683b      	ldr	r3, [r7, #0]
    98f4:	801a      	strh	r2, [r3, #0]
    98f6:	e005      	b.n	9904 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    98f8:	68bb      	ldr	r3, [r7, #8]
    98fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    98fc:	b2db      	uxtb	r3, r3
    98fe:	b29a      	uxth	r2, r3
    9900:	683b      	ldr	r3, [r7, #0]
    9902:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    9904:	230f      	movs	r3, #15
    9906:	18fb      	adds	r3, r7, r3
    9908:	781b      	ldrb	r3, [r3, #0]
}
    990a:	0018      	movs	r0, r3
    990c:	46bd      	mov	sp, r7
    990e:	b004      	add	sp, #16
    9910:	bd80      	pop	{r7, pc}
    9912:	46c0      	nop			; (mov r8, r8)
    9914:	00009821 	.word	0x00009821

00009918 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    9918:	b590      	push	{r4, r7, lr}
    991a:	b093      	sub	sp, #76	; 0x4c
    991c:	af00      	add	r7, sp, #0
    991e:	6078      	str	r0, [r7, #4]
    9920:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9922:	687b      	ldr	r3, [r7, #4]
    9924:	681b      	ldr	r3, [r3, #0]
    9926:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    9928:	687b      	ldr	r3, [r7, #4]
    992a:	681b      	ldr	r3, [r3, #0]
    992c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    992e:	231c      	movs	r3, #28
    9930:	18fb      	adds	r3, r7, r3
    9932:	0018      	movs	r0, r3
    9934:	4b75      	ldr	r3, [pc, #468]	; (9b0c <_spi_set_config+0x1f4>)
    9936:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9938:	231c      	movs	r3, #28
    993a:	18fb      	adds	r3, r7, r3
    993c:	2200      	movs	r2, #0
    993e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    9940:	683b      	ldr	r3, [r7, #0]
    9942:	781b      	ldrb	r3, [r3, #0]
    9944:	2b00      	cmp	r3, #0
    9946:	d103      	bne.n	9950 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9948:	231c      	movs	r3, #28
    994a:	18fb      	adds	r3, r7, r3
    994c:	2200      	movs	r2, #0
    994e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9950:	683b      	ldr	r3, [r7, #0]
    9952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    9954:	230c      	movs	r3, #12
    9956:	18fb      	adds	r3, r7, r3
    9958:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    995a:	683b      	ldr	r3, [r7, #0]
    995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    995e:	230c      	movs	r3, #12
    9960:	18fb      	adds	r3, r7, r3
    9962:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    9964:	683b      	ldr	r3, [r7, #0]
    9966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    9968:	230c      	movs	r3, #12
    996a:	18fb      	adds	r3, r7, r3
    996c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    996e:	683b      	ldr	r3, [r7, #0]
    9970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    9972:	230c      	movs	r3, #12
    9974:	18fb      	adds	r3, r7, r3
    9976:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9978:	2347      	movs	r3, #71	; 0x47
    997a:	18fb      	adds	r3, r7, r3
    997c:	2200      	movs	r2, #0
    997e:	701a      	strb	r2, [r3, #0]
    9980:	e02c      	b.n	99dc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    9982:	2347      	movs	r3, #71	; 0x47
    9984:	18fb      	adds	r3, r7, r3
    9986:	781a      	ldrb	r2, [r3, #0]
    9988:	230c      	movs	r3, #12
    998a:	18fb      	adds	r3, r7, r3
    998c:	0092      	lsls	r2, r2, #2
    998e:	58d3      	ldr	r3, [r2, r3]
    9990:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    9992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9994:	2b00      	cmp	r3, #0
    9996:	d109      	bne.n	99ac <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9998:	2347      	movs	r3, #71	; 0x47
    999a:	18fb      	adds	r3, r7, r3
    999c:	781a      	ldrb	r2, [r3, #0]
    999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    99a0:	0011      	movs	r1, r2
    99a2:	0018      	movs	r0, r3
    99a4:	4b5a      	ldr	r3, [pc, #360]	; (9b10 <_spi_set_config+0x1f8>)
    99a6:	4798      	blx	r3
    99a8:	0003      	movs	r3, r0
    99aa:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    99ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    99ae:	3301      	adds	r3, #1
    99b0:	d00d      	beq.n	99ce <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    99b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    99b4:	b2da      	uxtb	r2, r3
    99b6:	231c      	movs	r3, #28
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    99bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    99be:	0c1b      	lsrs	r3, r3, #16
    99c0:	b2db      	uxtb	r3, r3
    99c2:	221c      	movs	r2, #28
    99c4:	18ba      	adds	r2, r7, r2
    99c6:	0011      	movs	r1, r2
    99c8:	0018      	movs	r0, r3
    99ca:	4b52      	ldr	r3, [pc, #328]	; (9b14 <_spi_set_config+0x1fc>)
    99cc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    99ce:	2347      	movs	r3, #71	; 0x47
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	781a      	ldrb	r2, [r3, #0]
    99d4:	2347      	movs	r3, #71	; 0x47
    99d6:	18fb      	adds	r3, r7, r3
    99d8:	3201      	adds	r2, #1
    99da:	701a      	strb	r2, [r3, #0]
    99dc:	2347      	movs	r3, #71	; 0x47
    99de:	18fb      	adds	r3, r7, r3
    99e0:	781b      	ldrb	r3, [r3, #0]
    99e2:	2b03      	cmp	r3, #3
    99e4:	d9cd      	bls.n	9982 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    99e6:	683b      	ldr	r3, [r7, #0]
    99e8:	781a      	ldrb	r2, [r3, #0]
    99ea:	687b      	ldr	r3, [r7, #4]
    99ec:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    99ee:	683b      	ldr	r3, [r7, #0]
    99f0:	7c1a      	ldrb	r2, [r3, #16]
    99f2:	687b      	ldr	r3, [r7, #4]
    99f4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    99f6:	683b      	ldr	r3, [r7, #0]
    99f8:	7c9a      	ldrb	r2, [r3, #18]
    99fa:	687b      	ldr	r3, [r7, #4]
    99fc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    99fe:	683b      	ldr	r3, [r7, #0]
    9a00:	7d1a      	ldrb	r2, [r3, #20]
    9a02:	687b      	ldr	r3, [r7, #4]
    9a04:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    9a06:	230a      	movs	r3, #10
    9a08:	18fb      	adds	r3, r7, r3
    9a0a:	2200      	movs	r2, #0
    9a0c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    9a0e:	2300      	movs	r3, #0
    9a10:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    9a12:	2300      	movs	r3, #0
    9a14:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    9a16:	683b      	ldr	r3, [r7, #0]
    9a18:	781b      	ldrb	r3, [r3, #0]
    9a1a:	2b01      	cmp	r3, #1
    9a1c:	d129      	bne.n	9a72 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	681b      	ldr	r3, [r3, #0]
    9a22:	0018      	movs	r0, r3
    9a24:	4b3c      	ldr	r3, [pc, #240]	; (9b18 <_spi_set_config+0x200>)
    9a26:	4798      	blx	r3
    9a28:	0003      	movs	r3, r0
    9a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9a2e:	3314      	adds	r3, #20
    9a30:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    9a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a34:	b2db      	uxtb	r3, r3
    9a36:	0018      	movs	r0, r3
    9a38:	4b38      	ldr	r3, [pc, #224]	; (9b1c <_spi_set_config+0x204>)
    9a3a:	4798      	blx	r3
    9a3c:	0003      	movs	r3, r0
    9a3e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    9a40:	683b      	ldr	r3, [r7, #0]
    9a42:	699b      	ldr	r3, [r3, #24]
    9a44:	2223      	movs	r2, #35	; 0x23
    9a46:	18bc      	adds	r4, r7, r2
    9a48:	220a      	movs	r2, #10
    9a4a:	18ba      	adds	r2, r7, r2
    9a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9a4e:	0018      	movs	r0, r3
    9a50:	4b33      	ldr	r3, [pc, #204]	; (9b20 <_spi_set_config+0x208>)
    9a52:	4798      	blx	r3
    9a54:	0003      	movs	r3, r0
    9a56:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    9a58:	2323      	movs	r3, #35	; 0x23
    9a5a:	18fb      	adds	r3, r7, r3
    9a5c:	781b      	ldrb	r3, [r3, #0]
    9a5e:	2b00      	cmp	r3, #0
    9a60:	d001      	beq.n	9a66 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    9a62:	2317      	movs	r3, #23
    9a64:	e04e      	b.n	9b04 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    9a66:	230a      	movs	r3, #10
    9a68:	18fb      	adds	r3, r7, r3
    9a6a:	881b      	ldrh	r3, [r3, #0]
    9a6c:	b2da      	uxtb	r2, r3
    9a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a70:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    9a72:	683b      	ldr	r3, [r7, #0]
    9a74:	685b      	ldr	r3, [r3, #4]
    9a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a78:	4313      	orrs	r3, r2
    9a7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    9a7c:	683b      	ldr	r3, [r7, #0]
    9a7e:	689b      	ldr	r3, [r3, #8]
    9a80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a82:	4313      	orrs	r3, r2
    9a84:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    9a86:	683b      	ldr	r3, [r7, #0]
    9a88:	68db      	ldr	r3, [r3, #12]
    9a8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a8c:	4313      	orrs	r3, r2
    9a8e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    9a90:	683b      	ldr	r3, [r7, #0]
    9a92:	7c1b      	ldrb	r3, [r3, #16]
    9a94:	001a      	movs	r2, r3
    9a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a98:	4313      	orrs	r3, r2
    9a9a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    9a9c:	683b      	ldr	r3, [r7, #0]
    9a9e:	7c5b      	ldrb	r3, [r3, #17]
    9aa0:	2b00      	cmp	r3, #0
    9aa2:	d103      	bne.n	9aac <_spi_set_config+0x194>
    9aa4:	4b1f      	ldr	r3, [pc, #124]	; (9b24 <_spi_set_config+0x20c>)
    9aa6:	4798      	blx	r3
    9aa8:	1e03      	subs	r3, r0, #0
    9aaa:	d003      	beq.n	9ab4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    9aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9aae:	2280      	movs	r2, #128	; 0x80
    9ab0:	4313      	orrs	r3, r2
    9ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    9ab4:	683b      	ldr	r3, [r7, #0]
    9ab6:	7c9b      	ldrb	r3, [r3, #18]
    9ab8:	2b00      	cmp	r3, #0
    9aba:	d004      	beq.n	9ac6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    9abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9abe:	2280      	movs	r2, #128	; 0x80
    9ac0:	0292      	lsls	r2, r2, #10
    9ac2:	4313      	orrs	r3, r2
    9ac4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    9ac6:	683b      	ldr	r3, [r7, #0]
    9ac8:	7cdb      	ldrb	r3, [r3, #19]
    9aca:	2b00      	cmp	r3, #0
    9acc:	d004      	beq.n	9ad8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    9ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9ad0:	2280      	movs	r2, #128	; 0x80
    9ad2:	0092      	lsls	r2, r2, #2
    9ad4:	4313      	orrs	r3, r2
    9ad6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    9ad8:	683b      	ldr	r3, [r7, #0]
    9ada:	7d1b      	ldrb	r3, [r3, #20]
    9adc:	2b00      	cmp	r3, #0
    9ade:	d004      	beq.n	9aea <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    9ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9ae2:	2280      	movs	r2, #128	; 0x80
    9ae4:	0192      	lsls	r2, r2, #6
    9ae6:	4313      	orrs	r3, r2
    9ae8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    9aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9aec:	681a      	ldr	r2, [r3, #0]
    9aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9af0:	431a      	orrs	r2, r3
    9af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9af4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    9af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9af8:	685a      	ldr	r2, [r3, #4]
    9afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9afc:	431a      	orrs	r2, r3
    9afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9b00:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    9b02:	2300      	movs	r3, #0
}
    9b04:	0018      	movs	r0, r3
    9b06:	46bd      	mov	sp, r7
    9b08:	b013      	add	sp, #76	; 0x4c
    9b0a:	bd90      	pop	{r4, r7, pc}
    9b0c:	00009665 	.word	0x00009665
    9b10:	000092fd 	.word	0x000092fd
    9b14:	0000bdb1 	.word	0x0000bdb1
    9b18:	000094b9 	.word	0x000094b9
    9b1c:	0000bbe9 	.word	0x0000bbe9
    9b20:	00009009 	.word	0x00009009
    9b24:	000097d9 	.word	0x000097d9

00009b28 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    9b28:	b590      	push	{r4, r7, lr}
    9b2a:	b08b      	sub	sp, #44	; 0x2c
    9b2c:	af00      	add	r7, sp, #0
    9b2e:	60f8      	str	r0, [r7, #12]
    9b30:	60b9      	str	r1, [r7, #8]
    9b32:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    9b34:	68fb      	ldr	r3, [r7, #12]
    9b36:	68ba      	ldr	r2, [r7, #8]
    9b38:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    9b3a:	68fb      	ldr	r3, [r7, #12]
    9b3c:	681b      	ldr	r3, [r3, #0]
    9b3e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    9b40:	6a3b      	ldr	r3, [r7, #32]
    9b42:	681b      	ldr	r3, [r3, #0]
    9b44:	2202      	movs	r2, #2
    9b46:	4013      	ands	r3, r2
    9b48:	d001      	beq.n	9b4e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    9b4a:	231c      	movs	r3, #28
    9b4c:	e09c      	b.n	9c88 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    9b4e:	6a3b      	ldr	r3, [r7, #32]
    9b50:	681b      	ldr	r3, [r3, #0]
    9b52:	2201      	movs	r2, #1
    9b54:	4013      	ands	r3, r2
    9b56:	d001      	beq.n	9b5c <spi_init+0x34>
		return STATUS_BUSY;
    9b58:	2305      	movs	r3, #5
    9b5a:	e095      	b.n	9c88 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9b5c:	68fb      	ldr	r3, [r7, #12]
    9b5e:	681b      	ldr	r3, [r3, #0]
    9b60:	0018      	movs	r0, r3
    9b62:	4b4b      	ldr	r3, [pc, #300]	; (9c90 <spi_init+0x168>)
    9b64:	4798      	blx	r3
    9b66:	0003      	movs	r3, r0
    9b68:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9b6a:	69fb      	ldr	r3, [r7, #28]
    9b6c:	3302      	adds	r3, #2
    9b6e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9b70:	69fb      	ldr	r3, [r7, #28]
    9b72:	3314      	adds	r3, #20
    9b74:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9b76:	2201      	movs	r2, #1
    9b78:	69bb      	ldr	r3, [r7, #24]
    9b7a:	409a      	lsls	r2, r3
    9b7c:	0013      	movs	r3, r2
    9b7e:	0019      	movs	r1, r3
    9b80:	2002      	movs	r0, #2
    9b82:	4b44      	ldr	r3, [pc, #272]	; (9c94 <spi_init+0x16c>)
    9b84:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9b86:	2310      	movs	r3, #16
    9b88:	18fb      	adds	r3, r7, r3
    9b8a:	0018      	movs	r0, r3
    9b8c:	4b42      	ldr	r3, [pc, #264]	; (9c98 <spi_init+0x170>)
    9b8e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	2224      	movs	r2, #36	; 0x24
    9b94:	5c9a      	ldrb	r2, [r3, r2]
    9b96:	2310      	movs	r3, #16
    9b98:	18fb      	adds	r3, r7, r3
    9b9a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9b9c:	697b      	ldr	r3, [r7, #20]
    9b9e:	b2db      	uxtb	r3, r3
    9ba0:	2210      	movs	r2, #16
    9ba2:	18ba      	adds	r2, r7, r2
    9ba4:	0011      	movs	r1, r2
    9ba6:	0018      	movs	r0, r3
    9ba8:	4b3c      	ldr	r3, [pc, #240]	; (9c9c <spi_init+0x174>)
    9baa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9bac:	697b      	ldr	r3, [r7, #20]
    9bae:	b2db      	uxtb	r3, r3
    9bb0:	0018      	movs	r0, r3
    9bb2:	4b3b      	ldr	r3, [pc, #236]	; (9ca0 <spi_init+0x178>)
    9bb4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    9bb6:	687b      	ldr	r3, [r7, #4]
    9bb8:	2224      	movs	r2, #36	; 0x24
    9bba:	5c9b      	ldrb	r3, [r3, r2]
    9bbc:	2100      	movs	r1, #0
    9bbe:	0018      	movs	r0, r3
    9bc0:	4b38      	ldr	r3, [pc, #224]	; (9ca4 <spi_init+0x17c>)
    9bc2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	781b      	ldrb	r3, [r3, #0]
    9bc8:	2b01      	cmp	r3, #1
    9bca:	d105      	bne.n	9bd8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    9bcc:	6a3b      	ldr	r3, [r7, #32]
    9bce:	681b      	ldr	r3, [r3, #0]
    9bd0:	220c      	movs	r2, #12
    9bd2:	431a      	orrs	r2, r3
    9bd4:	6a3b      	ldr	r3, [r7, #32]
    9bd6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9bd8:	2327      	movs	r3, #39	; 0x27
    9bda:	18fb      	adds	r3, r7, r3
    9bdc:	2200      	movs	r2, #0
    9bde:	701a      	strb	r2, [r3, #0]
    9be0:	e010      	b.n	9c04 <spi_init+0xdc>
		module->callback[i]        = NULL;
    9be2:	2327      	movs	r3, #39	; 0x27
    9be4:	18fb      	adds	r3, r7, r3
    9be6:	781b      	ldrb	r3, [r3, #0]
    9be8:	68fa      	ldr	r2, [r7, #12]
    9bea:	3302      	adds	r3, #2
    9bec:	009b      	lsls	r3, r3, #2
    9bee:	18d3      	adds	r3, r2, r3
    9bf0:	3304      	adds	r3, #4
    9bf2:	2200      	movs	r2, #0
    9bf4:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    9bf6:	2327      	movs	r3, #39	; 0x27
    9bf8:	18fb      	adds	r3, r7, r3
    9bfa:	781a      	ldrb	r2, [r3, #0]
    9bfc:	2327      	movs	r3, #39	; 0x27
    9bfe:	18fb      	adds	r3, r7, r3
    9c00:	3201      	adds	r2, #1
    9c02:	701a      	strb	r2, [r3, #0]
    9c04:	2327      	movs	r3, #39	; 0x27
    9c06:	18fb      	adds	r3, r7, r3
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	2b06      	cmp	r3, #6
    9c0c:	d9e9      	bls.n	9be2 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    9c0e:	68fb      	ldr	r3, [r7, #12]
    9c10:	2200      	movs	r2, #0
    9c12:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    9c14:	68fb      	ldr	r3, [r7, #12]
    9c16:	2200      	movs	r2, #0
    9c18:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    9c1a:	68fb      	ldr	r3, [r7, #12]
    9c1c:	2200      	movs	r2, #0
    9c1e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    9c20:	68fb      	ldr	r3, [r7, #12]
    9c22:	2200      	movs	r2, #0
    9c24:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    9c26:	68fb      	ldr	r3, [r7, #12]
    9c28:	2236      	movs	r2, #54	; 0x36
    9c2a:	2100      	movs	r1, #0
    9c2c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    9c2e:	68fb      	ldr	r3, [r7, #12]
    9c30:	2237      	movs	r2, #55	; 0x37
    9c32:	2100      	movs	r1, #0
    9c34:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    9c36:	68fb      	ldr	r3, [r7, #12]
    9c38:	2238      	movs	r2, #56	; 0x38
    9c3a:	2100      	movs	r1, #0
    9c3c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    9c3e:	68fb      	ldr	r3, [r7, #12]
    9c40:	2203      	movs	r2, #3
    9c42:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    9c44:	68fb      	ldr	r3, [r7, #12]
    9c46:	2200      	movs	r2, #0
    9c48:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    9c4a:	68fb      	ldr	r3, [r7, #12]
    9c4c:	681b      	ldr	r3, [r3, #0]
    9c4e:	2213      	movs	r2, #19
    9c50:	18bc      	adds	r4, r7, r2
    9c52:	0018      	movs	r0, r3
    9c54:	4b0e      	ldr	r3, [pc, #56]	; (9c90 <spi_init+0x168>)
    9c56:	4798      	blx	r3
    9c58:	0003      	movs	r3, r0
    9c5a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    9c5c:	4a12      	ldr	r2, [pc, #72]	; (9ca8 <spi_init+0x180>)
    9c5e:	2313      	movs	r3, #19
    9c60:	18fb      	adds	r3, r7, r3
    9c62:	781b      	ldrb	r3, [r3, #0]
    9c64:	0011      	movs	r1, r2
    9c66:	0018      	movs	r0, r3
    9c68:	4b10      	ldr	r3, [pc, #64]	; (9cac <spi_init+0x184>)
    9c6a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9c6c:	2313      	movs	r3, #19
    9c6e:	18fb      	adds	r3, r7, r3
    9c70:	781a      	ldrb	r2, [r3, #0]
    9c72:	4b0f      	ldr	r3, [pc, #60]	; (9cb0 <spi_init+0x188>)
    9c74:	0092      	lsls	r2, r2, #2
    9c76:	68f9      	ldr	r1, [r7, #12]
    9c78:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    9c7a:	687a      	ldr	r2, [r7, #4]
    9c7c:	68fb      	ldr	r3, [r7, #12]
    9c7e:	0011      	movs	r1, r2
    9c80:	0018      	movs	r0, r3
    9c82:	4b0c      	ldr	r3, [pc, #48]	; (9cb4 <spi_init+0x18c>)
    9c84:	4798      	blx	r3
    9c86:	0003      	movs	r3, r0
}
    9c88:	0018      	movs	r0, r3
    9c8a:	46bd      	mov	sp, r7
    9c8c:	b00b      	add	sp, #44	; 0x2c
    9c8e:	bd90      	pop	{r4, r7, pc}
    9c90:	000094b9 	.word	0x000094b9
    9c94:	0000977d 	.word	0x0000977d
    9c98:	00009765 	.word	0x00009765
    9c9c:	0000bac5 	.word	0x0000bac5
    9ca0:	0000bb09 	.word	0x0000bb09
    9ca4:	00009271 	.word	0x00009271
    9ca8:	0000a035 	.word	0x0000a035
    9cac:	0000951d 	.word	0x0000951d
    9cb0:	20004798 	.word	0x20004798
    9cb4:	00009919 	.word	0x00009919

00009cb8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    9cb8:	b590      	push	{r4, r7, lr}
    9cba:	b087      	sub	sp, #28
    9cbc:	af00      	add	r7, sp, #0
    9cbe:	60f8      	str	r0, [r7, #12]
    9cc0:	60b9      	str	r1, [r7, #8]
    9cc2:	0019      	movs	r1, r3
    9cc4:	1dbb      	adds	r3, r7, #6
    9cc6:	801a      	strh	r2, [r3, #0]
    9cc8:	1d3b      	adds	r3, r7, #4
    9cca:	1c0a      	adds	r2, r1, #0
    9ccc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    9cce:	68fb      	ldr	r3, [r7, #12]
    9cd0:	2238      	movs	r2, #56	; 0x38
    9cd2:	5c9b      	ldrb	r3, [r3, r2]
    9cd4:	b2db      	uxtb	r3, r3
    9cd6:	2b05      	cmp	r3, #5
    9cd8:	d101      	bne.n	9cde <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    9cda:	2305      	movs	r3, #5
    9cdc:	e07a      	b.n	9dd4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    9cde:	1dbb      	adds	r3, r7, #6
    9ce0:	881b      	ldrh	r3, [r3, #0]
    9ce2:	2b00      	cmp	r3, #0
    9ce4:	d101      	bne.n	9cea <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    9ce6:	2317      	movs	r3, #23
    9ce8:	e074      	b.n	9dd4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    9cea:	68fb      	ldr	r3, [r7, #12]
    9cec:	79db      	ldrb	r3, [r3, #7]
    9cee:	2201      	movs	r2, #1
    9cf0:	4053      	eors	r3, r2
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d001      	beq.n	9cfc <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    9cf8:	231c      	movs	r3, #28
    9cfa:	e06b      	b.n	9dd4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    9cfc:	2316      	movs	r3, #22
    9cfe:	18fb      	adds	r3, r7, r3
    9d00:	2200      	movs	r2, #0
    9d02:	801a      	strh	r2, [r3, #0]

	while (length--) {
    9d04:	e05e      	b.n	9dc4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    9d06:	68fb      	ldr	r3, [r7, #12]
    9d08:	795b      	ldrb	r3, [r3, #5]
    9d0a:	2b01      	cmp	r3, #1
    9d0c:	d112      	bne.n	9d34 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    9d0e:	46c0      	nop			; (mov r8, r8)
    9d10:	68fb      	ldr	r3, [r7, #12]
    9d12:	0018      	movs	r0, r3
    9d14:	4b31      	ldr	r3, [pc, #196]	; (9ddc <spi_read_buffer_wait+0x124>)
    9d16:	4798      	blx	r3
    9d18:	0003      	movs	r3, r0
    9d1a:	001a      	movs	r2, r3
    9d1c:	2301      	movs	r3, #1
    9d1e:	4053      	eors	r3, r2
    9d20:	b2db      	uxtb	r3, r3
    9d22:	2b00      	cmp	r3, #0
    9d24:	d1f4      	bne.n	9d10 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    9d26:	1d3b      	adds	r3, r7, #4
    9d28:	881a      	ldrh	r2, [r3, #0]
    9d2a:	68fb      	ldr	r3, [r7, #12]
    9d2c:	0011      	movs	r1, r2
    9d2e:	0018      	movs	r0, r3
    9d30:	4b2b      	ldr	r3, [pc, #172]	; (9de0 <spi_read_buffer_wait+0x128>)
    9d32:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    9d34:	46c0      	nop			; (mov r8, r8)
    9d36:	68fb      	ldr	r3, [r7, #12]
    9d38:	0018      	movs	r0, r3
    9d3a:	4b2a      	ldr	r3, [pc, #168]	; (9de4 <spi_read_buffer_wait+0x12c>)
    9d3c:	4798      	blx	r3
    9d3e:	0003      	movs	r3, r0
    9d40:	001a      	movs	r2, r3
    9d42:	2301      	movs	r3, #1
    9d44:	4053      	eors	r3, r2
    9d46:	b2db      	uxtb	r3, r3
    9d48:	2b00      	cmp	r3, #0
    9d4a:	d1f4      	bne.n	9d36 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    9d4c:	2312      	movs	r3, #18
    9d4e:	18fb      	adds	r3, r7, r3
    9d50:	2200      	movs	r2, #0
    9d52:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    9d54:	2315      	movs	r3, #21
    9d56:	18fc      	adds	r4, r7, r3
    9d58:	2312      	movs	r3, #18
    9d5a:	18fa      	adds	r2, r7, r3
    9d5c:	68fb      	ldr	r3, [r7, #12]
    9d5e:	0011      	movs	r1, r2
    9d60:	0018      	movs	r0, r3
    9d62:	4b21      	ldr	r3, [pc, #132]	; (9de8 <spi_read_buffer_wait+0x130>)
    9d64:	4798      	blx	r3
    9d66:	0003      	movs	r3, r0
    9d68:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    9d6a:	2315      	movs	r3, #21
    9d6c:	18fb      	adds	r3, r7, r3
    9d6e:	781b      	ldrb	r3, [r3, #0]
    9d70:	2b00      	cmp	r3, #0
    9d72:	d003      	beq.n	9d7c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    9d74:	2315      	movs	r3, #21
    9d76:	18fb      	adds	r3, r7, r3
    9d78:	781b      	ldrb	r3, [r3, #0]
    9d7a:	e02b      	b.n	9dd4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    9d7c:	2316      	movs	r3, #22
    9d7e:	18fb      	adds	r3, r7, r3
    9d80:	881b      	ldrh	r3, [r3, #0]
    9d82:	2216      	movs	r2, #22
    9d84:	18ba      	adds	r2, r7, r2
    9d86:	1c59      	adds	r1, r3, #1
    9d88:	8011      	strh	r1, [r2, #0]
    9d8a:	001a      	movs	r2, r3
    9d8c:	68bb      	ldr	r3, [r7, #8]
    9d8e:	189b      	adds	r3, r3, r2
    9d90:	2212      	movs	r2, #18
    9d92:	18ba      	adds	r2, r7, r2
    9d94:	8812      	ldrh	r2, [r2, #0]
    9d96:	b2d2      	uxtb	r2, r2
    9d98:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9d9a:	68fb      	ldr	r3, [r7, #12]
    9d9c:	799b      	ldrb	r3, [r3, #6]
    9d9e:	2b01      	cmp	r3, #1
    9da0:	d110      	bne.n	9dc4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    9da2:	2316      	movs	r3, #22
    9da4:	18fb      	adds	r3, r7, r3
    9da6:	881b      	ldrh	r3, [r3, #0]
    9da8:	2216      	movs	r2, #22
    9daa:	18ba      	adds	r2, r7, r2
    9dac:	1c59      	adds	r1, r3, #1
    9dae:	8011      	strh	r1, [r2, #0]
    9db0:	001a      	movs	r2, r3
    9db2:	68bb      	ldr	r3, [r7, #8]
    9db4:	189b      	adds	r3, r3, r2
    9db6:	2212      	movs	r2, #18
    9db8:	18ba      	adds	r2, r7, r2
    9dba:	8812      	ldrh	r2, [r2, #0]
    9dbc:	0a12      	lsrs	r2, r2, #8
    9dbe:	b292      	uxth	r2, r2
    9dc0:	b2d2      	uxtb	r2, r2
    9dc2:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    9dc4:	1dbb      	adds	r3, r7, #6
    9dc6:	881b      	ldrh	r3, [r3, #0]
    9dc8:	1dba      	adds	r2, r7, #6
    9dca:	1e59      	subs	r1, r3, #1
    9dcc:	8011      	strh	r1, [r2, #0]
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d199      	bne.n	9d06 <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    9dd2:	2300      	movs	r3, #0
}
    9dd4:	0018      	movs	r0, r3
    9dd6:	46bd      	mov	sp, r7
    9dd8:	b007      	add	sp, #28
    9dda:	bd90      	pop	{r4, r7, pc}
    9ddc:	000097f9 	.word	0x000097f9
    9de0:	00009849 	.word	0x00009849
    9de4:	00009821 	.word	0x00009821
    9de8:	00009891 	.word	0x00009891

00009dec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    9dec:	b580      	push	{r7, lr}
    9dee:	b086      	sub	sp, #24
    9df0:	af00      	add	r7, sp, #0
    9df2:	60f8      	str	r0, [r7, #12]
    9df4:	60b9      	str	r1, [r7, #8]
    9df6:	1dfb      	adds	r3, r7, #7
    9df8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    9dfa:	68fb      	ldr	r3, [r7, #12]
    9dfc:	795b      	ldrb	r3, [r3, #5]
    9dfe:	2b01      	cmp	r3, #1
    9e00:	d001      	beq.n	9e06 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    9e02:	2315      	movs	r3, #21
    9e04:	e05c      	b.n	9ec0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    9e06:	68fb      	ldr	r3, [r7, #12]
    9e08:	7a1b      	ldrb	r3, [r3, #8]
    9e0a:	2201      	movs	r2, #1
    9e0c:	4053      	eors	r3, r2
    9e0e:	b2db      	uxtb	r3, r3
    9e10:	2b00      	cmp	r3, #0
    9e12:	d054      	beq.n	9ebe <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    9e14:	1dfb      	adds	r3, r7, #7
    9e16:	781b      	ldrb	r3, [r3, #0]
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d04a      	beq.n	9eb2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    9e1c:	68bb      	ldr	r3, [r7, #8]
    9e1e:	785b      	ldrb	r3, [r3, #1]
    9e20:	2b00      	cmp	r3, #0
    9e22:	d03f      	beq.n	9ea4 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    9e24:	68fb      	ldr	r3, [r7, #12]
    9e26:	0018      	movs	r0, r3
    9e28:	4b27      	ldr	r3, [pc, #156]	; (9ec8 <spi_select_slave+0xdc>)
    9e2a:	4798      	blx	r3
    9e2c:	0003      	movs	r3, r0
    9e2e:	001a      	movs	r2, r3
    9e30:	2301      	movs	r3, #1
    9e32:	4053      	eors	r3, r2
    9e34:	b2db      	uxtb	r3, r3
    9e36:	2b00      	cmp	r3, #0
    9e38:	d007      	beq.n	9e4a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    9e3a:	68bb      	ldr	r3, [r7, #8]
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	2101      	movs	r1, #1
    9e40:	0018      	movs	r0, r3
    9e42:	4b22      	ldr	r3, [pc, #136]	; (9ecc <spi_select_slave+0xe0>)
    9e44:	4798      	blx	r3
					return STATUS_BUSY;
    9e46:	2305      	movs	r3, #5
    9e48:	e03a      	b.n	9ec0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9e4a:	68bb      	ldr	r3, [r7, #8]
    9e4c:	781b      	ldrb	r3, [r3, #0]
    9e4e:	2100      	movs	r1, #0
    9e50:	0018      	movs	r0, r3
    9e52:	4b1e      	ldr	r3, [pc, #120]	; (9ecc <spi_select_slave+0xe0>)
    9e54:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    9e56:	68bb      	ldr	r3, [r7, #8]
    9e58:	789b      	ldrb	r3, [r3, #2]
    9e5a:	b29a      	uxth	r2, r3
    9e5c:	68fb      	ldr	r3, [r7, #12]
    9e5e:	0011      	movs	r1, r2
    9e60:	0018      	movs	r0, r3
    9e62:	4b1b      	ldr	r3, [pc, #108]	; (9ed0 <spi_select_slave+0xe4>)
    9e64:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    9e66:	68fb      	ldr	r3, [r7, #12]
    9e68:	79db      	ldrb	r3, [r3, #7]
    9e6a:	2201      	movs	r2, #1
    9e6c:	4053      	eors	r3, r2
    9e6e:	b2db      	uxtb	r3, r3
    9e70:	2b00      	cmp	r3, #0
    9e72:	d024      	beq.n	9ebe <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    9e74:	46c0      	nop			; (mov r8, r8)
    9e76:	68fb      	ldr	r3, [r7, #12]
    9e78:	0018      	movs	r0, r3
    9e7a:	4b16      	ldr	r3, [pc, #88]	; (9ed4 <spi_select_slave+0xe8>)
    9e7c:	4798      	blx	r3
    9e7e:	0003      	movs	r3, r0
    9e80:	001a      	movs	r2, r3
    9e82:	2301      	movs	r3, #1
    9e84:	4053      	eors	r3, r2
    9e86:	b2db      	uxtb	r3, r3
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d1f4      	bne.n	9e76 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    9e8c:	2316      	movs	r3, #22
    9e8e:	18fb      	adds	r3, r7, r3
    9e90:	2200      	movs	r2, #0
    9e92:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    9e94:	2316      	movs	r3, #22
    9e96:	18fa      	adds	r2, r7, r3
    9e98:	68fb      	ldr	r3, [r7, #12]
    9e9a:	0011      	movs	r1, r2
    9e9c:	0018      	movs	r0, r3
    9e9e:	4b0e      	ldr	r3, [pc, #56]	; (9ed8 <spi_select_slave+0xec>)
    9ea0:	4798      	blx	r3
    9ea2:	e00c      	b.n	9ebe <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    9ea4:	68bb      	ldr	r3, [r7, #8]
    9ea6:	781b      	ldrb	r3, [r3, #0]
    9ea8:	2100      	movs	r1, #0
    9eaa:	0018      	movs	r0, r3
    9eac:	4b07      	ldr	r3, [pc, #28]	; (9ecc <spi_select_slave+0xe0>)
    9eae:	4798      	blx	r3
    9eb0:	e005      	b.n	9ebe <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    9eb2:	68bb      	ldr	r3, [r7, #8]
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	2101      	movs	r1, #1
    9eb8:	0018      	movs	r0, r3
    9eba:	4b04      	ldr	r3, [pc, #16]	; (9ecc <spi_select_slave+0xe0>)
    9ebc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    9ebe:	2300      	movs	r3, #0
}
    9ec0:	0018      	movs	r0, r3
    9ec2:	46bd      	mov	sp, r7
    9ec4:	b006      	add	sp, #24
    9ec6:	bd80      	pop	{r7, pc}
    9ec8:	000097f9 	.word	0x000097f9
    9ecc:	00009711 	.word	0x00009711
    9ed0:	00009849 	.word	0x00009849
    9ed4:	00009821 	.word	0x00009821
    9ed8:	00009891 	.word	0x00009891

00009edc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    9edc:	b580      	push	{r7, lr}
    9ede:	b084      	sub	sp, #16
    9ee0:	af00      	add	r7, sp, #0
    9ee2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9ee4:	687b      	ldr	r3, [r7, #4]
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9eea:	687b      	ldr	r3, [r7, #4]
    9eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9eee:	781b      	ldrb	r3, [r3, #0]
    9ef0:	b2da      	uxtb	r2, r3
    9ef2:	230e      	movs	r3, #14
    9ef4:	18fb      	adds	r3, r7, r3
    9ef6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9efc:	1c5a      	adds	r2, r3, #1
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9f02:	687b      	ldr	r3, [r7, #4]
    9f04:	799b      	ldrb	r3, [r3, #6]
    9f06:	2b01      	cmp	r3, #1
    9f08:	d113      	bne.n	9f32 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9f0a:	687b      	ldr	r3, [r7, #4]
    9f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9f0e:	781b      	ldrb	r3, [r3, #0]
    9f10:	b2db      	uxtb	r3, r3
    9f12:	021b      	lsls	r3, r3, #8
    9f14:	b21a      	sxth	r2, r3
    9f16:	230e      	movs	r3, #14
    9f18:	18fb      	adds	r3, r7, r3
    9f1a:	2100      	movs	r1, #0
    9f1c:	5e5b      	ldrsh	r3, [r3, r1]
    9f1e:	4313      	orrs	r3, r2
    9f20:	b21a      	sxth	r2, r3
    9f22:	230e      	movs	r3, #14
    9f24:	18fb      	adds	r3, r7, r3
    9f26:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    9f28:	687b      	ldr	r3, [r7, #4]
    9f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9f2c:	1c5a      	adds	r2, r3, #1
    9f2e:	687b      	ldr	r3, [r7, #4]
    9f30:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    9f32:	230e      	movs	r3, #14
    9f34:	18fb      	adds	r3, r7, r3
    9f36:	881b      	ldrh	r3, [r3, #0]
    9f38:	05db      	lsls	r3, r3, #23
    9f3a:	0dda      	lsrs	r2, r3, #23
    9f3c:	68bb      	ldr	r3, [r7, #8]
    9f3e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    9f40:	687b      	ldr	r3, [r7, #4]
    9f42:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    9f44:	b29b      	uxth	r3, r3
    9f46:	3b01      	subs	r3, #1
    9f48:	b29a      	uxth	r2, r3
    9f4a:	687b      	ldr	r3, [r7, #4]
    9f4c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    9f4e:	46c0      	nop			; (mov r8, r8)
    9f50:	46bd      	mov	sp, r7
    9f52:	b004      	add	sp, #16
    9f54:	bd80      	pop	{r7, pc}
    9f56:	46c0      	nop			; (mov r8, r8)

00009f58 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b084      	sub	sp, #16
    9f5c:	af00      	add	r7, sp, #0
    9f5e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9f60:	687b      	ldr	r3, [r7, #4]
    9f62:	681b      	ldr	r3, [r3, #0]
    9f64:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    9f66:	4b08      	ldr	r3, [pc, #32]	; (9f88 <_spi_write_dummy+0x30>)
    9f68:	881b      	ldrh	r3, [r3, #0]
    9f6a:	001a      	movs	r2, r3
    9f6c:	68fb      	ldr	r3, [r7, #12]
    9f6e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    9f70:	687b      	ldr	r3, [r7, #4]
    9f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9f74:	b29b      	uxth	r3, r3
    9f76:	3b01      	subs	r3, #1
    9f78:	b29a      	uxth	r2, r3
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    9f7e:	46c0      	nop			; (mov r8, r8)
    9f80:	46bd      	mov	sp, r7
    9f82:	b004      	add	sp, #16
    9f84:	bd80      	pop	{r7, pc}
    9f86:	46c0      	nop			; (mov r8, r8)
    9f88:	200047b0 	.word	0x200047b0

00009f8c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b084      	sub	sp, #16
    9f90:	af00      	add	r7, sp, #0
    9f92:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	681b      	ldr	r3, [r3, #0]
    9f98:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    9f9a:	230a      	movs	r3, #10
    9f9c:	18fb      	adds	r3, r7, r3
    9f9e:	2200      	movs	r2, #0
    9fa0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    9fa2:	68fb      	ldr	r3, [r7, #12]
    9fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9fa6:	230a      	movs	r3, #10
    9fa8:	18fb      	adds	r3, r7, r3
    9faa:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    9fac:	687b      	ldr	r3, [r7, #4]
    9fae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    9fb0:	b29b      	uxth	r3, r3
    9fb2:	3b01      	subs	r3, #1
    9fb4:	b29a      	uxth	r2, r3
    9fb6:	687b      	ldr	r3, [r7, #4]
    9fb8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    9fba:	46c0      	nop			; (mov r8, r8)
    9fbc:	46bd      	mov	sp, r7
    9fbe:	b004      	add	sp, #16
    9fc0:	bd80      	pop	{r7, pc}
    9fc2:	46c0      	nop			; (mov r8, r8)

00009fc4 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    9fc4:	b580      	push	{r7, lr}
    9fc6:	b084      	sub	sp, #16
    9fc8:	af00      	add	r7, sp, #0
    9fca:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9fcc:	687b      	ldr	r3, [r7, #4]
    9fce:	681b      	ldr	r3, [r3, #0]
    9fd0:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9fd2:	68fb      	ldr	r3, [r7, #12]
    9fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9fd6:	b29a      	uxth	r2, r3
    9fd8:	230a      	movs	r3, #10
    9fda:	18fb      	adds	r3, r7, r3
    9fdc:	05d2      	lsls	r2, r2, #23
    9fde:	0dd2      	lsrs	r2, r2, #23
    9fe0:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    9fe2:	687b      	ldr	r3, [r7, #4]
    9fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9fe6:	220a      	movs	r2, #10
    9fe8:	18ba      	adds	r2, r7, r2
    9fea:	8812      	ldrh	r2, [r2, #0]
    9fec:	b2d2      	uxtb	r2, r2
    9fee:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    9ff0:	687b      	ldr	r3, [r7, #4]
    9ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ff4:	1c5a      	adds	r2, r3, #1
    9ff6:	687b      	ldr	r3, [r7, #4]
    9ff8:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9ffa:	687b      	ldr	r3, [r7, #4]
    9ffc:	799b      	ldrb	r3, [r3, #6]
    9ffe:	2b01      	cmp	r3, #1
    a000:	d10d      	bne.n	a01e <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    a002:	687b      	ldr	r3, [r7, #4]
    a004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a006:	220a      	movs	r2, #10
    a008:	18ba      	adds	r2, r7, r2
    a00a:	8812      	ldrh	r2, [r2, #0]
    a00c:	0a12      	lsrs	r2, r2, #8
    a00e:	b292      	uxth	r2, r2
    a010:	b2d2      	uxtb	r2, r2
    a012:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    a014:	687b      	ldr	r3, [r7, #4]
    a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a018:	1c5a      	adds	r2, r3, #1
    a01a:	687b      	ldr	r3, [r7, #4]
    a01c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    a01e:	687b      	ldr	r3, [r7, #4]
    a020:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a022:	b29b      	uxth	r3, r3
    a024:	3b01      	subs	r3, #1
    a026:	b29a      	uxth	r2, r3
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	861a      	strh	r2, [r3, #48]	; 0x30
}
    a02c:	46c0      	nop			; (mov r8, r8)
    a02e:	46bd      	mov	sp, r7
    a030:	b004      	add	sp, #16
    a032:	bd80      	pop	{r7, pc}

0000a034 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    a034:	b580      	push	{r7, lr}
    a036:	b086      	sub	sp, #24
    a038:	af00      	add	r7, sp, #0
    a03a:	0002      	movs	r2, r0
    a03c:	1dfb      	adds	r3, r7, #7
    a03e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    a040:	1dfb      	adds	r3, r7, #7
    a042:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    a044:	4b96      	ldr	r3, [pc, #600]	; (a2a0 <_spi_interrupt_handler+0x26c>)
    a046:	0092      	lsls	r2, r2, #2
    a048:	58d3      	ldr	r3, [r2, r3]
    a04a:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    a04c:	697b      	ldr	r3, [r7, #20]
    a04e:	681b      	ldr	r3, [r3, #0]
    a050:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    a052:	697b      	ldr	r3, [r7, #20]
    a054:	2237      	movs	r2, #55	; 0x37
    a056:	5c9a      	ldrb	r2, [r3, r2]
    a058:	697b      	ldr	r3, [r7, #20]
    a05a:	2136      	movs	r1, #54	; 0x36
    a05c:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    a05e:	230f      	movs	r3, #15
    a060:	18fb      	adds	r3, r7, r3
    a062:	400a      	ands	r2, r1
    a064:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    a066:	693b      	ldr	r3, [r7, #16]
    a068:	7e1b      	ldrb	r3, [r3, #24]
    a06a:	b2da      	uxtb	r2, r3
    a06c:	230c      	movs	r3, #12
    a06e:	18fb      	adds	r3, r7, r3
    a070:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    a072:	693b      	ldr	r3, [r7, #16]
    a074:	7d9b      	ldrb	r3, [r3, #22]
    a076:	b2db      	uxtb	r3, r3
    a078:	b29a      	uxth	r2, r3
    a07a:	230c      	movs	r3, #12
    a07c:	18fb      	adds	r3, r7, r3
    a07e:	210c      	movs	r1, #12
    a080:	1879      	adds	r1, r7, r1
    a082:	8809      	ldrh	r1, [r1, #0]
    a084:	400a      	ands	r2, r1
    a086:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    a088:	230c      	movs	r3, #12
    a08a:	18fb      	adds	r3, r7, r3
    a08c:	881b      	ldrh	r3, [r3, #0]
    a08e:	2201      	movs	r2, #1
    a090:	4013      	ands	r3, r2
    a092:	d038      	beq.n	a106 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a094:	697b      	ldr	r3, [r7, #20]
    a096:	795b      	ldrb	r3, [r3, #5]
    a098:	2b01      	cmp	r3, #1
    a09a:	d110      	bne.n	a0be <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    a09c:	697b      	ldr	r3, [r7, #20]
    a09e:	7a5b      	ldrb	r3, [r3, #9]
    a0a0:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a0a2:	2b00      	cmp	r3, #0
    a0a4:	d10b      	bne.n	a0be <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    a0a6:	697b      	ldr	r3, [r7, #20]
    a0a8:	0018      	movs	r0, r3
    a0aa:	4b7e      	ldr	r3, [pc, #504]	; (a2a4 <_spi_interrupt_handler+0x270>)
    a0ac:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    a0ae:	697b      	ldr	r3, [r7, #20]
    a0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a0b2:	b29b      	uxth	r3, r3
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d102      	bne.n	a0be <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a0b8:	693b      	ldr	r3, [r7, #16]
    a0ba:	2201      	movs	r2, #1
    a0bc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a0be:	697b      	ldr	r3, [r7, #20]
    a0c0:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    a0c2:	2b01      	cmp	r3, #1
    a0c4:	d11f      	bne.n	a106 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    a0c6:	697b      	ldr	r3, [r7, #20]
    a0c8:	7a5b      	ldrb	r3, [r3, #9]
    a0ca:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d01a      	beq.n	a106 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    a0d0:	697b      	ldr	r3, [r7, #20]
    a0d2:	0018      	movs	r0, r3
    a0d4:	4b74      	ldr	r3, [pc, #464]	; (a2a8 <_spi_interrupt_handler+0x274>)
    a0d6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    a0d8:	697b      	ldr	r3, [r7, #20]
    a0da:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    a0dc:	b29b      	uxth	r3, r3
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d111      	bne.n	a106 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    a0e2:	693b      	ldr	r3, [r7, #16]
    a0e4:	2201      	movs	r2, #1
    a0e6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    a0e8:	697b      	ldr	r3, [r7, #20]
    a0ea:	7a5b      	ldrb	r3, [r3, #9]
    a0ec:	b2db      	uxtb	r3, r3
    a0ee:	2b01      	cmp	r3, #1
    a0f0:	d109      	bne.n	a106 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    a0f2:	697b      	ldr	r3, [r7, #20]
    a0f4:	79db      	ldrb	r3, [r3, #7]
    a0f6:	2201      	movs	r2, #1
    a0f8:	4053      	eors	r3, r2
    a0fa:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    a0fc:	2b00      	cmp	r3, #0
    a0fe:	d002      	beq.n	a106 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a100:	693b      	ldr	r3, [r7, #16]
    a102:	2202      	movs	r2, #2
    a104:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    a106:	230c      	movs	r3, #12
    a108:	18fb      	adds	r3, r7, r3
    a10a:	881b      	ldrh	r3, [r3, #0]
    a10c:	2204      	movs	r2, #4
    a10e:	4013      	ands	r3, r2
    a110:	d100      	bne.n	a114 <_spi_interrupt_handler+0xe0>
    a112:	e07e      	b.n	a212 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a114:	693b      	ldr	r3, [r7, #16]
    a116:	8b5b      	ldrh	r3, [r3, #26]
    a118:	b29b      	uxth	r3, r3
    a11a:	001a      	movs	r2, r3
    a11c:	2304      	movs	r3, #4
    a11e:	4013      	ands	r3, r2
    a120:	d022      	beq.n	a168 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    a122:	697b      	ldr	r3, [r7, #20]
    a124:	7a5b      	ldrb	r3, [r3, #9]
    a126:	b2db      	uxtb	r3, r3
    a128:	2b01      	cmp	r3, #1
    a12a:	d014      	beq.n	a156 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    a12c:	697b      	ldr	r3, [r7, #20]
    a12e:	2238      	movs	r2, #56	; 0x38
    a130:	211e      	movs	r1, #30
    a132:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    a134:	697b      	ldr	r3, [r7, #20]
    a136:	2203      	movs	r2, #3
    a138:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	2205      	movs	r2, #5
    a13e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    a140:	230f      	movs	r3, #15
    a142:	18fb      	adds	r3, r7, r3
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	2208      	movs	r2, #8
    a148:	4013      	ands	r3, r2
    a14a:	d004      	beq.n	a156 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    a14c:	697b      	ldr	r3, [r7, #20]
    a14e:	699b      	ldr	r3, [r3, #24]
    a150:	697a      	ldr	r2, [r7, #20]
    a152:	0010      	movs	r0, r2
    a154:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    a156:	693b      	ldr	r3, [r7, #16]
    a158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a15a:	230a      	movs	r3, #10
    a15c:	18fb      	adds	r3, r7, r3
    a15e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a160:	693b      	ldr	r3, [r7, #16]
    a162:	2204      	movs	r2, #4
    a164:	835a      	strh	r2, [r3, #26]
    a166:	e054      	b.n	a212 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    a168:	697b      	ldr	r3, [r7, #20]
    a16a:	7a5b      	ldrb	r3, [r3, #9]
    a16c:	b2db      	uxtb	r3, r3
    a16e:	2b01      	cmp	r3, #1
    a170:	d11e      	bne.n	a1b0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    a172:	697b      	ldr	r3, [r7, #20]
    a174:	0018      	movs	r0, r3
    a176:	4b4d      	ldr	r3, [pc, #308]	; (a2ac <_spi_interrupt_handler+0x278>)
    a178:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    a17a:	697b      	ldr	r3, [r7, #20]
    a17c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    a17e:	b29b      	uxth	r3, r3
    a180:	2b00      	cmp	r3, #0
    a182:	d146      	bne.n	a212 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a184:	693b      	ldr	r3, [r7, #16]
    a186:	2204      	movs	r2, #4
    a188:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    a18a:	697b      	ldr	r3, [r7, #20]
    a18c:	2238      	movs	r2, #56	; 0x38
    a18e:	2100      	movs	r1, #0
    a190:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    a192:	697b      	ldr	r3, [r7, #20]
    a194:	2203      	movs	r2, #3
    a196:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    a198:	230f      	movs	r3, #15
    a19a:	18fb      	adds	r3, r7, r3
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	2201      	movs	r2, #1
    a1a0:	4013      	ands	r3, r2
    a1a2:	d036      	beq.n	a212 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    a1a4:	697b      	ldr	r3, [r7, #20]
    a1a6:	68db      	ldr	r3, [r3, #12]
    a1a8:	697a      	ldr	r2, [r7, #20]
    a1aa:	0010      	movs	r0, r2
    a1ac:	4798      	blx	r3
    a1ae:	e030      	b.n	a212 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    a1b0:	697b      	ldr	r3, [r7, #20]
    a1b2:	0018      	movs	r0, r3
    a1b4:	4b3e      	ldr	r3, [pc, #248]	; (a2b0 <_spi_interrupt_handler+0x27c>)
    a1b6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    a1b8:	697b      	ldr	r3, [r7, #20]
    a1ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    a1bc:	b29b      	uxth	r3, r3
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d127      	bne.n	a212 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    a1c2:	697b      	ldr	r3, [r7, #20]
    a1c4:	2238      	movs	r2, #56	; 0x38
    a1c6:	2100      	movs	r1, #0
    a1c8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    a1ca:	693b      	ldr	r3, [r7, #16]
    a1cc:	2204      	movs	r2, #4
    a1ce:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    a1d0:	697b      	ldr	r3, [r7, #20]
    a1d2:	7a5b      	ldrb	r3, [r3, #9]
    a1d4:	b2db      	uxtb	r3, r3
    a1d6:	2b02      	cmp	r3, #2
    a1d8:	d10b      	bne.n	a1f2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    a1da:	230f      	movs	r3, #15
    a1dc:	18fb      	adds	r3, r7, r3
    a1de:	781b      	ldrb	r3, [r3, #0]
    a1e0:	2204      	movs	r2, #4
    a1e2:	4013      	ands	r3, r2
    a1e4:	d015      	beq.n	a212 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    a1e6:	697b      	ldr	r3, [r7, #20]
    a1e8:	695b      	ldr	r3, [r3, #20]
    a1ea:	697a      	ldr	r2, [r7, #20]
    a1ec:	0010      	movs	r0, r2
    a1ee:	4798      	blx	r3
    a1f0:	e00f      	b.n	a212 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    a1f2:	697b      	ldr	r3, [r7, #20]
    a1f4:	7a5b      	ldrb	r3, [r3, #9]
    a1f6:	b2db      	uxtb	r3, r3
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d10a      	bne.n	a212 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    a1fc:	230f      	movs	r3, #15
    a1fe:	18fb      	adds	r3, r7, r3
    a200:	781b      	ldrb	r3, [r3, #0]
    a202:	2202      	movs	r2, #2
    a204:	4013      	ands	r3, r2
    a206:	d004      	beq.n	a212 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    a208:	697b      	ldr	r3, [r7, #20]
    a20a:	691b      	ldr	r3, [r3, #16]
    a20c:	697a      	ldr	r2, [r7, #20]
    a20e:	0010      	movs	r0, r2
    a210:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    a212:	230c      	movs	r3, #12
    a214:	18fb      	adds	r3, r7, r3
    a216:	881b      	ldrh	r3, [r3, #0]
    a218:	2202      	movs	r2, #2
    a21a:	4013      	ands	r3, r2
    a21c:	d024      	beq.n	a268 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a21e:	697b      	ldr	r3, [r7, #20]
    a220:	795b      	ldrb	r3, [r3, #5]
    a222:	2b01      	cmp	r3, #1
    a224:	d120      	bne.n	a268 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a226:	697b      	ldr	r3, [r7, #20]
    a228:	7a5b      	ldrb	r3, [r3, #9]
    a22a:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    a22c:	2b01      	cmp	r3, #1
    a22e:	d11b      	bne.n	a268 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    a230:	697b      	ldr	r3, [r7, #20]
    a232:	79db      	ldrb	r3, [r3, #7]
    a234:	2201      	movs	r2, #1
    a236:	4053      	eors	r3, r2
    a238:	b2db      	uxtb	r3, r3
    a23a:	2b00      	cmp	r3, #0
    a23c:	d014      	beq.n	a268 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    a23e:	693b      	ldr	r3, [r7, #16]
    a240:	2202      	movs	r2, #2
    a242:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    a244:	697b      	ldr	r3, [r7, #20]
    a246:	2203      	movs	r2, #3
    a248:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    a24a:	697b      	ldr	r3, [r7, #20]
    a24c:	2238      	movs	r2, #56	; 0x38
    a24e:	2100      	movs	r1, #0
    a250:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    a252:	230f      	movs	r3, #15
    a254:	18fb      	adds	r3, r7, r3
    a256:	781b      	ldrb	r3, [r3, #0]
    a258:	2201      	movs	r2, #1
    a25a:	4013      	ands	r3, r2
    a25c:	d004      	beq.n	a268 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    a25e:	697b      	ldr	r3, [r7, #20]
    a260:	68db      	ldr	r3, [r3, #12]
    a262:	697a      	ldr	r2, [r7, #20]
    a264:	0010      	movs	r0, r2
    a266:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    a268:	230c      	movs	r3, #12
    a26a:	18fb      	adds	r3, r7, r3
    a26c:	881b      	ldrh	r3, [r3, #0]
    a26e:	2280      	movs	r2, #128	; 0x80
    a270:	4013      	ands	r3, r2
    a272:	d010      	beq.n	a296 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a274:	693b      	ldr	r3, [r7, #16]
    a276:	2280      	movs	r2, #128	; 0x80
    a278:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    a27a:	693b      	ldr	r3, [r7, #16]
    a27c:	2280      	movs	r2, #128	; 0x80
    a27e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    a280:	230f      	movs	r3, #15
    a282:	18fb      	adds	r3, r7, r3
    a284:	781b      	ldrb	r3, [r3, #0]
    a286:	2240      	movs	r2, #64	; 0x40
    a288:	4013      	ands	r3, r2
    a28a:	d004      	beq.n	a296 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    a28c:	697b      	ldr	r3, [r7, #20]
    a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a290:	697a      	ldr	r2, [r7, #20]
    a292:	0010      	movs	r0, r2
    a294:	4798      	blx	r3
		}
	}
#  endif
}
    a296:	46c0      	nop			; (mov r8, r8)
    a298:	46bd      	mov	sp, r7
    a29a:	b006      	add	sp, #24
    a29c:	bd80      	pop	{r7, pc}
    a29e:	46c0      	nop			; (mov r8, r8)
    a2a0:	20004798 	.word	0x20004798
    a2a4:	00009f59 	.word	0x00009f59
    a2a8:	00009edd 	.word	0x00009edd
    a2ac:	00009f8d 	.word	0x00009f8d
    a2b0:	00009fc5 	.word	0x00009fc5

0000a2b4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    a2b4:	b580      	push	{r7, lr}
    a2b6:	b082      	sub	sp, #8
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	2200      	movs	r2, #0
    a2c0:	701a      	strb	r2, [r3, #0]
}
    a2c2:	46c0      	nop			; (mov r8, r8)
    a2c4:	46bd      	mov	sp, r7
    a2c6:	b002      	add	sp, #8
    a2c8:	bd80      	pop	{r7, pc}
    a2ca:	46c0      	nop			; (mov r8, r8)

0000a2cc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a2cc:	b580      	push	{r7, lr}
    a2ce:	b082      	sub	sp, #8
    a2d0:	af00      	add	r7, sp, #0
    a2d2:	0002      	movs	r2, r0
    a2d4:	6039      	str	r1, [r7, #0]
    a2d6:	1dfb      	adds	r3, r7, #7
    a2d8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a2da:	1dfb      	adds	r3, r7, #7
    a2dc:	781b      	ldrb	r3, [r3, #0]
    a2de:	2b01      	cmp	r3, #1
    a2e0:	d00a      	beq.n	a2f8 <system_apb_clock_set_mask+0x2c>
    a2e2:	2b02      	cmp	r3, #2
    a2e4:	d00f      	beq.n	a306 <system_apb_clock_set_mask+0x3a>
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d114      	bne.n	a314 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a2ea:	4b0e      	ldr	r3, [pc, #56]	; (a324 <system_apb_clock_set_mask+0x58>)
    a2ec:	4a0d      	ldr	r2, [pc, #52]	; (a324 <system_apb_clock_set_mask+0x58>)
    a2ee:	6991      	ldr	r1, [r2, #24]
    a2f0:	683a      	ldr	r2, [r7, #0]
    a2f2:	430a      	orrs	r2, r1
    a2f4:	619a      	str	r2, [r3, #24]
			break;
    a2f6:	e00f      	b.n	a318 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a2f8:	4b0a      	ldr	r3, [pc, #40]	; (a324 <system_apb_clock_set_mask+0x58>)
    a2fa:	4a0a      	ldr	r2, [pc, #40]	; (a324 <system_apb_clock_set_mask+0x58>)
    a2fc:	69d1      	ldr	r1, [r2, #28]
    a2fe:	683a      	ldr	r2, [r7, #0]
    a300:	430a      	orrs	r2, r1
    a302:	61da      	str	r2, [r3, #28]
			break;
    a304:	e008      	b.n	a318 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a306:	4b07      	ldr	r3, [pc, #28]	; (a324 <system_apb_clock_set_mask+0x58>)
    a308:	4a06      	ldr	r2, [pc, #24]	; (a324 <system_apb_clock_set_mask+0x58>)
    a30a:	6a11      	ldr	r1, [r2, #32]
    a30c:	683a      	ldr	r2, [r7, #0]
    a30e:	430a      	orrs	r2, r1
    a310:	621a      	str	r2, [r3, #32]
			break;
    a312:	e001      	b.n	a318 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a314:	2317      	movs	r3, #23
    a316:	e000      	b.n	a31a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a318:	2300      	movs	r3, #0
}
    a31a:	0018      	movs	r0, r3
    a31c:	46bd      	mov	sp, r7
    a31e:	b002      	add	sp, #8
    a320:	bd80      	pop	{r7, pc}
    a322:	46c0      	nop			; (mov r8, r8)
    a324:	40000400 	.word	0x40000400

0000a328 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    a328:	b580      	push	{r7, lr}
    a32a:	b082      	sub	sp, #8
    a32c:	af00      	add	r7, sp, #0
    a32e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a330:	687b      	ldr	r3, [r7, #4]
    a332:	2280      	movs	r2, #128	; 0x80
    a334:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a336:	687b      	ldr	r3, [r7, #4]
    a338:	2200      	movs	r2, #0
    a33a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a33c:	687b      	ldr	r3, [r7, #4]
    a33e:	2201      	movs	r2, #1
    a340:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a342:	687b      	ldr	r3, [r7, #4]
    a344:	2200      	movs	r2, #0
    a346:	70da      	strb	r2, [r3, #3]
}
    a348:	46c0      	nop			; (mov r8, r8)
    a34a:	46bd      	mov	sp, r7
    a34c:	b002      	add	sp, #8
    a34e:	bd80      	pop	{r7, pc}

0000a350 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    a350:	b580      	push	{r7, lr}
    a352:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a354:	4b05      	ldr	r3, [pc, #20]	; (a36c <system_is_debugger_present+0x1c>)
    a356:	789b      	ldrb	r3, [r3, #2]
    a358:	b2db      	uxtb	r3, r3
    a35a:	001a      	movs	r2, r3
    a35c:	2302      	movs	r3, #2
    a35e:	4013      	ands	r3, r2
    a360:	1e5a      	subs	r2, r3, #1
    a362:	4193      	sbcs	r3, r2
    a364:	b2db      	uxtb	r3, r3
}
    a366:	0018      	movs	r0, r3
    a368:	46bd      	mov	sp, r7
    a36a:	bd80      	pop	{r7, pc}
    a36c:	41002000 	.word	0x41002000

0000a370 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a370:	b580      	push	{r7, lr}
    a372:	b084      	sub	sp, #16
    a374:	af00      	add	r7, sp, #0
    a376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a378:	687b      	ldr	r3, [r7, #4]
    a37a:	681b      	ldr	r3, [r3, #0]
    a37c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a37e:	68fb      	ldr	r3, [r7, #12]
    a380:	69db      	ldr	r3, [r3, #28]
    a382:	1e5a      	subs	r2, r3, #1
    a384:	4193      	sbcs	r3, r2
    a386:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a388:	0018      	movs	r0, r3
    a38a:	46bd      	mov	sp, r7
    a38c:	b004      	add	sp, #16
    a38e:	bd80      	pop	{r7, pc}

0000a390 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a390:	b580      	push	{r7, lr}
    a392:	b082      	sub	sp, #8
    a394:	af00      	add	r7, sp, #0
    a396:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a398:	46c0      	nop			; (mov r8, r8)
    a39a:	687b      	ldr	r3, [r7, #4]
    a39c:	0018      	movs	r0, r3
    a39e:	4b04      	ldr	r3, [pc, #16]	; (a3b0 <_usart_wait_for_sync+0x20>)
    a3a0:	4798      	blx	r3
    a3a2:	1e03      	subs	r3, r0, #0
    a3a4:	d1f9      	bne.n	a39a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a3a6:	46c0      	nop			; (mov r8, r8)
    a3a8:	46bd      	mov	sp, r7
    a3aa:	b002      	add	sp, #8
    a3ac:	bd80      	pop	{r7, pc}
    a3ae:	46c0      	nop			; (mov r8, r8)
    a3b0:	0000a371 	.word	0x0000a371

0000a3b4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    a3b4:	b5b0      	push	{r4, r5, r7, lr}
    a3b6:	b08c      	sub	sp, #48	; 0x30
    a3b8:	af02      	add	r7, sp, #8
    a3ba:	6078      	str	r0, [r7, #4]
    a3bc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	681b      	ldr	r3, [r3, #0]
    a3c2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a3c4:	687b      	ldr	r3, [r7, #4]
    a3c6:	681b      	ldr	r3, [r3, #0]
    a3c8:	0018      	movs	r0, r3
    a3ca:	4ba8      	ldr	r3, [pc, #672]	; (a66c <_usart_set_config+0x2b8>)
    a3cc:	4798      	blx	r3
    a3ce:	0003      	movs	r3, r0
    a3d0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a3d2:	697b      	ldr	r3, [r7, #20]
    a3d4:	3314      	adds	r3, #20
    a3d6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    a3d8:	2300      	movs	r3, #0
    a3da:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    a3dc:	2300      	movs	r3, #0
    a3de:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    a3e0:	230a      	movs	r3, #10
    a3e2:	18fb      	adds	r3, r7, r3
    a3e4:	2200      	movs	r2, #0
    a3e6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a3e8:	231f      	movs	r3, #31
    a3ea:	18fb      	adds	r3, r7, r3
    a3ec:	2200      	movs	r2, #0
    a3ee:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a3f0:	231e      	movs	r3, #30
    a3f2:	18fb      	adds	r3, r7, r3
    a3f4:	2210      	movs	r2, #16
    a3f6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    a3f8:	683b      	ldr	r3, [r7, #0]
    a3fa:	8a1b      	ldrh	r3, [r3, #16]
    a3fc:	2280      	movs	r2, #128	; 0x80
    a3fe:	01d2      	lsls	r2, r2, #7
    a400:	4293      	cmp	r3, r2
    a402:	d01c      	beq.n	a43e <_usart_set_config+0x8a>
    a404:	2280      	movs	r2, #128	; 0x80
    a406:	01d2      	lsls	r2, r2, #7
    a408:	4293      	cmp	r3, r2
    a40a:	dc06      	bgt.n	a41a <_usart_set_config+0x66>
    a40c:	2b00      	cmp	r3, #0
    a40e:	d00d      	beq.n	a42c <_usart_set_config+0x78>
    a410:	2280      	movs	r2, #128	; 0x80
    a412:	0192      	lsls	r2, r2, #6
    a414:	4293      	cmp	r3, r2
    a416:	d024      	beq.n	a462 <_usart_set_config+0xae>
    a418:	e035      	b.n	a486 <_usart_set_config+0xd2>
    a41a:	22c0      	movs	r2, #192	; 0xc0
    a41c:	01d2      	lsls	r2, r2, #7
    a41e:	4293      	cmp	r3, r2
    a420:	d028      	beq.n	a474 <_usart_set_config+0xc0>
    a422:	2280      	movs	r2, #128	; 0x80
    a424:	0212      	lsls	r2, r2, #8
    a426:	4293      	cmp	r3, r2
    a428:	d012      	beq.n	a450 <_usart_set_config+0x9c>
    a42a:	e02c      	b.n	a486 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a42c:	231f      	movs	r3, #31
    a42e:	18fb      	adds	r3, r7, r3
    a430:	2200      	movs	r2, #0
    a432:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a434:	231e      	movs	r3, #30
    a436:	18fb      	adds	r3, r7, r3
    a438:	2210      	movs	r2, #16
    a43a:	701a      	strb	r2, [r3, #0]
			break;
    a43c:	e023      	b.n	a486 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a43e:	231f      	movs	r3, #31
    a440:	18fb      	adds	r3, r7, r3
    a442:	2200      	movs	r2, #0
    a444:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a446:	231e      	movs	r3, #30
    a448:	18fb      	adds	r3, r7, r3
    a44a:	2208      	movs	r2, #8
    a44c:	701a      	strb	r2, [r3, #0]
			break;
    a44e:	e01a      	b.n	a486 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a450:	231f      	movs	r3, #31
    a452:	18fb      	adds	r3, r7, r3
    a454:	2200      	movs	r2, #0
    a456:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    a458:	231e      	movs	r3, #30
    a45a:	18fb      	adds	r3, r7, r3
    a45c:	2203      	movs	r2, #3
    a45e:	701a      	strb	r2, [r3, #0]
			break;
    a460:	e011      	b.n	a486 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a462:	231f      	movs	r3, #31
    a464:	18fb      	adds	r3, r7, r3
    a466:	2201      	movs	r2, #1
    a468:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a46a:	231e      	movs	r3, #30
    a46c:	18fb      	adds	r3, r7, r3
    a46e:	2210      	movs	r2, #16
    a470:	701a      	strb	r2, [r3, #0]
			break;
    a472:	e008      	b.n	a486 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a474:	231f      	movs	r3, #31
    a476:	18fb      	adds	r3, r7, r3
    a478:	2201      	movs	r2, #1
    a47a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a47c:	231e      	movs	r3, #30
    a47e:	18fb      	adds	r3, r7, r3
    a480:	2208      	movs	r2, #8
    a482:	701a      	strb	r2, [r3, #0]
			break;
    a484:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    a486:	683b      	ldr	r3, [r7, #0]
    a488:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    a48a:	683b      	ldr	r3, [r7, #0]
    a48c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    a48e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    a490:	683b      	ldr	r3, [r7, #0]
    a492:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    a494:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    a496:	683a      	ldr	r2, [r7, #0]
    a498:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    a49a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    a49c:	683a      	ldr	r2, [r7, #0]
    a49e:	7e12      	ldrb	r2, [r2, #24]
    a4a0:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    a4a2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    a4a4:	683a      	ldr	r2, [r7, #0]
    a4a6:	2126      	movs	r1, #38	; 0x26
    a4a8:	5c52      	ldrb	r2, [r2, r1]
    a4aa:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    a4ac:	4313      	orrs	r3, r2
    a4ae:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    a4b0:	231d      	movs	r3, #29
    a4b2:	18fb      	adds	r3, r7, r3
    a4b4:	2200      	movs	r2, #0
    a4b6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    a4b8:	683b      	ldr	r3, [r7, #0]
    a4ba:	685b      	ldr	r3, [r3, #4]
    a4bc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    a4be:	68fb      	ldr	r3, [r7, #12]
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d01e      	beq.n	a502 <_usart_set_config+0x14e>
    a4c4:	2280      	movs	r2, #128	; 0x80
    a4c6:	0552      	lsls	r2, r2, #21
    a4c8:	4293      	cmp	r3, r2
    a4ca:	d14f      	bne.n	a56c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    a4cc:	683b      	ldr	r3, [r7, #0]
    a4ce:	2227      	movs	r2, #39	; 0x27
    a4d0:	5c9b      	ldrb	r3, [r3, r2]
    a4d2:	2201      	movs	r2, #1
    a4d4:	4053      	eors	r3, r2
    a4d6:	b2db      	uxtb	r3, r3
    a4d8:	2b00      	cmp	r3, #0
    a4da:	d046      	beq.n	a56a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    a4dc:	683b      	ldr	r3, [r7, #0]
    a4de:	6a1d      	ldr	r5, [r3, #32]
    a4e0:	693b      	ldr	r3, [r7, #16]
    a4e2:	b2db      	uxtb	r3, r3
    a4e4:	0018      	movs	r0, r3
    a4e6:	4b62      	ldr	r3, [pc, #392]	; (a670 <_usart_set_config+0x2bc>)
    a4e8:	4798      	blx	r3
    a4ea:	0001      	movs	r1, r0
    a4ec:	231d      	movs	r3, #29
    a4ee:	18fc      	adds	r4, r7, r3
    a4f0:	230a      	movs	r3, #10
    a4f2:	18fb      	adds	r3, r7, r3
    a4f4:	001a      	movs	r2, r3
    a4f6:	0028      	movs	r0, r5
    a4f8:	4b5e      	ldr	r3, [pc, #376]	; (a674 <_usart_set_config+0x2c0>)
    a4fa:	4798      	blx	r3
    a4fc:	0003      	movs	r3, r0
    a4fe:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    a500:	e033      	b.n	a56a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    a502:	683b      	ldr	r3, [r7, #0]
    a504:	2227      	movs	r2, #39	; 0x27
    a506:	5c9b      	ldrb	r3, [r3, r2]
    a508:	2b00      	cmp	r3, #0
    a50a:	d014      	beq.n	a536 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    a50c:	683b      	ldr	r3, [r7, #0]
    a50e:	6a18      	ldr	r0, [r3, #32]
    a510:	683b      	ldr	r3, [r7, #0]
    a512:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    a514:	231d      	movs	r3, #29
    a516:	18fc      	adds	r4, r7, r3
    a518:	231f      	movs	r3, #31
    a51a:	18fb      	adds	r3, r7, r3
    a51c:	781d      	ldrb	r5, [r3, #0]
    a51e:	230a      	movs	r3, #10
    a520:	18fa      	adds	r2, r7, r3
    a522:	231e      	movs	r3, #30
    a524:	18fb      	adds	r3, r7, r3
    a526:	781b      	ldrb	r3, [r3, #0]
    a528:	9300      	str	r3, [sp, #0]
    a52a:	002b      	movs	r3, r5
    a52c:	4d52      	ldr	r5, [pc, #328]	; (a678 <_usart_set_config+0x2c4>)
    a52e:	47a8      	blx	r5
    a530:	0003      	movs	r3, r0
    a532:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    a534:	e01a      	b.n	a56c <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    a536:	683b      	ldr	r3, [r7, #0]
    a538:	6a1d      	ldr	r5, [r3, #32]
    a53a:	693b      	ldr	r3, [r7, #16]
    a53c:	b2db      	uxtb	r3, r3
    a53e:	0018      	movs	r0, r3
    a540:	4b4b      	ldr	r3, [pc, #300]	; (a670 <_usart_set_config+0x2bc>)
    a542:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    a544:	231d      	movs	r3, #29
    a546:	18fc      	adds	r4, r7, r3
    a548:	231f      	movs	r3, #31
    a54a:	18fb      	adds	r3, r7, r3
    a54c:	7819      	ldrb	r1, [r3, #0]
    a54e:	230a      	movs	r3, #10
    a550:	18fa      	adds	r2, r7, r3
    a552:	231e      	movs	r3, #30
    a554:	18fb      	adds	r3, r7, r3
    a556:	781b      	ldrb	r3, [r3, #0]
    a558:	9300      	str	r3, [sp, #0]
    a55a:	000b      	movs	r3, r1
    a55c:	0001      	movs	r1, r0
    a55e:	0028      	movs	r0, r5
    a560:	4d45      	ldr	r5, [pc, #276]	; (a678 <_usart_set_config+0x2c4>)
    a562:	47a8      	blx	r5
    a564:	0003      	movs	r3, r0
    a566:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    a568:	e000      	b.n	a56c <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    a56a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    a56c:	231d      	movs	r3, #29
    a56e:	18fb      	adds	r3, r7, r3
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	2b00      	cmp	r3, #0
    a574:	d003      	beq.n	a57e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    a576:	231d      	movs	r3, #29
    a578:	18fb      	adds	r3, r7, r3
    a57a:	781b      	ldrb	r3, [r3, #0]
    a57c:	e071      	b.n	a662 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    a57e:	683b      	ldr	r3, [r7, #0]
    a580:	7e5b      	ldrb	r3, [r3, #25]
    a582:	2b00      	cmp	r3, #0
    a584:	d003      	beq.n	a58e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    a586:	683b      	ldr	r3, [r7, #0]
    a588:	7e9a      	ldrb	r2, [r3, #26]
    a58a:	69bb      	ldr	r3, [r7, #24]
    a58c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	0018      	movs	r0, r3
    a592:	4b3a      	ldr	r3, [pc, #232]	; (a67c <_usart_set_config+0x2c8>)
    a594:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    a596:	230a      	movs	r3, #10
    a598:	18fb      	adds	r3, r7, r3
    a59a:	881a      	ldrh	r2, [r3, #0]
    a59c:	69bb      	ldr	r3, [r7, #24]
    a59e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    a5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a5a2:	68fb      	ldr	r3, [r7, #12]
    a5a4:	4313      	orrs	r3, r2
    a5a6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    a5a8:	683b      	ldr	r3, [r7, #0]
    a5aa:	2227      	movs	r2, #39	; 0x27
    a5ac:	5c9b      	ldrb	r3, [r3, r2]
    a5ae:	2201      	movs	r2, #1
    a5b0:	4053      	eors	r3, r2
    a5b2:	b2db      	uxtb	r3, r3
    a5b4:	2b00      	cmp	r3, #0
    a5b6:	d003      	beq.n	a5c0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a5ba:	2204      	movs	r2, #4
    a5bc:	4313      	orrs	r3, r2
    a5be:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a5c0:	683b      	ldr	r3, [r7, #0]
    a5c2:	7e5b      	ldrb	r3, [r3, #25]
    a5c4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a5c6:	683b      	ldr	r3, [r7, #0]
    a5c8:	7f1b      	ldrb	r3, [r3, #28]
    a5ca:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a5cc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a5ce:	683b      	ldr	r3, [r7, #0]
    a5d0:	7f5b      	ldrb	r3, [r3, #29]
    a5d2:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a5d4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a5d6:	683b      	ldr	r3, [r7, #0]
    a5d8:	2124      	movs	r1, #36	; 0x24
    a5da:	5c5b      	ldrb	r3, [r3, r1]
    a5dc:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a5de:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    a5e0:	683b      	ldr	r3, [r7, #0]
    a5e2:	2125      	movs	r1, #37	; 0x25
    a5e4:	5c5b      	ldrb	r3, [r3, r1]
    a5e6:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a5e8:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    a5ea:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    a5ec:	683b      	ldr	r3, [r7, #0]
    a5ee:	7adb      	ldrb	r3, [r3, #11]
    a5f0:	001a      	movs	r2, r3
    a5f2:	6a3b      	ldr	r3, [r7, #32]
    a5f4:	4313      	orrs	r3, r2
    a5f6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    a5f8:	683b      	ldr	r3, [r7, #0]
    a5fa:	891b      	ldrh	r3, [r3, #8]
    a5fc:	2bff      	cmp	r3, #255	; 0xff
    a5fe:	d00b      	beq.n	a618 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a602:	2280      	movs	r2, #128	; 0x80
    a604:	0452      	lsls	r2, r2, #17
    a606:	4313      	orrs	r3, r2
    a608:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    a60a:	683b      	ldr	r3, [r7, #0]
    a60c:	891b      	ldrh	r3, [r3, #8]
    a60e:	001a      	movs	r2, r3
    a610:	6a3b      	ldr	r3, [r7, #32]
    a612:	4313      	orrs	r3, r2
    a614:	623b      	str	r3, [r7, #32]
    a616:	e008      	b.n	a62a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    a618:	683b      	ldr	r3, [r7, #0]
    a61a:	7edb      	ldrb	r3, [r3, #27]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d004      	beq.n	a62a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a622:	2280      	movs	r2, #128	; 0x80
    a624:	04d2      	lsls	r2, r2, #19
    a626:	4313      	orrs	r3, r2
    a628:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    a62a:	683b      	ldr	r3, [r7, #0]
    a62c:	222c      	movs	r2, #44	; 0x2c
    a62e:	5c9b      	ldrb	r3, [r3, r2]
    a630:	2b00      	cmp	r3, #0
    a632:	d103      	bne.n	a63c <_usart_set_config+0x288>
    a634:	4b12      	ldr	r3, [pc, #72]	; (a680 <_usart_set_config+0x2cc>)
    a636:	4798      	blx	r3
    a638:	1e03      	subs	r3, r0, #0
    a63a:	d003      	beq.n	a644 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a63e:	2280      	movs	r2, #128	; 0x80
    a640:	4313      	orrs	r3, r2
    a642:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	0018      	movs	r0, r3
    a648:	4b0c      	ldr	r3, [pc, #48]	; (a67c <_usart_set_config+0x2c8>)
    a64a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    a64c:	69bb      	ldr	r3, [r7, #24]
    a64e:	6a3a      	ldr	r2, [r7, #32]
    a650:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a652:	687b      	ldr	r3, [r7, #4]
    a654:	0018      	movs	r0, r3
    a656:	4b09      	ldr	r3, [pc, #36]	; (a67c <_usart_set_config+0x2c8>)
    a658:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    a65a:	69bb      	ldr	r3, [r7, #24]
    a65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a65e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    a660:	2300      	movs	r3, #0
}
    a662:	0018      	movs	r0, r3
    a664:	46bd      	mov	sp, r7
    a666:	b00a      	add	sp, #40	; 0x28
    a668:	bdb0      	pop	{r4, r5, r7, pc}
    a66a:	46c0      	nop			; (mov r8, r8)
    a66c:	000094b9 	.word	0x000094b9
    a670:	0000bbe9 	.word	0x0000bbe9
    a674:	00009009 	.word	0x00009009
    a678:	00009085 	.word	0x00009085
    a67c:	0000a391 	.word	0x0000a391
    a680:	0000a351 	.word	0x0000a351

0000a684 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    a684:	b590      	push	{r4, r7, lr}
    a686:	b093      	sub	sp, #76	; 0x4c
    a688:	af00      	add	r7, sp, #0
    a68a:	60f8      	str	r0, [r7, #12]
    a68c:	60b9      	str	r1, [r7, #8]
    a68e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    a690:	233b      	movs	r3, #59	; 0x3b
    a692:	18fb      	adds	r3, r7, r3
    a694:	2200      	movs	r2, #0
    a696:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    a698:	68fb      	ldr	r3, [r7, #12]
    a69a:	68ba      	ldr	r2, [r7, #8]
    a69c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a69e:	68fb      	ldr	r3, [r7, #12]
    a6a0:	681b      	ldr	r3, [r3, #0]
    a6a2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a6a4:	68fb      	ldr	r3, [r7, #12]
    a6a6:	681b      	ldr	r3, [r3, #0]
    a6a8:	0018      	movs	r0, r3
    a6aa:	4b86      	ldr	r3, [pc, #536]	; (a8c4 <usart_init+0x240>)
    a6ac:	4798      	blx	r3
    a6ae:	0003      	movs	r3, r0
    a6b0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a6b4:	3302      	adds	r3, #2
    a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a6ba:	3314      	adds	r3, #20
    a6bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    a6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6c0:	681b      	ldr	r3, [r3, #0]
    a6c2:	2201      	movs	r2, #1
    a6c4:	4013      	ands	r3, r2
    a6c6:	d001      	beq.n	a6cc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    a6c8:	2305      	movs	r3, #5
    a6ca:	e0f6      	b.n	a8ba <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    a6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a6ce:	681b      	ldr	r3, [r3, #0]
    a6d0:	2202      	movs	r2, #2
    a6d2:	4013      	ands	r3, r2
    a6d4:	d001      	beq.n	a6da <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    a6d6:	231c      	movs	r3, #28
    a6d8:	e0ef      	b.n	a8ba <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a6da:	2201      	movs	r2, #1
    a6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a6de:	409a      	lsls	r2, r3
    a6e0:	0013      	movs	r3, r2
    a6e2:	0019      	movs	r1, r3
    a6e4:	2002      	movs	r0, #2
    a6e6:	4b78      	ldr	r3, [pc, #480]	; (a8c8 <usart_init+0x244>)
    a6e8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a6ea:	2324      	movs	r3, #36	; 0x24
    a6ec:	18fb      	adds	r3, r7, r3
    a6ee:	0018      	movs	r0, r3
    a6f0:	4b76      	ldr	r3, [pc, #472]	; (a8cc <usart_init+0x248>)
    a6f2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	222d      	movs	r2, #45	; 0x2d
    a6f8:	5c9a      	ldrb	r2, [r3, r2]
    a6fa:	2324      	movs	r3, #36	; 0x24
    a6fc:	18fb      	adds	r3, r7, r3
    a6fe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a702:	b2db      	uxtb	r3, r3
    a704:	2224      	movs	r2, #36	; 0x24
    a706:	18ba      	adds	r2, r7, r2
    a708:	0011      	movs	r1, r2
    a70a:	0018      	movs	r0, r3
    a70c:	4b70      	ldr	r3, [pc, #448]	; (a8d0 <usart_init+0x24c>)
    a70e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a712:	b2db      	uxtb	r3, r3
    a714:	0018      	movs	r0, r3
    a716:	4b6f      	ldr	r3, [pc, #444]	; (a8d4 <usart_init+0x250>)
    a718:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a71a:	687b      	ldr	r3, [r7, #4]
    a71c:	222d      	movs	r2, #45	; 0x2d
    a71e:	5c9b      	ldrb	r3, [r3, r2]
    a720:	2100      	movs	r1, #0
    a722:	0018      	movs	r0, r3
    a724:	4b6c      	ldr	r3, [pc, #432]	; (a8d8 <usart_init+0x254>)
    a726:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    a728:	687b      	ldr	r3, [r7, #4]
    a72a:	7ada      	ldrb	r2, [r3, #11]
    a72c:	68fb      	ldr	r3, [r7, #12]
    a72e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	2224      	movs	r2, #36	; 0x24
    a734:	5c9a      	ldrb	r2, [r3, r2]
    a736:	68fb      	ldr	r3, [r7, #12]
    a738:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    a73a:	687b      	ldr	r3, [r7, #4]
    a73c:	2225      	movs	r2, #37	; 0x25
    a73e:	5c9a      	ldrb	r2, [r3, r2]
    a740:	68fb      	ldr	r3, [r7, #12]
    a742:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    a744:	687b      	ldr	r3, [r7, #4]
    a746:	7eda      	ldrb	r2, [r3, #27]
    a748:	68fb      	ldr	r3, [r7, #12]
    a74a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    a74c:	687b      	ldr	r3, [r7, #4]
    a74e:	7f1a      	ldrb	r2, [r3, #28]
    a750:	68fb      	ldr	r3, [r7, #12]
    a752:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    a754:	233b      	movs	r3, #59	; 0x3b
    a756:	18fc      	adds	r4, r7, r3
    a758:	687a      	ldr	r2, [r7, #4]
    a75a:	68fb      	ldr	r3, [r7, #12]
    a75c:	0011      	movs	r1, r2
    a75e:	0018      	movs	r0, r3
    a760:	4b5e      	ldr	r3, [pc, #376]	; (a8dc <usart_init+0x258>)
    a762:	4798      	blx	r3
    a764:	0003      	movs	r3, r0
    a766:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    a768:	233b      	movs	r3, #59	; 0x3b
    a76a:	18fb      	adds	r3, r7, r3
    a76c:	781b      	ldrb	r3, [r3, #0]
    a76e:	2b00      	cmp	r3, #0
    a770:	d003      	beq.n	a77a <usart_init+0xf6>
		return status_code;
    a772:	233b      	movs	r3, #59	; 0x3b
    a774:	18fb      	adds	r3, r7, r3
    a776:	781b      	ldrb	r3, [r3, #0]
    a778:	e09f      	b.n	a8ba <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    a77a:	2320      	movs	r3, #32
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	0018      	movs	r0, r3
    a780:	4b57      	ldr	r3, [pc, #348]	; (a8e0 <usart_init+0x25c>)
    a782:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a784:	2320      	movs	r3, #32
    a786:	18fb      	adds	r3, r7, r3
    a788:	2200      	movs	r2, #0
    a78a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a78c:	2320      	movs	r3, #32
    a78e:	18fb      	adds	r3, r7, r3
    a790:	2200      	movs	r2, #0
    a792:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    a794:	687b      	ldr	r3, [r7, #4]
    a796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    a798:	2310      	movs	r3, #16
    a79a:	18fb      	adds	r3, r7, r3
    a79c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    a79e:	687b      	ldr	r3, [r7, #4]
    a7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    a7a2:	2310      	movs	r3, #16
    a7a4:	18fb      	adds	r3, r7, r3
    a7a6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a7a8:	687b      	ldr	r3, [r7, #4]
    a7aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    a7ac:	2310      	movs	r3, #16
    a7ae:	18fb      	adds	r3, r7, r3
    a7b0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a7b2:	687b      	ldr	r3, [r7, #4]
    a7b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    a7b6:	2310      	movs	r3, #16
    a7b8:	18fb      	adds	r3, r7, r3
    a7ba:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a7bc:	2347      	movs	r3, #71	; 0x47
    a7be:	18fb      	adds	r3, r7, r3
    a7c0:	2200      	movs	r2, #0
    a7c2:	701a      	strb	r2, [r3, #0]
    a7c4:	e02c      	b.n	a820 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a7c6:	2347      	movs	r3, #71	; 0x47
    a7c8:	18fb      	adds	r3, r7, r3
    a7ca:	781a      	ldrb	r2, [r3, #0]
    a7cc:	2310      	movs	r3, #16
    a7ce:	18fb      	adds	r3, r7, r3
    a7d0:	0092      	lsls	r2, r2, #2
    a7d2:	58d3      	ldr	r3, [r2, r3]
    a7d4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    a7d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a7d8:	2b00      	cmp	r3, #0
    a7da:	d109      	bne.n	a7f0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a7dc:	2347      	movs	r3, #71	; 0x47
    a7de:	18fb      	adds	r3, r7, r3
    a7e0:	781a      	ldrb	r2, [r3, #0]
    a7e2:	68bb      	ldr	r3, [r7, #8]
    a7e4:	0011      	movs	r1, r2
    a7e6:	0018      	movs	r0, r3
    a7e8:	4b3e      	ldr	r3, [pc, #248]	; (a8e4 <usart_init+0x260>)
    a7ea:	4798      	blx	r3
    a7ec:	0003      	movs	r3, r0
    a7ee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a7f2:	3301      	adds	r3, #1
    a7f4:	d00d      	beq.n	a812 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a7f8:	b2da      	uxtb	r2, r3
    a7fa:	2320      	movs	r3, #32
    a7fc:	18fb      	adds	r3, r7, r3
    a7fe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a802:	0c1b      	lsrs	r3, r3, #16
    a804:	b2db      	uxtb	r3, r3
    a806:	2220      	movs	r2, #32
    a808:	18ba      	adds	r2, r7, r2
    a80a:	0011      	movs	r1, r2
    a80c:	0018      	movs	r0, r3
    a80e:	4b36      	ldr	r3, [pc, #216]	; (a8e8 <usart_init+0x264>)
    a810:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a812:	2347      	movs	r3, #71	; 0x47
    a814:	18fb      	adds	r3, r7, r3
    a816:	781a      	ldrb	r2, [r3, #0]
    a818:	2347      	movs	r3, #71	; 0x47
    a81a:	18fb      	adds	r3, r7, r3
    a81c:	3201      	adds	r2, #1
    a81e:	701a      	strb	r2, [r3, #0]
    a820:	2347      	movs	r3, #71	; 0x47
    a822:	18fb      	adds	r3, r7, r3
    a824:	781b      	ldrb	r3, [r3, #0]
    a826:	2b03      	cmp	r3, #3
    a828:	d9cd      	bls.n	a7c6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    a82a:	2300      	movs	r3, #0
    a82c:	63fb      	str	r3, [r7, #60]	; 0x3c
    a82e:	e00a      	b.n	a846 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    a830:	68fa      	ldr	r2, [r7, #12]
    a832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a834:	3302      	adds	r3, #2
    a836:	009b      	lsls	r3, r3, #2
    a838:	18d3      	adds	r3, r2, r3
    a83a:	3304      	adds	r3, #4
    a83c:	2200      	movs	r2, #0
    a83e:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    a840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a842:	3301      	adds	r3, #1
    a844:	63fb      	str	r3, [r7, #60]	; 0x3c
    a846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a848:	2b05      	cmp	r3, #5
    a84a:	d9f1      	bls.n	a830 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    a84c:	68fb      	ldr	r3, [r7, #12]
    a84e:	2200      	movs	r2, #0
    a850:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    a852:	68fb      	ldr	r3, [r7, #12]
    a854:	2200      	movs	r2, #0
    a856:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    a858:	68fb      	ldr	r3, [r7, #12]
    a85a:	2200      	movs	r2, #0
    a85c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    a85e:	68fb      	ldr	r3, [r7, #12]
    a860:	2200      	movs	r2, #0
    a862:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    a864:	68fb      	ldr	r3, [r7, #12]
    a866:	2230      	movs	r2, #48	; 0x30
    a868:	2100      	movs	r1, #0
    a86a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    a86c:	68fb      	ldr	r3, [r7, #12]
    a86e:	2231      	movs	r2, #49	; 0x31
    a870:	2100      	movs	r1, #0
    a872:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    a874:	68fb      	ldr	r3, [r7, #12]
    a876:	2232      	movs	r2, #50	; 0x32
    a878:	2100      	movs	r1, #0
    a87a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    a87c:	68fb      	ldr	r3, [r7, #12]
    a87e:	2233      	movs	r2, #51	; 0x33
    a880:	2100      	movs	r1, #0
    a882:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    a884:	68fb      	ldr	r3, [r7, #12]
    a886:	681b      	ldr	r3, [r3, #0]
    a888:	2227      	movs	r2, #39	; 0x27
    a88a:	18bc      	adds	r4, r7, r2
    a88c:	0018      	movs	r0, r3
    a88e:	4b0d      	ldr	r3, [pc, #52]	; (a8c4 <usart_init+0x240>)
    a890:	4798      	blx	r3
    a892:	0003      	movs	r3, r0
    a894:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    a896:	4a15      	ldr	r2, [pc, #84]	; (a8ec <usart_init+0x268>)
    a898:	2327      	movs	r3, #39	; 0x27
    a89a:	18fb      	adds	r3, r7, r3
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	0011      	movs	r1, r2
    a8a0:	0018      	movs	r0, r3
    a8a2:	4b13      	ldr	r3, [pc, #76]	; (a8f0 <usart_init+0x26c>)
    a8a4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    a8a6:	2327      	movs	r3, #39	; 0x27
    a8a8:	18fb      	adds	r3, r7, r3
    a8aa:	781a      	ldrb	r2, [r3, #0]
    a8ac:	4b11      	ldr	r3, [pc, #68]	; (a8f4 <usart_init+0x270>)
    a8ae:	0092      	lsls	r2, r2, #2
    a8b0:	68f9      	ldr	r1, [r7, #12]
    a8b2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    a8b4:	233b      	movs	r3, #59	; 0x3b
    a8b6:	18fb      	adds	r3, r7, r3
    a8b8:	781b      	ldrb	r3, [r3, #0]
}
    a8ba:	0018      	movs	r0, r3
    a8bc:	46bd      	mov	sp, r7
    a8be:	b013      	add	sp, #76	; 0x4c
    a8c0:	bd90      	pop	{r4, r7, pc}
    a8c2:	46c0      	nop			; (mov r8, r8)
    a8c4:	000094b9 	.word	0x000094b9
    a8c8:	0000a2cd 	.word	0x0000a2cd
    a8cc:	0000a2b5 	.word	0x0000a2b5
    a8d0:	0000bac5 	.word	0x0000bac5
    a8d4:	0000bb09 	.word	0x0000bb09
    a8d8:	00009271 	.word	0x00009271
    a8dc:	0000a3b5 	.word	0x0000a3b5
    a8e0:	0000a329 	.word	0x0000a329
    a8e4:	000092fd 	.word	0x000092fd
    a8e8:	0000bdb1 	.word	0x0000bdb1
    a8ec:	0000aa8d 	.word	0x0000aa8d
    a8f0:	0000951d 	.word	0x0000951d
    a8f4:	20004798 	.word	0x20004798

0000a8f8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    a8f8:	b580      	push	{r7, lr}
    a8fa:	b084      	sub	sp, #16
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	6078      	str	r0, [r7, #4]
    a900:	000a      	movs	r2, r1
    a902:	1cbb      	adds	r3, r7, #2
    a904:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    a90c:	687b      	ldr	r3, [r7, #4]
    a90e:	79db      	ldrb	r3, [r3, #7]
    a910:	2201      	movs	r2, #1
    a912:	4053      	eors	r3, r2
    a914:	b2db      	uxtb	r3, r3
    a916:	2b00      	cmp	r3, #0
    a918:	d001      	beq.n	a91e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    a91a:	231c      	movs	r3, #28
    a91c:	e017      	b.n	a94e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    a91e:	687b      	ldr	r3, [r7, #4]
    a920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    a922:	b29b      	uxth	r3, r3
    a924:	2b00      	cmp	r3, #0
    a926:	d001      	beq.n	a92c <usart_write_wait+0x34>
		return STATUS_BUSY;
    a928:	2305      	movs	r3, #5
    a92a:	e010      	b.n	a94e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	0018      	movs	r0, r3
    a930:	4b09      	ldr	r3, [pc, #36]	; (a958 <usart_write_wait+0x60>)
    a932:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    a934:	68fb      	ldr	r3, [r7, #12]
    a936:	1cba      	adds	r2, r7, #2
    a938:	8812      	ldrh	r2, [r2, #0]
    a93a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    a93c:	46c0      	nop			; (mov r8, r8)
    a93e:	68fb      	ldr	r3, [r7, #12]
    a940:	7e1b      	ldrb	r3, [r3, #24]
    a942:	b2db      	uxtb	r3, r3
    a944:	001a      	movs	r2, r3
    a946:	2302      	movs	r3, #2
    a948:	4013      	ands	r3, r2
    a94a:	d0f8      	beq.n	a93e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    a94c:	2300      	movs	r3, #0
}
    a94e:	0018      	movs	r0, r3
    a950:	46bd      	mov	sp, r7
    a952:	b004      	add	sp, #16
    a954:	bd80      	pop	{r7, pc}
    a956:	46c0      	nop			; (mov r8, r8)
    a958:	0000a391 	.word	0x0000a391

0000a95c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    a95c:	b580      	push	{r7, lr}
    a95e:	b084      	sub	sp, #16
    a960:	af00      	add	r7, sp, #0
    a962:	6078      	str	r0, [r7, #4]
    a964:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a966:	687b      	ldr	r3, [r7, #4]
    a968:	681b      	ldr	r3, [r3, #0]
    a96a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	799b      	ldrb	r3, [r3, #6]
    a970:	2201      	movs	r2, #1
    a972:	4053      	eors	r3, r2
    a974:	b2db      	uxtb	r3, r3
    a976:	2b00      	cmp	r3, #0
    a978:	d001      	beq.n	a97e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    a97a:	231c      	movs	r3, #28
    a97c:	e05e      	b.n	aa3c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    a97e:	687b      	ldr	r3, [r7, #4]
    a980:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    a982:	b29b      	uxth	r3, r3
    a984:	2b00      	cmp	r3, #0
    a986:	d001      	beq.n	a98c <usart_read_wait+0x30>
		return STATUS_BUSY;
    a988:	2305      	movs	r3, #5
    a98a:	e057      	b.n	aa3c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    a98c:	68fb      	ldr	r3, [r7, #12]
    a98e:	7e1b      	ldrb	r3, [r3, #24]
    a990:	b2db      	uxtb	r3, r3
    a992:	001a      	movs	r2, r3
    a994:	2304      	movs	r3, #4
    a996:	4013      	ands	r3, r2
    a998:	d101      	bne.n	a99e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    a99a:	2305      	movs	r3, #5
    a99c:	e04e      	b.n	aa3c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a99e:	687b      	ldr	r3, [r7, #4]
    a9a0:	0018      	movs	r0, r3
    a9a2:	4b28      	ldr	r3, [pc, #160]	; (aa44 <usart_read_wait+0xe8>)
    a9a4:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    a9a6:	68fb      	ldr	r3, [r7, #12]
    a9a8:	8b5b      	ldrh	r3, [r3, #26]
    a9aa:	b29b      	uxth	r3, r3
    a9ac:	b2da      	uxtb	r2, r3
    a9ae:	230b      	movs	r3, #11
    a9b0:	18fb      	adds	r3, r7, r3
    a9b2:	213f      	movs	r1, #63	; 0x3f
    a9b4:	400a      	ands	r2, r1
    a9b6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    a9b8:	230b      	movs	r3, #11
    a9ba:	18fb      	adds	r3, r7, r3
    a9bc:	781b      	ldrb	r3, [r3, #0]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d036      	beq.n	aa30 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    a9c2:	230b      	movs	r3, #11
    a9c4:	18fb      	adds	r3, r7, r3
    a9c6:	781b      	ldrb	r3, [r3, #0]
    a9c8:	2202      	movs	r2, #2
    a9ca:	4013      	ands	r3, r2
    a9cc:	d004      	beq.n	a9d8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    a9ce:	68fb      	ldr	r3, [r7, #12]
    a9d0:	2202      	movs	r2, #2
    a9d2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    a9d4:	231a      	movs	r3, #26
    a9d6:	e031      	b.n	aa3c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    a9d8:	230b      	movs	r3, #11
    a9da:	18fb      	adds	r3, r7, r3
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2204      	movs	r2, #4
    a9e0:	4013      	ands	r3, r2
    a9e2:	d004      	beq.n	a9ee <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    a9e4:	68fb      	ldr	r3, [r7, #12]
    a9e6:	2204      	movs	r2, #4
    a9e8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    a9ea:	231e      	movs	r3, #30
    a9ec:	e026      	b.n	aa3c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    a9ee:	230b      	movs	r3, #11
    a9f0:	18fb      	adds	r3, r7, r3
    a9f2:	781b      	ldrb	r3, [r3, #0]
    a9f4:	2201      	movs	r2, #1
    a9f6:	4013      	ands	r3, r2
    a9f8:	d004      	beq.n	aa04 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    a9fa:	68fb      	ldr	r3, [r7, #12]
    a9fc:	2201      	movs	r2, #1
    a9fe:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    aa00:	2313      	movs	r3, #19
    aa02:	e01b      	b.n	aa3c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    aa04:	230b      	movs	r3, #11
    aa06:	18fb      	adds	r3, r7, r3
    aa08:	781b      	ldrb	r3, [r3, #0]
    aa0a:	2210      	movs	r2, #16
    aa0c:	4013      	ands	r3, r2
    aa0e:	d004      	beq.n	aa1a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    aa10:	68fb      	ldr	r3, [r7, #12]
    aa12:	2210      	movs	r2, #16
    aa14:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    aa16:	2342      	movs	r3, #66	; 0x42
    aa18:	e010      	b.n	aa3c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    aa1a:	230b      	movs	r3, #11
    aa1c:	18fb      	adds	r3, r7, r3
    aa1e:	781b      	ldrb	r3, [r3, #0]
    aa20:	2220      	movs	r2, #32
    aa22:	4013      	ands	r3, r2
    aa24:	d004      	beq.n	aa30 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    aa26:	68fb      	ldr	r3, [r7, #12]
    aa28:	2220      	movs	r2, #32
    aa2a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    aa2c:	2341      	movs	r3, #65	; 0x41
    aa2e:	e005      	b.n	aa3c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    aa30:	68fb      	ldr	r3, [r7, #12]
    aa32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    aa34:	b29a      	uxth	r2, r3
    aa36:	683b      	ldr	r3, [r7, #0]
    aa38:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    aa3a:	2300      	movs	r3, #0
}
    aa3c:	0018      	movs	r0, r3
    aa3e:	46bd      	mov	sp, r7
    aa40:	b004      	add	sp, #16
    aa42:	bd80      	pop	{r7, pc}
    aa44:	0000a391 	.word	0x0000a391

0000aa48 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    aa48:	b580      	push	{r7, lr}
    aa4a:	b084      	sub	sp, #16
    aa4c:	af00      	add	r7, sp, #0
    aa4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    aa50:	687b      	ldr	r3, [r7, #4]
    aa52:	681b      	ldr	r3, [r3, #0]
    aa54:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    aa56:	68fb      	ldr	r3, [r7, #12]
    aa58:	69db      	ldr	r3, [r3, #28]
    aa5a:	1e5a      	subs	r2, r3, #1
    aa5c:	4193      	sbcs	r3, r2
    aa5e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    aa60:	0018      	movs	r0, r3
    aa62:	46bd      	mov	sp, r7
    aa64:	b004      	add	sp, #16
    aa66:	bd80      	pop	{r7, pc}

0000aa68 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    aa68:	b580      	push	{r7, lr}
    aa6a:	b082      	sub	sp, #8
    aa6c:	af00      	add	r7, sp, #0
    aa6e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    aa70:	46c0      	nop			; (mov r8, r8)
    aa72:	687b      	ldr	r3, [r7, #4]
    aa74:	0018      	movs	r0, r3
    aa76:	4b04      	ldr	r3, [pc, #16]	; (aa88 <_usart_wait_for_sync+0x20>)
    aa78:	4798      	blx	r3
    aa7a:	1e03      	subs	r3, r0, #0
    aa7c:	d1f9      	bne.n	aa72 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    aa7e:	46c0      	nop			; (mov r8, r8)
    aa80:	46bd      	mov	sp, r7
    aa82:	b002      	add	sp, #8
    aa84:	bd80      	pop	{r7, pc}
    aa86:	46c0      	nop			; (mov r8, r8)
    aa88:	0000aa49 	.word	0x0000aa49

0000aa8c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    aa8c:	b580      	push	{r7, lr}
    aa8e:	b088      	sub	sp, #32
    aa90:	af00      	add	r7, sp, #0
    aa92:	0002      	movs	r2, r0
    aa94:	1dfb      	adds	r3, r7, #7
    aa96:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    aa98:	1dfb      	adds	r3, r7, #7
    aa9a:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    aa9c:	4ba3      	ldr	r3, [pc, #652]	; (ad2c <_usart_interrupt_handler+0x2a0>)
    aa9e:	0092      	lsls	r2, r2, #2
    aaa0:	58d3      	ldr	r3, [r2, r3]
    aaa2:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    aaa4:	69bb      	ldr	r3, [r7, #24]
    aaa6:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    aaa8:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    aaaa:	69bb      	ldr	r3, [r7, #24]
    aaac:	0018      	movs	r0, r3
    aaae:	4ba0      	ldr	r3, [pc, #640]	; (ad30 <_usart_interrupt_handler+0x2a4>)
    aab0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    aab2:	697b      	ldr	r3, [r7, #20]
    aab4:	7e1b      	ldrb	r3, [r3, #24]
    aab6:	b2da      	uxtb	r2, r3
    aab8:	2312      	movs	r3, #18
    aaba:	18fb      	adds	r3, r7, r3
    aabc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    aabe:	697b      	ldr	r3, [r7, #20]
    aac0:	7d9b      	ldrb	r3, [r3, #22]
    aac2:	b2db      	uxtb	r3, r3
    aac4:	b29a      	uxth	r2, r3
    aac6:	2312      	movs	r3, #18
    aac8:	18fb      	adds	r3, r7, r3
    aaca:	2112      	movs	r1, #18
    aacc:	1879      	adds	r1, r7, r1
    aace:	8809      	ldrh	r1, [r1, #0]
    aad0:	400a      	ands	r2, r1
    aad2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    aad4:	69bb      	ldr	r3, [r7, #24]
    aad6:	2230      	movs	r2, #48	; 0x30
    aad8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    aada:	69ba      	ldr	r2, [r7, #24]
    aadc:	2131      	movs	r1, #49	; 0x31
    aade:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    aae0:	4013      	ands	r3, r2
    aae2:	b2da      	uxtb	r2, r3
    aae4:	2310      	movs	r3, #16
    aae6:	18fb      	adds	r3, r7, r3
    aae8:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    aaea:	2312      	movs	r3, #18
    aaec:	18fb      	adds	r3, r7, r3
    aaee:	881b      	ldrh	r3, [r3, #0]
    aaf0:	2201      	movs	r2, #1
    aaf2:	4013      	ands	r3, r2
    aaf4:	d044      	beq.n	ab80 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    aaf6:	69bb      	ldr	r3, [r7, #24]
    aaf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    aafa:	b29b      	uxth	r3, r3
    aafc:	2b00      	cmp	r3, #0
    aafe:	d03c      	beq.n	ab7a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    ab00:	69bb      	ldr	r3, [r7, #24]
    ab02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab04:	781b      	ldrb	r3, [r3, #0]
    ab06:	b2da      	uxtb	r2, r3
    ab08:	231c      	movs	r3, #28
    ab0a:	18fb      	adds	r3, r7, r3
    ab0c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    ab0e:	69bb      	ldr	r3, [r7, #24]
    ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab12:	1c5a      	adds	r2, r3, #1
    ab14:	69bb      	ldr	r3, [r7, #24]
    ab16:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    ab18:	69bb      	ldr	r3, [r7, #24]
    ab1a:	795b      	ldrb	r3, [r3, #5]
    ab1c:	2b01      	cmp	r3, #1
    ab1e:	d113      	bne.n	ab48 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    ab20:	69bb      	ldr	r3, [r7, #24]
    ab22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab24:	781b      	ldrb	r3, [r3, #0]
    ab26:	b2db      	uxtb	r3, r3
    ab28:	021b      	lsls	r3, r3, #8
    ab2a:	b21a      	sxth	r2, r3
    ab2c:	231c      	movs	r3, #28
    ab2e:	18fb      	adds	r3, r7, r3
    ab30:	2100      	movs	r1, #0
    ab32:	5e5b      	ldrsh	r3, [r3, r1]
    ab34:	4313      	orrs	r3, r2
    ab36:	b21a      	sxth	r2, r3
    ab38:	231c      	movs	r3, #28
    ab3a:	18fb      	adds	r3, r7, r3
    ab3c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    ab3e:	69bb      	ldr	r3, [r7, #24]
    ab40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ab42:	1c5a      	adds	r2, r3, #1
    ab44:	69bb      	ldr	r3, [r7, #24]
    ab46:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    ab48:	231c      	movs	r3, #28
    ab4a:	18fb      	adds	r3, r7, r3
    ab4c:	881b      	ldrh	r3, [r3, #0]
    ab4e:	05db      	lsls	r3, r3, #23
    ab50:	0ddb      	lsrs	r3, r3, #23
    ab52:	b29a      	uxth	r2, r3
    ab54:	697b      	ldr	r3, [r7, #20]
    ab56:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    ab58:	69bb      	ldr	r3, [r7, #24]
    ab5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    ab5c:	b29b      	uxth	r3, r3
    ab5e:	3b01      	subs	r3, #1
    ab60:	b29b      	uxth	r3, r3
    ab62:	69ba      	ldr	r2, [r7, #24]
    ab64:	1c19      	adds	r1, r3, #0
    ab66:	85d1      	strh	r1, [r2, #46]	; 0x2e
    ab68:	2b00      	cmp	r3, #0
    ab6a:	d109      	bne.n	ab80 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    ab6c:	697b      	ldr	r3, [r7, #20]
    ab6e:	2201      	movs	r2, #1
    ab70:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    ab72:	697b      	ldr	r3, [r7, #20]
    ab74:	2202      	movs	r2, #2
    ab76:	759a      	strb	r2, [r3, #22]
    ab78:	e002      	b.n	ab80 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    ab7a:	697b      	ldr	r3, [r7, #20]
    ab7c:	2201      	movs	r2, #1
    ab7e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    ab80:	2312      	movs	r3, #18
    ab82:	18fb      	adds	r3, r7, r3
    ab84:	881b      	ldrh	r3, [r3, #0]
    ab86:	2202      	movs	r2, #2
    ab88:	4013      	ands	r3, r2
    ab8a:	d011      	beq.n	abb0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    ab8c:	697b      	ldr	r3, [r7, #20]
    ab8e:	2202      	movs	r2, #2
    ab90:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    ab92:	69bb      	ldr	r3, [r7, #24]
    ab94:	2233      	movs	r2, #51	; 0x33
    ab96:	2100      	movs	r1, #0
    ab98:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    ab9a:	2310      	movs	r3, #16
    ab9c:	18fb      	adds	r3, r7, r3
    ab9e:	881b      	ldrh	r3, [r3, #0]
    aba0:	2201      	movs	r2, #1
    aba2:	4013      	ands	r3, r2
    aba4:	d004      	beq.n	abb0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    aba6:	69bb      	ldr	r3, [r7, #24]
    aba8:	68db      	ldr	r3, [r3, #12]
    abaa:	69ba      	ldr	r2, [r7, #24]
    abac:	0010      	movs	r0, r2
    abae:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    abb0:	2312      	movs	r3, #18
    abb2:	18fb      	adds	r3, r7, r3
    abb4:	881b      	ldrh	r3, [r3, #0]
    abb6:	2204      	movs	r2, #4
    abb8:	4013      	ands	r3, r2
    abba:	d100      	bne.n	abbe <_usart_interrupt_handler+0x132>
    abbc:	e0bd      	b.n	ad3a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    abbe:	69bb      	ldr	r3, [r7, #24]
    abc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    abc2:	b29b      	uxth	r3, r3
    abc4:	2b00      	cmp	r3, #0
    abc6:	d100      	bne.n	abca <_usart_interrupt_handler+0x13e>
    abc8:	e0b4      	b.n	ad34 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    abca:	697b      	ldr	r3, [r7, #20]
    abcc:	8b5b      	ldrh	r3, [r3, #26]
    abce:	b29b      	uxth	r3, r3
    abd0:	b2da      	uxtb	r2, r3
    abd2:	231f      	movs	r3, #31
    abd4:	18fb      	adds	r3, r7, r3
    abd6:	213f      	movs	r1, #63	; 0x3f
    abd8:	400a      	ands	r2, r1
    abda:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    abdc:	231f      	movs	r3, #31
    abde:	18fb      	adds	r3, r7, r3
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	2208      	movs	r2, #8
    abe4:	4013      	ands	r3, r2
    abe6:	d007      	beq.n	abf8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    abe8:	231f      	movs	r3, #31
    abea:	18fb      	adds	r3, r7, r3
    abec:	221f      	movs	r2, #31
    abee:	18ba      	adds	r2, r7, r2
    abf0:	7812      	ldrb	r2, [r2, #0]
    abf2:	2108      	movs	r1, #8
    abf4:	438a      	bics	r2, r1
    abf6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    abf8:	231f      	movs	r3, #31
    abfa:	18fb      	adds	r3, r7, r3
    abfc:	781b      	ldrb	r3, [r3, #0]
    abfe:	2b00      	cmp	r3, #0
    ac00:	d050      	beq.n	aca4 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    ac02:	231f      	movs	r3, #31
    ac04:	18fb      	adds	r3, r7, r3
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	2202      	movs	r2, #2
    ac0a:	4013      	ands	r3, r2
    ac0c:	d007      	beq.n	ac1e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    ac0e:	69bb      	ldr	r3, [r7, #24]
    ac10:	2232      	movs	r2, #50	; 0x32
    ac12:	211a      	movs	r1, #26
    ac14:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ac16:	697b      	ldr	r3, [r7, #20]
    ac18:	2202      	movs	r2, #2
    ac1a:	835a      	strh	r2, [r3, #26]
    ac1c:	e036      	b.n	ac8c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ac1e:	231f      	movs	r3, #31
    ac20:	18fb      	adds	r3, r7, r3
    ac22:	781b      	ldrb	r3, [r3, #0]
    ac24:	2204      	movs	r2, #4
    ac26:	4013      	ands	r3, r2
    ac28:	d007      	beq.n	ac3a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    ac2a:	69bb      	ldr	r3, [r7, #24]
    ac2c:	2232      	movs	r2, #50	; 0x32
    ac2e:	211e      	movs	r1, #30
    ac30:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    ac32:	697b      	ldr	r3, [r7, #20]
    ac34:	2204      	movs	r2, #4
    ac36:	835a      	strh	r2, [r3, #26]
    ac38:	e028      	b.n	ac8c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    ac3a:	231f      	movs	r3, #31
    ac3c:	18fb      	adds	r3, r7, r3
    ac3e:	781b      	ldrb	r3, [r3, #0]
    ac40:	2201      	movs	r2, #1
    ac42:	4013      	ands	r3, r2
    ac44:	d007      	beq.n	ac56 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    ac46:	69bb      	ldr	r3, [r7, #24]
    ac48:	2232      	movs	r2, #50	; 0x32
    ac4a:	2113      	movs	r1, #19
    ac4c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    ac4e:	697b      	ldr	r3, [r7, #20]
    ac50:	2201      	movs	r2, #1
    ac52:	835a      	strh	r2, [r3, #26]
    ac54:	e01a      	b.n	ac8c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    ac56:	231f      	movs	r3, #31
    ac58:	18fb      	adds	r3, r7, r3
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	2210      	movs	r2, #16
    ac5e:	4013      	ands	r3, r2
    ac60:	d007      	beq.n	ac72 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    ac62:	69bb      	ldr	r3, [r7, #24]
    ac64:	2232      	movs	r2, #50	; 0x32
    ac66:	2142      	movs	r1, #66	; 0x42
    ac68:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    ac6a:	697b      	ldr	r3, [r7, #20]
    ac6c:	2210      	movs	r2, #16
    ac6e:	835a      	strh	r2, [r3, #26]
    ac70:	e00c      	b.n	ac8c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    ac72:	231f      	movs	r3, #31
    ac74:	18fb      	adds	r3, r7, r3
    ac76:	781b      	ldrb	r3, [r3, #0]
    ac78:	2220      	movs	r2, #32
    ac7a:	4013      	ands	r3, r2
    ac7c:	d006      	beq.n	ac8c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    ac7e:	69bb      	ldr	r3, [r7, #24]
    ac80:	2232      	movs	r2, #50	; 0x32
    ac82:	2141      	movs	r1, #65	; 0x41
    ac84:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    ac86:	697b      	ldr	r3, [r7, #20]
    ac88:	2220      	movs	r2, #32
    ac8a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    ac8c:	2310      	movs	r3, #16
    ac8e:	18fb      	adds	r3, r7, r3
    ac90:	881b      	ldrh	r3, [r3, #0]
    ac92:	2204      	movs	r2, #4
    ac94:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    ac96:	d050      	beq.n	ad3a <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    ac98:	69bb      	ldr	r3, [r7, #24]
    ac9a:	695b      	ldr	r3, [r3, #20]
    ac9c:	69ba      	ldr	r2, [r7, #24]
    ac9e:	0010      	movs	r0, r2
    aca0:	4798      	blx	r3
    aca2:	e04a      	b.n	ad3a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    aca4:	697b      	ldr	r3, [r7, #20]
    aca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    aca8:	b29a      	uxth	r2, r3
    acaa:	230e      	movs	r3, #14
    acac:	18fb      	adds	r3, r7, r3
    acae:	05d2      	lsls	r2, r2, #23
    acb0:	0dd2      	lsrs	r2, r2, #23
    acb2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    acb4:	69bb      	ldr	r3, [r7, #24]
    acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acb8:	220e      	movs	r2, #14
    acba:	18ba      	adds	r2, r7, r2
    acbc:	8812      	ldrh	r2, [r2, #0]
    acbe:	b2d2      	uxtb	r2, r2
    acc0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    acc2:	69bb      	ldr	r3, [r7, #24]
    acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acc6:	1c5a      	adds	r2, r3, #1
    acc8:	69bb      	ldr	r3, [r7, #24]
    acca:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    accc:	69bb      	ldr	r3, [r7, #24]
    acce:	795b      	ldrb	r3, [r3, #5]
    acd0:	2b01      	cmp	r3, #1
    acd2:	d10d      	bne.n	acf0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    acd4:	69bb      	ldr	r3, [r7, #24]
    acd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acd8:	220e      	movs	r2, #14
    acda:	18ba      	adds	r2, r7, r2
    acdc:	8812      	ldrh	r2, [r2, #0]
    acde:	0a12      	lsrs	r2, r2, #8
    ace0:	b292      	uxth	r2, r2
    ace2:	b2d2      	uxtb	r2, r2
    ace4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    ace6:	69bb      	ldr	r3, [r7, #24]
    ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    acea:	1c5a      	adds	r2, r3, #1
    acec:	69bb      	ldr	r3, [r7, #24]
    acee:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    acf0:	69bb      	ldr	r3, [r7, #24]
    acf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    acf4:	b29b      	uxth	r3, r3
    acf6:	3b01      	subs	r3, #1
    acf8:	b29b      	uxth	r3, r3
    acfa:	69ba      	ldr	r2, [r7, #24]
    acfc:	1c19      	adds	r1, r3, #0
    acfe:	8591      	strh	r1, [r2, #44]	; 0x2c
    ad00:	2b00      	cmp	r3, #0
    ad02:	d11a      	bne.n	ad3a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    ad04:	697b      	ldr	r3, [r7, #20]
    ad06:	2204      	movs	r2, #4
    ad08:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    ad0a:	69bb      	ldr	r3, [r7, #24]
    ad0c:	2232      	movs	r2, #50	; 0x32
    ad0e:	2100      	movs	r1, #0
    ad10:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    ad12:	2310      	movs	r3, #16
    ad14:	18fb      	adds	r3, r7, r3
    ad16:	881b      	ldrh	r3, [r3, #0]
    ad18:	2202      	movs	r2, #2
    ad1a:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    ad1c:	d00d      	beq.n	ad3a <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    ad1e:	69bb      	ldr	r3, [r7, #24]
    ad20:	691b      	ldr	r3, [r3, #16]
    ad22:	69ba      	ldr	r2, [r7, #24]
    ad24:	0010      	movs	r0, r2
    ad26:	4798      	blx	r3
    ad28:	e007      	b.n	ad3a <_usart_interrupt_handler+0x2ae>
    ad2a:	46c0      	nop			; (mov r8, r8)
    ad2c:	20004798 	.word	0x20004798
    ad30:	0000aa69 	.word	0x0000aa69
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    ad34:	697b      	ldr	r3, [r7, #20]
    ad36:	2204      	movs	r2, #4
    ad38:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    ad3a:	2312      	movs	r3, #18
    ad3c:	18fb      	adds	r3, r7, r3
    ad3e:	881b      	ldrh	r3, [r3, #0]
    ad40:	2210      	movs	r2, #16
    ad42:	4013      	ands	r3, r2
    ad44:	d010      	beq.n	ad68 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    ad46:	697b      	ldr	r3, [r7, #20]
    ad48:	2210      	movs	r2, #16
    ad4a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    ad4c:	697b      	ldr	r3, [r7, #20]
    ad4e:	2210      	movs	r2, #16
    ad50:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    ad52:	2310      	movs	r3, #16
    ad54:	18fb      	adds	r3, r7, r3
    ad56:	881b      	ldrh	r3, [r3, #0]
    ad58:	2210      	movs	r2, #16
    ad5a:	4013      	ands	r3, r2
    ad5c:	d004      	beq.n	ad68 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    ad5e:	69bb      	ldr	r3, [r7, #24]
    ad60:	69db      	ldr	r3, [r3, #28]
    ad62:	69ba      	ldr	r2, [r7, #24]
    ad64:	0010      	movs	r0, r2
    ad66:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    ad68:	2312      	movs	r3, #18
    ad6a:	18fb      	adds	r3, r7, r3
    ad6c:	881b      	ldrh	r3, [r3, #0]
    ad6e:	2220      	movs	r2, #32
    ad70:	4013      	ands	r3, r2
    ad72:	d010      	beq.n	ad96 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    ad74:	697b      	ldr	r3, [r7, #20]
    ad76:	2220      	movs	r2, #32
    ad78:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    ad7a:	697b      	ldr	r3, [r7, #20]
    ad7c:	2220      	movs	r2, #32
    ad7e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    ad80:	2310      	movs	r3, #16
    ad82:	18fb      	adds	r3, r7, r3
    ad84:	881b      	ldrh	r3, [r3, #0]
    ad86:	2208      	movs	r2, #8
    ad88:	4013      	ands	r3, r2
    ad8a:	d004      	beq.n	ad96 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    ad8c:	69bb      	ldr	r3, [r7, #24]
    ad8e:	699b      	ldr	r3, [r3, #24]
    ad90:	69ba      	ldr	r2, [r7, #24]
    ad92:	0010      	movs	r0, r2
    ad94:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    ad96:	2312      	movs	r3, #18
    ad98:	18fb      	adds	r3, r7, r3
    ad9a:	881b      	ldrh	r3, [r3, #0]
    ad9c:	2208      	movs	r2, #8
    ad9e:	4013      	ands	r3, r2
    ada0:	d010      	beq.n	adc4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    ada2:	697b      	ldr	r3, [r7, #20]
    ada4:	2208      	movs	r2, #8
    ada6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    ada8:	697b      	ldr	r3, [r7, #20]
    adaa:	2208      	movs	r2, #8
    adac:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    adae:	2310      	movs	r3, #16
    adb0:	18fb      	adds	r3, r7, r3
    adb2:	881b      	ldrh	r3, [r3, #0]
    adb4:	2220      	movs	r2, #32
    adb6:	4013      	ands	r3, r2
    adb8:	d004      	beq.n	adc4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    adba:	69bb      	ldr	r3, [r7, #24]
    adbc:	6a1b      	ldr	r3, [r3, #32]
    adbe:	69ba      	ldr	r2, [r7, #24]
    adc0:	0010      	movs	r0, r2
    adc2:	4798      	blx	r3
		}
	}
#endif
}
    adc4:	46c0      	nop			; (mov r8, r8)
    adc6:	46bd      	mov	sp, r7
    adc8:	b008      	add	sp, #32
    adca:	bd80      	pop	{r7, pc}

0000adcc <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    adcc:	b580      	push	{r7, lr}
    adce:	b082      	sub	sp, #8
    add0:	af00      	add	r7, sp, #0
    add2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    add4:	687b      	ldr	r3, [r7, #4]
    add6:	2201      	movs	r2, #1
    add8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    adda:	687b      	ldr	r3, [r7, #4]
    addc:	2200      	movs	r2, #0
    adde:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	2206      	movs	r2, #6
    ade4:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    ade6:	687b      	ldr	r3, [r7, #4]
    ade8:	2200      	movs	r2, #0
    adea:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    adec:	687b      	ldr	r3, [r7, #4]
    adee:	2200      	movs	r2, #0
    adf0:	725a      	strb	r2, [r3, #9]
}
    adf2:	46c0      	nop			; (mov r8, r8)
    adf4:	46bd      	mov	sp, r7
    adf6:	b002      	add	sp, #8
    adf8:	bd80      	pop	{r7, pc}
    adfa:	46c0      	nop			; (mov r8, r8)

0000adfc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    adfc:	b580      	push	{r7, lr}
    adfe:	b082      	sub	sp, #8
    ae00:	af00      	add	r7, sp, #0
    ae02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	2200      	movs	r2, #0
    ae08:	701a      	strb	r2, [r3, #0]
}
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	46bd      	mov	sp, r7
    ae0e:	b002      	add	sp, #8
    ae10:	bd80      	pop	{r7, pc}
    ae12:	46c0      	nop			; (mov r8, r8)

0000ae14 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    ae14:	b580      	push	{r7, lr}
    ae16:	b082      	sub	sp, #8
    ae18:	af00      	add	r7, sp, #0
    ae1a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    ae1c:	687b      	ldr	r3, [r7, #4]
    ae1e:	2200      	movs	r2, #0
    ae20:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    ae22:	687b      	ldr	r3, [r7, #4]
    ae24:	2204      	movs	r2, #4
    ae26:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    ae28:	687b      	ldr	r3, [r7, #4]
    ae2a:	2200      	movs	r2, #0
    ae2c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    ae2e:	687b      	ldr	r3, [r7, #4]
    ae30:	2280      	movs	r2, #128	; 0x80
    ae32:	0212      	lsls	r2, r2, #8
    ae34:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    ae36:	687b      	ldr	r3, [r7, #4]
    ae38:	2200      	movs	r2, #0
    ae3a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	2201      	movs	r2, #1
    ae40:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    ae42:	687b      	ldr	r3, [r7, #4]
    ae44:	2200      	movs	r2, #0
    ae46:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    ae48:	687b      	ldr	r3, [r7, #4]
    ae4a:	2201      	movs	r2, #1
    ae4c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    ae4e:	687b      	ldr	r3, [r7, #4]
    ae50:	2200      	movs	r2, #0
    ae52:	739a      	strb	r2, [r3, #14]
}
    ae54:	46c0      	nop			; (mov r8, r8)
    ae56:	46bd      	mov	sp, r7
    ae58:	b002      	add	sp, #8
    ae5a:	bd80      	pop	{r7, pc}

0000ae5c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    ae5c:	b580      	push	{r7, lr}
    ae5e:	b082      	sub	sp, #8
    ae60:	af00      	add	r7, sp, #0
    ae62:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	2203      	movs	r2, #3
    ae68:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	2200      	movs	r2, #0
    ae6e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    ae70:	687b      	ldr	r3, [r7, #4]
    ae72:	2201      	movs	r2, #1
    ae74:	709a      	strb	r2, [r3, #2]
}
    ae76:	46c0      	nop			; (mov r8, r8)
    ae78:	46bd      	mov	sp, r7
    ae7a:	b002      	add	sp, #8
    ae7c:	bd80      	pop	{r7, pc}
    ae7e:	46c0      	nop			; (mov r8, r8)

0000ae80 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    ae80:	b580      	push	{r7, lr}
    ae82:	b082      	sub	sp, #8
    ae84:	af00      	add	r7, sp, #0
    ae86:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	2200      	movs	r2, #0
    ae8c:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    ae8e:	687b      	ldr	r3, [r7, #4]
    ae90:	2200      	movs	r2, #0
    ae92:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    ae94:	687b      	ldr	r3, [r7, #4]
    ae96:	2200      	movs	r2, #0
    ae98:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    ae9a:	687b      	ldr	r3, [r7, #4]
    ae9c:	2200      	movs	r2, #0
    ae9e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    aea0:	687b      	ldr	r3, [r7, #4]
    aea2:	2200      	movs	r2, #0
    aea4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    aea6:	687b      	ldr	r3, [r7, #4]
    aea8:	2201      	movs	r2, #1
    aeaa:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    aeac:	687b      	ldr	r3, [r7, #4]
    aeae:	2207      	movs	r2, #7
    aeb0:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    aeb2:	687b      	ldr	r3, [r7, #4]
    aeb4:	223f      	movs	r2, #63	; 0x3f
    aeb6:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    aeb8:	687b      	ldr	r3, [r7, #4]
    aeba:	2201      	movs	r2, #1
    aebc:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    aebe:	687b      	ldr	r3, [r7, #4]
    aec0:	2201      	movs	r2, #1
    aec2:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    aec4:	687b      	ldr	r3, [r7, #4]
    aec6:	2206      	movs	r2, #6
    aec8:	821a      	strh	r2, [r3, #16]
}
    aeca:	46c0      	nop			; (mov r8, r8)
    aecc:	46bd      	mov	sp, r7
    aece:	b002      	add	sp, #8
    aed0:	bd80      	pop	{r7, pc}
    aed2:	46c0      	nop			; (mov r8, r8)

0000aed4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    aed4:	b580      	push	{r7, lr}
    aed6:	b082      	sub	sp, #8
    aed8:	af00      	add	r7, sp, #0
    aeda:	0002      	movs	r2, r0
    aedc:	1dfb      	adds	r3, r7, #7
    aede:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    aee0:	4a03      	ldr	r2, [pc, #12]	; (aef0 <system_cpu_clock_set_divider+0x1c>)
    aee2:	1dfb      	adds	r3, r7, #7
    aee4:	781b      	ldrb	r3, [r3, #0]
    aee6:	7213      	strb	r3, [r2, #8]
}
    aee8:	46c0      	nop			; (mov r8, r8)
    aeea:	46bd      	mov	sp, r7
    aeec:	b002      	add	sp, #8
    aeee:	bd80      	pop	{r7, pc}
    aef0:	40000400 	.word	0x40000400

0000aef4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    aef4:	b580      	push	{r7, lr}
    aef6:	b082      	sub	sp, #8
    aef8:	af00      	add	r7, sp, #0
    aefa:	0002      	movs	r2, r0
    aefc:	1dfb      	adds	r3, r7, #7
    aefe:	701a      	strb	r2, [r3, #0]
    af00:	1dbb      	adds	r3, r7, #6
    af02:	1c0a      	adds	r2, r1, #0
    af04:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    af06:	1dfb      	adds	r3, r7, #7
    af08:	781b      	ldrb	r3, [r3, #0]
    af0a:	2b01      	cmp	r3, #1
    af0c:	d008      	beq.n	af20 <system_apb_clock_set_divider+0x2c>
    af0e:	2b02      	cmp	r3, #2
    af10:	d00b      	beq.n	af2a <system_apb_clock_set_divider+0x36>
    af12:	2b00      	cmp	r3, #0
    af14:	d10e      	bne.n	af34 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    af16:	4a0b      	ldr	r2, [pc, #44]	; (af44 <system_apb_clock_set_divider+0x50>)
    af18:	1dbb      	adds	r3, r7, #6
    af1a:	781b      	ldrb	r3, [r3, #0]
    af1c:	7253      	strb	r3, [r2, #9]
			break;
    af1e:	e00b      	b.n	af38 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    af20:	4a08      	ldr	r2, [pc, #32]	; (af44 <system_apb_clock_set_divider+0x50>)
    af22:	1dbb      	adds	r3, r7, #6
    af24:	781b      	ldrb	r3, [r3, #0]
    af26:	7293      	strb	r3, [r2, #10]
			break;
    af28:	e006      	b.n	af38 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    af2a:	4a06      	ldr	r2, [pc, #24]	; (af44 <system_apb_clock_set_divider+0x50>)
    af2c:	1dbb      	adds	r3, r7, #6
    af2e:	781b      	ldrb	r3, [r3, #0]
    af30:	72d3      	strb	r3, [r2, #11]
			break;
    af32:	e001      	b.n	af38 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    af34:	2317      	movs	r3, #23
    af36:	e000      	b.n	af3a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    af38:	2300      	movs	r3, #0
}
    af3a:	0018      	movs	r0, r3
    af3c:	46bd      	mov	sp, r7
    af3e:	b002      	add	sp, #8
    af40:	bd80      	pop	{r7, pc}
    af42:	46c0      	nop			; (mov r8, r8)
    af44:	40000400 	.word	0x40000400

0000af48 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    af48:	b580      	push	{r7, lr}
    af4a:	b082      	sub	sp, #8
    af4c:	af00      	add	r7, sp, #0
    af4e:	0002      	movs	r2, r0
    af50:	1dfb      	adds	r3, r7, #7
    af52:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    af54:	4a08      	ldr	r2, [pc, #32]	; (af78 <system_flash_set_waitstates+0x30>)
    af56:	1dfb      	adds	r3, r7, #7
    af58:	781b      	ldrb	r3, [r3, #0]
    af5a:	210f      	movs	r1, #15
    af5c:	400b      	ands	r3, r1
    af5e:	b2d9      	uxtb	r1, r3
    af60:	6853      	ldr	r3, [r2, #4]
    af62:	200f      	movs	r0, #15
    af64:	4001      	ands	r1, r0
    af66:	0049      	lsls	r1, r1, #1
    af68:	201e      	movs	r0, #30
    af6a:	4383      	bics	r3, r0
    af6c:	430b      	orrs	r3, r1
    af6e:	6053      	str	r3, [r2, #4]
}
    af70:	46c0      	nop			; (mov r8, r8)
    af72:	46bd      	mov	sp, r7
    af74:	b002      	add	sp, #8
    af76:	bd80      	pop	{r7, pc}
    af78:	41004000 	.word	0x41004000

0000af7c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    af7c:	b580      	push	{r7, lr}
    af7e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    af80:	46c0      	nop			; (mov r8, r8)
    af82:	4b04      	ldr	r3, [pc, #16]	; (af94 <_system_dfll_wait_for_sync+0x18>)
    af84:	68db      	ldr	r3, [r3, #12]
    af86:	2210      	movs	r2, #16
    af88:	4013      	ands	r3, r2
    af8a:	d0fa      	beq.n	af82 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    af8c:	46c0      	nop			; (mov r8, r8)
    af8e:	46bd      	mov	sp, r7
    af90:	bd80      	pop	{r7, pc}
    af92:	46c0      	nop			; (mov r8, r8)
    af94:	40000800 	.word	0x40000800

0000af98 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    af98:	b580      	push	{r7, lr}
    af9a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    af9c:	4b0c      	ldr	r3, [pc, #48]	; (afd0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    af9e:	2202      	movs	r2, #2
    afa0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    afa2:	4b0c      	ldr	r3, [pc, #48]	; (afd4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    afa4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    afa6:	4a0a      	ldr	r2, [pc, #40]	; (afd0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    afa8:	4b0b      	ldr	r3, [pc, #44]	; (afd8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    afaa:	689b      	ldr	r3, [r3, #8]
    afac:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    afae:	4a08      	ldr	r2, [pc, #32]	; (afd0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    afb0:	4b09      	ldr	r3, [pc, #36]	; (afd8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    afb2:	685b      	ldr	r3, [r3, #4]
    afb4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    afb6:	4b06      	ldr	r3, [pc, #24]	; (afd0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    afb8:	2200      	movs	r2, #0
    afba:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    afbc:	4b05      	ldr	r3, [pc, #20]	; (afd4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    afbe:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    afc0:	4a03      	ldr	r2, [pc, #12]	; (afd0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    afc2:	4b05      	ldr	r3, [pc, #20]	; (afd8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    afc4:	681b      	ldr	r3, [r3, #0]
    afc6:	b29b      	uxth	r3, r3
    afc8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    afca:	46c0      	nop			; (mov r8, r8)
    afcc:	46bd      	mov	sp, r7
    afce:	bd80      	pop	{r7, pc}
    afd0:	40000800 	.word	0x40000800
    afd4:	0000af7d 	.word	0x0000af7d
    afd8:	2000011c 	.word	0x2000011c

0000afdc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    afdc:	b580      	push	{r7, lr}
    afde:	b082      	sub	sp, #8
    afe0:	af00      	add	r7, sp, #0
    afe2:	0002      	movs	r2, r0
    afe4:	1dfb      	adds	r3, r7, #7
    afe6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    afe8:	1dfb      	adds	r3, r7, #7
    afea:	781b      	ldrb	r3, [r3, #0]
    afec:	2b08      	cmp	r3, #8
    afee:	d840      	bhi.n	b072 <system_clock_source_get_hz+0x96>
    aff0:	009a      	lsls	r2, r3, #2
    aff2:	4b22      	ldr	r3, [pc, #136]	; (b07c <system_clock_source_get_hz+0xa0>)
    aff4:	18d3      	adds	r3, r2, r3
    aff6:	681b      	ldr	r3, [r3, #0]
    aff8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    affa:	4b21      	ldr	r3, [pc, #132]	; (b080 <system_clock_source_get_hz+0xa4>)
    affc:	691b      	ldr	r3, [r3, #16]
    affe:	e039      	b.n	b074 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    b000:	4b20      	ldr	r3, [pc, #128]	; (b084 <system_clock_source_get_hz+0xa8>)
    b002:	6a1b      	ldr	r3, [r3, #32]
    b004:	059b      	lsls	r3, r3, #22
    b006:	0f9b      	lsrs	r3, r3, #30
    b008:	b2db      	uxtb	r3, r3
    b00a:	001a      	movs	r2, r3
    b00c:	4b1e      	ldr	r3, [pc, #120]	; (b088 <system_clock_source_get_hz+0xac>)
    b00e:	40d3      	lsrs	r3, r2
    b010:	e030      	b.n	b074 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    b012:	2380      	movs	r3, #128	; 0x80
    b014:	021b      	lsls	r3, r3, #8
    b016:	e02d      	b.n	b074 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    b018:	2380      	movs	r3, #128	; 0x80
    b01a:	021b      	lsls	r3, r3, #8
    b01c:	e02a      	b.n	b074 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    b01e:	4b18      	ldr	r3, [pc, #96]	; (b080 <system_clock_source_get_hz+0xa4>)
    b020:	695b      	ldr	r3, [r3, #20]
    b022:	e027      	b.n	b074 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    b024:	4b16      	ldr	r3, [pc, #88]	; (b080 <system_clock_source_get_hz+0xa4>)
    b026:	681b      	ldr	r3, [r3, #0]
    b028:	2202      	movs	r2, #2
    b02a:	4013      	ands	r3, r2
    b02c:	d101      	bne.n	b032 <system_clock_source_get_hz+0x56>
			return 0;
    b02e:	2300      	movs	r3, #0
    b030:	e020      	b.n	b074 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    b032:	4b16      	ldr	r3, [pc, #88]	; (b08c <system_clock_source_get_hz+0xb0>)
    b034:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    b036:	4b12      	ldr	r3, [pc, #72]	; (b080 <system_clock_source_get_hz+0xa4>)
    b038:	681b      	ldr	r3, [r3, #0]
    b03a:	2204      	movs	r2, #4
    b03c:	4013      	ands	r3, r2
    b03e:	d009      	beq.n	b054 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b040:	2000      	movs	r0, #0
    b042:	4b13      	ldr	r3, [pc, #76]	; (b090 <system_clock_source_get_hz+0xb4>)
    b044:	4798      	blx	r3
    b046:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    b048:	4b0d      	ldr	r3, [pc, #52]	; (b080 <system_clock_source_get_hz+0xa4>)
    b04a:	689b      	ldr	r3, [r3, #8]
    b04c:	041b      	lsls	r3, r3, #16
    b04e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    b050:	4353      	muls	r3, r2
    b052:	e00f      	b.n	b074 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    b054:	4b0f      	ldr	r3, [pc, #60]	; (b094 <system_clock_source_get_hz+0xb8>)
    b056:	e00d      	b.n	b074 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    b058:	4a0a      	ldr	r2, [pc, #40]	; (b084 <system_clock_source_get_hz+0xa8>)
    b05a:	2350      	movs	r3, #80	; 0x50
    b05c:	5cd3      	ldrb	r3, [r2, r3]
    b05e:	b2db      	uxtb	r3, r3
    b060:	001a      	movs	r2, r3
    b062:	2304      	movs	r3, #4
    b064:	4013      	ands	r3, r2
    b066:	d101      	bne.n	b06c <system_clock_source_get_hz+0x90>
			return 0;
    b068:	2300      	movs	r3, #0
    b06a:	e003      	b.n	b074 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    b06c:	4b04      	ldr	r3, [pc, #16]	; (b080 <system_clock_source_get_hz+0xa4>)
    b06e:	68db      	ldr	r3, [r3, #12]
    b070:	e000      	b.n	b074 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    b072:	2300      	movs	r3, #0
	}
}
    b074:	0018      	movs	r0, r3
    b076:	46bd      	mov	sp, r7
    b078:	b002      	add	sp, #8
    b07a:	bd80      	pop	{r7, pc}
    b07c:	00013720 	.word	0x00013720
    b080:	2000011c 	.word	0x2000011c
    b084:	40000800 	.word	0x40000800
    b088:	007a1200 	.word	0x007a1200
    b08c:	0000af7d 	.word	0x0000af7d
    b090:	0000bbe9 	.word	0x0000bbe9
    b094:	02dc6c00 	.word	0x02dc6c00

0000b098 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    b098:	b580      	push	{r7, lr}
    b09a:	b084      	sub	sp, #16
    b09c:	af00      	add	r7, sp, #0
    b09e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    b0a0:	4b1a      	ldr	r3, [pc, #104]	; (b10c <system_clock_source_osc8m_set_config+0x74>)
    b0a2:	6a1b      	ldr	r3, [r3, #32]
    b0a4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    b0a6:	687b      	ldr	r3, [r7, #4]
    b0a8:	781b      	ldrb	r3, [r3, #0]
    b0aa:	1c1a      	adds	r2, r3, #0
    b0ac:	2303      	movs	r3, #3
    b0ae:	4013      	ands	r3, r2
    b0b0:	b2da      	uxtb	r2, r3
    b0b2:	230d      	movs	r3, #13
    b0b4:	18fb      	adds	r3, r7, r3
    b0b6:	2103      	movs	r1, #3
    b0b8:	400a      	ands	r2, r1
    b0ba:	0010      	movs	r0, r2
    b0bc:	781a      	ldrb	r2, [r3, #0]
    b0be:	2103      	movs	r1, #3
    b0c0:	438a      	bics	r2, r1
    b0c2:	1c11      	adds	r1, r2, #0
    b0c4:	1c02      	adds	r2, r0, #0
    b0c6:	430a      	orrs	r2, r1
    b0c8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	789a      	ldrb	r2, [r3, #2]
    b0ce:	230c      	movs	r3, #12
    b0d0:	18fb      	adds	r3, r7, r3
    b0d2:	01d0      	lsls	r0, r2, #7
    b0d4:	781a      	ldrb	r2, [r3, #0]
    b0d6:	217f      	movs	r1, #127	; 0x7f
    b0d8:	400a      	ands	r2, r1
    b0da:	1c11      	adds	r1, r2, #0
    b0dc:	1c02      	adds	r2, r0, #0
    b0de:	430a      	orrs	r2, r1
    b0e0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b0e2:	687b      	ldr	r3, [r7, #4]
    b0e4:	785a      	ldrb	r2, [r3, #1]
    b0e6:	230c      	movs	r3, #12
    b0e8:	18fb      	adds	r3, r7, r3
    b0ea:	2101      	movs	r1, #1
    b0ec:	400a      	ands	r2, r1
    b0ee:	0190      	lsls	r0, r2, #6
    b0f0:	781a      	ldrb	r2, [r3, #0]
    b0f2:	2140      	movs	r1, #64	; 0x40
    b0f4:	438a      	bics	r2, r1
    b0f6:	1c11      	adds	r1, r2, #0
    b0f8:	1c02      	adds	r2, r0, #0
    b0fa:	430a      	orrs	r2, r1
    b0fc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    b0fe:	4b03      	ldr	r3, [pc, #12]	; (b10c <system_clock_source_osc8m_set_config+0x74>)
    b100:	68fa      	ldr	r2, [r7, #12]
    b102:	621a      	str	r2, [r3, #32]
}
    b104:	46c0      	nop			; (mov r8, r8)
    b106:	46bd      	mov	sp, r7
    b108:	b004      	add	sp, #16
    b10a:	bd80      	pop	{r7, pc}
    b10c:	40000800 	.word	0x40000800

0000b110 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    b110:	b580      	push	{r7, lr}
    b112:	b084      	sub	sp, #16
    b114:	af00      	add	r7, sp, #0
    b116:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    b118:	4a43      	ldr	r2, [pc, #268]	; (b228 <system_clock_source_xosc32k_set_config+0x118>)
    b11a:	230c      	movs	r3, #12
    b11c:	18fb      	adds	r3, r7, r3
    b11e:	8a92      	ldrh	r2, [r2, #20]
    b120:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    b122:	687b      	ldr	r3, [r7, #4]
    b124:	785b      	ldrb	r3, [r3, #1]
    b126:	1c1a      	adds	r2, r3, #0
    b128:	2307      	movs	r3, #7
    b12a:	4013      	ands	r3, r2
    b12c:	b2da      	uxtb	r2, r3
    b12e:	230c      	movs	r3, #12
    b130:	18fb      	adds	r3, r7, r3
    b132:	2107      	movs	r1, #7
    b134:	400a      	ands	r2, r1
    b136:	0010      	movs	r0, r2
    b138:	785a      	ldrb	r2, [r3, #1]
    b13a:	2107      	movs	r1, #7
    b13c:	438a      	bics	r2, r1
    b13e:	1c11      	adds	r1, r2, #0
    b140:	1c02      	adds	r2, r0, #0
    b142:	430a      	orrs	r2, r1
    b144:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    b146:	687b      	ldr	r3, [r7, #4]
    b148:	781b      	ldrb	r3, [r3, #0]
    b14a:	2b00      	cmp	r3, #0
    b14c:	d106      	bne.n	b15c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    b14e:	230c      	movs	r3, #12
    b150:	18fb      	adds	r3, r7, r3
    b152:	781a      	ldrb	r2, [r3, #0]
    b154:	2104      	movs	r1, #4
    b156:	430a      	orrs	r2, r1
    b158:	701a      	strb	r2, [r3, #0]
    b15a:	e005      	b.n	b168 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    b15c:	230c      	movs	r3, #12
    b15e:	18fb      	adds	r3, r7, r3
    b160:	781a      	ldrb	r2, [r3, #0]
    b162:	2104      	movs	r1, #4
    b164:	438a      	bics	r2, r1
    b166:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    b168:	687b      	ldr	r3, [r7, #4]
    b16a:	789a      	ldrb	r2, [r3, #2]
    b16c:	230c      	movs	r3, #12
    b16e:	18fb      	adds	r3, r7, r3
    b170:	2101      	movs	r1, #1
    b172:	400a      	ands	r2, r1
    b174:	0150      	lsls	r0, r2, #5
    b176:	781a      	ldrb	r2, [r3, #0]
    b178:	2120      	movs	r1, #32
    b17a:	438a      	bics	r2, r1
    b17c:	1c11      	adds	r1, r2, #0
    b17e:	1c02      	adds	r2, r0, #0
    b180:	430a      	orrs	r2, r1
    b182:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    b184:	687b      	ldr	r3, [r7, #4]
    b186:	78da      	ldrb	r2, [r3, #3]
    b188:	230c      	movs	r3, #12
    b18a:	18fb      	adds	r3, r7, r3
    b18c:	2101      	movs	r1, #1
    b18e:	400a      	ands	r2, r1
    b190:	0110      	lsls	r0, r2, #4
    b192:	781a      	ldrb	r2, [r3, #0]
    b194:	2110      	movs	r1, #16
    b196:	438a      	bics	r2, r1
    b198:	1c11      	adds	r1, r2, #0
    b19a:	1c02      	adds	r2, r0, #0
    b19c:	430a      	orrs	r2, r1
    b19e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    b1a0:	687b      	ldr	r3, [r7, #4]
    b1a2:	791a      	ldrb	r2, [r3, #4]
    b1a4:	230c      	movs	r3, #12
    b1a6:	18fb      	adds	r3, r7, r3
    b1a8:	2101      	movs	r1, #1
    b1aa:	400a      	ands	r2, r1
    b1ac:	00d0      	lsls	r0, r2, #3
    b1ae:	781a      	ldrb	r2, [r3, #0]
    b1b0:	2108      	movs	r1, #8
    b1b2:	438a      	bics	r2, r1
    b1b4:	1c11      	adds	r1, r2, #0
    b1b6:	1c02      	adds	r2, r0, #0
    b1b8:	430a      	orrs	r2, r1
    b1ba:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    b1bc:	687b      	ldr	r3, [r7, #4]
    b1be:	7b5a      	ldrb	r2, [r3, #13]
    b1c0:	230c      	movs	r3, #12
    b1c2:	18fb      	adds	r3, r7, r3
    b1c4:	01d0      	lsls	r0, r2, #7
    b1c6:	781a      	ldrb	r2, [r3, #0]
    b1c8:	217f      	movs	r1, #127	; 0x7f
    b1ca:	400a      	ands	r2, r1
    b1cc:	1c11      	adds	r1, r2, #0
    b1ce:	1c02      	adds	r2, r0, #0
    b1d0:	430a      	orrs	r2, r1
    b1d2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    b1d4:	687b      	ldr	r3, [r7, #4]
    b1d6:	7b1a      	ldrb	r2, [r3, #12]
    b1d8:	230c      	movs	r3, #12
    b1da:	18fb      	adds	r3, r7, r3
    b1dc:	2101      	movs	r1, #1
    b1de:	400a      	ands	r2, r1
    b1e0:	0190      	lsls	r0, r2, #6
    b1e2:	781a      	ldrb	r2, [r3, #0]
    b1e4:	2140      	movs	r1, #64	; 0x40
    b1e6:	438a      	bics	r2, r1
    b1e8:	1c11      	adds	r1, r2, #0
    b1ea:	1c02      	adds	r2, r0, #0
    b1ec:	430a      	orrs	r2, r1
    b1ee:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    b1f0:	687b      	ldr	r3, [r7, #4]
    b1f2:	7b9a      	ldrb	r2, [r3, #14]
    b1f4:	230c      	movs	r3, #12
    b1f6:	18fb      	adds	r3, r7, r3
    b1f8:	2101      	movs	r1, #1
    b1fa:	400a      	ands	r2, r1
    b1fc:	0110      	lsls	r0, r2, #4
    b1fe:	785a      	ldrb	r2, [r3, #1]
    b200:	2110      	movs	r1, #16
    b202:	438a      	bics	r2, r1
    b204:	1c11      	adds	r1, r2, #0
    b206:	1c02      	adds	r2, r0, #0
    b208:	430a      	orrs	r2, r1
    b20a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    b20c:	687b      	ldr	r3, [r7, #4]
    b20e:	689a      	ldr	r2, [r3, #8]
    b210:	4b06      	ldr	r3, [pc, #24]	; (b22c <system_clock_source_xosc32k_set_config+0x11c>)
    b212:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    b214:	4a04      	ldr	r2, [pc, #16]	; (b228 <system_clock_source_xosc32k_set_config+0x118>)
    b216:	230c      	movs	r3, #12
    b218:	18fb      	adds	r3, r7, r3
    b21a:	881b      	ldrh	r3, [r3, #0]
    b21c:	8293      	strh	r3, [r2, #20]
}
    b21e:	46c0      	nop			; (mov r8, r8)
    b220:	46bd      	mov	sp, r7
    b222:	b004      	add	sp, #16
    b224:	bd80      	pop	{r7, pc}
    b226:	46c0      	nop			; (mov r8, r8)
    b228:	40000800 	.word	0x40000800
    b22c:	2000011c 	.word	0x2000011c

0000b230 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    b230:	b580      	push	{r7, lr}
    b232:	b082      	sub	sp, #8
    b234:	af00      	add	r7, sp, #0
    b236:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    b238:	687b      	ldr	r3, [r7, #4]
    b23a:	7a1b      	ldrb	r3, [r3, #8]
    b23c:	029b      	lsls	r3, r3, #10
    b23e:	041b      	lsls	r3, r3, #16
    b240:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    b242:	687b      	ldr	r3, [r7, #4]
    b244:	895b      	ldrh	r3, [r3, #10]
    b246:	059b      	lsls	r3, r3, #22
    b248:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    b24a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    b24c:	4b2a      	ldr	r3, [pc, #168]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b24e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    b250:	687b      	ldr	r3, [r7, #4]
    b252:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    b254:	687b      	ldr	r3, [r7, #4]
    b256:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    b258:	4313      	orrs	r3, r2
    b25a:	b2db      	uxtb	r3, r3
    b25c:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    b25e:	687b      	ldr	r3, [r7, #4]
    b260:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    b262:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    b264:	687a      	ldr	r2, [r7, #4]
    b266:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    b268:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    b26a:	687b      	ldr	r3, [r7, #4]
    b26c:	785b      	ldrb	r3, [r3, #1]
    b26e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    b270:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    b272:	4b21      	ldr	r3, [pc, #132]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b274:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    b276:	687b      	ldr	r3, [r7, #4]
    b278:	781b      	ldrb	r3, [r3, #0]
    b27a:	2b04      	cmp	r3, #4
    b27c:	d116      	bne.n	b2ac <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b27e:	687b      	ldr	r3, [r7, #4]
    b280:	7b1b      	ldrb	r3, [r3, #12]
    b282:	069b      	lsls	r3, r3, #26
    b284:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b286:	687b      	ldr	r3, [r7, #4]
    b288:	89db      	ldrh	r3, [r3, #14]
    b28a:	041b      	lsls	r3, r3, #16
    b28c:	0019      	movs	r1, r3
    b28e:	4b1b      	ldr	r3, [pc, #108]	; (b2fc <system_clock_source_dfll_set_config+0xcc>)
    b290:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b292:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    b294:	687a      	ldr	r2, [r7, #4]
    b296:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b298:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    b29a:	4b17      	ldr	r3, [pc, #92]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b29c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    b29e:	4b16      	ldr	r3, [pc, #88]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b2a0:	681b      	ldr	r3, [r3, #0]
    b2a2:	687a      	ldr	r2, [r7, #4]
    b2a4:	7812      	ldrb	r2, [r2, #0]
    b2a6:	431a      	orrs	r2, r3
    b2a8:	4b13      	ldr	r3, [pc, #76]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b2aa:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    b2ac:	687b      	ldr	r3, [r7, #4]
    b2ae:	781b      	ldrb	r3, [r3, #0]
    b2b0:	2b20      	cmp	r3, #32
    b2b2:	d11c      	bne.n	b2ee <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	7b1b      	ldrb	r3, [r3, #12]
    b2b8:	069b      	lsls	r3, r3, #26
    b2ba:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b2bc:	687b      	ldr	r3, [r7, #4]
    b2be:	89db      	ldrh	r3, [r3, #14]
    b2c0:	041b      	lsls	r3, r3, #16
    b2c2:	0019      	movs	r1, r3
    b2c4:	4b0d      	ldr	r3, [pc, #52]	; (b2fc <system_clock_source_dfll_set_config+0xcc>)
    b2c6:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    b2c8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    b2ca:	687a      	ldr	r2, [r7, #4]
    b2cc:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    b2ce:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    b2d0:	4b09      	ldr	r3, [pc, #36]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b2d2:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    b2d4:	4b08      	ldr	r3, [pc, #32]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b2d6:	681b      	ldr	r3, [r3, #0]
    b2d8:	687a      	ldr	r2, [r7, #4]
    b2da:	7812      	ldrb	r2, [r2, #0]
    b2dc:	2104      	movs	r1, #4
    b2de:	430a      	orrs	r2, r1
    b2e0:	b2d2      	uxtb	r2, r2
    b2e2:	4313      	orrs	r3, r2
    b2e4:	2280      	movs	r2, #128	; 0x80
    b2e6:	00d2      	lsls	r2, r2, #3
    b2e8:	431a      	orrs	r2, r3
    b2ea:	4b03      	ldr	r3, [pc, #12]	; (b2f8 <system_clock_source_dfll_set_config+0xc8>)
    b2ec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    b2ee:	46c0      	nop			; (mov r8, r8)
    b2f0:	46bd      	mov	sp, r7
    b2f2:	b002      	add	sp, #8
    b2f4:	bd80      	pop	{r7, pc}
    b2f6:	46c0      	nop			; (mov r8, r8)
    b2f8:	2000011c 	.word	0x2000011c
    b2fc:	03ff0000 	.word	0x03ff0000

0000b300 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    b300:	b580      	push	{r7, lr}
    b302:	b082      	sub	sp, #8
    b304:	af00      	add	r7, sp, #0
    b306:	0002      	movs	r2, r0
    b308:	1dfb      	adds	r3, r7, #7
    b30a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    b30c:	1dfb      	adds	r3, r7, #7
    b30e:	781b      	ldrb	r3, [r3, #0]
    b310:	2b08      	cmp	r3, #8
    b312:	d83b      	bhi.n	b38c <system_clock_source_enable+0x8c>
    b314:	009a      	lsls	r2, r3, #2
    b316:	4b21      	ldr	r3, [pc, #132]	; (b39c <system_clock_source_enable+0x9c>)
    b318:	18d3      	adds	r3, r2, r3
    b31a:	681b      	ldr	r3, [r3, #0]
    b31c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    b31e:	4b20      	ldr	r3, [pc, #128]	; (b3a0 <system_clock_source_enable+0xa0>)
    b320:	4a1f      	ldr	r2, [pc, #124]	; (b3a0 <system_clock_source_enable+0xa0>)
    b322:	6a12      	ldr	r2, [r2, #32]
    b324:	2102      	movs	r1, #2
    b326:	430a      	orrs	r2, r1
    b328:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    b32a:	2300      	movs	r3, #0
    b32c:	e031      	b.n	b392 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    b32e:	4b1c      	ldr	r3, [pc, #112]	; (b3a0 <system_clock_source_enable+0xa0>)
    b330:	4a1b      	ldr	r2, [pc, #108]	; (b3a0 <system_clock_source_enable+0xa0>)
    b332:	6992      	ldr	r2, [r2, #24]
    b334:	2102      	movs	r1, #2
    b336:	430a      	orrs	r2, r1
    b338:	619a      	str	r2, [r3, #24]
		break;
    b33a:	e029      	b.n	b390 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    b33c:	4a18      	ldr	r2, [pc, #96]	; (b3a0 <system_clock_source_enable+0xa0>)
    b33e:	4b18      	ldr	r3, [pc, #96]	; (b3a0 <system_clock_source_enable+0xa0>)
    b340:	8a1b      	ldrh	r3, [r3, #16]
    b342:	b29b      	uxth	r3, r3
    b344:	2102      	movs	r1, #2
    b346:	430b      	orrs	r3, r1
    b348:	b29b      	uxth	r3, r3
    b34a:	8213      	strh	r3, [r2, #16]
		break;
    b34c:	e020      	b.n	b390 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    b34e:	4a14      	ldr	r2, [pc, #80]	; (b3a0 <system_clock_source_enable+0xa0>)
    b350:	4b13      	ldr	r3, [pc, #76]	; (b3a0 <system_clock_source_enable+0xa0>)
    b352:	8a9b      	ldrh	r3, [r3, #20]
    b354:	b29b      	uxth	r3, r3
    b356:	2102      	movs	r1, #2
    b358:	430b      	orrs	r3, r1
    b35a:	b29b      	uxth	r3, r3
    b35c:	8293      	strh	r3, [r2, #20]
		break;
    b35e:	e017      	b.n	b390 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    b360:	4b10      	ldr	r3, [pc, #64]	; (b3a4 <system_clock_source_enable+0xa4>)
    b362:	681b      	ldr	r3, [r3, #0]
    b364:	2202      	movs	r2, #2
    b366:	431a      	orrs	r2, r3
    b368:	4b0e      	ldr	r3, [pc, #56]	; (b3a4 <system_clock_source_enable+0xa4>)
    b36a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    b36c:	4b0e      	ldr	r3, [pc, #56]	; (b3a8 <system_clock_source_enable+0xa8>)
    b36e:	4798      	blx	r3
		break;
    b370:	e00e      	b.n	b390 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    b372:	4a0b      	ldr	r2, [pc, #44]	; (b3a0 <system_clock_source_enable+0xa0>)
    b374:	490a      	ldr	r1, [pc, #40]	; (b3a0 <system_clock_source_enable+0xa0>)
    b376:	2344      	movs	r3, #68	; 0x44
    b378:	5ccb      	ldrb	r3, [r1, r3]
    b37a:	b2db      	uxtb	r3, r3
    b37c:	2102      	movs	r1, #2
    b37e:	430b      	orrs	r3, r1
    b380:	b2d9      	uxtb	r1, r3
    b382:	2344      	movs	r3, #68	; 0x44
    b384:	54d1      	strb	r1, [r2, r3]
		break;
    b386:	e003      	b.n	b390 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    b388:	2300      	movs	r3, #0
    b38a:	e002      	b.n	b392 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    b38c:	2317      	movs	r3, #23
    b38e:	e000      	b.n	b392 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    b390:	2300      	movs	r3, #0
}
    b392:	0018      	movs	r0, r3
    b394:	46bd      	mov	sp, r7
    b396:	b002      	add	sp, #8
    b398:	bd80      	pop	{r7, pc}
    b39a:	46c0      	nop			; (mov r8, r8)
    b39c:	00013744 	.word	0x00013744
    b3a0:	40000800 	.word	0x40000800
    b3a4:	2000011c 	.word	0x2000011c
    b3a8:	0000af99 	.word	0x0000af99

0000b3ac <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    b3ac:	b580      	push	{r7, lr}
    b3ae:	b084      	sub	sp, #16
    b3b0:	af00      	add	r7, sp, #0
    b3b2:	0002      	movs	r2, r0
    b3b4:	1dfb      	adds	r3, r7, #7
    b3b6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    b3b8:	2300      	movs	r3, #0
    b3ba:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    b3bc:	1dfb      	adds	r3, r7, #7
    b3be:	781b      	ldrb	r3, [r3, #0]
    b3c0:	2b08      	cmp	r3, #8
    b3c2:	d821      	bhi.n	b408 <system_clock_source_is_ready+0x5c>
    b3c4:	009a      	lsls	r2, r3, #2
    b3c6:	4b18      	ldr	r3, [pc, #96]	; (b428 <system_clock_source_is_ready+0x7c>)
    b3c8:	18d3      	adds	r3, r2, r3
    b3ca:	681b      	ldr	r3, [r3, #0]
    b3cc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    b3ce:	2308      	movs	r3, #8
    b3d0:	60fb      	str	r3, [r7, #12]
		break;
    b3d2:	e01b      	b.n	b40c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    b3d4:	2304      	movs	r3, #4
    b3d6:	60fb      	str	r3, [r7, #12]
		break;
    b3d8:	e018      	b.n	b40c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    b3da:	2301      	movs	r3, #1
    b3dc:	60fb      	str	r3, [r7, #12]
		break;
    b3de:	e015      	b.n	b40c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    b3e0:	2302      	movs	r3, #2
    b3e2:	60fb      	str	r3, [r7, #12]
		break;
    b3e4:	e012      	b.n	b40c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    b3e6:	23d0      	movs	r3, #208	; 0xd0
    b3e8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    b3ea:	e00f      	b.n	b40c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    b3ec:	4a0f      	ldr	r2, [pc, #60]	; (b42c <system_clock_source_is_ready+0x80>)
    b3ee:	2350      	movs	r3, #80	; 0x50
    b3f0:	5cd3      	ldrb	r3, [r2, r3]
    b3f2:	b2db      	uxtb	r3, r3
    b3f4:	001a      	movs	r2, r3
    b3f6:	2303      	movs	r3, #3
    b3f8:	4013      	ands	r3, r2
    b3fa:	3b03      	subs	r3, #3
    b3fc:	425a      	negs	r2, r3
    b3fe:	4153      	adcs	r3, r2
    b400:	b2db      	uxtb	r3, r3
    b402:	e00c      	b.n	b41e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    b404:	2301      	movs	r3, #1
    b406:	e00a      	b.n	b41e <system_clock_source_is_ready+0x72>

	default:
		return false;
    b408:	2300      	movs	r3, #0
    b40a:	e008      	b.n	b41e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    b40c:	4b07      	ldr	r3, [pc, #28]	; (b42c <system_clock_source_is_ready+0x80>)
    b40e:	68db      	ldr	r3, [r3, #12]
    b410:	68fa      	ldr	r2, [r7, #12]
    b412:	401a      	ands	r2, r3
    b414:	68fb      	ldr	r3, [r7, #12]
    b416:	1ad3      	subs	r3, r2, r3
    b418:	425a      	negs	r2, r3
    b41a:	4153      	adcs	r3, r2
    b41c:	b2db      	uxtb	r3, r3
}
    b41e:	0018      	movs	r0, r3
    b420:	46bd      	mov	sp, r7
    b422:	b004      	add	sp, #16
    b424:	bd80      	pop	{r7, pc}
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	00013768 	.word	0x00013768
    b42c:	40000800 	.word	0x40000800

0000b430 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    b430:	b580      	push	{r7, lr}
    b432:	b082      	sub	sp, #8
    b434:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    b436:	003b      	movs	r3, r7
    b438:	2202      	movs	r2, #2
    b43a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b43c:	2300      	movs	r3, #0
    b43e:	607b      	str	r3, [r7, #4]
    b440:	e009      	b.n	b456 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    b442:	687b      	ldr	r3, [r7, #4]
    b444:	b2db      	uxtb	r3, r3
    b446:	003a      	movs	r2, r7
    b448:	0011      	movs	r1, r2
    b44a:	0018      	movs	r0, r3
    b44c:	4b05      	ldr	r3, [pc, #20]	; (b464 <_switch_peripheral_gclk+0x34>)
    b44e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    b450:	687b      	ldr	r3, [r7, #4]
    b452:	3301      	adds	r3, #1
    b454:	607b      	str	r3, [r7, #4]
    b456:	687b      	ldr	r3, [r7, #4]
    b458:	2b24      	cmp	r3, #36	; 0x24
    b45a:	d9f2      	bls.n	b442 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    b45c:	46c0      	nop			; (mov r8, r8)
    b45e:	46bd      	mov	sp, r7
    b460:	b002      	add	sp, #8
    b462:	bd80      	pop	{r7, pc}
    b464:	0000bac5 	.word	0x0000bac5

0000b468 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    b468:	b580      	push	{r7, lr}
    b46a:	b0aa      	sub	sp, #168	; 0xa8
    b46c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    b46e:	4bb4      	ldr	r3, [pc, #720]	; (b740 <system_clock_init+0x2d8>)
    b470:	22c2      	movs	r2, #194	; 0xc2
    b472:	00d2      	lsls	r2, r2, #3
    b474:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    b476:	2002      	movs	r0, #2
    b478:	4bb2      	ldr	r3, [pc, #712]	; (b744 <system_clock_init+0x2dc>)
    b47a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    b47c:	4bb2      	ldr	r3, [pc, #712]	; (b748 <system_clock_init+0x2e0>)
    b47e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    b480:	2394      	movs	r3, #148	; 0x94
    b482:	18fb      	adds	r3, r7, r3
    b484:	0018      	movs	r0, r3
    b486:	4bb1      	ldr	r3, [pc, #708]	; (b74c <system_clock_init+0x2e4>)
    b488:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    b48a:	2394      	movs	r3, #148	; 0x94
    b48c:	18fb      	adds	r3, r7, r3
    b48e:	2280      	movs	r2, #128	; 0x80
    b490:	0212      	lsls	r2, r2, #8
    b492:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    b494:	2394      	movs	r3, #148	; 0x94
    b496:	18fb      	adds	r3, r7, r3
    b498:	2200      	movs	r2, #0
    b49a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    b49c:	2394      	movs	r3, #148	; 0x94
    b49e:	18fb      	adds	r3, r7, r3
    b4a0:	2203      	movs	r2, #3
    b4a2:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    b4a4:	2394      	movs	r3, #148	; 0x94
    b4a6:	18fb      	adds	r3, r7, r3
    b4a8:	2200      	movs	r2, #0
    b4aa:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    b4ac:	2394      	movs	r3, #148	; 0x94
    b4ae:	18fb      	adds	r3, r7, r3
    b4b0:	2200      	movs	r2, #0
    b4b2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    b4b4:	2394      	movs	r3, #148	; 0x94
    b4b6:	18fb      	adds	r3, r7, r3
    b4b8:	2201      	movs	r2, #1
    b4ba:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    b4bc:	2394      	movs	r3, #148	; 0x94
    b4be:	18fb      	adds	r3, r7, r3
    b4c0:	2200      	movs	r2, #0
    b4c2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    b4c4:	2394      	movs	r3, #148	; 0x94
    b4c6:	18fb      	adds	r3, r7, r3
    b4c8:	2200      	movs	r2, #0
    b4ca:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    b4cc:	2394      	movs	r3, #148	; 0x94
    b4ce:	18fb      	adds	r3, r7, r3
    b4d0:	0018      	movs	r0, r3
    b4d2:	4b9f      	ldr	r3, [pc, #636]	; (b750 <system_clock_init+0x2e8>)
    b4d4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    b4d6:	2005      	movs	r0, #5
    b4d8:	4b9e      	ldr	r3, [pc, #632]	; (b754 <system_clock_init+0x2ec>)
    b4da:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    b4dc:	46c0      	nop			; (mov r8, r8)
    b4de:	2005      	movs	r0, #5
    b4e0:	4b9d      	ldr	r3, [pc, #628]	; (b758 <system_clock_init+0x2f0>)
    b4e2:	4798      	blx	r3
    b4e4:	0003      	movs	r3, r0
    b4e6:	001a      	movs	r2, r3
    b4e8:	2301      	movs	r3, #1
    b4ea:	4053      	eors	r3, r2
    b4ec:	b2db      	uxtb	r3, r3
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d1f5      	bne.n	b4de <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    b4f2:	4a93      	ldr	r2, [pc, #588]	; (b740 <system_clock_init+0x2d8>)
    b4f4:	8a93      	ldrh	r3, [r2, #20]
    b4f6:	2180      	movs	r1, #128	; 0x80
    b4f8:	430b      	orrs	r3, r1
    b4fa:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    b4fc:	2380      	movs	r3, #128	; 0x80
    b4fe:	18fb      	adds	r3, r7, r3
    b500:	0018      	movs	r0, r3
    b502:	4b96      	ldr	r3, [pc, #600]	; (b75c <system_clock_init+0x2f4>)
    b504:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    b506:	2380      	movs	r3, #128	; 0x80
    b508:	18fb      	adds	r3, r7, r3
    b50a:	2204      	movs	r2, #4
    b50c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    b50e:	2380      	movs	r3, #128	; 0x80
    b510:	18fb      	adds	r3, r7, r3
    b512:	2200      	movs	r2, #0
    b514:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    b516:	4b92      	ldr	r3, [pc, #584]	; (b760 <system_clock_init+0x2f8>)
    b518:	681b      	ldr	r3, [r3, #0]
    b51a:	0e9b      	lsrs	r3, r3, #26
    b51c:	22a4      	movs	r2, #164	; 0xa4
    b51e:	18ba      	adds	r2, r7, r2
    b520:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    b522:	23a4      	movs	r3, #164	; 0xa4
    b524:	18fb      	adds	r3, r7, r3
    b526:	681b      	ldr	r3, [r3, #0]
    b528:	2b3f      	cmp	r3, #63	; 0x3f
    b52a:	d103      	bne.n	b534 <system_clock_init+0xcc>
		coarse = 0x1f;
    b52c:	231f      	movs	r3, #31
    b52e:	22a4      	movs	r2, #164	; 0xa4
    b530:	18ba      	adds	r2, r7, r2
    b532:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    b534:	23a4      	movs	r3, #164	; 0xa4
    b536:	18fb      	adds	r3, r7, r3
    b538:	681b      	ldr	r3, [r3, #0]
    b53a:	b2da      	uxtb	r2, r3
    b53c:	2380      	movs	r3, #128	; 0x80
    b53e:	18fb      	adds	r3, r7, r3
    b540:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    b542:	2380      	movs	r3, #128	; 0x80
    b544:	18fb      	adds	r3, r7, r3
    b546:	2200      	movs	r2, #0
    b548:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    b54a:	2380      	movs	r3, #128	; 0x80
    b54c:	18fb      	adds	r3, r7, r3
    b54e:	2200      	movs	r2, #0
    b550:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    b552:	2380      	movs	r3, #128	; 0x80
    b554:	18fb      	adds	r3, r7, r3
    b556:	2200      	movs	r2, #0
    b558:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    b55a:	2380      	movs	r3, #128	; 0x80
    b55c:	18fb      	adds	r3, r7, r3
    b55e:	2200      	movs	r2, #0
    b560:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    b562:	2380      	movs	r3, #128	; 0x80
    b564:	18fb      	adds	r3, r7, r3
    b566:	4a7f      	ldr	r2, [pc, #508]	; (b764 <system_clock_init+0x2fc>)
    b568:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    b56a:	2380      	movs	r3, #128	; 0x80
    b56c:	18fb      	adds	r3, r7, r3
    b56e:	2207      	movs	r2, #7
    b570:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    b572:	2380      	movs	r3, #128	; 0x80
    b574:	18fb      	adds	r3, r7, r3
    b576:	223f      	movs	r2, #63	; 0x3f
    b578:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    b57a:	2380      	movs	r3, #128	; 0x80
    b57c:	18fb      	adds	r3, r7, r3
    b57e:	0018      	movs	r0, r3
    b580:	4b79      	ldr	r3, [pc, #484]	; (b768 <system_clock_init+0x300>)
    b582:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    b584:	237c      	movs	r3, #124	; 0x7c
    b586:	18fb      	adds	r3, r7, r3
    b588:	0018      	movs	r0, r3
    b58a:	4b78      	ldr	r3, [pc, #480]	; (b76c <system_clock_init+0x304>)
    b58c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    b58e:	237c      	movs	r3, #124	; 0x7c
    b590:	18fb      	adds	r3, r7, r3
    b592:	2200      	movs	r2, #0
    b594:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    b596:	237c      	movs	r3, #124	; 0x7c
    b598:	18fb      	adds	r3, r7, r3
    b59a:	2201      	movs	r2, #1
    b59c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    b59e:	237c      	movs	r3, #124	; 0x7c
    b5a0:	18fb      	adds	r3, r7, r3
    b5a2:	2200      	movs	r2, #0
    b5a4:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    b5a6:	237c      	movs	r3, #124	; 0x7c
    b5a8:	18fb      	adds	r3, r7, r3
    b5aa:	0018      	movs	r0, r3
    b5ac:	4b70      	ldr	r3, [pc, #448]	; (b770 <system_clock_init+0x308>)
    b5ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    b5b0:	2006      	movs	r0, #6
    b5b2:	4b68      	ldr	r3, [pc, #416]	; (b754 <system_clock_init+0x2ec>)
    b5b4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    b5b6:	4b6f      	ldr	r3, [pc, #444]	; (b774 <system_clock_init+0x30c>)
    b5b8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    b5ba:	2364      	movs	r3, #100	; 0x64
    b5bc:	18fb      	adds	r3, r7, r3
    b5be:	0018      	movs	r0, r3
    b5c0:	4b6d      	ldr	r3, [pc, #436]	; (b778 <system_clock_init+0x310>)
    b5c2:	4798      	blx	r3
    b5c4:	2364      	movs	r3, #100	; 0x64
    b5c6:	18fb      	adds	r3, r7, r3
    b5c8:	2205      	movs	r2, #5
    b5ca:	701a      	strb	r2, [r3, #0]
    b5cc:	2364      	movs	r3, #100	; 0x64
    b5ce:	18fb      	adds	r3, r7, r3
    b5d0:	2201      	movs	r2, #1
    b5d2:	605a      	str	r2, [r3, #4]
    b5d4:	2364      	movs	r3, #100	; 0x64
    b5d6:	18fb      	adds	r3, r7, r3
    b5d8:	2200      	movs	r2, #0
    b5da:	721a      	strb	r2, [r3, #8]
    b5dc:	2364      	movs	r3, #100	; 0x64
    b5de:	18fb      	adds	r3, r7, r3
    b5e0:	2200      	movs	r2, #0
    b5e2:	725a      	strb	r2, [r3, #9]
    b5e4:	2364      	movs	r3, #100	; 0x64
    b5e6:	18fb      	adds	r3, r7, r3
    b5e8:	0019      	movs	r1, r3
    b5ea:	2001      	movs	r0, #1
    b5ec:	4b63      	ldr	r3, [pc, #396]	; (b77c <system_clock_init+0x314>)
    b5ee:	4798      	blx	r3
    b5f0:	2001      	movs	r0, #1
    b5f2:	4b63      	ldr	r3, [pc, #396]	; (b780 <system_clock_init+0x318>)
    b5f4:	4798      	blx	r3
    b5f6:	2340      	movs	r3, #64	; 0x40
    b5f8:	18fb      	adds	r3, r7, r3
    b5fa:	0018      	movs	r0, r3
    b5fc:	4b5e      	ldr	r3, [pc, #376]	; (b778 <system_clock_init+0x310>)
    b5fe:	4798      	blx	r3
    b600:	2340      	movs	r3, #64	; 0x40
    b602:	18fb      	adds	r3, r7, r3
    b604:	2206      	movs	r2, #6
    b606:	701a      	strb	r2, [r3, #0]
    b608:	2340      	movs	r3, #64	; 0x40
    b60a:	18fb      	adds	r3, r7, r3
    b60c:	2202      	movs	r2, #2
    b60e:	605a      	str	r2, [r3, #4]
    b610:	2340      	movs	r3, #64	; 0x40
    b612:	18fb      	adds	r3, r7, r3
    b614:	2200      	movs	r2, #0
    b616:	721a      	strb	r2, [r3, #8]
    b618:	2340      	movs	r3, #64	; 0x40
    b61a:	18fb      	adds	r3, r7, r3
    b61c:	2201      	movs	r2, #1
    b61e:	725a      	strb	r2, [r3, #9]
    b620:	2340      	movs	r3, #64	; 0x40
    b622:	18fb      	adds	r3, r7, r3
    b624:	0019      	movs	r1, r3
    b626:	2004      	movs	r0, #4
    b628:	4b54      	ldr	r3, [pc, #336]	; (b77c <system_clock_init+0x314>)
    b62a:	4798      	blx	r3
    b62c:	2004      	movs	r0, #4
    b62e:	4b54      	ldr	r3, [pc, #336]	; (b780 <system_clock_init+0x318>)
    b630:	4798      	blx	r3
    b632:	2334      	movs	r3, #52	; 0x34
    b634:	18fb      	adds	r3, r7, r3
    b636:	0018      	movs	r0, r3
    b638:	4b4f      	ldr	r3, [pc, #316]	; (b778 <system_clock_init+0x310>)
    b63a:	4798      	blx	r3
    b63c:	2334      	movs	r3, #52	; 0x34
    b63e:	18fb      	adds	r3, r7, r3
    b640:	2206      	movs	r2, #6
    b642:	701a      	strb	r2, [r3, #0]
    b644:	2334      	movs	r3, #52	; 0x34
    b646:	18fb      	adds	r3, r7, r3
    b648:	2210      	movs	r2, #16
    b64a:	605a      	str	r2, [r3, #4]
    b64c:	2334      	movs	r3, #52	; 0x34
    b64e:	18fb      	adds	r3, r7, r3
    b650:	2200      	movs	r2, #0
    b652:	721a      	strb	r2, [r3, #8]
    b654:	2334      	movs	r3, #52	; 0x34
    b656:	18fb      	adds	r3, r7, r3
    b658:	2201      	movs	r2, #1
    b65a:	725a      	strb	r2, [r3, #9]
    b65c:	2334      	movs	r3, #52	; 0x34
    b65e:	18fb      	adds	r3, r7, r3
    b660:	0019      	movs	r1, r3
    b662:	2005      	movs	r0, #5
    b664:	4b45      	ldr	r3, [pc, #276]	; (b77c <system_clock_init+0x314>)
    b666:	4798      	blx	r3
    b668:	2005      	movs	r0, #5
    b66a:	4b45      	ldr	r3, [pc, #276]	; (b780 <system_clock_init+0x318>)
    b66c:	4798      	blx	r3
    b66e:	2328      	movs	r3, #40	; 0x28
    b670:	18fb      	adds	r3, r7, r3
    b672:	0018      	movs	r0, r3
    b674:	4b40      	ldr	r3, [pc, #256]	; (b778 <system_clock_init+0x310>)
    b676:	4798      	blx	r3
    b678:	2328      	movs	r3, #40	; 0x28
    b67a:	18fb      	adds	r3, r7, r3
    b67c:	2206      	movs	r2, #6
    b67e:	701a      	strb	r2, [r3, #0]
    b680:	2328      	movs	r3, #40	; 0x28
    b682:	18fb      	adds	r3, r7, r3
    b684:	2217      	movs	r2, #23
    b686:	605a      	str	r2, [r3, #4]
    b688:	2328      	movs	r3, #40	; 0x28
    b68a:	18fb      	adds	r3, r7, r3
    b68c:	2201      	movs	r2, #1
    b68e:	721a      	strb	r2, [r3, #8]
    b690:	2328      	movs	r3, #40	; 0x28
    b692:	18fb      	adds	r3, r7, r3
    b694:	2201      	movs	r2, #1
    b696:	725a      	strb	r2, [r3, #9]
    b698:	2328      	movs	r3, #40	; 0x28
    b69a:	18fb      	adds	r3, r7, r3
    b69c:	0019      	movs	r1, r3
    b69e:	2006      	movs	r0, #6
    b6a0:	4b36      	ldr	r3, [pc, #216]	; (b77c <system_clock_init+0x314>)
    b6a2:	4798      	blx	r3
    b6a4:	2006      	movs	r0, #6
    b6a6:	4b36      	ldr	r3, [pc, #216]	; (b780 <system_clock_init+0x318>)
    b6a8:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    b6aa:	230c      	movs	r3, #12
    b6ac:	18fb      	adds	r3, r7, r3
    b6ae:	0018      	movs	r0, r3
    b6b0:	4b34      	ldr	r3, [pc, #208]	; (b784 <system_clock_init+0x31c>)
    b6b2:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    b6b4:	230c      	movs	r3, #12
    b6b6:	18fb      	adds	r3, r7, r3
    b6b8:	2201      	movs	r2, #1
    b6ba:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    b6bc:	230c      	movs	r3, #12
    b6be:	18fb      	adds	r3, r7, r3
    b6c0:	0019      	movs	r1, r3
    b6c2:	2000      	movs	r0, #0
    b6c4:	4b30      	ldr	r3, [pc, #192]	; (b788 <system_clock_init+0x320>)
    b6c6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    b6c8:	2000      	movs	r0, #0
    b6ca:	4b30      	ldr	r3, [pc, #192]	; (b78c <system_clock_init+0x324>)
    b6cc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    b6ce:	2007      	movs	r0, #7
    b6d0:	4b20      	ldr	r3, [pc, #128]	; (b754 <system_clock_init+0x2ec>)
    b6d2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    b6d4:	46c0      	nop			; (mov r8, r8)
    b6d6:	2007      	movs	r0, #7
    b6d8:	4b1f      	ldr	r3, [pc, #124]	; (b758 <system_clock_init+0x2f0>)
    b6da:	4798      	blx	r3
    b6dc:	0003      	movs	r3, r0
    b6de:	001a      	movs	r2, r3
    b6e0:	2301      	movs	r3, #1
    b6e2:	4053      	eors	r3, r2
    b6e4:	b2db      	uxtb	r3, r3
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d1f5      	bne.n	b6d6 <system_clock_init+0x26e>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    b6ea:	2000      	movs	r0, #0
    b6ec:	4b28      	ldr	r3, [pc, #160]	; (b790 <system_clock_init+0x328>)
    b6ee:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    b6f0:	2100      	movs	r1, #0
    b6f2:	2000      	movs	r0, #0
    b6f4:	4b27      	ldr	r3, [pc, #156]	; (b794 <system_clock_init+0x32c>)
    b6f6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    b6f8:	2100      	movs	r1, #0
    b6fa:	2001      	movs	r0, #1
    b6fc:	4b25      	ldr	r3, [pc, #148]	; (b794 <system_clock_init+0x32c>)
    b6fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    b700:	2100      	movs	r1, #0
    b702:	2002      	movs	r0, #2
    b704:	4b23      	ldr	r3, [pc, #140]	; (b794 <system_clock_init+0x32c>)
    b706:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    b708:	003b      	movs	r3, r7
    b70a:	0018      	movs	r0, r3
    b70c:	4b1a      	ldr	r3, [pc, #104]	; (b778 <system_clock_init+0x310>)
    b70e:	4798      	blx	r3
    b710:	003b      	movs	r3, r7
    b712:	2207      	movs	r2, #7
    b714:	701a      	strb	r2, [r3, #0]
    b716:	003b      	movs	r3, r7
    b718:	2201      	movs	r2, #1
    b71a:	605a      	str	r2, [r3, #4]
    b71c:	003b      	movs	r3, r7
    b71e:	2200      	movs	r2, #0
    b720:	721a      	strb	r2, [r3, #8]
    b722:	003b      	movs	r3, r7
    b724:	2200      	movs	r2, #0
    b726:	725a      	strb	r2, [r3, #9]
    b728:	003b      	movs	r3, r7
    b72a:	0019      	movs	r1, r3
    b72c:	2000      	movs	r0, #0
    b72e:	4b13      	ldr	r3, [pc, #76]	; (b77c <system_clock_init+0x314>)
    b730:	4798      	blx	r3
    b732:	2000      	movs	r0, #0
    b734:	4b12      	ldr	r3, [pc, #72]	; (b780 <system_clock_init+0x318>)
    b736:	4798      	blx	r3
#endif
}
    b738:	46c0      	nop			; (mov r8, r8)
    b73a:	46bd      	mov	sp, r7
    b73c:	b02a      	add	sp, #168	; 0xa8
    b73e:	bd80      	pop	{r7, pc}
    b740:	40000800 	.word	0x40000800
    b744:	0000af49 	.word	0x0000af49
    b748:	0000b431 	.word	0x0000b431
    b74c:	0000ae15 	.word	0x0000ae15
    b750:	0000b111 	.word	0x0000b111
    b754:	0000b301 	.word	0x0000b301
    b758:	0000b3ad 	.word	0x0000b3ad
    b75c:	0000ae81 	.word	0x0000ae81
    b760:	00806024 	.word	0x00806024
    b764:	000005b9 	.word	0x000005b9
    b768:	0000b231 	.word	0x0000b231
    b76c:	0000ae5d 	.word	0x0000ae5d
    b770:	0000b099 	.word	0x0000b099
    b774:	0000b83d 	.word	0x0000b83d
    b778:	0000adcd 	.word	0x0000adcd
    b77c:	0000b86d 	.word	0x0000b86d
    b780:	0000b991 	.word	0x0000b991
    b784:	0000adfd 	.word	0x0000adfd
    b788:	0000bac5 	.word	0x0000bac5
    b78c:	0000bb09 	.word	0x0000bb09
    b790:	0000aed5 	.word	0x0000aed5
    b794:	0000aef5 	.word	0x0000aef5

0000b798 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    b798:	b580      	push	{r7, lr}
    b79a:	b082      	sub	sp, #8
    b79c:	af00      	add	r7, sp, #0
    b79e:	0002      	movs	r2, r0
    b7a0:	6039      	str	r1, [r7, #0]
    b7a2:	1dfb      	adds	r3, r7, #7
    b7a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b7a6:	1dfb      	adds	r3, r7, #7
    b7a8:	781b      	ldrb	r3, [r3, #0]
    b7aa:	2b01      	cmp	r3, #1
    b7ac:	d00a      	beq.n	b7c4 <system_apb_clock_set_mask+0x2c>
    b7ae:	2b02      	cmp	r3, #2
    b7b0:	d00f      	beq.n	b7d2 <system_apb_clock_set_mask+0x3a>
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	d114      	bne.n	b7e0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    b7b6:	4b0e      	ldr	r3, [pc, #56]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7b8:	4a0d      	ldr	r2, [pc, #52]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7ba:	6991      	ldr	r1, [r2, #24]
    b7bc:	683a      	ldr	r2, [r7, #0]
    b7be:	430a      	orrs	r2, r1
    b7c0:	619a      	str	r2, [r3, #24]
			break;
    b7c2:	e00f      	b.n	b7e4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    b7c4:	4b0a      	ldr	r3, [pc, #40]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7c6:	4a0a      	ldr	r2, [pc, #40]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7c8:	69d1      	ldr	r1, [r2, #28]
    b7ca:	683a      	ldr	r2, [r7, #0]
    b7cc:	430a      	orrs	r2, r1
    b7ce:	61da      	str	r2, [r3, #28]
			break;
    b7d0:	e008      	b.n	b7e4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    b7d2:	4b07      	ldr	r3, [pc, #28]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7d4:	4a06      	ldr	r2, [pc, #24]	; (b7f0 <system_apb_clock_set_mask+0x58>)
    b7d6:	6a11      	ldr	r1, [r2, #32]
    b7d8:	683a      	ldr	r2, [r7, #0]
    b7da:	430a      	orrs	r2, r1
    b7dc:	621a      	str	r2, [r3, #32]
			break;
    b7de:	e001      	b.n	b7e4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    b7e0:	2317      	movs	r3, #23
    b7e2:	e000      	b.n	b7e6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    b7e4:	2300      	movs	r3, #0
}
    b7e6:	0018      	movs	r0, r3
    b7e8:	46bd      	mov	sp, r7
    b7ea:	b002      	add	sp, #8
    b7ec:	bd80      	pop	{r7, pc}
    b7ee:	46c0      	nop			; (mov r8, r8)
    b7f0:	40000400 	.word	0x40000400

0000b7f4 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    b7f4:	b580      	push	{r7, lr}
    b7f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    b7f8:	4b02      	ldr	r3, [pc, #8]	; (b804 <system_interrupt_enter_critical_section+0x10>)
    b7fa:	4798      	blx	r3
}
    b7fc:	46c0      	nop			; (mov r8, r8)
    b7fe:	46bd      	mov	sp, r7
    b800:	bd80      	pop	{r7, pc}
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	00007b85 	.word	0x00007b85

0000b808 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    b808:	b580      	push	{r7, lr}
    b80a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    b80c:	4b02      	ldr	r3, [pc, #8]	; (b818 <system_interrupt_leave_critical_section+0x10>)
    b80e:	4798      	blx	r3
}
    b810:	46c0      	nop			; (mov r8, r8)
    b812:	46bd      	mov	sp, r7
    b814:	bd80      	pop	{r7, pc}
    b816:	46c0      	nop			; (mov r8, r8)
    b818:	00007bd9 	.word	0x00007bd9

0000b81c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    b81c:	b580      	push	{r7, lr}
    b81e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    b820:	4b05      	ldr	r3, [pc, #20]	; (b838 <system_gclk_is_syncing+0x1c>)
    b822:	785b      	ldrb	r3, [r3, #1]
    b824:	b2db      	uxtb	r3, r3
    b826:	b25b      	sxtb	r3, r3
    b828:	2b00      	cmp	r3, #0
    b82a:	da01      	bge.n	b830 <system_gclk_is_syncing+0x14>
		return true;
    b82c:	2301      	movs	r3, #1
    b82e:	e000      	b.n	b832 <system_gclk_is_syncing+0x16>
	}

	return false;
    b830:	2300      	movs	r3, #0
}
    b832:	0018      	movs	r0, r3
    b834:	46bd      	mov	sp, r7
    b836:	bd80      	pop	{r7, pc}
    b838:	40000c00 	.word	0x40000c00

0000b83c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    b83c:	b580      	push	{r7, lr}
    b83e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    b840:	2108      	movs	r1, #8
    b842:	2000      	movs	r0, #0
    b844:	4b07      	ldr	r3, [pc, #28]	; (b864 <system_gclk_init+0x28>)
    b846:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    b848:	4b07      	ldr	r3, [pc, #28]	; (b868 <system_gclk_init+0x2c>)
    b84a:	2201      	movs	r2, #1
    b84c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    b84e:	46c0      	nop			; (mov r8, r8)
    b850:	4b05      	ldr	r3, [pc, #20]	; (b868 <system_gclk_init+0x2c>)
    b852:	781b      	ldrb	r3, [r3, #0]
    b854:	b2db      	uxtb	r3, r3
    b856:	001a      	movs	r2, r3
    b858:	2301      	movs	r3, #1
    b85a:	4013      	ands	r3, r2
    b85c:	d1f8      	bne.n	b850 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    b85e:	46c0      	nop			; (mov r8, r8)
    b860:	46bd      	mov	sp, r7
    b862:	bd80      	pop	{r7, pc}
    b864:	0000b799 	.word	0x0000b799
    b868:	40000c00 	.word	0x40000c00

0000b86c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    b86c:	b580      	push	{r7, lr}
    b86e:	b086      	sub	sp, #24
    b870:	af00      	add	r7, sp, #0
    b872:	0002      	movs	r2, r0
    b874:	6039      	str	r1, [r7, #0]
    b876:	1dfb      	adds	r3, r7, #7
    b878:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    b87a:	1dfb      	adds	r3, r7, #7
    b87c:	781b      	ldrb	r3, [r3, #0]
    b87e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    b880:	1dfb      	adds	r3, r7, #7
    b882:	781b      	ldrb	r3, [r3, #0]
    b884:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    b886:	683b      	ldr	r3, [r7, #0]
    b888:	781b      	ldrb	r3, [r3, #0]
    b88a:	021b      	lsls	r3, r3, #8
    b88c:	001a      	movs	r2, r3
    b88e:	697b      	ldr	r3, [r7, #20]
    b890:	4313      	orrs	r3, r2
    b892:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    b894:	683b      	ldr	r3, [r7, #0]
    b896:	785b      	ldrb	r3, [r3, #1]
    b898:	2b00      	cmp	r3, #0
    b89a:	d004      	beq.n	b8a6 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    b89c:	697b      	ldr	r3, [r7, #20]
    b89e:	2280      	movs	r2, #128	; 0x80
    b8a0:	02d2      	lsls	r2, r2, #11
    b8a2:	4313      	orrs	r3, r2
    b8a4:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    b8a6:	683b      	ldr	r3, [r7, #0]
    b8a8:	7a5b      	ldrb	r3, [r3, #9]
    b8aa:	2b00      	cmp	r3, #0
    b8ac:	d004      	beq.n	b8b8 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    b8ae:	697b      	ldr	r3, [r7, #20]
    b8b0:	2280      	movs	r2, #128	; 0x80
    b8b2:	0312      	lsls	r2, r2, #12
    b8b4:	4313      	orrs	r3, r2
    b8b6:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    b8b8:	683b      	ldr	r3, [r7, #0]
    b8ba:	685b      	ldr	r3, [r3, #4]
    b8bc:	2b01      	cmp	r3, #1
    b8be:	d92c      	bls.n	b91a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    b8c0:	683b      	ldr	r3, [r7, #0]
    b8c2:	685a      	ldr	r2, [r3, #4]
    b8c4:	683b      	ldr	r3, [r7, #0]
    b8c6:	685b      	ldr	r3, [r3, #4]
    b8c8:	3b01      	subs	r3, #1
    b8ca:	4013      	ands	r3, r2
    b8cc:	d11a      	bne.n	b904 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    b8ce:	2300      	movs	r3, #0
    b8d0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    b8d2:	2302      	movs	r3, #2
    b8d4:	60bb      	str	r3, [r7, #8]
    b8d6:	e005      	b.n	b8e4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    b8d8:	68fb      	ldr	r3, [r7, #12]
    b8da:	3301      	adds	r3, #1
    b8dc:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    b8de:	68bb      	ldr	r3, [r7, #8]
    b8e0:	005b      	lsls	r3, r3, #1
    b8e2:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    b8e4:	683b      	ldr	r3, [r7, #0]
    b8e6:	685a      	ldr	r2, [r3, #4]
    b8e8:	68bb      	ldr	r3, [r7, #8]
    b8ea:	429a      	cmp	r2, r3
    b8ec:	d8f4      	bhi.n	b8d8 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    b8ee:	68fb      	ldr	r3, [r7, #12]
    b8f0:	021b      	lsls	r3, r3, #8
    b8f2:	693a      	ldr	r2, [r7, #16]
    b8f4:	4313      	orrs	r3, r2
    b8f6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    b8f8:	697b      	ldr	r3, [r7, #20]
    b8fa:	2280      	movs	r2, #128	; 0x80
    b8fc:	0352      	lsls	r2, r2, #13
    b8fe:	4313      	orrs	r3, r2
    b900:	617b      	str	r3, [r7, #20]
    b902:	e00a      	b.n	b91a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    b904:	683b      	ldr	r3, [r7, #0]
    b906:	685b      	ldr	r3, [r3, #4]
    b908:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    b90a:	693a      	ldr	r2, [r7, #16]
    b90c:	4313      	orrs	r3, r2
    b90e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    b910:	697b      	ldr	r3, [r7, #20]
    b912:	2280      	movs	r2, #128	; 0x80
    b914:	0292      	lsls	r2, r2, #10
    b916:	4313      	orrs	r3, r2
    b918:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    b91a:	683b      	ldr	r3, [r7, #0]
    b91c:	7a1b      	ldrb	r3, [r3, #8]
    b91e:	2b00      	cmp	r3, #0
    b920:	d004      	beq.n	b92c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    b922:	697b      	ldr	r3, [r7, #20]
    b924:	2280      	movs	r2, #128	; 0x80
    b926:	0392      	lsls	r2, r2, #14
    b928:	4313      	orrs	r3, r2
    b92a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    b92c:	46c0      	nop			; (mov r8, r8)
    b92e:	4b13      	ldr	r3, [pc, #76]	; (b97c <system_gclk_gen_set_config+0x110>)
    b930:	4798      	blx	r3
    b932:	1e03      	subs	r3, r0, #0
    b934:	d1fb      	bne.n	b92e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    b936:	4b12      	ldr	r3, [pc, #72]	; (b980 <system_gclk_gen_set_config+0x114>)
    b938:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    b93a:	4a12      	ldr	r2, [pc, #72]	; (b984 <system_gclk_gen_set_config+0x118>)
    b93c:	1dfb      	adds	r3, r7, #7
    b93e:	781b      	ldrb	r3, [r3, #0]
    b940:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    b942:	46c0      	nop			; (mov r8, r8)
    b944:	4b0d      	ldr	r3, [pc, #52]	; (b97c <system_gclk_gen_set_config+0x110>)
    b946:	4798      	blx	r3
    b948:	1e03      	subs	r3, r0, #0
    b94a:	d1fb      	bne.n	b944 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    b94c:	4b0e      	ldr	r3, [pc, #56]	; (b988 <system_gclk_gen_set_config+0x11c>)
    b94e:	693a      	ldr	r2, [r7, #16]
    b950:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    b952:	46c0      	nop			; (mov r8, r8)
    b954:	4b09      	ldr	r3, [pc, #36]	; (b97c <system_gclk_gen_set_config+0x110>)
    b956:	4798      	blx	r3
    b958:	1e03      	subs	r3, r0, #0
    b95a:	d1fb      	bne.n	b954 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    b95c:	4b0a      	ldr	r3, [pc, #40]	; (b988 <system_gclk_gen_set_config+0x11c>)
    b95e:	4a0a      	ldr	r2, [pc, #40]	; (b988 <system_gclk_gen_set_config+0x11c>)
    b960:	6851      	ldr	r1, [r2, #4]
    b962:	2280      	movs	r2, #128	; 0x80
    b964:	0252      	lsls	r2, r2, #9
    b966:	4011      	ands	r1, r2
    b968:	697a      	ldr	r2, [r7, #20]
    b96a:	430a      	orrs	r2, r1
    b96c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    b96e:	4b07      	ldr	r3, [pc, #28]	; (b98c <system_gclk_gen_set_config+0x120>)
    b970:	4798      	blx	r3
}
    b972:	46c0      	nop			; (mov r8, r8)
    b974:	46bd      	mov	sp, r7
    b976:	b006      	add	sp, #24
    b978:	bd80      	pop	{r7, pc}
    b97a:	46c0      	nop			; (mov r8, r8)
    b97c:	0000b81d 	.word	0x0000b81d
    b980:	0000b7f5 	.word	0x0000b7f5
    b984:	40000c08 	.word	0x40000c08
    b988:	40000c00 	.word	0x40000c00
    b98c:	0000b809 	.word	0x0000b809

0000b990 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    b990:	b580      	push	{r7, lr}
    b992:	b082      	sub	sp, #8
    b994:	af00      	add	r7, sp, #0
    b996:	0002      	movs	r2, r0
    b998:	1dfb      	adds	r3, r7, #7
    b99a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    b99c:	46c0      	nop			; (mov r8, r8)
    b99e:	4b0e      	ldr	r3, [pc, #56]	; (b9d8 <system_gclk_gen_enable+0x48>)
    b9a0:	4798      	blx	r3
    b9a2:	1e03      	subs	r3, r0, #0
    b9a4:	d1fb      	bne.n	b99e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    b9a6:	4b0d      	ldr	r3, [pc, #52]	; (b9dc <system_gclk_gen_enable+0x4c>)
    b9a8:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    b9aa:	4a0d      	ldr	r2, [pc, #52]	; (b9e0 <system_gclk_gen_enable+0x50>)
    b9ac:	1dfb      	adds	r3, r7, #7
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    b9b2:	46c0      	nop			; (mov r8, r8)
    b9b4:	4b08      	ldr	r3, [pc, #32]	; (b9d8 <system_gclk_gen_enable+0x48>)
    b9b6:	4798      	blx	r3
    b9b8:	1e03      	subs	r3, r0, #0
    b9ba:	d1fb      	bne.n	b9b4 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    b9bc:	4b09      	ldr	r3, [pc, #36]	; (b9e4 <system_gclk_gen_enable+0x54>)
    b9be:	4a09      	ldr	r2, [pc, #36]	; (b9e4 <system_gclk_gen_enable+0x54>)
    b9c0:	6852      	ldr	r2, [r2, #4]
    b9c2:	2180      	movs	r1, #128	; 0x80
    b9c4:	0249      	lsls	r1, r1, #9
    b9c6:	430a      	orrs	r2, r1
    b9c8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    b9ca:	4b07      	ldr	r3, [pc, #28]	; (b9e8 <system_gclk_gen_enable+0x58>)
    b9cc:	4798      	blx	r3
}
    b9ce:	46c0      	nop			; (mov r8, r8)
    b9d0:	46bd      	mov	sp, r7
    b9d2:	b002      	add	sp, #8
    b9d4:	bd80      	pop	{r7, pc}
    b9d6:	46c0      	nop			; (mov r8, r8)
    b9d8:	0000b81d 	.word	0x0000b81d
    b9dc:	0000b7f5 	.word	0x0000b7f5
    b9e0:	40000c04 	.word	0x40000c04
    b9e4:	40000c00 	.word	0x40000c00
    b9e8:	0000b809 	.word	0x0000b809

0000b9ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    b9ec:	b580      	push	{r7, lr}
    b9ee:	b086      	sub	sp, #24
    b9f0:	af00      	add	r7, sp, #0
    b9f2:	0002      	movs	r2, r0
    b9f4:	1dfb      	adds	r3, r7, #7
    b9f6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    b9f8:	46c0      	nop			; (mov r8, r8)
    b9fa:	4b2a      	ldr	r3, [pc, #168]	; (baa4 <system_gclk_gen_get_hz+0xb8>)
    b9fc:	4798      	blx	r3
    b9fe:	1e03      	subs	r3, r0, #0
    ba00:	d1fb      	bne.n	b9fa <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    ba02:	4b29      	ldr	r3, [pc, #164]	; (baa8 <system_gclk_gen_get_hz+0xbc>)
    ba04:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba06:	4a29      	ldr	r2, [pc, #164]	; (baac <system_gclk_gen_get_hz+0xc0>)
    ba08:	1dfb      	adds	r3, r7, #7
    ba0a:	781b      	ldrb	r3, [r3, #0]
    ba0c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba0e:	46c0      	nop			; (mov r8, r8)
    ba10:	4b24      	ldr	r3, [pc, #144]	; (baa4 <system_gclk_gen_get_hz+0xb8>)
    ba12:	4798      	blx	r3
    ba14:	1e03      	subs	r3, r0, #0
    ba16:	d1fb      	bne.n	ba10 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    ba18:	4b25      	ldr	r3, [pc, #148]	; (bab0 <system_gclk_gen_get_hz+0xc4>)
    ba1a:	685b      	ldr	r3, [r3, #4]
    ba1c:	04db      	lsls	r3, r3, #19
    ba1e:	0edb      	lsrs	r3, r3, #27
    ba20:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    ba22:	0018      	movs	r0, r3
    ba24:	4b23      	ldr	r3, [pc, #140]	; (bab4 <system_gclk_gen_get_hz+0xc8>)
    ba26:	4798      	blx	r3
    ba28:	0003      	movs	r3, r0
    ba2a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    ba2c:	4a1f      	ldr	r2, [pc, #124]	; (baac <system_gclk_gen_get_hz+0xc0>)
    ba2e:	1dfb      	adds	r3, r7, #7
    ba30:	781b      	ldrb	r3, [r3, #0]
    ba32:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    ba34:	4b1e      	ldr	r3, [pc, #120]	; (bab0 <system_gclk_gen_get_hz+0xc4>)
    ba36:	685b      	ldr	r3, [r3, #4]
    ba38:	02db      	lsls	r3, r3, #11
    ba3a:	0fdb      	lsrs	r3, r3, #31
    ba3c:	b2da      	uxtb	r2, r3
    ba3e:	2313      	movs	r3, #19
    ba40:	18fb      	adds	r3, r7, r3
    ba42:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    ba44:	4a1c      	ldr	r2, [pc, #112]	; (bab8 <system_gclk_gen_get_hz+0xcc>)
    ba46:	1dfb      	adds	r3, r7, #7
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    ba4c:	46c0      	nop			; (mov r8, r8)
    ba4e:	4b15      	ldr	r3, [pc, #84]	; (baa4 <system_gclk_gen_get_hz+0xb8>)
    ba50:	4798      	blx	r3
    ba52:	1e03      	subs	r3, r0, #0
    ba54:	d1fb      	bne.n	ba4e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    ba56:	4b16      	ldr	r3, [pc, #88]	; (bab0 <system_gclk_gen_get_hz+0xc4>)
    ba58:	689b      	ldr	r3, [r3, #8]
    ba5a:	021b      	lsls	r3, r3, #8
    ba5c:	0c1b      	lsrs	r3, r3, #16
    ba5e:	b29b      	uxth	r3, r3
    ba60:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    ba62:	4b16      	ldr	r3, [pc, #88]	; (babc <system_gclk_gen_get_hz+0xd0>)
    ba64:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    ba66:	2313      	movs	r3, #19
    ba68:	18fb      	adds	r3, r7, r3
    ba6a:	781b      	ldrb	r3, [r3, #0]
    ba6c:	2b00      	cmp	r3, #0
    ba6e:	d109      	bne.n	ba84 <system_gclk_gen_get_hz+0x98>
    ba70:	68fb      	ldr	r3, [r7, #12]
    ba72:	2b01      	cmp	r3, #1
    ba74:	d906      	bls.n	ba84 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    ba76:	4b12      	ldr	r3, [pc, #72]	; (bac0 <system_gclk_gen_get_hz+0xd4>)
    ba78:	68f9      	ldr	r1, [r7, #12]
    ba7a:	6978      	ldr	r0, [r7, #20]
    ba7c:	4798      	blx	r3
    ba7e:	0003      	movs	r3, r0
    ba80:	617b      	str	r3, [r7, #20]
    ba82:	e00a      	b.n	ba9a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    ba84:	2313      	movs	r3, #19
    ba86:	18fb      	adds	r3, r7, r3
    ba88:	781b      	ldrb	r3, [r3, #0]
    ba8a:	2b00      	cmp	r3, #0
    ba8c:	d005      	beq.n	ba9a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    ba8e:	68fb      	ldr	r3, [r7, #12]
    ba90:	3301      	adds	r3, #1
    ba92:	697a      	ldr	r2, [r7, #20]
    ba94:	40da      	lsrs	r2, r3
    ba96:	0013      	movs	r3, r2
    ba98:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    ba9a:	697b      	ldr	r3, [r7, #20]
}
    ba9c:	0018      	movs	r0, r3
    ba9e:	46bd      	mov	sp, r7
    baa0:	b006      	add	sp, #24
    baa2:	bd80      	pop	{r7, pc}
    baa4:	0000b81d 	.word	0x0000b81d
    baa8:	0000b7f5 	.word	0x0000b7f5
    baac:	40000c04 	.word	0x40000c04
    bab0:	40000c00 	.word	0x40000c00
    bab4:	0000afdd 	.word	0x0000afdd
    bab8:	40000c08 	.word	0x40000c08
    babc:	0000b809 	.word	0x0000b809
    bac0:	000100e5 	.word	0x000100e5

0000bac4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    bac4:	b580      	push	{r7, lr}
    bac6:	b084      	sub	sp, #16
    bac8:	af00      	add	r7, sp, #0
    baca:	0002      	movs	r2, r0
    bacc:	6039      	str	r1, [r7, #0]
    bace:	1dfb      	adds	r3, r7, #7
    bad0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    bad2:	1dfb      	adds	r3, r7, #7
    bad4:	781b      	ldrb	r3, [r3, #0]
    bad6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    bad8:	683b      	ldr	r3, [r7, #0]
    bada:	781b      	ldrb	r3, [r3, #0]
    badc:	021b      	lsls	r3, r3, #8
    bade:	001a      	movs	r2, r3
    bae0:	68fb      	ldr	r3, [r7, #12]
    bae2:	4313      	orrs	r3, r2
    bae4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    bae6:	1dfb      	adds	r3, r7, #7
    bae8:	781b      	ldrb	r3, [r3, #0]
    baea:	0018      	movs	r0, r3
    baec:	4b04      	ldr	r3, [pc, #16]	; (bb00 <system_gclk_chan_set_config+0x3c>)
    baee:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    baf0:	4b04      	ldr	r3, [pc, #16]	; (bb04 <system_gclk_chan_set_config+0x40>)
    baf2:	68fa      	ldr	r2, [r7, #12]
    baf4:	b292      	uxth	r2, r2
    baf6:	805a      	strh	r2, [r3, #2]
}
    baf8:	46c0      	nop			; (mov r8, r8)
    bafa:	46bd      	mov	sp, r7
    bafc:	b004      	add	sp, #16
    bafe:	bd80      	pop	{r7, pc}
    bb00:	0000bb51 	.word	0x0000bb51
    bb04:	40000c00 	.word	0x40000c00

0000bb08 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    bb08:	b580      	push	{r7, lr}
    bb0a:	b082      	sub	sp, #8
    bb0c:	af00      	add	r7, sp, #0
    bb0e:	0002      	movs	r2, r0
    bb10:	1dfb      	adds	r3, r7, #7
    bb12:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bb14:	4b0a      	ldr	r3, [pc, #40]	; (bb40 <system_gclk_chan_enable+0x38>)
    bb16:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bb18:	4a0a      	ldr	r2, [pc, #40]	; (bb44 <system_gclk_chan_enable+0x3c>)
    bb1a:	1dfb      	adds	r3, r7, #7
    bb1c:	781b      	ldrb	r3, [r3, #0]
    bb1e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    bb20:	4909      	ldr	r1, [pc, #36]	; (bb48 <system_gclk_chan_enable+0x40>)
    bb22:	4b09      	ldr	r3, [pc, #36]	; (bb48 <system_gclk_chan_enable+0x40>)
    bb24:	885b      	ldrh	r3, [r3, #2]
    bb26:	b29b      	uxth	r3, r3
    bb28:	2280      	movs	r2, #128	; 0x80
    bb2a:	01d2      	lsls	r2, r2, #7
    bb2c:	4313      	orrs	r3, r2
    bb2e:	b29b      	uxth	r3, r3
    bb30:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    bb32:	4b06      	ldr	r3, [pc, #24]	; (bb4c <system_gclk_chan_enable+0x44>)
    bb34:	4798      	blx	r3
}
    bb36:	46c0      	nop			; (mov r8, r8)
    bb38:	46bd      	mov	sp, r7
    bb3a:	b002      	add	sp, #8
    bb3c:	bd80      	pop	{r7, pc}
    bb3e:	46c0      	nop			; (mov r8, r8)
    bb40:	0000b7f5 	.word	0x0000b7f5
    bb44:	40000c02 	.word	0x40000c02
    bb48:	40000c00 	.word	0x40000c00
    bb4c:	0000b809 	.word	0x0000b809

0000bb50 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    bb50:	b580      	push	{r7, lr}
    bb52:	b084      	sub	sp, #16
    bb54:	af00      	add	r7, sp, #0
    bb56:	0002      	movs	r2, r0
    bb58:	1dfb      	adds	r3, r7, #7
    bb5a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    bb5c:	4b1c      	ldr	r3, [pc, #112]	; (bbd0 <system_gclk_chan_disable+0x80>)
    bb5e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bb60:	4a1c      	ldr	r2, [pc, #112]	; (bbd4 <system_gclk_chan_disable+0x84>)
    bb62:	1dfb      	adds	r3, r7, #7
    bb64:	781b      	ldrb	r3, [r3, #0]
    bb66:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    bb68:	4b1b      	ldr	r3, [pc, #108]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bb6a:	885b      	ldrh	r3, [r3, #2]
    bb6c:	051b      	lsls	r3, r3, #20
    bb6e:	0f1b      	lsrs	r3, r3, #28
    bb70:	b2db      	uxtb	r3, r3
    bb72:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    bb74:	4a18      	ldr	r2, [pc, #96]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bb76:	8853      	ldrh	r3, [r2, #2]
    bb78:	4918      	ldr	r1, [pc, #96]	; (bbdc <system_gclk_chan_disable+0x8c>)
    bb7a:	400b      	ands	r3, r1
    bb7c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    bb7e:	4a16      	ldr	r2, [pc, #88]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bb80:	4b15      	ldr	r3, [pc, #84]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bb82:	885b      	ldrh	r3, [r3, #2]
    bb84:	b29b      	uxth	r3, r3
    bb86:	4916      	ldr	r1, [pc, #88]	; (bbe0 <system_gclk_chan_disable+0x90>)
    bb88:	400b      	ands	r3, r1
    bb8a:	b29b      	uxth	r3, r3
    bb8c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    bb8e:	46c0      	nop			; (mov r8, r8)
    bb90:	4b11      	ldr	r3, [pc, #68]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bb92:	885b      	ldrh	r3, [r3, #2]
    bb94:	b29b      	uxth	r3, r3
    bb96:	001a      	movs	r2, r3
    bb98:	2380      	movs	r3, #128	; 0x80
    bb9a:	01db      	lsls	r3, r3, #7
    bb9c:	4013      	ands	r3, r2
    bb9e:	d1f7      	bne.n	bb90 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    bba0:	4a0d      	ldr	r2, [pc, #52]	; (bbd8 <system_gclk_chan_disable+0x88>)
    bba2:	68fb      	ldr	r3, [r7, #12]
    bba4:	b2db      	uxtb	r3, r3
    bba6:	1c19      	adds	r1, r3, #0
    bba8:	230f      	movs	r3, #15
    bbaa:	400b      	ands	r3, r1
    bbac:	b2d9      	uxtb	r1, r3
    bbae:	8853      	ldrh	r3, [r2, #2]
    bbb0:	1c08      	adds	r0, r1, #0
    bbb2:	210f      	movs	r1, #15
    bbb4:	4001      	ands	r1, r0
    bbb6:	0208      	lsls	r0, r1, #8
    bbb8:	4908      	ldr	r1, [pc, #32]	; (bbdc <system_gclk_chan_disable+0x8c>)
    bbba:	400b      	ands	r3, r1
    bbbc:	1c19      	adds	r1, r3, #0
    bbbe:	1c03      	adds	r3, r0, #0
    bbc0:	430b      	orrs	r3, r1
    bbc2:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    bbc4:	4b07      	ldr	r3, [pc, #28]	; (bbe4 <system_gclk_chan_disable+0x94>)
    bbc6:	4798      	blx	r3
}
    bbc8:	46c0      	nop			; (mov r8, r8)
    bbca:	46bd      	mov	sp, r7
    bbcc:	b004      	add	sp, #16
    bbce:	bd80      	pop	{r7, pc}
    bbd0:	0000b7f5 	.word	0x0000b7f5
    bbd4:	40000c02 	.word	0x40000c02
    bbd8:	40000c00 	.word	0x40000c00
    bbdc:	fffff0ff 	.word	0xfffff0ff
    bbe0:	ffffbfff 	.word	0xffffbfff
    bbe4:	0000b809 	.word	0x0000b809

0000bbe8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b084      	sub	sp, #16
    bbec:	af00      	add	r7, sp, #0
    bbee:	0002      	movs	r2, r0
    bbf0:	1dfb      	adds	r3, r7, #7
    bbf2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    bbf4:	4b0d      	ldr	r3, [pc, #52]	; (bc2c <system_gclk_chan_get_hz+0x44>)
    bbf6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    bbf8:	4a0d      	ldr	r2, [pc, #52]	; (bc30 <system_gclk_chan_get_hz+0x48>)
    bbfa:	1dfb      	adds	r3, r7, #7
    bbfc:	781b      	ldrb	r3, [r3, #0]
    bbfe:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    bc00:	4b0c      	ldr	r3, [pc, #48]	; (bc34 <system_gclk_chan_get_hz+0x4c>)
    bc02:	885b      	ldrh	r3, [r3, #2]
    bc04:	051b      	lsls	r3, r3, #20
    bc06:	0f1b      	lsrs	r3, r3, #28
    bc08:	b2da      	uxtb	r2, r3
    bc0a:	230f      	movs	r3, #15
    bc0c:	18fb      	adds	r3, r7, r3
    bc0e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    bc10:	4b09      	ldr	r3, [pc, #36]	; (bc38 <system_gclk_chan_get_hz+0x50>)
    bc12:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    bc14:	230f      	movs	r3, #15
    bc16:	18fb      	adds	r3, r7, r3
    bc18:	781b      	ldrb	r3, [r3, #0]
    bc1a:	0018      	movs	r0, r3
    bc1c:	4b07      	ldr	r3, [pc, #28]	; (bc3c <system_gclk_chan_get_hz+0x54>)
    bc1e:	4798      	blx	r3
    bc20:	0003      	movs	r3, r0
}
    bc22:	0018      	movs	r0, r3
    bc24:	46bd      	mov	sp, r7
    bc26:	b004      	add	sp, #16
    bc28:	bd80      	pop	{r7, pc}
    bc2a:	46c0      	nop			; (mov r8, r8)
    bc2c:	0000b7f5 	.word	0x0000b7f5
    bc30:	40000c02 	.word	0x40000c02
    bc34:	40000c00 	.word	0x40000c00
    bc38:	0000b809 	.word	0x0000b809
    bc3c:	0000b9ed 	.word	0x0000b9ed

0000bc40 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    bc40:	b580      	push	{r7, lr}
    bc42:	b084      	sub	sp, #16
    bc44:	af00      	add	r7, sp, #0
    bc46:	0002      	movs	r2, r0
    bc48:	1dfb      	adds	r3, r7, #7
    bc4a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    bc4c:	230f      	movs	r3, #15
    bc4e:	18fb      	adds	r3, r7, r3
    bc50:	1dfa      	adds	r2, r7, #7
    bc52:	7812      	ldrb	r2, [r2, #0]
    bc54:	09d2      	lsrs	r2, r2, #7
    bc56:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    bc58:	230e      	movs	r3, #14
    bc5a:	18fb      	adds	r3, r7, r3
    bc5c:	1dfa      	adds	r2, r7, #7
    bc5e:	7812      	ldrb	r2, [r2, #0]
    bc60:	0952      	lsrs	r2, r2, #5
    bc62:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    bc64:	4b0d      	ldr	r3, [pc, #52]	; (bc9c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    bc66:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    bc68:	230f      	movs	r3, #15
    bc6a:	18fb      	adds	r3, r7, r3
    bc6c:	781b      	ldrb	r3, [r3, #0]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d10f      	bne.n	bc92 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    bc72:	230f      	movs	r3, #15
    bc74:	18fb      	adds	r3, r7, r3
    bc76:	781b      	ldrb	r3, [r3, #0]
    bc78:	009b      	lsls	r3, r3, #2
    bc7a:	2210      	movs	r2, #16
    bc7c:	4694      	mov	ip, r2
    bc7e:	44bc      	add	ip, r7
    bc80:	4463      	add	r3, ip
    bc82:	3b08      	subs	r3, #8
    bc84:	681a      	ldr	r2, [r3, #0]
    bc86:	230e      	movs	r3, #14
    bc88:	18fb      	adds	r3, r7, r3
    bc8a:	781b      	ldrb	r3, [r3, #0]
    bc8c:	01db      	lsls	r3, r3, #7
    bc8e:	18d3      	adds	r3, r2, r3
    bc90:	e000      	b.n	bc94 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    bc92:	2300      	movs	r3, #0
	}
}
    bc94:	0018      	movs	r0, r3
    bc96:	46bd      	mov	sp, r7
    bc98:	b004      	add	sp, #16
    bc9a:	bd80      	pop	{r7, pc}
    bc9c:	41004400 	.word	0x41004400

0000bca0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    bca0:	b580      	push	{r7, lr}
    bca2:	b088      	sub	sp, #32
    bca4:	af00      	add	r7, sp, #0
    bca6:	60f8      	str	r0, [r7, #12]
    bca8:	60b9      	str	r1, [r7, #8]
    bcaa:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    bcac:	2300      	movs	r3, #0
    bcae:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    bcb0:	687b      	ldr	r3, [r7, #4]
    bcb2:	78db      	ldrb	r3, [r3, #3]
    bcb4:	2201      	movs	r2, #1
    bcb6:	4053      	eors	r3, r2
    bcb8:	b2db      	uxtb	r3, r3
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d035      	beq.n	bd2a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    bcbe:	687b      	ldr	r3, [r7, #4]
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	2b80      	cmp	r3, #128	; 0x80
    bcc4:	d00b      	beq.n	bcde <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    bcc6:	69fb      	ldr	r3, [r7, #28]
    bcc8:	2280      	movs	r2, #128	; 0x80
    bcca:	0252      	lsls	r2, r2, #9
    bccc:	4313      	orrs	r3, r2
    bcce:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    bcd0:	687b      	ldr	r3, [r7, #4]
    bcd2:	781b      	ldrb	r3, [r3, #0]
    bcd4:	061b      	lsls	r3, r3, #24
    bcd6:	001a      	movs	r2, r3
    bcd8:	69fb      	ldr	r3, [r7, #28]
    bcda:	4313      	orrs	r3, r2
    bcdc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bcde:	687b      	ldr	r3, [r7, #4]
    bce0:	785b      	ldrb	r3, [r3, #1]
    bce2:	2b00      	cmp	r3, #0
    bce4:	d003      	beq.n	bcee <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bce6:	687b      	ldr	r3, [r7, #4]
    bce8:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    bcea:	2b02      	cmp	r3, #2
    bcec:	d110      	bne.n	bd10 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    bcee:	69fb      	ldr	r3, [r7, #28]
    bcf0:	2280      	movs	r2, #128	; 0x80
    bcf2:	0292      	lsls	r2, r2, #10
    bcf4:	4313      	orrs	r3, r2
    bcf6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    bcf8:	687b      	ldr	r3, [r7, #4]
    bcfa:	789b      	ldrb	r3, [r3, #2]
    bcfc:	2b00      	cmp	r3, #0
    bcfe:	d004      	beq.n	bd0a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    bd00:	69fb      	ldr	r3, [r7, #28]
    bd02:	2280      	movs	r2, #128	; 0x80
    bd04:	02d2      	lsls	r2, r2, #11
    bd06:	4313      	orrs	r3, r2
    bd08:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    bd0a:	68fb      	ldr	r3, [r7, #12]
    bd0c:	68ba      	ldr	r2, [r7, #8]
    bd0e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	785b      	ldrb	r3, [r3, #1]
    bd14:	2b01      	cmp	r3, #1
    bd16:	d003      	beq.n	bd20 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bd18:	687b      	ldr	r3, [r7, #4]
    bd1a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd1c:	2b02      	cmp	r3, #2
    bd1e:	d107      	bne.n	bd30 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    bd20:	69fb      	ldr	r3, [r7, #28]
    bd22:	4a22      	ldr	r2, [pc, #136]	; (bdac <_system_pinmux_config+0x10c>)
    bd24:	4013      	ands	r3, r2
    bd26:	61fb      	str	r3, [r7, #28]
    bd28:	e002      	b.n	bd30 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    bd2a:	68fb      	ldr	r3, [r7, #12]
    bd2c:	68ba      	ldr	r2, [r7, #8]
    bd2e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    bd30:	68bb      	ldr	r3, [r7, #8]
    bd32:	041b      	lsls	r3, r3, #16
    bd34:	0c1b      	lsrs	r3, r3, #16
    bd36:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    bd38:	68bb      	ldr	r3, [r7, #8]
    bd3a:	0c1b      	lsrs	r3, r3, #16
    bd3c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bd3e:	69ba      	ldr	r2, [r7, #24]
    bd40:	69fb      	ldr	r3, [r7, #28]
    bd42:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    bd44:	22a0      	movs	r2, #160	; 0xa0
    bd46:	05d2      	lsls	r2, r2, #23
    bd48:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bd4a:	68fb      	ldr	r3, [r7, #12]
    bd4c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bd4e:	697a      	ldr	r2, [r7, #20]
    bd50:	69fb      	ldr	r3, [r7, #28]
    bd52:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    bd54:	22d0      	movs	r2, #208	; 0xd0
    bd56:	0612      	lsls	r2, r2, #24
    bd58:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    bd5a:	68fb      	ldr	r3, [r7, #12]
    bd5c:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    bd5e:	687b      	ldr	r3, [r7, #4]
    bd60:	78db      	ldrb	r3, [r3, #3]
    bd62:	2201      	movs	r2, #1
    bd64:	4053      	eors	r3, r2
    bd66:	b2db      	uxtb	r3, r3
    bd68:	2b00      	cmp	r3, #0
    bd6a:	d01a      	beq.n	bda2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    bd6c:	69fa      	ldr	r2, [r7, #28]
    bd6e:	2380      	movs	r3, #128	; 0x80
    bd70:	02db      	lsls	r3, r3, #11
    bd72:	4013      	ands	r3, r2
    bd74:	d00a      	beq.n	bd8c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    bd76:	687b      	ldr	r3, [r7, #4]
    bd78:	789b      	ldrb	r3, [r3, #2]
    bd7a:	2b01      	cmp	r3, #1
    bd7c:	d103      	bne.n	bd86 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    bd7e:	68fb      	ldr	r3, [r7, #12]
    bd80:	68ba      	ldr	r2, [r7, #8]
    bd82:	619a      	str	r2, [r3, #24]
    bd84:	e002      	b.n	bd8c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    bd86:	68fb      	ldr	r3, [r7, #12]
    bd88:	68ba      	ldr	r2, [r7, #8]
    bd8a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd8c:	687b      	ldr	r3, [r7, #4]
    bd8e:	785b      	ldrb	r3, [r3, #1]
    bd90:	2b01      	cmp	r3, #1
    bd92:	d003      	beq.n	bd9c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    bd94:	687b      	ldr	r3, [r7, #4]
    bd96:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    bd98:	2b02      	cmp	r3, #2
    bd9a:	d102      	bne.n	bda2 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    bd9c:	68fb      	ldr	r3, [r7, #12]
    bd9e:	68ba      	ldr	r2, [r7, #8]
    bda0:	609a      	str	r2, [r3, #8]
		}
	}
}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	46bd      	mov	sp, r7
    bda6:	b008      	add	sp, #32
    bda8:	bd80      	pop	{r7, pc}
    bdaa:	46c0      	nop			; (mov r8, r8)
    bdac:	fffbffff 	.word	0xfffbffff

0000bdb0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    bdb0:	b580      	push	{r7, lr}
    bdb2:	b084      	sub	sp, #16
    bdb4:	af00      	add	r7, sp, #0
    bdb6:	0002      	movs	r2, r0
    bdb8:	6039      	str	r1, [r7, #0]
    bdba:	1dfb      	adds	r3, r7, #7
    bdbc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    bdbe:	1dfb      	adds	r3, r7, #7
    bdc0:	781b      	ldrb	r3, [r3, #0]
    bdc2:	0018      	movs	r0, r3
    bdc4:	4b0a      	ldr	r3, [pc, #40]	; (bdf0 <system_pinmux_pin_set_config+0x40>)
    bdc6:	4798      	blx	r3
    bdc8:	0003      	movs	r3, r0
    bdca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    bdcc:	1dfb      	adds	r3, r7, #7
    bdce:	781b      	ldrb	r3, [r3, #0]
    bdd0:	221f      	movs	r2, #31
    bdd2:	4013      	ands	r3, r2
    bdd4:	2201      	movs	r2, #1
    bdd6:	409a      	lsls	r2, r3
    bdd8:	0013      	movs	r3, r2
    bdda:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    bddc:	683a      	ldr	r2, [r7, #0]
    bdde:	68b9      	ldr	r1, [r7, #8]
    bde0:	68fb      	ldr	r3, [r7, #12]
    bde2:	0018      	movs	r0, r3
    bde4:	4b03      	ldr	r3, [pc, #12]	; (bdf4 <system_pinmux_pin_set_config+0x44>)
    bde6:	4798      	blx	r3
}
    bde8:	46c0      	nop			; (mov r8, r8)
    bdea:	46bd      	mov	sp, r7
    bdec:	b004      	add	sp, #16
    bdee:	bd80      	pop	{r7, pc}
    bdf0:	0000bc41 	.word	0x0000bc41
    bdf4:	0000bca1 	.word	0x0000bca1

0000bdf8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    bdf8:	b580      	push	{r7, lr}
    bdfa:	af00      	add	r7, sp, #0
	return;
    bdfc:	46c0      	nop			; (mov r8, r8)
}
    bdfe:	46bd      	mov	sp, r7
    be00:	bd80      	pop	{r7, pc}
    be02:	46c0      	nop			; (mov r8, r8)

0000be04 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    be04:	b580      	push	{r7, lr}
    be06:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    be08:	4b06      	ldr	r3, [pc, #24]	; (be24 <system_init+0x20>)
    be0a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    be0c:	4b06      	ldr	r3, [pc, #24]	; (be28 <system_init+0x24>)
    be0e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    be10:	4b06      	ldr	r3, [pc, #24]	; (be2c <system_init+0x28>)
    be12:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    be14:	4b06      	ldr	r3, [pc, #24]	; (be30 <system_init+0x2c>)
    be16:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    be18:	4b06      	ldr	r3, [pc, #24]	; (be34 <system_init+0x30>)
    be1a:	4798      	blx	r3
}
    be1c:	46c0      	nop			; (mov r8, r8)
    be1e:	46bd      	mov	sp, r7
    be20:	bd80      	pop	{r7, pc}
    be22:	46c0      	nop			; (mov r8, r8)
    be24:	0000b469 	.word	0x0000b469
    be28:	00007d15 	.word	0x00007d15
    be2c:	0000bdf9 	.word	0x0000bdf9
    be30:	00008b51 	.word	0x00008b51
    be34:	0000bdf9 	.word	0x0000bdf9

0000be38 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    be38:	b580      	push	{r7, lr}
    be3a:	af00      	add	r7, sp, #0
    be3c:	2000      	movs	r0, #0
    be3e:	4b02      	ldr	r3, [pc, #8]	; (be48 <TCC0_Handler+0x10>)
    be40:	4798      	blx	r3
    be42:	46c0      	nop			; (mov r8, r8)
    be44:	46bd      	mov	sp, r7
    be46:	bd80      	pop	{r7, pc}
    be48:	0000be75 	.word	0x0000be75

0000be4c <TCC1_Handler>:
    be4c:	b580      	push	{r7, lr}
    be4e:	af00      	add	r7, sp, #0
    be50:	2001      	movs	r0, #1
    be52:	4b02      	ldr	r3, [pc, #8]	; (be5c <TCC1_Handler+0x10>)
    be54:	4798      	blx	r3
    be56:	46c0      	nop			; (mov r8, r8)
    be58:	46bd      	mov	sp, r7
    be5a:	bd80      	pop	{r7, pc}
    be5c:	0000be75 	.word	0x0000be75

0000be60 <TCC2_Handler>:
    be60:	b580      	push	{r7, lr}
    be62:	af00      	add	r7, sp, #0
    be64:	2002      	movs	r0, #2
    be66:	4b02      	ldr	r3, [pc, #8]	; (be70 <TCC2_Handler+0x10>)
    be68:	4798      	blx	r3
    be6a:	46c0      	nop			; (mov r8, r8)
    be6c:	46bd      	mov	sp, r7
    be6e:	bd80      	pop	{r7, pc}
    be70:	0000be75 	.word	0x0000be75

0000be74 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    be74:	b580      	push	{r7, lr}
    be76:	b086      	sub	sp, #24
    be78:	af00      	add	r7, sp, #0
    be7a:	0002      	movs	r2, r0
    be7c:	1dfb      	adds	r3, r7, #7
    be7e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    be80:	1dfb      	adds	r3, r7, #7
    be82:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    be84:	4b18      	ldr	r3, [pc, #96]	; (bee8 <_tcc_interrupt_handler+0x74>)
    be86:	0092      	lsls	r2, r2, #2
    be88:	58d3      	ldr	r3, [r2, r3]
    be8a:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    be8c:	693b      	ldr	r3, [r7, #16]
    be8e:	681b      	ldr	r3, [r3, #0]
    be90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    be92:	693b      	ldr	r3, [r7, #16]
    be94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    be96:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    be98:	693b      	ldr	r3, [r7, #16]
    be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    be9c:	4013      	ands	r3, r2
    be9e:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bea0:	2300      	movs	r3, #0
    bea2:	617b      	str	r3, [r7, #20]
    bea4:	e019      	b.n	beda <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    bea6:	4b11      	ldr	r3, [pc, #68]	; (beec <_tcc_interrupt_handler+0x78>)
    bea8:	697a      	ldr	r2, [r7, #20]
    beaa:	0092      	lsls	r2, r2, #2
    beac:	58d3      	ldr	r3, [r2, r3]
    beae:	68fa      	ldr	r2, [r7, #12]
    beb0:	4013      	ands	r3, r2
    beb2:	d00f      	beq.n	bed4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    beb4:	693a      	ldr	r2, [r7, #16]
    beb6:	697b      	ldr	r3, [r7, #20]
    beb8:	009b      	lsls	r3, r3, #2
    beba:	18d3      	adds	r3, r2, r3
    bebc:	3304      	adds	r3, #4
    bebe:	681b      	ldr	r3, [r3, #0]
    bec0:	693a      	ldr	r2, [r7, #16]
    bec2:	0010      	movs	r0, r2
    bec4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    bec6:	693b      	ldr	r3, [r7, #16]
    bec8:	681b      	ldr	r3, [r3, #0]
    beca:	4a08      	ldr	r2, [pc, #32]	; (beec <_tcc_interrupt_handler+0x78>)
    becc:	6979      	ldr	r1, [r7, #20]
    bece:	0089      	lsls	r1, r1, #2
    bed0:	588a      	ldr	r2, [r1, r2]
    bed2:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    bed4:	697b      	ldr	r3, [r7, #20]
    bed6:	3301      	adds	r3, #1
    bed8:	617b      	str	r3, [r7, #20]
    beda:	697b      	ldr	r3, [r7, #20]
    bedc:	2b0b      	cmp	r3, #11
    bede:	dde2      	ble.n	bea6 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    bee0:	46c0      	nop			; (mov r8, r8)
    bee2:	46bd      	mov	sp, r7
    bee4:	b006      	add	sp, #24
    bee6:	bd80      	pop	{r7, pc}
    bee8:	200047b4 	.word	0x200047b4
    beec:	0001378c 	.word	0x0001378c

0000bef0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    bef0:	b580      	push	{r7, lr}
    bef2:	b082      	sub	sp, #8
    bef4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    bef6:	4b2f      	ldr	r3, [pc, #188]	; (bfb4 <Reset_Handler+0xc4>)
    bef8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    befa:	4b2f      	ldr	r3, [pc, #188]	; (bfb8 <Reset_Handler+0xc8>)
    befc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    befe:	687a      	ldr	r2, [r7, #4]
    bf00:	683b      	ldr	r3, [r7, #0]
    bf02:	429a      	cmp	r2, r3
    bf04:	d00c      	beq.n	bf20 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    bf06:	e007      	b.n	bf18 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    bf08:	683b      	ldr	r3, [r7, #0]
    bf0a:	1d1a      	adds	r2, r3, #4
    bf0c:	603a      	str	r2, [r7, #0]
    bf0e:	687a      	ldr	r2, [r7, #4]
    bf10:	1d11      	adds	r1, r2, #4
    bf12:	6079      	str	r1, [r7, #4]
    bf14:	6812      	ldr	r2, [r2, #0]
    bf16:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    bf18:	683a      	ldr	r2, [r7, #0]
    bf1a:	4b28      	ldr	r3, [pc, #160]	; (bfbc <Reset_Handler+0xcc>)
    bf1c:	429a      	cmp	r2, r3
    bf1e:	d3f3      	bcc.n	bf08 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    bf20:	4b27      	ldr	r3, [pc, #156]	; (bfc0 <Reset_Handler+0xd0>)
    bf22:	603b      	str	r3, [r7, #0]
    bf24:	e004      	b.n	bf30 <Reset_Handler+0x40>
                *pDest++ = 0;
    bf26:	683b      	ldr	r3, [r7, #0]
    bf28:	1d1a      	adds	r2, r3, #4
    bf2a:	603a      	str	r2, [r7, #0]
    bf2c:	2200      	movs	r2, #0
    bf2e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    bf30:	683a      	ldr	r2, [r7, #0]
    bf32:	4b24      	ldr	r3, [pc, #144]	; (bfc4 <Reset_Handler+0xd4>)
    bf34:	429a      	cmp	r2, r3
    bf36:	d3f6      	bcc.n	bf26 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    bf38:	4b23      	ldr	r3, [pc, #140]	; (bfc8 <Reset_Handler+0xd8>)
    bf3a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    bf3c:	4b23      	ldr	r3, [pc, #140]	; (bfcc <Reset_Handler+0xdc>)
    bf3e:	687a      	ldr	r2, [r7, #4]
    bf40:	21ff      	movs	r1, #255	; 0xff
    bf42:	438a      	bics	r2, r1
    bf44:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    bf46:	4a22      	ldr	r2, [pc, #136]	; (bfd0 <Reset_Handler+0xe0>)
    bf48:	2390      	movs	r3, #144	; 0x90
    bf4a:	005b      	lsls	r3, r3, #1
    bf4c:	2102      	movs	r1, #2
    bf4e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    bf50:	4a20      	ldr	r2, [pc, #128]	; (bfd4 <Reset_Handler+0xe4>)
    bf52:	78d3      	ldrb	r3, [r2, #3]
    bf54:	2103      	movs	r1, #3
    bf56:	438b      	bics	r3, r1
    bf58:	1c19      	adds	r1, r3, #0
    bf5a:	2302      	movs	r3, #2
    bf5c:	430b      	orrs	r3, r1
    bf5e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    bf60:	4a1c      	ldr	r2, [pc, #112]	; (bfd4 <Reset_Handler+0xe4>)
    bf62:	78d3      	ldrb	r3, [r2, #3]
    bf64:	210c      	movs	r1, #12
    bf66:	438b      	bics	r3, r1
    bf68:	1c19      	adds	r1, r3, #0
    bf6a:	2308      	movs	r3, #8
    bf6c:	430b      	orrs	r3, r1
    bf6e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    bf70:	4a19      	ldr	r2, [pc, #100]	; (bfd8 <Reset_Handler+0xe8>)
    bf72:	7b93      	ldrb	r3, [r2, #14]
    bf74:	2130      	movs	r1, #48	; 0x30
    bf76:	438b      	bics	r3, r1
    bf78:	1c19      	adds	r1, r3, #0
    bf7a:	2320      	movs	r3, #32
    bf7c:	430b      	orrs	r3, r1
    bf7e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    bf80:	4a15      	ldr	r2, [pc, #84]	; (bfd8 <Reset_Handler+0xe8>)
    bf82:	7b93      	ldrb	r3, [r2, #14]
    bf84:	210c      	movs	r1, #12
    bf86:	438b      	bics	r3, r1
    bf88:	1c19      	adds	r1, r3, #0
    bf8a:	2308      	movs	r3, #8
    bf8c:	430b      	orrs	r3, r1
    bf8e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    bf90:	4a11      	ldr	r2, [pc, #68]	; (bfd8 <Reset_Handler+0xe8>)
    bf92:	7b93      	ldrb	r3, [r2, #14]
    bf94:	2103      	movs	r1, #3
    bf96:	438b      	bics	r3, r1
    bf98:	1c19      	adds	r1, r3, #0
    bf9a:	2302      	movs	r3, #2
    bf9c:	430b      	orrs	r3, r1
    bf9e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    bfa0:	4a0e      	ldr	r2, [pc, #56]	; (bfdc <Reset_Handler+0xec>)
    bfa2:	6853      	ldr	r3, [r2, #4]
    bfa4:	2180      	movs	r1, #128	; 0x80
    bfa6:	430b      	orrs	r3, r1
    bfa8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    bfaa:	4b0d      	ldr	r3, [pc, #52]	; (bfe0 <Reset_Handler+0xf0>)
    bfac:	4798      	blx	r3

        /* Branch to main function */
        main();
    bfae:	4b0d      	ldr	r3, [pc, #52]	; (bfe4 <Reset_Handler+0xf4>)
    bfb0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    bfb2:	e7fe      	b.n	bfb2 <Reset_Handler+0xc2>
    bfb4:	00014090 	.word	0x00014090
    bfb8:	20000000 	.word	0x20000000
    bfbc:	200000a0 	.word	0x200000a0
    bfc0:	200000a0 	.word	0x200000a0
    bfc4:	20004808 	.word	0x20004808
    bfc8:	00000000 	.word	0x00000000
    bfcc:	e000ed00 	.word	0xe000ed00
    bfd0:	41007000 	.word	0x41007000
    bfd4:	41005000 	.word	0x41005000
    bfd8:	41004800 	.word	0x41004800
    bfdc:	41004000 	.word	0x41004000
    bfe0:	00010c09 	.word	0x00010c09
    bfe4:	0000f11d 	.word	0x0000f11d

0000bfe8 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    bfe8:	b580      	push	{r7, lr}
    bfea:	b082      	sub	sp, #8
    bfec:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bfee:	f3ef 8305 	mrs	r3, IPSR
    bff2:	607b      	str	r3, [r7, #4]
  return(result);
    bff4:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    bff6:	4b01      	ldr	r3, [pc, #4]	; (bffc <Dummy_Handler+0x14>)
    bff8:	601a      	str	r2, [r3, #0]
        }
    bffa:	e7f8      	b.n	bfee <Dummy_Handler+0x6>
    bffc:	20000020 	.word	0x20000020

0000c000 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    c000:	b580      	push	{r7, lr}
    c002:	b086      	sub	sp, #24
    c004:	af00      	add	r7, sp, #0
    c006:	60f8      	str	r0, [r7, #12]
    c008:	60b9      	str	r1, [r7, #8]
    c00a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c00c:	2300      	movs	r3, #0
    c00e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    c010:	68fb      	ldr	r3, [r7, #12]
    c012:	2b00      	cmp	r3, #0
    c014:	d012      	beq.n	c03c <_read+0x3c>
		return -1;
    c016:	2301      	movs	r3, #1
    c018:	425b      	negs	r3, r3
    c01a:	e013      	b.n	c044 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    c01c:	4b0b      	ldr	r3, [pc, #44]	; (c04c <_read+0x4c>)
    c01e:	681a      	ldr	r2, [r3, #0]
    c020:	4b0b      	ldr	r3, [pc, #44]	; (c050 <_read+0x50>)
    c022:	681b      	ldr	r3, [r3, #0]
    c024:	68b9      	ldr	r1, [r7, #8]
    c026:	0018      	movs	r0, r3
    c028:	4790      	blx	r2
		ptr++;
    c02a:	68bb      	ldr	r3, [r7, #8]
    c02c:	3301      	adds	r3, #1
    c02e:	60bb      	str	r3, [r7, #8]
		nChars++;
    c030:	697b      	ldr	r3, [r7, #20]
    c032:	3301      	adds	r3, #1
    c034:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    c036:	687b      	ldr	r3, [r7, #4]
    c038:	3b01      	subs	r3, #1
    c03a:	607b      	str	r3, [r7, #4]
    c03c:	687b      	ldr	r3, [r7, #4]
    c03e:	2b00      	cmp	r3, #0
    c040:	dcec      	bgt.n	c01c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    c042:	697b      	ldr	r3, [r7, #20]
}
    c044:	0018      	movs	r0, r3
    c046:	46bd      	mov	sp, r7
    c048:	b006      	add	sp, #24
    c04a:	bd80      	pop	{r7, pc}
    c04c:	200047c0 	.word	0x200047c0
    c050:	200047c8 	.word	0x200047c8

0000c054 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    c054:	b580      	push	{r7, lr}
    c056:	b086      	sub	sp, #24
    c058:	af00      	add	r7, sp, #0
    c05a:	60f8      	str	r0, [r7, #12]
    c05c:	60b9      	str	r1, [r7, #8]
    c05e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    c060:	2300      	movs	r3, #0
    c062:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    c064:	68fb      	ldr	r3, [r7, #12]
    c066:	2b01      	cmp	r3, #1
    c068:	d01d      	beq.n	c0a6 <_write+0x52>
    c06a:	68fb      	ldr	r3, [r7, #12]
    c06c:	2b02      	cmp	r3, #2
    c06e:	d01a      	beq.n	c0a6 <_write+0x52>
    c070:	68fb      	ldr	r3, [r7, #12]
    c072:	2b03      	cmp	r3, #3
    c074:	d017      	beq.n	c0a6 <_write+0x52>
		return -1;
    c076:	2301      	movs	r3, #1
    c078:	425b      	negs	r3, r3
    c07a:	e018      	b.n	c0ae <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    c07c:	4b0e      	ldr	r3, [pc, #56]	; (c0b8 <_write+0x64>)
    c07e:	681a      	ldr	r2, [r3, #0]
    c080:	4b0e      	ldr	r3, [pc, #56]	; (c0bc <_write+0x68>)
    c082:	6818      	ldr	r0, [r3, #0]
    c084:	68bb      	ldr	r3, [r7, #8]
    c086:	1c59      	adds	r1, r3, #1
    c088:	60b9      	str	r1, [r7, #8]
    c08a:	781b      	ldrb	r3, [r3, #0]
    c08c:	0019      	movs	r1, r3
    c08e:	4790      	blx	r2
    c090:	1e03      	subs	r3, r0, #0
    c092:	da02      	bge.n	c09a <_write+0x46>
			return -1;
    c094:	2301      	movs	r3, #1
    c096:	425b      	negs	r3, r3
    c098:	e009      	b.n	c0ae <_write+0x5a>
		}
		++nChars;
    c09a:	697b      	ldr	r3, [r7, #20]
    c09c:	3301      	adds	r3, #1
    c09e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	3b01      	subs	r3, #1
    c0a4:	607b      	str	r3, [r7, #4]
    c0a6:	687b      	ldr	r3, [r7, #4]
    c0a8:	2b00      	cmp	r3, #0
    c0aa:	d1e7      	bne.n	c07c <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    c0ac:	697b      	ldr	r3, [r7, #20]
}
    c0ae:	0018      	movs	r0, r3
    c0b0:	46bd      	mov	sp, r7
    c0b2:	b006      	add	sp, #24
    c0b4:	bd80      	pop	{r7, pc}
    c0b6:	46c0      	nop			; (mov r8, r8)
    c0b8:	200047c4 	.word	0x200047c4
    c0bc:	200047c8 	.word	0x200047c8

0000c0c0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    c0c0:	b580      	push	{r7, lr}
    c0c2:	b084      	sub	sp, #16
    c0c4:	af00      	add	r7, sp, #0
    c0c6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    c0c8:	4b0a      	ldr	r3, [pc, #40]	; (c0f4 <_sbrk+0x34>)
    c0ca:	681b      	ldr	r3, [r3, #0]
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d102      	bne.n	c0d6 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    c0d0:	4b08      	ldr	r3, [pc, #32]	; (c0f4 <_sbrk+0x34>)
    c0d2:	4a09      	ldr	r2, [pc, #36]	; (c0f8 <_sbrk+0x38>)
    c0d4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    c0d6:	4b07      	ldr	r3, [pc, #28]	; (c0f4 <_sbrk+0x34>)
    c0d8:	681b      	ldr	r3, [r3, #0]
    c0da:	60fb      	str	r3, [r7, #12]

	heap += incr;
    c0dc:	4b05      	ldr	r3, [pc, #20]	; (c0f4 <_sbrk+0x34>)
    c0de:	681a      	ldr	r2, [r3, #0]
    c0e0:	687b      	ldr	r3, [r7, #4]
    c0e2:	18d2      	adds	r2, r2, r3
    c0e4:	4b03      	ldr	r3, [pc, #12]	; (c0f4 <_sbrk+0x34>)
    c0e6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    c0e8:	68fb      	ldr	r3, [r7, #12]
}
    c0ea:	0018      	movs	r0, r3
    c0ec:	46bd      	mov	sp, r7
    c0ee:	b004      	add	sp, #16
    c0f0:	bd80      	pop	{r7, pc}
    c0f2:	46c0      	nop			; (mov r8, r8)
    c0f4:	20000134 	.word	0x20000134
    c0f8:	20006808 	.word	0x20006808

0000c0fc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    c0fc:	b580      	push	{r7, lr}
    c0fe:	b082      	sub	sp, #8
    c100:	af00      	add	r7, sp, #0
    c102:	6078      	str	r0, [r7, #4]
	return -1;
    c104:	2301      	movs	r3, #1
    c106:	425b      	negs	r3, r3
}
    c108:	0018      	movs	r0, r3
    c10a:	46bd      	mov	sp, r7
    c10c:	b002      	add	sp, #8
    c10e:	bd80      	pop	{r7, pc}

0000c110 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    c110:	b580      	push	{r7, lr}
    c112:	b082      	sub	sp, #8
    c114:	af00      	add	r7, sp, #0
    c116:	6078      	str	r0, [r7, #4]
    c118:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    c11a:	683b      	ldr	r3, [r7, #0]
    c11c:	2280      	movs	r2, #128	; 0x80
    c11e:	0192      	lsls	r2, r2, #6
    c120:	605a      	str	r2, [r3, #4]

	return 0;
    c122:	2300      	movs	r3, #0
}
    c124:	0018      	movs	r0, r3
    c126:	46bd      	mov	sp, r7
    c128:	b002      	add	sp, #8
    c12a:	bd80      	pop	{r7, pc}

0000c12c <_isatty>:

extern int _isatty(int file)
{
    c12c:	b580      	push	{r7, lr}
    c12e:	b082      	sub	sp, #8
    c130:	af00      	add	r7, sp, #0
    c132:	6078      	str	r0, [r7, #4]
	return 1;
    c134:	2301      	movs	r3, #1
}
    c136:	0018      	movs	r0, r3
    c138:	46bd      	mov	sp, r7
    c13a:	b002      	add	sp, #8
    c13c:	bd80      	pop	{r7, pc}
    c13e:	46c0      	nop			; (mov r8, r8)

0000c140 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    c140:	b580      	push	{r7, lr}
    c142:	b084      	sub	sp, #16
    c144:	af00      	add	r7, sp, #0
    c146:	60f8      	str	r0, [r7, #12]
    c148:	60b9      	str	r1, [r7, #8]
    c14a:	607a      	str	r2, [r7, #4]
	return 0;
    c14c:	2300      	movs	r3, #0
}
    c14e:	0018      	movs	r0, r3
    c150:	46bd      	mov	sp, r7
    c152:	b004      	add	sp, #16
    c154:	bd80      	pop	{r7, pc}
    c156:	46c0      	nop			; (mov r8, r8)

0000c158 <_exit>:

extern void _exit(int status)
{
    c158:	b580      	push	{r7, lr}
    c15a:	b082      	sub	sp, #8
    c15c:	af00      	add	r7, sp, #0
    c15e:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    c160:	be00      	bkpt	0x0000
}
    c162:	46c0      	nop			; (mov r8, r8)
    c164:	46bd      	mov	sp, r7
    c166:	b002      	add	sp, #8
    c168:	bd80      	pop	{r7, pc}
    c16a:	46c0      	nop			; (mov r8, r8)

0000c16c <_kill>:

extern void _kill(int pid, int sig)
{
    c16c:	b580      	push	{r7, lr}
    c16e:	b082      	sub	sp, #8
    c170:	af00      	add	r7, sp, #0
    c172:	6078      	str	r0, [r7, #4]
    c174:	6039      	str	r1, [r7, #0]
	return;
    c176:	46c0      	nop			; (mov r8, r8)
}
    c178:	46bd      	mov	sp, r7
    c17a:	b002      	add	sp, #8
    c17c:	bd80      	pop	{r7, pc}
    c17e:	46c0      	nop			; (mov r8, r8)

0000c180 <_getpid>:

extern int _getpid(void)
{
    c180:	b580      	push	{r7, lr}
    c182:	af00      	add	r7, sp, #0
	return -1;
    c184:	2301      	movs	r3, #1
    c186:	425b      	negs	r3, r3
}
    c188:	0018      	movs	r0, r3
    c18a:	46bd      	mov	sp, r7
    c18c:	bd80      	pop	{r7, pc}
    c18e:	46c0      	nop			; (mov r8, r8)

0000c190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    c190:	b580      	push	{r7, lr}
    c192:	b082      	sub	sp, #8
    c194:	af00      	add	r7, sp, #0
    c196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    c198:	687b      	ldr	r3, [r7, #4]
    c19a:	3308      	adds	r3, #8
    c19c:	001a      	movs	r2, r3
    c19e:	687b      	ldr	r3, [r7, #4]
    c1a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    c1a2:	687b      	ldr	r3, [r7, #4]
    c1a4:	2201      	movs	r2, #1
    c1a6:	4252      	negs	r2, r2
    c1a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	3308      	adds	r3, #8
    c1ae:	001a      	movs	r2, r3
    c1b0:	687b      	ldr	r3, [r7, #4]
    c1b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    c1b4:	687b      	ldr	r3, [r7, #4]
    c1b6:	3308      	adds	r3, #8
    c1b8:	001a      	movs	r2, r3
    c1ba:	687b      	ldr	r3, [r7, #4]
    c1bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    c1be:	687b      	ldr	r3, [r7, #4]
    c1c0:	2200      	movs	r2, #0
    c1c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    c1c4:	46c0      	nop			; (mov r8, r8)
    c1c6:	46bd      	mov	sp, r7
    c1c8:	b002      	add	sp, #8
    c1ca:	bd80      	pop	{r7, pc}

0000c1cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    c1cc:	b580      	push	{r7, lr}
    c1ce:	b082      	sub	sp, #8
    c1d0:	af00      	add	r7, sp, #0
    c1d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    c1d4:	687b      	ldr	r3, [r7, #4]
    c1d6:	2200      	movs	r2, #0
    c1d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    c1da:	46c0      	nop			; (mov r8, r8)
    c1dc:	46bd      	mov	sp, r7
    c1de:	b002      	add	sp, #8
    c1e0:	bd80      	pop	{r7, pc}
    c1e2:	46c0      	nop			; (mov r8, r8)

0000c1e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    c1e4:	b580      	push	{r7, lr}
    c1e6:	b084      	sub	sp, #16
    c1e8:	af00      	add	r7, sp, #0
    c1ea:	6078      	str	r0, [r7, #4]
    c1ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    c1ee:	687b      	ldr	r3, [r7, #4]
    c1f0:	685b      	ldr	r3, [r3, #4]
    c1f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    c1f4:	683b      	ldr	r3, [r7, #0]
    c1f6:	68fa      	ldr	r2, [r7, #12]
    c1f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    c1fa:	68fb      	ldr	r3, [r7, #12]
    c1fc:	689a      	ldr	r2, [r3, #8]
    c1fe:	683b      	ldr	r3, [r7, #0]
    c200:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    c202:	68fb      	ldr	r3, [r7, #12]
    c204:	689b      	ldr	r3, [r3, #8]
    c206:	683a      	ldr	r2, [r7, #0]
    c208:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    c20a:	68fb      	ldr	r3, [r7, #12]
    c20c:	683a      	ldr	r2, [r7, #0]
    c20e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    c210:	683b      	ldr	r3, [r7, #0]
    c212:	687a      	ldr	r2, [r7, #4]
    c214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    c216:	687b      	ldr	r3, [r7, #4]
    c218:	681b      	ldr	r3, [r3, #0]
    c21a:	1c5a      	adds	r2, r3, #1
    c21c:	687b      	ldr	r3, [r7, #4]
    c21e:	601a      	str	r2, [r3, #0]
}
    c220:	46c0      	nop			; (mov r8, r8)
    c222:	46bd      	mov	sp, r7
    c224:	b004      	add	sp, #16
    c226:	bd80      	pop	{r7, pc}

0000c228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    c228:	b580      	push	{r7, lr}
    c22a:	b084      	sub	sp, #16
    c22c:	af00      	add	r7, sp, #0
    c22e:	6078      	str	r0, [r7, #4]
    c230:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    c232:	683b      	ldr	r3, [r7, #0]
    c234:	681b      	ldr	r3, [r3, #0]
    c236:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    c238:	68bb      	ldr	r3, [r7, #8]
    c23a:	3301      	adds	r3, #1
    c23c:	d103      	bne.n	c246 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    c23e:	687b      	ldr	r3, [r7, #4]
    c240:	691b      	ldr	r3, [r3, #16]
    c242:	60fb      	str	r3, [r7, #12]
    c244:	e00c      	b.n	c260 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    c246:	687b      	ldr	r3, [r7, #4]
    c248:	3308      	adds	r3, #8
    c24a:	60fb      	str	r3, [r7, #12]
    c24c:	e002      	b.n	c254 <vListInsert+0x2c>
    c24e:	68fb      	ldr	r3, [r7, #12]
    c250:	685b      	ldr	r3, [r3, #4]
    c252:	60fb      	str	r3, [r7, #12]
    c254:	68fb      	ldr	r3, [r7, #12]
    c256:	685b      	ldr	r3, [r3, #4]
    c258:	681a      	ldr	r2, [r3, #0]
    c25a:	68bb      	ldr	r3, [r7, #8]
    c25c:	429a      	cmp	r2, r3
    c25e:	d9f6      	bls.n	c24e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    c260:	68fb      	ldr	r3, [r7, #12]
    c262:	685a      	ldr	r2, [r3, #4]
    c264:	683b      	ldr	r3, [r7, #0]
    c266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    c268:	683b      	ldr	r3, [r7, #0]
    c26a:	685b      	ldr	r3, [r3, #4]
    c26c:	683a      	ldr	r2, [r7, #0]
    c26e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    c270:	683b      	ldr	r3, [r7, #0]
    c272:	68fa      	ldr	r2, [r7, #12]
    c274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    c276:	68fb      	ldr	r3, [r7, #12]
    c278:	683a      	ldr	r2, [r7, #0]
    c27a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    c27c:	683b      	ldr	r3, [r7, #0]
    c27e:	687a      	ldr	r2, [r7, #4]
    c280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    c282:	687b      	ldr	r3, [r7, #4]
    c284:	681b      	ldr	r3, [r3, #0]
    c286:	1c5a      	adds	r2, r3, #1
    c288:	687b      	ldr	r3, [r7, #4]
    c28a:	601a      	str	r2, [r3, #0]
}
    c28c:	46c0      	nop			; (mov r8, r8)
    c28e:	46bd      	mov	sp, r7
    c290:	b004      	add	sp, #16
    c292:	bd80      	pop	{r7, pc}

0000c294 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    c294:	b580      	push	{r7, lr}
    c296:	b084      	sub	sp, #16
    c298:	af00      	add	r7, sp, #0
    c29a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    c29c:	687b      	ldr	r3, [r7, #4]
    c29e:	691b      	ldr	r3, [r3, #16]
    c2a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	685b      	ldr	r3, [r3, #4]
    c2a6:	687a      	ldr	r2, [r7, #4]
    c2a8:	6892      	ldr	r2, [r2, #8]
    c2aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    c2ac:	687b      	ldr	r3, [r7, #4]
    c2ae:	689b      	ldr	r3, [r3, #8]
    c2b0:	687a      	ldr	r2, [r7, #4]
    c2b2:	6852      	ldr	r2, [r2, #4]
    c2b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    c2b6:	68fb      	ldr	r3, [r7, #12]
    c2b8:	685a      	ldr	r2, [r3, #4]
    c2ba:	687b      	ldr	r3, [r7, #4]
    c2bc:	429a      	cmp	r2, r3
    c2be:	d103      	bne.n	c2c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	689a      	ldr	r2, [r3, #8]
    c2c4:	68fb      	ldr	r3, [r7, #12]
    c2c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    c2c8:	687b      	ldr	r3, [r7, #4]
    c2ca:	2200      	movs	r2, #0
    c2cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    c2ce:	68fb      	ldr	r3, [r7, #12]
    c2d0:	681b      	ldr	r3, [r3, #0]
    c2d2:	1e5a      	subs	r2, r3, #1
    c2d4:	68fb      	ldr	r3, [r7, #12]
    c2d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    c2d8:	68fb      	ldr	r3, [r7, #12]
    c2da:	681b      	ldr	r3, [r3, #0]
}
    c2dc:	0018      	movs	r0, r3
    c2de:	46bd      	mov	sp, r7
    c2e0:	b004      	add	sp, #16
    c2e2:	bd80      	pop	{r7, pc}

0000c2e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    c2e4:	b580      	push	{r7, lr}
    c2e6:	b084      	sub	sp, #16
    c2e8:	af00      	add	r7, sp, #0
    c2ea:	60f8      	str	r0, [r7, #12]
    c2ec:	60b9      	str	r1, [r7, #8]
    c2ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    c2f0:	68fb      	ldr	r3, [r7, #12]
    c2f2:	3b04      	subs	r3, #4
    c2f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    c2f6:	68fb      	ldr	r3, [r7, #12]
    c2f8:	2280      	movs	r2, #128	; 0x80
    c2fa:	0452      	lsls	r2, r2, #17
    c2fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c2fe:	68fb      	ldr	r3, [r7, #12]
    c300:	3b04      	subs	r3, #4
    c302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    c304:	68ba      	ldr	r2, [r7, #8]
    c306:	68fb      	ldr	r3, [r7, #12]
    c308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    c30a:	68fb      	ldr	r3, [r7, #12]
    c30c:	3b04      	subs	r3, #4
    c30e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    c310:	4a08      	ldr	r2, [pc, #32]	; (c334 <pxPortInitialiseStack+0x50>)
    c312:	68fb      	ldr	r3, [r7, #12]
    c314:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    c316:	68fb      	ldr	r3, [r7, #12]
    c318:	3b14      	subs	r3, #20
    c31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    c31c:	687a      	ldr	r2, [r7, #4]
    c31e:	68fb      	ldr	r3, [r7, #12]
    c320:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    c322:	68fb      	ldr	r3, [r7, #12]
    c324:	3b20      	subs	r3, #32
    c326:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    c328:	68fb      	ldr	r3, [r7, #12]
}
    c32a:	0018      	movs	r0, r3
    c32c:	46bd      	mov	sp, r7
    c32e:	b004      	add	sp, #16
    c330:	bd80      	pop	{r7, pc}
    c332:	46c0      	nop			; (mov r8, r8)
    c334:	0000c339 	.word	0x0000c339

0000c338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    c338:	b580      	push	{r7, lr}
    c33a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    c33c:	4b03      	ldr	r3, [pc, #12]	; (c34c <prvTaskExitError+0x14>)
    c33e:	681b      	ldr	r3, [r3, #0]
    c340:	3301      	adds	r3, #1
    c342:	d001      	beq.n	c348 <prvTaskExitError+0x10>
    c344:	b672      	cpsid	i
    c346:	e7fe      	b.n	c346 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    c348:	b672      	cpsid	i
	for( ;; );
    c34a:	e7fe      	b.n	c34a <prvTaskExitError+0x12>
    c34c:	20000024 	.word	0x20000024

0000c350 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    c350:	b580      	push	{r7, lr}
    c352:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    c354:	46c0      	nop			; (mov r8, r8)
    c356:	46bd      	mov	sp, r7
    c358:	bd80      	pop	{r7, pc}
    c35a:	46c0      	nop			; (mov r8, r8)
    c35c:	0000      	movs	r0, r0
	...

0000c360 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    c360:	4a0b      	ldr	r2, [pc, #44]	; (c390 <pxCurrentTCBConst2>)
    c362:	6813      	ldr	r3, [r2, #0]
    c364:	6818      	ldr	r0, [r3, #0]
    c366:	3020      	adds	r0, #32
    c368:	f380 8809 	msr	PSP, r0
    c36c:	2002      	movs	r0, #2
    c36e:	f380 8814 	msr	CONTROL, r0
    c372:	f3bf 8f6f 	isb	sy
    c376:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    c378:	46ae      	mov	lr, r5
    c37a:	bc08      	pop	{r3}
    c37c:	bc04      	pop	{r2}
    c37e:	b662      	cpsie	i
    c380:	4718      	bx	r3
    c382:	46c0      	nop			; (mov r8, r8)
    c384:	46c0      	nop			; (mov r8, r8)
    c386:	46c0      	nop			; (mov r8, r8)
    c388:	46c0      	nop			; (mov r8, r8)
    c38a:	46c0      	nop			; (mov r8, r8)
    c38c:	46c0      	nop			; (mov r8, r8)
    c38e:	46c0      	nop			; (mov r8, r8)

0000c390 <pxCurrentTCBConst2>:
    c390:	20003d40 	.word	0x20003d40
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    c394:	46c0      	nop			; (mov r8, r8)
    c396:	46c0      	nop			; (mov r8, r8)

0000c398 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    c398:	b580      	push	{r7, lr}
    c39a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    c39c:	4b0d      	ldr	r3, [pc, #52]	; (c3d4 <xPortStartScheduler+0x3c>)
    c39e:	4a0d      	ldr	r2, [pc, #52]	; (c3d4 <xPortStartScheduler+0x3c>)
    c3a0:	6812      	ldr	r2, [r2, #0]
    c3a2:	21ff      	movs	r1, #255	; 0xff
    c3a4:	0409      	lsls	r1, r1, #16
    c3a6:	430a      	orrs	r2, r1
    c3a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    c3aa:	4b0a      	ldr	r3, [pc, #40]	; (c3d4 <xPortStartScheduler+0x3c>)
    c3ac:	4a09      	ldr	r2, [pc, #36]	; (c3d4 <xPortStartScheduler+0x3c>)
    c3ae:	6812      	ldr	r2, [r2, #0]
    c3b0:	21ff      	movs	r1, #255	; 0xff
    c3b2:	0609      	lsls	r1, r1, #24
    c3b4:	430a      	orrs	r2, r1
    c3b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    c3b8:	4b07      	ldr	r3, [pc, #28]	; (c3d8 <xPortStartScheduler+0x40>)
    c3ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    c3bc:	4b07      	ldr	r3, [pc, #28]	; (c3dc <xPortStartScheduler+0x44>)
    c3be:	2200      	movs	r2, #0
    c3c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    c3c2:	4b07      	ldr	r3, [pc, #28]	; (c3e0 <xPortStartScheduler+0x48>)
    c3c4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    c3c6:	4b07      	ldr	r3, [pc, #28]	; (c3e4 <xPortStartScheduler+0x4c>)
    c3c8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    c3ca:	2300      	movs	r3, #0
}
    c3cc:	0018      	movs	r0, r3
    c3ce:	46bd      	mov	sp, r7
    c3d0:	bd80      	pop	{r7, pc}
    c3d2:	46c0      	nop			; (mov r8, r8)
    c3d4:	e000ed20 	.word	0xe000ed20
    c3d8:	0000c4f9 	.word	0x0000c4f9
    c3dc:	20000024 	.word	0x20000024
    c3e0:	0000c361 	.word	0x0000c361
    c3e4:	0000c339 	.word	0x0000c339

0000c3e8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    c3e8:	b580      	push	{r7, lr}
    c3ea:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    c3ec:	4b05      	ldr	r3, [pc, #20]	; (c404 <vPortYield+0x1c>)
    c3ee:	2280      	movs	r2, #128	; 0x80
    c3f0:	0552      	lsls	r2, r2, #21
    c3f2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    c3f4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    c3f8:	f3bf 8f6f 	isb	sy
}
    c3fc:	46c0      	nop			; (mov r8, r8)
    c3fe:	46bd      	mov	sp, r7
    c400:	bd80      	pop	{r7, pc}
    c402:	46c0      	nop			; (mov r8, r8)
    c404:	e000ed04 	.word	0xe000ed04

0000c408 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    c408:	b580      	push	{r7, lr}
    c40a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    c40c:	b672      	cpsid	i
    uxCriticalNesting++;
    c40e:	4b06      	ldr	r3, [pc, #24]	; (c428 <vPortEnterCritical+0x20>)
    c410:	681b      	ldr	r3, [r3, #0]
    c412:	1c5a      	adds	r2, r3, #1
    c414:	4b04      	ldr	r3, [pc, #16]	; (c428 <vPortEnterCritical+0x20>)
    c416:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    c418:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    c41c:	f3bf 8f6f 	isb	sy
}
    c420:	46c0      	nop			; (mov r8, r8)
    c422:	46bd      	mov	sp, r7
    c424:	bd80      	pop	{r7, pc}
    c426:	46c0      	nop			; (mov r8, r8)
    c428:	20000024 	.word	0x20000024

0000c42c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    c42c:	b580      	push	{r7, lr}
    c42e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    c430:	4b09      	ldr	r3, [pc, #36]	; (c458 <vPortExitCritical+0x2c>)
    c432:	681b      	ldr	r3, [r3, #0]
    c434:	2b00      	cmp	r3, #0
    c436:	d101      	bne.n	c43c <vPortExitCritical+0x10>
    c438:	b672      	cpsid	i
    c43a:	e7fe      	b.n	c43a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    c43c:	4b06      	ldr	r3, [pc, #24]	; (c458 <vPortExitCritical+0x2c>)
    c43e:	681b      	ldr	r3, [r3, #0]
    c440:	1e5a      	subs	r2, r3, #1
    c442:	4b05      	ldr	r3, [pc, #20]	; (c458 <vPortExitCritical+0x2c>)
    c444:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    c446:	4b04      	ldr	r3, [pc, #16]	; (c458 <vPortExitCritical+0x2c>)
    c448:	681b      	ldr	r3, [r3, #0]
    c44a:	2b00      	cmp	r3, #0
    c44c:	d100      	bne.n	c450 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    c44e:	b662      	cpsie	i
    }
}
    c450:	46c0      	nop			; (mov r8, r8)
    c452:	46bd      	mov	sp, r7
    c454:	bd80      	pop	{r7, pc}
    c456:	46c0      	nop			; (mov r8, r8)
    c458:	20000024 	.word	0x20000024

0000c45c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    c45c:	f3ef 8010 	mrs	r0, PRIMASK
    c460:	b672      	cpsid	i
    c462:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    c464:	46c0      	nop			; (mov r8, r8)
    c466:	0018      	movs	r0, r3

0000c468 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    c468:	f380 8810 	msr	PRIMASK, r0
    c46c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    c46e:	46c0      	nop			; (mov r8, r8)

0000c470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    c470:	f3ef 8009 	mrs	r0, PSP
    c474:	4b0e      	ldr	r3, [pc, #56]	; (c4b0 <pxCurrentTCBConst>)
    c476:	681a      	ldr	r2, [r3, #0]
    c478:	3820      	subs	r0, #32
    c47a:	6010      	str	r0, [r2, #0]
    c47c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    c47e:	4644      	mov	r4, r8
    c480:	464d      	mov	r5, r9
    c482:	4656      	mov	r6, sl
    c484:	465f      	mov	r7, fp
    c486:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    c488:	b508      	push	{r3, lr}
    c48a:	b672      	cpsid	i
    c48c:	f001 f98c 	bl	d7a8 <vTaskSwitchContext>
    c490:	b662      	cpsie	i
    c492:	bc0c      	pop	{r2, r3}
    c494:	6811      	ldr	r1, [r2, #0]
    c496:	6808      	ldr	r0, [r1, #0]
    c498:	3010      	adds	r0, #16
    c49a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    c49c:	46a0      	mov	r8, r4
    c49e:	46a9      	mov	r9, r5
    c4a0:	46b2      	mov	sl, r6
    c4a2:	46bb      	mov	fp, r7
    c4a4:	f380 8809 	msr	PSP, r0
    c4a8:	3820      	subs	r0, #32
    c4aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    c4ac:	4718      	bx	r3
    c4ae:	46c0      	nop			; (mov r8, r8)

0000c4b0 <pxCurrentTCBConst>:
    c4b0:	20003d40 	.word	0x20003d40
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    c4b4:	46c0      	nop			; (mov r8, r8)
    c4b6:	46c0      	nop			; (mov r8, r8)

0000c4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    c4b8:	b580      	push	{r7, lr}
    c4ba:	b082      	sub	sp, #8
    c4bc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    c4be:	4b0a      	ldr	r3, [pc, #40]	; (c4e8 <SysTick_Handler+0x30>)
    c4c0:	4798      	blx	r3
    c4c2:	0003      	movs	r3, r0
    c4c4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    c4c6:	4b09      	ldr	r3, [pc, #36]	; (c4ec <SysTick_Handler+0x34>)
    c4c8:	4798      	blx	r3
    c4ca:	1e03      	subs	r3, r0, #0
    c4cc:	d003      	beq.n	c4d6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    c4ce:	4b08      	ldr	r3, [pc, #32]	; (c4f0 <SysTick_Handler+0x38>)
    c4d0:	2280      	movs	r2, #128	; 0x80
    c4d2:	0552      	lsls	r2, r2, #21
    c4d4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    c4d6:	687b      	ldr	r3, [r7, #4]
    c4d8:	0018      	movs	r0, r3
    c4da:	4b06      	ldr	r3, [pc, #24]	; (c4f4 <SysTick_Handler+0x3c>)
    c4dc:	4798      	blx	r3
}
    c4de:	46c0      	nop			; (mov r8, r8)
    c4e0:	46bd      	mov	sp, r7
    c4e2:	b002      	add	sp, #8
    c4e4:	bd80      	pop	{r7, pc}
    c4e6:	46c0      	nop			; (mov r8, r8)
    c4e8:	0000c45d 	.word	0x0000c45d
    c4ec:	0000d651 	.word	0x0000d651
    c4f0:	e000ed04 	.word	0xe000ed04
    c4f4:	0000c469 	.word	0x0000c469

0000c4f8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    c4f8:	b580      	push	{r7, lr}
    c4fa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    c4fc:	4b04      	ldr	r3, [pc, #16]	; (c510 <prvSetupTimerInterrupt+0x18>)
    c4fe:	4a05      	ldr	r2, [pc, #20]	; (c514 <prvSetupTimerInterrupt+0x1c>)
    c500:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    c502:	4b05      	ldr	r3, [pc, #20]	; (c518 <prvSetupTimerInterrupt+0x20>)
    c504:	2207      	movs	r2, #7
    c506:	601a      	str	r2, [r3, #0]
}
    c508:	46c0      	nop			; (mov r8, r8)
    c50a:	46bd      	mov	sp, r7
    c50c:	bd80      	pop	{r7, pc}
    c50e:	46c0      	nop			; (mov r8, r8)
    c510:	e000e014 	.word	0xe000e014
    c514:	000752ff 	.word	0x000752ff
    c518:	e000e010 	.word	0xe000e010

0000c51c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    c51c:	b580      	push	{r7, lr}
    c51e:	b084      	sub	sp, #16
    c520:	af00      	add	r7, sp, #0
    c522:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    c524:	2300      	movs	r3, #0
    c526:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    c528:	687b      	ldr	r3, [r7, #4]
    c52a:	2207      	movs	r2, #7
    c52c:	4013      	ands	r3, r2
    c52e:	d004      	beq.n	c53a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    c530:	687b      	ldr	r3, [r7, #4]
    c532:	2207      	movs	r2, #7
    c534:	4393      	bics	r3, r2
    c536:	3308      	adds	r3, #8
    c538:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    c53a:	4b19      	ldr	r3, [pc, #100]	; (c5a0 <pvPortMalloc+0x84>)
    c53c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    c53e:	4b19      	ldr	r3, [pc, #100]	; (c5a4 <pvPortMalloc+0x88>)
    c540:	681b      	ldr	r3, [r3, #0]
    c542:	2b00      	cmp	r3, #0
    c544:	d105      	bne.n	c552 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    c546:	4b18      	ldr	r3, [pc, #96]	; (c5a8 <pvPortMalloc+0x8c>)
    c548:	2207      	movs	r2, #7
    c54a:	4393      	bics	r3, r2
    c54c:	001a      	movs	r2, r3
    c54e:	4b15      	ldr	r3, [pc, #84]	; (c5a4 <pvPortMalloc+0x88>)
    c550:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    c552:	4b16      	ldr	r3, [pc, #88]	; (c5ac <pvPortMalloc+0x90>)
    c554:	681a      	ldr	r2, [r3, #0]
    c556:	687b      	ldr	r3, [r7, #4]
    c558:	18d3      	adds	r3, r2, r3
    c55a:	4a15      	ldr	r2, [pc, #84]	; (c5b0 <pvPortMalloc+0x94>)
    c55c:	4293      	cmp	r3, r2
    c55e:	d813      	bhi.n	c588 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    c560:	4b12      	ldr	r3, [pc, #72]	; (c5ac <pvPortMalloc+0x90>)
    c562:	681a      	ldr	r2, [r3, #0]
    c564:	687b      	ldr	r3, [r7, #4]
    c566:	18d2      	adds	r2, r2, r3
    c568:	4b10      	ldr	r3, [pc, #64]	; (c5ac <pvPortMalloc+0x90>)
    c56a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    c56c:	429a      	cmp	r2, r3
    c56e:	d90b      	bls.n	c588 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    c570:	4b0c      	ldr	r3, [pc, #48]	; (c5a4 <pvPortMalloc+0x88>)
    c572:	681a      	ldr	r2, [r3, #0]
    c574:	4b0d      	ldr	r3, [pc, #52]	; (c5ac <pvPortMalloc+0x90>)
    c576:	681b      	ldr	r3, [r3, #0]
    c578:	18d3      	adds	r3, r2, r3
    c57a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    c57c:	4b0b      	ldr	r3, [pc, #44]	; (c5ac <pvPortMalloc+0x90>)
    c57e:	681a      	ldr	r2, [r3, #0]
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	18d2      	adds	r2, r2, r3
    c584:	4b09      	ldr	r3, [pc, #36]	; (c5ac <pvPortMalloc+0x90>)
    c586:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    c588:	4b0a      	ldr	r3, [pc, #40]	; (c5b4 <pvPortMalloc+0x98>)
    c58a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    c58c:	68fb      	ldr	r3, [r7, #12]
    c58e:	2b00      	cmp	r3, #0
    c590:	d101      	bne.n	c596 <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    c592:	4b09      	ldr	r3, [pc, #36]	; (c5b8 <pvPortMalloc+0x9c>)
    c594:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    c596:	68fb      	ldr	r3, [r7, #12]
}
    c598:	0018      	movs	r0, r3
    c59a:	46bd      	mov	sp, r7
    c59c:	b004      	add	sp, #16
    c59e:	bd80      	pop	{r7, pc}
    c5a0:	0000d4e9 	.word	0x0000d4e9
    c5a4:	20003d3c 	.word	0x20003d3c
    c5a8:	20000140 	.word	0x20000140
    c5ac:	20003d38 	.word	0x20003d38
    c5b0:	00003bf7 	.word	0x00003bf7
    c5b4:	0000d501 	.word	0x0000d501
    c5b8:	0000f105 	.word	0x0000f105

0000c5bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    c5bc:	b580      	push	{r7, lr}
    c5be:	b082      	sub	sp, #8
    c5c0:	af00      	add	r7, sp, #0
    c5c2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    c5c4:	687b      	ldr	r3, [r7, #4]
    c5c6:	2b00      	cmp	r3, #0
    c5c8:	d001      	beq.n	c5ce <vPortFree+0x12>
    c5ca:	b672      	cpsid	i
    c5cc:	e7fe      	b.n	c5cc <vPortFree+0x10>
}
    c5ce:	46c0      	nop			; (mov r8, r8)
    c5d0:	46bd      	mov	sp, r7
    c5d2:	b002      	add	sp, #8
    c5d4:	bd80      	pop	{r7, pc}
    c5d6:	46c0      	nop			; (mov r8, r8)

0000c5d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    c5d8:	b580      	push	{r7, lr}
    c5da:	b084      	sub	sp, #16
    c5dc:	af00      	add	r7, sp, #0
    c5de:	6078      	str	r0, [r7, #4]
    c5e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    c5e2:	687b      	ldr	r3, [r7, #4]
    c5e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    c5e6:	68fb      	ldr	r3, [r7, #12]
    c5e8:	2b00      	cmp	r3, #0
    c5ea:	d101      	bne.n	c5f0 <xQueueGenericReset+0x18>
    c5ec:	b672      	cpsid	i
    c5ee:	e7fe      	b.n	c5ee <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    c5f0:	4b23      	ldr	r3, [pc, #140]	; (c680 <xQueueGenericReset+0xa8>)
    c5f2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	681a      	ldr	r2, [r3, #0]
    c5f8:	68fb      	ldr	r3, [r7, #12]
    c5fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    c5fc:	68fb      	ldr	r3, [r7, #12]
    c5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c600:	434b      	muls	r3, r1
    c602:	18d2      	adds	r2, r2, r3
    c604:	68fb      	ldr	r3, [r7, #12]
    c606:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    c608:	68fb      	ldr	r3, [r7, #12]
    c60a:	2200      	movs	r2, #0
    c60c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    c60e:	68fb      	ldr	r3, [r7, #12]
    c610:	681a      	ldr	r2, [r3, #0]
    c612:	68fb      	ldr	r3, [r7, #12]
    c614:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    c616:	68fb      	ldr	r3, [r7, #12]
    c618:	681a      	ldr	r2, [r3, #0]
    c61a:	68fb      	ldr	r3, [r7, #12]
    c61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c61e:	1e59      	subs	r1, r3, #1
    c620:	68fb      	ldr	r3, [r7, #12]
    c622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c624:	434b      	muls	r3, r1
    c626:	18d2      	adds	r2, r2, r3
    c628:	68fb      	ldr	r3, [r7, #12]
    c62a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    c62c:	68fb      	ldr	r3, [r7, #12]
    c62e:	2244      	movs	r2, #68	; 0x44
    c630:	21ff      	movs	r1, #255	; 0xff
    c632:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    c634:	68fb      	ldr	r3, [r7, #12]
    c636:	2245      	movs	r2, #69	; 0x45
    c638:	21ff      	movs	r1, #255	; 0xff
    c63a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    c63c:	683b      	ldr	r3, [r7, #0]
    c63e:	2b00      	cmp	r3, #0
    c640:	d10d      	bne.n	c65e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    c642:	68fb      	ldr	r3, [r7, #12]
    c644:	691b      	ldr	r3, [r3, #16]
    c646:	2b00      	cmp	r3, #0
    c648:	d013      	beq.n	c672 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    c64a:	68fb      	ldr	r3, [r7, #12]
    c64c:	3310      	adds	r3, #16
    c64e:	0018      	movs	r0, r3
    c650:	4b0c      	ldr	r3, [pc, #48]	; (c684 <xQueueGenericReset+0xac>)
    c652:	4798      	blx	r3
    c654:	1e03      	subs	r3, r0, #0
    c656:	d00c      	beq.n	c672 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    c658:	4b0b      	ldr	r3, [pc, #44]	; (c688 <xQueueGenericReset+0xb0>)
    c65a:	4798      	blx	r3
    c65c:	e009      	b.n	c672 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    c65e:	68fb      	ldr	r3, [r7, #12]
    c660:	3310      	adds	r3, #16
    c662:	0018      	movs	r0, r3
    c664:	4b09      	ldr	r3, [pc, #36]	; (c68c <xQueueGenericReset+0xb4>)
    c666:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    c668:	68fb      	ldr	r3, [r7, #12]
    c66a:	3324      	adds	r3, #36	; 0x24
    c66c:	0018      	movs	r0, r3
    c66e:	4b07      	ldr	r3, [pc, #28]	; (c68c <xQueueGenericReset+0xb4>)
    c670:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    c672:	4b07      	ldr	r3, [pc, #28]	; (c690 <xQueueGenericReset+0xb8>)
    c674:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    c676:	2301      	movs	r3, #1
}
    c678:	0018      	movs	r0, r3
    c67a:	46bd      	mov	sp, r7
    c67c:	b004      	add	sp, #16
    c67e:	bd80      	pop	{r7, pc}
    c680:	0000c409 	.word	0x0000c409
    c684:	0000d909 	.word	0x0000d909
    c688:	0000c3e9 	.word	0x0000c3e9
    c68c:	0000c191 	.word	0x0000c191
    c690:	0000c42d 	.word	0x0000c42d

0000c694 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    c694:	b590      	push	{r4, r7, lr}
    c696:	b08b      	sub	sp, #44	; 0x2c
    c698:	af02      	add	r7, sp, #8
    c69a:	60f8      	str	r0, [r7, #12]
    c69c:	60b9      	str	r1, [r7, #8]
    c69e:	1dfb      	adds	r3, r7, #7
    c6a0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    c6a2:	68fb      	ldr	r3, [r7, #12]
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	d101      	bne.n	c6ac <xQueueGenericCreate+0x18>
    c6a8:	b672      	cpsid	i
    c6aa:	e7fe      	b.n	c6aa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    c6ac:	68bb      	ldr	r3, [r7, #8]
    c6ae:	2b00      	cmp	r3, #0
    c6b0:	d102      	bne.n	c6b8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    c6b2:	2300      	movs	r3, #0
    c6b4:	61fb      	str	r3, [r7, #28]
    c6b6:	e003      	b.n	c6c0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c6b8:	68fb      	ldr	r3, [r7, #12]
    c6ba:	68ba      	ldr	r2, [r7, #8]
    c6bc:	4353      	muls	r3, r2
    c6be:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    c6c0:	69fb      	ldr	r3, [r7, #28]
    c6c2:	334c      	adds	r3, #76	; 0x4c
    c6c4:	0018      	movs	r0, r3
    c6c6:	4b0c      	ldr	r3, [pc, #48]	; (c6f8 <xQueueGenericCreate+0x64>)
    c6c8:	4798      	blx	r3
    c6ca:	0003      	movs	r3, r0
    c6cc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    c6ce:	69bb      	ldr	r3, [r7, #24]
    c6d0:	2b00      	cmp	r3, #0
    c6d2:	d00c      	beq.n	c6ee <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    c6d4:	69bb      	ldr	r3, [r7, #24]
    c6d6:	334c      	adds	r3, #76	; 0x4c
    c6d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    c6da:	1dfb      	adds	r3, r7, #7
    c6dc:	781c      	ldrb	r4, [r3, #0]
    c6de:	697a      	ldr	r2, [r7, #20]
    c6e0:	68b9      	ldr	r1, [r7, #8]
    c6e2:	68f8      	ldr	r0, [r7, #12]
    c6e4:	69bb      	ldr	r3, [r7, #24]
    c6e6:	9300      	str	r3, [sp, #0]
    c6e8:	0023      	movs	r3, r4
    c6ea:	4c04      	ldr	r4, [pc, #16]	; (c6fc <xQueueGenericCreate+0x68>)
    c6ec:	47a0      	blx	r4
		}

		return pxNewQueue;
    c6ee:	69bb      	ldr	r3, [r7, #24]
	}
    c6f0:	0018      	movs	r0, r3
    c6f2:	46bd      	mov	sp, r7
    c6f4:	b009      	add	sp, #36	; 0x24
    c6f6:	bd90      	pop	{r4, r7, pc}
    c6f8:	0000c51d 	.word	0x0000c51d
    c6fc:	0000c701 	.word	0x0000c701

0000c700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    c700:	b580      	push	{r7, lr}
    c702:	b084      	sub	sp, #16
    c704:	af00      	add	r7, sp, #0
    c706:	60f8      	str	r0, [r7, #12]
    c708:	60b9      	str	r1, [r7, #8]
    c70a:	607a      	str	r2, [r7, #4]
    c70c:	001a      	movs	r2, r3
    c70e:	1cfb      	adds	r3, r7, #3
    c710:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    c712:	68bb      	ldr	r3, [r7, #8]
    c714:	2b00      	cmp	r3, #0
    c716:	d103      	bne.n	c720 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    c718:	69bb      	ldr	r3, [r7, #24]
    c71a:	69ba      	ldr	r2, [r7, #24]
    c71c:	601a      	str	r2, [r3, #0]
    c71e:	e002      	b.n	c726 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    c720:	69bb      	ldr	r3, [r7, #24]
    c722:	687a      	ldr	r2, [r7, #4]
    c724:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    c726:	69bb      	ldr	r3, [r7, #24]
    c728:	68fa      	ldr	r2, [r7, #12]
    c72a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    c72c:	69bb      	ldr	r3, [r7, #24]
    c72e:	68ba      	ldr	r2, [r7, #8]
    c730:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    c732:	69bb      	ldr	r3, [r7, #24]
    c734:	2101      	movs	r1, #1
    c736:	0018      	movs	r0, r3
    c738:	4b04      	ldr	r3, [pc, #16]	; (c74c <prvInitialiseNewQueue+0x4c>)
    c73a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    c73c:	69bb      	ldr	r3, [r7, #24]
    c73e:	2200      	movs	r2, #0
    c740:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    c742:	46c0      	nop			; (mov r8, r8)
    c744:	46bd      	mov	sp, r7
    c746:	b004      	add	sp, #16
    c748:	bd80      	pop	{r7, pc}
    c74a:	46c0      	nop			; (mov r8, r8)
    c74c:	0000c5d9 	.word	0x0000c5d9

0000c750 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    c750:	b590      	push	{r4, r7, lr}
    c752:	b083      	sub	sp, #12
    c754:	af00      	add	r7, sp, #0
    c756:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	2b00      	cmp	r3, #0
    c75c:	d00e      	beq.n	c77c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    c75e:	687b      	ldr	r3, [r7, #4]
    c760:	2200      	movs	r2, #0
    c762:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    c764:	687b      	ldr	r3, [r7, #4]
    c766:	2200      	movs	r2, #0
    c768:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    c76a:	687b      	ldr	r3, [r7, #4]
    c76c:	2200      	movs	r2, #0
    c76e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    c770:	6878      	ldr	r0, [r7, #4]
    c772:	2300      	movs	r3, #0
    c774:	2200      	movs	r2, #0
    c776:	2100      	movs	r1, #0
    c778:	4c02      	ldr	r4, [pc, #8]	; (c784 <prvInitialiseMutex+0x34>)
    c77a:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    c77c:	46c0      	nop			; (mov r8, r8)
    c77e:	46bd      	mov	sp, r7
    c780:	b003      	add	sp, #12
    c782:	bd90      	pop	{r4, r7, pc}
    c784:	0000c7c9 	.word	0x0000c7c9

0000c788 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    c788:	b580      	push	{r7, lr}
    c78a:	b086      	sub	sp, #24
    c78c:	af00      	add	r7, sp, #0
    c78e:	0002      	movs	r2, r0
    c790:	1dfb      	adds	r3, r7, #7
    c792:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    c794:	2301      	movs	r3, #1
    c796:	617b      	str	r3, [r7, #20]
    c798:	2300      	movs	r3, #0
    c79a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    c79c:	1dfb      	adds	r3, r7, #7
    c79e:	781a      	ldrb	r2, [r3, #0]
    c7a0:	6939      	ldr	r1, [r7, #16]
    c7a2:	697b      	ldr	r3, [r7, #20]
    c7a4:	0018      	movs	r0, r3
    c7a6:	4b06      	ldr	r3, [pc, #24]	; (c7c0 <xQueueCreateMutex+0x38>)
    c7a8:	4798      	blx	r3
    c7aa:	0003      	movs	r3, r0
    c7ac:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    c7ae:	68fb      	ldr	r3, [r7, #12]
    c7b0:	0018      	movs	r0, r3
    c7b2:	4b04      	ldr	r3, [pc, #16]	; (c7c4 <xQueueCreateMutex+0x3c>)
    c7b4:	4798      	blx	r3

		return pxNewQueue;
    c7b6:	68fb      	ldr	r3, [r7, #12]
	}
    c7b8:	0018      	movs	r0, r3
    c7ba:	46bd      	mov	sp, r7
    c7bc:	b006      	add	sp, #24
    c7be:	bd80      	pop	{r7, pc}
    c7c0:	0000c695 	.word	0x0000c695
    c7c4:	0000c751 	.word	0x0000c751

0000c7c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    c7c8:	b580      	push	{r7, lr}
    c7ca:	b08a      	sub	sp, #40	; 0x28
    c7cc:	af00      	add	r7, sp, #0
    c7ce:	60f8      	str	r0, [r7, #12]
    c7d0:	60b9      	str	r1, [r7, #8]
    c7d2:	607a      	str	r2, [r7, #4]
    c7d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    c7d6:	2300      	movs	r3, #0
    c7d8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    c7da:	68fb      	ldr	r3, [r7, #12]
    c7dc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    c7de:	6a3b      	ldr	r3, [r7, #32]
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d101      	bne.n	c7e8 <xQueueGenericSend+0x20>
    c7e4:	b672      	cpsid	i
    c7e6:	e7fe      	b.n	c7e6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    c7e8:	68bb      	ldr	r3, [r7, #8]
    c7ea:	2b00      	cmp	r3, #0
    c7ec:	d103      	bne.n	c7f6 <xQueueGenericSend+0x2e>
    c7ee:	6a3b      	ldr	r3, [r7, #32]
    c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d101      	bne.n	c7fa <xQueueGenericSend+0x32>
    c7f6:	2301      	movs	r3, #1
    c7f8:	e000      	b.n	c7fc <xQueueGenericSend+0x34>
    c7fa:	2300      	movs	r3, #0
    c7fc:	2b00      	cmp	r3, #0
    c7fe:	d101      	bne.n	c804 <xQueueGenericSend+0x3c>
    c800:	b672      	cpsid	i
    c802:	e7fe      	b.n	c802 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    c804:	683b      	ldr	r3, [r7, #0]
    c806:	2b02      	cmp	r3, #2
    c808:	d103      	bne.n	c812 <xQueueGenericSend+0x4a>
    c80a:	6a3b      	ldr	r3, [r7, #32]
    c80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c80e:	2b01      	cmp	r3, #1
    c810:	d101      	bne.n	c816 <xQueueGenericSend+0x4e>
    c812:	2301      	movs	r3, #1
    c814:	e000      	b.n	c818 <xQueueGenericSend+0x50>
    c816:	2300      	movs	r3, #0
    c818:	2b00      	cmp	r3, #0
    c81a:	d101      	bne.n	c820 <xQueueGenericSend+0x58>
    c81c:	b672      	cpsid	i
    c81e:	e7fe      	b.n	c81e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    c820:	4b53      	ldr	r3, [pc, #332]	; (c970 <xQueueGenericSend+0x1a8>)
    c822:	4798      	blx	r3
    c824:	1e03      	subs	r3, r0, #0
    c826:	d102      	bne.n	c82e <xQueueGenericSend+0x66>
    c828:	687b      	ldr	r3, [r7, #4]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d101      	bne.n	c832 <xQueueGenericSend+0x6a>
    c82e:	2301      	movs	r3, #1
    c830:	e000      	b.n	c834 <xQueueGenericSend+0x6c>
    c832:	2300      	movs	r3, #0
    c834:	2b00      	cmp	r3, #0
    c836:	d101      	bne.n	c83c <xQueueGenericSend+0x74>
    c838:	b672      	cpsid	i
    c83a:	e7fe      	b.n	c83a <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    c83c:	4b4d      	ldr	r3, [pc, #308]	; (c974 <xQueueGenericSend+0x1ac>)
    c83e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    c840:	6a3b      	ldr	r3, [r7, #32]
    c842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    c844:	6a3b      	ldr	r3, [r7, #32]
    c846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c848:	429a      	cmp	r2, r3
    c84a:	d302      	bcc.n	c852 <xQueueGenericSend+0x8a>
    c84c:	683b      	ldr	r3, [r7, #0]
    c84e:	2b02      	cmp	r3, #2
    c850:	d12d      	bne.n	c8ae <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    c852:	683a      	ldr	r2, [r7, #0]
    c854:	68b9      	ldr	r1, [r7, #8]
    c856:	6a3b      	ldr	r3, [r7, #32]
    c858:	0018      	movs	r0, r3
    c85a:	4b47      	ldr	r3, [pc, #284]	; (c978 <xQueueGenericSend+0x1b0>)
    c85c:	4798      	blx	r3
    c85e:	0003      	movs	r3, r0
    c860:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    c862:	6a3b      	ldr	r3, [r7, #32]
    c864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c866:	2b00      	cmp	r3, #0
    c868:	d00a      	beq.n	c880 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    c86a:	683a      	ldr	r2, [r7, #0]
    c86c:	6a3b      	ldr	r3, [r7, #32]
    c86e:	0011      	movs	r1, r2
    c870:	0018      	movs	r0, r3
    c872:	4b42      	ldr	r3, [pc, #264]	; (c97c <xQueueGenericSend+0x1b4>)
    c874:	4798      	blx	r3
    c876:	1e03      	subs	r3, r0, #0
    c878:	d015      	beq.n	c8a6 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    c87a:	4b41      	ldr	r3, [pc, #260]	; (c980 <xQueueGenericSend+0x1b8>)
    c87c:	4798      	blx	r3
    c87e:	e012      	b.n	c8a6 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    c880:	6a3b      	ldr	r3, [r7, #32]
    c882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c884:	2b00      	cmp	r3, #0
    c886:	d009      	beq.n	c89c <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    c888:	6a3b      	ldr	r3, [r7, #32]
    c88a:	3324      	adds	r3, #36	; 0x24
    c88c:	0018      	movs	r0, r3
    c88e:	4b3d      	ldr	r3, [pc, #244]	; (c984 <xQueueGenericSend+0x1bc>)
    c890:	4798      	blx	r3
    c892:	1e03      	subs	r3, r0, #0
    c894:	d007      	beq.n	c8a6 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    c896:	4b3a      	ldr	r3, [pc, #232]	; (c980 <xQueueGenericSend+0x1b8>)
    c898:	4798      	blx	r3
    c89a:	e004      	b.n	c8a6 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    c89c:	69fb      	ldr	r3, [r7, #28]
    c89e:	2b00      	cmp	r3, #0
    c8a0:	d001      	beq.n	c8a6 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    c8a2:	4b37      	ldr	r3, [pc, #220]	; (c980 <xQueueGenericSend+0x1b8>)
    c8a4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    c8a6:	4b38      	ldr	r3, [pc, #224]	; (c988 <xQueueGenericSend+0x1c0>)
    c8a8:	4798      	blx	r3
				return pdPASS;
    c8aa:	2301      	movs	r3, #1
    c8ac:	e05c      	b.n	c968 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    c8ae:	687b      	ldr	r3, [r7, #4]
    c8b0:	2b00      	cmp	r3, #0
    c8b2:	d103      	bne.n	c8bc <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    c8b4:	4b34      	ldr	r3, [pc, #208]	; (c988 <xQueueGenericSend+0x1c0>)
    c8b6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    c8b8:	2300      	movs	r3, #0
    c8ba:	e055      	b.n	c968 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8be:	2b00      	cmp	r3, #0
    c8c0:	d106      	bne.n	c8d0 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    c8c2:	2314      	movs	r3, #20
    c8c4:	18fb      	adds	r3, r7, r3
    c8c6:	0018      	movs	r0, r3
    c8c8:	4b30      	ldr	r3, [pc, #192]	; (c98c <xQueueGenericSend+0x1c4>)
    c8ca:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    c8cc:	2301      	movs	r3, #1
    c8ce:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    c8d0:	4b2d      	ldr	r3, [pc, #180]	; (c988 <xQueueGenericSend+0x1c0>)
    c8d2:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    c8d4:	4b2e      	ldr	r3, [pc, #184]	; (c990 <xQueueGenericSend+0x1c8>)
    c8d6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    c8d8:	4b26      	ldr	r3, [pc, #152]	; (c974 <xQueueGenericSend+0x1ac>)
    c8da:	4798      	blx	r3
    c8dc:	6a3b      	ldr	r3, [r7, #32]
    c8de:	2244      	movs	r2, #68	; 0x44
    c8e0:	5c9b      	ldrb	r3, [r3, r2]
    c8e2:	b25b      	sxtb	r3, r3
    c8e4:	3301      	adds	r3, #1
    c8e6:	d103      	bne.n	c8f0 <xQueueGenericSend+0x128>
    c8e8:	6a3b      	ldr	r3, [r7, #32]
    c8ea:	2244      	movs	r2, #68	; 0x44
    c8ec:	2100      	movs	r1, #0
    c8ee:	5499      	strb	r1, [r3, r2]
    c8f0:	6a3b      	ldr	r3, [r7, #32]
    c8f2:	2245      	movs	r2, #69	; 0x45
    c8f4:	5c9b      	ldrb	r3, [r3, r2]
    c8f6:	b25b      	sxtb	r3, r3
    c8f8:	3301      	adds	r3, #1
    c8fa:	d103      	bne.n	c904 <xQueueGenericSend+0x13c>
    c8fc:	6a3b      	ldr	r3, [r7, #32]
    c8fe:	2245      	movs	r2, #69	; 0x45
    c900:	2100      	movs	r1, #0
    c902:	5499      	strb	r1, [r3, r2]
    c904:	4b20      	ldr	r3, [pc, #128]	; (c988 <xQueueGenericSend+0x1c0>)
    c906:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    c908:	1d3a      	adds	r2, r7, #4
    c90a:	2314      	movs	r3, #20
    c90c:	18fb      	adds	r3, r7, r3
    c90e:	0011      	movs	r1, r2
    c910:	0018      	movs	r0, r3
    c912:	4b20      	ldr	r3, [pc, #128]	; (c994 <xQueueGenericSend+0x1cc>)
    c914:	4798      	blx	r3
    c916:	1e03      	subs	r3, r0, #0
    c918:	d11f      	bne.n	c95a <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    c91a:	6a3b      	ldr	r3, [r7, #32]
    c91c:	0018      	movs	r0, r3
    c91e:	4b1e      	ldr	r3, [pc, #120]	; (c998 <xQueueGenericSend+0x1d0>)
    c920:	4798      	blx	r3
    c922:	1e03      	subs	r3, r0, #0
    c924:	d012      	beq.n	c94c <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    c926:	6a3b      	ldr	r3, [r7, #32]
    c928:	3310      	adds	r3, #16
    c92a:	687a      	ldr	r2, [r7, #4]
    c92c:	0011      	movs	r1, r2
    c92e:	0018      	movs	r0, r3
    c930:	4b1a      	ldr	r3, [pc, #104]	; (c99c <xQueueGenericSend+0x1d4>)
    c932:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    c934:	6a3b      	ldr	r3, [r7, #32]
    c936:	0018      	movs	r0, r3
    c938:	4b19      	ldr	r3, [pc, #100]	; (c9a0 <xQueueGenericSend+0x1d8>)
    c93a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    c93c:	4b19      	ldr	r3, [pc, #100]	; (c9a4 <xQueueGenericSend+0x1dc>)
    c93e:	4798      	blx	r3
    c940:	1e03      	subs	r3, r0, #0
    c942:	d000      	beq.n	c946 <xQueueGenericSend+0x17e>
    c944:	e77a      	b.n	c83c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    c946:	4b0e      	ldr	r3, [pc, #56]	; (c980 <xQueueGenericSend+0x1b8>)
    c948:	4798      	blx	r3
    c94a:	e777      	b.n	c83c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    c94c:	6a3b      	ldr	r3, [r7, #32]
    c94e:	0018      	movs	r0, r3
    c950:	4b13      	ldr	r3, [pc, #76]	; (c9a0 <xQueueGenericSend+0x1d8>)
    c952:	4798      	blx	r3
				( void ) xTaskResumeAll();
    c954:	4b13      	ldr	r3, [pc, #76]	; (c9a4 <xQueueGenericSend+0x1dc>)
    c956:	4798      	blx	r3
    c958:	e770      	b.n	c83c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    c95a:	6a3b      	ldr	r3, [r7, #32]
    c95c:	0018      	movs	r0, r3
    c95e:	4b10      	ldr	r3, [pc, #64]	; (c9a0 <xQueueGenericSend+0x1d8>)
    c960:	4798      	blx	r3
			( void ) xTaskResumeAll();
    c962:	4b10      	ldr	r3, [pc, #64]	; (c9a4 <xQueueGenericSend+0x1dc>)
    c964:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    c966:	2300      	movs	r3, #0
		}
	}
}
    c968:	0018      	movs	r0, r3
    c96a:	46bd      	mov	sp, r7
    c96c:	b00a      	add	sp, #40	; 0x28
    c96e:	bd80      	pop	{r7, pc}
    c970:	0000dc5d 	.word	0x0000dc5d
    c974:	0000c409 	.word	0x0000c409
    c978:	0000cccd 	.word	0x0000cccd
    c97c:	0000d021 	.word	0x0000d021
    c980:	0000c3e9 	.word	0x0000c3e9
    c984:	0000d909 	.word	0x0000d909
    c988:	0000c42d 	.word	0x0000c42d
    c98c:	0000d9c9 	.word	0x0000d9c9
    c990:	0000d4e9 	.word	0x0000d4e9
    c994:	0000d9fd 	.word	0x0000d9fd
    c998:	0000cf21 	.word	0x0000cf21
    c99c:	0000d871 	.word	0x0000d871
    c9a0:	0000cdfd 	.word	0x0000cdfd
    c9a4:	0000d501 	.word	0x0000d501

0000c9a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    c9a8:	b580      	push	{r7, lr}
    c9aa:	b088      	sub	sp, #32
    c9ac:	af00      	add	r7, sp, #0
    c9ae:	60f8      	str	r0, [r7, #12]
    c9b0:	60b9      	str	r1, [r7, #8]
    c9b2:	607a      	str	r2, [r7, #4]
    c9b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    c9b6:	68fb      	ldr	r3, [r7, #12]
    c9b8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    c9ba:	69bb      	ldr	r3, [r7, #24]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d101      	bne.n	c9c4 <xQueueGenericSendFromISR+0x1c>
    c9c0:	b672      	cpsid	i
    c9c2:	e7fe      	b.n	c9c2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    c9c4:	68bb      	ldr	r3, [r7, #8]
    c9c6:	2b00      	cmp	r3, #0
    c9c8:	d103      	bne.n	c9d2 <xQueueGenericSendFromISR+0x2a>
    c9ca:	69bb      	ldr	r3, [r7, #24]
    c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c9ce:	2b00      	cmp	r3, #0
    c9d0:	d101      	bne.n	c9d6 <xQueueGenericSendFromISR+0x2e>
    c9d2:	2301      	movs	r3, #1
    c9d4:	e000      	b.n	c9d8 <xQueueGenericSendFromISR+0x30>
    c9d6:	2300      	movs	r3, #0
    c9d8:	2b00      	cmp	r3, #0
    c9da:	d101      	bne.n	c9e0 <xQueueGenericSendFromISR+0x38>
    c9dc:	b672      	cpsid	i
    c9de:	e7fe      	b.n	c9de <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    c9e0:	683b      	ldr	r3, [r7, #0]
    c9e2:	2b02      	cmp	r3, #2
    c9e4:	d103      	bne.n	c9ee <xQueueGenericSendFromISR+0x46>
    c9e6:	69bb      	ldr	r3, [r7, #24]
    c9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    c9ea:	2b01      	cmp	r3, #1
    c9ec:	d101      	bne.n	c9f2 <xQueueGenericSendFromISR+0x4a>
    c9ee:	2301      	movs	r3, #1
    c9f0:	e000      	b.n	c9f4 <xQueueGenericSendFromISR+0x4c>
    c9f2:	2300      	movs	r3, #0
    c9f4:	2b00      	cmp	r3, #0
    c9f6:	d101      	bne.n	c9fc <xQueueGenericSendFromISR+0x54>
    c9f8:	b672      	cpsid	i
    c9fa:	e7fe      	b.n	c9fa <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    c9fc:	4b2d      	ldr	r3, [pc, #180]	; (cab4 <xQueueGenericSendFromISR+0x10c>)
    c9fe:	4798      	blx	r3
    ca00:	0003      	movs	r3, r0
    ca02:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    ca04:	69bb      	ldr	r3, [r7, #24]
    ca06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ca08:	69bb      	ldr	r3, [r7, #24]
    ca0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ca0c:	429a      	cmp	r2, r3
    ca0e:	d302      	bcc.n	ca16 <xQueueGenericSendFromISR+0x6e>
    ca10:	683b      	ldr	r3, [r7, #0]
    ca12:	2b02      	cmp	r3, #2
    ca14:	d142      	bne.n	ca9c <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    ca16:	2313      	movs	r3, #19
    ca18:	18fb      	adds	r3, r7, r3
    ca1a:	69ba      	ldr	r2, [r7, #24]
    ca1c:	2145      	movs	r1, #69	; 0x45
    ca1e:	5c52      	ldrb	r2, [r2, r1]
    ca20:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    ca22:	683a      	ldr	r2, [r7, #0]
    ca24:	68b9      	ldr	r1, [r7, #8]
    ca26:	69bb      	ldr	r3, [r7, #24]
    ca28:	0018      	movs	r0, r3
    ca2a:	4b23      	ldr	r3, [pc, #140]	; (cab8 <xQueueGenericSendFromISR+0x110>)
    ca2c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    ca2e:	2313      	movs	r3, #19
    ca30:	18fb      	adds	r3, r7, r3
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	b25b      	sxtb	r3, r3
    ca36:	3301      	adds	r3, #1
    ca38:	d124      	bne.n	ca84 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    ca3a:	69bb      	ldr	r3, [r7, #24]
    ca3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ca3e:	2b00      	cmp	r3, #0
    ca40:	d00e      	beq.n	ca60 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    ca42:	683a      	ldr	r2, [r7, #0]
    ca44:	69bb      	ldr	r3, [r7, #24]
    ca46:	0011      	movs	r1, r2
    ca48:	0018      	movs	r0, r3
    ca4a:	4b1c      	ldr	r3, [pc, #112]	; (cabc <xQueueGenericSendFromISR+0x114>)
    ca4c:	4798      	blx	r3
    ca4e:	1e03      	subs	r3, r0, #0
    ca50:	d021      	beq.n	ca96 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    ca52:	687b      	ldr	r3, [r7, #4]
    ca54:	2b00      	cmp	r3, #0
    ca56:	d01e      	beq.n	ca96 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	2201      	movs	r2, #1
    ca5c:	601a      	str	r2, [r3, #0]
    ca5e:	e01a      	b.n	ca96 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ca60:	69bb      	ldr	r3, [r7, #24]
    ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ca64:	2b00      	cmp	r3, #0
    ca66:	d016      	beq.n	ca96 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ca68:	69bb      	ldr	r3, [r7, #24]
    ca6a:	3324      	adds	r3, #36	; 0x24
    ca6c:	0018      	movs	r0, r3
    ca6e:	4b14      	ldr	r3, [pc, #80]	; (cac0 <xQueueGenericSendFromISR+0x118>)
    ca70:	4798      	blx	r3
    ca72:	1e03      	subs	r3, r0, #0
    ca74:	d00f      	beq.n	ca96 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    ca76:	687b      	ldr	r3, [r7, #4]
    ca78:	2b00      	cmp	r3, #0
    ca7a:	d00c      	beq.n	ca96 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    ca7c:	687b      	ldr	r3, [r7, #4]
    ca7e:	2201      	movs	r2, #1
    ca80:	601a      	str	r2, [r3, #0]
    ca82:	e008      	b.n	ca96 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    ca84:	2313      	movs	r3, #19
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	3301      	adds	r3, #1
    ca8c:	b2db      	uxtb	r3, r3
    ca8e:	b259      	sxtb	r1, r3
    ca90:	69bb      	ldr	r3, [r7, #24]
    ca92:	2245      	movs	r2, #69	; 0x45
    ca94:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    ca96:	2301      	movs	r3, #1
    ca98:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    ca9a:	e001      	b.n	caa0 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    ca9c:	2300      	movs	r3, #0
    ca9e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    caa0:	697b      	ldr	r3, [r7, #20]
    caa2:	0018      	movs	r0, r3
    caa4:	4b07      	ldr	r3, [pc, #28]	; (cac4 <xQueueGenericSendFromISR+0x11c>)
    caa6:	4798      	blx	r3

	return xReturn;
    caa8:	69fb      	ldr	r3, [r7, #28]
}
    caaa:	0018      	movs	r0, r3
    caac:	46bd      	mov	sp, r7
    caae:	b008      	add	sp, #32
    cab0:	bd80      	pop	{r7, pc}
    cab2:	46c0      	nop			; (mov r8, r8)
    cab4:	0000c45d 	.word	0x0000c45d
    cab8:	0000cccd 	.word	0x0000cccd
    cabc:	0000d021 	.word	0x0000d021
    cac0:	0000d909 	.word	0x0000d909
    cac4:	0000c469 	.word	0x0000c469

0000cac8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    cac8:	b580      	push	{r7, lr}
    caca:	b08a      	sub	sp, #40	; 0x28
    cacc:	af00      	add	r7, sp, #0
    cace:	60f8      	str	r0, [r7, #12]
    cad0:	60b9      	str	r1, [r7, #8]
    cad2:	607a      	str	r2, [r7, #4]
    cad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    cad6:	2300      	movs	r3, #0
    cad8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    cada:	68fb      	ldr	r3, [r7, #12]
    cadc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    cade:	6a3b      	ldr	r3, [r7, #32]
    cae0:	2b00      	cmp	r3, #0
    cae2:	d101      	bne.n	cae8 <xQueueGenericReceive+0x20>
    cae4:	b672      	cpsid	i
    cae6:	e7fe      	b.n	cae6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    cae8:	68bb      	ldr	r3, [r7, #8]
    caea:	2b00      	cmp	r3, #0
    caec:	d103      	bne.n	caf6 <xQueueGenericReceive+0x2e>
    caee:	6a3b      	ldr	r3, [r7, #32]
    caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    caf2:	2b00      	cmp	r3, #0
    caf4:	d101      	bne.n	cafa <xQueueGenericReceive+0x32>
    caf6:	2301      	movs	r3, #1
    caf8:	e000      	b.n	cafc <xQueueGenericReceive+0x34>
    cafa:	2300      	movs	r3, #0
    cafc:	2b00      	cmp	r3, #0
    cafe:	d101      	bne.n	cb04 <xQueueGenericReceive+0x3c>
    cb00:	b672      	cpsid	i
    cb02:	e7fe      	b.n	cb02 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    cb04:	4b62      	ldr	r3, [pc, #392]	; (cc90 <xQueueGenericReceive+0x1c8>)
    cb06:	4798      	blx	r3
    cb08:	1e03      	subs	r3, r0, #0
    cb0a:	d102      	bne.n	cb12 <xQueueGenericReceive+0x4a>
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	2b00      	cmp	r3, #0
    cb10:	d101      	bne.n	cb16 <xQueueGenericReceive+0x4e>
    cb12:	2301      	movs	r3, #1
    cb14:	e000      	b.n	cb18 <xQueueGenericReceive+0x50>
    cb16:	2300      	movs	r3, #0
    cb18:	2b00      	cmp	r3, #0
    cb1a:	d101      	bne.n	cb20 <xQueueGenericReceive+0x58>
    cb1c:	b672      	cpsid	i
    cb1e:	e7fe      	b.n	cb1e <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    cb20:	4b5c      	ldr	r3, [pc, #368]	; (cc94 <xQueueGenericReceive+0x1cc>)
    cb22:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    cb24:	6a3b      	ldr	r3, [r7, #32]
    cb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cb28:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    cb2a:	69fb      	ldr	r3, [r7, #28]
    cb2c:	2b00      	cmp	r3, #0
    cb2e:	d03a      	beq.n	cba6 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    cb30:	6a3b      	ldr	r3, [r7, #32]
    cb32:	68db      	ldr	r3, [r3, #12]
    cb34:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    cb36:	68ba      	ldr	r2, [r7, #8]
    cb38:	6a3b      	ldr	r3, [r7, #32]
    cb3a:	0011      	movs	r1, r2
    cb3c:	0018      	movs	r0, r3
    cb3e:	4b56      	ldr	r3, [pc, #344]	; (cc98 <xQueueGenericReceive+0x1d0>)
    cb40:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    cb42:	683b      	ldr	r3, [r7, #0]
    cb44:	2b00      	cmp	r3, #0
    cb46:	d11a      	bne.n	cb7e <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    cb48:	69fb      	ldr	r3, [r7, #28]
    cb4a:	1e5a      	subs	r2, r3, #1
    cb4c:	6a3b      	ldr	r3, [r7, #32]
    cb4e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    cb50:	6a3b      	ldr	r3, [r7, #32]
    cb52:	681b      	ldr	r3, [r3, #0]
    cb54:	2b00      	cmp	r3, #0
    cb56:	d104      	bne.n	cb62 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    cb58:	4b50      	ldr	r3, [pc, #320]	; (cc9c <xQueueGenericReceive+0x1d4>)
    cb5a:	4798      	blx	r3
    cb5c:	0002      	movs	r2, r0
    cb5e:	6a3b      	ldr	r3, [r7, #32]
    cb60:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    cb62:	6a3b      	ldr	r3, [r7, #32]
    cb64:	691b      	ldr	r3, [r3, #16]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d019      	beq.n	cb9e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    cb6a:	6a3b      	ldr	r3, [r7, #32]
    cb6c:	3310      	adds	r3, #16
    cb6e:	0018      	movs	r0, r3
    cb70:	4b4b      	ldr	r3, [pc, #300]	; (cca0 <xQueueGenericReceive+0x1d8>)
    cb72:	4798      	blx	r3
    cb74:	1e03      	subs	r3, r0, #0
    cb76:	d012      	beq.n	cb9e <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    cb78:	4b4a      	ldr	r3, [pc, #296]	; (cca4 <xQueueGenericReceive+0x1dc>)
    cb7a:	4798      	blx	r3
    cb7c:	e00f      	b.n	cb9e <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    cb7e:	6a3b      	ldr	r3, [r7, #32]
    cb80:	69ba      	ldr	r2, [r7, #24]
    cb82:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    cb84:	6a3b      	ldr	r3, [r7, #32]
    cb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d008      	beq.n	cb9e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    cb8c:	6a3b      	ldr	r3, [r7, #32]
    cb8e:	3324      	adds	r3, #36	; 0x24
    cb90:	0018      	movs	r0, r3
    cb92:	4b43      	ldr	r3, [pc, #268]	; (cca0 <xQueueGenericReceive+0x1d8>)
    cb94:	4798      	blx	r3
    cb96:	1e03      	subs	r3, r0, #0
    cb98:	d001      	beq.n	cb9e <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    cb9a:	4b42      	ldr	r3, [pc, #264]	; (cca4 <xQueueGenericReceive+0x1dc>)
    cb9c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    cb9e:	4b42      	ldr	r3, [pc, #264]	; (cca8 <xQueueGenericReceive+0x1e0>)
    cba0:	4798      	blx	r3
				return pdPASS;
    cba2:	2301      	movs	r3, #1
    cba4:	e070      	b.n	cc88 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    cba6:	687b      	ldr	r3, [r7, #4]
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d103      	bne.n	cbb4 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    cbac:	4b3e      	ldr	r3, [pc, #248]	; (cca8 <xQueueGenericReceive+0x1e0>)
    cbae:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    cbb0:	2300      	movs	r3, #0
    cbb2:	e069      	b.n	cc88 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    cbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d106      	bne.n	cbc8 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    cbba:	2310      	movs	r3, #16
    cbbc:	18fb      	adds	r3, r7, r3
    cbbe:	0018      	movs	r0, r3
    cbc0:	4b3a      	ldr	r3, [pc, #232]	; (ccac <xQueueGenericReceive+0x1e4>)
    cbc2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    cbc4:	2301      	movs	r3, #1
    cbc6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    cbc8:	4b37      	ldr	r3, [pc, #220]	; (cca8 <xQueueGenericReceive+0x1e0>)
    cbca:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    cbcc:	4b38      	ldr	r3, [pc, #224]	; (ccb0 <xQueueGenericReceive+0x1e8>)
    cbce:	4798      	blx	r3
		prvLockQueue( pxQueue );
    cbd0:	4b30      	ldr	r3, [pc, #192]	; (cc94 <xQueueGenericReceive+0x1cc>)
    cbd2:	4798      	blx	r3
    cbd4:	6a3b      	ldr	r3, [r7, #32]
    cbd6:	2244      	movs	r2, #68	; 0x44
    cbd8:	5c9b      	ldrb	r3, [r3, r2]
    cbda:	b25b      	sxtb	r3, r3
    cbdc:	3301      	adds	r3, #1
    cbde:	d103      	bne.n	cbe8 <xQueueGenericReceive+0x120>
    cbe0:	6a3b      	ldr	r3, [r7, #32]
    cbe2:	2244      	movs	r2, #68	; 0x44
    cbe4:	2100      	movs	r1, #0
    cbe6:	5499      	strb	r1, [r3, r2]
    cbe8:	6a3b      	ldr	r3, [r7, #32]
    cbea:	2245      	movs	r2, #69	; 0x45
    cbec:	5c9b      	ldrb	r3, [r3, r2]
    cbee:	b25b      	sxtb	r3, r3
    cbf0:	3301      	adds	r3, #1
    cbf2:	d103      	bne.n	cbfc <xQueueGenericReceive+0x134>
    cbf4:	6a3b      	ldr	r3, [r7, #32]
    cbf6:	2245      	movs	r2, #69	; 0x45
    cbf8:	2100      	movs	r1, #0
    cbfa:	5499      	strb	r1, [r3, r2]
    cbfc:	4b2a      	ldr	r3, [pc, #168]	; (cca8 <xQueueGenericReceive+0x1e0>)
    cbfe:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    cc00:	1d3a      	adds	r2, r7, #4
    cc02:	2310      	movs	r3, #16
    cc04:	18fb      	adds	r3, r7, r3
    cc06:	0011      	movs	r1, r2
    cc08:	0018      	movs	r0, r3
    cc0a:	4b2a      	ldr	r3, [pc, #168]	; (ccb4 <xQueueGenericReceive+0x1ec>)
    cc0c:	4798      	blx	r3
    cc0e:	1e03      	subs	r3, r0, #0
    cc10:	d12c      	bne.n	cc6c <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    cc12:	6a3b      	ldr	r3, [r7, #32]
    cc14:	0018      	movs	r0, r3
    cc16:	4b28      	ldr	r3, [pc, #160]	; (ccb8 <xQueueGenericReceive+0x1f0>)
    cc18:	4798      	blx	r3
    cc1a:	1e03      	subs	r3, r0, #0
    cc1c:	d01f      	beq.n	cc5e <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    cc1e:	6a3b      	ldr	r3, [r7, #32]
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	2b00      	cmp	r3, #0
    cc24:	d108      	bne.n	cc38 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    cc26:	4b1b      	ldr	r3, [pc, #108]	; (cc94 <xQueueGenericReceive+0x1cc>)
    cc28:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    cc2a:	6a3b      	ldr	r3, [r7, #32]
    cc2c:	685b      	ldr	r3, [r3, #4]
    cc2e:	0018      	movs	r0, r3
    cc30:	4b22      	ldr	r3, [pc, #136]	; (ccbc <xQueueGenericReceive+0x1f4>)
    cc32:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    cc34:	4b1c      	ldr	r3, [pc, #112]	; (cca8 <xQueueGenericReceive+0x1e0>)
    cc36:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    cc38:	6a3b      	ldr	r3, [r7, #32]
    cc3a:	3324      	adds	r3, #36	; 0x24
    cc3c:	687a      	ldr	r2, [r7, #4]
    cc3e:	0011      	movs	r1, r2
    cc40:	0018      	movs	r0, r3
    cc42:	4b1f      	ldr	r3, [pc, #124]	; (ccc0 <xQueueGenericReceive+0x1f8>)
    cc44:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    cc46:	6a3b      	ldr	r3, [r7, #32]
    cc48:	0018      	movs	r0, r3
    cc4a:	4b1e      	ldr	r3, [pc, #120]	; (ccc4 <xQueueGenericReceive+0x1fc>)
    cc4c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    cc4e:	4b1e      	ldr	r3, [pc, #120]	; (ccc8 <xQueueGenericReceive+0x200>)
    cc50:	4798      	blx	r3
    cc52:	1e03      	subs	r3, r0, #0
    cc54:	d000      	beq.n	cc58 <xQueueGenericReceive+0x190>
    cc56:	e763      	b.n	cb20 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    cc58:	4b12      	ldr	r3, [pc, #72]	; (cca4 <xQueueGenericReceive+0x1dc>)
    cc5a:	4798      	blx	r3
    cc5c:	e760      	b.n	cb20 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    cc5e:	6a3b      	ldr	r3, [r7, #32]
    cc60:	0018      	movs	r0, r3
    cc62:	4b18      	ldr	r3, [pc, #96]	; (ccc4 <xQueueGenericReceive+0x1fc>)
    cc64:	4798      	blx	r3
				( void ) xTaskResumeAll();
    cc66:	4b18      	ldr	r3, [pc, #96]	; (ccc8 <xQueueGenericReceive+0x200>)
    cc68:	4798      	blx	r3
    cc6a:	e759      	b.n	cb20 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    cc6c:	6a3b      	ldr	r3, [r7, #32]
    cc6e:	0018      	movs	r0, r3
    cc70:	4b14      	ldr	r3, [pc, #80]	; (ccc4 <xQueueGenericReceive+0x1fc>)
    cc72:	4798      	blx	r3
			( void ) xTaskResumeAll();
    cc74:	4b14      	ldr	r3, [pc, #80]	; (ccc8 <xQueueGenericReceive+0x200>)
    cc76:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    cc78:	6a3b      	ldr	r3, [r7, #32]
    cc7a:	0018      	movs	r0, r3
    cc7c:	4b0e      	ldr	r3, [pc, #56]	; (ccb8 <xQueueGenericReceive+0x1f0>)
    cc7e:	4798      	blx	r3
    cc80:	1e03      	subs	r3, r0, #0
    cc82:	d100      	bne.n	cc86 <xQueueGenericReceive+0x1be>
    cc84:	e74c      	b.n	cb20 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    cc86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    cc88:	0018      	movs	r0, r3
    cc8a:	46bd      	mov	sp, r7
    cc8c:	b00a      	add	sp, #40	; 0x28
    cc8e:	bd80      	pop	{r7, pc}
    cc90:	0000dc5d 	.word	0x0000dc5d
    cc94:	0000c409 	.word	0x0000c409
    cc98:	0000cdad 	.word	0x0000cdad
    cc9c:	0000de19 	.word	0x0000de19
    cca0:	0000d909 	.word	0x0000d909
    cca4:	0000c3e9 	.word	0x0000c3e9
    cca8:	0000c42d 	.word	0x0000c42d
    ccac:	0000d9c9 	.word	0x0000d9c9
    ccb0:	0000d4e9 	.word	0x0000d4e9
    ccb4:	0000d9fd 	.word	0x0000d9fd
    ccb8:	0000ceed 	.word	0x0000ceed
    ccbc:	0000dc95 	.word	0x0000dc95
    ccc0:	0000d871 	.word	0x0000d871
    ccc4:	0000cdfd 	.word	0x0000cdfd
    ccc8:	0000d501 	.word	0x0000d501

0000cccc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    cccc:	b580      	push	{r7, lr}
    ccce:	b086      	sub	sp, #24
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	60f8      	str	r0, [r7, #12]
    ccd4:	60b9      	str	r1, [r7, #8]
    ccd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    ccd8:	2300      	movs	r3, #0
    ccda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    ccdc:	68fb      	ldr	r3, [r7, #12]
    ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cce6:	2b00      	cmp	r3, #0
    cce8:	d10e      	bne.n	cd08 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    ccea:	68fb      	ldr	r3, [r7, #12]
    ccec:	681b      	ldr	r3, [r3, #0]
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d14e      	bne.n	cd90 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    ccf2:	68fb      	ldr	r3, [r7, #12]
    ccf4:	685b      	ldr	r3, [r3, #4]
    ccf6:	0018      	movs	r0, r3
    ccf8:	4b2a      	ldr	r3, [pc, #168]	; (cda4 <prvCopyDataToQueue+0xd8>)
    ccfa:	4798      	blx	r3
    ccfc:	0003      	movs	r3, r0
    ccfe:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    cd00:	68fb      	ldr	r3, [r7, #12]
    cd02:	2200      	movs	r2, #0
    cd04:	605a      	str	r2, [r3, #4]
    cd06:	e043      	b.n	cd90 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    cd08:	687b      	ldr	r3, [r7, #4]
    cd0a:	2b00      	cmp	r3, #0
    cd0c:	d119      	bne.n	cd42 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    cd0e:	68fb      	ldr	r3, [r7, #12]
    cd10:	6898      	ldr	r0, [r3, #8]
    cd12:	68fb      	ldr	r3, [r7, #12]
    cd14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    cd16:	68bb      	ldr	r3, [r7, #8]
    cd18:	0019      	movs	r1, r3
    cd1a:	4b23      	ldr	r3, [pc, #140]	; (cda8 <prvCopyDataToQueue+0xdc>)
    cd1c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    cd1e:	68fb      	ldr	r3, [r7, #12]
    cd20:	689a      	ldr	r2, [r3, #8]
    cd22:	68fb      	ldr	r3, [r7, #12]
    cd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cd26:	18d2      	adds	r2, r2, r3
    cd28:	68fb      	ldr	r3, [r7, #12]
    cd2a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    cd2c:	68fb      	ldr	r3, [r7, #12]
    cd2e:	689a      	ldr	r2, [r3, #8]
    cd30:	68fb      	ldr	r3, [r7, #12]
    cd32:	685b      	ldr	r3, [r3, #4]
    cd34:	429a      	cmp	r2, r3
    cd36:	d32b      	bcc.n	cd90 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    cd38:	68fb      	ldr	r3, [r7, #12]
    cd3a:	681a      	ldr	r2, [r3, #0]
    cd3c:	68fb      	ldr	r3, [r7, #12]
    cd3e:	609a      	str	r2, [r3, #8]
    cd40:	e026      	b.n	cd90 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    cd42:	68fb      	ldr	r3, [r7, #12]
    cd44:	68d8      	ldr	r0, [r3, #12]
    cd46:	68fb      	ldr	r3, [r7, #12]
    cd48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    cd4a:	68bb      	ldr	r3, [r7, #8]
    cd4c:	0019      	movs	r1, r3
    cd4e:	4b16      	ldr	r3, [pc, #88]	; (cda8 <prvCopyDataToQueue+0xdc>)
    cd50:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    cd52:	68fb      	ldr	r3, [r7, #12]
    cd54:	68da      	ldr	r2, [r3, #12]
    cd56:	68fb      	ldr	r3, [r7, #12]
    cd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cd5a:	425b      	negs	r3, r3
    cd5c:	18d2      	adds	r2, r2, r3
    cd5e:	68fb      	ldr	r3, [r7, #12]
    cd60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    cd62:	68fb      	ldr	r3, [r7, #12]
    cd64:	68da      	ldr	r2, [r3, #12]
    cd66:	68fb      	ldr	r3, [r7, #12]
    cd68:	681b      	ldr	r3, [r3, #0]
    cd6a:	429a      	cmp	r2, r3
    cd6c:	d207      	bcs.n	cd7e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    cd6e:	68fb      	ldr	r3, [r7, #12]
    cd70:	685a      	ldr	r2, [r3, #4]
    cd72:	68fb      	ldr	r3, [r7, #12]
    cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cd76:	425b      	negs	r3, r3
    cd78:	18d2      	adds	r2, r2, r3
    cd7a:	68fb      	ldr	r3, [r7, #12]
    cd7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    cd7e:	687b      	ldr	r3, [r7, #4]
    cd80:	2b02      	cmp	r3, #2
    cd82:	d105      	bne.n	cd90 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    cd84:	693b      	ldr	r3, [r7, #16]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d002      	beq.n	cd90 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    cd8a:	693b      	ldr	r3, [r7, #16]
    cd8c:	3b01      	subs	r3, #1
    cd8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    cd90:	693b      	ldr	r3, [r7, #16]
    cd92:	1c5a      	adds	r2, r3, #1
    cd94:	68fb      	ldr	r3, [r7, #12]
    cd96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    cd98:	697b      	ldr	r3, [r7, #20]
}
    cd9a:	0018      	movs	r0, r3
    cd9c:	46bd      	mov	sp, r7
    cd9e:	b006      	add	sp, #24
    cda0:	bd80      	pop	{r7, pc}
    cda2:	46c0      	nop			; (mov r8, r8)
    cda4:	0000dd59 	.word	0x0000dd59
    cda8:	00010c55 	.word	0x00010c55

0000cdac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    cdac:	b580      	push	{r7, lr}
    cdae:	b082      	sub	sp, #8
    cdb0:	af00      	add	r7, sp, #0
    cdb2:	6078      	str	r0, [r7, #4]
    cdb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    cdb6:	687b      	ldr	r3, [r7, #4]
    cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d018      	beq.n	cdf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    cdbe:	687b      	ldr	r3, [r7, #4]
    cdc0:	68da      	ldr	r2, [r3, #12]
    cdc2:	687b      	ldr	r3, [r7, #4]
    cdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cdc6:	18d2      	adds	r2, r2, r3
    cdc8:	687b      	ldr	r3, [r7, #4]
    cdca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    cdcc:	687b      	ldr	r3, [r7, #4]
    cdce:	68da      	ldr	r2, [r3, #12]
    cdd0:	687b      	ldr	r3, [r7, #4]
    cdd2:	685b      	ldr	r3, [r3, #4]
    cdd4:	429a      	cmp	r2, r3
    cdd6:	d303      	bcc.n	cde0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    cdd8:	687b      	ldr	r3, [r7, #4]
    cdda:	681a      	ldr	r2, [r3, #0]
    cddc:	687b      	ldr	r3, [r7, #4]
    cdde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    cde0:	687b      	ldr	r3, [r7, #4]
    cde2:	68d9      	ldr	r1, [r3, #12]
    cde4:	687b      	ldr	r3, [r7, #4]
    cde6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    cde8:	683b      	ldr	r3, [r7, #0]
    cdea:	0018      	movs	r0, r3
    cdec:	4b02      	ldr	r3, [pc, #8]	; (cdf8 <prvCopyDataFromQueue+0x4c>)
    cdee:	4798      	blx	r3
	}
}
    cdf0:	46c0      	nop			; (mov r8, r8)
    cdf2:	46bd      	mov	sp, r7
    cdf4:	b002      	add	sp, #8
    cdf6:	bd80      	pop	{r7, pc}
    cdf8:	00010c55 	.word	0x00010c55

0000cdfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b084      	sub	sp, #16
    ce00:	af00      	add	r7, sp, #0
    ce02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    ce04:	4b34      	ldr	r3, [pc, #208]	; (ced8 <prvUnlockQueue+0xdc>)
    ce06:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    ce08:	230f      	movs	r3, #15
    ce0a:	18fb      	adds	r3, r7, r3
    ce0c:	687a      	ldr	r2, [r7, #4]
    ce0e:	2145      	movs	r1, #69	; 0x45
    ce10:	5c52      	ldrb	r2, [r2, r1]
    ce12:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ce14:	e022      	b.n	ce5c <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    ce16:	687b      	ldr	r3, [r7, #4]
    ce18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d009      	beq.n	ce32 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    ce1e:	687b      	ldr	r3, [r7, #4]
    ce20:	2100      	movs	r1, #0
    ce22:	0018      	movs	r0, r3
    ce24:	4b2d      	ldr	r3, [pc, #180]	; (cedc <prvUnlockQueue+0xe0>)
    ce26:	4798      	blx	r3
    ce28:	1e03      	subs	r3, r0, #0
    ce2a:	d00f      	beq.n	ce4c <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    ce2c:	4b2c      	ldr	r3, [pc, #176]	; (cee0 <prvUnlockQueue+0xe4>)
    ce2e:	4798      	blx	r3
    ce30:	e00c      	b.n	ce4c <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ce32:	687b      	ldr	r3, [r7, #4]
    ce34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ce36:	2b00      	cmp	r3, #0
    ce38:	d017      	beq.n	ce6a <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ce3a:	687b      	ldr	r3, [r7, #4]
    ce3c:	3324      	adds	r3, #36	; 0x24
    ce3e:	0018      	movs	r0, r3
    ce40:	4b28      	ldr	r3, [pc, #160]	; (cee4 <prvUnlockQueue+0xe8>)
    ce42:	4798      	blx	r3
    ce44:	1e03      	subs	r3, r0, #0
    ce46:	d001      	beq.n	ce4c <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    ce48:	4b25      	ldr	r3, [pc, #148]	; (cee0 <prvUnlockQueue+0xe4>)
    ce4a:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    ce4c:	230f      	movs	r3, #15
    ce4e:	18fb      	adds	r3, r7, r3
    ce50:	781b      	ldrb	r3, [r3, #0]
    ce52:	3b01      	subs	r3, #1
    ce54:	b2da      	uxtb	r2, r3
    ce56:	230f      	movs	r3, #15
    ce58:	18fb      	adds	r3, r7, r3
    ce5a:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    ce5c:	230f      	movs	r3, #15
    ce5e:	18fb      	adds	r3, r7, r3
    ce60:	781b      	ldrb	r3, [r3, #0]
    ce62:	b25b      	sxtb	r3, r3
    ce64:	2b00      	cmp	r3, #0
    ce66:	dcd6      	bgt.n	ce16 <prvUnlockQueue+0x1a>
    ce68:	e000      	b.n	ce6c <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    ce6a:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    ce6c:	687b      	ldr	r3, [r7, #4]
    ce6e:	2245      	movs	r2, #69	; 0x45
    ce70:	21ff      	movs	r1, #255	; 0xff
    ce72:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    ce74:	4b1c      	ldr	r3, [pc, #112]	; (cee8 <prvUnlockQueue+0xec>)
    ce76:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    ce78:	4b17      	ldr	r3, [pc, #92]	; (ced8 <prvUnlockQueue+0xdc>)
    ce7a:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    ce7c:	230e      	movs	r3, #14
    ce7e:	18fb      	adds	r3, r7, r3
    ce80:	687a      	ldr	r2, [r7, #4]
    ce82:	2144      	movs	r1, #68	; 0x44
    ce84:	5c52      	ldrb	r2, [r2, r1]
    ce86:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    ce88:	e014      	b.n	ceb4 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    ce8a:	687b      	ldr	r3, [r7, #4]
    ce8c:	691b      	ldr	r3, [r3, #16]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d017      	beq.n	cec2 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    ce92:	687b      	ldr	r3, [r7, #4]
    ce94:	3310      	adds	r3, #16
    ce96:	0018      	movs	r0, r3
    ce98:	4b12      	ldr	r3, [pc, #72]	; (cee4 <prvUnlockQueue+0xe8>)
    ce9a:	4798      	blx	r3
    ce9c:	1e03      	subs	r3, r0, #0
    ce9e:	d001      	beq.n	cea4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    cea0:	4b0f      	ldr	r3, [pc, #60]	; (cee0 <prvUnlockQueue+0xe4>)
    cea2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    cea4:	230e      	movs	r3, #14
    cea6:	18fb      	adds	r3, r7, r3
    cea8:	781b      	ldrb	r3, [r3, #0]
    ceaa:	3b01      	subs	r3, #1
    ceac:	b2da      	uxtb	r2, r3
    ceae:	230e      	movs	r3, #14
    ceb0:	18fb      	adds	r3, r7, r3
    ceb2:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    ceb4:	230e      	movs	r3, #14
    ceb6:	18fb      	adds	r3, r7, r3
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	b25b      	sxtb	r3, r3
    cebc:	2b00      	cmp	r3, #0
    cebe:	dce4      	bgt.n	ce8a <prvUnlockQueue+0x8e>
    cec0:	e000      	b.n	cec4 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    cec2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    cec4:	687b      	ldr	r3, [r7, #4]
    cec6:	2244      	movs	r2, #68	; 0x44
    cec8:	21ff      	movs	r1, #255	; 0xff
    ceca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    cecc:	4b06      	ldr	r3, [pc, #24]	; (cee8 <prvUnlockQueue+0xec>)
    cece:	4798      	blx	r3
}
    ced0:	46c0      	nop			; (mov r8, r8)
    ced2:	46bd      	mov	sp, r7
    ced4:	b004      	add	sp, #16
    ced6:	bd80      	pop	{r7, pc}
    ced8:	0000c409 	.word	0x0000c409
    cedc:	0000d021 	.word	0x0000d021
    cee0:	0000daa5 	.word	0x0000daa5
    cee4:	0000d909 	.word	0x0000d909
    cee8:	0000c42d 	.word	0x0000c42d

0000ceec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    ceec:	b580      	push	{r7, lr}
    ceee:	b084      	sub	sp, #16
    cef0:	af00      	add	r7, sp, #0
    cef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    cef4:	4b08      	ldr	r3, [pc, #32]	; (cf18 <prvIsQueueEmpty+0x2c>)
    cef6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    cef8:	687b      	ldr	r3, [r7, #4]
    cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cefc:	2b00      	cmp	r3, #0
    cefe:	d102      	bne.n	cf06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    cf00:	2301      	movs	r3, #1
    cf02:	60fb      	str	r3, [r7, #12]
    cf04:	e001      	b.n	cf0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    cf06:	2300      	movs	r3, #0
    cf08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    cf0a:	4b04      	ldr	r3, [pc, #16]	; (cf1c <prvIsQueueEmpty+0x30>)
    cf0c:	4798      	blx	r3

	return xReturn;
    cf0e:	68fb      	ldr	r3, [r7, #12]
}
    cf10:	0018      	movs	r0, r3
    cf12:	46bd      	mov	sp, r7
    cf14:	b004      	add	sp, #16
    cf16:	bd80      	pop	{r7, pc}
    cf18:	0000c409 	.word	0x0000c409
    cf1c:	0000c42d 	.word	0x0000c42d

0000cf20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    cf20:	b580      	push	{r7, lr}
    cf22:	b084      	sub	sp, #16
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    cf28:	4b09      	ldr	r3, [pc, #36]	; (cf50 <prvIsQueueFull+0x30>)
    cf2a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    cf30:	687b      	ldr	r3, [r7, #4]
    cf32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cf34:	429a      	cmp	r2, r3
    cf36:	d102      	bne.n	cf3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    cf38:	2301      	movs	r3, #1
    cf3a:	60fb      	str	r3, [r7, #12]
    cf3c:	e001      	b.n	cf42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    cf3e:	2300      	movs	r3, #0
    cf40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    cf42:	4b04      	ldr	r3, [pc, #16]	; (cf54 <prvIsQueueFull+0x34>)
    cf44:	4798      	blx	r3

	return xReturn;
    cf46:	68fb      	ldr	r3, [r7, #12]
}
    cf48:	0018      	movs	r0, r3
    cf4a:	46bd      	mov	sp, r7
    cf4c:	b004      	add	sp, #16
    cf4e:	bd80      	pop	{r7, pc}
    cf50:	0000c409 	.word	0x0000c409
    cf54:	0000c42d 	.word	0x0000c42d

0000cf58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    cf58:	b580      	push	{r7, lr}
    cf5a:	b084      	sub	sp, #16
    cf5c:	af00      	add	r7, sp, #0
    cf5e:	6078      	str	r0, [r7, #4]
    cf60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    cf62:	2300      	movs	r3, #0
    cf64:	60fb      	str	r3, [r7, #12]
    cf66:	e015      	b.n	cf94 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    cf68:	4b0e      	ldr	r3, [pc, #56]	; (cfa4 <vQueueAddToRegistry+0x4c>)
    cf6a:	68fa      	ldr	r2, [r7, #12]
    cf6c:	00d2      	lsls	r2, r2, #3
    cf6e:	58d3      	ldr	r3, [r2, r3]
    cf70:	2b00      	cmp	r3, #0
    cf72:	d10c      	bne.n	cf8e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    cf74:	4b0b      	ldr	r3, [pc, #44]	; (cfa4 <vQueueAddToRegistry+0x4c>)
    cf76:	68fa      	ldr	r2, [r7, #12]
    cf78:	00d2      	lsls	r2, r2, #3
    cf7a:	6839      	ldr	r1, [r7, #0]
    cf7c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    cf7e:	4a09      	ldr	r2, [pc, #36]	; (cfa4 <vQueueAddToRegistry+0x4c>)
    cf80:	68fb      	ldr	r3, [r7, #12]
    cf82:	00db      	lsls	r3, r3, #3
    cf84:	18d3      	adds	r3, r2, r3
    cf86:	3304      	adds	r3, #4
    cf88:	687a      	ldr	r2, [r7, #4]
    cf8a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    cf8c:	e005      	b.n	cf9a <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    cf8e:	68fb      	ldr	r3, [r7, #12]
    cf90:	3301      	adds	r3, #1
    cf92:	60fb      	str	r3, [r7, #12]
    cf94:	68fb      	ldr	r3, [r7, #12]
    cf96:	2b04      	cmp	r3, #4
    cf98:	d9e6      	bls.n	cf68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    cf9a:	46c0      	nop			; (mov r8, r8)
    cf9c:	46bd      	mov	sp, r7
    cf9e:	b004      	add	sp, #16
    cfa0:	bd80      	pop	{r7, pc}
    cfa2:	46c0      	nop			; (mov r8, r8)
    cfa4:	200047cc 	.word	0x200047cc

0000cfa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b086      	sub	sp, #24
    cfac:	af00      	add	r7, sp, #0
    cfae:	60f8      	str	r0, [r7, #12]
    cfb0:	60b9      	str	r1, [r7, #8]
    cfb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    cfb4:	68fb      	ldr	r3, [r7, #12]
    cfb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    cfb8:	4b15      	ldr	r3, [pc, #84]	; (d010 <vQueueWaitForMessageRestricted+0x68>)
    cfba:	4798      	blx	r3
    cfbc:	697b      	ldr	r3, [r7, #20]
    cfbe:	2244      	movs	r2, #68	; 0x44
    cfc0:	5c9b      	ldrb	r3, [r3, r2]
    cfc2:	b25b      	sxtb	r3, r3
    cfc4:	3301      	adds	r3, #1
    cfc6:	d103      	bne.n	cfd0 <vQueueWaitForMessageRestricted+0x28>
    cfc8:	697b      	ldr	r3, [r7, #20]
    cfca:	2244      	movs	r2, #68	; 0x44
    cfcc:	2100      	movs	r1, #0
    cfce:	5499      	strb	r1, [r3, r2]
    cfd0:	697b      	ldr	r3, [r7, #20]
    cfd2:	2245      	movs	r2, #69	; 0x45
    cfd4:	5c9b      	ldrb	r3, [r3, r2]
    cfd6:	b25b      	sxtb	r3, r3
    cfd8:	3301      	adds	r3, #1
    cfda:	d103      	bne.n	cfe4 <vQueueWaitForMessageRestricted+0x3c>
    cfdc:	697b      	ldr	r3, [r7, #20]
    cfde:	2245      	movs	r2, #69	; 0x45
    cfe0:	2100      	movs	r1, #0
    cfe2:	5499      	strb	r1, [r3, r2]
    cfe4:	4b0b      	ldr	r3, [pc, #44]	; (d014 <vQueueWaitForMessageRestricted+0x6c>)
    cfe6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    cfe8:	697b      	ldr	r3, [r7, #20]
    cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cfec:	2b00      	cmp	r3, #0
    cfee:	d106      	bne.n	cffe <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    cff0:	697b      	ldr	r3, [r7, #20]
    cff2:	3324      	adds	r3, #36	; 0x24
    cff4:	687a      	ldr	r2, [r7, #4]
    cff6:	68b9      	ldr	r1, [r7, #8]
    cff8:	0018      	movs	r0, r3
    cffa:	4b07      	ldr	r3, [pc, #28]	; (d018 <vQueueWaitForMessageRestricted+0x70>)
    cffc:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    cffe:	697b      	ldr	r3, [r7, #20]
    d000:	0018      	movs	r0, r3
    d002:	4b06      	ldr	r3, [pc, #24]	; (d01c <vQueueWaitForMessageRestricted+0x74>)
    d004:	4798      	blx	r3
	}
    d006:	46c0      	nop			; (mov r8, r8)
    d008:	46bd      	mov	sp, r7
    d00a:	b006      	add	sp, #24
    d00c:	bd80      	pop	{r7, pc}
    d00e:	46c0      	nop			; (mov r8, r8)
    d010:	0000c409 	.word	0x0000c409
    d014:	0000c42d 	.word	0x0000c42d
    d018:	0000d8b5 	.word	0x0000d8b5
    d01c:	0000cdfd 	.word	0x0000cdfd

0000d020 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    d020:	b580      	push	{r7, lr}
    d022:	b086      	sub	sp, #24
    d024:	af00      	add	r7, sp, #0
    d026:	6078      	str	r0, [r7, #4]
    d028:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    d02a:	687b      	ldr	r3, [r7, #4]
    d02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d02e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    d030:	2300      	movs	r3, #0
    d032:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    d034:	693b      	ldr	r3, [r7, #16]
    d036:	2b00      	cmp	r3, #0
    d038:	d101      	bne.n	d03e <prvNotifyQueueSetContainer+0x1e>
    d03a:	b672      	cpsid	i
    d03c:	e7fe      	b.n	d03c <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    d03e:	693b      	ldr	r3, [r7, #16]
    d040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d042:	693b      	ldr	r3, [r7, #16]
    d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d046:	429a      	cmp	r2, r3
    d048:	d301      	bcc.n	d04e <prvNotifyQueueSetContainer+0x2e>
    d04a:	b672      	cpsid	i
    d04c:	e7fe      	b.n	d04c <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    d04e:	693b      	ldr	r3, [r7, #16]
    d050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d052:	693b      	ldr	r3, [r7, #16]
    d054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d056:	429a      	cmp	r2, r3
    d058:	d22a      	bcs.n	d0b0 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    d05a:	230f      	movs	r3, #15
    d05c:	18fb      	adds	r3, r7, r3
    d05e:	693a      	ldr	r2, [r7, #16]
    d060:	2145      	movs	r1, #69	; 0x45
    d062:	5c52      	ldrb	r2, [r2, r1]
    d064:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    d066:	683a      	ldr	r2, [r7, #0]
    d068:	1d39      	adds	r1, r7, #4
    d06a:	693b      	ldr	r3, [r7, #16]
    d06c:	0018      	movs	r0, r3
    d06e:	4b13      	ldr	r3, [pc, #76]	; (d0bc <prvNotifyQueueSetContainer+0x9c>)
    d070:	4798      	blx	r3
    d072:	0003      	movs	r3, r0
    d074:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    d076:	230f      	movs	r3, #15
    d078:	18fb      	adds	r3, r7, r3
    d07a:	781b      	ldrb	r3, [r3, #0]
    d07c:	b25b      	sxtb	r3, r3
    d07e:	3301      	adds	r3, #1
    d080:	d10d      	bne.n	d09e <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    d082:	693b      	ldr	r3, [r7, #16]
    d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d086:	2b00      	cmp	r3, #0
    d088:	d012      	beq.n	d0b0 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    d08a:	693b      	ldr	r3, [r7, #16]
    d08c:	3324      	adds	r3, #36	; 0x24
    d08e:	0018      	movs	r0, r3
    d090:	4b0b      	ldr	r3, [pc, #44]	; (d0c0 <prvNotifyQueueSetContainer+0xa0>)
    d092:	4798      	blx	r3
    d094:	1e03      	subs	r3, r0, #0
    d096:	d00b      	beq.n	d0b0 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    d098:	2301      	movs	r3, #1
    d09a:	617b      	str	r3, [r7, #20]
    d09c:	e008      	b.n	d0b0 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    d09e:	230f      	movs	r3, #15
    d0a0:	18fb      	adds	r3, r7, r3
    d0a2:	781b      	ldrb	r3, [r3, #0]
    d0a4:	3301      	adds	r3, #1
    d0a6:	b2db      	uxtb	r3, r3
    d0a8:	b259      	sxtb	r1, r3
    d0aa:	693b      	ldr	r3, [r7, #16]
    d0ac:	2245      	movs	r2, #69	; 0x45
    d0ae:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    d0b0:	697b      	ldr	r3, [r7, #20]
	}
    d0b2:	0018      	movs	r0, r3
    d0b4:	46bd      	mov	sp, r7
    d0b6:	b006      	add	sp, #24
    d0b8:	bd80      	pop	{r7, pc}
    d0ba:	46c0      	nop			; (mov r8, r8)
    d0bc:	0000cccd 	.word	0x0000cccd
    d0c0:	0000d909 	.word	0x0000d909

0000d0c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    d0c4:	b590      	push	{r4, r7, lr}
    d0c6:	b08d      	sub	sp, #52	; 0x34
    d0c8:	af04      	add	r7, sp, #16
    d0ca:	60f8      	str	r0, [r7, #12]
    d0cc:	60b9      	str	r1, [r7, #8]
    d0ce:	603b      	str	r3, [r7, #0]
    d0d0:	1dbb      	adds	r3, r7, #6
    d0d2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    d0d4:	1dbb      	adds	r3, r7, #6
    d0d6:	881b      	ldrh	r3, [r3, #0]
    d0d8:	009b      	lsls	r3, r3, #2
    d0da:	0018      	movs	r0, r3
    d0dc:	4b1d      	ldr	r3, [pc, #116]	; (d154 <xTaskCreate+0x90>)
    d0de:	4798      	blx	r3
    d0e0:	0003      	movs	r3, r0
    d0e2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    d0e4:	697b      	ldr	r3, [r7, #20]
    d0e6:	2b00      	cmp	r3, #0
    d0e8:	d010      	beq.n	d10c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    d0ea:	2050      	movs	r0, #80	; 0x50
    d0ec:	4b19      	ldr	r3, [pc, #100]	; (d154 <xTaskCreate+0x90>)
    d0ee:	4798      	blx	r3
    d0f0:	0003      	movs	r3, r0
    d0f2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    d0f4:	69fb      	ldr	r3, [r7, #28]
    d0f6:	2b00      	cmp	r3, #0
    d0f8:	d003      	beq.n	d102 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    d0fa:	69fb      	ldr	r3, [r7, #28]
    d0fc:	697a      	ldr	r2, [r7, #20]
    d0fe:	631a      	str	r2, [r3, #48]	; 0x30
    d100:	e006      	b.n	d110 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    d102:	697b      	ldr	r3, [r7, #20]
    d104:	0018      	movs	r0, r3
    d106:	4b14      	ldr	r3, [pc, #80]	; (d158 <xTaskCreate+0x94>)
    d108:	4798      	blx	r3
    d10a:	e001      	b.n	d110 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    d10c:	2300      	movs	r3, #0
    d10e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    d110:	69fb      	ldr	r3, [r7, #28]
    d112:	2b00      	cmp	r3, #0
    d114:	d016      	beq.n	d144 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    d116:	1dbb      	adds	r3, r7, #6
    d118:	881a      	ldrh	r2, [r3, #0]
    d11a:	683c      	ldr	r4, [r7, #0]
    d11c:	68b9      	ldr	r1, [r7, #8]
    d11e:	68f8      	ldr	r0, [r7, #12]
    d120:	2300      	movs	r3, #0
    d122:	9303      	str	r3, [sp, #12]
    d124:	69fb      	ldr	r3, [r7, #28]
    d126:	9302      	str	r3, [sp, #8]
    d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d12a:	9301      	str	r3, [sp, #4]
    d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d12e:	9300      	str	r3, [sp, #0]
    d130:	0023      	movs	r3, r4
    d132:	4c0a      	ldr	r4, [pc, #40]	; (d15c <xTaskCreate+0x98>)
    d134:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    d136:	69fb      	ldr	r3, [r7, #28]
    d138:	0018      	movs	r0, r3
    d13a:	4b09      	ldr	r3, [pc, #36]	; (d160 <xTaskCreate+0x9c>)
    d13c:	4798      	blx	r3
			xReturn = pdPASS;
    d13e:	2301      	movs	r3, #1
    d140:	61bb      	str	r3, [r7, #24]
    d142:	e002      	b.n	d14a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    d144:	2301      	movs	r3, #1
    d146:	425b      	negs	r3, r3
    d148:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    d14a:	69bb      	ldr	r3, [r7, #24]
	}
    d14c:	0018      	movs	r0, r3
    d14e:	46bd      	mov	sp, r7
    d150:	b009      	add	sp, #36	; 0x24
    d152:	bd90      	pop	{r4, r7, pc}
    d154:	0000c51d 	.word	0x0000c51d
    d158:	0000c5bd 	.word	0x0000c5bd
    d15c:	0000d165 	.word	0x0000d165
    d160:	0000d261 	.word	0x0000d261

0000d164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    d164:	b580      	push	{r7, lr}
    d166:	b086      	sub	sp, #24
    d168:	af00      	add	r7, sp, #0
    d16a:	60f8      	str	r0, [r7, #12]
    d16c:	60b9      	str	r1, [r7, #8]
    d16e:	607a      	str	r2, [r7, #4]
    d170:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    d176:	687b      	ldr	r3, [r7, #4]
    d178:	4936      	ldr	r1, [pc, #216]	; (d254 <prvInitialiseNewTask+0xf0>)
    d17a:	468c      	mov	ip, r1
    d17c:	4463      	add	r3, ip
    d17e:	009b      	lsls	r3, r3, #2
    d180:	18d3      	adds	r3, r2, r3
    d182:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    d184:	693b      	ldr	r3, [r7, #16]
    d186:	2207      	movs	r2, #7
    d188:	4393      	bics	r3, r2
    d18a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    d18c:	693b      	ldr	r3, [r7, #16]
    d18e:	2207      	movs	r2, #7
    d190:	4013      	ands	r3, r2
    d192:	d001      	beq.n	d198 <prvInitialiseNewTask+0x34>
    d194:	b672      	cpsid	i
    d196:	e7fe      	b.n	d196 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    d198:	2300      	movs	r3, #0
    d19a:	617b      	str	r3, [r7, #20]
    d19c:	e013      	b.n	d1c6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    d19e:	68ba      	ldr	r2, [r7, #8]
    d1a0:	697b      	ldr	r3, [r7, #20]
    d1a2:	18d3      	adds	r3, r2, r3
    d1a4:	7818      	ldrb	r0, [r3, #0]
    d1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d1a8:	2134      	movs	r1, #52	; 0x34
    d1aa:	697b      	ldr	r3, [r7, #20]
    d1ac:	18d3      	adds	r3, r2, r3
    d1ae:	185b      	adds	r3, r3, r1
    d1b0:	1c02      	adds	r2, r0, #0
    d1b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    d1b4:	68ba      	ldr	r2, [r7, #8]
    d1b6:	697b      	ldr	r3, [r7, #20]
    d1b8:	18d3      	adds	r3, r2, r3
    d1ba:	781b      	ldrb	r3, [r3, #0]
    d1bc:	2b00      	cmp	r3, #0
    d1be:	d006      	beq.n	d1ce <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    d1c0:	697b      	ldr	r3, [r7, #20]
    d1c2:	3301      	adds	r3, #1
    d1c4:	617b      	str	r3, [r7, #20]
    d1c6:	697b      	ldr	r3, [r7, #20]
    d1c8:	2b0b      	cmp	r3, #11
    d1ca:	d9e8      	bls.n	d19e <prvInitialiseNewTask+0x3a>
    d1cc:	e000      	b.n	d1d0 <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    d1ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1d2:	223f      	movs	r2, #63	; 0x3f
    d1d4:	2100      	movs	r1, #0
    d1d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    d1d8:	6a3b      	ldr	r3, [r7, #32]
    d1da:	2b04      	cmp	r3, #4
    d1dc:	d901      	bls.n	d1e2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    d1de:	2304      	movs	r3, #4
    d1e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1e4:	6a3a      	ldr	r2, [r7, #32]
    d1e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1ea:	6a3a      	ldr	r2, [r7, #32]
    d1ec:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    d1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1f0:	2200      	movs	r2, #0
    d1f2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    d1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d1f6:	3304      	adds	r3, #4
    d1f8:	0018      	movs	r0, r3
    d1fa:	4b17      	ldr	r3, [pc, #92]	; (d258 <prvInitialiseNewTask+0xf4>)
    d1fc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d200:	3318      	adds	r3, #24
    d202:	0018      	movs	r0, r3
    d204:	4b14      	ldr	r3, [pc, #80]	; (d258 <prvInitialiseNewTask+0xf4>)
    d206:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d20c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    d20e:	6a3b      	ldr	r3, [r7, #32]
    d210:	2205      	movs	r2, #5
    d212:	1ad2      	subs	r2, r2, r3
    d214:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d216:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d21a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d21c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d220:	2200      	movs	r2, #0
    d222:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d226:	224c      	movs	r2, #76	; 0x4c
    d228:	2100      	movs	r1, #0
    d22a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    d22c:	683a      	ldr	r2, [r7, #0]
    d22e:	68f9      	ldr	r1, [r7, #12]
    d230:	693b      	ldr	r3, [r7, #16]
    d232:	0018      	movs	r0, r3
    d234:	4b09      	ldr	r3, [pc, #36]	; (d25c <prvInitialiseNewTask+0xf8>)
    d236:	4798      	blx	r3
    d238:	0002      	movs	r2, r0
    d23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d23c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d240:	2b00      	cmp	r3, #0
    d242:	d002      	beq.n	d24a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d246:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    d24a:	46c0      	nop			; (mov r8, r8)
    d24c:	46bd      	mov	sp, r7
    d24e:	b006      	add	sp, #24
    d250:	bd80      	pop	{r7, pc}
    d252:	46c0      	nop			; (mov r8, r8)
    d254:	3fffffff 	.word	0x3fffffff
    d258:	0000c1cd 	.word	0x0000c1cd
    d25c:	0000c2e5 	.word	0x0000c2e5

0000d260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    d260:	b580      	push	{r7, lr}
    d262:	b082      	sub	sp, #8
    d264:	af00      	add	r7, sp, #0
    d266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    d268:	4b29      	ldr	r3, [pc, #164]	; (d310 <prvAddNewTaskToReadyList+0xb0>)
    d26a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    d26c:	4b29      	ldr	r3, [pc, #164]	; (d314 <prvAddNewTaskToReadyList+0xb4>)
    d26e:	681b      	ldr	r3, [r3, #0]
    d270:	1c5a      	adds	r2, r3, #1
    d272:	4b28      	ldr	r3, [pc, #160]	; (d314 <prvAddNewTaskToReadyList+0xb4>)
    d274:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    d276:	4b28      	ldr	r3, [pc, #160]	; (d318 <prvAddNewTaskToReadyList+0xb8>)
    d278:	681b      	ldr	r3, [r3, #0]
    d27a:	2b00      	cmp	r3, #0
    d27c:	d109      	bne.n	d292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    d27e:	4b26      	ldr	r3, [pc, #152]	; (d318 <prvAddNewTaskToReadyList+0xb8>)
    d280:	687a      	ldr	r2, [r7, #4]
    d282:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    d284:	4b23      	ldr	r3, [pc, #140]	; (d314 <prvAddNewTaskToReadyList+0xb4>)
    d286:	681b      	ldr	r3, [r3, #0]
    d288:	2b01      	cmp	r3, #1
    d28a:	d110      	bne.n	d2ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    d28c:	4b23      	ldr	r3, [pc, #140]	; (d31c <prvAddNewTaskToReadyList+0xbc>)
    d28e:	4798      	blx	r3
    d290:	e00d      	b.n	d2ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    d292:	4b23      	ldr	r3, [pc, #140]	; (d320 <prvAddNewTaskToReadyList+0xc0>)
    d294:	681b      	ldr	r3, [r3, #0]
    d296:	2b00      	cmp	r3, #0
    d298:	d109      	bne.n	d2ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    d29a:	4b1f      	ldr	r3, [pc, #124]	; (d318 <prvAddNewTaskToReadyList+0xb8>)
    d29c:	681b      	ldr	r3, [r3, #0]
    d29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d2a4:	429a      	cmp	r2, r3
    d2a6:	d802      	bhi.n	d2ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    d2a8:	4b1b      	ldr	r3, [pc, #108]	; (d318 <prvAddNewTaskToReadyList+0xb8>)
    d2aa:	687a      	ldr	r2, [r7, #4]
    d2ac:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    d2ae:	4b1d      	ldr	r3, [pc, #116]	; (d324 <prvAddNewTaskToReadyList+0xc4>)
    d2b0:	681b      	ldr	r3, [r3, #0]
    d2b2:	1c5a      	adds	r2, r3, #1
    d2b4:	4b1b      	ldr	r3, [pc, #108]	; (d324 <prvAddNewTaskToReadyList+0xc4>)
    d2b6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    d2b8:	687b      	ldr	r3, [r7, #4]
    d2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2bc:	4b1a      	ldr	r3, [pc, #104]	; (d328 <prvAddNewTaskToReadyList+0xc8>)
    d2be:	681b      	ldr	r3, [r3, #0]
    d2c0:	429a      	cmp	r2, r3
    d2c2:	d903      	bls.n	d2cc <prvAddNewTaskToReadyList+0x6c>
    d2c4:	687b      	ldr	r3, [r7, #4]
    d2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2c8:	4b17      	ldr	r3, [pc, #92]	; (d328 <prvAddNewTaskToReadyList+0xc8>)
    d2ca:	601a      	str	r2, [r3, #0]
    d2cc:	687b      	ldr	r3, [r7, #4]
    d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2d0:	0013      	movs	r3, r2
    d2d2:	009b      	lsls	r3, r3, #2
    d2d4:	189b      	adds	r3, r3, r2
    d2d6:	009b      	lsls	r3, r3, #2
    d2d8:	4a14      	ldr	r2, [pc, #80]	; (d32c <prvAddNewTaskToReadyList+0xcc>)
    d2da:	189a      	adds	r2, r3, r2
    d2dc:	687b      	ldr	r3, [r7, #4]
    d2de:	3304      	adds	r3, #4
    d2e0:	0019      	movs	r1, r3
    d2e2:	0010      	movs	r0, r2
    d2e4:	4b12      	ldr	r3, [pc, #72]	; (d330 <prvAddNewTaskToReadyList+0xd0>)
    d2e6:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    d2e8:	4b12      	ldr	r3, [pc, #72]	; (d334 <prvAddNewTaskToReadyList+0xd4>)
    d2ea:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    d2ec:	4b0c      	ldr	r3, [pc, #48]	; (d320 <prvAddNewTaskToReadyList+0xc0>)
    d2ee:	681b      	ldr	r3, [r3, #0]
    d2f0:	2b00      	cmp	r3, #0
    d2f2:	d008      	beq.n	d306 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    d2f4:	4b08      	ldr	r3, [pc, #32]	; (d318 <prvAddNewTaskToReadyList+0xb8>)
    d2f6:	681b      	ldr	r3, [r3, #0]
    d2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d2fa:	687b      	ldr	r3, [r7, #4]
    d2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d2fe:	429a      	cmp	r2, r3
    d300:	d201      	bcs.n	d306 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    d302:	4b0d      	ldr	r3, [pc, #52]	; (d338 <prvAddNewTaskToReadyList+0xd8>)
    d304:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	46bd      	mov	sp, r7
    d30a:	b002      	add	sp, #8
    d30c:	bd80      	pop	{r7, pc}
    d30e:	46c0      	nop			; (mov r8, r8)
    d310:	0000c409 	.word	0x0000c409
    d314:	20003e18 	.word	0x20003e18
    d318:	20003d40 	.word	0x20003d40
    d31c:	0000dad5 	.word	0x0000dad5
    d320:	20003e24 	.word	0x20003e24
    d324:	20003e34 	.word	0x20003e34
    d328:	20003e20 	.word	0x20003e20
    d32c:	20003d44 	.word	0x20003d44
    d330:	0000c1e5 	.word	0x0000c1e5
    d334:	0000c42d 	.word	0x0000c42d
    d338:	0000c3e9 	.word	0x0000c3e9

0000d33c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    d33c:	b580      	push	{r7, lr}
    d33e:	b086      	sub	sp, #24
    d340:	af00      	add	r7, sp, #0
    d342:	6078      	str	r0, [r7, #4]
    d344:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    d346:	2300      	movs	r3, #0
    d348:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    d34a:	687b      	ldr	r3, [r7, #4]
    d34c:	2b00      	cmp	r3, #0
    d34e:	d101      	bne.n	d354 <vTaskDelayUntil+0x18>
    d350:	b672      	cpsid	i
    d352:	e7fe      	b.n	d352 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    d354:	683b      	ldr	r3, [r7, #0]
    d356:	2b00      	cmp	r3, #0
    d358:	d101      	bne.n	d35e <vTaskDelayUntil+0x22>
    d35a:	b672      	cpsid	i
    d35c:	e7fe      	b.n	d35c <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    d35e:	4b23      	ldr	r3, [pc, #140]	; (d3ec <vTaskDelayUntil+0xb0>)
    d360:	681b      	ldr	r3, [r3, #0]
    d362:	2b00      	cmp	r3, #0
    d364:	d001      	beq.n	d36a <vTaskDelayUntil+0x2e>
    d366:	b672      	cpsid	i
    d368:	e7fe      	b.n	d368 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    d36a:	4b21      	ldr	r3, [pc, #132]	; (d3f0 <vTaskDelayUntil+0xb4>)
    d36c:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    d36e:	4b21      	ldr	r3, [pc, #132]	; (d3f4 <vTaskDelayUntil+0xb8>)
    d370:	681b      	ldr	r3, [r3, #0]
    d372:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    d374:	687b      	ldr	r3, [r7, #4]
    d376:	681a      	ldr	r2, [r3, #0]
    d378:	683b      	ldr	r3, [r7, #0]
    d37a:	18d3      	adds	r3, r2, r3
    d37c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    d37e:	687b      	ldr	r3, [r7, #4]
    d380:	681a      	ldr	r2, [r3, #0]
    d382:	693b      	ldr	r3, [r7, #16]
    d384:	429a      	cmp	r2, r3
    d386:	d90b      	bls.n	d3a0 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    d388:	687b      	ldr	r3, [r7, #4]
    d38a:	681a      	ldr	r2, [r3, #0]
    d38c:	68fb      	ldr	r3, [r7, #12]
    d38e:	429a      	cmp	r2, r3
    d390:	d911      	bls.n	d3b6 <vTaskDelayUntil+0x7a>
    d392:	68fa      	ldr	r2, [r7, #12]
    d394:	693b      	ldr	r3, [r7, #16]
    d396:	429a      	cmp	r2, r3
    d398:	d90d      	bls.n	d3b6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    d39a:	2301      	movs	r3, #1
    d39c:	617b      	str	r3, [r7, #20]
    d39e:	e00a      	b.n	d3b6 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    d3a0:	687b      	ldr	r3, [r7, #4]
    d3a2:	681a      	ldr	r2, [r3, #0]
    d3a4:	68fb      	ldr	r3, [r7, #12]
    d3a6:	429a      	cmp	r2, r3
    d3a8:	d803      	bhi.n	d3b2 <vTaskDelayUntil+0x76>
    d3aa:	68fa      	ldr	r2, [r7, #12]
    d3ac:	693b      	ldr	r3, [r7, #16]
    d3ae:	429a      	cmp	r2, r3
    d3b0:	d901      	bls.n	d3b6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    d3b2:	2301      	movs	r3, #1
    d3b4:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    d3b6:	687b      	ldr	r3, [r7, #4]
    d3b8:	68fa      	ldr	r2, [r7, #12]
    d3ba:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    d3bc:	697b      	ldr	r3, [r7, #20]
    d3be:	2b00      	cmp	r3, #0
    d3c0:	d006      	beq.n	d3d0 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    d3c2:	68fa      	ldr	r2, [r7, #12]
    d3c4:	693b      	ldr	r3, [r7, #16]
    d3c6:	1ad3      	subs	r3, r2, r3
    d3c8:	2100      	movs	r1, #0
    d3ca:	0018      	movs	r0, r3
    d3cc:	4b0a      	ldr	r3, [pc, #40]	; (d3f8 <vTaskDelayUntil+0xbc>)
    d3ce:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    d3d0:	4b0a      	ldr	r3, [pc, #40]	; (d3fc <vTaskDelayUntil+0xc0>)
    d3d2:	4798      	blx	r3
    d3d4:	0003      	movs	r3, r0
    d3d6:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    d3d8:	68bb      	ldr	r3, [r7, #8]
    d3da:	2b00      	cmp	r3, #0
    d3dc:	d101      	bne.n	d3e2 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    d3de:	4b08      	ldr	r3, [pc, #32]	; (d400 <vTaskDelayUntil+0xc4>)
    d3e0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    d3e2:	46c0      	nop			; (mov r8, r8)
    d3e4:	46bd      	mov	sp, r7
    d3e6:	b006      	add	sp, #24
    d3e8:	bd80      	pop	{r7, pc}
    d3ea:	46c0      	nop			; (mov r8, r8)
    d3ec:	20003e40 	.word	0x20003e40
    d3f0:	0000d4e9 	.word	0x0000d4e9
    d3f4:	20003e1c 	.word	0x20003e1c
    d3f8:	0000de3d 	.word	0x0000de3d
    d3fc:	0000d501 	.word	0x0000d501
    d400:	0000c3e9 	.word	0x0000c3e9

0000d404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    d404:	b580      	push	{r7, lr}
    d406:	b084      	sub	sp, #16
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    d40c:	2300      	movs	r3, #0
    d40e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    d410:	687b      	ldr	r3, [r7, #4]
    d412:	2b00      	cmp	r3, #0
    d414:	d010      	beq.n	d438 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    d416:	4b0d      	ldr	r3, [pc, #52]	; (d44c <vTaskDelay+0x48>)
    d418:	681b      	ldr	r3, [r3, #0]
    d41a:	2b00      	cmp	r3, #0
    d41c:	d001      	beq.n	d422 <vTaskDelay+0x1e>
    d41e:	b672      	cpsid	i
    d420:	e7fe      	b.n	d420 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    d422:	4b0b      	ldr	r3, [pc, #44]	; (d450 <vTaskDelay+0x4c>)
    d424:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    d426:	687b      	ldr	r3, [r7, #4]
    d428:	2100      	movs	r1, #0
    d42a:	0018      	movs	r0, r3
    d42c:	4b09      	ldr	r3, [pc, #36]	; (d454 <vTaskDelay+0x50>)
    d42e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    d430:	4b09      	ldr	r3, [pc, #36]	; (d458 <vTaskDelay+0x54>)
    d432:	4798      	blx	r3
    d434:	0003      	movs	r3, r0
    d436:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    d438:	68fb      	ldr	r3, [r7, #12]
    d43a:	2b00      	cmp	r3, #0
    d43c:	d101      	bne.n	d442 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    d43e:	4b07      	ldr	r3, [pc, #28]	; (d45c <vTaskDelay+0x58>)
    d440:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    d442:	46c0      	nop			; (mov r8, r8)
    d444:	46bd      	mov	sp, r7
    d446:	b004      	add	sp, #16
    d448:	bd80      	pop	{r7, pc}
    d44a:	46c0      	nop			; (mov r8, r8)
    d44c:	20003e40 	.word	0x20003e40
    d450:	0000d4e9 	.word	0x0000d4e9
    d454:	0000de3d 	.word	0x0000de3d
    d458:	0000d501 	.word	0x0000d501
    d45c:	0000c3e9 	.word	0x0000c3e9

0000d460 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    d460:	b590      	push	{r4, r7, lr}
    d462:	b085      	sub	sp, #20
    d464:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    d466:	2380      	movs	r3, #128	; 0x80
    d468:	009a      	lsls	r2, r3, #2
    d46a:	4916      	ldr	r1, [pc, #88]	; (d4c4 <vTaskStartScheduler+0x64>)
    d46c:	4816      	ldr	r0, [pc, #88]	; (d4c8 <vTaskStartScheduler+0x68>)
    d46e:	4b17      	ldr	r3, [pc, #92]	; (d4cc <vTaskStartScheduler+0x6c>)
    d470:	9301      	str	r3, [sp, #4]
    d472:	2300      	movs	r3, #0
    d474:	9300      	str	r3, [sp, #0]
    d476:	2300      	movs	r3, #0
    d478:	4c15      	ldr	r4, [pc, #84]	; (d4d0 <vTaskStartScheduler+0x70>)
    d47a:	47a0      	blx	r4
    d47c:	0003      	movs	r3, r0
    d47e:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    d480:	687b      	ldr	r3, [r7, #4]
    d482:	2b01      	cmp	r3, #1
    d484:	d103      	bne.n	d48e <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    d486:	4b13      	ldr	r3, [pc, #76]	; (d4d4 <vTaskStartScheduler+0x74>)
    d488:	4798      	blx	r3
    d48a:	0003      	movs	r3, r0
    d48c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    d48e:	687b      	ldr	r3, [r7, #4]
    d490:	2b01      	cmp	r3, #1
    d492:	d10d      	bne.n	d4b0 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    d494:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    d496:	4b10      	ldr	r3, [pc, #64]	; (d4d8 <vTaskStartScheduler+0x78>)
    d498:	2201      	movs	r2, #1
    d49a:	4252      	negs	r2, r2
    d49c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    d49e:	4b0f      	ldr	r3, [pc, #60]	; (d4dc <vTaskStartScheduler+0x7c>)
    d4a0:	2201      	movs	r2, #1
    d4a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    d4a4:	4b0e      	ldr	r3, [pc, #56]	; (d4e0 <vTaskStartScheduler+0x80>)
    d4a6:	2200      	movs	r2, #0
    d4a8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    d4aa:	4b0e      	ldr	r3, [pc, #56]	; (d4e4 <vTaskStartScheduler+0x84>)
    d4ac:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    d4ae:	e004      	b.n	d4ba <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    d4b0:	687b      	ldr	r3, [r7, #4]
    d4b2:	3301      	adds	r3, #1
    d4b4:	d101      	bne.n	d4ba <vTaskStartScheduler+0x5a>
    d4b6:	b672      	cpsid	i
    d4b8:	e7fe      	b.n	d4b8 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    d4ba:	46c0      	nop			; (mov r8, r8)
    d4bc:	46bd      	mov	sp, r7
    d4be:	b003      	add	sp, #12
    d4c0:	bd90      	pop	{r4, r7, pc}
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	000137bc 	.word	0x000137bc
    d4c8:	0000dab9 	.word	0x0000dab9
    d4cc:	20003e3c 	.word	0x20003e3c
    d4d0:	0000d0c5 	.word	0x0000d0c5
    d4d4:	0000def1 	.word	0x0000def1
    d4d8:	20003e38 	.word	0x20003e38
    d4dc:	20003e24 	.word	0x20003e24
    d4e0:	20003e1c 	.word	0x20003e1c
    d4e4:	0000c399 	.word	0x0000c399

0000d4e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    d4e8:	b580      	push	{r7, lr}
    d4ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    d4ec:	4b03      	ldr	r3, [pc, #12]	; (d4fc <vTaskSuspendAll+0x14>)
    d4ee:	681b      	ldr	r3, [r3, #0]
    d4f0:	1c5a      	adds	r2, r3, #1
    d4f2:	4b02      	ldr	r3, [pc, #8]	; (d4fc <vTaskSuspendAll+0x14>)
    d4f4:	601a      	str	r2, [r3, #0]
}
    d4f6:	46c0      	nop			; (mov r8, r8)
    d4f8:	46bd      	mov	sp, r7
    d4fa:	bd80      	pop	{r7, pc}
    d4fc:	20003e40 	.word	0x20003e40

0000d500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    d500:	b580      	push	{r7, lr}
    d502:	b084      	sub	sp, #16
    d504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    d506:	2300      	movs	r3, #0
    d508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    d50a:	2300      	movs	r3, #0
    d50c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    d50e:	4b3a      	ldr	r3, [pc, #232]	; (d5f8 <xTaskResumeAll+0xf8>)
    d510:	681b      	ldr	r3, [r3, #0]
    d512:	2b00      	cmp	r3, #0
    d514:	d101      	bne.n	d51a <xTaskResumeAll+0x1a>
    d516:	b672      	cpsid	i
    d518:	e7fe      	b.n	d518 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    d51a:	4b38      	ldr	r3, [pc, #224]	; (d5fc <xTaskResumeAll+0xfc>)
    d51c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    d51e:	4b36      	ldr	r3, [pc, #216]	; (d5f8 <xTaskResumeAll+0xf8>)
    d520:	681b      	ldr	r3, [r3, #0]
    d522:	1e5a      	subs	r2, r3, #1
    d524:	4b34      	ldr	r3, [pc, #208]	; (d5f8 <xTaskResumeAll+0xf8>)
    d526:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    d528:	4b33      	ldr	r3, [pc, #204]	; (d5f8 <xTaskResumeAll+0xf8>)
    d52a:	681b      	ldr	r3, [r3, #0]
    d52c:	2b00      	cmp	r3, #0
    d52e:	d15b      	bne.n	d5e8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    d530:	4b33      	ldr	r3, [pc, #204]	; (d600 <xTaskResumeAll+0x100>)
    d532:	681b      	ldr	r3, [r3, #0]
    d534:	2b00      	cmp	r3, #0
    d536:	d057      	beq.n	d5e8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    d538:	e02f      	b.n	d59a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    d53a:	4b32      	ldr	r3, [pc, #200]	; (d604 <xTaskResumeAll+0x104>)
    d53c:	68db      	ldr	r3, [r3, #12]
    d53e:	68db      	ldr	r3, [r3, #12]
    d540:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    d542:	68fb      	ldr	r3, [r7, #12]
    d544:	3318      	adds	r3, #24
    d546:	0018      	movs	r0, r3
    d548:	4b2f      	ldr	r3, [pc, #188]	; (d608 <xTaskResumeAll+0x108>)
    d54a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	3304      	adds	r3, #4
    d550:	0018      	movs	r0, r3
    d552:	4b2d      	ldr	r3, [pc, #180]	; (d608 <xTaskResumeAll+0x108>)
    d554:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    d556:	68fb      	ldr	r3, [r7, #12]
    d558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d55a:	4b2c      	ldr	r3, [pc, #176]	; (d60c <xTaskResumeAll+0x10c>)
    d55c:	681b      	ldr	r3, [r3, #0]
    d55e:	429a      	cmp	r2, r3
    d560:	d903      	bls.n	d56a <xTaskResumeAll+0x6a>
    d562:	68fb      	ldr	r3, [r7, #12]
    d564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d566:	4b29      	ldr	r3, [pc, #164]	; (d60c <xTaskResumeAll+0x10c>)
    d568:	601a      	str	r2, [r3, #0]
    d56a:	68fb      	ldr	r3, [r7, #12]
    d56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d56e:	0013      	movs	r3, r2
    d570:	009b      	lsls	r3, r3, #2
    d572:	189b      	adds	r3, r3, r2
    d574:	009b      	lsls	r3, r3, #2
    d576:	4a26      	ldr	r2, [pc, #152]	; (d610 <xTaskResumeAll+0x110>)
    d578:	189a      	adds	r2, r3, r2
    d57a:	68fb      	ldr	r3, [r7, #12]
    d57c:	3304      	adds	r3, #4
    d57e:	0019      	movs	r1, r3
    d580:	0010      	movs	r0, r2
    d582:	4b24      	ldr	r3, [pc, #144]	; (d614 <xTaskResumeAll+0x114>)
    d584:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    d586:	68fb      	ldr	r3, [r7, #12]
    d588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d58a:	4b23      	ldr	r3, [pc, #140]	; (d618 <xTaskResumeAll+0x118>)
    d58c:	681b      	ldr	r3, [r3, #0]
    d58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d590:	429a      	cmp	r2, r3
    d592:	d302      	bcc.n	d59a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    d594:	4b21      	ldr	r3, [pc, #132]	; (d61c <xTaskResumeAll+0x11c>)
    d596:	2201      	movs	r2, #1
    d598:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    d59a:	4b1a      	ldr	r3, [pc, #104]	; (d604 <xTaskResumeAll+0x104>)
    d59c:	681b      	ldr	r3, [r3, #0]
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d1cb      	bne.n	d53a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    d5a2:	68fb      	ldr	r3, [r7, #12]
    d5a4:	2b00      	cmp	r3, #0
    d5a6:	d001      	beq.n	d5ac <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    d5a8:	4b1d      	ldr	r3, [pc, #116]	; (d620 <xTaskResumeAll+0x120>)
    d5aa:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    d5ac:	4b1d      	ldr	r3, [pc, #116]	; (d624 <xTaskResumeAll+0x124>)
    d5ae:	681b      	ldr	r3, [r3, #0]
    d5b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    d5b2:	687b      	ldr	r3, [r7, #4]
    d5b4:	2b00      	cmp	r3, #0
    d5b6:	d00f      	beq.n	d5d8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    d5b8:	4b1b      	ldr	r3, [pc, #108]	; (d628 <xTaskResumeAll+0x128>)
    d5ba:	4798      	blx	r3
    d5bc:	1e03      	subs	r3, r0, #0
    d5be:	d002      	beq.n	d5c6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    d5c0:	4b16      	ldr	r3, [pc, #88]	; (d61c <xTaskResumeAll+0x11c>)
    d5c2:	2201      	movs	r2, #1
    d5c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    d5c6:	687b      	ldr	r3, [r7, #4]
    d5c8:	3b01      	subs	r3, #1
    d5ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    d5cc:	687b      	ldr	r3, [r7, #4]
    d5ce:	2b00      	cmp	r3, #0
    d5d0:	d1f2      	bne.n	d5b8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    d5d2:	4b14      	ldr	r3, [pc, #80]	; (d624 <xTaskResumeAll+0x124>)
    d5d4:	2200      	movs	r2, #0
    d5d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    d5d8:	4b10      	ldr	r3, [pc, #64]	; (d61c <xTaskResumeAll+0x11c>)
    d5da:	681b      	ldr	r3, [r3, #0]
    d5dc:	2b00      	cmp	r3, #0
    d5de:	d003      	beq.n	d5e8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    d5e0:	2301      	movs	r3, #1
    d5e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    d5e4:	4b11      	ldr	r3, [pc, #68]	; (d62c <xTaskResumeAll+0x12c>)
    d5e6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    d5e8:	4b11      	ldr	r3, [pc, #68]	; (d630 <xTaskResumeAll+0x130>)
    d5ea:	4798      	blx	r3

	return xAlreadyYielded;
    d5ec:	68bb      	ldr	r3, [r7, #8]
}
    d5ee:	0018      	movs	r0, r3
    d5f0:	46bd      	mov	sp, r7
    d5f2:	b004      	add	sp, #16
    d5f4:	bd80      	pop	{r7, pc}
    d5f6:	46c0      	nop			; (mov r8, r8)
    d5f8:	20003e40 	.word	0x20003e40
    d5fc:	0000c409 	.word	0x0000c409
    d600:	20003e18 	.word	0x20003e18
    d604:	20003dd8 	.word	0x20003dd8
    d608:	0000c295 	.word	0x0000c295
    d60c:	20003e20 	.word	0x20003e20
    d610:	20003d44 	.word	0x20003d44
    d614:	0000c1e5 	.word	0x0000c1e5
    d618:	20003d40 	.word	0x20003d40
    d61c:	20003e2c 	.word	0x20003e2c
    d620:	0000dc15 	.word	0x0000dc15
    d624:	20003e28 	.word	0x20003e28
    d628:	0000d651 	.word	0x0000d651
    d62c:	0000c3e9 	.word	0x0000c3e9
    d630:	0000c42d 	.word	0x0000c42d

0000d634 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    d634:	b580      	push	{r7, lr}
    d636:	b082      	sub	sp, #8
    d638:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    d63a:	4b04      	ldr	r3, [pc, #16]	; (d64c <xTaskGetTickCount+0x18>)
    d63c:	681b      	ldr	r3, [r3, #0]
    d63e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    d640:	687b      	ldr	r3, [r7, #4]
}
    d642:	0018      	movs	r0, r3
    d644:	46bd      	mov	sp, r7
    d646:	b002      	add	sp, #8
    d648:	bd80      	pop	{r7, pc}
    d64a:	46c0      	nop			; (mov r8, r8)
    d64c:	20003e1c 	.word	0x20003e1c

0000d650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    d650:	b580      	push	{r7, lr}
    d652:	b086      	sub	sp, #24
    d654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    d656:	2300      	movs	r3, #0
    d658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    d65a:	4b45      	ldr	r3, [pc, #276]	; (d770 <xTaskIncrementTick+0x120>)
    d65c:	681b      	ldr	r3, [r3, #0]
    d65e:	2b00      	cmp	r3, #0
    d660:	d000      	beq.n	d664 <xTaskIncrementTick+0x14>
    d662:	e075      	b.n	d750 <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    d664:	4b43      	ldr	r3, [pc, #268]	; (d774 <xTaskIncrementTick+0x124>)
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	3301      	adds	r3, #1
    d66a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    d66c:	4b41      	ldr	r3, [pc, #260]	; (d774 <xTaskIncrementTick+0x124>)
    d66e:	693a      	ldr	r2, [r7, #16]
    d670:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    d672:	693b      	ldr	r3, [r7, #16]
    d674:	2b00      	cmp	r3, #0
    d676:	d117      	bne.n	d6a8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    d678:	4b3f      	ldr	r3, [pc, #252]	; (d778 <xTaskIncrementTick+0x128>)
    d67a:	681b      	ldr	r3, [r3, #0]
    d67c:	681b      	ldr	r3, [r3, #0]
    d67e:	2b00      	cmp	r3, #0
    d680:	d001      	beq.n	d686 <xTaskIncrementTick+0x36>
    d682:	b672      	cpsid	i
    d684:	e7fe      	b.n	d684 <xTaskIncrementTick+0x34>
    d686:	4b3c      	ldr	r3, [pc, #240]	; (d778 <xTaskIncrementTick+0x128>)
    d688:	681b      	ldr	r3, [r3, #0]
    d68a:	60fb      	str	r3, [r7, #12]
    d68c:	4b3b      	ldr	r3, [pc, #236]	; (d77c <xTaskIncrementTick+0x12c>)
    d68e:	681a      	ldr	r2, [r3, #0]
    d690:	4b39      	ldr	r3, [pc, #228]	; (d778 <xTaskIncrementTick+0x128>)
    d692:	601a      	str	r2, [r3, #0]
    d694:	4b39      	ldr	r3, [pc, #228]	; (d77c <xTaskIncrementTick+0x12c>)
    d696:	68fa      	ldr	r2, [r7, #12]
    d698:	601a      	str	r2, [r3, #0]
    d69a:	4b39      	ldr	r3, [pc, #228]	; (d780 <xTaskIncrementTick+0x130>)
    d69c:	681b      	ldr	r3, [r3, #0]
    d69e:	1c5a      	adds	r2, r3, #1
    d6a0:	4b37      	ldr	r3, [pc, #220]	; (d780 <xTaskIncrementTick+0x130>)
    d6a2:	601a      	str	r2, [r3, #0]
    d6a4:	4b37      	ldr	r3, [pc, #220]	; (d784 <xTaskIncrementTick+0x134>)
    d6a6:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    d6a8:	4b37      	ldr	r3, [pc, #220]	; (d788 <xTaskIncrementTick+0x138>)
    d6aa:	681b      	ldr	r3, [r3, #0]
    d6ac:	693a      	ldr	r2, [r7, #16]
    d6ae:	429a      	cmp	r2, r3
    d6b0:	d353      	bcc.n	d75a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    d6b2:	4b31      	ldr	r3, [pc, #196]	; (d778 <xTaskIncrementTick+0x128>)
    d6b4:	681b      	ldr	r3, [r3, #0]
    d6b6:	681b      	ldr	r3, [r3, #0]
    d6b8:	2b00      	cmp	r3, #0
    d6ba:	d101      	bne.n	d6c0 <xTaskIncrementTick+0x70>
    d6bc:	2301      	movs	r3, #1
    d6be:	e000      	b.n	d6c2 <xTaskIncrementTick+0x72>
    d6c0:	2300      	movs	r3, #0
    d6c2:	2b00      	cmp	r3, #0
    d6c4:	d004      	beq.n	d6d0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    d6c6:	4b30      	ldr	r3, [pc, #192]	; (d788 <xTaskIncrementTick+0x138>)
    d6c8:	2201      	movs	r2, #1
    d6ca:	4252      	negs	r2, r2
    d6cc:	601a      	str	r2, [r3, #0]
					break;
    d6ce:	e044      	b.n	d75a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    d6d0:	4b29      	ldr	r3, [pc, #164]	; (d778 <xTaskIncrementTick+0x128>)
    d6d2:	681b      	ldr	r3, [r3, #0]
    d6d4:	68db      	ldr	r3, [r3, #12]
    d6d6:	68db      	ldr	r3, [r3, #12]
    d6d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    d6da:	68bb      	ldr	r3, [r7, #8]
    d6dc:	685b      	ldr	r3, [r3, #4]
    d6de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    d6e0:	693a      	ldr	r2, [r7, #16]
    d6e2:	687b      	ldr	r3, [r7, #4]
    d6e4:	429a      	cmp	r2, r3
    d6e6:	d203      	bcs.n	d6f0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    d6e8:	4b27      	ldr	r3, [pc, #156]	; (d788 <xTaskIncrementTick+0x138>)
    d6ea:	687a      	ldr	r2, [r7, #4]
    d6ec:	601a      	str	r2, [r3, #0]
						break;
    d6ee:	e034      	b.n	d75a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    d6f0:	68bb      	ldr	r3, [r7, #8]
    d6f2:	3304      	adds	r3, #4
    d6f4:	0018      	movs	r0, r3
    d6f6:	4b25      	ldr	r3, [pc, #148]	; (d78c <xTaskIncrementTick+0x13c>)
    d6f8:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    d6fa:	68bb      	ldr	r3, [r7, #8]
    d6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d6fe:	2b00      	cmp	r3, #0
    d700:	d004      	beq.n	d70c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    d702:	68bb      	ldr	r3, [r7, #8]
    d704:	3318      	adds	r3, #24
    d706:	0018      	movs	r0, r3
    d708:	4b20      	ldr	r3, [pc, #128]	; (d78c <xTaskIncrementTick+0x13c>)
    d70a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    d70c:	68bb      	ldr	r3, [r7, #8]
    d70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d710:	4b1f      	ldr	r3, [pc, #124]	; (d790 <xTaskIncrementTick+0x140>)
    d712:	681b      	ldr	r3, [r3, #0]
    d714:	429a      	cmp	r2, r3
    d716:	d903      	bls.n	d720 <xTaskIncrementTick+0xd0>
    d718:	68bb      	ldr	r3, [r7, #8]
    d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d71c:	4b1c      	ldr	r3, [pc, #112]	; (d790 <xTaskIncrementTick+0x140>)
    d71e:	601a      	str	r2, [r3, #0]
    d720:	68bb      	ldr	r3, [r7, #8]
    d722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d724:	0013      	movs	r3, r2
    d726:	009b      	lsls	r3, r3, #2
    d728:	189b      	adds	r3, r3, r2
    d72a:	009b      	lsls	r3, r3, #2
    d72c:	4a19      	ldr	r2, [pc, #100]	; (d794 <xTaskIncrementTick+0x144>)
    d72e:	189a      	adds	r2, r3, r2
    d730:	68bb      	ldr	r3, [r7, #8]
    d732:	3304      	adds	r3, #4
    d734:	0019      	movs	r1, r3
    d736:	0010      	movs	r0, r2
    d738:	4b17      	ldr	r3, [pc, #92]	; (d798 <xTaskIncrementTick+0x148>)
    d73a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    d73c:	68bb      	ldr	r3, [r7, #8]
    d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d740:	4b16      	ldr	r3, [pc, #88]	; (d79c <xTaskIncrementTick+0x14c>)
    d742:	681b      	ldr	r3, [r3, #0]
    d744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d746:	429a      	cmp	r2, r3
    d748:	d3b3      	bcc.n	d6b2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    d74a:	2301      	movs	r3, #1
    d74c:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    d74e:	e7b0      	b.n	d6b2 <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    d750:	4b13      	ldr	r3, [pc, #76]	; (d7a0 <xTaskIncrementTick+0x150>)
    d752:	681b      	ldr	r3, [r3, #0]
    d754:	1c5a      	adds	r2, r3, #1
    d756:	4b12      	ldr	r3, [pc, #72]	; (d7a0 <xTaskIncrementTick+0x150>)
    d758:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    d75a:	4b12      	ldr	r3, [pc, #72]	; (d7a4 <xTaskIncrementTick+0x154>)
    d75c:	681b      	ldr	r3, [r3, #0]
    d75e:	2b00      	cmp	r3, #0
    d760:	d001      	beq.n	d766 <xTaskIncrementTick+0x116>
		{
			xSwitchRequired = pdTRUE;
    d762:	2301      	movs	r3, #1
    d764:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    d766:	697b      	ldr	r3, [r7, #20]
}
    d768:	0018      	movs	r0, r3
    d76a:	46bd      	mov	sp, r7
    d76c:	b006      	add	sp, #24
    d76e:	bd80      	pop	{r7, pc}
    d770:	20003e40 	.word	0x20003e40
    d774:	20003e1c 	.word	0x20003e1c
    d778:	20003dd0 	.word	0x20003dd0
    d77c:	20003dd4 	.word	0x20003dd4
    d780:	20003e30 	.word	0x20003e30
    d784:	0000dc15 	.word	0x0000dc15
    d788:	20003e38 	.word	0x20003e38
    d78c:	0000c295 	.word	0x0000c295
    d790:	20003e20 	.word	0x20003e20
    d794:	20003d44 	.word	0x20003d44
    d798:	0000c1e5 	.word	0x0000c1e5
    d79c:	20003d40 	.word	0x20003d40
    d7a0:	20003e28 	.word	0x20003e28
    d7a4:	20003e2c 	.word	0x20003e2c

0000d7a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    d7a8:	b580      	push	{r7, lr}
    d7aa:	b082      	sub	sp, #8
    d7ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    d7ae:	4b2a      	ldr	r3, [pc, #168]	; (d858 <vTaskSwitchContext+0xb0>)
    d7b0:	681b      	ldr	r3, [r3, #0]
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	d003      	beq.n	d7be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    d7b6:	4b29      	ldr	r3, [pc, #164]	; (d85c <vTaskSwitchContext+0xb4>)
    d7b8:	2201      	movs	r2, #1
    d7ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    d7bc:	e048      	b.n	d850 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    d7be:	4b27      	ldr	r3, [pc, #156]	; (d85c <vTaskSwitchContext+0xb4>)
    d7c0:	2200      	movs	r2, #0
    d7c2:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    d7c4:	4b26      	ldr	r3, [pc, #152]	; (d860 <vTaskSwitchContext+0xb8>)
    d7c6:	681b      	ldr	r3, [r3, #0]
    d7c8:	681a      	ldr	r2, [r3, #0]
    d7ca:	4b25      	ldr	r3, [pc, #148]	; (d860 <vTaskSwitchContext+0xb8>)
    d7cc:	681b      	ldr	r3, [r3, #0]
    d7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    d7d0:	429a      	cmp	r2, r3
    d7d2:	d808      	bhi.n	d7e6 <vTaskSwitchContext+0x3e>
    d7d4:	4b22      	ldr	r3, [pc, #136]	; (d860 <vTaskSwitchContext+0xb8>)
    d7d6:	681a      	ldr	r2, [r3, #0]
    d7d8:	4b21      	ldr	r3, [pc, #132]	; (d860 <vTaskSwitchContext+0xb8>)
    d7da:	681b      	ldr	r3, [r3, #0]
    d7dc:	3334      	adds	r3, #52	; 0x34
    d7de:	0019      	movs	r1, r3
    d7e0:	0010      	movs	r0, r2
    d7e2:	4b20      	ldr	r3, [pc, #128]	; (d864 <vTaskSwitchContext+0xbc>)
    d7e4:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    d7e6:	4b20      	ldr	r3, [pc, #128]	; (d868 <vTaskSwitchContext+0xc0>)
    d7e8:	681b      	ldr	r3, [r3, #0]
    d7ea:	607b      	str	r3, [r7, #4]
    d7ec:	e007      	b.n	d7fe <vTaskSwitchContext+0x56>
    d7ee:	687b      	ldr	r3, [r7, #4]
    d7f0:	2b00      	cmp	r3, #0
    d7f2:	d101      	bne.n	d7f8 <vTaskSwitchContext+0x50>
    d7f4:	b672      	cpsid	i
    d7f6:	e7fe      	b.n	d7f6 <vTaskSwitchContext+0x4e>
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	3b01      	subs	r3, #1
    d7fc:	607b      	str	r3, [r7, #4]
    d7fe:	491b      	ldr	r1, [pc, #108]	; (d86c <vTaskSwitchContext+0xc4>)
    d800:	687a      	ldr	r2, [r7, #4]
    d802:	0013      	movs	r3, r2
    d804:	009b      	lsls	r3, r3, #2
    d806:	189b      	adds	r3, r3, r2
    d808:	009b      	lsls	r3, r3, #2
    d80a:	585b      	ldr	r3, [r3, r1]
    d80c:	2b00      	cmp	r3, #0
    d80e:	d0ee      	beq.n	d7ee <vTaskSwitchContext+0x46>
    d810:	687a      	ldr	r2, [r7, #4]
    d812:	0013      	movs	r3, r2
    d814:	009b      	lsls	r3, r3, #2
    d816:	189b      	adds	r3, r3, r2
    d818:	009b      	lsls	r3, r3, #2
    d81a:	4a14      	ldr	r2, [pc, #80]	; (d86c <vTaskSwitchContext+0xc4>)
    d81c:	189b      	adds	r3, r3, r2
    d81e:	603b      	str	r3, [r7, #0]
    d820:	683b      	ldr	r3, [r7, #0]
    d822:	685b      	ldr	r3, [r3, #4]
    d824:	685a      	ldr	r2, [r3, #4]
    d826:	683b      	ldr	r3, [r7, #0]
    d828:	605a      	str	r2, [r3, #4]
    d82a:	683b      	ldr	r3, [r7, #0]
    d82c:	685a      	ldr	r2, [r3, #4]
    d82e:	683b      	ldr	r3, [r7, #0]
    d830:	3308      	adds	r3, #8
    d832:	429a      	cmp	r2, r3
    d834:	d104      	bne.n	d840 <vTaskSwitchContext+0x98>
    d836:	683b      	ldr	r3, [r7, #0]
    d838:	685b      	ldr	r3, [r3, #4]
    d83a:	685a      	ldr	r2, [r3, #4]
    d83c:	683b      	ldr	r3, [r7, #0]
    d83e:	605a      	str	r2, [r3, #4]
    d840:	683b      	ldr	r3, [r7, #0]
    d842:	685b      	ldr	r3, [r3, #4]
    d844:	68da      	ldr	r2, [r3, #12]
    d846:	4b06      	ldr	r3, [pc, #24]	; (d860 <vTaskSwitchContext+0xb8>)
    d848:	601a      	str	r2, [r3, #0]
    d84a:	4b07      	ldr	r3, [pc, #28]	; (d868 <vTaskSwitchContext+0xc0>)
    d84c:	687a      	ldr	r2, [r7, #4]
    d84e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    d850:	46c0      	nop			; (mov r8, r8)
    d852:	46bd      	mov	sp, r7
    d854:	b002      	add	sp, #8
    d856:	bd80      	pop	{r7, pc}
    d858:	20003e40 	.word	0x20003e40
    d85c:	20003e2c 	.word	0x20003e2c
    d860:	20003d40 	.word	0x20003d40
    d864:	0000f0e5 	.word	0x0000f0e5
    d868:	20003e20 	.word	0x20003e20
    d86c:	20003d44 	.word	0x20003d44

0000d870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    d870:	b580      	push	{r7, lr}
    d872:	b082      	sub	sp, #8
    d874:	af00      	add	r7, sp, #0
    d876:	6078      	str	r0, [r7, #4]
    d878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    d87a:	687b      	ldr	r3, [r7, #4]
    d87c:	2b00      	cmp	r3, #0
    d87e:	d101      	bne.n	d884 <vTaskPlaceOnEventList+0x14>
    d880:	b672      	cpsid	i
    d882:	e7fe      	b.n	d882 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    d884:	4b08      	ldr	r3, [pc, #32]	; (d8a8 <vTaskPlaceOnEventList+0x38>)
    d886:	681b      	ldr	r3, [r3, #0]
    d888:	3318      	adds	r3, #24
    d88a:	001a      	movs	r2, r3
    d88c:	687b      	ldr	r3, [r7, #4]
    d88e:	0011      	movs	r1, r2
    d890:	0018      	movs	r0, r3
    d892:	4b06      	ldr	r3, [pc, #24]	; (d8ac <vTaskPlaceOnEventList+0x3c>)
    d894:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    d896:	683b      	ldr	r3, [r7, #0]
    d898:	2101      	movs	r1, #1
    d89a:	0018      	movs	r0, r3
    d89c:	4b04      	ldr	r3, [pc, #16]	; (d8b0 <vTaskPlaceOnEventList+0x40>)
    d89e:	4798      	blx	r3
}
    d8a0:	46c0      	nop			; (mov r8, r8)
    d8a2:	46bd      	mov	sp, r7
    d8a4:	b002      	add	sp, #8
    d8a6:	bd80      	pop	{r7, pc}
    d8a8:	20003d40 	.word	0x20003d40
    d8ac:	0000c229 	.word	0x0000c229
    d8b0:	0000de3d 	.word	0x0000de3d

0000d8b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    d8b4:	b580      	push	{r7, lr}
    d8b6:	b084      	sub	sp, #16
    d8b8:	af00      	add	r7, sp, #0
    d8ba:	60f8      	str	r0, [r7, #12]
    d8bc:	60b9      	str	r1, [r7, #8]
    d8be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    d8c0:	68fb      	ldr	r3, [r7, #12]
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d101      	bne.n	d8ca <vTaskPlaceOnEventListRestricted+0x16>
    d8c6:	b672      	cpsid	i
    d8c8:	e7fe      	b.n	d8c8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    d8ca:	4b0c      	ldr	r3, [pc, #48]	; (d8fc <vTaskPlaceOnEventListRestricted+0x48>)
    d8cc:	681b      	ldr	r3, [r3, #0]
    d8ce:	3318      	adds	r3, #24
    d8d0:	001a      	movs	r2, r3
    d8d2:	68fb      	ldr	r3, [r7, #12]
    d8d4:	0011      	movs	r1, r2
    d8d6:	0018      	movs	r0, r3
    d8d8:	4b09      	ldr	r3, [pc, #36]	; (d900 <vTaskPlaceOnEventListRestricted+0x4c>)
    d8da:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    d8dc:	687b      	ldr	r3, [r7, #4]
    d8de:	2b00      	cmp	r3, #0
    d8e0:	d002      	beq.n	d8e8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    d8e2:	2301      	movs	r3, #1
    d8e4:	425b      	negs	r3, r3
    d8e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    d8e8:	687a      	ldr	r2, [r7, #4]
    d8ea:	68bb      	ldr	r3, [r7, #8]
    d8ec:	0011      	movs	r1, r2
    d8ee:	0018      	movs	r0, r3
    d8f0:	4b04      	ldr	r3, [pc, #16]	; (d904 <vTaskPlaceOnEventListRestricted+0x50>)
    d8f2:	4798      	blx	r3
	}
    d8f4:	46c0      	nop			; (mov r8, r8)
    d8f6:	46bd      	mov	sp, r7
    d8f8:	b004      	add	sp, #16
    d8fa:	bd80      	pop	{r7, pc}
    d8fc:	20003d40 	.word	0x20003d40
    d900:	0000c1e5 	.word	0x0000c1e5
    d904:	0000de3d 	.word	0x0000de3d

0000d908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    d908:	b580      	push	{r7, lr}
    d90a:	b084      	sub	sp, #16
    d90c:	af00      	add	r7, sp, #0
    d90e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    d910:	687b      	ldr	r3, [r7, #4]
    d912:	68db      	ldr	r3, [r3, #12]
    d914:	68db      	ldr	r3, [r3, #12]
    d916:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    d918:	68bb      	ldr	r3, [r7, #8]
    d91a:	2b00      	cmp	r3, #0
    d91c:	d101      	bne.n	d922 <xTaskRemoveFromEventList+0x1a>
    d91e:	b672      	cpsid	i
    d920:	e7fe      	b.n	d920 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    d922:	68bb      	ldr	r3, [r7, #8]
    d924:	3318      	adds	r3, #24
    d926:	0018      	movs	r0, r3
    d928:	4b1f      	ldr	r3, [pc, #124]	; (d9a8 <xTaskRemoveFromEventList+0xa0>)
    d92a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    d92c:	4b1f      	ldr	r3, [pc, #124]	; (d9ac <xTaskRemoveFromEventList+0xa4>)
    d92e:	681b      	ldr	r3, [r3, #0]
    d930:	2b00      	cmp	r3, #0
    d932:	d11d      	bne.n	d970 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    d934:	68bb      	ldr	r3, [r7, #8]
    d936:	3304      	adds	r3, #4
    d938:	0018      	movs	r0, r3
    d93a:	4b1b      	ldr	r3, [pc, #108]	; (d9a8 <xTaskRemoveFromEventList+0xa0>)
    d93c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    d93e:	68bb      	ldr	r3, [r7, #8]
    d940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d942:	4b1b      	ldr	r3, [pc, #108]	; (d9b0 <xTaskRemoveFromEventList+0xa8>)
    d944:	681b      	ldr	r3, [r3, #0]
    d946:	429a      	cmp	r2, r3
    d948:	d903      	bls.n	d952 <xTaskRemoveFromEventList+0x4a>
    d94a:	68bb      	ldr	r3, [r7, #8]
    d94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d94e:	4b18      	ldr	r3, [pc, #96]	; (d9b0 <xTaskRemoveFromEventList+0xa8>)
    d950:	601a      	str	r2, [r3, #0]
    d952:	68bb      	ldr	r3, [r7, #8]
    d954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d956:	0013      	movs	r3, r2
    d958:	009b      	lsls	r3, r3, #2
    d95a:	189b      	adds	r3, r3, r2
    d95c:	009b      	lsls	r3, r3, #2
    d95e:	4a15      	ldr	r2, [pc, #84]	; (d9b4 <xTaskRemoveFromEventList+0xac>)
    d960:	189a      	adds	r2, r3, r2
    d962:	68bb      	ldr	r3, [r7, #8]
    d964:	3304      	adds	r3, #4
    d966:	0019      	movs	r1, r3
    d968:	0010      	movs	r0, r2
    d96a:	4b13      	ldr	r3, [pc, #76]	; (d9b8 <xTaskRemoveFromEventList+0xb0>)
    d96c:	4798      	blx	r3
    d96e:	e007      	b.n	d980 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    d970:	68bb      	ldr	r3, [r7, #8]
    d972:	3318      	adds	r3, #24
    d974:	001a      	movs	r2, r3
    d976:	4b11      	ldr	r3, [pc, #68]	; (d9bc <xTaskRemoveFromEventList+0xb4>)
    d978:	0011      	movs	r1, r2
    d97a:	0018      	movs	r0, r3
    d97c:	4b0e      	ldr	r3, [pc, #56]	; (d9b8 <xTaskRemoveFromEventList+0xb0>)
    d97e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    d980:	68bb      	ldr	r3, [r7, #8]
    d982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d984:	4b0e      	ldr	r3, [pc, #56]	; (d9c0 <xTaskRemoveFromEventList+0xb8>)
    d986:	681b      	ldr	r3, [r3, #0]
    d988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d98a:	429a      	cmp	r2, r3
    d98c:	d905      	bls.n	d99a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    d98e:	2301      	movs	r3, #1
    d990:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    d992:	4b0c      	ldr	r3, [pc, #48]	; (d9c4 <xTaskRemoveFromEventList+0xbc>)
    d994:	2201      	movs	r2, #1
    d996:	601a      	str	r2, [r3, #0]
    d998:	e001      	b.n	d99e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    d99a:	2300      	movs	r3, #0
    d99c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    d99e:	68fb      	ldr	r3, [r7, #12]
}
    d9a0:	0018      	movs	r0, r3
    d9a2:	46bd      	mov	sp, r7
    d9a4:	b004      	add	sp, #16
    d9a6:	bd80      	pop	{r7, pc}
    d9a8:	0000c295 	.word	0x0000c295
    d9ac:	20003e40 	.word	0x20003e40
    d9b0:	20003e20 	.word	0x20003e20
    d9b4:	20003d44 	.word	0x20003d44
    d9b8:	0000c1e5 	.word	0x0000c1e5
    d9bc:	20003dd8 	.word	0x20003dd8
    d9c0:	20003d40 	.word	0x20003d40
    d9c4:	20003e2c 	.word	0x20003e2c

0000d9c8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    d9c8:	b580      	push	{r7, lr}
    d9ca:	b082      	sub	sp, #8
    d9cc:	af00      	add	r7, sp, #0
    d9ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    d9d0:	687b      	ldr	r3, [r7, #4]
    d9d2:	2b00      	cmp	r3, #0
    d9d4:	d101      	bne.n	d9da <vTaskSetTimeOutState+0x12>
    d9d6:	b672      	cpsid	i
    d9d8:	e7fe      	b.n	d9d8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    d9da:	4b06      	ldr	r3, [pc, #24]	; (d9f4 <vTaskSetTimeOutState+0x2c>)
    d9dc:	681a      	ldr	r2, [r3, #0]
    d9de:	687b      	ldr	r3, [r7, #4]
    d9e0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    d9e2:	4b05      	ldr	r3, [pc, #20]	; (d9f8 <vTaskSetTimeOutState+0x30>)
    d9e4:	681a      	ldr	r2, [r3, #0]
    d9e6:	687b      	ldr	r3, [r7, #4]
    d9e8:	605a      	str	r2, [r3, #4]
}
    d9ea:	46c0      	nop			; (mov r8, r8)
    d9ec:	46bd      	mov	sp, r7
    d9ee:	b002      	add	sp, #8
    d9f0:	bd80      	pop	{r7, pc}
    d9f2:	46c0      	nop			; (mov r8, r8)
    d9f4:	20003e30 	.word	0x20003e30
    d9f8:	20003e1c 	.word	0x20003e1c

0000d9fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    d9fc:	b580      	push	{r7, lr}
    d9fe:	b084      	sub	sp, #16
    da00:	af00      	add	r7, sp, #0
    da02:	6078      	str	r0, [r7, #4]
    da04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    da06:	687b      	ldr	r3, [r7, #4]
    da08:	2b00      	cmp	r3, #0
    da0a:	d101      	bne.n	da10 <xTaskCheckForTimeOut+0x14>
    da0c:	b672      	cpsid	i
    da0e:	e7fe      	b.n	da0e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    da10:	683b      	ldr	r3, [r7, #0]
    da12:	2b00      	cmp	r3, #0
    da14:	d101      	bne.n	da1a <xTaskCheckForTimeOut+0x1e>
    da16:	b672      	cpsid	i
    da18:	e7fe      	b.n	da18 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    da1a:	4b1d      	ldr	r3, [pc, #116]	; (da90 <xTaskCheckForTimeOut+0x94>)
    da1c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    da1e:	4b1d      	ldr	r3, [pc, #116]	; (da94 <xTaskCheckForTimeOut+0x98>)
    da20:	681b      	ldr	r3, [r3, #0]
    da22:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    da24:	683b      	ldr	r3, [r7, #0]
    da26:	681b      	ldr	r3, [r3, #0]
    da28:	3301      	adds	r3, #1
    da2a:	d102      	bne.n	da32 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    da2c:	2300      	movs	r3, #0
    da2e:	60fb      	str	r3, [r7, #12]
    da30:	e027      	b.n	da82 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	681a      	ldr	r2, [r3, #0]
    da36:	4b18      	ldr	r3, [pc, #96]	; (da98 <xTaskCheckForTimeOut+0x9c>)
    da38:	681b      	ldr	r3, [r3, #0]
    da3a:	429a      	cmp	r2, r3
    da3c:	d007      	beq.n	da4e <xTaskCheckForTimeOut+0x52>
    da3e:	687b      	ldr	r3, [r7, #4]
    da40:	685a      	ldr	r2, [r3, #4]
    da42:	68bb      	ldr	r3, [r7, #8]
    da44:	429a      	cmp	r2, r3
    da46:	d802      	bhi.n	da4e <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    da48:	2301      	movs	r3, #1
    da4a:	60fb      	str	r3, [r7, #12]
    da4c:	e019      	b.n	da82 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    da4e:	687b      	ldr	r3, [r7, #4]
    da50:	685b      	ldr	r3, [r3, #4]
    da52:	68ba      	ldr	r2, [r7, #8]
    da54:	1ad2      	subs	r2, r2, r3
    da56:	683b      	ldr	r3, [r7, #0]
    da58:	681b      	ldr	r3, [r3, #0]
    da5a:	429a      	cmp	r2, r3
    da5c:	d20f      	bcs.n	da7e <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    da5e:	683b      	ldr	r3, [r7, #0]
    da60:	681a      	ldr	r2, [r3, #0]
    da62:	687b      	ldr	r3, [r7, #4]
    da64:	6859      	ldr	r1, [r3, #4]
    da66:	68bb      	ldr	r3, [r7, #8]
    da68:	1acb      	subs	r3, r1, r3
    da6a:	18d2      	adds	r2, r2, r3
    da6c:	683b      	ldr	r3, [r7, #0]
    da6e:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    da70:	687b      	ldr	r3, [r7, #4]
    da72:	0018      	movs	r0, r3
    da74:	4b09      	ldr	r3, [pc, #36]	; (da9c <xTaskCheckForTimeOut+0xa0>)
    da76:	4798      	blx	r3
			xReturn = pdFALSE;
    da78:	2300      	movs	r3, #0
    da7a:	60fb      	str	r3, [r7, #12]
    da7c:	e001      	b.n	da82 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    da7e:	2301      	movs	r3, #1
    da80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    da82:	4b07      	ldr	r3, [pc, #28]	; (daa0 <xTaskCheckForTimeOut+0xa4>)
    da84:	4798      	blx	r3

	return xReturn;
    da86:	68fb      	ldr	r3, [r7, #12]
}
    da88:	0018      	movs	r0, r3
    da8a:	46bd      	mov	sp, r7
    da8c:	b004      	add	sp, #16
    da8e:	bd80      	pop	{r7, pc}
    da90:	0000c409 	.word	0x0000c409
    da94:	20003e1c 	.word	0x20003e1c
    da98:	20003e30 	.word	0x20003e30
    da9c:	0000d9c9 	.word	0x0000d9c9
    daa0:	0000c42d 	.word	0x0000c42d

0000daa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    daa4:	b580      	push	{r7, lr}
    daa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    daa8:	4b02      	ldr	r3, [pc, #8]	; (dab4 <vTaskMissedYield+0x10>)
    daaa:	2201      	movs	r2, #1
    daac:	601a      	str	r2, [r3, #0]
}
    daae:	46c0      	nop			; (mov r8, r8)
    dab0:	46bd      	mov	sp, r7
    dab2:	bd80      	pop	{r7, pc}
    dab4:	20003e2c 	.word	0x20003e2c

0000dab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    dab8:	b580      	push	{r7, lr}
    daba:	b082      	sub	sp, #8
    dabc:	af00      	add	r7, sp, #0
    dabe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    dac0:	4b02      	ldr	r3, [pc, #8]	; (dacc <prvIdleTask+0x14>)
    dac2:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    dac4:	4b02      	ldr	r3, [pc, #8]	; (dad0 <prvIdleTask+0x18>)
    dac6:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    dac8:	e7fa      	b.n	dac0 <prvIdleTask+0x8>
    daca:	46c0      	nop			; (mov r8, r8)
    dacc:	0000db61 	.word	0x0000db61
    dad0:	0000f0c9 	.word	0x0000f0c9

0000dad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    dad4:	b580      	push	{r7, lr}
    dad6:	b082      	sub	sp, #8
    dad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    dada:	2300      	movs	r3, #0
    dadc:	607b      	str	r3, [r7, #4]
    dade:	e00c      	b.n	dafa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    dae0:	687a      	ldr	r2, [r7, #4]
    dae2:	0013      	movs	r3, r2
    dae4:	009b      	lsls	r3, r3, #2
    dae6:	189b      	adds	r3, r3, r2
    dae8:	009b      	lsls	r3, r3, #2
    daea:	4a14      	ldr	r2, [pc, #80]	; (db3c <prvInitialiseTaskLists+0x68>)
    daec:	189b      	adds	r3, r3, r2
    daee:	0018      	movs	r0, r3
    daf0:	4b13      	ldr	r3, [pc, #76]	; (db40 <prvInitialiseTaskLists+0x6c>)
    daf2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    daf4:	687b      	ldr	r3, [r7, #4]
    daf6:	3301      	adds	r3, #1
    daf8:	607b      	str	r3, [r7, #4]
    dafa:	687b      	ldr	r3, [r7, #4]
    dafc:	2b04      	cmp	r3, #4
    dafe:	d9ef      	bls.n	dae0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    db00:	4b10      	ldr	r3, [pc, #64]	; (db44 <prvInitialiseTaskLists+0x70>)
    db02:	0018      	movs	r0, r3
    db04:	4b0e      	ldr	r3, [pc, #56]	; (db40 <prvInitialiseTaskLists+0x6c>)
    db06:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    db08:	4b0f      	ldr	r3, [pc, #60]	; (db48 <prvInitialiseTaskLists+0x74>)
    db0a:	0018      	movs	r0, r3
    db0c:	4b0c      	ldr	r3, [pc, #48]	; (db40 <prvInitialiseTaskLists+0x6c>)
    db0e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    db10:	4b0e      	ldr	r3, [pc, #56]	; (db4c <prvInitialiseTaskLists+0x78>)
    db12:	0018      	movs	r0, r3
    db14:	4b0a      	ldr	r3, [pc, #40]	; (db40 <prvInitialiseTaskLists+0x6c>)
    db16:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    db18:	4b0d      	ldr	r3, [pc, #52]	; (db50 <prvInitialiseTaskLists+0x7c>)
    db1a:	0018      	movs	r0, r3
    db1c:	4b08      	ldr	r3, [pc, #32]	; (db40 <prvInitialiseTaskLists+0x6c>)
    db1e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    db20:	4b0c      	ldr	r3, [pc, #48]	; (db54 <prvInitialiseTaskLists+0x80>)
    db22:	0018      	movs	r0, r3
    db24:	4b06      	ldr	r3, [pc, #24]	; (db40 <prvInitialiseTaskLists+0x6c>)
    db26:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    db28:	4b0b      	ldr	r3, [pc, #44]	; (db58 <prvInitialiseTaskLists+0x84>)
    db2a:	4a06      	ldr	r2, [pc, #24]	; (db44 <prvInitialiseTaskLists+0x70>)
    db2c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    db2e:	4b0b      	ldr	r3, [pc, #44]	; (db5c <prvInitialiseTaskLists+0x88>)
    db30:	4a05      	ldr	r2, [pc, #20]	; (db48 <prvInitialiseTaskLists+0x74>)
    db32:	601a      	str	r2, [r3, #0]
}
    db34:	46c0      	nop			; (mov r8, r8)
    db36:	46bd      	mov	sp, r7
    db38:	b002      	add	sp, #8
    db3a:	bd80      	pop	{r7, pc}
    db3c:	20003d44 	.word	0x20003d44
    db40:	0000c191 	.word	0x0000c191
    db44:	20003da8 	.word	0x20003da8
    db48:	20003dbc 	.word	0x20003dbc
    db4c:	20003dd8 	.word	0x20003dd8
    db50:	20003dec 	.word	0x20003dec
    db54:	20003e04 	.word	0x20003e04
    db58:	20003dd0 	.word	0x20003dd0
    db5c:	20003dd4 	.word	0x20003dd4

0000db60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    db60:	b580      	push	{r7, lr}
    db62:	b082      	sub	sp, #8
    db64:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    db66:	e027      	b.n	dbb8 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    db68:	4b17      	ldr	r3, [pc, #92]	; (dbc8 <prvCheckTasksWaitingTermination+0x68>)
    db6a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    db6c:	4b17      	ldr	r3, [pc, #92]	; (dbcc <prvCheckTasksWaitingTermination+0x6c>)
    db6e:	681b      	ldr	r3, [r3, #0]
    db70:	425a      	negs	r2, r3
    db72:	4153      	adcs	r3, r2
    db74:	b2db      	uxtb	r3, r3
    db76:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    db78:	4b15      	ldr	r3, [pc, #84]	; (dbd0 <prvCheckTasksWaitingTermination+0x70>)
    db7a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    db7c:	687b      	ldr	r3, [r7, #4]
    db7e:	2b00      	cmp	r3, #0
    db80:	d11a      	bne.n	dbb8 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    db82:	4b14      	ldr	r3, [pc, #80]	; (dbd4 <prvCheckTasksWaitingTermination+0x74>)
    db84:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    db86:	4b11      	ldr	r3, [pc, #68]	; (dbcc <prvCheckTasksWaitingTermination+0x6c>)
    db88:	68db      	ldr	r3, [r3, #12]
    db8a:	68db      	ldr	r3, [r3, #12]
    db8c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    db8e:	683b      	ldr	r3, [r7, #0]
    db90:	3304      	adds	r3, #4
    db92:	0018      	movs	r0, r3
    db94:	4b10      	ldr	r3, [pc, #64]	; (dbd8 <prvCheckTasksWaitingTermination+0x78>)
    db96:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    db98:	4b10      	ldr	r3, [pc, #64]	; (dbdc <prvCheckTasksWaitingTermination+0x7c>)
    db9a:	681b      	ldr	r3, [r3, #0]
    db9c:	1e5a      	subs	r2, r3, #1
    db9e:	4b0f      	ldr	r3, [pc, #60]	; (dbdc <prvCheckTasksWaitingTermination+0x7c>)
    dba0:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    dba2:	4b0f      	ldr	r3, [pc, #60]	; (dbe0 <prvCheckTasksWaitingTermination+0x80>)
    dba4:	681b      	ldr	r3, [r3, #0]
    dba6:	1e5a      	subs	r2, r3, #1
    dba8:	4b0d      	ldr	r3, [pc, #52]	; (dbe0 <prvCheckTasksWaitingTermination+0x80>)
    dbaa:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    dbac:	4b0d      	ldr	r3, [pc, #52]	; (dbe4 <prvCheckTasksWaitingTermination+0x84>)
    dbae:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    dbb0:	683b      	ldr	r3, [r7, #0]
    dbb2:	0018      	movs	r0, r3
    dbb4:	4b0c      	ldr	r3, [pc, #48]	; (dbe8 <prvCheckTasksWaitingTermination+0x88>)
    dbb6:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    dbb8:	4b09      	ldr	r3, [pc, #36]	; (dbe0 <prvCheckTasksWaitingTermination+0x80>)
    dbba:	681b      	ldr	r3, [r3, #0]
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d1d3      	bne.n	db68 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    dbc0:	46c0      	nop			; (mov r8, r8)
    dbc2:	46bd      	mov	sp, r7
    dbc4:	b002      	add	sp, #8
    dbc6:	bd80      	pop	{r7, pc}
    dbc8:	0000d4e9 	.word	0x0000d4e9
    dbcc:	20003dec 	.word	0x20003dec
    dbd0:	0000d501 	.word	0x0000d501
    dbd4:	0000c409 	.word	0x0000c409
    dbd8:	0000c295 	.word	0x0000c295
    dbdc:	20003e18 	.word	0x20003e18
    dbe0:	20003e00 	.word	0x20003e00
    dbe4:	0000c42d 	.word	0x0000c42d
    dbe8:	0000dbed 	.word	0x0000dbed

0000dbec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    dbec:	b580      	push	{r7, lr}
    dbee:	b082      	sub	sp, #8
    dbf0:	af00      	add	r7, sp, #0
    dbf2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    dbf4:	687b      	ldr	r3, [r7, #4]
    dbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    dbf8:	0018      	movs	r0, r3
    dbfa:	4b05      	ldr	r3, [pc, #20]	; (dc10 <prvDeleteTCB+0x24>)
    dbfc:	4798      	blx	r3
			vPortFree( pxTCB );
    dbfe:	687b      	ldr	r3, [r7, #4]
    dc00:	0018      	movs	r0, r3
    dc02:	4b03      	ldr	r3, [pc, #12]	; (dc10 <prvDeleteTCB+0x24>)
    dc04:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    dc06:	46c0      	nop			; (mov r8, r8)
    dc08:	46bd      	mov	sp, r7
    dc0a:	b002      	add	sp, #8
    dc0c:	bd80      	pop	{r7, pc}
    dc0e:	46c0      	nop			; (mov r8, r8)
    dc10:	0000c5bd 	.word	0x0000c5bd

0000dc14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    dc14:	b580      	push	{r7, lr}
    dc16:	b082      	sub	sp, #8
    dc18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    dc1a:	4b0e      	ldr	r3, [pc, #56]	; (dc54 <prvResetNextTaskUnblockTime+0x40>)
    dc1c:	681b      	ldr	r3, [r3, #0]
    dc1e:	681b      	ldr	r3, [r3, #0]
    dc20:	2b00      	cmp	r3, #0
    dc22:	d101      	bne.n	dc28 <prvResetNextTaskUnblockTime+0x14>
    dc24:	2301      	movs	r3, #1
    dc26:	e000      	b.n	dc2a <prvResetNextTaskUnblockTime+0x16>
    dc28:	2300      	movs	r3, #0
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d004      	beq.n	dc38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    dc2e:	4b0a      	ldr	r3, [pc, #40]	; (dc58 <prvResetNextTaskUnblockTime+0x44>)
    dc30:	2201      	movs	r2, #1
    dc32:	4252      	negs	r2, r2
    dc34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    dc36:	e008      	b.n	dc4a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    dc38:	4b06      	ldr	r3, [pc, #24]	; (dc54 <prvResetNextTaskUnblockTime+0x40>)
    dc3a:	681b      	ldr	r3, [r3, #0]
    dc3c:	68db      	ldr	r3, [r3, #12]
    dc3e:	68db      	ldr	r3, [r3, #12]
    dc40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    dc42:	687b      	ldr	r3, [r7, #4]
    dc44:	685a      	ldr	r2, [r3, #4]
    dc46:	4b04      	ldr	r3, [pc, #16]	; (dc58 <prvResetNextTaskUnblockTime+0x44>)
    dc48:	601a      	str	r2, [r3, #0]
	}
}
    dc4a:	46c0      	nop			; (mov r8, r8)
    dc4c:	46bd      	mov	sp, r7
    dc4e:	b002      	add	sp, #8
    dc50:	bd80      	pop	{r7, pc}
    dc52:	46c0      	nop			; (mov r8, r8)
    dc54:	20003dd0 	.word	0x20003dd0
    dc58:	20003e38 	.word	0x20003e38

0000dc5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    dc5c:	b580      	push	{r7, lr}
    dc5e:	b082      	sub	sp, #8
    dc60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    dc62:	4b0a      	ldr	r3, [pc, #40]	; (dc8c <xTaskGetSchedulerState+0x30>)
    dc64:	681b      	ldr	r3, [r3, #0]
    dc66:	2b00      	cmp	r3, #0
    dc68:	d102      	bne.n	dc70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    dc6a:	2301      	movs	r3, #1
    dc6c:	607b      	str	r3, [r7, #4]
    dc6e:	e008      	b.n	dc82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    dc70:	4b07      	ldr	r3, [pc, #28]	; (dc90 <xTaskGetSchedulerState+0x34>)
    dc72:	681b      	ldr	r3, [r3, #0]
    dc74:	2b00      	cmp	r3, #0
    dc76:	d102      	bne.n	dc7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    dc78:	2302      	movs	r3, #2
    dc7a:	607b      	str	r3, [r7, #4]
    dc7c:	e001      	b.n	dc82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    dc7e:	2300      	movs	r3, #0
    dc80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    dc82:	687b      	ldr	r3, [r7, #4]
	}
    dc84:	0018      	movs	r0, r3
    dc86:	46bd      	mov	sp, r7
    dc88:	b002      	add	sp, #8
    dc8a:	bd80      	pop	{r7, pc}
    dc8c:	20003e24 	.word	0x20003e24
    dc90:	20003e40 	.word	0x20003e40

0000dc94 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    dc94:	b580      	push	{r7, lr}
    dc96:	b084      	sub	sp, #16
    dc98:	af00      	add	r7, sp, #0
    dc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    dca0:	687b      	ldr	r3, [r7, #4]
    dca2:	2b00      	cmp	r3, #0
    dca4:	d04a      	beq.n	dd3c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    dca6:	68fb      	ldr	r3, [r7, #12]
    dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dcaa:	4b26      	ldr	r3, [pc, #152]	; (dd44 <vTaskPriorityInherit+0xb0>)
    dcac:	681b      	ldr	r3, [r3, #0]
    dcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dcb0:	429a      	cmp	r2, r3
    dcb2:	d243      	bcs.n	dd3c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    dcb4:	68fb      	ldr	r3, [r7, #12]
    dcb6:	699b      	ldr	r3, [r3, #24]
    dcb8:	2b00      	cmp	r3, #0
    dcba:	db06      	blt.n	dcca <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    dcbc:	4b21      	ldr	r3, [pc, #132]	; (dd44 <vTaskPriorityInherit+0xb0>)
    dcbe:	681b      	ldr	r3, [r3, #0]
    dcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    dcc2:	2205      	movs	r2, #5
    dcc4:	1ad2      	subs	r2, r2, r3
    dcc6:	68fb      	ldr	r3, [r7, #12]
    dcc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    dcca:	68fb      	ldr	r3, [r7, #12]
    dccc:	6959      	ldr	r1, [r3, #20]
    dcce:	68fb      	ldr	r3, [r7, #12]
    dcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dcd2:	0013      	movs	r3, r2
    dcd4:	009b      	lsls	r3, r3, #2
    dcd6:	189b      	adds	r3, r3, r2
    dcd8:	009b      	lsls	r3, r3, #2
    dcda:	4a1b      	ldr	r2, [pc, #108]	; (dd48 <vTaskPriorityInherit+0xb4>)
    dcdc:	189b      	adds	r3, r3, r2
    dcde:	4299      	cmp	r1, r3
    dce0:	d101      	bne.n	dce6 <vTaskPriorityInherit+0x52>
    dce2:	2301      	movs	r3, #1
    dce4:	e000      	b.n	dce8 <vTaskPriorityInherit+0x54>
    dce6:	2300      	movs	r3, #0
    dce8:	2b00      	cmp	r3, #0
    dcea:	d022      	beq.n	dd32 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    dcec:	68fb      	ldr	r3, [r7, #12]
    dcee:	3304      	adds	r3, #4
    dcf0:	0018      	movs	r0, r3
    dcf2:	4b16      	ldr	r3, [pc, #88]	; (dd4c <vTaskPriorityInherit+0xb8>)
    dcf4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    dcf6:	4b13      	ldr	r3, [pc, #76]	; (dd44 <vTaskPriorityInherit+0xb0>)
    dcf8:	681b      	ldr	r3, [r3, #0]
    dcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dcfc:	68fb      	ldr	r3, [r7, #12]
    dcfe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    dd00:	68fb      	ldr	r3, [r7, #12]
    dd02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd04:	4b12      	ldr	r3, [pc, #72]	; (dd50 <vTaskPriorityInherit+0xbc>)
    dd06:	681b      	ldr	r3, [r3, #0]
    dd08:	429a      	cmp	r2, r3
    dd0a:	d903      	bls.n	dd14 <vTaskPriorityInherit+0x80>
    dd0c:	68fb      	ldr	r3, [r7, #12]
    dd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd10:	4b0f      	ldr	r3, [pc, #60]	; (dd50 <vTaskPriorityInherit+0xbc>)
    dd12:	601a      	str	r2, [r3, #0]
    dd14:	68fb      	ldr	r3, [r7, #12]
    dd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd18:	0013      	movs	r3, r2
    dd1a:	009b      	lsls	r3, r3, #2
    dd1c:	189b      	adds	r3, r3, r2
    dd1e:	009b      	lsls	r3, r3, #2
    dd20:	4a09      	ldr	r2, [pc, #36]	; (dd48 <vTaskPriorityInherit+0xb4>)
    dd22:	189a      	adds	r2, r3, r2
    dd24:	68fb      	ldr	r3, [r7, #12]
    dd26:	3304      	adds	r3, #4
    dd28:	0019      	movs	r1, r3
    dd2a:	0010      	movs	r0, r2
    dd2c:	4b09      	ldr	r3, [pc, #36]	; (dd54 <vTaskPriorityInherit+0xc0>)
    dd2e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    dd30:	e004      	b.n	dd3c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    dd32:	4b04      	ldr	r3, [pc, #16]	; (dd44 <vTaskPriorityInherit+0xb0>)
    dd34:	681b      	ldr	r3, [r3, #0]
    dd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd38:	68fb      	ldr	r3, [r7, #12]
    dd3a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    dd3c:	46c0      	nop			; (mov r8, r8)
    dd3e:	46bd      	mov	sp, r7
    dd40:	b004      	add	sp, #16
    dd42:	bd80      	pop	{r7, pc}
    dd44:	20003d40 	.word	0x20003d40
    dd48:	20003d44 	.word	0x20003d44
    dd4c:	0000c295 	.word	0x0000c295
    dd50:	20003e20 	.word	0x20003e20
    dd54:	0000c1e5 	.word	0x0000c1e5

0000dd58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    dd58:	b580      	push	{r7, lr}
    dd5a:	b084      	sub	sp, #16
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    dd64:	2300      	movs	r3, #0
    dd66:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    dd68:	687b      	ldr	r3, [r7, #4]
    dd6a:	2b00      	cmp	r3, #0
    dd6c:	d044      	beq.n	ddf8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    dd6e:	4b25      	ldr	r3, [pc, #148]	; (de04 <xTaskPriorityDisinherit+0xac>)
    dd70:	681b      	ldr	r3, [r3, #0]
    dd72:	68ba      	ldr	r2, [r7, #8]
    dd74:	429a      	cmp	r2, r3
    dd76:	d001      	beq.n	dd7c <xTaskPriorityDisinherit+0x24>
    dd78:	b672      	cpsid	i
    dd7a:	e7fe      	b.n	dd7a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    dd7c:	68bb      	ldr	r3, [r7, #8]
    dd7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dd80:	2b00      	cmp	r3, #0
    dd82:	d101      	bne.n	dd88 <xTaskPriorityDisinherit+0x30>
    dd84:	b672      	cpsid	i
    dd86:	e7fe      	b.n	dd86 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    dd88:	68bb      	ldr	r3, [r7, #8]
    dd8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dd8c:	1e5a      	subs	r2, r3, #1
    dd8e:	68bb      	ldr	r3, [r7, #8]
    dd90:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    dd92:	68bb      	ldr	r3, [r7, #8]
    dd94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd96:	68bb      	ldr	r3, [r7, #8]
    dd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dd9a:	429a      	cmp	r2, r3
    dd9c:	d02c      	beq.n	ddf8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    dd9e:	68bb      	ldr	r3, [r7, #8]
    dda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dda2:	2b00      	cmp	r3, #0
    dda4:	d128      	bne.n	ddf8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    dda6:	68bb      	ldr	r3, [r7, #8]
    dda8:	3304      	adds	r3, #4
    ddaa:	0018      	movs	r0, r3
    ddac:	4b16      	ldr	r3, [pc, #88]	; (de08 <xTaskPriorityDisinherit+0xb0>)
    ddae:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    ddb0:	68bb      	ldr	r3, [r7, #8]
    ddb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    ddb4:	68bb      	ldr	r3, [r7, #8]
    ddb6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ddb8:	68bb      	ldr	r3, [r7, #8]
    ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ddbc:	2205      	movs	r2, #5
    ddbe:	1ad2      	subs	r2, r2, r3
    ddc0:	68bb      	ldr	r3, [r7, #8]
    ddc2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    ddc4:	68bb      	ldr	r3, [r7, #8]
    ddc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ddc8:	4b10      	ldr	r3, [pc, #64]	; (de0c <xTaskPriorityDisinherit+0xb4>)
    ddca:	681b      	ldr	r3, [r3, #0]
    ddcc:	429a      	cmp	r2, r3
    ddce:	d903      	bls.n	ddd8 <xTaskPriorityDisinherit+0x80>
    ddd0:	68bb      	ldr	r3, [r7, #8]
    ddd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ddd4:	4b0d      	ldr	r3, [pc, #52]	; (de0c <xTaskPriorityDisinherit+0xb4>)
    ddd6:	601a      	str	r2, [r3, #0]
    ddd8:	68bb      	ldr	r3, [r7, #8]
    ddda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dddc:	0013      	movs	r3, r2
    ddde:	009b      	lsls	r3, r3, #2
    dde0:	189b      	adds	r3, r3, r2
    dde2:	009b      	lsls	r3, r3, #2
    dde4:	4a0a      	ldr	r2, [pc, #40]	; (de10 <xTaskPriorityDisinherit+0xb8>)
    dde6:	189a      	adds	r2, r3, r2
    dde8:	68bb      	ldr	r3, [r7, #8]
    ddea:	3304      	adds	r3, #4
    ddec:	0019      	movs	r1, r3
    ddee:	0010      	movs	r0, r2
    ddf0:	4b08      	ldr	r3, [pc, #32]	; (de14 <xTaskPriorityDisinherit+0xbc>)
    ddf2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    ddf4:	2301      	movs	r3, #1
    ddf6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    ddf8:	68fb      	ldr	r3, [r7, #12]
	}
    ddfa:	0018      	movs	r0, r3
    ddfc:	46bd      	mov	sp, r7
    ddfe:	b004      	add	sp, #16
    de00:	bd80      	pop	{r7, pc}
    de02:	46c0      	nop			; (mov r8, r8)
    de04:	20003d40 	.word	0x20003d40
    de08:	0000c295 	.word	0x0000c295
    de0c:	20003e20 	.word	0x20003e20
    de10:	20003d44 	.word	0x20003d44
    de14:	0000c1e5 	.word	0x0000c1e5

0000de18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    de18:	b580      	push	{r7, lr}
    de1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    de1c:	4b06      	ldr	r3, [pc, #24]	; (de38 <pvTaskIncrementMutexHeldCount+0x20>)
    de1e:	681b      	ldr	r3, [r3, #0]
    de20:	2b00      	cmp	r3, #0
    de22:	d004      	beq.n	de2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    de24:	4b04      	ldr	r3, [pc, #16]	; (de38 <pvTaskIncrementMutexHeldCount+0x20>)
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    de2a:	3201      	adds	r2, #1
    de2c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    de2e:	4b02      	ldr	r3, [pc, #8]	; (de38 <pvTaskIncrementMutexHeldCount+0x20>)
    de30:	681b      	ldr	r3, [r3, #0]
	}
    de32:	0018      	movs	r0, r3
    de34:	46bd      	mov	sp, r7
    de36:	bd80      	pop	{r7, pc}
    de38:	20003d40 	.word	0x20003d40

0000de3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    de3c:	b580      	push	{r7, lr}
    de3e:	b084      	sub	sp, #16
    de40:	af00      	add	r7, sp, #0
    de42:	6078      	str	r0, [r7, #4]
    de44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    de46:	4b21      	ldr	r3, [pc, #132]	; (decc <prvAddCurrentTaskToDelayedList+0x90>)
    de48:	681b      	ldr	r3, [r3, #0]
    de4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    de4c:	4b20      	ldr	r3, [pc, #128]	; (ded0 <prvAddCurrentTaskToDelayedList+0x94>)
    de4e:	681b      	ldr	r3, [r3, #0]
    de50:	3304      	adds	r3, #4
    de52:	0018      	movs	r0, r3
    de54:	4b1f      	ldr	r3, [pc, #124]	; (ded4 <prvAddCurrentTaskToDelayedList+0x98>)
    de56:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    de58:	687b      	ldr	r3, [r7, #4]
    de5a:	3301      	adds	r3, #1
    de5c:	d10b      	bne.n	de76 <prvAddCurrentTaskToDelayedList+0x3a>
    de5e:	683b      	ldr	r3, [r7, #0]
    de60:	2b00      	cmp	r3, #0
    de62:	d008      	beq.n	de76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    de64:	4b1a      	ldr	r3, [pc, #104]	; (ded0 <prvAddCurrentTaskToDelayedList+0x94>)
    de66:	681b      	ldr	r3, [r3, #0]
    de68:	1d1a      	adds	r2, r3, #4
    de6a:	4b1b      	ldr	r3, [pc, #108]	; (ded8 <prvAddCurrentTaskToDelayedList+0x9c>)
    de6c:	0011      	movs	r1, r2
    de6e:	0018      	movs	r0, r3
    de70:	4b1a      	ldr	r3, [pc, #104]	; (dedc <prvAddCurrentTaskToDelayedList+0xa0>)
    de72:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    de74:	e026      	b.n	dec4 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    de76:	68fa      	ldr	r2, [r7, #12]
    de78:	687b      	ldr	r3, [r7, #4]
    de7a:	18d3      	adds	r3, r2, r3
    de7c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    de7e:	4b14      	ldr	r3, [pc, #80]	; (ded0 <prvAddCurrentTaskToDelayedList+0x94>)
    de80:	681b      	ldr	r3, [r3, #0]
    de82:	68ba      	ldr	r2, [r7, #8]
    de84:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    de86:	68ba      	ldr	r2, [r7, #8]
    de88:	68fb      	ldr	r3, [r7, #12]
    de8a:	429a      	cmp	r2, r3
    de8c:	d209      	bcs.n	dea2 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    de8e:	4b14      	ldr	r3, [pc, #80]	; (dee0 <prvAddCurrentTaskToDelayedList+0xa4>)
    de90:	681a      	ldr	r2, [r3, #0]
    de92:	4b0f      	ldr	r3, [pc, #60]	; (ded0 <prvAddCurrentTaskToDelayedList+0x94>)
    de94:	681b      	ldr	r3, [r3, #0]
    de96:	3304      	adds	r3, #4
    de98:	0019      	movs	r1, r3
    de9a:	0010      	movs	r0, r2
    de9c:	4b11      	ldr	r3, [pc, #68]	; (dee4 <prvAddCurrentTaskToDelayedList+0xa8>)
    de9e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    dea0:	e010      	b.n	dec4 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    dea2:	4b11      	ldr	r3, [pc, #68]	; (dee8 <prvAddCurrentTaskToDelayedList+0xac>)
    dea4:	681a      	ldr	r2, [r3, #0]
    dea6:	4b0a      	ldr	r3, [pc, #40]	; (ded0 <prvAddCurrentTaskToDelayedList+0x94>)
    dea8:	681b      	ldr	r3, [r3, #0]
    deaa:	3304      	adds	r3, #4
    deac:	0019      	movs	r1, r3
    deae:	0010      	movs	r0, r2
    deb0:	4b0c      	ldr	r3, [pc, #48]	; (dee4 <prvAddCurrentTaskToDelayedList+0xa8>)
    deb2:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    deb4:	4b0d      	ldr	r3, [pc, #52]	; (deec <prvAddCurrentTaskToDelayedList+0xb0>)
    deb6:	681b      	ldr	r3, [r3, #0]
    deb8:	68ba      	ldr	r2, [r7, #8]
    deba:	429a      	cmp	r2, r3
    debc:	d202      	bcs.n	dec4 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    debe:	4b0b      	ldr	r3, [pc, #44]	; (deec <prvAddCurrentTaskToDelayedList+0xb0>)
    dec0:	68ba      	ldr	r2, [r7, #8]
    dec2:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    dec4:	46c0      	nop			; (mov r8, r8)
    dec6:	46bd      	mov	sp, r7
    dec8:	b004      	add	sp, #16
    deca:	bd80      	pop	{r7, pc}
    decc:	20003e1c 	.word	0x20003e1c
    ded0:	20003d40 	.word	0x20003d40
    ded4:	0000c295 	.word	0x0000c295
    ded8:	20003e04 	.word	0x20003e04
    dedc:	0000c1e5 	.word	0x0000c1e5
    dee0:	20003dd4 	.word	0x20003dd4
    dee4:	0000c229 	.word	0x0000c229
    dee8:	20003dd0 	.word	0x20003dd0
    deec:	20003e38 	.word	0x20003e38

0000def0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    def0:	b590      	push	{r4, r7, lr}
    def2:	b085      	sub	sp, #20
    def4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    def6:	2300      	movs	r3, #0
    def8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    defa:	4b0e      	ldr	r3, [pc, #56]	; (df34 <xTimerCreateTimerTask+0x44>)
    defc:	4798      	blx	r3

	if( xTimerQueue != NULL )
    defe:	4b0e      	ldr	r3, [pc, #56]	; (df38 <xTimerCreateTimerTask+0x48>)
    df00:	681b      	ldr	r3, [r3, #0]
    df02:	2b00      	cmp	r3, #0
    df04:	d00b      	beq.n	df1e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    df06:	490d      	ldr	r1, [pc, #52]	; (df3c <xTimerCreateTimerTask+0x4c>)
    df08:	480d      	ldr	r0, [pc, #52]	; (df40 <xTimerCreateTimerTask+0x50>)
    df0a:	4b0e      	ldr	r3, [pc, #56]	; (df44 <xTimerCreateTimerTask+0x54>)
    df0c:	9301      	str	r3, [sp, #4]
    df0e:	2302      	movs	r3, #2
    df10:	9300      	str	r3, [sp, #0]
    df12:	2300      	movs	r3, #0
    df14:	2250      	movs	r2, #80	; 0x50
    df16:	4c0c      	ldr	r4, [pc, #48]	; (df48 <xTimerCreateTimerTask+0x58>)
    df18:	47a0      	blx	r4
    df1a:	0003      	movs	r3, r0
    df1c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    df1e:	687b      	ldr	r3, [r7, #4]
    df20:	2b00      	cmp	r3, #0
    df22:	d101      	bne.n	df28 <xTimerCreateTimerTask+0x38>
    df24:	b672      	cpsid	i
    df26:	e7fe      	b.n	df26 <xTimerCreateTimerTask+0x36>
	return xReturn;
    df28:	687b      	ldr	r3, [r7, #4]
}
    df2a:	0018      	movs	r0, r3
    df2c:	46bd      	mov	sp, r7
    df2e:	b003      	add	sp, #12
    df30:	bd90      	pop	{r4, r7, pc}
    df32:	46c0      	nop			; (mov r8, r8)
    df34:	0000e431 	.word	0x0000e431
    df38:	20003e74 	.word	0x20003e74
    df3c:	000137c4 	.word	0x000137c4
    df40:	0000e071 	.word	0x0000e071
    df44:	20003e78 	.word	0x20003e78
    df48:	0000d0c5 	.word	0x0000d0c5

0000df4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    df4c:	b590      	push	{r4, r7, lr}
    df4e:	b089      	sub	sp, #36	; 0x24
    df50:	af00      	add	r7, sp, #0
    df52:	60f8      	str	r0, [r7, #12]
    df54:	60b9      	str	r1, [r7, #8]
    df56:	607a      	str	r2, [r7, #4]
    df58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    df5a:	2300      	movs	r3, #0
    df5c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    df5e:	68fb      	ldr	r3, [r7, #12]
    df60:	2b00      	cmp	r3, #0
    df62:	d101      	bne.n	df68 <xTimerGenericCommand+0x1c>
    df64:	b672      	cpsid	i
    df66:	e7fe      	b.n	df66 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    df68:	4b1e      	ldr	r3, [pc, #120]	; (dfe4 <xTimerGenericCommand+0x98>)
    df6a:	681b      	ldr	r3, [r3, #0]
    df6c:	2b00      	cmp	r3, #0
    df6e:	d033      	beq.n	dfd8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    df70:	2310      	movs	r3, #16
    df72:	18fb      	adds	r3, r7, r3
    df74:	68ba      	ldr	r2, [r7, #8]
    df76:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    df78:	2310      	movs	r3, #16
    df7a:	18fb      	adds	r3, r7, r3
    df7c:	687a      	ldr	r2, [r7, #4]
    df7e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    df80:	2310      	movs	r3, #16
    df82:	18fb      	adds	r3, r7, r3
    df84:	68fa      	ldr	r2, [r7, #12]
    df86:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    df88:	68bb      	ldr	r3, [r7, #8]
    df8a:	2b05      	cmp	r3, #5
    df8c:	dc1a      	bgt.n	dfc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    df8e:	4b16      	ldr	r3, [pc, #88]	; (dfe8 <xTimerGenericCommand+0x9c>)
    df90:	4798      	blx	r3
    df92:	1e03      	subs	r3, r0, #0
    df94:	2b02      	cmp	r3, #2
    df96:	d10a      	bne.n	dfae <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    df98:	4b12      	ldr	r3, [pc, #72]	; (dfe4 <xTimerGenericCommand+0x98>)
    df9a:	6818      	ldr	r0, [r3, #0]
    df9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    df9e:	2310      	movs	r3, #16
    dfa0:	18f9      	adds	r1, r7, r3
    dfa2:	2300      	movs	r3, #0
    dfa4:	4c11      	ldr	r4, [pc, #68]	; (dfec <xTimerGenericCommand+0xa0>)
    dfa6:	47a0      	blx	r4
    dfa8:	0003      	movs	r3, r0
    dfaa:	61fb      	str	r3, [r7, #28]
    dfac:	e014      	b.n	dfd8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    dfae:	4b0d      	ldr	r3, [pc, #52]	; (dfe4 <xTimerGenericCommand+0x98>)
    dfb0:	6818      	ldr	r0, [r3, #0]
    dfb2:	2310      	movs	r3, #16
    dfb4:	18f9      	adds	r1, r7, r3
    dfb6:	2300      	movs	r3, #0
    dfb8:	2200      	movs	r2, #0
    dfba:	4c0c      	ldr	r4, [pc, #48]	; (dfec <xTimerGenericCommand+0xa0>)
    dfbc:	47a0      	blx	r4
    dfbe:	0003      	movs	r3, r0
    dfc0:	61fb      	str	r3, [r7, #28]
    dfc2:	e009      	b.n	dfd8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    dfc4:	4b07      	ldr	r3, [pc, #28]	; (dfe4 <xTimerGenericCommand+0x98>)
    dfc6:	6818      	ldr	r0, [r3, #0]
    dfc8:	683a      	ldr	r2, [r7, #0]
    dfca:	2310      	movs	r3, #16
    dfcc:	18f9      	adds	r1, r7, r3
    dfce:	2300      	movs	r3, #0
    dfd0:	4c07      	ldr	r4, [pc, #28]	; (dff0 <xTimerGenericCommand+0xa4>)
    dfd2:	47a0      	blx	r4
    dfd4:	0003      	movs	r3, r0
    dfd6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    dfd8:	69fb      	ldr	r3, [r7, #28]
}
    dfda:	0018      	movs	r0, r3
    dfdc:	46bd      	mov	sp, r7
    dfde:	b009      	add	sp, #36	; 0x24
    dfe0:	bd90      	pop	{r4, r7, pc}
    dfe2:	46c0      	nop			; (mov r8, r8)
    dfe4:	20003e74 	.word	0x20003e74
    dfe8:	0000dc5d 	.word	0x0000dc5d
    dfec:	0000c7c9 	.word	0x0000c7c9
    dff0:	0000c9a9 	.word	0x0000c9a9

0000dff4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    dff4:	b590      	push	{r4, r7, lr}
    dff6:	b087      	sub	sp, #28
    dff8:	af02      	add	r7, sp, #8
    dffa:	6078      	str	r0, [r7, #4]
    dffc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    dffe:	4b18      	ldr	r3, [pc, #96]	; (e060 <prvProcessExpiredTimer+0x6c>)
    e000:	681b      	ldr	r3, [r3, #0]
    e002:	68db      	ldr	r3, [r3, #12]
    e004:	68db      	ldr	r3, [r3, #12]
    e006:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    e008:	68fb      	ldr	r3, [r7, #12]
    e00a:	3304      	adds	r3, #4
    e00c:	0018      	movs	r0, r3
    e00e:	4b15      	ldr	r3, [pc, #84]	; (e064 <prvProcessExpiredTimer+0x70>)
    e010:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    e012:	68fb      	ldr	r3, [r7, #12]
    e014:	69db      	ldr	r3, [r3, #28]
    e016:	2b01      	cmp	r3, #1
    e018:	d119      	bne.n	e04e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    e01a:	68fb      	ldr	r3, [r7, #12]
    e01c:	699a      	ldr	r2, [r3, #24]
    e01e:	687b      	ldr	r3, [r7, #4]
    e020:	18d1      	adds	r1, r2, r3
    e022:	687b      	ldr	r3, [r7, #4]
    e024:	683a      	ldr	r2, [r7, #0]
    e026:	68f8      	ldr	r0, [r7, #12]
    e028:	4c0f      	ldr	r4, [pc, #60]	; (e068 <prvProcessExpiredTimer+0x74>)
    e02a:	47a0      	blx	r4
    e02c:	1e03      	subs	r3, r0, #0
    e02e:	d00e      	beq.n	e04e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    e030:	687a      	ldr	r2, [r7, #4]
    e032:	68f8      	ldr	r0, [r7, #12]
    e034:	2300      	movs	r3, #0
    e036:	9300      	str	r3, [sp, #0]
    e038:	2300      	movs	r3, #0
    e03a:	2100      	movs	r1, #0
    e03c:	4c0b      	ldr	r4, [pc, #44]	; (e06c <prvProcessExpiredTimer+0x78>)
    e03e:	47a0      	blx	r4
    e040:	0003      	movs	r3, r0
    e042:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    e044:	68bb      	ldr	r3, [r7, #8]
    e046:	2b00      	cmp	r3, #0
    e048:	d101      	bne.n	e04e <prvProcessExpiredTimer+0x5a>
    e04a:	b672      	cpsid	i
    e04c:	e7fe      	b.n	e04c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    e04e:	68fb      	ldr	r3, [r7, #12]
    e050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e052:	68fa      	ldr	r2, [r7, #12]
    e054:	0010      	movs	r0, r2
    e056:	4798      	blx	r3
}
    e058:	46c0      	nop			; (mov r8, r8)
    e05a:	46bd      	mov	sp, r7
    e05c:	b005      	add	sp, #20
    e05e:	bd90      	pop	{r4, r7, pc}
    e060:	20003e6c 	.word	0x20003e6c
    e064:	0000c295 	.word	0x0000c295
    e068:	0000e1d1 	.word	0x0000e1d1
    e06c:	0000df4d 	.word	0x0000df4d

0000e070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    e070:	b580      	push	{r7, lr}
    e072:	b084      	sub	sp, #16
    e074:	af00      	add	r7, sp, #0
    e076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    e078:	2308      	movs	r3, #8
    e07a:	18fb      	adds	r3, r7, r3
    e07c:	0018      	movs	r0, r3
    e07e:	4b06      	ldr	r3, [pc, #24]	; (e098 <prvTimerTask+0x28>)
    e080:	4798      	blx	r3
    e082:	0003      	movs	r3, r0
    e084:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    e086:	68ba      	ldr	r2, [r7, #8]
    e088:	68fb      	ldr	r3, [r7, #12]
    e08a:	0011      	movs	r1, r2
    e08c:	0018      	movs	r0, r3
    e08e:	4b03      	ldr	r3, [pc, #12]	; (e09c <prvTimerTask+0x2c>)
    e090:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    e092:	4b03      	ldr	r3, [pc, #12]	; (e0a0 <prvTimerTask+0x30>)
    e094:	4798      	blx	r3
	}
    e096:	e7ef      	b.n	e078 <prvTimerTask+0x8>
    e098:	0000e149 	.word	0x0000e149
    e09c:	0000e0a5 	.word	0x0000e0a5
    e0a0:	0000e259 	.word	0x0000e259

0000e0a4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    e0a4:	b580      	push	{r7, lr}
    e0a6:	b084      	sub	sp, #16
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
    e0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    e0ae:	4b1e      	ldr	r3, [pc, #120]	; (e128 <prvProcessTimerOrBlockTask+0x84>)
    e0b0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    e0b2:	2308      	movs	r3, #8
    e0b4:	18fb      	adds	r3, r7, r3
    e0b6:	0018      	movs	r0, r3
    e0b8:	4b1c      	ldr	r3, [pc, #112]	; (e12c <prvProcessTimerOrBlockTask+0x88>)
    e0ba:	4798      	blx	r3
    e0bc:	0003      	movs	r3, r0
    e0be:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    e0c0:	68bb      	ldr	r3, [r7, #8]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d129      	bne.n	e11a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    e0c6:	683b      	ldr	r3, [r7, #0]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d10c      	bne.n	e0e6 <prvProcessTimerOrBlockTask+0x42>
    e0cc:	687a      	ldr	r2, [r7, #4]
    e0ce:	68fb      	ldr	r3, [r7, #12]
    e0d0:	429a      	cmp	r2, r3
    e0d2:	d808      	bhi.n	e0e6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    e0d4:	4b16      	ldr	r3, [pc, #88]	; (e130 <prvProcessTimerOrBlockTask+0x8c>)
    e0d6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    e0d8:	68fa      	ldr	r2, [r7, #12]
    e0da:	687b      	ldr	r3, [r7, #4]
    e0dc:	0011      	movs	r1, r2
    e0de:	0018      	movs	r0, r3
    e0e0:	4b14      	ldr	r3, [pc, #80]	; (e134 <prvProcessTimerOrBlockTask+0x90>)
    e0e2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    e0e4:	e01b      	b.n	e11e <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    e0e6:	683b      	ldr	r3, [r7, #0]
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d006      	beq.n	e0fa <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    e0ec:	4b12      	ldr	r3, [pc, #72]	; (e138 <prvProcessTimerOrBlockTask+0x94>)
    e0ee:	681b      	ldr	r3, [r3, #0]
    e0f0:	681b      	ldr	r3, [r3, #0]
    e0f2:	425a      	negs	r2, r3
    e0f4:	4153      	adcs	r3, r2
    e0f6:	b2db      	uxtb	r3, r3
    e0f8:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    e0fa:	4b10      	ldr	r3, [pc, #64]	; (e13c <prvProcessTimerOrBlockTask+0x98>)
    e0fc:	6818      	ldr	r0, [r3, #0]
    e0fe:	687a      	ldr	r2, [r7, #4]
    e100:	68fb      	ldr	r3, [r7, #12]
    e102:	1ad3      	subs	r3, r2, r3
    e104:	683a      	ldr	r2, [r7, #0]
    e106:	0019      	movs	r1, r3
    e108:	4b0d      	ldr	r3, [pc, #52]	; (e140 <prvProcessTimerOrBlockTask+0x9c>)
    e10a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    e10c:	4b08      	ldr	r3, [pc, #32]	; (e130 <prvProcessTimerOrBlockTask+0x8c>)
    e10e:	4798      	blx	r3
    e110:	1e03      	subs	r3, r0, #0
    e112:	d104      	bne.n	e11e <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    e114:	4b0b      	ldr	r3, [pc, #44]	; (e144 <prvProcessTimerOrBlockTask+0xa0>)
    e116:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    e118:	e001      	b.n	e11e <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    e11a:	4b05      	ldr	r3, [pc, #20]	; (e130 <prvProcessTimerOrBlockTask+0x8c>)
    e11c:	4798      	blx	r3
		}
	}
}
    e11e:	46c0      	nop			; (mov r8, r8)
    e120:	46bd      	mov	sp, r7
    e122:	b004      	add	sp, #16
    e124:	bd80      	pop	{r7, pc}
    e126:	46c0      	nop			; (mov r8, r8)
    e128:	0000d4e9 	.word	0x0000d4e9
    e12c:	0000e189 	.word	0x0000e189
    e130:	0000d501 	.word	0x0000d501
    e134:	0000dff5 	.word	0x0000dff5
    e138:	20003e70 	.word	0x20003e70
    e13c:	20003e74 	.word	0x20003e74
    e140:	0000cfa9 	.word	0x0000cfa9
    e144:	0000c3e9 	.word	0x0000c3e9

0000e148 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    e148:	b580      	push	{r7, lr}
    e14a:	b084      	sub	sp, #16
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    e150:	4b0c      	ldr	r3, [pc, #48]	; (e184 <prvGetNextExpireTime+0x3c>)
    e152:	681b      	ldr	r3, [r3, #0]
    e154:	681b      	ldr	r3, [r3, #0]
    e156:	425a      	negs	r2, r3
    e158:	4153      	adcs	r3, r2
    e15a:	b2db      	uxtb	r3, r3
    e15c:	001a      	movs	r2, r3
    e15e:	687b      	ldr	r3, [r7, #4]
    e160:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    e162:	687b      	ldr	r3, [r7, #4]
    e164:	681b      	ldr	r3, [r3, #0]
    e166:	2b00      	cmp	r3, #0
    e168:	d105      	bne.n	e176 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    e16a:	4b06      	ldr	r3, [pc, #24]	; (e184 <prvGetNextExpireTime+0x3c>)
    e16c:	681b      	ldr	r3, [r3, #0]
    e16e:	68db      	ldr	r3, [r3, #12]
    e170:	681b      	ldr	r3, [r3, #0]
    e172:	60fb      	str	r3, [r7, #12]
    e174:	e001      	b.n	e17a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    e176:	2300      	movs	r3, #0
    e178:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    e17a:	68fb      	ldr	r3, [r7, #12]
}
    e17c:	0018      	movs	r0, r3
    e17e:	46bd      	mov	sp, r7
    e180:	b004      	add	sp, #16
    e182:	bd80      	pop	{r7, pc}
    e184:	20003e6c 	.word	0x20003e6c

0000e188 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    e188:	b580      	push	{r7, lr}
    e18a:	b084      	sub	sp, #16
    e18c:	af00      	add	r7, sp, #0
    e18e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    e190:	4b0c      	ldr	r3, [pc, #48]	; (e1c4 <prvSampleTimeNow+0x3c>)
    e192:	4798      	blx	r3
    e194:	0003      	movs	r3, r0
    e196:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    e198:	4b0b      	ldr	r3, [pc, #44]	; (e1c8 <prvSampleTimeNow+0x40>)
    e19a:	681b      	ldr	r3, [r3, #0]
    e19c:	68fa      	ldr	r2, [r7, #12]
    e19e:	429a      	cmp	r2, r3
    e1a0:	d205      	bcs.n	e1ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    e1a2:	4b0a      	ldr	r3, [pc, #40]	; (e1cc <prvSampleTimeNow+0x44>)
    e1a4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    e1a6:	687b      	ldr	r3, [r7, #4]
    e1a8:	2201      	movs	r2, #1
    e1aa:	601a      	str	r2, [r3, #0]
    e1ac:	e002      	b.n	e1b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    e1ae:	687b      	ldr	r3, [r7, #4]
    e1b0:	2200      	movs	r2, #0
    e1b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    e1b4:	4b04      	ldr	r3, [pc, #16]	; (e1c8 <prvSampleTimeNow+0x40>)
    e1b6:	68fa      	ldr	r2, [r7, #12]
    e1b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    e1ba:	68fb      	ldr	r3, [r7, #12]
}
    e1bc:	0018      	movs	r0, r3
    e1be:	46bd      	mov	sp, r7
    e1c0:	b004      	add	sp, #16
    e1c2:	bd80      	pop	{r7, pc}
    e1c4:	0000d635 	.word	0x0000d635
    e1c8:	20003e7c 	.word	0x20003e7c
    e1cc:	0000e371 	.word	0x0000e371

0000e1d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    e1d0:	b580      	push	{r7, lr}
    e1d2:	b086      	sub	sp, #24
    e1d4:	af00      	add	r7, sp, #0
    e1d6:	60f8      	str	r0, [r7, #12]
    e1d8:	60b9      	str	r1, [r7, #8]
    e1da:	607a      	str	r2, [r7, #4]
    e1dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    e1de:	2300      	movs	r3, #0
    e1e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    e1e2:	68fb      	ldr	r3, [r7, #12]
    e1e4:	68ba      	ldr	r2, [r7, #8]
    e1e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    e1e8:	68fb      	ldr	r3, [r7, #12]
    e1ea:	68fa      	ldr	r2, [r7, #12]
    e1ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    e1ee:	68ba      	ldr	r2, [r7, #8]
    e1f0:	687b      	ldr	r3, [r7, #4]
    e1f2:	429a      	cmp	r2, r3
    e1f4:	d812      	bhi.n	e21c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e1f6:	687a      	ldr	r2, [r7, #4]
    e1f8:	683b      	ldr	r3, [r7, #0]
    e1fa:	1ad2      	subs	r2, r2, r3
    e1fc:	68fb      	ldr	r3, [r7, #12]
    e1fe:	699b      	ldr	r3, [r3, #24]
    e200:	429a      	cmp	r2, r3
    e202:	d302      	bcc.n	e20a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    e204:	2301      	movs	r3, #1
    e206:	617b      	str	r3, [r7, #20]
    e208:	e01b      	b.n	e242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    e20a:	4b10      	ldr	r3, [pc, #64]	; (e24c <prvInsertTimerInActiveList+0x7c>)
    e20c:	681a      	ldr	r2, [r3, #0]
    e20e:	68fb      	ldr	r3, [r7, #12]
    e210:	3304      	adds	r3, #4
    e212:	0019      	movs	r1, r3
    e214:	0010      	movs	r0, r2
    e216:	4b0e      	ldr	r3, [pc, #56]	; (e250 <prvInsertTimerInActiveList+0x80>)
    e218:	4798      	blx	r3
    e21a:	e012      	b.n	e242 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    e21c:	687a      	ldr	r2, [r7, #4]
    e21e:	683b      	ldr	r3, [r7, #0]
    e220:	429a      	cmp	r2, r3
    e222:	d206      	bcs.n	e232 <prvInsertTimerInActiveList+0x62>
    e224:	68ba      	ldr	r2, [r7, #8]
    e226:	683b      	ldr	r3, [r7, #0]
    e228:	429a      	cmp	r2, r3
    e22a:	d302      	bcc.n	e232 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    e22c:	2301      	movs	r3, #1
    e22e:	617b      	str	r3, [r7, #20]
    e230:	e007      	b.n	e242 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    e232:	4b08      	ldr	r3, [pc, #32]	; (e254 <prvInsertTimerInActiveList+0x84>)
    e234:	681a      	ldr	r2, [r3, #0]
    e236:	68fb      	ldr	r3, [r7, #12]
    e238:	3304      	adds	r3, #4
    e23a:	0019      	movs	r1, r3
    e23c:	0010      	movs	r0, r2
    e23e:	4b04      	ldr	r3, [pc, #16]	; (e250 <prvInsertTimerInActiveList+0x80>)
    e240:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    e242:	697b      	ldr	r3, [r7, #20]
}
    e244:	0018      	movs	r0, r3
    e246:	46bd      	mov	sp, r7
    e248:	b006      	add	sp, #24
    e24a:	bd80      	pop	{r7, pc}
    e24c:	20003e70 	.word	0x20003e70
    e250:	0000c229 	.word	0x0000c229
    e254:	20003e6c 	.word	0x20003e6c

0000e258 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    e258:	b590      	push	{r4, r7, lr}
    e25a:	b08b      	sub	sp, #44	; 0x2c
    e25c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    e25e:	e068      	b.n	e332 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    e260:	2308      	movs	r3, #8
    e262:	18fb      	adds	r3, r7, r3
    e264:	681b      	ldr	r3, [r3, #0]
    e266:	2b00      	cmp	r3, #0
    e268:	db63      	blt.n	e332 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    e26a:	2308      	movs	r3, #8
    e26c:	18fb      	adds	r3, r7, r3
    e26e:	689b      	ldr	r3, [r3, #8]
    e270:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    e272:	69fb      	ldr	r3, [r7, #28]
    e274:	695b      	ldr	r3, [r3, #20]
    e276:	2b00      	cmp	r3, #0
    e278:	d004      	beq.n	e284 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    e27a:	69fb      	ldr	r3, [r7, #28]
    e27c:	3304      	adds	r3, #4
    e27e:	0018      	movs	r0, r3
    e280:	4b33      	ldr	r3, [pc, #204]	; (e350 <prvProcessReceivedCommands+0xf8>)
    e282:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    e284:	1d3b      	adds	r3, r7, #4
    e286:	0018      	movs	r0, r3
    e288:	4b32      	ldr	r3, [pc, #200]	; (e354 <prvProcessReceivedCommands+0xfc>)
    e28a:	4798      	blx	r3
    e28c:	0003      	movs	r3, r0
    e28e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    e290:	2308      	movs	r3, #8
    e292:	18fb      	adds	r3, r7, r3
    e294:	681b      	ldr	r3, [r3, #0]
    e296:	2b09      	cmp	r3, #9
    e298:	d84a      	bhi.n	e330 <prvProcessReceivedCommands+0xd8>
    e29a:	009a      	lsls	r2, r3, #2
    e29c:	4b2e      	ldr	r3, [pc, #184]	; (e358 <prvProcessReceivedCommands+0x100>)
    e29e:	18d3      	adds	r3, r2, r3
    e2a0:	681b      	ldr	r3, [r3, #0]
    e2a2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    e2a4:	2308      	movs	r3, #8
    e2a6:	18fb      	adds	r3, r7, r3
    e2a8:	685a      	ldr	r2, [r3, #4]
    e2aa:	69fb      	ldr	r3, [r7, #28]
    e2ac:	699b      	ldr	r3, [r3, #24]
    e2ae:	18d1      	adds	r1, r2, r3
    e2b0:	2308      	movs	r3, #8
    e2b2:	18fb      	adds	r3, r7, r3
    e2b4:	685b      	ldr	r3, [r3, #4]
    e2b6:	69ba      	ldr	r2, [r7, #24]
    e2b8:	69f8      	ldr	r0, [r7, #28]
    e2ba:	4c28      	ldr	r4, [pc, #160]	; (e35c <prvProcessReceivedCommands+0x104>)
    e2bc:	47a0      	blx	r4
    e2be:	1e03      	subs	r3, r0, #0
    e2c0:	d037      	beq.n	e332 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    e2c2:	69fb      	ldr	r3, [r7, #28]
    e2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e2c6:	69fa      	ldr	r2, [r7, #28]
    e2c8:	0010      	movs	r0, r2
    e2ca:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    e2cc:	69fb      	ldr	r3, [r7, #28]
    e2ce:	69db      	ldr	r3, [r3, #28]
    e2d0:	2b01      	cmp	r3, #1
    e2d2:	d12e      	bne.n	e332 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    e2d4:	2308      	movs	r3, #8
    e2d6:	18fb      	adds	r3, r7, r3
    e2d8:	685a      	ldr	r2, [r3, #4]
    e2da:	69fb      	ldr	r3, [r7, #28]
    e2dc:	699b      	ldr	r3, [r3, #24]
    e2de:	18d2      	adds	r2, r2, r3
    e2e0:	69f8      	ldr	r0, [r7, #28]
    e2e2:	2300      	movs	r3, #0
    e2e4:	9300      	str	r3, [sp, #0]
    e2e6:	2300      	movs	r3, #0
    e2e8:	2100      	movs	r1, #0
    e2ea:	4c1d      	ldr	r4, [pc, #116]	; (e360 <prvProcessReceivedCommands+0x108>)
    e2ec:	47a0      	blx	r4
    e2ee:	0003      	movs	r3, r0
    e2f0:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    e2f2:	697b      	ldr	r3, [r7, #20]
    e2f4:	2b00      	cmp	r3, #0
    e2f6:	d11c      	bne.n	e332 <prvProcessReceivedCommands+0xda>
    e2f8:	b672      	cpsid	i
    e2fa:	e7fe      	b.n	e2fa <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    e2fc:	2308      	movs	r3, #8
    e2fe:	18fb      	adds	r3, r7, r3
    e300:	685a      	ldr	r2, [r3, #4]
    e302:	69fb      	ldr	r3, [r7, #28]
    e304:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    e306:	69fb      	ldr	r3, [r7, #28]
    e308:	699b      	ldr	r3, [r3, #24]
    e30a:	2b00      	cmp	r3, #0
    e30c:	d101      	bne.n	e312 <prvProcessReceivedCommands+0xba>
    e30e:	b672      	cpsid	i
    e310:	e7fe      	b.n	e310 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    e312:	69fb      	ldr	r3, [r7, #28]
    e314:	699a      	ldr	r2, [r3, #24]
    e316:	69bb      	ldr	r3, [r7, #24]
    e318:	18d1      	adds	r1, r2, r3
    e31a:	69bb      	ldr	r3, [r7, #24]
    e31c:	69ba      	ldr	r2, [r7, #24]
    e31e:	69f8      	ldr	r0, [r7, #28]
    e320:	4c0e      	ldr	r4, [pc, #56]	; (e35c <prvProcessReceivedCommands+0x104>)
    e322:	47a0      	blx	r4
					break;
    e324:	e005      	b.n	e332 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    e326:	69fb      	ldr	r3, [r7, #28]
    e328:	0018      	movs	r0, r3
    e32a:	4b0e      	ldr	r3, [pc, #56]	; (e364 <prvProcessReceivedCommands+0x10c>)
    e32c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    e32e:	e000      	b.n	e332 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    e330:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    e332:	4b0d      	ldr	r3, [pc, #52]	; (e368 <prvProcessReceivedCommands+0x110>)
    e334:	6818      	ldr	r0, [r3, #0]
    e336:	2308      	movs	r3, #8
    e338:	18f9      	adds	r1, r7, r3
    e33a:	2300      	movs	r3, #0
    e33c:	2200      	movs	r2, #0
    e33e:	4c0b      	ldr	r4, [pc, #44]	; (e36c <prvProcessReceivedCommands+0x114>)
    e340:	47a0      	blx	r4
    e342:	1e03      	subs	r3, r0, #0
    e344:	d18c      	bne.n	e260 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    e346:	46c0      	nop			; (mov r8, r8)
    e348:	46bd      	mov	sp, r7
    e34a:	b009      	add	sp, #36	; 0x24
    e34c:	bd90      	pop	{r4, r7, pc}
    e34e:	46c0      	nop			; (mov r8, r8)
    e350:	0000c295 	.word	0x0000c295
    e354:	0000e189 	.word	0x0000e189
    e358:	000137d4 	.word	0x000137d4
    e35c:	0000e1d1 	.word	0x0000e1d1
    e360:	0000df4d 	.word	0x0000df4d
    e364:	0000c5bd 	.word	0x0000c5bd
    e368:	20003e74 	.word	0x20003e74
    e36c:	0000cac9 	.word	0x0000cac9

0000e370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    e370:	b590      	push	{r4, r7, lr}
    e372:	b089      	sub	sp, #36	; 0x24
    e374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    e376:	e03e      	b.n	e3f6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    e378:	4b28      	ldr	r3, [pc, #160]	; (e41c <prvSwitchTimerLists+0xac>)
    e37a:	681b      	ldr	r3, [r3, #0]
    e37c:	68db      	ldr	r3, [r3, #12]
    e37e:	681b      	ldr	r3, [r3, #0]
    e380:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    e382:	4b26      	ldr	r3, [pc, #152]	; (e41c <prvSwitchTimerLists+0xac>)
    e384:	681b      	ldr	r3, [r3, #0]
    e386:	68db      	ldr	r3, [r3, #12]
    e388:	68db      	ldr	r3, [r3, #12]
    e38a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    e38c:	693b      	ldr	r3, [r7, #16]
    e38e:	3304      	adds	r3, #4
    e390:	0018      	movs	r0, r3
    e392:	4b23      	ldr	r3, [pc, #140]	; (e420 <prvSwitchTimerLists+0xb0>)
    e394:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    e396:	693b      	ldr	r3, [r7, #16]
    e398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e39a:	693a      	ldr	r2, [r7, #16]
    e39c:	0010      	movs	r0, r2
    e39e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    e3a0:	693b      	ldr	r3, [r7, #16]
    e3a2:	69db      	ldr	r3, [r3, #28]
    e3a4:	2b01      	cmp	r3, #1
    e3a6:	d126      	bne.n	e3f6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    e3a8:	693b      	ldr	r3, [r7, #16]
    e3aa:	699a      	ldr	r2, [r3, #24]
    e3ac:	697b      	ldr	r3, [r7, #20]
    e3ae:	18d3      	adds	r3, r2, r3
    e3b0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    e3b2:	68fa      	ldr	r2, [r7, #12]
    e3b4:	697b      	ldr	r3, [r7, #20]
    e3b6:	429a      	cmp	r2, r3
    e3b8:	d90e      	bls.n	e3d8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    e3ba:	693b      	ldr	r3, [r7, #16]
    e3bc:	68fa      	ldr	r2, [r7, #12]
    e3be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    e3c0:	693b      	ldr	r3, [r7, #16]
    e3c2:	693a      	ldr	r2, [r7, #16]
    e3c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    e3c6:	4b15      	ldr	r3, [pc, #84]	; (e41c <prvSwitchTimerLists+0xac>)
    e3c8:	681a      	ldr	r2, [r3, #0]
    e3ca:	693b      	ldr	r3, [r7, #16]
    e3cc:	3304      	adds	r3, #4
    e3ce:	0019      	movs	r1, r3
    e3d0:	0010      	movs	r0, r2
    e3d2:	4b14      	ldr	r3, [pc, #80]	; (e424 <prvSwitchTimerLists+0xb4>)
    e3d4:	4798      	blx	r3
    e3d6:	e00e      	b.n	e3f6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    e3d8:	697a      	ldr	r2, [r7, #20]
    e3da:	6938      	ldr	r0, [r7, #16]
    e3dc:	2300      	movs	r3, #0
    e3de:	9300      	str	r3, [sp, #0]
    e3e0:	2300      	movs	r3, #0
    e3e2:	2100      	movs	r1, #0
    e3e4:	4c10      	ldr	r4, [pc, #64]	; (e428 <prvSwitchTimerLists+0xb8>)
    e3e6:	47a0      	blx	r4
    e3e8:	0003      	movs	r3, r0
    e3ea:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    e3ec:	68bb      	ldr	r3, [r7, #8]
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	d101      	bne.n	e3f6 <prvSwitchTimerLists+0x86>
    e3f2:	b672      	cpsid	i
    e3f4:	e7fe      	b.n	e3f4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    e3f6:	4b09      	ldr	r3, [pc, #36]	; (e41c <prvSwitchTimerLists+0xac>)
    e3f8:	681b      	ldr	r3, [r3, #0]
    e3fa:	681b      	ldr	r3, [r3, #0]
    e3fc:	2b00      	cmp	r3, #0
    e3fe:	d1bb      	bne.n	e378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    e400:	4b06      	ldr	r3, [pc, #24]	; (e41c <prvSwitchTimerLists+0xac>)
    e402:	681b      	ldr	r3, [r3, #0]
    e404:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    e406:	4b09      	ldr	r3, [pc, #36]	; (e42c <prvSwitchTimerLists+0xbc>)
    e408:	681a      	ldr	r2, [r3, #0]
    e40a:	4b04      	ldr	r3, [pc, #16]	; (e41c <prvSwitchTimerLists+0xac>)
    e40c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    e40e:	4b07      	ldr	r3, [pc, #28]	; (e42c <prvSwitchTimerLists+0xbc>)
    e410:	687a      	ldr	r2, [r7, #4]
    e412:	601a      	str	r2, [r3, #0]
}
    e414:	46c0      	nop			; (mov r8, r8)
    e416:	46bd      	mov	sp, r7
    e418:	b007      	add	sp, #28
    e41a:	bd90      	pop	{r4, r7, pc}
    e41c:	20003e6c 	.word	0x20003e6c
    e420:	0000c295 	.word	0x0000c295
    e424:	0000c229 	.word	0x0000c229
    e428:	0000df4d 	.word	0x0000df4d
    e42c:	20003e70 	.word	0x20003e70

0000e430 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    e430:	b580      	push	{r7, lr}
    e432:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    e434:	4b15      	ldr	r3, [pc, #84]	; (e48c <prvCheckForValidListAndQueue+0x5c>)
    e436:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    e438:	4b15      	ldr	r3, [pc, #84]	; (e490 <prvCheckForValidListAndQueue+0x60>)
    e43a:	681b      	ldr	r3, [r3, #0]
    e43c:	2b00      	cmp	r3, #0
    e43e:	d120      	bne.n	e482 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    e440:	4b14      	ldr	r3, [pc, #80]	; (e494 <prvCheckForValidListAndQueue+0x64>)
    e442:	0018      	movs	r0, r3
    e444:	4b14      	ldr	r3, [pc, #80]	; (e498 <prvCheckForValidListAndQueue+0x68>)
    e446:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    e448:	4b14      	ldr	r3, [pc, #80]	; (e49c <prvCheckForValidListAndQueue+0x6c>)
    e44a:	0018      	movs	r0, r3
    e44c:	4b12      	ldr	r3, [pc, #72]	; (e498 <prvCheckForValidListAndQueue+0x68>)
    e44e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    e450:	4b13      	ldr	r3, [pc, #76]	; (e4a0 <prvCheckForValidListAndQueue+0x70>)
    e452:	4a10      	ldr	r2, [pc, #64]	; (e494 <prvCheckForValidListAndQueue+0x64>)
    e454:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    e456:	4b13      	ldr	r3, [pc, #76]	; (e4a4 <prvCheckForValidListAndQueue+0x74>)
    e458:	4a10      	ldr	r2, [pc, #64]	; (e49c <prvCheckForValidListAndQueue+0x6c>)
    e45a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    e45c:	2200      	movs	r2, #0
    e45e:	210c      	movs	r1, #12
    e460:	2002      	movs	r0, #2
    e462:	4b11      	ldr	r3, [pc, #68]	; (e4a8 <prvCheckForValidListAndQueue+0x78>)
    e464:	4798      	blx	r3
    e466:	0002      	movs	r2, r0
    e468:	4b09      	ldr	r3, [pc, #36]	; (e490 <prvCheckForValidListAndQueue+0x60>)
    e46a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    e46c:	4b08      	ldr	r3, [pc, #32]	; (e490 <prvCheckForValidListAndQueue+0x60>)
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	2b00      	cmp	r3, #0
    e472:	d006      	beq.n	e482 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    e474:	4b06      	ldr	r3, [pc, #24]	; (e490 <prvCheckForValidListAndQueue+0x60>)
    e476:	681b      	ldr	r3, [r3, #0]
    e478:	4a0c      	ldr	r2, [pc, #48]	; (e4ac <prvCheckForValidListAndQueue+0x7c>)
    e47a:	0011      	movs	r1, r2
    e47c:	0018      	movs	r0, r3
    e47e:	4b0c      	ldr	r3, [pc, #48]	; (e4b0 <prvCheckForValidListAndQueue+0x80>)
    e480:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    e482:	4b0c      	ldr	r3, [pc, #48]	; (e4b4 <prvCheckForValidListAndQueue+0x84>)
    e484:	4798      	blx	r3
}
    e486:	46c0      	nop			; (mov r8, r8)
    e488:	46bd      	mov	sp, r7
    e48a:	bd80      	pop	{r7, pc}
    e48c:	0000c409 	.word	0x0000c409
    e490:	20003e74 	.word	0x20003e74
    e494:	20003e44 	.word	0x20003e44
    e498:	0000c191 	.word	0x0000c191
    e49c:	20003e58 	.word	0x20003e58
    e4a0:	20003e6c 	.word	0x20003e6c
    e4a4:	20003e70 	.word	0x20003e70
    e4a8:	0000c695 	.word	0x0000c695
    e4ac:	000137cc 	.word	0x000137cc
    e4b0:	0000cf59 	.word	0x0000cf59
    e4b4:	0000c42d 	.word	0x0000c42d

0000e4b8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e4b8:	b580      	push	{r7, lr}
    e4ba:	b084      	sub	sp, #16
    e4bc:	af00      	add	r7, sp, #0
    e4be:	0002      	movs	r2, r0
    e4c0:	1dfb      	adds	r3, r7, #7
    e4c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    e4c4:	230f      	movs	r3, #15
    e4c6:	18fb      	adds	r3, r7, r3
    e4c8:	1dfa      	adds	r2, r7, #7
    e4ca:	7812      	ldrb	r2, [r2, #0]
    e4cc:	09d2      	lsrs	r2, r2, #7
    e4ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    e4d0:	230e      	movs	r3, #14
    e4d2:	18fb      	adds	r3, r7, r3
    e4d4:	1dfa      	adds	r2, r7, #7
    e4d6:	7812      	ldrb	r2, [r2, #0]
    e4d8:	0952      	lsrs	r2, r2, #5
    e4da:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    e4dc:	4b0d      	ldr	r3, [pc, #52]	; (e514 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    e4de:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    e4e0:	230f      	movs	r3, #15
    e4e2:	18fb      	adds	r3, r7, r3
    e4e4:	781b      	ldrb	r3, [r3, #0]
    e4e6:	2b00      	cmp	r3, #0
    e4e8:	d10f      	bne.n	e50a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    e4ea:	230f      	movs	r3, #15
    e4ec:	18fb      	adds	r3, r7, r3
    e4ee:	781b      	ldrb	r3, [r3, #0]
    e4f0:	009b      	lsls	r3, r3, #2
    e4f2:	2210      	movs	r2, #16
    e4f4:	4694      	mov	ip, r2
    e4f6:	44bc      	add	ip, r7
    e4f8:	4463      	add	r3, ip
    e4fa:	3b08      	subs	r3, #8
    e4fc:	681a      	ldr	r2, [r3, #0]
    e4fe:	230e      	movs	r3, #14
    e500:	18fb      	adds	r3, r7, r3
    e502:	781b      	ldrb	r3, [r3, #0]
    e504:	01db      	lsls	r3, r3, #7
    e506:	18d3      	adds	r3, r2, r3
    e508:	e000      	b.n	e50c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    e50a:	2300      	movs	r3, #0
	}
}
    e50c:	0018      	movs	r0, r3
    e50e:	46bd      	mov	sp, r7
    e510:	b004      	add	sp, #16
    e512:	bd80      	pop	{r7, pc}
    e514:	41004400 	.word	0x41004400

0000e518 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    e518:	b580      	push	{r7, lr}
    e51a:	b082      	sub	sp, #8
    e51c:	af00      	add	r7, sp, #0
    e51e:	0002      	movs	r2, r0
    e520:	1dfb      	adds	r3, r7, #7
    e522:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e524:	4b06      	ldr	r3, [pc, #24]	; (e540 <system_interrupt_enable+0x28>)
    e526:	1dfa      	adds	r2, r7, #7
    e528:	7812      	ldrb	r2, [r2, #0]
    e52a:	0011      	movs	r1, r2
    e52c:	221f      	movs	r2, #31
    e52e:	400a      	ands	r2, r1
    e530:	2101      	movs	r1, #1
    e532:	4091      	lsls	r1, r2
    e534:	000a      	movs	r2, r1
    e536:	601a      	str	r2, [r3, #0]
}
    e538:	46c0      	nop			; (mov r8, r8)
    e53a:	46bd      	mov	sp, r7
    e53c:	b002      	add	sp, #8
    e53e:	bd80      	pop	{r7, pc}
    e540:	e000e100 	.word	0xe000e100

0000e544 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    e544:	b580      	push	{r7, lr}
    e546:	b082      	sub	sp, #8
    e548:	af00      	add	r7, sp, #0
    e54a:	0002      	movs	r2, r0
    e54c:	1dfb      	adds	r3, r7, #7
    e54e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    e550:	1dfb      	adds	r3, r7, #7
    e552:	781b      	ldrb	r3, [r3, #0]
    e554:	0018      	movs	r0, r3
    e556:	4b03      	ldr	r3, [pc, #12]	; (e564 <port_get_group_from_gpio_pin+0x20>)
    e558:	4798      	blx	r3
    e55a:	0003      	movs	r3, r0
}
    e55c:	0018      	movs	r0, r3
    e55e:	46bd      	mov	sp, r7
    e560:	b002      	add	sp, #8
    e562:	bd80      	pop	{r7, pc}
    e564:	0000e4b9 	.word	0x0000e4b9

0000e568 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    e568:	b580      	push	{r7, lr}
    e56a:	b084      	sub	sp, #16
    e56c:	af00      	add	r7, sp, #0
    e56e:	0002      	movs	r2, r0
    e570:	1dfb      	adds	r3, r7, #7
    e572:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e574:	1dfb      	adds	r3, r7, #7
    e576:	781b      	ldrb	r3, [r3, #0]
    e578:	0018      	movs	r0, r3
    e57a:	4b0b      	ldr	r3, [pc, #44]	; (e5a8 <port_pin_get_output_level+0x40>)
    e57c:	4798      	blx	r3
    e57e:	0003      	movs	r3, r0
    e580:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e582:	1dfb      	adds	r3, r7, #7
    e584:	781b      	ldrb	r3, [r3, #0]
    e586:	221f      	movs	r2, #31
    e588:	4013      	ands	r3, r2
    e58a:	2201      	movs	r2, #1
    e58c:	409a      	lsls	r2, r3
    e58e:	0013      	movs	r3, r2
    e590:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    e592:	68fb      	ldr	r3, [r7, #12]
    e594:	691b      	ldr	r3, [r3, #16]
    e596:	68ba      	ldr	r2, [r7, #8]
    e598:	4013      	ands	r3, r2
    e59a:	1e5a      	subs	r2, r3, #1
    e59c:	4193      	sbcs	r3, r2
    e59e:	b2db      	uxtb	r3, r3
}
    e5a0:	0018      	movs	r0, r3
    e5a2:	46bd      	mov	sp, r7
    e5a4:	b004      	add	sp, #16
    e5a6:	bd80      	pop	{r7, pc}
    e5a8:	0000e545 	.word	0x0000e545

0000e5ac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    e5ac:	b580      	push	{r7, lr}
    e5ae:	b084      	sub	sp, #16
    e5b0:	af00      	add	r7, sp, #0
    e5b2:	0002      	movs	r2, r0
    e5b4:	1dfb      	adds	r3, r7, #7
    e5b6:	701a      	strb	r2, [r3, #0]
    e5b8:	1dbb      	adds	r3, r7, #6
    e5ba:	1c0a      	adds	r2, r1, #0
    e5bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    e5be:	1dfb      	adds	r3, r7, #7
    e5c0:	781b      	ldrb	r3, [r3, #0]
    e5c2:	0018      	movs	r0, r3
    e5c4:	4b0d      	ldr	r3, [pc, #52]	; (e5fc <port_pin_set_output_level+0x50>)
    e5c6:	4798      	blx	r3
    e5c8:	0003      	movs	r3, r0
    e5ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    e5cc:	1dfb      	adds	r3, r7, #7
    e5ce:	781b      	ldrb	r3, [r3, #0]
    e5d0:	221f      	movs	r2, #31
    e5d2:	4013      	ands	r3, r2
    e5d4:	2201      	movs	r2, #1
    e5d6:	409a      	lsls	r2, r3
    e5d8:	0013      	movs	r3, r2
    e5da:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    e5dc:	1dbb      	adds	r3, r7, #6
    e5de:	781b      	ldrb	r3, [r3, #0]
    e5e0:	2b00      	cmp	r3, #0
    e5e2:	d003      	beq.n	e5ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    e5e4:	68fb      	ldr	r3, [r7, #12]
    e5e6:	68ba      	ldr	r2, [r7, #8]
    e5e8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    e5ea:	e002      	b.n	e5f2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    e5ec:	68fb      	ldr	r3, [r7, #12]
    e5ee:	68ba      	ldr	r2, [r7, #8]
    e5f0:	615a      	str	r2, [r3, #20]
	}
}
    e5f2:	46c0      	nop			; (mov r8, r8)
    e5f4:	46bd      	mov	sp, r7
    e5f6:	b004      	add	sp, #16
    e5f8:	bd80      	pop	{r7, pc}
    e5fa:	46c0      	nop			; (mov r8, r8)
    e5fc:	0000e545 	.word	0x0000e545

0000e600 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    e600:	b580      	push	{r7, lr}
    e602:	b084      	sub	sp, #16
    e604:	af00      	add	r7, sp, #0
    e606:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    e608:	687b      	ldr	r3, [r7, #4]
    e60a:	681b      	ldr	r3, [r3, #0]
    e60c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    e60e:	68fb      	ldr	r3, [r7, #12]
    e610:	69db      	ldr	r3, [r3, #28]
    e612:	1e5a      	subs	r2, r3, #1
    e614:	4193      	sbcs	r3, r2
    e616:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    e618:	0018      	movs	r0, r3
    e61a:	46bd      	mov	sp, r7
    e61c:	b004      	add	sp, #16
    e61e:	bd80      	pop	{r7, pc}

0000e620 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    e620:	b580      	push	{r7, lr}
    e622:	b082      	sub	sp, #8
    e624:	af00      	add	r7, sp, #0
    e626:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    e628:	46c0      	nop			; (mov r8, r8)
    e62a:	687b      	ldr	r3, [r7, #4]
    e62c:	0018      	movs	r0, r3
    e62e:	4b04      	ldr	r3, [pc, #16]	; (e640 <_usart_wait_for_sync+0x20>)
    e630:	4798      	blx	r3
    e632:	1e03      	subs	r3, r0, #0
    e634:	d1f9      	bne.n	e62a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    e636:	46c0      	nop			; (mov r8, r8)
    e638:	46bd      	mov	sp, r7
    e63a:	b002      	add	sp, #8
    e63c:	bd80      	pop	{r7, pc}
    e63e:	46c0      	nop			; (mov r8, r8)
    e640:	0000e601 	.word	0x0000e601

0000e644 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    e644:	b580      	push	{r7, lr}
    e646:	b082      	sub	sp, #8
    e648:	af00      	add	r7, sp, #0
    e64a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	2280      	movs	r2, #128	; 0x80
    e650:	05d2      	lsls	r2, r2, #23
    e652:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	2200      	movs	r2, #0
    e658:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	22ff      	movs	r2, #255	; 0xff
    e65e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    e660:	687b      	ldr	r3, [r7, #4]
    e662:	2200      	movs	r2, #0
    e664:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    e666:	687b      	ldr	r3, [r7, #4]
    e668:	2200      	movs	r2, #0
    e66a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	2296      	movs	r2, #150	; 0x96
    e670:	0192      	lsls	r2, r2, #6
    e672:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	2224      	movs	r2, #36	; 0x24
    e678:	2101      	movs	r1, #1
    e67a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    e67c:	687b      	ldr	r3, [r7, #4]
    e67e:	2225      	movs	r2, #37	; 0x25
    e680:	2101      	movs	r1, #1
    e682:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    e684:	687b      	ldr	r3, [r7, #4]
    e686:	2226      	movs	r2, #38	; 0x26
    e688:	2100      	movs	r1, #0
    e68a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    e68c:	687b      	ldr	r3, [r7, #4]
    e68e:	2227      	movs	r2, #39	; 0x27
    e690:	2100      	movs	r1, #0
    e692:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    e694:	687b      	ldr	r3, [r7, #4]
    e696:	2200      	movs	r2, #0
    e698:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    e69a:	687b      	ldr	r3, [r7, #4]
    e69c:	2288      	movs	r2, #136	; 0x88
    e69e:	0352      	lsls	r2, r2, #13
    e6a0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    e6a2:	687b      	ldr	r3, [r7, #4]
    e6a4:	222c      	movs	r2, #44	; 0x2c
    e6a6:	2100      	movs	r1, #0
    e6a8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    e6aa:	687b      	ldr	r3, [r7, #4]
    e6ac:	222d      	movs	r2, #45	; 0x2d
    e6ae:	2100      	movs	r1, #0
    e6b0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    e6b2:	687b      	ldr	r3, [r7, #4]
    e6b4:	2200      	movs	r2, #0
    e6b6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    e6b8:	687b      	ldr	r3, [r7, #4]
    e6ba:	2200      	movs	r2, #0
    e6bc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    e6be:	687b      	ldr	r3, [r7, #4]
    e6c0:	2200      	movs	r2, #0
    e6c2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    e6c4:	687b      	ldr	r3, [r7, #4]
    e6c6:	2200      	movs	r2, #0
    e6c8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    e6ca:	687b      	ldr	r3, [r7, #4]
    e6cc:	2200      	movs	r2, #0
    e6ce:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    e6d0:	687b      	ldr	r3, [r7, #4]
    e6d2:	2200      	movs	r2, #0
    e6d4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    e6d6:	687b      	ldr	r3, [r7, #4]
    e6d8:	2200      	movs	r2, #0
    e6da:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    e6dc:	687b      	ldr	r3, [r7, #4]
    e6de:	2200      	movs	r2, #0
    e6e0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    e6e2:	687b      	ldr	r3, [r7, #4]
    e6e4:	2200      	movs	r2, #0
    e6e6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    e6e8:	687b      	ldr	r3, [r7, #4]
    e6ea:	2200      	movs	r2, #0
    e6ec:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    e6ee:	687b      	ldr	r3, [r7, #4]
    e6f0:	2213      	movs	r2, #19
    e6f2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    e6f4:	687b      	ldr	r3, [r7, #4]
    e6f6:	2200      	movs	r2, #0
    e6f8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    e6fa:	46c0      	nop			; (mov r8, r8)
    e6fc:	46bd      	mov	sp, r7
    e6fe:	b002      	add	sp, #8
    e700:	bd80      	pop	{r7, pc}
    e702:	46c0      	nop			; (mov r8, r8)

0000e704 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    e704:	b580      	push	{r7, lr}
    e706:	b084      	sub	sp, #16
    e708:	af00      	add	r7, sp, #0
    e70a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e70c:	687b      	ldr	r3, [r7, #4]
    e70e:	681b      	ldr	r3, [r3, #0]
    e710:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    e712:	687b      	ldr	r3, [r7, #4]
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	0018      	movs	r0, r3
    e718:	4b09      	ldr	r3, [pc, #36]	; (e740 <usart_enable+0x3c>)
    e71a:	4798      	blx	r3
    e71c:	0003      	movs	r3, r0
    e71e:	0018      	movs	r0, r3
    e720:	4b08      	ldr	r3, [pc, #32]	; (e744 <usart_enable+0x40>)
    e722:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    e724:	687b      	ldr	r3, [r7, #4]
    e726:	0018      	movs	r0, r3
    e728:	4b07      	ldr	r3, [pc, #28]	; (e748 <usart_enable+0x44>)
    e72a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    e72c:	68fb      	ldr	r3, [r7, #12]
    e72e:	681b      	ldr	r3, [r3, #0]
    e730:	2202      	movs	r2, #2
    e732:	431a      	orrs	r2, r3
    e734:	68fb      	ldr	r3, [r7, #12]
    e736:	601a      	str	r2, [r3, #0]
}
    e738:	46c0      	nop			; (mov r8, r8)
    e73a:	46bd      	mov	sp, r7
    e73c:	b004      	add	sp, #16
    e73e:	bd80      	pop	{r7, pc}
    e740:	00009589 	.word	0x00009589
    e744:	0000e519 	.word	0x0000e519
    e748:	0000e621 	.word	0x0000e621

0000e74c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    e74c:	b580      	push	{r7, lr}
    e74e:	b084      	sub	sp, #16
    e750:	af00      	add	r7, sp, #0
    e752:	60f8      	str	r0, [r7, #12]
    e754:	60b9      	str	r1, [r7, #8]
    e756:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    e758:	687a      	ldr	r2, [r7, #4]
    e75a:	68b9      	ldr	r1, [r7, #8]
    e75c:	68fb      	ldr	r3, [r7, #12]
    e75e:	0018      	movs	r0, r3
    e760:	4b05      	ldr	r3, [pc, #20]	; (e778 <usart_serial_init+0x2c>)
    e762:	4798      	blx	r3
    e764:	1e03      	subs	r3, r0, #0
    e766:	d101      	bne.n	e76c <usart_serial_init+0x20>
		return true;
    e768:	2301      	movs	r3, #1
    e76a:	e000      	b.n	e76e <usart_serial_init+0x22>
	}
	else {
		return false;
    e76c:	2300      	movs	r3, #0
	}
}
    e76e:	0018      	movs	r0, r3
    e770:	46bd      	mov	sp, r7
    e772:	b004      	add	sp, #16
    e774:	bd80      	pop	{r7, pc}
    e776:	46c0      	nop			; (mov r8, r8)
    e778:	0000a685 	.word	0x0000a685

0000e77c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    e77c:	b580      	push	{r7, lr}
    e77e:	b082      	sub	sp, #8
    e780:	af00      	add	r7, sp, #0
    e782:	6078      	str	r0, [r7, #4]
    e784:	000a      	movs	r2, r1
    e786:	1cfb      	adds	r3, r7, #3
    e788:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    e78a:	46c0      	nop			; (mov r8, r8)
    e78c:	1cfb      	adds	r3, r7, #3
    e78e:	781b      	ldrb	r3, [r3, #0]
    e790:	b29a      	uxth	r2, r3
    e792:	687b      	ldr	r3, [r7, #4]
    e794:	0011      	movs	r1, r2
    e796:	0018      	movs	r0, r3
    e798:	4b04      	ldr	r3, [pc, #16]	; (e7ac <usart_serial_putchar+0x30>)
    e79a:	4798      	blx	r3
    e79c:	1e03      	subs	r3, r0, #0
    e79e:	d1f5      	bne.n	e78c <usart_serial_putchar+0x10>

	return STATUS_OK;
    e7a0:	2300      	movs	r3, #0
}
    e7a2:	0018      	movs	r0, r3
    e7a4:	46bd      	mov	sp, r7
    e7a6:	b002      	add	sp, #8
    e7a8:	bd80      	pop	{r7, pc}
    e7aa:	46c0      	nop			; (mov r8, r8)
    e7ac:	0000a8f9 	.word	0x0000a8f9

0000e7b0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    e7b0:	b580      	push	{r7, lr}
    e7b2:	b084      	sub	sp, #16
    e7b4:	af00      	add	r7, sp, #0
    e7b6:	6078      	str	r0, [r7, #4]
    e7b8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    e7ba:	230e      	movs	r3, #14
    e7bc:	18fb      	adds	r3, r7, r3
    e7be:	2200      	movs	r2, #0
    e7c0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    e7c2:	46c0      	nop			; (mov r8, r8)
    e7c4:	230e      	movs	r3, #14
    e7c6:	18fa      	adds	r2, r7, r3
    e7c8:	687b      	ldr	r3, [r7, #4]
    e7ca:	0011      	movs	r1, r2
    e7cc:	0018      	movs	r0, r3
    e7ce:	4b07      	ldr	r3, [pc, #28]	; (e7ec <usart_serial_getchar+0x3c>)
    e7d0:	4798      	blx	r3
    e7d2:	1e03      	subs	r3, r0, #0
    e7d4:	d1f6      	bne.n	e7c4 <usart_serial_getchar+0x14>

	*c = temp;
    e7d6:	230e      	movs	r3, #14
    e7d8:	18fb      	adds	r3, r7, r3
    e7da:	881b      	ldrh	r3, [r3, #0]
    e7dc:	b2da      	uxtb	r2, r3
    e7de:	683b      	ldr	r3, [r7, #0]
    e7e0:	701a      	strb	r2, [r3, #0]
}
    e7e2:	46c0      	nop			; (mov r8, r8)
    e7e4:	46bd      	mov	sp, r7
    e7e6:	b004      	add	sp, #16
    e7e8:	bd80      	pop	{r7, pc}
    e7ea:	46c0      	nop			; (mov r8, r8)
    e7ec:	0000a95d 	.word	0x0000a95d

0000e7f0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    e7f0:	b580      	push	{r7, lr}
    e7f2:	b084      	sub	sp, #16
    e7f4:	af00      	add	r7, sp, #0
    e7f6:	60f8      	str	r0, [r7, #12]
    e7f8:	60b9      	str	r1, [r7, #8]
    e7fa:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    e7fc:	4b10      	ldr	r3, [pc, #64]	; (e840 <stdio_serial_init+0x50>)
    e7fe:	68fa      	ldr	r2, [r7, #12]
    e800:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    e802:	4b10      	ldr	r3, [pc, #64]	; (e844 <stdio_serial_init+0x54>)
    e804:	4a10      	ldr	r2, [pc, #64]	; (e848 <stdio_serial_init+0x58>)
    e806:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    e808:	4b10      	ldr	r3, [pc, #64]	; (e84c <stdio_serial_init+0x5c>)
    e80a:	4a11      	ldr	r2, [pc, #68]	; (e850 <stdio_serial_init+0x60>)
    e80c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    e80e:	687a      	ldr	r2, [r7, #4]
    e810:	68b9      	ldr	r1, [r7, #8]
    e812:	68fb      	ldr	r3, [r7, #12]
    e814:	0018      	movs	r0, r3
    e816:	4b0f      	ldr	r3, [pc, #60]	; (e854 <stdio_serial_init+0x64>)
    e818:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    e81a:	4b0f      	ldr	r3, [pc, #60]	; (e858 <stdio_serial_init+0x68>)
    e81c:	681b      	ldr	r3, [r3, #0]
    e81e:	689b      	ldr	r3, [r3, #8]
    e820:	2100      	movs	r1, #0
    e822:	0018      	movs	r0, r3
    e824:	4b0d      	ldr	r3, [pc, #52]	; (e85c <stdio_serial_init+0x6c>)
    e826:	4798      	blx	r3
	setbuf(stdin, NULL);
    e828:	4b0b      	ldr	r3, [pc, #44]	; (e858 <stdio_serial_init+0x68>)
    e82a:	681b      	ldr	r3, [r3, #0]
    e82c:	685b      	ldr	r3, [r3, #4]
    e82e:	2100      	movs	r1, #0
    e830:	0018      	movs	r0, r3
    e832:	4b0a      	ldr	r3, [pc, #40]	; (e85c <stdio_serial_init+0x6c>)
    e834:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    e836:	46c0      	nop			; (mov r8, r8)
    e838:	46bd      	mov	sp, r7
    e83a:	b004      	add	sp, #16
    e83c:	bd80      	pop	{r7, pc}
    e83e:	46c0      	nop			; (mov r8, r8)
    e840:	200047c8 	.word	0x200047c8
    e844:	200047c4 	.word	0x200047c4
    e848:	0000e77d 	.word	0x0000e77d
    e84c:	200047c0 	.word	0x200047c0
    e850:	0000e7b1 	.word	0x0000e7b1
    e854:	0000e74d 	.word	0x0000e74d
    e858:	20000098 	.word	0x20000098
    e85c:	00011351 	.word	0x00011351

0000e860 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    e860:	b580      	push	{r7, lr}
    e862:	b084      	sub	sp, #16
    e864:	af00      	add	r7, sp, #0
    e866:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e868:	687b      	ldr	r3, [r7, #4]
    e86a:	681b      	ldr	r3, [r3, #0]
    e86c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    e86e:	68fb      	ldr	r3, [r7, #12]
    e870:	7bdb      	ldrb	r3, [r3, #15]
    e872:	b2db      	uxtb	r3, r3
    e874:	001a      	movs	r2, r3
    e876:	2380      	movs	r3, #128	; 0x80
    e878:	4013      	ands	r3, r2
    e87a:	1e5a      	subs	r2, r3, #1
    e87c:	4193      	sbcs	r3, r2
    e87e:	b2db      	uxtb	r3, r3
#endif
}
    e880:	0018      	movs	r0, r3
    e882:	46bd      	mov	sp, r7
    e884:	b004      	add	sp, #16
    e886:	bd80      	pop	{r7, pc}

0000e888 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    e888:	b580      	push	{r7, lr}
    e88a:	b082      	sub	sp, #8
    e88c:	af00      	add	r7, sp, #0
    e88e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    e890:	687b      	ldr	r3, [r7, #4]
    e892:	2200      	movs	r2, #0
    e894:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    e896:	687b      	ldr	r3, [r7, #4]
    e898:	2200      	movs	r2, #0
    e89a:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    e89c:	687b      	ldr	r3, [r7, #4]
    e89e:	2200      	movs	r2, #0
    e8a0:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    e8a2:	687b      	ldr	r3, [r7, #4]
    e8a4:	2200      	movs	r2, #0
    e8a6:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    e8a8:	687b      	ldr	r3, [r7, #4]
    e8aa:	2200      	movs	r2, #0
    e8ac:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    e8ae:	687b      	ldr	r3, [r7, #4]
    e8b0:	2200      	movs	r2, #0
    e8b2:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    e8b4:	687b      	ldr	r3, [r7, #4]
    e8b6:	2200      	movs	r2, #0
    e8b8:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    e8ba:	687b      	ldr	r3, [r7, #4]
    e8bc:	2200      	movs	r2, #0
    e8be:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    e8c0:	687b      	ldr	r3, [r7, #4]
    e8c2:	2200      	movs	r2, #0
    e8c4:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	2200      	movs	r2, #0
    e8ca:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    e8cc:	687b      	ldr	r3, [r7, #4]
    e8ce:	2200      	movs	r2, #0
    e8d0:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    e8d2:	687b      	ldr	r3, [r7, #4]
    e8d4:	2200      	movs	r2, #0
    e8d6:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    e8d8:	687b      	ldr	r3, [r7, #4]
    e8da:	2200      	movs	r2, #0
    e8dc:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    e8de:	687b      	ldr	r3, [r7, #4]
    e8e0:	2200      	movs	r2, #0
    e8e2:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	2200      	movs	r2, #0
    e8e8:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    e8ea:	687b      	ldr	r3, [r7, #4]
    e8ec:	2200      	movs	r2, #0
    e8ee:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    e8f0:	687b      	ldr	r3, [r7, #4]
    e8f2:	2200      	movs	r2, #0
    e8f4:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    e8f6:	687b      	ldr	r3, [r7, #4]
    e8f8:	2200      	movs	r2, #0
    e8fa:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    e8fc:	687b      	ldr	r3, [r7, #4]
    e8fe:	2200      	movs	r2, #0
    e900:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    e902:	687b      	ldr	r3, [r7, #4]
    e904:	2200      	movs	r2, #0
    e906:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    e908:	46c0      	nop			; (mov r8, r8)
    e90a:	46bd      	mov	sp, r7
    e90c:	b002      	add	sp, #8
    e90e:	bd80      	pop	{r7, pc}

0000e910 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    e910:	b580      	push	{r7, lr}
    e912:	b084      	sub	sp, #16
    e914:	af00      	add	r7, sp, #0
    e916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	681b      	ldr	r3, [r3, #0]
    e91c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    e91e:	46c0      	nop			; (mov r8, r8)
    e920:	687b      	ldr	r3, [r7, #4]
    e922:	0018      	movs	r0, r3
    e924:	4b07      	ldr	r3, [pc, #28]	; (e944 <tc_enable+0x34>)
    e926:	4798      	blx	r3
    e928:	1e03      	subs	r3, r0, #0
    e92a:	d1f9      	bne.n	e920 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    e92c:	68fb      	ldr	r3, [r7, #12]
    e92e:	881b      	ldrh	r3, [r3, #0]
    e930:	b29b      	uxth	r3, r3
    e932:	2202      	movs	r2, #2
    e934:	4313      	orrs	r3, r2
    e936:	b29a      	uxth	r2, r3
    e938:	68fb      	ldr	r3, [r7, #12]
    e93a:	801a      	strh	r2, [r3, #0]
}
    e93c:	46c0      	nop			; (mov r8, r8)
    e93e:	46bd      	mov	sp, r7
    e940:	b004      	add	sp, #16
    e942:	bd80      	pop	{r7, pc}
    e944:	0000e861 	.word	0x0000e861

0000e948 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    e948:	b580      	push	{r7, lr}
    e94a:	b084      	sub	sp, #16
    e94c:	af00      	add	r7, sp, #0
    e94e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    e950:	687b      	ldr	r3, [r7, #4]
    e952:	681b      	ldr	r3, [r3, #0]
    e954:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    e956:	46c0      	nop			; (mov r8, r8)
    e958:	687b      	ldr	r3, [r7, #4]
    e95a:	0018      	movs	r0, r3
    e95c:	4b0a      	ldr	r3, [pc, #40]	; (e988 <tc_disable+0x40>)
    e95e:	4798      	blx	r3
    e960:	1e03      	subs	r3, r0, #0
    e962:	d1f9      	bne.n	e958 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    e964:	68fb      	ldr	r3, [r7, #12]
    e966:	223b      	movs	r2, #59	; 0x3b
    e968:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    e96a:	68fb      	ldr	r3, [r7, #12]
    e96c:	223b      	movs	r2, #59	; 0x3b
    e96e:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    e970:	68fb      	ldr	r3, [r7, #12]
    e972:	881b      	ldrh	r3, [r3, #0]
    e974:	b29b      	uxth	r3, r3
    e976:	2202      	movs	r2, #2
    e978:	4393      	bics	r3, r2
    e97a:	b29a      	uxth	r2, r3
    e97c:	68fb      	ldr	r3, [r7, #12]
    e97e:	801a      	strh	r2, [r3, #0]
}
    e980:	46c0      	nop			; (mov r8, r8)
    e982:	46bd      	mov	sp, r7
    e984:	b004      	add	sp, #16
    e986:	bd80      	pop	{r7, pc}
    e988:	0000e861 	.word	0x0000e861

0000e98c <m2m_tcp_socket_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e98c:	b580      	push	{r7, lr}
    e98e:	b082      	sub	sp, #8
    e990:	af00      	add	r7, sp, #0
    e992:	603a      	str	r2, [r7, #0]
    e994:	1dfb      	adds	r3, r7, #7
    e996:	1c02      	adds	r2, r0, #0
    e998:	701a      	strb	r2, [r3, #0]
    e99a:	1dbb      	adds	r3, r7, #6
    e99c:	1c0a      	adds	r2, r1, #0
    e99e:	701a      	strb	r2, [r3, #0]
	handle_tcpip(sock, u8Msg, pvMsg);
    e9a0:	683a      	ldr	r2, [r7, #0]
    e9a2:	1dbb      	adds	r3, r7, #6
    e9a4:	7819      	ldrb	r1, [r3, #0]
    e9a6:	1dfb      	adds	r3, r7, #7
    e9a8:	781b      	ldrb	r3, [r3, #0]
    e9aa:	b25b      	sxtb	r3, r3
    e9ac:	0018      	movs	r0, r3
    e9ae:	4b03      	ldr	r3, [pc, #12]	; (e9bc <m2m_tcp_socket_handler+0x30>)
    e9b0:	4798      	blx	r3
}
    e9b2:	46c0      	nop			; (mov r8, r8)
    e9b4:	46bd      	mov	sp, r7
    e9b6:	b002      	add	sp, #8
    e9b8:	bd80      	pop	{r7, pc}
    e9ba:	46c0      	nop			; (mov r8, r8)
    e9bc:	0000fb49 	.word	0x0000fb49

0000e9c0 <socket_resolve_cb>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    e9c0:	b5b0      	push	{r4, r5, r7, lr}
    e9c2:	b084      	sub	sp, #16
    e9c4:	af02      	add	r7, sp, #8
    e9c6:	6078      	str	r0, [r7, #4]
    e9c8:	6039      	str	r1, [r7, #0]
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    e9ca:	683b      	ldr	r3, [r7, #0]
    e9cc:	22ff      	movs	r2, #255	; 0xff
    e9ce:	4013      	ands	r3, r2
    e9d0:	001c      	movs	r4, r3
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    e9d2:	683b      	ldr	r3, [r7, #0]
    e9d4:	0a1b      	lsrs	r3, r3, #8
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    e9d6:	001a      	movs	r2, r3
    e9d8:	23ff      	movs	r3, #255	; 0xff
    e9da:	401a      	ands	r2, r3
    e9dc:	0015      	movs	r5, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    e9de:	683b      	ldr	r3, [r7, #0]
    e9e0:	0c1b      	lsrs	r3, r3, #16
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    e9e2:	001a      	movs	r2, r3
    e9e4:	23ff      	movs	r3, #255	; 0xff
    e9e6:	4013      	ands	r3, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    e9e8:	683a      	ldr	r2, [r7, #0]
    e9ea:	0e12      	lsrs	r2, r2, #24
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    e9ec:	6879      	ldr	r1, [r7, #4]
    e9ee:	4808      	ldr	r0, [pc, #32]	; (ea10 <socket_resolve_cb+0x50>)
    e9f0:	9201      	str	r2, [sp, #4]
    e9f2:	9300      	str	r3, [sp, #0]
    e9f4:	002b      	movs	r3, r5
    e9f6:	0022      	movs	r2, r4
    e9f8:	4c06      	ldr	r4, [pc, #24]	; (ea14 <socket_resolve_cb+0x54>)
    e9fa:	47a0      	blx	r4
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
	handle_dns_found((char *)hostName, hostIp);
    e9fc:	683a      	ldr	r2, [r7, #0]
    e9fe:	687b      	ldr	r3, [r7, #4]
    ea00:	0011      	movs	r1, r2
    ea02:	0018      	movs	r0, r3
    ea04:	4b04      	ldr	r3, [pc, #16]	; (ea18 <socket_resolve_cb+0x58>)
    ea06:	4798      	blx	r3
}
    ea08:	46c0      	nop			; (mov r8, r8)
    ea0a:	46bd      	mov	sp, r7
    ea0c:	b002      	add	sp, #8
    ea0e:	bdb0      	pop	{r4, r5, r7, pc}
    ea10:	0001380c 	.word	0x0001380c
    ea14:	0001121d 	.word	0x0001121d
    ea18:	0000fad9 	.word	0x0000fad9

0000ea1c <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    ea1c:	b590      	push	{r4, r7, lr}
    ea1e:	b087      	sub	sp, #28
    ea20:	af02      	add	r7, sp, #8
    ea22:	0002      	movs	r2, r0
    ea24:	6039      	str	r1, [r7, #0]
    ea26:	1dfb      	adds	r3, r7, #7
    ea28:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    ea2a:	1dfb      	adds	r3, r7, #7
    ea2c:	781b      	ldrb	r3, [r3, #0]
    ea2e:	2b2c      	cmp	r3, #44	; 0x2c
    ea30:	d002      	beq.n	ea38 <m2m_wifi_state+0x1c>
    ea32:	2b32      	cmp	r3, #50	; 0x32
    ea34:	d025      	beq.n	ea82 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    ea36:	e042      	b.n	eabe <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    ea38:	683b      	ldr	r3, [r7, #0]
    ea3a:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    ea3c:	68fb      	ldr	r3, [r7, #12]
    ea3e:	781b      	ldrb	r3, [r3, #0]
    ea40:	2b01      	cmp	r3, #1
    ea42:	d104      	bne.n	ea4e <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    ea44:	4b20      	ldr	r3, [pc, #128]	; (eac8 <m2m_wifi_state+0xac>)
    ea46:	0018      	movs	r0, r3
    ea48:	4b20      	ldr	r3, [pc, #128]	; (eacc <m2m_wifi_state+0xb0>)
    ea4a:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    ea4c:	e036      	b.n	eabc <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    ea4e:	68fb      	ldr	r3, [r7, #12]
    ea50:	781b      	ldrb	r3, [r3, #0]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d132      	bne.n	eabc <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    ea56:	4b1e      	ldr	r3, [pc, #120]	; (ead0 <m2m_wifi_state+0xb4>)
    ea58:	0018      	movs	r0, r3
    ea5a:	4b1c      	ldr	r3, [pc, #112]	; (eacc <m2m_wifi_state+0xb0>)
    ea5c:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    ea5e:	4b1d      	ldr	r3, [pc, #116]	; (ead4 <m2m_wifi_state+0xb8>)
    ea60:	781b      	ldrb	r3, [r3, #0]
    ea62:	b2db      	uxtb	r3, r3
    ea64:	2b03      	cmp	r3, #3
    ea66:	d129      	bne.n	eabc <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    ea68:	4b1a      	ldr	r3, [pc, #104]	; (ead4 <m2m_wifi_state+0xb8>)
    ea6a:	2204      	movs	r2, #4
    ea6c:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    ea6e:	4a1a      	ldr	r2, [pc, #104]	; (ead8 <m2m_wifi_state+0xbc>)
    ea70:	481a      	ldr	r0, [pc, #104]	; (eadc <m2m_wifi_state+0xc0>)
    ea72:	23ff      	movs	r3, #255	; 0xff
    ea74:	9300      	str	r3, [sp, #0]
    ea76:	0013      	movs	r3, r2
    ea78:	2202      	movs	r2, #2
    ea7a:	211b      	movs	r1, #27
    ea7c:	4c18      	ldr	r4, [pc, #96]	; (eae0 <m2m_wifi_state+0xc4>)
    ea7e:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    ea80:	e01c      	b.n	eabc <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    ea82:	683b      	ldr	r3, [r7, #0]
    ea84:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    ea86:	4b17      	ldr	r3, [pc, #92]	; (eae4 <m2m_wifi_state+0xc8>)
    ea88:	681a      	ldr	r2, [r3, #0]
    ea8a:	4b17      	ldr	r3, [pc, #92]	; (eae8 <m2m_wifi_state+0xcc>)
    ea8c:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    ea8e:	68bb      	ldr	r3, [r7, #8]
    ea90:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    ea92:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    ea94:	68bb      	ldr	r3, [r7, #8]
    ea96:	3301      	adds	r3, #1
    ea98:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    ea9a:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    ea9c:	68bb      	ldr	r3, [r7, #8]
    ea9e:	3302      	adds	r3, #2
    eaa0:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    eaa2:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    eaa4:	68bb      	ldr	r3, [r7, #8]
    eaa6:	3303      	adds	r3, #3
    eaa8:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    eaaa:	4810      	ldr	r0, [pc, #64]	; (eaec <m2m_wifi_state+0xd0>)
    eaac:	9300      	str	r3, [sp, #0]
    eaae:	0023      	movs	r3, r4
    eab0:	4c0f      	ldr	r4, [pc, #60]	; (eaf0 <m2m_wifi_state+0xd4>)
    eab2:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    eab4:	4b07      	ldr	r3, [pc, #28]	; (ead4 <m2m_wifi_state+0xb8>)
    eab6:	2203      	movs	r2, #3
    eab8:	701a      	strb	r2, [r3, #0]

		break;
    eaba:	e000      	b.n	eabe <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    eabc:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    eabe:	46c0      	nop			; (mov r8, r8)
    eac0:	46bd      	mov	sp, r7
    eac2:	b005      	add	sp, #20
    eac4:	bd90      	pop	{r4, r7, pc}
    eac6:	46c0      	nop			; (mov r8, r8)
    eac8:	00013844 	.word	0x00013844
    eacc:	0001133d 	.word	0x0001133d
    ead0:	00013880 	.word	0x00013880
    ead4:	20003e80 	.word	0x20003e80
    ead8:	000138c0 	.word	0x000138c0
    eadc:	000138cc 	.word	0x000138cc
    eae0:	00004451 	.word	0x00004451
    eae4:	20003e84 	.word	0x20003e84
    eae8:	20003e94 	.word	0x20003e94
    eaec:	000138e8 	.word	0x000138e8
    eaf0:	0001121d 	.word	0x0001121d

0000eaf4 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    eaf4:	b580      	push	{r7, lr}
    eaf6:	b090      	sub	sp, #64	; 0x40
    eaf8:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    eafa:	003b      	movs	r3, r7
    eafc:	0018      	movs	r0, r3
    eafe:	4b14      	ldr	r3, [pc, #80]	; (eb50 <configure_console+0x5c>)
    eb00:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    eb02:	003b      	movs	r3, r7
    eb04:	22c4      	movs	r2, #196	; 0xc4
    eb06:	0392      	lsls	r2, r2, #14
    eb08:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    eb0a:	003b      	movs	r3, r7
    eb0c:	2201      	movs	r2, #1
    eb0e:	4252      	negs	r2, r2
    eb10:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    eb12:	003b      	movs	r3, r7
    eb14:	2201      	movs	r2, #1
    eb16:	4252      	negs	r2, r2
    eb18:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    eb1a:	003b      	movs	r3, r7
    eb1c:	2201      	movs	r2, #1
    eb1e:	4252      	negs	r2, r2
    eb20:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    eb22:	003b      	movs	r3, r7
    eb24:	2201      	movs	r2, #1
    eb26:	4252      	negs	r2, r2
    eb28:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    eb2a:	003b      	movs	r3, r7
    eb2c:	22e1      	movs	r2, #225	; 0xe1
    eb2e:	0252      	lsls	r2, r2, #9
    eb30:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    eb32:	003a      	movs	r2, r7
    eb34:	4907      	ldr	r1, [pc, #28]	; (eb54 <configure_console+0x60>)
    eb36:	4b08      	ldr	r3, [pc, #32]	; (eb58 <configure_console+0x64>)
    eb38:	0018      	movs	r0, r3
    eb3a:	4b08      	ldr	r3, [pc, #32]	; (eb5c <configure_console+0x68>)
    eb3c:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    eb3e:	4b06      	ldr	r3, [pc, #24]	; (eb58 <configure_console+0x64>)
    eb40:	0018      	movs	r0, r3
    eb42:	4b07      	ldr	r3, [pc, #28]	; (eb60 <configure_console+0x6c>)
    eb44:	4798      	blx	r3
}
    eb46:	46c0      	nop			; (mov r8, r8)
    eb48:	46bd      	mov	sp, r7
    eb4a:	b010      	add	sp, #64	; 0x40
    eb4c:	bd80      	pop	{r7, pc}
    eb4e:	46c0      	nop			; (mov r8, r8)
    eb50:	0000e645 	.word	0x0000e645
    eb54:	42001400 	.word	0x42001400
    eb58:	20003e9c 	.word	0x20003e9c
    eb5c:	0000e7f1 	.word	0x0000e7f1
    eb60:	0000e705 	.word	0x0000e705

0000eb64 <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
    eb64:	b590      	push	{r4, r7, lr}
    eb66:	b085      	sub	sp, #20
    eb68:	af00      	add	r7, sp, #0
    eb6a:	6078      	str	r0, [r7, #4]
    eb6c:	6039      	str	r1, [r7, #0]
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    eb6e:	230e      	movs	r3, #14
    eb70:	18fc      	adds	r4, r7, r3
    eb72:	687b      	ldr	r3, [r7, #4]
    eb74:	0018      	movs	r0, r3
    eb76:	4b47      	ldr	r3, [pc, #284]	; (ec94 <set_dev_name_to_mac+0x130>)
    eb78:	4798      	blx	r3
    eb7a:	0003      	movs	r3, r0
    eb7c:	8023      	strh	r3, [r4, #0]
	if (len >= 5) {
    eb7e:	230e      	movs	r3, #14
    eb80:	18fb      	adds	r3, r7, r3
    eb82:	881b      	ldrh	r3, [r3, #0]
    eb84:	2b04      	cmp	r3, #4
    eb86:	d800      	bhi.n	eb8a <set_dev_name_to_mac+0x26>
    eb88:	e07f      	b.n	ec8a <set_dev_name_to_mac+0x126>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    eb8a:	230e      	movs	r3, #14
    eb8c:	18fb      	adds	r3, r7, r3
    eb8e:	881b      	ldrh	r3, [r3, #0]
    eb90:	3b01      	subs	r3, #1
    eb92:	687a      	ldr	r2, [r7, #4]
    eb94:	18d2      	adds	r2, r2, r3
    eb96:	683b      	ldr	r3, [r7, #0]
    eb98:	3305      	adds	r3, #5
    eb9a:	781b      	ldrb	r3, [r3, #0]
    eb9c:	0019      	movs	r1, r3
    eb9e:	230f      	movs	r3, #15
    eba0:	400b      	ands	r3, r1
    eba2:	2b09      	cmp	r3, #9
    eba4:	dd08      	ble.n	ebb8 <set_dev_name_to_mac+0x54>
    eba6:	683b      	ldr	r3, [r7, #0]
    eba8:	3305      	adds	r3, #5
    ebaa:	781b      	ldrb	r3, [r3, #0]
    ebac:	210f      	movs	r1, #15
    ebae:	400b      	ands	r3, r1
    ebb0:	b2db      	uxtb	r3, r3
    ebb2:	3337      	adds	r3, #55	; 0x37
    ebb4:	b2db      	uxtb	r3, r3
    ebb6:	e007      	b.n	ebc8 <set_dev_name_to_mac+0x64>
    ebb8:	683b      	ldr	r3, [r7, #0]
    ebba:	3305      	adds	r3, #5
    ebbc:	781b      	ldrb	r3, [r3, #0]
    ebbe:	210f      	movs	r1, #15
    ebc0:	400b      	ands	r3, r1
    ebc2:	b2db      	uxtb	r3, r3
    ebc4:	3330      	adds	r3, #48	; 0x30
    ebc6:	b2db      	uxtb	r3, r3
    ebc8:	7013      	strb	r3, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    ebca:	230e      	movs	r3, #14
    ebcc:	18fb      	adds	r3, r7, r3
    ebce:	881b      	ldrh	r3, [r3, #0]
    ebd0:	3b02      	subs	r3, #2
    ebd2:	687a      	ldr	r2, [r7, #4]
    ebd4:	18d2      	adds	r2, r2, r3
    ebd6:	683b      	ldr	r3, [r7, #0]
    ebd8:	3305      	adds	r3, #5
    ebda:	781b      	ldrb	r3, [r3, #0]
    ebdc:	091b      	lsrs	r3, r3, #4
    ebde:	b2db      	uxtb	r3, r3
    ebe0:	0019      	movs	r1, r3
    ebe2:	230f      	movs	r3, #15
    ebe4:	400b      	ands	r3, r1
    ebe6:	2b09      	cmp	r3, #9
    ebe8:	dd07      	ble.n	ebfa <set_dev_name_to_mac+0x96>
    ebea:	683b      	ldr	r3, [r7, #0]
    ebec:	3305      	adds	r3, #5
    ebee:	781b      	ldrb	r3, [r3, #0]
    ebf0:	091b      	lsrs	r3, r3, #4
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	3337      	adds	r3, #55	; 0x37
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	e006      	b.n	ec08 <set_dev_name_to_mac+0xa4>
    ebfa:	683b      	ldr	r3, [r7, #0]
    ebfc:	3305      	adds	r3, #5
    ebfe:	781b      	ldrb	r3, [r3, #0]
    ec00:	091b      	lsrs	r3, r3, #4
    ec02:	b2db      	uxtb	r3, r3
    ec04:	3330      	adds	r3, #48	; 0x30
    ec06:	b2db      	uxtb	r3, r3
    ec08:	7013      	strb	r3, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    ec0a:	230e      	movs	r3, #14
    ec0c:	18fb      	adds	r3, r7, r3
    ec0e:	881b      	ldrh	r3, [r3, #0]
    ec10:	3b04      	subs	r3, #4
    ec12:	687a      	ldr	r2, [r7, #4]
    ec14:	18d2      	adds	r2, r2, r3
    ec16:	683b      	ldr	r3, [r7, #0]
    ec18:	3304      	adds	r3, #4
    ec1a:	781b      	ldrb	r3, [r3, #0]
    ec1c:	0019      	movs	r1, r3
    ec1e:	230f      	movs	r3, #15
    ec20:	400b      	ands	r3, r1
    ec22:	2b09      	cmp	r3, #9
    ec24:	dd08      	ble.n	ec38 <set_dev_name_to_mac+0xd4>
    ec26:	683b      	ldr	r3, [r7, #0]
    ec28:	3304      	adds	r3, #4
    ec2a:	781b      	ldrb	r3, [r3, #0]
    ec2c:	210f      	movs	r1, #15
    ec2e:	400b      	ands	r3, r1
    ec30:	b2db      	uxtb	r3, r3
    ec32:	3337      	adds	r3, #55	; 0x37
    ec34:	b2db      	uxtb	r3, r3
    ec36:	e007      	b.n	ec48 <set_dev_name_to_mac+0xe4>
    ec38:	683b      	ldr	r3, [r7, #0]
    ec3a:	3304      	adds	r3, #4
    ec3c:	781b      	ldrb	r3, [r3, #0]
    ec3e:	210f      	movs	r1, #15
    ec40:	400b      	ands	r3, r1
    ec42:	b2db      	uxtb	r3, r3
    ec44:	3330      	adds	r3, #48	; 0x30
    ec46:	b2db      	uxtb	r3, r3
    ec48:	7013      	strb	r3, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    ec4a:	230e      	movs	r3, #14
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	881b      	ldrh	r3, [r3, #0]
    ec50:	3b05      	subs	r3, #5
    ec52:	687a      	ldr	r2, [r7, #4]
    ec54:	18d2      	adds	r2, r2, r3
    ec56:	683b      	ldr	r3, [r7, #0]
    ec58:	3304      	adds	r3, #4
    ec5a:	781b      	ldrb	r3, [r3, #0]
    ec5c:	091b      	lsrs	r3, r3, #4
    ec5e:	b2db      	uxtb	r3, r3
    ec60:	0019      	movs	r1, r3
    ec62:	230f      	movs	r3, #15
    ec64:	400b      	ands	r3, r1
    ec66:	2b09      	cmp	r3, #9
    ec68:	dd07      	ble.n	ec7a <set_dev_name_to_mac+0x116>
    ec6a:	683b      	ldr	r3, [r7, #0]
    ec6c:	3304      	adds	r3, #4
    ec6e:	781b      	ldrb	r3, [r3, #0]
    ec70:	091b      	lsrs	r3, r3, #4
    ec72:	b2db      	uxtb	r3, r3
    ec74:	3337      	adds	r3, #55	; 0x37
    ec76:	b2db      	uxtb	r3, r3
    ec78:	e006      	b.n	ec88 <set_dev_name_to_mac+0x124>
    ec7a:	683b      	ldr	r3, [r7, #0]
    ec7c:	3304      	adds	r3, #4
    ec7e:	781b      	ldrb	r3, [r3, #0]
    ec80:	091b      	lsrs	r3, r3, #4
    ec82:	b2db      	uxtb	r3, r3
    ec84:	3330      	adds	r3, #48	; 0x30
    ec86:	b2db      	uxtb	r3, r3
    ec88:	7013      	strb	r3, [r2, #0]
	}
}
    ec8a:	46c0      	nop			; (mov r8, r8)
    ec8c:	46bd      	mov	sp, r7
    ec8e:	b005      	add	sp, #20
    ec90:	bd90      	pop	{r4, r7, pc}
    ec92:	46c0      	nop			; (mov r8, r8)
    ec94:	000030b1 	.word	0x000030b1

0000ec98 <task_3s>:

static void task_3s(void *args)
{
    ec98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec9a:	b0cd      	sub	sp, #308	; 0x134
    ec9c:	af04      	add	r7, sp, #16
    ec9e:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    eca0:	2300      	movs	r3, #0
    eca2:	2400      	movs	r4, #0
    eca4:	228c      	movs	r2, #140	; 0x8c
    eca6:	0052      	lsls	r2, r2, #1
    eca8:	18ba      	adds	r2, r7, r2
    ecaa:	6013      	str	r3, [r2, #0]
    ecac:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    ecae:	238b      	movs	r3, #139	; 0x8b
    ecb0:	005b      	lsls	r3, r3, #1
    ecb2:	18fb      	adds	r3, r7, r3
    ecb4:	2200      	movs	r2, #0
    ecb6:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    ecb8:	4b4a      	ldr	r3, [pc, #296]	; (ede4 <task_3s+0x14c>)
    ecba:	2290      	movs	r2, #144	; 0x90
    ecbc:	0052      	lsls	r2, r2, #1
    ecbe:	4694      	mov	ip, r2
    ecc0:	44bc      	add	ip, r7
    ecc2:	4463      	add	r3, ip
    ecc4:	0018      	movs	r0, r3
    ecc6:	2380      	movs	r3, #128	; 0x80
    ecc8:	005b      	lsls	r3, r3, #1
    ecca:	001a      	movs	r2, r3
    eccc:	2100      	movs	r1, #0
    ecce:	4b46      	ldr	r3, [pc, #280]	; (ede8 <task_3s+0x150>)
    ecd0:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    ecd2:	2396      	movs	r3, #150	; 0x96
    ecd4:	005b      	lsls	r3, r3, #1
    ecd6:	2288      	movs	r2, #136	; 0x88
    ecd8:	0052      	lsls	r2, r2, #1
    ecda:	18ba      	adds	r2, r7, r2
    ecdc:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    ecde:	4b43      	ldr	r3, [pc, #268]	; (edec <task_3s+0x154>)
    ece0:	4798      	blx	r3
    ece2:	0003      	movs	r3, r0
    ece4:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);        
    ece6:	2388      	movs	r3, #136	; 0x88
    ece8:	005b      	lsls	r3, r3, #1
    ecea:	18fb      	adds	r3, r7, r3
    ecec:	681a      	ldr	r2, [r3, #0]
    ecee:	230c      	movs	r3, #12
    ecf0:	18fb      	adds	r3, r7, r3
    ecf2:	0011      	movs	r1, r2
    ecf4:	0018      	movs	r0, r3
    ecf6:	4b3e      	ldr	r3, [pc, #248]	; (edf0 <task_3s+0x158>)
    ecf8:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    ecfa:	4b3e      	ldr	r3, [pc, #248]	; (edf4 <task_3s+0x15c>)
    ecfc:	781b      	ldrb	r3, [r3, #0]
    ecfe:	b2db      	uxtb	r3, r3
    ed00:	2b03      	cmp	r3, #3
    ed02:	d16c      	bne.n	edde <task_3s+0x146>
            gu32publishDelay = gu32MsTicks;
    ed04:	4b3c      	ldr	r3, [pc, #240]	; (edf8 <task_3s+0x160>)
    ed06:	681a      	ldr	r2, [r3, #0]
    ed08:	4b3c      	ldr	r3, [pc, #240]	; (edfc <task_3s+0x164>)
    ed0a:	601a      	str	r2, [r3, #0]
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
    ed0c:	2300      	movs	r3, #0
    ed0e:	2400      	movs	r4, #0
    ed10:	228c      	movs	r2, #140	; 0x8c
    ed12:	0052      	lsls	r2, r2, #1
    ed14:	18ba      	adds	r2, r7, r2
    ed16:	6013      	str	r3, [r2, #0]
    ed18:	6054      	str	r4, [r2, #4]
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    ed1a:	4b39      	ldr	r3, [pc, #228]	; (ee00 <task_3s+0x168>)
    ed1c:	228c      	movs	r2, #140	; 0x8c
    ed1e:	0052      	lsls	r2, r2, #1
    ed20:	18ba      	adds	r2, r7, r2
    ed22:	6810      	ldr	r0, [r2, #0]
    ed24:	6851      	ldr	r1, [r2, #4]
    ed26:	4798      	blx	r3
    ed28:	0006      	movs	r6, r0
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
    ed2a:	4c36      	ldr	r4, [pc, #216]	; (ee04 <task_3s+0x16c>)
    ed2c:	2200      	movs	r2, #0
    ed2e:	4b36      	ldr	r3, [pc, #216]	; (ee08 <task_3s+0x170>)
    ed30:	218c      	movs	r1, #140	; 0x8c
    ed32:	0049      	lsls	r1, r1, #1
    ed34:	1879      	adds	r1, r7, r1
    ed36:	6808      	ldr	r0, [r1, #0]
    ed38:	6849      	ldr	r1, [r1, #4]
    ed3a:	47a0      	blx	r4
    ed3c:	0003      	movs	r3, r0
    ed3e:	000c      	movs	r4, r1
    ed40:	0019      	movs	r1, r3
    ed42:	0022      	movs	r2, r4
    ed44:	4b2e      	ldr	r3, [pc, #184]	; (ee00 <task_3s+0x168>)
    ed46:	0008      	movs	r0, r1
    ed48:	0011      	movs	r1, r2
    ed4a:	4798      	blx	r3
    ed4c:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    ed4e:	4b2f      	ldr	r3, [pc, #188]	; (ee0c <task_3s+0x174>)
    ed50:	2164      	movs	r1, #100	; 0x64
    ed52:	0010      	movs	r0, r2
    ed54:	4798      	blx	r3
    ed56:	000b      	movs	r3, r1
    ed58:	001c      	movs	r4, r3
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
    ed5a:	238b      	movs	r3, #139	; 0x8b
    ed5c:	005b      	lsls	r3, r3, #1
    ed5e:	18fb      	adds	r3, r7, r3
    ed60:	881b      	ldrh	r3, [r3, #0]
    ed62:	2280      	movs	r2, #128	; 0x80
    ed64:	0152      	lsls	r2, r2, #5
    ed66:	1ad3      	subs	r3, r2, r3
    ed68:	2264      	movs	r2, #100	; 0x64
    ed6a:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    ed6c:	2b00      	cmp	r3, #0
    ed6e:	da02      	bge.n	ed76 <task_3s+0xde>
    ed70:	4a27      	ldr	r2, [pc, #156]	; (ee10 <task_3s+0x178>)
    ed72:	4694      	mov	ip, r2
    ed74:	4463      	add	r3, ip
    ed76:	131b      	asrs	r3, r3, #12
    ed78:	001d      	movs	r5, r3
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
                port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    ed7a:	2017      	movs	r0, #23
    ed7c:	4b25      	ldr	r3, [pc, #148]	; (ee14 <task_3s+0x17c>)
    ed7e:	4798      	blx	r3
    ed80:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    ed82:	d001      	beq.n	ed88 <task_3s+0xf0>
    ed84:	4b24      	ldr	r3, [pc, #144]	; (ee18 <task_3s+0x180>)
    ed86:	e000      	b.n	ed8a <task_3s+0xf2>
    ed88:	4b24      	ldr	r3, [pc, #144]	; (ee1c <task_3s+0x184>)
    ed8a:	4a25      	ldr	r2, [pc, #148]	; (ee20 <task_3s+0x188>)
    ed8c:	4925      	ldr	r1, [pc, #148]	; (ee24 <task_3s+0x18c>)
    ed8e:	2010      	movs	r0, #16
    ed90:	1838      	adds	r0, r7, r0
    ed92:	9302      	str	r3, [sp, #8]
    ed94:	9501      	str	r5, [sp, #4]
    ed96:	9400      	str	r4, [sp, #0]
    ed98:	0033      	movs	r3, r6
    ed9a:	4c23      	ldr	r4, [pc, #140]	; (ee28 <task_3s+0x190>)
    ed9c:	47a0      	blx	r4
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
                port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    ed9e:	2310      	movs	r3, #16
    eda0:	18fa      	adds	r2, r7, r3
    eda2:	4b22      	ldr	r3, [pc, #136]	; (ee2c <task_3s+0x194>)
    eda4:	0011      	movs	r1, r2
    eda6:	0018      	movs	r0, r3
    eda8:	4b21      	ldr	r3, [pc, #132]	; (ee30 <task_3s+0x198>)
    edaa:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    edac:	4b21      	ldr	r3, [pc, #132]	; (ee34 <task_3s+0x19c>)
    edae:	681b      	ldr	r3, [r3, #0]
    edb0:	2253      	movs	r2, #83	; 0x53
    edb2:	569b      	ldrsb	r3, [r3, r2]
    edb4:	0018      	movs	r0, r3
    edb6:	4b20      	ldr	r3, [pc, #128]	; (ee38 <task_3s+0x1a0>)
    edb8:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    edba:	4b1e      	ldr	r3, [pc, #120]	; (ee34 <task_3s+0x19c>)
    edbc:	681b      	ldr	r3, [r3, #0]
    edbe:	2252      	movs	r2, #82	; 0x52
    edc0:	2100      	movs	r1, #0
    edc2:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    edc4:	4b1b      	ldr	r3, [pc, #108]	; (ee34 <task_3s+0x19c>)
    edc6:	681b      	ldr	r3, [r3, #0]
    edc8:	2250      	movs	r2, #80	; 0x50
    edca:	2102      	movs	r1, #2
    edcc:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    edce:	4b19      	ldr	r3, [pc, #100]	; (ee34 <task_3s+0x19c>)
    edd0:	681b      	ldr	r3, [r3, #0]
    edd2:	2210      	movs	r2, #16
    edd4:	18ba      	adds	r2, r7, r2
    edd6:	4912      	ldr	r1, [pc, #72]	; (ee20 <task_3s+0x188>)
    edd8:	0018      	movs	r0, r3
    edda:	4b18      	ldr	r3, [pc, #96]	; (ee3c <task_3s+0x1a4>)
    eddc:	4798      	blx	r3
        }       
        
        thermal_3s();
    edde:	4b18      	ldr	r3, [pc, #96]	; (ee40 <task_3s+0x1a8>)
    ede0:	4798      	blx	r3
    }
    ede2:	e780      	b.n	ece6 <task_3s+0x4e>
    ede4:	fffffef0 	.word	0xfffffef0
    ede8:	00010c67 	.word	0x00010c67
    edec:	0000d635 	.word	0x0000d635
    edf0:	0000d33d 	.word	0x0000d33d
    edf4:	20003e80 	.word	0x20003e80
    edf8:	20003e84 	.word	0x20003e84
    edfc:	20003e88 	.word	0x20003e88
    ee00:	00010add 	.word	0x00010add
    ee04:	000105e9 	.word	0x000105e9
    ee08:	40590000 	.word	0x40590000
    ee0c:	000103c5 	.word	0x000103c5
    ee10:	00000fff 	.word	0x00000fff
    ee14:	0000e569 	.word	0x0000e569
    ee18:	00013924 	.word	0x00013924
    ee1c:	00013928 	.word	0x00013928
    ee20:	20000028 	.word	0x20000028
    ee24:	0001392c 	.word	0x0001392c
    ee28:	00011529 	.word	0x00011529
    ee2c:	00013970 	.word	0x00013970
    ee30:	0001121d 	.word	0x0001121d
    ee34:	20003e98 	.word	0x20003e98
    ee38:	00007825 	.word	0x00007825
    ee3c:	0000fcc5 	.word	0x0000fcc5
    ee40:	00001765 	.word	0x00001765

0000ee44 <task_1s>:
}

static void task_1s(void *args)
{
    ee44:	b580      	push	{r7, lr}
    ee46:	b086      	sub	sp, #24
    ee48:	af00      	add	r7, sp, #0
    ee4a:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    ee4c:	4b47      	ldr	r3, [pc, #284]	; (ef6c <task_1s+0x128>)
    ee4e:	4798      	blx	r3
    ee50:	0003      	movs	r3, r0
    ee52:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(500);
    ee54:	2332      	movs	r3, #50	; 0x32
    ee56:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    ee58:	697a      	ldr	r2, [r7, #20]
    ee5a:	230c      	movs	r3, #12
    ee5c:	18fb      	adds	r3, r7, r3
    ee5e:	0011      	movs	r1, r2
    ee60:	0018      	movs	r0, r3
    ee62:	4b43      	ldr	r3, [pc, #268]	; (ef70 <task_1s+0x12c>)
    ee64:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    ee66:	4b43      	ldr	r3, [pc, #268]	; (ef74 <task_1s+0x130>)
    ee68:	781b      	ldrb	r3, [r3, #0]
    ee6a:	b2db      	uxtb	r3, r3
    ee6c:	2b03      	cmp	r3, #3
    ee6e:	d000      	beq.n	ee72 <task_1s+0x2e>
    ee70:	e078      	b.n	ef64 <task_1s+0x120>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    ee72:	4b41      	ldr	r3, [pc, #260]	; (ef78 <task_1s+0x134>)
    ee74:	681b      	ldr	r3, [r3, #0]
    ee76:	2252      	movs	r2, #82	; 0x52
    ee78:	5c9b      	ldrb	r3, [r3, r2]
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d000      	beq.n	ee80 <task_1s+0x3c>
    ee7e:	e071      	b.n	ef64 <task_1s+0x120>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    ee80:	4b3d      	ldr	r3, [pc, #244]	; (ef78 <task_1s+0x134>)
    ee82:	681b      	ldr	r3, [r3, #0]
    ee84:	2251      	movs	r2, #81	; 0x51
    ee86:	5c9b      	ldrb	r3, [r3, r2]
    ee88:	2b00      	cmp	r3, #0
    ee8a:	d00b      	beq.n	eea4 <task_1s+0x60>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    ee8c:	4b3a      	ldr	r3, [pc, #232]	; (ef78 <task_1s+0x134>)
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	2251      	movs	r2, #81	; 0x51
    ee92:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    ee94:	2b02      	cmp	r3, #2
    ee96:	d110      	bne.n	eeba <task_1s+0x76>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    ee98:	4b37      	ldr	r3, [pc, #220]	; (ef78 <task_1s+0x134>)
    ee9a:	681b      	ldr	r3, [r3, #0]
    ee9c:	2250      	movs	r2, #80	; 0x50
    ee9e:	5c9b      	ldrb	r3, [r3, r2]
    eea0:	2b00      	cmp	r3, #0
    eea2:	d10a      	bne.n	eeba <task_1s+0x76>
                    printf("main: subscribe event, PNR_OK\r\n");
    eea4:	4b35      	ldr	r3, [pc, #212]	; (ef7c <task_1s+0x138>)
    eea6:	0018      	movs	r0, r3
    eea8:	4b35      	ldr	r3, [pc, #212]	; (ef80 <task_1s+0x13c>)
    eeaa:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    eeac:	4b32      	ldr	r3, [pc, #200]	; (ef78 <task_1s+0x134>)
    eeae:	681b      	ldr	r3, [r3, #0]
    eeb0:	4a34      	ldr	r2, [pc, #208]	; (ef84 <task_1s+0x140>)
    eeb2:	0011      	movs	r1, r2
    eeb4:	0018      	movs	r0, r3
    eeb6:	4b34      	ldr	r3, [pc, #208]	; (ef88 <task_1s+0x144>)
    eeb8:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    eeba:	4b2f      	ldr	r3, [pc, #188]	; (ef78 <task_1s+0x134>)
    eebc:	681b      	ldr	r3, [r3, #0]
    eebe:	0018      	movs	r0, r3
    eec0:	4b32      	ldr	r3, [pc, #200]	; (ef8c <task_1s+0x148>)
    eec2:	4798      	blx	r3
    eec4:	0003      	movs	r3, r0
    eec6:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    eec8:	693b      	ldr	r3, [r7, #16]
    eeca:	2b00      	cmp	r3, #0
    eecc:	d031      	beq.n	ef32 <task_1s+0xee>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    eece:	693b      	ldr	r3, [r7, #16]
    eed0:	3302      	adds	r3, #2
    eed2:	492f      	ldr	r1, [pc, #188]	; (ef90 <task_1s+0x14c>)
    eed4:	2203      	movs	r2, #3
    eed6:	0018      	movs	r0, r3
    eed8:	4b2e      	ldr	r3, [pc, #184]	; (ef94 <task_1s+0x150>)
    eeda:	4798      	blx	r3
    eedc:	1e03      	subs	r3, r0, #0
    eede:	d121      	bne.n	ef24 <task_1s+0xe0>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    eee0:	693a      	ldr	r2, [r7, #16]
    eee2:	4b2d      	ldr	r3, [pc, #180]	; (ef98 <task_1s+0x154>)
    eee4:	0011      	movs	r1, r2
    eee6:	0018      	movs	r0, r3
    eee8:	4b2c      	ldr	r3, [pc, #176]	; (ef9c <task_1s+0x158>)
    eeea:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    eeec:	693b      	ldr	r3, [r7, #16]
    eeee:	3308      	adds	r3, #8
    eef0:	492b      	ldr	r1, [pc, #172]	; (efa0 <task_1s+0x15c>)
    eef2:	2202      	movs	r2, #2
    eef4:	0018      	movs	r0, r3
    eef6:	4b27      	ldr	r3, [pc, #156]	; (ef94 <task_1s+0x150>)
    eef8:	4798      	blx	r3
    eefa:	1e03      	subs	r3, r0, #0
    eefc:	d104      	bne.n	ef08 <task_1s+0xc4>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    eefe:	2100      	movs	r1, #0
    ef00:	2017      	movs	r0, #23
    ef02:	4b28      	ldr	r3, [pc, #160]	; (efa4 <task_1s+0x160>)
    ef04:	4798      	blx	r3
    ef06:	e7d8      	b.n	eeba <task_1s+0x76>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    ef08:	693b      	ldr	r3, [r7, #16]
    ef0a:	3308      	adds	r3, #8
    ef0c:	4926      	ldr	r1, [pc, #152]	; (efa8 <task_1s+0x164>)
    ef0e:	2203      	movs	r2, #3
    ef10:	0018      	movs	r0, r3
    ef12:	4b20      	ldr	r3, [pc, #128]	; (ef94 <task_1s+0x150>)
    ef14:	4798      	blx	r3
    ef16:	1e03      	subs	r3, r0, #0
    ef18:	d1cf      	bne.n	eeba <task_1s+0x76>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    ef1a:	2101      	movs	r1, #1
    ef1c:	2017      	movs	r0, #23
    ef1e:	4b21      	ldr	r3, [pc, #132]	; (efa4 <task_1s+0x160>)
    ef20:	4798      	blx	r3
    ef22:	e7ca      	b.n	eeba <task_1s+0x76>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    ef24:	693a      	ldr	r2, [r7, #16]
    ef26:	4b21      	ldr	r3, [pc, #132]	; (efac <task_1s+0x168>)
    ef28:	0011      	movs	r1, r2
    ef2a:	0018      	movs	r0, r3
    ef2c:	4b1b      	ldr	r3, [pc, #108]	; (ef9c <task_1s+0x158>)
    ef2e:	4798      	blx	r3
                    }
                }
    ef30:	e7c3      	b.n	eeba <task_1s+0x76>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    ef32:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    ef34:	4b1e      	ldr	r3, [pc, #120]	; (efb0 <task_1s+0x16c>)
    ef36:	681a      	ldr	r2, [r3, #0]
    ef38:	4b1e      	ldr	r3, [pc, #120]	; (efb4 <task_1s+0x170>)
    ef3a:	681b      	ldr	r3, [r3, #0]
    ef3c:	1ad2      	subs	r2, r2, r3
    ef3e:	23fa      	movs	r3, #250	; 0xfa
    ef40:	009b      	lsls	r3, r3, #2
    ef42:	429a      	cmp	r2, r3
    ef44:	d90e      	bls.n	ef64 <task_1s+0x120>
                    gu32subscribeDelay = gu32MsTicks;
    ef46:	4b1a      	ldr	r3, [pc, #104]	; (efb0 <task_1s+0x16c>)
    ef48:	681a      	ldr	r2, [r3, #0]
    ef4a:	4b1a      	ldr	r3, [pc, #104]	; (efb4 <task_1s+0x170>)
    ef4c:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    ef4e:	4b1a      	ldr	r3, [pc, #104]	; (efb8 <task_1s+0x174>)
    ef50:	0018      	movs	r0, r3
    ef52:	4b0b      	ldr	r3, [pc, #44]	; (ef80 <task_1s+0x13c>)
    ef54:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    ef56:	4b08      	ldr	r3, [pc, #32]	; (ef78 <task_1s+0x134>)
    ef58:	681b      	ldr	r3, [r3, #0]
    ef5a:	4a0a      	ldr	r2, [pc, #40]	; (ef84 <task_1s+0x140>)
    ef5c:	0011      	movs	r1, r2
    ef5e:	0018      	movs	r0, r3
    ef60:	4b09      	ldr	r3, [pc, #36]	; (ef88 <task_1s+0x144>)
    ef62:	4798      	blx	r3
                }
            }
        }    
        
       //display_led_test_1Hz();
       display_update_1Hz();
    ef64:	4b15      	ldr	r3, [pc, #84]	; (efbc <task_1s+0x178>)
    ef66:	4798      	blx	r3
    }
    ef68:	e776      	b.n	ee58 <task_1s+0x14>
    ef6a:	46c0      	nop			; (mov r8, r8)
    ef6c:	0000d635 	.word	0x0000d635
    ef70:	0000d33d 	.word	0x0000d33d
    ef74:	20003e80 	.word	0x20003e80
    ef78:	20003e98 	.word	0x20003e98
    ef7c:	0001398c 	.word	0x0001398c
    ef80:	0001133d 	.word	0x0001133d
    ef84:	20000028 	.word	0x20000028
    ef88:	0000febd 	.word	0x0000febd
    ef8c:	00010039 	.word	0x00010039
    ef90:	000139ac 	.word	0x000139ac
    ef94:	0001159f 	.word	0x0001159f
    ef98:	000139b0 	.word	0x000139b0
    ef9c:	0001121d 	.word	0x0001121d
    efa0:	000139dc 	.word	0x000139dc
    efa4:	0000e5ad 	.word	0x0000e5ad
    efa8:	000139e0 	.word	0x000139e0
    efac:	000139e4 	.word	0x000139e4
    efb0:	20003e84 	.word	0x20003e84
    efb4:	20003e8c 	.word	0x20003e8c
    efb8:	00013a04 	.word	0x00013a04
    efbc:	00000e61 	.word	0x00000e61

0000efc0 <task_33Hz>:

}

#include "tm1640.h"
static void task_33Hz(void *args)
{
    efc0:	b580      	push	{r7, lr}
    efc2:	b084      	sub	sp, #16
    efc4:	af00      	add	r7, sp, #0
    efc6:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    // Turn on the display
    tm1640_display_on(1);
    efc8:	2001      	movs	r0, #1
    efca:	4b09      	ldr	r3, [pc, #36]	; (eff0 <task_33Hz+0x30>)
    efcc:	4798      	blx	r3

    lastTimer = xTaskGetTickCount();
    efce:	4b09      	ldr	r3, [pc, #36]	; (eff4 <task_33Hz+0x34>)
    efd0:	4798      	blx	r3
    efd2:	0003      	movs	r3, r0
    efd4:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(MAIN_33HZ_TASK_INTERVAL);        
    efd6:	2303      	movs	r3, #3
    efd8:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    efda:	68fa      	ldr	r2, [r7, #12]
    efdc:	2308      	movs	r3, #8
    efde:	18fb      	adds	r3, r7, r3
    efe0:	0011      	movs	r1, r2
    efe2:	0018      	movs	r0, r3
    efe4:	4b04      	ldr	r3, [pc, #16]	; (eff8 <task_33Hz+0x38>)
    efe6:	4798      	blx	r3

        display_update_33Hz();
    efe8:	4b04      	ldr	r3, [pc, #16]	; (effc <task_33Hz+0x3c>)
    efea:	4798      	blx	r3

    }
    efec:	e7f5      	b.n	efda <task_33Hz+0x1a>
    efee:	46c0      	nop			; (mov r8, r8)
    eff0:	00001e6d 	.word	0x00001e6d
    eff4:	0000d635 	.word	0x0000d635
    eff8:	0000d33d 	.word	0x0000d33d
    effc:	00000fc9 	.word	0x00000fc9

0000f000 <task_Buzzer>:
}

static void task_Buzzer(void *args)
{
    f000:	b590      	push	{r4, r7, lr}
    f002:	b097      	sub	sp, #92	; 0x5c
    f004:	af00      	add	r7, sp, #0
    f006:	6078      	str	r0, [r7, #4]
    struct tc_module buzz_module;
    struct tc_config buzz_config;    

    tc_get_config_defaults(&buzz_config);
    f008:	2308      	movs	r3, #8
    f00a:	18fb      	adds	r3, r7, r3
    f00c:	0018      	movs	r0, r3
    f00e:	4b24      	ldr	r3, [pc, #144]	; (f0a0 <task_Buzzer+0xa0>)
    f010:	4798      	blx	r3
    buzz_config.clock_source = GCLK_GENERATOR_5; // ~500kHz
    f012:	2308      	movs	r3, #8
    f014:	18fb      	adds	r3, r7, r3
    f016:	2205      	movs	r2, #5
    f018:	701a      	strb	r2, [r3, #0]
    buzz_config.run_in_standby = true;
    f01a:	2308      	movs	r3, #8
    f01c:	18fb      	adds	r3, r7, r3
    f01e:	2201      	movs	r2, #1
    f020:	705a      	strb	r2, [r3, #1]
    buzz_config.counter_size = TC_COUNTER_SIZE_8BIT;
    f022:	2308      	movs	r3, #8
    f024:	18fb      	adds	r3, r7, r3
    f026:	2204      	movs	r2, #4
    f028:	709a      	strb	r2, [r3, #2]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = true;
    f02a:	2308      	movs	r3, #8
    f02c:	18fb      	adds	r3, r7, r3
    f02e:	2201      	movs	r2, #1
    f030:	771a      	strb	r2, [r3, #28]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = (PINMUX_PB11E_TC5_WO1) >> 16;
    f032:	2308      	movs	r3, #8
    f034:	18fb      	adds	r3, r7, r3
    f036:	222b      	movs	r2, #43	; 0x2b
    f038:	621a      	str	r2, [r3, #32]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = PINMUX_PB11E_TC5_WO1;
    f03a:	2308      	movs	r3, #8
    f03c:	18fb      	adds	r3, r7, r3
    f03e:	4a19      	ldr	r2, [pc, #100]	; (f0a4 <task_Buzzer+0xa4>)
    f040:	625a      	str	r2, [r3, #36]	; 0x24
    buzz_config.counter_8_bit.period = (500000 / BUZZER_FREQUENCY) / 2;
    f042:	2308      	movs	r3, #8
    f044:	18fb      	adds	r3, r7, r3
    f046:	2229      	movs	r2, #41	; 0x29
    f048:	2153      	movs	r1, #83	; 0x53
    f04a:	5499      	strb	r1, [r3, r2]
    buzz_config.counter_8_bit.value = 0;
    f04c:	2308      	movs	r3, #8
    f04e:	18fb      	adds	r3, r7, r3
    f050:	2228      	movs	r2, #40	; 0x28
    f052:	2100      	movs	r1, #0
    f054:	5499      	strb	r1, [r3, r2]

    tc_init(&buzz_module, TC5, &buzz_config);    
    f056:	2308      	movs	r3, #8
    f058:	18fa      	adds	r2, r7, r3
    f05a:	4913      	ldr	r1, [pc, #76]	; (f0a8 <task_Buzzer+0xa8>)
    f05c:	233c      	movs	r3, #60	; 0x3c
    f05e:	18fb      	adds	r3, r7, r3
    f060:	0018      	movs	r0, r3
    f062:	4b12      	ldr	r3, [pc, #72]	; (f0ac <task_Buzzer+0xac>)
    f064:	4798      	blx	r3

    while(1) {
        xSemaphoreTake(buzzer_sem, portMAX_DELAY);
    f066:	4b12      	ldr	r3, [pc, #72]	; (f0b0 <task_Buzzer+0xb0>)
    f068:	6818      	ldr	r0, [r3, #0]
    f06a:	2301      	movs	r3, #1
    f06c:	425a      	negs	r2, r3
    f06e:	2300      	movs	r3, #0
    f070:	2100      	movs	r1, #0
    f072:	4c10      	ldr	r4, [pc, #64]	; (f0b4 <task_Buzzer+0xb4>)
    f074:	47a0      	blx	r4

        // When another task gives up the semaphore, the buzzer will run 
        // for the set delay time.
        tc_set_count_value(&buzz_module, 0);
    f076:	233c      	movs	r3, #60	; 0x3c
    f078:	18fb      	adds	r3, r7, r3
    f07a:	2100      	movs	r1, #0
    f07c:	0018      	movs	r0, r3
    f07e:	4b0e      	ldr	r3, [pc, #56]	; (f0b8 <task_Buzzer+0xb8>)
    f080:	4798      	blx	r3
        tc_enable(&buzz_module);        
    f082:	233c      	movs	r3, #60	; 0x3c
    f084:	18fb      	adds	r3, r7, r3
    f086:	0018      	movs	r0, r3
    f088:	4b0c      	ldr	r3, [pc, #48]	; (f0bc <task_Buzzer+0xbc>)
    f08a:	4798      	blx	r3
        vTaskDelay(pdMS_TO_TICKS(BUZZER_ON_TIME));
    f08c:	2019      	movs	r0, #25
    f08e:	4b0c      	ldr	r3, [pc, #48]	; (f0c0 <task_Buzzer+0xc0>)
    f090:	4798      	blx	r3
        tc_disable(&buzz_module);
    f092:	233c      	movs	r3, #60	; 0x3c
    f094:	18fb      	adds	r3, r7, r3
    f096:	0018      	movs	r0, r3
    f098:	4b0a      	ldr	r3, [pc, #40]	; (f0c4 <task_Buzzer+0xc4>)
    f09a:	4798      	blx	r3
    }
    f09c:	e7e3      	b.n	f066 <task_Buzzer+0x66>
    f09e:	46c0      	nop			; (mov r8, r8)
    f0a0:	0000e889 	.word	0x0000e889
    f0a4:	002b0004 	.word	0x002b0004
    f0a8:	42003400 	.word	0x42003400
    f0ac:	00000321 	.word	0x00000321
    f0b0:	20004620 	.word	0x20004620
    f0b4:	0000cac9 	.word	0x0000cac9
    f0b8:	0000077d 	.word	0x0000077d
    f0bc:	0000e911 	.word	0x0000e911
    f0c0:	0000d405 	.word	0x0000d405
    f0c4:	0000e949 	.word	0x0000e949

0000f0c8 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{      
    f0c8:	b580      	push	{r7, lr}
    f0ca:	af00      	add	r7, sp, #0
   m2m_wifi_handle_events(NULL);   
    f0cc:	2000      	movs	r0, #0
    f0ce:	4b03      	ldr	r3, [pc, #12]	; (f0dc <vApplicationIdleHook+0x14>)
    f0d0:	4798      	blx	r3
   display_idle();
    f0d2:	4b03      	ldr	r3, [pc, #12]	; (f0e0 <vApplicationIdleHook+0x18>)
    f0d4:	4798      	blx	r3
}
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	46bd      	mov	sp, r7
    f0da:	bd80      	pop	{r7, pc}
    f0dc:	00004435 	.word	0x00004435
    f0e0:	00000e01 	.word	0x00000e01

0000f0e4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    f0e4:	b580      	push	{r7, lr}
    f0e6:	b082      	sub	sp, #8
    f0e8:	af00      	add	r7, sp, #0
    f0ea:	6078      	str	r0, [r7, #4]
    f0ec:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    f0ee:	683a      	ldr	r2, [r7, #0]
    f0f0:	4b02      	ldr	r3, [pc, #8]	; (f0fc <vApplicationStackOverflowHook+0x18>)
    f0f2:	0011      	movs	r1, r2
    f0f4:	0018      	movs	r0, r3
    f0f6:	4b02      	ldr	r3, [pc, #8]	; (f100 <vApplicationStackOverflowHook+0x1c>)
    f0f8:	4798      	blx	r3
    while (1) {}
    f0fa:	e7fe      	b.n	f0fa <vApplicationStackOverflowHook+0x16>
    f0fc:	00013a28 	.word	0x00013a28
    f100:	0001121d 	.word	0x0001121d

0000f104 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook(void);
void vApplicationMallocFailedHook(void)
{
    f104:	b580      	push	{r7, lr}
    f106:	af00      	add	r7, sp, #0
    printf("Malloc failed!\n\r");
    f108:	4b02      	ldr	r3, [pc, #8]	; (f114 <vApplicationMallocFailedHook+0x10>)
    f10a:	0018      	movs	r0, r3
    f10c:	4b02      	ldr	r3, [pc, #8]	; (f118 <vApplicationMallocFailedHook+0x14>)
    f10e:	4798      	blx	r3
    while(1) {}
    f110:	e7fe      	b.n	f110 <vApplicationMallocFailedHook+0xc>
    f112:	46c0      	nop			; (mov r8, r8)
    f114:	00013a40 	.word	0x00013a40
    f118:	0001121d 	.word	0x0001121d

0000f11c <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    f11c:	b590      	push	{r4, r7, lr}
    f11e:	b08d      	sub	sp, #52	; 0x34
    f120:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    f122:	4b5c      	ldr	r3, [pc, #368]	; (f294 <main+0x178>)
    f124:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    f126:	4b5c      	ldr	r3, [pc, #368]	; (f298 <main+0x17c>)
    f128:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();	
    f12a:	4b5c      	ldr	r3, [pc, #368]	; (f29c <main+0x180>)
    f12c:	4798      	blx	r3

    /* Initialize the display */
    display_init();	
    f12e:	4b5c      	ldr	r3, [pc, #368]	; (f2a0 <main+0x184>)
    f130:	4798      	blx	r3

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    f132:	4b5c      	ldr	r3, [pc, #368]	; (f2a4 <main+0x188>)
    f134:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    f136:	230c      	movs	r3, #12
    f138:	18fb      	adds	r3, r7, r3
    f13a:	2218      	movs	r2, #24
    f13c:	2100      	movs	r1, #0
    f13e:	0018      	movs	r0, r3
    f140:	4b59      	ldr	r3, [pc, #356]	; (f2a8 <main+0x18c>)
    f142:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    f144:	230c      	movs	r3, #12
    f146:	18fb      	adds	r3, r7, r3
    f148:	4a58      	ldr	r2, [pc, #352]	; (f2ac <main+0x190>)
    f14a:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    f14c:	4b58      	ldr	r3, [pc, #352]	; (f2b0 <main+0x194>)
    f14e:	681a      	ldr	r2, [r3, #0]
    f150:	4b58      	ldr	r3, [pc, #352]	; (f2b4 <main+0x198>)
    f152:	601a      	str	r2, [r3, #0]
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	s8InitStatus = m2m_wifi_init(&wifiInitParam);
    f154:	2327      	movs	r3, #39	; 0x27
    f156:	18fc      	adds	r4, r7, r3
    f158:	230c      	movs	r3, #12
    f15a:	18fb      	adds	r3, r7, r3
    f15c:	0018      	movs	r0, r3
    f15e:	4b56      	ldr	r3, [pc, #344]	; (f2b8 <main+0x19c>)
    f160:	4798      	blx	r3
    f162:	0003      	movs	r3, r0
    f164:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != s8InitStatus) {
    f166:	2327      	movs	r3, #39	; 0x27
    f168:	18fb      	adds	r3, r7, r3
    f16a:	781b      	ldrb	r3, [r3, #0]
    f16c:	b25b      	sxtb	r3, r3
    f16e:	2b00      	cmp	r3, #0
    f170:	d004      	beq.n	f17c <main+0x60>
		printf("main: m2m_wifi_init call error!\r\n");
    f172:	4b52      	ldr	r3, [pc, #328]	; (f2bc <main+0x1a0>)
    f174:	0018      	movs	r0, r3
    f176:	4b52      	ldr	r3, [pc, #328]	; (f2c0 <main+0x1a4>)
    f178:	4798      	blx	r3
		while (1) {
		}
    f17a:	e7fe      	b.n	f17a <main+0x5e>
	}

	/* Initialize Socket API. */
	socketInit();
    f17c:	4b51      	ldr	r3, [pc, #324]	; (f2c4 <main+0x1a8>)
    f17e:	4798      	blx	r3
	registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
    f180:	4a51      	ldr	r2, [pc, #324]	; (f2c8 <main+0x1ac>)
    f182:	4b52      	ldr	r3, [pc, #328]	; (f2cc <main+0x1b0>)
    f184:	0011      	movs	r1, r2
    f186:	0018      	movs	r0, r3
    f188:	4b51      	ldr	r3, [pc, #324]	; (f2d0 <main+0x1b4>)
    f18a:	4798      	blx	r3

	/* Read MAC address to customize device name and AP name if enabled. */
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    f18c:	1cfa      	adds	r2, r7, #3
    f18e:	1d3b      	adds	r3, r7, #4
    f190:	0011      	movs	r1, r2
    f192:	0018      	movs	r0, r3
    f194:	4b4f      	ldr	r3, [pc, #316]	; (f2d4 <main+0x1b8>)
    f196:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    f198:	1cfb      	adds	r3, r7, #3
    f19a:	781b      	ldrb	r3, [r3, #0]
    f19c:	2b00      	cmp	r3, #0
    f19e:	d108      	bne.n	f1b2 <main+0x96>
		printf("main: MAC address fuse bit has not been configured!\r\n");
    f1a0:	4b4d      	ldr	r3, [pc, #308]	; (f2d8 <main+0x1bc>)
    f1a2:	0018      	movs	r0, r3
    f1a4:	4b46      	ldr	r3, [pc, #280]	; (f2c0 <main+0x1a4>)
    f1a6:	4798      	blx	r3
		printf("main: Use m2m_wifi_set_mac_address() API to set MAC address via software.\r\n");
    f1a8:	4b4c      	ldr	r3, [pc, #304]	; (f2dc <main+0x1c0>)
    f1aa:	0018      	movs	r0, r3
    f1ac:	4b44      	ldr	r3, [pc, #272]	; (f2c0 <main+0x1a4>)
    f1ae:	4798      	blx	r3
		while (1) {
		}
    f1b0:	e7fe      	b.n	f1b0 <main+0x94>
	}
	m2m_wifi_get_mac_address(mac_addr);
    f1b2:	1d3b      	adds	r3, r7, #4
    f1b4:	0018      	movs	r0, r3
    f1b6:	4b4a      	ldr	r3, [pc, #296]	; (f2e0 <main+0x1c4>)
    f1b8:	4798      	blx	r3
	set_dev_name_to_mac((uint8 *)PubNubChannel, mac_addr);
    f1ba:	1d3a      	adds	r2, r7, #4
    f1bc:	4b49      	ldr	r3, [pc, #292]	; (f2e4 <main+0x1c8>)
    f1be:	0011      	movs	r1, r2
    f1c0:	0018      	movs	r0, r3
    f1c2:	4b49      	ldr	r3, [pc, #292]	; (f2e8 <main+0x1cc>)
    f1c4:	4798      	blx	r3
	printf("\r\n");
    f1c6:	4b49      	ldr	r3, [pc, #292]	; (f2ec <main+0x1d0>)
    f1c8:	0018      	movs	r0, r3
    f1ca:	4b3d      	ldr	r3, [pc, #244]	; (f2c0 <main+0x1a4>)
    f1cc:	4798      	blx	r3

	/* Initialize PubNub API. */
	printf("main: PubNub configured with following settings:\r\n");
    f1ce:	4b48      	ldr	r3, [pc, #288]	; (f2f0 <main+0x1d4>)
    f1d0:	0018      	movs	r0, r3
    f1d2:	4b3b      	ldr	r3, [pc, #236]	; (f2c0 <main+0x1a4>)
    f1d4:	4798      	blx	r3
	printf("main:  - Publish key: \"%s\", Subscribe key: \"%s\", Channel: \"%s\".\r\n\r\n",
    f1d6:	4b43      	ldr	r3, [pc, #268]	; (f2e4 <main+0x1c8>)
    f1d8:	4a46      	ldr	r2, [pc, #280]	; (f2f4 <main+0x1d8>)
    f1da:	4947      	ldr	r1, [pc, #284]	; (f2f8 <main+0x1dc>)
    f1dc:	4847      	ldr	r0, [pc, #284]	; (f2fc <main+0x1e0>)
    f1de:	4c48      	ldr	r4, [pc, #288]	; (f300 <main+0x1e4>)
    f1e0:	47a0      	blx	r4
	PubNubPublishKey, PubNubSubscribeKey, PubNubChannel);
	pPubNubCfg = pubnub_get_ctx(0);
    f1e2:	2000      	movs	r0, #0
    f1e4:	4b47      	ldr	r3, [pc, #284]	; (f304 <main+0x1e8>)
    f1e6:	4798      	blx	r3
    f1e8:	0002      	movs	r2, r0
    f1ea:	4b47      	ldr	r3, [pc, #284]	; (f308 <main+0x1ec>)
    f1ec:	601a      	str	r2, [r3, #0]
	pubnub_init(pPubNubCfg, PubNubPublishKey, PubNubSubscribeKey);
    f1ee:	4b46      	ldr	r3, [pc, #280]	; (f308 <main+0x1ec>)
    f1f0:	681b      	ldr	r3, [r3, #0]
    f1f2:	4a40      	ldr	r2, [pc, #256]	; (f2f4 <main+0x1d8>)
    f1f4:	4940      	ldr	r1, [pc, #256]	; (f2f8 <main+0x1dc>)
    f1f6:	0018      	movs	r0, r3
    f1f8:	4b44      	ldr	r3, [pc, #272]	; (f30c <main+0x1f0>)
    f1fa:	4798      	blx	r3

	/* Connect to AP using Wi-Fi settings from main.h. */
	printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
    f1fc:	4b44      	ldr	r3, [pc, #272]	; (f310 <main+0x1f4>)
    f1fe:	0018      	movs	r0, r3
    f200:	4b2f      	ldr	r3, [pc, #188]	; (f2c0 <main+0x1a4>)
    f202:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    f204:	4a43      	ldr	r2, [pc, #268]	; (f314 <main+0x1f8>)
    f206:	4844      	ldr	r0, [pc, #272]	; (f318 <main+0x1fc>)
    f208:	23ff      	movs	r3, #255	; 0xff
    f20a:	9300      	str	r3, [sp, #0]
    f20c:	0013      	movs	r3, r2
    f20e:	2202      	movs	r2, #2
    f210:	211b      	movs	r1, #27
    f212:	4c42      	ldr	r4, [pc, #264]	; (f31c <main+0x200>)
    f214:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);    

    thermal_init();
    f216:	4b42      	ldr	r3, [pc, #264]	; (f320 <main+0x204>)
    f218:	4798      	blx	r3

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE, 0, TASK_3S_PRIORITY, NULL);
    f21a:	2380      	movs	r3, #128	; 0x80
    f21c:	009a      	lsls	r2, r3, #2
    f21e:	4941      	ldr	r1, [pc, #260]	; (f324 <main+0x208>)
    f220:	4841      	ldr	r0, [pc, #260]	; (f328 <main+0x20c>)
    f222:	2300      	movs	r3, #0
    f224:	9301      	str	r3, [sp, #4]
    f226:	2301      	movs	r3, #1
    f228:	9300      	str	r3, [sp, #0]
    f22a:	2300      	movs	r3, #0
    f22c:	4c3f      	ldr	r4, [pc, #252]	; (f32c <main+0x210>)
    f22e:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    f230:	2380      	movs	r3, #128	; 0x80
    f232:	009a      	lsls	r2, r3, #2
    f234:	493e      	ldr	r1, [pc, #248]	; (f330 <main+0x214>)
    f236:	483f      	ldr	r0, [pc, #252]	; (f334 <main+0x218>)
    f238:	2300      	movs	r3, #0
    f23a:	9301      	str	r3, [sp, #4]
    f23c:	2301      	movs	r3, #1
    f23e:	9300      	str	r3, [sp, #0]
    f240:	2300      	movs	r3, #0
    f242:	4c3a      	ldr	r4, [pc, #232]	; (f32c <main+0x210>)
    f244:	47a0      	blx	r4
    xTaskCreate(task_33Hz, "task_33Hz", configMINIMAL_STACK_SIZE, 0, TASK_50HZ_PRIORITY, NULL); 
    f246:	2380      	movs	r3, #128	; 0x80
    f248:	009a      	lsls	r2, r3, #2
    f24a:	493b      	ldr	r1, [pc, #236]	; (f338 <main+0x21c>)
    f24c:	483b      	ldr	r0, [pc, #236]	; (f33c <main+0x220>)
    f24e:	2300      	movs	r3, #0
    f250:	9301      	str	r3, [sp, #4]
    f252:	2301      	movs	r3, #1
    f254:	9300      	str	r3, [sp, #0]
    f256:	2300      	movs	r3, #0
    f258:	4c34      	ldr	r4, [pc, #208]	; (f32c <main+0x210>)
    f25a:	47a0      	blx	r4
    xTaskCreate(task_Buzzer, "task_Buzzer", 100, 0, tskIDLE_PRIORITY, NULL);
    f25c:	4938      	ldr	r1, [pc, #224]	; (f340 <main+0x224>)
    f25e:	4839      	ldr	r0, [pc, #228]	; (f344 <main+0x228>)
    f260:	2300      	movs	r3, #0
    f262:	9301      	str	r3, [sp, #4]
    f264:	2300      	movs	r3, #0
    f266:	9300      	str	r3, [sp, #0]
    f268:	2300      	movs	r3, #0
    f26a:	2264      	movs	r2, #100	; 0x64
    f26c:	4c2f      	ldr	r4, [pc, #188]	; (f32c <main+0x210>)
    f26e:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    f270:	2001      	movs	r0, #1
    f272:	4b35      	ldr	r3, [pc, #212]	; (f348 <main+0x22c>)
    f274:	4798      	blx	r3
    f276:	0002      	movs	r2, r0
    f278:	4b34      	ldr	r3, [pc, #208]	; (f34c <main+0x230>)
    f27a:	601a      	str	r2, [r3, #0]
    buzzer_sem = xSemaphoreCreateBinary();
    f27c:	2203      	movs	r2, #3
    f27e:	2100      	movs	r1, #0
    f280:	2001      	movs	r0, #1
    f282:	4b33      	ldr	r3, [pc, #204]	; (f350 <main+0x234>)
    f284:	4798      	blx	r3
    f286:	0002      	movs	r2, r0
    f288:	4b32      	ldr	r3, [pc, #200]	; (f354 <main+0x238>)
    f28a:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    f28c:	4b32      	ldr	r3, [pc, #200]	; (f358 <main+0x23c>)
    f28e:	4798      	blx	r3

    while(1) {}
    f290:	e7fe      	b.n	f290 <main+0x174>
    f292:	46c0      	nop			; (mov r8, r8)
    f294:	0000be05 	.word	0x0000be05
    f298:	0000eaf5 	.word	0x0000eaf5
    f29c:	00000115 	.word	0x00000115
    f2a0:	00000da1 	.word	0x00000da1
    f2a4:	000026f9 	.word	0x000026f9
    f2a8:	00010c67 	.word	0x00010c67
    f2ac:	0000ea1d 	.word	0x0000ea1d
    f2b0:	20003e84 	.word	0x20003e84
    f2b4:	20003e90 	.word	0x20003e90
    f2b8:	000042a9 	.word	0x000042a9
    f2bc:	00013a54 	.word	0x00013a54
    f2c0:	0001133d 	.word	0x0001133d
    f2c4:	0000725d 	.word	0x0000725d
    f2c8:	0000e9c1 	.word	0x0000e9c1
    f2cc:	0000e98d 	.word	0x0000e98d
    f2d0:	000072ad 	.word	0x000072ad
    f2d4:	0000490d 	.word	0x0000490d
    f2d8:	00013a78 	.word	0x00013a78
    f2dc:	00013ab0 	.word	0x00013ab0
    f2e0:	00004981 	.word	0x00004981
    f2e4:	20000028 	.word	0x20000028
    f2e8:	0000eb65 	.word	0x0000eb65
    f2ec:	00013afc 	.word	0x00013afc
    f2f0:	00013b00 	.word	0x00013b00
    f2f4:	00013804 	.word	0x00013804
    f2f8:	000137fc 	.word	0x000137fc
    f2fc:	00013b34 	.word	0x00013b34
    f300:	0001121d 	.word	0x0001121d
    f304:	0000fbf1 	.word	0x0000fbf1
    f308:	20003e98 	.word	0x20003e98
    f30c:	0000fc41 	.word	0x0000fc41
    f310:	00013b78 	.word	0x00013b78
    f314:	000138c0 	.word	0x000138c0
    f318:	000138cc 	.word	0x000138cc
    f31c:	00004451 	.word	0x00004451
    f320:	00001609 	.word	0x00001609
    f324:	00013bb8 	.word	0x00013bb8
    f328:	0000ec99 	.word	0x0000ec99
    f32c:	0000d0c5 	.word	0x0000d0c5
    f330:	00013bc0 	.word	0x00013bc0
    f334:	0000ee45 	.word	0x0000ee45
    f338:	00013bc8 	.word	0x00013bc8
    f33c:	0000efc1 	.word	0x0000efc1
    f340:	00013bd4 	.word	0x00013bd4
    f344:	0000f001 	.word	0x0000f001
    f348:	0000c789 	.word	0x0000c789
    f34c:	20004604 	.word	0x20004604
    f350:	0000c695 	.word	0x0000c695
    f354:	20004620 	.word	0x20004620
    f358:	0000d461 	.word	0x0000d461

0000f35c <HardFault_Handler>:

	return 0;
}

void HardFault_Handler(void)
{
    f35c:	b580      	push	{r7, lr}
    f35e:	af00      	add	r7, sp, #0
    __asm volatile
    f360:	f3ef 8009 	mrs	r0, PSP
    f364:	6981      	ldr	r1, [r0, #24]
    (
        "mrs r0,psp         \n"
        "ldr r1,[r0,#24]    \n"    // r1 will contain the address where the hard fault occurred
    );    
}
    f366:	46c0      	nop			; (mov r8, r8)
    f368:	46bd      	mov	sp, r7
    f36a:	bd80      	pop	{r7, pc}

0000f36c <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    f36c:	b590      	push	{r4, r7, lr}
    f36e:	b0dd      	sub	sp, #372	; 0x174
    f370:	af00      	add	r7, sp, #0
    f372:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    f374:	687b      	ldr	r3, [r7, #4]
    f376:	2252      	movs	r2, #82	; 0x52
    f378:	5c9b      	ldrb	r3, [r3, r2]
    f37a:	2b03      	cmp	r3, #3
    f37c:	d126      	bne.n	f3cc <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    f37e:	4b1e      	ldr	r3, [pc, #120]	; (f3f8 <handle_transaction+0x8c>)
    f380:	22b8      	movs	r2, #184	; 0xb8
    f382:	0052      	lsls	r2, r2, #1
    f384:	4694      	mov	ip, r2
    f386:	44bc      	add	ip, r7
    f388:	4463      	add	r3, ip
    f38a:	0018      	movs	r0, r3
    f38c:	2366      	movs	r3, #102	; 0x66
    f38e:	33ff      	adds	r3, #255	; 0xff
    f390:	001a      	movs	r2, r3
    f392:	2100      	movs	r1, #0
    f394:	4b19      	ldr	r3, [pc, #100]	; (f3fc <handle_transaction+0x90>)
    f396:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    f398:	687b      	ldr	r3, [r7, #4]
    f39a:	3354      	adds	r3, #84	; 0x54
    f39c:	001a      	movs	r2, r3
    f39e:	4b18      	ldr	r3, [pc, #96]	; (f400 <handle_transaction+0x94>)
    f3a0:	4918      	ldr	r1, [pc, #96]	; (f404 <handle_transaction+0x98>)
    f3a2:	2008      	movs	r0, #8
    f3a4:	1838      	adds	r0, r7, r0
    f3a6:	4c18      	ldr	r4, [pc, #96]	; (f408 <handle_transaction+0x9c>)
    f3a8:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    f3aa:	687b      	ldr	r3, [r7, #4]
    f3ac:	2253      	movs	r2, #83	; 0x53
    f3ae:	569c      	ldrsb	r4, [r3, r2]
    f3b0:	2308      	movs	r3, #8
    f3b2:	18fb      	adds	r3, r7, r3
    f3b4:	0018      	movs	r0, r3
    f3b6:	4b15      	ldr	r3, [pc, #84]	; (f40c <handle_transaction+0xa0>)
    f3b8:	4798      	blx	r3
    f3ba:	0003      	movs	r3, r0
    f3bc:	b29a      	uxth	r2, r3
    f3be:	2308      	movs	r3, #8
    f3c0:	18f9      	adds	r1, r7, r3
    f3c2:	2300      	movs	r3, #0
    f3c4:	0020      	movs	r0, r4
    f3c6:	4c12      	ldr	r4, [pc, #72]	; (f410 <handle_transaction+0xa4>)
    f3c8:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    f3ca:	e010      	b.n	f3ee <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    f3cc:	687b      	ldr	r3, [r7, #4]
    f3ce:	2252      	movs	r2, #82	; 0x52
    f3d0:	5c9b      	ldrb	r3, [r3, r2]
    f3d2:	2b04      	cmp	r3, #4
    f3d4:	d10b      	bne.n	f3ee <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    f3d6:	687b      	ldr	r3, [r7, #4]
    f3d8:	2253      	movs	r2, #83	; 0x53
    f3da:	5698      	ldrsb	r0, [r3, r2]
    f3dc:	687b      	ldr	r3, [r7, #4]
    f3de:	3354      	adds	r3, #84	; 0x54
    f3e0:	0019      	movs	r1, r3
    f3e2:	4c0c      	ldr	r4, [pc, #48]	; (f414 <handle_transaction+0xa8>)
    f3e4:	2380      	movs	r3, #128	; 0x80
    f3e6:	005a      	lsls	r2, r3, #1
    f3e8:	0023      	movs	r3, r4
    f3ea:	4c0b      	ldr	r4, [pc, #44]	; (f418 <handle_transaction+0xac>)
    f3ec:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    f3ee:	46c0      	nop			; (mov r8, r8)
    f3f0:	46bd      	mov	sp, r7
    f3f2:	b05d      	add	sp, #372	; 0x174
    f3f4:	bd90      	pop	{r4, r7, pc}
    f3f6:	46c0      	nop			; (mov r8, r8)
    f3f8:	fffffe98 	.word	0xfffffe98
    f3fc:	00010c67 	.word	0x00010c67
    f400:	00013be0 	.word	0x00013be0
    f404:	00013bf4 	.word	0x00013bf4
    f408:	00011529 	.word	0x00011529
    f40c:	00011591 	.word	0x00011591
    f410:	00007541 	.word	0x00007541
    f414:	00007530 	.word	0x00007530
    f418:	000076a5 	.word	0x000076a5

0000f41c <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    f41c:	b580      	push	{r7, lr}
    f41e:	b082      	sub	sp, #8
    f420:	af00      	add	r7, sp, #0
    f422:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    f424:	687a      	ldr	r2, [r7, #4]
    f426:	4b09      	ldr	r3, [pc, #36]	; (f44c <valid_ctx_prt+0x30>)
    f428:	429a      	cmp	r2, r3
    f42a:	d305      	bcc.n	f438 <valid_ctx_prt+0x1c>
    f42c:	4b08      	ldr	r3, [pc, #32]	; (f450 <valid_ctx_prt+0x34>)
    f42e:	687a      	ldr	r2, [r7, #4]
    f430:	429a      	cmp	r2, r3
    f432:	d201      	bcs.n	f438 <valid_ctx_prt+0x1c>
    f434:	2301      	movs	r3, #1
    f436:	e000      	b.n	f43a <valid_ctx_prt+0x1e>
    f438:	2300      	movs	r3, #0
    f43a:	1c1a      	adds	r2, r3, #0
    f43c:	2301      	movs	r3, #1
    f43e:	4013      	ands	r3, r2
    f440:	b2db      	uxtb	r3, r3
}
    f442:	0018      	movs	r0, r3
    f444:	46bd      	mov	sp, r7
    f446:	b002      	add	sp, #8
    f448:	bd80      	pop	{r7, pc}
    f44a:	46c0      	nop			; (mov r8, r8)
    f44c:	20003ed0 	.word	0x20003ed0
    f450:	200045b0 	.word	0x200045b0

0000f454 <pubnub_find_ctx>:

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
    f454:	b580      	push	{r7, lr}
    f456:	b084      	sub	sp, #16
    f458:	af00      	add	r7, sp, #0
    f45a:	0002      	movs	r2, r0
    f45c:	1dfb      	adds	r3, r7, #7
    f45e:	701a      	strb	r2, [r3, #0]
    f460:	1dbb      	adds	r3, r7, #6
    f462:	1c0a      	adds	r2, r1, #0
    f464:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    f466:	4b11      	ldr	r3, [pc, #68]	; (f4ac <pubnub_find_ctx+0x58>)
    f468:	60fb      	str	r3, [r7, #12]
    f46a:	e016      	b.n	f49a <pubnub_find_ctx+0x46>
		if (pb->state == state && pb->tcp_socket == sock) {
    f46c:	68fb      	ldr	r3, [r7, #12]
    f46e:	2252      	movs	r2, #82	; 0x52
    f470:	5c9b      	ldrb	r3, [r3, r2]
    f472:	1dba      	adds	r2, r7, #6
    f474:	7812      	ldrb	r2, [r2, #0]
    f476:	429a      	cmp	r2, r3
    f478:	d109      	bne.n	f48e <pubnub_find_ctx+0x3a>
    f47a:	68fb      	ldr	r3, [r7, #12]
    f47c:	2253      	movs	r2, #83	; 0x53
    f47e:	569b      	ldrsb	r3, [r3, r2]
    f480:	1dfa      	adds	r2, r7, #7
    f482:	7812      	ldrb	r2, [r2, #0]
    f484:	b252      	sxtb	r2, r2
    f486:	429a      	cmp	r2, r3
    f488:	d101      	bne.n	f48e <pubnub_find_ctx+0x3a>
			return pb;
    f48a:	68fb      	ldr	r3, [r7, #12]
    f48c:	e00a      	b.n	f4a4 <pubnub_find_ctx+0x50>

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    f48e:	68fb      	ldr	r3, [r7, #12]
    f490:	22dc      	movs	r2, #220	; 0xdc
    f492:	0092      	lsls	r2, r2, #2
    f494:	4694      	mov	ip, r2
    f496:	4463      	add	r3, ip
    f498:	60fb      	str	r3, [r7, #12]
    f49a:	4b05      	ldr	r3, [pc, #20]	; (f4b0 <pubnub_find_ctx+0x5c>)
    f49c:	68fa      	ldr	r2, [r7, #12]
    f49e:	429a      	cmp	r2, r3
    f4a0:	d1e4      	bne.n	f46c <pubnub_find_ctx+0x18>
		if (pb->state == state && pb->tcp_socket == sock) {
			return pb;
		}
	}

	return NULL;
    f4a2:	2300      	movs	r3, #0
}
    f4a4:	0018      	movs	r0, r3
    f4a6:	46bd      	mov	sp, r7
    f4a8:	b004      	add	sp, #16
    f4aa:	bd80      	pop	{r7, pc}
    f4ac:	20003ed0 	.word	0x20003ed0
    f4b0:	200045b0 	.word	0x200045b0

0000f4b4 <handle_start_connect>:

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    f4b4:	b590      	push	{r4, r7, lr}
    f4b6:	b083      	sub	sp, #12
    f4b8:	af00      	add	r7, sp, #0
    f4ba:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    f4bc:	687b      	ldr	r3, [r7, #4]
    f4be:	0018      	movs	r0, r3
    f4c0:	4b2f      	ldr	r3, [pc, #188]	; (f580 <handle_start_connect+0xcc>)
    f4c2:	4798      	blx	r3
    f4c4:	1e03      	subs	r3, r0, #0
    f4c6:	d105      	bne.n	f4d4 <handle_start_connect+0x20>
    f4c8:	4b2e      	ldr	r3, [pc, #184]	; (f584 <handle_start_connect+0xd0>)
    f4ca:	4a2f      	ldr	r2, [pc, #188]	; (f588 <handle_start_connect+0xd4>)
    f4cc:	482f      	ldr	r0, [pc, #188]	; (f58c <handle_start_connect+0xd8>)
    f4ce:	2154      	movs	r1, #84	; 0x54
    f4d0:	4c2f      	ldr	r4, [pc, #188]	; (f590 <handle_start_connect+0xdc>)
    f4d2:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    f4d4:	687b      	ldr	r3, [r7, #4]
    f4d6:	2252      	movs	r2, #82	; 0x52
    f4d8:	5c9b      	ldrb	r3, [r3, r2]
    f4da:	2b00      	cmp	r3, #0
    f4dc:	d00f      	beq.n	f4fe <handle_start_connect+0x4a>
    f4de:	687b      	ldr	r3, [r7, #4]
    f4e0:	2252      	movs	r2, #82	; 0x52
    f4e2:	5c9b      	ldrb	r3, [r3, r2]
    f4e4:	2b01      	cmp	r3, #1
    f4e6:	d00a      	beq.n	f4fe <handle_start_connect+0x4a>
    f4e8:	687b      	ldr	r3, [r7, #4]
    f4ea:	2252      	movs	r2, #82	; 0x52
    f4ec:	5c9b      	ldrb	r3, [r3, r2]
    f4ee:	2b02      	cmp	r3, #2
    f4f0:	d005      	beq.n	f4fe <handle_start_connect+0x4a>
    f4f2:	4b28      	ldr	r3, [pc, #160]	; (f594 <handle_start_connect+0xe0>)
    f4f4:	4a24      	ldr	r2, [pc, #144]	; (f588 <handle_start_connect+0xd4>)
    f4f6:	4825      	ldr	r0, [pc, #148]	; (f58c <handle_start_connect+0xd8>)
    f4f8:	2155      	movs	r1, #85	; 0x55
    f4fa:	4c25      	ldr	r4, [pc, #148]	; (f590 <handle_start_connect+0xdc>)
    f4fc:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    f4fe:	687b      	ldr	r3, [r7, #4]
    f500:	2252      	movs	r2, #82	; 0x52
    f502:	5c9b      	ldrb	r3, [r3, r2]
    f504:	2b00      	cmp	r3, #0
    f506:	d12c      	bne.n	f562 <handle_start_connect+0xae>
    f508:	687b      	ldr	r3, [r7, #4]
    f50a:	2253      	movs	r2, #83	; 0x53
    f50c:	569b      	ldrsb	r3, [r3, r2]
    f50e:	2b00      	cmp	r3, #0
    f510:	dc27      	bgt.n	f562 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    f512:	2200      	movs	r2, #0
    f514:	2101      	movs	r1, #1
    f516:	2002      	movs	r0, #2
    f518:	4b1f      	ldr	r3, [pc, #124]	; (f598 <handle_start_connect+0xe4>)
    f51a:	4798      	blx	r3
    f51c:	0003      	movs	r3, r0
    f51e:	0019      	movs	r1, r3
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	2253      	movs	r2, #83	; 0x53
    f524:	5499      	strb	r1, [r3, r2]
    f526:	687b      	ldr	r3, [r7, #4]
    f528:	2253      	movs	r2, #83	; 0x53
    f52a:	569b      	ldrsb	r3, [r3, r2]
    f52c:	2b00      	cmp	r3, #0
    f52e:	da04      	bge.n	f53a <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    f530:	4b1a      	ldr	r3, [pc, #104]	; (f59c <handle_start_connect+0xe8>)
    f532:	0018      	movs	r0, r3
    f534:	4b1a      	ldr	r3, [pc, #104]	; (f5a0 <handle_start_connect+0xec>)
    f536:	4798      	blx	r3
			return;
    f538:	e01f      	b.n	f57a <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    f53a:	4b1a      	ldr	r3, [pc, #104]	; (f5a4 <handle_start_connect+0xf0>)
    f53c:	685b      	ldr	r3, [r3, #4]
    f53e:	2b00      	cmp	r3, #0
    f540:	d10f      	bne.n	f562 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    f542:	4b18      	ldr	r3, [pc, #96]	; (f5a4 <handle_start_connect+0xf0>)
    f544:	2202      	movs	r2, #2
    f546:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    f548:	4b16      	ldr	r3, [pc, #88]	; (f5a4 <handle_start_connect+0xf0>)
    f54a:	22a0      	movs	r2, #160	; 0xa0
    f54c:	01d2      	lsls	r2, r2, #7
    f54e:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    f550:	687b      	ldr	r3, [r7, #4]
    f552:	2252      	movs	r2, #82	; 0x52
    f554:	2101      	movs	r1, #1
    f556:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    f558:	4b13      	ldr	r3, [pc, #76]	; (f5a8 <handle_start_connect+0xf4>)
    f55a:	0018      	movs	r0, r3
    f55c:	4b13      	ldr	r3, [pc, #76]	; (f5ac <handle_start_connect+0xf8>)
    f55e:	4798      	blx	r3
			return;
    f560:	e00b      	b.n	f57a <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    f562:	687b      	ldr	r3, [r7, #4]
    f564:	2253      	movs	r2, #83	; 0x53
    f566:	569b      	ldrsb	r3, [r3, r2]
    f568:	490e      	ldr	r1, [pc, #56]	; (f5a4 <handle_start_connect+0xf0>)
    f56a:	2210      	movs	r2, #16
    f56c:	0018      	movs	r0, r3
    f56e:	4b10      	ldr	r3, [pc, #64]	; (f5b0 <handle_start_connect+0xfc>)
    f570:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    f572:	687b      	ldr	r3, [r7, #4]
    f574:	2252      	movs	r2, #82	; 0x52
    f576:	2102      	movs	r1, #2
    f578:	5499      	strb	r1, [r3, r2]
}
    f57a:	46bd      	mov	sp, r7
    f57c:	b003      	add	sp, #12
    f57e:	bd90      	pop	{r4, r7, pc}
    f580:	0000f41d 	.word	0x0000f41d
    f584:	00013c48 	.word	0x00013c48
    f588:	00013dec 	.word	0x00013dec
    f58c:	00013c5c 	.word	0x00013c5c
    f590:	00010b9d 	.word	0x00010b9d
    f594:	00013c6c 	.word	0x00013c6c
    f598:	000072d5 	.word	0x000072d5
    f59c:	00013cc4 	.word	0x00013cc4
    f5a0:	0001133d 	.word	0x0001133d
    f5a4:	200047f4 	.word	0x200047f4
    f5a8:	00013be0 	.word	0x00013be0
    f5ac:	00007935 	.word	0x00007935
    f5b0:	0000742d 	.word	0x0000742d

0000f5b4 <find_string_start>:

/* Find the beginning of a JSON string that comes after comma and ends
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    f5b4:	b580      	push	{r7, lr}
    f5b6:	b084      	sub	sp, #16
    f5b8:	af00      	add	r7, sp, #0
    f5ba:	6078      	str	r0, [r7, #4]
    f5bc:	6039      	str	r1, [r7, #0]
	int i;
	for (i = len - 1; i > 0; i--) {
    f5be:	683b      	ldr	r3, [r7, #0]
    f5c0:	3b01      	subs	r3, #1
    f5c2:	60fb      	str	r3, [r7, #12]
    f5c4:	e014      	b.n	f5f0 <find_string_start+0x3c>
		if (buf[i] == '"') {
    f5c6:	68fb      	ldr	r3, [r7, #12]
    f5c8:	687a      	ldr	r2, [r7, #4]
    f5ca:	18d3      	adds	r3, r2, r3
    f5cc:	781b      	ldrb	r3, [r3, #0]
    f5ce:	2b22      	cmp	r3, #34	; 0x22
    f5d0:	d10b      	bne.n	f5ea <find_string_start+0x36>
			return (buf[i - 1] == ',') ? i : -1;
    f5d2:	68fb      	ldr	r3, [r7, #12]
    f5d4:	3b01      	subs	r3, #1
    f5d6:	687a      	ldr	r2, [r7, #4]
    f5d8:	18d3      	adds	r3, r2, r3
    f5da:	781b      	ldrb	r3, [r3, #0]
    f5dc:	2b2c      	cmp	r3, #44	; 0x2c
    f5de:	d101      	bne.n	f5e4 <find_string_start+0x30>
    f5e0:	68fb      	ldr	r3, [r7, #12]
    f5e2:	e00a      	b.n	f5fa <find_string_start+0x46>
    f5e4:	2301      	movs	r3, #1
    f5e6:	425b      	negs	r3, r3
    f5e8:	e007      	b.n	f5fa <find_string_start+0x46>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
	int i;
	for (i = len - 1; i > 0; i--) {
    f5ea:	68fb      	ldr	r3, [r7, #12]
    f5ec:	3b01      	subs	r3, #1
    f5ee:	60fb      	str	r3, [r7, #12]
    f5f0:	68fb      	ldr	r3, [r7, #12]
    f5f2:	2b00      	cmp	r3, #0
    f5f4:	dce7      	bgt.n	f5c6 <find_string_start+0x12>
		if (buf[i] == '"') {
			return (buf[i - 1] == ',') ? i : -1;
		}
	}
	return -1;
    f5f6:	2301      	movs	r3, #1
    f5f8:	425b      	negs	r3, r3
}
    f5fa:	0018      	movs	r0, r3
    f5fc:	46bd      	mov	sp, r7
    f5fe:	b004      	add	sp, #16
    f600:	bd80      	pop	{r7, pc}
    f602:	46c0      	nop			; (mov r8, r8)

0000f604 <split_array>:

/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    f604:	b580      	push	{r7, lr}
    f606:	b084      	sub	sp, #16
    f608:	af00      	add	r7, sp, #0
    f60a:	6078      	str	r0, [r7, #4]
	bool escaped = false;
    f60c:	230f      	movs	r3, #15
    f60e:	18fb      	adds	r3, r7, r3
    f610:	2200      	movs	r2, #0
    f612:	701a      	strb	r2, [r3, #0]
	bool in_string = false;
    f614:	230e      	movs	r3, #14
    f616:	18fb      	adds	r3, r7, r3
    f618:	2200      	movs	r2, #0
    f61a:	701a      	strb	r2, [r3, #0]
	int bracket_level = 0;
    f61c:	2300      	movs	r3, #0
    f61e:	60bb      	str	r3, [r7, #8]

	for (; *buf != '\0'; ++buf) {
    f620:	e04e      	b.n	f6c0 <split_array+0xbc>
		if (escaped) {
    f622:	230f      	movs	r3, #15
    f624:	18fb      	adds	r3, r7, r3
    f626:	781b      	ldrb	r3, [r3, #0]
    f628:	2b00      	cmp	r3, #0
    f62a:	d004      	beq.n	f636 <split_array+0x32>
			escaped = false;
    f62c:	230f      	movs	r3, #15
    f62e:	18fb      	adds	r3, r7, r3
    f630:	2200      	movs	r2, #0
    f632:	701a      	strb	r2, [r3, #0]
    f634:	e041      	b.n	f6ba <split_array+0xb6>
		} else if ('"' == *buf) {
    f636:	687b      	ldr	r3, [r7, #4]
    f638:	781b      	ldrb	r3, [r3, #0]
    f63a:	2b22      	cmp	r3, #34	; 0x22
    f63c:	d111      	bne.n	f662 <split_array+0x5e>
			in_string = !in_string;
    f63e:	230e      	movs	r3, #14
    f640:	18fb      	adds	r3, r7, r3
    f642:	781b      	ldrb	r3, [r3, #0]
    f644:	1e5a      	subs	r2, r3, #1
    f646:	4193      	sbcs	r3, r2
    f648:	b2db      	uxtb	r3, r3
    f64a:	2201      	movs	r2, #1
    f64c:	4053      	eors	r3, r2
    f64e:	b2db      	uxtb	r3, r3
    f650:	001a      	movs	r2, r3
    f652:	230e      	movs	r3, #14
    f654:	18fb      	adds	r3, r7, r3
    f656:	701a      	strb	r2, [r3, #0]
    f658:	781a      	ldrb	r2, [r3, #0]
    f65a:	2101      	movs	r1, #1
    f65c:	400a      	ands	r2, r1
    f65e:	701a      	strb	r2, [r3, #0]
    f660:	e02b      	b.n	f6ba <split_array+0xb6>
		} else if (in_string) {
    f662:	230e      	movs	r3, #14
    f664:	18fb      	adds	r3, r7, r3
    f666:	781b      	ldrb	r3, [r3, #0]
    f668:	2b00      	cmp	r3, #0
    f66a:	d008      	beq.n	f67e <split_array+0x7a>
			escaped = ('\\' == *buf);
    f66c:	687b      	ldr	r3, [r7, #4]
    f66e:	781a      	ldrb	r2, [r3, #0]
    f670:	230f      	movs	r3, #15
    f672:	18fb      	adds	r3, r7, r3
    f674:	3a5c      	subs	r2, #92	; 0x5c
    f676:	4251      	negs	r1, r2
    f678:	414a      	adcs	r2, r1
    f67a:	701a      	strb	r2, [r3, #0]
    f67c:	e01d      	b.n	f6ba <split_array+0xb6>
		} else {
			switch (*buf) {
    f67e:	687b      	ldr	r3, [r7, #4]
    f680:	781b      	ldrb	r3, [r3, #0]
    f682:	2b5d      	cmp	r3, #93	; 0x5d
    f684:	d00e      	beq.n	f6a4 <split_array+0xa0>
    f686:	dc04      	bgt.n	f692 <split_array+0x8e>
    f688:	2b2c      	cmp	r3, #44	; 0x2c
    f68a:	d00f      	beq.n	f6ac <split_array+0xa8>
    f68c:	2b5b      	cmp	r3, #91	; 0x5b
    f68e:	d005      	beq.n	f69c <split_array+0x98>
				}

				break;

			default:
				break;
    f690:	e013      	b.n	f6ba <split_array+0xb6>
		} else if ('"' == *buf) {
			in_string = !in_string;
		} else if (in_string) {
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
    f692:	2b7b      	cmp	r3, #123	; 0x7b
    f694:	d002      	beq.n	f69c <split_array+0x98>
    f696:	2b7d      	cmp	r3, #125	; 0x7d
    f698:	d004      	beq.n	f6a4 <split_array+0xa0>
				}

				break;

			default:
				break;
    f69a:	e00e      	b.n	f6ba <split_array+0xb6>
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
			case '[':
			case '{':
				bracket_level++; break;
    f69c:	68bb      	ldr	r3, [r7, #8]
    f69e:	3301      	adds	r3, #1
    f6a0:	60bb      	str	r3, [r7, #8]
    f6a2:	e00a      	b.n	f6ba <split_array+0xb6>

			case ']':
			case '}':
				bracket_level--; break;
    f6a4:	68bb      	ldr	r3, [r7, #8]
    f6a6:	3b01      	subs	r3, #1
    f6a8:	60bb      	str	r3, [r7, #8]
    f6aa:	e006      	b.n	f6ba <split_array+0xb6>

			/* if at root, split! */
			case ',':
				if (bracket_level == 0) {
    f6ac:	68bb      	ldr	r3, [r7, #8]
    f6ae:	2b00      	cmp	r3, #0
    f6b0:	d102      	bne.n	f6b8 <split_array+0xb4>
					*buf = '\0';
    f6b2:	687b      	ldr	r3, [r7, #4]
    f6b4:	2200      	movs	r2, #0
    f6b6:	701a      	strb	r2, [r3, #0]
				}

				break;
    f6b8:	46c0      	nop			; (mov r8, r8)
{
	bool escaped = false;
	bool in_string = false;
	int bracket_level = 0;

	for (; *buf != '\0'; ++buf) {
    f6ba:	687b      	ldr	r3, [r7, #4]
    f6bc:	3301      	adds	r3, #1
    f6be:	607b      	str	r3, [r7, #4]
    f6c0:	687b      	ldr	r3, [r7, #4]
    f6c2:	781b      	ldrb	r3, [r3, #0]
    f6c4:	2b00      	cmp	r3, #0
    f6c6:	d1ac      	bne.n	f622 <split_array+0x1e>
				break;
			}
		}
	}

	return !(escaped || in_string || (bracket_level > 0));
    f6c8:	230f      	movs	r3, #15
    f6ca:	18fb      	adds	r3, r7, r3
    f6cc:	781b      	ldrb	r3, [r3, #0]
    f6ce:	2201      	movs	r2, #1
    f6d0:	4053      	eors	r3, r2
    f6d2:	b2db      	uxtb	r3, r3
    f6d4:	2b00      	cmp	r3, #0
    f6d6:	d00c      	beq.n	f6f2 <split_array+0xee>
    f6d8:	230e      	movs	r3, #14
    f6da:	18fb      	adds	r3, r7, r3
    f6dc:	781b      	ldrb	r3, [r3, #0]
    f6de:	2201      	movs	r2, #1
    f6e0:	4053      	eors	r3, r2
    f6e2:	b2db      	uxtb	r3, r3
    f6e4:	2b00      	cmp	r3, #0
    f6e6:	d004      	beq.n	f6f2 <split_array+0xee>
    f6e8:	68bb      	ldr	r3, [r7, #8]
    f6ea:	2b00      	cmp	r3, #0
    f6ec:	dc01      	bgt.n	f6f2 <split_array+0xee>
    f6ee:	2301      	movs	r3, #1
    f6f0:	e000      	b.n	f6f4 <split_array+0xf0>
    f6f2:	2300      	movs	r3, #0
    f6f4:	1c1a      	adds	r2, r3, #0
    f6f6:	2301      	movs	r3, #1
    f6f8:	4013      	ands	r3, r2
    f6fa:	b2db      	uxtb	r3, r3
}
    f6fc:	0018      	movs	r0, r3
    f6fe:	46bd      	mov	sp, r7
    f700:	b004      	add	sp, #16
    f702:	bd80      	pop	{r7, pc}

0000f704 <parse_subscribe_response>:

static int parse_subscribe_response(pubnub_t *p)
{
    f704:	b580      	push	{r7, lr}
    f706:	b086      	sub	sp, #24
    f708:	af00      	add	r7, sp, #0
    f70a:	6078      	str	r0, [r7, #4]
	char *reply = p->http_reply;
    f70c:	687b      	ldr	r3, [r7, #4]
    f70e:	3366      	adds	r3, #102	; 0x66
    f710:	33ff      	adds	r3, #255	; 0xff
    f712:	60bb      	str	r3, [r7, #8]
	unsigned int replylen = strlen(reply);
    f714:	68bb      	ldr	r3, [r7, #8]
    f716:	0018      	movs	r0, r3
    f718:	4b62      	ldr	r3, [pc, #392]	; (f8a4 <parse_subscribe_response+0x1a0>)
    f71a:	4798      	blx	r3
    f71c:	0003      	movs	r3, r0
    f71e:	617b      	str	r3, [r7, #20]
	if (reply[replylen - 1] != ']' && replylen > 2) {
    f720:	697b      	ldr	r3, [r7, #20]
    f722:	3b01      	subs	r3, #1
    f724:	68ba      	ldr	r2, [r7, #8]
    f726:	18d3      	adds	r3, r2, r3
    f728:	781b      	ldrb	r3, [r3, #0]
    f72a:	2b5d      	cmp	r3, #93	; 0x5d
    f72c:	d005      	beq.n	f73a <parse_subscribe_response+0x36>
    f72e:	697b      	ldr	r3, [r7, #20]
    f730:	2b02      	cmp	r3, #2
    f732:	d902      	bls.n	f73a <parse_subscribe_response+0x36>
		replylen -= 2; /* XXX: this seems required by Manxiang */
    f734:	697b      	ldr	r3, [r7, #20]
    f736:	3b02      	subs	r3, #2
    f738:	617b      	str	r3, [r7, #20]
	}

	if ((reply[0] != '[') || (reply[replylen - 1] != ']') || (reply[replylen - 2] != '"')) {
    f73a:	68bb      	ldr	r3, [r7, #8]
    f73c:	781b      	ldrb	r3, [r3, #0]
    f73e:	2b5b      	cmp	r3, #91	; 0x5b
    f740:	d10d      	bne.n	f75e <parse_subscribe_response+0x5a>
    f742:	697b      	ldr	r3, [r7, #20]
    f744:	3b01      	subs	r3, #1
    f746:	68ba      	ldr	r2, [r7, #8]
    f748:	18d3      	adds	r3, r2, r3
    f74a:	781b      	ldrb	r3, [r3, #0]
    f74c:	2b5d      	cmp	r3, #93	; 0x5d
    f74e:	d106      	bne.n	f75e <parse_subscribe_response+0x5a>
    f750:	697b      	ldr	r3, [r7, #20]
    f752:	3b02      	subs	r3, #2
    f754:	68ba      	ldr	r2, [r7, #8]
    f756:	18d3      	adds	r3, r2, r3
    f758:	781b      	ldrb	r3, [r3, #0]
    f75a:	2b22      	cmp	r3, #34	; 0x22
    f75c:	d002      	beq.n	f764 <parse_subscribe_response+0x60>
		return -1;
    f75e:	2301      	movs	r3, #1
    f760:	425b      	negs	r3, r3
    f762:	e09a      	b.n	f89a <parse_subscribe_response+0x196>
	}

	/* Extract the last argument. */
	int i = find_string_start(reply, replylen - 2);
    f764:	697b      	ldr	r3, [r7, #20]
    f766:	3b02      	subs	r3, #2
    f768:	001a      	movs	r2, r3
    f76a:	68bb      	ldr	r3, [r7, #8]
    f76c:	0011      	movs	r1, r2
    f76e:	0018      	movs	r0, r3
    f770:	4b4d      	ldr	r3, [pc, #308]	; (f8a8 <parse_subscribe_response+0x1a4>)
    f772:	4798      	blx	r3
    f774:	0003      	movs	r3, r0
    f776:	613b      	str	r3, [r7, #16]
	if (i < 0) {
    f778:	693b      	ldr	r3, [r7, #16]
    f77a:	2b00      	cmp	r3, #0
    f77c:	da02      	bge.n	f784 <parse_subscribe_response+0x80>
		return -1;
    f77e:	2301      	movs	r3, #1
    f780:	425b      	negs	r3, r3
    f782:	e08a      	b.n	f89a <parse_subscribe_response+0x196>
	}

	reply[replylen - 2] = 0;
    f784:	697b      	ldr	r3, [r7, #20]
    f786:	3b02      	subs	r3, #2
    f788:	68ba      	ldr	r2, [r7, #8]
    f78a:	18d3      	adds	r3, r2, r3
    f78c:	2200      	movs	r2, #0
    f78e:	701a      	strb	r2, [r3, #0]

	/* Now, the last argument may either be a timetoken or a channel list. */
	if (reply[i - 2] == '"') {
    f790:	693b      	ldr	r3, [r7, #16]
    f792:	3b02      	subs	r3, #2
    f794:	68ba      	ldr	r2, [r7, #8]
    f796:	18d3      	adds	r3, r2, r3
    f798:	781b      	ldrb	r3, [r3, #0]
    f79a:	2b22      	cmp	r3, #34	; 0x22
    f79c:	d13f      	bne.n	f81e <parse_subscribe_response+0x11a>
		int k;

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
    f79e:	693b      	ldr	r3, [r7, #16]
    f7a0:	b29b      	uxth	r3, r3
    f7a2:	3301      	adds	r3, #1
    f7a4:	b299      	uxth	r1, r3
    f7a6:	687b      	ldr	r3, [r7, #4]
    f7a8:	4a40      	ldr	r2, [pc, #256]	; (f8ac <parse_subscribe_response+0x1a8>)
    f7aa:	5299      	strh	r1, [r3, r2]
		p->chan_end = replylen - 1;
    f7ac:	697b      	ldr	r3, [r7, #20]
    f7ae:	b29b      	uxth	r3, r3
    f7b0:	3b01      	subs	r3, #1
    f7b2:	b299      	uxth	r1, r3
    f7b4:	687a      	ldr	r2, [r7, #4]
    f7b6:	23db      	movs	r3, #219	; 0xdb
    f7b8:	009b      	lsls	r3, r3, #2
    f7ba:	52d1      	strh	r1, [r2, r3]
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    f7bc:	687a      	ldr	r2, [r7, #4]
    f7be:	23db      	movs	r3, #219	; 0xdb
    f7c0:	009b      	lsls	r3, r3, #2
    f7c2:	5ad3      	ldrh	r3, [r2, r3]
    f7c4:	3b01      	subs	r3, #1
    f7c6:	60fb      	str	r3, [r7, #12]
    f7c8:	e00d      	b.n	f7e6 <parse_subscribe_response+0xe2>
			if (reply[k] == ',') {
    f7ca:	68fb      	ldr	r3, [r7, #12]
    f7cc:	68ba      	ldr	r2, [r7, #8]
    f7ce:	18d3      	adds	r3, r2, r3
    f7d0:	781b      	ldrb	r3, [r3, #0]
    f7d2:	2b2c      	cmp	r3, #44	; 0x2c
    f7d4:	d104      	bne.n	f7e0 <parse_subscribe_response+0xdc>
				reply[k] = 0;
    f7d6:	68fb      	ldr	r3, [r7, #12]
    f7d8:	68ba      	ldr	r2, [r7, #8]
    f7da:	18d3      	adds	r3, r2, r3
    f7dc:	2200      	movs	r2, #0
    f7de:	701a      	strb	r2, [r3, #0]

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
		p->chan_end = replylen - 1;
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    f7e0:	68fb      	ldr	r3, [r7, #12]
    f7e2:	3b01      	subs	r3, #1
    f7e4:	60fb      	str	r3, [r7, #12]
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	4a30      	ldr	r2, [pc, #192]	; (f8ac <parse_subscribe_response+0x1a8>)
    f7ea:	5a9b      	ldrh	r3, [r3, r2]
    f7ec:	1e1a      	subs	r2, r3, #0
    f7ee:	68fb      	ldr	r3, [r7, #12]
    f7f0:	429a      	cmp	r2, r3
    f7f2:	dbea      	blt.n	f7ca <parse_subscribe_response+0xc6>
				reply[k] = 0;
			}
		}

		/* ... and look for timetoken again. */
		reply[i - 2] = 0;
    f7f4:	693b      	ldr	r3, [r7, #16]
    f7f6:	3b02      	subs	r3, #2
    f7f8:	68ba      	ldr	r2, [r7, #8]
    f7fa:	18d3      	adds	r3, r2, r3
    f7fc:	2200      	movs	r2, #0
    f7fe:	701a      	strb	r2, [r3, #0]
		i = find_string_start(reply, i - 2);
    f800:	693b      	ldr	r3, [r7, #16]
    f802:	1e9a      	subs	r2, r3, #2
    f804:	68bb      	ldr	r3, [r7, #8]
    f806:	0011      	movs	r1, r2
    f808:	0018      	movs	r0, r3
    f80a:	4b27      	ldr	r3, [pc, #156]	; (f8a8 <parse_subscribe_response+0x1a4>)
    f80c:	4798      	blx	r3
    f80e:	0003      	movs	r3, r0
    f810:	613b      	str	r3, [r7, #16]
		if (i < 0) {
    f812:	693b      	ldr	r3, [r7, #16]
    f814:	2b00      	cmp	r3, #0
    f816:	da0b      	bge.n	f830 <parse_subscribe_response+0x12c>
			return -1;
    f818:	2301      	movs	r3, #1
    f81a:	425b      	negs	r3, r3
    f81c:	e03d      	b.n	f89a <parse_subscribe_response+0x196>
		}
	} else {
		p->chan_ofs = 0;
    f81e:	687b      	ldr	r3, [r7, #4]
    f820:	4a22      	ldr	r2, [pc, #136]	; (f8ac <parse_subscribe_response+0x1a8>)
    f822:	2100      	movs	r1, #0
    f824:	5299      	strh	r1, [r3, r2]
		p->chan_end = 0;
    f826:	687a      	ldr	r2, [r7, #4]
    f828:	23db      	movs	r3, #219	; 0xdb
    f82a:	009b      	lsls	r3, r3, #2
    f82c:	2100      	movs	r1, #0
    f82e:	52d1      	strh	r1, [r2, r3]
	 * [[1,2,3],"5678"]
	 * [[1,2,3],"5678","a,b,c"]
	 *          ^-- here */

	/* Setup timetoken. */
	if (replylen >= sizeof(p->timetoken) + 2 + (i + 1)) {
    f830:	693b      	ldr	r3, [r7, #16]
    f832:	3343      	adds	r3, #67	; 0x43
    f834:	1e1a      	subs	r2, r3, #0
    f836:	697b      	ldr	r3, [r7, #20]
    f838:	429a      	cmp	r2, r3
    f83a:	d802      	bhi.n	f842 <parse_subscribe_response+0x13e>
		return -1;
    f83c:	2301      	movs	r3, #1
    f83e:	425b      	negs	r3, r3
    f840:	e02b      	b.n	f89a <parse_subscribe_response+0x196>
	}

	strcpy(p->timetoken, reply + i + 1);
    f842:	687b      	ldr	r3, [r7, #4]
    f844:	3310      	adds	r3, #16
    f846:	0018      	movs	r0, r3
    f848:	693b      	ldr	r3, [r7, #16]
    f84a:	3301      	adds	r3, #1
    f84c:	68ba      	ldr	r2, [r7, #8]
    f84e:	18d3      	adds	r3, r2, r3
    f850:	0019      	movs	r1, r3
    f852:	4b17      	ldr	r3, [pc, #92]	; (f8b0 <parse_subscribe_response+0x1ac>)
    f854:	4798      	blx	r3
	reply[i - 2] = 0; /* terminate the [] message array (before the ]!) */
    f856:	693b      	ldr	r3, [r7, #16]
    f858:	3b02      	subs	r3, #2
    f85a:	68ba      	ldr	r2, [r7, #8]
    f85c:	18d3      	adds	r3, r2, r3
    f85e:	2200      	movs	r2, #0
    f860:	701a      	strb	r2, [r3, #0]

	/* Set up the message list - offset, length and NUL-characters splitting the messages. */
	p->msg_ofs = 2;
    f862:	687b      	ldr	r3, [r7, #4]
    f864:	4a13      	ldr	r2, [pc, #76]	; (f8b4 <parse_subscribe_response+0x1b0>)
    f866:	2102      	movs	r1, #2
    f868:	5299      	strh	r1, [r3, r2]
	p->msg_end = i - 2;
    f86a:	693b      	ldr	r3, [r7, #16]
    f86c:	b29b      	uxth	r3, r3
    f86e:	3b02      	subs	r3, #2
    f870:	b299      	uxth	r1, r3
    f872:	687a      	ldr	r2, [r7, #4]
    f874:	23da      	movs	r3, #218	; 0xda
    f876:	009b      	lsls	r3, r3, #2
    f878:	52d1      	strh	r1, [r2, r3]

	return split_array(reply + p->msg_ofs) ? 0 : -1;
    f87a:	687b      	ldr	r3, [r7, #4]
    f87c:	4a0d      	ldr	r2, [pc, #52]	; (f8b4 <parse_subscribe_response+0x1b0>)
    f87e:	5a9b      	ldrh	r3, [r3, r2]
    f880:	001a      	movs	r2, r3
    f882:	68bb      	ldr	r3, [r7, #8]
    f884:	189b      	adds	r3, r3, r2
    f886:	0018      	movs	r0, r3
    f888:	4b0b      	ldr	r3, [pc, #44]	; (f8b8 <parse_subscribe_response+0x1b4>)
    f88a:	4798      	blx	r3
    f88c:	1e03      	subs	r3, r0, #0
    f88e:	d001      	beq.n	f894 <parse_subscribe_response+0x190>
    f890:	2300      	movs	r3, #0
    f892:	e001      	b.n	f898 <parse_subscribe_response+0x194>
    f894:	2301      	movs	r3, #1
    f896:	425b      	negs	r3, r3
    f898:	46c0      	nop			; (mov r8, r8)
}
    f89a:	0018      	movs	r0, r3
    f89c:	46bd      	mov	sp, r7
    f89e:	b006      	add	sp, #24
    f8a0:	bd80      	pop	{r7, pc}
    f8a2:	46c0      	nop			; (mov r8, r8)
    f8a4:	00011591 	.word	0x00011591
    f8a8:	0000f5b5 	.word	0x0000f5b5
    f8ac:	0000036a 	.word	0x0000036a
    f8b0:	00011581 	.word	0x00011581
    f8b4:	00000366 	.word	0x00000366
    f8b8:	0000f605 	.word	0x0000f605

0000f8bc <handle_tcpip_connect>:

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    f8bc:	b580      	push	{r7, lr}
    f8be:	b084      	sub	sp, #16
    f8c0:	af00      	add	r7, sp, #0
    f8c2:	603a      	str	r2, [r7, #0]
    f8c4:	1dfb      	adds	r3, r7, #7
    f8c6:	1c02      	adds	r2, r0, #0
    f8c8:	701a      	strb	r2, [r3, #0]
    f8ca:	1dbb      	adds	r3, r7, #6
    f8cc:	1c0a      	adds	r2, r1, #0
    f8ce:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_CONNECT);
    f8d0:	1dfb      	adds	r3, r7, #7
    f8d2:	781b      	ldrb	r3, [r3, #0]
    f8d4:	b25b      	sxtb	r3, r3
    f8d6:	2102      	movs	r1, #2
    f8d8:	0018      	movs	r0, r3
    f8da:	4b16      	ldr	r3, [pc, #88]	; (f934 <handle_tcpip_connect+0x78>)
    f8dc:	4798      	blx	r3
    f8de:	0003      	movs	r3, r0
    f8e0:	60fb      	str	r3, [r7, #12]

	if (pb != NULL) {
    f8e2:	68fb      	ldr	r3, [r7, #12]
    f8e4:	2b00      	cmp	r3, #0
    f8e6:	d020      	beq.n	f92a <handle_tcpip_connect+0x6e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    f8e8:	683b      	ldr	r3, [r7, #0]
    f8ea:	60bb      	str	r3, [r7, #8]
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    f8ec:	68bb      	ldr	r3, [r7, #8]
    f8ee:	2b00      	cmp	r3, #0
    f8f0:	d00d      	beq.n	f90e <handle_tcpip_connect+0x52>
    f8f2:	68bb      	ldr	r3, [r7, #8]
    f8f4:	785b      	ldrb	r3, [r3, #1]
    f8f6:	b25b      	sxtb	r3, r3
    f8f8:	2b00      	cmp	r3, #0
    f8fa:	db08      	blt.n	f90e <handle_tcpip_connect+0x52>
			PUBNUB_PRINTF("handle_tcpip_connect : connect success!\r\n");
			pb->state = PS_WAIT_SEND;
    f8fc:	68fb      	ldr	r3, [r7, #12]
    f8fe:	2252      	movs	r2, #82	; 0x52
    f900:	2103      	movs	r1, #3
    f902:	5499      	strb	r1, [r3, r2]

			handle_transaction(pb);
    f904:	68fb      	ldr	r3, [r7, #12]
    f906:	0018      	movs	r0, r3
    f908:	4b0b      	ldr	r3, [pc, #44]	; (f938 <handle_tcpip_connect+0x7c>)
    f90a:	4798      	blx	r3

			pb->state = PS_IDLE;
			pb->last_result = PNR_IO_ERROR;
		}
	}
}
    f90c:	e00d      	b.n	f92a <handle_tcpip_connect+0x6e>
			pb->state = PS_WAIT_SEND;

			handle_transaction(pb);
		} else {
			PUBNUB_PRINTF("handle_tcpip_connect : connect error!\r\n");
			close(pb->tcp_socket);
    f90e:	68fb      	ldr	r3, [r7, #12]
    f910:	2253      	movs	r2, #83	; 0x53
    f912:	569b      	ldrsb	r3, [r3, r2]
    f914:	0018      	movs	r0, r3
    f916:	4b09      	ldr	r3, [pc, #36]	; (f93c <handle_tcpip_connect+0x80>)
    f918:	4798      	blx	r3

			pb->state = PS_IDLE;
    f91a:	68fb      	ldr	r3, [r7, #12]
    f91c:	2252      	movs	r2, #82	; 0x52
    f91e:	2100      	movs	r1, #0
    f920:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    f922:	68fb      	ldr	r3, [r7, #12]
    f924:	2250      	movs	r2, #80	; 0x50
    f926:	2102      	movs	r1, #2
    f928:	5499      	strb	r1, [r3, r2]
		}
	}
}
    f92a:	46c0      	nop			; (mov r8, r8)
    f92c:	46bd      	mov	sp, r7
    f92e:	b004      	add	sp, #16
    f930:	bd80      	pop	{r7, pc}
    f932:	46c0      	nop			; (mov r8, r8)
    f934:	0000f455 	.word	0x0000f455
    f938:	0000f36d 	.word	0x0000f36d
    f93c:	00007825 	.word	0x00007825

0000f940 <handle_tcpip_recv>:

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    f940:	b580      	push	{r7, lr}
    f942:	b086      	sub	sp, #24
    f944:	af00      	add	r7, sp, #0
    f946:	603a      	str	r2, [r7, #0]
    f948:	1dfb      	adds	r3, r7, #7
    f94a:	1c02      	adds	r2, r0, #0
    f94c:	701a      	strb	r2, [r3, #0]
    f94e:	1dbb      	adds	r3, r7, #6
    f950:	1c0a      	adds	r2, r1, #0
    f952:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    f954:	4b57      	ldr	r3, [pc, #348]	; (fab4 <handle_tcpip_recv+0x174>)
    f956:	617b      	str	r3, [r7, #20]
    f958:	e012      	b.n	f980 <handle_tcpip_recv+0x40>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
    f95a:	697b      	ldr	r3, [r7, #20]
    f95c:	2252      	movs	r2, #82	; 0x52
    f95e:	5c9b      	ldrb	r3, [r3, r2]
    f960:	2b04      	cmp	r3, #4
    f962:	d107      	bne.n	f974 <handle_tcpip_recv+0x34>
    f964:	697b      	ldr	r3, [r7, #20]
    f966:	2253      	movs	r2, #83	; 0x53
    f968:	569b      	ldrsb	r3, [r3, r2]
    f96a:	1dfa      	adds	r2, r7, #7
    f96c:	7812      	ldrb	r2, [r2, #0]
    f96e:	b252      	sxtb	r2, r2
    f970:	429a      	cmp	r2, r3
    f972:	d00a      	beq.n	f98a <handle_tcpip_recv+0x4a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    f974:	697b      	ldr	r3, [r7, #20]
    f976:	22dc      	movs	r2, #220	; 0xdc
    f978:	0092      	lsls	r2, r2, #2
    f97a:	4694      	mov	ip, r2
    f97c:	4463      	add	r3, ip
    f97e:	617b      	str	r3, [r7, #20]
    f980:	4b4d      	ldr	r3, [pc, #308]	; (fab8 <handle_tcpip_recv+0x178>)
    f982:	697a      	ldr	r2, [r7, #20]
    f984:	429a      	cmp	r2, r3
    f986:	d1e8      	bne.n	f95a <handle_tcpip_recv+0x1a>
    f988:	e000      	b.n	f98c <handle_tcpip_recv+0x4c>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
    f98a:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (pb != NULL) {
    f98c:	697b      	ldr	r3, [r7, #20]
    f98e:	2b00      	cmp	r3, #0
    f990:	d100      	bne.n	f994 <handle_tcpip_recv+0x54>
    f992:	e08b      	b.n	faac <handle_tcpip_recv+0x16c>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    f994:	683b      	ldr	r3, [r7, #0]
    f996:	613b      	str	r3, [r7, #16]

		if (pstrRecv->s16BufferSize <= 0) {
    f998:	693b      	ldr	r3, [r7, #16]
    f99a:	2204      	movs	r2, #4
    f99c:	5e9b      	ldrsh	r3, [r3, r2]
    f99e:	2b00      	cmp	r3, #0
    f9a0:	dc0e      	bgt.n	f9c0 <handle_tcpip_recv+0x80>
			close(pb->tcp_socket);
    f9a2:	697b      	ldr	r3, [r7, #20]
    f9a4:	2253      	movs	r2, #83	; 0x53
    f9a6:	569b      	ldrsb	r3, [r3, r2]
    f9a8:	0018      	movs	r0, r3
    f9aa:	4b44      	ldr	r3, [pc, #272]	; (fabc <handle_tcpip_recv+0x17c>)
    f9ac:	4798      	blx	r3

			pb->state = PS_IDLE;
    f9ae:	697b      	ldr	r3, [r7, #20]
    f9b0:	2252      	movs	r2, #82	; 0x52
    f9b2:	2100      	movs	r1, #0
    f9b4:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    f9b6:	697b      	ldr	r3, [r7, #20]
    f9b8:	2250      	movs	r2, #80	; 0x50
    f9ba:	2102      	movs	r1, #2
    f9bc:	5499      	strb	r1, [r3, r2]
			return;
    f9be:	e075      	b.n	faac <handle_tcpip_recv+0x16c>
		}

		if (pb->trans == PBTT_PUBLISH) {
    f9c0:	697b      	ldr	r3, [r7, #20]
    f9c2:	2251      	movs	r2, #81	; 0x51
    f9c4:	5c9b      	ldrb	r3, [r3, r2]
    f9c6:	2b02      	cmp	r3, #2
    f9c8:	d10c      	bne.n	f9e4 <handle_tcpip_recv+0xa4>
			PUBNUB_PRINTF(("handle_tcpip_recv: PBTT_PUBLISH msg: %s\n", pstrRecv->pu8Buffer));

			if (pstrRecv->u16RemainingSize == 0) {
    f9ca:	693b      	ldr	r3, [r7, #16]
    f9cc:	88db      	ldrh	r3, [r3, #6]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	d16b      	bne.n	faaa <handle_tcpip_recv+0x16a>
				pb->last_result = PNR_OK;
    f9d2:	697b      	ldr	r3, [r7, #20]
    f9d4:	2250      	movs	r2, #80	; 0x50
    f9d6:	2100      	movs	r1, #0
    f9d8:	5499      	strb	r1, [r3, r2]
				pb->state = PS_IDLE;
    f9da:	697b      	ldr	r3, [r7, #20]
    f9dc:	2252      	movs	r2, #82	; 0x52
    f9de:	2100      	movs	r1, #0
    f9e0:	5499      	strb	r1, [r3, r2]
			}

			return;
    f9e2:	e062      	b.n	faaa <handle_tcpip_recv+0x16a>
		}

		if (pstrRecv->u16RemainingSize > 0) {
    f9e4:	693b      	ldr	r3, [r7, #16]
    f9e6:	88db      	ldrh	r3, [r3, #6]
    f9e8:	2b00      	cmp	r3, #0
    f9ea:	d037      	beq.n	fa5c <handle_tcpip_recv+0x11c>
			pb->state = PS_WAIT_RECV;
    f9ec:	697b      	ldr	r3, [r7, #20]
    f9ee:	2252      	movs	r2, #82	; 0x52
    f9f0:	2104      	movs	r1, #4
    f9f2:	5499      	strb	r1, [r3, r2]

			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"Content-Length: ") + 16;
    f9f4:	693b      	ldr	r3, [r7, #16]
    f9f6:	681b      	ldr	r3, [r3, #0]
    f9f8:	4a31      	ldr	r2, [pc, #196]	; (fac0 <handle_tcpip_recv+0x180>)
    f9fa:	0011      	movs	r1, r2
    f9fc:	0018      	movs	r0, r3
    f9fe:	4b31      	ldr	r3, [pc, #196]	; (fac4 <handle_tcpip_recv+0x184>)
    fa00:	4798      	blx	r3
    fa02:	0003      	movs	r3, r0
    fa04:	3310      	adds	r3, #16
    fa06:	60fb      	str	r3, [r7, #12]
			pb->http_content_len = atoi((const char *)length);
    fa08:	68fb      	ldr	r3, [r7, #12]
    fa0a:	0018      	movs	r0, r3
    fa0c:	4b2e      	ldr	r3, [pc, #184]	; (fac8 <handle_tcpip_recv+0x188>)
    fa0e:	4798      	blx	r3
    fa10:	0003      	movs	r3, r0
    fa12:	0019      	movs	r1, r3
    fa14:	697a      	ldr	r2, [r7, #20]
    fa16:	23ae      	movs	r3, #174	; 0xae
    fa18:	005b      	lsls	r3, r3, #1
    fa1a:	50d1      	str	r1, [r2, r3]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
    fa1c:	693b      	ldr	r3, [r7, #16]
    fa1e:	88db      	ldrh	r3, [r3, #6]
    fa20:	0019      	movs	r1, r3
    fa22:	697a      	ldr	r2, [r7, #20]
    fa24:	23b0      	movs	r3, #176	; 0xb0
    fa26:	005b      	lsls	r3, r3, #1
    fa28:	50d1      	str	r1, [r2, r3]
			PUBNUB_PRINTF(("Content-Length = %d\r\n", (int)pb->http_content_len));

			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"[");
    fa2a:	693b      	ldr	r3, [r7, #16]
    fa2c:	681b      	ldr	r3, [r3, #0]
    fa2e:	4a27      	ldr	r2, [pc, #156]	; (facc <handle_tcpip_recv+0x18c>)
    fa30:	0011      	movs	r1, r2
    fa32:	0018      	movs	r0, r3
    fa34:	4b23      	ldr	r3, [pc, #140]	; (fac4 <handle_tcpip_recv+0x184>)
    fa36:	4798      	blx	r3
    fa38:	0003      	movs	r3, r0
    fa3a:	60bb      	str	r3, [r7, #8]
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
    fa3c:	697b      	ldr	r3, [r7, #20]
    fa3e:	3366      	adds	r3, #102	; 0x66
    fa40:	33ff      	adds	r3, #255	; 0xff
    fa42:	0018      	movs	r0, r3
    fa44:	697a      	ldr	r2, [r7, #20]
    fa46:	23ae      	movs	r3, #174	; 0xae
    fa48:	005b      	lsls	r3, r3, #1
    fa4a:	58d3      	ldr	r3, [r2, r3]
    fa4c:	693a      	ldr	r2, [r7, #16]
    fa4e:	88d2      	ldrh	r2, [r2, #6]
    fa50:	1a9a      	subs	r2, r3, r2
    fa52:	68bb      	ldr	r3, [r7, #8]
    fa54:	0019      	movs	r1, r3
    fa56:	4b1e      	ldr	r3, [pc, #120]	; (fad0 <handle_tcpip_recv+0x190>)
    fa58:	4798      	blx	r3
    fa5a:	e027      	b.n	faac <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));
		} else if (pstrRecv->u16RemainingSize == 0) {
    fa5c:	693b      	ldr	r3, [r7, #16]
    fa5e:	88db      	ldrh	r3, [r3, #6]
    fa60:	2b00      	cmp	r3, #0
    fa62:	d123      	bne.n	faac <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_content_remaining_len = %d\r\n", (int)pb->http_content_remaining_len));

			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
    fa64:	697b      	ldr	r3, [r7, #20]
    fa66:	3366      	adds	r3, #102	; 0x66
    fa68:	33ff      	adds	r3, #255	; 0xff
    fa6a:	001a      	movs	r2, r3
    fa6c:	6979      	ldr	r1, [r7, #20]
    fa6e:	23ae      	movs	r3, #174	; 0xae
    fa70:	005b      	lsls	r3, r3, #1
    fa72:	58c9      	ldr	r1, [r1, r3]
    fa74:	6978      	ldr	r0, [r7, #20]
    fa76:	23b0      	movs	r3, #176	; 0xb0
    fa78:	005b      	lsls	r3, r3, #1
    fa7a:	58c3      	ldr	r3, [r0, r3]
    fa7c:	1acb      	subs	r3, r1, r3
    fa7e:	18d0      	adds	r0, r2, r3
    fa80:	693b      	ldr	r3, [r7, #16]
    fa82:	6819      	ldr	r1, [r3, #0]
    fa84:	693b      	ldr	r3, [r7, #16]
    fa86:	2204      	movs	r2, #4
    fa88:	5e9b      	ldrsh	r3, [r3, r2]
    fa8a:	001a      	movs	r2, r3
    fa8c:	4b10      	ldr	r3, [pc, #64]	; (fad0 <handle_tcpip_recv+0x190>)
    fa8e:	4798      	blx	r3
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));

			parse_subscribe_response(pb);
    fa90:	697b      	ldr	r3, [r7, #20]
    fa92:	0018      	movs	r0, r3
    fa94:	4b0f      	ldr	r3, [pc, #60]	; (fad4 <handle_tcpip_recv+0x194>)
    fa96:	4798      	blx	r3

			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
    fa98:	697b      	ldr	r3, [r7, #20]
    fa9a:	2250      	movs	r2, #80	; 0x50
    fa9c:	2100      	movs	r1, #0
    fa9e:	5499      	strb	r1, [r3, r2]
			pb->state = PS_IDLE;
    faa0:	697b      	ldr	r3, [r7, #20]
    faa2:	2252      	movs	r2, #82	; 0x52
    faa4:	2100      	movs	r1, #0
    faa6:	5499      	strb	r1, [r3, r2]
    faa8:	e000      	b.n	faac <handle_tcpip_recv+0x16c>
			if (pstrRecv->u16RemainingSize == 0) {
				pb->last_result = PNR_OK;
				pb->state = PS_IDLE;
			}

			return;
    faaa:	46c0      	nop			; (mov r8, r8)
			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
			pb->state = PS_IDLE;
		}
	}
}
    faac:	46bd      	mov	sp, r7
    faae:	b006      	add	sp, #24
    fab0:	bd80      	pop	{r7, pc}
    fab2:	46c0      	nop			; (mov r8, r8)
    fab4:	20003ed0 	.word	0x20003ed0
    fab8:	200045b0 	.word	0x200045b0
    fabc:	00007825 	.word	0x00007825
    fac0:	00013cf0 	.word	0x00013cf0
    fac4:	00003151 	.word	0x00003151
    fac8:	00010bdd 	.word	0x00010bdd
    facc:	00013d04 	.word	0x00013d04
    fad0:	00010c55 	.word	0x00010c55
    fad4:	0000f705 	.word	0x0000f705

0000fad8 <handle_dns_found>:

void handle_dns_found(char const *name, uint32_t hostip)
{
    fad8:	b580      	push	{r7, lr}
    fada:	b084      	sub	sp, #16
    fadc:	af00      	add	r7, sp, #0
    fade:	6078      	str	r0, [r7, #4]
    fae0:	6039      	str	r1, [r7, #0]
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
    fae2:	4a13      	ldr	r2, [pc, #76]	; (fb30 <handle_dns_found+0x58>)
    fae4:	687b      	ldr	r3, [r7, #4]
    fae6:	0011      	movs	r1, r2
    fae8:	0018      	movs	r0, r3
    faea:	4b12      	ldr	r3, [pc, #72]	; (fb34 <handle_dns_found+0x5c>)
    faec:	4798      	blx	r3
    faee:	1e03      	subs	r3, r0, #0
    faf0:	d119      	bne.n	fb26 <handle_dns_found+0x4e>
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;
    faf2:	4b11      	ldr	r3, [pc, #68]	; (fb38 <handle_dns_found+0x60>)
    faf4:	683a      	ldr	r2, [r7, #0]
    faf6:	605a      	str	r2, [r3, #4]

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    faf8:	4b10      	ldr	r3, [pc, #64]	; (fb3c <handle_dns_found+0x64>)
    fafa:	60fb      	str	r3, [r7, #12]
    fafc:	e00e      	b.n	fb1c <handle_dns_found+0x44>
		if (pb->state == PS_WAIT_DNS) {
    fafe:	68fb      	ldr	r3, [r7, #12]
    fb00:	2252      	movs	r2, #82	; 0x52
    fb02:	5c9b      	ldrb	r3, [r3, r2]
    fb04:	2b01      	cmp	r3, #1
    fb06:	d103      	bne.n	fb10 <handle_dns_found+0x38>
			handle_start_connect(pb);
    fb08:	68fb      	ldr	r3, [r7, #12]
    fb0a:	0018      	movs	r0, r3
    fb0c:	4b0c      	ldr	r3, [pc, #48]	; (fb40 <handle_dns_found+0x68>)
    fb0e:	4798      	blx	r3
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    fb10:	68fb      	ldr	r3, [r7, #12]
    fb12:	22dc      	movs	r2, #220	; 0xdc
    fb14:	0092      	lsls	r2, r2, #2
    fb16:	4694      	mov	ip, r2
    fb18:	4463      	add	r3, ip
    fb1a:	60fb      	str	r3, [r7, #12]
    fb1c:	4b09      	ldr	r3, [pc, #36]	; (fb44 <handle_dns_found+0x6c>)
    fb1e:	68fa      	ldr	r2, [r7, #12]
    fb20:	429a      	cmp	r2, r3
    fb22:	d1ec      	bne.n	fafe <handle_dns_found+0x26>
    fb24:	e000      	b.n	fb28 <handle_dns_found+0x50>
void handle_dns_found(char const *name, uint32_t hostip)
{
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
		return;
    fb26:	46c0      	nop			; (mov r8, r8)
	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
		if (pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
    fb28:	46bd      	mov	sp, r7
    fb2a:	b004      	add	sp, #16
    fb2c:	bd80      	pop	{r7, pc}
    fb2e:	46c0      	nop			; (mov r8, r8)
    fb30:	00013be0 	.word	0x00013be0
    fb34:	0001156d 	.word	0x0001156d
    fb38:	200047f4 	.word	0x200047f4
    fb3c:	20003ed0 	.word	0x20003ed0
    fb40:	0000f4b5 	.word	0x0000f4b5
    fb44:	200045b0 	.word	0x200045b0

0000fb48 <handle_tcpip>:

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    fb48:	b580      	push	{r7, lr}
    fb4a:	b086      	sub	sp, #24
    fb4c:	af00      	add	r7, sp, #0
    fb4e:	603a      	str	r2, [r7, #0]
    fb50:	1dfb      	adds	r3, r7, #7
    fb52:	1c02      	adds	r2, r0, #0
    fb54:	701a      	strb	r2, [r3, #0]
    fb56:	1dbb      	adds	r3, r7, #6
    fb58:	1c0a      	adds	r2, r1, #0
    fb5a:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
    fb5c:	1dbb      	adds	r3, r7, #6
    fb5e:	781b      	ldrb	r3, [r3, #0]
    fb60:	2b06      	cmp	r3, #6
    fb62:	d023      	beq.n	fbac <handle_tcpip+0x64>
    fb64:	2b07      	cmp	r3, #7
    fb66:	d00c      	beq.n	fb82 <handle_tcpip+0x3a>
    fb68:	2b05      	cmp	r3, #5
    fb6a:	d000      	beq.n	fb6e <handle_tcpip+0x26>
		handle_tcpip_recv(sock, u8Msg, pvMsg);
	}
	break;

	default:
		break;
    fb6c:	e034      	b.n	fbd8 <handle_tcpip+0x90>
void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	case SOCKET_MSG_CONNECT:
	{
		handle_tcpip_connect(sock, u8Msg, pvMsg);
    fb6e:	683a      	ldr	r2, [r7, #0]
    fb70:	1dbb      	adds	r3, r7, #6
    fb72:	7819      	ldrb	r1, [r3, #0]
    fb74:	1dfb      	adds	r3, r7, #7
    fb76:	781b      	ldrb	r3, [r3, #0]
    fb78:	b25b      	sxtb	r3, r3
    fb7a:	0018      	movs	r0, r3
    fb7c:	4b18      	ldr	r3, [pc, #96]	; (fbe0 <handle_tcpip+0x98>)
    fb7e:	4798      	blx	r3
	}
	break;
    fb80:	e02a      	b.n	fbd8 <handle_tcpip+0x90>

	case SOCKET_MSG_SEND:
	{
		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_SEND);
    fb82:	1dfb      	adds	r3, r7, #7
    fb84:	781b      	ldrb	r3, [r3, #0]
    fb86:	b25b      	sxtb	r3, r3
    fb88:	2103      	movs	r1, #3
    fb8a:	0018      	movs	r0, r3
    fb8c:	4b15      	ldr	r3, [pc, #84]	; (fbe4 <handle_tcpip+0x9c>)
    fb8e:	4798      	blx	r3
    fb90:	0003      	movs	r3, r0
    fb92:	617b      	str	r3, [r7, #20]

		if (pb != NULL) {
    fb94:	697b      	ldr	r3, [r7, #20]
    fb96:	2b00      	cmp	r3, #0
    fb98:	d01d      	beq.n	fbd6 <handle_tcpip+0x8e>
			pb->state = PS_WAIT_RECV;
    fb9a:	697b      	ldr	r3, [r7, #20]
    fb9c:	2252      	movs	r2, #82	; 0x52
    fb9e:	2104      	movs	r1, #4
    fba0:	5499      	strb	r1, [r3, r2]
			handle_transaction(pb);
    fba2:	697b      	ldr	r3, [r7, #20]
    fba4:	0018      	movs	r0, r3
    fba6:	4b10      	ldr	r3, [pc, #64]	; (fbe8 <handle_tcpip+0xa0>)
    fba8:	4798      	blx	r3
		}
	}
	break;
    fbaa:	e014      	b.n	fbd6 <handle_tcpip+0x8e>

	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    fbac:	683b      	ldr	r3, [r7, #0]
    fbae:	613b      	str	r3, [r7, #16]
			PUBNUB_PRINTF(("handle_tcpip: msg: %s\r\n", pstrRecv->pu8Buffer));
		} else {
			PUBNUB_PRINTF(("handle_tcpip: recv error!\r\n"));
		}

		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_RECV);
    fbb0:	1dfb      	adds	r3, r7, #7
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	b25b      	sxtb	r3, r3
    fbb6:	2104      	movs	r1, #4
    fbb8:	0018      	movs	r0, r3
    fbba:	4b0a      	ldr	r3, [pc, #40]	; (fbe4 <handle_tcpip+0x9c>)
    fbbc:	4798      	blx	r3
    fbbe:	0003      	movs	r3, r0
    fbc0:	60fb      	str	r3, [r7, #12]

		if (pb != NULL) {
		}

		handle_tcpip_recv(sock, u8Msg, pvMsg);
    fbc2:	683a      	ldr	r2, [r7, #0]
    fbc4:	1dbb      	adds	r3, r7, #6
    fbc6:	7819      	ldrb	r1, [r3, #0]
    fbc8:	1dfb      	adds	r3, r7, #7
    fbca:	781b      	ldrb	r3, [r3, #0]
    fbcc:	b25b      	sxtb	r3, r3
    fbce:	0018      	movs	r0, r3
    fbd0:	4b06      	ldr	r3, [pc, #24]	; (fbec <handle_tcpip+0xa4>)
    fbd2:	4798      	blx	r3
	}
	break;
    fbd4:	e000      	b.n	fbd8 <handle_tcpip+0x90>
		if (pb != NULL) {
			pb->state = PS_WAIT_RECV;
			handle_transaction(pb);
		}
	}
	break;
    fbd6:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
    fbd8:	46c0      	nop			; (mov r8, r8)
    fbda:	46bd      	mov	sp, r7
    fbdc:	b006      	add	sp, #24
    fbde:	bd80      	pop	{r7, pc}
    fbe0:	0000f8bd 	.word	0x0000f8bd
    fbe4:	0000f455 	.word	0x0000f455
    fbe8:	0000f36d 	.word	0x0000f36d
    fbec:	0000f941 	.word	0x0000f941

0000fbf0 <pubnub_get_ctx>:

pubnub_t *pubnub_get_ctx(uint8_t index)
{
    fbf0:	b590      	push	{r4, r7, lr}
    fbf2:	b083      	sub	sp, #12
    fbf4:	af00      	add	r7, sp, #0
    fbf6:	0002      	movs	r2, r0
    fbf8:	1dfb      	adds	r3, r7, #7
    fbfa:	701a      	strb	r2, [r3, #0]
	assert(index < PUBNUB_CTX_MAX);
    fbfc:	1dfb      	adds	r3, r7, #7
    fbfe:	781b      	ldrb	r3, [r3, #0]
    fc00:	2b01      	cmp	r3, #1
    fc02:	d908      	bls.n	fc16 <pubnub_get_ctx+0x26>
    fc04:	4c09      	ldr	r4, [pc, #36]	; (fc2c <pubnub_get_ctx+0x3c>)
    fc06:	4a0a      	ldr	r2, [pc, #40]	; (fc30 <pubnub_get_ctx+0x40>)
    fc08:	2376      	movs	r3, #118	; 0x76
    fc0a:	33ff      	adds	r3, #255	; 0xff
    fc0c:	0019      	movs	r1, r3
    fc0e:	4809      	ldr	r0, [pc, #36]	; (fc34 <pubnub_get_ctx+0x44>)
    fc10:	0023      	movs	r3, r4
    fc12:	4c09      	ldr	r4, [pc, #36]	; (fc38 <pubnub_get_ctx+0x48>)
    fc14:	47a0      	blx	r4
	return m_aCtx + index;
    fc16:	1dfb      	adds	r3, r7, #7
    fc18:	781b      	ldrb	r3, [r3, #0]
    fc1a:	22dc      	movs	r2, #220	; 0xdc
    fc1c:	0092      	lsls	r2, r2, #2
    fc1e:	435a      	muls	r2, r3
    fc20:	4b06      	ldr	r3, [pc, #24]	; (fc3c <pubnub_get_ctx+0x4c>)
    fc22:	18d3      	adds	r3, r2, r3
}
    fc24:	0018      	movs	r0, r3
    fc26:	46bd      	mov	sp, r7
    fc28:	b003      	add	sp, #12
    fc2a:	bd90      	pop	{r4, r7, pc}
    fc2c:	00013d08 	.word	0x00013d08
    fc30:	00013e04 	.word	0x00013e04
    fc34:	00013c5c 	.word	0x00013c5c
    fc38:	00010b9d 	.word	0x00010b9d
    fc3c:	20003ed0 	.word	0x20003ed0

0000fc40 <pubnub_init>:

void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
    fc40:	b590      	push	{r4, r7, lr}
    fc42:	b085      	sub	sp, #20
    fc44:	af00      	add	r7, sp, #0
    fc46:	60f8      	str	r0, [r7, #12]
    fc48:	60b9      	str	r1, [r7, #8]
    fc4a:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    fc4c:	68fb      	ldr	r3, [r7, #12]
    fc4e:	0018      	movs	r0, r3
    fc50:	4b17      	ldr	r3, [pc, #92]	; (fcb0 <pubnub_init+0x70>)
    fc52:	4798      	blx	r3
    fc54:	1e03      	subs	r3, r0, #0
    fc56:	d108      	bne.n	fc6a <pubnub_init+0x2a>
    fc58:	4c16      	ldr	r4, [pc, #88]	; (fcb4 <pubnub_init+0x74>)
    fc5a:	4a17      	ldr	r2, [pc, #92]	; (fcb8 <pubnub_init+0x78>)
    fc5c:	237c      	movs	r3, #124	; 0x7c
    fc5e:	33ff      	adds	r3, #255	; 0xff
    fc60:	0019      	movs	r1, r3
    fc62:	4816      	ldr	r0, [pc, #88]	; (fcbc <pubnub_init+0x7c>)
    fc64:	0023      	movs	r3, r4
    fc66:	4c16      	ldr	r4, [pc, #88]	; (fcc0 <pubnub_init+0x80>)
    fc68:	47a0      	blx	r4

	pb->publish_key = publish_key;
    fc6a:	68fb      	ldr	r3, [r7, #12]
    fc6c:	68ba      	ldr	r2, [r7, #8]
    fc6e:	601a      	str	r2, [r3, #0]
	pb->subscribe_key = subscribe_key;
    fc70:	68fb      	ldr	r3, [r7, #12]
    fc72:	687a      	ldr	r2, [r7, #4]
    fc74:	605a      	str	r2, [r3, #4]
	pb->timetoken[0] = '0';
    fc76:	68fb      	ldr	r3, [r7, #12]
    fc78:	2230      	movs	r2, #48	; 0x30
    fc7a:	741a      	strb	r2, [r3, #16]
	pb->timetoken[1] = '\0';
    fc7c:	68fb      	ldr	r3, [r7, #12]
    fc7e:	2200      	movs	r2, #0
    fc80:	745a      	strb	r2, [r3, #17]
	pb->uuid = pb->auth = NULL;
    fc82:	68fb      	ldr	r3, [r7, #12]
    fc84:	2200      	movs	r2, #0
    fc86:	60da      	str	r2, [r3, #12]
    fc88:	68fb      	ldr	r3, [r7, #12]
    fc8a:	68da      	ldr	r2, [r3, #12]
    fc8c:	68fb      	ldr	r3, [r7, #12]
    fc8e:	609a      	str	r2, [r3, #8]
	pb->tcp_socket = -1;
    fc90:	68fb      	ldr	r3, [r7, #12]
    fc92:	2253      	movs	r2, #83	; 0x53
    fc94:	21ff      	movs	r1, #255	; 0xff
    fc96:	5499      	strb	r1, [r3, r2]
	pb->state = PS_IDLE;
    fc98:	68fb      	ldr	r3, [r7, #12]
    fc9a:	2252      	movs	r2, #82	; 0x52
    fc9c:	2100      	movs	r1, #0
    fc9e:	5499      	strb	r1, [r3, r2]
	pb->last_result = PNR_IO_ERROR;
    fca0:	68fb      	ldr	r3, [r7, #12]
    fca2:	2250      	movs	r2, #80	; 0x50
    fca4:	2102      	movs	r1, #2
    fca6:	5499      	strb	r1, [r3, r2]
}
    fca8:	46c0      	nop			; (mov r8, r8)
    fcaa:	46bd      	mov	sp, r7
    fcac:	b005      	add	sp, #20
    fcae:	bd90      	pop	{r4, r7, pc}
    fcb0:	0000f41d 	.word	0x0000f41d
    fcb4:	00013c48 	.word	0x00013c48
    fcb8:	00013e14 	.word	0x00013e14
    fcbc:	00013c5c 	.word	0x00013c5c
    fcc0:	00010b9d 	.word	0x00010b9d

0000fcc4 <pubnub_publish>:

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    fcc4:	b5b0      	push	{r4, r5, r7, lr}
    fcc6:	b08a      	sub	sp, #40	; 0x28
    fcc8:	af02      	add	r7, sp, #8
    fcca:	60f8      	str	r0, [r7, #12]
    fccc:	60b9      	str	r1, [r7, #8]
    fcce:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    fcd0:	68fb      	ldr	r3, [r7, #12]
    fcd2:	0018      	movs	r0, r3
    fcd4:	4b6c      	ldr	r3, [pc, #432]	; (fe88 <pubnub_publish+0x1c4>)
    fcd6:	4798      	blx	r3
    fcd8:	1e03      	subs	r3, r0, #0
    fcda:	d108      	bne.n	fcee <pubnub_publish+0x2a>
    fcdc:	4c6b      	ldr	r4, [pc, #428]	; (fe8c <pubnub_publish+0x1c8>)
    fcde:	4a6c      	ldr	r2, [pc, #432]	; (fe90 <pubnub_publish+0x1cc>)
    fce0:	238a      	movs	r3, #138	; 0x8a
    fce2:	33ff      	adds	r3, #255	; 0xff
    fce4:	0019      	movs	r1, r3
    fce6:	486b      	ldr	r0, [pc, #428]	; (fe94 <pubnub_publish+0x1d0>)
    fce8:	0023      	movs	r3, r4
    fcea:	4c6b      	ldr	r4, [pc, #428]	; (fe98 <pubnub_publish+0x1d4>)
    fcec:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    fcee:	68fb      	ldr	r3, [r7, #12]
    fcf0:	2252      	movs	r2, #82	; 0x52
    fcf2:	5c9b      	ldrb	r3, [r3, r2]
    fcf4:	2b00      	cmp	r3, #0
    fcf6:	d001      	beq.n	fcfc <pubnub_publish+0x38>
		return false;
    fcf8:	2300      	movs	r3, #0
    fcfa:	e0c0      	b.n	fe7e <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    fcfc:	68fb      	ldr	r3, [r7, #12]
    fcfe:	2251      	movs	r2, #81	; 0x51
    fd00:	2102      	movs	r1, #2
    fd02:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    fd04:	68fb      	ldr	r3, [r7, #12]
    fd06:	3354      	adds	r3, #84	; 0x54
    fd08:	0018      	movs	r0, r3
    fd0a:	68fb      	ldr	r3, [r7, #12]
    fd0c:	681d      	ldr	r5, [r3, #0]
    fd0e:	68fb      	ldr	r3, [r7, #12]
    fd10:	685b      	ldr	r3, [r3, #4]
    fd12:	4c62      	ldr	r4, [pc, #392]	; (fe9c <pubnub_publish+0x1d8>)
    fd14:	2280      	movs	r2, #128	; 0x80
    fd16:	0051      	lsls	r1, r2, #1
    fd18:	68ba      	ldr	r2, [r7, #8]
    fd1a:	9201      	str	r2, [sp, #4]
    fd1c:	9300      	str	r3, [sp, #0]
    fd1e:	002b      	movs	r3, r5
    fd20:	0022      	movs	r2, r4
    fd22:	4c5f      	ldr	r4, [pc, #380]	; (fea0 <pubnub_publish+0x1dc>)
    fd24:	47a0      	blx	r4
    fd26:	0003      	movs	r3, r0
    fd28:	0019      	movs	r1, r3
    fd2a:	68fa      	ldr	r2, [r7, #12]
    fd2c:	23ac      	movs	r3, #172	; 0xac
    fd2e:	005b      	lsls	r3, r3, #1
    fd30:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    fd32:	687b      	ldr	r3, [r7, #4]
    fd34:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    fd36:	e08a      	b.n	fe4e <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    fd38:	4a5a      	ldr	r2, [pc, #360]	; (fea4 <pubnub_publish+0x1e0>)
    fd3a:	69fb      	ldr	r3, [r7, #28]
    fd3c:	0011      	movs	r1, r2
    fd3e:	0018      	movs	r0, r3
    fd40:	4b59      	ldr	r3, [pc, #356]	; (fea8 <pubnub_publish+0x1e4>)
    fd42:	4798      	blx	r3
    fd44:	0003      	movs	r3, r0
    fd46:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    fd48:	69bb      	ldr	r3, [r7, #24]
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d034      	beq.n	fdb8 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    fd4e:	68fa      	ldr	r2, [r7, #12]
    fd50:	23ac      	movs	r3, #172	; 0xac
    fd52:	005b      	lsls	r3, r3, #1
    fd54:	58d3      	ldr	r3, [r2, r3]
    fd56:	22ff      	movs	r2, #255	; 0xff
    fd58:	1ad2      	subs	r2, r2, r3
    fd5a:	69bb      	ldr	r3, [r7, #24]
    fd5c:	429a      	cmp	r2, r3
    fd5e:	d206      	bcs.n	fd6e <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    fd60:	68fa      	ldr	r2, [r7, #12]
    fd62:	23ac      	movs	r3, #172	; 0xac
    fd64:	005b      	lsls	r3, r3, #1
    fd66:	2100      	movs	r1, #0
    fd68:	50d1      	str	r1, [r2, r3]
				return false;
    fd6a:	2300      	movs	r3, #0
    fd6c:	e087      	b.n	fe7e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    fd6e:	68fb      	ldr	r3, [r7, #12]
    fd70:	3354      	adds	r3, #84	; 0x54
    fd72:	001a      	movs	r2, r3
    fd74:	68f9      	ldr	r1, [r7, #12]
    fd76:	23ac      	movs	r3, #172	; 0xac
    fd78:	005b      	lsls	r3, r3, #1
    fd7a:	58cb      	ldr	r3, [r1, r3]
    fd7c:	18d3      	adds	r3, r2, r3
    fd7e:	69ba      	ldr	r2, [r7, #24]
    fd80:	69f9      	ldr	r1, [r7, #28]
    fd82:	0018      	movs	r0, r3
    fd84:	4b49      	ldr	r3, [pc, #292]	; (feac <pubnub_publish+0x1e8>)
    fd86:	4798      	blx	r3
			pb->http_buf_len += okspan;
    fd88:	68fa      	ldr	r2, [r7, #12]
    fd8a:	23ac      	movs	r3, #172	; 0xac
    fd8c:	005b      	lsls	r3, r3, #1
    fd8e:	58d2      	ldr	r2, [r2, r3]
    fd90:	69bb      	ldr	r3, [r7, #24]
    fd92:	18d1      	adds	r1, r2, r3
    fd94:	68fa      	ldr	r2, [r7, #12]
    fd96:	23ac      	movs	r3, #172	; 0xac
    fd98:	005b      	lsls	r3, r3, #1
    fd9a:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    fd9c:	68fa      	ldr	r2, [r7, #12]
    fd9e:	23ac      	movs	r3, #172	; 0xac
    fda0:	005b      	lsls	r3, r3, #1
    fda2:	58d3      	ldr	r3, [r2, r3]
    fda4:	68fa      	ldr	r2, [r7, #12]
    fda6:	2154      	movs	r1, #84	; 0x54
    fda8:	18d3      	adds	r3, r2, r3
    fdaa:	185b      	adds	r3, r3, r1
    fdac:	2200      	movs	r2, #0
    fdae:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    fdb0:	69fa      	ldr	r2, [r7, #28]
    fdb2:	69bb      	ldr	r3, [r7, #24]
    fdb4:	18d3      	adds	r3, r2, r3
    fdb6:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    fdb8:	69fb      	ldr	r3, [r7, #28]
    fdba:	781b      	ldrb	r3, [r3, #0]
    fdbc:	2b00      	cmp	r3, #0
    fdbe:	d046      	beq.n	fe4e <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    fdc0:	2314      	movs	r3, #20
    fdc2:	18fb      	adds	r3, r7, r3
    fdc4:	2200      	movs	r2, #0
    fdc6:	601a      	str	r2, [r3, #0]
    fdc8:	2314      	movs	r3, #20
    fdca:	18fb      	adds	r3, r7, r3
    fdcc:	2225      	movs	r2, #37	; 0x25
    fdce:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    fdd0:	69fb      	ldr	r3, [r7, #28]
    fdd2:	781b      	ldrb	r3, [r3, #0]
    fdd4:	091b      	lsrs	r3, r3, #4
    fdd6:	b2db      	uxtb	r3, r3
    fdd8:	001a      	movs	r2, r3
    fdda:	4b35      	ldr	r3, [pc, #212]	; (feb0 <pubnub_publish+0x1ec>)
    fddc:	5c9a      	ldrb	r2, [r3, r2]
    fdde:	2314      	movs	r3, #20
    fde0:	18fb      	adds	r3, r7, r3
    fde2:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    fde4:	69fb      	ldr	r3, [r7, #28]
    fde6:	781b      	ldrb	r3, [r3, #0]
    fde8:	001a      	movs	r2, r3
    fdea:	230f      	movs	r3, #15
    fdec:	4013      	ands	r3, r2
    fdee:	4a30      	ldr	r2, [pc, #192]	; (feb0 <pubnub_publish+0x1ec>)
    fdf0:	5cd2      	ldrb	r2, [r2, r3]
    fdf2:	2314      	movs	r3, #20
    fdf4:	18fb      	adds	r3, r7, r3
    fdf6:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    fdf8:	68fa      	ldr	r2, [r7, #12]
    fdfa:	23ac      	movs	r3, #172	; 0xac
    fdfc:	005b      	lsls	r3, r3, #1
    fdfe:	58d3      	ldr	r3, [r2, r3]
    fe00:	22ff      	movs	r2, #255	; 0xff
    fe02:	1ad3      	subs	r3, r2, r3
    fe04:	2b02      	cmp	r3, #2
    fe06:	d806      	bhi.n	fe16 <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    fe08:	68fa      	ldr	r2, [r7, #12]
    fe0a:	23ac      	movs	r3, #172	; 0xac
    fe0c:	005b      	lsls	r3, r3, #1
    fe0e:	2100      	movs	r1, #0
    fe10:	50d1      	str	r1, [r2, r3]
				return false;
    fe12:	2300      	movs	r3, #0
    fe14:	e033      	b.n	fe7e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    fe16:	68fb      	ldr	r3, [r7, #12]
    fe18:	3354      	adds	r3, #84	; 0x54
    fe1a:	001a      	movs	r2, r3
    fe1c:	68f9      	ldr	r1, [r7, #12]
    fe1e:	23ac      	movs	r3, #172	; 0xac
    fe20:	005b      	lsls	r3, r3, #1
    fe22:	58cb      	ldr	r3, [r1, r3]
    fe24:	18d2      	adds	r2, r2, r3
    fe26:	2314      	movs	r3, #20
    fe28:	18fb      	adds	r3, r7, r3
    fe2a:	0010      	movs	r0, r2
    fe2c:	0019      	movs	r1, r3
    fe2e:	2304      	movs	r3, #4
    fe30:	001a      	movs	r2, r3
    fe32:	4b1e      	ldr	r3, [pc, #120]	; (feac <pubnub_publish+0x1e8>)
    fe34:	4798      	blx	r3
			pb->http_buf_len += 3;
    fe36:	68fa      	ldr	r2, [r7, #12]
    fe38:	23ac      	movs	r3, #172	; 0xac
    fe3a:	005b      	lsls	r3, r3, #1
    fe3c:	58d3      	ldr	r3, [r2, r3]
    fe3e:	1cd9      	adds	r1, r3, #3
    fe40:	68fa      	ldr	r2, [r7, #12]
    fe42:	23ac      	movs	r3, #172	; 0xac
    fe44:	005b      	lsls	r3, r3, #1
    fe46:	50d1      	str	r1, [r2, r3]
			++pmessage;
    fe48:	69fb      	ldr	r3, [r7, #28]
    fe4a:	3301      	adds	r3, #1
    fe4c:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    fe4e:	69fb      	ldr	r3, [r7, #28]
    fe50:	781b      	ldrb	r3, [r3, #0]
    fe52:	2b00      	cmp	r3, #0
    fe54:	d000      	beq.n	fe58 <pubnub_publish+0x194>
    fe56:	e76f      	b.n	fd38 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    fe58:	68fb      	ldr	r3, [r7, #12]
    fe5a:	2250      	movs	r2, #80	; 0x50
    fe5c:	5c9b      	ldrb	r3, [r3, r2]
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d108      	bne.n	fe74 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    fe62:	68fb      	ldr	r3, [r7, #12]
    fe64:	2252      	movs	r2, #82	; 0x52
    fe66:	2103      	movs	r1, #3
    fe68:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    fe6a:	68fb      	ldr	r3, [r7, #12]
    fe6c:	0018      	movs	r0, r3
    fe6e:	4b11      	ldr	r3, [pc, #68]	; (feb4 <pubnub_publish+0x1f0>)
    fe70:	4798      	blx	r3
    fe72:	e003      	b.n	fe7c <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    fe74:	68fb      	ldr	r3, [r7, #12]
    fe76:	0018      	movs	r0, r3
    fe78:	4b0f      	ldr	r3, [pc, #60]	; (feb8 <pubnub_publish+0x1f4>)
    fe7a:	4798      	blx	r3
	}

	return true;
    fe7c:	2301      	movs	r3, #1
}
    fe7e:	0018      	movs	r0, r3
    fe80:	46bd      	mov	sp, r7
    fe82:	b008      	add	sp, #32
    fe84:	bdb0      	pop	{r4, r5, r7, pc}
    fe86:	46c0      	nop			; (mov r8, r8)
    fe88:	0000f41d 	.word	0x0000f41d
    fe8c:	00013c48 	.word	0x00013c48
    fe90:	00013e20 	.word	0x00013e20
    fe94:	00013c5c 	.word	0x00013c5c
    fe98:	00010b9d 	.word	0x00010b9d
    fe9c:	00013d20 	.word	0x00013d20
    fea0:	000114c5 	.word	0x000114c5
    fea4:	00013d38 	.word	0x00013d38
    fea8:	000115c3 	.word	0x000115c3
    feac:	00010c55 	.word	0x00010c55
    feb0:	00013d84 	.word	0x00013d84
    feb4:	0000f36d 	.word	0x0000f36d
    feb8:	0000f4b5 	.word	0x0000f4b5

0000febc <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    febc:	b5f0      	push	{r4, r5, r6, r7, lr}
    febe:	4657      	mov	r7, sl
    fec0:	464e      	mov	r6, r9
    fec2:	4645      	mov	r5, r8
    fec4:	b4e0      	push	{r5, r6, r7}
    fec6:	b08c      	sub	sp, #48	; 0x30
    fec8:	af0a      	add	r7, sp, #40	; 0x28
    feca:	6078      	str	r0, [r7, #4]
    fecc:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    fece:	687b      	ldr	r3, [r7, #4]
    fed0:	0018      	movs	r0, r3
    fed2:	4b4a      	ldr	r3, [pc, #296]	; (fffc <pubnub_subscribe+0x140>)
    fed4:	4798      	blx	r3
    fed6:	1e03      	subs	r3, r0, #0
    fed8:	d108      	bne.n	feec <pubnub_subscribe+0x30>
    feda:	4c49      	ldr	r4, [pc, #292]	; (10000 <pubnub_subscribe+0x144>)
    fedc:	4a49      	ldr	r2, [pc, #292]	; (10004 <pubnub_subscribe+0x148>)
    fede:	23c2      	movs	r3, #194	; 0xc2
    fee0:	33ff      	adds	r3, #255	; 0xff
    fee2:	0019      	movs	r1, r3
    fee4:	4848      	ldr	r0, [pc, #288]	; (10008 <pubnub_subscribe+0x14c>)
    fee6:	0023      	movs	r3, r4
    fee8:	4c48      	ldr	r4, [pc, #288]	; (1000c <pubnub_subscribe+0x150>)
    feea:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    feec:	687b      	ldr	r3, [r7, #4]
    feee:	2252      	movs	r2, #82	; 0x52
    fef0:	5c9b      	ldrb	r3, [r3, r2]
    fef2:	2b00      	cmp	r3, #0
    fef4:	d001      	beq.n	fefa <pubnub_subscribe+0x3e>
		return false;
    fef6:	2300      	movs	r3, #0
    fef8:	e078      	b.n	ffec <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	2251      	movs	r2, #81	; 0x51
    fefe:	2101      	movs	r1, #1
    ff00:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    ff02:	687b      	ldr	r3, [r7, #4]
    ff04:	3366      	adds	r3, #102	; 0x66
    ff06:	33ff      	adds	r3, #255	; 0xff
    ff08:	0018      	movs	r0, r3
    ff0a:	2380      	movs	r3, #128	; 0x80
    ff0c:	009b      	lsls	r3, r3, #2
    ff0e:	001a      	movs	r2, r3
    ff10:	2100      	movs	r1, #0
    ff12:	4b3f      	ldr	r3, [pc, #252]	; (10010 <pubnub_subscribe+0x154>)
    ff14:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff16:	687b      	ldr	r3, [r7, #4]
    ff18:	2254      	movs	r2, #84	; 0x54
    ff1a:	4694      	mov	ip, r2
    ff1c:	449c      	add	ip, r3
    ff1e:	687b      	ldr	r3, [r7, #4]
    ff20:	685b      	ldr	r3, [r3, #4]
    ff22:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    ff24:	687b      	ldr	r3, [r7, #4]
    ff26:	3310      	adds	r3, #16
    ff28:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    ff2a:	687b      	ldr	r3, [r7, #4]
    ff2c:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff2e:	2b00      	cmp	r3, #0
    ff30:	d001      	beq.n	ff36 <pubnub_subscribe+0x7a>
    ff32:	4b38      	ldr	r3, [pc, #224]	; (10014 <pubnub_subscribe+0x158>)
    ff34:	e000      	b.n	ff38 <pubnub_subscribe+0x7c>
    ff36:	4b38      	ldr	r3, [pc, #224]	; (10018 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    ff38:	687a      	ldr	r2, [r7, #4]
    ff3a:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff3c:	2a00      	cmp	r2, #0
    ff3e:	d002      	beq.n	ff46 <pubnub_subscribe+0x8a>
    ff40:	687a      	ldr	r2, [r7, #4]
    ff42:	6892      	ldr	r2, [r2, #8]
    ff44:	e000      	b.n	ff48 <pubnub_subscribe+0x8c>
    ff46:	4a34      	ldr	r2, [pc, #208]	; (10018 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    ff48:	6879      	ldr	r1, [r7, #4]
    ff4a:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff4c:	2900      	cmp	r1, #0
    ff4e:	d005      	beq.n	ff5c <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    ff50:	6879      	ldr	r1, [r7, #4]
    ff52:	68c9      	ldr	r1, [r1, #12]
    ff54:	2900      	cmp	r1, #0
    ff56:	d001      	beq.n	ff5c <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff58:	4930      	ldr	r1, [pc, #192]	; (1001c <pubnub_subscribe+0x160>)
    ff5a:	e000      	b.n	ff5e <pubnub_subscribe+0xa2>
    ff5c:	492e      	ldr	r1, [pc, #184]	; (10018 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ff5e:	6878      	ldr	r0, [r7, #4]
    ff60:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff62:	2800      	cmp	r0, #0
    ff64:	d005      	beq.n	ff72 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ff66:	6878      	ldr	r0, [r7, #4]
    ff68:	68c0      	ldr	r0, [r0, #12]
    ff6a:	2800      	cmp	r0, #0
    ff6c:	d001      	beq.n	ff72 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff6e:	482c      	ldr	r0, [pc, #176]	; (10020 <pubnub_subscribe+0x164>)
    ff70:	e000      	b.n	ff74 <pubnub_subscribe+0xb8>
    ff72:	4829      	ldr	r0, [pc, #164]	; (10018 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ff74:	687c      	ldr	r4, [r7, #4]
    ff76:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff78:	2c00      	cmp	r4, #0
    ff7a:	d006      	beq.n	ff8a <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ff7c:	687c      	ldr	r4, [r7, #4]
    ff7e:	68e4      	ldr	r4, [r4, #12]
    ff80:	2c00      	cmp	r4, #0
    ff82:	d002      	beq.n	ff8a <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ff84:	687c      	ldr	r4, [r7, #4]
    ff86:	68e4      	ldr	r4, [r4, #12]
    ff88:	e000      	b.n	ff8c <pubnub_subscribe+0xd0>
    ff8a:	4c23      	ldr	r4, [pc, #140]	; (10018 <pubnub_subscribe+0x15c>)
    ff8c:	4e25      	ldr	r6, [pc, #148]	; (10024 <pubnub_subscribe+0x168>)
    ff8e:	46b1      	mov	r9, r6
    ff90:	2680      	movs	r6, #128	; 0x80
    ff92:	0076      	lsls	r6, r6, #1
    ff94:	46b0      	mov	r8, r6
    ff96:	4e24      	ldr	r6, [pc, #144]	; (10028 <pubnub_subscribe+0x16c>)
    ff98:	9608      	str	r6, [sp, #32]
    ff9a:	4e1f      	ldr	r6, [pc, #124]	; (10018 <pubnub_subscribe+0x15c>)
    ff9c:	9607      	str	r6, [sp, #28]
    ff9e:	9406      	str	r4, [sp, #24]
    ffa0:	9005      	str	r0, [sp, #20]
    ffa2:	9104      	str	r1, [sp, #16]
    ffa4:	9203      	str	r2, [sp, #12]
    ffa6:	9302      	str	r3, [sp, #8]
    ffa8:	9501      	str	r5, [sp, #4]
    ffaa:	683b      	ldr	r3, [r7, #0]
    ffac:	9300      	str	r3, [sp, #0]
    ffae:	4653      	mov	r3, sl
    ffb0:	464a      	mov	r2, r9
    ffb2:	4641      	mov	r1, r8
    ffb4:	4660      	mov	r0, ip
    ffb6:	4c1d      	ldr	r4, [pc, #116]	; (1002c <pubnub_subscribe+0x170>)
    ffb8:	47a0      	blx	r4
    ffba:	0003      	movs	r3, r0
    ffbc:	0019      	movs	r1, r3
    ffbe:	687a      	ldr	r2, [r7, #4]
    ffc0:	23ac      	movs	r3, #172	; 0xac
    ffc2:	005b      	lsls	r3, r3, #1
    ffc4:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    ffc6:	687b      	ldr	r3, [r7, #4]
    ffc8:	2250      	movs	r2, #80	; 0x50
    ffca:	5c9b      	ldrb	r3, [r3, r2]
    ffcc:	2b00      	cmp	r3, #0
    ffce:	d108      	bne.n	ffe2 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    ffd0:	687b      	ldr	r3, [r7, #4]
    ffd2:	2252      	movs	r2, #82	; 0x52
    ffd4:	2103      	movs	r1, #3
    ffd6:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    ffd8:	687b      	ldr	r3, [r7, #4]
    ffda:	0018      	movs	r0, r3
    ffdc:	4b14      	ldr	r3, [pc, #80]	; (10030 <pubnub_subscribe+0x174>)
    ffde:	4798      	blx	r3
    ffe0:	e003      	b.n	ffea <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    ffe2:	687b      	ldr	r3, [r7, #4]
    ffe4:	0018      	movs	r0, r3
    ffe6:	4b13      	ldr	r3, [pc, #76]	; (10034 <pubnub_subscribe+0x178>)
    ffe8:	4798      	blx	r3
	}

	return true;
    ffea:	2301      	movs	r3, #1
}
    ffec:	0018      	movs	r0, r3
    ffee:	46bd      	mov	sp, r7
    fff0:	b002      	add	sp, #8
    fff2:	bc1c      	pop	{r2, r3, r4}
    fff4:	4690      	mov	r8, r2
    fff6:	4699      	mov	r9, r3
    fff8:	46a2      	mov	sl, r4
    fffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fffc:	0000f41d 	.word	0x0000f41d
   10000:	00013c48 	.word	0x00013c48
   10004:	00013e30 	.word	0x00013e30
   10008:	00013c5c 	.word	0x00013c5c
   1000c:	00010b9d 	.word	0x00010b9d
   10010:	00010c67 	.word	0x00010c67
   10014:	00013d98 	.word	0x00013d98
   10018:	00013da0 	.word	0x00013da0
   1001c:	00013da4 	.word	0x00013da4
   10020:	00013da8 	.word	0x00013da8
   10024:	00013db0 	.word	0x00013db0
   10028:	00013de8 	.word	0x00013de8
   1002c:	000114c5 	.word	0x000114c5
   10030:	0000f36d 	.word	0x0000f36d
   10034:	0000f4b5 	.word	0x0000f4b5

00010038 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
   10038:	b590      	push	{r4, r7, lr}
   1003a:	b085      	sub	sp, #20
   1003c:	af00      	add	r7, sp, #0
   1003e:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
   10040:	687b      	ldr	r3, [r7, #4]
   10042:	0018      	movs	r0, r3
   10044:	4b20      	ldr	r3, [pc, #128]	; (100c8 <pubnub_get+0x90>)
   10046:	4798      	blx	r3
   10048:	1e03      	subs	r3, r0, #0
   1004a:	d108      	bne.n	1005e <pubnub_get+0x26>
   1004c:	4c1f      	ldr	r4, [pc, #124]	; (100cc <pubnub_get+0x94>)
   1004e:	4a20      	ldr	r2, [pc, #128]	; (100d0 <pubnub_get+0x98>)
   10050:	23e0      	movs	r3, #224	; 0xe0
   10052:	33ff      	adds	r3, #255	; 0xff
   10054:	0019      	movs	r1, r3
   10056:	481f      	ldr	r0, [pc, #124]	; (100d4 <pubnub_get+0x9c>)
   10058:	0023      	movs	r3, r4
   1005a:	4c1f      	ldr	r4, [pc, #124]	; (100d8 <pubnub_get+0xa0>)
   1005c:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
   1005e:	687b      	ldr	r3, [r7, #4]
   10060:	4a1e      	ldr	r2, [pc, #120]	; (100dc <pubnub_get+0xa4>)
   10062:	5a9a      	ldrh	r2, [r3, r2]
   10064:	6879      	ldr	r1, [r7, #4]
   10066:	23da      	movs	r3, #218	; 0xda
   10068:	009b      	lsls	r3, r3, #2
   1006a:	5acb      	ldrh	r3, [r1, r3]
   1006c:	429a      	cmp	r2, r3
   1006e:	d225      	bcs.n	100bc <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
   10070:	687b      	ldr	r3, [r7, #4]
   10072:	3366      	adds	r3, #102	; 0x66
   10074:	33ff      	adds	r3, #255	; 0xff
   10076:	687a      	ldr	r2, [r7, #4]
   10078:	4918      	ldr	r1, [pc, #96]	; (100dc <pubnub_get+0xa4>)
   1007a:	5a52      	ldrh	r2, [r2, r1]
   1007c:	189b      	adds	r3, r3, r2
   1007e:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
   10080:	687b      	ldr	r3, [r7, #4]
   10082:	4a16      	ldr	r2, [pc, #88]	; (100dc <pubnub_get+0xa4>)
   10084:	5a9c      	ldrh	r4, [r3, r2]
   10086:	68fb      	ldr	r3, [r7, #12]
   10088:	0018      	movs	r0, r3
   1008a:	4b15      	ldr	r3, [pc, #84]	; (100e0 <pubnub_get+0xa8>)
   1008c:	4798      	blx	r3
   1008e:	0003      	movs	r3, r0
   10090:	b29b      	uxth	r3, r3
   10092:	18e3      	adds	r3, r4, r3
   10094:	b299      	uxth	r1, r3
   10096:	687b      	ldr	r3, [r7, #4]
   10098:	4a10      	ldr	r2, [pc, #64]	; (100dc <pubnub_get+0xa4>)
   1009a:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
   1009c:	687b      	ldr	r3, [r7, #4]
   1009e:	4a0f      	ldr	r2, [pc, #60]	; (100dc <pubnub_get+0xa4>)
   100a0:	5a9b      	ldrh	r3, [r3, r2]
   100a2:	1c5a      	adds	r2, r3, #1
   100a4:	b290      	uxth	r0, r2
   100a6:	687a      	ldr	r2, [r7, #4]
   100a8:	490c      	ldr	r1, [pc, #48]	; (100dc <pubnub_get+0xa4>)
   100aa:	5250      	strh	r0, [r2, r1]
   100ac:	6879      	ldr	r1, [r7, #4]
   100ae:	22da      	movs	r2, #218	; 0xda
   100b0:	0092      	lsls	r2, r2, #2
   100b2:	5a8a      	ldrh	r2, [r1, r2]
   100b4:	4293      	cmp	r3, r2
   100b6:	d801      	bhi.n	100bc <pubnub_get+0x84>
			return rslt;
   100b8:	68fb      	ldr	r3, [r7, #12]
   100ba:	e000      	b.n	100be <pubnub_get+0x86>
		}
	}

	return NULL;
   100bc:	2300      	movs	r3, #0
}
   100be:	0018      	movs	r0, r3
   100c0:	46bd      	mov	sp, r7
   100c2:	b005      	add	sp, #20
   100c4:	bd90      	pop	{r4, r7, pc}
   100c6:	46c0      	nop			; (mov r8, r8)
   100c8:	0000f41d 	.word	0x0000f41d
   100cc:	00013c48 	.word	0x00013c48
   100d0:	00013e44 	.word	0x00013e44
   100d4:	00013c5c 	.word	0x00013c5c
   100d8:	00010b9d 	.word	0x00010b9d
   100dc:	00000366 	.word	0x00000366
   100e0:	00011591 	.word	0x00011591

000100e4 <__aeabi_uidiv>:
   100e4:	2200      	movs	r2, #0
   100e6:	0843      	lsrs	r3, r0, #1
   100e8:	428b      	cmp	r3, r1
   100ea:	d374      	bcc.n	101d6 <__aeabi_uidiv+0xf2>
   100ec:	0903      	lsrs	r3, r0, #4
   100ee:	428b      	cmp	r3, r1
   100f0:	d35f      	bcc.n	101b2 <__aeabi_uidiv+0xce>
   100f2:	0a03      	lsrs	r3, r0, #8
   100f4:	428b      	cmp	r3, r1
   100f6:	d344      	bcc.n	10182 <__aeabi_uidiv+0x9e>
   100f8:	0b03      	lsrs	r3, r0, #12
   100fa:	428b      	cmp	r3, r1
   100fc:	d328      	bcc.n	10150 <__aeabi_uidiv+0x6c>
   100fe:	0c03      	lsrs	r3, r0, #16
   10100:	428b      	cmp	r3, r1
   10102:	d30d      	bcc.n	10120 <__aeabi_uidiv+0x3c>
   10104:	22ff      	movs	r2, #255	; 0xff
   10106:	0209      	lsls	r1, r1, #8
   10108:	ba12      	rev	r2, r2
   1010a:	0c03      	lsrs	r3, r0, #16
   1010c:	428b      	cmp	r3, r1
   1010e:	d302      	bcc.n	10116 <__aeabi_uidiv+0x32>
   10110:	1212      	asrs	r2, r2, #8
   10112:	0209      	lsls	r1, r1, #8
   10114:	d065      	beq.n	101e2 <__aeabi_uidiv+0xfe>
   10116:	0b03      	lsrs	r3, r0, #12
   10118:	428b      	cmp	r3, r1
   1011a:	d319      	bcc.n	10150 <__aeabi_uidiv+0x6c>
   1011c:	e000      	b.n	10120 <__aeabi_uidiv+0x3c>
   1011e:	0a09      	lsrs	r1, r1, #8
   10120:	0bc3      	lsrs	r3, r0, #15
   10122:	428b      	cmp	r3, r1
   10124:	d301      	bcc.n	1012a <__aeabi_uidiv+0x46>
   10126:	03cb      	lsls	r3, r1, #15
   10128:	1ac0      	subs	r0, r0, r3
   1012a:	4152      	adcs	r2, r2
   1012c:	0b83      	lsrs	r3, r0, #14
   1012e:	428b      	cmp	r3, r1
   10130:	d301      	bcc.n	10136 <__aeabi_uidiv+0x52>
   10132:	038b      	lsls	r3, r1, #14
   10134:	1ac0      	subs	r0, r0, r3
   10136:	4152      	adcs	r2, r2
   10138:	0b43      	lsrs	r3, r0, #13
   1013a:	428b      	cmp	r3, r1
   1013c:	d301      	bcc.n	10142 <__aeabi_uidiv+0x5e>
   1013e:	034b      	lsls	r3, r1, #13
   10140:	1ac0      	subs	r0, r0, r3
   10142:	4152      	adcs	r2, r2
   10144:	0b03      	lsrs	r3, r0, #12
   10146:	428b      	cmp	r3, r1
   10148:	d301      	bcc.n	1014e <__aeabi_uidiv+0x6a>
   1014a:	030b      	lsls	r3, r1, #12
   1014c:	1ac0      	subs	r0, r0, r3
   1014e:	4152      	adcs	r2, r2
   10150:	0ac3      	lsrs	r3, r0, #11
   10152:	428b      	cmp	r3, r1
   10154:	d301      	bcc.n	1015a <__aeabi_uidiv+0x76>
   10156:	02cb      	lsls	r3, r1, #11
   10158:	1ac0      	subs	r0, r0, r3
   1015a:	4152      	adcs	r2, r2
   1015c:	0a83      	lsrs	r3, r0, #10
   1015e:	428b      	cmp	r3, r1
   10160:	d301      	bcc.n	10166 <__aeabi_uidiv+0x82>
   10162:	028b      	lsls	r3, r1, #10
   10164:	1ac0      	subs	r0, r0, r3
   10166:	4152      	adcs	r2, r2
   10168:	0a43      	lsrs	r3, r0, #9
   1016a:	428b      	cmp	r3, r1
   1016c:	d301      	bcc.n	10172 <__aeabi_uidiv+0x8e>
   1016e:	024b      	lsls	r3, r1, #9
   10170:	1ac0      	subs	r0, r0, r3
   10172:	4152      	adcs	r2, r2
   10174:	0a03      	lsrs	r3, r0, #8
   10176:	428b      	cmp	r3, r1
   10178:	d301      	bcc.n	1017e <__aeabi_uidiv+0x9a>
   1017a:	020b      	lsls	r3, r1, #8
   1017c:	1ac0      	subs	r0, r0, r3
   1017e:	4152      	adcs	r2, r2
   10180:	d2cd      	bcs.n	1011e <__aeabi_uidiv+0x3a>
   10182:	09c3      	lsrs	r3, r0, #7
   10184:	428b      	cmp	r3, r1
   10186:	d301      	bcc.n	1018c <__aeabi_uidiv+0xa8>
   10188:	01cb      	lsls	r3, r1, #7
   1018a:	1ac0      	subs	r0, r0, r3
   1018c:	4152      	adcs	r2, r2
   1018e:	0983      	lsrs	r3, r0, #6
   10190:	428b      	cmp	r3, r1
   10192:	d301      	bcc.n	10198 <__aeabi_uidiv+0xb4>
   10194:	018b      	lsls	r3, r1, #6
   10196:	1ac0      	subs	r0, r0, r3
   10198:	4152      	adcs	r2, r2
   1019a:	0943      	lsrs	r3, r0, #5
   1019c:	428b      	cmp	r3, r1
   1019e:	d301      	bcc.n	101a4 <__aeabi_uidiv+0xc0>
   101a0:	014b      	lsls	r3, r1, #5
   101a2:	1ac0      	subs	r0, r0, r3
   101a4:	4152      	adcs	r2, r2
   101a6:	0903      	lsrs	r3, r0, #4
   101a8:	428b      	cmp	r3, r1
   101aa:	d301      	bcc.n	101b0 <__aeabi_uidiv+0xcc>
   101ac:	010b      	lsls	r3, r1, #4
   101ae:	1ac0      	subs	r0, r0, r3
   101b0:	4152      	adcs	r2, r2
   101b2:	08c3      	lsrs	r3, r0, #3
   101b4:	428b      	cmp	r3, r1
   101b6:	d301      	bcc.n	101bc <__aeabi_uidiv+0xd8>
   101b8:	00cb      	lsls	r3, r1, #3
   101ba:	1ac0      	subs	r0, r0, r3
   101bc:	4152      	adcs	r2, r2
   101be:	0883      	lsrs	r3, r0, #2
   101c0:	428b      	cmp	r3, r1
   101c2:	d301      	bcc.n	101c8 <__aeabi_uidiv+0xe4>
   101c4:	008b      	lsls	r3, r1, #2
   101c6:	1ac0      	subs	r0, r0, r3
   101c8:	4152      	adcs	r2, r2
   101ca:	0843      	lsrs	r3, r0, #1
   101cc:	428b      	cmp	r3, r1
   101ce:	d301      	bcc.n	101d4 <__aeabi_uidiv+0xf0>
   101d0:	004b      	lsls	r3, r1, #1
   101d2:	1ac0      	subs	r0, r0, r3
   101d4:	4152      	adcs	r2, r2
   101d6:	1a41      	subs	r1, r0, r1
   101d8:	d200      	bcs.n	101dc <__aeabi_uidiv+0xf8>
   101da:	4601      	mov	r1, r0
   101dc:	4152      	adcs	r2, r2
   101de:	4610      	mov	r0, r2
   101e0:	4770      	bx	lr
   101e2:	e7ff      	b.n	101e4 <__aeabi_uidiv+0x100>
   101e4:	b501      	push	{r0, lr}
   101e6:	2000      	movs	r0, #0
   101e8:	f000 f8f0 	bl	103cc <__aeabi_idiv0>
   101ec:	bd02      	pop	{r1, pc}
   101ee:	46c0      	nop			; (mov r8, r8)

000101f0 <__aeabi_uidivmod>:
   101f0:	2900      	cmp	r1, #0
   101f2:	d0f7      	beq.n	101e4 <__aeabi_uidiv+0x100>
   101f4:	e776      	b.n	100e4 <__aeabi_uidiv>
   101f6:	4770      	bx	lr

000101f8 <__aeabi_idiv>:
   101f8:	4603      	mov	r3, r0
   101fa:	430b      	orrs	r3, r1
   101fc:	d47f      	bmi.n	102fe <__aeabi_idiv+0x106>
   101fe:	2200      	movs	r2, #0
   10200:	0843      	lsrs	r3, r0, #1
   10202:	428b      	cmp	r3, r1
   10204:	d374      	bcc.n	102f0 <__aeabi_idiv+0xf8>
   10206:	0903      	lsrs	r3, r0, #4
   10208:	428b      	cmp	r3, r1
   1020a:	d35f      	bcc.n	102cc <__aeabi_idiv+0xd4>
   1020c:	0a03      	lsrs	r3, r0, #8
   1020e:	428b      	cmp	r3, r1
   10210:	d344      	bcc.n	1029c <__aeabi_idiv+0xa4>
   10212:	0b03      	lsrs	r3, r0, #12
   10214:	428b      	cmp	r3, r1
   10216:	d328      	bcc.n	1026a <__aeabi_idiv+0x72>
   10218:	0c03      	lsrs	r3, r0, #16
   1021a:	428b      	cmp	r3, r1
   1021c:	d30d      	bcc.n	1023a <__aeabi_idiv+0x42>
   1021e:	22ff      	movs	r2, #255	; 0xff
   10220:	0209      	lsls	r1, r1, #8
   10222:	ba12      	rev	r2, r2
   10224:	0c03      	lsrs	r3, r0, #16
   10226:	428b      	cmp	r3, r1
   10228:	d302      	bcc.n	10230 <__aeabi_idiv+0x38>
   1022a:	1212      	asrs	r2, r2, #8
   1022c:	0209      	lsls	r1, r1, #8
   1022e:	d065      	beq.n	102fc <__aeabi_idiv+0x104>
   10230:	0b03      	lsrs	r3, r0, #12
   10232:	428b      	cmp	r3, r1
   10234:	d319      	bcc.n	1026a <__aeabi_idiv+0x72>
   10236:	e000      	b.n	1023a <__aeabi_idiv+0x42>
   10238:	0a09      	lsrs	r1, r1, #8
   1023a:	0bc3      	lsrs	r3, r0, #15
   1023c:	428b      	cmp	r3, r1
   1023e:	d301      	bcc.n	10244 <__aeabi_idiv+0x4c>
   10240:	03cb      	lsls	r3, r1, #15
   10242:	1ac0      	subs	r0, r0, r3
   10244:	4152      	adcs	r2, r2
   10246:	0b83      	lsrs	r3, r0, #14
   10248:	428b      	cmp	r3, r1
   1024a:	d301      	bcc.n	10250 <__aeabi_idiv+0x58>
   1024c:	038b      	lsls	r3, r1, #14
   1024e:	1ac0      	subs	r0, r0, r3
   10250:	4152      	adcs	r2, r2
   10252:	0b43      	lsrs	r3, r0, #13
   10254:	428b      	cmp	r3, r1
   10256:	d301      	bcc.n	1025c <__aeabi_idiv+0x64>
   10258:	034b      	lsls	r3, r1, #13
   1025a:	1ac0      	subs	r0, r0, r3
   1025c:	4152      	adcs	r2, r2
   1025e:	0b03      	lsrs	r3, r0, #12
   10260:	428b      	cmp	r3, r1
   10262:	d301      	bcc.n	10268 <__aeabi_idiv+0x70>
   10264:	030b      	lsls	r3, r1, #12
   10266:	1ac0      	subs	r0, r0, r3
   10268:	4152      	adcs	r2, r2
   1026a:	0ac3      	lsrs	r3, r0, #11
   1026c:	428b      	cmp	r3, r1
   1026e:	d301      	bcc.n	10274 <__aeabi_idiv+0x7c>
   10270:	02cb      	lsls	r3, r1, #11
   10272:	1ac0      	subs	r0, r0, r3
   10274:	4152      	adcs	r2, r2
   10276:	0a83      	lsrs	r3, r0, #10
   10278:	428b      	cmp	r3, r1
   1027a:	d301      	bcc.n	10280 <__aeabi_idiv+0x88>
   1027c:	028b      	lsls	r3, r1, #10
   1027e:	1ac0      	subs	r0, r0, r3
   10280:	4152      	adcs	r2, r2
   10282:	0a43      	lsrs	r3, r0, #9
   10284:	428b      	cmp	r3, r1
   10286:	d301      	bcc.n	1028c <__aeabi_idiv+0x94>
   10288:	024b      	lsls	r3, r1, #9
   1028a:	1ac0      	subs	r0, r0, r3
   1028c:	4152      	adcs	r2, r2
   1028e:	0a03      	lsrs	r3, r0, #8
   10290:	428b      	cmp	r3, r1
   10292:	d301      	bcc.n	10298 <__aeabi_idiv+0xa0>
   10294:	020b      	lsls	r3, r1, #8
   10296:	1ac0      	subs	r0, r0, r3
   10298:	4152      	adcs	r2, r2
   1029a:	d2cd      	bcs.n	10238 <__aeabi_idiv+0x40>
   1029c:	09c3      	lsrs	r3, r0, #7
   1029e:	428b      	cmp	r3, r1
   102a0:	d301      	bcc.n	102a6 <__aeabi_idiv+0xae>
   102a2:	01cb      	lsls	r3, r1, #7
   102a4:	1ac0      	subs	r0, r0, r3
   102a6:	4152      	adcs	r2, r2
   102a8:	0983      	lsrs	r3, r0, #6
   102aa:	428b      	cmp	r3, r1
   102ac:	d301      	bcc.n	102b2 <__aeabi_idiv+0xba>
   102ae:	018b      	lsls	r3, r1, #6
   102b0:	1ac0      	subs	r0, r0, r3
   102b2:	4152      	adcs	r2, r2
   102b4:	0943      	lsrs	r3, r0, #5
   102b6:	428b      	cmp	r3, r1
   102b8:	d301      	bcc.n	102be <__aeabi_idiv+0xc6>
   102ba:	014b      	lsls	r3, r1, #5
   102bc:	1ac0      	subs	r0, r0, r3
   102be:	4152      	adcs	r2, r2
   102c0:	0903      	lsrs	r3, r0, #4
   102c2:	428b      	cmp	r3, r1
   102c4:	d301      	bcc.n	102ca <__aeabi_idiv+0xd2>
   102c6:	010b      	lsls	r3, r1, #4
   102c8:	1ac0      	subs	r0, r0, r3
   102ca:	4152      	adcs	r2, r2
   102cc:	08c3      	lsrs	r3, r0, #3
   102ce:	428b      	cmp	r3, r1
   102d0:	d301      	bcc.n	102d6 <__aeabi_idiv+0xde>
   102d2:	00cb      	lsls	r3, r1, #3
   102d4:	1ac0      	subs	r0, r0, r3
   102d6:	4152      	adcs	r2, r2
   102d8:	0883      	lsrs	r3, r0, #2
   102da:	428b      	cmp	r3, r1
   102dc:	d301      	bcc.n	102e2 <__aeabi_idiv+0xea>
   102de:	008b      	lsls	r3, r1, #2
   102e0:	1ac0      	subs	r0, r0, r3
   102e2:	4152      	adcs	r2, r2
   102e4:	0843      	lsrs	r3, r0, #1
   102e6:	428b      	cmp	r3, r1
   102e8:	d301      	bcc.n	102ee <__aeabi_idiv+0xf6>
   102ea:	004b      	lsls	r3, r1, #1
   102ec:	1ac0      	subs	r0, r0, r3
   102ee:	4152      	adcs	r2, r2
   102f0:	1a41      	subs	r1, r0, r1
   102f2:	d200      	bcs.n	102f6 <__aeabi_idiv+0xfe>
   102f4:	4601      	mov	r1, r0
   102f6:	4152      	adcs	r2, r2
   102f8:	4610      	mov	r0, r2
   102fa:	4770      	bx	lr
   102fc:	e05d      	b.n	103ba <__aeabi_idiv+0x1c2>
   102fe:	0fca      	lsrs	r2, r1, #31
   10300:	d000      	beq.n	10304 <__aeabi_idiv+0x10c>
   10302:	4249      	negs	r1, r1
   10304:	1003      	asrs	r3, r0, #32
   10306:	d300      	bcc.n	1030a <__aeabi_idiv+0x112>
   10308:	4240      	negs	r0, r0
   1030a:	4053      	eors	r3, r2
   1030c:	2200      	movs	r2, #0
   1030e:	469c      	mov	ip, r3
   10310:	0903      	lsrs	r3, r0, #4
   10312:	428b      	cmp	r3, r1
   10314:	d32d      	bcc.n	10372 <__aeabi_idiv+0x17a>
   10316:	0a03      	lsrs	r3, r0, #8
   10318:	428b      	cmp	r3, r1
   1031a:	d312      	bcc.n	10342 <__aeabi_idiv+0x14a>
   1031c:	22fc      	movs	r2, #252	; 0xfc
   1031e:	0189      	lsls	r1, r1, #6
   10320:	ba12      	rev	r2, r2
   10322:	0a03      	lsrs	r3, r0, #8
   10324:	428b      	cmp	r3, r1
   10326:	d30c      	bcc.n	10342 <__aeabi_idiv+0x14a>
   10328:	0189      	lsls	r1, r1, #6
   1032a:	1192      	asrs	r2, r2, #6
   1032c:	428b      	cmp	r3, r1
   1032e:	d308      	bcc.n	10342 <__aeabi_idiv+0x14a>
   10330:	0189      	lsls	r1, r1, #6
   10332:	1192      	asrs	r2, r2, #6
   10334:	428b      	cmp	r3, r1
   10336:	d304      	bcc.n	10342 <__aeabi_idiv+0x14a>
   10338:	0189      	lsls	r1, r1, #6
   1033a:	d03a      	beq.n	103b2 <__aeabi_idiv+0x1ba>
   1033c:	1192      	asrs	r2, r2, #6
   1033e:	e000      	b.n	10342 <__aeabi_idiv+0x14a>
   10340:	0989      	lsrs	r1, r1, #6
   10342:	09c3      	lsrs	r3, r0, #7
   10344:	428b      	cmp	r3, r1
   10346:	d301      	bcc.n	1034c <__aeabi_idiv+0x154>
   10348:	01cb      	lsls	r3, r1, #7
   1034a:	1ac0      	subs	r0, r0, r3
   1034c:	4152      	adcs	r2, r2
   1034e:	0983      	lsrs	r3, r0, #6
   10350:	428b      	cmp	r3, r1
   10352:	d301      	bcc.n	10358 <__aeabi_idiv+0x160>
   10354:	018b      	lsls	r3, r1, #6
   10356:	1ac0      	subs	r0, r0, r3
   10358:	4152      	adcs	r2, r2
   1035a:	0943      	lsrs	r3, r0, #5
   1035c:	428b      	cmp	r3, r1
   1035e:	d301      	bcc.n	10364 <__aeabi_idiv+0x16c>
   10360:	014b      	lsls	r3, r1, #5
   10362:	1ac0      	subs	r0, r0, r3
   10364:	4152      	adcs	r2, r2
   10366:	0903      	lsrs	r3, r0, #4
   10368:	428b      	cmp	r3, r1
   1036a:	d301      	bcc.n	10370 <__aeabi_idiv+0x178>
   1036c:	010b      	lsls	r3, r1, #4
   1036e:	1ac0      	subs	r0, r0, r3
   10370:	4152      	adcs	r2, r2
   10372:	08c3      	lsrs	r3, r0, #3
   10374:	428b      	cmp	r3, r1
   10376:	d301      	bcc.n	1037c <__aeabi_idiv+0x184>
   10378:	00cb      	lsls	r3, r1, #3
   1037a:	1ac0      	subs	r0, r0, r3
   1037c:	4152      	adcs	r2, r2
   1037e:	0883      	lsrs	r3, r0, #2
   10380:	428b      	cmp	r3, r1
   10382:	d301      	bcc.n	10388 <__aeabi_idiv+0x190>
   10384:	008b      	lsls	r3, r1, #2
   10386:	1ac0      	subs	r0, r0, r3
   10388:	4152      	adcs	r2, r2
   1038a:	d2d9      	bcs.n	10340 <__aeabi_idiv+0x148>
   1038c:	0843      	lsrs	r3, r0, #1
   1038e:	428b      	cmp	r3, r1
   10390:	d301      	bcc.n	10396 <__aeabi_idiv+0x19e>
   10392:	004b      	lsls	r3, r1, #1
   10394:	1ac0      	subs	r0, r0, r3
   10396:	4152      	adcs	r2, r2
   10398:	1a41      	subs	r1, r0, r1
   1039a:	d200      	bcs.n	1039e <__aeabi_idiv+0x1a6>
   1039c:	4601      	mov	r1, r0
   1039e:	4663      	mov	r3, ip
   103a0:	4152      	adcs	r2, r2
   103a2:	105b      	asrs	r3, r3, #1
   103a4:	4610      	mov	r0, r2
   103a6:	d301      	bcc.n	103ac <__aeabi_idiv+0x1b4>
   103a8:	4240      	negs	r0, r0
   103aa:	2b00      	cmp	r3, #0
   103ac:	d500      	bpl.n	103b0 <__aeabi_idiv+0x1b8>
   103ae:	4249      	negs	r1, r1
   103b0:	4770      	bx	lr
   103b2:	4663      	mov	r3, ip
   103b4:	105b      	asrs	r3, r3, #1
   103b6:	d300      	bcc.n	103ba <__aeabi_idiv+0x1c2>
   103b8:	4240      	negs	r0, r0
   103ba:	b501      	push	{r0, lr}
   103bc:	2000      	movs	r0, #0
   103be:	f000 f805 	bl	103cc <__aeabi_idiv0>
   103c2:	bd02      	pop	{r1, pc}

000103c4 <__aeabi_idivmod>:
   103c4:	2900      	cmp	r1, #0
   103c6:	d0f8      	beq.n	103ba <__aeabi_idiv+0x1c2>
   103c8:	e716      	b.n	101f8 <__aeabi_idiv>
   103ca:	4770      	bx	lr

000103cc <__aeabi_idiv0>:
   103cc:	4770      	bx	lr
   103ce:	46c0      	nop			; (mov r8, r8)

000103d0 <__aeabi_uldivmod>:
   103d0:	2b00      	cmp	r3, #0
   103d2:	d111      	bne.n	103f8 <__aeabi_uldivmod+0x28>
   103d4:	2a00      	cmp	r2, #0
   103d6:	d10f      	bne.n	103f8 <__aeabi_uldivmod+0x28>
   103d8:	2900      	cmp	r1, #0
   103da:	d100      	bne.n	103de <__aeabi_uldivmod+0xe>
   103dc:	2800      	cmp	r0, #0
   103de:	d002      	beq.n	103e6 <__aeabi_uldivmod+0x16>
   103e0:	2100      	movs	r1, #0
   103e2:	43c9      	mvns	r1, r1
   103e4:	1c08      	adds	r0, r1, #0
   103e6:	b407      	push	{r0, r1, r2}
   103e8:	4802      	ldr	r0, [pc, #8]	; (103f4 <__aeabi_uldivmod+0x24>)
   103ea:	a102      	add	r1, pc, #8	; (adr r1, 103f4 <__aeabi_uldivmod+0x24>)
   103ec:	1840      	adds	r0, r0, r1
   103ee:	9002      	str	r0, [sp, #8]
   103f0:	bd03      	pop	{r0, r1, pc}
   103f2:	46c0      	nop			; (mov r8, r8)
   103f4:	ffffffd9 	.word	0xffffffd9
   103f8:	b403      	push	{r0, r1}
   103fa:	4668      	mov	r0, sp
   103fc:	b501      	push	{r0, lr}
   103fe:	9802      	ldr	r0, [sp, #8]
   10400:	f000 f832 	bl	10468 <__udivmoddi4>
   10404:	9b01      	ldr	r3, [sp, #4]
   10406:	469e      	mov	lr, r3
   10408:	b002      	add	sp, #8
   1040a:	bc0c      	pop	{r2, r3}
   1040c:	4770      	bx	lr
   1040e:	46c0      	nop			; (mov r8, r8)

00010410 <__aeabi_lmul>:
   10410:	b5f0      	push	{r4, r5, r6, r7, lr}
   10412:	464f      	mov	r7, r9
   10414:	4646      	mov	r6, r8
   10416:	b4c0      	push	{r6, r7}
   10418:	0416      	lsls	r6, r2, #16
   1041a:	0c36      	lsrs	r6, r6, #16
   1041c:	4699      	mov	r9, r3
   1041e:	0033      	movs	r3, r6
   10420:	0405      	lsls	r5, r0, #16
   10422:	0c2c      	lsrs	r4, r5, #16
   10424:	0c07      	lsrs	r7, r0, #16
   10426:	0c15      	lsrs	r5, r2, #16
   10428:	4363      	muls	r3, r4
   1042a:	437e      	muls	r6, r7
   1042c:	436f      	muls	r7, r5
   1042e:	4365      	muls	r5, r4
   10430:	0c1c      	lsrs	r4, r3, #16
   10432:	19ad      	adds	r5, r5, r6
   10434:	1964      	adds	r4, r4, r5
   10436:	469c      	mov	ip, r3
   10438:	42a6      	cmp	r6, r4
   1043a:	d903      	bls.n	10444 <__aeabi_lmul+0x34>
   1043c:	2380      	movs	r3, #128	; 0x80
   1043e:	025b      	lsls	r3, r3, #9
   10440:	4698      	mov	r8, r3
   10442:	4447      	add	r7, r8
   10444:	4663      	mov	r3, ip
   10446:	0c25      	lsrs	r5, r4, #16
   10448:	19ef      	adds	r7, r5, r7
   1044a:	041d      	lsls	r5, r3, #16
   1044c:	464b      	mov	r3, r9
   1044e:	434a      	muls	r2, r1
   10450:	4343      	muls	r3, r0
   10452:	0c2d      	lsrs	r5, r5, #16
   10454:	0424      	lsls	r4, r4, #16
   10456:	1964      	adds	r4, r4, r5
   10458:	1899      	adds	r1, r3, r2
   1045a:	19c9      	adds	r1, r1, r7
   1045c:	0020      	movs	r0, r4
   1045e:	bc0c      	pop	{r2, r3}
   10460:	4690      	mov	r8, r2
   10462:	4699      	mov	r9, r3
   10464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10466:	46c0      	nop			; (mov r8, r8)

00010468 <__udivmoddi4>:
   10468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1046a:	464d      	mov	r5, r9
   1046c:	4656      	mov	r6, sl
   1046e:	4644      	mov	r4, r8
   10470:	465f      	mov	r7, fp
   10472:	b4f0      	push	{r4, r5, r6, r7}
   10474:	4692      	mov	sl, r2
   10476:	b083      	sub	sp, #12
   10478:	0004      	movs	r4, r0
   1047a:	000d      	movs	r5, r1
   1047c:	4699      	mov	r9, r3
   1047e:	428b      	cmp	r3, r1
   10480:	d82f      	bhi.n	104e2 <__udivmoddi4+0x7a>
   10482:	d02c      	beq.n	104de <__udivmoddi4+0x76>
   10484:	4649      	mov	r1, r9
   10486:	4650      	mov	r0, sl
   10488:	f000 fb7c 	bl	10b84 <__clzdi2>
   1048c:	0029      	movs	r1, r5
   1048e:	0006      	movs	r6, r0
   10490:	0020      	movs	r0, r4
   10492:	f000 fb77 	bl	10b84 <__clzdi2>
   10496:	1a33      	subs	r3, r6, r0
   10498:	4698      	mov	r8, r3
   1049a:	3b20      	subs	r3, #32
   1049c:	469b      	mov	fp, r3
   1049e:	d500      	bpl.n	104a2 <__udivmoddi4+0x3a>
   104a0:	e074      	b.n	1058c <__udivmoddi4+0x124>
   104a2:	4653      	mov	r3, sl
   104a4:	465a      	mov	r2, fp
   104a6:	4093      	lsls	r3, r2
   104a8:	001f      	movs	r7, r3
   104aa:	4653      	mov	r3, sl
   104ac:	4642      	mov	r2, r8
   104ae:	4093      	lsls	r3, r2
   104b0:	001e      	movs	r6, r3
   104b2:	42af      	cmp	r7, r5
   104b4:	d829      	bhi.n	1050a <__udivmoddi4+0xa2>
   104b6:	d026      	beq.n	10506 <__udivmoddi4+0x9e>
   104b8:	465b      	mov	r3, fp
   104ba:	1ba4      	subs	r4, r4, r6
   104bc:	41bd      	sbcs	r5, r7
   104be:	2b00      	cmp	r3, #0
   104c0:	da00      	bge.n	104c4 <__udivmoddi4+0x5c>
   104c2:	e079      	b.n	105b8 <__udivmoddi4+0x150>
   104c4:	2200      	movs	r2, #0
   104c6:	2300      	movs	r3, #0
   104c8:	9200      	str	r2, [sp, #0]
   104ca:	9301      	str	r3, [sp, #4]
   104cc:	2301      	movs	r3, #1
   104ce:	465a      	mov	r2, fp
   104d0:	4093      	lsls	r3, r2
   104d2:	9301      	str	r3, [sp, #4]
   104d4:	2301      	movs	r3, #1
   104d6:	4642      	mov	r2, r8
   104d8:	4093      	lsls	r3, r2
   104da:	9300      	str	r3, [sp, #0]
   104dc:	e019      	b.n	10512 <__udivmoddi4+0xaa>
   104de:	4282      	cmp	r2, r0
   104e0:	d9d0      	bls.n	10484 <__udivmoddi4+0x1c>
   104e2:	2200      	movs	r2, #0
   104e4:	2300      	movs	r3, #0
   104e6:	9200      	str	r2, [sp, #0]
   104e8:	9301      	str	r3, [sp, #4]
   104ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   104ec:	2b00      	cmp	r3, #0
   104ee:	d001      	beq.n	104f4 <__udivmoddi4+0x8c>
   104f0:	601c      	str	r4, [r3, #0]
   104f2:	605d      	str	r5, [r3, #4]
   104f4:	9800      	ldr	r0, [sp, #0]
   104f6:	9901      	ldr	r1, [sp, #4]
   104f8:	b003      	add	sp, #12
   104fa:	bc3c      	pop	{r2, r3, r4, r5}
   104fc:	4690      	mov	r8, r2
   104fe:	4699      	mov	r9, r3
   10500:	46a2      	mov	sl, r4
   10502:	46ab      	mov	fp, r5
   10504:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10506:	42a3      	cmp	r3, r4
   10508:	d9d6      	bls.n	104b8 <__udivmoddi4+0x50>
   1050a:	2200      	movs	r2, #0
   1050c:	2300      	movs	r3, #0
   1050e:	9200      	str	r2, [sp, #0]
   10510:	9301      	str	r3, [sp, #4]
   10512:	4643      	mov	r3, r8
   10514:	2b00      	cmp	r3, #0
   10516:	d0e8      	beq.n	104ea <__udivmoddi4+0x82>
   10518:	07fb      	lsls	r3, r7, #31
   1051a:	0872      	lsrs	r2, r6, #1
   1051c:	431a      	orrs	r2, r3
   1051e:	4646      	mov	r6, r8
   10520:	087b      	lsrs	r3, r7, #1
   10522:	e00e      	b.n	10542 <__udivmoddi4+0xda>
   10524:	42ab      	cmp	r3, r5
   10526:	d101      	bne.n	1052c <__udivmoddi4+0xc4>
   10528:	42a2      	cmp	r2, r4
   1052a:	d80c      	bhi.n	10546 <__udivmoddi4+0xde>
   1052c:	1aa4      	subs	r4, r4, r2
   1052e:	419d      	sbcs	r5, r3
   10530:	2001      	movs	r0, #1
   10532:	1924      	adds	r4, r4, r4
   10534:	416d      	adcs	r5, r5
   10536:	2100      	movs	r1, #0
   10538:	3e01      	subs	r6, #1
   1053a:	1824      	adds	r4, r4, r0
   1053c:	414d      	adcs	r5, r1
   1053e:	2e00      	cmp	r6, #0
   10540:	d006      	beq.n	10550 <__udivmoddi4+0xe8>
   10542:	42ab      	cmp	r3, r5
   10544:	d9ee      	bls.n	10524 <__udivmoddi4+0xbc>
   10546:	3e01      	subs	r6, #1
   10548:	1924      	adds	r4, r4, r4
   1054a:	416d      	adcs	r5, r5
   1054c:	2e00      	cmp	r6, #0
   1054e:	d1f8      	bne.n	10542 <__udivmoddi4+0xda>
   10550:	465b      	mov	r3, fp
   10552:	9800      	ldr	r0, [sp, #0]
   10554:	9901      	ldr	r1, [sp, #4]
   10556:	1900      	adds	r0, r0, r4
   10558:	4169      	adcs	r1, r5
   1055a:	2b00      	cmp	r3, #0
   1055c:	db22      	blt.n	105a4 <__udivmoddi4+0x13c>
   1055e:	002b      	movs	r3, r5
   10560:	465a      	mov	r2, fp
   10562:	40d3      	lsrs	r3, r2
   10564:	002a      	movs	r2, r5
   10566:	4644      	mov	r4, r8
   10568:	40e2      	lsrs	r2, r4
   1056a:	001c      	movs	r4, r3
   1056c:	465b      	mov	r3, fp
   1056e:	0015      	movs	r5, r2
   10570:	2b00      	cmp	r3, #0
   10572:	db2c      	blt.n	105ce <__udivmoddi4+0x166>
   10574:	0026      	movs	r6, r4
   10576:	409e      	lsls	r6, r3
   10578:	0033      	movs	r3, r6
   1057a:	0026      	movs	r6, r4
   1057c:	4647      	mov	r7, r8
   1057e:	40be      	lsls	r6, r7
   10580:	0032      	movs	r2, r6
   10582:	1a80      	subs	r0, r0, r2
   10584:	4199      	sbcs	r1, r3
   10586:	9000      	str	r0, [sp, #0]
   10588:	9101      	str	r1, [sp, #4]
   1058a:	e7ae      	b.n	104ea <__udivmoddi4+0x82>
   1058c:	4642      	mov	r2, r8
   1058e:	2320      	movs	r3, #32
   10590:	1a9b      	subs	r3, r3, r2
   10592:	4652      	mov	r2, sl
   10594:	40da      	lsrs	r2, r3
   10596:	4641      	mov	r1, r8
   10598:	0013      	movs	r3, r2
   1059a:	464a      	mov	r2, r9
   1059c:	408a      	lsls	r2, r1
   1059e:	0017      	movs	r7, r2
   105a0:	431f      	orrs	r7, r3
   105a2:	e782      	b.n	104aa <__udivmoddi4+0x42>
   105a4:	4642      	mov	r2, r8
   105a6:	2320      	movs	r3, #32
   105a8:	1a9b      	subs	r3, r3, r2
   105aa:	002a      	movs	r2, r5
   105ac:	4646      	mov	r6, r8
   105ae:	409a      	lsls	r2, r3
   105b0:	0023      	movs	r3, r4
   105b2:	40f3      	lsrs	r3, r6
   105b4:	4313      	orrs	r3, r2
   105b6:	e7d5      	b.n	10564 <__udivmoddi4+0xfc>
   105b8:	4642      	mov	r2, r8
   105ba:	2320      	movs	r3, #32
   105bc:	2100      	movs	r1, #0
   105be:	1a9b      	subs	r3, r3, r2
   105c0:	2200      	movs	r2, #0
   105c2:	9100      	str	r1, [sp, #0]
   105c4:	9201      	str	r2, [sp, #4]
   105c6:	2201      	movs	r2, #1
   105c8:	40da      	lsrs	r2, r3
   105ca:	9201      	str	r2, [sp, #4]
   105cc:	e782      	b.n	104d4 <__udivmoddi4+0x6c>
   105ce:	4642      	mov	r2, r8
   105d0:	2320      	movs	r3, #32
   105d2:	0026      	movs	r6, r4
   105d4:	1a9b      	subs	r3, r3, r2
   105d6:	40de      	lsrs	r6, r3
   105d8:	002f      	movs	r7, r5
   105da:	46b4      	mov	ip, r6
   105dc:	4097      	lsls	r7, r2
   105de:	4666      	mov	r6, ip
   105e0:	003b      	movs	r3, r7
   105e2:	4333      	orrs	r3, r6
   105e4:	e7c9      	b.n	1057a <__udivmoddi4+0x112>
   105e6:	46c0      	nop			; (mov r8, r8)

000105e8 <__aeabi_dmul>:
   105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   105ea:	465f      	mov	r7, fp
   105ec:	4656      	mov	r6, sl
   105ee:	464d      	mov	r5, r9
   105f0:	4644      	mov	r4, r8
   105f2:	b4f0      	push	{r4, r5, r6, r7}
   105f4:	030d      	lsls	r5, r1, #12
   105f6:	4699      	mov	r9, r3
   105f8:	004e      	lsls	r6, r1, #1
   105fa:	0b2b      	lsrs	r3, r5, #12
   105fc:	b087      	sub	sp, #28
   105fe:	0007      	movs	r7, r0
   10600:	4692      	mov	sl, r2
   10602:	4680      	mov	r8, r0
   10604:	469b      	mov	fp, r3
   10606:	0d76      	lsrs	r6, r6, #21
   10608:	0fcc      	lsrs	r4, r1, #31
   1060a:	2e00      	cmp	r6, #0
   1060c:	d069      	beq.n	106e2 <__aeabi_dmul+0xfa>
   1060e:	4b6d      	ldr	r3, [pc, #436]	; (107c4 <__aeabi_dmul+0x1dc>)
   10610:	429e      	cmp	r6, r3
   10612:	d035      	beq.n	10680 <__aeabi_dmul+0x98>
   10614:	465b      	mov	r3, fp
   10616:	2280      	movs	r2, #128	; 0x80
   10618:	00dd      	lsls	r5, r3, #3
   1061a:	0412      	lsls	r2, r2, #16
   1061c:	0f43      	lsrs	r3, r0, #29
   1061e:	4313      	orrs	r3, r2
   10620:	432b      	orrs	r3, r5
   10622:	469b      	mov	fp, r3
   10624:	00c3      	lsls	r3, r0, #3
   10626:	4698      	mov	r8, r3
   10628:	4b67      	ldr	r3, [pc, #412]	; (107c8 <__aeabi_dmul+0x1e0>)
   1062a:	2700      	movs	r7, #0
   1062c:	469c      	mov	ip, r3
   1062e:	2300      	movs	r3, #0
   10630:	4466      	add	r6, ip
   10632:	9301      	str	r3, [sp, #4]
   10634:	464a      	mov	r2, r9
   10636:	0315      	lsls	r5, r2, #12
   10638:	0050      	lsls	r0, r2, #1
   1063a:	0fd2      	lsrs	r2, r2, #31
   1063c:	4653      	mov	r3, sl
   1063e:	0b2d      	lsrs	r5, r5, #12
   10640:	0d40      	lsrs	r0, r0, #21
   10642:	4691      	mov	r9, r2
   10644:	d100      	bne.n	10648 <__aeabi_dmul+0x60>
   10646:	e076      	b.n	10736 <__aeabi_dmul+0x14e>
   10648:	4a5e      	ldr	r2, [pc, #376]	; (107c4 <__aeabi_dmul+0x1dc>)
   1064a:	4290      	cmp	r0, r2
   1064c:	d06c      	beq.n	10728 <__aeabi_dmul+0x140>
   1064e:	2280      	movs	r2, #128	; 0x80
   10650:	0f5b      	lsrs	r3, r3, #29
   10652:	0412      	lsls	r2, r2, #16
   10654:	4313      	orrs	r3, r2
   10656:	4a5c      	ldr	r2, [pc, #368]	; (107c8 <__aeabi_dmul+0x1e0>)
   10658:	00ed      	lsls	r5, r5, #3
   1065a:	4694      	mov	ip, r2
   1065c:	431d      	orrs	r5, r3
   1065e:	4653      	mov	r3, sl
   10660:	2200      	movs	r2, #0
   10662:	00db      	lsls	r3, r3, #3
   10664:	4460      	add	r0, ip
   10666:	4649      	mov	r1, r9
   10668:	1836      	adds	r6, r6, r0
   1066a:	1c70      	adds	r0, r6, #1
   1066c:	4061      	eors	r1, r4
   1066e:	9002      	str	r0, [sp, #8]
   10670:	4317      	orrs	r7, r2
   10672:	2f0f      	cmp	r7, #15
   10674:	d900      	bls.n	10678 <__aeabi_dmul+0x90>
   10676:	e0af      	b.n	107d8 <__aeabi_dmul+0x1f0>
   10678:	4854      	ldr	r0, [pc, #336]	; (107cc <__aeabi_dmul+0x1e4>)
   1067a:	00bf      	lsls	r7, r7, #2
   1067c:	59c7      	ldr	r7, [r0, r7]
   1067e:	46bf      	mov	pc, r7
   10680:	465b      	mov	r3, fp
   10682:	431f      	orrs	r7, r3
   10684:	d000      	beq.n	10688 <__aeabi_dmul+0xa0>
   10686:	e088      	b.n	1079a <__aeabi_dmul+0x1b2>
   10688:	2300      	movs	r3, #0
   1068a:	469b      	mov	fp, r3
   1068c:	4698      	mov	r8, r3
   1068e:	3302      	adds	r3, #2
   10690:	2708      	movs	r7, #8
   10692:	9301      	str	r3, [sp, #4]
   10694:	e7ce      	b.n	10634 <__aeabi_dmul+0x4c>
   10696:	4649      	mov	r1, r9
   10698:	2a02      	cmp	r2, #2
   1069a:	d06a      	beq.n	10772 <__aeabi_dmul+0x18a>
   1069c:	2a03      	cmp	r2, #3
   1069e:	d100      	bne.n	106a2 <__aeabi_dmul+0xba>
   106a0:	e209      	b.n	10ab6 <__aeabi_dmul+0x4ce>
   106a2:	2a01      	cmp	r2, #1
   106a4:	d000      	beq.n	106a8 <__aeabi_dmul+0xc0>
   106a6:	e1bb      	b.n	10a20 <__aeabi_dmul+0x438>
   106a8:	4011      	ands	r1, r2
   106aa:	2200      	movs	r2, #0
   106ac:	2300      	movs	r3, #0
   106ae:	2500      	movs	r5, #0
   106b0:	4690      	mov	r8, r2
   106b2:	b2cc      	uxtb	r4, r1
   106b4:	2100      	movs	r1, #0
   106b6:	032d      	lsls	r5, r5, #12
   106b8:	0d0a      	lsrs	r2, r1, #20
   106ba:	0512      	lsls	r2, r2, #20
   106bc:	0b2d      	lsrs	r5, r5, #12
   106be:	4315      	orrs	r5, r2
   106c0:	4a43      	ldr	r2, [pc, #268]	; (107d0 <__aeabi_dmul+0x1e8>)
   106c2:	051b      	lsls	r3, r3, #20
   106c4:	4015      	ands	r5, r2
   106c6:	431d      	orrs	r5, r3
   106c8:	006d      	lsls	r5, r5, #1
   106ca:	07e4      	lsls	r4, r4, #31
   106cc:	086d      	lsrs	r5, r5, #1
   106ce:	4325      	orrs	r5, r4
   106d0:	4640      	mov	r0, r8
   106d2:	0029      	movs	r1, r5
   106d4:	b007      	add	sp, #28
   106d6:	bc3c      	pop	{r2, r3, r4, r5}
   106d8:	4690      	mov	r8, r2
   106da:	4699      	mov	r9, r3
   106dc:	46a2      	mov	sl, r4
   106de:	46ab      	mov	fp, r5
   106e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106e2:	4303      	orrs	r3, r0
   106e4:	d052      	beq.n	1078c <__aeabi_dmul+0x1a4>
   106e6:	465b      	mov	r3, fp
   106e8:	2b00      	cmp	r3, #0
   106ea:	d100      	bne.n	106ee <__aeabi_dmul+0x106>
   106ec:	e18a      	b.n	10a04 <__aeabi_dmul+0x41c>
   106ee:	4658      	mov	r0, fp
   106f0:	f000 fa2a 	bl	10b48 <__clzsi2>
   106f4:	0003      	movs	r3, r0
   106f6:	3b0b      	subs	r3, #11
   106f8:	2b1c      	cmp	r3, #28
   106fa:	dd00      	ble.n	106fe <__aeabi_dmul+0x116>
   106fc:	e17b      	b.n	109f6 <__aeabi_dmul+0x40e>
   106fe:	221d      	movs	r2, #29
   10700:	1ad3      	subs	r3, r2, r3
   10702:	003a      	movs	r2, r7
   10704:	0001      	movs	r1, r0
   10706:	465d      	mov	r5, fp
   10708:	40da      	lsrs	r2, r3
   1070a:	3908      	subs	r1, #8
   1070c:	408d      	lsls	r5, r1
   1070e:	0013      	movs	r3, r2
   10710:	408f      	lsls	r7, r1
   10712:	432b      	orrs	r3, r5
   10714:	469b      	mov	fp, r3
   10716:	46b8      	mov	r8, r7
   10718:	4b2e      	ldr	r3, [pc, #184]	; (107d4 <__aeabi_dmul+0x1ec>)
   1071a:	2700      	movs	r7, #0
   1071c:	469c      	mov	ip, r3
   1071e:	2300      	movs	r3, #0
   10720:	4460      	add	r0, ip
   10722:	4246      	negs	r6, r0
   10724:	9301      	str	r3, [sp, #4]
   10726:	e785      	b.n	10634 <__aeabi_dmul+0x4c>
   10728:	4652      	mov	r2, sl
   1072a:	432a      	orrs	r2, r5
   1072c:	d12c      	bne.n	10788 <__aeabi_dmul+0x1a0>
   1072e:	2500      	movs	r5, #0
   10730:	2300      	movs	r3, #0
   10732:	2202      	movs	r2, #2
   10734:	e797      	b.n	10666 <__aeabi_dmul+0x7e>
   10736:	4652      	mov	r2, sl
   10738:	432a      	orrs	r2, r5
   1073a:	d021      	beq.n	10780 <__aeabi_dmul+0x198>
   1073c:	2d00      	cmp	r5, #0
   1073e:	d100      	bne.n	10742 <__aeabi_dmul+0x15a>
   10740:	e154      	b.n	109ec <__aeabi_dmul+0x404>
   10742:	0028      	movs	r0, r5
   10744:	f000 fa00 	bl	10b48 <__clzsi2>
   10748:	0003      	movs	r3, r0
   1074a:	3b0b      	subs	r3, #11
   1074c:	2b1c      	cmp	r3, #28
   1074e:	dd00      	ble.n	10752 <__aeabi_dmul+0x16a>
   10750:	e146      	b.n	109e0 <__aeabi_dmul+0x3f8>
   10752:	211d      	movs	r1, #29
   10754:	1acb      	subs	r3, r1, r3
   10756:	4651      	mov	r1, sl
   10758:	0002      	movs	r2, r0
   1075a:	40d9      	lsrs	r1, r3
   1075c:	4653      	mov	r3, sl
   1075e:	3a08      	subs	r2, #8
   10760:	4095      	lsls	r5, r2
   10762:	4093      	lsls	r3, r2
   10764:	430d      	orrs	r5, r1
   10766:	4a1b      	ldr	r2, [pc, #108]	; (107d4 <__aeabi_dmul+0x1ec>)
   10768:	4694      	mov	ip, r2
   1076a:	4460      	add	r0, ip
   1076c:	4240      	negs	r0, r0
   1076e:	2200      	movs	r2, #0
   10770:	e779      	b.n	10666 <__aeabi_dmul+0x7e>
   10772:	2401      	movs	r4, #1
   10774:	2200      	movs	r2, #0
   10776:	400c      	ands	r4, r1
   10778:	4b12      	ldr	r3, [pc, #72]	; (107c4 <__aeabi_dmul+0x1dc>)
   1077a:	2500      	movs	r5, #0
   1077c:	4690      	mov	r8, r2
   1077e:	e799      	b.n	106b4 <__aeabi_dmul+0xcc>
   10780:	2500      	movs	r5, #0
   10782:	2300      	movs	r3, #0
   10784:	2201      	movs	r2, #1
   10786:	e76e      	b.n	10666 <__aeabi_dmul+0x7e>
   10788:	2203      	movs	r2, #3
   1078a:	e76c      	b.n	10666 <__aeabi_dmul+0x7e>
   1078c:	2300      	movs	r3, #0
   1078e:	469b      	mov	fp, r3
   10790:	4698      	mov	r8, r3
   10792:	3301      	adds	r3, #1
   10794:	2704      	movs	r7, #4
   10796:	9301      	str	r3, [sp, #4]
   10798:	e74c      	b.n	10634 <__aeabi_dmul+0x4c>
   1079a:	2303      	movs	r3, #3
   1079c:	270c      	movs	r7, #12
   1079e:	9301      	str	r3, [sp, #4]
   107a0:	e748      	b.n	10634 <__aeabi_dmul+0x4c>
   107a2:	2300      	movs	r3, #0
   107a4:	2580      	movs	r5, #128	; 0x80
   107a6:	4698      	mov	r8, r3
   107a8:	2400      	movs	r4, #0
   107aa:	032d      	lsls	r5, r5, #12
   107ac:	4b05      	ldr	r3, [pc, #20]	; (107c4 <__aeabi_dmul+0x1dc>)
   107ae:	e781      	b.n	106b4 <__aeabi_dmul+0xcc>
   107b0:	465d      	mov	r5, fp
   107b2:	4643      	mov	r3, r8
   107b4:	9a01      	ldr	r2, [sp, #4]
   107b6:	e76f      	b.n	10698 <__aeabi_dmul+0xb0>
   107b8:	465d      	mov	r5, fp
   107ba:	4643      	mov	r3, r8
   107bc:	0021      	movs	r1, r4
   107be:	9a01      	ldr	r2, [sp, #4]
   107c0:	e76a      	b.n	10698 <__aeabi_dmul+0xb0>
   107c2:	46c0      	nop			; (mov r8, r8)
   107c4:	000007ff 	.word	0x000007ff
   107c8:	fffffc01 	.word	0xfffffc01
   107cc:	00013e50 	.word	0x00013e50
   107d0:	800fffff 	.word	0x800fffff
   107d4:	000003f3 	.word	0x000003f3
   107d8:	4642      	mov	r2, r8
   107da:	0c12      	lsrs	r2, r2, #16
   107dc:	4691      	mov	r9, r2
   107de:	0c1a      	lsrs	r2, r3, #16
   107e0:	4694      	mov	ip, r2
   107e2:	4642      	mov	r2, r8
   107e4:	0417      	lsls	r7, r2, #16
   107e6:	464a      	mov	r2, r9
   107e8:	041b      	lsls	r3, r3, #16
   107ea:	0c1b      	lsrs	r3, r3, #16
   107ec:	435a      	muls	r2, r3
   107ee:	4660      	mov	r0, ip
   107f0:	4690      	mov	r8, r2
   107f2:	464a      	mov	r2, r9
   107f4:	4342      	muls	r2, r0
   107f6:	0010      	movs	r0, r2
   107f8:	9203      	str	r2, [sp, #12]
   107fa:	4662      	mov	r2, ip
   107fc:	001c      	movs	r4, r3
   107fe:	0c3f      	lsrs	r7, r7, #16
   10800:	437a      	muls	r2, r7
   10802:	437c      	muls	r4, r7
   10804:	4442      	add	r2, r8
   10806:	9201      	str	r2, [sp, #4]
   10808:	0c22      	lsrs	r2, r4, #16
   1080a:	4692      	mov	sl, r2
   1080c:	9a01      	ldr	r2, [sp, #4]
   1080e:	4452      	add	r2, sl
   10810:	4590      	cmp	r8, r2
   10812:	d906      	bls.n	10822 <__aeabi_dmul+0x23a>
   10814:	4682      	mov	sl, r0
   10816:	2080      	movs	r0, #128	; 0x80
   10818:	0240      	lsls	r0, r0, #9
   1081a:	4680      	mov	r8, r0
   1081c:	44c2      	add	sl, r8
   1081e:	4650      	mov	r0, sl
   10820:	9003      	str	r0, [sp, #12]
   10822:	0c10      	lsrs	r0, r2, #16
   10824:	9004      	str	r0, [sp, #16]
   10826:	4648      	mov	r0, r9
   10828:	0424      	lsls	r4, r4, #16
   1082a:	0c24      	lsrs	r4, r4, #16
   1082c:	0412      	lsls	r2, r2, #16
   1082e:	1912      	adds	r2, r2, r4
   10830:	9205      	str	r2, [sp, #20]
   10832:	0c2a      	lsrs	r2, r5, #16
   10834:	042d      	lsls	r5, r5, #16
   10836:	0c2d      	lsrs	r5, r5, #16
   10838:	4368      	muls	r0, r5
   1083a:	002c      	movs	r4, r5
   1083c:	4682      	mov	sl, r0
   1083e:	4648      	mov	r0, r9
   10840:	437c      	muls	r4, r7
   10842:	4350      	muls	r0, r2
   10844:	4681      	mov	r9, r0
   10846:	0c20      	lsrs	r0, r4, #16
   10848:	4680      	mov	r8, r0
   1084a:	4357      	muls	r7, r2
   1084c:	4457      	add	r7, sl
   1084e:	4447      	add	r7, r8
   10850:	45ba      	cmp	sl, r7
   10852:	d903      	bls.n	1085c <__aeabi_dmul+0x274>
   10854:	2080      	movs	r0, #128	; 0x80
   10856:	0240      	lsls	r0, r0, #9
   10858:	4680      	mov	r8, r0
   1085a:	44c1      	add	r9, r8
   1085c:	0c38      	lsrs	r0, r7, #16
   1085e:	043f      	lsls	r7, r7, #16
   10860:	46b8      	mov	r8, r7
   10862:	4448      	add	r0, r9
   10864:	0424      	lsls	r4, r4, #16
   10866:	0c24      	lsrs	r4, r4, #16
   10868:	9001      	str	r0, [sp, #4]
   1086a:	9804      	ldr	r0, [sp, #16]
   1086c:	44a0      	add	r8, r4
   1086e:	4440      	add	r0, r8
   10870:	9004      	str	r0, [sp, #16]
   10872:	4658      	mov	r0, fp
   10874:	0c00      	lsrs	r0, r0, #16
   10876:	4681      	mov	r9, r0
   10878:	4658      	mov	r0, fp
   1087a:	0404      	lsls	r4, r0, #16
   1087c:	0c20      	lsrs	r0, r4, #16
   1087e:	4682      	mov	sl, r0
   10880:	0007      	movs	r7, r0
   10882:	4648      	mov	r0, r9
   10884:	435f      	muls	r7, r3
   10886:	464c      	mov	r4, r9
   10888:	4343      	muls	r3, r0
   1088a:	4660      	mov	r0, ip
   1088c:	4360      	muls	r0, r4
   1088e:	4664      	mov	r4, ip
   10890:	4683      	mov	fp, r0
   10892:	4650      	mov	r0, sl
   10894:	4344      	muls	r4, r0
   10896:	0c38      	lsrs	r0, r7, #16
   10898:	4684      	mov	ip, r0
   1089a:	18e4      	adds	r4, r4, r3
   1089c:	4464      	add	r4, ip
   1089e:	42a3      	cmp	r3, r4
   108a0:	d903      	bls.n	108aa <__aeabi_dmul+0x2c2>
   108a2:	2380      	movs	r3, #128	; 0x80
   108a4:	025b      	lsls	r3, r3, #9
   108a6:	469c      	mov	ip, r3
   108a8:	44e3      	add	fp, ip
   108aa:	4648      	mov	r0, r9
   108ac:	043f      	lsls	r7, r7, #16
   108ae:	0c23      	lsrs	r3, r4, #16
   108b0:	0c3f      	lsrs	r7, r7, #16
   108b2:	0424      	lsls	r4, r4, #16
   108b4:	19e4      	adds	r4, r4, r7
   108b6:	4657      	mov	r7, sl
   108b8:	4368      	muls	r0, r5
   108ba:	436f      	muls	r7, r5
   108bc:	4684      	mov	ip, r0
   108be:	464d      	mov	r5, r9
   108c0:	4650      	mov	r0, sl
   108c2:	4355      	muls	r5, r2
   108c4:	4342      	muls	r2, r0
   108c6:	0c38      	lsrs	r0, r7, #16
   108c8:	4681      	mov	r9, r0
   108ca:	4462      	add	r2, ip
   108cc:	444a      	add	r2, r9
   108ce:	445b      	add	r3, fp
   108d0:	4594      	cmp	ip, r2
   108d2:	d903      	bls.n	108dc <__aeabi_dmul+0x2f4>
   108d4:	2080      	movs	r0, #128	; 0x80
   108d6:	0240      	lsls	r0, r0, #9
   108d8:	4684      	mov	ip, r0
   108da:	4465      	add	r5, ip
   108dc:	9803      	ldr	r0, [sp, #12]
   108de:	043f      	lsls	r7, r7, #16
   108e0:	4683      	mov	fp, r0
   108e2:	9804      	ldr	r0, [sp, #16]
   108e4:	0c3f      	lsrs	r7, r7, #16
   108e6:	4684      	mov	ip, r0
   108e8:	44e3      	add	fp, ip
   108ea:	45c3      	cmp	fp, r8
   108ec:	4180      	sbcs	r0, r0
   108ee:	4240      	negs	r0, r0
   108f0:	4682      	mov	sl, r0
   108f2:	0410      	lsls	r0, r2, #16
   108f4:	4684      	mov	ip, r0
   108f6:	9801      	ldr	r0, [sp, #4]
   108f8:	4467      	add	r7, ip
   108fa:	4684      	mov	ip, r0
   108fc:	4467      	add	r7, ip
   108fe:	44a3      	add	fp, r4
   10900:	46bc      	mov	ip, r7
   10902:	45a3      	cmp	fp, r4
   10904:	41a4      	sbcs	r4, r4
   10906:	4699      	mov	r9, r3
   10908:	44d4      	add	ip, sl
   1090a:	4264      	negs	r4, r4
   1090c:	4287      	cmp	r7, r0
   1090e:	41bf      	sbcs	r7, r7
   10910:	45d4      	cmp	ip, sl
   10912:	4180      	sbcs	r0, r0
   10914:	44e1      	add	r9, ip
   10916:	46a0      	mov	r8, r4
   10918:	4599      	cmp	r9, r3
   1091a:	419b      	sbcs	r3, r3
   1091c:	427f      	negs	r7, r7
   1091e:	4240      	negs	r0, r0
   10920:	44c8      	add	r8, r9
   10922:	4307      	orrs	r7, r0
   10924:	0c12      	lsrs	r2, r2, #16
   10926:	18ba      	adds	r2, r7, r2
   10928:	45a0      	cmp	r8, r4
   1092a:	41a4      	sbcs	r4, r4
   1092c:	425f      	negs	r7, r3
   1092e:	003b      	movs	r3, r7
   10930:	4264      	negs	r4, r4
   10932:	4323      	orrs	r3, r4
   10934:	18d7      	adds	r7, r2, r3
   10936:	4643      	mov	r3, r8
   10938:	197d      	adds	r5, r7, r5
   1093a:	0ddb      	lsrs	r3, r3, #23
   1093c:	026d      	lsls	r5, r5, #9
   1093e:	431d      	orrs	r5, r3
   10940:	465b      	mov	r3, fp
   10942:	025a      	lsls	r2, r3, #9
   10944:	9b05      	ldr	r3, [sp, #20]
   10946:	431a      	orrs	r2, r3
   10948:	1e53      	subs	r3, r2, #1
   1094a:	419a      	sbcs	r2, r3
   1094c:	465b      	mov	r3, fp
   1094e:	0ddb      	lsrs	r3, r3, #23
   10950:	431a      	orrs	r2, r3
   10952:	4643      	mov	r3, r8
   10954:	025b      	lsls	r3, r3, #9
   10956:	4313      	orrs	r3, r2
   10958:	01ea      	lsls	r2, r5, #7
   1095a:	d507      	bpl.n	1096c <__aeabi_dmul+0x384>
   1095c:	2201      	movs	r2, #1
   1095e:	085c      	lsrs	r4, r3, #1
   10960:	4013      	ands	r3, r2
   10962:	4323      	orrs	r3, r4
   10964:	07ea      	lsls	r2, r5, #31
   10966:	9e02      	ldr	r6, [sp, #8]
   10968:	4313      	orrs	r3, r2
   1096a:	086d      	lsrs	r5, r5, #1
   1096c:	4a57      	ldr	r2, [pc, #348]	; (10acc <__aeabi_dmul+0x4e4>)
   1096e:	18b2      	adds	r2, r6, r2
   10970:	2a00      	cmp	r2, #0
   10972:	dd4b      	ble.n	10a0c <__aeabi_dmul+0x424>
   10974:	0758      	lsls	r0, r3, #29
   10976:	d009      	beq.n	1098c <__aeabi_dmul+0x3a4>
   10978:	200f      	movs	r0, #15
   1097a:	4018      	ands	r0, r3
   1097c:	2804      	cmp	r0, #4
   1097e:	d005      	beq.n	1098c <__aeabi_dmul+0x3a4>
   10980:	1d18      	adds	r0, r3, #4
   10982:	4298      	cmp	r0, r3
   10984:	419b      	sbcs	r3, r3
   10986:	425b      	negs	r3, r3
   10988:	18ed      	adds	r5, r5, r3
   1098a:	0003      	movs	r3, r0
   1098c:	01e8      	lsls	r0, r5, #7
   1098e:	d504      	bpl.n	1099a <__aeabi_dmul+0x3b2>
   10990:	4a4f      	ldr	r2, [pc, #316]	; (10ad0 <__aeabi_dmul+0x4e8>)
   10992:	4015      	ands	r5, r2
   10994:	2280      	movs	r2, #128	; 0x80
   10996:	00d2      	lsls	r2, r2, #3
   10998:	18b2      	adds	r2, r6, r2
   1099a:	484e      	ldr	r0, [pc, #312]	; (10ad4 <__aeabi_dmul+0x4ec>)
   1099c:	4282      	cmp	r2, r0
   1099e:	dd00      	ble.n	109a2 <__aeabi_dmul+0x3ba>
   109a0:	e6e7      	b.n	10772 <__aeabi_dmul+0x18a>
   109a2:	2401      	movs	r4, #1
   109a4:	08db      	lsrs	r3, r3, #3
   109a6:	0768      	lsls	r0, r5, #29
   109a8:	4318      	orrs	r0, r3
   109aa:	026d      	lsls	r5, r5, #9
   109ac:	0553      	lsls	r3, r2, #21
   109ae:	4680      	mov	r8, r0
   109b0:	0b2d      	lsrs	r5, r5, #12
   109b2:	0d5b      	lsrs	r3, r3, #21
   109b4:	400c      	ands	r4, r1
   109b6:	e67d      	b.n	106b4 <__aeabi_dmul+0xcc>
   109b8:	2280      	movs	r2, #128	; 0x80
   109ba:	4659      	mov	r1, fp
   109bc:	0312      	lsls	r2, r2, #12
   109be:	4211      	tst	r1, r2
   109c0:	d008      	beq.n	109d4 <__aeabi_dmul+0x3ec>
   109c2:	4215      	tst	r5, r2
   109c4:	d106      	bne.n	109d4 <__aeabi_dmul+0x3ec>
   109c6:	4315      	orrs	r5, r2
   109c8:	032d      	lsls	r5, r5, #12
   109ca:	4698      	mov	r8, r3
   109cc:	0b2d      	lsrs	r5, r5, #12
   109ce:	464c      	mov	r4, r9
   109d0:	4b41      	ldr	r3, [pc, #260]	; (10ad8 <__aeabi_dmul+0x4f0>)
   109d2:	e66f      	b.n	106b4 <__aeabi_dmul+0xcc>
   109d4:	465d      	mov	r5, fp
   109d6:	4315      	orrs	r5, r2
   109d8:	032d      	lsls	r5, r5, #12
   109da:	0b2d      	lsrs	r5, r5, #12
   109dc:	4b3e      	ldr	r3, [pc, #248]	; (10ad8 <__aeabi_dmul+0x4f0>)
   109de:	e669      	b.n	106b4 <__aeabi_dmul+0xcc>
   109e0:	0003      	movs	r3, r0
   109e2:	4655      	mov	r5, sl
   109e4:	3b28      	subs	r3, #40	; 0x28
   109e6:	409d      	lsls	r5, r3
   109e8:	2300      	movs	r3, #0
   109ea:	e6bc      	b.n	10766 <__aeabi_dmul+0x17e>
   109ec:	4650      	mov	r0, sl
   109ee:	f000 f8ab 	bl	10b48 <__clzsi2>
   109f2:	3020      	adds	r0, #32
   109f4:	e6a8      	b.n	10748 <__aeabi_dmul+0x160>
   109f6:	0003      	movs	r3, r0
   109f8:	3b28      	subs	r3, #40	; 0x28
   109fa:	409f      	lsls	r7, r3
   109fc:	2300      	movs	r3, #0
   109fe:	46bb      	mov	fp, r7
   10a00:	4698      	mov	r8, r3
   10a02:	e689      	b.n	10718 <__aeabi_dmul+0x130>
   10a04:	f000 f8a0 	bl	10b48 <__clzsi2>
   10a08:	3020      	adds	r0, #32
   10a0a:	e673      	b.n	106f4 <__aeabi_dmul+0x10c>
   10a0c:	2401      	movs	r4, #1
   10a0e:	1aa6      	subs	r6, r4, r2
   10a10:	2e38      	cmp	r6, #56	; 0x38
   10a12:	dd07      	ble.n	10a24 <__aeabi_dmul+0x43c>
   10a14:	2200      	movs	r2, #0
   10a16:	400c      	ands	r4, r1
   10a18:	2300      	movs	r3, #0
   10a1a:	2500      	movs	r5, #0
   10a1c:	4690      	mov	r8, r2
   10a1e:	e649      	b.n	106b4 <__aeabi_dmul+0xcc>
   10a20:	9e02      	ldr	r6, [sp, #8]
   10a22:	e7a3      	b.n	1096c <__aeabi_dmul+0x384>
   10a24:	2e1f      	cmp	r6, #31
   10a26:	dc20      	bgt.n	10a6a <__aeabi_dmul+0x482>
   10a28:	2220      	movs	r2, #32
   10a2a:	002c      	movs	r4, r5
   10a2c:	0018      	movs	r0, r3
   10a2e:	1b92      	subs	r2, r2, r6
   10a30:	40f0      	lsrs	r0, r6
   10a32:	4094      	lsls	r4, r2
   10a34:	4093      	lsls	r3, r2
   10a36:	4304      	orrs	r4, r0
   10a38:	1e58      	subs	r0, r3, #1
   10a3a:	4183      	sbcs	r3, r0
   10a3c:	431c      	orrs	r4, r3
   10a3e:	40f5      	lsrs	r5, r6
   10a40:	0763      	lsls	r3, r4, #29
   10a42:	d009      	beq.n	10a58 <__aeabi_dmul+0x470>
   10a44:	230f      	movs	r3, #15
   10a46:	4023      	ands	r3, r4
   10a48:	2b04      	cmp	r3, #4
   10a4a:	d005      	beq.n	10a58 <__aeabi_dmul+0x470>
   10a4c:	0023      	movs	r3, r4
   10a4e:	1d1c      	adds	r4, r3, #4
   10a50:	429c      	cmp	r4, r3
   10a52:	4192      	sbcs	r2, r2
   10a54:	4252      	negs	r2, r2
   10a56:	18ad      	adds	r5, r5, r2
   10a58:	022b      	lsls	r3, r5, #8
   10a5a:	d51f      	bpl.n	10a9c <__aeabi_dmul+0x4b4>
   10a5c:	2401      	movs	r4, #1
   10a5e:	2200      	movs	r2, #0
   10a60:	400c      	ands	r4, r1
   10a62:	2301      	movs	r3, #1
   10a64:	2500      	movs	r5, #0
   10a66:	4690      	mov	r8, r2
   10a68:	e624      	b.n	106b4 <__aeabi_dmul+0xcc>
   10a6a:	201f      	movs	r0, #31
   10a6c:	002c      	movs	r4, r5
   10a6e:	4240      	negs	r0, r0
   10a70:	1a82      	subs	r2, r0, r2
   10a72:	40d4      	lsrs	r4, r2
   10a74:	2e20      	cmp	r6, #32
   10a76:	d01c      	beq.n	10ab2 <__aeabi_dmul+0x4ca>
   10a78:	2240      	movs	r2, #64	; 0x40
   10a7a:	1b96      	subs	r6, r2, r6
   10a7c:	40b5      	lsls	r5, r6
   10a7e:	432b      	orrs	r3, r5
   10a80:	1e58      	subs	r0, r3, #1
   10a82:	4183      	sbcs	r3, r0
   10a84:	2007      	movs	r0, #7
   10a86:	4323      	orrs	r3, r4
   10a88:	4018      	ands	r0, r3
   10a8a:	2500      	movs	r5, #0
   10a8c:	2800      	cmp	r0, #0
   10a8e:	d009      	beq.n	10aa4 <__aeabi_dmul+0x4bc>
   10a90:	220f      	movs	r2, #15
   10a92:	2500      	movs	r5, #0
   10a94:	401a      	ands	r2, r3
   10a96:	001c      	movs	r4, r3
   10a98:	2a04      	cmp	r2, #4
   10a9a:	d1d8      	bne.n	10a4e <__aeabi_dmul+0x466>
   10a9c:	0023      	movs	r3, r4
   10a9e:	0768      	lsls	r0, r5, #29
   10aa0:	026d      	lsls	r5, r5, #9
   10aa2:	0b2d      	lsrs	r5, r5, #12
   10aa4:	2401      	movs	r4, #1
   10aa6:	08db      	lsrs	r3, r3, #3
   10aa8:	4303      	orrs	r3, r0
   10aaa:	4698      	mov	r8, r3
   10aac:	400c      	ands	r4, r1
   10aae:	2300      	movs	r3, #0
   10ab0:	e600      	b.n	106b4 <__aeabi_dmul+0xcc>
   10ab2:	2500      	movs	r5, #0
   10ab4:	e7e3      	b.n	10a7e <__aeabi_dmul+0x496>
   10ab6:	2280      	movs	r2, #128	; 0x80
   10ab8:	2401      	movs	r4, #1
   10aba:	0312      	lsls	r2, r2, #12
   10abc:	4315      	orrs	r5, r2
   10abe:	032d      	lsls	r5, r5, #12
   10ac0:	4698      	mov	r8, r3
   10ac2:	0b2d      	lsrs	r5, r5, #12
   10ac4:	400c      	ands	r4, r1
   10ac6:	4b04      	ldr	r3, [pc, #16]	; (10ad8 <__aeabi_dmul+0x4f0>)
   10ac8:	e5f4      	b.n	106b4 <__aeabi_dmul+0xcc>
   10aca:	46c0      	nop			; (mov r8, r8)
   10acc:	000003ff 	.word	0x000003ff
   10ad0:	feffffff 	.word	0xfeffffff
   10ad4:	000007fe 	.word	0x000007fe
   10ad8:	000007ff 	.word	0x000007ff

00010adc <__aeabi_d2iz>:
   10adc:	030b      	lsls	r3, r1, #12
   10ade:	b530      	push	{r4, r5, lr}
   10ae0:	4d13      	ldr	r5, [pc, #76]	; (10b30 <__aeabi_d2iz+0x54>)
   10ae2:	0b1a      	lsrs	r2, r3, #12
   10ae4:	004b      	lsls	r3, r1, #1
   10ae6:	0d5b      	lsrs	r3, r3, #21
   10ae8:	0fc9      	lsrs	r1, r1, #31
   10aea:	2400      	movs	r4, #0
   10aec:	42ab      	cmp	r3, r5
   10aee:	dd11      	ble.n	10b14 <__aeabi_d2iz+0x38>
   10af0:	4c10      	ldr	r4, [pc, #64]	; (10b34 <__aeabi_d2iz+0x58>)
   10af2:	42a3      	cmp	r3, r4
   10af4:	dc10      	bgt.n	10b18 <__aeabi_d2iz+0x3c>
   10af6:	2480      	movs	r4, #128	; 0x80
   10af8:	0364      	lsls	r4, r4, #13
   10afa:	4322      	orrs	r2, r4
   10afc:	4c0e      	ldr	r4, [pc, #56]	; (10b38 <__aeabi_d2iz+0x5c>)
   10afe:	1ae4      	subs	r4, r4, r3
   10b00:	2c1f      	cmp	r4, #31
   10b02:	dd0c      	ble.n	10b1e <__aeabi_d2iz+0x42>
   10b04:	480d      	ldr	r0, [pc, #52]	; (10b3c <__aeabi_d2iz+0x60>)
   10b06:	1ac3      	subs	r3, r0, r3
   10b08:	40da      	lsrs	r2, r3
   10b0a:	0013      	movs	r3, r2
   10b0c:	425c      	negs	r4, r3
   10b0e:	2900      	cmp	r1, #0
   10b10:	d100      	bne.n	10b14 <__aeabi_d2iz+0x38>
   10b12:	001c      	movs	r4, r3
   10b14:	0020      	movs	r0, r4
   10b16:	bd30      	pop	{r4, r5, pc}
   10b18:	4b09      	ldr	r3, [pc, #36]	; (10b40 <__aeabi_d2iz+0x64>)
   10b1a:	18cc      	adds	r4, r1, r3
   10b1c:	e7fa      	b.n	10b14 <__aeabi_d2iz+0x38>
   10b1e:	40e0      	lsrs	r0, r4
   10b20:	4c08      	ldr	r4, [pc, #32]	; (10b44 <__aeabi_d2iz+0x68>)
   10b22:	46a4      	mov	ip, r4
   10b24:	4463      	add	r3, ip
   10b26:	409a      	lsls	r2, r3
   10b28:	0013      	movs	r3, r2
   10b2a:	4303      	orrs	r3, r0
   10b2c:	e7ee      	b.n	10b0c <__aeabi_d2iz+0x30>
   10b2e:	46c0      	nop			; (mov r8, r8)
   10b30:	000003fe 	.word	0x000003fe
   10b34:	0000041d 	.word	0x0000041d
   10b38:	00000433 	.word	0x00000433
   10b3c:	00000413 	.word	0x00000413
   10b40:	7fffffff 	.word	0x7fffffff
   10b44:	fffffbed 	.word	0xfffffbed

00010b48 <__clzsi2>:
   10b48:	211c      	movs	r1, #28
   10b4a:	2301      	movs	r3, #1
   10b4c:	041b      	lsls	r3, r3, #16
   10b4e:	4298      	cmp	r0, r3
   10b50:	d301      	bcc.n	10b56 <__clzsi2+0xe>
   10b52:	0c00      	lsrs	r0, r0, #16
   10b54:	3910      	subs	r1, #16
   10b56:	0a1b      	lsrs	r3, r3, #8
   10b58:	4298      	cmp	r0, r3
   10b5a:	d301      	bcc.n	10b60 <__clzsi2+0x18>
   10b5c:	0a00      	lsrs	r0, r0, #8
   10b5e:	3908      	subs	r1, #8
   10b60:	091b      	lsrs	r3, r3, #4
   10b62:	4298      	cmp	r0, r3
   10b64:	d301      	bcc.n	10b6a <__clzsi2+0x22>
   10b66:	0900      	lsrs	r0, r0, #4
   10b68:	3904      	subs	r1, #4
   10b6a:	a202      	add	r2, pc, #8	; (adr r2, 10b74 <__clzsi2+0x2c>)
   10b6c:	5c10      	ldrb	r0, [r2, r0]
   10b6e:	1840      	adds	r0, r0, r1
   10b70:	4770      	bx	lr
   10b72:	46c0      	nop			; (mov r8, r8)
   10b74:	02020304 	.word	0x02020304
   10b78:	01010101 	.word	0x01010101
	...

00010b84 <__clzdi2>:
   10b84:	b510      	push	{r4, lr}
   10b86:	2900      	cmp	r1, #0
   10b88:	d103      	bne.n	10b92 <__clzdi2+0xe>
   10b8a:	f7ff ffdd 	bl	10b48 <__clzsi2>
   10b8e:	3020      	adds	r0, #32
   10b90:	e002      	b.n	10b98 <__clzdi2+0x14>
   10b92:	1c08      	adds	r0, r1, #0
   10b94:	f7ff ffd8 	bl	10b48 <__clzsi2>
   10b98:	bd10      	pop	{r4, pc}
   10b9a:	46c0      	nop			; (mov r8, r8)

00010b9c <__assert_func>:
   10b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10b9e:	001d      	movs	r5, r3
   10ba0:	4b0a      	ldr	r3, [pc, #40]	; (10bcc <__assert_func+0x30>)
   10ba2:	0006      	movs	r6, r0
   10ba4:	681b      	ldr	r3, [r3, #0]
   10ba6:	68d8      	ldr	r0, [r3, #12]
   10ba8:	2a00      	cmp	r2, #0
   10baa:	d102      	bne.n	10bb2 <__assert_func+0x16>
   10bac:	4c08      	ldr	r4, [pc, #32]	; (10bd0 <__assert_func+0x34>)
   10bae:	0023      	movs	r3, r4
   10bb0:	e001      	b.n	10bb6 <__assert_func+0x1a>
   10bb2:	0013      	movs	r3, r2
   10bb4:	4c07      	ldr	r4, [pc, #28]	; (10bd4 <__assert_func+0x38>)
   10bb6:	9302      	str	r3, [sp, #8]
   10bb8:	9100      	str	r1, [sp, #0]
   10bba:	0033      	movs	r3, r6
   10bbc:	002a      	movs	r2, r5
   10bbe:	4906      	ldr	r1, [pc, #24]	; (10bd8 <__assert_func+0x3c>)
   10bc0:	9401      	str	r4, [sp, #4]
   10bc2:	f000 f811 	bl	10be8 <fiprintf>
   10bc6:	f000 fe79 	bl	118bc <abort>
   10bca:	46c0      	nop			; (mov r8, r8)
   10bcc:	20000098 	.word	0x20000098
   10bd0:	00013ecb 	.word	0x00013ecb
   10bd4:	00013e90 	.word	0x00013e90
   10bd8:	00013e9d 	.word	0x00013e9d

00010bdc <atoi>:
   10bdc:	b510      	push	{r4, lr}
   10bde:	220a      	movs	r2, #10
   10be0:	2100      	movs	r1, #0
   10be2:	f000 fd91 	bl	11708 <strtol>
   10be6:	bd10      	pop	{r4, pc}

00010be8 <fiprintf>:
   10be8:	b40e      	push	{r1, r2, r3}
   10bea:	b503      	push	{r0, r1, lr}
   10bec:	0001      	movs	r1, r0
   10bee:	ab03      	add	r3, sp, #12
   10bf0:	4804      	ldr	r0, [pc, #16]	; (10c04 <fiprintf+0x1c>)
   10bf2:	cb04      	ldmia	r3!, {r2}
   10bf4:	6800      	ldr	r0, [r0, #0]
   10bf6:	9301      	str	r3, [sp, #4]
   10bf8:	f000 f864 	bl	10cc4 <_vfiprintf_r>
   10bfc:	b002      	add	sp, #8
   10bfe:	bc08      	pop	{r3}
   10c00:	b003      	add	sp, #12
   10c02:	4718      	bx	r3
   10c04:	20000098 	.word	0x20000098

00010c08 <__libc_init_array>:
   10c08:	4b0e      	ldr	r3, [pc, #56]	; (10c44 <__libc_init_array+0x3c>)
   10c0a:	b570      	push	{r4, r5, r6, lr}
   10c0c:	2500      	movs	r5, #0
   10c0e:	001e      	movs	r6, r3
   10c10:	4c0d      	ldr	r4, [pc, #52]	; (10c48 <__libc_init_array+0x40>)
   10c12:	1ae4      	subs	r4, r4, r3
   10c14:	10a4      	asrs	r4, r4, #2
   10c16:	42a5      	cmp	r5, r4
   10c18:	d004      	beq.n	10c24 <__libc_init_array+0x1c>
   10c1a:	00ab      	lsls	r3, r5, #2
   10c1c:	58f3      	ldr	r3, [r6, r3]
   10c1e:	4798      	blx	r3
   10c20:	3501      	adds	r5, #1
   10c22:	e7f8      	b.n	10c16 <__libc_init_array+0xe>
   10c24:	f003 fa20 	bl	14068 <_init>
   10c28:	4b08      	ldr	r3, [pc, #32]	; (10c4c <__libc_init_array+0x44>)
   10c2a:	2500      	movs	r5, #0
   10c2c:	001e      	movs	r6, r3
   10c2e:	4c08      	ldr	r4, [pc, #32]	; (10c50 <__libc_init_array+0x48>)
   10c30:	1ae4      	subs	r4, r4, r3
   10c32:	10a4      	asrs	r4, r4, #2
   10c34:	42a5      	cmp	r5, r4
   10c36:	d004      	beq.n	10c42 <__libc_init_array+0x3a>
   10c38:	00ab      	lsls	r3, r5, #2
   10c3a:	58f3      	ldr	r3, [r6, r3]
   10c3c:	4798      	blx	r3
   10c3e:	3501      	adds	r5, #1
   10c40:	e7f8      	b.n	10c34 <__libc_init_array+0x2c>
   10c42:	bd70      	pop	{r4, r5, r6, pc}
   10c44:	00014074 	.word	0x00014074
   10c48:	00014074 	.word	0x00014074
   10c4c:	00014074 	.word	0x00014074
   10c50:	00014078 	.word	0x00014078

00010c54 <memcpy>:
   10c54:	2300      	movs	r3, #0
   10c56:	b510      	push	{r4, lr}
   10c58:	429a      	cmp	r2, r3
   10c5a:	d003      	beq.n	10c64 <memcpy+0x10>
   10c5c:	5ccc      	ldrb	r4, [r1, r3]
   10c5e:	54c4      	strb	r4, [r0, r3]
   10c60:	3301      	adds	r3, #1
   10c62:	e7f9      	b.n	10c58 <memcpy+0x4>
   10c64:	bd10      	pop	{r4, pc}

00010c66 <memset>:
   10c66:	0003      	movs	r3, r0
   10c68:	1882      	adds	r2, r0, r2
   10c6a:	4293      	cmp	r3, r2
   10c6c:	d002      	beq.n	10c74 <memset+0xe>
   10c6e:	7019      	strb	r1, [r3, #0]
   10c70:	3301      	adds	r3, #1
   10c72:	e7fa      	b.n	10c6a <memset+0x4>
   10c74:	4770      	bx	lr

00010c76 <__sfputc_r>:
   10c76:	6893      	ldr	r3, [r2, #8]
   10c78:	b510      	push	{r4, lr}
   10c7a:	3b01      	subs	r3, #1
   10c7c:	6093      	str	r3, [r2, #8]
   10c7e:	2b00      	cmp	r3, #0
   10c80:	da05      	bge.n	10c8e <__sfputc_r+0x18>
   10c82:	6994      	ldr	r4, [r2, #24]
   10c84:	42a3      	cmp	r3, r4
   10c86:	db08      	blt.n	10c9a <__sfputc_r+0x24>
   10c88:	b2cb      	uxtb	r3, r1
   10c8a:	2b0a      	cmp	r3, #10
   10c8c:	d005      	beq.n	10c9a <__sfputc_r+0x24>
   10c8e:	6813      	ldr	r3, [r2, #0]
   10c90:	1c58      	adds	r0, r3, #1
   10c92:	6010      	str	r0, [r2, #0]
   10c94:	7019      	strb	r1, [r3, #0]
   10c96:	b2c8      	uxtb	r0, r1
   10c98:	e001      	b.n	10c9e <__sfputc_r+0x28>
   10c9a:	f000 fd41 	bl	11720 <__swbuf_r>
   10c9e:	bd10      	pop	{r4, pc}

00010ca0 <__sfputs_r>:
   10ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ca2:	0006      	movs	r6, r0
   10ca4:	000f      	movs	r7, r1
   10ca6:	0014      	movs	r4, r2
   10ca8:	18d5      	adds	r5, r2, r3
   10caa:	42ac      	cmp	r4, r5
   10cac:	d008      	beq.n	10cc0 <__sfputs_r+0x20>
   10cae:	7821      	ldrb	r1, [r4, #0]
   10cb0:	003a      	movs	r2, r7
   10cb2:	0030      	movs	r0, r6
   10cb4:	f7ff ffdf 	bl	10c76 <__sfputc_r>
   10cb8:	3401      	adds	r4, #1
   10cba:	1c43      	adds	r3, r0, #1
   10cbc:	d1f5      	bne.n	10caa <__sfputs_r+0xa>
   10cbe:	e000      	b.n	10cc2 <__sfputs_r+0x22>
   10cc0:	2000      	movs	r0, #0
   10cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010cc4 <_vfiprintf_r>:
   10cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cc6:	b09f      	sub	sp, #124	; 0x7c
   10cc8:	0006      	movs	r6, r0
   10cca:	000f      	movs	r7, r1
   10ccc:	9202      	str	r2, [sp, #8]
   10cce:	9305      	str	r3, [sp, #20]
   10cd0:	2800      	cmp	r0, #0
   10cd2:	d004      	beq.n	10cde <_vfiprintf_r+0x1a>
   10cd4:	6983      	ldr	r3, [r0, #24]
   10cd6:	2b00      	cmp	r3, #0
   10cd8:	d101      	bne.n	10cde <_vfiprintf_r+0x1a>
   10cda:	f000 feeb 	bl	11ab4 <__sinit>
   10cde:	4b7f      	ldr	r3, [pc, #508]	; (10edc <_vfiprintf_r+0x218>)
   10ce0:	429f      	cmp	r7, r3
   10ce2:	d101      	bne.n	10ce8 <_vfiprintf_r+0x24>
   10ce4:	6877      	ldr	r7, [r6, #4]
   10ce6:	e008      	b.n	10cfa <_vfiprintf_r+0x36>
   10ce8:	4b7d      	ldr	r3, [pc, #500]	; (10ee0 <_vfiprintf_r+0x21c>)
   10cea:	429f      	cmp	r7, r3
   10cec:	d101      	bne.n	10cf2 <_vfiprintf_r+0x2e>
   10cee:	68b7      	ldr	r7, [r6, #8]
   10cf0:	e003      	b.n	10cfa <_vfiprintf_r+0x36>
   10cf2:	4b7c      	ldr	r3, [pc, #496]	; (10ee4 <_vfiprintf_r+0x220>)
   10cf4:	429f      	cmp	r7, r3
   10cf6:	d100      	bne.n	10cfa <_vfiprintf_r+0x36>
   10cf8:	68f7      	ldr	r7, [r6, #12]
   10cfa:	89bb      	ldrh	r3, [r7, #12]
   10cfc:	071b      	lsls	r3, r3, #28
   10cfe:	d50a      	bpl.n	10d16 <_vfiprintf_r+0x52>
   10d00:	693b      	ldr	r3, [r7, #16]
   10d02:	2b00      	cmp	r3, #0
   10d04:	d007      	beq.n	10d16 <_vfiprintf_r+0x52>
   10d06:	2300      	movs	r3, #0
   10d08:	ad06      	add	r5, sp, #24
   10d0a:	616b      	str	r3, [r5, #20]
   10d0c:	3320      	adds	r3, #32
   10d0e:	766b      	strb	r3, [r5, #25]
   10d10:	3310      	adds	r3, #16
   10d12:	76ab      	strb	r3, [r5, #26]
   10d14:	e03d      	b.n	10d92 <_vfiprintf_r+0xce>
   10d16:	0039      	movs	r1, r7
   10d18:	0030      	movs	r0, r6
   10d1a:	f000 fd59 	bl	117d0 <__swsetup_r>
   10d1e:	2800      	cmp	r0, #0
   10d20:	d0f1      	beq.n	10d06 <_vfiprintf_r+0x42>
   10d22:	2001      	movs	r0, #1
   10d24:	4240      	negs	r0, r0
   10d26:	e0d6      	b.n	10ed6 <_vfiprintf_r+0x212>
   10d28:	9a05      	ldr	r2, [sp, #20]
   10d2a:	1d11      	adds	r1, r2, #4
   10d2c:	6812      	ldr	r2, [r2, #0]
   10d2e:	9105      	str	r1, [sp, #20]
   10d30:	2a00      	cmp	r2, #0
   10d32:	da00      	bge.n	10d36 <_vfiprintf_r+0x72>
   10d34:	e07f      	b.n	10e36 <_vfiprintf_r+0x172>
   10d36:	9209      	str	r2, [sp, #36]	; 0x24
   10d38:	3401      	adds	r4, #1
   10d3a:	7823      	ldrb	r3, [r4, #0]
   10d3c:	2b2e      	cmp	r3, #46	; 0x2e
   10d3e:	d100      	bne.n	10d42 <_vfiprintf_r+0x7e>
   10d40:	e08d      	b.n	10e5e <_vfiprintf_r+0x19a>
   10d42:	7821      	ldrb	r1, [r4, #0]
   10d44:	2203      	movs	r2, #3
   10d46:	4868      	ldr	r0, [pc, #416]	; (10ee8 <_vfiprintf_r+0x224>)
   10d48:	f000 ffb6 	bl	11cb8 <memchr>
   10d4c:	2800      	cmp	r0, #0
   10d4e:	d007      	beq.n	10d60 <_vfiprintf_r+0x9c>
   10d50:	4b65      	ldr	r3, [pc, #404]	; (10ee8 <_vfiprintf_r+0x224>)
   10d52:	682a      	ldr	r2, [r5, #0]
   10d54:	1ac0      	subs	r0, r0, r3
   10d56:	2340      	movs	r3, #64	; 0x40
   10d58:	4083      	lsls	r3, r0
   10d5a:	4313      	orrs	r3, r2
   10d5c:	602b      	str	r3, [r5, #0]
   10d5e:	3401      	adds	r4, #1
   10d60:	7821      	ldrb	r1, [r4, #0]
   10d62:	1c63      	adds	r3, r4, #1
   10d64:	2206      	movs	r2, #6
   10d66:	4861      	ldr	r0, [pc, #388]	; (10eec <_vfiprintf_r+0x228>)
   10d68:	9302      	str	r3, [sp, #8]
   10d6a:	7629      	strb	r1, [r5, #24]
   10d6c:	f000 ffa4 	bl	11cb8 <memchr>
   10d70:	2800      	cmp	r0, #0
   10d72:	d100      	bne.n	10d76 <_vfiprintf_r+0xb2>
   10d74:	e09d      	b.n	10eb2 <_vfiprintf_r+0x1ee>
   10d76:	4b5e      	ldr	r3, [pc, #376]	; (10ef0 <_vfiprintf_r+0x22c>)
   10d78:	2b00      	cmp	r3, #0
   10d7a:	d000      	beq.n	10d7e <_vfiprintf_r+0xba>
   10d7c:	e090      	b.n	10ea0 <_vfiprintf_r+0x1dc>
   10d7e:	2207      	movs	r2, #7
   10d80:	9b05      	ldr	r3, [sp, #20]
   10d82:	3307      	adds	r3, #7
   10d84:	4393      	bics	r3, r2
   10d86:	3308      	adds	r3, #8
   10d88:	9305      	str	r3, [sp, #20]
   10d8a:	696b      	ldr	r3, [r5, #20]
   10d8c:	9a03      	ldr	r2, [sp, #12]
   10d8e:	189b      	adds	r3, r3, r2
   10d90:	616b      	str	r3, [r5, #20]
   10d92:	9c02      	ldr	r4, [sp, #8]
   10d94:	7823      	ldrb	r3, [r4, #0]
   10d96:	2b00      	cmp	r3, #0
   10d98:	d104      	bne.n	10da4 <_vfiprintf_r+0xe0>
   10d9a:	9b02      	ldr	r3, [sp, #8]
   10d9c:	1ae3      	subs	r3, r4, r3
   10d9e:	9304      	str	r3, [sp, #16]
   10da0:	d012      	beq.n	10dc8 <_vfiprintf_r+0x104>
   10da2:	e003      	b.n	10dac <_vfiprintf_r+0xe8>
   10da4:	2b25      	cmp	r3, #37	; 0x25
   10da6:	d0f8      	beq.n	10d9a <_vfiprintf_r+0xd6>
   10da8:	3401      	adds	r4, #1
   10daa:	e7f3      	b.n	10d94 <_vfiprintf_r+0xd0>
   10dac:	9b04      	ldr	r3, [sp, #16]
   10dae:	9a02      	ldr	r2, [sp, #8]
   10db0:	0039      	movs	r1, r7
   10db2:	0030      	movs	r0, r6
   10db4:	f7ff ff74 	bl	10ca0 <__sfputs_r>
   10db8:	1c43      	adds	r3, r0, #1
   10dba:	d100      	bne.n	10dbe <_vfiprintf_r+0xfa>
   10dbc:	e086      	b.n	10ecc <_vfiprintf_r+0x208>
   10dbe:	696a      	ldr	r2, [r5, #20]
   10dc0:	9b04      	ldr	r3, [sp, #16]
   10dc2:	4694      	mov	ip, r2
   10dc4:	4463      	add	r3, ip
   10dc6:	616b      	str	r3, [r5, #20]
   10dc8:	7823      	ldrb	r3, [r4, #0]
   10dca:	2b00      	cmp	r3, #0
   10dcc:	d07e      	beq.n	10ecc <_vfiprintf_r+0x208>
   10dce:	2201      	movs	r2, #1
   10dd0:	2300      	movs	r3, #0
   10dd2:	4252      	negs	r2, r2
   10dd4:	606a      	str	r2, [r5, #4]
   10dd6:	a902      	add	r1, sp, #8
   10dd8:	3254      	adds	r2, #84	; 0x54
   10dda:	1852      	adds	r2, r2, r1
   10ddc:	3401      	adds	r4, #1
   10dde:	602b      	str	r3, [r5, #0]
   10de0:	60eb      	str	r3, [r5, #12]
   10de2:	60ab      	str	r3, [r5, #8]
   10de4:	7013      	strb	r3, [r2, #0]
   10de6:	65ab      	str	r3, [r5, #88]	; 0x58
   10de8:	7821      	ldrb	r1, [r4, #0]
   10dea:	2205      	movs	r2, #5
   10dec:	4841      	ldr	r0, [pc, #260]	; (10ef4 <_vfiprintf_r+0x230>)
   10dee:	f000 ff63 	bl	11cb8 <memchr>
   10df2:	2800      	cmp	r0, #0
   10df4:	d008      	beq.n	10e08 <_vfiprintf_r+0x144>
   10df6:	4b3f      	ldr	r3, [pc, #252]	; (10ef4 <_vfiprintf_r+0x230>)
   10df8:	682a      	ldr	r2, [r5, #0]
   10dfa:	1ac0      	subs	r0, r0, r3
   10dfc:	2301      	movs	r3, #1
   10dfe:	4083      	lsls	r3, r0
   10e00:	4313      	orrs	r3, r2
   10e02:	602b      	str	r3, [r5, #0]
   10e04:	3401      	adds	r4, #1
   10e06:	e7ef      	b.n	10de8 <_vfiprintf_r+0x124>
   10e08:	682b      	ldr	r3, [r5, #0]
   10e0a:	06da      	lsls	r2, r3, #27
   10e0c:	d504      	bpl.n	10e18 <_vfiprintf_r+0x154>
   10e0e:	2253      	movs	r2, #83	; 0x53
   10e10:	2120      	movs	r1, #32
   10e12:	a802      	add	r0, sp, #8
   10e14:	1812      	adds	r2, r2, r0
   10e16:	7011      	strb	r1, [r2, #0]
   10e18:	071a      	lsls	r2, r3, #28
   10e1a:	d504      	bpl.n	10e26 <_vfiprintf_r+0x162>
   10e1c:	2253      	movs	r2, #83	; 0x53
   10e1e:	212b      	movs	r1, #43	; 0x2b
   10e20:	a802      	add	r0, sp, #8
   10e22:	1812      	adds	r2, r2, r0
   10e24:	7011      	strb	r1, [r2, #0]
   10e26:	7822      	ldrb	r2, [r4, #0]
   10e28:	2a2a      	cmp	r2, #42	; 0x2a
   10e2a:	d100      	bne.n	10e2e <_vfiprintf_r+0x16a>
   10e2c:	e77c      	b.n	10d28 <_vfiprintf_r+0x64>
   10e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e30:	2000      	movs	r0, #0
   10e32:	210a      	movs	r1, #10
   10e34:	e005      	b.n	10e42 <_vfiprintf_r+0x17e>
   10e36:	4252      	negs	r2, r2
   10e38:	60ea      	str	r2, [r5, #12]
   10e3a:	2202      	movs	r2, #2
   10e3c:	4313      	orrs	r3, r2
   10e3e:	602b      	str	r3, [r5, #0]
   10e40:	e77a      	b.n	10d38 <_vfiprintf_r+0x74>
   10e42:	7822      	ldrb	r2, [r4, #0]
   10e44:	3a30      	subs	r2, #48	; 0x30
   10e46:	2a09      	cmp	r2, #9
   10e48:	d804      	bhi.n	10e54 <_vfiprintf_r+0x190>
   10e4a:	434b      	muls	r3, r1
   10e4c:	3401      	adds	r4, #1
   10e4e:	189b      	adds	r3, r3, r2
   10e50:	2001      	movs	r0, #1
   10e52:	e7f6      	b.n	10e42 <_vfiprintf_r+0x17e>
   10e54:	2800      	cmp	r0, #0
   10e56:	d100      	bne.n	10e5a <_vfiprintf_r+0x196>
   10e58:	e76f      	b.n	10d3a <_vfiprintf_r+0x76>
   10e5a:	9309      	str	r3, [sp, #36]	; 0x24
   10e5c:	e76d      	b.n	10d3a <_vfiprintf_r+0x76>
   10e5e:	7863      	ldrb	r3, [r4, #1]
   10e60:	2b2a      	cmp	r3, #42	; 0x2a
   10e62:	d10a      	bne.n	10e7a <_vfiprintf_r+0x1b6>
   10e64:	9b05      	ldr	r3, [sp, #20]
   10e66:	3402      	adds	r4, #2
   10e68:	1d1a      	adds	r2, r3, #4
   10e6a:	681b      	ldr	r3, [r3, #0]
   10e6c:	9205      	str	r2, [sp, #20]
   10e6e:	2b00      	cmp	r3, #0
   10e70:	da01      	bge.n	10e76 <_vfiprintf_r+0x1b2>
   10e72:	2301      	movs	r3, #1
   10e74:	425b      	negs	r3, r3
   10e76:	9307      	str	r3, [sp, #28]
   10e78:	e763      	b.n	10d42 <_vfiprintf_r+0x7e>
   10e7a:	2300      	movs	r3, #0
   10e7c:	200a      	movs	r0, #10
   10e7e:	001a      	movs	r2, r3
   10e80:	3401      	adds	r4, #1
   10e82:	606b      	str	r3, [r5, #4]
   10e84:	7821      	ldrb	r1, [r4, #0]
   10e86:	3930      	subs	r1, #48	; 0x30
   10e88:	2909      	cmp	r1, #9
   10e8a:	d804      	bhi.n	10e96 <_vfiprintf_r+0x1d2>
   10e8c:	4342      	muls	r2, r0
   10e8e:	3401      	adds	r4, #1
   10e90:	1852      	adds	r2, r2, r1
   10e92:	2301      	movs	r3, #1
   10e94:	e7f6      	b.n	10e84 <_vfiprintf_r+0x1c0>
   10e96:	2b00      	cmp	r3, #0
   10e98:	d100      	bne.n	10e9c <_vfiprintf_r+0x1d8>
   10e9a:	e752      	b.n	10d42 <_vfiprintf_r+0x7e>
   10e9c:	9207      	str	r2, [sp, #28]
   10e9e:	e750      	b.n	10d42 <_vfiprintf_r+0x7e>
   10ea0:	ab05      	add	r3, sp, #20
   10ea2:	9300      	str	r3, [sp, #0]
   10ea4:	003a      	movs	r2, r7
   10ea6:	4b14      	ldr	r3, [pc, #80]	; (10ef8 <_vfiprintf_r+0x234>)
   10ea8:	0029      	movs	r1, r5
   10eaa:	0030      	movs	r0, r6
   10eac:	e000      	b.n	10eb0 <_vfiprintf_r+0x1ec>
   10eae:	bf00      	nop
   10eb0:	e007      	b.n	10ec2 <_vfiprintf_r+0x1fe>
   10eb2:	ab05      	add	r3, sp, #20
   10eb4:	9300      	str	r3, [sp, #0]
   10eb6:	003a      	movs	r2, r7
   10eb8:	4b0f      	ldr	r3, [pc, #60]	; (10ef8 <_vfiprintf_r+0x234>)
   10eba:	0029      	movs	r1, r5
   10ebc:	0030      	movs	r0, r6
   10ebe:	f000 f88b 	bl	10fd8 <_printf_i>
   10ec2:	9003      	str	r0, [sp, #12]
   10ec4:	9b03      	ldr	r3, [sp, #12]
   10ec6:	3301      	adds	r3, #1
   10ec8:	d000      	beq.n	10ecc <_vfiprintf_r+0x208>
   10eca:	e75e      	b.n	10d8a <_vfiprintf_r+0xc6>
   10ecc:	89bb      	ldrh	r3, [r7, #12]
   10ece:	065b      	lsls	r3, r3, #25
   10ed0:	d500      	bpl.n	10ed4 <_vfiprintf_r+0x210>
   10ed2:	e726      	b.n	10d22 <_vfiprintf_r+0x5e>
   10ed4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10ed6:	b01f      	add	sp, #124	; 0x7c
   10ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10eda:	46c0      	nop			; (mov r8, r8)
   10edc:	00014008 	.word	0x00014008
   10ee0:	00014028 	.word	0x00014028
   10ee4:	00014048 	.word	0x00014048
   10ee8:	00013eda 	.word	0x00013eda
   10eec:	00013ede 	.word	0x00013ede
   10ef0:	00000000 	.word	0x00000000
   10ef4:	00013ed4 	.word	0x00013ed4
   10ef8:	00010ca1 	.word	0x00010ca1

00010efc <_printf_common>:
   10efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10efe:	0017      	movs	r7, r2
   10f00:	9301      	str	r3, [sp, #4]
   10f02:	688a      	ldr	r2, [r1, #8]
   10f04:	690b      	ldr	r3, [r1, #16]
   10f06:	9000      	str	r0, [sp, #0]
   10f08:	000c      	movs	r4, r1
   10f0a:	4293      	cmp	r3, r2
   10f0c:	da00      	bge.n	10f10 <_printf_common+0x14>
   10f0e:	0013      	movs	r3, r2
   10f10:	0022      	movs	r2, r4
   10f12:	603b      	str	r3, [r7, #0]
   10f14:	3243      	adds	r2, #67	; 0x43
   10f16:	7812      	ldrb	r2, [r2, #0]
   10f18:	2a00      	cmp	r2, #0
   10f1a:	d001      	beq.n	10f20 <_printf_common+0x24>
   10f1c:	3301      	adds	r3, #1
   10f1e:	603b      	str	r3, [r7, #0]
   10f20:	6823      	ldr	r3, [r4, #0]
   10f22:	069b      	lsls	r3, r3, #26
   10f24:	d502      	bpl.n	10f2c <_printf_common+0x30>
   10f26:	683b      	ldr	r3, [r7, #0]
   10f28:	3302      	adds	r3, #2
   10f2a:	603b      	str	r3, [r7, #0]
   10f2c:	2506      	movs	r5, #6
   10f2e:	6823      	ldr	r3, [r4, #0]
   10f30:	401d      	ands	r5, r3
   10f32:	d01e      	beq.n	10f72 <_printf_common+0x76>
   10f34:	0023      	movs	r3, r4
   10f36:	3343      	adds	r3, #67	; 0x43
   10f38:	781b      	ldrb	r3, [r3, #0]
   10f3a:	1e5a      	subs	r2, r3, #1
   10f3c:	4193      	sbcs	r3, r2
   10f3e:	6822      	ldr	r2, [r4, #0]
   10f40:	0692      	lsls	r2, r2, #26
   10f42:	d51c      	bpl.n	10f7e <_printf_common+0x82>
   10f44:	2030      	movs	r0, #48	; 0x30
   10f46:	18e1      	adds	r1, r4, r3
   10f48:	3143      	adds	r1, #67	; 0x43
   10f4a:	7008      	strb	r0, [r1, #0]
   10f4c:	0021      	movs	r1, r4
   10f4e:	1c5a      	adds	r2, r3, #1
   10f50:	3145      	adds	r1, #69	; 0x45
   10f52:	7809      	ldrb	r1, [r1, #0]
   10f54:	18a2      	adds	r2, r4, r2
   10f56:	3243      	adds	r2, #67	; 0x43
   10f58:	3302      	adds	r3, #2
   10f5a:	7011      	strb	r1, [r2, #0]
   10f5c:	e00f      	b.n	10f7e <_printf_common+0x82>
   10f5e:	0022      	movs	r2, r4
   10f60:	2301      	movs	r3, #1
   10f62:	3219      	adds	r2, #25
   10f64:	9901      	ldr	r1, [sp, #4]
   10f66:	9800      	ldr	r0, [sp, #0]
   10f68:	9e08      	ldr	r6, [sp, #32]
   10f6a:	47b0      	blx	r6
   10f6c:	1c43      	adds	r3, r0, #1
   10f6e:	d00e      	beq.n	10f8e <_printf_common+0x92>
   10f70:	3501      	adds	r5, #1
   10f72:	68e3      	ldr	r3, [r4, #12]
   10f74:	683a      	ldr	r2, [r7, #0]
   10f76:	1a9b      	subs	r3, r3, r2
   10f78:	429d      	cmp	r5, r3
   10f7a:	dbf0      	blt.n	10f5e <_printf_common+0x62>
   10f7c:	e7da      	b.n	10f34 <_printf_common+0x38>
   10f7e:	0022      	movs	r2, r4
   10f80:	9901      	ldr	r1, [sp, #4]
   10f82:	3243      	adds	r2, #67	; 0x43
   10f84:	9800      	ldr	r0, [sp, #0]
   10f86:	9d08      	ldr	r5, [sp, #32]
   10f88:	47a8      	blx	r5
   10f8a:	1c43      	adds	r3, r0, #1
   10f8c:	d102      	bne.n	10f94 <_printf_common+0x98>
   10f8e:	2001      	movs	r0, #1
   10f90:	4240      	negs	r0, r0
   10f92:	e020      	b.n	10fd6 <_printf_common+0xda>
   10f94:	2306      	movs	r3, #6
   10f96:	6820      	ldr	r0, [r4, #0]
   10f98:	68e1      	ldr	r1, [r4, #12]
   10f9a:	683a      	ldr	r2, [r7, #0]
   10f9c:	4003      	ands	r3, r0
   10f9e:	2500      	movs	r5, #0
   10fa0:	2b04      	cmp	r3, #4
   10fa2:	d103      	bne.n	10fac <_printf_common+0xb0>
   10fa4:	1a8d      	subs	r5, r1, r2
   10fa6:	43eb      	mvns	r3, r5
   10fa8:	17db      	asrs	r3, r3, #31
   10faa:	401d      	ands	r5, r3
   10fac:	68a3      	ldr	r3, [r4, #8]
   10fae:	6922      	ldr	r2, [r4, #16]
   10fb0:	4293      	cmp	r3, r2
   10fb2:	dd01      	ble.n	10fb8 <_printf_common+0xbc>
   10fb4:	1a9b      	subs	r3, r3, r2
   10fb6:	18ed      	adds	r5, r5, r3
   10fb8:	2700      	movs	r7, #0
   10fba:	42bd      	cmp	r5, r7
   10fbc:	d00a      	beq.n	10fd4 <_printf_common+0xd8>
   10fbe:	0022      	movs	r2, r4
   10fc0:	2301      	movs	r3, #1
   10fc2:	321a      	adds	r2, #26
   10fc4:	9901      	ldr	r1, [sp, #4]
   10fc6:	9800      	ldr	r0, [sp, #0]
   10fc8:	9e08      	ldr	r6, [sp, #32]
   10fca:	47b0      	blx	r6
   10fcc:	1c43      	adds	r3, r0, #1
   10fce:	d0de      	beq.n	10f8e <_printf_common+0x92>
   10fd0:	3701      	adds	r7, #1
   10fd2:	e7f2      	b.n	10fba <_printf_common+0xbe>
   10fd4:	2000      	movs	r0, #0
   10fd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00010fd8 <_printf_i>:
   10fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fda:	b08b      	sub	sp, #44	; 0x2c
   10fdc:	9206      	str	r2, [sp, #24]
   10fde:	000a      	movs	r2, r1
   10fe0:	3243      	adds	r2, #67	; 0x43
   10fe2:	9307      	str	r3, [sp, #28]
   10fe4:	9005      	str	r0, [sp, #20]
   10fe6:	9204      	str	r2, [sp, #16]
   10fe8:	7e0a      	ldrb	r2, [r1, #24]
   10fea:	000c      	movs	r4, r1
   10fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10fee:	2a6e      	cmp	r2, #110	; 0x6e
   10ff0:	d100      	bne.n	10ff4 <_printf_i+0x1c>
   10ff2:	e0ab      	b.n	1114c <_printf_i+0x174>
   10ff4:	d811      	bhi.n	1101a <_printf_i+0x42>
   10ff6:	2a63      	cmp	r2, #99	; 0x63
   10ff8:	d022      	beq.n	11040 <_printf_i+0x68>
   10ffa:	d809      	bhi.n	11010 <_printf_i+0x38>
   10ffc:	2a00      	cmp	r2, #0
   10ffe:	d100      	bne.n	11002 <_printf_i+0x2a>
   11000:	e0b5      	b.n	1116e <_printf_i+0x196>
   11002:	2a58      	cmp	r2, #88	; 0x58
   11004:	d000      	beq.n	11008 <_printf_i+0x30>
   11006:	e0c5      	b.n	11194 <_printf_i+0x1bc>
   11008:	3145      	adds	r1, #69	; 0x45
   1100a:	700a      	strb	r2, [r1, #0]
   1100c:	4a81      	ldr	r2, [pc, #516]	; (11214 <_printf_i+0x23c>)
   1100e:	e04f      	b.n	110b0 <_printf_i+0xd8>
   11010:	2a64      	cmp	r2, #100	; 0x64
   11012:	d01d      	beq.n	11050 <_printf_i+0x78>
   11014:	2a69      	cmp	r2, #105	; 0x69
   11016:	d01b      	beq.n	11050 <_printf_i+0x78>
   11018:	e0bc      	b.n	11194 <_printf_i+0x1bc>
   1101a:	2a73      	cmp	r2, #115	; 0x73
   1101c:	d100      	bne.n	11020 <_printf_i+0x48>
   1101e:	e0aa      	b.n	11176 <_printf_i+0x19e>
   11020:	d809      	bhi.n	11036 <_printf_i+0x5e>
   11022:	2a6f      	cmp	r2, #111	; 0x6f
   11024:	d029      	beq.n	1107a <_printf_i+0xa2>
   11026:	2a70      	cmp	r2, #112	; 0x70
   11028:	d000      	beq.n	1102c <_printf_i+0x54>
   1102a:	e0b3      	b.n	11194 <_printf_i+0x1bc>
   1102c:	2220      	movs	r2, #32
   1102e:	6809      	ldr	r1, [r1, #0]
   11030:	430a      	orrs	r2, r1
   11032:	6022      	str	r2, [r4, #0]
   11034:	e037      	b.n	110a6 <_printf_i+0xce>
   11036:	2a75      	cmp	r2, #117	; 0x75
   11038:	d01f      	beq.n	1107a <_printf_i+0xa2>
   1103a:	2a78      	cmp	r2, #120	; 0x78
   1103c:	d033      	beq.n	110a6 <_printf_i+0xce>
   1103e:	e0a9      	b.n	11194 <_printf_i+0x1bc>
   11040:	000e      	movs	r6, r1
   11042:	681a      	ldr	r2, [r3, #0]
   11044:	3642      	adds	r6, #66	; 0x42
   11046:	1d11      	adds	r1, r2, #4
   11048:	6019      	str	r1, [r3, #0]
   1104a:	6813      	ldr	r3, [r2, #0]
   1104c:	7033      	strb	r3, [r6, #0]
   1104e:	e0a4      	b.n	1119a <_printf_i+0x1c2>
   11050:	6821      	ldr	r1, [r4, #0]
   11052:	681a      	ldr	r2, [r3, #0]
   11054:	0608      	lsls	r0, r1, #24
   11056:	d406      	bmi.n	11066 <_printf_i+0x8e>
   11058:	0649      	lsls	r1, r1, #25
   1105a:	d504      	bpl.n	11066 <_printf_i+0x8e>
   1105c:	1d11      	adds	r1, r2, #4
   1105e:	6019      	str	r1, [r3, #0]
   11060:	2300      	movs	r3, #0
   11062:	5ed5      	ldrsh	r5, [r2, r3]
   11064:	e002      	b.n	1106c <_printf_i+0x94>
   11066:	1d11      	adds	r1, r2, #4
   11068:	6019      	str	r1, [r3, #0]
   1106a:	6815      	ldr	r5, [r2, #0]
   1106c:	2d00      	cmp	r5, #0
   1106e:	da3b      	bge.n	110e8 <_printf_i+0x110>
   11070:	232d      	movs	r3, #45	; 0x2d
   11072:	9a04      	ldr	r2, [sp, #16]
   11074:	426d      	negs	r5, r5
   11076:	7013      	strb	r3, [r2, #0]
   11078:	e036      	b.n	110e8 <_printf_i+0x110>
   1107a:	6821      	ldr	r1, [r4, #0]
   1107c:	681a      	ldr	r2, [r3, #0]
   1107e:	0608      	lsls	r0, r1, #24
   11080:	d406      	bmi.n	11090 <_printf_i+0xb8>
   11082:	0649      	lsls	r1, r1, #25
   11084:	d504      	bpl.n	11090 <_printf_i+0xb8>
   11086:	6815      	ldr	r5, [r2, #0]
   11088:	1d11      	adds	r1, r2, #4
   1108a:	6019      	str	r1, [r3, #0]
   1108c:	b2ad      	uxth	r5, r5
   1108e:	e002      	b.n	11096 <_printf_i+0xbe>
   11090:	1d11      	adds	r1, r2, #4
   11092:	6019      	str	r1, [r3, #0]
   11094:	6815      	ldr	r5, [r2, #0]
   11096:	4b5f      	ldr	r3, [pc, #380]	; (11214 <_printf_i+0x23c>)
   11098:	7e22      	ldrb	r2, [r4, #24]
   1109a:	9303      	str	r3, [sp, #12]
   1109c:	2708      	movs	r7, #8
   1109e:	2a6f      	cmp	r2, #111	; 0x6f
   110a0:	d01d      	beq.n	110de <_printf_i+0x106>
   110a2:	270a      	movs	r7, #10
   110a4:	e01b      	b.n	110de <_printf_i+0x106>
   110a6:	0022      	movs	r2, r4
   110a8:	2178      	movs	r1, #120	; 0x78
   110aa:	3245      	adds	r2, #69	; 0x45
   110ac:	7011      	strb	r1, [r2, #0]
   110ae:	4a5a      	ldr	r2, [pc, #360]	; (11218 <_printf_i+0x240>)
   110b0:	6819      	ldr	r1, [r3, #0]
   110b2:	9203      	str	r2, [sp, #12]
   110b4:	1d08      	adds	r0, r1, #4
   110b6:	6822      	ldr	r2, [r4, #0]
   110b8:	6018      	str	r0, [r3, #0]
   110ba:	680d      	ldr	r5, [r1, #0]
   110bc:	0610      	lsls	r0, r2, #24
   110be:	d402      	bmi.n	110c6 <_printf_i+0xee>
   110c0:	0650      	lsls	r0, r2, #25
   110c2:	d500      	bpl.n	110c6 <_printf_i+0xee>
   110c4:	b2ad      	uxth	r5, r5
   110c6:	07d3      	lsls	r3, r2, #31
   110c8:	d502      	bpl.n	110d0 <_printf_i+0xf8>
   110ca:	2320      	movs	r3, #32
   110cc:	431a      	orrs	r2, r3
   110ce:	6022      	str	r2, [r4, #0]
   110d0:	2710      	movs	r7, #16
   110d2:	2d00      	cmp	r5, #0
   110d4:	d103      	bne.n	110de <_printf_i+0x106>
   110d6:	2320      	movs	r3, #32
   110d8:	6822      	ldr	r2, [r4, #0]
   110da:	439a      	bics	r2, r3
   110dc:	6022      	str	r2, [r4, #0]
   110de:	0023      	movs	r3, r4
   110e0:	2200      	movs	r2, #0
   110e2:	3343      	adds	r3, #67	; 0x43
   110e4:	701a      	strb	r2, [r3, #0]
   110e6:	e002      	b.n	110ee <_printf_i+0x116>
   110e8:	270a      	movs	r7, #10
   110ea:	4b4a      	ldr	r3, [pc, #296]	; (11214 <_printf_i+0x23c>)
   110ec:	9303      	str	r3, [sp, #12]
   110ee:	6863      	ldr	r3, [r4, #4]
   110f0:	60a3      	str	r3, [r4, #8]
   110f2:	2b00      	cmp	r3, #0
   110f4:	db09      	blt.n	1110a <_printf_i+0x132>
   110f6:	2204      	movs	r2, #4
   110f8:	6821      	ldr	r1, [r4, #0]
   110fa:	4391      	bics	r1, r2
   110fc:	6021      	str	r1, [r4, #0]
   110fe:	2d00      	cmp	r5, #0
   11100:	d105      	bne.n	1110e <_printf_i+0x136>
   11102:	9e04      	ldr	r6, [sp, #16]
   11104:	2b00      	cmp	r3, #0
   11106:	d011      	beq.n	1112c <_printf_i+0x154>
   11108:	e07b      	b.n	11202 <_printf_i+0x22a>
   1110a:	2d00      	cmp	r5, #0
   1110c:	d079      	beq.n	11202 <_printf_i+0x22a>
   1110e:	9e04      	ldr	r6, [sp, #16]
   11110:	0028      	movs	r0, r5
   11112:	0039      	movs	r1, r7
   11114:	f7ff f86c 	bl	101f0 <__aeabi_uidivmod>
   11118:	9b03      	ldr	r3, [sp, #12]
   1111a:	3e01      	subs	r6, #1
   1111c:	5c5b      	ldrb	r3, [r3, r1]
   1111e:	0028      	movs	r0, r5
   11120:	7033      	strb	r3, [r6, #0]
   11122:	0039      	movs	r1, r7
   11124:	f7fe ffde 	bl	100e4 <__aeabi_uidiv>
   11128:	1e05      	subs	r5, r0, #0
   1112a:	d1f1      	bne.n	11110 <_printf_i+0x138>
   1112c:	2f08      	cmp	r7, #8
   1112e:	d109      	bne.n	11144 <_printf_i+0x16c>
   11130:	6823      	ldr	r3, [r4, #0]
   11132:	07db      	lsls	r3, r3, #31
   11134:	d506      	bpl.n	11144 <_printf_i+0x16c>
   11136:	6863      	ldr	r3, [r4, #4]
   11138:	6922      	ldr	r2, [r4, #16]
   1113a:	4293      	cmp	r3, r2
   1113c:	dc02      	bgt.n	11144 <_printf_i+0x16c>
   1113e:	2330      	movs	r3, #48	; 0x30
   11140:	3e01      	subs	r6, #1
   11142:	7033      	strb	r3, [r6, #0]
   11144:	9b04      	ldr	r3, [sp, #16]
   11146:	1b9b      	subs	r3, r3, r6
   11148:	6123      	str	r3, [r4, #16]
   1114a:	e02b      	b.n	111a4 <_printf_i+0x1cc>
   1114c:	6809      	ldr	r1, [r1, #0]
   1114e:	681a      	ldr	r2, [r3, #0]
   11150:	0608      	lsls	r0, r1, #24
   11152:	d407      	bmi.n	11164 <_printf_i+0x18c>
   11154:	0649      	lsls	r1, r1, #25
   11156:	d505      	bpl.n	11164 <_printf_i+0x18c>
   11158:	1d11      	adds	r1, r2, #4
   1115a:	6019      	str	r1, [r3, #0]
   1115c:	6813      	ldr	r3, [r2, #0]
   1115e:	8aa2      	ldrh	r2, [r4, #20]
   11160:	801a      	strh	r2, [r3, #0]
   11162:	e004      	b.n	1116e <_printf_i+0x196>
   11164:	1d11      	adds	r1, r2, #4
   11166:	6019      	str	r1, [r3, #0]
   11168:	6813      	ldr	r3, [r2, #0]
   1116a:	6962      	ldr	r2, [r4, #20]
   1116c:	601a      	str	r2, [r3, #0]
   1116e:	2300      	movs	r3, #0
   11170:	9e04      	ldr	r6, [sp, #16]
   11172:	6123      	str	r3, [r4, #16]
   11174:	e016      	b.n	111a4 <_printf_i+0x1cc>
   11176:	681a      	ldr	r2, [r3, #0]
   11178:	1d11      	adds	r1, r2, #4
   1117a:	6019      	str	r1, [r3, #0]
   1117c:	6816      	ldr	r6, [r2, #0]
   1117e:	2100      	movs	r1, #0
   11180:	6862      	ldr	r2, [r4, #4]
   11182:	0030      	movs	r0, r6
   11184:	f000 fd98 	bl	11cb8 <memchr>
   11188:	2800      	cmp	r0, #0
   1118a:	d001      	beq.n	11190 <_printf_i+0x1b8>
   1118c:	1b80      	subs	r0, r0, r6
   1118e:	6060      	str	r0, [r4, #4]
   11190:	6863      	ldr	r3, [r4, #4]
   11192:	e003      	b.n	1119c <_printf_i+0x1c4>
   11194:	0026      	movs	r6, r4
   11196:	3642      	adds	r6, #66	; 0x42
   11198:	7032      	strb	r2, [r6, #0]
   1119a:	2301      	movs	r3, #1
   1119c:	6123      	str	r3, [r4, #16]
   1119e:	2300      	movs	r3, #0
   111a0:	9a04      	ldr	r2, [sp, #16]
   111a2:	7013      	strb	r3, [r2, #0]
   111a4:	9b07      	ldr	r3, [sp, #28]
   111a6:	aa09      	add	r2, sp, #36	; 0x24
   111a8:	9300      	str	r3, [sp, #0]
   111aa:	0021      	movs	r1, r4
   111ac:	9b06      	ldr	r3, [sp, #24]
   111ae:	9805      	ldr	r0, [sp, #20]
   111b0:	f7ff fea4 	bl	10efc <_printf_common>
   111b4:	1c43      	adds	r3, r0, #1
   111b6:	d102      	bne.n	111be <_printf_i+0x1e6>
   111b8:	2001      	movs	r0, #1
   111ba:	4240      	negs	r0, r0
   111bc:	e027      	b.n	1120e <_printf_i+0x236>
   111be:	6923      	ldr	r3, [r4, #16]
   111c0:	0032      	movs	r2, r6
   111c2:	9906      	ldr	r1, [sp, #24]
   111c4:	9805      	ldr	r0, [sp, #20]
   111c6:	9d07      	ldr	r5, [sp, #28]
   111c8:	47a8      	blx	r5
   111ca:	1c43      	adds	r3, r0, #1
   111cc:	d0f4      	beq.n	111b8 <_printf_i+0x1e0>
   111ce:	6823      	ldr	r3, [r4, #0]
   111d0:	2500      	movs	r5, #0
   111d2:	079b      	lsls	r3, r3, #30
   111d4:	d40f      	bmi.n	111f6 <_printf_i+0x21e>
   111d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111d8:	68e0      	ldr	r0, [r4, #12]
   111da:	4298      	cmp	r0, r3
   111dc:	da17      	bge.n	1120e <_printf_i+0x236>
   111de:	0018      	movs	r0, r3
   111e0:	e015      	b.n	1120e <_printf_i+0x236>
   111e2:	0022      	movs	r2, r4
   111e4:	2301      	movs	r3, #1
   111e6:	3219      	adds	r2, #25
   111e8:	9906      	ldr	r1, [sp, #24]
   111ea:	9805      	ldr	r0, [sp, #20]
   111ec:	9e07      	ldr	r6, [sp, #28]
   111ee:	47b0      	blx	r6
   111f0:	1c43      	adds	r3, r0, #1
   111f2:	d0e1      	beq.n	111b8 <_printf_i+0x1e0>
   111f4:	3501      	adds	r5, #1
   111f6:	68e3      	ldr	r3, [r4, #12]
   111f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111fa:	1a9b      	subs	r3, r3, r2
   111fc:	429d      	cmp	r5, r3
   111fe:	dbf0      	blt.n	111e2 <_printf_i+0x20a>
   11200:	e7e9      	b.n	111d6 <_printf_i+0x1fe>
   11202:	0026      	movs	r6, r4
   11204:	9b03      	ldr	r3, [sp, #12]
   11206:	3642      	adds	r6, #66	; 0x42
   11208:	781b      	ldrb	r3, [r3, #0]
   1120a:	7033      	strb	r3, [r6, #0]
   1120c:	e78e      	b.n	1112c <_printf_i+0x154>
   1120e:	b00b      	add	sp, #44	; 0x2c
   11210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11212:	46c0      	nop			; (mov r8, r8)
   11214:	00013ee5 	.word	0x00013ee5
   11218:	00013ef6 	.word	0x00013ef6

0001121c <iprintf>:
   1121c:	b40f      	push	{r0, r1, r2, r3}
   1121e:	4b0b      	ldr	r3, [pc, #44]	; (1124c <iprintf+0x30>)
   11220:	b513      	push	{r0, r1, r4, lr}
   11222:	681c      	ldr	r4, [r3, #0]
   11224:	2c00      	cmp	r4, #0
   11226:	d005      	beq.n	11234 <iprintf+0x18>
   11228:	69a3      	ldr	r3, [r4, #24]
   1122a:	2b00      	cmp	r3, #0
   1122c:	d102      	bne.n	11234 <iprintf+0x18>
   1122e:	0020      	movs	r0, r4
   11230:	f000 fc40 	bl	11ab4 <__sinit>
   11234:	ab05      	add	r3, sp, #20
   11236:	9a04      	ldr	r2, [sp, #16]
   11238:	68a1      	ldr	r1, [r4, #8]
   1123a:	0020      	movs	r0, r4
   1123c:	9301      	str	r3, [sp, #4]
   1123e:	f7ff fd41 	bl	10cc4 <_vfiprintf_r>
   11242:	bc16      	pop	{r1, r2, r4}
   11244:	bc08      	pop	{r3}
   11246:	b004      	add	sp, #16
   11248:	4718      	bx	r3
   1124a:	46c0      	nop			; (mov r8, r8)
   1124c:	20000098 	.word	0x20000098

00011250 <putchar>:
   11250:	4b08      	ldr	r3, [pc, #32]	; (11274 <putchar+0x24>)
   11252:	b570      	push	{r4, r5, r6, lr}
   11254:	681c      	ldr	r4, [r3, #0]
   11256:	0005      	movs	r5, r0
   11258:	2c00      	cmp	r4, #0
   1125a:	d005      	beq.n	11268 <putchar+0x18>
   1125c:	69a3      	ldr	r3, [r4, #24]
   1125e:	2b00      	cmp	r3, #0
   11260:	d102      	bne.n	11268 <putchar+0x18>
   11262:	0020      	movs	r0, r4
   11264:	f000 fc26 	bl	11ab4 <__sinit>
   11268:	0029      	movs	r1, r5
   1126a:	68a2      	ldr	r2, [r4, #8]
   1126c:	0020      	movs	r0, r4
   1126e:	f000 ff65 	bl	1213c <_putc_r>
   11272:	bd70      	pop	{r4, r5, r6, pc}
   11274:	20000098 	.word	0x20000098

00011278 <_puts_r>:
   11278:	b570      	push	{r4, r5, r6, lr}
   1127a:	0005      	movs	r5, r0
   1127c:	000e      	movs	r6, r1
   1127e:	2800      	cmp	r0, #0
   11280:	d004      	beq.n	1128c <_puts_r+0x14>
   11282:	6983      	ldr	r3, [r0, #24]
   11284:	2b00      	cmp	r3, #0
   11286:	d101      	bne.n	1128c <_puts_r+0x14>
   11288:	f000 fc14 	bl	11ab4 <__sinit>
   1128c:	69ab      	ldr	r3, [r5, #24]
   1128e:	68ac      	ldr	r4, [r5, #8]
   11290:	2b00      	cmp	r3, #0
   11292:	d102      	bne.n	1129a <_puts_r+0x22>
   11294:	0028      	movs	r0, r5
   11296:	f000 fc0d 	bl	11ab4 <__sinit>
   1129a:	4b25      	ldr	r3, [pc, #148]	; (11330 <_puts_r+0xb8>)
   1129c:	429c      	cmp	r4, r3
   1129e:	d101      	bne.n	112a4 <_puts_r+0x2c>
   112a0:	686c      	ldr	r4, [r5, #4]
   112a2:	e008      	b.n	112b6 <_puts_r+0x3e>
   112a4:	4b23      	ldr	r3, [pc, #140]	; (11334 <_puts_r+0xbc>)
   112a6:	429c      	cmp	r4, r3
   112a8:	d101      	bne.n	112ae <_puts_r+0x36>
   112aa:	68ac      	ldr	r4, [r5, #8]
   112ac:	e003      	b.n	112b6 <_puts_r+0x3e>
   112ae:	4b22      	ldr	r3, [pc, #136]	; (11338 <_puts_r+0xc0>)
   112b0:	429c      	cmp	r4, r3
   112b2:	d100      	bne.n	112b6 <_puts_r+0x3e>
   112b4:	68ec      	ldr	r4, [r5, #12]
   112b6:	89a3      	ldrh	r3, [r4, #12]
   112b8:	071b      	lsls	r3, r3, #28
   112ba:	d502      	bpl.n	112c2 <_puts_r+0x4a>
   112bc:	6923      	ldr	r3, [r4, #16]
   112be:	2b00      	cmp	r3, #0
   112c0:	d111      	bne.n	112e6 <_puts_r+0x6e>
   112c2:	0021      	movs	r1, r4
   112c4:	0028      	movs	r0, r5
   112c6:	f000 fa83 	bl	117d0 <__swsetup_r>
   112ca:	2800      	cmp	r0, #0
   112cc:	d00b      	beq.n	112e6 <_puts_r+0x6e>
   112ce:	2001      	movs	r0, #1
   112d0:	4240      	negs	r0, r0
   112d2:	e02b      	b.n	1132c <_puts_r+0xb4>
   112d4:	3b01      	subs	r3, #1
   112d6:	3601      	adds	r6, #1
   112d8:	60a3      	str	r3, [r4, #8]
   112da:	2b00      	cmp	r3, #0
   112dc:	db08      	blt.n	112f0 <_puts_r+0x78>
   112de:	6823      	ldr	r3, [r4, #0]
   112e0:	1c5a      	adds	r2, r3, #1
   112e2:	6022      	str	r2, [r4, #0]
   112e4:	7019      	strb	r1, [r3, #0]
   112e6:	7831      	ldrb	r1, [r6, #0]
   112e8:	68a3      	ldr	r3, [r4, #8]
   112ea:	2900      	cmp	r1, #0
   112ec:	d1f2      	bne.n	112d4 <_puts_r+0x5c>
   112ee:	e00b      	b.n	11308 <_puts_r+0x90>
   112f0:	69a2      	ldr	r2, [r4, #24]
   112f2:	4293      	cmp	r3, r2
   112f4:	db01      	blt.n	112fa <_puts_r+0x82>
   112f6:	290a      	cmp	r1, #10
   112f8:	d1f1      	bne.n	112de <_puts_r+0x66>
   112fa:	0022      	movs	r2, r4
   112fc:	0028      	movs	r0, r5
   112fe:	f000 fa0f 	bl	11720 <__swbuf_r>
   11302:	1c43      	adds	r3, r0, #1
   11304:	d1ef      	bne.n	112e6 <_puts_r+0x6e>
   11306:	e7e2      	b.n	112ce <_puts_r+0x56>
   11308:	3b01      	subs	r3, #1
   1130a:	60a3      	str	r3, [r4, #8]
   1130c:	2b00      	cmp	r3, #0
   1130e:	da08      	bge.n	11322 <_puts_r+0xaa>
   11310:	0022      	movs	r2, r4
   11312:	310a      	adds	r1, #10
   11314:	0028      	movs	r0, r5
   11316:	f000 fa03 	bl	11720 <__swbuf_r>
   1131a:	1c43      	adds	r3, r0, #1
   1131c:	d0d7      	beq.n	112ce <_puts_r+0x56>
   1131e:	200a      	movs	r0, #10
   11320:	e004      	b.n	1132c <_puts_r+0xb4>
   11322:	200a      	movs	r0, #10
   11324:	6823      	ldr	r3, [r4, #0]
   11326:	1c5a      	adds	r2, r3, #1
   11328:	6022      	str	r2, [r4, #0]
   1132a:	7018      	strb	r0, [r3, #0]
   1132c:	bd70      	pop	{r4, r5, r6, pc}
   1132e:	46c0      	nop			; (mov r8, r8)
   11330:	00014008 	.word	0x00014008
   11334:	00014028 	.word	0x00014028
   11338:	00014048 	.word	0x00014048

0001133c <puts>:
   1133c:	b510      	push	{r4, lr}
   1133e:	4b03      	ldr	r3, [pc, #12]	; (1134c <puts+0x10>)
   11340:	0001      	movs	r1, r0
   11342:	6818      	ldr	r0, [r3, #0]
   11344:	f7ff ff98 	bl	11278 <_puts_r>
   11348:	bd10      	pop	{r4, pc}
   1134a:	46c0      	nop			; (mov r8, r8)
   1134c:	20000098 	.word	0x20000098

00011350 <setbuf>:
   11350:	424a      	negs	r2, r1
   11352:	414a      	adcs	r2, r1
   11354:	2380      	movs	r3, #128	; 0x80
   11356:	b510      	push	{r4, lr}
   11358:	0052      	lsls	r2, r2, #1
   1135a:	00db      	lsls	r3, r3, #3
   1135c:	f000 f802 	bl	11364 <setvbuf>
   11360:	bd10      	pop	{r4, pc}
	...

00011364 <setvbuf>:
   11364:	b5f0      	push	{r4, r5, r6, r7, lr}
   11366:	001d      	movs	r5, r3
   11368:	4b51      	ldr	r3, [pc, #324]	; (114b0 <setvbuf+0x14c>)
   1136a:	b085      	sub	sp, #20
   1136c:	681e      	ldr	r6, [r3, #0]
   1136e:	0004      	movs	r4, r0
   11370:	000f      	movs	r7, r1
   11372:	9200      	str	r2, [sp, #0]
   11374:	2e00      	cmp	r6, #0
   11376:	d005      	beq.n	11384 <setvbuf+0x20>
   11378:	69b3      	ldr	r3, [r6, #24]
   1137a:	2b00      	cmp	r3, #0
   1137c:	d102      	bne.n	11384 <setvbuf+0x20>
   1137e:	0030      	movs	r0, r6
   11380:	f000 fb98 	bl	11ab4 <__sinit>
   11384:	4b4b      	ldr	r3, [pc, #300]	; (114b4 <setvbuf+0x150>)
   11386:	429c      	cmp	r4, r3
   11388:	d101      	bne.n	1138e <setvbuf+0x2a>
   1138a:	6874      	ldr	r4, [r6, #4]
   1138c:	e008      	b.n	113a0 <setvbuf+0x3c>
   1138e:	4b4a      	ldr	r3, [pc, #296]	; (114b8 <setvbuf+0x154>)
   11390:	429c      	cmp	r4, r3
   11392:	d101      	bne.n	11398 <setvbuf+0x34>
   11394:	68b4      	ldr	r4, [r6, #8]
   11396:	e003      	b.n	113a0 <setvbuf+0x3c>
   11398:	4b48      	ldr	r3, [pc, #288]	; (114bc <setvbuf+0x158>)
   1139a:	429c      	cmp	r4, r3
   1139c:	d100      	bne.n	113a0 <setvbuf+0x3c>
   1139e:	68f4      	ldr	r4, [r6, #12]
   113a0:	9b00      	ldr	r3, [sp, #0]
   113a2:	2b02      	cmp	r3, #2
   113a4:	d005      	beq.n	113b2 <setvbuf+0x4e>
   113a6:	2b01      	cmp	r3, #1
   113a8:	d900      	bls.n	113ac <setvbuf+0x48>
   113aa:	e07c      	b.n	114a6 <setvbuf+0x142>
   113ac:	2d00      	cmp	r5, #0
   113ae:	da00      	bge.n	113b2 <setvbuf+0x4e>
   113b0:	e079      	b.n	114a6 <setvbuf+0x142>
   113b2:	0021      	movs	r1, r4
   113b4:	0030      	movs	r0, r6
   113b6:	f000 fb0f 	bl	119d8 <_fflush_r>
   113ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
   113bc:	2900      	cmp	r1, #0
   113be:	d008      	beq.n	113d2 <setvbuf+0x6e>
   113c0:	0023      	movs	r3, r4
   113c2:	3344      	adds	r3, #68	; 0x44
   113c4:	4299      	cmp	r1, r3
   113c6:	d002      	beq.n	113ce <setvbuf+0x6a>
   113c8:	0030      	movs	r0, r6
   113ca:	f000 fc95 	bl	11cf8 <_free_r>
   113ce:	2300      	movs	r3, #0
   113d0:	6363      	str	r3, [r4, #52]	; 0x34
   113d2:	2300      	movs	r3, #0
   113d4:	61a3      	str	r3, [r4, #24]
   113d6:	6063      	str	r3, [r4, #4]
   113d8:	89a3      	ldrh	r3, [r4, #12]
   113da:	061b      	lsls	r3, r3, #24
   113dc:	d503      	bpl.n	113e6 <setvbuf+0x82>
   113de:	6921      	ldr	r1, [r4, #16]
   113e0:	0030      	movs	r0, r6
   113e2:	f000 fc89 	bl	11cf8 <_free_r>
   113e6:	89a2      	ldrh	r2, [r4, #12]
   113e8:	4b35      	ldr	r3, [pc, #212]	; (114c0 <setvbuf+0x15c>)
   113ea:	4013      	ands	r3, r2
   113ec:	81a3      	strh	r3, [r4, #12]
   113ee:	9b00      	ldr	r3, [sp, #0]
   113f0:	2b02      	cmp	r3, #2
   113f2:	d021      	beq.n	11438 <setvbuf+0xd4>
   113f4:	ab03      	add	r3, sp, #12
   113f6:	aa02      	add	r2, sp, #8
   113f8:	0021      	movs	r1, r4
   113fa:	0030      	movs	r0, r6
   113fc:	f000 fbee 	bl	11bdc <__swhatbuf_r>
   11400:	89a3      	ldrh	r3, [r4, #12]
   11402:	4318      	orrs	r0, r3
   11404:	81a0      	strh	r0, [r4, #12]
   11406:	2d00      	cmp	r5, #0
   11408:	d101      	bne.n	1140e <setvbuf+0xaa>
   1140a:	9d02      	ldr	r5, [sp, #8]
   1140c:	e001      	b.n	11412 <setvbuf+0xae>
   1140e:	2f00      	cmp	r7, #0
   11410:	d125      	bne.n	1145e <setvbuf+0xfa>
   11412:	0028      	movs	r0, r5
   11414:	f000 fc46 	bl	11ca4 <malloc>
   11418:	9501      	str	r5, [sp, #4]
   1141a:	1e07      	subs	r7, r0, #0
   1141c:	d11a      	bne.n	11454 <setvbuf+0xf0>
   1141e:	9b02      	ldr	r3, [sp, #8]
   11420:	9301      	str	r3, [sp, #4]
   11422:	42ab      	cmp	r3, r5
   11424:	d102      	bne.n	1142c <setvbuf+0xc8>
   11426:	2001      	movs	r0, #1
   11428:	4240      	negs	r0, r0
   1142a:	e006      	b.n	1143a <setvbuf+0xd6>
   1142c:	9801      	ldr	r0, [sp, #4]
   1142e:	f000 fc39 	bl	11ca4 <malloc>
   11432:	1e07      	subs	r7, r0, #0
   11434:	d10e      	bne.n	11454 <setvbuf+0xf0>
   11436:	e7f6      	b.n	11426 <setvbuf+0xc2>
   11438:	2000      	movs	r0, #0
   1143a:	2202      	movs	r2, #2
   1143c:	89a3      	ldrh	r3, [r4, #12]
   1143e:	4313      	orrs	r3, r2
   11440:	81a3      	strh	r3, [r4, #12]
   11442:	2300      	movs	r3, #0
   11444:	60a3      	str	r3, [r4, #8]
   11446:	0023      	movs	r3, r4
   11448:	3347      	adds	r3, #71	; 0x47
   1144a:	6023      	str	r3, [r4, #0]
   1144c:	6123      	str	r3, [r4, #16]
   1144e:	2301      	movs	r3, #1
   11450:	6163      	str	r3, [r4, #20]
   11452:	e02a      	b.n	114aa <setvbuf+0x146>
   11454:	2280      	movs	r2, #128	; 0x80
   11456:	89a3      	ldrh	r3, [r4, #12]
   11458:	9d01      	ldr	r5, [sp, #4]
   1145a:	4313      	orrs	r3, r2
   1145c:	81a3      	strh	r3, [r4, #12]
   1145e:	69b3      	ldr	r3, [r6, #24]
   11460:	2b00      	cmp	r3, #0
   11462:	d102      	bne.n	1146a <setvbuf+0x106>
   11464:	0030      	movs	r0, r6
   11466:	f000 fb25 	bl	11ab4 <__sinit>
   1146a:	9b00      	ldr	r3, [sp, #0]
   1146c:	2b01      	cmp	r3, #1
   1146e:	d103      	bne.n	11478 <setvbuf+0x114>
   11470:	89a3      	ldrh	r3, [r4, #12]
   11472:	9a00      	ldr	r2, [sp, #0]
   11474:	431a      	orrs	r2, r3
   11476:	81a2      	strh	r2, [r4, #12]
   11478:	2308      	movs	r3, #8
   1147a:	89a2      	ldrh	r2, [r4, #12]
   1147c:	6027      	str	r7, [r4, #0]
   1147e:	4013      	ands	r3, r2
   11480:	6127      	str	r7, [r4, #16]
   11482:	6165      	str	r5, [r4, #20]
   11484:	1e18      	subs	r0, r3, #0
   11486:	d00c      	beq.n	114a2 <setvbuf+0x13e>
   11488:	2301      	movs	r3, #1
   1148a:	401a      	ands	r2, r3
   1148c:	2300      	movs	r3, #0
   1148e:	1e10      	subs	r0, r2, #0
   11490:	4298      	cmp	r0, r3
   11492:	d004      	beq.n	1149e <setvbuf+0x13a>
   11494:	426d      	negs	r5, r5
   11496:	60a3      	str	r3, [r4, #8]
   11498:	61a5      	str	r5, [r4, #24]
   1149a:	0018      	movs	r0, r3
   1149c:	e005      	b.n	114aa <setvbuf+0x146>
   1149e:	60a5      	str	r5, [r4, #8]
   114a0:	e003      	b.n	114aa <setvbuf+0x146>
   114a2:	60a3      	str	r3, [r4, #8]
   114a4:	e001      	b.n	114aa <setvbuf+0x146>
   114a6:	2001      	movs	r0, #1
   114a8:	4240      	negs	r0, r0
   114aa:	b005      	add	sp, #20
   114ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114ae:	46c0      	nop			; (mov r8, r8)
   114b0:	20000098 	.word	0x20000098
   114b4:	00014008 	.word	0x00014008
   114b8:	00014028 	.word	0x00014028
   114bc:	00014048 	.word	0x00014048
   114c0:	fffff35c 	.word	0xfffff35c

000114c4 <sniprintf>:
   114c4:	b40c      	push	{r2, r3}
   114c6:	b530      	push	{r4, r5, lr}
   114c8:	4b16      	ldr	r3, [pc, #88]	; (11524 <sniprintf+0x60>)
   114ca:	b09d      	sub	sp, #116	; 0x74
   114cc:	1e0c      	subs	r4, r1, #0
   114ce:	681d      	ldr	r5, [r3, #0]
   114d0:	da04      	bge.n	114dc <sniprintf+0x18>
   114d2:	238b      	movs	r3, #139	; 0x8b
   114d4:	2001      	movs	r0, #1
   114d6:	602b      	str	r3, [r5, #0]
   114d8:	4240      	negs	r0, r0
   114da:	e01d      	b.n	11518 <sniprintf+0x54>
   114dc:	2382      	movs	r3, #130	; 0x82
   114de:	a902      	add	r1, sp, #8
   114e0:	009b      	lsls	r3, r3, #2
   114e2:	818b      	strh	r3, [r1, #12]
   114e4:	2300      	movs	r3, #0
   114e6:	9002      	str	r0, [sp, #8]
   114e8:	6108      	str	r0, [r1, #16]
   114ea:	429c      	cmp	r4, r3
   114ec:	d000      	beq.n	114f0 <sniprintf+0x2c>
   114ee:	1e63      	subs	r3, r4, #1
   114f0:	608b      	str	r3, [r1, #8]
   114f2:	614b      	str	r3, [r1, #20]
   114f4:	2301      	movs	r3, #1
   114f6:	425b      	negs	r3, r3
   114f8:	81cb      	strh	r3, [r1, #14]
   114fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   114fc:	ab21      	add	r3, sp, #132	; 0x84
   114fe:	0028      	movs	r0, r5
   11500:	9301      	str	r3, [sp, #4]
   11502:	f000 fd1d 	bl	11f40 <_svfiprintf_r>
   11506:	1c43      	adds	r3, r0, #1
   11508:	da01      	bge.n	1150e <sniprintf+0x4a>
   1150a:	238b      	movs	r3, #139	; 0x8b
   1150c:	602b      	str	r3, [r5, #0]
   1150e:	2c00      	cmp	r4, #0
   11510:	d002      	beq.n	11518 <sniprintf+0x54>
   11512:	2300      	movs	r3, #0
   11514:	9a02      	ldr	r2, [sp, #8]
   11516:	7013      	strb	r3, [r2, #0]
   11518:	b01d      	add	sp, #116	; 0x74
   1151a:	bc30      	pop	{r4, r5}
   1151c:	bc08      	pop	{r3}
   1151e:	b002      	add	sp, #8
   11520:	4718      	bx	r3
   11522:	46c0      	nop			; (mov r8, r8)
   11524:	20000098 	.word	0x20000098

00011528 <siprintf>:
   11528:	b40e      	push	{r1, r2, r3}
   1152a:	b510      	push	{r4, lr}
   1152c:	b09d      	sub	sp, #116	; 0x74
   1152e:	a902      	add	r1, sp, #8
   11530:	9002      	str	r0, [sp, #8]
   11532:	6108      	str	r0, [r1, #16]
   11534:	480b      	ldr	r0, [pc, #44]	; (11564 <siprintf+0x3c>)
   11536:	2482      	movs	r4, #130	; 0x82
   11538:	6088      	str	r0, [r1, #8]
   1153a:	6148      	str	r0, [r1, #20]
   1153c:	2001      	movs	r0, #1
   1153e:	4240      	negs	r0, r0
   11540:	ab1f      	add	r3, sp, #124	; 0x7c
   11542:	81c8      	strh	r0, [r1, #14]
   11544:	4808      	ldr	r0, [pc, #32]	; (11568 <siprintf+0x40>)
   11546:	cb04      	ldmia	r3!, {r2}
   11548:	00a4      	lsls	r4, r4, #2
   1154a:	6800      	ldr	r0, [r0, #0]
   1154c:	9301      	str	r3, [sp, #4]
   1154e:	818c      	strh	r4, [r1, #12]
   11550:	f000 fcf6 	bl	11f40 <_svfiprintf_r>
   11554:	2300      	movs	r3, #0
   11556:	9a02      	ldr	r2, [sp, #8]
   11558:	7013      	strb	r3, [r2, #0]
   1155a:	b01d      	add	sp, #116	; 0x74
   1155c:	bc10      	pop	{r4}
   1155e:	bc08      	pop	{r3}
   11560:	b003      	add	sp, #12
   11562:	4718      	bx	r3
   11564:	7fffffff 	.word	0x7fffffff
   11568:	20000098 	.word	0x20000098

0001156c <strcmp>:
   1156c:	7802      	ldrb	r2, [r0, #0]
   1156e:	780b      	ldrb	r3, [r1, #0]
   11570:	2a00      	cmp	r2, #0
   11572:	d003      	beq.n	1157c <strcmp+0x10>
   11574:	3001      	adds	r0, #1
   11576:	3101      	adds	r1, #1
   11578:	429a      	cmp	r2, r3
   1157a:	d0f7      	beq.n	1156c <strcmp>
   1157c:	1ad0      	subs	r0, r2, r3
   1157e:	4770      	bx	lr

00011580 <strcpy>:
   11580:	1c03      	adds	r3, r0, #0
   11582:	780a      	ldrb	r2, [r1, #0]
   11584:	3101      	adds	r1, #1
   11586:	701a      	strb	r2, [r3, #0]
   11588:	3301      	adds	r3, #1
   1158a:	2a00      	cmp	r2, #0
   1158c:	d1f9      	bne.n	11582 <strcpy+0x2>
   1158e:	4770      	bx	lr

00011590 <strlen>:
   11590:	2300      	movs	r3, #0
   11592:	5cc2      	ldrb	r2, [r0, r3]
   11594:	3301      	adds	r3, #1
   11596:	2a00      	cmp	r2, #0
   11598:	d1fb      	bne.n	11592 <strlen+0x2>
   1159a:	1e58      	subs	r0, r3, #1
   1159c:	4770      	bx	lr

0001159e <strncmp>:
   1159e:	2300      	movs	r3, #0
   115a0:	b530      	push	{r4, r5, lr}
   115a2:	429a      	cmp	r2, r3
   115a4:	d00b      	beq.n	115be <strncmp+0x20>
   115a6:	3a01      	subs	r2, #1
   115a8:	5cc4      	ldrb	r4, [r0, r3]
   115aa:	5ccd      	ldrb	r5, [r1, r3]
   115ac:	42ac      	cmp	r4, r5
   115ae:	d105      	bne.n	115bc <strncmp+0x1e>
   115b0:	429a      	cmp	r2, r3
   115b2:	d002      	beq.n	115ba <strncmp+0x1c>
   115b4:	3301      	adds	r3, #1
   115b6:	2c00      	cmp	r4, #0
   115b8:	d1f6      	bne.n	115a8 <strncmp+0xa>
   115ba:	0025      	movs	r5, r4
   115bc:	1b63      	subs	r3, r4, r5
   115be:	0018      	movs	r0, r3
   115c0:	bd30      	pop	{r4, r5, pc}

000115c2 <strspn>:
   115c2:	0003      	movs	r3, r0
   115c4:	b530      	push	{r4, r5, lr}
   115c6:	781c      	ldrb	r4, [r3, #0]
   115c8:	2c00      	cmp	r4, #0
   115ca:	d009      	beq.n	115e0 <strspn+0x1e>
   115cc:	000a      	movs	r2, r1
   115ce:	7815      	ldrb	r5, [r2, #0]
   115d0:	2d00      	cmp	r5, #0
   115d2:	d005      	beq.n	115e0 <strspn+0x1e>
   115d4:	42ac      	cmp	r4, r5
   115d6:	d001      	beq.n	115dc <strspn+0x1a>
   115d8:	3201      	adds	r2, #1
   115da:	e7f8      	b.n	115ce <strspn+0xc>
   115dc:	3301      	adds	r3, #1
   115de:	e7f2      	b.n	115c6 <strspn+0x4>
   115e0:	1a18      	subs	r0, r3, r0
   115e2:	bd30      	pop	{r4, r5, pc}

000115e4 <_strtol_r>:
   115e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   115e6:	001e      	movs	r6, r3
   115e8:	4b45      	ldr	r3, [pc, #276]	; (11700 <_strtol_r+0x11c>)
   115ea:	b087      	sub	sp, #28
   115ec:	681b      	ldr	r3, [r3, #0]
   115ee:	9201      	str	r2, [sp, #4]
   115f0:	9302      	str	r3, [sp, #8]
   115f2:	2208      	movs	r2, #8
   115f4:	000b      	movs	r3, r1
   115f6:	9005      	str	r0, [sp, #20]
   115f8:	9103      	str	r1, [sp, #12]
   115fa:	781c      	ldrb	r4, [r3, #0]
   115fc:	9902      	ldr	r1, [sp, #8]
   115fe:	1c5d      	adds	r5, r3, #1
   11600:	1909      	adds	r1, r1, r4
   11602:	7848      	ldrb	r0, [r1, #1]
   11604:	4010      	ands	r0, r2
   11606:	d001      	beq.n	1160c <_strtol_r+0x28>
   11608:	002b      	movs	r3, r5
   1160a:	e7f6      	b.n	115fa <_strtol_r+0x16>
   1160c:	2c2d      	cmp	r4, #45	; 0x2d
   1160e:	d104      	bne.n	1161a <_strtol_r+0x36>
   11610:	1c9d      	adds	r5, r3, #2
   11612:	785c      	ldrb	r4, [r3, #1]
   11614:	2301      	movs	r3, #1
   11616:	9300      	str	r3, [sp, #0]
   11618:	e004      	b.n	11624 <_strtol_r+0x40>
   1161a:	9000      	str	r0, [sp, #0]
   1161c:	2c2b      	cmp	r4, #43	; 0x2b
   1161e:	d101      	bne.n	11624 <_strtol_r+0x40>
   11620:	785c      	ldrb	r4, [r3, #1]
   11622:	1c9d      	adds	r5, r3, #2
   11624:	2e00      	cmp	r6, #0
   11626:	d002      	beq.n	1162e <_strtol_r+0x4a>
   11628:	2e10      	cmp	r6, #16
   1162a:	d10a      	bne.n	11642 <_strtol_r+0x5e>
   1162c:	e062      	b.n	116f4 <_strtol_r+0x110>
   1162e:	2c30      	cmp	r4, #48	; 0x30
   11630:	d15e      	bne.n	116f0 <_strtol_r+0x10c>
   11632:	2220      	movs	r2, #32
   11634:	782b      	ldrb	r3, [r5, #0]
   11636:	4393      	bics	r3, r2
   11638:	2b58      	cmp	r3, #88	; 0x58
   1163a:	d154      	bne.n	116e6 <_strtol_r+0x102>
   1163c:	2610      	movs	r6, #16
   1163e:	786c      	ldrb	r4, [r5, #1]
   11640:	3502      	adds	r5, #2
   11642:	9f00      	ldr	r7, [sp, #0]
   11644:	0031      	movs	r1, r6
   11646:	1e7b      	subs	r3, r7, #1
   11648:	419f      	sbcs	r7, r3
   1164a:	4b2e      	ldr	r3, [pc, #184]	; (11704 <_strtol_r+0x120>)
   1164c:	18ff      	adds	r7, r7, r3
   1164e:	0038      	movs	r0, r7
   11650:	f7fe fdce 	bl	101f0 <__aeabi_uidivmod>
   11654:	0038      	movs	r0, r7
   11656:	9104      	str	r1, [sp, #16]
   11658:	0031      	movs	r1, r6
   1165a:	f7fe fd43 	bl	100e4 <__aeabi_uidiv>
   1165e:	2300      	movs	r3, #0
   11660:	2203      	movs	r2, #3
   11662:	0007      	movs	r7, r0
   11664:	4694      	mov	ip, r2
   11666:	0018      	movs	r0, r3
   11668:	9a02      	ldr	r2, [sp, #8]
   1166a:	1912      	adds	r2, r2, r4
   1166c:	7851      	ldrb	r1, [r2, #1]
   1166e:	2204      	movs	r2, #4
   11670:	4211      	tst	r1, r2
   11672:	d001      	beq.n	11678 <_strtol_r+0x94>
   11674:	3c30      	subs	r4, #48	; 0x30
   11676:	e007      	b.n	11688 <_strtol_r+0xa4>
   11678:	4662      	mov	r2, ip
   1167a:	4011      	ands	r1, r2
   1167c:	d017      	beq.n	116ae <_strtol_r+0xca>
   1167e:	2237      	movs	r2, #55	; 0x37
   11680:	2901      	cmp	r1, #1
   11682:	d000      	beq.n	11686 <_strtol_r+0xa2>
   11684:	3220      	adds	r2, #32
   11686:	1aa4      	subs	r4, r4, r2
   11688:	42a6      	cmp	r6, r4
   1168a:	dd10      	ble.n	116ae <_strtol_r+0xca>
   1168c:	1c5a      	adds	r2, r3, #1
   1168e:	d00b      	beq.n	116a8 <_strtol_r+0xc4>
   11690:	42b8      	cmp	r0, r7
   11692:	d807      	bhi.n	116a4 <_strtol_r+0xc0>
   11694:	d102      	bne.n	1169c <_strtol_r+0xb8>
   11696:	9b04      	ldr	r3, [sp, #16]
   11698:	429c      	cmp	r4, r3
   1169a:	dc03      	bgt.n	116a4 <_strtol_r+0xc0>
   1169c:	4370      	muls	r0, r6
   1169e:	2301      	movs	r3, #1
   116a0:	1820      	adds	r0, r4, r0
   116a2:	e001      	b.n	116a8 <_strtol_r+0xc4>
   116a4:	2301      	movs	r3, #1
   116a6:	425b      	negs	r3, r3
   116a8:	782c      	ldrb	r4, [r5, #0]
   116aa:	3501      	adds	r5, #1
   116ac:	e7dc      	b.n	11668 <_strtol_r+0x84>
   116ae:	1c5a      	adds	r2, r3, #1
   116b0:	d10b      	bne.n	116ca <_strtol_r+0xe6>
   116b2:	9800      	ldr	r0, [sp, #0]
   116b4:	9a05      	ldr	r2, [sp, #20]
   116b6:	1e43      	subs	r3, r0, #1
   116b8:	4198      	sbcs	r0, r3
   116ba:	4b12      	ldr	r3, [pc, #72]	; (11704 <_strtol_r+0x120>)
   116bc:	18c0      	adds	r0, r0, r3
   116be:	2322      	movs	r3, #34	; 0x22
   116c0:	6013      	str	r3, [r2, #0]
   116c2:	9b01      	ldr	r3, [sp, #4]
   116c4:	2b00      	cmp	r3, #0
   116c6:	d10a      	bne.n	116de <_strtol_r+0xfa>
   116c8:	e017      	b.n	116fa <_strtol_r+0x116>
   116ca:	9a00      	ldr	r2, [sp, #0]
   116cc:	2a00      	cmp	r2, #0
   116ce:	d000      	beq.n	116d2 <_strtol_r+0xee>
   116d0:	4240      	negs	r0, r0
   116d2:	9a01      	ldr	r2, [sp, #4]
   116d4:	2a00      	cmp	r2, #0
   116d6:	d010      	beq.n	116fa <_strtol_r+0x116>
   116d8:	9a03      	ldr	r2, [sp, #12]
   116da:	2b00      	cmp	r3, #0
   116dc:	d000      	beq.n	116e0 <_strtol_r+0xfc>
   116de:	1e6a      	subs	r2, r5, #1
   116e0:	9b01      	ldr	r3, [sp, #4]
   116e2:	601a      	str	r2, [r3, #0]
   116e4:	e009      	b.n	116fa <_strtol_r+0x116>
   116e6:	2430      	movs	r4, #48	; 0x30
   116e8:	2e00      	cmp	r6, #0
   116ea:	d1aa      	bne.n	11642 <_strtol_r+0x5e>
   116ec:	2608      	movs	r6, #8
   116ee:	e7a8      	b.n	11642 <_strtol_r+0x5e>
   116f0:	260a      	movs	r6, #10
   116f2:	e7a6      	b.n	11642 <_strtol_r+0x5e>
   116f4:	2c30      	cmp	r4, #48	; 0x30
   116f6:	d09c      	beq.n	11632 <_strtol_r+0x4e>
   116f8:	e7a3      	b.n	11642 <_strtol_r+0x5e>
   116fa:	b007      	add	sp, #28
   116fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116fe:	46c0      	nop			; (mov r8, r8)
   11700:	2000009c 	.word	0x2000009c
   11704:	7fffffff 	.word	0x7fffffff

00011708 <strtol>:
   11708:	b510      	push	{r4, lr}
   1170a:	0013      	movs	r3, r2
   1170c:	000a      	movs	r2, r1
   1170e:	0001      	movs	r1, r0
   11710:	4802      	ldr	r0, [pc, #8]	; (1171c <strtol+0x14>)
   11712:	6800      	ldr	r0, [r0, #0]
   11714:	f7ff ff66 	bl	115e4 <_strtol_r>
   11718:	bd10      	pop	{r4, pc}
   1171a:	46c0      	nop			; (mov r8, r8)
   1171c:	20000098 	.word	0x20000098

00011720 <__swbuf_r>:
   11720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11722:	0005      	movs	r5, r0
   11724:	000f      	movs	r7, r1
   11726:	0014      	movs	r4, r2
   11728:	2800      	cmp	r0, #0
   1172a:	d004      	beq.n	11736 <__swbuf_r+0x16>
   1172c:	6983      	ldr	r3, [r0, #24]
   1172e:	2b00      	cmp	r3, #0
   11730:	d101      	bne.n	11736 <__swbuf_r+0x16>
   11732:	f000 f9bf 	bl	11ab4 <__sinit>
   11736:	4b23      	ldr	r3, [pc, #140]	; (117c4 <__swbuf_r+0xa4>)
   11738:	429c      	cmp	r4, r3
   1173a:	d101      	bne.n	11740 <__swbuf_r+0x20>
   1173c:	686c      	ldr	r4, [r5, #4]
   1173e:	e008      	b.n	11752 <__swbuf_r+0x32>
   11740:	4b21      	ldr	r3, [pc, #132]	; (117c8 <__swbuf_r+0xa8>)
   11742:	429c      	cmp	r4, r3
   11744:	d101      	bne.n	1174a <__swbuf_r+0x2a>
   11746:	68ac      	ldr	r4, [r5, #8]
   11748:	e003      	b.n	11752 <__swbuf_r+0x32>
   1174a:	4b20      	ldr	r3, [pc, #128]	; (117cc <__swbuf_r+0xac>)
   1174c:	429c      	cmp	r4, r3
   1174e:	d100      	bne.n	11752 <__swbuf_r+0x32>
   11750:	68ec      	ldr	r4, [r5, #12]
   11752:	69a3      	ldr	r3, [r4, #24]
   11754:	60a3      	str	r3, [r4, #8]
   11756:	89a3      	ldrh	r3, [r4, #12]
   11758:	071b      	lsls	r3, r3, #28
   1175a:	d50a      	bpl.n	11772 <__swbuf_r+0x52>
   1175c:	6923      	ldr	r3, [r4, #16]
   1175e:	2b00      	cmp	r3, #0
   11760:	d007      	beq.n	11772 <__swbuf_r+0x52>
   11762:	6823      	ldr	r3, [r4, #0]
   11764:	6922      	ldr	r2, [r4, #16]
   11766:	b2fe      	uxtb	r6, r7
   11768:	1a98      	subs	r0, r3, r2
   1176a:	6963      	ldr	r3, [r4, #20]
   1176c:	4298      	cmp	r0, r3
   1176e:	db0f      	blt.n	11790 <__swbuf_r+0x70>
   11770:	e008      	b.n	11784 <__swbuf_r+0x64>
   11772:	0021      	movs	r1, r4
   11774:	0028      	movs	r0, r5
   11776:	f000 f82b 	bl	117d0 <__swsetup_r>
   1177a:	2800      	cmp	r0, #0
   1177c:	d0f1      	beq.n	11762 <__swbuf_r+0x42>
   1177e:	2001      	movs	r0, #1
   11780:	4240      	negs	r0, r0
   11782:	e01d      	b.n	117c0 <__swbuf_r+0xa0>
   11784:	0021      	movs	r1, r4
   11786:	0028      	movs	r0, r5
   11788:	f000 f926 	bl	119d8 <_fflush_r>
   1178c:	2800      	cmp	r0, #0
   1178e:	d1f6      	bne.n	1177e <__swbuf_r+0x5e>
   11790:	68a3      	ldr	r3, [r4, #8]
   11792:	3001      	adds	r0, #1
   11794:	3b01      	subs	r3, #1
   11796:	60a3      	str	r3, [r4, #8]
   11798:	6823      	ldr	r3, [r4, #0]
   1179a:	1c5a      	adds	r2, r3, #1
   1179c:	6022      	str	r2, [r4, #0]
   1179e:	701f      	strb	r7, [r3, #0]
   117a0:	6963      	ldr	r3, [r4, #20]
   117a2:	4298      	cmp	r0, r3
   117a4:	d005      	beq.n	117b2 <__swbuf_r+0x92>
   117a6:	89a3      	ldrh	r3, [r4, #12]
   117a8:	0030      	movs	r0, r6
   117aa:	07db      	lsls	r3, r3, #31
   117ac:	d508      	bpl.n	117c0 <__swbuf_r+0xa0>
   117ae:	2e0a      	cmp	r6, #10
   117b0:	d106      	bne.n	117c0 <__swbuf_r+0xa0>
   117b2:	0021      	movs	r1, r4
   117b4:	0028      	movs	r0, r5
   117b6:	f000 f90f 	bl	119d8 <_fflush_r>
   117ba:	2800      	cmp	r0, #0
   117bc:	d1df      	bne.n	1177e <__swbuf_r+0x5e>
   117be:	0030      	movs	r0, r6
   117c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117c2:	46c0      	nop			; (mov r8, r8)
   117c4:	00014008 	.word	0x00014008
   117c8:	00014028 	.word	0x00014028
   117cc:	00014048 	.word	0x00014048

000117d0 <__swsetup_r>:
   117d0:	4b36      	ldr	r3, [pc, #216]	; (118ac <__swsetup_r+0xdc>)
   117d2:	b570      	push	{r4, r5, r6, lr}
   117d4:	681d      	ldr	r5, [r3, #0]
   117d6:	0006      	movs	r6, r0
   117d8:	000c      	movs	r4, r1
   117da:	2d00      	cmp	r5, #0
   117dc:	d005      	beq.n	117ea <__swsetup_r+0x1a>
   117de:	69ab      	ldr	r3, [r5, #24]
   117e0:	2b00      	cmp	r3, #0
   117e2:	d102      	bne.n	117ea <__swsetup_r+0x1a>
   117e4:	0028      	movs	r0, r5
   117e6:	f000 f965 	bl	11ab4 <__sinit>
   117ea:	4b31      	ldr	r3, [pc, #196]	; (118b0 <__swsetup_r+0xe0>)
   117ec:	429c      	cmp	r4, r3
   117ee:	d101      	bne.n	117f4 <__swsetup_r+0x24>
   117f0:	686c      	ldr	r4, [r5, #4]
   117f2:	e008      	b.n	11806 <__swsetup_r+0x36>
   117f4:	4b2f      	ldr	r3, [pc, #188]	; (118b4 <__swsetup_r+0xe4>)
   117f6:	429c      	cmp	r4, r3
   117f8:	d101      	bne.n	117fe <__swsetup_r+0x2e>
   117fa:	68ac      	ldr	r4, [r5, #8]
   117fc:	e003      	b.n	11806 <__swsetup_r+0x36>
   117fe:	4b2e      	ldr	r3, [pc, #184]	; (118b8 <__swsetup_r+0xe8>)
   11800:	429c      	cmp	r4, r3
   11802:	d100      	bne.n	11806 <__swsetup_r+0x36>
   11804:	68ec      	ldr	r4, [r5, #12]
   11806:	220c      	movs	r2, #12
   11808:	5ea3      	ldrsh	r3, [r4, r2]
   1180a:	b29a      	uxth	r2, r3
   1180c:	0711      	lsls	r1, r2, #28
   1180e:	d423      	bmi.n	11858 <__swsetup_r+0x88>
   11810:	06d1      	lsls	r1, r2, #27
   11812:	d407      	bmi.n	11824 <__swsetup_r+0x54>
   11814:	2209      	movs	r2, #9
   11816:	2001      	movs	r0, #1
   11818:	6032      	str	r2, [r6, #0]
   1181a:	3237      	adds	r2, #55	; 0x37
   1181c:	4313      	orrs	r3, r2
   1181e:	81a3      	strh	r3, [r4, #12]
   11820:	4240      	negs	r0, r0
   11822:	e042      	b.n	118aa <__swsetup_r+0xda>
   11824:	0753      	lsls	r3, r2, #29
   11826:	d513      	bpl.n	11850 <__swsetup_r+0x80>
   11828:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1182a:	2900      	cmp	r1, #0
   1182c:	d008      	beq.n	11840 <__swsetup_r+0x70>
   1182e:	0023      	movs	r3, r4
   11830:	3344      	adds	r3, #68	; 0x44
   11832:	4299      	cmp	r1, r3
   11834:	d002      	beq.n	1183c <__swsetup_r+0x6c>
   11836:	0030      	movs	r0, r6
   11838:	f000 fa5e 	bl	11cf8 <_free_r>
   1183c:	2300      	movs	r3, #0
   1183e:	6363      	str	r3, [r4, #52]	; 0x34
   11840:	2224      	movs	r2, #36	; 0x24
   11842:	89a3      	ldrh	r3, [r4, #12]
   11844:	4393      	bics	r3, r2
   11846:	81a3      	strh	r3, [r4, #12]
   11848:	2300      	movs	r3, #0
   1184a:	6063      	str	r3, [r4, #4]
   1184c:	6923      	ldr	r3, [r4, #16]
   1184e:	6023      	str	r3, [r4, #0]
   11850:	2208      	movs	r2, #8
   11852:	89a3      	ldrh	r3, [r4, #12]
   11854:	4313      	orrs	r3, r2
   11856:	81a3      	strh	r3, [r4, #12]
   11858:	6923      	ldr	r3, [r4, #16]
   1185a:	2b00      	cmp	r3, #0
   1185c:	d10b      	bne.n	11876 <__swsetup_r+0xa6>
   1185e:	23a0      	movs	r3, #160	; 0xa0
   11860:	89a2      	ldrh	r2, [r4, #12]
   11862:	009b      	lsls	r3, r3, #2
   11864:	4013      	ands	r3, r2
   11866:	2280      	movs	r2, #128	; 0x80
   11868:	0092      	lsls	r2, r2, #2
   1186a:	4293      	cmp	r3, r2
   1186c:	d003      	beq.n	11876 <__swsetup_r+0xa6>
   1186e:	0021      	movs	r1, r4
   11870:	0030      	movs	r0, r6
   11872:	f000 f9d9 	bl	11c28 <__smakebuf_r>
   11876:	2301      	movs	r3, #1
   11878:	89a2      	ldrh	r2, [r4, #12]
   1187a:	4013      	ands	r3, r2
   1187c:	d005      	beq.n	1188a <__swsetup_r+0xba>
   1187e:	2300      	movs	r3, #0
   11880:	60a3      	str	r3, [r4, #8]
   11882:	6963      	ldr	r3, [r4, #20]
   11884:	425b      	negs	r3, r3
   11886:	61a3      	str	r3, [r4, #24]
   11888:	e003      	b.n	11892 <__swsetup_r+0xc2>
   1188a:	0792      	lsls	r2, r2, #30
   1188c:	d400      	bmi.n	11890 <__swsetup_r+0xc0>
   1188e:	6963      	ldr	r3, [r4, #20]
   11890:	60a3      	str	r3, [r4, #8]
   11892:	2000      	movs	r0, #0
   11894:	6923      	ldr	r3, [r4, #16]
   11896:	4283      	cmp	r3, r0
   11898:	d107      	bne.n	118aa <__swsetup_r+0xda>
   1189a:	220c      	movs	r2, #12
   1189c:	5ea3      	ldrsh	r3, [r4, r2]
   1189e:	061a      	lsls	r2, r3, #24
   118a0:	d503      	bpl.n	118aa <__swsetup_r+0xda>
   118a2:	2240      	movs	r2, #64	; 0x40
   118a4:	4313      	orrs	r3, r2
   118a6:	81a3      	strh	r3, [r4, #12]
   118a8:	3801      	subs	r0, #1
   118aa:	bd70      	pop	{r4, r5, r6, pc}
   118ac:	20000098 	.word	0x20000098
   118b0:	00014008 	.word	0x00014008
   118b4:	00014028 	.word	0x00014028
   118b8:	00014048 	.word	0x00014048

000118bc <abort>:
   118bc:	b510      	push	{r4, lr}
   118be:	2006      	movs	r0, #6
   118c0:	f000 fcae 	bl	12220 <raise>
   118c4:	2001      	movs	r0, #1
   118c6:	f7fa fc47 	bl	c158 <_exit>
	...

000118cc <__sflush_r>:
   118cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   118ce:	898a      	ldrh	r2, [r1, #12]
   118d0:	0005      	movs	r5, r0
   118d2:	000c      	movs	r4, r1
   118d4:	0713      	lsls	r3, r2, #28
   118d6:	d45a      	bmi.n	1198e <__sflush_r+0xc2>
   118d8:	684b      	ldr	r3, [r1, #4]
   118da:	2b00      	cmp	r3, #0
   118dc:	dc02      	bgt.n	118e4 <__sflush_r+0x18>
   118de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   118e0:	2b00      	cmp	r3, #0
   118e2:	dd19      	ble.n	11918 <__sflush_r+0x4c>
   118e4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   118e6:	2f00      	cmp	r7, #0
   118e8:	d016      	beq.n	11918 <__sflush_r+0x4c>
   118ea:	2300      	movs	r3, #0
   118ec:	682e      	ldr	r6, [r5, #0]
   118ee:	602b      	str	r3, [r5, #0]
   118f0:	2380      	movs	r3, #128	; 0x80
   118f2:	015b      	lsls	r3, r3, #5
   118f4:	401a      	ands	r2, r3
   118f6:	d001      	beq.n	118fc <__sflush_r+0x30>
   118f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   118fa:	e014      	b.n	11926 <__sflush_r+0x5a>
   118fc:	2301      	movs	r3, #1
   118fe:	6a21      	ldr	r1, [r4, #32]
   11900:	0028      	movs	r0, r5
   11902:	47b8      	blx	r7
   11904:	1c43      	adds	r3, r0, #1
   11906:	d10e      	bne.n	11926 <__sflush_r+0x5a>
   11908:	682b      	ldr	r3, [r5, #0]
   1190a:	2b00      	cmp	r3, #0
   1190c:	d00b      	beq.n	11926 <__sflush_r+0x5a>
   1190e:	2b1d      	cmp	r3, #29
   11910:	d001      	beq.n	11916 <__sflush_r+0x4a>
   11912:	2b16      	cmp	r3, #22
   11914:	d102      	bne.n	1191c <__sflush_r+0x50>
   11916:	602e      	str	r6, [r5, #0]
   11918:	2000      	movs	r0, #0
   1191a:	e05a      	b.n	119d2 <__sflush_r+0x106>
   1191c:	2240      	movs	r2, #64	; 0x40
   1191e:	89a3      	ldrh	r3, [r4, #12]
   11920:	4313      	orrs	r3, r2
   11922:	81a3      	strh	r3, [r4, #12]
   11924:	e055      	b.n	119d2 <__sflush_r+0x106>
   11926:	89a3      	ldrh	r3, [r4, #12]
   11928:	075b      	lsls	r3, r3, #29
   1192a:	d506      	bpl.n	1193a <__sflush_r+0x6e>
   1192c:	6863      	ldr	r3, [r4, #4]
   1192e:	1ac0      	subs	r0, r0, r3
   11930:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11932:	2b00      	cmp	r3, #0
   11934:	d001      	beq.n	1193a <__sflush_r+0x6e>
   11936:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11938:	1ac0      	subs	r0, r0, r3
   1193a:	2300      	movs	r3, #0
   1193c:	0002      	movs	r2, r0
   1193e:	6a21      	ldr	r1, [r4, #32]
   11940:	0028      	movs	r0, r5
   11942:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11944:	47b8      	blx	r7
   11946:	89a3      	ldrh	r3, [r4, #12]
   11948:	1c42      	adds	r2, r0, #1
   1194a:	d106      	bne.n	1195a <__sflush_r+0x8e>
   1194c:	6829      	ldr	r1, [r5, #0]
   1194e:	291d      	cmp	r1, #29
   11950:	d83a      	bhi.n	119c8 <__sflush_r+0xfc>
   11952:	4a20      	ldr	r2, [pc, #128]	; (119d4 <__sflush_r+0x108>)
   11954:	40ca      	lsrs	r2, r1
   11956:	07d2      	lsls	r2, r2, #31
   11958:	d536      	bpl.n	119c8 <__sflush_r+0xfc>
   1195a:	2200      	movs	r2, #0
   1195c:	6062      	str	r2, [r4, #4]
   1195e:	6922      	ldr	r2, [r4, #16]
   11960:	6022      	str	r2, [r4, #0]
   11962:	04db      	lsls	r3, r3, #19
   11964:	d505      	bpl.n	11972 <__sflush_r+0xa6>
   11966:	1c43      	adds	r3, r0, #1
   11968:	d102      	bne.n	11970 <__sflush_r+0xa4>
   1196a:	682b      	ldr	r3, [r5, #0]
   1196c:	2b00      	cmp	r3, #0
   1196e:	d100      	bne.n	11972 <__sflush_r+0xa6>
   11970:	6560      	str	r0, [r4, #84]	; 0x54
   11972:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11974:	602e      	str	r6, [r5, #0]
   11976:	2900      	cmp	r1, #0
   11978:	d0ce      	beq.n	11918 <__sflush_r+0x4c>
   1197a:	0023      	movs	r3, r4
   1197c:	3344      	adds	r3, #68	; 0x44
   1197e:	4299      	cmp	r1, r3
   11980:	d002      	beq.n	11988 <__sflush_r+0xbc>
   11982:	0028      	movs	r0, r5
   11984:	f000 f9b8 	bl	11cf8 <_free_r>
   11988:	2000      	movs	r0, #0
   1198a:	6360      	str	r0, [r4, #52]	; 0x34
   1198c:	e021      	b.n	119d2 <__sflush_r+0x106>
   1198e:	690f      	ldr	r7, [r1, #16]
   11990:	2f00      	cmp	r7, #0
   11992:	d0c1      	beq.n	11918 <__sflush_r+0x4c>
   11994:	680b      	ldr	r3, [r1, #0]
   11996:	600f      	str	r7, [r1, #0]
   11998:	1bdb      	subs	r3, r3, r7
   1199a:	9301      	str	r3, [sp, #4]
   1199c:	2300      	movs	r3, #0
   1199e:	0792      	lsls	r2, r2, #30
   119a0:	d100      	bne.n	119a4 <__sflush_r+0xd8>
   119a2:	694b      	ldr	r3, [r1, #20]
   119a4:	60a3      	str	r3, [r4, #8]
   119a6:	e003      	b.n	119b0 <__sflush_r+0xe4>
   119a8:	9b01      	ldr	r3, [sp, #4]
   119aa:	183f      	adds	r7, r7, r0
   119ac:	1a1b      	subs	r3, r3, r0
   119ae:	9301      	str	r3, [sp, #4]
   119b0:	9b01      	ldr	r3, [sp, #4]
   119b2:	2b00      	cmp	r3, #0
   119b4:	ddb0      	ble.n	11918 <__sflush_r+0x4c>
   119b6:	9b01      	ldr	r3, [sp, #4]
   119b8:	003a      	movs	r2, r7
   119ba:	6a21      	ldr	r1, [r4, #32]
   119bc:	0028      	movs	r0, r5
   119be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   119c0:	47b0      	blx	r6
   119c2:	2800      	cmp	r0, #0
   119c4:	dcf0      	bgt.n	119a8 <__sflush_r+0xdc>
   119c6:	89a3      	ldrh	r3, [r4, #12]
   119c8:	2240      	movs	r2, #64	; 0x40
   119ca:	2001      	movs	r0, #1
   119cc:	4313      	orrs	r3, r2
   119ce:	81a3      	strh	r3, [r4, #12]
   119d0:	4240      	negs	r0, r0
   119d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   119d4:	20400001 	.word	0x20400001

000119d8 <_fflush_r>:
   119d8:	690b      	ldr	r3, [r1, #16]
   119da:	b570      	push	{r4, r5, r6, lr}
   119dc:	0005      	movs	r5, r0
   119de:	000c      	movs	r4, r1
   119e0:	2b00      	cmp	r3, #0
   119e2:	d101      	bne.n	119e8 <_fflush_r+0x10>
   119e4:	2000      	movs	r0, #0
   119e6:	e01c      	b.n	11a22 <_fflush_r+0x4a>
   119e8:	2800      	cmp	r0, #0
   119ea:	d004      	beq.n	119f6 <_fflush_r+0x1e>
   119ec:	6983      	ldr	r3, [r0, #24]
   119ee:	2b00      	cmp	r3, #0
   119f0:	d101      	bne.n	119f6 <_fflush_r+0x1e>
   119f2:	f000 f85f 	bl	11ab4 <__sinit>
   119f6:	4b0b      	ldr	r3, [pc, #44]	; (11a24 <_fflush_r+0x4c>)
   119f8:	429c      	cmp	r4, r3
   119fa:	d101      	bne.n	11a00 <_fflush_r+0x28>
   119fc:	686c      	ldr	r4, [r5, #4]
   119fe:	e008      	b.n	11a12 <_fflush_r+0x3a>
   11a00:	4b09      	ldr	r3, [pc, #36]	; (11a28 <_fflush_r+0x50>)
   11a02:	429c      	cmp	r4, r3
   11a04:	d101      	bne.n	11a0a <_fflush_r+0x32>
   11a06:	68ac      	ldr	r4, [r5, #8]
   11a08:	e003      	b.n	11a12 <_fflush_r+0x3a>
   11a0a:	4b08      	ldr	r3, [pc, #32]	; (11a2c <_fflush_r+0x54>)
   11a0c:	429c      	cmp	r4, r3
   11a0e:	d100      	bne.n	11a12 <_fflush_r+0x3a>
   11a10:	68ec      	ldr	r4, [r5, #12]
   11a12:	220c      	movs	r2, #12
   11a14:	5ea3      	ldrsh	r3, [r4, r2]
   11a16:	2b00      	cmp	r3, #0
   11a18:	d0e4      	beq.n	119e4 <_fflush_r+0xc>
   11a1a:	0021      	movs	r1, r4
   11a1c:	0028      	movs	r0, r5
   11a1e:	f7ff ff55 	bl	118cc <__sflush_r>
   11a22:	bd70      	pop	{r4, r5, r6, pc}
   11a24:	00014008 	.word	0x00014008
   11a28:	00014028 	.word	0x00014028
   11a2c:	00014048 	.word	0x00014048

00011a30 <_cleanup_r>:
   11a30:	b510      	push	{r4, lr}
   11a32:	4902      	ldr	r1, [pc, #8]	; (11a3c <_cleanup_r+0xc>)
   11a34:	f000 f8b0 	bl	11b98 <_fwalk_reent>
   11a38:	bd10      	pop	{r4, pc}
   11a3a:	46c0      	nop			; (mov r8, r8)
   11a3c:	000119d9 	.word	0x000119d9

00011a40 <std.isra.0>:
   11a40:	2300      	movs	r3, #0
   11a42:	b510      	push	{r4, lr}
   11a44:	0004      	movs	r4, r0
   11a46:	6003      	str	r3, [r0, #0]
   11a48:	6043      	str	r3, [r0, #4]
   11a4a:	6083      	str	r3, [r0, #8]
   11a4c:	8181      	strh	r1, [r0, #12]
   11a4e:	6643      	str	r3, [r0, #100]	; 0x64
   11a50:	81c2      	strh	r2, [r0, #14]
   11a52:	6103      	str	r3, [r0, #16]
   11a54:	6143      	str	r3, [r0, #20]
   11a56:	6183      	str	r3, [r0, #24]
   11a58:	0019      	movs	r1, r3
   11a5a:	2208      	movs	r2, #8
   11a5c:	305c      	adds	r0, #92	; 0x5c
   11a5e:	f7ff f902 	bl	10c66 <memset>
   11a62:	4b05      	ldr	r3, [pc, #20]	; (11a78 <std.isra.0+0x38>)
   11a64:	6224      	str	r4, [r4, #32]
   11a66:	6263      	str	r3, [r4, #36]	; 0x24
   11a68:	4b04      	ldr	r3, [pc, #16]	; (11a7c <std.isra.0+0x3c>)
   11a6a:	62a3      	str	r3, [r4, #40]	; 0x28
   11a6c:	4b04      	ldr	r3, [pc, #16]	; (11a80 <std.isra.0+0x40>)
   11a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
   11a70:	4b04      	ldr	r3, [pc, #16]	; (11a84 <std.isra.0+0x44>)
   11a72:	6323      	str	r3, [r4, #48]	; 0x30
   11a74:	bd10      	pop	{r4, pc}
   11a76:	46c0      	nop			; (mov r8, r8)
   11a78:	00012261 	.word	0x00012261
   11a7c:	00012289 	.word	0x00012289
   11a80:	000122c1 	.word	0x000122c1
   11a84:	000122ed 	.word	0x000122ed

00011a88 <__sfmoreglue>:
   11a88:	b570      	push	{r4, r5, r6, lr}
   11a8a:	2568      	movs	r5, #104	; 0x68
   11a8c:	1e4b      	subs	r3, r1, #1
   11a8e:	435d      	muls	r5, r3
   11a90:	000e      	movs	r6, r1
   11a92:	0029      	movs	r1, r5
   11a94:	3174      	adds	r1, #116	; 0x74
   11a96:	f000 f975 	bl	11d84 <_malloc_r>
   11a9a:	1e04      	subs	r4, r0, #0
   11a9c:	d008      	beq.n	11ab0 <__sfmoreglue+0x28>
   11a9e:	2100      	movs	r1, #0
   11aa0:	002a      	movs	r2, r5
   11aa2:	6001      	str	r1, [r0, #0]
   11aa4:	6046      	str	r6, [r0, #4]
   11aa6:	300c      	adds	r0, #12
   11aa8:	60a0      	str	r0, [r4, #8]
   11aaa:	3268      	adds	r2, #104	; 0x68
   11aac:	f7ff f8db 	bl	10c66 <memset>
   11ab0:	0020      	movs	r0, r4
   11ab2:	bd70      	pop	{r4, r5, r6, pc}

00011ab4 <__sinit>:
   11ab4:	6983      	ldr	r3, [r0, #24]
   11ab6:	b513      	push	{r0, r1, r4, lr}
   11ab8:	0004      	movs	r4, r0
   11aba:	2b00      	cmp	r3, #0
   11abc:	d128      	bne.n	11b10 <__sinit+0x5c>
   11abe:	6483      	str	r3, [r0, #72]	; 0x48
   11ac0:	64c3      	str	r3, [r0, #76]	; 0x4c
   11ac2:	6503      	str	r3, [r0, #80]	; 0x50
   11ac4:	4b13      	ldr	r3, [pc, #76]	; (11b14 <__sinit+0x60>)
   11ac6:	4a14      	ldr	r2, [pc, #80]	; (11b18 <__sinit+0x64>)
   11ac8:	681b      	ldr	r3, [r3, #0]
   11aca:	6282      	str	r2, [r0, #40]	; 0x28
   11acc:	9301      	str	r3, [sp, #4]
   11ace:	4298      	cmp	r0, r3
   11ad0:	d101      	bne.n	11ad6 <__sinit+0x22>
   11ad2:	2301      	movs	r3, #1
   11ad4:	6183      	str	r3, [r0, #24]
   11ad6:	0020      	movs	r0, r4
   11ad8:	f000 f820 	bl	11b1c <__sfp>
   11adc:	6060      	str	r0, [r4, #4]
   11ade:	0020      	movs	r0, r4
   11ae0:	f000 f81c 	bl	11b1c <__sfp>
   11ae4:	60a0      	str	r0, [r4, #8]
   11ae6:	0020      	movs	r0, r4
   11ae8:	f000 f818 	bl	11b1c <__sfp>
   11aec:	2200      	movs	r2, #0
   11aee:	60e0      	str	r0, [r4, #12]
   11af0:	2104      	movs	r1, #4
   11af2:	6860      	ldr	r0, [r4, #4]
   11af4:	f7ff ffa4 	bl	11a40 <std.isra.0>
   11af8:	2201      	movs	r2, #1
   11afa:	2109      	movs	r1, #9
   11afc:	68a0      	ldr	r0, [r4, #8]
   11afe:	f7ff ff9f 	bl	11a40 <std.isra.0>
   11b02:	2202      	movs	r2, #2
   11b04:	2112      	movs	r1, #18
   11b06:	68e0      	ldr	r0, [r4, #12]
   11b08:	f7ff ff9a 	bl	11a40 <std.isra.0>
   11b0c:	2301      	movs	r3, #1
   11b0e:	61a3      	str	r3, [r4, #24]
   11b10:	bd13      	pop	{r0, r1, r4, pc}
   11b12:	46c0      	nop			; (mov r8, r8)
   11b14:	00013ed0 	.word	0x00013ed0
   11b18:	00011a31 	.word	0x00011a31

00011b1c <__sfp>:
   11b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b1e:	4b1d      	ldr	r3, [pc, #116]	; (11b94 <__sfp+0x78>)
   11b20:	0006      	movs	r6, r0
   11b22:	681d      	ldr	r5, [r3, #0]
   11b24:	69ab      	ldr	r3, [r5, #24]
   11b26:	2b00      	cmp	r3, #0
   11b28:	d102      	bne.n	11b30 <__sfp+0x14>
   11b2a:	0028      	movs	r0, r5
   11b2c:	f7ff ffc2 	bl	11ab4 <__sinit>
   11b30:	3548      	adds	r5, #72	; 0x48
   11b32:	68ac      	ldr	r4, [r5, #8]
   11b34:	686b      	ldr	r3, [r5, #4]
   11b36:	3b01      	subs	r3, #1
   11b38:	d405      	bmi.n	11b46 <__sfp+0x2a>
   11b3a:	220c      	movs	r2, #12
   11b3c:	5ea7      	ldrsh	r7, [r4, r2]
   11b3e:	2f00      	cmp	r7, #0
   11b40:	d010      	beq.n	11b64 <__sfp+0x48>
   11b42:	3468      	adds	r4, #104	; 0x68
   11b44:	e7f7      	b.n	11b36 <__sfp+0x1a>
   11b46:	682b      	ldr	r3, [r5, #0]
   11b48:	2b00      	cmp	r3, #0
   11b4a:	d001      	beq.n	11b50 <__sfp+0x34>
   11b4c:	682d      	ldr	r5, [r5, #0]
   11b4e:	e7f0      	b.n	11b32 <__sfp+0x16>
   11b50:	2104      	movs	r1, #4
   11b52:	0030      	movs	r0, r6
   11b54:	f7ff ff98 	bl	11a88 <__sfmoreglue>
   11b58:	6028      	str	r0, [r5, #0]
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d1f6      	bne.n	11b4c <__sfp+0x30>
   11b5e:	230c      	movs	r3, #12
   11b60:	6033      	str	r3, [r6, #0]
   11b62:	e016      	b.n	11b92 <__sfp+0x76>
   11b64:	2301      	movs	r3, #1
   11b66:	0020      	movs	r0, r4
   11b68:	425b      	negs	r3, r3
   11b6a:	81e3      	strh	r3, [r4, #14]
   11b6c:	3302      	adds	r3, #2
   11b6e:	81a3      	strh	r3, [r4, #12]
   11b70:	6667      	str	r7, [r4, #100]	; 0x64
   11b72:	6027      	str	r7, [r4, #0]
   11b74:	60a7      	str	r7, [r4, #8]
   11b76:	6067      	str	r7, [r4, #4]
   11b78:	6127      	str	r7, [r4, #16]
   11b7a:	6167      	str	r7, [r4, #20]
   11b7c:	61a7      	str	r7, [r4, #24]
   11b7e:	305c      	adds	r0, #92	; 0x5c
   11b80:	2208      	movs	r2, #8
   11b82:	0039      	movs	r1, r7
   11b84:	f7ff f86f 	bl	10c66 <memset>
   11b88:	0020      	movs	r0, r4
   11b8a:	6367      	str	r7, [r4, #52]	; 0x34
   11b8c:	63a7      	str	r7, [r4, #56]	; 0x38
   11b8e:	64a7      	str	r7, [r4, #72]	; 0x48
   11b90:	64e7      	str	r7, [r4, #76]	; 0x4c
   11b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b94:	00013ed0 	.word	0x00013ed0

00011b98 <_fwalk_reent>:
   11b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11b9a:	0004      	movs	r4, r0
   11b9c:	0007      	movs	r7, r0
   11b9e:	2600      	movs	r6, #0
   11ba0:	9101      	str	r1, [sp, #4]
   11ba2:	3448      	adds	r4, #72	; 0x48
   11ba4:	2c00      	cmp	r4, #0
   11ba6:	d016      	beq.n	11bd6 <_fwalk_reent+0x3e>
   11ba8:	6863      	ldr	r3, [r4, #4]
   11baa:	68a5      	ldr	r5, [r4, #8]
   11bac:	9300      	str	r3, [sp, #0]
   11bae:	9b00      	ldr	r3, [sp, #0]
   11bb0:	3b01      	subs	r3, #1
   11bb2:	9300      	str	r3, [sp, #0]
   11bb4:	d40d      	bmi.n	11bd2 <_fwalk_reent+0x3a>
   11bb6:	89ab      	ldrh	r3, [r5, #12]
   11bb8:	2b01      	cmp	r3, #1
   11bba:	d908      	bls.n	11bce <_fwalk_reent+0x36>
   11bbc:	220e      	movs	r2, #14
   11bbe:	5eab      	ldrsh	r3, [r5, r2]
   11bc0:	3301      	adds	r3, #1
   11bc2:	d004      	beq.n	11bce <_fwalk_reent+0x36>
   11bc4:	0029      	movs	r1, r5
   11bc6:	0038      	movs	r0, r7
   11bc8:	9b01      	ldr	r3, [sp, #4]
   11bca:	4798      	blx	r3
   11bcc:	4306      	orrs	r6, r0
   11bce:	3568      	adds	r5, #104	; 0x68
   11bd0:	e7ed      	b.n	11bae <_fwalk_reent+0x16>
   11bd2:	6824      	ldr	r4, [r4, #0]
   11bd4:	e7e6      	b.n	11ba4 <_fwalk_reent+0xc>
   11bd6:	0030      	movs	r0, r6
   11bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011bdc <__swhatbuf_r>:
   11bdc:	b570      	push	{r4, r5, r6, lr}
   11bde:	000e      	movs	r6, r1
   11be0:	001d      	movs	r5, r3
   11be2:	230e      	movs	r3, #14
   11be4:	5ec9      	ldrsh	r1, [r1, r3]
   11be6:	b090      	sub	sp, #64	; 0x40
   11be8:	0014      	movs	r4, r2
   11bea:	2900      	cmp	r1, #0
   11bec:	da06      	bge.n	11bfc <__swhatbuf_r+0x20>
   11bee:	2300      	movs	r3, #0
   11bf0:	602b      	str	r3, [r5, #0]
   11bf2:	89b3      	ldrh	r3, [r6, #12]
   11bf4:	061b      	lsls	r3, r3, #24
   11bf6:	d50f      	bpl.n	11c18 <__swhatbuf_r+0x3c>
   11bf8:	2340      	movs	r3, #64	; 0x40
   11bfa:	e00f      	b.n	11c1c <__swhatbuf_r+0x40>
   11bfc:	aa01      	add	r2, sp, #4
   11bfe:	f000 fba1 	bl	12344 <_fstat_r>
   11c02:	2800      	cmp	r0, #0
   11c04:	dbf3      	blt.n	11bee <__swhatbuf_r+0x12>
   11c06:	23f0      	movs	r3, #240	; 0xf0
   11c08:	9a02      	ldr	r2, [sp, #8]
   11c0a:	021b      	lsls	r3, r3, #8
   11c0c:	4013      	ands	r3, r2
   11c0e:	4a05      	ldr	r2, [pc, #20]	; (11c24 <__swhatbuf_r+0x48>)
   11c10:	189b      	adds	r3, r3, r2
   11c12:	425a      	negs	r2, r3
   11c14:	4153      	adcs	r3, r2
   11c16:	602b      	str	r3, [r5, #0]
   11c18:	2380      	movs	r3, #128	; 0x80
   11c1a:	00db      	lsls	r3, r3, #3
   11c1c:	2000      	movs	r0, #0
   11c1e:	6023      	str	r3, [r4, #0]
   11c20:	b010      	add	sp, #64	; 0x40
   11c22:	bd70      	pop	{r4, r5, r6, pc}
   11c24:	ffffe000 	.word	0xffffe000

00011c28 <__smakebuf_r>:
   11c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11c2a:	2602      	movs	r6, #2
   11c2c:	898b      	ldrh	r3, [r1, #12]
   11c2e:	0005      	movs	r5, r0
   11c30:	000c      	movs	r4, r1
   11c32:	4233      	tst	r3, r6
   11c34:	d110      	bne.n	11c58 <__smakebuf_r+0x30>
   11c36:	ab01      	add	r3, sp, #4
   11c38:	466a      	mov	r2, sp
   11c3a:	f7ff ffcf 	bl	11bdc <__swhatbuf_r>
   11c3e:	9900      	ldr	r1, [sp, #0]
   11c40:	0007      	movs	r7, r0
   11c42:	0028      	movs	r0, r5
   11c44:	f000 f89e 	bl	11d84 <_malloc_r>
   11c48:	2800      	cmp	r0, #0
   11c4a:	d10c      	bne.n	11c66 <__smakebuf_r+0x3e>
   11c4c:	220c      	movs	r2, #12
   11c4e:	5ea3      	ldrsh	r3, [r4, r2]
   11c50:	059a      	lsls	r2, r3, #22
   11c52:	d423      	bmi.n	11c9c <__smakebuf_r+0x74>
   11c54:	4333      	orrs	r3, r6
   11c56:	81a3      	strh	r3, [r4, #12]
   11c58:	0023      	movs	r3, r4
   11c5a:	3347      	adds	r3, #71	; 0x47
   11c5c:	6023      	str	r3, [r4, #0]
   11c5e:	6123      	str	r3, [r4, #16]
   11c60:	2301      	movs	r3, #1
   11c62:	6163      	str	r3, [r4, #20]
   11c64:	e01a      	b.n	11c9c <__smakebuf_r+0x74>
   11c66:	2280      	movs	r2, #128	; 0x80
   11c68:	4b0d      	ldr	r3, [pc, #52]	; (11ca0 <__smakebuf_r+0x78>)
   11c6a:	62ab      	str	r3, [r5, #40]	; 0x28
   11c6c:	89a3      	ldrh	r3, [r4, #12]
   11c6e:	6020      	str	r0, [r4, #0]
   11c70:	4313      	orrs	r3, r2
   11c72:	81a3      	strh	r3, [r4, #12]
   11c74:	9b00      	ldr	r3, [sp, #0]
   11c76:	6120      	str	r0, [r4, #16]
   11c78:	6163      	str	r3, [r4, #20]
   11c7a:	9b01      	ldr	r3, [sp, #4]
   11c7c:	2b00      	cmp	r3, #0
   11c7e:	d00a      	beq.n	11c96 <__smakebuf_r+0x6e>
   11c80:	230e      	movs	r3, #14
   11c82:	5ee1      	ldrsh	r1, [r4, r3]
   11c84:	0028      	movs	r0, r5
   11c86:	f000 fb6f 	bl	12368 <_isatty_r>
   11c8a:	2800      	cmp	r0, #0
   11c8c:	d003      	beq.n	11c96 <__smakebuf_r+0x6e>
   11c8e:	2201      	movs	r2, #1
   11c90:	89a3      	ldrh	r3, [r4, #12]
   11c92:	4313      	orrs	r3, r2
   11c94:	81a3      	strh	r3, [r4, #12]
   11c96:	89a3      	ldrh	r3, [r4, #12]
   11c98:	431f      	orrs	r7, r3
   11c9a:	81a7      	strh	r7, [r4, #12]
   11c9c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11c9e:	46c0      	nop			; (mov r8, r8)
   11ca0:	00011a31 	.word	0x00011a31

00011ca4 <malloc>:
   11ca4:	b510      	push	{r4, lr}
   11ca6:	4b03      	ldr	r3, [pc, #12]	; (11cb4 <malloc+0x10>)
   11ca8:	0001      	movs	r1, r0
   11caa:	6818      	ldr	r0, [r3, #0]
   11cac:	f000 f86a 	bl	11d84 <_malloc_r>
   11cb0:	bd10      	pop	{r4, pc}
   11cb2:	46c0      	nop			; (mov r8, r8)
   11cb4:	20000098 	.word	0x20000098

00011cb8 <memchr>:
   11cb8:	b2c9      	uxtb	r1, r1
   11cba:	1882      	adds	r2, r0, r2
   11cbc:	4290      	cmp	r0, r2
   11cbe:	d004      	beq.n	11cca <memchr+0x12>
   11cc0:	7803      	ldrb	r3, [r0, #0]
   11cc2:	428b      	cmp	r3, r1
   11cc4:	d002      	beq.n	11ccc <memchr+0x14>
   11cc6:	3001      	adds	r0, #1
   11cc8:	e7f8      	b.n	11cbc <memchr+0x4>
   11cca:	2000      	movs	r0, #0
   11ccc:	4770      	bx	lr

00011cce <memmove>:
   11cce:	b510      	push	{r4, lr}
   11cd0:	4288      	cmp	r0, r1
   11cd2:	d902      	bls.n	11cda <memmove+0xc>
   11cd4:	188b      	adds	r3, r1, r2
   11cd6:	4298      	cmp	r0, r3
   11cd8:	d301      	bcc.n	11cde <memmove+0x10>
   11cda:	2300      	movs	r3, #0
   11cdc:	e005      	b.n	11cea <memmove+0x1c>
   11cde:	1a9b      	subs	r3, r3, r2
   11ce0:	3a01      	subs	r2, #1
   11ce2:	d308      	bcc.n	11cf6 <memmove+0x28>
   11ce4:	5c99      	ldrb	r1, [r3, r2]
   11ce6:	5481      	strb	r1, [r0, r2]
   11ce8:	e7fa      	b.n	11ce0 <memmove+0x12>
   11cea:	4293      	cmp	r3, r2
   11cec:	d003      	beq.n	11cf6 <memmove+0x28>
   11cee:	5ccc      	ldrb	r4, [r1, r3]
   11cf0:	54c4      	strb	r4, [r0, r3]
   11cf2:	3301      	adds	r3, #1
   11cf4:	e7f9      	b.n	11cea <memmove+0x1c>
   11cf6:	bd10      	pop	{r4, pc}

00011cf8 <_free_r>:
   11cf8:	b530      	push	{r4, r5, lr}
   11cfa:	2900      	cmp	r1, #0
   11cfc:	d03e      	beq.n	11d7c <_free_r+0x84>
   11cfe:	3904      	subs	r1, #4
   11d00:	680b      	ldr	r3, [r1, #0]
   11d02:	2b00      	cmp	r3, #0
   11d04:	da00      	bge.n	11d08 <_free_r+0x10>
   11d06:	18c9      	adds	r1, r1, r3
   11d08:	4a1d      	ldr	r2, [pc, #116]	; (11d80 <_free_r+0x88>)
   11d0a:	6813      	ldr	r3, [r2, #0]
   11d0c:	0014      	movs	r4, r2
   11d0e:	2b00      	cmp	r3, #0
   11d10:	d102      	bne.n	11d18 <_free_r+0x20>
   11d12:	604b      	str	r3, [r1, #4]
   11d14:	6011      	str	r1, [r2, #0]
   11d16:	e031      	b.n	11d7c <_free_r+0x84>
   11d18:	428b      	cmp	r3, r1
   11d1a:	d90d      	bls.n	11d38 <_free_r+0x40>
   11d1c:	680a      	ldr	r2, [r1, #0]
   11d1e:	1888      	adds	r0, r1, r2
   11d20:	4283      	cmp	r3, r0
   11d22:	d103      	bne.n	11d2c <_free_r+0x34>
   11d24:	6818      	ldr	r0, [r3, #0]
   11d26:	685b      	ldr	r3, [r3, #4]
   11d28:	1882      	adds	r2, r0, r2
   11d2a:	600a      	str	r2, [r1, #0]
   11d2c:	604b      	str	r3, [r1, #4]
   11d2e:	6021      	str	r1, [r4, #0]
   11d30:	e024      	b.n	11d7c <_free_r+0x84>
   11d32:	428a      	cmp	r2, r1
   11d34:	d803      	bhi.n	11d3e <_free_r+0x46>
   11d36:	0013      	movs	r3, r2
   11d38:	685a      	ldr	r2, [r3, #4]
   11d3a:	2a00      	cmp	r2, #0
   11d3c:	d1f9      	bne.n	11d32 <_free_r+0x3a>
   11d3e:	681d      	ldr	r5, [r3, #0]
   11d40:	195c      	adds	r4, r3, r5
   11d42:	428c      	cmp	r4, r1
   11d44:	d10b      	bne.n	11d5e <_free_r+0x66>
   11d46:	6809      	ldr	r1, [r1, #0]
   11d48:	1869      	adds	r1, r5, r1
   11d4a:	1858      	adds	r0, r3, r1
   11d4c:	6019      	str	r1, [r3, #0]
   11d4e:	4282      	cmp	r2, r0
   11d50:	d114      	bne.n	11d7c <_free_r+0x84>
   11d52:	6810      	ldr	r0, [r2, #0]
   11d54:	6852      	ldr	r2, [r2, #4]
   11d56:	1841      	adds	r1, r0, r1
   11d58:	6019      	str	r1, [r3, #0]
   11d5a:	605a      	str	r2, [r3, #4]
   11d5c:	e00e      	b.n	11d7c <_free_r+0x84>
   11d5e:	428c      	cmp	r4, r1
   11d60:	d902      	bls.n	11d68 <_free_r+0x70>
   11d62:	230c      	movs	r3, #12
   11d64:	6003      	str	r3, [r0, #0]
   11d66:	e009      	b.n	11d7c <_free_r+0x84>
   11d68:	6808      	ldr	r0, [r1, #0]
   11d6a:	180c      	adds	r4, r1, r0
   11d6c:	42a2      	cmp	r2, r4
   11d6e:	d103      	bne.n	11d78 <_free_r+0x80>
   11d70:	6814      	ldr	r4, [r2, #0]
   11d72:	6852      	ldr	r2, [r2, #4]
   11d74:	1820      	adds	r0, r4, r0
   11d76:	6008      	str	r0, [r1, #0]
   11d78:	604a      	str	r2, [r1, #4]
   11d7a:	6059      	str	r1, [r3, #4]
   11d7c:	bd30      	pop	{r4, r5, pc}
   11d7e:	46c0      	nop			; (mov r8, r8)
   11d80:	200045b4 	.word	0x200045b4

00011d84 <_malloc_r>:
   11d84:	2303      	movs	r3, #3
   11d86:	b570      	push	{r4, r5, r6, lr}
   11d88:	1ccd      	adds	r5, r1, #3
   11d8a:	439d      	bics	r5, r3
   11d8c:	3508      	adds	r5, #8
   11d8e:	0006      	movs	r6, r0
   11d90:	2d0c      	cmp	r5, #12
   11d92:	d201      	bcs.n	11d98 <_malloc_r+0x14>
   11d94:	250c      	movs	r5, #12
   11d96:	e005      	b.n	11da4 <_malloc_r+0x20>
   11d98:	2d00      	cmp	r5, #0
   11d9a:	da03      	bge.n	11da4 <_malloc_r+0x20>
   11d9c:	230c      	movs	r3, #12
   11d9e:	2000      	movs	r0, #0
   11da0:	6033      	str	r3, [r6, #0]
   11da2:	e040      	b.n	11e26 <_malloc_r+0xa2>
   11da4:	42a9      	cmp	r1, r5
   11da6:	d8f9      	bhi.n	11d9c <_malloc_r+0x18>
   11da8:	4b1f      	ldr	r3, [pc, #124]	; (11e28 <_malloc_r+0xa4>)
   11daa:	681c      	ldr	r4, [r3, #0]
   11dac:	001a      	movs	r2, r3
   11dae:	0021      	movs	r1, r4
   11db0:	2900      	cmp	r1, #0
   11db2:	d013      	beq.n	11ddc <_malloc_r+0x58>
   11db4:	680b      	ldr	r3, [r1, #0]
   11db6:	1b5b      	subs	r3, r3, r5
   11db8:	d40d      	bmi.n	11dd6 <_malloc_r+0x52>
   11dba:	2b0b      	cmp	r3, #11
   11dbc:	d902      	bls.n	11dc4 <_malloc_r+0x40>
   11dbe:	600b      	str	r3, [r1, #0]
   11dc0:	18cc      	adds	r4, r1, r3
   11dc2:	e01e      	b.n	11e02 <_malloc_r+0x7e>
   11dc4:	428c      	cmp	r4, r1
   11dc6:	d102      	bne.n	11dce <_malloc_r+0x4a>
   11dc8:	6863      	ldr	r3, [r4, #4]
   11dca:	6013      	str	r3, [r2, #0]
   11dcc:	e01a      	b.n	11e04 <_malloc_r+0x80>
   11dce:	684b      	ldr	r3, [r1, #4]
   11dd0:	6063      	str	r3, [r4, #4]
   11dd2:	000c      	movs	r4, r1
   11dd4:	e016      	b.n	11e04 <_malloc_r+0x80>
   11dd6:	000c      	movs	r4, r1
   11dd8:	6849      	ldr	r1, [r1, #4]
   11dda:	e7e9      	b.n	11db0 <_malloc_r+0x2c>
   11ddc:	4c13      	ldr	r4, [pc, #76]	; (11e2c <_malloc_r+0xa8>)
   11dde:	6823      	ldr	r3, [r4, #0]
   11de0:	2b00      	cmp	r3, #0
   11de2:	d103      	bne.n	11dec <_malloc_r+0x68>
   11de4:	0030      	movs	r0, r6
   11de6:	f000 f9df 	bl	121a8 <_sbrk_r>
   11dea:	6020      	str	r0, [r4, #0]
   11dec:	0029      	movs	r1, r5
   11dee:	0030      	movs	r0, r6
   11df0:	f000 f9da 	bl	121a8 <_sbrk_r>
   11df4:	1c43      	adds	r3, r0, #1
   11df6:	d0d1      	beq.n	11d9c <_malloc_r+0x18>
   11df8:	2303      	movs	r3, #3
   11dfa:	1cc4      	adds	r4, r0, #3
   11dfc:	439c      	bics	r4, r3
   11dfe:	42a0      	cmp	r0, r4
   11e00:	d10a      	bne.n	11e18 <_malloc_r+0x94>
   11e02:	6025      	str	r5, [r4, #0]
   11e04:	0020      	movs	r0, r4
   11e06:	2207      	movs	r2, #7
   11e08:	300b      	adds	r0, #11
   11e0a:	1d23      	adds	r3, r4, #4
   11e0c:	4390      	bics	r0, r2
   11e0e:	1ac3      	subs	r3, r0, r3
   11e10:	d009      	beq.n	11e26 <_malloc_r+0xa2>
   11e12:	425a      	negs	r2, r3
   11e14:	50e2      	str	r2, [r4, r3]
   11e16:	e006      	b.n	11e26 <_malloc_r+0xa2>
   11e18:	1a21      	subs	r1, r4, r0
   11e1a:	0030      	movs	r0, r6
   11e1c:	f000 f9c4 	bl	121a8 <_sbrk_r>
   11e20:	1c43      	adds	r3, r0, #1
   11e22:	d1ee      	bne.n	11e02 <_malloc_r+0x7e>
   11e24:	e7ba      	b.n	11d9c <_malloc_r+0x18>
   11e26:	bd70      	pop	{r4, r5, r6, pc}
   11e28:	200045b4 	.word	0x200045b4
   11e2c:	200045b0 	.word	0x200045b0

00011e30 <_realloc_r>:
   11e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e32:	0006      	movs	r6, r0
   11e34:	000c      	movs	r4, r1
   11e36:	0015      	movs	r5, r2
   11e38:	2900      	cmp	r1, #0
   11e3a:	d104      	bne.n	11e46 <_realloc_r+0x16>
   11e3c:	0011      	movs	r1, r2
   11e3e:	f7ff ffa1 	bl	11d84 <_malloc_r>
   11e42:	0004      	movs	r4, r0
   11e44:	e018      	b.n	11e78 <_realloc_r+0x48>
   11e46:	2a00      	cmp	r2, #0
   11e48:	d103      	bne.n	11e52 <_realloc_r+0x22>
   11e4a:	f7ff ff55 	bl	11cf8 <_free_r>
   11e4e:	002c      	movs	r4, r5
   11e50:	e012      	b.n	11e78 <_realloc_r+0x48>
   11e52:	f000 faaf 	bl	123b4 <_malloc_usable_size_r>
   11e56:	4285      	cmp	r5, r0
   11e58:	d90e      	bls.n	11e78 <_realloc_r+0x48>
   11e5a:	0029      	movs	r1, r5
   11e5c:	0030      	movs	r0, r6
   11e5e:	f7ff ff91 	bl	11d84 <_malloc_r>
   11e62:	1e07      	subs	r7, r0, #0
   11e64:	d007      	beq.n	11e76 <_realloc_r+0x46>
   11e66:	0021      	movs	r1, r4
   11e68:	002a      	movs	r2, r5
   11e6a:	f7fe fef3 	bl	10c54 <memcpy>
   11e6e:	0021      	movs	r1, r4
   11e70:	0030      	movs	r0, r6
   11e72:	f7ff ff41 	bl	11cf8 <_free_r>
   11e76:	003c      	movs	r4, r7
   11e78:	0020      	movs	r0, r4
   11e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e7c <__ssputs_r>:
   11e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e7e:	688e      	ldr	r6, [r1, #8]
   11e80:	b085      	sub	sp, #20
   11e82:	0007      	movs	r7, r0
   11e84:	000c      	movs	r4, r1
   11e86:	9203      	str	r2, [sp, #12]
   11e88:	9301      	str	r3, [sp, #4]
   11e8a:	429e      	cmp	r6, r3
   11e8c:	d843      	bhi.n	11f16 <__ssputs_r+0x9a>
   11e8e:	2390      	movs	r3, #144	; 0x90
   11e90:	898a      	ldrh	r2, [r1, #12]
   11e92:	00db      	lsls	r3, r3, #3
   11e94:	421a      	tst	r2, r3
   11e96:	d03e      	beq.n	11f16 <__ssputs_r+0x9a>
   11e98:	2503      	movs	r5, #3
   11e9a:	6909      	ldr	r1, [r1, #16]
   11e9c:	6823      	ldr	r3, [r4, #0]
   11e9e:	9801      	ldr	r0, [sp, #4]
   11ea0:	1a5b      	subs	r3, r3, r1
   11ea2:	9302      	str	r3, [sp, #8]
   11ea4:	6963      	ldr	r3, [r4, #20]
   11ea6:	435d      	muls	r5, r3
   11ea8:	0feb      	lsrs	r3, r5, #31
   11eaa:	195d      	adds	r5, r3, r5
   11eac:	9b02      	ldr	r3, [sp, #8]
   11eae:	106d      	asrs	r5, r5, #1
   11eb0:	3301      	adds	r3, #1
   11eb2:	181b      	adds	r3, r3, r0
   11eb4:	42ab      	cmp	r3, r5
   11eb6:	d900      	bls.n	11eba <__ssputs_r+0x3e>
   11eb8:	001d      	movs	r5, r3
   11eba:	0553      	lsls	r3, r2, #21
   11ebc:	d510      	bpl.n	11ee0 <__ssputs_r+0x64>
   11ebe:	0029      	movs	r1, r5
   11ec0:	0038      	movs	r0, r7
   11ec2:	f7ff ff5f 	bl	11d84 <_malloc_r>
   11ec6:	1e06      	subs	r6, r0, #0
   11ec8:	d014      	beq.n	11ef4 <__ssputs_r+0x78>
   11eca:	9a02      	ldr	r2, [sp, #8]
   11ecc:	6921      	ldr	r1, [r4, #16]
   11ece:	f7fe fec1 	bl	10c54 <memcpy>
   11ed2:	89a2      	ldrh	r2, [r4, #12]
   11ed4:	4b19      	ldr	r3, [pc, #100]	; (11f3c <__ssputs_r+0xc0>)
   11ed6:	4013      	ands	r3, r2
   11ed8:	2280      	movs	r2, #128	; 0x80
   11eda:	4313      	orrs	r3, r2
   11edc:	81a3      	strh	r3, [r4, #12]
   11ede:	e012      	b.n	11f06 <__ssputs_r+0x8a>
   11ee0:	002a      	movs	r2, r5
   11ee2:	0038      	movs	r0, r7
   11ee4:	f7ff ffa4 	bl	11e30 <_realloc_r>
   11ee8:	1e06      	subs	r6, r0, #0
   11eea:	d10c      	bne.n	11f06 <__ssputs_r+0x8a>
   11eec:	6921      	ldr	r1, [r4, #16]
   11eee:	0038      	movs	r0, r7
   11ef0:	f7ff ff02 	bl	11cf8 <_free_r>
   11ef4:	230c      	movs	r3, #12
   11ef6:	2240      	movs	r2, #64	; 0x40
   11ef8:	2001      	movs	r0, #1
   11efa:	603b      	str	r3, [r7, #0]
   11efc:	89a3      	ldrh	r3, [r4, #12]
   11efe:	4240      	negs	r0, r0
   11f00:	4313      	orrs	r3, r2
   11f02:	81a3      	strh	r3, [r4, #12]
   11f04:	e017      	b.n	11f36 <__ssputs_r+0xba>
   11f06:	9b02      	ldr	r3, [sp, #8]
   11f08:	6126      	str	r6, [r4, #16]
   11f0a:	18f6      	adds	r6, r6, r3
   11f0c:	6026      	str	r6, [r4, #0]
   11f0e:	6165      	str	r5, [r4, #20]
   11f10:	9e01      	ldr	r6, [sp, #4]
   11f12:	1aed      	subs	r5, r5, r3
   11f14:	60a5      	str	r5, [r4, #8]
   11f16:	9b01      	ldr	r3, [sp, #4]
   11f18:	42b3      	cmp	r3, r6
   11f1a:	d200      	bcs.n	11f1e <__ssputs_r+0xa2>
   11f1c:	001e      	movs	r6, r3
   11f1e:	0032      	movs	r2, r6
   11f20:	9903      	ldr	r1, [sp, #12]
   11f22:	6820      	ldr	r0, [r4, #0]
   11f24:	f7ff fed3 	bl	11cce <memmove>
   11f28:	2000      	movs	r0, #0
   11f2a:	68a3      	ldr	r3, [r4, #8]
   11f2c:	1b9b      	subs	r3, r3, r6
   11f2e:	60a3      	str	r3, [r4, #8]
   11f30:	6823      	ldr	r3, [r4, #0]
   11f32:	199e      	adds	r6, r3, r6
   11f34:	6026      	str	r6, [r4, #0]
   11f36:	b005      	add	sp, #20
   11f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f3a:	46c0      	nop			; (mov r8, r8)
   11f3c:	fffffb7f 	.word	0xfffffb7f

00011f40 <_svfiprintf_r>:
   11f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f42:	b09f      	sub	sp, #124	; 0x7c
   11f44:	9002      	str	r0, [sp, #8]
   11f46:	9305      	str	r3, [sp, #20]
   11f48:	898b      	ldrh	r3, [r1, #12]
   11f4a:	000f      	movs	r7, r1
   11f4c:	0016      	movs	r6, r2
   11f4e:	061b      	lsls	r3, r3, #24
   11f50:	d510      	bpl.n	11f74 <_svfiprintf_r+0x34>
   11f52:	690b      	ldr	r3, [r1, #16]
   11f54:	2b00      	cmp	r3, #0
   11f56:	d10d      	bne.n	11f74 <_svfiprintf_r+0x34>
   11f58:	2140      	movs	r1, #64	; 0x40
   11f5a:	f7ff ff13 	bl	11d84 <_malloc_r>
   11f5e:	6038      	str	r0, [r7, #0]
   11f60:	6138      	str	r0, [r7, #16]
   11f62:	2800      	cmp	r0, #0
   11f64:	d104      	bne.n	11f70 <_svfiprintf_r+0x30>
   11f66:	230c      	movs	r3, #12
   11f68:	9a02      	ldr	r2, [sp, #8]
   11f6a:	3801      	subs	r0, #1
   11f6c:	6013      	str	r3, [r2, #0]
   11f6e:	e0d8      	b.n	12122 <_svfiprintf_r+0x1e2>
   11f70:	2340      	movs	r3, #64	; 0x40
   11f72:	617b      	str	r3, [r7, #20]
   11f74:	2300      	movs	r3, #0
   11f76:	ad06      	add	r5, sp, #24
   11f78:	616b      	str	r3, [r5, #20]
   11f7a:	3320      	adds	r3, #32
   11f7c:	766b      	strb	r3, [r5, #25]
   11f7e:	3310      	adds	r3, #16
   11f80:	76ab      	strb	r3, [r5, #26]
   11f82:	0034      	movs	r4, r6
   11f84:	7823      	ldrb	r3, [r4, #0]
   11f86:	2b00      	cmp	r3, #0
   11f88:	d103      	bne.n	11f92 <_svfiprintf_r+0x52>
   11f8a:	1ba3      	subs	r3, r4, r6
   11f8c:	9304      	str	r3, [sp, #16]
   11f8e:	d012      	beq.n	11fb6 <_svfiprintf_r+0x76>
   11f90:	e003      	b.n	11f9a <_svfiprintf_r+0x5a>
   11f92:	2b25      	cmp	r3, #37	; 0x25
   11f94:	d0f9      	beq.n	11f8a <_svfiprintf_r+0x4a>
   11f96:	3401      	adds	r4, #1
   11f98:	e7f4      	b.n	11f84 <_svfiprintf_r+0x44>
   11f9a:	1ba3      	subs	r3, r4, r6
   11f9c:	0032      	movs	r2, r6
   11f9e:	0039      	movs	r1, r7
   11fa0:	9802      	ldr	r0, [sp, #8]
   11fa2:	f7ff ff6b 	bl	11e7c <__ssputs_r>
   11fa6:	1c43      	adds	r3, r0, #1
   11fa8:	d100      	bne.n	11fac <_svfiprintf_r+0x6c>
   11faa:	e0b4      	b.n	12116 <_svfiprintf_r+0x1d6>
   11fac:	696a      	ldr	r2, [r5, #20]
   11fae:	9b04      	ldr	r3, [sp, #16]
   11fb0:	4694      	mov	ip, r2
   11fb2:	4463      	add	r3, ip
   11fb4:	616b      	str	r3, [r5, #20]
   11fb6:	7823      	ldrb	r3, [r4, #0]
   11fb8:	2b00      	cmp	r3, #0
   11fba:	d100      	bne.n	11fbe <_svfiprintf_r+0x7e>
   11fbc:	e0ab      	b.n	12116 <_svfiprintf_r+0x1d6>
   11fbe:	2201      	movs	r2, #1
   11fc0:	2300      	movs	r3, #0
   11fc2:	4252      	negs	r2, r2
   11fc4:	606a      	str	r2, [r5, #4]
   11fc6:	a902      	add	r1, sp, #8
   11fc8:	3254      	adds	r2, #84	; 0x54
   11fca:	1852      	adds	r2, r2, r1
   11fcc:	3401      	adds	r4, #1
   11fce:	602b      	str	r3, [r5, #0]
   11fd0:	60eb      	str	r3, [r5, #12]
   11fd2:	60ab      	str	r3, [r5, #8]
   11fd4:	7013      	strb	r3, [r2, #0]
   11fd6:	65ab      	str	r3, [r5, #88]	; 0x58
   11fd8:	4e53      	ldr	r6, [pc, #332]	; (12128 <_svfiprintf_r+0x1e8>)
   11fda:	7821      	ldrb	r1, [r4, #0]
   11fdc:	2205      	movs	r2, #5
   11fde:	0030      	movs	r0, r6
   11fe0:	f7ff fe6a 	bl	11cb8 <memchr>
   11fe4:	2800      	cmp	r0, #0
   11fe6:	d007      	beq.n	11ff8 <_svfiprintf_r+0xb8>
   11fe8:	2301      	movs	r3, #1
   11fea:	1b80      	subs	r0, r0, r6
   11fec:	4083      	lsls	r3, r0
   11fee:	682a      	ldr	r2, [r5, #0]
   11ff0:	3401      	adds	r4, #1
   11ff2:	4313      	orrs	r3, r2
   11ff4:	602b      	str	r3, [r5, #0]
   11ff6:	e7ef      	b.n	11fd8 <_svfiprintf_r+0x98>
   11ff8:	682b      	ldr	r3, [r5, #0]
   11ffa:	06da      	lsls	r2, r3, #27
   11ffc:	d504      	bpl.n	12008 <_svfiprintf_r+0xc8>
   11ffe:	2253      	movs	r2, #83	; 0x53
   12000:	2120      	movs	r1, #32
   12002:	a802      	add	r0, sp, #8
   12004:	1812      	adds	r2, r2, r0
   12006:	7011      	strb	r1, [r2, #0]
   12008:	071a      	lsls	r2, r3, #28
   1200a:	d504      	bpl.n	12016 <_svfiprintf_r+0xd6>
   1200c:	2253      	movs	r2, #83	; 0x53
   1200e:	212b      	movs	r1, #43	; 0x2b
   12010:	a802      	add	r0, sp, #8
   12012:	1812      	adds	r2, r2, r0
   12014:	7011      	strb	r1, [r2, #0]
   12016:	7822      	ldrb	r2, [r4, #0]
   12018:	2a2a      	cmp	r2, #42	; 0x2a
   1201a:	d003      	beq.n	12024 <_svfiprintf_r+0xe4>
   1201c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1201e:	2000      	movs	r0, #0
   12020:	210a      	movs	r1, #10
   12022:	e00e      	b.n	12042 <_svfiprintf_r+0x102>
   12024:	9a05      	ldr	r2, [sp, #20]
   12026:	1d11      	adds	r1, r2, #4
   12028:	6812      	ldr	r2, [r2, #0]
   1202a:	9105      	str	r1, [sp, #20]
   1202c:	2a00      	cmp	r2, #0
   1202e:	db01      	blt.n	12034 <_svfiprintf_r+0xf4>
   12030:	9209      	str	r2, [sp, #36]	; 0x24
   12032:	e004      	b.n	1203e <_svfiprintf_r+0xfe>
   12034:	4252      	negs	r2, r2
   12036:	60ea      	str	r2, [r5, #12]
   12038:	2202      	movs	r2, #2
   1203a:	4313      	orrs	r3, r2
   1203c:	602b      	str	r3, [r5, #0]
   1203e:	3401      	adds	r4, #1
   12040:	e00b      	b.n	1205a <_svfiprintf_r+0x11a>
   12042:	7822      	ldrb	r2, [r4, #0]
   12044:	3a30      	subs	r2, #48	; 0x30
   12046:	2a09      	cmp	r2, #9
   12048:	d804      	bhi.n	12054 <_svfiprintf_r+0x114>
   1204a:	434b      	muls	r3, r1
   1204c:	3401      	adds	r4, #1
   1204e:	189b      	adds	r3, r3, r2
   12050:	2001      	movs	r0, #1
   12052:	e7f6      	b.n	12042 <_svfiprintf_r+0x102>
   12054:	2800      	cmp	r0, #0
   12056:	d000      	beq.n	1205a <_svfiprintf_r+0x11a>
   12058:	9309      	str	r3, [sp, #36]	; 0x24
   1205a:	7823      	ldrb	r3, [r4, #0]
   1205c:	2b2e      	cmp	r3, #46	; 0x2e
   1205e:	d11e      	bne.n	1209e <_svfiprintf_r+0x15e>
   12060:	7863      	ldrb	r3, [r4, #1]
   12062:	2b2a      	cmp	r3, #42	; 0x2a
   12064:	d10a      	bne.n	1207c <_svfiprintf_r+0x13c>
   12066:	9b05      	ldr	r3, [sp, #20]
   12068:	3402      	adds	r4, #2
   1206a:	1d1a      	adds	r2, r3, #4
   1206c:	681b      	ldr	r3, [r3, #0]
   1206e:	9205      	str	r2, [sp, #20]
   12070:	2b00      	cmp	r3, #0
   12072:	da01      	bge.n	12078 <_svfiprintf_r+0x138>
   12074:	2301      	movs	r3, #1
   12076:	425b      	negs	r3, r3
   12078:	9307      	str	r3, [sp, #28]
   1207a:	e010      	b.n	1209e <_svfiprintf_r+0x15e>
   1207c:	2300      	movs	r3, #0
   1207e:	200a      	movs	r0, #10
   12080:	001a      	movs	r2, r3
   12082:	3401      	adds	r4, #1
   12084:	606b      	str	r3, [r5, #4]
   12086:	7821      	ldrb	r1, [r4, #0]
   12088:	3930      	subs	r1, #48	; 0x30
   1208a:	2909      	cmp	r1, #9
   1208c:	d804      	bhi.n	12098 <_svfiprintf_r+0x158>
   1208e:	4342      	muls	r2, r0
   12090:	3401      	adds	r4, #1
   12092:	1852      	adds	r2, r2, r1
   12094:	2301      	movs	r3, #1
   12096:	e7f6      	b.n	12086 <_svfiprintf_r+0x146>
   12098:	2b00      	cmp	r3, #0
   1209a:	d000      	beq.n	1209e <_svfiprintf_r+0x15e>
   1209c:	9207      	str	r2, [sp, #28]
   1209e:	4e23      	ldr	r6, [pc, #140]	; (1212c <_svfiprintf_r+0x1ec>)
   120a0:	7821      	ldrb	r1, [r4, #0]
   120a2:	2203      	movs	r2, #3
   120a4:	0030      	movs	r0, r6
   120a6:	f7ff fe07 	bl	11cb8 <memchr>
   120aa:	2800      	cmp	r0, #0
   120ac:	d006      	beq.n	120bc <_svfiprintf_r+0x17c>
   120ae:	2340      	movs	r3, #64	; 0x40
   120b0:	1b80      	subs	r0, r0, r6
   120b2:	4083      	lsls	r3, r0
   120b4:	682a      	ldr	r2, [r5, #0]
   120b6:	3401      	adds	r4, #1
   120b8:	4313      	orrs	r3, r2
   120ba:	602b      	str	r3, [r5, #0]
   120bc:	7821      	ldrb	r1, [r4, #0]
   120be:	2206      	movs	r2, #6
   120c0:	481b      	ldr	r0, [pc, #108]	; (12130 <_svfiprintf_r+0x1f0>)
   120c2:	1c66      	adds	r6, r4, #1
   120c4:	7629      	strb	r1, [r5, #24]
   120c6:	f7ff fdf7 	bl	11cb8 <memchr>
   120ca:	2800      	cmp	r0, #0
   120cc:	d012      	beq.n	120f4 <_svfiprintf_r+0x1b4>
   120ce:	4b19      	ldr	r3, [pc, #100]	; (12134 <_svfiprintf_r+0x1f4>)
   120d0:	2b00      	cmp	r3, #0
   120d2:	d106      	bne.n	120e2 <_svfiprintf_r+0x1a2>
   120d4:	2207      	movs	r2, #7
   120d6:	9b05      	ldr	r3, [sp, #20]
   120d8:	3307      	adds	r3, #7
   120da:	4393      	bics	r3, r2
   120dc:	3308      	adds	r3, #8
   120de:	9305      	str	r3, [sp, #20]
   120e0:	e014      	b.n	1210c <_svfiprintf_r+0x1cc>
   120e2:	ab05      	add	r3, sp, #20
   120e4:	9300      	str	r3, [sp, #0]
   120e6:	003a      	movs	r2, r7
   120e8:	4b13      	ldr	r3, [pc, #76]	; (12138 <_svfiprintf_r+0x1f8>)
   120ea:	0029      	movs	r1, r5
   120ec:	9802      	ldr	r0, [sp, #8]
   120ee:	e000      	b.n	120f2 <_svfiprintf_r+0x1b2>
   120f0:	bf00      	nop
   120f2:	e007      	b.n	12104 <_svfiprintf_r+0x1c4>
   120f4:	ab05      	add	r3, sp, #20
   120f6:	9300      	str	r3, [sp, #0]
   120f8:	003a      	movs	r2, r7
   120fa:	4b0f      	ldr	r3, [pc, #60]	; (12138 <_svfiprintf_r+0x1f8>)
   120fc:	0029      	movs	r1, r5
   120fe:	9802      	ldr	r0, [sp, #8]
   12100:	f7fe ff6a 	bl	10fd8 <_printf_i>
   12104:	9003      	str	r0, [sp, #12]
   12106:	9b03      	ldr	r3, [sp, #12]
   12108:	3301      	adds	r3, #1
   1210a:	d004      	beq.n	12116 <_svfiprintf_r+0x1d6>
   1210c:	696b      	ldr	r3, [r5, #20]
   1210e:	9a03      	ldr	r2, [sp, #12]
   12110:	189b      	adds	r3, r3, r2
   12112:	616b      	str	r3, [r5, #20]
   12114:	e735      	b.n	11f82 <_svfiprintf_r+0x42>
   12116:	89bb      	ldrh	r3, [r7, #12]
   12118:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1211a:	065b      	lsls	r3, r3, #25
   1211c:	d501      	bpl.n	12122 <_svfiprintf_r+0x1e2>
   1211e:	2001      	movs	r0, #1
   12120:	4240      	negs	r0, r0
   12122:	b01f      	add	sp, #124	; 0x7c
   12124:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12126:	46c0      	nop			; (mov r8, r8)
   12128:	00013ed4 	.word	0x00013ed4
   1212c:	00013eda 	.word	0x00013eda
   12130:	00013ede 	.word	0x00013ede
   12134:	00000000 	.word	0x00000000
   12138:	00011e7d 	.word	0x00011e7d

0001213c <_putc_r>:
   1213c:	b570      	push	{r4, r5, r6, lr}
   1213e:	0006      	movs	r6, r0
   12140:	000d      	movs	r5, r1
   12142:	0014      	movs	r4, r2
   12144:	2800      	cmp	r0, #0
   12146:	d004      	beq.n	12152 <_putc_r+0x16>
   12148:	6983      	ldr	r3, [r0, #24]
   1214a:	2b00      	cmp	r3, #0
   1214c:	d101      	bne.n	12152 <_putc_r+0x16>
   1214e:	f7ff fcb1 	bl	11ab4 <__sinit>
   12152:	4b12      	ldr	r3, [pc, #72]	; (1219c <_putc_r+0x60>)
   12154:	429c      	cmp	r4, r3
   12156:	d101      	bne.n	1215c <_putc_r+0x20>
   12158:	6874      	ldr	r4, [r6, #4]
   1215a:	e008      	b.n	1216e <_putc_r+0x32>
   1215c:	4b10      	ldr	r3, [pc, #64]	; (121a0 <_putc_r+0x64>)
   1215e:	429c      	cmp	r4, r3
   12160:	d101      	bne.n	12166 <_putc_r+0x2a>
   12162:	68b4      	ldr	r4, [r6, #8]
   12164:	e003      	b.n	1216e <_putc_r+0x32>
   12166:	4b0f      	ldr	r3, [pc, #60]	; (121a4 <_putc_r+0x68>)
   12168:	429c      	cmp	r4, r3
   1216a:	d100      	bne.n	1216e <_putc_r+0x32>
   1216c:	68f4      	ldr	r4, [r6, #12]
   1216e:	68a3      	ldr	r3, [r4, #8]
   12170:	3b01      	subs	r3, #1
   12172:	60a3      	str	r3, [r4, #8]
   12174:	2b00      	cmp	r3, #0
   12176:	da05      	bge.n	12184 <_putc_r+0x48>
   12178:	69a2      	ldr	r2, [r4, #24]
   1217a:	4293      	cmp	r3, r2
   1217c:	db08      	blt.n	12190 <_putc_r+0x54>
   1217e:	b2eb      	uxtb	r3, r5
   12180:	2b0a      	cmp	r3, #10
   12182:	d005      	beq.n	12190 <_putc_r+0x54>
   12184:	6823      	ldr	r3, [r4, #0]
   12186:	b2e8      	uxtb	r0, r5
   12188:	1c5a      	adds	r2, r3, #1
   1218a:	6022      	str	r2, [r4, #0]
   1218c:	701d      	strb	r5, [r3, #0]
   1218e:	e004      	b.n	1219a <_putc_r+0x5e>
   12190:	0022      	movs	r2, r4
   12192:	0029      	movs	r1, r5
   12194:	0030      	movs	r0, r6
   12196:	f7ff fac3 	bl	11720 <__swbuf_r>
   1219a:	bd70      	pop	{r4, r5, r6, pc}
   1219c:	00014008 	.word	0x00014008
   121a0:	00014028 	.word	0x00014028
   121a4:	00014048 	.word	0x00014048

000121a8 <_sbrk_r>:
   121a8:	2300      	movs	r3, #0
   121aa:	b570      	push	{r4, r5, r6, lr}
   121ac:	4c06      	ldr	r4, [pc, #24]	; (121c8 <_sbrk_r+0x20>)
   121ae:	0005      	movs	r5, r0
   121b0:	0008      	movs	r0, r1
   121b2:	6023      	str	r3, [r4, #0]
   121b4:	f7f9 ff84 	bl	c0c0 <_sbrk>
   121b8:	1c43      	adds	r3, r0, #1
   121ba:	d103      	bne.n	121c4 <_sbrk_r+0x1c>
   121bc:	6823      	ldr	r3, [r4, #0]
   121be:	2b00      	cmp	r3, #0
   121c0:	d000      	beq.n	121c4 <_sbrk_r+0x1c>
   121c2:	602b      	str	r3, [r5, #0]
   121c4:	bd70      	pop	{r4, r5, r6, pc}
   121c6:	46c0      	nop			; (mov r8, r8)
   121c8:	20004804 	.word	0x20004804

000121cc <_raise_r>:
   121cc:	b570      	push	{r4, r5, r6, lr}
   121ce:	0004      	movs	r4, r0
   121d0:	1e0d      	subs	r5, r1, #0
   121d2:	2d1f      	cmp	r5, #31
   121d4:	d904      	bls.n	121e0 <_raise_r+0x14>
   121d6:	2316      	movs	r3, #22
   121d8:	6003      	str	r3, [r0, #0]
   121da:	2001      	movs	r0, #1
   121dc:	4240      	negs	r0, r0
   121de:	e01e      	b.n	1221e <_raise_r+0x52>
   121e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   121e2:	2a00      	cmp	r2, #0
   121e4:	d004      	beq.n	121f0 <_raise_r+0x24>
   121e6:	008b      	lsls	r3, r1, #2
   121e8:	18d2      	adds	r2, r2, r3
   121ea:	6813      	ldr	r3, [r2, #0]
   121ec:	2b00      	cmp	r3, #0
   121ee:	d108      	bne.n	12202 <_raise_r+0x36>
   121f0:	0020      	movs	r0, r4
   121f2:	f000 f831 	bl	12258 <_getpid_r>
   121f6:	002a      	movs	r2, r5
   121f8:	0001      	movs	r1, r0
   121fa:	0020      	movs	r0, r4
   121fc:	f000 f81a 	bl	12234 <_kill_r>
   12200:	e00d      	b.n	1221e <_raise_r+0x52>
   12202:	2000      	movs	r0, #0
   12204:	2b01      	cmp	r3, #1
   12206:	d00a      	beq.n	1221e <_raise_r+0x52>
   12208:	1c59      	adds	r1, r3, #1
   1220a:	d103      	bne.n	12214 <_raise_r+0x48>
   1220c:	3317      	adds	r3, #23
   1220e:	6023      	str	r3, [r4, #0]
   12210:	3001      	adds	r0, #1
   12212:	e004      	b.n	1221e <_raise_r+0x52>
   12214:	2400      	movs	r4, #0
   12216:	0028      	movs	r0, r5
   12218:	6014      	str	r4, [r2, #0]
   1221a:	4798      	blx	r3
   1221c:	0020      	movs	r0, r4
   1221e:	bd70      	pop	{r4, r5, r6, pc}

00012220 <raise>:
   12220:	b510      	push	{r4, lr}
   12222:	4b03      	ldr	r3, [pc, #12]	; (12230 <raise+0x10>)
   12224:	0001      	movs	r1, r0
   12226:	6818      	ldr	r0, [r3, #0]
   12228:	f7ff ffd0 	bl	121cc <_raise_r>
   1222c:	bd10      	pop	{r4, pc}
   1222e:	46c0      	nop			; (mov r8, r8)
   12230:	20000098 	.word	0x20000098

00012234 <_kill_r>:
   12234:	2300      	movs	r3, #0
   12236:	b570      	push	{r4, r5, r6, lr}
   12238:	4c06      	ldr	r4, [pc, #24]	; (12254 <_kill_r+0x20>)
   1223a:	0005      	movs	r5, r0
   1223c:	0008      	movs	r0, r1
   1223e:	0011      	movs	r1, r2
   12240:	6023      	str	r3, [r4, #0]
   12242:	f7f9 ff93 	bl	c16c <_kill>
   12246:	1c43      	adds	r3, r0, #1
   12248:	d103      	bne.n	12252 <_kill_r+0x1e>
   1224a:	6823      	ldr	r3, [r4, #0]
   1224c:	2b00      	cmp	r3, #0
   1224e:	d000      	beq.n	12252 <_kill_r+0x1e>
   12250:	602b      	str	r3, [r5, #0]
   12252:	bd70      	pop	{r4, r5, r6, pc}
   12254:	20004804 	.word	0x20004804

00012258 <_getpid_r>:
   12258:	b510      	push	{r4, lr}
   1225a:	f7f9 ff91 	bl	c180 <_getpid>
   1225e:	bd10      	pop	{r4, pc}

00012260 <__sread>:
   12260:	b570      	push	{r4, r5, r6, lr}
   12262:	000c      	movs	r4, r1
   12264:	250e      	movs	r5, #14
   12266:	5f49      	ldrsh	r1, [r1, r5]
   12268:	f000 f8b0 	bl	123cc <_read_r>
   1226c:	2800      	cmp	r0, #0
   1226e:	db03      	blt.n	12278 <__sread+0x18>
   12270:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12272:	181b      	adds	r3, r3, r0
   12274:	6563      	str	r3, [r4, #84]	; 0x54
   12276:	e003      	b.n	12280 <__sread+0x20>
   12278:	89a2      	ldrh	r2, [r4, #12]
   1227a:	4b02      	ldr	r3, [pc, #8]	; (12284 <__sread+0x24>)
   1227c:	4013      	ands	r3, r2
   1227e:	81a3      	strh	r3, [r4, #12]
   12280:	bd70      	pop	{r4, r5, r6, pc}
   12282:	46c0      	nop			; (mov r8, r8)
   12284:	ffffefff 	.word	0xffffefff

00012288 <__swrite>:
   12288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1228a:	001f      	movs	r7, r3
   1228c:	898b      	ldrh	r3, [r1, #12]
   1228e:	0005      	movs	r5, r0
   12290:	000c      	movs	r4, r1
   12292:	0016      	movs	r6, r2
   12294:	05db      	lsls	r3, r3, #23
   12296:	d505      	bpl.n	122a4 <__swrite+0x1c>
   12298:	230e      	movs	r3, #14
   1229a:	5ec9      	ldrsh	r1, [r1, r3]
   1229c:	2200      	movs	r2, #0
   1229e:	2302      	movs	r3, #2
   122a0:	f000 f874 	bl	1238c <_lseek_r>
   122a4:	89a2      	ldrh	r2, [r4, #12]
   122a6:	4b05      	ldr	r3, [pc, #20]	; (122bc <__swrite+0x34>)
   122a8:	0028      	movs	r0, r5
   122aa:	4013      	ands	r3, r2
   122ac:	81a3      	strh	r3, [r4, #12]
   122ae:	0032      	movs	r2, r6
   122b0:	230e      	movs	r3, #14
   122b2:	5ee1      	ldrsh	r1, [r4, r3]
   122b4:	003b      	movs	r3, r7
   122b6:	f000 f81f 	bl	122f8 <_write_r>
   122ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122bc:	ffffefff 	.word	0xffffefff

000122c0 <__sseek>:
   122c0:	b570      	push	{r4, r5, r6, lr}
   122c2:	000c      	movs	r4, r1
   122c4:	250e      	movs	r5, #14
   122c6:	5f49      	ldrsh	r1, [r1, r5]
   122c8:	f000 f860 	bl	1238c <_lseek_r>
   122cc:	89a3      	ldrh	r3, [r4, #12]
   122ce:	1c42      	adds	r2, r0, #1
   122d0:	d103      	bne.n	122da <__sseek+0x1a>
   122d2:	4a05      	ldr	r2, [pc, #20]	; (122e8 <__sseek+0x28>)
   122d4:	4013      	ands	r3, r2
   122d6:	81a3      	strh	r3, [r4, #12]
   122d8:	e004      	b.n	122e4 <__sseek+0x24>
   122da:	2280      	movs	r2, #128	; 0x80
   122dc:	0152      	lsls	r2, r2, #5
   122de:	4313      	orrs	r3, r2
   122e0:	81a3      	strh	r3, [r4, #12]
   122e2:	6560      	str	r0, [r4, #84]	; 0x54
   122e4:	bd70      	pop	{r4, r5, r6, pc}
   122e6:	46c0      	nop			; (mov r8, r8)
   122e8:	ffffefff 	.word	0xffffefff

000122ec <__sclose>:
   122ec:	b510      	push	{r4, lr}
   122ee:	230e      	movs	r3, #14
   122f0:	5ec9      	ldrsh	r1, [r1, r3]
   122f2:	f000 f815 	bl	12320 <_close_r>
   122f6:	bd10      	pop	{r4, pc}

000122f8 <_write_r>:
   122f8:	b570      	push	{r4, r5, r6, lr}
   122fa:	0005      	movs	r5, r0
   122fc:	0008      	movs	r0, r1
   122fe:	0011      	movs	r1, r2
   12300:	2200      	movs	r2, #0
   12302:	4c06      	ldr	r4, [pc, #24]	; (1231c <_write_r+0x24>)
   12304:	6022      	str	r2, [r4, #0]
   12306:	001a      	movs	r2, r3
   12308:	f7f9 fea4 	bl	c054 <_write>
   1230c:	1c43      	adds	r3, r0, #1
   1230e:	d103      	bne.n	12318 <_write_r+0x20>
   12310:	6823      	ldr	r3, [r4, #0]
   12312:	2b00      	cmp	r3, #0
   12314:	d000      	beq.n	12318 <_write_r+0x20>
   12316:	602b      	str	r3, [r5, #0]
   12318:	bd70      	pop	{r4, r5, r6, pc}
   1231a:	46c0      	nop			; (mov r8, r8)
   1231c:	20004804 	.word	0x20004804

00012320 <_close_r>:
   12320:	2300      	movs	r3, #0
   12322:	b570      	push	{r4, r5, r6, lr}
   12324:	4c06      	ldr	r4, [pc, #24]	; (12340 <_close_r+0x20>)
   12326:	0005      	movs	r5, r0
   12328:	0008      	movs	r0, r1
   1232a:	6023      	str	r3, [r4, #0]
   1232c:	f7f9 fee6 	bl	c0fc <_close>
   12330:	1c43      	adds	r3, r0, #1
   12332:	d103      	bne.n	1233c <_close_r+0x1c>
   12334:	6823      	ldr	r3, [r4, #0]
   12336:	2b00      	cmp	r3, #0
   12338:	d000      	beq.n	1233c <_close_r+0x1c>
   1233a:	602b      	str	r3, [r5, #0]
   1233c:	bd70      	pop	{r4, r5, r6, pc}
   1233e:	46c0      	nop			; (mov r8, r8)
   12340:	20004804 	.word	0x20004804

00012344 <_fstat_r>:
   12344:	2300      	movs	r3, #0
   12346:	b570      	push	{r4, r5, r6, lr}
   12348:	4c06      	ldr	r4, [pc, #24]	; (12364 <_fstat_r+0x20>)
   1234a:	0005      	movs	r5, r0
   1234c:	0008      	movs	r0, r1
   1234e:	0011      	movs	r1, r2
   12350:	6023      	str	r3, [r4, #0]
   12352:	f7f9 fedd 	bl	c110 <_fstat>
   12356:	1c43      	adds	r3, r0, #1
   12358:	d103      	bne.n	12362 <_fstat_r+0x1e>
   1235a:	6823      	ldr	r3, [r4, #0]
   1235c:	2b00      	cmp	r3, #0
   1235e:	d000      	beq.n	12362 <_fstat_r+0x1e>
   12360:	602b      	str	r3, [r5, #0]
   12362:	bd70      	pop	{r4, r5, r6, pc}
   12364:	20004804 	.word	0x20004804

00012368 <_isatty_r>:
   12368:	2300      	movs	r3, #0
   1236a:	b570      	push	{r4, r5, r6, lr}
   1236c:	4c06      	ldr	r4, [pc, #24]	; (12388 <_isatty_r+0x20>)
   1236e:	0005      	movs	r5, r0
   12370:	0008      	movs	r0, r1
   12372:	6023      	str	r3, [r4, #0]
   12374:	f7f9 feda 	bl	c12c <_isatty>
   12378:	1c43      	adds	r3, r0, #1
   1237a:	d103      	bne.n	12384 <_isatty_r+0x1c>
   1237c:	6823      	ldr	r3, [r4, #0]
   1237e:	2b00      	cmp	r3, #0
   12380:	d000      	beq.n	12384 <_isatty_r+0x1c>
   12382:	602b      	str	r3, [r5, #0]
   12384:	bd70      	pop	{r4, r5, r6, pc}
   12386:	46c0      	nop			; (mov r8, r8)
   12388:	20004804 	.word	0x20004804

0001238c <_lseek_r>:
   1238c:	b570      	push	{r4, r5, r6, lr}
   1238e:	0005      	movs	r5, r0
   12390:	0008      	movs	r0, r1
   12392:	0011      	movs	r1, r2
   12394:	2200      	movs	r2, #0
   12396:	4c06      	ldr	r4, [pc, #24]	; (123b0 <_lseek_r+0x24>)
   12398:	6022      	str	r2, [r4, #0]
   1239a:	001a      	movs	r2, r3
   1239c:	f7f9 fed0 	bl	c140 <_lseek>
   123a0:	1c43      	adds	r3, r0, #1
   123a2:	d103      	bne.n	123ac <_lseek_r+0x20>
   123a4:	6823      	ldr	r3, [r4, #0]
   123a6:	2b00      	cmp	r3, #0
   123a8:	d000      	beq.n	123ac <_lseek_r+0x20>
   123aa:	602b      	str	r3, [r5, #0]
   123ac:	bd70      	pop	{r4, r5, r6, pc}
   123ae:	46c0      	nop			; (mov r8, r8)
   123b0:	20004804 	.word	0x20004804

000123b4 <_malloc_usable_size_r>:
   123b4:	1f0b      	subs	r3, r1, #4
   123b6:	681a      	ldr	r2, [r3, #0]
   123b8:	1f10      	subs	r0, r2, #4
   123ba:	2a00      	cmp	r2, #0
   123bc:	da04      	bge.n	123c8 <_malloc_usable_size_r+0x14>
   123be:	1889      	adds	r1, r1, r2
   123c0:	3904      	subs	r1, #4
   123c2:	680b      	ldr	r3, [r1, #0]
   123c4:	18d0      	adds	r0, r2, r3
   123c6:	3804      	subs	r0, #4
   123c8:	4770      	bx	lr
	...

000123cc <_read_r>:
   123cc:	b570      	push	{r4, r5, r6, lr}
   123ce:	0005      	movs	r5, r0
   123d0:	0008      	movs	r0, r1
   123d2:	0011      	movs	r1, r2
   123d4:	2200      	movs	r2, #0
   123d6:	4c06      	ldr	r4, [pc, #24]	; (123f0 <_read_r+0x24>)
   123d8:	6022      	str	r2, [r4, #0]
   123da:	001a      	movs	r2, r3
   123dc:	f7f9 fe10 	bl	c000 <_read>
   123e0:	1c43      	adds	r3, r0, #1
   123e2:	d103      	bne.n	123ec <_read_r+0x20>
   123e4:	6823      	ldr	r3, [r4, #0]
   123e6:	2b00      	cmp	r3, #0
   123e8:	d000      	beq.n	123ec <_read_r+0x20>
   123ea:	602b      	str	r3, [r5, #0]
   123ec:	bd70      	pop	{r4, r5, r6, pc}
   123ee:	46c0      	nop			; (mov r8, r8)
   123f0:	20004804 	.word	0x20004804
   123f4:	42002c00 	.word	0x42002c00
   123f8:	42003000 	.word	0x42003000
   123fc:	42003400 	.word	0x42003400
   12400:	001c1c1b 	.word	0x001c1c1b
   12404:	10000800 	.word	0x10000800
   12408:	00002000 	.word	0x00002000

0001240c <num_to_seg>:
   1240c:	4f5b063f 077d6d66 00006f7f              ?.[Ofm}..o..

00012418 <display_handlers>:
   12418:	00000001 000008d1 00000004 00000961     ............a...
   12428:	00000008 000009f9 00000010 00000a5d     ............]...
   12438:	00000020 00000af9 00000040 00000b8d      .......@.......
   12448:	00000080 00000c05 00000002 00000929     ............)...
	...
   12460:	6f727245 55202172 6c62616e 6f742065     Error! Unable to
   12470:	61657220 75622064 6e6f7474 61747320      read button sta
   12480:	00737574                                tus.

00012484 <water_temp_LUT>:
   12484:	00c50000 00c80001 00ca0002 00cc0003     ................
   12494:	00ce0004 00d00005 00d20006 00d40007     ................
   124a4:	00d60008 00d90009 00db000a 00dd000b     ................
   124b4:	00e0000c 00e2000d 00e5000e 00e7000f     ................
   124c4:	00ea0010 00ed0011 00ef0012 00f20013     ................
   124d4:	00f50014 00f80015 00fb0016 00fe0017     ................
   124e4:	01010018 01040019 0108001a 010b001b     ................
   124f4:	010f001c 0112001d 0116001e 011a001f     ................
   12504:	011e0020 01220021 01260022 012a0023      ...!.".".&.#.*.
   12514:	012e0024 01330025 01380026 013d0027     $...%.3.&.8.'.=.
   12524:	01410028 01460029 014b002a 0151002b     (.A.).F.*.K.+.Q.
   12534:	0157002c 015c002d 0162002e 0169002f     ,.W.-.\...b./.i.
   12544:	016f0030 01760031 017c0032 01840033     0.o.1.v.2.|.3...
   12554:	018b0034 01930035 019b0036 01a30037     4...5...6...7...
   12564:	01ac0038 01b50039 01be003a 01c8003b     8...9...:...;...
   12574:	01d2003c 01dd003d 01e8003e 01f4003f     <...=...>...?...
   12584:	02010040 020e0041 02180042 02230043     @...A...B...C.#.
   12594:	022e0044 023a0045 02460046 02510047     D...E.:.F.F.G.Q.
   125a4:	025c0048 02690049 0275004a 0282004b     H.\.I.i.J.u.K...
   125b4:	0290004c 029e004d 02ad004e 02bc004f     L...M...N...O...
   125c4:	02cc0050 02d90051 02e60052 02f40053     P...Q...R...S...
   125d4:	03020054 03100055 03200056 03300057     T...U...V. .W.0.
   125e4:	03410058 03520059 0364005a 0372005b     X.A.Y.R.Z.d.[.r.
   125f4:	0381005c 0390005d 039f005e 03af005f     \...]...^..._...
   12604:	03c00060 03d10061 03e30062 03f80063     `...a...b...c...
   12614:	040a0064 041d0065 04320066 04470067     d...e...f.2.g.G.
   12624:	045d0068 6b736174 6568545f 00006d72     h.].task_Therm..
   12634:	6c696146 74206465 7263206f 65746165     Failed to create
   12644:	73617420 68545f6b 616d7265 6874206c      task_Thermal th
   12654:	64616572 00000021 6c696146 74206465     read!...Failed t
   12664:	7263206f 65746165 65687420 735f6d72     o create therm_s
   12674:	00216d65 6c696166 74206465 6e69206f     em!.failed to in
   12684:	61697469 657a696c 43545720 38303536     itialize WTC6508
   12694:	00000021 50504128 52452829 255b2952     !...(APP)(ERR)[%
   126a4:	255b5d73 00005d64 61766e69 6564696c     s][%d]..invalide
   126b4:	636f6920 6320746c 0000646d               ioclt cmd..

000126c0 <__FUNCTION__.14905>:
   126c0:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   126d0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   126e0:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
   126f0:	6b617720 74207075 63206568 00706968      wakup the chip.
   12700:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   12710:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   12720:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   12730:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   12740:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   12750:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   12760:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   12770:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
   12780:	6e692029 696c6176 72672064 2070756f     ) invalid group 
   12790:	00004449 66696828 6f682029 61207473     ID..(hif) host a
   127a0:	64207070 276e6469 65732074 58522074     pp didn't set RX
   127b0:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
   127c0:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   127d0:	61462029 2065736c 65746e69 70757272     ) False interrup
   127e0:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   127f0:	74206c69 6552206f 69206461 7265746e     il to Read inter
   12800:	74707572 67657220 00000000 66696828     rupt reg....(hif
   12810:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
   12820:	65687420 69686320 00000070 46494828      the chip...(HIF
   12830:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   12840:	746e6920 75727265 25207470 72742064      interrupt %d tr
   12850:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   12860:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   12870:	72612064 656d7567 0000746e 20505041     d argument..APP 
   12880:	75716552 65747365 69532064 6920657a     Requested Size i
   12890:	616c2073 72656772 61687420 6874206e     s larger than th
   128a0:	65722065 65766963 75622064 72656666     e recived buffer
   128b0:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
   128c0:	20505041 75716552 65747365 64412064     APP Requested Ad
   128d0:	73657264 65622073 646e6f79 65687420     dress beyond the
   128e0:	63657220 64657669 66756220 20726566      recived buffer 
   128f0:	72646461 20737365 20646e61 676e656c     address and leng
   12900:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
   12910:	00003e7c 00003e54 00003e4c 00003e64     |>..T>..L>..d>..
   12920:	00003e5c 00003e7c 00003e6c 00003e74     \>..|>..l>..t>..

00012930 <__FUNCTION__.12480>:
   12930:	5f666968 646e6573 00000000              hif_send....

0001293c <__FUNCTION__.12490>:
   1293c:	5f666968 00727369                       hif_isr.

00012944 <__FUNCTION__.12496>:
   12944:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00012954 <__FUNCTION__.12511>:
   12954:	5f666968 65636572 00657669              hif_receive.

00012960 <__FUNCTION__.12526>:
   12960:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12970:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   12980:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   12990:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   129a0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   129b0:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   129c0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   129d0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   129e0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   129f0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   12a00:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   12a10:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   12a20:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   12a30:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   12a40:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   12a50:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   12a60:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   12a70:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   12a80:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   12a90:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   12aa0:	2065626f 75716572 73747365 72657020     obe requests per
   12ab0:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   12ac0:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   12ad0:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
   12ae0:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   12af0:	00000a75 206e694d 76697264 76207265     u...Min driver v
   12b00:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   12b10:	72727543 69726420 20726576 3a726576     Curr driver ver:
   12b20:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
   12b30:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
   12b40:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
   12b50:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   12b60:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   12b70:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   12b80:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   12b90:	20706557 2079656b 65646e69 64252078     Wep key index %d
   12ba0:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   12bb0:	2079656b 676e656c 25206874 00000a64     key length %d...
   12bc0:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   12bd0:	656c2079 6874676e 00000000 65646e75     y length....unde
   12be0:	656e6966 65732064 79742063 00006570     fined sec type..
   12bf0:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   12c00:	6420746f 6e696665 00006465 7473694c     ot defined..List
   12c10:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   12c20:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
   12c30:	31312072 00000000 45574f50 41532052     r 11....POWER SA
   12c40:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   12c50:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   12c60:	66754220 20726566 65637865 64656465      Buffer exceeded
   12c70:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   12c80:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   12c90:	00000000                                ....

00012c94 <__FUNCTION__.12453>:
   12c94:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00012ca0 <__FUNCTION__.12477>:
   12ca0:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00012cb0 <__FUNCTION__.12505>:
   12cb0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   12cc0:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   12cd0:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   12ce0:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   12cf0:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   12d00:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   12d10:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   12d20:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   12d30:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   12d40:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   12d50:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   12d60:	0000002e 6c696166 74206465 6564206f     ....failed to de
   12d70:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   12d80:	68772072 20656c69 74697277 20676e69     r while writing 
   12d90:	00676572 6f727245 68772072 20656c69     reg.Error while 
   12da0:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   12db0:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   12dc0:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   12dd0:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   12de0:	6f742064 69727720 00006574              d to write..

00012dec <__FUNCTION__.12290>:
   12dec:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00012dfc <__FUNCTION__.12384>:
   12dfc:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   12e0c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12e1c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   12e2c:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   12e3c:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   12e4c:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   12e5c:	6e65206f 656c6261 746e6920 75727265     o enable interru
   12e6c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   12e7c:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   12e8c:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   12e9c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   12eac:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   12ebc:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   12ecc:	75622074 00000073                       t bus...

00012ed4 <__FUNCTION__.12371>:
   12ed4:	645f6d6e 695f7672 0074696e              nm_drv_init.

00012ee0 <__FUNCTION__.12378>:
   12ee0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00012ef0 <crc7_syndrome_table>:
   12ef0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   12f00:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   12f10:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   12f20:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   12f30:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   12f40:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   12f50:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   12f60:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   12f70:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   12f80:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   12f90:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   12fa0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   12fb0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   12fc0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   12fd0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   12fe0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   12ff0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   13000:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   13010:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   13020:	73756220 72726520 2e2e726f 0000002e      bus error......
   13030:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13040:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   13050:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   13060:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13070:	656c6961 61642064 72206174 6f707365     ailed data respo
   13080:	2065736e 64616572 7562202c 72652073     nse read, bus er
   13090:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   130a0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   130b0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   130c0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   130d0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   130e0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   130f0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   13100:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13110:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   13120:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   13130:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13140:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   13150:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   13160:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13170:	656c6961 61642064 62206174 6b636f6c     ailed data block
   13180:	69727720 202c6574 20737562 6f727265      write, bus erro
   13190:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   131a0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   131b0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   131c0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   131d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   131e0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   131f0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13200:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13210:	65722064 6e6f7073 202c6573 74697277     d response, writ
   13220:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   13230:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13240:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   13250:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   13260:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   13270:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   13280:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   13290:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   132a0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   132b0:	206b636f 61746164 69727720 2e2e6574     ock data write..
   132c0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   132d0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   132e0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   132f0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13300:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13310:	64616572 67657220 30252820 2e297838     read reg (%08x).
   13320:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13330:	656c6961 61642064 72206174 2e646165     ailed data read.
   13340:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13350:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   13360:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   13370:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13380:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   13390:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   133a0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   133b0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   133c0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   133d0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   133e0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   133f0:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   13400:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   13410:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   13420:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13430:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   13440:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   13450:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13460:	6e692064 6e726574 77206c61 65746972     d internal write
   13470:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   13480:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13490:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   134a0:	64692070 002e2e2e 00005bd8 00005bd8     p id.....[...[..
   134b0:	00005c68 00005b2c 00005b72 00005b94     h\..,[..r[...[..
   134c0:	00005c1a 00005c1a 00005cd4 00005b00     .\...\...\...[..
   134d0:	00005d2e 00005d2e 00005d2e 00005d2e     .]...]...]...]..
   134e0:	00005bb6                                .[..

000134e4 <__FUNCTION__.11755>:
   134e4:	5f697073 00646d63                       spi_cmd.

000134ec <__FUNCTION__.11763>:
   134ec:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000134f8 <__FUNCTION__.11779>:
   134f8:	5f697073 61746164 6165725f 00000064     spi_data_read...

00013508 <__FUNCTION__.11794>:
   13508:	5f697073 61746164 6972775f 00006574     spi_data_write..

00013518 <__FUNCTION__.11804>:
   13518:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00013528 <__FUNCTION__.11812>:
   13528:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00013538 <__FUNCTION__.11821>:
   13538:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013548 <__FUNCTION__.11829>:
   13548:	735f6d6e 725f6970 00646165              nm_spi_read.

00013554 <__FUNCTION__.11846>:
   13554:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   13564:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   13574:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   13584:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13594:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   135a4:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   135b4:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   135c4:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   135d4:	6b636f53 00007465 00000002 00000003     Socket..........
   135e4:	00000028 00000029 00000004 00000005     (...)...........
   135f4:	00000006 00000007 0000ffff 0000ffff     ................
   13604:	00000022 00000023 0000ffff 0000ffff     "...#...........
   13614:	0000ffff 0000ffff 00000008 00000009     ................
   13624:	0000000a 0000000b 0000812a 00008130     ........*...0...
   13634:	00008130 00008130 00008130 00008130     0...0...0...0...
   13644:	00008130 00008130 00008130 00008130     0...0...0...0...
   13654:	00008130 00008130 00008130 00008130     0...0...0...0...
   13664:	00008130 00008130 00008108 00008130     0...0.......0...
   13674:	00008130 00008130 00008130 00008130     0...0...0...0...
   13684:	00008130 00008130 00008130 00008130     0...0...0...0...
   13694:	00008130 00008130 00008130 00008130     0...0...0...0...
   136a4:	00008130 00008130 00008124 00008130     0...0...$...0...
   136b4:	00008130 00008130 00008130 00008130     0...0...0...0...
   136c4:	00008130 00008130 00008130 00008130     0...0...0...0...
   136d4:	00008130 00008130 00008130 00008130     0...0...0...0...
   136e4:	00008130 00008130 0000811e 000080c6     0...0...........
   136f4:	000080dc 000080f2 000080ac 42000800     ...............B
   13704:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   13714:	42001c00 0c0b0a09 00000e0d 0000affa     ...B............
   13724:	0000b072 0000b072 0000b018 0000b012     r...r...........
   13734:	0000b01e 0000b000 0000b024 0000b058     ........$...X...
   13744:	0000b33c 0000b38c 0000b38c 0000b388     <...............
   13754:	0000b32e 0000b34e 0000b31e 0000b360     ....N.......`...
   13764:	0000b372 0000b3da 0000b408 0000b408     r...............
   13774:	0000b404 0000b3d4 0000b3e0 0000b3ce     ................
   13784:	0000b3e6 0000b3ec                       ........

0001378c <_tcc_intflag>:
   1378c:	00000001 00000002 00000004 00000008     ................
   1379c:	00001000 00002000 00004000 00008000     ..... ...@......
   137ac:	00010000 00020000 00040000 00080000     ................
   137bc:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   137cc:	51726d54 00000000 0000e2a4 0000e2a4     TmrQ............
   137dc:	0000e2a4 0000e332 0000e2fc 0000e326     ....2.......&...
   137ec:	0000e2a4 0000e2a4 0000e332 0000e2fc     ........2.......

000137fc <PubNubPublishKey>:
   137fc:	6f6d6564 00000000                       demo....

00013804 <PubNubSubscribeKey>:
   13804:	6f6d6564 00000000 6b636f73 725f7465     demo....socket_r
   13814:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
   13824:	766c6f73 77206465 20687469 25205049     solved with IP %
   13834:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
   13844:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
   13854:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
   13864:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
   13874:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
   13884:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
   13894:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
   138a4:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
   138b4:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
   138c4:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
   138d4:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
   138e4:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
   138f4:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
   13904:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
   13914:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
   13924:	00000030 00000031 6564227b 65636976     0...1...{"device
   13934:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
   13944:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
   13954:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
   13964:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
   13974:	7570203a 73696c62 76652068 3a746e65     : publish event:
   13984:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
   13994:	72637362 20656269 6e657665 50202c74     bscribe event, P
   139a4:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
   139b4:	6572203a 76696563 4c206465 63204445     : received LED c
   139c4:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
   139d4:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
   139e4:	6e69616d 6572203a 76696563 6d206465     main: received m
   139f4:	61737365 203a6567 0a0d7325 00000000     essage: %s......
   13a04:	6e69616d 7573203a 72637362 20656269     main: subscribe 
   13a14:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
   13a24:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
   13a34:	3a21776f 0a732520 0000000d 6c6c614d     ow!: %s.....Mall
   13a44:	6620636f 656c6961 0d0a2164 00000000     oc failed!......
   13a54:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   13a64:	2074696e 6c6c6163 72726520 0d21726f     nit call error!.
   13a74:	00000000 6e69616d 414d203a 64612043     ....main: MAC ad
   13a84:	73657264 75662073 62206573 68207469     dress fuse bit h
   13a94:	6e207361 6220746f 206e6565 666e6f63     as not been conf
   13aa4:	72756769 0d216465 00000000 6e69616d     igured!.....main
   13ab4:	7355203a 326d2065 69775f6d 735f6966     : Use m2m_wifi_s
   13ac4:	6d5f7465 615f6361 65726464 29287373     et_mac_address()
   13ad4:	49504120 206f7420 20746573 2043414d      API to set MAC 
   13ae4:	72646461 20737365 20616976 74666f73     address via soft
   13af4:	65726177 00000d2e 0000000d 6e69616d     ware........main
   13b04:	7550203a 62754e62 6e6f6320 75676966     : PubNub configu
   13b14:	20646572 68746977 6c6f6620 69776f6c     red with followi
   13b24:	7320676e 69747465 3a73676e 0000000d     ng settings:....
   13b34:	6e69616d 2d20203a 62755020 6873696c     main:  - Publish
   13b44:	79656b20 2522203a 202c2273 73627553      key: "%s", Subs
   13b54:	62697263 656b2065 22203a79 2c227325     cribe key: "%s",
   13b64:	61684320 6c656e6e 2522203a 0d2e2273      Channel: "%s"..
   13b74:	000a0d0a 6e69616d 6957203a 2069462d     ....main: Wi-Fi 
   13b84:	6e6e6f63 69746365 7420676e 5041206f     connecting to AP
   13b94:	69737520 6820676e 63647261 6465646f      using hardcoded
   13ba4:	65726320 746e6564 736c6169 0d2e2e2e      credentials....
   13bb4:	00000000 6b736174 0073335f 6b736174     ....task_3s.task
   13bc4:	0073315f 6b736174 4833335f 0000007a     _1s.task_33Hz...
   13bd4:	6b736174 7a75425f 0072657a 73627570     task_Buzzer.pubs
   13be4:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
   13bf4:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
   13c04:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
   13c14:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
   13c24:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
   13c34:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   13c44:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
   13c54:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
   13c64:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
   13c74:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
   13c84:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
   13c94:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
   13ca4:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
   13cb4:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
   13cc4:	6c696166 74206465 7263206f 65746165     failed to create
   13cd4:	50435420 696c6320 20746e65 6b636f73      TCP client sock
   13ce4:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
   13cf4:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
   13d04:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
   13d14:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
   13d24:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
   13d34:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
   13d44:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
   13d54:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
   13d64:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
   13d74:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
   13d84:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   13d94:	00000000 64697575 0000003d 00000000     ....uuid=.......
   13da4:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
   13db4:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
   13dc4:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
   13dd4:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
   13de4:	00732546 00312e30                       F%s.0.1.

00013dec <__func__.12046>:
   13dec:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
   13dfc:	7463656e 00000000                       nect....

00013e04 <__func__.12124>:
   13e04:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

00013e14 <__func__.12130>:
   13e14:	6e627570 695f6275 0074696e              pubnub_init.

00013e20 <__func__.12136>:
   13e20:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

00013e30 <__func__.12147>:
   13e30:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
   13e40:	00000000                                ....

00013e44 <__func__.12151>:
   13e44:	6e627570 675f6275 00007465 000107d8     pubnub_get......
   13e54:	00010698 00010698 00010696 000107b0     ................
   13e64:	000107b0 000107a2 00010696 000107b0     ................
   13e74:	000107a2 000107b0 00010696 000107b8     ................
   13e84:	000107b8 000107b8 000109b8 7566202c     ............, fu
   13e94:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   13ea4:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   13eb4:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   13ec4:	73256425 000a7325 00000043              %d%s%s..C...

00013ed0 <_global_impure_ptr>:
   13ed0:	20000038 2b302d23 6c680020 6665004c     8.. #-0+ .hlL.ef
   13ee0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   13ef0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   13f00:	64636261 00006665                                abcdef.

00013f07 <_ctype_>:
   13f07:	20202000 20202020 28282020 20282828     .         ((((( 
   13f17:	20202020 20202020 20202020 20202020                     
   13f27:	10108820 10101010 10101010 10101010      ...............
   13f37:	04040410 04040404 10040404 10101010     ................
   13f47:	41411010 41414141 01010101 01010101     ..AAAAAA........
   13f57:	01010101 01010101 01010101 10101010     ................
   13f67:	42421010 42424242 02020202 02020202     ..BBBBBB........
   13f77:	02020202 02020202 02020202 10101010     ................
   13f87:	00000020 00000000 00000000 00000000      ...............
	...

00014008 <__sf_fake_stdin>:
	...

00014028 <__sf_fake_stdout>:
	...

00014048 <__sf_fake_stderr>:
	...

00014068 <_init>:
   14068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1406a:	46c0      	nop			; (mov r8, r8)
   1406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1406e:	bc08      	pop	{r3}
   14070:	469e      	mov	lr, r3
   14072:	4770      	bx	lr

00014074 <__init_array_start>:
   14074:	000000dd 	.word	0x000000dd

00014078 <_fini>:
   14078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1407a:	46c0      	nop			; (mov r8, r8)
   1407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1407e:	bc08      	pop	{r3}
   14080:	469e      	mov	lr, r3
   14082:	4770      	bx	lr

00014084 <__fini_array_start>:
   14084:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <analog_channels>:
2000000c:	0012 0000 0007 0000                         ........

20000014 <egstrNmBusCapabilities>:
20000014:	0100 0000                                   ....

20000018 <clk_status_reg_adr>:
20000018:	000f 0000                                   ....

2000001c <g_interrupt_enabled>:
2000001c:	0001 0000                                   ....

20000020 <phantomISR>:
20000020:	270f 0000                                   .'..

20000024 <uxCriticalNesting>:
20000024:	aaaa aaaa                                   ....

20000028 <PubNubChannel>:
20000028:	4957 434e 3531 3030 305f 3a30 3030 0000     WINC1500_00:00..

20000038 <impure_data>:
20000038:	0000 0000 4008 0001 4028 0001 4048 0001     .....@..(@..H@..
	...
20000058:	3ecc 0001 0000 0000 0000 0000 0000 0000     .>..............
	...

20000098 <_impure_ptr>:
20000098:	0038 2000                                   8.. 

2000009c <__ctype_ptr__>:
2000009c:	3f07 0001                                   .?..
