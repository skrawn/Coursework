
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000142d0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000142d0  000142d0  000242d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000000a0  20000000  000142d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00004760  200000a0  00014378  000300a0  2**2
                  ALLOC
  4 .stack        00002000  20004800  00018ad8  000300a0  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000588c0  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000076b2  00000000  00000000  000889e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009d2a  00000000  00000000  00090093  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001bf8  00000000  00000000  00099dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000019a0  00000000  00000000  0009b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00026f5a  00000000  00000000  0009d355  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00026e10  00000000  00000000  000c42af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c866  00000000  00000000  000eb0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006cac  00000000  00000000  00187928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006800 	.word	0x20006800
       4:	0000cd3d 	.word	0x0000cd3d
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	0000ce35 	.word	0x0000ce35
       c:	0000fa15 	.word	0x0000fa15
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000d19d 	.word	0x0000d19d
	...
      38:	0000d2c1 	.word	0x0000d2c1
      3c:	0000d309 	.word	0x0000d309
      40:	0000ce35 	.word	0x0000ce35

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	0000ce35 	.word	0x0000ce35
      48:	0000ce35 	.word	0x0000ce35
      4c:	00009d49 	.word	0x00009d49
      50:	000097d5 	.word	0x000097d5
      54:	0000ce35 	.word	0x0000ce35
      58:	0000ce35 	.word	0x0000ce35
		if (time.hour == 0) {
      5c:	0000ce35 	.word	0x0000ce35
      60:	0000ce35 	.word	0x0000ce35
			time.hour = 12;
      64:	0000a421 	.word	0x0000a421
      68:	0000a439 	.word	0x0000a439
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	0000a451 	.word	0x0000a451
      70:	0000a469 	.word	0x0000a469
      74:	0000a481 	.word	0x0000a481
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	0000a499 	.word	0x0000a499
      7c:	0000cc85 	.word	0x0000cc85
      80:	0000cc99 	.word	0x0000cc99
      84:	0000ccad 	.word	0x0000ccad
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00000f5d 	.word	0x00000f5d
      8c:	00000f71 	.word	0x00000f71
      90:	00000f85 	.word	0x00000f85
	...
      9c:	00009601 	.word	0x00009601
      a0:	0000ce35 	.word	0x0000ce35
      a4:	0000ce35 	.word	0x0000ce35
			alarm.time.hour = alarm.time.hour % 12;
      a8:	0000ce35 	.word	0x0000ce35
      ac:	0000ce35 	.word	0x0000ce35
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	200000a0 	.word	0x200000a0
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	000142d8 	.word	0x000142d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a4 	.word	0x200000a4
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	000142d8 	.word	0x000142d8
     10c:	000142d8 	.word	0x000142d8
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
			time.hour = time.hour + 12;
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <jsmn_alloc_token>:

/**
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
     120:	b580      	push	{r7, lr}
     122:	b086      	sub	sp, #24
     124:	af00      	add	r7, sp, #0
     126:	60f8      	str	r0, [r7, #12]
     128:	60b9      	str	r1, [r7, #8]
     12a:	607a      	str	r2, [r7, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
     12c:	68fb      	ldr	r3, [r7, #12]
     12e:	685a      	ldr	r2, [r3, #4]
     130:	687b      	ldr	r3, [r7, #4]
     132:	429a      	cmp	r2, r3
     134:	d301      	bcc.n	13a <jsmn_alloc_token+0x1a>
		return NULL;
     136:	2300      	movs	r3, #0
     138:	e014      	b.n	164 <jsmn_alloc_token+0x44>
	}
	tok = &tokens[parser->toknext++];
     13a:	68fb      	ldr	r3, [r7, #12]
     13c:	685b      	ldr	r3, [r3, #4]
     13e:	1c59      	adds	r1, r3, #1
     140:	68fa      	ldr	r2, [r7, #12]
     142:	6051      	str	r1, [r2, #4]
     144:	011b      	lsls	r3, r3, #4
     146:	68ba      	ldr	r2, [r7, #8]
     148:	18d3      	adds	r3, r2, r3
     14a:	617b      	str	r3, [r7, #20]
	tok->start = tok->end = -1;
     14c:	697b      	ldr	r3, [r7, #20]
     14e:	2201      	movs	r2, #1
     150:	4252      	negs	r2, r2
     152:	609a      	str	r2, [r3, #8]
     154:	697b      	ldr	r3, [r7, #20]
     156:	689a      	ldr	r2, [r3, #8]
     158:	697b      	ldr	r3, [r7, #20]
     15a:	605a      	str	r2, [r3, #4]
	tok->size = 0;
     15c:	697b      	ldr	r3, [r7, #20]
     15e:	2200      	movs	r2, #0
     160:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
     162:	697b      	ldr	r3, [r7, #20]
}
     164:	0018      	movs	r0, r3
     166:	46bd      	mov	sp, r7
     168:	b006      	add	sp, #24
     16a:	bd80      	pop	{r7, pc}

0000016c <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
     16c:	b580      	push	{r7, lr}
     16e:	b084      	sub	sp, #16
     170:	af00      	add	r7, sp, #0
     172:	60f8      	str	r0, [r7, #12]
     174:	607a      	str	r2, [r7, #4]
     176:	603b      	str	r3, [r7, #0]
     178:	230b      	movs	r3, #11
     17a:	18fb      	adds	r3, r7, r3
     17c:	1c0a      	adds	r2, r1, #0
     17e:	701a      	strb	r2, [r3, #0]
	token->type = type;
     180:	68fb      	ldr	r3, [r7, #12]
     182:	220b      	movs	r2, #11
     184:	18ba      	adds	r2, r7, r2
     186:	7812      	ldrb	r2, [r2, #0]
     188:	701a      	strb	r2, [r3, #0]
	token->start = start;
     18a:	68fb      	ldr	r3, [r7, #12]
     18c:	687a      	ldr	r2, [r7, #4]
     18e:	605a      	str	r2, [r3, #4]
	token->end = end;
     190:	68fb      	ldr	r3, [r7, #12]
     192:	683a      	ldr	r2, [r7, #0]
     194:	609a      	str	r2, [r3, #8]
	token->size = 0;
     196:	68fb      	ldr	r3, [r7, #12]
     198:	2200      	movs	r2, #0
     19a:	60da      	str	r2, [r3, #12]
}
     19c:	46c0      	nop			; (mov r8, r8)
     19e:	46bd      	mov	sp, r7
     1a0:	b004      	add	sp, #16
     1a2:	bd80      	pop	{r7, pc}

000001a4 <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
     1a4:	b590      	push	{r4, r7, lr}
     1a6:	b087      	sub	sp, #28
     1a8:	af00      	add	r7, sp, #0
     1aa:	60f8      	str	r0, [r7, #12]
     1ac:	60b9      	str	r1, [r7, #8]
     1ae:	607a      	str	r2, [r7, #4]
     1b0:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;
	int start;

	start = parser->pos;
     1b2:	68fb      	ldr	r3, [r7, #12]
     1b4:	681b      	ldr	r3, [r3, #0]
     1b6:	617b      	str	r3, [r7, #20]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     1b8:	e031      	b.n	21e <jsmn_parse_primitive+0x7a>
		switch (js[parser->pos]) {
     1ba:	68fb      	ldr	r3, [r7, #12]
     1bc:	681b      	ldr	r3, [r3, #0]
     1be:	68ba      	ldr	r2, [r7, #8]
     1c0:	18d3      	adds	r3, r2, r3
     1c2:	781b      	ldrb	r3, [r3, #0]
     1c4:	2b20      	cmp	r3, #32
     1c6:	d037      	beq.n	238 <jsmn_parse_primitive+0x94>
     1c8:	dc06      	bgt.n	1d8 <jsmn_parse_primitive+0x34>
     1ca:	2b09      	cmp	r3, #9
     1cc:	db0e      	blt.n	1ec <jsmn_parse_primitive+0x48>
     1ce:	2b0a      	cmp	r3, #10
     1d0:	dd32      	ble.n	238 <jsmn_parse_primitive+0x94>
     1d2:	2b0d      	cmp	r3, #13
     1d4:	d030      	beq.n	238 <jsmn_parse_primitive+0x94>
     1d6:	e009      	b.n	1ec <jsmn_parse_primitive+0x48>
     1d8:	2b3a      	cmp	r3, #58	; 0x3a
     1da:	d02d      	beq.n	238 <jsmn_parse_primitive+0x94>
     1dc:	dc02      	bgt.n	1e4 <jsmn_parse_primitive+0x40>
     1de:	2b2c      	cmp	r3, #44	; 0x2c
     1e0:	d02a      	beq.n	238 <jsmn_parse_primitive+0x94>
     1e2:	e003      	b.n	1ec <jsmn_parse_primitive+0x48>
     1e4:	2b5d      	cmp	r3, #93	; 0x5d
     1e6:	d027      	beq.n	238 <jsmn_parse_primitive+0x94>
     1e8:	2b7d      	cmp	r3, #125	; 0x7d
     1ea:	d025      	beq.n	238 <jsmn_parse_primitive+0x94>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
     1ec:	68fb      	ldr	r3, [r7, #12]
     1ee:	681b      	ldr	r3, [r3, #0]
     1f0:	68ba      	ldr	r2, [r7, #8]
     1f2:	18d3      	adds	r3, r2, r3
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b1f      	cmp	r3, #31
     1f8:	d906      	bls.n	208 <jsmn_parse_primitive+0x64>
     1fa:	68fb      	ldr	r3, [r7, #12]
     1fc:	681b      	ldr	r3, [r3, #0]
     1fe:	68ba      	ldr	r2, [r7, #8]
     200:	18d3      	adds	r3, r2, r3
     202:	781b      	ldrb	r3, [r3, #0]
     204:	2b7e      	cmp	r3, #126	; 0x7e
     206:	d905      	bls.n	214 <jsmn_parse_primitive+0x70>
			parser->pos = start;
     208:	697a      	ldr	r2, [r7, #20]
     20a:	68fb      	ldr	r3, [r7, #12]
     20c:	601a      	str	r2, [r3, #0]
			return JSMN_ERROR_INVAL;
     20e:	2302      	movs	r3, #2
     210:	425b      	negs	r3, r3
     212:	e03a      	b.n	28a <jsmn_parse_primitive+0xe6>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     214:	68fb      	ldr	r3, [r7, #12]
     216:	681b      	ldr	r3, [r3, #0]
     218:	1c5a      	adds	r2, r3, #1
     21a:	68fb      	ldr	r3, [r7, #12]
     21c:	601a      	str	r2, [r3, #0]
     21e:	68fb      	ldr	r3, [r7, #12]
     220:	681a      	ldr	r2, [r3, #0]
     222:	687b      	ldr	r3, [r7, #4]
     224:	429a      	cmp	r2, r3
     226:	d208      	bcs.n	23a <jsmn_parse_primitive+0x96>
     228:	68fb      	ldr	r3, [r7, #12]
     22a:	681b      	ldr	r3, [r3, #0]
     22c:	68ba      	ldr	r2, [r7, #8]
     22e:	18d3      	adds	r3, r2, r3
     230:	781b      	ldrb	r3, [r3, #0]
     232:	2b00      	cmp	r3, #0
     234:	d1c1      	bne.n	1ba <jsmn_parse_primitive+0x16>
     236:	e000      	b.n	23a <jsmn_parse_primitive+0x96>
			/* In strict mode primitive must be followed by "," or "}" or "]" */
			case ':':
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
     238:	46c0      	nop			; (mov r8, r8)
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
     23a:	683b      	ldr	r3, [r7, #0]
     23c:	2b00      	cmp	r3, #0
     23e:	d106      	bne.n	24e <jsmn_parse_primitive+0xaa>
		parser->pos--;
     240:	68fb      	ldr	r3, [r7, #12]
     242:	681b      	ldr	r3, [r3, #0]
     244:	1e5a      	subs	r2, r3, #1
     246:	68fb      	ldr	r3, [r7, #12]
     248:	601a      	str	r2, [r3, #0]
		return 0;
     24a:	2300      	movs	r3, #0
     24c:	e01d      	b.n	28a <jsmn_parse_primitive+0xe6>
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
     24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
     250:	6839      	ldr	r1, [r7, #0]
     252:	68fb      	ldr	r3, [r7, #12]
     254:	0018      	movs	r0, r3
     256:	4b0f      	ldr	r3, [pc, #60]	; (294 <jsmn_parse_primitive+0xf0>)
     258:	4798      	blx	r3
     25a:	0003      	movs	r3, r0
     25c:	613b      	str	r3, [r7, #16]
	if (token == NULL) {
     25e:	693b      	ldr	r3, [r7, #16]
     260:	2b00      	cmp	r3, #0
     262:	d105      	bne.n	270 <jsmn_parse_primitive+0xcc>
		parser->pos = start;
     264:	697a      	ldr	r2, [r7, #20]
     266:	68fb      	ldr	r3, [r7, #12]
     268:	601a      	str	r2, [r3, #0]
		return JSMN_ERROR_NOMEM;
     26a:	2301      	movs	r3, #1
     26c:	425b      	negs	r3, r3
     26e:	e00c      	b.n	28a <jsmn_parse_primitive+0xe6>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
     270:	68fb      	ldr	r3, [r7, #12]
     272:	681b      	ldr	r3, [r3, #0]
     274:	697a      	ldr	r2, [r7, #20]
     276:	6938      	ldr	r0, [r7, #16]
     278:	2104      	movs	r1, #4
     27a:	4c07      	ldr	r4, [pc, #28]	; (298 <jsmn_parse_primitive+0xf4>)
     27c:	47a0      	blx	r4
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
     27e:	68fb      	ldr	r3, [r7, #12]
     280:	681b      	ldr	r3, [r3, #0]
     282:	1e5a      	subs	r2, r3, #1
     284:	68fb      	ldr	r3, [r7, #12]
     286:	601a      	str	r2, [r3, #0]
	return 0;
     288:	2300      	movs	r3, #0
}
     28a:	0018      	movs	r0, r3
     28c:	46bd      	mov	sp, r7
     28e:	b007      	add	sp, #28
     290:	bd90      	pop	{r4, r7, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	00000121 	.word	0x00000121
     298:	0000016d 	.word	0x0000016d

0000029c <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
     29c:	b590      	push	{r4, r7, lr}
     29e:	b089      	sub	sp, #36	; 0x24
     2a0:	af00      	add	r7, sp, #0
     2a2:	60f8      	str	r0, [r7, #12]
     2a4:	60b9      	str	r1, [r7, #8]
     2a6:	607a      	str	r2, [r7, #4]
     2a8:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;

	int start = parser->pos;
     2aa:	68fb      	ldr	r3, [r7, #12]
     2ac:	681b      	ldr	r3, [r3, #0]
     2ae:	61bb      	str	r3, [r7, #24]

	parser->pos++;
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	681b      	ldr	r3, [r3, #0]
     2b4:	1c5a      	adds	r2, r3, #1
     2b6:	68fb      	ldr	r3, [r7, #12]
     2b8:	601a      	str	r2, [r3, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     2ba:	e0ac      	b.n	416 <jsmn_parse_string+0x17a>
		char c = js[parser->pos];
     2bc:	68fb      	ldr	r3, [r7, #12]
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	68ba      	ldr	r2, [r7, #8]
     2c2:	18d2      	adds	r2, r2, r3
     2c4:	2317      	movs	r3, #23
     2c6:	18fb      	adds	r3, r7, r3
     2c8:	7812      	ldrb	r2, [r2, #0]
     2ca:	701a      	strb	r2, [r3, #0]

		/* Quote: end of string */
		if (c == '\"') {
     2cc:	2317      	movs	r3, #23
     2ce:	18fb      	adds	r3, r7, r3
     2d0:	781b      	ldrb	r3, [r3, #0]
     2d2:	2b22      	cmp	r3, #34	; 0x22
     2d4:	d11f      	bne.n	316 <jsmn_parse_string+0x7a>
			if (tokens == NULL) {
     2d6:	683b      	ldr	r3, [r7, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d101      	bne.n	2e0 <jsmn_parse_string+0x44>
				return 0;
     2dc:	2300      	movs	r3, #0
     2de:	e0ac      	b.n	43a <jsmn_parse_string+0x19e>
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
     2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     2e2:	6839      	ldr	r1, [r7, #0]
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	0018      	movs	r0, r3
     2e8:	4b56      	ldr	r3, [pc, #344]	; (444 <jsmn_parse_string+0x1a8>)
     2ea:	4798      	blx	r3
     2ec:	0003      	movs	r3, r0
     2ee:	613b      	str	r3, [r7, #16]
			if (token == NULL) {
     2f0:	693b      	ldr	r3, [r7, #16]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d105      	bne.n	302 <jsmn_parse_string+0x66>
				parser->pos = start;
     2f6:	69ba      	ldr	r2, [r7, #24]
     2f8:	68fb      	ldr	r3, [r7, #12]
     2fa:	601a      	str	r2, [r3, #0]
				return JSMN_ERROR_NOMEM;
     2fc:	2301      	movs	r3, #1
     2fe:	425b      	negs	r3, r3
     300:	e09b      	b.n	43a <jsmn_parse_string+0x19e>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
     302:	69bb      	ldr	r3, [r7, #24]
     304:	1c5a      	adds	r2, r3, #1
     306:	68fb      	ldr	r3, [r7, #12]
     308:	681b      	ldr	r3, [r3, #0]
     30a:	6938      	ldr	r0, [r7, #16]
     30c:	2103      	movs	r1, #3
     30e:	4c4e      	ldr	r4, [pc, #312]	; (448 <jsmn_parse_string+0x1ac>)
     310:	47a0      	blx	r4
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
     312:	2300      	movs	r3, #0
     314:	e091      	b.n	43a <jsmn_parse_string+0x19e>
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
     316:	2317      	movs	r3, #23
     318:	18fb      	adds	r3, r7, r3
     31a:	781b      	ldrb	r3, [r3, #0]
     31c:	2b5c      	cmp	r3, #92	; 0x5c
     31e:	d000      	beq.n	322 <jsmn_parse_string+0x86>
     320:	e074      	b.n	40c <jsmn_parse_string+0x170>
     322:	68fb      	ldr	r3, [r7, #12]
     324:	681b      	ldr	r3, [r3, #0]
     326:	1c5a      	adds	r2, r3, #1
     328:	687b      	ldr	r3, [r7, #4]
     32a:	429a      	cmp	r2, r3
     32c:	d300      	bcc.n	330 <jsmn_parse_string+0x94>
     32e:	e06d      	b.n	40c <jsmn_parse_string+0x170>
			int i;
			parser->pos++;
     330:	68fb      	ldr	r3, [r7, #12]
     332:	681b      	ldr	r3, [r3, #0]
     334:	1c5a      	adds	r2, r3, #1
     336:	68fb      	ldr	r3, [r7, #12]
     338:	601a      	str	r2, [r3, #0]
			switch (js[parser->pos]) {
     33a:	68fb      	ldr	r3, [r7, #12]
     33c:	681b      	ldr	r3, [r3, #0]
     33e:	68ba      	ldr	r2, [r7, #8]
     340:	18d3      	adds	r3, r2, r3
     342:	781b      	ldrb	r3, [r3, #0]
     344:	3b22      	subs	r3, #34	; 0x22
     346:	2b53      	cmp	r3, #83	; 0x53
     348:	d859      	bhi.n	3fe <jsmn_parse_string+0x162>
     34a:	009a      	lsls	r2, r3, #2
     34c:	4b3f      	ldr	r3, [pc, #252]	; (44c <jsmn_parse_string+0x1b0>)
     34e:	18d3      	adds	r3, r2, r3
     350:	681b      	ldr	r3, [r3, #0]
     352:	469f      	mov	pc, r3
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
     354:	68fb      	ldr	r3, [r7, #12]
     356:	681b      	ldr	r3, [r3, #0]
     358:	1c5a      	adds	r2, r3, #1
     35a:	68fb      	ldr	r3, [r7, #12]
     35c:	601a      	str	r2, [r3, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
     35e:	2300      	movs	r3, #0
     360:	61fb      	str	r3, [r7, #28]
     362:	e037      	b.n	3d4 <jsmn_parse_string+0x138>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
     364:	68fb      	ldr	r3, [r7, #12]
     366:	681b      	ldr	r3, [r3, #0]
     368:	68ba      	ldr	r2, [r7, #8]
     36a:	18d3      	adds	r3, r2, r3
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b2f      	cmp	r3, #47	; 0x2f
     370:	d906      	bls.n	380 <jsmn_parse_string+0xe4>
     372:	68fb      	ldr	r3, [r7, #12]
     374:	681b      	ldr	r3, [r3, #0]
     376:	68ba      	ldr	r2, [r7, #8]
     378:	18d3      	adds	r3, r2, r3
     37a:	781b      	ldrb	r3, [r3, #0]
     37c:	2b39      	cmp	r3, #57	; 0x39
     37e:	d921      	bls.n	3c4 <jsmn_parse_string+0x128>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
     380:	68fb      	ldr	r3, [r7, #12]
     382:	681b      	ldr	r3, [r3, #0]
     384:	68ba      	ldr	r2, [r7, #8]
     386:	18d3      	adds	r3, r2, r3
     388:	781b      	ldrb	r3, [r3, #0]
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
     38a:	2b40      	cmp	r3, #64	; 0x40
     38c:	d906      	bls.n	39c <jsmn_parse_string+0x100>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
     38e:	68fb      	ldr	r3, [r7, #12]
     390:	681b      	ldr	r3, [r3, #0]
     392:	68ba      	ldr	r2, [r7, #8]
     394:	18d3      	adds	r3, r2, r3
     396:	781b      	ldrb	r3, [r3, #0]
     398:	2b46      	cmp	r3, #70	; 0x46
     39a:	d913      	bls.n	3c4 <jsmn_parse_string+0x128>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
     39c:	68fb      	ldr	r3, [r7, #12]
     39e:	681b      	ldr	r3, [r3, #0]
     3a0:	68ba      	ldr	r2, [r7, #8]
     3a2:	18d3      	adds	r3, r2, r3
     3a4:	781b      	ldrb	r3, [r3, #0]
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
     3a6:	2b60      	cmp	r3, #96	; 0x60
     3a8:	d906      	bls.n	3b8 <jsmn_parse_string+0x11c>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
     3aa:	68fb      	ldr	r3, [r7, #12]
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	68ba      	ldr	r2, [r7, #8]
     3b0:	18d3      	adds	r3, r2, r3
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b66      	cmp	r3, #102	; 0x66
     3b6:	d905      	bls.n	3c4 <jsmn_parse_string+0x128>
							parser->pos = start;
     3b8:	69ba      	ldr	r2, [r7, #24]
     3ba:	68fb      	ldr	r3, [r7, #12]
     3bc:	601a      	str	r2, [r3, #0]
							return JSMN_ERROR_INVAL;
     3be:	2302      	movs	r3, #2
     3c0:	425b      	negs	r3, r3
     3c2:	e03a      	b.n	43a <jsmn_parse_string+0x19e>
						}
						parser->pos++;
     3c4:	68fb      	ldr	r3, [r7, #12]
     3c6:	681b      	ldr	r3, [r3, #0]
     3c8:	1c5a      	adds	r2, r3, #1
     3ca:	68fb      	ldr	r3, [r7, #12]
     3cc:	601a      	str	r2, [r3, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
     3ce:	69fb      	ldr	r3, [r7, #28]
     3d0:	3301      	adds	r3, #1
     3d2:	61fb      	str	r3, [r7, #28]
     3d4:	69fb      	ldr	r3, [r7, #28]
     3d6:	2b03      	cmp	r3, #3
     3d8:	dc0b      	bgt.n	3f2 <jsmn_parse_string+0x156>
     3da:	68fb      	ldr	r3, [r7, #12]
     3dc:	681a      	ldr	r2, [r3, #0]
     3de:	687b      	ldr	r3, [r7, #4]
     3e0:	429a      	cmp	r2, r3
     3e2:	d206      	bcs.n	3f2 <jsmn_parse_string+0x156>
     3e4:	68fb      	ldr	r3, [r7, #12]
     3e6:	681b      	ldr	r3, [r3, #0]
     3e8:	68ba      	ldr	r2, [r7, #8]
     3ea:	18d3      	adds	r3, r2, r3
     3ec:	781b      	ldrb	r3, [r3, #0]
     3ee:	2b00      	cmp	r3, #0
     3f0:	d1b8      	bne.n	364 <jsmn_parse_string+0xc8>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
     3f2:	68fb      	ldr	r3, [r7, #12]
     3f4:	681b      	ldr	r3, [r3, #0]
     3f6:	1e5a      	subs	r2, r3, #1
     3f8:	68fb      	ldr	r3, [r7, #12]
     3fa:	601a      	str	r2, [r3, #0]
					break;
     3fc:	e006      	b.n	40c <jsmn_parse_string+0x170>
				/* Unexpected symbol */
				default:
					parser->pos = start;
     3fe:	69ba      	ldr	r2, [r7, #24]
     400:	68fb      	ldr	r3, [r7, #12]
     402:	601a      	str	r2, [r3, #0]
					return JSMN_ERROR_INVAL;
     404:	2302      	movs	r3, #2
     406:	425b      	negs	r3, r3
     408:	e017      	b.n	43a <jsmn_parse_string+0x19e>
			parser->pos++;
			switch (js[parser->pos]) {
				/* Allowed escaped symbols */
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
     40a:	46c0      	nop			; (mov r8, r8)
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     40c:	68fb      	ldr	r3, [r7, #12]
     40e:	681b      	ldr	r3, [r3, #0]
     410:	1c5a      	adds	r2, r3, #1
     412:	68fb      	ldr	r3, [r7, #12]
     414:	601a      	str	r2, [r3, #0]
     416:	68fb      	ldr	r3, [r7, #12]
     418:	681a      	ldr	r2, [r3, #0]
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	429a      	cmp	r2, r3
     41e:	d207      	bcs.n	430 <jsmn_parse_string+0x194>
     420:	68fb      	ldr	r3, [r7, #12]
     422:	681b      	ldr	r3, [r3, #0]
     424:	68ba      	ldr	r2, [r7, #8]
     426:	18d3      	adds	r3, r2, r3
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	2b00      	cmp	r3, #0
     42c:	d000      	beq.n	430 <jsmn_parse_string+0x194>
     42e:	e745      	b.n	2bc <jsmn_parse_string+0x20>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
     430:	69ba      	ldr	r2, [r7, #24]
     432:	68fb      	ldr	r3, [r7, #12]
     434:	601a      	str	r2, [r3, #0]
	return JSMN_ERROR_PART;
     436:	2303      	movs	r3, #3
     438:	425b      	negs	r3, r3
}
     43a:	0018      	movs	r0, r3
     43c:	46bd      	mov	sp, r7
     43e:	b009      	add	sp, #36	; 0x24
     440:	bd90      	pop	{r4, r7, pc}
     442:	46c0      	nop			; (mov r8, r8)
     444:	00000121 	.word	0x00000121
     448:	0000016d 	.word	0x0000016d
     44c:	00012564 	.word	0x00012564

00000450 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
     450:	b590      	push	{r4, r7, lr}
     452:	b08d      	sub	sp, #52	; 0x34
     454:	af02      	add	r7, sp, #8
     456:	60f8      	str	r0, [r7, #12]
     458:	60b9      	str	r1, [r7, #8]
     45a:	607a      	str	r2, [r7, #4]
     45c:	603b      	str	r3, [r7, #0]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
     45e:	68fb      	ldr	r3, [r7, #12]
     460:	685b      	ldr	r3, [r3, #4]
     462:	623b      	str	r3, [r7, #32]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     464:	e163      	b.n	72e <jsmn_parse+0x2de>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
     466:	68fb      	ldr	r3, [r7, #12]
     468:	681b      	ldr	r3, [r3, #0]
     46a:	68ba      	ldr	r2, [r7, #8]
     46c:	18d2      	adds	r2, r2, r3
     46e:	231f      	movs	r3, #31
     470:	18fb      	adds	r3, r7, r3
     472:	7812      	ldrb	r2, [r2, #0]
     474:	701a      	strb	r2, [r3, #0]
		switch (c) {
     476:	231f      	movs	r3, #31
     478:	18fb      	adds	r3, r7, r3
     47a:	781b      	ldrb	r3, [r3, #0]
     47c:	2b2c      	cmp	r3, #44	; 0x2c
     47e:	d100      	bne.n	482 <jsmn_parse+0x32>
     480:	e0dc      	b.n	63c <jsmn_parse+0x1ec>
     482:	dc0f      	bgt.n	4a4 <jsmn_parse+0x54>
     484:	2b0d      	cmp	r3, #13
     486:	d100      	bne.n	48a <jsmn_parse+0x3a>
     488:	e141      	b.n	70e <jsmn_parse+0x2be>
     48a:	dc04      	bgt.n	496 <jsmn_parse+0x46>
     48c:	3b09      	subs	r3, #9
     48e:	2b01      	cmp	r3, #1
     490:	d900      	bls.n	494 <jsmn_parse+0x44>
     492:	e119      	b.n	6c8 <jsmn_parse+0x278>
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
     494:	e13b      	b.n	70e <jsmn_parse+0x2be>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
     496:	2b20      	cmp	r3, #32
     498:	d100      	bne.n	49c <jsmn_parse+0x4c>
     49a:	e138      	b.n	70e <jsmn_parse+0x2be>
     49c:	2b22      	cmp	r3, #34	; 0x22
     49e:	d100      	bne.n	4a2 <jsmn_parse+0x52>
     4a0:	e0a0      	b.n	5e4 <jsmn_parse+0x194>
     4a2:	e111      	b.n	6c8 <jsmn_parse+0x278>
     4a4:	2b5d      	cmp	r3, #93	; 0x5d
     4a6:	d042      	beq.n	52e <jsmn_parse+0xde>
     4a8:	dc05      	bgt.n	4b6 <jsmn_parse+0x66>
     4aa:	2b3a      	cmp	r3, #58	; 0x3a
     4ac:	d100      	bne.n	4b0 <jsmn_parse+0x60>
     4ae:	e0be      	b.n	62e <jsmn_parse+0x1de>
     4b0:	2b5b      	cmp	r3, #91	; 0x5b
     4b2:	d005      	beq.n	4c0 <jsmn_parse+0x70>
     4b4:	e108      	b.n	6c8 <jsmn_parse+0x278>
     4b6:	2b7b      	cmp	r3, #123	; 0x7b
     4b8:	d002      	beq.n	4c0 <jsmn_parse+0x70>
     4ba:	2b7d      	cmp	r3, #125	; 0x7d
     4bc:	d037      	beq.n	52e <jsmn_parse+0xde>
     4be:	e103      	b.n	6c8 <jsmn_parse+0x278>
			case '{': case '[':
				count++;
     4c0:	6a3b      	ldr	r3, [r7, #32]
     4c2:	3301      	adds	r3, #1
     4c4:	623b      	str	r3, [r7, #32]
				if (tokens == NULL) {
     4c6:	683b      	ldr	r3, [r7, #0]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d100      	bne.n	4ce <jsmn_parse+0x7e>
     4cc:	e121      	b.n	712 <jsmn_parse+0x2c2>
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
     4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
     4d0:	6839      	ldr	r1, [r7, #0]
     4d2:	68fb      	ldr	r3, [r7, #12]
     4d4:	0018      	movs	r0, r3
     4d6:	4bae      	ldr	r3, [pc, #696]	; (790 <jsmn_parse+0x340>)
     4d8:	4798      	blx	r3
     4da:	0003      	movs	r3, r0
     4dc:	61bb      	str	r3, [r7, #24]
				if (token == NULL)
     4de:	69bb      	ldr	r3, [r7, #24]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d102      	bne.n	4ea <jsmn_parse+0x9a>
					return JSMN_ERROR_NOMEM;
     4e4:	2301      	movs	r3, #1
     4e6:	425b      	negs	r3, r3
     4e8:	e14e      	b.n	788 <jsmn_parse+0x338>
				if (parser->toksuper != -1) {
     4ea:	68fb      	ldr	r3, [r7, #12]
     4ec:	689b      	ldr	r3, [r3, #8]
     4ee:	3301      	adds	r3, #1
     4f0:	d007      	beq.n	502 <jsmn_parse+0xb2>
					tokens[parser->toksuper].size++;
     4f2:	68fb      	ldr	r3, [r7, #12]
     4f4:	689b      	ldr	r3, [r3, #8]
     4f6:	011b      	lsls	r3, r3, #4
     4f8:	683a      	ldr	r2, [r7, #0]
     4fa:	18d3      	adds	r3, r2, r3
     4fc:	68da      	ldr	r2, [r3, #12]
     4fe:	3201      	adds	r2, #1
     500:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
     502:	231f      	movs	r3, #31
     504:	18fb      	adds	r3, r7, r3
     506:	781b      	ldrb	r3, [r3, #0]
     508:	2b7b      	cmp	r3, #123	; 0x7b
     50a:	d101      	bne.n	510 <jsmn_parse+0xc0>
     50c:	2201      	movs	r2, #1
     50e:	e000      	b.n	512 <jsmn_parse+0xc2>
     510:	2202      	movs	r2, #2
     512:	69bb      	ldr	r3, [r7, #24]
     514:	701a      	strb	r2, [r3, #0]
				token->start = parser->pos;
     516:	68fb      	ldr	r3, [r7, #12]
     518:	681b      	ldr	r3, [r3, #0]
     51a:	001a      	movs	r2, r3
     51c:	69bb      	ldr	r3, [r7, #24]
     51e:	605a      	str	r2, [r3, #4]
				parser->toksuper = parser->toknext - 1;
     520:	68fb      	ldr	r3, [r7, #12]
     522:	685b      	ldr	r3, [r3, #4]
     524:	3b01      	subs	r3, #1
     526:	001a      	movs	r2, r3
     528:	68fb      	ldr	r3, [r7, #12]
     52a:	609a      	str	r2, [r3, #8]
				break;
     52c:	e0fa      	b.n	724 <jsmn_parse+0x2d4>
			case '}': case ']':
				if (tokens == NULL)
     52e:	683b      	ldr	r3, [r7, #0]
     530:	2b00      	cmp	r3, #0
     532:	d100      	bne.n	536 <jsmn_parse+0xe6>
     534:	e0ef      	b.n	716 <jsmn_parse+0x2c6>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
     536:	231f      	movs	r3, #31
     538:	18fb      	adds	r3, r7, r3
     53a:	781b      	ldrb	r3, [r3, #0]
     53c:	2b7d      	cmp	r3, #125	; 0x7d
     53e:	d101      	bne.n	544 <jsmn_parse+0xf4>
     540:	2201      	movs	r2, #1
     542:	e000      	b.n	546 <jsmn_parse+0xf6>
     544:	2202      	movs	r2, #2
     546:	231e      	movs	r3, #30
     548:	18fb      	adds	r3, r7, r3
     54a:	701a      	strb	r2, [r3, #0]
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
     54c:	68fb      	ldr	r3, [r7, #12]
     54e:	685b      	ldr	r3, [r3, #4]
     550:	3b01      	subs	r3, #1
     552:	627b      	str	r3, [r7, #36]	; 0x24
     554:	e024      	b.n	5a0 <jsmn_parse+0x150>
					token = &tokens[i];
     556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     558:	011b      	lsls	r3, r3, #4
     55a:	683a      	ldr	r2, [r7, #0]
     55c:	18d3      	adds	r3, r2, r3
     55e:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
     560:	69bb      	ldr	r3, [r7, #24]
     562:	685b      	ldr	r3, [r3, #4]
     564:	3301      	adds	r3, #1
     566:	d018      	beq.n	59a <jsmn_parse+0x14a>
     568:	69bb      	ldr	r3, [r7, #24]
     56a:	689b      	ldr	r3, [r3, #8]
     56c:	3301      	adds	r3, #1
     56e:	d114      	bne.n	59a <jsmn_parse+0x14a>
						if (token->type != type) {
     570:	69bb      	ldr	r3, [r7, #24]
     572:	781b      	ldrb	r3, [r3, #0]
     574:	221e      	movs	r2, #30
     576:	18ba      	adds	r2, r7, r2
     578:	7812      	ldrb	r2, [r2, #0]
     57a:	429a      	cmp	r2, r3
     57c:	d002      	beq.n	584 <jsmn_parse+0x134>
							return JSMN_ERROR_INVAL;
     57e:	2302      	movs	r3, #2
     580:	425b      	negs	r3, r3
     582:	e101      	b.n	788 <jsmn_parse+0x338>
						}
						parser->toksuper = -1;
     584:	68fb      	ldr	r3, [r7, #12]
     586:	2201      	movs	r2, #1
     588:	4252      	negs	r2, r2
     58a:	609a      	str	r2, [r3, #8]
						token->end = parser->pos + 1;
     58c:	68fb      	ldr	r3, [r7, #12]
     58e:	681b      	ldr	r3, [r3, #0]
     590:	3301      	adds	r3, #1
     592:	001a      	movs	r2, r3
     594:	69bb      	ldr	r3, [r7, #24]
     596:	609a      	str	r2, [r3, #8]
						break;
     598:	e005      	b.n	5a6 <jsmn_parse+0x156>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
     59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     59c:	3b01      	subs	r3, #1
     59e:	627b      	str	r3, [r7, #36]	; 0x24
     5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5a2:	2b00      	cmp	r3, #0
     5a4:	dad7      	bge.n	556 <jsmn_parse+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
     5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5a8:	3301      	adds	r3, #1
     5aa:	d117      	bne.n	5dc <jsmn_parse+0x18c>
     5ac:	2302      	movs	r3, #2
     5ae:	425b      	negs	r3, r3
     5b0:	e0ea      	b.n	788 <jsmn_parse+0x338>
				for (; i >= 0; i--) {
					token = &tokens[i];
     5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5b4:	011b      	lsls	r3, r3, #4
     5b6:	683a      	ldr	r2, [r7, #0]
     5b8:	18d3      	adds	r3, r2, r3
     5ba:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
     5bc:	69bb      	ldr	r3, [r7, #24]
     5be:	685b      	ldr	r3, [r3, #4]
     5c0:	3301      	adds	r3, #1
     5c2:	d008      	beq.n	5d6 <jsmn_parse+0x186>
     5c4:	69bb      	ldr	r3, [r7, #24]
     5c6:	689b      	ldr	r3, [r3, #8]
     5c8:	3301      	adds	r3, #1
     5ca:	d104      	bne.n	5d6 <jsmn_parse+0x186>
						parser->toksuper = i;
     5cc:	68fb      	ldr	r3, [r7, #12]
     5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     5d0:	609a      	str	r2, [r3, #8]
						break;
     5d2:	46c0      	nop			; (mov r8, r8)
					}
				}
#endif
				break;
     5d4:	e0a6      	b.n	724 <jsmn_parse+0x2d4>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
     5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5d8:	3b01      	subs	r3, #1
     5da:	627b      	str	r3, [r7, #36]	; 0x24
     5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     5de:	2b00      	cmp	r3, #0
     5e0:	dae7      	bge.n	5b2 <jsmn_parse+0x162>
						parser->toksuper = i;
						break;
					}
				}
#endif
				break;
     5e2:	e09f      	b.n	724 <jsmn_parse+0x2d4>
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
     5e4:	683c      	ldr	r4, [r7, #0]
     5e6:	687a      	ldr	r2, [r7, #4]
     5e8:	68b9      	ldr	r1, [r7, #8]
     5ea:	68f8      	ldr	r0, [r7, #12]
     5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     5ee:	9300      	str	r3, [sp, #0]
     5f0:	0023      	movs	r3, r4
     5f2:	4c68      	ldr	r4, [pc, #416]	; (794 <jsmn_parse+0x344>)
     5f4:	47a0      	blx	r4
     5f6:	0003      	movs	r3, r0
     5f8:	617b      	str	r3, [r7, #20]
				if (r < 0) return r;
     5fa:	697b      	ldr	r3, [r7, #20]
     5fc:	2b00      	cmp	r3, #0
     5fe:	da01      	bge.n	604 <jsmn_parse+0x1b4>
     600:	697b      	ldr	r3, [r7, #20]
     602:	e0c1      	b.n	788 <jsmn_parse+0x338>
				count++;
     604:	6a3b      	ldr	r3, [r7, #32]
     606:	3301      	adds	r3, #1
     608:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	689b      	ldr	r3, [r3, #8]
     60e:	3301      	adds	r3, #1
     610:	d100      	bne.n	614 <jsmn_parse+0x1c4>
     612:	e082      	b.n	71a <jsmn_parse+0x2ca>
     614:	683b      	ldr	r3, [r7, #0]
     616:	2b00      	cmp	r3, #0
     618:	d100      	bne.n	61c <jsmn_parse+0x1cc>
     61a:	e07e      	b.n	71a <jsmn_parse+0x2ca>
					tokens[parser->toksuper].size++;
     61c:	68fb      	ldr	r3, [r7, #12]
     61e:	689b      	ldr	r3, [r3, #8]
     620:	011b      	lsls	r3, r3, #4
     622:	683a      	ldr	r2, [r7, #0]
     624:	18d3      	adds	r3, r2, r3
     626:	68da      	ldr	r2, [r3, #12]
     628:	3201      	adds	r2, #1
     62a:	60da      	str	r2, [r3, #12]
				break;
     62c:	e075      	b.n	71a <jsmn_parse+0x2ca>
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
     62e:	68fb      	ldr	r3, [r7, #12]
     630:	685b      	ldr	r3, [r3, #4]
     632:	3b01      	subs	r3, #1
     634:	001a      	movs	r2, r3
     636:	68fb      	ldr	r3, [r7, #12]
     638:	609a      	str	r2, [r3, #8]
				break;
     63a:	e073      	b.n	724 <jsmn_parse+0x2d4>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
     63c:	683b      	ldr	r3, [r7, #0]
     63e:	2b00      	cmp	r3, #0
     640:	d100      	bne.n	644 <jsmn_parse+0x1f4>
     642:	e06c      	b.n	71e <jsmn_parse+0x2ce>
     644:	68fb      	ldr	r3, [r7, #12]
     646:	689b      	ldr	r3, [r3, #8]
     648:	3301      	adds	r3, #1
     64a:	d100      	bne.n	64e <jsmn_parse+0x1fe>
     64c:	e067      	b.n	71e <jsmn_parse+0x2ce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	689b      	ldr	r3, [r3, #8]
     652:	011b      	lsls	r3, r3, #4
     654:	683a      	ldr	r2, [r7, #0]
     656:	18d3      	adds	r3, r2, r3
     658:	781b      	ldrb	r3, [r3, #0]
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
     65a:	2b02      	cmp	r3, #2
     65c:	d05f      	beq.n	71e <jsmn_parse+0x2ce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
     65e:	68fb      	ldr	r3, [r7, #12]
     660:	689b      	ldr	r3, [r3, #8]
     662:	011b      	lsls	r3, r3, #4
     664:	683a      	ldr	r2, [r7, #0]
     666:	18d3      	adds	r3, r2, r3
     668:	781b      	ldrb	r3, [r3, #0]
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
						tokens[parser->toksuper].type != JSMN_ARRAY &&
     66a:	2b01      	cmp	r3, #1
     66c:	d057      	beq.n	71e <jsmn_parse+0x2ce>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
     66e:	68fb      	ldr	r3, [r7, #12]
     670:	685b      	ldr	r3, [r3, #4]
     672:	3b01      	subs	r3, #1
     674:	627b      	str	r3, [r7, #36]	; 0x24
     676:	e023      	b.n	6c0 <jsmn_parse+0x270>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
     678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     67a:	011b      	lsls	r3, r3, #4
     67c:	683a      	ldr	r2, [r7, #0]
     67e:	18d3      	adds	r3, r2, r3
     680:	781b      	ldrb	r3, [r3, #0]
     682:	2b02      	cmp	r3, #2
     684:	d006      	beq.n	694 <jsmn_parse+0x244>
     686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     688:	011b      	lsls	r3, r3, #4
     68a:	683a      	ldr	r2, [r7, #0]
     68c:	18d3      	adds	r3, r2, r3
     68e:	781b      	ldrb	r3, [r3, #0]
     690:	2b01      	cmp	r3, #1
     692:	d112      	bne.n	6ba <jsmn_parse+0x26a>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
     694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     696:	011b      	lsls	r3, r3, #4
     698:	683a      	ldr	r2, [r7, #0]
     69a:	18d3      	adds	r3, r2, r3
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	3301      	adds	r3, #1
     6a0:	d00b      	beq.n	6ba <jsmn_parse+0x26a>
     6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6a4:	011b      	lsls	r3, r3, #4
     6a6:	683a      	ldr	r2, [r7, #0]
     6a8:	18d3      	adds	r3, r2, r3
     6aa:	689b      	ldr	r3, [r3, #8]
     6ac:	3301      	adds	r3, #1
     6ae:	d104      	bne.n	6ba <jsmn_parse+0x26a>
								parser->toksuper = i;
     6b0:	68fb      	ldr	r3, [r7, #12]
     6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     6b4:	609a      	str	r2, [r3, #8]
								break;
     6b6:	46c0      	nop			; (mov r8, r8)
							}
						}
					}
#endif
				}
				break;
     6b8:	e031      	b.n	71e <jsmn_parse+0x2ce>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
     6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6bc:	3b01      	subs	r3, #1
     6be:	627b      	str	r3, [r7, #36]	; 0x24
     6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     6c2:	2b00      	cmp	r3, #0
     6c4:	dad8      	bge.n	678 <jsmn_parse+0x228>
							}
						}
					}
#endif
				}
				break;
     6c6:	e02a      	b.n	71e <jsmn_parse+0x2ce>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
     6c8:	683c      	ldr	r4, [r7, #0]
     6ca:	687a      	ldr	r2, [r7, #4]
     6cc:	68b9      	ldr	r1, [r7, #8]
     6ce:	68f8      	ldr	r0, [r7, #12]
     6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     6d2:	9300      	str	r3, [sp, #0]
     6d4:	0023      	movs	r3, r4
     6d6:	4c30      	ldr	r4, [pc, #192]	; (798 <jsmn_parse+0x348>)
     6d8:	47a0      	blx	r4
     6da:	0003      	movs	r3, r0
     6dc:	617b      	str	r3, [r7, #20]
				if (r < 0) return r;
     6de:	697b      	ldr	r3, [r7, #20]
     6e0:	2b00      	cmp	r3, #0
     6e2:	da01      	bge.n	6e8 <jsmn_parse+0x298>
     6e4:	697b      	ldr	r3, [r7, #20]
     6e6:	e04f      	b.n	788 <jsmn_parse+0x338>
				count++;
     6e8:	6a3b      	ldr	r3, [r7, #32]
     6ea:	3301      	adds	r3, #1
     6ec:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
     6ee:	68fb      	ldr	r3, [r7, #12]
     6f0:	689b      	ldr	r3, [r3, #8]
     6f2:	3301      	adds	r3, #1
     6f4:	d015      	beq.n	722 <jsmn_parse+0x2d2>
     6f6:	683b      	ldr	r3, [r7, #0]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d012      	beq.n	722 <jsmn_parse+0x2d2>
					tokens[parser->toksuper].size++;
     6fc:	68fb      	ldr	r3, [r7, #12]
     6fe:	689b      	ldr	r3, [r3, #8]
     700:	011b      	lsls	r3, r3, #4
     702:	683a      	ldr	r2, [r7, #0]
     704:	18d3      	adds	r3, r2, r3
     706:	68da      	ldr	r2, [r3, #12]
     708:	3201      	adds	r2, #1
     70a:	60da      	str	r2, [r3, #12]
				break;
     70c:	e009      	b.n	722 <jsmn_parse+0x2d2>
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
     70e:	46c0      	nop			; (mov r8, r8)
     710:	e008      	b.n	724 <jsmn_parse+0x2d4>
		c = js[parser->pos];
		switch (c) {
			case '{': case '[':
				count++;
				if (tokens == NULL) {
					break;
     712:	46c0      	nop			; (mov r8, r8)
     714:	e006      	b.n	724 <jsmn_parse+0x2d4>
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
     716:	46c0      	nop			; (mov r8, r8)
     718:	e004      	b.n	724 <jsmn_parse+0x2d4>
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	e002      	b.n	724 <jsmn_parse+0x2d4>
							}
						}
					}
#endif
				}
				break;
     71e:	46c0      	nop			; (mov r8, r8)
     720:	e000      	b.n	724 <jsmn_parse+0x2d4>
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
     722:	46c0      	nop			; (mov r8, r8)
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
     724:	68fb      	ldr	r3, [r7, #12]
     726:	681b      	ldr	r3, [r3, #0]
     728:	1c5a      	adds	r2, r3, #1
     72a:	68fb      	ldr	r3, [r7, #12]
     72c:	601a      	str	r2, [r3, #0]
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	681a      	ldr	r2, [r3, #0]
     732:	687b      	ldr	r3, [r7, #4]
     734:	429a      	cmp	r2, r3
     736:	d207      	bcs.n	748 <jsmn_parse+0x2f8>
     738:	68fb      	ldr	r3, [r7, #12]
     73a:	681b      	ldr	r3, [r3, #0]
     73c:	68ba      	ldr	r2, [r7, #8]
     73e:	18d3      	adds	r3, r2, r3
     740:	781b      	ldrb	r3, [r3, #0]
     742:	2b00      	cmp	r3, #0
     744:	d000      	beq.n	748 <jsmn_parse+0x2f8>
     746:	e68e      	b.n	466 <jsmn_parse+0x16>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
     748:	683b      	ldr	r3, [r7, #0]
     74a:	2b00      	cmp	r3, #0
     74c:	d01b      	beq.n	786 <jsmn_parse+0x336>
		for (i = parser->toknext - 1; i >= 0; i--) {
     74e:	68fb      	ldr	r3, [r7, #12]
     750:	685b      	ldr	r3, [r3, #4]
     752:	3b01      	subs	r3, #1
     754:	627b      	str	r3, [r7, #36]	; 0x24
     756:	e013      	b.n	780 <jsmn_parse+0x330>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
     758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     75a:	011b      	lsls	r3, r3, #4
     75c:	683a      	ldr	r2, [r7, #0]
     75e:	18d3      	adds	r3, r2, r3
     760:	685b      	ldr	r3, [r3, #4]
     762:	3301      	adds	r3, #1
     764:	d009      	beq.n	77a <jsmn_parse+0x32a>
     766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     768:	011b      	lsls	r3, r3, #4
     76a:	683a      	ldr	r2, [r7, #0]
     76c:	18d3      	adds	r3, r2, r3
     76e:	689b      	ldr	r3, [r3, #8]
     770:	3301      	adds	r3, #1
     772:	d102      	bne.n	77a <jsmn_parse+0x32a>
				return JSMN_ERROR_PART;
     774:	2303      	movs	r3, #3
     776:	425b      	negs	r3, r3
     778:	e006      	b.n	788 <jsmn_parse+0x338>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
     77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     77c:	3b01      	subs	r3, #1
     77e:	627b      	str	r3, [r7, #36]	; 0x24
     780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     782:	2b00      	cmp	r3, #0
     784:	dae8      	bge.n	758 <jsmn_parse+0x308>
				return JSMN_ERROR_PART;
			}
		}
	}

	return count;
     786:	6a3b      	ldr	r3, [r7, #32]
}
     788:	0018      	movs	r0, r3
     78a:	46bd      	mov	sp, r7
     78c:	b00b      	add	sp, #44	; 0x2c
     78e:	bd90      	pop	{r4, r7, pc}
     790:	00000121 	.word	0x00000121
     794:	0000029d 	.word	0x0000029d
     798:	000001a5 	.word	0x000001a5

0000079c <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
     79c:	b580      	push	{r7, lr}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
     7a2:	6078      	str	r0, [r7, #4]
	parser->pos = 0;
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	2200      	movs	r2, #0
     7a8:	601a      	str	r2, [r3, #0]
	parser->toknext = 0;
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	2200      	movs	r2, #0
     7ae:	605a      	str	r2, [r3, #4]
	parser->toksuper = -1;
     7b0:	687b      	ldr	r3, [r7, #4]
     7b2:	2201      	movs	r2, #1
     7b4:	4252      	negs	r2, r2
     7b6:	609a      	str	r2, [r3, #8]
}
     7b8:	46c0      	nop			; (mov r8, r8)
     7ba:	46bd      	mov	sp, r7
     7bc:	b002      	add	sp, #8
     7be:	bd80      	pop	{r7, pc}

000007c0 <temp_setpoint_handler>:
    uint8_t string_size;
    void (*handler)(char *msg, jsmntok_t *key, jsmntok_t *value);
} wifi_handler_t;

static void temp_setpoint_handler(char *msg, jsmntok_t *key, jsmntok_t *value) 
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b086      	sub	sp, #24
     7c4:	af00      	add	r7, sp, #0
     7c6:	60f8      	str	r0, [r7, #12]
     7c8:	60b9      	str	r1, [r7, #8]
     7ca:	607a      	str	r2, [r7, #4]
    char set_point[4] = {0};
     7cc:	2314      	movs	r3, #20
     7ce:	18fb      	adds	r3, r7, r3
     7d0:	2200      	movs	r2, #0
     7d2:	601a      	str	r2, [r3, #0]

    memcpy(set_point, &msg[value->start], value->end - value->start);
     7d4:	687b      	ldr	r3, [r7, #4]
     7d6:	685b      	ldr	r3, [r3, #4]
     7d8:	001a      	movs	r2, r3
     7da:	68fb      	ldr	r3, [r7, #12]
     7dc:	1899      	adds	r1, r3, r2
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	689a      	ldr	r2, [r3, #8]
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	685b      	ldr	r3, [r3, #4]
     7e6:	1ad3      	subs	r3, r2, r3
     7e8:	001a      	movs	r2, r3
     7ea:	2314      	movs	r3, #20
     7ec:	18fb      	adds	r3, r7, r3
     7ee:	0018      	movs	r0, r3
     7f0:	4b07      	ldr	r3, [pc, #28]	; (810 <temp_setpoint_handler+0x50>)
     7f2:	4798      	blx	r3
    thermal_set_temperature((uint8_t) atoi(set_point));
     7f4:	2314      	movs	r3, #20
     7f6:	18fb      	adds	r3, r7, r3
     7f8:	0018      	movs	r0, r3
     7fa:	4b06      	ldr	r3, [pc, #24]	; (814 <temp_setpoint_handler+0x54>)
     7fc:	4798      	blx	r3
     7fe:	0003      	movs	r3, r0
     800:	b2db      	uxtb	r3, r3
     802:	0018      	movs	r0, r3
     804:	4b04      	ldr	r3, [pc, #16]	; (818 <temp_setpoint_handler+0x58>)
     806:	4798      	blx	r3
}
     808:	46c0      	nop			; (mov r8, r8)
     80a:	46bd      	mov	sp, r7
     80c:	b006      	add	sp, #24
     80e:	bd80      	pop	{r7, pc}
     810:	00010dd5 	.word	0x00010dd5
     814:	00010d35 	.word	0x00010d35
     818:	000026ed 	.word	0x000026ed

0000081c <socket_resolve_cb>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
     81c:	b5b0      	push	{r4, r5, r7, lr}
     81e:	b084      	sub	sp, #16
     820:	af02      	add	r7, sp, #8
     822:	6078      	str	r0, [r7, #4]
     824:	6039      	str	r1, [r7, #0]
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
     826:	683b      	ldr	r3, [r7, #0]
     828:	22ff      	movs	r2, #255	; 0xff
     82a:	4013      	ands	r3, r2
     82c:	001c      	movs	r4, r3
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
     82e:	683b      	ldr	r3, [r7, #0]
     830:	0a1b      	lsrs	r3, r3, #8
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
     832:	001a      	movs	r2, r3
     834:	23ff      	movs	r3, #255	; 0xff
     836:	401a      	ands	r2, r3
     838:	0015      	movs	r5, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
     83a:	683b      	ldr	r3, [r7, #0]
     83c:	0c1b      	lsrs	r3, r3, #16
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
     83e:	001a      	movs	r2, r3
     840:	23ff      	movs	r3, #255	; 0xff
     842:	4013      	ands	r3, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
     844:	683a      	ldr	r2, [r7, #0]
     846:	0e12      	lsrs	r2, r2, #24
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
     848:	6879      	ldr	r1, [r7, #4]
     84a:	4808      	ldr	r0, [pc, #32]	; (86c <socket_resolve_cb+0x50>)
     84c:	9201      	str	r2, [sp, #4]
     84e:	9300      	str	r3, [sp, #0]
     850:	002b      	movs	r3, r5
     852:	0022      	movs	r2, r4
     854:	4c06      	ldr	r4, [pc, #24]	; (870 <socket_resolve_cb+0x54>)
     856:	47a0      	blx	r4
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
	handle_dns_found((char *)hostName, hostIp);
     858:	683a      	ldr	r2, [r7, #0]
     85a:	687b      	ldr	r3, [r7, #4]
     85c:	0011      	movs	r1, r2
     85e:	0018      	movs	r0, r3
     860:	4b04      	ldr	r3, [pc, #16]	; (874 <socket_resolve_cb+0x58>)
     862:	4798      	blx	r3
}
     864:	46c0      	nop			; (mov r8, r8)
     866:	46bd      	mov	sp, r7
     868:	b002      	add	sp, #8
     86a:	bdb0      	pop	{r4, r5, r7, pc}
     86c:	000126d4 	.word	0x000126d4
     870:	000114d9 	.word	0x000114d9
     874:	00010191 	.word	0x00010191

00000878 <m2m_tcp_socket_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
     878:	b580      	push	{r7, lr}
     87a:	b082      	sub	sp, #8
     87c:	af00      	add	r7, sp, #0
     87e:	603a      	str	r2, [r7, #0]
     880:	1dfb      	adds	r3, r7, #7
     882:	1c02      	adds	r2, r0, #0
     884:	701a      	strb	r2, [r3, #0]
     886:	1dbb      	adds	r3, r7, #6
     888:	1c0a      	adds	r2, r1, #0
     88a:	701a      	strb	r2, [r3, #0]
	handle_tcpip(sock, u8Msg, pvMsg);
     88c:	683a      	ldr	r2, [r7, #0]
     88e:	1dbb      	adds	r3, r7, #6
     890:	7819      	ldrb	r1, [r3, #0]
     892:	1dfb      	adds	r3, r7, #7
     894:	781b      	ldrb	r3, [r3, #0]
     896:	b25b      	sxtb	r3, r3
     898:	0018      	movs	r0, r3
     89a:	4b03      	ldr	r3, [pc, #12]	; (8a8 <m2m_tcp_socket_handler+0x30>)
     89c:	4798      	blx	r3
}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	46bd      	mov	sp, r7
     8a2:	b002      	add	sp, #8
     8a4:	bd80      	pop	{r7, pc}
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	00010201 	.word	0x00010201

000008ac <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
     8ac:	b590      	push	{r4, r7, lr}
     8ae:	b087      	sub	sp, #28
     8b0:	af02      	add	r7, sp, #8
     8b2:	0002      	movs	r2, r0
     8b4:	6039      	str	r1, [r7, #0]
     8b6:	1dfb      	adds	r3, r7, #7
     8b8:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b2c      	cmp	r3, #44	; 0x2c
     8c0:	d002      	beq.n	8c8 <m2m_wifi_state+0x1c>
     8c2:	2b32      	cmp	r3, #50	; 0x32
     8c4:	d025      	beq.n	912 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
     8c6:	e03e      	b.n	946 <m2m_wifi_state+0x9a>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
     8c8:	683b      	ldr	r3, [r7, #0]
     8ca:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
     8cc:	68fb      	ldr	r3, [r7, #12]
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	2b01      	cmp	r3, #1
     8d2:	d104      	bne.n	8de <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
     8d4:	4b1e      	ldr	r3, [pc, #120]	; (950 <m2m_wifi_state+0xa4>)
     8d6:	0018      	movs	r0, r3
     8d8:	4b1e      	ldr	r3, [pc, #120]	; (954 <m2m_wifi_state+0xa8>)
     8da:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
     8dc:	e032      	b.n	944 <m2m_wifi_state+0x98>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
     8de:	68fb      	ldr	r3, [r7, #12]
     8e0:	781b      	ldrb	r3, [r3, #0]
     8e2:	2b00      	cmp	r3, #0
     8e4:	d12e      	bne.n	944 <m2m_wifi_state+0x98>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
     8e6:	4b1c      	ldr	r3, [pc, #112]	; (958 <m2m_wifi_state+0xac>)
     8e8:	0018      	movs	r0, r3
     8ea:	4b1a      	ldr	r3, [pc, #104]	; (954 <m2m_wifi_state+0xa8>)
     8ec:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
     8ee:	4b1b      	ldr	r3, [pc, #108]	; (95c <m2m_wifi_state+0xb0>)
     8f0:	781b      	ldrb	r3, [r3, #0]
     8f2:	b2db      	uxtb	r3, r3
     8f4:	2b03      	cmp	r3, #3
     8f6:	d125      	bne.n	944 <m2m_wifi_state+0x98>
				gWifiState = WifiStateDisConnected;
     8f8:	4b18      	ldr	r3, [pc, #96]	; (95c <m2m_wifi_state+0xb0>)
     8fa:	2204      	movs	r2, #4
     8fc:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     8fe:	4a18      	ldr	r2, [pc, #96]	; (960 <m2m_wifi_state+0xb4>)
     900:	4818      	ldr	r0, [pc, #96]	; (964 <m2m_wifi_state+0xb8>)
     902:	23ff      	movs	r3, #255	; 0xff
     904:	9300      	str	r3, [sp, #0]
     906:	0013      	movs	r3, r2
     908:	2202      	movs	r2, #2
     90a:	211b      	movs	r1, #27
     90c:	4c16      	ldr	r4, [pc, #88]	; (968 <m2m_wifi_state+0xbc>)
     90e:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
     910:	e018      	b.n	944 <m2m_wifi_state+0x98>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;		
     912:	683b      	ldr	r3, [r7, #0]
     914:	60bb      	str	r3, [r7, #8]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     916:	68bb      	ldr	r3, [r7, #8]
     918:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;		
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
     91a:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     91c:	68bb      	ldr	r3, [r7, #8]
     91e:	3301      	adds	r3, #1
     920:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;		
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
     922:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     924:	68bb      	ldr	r3, [r7, #8]
     926:	3302      	adds	r3, #2
     928:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;		
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
     92a:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
     92c:	68bb      	ldr	r3, [r7, #8]
     92e:	3303      	adds	r3, #3
     930:	781b      	ldrb	r3, [r3, #0]
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;		
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
     932:	480e      	ldr	r0, [pc, #56]	; (96c <m2m_wifi_state+0xc0>)
     934:	9300      	str	r3, [sp, #0]
     936:	0023      	movs	r3, r4
     938:	4c0d      	ldr	r4, [pc, #52]	; (970 <m2m_wifi_state+0xc4>)
     93a:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
     93c:	4b07      	ldr	r3, [pc, #28]	; (95c <m2m_wifi_state+0xb0>)
     93e:	2203      	movs	r2, #3
     940:	701a      	strb	r2, [r3, #0]

		break;
     942:	e000      	b.n	946 <m2m_wifi_state+0x9a>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
     944:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
     946:	46c0      	nop			; (mov r8, r8)
     948:	46bd      	mov	sp, r7
     94a:	b005      	add	sp, #20
     94c:	bd90      	pop	{r4, r7, pc}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	0001270c 	.word	0x0001270c
     954:	000115f9 	.word	0x000115f9
     958:	00012748 	.word	0x00012748
     95c:	200000bc 	.word	0x200000bc
     960:	00012788 	.word	0x00012788
     964:	00012794 	.word	0x00012794
     968:	0000529d 	.word	0x0000529d
     96c:	000127b0 	.word	0x000127b0
     970:	000114d9 	.word	0x000114d9

00000974 <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
     974:	b590      	push	{r4, r7, lr}
     976:	b085      	sub	sp, #20
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
     97c:	6039      	str	r1, [r7, #0]
    /* Name must be in the format WINC1500_00:00 */
    uint16 len;

    len = m2m_strlen(name);
     97e:	230e      	movs	r3, #14
     980:	18fc      	adds	r4, r7, r3
     982:	687b      	ldr	r3, [r7, #4]
     984:	0018      	movs	r0, r3
     986:	4b47      	ldr	r3, [pc, #284]	; (aa4 <set_dev_name_to_mac+0x130>)
     988:	4798      	blx	r3
     98a:	0003      	movs	r3, r0
     98c:	8023      	strh	r3, [r4, #0]
    if (len >= 5) {
     98e:	230e      	movs	r3, #14
     990:	18fb      	adds	r3, r7, r3
     992:	881b      	ldrh	r3, [r3, #0]
     994:	2b04      	cmp	r3, #4
     996:	d800      	bhi.n	99a <set_dev_name_to_mac+0x26>
     998:	e07f      	b.n	a9a <set_dev_name_to_mac+0x126>
        name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
     99a:	230e      	movs	r3, #14
     99c:	18fb      	adds	r3, r7, r3
     99e:	881b      	ldrh	r3, [r3, #0]
     9a0:	3b01      	subs	r3, #1
     9a2:	687a      	ldr	r2, [r7, #4]
     9a4:	18d2      	adds	r2, r2, r3
     9a6:	683b      	ldr	r3, [r7, #0]
     9a8:	3305      	adds	r3, #5
     9aa:	781b      	ldrb	r3, [r3, #0]
     9ac:	0019      	movs	r1, r3
     9ae:	230f      	movs	r3, #15
     9b0:	400b      	ands	r3, r1
     9b2:	2b09      	cmp	r3, #9
     9b4:	dd08      	ble.n	9c8 <set_dev_name_to_mac+0x54>
     9b6:	683b      	ldr	r3, [r7, #0]
     9b8:	3305      	adds	r3, #5
     9ba:	781b      	ldrb	r3, [r3, #0]
     9bc:	210f      	movs	r1, #15
     9be:	400b      	ands	r3, r1
     9c0:	b2db      	uxtb	r3, r3
     9c2:	3337      	adds	r3, #55	; 0x37
     9c4:	b2db      	uxtb	r3, r3
     9c6:	e007      	b.n	9d8 <set_dev_name_to_mac+0x64>
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	3305      	adds	r3, #5
     9cc:	781b      	ldrb	r3, [r3, #0]
     9ce:	210f      	movs	r1, #15
     9d0:	400b      	ands	r3, r1
     9d2:	b2db      	uxtb	r3, r3
     9d4:	3330      	adds	r3, #48	; 0x30
     9d6:	b2db      	uxtb	r3, r3
     9d8:	7013      	strb	r3, [r2, #0]
        name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
     9da:	230e      	movs	r3, #14
     9dc:	18fb      	adds	r3, r7, r3
     9de:	881b      	ldrh	r3, [r3, #0]
     9e0:	3b02      	subs	r3, #2
     9e2:	687a      	ldr	r2, [r7, #4]
     9e4:	18d2      	adds	r2, r2, r3
     9e6:	683b      	ldr	r3, [r7, #0]
     9e8:	3305      	adds	r3, #5
     9ea:	781b      	ldrb	r3, [r3, #0]
     9ec:	091b      	lsrs	r3, r3, #4
     9ee:	b2db      	uxtb	r3, r3
     9f0:	0019      	movs	r1, r3
     9f2:	230f      	movs	r3, #15
     9f4:	400b      	ands	r3, r1
     9f6:	2b09      	cmp	r3, #9
     9f8:	dd07      	ble.n	a0a <set_dev_name_to_mac+0x96>
     9fa:	683b      	ldr	r3, [r7, #0]
     9fc:	3305      	adds	r3, #5
     9fe:	781b      	ldrb	r3, [r3, #0]
     a00:	091b      	lsrs	r3, r3, #4
     a02:	b2db      	uxtb	r3, r3
     a04:	3337      	adds	r3, #55	; 0x37
     a06:	b2db      	uxtb	r3, r3
     a08:	e006      	b.n	a18 <set_dev_name_to_mac+0xa4>
     a0a:	683b      	ldr	r3, [r7, #0]
     a0c:	3305      	adds	r3, #5
     a0e:	781b      	ldrb	r3, [r3, #0]
     a10:	091b      	lsrs	r3, r3, #4
     a12:	b2db      	uxtb	r3, r3
     a14:	3330      	adds	r3, #48	; 0x30
     a16:	b2db      	uxtb	r3, r3
     a18:	7013      	strb	r3, [r2, #0]
        name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
     a1a:	230e      	movs	r3, #14
     a1c:	18fb      	adds	r3, r7, r3
     a1e:	881b      	ldrh	r3, [r3, #0]
     a20:	3b04      	subs	r3, #4
     a22:	687a      	ldr	r2, [r7, #4]
     a24:	18d2      	adds	r2, r2, r3
     a26:	683b      	ldr	r3, [r7, #0]
     a28:	3304      	adds	r3, #4
     a2a:	781b      	ldrb	r3, [r3, #0]
     a2c:	0019      	movs	r1, r3
     a2e:	230f      	movs	r3, #15
     a30:	400b      	ands	r3, r1
     a32:	2b09      	cmp	r3, #9
     a34:	dd08      	ble.n	a48 <set_dev_name_to_mac+0xd4>
     a36:	683b      	ldr	r3, [r7, #0]
     a38:	3304      	adds	r3, #4
     a3a:	781b      	ldrb	r3, [r3, #0]
     a3c:	210f      	movs	r1, #15
     a3e:	400b      	ands	r3, r1
     a40:	b2db      	uxtb	r3, r3
     a42:	3337      	adds	r3, #55	; 0x37
     a44:	b2db      	uxtb	r3, r3
     a46:	e007      	b.n	a58 <set_dev_name_to_mac+0xe4>
     a48:	683b      	ldr	r3, [r7, #0]
     a4a:	3304      	adds	r3, #4
     a4c:	781b      	ldrb	r3, [r3, #0]
     a4e:	210f      	movs	r1, #15
     a50:	400b      	ands	r3, r1
     a52:	b2db      	uxtb	r3, r3
     a54:	3330      	adds	r3, #48	; 0x30
     a56:	b2db      	uxtb	r3, r3
     a58:	7013      	strb	r3, [r2, #0]
        name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
     a5a:	230e      	movs	r3, #14
     a5c:	18fb      	adds	r3, r7, r3
     a5e:	881b      	ldrh	r3, [r3, #0]
     a60:	3b05      	subs	r3, #5
     a62:	687a      	ldr	r2, [r7, #4]
     a64:	18d2      	adds	r2, r2, r3
     a66:	683b      	ldr	r3, [r7, #0]
     a68:	3304      	adds	r3, #4
     a6a:	781b      	ldrb	r3, [r3, #0]
     a6c:	091b      	lsrs	r3, r3, #4
     a6e:	b2db      	uxtb	r3, r3
     a70:	0019      	movs	r1, r3
     a72:	230f      	movs	r3, #15
     a74:	400b      	ands	r3, r1
     a76:	2b09      	cmp	r3, #9
     a78:	dd07      	ble.n	a8a <set_dev_name_to_mac+0x116>
     a7a:	683b      	ldr	r3, [r7, #0]
     a7c:	3304      	adds	r3, #4
     a7e:	781b      	ldrb	r3, [r3, #0]
     a80:	091b      	lsrs	r3, r3, #4
     a82:	b2db      	uxtb	r3, r3
     a84:	3337      	adds	r3, #55	; 0x37
     a86:	b2db      	uxtb	r3, r3
     a88:	e006      	b.n	a98 <set_dev_name_to_mac+0x124>
     a8a:	683b      	ldr	r3, [r7, #0]
     a8c:	3304      	adds	r3, #4
     a8e:	781b      	ldrb	r3, [r3, #0]
     a90:	091b      	lsrs	r3, r3, #4
     a92:	b2db      	uxtb	r3, r3
     a94:	3330      	adds	r3, #48	; 0x30
     a96:	b2db      	uxtb	r3, r3
     a98:	7013      	strb	r3, [r2, #0]
    }
}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	46bd      	mov	sp, r7
     a9e:	b005      	add	sp, #20
     aa0:	bd90      	pop	{r4, r7, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	00003efd 	.word	0x00003efd

00000aa8 <wifi_init>:

void wifi_init(void)
{
     aa8:	b590      	push	{r4, r7, lr}
     aaa:	b08d      	sub	sp, #52	; 0x34
     aac:	af02      	add	r7, sp, #8
    int8_t s8InitStatus;
    uint8 mac_addr[6];
    uint8 u8IsMacAddrValid;    

    /* Initialize the Wi-Fi BSP. */
    nm_bsp_init();
     aae:	4b39      	ldr	r3, [pc, #228]	; (b94 <wifi_init+0xec>)
     ab0:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
     ab2:	230c      	movs	r3, #12
     ab4:	18fb      	adds	r3, r7, r3
     ab6:	2218      	movs	r2, #24
     ab8:	2100      	movs	r1, #0
     aba:	0018      	movs	r0, r3
     abc:	4b36      	ldr	r3, [pc, #216]	; (b98 <wifi_init+0xf0>)
     abe:	4798      	blx	r3
    wifiInitParam.pfAppWifiCb = m2m_wifi_state;
     ac0:	230c      	movs	r3, #12
     ac2:	18fb      	adds	r3, r7, r3
     ac4:	4a35      	ldr	r2, [pc, #212]	; (b9c <wifi_init+0xf4>)
     ac6:	601a      	str	r2, [r3, #0]
    
    /* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
    s8InitStatus = m2m_wifi_init(&wifiInitParam);
     ac8:	2327      	movs	r3, #39	; 0x27
     aca:	18fc      	adds	r4, r7, r3
     acc:	230c      	movs	r3, #12
     ace:	18fb      	adds	r3, r7, r3
     ad0:	0018      	movs	r0, r3
     ad2:	4b33      	ldr	r3, [pc, #204]	; (ba0 <wifi_init+0xf8>)
     ad4:	4798      	blx	r3
     ad6:	0003      	movs	r3, r0
     ad8:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != s8InitStatus) {
     ada:	2327      	movs	r3, #39	; 0x27
     adc:	18fb      	adds	r3, r7, r3
     ade:	781b      	ldrb	r3, [r3, #0]
     ae0:	b25b      	sxtb	r3, r3
     ae2:	2b00      	cmp	r3, #0
     ae4:	d004      	beq.n	af0 <wifi_init+0x48>
        printf("main: m2m_wifi_init call error!\r\n");
     ae6:	4b2f      	ldr	r3, [pc, #188]	; (ba4 <wifi_init+0xfc>)
     ae8:	0018      	movs	r0, r3
     aea:	4b2f      	ldr	r3, [pc, #188]	; (ba8 <wifi_init+0x100>)
     aec:	4798      	blx	r3
        while (1) {
        }
     aee:	e7fe      	b.n	aee <wifi_init+0x46>
    }

    /* Initialize Socket API. */
    socketInit();
     af0:	4b2e      	ldr	r3, [pc, #184]	; (bac <wifi_init+0x104>)
     af2:	4798      	blx	r3
    registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
     af4:	4a2e      	ldr	r2, [pc, #184]	; (bb0 <wifi_init+0x108>)
     af6:	4b2f      	ldr	r3, [pc, #188]	; (bb4 <wifi_init+0x10c>)
     af8:	0011      	movs	r1, r2
     afa:	0018      	movs	r0, r3
     afc:	4b2e      	ldr	r3, [pc, #184]	; (bb8 <wifi_init+0x110>)
     afe:	4798      	blx	r3

    /* Read MAC address to customize device name and AP name if enabled. */
    m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
     b00:	1cfa      	adds	r2, r7, #3
     b02:	1d3b      	adds	r3, r7, #4
     b04:	0011      	movs	r1, r2
     b06:	0018      	movs	r0, r3
     b08:	4b2c      	ldr	r3, [pc, #176]	; (bbc <wifi_init+0x114>)
     b0a:	4798      	blx	r3
    if (!u8IsMacAddrValid) {
     b0c:	1cfb      	adds	r3, r7, #3
     b0e:	781b      	ldrb	r3, [r3, #0]
     b10:	2b00      	cmp	r3, #0
     b12:	d108      	bne.n	b26 <wifi_init+0x7e>
        printf("main: MAC address fuse bit has not been configured!\r\n");
     b14:	4b2a      	ldr	r3, [pc, #168]	; (bc0 <wifi_init+0x118>)
     b16:	0018      	movs	r0, r3
     b18:	4b23      	ldr	r3, [pc, #140]	; (ba8 <wifi_init+0x100>)
     b1a:	4798      	blx	r3
        printf("main: Use m2m_wifi_set_mac_address() API to set MAC address via software.\r\n");
     b1c:	4b29      	ldr	r3, [pc, #164]	; (bc4 <wifi_init+0x11c>)
     b1e:	0018      	movs	r0, r3
     b20:	4b21      	ldr	r3, [pc, #132]	; (ba8 <wifi_init+0x100>)
     b22:	4798      	blx	r3
        while (1) {
        }
     b24:	e7fe      	b.n	b24 <wifi_init+0x7c>
    }
    m2m_wifi_get_mac_address(mac_addr);
     b26:	1d3b      	adds	r3, r7, #4
     b28:	0018      	movs	r0, r3
     b2a:	4b27      	ldr	r3, [pc, #156]	; (bc8 <wifi_init+0x120>)
     b2c:	4798      	blx	r3
    set_dev_name_to_mac((uint8 *)PubNubChannel, mac_addr);
     b2e:	1d3a      	adds	r2, r7, #4
     b30:	4b26      	ldr	r3, [pc, #152]	; (bcc <wifi_init+0x124>)
     b32:	0011      	movs	r1, r2
     b34:	0018      	movs	r0, r3
     b36:	4b26      	ldr	r3, [pc, #152]	; (bd0 <wifi_init+0x128>)
     b38:	4798      	blx	r3
    printf("\r\n");
     b3a:	4b26      	ldr	r3, [pc, #152]	; (bd4 <wifi_init+0x12c>)
     b3c:	0018      	movs	r0, r3
     b3e:	4b1a      	ldr	r3, [pc, #104]	; (ba8 <wifi_init+0x100>)
     b40:	4798      	blx	r3

    /* Initialize PubNub API. */
    printf("main: PubNub configured with following settings:\r\n");
     b42:	4b25      	ldr	r3, [pc, #148]	; (bd8 <wifi_init+0x130>)
     b44:	0018      	movs	r0, r3
     b46:	4b18      	ldr	r3, [pc, #96]	; (ba8 <wifi_init+0x100>)
     b48:	4798      	blx	r3
    printf("main:  - Publish key: \"%s\", Subscribe key: \"%s\", Channel: \"%s\".\r\n\r\n",
     b4a:	4b20      	ldr	r3, [pc, #128]	; (bcc <wifi_init+0x124>)
     b4c:	4a23      	ldr	r2, [pc, #140]	; (bdc <wifi_init+0x134>)
     b4e:	4924      	ldr	r1, [pc, #144]	; (be0 <wifi_init+0x138>)
     b50:	4824      	ldr	r0, [pc, #144]	; (be4 <wifi_init+0x13c>)
     b52:	4c25      	ldr	r4, [pc, #148]	; (be8 <wifi_init+0x140>)
     b54:	47a0      	blx	r4
    PubNubPublishKey, PubNubSubscribeKey, PubNubChannel);
    pPubNubCfg = pubnub_get_ctx(0);
     b56:	2000      	movs	r0, #0
     b58:	4b24      	ldr	r3, [pc, #144]	; (bec <wifi_init+0x144>)
     b5a:	4798      	blx	r3
     b5c:	0002      	movs	r2, r0
     b5e:	4b24      	ldr	r3, [pc, #144]	; (bf0 <wifi_init+0x148>)
     b60:	601a      	str	r2, [r3, #0]
    pubnub_init(pPubNubCfg, PubNubPublishKey, PubNubSubscribeKey);
     b62:	4b23      	ldr	r3, [pc, #140]	; (bf0 <wifi_init+0x148>)
     b64:	681b      	ldr	r3, [r3, #0]
     b66:	4a1d      	ldr	r2, [pc, #116]	; (bdc <wifi_init+0x134>)
     b68:	491d      	ldr	r1, [pc, #116]	; (be0 <wifi_init+0x138>)
     b6a:	0018      	movs	r0, r3
     b6c:	4b21      	ldr	r3, [pc, #132]	; (bf4 <wifi_init+0x14c>)
     b6e:	4798      	blx	r3

    /* Connect to AP using Wi-Fi settings from main.h. */
    printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
     b70:	4b21      	ldr	r3, [pc, #132]	; (bf8 <wifi_init+0x150>)
     b72:	0018      	movs	r0, r3
     b74:	4b0c      	ldr	r3, [pc, #48]	; (ba8 <wifi_init+0x100>)
     b76:	4798      	blx	r3
    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
     b78:	4a20      	ldr	r2, [pc, #128]	; (bfc <wifi_init+0x154>)
     b7a:	4821      	ldr	r0, [pc, #132]	; (c00 <wifi_init+0x158>)
     b7c:	23ff      	movs	r3, #255	; 0xff
     b7e:	9300      	str	r3, [sp, #0]
     b80:	0013      	movs	r3, r2
     b82:	2202      	movs	r2, #2
     b84:	211b      	movs	r1, #27
     b86:	4c1f      	ldr	r4, [pc, #124]	; (c04 <wifi_init+0x15c>)
     b88:	47a0      	blx	r4
    MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	46bd      	mov	sp, r7
     b8e:	b00b      	add	sp, #44	; 0x2c
     b90:	bd90      	pop	{r4, r7, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00003545 	.word	0x00003545
     b98:	00010de7 	.word	0x00010de7
     b9c:	000008ad 	.word	0x000008ad
     ba0:	000050f5 	.word	0x000050f5
     ba4:	000127ec 	.word	0x000127ec
     ba8:	000115f9 	.word	0x000115f9
     bac:	000080a9 	.word	0x000080a9
     bb0:	0000081d 	.word	0x0000081d
     bb4:	00000879 	.word	0x00000879
     bb8:	000080f9 	.word	0x000080f9
     bbc:	00005759 	.word	0x00005759
     bc0:	00012810 	.word	0x00012810
     bc4:	00012848 	.word	0x00012848
     bc8:	000057cd 	.word	0x000057cd
     bcc:	2000000c 	.word	0x2000000c
     bd0:	00000975 	.word	0x00000975
     bd4:	00012894 	.word	0x00012894
     bd8:	00012898 	.word	0x00012898
     bdc:	000126bc 	.word	0x000126bc
     be0:	000126b4 	.word	0x000126b4
     be4:	000128cc 	.word	0x000128cc
     be8:	000114d9 	.word	0x000114d9
     bec:	000102a9 	.word	0x000102a9
     bf0:	200000c0 	.word	0x200000c0
     bf4:	000102f9 	.word	0x000102f9
     bf8:	00012910 	.word	0x00012910
     bfc:	00012788 	.word	0x00012788
     c00:	00012794 	.word	0x00012794
     c04:	0000529d 	.word	0x0000529d

00000c08 <wifi_task_3s>:

void wifi_task_3s(void)
{    
     c08:	b5b0      	push	{r4, r5, r7, lr}
     c0a:	b0c4      	sub	sp, #272	; 0x110
     c0c:	af02      	add	r7, sp, #8
    uint16_t light = 0;
     c0e:	1dfb      	adds	r3, r7, #7
     c10:	33ff      	adds	r3, #255	; 0xff
     c12:	2200      	movs	r2, #0
     c14:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
     c16:	4b24      	ldr	r3, [pc, #144]	; (ca8 <wifi_task_3s+0xa0>)
     c18:	2284      	movs	r2, #132	; 0x84
     c1a:	0052      	lsls	r2, r2, #1
     c1c:	4694      	mov	ip, r2
     c1e:	44bc      	add	ip, r7
     c20:	4463      	add	r3, ip
     c22:	0018      	movs	r0, r3
     c24:	2380      	movs	r3, #128	; 0x80
     c26:	005b      	lsls	r3, r3, #1
     c28:	001a      	movs	r2, r3
     c2a:	2100      	movs	r1, #0
     c2c:	4b1f      	ldr	r3, [pc, #124]	; (cac <wifi_task_3s+0xa4>)
     c2e:	4798      	blx	r3
    display_state_t *disp = display_get_display_state();
     c30:	4b1f      	ldr	r3, [pc, #124]	; (cb0 <wifi_task_3s+0xa8>)
     c32:	4798      	blx	r3
     c34:	0003      	movs	r3, r0
     c36:	1c7a      	adds	r2, r7, #1
     c38:	32ff      	adds	r2, #255	; 0xff
     c3a:	6013      	str	r3, [r2, #0]

    if (gWifiState == WifiStateConnected) {        
     c3c:	4b1d      	ldr	r3, [pc, #116]	; (cb4 <wifi_task_3s+0xac>)
     c3e:	781b      	ldrb	r3, [r3, #0]
     c40:	b2db      	uxtb	r3, r3
     c42:	2b03      	cmp	r3, #3
     c44:	d12b      	bne.n	c9e <wifi_task_3s+0x96>
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");*/
        
        sprintf(buf, "{\"device\":\"%s\", \"water_temp\":\"%d\", \"set_temp\":\"%d\", "
                     "\"degrees_F\":\"%d\"}",
            PubNubChannel,
            thermal_get_water_temp(), 
     c46:	4b1c      	ldr	r3, [pc, #112]	; (cb8 <wifi_task_3s+0xb0>)
     c48:	4798      	blx	r3
     c4a:	0003      	movs	r3, r0
            PubNubChannel,
            thermal_get_water_temp(),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");*/
        
        sprintf(buf, "{\"device\":\"%s\", \"water_temp\":\"%d\", \"set_temp\":\"%d\", "
     c4c:	001d      	movs	r5, r3
                     "\"degrees_F\":\"%d\"}",
            PubNubChannel,
            thermal_get_water_temp(), 
            thermal_get_temperature(),
     c4e:	4b1b      	ldr	r3, [pc, #108]	; (cbc <wifi_task_3s+0xb4>)
     c50:	4798      	blx	r3
     c52:	0003      	movs	r3, r0
            PubNubChannel,
            thermal_get_water_temp(),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");*/
        
        sprintf(buf, "{\"device\":\"%s\", \"water_temp\":\"%d\", \"set_temp\":\"%d\", "
     c54:	001c      	movs	r4, r3
                     "\"degrees_F\":\"%d\"}",
            PubNubChannel,
            thermal_get_water_temp(), 
            thermal_get_temperature(),
            disp->degrees_F);
     c56:	1c7b      	adds	r3, r7, #1
     c58:	33ff      	adds	r3, #255	; 0xff
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	78db      	ldrb	r3, [r3, #3]
            PubNubChannel,
            thermal_get_water_temp(),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");*/
        
        sprintf(buf, "{\"device\":\"%s\", \"water_temp\":\"%d\", \"set_temp\":\"%d\", "
     c5e:	4a18      	ldr	r2, [pc, #96]	; (cc0 <wifi_task_3s+0xb8>)
     c60:	4918      	ldr	r1, [pc, #96]	; (cc4 <wifi_task_3s+0xbc>)
     c62:	0038      	movs	r0, r7
     c64:	9301      	str	r3, [sp, #4]
     c66:	9400      	str	r4, [sp, #0]
     c68:	002b      	movs	r3, r5
     c6a:	4c17      	ldr	r4, [pc, #92]	; (cc8 <wifi_task_3s+0xc0>)
     c6c:	47a0      	blx	r4
            PubNubChannel,
            thermal_get_water_temp(), 
            thermal_get_temperature(),
            disp->degrees_F);
            
        close(pPubNubCfg->tcp_socket);
     c6e:	4b17      	ldr	r3, [pc, #92]	; (ccc <wifi_task_3s+0xc4>)
     c70:	681b      	ldr	r3, [r3, #0]
     c72:	2253      	movs	r2, #83	; 0x53
     c74:	569b      	ldrsb	r3, [r3, r2]
     c76:	0018      	movs	r0, r3
     c78:	4b15      	ldr	r3, [pc, #84]	; (cd0 <wifi_task_3s+0xc8>)
     c7a:	4798      	blx	r3
        pPubNubCfg->state = PS_IDLE;
     c7c:	4b13      	ldr	r3, [pc, #76]	; (ccc <wifi_task_3s+0xc4>)
     c7e:	681b      	ldr	r3, [r3, #0]
     c80:	2252      	movs	r2, #82	; 0x52
     c82:	2100      	movs	r1, #0
     c84:	5499      	strb	r1, [r3, r2]
        pPubNubCfg->last_result = PNR_IO_ERROR;
     c86:	4b11      	ldr	r3, [pc, #68]	; (ccc <wifi_task_3s+0xc4>)
     c88:	681b      	ldr	r3, [r3, #0]
     c8a:	2250      	movs	r2, #80	; 0x50
     c8c:	2102      	movs	r1, #2
     c8e:	5499      	strb	r1, [r3, r2]
        pubnub_publish(pPubNubCfg, PubNubChannel, buf);
     c90:	4b0e      	ldr	r3, [pc, #56]	; (ccc <wifi_task_3s+0xc4>)
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	003a      	movs	r2, r7
     c96:	490a      	ldr	r1, [pc, #40]	; (cc0 <wifi_task_3s+0xb8>)
     c98:	0018      	movs	r0, r3
     c9a:	4b0e      	ldr	r3, [pc, #56]	; (cd4 <wifi_task_3s+0xcc>)
     c9c:	4798      	blx	r3
    }

}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	46bd      	mov	sp, r7
     ca2:	b042      	add	sp, #264	; 0x108
     ca4:	bdb0      	pop	{r4, r5, r7, pc}
     ca6:	46c0      	nop			; (mov r8, r8)
     ca8:	fffffef8 	.word	0xfffffef8
     cac:	00010de7 	.word	0x00010de7
     cb0:	00001f09 	.word	0x00001f09
     cb4:	200000bc 	.word	0x200000bc
     cb8:	000027b5 	.word	0x000027b5
     cbc:	000027a1 	.word	0x000027a1
     cc0:	2000000c 	.word	0x2000000c
     cc4:	00012950 	.word	0x00012950
     cc8:	00011809 	.word	0x00011809
     ccc:	200000c0 	.word	0x200000c0
     cd0:	00008671 	.word	0x00008671
     cd4:	0001037d 	.word	0x0001037d

00000cd8 <wifi_task_1s>:

void wifi_task_1s(void)
{
     cd8:	b590      	push	{r4, r7, lr}
     cda:	b089      	sub	sp, #36	; 0x24
     cdc:	af02      	add	r7, sp, #8
    uint8_t handler_index = 0;
     cde:	2317      	movs	r3, #23
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	2200      	movs	r2, #0
     ce4:	701a      	strb	r2, [r3, #0]
    jsmntok_t *key_index;
    int jsmn_retval;
    char *msg;

    /* Device is connected to AP. */
    if (gWifiState == WifiStateConnected) {
     ce6:	4b86      	ldr	r3, [pc, #536]	; (f00 <wifi_task_1s+0x228>)
     ce8:	781b      	ldrb	r3, [r3, #0]
     cea:	b2db      	uxtb	r3, r3
     cec:	2b03      	cmp	r3, #3
     cee:	d000      	beq.n	cf2 <wifi_task_1s+0x1a>
     cf0:	e101      	b.n	ef6 <wifi_task_1s+0x21e>
        /* PubNub: read event from the cloud. */
        if (pPubNubCfg->state == PS_IDLE) {
     cf2:	4b84      	ldr	r3, [pc, #528]	; (f04 <wifi_task_1s+0x22c>)
     cf4:	681b      	ldr	r3, [r3, #0]
     cf6:	2252      	movs	r2, #82	; 0x52
     cf8:	5c9b      	ldrb	r3, [r3, r2]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d000      	beq.n	d00 <wifi_task_1s+0x28>
     cfe:	e0fa      	b.n	ef6 <wifi_task_1s+0x21e>
            /* Subscribe at the beginning and re-subscribe after every publish. */
            if ((pPubNubCfg->trans == PBTT_NONE) ||
     d00:	4b80      	ldr	r3, [pc, #512]	; (f04 <wifi_task_1s+0x22c>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	2251      	movs	r2, #81	; 0x51
     d06:	5c9b      	ldrb	r3, [r3, r2]
     d08:	2b00      	cmp	r3, #0
     d0a:	d00b      	beq.n	d24 <wifi_task_1s+0x4c>
            (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
     d0c:	4b7d      	ldr	r3, [pc, #500]	; (f04 <wifi_task_1s+0x22c>)
     d0e:	681b      	ldr	r3, [r3, #0]
     d10:	2251      	movs	r2, #81	; 0x51
     d12:	5c9b      	ldrb	r3, [r3, r2]
    /* Device is connected to AP. */
    if (gWifiState == WifiStateConnected) {
        /* PubNub: read event from the cloud. */
        if (pPubNubCfg->state == PS_IDLE) {
            /* Subscribe at the beginning and re-subscribe after every publish. */
            if ((pPubNubCfg->trans == PBTT_NONE) ||
     d14:	2b02      	cmp	r3, #2
     d16:	d110      	bne.n	d3a <wifi_task_1s+0x62>
            (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
     d18:	4b7a      	ldr	r3, [pc, #488]	; (f04 <wifi_task_1s+0x22c>)
     d1a:	681b      	ldr	r3, [r3, #0]
     d1c:	2250      	movs	r2, #80	; 0x50
     d1e:	5c9b      	ldrb	r3, [r3, r2]
     d20:	2b00      	cmp	r3, #0
     d22:	d10a      	bne.n	d3a <wifi_task_1s+0x62>
                printf("main: subscribe event, PNR_OK\r\n");
     d24:	4b78      	ldr	r3, [pc, #480]	; (f08 <wifi_task_1s+0x230>)
     d26:	0018      	movs	r0, r3
     d28:	4b78      	ldr	r3, [pc, #480]	; (f0c <wifi_task_1s+0x234>)
     d2a:	4798      	blx	r3
                pubnub_subscribe(pPubNubCfg, PubNubChannel);
     d2c:	4b75      	ldr	r3, [pc, #468]	; (f04 <wifi_task_1s+0x22c>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	4a77      	ldr	r2, [pc, #476]	; (f10 <wifi_task_1s+0x238>)
     d32:	0011      	movs	r1, r2
     d34:	0018      	movs	r0, r3
     d36:	4b77      	ldr	r3, [pc, #476]	; (f14 <wifi_task_1s+0x23c>)
     d38:	4798      	blx	r3
            }

            /* Process any received messages from the channel we subscribed. */
            while (1) {    
check_msg:                    
                msg = (char *) pubnub_get(pPubNubCfg);
     d3a:	4b72      	ldr	r3, [pc, #456]	; (f04 <wifi_task_1s+0x22c>)
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	0018      	movs	r0, r3
     d40:	4b75      	ldr	r3, [pc, #468]	; (f18 <wifi_task_1s+0x240>)
     d42:	4798      	blx	r3
     d44:	0003      	movs	r3, r0
     d46:	60fb      	str	r3, [r7, #12]
                if (NULL == msg) {
     d48:	68fb      	ldr	r3, [r7, #12]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d100      	bne.n	d50 <wifi_task_1s+0x78>
     d4e:	e0ca      	b.n	ee6 <wifi_task_1s+0x20e>
                    /* No more message to process. */
                    break;
                }

                if (0 == (strncmp(&msg[2], wifi_handlers[handler_index].json_string, wifi_handlers[handler_index].string_size))) {
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	1c98      	adds	r0, r3, #2
     d54:	2317      	movs	r3, #23
     d56:	18fb      	adds	r3, r7, r3
     d58:	781a      	ldrb	r2, [r3, #0]
     d5a:	4970      	ldr	r1, [pc, #448]	; (f1c <wifi_task_1s+0x244>)
     d5c:	0013      	movs	r3, r2
     d5e:	005b      	lsls	r3, r3, #1
     d60:	189b      	adds	r3, r3, r2
     d62:	009b      	lsls	r3, r3, #2
     d64:	585c      	ldr	r4, [r3, r1]
     d66:	2317      	movs	r3, #23
     d68:	18fb      	adds	r3, r7, r3
     d6a:	781a      	ldrb	r2, [r3, #0]
     d6c:	496b      	ldr	r1, [pc, #428]	; (f1c <wifi_task_1s+0x244>)
     d6e:	0013      	movs	r3, r2
     d70:	005b      	lsls	r3, r3, #1
     d72:	189b      	adds	r3, r3, r2
     d74:	009b      	lsls	r3, r3, #2
     d76:	18cb      	adds	r3, r1, r3
     d78:	3304      	adds	r3, #4
     d7a:	781b      	ldrb	r3, [r3, #0]
     d7c:	001a      	movs	r2, r3
     d7e:	0021      	movs	r1, r4
     d80:	4b67      	ldr	r3, [pc, #412]	; (f20 <wifi_task_1s+0x248>)
     d82:	4798      	blx	r3
                    
                }

realloc_tokens:
                tokens = malloc(sizeof(jsmntok_t) * num_tokens);
     d84:	4b67      	ldr	r3, [pc, #412]	; (f24 <wifi_task_1s+0x24c>)
     d86:	781b      	ldrb	r3, [r3, #0]
     d88:	011b      	lsls	r3, r3, #4
     d8a:	0018      	movs	r0, r3
     d8c:	4b66      	ldr	r3, [pc, #408]	; (f28 <wifi_task_1s+0x250>)
     d8e:	4798      	blx	r3
     d90:	0003      	movs	r3, r0
     d92:	60bb      	str	r3, [r7, #8]
                if (tokens == NULL) {
     d94:	68bb      	ldr	r3, [r7, #8]
     d96:	2b00      	cmp	r3, #0
     d98:	d104      	bne.n	da4 <wifi_task_1s+0xcc>
                    printf("wifi_task_1s: could not allocate memory for tokens\n");
     d9a:	4b64      	ldr	r3, [pc, #400]	; (f2c <wifi_task_1s+0x254>)
     d9c:	0018      	movs	r0, r3
     d9e:	4b5b      	ldr	r3, [pc, #364]	; (f0c <wifi_task_1s+0x234>)
     da0:	4798      	blx	r3
                    break;
     da2:	e0a1      	b.n	ee8 <wifi_task_1s+0x210>
                }

                // Initialize JSMN parser
                jsmn_init(&parser);
     da4:	4b62      	ldr	r3, [pc, #392]	; (f30 <wifi_task_1s+0x258>)
     da6:	0018      	movs	r0, r3
     da8:	4b62      	ldr	r3, [pc, #392]	; (f34 <wifi_task_1s+0x25c>)
     daa:	4798      	blx	r3

                jsmn_retval = jsmn_parse(&parser, msg, strlen(msg), tokens, num_tokens);
     dac:	68fb      	ldr	r3, [r7, #12]
     dae:	0018      	movs	r0, r3
     db0:	4b61      	ldr	r3, [pc, #388]	; (f38 <wifi_task_1s+0x260>)
     db2:	4798      	blx	r3
     db4:	0004      	movs	r4, r0
     db6:	4b5b      	ldr	r3, [pc, #364]	; (f24 <wifi_task_1s+0x24c>)
     db8:	781b      	ldrb	r3, [r3, #0]
     dba:	001a      	movs	r2, r3
     dbc:	68bb      	ldr	r3, [r7, #8]
     dbe:	68f9      	ldr	r1, [r7, #12]
     dc0:	485b      	ldr	r0, [pc, #364]	; (f30 <wifi_task_1s+0x258>)
     dc2:	9200      	str	r2, [sp, #0]
     dc4:	0022      	movs	r2, r4
     dc6:	4c5d      	ldr	r4, [pc, #372]	; (f3c <wifi_task_1s+0x264>)
     dc8:	47a0      	blx	r4
     dca:	0003      	movs	r3, r0
     dcc:	607b      	str	r3, [r7, #4]
                if (jsmn_retval == JSMN_ERROR_NOMEM) {
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	3301      	adds	r3, #1
     dd2:	d10a      	bne.n	dea <wifi_task_1s+0x112>
                    // Didn't allocate enough tokens. Try again 
                    num_tokens++;
     dd4:	4b53      	ldr	r3, [pc, #332]	; (f24 <wifi_task_1s+0x24c>)
     dd6:	781b      	ldrb	r3, [r3, #0]
     dd8:	3301      	adds	r3, #1
     dda:	b2da      	uxtb	r2, r3
     ddc:	4b51      	ldr	r3, [pc, #324]	; (f24 <wifi_task_1s+0x24c>)
     dde:	701a      	strb	r2, [r3, #0]
                    free(tokens);
     de0:	68bb      	ldr	r3, [r7, #8]
     de2:	0018      	movs	r0, r3
     de4:	4b56      	ldr	r3, [pc, #344]	; (f40 <wifi_task_1s+0x268>)
     de6:	4798      	blx	r3
                    goto realloc_tokens;
     de8:	e7cc      	b.n	d84 <wifi_task_1s+0xac>
                }
                else if (jsmn_retval == JSMN_ERROR_INVAL) {
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	3302      	adds	r3, #2
     dee:	d104      	bne.n	dfa <wifi_task_1s+0x122>
                    // Invalid data. Just return
                    free(tokens);
     df0:	68bb      	ldr	r3, [r7, #8]
     df2:	0018      	movs	r0, r3
     df4:	4b52      	ldr	r3, [pc, #328]	; (f40 <wifi_task_1s+0x268>)
     df6:	4798      	blx	r3
     df8:	e79f      	b.n	d3a <wifi_task_1s+0x62>
                }
                else if (jsmn_retval == JSMN_ERROR_PART) {
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	3303      	adds	r3, #3
     dfe:	d104      	bne.n	e0a <wifi_task_1s+0x132>
                    // JSON string is too short. Just return.
                    free(tokens);
     e00:	68bb      	ldr	r3, [r7, #8]
     e02:	0018      	movs	r0, r3
     e04:	4b4e      	ldr	r3, [pc, #312]	; (f40 <wifi_task_1s+0x268>)
     e06:	4798      	blx	r3
     e08:	e797      	b.n	d3a <wifi_task_1s+0x62>
                }
                else {    
                    key_index = tokens;
     e0a:	68bb      	ldr	r3, [r7, #8]
     e0c:	613b      	str	r3, [r7, #16]
                    if (key_index->type == JSMN_OBJECT) 
     e0e:	693b      	ldr	r3, [r7, #16]
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	2b01      	cmp	r3, #1
     e14:	d102      	bne.n	e1c <wifi_task_1s+0x144>
                        // Object shows up as the first item in the token list. Skip it
                        key_index++;
     e16:	693b      	ldr	r3, [r7, #16]
     e18:	3310      	adds	r3, #16
     e1a:	613b      	str	r3, [r7, #16]

                    // For some reason, our own messages show up. So, if the next token is "device", ignore the entire
                    // message.                    
                    if (0 == (strncmp(&msg[key_index->start], "device", strlen("device")))) {
     e1c:	693b      	ldr	r3, [r7, #16]
     e1e:	685b      	ldr	r3, [r3, #4]
     e20:	001a      	movs	r2, r3
     e22:	68fb      	ldr	r3, [r7, #12]
     e24:	189b      	adds	r3, r3, r2
     e26:	4947      	ldr	r1, [pc, #284]	; (f44 <wifi_task_1s+0x26c>)
     e28:	2206      	movs	r2, #6
     e2a:	0018      	movs	r0, r3
     e2c:	4b3c      	ldr	r3, [pc, #240]	; (f20 <wifi_task_1s+0x248>)
     e2e:	4798      	blx	r3
     e30:	1e03      	subs	r3, r0, #0
     e32:	d14f      	bne.n	ed4 <wifi_task_1s+0x1fc>
                        free(tokens);
     e34:	68bb      	ldr	r3, [r7, #8]
     e36:	0018      	movs	r0, r3
     e38:	4b41      	ldr	r3, [pc, #260]	; (f40 <wifi_task_1s+0x268>)
     e3a:	4798      	blx	r3
     e3c:	2317      	movs	r3, #23
     e3e:	18fb      	adds	r3, r7, r3
     e40:	2217      	movs	r2, #23
     e42:	18ba      	adds	r2, r7, r2
     e44:	7812      	ldrb	r2, [r2, #0]
     e46:	701a      	strb	r2, [r3, #0]
                        goto check_msg;
     e48:	e777      	b.n	d3a <wifi_task_1s+0x62>
                    }
                    
                    // Search through the handlers for a valid handler for this key-value pair
                    while (key_index->type != JSMN_UNDEFINED) {
                        while (wifi_handlers[handler_index].json_string) {
                            if (0 == (strncmp(&msg[key_index->start], wifi_handlers[handler_index].json_string, key_index->end - key_index->start))) {
     e4a:	693b      	ldr	r3, [r7, #16]
     e4c:	685b      	ldr	r3, [r3, #4]
     e4e:	001a      	movs	r2, r3
     e50:	68fb      	ldr	r3, [r7, #12]
     e52:	1898      	adds	r0, r3, r2
     e54:	2317      	movs	r3, #23
     e56:	18fb      	adds	r3, r7, r3
     e58:	781a      	ldrb	r2, [r3, #0]
     e5a:	4930      	ldr	r1, [pc, #192]	; (f1c <wifi_task_1s+0x244>)
     e5c:	0013      	movs	r3, r2
     e5e:	005b      	lsls	r3, r3, #1
     e60:	189b      	adds	r3, r3, r2
     e62:	009b      	lsls	r3, r3, #2
     e64:	5859      	ldr	r1, [r3, r1]
     e66:	693b      	ldr	r3, [r7, #16]
     e68:	689a      	ldr	r2, [r3, #8]
     e6a:	693b      	ldr	r3, [r7, #16]
     e6c:	685b      	ldr	r3, [r3, #4]
     e6e:	1ad3      	subs	r3, r2, r3
     e70:	001a      	movs	r2, r3
     e72:	4b2b      	ldr	r3, [pc, #172]	; (f20 <wifi_task_1s+0x248>)
     e74:	4798      	blx	r3
     e76:	1e03      	subs	r3, r0, #0
     e78:	d113      	bne.n	ea2 <wifi_task_1s+0x1ca>
                                // Call the handler
                                wifi_handlers[handler_index].handler(msg, key_index, key_index + 1);                                
     e7a:	2317      	movs	r3, #23
     e7c:	18fb      	adds	r3, r7, r3
     e7e:	781a      	ldrb	r2, [r3, #0]
     e80:	4926      	ldr	r1, [pc, #152]	; (f1c <wifi_task_1s+0x244>)
     e82:	0013      	movs	r3, r2
     e84:	005b      	lsls	r3, r3, #1
     e86:	189b      	adds	r3, r3, r2
     e88:	009b      	lsls	r3, r3, #2
     e8a:	18cb      	adds	r3, r1, r3
     e8c:	3308      	adds	r3, #8
     e8e:	681b      	ldr	r3, [r3, #0]
     e90:	693a      	ldr	r2, [r7, #16]
     e92:	3210      	adds	r2, #16
     e94:	6939      	ldr	r1, [r7, #16]
     e96:	68f8      	ldr	r0, [r7, #12]
     e98:	4798      	blx	r3
                                key_index++;
     e9a:	693b      	ldr	r3, [r7, #16]
     e9c:	3310      	adds	r3, #16
     e9e:	613b      	str	r3, [r7, #16]
                                break;
     ea0:	e011      	b.n	ec6 <wifi_task_1s+0x1ee>
                            }
                            handler_index++;
     ea2:	2317      	movs	r3, #23
     ea4:	18fb      	adds	r3, r7, r3
     ea6:	781a      	ldrb	r2, [r3, #0]
     ea8:	2317      	movs	r3, #23
     eaa:	18fb      	adds	r3, r7, r3
     eac:	3201      	adds	r2, #1
     eae:	701a      	strb	r2, [r3, #0]
                        goto check_msg;
                    }
                    
                    // Search through the handlers for a valid handler for this key-value pair
                    while (key_index->type != JSMN_UNDEFINED) {
                        while (wifi_handlers[handler_index].json_string) {
     eb0:	2317      	movs	r3, #23
     eb2:	18fb      	adds	r3, r7, r3
     eb4:	781a      	ldrb	r2, [r3, #0]
     eb6:	4919      	ldr	r1, [pc, #100]	; (f1c <wifi_task_1s+0x244>)
     eb8:	0013      	movs	r3, r2
     eba:	005b      	lsls	r3, r3, #1
     ebc:	189b      	adds	r3, r3, r2
     ebe:	009b      	lsls	r3, r3, #2
     ec0:	585b      	ldr	r3, [r3, r1]
     ec2:	2b00      	cmp	r3, #0
     ec4:	d1c1      	bne.n	e4a <wifi_task_1s+0x172>
                                key_index++;
                                break;
                            }
                            handler_index++;
                        }
                        key_index++;
     ec6:	693b      	ldr	r3, [r7, #16]
     ec8:	3310      	adds	r3, #16
     eca:	613b      	str	r3, [r7, #16]
                        handler_index = 0;
     ecc:	2317      	movs	r3, #23
     ece:	18fb      	adds	r3, r7, r3
     ed0:	2200      	movs	r2, #0
     ed2:	701a      	strb	r2, [r3, #0]
                        free(tokens);
                        goto check_msg;
                    }
                    
                    // Search through the handlers for a valid handler for this key-value pair
                    while (key_index->type != JSMN_UNDEFINED) {
     ed4:	693b      	ldr	r3, [r7, #16]
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	2b00      	cmp	r3, #0
     eda:	d1e9      	bne.n	eb0 <wifi_task_1s+0x1d8>
                        //}
                        //} else {
                        ///* Any other type of JSON message. */
                        //printf("main: received message: %s\r\n", msg);
                    //}
                    free(tokens);
     edc:	68bb      	ldr	r3, [r7, #8]
     ede:	0018      	movs	r0, r3
     ee0:	4b17      	ldr	r3, [pc, #92]	; (f40 <wifi_task_1s+0x268>)
     ee2:	4798      	blx	r3
                }
            }
     ee4:	e729      	b.n	d3a <wifi_task_1s+0x62>
            while (1) {    
check_msg:                    
                msg = (char *) pubnub_get(pPubNubCfg);
                if (NULL == msg) {
                    /* No more message to process. */
                    break;
     ee6:	46c0      	nop			; (mov r8, r8)
                    free(tokens);
                }
            }

            /* Subscribe to receive pending messages. */
            pubnub_subscribe(pPubNubCfg, PubNubChannel);
     ee8:	4b06      	ldr	r3, [pc, #24]	; (f04 <wifi_task_1s+0x22c>)
     eea:	681b      	ldr	r3, [r3, #0]
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <wifi_task_1s+0x238>)
     eee:	0011      	movs	r1, r2
     ef0:	0018      	movs	r0, r3
     ef2:	4b08      	ldr	r3, [pc, #32]	; (f14 <wifi_task_1s+0x23c>)
     ef4:	4798      	blx	r3
            
        }
    }
}
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	46bd      	mov	sp, r7
     efa:	b007      	add	sp, #28
     efc:	bd90      	pop	{r4, r7, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	200000bc 	.word	0x200000bc
     f04:	200000c0 	.word	0x200000c0
     f08:	00012998 	.word	0x00012998
     f0c:	000115f9 	.word	0x000115f9
     f10:	2000000c 	.word	0x2000000c
     f14:	00010575 	.word	0x00010575
     f18:	000106f1 	.word	0x000106f1
     f1c:	000129f4 	.word	0x000129f4
     f20:	0001187f 	.word	0x0001187f
     f24:	2000001b 	.word	0x2000001b
     f28:	00010dad 	.word	0x00010dad
     f2c:	000129b8 	.word	0x000129b8
     f30:	200045a4 	.word	0x200045a4
     f34:	0000079d 	.word	0x0000079d
     f38:	00011871 	.word	0x00011871
     f3c:	00000451 	.word	0x00000451
     f40:	00010dc1 	.word	0x00010dc1
     f44:	000129ec 	.word	0x000129ec

00000f48 <wifi_task_idle>:

void wifi_task_idle(void)
{
     f48:	b580      	push	{r7, lr}
     f4a:	af00      	add	r7, sp, #0
    m2m_wifi_handle_events(NULL);   
     f4c:	2000      	movs	r0, #0
     f4e:	4b02      	ldr	r3, [pc, #8]	; (f58 <wifi_task_idle+0x10>)
     f50:	4798      	blx	r3

}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	46bd      	mov	sp, r7
     f56:	bd80      	pop	{r7, pc}
     f58:	00005281 	.word	0x00005281

00000f5c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     f5c:	b580      	push	{r7, lr}
     f5e:	af00      	add	r7, sp, #0
     f60:	2000      	movs	r0, #0
     f62:	4b02      	ldr	r3, [pc, #8]	; (f6c <TC3_Handler+0x10>)
     f64:	4798      	blx	r3
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	46bd      	mov	sp, r7
     f6a:	bd80      	pop	{r7, pc}
     f6c:	00000f99 	.word	0x00000f99

00000f70 <TC4_Handler>:
     f70:	b580      	push	{r7, lr}
     f72:	af00      	add	r7, sp, #0
     f74:	2001      	movs	r0, #1
     f76:	4b02      	ldr	r3, [pc, #8]	; (f80 <TC4_Handler+0x10>)
     f78:	4798      	blx	r3
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	46bd      	mov	sp, r7
     f7e:	bd80      	pop	{r7, pc}
     f80:	00000f99 	.word	0x00000f99

00000f84 <TC5_Handler>:
     f84:	b580      	push	{r7, lr}
     f86:	af00      	add	r7, sp, #0
     f88:	2002      	movs	r0, #2
     f8a:	4b02      	ldr	r3, [pc, #8]	; (f94 <TC5_Handler+0x10>)
     f8c:	4798      	blx	r3
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	46bd      	mov	sp, r7
     f92:	bd80      	pop	{r7, pc}
     f94:	00000f99 	.word	0x00000f99

00000f98 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     f98:	b580      	push	{r7, lr}
     f9a:	b084      	sub	sp, #16
     f9c:	af00      	add	r7, sp, #0
     f9e:	0002      	movs	r2, r0
     fa0:	1dfb      	adds	r3, r7, #7
     fa2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     fa4:	1dfb      	adds	r3, r7, #7
     fa6:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     fa8:	4b28      	ldr	r3, [pc, #160]	; (104c <_tc_interrupt_handler+0xb4>)
     faa:	0092      	lsls	r2, r2, #2
     fac:	58d3      	ldr	r3, [r2, r3]
     fae:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     fb0:	68fb      	ldr	r3, [r7, #12]
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	7b9b      	ldrb	r3, [r3, #14]
     fb6:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     fb8:	68fa      	ldr	r2, [r7, #12]
     fba:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     fbc:	4013      	ands	r3, r2
     fbe:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     fc0:	68fb      	ldr	r3, [r7, #12]
     fc2:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     fc4:	230b      	movs	r3, #11
     fc6:	18fb      	adds	r3, r7, r3
     fc8:	400a      	ands	r2, r1
     fca:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     fcc:	230b      	movs	r3, #11
     fce:	18fb      	adds	r3, r7, r3
     fd0:	781b      	ldrb	r3, [r3, #0]
     fd2:	2201      	movs	r2, #1
     fd4:	4013      	ands	r3, r2
     fd6:	d008      	beq.n	fea <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     fd8:	68fb      	ldr	r3, [r7, #12]
     fda:	689b      	ldr	r3, [r3, #8]
     fdc:	68fa      	ldr	r2, [r7, #12]
     fde:	0010      	movs	r0, r2
     fe0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     fe2:	68fb      	ldr	r3, [r7, #12]
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	2201      	movs	r2, #1
     fe8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     fea:	230b      	movs	r3, #11
     fec:	18fb      	adds	r3, r7, r3
     fee:	781b      	ldrb	r3, [r3, #0]
     ff0:	2202      	movs	r2, #2
     ff2:	4013      	ands	r3, r2
     ff4:	d008      	beq.n	1008 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     ff6:	68fb      	ldr	r3, [r7, #12]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	68fa      	ldr	r2, [r7, #12]
     ffc:	0010      	movs	r0, r2
     ffe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1000:	68fb      	ldr	r3, [r7, #12]
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	2202      	movs	r2, #2
    1006:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1008:	230b      	movs	r3, #11
    100a:	18fb      	adds	r3, r7, r3
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	2210      	movs	r2, #16
    1010:	4013      	ands	r3, r2
    1012:	d008      	beq.n	1026 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1014:	68fb      	ldr	r3, [r7, #12]
    1016:	691b      	ldr	r3, [r3, #16]
    1018:	68fa      	ldr	r2, [r7, #12]
    101a:	0010      	movs	r0, r2
    101c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    101e:	68fb      	ldr	r3, [r7, #12]
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	2210      	movs	r2, #16
    1024:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1026:	230b      	movs	r3, #11
    1028:	18fb      	adds	r3, r7, r3
    102a:	781b      	ldrb	r3, [r3, #0]
    102c:	2220      	movs	r2, #32
    102e:	4013      	ands	r3, r2
    1030:	d008      	beq.n	1044 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1032:	68fb      	ldr	r3, [r7, #12]
    1034:	695b      	ldr	r3, [r3, #20]
    1036:	68fa      	ldr	r2, [r7, #12]
    1038:	0010      	movs	r0, r2
    103a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	2220      	movs	r2, #32
    1042:	739a      	strb	r2, [r3, #14]
	}
}
    1044:	46c0      	nop			; (mov r8, r8)
    1046:	46bd      	mov	sp, r7
    1048:	b004      	add	sp, #16
    104a:	bd80      	pop	{r7, pc}
    104c:	200045b8 	.word	0x200045b8

00001050 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	2200      	movs	r2, #0
    105c:	701a      	strb	r2, [r3, #0]
}
    105e:	46c0      	nop			; (mov r8, r8)
    1060:	46bd      	mov	sp, r7
    1062:	b002      	add	sp, #8
    1064:	bd80      	pop	{r7, pc}
    1066:	46c0      	nop			; (mov r8, r8)

00001068 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1068:	b580      	push	{r7, lr}
    106a:	b082      	sub	sp, #8
    106c:	af00      	add	r7, sp, #0
    106e:	0002      	movs	r2, r0
    1070:	6039      	str	r1, [r7, #0]
    1072:	1dfb      	adds	r3, r7, #7
    1074:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1076:	1dfb      	adds	r3, r7, #7
    1078:	781b      	ldrb	r3, [r3, #0]
    107a:	2b01      	cmp	r3, #1
    107c:	d00a      	beq.n	1094 <system_apb_clock_set_mask+0x2c>
    107e:	2b02      	cmp	r3, #2
    1080:	d00f      	beq.n	10a2 <system_apb_clock_set_mask+0x3a>
    1082:	2b00      	cmp	r3, #0
    1084:	d114      	bne.n	10b0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1086:	4b0e      	ldr	r3, [pc, #56]	; (10c0 <system_apb_clock_set_mask+0x58>)
    1088:	4a0d      	ldr	r2, [pc, #52]	; (10c0 <system_apb_clock_set_mask+0x58>)
    108a:	6991      	ldr	r1, [r2, #24]
    108c:	683a      	ldr	r2, [r7, #0]
    108e:	430a      	orrs	r2, r1
    1090:	619a      	str	r2, [r3, #24]
			break;
    1092:	e00f      	b.n	10b4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1094:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <system_apb_clock_set_mask+0x58>)
    1096:	4a0a      	ldr	r2, [pc, #40]	; (10c0 <system_apb_clock_set_mask+0x58>)
    1098:	69d1      	ldr	r1, [r2, #28]
    109a:	683a      	ldr	r2, [r7, #0]
    109c:	430a      	orrs	r2, r1
    109e:	61da      	str	r2, [r3, #28]
			break;
    10a0:	e008      	b.n	10b4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    10a2:	4b07      	ldr	r3, [pc, #28]	; (10c0 <system_apb_clock_set_mask+0x58>)
    10a4:	4a06      	ldr	r2, [pc, #24]	; (10c0 <system_apb_clock_set_mask+0x58>)
    10a6:	6a11      	ldr	r1, [r2, #32]
    10a8:	683a      	ldr	r2, [r7, #0]
    10aa:	430a      	orrs	r2, r1
    10ac:	621a      	str	r2, [r3, #32]
			break;
    10ae:	e001      	b.n	10b4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    10b0:	2317      	movs	r3, #23
    10b2:	e000      	b.n	10b6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    10b4:	2300      	movs	r3, #0
}
    10b6:	0018      	movs	r0, r3
    10b8:	46bd      	mov	sp, r7
    10ba:	b002      	add	sp, #8
    10bc:	bd80      	pop	{r7, pc}
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	40000400 	.word	0x40000400

000010c4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	af00      	add	r7, sp, #0
    10ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    10cc:	687b      	ldr	r3, [r7, #4]
    10ce:	2280      	movs	r2, #128	; 0x80
    10d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	2200      	movs	r2, #0
    10d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10d8:	687b      	ldr	r3, [r7, #4]
    10da:	2201      	movs	r2, #1
    10dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	2200      	movs	r2, #0
    10e2:	70da      	strb	r2, [r3, #3]
}
    10e4:	46c0      	nop			; (mov r8, r8)
    10e6:	46bd      	mov	sp, r7
    10e8:	b002      	add	sp, #8
    10ea:	bd80      	pop	{r7, pc}

000010ec <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b084      	sub	sp, #16
    10f0:	af00      	add	r7, sp, #0
    10f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    10f4:	687b      	ldr	r3, [r7, #4]
    10f6:	681b      	ldr	r3, [r3, #0]
    10f8:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    10fa:	68fb      	ldr	r3, [r7, #12]
    10fc:	7bdb      	ldrb	r3, [r3, #15]
    10fe:	b2db      	uxtb	r3, r3
    1100:	001a      	movs	r2, r3
    1102:	2380      	movs	r3, #128	; 0x80
    1104:	4013      	ands	r3, r2
    1106:	1e5a      	subs	r2, r3, #1
    1108:	4193      	sbcs	r3, r2
    110a:	b2db      	uxtb	r3, r3
#endif
}
    110c:	0018      	movs	r0, r3
    110e:	46bd      	mov	sp, r7
    1110:	b004      	add	sp, #16
    1112:	bd80      	pop	{r7, pc}

00001114 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    1114:	b590      	push	{r4, r7, lr}
    1116:	b087      	sub	sp, #28
    1118:	af00      	add	r7, sp, #0
    111a:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    111c:	2308      	movs	r3, #8
    111e:	18fb      	adds	r3, r7, r3
    1120:	4a0d      	ldr	r2, [pc, #52]	; (1158 <_tc_get_inst_index+0x44>)
    1122:	ca13      	ldmia	r2!, {r0, r1, r4}
    1124:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1126:	2300      	movs	r3, #0
    1128:	617b      	str	r3, [r7, #20]
    112a:	e00d      	b.n	1148 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
    112c:	2308      	movs	r3, #8
    112e:	18fb      	adds	r3, r7, r3
    1130:	697a      	ldr	r2, [r7, #20]
    1132:	0092      	lsls	r2, r2, #2
    1134:	58d2      	ldr	r2, [r2, r3]
    1136:	687b      	ldr	r3, [r7, #4]
    1138:	429a      	cmp	r2, r3
    113a:	d102      	bne.n	1142 <_tc_get_inst_index+0x2e>
			return i;
    113c:	697b      	ldr	r3, [r7, #20]
    113e:	b2db      	uxtb	r3, r3
    1140:	e006      	b.n	1150 <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1142:	697b      	ldr	r3, [r7, #20]
    1144:	3301      	adds	r3, #1
    1146:	617b      	str	r3, [r7, #20]
    1148:	697b      	ldr	r3, [r7, #20]
    114a:	2b02      	cmp	r3, #2
    114c:	d9ee      	bls.n	112c <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    114e:	2300      	movs	r3, #0
}
    1150:	0018      	movs	r0, r3
    1152:	46bd      	mov	sp, r7
    1154:	b007      	add	sp, #28
    1156:	bd90      	pop	{r4, r7, pc}
    1158:	00012a0c 	.word	0x00012a0c

0000115c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    115c:	b590      	push	{r4, r7, lr}
    115e:	b08d      	sub	sp, #52	; 0x34
    1160:	af00      	add	r7, sp, #0
    1162:	60f8      	str	r0, [r7, #12]
    1164:	60b9      	str	r1, [r7, #8]
    1166:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    1168:	232e      	movs	r3, #46	; 0x2e
    116a:	18fb      	adds	r3, r7, r3
    116c:	2200      	movs	r2, #0
    116e:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1170:	232d      	movs	r3, #45	; 0x2d
    1172:	18fb      	adds	r3, r7, r3
    1174:	2200      	movs	r2, #0
    1176:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    1178:	232c      	movs	r3, #44	; 0x2c
    117a:	18fb      	adds	r3, r7, r3
    117c:	2200      	movs	r2, #0
    117e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1180:	2329      	movs	r3, #41	; 0x29
    1182:	18fc      	adds	r4, r7, r3
    1184:	68bb      	ldr	r3, [r7, #8]
    1186:	0018      	movs	r0, r3
    1188:	4bbf      	ldr	r3, [pc, #764]	; (1488 <tc_init+0x32c>)
    118a:	4798      	blx	r3
    118c:	0003      	movs	r3, r0
    118e:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1190:	2324      	movs	r3, #36	; 0x24
    1192:	18fa      	adds	r2, r7, r3
    1194:	4bbd      	ldr	r3, [pc, #756]	; (148c <tc_init+0x330>)
    1196:	0010      	movs	r0, r2
    1198:	0019      	movs	r1, r3
    119a:	2303      	movs	r3, #3
    119c:	001a      	movs	r2, r3
    119e:	4bbc      	ldr	r3, [pc, #752]	; (1490 <tc_init+0x334>)
    11a0:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    11a2:	231c      	movs	r3, #28
    11a4:	18fa      	adds	r2, r7, r3
    11a6:	4bbb      	ldr	r3, [pc, #748]	; (1494 <tc_init+0x338>)
    11a8:	0010      	movs	r0, r2
    11aa:	0019      	movs	r1, r3
    11ac:	2306      	movs	r3, #6
    11ae:	001a      	movs	r2, r3
    11b0:	4bb7      	ldr	r3, [pc, #732]	; (1490 <tc_init+0x334>)
    11b2:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    11b4:	232b      	movs	r3, #43	; 0x2b
    11b6:	18fb      	adds	r3, r7, r3
    11b8:	2200      	movs	r2, #0
    11ba:	701a      	strb	r2, [r3, #0]
    11bc:	e00e      	b.n	11dc <tc_init+0x80>
		module_inst->callback[i]        = NULL;
    11be:	232b      	movs	r3, #43	; 0x2b
    11c0:	18fb      	adds	r3, r7, r3
    11c2:	781a      	ldrb	r2, [r3, #0]
    11c4:	68fb      	ldr	r3, [r7, #12]
    11c6:	3202      	adds	r2, #2
    11c8:	0092      	lsls	r2, r2, #2
    11ca:	2100      	movs	r1, #0
    11cc:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    11ce:	232b      	movs	r3, #43	; 0x2b
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	781a      	ldrb	r2, [r3, #0]
    11d4:	232b      	movs	r3, #43	; 0x2b
    11d6:	18fb      	adds	r3, r7, r3
    11d8:	3201      	adds	r2, #1
    11da:	701a      	strb	r2, [r3, #0]
    11dc:	232b      	movs	r3, #43	; 0x2b
    11de:	18fb      	adds	r3, r7, r3
    11e0:	781b      	ldrb	r3, [r3, #0]
    11e2:	2b03      	cmp	r3, #3
    11e4:	d9eb      	bls.n	11be <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
    11e6:	68fb      	ldr	r3, [r7, #12]
    11e8:	2200      	movs	r2, #0
    11ea:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    11ec:	68fb      	ldr	r3, [r7, #12]
    11ee:	2200      	movs	r2, #0
    11f0:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    11f2:	2329      	movs	r3, #41	; 0x29
    11f4:	18fb      	adds	r3, r7, r3
    11f6:	781a      	ldrb	r2, [r3, #0]
    11f8:	4ba7      	ldr	r3, [pc, #668]	; (1498 <tc_init+0x33c>)
    11fa:	0092      	lsls	r2, r2, #2
    11fc:	68f9      	ldr	r1, [r7, #12]
    11fe:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1200:	68fb      	ldr	r3, [r7, #12]
    1202:	68ba      	ldr	r2, [r7, #8]
    1204:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1206:	687b      	ldr	r3, [r7, #4]
    1208:	789b      	ldrb	r3, [r3, #2]
    120a:	2b08      	cmp	r3, #8
    120c:	d108      	bne.n	1220 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    120e:	2329      	movs	r3, #41	; 0x29
    1210:	18fb      	adds	r3, r7, r3
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	3303      	adds	r3, #3
    1216:	2201      	movs	r2, #1
    1218:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    121a:	d001      	beq.n	1220 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    121c:	2317      	movs	r3, #23
    121e:	e1c4      	b.n	15aa <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	789a      	ldrb	r2, [r3, #2]
    1224:	68fb      	ldr	r3, [r7, #12]
    1226:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1228:	68bb      	ldr	r3, [r7, #8]
    122a:	881b      	ldrh	r3, [r3, #0]
    122c:	b29b      	uxth	r3, r3
    122e:	001a      	movs	r2, r3
    1230:	2301      	movs	r3, #1
    1232:	4013      	ands	r3, r2
    1234:	d001      	beq.n	123a <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1236:	2305      	movs	r3, #5
    1238:	e1b7      	b.n	15aa <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    123a:	68bb      	ldr	r3, [r7, #8]
    123c:	7bdb      	ldrb	r3, [r3, #15]
    123e:	b2db      	uxtb	r3, r3
    1240:	001a      	movs	r2, r3
    1242:	2310      	movs	r3, #16
    1244:	4013      	ands	r3, r2
    1246:	d001      	beq.n	124c <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1248:	231c      	movs	r3, #28
    124a:	e1ae      	b.n	15aa <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    124c:	68bb      	ldr	r3, [r7, #8]
    124e:	881b      	ldrh	r3, [r3, #0]
    1250:	b29b      	uxth	r3, r3
    1252:	001a      	movs	r2, r3
    1254:	2302      	movs	r3, #2
    1256:	4013      	ands	r3, r2
    1258:	d001      	beq.n	125e <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    125a:	231c      	movs	r3, #28
    125c:	e1a5      	b.n	15aa <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    125e:	687b      	ldr	r3, [r7, #4]
    1260:	7c1b      	ldrb	r3, [r3, #16]
    1262:	2b00      	cmp	r3, #0
    1264:	d017      	beq.n	1296 <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
    1266:	2318      	movs	r3, #24
    1268:	18fb      	adds	r3, r7, r3
    126a:	0018      	movs	r0, r3
    126c:	4b8b      	ldr	r3, [pc, #556]	; (149c <tc_init+0x340>)
    126e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	699b      	ldr	r3, [r3, #24]
    1274:	b2da      	uxtb	r2, r3
    1276:	2318      	movs	r3, #24
    1278:	18fb      	adds	r3, r7, r3
    127a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    127c:	2318      	movs	r3, #24
    127e:	18fb      	adds	r3, r7, r3
    1280:	2201      	movs	r2, #1
    1282:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1288:	b2db      	uxtb	r3, r3
    128a:	2218      	movs	r2, #24
    128c:	18ba      	adds	r2, r7, r2
    128e:	0011      	movs	r1, r2
    1290:	0018      	movs	r0, r3
    1292:	4b83      	ldr	r3, [pc, #524]	; (14a0 <tc_init+0x344>)
    1294:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1296:	687b      	ldr	r3, [r7, #4]
    1298:	7f1b      	ldrb	r3, [r3, #28]
    129a:	2b00      	cmp	r3, #0
    129c:	d017      	beq.n	12ce <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
    129e:	2318      	movs	r3, #24
    12a0:	18fb      	adds	r3, r7, r3
    12a2:	0018      	movs	r0, r3
    12a4:	4b7d      	ldr	r3, [pc, #500]	; (149c <tc_init+0x340>)
    12a6:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    12ac:	b2da      	uxtb	r2, r3
    12ae:	2318      	movs	r3, #24
    12b0:	18fb      	adds	r3, r7, r3
    12b2:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    12b4:	2318      	movs	r3, #24
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	2201      	movs	r2, #1
    12ba:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    12bc:	687b      	ldr	r3, [r7, #4]
    12be:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    12c0:	b2db      	uxtb	r3, r3
    12c2:	2218      	movs	r2, #24
    12c4:	18ba      	adds	r2, r7, r2
    12c6:	0011      	movs	r1, r2
    12c8:	0018      	movs	r0, r3
    12ca:	4b75      	ldr	r3, [pc, #468]	; (14a0 <tc_init+0x344>)
    12cc:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    12ce:	2329      	movs	r3, #41	; 0x29
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	781a      	ldrb	r2, [r3, #0]
    12d4:	231c      	movs	r3, #28
    12d6:	18fb      	adds	r3, r7, r3
    12d8:	0052      	lsls	r2, r2, #1
    12da:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    12dc:	0019      	movs	r1, r3
    12de:	2002      	movs	r0, #2
    12e0:	4b70      	ldr	r3, [pc, #448]	; (14a4 <tc_init+0x348>)
    12e2:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    12e4:	687b      	ldr	r3, [r7, #4]
    12e6:	789b      	ldrb	r3, [r3, #2]
    12e8:	2b08      	cmp	r3, #8
    12ea:	d10b      	bne.n	1304 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    12ec:	2329      	movs	r3, #41	; 0x29
    12ee:	18fb      	adds	r3, r7, r3
    12f0:	781b      	ldrb	r3, [r3, #0]
    12f2:	1c5a      	adds	r2, r3, #1
    12f4:	231c      	movs	r3, #28
    12f6:	18fb      	adds	r3, r7, r3
    12f8:	0052      	lsls	r2, r2, #1
    12fa:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    12fc:	0019      	movs	r1, r3
    12fe:	2002      	movs	r0, #2
    1300:	4b68      	ldr	r3, [pc, #416]	; (14a4 <tc_init+0x348>)
    1302:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1304:	2314      	movs	r3, #20
    1306:	18fb      	adds	r3, r7, r3
    1308:	0018      	movs	r0, r3
    130a:	4b67      	ldr	r3, [pc, #412]	; (14a8 <tc_init+0x34c>)
    130c:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	781a      	ldrb	r2, [r3, #0]
    1312:	2314      	movs	r3, #20
    1314:	18fb      	adds	r3, r7, r3
    1316:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1318:	2329      	movs	r3, #41	; 0x29
    131a:	18fb      	adds	r3, r7, r3
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2224      	movs	r2, #36	; 0x24
    1320:	18ba      	adds	r2, r7, r2
    1322:	5cd3      	ldrb	r3, [r2, r3]
    1324:	2214      	movs	r2, #20
    1326:	18ba      	adds	r2, r7, r2
    1328:	0011      	movs	r1, r2
    132a:	0018      	movs	r0, r3
    132c:	4b5f      	ldr	r3, [pc, #380]	; (14ac <tc_init+0x350>)
    132e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1330:	2329      	movs	r3, #41	; 0x29
    1332:	18fb      	adds	r3, r7, r3
    1334:	781b      	ldrb	r3, [r3, #0]
    1336:	2224      	movs	r2, #36	; 0x24
    1338:	18ba      	adds	r2, r7, r2
    133a:	5cd3      	ldrb	r3, [r2, r3]
    133c:	0018      	movs	r0, r3
    133e:	4b5c      	ldr	r3, [pc, #368]	; (14b0 <tc_init+0x354>)
    1340:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1342:	687b      	ldr	r3, [r7, #4]
    1344:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    1346:	687b      	ldr	r3, [r7, #4]
    1348:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    134a:	4313      	orrs	r3, r2
    134c:	b2db      	uxtb	r3, r3
    134e:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
    1350:	687b      	ldr	r3, [r7, #4]
    1352:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    1354:	4313      	orrs	r3, r2
    1356:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
    1358:	687b      	ldr	r3, [r7, #4]
    135a:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
    135c:	232e      	movs	r3, #46	; 0x2e
    135e:	18fb      	adds	r3, r7, r3
    1360:	430a      	orrs	r2, r1
    1362:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1364:	687b      	ldr	r3, [r7, #4]
    1366:	785b      	ldrb	r3, [r3, #1]
    1368:	2b00      	cmp	r3, #0
    136a:	d008      	beq.n	137e <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    136c:	232e      	movs	r3, #46	; 0x2e
    136e:	18fb      	adds	r3, r7, r3
    1370:	222e      	movs	r2, #46	; 0x2e
    1372:	18ba      	adds	r2, r7, r2
    1374:	8812      	ldrh	r2, [r2, #0]
    1376:	2180      	movs	r1, #128	; 0x80
    1378:	0109      	lsls	r1, r1, #4
    137a:	430a      	orrs	r2, r1
    137c:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	68fb      	ldr	r3, [r7, #12]
    1382:	0018      	movs	r0, r3
    1384:	4b4b      	ldr	r3, [pc, #300]	; (14b4 <tc_init+0x358>)
    1386:	4798      	blx	r3
    1388:	1e03      	subs	r3, r0, #0
    138a:	d1f9      	bne.n	1380 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    138c:	68bb      	ldr	r3, [r7, #8]
    138e:	222e      	movs	r2, #46	; 0x2e
    1390:	18ba      	adds	r2, r7, r2
    1392:	8812      	ldrh	r2, [r2, #0]
    1394:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1396:	687b      	ldr	r3, [r7, #4]
    1398:	7b5b      	ldrb	r3, [r3, #13]
    139a:	2b00      	cmp	r3, #0
    139c:	d003      	beq.n	13a6 <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    139e:	232d      	movs	r3, #45	; 0x2d
    13a0:	18fb      	adds	r3, r7, r3
    13a2:	2204      	movs	r2, #4
    13a4:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    13a6:	687b      	ldr	r3, [r7, #4]
    13a8:	7b9b      	ldrb	r3, [r3, #14]
    13aa:	2b00      	cmp	r3, #0
    13ac:	d007      	beq.n	13be <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    13ae:	232d      	movs	r3, #45	; 0x2d
    13b0:	18fb      	adds	r3, r7, r3
    13b2:	222d      	movs	r2, #45	; 0x2d
    13b4:	18ba      	adds	r2, r7, r2
    13b6:	7812      	ldrb	r2, [r2, #0]
    13b8:	2101      	movs	r1, #1
    13ba:	430a      	orrs	r2, r1
    13bc:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	0018      	movs	r0, r3
    13c4:	4b3b      	ldr	r3, [pc, #236]	; (14b4 <tc_init+0x358>)
    13c6:	4798      	blx	r3
    13c8:	1e03      	subs	r3, r0, #0
    13ca:	d1f9      	bne.n	13c0 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    13cc:	68bb      	ldr	r3, [r7, #8]
    13ce:	22ff      	movs	r2, #255	; 0xff
    13d0:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    13d2:	232d      	movs	r3, #45	; 0x2d
    13d4:	18fb      	adds	r3, r7, r3
    13d6:	781b      	ldrb	r3, [r3, #0]
    13d8:	2b00      	cmp	r3, #0
    13da:	d00b      	beq.n	13f4 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
    13dc:	46c0      	nop			; (mov r8, r8)
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	0018      	movs	r0, r3
    13e2:	4b34      	ldr	r3, [pc, #208]	; (14b4 <tc_init+0x358>)
    13e4:	4798      	blx	r3
    13e6:	1e03      	subs	r3, r0, #0
    13e8:	d1f9      	bne.n	13de <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    13ea:	68bb      	ldr	r3, [r7, #8]
    13ec:	222d      	movs	r2, #45	; 0x2d
    13ee:	18ba      	adds	r2, r7, r2
    13f0:	7812      	ldrb	r2, [r2, #0]
    13f2:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    13f4:	232c      	movs	r3, #44	; 0x2c
    13f6:	18fb      	adds	r3, r7, r3
    13f8:	687a      	ldr	r2, [r7, #4]
    13fa:	7a92      	ldrb	r2, [r2, #10]
    13fc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    13fe:	232a      	movs	r3, #42	; 0x2a
    1400:	18fb      	adds	r3, r7, r3
    1402:	2200      	movs	r2, #0
    1404:	701a      	strb	r2, [r3, #0]
    1406:	e01c      	b.n	1442 <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
    1408:	232a      	movs	r3, #42	; 0x2a
    140a:	18fb      	adds	r3, r7, r3
    140c:	781b      	ldrb	r3, [r3, #0]
    140e:	687a      	ldr	r2, [r7, #4]
    1410:	18d3      	adds	r3, r2, r3
    1412:	7adb      	ldrb	r3, [r3, #11]
    1414:	2b00      	cmp	r3, #0
    1416:	d00d      	beq.n	1434 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1418:	232a      	movs	r3, #42	; 0x2a
    141a:	18fb      	adds	r3, r7, r3
    141c:	781b      	ldrb	r3, [r3, #0]
    141e:	2210      	movs	r2, #16
    1420:	409a      	lsls	r2, r3
    1422:	0013      	movs	r3, r2
    1424:	b2d9      	uxtb	r1, r3
    1426:	232c      	movs	r3, #44	; 0x2c
    1428:	18fb      	adds	r3, r7, r3
    142a:	222c      	movs	r2, #44	; 0x2c
    142c:	18ba      	adds	r2, r7, r2
    142e:	7812      	ldrb	r2, [r2, #0]
    1430:	430a      	orrs	r2, r1
    1432:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1434:	232a      	movs	r3, #42	; 0x2a
    1436:	18fb      	adds	r3, r7, r3
    1438:	781a      	ldrb	r2, [r3, #0]
    143a:	232a      	movs	r3, #42	; 0x2a
    143c:	18fb      	adds	r3, r7, r3
    143e:	3201      	adds	r2, #1
    1440:	701a      	strb	r2, [r3, #0]
    1442:	232a      	movs	r3, #42	; 0x2a
    1444:	18fb      	adds	r3, r7, r3
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	2b01      	cmp	r3, #1
    144a:	d9dd      	bls.n	1408 <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    144c:	46c0      	nop			; (mov r8, r8)
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	0018      	movs	r0, r3
    1452:	4b18      	ldr	r3, [pc, #96]	; (14b4 <tc_init+0x358>)
    1454:	4798      	blx	r3
    1456:	1e03      	subs	r3, r0, #0
    1458:	d1f9      	bne.n	144e <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    145a:	68bb      	ldr	r3, [r7, #8]
    145c:	222c      	movs	r2, #44	; 0x2c
    145e:	18ba      	adds	r2, r7, r2
    1460:	7812      	ldrb	r2, [r2, #0]
    1462:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1464:	46c0      	nop			; (mov r8, r8)
    1466:	68fb      	ldr	r3, [r7, #12]
    1468:	0018      	movs	r0, r3
    146a:	4b12      	ldr	r3, [pc, #72]	; (14b4 <tc_init+0x358>)
    146c:	4798      	blx	r3
    146e:	1e03      	subs	r3, r0, #0
    1470:	d1f9      	bne.n	1466 <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1472:	68fb      	ldr	r3, [r7, #12]
    1474:	791b      	ldrb	r3, [r3, #4]
    1476:	2b04      	cmp	r3, #4
    1478:	d01e      	beq.n	14b8 <tc_init+0x35c>
    147a:	2b08      	cmp	r3, #8
    147c:	d100      	bne.n	1480 <tc_init+0x324>
    147e:	e070      	b.n	1562 <tc_init+0x406>
    1480:	2b00      	cmp	r3, #0
    1482:	d04b      	beq.n	151c <tc_init+0x3c0>
    1484:	e090      	b.n	15a8 <tc_init+0x44c>
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00001115 	.word	0x00001115
    148c:	00012a18 	.word	0x00012a18
    1490:	00010dd5 	.word	0x00010dd5
    1494:	00012a1c 	.word	0x00012a1c
    1498:	200045b8 	.word	0x200045b8
    149c:	000010c5 	.word	0x000010c5
    14a0:	0000cbfd 	.word	0x0000cbfd
    14a4:	00001069 	.word	0x00001069
    14a8:	00001051 	.word	0x00001051
    14ac:	0000c911 	.word	0x0000c911
    14b0:	0000c955 	.word	0x0000c955
    14b4:	000010ed 	.word	0x000010ed
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    14b8:	46c0      	nop			; (mov r8, r8)
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	0018      	movs	r0, r3
    14be:	4b3d      	ldr	r3, [pc, #244]	; (15b4 <tc_init+0x458>)
    14c0:	4798      	blx	r3
    14c2:	1e03      	subs	r3, r0, #0
    14c4:	d1f9      	bne.n	14ba <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    14c6:	687b      	ldr	r3, [r7, #4]
    14c8:	2228      	movs	r2, #40	; 0x28
    14ca:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
    14cc:	68bb      	ldr	r3, [r7, #8]
    14ce:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
    14d0:	46c0      	nop			; (mov r8, r8)
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	0018      	movs	r0, r3
    14d6:	4b37      	ldr	r3, [pc, #220]	; (15b4 <tc_init+0x458>)
    14d8:	4798      	blx	r3
    14da:	1e03      	subs	r3, r0, #0
    14dc:	d1f9      	bne.n	14d2 <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	2229      	movs	r2, #41	; 0x29
    14e2:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
    14e4:	68bb      	ldr	r3, [r7, #8]
    14e6:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
    14e8:	46c0      	nop			; (mov r8, r8)
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	0018      	movs	r0, r3
    14ee:	4b31      	ldr	r3, [pc, #196]	; (15b4 <tc_init+0x458>)
    14f0:	4798      	blx	r3
    14f2:	1e03      	subs	r3, r0, #0
    14f4:	d1f9      	bne.n	14ea <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	222a      	movs	r2, #42	; 0x2a
    14fa:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
    14fc:	68bb      	ldr	r3, [r7, #8]
    14fe:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1500:	46c0      	nop			; (mov r8, r8)
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	0018      	movs	r0, r3
    1506:	4b2b      	ldr	r3, [pc, #172]	; (15b4 <tc_init+0x458>)
    1508:	4798      	blx	r3
    150a:	1e03      	subs	r3, r0, #0
    150c:	d1f9      	bne.n	1502 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    150e:	687b      	ldr	r3, [r7, #4]
    1510:	222b      	movs	r2, #43	; 0x2b
    1512:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
    1514:	68bb      	ldr	r3, [r7, #8]
    1516:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
    1518:	2300      	movs	r3, #0
    151a:	e046      	b.n	15aa <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    151c:	46c0      	nop			; (mov r8, r8)
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	0018      	movs	r0, r3
    1522:	4b24      	ldr	r3, [pc, #144]	; (15b4 <tc_init+0x458>)
    1524:	4798      	blx	r3
    1526:	1e03      	subs	r3, r0, #0
    1528:	d1f9      	bne.n	151e <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    152a:	687b      	ldr	r3, [r7, #4]
    152c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    152e:	68bb      	ldr	r3, [r7, #8]
    1530:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	68fb      	ldr	r3, [r7, #12]
    1536:	0018      	movs	r0, r3
    1538:	4b1e      	ldr	r3, [pc, #120]	; (15b4 <tc_init+0x458>)
    153a:	4798      	blx	r3
    153c:	1e03      	subs	r3, r0, #0
    153e:	d1f9      	bne.n	1534 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1540:	687b      	ldr	r3, [r7, #4]
    1542:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
    1544:	68bb      	ldr	r3, [r7, #8]
    1546:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    1548:	46c0      	nop			; (mov r8, r8)
    154a:	68fb      	ldr	r3, [r7, #12]
    154c:	0018      	movs	r0, r3
    154e:	4b19      	ldr	r3, [pc, #100]	; (15b4 <tc_init+0x458>)
    1550:	4798      	blx	r3
    1552:	1e03      	subs	r3, r0, #0
    1554:	d1f9      	bne.n	154a <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1556:	687b      	ldr	r3, [r7, #4]
    1558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
    155a:	68bb      	ldr	r3, [r7, #8]
    155c:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
    155e:	2300      	movs	r3, #0
    1560:	e023      	b.n	15aa <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	68fb      	ldr	r3, [r7, #12]
    1566:	0018      	movs	r0, r3
    1568:	4b12      	ldr	r3, [pc, #72]	; (15b4 <tc_init+0x458>)
    156a:	4798      	blx	r3
    156c:	1e03      	subs	r3, r0, #0
    156e:	d1f9      	bne.n	1564 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1570:	687b      	ldr	r3, [r7, #4]
    1572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1574:	68bb      	ldr	r3, [r7, #8]
    1576:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1578:	46c0      	nop			; (mov r8, r8)
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	0018      	movs	r0, r3
    157e:	4b0d      	ldr	r3, [pc, #52]	; (15b4 <tc_init+0x458>)
    1580:	4798      	blx	r3
    1582:	1e03      	subs	r3, r0, #0
    1584:	d1f9      	bne.n	157a <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    1586:	687b      	ldr	r3, [r7, #4]
    1588:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
    158a:	68bb      	ldr	r3, [r7, #8]
    158c:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	0018      	movs	r0, r3
    1594:	4b07      	ldr	r3, [pc, #28]	; (15b4 <tc_init+0x458>)
    1596:	4798      	blx	r3
    1598:	1e03      	subs	r3, r0, #0
    159a:	d1f9      	bne.n	1590 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    159c:	687b      	ldr	r3, [r7, #4]
    159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
    15a0:	68bb      	ldr	r3, [r7, #8]
    15a2:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
    15a4:	2300      	movs	r3, #0
    15a6:	e000      	b.n	15aa <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    15a8:	2317      	movs	r3, #23
}
    15aa:	0018      	movs	r0, r3
    15ac:	46bd      	mov	sp, r7
    15ae:	b00d      	add	sp, #52	; 0x34
    15b0:	bd90      	pop	{r4, r7, pc}
    15b2:	46c0      	nop			; (mov r8, r8)
    15b4:	000010ed 	.word	0x000010ed

000015b8 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
    15b8:	b580      	push	{r7, lr}
    15ba:	b084      	sub	sp, #16
    15bc:	af00      	add	r7, sp, #0
    15be:	6078      	str	r0, [r7, #4]
    15c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    15c8:	46c0      	nop			; (mov r8, r8)
    15ca:	687b      	ldr	r3, [r7, #4]
    15cc:	0018      	movs	r0, r3
    15ce:	4b11      	ldr	r3, [pc, #68]	; (1614 <tc_set_count_value+0x5c>)
    15d0:	4798      	blx	r3
    15d2:	1e03      	subs	r3, r0, #0
    15d4:	d1f9      	bne.n	15ca <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	791b      	ldrb	r3, [r3, #4]
    15da:	2b04      	cmp	r3, #4
    15dc:	d004      	beq.n	15e8 <tc_set_count_value+0x30>
    15de:	2b08      	cmp	r3, #8
    15e0:	d00e      	beq.n	1600 <tc_set_count_value+0x48>
    15e2:	2b00      	cmp	r3, #0
    15e4:	d006      	beq.n	15f4 <tc_set_count_value+0x3c>
    15e6:	e010      	b.n	160a <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
    15e8:	683b      	ldr	r3, [r7, #0]
    15ea:	b2da      	uxtb	r2, r3
    15ec:	68fb      	ldr	r3, [r7, #12]
    15ee:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
    15f0:	2300      	movs	r3, #0
    15f2:	e00b      	b.n	160c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
    15f4:	683b      	ldr	r3, [r7, #0]
    15f6:	b29a      	uxth	r2, r3
    15f8:	68fb      	ldr	r3, [r7, #12]
    15fa:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
    15fc:	2300      	movs	r3, #0
    15fe:	e005      	b.n	160c <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
    1600:	68fb      	ldr	r3, [r7, #12]
    1602:	683a      	ldr	r2, [r7, #0]
    1604:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
    1606:	2300      	movs	r3, #0
    1608:	e000      	b.n	160c <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
    160a:	2317      	movs	r3, #23
	}
}
    160c:	0018      	movs	r0, r3
    160e:	46bd      	mov	sp, r7
    1610:	b004      	add	sp, #16
    1612:	bd80      	pop	{r7, pc}
    1614:	000010ed 	.word	0x000010ed

00001618 <display_update>:
};

SemaphoreHandle_t display_update_mutex;

static void display_update(bool update)
{
    1618:	b580      	push	{r7, lr}
    161a:	b082      	sub	sp, #8
    161c:	af00      	add	r7, sp, #0
    161e:	0002      	movs	r2, r0
    1620:	1dfb      	adds	r3, r7, #7
    1622:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <display_update+0x30>)
    1626:	4798      	blx	r3
    
    display_state.display_update = update;
    1628:	4b08      	ldr	r3, [pc, #32]	; (164c <display_update+0x34>)
    162a:	1dfa      	adds	r2, r7, #7
    162c:	7812      	ldrb	r2, [r2, #0]
    162e:	725a      	strb	r2, [r3, #9]
    display_state.display_blink = false;
    1630:	4b06      	ldr	r3, [pc, #24]	; (164c <display_update+0x34>)
    1632:	2200      	movs	r2, #0
    1634:	729a      	strb	r2, [r3, #10]
    display_state.display_blink_timer = 0;
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <display_update+0x34>)
    1638:	2200      	movs	r2, #0
    163a:	72da      	strb	r2, [r3, #11]
    
    taskEXIT_CRITICAL();
    163c:	4b04      	ldr	r3, [pc, #16]	; (1650 <display_update+0x38>)
    163e:	4798      	blx	r3
}
    1640:	46c0      	nop			; (mov r8, r8)
    1642:	46bd      	mov	sp, r7
    1644:	b002      	add	sp, #8
    1646:	bd80      	pop	{r7, pc}
    1648:	0000d259 	.word	0x0000d259
    164c:	20004604 	.word	0x20004604
    1650:	0000d27d 	.word	0x0000d27d

00001654 <display_number_to_seg>:

static void display_number_to_seg(uint8_t num, uint8_t *chars)
{
    1654:	b590      	push	{r4, r7, lr}
    1656:	b083      	sub	sp, #12
    1658:	af00      	add	r7, sp, #0
    165a:	0002      	movs	r2, r0
    165c:	6039      	str	r1, [r7, #0]
    165e:	1dfb      	adds	r3, r7, #7
    1660:	701a      	strb	r2, [r3, #0]
    if (num / 100)
    1662:	1dfb      	adds	r3, r7, #7
    1664:	781b      	ldrb	r3, [r3, #0]
    1666:	2b63      	cmp	r3, #99	; 0x63
    1668:	d90d      	bls.n	1686 <display_number_to_seg+0x32>
        chars[0] = num_to_seg[num/100];
    166a:	1dfb      	adds	r3, r7, #7
    166c:	781a      	ldrb	r2, [r3, #0]
    166e:	4b25      	ldr	r3, [pc, #148]	; (1704 <display_number_to_seg+0xb0>)
    1670:	2164      	movs	r1, #100	; 0x64
    1672:	0010      	movs	r0, r2
    1674:	4798      	blx	r3
    1676:	0003      	movs	r3, r0
    1678:	b2db      	uxtb	r3, r3
    167a:	001a      	movs	r2, r3
    167c:	4b22      	ldr	r3, [pc, #136]	; (1708 <display_number_to_seg+0xb4>)
    167e:	5c9a      	ldrb	r2, [r3, r2]
    1680:	683b      	ldr	r3, [r7, #0]
    1682:	701a      	strb	r2, [r3, #0]
    1684:	e002      	b.n	168c <display_number_to_seg+0x38>
    else
        chars[0] = SEG_OFF;
    1686:	683b      	ldr	r3, [r7, #0]
    1688:	2200      	movs	r2, #0
    168a:	701a      	strb	r2, [r3, #0]

    num -= (num / 100) * 100;    
    168c:	1dfb      	adds	r3, r7, #7
    168e:	781a      	ldrb	r2, [r3, #0]
    1690:	4b1c      	ldr	r3, [pc, #112]	; (1704 <display_number_to_seg+0xb0>)
    1692:	2164      	movs	r1, #100	; 0x64
    1694:	0010      	movs	r0, r2
    1696:	4798      	blx	r3
    1698:	0003      	movs	r3, r0
    169a:	b2db      	uxtb	r3, r3
    169c:	2264      	movs	r2, #100	; 0x64
    169e:	4252      	negs	r2, r2
    16a0:	4353      	muls	r3, r2
    16a2:	b2d9      	uxtb	r1, r3
    16a4:	1dfb      	adds	r3, r7, #7
    16a6:	1dfa      	adds	r2, r7, #7
    16a8:	7812      	ldrb	r2, [r2, #0]
    16aa:	188a      	adds	r2, r1, r2
    16ac:	701a      	strb	r2, [r3, #0]
    chars[1] = num_to_seg[num / 10];
    16ae:	683b      	ldr	r3, [r7, #0]
    16b0:	1c5c      	adds	r4, r3, #1
    16b2:	1dfb      	adds	r3, r7, #7
    16b4:	781a      	ldrb	r2, [r3, #0]
    16b6:	4b13      	ldr	r3, [pc, #76]	; (1704 <display_number_to_seg+0xb0>)
    16b8:	210a      	movs	r1, #10
    16ba:	0010      	movs	r0, r2
    16bc:	4798      	blx	r3
    16be:	0003      	movs	r3, r0
    16c0:	b2db      	uxtb	r3, r3
    16c2:	001a      	movs	r2, r3
    16c4:	4b10      	ldr	r3, [pc, #64]	; (1708 <display_number_to_seg+0xb4>)
    16c6:	5c9b      	ldrb	r3, [r3, r2]
    16c8:	7023      	strb	r3, [r4, #0]

    num -= (num / 10) * 10;    
    16ca:	1dfb      	adds	r3, r7, #7
    16cc:	781a      	ldrb	r2, [r3, #0]
    16ce:	4b0d      	ldr	r3, [pc, #52]	; (1704 <display_number_to_seg+0xb0>)
    16d0:	210a      	movs	r1, #10
    16d2:	0010      	movs	r0, r2
    16d4:	4798      	blx	r3
    16d6:	0003      	movs	r3, r0
    16d8:	b2db      	uxtb	r3, r3
    16da:	220a      	movs	r2, #10
    16dc:	4252      	negs	r2, r2
    16de:	4353      	muls	r3, r2
    16e0:	b2d9      	uxtb	r1, r3
    16e2:	1dfb      	adds	r3, r7, #7
    16e4:	1dfa      	adds	r2, r7, #7
    16e6:	7812      	ldrb	r2, [r2, #0]
    16e8:	188a      	adds	r2, r1, r2
    16ea:	701a      	strb	r2, [r3, #0]
    chars[2] = num_to_seg[num];
    16ec:	683b      	ldr	r3, [r7, #0]
    16ee:	3302      	adds	r3, #2
    16f0:	1dfa      	adds	r2, r7, #7
    16f2:	7812      	ldrb	r2, [r2, #0]
    16f4:	4904      	ldr	r1, [pc, #16]	; (1708 <display_number_to_seg+0xb4>)
    16f6:	5c8a      	ldrb	r2, [r1, r2]
    16f8:	701a      	strb	r2, [r3, #0]
}
    16fa:	46c0      	nop			; (mov r8, r8)
    16fc:	46bd      	mov	sp, r7
    16fe:	b003      	add	sp, #12
    1700:	bd90      	pop	{r4, r7, pc}
    1702:	46c0      	nop			; (mov r8, r8)
    1704:	0001079d 	.word	0x0001079d
    1708:	00012a24 	.word	0x00012a24

0000170c <display_button_lock_unlock_handler>:

static void display_button_lock_unlock_handler(void)
{
    170c:	b5b0      	push	{r4, r5, r7, lr}
    170e:	af00      	add	r7, sp, #0
    if (display_state.display_locked) {
    1710:	4b10      	ldr	r3, [pc, #64]	; (1754 <display_button_lock_unlock_handler+0x48>)
    1712:	7b1b      	ldrb	r3, [r3, #12]
    1714:	2b00      	cmp	r3, #0
    1716:	d019      	beq.n	174c <display_button_lock_unlock_handler+0x40>
        if (display_state.display_unlock_timer++ > DISPLAY_UNLOCK_TIME) {
    1718:	4b0e      	ldr	r3, [pc, #56]	; (1754 <display_button_lock_unlock_handler+0x48>)
    171a:	695b      	ldr	r3, [r3, #20]
    171c:	1c59      	adds	r1, r3, #1
    171e:	4a0d      	ldr	r2, [pc, #52]	; (1754 <display_button_lock_unlock_handler+0x48>)
    1720:	6151      	str	r1, [r2, #20]
    1722:	2b0a      	cmp	r3, #10
    1724:	d912      	bls.n	174c <display_button_lock_unlock_handler+0x40>
            xSemaphoreGive(buzzer_sem);
    1726:	4b0c      	ldr	r3, [pc, #48]	; (1758 <display_button_lock_unlock_handler+0x4c>)
    1728:	6818      	ldr	r0, [r3, #0]
    172a:	2300      	movs	r3, #0
    172c:	2200      	movs	r2, #0
    172e:	2100      	movs	r1, #0
    1730:	4c0a      	ldr	r4, [pc, #40]	; (175c <display_button_lock_unlock_handler+0x50>)
    1732:	47a0      	blx	r4
            display_state.display_locked = false;
    1734:	4b07      	ldr	r3, [pc, #28]	; (1754 <display_button_lock_unlock_handler+0x48>)
    1736:	2200      	movs	r2, #0
    1738:	731a      	strb	r2, [r3, #12]
            display_state.display_unlock_timer = 0;
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <display_button_lock_unlock_handler+0x48>)
    173c:	2200      	movs	r2, #0
    173e:	615a      	str	r2, [r3, #20]
            display_state.display_lock_timer = 0;
    1740:	4b04      	ldr	r3, [pc, #16]	; (1754 <display_button_lock_unlock_handler+0x48>)
    1742:	2200      	movs	r2, #0
    1744:	611a      	str	r2, [r3, #16]
            display_update(true);            
    1746:	2001      	movs	r0, #1
    1748:	4b05      	ldr	r3, [pc, #20]	; (1760 <display_button_lock_unlock_handler+0x54>)
    174a:	4798      	blx	r3
        }                
    }
}
    174c:	46c0      	nop			; (mov r8, r8)
    174e:	46bd      	mov	sp, r7
    1750:	bdb0      	pop	{r4, r5, r7, pc}
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	20004604 	.word	0x20004604
    1758:	200045b4 	.word	0x200045b4
    175c:	0000d621 	.word	0x0000d621
    1760:	00001619 	.word	0x00001619

00001764 <display_timer_handler>:

static void display_timer_handler(void)
{
    1764:	b5b0      	push	{r4, r5, r7, lr}
    1766:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
    1768:	4b09      	ldr	r3, [pc, #36]	; (1790 <display_timer_handler+0x2c>)
    176a:	7b1b      	ldrb	r3, [r3, #12]
    176c:	2201      	movs	r2, #1
    176e:	4053      	eors	r3, r2
    1770:	b2db      	uxtb	r3, r3
    1772:	2b00      	cmp	r3, #0
    1774:	d009      	beq.n	178a <display_timer_handler+0x26>
        display_state.display_lock_timer = 0;
    1776:	4b06      	ldr	r3, [pc, #24]	; (1790 <display_timer_handler+0x2c>)
    1778:	2200      	movs	r2, #0
    177a:	611a      	str	r2, [r3, #16]
        xSemaphoreGive(buzzer_sem);
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <display_timer_handler+0x30>)
    177e:	6818      	ldr	r0, [r3, #0]
    1780:	2300      	movs	r3, #0
    1782:	2200      	movs	r2, #0
    1784:	2100      	movs	r1, #0
    1786:	4c04      	ldr	r4, [pc, #16]	; (1798 <display_timer_handler+0x34>)
    1788:	47a0      	blx	r4
    }

}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	46bd      	mov	sp, r7
    178e:	bdb0      	pop	{r4, r5, r7, pc}
    1790:	20004604 	.word	0x20004604
    1794:	200045b4 	.word	0x200045b4
    1798:	0000d621 	.word	0x0000d621

0000179c <display_button_water_pump_handler>:

static void display_button_water_pump_handler(void)
{
    179c:	b5b0      	push	{r4, r5, r7, lr}
    179e:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
    17a0:	4b1d      	ldr	r3, [pc, #116]	; (1818 <display_button_water_pump_handler+0x7c>)
    17a2:	7b1b      	ldrb	r3, [r3, #12]
    17a4:	2201      	movs	r2, #1
    17a6:	4053      	eors	r3, r2
    17a8:	b2db      	uxtb	r3, r3
    17aa:	2b00      	cmp	r3, #0
    17ac:	d031      	beq.n	1812 <display_button_water_pump_handler+0x76>
        xSemaphoreGive(buzzer_sem);
    17ae:	4b1b      	ldr	r3, [pc, #108]	; (181c <display_button_water_pump_handler+0x80>)
    17b0:	6818      	ldr	r0, [r3, #0]
    17b2:	2300      	movs	r3, #0
    17b4:	2200      	movs	r2, #0
    17b6:	2100      	movs	r1, #0
    17b8:	4c19      	ldr	r4, [pc, #100]	; (1820 <display_button_water_pump_handler+0x84>)
    17ba:	47a0      	blx	r4
        display_state.display_lock_timer = 0;    
    17bc:	4b16      	ldr	r3, [pc, #88]	; (1818 <display_button_water_pump_handler+0x7c>)
    17be:	2200      	movs	r2, #0
    17c0:	611a      	str	r2, [r3, #16]
        
        // Water and air pump cannot run at the same time
        if (display_state.bubbles_on) {
    17c2:	4b15      	ldr	r3, [pc, #84]	; (1818 <display_button_water_pump_handler+0x7c>)
    17c4:	79db      	ldrb	r3, [r3, #7]
    17c6:	2b00      	cmp	r3, #0
    17c8:	d005      	beq.n	17d6 <display_button_water_pump_handler+0x3a>
            display_state.bubbles_on = false;
    17ca:	4b13      	ldr	r3, [pc, #76]	; (1818 <display_button_water_pump_handler+0x7c>)
    17cc:	2200      	movs	r2, #0
    17ce:	71da      	strb	r2, [r3, #7]

            thermal_turn_on_air_pump(false);
    17d0:	2000      	movs	r0, #0
    17d2:	4b14      	ldr	r3, [pc, #80]	; (1824 <display_button_water_pump_handler+0x88>)
    17d4:	4798      	blx	r3
        }
        
        if (display_state.pump_on) {
    17d6:	4b10      	ldr	r3, [pc, #64]	; (1818 <display_button_water_pump_handler+0x7c>)
    17d8:	7a1b      	ldrb	r3, [r3, #8]
    17da:	2b00      	cmp	r3, #0
    17dc:	d010      	beq.n	1800 <display_button_water_pump_handler+0x64>
            display_state.pump_on = false;
    17de:	4b0e      	ldr	r3, [pc, #56]	; (1818 <display_button_water_pump_handler+0x7c>)
    17e0:	2200      	movs	r2, #0
    17e2:	721a      	strb	r2, [r3, #8]
            thermal_turn_on_water_pump(false);
    17e4:	2000      	movs	r0, #0
    17e6:	4b10      	ldr	r3, [pc, #64]	; (1828 <display_button_water_pump_handler+0x8c>)
    17e8:	4798      	blx	r3

            // Pump is already on. Open pump and heater relays (if heater is on)
            if (display_state.heater_on) {
    17ea:	4b0b      	ldr	r3, [pc, #44]	; (1818 <display_button_water_pump_handler+0x7c>)
    17ec:	799b      	ldrb	r3, [r3, #6]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d00c      	beq.n	180c <display_button_water_pump_handler+0x70>
                display_state.heater_on = false;
    17f2:	4b09      	ldr	r3, [pc, #36]	; (1818 <display_button_water_pump_handler+0x7c>)
    17f4:	2200      	movs	r2, #0
    17f6:	719a      	strb	r2, [r3, #6]
                thermal_turn_on_heater(false);
    17f8:	2000      	movs	r0, #0
    17fa:	4b0c      	ldr	r3, [pc, #48]	; (182c <display_button_water_pump_handler+0x90>)
    17fc:	4798      	blx	r3
    17fe:	e005      	b.n	180c <display_button_water_pump_handler+0x70>
            }                        
        }
        else {
            display_state.pump_on = true;
    1800:	4b05      	ldr	r3, [pc, #20]	; (1818 <display_button_water_pump_handler+0x7c>)
    1802:	2201      	movs	r2, #1
    1804:	721a      	strb	r2, [r3, #8]

            thermal_turn_on_water_pump(true);
    1806:	2001      	movs	r0, #1
    1808:	4b07      	ldr	r3, [pc, #28]	; (1828 <display_button_water_pump_handler+0x8c>)
    180a:	4798      	blx	r3
        }
                
        display_update(true);
    180c:	2001      	movs	r0, #1
    180e:	4b08      	ldr	r3, [pc, #32]	; (1830 <display_button_water_pump_handler+0x94>)
    1810:	4798      	blx	r3
    }
}
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	46bd      	mov	sp, r7
    1816:	bdb0      	pop	{r4, r5, r7, pc}
    1818:	20004604 	.word	0x20004604
    181c:	200045b4 	.word	0x200045b4
    1820:	0000d621 	.word	0x0000d621
    1824:	0000286d 	.word	0x0000286d
    1828:	00002835 	.word	0x00002835
    182c:	000027f5 	.word	0x000027f5
    1830:	00001619 	.word	0x00001619

00001834 <display_cf_handler>:

static void display_cf_handler(void)
{
    1834:	b5b0      	push	{r4, r5, r7, lr}
    1836:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
    1838:	4b12      	ldr	r3, [pc, #72]	; (1884 <display_cf_handler+0x50>)
    183a:	7b1b      	ldrb	r3, [r3, #12]
    183c:	2201      	movs	r2, #1
    183e:	4053      	eors	r3, r2
    1840:	b2db      	uxtb	r3, r3
    1842:	2b00      	cmp	r3, #0
    1844:	d01b      	beq.n	187e <display_cf_handler+0x4a>
        xSemaphoreGive(buzzer_sem);
    1846:	4b10      	ldr	r3, [pc, #64]	; (1888 <display_cf_handler+0x54>)
    1848:	6818      	ldr	r0, [r3, #0]
    184a:	2300      	movs	r3, #0
    184c:	2200      	movs	r2, #0
    184e:	2100      	movs	r1, #0
    1850:	4c0e      	ldr	r4, [pc, #56]	; (188c <display_cf_handler+0x58>)
    1852:	47a0      	blx	r4
        display_state.display_lock_timer = 0;        
    1854:	4b0b      	ldr	r3, [pc, #44]	; (1884 <display_cf_handler+0x50>)
    1856:	2200      	movs	r2, #0
    1858:	611a      	str	r2, [r3, #16]
        display_state.degrees_F ^= 1;
    185a:	4b0a      	ldr	r3, [pc, #40]	; (1884 <display_cf_handler+0x50>)
    185c:	78db      	ldrb	r3, [r3, #3]
    185e:	2201      	movs	r2, #1
    1860:	4053      	eors	r3, r2
    1862:	b2db      	uxtb	r3, r3
    1864:	1e5a      	subs	r2, r3, #1
    1866:	4193      	sbcs	r3, r2
    1868:	b2da      	uxtb	r2, r3
    186a:	4b06      	ldr	r3, [pc, #24]	; (1884 <display_cf_handler+0x50>)
    186c:	70da      	strb	r2, [r3, #3]
        thermal_change_scale(display_state.degrees_F);
    186e:	4b05      	ldr	r3, [pc, #20]	; (1884 <display_cf_handler+0x50>)
    1870:	78db      	ldrb	r3, [r3, #3]
    1872:	0018      	movs	r0, r3
    1874:	4b06      	ldr	r3, [pc, #24]	; (1890 <display_cf_handler+0x5c>)
    1876:	4798      	blx	r3
        display_update(true);        
    1878:	2001      	movs	r0, #1
    187a:	4b06      	ldr	r3, [pc, #24]	; (1894 <display_cf_handler+0x60>)
    187c:	4798      	blx	r3
    }
}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	46bd      	mov	sp, r7
    1882:	bdb0      	pop	{r4, r5, r7, pc}
    1884:	20004604 	.word	0x20004604
    1888:	200045b4 	.word	0x200045b4
    188c:	0000d621 	.word	0x0000d621
    1890:	00002655 	.word	0x00002655
    1894:	00001619 	.word	0x00001619

00001898 <display_button_heater_handler>:

static void display_button_heater_handler(void)
{
    1898:	b5b0      	push	{r4, r5, r7, lr}
    189a:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
    189c:	4b1e      	ldr	r3, [pc, #120]	; (1918 <display_button_heater_handler+0x80>)
    189e:	7b1b      	ldrb	r3, [r3, #12]
    18a0:	2201      	movs	r2, #1
    18a2:	4053      	eors	r3, r2
    18a4:	b2db      	uxtb	r3, r3
    18a6:	2b00      	cmp	r3, #0
    18a8:	d032      	beq.n	1910 <display_button_heater_handler+0x78>
        xSemaphoreGive(buzzer_sem);
    18aa:	4b1c      	ldr	r3, [pc, #112]	; (191c <display_button_heater_handler+0x84>)
    18ac:	6818      	ldr	r0, [r3, #0]
    18ae:	2300      	movs	r3, #0
    18b0:	2200      	movs	r2, #0
    18b2:	2100      	movs	r1, #0
    18b4:	4c1a      	ldr	r4, [pc, #104]	; (1920 <display_button_heater_handler+0x88>)
    18b6:	47a0      	blx	r4
        display_state.display_lock_timer = 0;
    18b8:	4b17      	ldr	r3, [pc, #92]	; (1918 <display_button_heater_handler+0x80>)
    18ba:	2200      	movs	r2, #0
    18bc:	611a      	str	r2, [r3, #16]
        display_state.heater_on ^= 1;        
    18be:	4b16      	ldr	r3, [pc, #88]	; (1918 <display_button_heater_handler+0x80>)
    18c0:	799b      	ldrb	r3, [r3, #6]
    18c2:	2201      	movs	r2, #1
    18c4:	4053      	eors	r3, r2
    18c6:	b2db      	uxtb	r3, r3
    18c8:	1e5a      	subs	r2, r3, #1
    18ca:	4193      	sbcs	r3, r2
    18cc:	b2da      	uxtb	r2, r3
    18ce:	4b12      	ldr	r3, [pc, #72]	; (1918 <display_button_heater_handler+0x80>)
    18d0:	719a      	strb	r2, [r3, #6]

        if (display_state.bubbles_on) {
    18d2:	4b11      	ldr	r3, [pc, #68]	; (1918 <display_button_heater_handler+0x80>)
    18d4:	79db      	ldrb	r3, [r3, #7]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d005      	beq.n	18e6 <display_button_heater_handler+0x4e>
            display_state.bubbles_on = false;
    18da:	4b0f      	ldr	r3, [pc, #60]	; (1918 <display_button_heater_handler+0x80>)
    18dc:	2200      	movs	r2, #0
    18de:	71da      	strb	r2, [r3, #7]

            thermal_turn_on_air_pump(false);
    18e0:	2000      	movs	r0, #0
    18e2:	4b10      	ldr	r3, [pc, #64]	; (1924 <display_button_heater_handler+0x8c>)
    18e4:	4798      	blx	r3
        }

        // Pump must be running before turning on heater
        if (!display_state.pump_on) {            
    18e6:	4b0c      	ldr	r3, [pc, #48]	; (1918 <display_button_heater_handler+0x80>)
    18e8:	7a1b      	ldrb	r3, [r3, #8]
    18ea:	2201      	movs	r2, #1
    18ec:	4053      	eors	r3, r2
    18ee:	b2db      	uxtb	r3, r3
    18f0:	2b00      	cmp	r3, #0
    18f2:	d005      	beq.n	1900 <display_button_heater_handler+0x68>
            display_state.pump_on = true;
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <display_button_heater_handler+0x80>)
    18f6:	2201      	movs	r2, #1
    18f8:	721a      	strb	r2, [r3, #8]

            thermal_turn_on_water_pump(true);            
    18fa:	2001      	movs	r0, #1
    18fc:	4b0a      	ldr	r3, [pc, #40]	; (1928 <display_button_heater_handler+0x90>)
    18fe:	4798      	blx	r3
        }

        thermal_turn_on_heater(display_state.heater_on);
    1900:	4b05      	ldr	r3, [pc, #20]	; (1918 <display_button_heater_handler+0x80>)
    1902:	799b      	ldrb	r3, [r3, #6]
    1904:	0018      	movs	r0, r3
    1906:	4b09      	ldr	r3, [pc, #36]	; (192c <display_button_heater_handler+0x94>)
    1908:	4798      	blx	r3

        display_update(true);
    190a:	2001      	movs	r0, #1
    190c:	4b08      	ldr	r3, [pc, #32]	; (1930 <display_button_heater_handler+0x98>)
    190e:	4798      	blx	r3
    }
}
    1910:	46c0      	nop			; (mov r8, r8)
    1912:	46bd      	mov	sp, r7
    1914:	bdb0      	pop	{r4, r5, r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	20004604 	.word	0x20004604
    191c:	200045b4 	.word	0x200045b4
    1920:	0000d621 	.word	0x0000d621
    1924:	0000286d 	.word	0x0000286d
    1928:	00002835 	.word	0x00002835
    192c:	000027f5 	.word	0x000027f5
    1930:	00001619 	.word	0x00001619

00001934 <display_button_air_pump_handler>:

static void display_button_air_pump_handler(void)
{
    1934:	b5b0      	push	{r4, r5, r7, lr}
    1936:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
    1938:	4b1c      	ldr	r3, [pc, #112]	; (19ac <display_button_air_pump_handler+0x78>)
    193a:	7b1b      	ldrb	r3, [r3, #12]
    193c:	2201      	movs	r2, #1
    193e:	4053      	eors	r3, r2
    1940:	b2db      	uxtb	r3, r3
    1942:	2b00      	cmp	r3, #0
    1944:	d02f      	beq.n	19a6 <display_button_air_pump_handler+0x72>
        // Water pump/heater cannot run while air pump is on
        display_state.bubbles_on ^= 1;
    1946:	4b19      	ldr	r3, [pc, #100]	; (19ac <display_button_air_pump_handler+0x78>)
    1948:	79db      	ldrb	r3, [r3, #7]
    194a:	2201      	movs	r2, #1
    194c:	4053      	eors	r3, r2
    194e:	b2db      	uxtb	r3, r3
    1950:	1e5a      	subs	r2, r3, #1
    1952:	4193      	sbcs	r3, r2
    1954:	b2da      	uxtb	r2, r3
    1956:	4b15      	ldr	r3, [pc, #84]	; (19ac <display_button_air_pump_handler+0x78>)
    1958:	71da      	strb	r2, [r3, #7]

        if (display_state.pump_on && display_state.bubbles_on) {                        
    195a:	4b14      	ldr	r3, [pc, #80]	; (19ac <display_button_air_pump_handler+0x78>)
    195c:	7a1b      	ldrb	r3, [r3, #8]
    195e:	2b00      	cmp	r3, #0
    1960:	d00f      	beq.n	1982 <display_button_air_pump_handler+0x4e>
    1962:	4b12      	ldr	r3, [pc, #72]	; (19ac <display_button_air_pump_handler+0x78>)
    1964:	79db      	ldrb	r3, [r3, #7]
    1966:	2b00      	cmp	r3, #0
    1968:	d00b      	beq.n	1982 <display_button_air_pump_handler+0x4e>
            display_state.pump_on = false;
    196a:	4b10      	ldr	r3, [pc, #64]	; (19ac <display_button_air_pump_handler+0x78>)
    196c:	2200      	movs	r2, #0
    196e:	721a      	strb	r2, [r3, #8]
            display_state.heater_on = false;
    1970:	4b0e      	ldr	r3, [pc, #56]	; (19ac <display_button_air_pump_handler+0x78>)
    1972:	2200      	movs	r2, #0
    1974:	719a      	strb	r2, [r3, #6]

            thermal_turn_on_heater(false);
    1976:	2000      	movs	r0, #0
    1978:	4b0d      	ldr	r3, [pc, #52]	; (19b0 <display_button_air_pump_handler+0x7c>)
    197a:	4798      	blx	r3
            thermal_turn_on_water_pump(false);
    197c:	2000      	movs	r0, #0
    197e:	4b0d      	ldr	r3, [pc, #52]	; (19b4 <display_button_air_pump_handler+0x80>)
    1980:	4798      	blx	r3
        }   
        
        thermal_turn_on_air_pump(display_state.bubbles_on);
    1982:	4b0a      	ldr	r3, [pc, #40]	; (19ac <display_button_air_pump_handler+0x78>)
    1984:	79db      	ldrb	r3, [r3, #7]
    1986:	0018      	movs	r0, r3
    1988:	4b0b      	ldr	r3, [pc, #44]	; (19b8 <display_button_air_pump_handler+0x84>)
    198a:	4798      	blx	r3

        xSemaphoreGive(buzzer_sem);
    198c:	4b0b      	ldr	r3, [pc, #44]	; (19bc <display_button_air_pump_handler+0x88>)
    198e:	6818      	ldr	r0, [r3, #0]
    1990:	2300      	movs	r3, #0
    1992:	2200      	movs	r2, #0
    1994:	2100      	movs	r1, #0
    1996:	4c0a      	ldr	r4, [pc, #40]	; (19c0 <display_button_air_pump_handler+0x8c>)
    1998:	47a0      	blx	r4
        display_state.display_lock_timer = 0;                   
    199a:	4b04      	ldr	r3, [pc, #16]	; (19ac <display_button_air_pump_handler+0x78>)
    199c:	2200      	movs	r2, #0
    199e:	611a      	str	r2, [r3, #16]

        display_update(true);
    19a0:	2001      	movs	r0, #1
    19a2:	4b08      	ldr	r3, [pc, #32]	; (19c4 <display_button_air_pump_handler+0x90>)
    19a4:	4798      	blx	r3
    }
}
    19a6:	46c0      	nop			; (mov r8, r8)
    19a8:	46bd      	mov	sp, r7
    19aa:	bdb0      	pop	{r4, r5, r7, pc}
    19ac:	20004604 	.word	0x20004604
    19b0:	000027f5 	.word	0x000027f5
    19b4:	00002835 	.word	0x00002835
    19b8:	0000286d 	.word	0x0000286d
    19bc:	200045b4 	.word	0x200045b4
    19c0:	0000d621 	.word	0x0000d621
    19c4:	00001619 	.word	0x00001619

000019c8 <display_button_down_handler>:

static void display_button_down_handler(void)
{
    19c8:	b590      	push	{r4, r7, lr}
    19ca:	b083      	sub	sp, #12
    19cc:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
    19ce:	4b16      	ldr	r3, [pc, #88]	; (1a28 <display_button_down_handler+0x60>)
    19d0:	7b1b      	ldrb	r3, [r3, #12]
    19d2:	2201      	movs	r2, #1
    19d4:	4053      	eors	r3, r2
    19d6:	b2db      	uxtb	r3, r3
    19d8:	2b00      	cmp	r3, #0
    19da:	d020      	beq.n	1a1e <display_button_down_handler+0x56>
        display_state.display_lock_timer = 0;
    19dc:	4b12      	ldr	r3, [pc, #72]	; (1a28 <display_button_down_handler+0x60>)
    19de:	2200      	movs	r2, #0
    19e0:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
    19e2:	1dfc      	adds	r4, r7, #7
    19e4:	4b11      	ldr	r3, [pc, #68]	; (1a2c <display_button_down_handler+0x64>)
    19e6:	4798      	blx	r3
    19e8:	0003      	movs	r3, r0
    19ea:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp-1) == STATUS_OK) {
    19ec:	1dfb      	adds	r3, r7, #7
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	3b01      	subs	r3, #1
    19f2:	b2db      	uxtb	r3, r3
    19f4:	0018      	movs	r0, r3
    19f6:	4b0e      	ldr	r3, [pc, #56]	; (1a30 <display_button_down_handler+0x68>)
    19f8:	4798      	blx	r3
    19fa:	1e03      	subs	r3, r0, #0
    19fc:	d10f      	bne.n	1a1e <display_button_down_handler+0x56>
            xSemaphoreGive(buzzer_sem);
    19fe:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <display_button_down_handler+0x6c>)
    1a00:	6818      	ldr	r0, [r3, #0]
    1a02:	2300      	movs	r3, #0
    1a04:	2200      	movs	r2, #0
    1a06:	2100      	movs	r1, #0
    1a08:	4c0b      	ldr	r4, [pc, #44]	; (1a38 <display_button_down_handler+0x70>)
    1a0a:	47a0      	blx	r4
            display_update(false);
    1a0c:	2000      	movs	r0, #0
    1a0e:	4b0b      	ldr	r3, [pc, #44]	; (1a3c <display_button_down_handler+0x74>)
    1a10:	4798      	blx	r3
            display_state.display_blink = true;
    1a12:	4b05      	ldr	r3, [pc, #20]	; (1a28 <display_button_down_handler+0x60>)
    1a14:	2201      	movs	r2, #1
    1a16:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
    1a18:	4b03      	ldr	r3, [pc, #12]	; (1a28 <display_button_down_handler+0x60>)
    1a1a:	2200      	movs	r2, #0
    1a1c:	72da      	strb	r2, [r3, #11]
        }
    }
}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	46bd      	mov	sp, r7
    1a22:	b003      	add	sp, #12
    1a24:	bd90      	pop	{r4, r7, pc}
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	20004604 	.word	0x20004604
    1a2c:	000027a1 	.word	0x000027a1
    1a30:	000026ed 	.word	0x000026ed
    1a34:	200045b4 	.word	0x200045b4
    1a38:	0000d621 	.word	0x0000d621
    1a3c:	00001619 	.word	0x00001619

00001a40 <display_button_up_handler>:

static void display_button_up_handler(void)
{
    1a40:	b590      	push	{r4, r7, lr}
    1a42:	b083      	sub	sp, #12
    1a44:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
    1a46:	4b16      	ldr	r3, [pc, #88]	; (1aa0 <display_button_up_handler+0x60>)
    1a48:	7b1b      	ldrb	r3, [r3, #12]
    1a4a:	2201      	movs	r2, #1
    1a4c:	4053      	eors	r3, r2
    1a4e:	b2db      	uxtb	r3, r3
    1a50:	2b00      	cmp	r3, #0
    1a52:	d020      	beq.n	1a96 <display_button_up_handler+0x56>
        display_state.display_lock_timer = 0;
    1a54:	4b12      	ldr	r3, [pc, #72]	; (1aa0 <display_button_up_handler+0x60>)
    1a56:	2200      	movs	r2, #0
    1a58:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
    1a5a:	1dfc      	adds	r4, r7, #7
    1a5c:	4b11      	ldr	r3, [pc, #68]	; (1aa4 <display_button_up_handler+0x64>)
    1a5e:	4798      	blx	r3
    1a60:	0003      	movs	r3, r0
    1a62:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp+1) == STATUS_OK) {
    1a64:	1dfb      	adds	r3, r7, #7
    1a66:	781b      	ldrb	r3, [r3, #0]
    1a68:	3301      	adds	r3, #1
    1a6a:	b2db      	uxtb	r3, r3
    1a6c:	0018      	movs	r0, r3
    1a6e:	4b0e      	ldr	r3, [pc, #56]	; (1aa8 <display_button_up_handler+0x68>)
    1a70:	4798      	blx	r3
    1a72:	1e03      	subs	r3, r0, #0
    1a74:	d10f      	bne.n	1a96 <display_button_up_handler+0x56>
            xSemaphoreGive(buzzer_sem);            
    1a76:	4b0d      	ldr	r3, [pc, #52]	; (1aac <display_button_up_handler+0x6c>)
    1a78:	6818      	ldr	r0, [r3, #0]
    1a7a:	2300      	movs	r3, #0
    1a7c:	2200      	movs	r2, #0
    1a7e:	2100      	movs	r1, #0
    1a80:	4c0b      	ldr	r4, [pc, #44]	; (1ab0 <display_button_up_handler+0x70>)
    1a82:	47a0      	blx	r4
            display_update(false);
    1a84:	2000      	movs	r0, #0
    1a86:	4b0b      	ldr	r3, [pc, #44]	; (1ab4 <display_button_up_handler+0x74>)
    1a88:	4798      	blx	r3
            display_state.display_blink = true;
    1a8a:	4b05      	ldr	r3, [pc, #20]	; (1aa0 <display_button_up_handler+0x60>)
    1a8c:	2201      	movs	r2, #1
    1a8e:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
    1a90:	4b03      	ldr	r3, [pc, #12]	; (1aa0 <display_button_up_handler+0x60>)
    1a92:	2200      	movs	r2, #0
    1a94:	72da      	strb	r2, [r3, #11]
        }
    }
}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	46bd      	mov	sp, r7
    1a9a:	b003      	add	sp, #12
    1a9c:	bd90      	pop	{r4, r7, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	20004604 	.word	0x20004604
    1aa4:	000027a1 	.word	0x000027a1
    1aa8:	000026ed 	.word	0x000026ed
    1aac:	200045b4 	.word	0x200045b4
    1ab0:	0000d621 	.word	0x0000d621
    1ab4:	00001619 	.word	0x00001619

00001ab8 <display_set_display>:

static void display_set_display(uint8_t *new_conf)
{    
    1ab8:	b580      	push	{r7, lr}
    1aba:	b082      	sub	sp, #8
    1abc:	af00      	add	r7, sp, #0
    1abe:	6078      	str	r0, [r7, #4]
    new_conf[0] = display_state.char_display[0];
    1ac0:	4b45      	ldr	r3, [pc, #276]	; (1bd8 <display_set_display+0x120>)
    1ac2:	781a      	ldrb	r2, [r3, #0]
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	701a      	strb	r2, [r3, #0]
    new_conf[1] = display_state.char_display[1];
    1ac8:	687b      	ldr	r3, [r7, #4]
    1aca:	3301      	adds	r3, #1
    1acc:	4a42      	ldr	r2, [pc, #264]	; (1bd8 <display_set_display+0x120>)
    1ace:	7852      	ldrb	r2, [r2, #1]
    1ad0:	701a      	strb	r2, [r3, #0]
    new_conf[2] = display_state.char_display[2];
    1ad2:	687b      	ldr	r3, [r7, #4]
    1ad4:	3302      	adds	r3, #2
    1ad6:	4a40      	ldr	r2, [pc, #256]	; (1bd8 <display_set_display+0x120>)
    1ad8:	7892      	ldrb	r2, [r2, #2]
    1ada:	701a      	strb	r2, [r3, #0]
        
    if (display_state.bubbles_on)
    1adc:	4b3e      	ldr	r3, [pc, #248]	; (1bd8 <display_set_display+0x120>)
    1ade:	79db      	ldrb	r3, [r3, #7]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d008      	beq.n	1af6 <display_set_display+0x3e>
        new_conf[4] |= LED_BUBBLES;
    1ae4:	687b      	ldr	r3, [r7, #4]
    1ae6:	3304      	adds	r3, #4
    1ae8:	687a      	ldr	r2, [r7, #4]
    1aea:	3204      	adds	r2, #4
    1aec:	7812      	ldrb	r2, [r2, #0]
    1aee:	2104      	movs	r1, #4
    1af0:	430a      	orrs	r2, r1
    1af2:	b2d2      	uxtb	r2, r2
    1af4:	701a      	strb	r2, [r3, #0]

    if (display_state.degrees_F)
    1af6:	4b38      	ldr	r3, [pc, #224]	; (1bd8 <display_set_display+0x120>)
    1af8:	78db      	ldrb	r3, [r3, #3]
    1afa:	2b00      	cmp	r3, #0
    1afc:	d009      	beq.n	1b12 <display_set_display+0x5a>
        new_conf[4] |= LED_DEG_F;
    1afe:	687b      	ldr	r3, [r7, #4]
    1b00:	3304      	adds	r3, #4
    1b02:	687a      	ldr	r2, [r7, #4]
    1b04:	3204      	adds	r2, #4
    1b06:	7812      	ldrb	r2, [r2, #0]
    1b08:	2102      	movs	r1, #2
    1b0a:	430a      	orrs	r2, r1
    1b0c:	b2d2      	uxtb	r2, r2
    1b0e:	701a      	strb	r2, [r3, #0]
    1b10:	e008      	b.n	1b24 <display_set_display+0x6c>
    else
        new_conf[4] |= LED_DEG_C;
    1b12:	687b      	ldr	r3, [r7, #4]
    1b14:	3304      	adds	r3, #4
    1b16:	687a      	ldr	r2, [r7, #4]
    1b18:	3204      	adds	r2, #4
    1b1a:	7812      	ldrb	r2, [r2, #0]
    1b1c:	2101      	movs	r1, #1
    1b1e:	430a      	orrs	r2, r1
    1b20:	b2d2      	uxtb	r2, r2
    1b22:	701a      	strb	r2, [r3, #0]

    if (display_state.pump_on) {
    1b24:	4b2c      	ldr	r3, [pc, #176]	; (1bd8 <display_set_display+0x120>)
    1b26:	7a1b      	ldrb	r3, [r3, #8]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d028      	beq.n	1b7e <display_set_display+0xc6>
        new_conf[3] |= LED_PUMP;
    1b2c:	687b      	ldr	r3, [r7, #4]
    1b2e:	3303      	adds	r3, #3
    1b30:	687a      	ldr	r2, [r7, #4]
    1b32:	3203      	adds	r2, #3
    1b34:	7812      	ldrb	r2, [r2, #0]
    1b36:	2102      	movs	r1, #2
    1b38:	430a      	orrs	r2, r1
    1b3a:	b2d2      	uxtb	r2, r2
    1b3c:	701a      	strb	r2, [r3, #0]
        new_conf[3] |= LED_TIMER;
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	3303      	adds	r3, #3
    1b42:	687a      	ldr	r2, [r7, #4]
    1b44:	3203      	adds	r2, #3
    1b46:	7812      	ldrb	r2, [r2, #0]
    1b48:	2110      	movs	r1, #16
    1b4a:	430a      	orrs	r2, r1
    1b4c:	b2d2      	uxtb	r2, r2
    1b4e:	701a      	strb	r2, [r3, #0]
        if (display_state.heater_on)
    1b50:	4b21      	ldr	r3, [pc, #132]	; (1bd8 <display_set_display+0x120>)
    1b52:	799b      	ldrb	r3, [r3, #6]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d009      	beq.n	1b6c <display_set_display+0xb4>
            new_conf[3] |= LED_HEATON;
    1b58:	687b      	ldr	r3, [r7, #4]
    1b5a:	3303      	adds	r3, #3
    1b5c:	687a      	ldr	r2, [r7, #4]
    1b5e:	3203      	adds	r2, #3
    1b60:	7812      	ldrb	r2, [r2, #0]
    1b62:	2104      	movs	r1, #4
    1b64:	430a      	orrs	r2, r1
    1b66:	b2d2      	uxtb	r2, r2
    1b68:	701a      	strb	r2, [r3, #0]
    1b6a:	e008      	b.n	1b7e <display_set_display+0xc6>
        else
            new_conf[3] |= LED_HEATOFF;
    1b6c:	687b      	ldr	r3, [r7, #4]
    1b6e:	3303      	adds	r3, #3
    1b70:	687a      	ldr	r2, [r7, #4]
    1b72:	3203      	adds	r2, #3
    1b74:	7812      	ldrb	r2, [r2, #0]
    1b76:	2108      	movs	r1, #8
    1b78:	430a      	orrs	r2, r1
    1b7a:	b2d2      	uxtb	r2, r2
    1b7c:	701a      	strb	r2, [r3, #0]
    }

    if (display_state.timer_set)
    1b7e:	4b16      	ldr	r3, [pc, #88]	; (1bd8 <display_set_display+0x120>)
    1b80:	791b      	ldrb	r3, [r3, #4]
    1b82:	2b00      	cmp	r3, #0
    1b84:	d008      	beq.n	1b98 <display_set_display+0xe0>
        new_conf[3] |= LED_TIMER_SET;
    1b86:	687b      	ldr	r3, [r7, #4]
    1b88:	3303      	adds	r3, #3
    1b8a:	687a      	ldr	r2, [r7, #4]
    1b8c:	3203      	adds	r2, #3
    1b8e:	7812      	ldrb	r2, [r2, #0]
    1b90:	2140      	movs	r1, #64	; 0x40
    1b92:	430a      	orrs	r2, r1
    1b94:	b2d2      	uxtb	r2, r2
    1b96:	701a      	strb	r2, [r3, #0]

    if (display_state.display_locked)
    1b98:	4b0f      	ldr	r3, [pc, #60]	; (1bd8 <display_set_display+0x120>)
    1b9a:	7b1b      	ldrb	r3, [r3, #12]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d008      	beq.n	1bb2 <display_set_display+0xfa>
        new_conf[3] |= LED_LOCK;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	3303      	adds	r3, #3
    1ba4:	687a      	ldr	r2, [r7, #4]
    1ba6:	3203      	adds	r2, #3
    1ba8:	7812      	ldrb	r2, [r2, #0]
    1baa:	2120      	movs	r1, #32
    1bac:	430a      	orrs	r2, r1
    1bae:	b2d2      	uxtb	r2, r2
    1bb0:	701a      	strb	r2, [r3, #0]

    if (display_state.timer_on)
    1bb2:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <display_set_display+0x120>)
    1bb4:	795b      	ldrb	r3, [r3, #5]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d009      	beq.n	1bce <display_set_display+0x116>
        new_conf[3] |= LED_CLOCK;    
    1bba:	687b      	ldr	r3, [r7, #4]
    1bbc:	3303      	adds	r3, #3
    1bbe:	687a      	ldr	r2, [r7, #4]
    1bc0:	3203      	adds	r2, #3
    1bc2:	7812      	ldrb	r2, [r2, #0]
    1bc4:	2180      	movs	r1, #128	; 0x80
    1bc6:	4249      	negs	r1, r1
    1bc8:	430a      	orrs	r2, r1
    1bca:	b2d2      	uxtb	r2, r2
    1bcc:	701a      	strb	r2, [r3, #0]
}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	46bd      	mov	sp, r7
    1bd2:	b002      	add	sp, #8
    1bd4:	bd80      	pop	{r7, pc}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	20004604 	.word	0x20004604

00001bdc <display_init>:
    {BUTTON_TIMER,          display_timer_handler },
    { 0, NULL },
};

void display_init(void)
{
    1bdc:	b580      	push	{r7, lr}
    1bde:	af00      	add	r7, sp, #0
    wtc6508_init();   
    1be0:	4b10      	ldr	r3, [pc, #64]	; (1c24 <display_init+0x48>)
    1be2:	4798      	blx	r3
    tm1640_init();
    1be4:	4b10      	ldr	r3, [pc, #64]	; (1c28 <display_init+0x4c>)
    1be6:	4798      	blx	r3

    memset(&display_state, 0, sizeof(display_state));
    1be8:	4b10      	ldr	r3, [pc, #64]	; (1c2c <display_init+0x50>)
    1bea:	2218      	movs	r2, #24
    1bec:	2100      	movs	r1, #0
    1bee:	0018      	movs	r0, r3
    1bf0:	4b0f      	ldr	r3, [pc, #60]	; (1c30 <display_init+0x54>)
    1bf2:	4798      	blx	r3

    // Set the initial display state
    display_state.char_display[0] = SEG_0;
    1bf4:	4b0d      	ldr	r3, [pc, #52]	; (1c2c <display_init+0x50>)
    1bf6:	223f      	movs	r2, #63	; 0x3f
    1bf8:	701a      	strb	r2, [r3, #0]
    display_state.char_display[1] = SEG_0;
    1bfa:	4b0c      	ldr	r3, [pc, #48]	; (1c2c <display_init+0x50>)
    1bfc:	223f      	movs	r2, #63	; 0x3f
    1bfe:	705a      	strb	r2, [r3, #1]
    display_state.char_display[2] = SEG_0;
    1c00:	4b0a      	ldr	r3, [pc, #40]	; (1c2c <display_init+0x50>)
    1c02:	223f      	movs	r2, #63	; 0x3f
    1c04:	709a      	strb	r2, [r3, #2]

    display_state.degrees_F = true;        
    1c06:	4b09      	ldr	r3, [pc, #36]	; (1c2c <display_init+0x50>)
    1c08:	2201      	movs	r2, #1
    1c0a:	70da      	strb	r2, [r3, #3]
    display_state.display_update = true;    
    1c0c:	4b07      	ldr	r3, [pc, #28]	; (1c2c <display_init+0x50>)
    1c0e:	2201      	movs	r2, #1
    1c10:	725a      	strb	r2, [r3, #9]

    display_update_mutex = xSemaphoreCreateMutex();
    1c12:	2001      	movs	r0, #1
    1c14:	4b07      	ldr	r3, [pc, #28]	; (1c34 <display_init+0x58>)
    1c16:	4798      	blx	r3
    1c18:	0002      	movs	r2, r0
    1c1a:	4b07      	ldr	r3, [pc, #28]	; (1c38 <display_init+0x5c>)
    1c1c:	601a      	str	r2, [r3, #0]
}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	46bd      	mov	sp, r7
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00003075 	.word	0x00003075
    1c28:	00002c7d 	.word	0x00002c7d
    1c2c:	20004604 	.word	0x20004604
    1c30:	00010de7 	.word	0x00010de7
    1c34:	0000d5e1 	.word	0x0000d5e1
    1c38:	200045c4 	.word	0x200045c4

00001c3c <display_idle>:

void display_idle(void)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
    1c42:	003b      	movs	r3, r7
    1c44:	0018      	movs	r0, r3
    1c46:	2305      	movs	r3, #5
    1c48:	001a      	movs	r2, r3
    1c4a:	2100      	movs	r1, #0
    1c4c:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <display_idle+0x4c>)
    1c4e:	4798      	blx	r3

    if (display_state.display_update && !display_state.display_blink) {
    1c50:	4b0e      	ldr	r3, [pc, #56]	; (1c8c <display_idle+0x50>)
    1c52:	7a5b      	ldrb	r3, [r3, #9]
    1c54:	2b00      	cmp	r3, #0
    1c56:	d013      	beq.n	1c80 <display_idle+0x44>
    1c58:	4b0c      	ldr	r3, [pc, #48]	; (1c8c <display_idle+0x50>)
    1c5a:	7a9b      	ldrb	r3, [r3, #10]
    1c5c:	2201      	movs	r2, #1
    1c5e:	4053      	eors	r3, r2
    1c60:	b2db      	uxtb	r3, r3
    1c62:	2b00      	cmp	r3, #0
    1c64:	d00c      	beq.n	1c80 <display_idle+0x44>
        display_update(false);
    1c66:	2000      	movs	r0, #0
    1c68:	4b09      	ldr	r3, [pc, #36]	; (1c90 <display_idle+0x54>)
    1c6a:	4798      	blx	r3

        // Perform a display update        
        display_set_display(disp_conf);
    1c6c:	003b      	movs	r3, r7
    1c6e:	0018      	movs	r0, r3
    1c70:	4b08      	ldr	r3, [pc, #32]	; (1c94 <display_idle+0x58>)
    1c72:	4798      	blx	r3

        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
    1c74:	003b      	movs	r3, r7
    1c76:	228f      	movs	r2, #143	; 0x8f
    1c78:	2105      	movs	r1, #5
    1c7a:	0018      	movs	r0, r3
    1c7c:	4b06      	ldr	r3, [pc, #24]	; (1c98 <display_idle+0x5c>)
    1c7e:	4798      	blx	r3
    }
}
    1c80:	46c0      	nop			; (mov r8, r8)
    1c82:	46bd      	mov	sp, r7
    1c84:	b002      	add	sp, #8
    1c86:	bd80      	pop	{r7, pc}
    1c88:	00010de7 	.word	0x00010de7
    1c8c:	20004604 	.word	0x20004604
    1c90:	00001619 	.word	0x00001619
    1c94:	00001ab9 	.word	0x00001ab9
    1c98:	00002cf9 	.word	0x00002cf9

00001c9c <display_update_1Hz>:

void display_update_1Hz(void)
{
    1c9c:	b590      	push	{r4, r7, lr}
    1c9e:	b083      	sub	sp, #12
    1ca0:	af00      	add	r7, sp, #0
    static bool blink_state = false;
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
    1ca2:	003b      	movs	r3, r7
    1ca4:	0018      	movs	r0, r3
    1ca6:	2305      	movs	r3, #5
    1ca8:	001a      	movs	r2, r3
    1caa:	2100      	movs	r1, #0
    1cac:	4b4b      	ldr	r3, [pc, #300]	; (1ddc <display_update_1Hz+0x140>)
    1cae:	4798      	blx	r3
    uint8_t temperature;

    if (display_state.display_blink) {
    1cb0:	4b4b      	ldr	r3, [pc, #300]	; (1de0 <display_update_1Hz+0x144>)
    1cb2:	7a9b      	ldrb	r3, [r3, #10]
    1cb4:	2b00      	cmp	r3, #0
    1cb6:	d040      	beq.n	1d3a <display_update_1Hz+0x9e>

        display_set_display(disp_conf);
    1cb8:	003b      	movs	r3, r7
    1cba:	0018      	movs	r0, r3
    1cbc:	4b49      	ldr	r3, [pc, #292]	; (1de4 <display_update_1Hz+0x148>)
    1cbe:	4798      	blx	r3
        // Only the character display should blink        
        if (blink_state) {
    1cc0:	4b49      	ldr	r3, [pc, #292]	; (1de8 <display_update_1Hz+0x14c>)
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d009      	beq.n	1cdc <display_update_1Hz+0x40>
            disp_conf[0] = SEG_OFF;
    1cc8:	003b      	movs	r3, r7
    1cca:	2200      	movs	r2, #0
    1ccc:	701a      	strb	r2, [r3, #0]
            disp_conf[1] = SEG_OFF;
    1cce:	003b      	movs	r3, r7
    1cd0:	2200      	movs	r2, #0
    1cd2:	705a      	strb	r2, [r3, #1]
            disp_conf[2] = SEG_OFF;
    1cd4:	003b      	movs	r3, r7
    1cd6:	2200      	movs	r2, #0
    1cd8:	709a      	strb	r2, [r3, #2]
    1cda:	e00b      	b.n	1cf4 <display_update_1Hz+0x58>
        }
        else {
            temperature = thermal_get_temperature();
    1cdc:	1dfc      	adds	r4, r7, #7
    1cde:	4b43      	ldr	r3, [pc, #268]	; (1dec <display_update_1Hz+0x150>)
    1ce0:	4798      	blx	r3
    1ce2:	0003      	movs	r3, r0
    1ce4:	7023      	strb	r3, [r4, #0]
            display_number_to_seg(temperature, disp_conf);
    1ce6:	003a      	movs	r2, r7
    1ce8:	1dfb      	adds	r3, r7, #7
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	0011      	movs	r1, r2
    1cee:	0018      	movs	r0, r3
    1cf0:	4b3f      	ldr	r3, [pc, #252]	; (1df0 <display_update_1Hz+0x154>)
    1cf2:	4798      	blx	r3
        }

        if (display_state.display_blink_timer++ >= DISPLAY_BLINK_TIME) {
    1cf4:	4b3a      	ldr	r3, [pc, #232]	; (1de0 <display_update_1Hz+0x144>)
    1cf6:	7adb      	ldrb	r3, [r3, #11]
    1cf8:	1c5a      	adds	r2, r3, #1
    1cfa:	b2d1      	uxtb	r1, r2
    1cfc:	4a38      	ldr	r2, [pc, #224]	; (1de0 <display_update_1Hz+0x144>)
    1cfe:	72d1      	strb	r1, [r2, #11]
    1d00:	2b04      	cmp	r3, #4
    1d02:	d909      	bls.n	1d18 <display_update_1Hz+0x7c>
            display_state.display_blink_timer = 0;
    1d04:	4b36      	ldr	r3, [pc, #216]	; (1de0 <display_update_1Hz+0x144>)
    1d06:	2200      	movs	r2, #0
    1d08:	72da      	strb	r2, [r3, #11]
            display_state.display_blink = 0;
    1d0a:	4b35      	ldr	r3, [pc, #212]	; (1de0 <display_update_1Hz+0x144>)
    1d0c:	2200      	movs	r2, #0
    1d0e:	729a      	strb	r2, [r3, #10]
            blink_state = false;
    1d10:	4b35      	ldr	r3, [pc, #212]	; (1de8 <display_update_1Hz+0x14c>)
    1d12:	2200      	movs	r2, #0
    1d14:	701a      	strb	r2, [r3, #0]
    1d16:	e009      	b.n	1d2c <display_update_1Hz+0x90>
        }
        else
            blink_state ^= 1;
    1d18:	4b33      	ldr	r3, [pc, #204]	; (1de8 <display_update_1Hz+0x14c>)
    1d1a:	781b      	ldrb	r3, [r3, #0]
    1d1c:	2201      	movs	r2, #1
    1d1e:	4053      	eors	r3, r2
    1d20:	b2db      	uxtb	r3, r3
    1d22:	1e5a      	subs	r2, r3, #1
    1d24:	4193      	sbcs	r3, r2
    1d26:	b2da      	uxtb	r2, r3
    1d28:	4b2f      	ldr	r3, [pc, #188]	; (1de8 <display_update_1Hz+0x14c>)
    1d2a:	701a      	strb	r2, [r3, #0]
                        
        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
    1d2c:	003b      	movs	r3, r7
    1d2e:	228f      	movs	r2, #143	; 0x8f
    1d30:	2105      	movs	r1, #5
    1d32:	0018      	movs	r0, r3
    1d34:	4b2f      	ldr	r3, [pc, #188]	; (1df4 <display_update_1Hz+0x158>)
    1d36:	4798      	blx	r3
    1d38:	e01c      	b.n	1d74 <display_update_1Hz+0xd8>
    }
    else {
        // Check to see if the temperature changed
        temperature = thermal_get_water_temp();
    1d3a:	1dfc      	adds	r4, r7, #7
    1d3c:	4b2e      	ldr	r3, [pc, #184]	; (1df8 <display_update_1Hz+0x15c>)
    1d3e:	4798      	blx	r3
    1d40:	0003      	movs	r3, r0
    1d42:	7023      	strb	r3, [r4, #0]
        if (temperature != 0xFF) {
    1d44:	1dfb      	adds	r3, r7, #7
    1d46:	781b      	ldrb	r3, [r3, #0]
    1d48:	2bff      	cmp	r3, #255	; 0xff
    1d4a:	d007      	beq.n	1d5c <display_update_1Hz+0xc0>
            // 255 represents an invalid/un-updated temperature
            display_number_to_seg(temperature, (uint8_t *) &display_state.char_display[0]);
    1d4c:	4a24      	ldr	r2, [pc, #144]	; (1de0 <display_update_1Hz+0x144>)
    1d4e:	1dfb      	adds	r3, r7, #7
    1d50:	781b      	ldrb	r3, [r3, #0]
    1d52:	0011      	movs	r1, r2
    1d54:	0018      	movs	r0, r3
    1d56:	4b26      	ldr	r3, [pc, #152]	; (1df0 <display_update_1Hz+0x154>)
    1d58:	4798      	blx	r3
    1d5a:	e008      	b.n	1d6e <display_update_1Hz+0xd2>
        }        
        else {
            display_state.char_display[0] = SEG_0;
    1d5c:	4b20      	ldr	r3, [pc, #128]	; (1de0 <display_update_1Hz+0x144>)
    1d5e:	223f      	movs	r2, #63	; 0x3f
    1d60:	701a      	strb	r2, [r3, #0]
            display_state.char_display[1] = SEG_0;
    1d62:	4b1f      	ldr	r3, [pc, #124]	; (1de0 <display_update_1Hz+0x144>)
    1d64:	223f      	movs	r2, #63	; 0x3f
    1d66:	705a      	strb	r2, [r3, #1]
            display_state.char_display[2] = SEG_0;
    1d68:	4b1d      	ldr	r3, [pc, #116]	; (1de0 <display_update_1Hz+0x144>)
    1d6a:	223f      	movs	r2, #63	; 0x3f
    1d6c:	709a      	strb	r2, [r3, #2]
        }
        display_update(true);
    1d6e:	2001      	movs	r0, #1
    1d70:	4b22      	ldr	r3, [pc, #136]	; (1dfc <display_update_1Hz+0x160>)
    1d72:	4798      	blx	r3
    }    

    if (display_state.heater_on) {
    1d74:	4b1a      	ldr	r3, [pc, #104]	; (1de0 <display_update_1Hz+0x144>)
    1d76:	799b      	ldrb	r3, [r3, #6]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d013      	beq.n	1da4 <display_update_1Hz+0x108>
        if (thermal_get_water_temp() >= (thermal_get_temperature() + WATER_TEMP_HYST)) {
    1d7c:	4b1e      	ldr	r3, [pc, #120]	; (1df8 <display_update_1Hz+0x15c>)
    1d7e:	4798      	blx	r3
    1d80:	0003      	movs	r3, r0
    1d82:	001c      	movs	r4, r3
    1d84:	4b19      	ldr	r3, [pc, #100]	; (1dec <display_update_1Hz+0x150>)
    1d86:	4798      	blx	r3
    1d88:	0003      	movs	r3, r0
    1d8a:	3301      	adds	r3, #1
    1d8c:	429c      	cmp	r4, r3
    1d8e:	db20      	blt.n	1dd2 <display_update_1Hz+0x136>
            display_state.heater_on = false;            
    1d90:	4b13      	ldr	r3, [pc, #76]	; (1de0 <display_update_1Hz+0x144>)
    1d92:	2200      	movs	r2, #0
    1d94:	719a      	strb	r2, [r3, #6]
            thermal_turn_on_heater(false);
    1d96:	2000      	movs	r0, #0
    1d98:	4b19      	ldr	r3, [pc, #100]	; (1e00 <display_update_1Hz+0x164>)
    1d9a:	4798      	blx	r3
            display_update(true);
    1d9c:	2001      	movs	r0, #1
    1d9e:	4b17      	ldr	r3, [pc, #92]	; (1dfc <display_update_1Hz+0x160>)
    1da0:	4798      	blx	r3
                thermal_turn_on_heater(true);
                display_update(true);
            }
        }
    }
}
    1da2:	e016      	b.n	1dd2 <display_update_1Hz+0x136>
            thermal_turn_on_heater(false);
            display_update(true);
        }
    }
    else {
        if (display_state.pump_on) {
    1da4:	4b0e      	ldr	r3, [pc, #56]	; (1de0 <display_update_1Hz+0x144>)
    1da6:	7a1b      	ldrb	r3, [r3, #8]
    1da8:	2b00      	cmp	r3, #0
    1daa:	d012      	beq.n	1dd2 <display_update_1Hz+0x136>
            if (thermal_get_water_temp() < (thermal_get_temperature() - WATER_TEMP_HYST)) {
    1dac:	4b12      	ldr	r3, [pc, #72]	; (1df8 <display_update_1Hz+0x15c>)
    1dae:	4798      	blx	r3
    1db0:	0003      	movs	r3, r0
    1db2:	001c      	movs	r4, r3
    1db4:	4b0d      	ldr	r3, [pc, #52]	; (1dec <display_update_1Hz+0x150>)
    1db6:	4798      	blx	r3
    1db8:	0003      	movs	r3, r0
    1dba:	3b01      	subs	r3, #1
    1dbc:	429c      	cmp	r4, r3
    1dbe:	da08      	bge.n	1dd2 <display_update_1Hz+0x136>
                display_state.heater_on = true;                
    1dc0:	4b07      	ldr	r3, [pc, #28]	; (1de0 <display_update_1Hz+0x144>)
    1dc2:	2201      	movs	r2, #1
    1dc4:	719a      	strb	r2, [r3, #6]
                thermal_turn_on_heater(true);
    1dc6:	2001      	movs	r0, #1
    1dc8:	4b0d      	ldr	r3, [pc, #52]	; (1e00 <display_update_1Hz+0x164>)
    1dca:	4798      	blx	r3
                display_update(true);
    1dcc:	2001      	movs	r0, #1
    1dce:	4b0b      	ldr	r3, [pc, #44]	; (1dfc <display_update_1Hz+0x160>)
    1dd0:	4798      	blx	r3
            }
        }
    }
}
    1dd2:	46c0      	nop			; (mov r8, r8)
    1dd4:	46bd      	mov	sp, r7
    1dd6:	b003      	add	sp, #12
    1dd8:	bd90      	pop	{r4, r7, pc}
    1dda:	46c0      	nop			; (mov r8, r8)
    1ddc:	00010de7 	.word	0x00010de7
    1de0:	20004604 	.word	0x20004604
    1de4:	00001ab9 	.word	0x00001ab9
    1de8:	200000c4 	.word	0x200000c4
    1dec:	000027a1 	.word	0x000027a1
    1df0:	00001655 	.word	0x00001655
    1df4:	00002cf9 	.word	0x00002cf9
    1df8:	000027b5 	.word	0x000027b5
    1dfc:	00001619 	.word	0x00001619
    1e00:	000027f5 	.word	0x000027f5

00001e04 <display_update_33Hz>:

void display_update_33Hz(void)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b082      	sub	sp, #8
    1e08:	af00      	add	r7, sp, #0
    static uint8_t touch_detect_delay = 0;

    uint8_t status = 0;    
    1e0a:	1dbb      	adds	r3, r7, #6
    1e0c:	2200      	movs	r2, #0
    1e0e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
    1e10:	1dfb      	adds	r3, r7, #7
    1e12:	2200      	movs	r2, #0
    1e14:	701a      	strb	r2, [r3, #0]
    
    if (!touch_detect_delay) {
    1e16:	4b34      	ldr	r3, [pc, #208]	; (1ee8 <display_update_33Hz+0xe4>)
    1e18:	781b      	ldrb	r3, [r3, #0]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d145      	bne.n	1eaa <display_update_33Hz+0xa6>
        // Check for user input
        if (wtc6508_read(&status)) {
    1e1e:	1dbb      	adds	r3, r7, #6
    1e20:	0018      	movs	r0, r3
    1e22:	4b32      	ldr	r3, [pc, #200]	; (1eec <display_update_33Hz+0xe8>)
    1e24:	4798      	blx	r3
    1e26:	1e03      	subs	r3, r0, #0
    1e28:	d006      	beq.n	1e38 <display_update_33Hz+0x34>
            printf("Error! Unable to read button status\n");
    1e2a:	4b31      	ldr	r3, [pc, #196]	; (1ef0 <display_update_33Hz+0xec>)
    1e2c:	0018      	movs	r0, r3
    1e2e:	4b31      	ldr	r3, [pc, #196]	; (1ef4 <display_update_33Hz+0xf0>)
    1e30:	4798      	blx	r3
            status = 0;
    1e32:	1dbb      	adds	r3, r7, #6
    1e34:	2200      	movs	r2, #0
    1e36:	701a      	strb	r2, [r3, #0]
        }

        // Handle user input
        if (status) {          
    1e38:	1dbb      	adds	r3, r7, #6
    1e3a:	781b      	ldrb	r3, [r3, #0]
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d02c      	beq.n	1e9a <display_update_33Hz+0x96>
            touch_detect_delay = TOUCH_DETECT_DELAY;            
    1e40:	4b29      	ldr	r3, [pc, #164]	; (1ee8 <display_update_33Hz+0xe4>)
    1e42:	2205      	movs	r2, #5
    1e44:	701a      	strb	r2, [r3, #0]

            while (display_handlers[i].button_mask) {
    1e46:	e020      	b.n	1e8a <display_update_33Hz+0x86>
                if ((display_handlers[i].button_mask & status) && 
    1e48:	1dfb      	adds	r3, r7, #7
    1e4a:	781a      	ldrb	r2, [r3, #0]
    1e4c:	4b2a      	ldr	r3, [pc, #168]	; (1ef8 <display_update_33Hz+0xf4>)
    1e4e:	00d2      	lsls	r2, r2, #3
    1e50:	5cd3      	ldrb	r3, [r2, r3]
    1e52:	1dba      	adds	r2, r7, #6
    1e54:	7812      	ldrb	r2, [r2, #0]
    1e56:	4013      	ands	r3, r2
    1e58:	b2db      	uxtb	r3, r3
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d010      	beq.n	1e80 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
    1e5e:	1dfb      	adds	r3, r7, #7
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	4a25      	ldr	r2, [pc, #148]	; (1ef8 <display_update_33Hz+0xf4>)
    1e64:	00db      	lsls	r3, r3, #3
    1e66:	18d3      	adds	r3, r2, r3
    1e68:	3304      	adds	r3, #4
    1e6a:	681b      	ldr	r3, [r3, #0]
        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
                if ((display_handlers[i].button_mask & status) && 
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	d007      	beq.n	1e80 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
                     display_handlers[i].handler();
    1e70:	1dfb      	adds	r3, r7, #7
    1e72:	781b      	ldrb	r3, [r3, #0]
    1e74:	4a20      	ldr	r2, [pc, #128]	; (1ef8 <display_update_33Hz+0xf4>)
    1e76:	00db      	lsls	r3, r3, #3
    1e78:	18d3      	adds	r3, r2, r3
    1e7a:	3304      	adds	r3, #4
    1e7c:	681b      	ldr	r3, [r3, #0]
    1e7e:	4798      	blx	r3
                }
                i++;
    1e80:	1dfb      	adds	r3, r7, #7
    1e82:	781a      	ldrb	r2, [r3, #0]
    1e84:	1dfb      	adds	r3, r7, #7
    1e86:	3201      	adds	r2, #1
    1e88:	701a      	strb	r2, [r3, #0]

        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
    1e8a:	1dfb      	adds	r3, r7, #7
    1e8c:	781a      	ldrb	r2, [r3, #0]
    1e8e:	4b1a      	ldr	r3, [pc, #104]	; (1ef8 <display_update_33Hz+0xf4>)
    1e90:	00d2      	lsls	r2, r2, #3
    1e92:	5cd3      	ldrb	r3, [r2, r3]
    1e94:	2b00      	cmp	r3, #0
    1e96:	d1d7      	bne.n	1e48 <display_update_33Hz+0x44>
    1e98:	e00d      	b.n	1eb6 <display_update_33Hz+0xb2>
                     display_handlers[i].handler();
                }
                i++;
            }
        }
        else if (display_state.display_unlock_timer > 0)
    1e9a:	4b18      	ldr	r3, [pc, #96]	; (1efc <display_update_33Hz+0xf8>)
    1e9c:	695b      	ldr	r3, [r3, #20]
    1e9e:	2b00      	cmp	r3, #0
    1ea0:	d009      	beq.n	1eb6 <display_update_33Hz+0xb2>
            // Reset the display unlock timer because the user isn't holding the button anymore
            display_state.display_unlock_timer = 0;
    1ea2:	4b16      	ldr	r3, [pc, #88]	; (1efc <display_update_33Hz+0xf8>)
    1ea4:	2200      	movs	r2, #0
    1ea6:	615a      	str	r2, [r3, #20]
    1ea8:	e005      	b.n	1eb6 <display_update_33Hz+0xb2>
    }
    else
        touch_detect_delay--;
    1eaa:	4b0f      	ldr	r3, [pc, #60]	; (1ee8 <display_update_33Hz+0xe4>)
    1eac:	781b      	ldrb	r3, [r3, #0]
    1eae:	3b01      	subs	r3, #1
    1eb0:	b2da      	uxtb	r2, r3
    1eb2:	4b0d      	ldr	r3, [pc, #52]	; (1ee8 <display_update_33Hz+0xe4>)
    1eb4:	701a      	strb	r2, [r3, #0]

    if (!display_state.display_locked && display_state.display_lock_timer++ > DISPLAY_LOCK_TIME) {
    1eb6:	4b11      	ldr	r3, [pc, #68]	; (1efc <display_update_33Hz+0xf8>)
    1eb8:	7b1b      	ldrb	r3, [r3, #12]
    1eba:	2201      	movs	r2, #1
    1ebc:	4053      	eors	r3, r2
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d00d      	beq.n	1ee0 <display_update_33Hz+0xdc>
    1ec4:	4b0d      	ldr	r3, [pc, #52]	; (1efc <display_update_33Hz+0xf8>)
    1ec6:	691b      	ldr	r3, [r3, #16]
    1ec8:	1c59      	adds	r1, r3, #1
    1eca:	4a0c      	ldr	r2, [pc, #48]	; (1efc <display_update_33Hz+0xf8>)
    1ecc:	6111      	str	r1, [r2, #16]
    1ece:	4a0c      	ldr	r2, [pc, #48]	; (1f00 <display_update_33Hz+0xfc>)
    1ed0:	4293      	cmp	r3, r2
    1ed2:	d905      	bls.n	1ee0 <display_update_33Hz+0xdc>
        display_state.display_locked = true;
    1ed4:	4b09      	ldr	r3, [pc, #36]	; (1efc <display_update_33Hz+0xf8>)
    1ed6:	2201      	movs	r2, #1
    1ed8:	731a      	strb	r2, [r3, #12]
        display_update(true);
    1eda:	2001      	movs	r0, #1
    1edc:	4b09      	ldr	r3, [pc, #36]	; (1f04 <display_update_33Hz+0x100>)
    1ede:	4798      	blx	r3
    }
}
    1ee0:	46c0      	nop			; (mov r8, r8)
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b002      	add	sp, #8
    1ee6:	bd80      	pop	{r7, pc}
    1ee8:	200000c5 	.word	0x200000c5
    1eec:	00003119 	.word	0x00003119
    1ef0:	00012a78 	.word	0x00012a78
    1ef4:	000115f9 	.word	0x000115f9
    1ef8:	00012a30 	.word	0x00012a30
    1efc:	20004604 	.word	0x20004604
    1f00:	00002710 	.word	0x00002710
    1f04:	00001619 	.word	0x00001619

00001f08 <display_get_display_state>:

#endif
}

display_state_t *display_get_display_state(void)
{
    1f08:	b580      	push	{r7, lr}
    1f0a:	af00      	add	r7, sp, #0
    return &display_state;
    1f0c:	4b01      	ldr	r3, [pc, #4]	; (1f14 <display_get_display_state+0xc>)
}
    1f0e:	0018      	movs	r0, r3
    1f10:	46bd      	mov	sp, r7
    1f12:	bd80      	pop	{r7, pc}
    1f14:	20004604 	.word	0x20004604

00001f18 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1f18:	b580      	push	{r7, lr}
    1f1a:	b084      	sub	sp, #16
    1f1c:	af00      	add	r7, sp, #0
    1f1e:	0002      	movs	r2, r0
    1f20:	1dfb      	adds	r3, r7, #7
    1f22:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1f24:	230f      	movs	r3, #15
    1f26:	18fb      	adds	r3, r7, r3
    1f28:	1dfa      	adds	r2, r7, #7
    1f2a:	7812      	ldrb	r2, [r2, #0]
    1f2c:	09d2      	lsrs	r2, r2, #7
    1f2e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1f30:	230e      	movs	r3, #14
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	1dfa      	adds	r2, r7, #7
    1f36:	7812      	ldrb	r2, [r2, #0]
    1f38:	0952      	lsrs	r2, r2, #5
    1f3a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1f3c:	4b0d      	ldr	r3, [pc, #52]	; (1f74 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1f3e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1f40:	230f      	movs	r3, #15
    1f42:	18fb      	adds	r3, r7, r3
    1f44:	781b      	ldrb	r3, [r3, #0]
    1f46:	2b00      	cmp	r3, #0
    1f48:	d10f      	bne.n	1f6a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1f4a:	230f      	movs	r3, #15
    1f4c:	18fb      	adds	r3, r7, r3
    1f4e:	781b      	ldrb	r3, [r3, #0]
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	2210      	movs	r2, #16
    1f54:	4694      	mov	ip, r2
    1f56:	44bc      	add	ip, r7
    1f58:	4463      	add	r3, ip
    1f5a:	3b08      	subs	r3, #8
    1f5c:	681a      	ldr	r2, [r3, #0]
    1f5e:	230e      	movs	r3, #14
    1f60:	18fb      	adds	r3, r7, r3
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	01db      	lsls	r3, r3, #7
    1f66:	18d3      	adds	r3, r2, r3
    1f68:	e000      	b.n	1f6c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1f6a:	2300      	movs	r3, #0
	}
}
    1f6c:	0018      	movs	r0, r3
    1f6e:	46bd      	mov	sp, r7
    1f70:	b004      	add	sp, #16
    1f72:	bd80      	pop	{r7, pc}
    1f74:	41004400 	.word	0x41004400

00001f78 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1f78:	b580      	push	{r7, lr}
    1f7a:	b082      	sub	sp, #8
    1f7c:	af00      	add	r7, sp, #0
    1f7e:	0002      	movs	r2, r0
    1f80:	1dfb      	adds	r3, r7, #7
    1f82:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1f84:	4b06      	ldr	r3, [pc, #24]	; (1fa0 <system_interrupt_enable+0x28>)
    1f86:	1dfa      	adds	r2, r7, #7
    1f88:	7812      	ldrb	r2, [r2, #0]
    1f8a:	0011      	movs	r1, r2
    1f8c:	221f      	movs	r2, #31
    1f8e:	400a      	ands	r2, r1
    1f90:	2101      	movs	r1, #1
    1f92:	4091      	lsls	r1, r2
    1f94:	000a      	movs	r2, r1
    1f96:	601a      	str	r2, [r3, #0]
}
    1f98:	46c0      	nop			; (mov r8, r8)
    1f9a:	46bd      	mov	sp, r7
    1f9c:	b002      	add	sp, #8
    1f9e:	bd80      	pop	{r7, pc}
    1fa0:	e000e100 	.word	0xe000e100

00001fa4 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    1fa4:	b580      	push	{r7, lr}
    1fa6:	b084      	sub	sp, #16
    1fa8:	af00      	add	r7, sp, #0
    1faa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    1fac:	687b      	ldr	r3, [r7, #4]
    1fae:	681b      	ldr	r3, [r3, #0]
    1fb0:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1fb2:	68fb      	ldr	r3, [r7, #12]
    1fb4:	7e5b      	ldrb	r3, [r3, #25]
    1fb6:	b2db      	uxtb	r3, r3
    1fb8:	b25b      	sxtb	r3, r3
    1fba:	2b00      	cmp	r3, #0
    1fbc:	da01      	bge.n	1fc2 <adc_is_syncing+0x1e>
		return true;
    1fbe:	2301      	movs	r3, #1
    1fc0:	e000      	b.n	1fc4 <adc_is_syncing+0x20>
	}

	return false;
    1fc2:	2300      	movs	r3, #0
}
    1fc4:	0018      	movs	r0, r3
    1fc6:	46bd      	mov	sp, r7
    1fc8:	b004      	add	sp, #16
    1fca:	bd80      	pop	{r7, pc}

00001fcc <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b086      	sub	sp, #24
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    1fda:	693b      	ldr	r3, [r7, #16]
    1fdc:	7e1b      	ldrb	r3, [r3, #24]
    1fde:	b2db      	uxtb	r3, r3
    1fe0:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    1fe2:	2300      	movs	r3, #0
    1fe4:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	2201      	movs	r2, #1
    1fea:	4013      	ands	r3, r2
    1fec:	d003      	beq.n	1ff6 <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    1fee:	697b      	ldr	r3, [r7, #20]
    1ff0:	2201      	movs	r2, #1
    1ff2:	4313      	orrs	r3, r2
    1ff4:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    1ff6:	68fb      	ldr	r3, [r7, #12]
    1ff8:	2204      	movs	r2, #4
    1ffa:	4013      	ands	r3, r2
    1ffc:	d003      	beq.n	2006 <STACK_SIZE+0x6>
		status_flags |= ADC_STATUS_WINDOW;
    1ffe:	697b      	ldr	r3, [r7, #20]
    2000:	2202      	movs	r2, #2
    2002:	4313      	orrs	r3, r2
    2004:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2006:	68fb      	ldr	r3, [r7, #12]
    2008:	2202      	movs	r2, #2
    200a:	4013      	ands	r3, r2
    200c:	d003      	beq.n	2016 <STACK_SIZE+0x16>
		status_flags |= ADC_STATUS_OVERRUN;
    200e:	697b      	ldr	r3, [r7, #20]
    2010:	2204      	movs	r2, #4
    2012:	4313      	orrs	r3, r2
    2014:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    2016:	697b      	ldr	r3, [r7, #20]
}
    2018:	0018      	movs	r0, r3
    201a:	46bd      	mov	sp, r7
    201c:	b006      	add	sp, #24
    201e:	bd80      	pop	{r7, pc}

00002020 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    2020:	b580      	push	{r7, lr}
    2022:	b084      	sub	sp, #16
    2024:	af00      	add	r7, sp, #0
    2026:	6078      	str	r0, [r7, #4]
    2028:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    202a:	687b      	ldr	r3, [r7, #4]
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    2030:	2300      	movs	r3, #0
    2032:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    2034:	683b      	ldr	r3, [r7, #0]
    2036:	2201      	movs	r2, #1
    2038:	4013      	ands	r3, r2
    203a:	d003      	beq.n	2044 <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    203c:	68fb      	ldr	r3, [r7, #12]
    203e:	2201      	movs	r2, #1
    2040:	4313      	orrs	r3, r2
    2042:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    2044:	683b      	ldr	r3, [r7, #0]
    2046:	2202      	movs	r2, #2
    2048:	4013      	ands	r3, r2
    204a:	d003      	beq.n	2054 <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    204c:	68fb      	ldr	r3, [r7, #12]
    204e:	2204      	movs	r2, #4
    2050:	4313      	orrs	r3, r2
    2052:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    2054:	683b      	ldr	r3, [r7, #0]
    2056:	2204      	movs	r2, #4
    2058:	4013      	ands	r3, r2
    205a:	d003      	beq.n	2064 <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    205c:	68fb      	ldr	r3, [r7, #12]
    205e:	2202      	movs	r2, #2
    2060:	4313      	orrs	r3, r2
    2062:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2064:	68fb      	ldr	r3, [r7, #12]
    2066:	b2da      	uxtb	r2, r3
    2068:	68bb      	ldr	r3, [r7, #8]
    206a:	761a      	strb	r2, [r3, #24]
}
    206c:	46c0      	nop			; (mov r8, r8)
    206e:	46bd      	mov	sp, r7
    2070:	b004      	add	sp, #16
    2072:	bd80      	pop	{r7, pc}

00002074 <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    2074:	b580      	push	{r7, lr}
    2076:	b084      	sub	sp, #16
    2078:	af00      	add	r7, sp, #0
    207a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    207c:	687b      	ldr	r3, [r7, #4]
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	687b      	ldr	r3, [r7, #4]
    2086:	0018      	movs	r0, r3
    2088:	4b10      	ldr	r3, [pc, #64]	; (20cc <adc_enable+0x58>)
    208a:	4798      	blx	r3
    208c:	1e03      	subs	r3, r0, #0
    208e:	d1f9      	bne.n	2084 <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    2090:	2017      	movs	r0, #23
    2092:	4b0f      	ldr	r3, [pc, #60]	; (20d0 <adc_enable+0x5c>)
    2094:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2096:	68fb      	ldr	r3, [r7, #12]
    2098:	220f      	movs	r2, #15
    209a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    209c:	68fb      	ldr	r3, [r7, #12]
    209e:	220f      	movs	r2, #15
    20a0:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    20a2:	68fb      	ldr	r3, [r7, #12]
    20a4:	781b      	ldrb	r3, [r3, #0]
    20a6:	b2db      	uxtb	r3, r3
    20a8:	2202      	movs	r2, #2
    20aa:	4313      	orrs	r3, r2
    20ac:	b2da      	uxtb	r2, r3
    20ae:	68fb      	ldr	r3, [r7, #12]
    20b0:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	0018      	movs	r0, r3
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <adc_enable+0x58>)
    20ba:	4798      	blx	r3
    20bc:	1e03      	subs	r3, r0, #0
    20be:	d1f9      	bne.n	20b4 <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    20c0:	2300      	movs	r3, #0
}
    20c2:	0018      	movs	r0, r3
    20c4:	46bd      	mov	sp, r7
    20c6:	b004      	add	sp, #16
    20c8:	bd80      	pop	{r7, pc}
    20ca:	46c0      	nop			; (mov r8, r8)
    20cc:	00001fa5 	.word	0x00001fa5
    20d0:	00001f79 	.word	0x00001f79

000020d4 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    20d4:	b580      	push	{r7, lr}
    20d6:	b084      	sub	sp, #16
    20d8:	af00      	add	r7, sp, #0
    20da:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    20dc:	687b      	ldr	r3, [r7, #4]
    20de:	681b      	ldr	r3, [r3, #0]
    20e0:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	687b      	ldr	r3, [r7, #4]
    20e6:	0018      	movs	r0, r3
    20e8:	4b0b      	ldr	r3, [pc, #44]	; (2118 <adc_start_conversion+0x44>)
    20ea:	4798      	blx	r3
    20ec:	1e03      	subs	r3, r0, #0
    20ee:	d1f9      	bne.n	20e4 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    20f0:	68fb      	ldr	r3, [r7, #12]
    20f2:	7b1b      	ldrb	r3, [r3, #12]
    20f4:	b2db      	uxtb	r3, r3
    20f6:	2202      	movs	r2, #2
    20f8:	4313      	orrs	r3, r2
    20fa:	b2da      	uxtb	r2, r3
    20fc:	68fb      	ldr	r3, [r7, #12]
    20fe:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    2100:	46c0      	nop			; (mov r8, r8)
    2102:	687b      	ldr	r3, [r7, #4]
    2104:	0018      	movs	r0, r3
    2106:	4b04      	ldr	r3, [pc, #16]	; (2118 <adc_start_conversion+0x44>)
    2108:	4798      	blx	r3
    210a:	1e03      	subs	r3, r0, #0
    210c:	d1f9      	bne.n	2102 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	46bd      	mov	sp, r7
    2112:	b004      	add	sp, #16
    2114:	bd80      	pop	{r7, pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	00001fa5 	.word	0x00001fa5

0000211c <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    211c:	b580      	push	{r7, lr}
    211e:	b084      	sub	sp, #16
    2120:	af00      	add	r7, sp, #0
    2122:	6078      	str	r0, [r7, #4]
    2124:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2126:	687b      	ldr	r3, [r7, #4]
    2128:	0018      	movs	r0, r3
    212a:	4b18      	ldr	r3, [pc, #96]	; (218c <adc_read+0x70>)
    212c:	4798      	blx	r3
    212e:	0002      	movs	r2, r0
    2130:	2301      	movs	r3, #1
    2132:	4013      	ands	r3, r2
    2134:	d101      	bne.n	213a <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    2136:	2305      	movs	r3, #5
    2138:	e023      	b.n	2182 <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    213a:	687b      	ldr	r3, [r7, #4]
    213c:	681b      	ldr	r3, [r3, #0]
    213e:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    2140:	46c0      	nop			; (mov r8, r8)
    2142:	687b      	ldr	r3, [r7, #4]
    2144:	0018      	movs	r0, r3
    2146:	4b12      	ldr	r3, [pc, #72]	; (2190 <adc_read+0x74>)
    2148:	4798      	blx	r3
    214a:	1e03      	subs	r3, r0, #0
    214c:	d1f9      	bne.n	2142 <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    214e:	68fb      	ldr	r3, [r7, #12]
    2150:	8b5b      	ldrh	r3, [r3, #26]
    2152:	b29a      	uxth	r2, r3
    2154:	683b      	ldr	r3, [r7, #0]
    2156:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	2101      	movs	r1, #1
    215c:	0018      	movs	r0, r3
    215e:	4b0d      	ldr	r3, [pc, #52]	; (2194 <adc_read+0x78>)
    2160:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2162:	687b      	ldr	r3, [r7, #4]
    2164:	0018      	movs	r0, r3
    2166:	4b09      	ldr	r3, [pc, #36]	; (218c <adc_read+0x70>)
    2168:	4798      	blx	r3
    216a:	0002      	movs	r2, r0
    216c:	2304      	movs	r3, #4
    216e:	4013      	ands	r3, r2
    2170:	d006      	beq.n	2180 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    2172:	687b      	ldr	r3, [r7, #4]
    2174:	2104      	movs	r1, #4
    2176:	0018      	movs	r0, r3
    2178:	4b06      	ldr	r3, [pc, #24]	; (2194 <adc_read+0x78>)
    217a:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    217c:	231e      	movs	r3, #30
    217e:	e000      	b.n	2182 <adc_read+0x66>
	}

	return STATUS_OK;
    2180:	2300      	movs	r3, #0
}
    2182:	0018      	movs	r0, r3
    2184:	46bd      	mov	sp, r7
    2186:	b004      	add	sp, #16
    2188:	bd80      	pop	{r7, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00001fcd 	.word	0x00001fcd
    2190:	00001fa5 	.word	0x00001fa5
    2194:	00002021 	.word	0x00002021

00002198 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2198:	b580      	push	{r7, lr}
    219a:	b082      	sub	sp, #8
    219c:	af00      	add	r7, sp, #0
    219e:	0002      	movs	r2, r0
    21a0:	1dfb      	adds	r3, r7, #7
    21a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    21a4:	1dfb      	adds	r3, r7, #7
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	0018      	movs	r0, r3
    21aa:	4b03      	ldr	r3, [pc, #12]	; (21b8 <port_get_group_from_gpio_pin+0x20>)
    21ac:	4798      	blx	r3
    21ae:	0003      	movs	r3, r0
}
    21b0:	0018      	movs	r0, r3
    21b2:	46bd      	mov	sp, r7
    21b4:	b002      	add	sp, #8
    21b6:	bd80      	pop	{r7, pc}
    21b8:	00001f19 	.word	0x00001f19

000021bc <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    21bc:	b580      	push	{r7, lr}
    21be:	b084      	sub	sp, #16
    21c0:	af00      	add	r7, sp, #0
    21c2:	0002      	movs	r2, r0
    21c4:	1dfb      	adds	r3, r7, #7
    21c6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    21c8:	1dfb      	adds	r3, r7, #7
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	0018      	movs	r0, r3
    21ce:	4b0b      	ldr	r3, [pc, #44]	; (21fc <port_pin_get_output_level+0x40>)
    21d0:	4798      	blx	r3
    21d2:	0003      	movs	r3, r0
    21d4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21d6:	1dfb      	adds	r3, r7, #7
    21d8:	781b      	ldrb	r3, [r3, #0]
    21da:	221f      	movs	r2, #31
    21dc:	4013      	ands	r3, r2
    21de:	2201      	movs	r2, #1
    21e0:	409a      	lsls	r2, r3
    21e2:	0013      	movs	r3, r2
    21e4:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	691b      	ldr	r3, [r3, #16]
    21ea:	68ba      	ldr	r2, [r7, #8]
    21ec:	4013      	ands	r3, r2
    21ee:	1e5a      	subs	r2, r3, #1
    21f0:	4193      	sbcs	r3, r2
    21f2:	b2db      	uxtb	r3, r3
}
    21f4:	0018      	movs	r0, r3
    21f6:	46bd      	mov	sp, r7
    21f8:	b004      	add	sp, #16
    21fa:	bd80      	pop	{r7, pc}
    21fc:	00002199 	.word	0x00002199

00002200 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2200:	b580      	push	{r7, lr}
    2202:	b084      	sub	sp, #16
    2204:	af00      	add	r7, sp, #0
    2206:	0002      	movs	r2, r0
    2208:	1dfb      	adds	r3, r7, #7
    220a:	701a      	strb	r2, [r3, #0]
    220c:	1dbb      	adds	r3, r7, #6
    220e:	1c0a      	adds	r2, r1, #0
    2210:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2212:	1dfb      	adds	r3, r7, #7
    2214:	781b      	ldrb	r3, [r3, #0]
    2216:	0018      	movs	r0, r3
    2218:	4b0d      	ldr	r3, [pc, #52]	; (2250 <port_pin_set_output_level+0x50>)
    221a:	4798      	blx	r3
    221c:	0003      	movs	r3, r0
    221e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2220:	1dfb      	adds	r3, r7, #7
    2222:	781b      	ldrb	r3, [r3, #0]
    2224:	221f      	movs	r2, #31
    2226:	4013      	ands	r3, r2
    2228:	2201      	movs	r2, #1
    222a:	409a      	lsls	r2, r3
    222c:	0013      	movs	r3, r2
    222e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2230:	1dbb      	adds	r3, r7, #6
    2232:	781b      	ldrb	r3, [r3, #0]
    2234:	2b00      	cmp	r3, #0
    2236:	d003      	beq.n	2240 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2238:	68fb      	ldr	r3, [r7, #12]
    223a:	68ba      	ldr	r2, [r7, #8]
    223c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    223e:	e002      	b.n	2246 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2240:	68fb      	ldr	r3, [r7, #12]
    2242:	68ba      	ldr	r2, [r7, #8]
    2244:	615a      	str	r2, [r3, #20]
	}
}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	46bd      	mov	sp, r7
    224a:	b004      	add	sp, #16
    224c:	bd80      	pop	{r7, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	00002199 	.word	0x00002199

00002254 <fahrenheit_to_celsius>:
 * @brief Converts a fahrenheit temperature to celsius
 * @param deg_f Degrees in fahrenheit
 * @return Temperature converted to celsius
 */
static inline uint8_t fahrenheit_to_celsius(uint8_t deg_f)
{
    2254:	b580      	push	{r7, lr}
    2256:	b084      	sub	sp, #16
    2258:	af00      	add	r7, sp, #0
    225a:	0002      	movs	r2, r0
    225c:	1dfb      	adds	r3, r7, #7
    225e:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_f;
    2260:	230e      	movs	r3, #14
    2262:	18fb      	adds	r3, r7, r3
    2264:	1dfa      	adds	r2, r7, #7
    2266:	7812      	ldrb	r2, [r2, #0]
    2268:	801a      	strh	r2, [r3, #0]
    convert = (convert - 32) * 5 / 9;
    226a:	230e      	movs	r3, #14
    226c:	18fb      	adds	r3, r7, r3
    226e:	881b      	ldrh	r3, [r3, #0]
    2270:	3b20      	subs	r3, #32
    2272:	001a      	movs	r2, r3
    2274:	0013      	movs	r3, r2
    2276:	009b      	lsls	r3, r3, #2
    2278:	189a      	adds	r2, r3, r2
    227a:	4b08      	ldr	r3, [pc, #32]	; (229c <fahrenheit_to_celsius+0x48>)
    227c:	2109      	movs	r1, #9
    227e:	0010      	movs	r0, r2
    2280:	4798      	blx	r3
    2282:	0003      	movs	r3, r0
    2284:	001a      	movs	r2, r3
    2286:	230e      	movs	r3, #14
    2288:	18fb      	adds	r3, r7, r3
    228a:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    228c:	230e      	movs	r3, #14
    228e:	18fb      	adds	r3, r7, r3
    2290:	881b      	ldrh	r3, [r3, #0]
    2292:	b2db      	uxtb	r3, r3
}
    2294:	0018      	movs	r0, r3
    2296:	46bd      	mov	sp, r7
    2298:	b004      	add	sp, #16
    229a:	bd80      	pop	{r7, pc}
    229c:	000108b1 	.word	0x000108b1

000022a0 <celsius_to_fahrenheit>:
 * @brief Converts a celsis temperature to fahrenheit
 * @param deg_c Degrees in celcius
 * @return Temperature converted to fahrenheit
 */
static inline uint8_t celsius_to_fahrenheit(uint8_t deg_c)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b084      	sub	sp, #16
    22a4:	af00      	add	r7, sp, #0
    22a6:	0002      	movs	r2, r0
    22a8:	1dfb      	adds	r3, r7, #7
    22aa:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_c;
    22ac:	230e      	movs	r3, #14
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	1dfa      	adds	r2, r7, #7
    22b2:	7812      	ldrb	r2, [r2, #0]
    22b4:	801a      	strh	r2, [r3, #0]
    convert = (convert * 9 / 5) + 32;
    22b6:	230e      	movs	r3, #14
    22b8:	18fb      	adds	r3, r7, r3
    22ba:	881a      	ldrh	r2, [r3, #0]
    22bc:	0013      	movs	r3, r2
    22be:	00db      	lsls	r3, r3, #3
    22c0:	189a      	adds	r2, r3, r2
    22c2:	4b09      	ldr	r3, [pc, #36]	; (22e8 <celsius_to_fahrenheit+0x48>)
    22c4:	2105      	movs	r1, #5
    22c6:	0010      	movs	r0, r2
    22c8:	4798      	blx	r3
    22ca:	0003      	movs	r3, r0
    22cc:	b29a      	uxth	r2, r3
    22ce:	230e      	movs	r3, #14
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	3220      	adds	r2, #32
    22d4:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    22d6:	230e      	movs	r3, #14
    22d8:	18fb      	adds	r3, r7, r3
    22da:	881b      	ldrh	r3, [r3, #0]
    22dc:	b2db      	uxtb	r3, r3
}
    22de:	0018      	movs	r0, r3
    22e0:	46bd      	mov	sp, r7
    22e2:	b004      	add	sp, #16
    22e4:	bd80      	pop	{r7, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	000108b1 	.word	0x000108b1

000022ec <task_Thermal>:
    uint8_t water_temp;

} thermal_state;

static void task_Thermal(void *args)
{
    22ec:	b590      	push	{r4, r7, lr}
    22ee:	b083      	sub	sp, #12
    22f0:	af00      	add	r7, sp, #0
    22f2:	6078      	str	r0, [r7, #4]
    while(1) {
        xSemaphoreTake(therm_sem, portMAX_DELAY);
    22f4:	4b3e      	ldr	r3, [pc, #248]	; (23f0 <task_Thermal+0x104>)
    22f6:	6818      	ldr	r0, [r3, #0]
    22f8:	2301      	movs	r3, #1
    22fa:	425a      	negs	r2, r3
    22fc:	2300      	movs	r3, #0
    22fe:	2100      	movs	r1, #0
    2300:	4c3c      	ldr	r4, [pc, #240]	; (23f4 <task_Thermal+0x108>)
    2302:	47a0      	blx	r4

        if (port_pin_get_output_level(HEATER_1_GPIO) != thermal_state.heater_1_state) {
    2304:	2006      	movs	r0, #6
    2306:	4b3c      	ldr	r3, [pc, #240]	; (23f8 <task_Thermal+0x10c>)
    2308:	4798      	blx	r3
    230a:	0003      	movs	r3, r0
    230c:	001a      	movs	r2, r3
    230e:	4b3b      	ldr	r3, [pc, #236]	; (23fc <task_Thermal+0x110>)
    2310:	781b      	ldrb	r3, [r3, #0]
    2312:	429a      	cmp	r2, r3
    2314:	d013      	beq.n	233e <task_Thermal+0x52>
            if (port_pin_get_output_level(HEATER_1_GPIO)) {
    2316:	2006      	movs	r0, #6
    2318:	4b37      	ldr	r3, [pc, #220]	; (23f8 <task_Thermal+0x10c>)
    231a:	4798      	blx	r3
    231c:	1e03      	subs	r3, r0, #0
    231e:	d007      	beq.n	2330 <task_Thermal+0x44>
                port_pin_set_output_level(HEATER_1_GPIO, 0);
    2320:	2100      	movs	r1, #0
    2322:	2006      	movs	r0, #6
    2324:	4b36      	ldr	r3, [pc, #216]	; (2400 <task_Thermal+0x114>)
    2326:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    2328:	2000      	movs	r0, #0
    232a:	4b36      	ldr	r3, [pc, #216]	; (2404 <task_Thermal+0x118>)
    232c:	4798      	blx	r3
    232e:	e006      	b.n	233e <task_Thermal+0x52>
            }
            else {
                port_pin_set_output_level(HEATER_1_GPIO, 1);
    2330:	2101      	movs	r1, #1
    2332:	2006      	movs	r0, #6
    2334:	4b32      	ldr	r3, [pc, #200]	; (2400 <task_Thermal+0x114>)
    2336:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    2338:	2001      	movs	r0, #1
    233a:	4b32      	ldr	r3, [pc, #200]	; (2404 <task_Thermal+0x118>)
    233c:	4798      	blx	r3
            }
        }

        if (port_pin_get_output_level(HEATER_2_GPIO) != thermal_state.heater_2_state) {
    233e:	2019      	movs	r0, #25
    2340:	4b2d      	ldr	r3, [pc, #180]	; (23f8 <task_Thermal+0x10c>)
    2342:	4798      	blx	r3
    2344:	0003      	movs	r3, r0
    2346:	001a      	movs	r2, r3
    2348:	4b2c      	ldr	r3, [pc, #176]	; (23fc <task_Thermal+0x110>)
    234a:	785b      	ldrb	r3, [r3, #1]
    234c:	429a      	cmp	r2, r3
    234e:	d013      	beq.n	2378 <task_Thermal+0x8c>
            if (port_pin_get_output_level(HEATER_2_GPIO)) {
    2350:	2019      	movs	r0, #25
    2352:	4b29      	ldr	r3, [pc, #164]	; (23f8 <task_Thermal+0x10c>)
    2354:	4798      	blx	r3
    2356:	1e03      	subs	r3, r0, #0
    2358:	d007      	beq.n	236a <task_Thermal+0x7e>
                port_pin_set_output_level(HEATER_2_GPIO, 0);
    235a:	2100      	movs	r1, #0
    235c:	2019      	movs	r0, #25
    235e:	4b28      	ldr	r3, [pc, #160]	; (2400 <task_Thermal+0x114>)
    2360:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    2362:	2000      	movs	r0, #0
    2364:	4b27      	ldr	r3, [pc, #156]	; (2404 <task_Thermal+0x118>)
    2366:	4798      	blx	r3
    2368:	e006      	b.n	2378 <task_Thermal+0x8c>
            }
            else {
                port_pin_set_output_level(HEATER_2_GPIO, 1);
    236a:	2101      	movs	r1, #1
    236c:	2019      	movs	r0, #25
    236e:	4b24      	ldr	r3, [pc, #144]	; (2400 <task_Thermal+0x114>)
    2370:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    2372:	2001      	movs	r0, #1
    2374:	4b23      	ldr	r3, [pc, #140]	; (2404 <task_Thermal+0x118>)
    2376:	4798      	blx	r3
            }
        }
         
        if (port_pin_get_output_level(AIR_PUMP_GPIO) != thermal_state.air_pump_state) {
    2378:	2018      	movs	r0, #24
    237a:	4b1f      	ldr	r3, [pc, #124]	; (23f8 <task_Thermal+0x10c>)
    237c:	4798      	blx	r3
    237e:	0003      	movs	r3, r0
    2380:	001a      	movs	r2, r3
    2382:	4b1e      	ldr	r3, [pc, #120]	; (23fc <task_Thermal+0x110>)
    2384:	789b      	ldrb	r3, [r3, #2]
    2386:	429a      	cmp	r2, r3
    2388:	d013      	beq.n	23b2 <task_Thermal+0xc6>
            if (port_pin_get_output_level(AIR_PUMP_GPIO)) {
    238a:	2018      	movs	r0, #24
    238c:	4b1a      	ldr	r3, [pc, #104]	; (23f8 <task_Thermal+0x10c>)
    238e:	4798      	blx	r3
    2390:	1e03      	subs	r3, r0, #0
    2392:	d007      	beq.n	23a4 <task_Thermal+0xb8>
                port_pin_set_output_level(AIR_PUMP_GPIO, 0);
    2394:	2100      	movs	r1, #0
    2396:	2018      	movs	r0, #24
    2398:	4b19      	ldr	r3, [pc, #100]	; (2400 <task_Thermal+0x114>)
    239a:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    239c:	2000      	movs	r0, #0
    239e:	4b19      	ldr	r3, [pc, #100]	; (2404 <task_Thermal+0x118>)
    23a0:	4798      	blx	r3
    23a2:	e006      	b.n	23b2 <task_Thermal+0xc6>
            }
            else {
                port_pin_set_output_level(AIR_PUMP_GPIO, 1);
    23a4:	2101      	movs	r1, #1
    23a6:	2018      	movs	r0, #24
    23a8:	4b15      	ldr	r3, [pc, #84]	; (2400 <task_Thermal+0x114>)
    23aa:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    23ac:	2001      	movs	r0, #1
    23ae:	4b15      	ldr	r3, [pc, #84]	; (2404 <task_Thermal+0x118>)
    23b0:	4798      	blx	r3
            }
        }

        if (port_pin_get_output_level(WATER_PUMP_GPIO) != thermal_state.water_pump_state) {
    23b2:	2012      	movs	r0, #18
    23b4:	4b10      	ldr	r3, [pc, #64]	; (23f8 <task_Thermal+0x10c>)
    23b6:	4798      	blx	r3
    23b8:	0003      	movs	r3, r0
    23ba:	001a      	movs	r2, r3
    23bc:	4b0f      	ldr	r3, [pc, #60]	; (23fc <task_Thermal+0x110>)
    23be:	78db      	ldrb	r3, [r3, #3]
    23c0:	429a      	cmp	r2, r3
    23c2:	d097      	beq.n	22f4 <task_Thermal+0x8>
            if (port_pin_get_output_level(WATER_PUMP_GPIO)) {
    23c4:	2012      	movs	r0, #18
    23c6:	4b0c      	ldr	r3, [pc, #48]	; (23f8 <task_Thermal+0x10c>)
    23c8:	4798      	blx	r3
    23ca:	1e03      	subs	r3, r0, #0
    23cc:	d007      	beq.n	23de <task_Thermal+0xf2>
                port_pin_set_output_level(WATER_PUMP_GPIO, 0);
    23ce:	2100      	movs	r1, #0
    23d0:	2012      	movs	r0, #18
    23d2:	4b0b      	ldr	r3, [pc, #44]	; (2400 <task_Thermal+0x114>)
    23d4:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_OFF_DELAY));
    23d6:	2000      	movs	r0, #0
    23d8:	4b0a      	ldr	r3, [pc, #40]	; (2404 <task_Thermal+0x118>)
    23da:	4798      	blx	r3
    23dc:	e78a      	b.n	22f4 <task_Thermal+0x8>
            }
            else {
                port_pin_set_output_level(WATER_PUMP_GPIO, 1);
    23de:	2101      	movs	r1, #1
    23e0:	2012      	movs	r0, #18
    23e2:	4b07      	ldr	r3, [pc, #28]	; (2400 <task_Thermal+0x114>)
    23e4:	4798      	blx	r3
                vTaskDelay(pdMS_TO_TICKS(RELAY_ON_DELAY));
    23e6:	2001      	movs	r0, #1
    23e8:	4b06      	ldr	r3, [pc, #24]	; (2404 <task_Thermal+0x118>)
    23ea:	4798      	blx	r3
            }
        }             
    }
    23ec:	e782      	b.n	22f4 <task_Thermal+0x8>
    23ee:	46c0      	nop			; (mov r8, r8)
    23f0:	200000c8 	.word	0x200000c8
    23f4:	0000d921 	.word	0x0000d921
    23f8:	000021bd 	.word	0x000021bd
    23fc:	2000461c 	.word	0x2000461c
    2400:	00002201 	.word	0x00002201
    2404:	0000e279 	.word	0x0000e279

00002408 <thermal_look_up_water_temp>:
}

static uint8_t thermal_look_up_water_temp(uint16_t digital_value)
{
    2408:	b580      	push	{r7, lr}
    240a:	b084      	sub	sp, #16
    240c:	af00      	add	r7, sp, #0
    240e:	0002      	movs	r2, r0
    2410:	1dbb      	adds	r3, r7, #6
    2412:	801a      	strh	r2, [r3, #0]
    uint32_t i = 0;    
    2414:	2300      	movs	r3, #0
    2416:	60fb      	str	r3, [r7, #12]

    while (i < (sizeof(water_temp_LUT) / sizeof(lut_t))) {
    2418:	e011      	b.n	243e <thermal_look_up_water_temp+0x36>
        if (digital_value <= water_temp_LUT[i].digital_value) {
    241a:	4a0d      	ldr	r2, [pc, #52]	; (2450 <thermal_look_up_water_temp+0x48>)
    241c:	68fb      	ldr	r3, [r7, #12]
    241e:	009b      	lsls	r3, r3, #2
    2420:	18d3      	adds	r3, r2, r3
    2422:	3302      	adds	r3, #2
    2424:	881b      	ldrh	r3, [r3, #0]
    2426:	1dba      	adds	r2, r7, #6
    2428:	8812      	ldrh	r2, [r2, #0]
    242a:	429a      	cmp	r2, r3
    242c:	d804      	bhi.n	2438 <thermal_look_up_water_temp+0x30>
            return water_temp_LUT[i].temperature;        
    242e:	4b08      	ldr	r3, [pc, #32]	; (2450 <thermal_look_up_water_temp+0x48>)
    2430:	68fa      	ldr	r2, [r7, #12]
    2432:	0092      	lsls	r2, r2, #2
    2434:	5cd3      	ldrb	r3, [r2, r3]
    2436:	e006      	b.n	2446 <thermal_look_up_water_temp+0x3e>
        }
        i++;
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	3301      	adds	r3, #1
    243c:	60fb      	str	r3, [r7, #12]

static uint8_t thermal_look_up_water_temp(uint16_t digital_value)
{
    uint32_t i = 0;    

    while (i < (sizeof(water_temp_LUT) / sizeof(lut_t))) {
    243e:	68fb      	ldr	r3, [r7, #12]
    2440:	2b68      	cmp	r3, #104	; 0x68
    2442:	d9ea      	bls.n	241a <thermal_look_up_water_temp+0x12>
        }
        i++;
    }

    // If no valid value is found, return an invalid result
    return WATER_TEMP_INVALID;
    2444:	23ff      	movs	r3, #255	; 0xff
}
    2446:	0018      	movs	r0, r3
    2448:	46bd      	mov	sp, r7
    244a:	b004      	add	sp, #16
    244c:	bd80      	pop	{r7, pc}
    244e:	46c0      	nop			; (mov r8, r8)
    2450:	00012a9c 	.word	0x00012a9c

00002454 <thermal_init>:

void thermal_init(void)
{
    2454:	b590      	push	{r4, r7, lr}
    2456:	b091      	sub	sp, #68	; 0x44
    2458:	af02      	add	r7, sp, #8
    memset(&thermal_state, 0, sizeof(thermal_state));
    245a:	4b42      	ldr	r3, [pc, #264]	; (2564 <thermal_init+0x110>)
    245c:	2208      	movs	r2, #8
    245e:	2100      	movs	r1, #0
    2460:	0018      	movs	r0, r3
    2462:	4b41      	ldr	r3, [pc, #260]	; (2568 <thermal_init+0x114>)
    2464:	4798      	blx	r3
    thermal_state.degrees_F = true;
    2466:	4b3f      	ldr	r3, [pc, #252]	; (2564 <thermal_init+0x110>)
    2468:	2201      	movs	r2, #1
    246a:	715a      	strb	r2, [r3, #5]
    thermal_state.temp_set_point = 80;  //F
    246c:	4b3d      	ldr	r3, [pc, #244]	; (2564 <thermal_init+0x110>)
    246e:	2250      	movs	r2, #80	; 0x50
    2470:	719a      	strb	r2, [r3, #6]
    thermal_state.water_temp = WATER_TEMP_INVALID;
    2472:	4b3c      	ldr	r3, [pc, #240]	; (2564 <thermal_init+0x110>)
    2474:	22ff      	movs	r2, #255	; 0xff
    2476:	71da      	strb	r2, [r3, #7]

    struct port_config gpio_config;
    gpio_config.direction = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    2478:	2334      	movs	r3, #52	; 0x34
    247a:	18fb      	adds	r3, r7, r3
    247c:	2202      	movs	r2, #2
    247e:	701a      	strb	r2, [r3, #0]
    gpio_config.input_pull = PORT_PIN_PULL_DOWN;
    2480:	2334      	movs	r3, #52	; 0x34
    2482:	18fb      	adds	r3, r7, r3
    2484:	2202      	movs	r2, #2
    2486:	705a      	strb	r2, [r3, #1]
    gpio_config.powersave = false;
    2488:	2334      	movs	r3, #52	; 0x34
    248a:	18fb      	adds	r3, r7, r3
    248c:	2200      	movs	r2, #0
    248e:	709a      	strb	r2, [r3, #2]

    // Initialize relay drivers
    port_pin_set_config(HEATER_1_GPIO, &gpio_config);
    2490:	2334      	movs	r3, #52	; 0x34
    2492:	18fb      	adds	r3, r7, r3
    2494:	0019      	movs	r1, r3
    2496:	2006      	movs	r0, #6
    2498:	4b34      	ldr	r3, [pc, #208]	; (256c <thermal_init+0x118>)
    249a:	4798      	blx	r3
    port_pin_set_config(HEATER_2_GPIO, &gpio_config);
    249c:	2334      	movs	r3, #52	; 0x34
    249e:	18fb      	adds	r3, r7, r3
    24a0:	0019      	movs	r1, r3
    24a2:	2019      	movs	r0, #25
    24a4:	4b31      	ldr	r3, [pc, #196]	; (256c <thermal_init+0x118>)
    24a6:	4798      	blx	r3
    port_pin_set_config(AIR_PUMP_GPIO, &gpio_config);
    24a8:	2334      	movs	r3, #52	; 0x34
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	0019      	movs	r1, r3
    24ae:	2018      	movs	r0, #24
    24b0:	4b2e      	ldr	r3, [pc, #184]	; (256c <thermal_init+0x118>)
    24b2:	4798      	blx	r3
    port_pin_set_config(WATER_PUMP_GPIO, &gpio_config);
    24b4:	2334      	movs	r3, #52	; 0x34
    24b6:	18fb      	adds	r3, r7, r3
    24b8:	0019      	movs	r1, r3
    24ba:	2012      	movs	r0, #18
    24bc:	4b2b      	ldr	r3, [pc, #172]	; (256c <thermal_init+0x118>)
    24be:	4798      	blx	r3
    
    // Initialize ADC
    struct adc_config config_adc;
    adc_get_config_defaults(&config_adc);
    24c0:	1d3b      	adds	r3, r7, #4
    24c2:	0018      	movs	r0, r3
    24c4:	4b2a      	ldr	r3, [pc, #168]	; (2570 <thermal_init+0x11c>)
    24c6:	4798      	blx	r3
    
    config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV512;
    24c8:	1d3b      	adds	r3, r7, #4
    24ca:	22e0      	movs	r2, #224	; 0xe0
    24cc:	00d2      	lsls	r2, r2, #3
    24ce:	805a      	strh	r2, [r3, #2]
    config_adc.reference = ADC_REFERENCE_INTVCC1;   
    24d0:	1d3b      	adds	r3, r7, #4
    24d2:	2202      	movs	r2, #2
    24d4:	705a      	strb	r2, [r3, #1]
    config_adc.resolution = ADC_RESOLUTION_12BIT;
    24d6:	1d3b      	adds	r3, r7, #4
    24d8:	2200      	movs	r2, #0
    24da:	711a      	strb	r2, [r3, #4]
    config_adc.clock_source = GCLK_GENERATOR_0;
    24dc:	1d3b      	adds	r3, r7, #4
    24de:	2200      	movs	r2, #0
    24e0:	701a      	strb	r2, [r3, #0]
    config_adc.positive_input = WATER_TEMP_AN_CH;
    24e2:	1d3b      	adds	r3, r7, #4
    24e4:	2212      	movs	r2, #18
    24e6:	731a      	strb	r2, [r3, #12]
    config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    24e8:	1d3b      	adds	r3, r7, #4
    24ea:	22f0      	movs	r2, #240	; 0xf0
    24ec:	0512      	lsls	r2, r2, #20
    24ee:	609a      	str	r2, [r3, #8]
    
    adc_init(&adc_instance, ADC, &config_adc);
    24f0:	1d3a      	adds	r2, r7, #4
    24f2:	4920      	ldr	r1, [pc, #128]	; (2574 <thermal_init+0x120>)
    24f4:	4b20      	ldr	r3, [pc, #128]	; (2578 <thermal_init+0x124>)
    24f6:	0018      	movs	r0, r3
    24f8:	4b20      	ldr	r3, [pc, #128]	; (257c <thermal_init+0x128>)
    24fa:	4798      	blx	r3

    adc_regular_ain_channel(analog_channels, sizeof(analog_channels) / sizeof(uint32_t));
    24fc:	4b20      	ldr	r3, [pc, #128]	; (2580 <thermal_init+0x12c>)
    24fe:	2102      	movs	r1, #2
    2500:	0018      	movs	r0, r3
    2502:	4b20      	ldr	r3, [pc, #128]	; (2584 <thermal_init+0x130>)
    2504:	4798      	blx	r3

    adc_enable(&adc_instance);
    2506:	4b1c      	ldr	r3, [pc, #112]	; (2578 <thermal_init+0x124>)
    2508:	0018      	movs	r0, r3
    250a:	4b1f      	ldr	r3, [pc, #124]	; (2588 <thermal_init+0x134>)
    250c:	4798      	blx	r3

    if (xTaskCreate(task_Thermal, "task_Therm", configMINIMAL_STACK_SIZE, 0, tskIDLE_PRIORITY, NULL) != pdPASS) {
    250e:	2380      	movs	r3, #128	; 0x80
    2510:	009a      	lsls	r2, r3, #2
    2512:	491e      	ldr	r1, [pc, #120]	; (258c <thermal_init+0x138>)
    2514:	481e      	ldr	r0, [pc, #120]	; (2590 <thermal_init+0x13c>)
    2516:	2300      	movs	r3, #0
    2518:	9301      	str	r3, [sp, #4]
    251a:	2300      	movs	r3, #0
    251c:	9300      	str	r3, [sp, #0]
    251e:	2300      	movs	r3, #0
    2520:	4c1c      	ldr	r4, [pc, #112]	; (2594 <thermal_init+0x140>)
    2522:	47a0      	blx	r4
    2524:	1e03      	subs	r3, r0, #0
    2526:	2b01      	cmp	r3, #1
    2528:	d003      	beq.n	2532 <thermal_init+0xde>
        printf("Failed to create task_Thermal thread!\n");
    252a:	4b1b      	ldr	r3, [pc, #108]	; (2598 <thermal_init+0x144>)
    252c:	0018      	movs	r0, r3
    252e:	4b1b      	ldr	r3, [pc, #108]	; (259c <thermal_init+0x148>)
    2530:	4798      	blx	r3
    }

    therm_sem = xSemaphoreCreateBinary();    
    2532:	2203      	movs	r2, #3
    2534:	2100      	movs	r1, #0
    2536:	2001      	movs	r0, #1
    2538:	4b19      	ldr	r3, [pc, #100]	; (25a0 <thermal_init+0x14c>)
    253a:	4798      	blx	r3
    253c:	0002      	movs	r2, r0
    253e:	4b19      	ldr	r3, [pc, #100]	; (25a4 <thermal_init+0x150>)
    2540:	601a      	str	r2, [r3, #0]
    if (therm_sem == NULL) {
    2542:	4b18      	ldr	r3, [pc, #96]	; (25a4 <thermal_init+0x150>)
    2544:	681b      	ldr	r3, [r3, #0]
    2546:	2b00      	cmp	r3, #0
    2548:	d103      	bne.n	2552 <thermal_init+0xfe>
        printf("Failed to create therm_sem!\n");
    254a:	4b17      	ldr	r3, [pc, #92]	; (25a8 <thermal_init+0x154>)
    254c:	0018      	movs	r0, r3
    254e:	4b13      	ldr	r3, [pc, #76]	; (259c <thermal_init+0x148>)
    2550:	4798      	blx	r3
    }

    // Start the conversion
    adc_start_conversion(&adc_instance);
    2552:	4b09      	ldr	r3, [pc, #36]	; (2578 <thermal_init+0x124>)
    2554:	0018      	movs	r0, r3
    2556:	4b15      	ldr	r3, [pc, #84]	; (25ac <thermal_init+0x158>)
    2558:	4798      	blx	r3
}
    255a:	46c0      	nop			; (mov r8, r8)
    255c:	46bd      	mov	sp, r7
    255e:	b00f      	add	sp, #60	; 0x3c
    2560:	bd90      	pop	{r4, r7, pc}
    2562:	46c0      	nop			; (mov r8, r8)
    2564:	2000461c 	.word	0x2000461c
    2568:	00010de7 	.word	0x00010de7
    256c:	00009c39 	.word	0x00009c39
    2570:	00008cb5 	.word	0x00008cb5
    2574:	42004000 	.word	0x42004000
    2578:	20004624 	.word	0x20004624
    257c:	00009345 	.word	0x00009345
    2580:	2000001c 	.word	0x2000001c
    2584:	00009305 	.word	0x00009305
    2588:	00002075 	.word	0x00002075
    258c:	00012c40 	.word	0x00012c40
    2590:	000022ed 	.word	0x000022ed
    2594:	0000df1d 	.word	0x0000df1d
    2598:	00012c4c 	.word	0x00012c4c
    259c:	000115f9 	.word	0x000115f9
    25a0:	0000d4e5 	.word	0x0000d4e5
    25a4:	200000c8 	.word	0x200000c8
    25a8:	00012c74 	.word	0x00012c74
    25ac:	000020d5 	.word	0x000020d5

000025b0 <thermal_3s>:

void thermal_3s(void)
{
    25b0:	b590      	push	{r4, r7, lr}
    25b2:	b083      	sub	sp, #12
    25b4:	af00      	add	r7, sp, #0
    uint16_t result;
    uint8_t temp_water_temp;

    if (adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) {
    25b6:	4b20      	ldr	r3, [pc, #128]	; (2638 <thermal_3s+0x88>)
    25b8:	0018      	movs	r0, r3
    25ba:	4b20      	ldr	r3, [pc, #128]	; (263c <thermal_3s+0x8c>)
    25bc:	4798      	blx	r3
    25be:	0002      	movs	r2, r0
    25c0:	2301      	movs	r3, #1
    25c2:	4013      	ands	r3, r2
    25c4:	d034      	beq.n	2630 <thermal_3s+0x80>
        adc_read(&adc_instance, &result);
    25c6:	1d3a      	adds	r2, r7, #4
    25c8:	4b1b      	ldr	r3, [pc, #108]	; (2638 <thermal_3s+0x88>)
    25ca:	0011      	movs	r1, r2
    25cc:	0018      	movs	r0, r3
    25ce:	4b1c      	ldr	r3, [pc, #112]	; (2640 <thermal_3s+0x90>)
    25d0:	4798      	blx	r3

        // Check the thermistor LUT
        temp_water_temp = thermal_look_up_water_temp(result);
    25d2:	1d3b      	adds	r3, r7, #4
    25d4:	881b      	ldrh	r3, [r3, #0]
    25d6:	1dfc      	adds	r4, r7, #7
    25d8:	0018      	movs	r0, r3
    25da:	4b1a      	ldr	r3, [pc, #104]	; (2644 <thermal_3s+0x94>)
    25dc:	4798      	blx	r3
    25de:	0003      	movs	r3, r0
    25e0:	7023      	strb	r3, [r4, #0]

        // Set water temperature (converting to whatever our units are set to)
        if (temp_water_temp != WATER_TEMP_INVALID) {
    25e2:	1dfb      	adds	r3, r7, #7
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	2bff      	cmp	r3, #255	; 0xff
    25e8:	d01e      	beq.n	2628 <thermal_3s+0x78>
            thermal_state.water_temp = temp_water_temp;
    25ea:	4b17      	ldr	r3, [pc, #92]	; (2648 <thermal_3s+0x98>)
    25ec:	1dfa      	adds	r2, r7, #7
    25ee:	7812      	ldrb	r2, [r2, #0]
    25f0:	71da      	strb	r2, [r3, #7]

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
    25f2:	4b15      	ldr	r3, [pc, #84]	; (2648 <thermal_3s+0x98>)
    25f4:	79da      	ldrb	r2, [r3, #7]
    25f6:	4b14      	ldr	r3, [pc, #80]	; (2648 <thermal_3s+0x98>)
    25f8:	799b      	ldrb	r3, [r3, #6]
    25fa:	429a      	cmp	r2, r3
    25fc:	d214      	bcs.n	2628 <thermal_3s+0x78>
                 thermal_state.water_pump_state && 
    25fe:	4b12      	ldr	r3, [pc, #72]	; (2648 <thermal_3s+0x98>)
    2600:	78db      	ldrb	r3, [r3, #3]
        // Set water temperature (converting to whatever our units are set to)
        if (temp_water_temp != WATER_TEMP_INVALID) {
            thermal_state.water_temp = temp_water_temp;

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
    2602:	2b00      	cmp	r3, #0
    2604:	d010      	beq.n	2628 <thermal_3s+0x78>
                 thermal_state.water_pump_state && 
                !(thermal_state.heater_1_state && thermal_state.heater_2_state)) {
    2606:	4b10      	ldr	r3, [pc, #64]	; (2648 <thermal_3s+0x98>)
    2608:	781b      	ldrb	r3, [r3, #0]
    260a:	2201      	movs	r2, #1
    260c:	4053      	eors	r3, r2
    260e:	b2db      	uxtb	r3, r3
        if (temp_water_temp != WATER_TEMP_INVALID) {
            thermal_state.water_temp = temp_water_temp;

            // Turn on the heater if the pump is on and the temperature is below the set point
            if (thermal_state.water_temp < thermal_state.temp_set_point &&
                 thermal_state.water_pump_state && 
    2610:	2b00      	cmp	r3, #0
    2612:	d106      	bne.n	2622 <thermal_3s+0x72>
                !(thermal_state.heater_1_state && thermal_state.heater_2_state)) {
    2614:	4b0c      	ldr	r3, [pc, #48]	; (2648 <thermal_3s+0x98>)
    2616:	785b      	ldrb	r3, [r3, #1]
    2618:	2201      	movs	r2, #1
    261a:	4053      	eors	r3, r2
    261c:	b2db      	uxtb	r3, r3
    261e:	2b00      	cmp	r3, #0
    2620:	d002      	beq.n	2628 <thermal_3s+0x78>
                thermal_turn_on_heater(true);
    2622:	2001      	movs	r0, #1
    2624:	4b09      	ldr	r3, [pc, #36]	; (264c <thermal_3s+0x9c>)
    2626:	4798      	blx	r3
            }
        }

        // Start the next conversion
        adc_start_conversion(&adc_instance);
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <thermal_3s+0x88>)
    262a:	0018      	movs	r0, r3
    262c:	4b08      	ldr	r3, [pc, #32]	; (2650 <thermal_3s+0xa0>)
    262e:	4798      	blx	r3
    }
}
    2630:	46c0      	nop			; (mov r8, r8)
    2632:	46bd      	mov	sp, r7
    2634:	b003      	add	sp, #12
    2636:	bd90      	pop	{r4, r7, pc}
    2638:	20004624 	.word	0x20004624
    263c:	00001fcd 	.word	0x00001fcd
    2640:	0000211d 	.word	0x0000211d
    2644:	00002409 	.word	0x00002409
    2648:	2000461c 	.word	0x2000461c
    264c:	000027f5 	.word	0x000027f5
    2650:	000020d5 	.word	0x000020d5

00002654 <thermal_change_scale>:

void thermal_change_scale(bool new_scale)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	0002      	movs	r2, r0
    265c:	1dfb      	adds	r3, r7, #7
    265e:	701a      	strb	r2, [r3, #0]
    if (thermal_state.degrees_F != new_scale) {
    2660:	4b1f      	ldr	r3, [pc, #124]	; (26e0 <thermal_change_scale+0x8c>)
    2662:	795b      	ldrb	r3, [r3, #5]
    2664:	1dfa      	adds	r2, r7, #7
    2666:	7812      	ldrb	r2, [r2, #0]
    2668:	429a      	cmp	r2, r3
    266a:	d034      	beq.n	26d6 <thermal_change_scale+0x82>
        thermal_state.degrees_F = new_scale;
    266c:	4b1c      	ldr	r3, [pc, #112]	; (26e0 <thermal_change_scale+0x8c>)
    266e:	1dfa      	adds	r2, r7, #7
    2670:	7812      	ldrb	r2, [r2, #0]
    2672:	715a      	strb	r2, [r3, #5]
        if (new_scale) {
    2674:	1dfb      	adds	r3, r7, #7
    2676:	781b      	ldrb	r3, [r3, #0]
    2678:	2b00      	cmp	r3, #0
    267a:	d016      	beq.n	26aa <thermal_change_scale+0x56>
            if (thermal_state.water_temp != WATER_TEMP_INVALID) 
    267c:	4b18      	ldr	r3, [pc, #96]	; (26e0 <thermal_change_scale+0x8c>)
    267e:	79db      	ldrb	r3, [r3, #7]
    2680:	2bff      	cmp	r3, #255	; 0xff
    2682:	d008      	beq.n	2696 <thermal_change_scale+0x42>
                thermal_state.water_temp = celsius_to_fahrenheit(thermal_state.water_temp);       
    2684:	4b16      	ldr	r3, [pc, #88]	; (26e0 <thermal_change_scale+0x8c>)
    2686:	79db      	ldrb	r3, [r3, #7]
    2688:	0018      	movs	r0, r3
    268a:	4b16      	ldr	r3, [pc, #88]	; (26e4 <thermal_change_scale+0x90>)
    268c:	4798      	blx	r3
    268e:	0003      	movs	r3, r0
    2690:	001a      	movs	r2, r3
    2692:	4b13      	ldr	r3, [pc, #76]	; (26e0 <thermal_change_scale+0x8c>)
    2694:	71da      	strb	r2, [r3, #7]
                
            thermal_state.temp_set_point = celsius_to_fahrenheit(thermal_state.temp_set_point);
    2696:	4b12      	ldr	r3, [pc, #72]	; (26e0 <thermal_change_scale+0x8c>)
    2698:	799b      	ldrb	r3, [r3, #6]
    269a:	0018      	movs	r0, r3
    269c:	4b11      	ldr	r3, [pc, #68]	; (26e4 <thermal_change_scale+0x90>)
    269e:	4798      	blx	r3
    26a0:	0003      	movs	r3, r0
    26a2:	001a      	movs	r2, r3
    26a4:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <thermal_change_scale+0x8c>)
    26a6:	719a      	strb	r2, [r3, #6]

            thermal_state.temp_set_point = fahrenheit_to_celsius(thermal_state.temp_set_point);
        }
    }

}
    26a8:	e015      	b.n	26d6 <thermal_change_scale+0x82>
                thermal_state.water_temp = celsius_to_fahrenheit(thermal_state.water_temp);       
                
            thermal_state.temp_set_point = celsius_to_fahrenheit(thermal_state.temp_set_point);
        }
        else {
            if (thermal_state.water_temp != WATER_TEMP_INVALID)
    26aa:	4b0d      	ldr	r3, [pc, #52]	; (26e0 <thermal_change_scale+0x8c>)
    26ac:	79db      	ldrb	r3, [r3, #7]
    26ae:	2bff      	cmp	r3, #255	; 0xff
    26b0:	d008      	beq.n	26c4 <thermal_change_scale+0x70>
                thermal_state.water_temp = fahrenheit_to_celsius(thermal_state.water_temp);
    26b2:	4b0b      	ldr	r3, [pc, #44]	; (26e0 <thermal_change_scale+0x8c>)
    26b4:	79db      	ldrb	r3, [r3, #7]
    26b6:	0018      	movs	r0, r3
    26b8:	4b0b      	ldr	r3, [pc, #44]	; (26e8 <thermal_change_scale+0x94>)
    26ba:	4798      	blx	r3
    26bc:	0003      	movs	r3, r0
    26be:	001a      	movs	r2, r3
    26c0:	4b07      	ldr	r3, [pc, #28]	; (26e0 <thermal_change_scale+0x8c>)
    26c2:	71da      	strb	r2, [r3, #7]

            thermal_state.temp_set_point = fahrenheit_to_celsius(thermal_state.temp_set_point);
    26c4:	4b06      	ldr	r3, [pc, #24]	; (26e0 <thermal_change_scale+0x8c>)
    26c6:	799b      	ldrb	r3, [r3, #6]
    26c8:	0018      	movs	r0, r3
    26ca:	4b07      	ldr	r3, [pc, #28]	; (26e8 <thermal_change_scale+0x94>)
    26cc:	4798      	blx	r3
    26ce:	0003      	movs	r3, r0
    26d0:	001a      	movs	r2, r3
    26d2:	4b03      	ldr	r3, [pc, #12]	; (26e0 <thermal_change_scale+0x8c>)
    26d4:	719a      	strb	r2, [r3, #6]
        }
    }

}
    26d6:	46c0      	nop			; (mov r8, r8)
    26d8:	46bd      	mov	sp, r7
    26da:	b002      	add	sp, #8
    26dc:	bd80      	pop	{r7, pc}
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	2000461c 	.word	0x2000461c
    26e4:	000022a1 	.word	0x000022a1
    26e8:	00002255 	.word	0x00002255

000026ec <thermal_set_temperature>:

enum status_code thermal_set_temperature(uint8_t temperature)
{        
    26ec:	b590      	push	{r4, r7, lr}
    26ee:	b085      	sub	sp, #20
    26f0:	af00      	add	r7, sp, #0
    26f2:	0002      	movs	r2, r0
    26f4:	1dfb      	adds	r3, r7, #7
    26f6:	701a      	strb	r2, [r3, #0]
    uint8_t temp_max, temp_min, temp_scaled;

    temp_scaled = thermal_state.temp_set_point;
    26f8:	230d      	movs	r3, #13
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	4a25      	ldr	r2, [pc, #148]	; (2794 <thermal_set_temperature+0xa8>)
    26fe:	7992      	ldrb	r2, [r2, #6]
    2700:	701a      	strb	r2, [r3, #0]

    if (thermal_state.degrees_F) {
    2702:	4b24      	ldr	r3, [pc, #144]	; (2794 <thermal_set_temperature+0xa8>)
    2704:	795b      	ldrb	r3, [r3, #5]
    2706:	2b00      	cmp	r3, #0
    2708:	d008      	beq.n	271c <thermal_set_temperature+0x30>
        temp_min = MIN_SETPOINT_TEMP_F;
    270a:	230e      	movs	r3, #14
    270c:	18fb      	adds	r3, r7, r3
    270e:	2244      	movs	r2, #68	; 0x44
    2710:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_F;
    2712:	230f      	movs	r3, #15
    2714:	18fb      	adds	r3, r7, r3
    2716:	2268      	movs	r2, #104	; 0x68
    2718:	701a      	strb	r2, [r3, #0]
    271a:	e011      	b.n	2740 <thermal_set_temperature+0x54>
    }
    else {        
        temp_scaled = fahrenheit_to_celsius(temp_scaled);
    271c:	230d      	movs	r3, #13
    271e:	18fc      	adds	r4, r7, r3
    2720:	230d      	movs	r3, #13
    2722:	18fb      	adds	r3, r7, r3
    2724:	781b      	ldrb	r3, [r3, #0]
    2726:	0018      	movs	r0, r3
    2728:	4b1b      	ldr	r3, [pc, #108]	; (2798 <thermal_set_temperature+0xac>)
    272a:	4798      	blx	r3
    272c:	0003      	movs	r3, r0
    272e:	7023      	strb	r3, [r4, #0]
        temp_min = MIN_SETPOINT_TEMP_C;
    2730:	230e      	movs	r3, #14
    2732:	18fb      	adds	r3, r7, r3
    2734:	2214      	movs	r2, #20
    2736:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_C;
    2738:	230f      	movs	r3, #15
    273a:	18fb      	adds	r3, r7, r3
    273c:	2228      	movs	r2, #40	; 0x28
    273e:	701a      	strb	r2, [r3, #0]
    }
    
    if ((temperature >= temp_min) && (temperature <= temp_max)) {
    2740:	1dfa      	adds	r2, r7, #7
    2742:	230e      	movs	r3, #14
    2744:	18fb      	adds	r3, r7, r3
    2746:	7812      	ldrb	r2, [r2, #0]
    2748:	781b      	ldrb	r3, [r3, #0]
    274a:	429a      	cmp	r2, r3
    274c:	d31d      	bcc.n	278a <thermal_set_temperature+0x9e>
    274e:	1dfa      	adds	r2, r7, #7
    2750:	230f      	movs	r3, #15
    2752:	18fb      	adds	r3, r7, r3
    2754:	7812      	ldrb	r2, [r2, #0]
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	429a      	cmp	r2, r3
    275a:	d816      	bhi.n	278a <thermal_set_temperature+0x9e>
        // Only store/manipulate with degrees F
        if (!thermal_state.degrees_F) {
    275c:	4b0d      	ldr	r3, [pc, #52]	; (2794 <thermal_set_temperature+0xa8>)
    275e:	795b      	ldrb	r3, [r3, #5]
    2760:	2201      	movs	r2, #1
    2762:	4053      	eors	r3, r2
    2764:	b2db      	uxtb	r3, r3
    2766:	2b00      	cmp	r3, #0
    2768:	d009      	beq.n	277e <thermal_set_temperature+0x92>
            thermal_state.temp_set_point = celsius_to_fahrenheit(temperature);
    276a:	1dfb      	adds	r3, r7, #7
    276c:	781b      	ldrb	r3, [r3, #0]
    276e:	0018      	movs	r0, r3
    2770:	4b0a      	ldr	r3, [pc, #40]	; (279c <thermal_set_temperature+0xb0>)
    2772:	4798      	blx	r3
    2774:	0003      	movs	r3, r0
    2776:	001a      	movs	r2, r3
    2778:	4b06      	ldr	r3, [pc, #24]	; (2794 <thermal_set_temperature+0xa8>)
    277a:	719a      	strb	r2, [r3, #6]
    277c:	e003      	b.n	2786 <thermal_set_temperature+0x9a>
        }
        else
            thermal_state.temp_set_point = temperature;
    277e:	4b05      	ldr	r3, [pc, #20]	; (2794 <thermal_set_temperature+0xa8>)
    2780:	1dfa      	adds	r2, r7, #7
    2782:	7812      	ldrb	r2, [r2, #0]
    2784:	719a      	strb	r2, [r3, #6]

        return STATUS_OK;
    2786:	2300      	movs	r3, #0
    2788:	e000      	b.n	278c <thermal_set_temperature+0xa0>
    }
    else
        return STATUS_ERR_BAD_DATA;
    278a:	2313      	movs	r3, #19
}
    278c:	0018      	movs	r0, r3
    278e:	46bd      	mov	sp, r7
    2790:	b005      	add	sp, #20
    2792:	bd90      	pop	{r4, r7, pc}
    2794:	2000461c 	.word	0x2000461c
    2798:	00002255 	.word	0x00002255
    279c:	000022a1 	.word	0x000022a1

000027a0 <thermal_get_temperature>:

uint8_t thermal_get_temperature(void)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	af00      	add	r7, sp, #0
    return thermal_state.temp_set_point;
    27a4:	4b02      	ldr	r3, [pc, #8]	; (27b0 <thermal_get_temperature+0x10>)
    27a6:	799b      	ldrb	r3, [r3, #6]
}
    27a8:	0018      	movs	r0, r3
    27aa:	46bd      	mov	sp, r7
    27ac:	bd80      	pop	{r7, pc}
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	2000461c 	.word	0x2000461c

000027b4 <thermal_get_water_temp>:

uint8_t thermal_get_water_temp(void)
{    
    27b4:	b590      	push	{r4, r7, lr}
    27b6:	b083      	sub	sp, #12
    27b8:	af00      	add	r7, sp, #0
    uint8_t return_temp = thermal_state.water_temp;
    27ba:	1dfb      	adds	r3, r7, #7
    27bc:	4a0b      	ldr	r2, [pc, #44]	; (27ec <thermal_get_water_temp+0x38>)
    27be:	79d2      	ldrb	r2, [r2, #7]
    27c0:	701a      	strb	r2, [r3, #0]

    if (!thermal_state.degrees_F) {
    27c2:	4b0a      	ldr	r3, [pc, #40]	; (27ec <thermal_get_water_temp+0x38>)
    27c4:	795b      	ldrb	r3, [r3, #5]
    27c6:	2201      	movs	r2, #1
    27c8:	4053      	eors	r3, r2
    27ca:	b2db      	uxtb	r3, r3
    27cc:	2b00      	cmp	r3, #0
    27ce:	d007      	beq.n	27e0 <thermal_get_water_temp+0x2c>
        return_temp = fahrenheit_to_celsius(thermal_state.water_temp);
    27d0:	4b06      	ldr	r3, [pc, #24]	; (27ec <thermal_get_water_temp+0x38>)
    27d2:	79db      	ldrb	r3, [r3, #7]
    27d4:	1dfc      	adds	r4, r7, #7
    27d6:	0018      	movs	r0, r3
    27d8:	4b05      	ldr	r3, [pc, #20]	; (27f0 <thermal_get_water_temp+0x3c>)
    27da:	4798      	blx	r3
    27dc:	0003      	movs	r3, r0
    27de:	7023      	strb	r3, [r4, #0]
    }

	return return_temp;    
    27e0:	1dfb      	adds	r3, r7, #7
    27e2:	781b      	ldrb	r3, [r3, #0]
}
    27e4:	0018      	movs	r0, r3
    27e6:	46bd      	mov	sp, r7
    27e8:	b003      	add	sp, #12
    27ea:	bd90      	pop	{r4, r7, pc}
    27ec:	2000461c 	.word	0x2000461c
    27f0:	00002255 	.word	0x00002255

000027f4 <thermal_turn_on_heater>:

void thermal_turn_on_heater(bool on)
{
    27f4:	b590      	push	{r4, r7, lr}
    27f6:	b083      	sub	sp, #12
    27f8:	af00      	add	r7, sp, #0
    27fa:	0002      	movs	r2, r0
    27fc:	1dfb      	adds	r3, r7, #7
    27fe:	701a      	strb	r2, [r3, #0]
    thermal_state.heater_1_state = on;
    2800:	4b09      	ldr	r3, [pc, #36]	; (2828 <thermal_turn_on_heater+0x34>)
    2802:	1dfa      	adds	r2, r7, #7
    2804:	7812      	ldrb	r2, [r2, #0]
    2806:	701a      	strb	r2, [r3, #0]
    thermal_state.heater_2_state = on;
    2808:	4b07      	ldr	r3, [pc, #28]	; (2828 <thermal_turn_on_heater+0x34>)
    280a:	1dfa      	adds	r2, r7, #7
    280c:	7812      	ldrb	r2, [r2, #0]
    280e:	705a      	strb	r2, [r3, #1]
    xSemaphoreGive(therm_sem);
    2810:	4b06      	ldr	r3, [pc, #24]	; (282c <thermal_turn_on_heater+0x38>)
    2812:	6818      	ldr	r0, [r3, #0]
    2814:	2300      	movs	r3, #0
    2816:	2200      	movs	r2, #0
    2818:	2100      	movs	r1, #0
    281a:	4c05      	ldr	r4, [pc, #20]	; (2830 <thermal_turn_on_heater+0x3c>)
    281c:	47a0      	blx	r4
}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	46bd      	mov	sp, r7
    2822:	b003      	add	sp, #12
    2824:	bd90      	pop	{r4, r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	2000461c 	.word	0x2000461c
    282c:	200000c8 	.word	0x200000c8
    2830:	0000d621 	.word	0x0000d621

00002834 <thermal_turn_on_water_pump>:

void thermal_turn_on_water_pump(bool on)
{
    2834:	b590      	push	{r4, r7, lr}
    2836:	b083      	sub	sp, #12
    2838:	af00      	add	r7, sp, #0
    283a:	0002      	movs	r2, r0
    283c:	1dfb      	adds	r3, r7, #7
    283e:	701a      	strb	r2, [r3, #0]
    thermal_state.water_pump_state = on;
    2840:	4b07      	ldr	r3, [pc, #28]	; (2860 <thermal_turn_on_water_pump+0x2c>)
    2842:	1dfa      	adds	r2, r7, #7
    2844:	7812      	ldrb	r2, [r2, #0]
    2846:	70da      	strb	r2, [r3, #3]
    xSemaphoreGive(therm_sem);
    2848:	4b06      	ldr	r3, [pc, #24]	; (2864 <thermal_turn_on_water_pump+0x30>)
    284a:	6818      	ldr	r0, [r3, #0]
    284c:	2300      	movs	r3, #0
    284e:	2200      	movs	r2, #0
    2850:	2100      	movs	r1, #0
    2852:	4c05      	ldr	r4, [pc, #20]	; (2868 <thermal_turn_on_water_pump+0x34>)
    2854:	47a0      	blx	r4
}
    2856:	46c0      	nop			; (mov r8, r8)
    2858:	46bd      	mov	sp, r7
    285a:	b003      	add	sp, #12
    285c:	bd90      	pop	{r4, r7, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	2000461c 	.word	0x2000461c
    2864:	200000c8 	.word	0x200000c8
    2868:	0000d621 	.word	0x0000d621

0000286c <thermal_turn_on_air_pump>:

void thermal_turn_on_air_pump(bool on)
{
    286c:	b590      	push	{r4, r7, lr}
    286e:	b083      	sub	sp, #12
    2870:	af00      	add	r7, sp, #0
    2872:	0002      	movs	r2, r0
    2874:	1dfb      	adds	r3, r7, #7
    2876:	701a      	strb	r2, [r3, #0]
    thermal_state.air_pump_state = on;
    2878:	4b07      	ldr	r3, [pc, #28]	; (2898 <thermal_turn_on_air_pump+0x2c>)
    287a:	1dfa      	adds	r2, r7, #7
    287c:	7812      	ldrb	r2, [r2, #0]
    287e:	709a      	strb	r2, [r3, #2]
    xSemaphoreGive(therm_sem);
    2880:	4b06      	ldr	r3, [pc, #24]	; (289c <thermal_turn_on_air_pump+0x30>)
    2882:	6818      	ldr	r0, [r3, #0]
    2884:	2300      	movs	r3, #0
    2886:	2200      	movs	r2, #0
    2888:	2100      	movs	r1, #0
    288a:	4c05      	ldr	r4, [pc, #20]	; (28a0 <thermal_turn_on_air_pump+0x34>)
    288c:	47a0      	blx	r4
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	46bd      	mov	sp, r7
    2892:	b003      	add	sp, #12
    2894:	bd90      	pop	{r4, r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	2000461c 	.word	0x2000461c
    289c:	200000c8 	.word	0x200000c8
    28a0:	0000d621 	.word	0x0000d621

000028a4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	b082      	sub	sp, #8
    28a8:	af00      	add	r7, sp, #0
    28aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	2280      	movs	r2, #128	; 0x80
    28b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    28b2:	687b      	ldr	r3, [r7, #4]
    28b4:	2200      	movs	r2, #0
    28b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    28b8:	687b      	ldr	r3, [r7, #4]
    28ba:	2201      	movs	r2, #1
    28bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	2200      	movs	r2, #0
    28c2:	70da      	strb	r2, [r3, #3]
}
    28c4:	46c0      	nop			; (mov r8, r8)
    28c6:	46bd      	mov	sp, r7
    28c8:	b002      	add	sp, #8
    28ca:	bd80      	pop	{r7, pc}

000028cc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b084      	sub	sp, #16
    28d0:	af00      	add	r7, sp, #0
    28d2:	0002      	movs	r2, r0
    28d4:	1dfb      	adds	r3, r7, #7
    28d6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    28d8:	230f      	movs	r3, #15
    28da:	18fb      	adds	r3, r7, r3
    28dc:	1dfa      	adds	r2, r7, #7
    28de:	7812      	ldrb	r2, [r2, #0]
    28e0:	09d2      	lsrs	r2, r2, #7
    28e2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    28e4:	230e      	movs	r3, #14
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	1dfa      	adds	r2, r7, #7
    28ea:	7812      	ldrb	r2, [r2, #0]
    28ec:	0952      	lsrs	r2, r2, #5
    28ee:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    28f0:	4b0d      	ldr	r3, [pc, #52]	; (2928 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    28f2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    28f4:	230f      	movs	r3, #15
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	781b      	ldrb	r3, [r3, #0]
    28fa:	2b00      	cmp	r3, #0
    28fc:	d10f      	bne.n	291e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    28fe:	230f      	movs	r3, #15
    2900:	18fb      	adds	r3, r7, r3
    2902:	781b      	ldrb	r3, [r3, #0]
    2904:	009b      	lsls	r3, r3, #2
    2906:	2210      	movs	r2, #16
    2908:	4694      	mov	ip, r2
    290a:	44bc      	add	ip, r7
    290c:	4463      	add	r3, ip
    290e:	3b08      	subs	r3, #8
    2910:	681a      	ldr	r2, [r3, #0]
    2912:	230e      	movs	r3, #14
    2914:	18fb      	adds	r3, r7, r3
    2916:	781b      	ldrb	r3, [r3, #0]
    2918:	01db      	lsls	r3, r3, #7
    291a:	18d3      	adds	r3, r2, r3
    291c:	e000      	b.n	2920 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    291e:	2300      	movs	r3, #0
	}
}
    2920:	0018      	movs	r0, r3
    2922:	46bd      	mov	sp, r7
    2924:	b004      	add	sp, #16
    2926:	bd80      	pop	{r7, pc}
    2928:	41004400 	.word	0x41004400

0000292c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    292c:	b580      	push	{r7, lr}
    292e:	b082      	sub	sp, #8
    2930:	af00      	add	r7, sp, #0
    2932:	0002      	movs	r2, r0
    2934:	1dfb      	adds	r3, r7, #7
    2936:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2938:	1dfb      	adds	r3, r7, #7
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	0018      	movs	r0, r3
    293e:	4b03      	ldr	r3, [pc, #12]	; (294c <port_get_group_from_gpio_pin+0x20>)
    2940:	4798      	blx	r3
    2942:	0003      	movs	r3, r0
}
    2944:	0018      	movs	r0, r3
    2946:	46bd      	mov	sp, r7
    2948:	b002      	add	sp, #8
    294a:	bd80      	pop	{r7, pc}
    294c:	000028cd 	.word	0x000028cd

00002950 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
    2956:	0002      	movs	r2, r0
    2958:	1dfb      	adds	r3, r7, #7
    295a:	701a      	strb	r2, [r3, #0]
    295c:	1dbb      	adds	r3, r7, #6
    295e:	1c0a      	adds	r2, r1, #0
    2960:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2962:	1dfb      	adds	r3, r7, #7
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	0018      	movs	r0, r3
    2968:	4b0d      	ldr	r3, [pc, #52]	; (29a0 <port_pin_set_output_level+0x50>)
    296a:	4798      	blx	r3
    296c:	0003      	movs	r3, r0
    296e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2970:	1dfb      	adds	r3, r7, #7
    2972:	781b      	ldrb	r3, [r3, #0]
    2974:	221f      	movs	r2, #31
    2976:	4013      	ands	r3, r2
    2978:	2201      	movs	r2, #1
    297a:	409a      	lsls	r2, r3
    297c:	0013      	movs	r3, r2
    297e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2980:	1dbb      	adds	r3, r7, #6
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	2b00      	cmp	r3, #0
    2986:	d003      	beq.n	2990 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2988:	68fb      	ldr	r3, [r7, #12]
    298a:	68ba      	ldr	r2, [r7, #8]
    298c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    298e:	e002      	b.n	2996 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2990:	68fb      	ldr	r3, [r7, #12]
    2992:	68ba      	ldr	r2, [r7, #8]
    2994:	615a      	str	r2, [r3, #20]
	}
}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	46bd      	mov	sp, r7
    299a:	b004      	add	sp, #16
    299c:	bd80      	pop	{r7, pc}
    299e:	46c0      	nop			; (mov r8, r8)
    29a0:	0000292d 	.word	0x0000292d

000029a4 <tm1640_start>:
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;
uint8_t wtc_bus_dummy_data[TM1640_GRIDS + 1] = {0};

static inline void tm1640_start(void)
{
    29a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    29a6:	b083      	sub	sp, #12
    29a8:	af00      	add	r7, sp, #0
    // Switch the CLK pin over to GPIO
    struct port_config gpio_conf;  
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    29aa:	1d3b      	adds	r3, r7, #4
    29ac:	2201      	movs	r2, #1
    29ae:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    29b0:	1d3b      	adds	r3, r7, #4
    29b2:	2201      	movs	r2, #1
    29b4:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    29b6:	1d3b      	adds	r3, r7, #4
    29b8:	2200      	movs	r2, #0
    29ba:	709a      	strb	r2, [r3, #2]
    
    port_pin_set_config(TM1640_CLK_PIN, &gpio_conf);
    29bc:	1d3b      	adds	r3, r7, #4
    29be:	0019      	movs	r1, r3
    29c0:	2009      	movs	r0, #9
    29c2:	4b12      	ldr	r3, [pc, #72]	; (2a0c <tm1640_start+0x68>)
    29c4:	4798      	blx	r3

    // Bring DOUT and CLK low for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    29c6:	2100      	movs	r1, #0
    29c8:	202a      	movs	r0, #42	; 0x2a
    29ca:	4b11      	ldr	r3, [pc, #68]	; (2a10 <tm1640_start+0x6c>)
    29cc:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    29ce:	2000      	movs	r0, #0
    29d0:	4b10      	ldr	r3, [pc, #64]	; (2a14 <tm1640_start+0x70>)
    29d2:	4798      	blx	r3
    29d4:	0003      	movs	r3, r0
    29d6:	001d      	movs	r5, r3
    29d8:	2300      	movs	r3, #0
    29da:	001e      	movs	r6, r3
    29dc:	4b0e      	ldr	r3, [pc, #56]	; (2a18 <tm1640_start+0x74>)
    29de:	2400      	movs	r4, #0
    29e0:	0028      	movs	r0, r5
    29e2:	0031      	movs	r1, r6
    29e4:	18c0      	adds	r0, r0, r3
    29e6:	4161      	adcs	r1, r4
    29e8:	4c0c      	ldr	r4, [pc, #48]	; (2a1c <tm1640_start+0x78>)
    29ea:	4a0d      	ldr	r2, [pc, #52]	; (2a20 <tm1640_start+0x7c>)
    29ec:	2300      	movs	r3, #0
    29ee:	47a0      	blx	r4
    29f0:	0003      	movs	r3, r0
    29f2:	000c      	movs	r4, r1
    29f4:	0018      	movs	r0, r3
    29f6:	4b0b      	ldr	r3, [pc, #44]	; (2a24 <tm1640_start+0x80>)
    29f8:	4798      	blx	r3
    port_pin_set_output_level(TM1640_CLK_PIN, 0);    
    29fa:	2100      	movs	r1, #0
    29fc:	2009      	movs	r0, #9
    29fe:	4b04      	ldr	r3, [pc, #16]	; (2a10 <tm1640_start+0x6c>)
    2a00:	4798      	blx	r3
}
    2a02:	46c0      	nop			; (mov r8, r8)
    2a04:	46bd      	mov	sp, r7
    2a06:	b003      	add	sp, #12
    2a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	00009c39 	.word	0x00009c39
    2a10:	00002951 	.word	0x00002951
    2a14:	0000c839 	.word	0x0000c839
    2a18:	006acfbf 	.word	0x006acfbf
    2a1c:	00010a89 	.word	0x00010a89
    2a20:	006acfc0 	.word	0x006acfc0
    2a24:	20000001 	.word	0x20000001

00002a28 <tm1640_stop>:

static inline void tm1640_stop(void)
{
    2a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a2a:	b085      	sub	sp, #20
    2a2c:	af00      	add	r7, sp, #0
    // Switch the DO and CLK pins over to GPIOs    
    struct system_pinmux_config clk_conf;        
        
    // Bring DOUT low for 1us, then bring DOUT and CLK high for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    2a2e:	2100      	movs	r1, #0
    2a30:	202a      	movs	r0, #42	; 0x2a
    2a32:	4b26      	ldr	r3, [pc, #152]	; (2acc <tm1640_stop+0xa4>)
    2a34:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    2a36:	2000      	movs	r0, #0
    2a38:	4b25      	ldr	r3, [pc, #148]	; (2ad0 <tm1640_stop+0xa8>)
    2a3a:	4798      	blx	r3
    2a3c:	0003      	movs	r3, r0
    2a3e:	603b      	str	r3, [r7, #0]
    2a40:	2300      	movs	r3, #0
    2a42:	607b      	str	r3, [r7, #4]
    2a44:	4b23      	ldr	r3, [pc, #140]	; (2ad4 <tm1640_stop+0xac>)
    2a46:	2400      	movs	r4, #0
    2a48:	6838      	ldr	r0, [r7, #0]
    2a4a:	6879      	ldr	r1, [r7, #4]
    2a4c:	18c0      	adds	r0, r0, r3
    2a4e:	4161      	adcs	r1, r4
    2a50:	4c21      	ldr	r4, [pc, #132]	; (2ad8 <tm1640_stop+0xb0>)
    2a52:	4a22      	ldr	r2, [pc, #136]	; (2adc <tm1640_stop+0xb4>)
    2a54:	2300      	movs	r3, #0
    2a56:	47a0      	blx	r4
    2a58:	0003      	movs	r3, r0
    2a5a:	000c      	movs	r4, r1
    2a5c:	0018      	movs	r0, r3
    2a5e:	4b20      	ldr	r3, [pc, #128]	; (2ae0 <tm1640_stop+0xb8>)
    2a60:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);
    2a62:	2101      	movs	r1, #1
    2a64:	2009      	movs	r0, #9
    2a66:	4b19      	ldr	r3, [pc, #100]	; (2acc <tm1640_stop+0xa4>)
    2a68:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    2a6a:	2000      	movs	r0, #0
    2a6c:	4b18      	ldr	r3, [pc, #96]	; (2ad0 <tm1640_stop+0xa8>)
    2a6e:	4798      	blx	r3
    2a70:	0003      	movs	r3, r0
    2a72:	001d      	movs	r5, r3
    2a74:	2300      	movs	r3, #0
    2a76:	001e      	movs	r6, r3
    2a78:	4b16      	ldr	r3, [pc, #88]	; (2ad4 <tm1640_stop+0xac>)
    2a7a:	2400      	movs	r4, #0
    2a7c:	0028      	movs	r0, r5
    2a7e:	0031      	movs	r1, r6
    2a80:	18c0      	adds	r0, r0, r3
    2a82:	4161      	adcs	r1, r4
    2a84:	4c14      	ldr	r4, [pc, #80]	; (2ad8 <tm1640_stop+0xb0>)
    2a86:	4a15      	ldr	r2, [pc, #84]	; (2adc <tm1640_stop+0xb4>)
    2a88:	2300      	movs	r3, #0
    2a8a:	47a0      	blx	r4
    2a8c:	0003      	movs	r3, r0
    2a8e:	000c      	movs	r4, r1
    2a90:	0018      	movs	r0, r3
    2a92:	4b13      	ldr	r3, [pc, #76]	; (2ae0 <tm1640_stop+0xb8>)
    2a94:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    2a96:	2101      	movs	r1, #1
    2a98:	202a      	movs	r0, #42	; 0x2a
    2a9a:	4b0c      	ldr	r3, [pc, #48]	; (2acc <tm1640_stop+0xa4>)
    2a9c:	4798      	blx	r3

    // Restore peripheral control
    system_pinmux_get_config_defaults(&clk_conf);
    2a9e:	230c      	movs	r3, #12
    2aa0:	18fb      	adds	r3, r7, r3
    2aa2:	0018      	movs	r0, r3
    2aa4:	4b0f      	ldr	r3, [pc, #60]	; (2ae4 <tm1640_stop+0xbc>)
    2aa6:	4798      	blx	r3
    clk_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2aa8:	230c      	movs	r3, #12
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	2200      	movs	r2, #0
    2aae:	705a      	strb	r2, [r3, #1]
    clk_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    2ab0:	230c      	movs	r3, #12
    2ab2:	18fb      	adds	r3, r7, r3
    2ab4:	2202      	movs	r2, #2
    2ab6:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &clk_conf);    
    2ab8:	230c      	movs	r3, #12
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	0019      	movs	r1, r3
    2abe:	2009      	movs	r0, #9
    2ac0:	4b09      	ldr	r3, [pc, #36]	; (2ae8 <tm1640_stop+0xc0>)
    2ac2:	4798      	blx	r3
}
    2ac4:	46c0      	nop			; (mov r8, r8)
    2ac6:	46bd      	mov	sp, r7
    2ac8:	b005      	add	sp, #20
    2aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2acc:	00002951 	.word	0x00002951
    2ad0:	0000c839 	.word	0x0000c839
    2ad4:	006acfbf 	.word	0x006acfbf
    2ad8:	00010a89 	.word	0x00010a89
    2adc:	006acfc0 	.word	0x006acfc0
    2ae0:	20000001 	.word	0x20000001
    2ae4:	000028a5 	.word	0x000028a5
    2ae8:	0000cbfd 	.word	0x0000cbfd

00002aec <tm1640_write>:

static inline void tm1640_write(uint8_t byte)
{
    2aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aee:	b089      	sub	sp, #36	; 0x24
    2af0:	af00      	add	r7, sp, #0
    2af2:	0002      	movs	r2, r0
    2af4:	2317      	movs	r3, #23
    2af6:	18fb      	adds	r3, r7, r3
    2af8:	701a      	strb	r2, [r3, #0]
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    2afa:	230f      	movs	r3, #15
    2afc:	2210      	movs	r2, #16
    2afe:	4694      	mov	ip, r2
    2b00:	44bc      	add	ip, r7
    2b02:	4463      	add	r3, ip
    2b04:	2200      	movs	r2, #0
    2b06:	701a      	strb	r2, [r3, #0]
    2b08:	e06d      	b.n	2be6 <tm1640_write+0xfa>
        if ((byte >> bit) & 0x01) 
    2b0a:	2317      	movs	r3, #23
    2b0c:	18fb      	adds	r3, r7, r3
    2b0e:	781a      	ldrb	r2, [r3, #0]
    2b10:	230f      	movs	r3, #15
    2b12:	2110      	movs	r1, #16
    2b14:	468c      	mov	ip, r1
    2b16:	44bc      	add	ip, r7
    2b18:	4463      	add	r3, ip
    2b1a:	781b      	ldrb	r3, [r3, #0]
    2b1c:	411a      	asrs	r2, r3
    2b1e:	0013      	movs	r3, r2
    2b20:	2201      	movs	r2, #1
    2b22:	4013      	ands	r3, r2
    2b24:	d004      	beq.n	2b30 <tm1640_write+0x44>
            port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    2b26:	2101      	movs	r1, #1
    2b28:	202a      	movs	r0, #42	; 0x2a
    2b2a:	4b35      	ldr	r3, [pc, #212]	; (2c00 <tm1640_write+0x114>)
    2b2c:	4798      	blx	r3
    2b2e:	e003      	b.n	2b38 <tm1640_write+0x4c>
        else
            port_pin_set_output_level(TM1640_DOUT_PIN, 0);    
    2b30:	2100      	movs	r1, #0
    2b32:	202a      	movs	r0, #42	; 0x2a
    2b34:	4b32      	ldr	r3, [pc, #200]	; (2c00 <tm1640_write+0x114>)
    2b36:	4798      	blx	r3

        delay_us(TM1640_BIT_TIME);
    2b38:	2000      	movs	r0, #0
    2b3a:	4b32      	ldr	r3, [pc, #200]	; (2c04 <tm1640_write+0x118>)
    2b3c:	4798      	blx	r3
    2b3e:	0003      	movs	r3, r0
    2b40:	001d      	movs	r5, r3
    2b42:	2300      	movs	r3, #0
    2b44:	001e      	movs	r6, r3
    2b46:	4b30      	ldr	r3, [pc, #192]	; (2c08 <tm1640_write+0x11c>)
    2b48:	2400      	movs	r4, #0
    2b4a:	195b      	adds	r3, r3, r5
    2b4c:	4174      	adcs	r4, r6
    2b4e:	0018      	movs	r0, r3
    2b50:	0021      	movs	r1, r4
    2b52:	4c2e      	ldr	r4, [pc, #184]	; (2c0c <tm1640_write+0x120>)
    2b54:	4a2e      	ldr	r2, [pc, #184]	; (2c10 <tm1640_write+0x124>)
    2b56:	2300      	movs	r3, #0
    2b58:	47a0      	blx	r4
    2b5a:	0003      	movs	r3, r0
    2b5c:	000c      	movs	r4, r1
    2b5e:	0018      	movs	r0, r3
    2b60:	4b2c      	ldr	r3, [pc, #176]	; (2c14 <tm1640_write+0x128>)
    2b62:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
    2b64:	2101      	movs	r1, #1
    2b66:	2009      	movs	r0, #9
    2b68:	4b25      	ldr	r3, [pc, #148]	; (2c00 <tm1640_write+0x114>)
    2b6a:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    2b6c:	2000      	movs	r0, #0
    2b6e:	4b25      	ldr	r3, [pc, #148]	; (2c04 <tm1640_write+0x118>)
    2b70:	4798      	blx	r3
    2b72:	0003      	movs	r3, r0
    2b74:	60bb      	str	r3, [r7, #8]
    2b76:	2300      	movs	r3, #0
    2b78:	60fb      	str	r3, [r7, #12]
    2b7a:	4b23      	ldr	r3, [pc, #140]	; (2c08 <tm1640_write+0x11c>)
    2b7c:	2400      	movs	r4, #0
    2b7e:	68b8      	ldr	r0, [r7, #8]
    2b80:	68f9      	ldr	r1, [r7, #12]
    2b82:	18c0      	adds	r0, r0, r3
    2b84:	4161      	adcs	r1, r4
    2b86:	4c21      	ldr	r4, [pc, #132]	; (2c0c <tm1640_write+0x120>)
    2b88:	4a21      	ldr	r2, [pc, #132]	; (2c10 <tm1640_write+0x124>)
    2b8a:	2300      	movs	r3, #0
    2b8c:	47a0      	blx	r4
    2b8e:	0003      	movs	r3, r0
    2b90:	000c      	movs	r4, r1
    2b92:	0018      	movs	r0, r3
    2b94:	4b1f      	ldr	r3, [pc, #124]	; (2c14 <tm1640_write+0x128>)
    2b96:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
    2b98:	2100      	movs	r1, #0
    2b9a:	2009      	movs	r0, #9
    2b9c:	4b18      	ldr	r3, [pc, #96]	; (2c00 <tm1640_write+0x114>)
    2b9e:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    2ba0:	2000      	movs	r0, #0
    2ba2:	4b18      	ldr	r3, [pc, #96]	; (2c04 <tm1640_write+0x118>)
    2ba4:	4798      	blx	r3
    2ba6:	0003      	movs	r3, r0
    2ba8:	603b      	str	r3, [r7, #0]
    2baa:	2300      	movs	r3, #0
    2bac:	607b      	str	r3, [r7, #4]
    2bae:	4b16      	ldr	r3, [pc, #88]	; (2c08 <tm1640_write+0x11c>)
    2bb0:	2400      	movs	r4, #0
    2bb2:	6838      	ldr	r0, [r7, #0]
    2bb4:	6879      	ldr	r1, [r7, #4]
    2bb6:	18c0      	adds	r0, r0, r3
    2bb8:	4161      	adcs	r1, r4
    2bba:	4c14      	ldr	r4, [pc, #80]	; (2c0c <tm1640_write+0x120>)
    2bbc:	4a14      	ldr	r2, [pc, #80]	; (2c10 <tm1640_write+0x124>)
    2bbe:	2300      	movs	r3, #0
    2bc0:	47a0      	blx	r4
    2bc2:	0003      	movs	r3, r0
    2bc4:	000c      	movs	r4, r1
    2bc6:	0018      	movs	r0, r3
    2bc8:	4b12      	ldr	r3, [pc, #72]	; (2c14 <tm1640_write+0x128>)
    2bca:	4798      	blx	r3
static inline void tm1640_write(uint8_t byte)
{
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    2bcc:	230f      	movs	r3, #15
    2bce:	2210      	movs	r2, #16
    2bd0:	4694      	mov	ip, r2
    2bd2:	44bc      	add	ip, r7
    2bd4:	4463      	add	r3, ip
    2bd6:	781a      	ldrb	r2, [r3, #0]
    2bd8:	230f      	movs	r3, #15
    2bda:	2110      	movs	r1, #16
    2bdc:	468c      	mov	ip, r1
    2bde:	44bc      	add	ip, r7
    2be0:	4463      	add	r3, ip
    2be2:	3201      	adds	r2, #1
    2be4:	701a      	strb	r2, [r3, #0]
    2be6:	230f      	movs	r3, #15
    2be8:	2210      	movs	r2, #16
    2bea:	4694      	mov	ip, r2
    2bec:	44bc      	add	ip, r7
    2bee:	4463      	add	r3, ip
    2bf0:	781b      	ldrb	r3, [r3, #0]
    2bf2:	2b07      	cmp	r3, #7
    2bf4:	d989      	bls.n	2b0a <tm1640_write+0x1e>
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
        delay_us(TM1640_BIT_TIME);
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
        delay_us(TM1640_BIT_TIME);
    }
}
    2bf6:	46c0      	nop			; (mov r8, r8)
    2bf8:	46bd      	mov	sp, r7
    2bfa:	b009      	add	sp, #36	; 0x24
    2bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	00002951 	.word	0x00002951
    2c04:	0000c839 	.word	0x0000c839
    2c08:	006acfbf 	.word	0x006acfbf
    2c0c:	00010a89 	.word	0x00010a89
    2c10:	006acfc0 	.word	0x006acfc0
    2c14:	20000001 	.word	0x20000001

00002c18 <tm1640_write_cmd>:


static enum status_code tm1640_write_cmd(uint8_t cmd, uint8_t data)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	b082      	sub	sp, #8
    2c1c:	af00      	add	r7, sp, #0
    2c1e:	0002      	movs	r2, r0
    2c20:	1dfb      	adds	r3, r7, #7
    2c22:	701a      	strb	r2, [r3, #0]
    2c24:	1dbb      	adds	r3, r7, #6
    2c26:	1c0a      	adds	r2, r1, #0
    2c28:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
    2c2a:	4b0f      	ldr	r3, [pc, #60]	; (2c68 <tm1640_write_cmd+0x50>)
    2c2c:	4798      	blx	r3
    
    tm1640_start();
    2c2e:	4b0f      	ldr	r3, [pc, #60]	; (2c6c <tm1640_write_cmd+0x54>)
    2c30:	4798      	blx	r3
    tm1640_write((cmd & CTRL_CMD_MASK) | (data & ~CTRL_CMD_MASK));
    2c32:	1dfb      	adds	r3, r7, #7
    2c34:	781b      	ldrb	r3, [r3, #0]
    2c36:	b25b      	sxtb	r3, r3
    2c38:	223f      	movs	r2, #63	; 0x3f
    2c3a:	4393      	bics	r3, r2
    2c3c:	b25a      	sxtb	r2, r3
    2c3e:	1dbb      	adds	r3, r7, #6
    2c40:	781b      	ldrb	r3, [r3, #0]
    2c42:	b25b      	sxtb	r3, r3
    2c44:	213f      	movs	r1, #63	; 0x3f
    2c46:	400b      	ands	r3, r1
    2c48:	b25b      	sxtb	r3, r3
    2c4a:	4313      	orrs	r3, r2
    2c4c:	b25b      	sxtb	r3, r3
    2c4e:	b2db      	uxtb	r3, r3
    2c50:	0018      	movs	r0, r3
    2c52:	4b07      	ldr	r3, [pc, #28]	; (2c70 <tm1640_write_cmd+0x58>)
    2c54:	4798      	blx	r3
    tm1640_stop();
    2c56:	4b07      	ldr	r3, [pc, #28]	; (2c74 <tm1640_write_cmd+0x5c>)
    2c58:	4798      	blx	r3

    taskEXIT_CRITICAL();
    2c5a:	4b07      	ldr	r3, [pc, #28]	; (2c78 <tm1640_write_cmd+0x60>)
    2c5c:	4798      	blx	r3

    return STATUS_OK;
    2c5e:	2300      	movs	r3, #0
}
    2c60:	0018      	movs	r0, r3
    2c62:	46bd      	mov	sp, r7
    2c64:	b002      	add	sp, #8
    2c66:	bd80      	pop	{r7, pc}
    2c68:	0000d259 	.word	0x0000d259
    2c6c:	000029a5 	.word	0x000029a5
    2c70:	00002aed 	.word	0x00002aed
    2c74:	00002a29 	.word	0x00002a29
    2c78:	0000d27d 	.word	0x0000d27d

00002c7c <tm1640_init>:

void tm1640_init(void)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b082      	sub	sp, #8
    2c80:	af00      	add	r7, sp, #0
    struct port_config gpio_conf;
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    2c82:	1d3b      	adds	r3, r7, #4
    2c84:	2201      	movs	r2, #1
    2c86:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    2c88:	1d3b      	adds	r3, r7, #4
    2c8a:	2201      	movs	r2, #1
    2c8c:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    2c8e:	1d3b      	adds	r3, r7, #4
    2c90:	2200      	movs	r2, #0
    2c92:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(TM1640_DOUT_PIN, &gpio_conf);
    2c94:	1d3b      	adds	r3, r7, #4
    2c96:	0019      	movs	r1, r3
    2c98:	202a      	movs	r0, #42	; 0x2a
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <tm1640_init+0x34>)
    2c9c:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);
    2c9e:	2101      	movs	r1, #1
    2ca0:	202a      	movs	r0, #42	; 0x2a
    2ca2:	4b04      	ldr	r3, [pc, #16]	; (2cb4 <tm1640_init+0x38>)
    2ca4:	4798      	blx	r3
}
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	46bd      	mov	sp, r7
    2caa:	b002      	add	sp, #8
    2cac:	bd80      	pop	{r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00009c39 	.word	0x00009c39
    2cb4:	00002951 	.word	0x00002951

00002cb8 <tm1640_display_on>:


enum status_code tm1640_display_on(uint8_t on)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b084      	sub	sp, #16
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	0002      	movs	r2, r0
    2cc0:	1dfb      	adds	r3, r7, #7
    2cc2:	701a      	strb	r2, [r3, #0]
    uint8_t display_on = CTRL_CMD_DISP_OFF;
    2cc4:	230f      	movs	r3, #15
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	2200      	movs	r2, #0
    2cca:	701a      	strb	r2, [r3, #0]

    if (on) 
    2ccc:	1dfb      	adds	r3, r7, #7
    2cce:	781b      	ldrb	r3, [r3, #0]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d003      	beq.n	2cdc <tm1640_display_on+0x24>
        display_on = CTRL_CMD_DISP_ON | BRIGHT_3; 
    2cd4:	230f      	movs	r3, #15
    2cd6:	18fb      	adds	r3, r7, r3
    2cd8:	228b      	movs	r2, #139	; 0x8b
    2cda:	701a      	strb	r2, [r3, #0]

    return tm1640_write_cmd(CTRL_CMD, display_on); 
    2cdc:	230f      	movs	r3, #15
    2cde:	18fb      	adds	r3, r7, r3
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	0019      	movs	r1, r3
    2ce4:	2080      	movs	r0, #128	; 0x80
    2ce6:	4b03      	ldr	r3, [pc, #12]	; (2cf4 <tm1640_display_on+0x3c>)
    2ce8:	4798      	blx	r3
    2cea:	0003      	movs	r3, r0
}
    2cec:	0018      	movs	r0, r3
    2cee:	46bd      	mov	sp, r7
    2cf0:	b004      	add	sp, #16
    2cf2:	bd80      	pop	{r7, pc}
    2cf4:	00002c19 	.word	0x00002c19

00002cf8 <tm1640_set_display>:

enum status_code tm1640_set_display(uint8_t *disp, uint8_t length, tm1640_brightness_t brightness)
{
    2cf8:	b590      	push	{r4, r7, lr}
    2cfa:	b087      	sub	sp, #28
    2cfc:	af00      	add	r7, sp, #0
    2cfe:	6078      	str	r0, [r7, #4]
    2d00:	0008      	movs	r0, r1
    2d02:	0011      	movs	r1, r2
    2d04:	1cfb      	adds	r3, r7, #3
    2d06:	1c02      	adds	r2, r0, #0
    2d08:	701a      	strb	r2, [r3, #0]
    2d0a:	1cbb      	adds	r3, r7, #2
    2d0c:	1c0a      	adds	r2, r1, #0
    2d0e:	701a      	strb	r2, [r3, #0]
    enum status_code status = STATUS_OK;
    2d10:	2316      	movs	r3, #22
    2d12:	18fb      	adds	r3, r7, r3
    2d14:	2200      	movs	r2, #0
    2d16:	701a      	strb	r2, [r3, #0]
    struct port_config di_conf;    
    struct system_pinmux_config pin_conf;
    uint8_t grids;
       
    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    2d18:	4b32      	ldr	r3, [pc, #200]	; (2de4 <tm1640_set_display+0xec>)
    2d1a:	6818      	ldr	r0, [r3, #0]
    2d1c:	2301      	movs	r3, #1
    2d1e:	425a      	negs	r2, r3
    2d20:	2300      	movs	r3, #0
    2d22:	2100      	movs	r1, #0
    2d24:	4c30      	ldr	r4, [pc, #192]	; (2de8 <tm1640_set_display+0xf0>)
    2d26:	47a0      	blx	r4
    2d28:	1e03      	subs	r3, r0, #0
    2d2a:	d101      	bne.n	2d30 <tm1640_set_display+0x38>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    2d2c:	2312      	movs	r3, #18
    2d2e:	e055      	b.n	2ddc <tm1640_set_display+0xe4>
    }

    taskENTER_CRITICAL();
    2d30:	4b2e      	ldr	r3, [pc, #184]	; (2dec <tm1640_set_display+0xf4>)
    2d32:	4798      	blx	r3

    system_pinmux_get_config_defaults(&pin_conf);
    2d34:	230c      	movs	r3, #12
    2d36:	18fb      	adds	r3, r7, r3
    2d38:	0018      	movs	r0, r3
    2d3a:	4b2d      	ldr	r3, [pc, #180]	; (2df0 <tm1640_set_display+0xf8>)
    2d3c:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2d3e:	230c      	movs	r3, #12
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	2200      	movs	r2, #0
    2d44:	705a      	strb	r2, [r3, #1]
    pin_conf.mux_position = PINMUX_PA08C_SERCOM0_PAD0 & 0xFFFF;
    2d46:	230c      	movs	r3, #12
    2d48:	18fb      	adds	r3, r7, r3
    2d4a:	2202      	movs	r2, #2
    2d4c:	701a      	strb	r2, [r3, #0]

    // Data input pin for the WTC6508 needs to be set to a GPIO so it isn't driven
    // when the clock is generated for the TM1640
    di_conf.direction = PORT_PIN_DIR_INPUT;
    2d4e:	2310      	movs	r3, #16
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	2200      	movs	r2, #0
    2d54:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    2d56:	2310      	movs	r3, #16
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	2201      	movs	r2, #1
    2d5c:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    2d5e:	2310      	movs	r3, #16
    2d60:	18fb      	adds	r3, r7, r3
    2d62:	2200      	movs	r2, #0
    2d64:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    2d66:	2310      	movs	r3, #16
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	0019      	movs	r1, r3
    2d6c:	2008      	movs	r0, #8
    2d6e:	4b21      	ldr	r3, [pc, #132]	; (2df4 <tm1640_set_display+0xfc>)
    2d70:	4798      	blx	r3

    tm1640_start();
    2d72:	4b21      	ldr	r3, [pc, #132]	; (2df8 <tm1640_set_display+0x100>)
    2d74:	4798      	blx	r3
    tm1640_write(ADDR_CMD_ADDR0);
    2d76:	20c0      	movs	r0, #192	; 0xc0
    2d78:	4b20      	ldr	r3, [pc, #128]	; (2dfc <tm1640_set_display+0x104>)
    2d7a:	4798      	blx	r3
    for (grids = 0; grids < length; grids++) {
    2d7c:	2317      	movs	r3, #23
    2d7e:	18fb      	adds	r3, r7, r3
    2d80:	2200      	movs	r2, #0
    2d82:	701a      	strb	r2, [r3, #0]
    2d84:	e00f      	b.n	2da6 <tm1640_set_display+0xae>
        tm1640_write(disp[grids]);
    2d86:	2317      	movs	r3, #23
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	781b      	ldrb	r3, [r3, #0]
    2d8c:	687a      	ldr	r2, [r7, #4]
    2d8e:	18d3      	adds	r3, r2, r3
    2d90:	781b      	ldrb	r3, [r3, #0]
    2d92:	0018      	movs	r0, r3
    2d94:	4b19      	ldr	r3, [pc, #100]	; (2dfc <tm1640_set_display+0x104>)
    2d96:	4798      	blx	r3
    di_conf.powersave = false;
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);

    tm1640_start();
    tm1640_write(ADDR_CMD_ADDR0);
    for (grids = 0; grids < length; grids++) {
    2d98:	2317      	movs	r3, #23
    2d9a:	18fb      	adds	r3, r7, r3
    2d9c:	781a      	ldrb	r2, [r3, #0]
    2d9e:	2317      	movs	r3, #23
    2da0:	18fb      	adds	r3, r7, r3
    2da2:	3201      	adds	r2, #1
    2da4:	701a      	strb	r2, [r3, #0]
    2da6:	2317      	movs	r3, #23
    2da8:	18fa      	adds	r2, r7, r3
    2daa:	1cfb      	adds	r3, r7, #3
    2dac:	7812      	ldrb	r2, [r2, #0]
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	429a      	cmp	r2, r3
    2db2:	d3e8      	bcc.n	2d86 <tm1640_set_display+0x8e>
        tm1640_write(disp[grids]);
    }
    tm1640_stop();                    
    2db4:	4b12      	ldr	r3, [pc, #72]	; (2e00 <tm1640_set_display+0x108>)
    2db6:	4798      	blx	r3

    // Restore pin function to the WTC6508 SPI
    system_pinmux_pin_set_config(PINMUX_PA08C_SERCOM0_PAD0 >> 16, &pin_conf);       
    2db8:	230c      	movs	r3, #12
    2dba:	18fb      	adds	r3, r7, r3
    2dbc:	0019      	movs	r1, r3
    2dbe:	2008      	movs	r0, #8
    2dc0:	4b10      	ldr	r3, [pc, #64]	; (2e04 <tm1640_set_display+0x10c>)
    2dc2:	4798      	blx	r3
    
    taskEXIT_CRITICAL();                 
    2dc4:	4b10      	ldr	r3, [pc, #64]	; (2e08 <tm1640_set_display+0x110>)
    2dc6:	4798      	blx	r3

    xSemaphoreGive(display_mutex);     
    2dc8:	4b06      	ldr	r3, [pc, #24]	; (2de4 <tm1640_set_display+0xec>)
    2dca:	6818      	ldr	r0, [r3, #0]
    2dcc:	2300      	movs	r3, #0
    2dce:	2200      	movs	r2, #0
    2dd0:	2100      	movs	r1, #0
    2dd2:	4c0e      	ldr	r4, [pc, #56]	; (2e0c <tm1640_set_display+0x114>)
    2dd4:	47a0      	blx	r4
    return status;
    2dd6:	2316      	movs	r3, #22
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	781b      	ldrb	r3, [r3, #0]
}
    2ddc:	0018      	movs	r0, r3
    2dde:	46bd      	mov	sp, r7
    2de0:	b007      	add	sp, #28
    2de2:	bd90      	pop	{r4, r7, pc}
    2de4:	200045b0 	.word	0x200045b0
    2de8:	0000d921 	.word	0x0000d921
    2dec:	0000d259 	.word	0x0000d259
    2df0:	000028a5 	.word	0x000028a5
    2df4:	00009c39 	.word	0x00009c39
    2df8:	000029a5 	.word	0x000029a5
    2dfc:	00002aed 	.word	0x00002aed
    2e00:	00002a29 	.word	0x00002a29
    2e04:	0000cbfd 	.word	0x0000cbfd
    2e08:	0000d27d 	.word	0x0000d27d
    2e0c:	0000d621 	.word	0x0000d621

00002e10 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    2e10:	b580      	push	{r7, lr}
    2e12:	b082      	sub	sp, #8
    2e14:	af00      	add	r7, sp, #0
    2e16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2e18:	687b      	ldr	r3, [r7, #4]
    2e1a:	2280      	movs	r2, #128	; 0x80
    2e1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2e1e:	687b      	ldr	r3, [r7, #4]
    2e20:	2200      	movs	r2, #0
    2e22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2e24:	687b      	ldr	r3, [r7, #4]
    2e26:	2201      	movs	r2, #1
    2e28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2e2a:	687b      	ldr	r3, [r7, #4]
    2e2c:	2200      	movs	r2, #0
    2e2e:	70da      	strb	r2, [r3, #3]
}
    2e30:	46c0      	nop			; (mov r8, r8)
    2e32:	46bd      	mov	sp, r7
    2e34:	b002      	add	sp, #8
    2e36:	bd80      	pop	{r7, pc}

00002e38 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2e38:	b580      	push	{r7, lr}
    2e3a:	b084      	sub	sp, #16
    2e3c:	af00      	add	r7, sp, #0
    2e3e:	0002      	movs	r2, r0
    2e40:	1dfb      	adds	r3, r7, #7
    2e42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2e44:	230f      	movs	r3, #15
    2e46:	18fb      	adds	r3, r7, r3
    2e48:	1dfa      	adds	r2, r7, #7
    2e4a:	7812      	ldrb	r2, [r2, #0]
    2e4c:	09d2      	lsrs	r2, r2, #7
    2e4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2e50:	230e      	movs	r3, #14
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	1dfa      	adds	r2, r7, #7
    2e56:	7812      	ldrb	r2, [r2, #0]
    2e58:	0952      	lsrs	r2, r2, #5
    2e5a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2e5c:	4b0d      	ldr	r3, [pc, #52]	; (2e94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2e5e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2e60:	230f      	movs	r3, #15
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d10f      	bne.n	2e8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2e6a:	230f      	movs	r3, #15
    2e6c:	18fb      	adds	r3, r7, r3
    2e6e:	781b      	ldrb	r3, [r3, #0]
    2e70:	009b      	lsls	r3, r3, #2
    2e72:	2210      	movs	r2, #16
    2e74:	4694      	mov	ip, r2
    2e76:	44bc      	add	ip, r7
    2e78:	4463      	add	r3, ip
    2e7a:	3b08      	subs	r3, #8
    2e7c:	681a      	ldr	r2, [r3, #0]
    2e7e:	230e      	movs	r3, #14
    2e80:	18fb      	adds	r3, r7, r3
    2e82:	781b      	ldrb	r3, [r3, #0]
    2e84:	01db      	lsls	r3, r3, #7
    2e86:	18d3      	adds	r3, r2, r3
    2e88:	e000      	b.n	2e8c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2e8a:	2300      	movs	r3, #0
	}
}
    2e8c:	0018      	movs	r0, r3
    2e8e:	46bd      	mov	sp, r7
    2e90:	b004      	add	sp, #16
    2e92:	bd80      	pop	{r7, pc}
    2e94:	41004400 	.word	0x41004400

00002e98 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b082      	sub	sp, #8
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	0002      	movs	r2, r0
    2ea0:	1dfb      	adds	r3, r7, #7
    2ea2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2ea4:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <system_interrupt_enable+0x28>)
    2ea6:	1dfa      	adds	r2, r7, #7
    2ea8:	7812      	ldrb	r2, [r2, #0]
    2eaa:	0011      	movs	r1, r2
    2eac:	221f      	movs	r2, #31
    2eae:	400a      	ands	r2, r1
    2eb0:	2101      	movs	r1, #1
    2eb2:	4091      	lsls	r1, r2
    2eb4:	000a      	movs	r2, r1
    2eb6:	601a      	str	r2, [r3, #0]
}
    2eb8:	46c0      	nop			; (mov r8, r8)
    2eba:	46bd      	mov	sp, r7
    2ebc:	b002      	add	sp, #8
    2ebe:	bd80      	pop	{r7, pc}
    2ec0:	e000e100 	.word	0xe000e100

00002ec4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2ec4:	b580      	push	{r7, lr}
    2ec6:	b082      	sub	sp, #8
    2ec8:	af00      	add	r7, sp, #0
    2eca:	0002      	movs	r2, r0
    2ecc:	1dfb      	adds	r3, r7, #7
    2ece:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2ed0:	1dfb      	adds	r3, r7, #7
    2ed2:	781b      	ldrb	r3, [r3, #0]
    2ed4:	0018      	movs	r0, r3
    2ed6:	4b03      	ldr	r3, [pc, #12]	; (2ee4 <port_get_group_from_gpio_pin+0x20>)
    2ed8:	4798      	blx	r3
    2eda:	0003      	movs	r3, r0
}
    2edc:	0018      	movs	r0, r3
    2ede:	46bd      	mov	sp, r7
    2ee0:	b002      	add	sp, #8
    2ee2:	bd80      	pop	{r7, pc}
    2ee4:	00002e39 	.word	0x00002e39

00002ee8 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    2ee8:	b580      	push	{r7, lr}
    2eea:	b084      	sub	sp, #16
    2eec:	af00      	add	r7, sp, #0
    2eee:	0002      	movs	r2, r0
    2ef0:	1dfb      	adds	r3, r7, #7
    2ef2:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2ef4:	1dfb      	adds	r3, r7, #7
    2ef6:	781b      	ldrb	r3, [r3, #0]
    2ef8:	0018      	movs	r0, r3
    2efa:	4b0b      	ldr	r3, [pc, #44]	; (2f28 <port_pin_get_input_level+0x40>)
    2efc:	4798      	blx	r3
    2efe:	0003      	movs	r3, r0
    2f00:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f02:	1dfb      	adds	r3, r7, #7
    2f04:	781b      	ldrb	r3, [r3, #0]
    2f06:	221f      	movs	r2, #31
    2f08:	4013      	ands	r3, r2
    2f0a:	2201      	movs	r2, #1
    2f0c:	409a      	lsls	r2, r3
    2f0e:	0013      	movs	r3, r2
    2f10:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    2f12:	68fb      	ldr	r3, [r7, #12]
    2f14:	6a1b      	ldr	r3, [r3, #32]
    2f16:	68ba      	ldr	r2, [r7, #8]
    2f18:	4013      	ands	r3, r2
    2f1a:	1e5a      	subs	r2, r3, #1
    2f1c:	4193      	sbcs	r3, r2
    2f1e:	b2db      	uxtb	r3, r3
}
    2f20:	0018      	movs	r0, r3
    2f22:	46bd      	mov	sp, r7
    2f24:	b004      	add	sp, #16
    2f26:	bd80      	pop	{r7, pc}
    2f28:	00002ec5 	.word	0x00002ec5

00002f2c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2f2c:	b580      	push	{r7, lr}
    2f2e:	b084      	sub	sp, #16
    2f30:	af00      	add	r7, sp, #0
    2f32:	0002      	movs	r2, r0
    2f34:	1dfb      	adds	r3, r7, #7
    2f36:	701a      	strb	r2, [r3, #0]
    2f38:	1dbb      	adds	r3, r7, #6
    2f3a:	1c0a      	adds	r2, r1, #0
    2f3c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2f3e:	1dfb      	adds	r3, r7, #7
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	0018      	movs	r0, r3
    2f44:	4b0d      	ldr	r3, [pc, #52]	; (2f7c <port_pin_set_output_level+0x50>)
    2f46:	4798      	blx	r3
    2f48:	0003      	movs	r3, r0
    2f4a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2f4c:	1dfb      	adds	r3, r7, #7
    2f4e:	781b      	ldrb	r3, [r3, #0]
    2f50:	221f      	movs	r2, #31
    2f52:	4013      	ands	r3, r2
    2f54:	2201      	movs	r2, #1
    2f56:	409a      	lsls	r2, r3
    2f58:	0013      	movs	r3, r2
    2f5a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2f5c:	1dbb      	adds	r3, r7, #6
    2f5e:	781b      	ldrb	r3, [r3, #0]
    2f60:	2b00      	cmp	r3, #0
    2f62:	d003      	beq.n	2f6c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    2f64:	68fb      	ldr	r3, [r7, #12]
    2f66:	68ba      	ldr	r2, [r7, #8]
    2f68:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2f6a:	e002      	b.n	2f72 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	68ba      	ldr	r2, [r7, #8]
    2f70:	615a      	str	r2, [r3, #20]
	}
}
    2f72:	46c0      	nop			; (mov r8, r8)
    2f74:	46bd      	mov	sp, r7
    2f76:	b004      	add	sp, #16
    2f78:	bd80      	pop	{r7, pc}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	00002ec5 	.word	0x00002ec5

00002f80 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b084      	sub	sp, #16
    2f84:	af00      	add	r7, sp, #0
    2f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	681b      	ldr	r3, [r3, #0]
    2f8c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2f8e:	68fb      	ldr	r3, [r7, #12]
    2f90:	69db      	ldr	r3, [r3, #28]
    2f92:	1e5a      	subs	r2, r3, #1
    2f94:	4193      	sbcs	r3, r2
    2f96:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2f98:	0018      	movs	r0, r3
    2f9a:	46bd      	mov	sp, r7
    2f9c:	b004      	add	sp, #16
    2f9e:	bd80      	pop	{r7, pc}

00002fa0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2fa0:	b580      	push	{r7, lr}
    2fa2:	b082      	sub	sp, #8
    2fa4:	af00      	add	r7, sp, #0
    2fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2fa8:	687b      	ldr	r3, [r7, #4]
    2faa:	2201      	movs	r2, #1
    2fac:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2fae:	687b      	ldr	r3, [r7, #4]
    2fb0:	2200      	movs	r2, #0
    2fb2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	2200      	movs	r2, #0
    2fb8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	22c0      	movs	r2, #192	; 0xc0
    2fbe:	0392      	lsls	r2, r2, #14
    2fc0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	2200      	movs	r2, #0
    2fc6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2fc8:	687b      	ldr	r3, [r7, #4]
    2fca:	2200      	movs	r2, #0
    2fcc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2fce:	687b      	ldr	r3, [r7, #4]
    2fd0:	2201      	movs	r2, #1
    2fd2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2fd4:	687b      	ldr	r3, [r7, #4]
    2fd6:	2201      	movs	r2, #1
    2fd8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2fda:	687b      	ldr	r3, [r7, #4]
    2fdc:	2200      	movs	r2, #0
    2fde:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	2224      	movs	r2, #36	; 0x24
    2fe4:	2100      	movs	r1, #0
    2fe6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2fe8:	687b      	ldr	r3, [r7, #4]
    2fea:	3318      	adds	r3, #24
    2fec:	220c      	movs	r2, #12
    2fee:	2100      	movs	r1, #0
    2ff0:	0018      	movs	r0, r3
    2ff2:	4b0a      	ldr	r3, [pc, #40]	; (301c <spi_get_config_defaults+0x7c>)
    2ff4:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    2ff6:	687b      	ldr	r3, [r7, #4]
    2ff8:	4a09      	ldr	r2, [pc, #36]	; (3020 <spi_get_config_defaults+0x80>)
    2ffa:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	2200      	movs	r2, #0
    3000:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    3002:	687b      	ldr	r3, [r7, #4]
    3004:	2200      	movs	r2, #0
    3006:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	2200      	movs	r2, #0
    300c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    300e:	687b      	ldr	r3, [r7, #4]
    3010:	2200      	movs	r2, #0
    3012:	635a      	str	r2, [r3, #52]	; 0x34

};
    3014:	46c0      	nop			; (mov r8, r8)
    3016:	46bd      	mov	sp, r7
    3018:	b002      	add	sp, #8
    301a:	bd80      	pop	{r7, pc}
    301c:	00010de7 	.word	0x00010de7
    3020:	000186a0 	.word	0x000186a0

00003024 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    3024:	b580      	push	{r7, lr}
    3026:	b084      	sub	sp, #16
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    302c:	687b      	ldr	r3, [r7, #4]
    302e:	681b      	ldr	r3, [r3, #0]
    3030:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3032:	687b      	ldr	r3, [r7, #4]
    3034:	681b      	ldr	r3, [r3, #0]
    3036:	0018      	movs	r0, r3
    3038:	4b0b      	ldr	r3, [pc, #44]	; (3068 <spi_enable+0x44>)
    303a:	4798      	blx	r3
    303c:	0003      	movs	r3, r0
    303e:	0018      	movs	r0, r3
    3040:	4b0a      	ldr	r3, [pc, #40]	; (306c <spi_enable+0x48>)
    3042:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3044:	46c0      	nop			; (mov r8, r8)
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	0018      	movs	r0, r3
    304a:	4b09      	ldr	r3, [pc, #36]	; (3070 <spi_enable+0x4c>)
    304c:	4798      	blx	r3
    304e:	1e03      	subs	r3, r0, #0
    3050:	d1f9      	bne.n	3046 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3052:	68fb      	ldr	r3, [r7, #12]
    3054:	681b      	ldr	r3, [r3, #0]
    3056:	2202      	movs	r2, #2
    3058:	431a      	orrs	r2, r3
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	601a      	str	r2, [r3, #0]
}
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	46bd      	mov	sp, r7
    3062:	b004      	add	sp, #16
    3064:	bd80      	pop	{r7, pc}
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	0000a3d5 	.word	0x0000a3d5
    306c:	00002e99 	.word	0x00002e99
    3070:	00002f81 	.word	0x00002f81

00003074 <wtc6508_init>:
#define DISPLAY_MUTEX_TIMEOUT   pdMS_TO_TICKS(5)

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
    3074:	b580      	push	{r7, lr}
    3076:	b08e      	sub	sp, #56	; 0x38
    3078:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
    307a:	003b      	movs	r3, r7
    307c:	0018      	movs	r0, r3
    307e:	4b1c      	ldr	r3, [pc, #112]	; (30f0 <wtc6508_init+0x7c>)
    3080:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
    3082:	003b      	movs	r3, r7
    3084:	4a1b      	ldr	r2, [pc, #108]	; (30f4 <wtc6508_init+0x80>)
    3086:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
    3088:	003b      	movs	r3, r7
    308a:	4a1b      	ldr	r2, [pc, #108]	; (30f8 <wtc6508_init+0x84>)
    308c:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
    308e:	003b      	movs	r3, r7
    3090:	2201      	movs	r2, #1
    3092:	4252      	negs	r2, r2
    3094:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
    3096:	003b      	movs	r3, r7
    3098:	2201      	movs	r2, #1
    309a:	4252      	negs	r2, r2
    309c:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    309e:	003b      	movs	r3, r7
    30a0:	2280      	movs	r2, #128	; 0x80
    30a2:	0292      	lsls	r2, r2, #10
    30a4:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
    30a6:	003b      	movs	r3, r7
    30a8:	2200      	movs	r2, #0
    30aa:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
    30ac:	003b      	movs	r3, r7
    30ae:	4a13      	ldr	r2, [pc, #76]	; (30fc <wtc6508_init+0x88>)
    30b0:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
    30b2:	003b      	movs	r3, r7
    30b4:	22c0      	movs	r2, #192	; 0xc0
    30b6:	0592      	lsls	r2, r2, #22
    30b8:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
    30ba:	003b      	movs	r3, r7
    30bc:	2224      	movs	r2, #36	; 0x24
    30be:	2104      	movs	r1, #4
    30c0:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
    30c2:	003b      	movs	r3, r7
    30c4:	2200      	movs	r2, #0
    30c6:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
    30c8:	003a      	movs	r2, r7
    30ca:	490d      	ldr	r1, [pc, #52]	; (3100 <wtc6508_init+0x8c>)
    30cc:	4b0d      	ldr	r3, [pc, #52]	; (3104 <wtc6508_init+0x90>)
    30ce:	0018      	movs	r0, r3
    30d0:	4b0d      	ldr	r3, [pc, #52]	; (3108 <wtc6508_init+0x94>)
    30d2:	4798      	blx	r3
    30d4:	1e03      	subs	r3, r0, #0
    30d6:	d004      	beq.n	30e2 <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
    30d8:	4b0c      	ldr	r3, [pc, #48]	; (310c <wtc6508_init+0x98>)
    30da:	0018      	movs	r0, r3
    30dc:	4b0c      	ldr	r3, [pc, #48]	; (3110 <wtc6508_init+0x9c>)
    30de:	4798      	blx	r3
    30e0:	e003      	b.n	30ea <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
    30e2:	4b08      	ldr	r3, [pc, #32]	; (3104 <wtc6508_init+0x90>)
    30e4:	0018      	movs	r0, r3
    30e6:	4b0b      	ldr	r3, [pc, #44]	; (3114 <wtc6508_init+0xa0>)
    30e8:	4798      	blx	r3
}
    30ea:	46bd      	mov	sp, r7
    30ec:	b00e      	add	sp, #56	; 0x38
    30ee:	bd80      	pop	{r7, pc}
    30f0:	00002fa1 	.word	0x00002fa1
    30f4:	00080002 	.word	0x00080002
    30f8:	00090002 	.word	0x00090002
    30fc:	00003a98 	.word	0x00003a98
    3100:	42000800 	.word	0x42000800
    3104:	200045c8 	.word	0x200045c8
    3108:	0000a975 	.word	0x0000a975
    310c:	00012c90 	.word	0x00012c90
    3110:	000115f9 	.word	0x000115f9
    3114:	00003025 	.word	0x00003025

00003118 <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
    3118:	b5f0      	push	{r4, r5, r6, r7, lr}
    311a:	464f      	mov	r7, r9
    311c:	4646      	mov	r6, r8
    311e:	b4c0      	push	{r6, r7}
    3120:	b089      	sub	sp, #36	; 0x24
    3122:	af00      	add	r7, sp, #0
    3124:	60f8      	str	r0, [r7, #12]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
    3126:	2310      	movs	r3, #16
    3128:	2208      	movs	r2, #8
    312a:	4694      	mov	ip, r2
    312c:	44bc      	add	ip, r7
    312e:	4463      	add	r3, ip
    3130:	2201      	movs	r2, #1
    3132:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
    3134:	2310      	movs	r3, #16
    3136:	2208      	movs	r2, #8
    3138:	4694      	mov	ip, r2
    313a:	44bc      	add	ip, r7
    313c:	4463      	add	r3, ip
    313e:	2201      	movs	r2, #1
    3140:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
    3142:	2310      	movs	r3, #16
    3144:	2208      	movs	r2, #8
    3146:	4694      	mov	ip, r2
    3148:	44bc      	add	ip, r7
    314a:	4463      	add	r3, ip
    314c:	2200      	movs	r2, #0
    314e:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
    3150:	2314      	movs	r3, #20
    3152:	2208      	movs	r2, #8
    3154:	4694      	mov	ip, r2
    3156:	44bc      	add	ip, r7
    3158:	4463      	add	r3, ip
    315a:	2200      	movs	r2, #0
    315c:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    315e:	2314      	movs	r3, #20
    3160:	2208      	movs	r2, #8
    3162:	4694      	mov	ip, r2
    3164:	44bc      	add	ip, r7
    3166:	4463      	add	r3, ip
    3168:	2201      	movs	r2, #1
    316a:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    316c:	2314      	movs	r3, #20
    316e:	2208      	movs	r2, #8
    3170:	4694      	mov	ip, r2
    3172:	44bc      	add	ip, r7
    3174:	4463      	add	r3, ip
    3176:	2200      	movs	r2, #0
    3178:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
    317a:	230c      	movs	r3, #12
    317c:	2208      	movs	r2, #8
    317e:	4694      	mov	ip, r2
    3180:	44bc      	add	ip, r7
    3182:	4463      	add	r3, ip
    3184:	0018      	movs	r0, r3
    3186:	4b80      	ldr	r3, [pc, #512]	; (3388 <wtc6508_read+0x270>)
    3188:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    318a:	230c      	movs	r3, #12
    318c:	2208      	movs	r2, #8
    318e:	4694      	mov	ip, r2
    3190:	44bc      	add	ip, r7
    3192:	4463      	add	r3, ip
    3194:	2200      	movs	r2, #0
    3196:	705a      	strb	r2, [r3, #1]

    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    3198:	4b7c      	ldr	r3, [pc, #496]	; (338c <wtc6508_read+0x274>)
    319a:	6818      	ldr	r0, [r3, #0]
    319c:	2301      	movs	r3, #1
    319e:	425a      	negs	r2, r3
    31a0:	2300      	movs	r3, #0
    31a2:	2100      	movs	r1, #0
    31a4:	4c7a      	ldr	r4, [pc, #488]	; (3390 <wtc6508_read+0x278>)
    31a6:	47a0      	blx	r4
    31a8:	1e03      	subs	r3, r0, #0
    31aa:	d101      	bne.n	31b0 <wtc6508_read+0x98>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    31ac:	2312      	movs	r3, #18
    31ae:	e0e3      	b.n	3378 <wtc6508_read+0x260>
    }

    taskENTER_CRITICAL();
    31b0:	4b78      	ldr	r3, [pc, #480]	; (3394 <wtc6508_read+0x27c>)
    31b2:	4798      	blx	r3

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    //vTaskSuspendAll();

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    31b4:	2310      	movs	r3, #16
    31b6:	2208      	movs	r2, #8
    31b8:	4694      	mov	ip, r2
    31ba:	44bc      	add	ip, r7
    31bc:	4463      	add	r3, ip
    31be:	0019      	movs	r1, r3
    31c0:	2009      	movs	r0, #9
    31c2:	4b75      	ldr	r3, [pc, #468]	; (3398 <wtc6508_read+0x280>)
    31c4:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    31c6:	2314      	movs	r3, #20
    31c8:	2208      	movs	r2, #8
    31ca:	4694      	mov	ip, r2
    31cc:	44bc      	add	ip, r7
    31ce:	4463      	add	r3, ip
    31d0:	0019      	movs	r1, r3
    31d2:	2008      	movs	r0, #8
    31d4:	4b70      	ldr	r3, [pc, #448]	; (3398 <wtc6508_read+0x280>)
    31d6:	4798      	blx	r3

    // If the DI pin is already low, then the bus is still busy from the last TM1640 transaction.
    // Skip the read.
    if (!port_pin_get_input_level(WTC6508_DI_GPIO)) {
    31d8:	2008      	movs	r0, #8
    31da:	4b70      	ldr	r3, [pc, #448]	; (339c <wtc6508_read+0x284>)
    31dc:	4798      	blx	r3
    31de:	0003      	movs	r3, r0
    31e0:	001a      	movs	r2, r3
    31e2:	2301      	movs	r3, #1
    31e4:	4053      	eors	r3, r2
    31e6:	b2db      	uxtb	r3, r3
    31e8:	2b00      	cmp	r3, #0
    31ea:	d00a      	beq.n	3202 <wtc6508_read+0xea>
        xSemaphoreGive(display_mutex);
    31ec:	4b67      	ldr	r3, [pc, #412]	; (338c <wtc6508_read+0x274>)
    31ee:	6818      	ldr	r0, [r3, #0]
    31f0:	2300      	movs	r3, #0
    31f2:	2200      	movs	r2, #0
    31f4:	2100      	movs	r1, #0
    31f6:	4c6a      	ldr	r4, [pc, #424]	; (33a0 <wtc6508_read+0x288>)
    31f8:	47a0      	blx	r4
        taskEXIT_CRITICAL();
    31fa:	4b6a      	ldr	r3, [pc, #424]	; (33a4 <wtc6508_read+0x28c>)
    31fc:	4798      	blx	r3
        return STATUS_BUSY;
    31fe:	2305      	movs	r3, #5
    3200:	e0ba      	b.n	3378 <wtc6508_read+0x260>
    }

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
    3202:	2100      	movs	r1, #0
    3204:	2009      	movs	r0, #9
    3206:	4b68      	ldr	r3, [pc, #416]	; (33a8 <wtc6508_read+0x290>)
    3208:	4798      	blx	r3
    delay_us(3);
    320a:	2000      	movs	r0, #0
    320c:	4b67      	ldr	r3, [pc, #412]	; (33ac <wtc6508_read+0x294>)
    320e:	4798      	blx	r3
    3210:	0003      	movs	r3, r0
    3212:	603b      	str	r3, [r7, #0]
    3214:	2300      	movs	r3, #0
    3216:	607b      	str	r3, [r7, #4]
    3218:	6839      	ldr	r1, [r7, #0]
    321a:	687a      	ldr	r2, [r7, #4]
    321c:	000b      	movs	r3, r1
    321e:	0014      	movs	r4, r2
    3220:	18db      	adds	r3, r3, r3
    3222:	4164      	adcs	r4, r4
    3224:	185b      	adds	r3, r3, r1
    3226:	4154      	adcs	r4, r2
    3228:	4961      	ldr	r1, [pc, #388]	; (33b0 <wtc6508_read+0x298>)
    322a:	2200      	movs	r2, #0
    322c:	185b      	adds	r3, r3, r1
    322e:	4154      	adcs	r4, r2
    3230:	0018      	movs	r0, r3
    3232:	0021      	movs	r1, r4
    3234:	4c5f      	ldr	r4, [pc, #380]	; (33b4 <wtc6508_read+0x29c>)
    3236:	4a60      	ldr	r2, [pc, #384]	; (33b8 <wtc6508_read+0x2a0>)
    3238:	2300      	movs	r3, #0
    323a:	47a0      	blx	r4
    323c:	0003      	movs	r3, r0
    323e:	000c      	movs	r4, r1
    3240:	0018      	movs	r0, r3
    3242:	4b5e      	ldr	r3, [pc, #376]	; (33bc <wtc6508_read+0x2a4>)
    3244:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);        
    3246:	2101      	movs	r1, #1
    3248:	2009      	movs	r0, #9
    324a:	4b57      	ldr	r3, [pc, #348]	; (33a8 <wtc6508_read+0x290>)
    324c:	4798      	blx	r3

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    324e:	230c      	movs	r3, #12
    3250:	2208      	movs	r2, #8
    3252:	4694      	mov	ip, r2
    3254:	44bc      	add	ip, r7
    3256:	4463      	add	r3, ip
    3258:	2202      	movs	r2, #2
    325a:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    325c:	230c      	movs	r3, #12
    325e:	2208      	movs	r2, #8
    3260:	4694      	mov	ip, r2
    3262:	44bc      	add	ip, r7
    3264:	4463      	add	r3, ip
    3266:	0019      	movs	r1, r3
    3268:	2008      	movs	r0, #8
    326a:	4b55      	ldr	r3, [pc, #340]	; (33c0 <wtc6508_read+0x2a8>)
    326c:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    326e:	230c      	movs	r3, #12
    3270:	2208      	movs	r2, #8
    3272:	4694      	mov	ip, r2
    3274:	44bc      	add	ip, r7
    3276:	4463      	add	r3, ip
    3278:	2202      	movs	r2, #2
    327a:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
    327c:	230c      	movs	r3, #12
    327e:	2208      	movs	r2, #8
    3280:	4694      	mov	ip, r2
    3282:	44bc      	add	ip, r7
    3284:	4463      	add	r3, ip
    3286:	0019      	movs	r1, r3
    3288:	2009      	movs	r0, #9
    328a:	4b4d      	ldr	r3, [pc, #308]	; (33c0 <wtc6508_read+0x2a8>)
    328c:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
    328e:	2317      	movs	r3, #23
    3290:	4699      	mov	r9, r3
    3292:	2308      	movs	r3, #8
    3294:	469c      	mov	ip, r3
    3296:	44bc      	add	ip, r7
    3298:	44e1      	add	r9, ip
    329a:	68f9      	ldr	r1, [r7, #12]
    329c:	4849      	ldr	r0, [pc, #292]	; (33c4 <wtc6508_read+0x2ac>)
    329e:	2300      	movs	r3, #0
    32a0:	2201      	movs	r2, #1
    32a2:	4c49      	ldr	r4, [pc, #292]	; (33c8 <wtc6508_read+0x2b0>)
    32a4:	46a0      	mov	r8, r4
    32a6:	47c0      	blx	r8
    32a8:	0003      	movs	r3, r0
    32aa:	464a      	mov	r2, r9
    32ac:	7013      	strb	r3, [r2, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    32ae:	2310      	movs	r3, #16
    32b0:	2208      	movs	r2, #8
    32b2:	4694      	mov	ip, r2
    32b4:	44bc      	add	ip, r7
    32b6:	4463      	add	r3, ip
    32b8:	0019      	movs	r1, r3
    32ba:	2009      	movs	r0, #9
    32bc:	4b36      	ldr	r3, [pc, #216]	; (3398 <wtc6508_read+0x280>)
    32be:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    32c0:	2314      	movs	r3, #20
    32c2:	2208      	movs	r2, #8
    32c4:	4694      	mov	ip, r2
    32c6:	44bc      	add	ip, r7
    32c8:	4463      	add	r3, ip
    32ca:	0019      	movs	r1, r3
    32cc:	2008      	movs	r0, #8
    32ce:	4b32      	ldr	r3, [pc, #200]	; (3398 <wtc6508_read+0x280>)
    32d0:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
    32d2:	2100      	movs	r1, #0
    32d4:	2009      	movs	r0, #9
    32d6:	4b34      	ldr	r3, [pc, #208]	; (33a8 <wtc6508_read+0x290>)
    32d8:	4798      	blx	r3
    delay_us(3);
    32da:	2000      	movs	r0, #0
    32dc:	4b33      	ldr	r3, [pc, #204]	; (33ac <wtc6508_read+0x294>)
    32de:	4798      	blx	r3
    32e0:	0003      	movs	r3, r0
    32e2:	001d      	movs	r5, r3
    32e4:	2300      	movs	r3, #0
    32e6:	001e      	movs	r6, r3
    32e8:	002b      	movs	r3, r5
    32ea:	0034      	movs	r4, r6
    32ec:	18db      	adds	r3, r3, r3
    32ee:	4164      	adcs	r4, r4
    32f0:	195b      	adds	r3, r3, r5
    32f2:	4174      	adcs	r4, r6
    32f4:	492e      	ldr	r1, [pc, #184]	; (33b0 <wtc6508_read+0x298>)
    32f6:	2200      	movs	r2, #0
    32f8:	185b      	adds	r3, r3, r1
    32fa:	4154      	adcs	r4, r2
    32fc:	0018      	movs	r0, r3
    32fe:	0021      	movs	r1, r4
    3300:	4c2c      	ldr	r4, [pc, #176]	; (33b4 <wtc6508_read+0x29c>)
    3302:	4a2d      	ldr	r2, [pc, #180]	; (33b8 <wtc6508_read+0x2a0>)
    3304:	2300      	movs	r3, #0
    3306:	47a0      	blx	r4
    3308:	0003      	movs	r3, r0
    330a:	000c      	movs	r4, r1
    330c:	0018      	movs	r0, r3
    330e:	4b2b      	ldr	r3, [pc, #172]	; (33bc <wtc6508_read+0x2a4>)
    3310:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
    3312:	2101      	movs	r1, #1
    3314:	2009      	movs	r0, #9
    3316:	4b24      	ldr	r3, [pc, #144]	; (33a8 <wtc6508_read+0x290>)
    3318:	4798      	blx	r3

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    331a:	230c      	movs	r3, #12
    331c:	2208      	movs	r2, #8
    331e:	4694      	mov	ip, r2
    3320:	44bc      	add	ip, r7
    3322:	4463      	add	r3, ip
    3324:	2202      	movs	r2, #2
    3326:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    3328:	230c      	movs	r3, #12
    332a:	2208      	movs	r2, #8
    332c:	4694      	mov	ip, r2
    332e:	44bc      	add	ip, r7
    3330:	4463      	add	r3, ip
    3332:	0019      	movs	r1, r3
    3334:	2008      	movs	r0, #8
    3336:	4b22      	ldr	r3, [pc, #136]	; (33c0 <wtc6508_read+0x2a8>)
    3338:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    333a:	230c      	movs	r3, #12
    333c:	2208      	movs	r2, #8
    333e:	4694      	mov	ip, r2
    3340:	44bc      	add	ip, r7
    3342:	4463      	add	r3, ip
    3344:	2202      	movs	r2, #2
    3346:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);        
    3348:	230c      	movs	r3, #12
    334a:	2208      	movs	r2, #8
    334c:	4694      	mov	ip, r2
    334e:	44bc      	add	ip, r7
    3350:	4463      	add	r3, ip
    3352:	0019      	movs	r1, r3
    3354:	2009      	movs	r0, #9
    3356:	4b1a      	ldr	r3, [pc, #104]	; (33c0 <wtc6508_read+0x2a8>)
    3358:	4798      	blx	r3

    //xTaskResumeAll();

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
    335a:	4b0c      	ldr	r3, [pc, #48]	; (338c <wtc6508_read+0x274>)
    335c:	6818      	ldr	r0, [r3, #0]
    335e:	2300      	movs	r3, #0
    3360:	2200      	movs	r2, #0
    3362:	2100      	movs	r1, #0
    3364:	4c0e      	ldr	r4, [pc, #56]	; (33a0 <wtc6508_read+0x288>)
    3366:	47a0      	blx	r4
    taskEXIT_CRITICAL();
    3368:	4b0e      	ldr	r3, [pc, #56]	; (33a4 <wtc6508_read+0x28c>)
    336a:	4798      	blx	r3

    return ret;
    336c:	2317      	movs	r3, #23
    336e:	2208      	movs	r2, #8
    3370:	4694      	mov	ip, r2
    3372:	44bc      	add	ip, r7
    3374:	4463      	add	r3, ip
    3376:	781b      	ldrb	r3, [r3, #0]
}
    3378:	0018      	movs	r0, r3
    337a:	46bd      	mov	sp, r7
    337c:	b009      	add	sp, #36	; 0x24
    337e:	bc0c      	pop	{r2, r3}
    3380:	4690      	mov	r8, r2
    3382:	4699      	mov	r9, r3
    3384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	00002e11 	.word	0x00002e11
    338c:	200045b0 	.word	0x200045b0
    3390:	0000d921 	.word	0x0000d921
    3394:	0000d259 	.word	0x0000d259
    3398:	00009c39 	.word	0x00009c39
    339c:	00002ee9 	.word	0x00002ee9
    33a0:	0000d621 	.word	0x0000d621
    33a4:	0000d27d 	.word	0x0000d27d
    33a8:	00002f2d 	.word	0x00002f2d
    33ac:	0000c839 	.word	0x0000c839
    33b0:	006acfbf 	.word	0x006acfbf
    33b4:	00010a89 	.word	0x00010a89
    33b8:	006acfc0 	.word	0x006acfc0
    33bc:	20000001 	.word	0x20000001
    33c0:	0000cbfd 	.word	0x0000cbfd
    33c4:	200045c8 	.word	0x200045c8
    33c8:	0000ab05 	.word	0x0000ab05

000033cc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    33cc:	b580      	push	{r7, lr}
    33ce:	b084      	sub	sp, #16
    33d0:	af00      	add	r7, sp, #0
    33d2:	0002      	movs	r2, r0
    33d4:	1dfb      	adds	r3, r7, #7
    33d6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    33d8:	230f      	movs	r3, #15
    33da:	18fb      	adds	r3, r7, r3
    33dc:	1dfa      	adds	r2, r7, #7
    33de:	7812      	ldrb	r2, [r2, #0]
    33e0:	09d2      	lsrs	r2, r2, #7
    33e2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    33e4:	230e      	movs	r3, #14
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	1dfa      	adds	r2, r7, #7
    33ea:	7812      	ldrb	r2, [r2, #0]
    33ec:	0952      	lsrs	r2, r2, #5
    33ee:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    33f0:	4b0d      	ldr	r3, [pc, #52]	; (3428 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    33f2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    33f4:	230f      	movs	r3, #15
    33f6:	18fb      	adds	r3, r7, r3
    33f8:	781b      	ldrb	r3, [r3, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d10f      	bne.n	341e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    33fe:	230f      	movs	r3, #15
    3400:	18fb      	adds	r3, r7, r3
    3402:	781b      	ldrb	r3, [r3, #0]
    3404:	009b      	lsls	r3, r3, #2
    3406:	2210      	movs	r2, #16
    3408:	4694      	mov	ip, r2
    340a:	44bc      	add	ip, r7
    340c:	4463      	add	r3, ip
    340e:	3b08      	subs	r3, #8
    3410:	681a      	ldr	r2, [r3, #0]
    3412:	230e      	movs	r3, #14
    3414:	18fb      	adds	r3, r7, r3
    3416:	781b      	ldrb	r3, [r3, #0]
    3418:	01db      	lsls	r3, r3, #7
    341a:	18d3      	adds	r3, r2, r3
    341c:	e000      	b.n	3420 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    341e:	2300      	movs	r3, #0
	}
}
    3420:	0018      	movs	r0, r3
    3422:	46bd      	mov	sp, r7
    3424:	b004      	add	sp, #16
    3426:	bd80      	pop	{r7, pc}
    3428:	41004400 	.word	0x41004400

0000342c <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    342c:	b580      	push	{r7, lr}
    342e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <system_interrupt_enable_global+0x18>)
    3432:	2201      	movs	r2, #1
    3434:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    3436:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    343a:	b662      	cpsie	i
}
    343c:	46c0      	nop			; (mov r8, r8)
    343e:	46bd      	mov	sp, r7
    3440:	bd80      	pop	{r7, pc}
    3442:	46c0      	nop			; (mov r8, r8)
    3444:	2000002c 	.word	0x2000002c

00003448 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3448:	b580      	push	{r7, lr}
    344a:	b082      	sub	sp, #8
    344c:	af00      	add	r7, sp, #0
    344e:	0002      	movs	r2, r0
    3450:	1dfb      	adds	r3, r7, #7
    3452:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3454:	1dfb      	adds	r3, r7, #7
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	0018      	movs	r0, r3
    345a:	4b03      	ldr	r3, [pc, #12]	; (3468 <port_get_group_from_gpio_pin+0x20>)
    345c:	4798      	blx	r3
    345e:	0003      	movs	r3, r0
}
    3460:	0018      	movs	r0, r3
    3462:	46bd      	mov	sp, r7
    3464:	b002      	add	sp, #8
    3466:	bd80      	pop	{r7, pc}
    3468:	000033cd 	.word	0x000033cd

0000346c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    346c:	b580      	push	{r7, lr}
    346e:	b082      	sub	sp, #8
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3474:	687b      	ldr	r3, [r7, #4]
    3476:	2200      	movs	r2, #0
    3478:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	2201      	movs	r2, #1
    347e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3480:	687b      	ldr	r3, [r7, #4]
    3482:	2200      	movs	r2, #0
    3484:	709a      	strb	r2, [r3, #2]
}
    3486:	46c0      	nop			; (mov r8, r8)
    3488:	46bd      	mov	sp, r7
    348a:	b002      	add	sp, #8
    348c:	bd80      	pop	{r7, pc}
    348e:	46c0      	nop			; (mov r8, r8)

00003490 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    3490:	b580      	push	{r7, lr}
    3492:	b084      	sub	sp, #16
    3494:	af00      	add	r7, sp, #0
    3496:	0002      	movs	r2, r0
    3498:	1dfb      	adds	r3, r7, #7
    349a:	701a      	strb	r2, [r3, #0]
    349c:	1dbb      	adds	r3, r7, #6
    349e:	1c0a      	adds	r2, r1, #0
    34a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    34a2:	1dfb      	adds	r3, r7, #7
    34a4:	781b      	ldrb	r3, [r3, #0]
    34a6:	0018      	movs	r0, r3
    34a8:	4b0d      	ldr	r3, [pc, #52]	; (34e0 <port_pin_set_output_level+0x50>)
    34aa:	4798      	blx	r3
    34ac:	0003      	movs	r3, r0
    34ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    34b0:	1dfb      	adds	r3, r7, #7
    34b2:	781b      	ldrb	r3, [r3, #0]
    34b4:	221f      	movs	r2, #31
    34b6:	4013      	ands	r3, r2
    34b8:	2201      	movs	r2, #1
    34ba:	409a      	lsls	r2, r3
    34bc:	0013      	movs	r3, r2
    34be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    34c0:	1dbb      	adds	r3, r7, #6
    34c2:	781b      	ldrb	r3, [r3, #0]
    34c4:	2b00      	cmp	r3, #0
    34c6:	d003      	beq.n	34d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    34c8:	68fb      	ldr	r3, [r7, #12]
    34ca:	68ba      	ldr	r2, [r7, #8]
    34cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    34ce:	e002      	b.n	34d6 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    34d0:	68fb      	ldr	r3, [r7, #12]
    34d2:	68ba      	ldr	r2, [r7, #8]
    34d4:	615a      	str	r2, [r3, #20]
	}
}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	46bd      	mov	sp, r7
    34da:	b004      	add	sp, #16
    34dc:	bd80      	pop	{r7, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	00003449 	.word	0x00003449

000034e4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <chip_isr+0x18>)
    34ea:	681b      	ldr	r3, [r3, #0]
    34ec:	2b00      	cmp	r3, #0
    34ee:	d002      	beq.n	34f6 <chip_isr+0x12>
		gpfIsr();
    34f0:	4b02      	ldr	r3, [pc, #8]	; (34fc <chip_isr+0x18>)
    34f2:	681b      	ldr	r3, [r3, #0]
    34f4:	4798      	blx	r3
	}
}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	46bd      	mov	sp, r7
    34fa:	bd80      	pop	{r7, pc}
    34fc:	200000cc 	.word	0x200000cc

00003500 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    3500:	b580      	push	{r7, lr}
    3502:	b082      	sub	sp, #8
    3504:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    3506:	1d3b      	adds	r3, r7, #4
    3508:	0018      	movs	r0, r3
    350a:	4b0c      	ldr	r3, [pc, #48]	; (353c <init_chip_pins+0x3c>)
    350c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    350e:	1d3b      	adds	r3, r7, #4
    3510:	2201      	movs	r2, #1
    3512:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    3514:	1d3b      	adds	r3, r7, #4
    3516:	0019      	movs	r1, r3
    3518:	201b      	movs	r0, #27
    351a:	4b09      	ldr	r3, [pc, #36]	; (3540 <init_chip_pins+0x40>)
    351c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    351e:	1d3b      	adds	r3, r7, #4
    3520:	0019      	movs	r1, r3
    3522:	201c      	movs	r0, #28
    3524:	4b06      	ldr	r3, [pc, #24]	; (3540 <init_chip_pins+0x40>)
    3526:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    3528:	1d3b      	adds	r3, r7, #4
    352a:	0019      	movs	r1, r3
    352c:	2028      	movs	r0, #40	; 0x28
    352e:	4b04      	ldr	r3, [pc, #16]	; (3540 <init_chip_pins+0x40>)
    3530:	4798      	blx	r3
}
    3532:	46c0      	nop			; (mov r8, r8)
    3534:	46bd      	mov	sp, r7
    3536:	b002      	add	sp, #8
    3538:	bd80      	pop	{r7, pc}
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	0000346d 	.word	0x0000346d
    3540:	00009c39 	.word	0x00009c39

00003544 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    3544:	b580      	push	{r7, lr}
    3546:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    3548:	4b0c      	ldr	r3, [pc, #48]	; (357c <nm_bsp_init+0x38>)
    354a:	2200      	movs	r2, #0
    354c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    354e:	4b0c      	ldr	r3, [pc, #48]	; (3580 <nm_bsp_init+0x3c>)
    3550:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    3552:	4b0c      	ldr	r3, [pc, #48]	; (3584 <nm_bsp_init+0x40>)
    3554:	681b      	ldr	r3, [r3, #0]
    3556:	2201      	movs	r2, #1
    3558:	4013      	ands	r3, r2
    355a:	d004      	beq.n	3566 <nm_bsp_init+0x22>
    355c:	4b09      	ldr	r3, [pc, #36]	; (3584 <nm_bsp_init+0x40>)
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	2202      	movs	r2, #2
    3562:	4013      	ands	r3, r2
    3564:	d101      	bne.n	356a <nm_bsp_init+0x26>
	    delay_init();
    3566:	4b08      	ldr	r3, [pc, #32]	; (3588 <nm_bsp_init+0x44>)
    3568:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    356a:	4b08      	ldr	r3, [pc, #32]	; (358c <nm_bsp_init+0x48>)
    356c:	4798      	blx	r3

	system_interrupt_enable_global();
    356e:	4b08      	ldr	r3, [pc, #32]	; (3590 <nm_bsp_init+0x4c>)
    3570:	4798      	blx	r3

	return M2M_SUCCESS;
    3572:	2300      	movs	r3, #0
}
    3574:	0018      	movs	r0, r3
    3576:	46bd      	mov	sp, r7
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	200000cc 	.word	0x200000cc
    3580:	00003501 	.word	0x00003501
    3584:	e000e010 	.word	0xe000e010
    3588:	00000115 	.word	0x00000115
    358c:	00003595 	.word	0x00003595
    3590:	0000342d 	.word	0x0000342d

00003594 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    3594:	b580      	push	{r7, lr}
    3596:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    3598:	2100      	movs	r1, #0
    359a:	201c      	movs	r0, #28
    359c:	4b0c      	ldr	r3, [pc, #48]	; (35d0 <nm_bsp_reset+0x3c>)
    359e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    35a0:	2100      	movs	r1, #0
    35a2:	201b      	movs	r0, #27
    35a4:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <nm_bsp_reset+0x3c>)
    35a6:	4798      	blx	r3
	nm_bsp_sleep(100);
    35a8:	2064      	movs	r0, #100	; 0x64
    35aa:	4b0a      	ldr	r3, [pc, #40]	; (35d4 <nm_bsp_reset+0x40>)
    35ac:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    35ae:	2101      	movs	r1, #1
    35b0:	201c      	movs	r0, #28
    35b2:	4b07      	ldr	r3, [pc, #28]	; (35d0 <nm_bsp_reset+0x3c>)
    35b4:	4798      	blx	r3
	nm_bsp_sleep(10);
    35b6:	200a      	movs	r0, #10
    35b8:	4b06      	ldr	r3, [pc, #24]	; (35d4 <nm_bsp_reset+0x40>)
    35ba:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    35bc:	2101      	movs	r1, #1
    35be:	201b      	movs	r0, #27
    35c0:	4b03      	ldr	r3, [pc, #12]	; (35d0 <nm_bsp_reset+0x3c>)
    35c2:	4798      	blx	r3
	nm_bsp_sleep(10);
    35c4:	200a      	movs	r0, #10
    35c6:	4b03      	ldr	r3, [pc, #12]	; (35d4 <nm_bsp_reset+0x40>)
    35c8:	4798      	blx	r3
}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	46bd      	mov	sp, r7
    35ce:	bd80      	pop	{r7, pc}
    35d0:	00003491 	.word	0x00003491
    35d4:	000035d9 	.word	0x000035d9

000035d8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    35d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35da:	b083      	sub	sp, #12
    35dc:	af00      	add	r7, sp, #0
    35de:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    35e0:	e015      	b.n	360e <nm_bsp_sleep+0x36>
		delay_ms(1);
    35e2:	2000      	movs	r0, #0
    35e4:	4b0e      	ldr	r3, [pc, #56]	; (3620 <nm_bsp_sleep+0x48>)
    35e6:	4798      	blx	r3
    35e8:	0003      	movs	r3, r0
    35ea:	001d      	movs	r5, r3
    35ec:	2300      	movs	r3, #0
    35ee:	001e      	movs	r6, r3
    35f0:	4b0c      	ldr	r3, [pc, #48]	; (3624 <nm_bsp_sleep+0x4c>)
    35f2:	2400      	movs	r4, #0
    35f4:	195b      	adds	r3, r3, r5
    35f6:	4174      	adcs	r4, r6
    35f8:	0018      	movs	r0, r3
    35fa:	0021      	movs	r1, r4
    35fc:	4c0a      	ldr	r4, [pc, #40]	; (3628 <nm_bsp_sleep+0x50>)
    35fe:	4a0b      	ldr	r2, [pc, #44]	; (362c <nm_bsp_sleep+0x54>)
    3600:	2300      	movs	r3, #0
    3602:	47a0      	blx	r4
    3604:	0003      	movs	r3, r0
    3606:	000c      	movs	r4, r1
    3608:	0018      	movs	r0, r3
    360a:	4b09      	ldr	r3, [pc, #36]	; (3630 <nm_bsp_sleep+0x58>)
    360c:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    360e:	687b      	ldr	r3, [r7, #4]
    3610:	1e5a      	subs	r2, r3, #1
    3612:	607a      	str	r2, [r7, #4]
    3614:	2b00      	cmp	r3, #0
    3616:	d1e4      	bne.n	35e2 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    3618:	46c0      	nop			; (mov r8, r8)
    361a:	46bd      	mov	sp, r7
    361c:	b003      	add	sp, #12
    361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3620:	0000c839 	.word	0x0000c839
    3624:	00001b57 	.word	0x00001b57
    3628:	00010a89 	.word	0x00010a89
    362c:	00001b58 	.word	0x00001b58
    3630:	20000001 	.word	0x20000001

00003634 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    3634:	b580      	push	{r7, lr}
    3636:	b086      	sub	sp, #24
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    363c:	4b15      	ldr	r3, [pc, #84]	; (3694 <nm_bsp_register_isr+0x60>)
    363e:	687a      	ldr	r2, [r7, #4]
    3640:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    3642:	230c      	movs	r3, #12
    3644:	18fb      	adds	r3, r7, r3
    3646:	0018      	movs	r0, r3
    3648:	4b13      	ldr	r3, [pc, #76]	; (3698 <nm_bsp_register_isr+0x64>)
    364a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    364c:	230c      	movs	r3, #12
    364e:	18fb      	adds	r3, r7, r3
    3650:	2229      	movs	r2, #41	; 0x29
    3652:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    3654:	230c      	movs	r3, #12
    3656:	18fb      	adds	r3, r7, r3
    3658:	2200      	movs	r2, #0
    365a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    365c:	230c      	movs	r3, #12
    365e:	18fb      	adds	r3, r7, r3
    3660:	2201      	movs	r2, #1
    3662:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    3664:	230c      	movs	r3, #12
    3666:	18fb      	adds	r3, r7, r3
    3668:	2202      	movs	r2, #2
    366a:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    366c:	230c      	movs	r3, #12
    366e:	18fb      	adds	r3, r7, r3
    3670:	0019      	movs	r1, r3
    3672:	2009      	movs	r0, #9
    3674:	4b09      	ldr	r3, [pc, #36]	; (369c <nm_bsp_register_isr+0x68>)
    3676:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    3678:	4b09      	ldr	r3, [pc, #36]	; (36a0 <nm_bsp_register_isr+0x6c>)
    367a:	2200      	movs	r2, #0
    367c:	2109      	movs	r1, #9
    367e:	0018      	movs	r0, r3
    3680:	4b08      	ldr	r3, [pc, #32]	; (36a4 <nm_bsp_register_isr+0x70>)
    3682:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    3684:	2100      	movs	r1, #0
    3686:	2009      	movs	r0, #9
    3688:	4b07      	ldr	r3, [pc, #28]	; (36a8 <nm_bsp_register_isr+0x74>)
    368a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    368c:	46c0      	nop			; (mov r8, r8)
    368e:	46bd      	mov	sp, r7
    3690:	b006      	add	sp, #24
    3692:	bd80      	pop	{r7, pc}
    3694:	200000cc 	.word	0x200000cc
    3698:	00009ae1 	.word	0x00009ae1
    369c:	00009b15 	.word	0x00009b15
    36a0:	000034e5 	.word	0x000034e5
    36a4:	000096e1 	.word	0x000096e1
    36a8:	00009745 	.word	0x00009745

000036ac <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    36ac:	b580      	push	{r7, lr}
    36ae:	b082      	sub	sp, #8
    36b0:	af00      	add	r7, sp, #0
    36b2:	0002      	movs	r2, r0
    36b4:	1dfb      	adds	r3, r7, #7
    36b6:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    36b8:	1dfb      	adds	r3, r7, #7
    36ba:	781b      	ldrb	r3, [r3, #0]
    36bc:	2b00      	cmp	r3, #0
    36be:	d004      	beq.n	36ca <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    36c0:	2100      	movs	r1, #0
    36c2:	2009      	movs	r0, #9
    36c4:	4b05      	ldr	r3, [pc, #20]	; (36dc <nm_bsp_interrupt_ctrl+0x30>)
    36c6:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    36c8:	e003      	b.n	36d2 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    36ca:	2100      	movs	r1, #0
    36cc:	2009      	movs	r0, #9
    36ce:	4b04      	ldr	r3, [pc, #16]	; (36e0 <nm_bsp_interrupt_ctrl+0x34>)
    36d0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    36d2:	46c0      	nop			; (mov r8, r8)
    36d4:	46bd      	mov	sp, r7
    36d6:	b002      	add	sp, #8
    36d8:	bd80      	pop	{r7, pc}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	00009745 	.word	0x00009745
    36e0:	0000978d 	.word	0x0000978d

000036e4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    36e4:	b580      	push	{r7, lr}
    36e6:	b084      	sub	sp, #16
    36e8:	af00      	add	r7, sp, #0
    36ea:	0002      	movs	r2, r0
    36ec:	1dfb      	adds	r3, r7, #7
    36ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    36f0:	230f      	movs	r3, #15
    36f2:	18fb      	adds	r3, r7, r3
    36f4:	1dfa      	adds	r2, r7, #7
    36f6:	7812      	ldrb	r2, [r2, #0]
    36f8:	09d2      	lsrs	r2, r2, #7
    36fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    36fc:	230e      	movs	r3, #14
    36fe:	18fb      	adds	r3, r7, r3
    3700:	1dfa      	adds	r2, r7, #7
    3702:	7812      	ldrb	r2, [r2, #0]
    3704:	0952      	lsrs	r2, r2, #5
    3706:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3708:	4b0d      	ldr	r3, [pc, #52]	; (3740 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    370a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    370c:	230f      	movs	r3, #15
    370e:	18fb      	adds	r3, r7, r3
    3710:	781b      	ldrb	r3, [r3, #0]
    3712:	2b00      	cmp	r3, #0
    3714:	d10f      	bne.n	3736 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3716:	230f      	movs	r3, #15
    3718:	18fb      	adds	r3, r7, r3
    371a:	781b      	ldrb	r3, [r3, #0]
    371c:	009b      	lsls	r3, r3, #2
    371e:	2210      	movs	r2, #16
    3720:	4694      	mov	ip, r2
    3722:	44bc      	add	ip, r7
    3724:	4463      	add	r3, ip
    3726:	3b08      	subs	r3, #8
    3728:	681a      	ldr	r2, [r3, #0]
    372a:	230e      	movs	r3, #14
    372c:	18fb      	adds	r3, r7, r3
    372e:	781b      	ldrb	r3, [r3, #0]
    3730:	01db      	lsls	r3, r3, #7
    3732:	18d3      	adds	r3, r2, r3
    3734:	e000      	b.n	3738 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3736:	2300      	movs	r3, #0
	}
}
    3738:	0018      	movs	r0, r3
    373a:	46bd      	mov	sp, r7
    373c:	b004      	add	sp, #16
    373e:	bd80      	pop	{r7, pc}
    3740:	41004400 	.word	0x41004400

00003744 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3744:	b580      	push	{r7, lr}
    3746:	b082      	sub	sp, #8
    3748:	af00      	add	r7, sp, #0
    374a:	0002      	movs	r2, r0
    374c:	1dfb      	adds	r3, r7, #7
    374e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3750:	4b06      	ldr	r3, [pc, #24]	; (376c <system_interrupt_enable+0x28>)
    3752:	1dfa      	adds	r2, r7, #7
    3754:	7812      	ldrb	r2, [r2, #0]
    3756:	0011      	movs	r1, r2
    3758:	221f      	movs	r2, #31
    375a:	400a      	ands	r2, r1
    375c:	2101      	movs	r1, #1
    375e:	4091      	lsls	r1, r2
    3760:	000a      	movs	r2, r1
    3762:	601a      	str	r2, [r3, #0]
}
    3764:	46c0      	nop			; (mov r8, r8)
    3766:	46bd      	mov	sp, r7
    3768:	b002      	add	sp, #8
    376a:	bd80      	pop	{r7, pc}
    376c:	e000e100 	.word	0xe000e100

00003770 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    3770:	b580      	push	{r7, lr}
    3772:	b082      	sub	sp, #8
    3774:	af00      	add	r7, sp, #0
    3776:	0002      	movs	r2, r0
    3778:	1dfb      	adds	r3, r7, #7
    377a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    377c:	4a07      	ldr	r2, [pc, #28]	; (379c <system_interrupt_disable+0x2c>)
    377e:	1dfb      	adds	r3, r7, #7
    3780:	781b      	ldrb	r3, [r3, #0]
    3782:	0019      	movs	r1, r3
    3784:	231f      	movs	r3, #31
    3786:	400b      	ands	r3, r1
    3788:	2101      	movs	r1, #1
    378a:	4099      	lsls	r1, r3
    378c:	000b      	movs	r3, r1
    378e:	0019      	movs	r1, r3
    3790:	2380      	movs	r3, #128	; 0x80
    3792:	50d1      	str	r1, [r2, r3]
}
    3794:	46c0      	nop			; (mov r8, r8)
    3796:	46bd      	mov	sp, r7
    3798:	b002      	add	sp, #8
    379a:	bd80      	pop	{r7, pc}
    379c:	e000e100 	.word	0xe000e100

000037a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    37a0:	b580      	push	{r7, lr}
    37a2:	b082      	sub	sp, #8
    37a4:	af00      	add	r7, sp, #0
    37a6:	0002      	movs	r2, r0
    37a8:	1dfb      	adds	r3, r7, #7
    37aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    37ac:	1dfb      	adds	r3, r7, #7
    37ae:	781b      	ldrb	r3, [r3, #0]
    37b0:	0018      	movs	r0, r3
    37b2:	4b03      	ldr	r3, [pc, #12]	; (37c0 <port_get_group_from_gpio_pin+0x20>)
    37b4:	4798      	blx	r3
    37b6:	0003      	movs	r3, r0
}
    37b8:	0018      	movs	r0, r3
    37ba:	46bd      	mov	sp, r7
    37bc:	b002      	add	sp, #8
    37be:	bd80      	pop	{r7, pc}
    37c0:	000036e5 	.word	0x000036e5

000037c4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    37c4:	b580      	push	{r7, lr}
    37c6:	b082      	sub	sp, #8
    37c8:	af00      	add	r7, sp, #0
    37ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    37cc:	687b      	ldr	r3, [r7, #4]
    37ce:	2200      	movs	r2, #0
    37d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	2201      	movs	r2, #1
    37d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	2200      	movs	r2, #0
    37dc:	709a      	strb	r2, [r3, #2]
}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	46bd      	mov	sp, r7
    37e2:	b002      	add	sp, #8
    37e4:	bd80      	pop	{r7, pc}
    37e6:	46c0      	nop			; (mov r8, r8)

000037e8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    37e8:	b580      	push	{r7, lr}
    37ea:	b084      	sub	sp, #16
    37ec:	af00      	add	r7, sp, #0
    37ee:	0002      	movs	r2, r0
    37f0:	1dfb      	adds	r3, r7, #7
    37f2:	701a      	strb	r2, [r3, #0]
    37f4:	1dbb      	adds	r3, r7, #6
    37f6:	1c0a      	adds	r2, r1, #0
    37f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    37fa:	1dfb      	adds	r3, r7, #7
    37fc:	781b      	ldrb	r3, [r3, #0]
    37fe:	0018      	movs	r0, r3
    3800:	4b0d      	ldr	r3, [pc, #52]	; (3838 <port_pin_set_output_level+0x50>)
    3802:	4798      	blx	r3
    3804:	0003      	movs	r3, r0
    3806:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3808:	1dfb      	adds	r3, r7, #7
    380a:	781b      	ldrb	r3, [r3, #0]
    380c:	221f      	movs	r2, #31
    380e:	4013      	ands	r3, r2
    3810:	2201      	movs	r2, #1
    3812:	409a      	lsls	r2, r3
    3814:	0013      	movs	r3, r2
    3816:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    3818:	1dbb      	adds	r3, r7, #6
    381a:	781b      	ldrb	r3, [r3, #0]
    381c:	2b00      	cmp	r3, #0
    381e:	d003      	beq.n	3828 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3820:	68fb      	ldr	r3, [r7, #12]
    3822:	68ba      	ldr	r2, [r7, #8]
    3824:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    3826:	e002      	b.n	382e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    3828:	68fb      	ldr	r3, [r7, #12]
    382a:	68ba      	ldr	r2, [r7, #8]
    382c:	615a      	str	r2, [r3, #20]
	}
}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	46bd      	mov	sp, r7
    3832:	b004      	add	sp, #16
    3834:	bd80      	pop	{r7, pc}
    3836:	46c0      	nop			; (mov r8, r8)
    3838:	000037a1 	.word	0x000037a1

0000383c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    383c:	b580      	push	{r7, lr}
    383e:	b084      	sub	sp, #16
    3840:	af00      	add	r7, sp, #0
    3842:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3844:	687b      	ldr	r3, [r7, #4]
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    384a:	68fb      	ldr	r3, [r7, #12]
    384c:	69db      	ldr	r3, [r3, #28]
    384e:	1e5a      	subs	r2, r3, #1
    3850:	4193      	sbcs	r3, r2
    3852:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    3854:	0018      	movs	r0, r3
    3856:	46bd      	mov	sp, r7
    3858:	b004      	add	sp, #16
    385a:	bd80      	pop	{r7, pc}

0000385c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    385c:	b580      	push	{r7, lr}
    385e:	b082      	sub	sp, #8
    3860:	af00      	add	r7, sp, #0
    3862:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	2201      	movs	r2, #1
    3868:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	2200      	movs	r2, #0
    386e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3870:	687b      	ldr	r3, [r7, #4]
    3872:	2200      	movs	r2, #0
    3874:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    3876:	687b      	ldr	r3, [r7, #4]
    3878:	22c0      	movs	r2, #192	; 0xc0
    387a:	0392      	lsls	r2, r2, #14
    387c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    387e:	687b      	ldr	r3, [r7, #4]
    3880:	2200      	movs	r2, #0
    3882:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    3884:	687b      	ldr	r3, [r7, #4]
    3886:	2200      	movs	r2, #0
    3888:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    388a:	687b      	ldr	r3, [r7, #4]
    388c:	2201      	movs	r2, #1
    388e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    3890:	687b      	ldr	r3, [r7, #4]
    3892:	2201      	movs	r2, #1
    3894:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	2200      	movs	r2, #0
    389a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    389c:	687b      	ldr	r3, [r7, #4]
    389e:	2224      	movs	r2, #36	; 0x24
    38a0:	2100      	movs	r1, #0
    38a2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	3318      	adds	r3, #24
    38a8:	220c      	movs	r2, #12
    38aa:	2100      	movs	r1, #0
    38ac:	0018      	movs	r0, r3
    38ae:	4b0a      	ldr	r3, [pc, #40]	; (38d8 <spi_get_config_defaults+0x7c>)
    38b0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    38b2:	687b      	ldr	r3, [r7, #4]
    38b4:	4a09      	ldr	r2, [pc, #36]	; (38dc <spi_get_config_defaults+0x80>)
    38b6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    38b8:	687b      	ldr	r3, [r7, #4]
    38ba:	2200      	movs	r2, #0
    38bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	2200      	movs	r2, #0
    38c2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    38c4:	687b      	ldr	r3, [r7, #4]
    38c6:	2200      	movs	r2, #0
    38c8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    38ca:	687b      	ldr	r3, [r7, #4]
    38cc:	2200      	movs	r2, #0
    38ce:	635a      	str	r2, [r3, #52]	; 0x34

};
    38d0:	46c0      	nop			; (mov r8, r8)
    38d2:	46bd      	mov	sp, r7
    38d4:	b002      	add	sp, #8
    38d6:	bd80      	pop	{r7, pc}
    38d8:	00010de7 	.word	0x00010de7
    38dc:	000186a0 	.word	0x000186a0

000038e0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	b082      	sub	sp, #8
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	220a      	movs	r2, #10
    38ec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    38ee:	687b      	ldr	r3, [r7, #4]
    38f0:	2200      	movs	r2, #0
    38f2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	2200      	movs	r2, #0
    38f8:	709a      	strb	r2, [r3, #2]
}
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	46bd      	mov	sp, r7
    38fe:	b002      	add	sp, #8
    3900:	bd80      	pop	{r7, pc}
    3902:	46c0      	nop			; (mov r8, r8)

00003904 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    3904:	b580      	push	{r7, lr}
    3906:	b084      	sub	sp, #16
    3908:	af00      	add	r7, sp, #0
    390a:	6078      	str	r0, [r7, #4]
    390c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    390e:	683b      	ldr	r3, [r7, #0]
    3910:	781a      	ldrb	r2, [r3, #0]
    3912:	687b      	ldr	r3, [r7, #4]
    3914:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    3916:	683b      	ldr	r3, [r7, #0]
    3918:	785a      	ldrb	r2, [r3, #1]
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    391e:	683b      	ldr	r3, [r7, #0]
    3920:	789a      	ldrb	r2, [r3, #2]
    3922:	687b      	ldr	r3, [r7, #4]
    3924:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3926:	230c      	movs	r3, #12
    3928:	18fb      	adds	r3, r7, r3
    392a:	0018      	movs	r0, r3
    392c:	4b0b      	ldr	r3, [pc, #44]	; (395c <spi_attach_slave+0x58>)
    392e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3930:	230c      	movs	r3, #12
    3932:	18fb      	adds	r3, r7, r3
    3934:	2201      	movs	r2, #1
    3936:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3938:	687b      	ldr	r3, [r7, #4]
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	220c      	movs	r2, #12
    393e:	18ba      	adds	r2, r7, r2
    3940:	0011      	movs	r1, r2
    3942:	0018      	movs	r0, r3
    3944:	4b06      	ldr	r3, [pc, #24]	; (3960 <spi_attach_slave+0x5c>)
    3946:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    3948:	687b      	ldr	r3, [r7, #4]
    394a:	781b      	ldrb	r3, [r3, #0]
    394c:	2101      	movs	r1, #1
    394e:	0018      	movs	r0, r3
    3950:	4b04      	ldr	r3, [pc, #16]	; (3964 <spi_attach_slave+0x60>)
    3952:	4798      	blx	r3
}
    3954:	46c0      	nop			; (mov r8, r8)
    3956:	46bd      	mov	sp, r7
    3958:	b004      	add	sp, #16
    395a:	bd80      	pop	{r7, pc}
    395c:	000037c5 	.word	0x000037c5
    3960:	00009c39 	.word	0x00009c39
    3964:	000037e9 	.word	0x000037e9

00003968 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    3968:	b580      	push	{r7, lr}
    396a:	b084      	sub	sp, #16
    396c:	af00      	add	r7, sp, #0
    396e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3970:	687b      	ldr	r3, [r7, #4]
    3972:	681b      	ldr	r3, [r3, #0]
    3974:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	681b      	ldr	r3, [r3, #0]
    397a:	0018      	movs	r0, r3
    397c:	4b0b      	ldr	r3, [pc, #44]	; (39ac <spi_enable+0x44>)
    397e:	4798      	blx	r3
    3980:	0003      	movs	r3, r0
    3982:	0018      	movs	r0, r3
    3984:	4b0a      	ldr	r3, [pc, #40]	; (39b0 <spi_enable+0x48>)
    3986:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3988:	46c0      	nop			; (mov r8, r8)
    398a:	687b      	ldr	r3, [r7, #4]
    398c:	0018      	movs	r0, r3
    398e:	4b09      	ldr	r3, [pc, #36]	; (39b4 <spi_enable+0x4c>)
    3990:	4798      	blx	r3
    3992:	1e03      	subs	r3, r0, #0
    3994:	d1f9      	bne.n	398a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3996:	68fb      	ldr	r3, [r7, #12]
    3998:	681b      	ldr	r3, [r3, #0]
    399a:	2202      	movs	r2, #2
    399c:	431a      	orrs	r2, r3
    399e:	68fb      	ldr	r3, [r7, #12]
    39a0:	601a      	str	r2, [r3, #0]
}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	46bd      	mov	sp, r7
    39a6:	b004      	add	sp, #16
    39a8:	bd80      	pop	{r7, pc}
    39aa:	46c0      	nop			; (mov r8, r8)
    39ac:	0000a3d5 	.word	0x0000a3d5
    39b0:	00003745 	.word	0x00003745
    39b4:	0000383d 	.word	0x0000383d

000039b8 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    39b8:	b580      	push	{r7, lr}
    39ba:	b084      	sub	sp, #16
    39bc:	af00      	add	r7, sp, #0
    39be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    39c0:	687b      	ldr	r3, [r7, #4]
    39c2:	681b      	ldr	r3, [r3, #0]
    39c4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    39c6:	687b      	ldr	r3, [r7, #4]
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	0018      	movs	r0, r3
    39cc:	4b0e      	ldr	r3, [pc, #56]	; (3a08 <spi_disable+0x50>)
    39ce:	4798      	blx	r3
    39d0:	0003      	movs	r3, r0
    39d2:	0018      	movs	r0, r3
    39d4:	4b0d      	ldr	r3, [pc, #52]	; (3a0c <spi_disable+0x54>)
    39d6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    39d8:	46c0      	nop			; (mov r8, r8)
    39da:	687b      	ldr	r3, [r7, #4]
    39dc:	0018      	movs	r0, r3
    39de:	4b0c      	ldr	r3, [pc, #48]	; (3a10 <spi_disable+0x58>)
    39e0:	4798      	blx	r3
    39e2:	1e03      	subs	r3, r0, #0
    39e4:	d1f9      	bne.n	39da <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    39e6:	68fb      	ldr	r3, [r7, #12]
    39e8:	228f      	movs	r2, #143	; 0x8f
    39ea:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    39ec:	68fb      	ldr	r3, [r7, #12]
    39ee:	228f      	movs	r2, #143	; 0x8f
    39f0:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    39f2:	68fb      	ldr	r3, [r7, #12]
    39f4:	681b      	ldr	r3, [r3, #0]
    39f6:	2202      	movs	r2, #2
    39f8:	4393      	bics	r3, r2
    39fa:	001a      	movs	r2, r3
    39fc:	68fb      	ldr	r3, [r7, #12]
    39fe:	601a      	str	r2, [r3, #0]
}
    3a00:	46c0      	nop			; (mov r8, r8)
    3a02:	46bd      	mov	sp, r7
    3a04:	b004      	add	sp, #16
    3a06:	bd80      	pop	{r7, pc}
    3a08:	0000a3d5 	.word	0x0000a3d5
    3a0c:	00003771 	.word	0x00003771
    3a10:	0000383d 	.word	0x0000383d

00003a14 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    3a14:	b580      	push	{r7, lr}
    3a16:	b084      	sub	sp, #16
    3a18:	af00      	add	r7, sp, #0
    3a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a1c:	687b      	ldr	r3, [r7, #4]
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3a22:	68fb      	ldr	r3, [r7, #12]
    3a24:	7e1b      	ldrb	r3, [r3, #24]
    3a26:	b2db      	uxtb	r3, r3
    3a28:	001a      	movs	r2, r3
    3a2a:	2302      	movs	r3, #2
    3a2c:	4013      	ands	r3, r2
    3a2e:	1e5a      	subs	r2, r3, #1
    3a30:	4193      	sbcs	r3, r2
    3a32:	b2db      	uxtb	r3, r3
}
    3a34:	0018      	movs	r0, r3
    3a36:	46bd      	mov	sp, r7
    3a38:	b004      	add	sp, #16
    3a3a:	bd80      	pop	{r7, pc}

00003a3c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3a3c:	b580      	push	{r7, lr}
    3a3e:	b084      	sub	sp, #16
    3a40:	af00      	add	r7, sp, #0
    3a42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3a4a:	68fb      	ldr	r3, [r7, #12]
    3a4c:	7e1b      	ldrb	r3, [r3, #24]
    3a4e:	b2db      	uxtb	r3, r3
    3a50:	001a      	movs	r2, r3
    3a52:	2301      	movs	r3, #1
    3a54:	4013      	ands	r3, r2
    3a56:	1e5a      	subs	r2, r3, #1
    3a58:	4193      	sbcs	r3, r2
    3a5a:	b2db      	uxtb	r3, r3
}
    3a5c:	0018      	movs	r0, r3
    3a5e:	46bd      	mov	sp, r7
    3a60:	b004      	add	sp, #16
    3a62:	bd80      	pop	{r7, pc}

00003a64 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3a64:	b580      	push	{r7, lr}
    3a66:	b084      	sub	sp, #16
    3a68:	af00      	add	r7, sp, #0
    3a6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	681b      	ldr	r3, [r3, #0]
    3a70:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3a72:	68fb      	ldr	r3, [r7, #12]
    3a74:	7e1b      	ldrb	r3, [r3, #24]
    3a76:	b2db      	uxtb	r3, r3
    3a78:	001a      	movs	r2, r3
    3a7a:	2304      	movs	r3, #4
    3a7c:	4013      	ands	r3, r2
    3a7e:	1e5a      	subs	r2, r3, #1
    3a80:	4193      	sbcs	r3, r2
    3a82:	b2db      	uxtb	r3, r3
}
    3a84:	0018      	movs	r0, r3
    3a86:	46bd      	mov	sp, r7
    3a88:	b004      	add	sp, #16
    3a8a:	bd80      	pop	{r7, pc}

00003a8c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b084      	sub	sp, #16
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	000a      	movs	r2, r1
    3a96:	1cbb      	adds	r3, r7, #2
    3a98:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3a9a:	687b      	ldr	r3, [r7, #4]
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3aa0:	687b      	ldr	r3, [r7, #4]
    3aa2:	0018      	movs	r0, r3
    3aa4:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <spi_write+0x44>)
    3aa6:	4798      	blx	r3
    3aa8:	0003      	movs	r3, r0
    3aaa:	001a      	movs	r2, r3
    3aac:	2301      	movs	r3, #1
    3aae:	4053      	eors	r3, r2
    3ab0:	b2db      	uxtb	r3, r3
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d001      	beq.n	3aba <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3ab6:	2305      	movs	r3, #5
    3ab8:	e006      	b.n	3ac8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3aba:	1cbb      	adds	r3, r7, #2
    3abc:	881b      	ldrh	r3, [r3, #0]
    3abe:	05db      	lsls	r3, r3, #23
    3ac0:	0dda      	lsrs	r2, r3, #23
    3ac2:	68fb      	ldr	r3, [r7, #12]
    3ac4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3ac6:	2300      	movs	r3, #0
}
    3ac8:	0018      	movs	r0, r3
    3aca:	46bd      	mov	sp, r7
    3acc:	b004      	add	sp, #16
    3ace:	bd80      	pop	{r7, pc}
    3ad0:	00003a3d 	.word	0x00003a3d

00003ad4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3ad4:	b580      	push	{r7, lr}
    3ad6:	b084      	sub	sp, #16
    3ad8:	af00      	add	r7, sp, #0
    3ada:	6078      	str	r0, [r7, #4]
    3adc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	0018      	movs	r0, r3
    3ae8:	4b1b      	ldr	r3, [pc, #108]	; (3b58 <spi_read+0x84>)
    3aea:	4798      	blx	r3
    3aec:	0003      	movs	r3, r0
    3aee:	001a      	movs	r2, r3
    3af0:	2301      	movs	r3, #1
    3af2:	4053      	eors	r3, r2
    3af4:	b2db      	uxtb	r3, r3
    3af6:	2b00      	cmp	r3, #0
    3af8:	d001      	beq.n	3afe <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3afa:	2310      	movs	r3, #16
    3afc:	e027      	b.n	3b4e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3afe:	230f      	movs	r3, #15
    3b00:	18fb      	adds	r3, r7, r3
    3b02:	2200      	movs	r2, #0
    3b04:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3b06:	68bb      	ldr	r3, [r7, #8]
    3b08:	8b5b      	ldrh	r3, [r3, #26]
    3b0a:	b29b      	uxth	r3, r3
    3b0c:	001a      	movs	r2, r3
    3b0e:	2304      	movs	r3, #4
    3b10:	4013      	ands	r3, r2
    3b12:	d006      	beq.n	3b22 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3b14:	230f      	movs	r3, #15
    3b16:	18fb      	adds	r3, r7, r3
    3b18:	221e      	movs	r2, #30
    3b1a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3b1c:	68bb      	ldr	r3, [r7, #8]
    3b1e:	2204      	movs	r2, #4
    3b20:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3b22:	687b      	ldr	r3, [r7, #4]
    3b24:	799b      	ldrb	r3, [r3, #6]
    3b26:	2b01      	cmp	r3, #1
    3b28:	d108      	bne.n	3b3c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3b2a:	68bb      	ldr	r3, [r7, #8]
    3b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b2e:	b29b      	uxth	r3, r3
    3b30:	05db      	lsls	r3, r3, #23
    3b32:	0ddb      	lsrs	r3, r3, #23
    3b34:	b29a      	uxth	r2, r3
    3b36:	683b      	ldr	r3, [r7, #0]
    3b38:	801a      	strh	r2, [r3, #0]
    3b3a:	e005      	b.n	3b48 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3b3c:	68bb      	ldr	r3, [r7, #8]
    3b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b40:	b2db      	uxtb	r3, r3
    3b42:	b29a      	uxth	r2, r3
    3b44:	683b      	ldr	r3, [r7, #0]
    3b46:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3b48:	230f      	movs	r3, #15
    3b4a:	18fb      	adds	r3, r7, r3
    3b4c:	781b      	ldrb	r3, [r3, #0]
}
    3b4e:	0018      	movs	r0, r3
    3b50:	46bd      	mov	sp, r7
    3b52:	b004      	add	sp, #16
    3b54:	bd80      	pop	{r7, pc}
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	00003a65 	.word	0x00003a65

00003b5c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    3b5c:	b580      	push	{r7, lr}
    3b5e:	b086      	sub	sp, #24
    3b60:	af00      	add	r7, sp, #0
    3b62:	60f8      	str	r0, [r7, #12]
    3b64:	60b9      	str	r1, [r7, #8]
    3b66:	1dbb      	adds	r3, r7, #6
    3b68:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    3b6a:	2313      	movs	r3, #19
    3b6c:	18fb      	adds	r3, r7, r3
    3b6e:	2200      	movs	r2, #0
    3b70:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    3b72:	2317      	movs	r3, #23
    3b74:	18fb      	adds	r3, r7, r3
    3b76:	2200      	movs	r2, #0
    3b78:	701a      	strb	r2, [r3, #0]
    3b7a:	2316      	movs	r3, #22
    3b7c:	18fb      	adds	r3, r7, r3
    3b7e:	2200      	movs	r2, #0
    3b80:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    3b82:	2314      	movs	r3, #20
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	2200      	movs	r2, #0
    3b88:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    3b8a:	2310      	movs	r3, #16
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	2200      	movs	r2, #0
    3b90:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    3b92:	68fb      	ldr	r3, [r7, #12]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d107      	bne.n	3ba8 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    3b98:	2313      	movs	r3, #19
    3b9a:	18fb      	adds	r3, r7, r3
    3b9c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    3b9e:	2317      	movs	r3, #23
    3ba0:	18fb      	adds	r3, r7, r3
    3ba2:	2201      	movs	r2, #1
    3ba4:	701a      	strb	r2, [r3, #0]
    3ba6:	e00d      	b.n	3bc4 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    3ba8:	68bb      	ldr	r3, [r7, #8]
    3baa:	2b00      	cmp	r3, #0
    3bac:	d107      	bne.n	3bbe <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    3bae:	2313      	movs	r3, #19
    3bb0:	18fb      	adds	r3, r7, r3
    3bb2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    3bb4:	2316      	movs	r3, #22
    3bb6:	18fb      	adds	r3, r7, r3
    3bb8:	2201      	movs	r2, #1
    3bba:	701a      	strb	r2, [r3, #0]
    3bbc:	e002      	b.n	3bc4 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    3bbe:	2306      	movs	r3, #6
    3bc0:	425b      	negs	r3, r3
    3bc2:	e06a      	b.n	3c9a <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    3bc4:	4937      	ldr	r1, [pc, #220]	; (3ca4 <spi_rw+0x148>)
    3bc6:	4b38      	ldr	r3, [pc, #224]	; (3ca8 <spi_rw+0x14c>)
    3bc8:	2201      	movs	r2, #1
    3bca:	0018      	movs	r0, r3
    3bcc:	4b37      	ldr	r3, [pc, #220]	; (3cac <spi_rw+0x150>)
    3bce:	4798      	blx	r3

	while (u16Sz) {
    3bd0:	e04c      	b.n	3c6c <spi_rw+0x110>
		txd_data = *pu8Mosi;
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	781a      	ldrb	r2, [r3, #0]
    3bd6:	2314      	movs	r3, #20
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    3bdc:	46c0      	nop			; (mov r8, r8)
    3bde:	4b32      	ldr	r3, [pc, #200]	; (3ca8 <spi_rw+0x14c>)
    3be0:	0018      	movs	r0, r3
    3be2:	4b33      	ldr	r3, [pc, #204]	; (3cb0 <spi_rw+0x154>)
    3be4:	4798      	blx	r3
    3be6:	0003      	movs	r3, r0
    3be8:	001a      	movs	r2, r3
    3bea:	2301      	movs	r3, #1
    3bec:	4053      	eors	r3, r2
    3bee:	b2db      	uxtb	r3, r3
    3bf0:	2b00      	cmp	r3, #0
    3bf2:	d1f4      	bne.n	3bde <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    3bf4:	46c0      	nop			; (mov r8, r8)
    3bf6:	2314      	movs	r3, #20
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	881a      	ldrh	r2, [r3, #0]
    3bfc:	4b2a      	ldr	r3, [pc, #168]	; (3ca8 <spi_rw+0x14c>)
    3bfe:	0011      	movs	r1, r2
    3c00:	0018      	movs	r0, r3
    3c02:	4b2c      	ldr	r3, [pc, #176]	; (3cb4 <spi_rw+0x158>)
    3c04:	4798      	blx	r3
    3c06:	1e03      	subs	r3, r0, #0
    3c08:	d1f5      	bne.n	3bf6 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	4b26      	ldr	r3, [pc, #152]	; (3ca8 <spi_rw+0x14c>)
    3c0e:	0018      	movs	r0, r3
    3c10:	4b29      	ldr	r3, [pc, #164]	; (3cb8 <spi_rw+0x15c>)
    3c12:	4798      	blx	r3
    3c14:	0003      	movs	r3, r0
    3c16:	001a      	movs	r2, r3
    3c18:	2301      	movs	r3, #1
    3c1a:	4053      	eors	r3, r2
    3c1c:	b2db      	uxtb	r3, r3
    3c1e:	2b00      	cmp	r3, #0
    3c20:	d1f4      	bne.n	3c0c <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    3c22:	46c0      	nop			; (mov r8, r8)
    3c24:	2310      	movs	r3, #16
    3c26:	18fa      	adds	r2, r7, r3
    3c28:	4b1f      	ldr	r3, [pc, #124]	; (3ca8 <spi_rw+0x14c>)
    3c2a:	0011      	movs	r1, r2
    3c2c:	0018      	movs	r0, r3
    3c2e:	4b23      	ldr	r3, [pc, #140]	; (3cbc <spi_rw+0x160>)
    3c30:	4798      	blx	r3
    3c32:	1e03      	subs	r3, r0, #0
    3c34:	d1f6      	bne.n	3c24 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    3c36:	2310      	movs	r3, #16
    3c38:	18fb      	adds	r3, r7, r3
    3c3a:	881b      	ldrh	r3, [r3, #0]
    3c3c:	b2da      	uxtb	r2, r3
    3c3e:	68bb      	ldr	r3, [r7, #8]
    3c40:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    3c42:	1dbb      	adds	r3, r7, #6
    3c44:	881a      	ldrh	r2, [r3, #0]
    3c46:	1dbb      	adds	r3, r7, #6
    3c48:	3a01      	subs	r2, #1
    3c4a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    3c4c:	2316      	movs	r3, #22
    3c4e:	18fb      	adds	r3, r7, r3
    3c50:	781b      	ldrb	r3, [r3, #0]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d102      	bne.n	3c5c <spi_rw+0x100>
			pu8Miso++;
    3c56:	68bb      	ldr	r3, [r7, #8]
    3c58:	3301      	adds	r3, #1
    3c5a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    3c5c:	2317      	movs	r3, #23
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	781b      	ldrb	r3, [r3, #0]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d102      	bne.n	3c6c <spi_rw+0x110>
			pu8Mosi++;
    3c66:	68fb      	ldr	r3, [r7, #12]
    3c68:	3301      	adds	r3, #1
    3c6a:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    3c6c:	1dbb      	adds	r3, r7, #6
    3c6e:	881b      	ldrh	r3, [r3, #0]
    3c70:	2b00      	cmp	r3, #0
    3c72:	d1ae      	bne.n	3bd2 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    3c74:	46c0      	nop			; (mov r8, r8)
    3c76:	4b0c      	ldr	r3, [pc, #48]	; (3ca8 <spi_rw+0x14c>)
    3c78:	0018      	movs	r0, r3
    3c7a:	4b11      	ldr	r3, [pc, #68]	; (3cc0 <spi_rw+0x164>)
    3c7c:	4798      	blx	r3
    3c7e:	0003      	movs	r3, r0
    3c80:	001a      	movs	r2, r3
    3c82:	2301      	movs	r3, #1
    3c84:	4053      	eors	r3, r2
    3c86:	b2db      	uxtb	r3, r3
    3c88:	2b00      	cmp	r3, #0
    3c8a:	d1f4      	bne.n	3c76 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    3c8c:	4905      	ldr	r1, [pc, #20]	; (3ca4 <spi_rw+0x148>)
    3c8e:	4b06      	ldr	r3, [pc, #24]	; (3ca8 <spi_rw+0x14c>)
    3c90:	2200      	movs	r2, #0
    3c92:	0018      	movs	r0, r3
    3c94:	4b05      	ldr	r3, [pc, #20]	; (3cac <spi_rw+0x150>)
    3c96:	4798      	blx	r3

	return M2M_SUCCESS;
    3c98:	2300      	movs	r3, #0
}
    3c9a:	0018      	movs	r0, r3
    3c9c:	46bd      	mov	sp, r7
    3c9e:	b006      	add	sp, #24
    3ca0:	bd80      	pop	{r7, pc}
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	20004644 	.word	0x20004644
    3ca8:	20004648 	.word	0x20004648
    3cac:	0000ac39 	.word	0x0000ac39
    3cb0:	00003a3d 	.word	0x00003a3d
    3cb4:	00003a8d 	.word	0x00003a8d
    3cb8:	00003a65 	.word	0x00003a65
    3cbc:	00003ad5 	.word	0x00003ad5
    3cc0:	00003a15 	.word	0x00003a15

00003cc4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    3cc4:	b580      	push	{r7, lr}
    3cc6:	b092      	sub	sp, #72	; 0x48
    3cc8:	af00      	add	r7, sp, #0
    3cca:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    3ccc:	2347      	movs	r3, #71	; 0x47
    3cce:	18fb      	adds	r3, r7, r3
    3cd0:	2200      	movs	r2, #0
    3cd2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    3cd4:	2308      	movs	r3, #8
    3cd6:	18fb      	adds	r3, r7, r3
    3cd8:	0018      	movs	r0, r3
    3cda:	4b26      	ldr	r3, [pc, #152]	; (3d74 <nm_bus_init+0xb0>)
    3cdc:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    3cde:	2308      	movs	r3, #8
    3ce0:	18fb      	adds	r3, r7, r3
    3ce2:	220e      	movs	r2, #14
    3ce4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    3ce6:	2308      	movs	r3, #8
    3ce8:	18fa      	adds	r2, r7, r3
    3cea:	4b23      	ldr	r3, [pc, #140]	; (3d78 <nm_bus_init+0xb4>)
    3cec:	0011      	movs	r1, r2
    3cee:	0018      	movs	r0, r3
    3cf0:	4b22      	ldr	r3, [pc, #136]	; (3d7c <nm_bus_init+0xb8>)
    3cf2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    3cf4:	230c      	movs	r3, #12
    3cf6:	18fb      	adds	r3, r7, r3
    3cf8:	0018      	movs	r0, r3
    3cfa:	4b21      	ldr	r3, [pc, #132]	; (3d80 <nm_bus_init+0xbc>)
    3cfc:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    3cfe:	230c      	movs	r3, #12
    3d00:	18fb      	adds	r3, r7, r3
    3d02:	22c0      	movs	r2, #192	; 0xc0
    3d04:	0392      	lsls	r2, r2, #14
    3d06:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    3d08:	230c      	movs	r3, #12
    3d0a:	18fb      	adds	r3, r7, r3
    3d0c:	4a1d      	ldr	r2, [pc, #116]	; (3d84 <nm_bus_init+0xc0>)
    3d0e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    3d10:	230c      	movs	r3, #12
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	4a1c      	ldr	r2, [pc, #112]	; (3d88 <nm_bus_init+0xc4>)
    3d16:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    3d18:	230c      	movs	r3, #12
    3d1a:	18fb      	adds	r3, r7, r3
    3d1c:	2201      	movs	r2, #1
    3d1e:	4252      	negs	r2, r2
    3d20:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    3d22:	230c      	movs	r3, #12
    3d24:	18fb      	adds	r3, r7, r3
    3d26:	4a19      	ldr	r2, [pc, #100]	; (3d8c <nm_bus_init+0xc8>)
    3d28:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    3d2a:	230c      	movs	r3, #12
    3d2c:	18fb      	adds	r3, r7, r3
    3d2e:	2200      	movs	r2, #0
    3d30:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    3d32:	230c      	movs	r3, #12
    3d34:	18fb      	adds	r3, r7, r3
    3d36:	4a16      	ldr	r2, [pc, #88]	; (3d90 <nm_bus_init+0xcc>)
    3d38:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    3d3a:	230c      	movs	r3, #12
    3d3c:	18fa      	adds	r2, r7, r3
    3d3e:	4915      	ldr	r1, [pc, #84]	; (3d94 <nm_bus_init+0xd0>)
    3d40:	4b15      	ldr	r3, [pc, #84]	; (3d98 <nm_bus_init+0xd4>)
    3d42:	0018      	movs	r0, r3
    3d44:	4b15      	ldr	r3, [pc, #84]	; (3d9c <nm_bus_init+0xd8>)
    3d46:	4798      	blx	r3
    3d48:	1e03      	subs	r3, r0, #0
    3d4a:	d002      	beq.n	3d52 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    3d4c:	2306      	movs	r3, #6
    3d4e:	425b      	negs	r3, r3
    3d50:	e00c      	b.n	3d6c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    3d52:	4b11      	ldr	r3, [pc, #68]	; (3d98 <nm_bus_init+0xd4>)
    3d54:	0018      	movs	r0, r3
    3d56:	4b12      	ldr	r3, [pc, #72]	; (3da0 <nm_bus_init+0xdc>)
    3d58:	4798      	blx	r3

	nm_bsp_reset();
    3d5a:	4b12      	ldr	r3, [pc, #72]	; (3da4 <nm_bus_init+0xe0>)
    3d5c:	4798      	blx	r3
	nm_bsp_sleep(1);
    3d5e:	2001      	movs	r0, #1
    3d60:	4b11      	ldr	r3, [pc, #68]	; (3da8 <nm_bus_init+0xe4>)
    3d62:	4798      	blx	r3
#endif
	return result;
    3d64:	2347      	movs	r3, #71	; 0x47
    3d66:	18fb      	adds	r3, r7, r3
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	b25b      	sxtb	r3, r3
}
    3d6c:	0018      	movs	r0, r3
    3d6e:	46bd      	mov	sp, r7
    3d70:	b012      	add	sp, #72	; 0x48
    3d72:	bd80      	pop	{r7, pc}
    3d74:	000038e1 	.word	0x000038e1
    3d78:	20004644 	.word	0x20004644
    3d7c:	00003905 	.word	0x00003905
    3d80:	0000385d 	.word	0x0000385d
    3d84:	000c0002 	.word	0x000c0002
    3d88:	000d0002 	.word	0x000d0002
    3d8c:	000f0002 	.word	0x000f0002
    3d90:	00b71b00 	.word	0x00b71b00
    3d94:	42001000 	.word	0x42001000
    3d98:	20004648 	.word	0x20004648
    3d9c:	0000a975 	.word	0x0000a975
    3da0:	00003969 	.word	0x00003969
    3da4:	00003595 	.word	0x00003595
    3da8:	000035d9 	.word	0x000035d9

00003dac <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    3dac:	b590      	push	{r4, r7, lr}
    3dae:	b085      	sub	sp, #20
    3db0:	af00      	add	r7, sp, #0
    3db2:	0002      	movs	r2, r0
    3db4:	6039      	str	r1, [r7, #0]
    3db6:	1dfb      	adds	r3, r7, #7
    3db8:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    3dba:	230f      	movs	r3, #15
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	2200      	movs	r2, #0
    3dc0:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    3dc2:	1dfb      	adds	r3, r7, #7
    3dc4:	781b      	ldrb	r3, [r3, #0]
    3dc6:	2b03      	cmp	r3, #3
    3dc8:	d10f      	bne.n	3dea <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    3dca:	683b      	ldr	r3, [r7, #0]
    3dcc:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    3dce:	68bb      	ldr	r3, [r7, #8]
    3dd0:	6818      	ldr	r0, [r3, #0]
    3dd2:	68bb      	ldr	r3, [r7, #8]
    3dd4:	6859      	ldr	r1, [r3, #4]
    3dd6:	68bb      	ldr	r3, [r7, #8]
    3dd8:	891b      	ldrh	r3, [r3, #8]
    3dda:	220f      	movs	r2, #15
    3ddc:	18bc      	adds	r4, r7, r2
    3dde:	001a      	movs	r2, r3
    3de0:	4b0f      	ldr	r3, [pc, #60]	; (3e20 <nm_bus_ioctl+0x74>)
    3de2:	4798      	blx	r3
    3de4:	0003      	movs	r3, r0
    3de6:	7023      	strb	r3, [r4, #0]
		}
		break;
    3de8:	e012      	b.n	3e10 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    3dea:	230f      	movs	r3, #15
    3dec:	18fb      	adds	r3, r7, r3
    3dee:	22ff      	movs	r2, #255	; 0xff
    3df0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    3df2:	2386      	movs	r3, #134	; 0x86
    3df4:	005a      	lsls	r2, r3, #1
    3df6:	490b      	ldr	r1, [pc, #44]	; (3e24 <nm_bus_ioctl+0x78>)
    3df8:	4b0b      	ldr	r3, [pc, #44]	; (3e28 <nm_bus_ioctl+0x7c>)
    3dfa:	0018      	movs	r0, r3
    3dfc:	4b0b      	ldr	r3, [pc, #44]	; (3e2c <nm_bus_ioctl+0x80>)
    3dfe:	4798      	blx	r3
    3e00:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <nm_bus_ioctl+0x84>)
    3e02:	0018      	movs	r0, r3
    3e04:	4b0b      	ldr	r3, [pc, #44]	; (3e34 <nm_bus_ioctl+0x88>)
    3e06:	4798      	blx	r3
    3e08:	200d      	movs	r0, #13
    3e0a:	4b0b      	ldr	r3, [pc, #44]	; (3e38 <nm_bus_ioctl+0x8c>)
    3e0c:	4798      	blx	r3
			break;
    3e0e:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    3e10:	230f      	movs	r3, #15
    3e12:	18fb      	adds	r3, r7, r3
    3e14:	781b      	ldrb	r3, [r3, #0]
    3e16:	b25b      	sxtb	r3, r3
}
    3e18:	0018      	movs	r0, r3
    3e1a:	46bd      	mov	sp, r7
    3e1c:	b005      	add	sp, #20
    3e1e:	bd90      	pop	{r4, r7, pc}
    3e20:	00003b5d 	.word	0x00003b5d
    3e24:	00012cd8 	.word	0x00012cd8
    3e28:	00012cb0 	.word	0x00012cb0
    3e2c:	000114d9 	.word	0x000114d9
    3e30:	00012cc4 	.word	0x00012cc4
    3e34:	000115f9 	.word	0x000115f9
    3e38:	0001150d 	.word	0x0001150d

00003e3c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    3e3c:	b580      	push	{r7, lr}
    3e3e:	b082      	sub	sp, #8
    3e40:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    3e42:	1dfb      	adds	r3, r7, #7
    3e44:	2200      	movs	r2, #0
    3e46:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    3e48:	1d3b      	adds	r3, r7, #4
    3e4a:	0018      	movs	r0, r3
    3e4c:	4b09      	ldr	r3, [pc, #36]	; (3e74 <nm_bus_deinit+0x38>)
    3e4e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3e50:	1d3b      	adds	r3, r7, #4
    3e52:	2200      	movs	r2, #0
    3e54:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    3e56:	1d3b      	adds	r3, r7, #4
    3e58:	2200      	movs	r2, #0
    3e5a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
    3e5c:	4b06      	ldr	r3, [pc, #24]	; (3e78 <nm_bus_deinit+0x3c>)
    3e5e:	0018      	movs	r0, r3
    3e60:	4b06      	ldr	r3, [pc, #24]	; (3e7c <nm_bus_deinit+0x40>)
    3e62:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
    3e64:	1dfb      	adds	r3, r7, #7
    3e66:	781b      	ldrb	r3, [r3, #0]
    3e68:	b25b      	sxtb	r3, r3
}
    3e6a:	0018      	movs	r0, r3
    3e6c:	46bd      	mov	sp, r7
    3e6e:	b002      	add	sp, #8
    3e70:	bd80      	pop	{r7, pc}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	000037c5 	.word	0x000037c5
    3e78:	20004648 	.word	0x20004648
    3e7c:	000039b9 	.word	0x000039b9

00003e80 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    3e80:	b580      	push	{r7, lr}
    3e82:	b084      	sub	sp, #16
    3e84:	af00      	add	r7, sp, #0
    3e86:	60f8      	str	r0, [r7, #12]
    3e88:	60b9      	str	r1, [r7, #8]
    3e8a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    3e8c:	687b      	ldr	r3, [r7, #4]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d010      	beq.n	3eb4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    3e92:	68bb      	ldr	r3, [r7, #8]
    3e94:	781a      	ldrb	r2, [r3, #0]
    3e96:	68fb      	ldr	r3, [r7, #12]
    3e98:	701a      	strb	r2, [r3, #0]
		pDst++;
    3e9a:	68fb      	ldr	r3, [r7, #12]
    3e9c:	3301      	adds	r3, #1
    3e9e:	60fb      	str	r3, [r7, #12]
		pSrc++;
    3ea0:	68bb      	ldr	r3, [r7, #8]
    3ea2:	3301      	adds	r3, #1
    3ea4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    3ea6:	687b      	ldr	r3, [r7, #4]
    3ea8:	3b01      	subs	r3, #1
    3eaa:	607b      	str	r3, [r7, #4]
    3eac:	687b      	ldr	r3, [r7, #4]
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d1ef      	bne.n	3e92 <m2m_memcpy+0x12>
    3eb2:	e000      	b.n	3eb6 <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    3eb4:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    3eb6:	46bd      	mov	sp, r7
    3eb8:	b004      	add	sp, #16
    3eba:	bd80      	pop	{r7, pc}

00003ebc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b084      	sub	sp, #16
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	60f8      	str	r0, [r7, #12]
    3ec4:	607a      	str	r2, [r7, #4]
    3ec6:	230b      	movs	r3, #11
    3ec8:	18fb      	adds	r3, r7, r3
    3eca:	1c0a      	adds	r2, r1, #0
    3ecc:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	2b00      	cmp	r3, #0
    3ed2:	d00e      	beq.n	3ef2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    3ed4:	68fb      	ldr	r3, [r7, #12]
    3ed6:	220b      	movs	r2, #11
    3ed8:	18ba      	adds	r2, r7, r2
    3eda:	7812      	ldrb	r2, [r2, #0]
    3edc:	701a      	strb	r2, [r3, #0]
		pBuf++;
    3ede:	68fb      	ldr	r3, [r7, #12]
    3ee0:	3301      	adds	r3, #1
    3ee2:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	3b01      	subs	r3, #1
    3ee8:	607b      	str	r3, [r7, #4]
    3eea:	687b      	ldr	r3, [r7, #4]
    3eec:	2b00      	cmp	r3, #0
    3eee:	d1f1      	bne.n	3ed4 <m2m_memset+0x18>
    3ef0:	e000      	b.n	3ef4 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    3ef2:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    3ef4:	46bd      	mov	sp, r7
    3ef6:	b004      	add	sp, #16
    3ef8:	bd80      	pop	{r7, pc}
    3efa:	46c0      	nop			; (mov r8, r8)

00003efc <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b084      	sub	sp, #16
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    3f04:	230e      	movs	r3, #14
    3f06:	18fb      	adds	r3, r7, r3
    3f08:	2200      	movs	r2, #0
    3f0a:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    3f0c:	e009      	b.n	3f22 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    3f0e:	230e      	movs	r3, #14
    3f10:	18fb      	adds	r3, r7, r3
    3f12:	881a      	ldrh	r2, [r3, #0]
    3f14:	230e      	movs	r3, #14
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	3201      	adds	r2, #1
    3f1a:	801a      	strh	r2, [r3, #0]
		pcStr++;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	3301      	adds	r3, #1
    3f20:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d1f1      	bne.n	3f0e <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    3f2a:	230e      	movs	r3, #14
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	881b      	ldrh	r3, [r3, #0]
}
    3f30:	0018      	movs	r0, r3
    3f32:	46bd      	mov	sp, r7
    3f34:	b004      	add	sp, #16
    3f36:	bd80      	pop	{r7, pc}

00003f38 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b084      	sub	sp, #16
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	60f8      	str	r0, [r7, #12]
    3f40:	60b9      	str	r1, [r7, #8]
    3f42:	1dbb      	adds	r3, r7, #6
    3f44:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    3f46:	e020      	b.n	3f8a <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
    3f48:	68fb      	ldr	r3, [r7, #12]
    3f4a:	781a      	ldrb	r2, [r3, #0]
    3f4c:	68bb      	ldr	r3, [r7, #8]
    3f4e:	781b      	ldrb	r3, [r3, #0]
    3f50:	429a      	cmp	r2, r3
    3f52:	d009      	beq.n	3f68 <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    3f54:	68fb      	ldr	r3, [r7, #12]
    3f56:	781a      	ldrb	r2, [r3, #0]
    3f58:	68bb      	ldr	r3, [r7, #8]
    3f5a:	781b      	ldrb	r3, [r3, #0]
    3f5c:	429a      	cmp	r2, r3
    3f5e:	d201      	bcs.n	3f64 <m2m_strncmp+0x2c>
    3f60:	23ff      	movs	r3, #255	; 0xff
    3f62:	e017      	b.n	3f94 <m2m_strncmp+0x5c>
    3f64:	2301      	movs	r3, #1
    3f66:	e015      	b.n	3f94 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
    3f68:	68fb      	ldr	r3, [r7, #12]
    3f6a:	781b      	ldrb	r3, [r3, #0]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	d101      	bne.n	3f74 <m2m_strncmp+0x3c>
	    return 0;
    3f70:	2300      	movs	r3, #0
    3f72:	e00f      	b.n	3f94 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    3f74:	68fb      	ldr	r3, [r7, #12]
    3f76:	3301      	adds	r3, #1
    3f78:	60fb      	str	r3, [r7, #12]
    3f7a:	68bb      	ldr	r3, [r7, #8]
    3f7c:	3301      	adds	r3, #1
    3f7e:	60bb      	str	r3, [r7, #8]
    3f80:	1dbb      	adds	r3, r7, #6
    3f82:	1dba      	adds	r2, r7, #6
    3f84:	8812      	ldrh	r2, [r2, #0]
    3f86:	3a01      	subs	r2, #1
    3f88:	801a      	strh	r2, [r3, #0]
    3f8a:	1dbb      	adds	r3, r7, #6
    3f8c:	881b      	ldrh	r3, [r3, #0]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d1da      	bne.n	3f48 <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    3f92:	2300      	movs	r3, #0
}
    3f94:	0018      	movs	r0, r3
    3f96:	46bd      	mov	sp, r7
    3f98:	b004      	add	sp, #16
    3f9a:	bd80      	pop	{r7, pc}

00003f9c <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    3f9c:	b590      	push	{r4, r7, lr}
    3f9e:	b085      	sub	sp, #20
    3fa0:	af00      	add	r7, sp, #0
    3fa2:	6078      	str	r0, [r7, #4]
    3fa4:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    3fa6:	683b      	ldr	r3, [r7, #0]
    3fa8:	1c5a      	adds	r2, r3, #1
    3faa:	603a      	str	r2, [r7, #0]
    3fac:	220f      	movs	r2, #15
    3fae:	18ba      	adds	r2, r7, r2
    3fb0:	781b      	ldrb	r3, [r3, #0]
    3fb2:	7013      	strb	r3, [r2, #0]
    if (!u8c)
    3fb4:	230f      	movs	r3, #15
    3fb6:	18fb      	adds	r3, r7, r3
    3fb8:	781b      	ldrb	r3, [r3, #0]
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d101      	bne.n	3fc2 <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
    3fbe:	687b      	ldr	r3, [r7, #4]
    3fc0:	e029      	b.n	4016 <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
    3fc2:	230c      	movs	r3, #12
    3fc4:	18fc      	adds	r4, r7, r3
    3fc6:	683b      	ldr	r3, [r7, #0]
    3fc8:	0018      	movs	r0, r3
    3fca:	4b15      	ldr	r3, [pc, #84]	; (4020 <m2m_strstr+0x84>)
    3fcc:	4798      	blx	r3
    3fce:	0003      	movs	r3, r0
    3fd0:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    3fd2:	687b      	ldr	r3, [r7, #4]
    3fd4:	1c5a      	adds	r2, r3, #1
    3fd6:	607a      	str	r2, [r7, #4]
    3fd8:	220b      	movs	r2, #11
    3fda:	18ba      	adds	r2, r7, r2
    3fdc:	781b      	ldrb	r3, [r3, #0]
    3fde:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
    3fe0:	230b      	movs	r3, #11
    3fe2:	18fb      	adds	r3, r7, r3
    3fe4:	781b      	ldrb	r3, [r3, #0]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d101      	bne.n	3fee <m2m_strstr+0x52>
                return (uint8 *) 0;
    3fea:	2300      	movs	r3, #0
    3fec:	e013      	b.n	4016 <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
    3fee:	230b      	movs	r3, #11
    3ff0:	18fa      	adds	r2, r7, r3
    3ff2:	230f      	movs	r3, #15
    3ff4:	18fb      	adds	r3, r7, r3
    3ff6:	7812      	ldrb	r2, [r2, #0]
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	429a      	cmp	r2, r3
    3ffc:	d1e9      	bne.n	3fd2 <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    3ffe:	230c      	movs	r3, #12
    4000:	18fb      	adds	r3, r7, r3
    4002:	881a      	ldrh	r2, [r3, #0]
    4004:	6839      	ldr	r1, [r7, #0]
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	0018      	movs	r0, r3
    400a:	4b06      	ldr	r3, [pc, #24]	; (4024 <m2m_strstr+0x88>)
    400c:	4798      	blx	r3
    400e:	1e03      	subs	r3, r0, #0
    4010:	d1df      	bne.n	3fd2 <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
    4012:	687b      	ldr	r3, [r7, #4]
    4014:	3b01      	subs	r3, #1
}
    4016:	0018      	movs	r0, r3
    4018:	46bd      	mov	sp, r7
    401a:	b005      	add	sp, #20
    401c:	bd90      	pop	{r4, r7, pc}
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	00003efd 	.word	0x00003efd
    4024:	00003f39 	.word	0x00003f39

00004028 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
    4028:	b580      	push	{r7, lr}
    402a:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    402c:	4b04      	ldr	r3, [pc, #16]	; (4040 <isr+0x18>)
    402e:	781b      	ldrb	r3, [r3, #0]
    4030:	b2db      	uxtb	r3, r3
    4032:	3301      	adds	r3, #1
    4034:	b2da      	uxtb	r2, r3
    4036:	4b02      	ldr	r3, [pc, #8]	; (4040 <isr+0x18>)
    4038:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    403a:	46c0      	nop			; (mov r8, r8)
    403c:	46bd      	mov	sp, r7
    403e:	bd80      	pop	{r7, pc}
    4040:	200000d3 	.word	0x200000d3

00004044 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    4044:	b590      	push	{r4, r7, lr}
    4046:	b083      	sub	sp, #12
    4048:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    404a:	1dfb      	adds	r3, r7, #7
    404c:	2200      	movs	r2, #0
    404e:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    4050:	2001      	movs	r0, #1
    4052:	4b13      	ldr	r3, [pc, #76]	; (40a0 <hif_set_rx_done+0x5c>)
    4054:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    4056:	1dfc      	adds	r4, r7, #7
    4058:	003b      	movs	r3, r7
    405a:	4a12      	ldr	r2, [pc, #72]	; (40a4 <hif_set_rx_done+0x60>)
    405c:	0019      	movs	r1, r3
    405e:	0010      	movs	r0, r2
    4060:	4b11      	ldr	r3, [pc, #68]	; (40a8 <hif_set_rx_done+0x64>)
    4062:	4798      	blx	r3
    4064:	0003      	movs	r3, r0
    4066:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    4068:	1dfb      	adds	r3, r7, #7
    406a:	781b      	ldrb	r3, [r3, #0]
    406c:	b25b      	sxtb	r3, r3
    406e:	2b00      	cmp	r3, #0
    4070:	d10d      	bne.n	408e <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    4072:	683b      	ldr	r3, [r7, #0]
    4074:	2202      	movs	r2, #2
    4076:	4313      	orrs	r3, r2
    4078:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    407a:	683b      	ldr	r3, [r7, #0]
    407c:	1dfc      	adds	r4, r7, #7
    407e:	4a09      	ldr	r2, [pc, #36]	; (40a4 <hif_set_rx_done+0x60>)
    4080:	0019      	movs	r1, r3
    4082:	0010      	movs	r0, r2
    4084:	4b09      	ldr	r3, [pc, #36]	; (40ac <hif_set_rx_done+0x68>)
    4086:	4798      	blx	r3
    4088:	0003      	movs	r3, r0
    408a:	7023      	strb	r3, [r4, #0]
    408c:	e000      	b.n	4090 <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    408e:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    4090:	1dfb      	adds	r3, r7, #7
    4092:	781b      	ldrb	r3, [r3, #0]
    4094:	b25b      	sxtb	r3, r3

}
    4096:	0018      	movs	r0, r3
    4098:	46bd      	mov	sp, r7
    409a:	b003      	add	sp, #12
    409c:	bd90      	pop	{r4, r7, pc}
    409e:	46c0      	nop			; (mov r8, r8)
    40a0:	000036ad 	.word	0x000036ad
    40a4:	00001070 	.word	0x00001070
    40a8:	000061d9 	.word	0x000061d9
    40ac:	000061fd 	.word	0x000061fd

000040b0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    40b0:	b580      	push	{r7, lr}
    40b2:	b082      	sub	sp, #8
    40b4:	af00      	add	r7, sp, #0
    40b6:	603a      	str	r2, [r7, #0]
    40b8:	1dfb      	adds	r3, r7, #7
    40ba:	1c02      	adds	r2, r0, #0
    40bc:	701a      	strb	r2, [r3, #0]
    40be:	1d3b      	adds	r3, r7, #4
    40c0:	1c0a      	adds	r2, r1, #0
    40c2:	801a      	strh	r2, [r3, #0]


}
    40c4:	46c0      	nop			; (mov r8, r8)
    40c6:	46bd      	mov	sp, r7
    40c8:	b002      	add	sp, #8
    40ca:	bd80      	pop	{r7, pc}

000040cc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    40cc:	b590      	push	{r4, r7, lr}
    40ce:	b083      	sub	sp, #12
    40d0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    40d2:	1dfb      	adds	r3, r7, #7
    40d4:	2200      	movs	r2, #0
    40d6:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    40d8:	4b1c      	ldr	r3, [pc, #112]	; (414c <hif_chip_wake+0x80>)
    40da:	781b      	ldrb	r3, [r3, #0]
    40dc:	b2db      	uxtb	r3, r3
    40de:	2b00      	cmp	r3, #0
    40e0:	d121      	bne.n	4126 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    40e2:	4b1b      	ldr	r3, [pc, #108]	; (4150 <hif_chip_wake+0x84>)
    40e4:	781b      	ldrb	r3, [r3, #0]
    40e6:	b2db      	uxtb	r3, r3
    40e8:	2b03      	cmp	r3, #3
    40ea:	d004      	beq.n	40f6 <hif_chip_wake+0x2a>
    40ec:	4b18      	ldr	r3, [pc, #96]	; (4150 <hif_chip_wake+0x84>)
    40ee:	781b      	ldrb	r3, [r3, #0]
    40f0:	b2db      	uxtb	r3, r3
    40f2:	2b04      	cmp	r3, #4
    40f4:	d117      	bne.n	4126 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    40f6:	1dfc      	adds	r4, r7, #7
    40f8:	4b16      	ldr	r3, [pc, #88]	; (4154 <hif_chip_wake+0x88>)
    40fa:	4798      	blx	r3
    40fc:	0003      	movs	r3, r0
    40fe:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    4100:	1dfb      	adds	r3, r7, #7
    4102:	781b      	ldrb	r3, [r3, #0]
    4104:	b25b      	sxtb	r3, r3
    4106:	2b00      	cmp	r3, #0
    4108:	d115      	bne.n	4136 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    410a:	1dfc      	adds	r4, r7, #7
    410c:	4a12      	ldr	r2, [pc, #72]	; (4158 <hif_chip_wake+0x8c>)
    410e:	4b13      	ldr	r3, [pc, #76]	; (415c <hif_chip_wake+0x90>)
    4110:	0011      	movs	r1, r2
    4112:	0018      	movs	r0, r3
    4114:	4b12      	ldr	r3, [pc, #72]	; (4160 <hif_chip_wake+0x94>)
    4116:	4798      	blx	r3
    4118:	0003      	movs	r3, r0
    411a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    411c:	1dfb      	adds	r3, r7, #7
    411e:	781b      	ldrb	r3, [r3, #0]
    4120:	b25b      	sxtb	r3, r3
    4122:	2b00      	cmp	r3, #0
    4124:	d109      	bne.n	413a <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    4126:	4b09      	ldr	r3, [pc, #36]	; (414c <hif_chip_wake+0x80>)
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	b2db      	uxtb	r3, r3
    412c:	3301      	adds	r3, #1
    412e:	b2da      	uxtb	r2, r3
    4130:	4b06      	ldr	r3, [pc, #24]	; (414c <hif_chip_wake+0x80>)
    4132:	701a      	strb	r2, [r3, #0]
    4134:	e002      	b.n	413c <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	e000      	b.n	413c <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    413a:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    413c:	1dfb      	adds	r3, r7, #7
    413e:	781b      	ldrb	r3, [r3, #0]
    4140:	b25b      	sxtb	r3, r3
}
    4142:	0018      	movs	r0, r3
    4144:	46bd      	mov	sp, r7
    4146:	b003      	add	sp, #12
    4148:	bd90      	pop	{r4, r7, pc}
    414a:	46c0      	nop			; (mov r8, r8)
    414c:	200000d1 	.word	0x200000d1
    4150:	200000d0 	.word	0x200000d0
    4154:	000058ad 	.word	0x000058ad
    4158:	00005678 	.word	0x00005678
    415c:	00001074 	.word	0x00001074
    4160:	000061fd 	.word	0x000061fd

00004164 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    4164:	b590      	push	{r4, r7, lr}
    4166:	b083      	sub	sp, #12
    4168:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    416a:	1dfb      	adds	r3, r7, #7
    416c:	2200      	movs	r2, #0
    416e:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    4170:	4b29      	ldr	r3, [pc, #164]	; (4218 <hif_chip_sleep+0xb4>)
    4172:	781b      	ldrb	r3, [r3, #0]
    4174:	b2db      	uxtb	r3, r3
    4176:	2b00      	cmp	r3, #0
    4178:	d006      	beq.n	4188 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    417a:	4b27      	ldr	r3, [pc, #156]	; (4218 <hif_chip_sleep+0xb4>)
    417c:	781b      	ldrb	r3, [r3, #0]
    417e:	b2db      	uxtb	r3, r3
    4180:	3b01      	subs	r3, #1
    4182:	b2da      	uxtb	r2, r3
    4184:	4b24      	ldr	r3, [pc, #144]	; (4218 <hif_chip_sleep+0xb4>)
    4186:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    4188:	4b23      	ldr	r3, [pc, #140]	; (4218 <hif_chip_sleep+0xb4>)
    418a:	781b      	ldrb	r3, [r3, #0]
    418c:	b2db      	uxtb	r3, r3
    418e:	2b00      	cmp	r3, #0
    4190:	d13a      	bne.n	4208 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    4192:	4b22      	ldr	r3, [pc, #136]	; (421c <hif_chip_sleep+0xb8>)
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	b2db      	uxtb	r3, r3
    4198:	2b03      	cmp	r3, #3
    419a:	d004      	beq.n	41a6 <hif_chip_sleep+0x42>
    419c:	4b1f      	ldr	r3, [pc, #124]	; (421c <hif_chip_sleep+0xb8>)
    419e:	781b      	ldrb	r3, [r3, #0]
    41a0:	b2db      	uxtb	r3, r3
    41a2:	2b04      	cmp	r3, #4
    41a4:	d130      	bne.n	4208 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    41a6:	2300      	movs	r3, #0
    41a8:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    41aa:	1dfc      	adds	r4, r7, #7
    41ac:	4a1c      	ldr	r2, [pc, #112]	; (4220 <hif_chip_sleep+0xbc>)
    41ae:	4b1d      	ldr	r3, [pc, #116]	; (4224 <hif_chip_sleep+0xc0>)
    41b0:	0011      	movs	r1, r2
    41b2:	0018      	movs	r0, r3
    41b4:	4b1c      	ldr	r3, [pc, #112]	; (4228 <hif_chip_sleep+0xc4>)
    41b6:	4798      	blx	r3
    41b8:	0003      	movs	r3, r0
    41ba:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    41bc:	1dfb      	adds	r3, r7, #7
    41be:	781b      	ldrb	r3, [r3, #0]
    41c0:	b25b      	sxtb	r3, r3
    41c2:	2b00      	cmp	r3, #0
    41c4:	d11d      	bne.n	4202 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    41c6:	1dfc      	adds	r4, r7, #7
    41c8:	003b      	movs	r3, r7
    41ca:	0019      	movs	r1, r3
    41cc:	2001      	movs	r0, #1
    41ce:	4b17      	ldr	r3, [pc, #92]	; (422c <hif_chip_sleep+0xc8>)
    41d0:	4798      	blx	r3
    41d2:	0003      	movs	r3, r0
    41d4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    41d6:	1dfb      	adds	r3, r7, #7
    41d8:	781b      	ldrb	r3, [r3, #0]
    41da:	b25b      	sxtb	r3, r3
    41dc:	2b00      	cmp	r3, #0
    41de:	d112      	bne.n	4206 <hif_chip_sleep+0xa2>
			if(reg&0x2)
    41e0:	683b      	ldr	r3, [r7, #0]
    41e2:	2202      	movs	r2, #2
    41e4:	4013      	ands	r3, r2
    41e6:	d00f      	beq.n	4208 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    41e8:	683b      	ldr	r3, [r7, #0]
    41ea:	2202      	movs	r2, #2
    41ec:	4393      	bics	r3, r2
    41ee:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    41f0:	683b      	ldr	r3, [r7, #0]
    41f2:	1dfc      	adds	r4, r7, #7
    41f4:	0019      	movs	r1, r3
    41f6:	2001      	movs	r0, #1
    41f8:	4b0b      	ldr	r3, [pc, #44]	; (4228 <hif_chip_sleep+0xc4>)
    41fa:	4798      	blx	r3
    41fc:	0003      	movs	r3, r0
    41fe:	7023      	strb	r3, [r4, #0]
    4200:	e002      	b.n	4208 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    4202:	46c0      	nop			; (mov r8, r8)
    4204:	e000      	b.n	4208 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    4206:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    4208:	1dfb      	adds	r3, r7, #7
    420a:	781b      	ldrb	r3, [r3, #0]
    420c:	b25b      	sxtb	r3, r3
}
    420e:	0018      	movs	r0, r3
    4210:	46bd      	mov	sp, r7
    4212:	b003      	add	sp, #12
    4214:	bd90      	pop	{r4, r7, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	200000d1 	.word	0x200000d1
    421c:	200000d0 	.word	0x200000d0
    4220:	00004321 	.word	0x00004321
    4224:	00001074 	.word	0x00001074
    4228:	000061fd 	.word	0x000061fd
    422c:	000061d9 	.word	0x000061d9

00004230 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    4230:	b580      	push	{r7, lr}
    4232:	b082      	sub	sp, #8
    4234:	af00      	add	r7, sp, #0
    4236:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    4238:	4b0e      	ldr	r3, [pc, #56]	; (4274 <hif_init+0x44>)
    423a:	2200      	movs	r2, #0
    423c:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    423e:	4b0e      	ldr	r3, [pc, #56]	; (4278 <hif_init+0x48>)
    4240:	2200      	movs	r2, #0
    4242:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    4244:	4b0d      	ldr	r3, [pc, #52]	; (427c <hif_init+0x4c>)
    4246:	2200      	movs	r2, #0
    4248:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    424a:	4b0d      	ldr	r3, [pc, #52]	; (4280 <hif_init+0x50>)
    424c:	2200      	movs	r2, #0
    424e:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    4250:	4b0c      	ldr	r3, [pc, #48]	; (4284 <hif_init+0x54>)
    4252:	2200      	movs	r2, #0
    4254:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    4256:	4b0c      	ldr	r3, [pc, #48]	; (4288 <hif_init+0x58>)
    4258:	0018      	movs	r0, r3
    425a:	4b0c      	ldr	r3, [pc, #48]	; (428c <hif_init+0x5c>)
    425c:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    425e:	4b0c      	ldr	r3, [pc, #48]	; (4290 <hif_init+0x60>)
    4260:	0019      	movs	r1, r3
    4262:	2003      	movs	r0, #3
    4264:	4b0b      	ldr	r3, [pc, #44]	; (4294 <hif_init+0x64>)
    4266:	4798      	blx	r3

	return M2M_SUCCESS;
    4268:	2300      	movs	r3, #0
}
    426a:	0018      	movs	r0, r3
    426c:	46bd      	mov	sp, r7
    426e:	b002      	add	sp, #8
    4270:	bd80      	pop	{r7, pc}
    4272:	46c0      	nop			; (mov r8, r8)
    4274:	200000d4 	.word	0x200000d4
    4278:	200000d8 	.word	0x200000d8
    427c:	200000d1 	.word	0x200000d1
    4280:	200000d0 	.word	0x200000d0
    4284:	200000d3 	.word	0x200000d3
    4288:	00004029 	.word	0x00004029
    428c:	00003635 	.word	0x00003635
    4290:	000040b1 	.word	0x000040b1
    4294:	00004c71 	.word	0x00004c71

00004298 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    4298:	b590      	push	{r4, r7, lr}
    429a:	b089      	sub	sp, #36	; 0x24
    429c:	af00      	add	r7, sp, #0
    429e:	0004      	movs	r4, r0
    42a0:	0008      	movs	r0, r1
    42a2:	603a      	str	r2, [r7, #0]
    42a4:	0019      	movs	r1, r3
    42a6:	1dfb      	adds	r3, r7, #7
    42a8:	1c22      	adds	r2, r4, #0
    42aa:	701a      	strb	r2, [r3, #0]
    42ac:	1dbb      	adds	r3, r7, #6
    42ae:	1c02      	adds	r2, r0, #0
    42b0:	701a      	strb	r2, [r3, #0]
    42b2:	1d3b      	adds	r3, r7, #4
    42b4:	1c0a      	adds	r2, r1, #0
    42b6:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    42b8:	231f      	movs	r3, #31
    42ba:	18fb      	adds	r3, r7, r3
    42bc:	22ff      	movs	r2, #255	; 0xff
    42be:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    42c0:	1dbb      	adds	r3, r7, #6
    42c2:	781b      	ldrb	r3, [r3, #0]
    42c4:	227f      	movs	r2, #127	; 0x7f
    42c6:	4013      	ands	r3, r2
    42c8:	b2da      	uxtb	r2, r3
    42ca:	2318      	movs	r3, #24
    42cc:	18fb      	adds	r3, r7, r3
    42ce:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    42d0:	2318      	movs	r3, #24
    42d2:	18fb      	adds	r3, r7, r3
    42d4:	1dfa      	adds	r2, r7, #7
    42d6:	7812      	ldrb	r2, [r2, #0]
    42d8:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    42da:	2318      	movs	r3, #24
    42dc:	18fb      	adds	r3, r7, r3
    42de:	2208      	movs	r2, #8
    42e0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    42e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42e4:	2b00      	cmp	r3, #0
    42e6:	d011      	beq.n	430c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    42e8:	2318      	movs	r3, #24
    42ea:	18fb      	adds	r3, r7, r3
    42ec:	885b      	ldrh	r3, [r3, #2]
    42ee:	b29a      	uxth	r2, r3
    42f0:	2338      	movs	r3, #56	; 0x38
    42f2:	18f9      	adds	r1, r7, r3
    42f4:	2334      	movs	r3, #52	; 0x34
    42f6:	18fb      	adds	r3, r7, r3
    42f8:	8809      	ldrh	r1, [r1, #0]
    42fa:	881b      	ldrh	r3, [r3, #0]
    42fc:	18cb      	adds	r3, r1, r3
    42fe:	b29b      	uxth	r3, r3
    4300:	18d3      	adds	r3, r2, r3
    4302:	b29a      	uxth	r2, r3
    4304:	2318      	movs	r3, #24
    4306:	18fb      	adds	r3, r7, r3
    4308:	805a      	strh	r2, [r3, #2]
    430a:	e00a      	b.n	4322 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    430c:	2318      	movs	r3, #24
    430e:	18fb      	adds	r3, r7, r3
    4310:	885b      	ldrh	r3, [r3, #2]
    4312:	b29a      	uxth	r2, r3
    4314:	1d3b      	adds	r3, r7, #4
    4316:	881b      	ldrh	r3, [r3, #0]
    4318:	18d3      	adds	r3, r2, r3
    431a:	b29a      	uxth	r2, r3
    431c:	2318      	movs	r3, #24
    431e:	18fb      	adds	r3, r7, r3
    4320:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    4322:	231f      	movs	r3, #31
    4324:	18fc      	adds	r4, r7, r3
    4326:	4b9b      	ldr	r3, [pc, #620]	; (4594 <hif_send+0x2fc>)
    4328:	4798      	blx	r3
    432a:	0003      	movs	r3, r0
    432c:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    432e:	231f      	movs	r3, #31
    4330:	18fb      	adds	r3, r7, r3
    4332:	781b      	ldrb	r3, [r3, #0]
    4334:	b25b      	sxtb	r3, r3
    4336:	2b00      	cmp	r3, #0
    4338:	d000      	beq.n	433c <hif_send+0xa4>
    433a:	e103      	b.n	4544 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    433c:	2300      	movs	r3, #0
    433e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    4340:	230e      	movs	r3, #14
    4342:	18fb      	adds	r3, r7, r3
    4344:	2200      	movs	r2, #0
    4346:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    4348:	2300      	movs	r3, #0
    434a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    434c:	1dfb      	adds	r3, r7, #7
    434e:	781a      	ldrb	r2, [r3, #0]
    4350:	697b      	ldr	r3, [r7, #20]
    4352:	4313      	orrs	r3, r2
    4354:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    4356:	1dbb      	adds	r3, r7, #6
    4358:	781b      	ldrb	r3, [r3, #0]
    435a:	021a      	lsls	r2, r3, #8
    435c:	697b      	ldr	r3, [r7, #20]
    435e:	4313      	orrs	r3, r2
    4360:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    4362:	2318      	movs	r3, #24
    4364:	18fb      	adds	r3, r7, r3
    4366:	885b      	ldrh	r3, [r3, #2]
    4368:	b29b      	uxth	r3, r3
    436a:	041a      	lsls	r2, r3, #16
    436c:	697b      	ldr	r3, [r7, #20]
    436e:	4313      	orrs	r3, r2
    4370:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    4372:	697b      	ldr	r3, [r7, #20]
    4374:	221f      	movs	r2, #31
    4376:	18bc      	adds	r4, r7, r2
    4378:	4a87      	ldr	r2, [pc, #540]	; (4598 <hif_send+0x300>)
    437a:	0019      	movs	r1, r3
    437c:	0010      	movs	r0, r2
    437e:	4b87      	ldr	r3, [pc, #540]	; (459c <hif_send+0x304>)
    4380:	4798      	blx	r3
    4382:	0003      	movs	r3, r0
    4384:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    4386:	231f      	movs	r3, #31
    4388:	18fb      	adds	r3, r7, r3
    438a:	781b      	ldrb	r3, [r3, #0]
    438c:	b25b      	sxtb	r3, r3
    438e:	2b00      	cmp	r3, #0
    4390:	d000      	beq.n	4394 <hif_send+0xfc>
    4392:	e0ee      	b.n	4572 <hif_send+0x2da>


		reg = 0;
    4394:	2300      	movs	r3, #0
    4396:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    4398:	697b      	ldr	r3, [r7, #20]
    439a:	2202      	movs	r2, #2
    439c:	4313      	orrs	r3, r2
    439e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    43a0:	697b      	ldr	r3, [r7, #20]
    43a2:	221f      	movs	r2, #31
    43a4:	18bc      	adds	r4, r7, r2
    43a6:	4a7e      	ldr	r2, [pc, #504]	; (45a0 <hif_send+0x308>)
    43a8:	0019      	movs	r1, r3
    43aa:	0010      	movs	r0, r2
    43ac:	4b7b      	ldr	r3, [pc, #492]	; (459c <hif_send+0x304>)
    43ae:	4798      	blx	r3
    43b0:	0003      	movs	r3, r0
    43b2:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    43b4:	231f      	movs	r3, #31
    43b6:	18fb      	adds	r3, r7, r3
    43b8:	781b      	ldrb	r3, [r3, #0]
    43ba:	b25b      	sxtb	r3, r3
    43bc:	2b00      	cmp	r3, #0
    43be:	d000      	beq.n	43c2 <hif_send+0x12a>
    43c0:	e0d9      	b.n	4576 <hif_send+0x2de>
		dma_addr = 0;
    43c2:	2300      	movs	r3, #0
    43c4:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    43c6:	230e      	movs	r3, #14
    43c8:	18fb      	adds	r3, r7, r3
    43ca:	2200      	movs	r2, #0
    43cc:	801a      	strh	r2, [r3, #0]
    43ce:	e031      	b.n	4434 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    43d0:	231f      	movs	r3, #31
    43d2:	18fc      	adds	r4, r7, r3
    43d4:	2314      	movs	r3, #20
    43d6:	18fb      	adds	r3, r7, r3
    43d8:	4a71      	ldr	r2, [pc, #452]	; (45a0 <hif_send+0x308>)
    43da:	0019      	movs	r1, r3
    43dc:	0010      	movs	r0, r2
    43de:	4b71      	ldr	r3, [pc, #452]	; (45a4 <hif_send+0x30c>)
    43e0:	4798      	blx	r3
    43e2:	0003      	movs	r3, r0
    43e4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    43e6:	231f      	movs	r3, #31
    43e8:	18fb      	adds	r3, r7, r3
    43ea:	781b      	ldrb	r3, [r3, #0]
    43ec:	b25b      	sxtb	r3, r3
    43ee:	2b00      	cmp	r3, #0
    43f0:	d128      	bne.n	4444 <hif_send+0x1ac>
			if (!(reg & 0x2))
    43f2:	697b      	ldr	r3, [r7, #20]
    43f4:	2202      	movs	r2, #2
    43f6:	4013      	ands	r3, r2
    43f8:	d113      	bne.n	4422 <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    43fa:	231f      	movs	r3, #31
    43fc:	18fc      	adds	r4, r7, r3
    43fe:	2310      	movs	r3, #16
    4400:	18fb      	adds	r3, r7, r3
    4402:	4a69      	ldr	r2, [pc, #420]	; (45a8 <hif_send+0x310>)
    4404:	0019      	movs	r1, r3
    4406:	0010      	movs	r0, r2
    4408:	4b66      	ldr	r3, [pc, #408]	; (45a4 <hif_send+0x30c>)
    440a:	4798      	blx	r3
    440c:	0003      	movs	r3, r0
    440e:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    4410:	231f      	movs	r3, #31
    4412:	18fb      	adds	r3, r7, r3
    4414:	781b      	ldrb	r3, [r3, #0]
    4416:	b25b      	sxtb	r3, r3
    4418:	2b00      	cmp	r3, #0
    441a:	d015      	beq.n	4448 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    441c:	2300      	movs	r3, #0
    441e:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    4420:	e012      	b.n	4448 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    4422:	230e      	movs	r3, #14
    4424:	18fb      	adds	r3, r7, r3
    4426:	881b      	ldrh	r3, [r3, #0]
    4428:	b29b      	uxth	r3, r3
    442a:	3301      	adds	r3, #1
    442c:	b29a      	uxth	r2, r3
    442e:	230e      	movs	r3, #14
    4430:	18fb      	adds	r3, r7, r3
    4432:	801a      	strh	r2, [r3, #0]
    4434:	230e      	movs	r3, #14
    4436:	18fb      	adds	r3, r7, r3
    4438:	881b      	ldrh	r3, [r3, #0]
    443a:	b29b      	uxth	r3, r3
    443c:	4a5b      	ldr	r2, [pc, #364]	; (45ac <hif_send+0x314>)
    443e:	4293      	cmp	r3, r2
    4440:	d9c6      	bls.n	43d0 <hif_send+0x138>
    4442:	e002      	b.n	444a <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    4444:	46c0      	nop			; (mov r8, r8)
    4446:	e000      	b.n	444a <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    4448:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    444a:	693b      	ldr	r3, [r7, #16]
    444c:	2b00      	cmp	r3, #0
    444e:	d100      	bne.n	4452 <hif_send+0x1ba>
    4450:	e073      	b.n	453a <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    4452:	693b      	ldr	r3, [r7, #16]
    4454:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    4456:	2318      	movs	r3, #24
    4458:	18fb      	adds	r3, r7, r3
    445a:	885b      	ldrh	r3, [r3, #2]
    445c:	b29a      	uxth	r2, r3
    445e:	2318      	movs	r3, #24
    4460:	18fb      	adds	r3, r7, r3
    4462:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    4464:	68bb      	ldr	r3, [r7, #8]
    4466:	221f      	movs	r2, #31
    4468:	18bc      	adds	r4, r7, r2
    446a:	2218      	movs	r2, #24
    446c:	18b9      	adds	r1, r7, r2
    446e:	2208      	movs	r2, #8
    4470:	0018      	movs	r0, r3
    4472:	4b4f      	ldr	r3, [pc, #316]	; (45b0 <hif_send+0x318>)
    4474:	4798      	blx	r3
    4476:	0003      	movs	r3, r0
    4478:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    447a:	231f      	movs	r3, #31
    447c:	18fb      	adds	r3, r7, r3
    447e:	781b      	ldrb	r3, [r3, #0]
    4480:	b25b      	sxtb	r3, r3
    4482:	2b00      	cmp	r3, #0
    4484:	d000      	beq.n	4488 <hif_send+0x1f0>
    4486:	e078      	b.n	457a <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    4488:	68bb      	ldr	r3, [r7, #8]
    448a:	3308      	adds	r3, #8
    448c:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    448e:	683b      	ldr	r3, [r7, #0]
    4490:	2b00      	cmp	r3, #0
    4492:	d015      	beq.n	44c0 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    4494:	68b8      	ldr	r0, [r7, #8]
    4496:	1d3b      	adds	r3, r7, #4
    4498:	881a      	ldrh	r2, [r3, #0]
    449a:	231f      	movs	r3, #31
    449c:	18fc      	adds	r4, r7, r3
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	0019      	movs	r1, r3
    44a2:	4b43      	ldr	r3, [pc, #268]	; (45b0 <hif_send+0x318>)
    44a4:	4798      	blx	r3
    44a6:	0003      	movs	r3, r0
    44a8:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    44aa:	231f      	movs	r3, #31
    44ac:	18fb      	adds	r3, r7, r3
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	b25b      	sxtb	r3, r3
    44b2:	2b00      	cmp	r3, #0
    44b4:	d163      	bne.n	457e <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    44b6:	1d3b      	adds	r3, r7, #4
    44b8:	881a      	ldrh	r2, [r3, #0]
    44ba:	68bb      	ldr	r3, [r7, #8]
    44bc:	18d3      	adds	r3, r2, r3
    44be:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    44c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    44c2:	2b00      	cmp	r3, #0
    44c4:	d021      	beq.n	450a <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    44c6:	2338      	movs	r3, #56	; 0x38
    44c8:	18fb      	adds	r3, r7, r3
    44ca:	881a      	ldrh	r2, [r3, #0]
    44cc:	1d3b      	adds	r3, r7, #4
    44ce:	881b      	ldrh	r3, [r3, #0]
    44d0:	1ad3      	subs	r3, r2, r3
    44d2:	001a      	movs	r2, r3
    44d4:	68bb      	ldr	r3, [r7, #8]
    44d6:	18d3      	adds	r3, r2, r3
    44d8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    44da:	68b8      	ldr	r0, [r7, #8]
    44dc:	2334      	movs	r3, #52	; 0x34
    44de:	18fb      	adds	r3, r7, r3
    44e0:	881a      	ldrh	r2, [r3, #0]
    44e2:	231f      	movs	r3, #31
    44e4:	18fc      	adds	r4, r7, r3
    44e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    44e8:	0019      	movs	r1, r3
    44ea:	4b31      	ldr	r3, [pc, #196]	; (45b0 <hif_send+0x318>)
    44ec:	4798      	blx	r3
    44ee:	0003      	movs	r3, r0
    44f0:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    44f2:	231f      	movs	r3, #31
    44f4:	18fb      	adds	r3, r7, r3
    44f6:	781b      	ldrb	r3, [r3, #0]
    44f8:	b25b      	sxtb	r3, r3
    44fa:	2b00      	cmp	r3, #0
    44fc:	d141      	bne.n	4582 <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    44fe:	2334      	movs	r3, #52	; 0x34
    4500:	18fb      	adds	r3, r7, r3
    4502:	881a      	ldrh	r2, [r3, #0]
    4504:	68bb      	ldr	r3, [r7, #8]
    4506:	18d3      	adds	r3, r2, r3
    4508:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    450a:	693b      	ldr	r3, [r7, #16]
    450c:	009b      	lsls	r3, r3, #2
    450e:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    4510:	697b      	ldr	r3, [r7, #20]
    4512:	2202      	movs	r2, #2
    4514:	4313      	orrs	r3, r2
    4516:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    4518:	697b      	ldr	r3, [r7, #20]
    451a:	221f      	movs	r2, #31
    451c:	18bc      	adds	r4, r7, r2
    451e:	4a25      	ldr	r2, [pc, #148]	; (45b4 <hif_send+0x31c>)
    4520:	0019      	movs	r1, r3
    4522:	0010      	movs	r0, r2
    4524:	4b1d      	ldr	r3, [pc, #116]	; (459c <hif_send+0x304>)
    4526:	4798      	blx	r3
    4528:	0003      	movs	r3, r0
    452a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    452c:	231f      	movs	r3, #31
    452e:	18fb      	adds	r3, r7, r3
    4530:	781b      	ldrb	r3, [r3, #0]
    4532:	b25b      	sxtb	r3, r3
    4534:	2b00      	cmp	r3, #0
    4536:	d015      	beq.n	4564 <hif_send+0x2cc>
    4538:	e024      	b.n	4584 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    453a:	231f      	movs	r3, #31
    453c:	18fb      	adds	r3, r7, r3
    453e:	22fd      	movs	r2, #253	; 0xfd
    4540:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    4542:	e01f      	b.n	4584 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    4544:	23a0      	movs	r3, #160	; 0xa0
    4546:	33ff      	adds	r3, #255	; 0xff
    4548:	001a      	movs	r2, r3
    454a:	491b      	ldr	r1, [pc, #108]	; (45b8 <hif_send+0x320>)
    454c:	4b1b      	ldr	r3, [pc, #108]	; (45bc <hif_send+0x324>)
    454e:	0018      	movs	r0, r3
    4550:	4b1b      	ldr	r3, [pc, #108]	; (45c0 <hif_send+0x328>)
    4552:	4798      	blx	r3
    4554:	4b1b      	ldr	r3, [pc, #108]	; (45c4 <hif_send+0x32c>)
    4556:	0018      	movs	r0, r3
    4558:	4b1b      	ldr	r3, [pc, #108]	; (45c8 <hif_send+0x330>)
    455a:	4798      	blx	r3
    455c:	200d      	movs	r0, #13
    455e:	4b1b      	ldr	r3, [pc, #108]	; (45cc <hif_send+0x334>)
    4560:	4798      	blx	r3
		goto ERR1;
    4562:	e00f      	b.n	4584 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    4564:	231f      	movs	r3, #31
    4566:	18fc      	adds	r4, r7, r3
    4568:	4b19      	ldr	r3, [pc, #100]	; (45d0 <hif_send+0x338>)
    456a:	4798      	blx	r3
    456c:	0003      	movs	r3, r0
    456e:	7023      	strb	r3, [r4, #0]
    4570:	e008      	b.n	4584 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	e006      	b.n	4584 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    4576:	46c0      	nop			; (mov r8, r8)
    4578:	e004      	b.n	4584 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	e002      	b.n	4584 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    457e:	46c0      	nop			; (mov r8, r8)
    4580:	e000      	b.n	4584 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    4582:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    4584:	231f      	movs	r3, #31
    4586:	18fb      	adds	r3, r7, r3
    4588:	781b      	ldrb	r3, [r3, #0]
    458a:	b25b      	sxtb	r3, r3
}
    458c:	0018      	movs	r0, r3
    458e:	46bd      	mov	sp, r7
    4590:	b009      	add	sp, #36	; 0x24
    4592:	bd90      	pop	{r4, r7, pc}
    4594:	000040cd 	.word	0x000040cd
    4598:	0000108c 	.word	0x0000108c
    459c:	000061fd 	.word	0x000061fd
    45a0:	00001078 	.word	0x00001078
    45a4:	000061d9 	.word	0x000061d9
    45a8:	00150400 	.word	0x00150400
    45ac:	000003e7 	.word	0x000003e7
    45b0:	00006345 	.word	0x00006345
    45b4:	0000106c 	.word	0x0000106c
    45b8:	00012f48 	.word	0x00012f48
    45bc:	00012ce8 	.word	0x00012ce8
    45c0:	000114d9 	.word	0x000114d9
    45c4:	00012cfc 	.word	0x00012cfc
    45c8:	000115f9 	.word	0x000115f9
    45cc:	0001150d 	.word	0x0001150d
    45d0:	00004165 	.word	0x00004165

000045d4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    45d4:	b590      	push	{r4, r7, lr}
    45d6:	b087      	sub	sp, #28
    45d8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    45da:	230f      	movs	r3, #15
    45dc:	18fb      	adds	r3, r7, r3
    45de:	22fa      	movs	r2, #250	; 0xfa
    45e0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    45e2:	230f      	movs	r3, #15
    45e4:	18fc      	adds	r4, r7, r3
    45e6:	4bda      	ldr	r3, [pc, #872]	; (4950 <hif_isr+0x37c>)
    45e8:	4798      	blx	r3
    45ea:	0003      	movs	r3, r0
    45ec:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    45ee:	230f      	movs	r3, #15
    45f0:	18fb      	adds	r3, r7, r3
    45f2:	781b      	ldrb	r3, [r3, #0]
    45f4:	b25b      	sxtb	r3, r3
    45f6:	2b00      	cmp	r3, #0
    45f8:	d000      	beq.n	45fc <hif_isr+0x28>
    45fa:	e192      	b.n	4922 <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    45fc:	230f      	movs	r3, #15
    45fe:	18fc      	adds	r4, r7, r3
    4600:	2308      	movs	r3, #8
    4602:	18fb      	adds	r3, r7, r3
    4604:	4ad3      	ldr	r2, [pc, #844]	; (4954 <hif_isr+0x380>)
    4606:	0019      	movs	r1, r3
    4608:	0010      	movs	r0, r2
    460a:	4bd3      	ldr	r3, [pc, #844]	; (4958 <hif_isr+0x384>)
    460c:	4798      	blx	r3
    460e:	0003      	movs	r3, r0
    4610:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    4612:	230f      	movs	r3, #15
    4614:	18fb      	adds	r3, r7, r3
    4616:	781b      	ldrb	r3, [r3, #0]
    4618:	b25b      	sxtb	r3, r3
    461a:	2b00      	cmp	r3, #0
    461c:	d000      	beq.n	4620 <hif_isr+0x4c>
    461e:	e172      	b.n	4906 <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    4620:	68bb      	ldr	r3, [r7, #8]
    4622:	2201      	movs	r2, #1
    4624:	4013      	ands	r3, r2
    4626:	d100      	bne.n	462a <hif_isr+0x56>
    4628:	e15c      	b.n	48e4 <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    462a:	2000      	movs	r0, #0
    462c:	4bcb      	ldr	r3, [pc, #812]	; (495c <hif_isr+0x388>)
    462e:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    4630:	68bb      	ldr	r3, [r7, #8]
    4632:	2201      	movs	r2, #1
    4634:	4393      	bics	r3, r2
    4636:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    4638:	68bb      	ldr	r3, [r7, #8]
    463a:	220f      	movs	r2, #15
    463c:	18bc      	adds	r4, r7, r2
    463e:	4ac5      	ldr	r2, [pc, #788]	; (4954 <hif_isr+0x380>)
    4640:	0019      	movs	r1, r3
    4642:	0010      	movs	r0, r2
    4644:	4bc6      	ldr	r3, [pc, #792]	; (4960 <hif_isr+0x38c>)
    4646:	4798      	blx	r3
    4648:	0003      	movs	r3, r0
    464a:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    464c:	230f      	movs	r3, #15
    464e:	18fb      	adds	r3, r7, r3
    4650:	781b      	ldrb	r3, [r3, #0]
    4652:	b25b      	sxtb	r3, r3
    4654:	2b00      	cmp	r3, #0
    4656:	d000      	beq.n	465a <hif_isr+0x86>
    4658:	e1bc      	b.n	49d4 <hif_isr+0x400>
				gu8HifSizeDone = 0;
    465a:	4bc2      	ldr	r3, [pc, #776]	; (4964 <hif_isr+0x390>)
    465c:	2200      	movs	r2, #0
    465e:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    4660:	68bb      	ldr	r3, [r7, #8]
    4662:	089b      	lsrs	r3, r3, #2
    4664:	b29a      	uxth	r2, r3
    4666:	230c      	movs	r3, #12
    4668:	18fb      	adds	r3, r7, r3
    466a:	0512      	lsls	r2, r2, #20
    466c:	0d12      	lsrs	r2, r2, #20
    466e:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    4670:	230c      	movs	r3, #12
    4672:	18fb      	adds	r3, r7, r3
    4674:	881b      	ldrh	r3, [r3, #0]
    4676:	2b00      	cmp	r3, #0
    4678:	d100      	bne.n	467c <hif_isr+0xa8>
    467a:	e121      	b.n	48c0 <hif_isr+0x2ec>
					uint32 address = 0;
    467c:	2300      	movs	r3, #0
    467e:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    4680:	230f      	movs	r3, #15
    4682:	18fc      	adds	r4, r7, r3
    4684:	003b      	movs	r3, r7
    4686:	4ab8      	ldr	r2, [pc, #736]	; (4968 <hif_isr+0x394>)
    4688:	0019      	movs	r1, r3
    468a:	0010      	movs	r0, r2
    468c:	4bb2      	ldr	r3, [pc, #712]	; (4958 <hif_isr+0x384>)
    468e:	4798      	blx	r3
    4690:	0003      	movs	r3, r0
    4692:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    4694:	230f      	movs	r3, #15
    4696:	18fb      	adds	r3, r7, r3
    4698:	781b      	ldrb	r3, [r3, #0]
    469a:	b25b      	sxtb	r3, r3
    469c:	2b00      	cmp	r3, #0
    469e:	d011      	beq.n	46c4 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    46a0:	23e7      	movs	r3, #231	; 0xe7
    46a2:	005a      	lsls	r2, r3, #1
    46a4:	49b1      	ldr	r1, [pc, #708]	; (496c <hif_isr+0x398>)
    46a6:	4bb2      	ldr	r3, [pc, #712]	; (4970 <hif_isr+0x39c>)
    46a8:	0018      	movs	r0, r3
    46aa:	4bb2      	ldr	r3, [pc, #712]	; (4974 <hif_isr+0x3a0>)
    46ac:	4798      	blx	r3
    46ae:	4bb2      	ldr	r3, [pc, #712]	; (4978 <hif_isr+0x3a4>)
    46b0:	0018      	movs	r0, r3
    46b2:	4bb2      	ldr	r3, [pc, #712]	; (497c <hif_isr+0x3a8>)
    46b4:	4798      	blx	r3
    46b6:	200d      	movs	r0, #13
    46b8:	4bb1      	ldr	r3, [pc, #708]	; (4980 <hif_isr+0x3ac>)
    46ba:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    46bc:	2001      	movs	r0, #1
    46be:	4ba7      	ldr	r3, [pc, #668]	; (495c <hif_isr+0x388>)
    46c0:	4798      	blx	r3
						goto ERR1;
    46c2:	e188      	b.n	49d6 <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	220f      	movs	r2, #15
    46c8:	18bc      	adds	r4, r7, r2
    46ca:	1d39      	adds	r1, r7, #4
    46cc:	2204      	movs	r2, #4
    46ce:	0018      	movs	r0, r3
    46d0:	4bac      	ldr	r3, [pc, #688]	; (4984 <hif_isr+0x3b0>)
    46d2:	4798      	blx	r3
    46d4:	0003      	movs	r3, r0
    46d6:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    46d8:	1d3b      	adds	r3, r7, #4
    46da:	885b      	ldrh	r3, [r3, #2]
    46dc:	b29a      	uxth	r2, r3
    46de:	1d3b      	adds	r3, r7, #4
    46e0:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    46e2:	230f      	movs	r3, #15
    46e4:	18fb      	adds	r3, r7, r3
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	b25b      	sxtb	r3, r3
    46ea:	2b00      	cmp	r3, #0
    46ec:	d011      	beq.n	4712 <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    46ee:	23eb      	movs	r3, #235	; 0xeb
    46f0:	005a      	lsls	r2, r3, #1
    46f2:	499e      	ldr	r1, [pc, #632]	; (496c <hif_isr+0x398>)
    46f4:	4b9e      	ldr	r3, [pc, #632]	; (4970 <hif_isr+0x39c>)
    46f6:	0018      	movs	r0, r3
    46f8:	4b9e      	ldr	r3, [pc, #632]	; (4974 <hif_isr+0x3a0>)
    46fa:	4798      	blx	r3
    46fc:	4ba2      	ldr	r3, [pc, #648]	; (4988 <hif_isr+0x3b4>)
    46fe:	0018      	movs	r0, r3
    4700:	4b9e      	ldr	r3, [pc, #632]	; (497c <hif_isr+0x3a8>)
    4702:	4798      	blx	r3
    4704:	200d      	movs	r0, #13
    4706:	4b9e      	ldr	r3, [pc, #632]	; (4980 <hif_isr+0x3ac>)
    4708:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    470a:	2001      	movs	r0, #1
    470c:	4b93      	ldr	r3, [pc, #588]	; (495c <hif_isr+0x388>)
    470e:	4798      	blx	r3
						goto ERR1;
    4710:	e161      	b.n	49d6 <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    4712:	1d3b      	adds	r3, r7, #4
    4714:	885b      	ldrh	r3, [r3, #2]
    4716:	b29b      	uxth	r3, r3
    4718:	220c      	movs	r2, #12
    471a:	18ba      	adds	r2, r7, r2
    471c:	8812      	ldrh	r2, [r2, #0]
    471e:	429a      	cmp	r2, r3
    4720:	d02e      	beq.n	4780 <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    4722:	230c      	movs	r3, #12
    4724:	18fb      	adds	r3, r7, r3
    4726:	881b      	ldrh	r3, [r3, #0]
    4728:	1d3a      	adds	r2, r7, #4
    472a:	8852      	ldrh	r2, [r2, #2]
    472c:	b292      	uxth	r2, r2
    472e:	1a9b      	subs	r3, r3, r2
    4730:	2b04      	cmp	r3, #4
    4732:	dd25      	ble.n	4780 <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    4734:	23e0      	movs	r3, #224	; 0xe0
    4736:	33ff      	adds	r3, #255	; 0xff
    4738:	001a      	movs	r2, r3
    473a:	498c      	ldr	r1, [pc, #560]	; (496c <hif_isr+0x398>)
    473c:	4b8c      	ldr	r3, [pc, #560]	; (4970 <hif_isr+0x39c>)
    473e:	0018      	movs	r0, r3
    4740:	4b8c      	ldr	r3, [pc, #560]	; (4974 <hif_isr+0x3a0>)
    4742:	4798      	blx	r3
    4744:	230c      	movs	r3, #12
    4746:	18fb      	adds	r3, r7, r3
    4748:	8819      	ldrh	r1, [r3, #0]
    474a:	1d3b      	adds	r3, r7, #4
    474c:	885b      	ldrh	r3, [r3, #2]
    474e:	b29b      	uxth	r3, r3
    4750:	001a      	movs	r2, r3
    4752:	1d3b      	adds	r3, r7, #4
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b2db      	uxtb	r3, r3
    4758:	001c      	movs	r4, r3
    475a:	1d3b      	adds	r3, r7, #4
    475c:	785b      	ldrb	r3, [r3, #1]
    475e:	b2db      	uxtb	r3, r3
    4760:	488a      	ldr	r0, [pc, #552]	; (498c <hif_isr+0x3b8>)
    4762:	9300      	str	r3, [sp, #0]
    4764:	0023      	movs	r3, r4
    4766:	4c83      	ldr	r4, [pc, #524]	; (4974 <hif_isr+0x3a0>)
    4768:	47a0      	blx	r4
    476a:	200d      	movs	r0, #13
    476c:	4b84      	ldr	r3, [pc, #528]	; (4980 <hif_isr+0x3ac>)
    476e:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    4770:	2001      	movs	r0, #1
    4772:	4b7a      	ldr	r3, [pc, #488]	; (495c <hif_isr+0x388>)
    4774:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    4776:	230f      	movs	r3, #15
    4778:	18fb      	adds	r3, r7, r3
    477a:	22fa      	movs	r2, #250	; 0xfa
    477c:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    477e:	e12a      	b.n	49d6 <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    4780:	1d3b      	adds	r3, r7, #4
    4782:	781b      	ldrb	r3, [r3, #0]
    4784:	b2db      	uxtb	r3, r3
    4786:	2b01      	cmp	r3, #1
    4788:	d112      	bne.n	47b0 <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    478a:	4b81      	ldr	r3, [pc, #516]	; (4990 <hif_isr+0x3bc>)
    478c:	681b      	ldr	r3, [r3, #0]
    478e:	2b00      	cmp	r3, #0
    4790:	d100      	bne.n	4794 <hif_isr+0x1c0>
    4792:	e07c      	b.n	488e <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    4794:	4b7e      	ldr	r3, [pc, #504]	; (4990 <hif_isr+0x3bc>)
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	1d3a      	adds	r2, r7, #4
    479a:	7852      	ldrb	r2, [r2, #1]
    479c:	b2d0      	uxtb	r0, r2
    479e:	1d3a      	adds	r2, r7, #4
    47a0:	8852      	ldrh	r2, [r2, #2]
    47a2:	b292      	uxth	r2, r2
    47a4:	3a08      	subs	r2, #8
    47a6:	b291      	uxth	r1, r2
    47a8:	683a      	ldr	r2, [r7, #0]
    47aa:	3208      	adds	r2, #8
    47ac:	4798      	blx	r3
    47ae:	e06e      	b.n	488e <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    47b0:	1d3b      	adds	r3, r7, #4
    47b2:	781b      	ldrb	r3, [r3, #0]
    47b4:	b2db      	uxtb	r3, r3
    47b6:	2b02      	cmp	r3, #2
    47b8:	d111      	bne.n	47de <hif_isr+0x20a>
					{
						if(pfIpCb)
    47ba:	4b76      	ldr	r3, [pc, #472]	; (4994 <hif_isr+0x3c0>)
    47bc:	681b      	ldr	r3, [r3, #0]
    47be:	2b00      	cmp	r3, #0
    47c0:	d065      	beq.n	488e <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    47c2:	4b74      	ldr	r3, [pc, #464]	; (4994 <hif_isr+0x3c0>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	1d3a      	adds	r2, r7, #4
    47c8:	7852      	ldrb	r2, [r2, #1]
    47ca:	b2d0      	uxtb	r0, r2
    47cc:	1d3a      	adds	r2, r7, #4
    47ce:	8852      	ldrh	r2, [r2, #2]
    47d0:	b292      	uxth	r2, r2
    47d2:	3a08      	subs	r2, #8
    47d4:	b291      	uxth	r1, r2
    47d6:	683a      	ldr	r2, [r7, #0]
    47d8:	3208      	adds	r2, #8
    47da:	4798      	blx	r3
    47dc:	e057      	b.n	488e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    47de:	1d3b      	adds	r3, r7, #4
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	b2db      	uxtb	r3, r3
    47e4:	2b04      	cmp	r3, #4
    47e6:	d111      	bne.n	480c <hif_isr+0x238>
					{
						if(pfOtaCb)
    47e8:	4b6b      	ldr	r3, [pc, #428]	; (4998 <hif_isr+0x3c4>)
    47ea:	681b      	ldr	r3, [r3, #0]
    47ec:	2b00      	cmp	r3, #0
    47ee:	d04e      	beq.n	488e <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    47f0:	4b69      	ldr	r3, [pc, #420]	; (4998 <hif_isr+0x3c4>)
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	1d3a      	adds	r2, r7, #4
    47f6:	7852      	ldrb	r2, [r2, #1]
    47f8:	b2d0      	uxtb	r0, r2
    47fa:	1d3a      	adds	r2, r7, #4
    47fc:	8852      	ldrh	r2, [r2, #2]
    47fe:	b292      	uxth	r2, r2
    4800:	3a08      	subs	r2, #8
    4802:	b291      	uxth	r1, r2
    4804:	683a      	ldr	r2, [r7, #0]
    4806:	3208      	adds	r2, #8
    4808:	4798      	blx	r3
    480a:	e040      	b.n	488e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    480c:	1d3b      	adds	r3, r7, #4
    480e:	781b      	ldrb	r3, [r3, #0]
    4810:	b2db      	uxtb	r3, r3
    4812:	2b06      	cmp	r3, #6
    4814:	d111      	bne.n	483a <hif_isr+0x266>
					{
						if(pfCryptoCb)
    4816:	4b61      	ldr	r3, [pc, #388]	; (499c <hif_isr+0x3c8>)
    4818:	681b      	ldr	r3, [r3, #0]
    481a:	2b00      	cmp	r3, #0
    481c:	d037      	beq.n	488e <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    481e:	4b5f      	ldr	r3, [pc, #380]	; (499c <hif_isr+0x3c8>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	1d3a      	adds	r2, r7, #4
    4824:	7852      	ldrb	r2, [r2, #1]
    4826:	b2d0      	uxtb	r0, r2
    4828:	1d3a      	adds	r2, r7, #4
    482a:	8852      	ldrh	r2, [r2, #2]
    482c:	b292      	uxth	r2, r2
    482e:	3a08      	subs	r2, #8
    4830:	b291      	uxth	r1, r2
    4832:	683a      	ldr	r2, [r7, #0]
    4834:	3208      	adds	r2, #8
    4836:	4798      	blx	r3
    4838:	e029      	b.n	488e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    483a:	1d3b      	adds	r3, r7, #4
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	b2db      	uxtb	r3, r3
    4840:	2b07      	cmp	r3, #7
    4842:	d111      	bne.n	4868 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    4844:	4b56      	ldr	r3, [pc, #344]	; (49a0 <hif_isr+0x3cc>)
    4846:	681b      	ldr	r3, [r3, #0]
    4848:	2b00      	cmp	r3, #0
    484a:	d020      	beq.n	488e <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    484c:	4b54      	ldr	r3, [pc, #336]	; (49a0 <hif_isr+0x3cc>)
    484e:	681b      	ldr	r3, [r3, #0]
    4850:	1d3a      	adds	r2, r7, #4
    4852:	7852      	ldrb	r2, [r2, #1]
    4854:	b2d0      	uxtb	r0, r2
    4856:	1d3a      	adds	r2, r7, #4
    4858:	8852      	ldrh	r2, [r2, #2]
    485a:	b292      	uxth	r2, r2
    485c:	3a08      	subs	r2, #8
    485e:	b291      	uxth	r1, r2
    4860:	683a      	ldr	r2, [r7, #0]
    4862:	3208      	adds	r2, #8
    4864:	4798      	blx	r3
    4866:	e012      	b.n	488e <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    4868:	4a4e      	ldr	r2, [pc, #312]	; (49a4 <hif_isr+0x3d0>)
    486a:	4940      	ldr	r1, [pc, #256]	; (496c <hif_isr+0x398>)
    486c:	4b40      	ldr	r3, [pc, #256]	; (4970 <hif_isr+0x39c>)
    486e:	0018      	movs	r0, r3
    4870:	4b40      	ldr	r3, [pc, #256]	; (4974 <hif_isr+0x3a0>)
    4872:	4798      	blx	r3
    4874:	4b4c      	ldr	r3, [pc, #304]	; (49a8 <hif_isr+0x3d4>)
    4876:	0018      	movs	r0, r3
    4878:	4b40      	ldr	r3, [pc, #256]	; (497c <hif_isr+0x3a8>)
    487a:	4798      	blx	r3
    487c:	200d      	movs	r0, #13
    487e:	4b40      	ldr	r3, [pc, #256]	; (4980 <hif_isr+0x3ac>)
    4880:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    4882:	230f      	movs	r3, #15
    4884:	18fb      	adds	r3, r7, r3
    4886:	22fa      	movs	r2, #250	; 0xfa
    4888:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	e0a3      	b.n	49d6 <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    488e:	4b35      	ldr	r3, [pc, #212]	; (4964 <hif_isr+0x390>)
    4890:	781b      	ldrb	r3, [r3, #0]
    4892:	b2db      	uxtb	r3, r3
    4894:	2b00      	cmp	r3, #0
    4896:	d153      	bne.n	4940 <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    4898:	4a44      	ldr	r2, [pc, #272]	; (49ac <hif_isr+0x3d8>)
    489a:	4934      	ldr	r1, [pc, #208]	; (496c <hif_isr+0x398>)
    489c:	4b34      	ldr	r3, [pc, #208]	; (4970 <hif_isr+0x39c>)
    489e:	0018      	movs	r0, r3
    48a0:	4b34      	ldr	r3, [pc, #208]	; (4974 <hif_isr+0x3a0>)
    48a2:	4798      	blx	r3
    48a4:	4b42      	ldr	r3, [pc, #264]	; (49b0 <hif_isr+0x3dc>)
    48a6:	0018      	movs	r0, r3
    48a8:	4b34      	ldr	r3, [pc, #208]	; (497c <hif_isr+0x3a8>)
    48aa:	4798      	blx	r3
    48ac:	200d      	movs	r0, #13
    48ae:	4b34      	ldr	r3, [pc, #208]	; (4980 <hif_isr+0x3ac>)
    48b0:	4798      	blx	r3
						ret = hif_set_rx_done();
    48b2:	230f      	movs	r3, #15
    48b4:	18fc      	adds	r4, r7, r3
    48b6:	4b3f      	ldr	r3, [pc, #252]	; (49b4 <hif_isr+0x3e0>)
    48b8:	4798      	blx	r3
    48ba:	0003      	movs	r3, r0
    48bc:	7023      	strb	r3, [r4, #0]
    48be:	e03f      	b.n	4940 <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    48c0:	230f      	movs	r3, #15
    48c2:	18fb      	adds	r3, r7, r3
    48c4:	22fe      	movs	r2, #254	; 0xfe
    48c6:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    48c8:	4a3b      	ldr	r2, [pc, #236]	; (49b8 <hif_isr+0x3e4>)
    48ca:	4928      	ldr	r1, [pc, #160]	; (496c <hif_isr+0x398>)
    48cc:	4b28      	ldr	r3, [pc, #160]	; (4970 <hif_isr+0x39c>)
    48ce:	0018      	movs	r0, r3
    48d0:	4b28      	ldr	r3, [pc, #160]	; (4974 <hif_isr+0x3a0>)
    48d2:	4798      	blx	r3
    48d4:	4b39      	ldr	r3, [pc, #228]	; (49bc <hif_isr+0x3e8>)
    48d6:	0018      	movs	r0, r3
    48d8:	4b28      	ldr	r3, [pc, #160]	; (497c <hif_isr+0x3a8>)
    48da:	4798      	blx	r3
    48dc:	200d      	movs	r0, #13
    48de:	4b28      	ldr	r3, [pc, #160]	; (4980 <hif_isr+0x3ac>)
    48e0:	4798      	blx	r3
					goto ERR1;
    48e2:	e078      	b.n	49d6 <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    48e4:	2386      	movs	r3, #134	; 0x86
    48e6:	009a      	lsls	r2, r3, #2
    48e8:	4920      	ldr	r1, [pc, #128]	; (496c <hif_isr+0x398>)
    48ea:	4b21      	ldr	r3, [pc, #132]	; (4970 <hif_isr+0x39c>)
    48ec:	0018      	movs	r0, r3
    48ee:	4b21      	ldr	r3, [pc, #132]	; (4974 <hif_isr+0x3a0>)
    48f0:	4798      	blx	r3
    48f2:	68ba      	ldr	r2, [r7, #8]
    48f4:	4b32      	ldr	r3, [pc, #200]	; (49c0 <hif_isr+0x3ec>)
    48f6:	0011      	movs	r1, r2
    48f8:	0018      	movs	r0, r3
    48fa:	4b1e      	ldr	r3, [pc, #120]	; (4974 <hif_isr+0x3a0>)
    48fc:	4798      	blx	r3
    48fe:	200d      	movs	r0, #13
    4900:	4b1f      	ldr	r3, [pc, #124]	; (4980 <hif_isr+0x3ac>)
    4902:	4798      	blx	r3
    4904:	e01c      	b.n	4940 <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    4906:	4a2f      	ldr	r2, [pc, #188]	; (49c4 <hif_isr+0x3f0>)
    4908:	4918      	ldr	r1, [pc, #96]	; (496c <hif_isr+0x398>)
    490a:	4b19      	ldr	r3, [pc, #100]	; (4970 <hif_isr+0x39c>)
    490c:	0018      	movs	r0, r3
    490e:	4b19      	ldr	r3, [pc, #100]	; (4974 <hif_isr+0x3a0>)
    4910:	4798      	blx	r3
    4912:	4b2d      	ldr	r3, [pc, #180]	; (49c8 <hif_isr+0x3f4>)
    4914:	0018      	movs	r0, r3
    4916:	4b19      	ldr	r3, [pc, #100]	; (497c <hif_isr+0x3a8>)
    4918:	4798      	blx	r3
    491a:	200d      	movs	r0, #13
    491c:	4b18      	ldr	r3, [pc, #96]	; (4980 <hif_isr+0x3ac>)
    491e:	4798      	blx	r3
			goto ERR1;
    4920:	e059      	b.n	49d6 <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    4922:	2389      	movs	r3, #137	; 0x89
    4924:	009a      	lsls	r2, r3, #2
    4926:	4911      	ldr	r1, [pc, #68]	; (496c <hif_isr+0x398>)
    4928:	4b11      	ldr	r3, [pc, #68]	; (4970 <hif_isr+0x39c>)
    492a:	0018      	movs	r0, r3
    492c:	4b11      	ldr	r3, [pc, #68]	; (4974 <hif_isr+0x3a0>)
    492e:	4798      	blx	r3
    4930:	4b26      	ldr	r3, [pc, #152]	; (49cc <hif_isr+0x3f8>)
    4932:	0018      	movs	r0, r3
    4934:	4b11      	ldr	r3, [pc, #68]	; (497c <hif_isr+0x3a8>)
    4936:	4798      	blx	r3
    4938:	200d      	movs	r0, #13
    493a:	4b11      	ldr	r3, [pc, #68]	; (4980 <hif_isr+0x3ac>)
    493c:	4798      	blx	r3
		goto ERR1;
    493e:	e04a      	b.n	49d6 <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    4940:	230f      	movs	r3, #15
    4942:	18fc      	adds	r4, r7, r3
    4944:	4b22      	ldr	r3, [pc, #136]	; (49d0 <hif_isr+0x3fc>)
    4946:	4798      	blx	r3
    4948:	0003      	movs	r3, r0
    494a:	7023      	strb	r3, [r4, #0]
    494c:	e043      	b.n	49d6 <hif_isr+0x402>
    494e:	46c0      	nop			; (mov r8, r8)
    4950:	000040cd 	.word	0x000040cd
    4954:	00001070 	.word	0x00001070
    4958:	000061d9 	.word	0x000061d9
    495c:	000036ad 	.word	0x000036ad
    4960:	000061fd 	.word	0x000061fd
    4964:	200000d2 	.word	0x200000d2
    4968:	00001084 	.word	0x00001084
    496c:	00012f54 	.word	0x00012f54
    4970:	00012ce8 	.word	0x00012ce8
    4974:	000114d9 	.word	0x000114d9
    4978:	00012d18 	.word	0x00012d18
    497c:	000115f9 	.word	0x000115f9
    4980:	0001150d 	.word	0x0001150d
    4984:	0000624d 	.word	0x0000624d
    4988:	00012d3c 	.word	0x00012d3c
    498c:	00012d54 	.word	0x00012d54
    4990:	200000d4 	.word	0x200000d4
    4994:	200000d8 	.word	0x200000d8
    4998:	200000dc 	.word	0x200000dc
    499c:	200000e8 	.word	0x200000e8
    49a0:	200000e0 	.word	0x200000e0
    49a4:	00000202 	.word	0x00000202
    49a8:	00012d94 	.word	0x00012d94
    49ac:	00000209 	.word	0x00000209
    49b0:	00012dac 	.word	0x00012dac
    49b4:	00004045 	.word	0x00004045
    49b8:	00000211 	.word	0x00000211
    49bc:	00012dd0 	.word	0x00012dd0
    49c0:	00012de4 	.word	0x00012de4
    49c4:	0000021e 	.word	0x0000021e
    49c8:	00012e00 	.word	0x00012e00
    49cc:	00012e24 	.word	0x00012e24
    49d0:	00004165 	.word	0x00004165

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    49d4:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    49d6:	230f      	movs	r3, #15
    49d8:	18fb      	adds	r3, r7, r3
    49da:	781b      	ldrb	r3, [r3, #0]
    49dc:	b25b      	sxtb	r3, r3
}
    49de:	0018      	movs	r0, r3
    49e0:	46bd      	mov	sp, r7
    49e2:	b005      	add	sp, #20
    49e4:	bd90      	pop	{r4, r7, pc}
    49e6:	46c0      	nop			; (mov r8, r8)

000049e8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    49e8:	b590      	push	{r4, r7, lr}
    49ea:	b083      	sub	sp, #12
    49ec:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    49ee:	1dfb      	adds	r3, r7, #7
    49f0:	2200      	movs	r2, #0
    49f2:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    49f4:	e023      	b.n	4a3e <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    49f6:	4b18      	ldr	r3, [pc, #96]	; (4a58 <hif_handle_isr+0x70>)
    49f8:	781b      	ldrb	r3, [r3, #0]
    49fa:	b2db      	uxtb	r3, r3
    49fc:	3b01      	subs	r3, #1
    49fe:	b2da      	uxtb	r2, r3
    4a00:	4b15      	ldr	r3, [pc, #84]	; (4a58 <hif_handle_isr+0x70>)
    4a02:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    4a04:	1dfc      	adds	r4, r7, #7
    4a06:	4b15      	ldr	r3, [pc, #84]	; (4a5c <hif_handle_isr+0x74>)
    4a08:	4798      	blx	r3
    4a0a:	0003      	movs	r3, r0
    4a0c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    4a0e:	1dfb      	adds	r3, r7, #7
    4a10:	781b      	ldrb	r3, [r3, #0]
    4a12:	b25b      	sxtb	r3, r3
    4a14:	2b00      	cmp	r3, #0
    4a16:	d100      	bne.n	4a1a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    4a18:	e011      	b.n	4a3e <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    4a1a:	4a11      	ldr	r2, [pc, #68]	; (4a60 <hif_handle_isr+0x78>)
    4a1c:	4911      	ldr	r1, [pc, #68]	; (4a64 <hif_handle_isr+0x7c>)
    4a1e:	4b12      	ldr	r3, [pc, #72]	; (4a68 <hif_handle_isr+0x80>)
    4a20:	0018      	movs	r0, r3
    4a22:	4b12      	ldr	r3, [pc, #72]	; (4a6c <hif_handle_isr+0x84>)
    4a24:	4798      	blx	r3
    4a26:	1dfb      	adds	r3, r7, #7
    4a28:	2200      	movs	r2, #0
    4a2a:	569a      	ldrsb	r2, [r3, r2]
    4a2c:	4b10      	ldr	r3, [pc, #64]	; (4a70 <hif_handle_isr+0x88>)
    4a2e:	0011      	movs	r1, r2
    4a30:	0018      	movs	r0, r3
    4a32:	4b0e      	ldr	r3, [pc, #56]	; (4a6c <hif_handle_isr+0x84>)
    4a34:	4798      	blx	r3
    4a36:	200d      	movs	r0, #13
    4a38:	4b0e      	ldr	r3, [pc, #56]	; (4a74 <hif_handle_isr+0x8c>)
    4a3a:	4798      	blx	r3
			}
		}
    4a3c:	e7e2      	b.n	4a04 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    4a3e:	4b06      	ldr	r3, [pc, #24]	; (4a58 <hif_handle_isr+0x70>)
    4a40:	781b      	ldrb	r3, [r3, #0]
    4a42:	b2db      	uxtb	r3, r3
    4a44:	2b00      	cmp	r3, #0
    4a46:	d1d6      	bne.n	49f6 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    4a48:	1dfb      	adds	r3, r7, #7
    4a4a:	781b      	ldrb	r3, [r3, #0]
    4a4c:	b25b      	sxtb	r3, r3
}
    4a4e:	0018      	movs	r0, r3
    4a50:	46bd      	mov	sp, r7
    4a52:	b003      	add	sp, #12
    4a54:	bd90      	pop	{r4, r7, pc}
    4a56:	46c0      	nop			; (mov r8, r8)
    4a58:	200000d3 	.word	0x200000d3
    4a5c:	000045d5 	.word	0x000045d5
    4a60:	00000243 	.word	0x00000243
    4a64:	00012f5c 	.word	0x00012f5c
    4a68:	00012ce8 	.word	0x00012ce8
    4a6c:	000114d9 	.word	0x000114d9
    4a70:	00012e44 	.word	0x00012e44
    4a74:	0001150d 	.word	0x0001150d

00004a78 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    4a78:	b590      	push	{r4, r7, lr}
    4a7a:	b089      	sub	sp, #36	; 0x24
    4a7c:	af00      	add	r7, sp, #0
    4a7e:	60f8      	str	r0, [r7, #12]
    4a80:	60b9      	str	r1, [r7, #8]
    4a82:	0019      	movs	r1, r3
    4a84:	1dbb      	adds	r3, r7, #6
    4a86:	801a      	strh	r2, [r3, #0]
    4a88:	1d7b      	adds	r3, r7, #5
    4a8a:	1c0a      	adds	r2, r1, #0
    4a8c:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    4a8e:	231f      	movs	r3, #31
    4a90:	18fb      	adds	r3, r7, r3
    4a92:	2200      	movs	r2, #0
    4a94:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    4a96:	68fb      	ldr	r3, [r7, #12]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d006      	beq.n	4aaa <hif_receive+0x32>
    4a9c:	68bb      	ldr	r3, [r7, #8]
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d003      	beq.n	4aaa <hif_receive+0x32>
    4aa2:	1dbb      	adds	r3, r7, #6
    4aa4:	881b      	ldrh	r3, [r3, #0]
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	d11f      	bne.n	4aea <hif_receive+0x72>
	{
		if(isDone)
    4aaa:	1d7b      	adds	r3, r7, #5
    4aac:	781b      	ldrb	r3, [r3, #0]
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d009      	beq.n	4ac6 <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    4ab2:	4b5f      	ldr	r3, [pc, #380]	; (4c30 <hif_receive+0x1b8>)
    4ab4:	2201      	movs	r2, #1
    4ab6:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    4ab8:	231f      	movs	r3, #31
    4aba:	18fc      	adds	r4, r7, r3
    4abc:	4b5d      	ldr	r3, [pc, #372]	; (4c34 <hif_receive+0x1bc>)
    4abe:	4798      	blx	r3
    4ac0:	0003      	movs	r3, r0
    4ac2:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    4ac4:	e0ac      	b.n	4c20 <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    4ac6:	231f      	movs	r3, #31
    4ac8:	18fb      	adds	r3, r7, r3
    4aca:	22f4      	movs	r2, #244	; 0xf4
    4acc:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    4ace:	4a5a      	ldr	r2, [pc, #360]	; (4c38 <hif_receive+0x1c0>)
    4ad0:	495a      	ldr	r1, [pc, #360]	; (4c3c <hif_receive+0x1c4>)
    4ad2:	4b5b      	ldr	r3, [pc, #364]	; (4c40 <hif_receive+0x1c8>)
    4ad4:	0018      	movs	r0, r3
    4ad6:	4b5b      	ldr	r3, [pc, #364]	; (4c44 <hif_receive+0x1cc>)
    4ad8:	4798      	blx	r3
    4ada:	4b5b      	ldr	r3, [pc, #364]	; (4c48 <hif_receive+0x1d0>)
    4adc:	0018      	movs	r0, r3
    4ade:	4b5b      	ldr	r3, [pc, #364]	; (4c4c <hif_receive+0x1d4>)
    4ae0:	4798      	blx	r3
    4ae2:	200d      	movs	r0, #13
    4ae4:	4b5a      	ldr	r3, [pc, #360]	; (4c50 <hif_receive+0x1d8>)
    4ae6:	4798      	blx	r3
		}
		goto ERR1;
    4ae8:	e09a      	b.n	4c20 <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    4aea:	231f      	movs	r3, #31
    4aec:	18fc      	adds	r4, r7, r3
    4aee:	2314      	movs	r3, #20
    4af0:	18fb      	adds	r3, r7, r3
    4af2:	4a58      	ldr	r2, [pc, #352]	; (4c54 <hif_receive+0x1dc>)
    4af4:	0019      	movs	r1, r3
    4af6:	0010      	movs	r0, r2
    4af8:	4b57      	ldr	r3, [pc, #348]	; (4c58 <hif_receive+0x1e0>)
    4afa:	4798      	blx	r3
    4afc:	0003      	movs	r3, r0
    4afe:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    4b00:	231f      	movs	r3, #31
    4b02:	18fb      	adds	r3, r7, r3
    4b04:	781b      	ldrb	r3, [r3, #0]
    4b06:	b25b      	sxtb	r3, r3
    4b08:	2b00      	cmp	r3, #0
    4b0a:	d000      	beq.n	4b0e <hif_receive+0x96>
    4b0c:	e083      	b.n	4c16 <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    4b0e:	697b      	ldr	r3, [r7, #20]
    4b10:	089b      	lsrs	r3, r3, #2
    4b12:	b29a      	uxth	r2, r3
    4b14:	231c      	movs	r3, #28
    4b16:	18fb      	adds	r3, r7, r3
    4b18:	0512      	lsls	r2, r2, #20
    4b1a:	0d12      	lsrs	r2, r2, #20
    4b1c:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    4b1e:	231f      	movs	r3, #31
    4b20:	18fc      	adds	r4, r7, r3
    4b22:	2318      	movs	r3, #24
    4b24:	18fb      	adds	r3, r7, r3
    4b26:	4a4d      	ldr	r2, [pc, #308]	; (4c5c <hif_receive+0x1e4>)
    4b28:	0019      	movs	r1, r3
    4b2a:	0010      	movs	r0, r2
    4b2c:	4b4a      	ldr	r3, [pc, #296]	; (4c58 <hif_receive+0x1e0>)
    4b2e:	4798      	blx	r3
    4b30:	0003      	movs	r3, r0
    4b32:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    4b34:	231f      	movs	r3, #31
    4b36:	18fb      	adds	r3, r7, r3
    4b38:	781b      	ldrb	r3, [r3, #0]
    4b3a:	b25b      	sxtb	r3, r3
    4b3c:	2b00      	cmp	r3, #0
    4b3e:	d000      	beq.n	4b42 <hif_receive+0xca>
    4b40:	e06b      	b.n	4c1a <hif_receive+0x1a2>


	if(u16Sz > size)
    4b42:	1dba      	adds	r2, r7, #6
    4b44:	231c      	movs	r3, #28
    4b46:	18fb      	adds	r3, r7, r3
    4b48:	8812      	ldrh	r2, [r2, #0]
    4b4a:	881b      	ldrh	r3, [r3, #0]
    4b4c:	429a      	cmp	r2, r3
    4b4e:	d916      	bls.n	4b7e <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    4b50:	231f      	movs	r3, #31
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	22f4      	movs	r2, #244	; 0xf4
    4b56:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    4b58:	4a41      	ldr	r2, [pc, #260]	; (4c60 <hif_receive+0x1e8>)
    4b5a:	4938      	ldr	r1, [pc, #224]	; (4c3c <hif_receive+0x1c4>)
    4b5c:	4b38      	ldr	r3, [pc, #224]	; (4c40 <hif_receive+0x1c8>)
    4b5e:	0018      	movs	r0, r3
    4b60:	4b38      	ldr	r3, [pc, #224]	; (4c44 <hif_receive+0x1cc>)
    4b62:	4798      	blx	r3
    4b64:	1dbb      	adds	r3, r7, #6
    4b66:	8819      	ldrh	r1, [r3, #0]
    4b68:	231c      	movs	r3, #28
    4b6a:	18fb      	adds	r3, r7, r3
    4b6c:	881a      	ldrh	r2, [r3, #0]
    4b6e:	4b3d      	ldr	r3, [pc, #244]	; (4c64 <hif_receive+0x1ec>)
    4b70:	0018      	movs	r0, r3
    4b72:	4b34      	ldr	r3, [pc, #208]	; (4c44 <hif_receive+0x1cc>)
    4b74:	4798      	blx	r3
    4b76:	200d      	movs	r0, #13
    4b78:	4b35      	ldr	r3, [pc, #212]	; (4c50 <hif_receive+0x1d8>)
    4b7a:	4798      	blx	r3
		goto ERR1;
    4b7c:	e050      	b.n	4c20 <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    4b7e:	69bb      	ldr	r3, [r7, #24]
    4b80:	68fa      	ldr	r2, [r7, #12]
    4b82:	429a      	cmp	r2, r3
    4b84:	d30a      	bcc.n	4b9c <hif_receive+0x124>
    4b86:	1dbb      	adds	r3, r7, #6
    4b88:	881a      	ldrh	r2, [r3, #0]
    4b8a:	68fb      	ldr	r3, [r7, #12]
    4b8c:	18d2      	adds	r2, r2, r3
    4b8e:	231c      	movs	r3, #28
    4b90:	18fb      	adds	r3, r7, r3
    4b92:	8819      	ldrh	r1, [r3, #0]
    4b94:	69bb      	ldr	r3, [r7, #24]
    4b96:	18cb      	adds	r3, r1, r3
    4b98:	429a      	cmp	r2, r3
    4b9a:	d912      	bls.n	4bc2 <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    4b9c:	231f      	movs	r3, #31
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	22f4      	movs	r2, #244	; 0xf4
    4ba2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    4ba4:	23a0      	movs	r3, #160	; 0xa0
    4ba6:	009a      	lsls	r2, r3, #2
    4ba8:	4924      	ldr	r1, [pc, #144]	; (4c3c <hif_receive+0x1c4>)
    4baa:	4b25      	ldr	r3, [pc, #148]	; (4c40 <hif_receive+0x1c8>)
    4bac:	0018      	movs	r0, r3
    4bae:	4b25      	ldr	r3, [pc, #148]	; (4c44 <hif_receive+0x1cc>)
    4bb0:	4798      	blx	r3
    4bb2:	4b2d      	ldr	r3, [pc, #180]	; (4c68 <hif_receive+0x1f0>)
    4bb4:	0018      	movs	r0, r3
    4bb6:	4b25      	ldr	r3, [pc, #148]	; (4c4c <hif_receive+0x1d4>)
    4bb8:	4798      	blx	r3
    4bba:	200d      	movs	r0, #13
    4bbc:	4b24      	ldr	r3, [pc, #144]	; (4c50 <hif_receive+0x1d8>)
    4bbe:	4798      	blx	r3
		goto ERR1;
    4bc0:	e02e      	b.n	4c20 <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    4bc2:	1dbb      	adds	r3, r7, #6
    4bc4:	881a      	ldrh	r2, [r3, #0]
    4bc6:	231f      	movs	r3, #31
    4bc8:	18fc      	adds	r4, r7, r3
    4bca:	68b9      	ldr	r1, [r7, #8]
    4bcc:	68fb      	ldr	r3, [r7, #12]
    4bce:	0018      	movs	r0, r3
    4bd0:	4b26      	ldr	r3, [pc, #152]	; (4c6c <hif_receive+0x1f4>)
    4bd2:	4798      	blx	r3
    4bd4:	0003      	movs	r3, r0
    4bd6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    4bd8:	231f      	movs	r3, #31
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	781b      	ldrb	r3, [r3, #0]
    4bde:	b25b      	sxtb	r3, r3
    4be0:	2b00      	cmp	r3, #0
    4be2:	d11c      	bne.n	4c1e <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    4be4:	231c      	movs	r3, #28
    4be6:	18fb      	adds	r3, r7, r3
    4be8:	881a      	ldrh	r2, [r3, #0]
    4bea:	69bb      	ldr	r3, [r7, #24]
    4bec:	18d2      	adds	r2, r2, r3
    4bee:	1dbb      	adds	r3, r7, #6
    4bf0:	8819      	ldrh	r1, [r3, #0]
    4bf2:	68fb      	ldr	r3, [r7, #12]
    4bf4:	18cb      	adds	r3, r1, r3
    4bf6:	429a      	cmp	r2, r3
    4bf8:	d003      	beq.n	4c02 <hif_receive+0x18a>
    4bfa:	1d7b      	adds	r3, r7, #5
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d00e      	beq.n	4c20 <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    4c02:	4b0b      	ldr	r3, [pc, #44]	; (4c30 <hif_receive+0x1b8>)
    4c04:	2201      	movs	r2, #1
    4c06:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    4c08:	231f      	movs	r3, #31
    4c0a:	18fc      	adds	r4, r7, r3
    4c0c:	4b09      	ldr	r3, [pc, #36]	; (4c34 <hif_receive+0x1bc>)
    4c0e:	4798      	blx	r3
    4c10:	0003      	movs	r3, r0
    4c12:	7023      	strb	r3, [r4, #0]
    4c14:	e004      	b.n	4c20 <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	e002      	b.n	4c20 <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	e000      	b.n	4c20 <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    4c1e:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    4c20:	231f      	movs	r3, #31
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	b25b      	sxtb	r3, r3
}
    4c28:	0018      	movs	r0, r3
    4c2a:	46bd      	mov	sp, r7
    4c2c:	b009      	add	sp, #36	; 0x24
    4c2e:	bd90      	pop	{r4, r7, pc}
    4c30:	200000d2 	.word	0x200000d2
    4c34:	00004045 	.word	0x00004045
    4c38:	00000269 	.word	0x00000269
    4c3c:	00012f6c 	.word	0x00012f6c
    4c40:	00012ce8 	.word	0x00012ce8
    4c44:	000114d9 	.word	0x000114d9
    4c48:	00012e74 	.word	0x00012e74
    4c4c:	000115f9 	.word	0x000115f9
    4c50:	0001150d 	.word	0x0001150d
    4c54:	00001070 	.word	0x00001070
    4c58:	000061d9 	.word	0x000061d9
    4c5c:	00001084 	.word	0x00001084
    4c60:	0000027a 	.word	0x0000027a
    4c64:	00012e94 	.word	0x00012e94
    4c68:	00012ed8 	.word	0x00012ed8
    4c6c:	0000624d 	.word	0x0000624d

00004c70 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b084      	sub	sp, #16
    4c74:	af00      	add	r7, sp, #0
    4c76:	0002      	movs	r2, r0
    4c78:	6039      	str	r1, [r7, #0]
    4c7a:	1dfb      	adds	r3, r7, #7
    4c7c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4c7e:	230f      	movs	r3, #15
    4c80:	18fb      	adds	r3, r7, r3
    4c82:	2200      	movs	r2, #0
    4c84:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    4c86:	1dfb      	adds	r3, r7, #7
    4c88:	781b      	ldrb	r3, [r3, #0]
    4c8a:	2b07      	cmp	r3, #7
    4c8c:	d81c      	bhi.n	4cc8 <hif_register_cb+0x58>
    4c8e:	009a      	lsls	r2, r3, #2
    4c90:	4b1c      	ldr	r3, [pc, #112]	; (4d04 <hif_register_cb+0x94>)
    4c92:	18d3      	adds	r3, r2, r3
    4c94:	681b      	ldr	r3, [r3, #0]
    4c96:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    4c98:	4b1b      	ldr	r3, [pc, #108]	; (4d08 <hif_register_cb+0x98>)
    4c9a:	683a      	ldr	r2, [r7, #0]
    4c9c:	601a      	str	r2, [r3, #0]
			break;
    4c9e:	e028      	b.n	4cf2 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    4ca0:	4b1a      	ldr	r3, [pc, #104]	; (4d0c <hif_register_cb+0x9c>)
    4ca2:	683a      	ldr	r2, [r7, #0]
    4ca4:	601a      	str	r2, [r3, #0]
			break;
    4ca6:	e024      	b.n	4cf2 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    4ca8:	4b19      	ldr	r3, [pc, #100]	; (4d10 <hif_register_cb+0xa0>)
    4caa:	683a      	ldr	r2, [r7, #0]
    4cac:	601a      	str	r2, [r3, #0]
			break;
    4cae:	e020      	b.n	4cf2 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    4cb0:	4b18      	ldr	r3, [pc, #96]	; (4d14 <hif_register_cb+0xa4>)
    4cb2:	683a      	ldr	r2, [r7, #0]
    4cb4:	601a      	str	r2, [r3, #0]
			break;
    4cb6:	e01c      	b.n	4cf2 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    4cb8:	4b17      	ldr	r3, [pc, #92]	; (4d18 <hif_register_cb+0xa8>)
    4cba:	683a      	ldr	r2, [r7, #0]
    4cbc:	601a      	str	r2, [r3, #0]
			break;
    4cbe:	e018      	b.n	4cf2 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    4cc0:	4b16      	ldr	r3, [pc, #88]	; (4d1c <hif_register_cb+0xac>)
    4cc2:	683a      	ldr	r2, [r7, #0]
    4cc4:	601a      	str	r2, [r3, #0]
			break;
    4cc6:	e014      	b.n	4cf2 <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    4cc8:	4a15      	ldr	r2, [pc, #84]	; (4d20 <hif_register_cb+0xb0>)
    4cca:	4916      	ldr	r1, [pc, #88]	; (4d24 <hif_register_cb+0xb4>)
    4ccc:	4b16      	ldr	r3, [pc, #88]	; (4d28 <hif_register_cb+0xb8>)
    4cce:	0018      	movs	r0, r3
    4cd0:	4b16      	ldr	r3, [pc, #88]	; (4d2c <hif_register_cb+0xbc>)
    4cd2:	4798      	blx	r3
    4cd4:	1dfb      	adds	r3, r7, #7
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	4b15      	ldr	r3, [pc, #84]	; (4d30 <hif_register_cb+0xc0>)
    4cda:	0011      	movs	r1, r2
    4cdc:	0018      	movs	r0, r3
    4cde:	4b13      	ldr	r3, [pc, #76]	; (4d2c <hif_register_cb+0xbc>)
    4ce0:	4798      	blx	r3
    4ce2:	200d      	movs	r0, #13
    4ce4:	4b13      	ldr	r3, [pc, #76]	; (4d34 <hif_register_cb+0xc4>)
    4ce6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    4ce8:	230f      	movs	r3, #15
    4cea:	18fb      	adds	r3, r7, r3
    4cec:	22f4      	movs	r2, #244	; 0xf4
    4cee:	701a      	strb	r2, [r3, #0]
			break;
    4cf0:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    4cf2:	230f      	movs	r3, #15
    4cf4:	18fb      	adds	r3, r7, r3
    4cf6:	781b      	ldrb	r3, [r3, #0]
    4cf8:	b25b      	sxtb	r3, r3
}
    4cfa:	0018      	movs	r0, r3
    4cfc:	46bd      	mov	sp, r7
    4cfe:	b004      	add	sp, #16
    4d00:	bd80      	pop	{r7, pc}
    4d02:	46c0      	nop			; (mov r8, r8)
    4d04:	00012f28 	.word	0x00012f28
    4d08:	200000d8 	.word	0x200000d8
    4d0c:	200000d4 	.word	0x200000d4
    4d10:	200000dc 	.word	0x200000dc
    4d14:	200000e4 	.word	0x200000e4
    4d18:	200000e8 	.word	0x200000e8
    4d1c:	200000e0 	.word	0x200000e0
    4d20:	000002b9 	.word	0x000002b9
    4d24:	00012f78 	.word	0x00012f78
    4d28:	00012ce8 	.word	0x00012ce8
    4d2c:	000114d9 	.word	0x000114d9
    4d30:	00012f1c 	.word	0x00012f1c
    4d34:	0001150d 	.word	0x0001150d

00004d38 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    4d38:	b590      	push	{r4, r7, lr}
    4d3a:	b0ad      	sub	sp, #180	; 0xb4
    4d3c:	af02      	add	r7, sp, #8
    4d3e:	603a      	str	r2, [r7, #0]
    4d40:	1dfb      	adds	r3, r7, #7
    4d42:	1c02      	adds	r2, r0, #0
    4d44:	701a      	strb	r2, [r3, #0]
    4d46:	1d3b      	adds	r3, r7, #4
    4d48:	1c0a      	adds	r2, r1, #0
    4d4a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    4d4c:	1dfb      	adds	r3, r7, #7
    4d4e:	781b      	ldrb	r3, [r3, #0]
    4d50:	2b2c      	cmp	r3, #44	; 0x2c
    4d52:	d116      	bne.n	4d82 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    4d54:	239c      	movs	r3, #156	; 0x9c
    4d56:	18f9      	adds	r1, r7, r3
    4d58:	6838      	ldr	r0, [r7, #0]
    4d5a:	2300      	movs	r3, #0
    4d5c:	2204      	movs	r2, #4
    4d5e:	4ccc      	ldr	r4, [pc, #816]	; (5090 <m2m_wifi_cb+0x358>)
    4d60:	47a0      	blx	r4
    4d62:	1e03      	subs	r3, r0, #0
    4d64:	d000      	beq.n	4d68 <m2m_wifi_cb+0x30>
    4d66:	e1b6      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4d68:	4bca      	ldr	r3, [pc, #808]	; (5094 <m2m_wifi_cb+0x35c>)
    4d6a:	681b      	ldr	r3, [r3, #0]
    4d6c:	2b00      	cmp	r3, #0
    4d6e:	d100      	bne.n	4d72 <m2m_wifi_cb+0x3a>
    4d70:	e1b1      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    4d72:	4bc8      	ldr	r3, [pc, #800]	; (5094 <m2m_wifi_cb+0x35c>)
    4d74:	681b      	ldr	r3, [r3, #0]
    4d76:	229c      	movs	r2, #156	; 0x9c
    4d78:	18ba      	adds	r2, r7, r2
    4d7a:	0011      	movs	r1, r2
    4d7c:	202c      	movs	r0, #44	; 0x2c
    4d7e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4d80:	e1a9      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    4d82:	1dfb      	adds	r3, r7, #7
    4d84:	781b      	ldrb	r3, [r3, #0]
    4d86:	2b1b      	cmp	r3, #27
    4d88:	d116      	bne.n	4db8 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    4d8a:	2394      	movs	r3, #148	; 0x94
    4d8c:	18f9      	adds	r1, r7, r3
    4d8e:	6838      	ldr	r0, [r7, #0]
    4d90:	2300      	movs	r3, #0
    4d92:	2208      	movs	r2, #8
    4d94:	4cbe      	ldr	r4, [pc, #760]	; (5090 <m2m_wifi_cb+0x358>)
    4d96:	47a0      	blx	r4
    4d98:	1e03      	subs	r3, r0, #0
    4d9a:	d000      	beq.n	4d9e <m2m_wifi_cb+0x66>
    4d9c:	e19b      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4d9e:	4bbd      	ldr	r3, [pc, #756]	; (5094 <m2m_wifi_cb+0x35c>)
    4da0:	681b      	ldr	r3, [r3, #0]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d100      	bne.n	4da8 <m2m_wifi_cb+0x70>
    4da6:	e196      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    4da8:	4bba      	ldr	r3, [pc, #744]	; (5094 <m2m_wifi_cb+0x35c>)
    4daa:	681b      	ldr	r3, [r3, #0]
    4dac:	2294      	movs	r2, #148	; 0x94
    4dae:	18ba      	adds	r2, r7, r2
    4db0:	0011      	movs	r1, r2
    4db2:	201b      	movs	r0, #27
    4db4:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4db6:	e18e      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    4db8:	1dfb      	adds	r3, r7, #7
    4dba:	781b      	ldrb	r3, [r3, #0]
    4dbc:	2b06      	cmp	r3, #6
    4dbe:	d116      	bne.n	4dee <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    4dc0:	230c      	movs	r3, #12
    4dc2:	18f9      	adds	r1, r7, r3
    4dc4:	6838      	ldr	r0, [r7, #0]
    4dc6:	2301      	movs	r3, #1
    4dc8:	2230      	movs	r2, #48	; 0x30
    4dca:	4cb1      	ldr	r4, [pc, #708]	; (5090 <m2m_wifi_cb+0x358>)
    4dcc:	47a0      	blx	r4
    4dce:	1e03      	subs	r3, r0, #0
    4dd0:	d000      	beq.n	4dd4 <m2m_wifi_cb+0x9c>
    4dd2:	e180      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    4dd4:	4baf      	ldr	r3, [pc, #700]	; (5094 <m2m_wifi_cb+0x35c>)
    4dd6:	681b      	ldr	r3, [r3, #0]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d100      	bne.n	4dde <m2m_wifi_cb+0xa6>
    4ddc:	e17b      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    4dde:	4bad      	ldr	r3, [pc, #692]	; (5094 <m2m_wifi_cb+0x35c>)
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	220c      	movs	r2, #12
    4de4:	18ba      	adds	r2, r7, r2
    4de6:	0011      	movs	r1, r2
    4de8:	2006      	movs	r0, #6
    4dea:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4dec:	e173      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    4dee:	1dfb      	adds	r3, r7, #7
    4df0:	781b      	ldrb	r3, [r3, #0]
    4df2:	2b0e      	cmp	r3, #14
    4df4:	d100      	bne.n	4df8 <m2m_wifi_cb+0xc0>
    4df6:	e16e      	b.n	50d6 <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    4df8:	1dfb      	adds	r3, r7, #7
    4dfa:	781b      	ldrb	r3, [r3, #0]
    4dfc:	2b32      	cmp	r3, #50	; 0x32
    4dfe:	d116      	bne.n	4e2e <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    4e00:	2384      	movs	r3, #132	; 0x84
    4e02:	18f9      	adds	r1, r7, r3
    4e04:	6838      	ldr	r0, [r7, #0]
    4e06:	2300      	movs	r3, #0
    4e08:	2210      	movs	r2, #16
    4e0a:	4ca1      	ldr	r4, [pc, #644]	; (5090 <m2m_wifi_cb+0x358>)
    4e0c:	47a0      	blx	r4
    4e0e:	1e03      	subs	r3, r0, #0
    4e10:	d000      	beq.n	4e14 <m2m_wifi_cb+0xdc>
    4e12:	e160      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4e14:	4b9f      	ldr	r3, [pc, #636]	; (5094 <m2m_wifi_cb+0x35c>)
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	2b00      	cmp	r3, #0
    4e1a:	d100      	bne.n	4e1e <m2m_wifi_cb+0xe6>
    4e1c:	e15b      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    4e1e:	4b9d      	ldr	r3, [pc, #628]	; (5094 <m2m_wifi_cb+0x35c>)
    4e20:	681b      	ldr	r3, [r3, #0]
    4e22:	2284      	movs	r2, #132	; 0x84
    4e24:	18ba      	adds	r2, r7, r2
    4e26:	0011      	movs	r1, r2
    4e28:	2032      	movs	r0, #50	; 0x32
    4e2a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4e2c:	e153      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    4e2e:	1dfb      	adds	r3, r7, #7
    4e30:	781b      	ldrb	r3, [r3, #0]
    4e32:	2b2f      	cmp	r3, #47	; 0x2f
    4e34:	d11d      	bne.n	4e72 <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    4e36:	230c      	movs	r3, #12
    4e38:	18fb      	adds	r3, r7, r3
    4e3a:	2264      	movs	r2, #100	; 0x64
    4e3c:	2100      	movs	r1, #0
    4e3e:	0018      	movs	r0, r3
    4e40:	4b95      	ldr	r3, [pc, #596]	; (5098 <m2m_wifi_cb+0x360>)
    4e42:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    4e44:	230c      	movs	r3, #12
    4e46:	18f9      	adds	r1, r7, r3
    4e48:	6838      	ldr	r0, [r7, #0]
    4e4a:	2300      	movs	r3, #0
    4e4c:	2264      	movs	r2, #100	; 0x64
    4e4e:	4c90      	ldr	r4, [pc, #576]	; (5090 <m2m_wifi_cb+0x358>)
    4e50:	47a0      	blx	r4
    4e52:	1e03      	subs	r3, r0, #0
    4e54:	d000      	beq.n	4e58 <m2m_wifi_cb+0x120>
    4e56:	e13e      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4e58:	4b8e      	ldr	r3, [pc, #568]	; (5094 <m2m_wifi_cb+0x35c>)
    4e5a:	681b      	ldr	r3, [r3, #0]
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	d100      	bne.n	4e62 <m2m_wifi_cb+0x12a>
    4e60:	e139      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    4e62:	4b8c      	ldr	r3, [pc, #560]	; (5094 <m2m_wifi_cb+0x35c>)
    4e64:	681b      	ldr	r3, [r3, #0]
    4e66:	220c      	movs	r2, #12
    4e68:	18ba      	adds	r2, r7, r2
    4e6a:	0011      	movs	r1, r2
    4e6c:	202f      	movs	r0, #47	; 0x2f
    4e6e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4e70:	e131      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    4e72:	1dfb      	adds	r3, r7, #7
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	2b34      	cmp	r3, #52	; 0x34
    4e78:	d13a      	bne.n	4ef0 <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    4e7a:	2380      	movs	r3, #128	; 0x80
    4e7c:	18f9      	adds	r1, r7, r3
    4e7e:	6838      	ldr	r0, [r7, #0]
    4e80:	2300      	movs	r3, #0
    4e82:	2204      	movs	r2, #4
    4e84:	4c82      	ldr	r4, [pc, #520]	; (5090 <m2m_wifi_cb+0x358>)
    4e86:	47a0      	blx	r4
    4e88:	1e03      	subs	r3, r0, #0
    4e8a:	d000      	beq.n	4e8e <m2m_wifi_cb+0x156>
    4e8c:	e123      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    4e8e:	4b83      	ldr	r3, [pc, #524]	; (509c <m2m_wifi_cb+0x364>)
    4e90:	0018      	movs	r0, r3
    4e92:	4b83      	ldr	r3, [pc, #524]	; (50a0 <m2m_wifi_cb+0x368>)
    4e94:	4798      	blx	r3
    4e96:	2380      	movs	r3, #128	; 0x80
    4e98:	18fb      	adds	r3, r7, r3
    4e9a:	681b      	ldr	r3, [r3, #0]
    4e9c:	001a      	movs	r2, r3
    4e9e:	23ff      	movs	r3, #255	; 0xff
    4ea0:	401a      	ands	r2, r3
    4ea2:	0011      	movs	r1, r2
    4ea4:	2380      	movs	r3, #128	; 0x80
    4ea6:	18fb      	adds	r3, r7, r3
    4ea8:	681b      	ldr	r3, [r3, #0]
    4eaa:	0a1b      	lsrs	r3, r3, #8
    4eac:	001a      	movs	r2, r3
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	401a      	ands	r2, r3
    4eb2:	2380      	movs	r3, #128	; 0x80
    4eb4:	18fb      	adds	r3, r7, r3
    4eb6:	681b      	ldr	r3, [r3, #0]
    4eb8:	0c1b      	lsrs	r3, r3, #16
    4eba:	0018      	movs	r0, r3
    4ebc:	23ff      	movs	r3, #255	; 0xff
    4ebe:	4018      	ands	r0, r3
    4ec0:	0004      	movs	r4, r0
    4ec2:	2380      	movs	r3, #128	; 0x80
    4ec4:	18fb      	adds	r3, r7, r3
    4ec6:	681b      	ldr	r3, [r3, #0]
    4ec8:	0e1b      	lsrs	r3, r3, #24
    4eca:	4876      	ldr	r0, [pc, #472]	; (50a4 <m2m_wifi_cb+0x36c>)
    4ecc:	9300      	str	r3, [sp, #0]
    4ece:	0023      	movs	r3, r4
    4ed0:	4c73      	ldr	r4, [pc, #460]	; (50a0 <m2m_wifi_cb+0x368>)
    4ed2:	47a0      	blx	r4
    4ed4:	200d      	movs	r0, #13
    4ed6:	4b74      	ldr	r3, [pc, #464]	; (50a8 <m2m_wifi_cb+0x370>)
    4ed8:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    4eda:	4b6e      	ldr	r3, [pc, #440]	; (5094 <m2m_wifi_cb+0x35c>)
    4edc:	681b      	ldr	r3, [r3, #0]
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d100      	bne.n	4ee4 <m2m_wifi_cb+0x1ac>
    4ee2:	e0f8      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    4ee4:	4b6b      	ldr	r3, [pc, #428]	; (5094 <m2m_wifi_cb+0x35c>)
    4ee6:	681b      	ldr	r3, [r3, #0]
    4ee8:	2100      	movs	r1, #0
    4eea:	2034      	movs	r0, #52	; 0x34
    4eec:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4eee:	e0f2      	b.n	50d6 <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    4ef0:	1dfb      	adds	r3, r7, #7
    4ef2:	781b      	ldrb	r3, [r3, #0]
    4ef4:	2b11      	cmp	r3, #17
    4ef6:	d11e      	bne.n	4f36 <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    4ef8:	4b6c      	ldr	r3, [pc, #432]	; (50ac <m2m_wifi_cb+0x374>)
    4efa:	2200      	movs	r2, #0
    4efc:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    4efe:	237c      	movs	r3, #124	; 0x7c
    4f00:	18f9      	adds	r1, r7, r3
    4f02:	6838      	ldr	r0, [r7, #0]
    4f04:	2300      	movs	r3, #0
    4f06:	2204      	movs	r2, #4
    4f08:	4c61      	ldr	r4, [pc, #388]	; (5090 <m2m_wifi_cb+0x358>)
    4f0a:	47a0      	blx	r4
    4f0c:	1e03      	subs	r3, r0, #0
    4f0e:	d000      	beq.n	4f12 <m2m_wifi_cb+0x1da>
    4f10:	e0e1      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    4f12:	237c      	movs	r3, #124	; 0x7c
    4f14:	18fb      	adds	r3, r7, r3
    4f16:	781a      	ldrb	r2, [r3, #0]
    4f18:	4b65      	ldr	r3, [pc, #404]	; (50b0 <m2m_wifi_cb+0x378>)
    4f1a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    4f1c:	4b5d      	ldr	r3, [pc, #372]	; (5094 <m2m_wifi_cb+0x35c>)
    4f1e:	681b      	ldr	r3, [r3, #0]
    4f20:	2b00      	cmp	r3, #0
    4f22:	d100      	bne.n	4f26 <m2m_wifi_cb+0x1ee>
    4f24:	e0d7      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    4f26:	4b5b      	ldr	r3, [pc, #364]	; (5094 <m2m_wifi_cb+0x35c>)
    4f28:	681b      	ldr	r3, [r3, #0]
    4f2a:	227c      	movs	r2, #124	; 0x7c
    4f2c:	18ba      	adds	r2, r7, r2
    4f2e:	0011      	movs	r1, r2
    4f30:	2011      	movs	r0, #17
    4f32:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4f34:	e0cf      	b.n	50d6 <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    4f36:	1dfb      	adds	r3, r7, #7
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	2b13      	cmp	r3, #19
    4f3c:	d116      	bne.n	4f6c <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    4f3e:	230c      	movs	r3, #12
    4f40:	18f9      	adds	r1, r7, r3
    4f42:	6838      	ldr	r0, [r7, #0]
    4f44:	2300      	movs	r3, #0
    4f46:	222c      	movs	r2, #44	; 0x2c
    4f48:	4c51      	ldr	r4, [pc, #324]	; (5090 <m2m_wifi_cb+0x358>)
    4f4a:	47a0      	blx	r4
    4f4c:	1e03      	subs	r3, r0, #0
    4f4e:	d000      	beq.n	4f52 <m2m_wifi_cb+0x21a>
    4f50:	e0c1      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4f52:	4b50      	ldr	r3, [pc, #320]	; (5094 <m2m_wifi_cb+0x35c>)
    4f54:	681b      	ldr	r3, [r3, #0]
    4f56:	2b00      	cmp	r3, #0
    4f58:	d100      	bne.n	4f5c <m2m_wifi_cb+0x224>
    4f5a:	e0bc      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    4f5c:	4b4d      	ldr	r3, [pc, #308]	; (5094 <m2m_wifi_cb+0x35c>)
    4f5e:	681b      	ldr	r3, [r3, #0]
    4f60:	220c      	movs	r2, #12
    4f62:	18ba      	adds	r2, r7, r2
    4f64:	0011      	movs	r1, r2
    4f66:	2013      	movs	r0, #19
    4f68:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4f6a:	e0b4      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    4f6c:	1dfb      	adds	r3, r7, #7
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	2b04      	cmp	r3, #4
    4f72:	d116      	bne.n	4fa2 <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4f74:	23a0      	movs	r3, #160	; 0xa0
    4f76:	18f9      	adds	r1, r7, r3
    4f78:	6838      	ldr	r0, [r7, #0]
    4f7a:	2300      	movs	r3, #0
    4f7c:	2204      	movs	r2, #4
    4f7e:	4c44      	ldr	r4, [pc, #272]	; (5090 <m2m_wifi_cb+0x358>)
    4f80:	47a0      	blx	r4
    4f82:	1e03      	subs	r3, r0, #0
    4f84:	d000      	beq.n	4f88 <m2m_wifi_cb+0x250>
    4f86:	e0a6      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4f88:	4b42      	ldr	r3, [pc, #264]	; (5094 <m2m_wifi_cb+0x35c>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	d100      	bne.n	4f92 <m2m_wifi_cb+0x25a>
    4f90:	e0a1      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    4f92:	4b40      	ldr	r3, [pc, #256]	; (5094 <m2m_wifi_cb+0x35c>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	22a0      	movs	r2, #160	; 0xa0
    4f98:	18ba      	adds	r2, r7, r2
    4f9a:	0011      	movs	r1, r2
    4f9c:	2004      	movs	r0, #4
    4f9e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4fa0:	e099      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    4fa2:	1dfb      	adds	r3, r7, #7
    4fa4:	781b      	ldrb	r3, [r3, #0]
    4fa6:	2b65      	cmp	r3, #101	; 0x65
    4fa8:	d116      	bne.n	4fd8 <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    4faa:	23a0      	movs	r3, #160	; 0xa0
    4fac:	18f9      	adds	r1, r7, r3
    4fae:	6838      	ldr	r0, [r7, #0]
    4fb0:	2300      	movs	r3, #0
    4fb2:	2204      	movs	r2, #4
    4fb4:	4c36      	ldr	r4, [pc, #216]	; (5090 <m2m_wifi_cb+0x358>)
    4fb6:	47a0      	blx	r4
    4fb8:	1e03      	subs	r3, r0, #0
    4fba:	d000      	beq.n	4fbe <m2m_wifi_cb+0x286>
    4fbc:	e08b      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    4fbe:	4b35      	ldr	r3, [pc, #212]	; (5094 <m2m_wifi_cb+0x35c>)
    4fc0:	681b      	ldr	r3, [r3, #0]
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d100      	bne.n	4fc8 <m2m_wifi_cb+0x290>
    4fc6:	e086      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    4fc8:	4b32      	ldr	r3, [pc, #200]	; (5094 <m2m_wifi_cb+0x35c>)
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	22a0      	movs	r2, #160	; 0xa0
    4fce:	18ba      	adds	r2, r7, r2
    4fd0:	0011      	movs	r1, r2
    4fd2:	2065      	movs	r0, #101	; 0x65
    4fd4:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    4fd6:	e07e      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    4fd8:	1dfb      	adds	r3, r7, #7
    4fda:	781b      	ldrb	r3, [r3, #0]
    4fdc:	2b09      	cmp	r3, #9
    4fde:	d116      	bne.n	500e <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    4fe0:	230c      	movs	r3, #12
    4fe2:	18f9      	adds	r1, r7, r3
    4fe4:	6838      	ldr	r0, [r7, #0]
    4fe6:	2301      	movs	r3, #1
    4fe8:	2264      	movs	r2, #100	; 0x64
    4fea:	4c29      	ldr	r4, [pc, #164]	; (5090 <m2m_wifi_cb+0x358>)
    4fec:	47a0      	blx	r4
    4fee:	1e03      	subs	r3, r0, #0
    4ff0:	d000      	beq.n	4ff4 <m2m_wifi_cb+0x2bc>
    4ff2:	e070      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    4ff4:	4b27      	ldr	r3, [pc, #156]	; (5094 <m2m_wifi_cb+0x35c>)
    4ff6:	681b      	ldr	r3, [r3, #0]
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	d100      	bne.n	4ffe <m2m_wifi_cb+0x2c6>
    4ffc:	e06b      	b.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    4ffe:	4b25      	ldr	r3, [pc, #148]	; (5094 <m2m_wifi_cb+0x35c>)
    5000:	681b      	ldr	r3, [r3, #0]
    5002:	220c      	movs	r2, #12
    5004:	18ba      	adds	r2, r7, r2
    5006:	0011      	movs	r1, r2
    5008:	2009      	movs	r0, #9
    500a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    500c:	e063      	b.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    500e:	1dfb      	adds	r3, r7, #7
    5010:	781b      	ldrb	r3, [r3, #0]
    5012:	2b2a      	cmp	r3, #42	; 0x2a
    5014:	d114      	bne.n	5040 <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    5016:	2378      	movs	r3, #120	; 0x78
    5018:	18f9      	adds	r1, r7, r3
    501a:	6838      	ldr	r0, [r7, #0]
    501c:	2301      	movs	r3, #1
    501e:	2204      	movs	r2, #4
    5020:	4c1b      	ldr	r4, [pc, #108]	; (5090 <m2m_wifi_cb+0x358>)
    5022:	47a0      	blx	r4
    5024:	1e03      	subs	r3, r0, #0
    5026:	d156      	bne.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    5028:	4b1a      	ldr	r3, [pc, #104]	; (5094 <m2m_wifi_cb+0x35c>)
    502a:	681b      	ldr	r3, [r3, #0]
    502c:	2b00      	cmp	r3, #0
    502e:	d052      	beq.n	50d6 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    5030:	4b18      	ldr	r3, [pc, #96]	; (5094 <m2m_wifi_cb+0x35c>)
    5032:	681b      	ldr	r3, [r3, #0]
    5034:	2278      	movs	r2, #120	; 0x78
    5036:	18ba      	adds	r2, r7, r2
    5038:	0011      	movs	r1, r2
    503a:	202a      	movs	r0, #42	; 0x2a
    503c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    503e:	e04a      	b.n	50d6 <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    5040:	1dfb      	adds	r3, r7, #7
    5042:	781b      	ldrb	r3, [r3, #0]
    5044:	2b20      	cmp	r3, #32
    5046:	d135      	bne.n	50b4 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    5048:	2370      	movs	r3, #112	; 0x70
    504a:	18f9      	adds	r1, r7, r3
    504c:	6838      	ldr	r0, [r7, #0]
    504e:	2300      	movs	r3, #0
    5050:	2208      	movs	r2, #8
    5052:	4c0f      	ldr	r4, [pc, #60]	; (5090 <m2m_wifi_cb+0x358>)
    5054:	47a0      	blx	r4
    5056:	1e03      	subs	r3, r0, #0
    5058:	d13d      	bne.n	50d6 <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    505a:	683b      	ldr	r3, [r7, #0]
    505c:	3308      	adds	r3, #8
    505e:	0018      	movs	r0, r3
    5060:	2370      	movs	r3, #112	; 0x70
    5062:	18fb      	adds	r3, r7, r3
    5064:	6819      	ldr	r1, [r3, #0]
    5066:	2370      	movs	r3, #112	; 0x70
    5068:	18fb      	adds	r3, r7, r3
    506a:	889a      	ldrh	r2, [r3, #4]
    506c:	2301      	movs	r3, #1
    506e:	4c08      	ldr	r4, [pc, #32]	; (5090 <m2m_wifi_cb+0x358>)
    5070:	47a0      	blx	r4
    5072:	1e03      	subs	r3, r0, #0
    5074:	d12f      	bne.n	50d6 <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    5076:	4b07      	ldr	r3, [pc, #28]	; (5094 <m2m_wifi_cb+0x35c>)
    5078:	681b      	ldr	r3, [r3, #0]
    507a:	2b00      	cmp	r3, #0
    507c:	d02b      	beq.n	50d6 <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    507e:	4b05      	ldr	r3, [pc, #20]	; (5094 <m2m_wifi_cb+0x35c>)
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	2270      	movs	r2, #112	; 0x70
    5084:	18ba      	adds	r2, r7, r2
    5086:	0011      	movs	r1, r2
    5088:	2020      	movs	r0, #32
    508a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    508c:	e023      	b.n	50d6 <m2m_wifi_cb+0x39e>
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	00004a79 	.word	0x00004a79
    5094:	200000f0 	.word	0x200000f0
    5098:	00003ebd 	.word	0x00003ebd
    509c:	00012f88 	.word	0x00012f88
    50a0:	000114d9 	.word	0x000114d9
    50a4:	00012f94 	.word	0x00012f94
    50a8:	0001150d 	.word	0x0001150d
    50ac:	200000ed 	.word	0x200000ed
    50b0:	200000ec 	.word	0x200000ec
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    50b4:	2395      	movs	r3, #149	; 0x95
    50b6:	005a      	lsls	r2, r3, #1
    50b8:	4909      	ldr	r1, [pc, #36]	; (50e0 <m2m_wifi_cb+0x3a8>)
    50ba:	4b0a      	ldr	r3, [pc, #40]	; (50e4 <m2m_wifi_cb+0x3ac>)
    50bc:	0018      	movs	r0, r3
    50be:	4b0a      	ldr	r3, [pc, #40]	; (50e8 <m2m_wifi_cb+0x3b0>)
    50c0:	4798      	blx	r3
    50c2:	1dfb      	adds	r3, r7, #7
    50c4:	781a      	ldrb	r2, [r3, #0]
    50c6:	4b09      	ldr	r3, [pc, #36]	; (50ec <m2m_wifi_cb+0x3b4>)
    50c8:	0011      	movs	r1, r2
    50ca:	0018      	movs	r0, r3
    50cc:	4b06      	ldr	r3, [pc, #24]	; (50e8 <m2m_wifi_cb+0x3b0>)
    50ce:	4798      	blx	r3
    50d0:	200d      	movs	r0, #13
    50d2:	4b07      	ldr	r3, [pc, #28]	; (50f0 <m2m_wifi_cb+0x3b8>)
    50d4:	4798      	blx	r3
	}
}
    50d6:	46c0      	nop			; (mov r8, r8)
    50d8:	46bd      	mov	sp, r7
    50da:	b02b      	add	sp, #172	; 0xac
    50dc:	bd90      	pop	{r4, r7, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	000132ac 	.word	0x000132ac
    50e4:	00012fb4 	.word	0x00012fb4
    50e8:	000114d9 	.word	0x000114d9
    50ec:	00012fc8 	.word	0x00012fc8
    50f0:	0001150d 	.word	0x0001150d

000050f4 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    50f4:	b590      	push	{r4, r7, lr}
    50f6:	b08d      	sub	sp, #52	; 0x34
    50f8:	af00      	add	r7, sp, #0
    50fa:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    50fc:	232f      	movs	r3, #47	; 0x2f
    50fe:	18fb      	adds	r3, r7, r3
    5100:	2200      	movs	r2, #0
    5102:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    5104:	230b      	movs	r3, #11
    5106:	18fb      	adds	r3, r7, r3
    5108:	2201      	movs	r2, #1
    510a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	2b00      	cmp	r3, #0
    5110:	d104      	bne.n	511c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    5112:	232f      	movs	r3, #47	; 0x2f
    5114:	18fb      	adds	r3, r7, r3
    5116:	22f4      	movs	r2, #244	; 0xf4
    5118:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    511a:	e085      	b.n	5228 <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	681a      	ldr	r2, [r3, #0]
    5120:	4b45      	ldr	r3, [pc, #276]	; (5238 <m2m_wifi_init+0x144>)
    5122:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    5124:	4b45      	ldr	r3, [pc, #276]	; (523c <m2m_wifi_init+0x148>)
    5126:	2200      	movs	r2, #0
    5128:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    512a:	232f      	movs	r3, #47	; 0x2f
    512c:	18fc      	adds	r4, r7, r3
    512e:	230b      	movs	r3, #11
    5130:	18fb      	adds	r3, r7, r3
    5132:	0018      	movs	r0, r3
    5134:	4b42      	ldr	r3, [pc, #264]	; (5240 <m2m_wifi_init+0x14c>)
    5136:	4798      	blx	r3
    5138:	0003      	movs	r3, r0
    513a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    513c:	232f      	movs	r3, #47	; 0x2f
    513e:	18fb      	adds	r3, r7, r3
    5140:	781b      	ldrb	r3, [r3, #0]
    5142:	b25b      	sxtb	r3, r3
    5144:	2b00      	cmp	r3, #0
    5146:	d16c      	bne.n	5222 <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    5148:	232f      	movs	r3, #47	; 0x2f
    514a:	18fc      	adds	r4, r7, r3
    514c:	2000      	movs	r0, #0
    514e:	4b3d      	ldr	r3, [pc, #244]	; (5244 <m2m_wifi_init+0x150>)
    5150:	4798      	blx	r3
    5152:	0003      	movs	r3, r0
    5154:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    5156:	232f      	movs	r3, #47	; 0x2f
    5158:	18fb      	adds	r3, r7, r3
    515a:	781b      	ldrb	r3, [r3, #0]
    515c:	b25b      	sxtb	r3, r3
    515e:	2b00      	cmp	r3, #0
    5160:	d15a      	bne.n	5218 <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    5162:	4b39      	ldr	r3, [pc, #228]	; (5248 <m2m_wifi_init+0x154>)
    5164:	0019      	movs	r1, r3
    5166:	2001      	movs	r0, #1
    5168:	4b38      	ldr	r3, [pc, #224]	; (524c <m2m_wifi_init+0x158>)
    516a:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    516c:	232f      	movs	r3, #47	; 0x2f
    516e:	18fc      	adds	r4, r7, r3
    5170:	230c      	movs	r3, #12
    5172:	18fb      	adds	r3, r7, r3
    5174:	0018      	movs	r0, r3
    5176:	4b36      	ldr	r3, [pc, #216]	; (5250 <m2m_wifi_init+0x15c>)
    5178:	4798      	blx	r3
    517a:	0003      	movs	r3, r0
    517c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    517e:	4b35      	ldr	r3, [pc, #212]	; (5254 <m2m_wifi_init+0x160>)
    5180:	0018      	movs	r0, r3
    5182:	4b35      	ldr	r3, [pc, #212]	; (5258 <m2m_wifi_init+0x164>)
    5184:	4798      	blx	r3
    5186:	230c      	movs	r3, #12
    5188:	18fb      	adds	r3, r7, r3
    518a:	791b      	ldrb	r3, [r3, #4]
    518c:	0019      	movs	r1, r3
    518e:	230c      	movs	r3, #12
    5190:	18fb      	adds	r3, r7, r3
    5192:	795b      	ldrb	r3, [r3, #5]
    5194:	001a      	movs	r2, r3
    5196:	230c      	movs	r3, #12
    5198:	18fb      	adds	r3, r7, r3
    519a:	799b      	ldrb	r3, [r3, #6]
    519c:	482f      	ldr	r0, [pc, #188]	; (525c <m2m_wifi_init+0x168>)
    519e:	4c2e      	ldr	r4, [pc, #184]	; (5258 <m2m_wifi_init+0x164>)
    51a0:	47a0      	blx	r4
    51a2:	200d      	movs	r0, #13
    51a4:	4b2e      	ldr	r3, [pc, #184]	; (5260 <m2m_wifi_init+0x16c>)
    51a6:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    51a8:	4b2a      	ldr	r3, [pc, #168]	; (5254 <m2m_wifi_init+0x160>)
    51aa:	0018      	movs	r0, r3
    51ac:	4b2a      	ldr	r3, [pc, #168]	; (5258 <m2m_wifi_init+0x164>)
    51ae:	4798      	blx	r3
    51b0:	230c      	movs	r3, #12
    51b2:	18fb      	adds	r3, r7, r3
    51b4:	79db      	ldrb	r3, [r3, #7]
    51b6:	0019      	movs	r1, r3
    51b8:	230c      	movs	r3, #12
    51ba:	18fb      	adds	r3, r7, r3
    51bc:	7a1b      	ldrb	r3, [r3, #8]
    51be:	001a      	movs	r2, r3
    51c0:	230c      	movs	r3, #12
    51c2:	18fb      	adds	r3, r7, r3
    51c4:	7a5b      	ldrb	r3, [r3, #9]
    51c6:	4827      	ldr	r0, [pc, #156]	; (5264 <m2m_wifi_init+0x170>)
    51c8:	4c23      	ldr	r4, [pc, #140]	; (5258 <m2m_wifi_init+0x164>)
    51ca:	47a0      	blx	r4
    51cc:	200d      	movs	r0, #13
    51ce:	4b24      	ldr	r3, [pc, #144]	; (5260 <m2m_wifi_init+0x16c>)
    51d0:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    51d2:	4b20      	ldr	r3, [pc, #128]	; (5254 <m2m_wifi_init+0x160>)
    51d4:	0018      	movs	r0, r3
    51d6:	4b20      	ldr	r3, [pc, #128]	; (5258 <m2m_wifi_init+0x164>)
    51d8:	4798      	blx	r3
    51da:	4823      	ldr	r0, [pc, #140]	; (5268 <m2m_wifi_init+0x174>)
    51dc:	2300      	movs	r3, #0
    51de:	2203      	movs	r2, #3
    51e0:	2113      	movs	r1, #19
    51e2:	4c1d      	ldr	r4, [pc, #116]	; (5258 <m2m_wifi_init+0x164>)
    51e4:	47a0      	blx	r4
    51e6:	200d      	movs	r0, #13
    51e8:	4b1d      	ldr	r3, [pc, #116]	; (5260 <m2m_wifi_init+0x16c>)
    51ea:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    51ec:	232f      	movs	r3, #47	; 0x2f
    51ee:	18fb      	adds	r3, r7, r3
    51f0:	781b      	ldrb	r3, [r3, #0]
    51f2:	b25b      	sxtb	r3, r3
    51f4:	330d      	adds	r3, #13
    51f6:	d116      	bne.n	5226 <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    51f8:	23d6      	movs	r3, #214	; 0xd6
    51fa:	33ff      	adds	r3, #255	; 0xff
    51fc:	001a      	movs	r2, r3
    51fe:	491b      	ldr	r1, [pc, #108]	; (526c <m2m_wifi_init+0x178>)
    5200:	4b1b      	ldr	r3, [pc, #108]	; (5270 <m2m_wifi_init+0x17c>)
    5202:	0018      	movs	r0, r3
    5204:	4b14      	ldr	r3, [pc, #80]	; (5258 <m2m_wifi_init+0x164>)
    5206:	4798      	blx	r3
    5208:	4b1a      	ldr	r3, [pc, #104]	; (5274 <m2m_wifi_init+0x180>)
    520a:	0018      	movs	r0, r3
    520c:	4b1a      	ldr	r3, [pc, #104]	; (5278 <m2m_wifi_init+0x184>)
    520e:	4798      	blx	r3
    5210:	200d      	movs	r0, #13
    5212:	4b13      	ldr	r3, [pc, #76]	; (5260 <m2m_wifi_init+0x16c>)
    5214:	4798      	blx	r3
	}

	goto _EXIT0;
    5216:	e006      	b.n	5226 <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    5218:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    521a:	2000      	movs	r0, #0
    521c:	4b17      	ldr	r3, [pc, #92]	; (527c <m2m_wifi_init+0x188>)
    521e:	4798      	blx	r3
    5220:	e002      	b.n	5228 <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    5222:	46c0      	nop			; (mov r8, r8)
    5224:	e000      	b.n	5228 <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    5226:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    5228:	232f      	movs	r3, #47	; 0x2f
    522a:	18fb      	adds	r3, r7, r3
    522c:	781b      	ldrb	r3, [r3, #0]
    522e:	b25b      	sxtb	r3, r3
}
    5230:	0018      	movs	r0, r3
    5232:	46bd      	mov	sp, r7
    5234:	b00d      	add	sp, #52	; 0x34
    5236:	bd90      	pop	{r4, r7, pc}
    5238:	200000f0 	.word	0x200000f0
    523c:	200000ed 	.word	0x200000ed
    5240:	00006579 	.word	0x00006579
    5244:	00004231 	.word	0x00004231
    5248:	00004d39 	.word	0x00004d39
    524c:	00004c71 	.word	0x00004c71
    5250:	00006411 	.word	0x00006411
    5254:	00012f88 	.word	0x00012f88
    5258:	000114d9 	.word	0x000114d9
    525c:	000130f0 	.word	0x000130f0
    5260:	0001150d 	.word	0x0001150d
    5264:	0001310c 	.word	0x0001310c
    5268:	00013128 	.word	0x00013128
    526c:	000132b8 	.word	0x000132b8
    5270:	00012fb4 	.word	0x00012fb4
    5274:	00013144 	.word	0x00013144
    5278:	000115f9 	.word	0x000115f9
    527c:	00006709 	.word	0x00006709

00005280 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    5280:	b580      	push	{r7, lr}
    5282:	b082      	sub	sp, #8
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    5288:	4b03      	ldr	r3, [pc, #12]	; (5298 <m2m_wifi_handle_events+0x18>)
    528a:	4798      	blx	r3
    528c:	0003      	movs	r3, r0
}
    528e:	0018      	movs	r0, r3
    5290:	46bd      	mov	sp, r7
    5292:	b002      	add	sp, #8
    5294:	bd80      	pop	{r7, pc}
    5296:	46c0      	nop			; (mov r8, r8)
    5298:	000049e9 	.word	0x000049e9

0000529c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    529c:	b590      	push	{r4, r7, lr}
    529e:	b087      	sub	sp, #28
    52a0:	af02      	add	r7, sp, #8
    52a2:	60f8      	str	r0, [r7, #12]
    52a4:	0008      	movs	r0, r1
    52a6:	0011      	movs	r1, r2
    52a8:	607b      	str	r3, [r7, #4]
    52aa:	230b      	movs	r3, #11
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	1c02      	adds	r2, r0, #0
    52b0:	701a      	strb	r2, [r3, #0]
    52b2:	230a      	movs	r3, #10
    52b4:	18fb      	adds	r3, r7, r3
    52b6:	1c0a      	adds	r2, r1, #0
    52b8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    52ba:	687c      	ldr	r4, [r7, #4]
    52bc:	230a      	movs	r3, #10
    52be:	18fb      	adds	r3, r7, r3
    52c0:	781a      	ldrb	r2, [r3, #0]
    52c2:	230b      	movs	r3, #11
    52c4:	18fb      	adds	r3, r7, r3
    52c6:	7819      	ldrb	r1, [r3, #0]
    52c8:	68f8      	ldr	r0, [r7, #12]
    52ca:	2300      	movs	r3, #0
    52cc:	9301      	str	r3, [sp, #4]
    52ce:	2320      	movs	r3, #32
    52d0:	18fb      	adds	r3, r7, r3
    52d2:	881b      	ldrh	r3, [r3, #0]
    52d4:	9300      	str	r3, [sp, #0]
    52d6:	0023      	movs	r3, r4
    52d8:	4c03      	ldr	r4, [pc, #12]	; (52e8 <m2m_wifi_connect+0x4c>)
    52da:	47a0      	blx	r4
    52dc:	0003      	movs	r3, r0
}
    52de:	0018      	movs	r0, r3
    52e0:	46bd      	mov	sp, r7
    52e2:	b005      	add	sp, #20
    52e4:	bd90      	pop	{r4, r7, pc}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	000052ed 	.word	0x000052ed

000052ec <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    52ec:	b5b0      	push	{r4, r5, r7, lr}
    52ee:	b0aa      	sub	sp, #168	; 0xa8
    52f0:	af04      	add	r7, sp, #16
    52f2:	60f8      	str	r0, [r7, #12]
    52f4:	0008      	movs	r0, r1
    52f6:	0011      	movs	r1, r2
    52f8:	607b      	str	r3, [r7, #4]
    52fa:	230b      	movs	r3, #11
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	1c02      	adds	r2, r0, #0
    5300:	701a      	strb	r2, [r3, #0]
    5302:	230a      	movs	r3, #10
    5304:	18fb      	adds	r3, r7, r3
    5306:	1c0a      	adds	r2, r1, #0
    5308:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    530a:	2397      	movs	r3, #151	; 0x97
    530c:	18fb      	adds	r3, r7, r3
    530e:	2200      	movs	r2, #0
    5310:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    5312:	230a      	movs	r3, #10
    5314:	18fb      	adds	r3, r7, r3
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	2b01      	cmp	r3, #1
    531a:	d100      	bne.n	531e <m2m_wifi_connect_sc+0x32>
    531c:	e083      	b.n	5426 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    531e:	687b      	ldr	r3, [r7, #4]
    5320:	2b00      	cmp	r3, #0
    5322:	d111      	bne.n	5348 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    5324:	4ad8      	ldr	r2, [pc, #864]	; (5688 <m2m_wifi_connect_sc+0x39c>)
    5326:	49d9      	ldr	r1, [pc, #868]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    5328:	4bd9      	ldr	r3, [pc, #868]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    532a:	0018      	movs	r0, r3
    532c:	4bd9      	ldr	r3, [pc, #868]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    532e:	4798      	blx	r3
    5330:	4bd9      	ldr	r3, [pc, #868]	; (5698 <m2m_wifi_connect_sc+0x3ac>)
    5332:	0018      	movs	r0, r3
    5334:	4bd9      	ldr	r3, [pc, #868]	; (569c <m2m_wifi_connect_sc+0x3b0>)
    5336:	4798      	blx	r3
    5338:	200d      	movs	r0, #13
    533a:	4bd9      	ldr	r3, [pc, #868]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    533c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    533e:	2397      	movs	r3, #151	; 0x97
    5340:	18fb      	adds	r3, r7, r3
    5342:	22f4      	movs	r2, #244	; 0xf4
    5344:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5346:	e1ef      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    5348:	230a      	movs	r3, #10
    534a:	18fb      	adds	r3, r7, r3
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	2b02      	cmp	r3, #2
    5350:	d169      	bne.n	5426 <m2m_wifi_connect_sc+0x13a>
    5352:	687b      	ldr	r3, [r7, #4]
    5354:	0018      	movs	r0, r3
    5356:	4bd3      	ldr	r3, [pc, #844]	; (56a4 <m2m_wifi_connect_sc+0x3b8>)
    5358:	4798      	blx	r3
    535a:	1e03      	subs	r3, r0, #0
    535c:	2b40      	cmp	r3, #64	; 0x40
    535e:	d162      	bne.n	5426 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    5360:	2396      	movs	r3, #150	; 0x96
    5362:	18fb      	adds	r3, r7, r3
    5364:	2200      	movs	r2, #0
    5366:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    5368:	687b      	ldr	r3, [r7, #4]
    536a:	2290      	movs	r2, #144	; 0x90
    536c:	18ba      	adds	r2, r7, r2
    536e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    5370:	e054      	b.n	541c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    5372:	2396      	movs	r3, #150	; 0x96
    5374:	18fb      	adds	r3, r7, r3
    5376:	781b      	ldrb	r3, [r3, #0]
    5378:	2290      	movs	r2, #144	; 0x90
    537a:	18ba      	adds	r2, r7, r2
    537c:	6812      	ldr	r2, [r2, #0]
    537e:	18d3      	adds	r3, r2, r3
    5380:	781b      	ldrb	r3, [r3, #0]
    5382:	2b2f      	cmp	r3, #47	; 0x2f
    5384:	d931      	bls.n	53ea <m2m_wifi_connect_sc+0xfe>
    5386:	2396      	movs	r3, #150	; 0x96
    5388:	18fb      	adds	r3, r7, r3
    538a:	781b      	ldrb	r3, [r3, #0]
    538c:	2290      	movs	r2, #144	; 0x90
    538e:	18ba      	adds	r2, r7, r2
    5390:	6812      	ldr	r2, [r2, #0]
    5392:	18d3      	adds	r3, r2, r3
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	2b39      	cmp	r3, #57	; 0x39
    5398:	d909      	bls.n	53ae <m2m_wifi_connect_sc+0xc2>
    539a:	2396      	movs	r3, #150	; 0x96
    539c:	18fb      	adds	r3, r7, r3
    539e:	781b      	ldrb	r3, [r3, #0]
    53a0:	2290      	movs	r2, #144	; 0x90
    53a2:	18ba      	adds	r2, r7, r2
    53a4:	6812      	ldr	r2, [r2, #0]
    53a6:	18d3      	adds	r3, r2, r3
    53a8:	781b      	ldrb	r3, [r3, #0]
    53aa:	2b40      	cmp	r3, #64	; 0x40
    53ac:	d91d      	bls.n	53ea <m2m_wifi_connect_sc+0xfe>
    53ae:	2396      	movs	r3, #150	; 0x96
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	781b      	ldrb	r3, [r3, #0]
    53b4:	2290      	movs	r2, #144	; 0x90
    53b6:	18ba      	adds	r2, r7, r2
    53b8:	6812      	ldr	r2, [r2, #0]
    53ba:	18d3      	adds	r3, r2, r3
    53bc:	781b      	ldrb	r3, [r3, #0]
    53be:	2b46      	cmp	r3, #70	; 0x46
    53c0:	d909      	bls.n	53d6 <m2m_wifi_connect_sc+0xea>
    53c2:	2396      	movs	r3, #150	; 0x96
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	2290      	movs	r2, #144	; 0x90
    53ca:	18ba      	adds	r2, r7, r2
    53cc:	6812      	ldr	r2, [r2, #0]
    53ce:	18d3      	adds	r3, r2, r3
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	2b60      	cmp	r3, #96	; 0x60
    53d4:	d909      	bls.n	53ea <m2m_wifi_connect_sc+0xfe>
    53d6:	2396      	movs	r3, #150	; 0x96
    53d8:	18fb      	adds	r3, r7, r3
    53da:	781b      	ldrb	r3, [r3, #0]
    53dc:	2290      	movs	r2, #144	; 0x90
    53de:	18ba      	adds	r2, r7, r2
    53e0:	6812      	ldr	r2, [r2, #0]
    53e2:	18d3      	adds	r3, r2, r3
    53e4:	781b      	ldrb	r3, [r3, #0]
    53e6:	2b66      	cmp	r3, #102	; 0x66
    53e8:	d911      	bls.n	540e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    53ea:	4aaf      	ldr	r2, [pc, #700]	; (56a8 <m2m_wifi_connect_sc+0x3bc>)
    53ec:	49a7      	ldr	r1, [pc, #668]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    53ee:	4ba8      	ldr	r3, [pc, #672]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    53f0:	0018      	movs	r0, r3
    53f2:	4ba8      	ldr	r3, [pc, #672]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    53f4:	4798      	blx	r3
    53f6:	4bad      	ldr	r3, [pc, #692]	; (56ac <m2m_wifi_connect_sc+0x3c0>)
    53f8:	0018      	movs	r0, r3
    53fa:	4ba8      	ldr	r3, [pc, #672]	; (569c <m2m_wifi_connect_sc+0x3b0>)
    53fc:	4798      	blx	r3
    53fe:	200d      	movs	r0, #13
    5400:	4ba7      	ldr	r3, [pc, #668]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    5402:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    5404:	2397      	movs	r3, #151	; 0x97
    5406:	18fb      	adds	r3, r7, r3
    5408:	22f4      	movs	r2, #244	; 0xf4
    540a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    540c:	e18c      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    540e:	2396      	movs	r3, #150	; 0x96
    5410:	18fb      	adds	r3, r7, r3
    5412:	781a      	ldrb	r2, [r3, #0]
    5414:	2396      	movs	r3, #150	; 0x96
    5416:	18fb      	adds	r3, r7, r3
    5418:	3201      	adds	r2, #1
    541a:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    541c:	2396      	movs	r3, #150	; 0x96
    541e:	18fb      	adds	r3, r7, r3
    5420:	781b      	ldrb	r3, [r3, #0]
    5422:	2b3f      	cmp	r3, #63	; 0x3f
    5424:	d9a5      	bls.n	5372 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    5426:	230b      	movs	r3, #11
    5428:	18fb      	adds	r3, r7, r3
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	2b00      	cmp	r3, #0
    542e:	d004      	beq.n	543a <m2m_wifi_connect_sc+0x14e>
    5430:	230b      	movs	r3, #11
    5432:	18fb      	adds	r3, r7, r3
    5434:	781b      	ldrb	r3, [r3, #0]
    5436:	2b20      	cmp	r3, #32
    5438:	d911      	bls.n	545e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    543a:	4a9d      	ldr	r2, [pc, #628]	; (56b0 <m2m_wifi_connect_sc+0x3c4>)
    543c:	4993      	ldr	r1, [pc, #588]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    543e:	4b94      	ldr	r3, [pc, #592]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    5440:	0018      	movs	r0, r3
    5442:	4b94      	ldr	r3, [pc, #592]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    5444:	4798      	blx	r3
    5446:	4b9b      	ldr	r3, [pc, #620]	; (56b4 <m2m_wifi_connect_sc+0x3c8>)
    5448:	0018      	movs	r0, r3
    544a:	4b94      	ldr	r3, [pc, #592]	; (569c <m2m_wifi_connect_sc+0x3b0>)
    544c:	4798      	blx	r3
    544e:	200d      	movs	r0, #13
    5450:	4b93      	ldr	r3, [pc, #588]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    5452:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    5454:	2397      	movs	r3, #151	; 0x97
    5456:	18fb      	adds	r3, r7, r3
    5458:	22f4      	movs	r2, #244	; 0xf4
    545a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    545c:	e164      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    545e:	23a8      	movs	r3, #168	; 0xa8
    5460:	18fb      	adds	r3, r7, r3
    5462:	881b      	ldrh	r3, [r3, #0]
    5464:	2b0d      	cmp	r3, #13
    5466:	d916      	bls.n	5496 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    5468:	23a8      	movs	r3, #168	; 0xa8
    546a:	18fb      	adds	r3, r7, r3
    546c:	881b      	ldrh	r3, [r3, #0]
    546e:	2bff      	cmp	r3, #255	; 0xff
    5470:	d011      	beq.n	5496 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    5472:	4a91      	ldr	r2, [pc, #580]	; (56b8 <m2m_wifi_connect_sc+0x3cc>)
    5474:	4985      	ldr	r1, [pc, #532]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    5476:	4b86      	ldr	r3, [pc, #536]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    5478:	0018      	movs	r0, r3
    547a:	4b86      	ldr	r3, [pc, #536]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    547c:	4798      	blx	r3
    547e:	4b8f      	ldr	r3, [pc, #572]	; (56bc <m2m_wifi_connect_sc+0x3d0>)
    5480:	0018      	movs	r0, r3
    5482:	4b86      	ldr	r3, [pc, #536]	; (569c <m2m_wifi_connect_sc+0x3b0>)
    5484:	4798      	blx	r3
    5486:	200d      	movs	r0, #13
    5488:	4b85      	ldr	r3, [pc, #532]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    548a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    548c:	2397      	movs	r3, #151	; 0x97
    548e:	18fb      	adds	r3, r7, r3
    5490:	22f4      	movs	r2, #244	; 0xf4
    5492:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5494:	e148      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    5496:	230b      	movs	r3, #11
    5498:	18fb      	adds	r3, r7, r3
    549a:	781a      	ldrb	r2, [r3, #0]
    549c:	68f9      	ldr	r1, [r7, #12]
    549e:	2314      	movs	r3, #20
    54a0:	18fb      	adds	r3, r7, r3
    54a2:	3346      	adds	r3, #70	; 0x46
    54a4:	0018      	movs	r0, r3
    54a6:	4b86      	ldr	r3, [pc, #536]	; (56c0 <m2m_wifi_connect_sc+0x3d4>)
    54a8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    54aa:	230b      	movs	r3, #11
    54ac:	18fb      	adds	r3, r7, r3
    54ae:	781b      	ldrb	r3, [r3, #0]
    54b0:	2214      	movs	r2, #20
    54b2:	18ba      	adds	r2, r7, r2
    54b4:	2146      	movs	r1, #70	; 0x46
    54b6:	18d3      	adds	r3, r2, r3
    54b8:	185b      	adds	r3, r3, r1
    54ba:	2200      	movs	r2, #0
    54bc:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    54be:	2314      	movs	r3, #20
    54c0:	18fb      	adds	r3, r7, r3
    54c2:	22a8      	movs	r2, #168	; 0xa8
    54c4:	18ba      	adds	r2, r7, r2
    54c6:	2144      	movs	r1, #68	; 0x44
    54c8:	8812      	ldrh	r2, [r2, #0]
    54ca:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    54cc:	23ac      	movs	r3, #172	; 0xac
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	781b      	ldrb	r3, [r3, #0]
    54d2:	1e5a      	subs	r2, r3, #1
    54d4:	4193      	sbcs	r3, r2
    54d6:	b2db      	uxtb	r3, r3
    54d8:	0019      	movs	r1, r3
    54da:	2314      	movs	r3, #20
    54dc:	18fb      	adds	r3, r7, r3
    54de:	2267      	movs	r2, #103	; 0x67
    54e0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    54e2:	2314      	movs	r3, #20
    54e4:	18fb      	adds	r3, r7, r3
    54e6:	228c      	movs	r2, #140	; 0x8c
    54e8:	18ba      	adds	r2, r7, r2
    54ea:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    54ec:	238c      	movs	r3, #140	; 0x8c
    54ee:	18fb      	adds	r3, r7, r3
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	220a      	movs	r2, #10
    54f4:	18ba      	adds	r2, r7, r2
    54f6:	2141      	movs	r1, #65	; 0x41
    54f8:	7812      	ldrb	r2, [r2, #0]
    54fa:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    54fc:	230a      	movs	r3, #10
    54fe:	18fb      	adds	r3, r7, r3
    5500:	781b      	ldrb	r3, [r3, #0]
    5502:	2b03      	cmp	r3, #3
    5504:	d000      	beq.n	5508 <m2m_wifi_connect_sc+0x21c>
    5506:	e07b      	b.n	5600 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    5508:	687b      	ldr	r3, [r7, #4]
    550a:	2288      	movs	r2, #136	; 0x88
    550c:	18ba      	adds	r2, r7, r2
    550e:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    5510:	238c      	movs	r3, #140	; 0x8c
    5512:	18fb      	adds	r3, r7, r3
    5514:	681b      	ldr	r3, [r3, #0]
    5516:	2284      	movs	r2, #132	; 0x84
    5518:	18ba      	adds	r2, r7, r2
    551a:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    551c:	2388      	movs	r3, #136	; 0x88
    551e:	18fb      	adds	r3, r7, r3
    5520:	681b      	ldr	r3, [r3, #0]
    5522:	781b      	ldrb	r3, [r3, #0]
    5524:	3b01      	subs	r3, #1
    5526:	b2da      	uxtb	r2, r3
    5528:	2384      	movs	r3, #132	; 0x84
    552a:	18fb      	adds	r3, r7, r3
    552c:	681b      	ldr	r3, [r3, #0]
    552e:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    5530:	2384      	movs	r3, #132	; 0x84
    5532:	18fb      	adds	r3, r7, r3
    5534:	681b      	ldr	r3, [r3, #0]
    5536:	781b      	ldrb	r3, [r3, #0]
    5538:	2b03      	cmp	r3, #3
    553a:	d917      	bls.n	556c <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    553c:	4a61      	ldr	r2, [pc, #388]	; (56c4 <m2m_wifi_connect_sc+0x3d8>)
    553e:	4953      	ldr	r1, [pc, #332]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    5540:	4b53      	ldr	r3, [pc, #332]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    5542:	0018      	movs	r0, r3
    5544:	4b53      	ldr	r3, [pc, #332]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    5546:	4798      	blx	r3
    5548:	2384      	movs	r3, #132	; 0x84
    554a:	18fb      	adds	r3, r7, r3
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	781b      	ldrb	r3, [r3, #0]
    5550:	001a      	movs	r2, r3
    5552:	4b5d      	ldr	r3, [pc, #372]	; (56c8 <m2m_wifi_connect_sc+0x3dc>)
    5554:	0011      	movs	r1, r2
    5556:	0018      	movs	r0, r3
    5558:	4b4e      	ldr	r3, [pc, #312]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    555a:	4798      	blx	r3
    555c:	200d      	movs	r0, #13
    555e:	4b50      	ldr	r3, [pc, #320]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    5560:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5562:	2397      	movs	r3, #151	; 0x97
    5564:	18fb      	adds	r3, r7, r3
    5566:	22f4      	movs	r2, #244	; 0xf4
    5568:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    556a:	e0dd      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    556c:	2388      	movs	r3, #136	; 0x88
    556e:	18fb      	adds	r3, r7, r3
    5570:	681b      	ldr	r3, [r3, #0]
    5572:	785b      	ldrb	r3, [r3, #1]
    5574:	3b01      	subs	r3, #1
    5576:	b2da      	uxtb	r2, r3
    5578:	2384      	movs	r3, #132	; 0x84
    557a:	18fb      	adds	r3, r7, r3
    557c:	681b      	ldr	r3, [r3, #0]
    557e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    5580:	2384      	movs	r3, #132	; 0x84
    5582:	18fb      	adds	r3, r7, r3
    5584:	681b      	ldr	r3, [r3, #0]
    5586:	785b      	ldrb	r3, [r3, #1]
    5588:	2b0a      	cmp	r3, #10
    558a:	d01e      	beq.n	55ca <m2m_wifi_connect_sc+0x2de>
    558c:	2384      	movs	r3, #132	; 0x84
    558e:	18fb      	adds	r3, r7, r3
    5590:	681b      	ldr	r3, [r3, #0]
    5592:	785b      	ldrb	r3, [r3, #1]
    5594:	2b1a      	cmp	r3, #26
    5596:	d018      	beq.n	55ca <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    5598:	2390      	movs	r3, #144	; 0x90
    559a:	009a      	lsls	r2, r3, #2
    559c:	493b      	ldr	r1, [pc, #236]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    559e:	4b3c      	ldr	r3, [pc, #240]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    55a0:	0018      	movs	r0, r3
    55a2:	4b3c      	ldr	r3, [pc, #240]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    55a4:	4798      	blx	r3
    55a6:	2384      	movs	r3, #132	; 0x84
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	681b      	ldr	r3, [r3, #0]
    55ac:	785b      	ldrb	r3, [r3, #1]
    55ae:	001a      	movs	r2, r3
    55b0:	4b46      	ldr	r3, [pc, #280]	; (56cc <m2m_wifi_connect_sc+0x3e0>)
    55b2:	0011      	movs	r1, r2
    55b4:	0018      	movs	r0, r3
    55b6:	4b37      	ldr	r3, [pc, #220]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    55b8:	4798      	blx	r3
    55ba:	200d      	movs	r0, #13
    55bc:	4b38      	ldr	r3, [pc, #224]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    55be:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    55c0:	2397      	movs	r3, #151	; 0x97
    55c2:	18fb      	adds	r3, r7, r3
    55c4:	22f4      	movs	r2, #244	; 0xf4
    55c6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    55c8:	e0ae      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    55ca:	2384      	movs	r3, #132	; 0x84
    55cc:	18fb      	adds	r3, r7, r3
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	1c98      	adds	r0, r3, #2
    55d2:	2388      	movs	r3, #136	; 0x88
    55d4:	18fb      	adds	r3, r7, r3
    55d6:	681b      	ldr	r3, [r3, #0]
    55d8:	1c99      	adds	r1, r3, #2
    55da:	2388      	movs	r3, #136	; 0x88
    55dc:	18fb      	adds	r3, r7, r3
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	785b      	ldrb	r3, [r3, #1]
    55e2:	001a      	movs	r2, r3
    55e4:	4b36      	ldr	r3, [pc, #216]	; (56c0 <m2m_wifi_connect_sc+0x3d4>)
    55e6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    55e8:	2388      	movs	r3, #136	; 0x88
    55ea:	18fb      	adds	r3, r7, r3
    55ec:	681b      	ldr	r3, [r3, #0]
    55ee:	785b      	ldrb	r3, [r3, #1]
    55f0:	001a      	movs	r2, r3
    55f2:	2384      	movs	r3, #132	; 0x84
    55f4:	18fb      	adds	r3, r7, r3
    55f6:	681b      	ldr	r3, [r3, #0]
    55f8:	189b      	adds	r3, r3, r2
    55fa:	2200      	movs	r2, #0
    55fc:	709a      	strb	r2, [r3, #2]
    55fe:	e082      	b.n	5706 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    5600:	230a      	movs	r3, #10
    5602:	18fb      	adds	r3, r7, r3
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	2b02      	cmp	r3, #2
    5608:	d130      	bne.n	566c <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    560a:	2382      	movs	r3, #130	; 0x82
    560c:	18fc      	adds	r4, r7, r3
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	0018      	movs	r0, r3
    5612:	4b24      	ldr	r3, [pc, #144]	; (56a4 <m2m_wifi_connect_sc+0x3b8>)
    5614:	4798      	blx	r3
    5616:	0003      	movs	r3, r0
    5618:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    561a:	2382      	movs	r3, #130	; 0x82
    561c:	18fb      	adds	r3, r7, r3
    561e:	881b      	ldrh	r3, [r3, #0]
    5620:	2b00      	cmp	r3, #0
    5622:	d004      	beq.n	562e <m2m_wifi_connect_sc+0x342>
    5624:	2382      	movs	r3, #130	; 0x82
    5626:	18fb      	adds	r3, r7, r3
    5628:	881b      	ldrh	r3, [r3, #0]
    562a:	2b40      	cmp	r3, #64	; 0x40
    562c:	d911      	bls.n	5652 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    562e:	4a28      	ldr	r2, [pc, #160]	; (56d0 <m2m_wifi_connect_sc+0x3e4>)
    5630:	4916      	ldr	r1, [pc, #88]	; (568c <m2m_wifi_connect_sc+0x3a0>)
    5632:	4b17      	ldr	r3, [pc, #92]	; (5690 <m2m_wifi_connect_sc+0x3a4>)
    5634:	0018      	movs	r0, r3
    5636:	4b17      	ldr	r3, [pc, #92]	; (5694 <m2m_wifi_connect_sc+0x3a8>)
    5638:	4798      	blx	r3
    563a:	4b26      	ldr	r3, [pc, #152]	; (56d4 <m2m_wifi_connect_sc+0x3e8>)
    563c:	0018      	movs	r0, r3
    563e:	4b17      	ldr	r3, [pc, #92]	; (569c <m2m_wifi_connect_sc+0x3b0>)
    5640:	4798      	blx	r3
    5642:	200d      	movs	r0, #13
    5644:	4b16      	ldr	r3, [pc, #88]	; (56a0 <m2m_wifi_connect_sc+0x3b4>)
    5646:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    5648:	2397      	movs	r3, #151	; 0x97
    564a:	18fb      	adds	r3, r7, r3
    564c:	22f4      	movs	r2, #244	; 0xf4
    564e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    5650:	e06a      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    5652:	238c      	movs	r3, #140	; 0x8c
    5654:	18fb      	adds	r3, r7, r3
    5656:	6818      	ldr	r0, [r3, #0]
    5658:	2382      	movs	r3, #130	; 0x82
    565a:	18fb      	adds	r3, r7, r3
    565c:	881b      	ldrh	r3, [r3, #0]
    565e:	3301      	adds	r3, #1
    5660:	001a      	movs	r2, r3
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	0019      	movs	r1, r3
    5666:	4b16      	ldr	r3, [pc, #88]	; (56c0 <m2m_wifi_connect_sc+0x3d4>)
    5668:	4798      	blx	r3
    566a:	e04c      	b.n	5706 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    566c:	230a      	movs	r3, #10
    566e:	18fb      	adds	r3, r7, r3
    5670:	781b      	ldrb	r3, [r3, #0]
    5672:	2b04      	cmp	r3, #4
    5674:	d130      	bne.n	56d8 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    5676:	238c      	movs	r3, #140	; 0x8c
    5678:	18fb      	adds	r3, r7, r3
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	6879      	ldr	r1, [r7, #4]
    567e:	223e      	movs	r2, #62	; 0x3e
    5680:	0018      	movs	r0, r3
    5682:	4b0f      	ldr	r3, [pc, #60]	; (56c0 <m2m_wifi_connect_sc+0x3d4>)
    5684:	4798      	blx	r3
    5686:	e03e      	b.n	5706 <m2m_wifi_connect_sc+0x41a>
    5688:	00000203 	.word	0x00000203
    568c:	000132c8 	.word	0x000132c8
    5690:	00012fb4 	.word	0x00012fb4
    5694:	000114d9 	.word	0x000114d9
    5698:	00013160 	.word	0x00013160
    569c:	000115f9 	.word	0x000115f9
    56a0:	0001150d 	.word	0x0001150d
    56a4:	00003efd 	.word	0x00003efd
    56a8:	0000020f 	.word	0x0000020f
    56ac:	00013174 	.word	0x00013174
    56b0:	00000219 	.word	0x00000219
    56b4:	00013180 	.word	0x00013180
    56b8:	00000222 	.word	0x00000222
    56bc:	00013194 	.word	0x00013194
    56c0:	00003e81 	.word	0x00003e81
    56c4:	00000239 	.word	0x00000239
    56c8:	000131a0 	.word	0x000131a0
    56cc:	000131bc 	.word	0x000131bc
    56d0:	0000024f 	.word	0x0000024f
    56d4:	000131d8 	.word	0x000131d8
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    56d8:	230a      	movs	r3, #10
    56da:	18fb      	adds	r3, r7, r3
    56dc:	781b      	ldrb	r3, [r3, #0]
    56de:	2b01      	cmp	r3, #1
    56e0:	d011      	beq.n	5706 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    56e2:	4a15      	ldr	r2, [pc, #84]	; (5738 <m2m_wifi_connect_sc+0x44c>)
    56e4:	4915      	ldr	r1, [pc, #84]	; (573c <m2m_wifi_connect_sc+0x450>)
    56e6:	4b16      	ldr	r3, [pc, #88]	; (5740 <m2m_wifi_connect_sc+0x454>)
    56e8:	0018      	movs	r0, r3
    56ea:	4b16      	ldr	r3, [pc, #88]	; (5744 <m2m_wifi_connect_sc+0x458>)
    56ec:	4798      	blx	r3
    56ee:	4b16      	ldr	r3, [pc, #88]	; (5748 <m2m_wifi_connect_sc+0x45c>)
    56f0:	0018      	movs	r0, r3
    56f2:	4b16      	ldr	r3, [pc, #88]	; (574c <m2m_wifi_connect_sc+0x460>)
    56f4:	4798      	blx	r3
    56f6:	200d      	movs	r0, #13
    56f8:	4b15      	ldr	r3, [pc, #84]	; (5750 <m2m_wifi_connect_sc+0x464>)
    56fa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    56fc:	2397      	movs	r3, #151	; 0x97
    56fe:	18fb      	adds	r3, r7, r3
    5700:	22f4      	movs	r2, #244	; 0xf4
    5702:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    5704:	e010      	b.n	5728 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    5706:	2397      	movs	r3, #151	; 0x97
    5708:	18fc      	adds	r4, r7, r3
    570a:	2314      	movs	r3, #20
    570c:	18fa      	adds	r2, r7, r3
    570e:	2300      	movs	r3, #0
    5710:	9302      	str	r3, [sp, #8]
    5712:	2300      	movs	r3, #0
    5714:	9301      	str	r3, [sp, #4]
    5716:	2300      	movs	r3, #0
    5718:	9300      	str	r3, [sp, #0]
    571a:	236c      	movs	r3, #108	; 0x6c
    571c:	2128      	movs	r1, #40	; 0x28
    571e:	2001      	movs	r0, #1
    5720:	4d0c      	ldr	r5, [pc, #48]	; (5754 <m2m_wifi_connect_sc+0x468>)
    5722:	47a8      	blx	r5
    5724:	0003      	movs	r3, r0
    5726:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    5728:	2397      	movs	r3, #151	; 0x97
    572a:	18fb      	adds	r3, r7, r3
    572c:	781b      	ldrb	r3, [r3, #0]
    572e:	b25b      	sxtb	r3, r3
}
    5730:	0018      	movs	r0, r3
    5732:	46bd      	mov	sp, r7
    5734:	b026      	add	sp, #152	; 0x98
    5736:	bdb0      	pop	{r4, r5, r7, pc}
    5738:	0000025f 	.word	0x0000025f
    573c:	000132c8 	.word	0x000132c8
    5740:	00012fb4 	.word	0x00012fb4
    5744:	000114d9 	.word	0x000114d9
    5748:	000131f4 	.word	0x000131f4
    574c:	000115f9 	.word	0x000115f9
    5750:	0001150d 	.word	0x0001150d
    5754:	00004299 	.word	0x00004299

00005758 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    5758:	b590      	push	{r4, r7, lr}
    575a:	b085      	sub	sp, #20
    575c:	af00      	add	r7, sp, #0
    575e:	6078      	str	r0, [r7, #4]
    5760:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    5762:	230f      	movs	r3, #15
    5764:	18fb      	adds	r3, r7, r3
    5766:	2200      	movs	r2, #0
    5768:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    576a:	230f      	movs	r3, #15
    576c:	18fc      	adds	r4, r7, r3
    576e:	4b14      	ldr	r3, [pc, #80]	; (57c0 <m2m_wifi_get_otp_mac_address+0x68>)
    5770:	4798      	blx	r3
    5772:	0003      	movs	r3, r0
    5774:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    5776:	230f      	movs	r3, #15
    5778:	18fb      	adds	r3, r7, r3
    577a:	781b      	ldrb	r3, [r3, #0]
    577c:	b25b      	sxtb	r3, r3
    577e:	2b00      	cmp	r3, #0
    5780:	d115      	bne.n	57ae <m2m_wifi_get_otp_mac_address+0x56>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    5782:	230f      	movs	r3, #15
    5784:	18fc      	adds	r4, r7, r3
    5786:	683a      	ldr	r2, [r7, #0]
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	0011      	movs	r1, r2
    578c:	0018      	movs	r0, r3
    578e:	4b0d      	ldr	r3, [pc, #52]	; (57c4 <m2m_wifi_get_otp_mac_address+0x6c>)
    5790:	4798      	blx	r3
    5792:	0003      	movs	r3, r0
    5794:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    5796:	230f      	movs	r3, #15
    5798:	18fb      	adds	r3, r7, r3
    579a:	781b      	ldrb	r3, [r3, #0]
    579c:	b25b      	sxtb	r3, r3
    579e:	2b00      	cmp	r3, #0
    57a0:	d105      	bne.n	57ae <m2m_wifi_get_otp_mac_address+0x56>
		{
			ret = hif_chip_sleep();
    57a2:	230f      	movs	r3, #15
    57a4:	18fc      	adds	r4, r7, r3
    57a6:	4b08      	ldr	r3, [pc, #32]	; (57c8 <m2m_wifi_get_otp_mac_address+0x70>)
    57a8:	4798      	blx	r3
    57aa:	0003      	movs	r3, r0
    57ac:	7023      	strb	r3, [r4, #0]
		}
	}
	return ret;
    57ae:	230f      	movs	r3, #15
    57b0:	18fb      	adds	r3, r7, r3
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b25b      	sxtb	r3, r3
}
    57b6:	0018      	movs	r0, r3
    57b8:	46bd      	mov	sp, r7
    57ba:	b005      	add	sp, #20
    57bc:	bd90      	pop	{r4, r7, pc}
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	000040cd 	.word	0x000040cd
    57c4:	00005f89 	.word	0x00005f89
    57c8:	00004165 	.word	0x00004165

000057cc <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    57cc:	b590      	push	{r4, r7, lr}
    57ce:	b085      	sub	sp, #20
    57d0:	af00      	add	r7, sp, #0
    57d2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    57d4:	230f      	movs	r3, #15
    57d6:	18fb      	adds	r3, r7, r3
    57d8:	2200      	movs	r2, #0
    57da:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    57dc:	230f      	movs	r3, #15
    57de:	18fc      	adds	r4, r7, r3
    57e0:	4b12      	ldr	r3, [pc, #72]	; (582c <m2m_wifi_get_mac_address+0x60>)
    57e2:	4798      	blx	r3
    57e4:	0003      	movs	r3, r0
    57e6:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    57e8:	230f      	movs	r3, #15
    57ea:	18fb      	adds	r3, r7, r3
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	b25b      	sxtb	r3, r3
    57f0:	2b00      	cmp	r3, #0
    57f2:	d113      	bne.n	581c <m2m_wifi_get_mac_address+0x50>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    57f4:	230f      	movs	r3, #15
    57f6:	18fc      	adds	r4, r7, r3
    57f8:	687b      	ldr	r3, [r7, #4]
    57fa:	0018      	movs	r0, r3
    57fc:	4b0c      	ldr	r3, [pc, #48]	; (5830 <m2m_wifi_get_mac_address+0x64>)
    57fe:	4798      	blx	r3
    5800:	0003      	movs	r3, r0
    5802:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    5804:	230f      	movs	r3, #15
    5806:	18fb      	adds	r3, r7, r3
    5808:	781b      	ldrb	r3, [r3, #0]
    580a:	b25b      	sxtb	r3, r3
    580c:	2b00      	cmp	r3, #0
    580e:	d105      	bne.n	581c <m2m_wifi_get_mac_address+0x50>
		{
			ret = hif_chip_sleep();
    5810:	230f      	movs	r3, #15
    5812:	18fc      	adds	r4, r7, r3
    5814:	4b07      	ldr	r3, [pc, #28]	; (5834 <m2m_wifi_get_mac_address+0x68>)
    5816:	4798      	blx	r3
    5818:	0003      	movs	r3, r0
    581a:	7023      	strb	r3, [r4, #0]
		}
	}

	return ret;
    581c:	230f      	movs	r3, #15
    581e:	18fb      	adds	r3, r7, r3
    5820:	781b      	ldrb	r3, [r3, #0]
    5822:	b25b      	sxtb	r3, r3
}
    5824:	0018      	movs	r0, r3
    5826:	46bd      	mov	sp, r7
    5828:	b005      	add	sp, #20
    582a:	bd90      	pop	{r4, r7, pc}
    582c:	000040cd 	.word	0x000040cd
    5830:	0000608d 	.word	0x0000608d
    5834:	00004165 	.word	0x00004165

00005838 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    5838:	b590      	push	{r4, r7, lr}
    583a:	b087      	sub	sp, #28
    583c:	af00      	add	r7, sp, #0
    583e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    5840:	2317      	movs	r3, #23
    5842:	18fb      	adds	r3, r7, r3
    5844:	2200      	movs	r2, #0
    5846:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    5848:	687b      	ldr	r3, [r7, #4]
    584a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    584c:	693a      	ldr	r2, [r7, #16]
    584e:	23a5      	movs	r3, #165	; 0xa5
    5850:	015b      	lsls	r3, r3, #5
    5852:	0011      	movs	r1, r2
    5854:	0018      	movs	r0, r3
    5856:	4b13      	ldr	r3, [pc, #76]	; (58a4 <chip_apply_conf+0x6c>)
    5858:	4798      	blx	r3
		if(val32 != 0) {		
    585a:	693b      	ldr	r3, [r7, #16]
    585c:	2b00      	cmp	r3, #0
    585e:	d018      	beq.n	5892 <chip_apply_conf+0x5a>
			uint32 reg = 0;
    5860:	2300      	movs	r3, #0
    5862:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    5864:	2317      	movs	r3, #23
    5866:	18fc      	adds	r4, r7, r3
    5868:	230c      	movs	r3, #12
    586a:	18fa      	adds	r2, r7, r3
    586c:	23a5      	movs	r3, #165	; 0xa5
    586e:	015b      	lsls	r3, r3, #5
    5870:	0011      	movs	r1, r2
    5872:	0018      	movs	r0, r3
    5874:	4b0c      	ldr	r3, [pc, #48]	; (58a8 <chip_apply_conf+0x70>)
    5876:	4798      	blx	r3
    5878:	0003      	movs	r3, r0
    587a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    587c:	2317      	movs	r3, #23
    587e:	18fb      	adds	r3, r7, r3
    5880:	781b      	ldrb	r3, [r3, #0]
    5882:	b25b      	sxtb	r3, r3
    5884:	2b00      	cmp	r3, #0
    5886:	d1e1      	bne.n	584c <chip_apply_conf+0x14>
				if(reg == val32)
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	693b      	ldr	r3, [r7, #16]
    588c:	429a      	cmp	r2, r3
    588e:	d002      	beq.n	5896 <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    5890:	e7dc      	b.n	584c <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    5892:	46c0      	nop			; (mov r8, r8)
    5894:	e000      	b.n	5898 <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    5896:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    5898:	2300      	movs	r3, #0
}
    589a:	0018      	movs	r0, r3
    589c:	46bd      	mov	sp, r7
    589e:	b007      	add	sp, #28
    58a0:	bd90      	pop	{r4, r7, pc}
    58a2:	46c0      	nop			; (mov r8, r8)
    58a4:	000061fd 	.word	0x000061fd
    58a8:	000061d9 	.word	0x000061d9

000058ac <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    58ac:	b590      	push	{r4, r7, lr}
    58ae:	b085      	sub	sp, #20
    58b0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    58b2:	230f      	movs	r3, #15
    58b4:	18fb      	adds	r3, r7, r3
    58b6:	2200      	movs	r2, #0
    58b8:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    58ba:	2300      	movs	r3, #0
    58bc:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    58be:	2001      	movs	r0, #1
    58c0:	4b64      	ldr	r3, [pc, #400]	; (5a54 <nm_clkless_wake+0x1a8>)
    58c2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    58c4:	230f      	movs	r3, #15
    58c6:	18fc      	adds	r4, r7, r3
    58c8:	1d3b      	adds	r3, r7, #4
    58ca:	0019      	movs	r1, r3
    58cc:	2001      	movs	r0, #1
    58ce:	4b62      	ldr	r3, [pc, #392]	; (5a58 <nm_clkless_wake+0x1ac>)
    58d0:	4798      	blx	r3
    58d2:	0003      	movs	r3, r0
    58d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    58d6:	230f      	movs	r3, #15
    58d8:	18fb      	adds	r3, r7, r3
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	b25b      	sxtb	r3, r3
    58de:	2b00      	cmp	r3, #0
    58e0:	d00d      	beq.n	58fe <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    58e2:	495e      	ldr	r1, [pc, #376]	; (5a5c <nm_clkless_wake+0x1b0>)
    58e4:	4b5e      	ldr	r3, [pc, #376]	; (5a60 <nm_clkless_wake+0x1b4>)
    58e6:	2272      	movs	r2, #114	; 0x72
    58e8:	0018      	movs	r0, r3
    58ea:	4b5e      	ldr	r3, [pc, #376]	; (5a64 <nm_clkless_wake+0x1b8>)
    58ec:	4798      	blx	r3
    58ee:	4b5e      	ldr	r3, [pc, #376]	; (5a68 <nm_clkless_wake+0x1bc>)
    58f0:	0018      	movs	r0, r3
    58f2:	4b5e      	ldr	r3, [pc, #376]	; (5a6c <nm_clkless_wake+0x1c0>)
    58f4:	4798      	blx	r3
    58f6:	200d      	movs	r0, #13
    58f8:	4b5d      	ldr	r3, [pc, #372]	; (5a70 <nm_clkless_wake+0x1c4>)
    58fa:	4798      	blx	r3
		goto _WAKE_EXIT;
    58fc:	e0a1      	b.n	5a42 <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    58fe:	687b      	ldr	r3, [r7, #4]
    5900:	2202      	movs	r2, #2
    5902:	4313      	orrs	r3, r2
    5904:	0019      	movs	r1, r3
    5906:	2001      	movs	r0, #1
    5908:	4b5a      	ldr	r3, [pc, #360]	; (5a74 <nm_clkless_wake+0x1c8>)
    590a:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    590c:	2001      	movs	r0, #1
    590e:	4b51      	ldr	r3, [pc, #324]	; (5a54 <nm_clkless_wake+0x1a8>)
    5910:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    5912:	4b59      	ldr	r3, [pc, #356]	; (5a78 <nm_clkless_wake+0x1cc>)
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	220f      	movs	r2, #15
    5918:	18bc      	adds	r4, r7, r2
    591a:	003a      	movs	r2, r7
    591c:	0011      	movs	r1, r2
    591e:	0018      	movs	r0, r3
    5920:	4b4d      	ldr	r3, [pc, #308]	; (5a58 <nm_clkless_wake+0x1ac>)
    5922:	4798      	blx	r3
    5924:	0003      	movs	r3, r0
    5926:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    5928:	230f      	movs	r3, #15
    592a:	18fb      	adds	r3, r7, r3
    592c:	781b      	ldrb	r3, [r3, #0]
    592e:	b25b      	sxtb	r3, r3
    5930:	2b00      	cmp	r3, #0
    5932:	d108      	bne.n	5946 <nm_clkless_wake+0x9a>
    5934:	230f      	movs	r3, #15
    5936:	18fb      	adds	r3, r7, r3
    5938:	781b      	ldrb	r3, [r3, #0]
    593a:	b25b      	sxtb	r3, r3
    593c:	2b00      	cmp	r3, #0
    593e:	d162      	bne.n	5a06 <nm_clkless_wake+0x15a>
    5940:	683b      	ldr	r3, [r7, #0]
    5942:	2b00      	cmp	r3, #0
    5944:	d15f      	bne.n	5a06 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    5946:	4b4c      	ldr	r3, [pc, #304]	; (5a78 <nm_clkless_wake+0x1cc>)
    5948:	220e      	movs	r2, #14
    594a:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    594c:	2001      	movs	r0, #1
    594e:	4b41      	ldr	r3, [pc, #260]	; (5a54 <nm_clkless_wake+0x1a8>)
    5950:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    5952:	4b49      	ldr	r3, [pc, #292]	; (5a78 <nm_clkless_wake+0x1cc>)
    5954:	681b      	ldr	r3, [r3, #0]
    5956:	220f      	movs	r2, #15
    5958:	18bc      	adds	r4, r7, r2
    595a:	003a      	movs	r2, r7
    595c:	0011      	movs	r1, r2
    595e:	0018      	movs	r0, r3
    5960:	4b3d      	ldr	r3, [pc, #244]	; (5a58 <nm_clkless_wake+0x1ac>)
    5962:	4798      	blx	r3
    5964:	0003      	movs	r3, r0
    5966:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    5968:	230f      	movs	r3, #15
    596a:	18fb      	adds	r3, r7, r3
    596c:	781b      	ldrb	r3, [r3, #0]
    596e:	b25b      	sxtb	r3, r3
    5970:	2b00      	cmp	r3, #0
    5972:	d108      	bne.n	5986 <nm_clkless_wake+0xda>
    5974:	230f      	movs	r3, #15
    5976:	18fb      	adds	r3, r7, r3
    5978:	781b      	ldrb	r3, [r3, #0]
    597a:	b25b      	sxtb	r3, r3
    597c:	2b00      	cmp	r3, #0
    597e:	d142      	bne.n	5a06 <nm_clkless_wake+0x15a>
    5980:	683b      	ldr	r3, [r7, #0]
    5982:	2b00      	cmp	r3, #0
    5984:	d13f      	bne.n	5a06 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    5986:	4b3c      	ldr	r3, [pc, #240]	; (5a78 <nm_clkless_wake+0x1cc>)
    5988:	2213      	movs	r2, #19
    598a:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    598c:	2001      	movs	r0, #1
    598e:	4b31      	ldr	r3, [pc, #196]	; (5a54 <nm_clkless_wake+0x1a8>)
    5990:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    5992:	4b39      	ldr	r3, [pc, #228]	; (5a78 <nm_clkless_wake+0x1cc>)
    5994:	681b      	ldr	r3, [r3, #0]
    5996:	220f      	movs	r2, #15
    5998:	18bc      	adds	r4, r7, r2
    599a:	003a      	movs	r2, r7
    599c:	0011      	movs	r1, r2
    599e:	0018      	movs	r0, r3
    59a0:	4b2d      	ldr	r3, [pc, #180]	; (5a58 <nm_clkless_wake+0x1ac>)
    59a2:	4798      	blx	r3
    59a4:	0003      	movs	r3, r0
    59a6:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    59a8:	230f      	movs	r3, #15
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	781b      	ldrb	r3, [r3, #0]
    59ae:	b25b      	sxtb	r3, r3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d028      	beq.n	5a06 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    59b4:	4929      	ldr	r1, [pc, #164]	; (5a5c <nm_clkless_wake+0x1b0>)
    59b6:	4b2a      	ldr	r3, [pc, #168]	; (5a60 <nm_clkless_wake+0x1b4>)
    59b8:	2296      	movs	r2, #150	; 0x96
    59ba:	0018      	movs	r0, r3
    59bc:	4b29      	ldr	r3, [pc, #164]	; (5a64 <nm_clkless_wake+0x1b8>)
    59be:	4798      	blx	r3
    59c0:	4b2e      	ldr	r3, [pc, #184]	; (5a7c <nm_clkless_wake+0x1d0>)
    59c2:	0018      	movs	r0, r3
    59c4:	4b29      	ldr	r3, [pc, #164]	; (5a6c <nm_clkless_wake+0x1c0>)
    59c6:	4798      	blx	r3
    59c8:	200d      	movs	r0, #13
    59ca:	4b29      	ldr	r3, [pc, #164]	; (5a70 <nm_clkless_wake+0x1c4>)
    59cc:	4798      	blx	r3
					goto _WAKE_EXIT;
    59ce:	e038      	b.n	5a42 <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    59d0:	2002      	movs	r0, #2
    59d2:	4b20      	ldr	r3, [pc, #128]	; (5a54 <nm_clkless_wake+0x1a8>)
    59d4:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    59d6:	4b28      	ldr	r3, [pc, #160]	; (5a78 <nm_clkless_wake+0x1cc>)
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	003a      	movs	r2, r7
    59dc:	0011      	movs	r1, r2
    59de:	0018      	movs	r0, r3
    59e0:	4b1d      	ldr	r3, [pc, #116]	; (5a58 <nm_clkless_wake+0x1ac>)
    59e2:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    59e4:	683b      	ldr	r3, [r7, #0]
    59e6:	2204      	movs	r2, #4
    59e8:	4013      	ands	r3, r2
    59ea:	d10c      	bne.n	5a06 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    59ec:	491b      	ldr	r1, [pc, #108]	; (5a5c <nm_clkless_wake+0x1b0>)
    59ee:	4b1c      	ldr	r3, [pc, #112]	; (5a60 <nm_clkless_wake+0x1b4>)
    59f0:	22aa      	movs	r2, #170	; 0xaa
    59f2:	0018      	movs	r0, r3
    59f4:	4b1b      	ldr	r3, [pc, #108]	; (5a64 <nm_clkless_wake+0x1b8>)
    59f6:	4798      	blx	r3
    59f8:	4b21      	ldr	r3, [pc, #132]	; (5a80 <nm_clkless_wake+0x1d4>)
    59fa:	0018      	movs	r0, r3
    59fc:	4b1b      	ldr	r3, [pc, #108]	; (5a6c <nm_clkless_wake+0x1c0>)
    59fe:	4798      	blx	r3
    5a00:	200d      	movs	r0, #13
    5a02:	4b1b      	ldr	r3, [pc, #108]	; (5a70 <nm_clkless_wake+0x1c4>)
    5a04:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    5a06:	683b      	ldr	r3, [r7, #0]
    5a08:	2204      	movs	r2, #4
    5a0a:	4013      	ands	r3, r2
    5a0c:	d109      	bne.n	5a22 <nm_clkless_wake+0x176>
    5a0e:	68bb      	ldr	r3, [r7, #8]
    5a10:	3301      	adds	r3, #1
    5a12:	60bb      	str	r3, [r7, #8]
    5a14:	68ba      	ldr	r2, [r7, #8]
    5a16:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <nm_clkless_wake+0x1d8>)
    5a18:	2103      	movs	r1, #3
    5a1a:	0010      	movs	r0, r2
    5a1c:	4798      	blx	r3
    5a1e:	1e0b      	subs	r3, r1, #0
    5a20:	d0d6      	beq.n	59d0 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    5a22:	683b      	ldr	r3, [r7, #0]
    5a24:	2204      	movs	r2, #4
    5a26:	4013      	ands	r3, r2
    5a28:	d106      	bne.n	5a38 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	2202      	movs	r2, #2
    5a2e:	4313      	orrs	r3, r2
    5a30:	0019      	movs	r1, r3
    5a32:	2001      	movs	r0, #1
    5a34:	4b0f      	ldr	r3, [pc, #60]	; (5a74 <nm_clkless_wake+0x1c8>)
    5a36:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    5a38:	683b      	ldr	r3, [r7, #0]
    5a3a:	2204      	movs	r2, #4
    5a3c:	4013      	ands	r3, r2
    5a3e:	d100      	bne.n	5a42 <nm_clkless_wake+0x196>
    5a40:	e75d      	b.n	58fe <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    5a42:	230f      	movs	r3, #15
    5a44:	18fb      	adds	r3, r7, r3
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	b25b      	sxtb	r3, r3
}
    5a4a:	0018      	movs	r0, r3
    5a4c:	46bd      	mov	sp, r7
    5a4e:	b005      	add	sp, #20
    5a50:	bd90      	pop	{r4, r7, pc}
    5a52:	46c0      	nop			; (mov r8, r8)
    5a54:	000035d9 	.word	0x000035d9
    5a58:	000061d9 	.word	0x000061d9
    5a5c:	00013404 	.word	0x00013404
    5a60:	000132dc 	.word	0x000132dc
    5a64:	000114d9 	.word	0x000114d9
    5a68:	000132f0 	.word	0x000132f0
    5a6c:	000115f9 	.word	0x000115f9
    5a70:	0001150d 	.word	0x0001150d
    5a74:	000061fd 	.word	0x000061fd
    5a78:	20000028 	.word	0x20000028
    5a7c:	00013310 	.word	0x00013310
    5a80:	00013330 	.word	0x00013330
    5a84:	000108a9 	.word	0x000108a9

00005a88 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    5a88:	b590      	push	{r4, r7, lr}
    5a8a:	b083      	sub	sp, #12
    5a8c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    5a8e:	1dfc      	adds	r4, r7, #7
    5a90:	003b      	movs	r3, r7
    5a92:	4a29      	ldr	r2, [pc, #164]	; (5b38 <enable_interrupts+0xb0>)
    5a94:	0019      	movs	r1, r3
    5a96:	0010      	movs	r0, r2
    5a98:	4b28      	ldr	r3, [pc, #160]	; (5b3c <enable_interrupts+0xb4>)
    5a9a:	4798      	blx	r3
    5a9c:	0003      	movs	r3, r0
    5a9e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5aa0:	1dfb      	adds	r3, r7, #7
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	b25b      	sxtb	r3, r3
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	d002      	beq.n	5ab0 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    5aaa:	2306      	movs	r3, #6
    5aac:	425b      	negs	r3, r3
    5aae:	e03f      	b.n	5b30 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    5ab0:	683b      	ldr	r3, [r7, #0]
    5ab2:	2280      	movs	r2, #128	; 0x80
    5ab4:	0052      	lsls	r2, r2, #1
    5ab6:	4313      	orrs	r3, r2
    5ab8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    5aba:	683b      	ldr	r3, [r7, #0]
    5abc:	1dfc      	adds	r4, r7, #7
    5abe:	4a1e      	ldr	r2, [pc, #120]	; (5b38 <enable_interrupts+0xb0>)
    5ac0:	0019      	movs	r1, r3
    5ac2:	0010      	movs	r0, r2
    5ac4:	4b1e      	ldr	r3, [pc, #120]	; (5b40 <enable_interrupts+0xb8>)
    5ac6:	4798      	blx	r3
    5ac8:	0003      	movs	r3, r0
    5aca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5acc:	1dfb      	adds	r3, r7, #7
    5ace:	781b      	ldrb	r3, [r3, #0]
    5ad0:	b25b      	sxtb	r3, r3
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d002      	beq.n	5adc <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    5ad6:	2306      	movs	r3, #6
    5ad8:	425b      	negs	r3, r3
    5ada:	e029      	b.n	5b30 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    5adc:	1dfc      	adds	r4, r7, #7
    5ade:	003a      	movs	r2, r7
    5ae0:	23d0      	movs	r3, #208	; 0xd0
    5ae2:	015b      	lsls	r3, r3, #5
    5ae4:	0011      	movs	r1, r2
    5ae6:	0018      	movs	r0, r3
    5ae8:	4b14      	ldr	r3, [pc, #80]	; (5b3c <enable_interrupts+0xb4>)
    5aea:	4798      	blx	r3
    5aec:	0003      	movs	r3, r0
    5aee:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5af0:	1dfb      	adds	r3, r7, #7
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	b25b      	sxtb	r3, r3
    5af6:	2b00      	cmp	r3, #0
    5af8:	d002      	beq.n	5b00 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    5afa:	2306      	movs	r3, #6
    5afc:	425b      	negs	r3, r3
    5afe:	e017      	b.n	5b30 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    5b00:	683b      	ldr	r3, [r7, #0]
    5b02:	2280      	movs	r2, #128	; 0x80
    5b04:	0252      	lsls	r2, r2, #9
    5b06:	4313      	orrs	r3, r2
    5b08:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    5b0a:	683a      	ldr	r2, [r7, #0]
    5b0c:	1dfc      	adds	r4, r7, #7
    5b0e:	23d0      	movs	r3, #208	; 0xd0
    5b10:	015b      	lsls	r3, r3, #5
    5b12:	0011      	movs	r1, r2
    5b14:	0018      	movs	r0, r3
    5b16:	4b0a      	ldr	r3, [pc, #40]	; (5b40 <enable_interrupts+0xb8>)
    5b18:	4798      	blx	r3
    5b1a:	0003      	movs	r3, r0
    5b1c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5b1e:	1dfb      	adds	r3, r7, #7
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	b25b      	sxtb	r3, r3
    5b24:	2b00      	cmp	r3, #0
    5b26:	d002      	beq.n	5b2e <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    5b28:	2306      	movs	r3, #6
    5b2a:	425b      	negs	r3, r3
    5b2c:	e000      	b.n	5b30 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    5b2e:	2300      	movs	r3, #0
}
    5b30:	0018      	movs	r0, r3
    5b32:	46bd      	mov	sp, r7
    5b34:	b003      	add	sp, #12
    5b36:	bd90      	pop	{r4, r7, pc}
    5b38:	00001408 	.word	0x00001408
    5b3c:	000061d9 	.word	0x000061d9
    5b40:	000061fd 	.word	0x000061fd

00005b44 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b082      	sub	sp, #8
    5b48:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    5b4a:	4b32      	ldr	r3, [pc, #200]	; (5c14 <nmi_get_chipid+0xd0>)
    5b4c:	681b      	ldr	r3, [r3, #0]
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d159      	bne.n	5c06 <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    5b52:	4a30      	ldr	r2, [pc, #192]	; (5c14 <nmi_get_chipid+0xd0>)
    5b54:	2380      	movs	r3, #128	; 0x80
    5b56:	015b      	lsls	r3, r3, #5
    5b58:	0011      	movs	r1, r2
    5b5a:	0018      	movs	r0, r3
    5b5c:	4b2e      	ldr	r3, [pc, #184]	; (5c18 <nmi_get_chipid+0xd4>)
    5b5e:	4798      	blx	r3
    5b60:	1e03      	subs	r3, r0, #0
    5b62:	d004      	beq.n	5b6e <nmi_get_chipid+0x2a>
			chipid = 0;
    5b64:	4b2b      	ldr	r3, [pc, #172]	; (5c14 <nmi_get_chipid+0xd0>)
    5b66:	2200      	movs	r2, #0
    5b68:	601a      	str	r2, [r3, #0]
			return 0;
    5b6a:	2300      	movs	r3, #0
    5b6c:	e04d      	b.n	5c0a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    5b6e:	1d3b      	adds	r3, r7, #4
    5b70:	4a2a      	ldr	r2, [pc, #168]	; (5c1c <nmi_get_chipid+0xd8>)
    5b72:	0019      	movs	r1, r3
    5b74:	0010      	movs	r0, r2
    5b76:	4b28      	ldr	r3, [pc, #160]	; (5c18 <nmi_get_chipid+0xd4>)
    5b78:	4798      	blx	r3
    5b7a:	1e03      	subs	r3, r0, #0
    5b7c:	d004      	beq.n	5b88 <nmi_get_chipid+0x44>
			chipid = 0;
    5b7e:	4b25      	ldr	r3, [pc, #148]	; (5c14 <nmi_get_chipid+0xd0>)
    5b80:	2200      	movs	r2, #0
    5b82:	601a      	str	r2, [r3, #0]
			return 0;
    5b84:	2300      	movs	r3, #0
    5b86:	e040      	b.n	5c0a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    5b88:	4b22      	ldr	r3, [pc, #136]	; (5c14 <nmi_get_chipid+0xd0>)
    5b8a:	681b      	ldr	r3, [r3, #0]
    5b8c:	4a24      	ldr	r2, [pc, #144]	; (5c20 <nmi_get_chipid+0xdc>)
    5b8e:	4293      	cmp	r3, r2
    5b90:	d106      	bne.n	5ba0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	2b01      	cmp	r3, #1
    5b96:	d029      	beq.n	5bec <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    5b98:	4b1e      	ldr	r3, [pc, #120]	; (5c14 <nmi_get_chipid+0xd0>)
    5b9a:	4a22      	ldr	r2, [pc, #136]	; (5c24 <nmi_get_chipid+0xe0>)
    5b9c:	601a      	str	r2, [r3, #0]
    5b9e:	e025      	b.n	5bec <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    5ba0:	4b1c      	ldr	r3, [pc, #112]	; (5c14 <nmi_get_chipid+0xd0>)
    5ba2:	681b      	ldr	r3, [r3, #0]
    5ba4:	4a20      	ldr	r2, [pc, #128]	; (5c28 <nmi_get_chipid+0xe4>)
    5ba6:	4293      	cmp	r3, r2
    5ba8:	d10d      	bne.n	5bc6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    5baa:	687b      	ldr	r3, [r7, #4]
    5bac:	2b03      	cmp	r3, #3
    5bae:	d01d      	beq.n	5bec <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    5bb0:	687b      	ldr	r3, [r7, #4]
    5bb2:	2b04      	cmp	r3, #4
    5bb4:	d103      	bne.n	5bbe <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    5bb6:	4b17      	ldr	r3, [pc, #92]	; (5c14 <nmi_get_chipid+0xd0>)
    5bb8:	4a1c      	ldr	r2, [pc, #112]	; (5c2c <nmi_get_chipid+0xe8>)
    5bba:	601a      	str	r2, [r3, #0]
    5bbc:	e016      	b.n	5bec <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    5bbe:	4b15      	ldr	r3, [pc, #84]	; (5c14 <nmi_get_chipid+0xd0>)
    5bc0:	4a1b      	ldr	r2, [pc, #108]	; (5c30 <nmi_get_chipid+0xec>)
    5bc2:	601a      	str	r2, [r3, #0]
    5bc4:	e012      	b.n	5bec <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    5bc6:	4b13      	ldr	r3, [pc, #76]	; (5c14 <nmi_get_chipid+0xd0>)
    5bc8:	681b      	ldr	r3, [r3, #0]
    5bca:	4a1a      	ldr	r2, [pc, #104]	; (5c34 <nmi_get_chipid+0xf0>)
    5bcc:	4293      	cmp	r3, r2
    5bce:	d10d      	bne.n	5bec <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    5bd0:	4a10      	ldr	r2, [pc, #64]	; (5c14 <nmi_get_chipid+0xd0>)
    5bd2:	23ec      	movs	r3, #236	; 0xec
    5bd4:	039b      	lsls	r3, r3, #14
    5bd6:	0011      	movs	r1, r2
    5bd8:	0018      	movs	r0, r3
    5bda:	4b0f      	ldr	r3, [pc, #60]	; (5c18 <nmi_get_chipid+0xd4>)
    5bdc:	4798      	blx	r3
    5bde:	1e03      	subs	r3, r0, #0
    5be0:	d004      	beq.n	5bec <nmi_get_chipid+0xa8>
			chipid = 0;
    5be2:	4b0c      	ldr	r3, [pc, #48]	; (5c14 <nmi_get_chipid+0xd0>)
    5be4:	2200      	movs	r2, #0
    5be6:	601a      	str	r2, [r3, #0]
			return 0;
    5be8:	2300      	movs	r3, #0
    5bea:	e00e      	b.n	5c0a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    5bec:	4b09      	ldr	r3, [pc, #36]	; (5c14 <nmi_get_chipid+0xd0>)
    5bee:	681b      	ldr	r3, [r3, #0]
    5bf0:	4a11      	ldr	r2, [pc, #68]	; (5c38 <nmi_get_chipid+0xf4>)
    5bf2:	401a      	ands	r2, r3
    5bf4:	4b07      	ldr	r3, [pc, #28]	; (5c14 <nmi_get_chipid+0xd0>)
    5bf6:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    5bf8:	4b06      	ldr	r3, [pc, #24]	; (5c14 <nmi_get_chipid+0xd0>)
    5bfa:	681b      	ldr	r3, [r3, #0]
    5bfc:	22a0      	movs	r2, #160	; 0xa0
    5bfe:	02d2      	lsls	r2, r2, #11
    5c00:	431a      	orrs	r2, r3
    5c02:	4b04      	ldr	r3, [pc, #16]	; (5c14 <nmi_get_chipid+0xd0>)
    5c04:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    5c06:	4b03      	ldr	r3, [pc, #12]	; (5c14 <nmi_get_chipid+0xd0>)
    5c08:	681b      	ldr	r3, [r3, #0]
}
    5c0a:	0018      	movs	r0, r3
    5c0c:	46bd      	mov	sp, r7
    5c0e:	b002      	add	sp, #8
    5c10:	bd80      	pop	{r7, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	200000f4 	.word	0x200000f4
    5c18:	000061d9 	.word	0x000061d9
    5c1c:	000013f4 	.word	0x000013f4
    5c20:	001002a0 	.word	0x001002a0
    5c24:	001002a1 	.word	0x001002a1
    5c28:	001002b0 	.word	0x001002b0
    5c2c:	001002b1 	.word	0x001002b1
    5c30:	001002b2 	.word	0x001002b2
    5c34:	001000f0 	.word	0x001000f0
    5c38:	fff0ffff 	.word	0xfff0ffff

00005c3c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    5c3c:	b580      	push	{r7, lr}
    5c3e:	b086      	sub	sp, #24
    5c40:	af00      	add	r7, sp, #0
    5c42:	0002      	movs	r2, r0
    5c44:	1dfb      	adds	r3, r7, #7
    5c46:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    5c48:	230b      	movs	r3, #11
    5c4a:	18fb      	adds	r3, r7, r3
    5c4c:	2200      	movs	r2, #0
    5c4e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    5c50:	2300      	movs	r3, #0
    5c52:	617b      	str	r3, [r7, #20]
    5c54:	2300      	movs	r3, #0
    5c56:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    5c58:	2300      	movs	r3, #0
    5c5a:	60fb      	str	r3, [r7, #12]

	reg = 0;
    5c5c:	2300      	movs	r3, #0
    5c5e:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    5c60:	4b3b      	ldr	r3, [pc, #236]	; (5d50 <wait_for_bootrom+0x114>)
    5c62:	0018      	movs	r0, r3
    5c64:	4b3b      	ldr	r3, [pc, #236]	; (5d54 <wait_for_bootrom+0x118>)
    5c66:	4798      	blx	r3
    5c68:	0003      	movs	r3, r0
    5c6a:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    5c6c:	697b      	ldr	r3, [r7, #20]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	db03      	blt.n	5c7a <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    5c72:	2001      	movs	r0, #1
    5c74:	4b38      	ldr	r3, [pc, #224]	; (5d58 <wait_for_bootrom+0x11c>)
    5c76:	4798      	blx	r3
	}
    5c78:	e7f2      	b.n	5c60 <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    5c7a:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    5c7c:	4b37      	ldr	r3, [pc, #220]	; (5d5c <wait_for_bootrom+0x120>)
    5c7e:	0018      	movs	r0, r3
    5c80:	4b34      	ldr	r3, [pc, #208]	; (5d54 <wait_for_bootrom+0x118>)
    5c82:	4798      	blx	r3
    5c84:	0003      	movs	r3, r0
    5c86:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    5c88:	697b      	ldr	r3, [r7, #20]
    5c8a:	2201      	movs	r2, #1
    5c8c:	4013      	ands	r3, r2
    5c8e:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    5c90:	697b      	ldr	r3, [r7, #20]
    5c92:	2b00      	cmp	r3, #0
    5c94:	d112      	bne.n	5cbc <wait_for_bootrom+0x80>
	{
		reg = 0;
    5c96:	2300      	movs	r3, #0
    5c98:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    5c9a:	e00b      	b.n	5cb4 <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    5c9c:	2001      	movs	r0, #1
    5c9e:	4b2e      	ldr	r3, [pc, #184]	; (5d58 <wait_for_bootrom+0x11c>)
    5ca0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    5ca2:	4b2f      	ldr	r3, [pc, #188]	; (5d60 <wait_for_bootrom+0x124>)
    5ca4:	0018      	movs	r0, r3
    5ca6:	4b2b      	ldr	r3, [pc, #172]	; (5d54 <wait_for_bootrom+0x118>)
    5ca8:	4798      	blx	r3
    5caa:	0003      	movs	r3, r0
    5cac:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    5cae:	693b      	ldr	r3, [r7, #16]
    5cb0:	3301      	adds	r3, #1
    5cb2:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    5cb4:	697b      	ldr	r3, [r7, #20]
    5cb6:	4a2b      	ldr	r2, [pc, #172]	; (5d64 <wait_for_bootrom+0x128>)
    5cb8:	4293      	cmp	r3, r2
    5cba:	d1ef      	bne.n	5c9c <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    5cbc:	1dfb      	adds	r3, r7, #7
    5cbe:	781b      	ldrb	r3, [r3, #0]
    5cc0:	2b02      	cmp	r3, #2
    5cc2:	d10d      	bne.n	5ce0 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5cc4:	4a28      	ldr	r2, [pc, #160]	; (5d68 <wait_for_bootrom+0x12c>)
    5cc6:	4b29      	ldr	r3, [pc, #164]	; (5d6c <wait_for_bootrom+0x130>)
    5cc8:	0011      	movs	r1, r2
    5cca:	0018      	movs	r0, r3
    5ccc:	4b28      	ldr	r3, [pc, #160]	; (5d70 <wait_for_bootrom+0x134>)
    5cce:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    5cd0:	2380      	movs	r3, #128	; 0x80
    5cd2:	035b      	lsls	r3, r3, #13
    5cd4:	4a27      	ldr	r2, [pc, #156]	; (5d74 <wait_for_bootrom+0x138>)
    5cd6:	0019      	movs	r1, r3
    5cd8:	0010      	movs	r0, r2
    5cda:	4b25      	ldr	r3, [pc, #148]	; (5d70 <wait_for_bootrom+0x134>)
    5cdc:	4798      	blx	r3
    5cde:	e015      	b.n	5d0c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    5ce0:	1dfb      	adds	r3, r7, #7
    5ce2:	781b      	ldrb	r3, [r3, #0]
    5ce4:	2b03      	cmp	r3, #3
    5ce6:	d10b      	bne.n	5d00 <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    5ce8:	4a1f      	ldr	r2, [pc, #124]	; (5d68 <wait_for_bootrom+0x12c>)
    5cea:	4b20      	ldr	r3, [pc, #128]	; (5d6c <wait_for_bootrom+0x130>)
    5cec:	0011      	movs	r1, r2
    5cee:	0018      	movs	r0, r3
    5cf0:	4b1f      	ldr	r3, [pc, #124]	; (5d70 <wait_for_bootrom+0x134>)
    5cf2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    5cf4:	4b1f      	ldr	r3, [pc, #124]	; (5d74 <wait_for_bootrom+0x138>)
    5cf6:	2100      	movs	r1, #0
    5cf8:	0018      	movs	r0, r3
    5cfa:	4b1d      	ldr	r3, [pc, #116]	; (5d70 <wait_for_bootrom+0x134>)
    5cfc:	4798      	blx	r3
    5cfe:	e005      	b.n	5d0c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    5d00:	1dfb      	adds	r3, r7, #7
    5d02:	781b      	ldrb	r3, [r3, #0]
    5d04:	2b04      	cmp	r3, #4
    5d06:	d101      	bne.n	5d0c <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    5d08:	2380      	movs	r3, #128	; 0x80
    5d0a:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    5d0c:	4b1a      	ldr	r3, [pc, #104]	; (5d78 <wait_for_bootrom+0x13c>)
    5d0e:	4798      	blx	r3
    5d10:	0003      	movs	r3, r0
    5d12:	051b      	lsls	r3, r3, #20
    5d14:	0d1a      	lsrs	r2, r3, #20
    5d16:	23e8      	movs	r3, #232	; 0xe8
    5d18:	009b      	lsls	r3, r3, #2
    5d1a:	429a      	cmp	r2, r3
    5d1c:	d106      	bne.n	5d2c <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    5d1e:	68fb      	ldr	r3, [r7, #12]
    5d20:	2202      	movs	r2, #2
    5d22:	4313      	orrs	r3, r2
    5d24:	0018      	movs	r0, r3
    5d26:	4b15      	ldr	r3, [pc, #84]	; (5d7c <wait_for_bootrom+0x140>)
    5d28:	4798      	blx	r3
    5d2a:	e003      	b.n	5d34 <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    5d2c:	68fb      	ldr	r3, [r7, #12]
    5d2e:	0018      	movs	r0, r3
    5d30:	4b12      	ldr	r3, [pc, #72]	; (5d7c <wait_for_bootrom+0x140>)
    5d32:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    5d34:	4a12      	ldr	r2, [pc, #72]	; (5d80 <wait_for_bootrom+0x144>)
    5d36:	4b0a      	ldr	r3, [pc, #40]	; (5d60 <wait_for_bootrom+0x124>)
    5d38:	0011      	movs	r1, r2
    5d3a:	0018      	movs	r0, r3
    5d3c:	4b0c      	ldr	r3, [pc, #48]	; (5d70 <wait_for_bootrom+0x134>)
    5d3e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    5d40:	230b      	movs	r3, #11
    5d42:	18fb      	adds	r3, r7, r3
    5d44:	781b      	ldrb	r3, [r3, #0]
    5d46:	b25b      	sxtb	r3, r3
}
    5d48:	0018      	movs	r0, r3
    5d4a:	46bd      	mov	sp, r7
    5d4c:	b006      	add	sp, #24
    5d4e:	bd80      	pop	{r7, pc}
    5d50:	00001014 	.word	0x00001014
    5d54:	000061b9 	.word	0x000061b9
    5d58:	000035d9 	.word	0x000035d9
    5d5c:	000207bc 	.word	0x000207bc
    5d60:	000c000c 	.word	0x000c000c
    5d64:	10add09e 	.word	0x10add09e
    5d68:	3c1cd57d 	.word	0x3c1cd57d
    5d6c:	000207ac 	.word	0x000207ac
    5d70:	000061fd 	.word	0x000061fd
    5d74:	0000108c 	.word	0x0000108c
    5d78:	00005b45 	.word	0x00005b45
    5d7c:	00005839 	.word	0x00005839
    5d80:	ef522f61 	.word	0xef522f61

00005d84 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    5d84:	b580      	push	{r7, lr}
    5d86:	b088      	sub	sp, #32
    5d88:	af00      	add	r7, sp, #0
    5d8a:	0002      	movs	r2, r0
    5d8c:	1dfb      	adds	r3, r7, #7
    5d8e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    5d90:	231f      	movs	r3, #31
    5d92:	18fb      	adds	r3, r7, r3
    5d94:	2200      	movs	r2, #0
    5d96:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    5d98:	2300      	movs	r3, #0
    5d9a:	61bb      	str	r3, [r7, #24]
    5d9c:	2300      	movs	r3, #0
    5d9e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    5da0:	2301      	movs	r3, #1
    5da2:	425b      	negs	r3, r3
    5da4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    5da6:	4b1d      	ldr	r3, [pc, #116]	; (5e1c <wait_for_firmware_start+0x98>)
    5da8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    5daa:	4b1d      	ldr	r3, [pc, #116]	; (5e20 <wait_for_firmware_start+0x9c>)
    5dac:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    5dae:	1dfb      	adds	r3, r7, #7
    5db0:	781b      	ldrb	r3, [r3, #0]
    5db2:	2b02      	cmp	r3, #2
    5db4:	d003      	beq.n	5dbe <wait_for_firmware_start+0x3a>
    5db6:	1dfb      	adds	r3, r7, #7
    5db8:	781b      	ldrb	r3, [r3, #0]
    5dba:	2b03      	cmp	r3, #3
    5dbc:	d119      	bne.n	5df2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    5dbe:	4b19      	ldr	r3, [pc, #100]	; (5e24 <wait_for_firmware_start+0xa0>)
    5dc0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    5dc2:	4b19      	ldr	r3, [pc, #100]	; (5e28 <wait_for_firmware_start+0xa4>)
    5dc4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    5dc6:	e014      	b.n	5df2 <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    5dc8:	2002      	movs	r0, #2
    5dca:	4b18      	ldr	r3, [pc, #96]	; (5e2c <wait_for_firmware_start+0xa8>)
    5dcc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	0018      	movs	r0, r3
    5dd2:	4b17      	ldr	r3, [pc, #92]	; (5e30 <wait_for_firmware_start+0xac>)
    5dd4:	4798      	blx	r3
    5dd6:	0003      	movs	r3, r0
    5dd8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    5dda:	697b      	ldr	r3, [r7, #20]
    5ddc:	3301      	adds	r3, #1
    5dde:	617b      	str	r3, [r7, #20]
    5de0:	697a      	ldr	r2, [r7, #20]
    5de2:	693b      	ldr	r3, [r7, #16]
    5de4:	429a      	cmp	r2, r3
    5de6:	d304      	bcc.n	5df2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    5de8:	231f      	movs	r3, #31
    5dea:	18fb      	adds	r3, r7, r3
    5dec:	22fb      	movs	r2, #251	; 0xfb
    5dee:	701a      	strb	r2, [r3, #0]
			goto ERR;
    5df0:	e00c      	b.n	5e0c <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    5df2:	68ba      	ldr	r2, [r7, #8]
    5df4:	69bb      	ldr	r3, [r7, #24]
    5df6:	429a      	cmp	r2, r3
    5df8:	d1e6      	bne.n	5dc8 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    5dfa:	68bb      	ldr	r3, [r7, #8]
    5dfc:	4a08      	ldr	r2, [pc, #32]	; (5e20 <wait_for_firmware_start+0x9c>)
    5dfe:	4293      	cmp	r3, r2
    5e00:	d104      	bne.n	5e0c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    5e02:	4b06      	ldr	r3, [pc, #24]	; (5e1c <wait_for_firmware_start+0x98>)
    5e04:	2100      	movs	r1, #0
    5e06:	0018      	movs	r0, r3
    5e08:	4b0a      	ldr	r3, [pc, #40]	; (5e34 <wait_for_firmware_start+0xb0>)
    5e0a:	4798      	blx	r3
	}
ERR:
	return ret;
    5e0c:	231f      	movs	r3, #31
    5e0e:	18fb      	adds	r3, r7, r3
    5e10:	781b      	ldrb	r3, [r3, #0]
    5e12:	b25b      	sxtb	r3, r3
}
    5e14:	0018      	movs	r0, r3
    5e16:	46bd      	mov	sp, r7
    5e18:	b008      	add	sp, #32
    5e1a:	bd80      	pop	{r7, pc}
    5e1c:	0000108c 	.word	0x0000108c
    5e20:	02532636 	.word	0x02532636
    5e24:	000207ac 	.word	0x000207ac
    5e28:	d75dc1c3 	.word	0xd75dc1c3
    5e2c:	000035d9 	.word	0x000035d9
    5e30:	000061b9 	.word	0x000061b9
    5e34:	000061fd 	.word	0x000061fd

00005e38 <chip_deinit>:

sint8 chip_deinit(void)
{
    5e38:	b590      	push	{r4, r7, lr}
    5e3a:	b083      	sub	sp, #12
    5e3c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    5e3e:	2300      	movs	r3, #0
    5e40:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    5e42:	1dbb      	adds	r3, r7, #6
    5e44:	220a      	movs	r2, #10
    5e46:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    5e48:	1dfc      	adds	r4, r7, #7
    5e4a:	003a      	movs	r2, r7
    5e4c:	23a0      	movs	r3, #160	; 0xa0
    5e4e:	015b      	lsls	r3, r3, #5
    5e50:	0011      	movs	r1, r2
    5e52:	0018      	movs	r0, r3
    5e54:	4b3f      	ldr	r3, [pc, #252]	; (5f54 <chip_deinit+0x11c>)
    5e56:	4798      	blx	r3
    5e58:	0003      	movs	r3, r0
    5e5a:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    5e5c:	1dfb      	adds	r3, r7, #7
    5e5e:	781b      	ldrb	r3, [r3, #0]
    5e60:	b25b      	sxtb	r3, r3
    5e62:	2b00      	cmp	r3, #0
    5e64:	d00c      	beq.n	5e80 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    5e66:	4a3c      	ldr	r2, [pc, #240]	; (5f58 <chip_deinit+0x120>)
    5e68:	493c      	ldr	r1, [pc, #240]	; (5f5c <chip_deinit+0x124>)
    5e6a:	4b3d      	ldr	r3, [pc, #244]	; (5f60 <chip_deinit+0x128>)
    5e6c:	0018      	movs	r0, r3
    5e6e:	4b3d      	ldr	r3, [pc, #244]	; (5f64 <chip_deinit+0x12c>)
    5e70:	4798      	blx	r3
    5e72:	4b3d      	ldr	r3, [pc, #244]	; (5f68 <chip_deinit+0x130>)
    5e74:	0018      	movs	r0, r3
    5e76:	4b3d      	ldr	r3, [pc, #244]	; (5f6c <chip_deinit+0x134>)
    5e78:	4798      	blx	r3
    5e7a:	200d      	movs	r0, #13
    5e7c:	4b3c      	ldr	r3, [pc, #240]	; (5f70 <chip_deinit+0x138>)
    5e7e:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    5e80:	683b      	ldr	r3, [r7, #0]
    5e82:	4a3c      	ldr	r2, [pc, #240]	; (5f74 <chip_deinit+0x13c>)
    5e84:	4013      	ands	r3, r2
    5e86:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    5e88:	683a      	ldr	r2, [r7, #0]
    5e8a:	1dfc      	adds	r4, r7, #7
    5e8c:	23a0      	movs	r3, #160	; 0xa0
    5e8e:	015b      	lsls	r3, r3, #5
    5e90:	0011      	movs	r1, r2
    5e92:	0018      	movs	r0, r3
    5e94:	4b38      	ldr	r3, [pc, #224]	; (5f78 <chip_deinit+0x140>)
    5e96:	4798      	blx	r3
    5e98:	0003      	movs	r3, r0
    5e9a:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    5e9c:	1dfb      	adds	r3, r7, #7
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	b25b      	sxtb	r3, r3
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d010      	beq.n	5ec8 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    5ea6:	4a35      	ldr	r2, [pc, #212]	; (5f7c <chip_deinit+0x144>)
    5ea8:	492c      	ldr	r1, [pc, #176]	; (5f5c <chip_deinit+0x124>)
    5eaa:	4b2d      	ldr	r3, [pc, #180]	; (5f60 <chip_deinit+0x128>)
    5eac:	0018      	movs	r0, r3
    5eae:	4b2d      	ldr	r3, [pc, #180]	; (5f64 <chip_deinit+0x12c>)
    5eb0:	4798      	blx	r3
    5eb2:	4b33      	ldr	r3, [pc, #204]	; (5f80 <chip_deinit+0x148>)
    5eb4:	0018      	movs	r0, r3
    5eb6:	4b2d      	ldr	r3, [pc, #180]	; (5f6c <chip_deinit+0x134>)
    5eb8:	4798      	blx	r3
    5eba:	200d      	movs	r0, #13
    5ebc:	4b2c      	ldr	r3, [pc, #176]	; (5f70 <chip_deinit+0x138>)
    5ebe:	4798      	blx	r3
		return ret;
    5ec0:	1dfb      	adds	r3, r7, #7
    5ec2:	781b      	ldrb	r3, [r3, #0]
    5ec4:	b25b      	sxtb	r3, r3
    5ec6:	e041      	b.n	5f4c <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    5ec8:	1dfc      	adds	r4, r7, #7
    5eca:	003a      	movs	r2, r7
    5ecc:	23a0      	movs	r3, #160	; 0xa0
    5ece:	015b      	lsls	r3, r3, #5
    5ed0:	0011      	movs	r1, r2
    5ed2:	0018      	movs	r0, r3
    5ed4:	4b1f      	ldr	r3, [pc, #124]	; (5f54 <chip_deinit+0x11c>)
    5ed6:	4798      	blx	r3
    5ed8:	0003      	movs	r3, r0
    5eda:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    5edc:	1dfb      	adds	r3, r7, #7
    5ede:	781b      	ldrb	r3, [r3, #0]
    5ee0:	b25b      	sxtb	r3, r3
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d011      	beq.n	5f0a <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    5ee6:	238f      	movs	r3, #143	; 0x8f
    5ee8:	009a      	lsls	r2, r3, #2
    5eea:	491c      	ldr	r1, [pc, #112]	; (5f5c <chip_deinit+0x124>)
    5eec:	4b1c      	ldr	r3, [pc, #112]	; (5f60 <chip_deinit+0x128>)
    5eee:	0018      	movs	r0, r3
    5ef0:	4b1c      	ldr	r3, [pc, #112]	; (5f64 <chip_deinit+0x12c>)
    5ef2:	4798      	blx	r3
    5ef4:	4b23      	ldr	r3, [pc, #140]	; (5f84 <chip_deinit+0x14c>)
    5ef6:	0018      	movs	r0, r3
    5ef8:	4b1c      	ldr	r3, [pc, #112]	; (5f6c <chip_deinit+0x134>)
    5efa:	4798      	blx	r3
    5efc:	200d      	movs	r0, #13
    5efe:	4b1c      	ldr	r3, [pc, #112]	; (5f70 <chip_deinit+0x138>)
    5f00:	4798      	blx	r3
			return ret;
    5f02:	1dfb      	adds	r3, r7, #7
    5f04:	781b      	ldrb	r3, [r3, #0]
    5f06:	b25b      	sxtb	r3, r3
    5f08:	e020      	b.n	5f4c <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    5f0a:	683a      	ldr	r2, [r7, #0]
    5f0c:	2380      	movs	r3, #128	; 0x80
    5f0e:	00db      	lsls	r3, r3, #3
    5f10:	4013      	ands	r3, r2
    5f12:	d017      	beq.n	5f44 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    5f14:	683b      	ldr	r3, [r7, #0]
    5f16:	4a17      	ldr	r2, [pc, #92]	; (5f74 <chip_deinit+0x13c>)
    5f18:	4013      	ands	r3, r2
    5f1a:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    5f1c:	683a      	ldr	r2, [r7, #0]
    5f1e:	1dfc      	adds	r4, r7, #7
    5f20:	23a0      	movs	r3, #160	; 0xa0
    5f22:	015b      	lsls	r3, r3, #5
    5f24:	0011      	movs	r1, r2
    5f26:	0018      	movs	r0, r3
    5f28:	4b13      	ldr	r3, [pc, #76]	; (5f78 <chip_deinit+0x140>)
    5f2a:	4798      	blx	r3
    5f2c:	0003      	movs	r3, r0
    5f2e:	7023      	strb	r3, [r4, #0]
			timeout--;
    5f30:	1dbb      	adds	r3, r7, #6
    5f32:	781a      	ldrb	r2, [r3, #0]
    5f34:	1dbb      	adds	r3, r7, #6
    5f36:	3a01      	subs	r2, #1
    5f38:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    5f3a:	1dbb      	adds	r3, r7, #6
    5f3c:	781b      	ldrb	r3, [r3, #0]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d1c2      	bne.n	5ec8 <chip_deinit+0x90>
    5f42:	e000      	b.n	5f46 <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    5f44:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    5f46:	1dfb      	adds	r3, r7, #7
    5f48:	781b      	ldrb	r3, [r3, #0]
    5f4a:	b25b      	sxtb	r3, r3
}
    5f4c:	0018      	movs	r0, r3
    5f4e:	46bd      	mov	sp, r7
    5f50:	b003      	add	sp, #12
    5f52:	bd90      	pop	{r4, r7, pc}
    5f54:	000061d9 	.word	0x000061d9
    5f58:	0000022f 	.word	0x0000022f
    5f5c:	00013414 	.word	0x00013414
    5f60:	000132dc 	.word	0x000132dc
    5f64:	000114d9 	.word	0x000114d9
    5f68:	0001337c 	.word	0x0001337c
    5f6c:	000115f9 	.word	0x000115f9
    5f70:	0001150d 	.word	0x0001150d
    5f74:	fffffbff 	.word	0xfffffbff
    5f78:	000061fd 	.word	0x000061fd
    5f7c:	00000235 	.word	0x00000235
    5f80:	00013394 	.word	0x00013394
    5f84:	000133ac 	.word	0x000133ac

00005f88 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    5f88:	b590      	push	{r4, r7, lr}
    5f8a:	b089      	sub	sp, #36	; 0x24
    5f8c:	af00      	add	r7, sp, #0
    5f8e:	6078      	str	r0, [r7, #4]
    5f90:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    5f92:	2308      	movs	r3, #8
    5f94:	18fb      	adds	r3, r7, r3
    5f96:	0018      	movs	r0, r3
    5f98:	2308      	movs	r3, #8
    5f9a:	001a      	movs	r2, r3
    5f9c:	2100      	movs	r1, #0
    5f9e:	4b35      	ldr	r3, [pc, #212]	; (6074 <nmi_get_otp_mac_address+0xec>)
    5fa0:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    5fa2:	231f      	movs	r3, #31
    5fa4:	18fc      	adds	r4, r7, r3
    5fa6:	2318      	movs	r3, #24
    5fa8:	18fb      	adds	r3, r7, r3
    5faa:	4a33      	ldr	r2, [pc, #204]	; (6078 <nmi_get_otp_mac_address+0xf0>)
    5fac:	0019      	movs	r1, r3
    5fae:	0010      	movs	r0, r2
    5fb0:	4b32      	ldr	r3, [pc, #200]	; (607c <nmi_get_otp_mac_address+0xf4>)
    5fb2:	4798      	blx	r3
    5fb4:	0003      	movs	r3, r0
    5fb6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5fb8:	231f      	movs	r3, #31
    5fba:	18fb      	adds	r3, r7, r3
    5fbc:	781b      	ldrb	r3, [r3, #0]
    5fbe:	b25b      	sxtb	r3, r3
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d145      	bne.n	6050 <nmi_get_otp_mac_address+0xc8>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    5fc4:	69bb      	ldr	r3, [r7, #24]
    5fc6:	22c0      	movs	r2, #192	; 0xc0
    5fc8:	0292      	lsls	r2, r2, #10
    5fca:	4313      	orrs	r3, r2
    5fcc:	221f      	movs	r2, #31
    5fce:	18bc      	adds	r4, r7, r2
    5fd0:	2208      	movs	r2, #8
    5fd2:	18b9      	adds	r1, r7, r2
    5fd4:	2208      	movs	r2, #8
    5fd6:	0018      	movs	r0, r3
    5fd8:	4b29      	ldr	r3, [pc, #164]	; (6080 <nmi_get_otp_mac_address+0xf8>)
    5fda:	4798      	blx	r3
    5fdc:	0003      	movs	r3, r0
    5fde:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    5fe0:	231f      	movs	r3, #31
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	b25b      	sxtb	r3, r3
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d133      	bne.n	6054 <nmi_get_otp_mac_address+0xcc>
	u32RegValue = strgp.u32Mac_efuse_mib;
    5fec:	2308      	movs	r3, #8
    5fee:	18fb      	adds	r3, r7, r3
    5ff0:	681b      	ldr	r3, [r3, #0]
    5ff2:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
    5ff4:	69bb      	ldr	r3, [r7, #24]
    5ff6:	0c1b      	lsrs	r3, r3, #16
    5ff8:	041b      	lsls	r3, r3, #16
    5ffa:	d106      	bne.n	600a <nmi_get_otp_mac_address+0x82>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	2206      	movs	r2, #6
    6000:	2100      	movs	r1, #0
    6002:	0018      	movs	r0, r3
    6004:	4b1f      	ldr	r3, [pc, #124]	; (6084 <nmi_get_otp_mac_address+0xfc>)
    6006:	4798      	blx	r3
		goto _EXIT_ERR;
    6008:	e025      	b.n	6056 <nmi_get_otp_mac_address+0xce>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    600a:	69bb      	ldr	r3, [r7, #24]
    600c:	0c1b      	lsrs	r3, r3, #16
    600e:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    6010:	69bb      	ldr	r3, [r7, #24]
    6012:	22c0      	movs	r2, #192	; 0xc0
    6014:	0292      	lsls	r2, r2, #10
    6016:	4313      	orrs	r3, r2
    6018:	221f      	movs	r2, #31
    601a:	18bc      	adds	r4, r7, r2
    601c:	2210      	movs	r2, #16
    601e:	18b9      	adds	r1, r7, r2
    6020:	2206      	movs	r2, #6
    6022:	0018      	movs	r0, r3
    6024:	4b16      	ldr	r3, [pc, #88]	; (6080 <nmi_get_otp_mac_address+0xf8>)
    6026:	4798      	blx	r3
    6028:	0003      	movs	r3, r0
    602a:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr,mac,6);
    602c:	2310      	movs	r3, #16
    602e:	18f9      	adds	r1, r7, r3
    6030:	687b      	ldr	r3, [r7, #4]
    6032:	2206      	movs	r2, #6
    6034:	0018      	movs	r0, r3
    6036:	4b14      	ldr	r3, [pc, #80]	; (6088 <nmi_get_otp_mac_address+0x100>)
    6038:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    603a:	683b      	ldr	r3, [r7, #0]
    603c:	2b00      	cmp	r3, #0
    603e:	d002      	beq.n	6046 <nmi_get_otp_mac_address+0xbe>
    6040:	683b      	ldr	r3, [r7, #0]
    6042:	2201      	movs	r2, #1
    6044:	701a      	strb	r2, [r3, #0]
	return ret;
    6046:	231f      	movs	r3, #31
    6048:	18fb      	adds	r3, r7, r3
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	b25b      	sxtb	r3, r3
    604e:	e00c      	b.n	606a <nmi_get_otp_mac_address+0xe2>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    6050:	46c0      	nop			; (mov r8, r8)
    6052:	e000      	b.n	6056 <nmi_get_otp_mac_address+0xce>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    6054:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    6056:	683b      	ldr	r3, [r7, #0]
    6058:	2b00      	cmp	r3, #0
    605a:	d002      	beq.n	6062 <nmi_get_otp_mac_address+0xda>
    605c:	683b      	ldr	r3, [r7, #0]
    605e:	2200      	movs	r2, #0
    6060:	701a      	strb	r2, [r3, #0]
	return ret;
    6062:	231f      	movs	r3, #31
    6064:	18fb      	adds	r3, r7, r3
    6066:	781b      	ldrb	r3, [r3, #0]
    6068:	b25b      	sxtb	r3, r3
}
    606a:	0018      	movs	r0, r3
    606c:	46bd      	mov	sp, r7
    606e:	b009      	add	sp, #36	; 0x24
    6070:	bd90      	pop	{r4, r7, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	00010de7 	.word	0x00010de7
    6078:	000c0008 	.word	0x000c0008
    607c:	000061d9 	.word	0x000061d9
    6080:	0000624d 	.word	0x0000624d
    6084:	00003ebd 	.word	0x00003ebd
    6088:	00003e81 	.word	0x00003e81

0000608c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    608c:	b590      	push	{r4, r7, lr}
    608e:	b089      	sub	sp, #36	; 0x24
    6090:	af00      	add	r7, sp, #0
    6092:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    6094:	2308      	movs	r3, #8
    6096:	18fb      	adds	r3, r7, r3
    6098:	0018      	movs	r0, r3
    609a:	2308      	movs	r3, #8
    609c:	001a      	movs	r2, r3
    609e:	2100      	movs	r1, #0
    60a0:	4b29      	ldr	r3, [pc, #164]	; (6148 <nmi_get_mac_address+0xbc>)
    60a2:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    60a4:	231f      	movs	r3, #31
    60a6:	18fc      	adds	r4, r7, r3
    60a8:	2318      	movs	r3, #24
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	4a27      	ldr	r2, [pc, #156]	; (614c <nmi_get_mac_address+0xc0>)
    60ae:	0019      	movs	r1, r3
    60b0:	0010      	movs	r0, r2
    60b2:	4b27      	ldr	r3, [pc, #156]	; (6150 <nmi_get_mac_address+0xc4>)
    60b4:	4798      	blx	r3
    60b6:	0003      	movs	r3, r0
    60b8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    60ba:	231f      	movs	r3, #31
    60bc:	18fb      	adds	r3, r7, r3
    60be:	781b      	ldrb	r3, [r3, #0]
    60c0:	b25b      	sxtb	r3, r3
    60c2:	2b00      	cmp	r3, #0
    60c4:	d135      	bne.n	6132 <nmi_get_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    60c6:	69bb      	ldr	r3, [r7, #24]
    60c8:	22c0      	movs	r2, #192	; 0xc0
    60ca:	0292      	lsls	r2, r2, #10
    60cc:	4313      	orrs	r3, r2
    60ce:	221f      	movs	r2, #31
    60d0:	18bc      	adds	r4, r7, r2
    60d2:	2208      	movs	r2, #8
    60d4:	18b9      	adds	r1, r7, r2
    60d6:	2208      	movs	r2, #8
    60d8:	0018      	movs	r0, r3
    60da:	4b1e      	ldr	r3, [pc, #120]	; (6154 <nmi_get_mac_address+0xc8>)
    60dc:	4798      	blx	r3
    60de:	0003      	movs	r3, r0
    60e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    60e2:	231f      	movs	r3, #31
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	781b      	ldrb	r3, [r3, #0]
    60e8:	b25b      	sxtb	r3, r3
    60ea:	2b00      	cmp	r3, #0
    60ec:	d123      	bne.n	6136 <nmi_get_mac_address+0xaa>
	u32RegValue = strgp.u32Mac_efuse_mib;
    60ee:	2308      	movs	r3, #8
    60f0:	18fb      	adds	r3, r7, r3
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
    60f6:	69bb      	ldr	r3, [r7, #24]
    60f8:	041b      	lsls	r3, r3, #16
    60fa:	0c1b      	lsrs	r3, r3, #16
    60fc:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    60fe:	69bb      	ldr	r3, [r7, #24]
    6100:	22c0      	movs	r2, #192	; 0xc0
    6102:	0292      	lsls	r2, r2, #10
    6104:	4313      	orrs	r3, r2
    6106:	221f      	movs	r2, #31
    6108:	18bc      	adds	r4, r7, r2
    610a:	2210      	movs	r2, #16
    610c:	18b9      	adds	r1, r7, r2
    610e:	2206      	movs	r2, #6
    6110:	0018      	movs	r0, r3
    6112:	4b10      	ldr	r3, [pc, #64]	; (6154 <nmi_get_mac_address+0xc8>)
    6114:	4798      	blx	r3
    6116:	0003      	movs	r3, r0
    6118:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr, mac, 6);
    611a:	2310      	movs	r3, #16
    611c:	18f9      	adds	r1, r7, r3
    611e:	687b      	ldr	r3, [r7, #4]
    6120:	2206      	movs	r2, #6
    6122:	0018      	movs	r0, r3
    6124:	4b0c      	ldr	r3, [pc, #48]	; (6158 <nmi_get_mac_address+0xcc>)
    6126:	4798      	blx	r3

	return ret;
    6128:	231f      	movs	r3, #31
    612a:	18fb      	adds	r3, r7, r3
    612c:	781b      	ldrb	r3, [r3, #0]
    612e:	b25b      	sxtb	r3, r3
    6130:	e006      	b.n	6140 <nmi_get_mac_address+0xb4>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    6132:	46c0      	nop			; (mov r8, r8)
    6134:	e000      	b.n	6138 <nmi_get_mac_address+0xac>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    6136:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
    6138:	231f      	movs	r3, #31
    613a:	18fb      	adds	r3, r7, r3
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	b25b      	sxtb	r3, r3
    6140:	0018      	movs	r0, r3
    6142:	46bd      	mov	sp, r7
    6144:	b009      	add	sp, #36	; 0x24
    6146:	bd90      	pop	{r4, r7, pc}
    6148:	00010de7 	.word	0x00010de7
    614c:	000c0008 	.word	0x000c0008
    6150:	000061d9 	.word	0x000061d9
    6154:	0000624d 	.word	0x0000624d
    6158:	00003e81 	.word	0x00003e81

0000615c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    615c:	b590      	push	{r4, r7, lr}
    615e:	b085      	sub	sp, #20
    6160:	af00      	add	r7, sp, #0
    6162:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    6164:	230f      	movs	r3, #15
    6166:	18fb      	adds	r3, r7, r3
    6168:	2200      	movs	r2, #0
    616a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    616c:	230f      	movs	r3, #15
    616e:	18fc      	adds	r4, r7, r3
    6170:	687b      	ldr	r3, [r7, #4]
    6172:	0018      	movs	r0, r3
    6174:	4b05      	ldr	r3, [pc, #20]	; (618c <nm_bus_iface_init+0x30>)
    6176:	4798      	blx	r3
    6178:	0003      	movs	r3, r0
    617a:	7023      	strb	r3, [r4, #0]

	return ret;
    617c:	230f      	movs	r3, #15
    617e:	18fb      	adds	r3, r7, r3
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	b25b      	sxtb	r3, r3
}
    6184:	0018      	movs	r0, r3
    6186:	46bd      	mov	sp, r7
    6188:	b005      	add	sp, #20
    618a:	bd90      	pop	{r4, r7, pc}
    618c:	00003cc5 	.word	0x00003cc5

00006190 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    6190:	b590      	push	{r4, r7, lr}
    6192:	b083      	sub	sp, #12
    6194:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    6196:	1dfb      	adds	r3, r7, #7
    6198:	2200      	movs	r2, #0
    619a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    619c:	1dfc      	adds	r4, r7, #7
    619e:	4b05      	ldr	r3, [pc, #20]	; (61b4 <nm_bus_iface_deinit+0x24>)
    61a0:	4798      	blx	r3
    61a2:	0003      	movs	r3, r0
    61a4:	7023      	strb	r3, [r4, #0]

	return ret;
    61a6:	1dfb      	adds	r3, r7, #7
    61a8:	781b      	ldrb	r3, [r3, #0]
    61aa:	b25b      	sxtb	r3, r3
}
    61ac:	0018      	movs	r0, r3
    61ae:	46bd      	mov	sp, r7
    61b0:	b003      	add	sp, #12
    61b2:	bd90      	pop	{r4, r7, pc}
    61b4:	00003e3d 	.word	0x00003e3d

000061b8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    61b8:	b580      	push	{r7, lr}
    61ba:	b082      	sub	sp, #8
    61bc:	af00      	add	r7, sp, #0
    61be:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    61c0:	687b      	ldr	r3, [r7, #4]
    61c2:	0018      	movs	r0, r3
    61c4:	4b03      	ldr	r3, [pc, #12]	; (61d4 <nm_read_reg+0x1c>)
    61c6:	4798      	blx	r3
    61c8:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    61ca:	0018      	movs	r0, r3
    61cc:	46bd      	mov	sp, r7
    61ce:	b002      	add	sp, #8
    61d0:	bd80      	pop	{r7, pc}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	00007851 	.word	0x00007851

000061d8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    61d8:	b580      	push	{r7, lr}
    61da:	b082      	sub	sp, #8
    61dc:	af00      	add	r7, sp, #0
    61de:	6078      	str	r0, [r7, #4]
    61e0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    61e2:	683a      	ldr	r2, [r7, #0]
    61e4:	687b      	ldr	r3, [r7, #4]
    61e6:	0011      	movs	r1, r2
    61e8:	0018      	movs	r0, r3
    61ea:	4b03      	ldr	r3, [pc, #12]	; (61f8 <nm_read_reg_with_ret+0x20>)
    61ec:	4798      	blx	r3
    61ee:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    61f0:	0018      	movs	r0, r3
    61f2:	46bd      	mov	sp, r7
    61f4:	b002      	add	sp, #8
    61f6:	bd80      	pop	{r7, pc}
    61f8:	00007875 	.word	0x00007875

000061fc <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    61fc:	b580      	push	{r7, lr}
    61fe:	b082      	sub	sp, #8
    6200:	af00      	add	r7, sp, #0
    6202:	6078      	str	r0, [r7, #4]
    6204:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    6206:	683a      	ldr	r2, [r7, #0]
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	0011      	movs	r1, r2
    620c:	0018      	movs	r0, r3
    620e:	4b03      	ldr	r3, [pc, #12]	; (621c <nm_write_reg+0x20>)
    6210:	4798      	blx	r3
    6212:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    6214:	0018      	movs	r0, r3
    6216:	46bd      	mov	sp, r7
    6218:	b002      	add	sp, #8
    621a:	bd80      	pop	{r7, pc}
    621c:	000078c5 	.word	0x000078c5

00006220 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6220:	b580      	push	{r7, lr}
    6222:	b084      	sub	sp, #16
    6224:	af00      	add	r7, sp, #0
    6226:	60f8      	str	r0, [r7, #12]
    6228:	60b9      	str	r1, [r7, #8]
    622a:	1dbb      	adds	r3, r7, #6
    622c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    622e:	1dbb      	adds	r3, r7, #6
    6230:	881a      	ldrh	r2, [r3, #0]
    6232:	68b9      	ldr	r1, [r7, #8]
    6234:	68fb      	ldr	r3, [r7, #12]
    6236:	0018      	movs	r0, r3
    6238:	4b03      	ldr	r3, [pc, #12]	; (6248 <p_nm_read_block+0x28>)
    623a:	4798      	blx	r3
    623c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    623e:	0018      	movs	r0, r3
    6240:	46bd      	mov	sp, r7
    6242:	b004      	add	sp, #16
    6244:	bd80      	pop	{r7, pc}
    6246:	46c0      	nop			; (mov r8, r8)
    6248:	00007915 	.word	0x00007915

0000624c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    624c:	b580      	push	{r7, lr}
    624e:	b086      	sub	sp, #24
    6250:	af00      	add	r7, sp, #0
    6252:	60f8      	str	r0, [r7, #12]
    6254:	60b9      	str	r1, [r7, #8]
    6256:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    6258:	4b2d      	ldr	r3, [pc, #180]	; (6310 <nm_read_block+0xc4>)
    625a:	881a      	ldrh	r2, [r3, #0]
    625c:	2310      	movs	r3, #16
    625e:	18fb      	adds	r3, r7, r3
    6260:	3a08      	subs	r2, #8
    6262:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    6264:	2300      	movs	r3, #0
    6266:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    6268:	2313      	movs	r3, #19
    626a:	18fb      	adds	r3, r7, r3
    626c:	2200      	movs	r2, #0
    626e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    6270:	2310      	movs	r3, #16
    6272:	18fb      	adds	r3, r7, r3
    6274:	881a      	ldrh	r2, [r3, #0]
    6276:	687b      	ldr	r3, [r7, #4]
    6278:	429a      	cmp	r2, r3
    627a:	d313      	bcc.n	62a4 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    627c:	68ba      	ldr	r2, [r7, #8]
    627e:	697b      	ldr	r3, [r7, #20]
    6280:	18d1      	adds	r1, r2, r3
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	b29a      	uxth	r2, r3
    6286:	68fb      	ldr	r3, [r7, #12]
    6288:	0018      	movs	r0, r3
    628a:	4b22      	ldr	r3, [pc, #136]	; (6314 <nm_read_block+0xc8>)
    628c:	4798      	blx	r3
    628e:	0003      	movs	r3, r0
    6290:	b2da      	uxtb	r2, r3
    6292:	2313      	movs	r3, #19
    6294:	18fb      	adds	r3, r7, r3
    6296:	781b      	ldrb	r3, [r3, #0]
    6298:	18d3      	adds	r3, r2, r3
    629a:	b2da      	uxtb	r2, r3
    629c:	2313      	movs	r3, #19
    629e:	18fb      	adds	r3, r7, r3
    62a0:	701a      	strb	r2, [r3, #0]
			break;
    62a2:	e02d      	b.n	6300 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	697b      	ldr	r3, [r7, #20]
    62a8:	18d1      	adds	r1, r2, r3
    62aa:	2310      	movs	r3, #16
    62ac:	18fb      	adds	r3, r7, r3
    62ae:	881a      	ldrh	r2, [r3, #0]
    62b0:	68fb      	ldr	r3, [r7, #12]
    62b2:	0018      	movs	r0, r3
    62b4:	4b17      	ldr	r3, [pc, #92]	; (6314 <nm_read_block+0xc8>)
    62b6:	4798      	blx	r3
    62b8:	0003      	movs	r3, r0
    62ba:	b2da      	uxtb	r2, r3
    62bc:	2313      	movs	r3, #19
    62be:	18fb      	adds	r3, r7, r3
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	18d3      	adds	r3, r2, r3
    62c4:	b2da      	uxtb	r2, r3
    62c6:	2313      	movs	r3, #19
    62c8:	18fb      	adds	r3, r7, r3
    62ca:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    62cc:	2313      	movs	r3, #19
    62ce:	18fb      	adds	r3, r7, r3
    62d0:	781b      	ldrb	r3, [r3, #0]
    62d2:	b25b      	sxtb	r3, r3
    62d4:	2b00      	cmp	r3, #0
    62d6:	d112      	bne.n	62fe <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    62d8:	2310      	movs	r3, #16
    62da:	18fb      	adds	r3, r7, r3
    62dc:	881b      	ldrh	r3, [r3, #0]
    62de:	687a      	ldr	r2, [r7, #4]
    62e0:	1ad3      	subs	r3, r2, r3
    62e2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    62e4:	2310      	movs	r3, #16
    62e6:	18fb      	adds	r3, r7, r3
    62e8:	881b      	ldrh	r3, [r3, #0]
    62ea:	697a      	ldr	r2, [r7, #20]
    62ec:	18d3      	adds	r3, r2, r3
    62ee:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    62f0:	2310      	movs	r3, #16
    62f2:	18fb      	adds	r3, r7, r3
    62f4:	881b      	ldrh	r3, [r3, #0]
    62f6:	68fa      	ldr	r2, [r7, #12]
    62f8:	18d3      	adds	r3, r2, r3
    62fa:	60fb      	str	r3, [r7, #12]
		}
	}
    62fc:	e7b8      	b.n	6270 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    62fe:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    6300:	2313      	movs	r3, #19
    6302:	18fb      	adds	r3, r7, r3
    6304:	781b      	ldrb	r3, [r3, #0]
    6306:	b25b      	sxtb	r3, r3
}
    6308:	0018      	movs	r0, r3
    630a:	46bd      	mov	sp, r7
    630c:	b006      	add	sp, #24
    630e:	bd80      	pop	{r7, pc}
    6310:	20000024 	.word	0x20000024
    6314:	00006221 	.word	0x00006221

00006318 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6318:	b580      	push	{r7, lr}
    631a:	b084      	sub	sp, #16
    631c:	af00      	add	r7, sp, #0
    631e:	60f8      	str	r0, [r7, #12]
    6320:	60b9      	str	r1, [r7, #8]
    6322:	1dbb      	adds	r3, r7, #6
    6324:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    6326:	1dbb      	adds	r3, r7, #6
    6328:	881a      	ldrh	r2, [r3, #0]
    632a:	68b9      	ldr	r1, [r7, #8]
    632c:	68fb      	ldr	r3, [r7, #12]
    632e:	0018      	movs	r0, r3
    6330:	4b03      	ldr	r3, [pc, #12]	; (6340 <p_nm_write_block+0x28>)
    6332:	4798      	blx	r3
    6334:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    6336:	0018      	movs	r0, r3
    6338:	46bd      	mov	sp, r7
    633a:	b004      	add	sp, #16
    633c:	bd80      	pop	{r7, pc}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	0000796d 	.word	0x0000796d

00006344 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    6344:	b580      	push	{r7, lr}
    6346:	b086      	sub	sp, #24
    6348:	af00      	add	r7, sp, #0
    634a:	60f8      	str	r0, [r7, #12]
    634c:	60b9      	str	r1, [r7, #8]
    634e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    6350:	4b2d      	ldr	r3, [pc, #180]	; (6408 <nm_write_block+0xc4>)
    6352:	881a      	ldrh	r2, [r3, #0]
    6354:	2310      	movs	r3, #16
    6356:	18fb      	adds	r3, r7, r3
    6358:	3a08      	subs	r2, #8
    635a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    635c:	2300      	movs	r3, #0
    635e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    6360:	2313      	movs	r3, #19
    6362:	18fb      	adds	r3, r7, r3
    6364:	2200      	movs	r2, #0
    6366:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    6368:	2310      	movs	r3, #16
    636a:	18fb      	adds	r3, r7, r3
    636c:	881a      	ldrh	r2, [r3, #0]
    636e:	687b      	ldr	r3, [r7, #4]
    6370:	429a      	cmp	r2, r3
    6372:	d313      	bcc.n	639c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    6374:	68ba      	ldr	r2, [r7, #8]
    6376:	697b      	ldr	r3, [r7, #20]
    6378:	18d1      	adds	r1, r2, r3
    637a:	687b      	ldr	r3, [r7, #4]
    637c:	b29a      	uxth	r2, r3
    637e:	68fb      	ldr	r3, [r7, #12]
    6380:	0018      	movs	r0, r3
    6382:	4b22      	ldr	r3, [pc, #136]	; (640c <nm_write_block+0xc8>)
    6384:	4798      	blx	r3
    6386:	0003      	movs	r3, r0
    6388:	b2da      	uxtb	r2, r3
    638a:	2313      	movs	r3, #19
    638c:	18fb      	adds	r3, r7, r3
    638e:	781b      	ldrb	r3, [r3, #0]
    6390:	18d3      	adds	r3, r2, r3
    6392:	b2da      	uxtb	r2, r3
    6394:	2313      	movs	r3, #19
    6396:	18fb      	adds	r3, r7, r3
    6398:	701a      	strb	r2, [r3, #0]
			break;
    639a:	e02d      	b.n	63f8 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    639c:	68ba      	ldr	r2, [r7, #8]
    639e:	697b      	ldr	r3, [r7, #20]
    63a0:	18d1      	adds	r1, r2, r3
    63a2:	2310      	movs	r3, #16
    63a4:	18fb      	adds	r3, r7, r3
    63a6:	881a      	ldrh	r2, [r3, #0]
    63a8:	68fb      	ldr	r3, [r7, #12]
    63aa:	0018      	movs	r0, r3
    63ac:	4b17      	ldr	r3, [pc, #92]	; (640c <nm_write_block+0xc8>)
    63ae:	4798      	blx	r3
    63b0:	0003      	movs	r3, r0
    63b2:	b2da      	uxtb	r2, r3
    63b4:	2313      	movs	r3, #19
    63b6:	18fb      	adds	r3, r7, r3
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	18d3      	adds	r3, r2, r3
    63bc:	b2da      	uxtb	r2, r3
    63be:	2313      	movs	r3, #19
    63c0:	18fb      	adds	r3, r7, r3
    63c2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    63c4:	2313      	movs	r3, #19
    63c6:	18fb      	adds	r3, r7, r3
    63c8:	781b      	ldrb	r3, [r3, #0]
    63ca:	b25b      	sxtb	r3, r3
    63cc:	2b00      	cmp	r3, #0
    63ce:	d112      	bne.n	63f6 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    63d0:	2310      	movs	r3, #16
    63d2:	18fb      	adds	r3, r7, r3
    63d4:	881b      	ldrh	r3, [r3, #0]
    63d6:	687a      	ldr	r2, [r7, #4]
    63d8:	1ad3      	subs	r3, r2, r3
    63da:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    63dc:	2310      	movs	r3, #16
    63de:	18fb      	adds	r3, r7, r3
    63e0:	881b      	ldrh	r3, [r3, #0]
    63e2:	697a      	ldr	r2, [r7, #20]
    63e4:	18d3      	adds	r3, r2, r3
    63e6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    63e8:	2310      	movs	r3, #16
    63ea:	18fb      	adds	r3, r7, r3
    63ec:	881b      	ldrh	r3, [r3, #0]
    63ee:	68fa      	ldr	r2, [r7, #12]
    63f0:	18d3      	adds	r3, r2, r3
    63f2:	60fb      	str	r3, [r7, #12]
		}
	}
    63f4:	e7b8      	b.n	6368 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    63f6:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    63f8:	2313      	movs	r3, #19
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	781b      	ldrb	r3, [r3, #0]
    63fe:	b25b      	sxtb	r3, r3
}
    6400:	0018      	movs	r0, r3
    6402:	46bd      	mov	sp, r7
    6404:	b006      	add	sp, #24
    6406:	bd80      	pop	{r7, pc}
    6408:	20000024 	.word	0x20000024
    640c:	00006319 	.word	0x00006319

00006410 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    6410:	b590      	push	{r4, r7, lr}
    6412:	b087      	sub	sp, #28
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    6418:	2300      	movs	r3, #0
    641a:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    641c:	2317      	movs	r3, #23
    641e:	18fb      	adds	r3, r7, r3
    6420:	2200      	movs	r2, #0
    6422:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    6424:	2317      	movs	r3, #23
    6426:	18fc      	adds	r4, r7, r3
    6428:	230c      	movs	r3, #12
    642a:	18fb      	adds	r3, r7, r3
    642c:	4a4c      	ldr	r2, [pc, #304]	; (6560 <nm_get_firmware_info+0x150>)
    642e:	0019      	movs	r1, r3
    6430:	0010      	movs	r0, r2
    6432:	4b4c      	ldr	r3, [pc, #304]	; (6564 <nm_get_firmware_info+0x154>)
    6434:	4798      	blx	r3
    6436:	0003      	movs	r3, r0
    6438:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    643a:	68fb      	ldr	r3, [r7, #12]
    643c:	4a4a      	ldr	r2, [pc, #296]	; (6568 <nm_get_firmware_info+0x158>)
    643e:	4293      	cmp	r3, r2
    6440:	d10a      	bne.n	6458 <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    6442:	2317      	movs	r3, #23
    6444:	18fc      	adds	r4, r7, r3
    6446:	230c      	movs	r3, #12
    6448:	18fb      	adds	r3, r7, r3
    644a:	4a48      	ldr	r2, [pc, #288]	; (656c <nm_get_firmware_info+0x15c>)
    644c:	0019      	movs	r1, r3
    644e:	0010      	movs	r0, r2
    6450:	4b44      	ldr	r3, [pc, #272]	; (6564 <nm_get_firmware_info+0x154>)
    6452:	4798      	blx	r3
    6454:	0003      	movs	r3, r0
    6456:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    6458:	68fb      	ldr	r3, [r7, #12]
    645a:	0c1b      	lsrs	r3, r3, #16
    645c:	121b      	asrs	r3, r3, #8
    645e:	b2da      	uxtb	r2, r3
    6460:	687b      	ldr	r3, [r7, #4]
    6462:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    6464:	68fb      	ldr	r3, [r7, #12]
    6466:	0c1b      	lsrs	r3, r3, #16
    6468:	111b      	asrs	r3, r3, #4
    646a:	b2db      	uxtb	r3, r3
    646c:	220f      	movs	r2, #15
    646e:	4013      	ands	r3, r2
    6470:	b2da      	uxtb	r2, r3
    6472:	687b      	ldr	r3, [r7, #4]
    6474:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    6476:	68fb      	ldr	r3, [r7, #12]
    6478:	0c1b      	lsrs	r3, r3, #16
    647a:	b2db      	uxtb	r3, r3
    647c:	220f      	movs	r2, #15
    647e:	4013      	ands	r3, r2
    6480:	b2da      	uxtb	r2, r3
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    6486:	68fb      	ldr	r3, [r7, #12]
    6488:	121b      	asrs	r3, r3, #8
    648a:	b2da      	uxtb	r2, r3
    648c:	687b      	ldr	r3, [r7, #4]
    648e:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    6490:	68fb      	ldr	r3, [r7, #12]
    6492:	111b      	asrs	r3, r3, #4
    6494:	b2db      	uxtb	r3, r3
    6496:	220f      	movs	r2, #15
    6498:	4013      	ands	r3, r2
    649a:	b2da      	uxtb	r2, r3
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    64a0:	68fb      	ldr	r3, [r7, #12]
    64a2:	b2db      	uxtb	r3, r3
    64a4:	220f      	movs	r2, #15
    64a6:	4013      	ands	r3, r2
    64a8:	b2da      	uxtb	r2, r3
    64aa:	687b      	ldr	r3, [r7, #4]
    64ac:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    64ae:	4b30      	ldr	r3, [pc, #192]	; (6570 <nm_get_firmware_info+0x160>)
    64b0:	4798      	blx	r3
    64b2:	0002      	movs	r2, r0
    64b4:	687b      	ldr	r3, [r7, #4]
    64b6:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    64b8:	687b      	ldr	r3, [r7, #4]
    64ba:	791b      	ldrb	r3, [r3, #4]
    64bc:	021b      	lsls	r3, r3, #8
    64be:	b21a      	sxth	r2, r3
    64c0:	687b      	ldr	r3, [r7, #4]
    64c2:	795b      	ldrb	r3, [r3, #5]
    64c4:	011b      	lsls	r3, r3, #4
    64c6:	b21b      	sxth	r3, r3
    64c8:	21ff      	movs	r1, #255	; 0xff
    64ca:	400b      	ands	r3, r1
    64cc:	b21b      	sxth	r3, r3
    64ce:	4313      	orrs	r3, r2
    64d0:	b21a      	sxth	r2, r3
    64d2:	687b      	ldr	r3, [r7, #4]
    64d4:	799b      	ldrb	r3, [r3, #6]
    64d6:	b21b      	sxth	r3, r3
    64d8:	210f      	movs	r1, #15
    64da:	400b      	ands	r3, r1
    64dc:	b21b      	sxth	r3, r3
    64de:	4313      	orrs	r3, r2
    64e0:	b21a      	sxth	r2, r3
    64e2:	2314      	movs	r3, #20
    64e4:	18fb      	adds	r3, r7, r3
    64e6:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    64e8:	2312      	movs	r3, #18
    64ea:	18fb      	adds	r3, r7, r3
    64ec:	4a21      	ldr	r2, [pc, #132]	; (6574 <nm_get_firmware_info+0x164>)
    64ee:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    64f0:	687b      	ldr	r3, [r7, #4]
    64f2:	79db      	ldrb	r3, [r3, #7]
    64f4:	021b      	lsls	r3, r3, #8
    64f6:	b21a      	sxth	r2, r3
    64f8:	687b      	ldr	r3, [r7, #4]
    64fa:	7a1b      	ldrb	r3, [r3, #8]
    64fc:	011b      	lsls	r3, r3, #4
    64fe:	b21b      	sxth	r3, r3
    6500:	21ff      	movs	r1, #255	; 0xff
    6502:	400b      	ands	r3, r1
    6504:	b21b      	sxth	r3, r3
    6506:	4313      	orrs	r3, r2
    6508:	b21a      	sxth	r2, r3
    650a:	687b      	ldr	r3, [r7, #4]
    650c:	7a5b      	ldrb	r3, [r3, #9]
    650e:	b21b      	sxth	r3, r3
    6510:	210f      	movs	r1, #15
    6512:	400b      	ands	r3, r1
    6514:	b21b      	sxth	r3, r3
    6516:	4313      	orrs	r3, r2
    6518:	b21a      	sxth	r2, r3
    651a:	2310      	movs	r3, #16
    651c:	18fb      	adds	r3, r7, r3
    651e:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    6520:	2312      	movs	r3, #18
    6522:	18fa      	adds	r2, r7, r3
    6524:	2310      	movs	r3, #16
    6526:	18fb      	adds	r3, r7, r3
    6528:	8812      	ldrh	r2, [r2, #0]
    652a:	881b      	ldrh	r3, [r3, #0]
    652c:	429a      	cmp	r2, r3
    652e:	d203      	bcs.n	6538 <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    6530:	2317      	movs	r3, #23
    6532:	18fb      	adds	r3, r7, r3
    6534:	22f3      	movs	r2, #243	; 0xf3
    6536:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    6538:	2312      	movs	r3, #18
    653a:	18fa      	adds	r2, r7, r3
    653c:	2314      	movs	r3, #20
    653e:	18fb      	adds	r3, r7, r3
    6540:	8812      	ldrh	r2, [r2, #0]
    6542:	881b      	ldrh	r3, [r3, #0]
    6544:	429a      	cmp	r2, r3
    6546:	d903      	bls.n	6550 <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    6548:	2317      	movs	r3, #23
    654a:	18fb      	adds	r3, r7, r3
    654c:	22f3      	movs	r2, #243	; 0xf3
    654e:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    6550:	2317      	movs	r3, #23
    6552:	18fb      	adds	r3, r7, r3
    6554:	781b      	ldrb	r3, [r3, #0]
    6556:	b25b      	sxtb	r3, r3
}
    6558:	0018      	movs	r0, r3
    655a:	46bd      	mov	sp, r7
    655c:	b007      	add	sp, #28
    655e:	bd90      	pop	{r4, r7, pc}
    6560:	000207ac 	.word	0x000207ac
    6564:	000061d9 	.word	0x000061d9
    6568:	d75dc1c3 	.word	0xd75dc1c3
    656c:	00001048 	.word	0x00001048
    6570:	00005b45 	.word	0x00005b45
    6574:	00001330 	.word	0x00001330

00006578 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    6578:	b590      	push	{r4, r7, lr}
    657a:	b085      	sub	sp, #20
    657c:	af00      	add	r7, sp, #0
    657e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    6580:	230f      	movs	r3, #15
    6582:	18fb      	adds	r3, r7, r3
    6584:	2200      	movs	r2, #0
    6586:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    6588:	687b      	ldr	r3, [r7, #4]
    658a:	2b00      	cmp	r3, #0
    658c:	d013      	beq.n	65b6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    658e:	230e      	movs	r3, #14
    6590:	18fb      	adds	r3, r7, r3
    6592:	687a      	ldr	r2, [r7, #4]
    6594:	7812      	ldrb	r2, [r2, #0]
    6596:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    6598:	230e      	movs	r3, #14
    659a:	18fb      	adds	r3, r7, r3
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	2b00      	cmp	r3, #0
    65a0:	d004      	beq.n	65ac <nm_drv_init+0x34>
    65a2:	230e      	movs	r3, #14
    65a4:	18fb      	adds	r3, r7, r3
    65a6:	781b      	ldrb	r3, [r3, #0]
    65a8:	2b04      	cmp	r3, #4
    65aa:	d908      	bls.n	65be <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    65ac:	230e      	movs	r3, #14
    65ae:	18fb      	adds	r3, r7, r3
    65b0:	2201      	movs	r2, #1
    65b2:	701a      	strb	r2, [r3, #0]
    65b4:	e003      	b.n	65be <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    65b6:	230e      	movs	r3, #14
    65b8:	18fb      	adds	r3, r7, r3
    65ba:	2201      	movs	r2, #1
    65bc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    65be:	230f      	movs	r3, #15
    65c0:	18fc      	adds	r4, r7, r3
    65c2:	2000      	movs	r0, #0
    65c4:	4b40      	ldr	r3, [pc, #256]	; (66c8 <nm_drv_init+0x150>)
    65c6:	4798      	blx	r3
    65c8:	0003      	movs	r3, r0
    65ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    65cc:	230f      	movs	r3, #15
    65ce:	18fb      	adds	r3, r7, r3
    65d0:	781b      	ldrb	r3, [r3, #0]
    65d2:	b25b      	sxtb	r3, r3
    65d4:	2b00      	cmp	r3, #0
    65d6:	d00e      	beq.n	65f6 <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    65d8:	2392      	movs	r3, #146	; 0x92
    65da:	005a      	lsls	r2, r3, #1
    65dc:	493b      	ldr	r1, [pc, #236]	; (66cc <nm_drv_init+0x154>)
    65de:	4b3c      	ldr	r3, [pc, #240]	; (66d0 <nm_drv_init+0x158>)
    65e0:	0018      	movs	r0, r3
    65e2:	4b3c      	ldr	r3, [pc, #240]	; (66d4 <nm_drv_init+0x15c>)
    65e4:	4798      	blx	r3
    65e6:	4b3c      	ldr	r3, [pc, #240]	; (66d8 <nm_drv_init+0x160>)
    65e8:	0018      	movs	r0, r3
    65ea:	4b3c      	ldr	r3, [pc, #240]	; (66dc <nm_drv_init+0x164>)
    65ec:	4798      	blx	r3
    65ee:	200d      	movs	r0, #13
    65f0:	4b3b      	ldr	r3, [pc, #236]	; (66e0 <nm_drv_init+0x168>)
    65f2:	4798      	blx	r3
		goto ERR1;
    65f4:	e05f      	b.n	66b6 <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    65f6:	4b3b      	ldr	r3, [pc, #236]	; (66e4 <nm_drv_init+0x16c>)
    65f8:	0018      	movs	r0, r3
    65fa:	4b36      	ldr	r3, [pc, #216]	; (66d4 <nm_drv_init+0x15c>)
    65fc:	4798      	blx	r3
    65fe:	4b3a      	ldr	r3, [pc, #232]	; (66e8 <nm_drv_init+0x170>)
    6600:	4798      	blx	r3
    6602:	0002      	movs	r2, r0
    6604:	4b39      	ldr	r3, [pc, #228]	; (66ec <nm_drv_init+0x174>)
    6606:	0011      	movs	r1, r2
    6608:	0018      	movs	r0, r3
    660a:	4b32      	ldr	r3, [pc, #200]	; (66d4 <nm_drv_init+0x15c>)
    660c:	4798      	blx	r3
    660e:	200d      	movs	r0, #13
    6610:	4b33      	ldr	r3, [pc, #204]	; (66e0 <nm_drv_init+0x168>)
    6612:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    6614:	4b36      	ldr	r3, [pc, #216]	; (66f0 <nm_drv_init+0x178>)
    6616:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    6618:	230f      	movs	r3, #15
    661a:	18fc      	adds	r4, r7, r3
    661c:	230e      	movs	r3, #14
    661e:	18fb      	adds	r3, r7, r3
    6620:	781b      	ldrb	r3, [r3, #0]
    6622:	0018      	movs	r0, r3
    6624:	4b33      	ldr	r3, [pc, #204]	; (66f4 <nm_drv_init+0x17c>)
    6626:	4798      	blx	r3
    6628:	0003      	movs	r3, r0
    662a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    662c:	230f      	movs	r3, #15
    662e:	18fb      	adds	r3, r7, r3
    6630:	781b      	ldrb	r3, [r3, #0]
    6632:	b25b      	sxtb	r3, r3
    6634:	2b00      	cmp	r3, #0
    6636:	d139      	bne.n	66ac <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    6638:	230f      	movs	r3, #15
    663a:	18fc      	adds	r4, r7, r3
    663c:	230e      	movs	r3, #14
    663e:	18fb      	adds	r3, r7, r3
    6640:	781b      	ldrb	r3, [r3, #0]
    6642:	0018      	movs	r0, r3
    6644:	4b2c      	ldr	r3, [pc, #176]	; (66f8 <nm_drv_init+0x180>)
    6646:	4798      	blx	r3
    6648:	0003      	movs	r3, r0
    664a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    664c:	230f      	movs	r3, #15
    664e:	18fb      	adds	r3, r7, r3
    6650:	781b      	ldrb	r3, [r3, #0]
    6652:	b25b      	sxtb	r3, r3
    6654:	2b00      	cmp	r3, #0
    6656:	d12b      	bne.n	66b0 <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    6658:	230e      	movs	r3, #14
    665a:	18fb      	adds	r3, r7, r3
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	2b02      	cmp	r3, #2
    6660:	d029      	beq.n	66b6 <nm_drv_init+0x13e>
    6662:	230e      	movs	r3, #14
    6664:	18fb      	adds	r3, r7, r3
    6666:	781b      	ldrb	r3, [r3, #0]
    6668:	2b03      	cmp	r3, #3
    666a:	d024      	beq.n	66b6 <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    666c:	230f      	movs	r3, #15
    666e:	18fc      	adds	r4, r7, r3
    6670:	4b22      	ldr	r3, [pc, #136]	; (66fc <nm_drv_init+0x184>)
    6672:	4798      	blx	r3
    6674:	0003      	movs	r3, r0
    6676:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6678:	230f      	movs	r3, #15
    667a:	18fb      	adds	r3, r7, r3
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	b25b      	sxtb	r3, r3
    6680:	2b00      	cmp	r3, #0
    6682:	d00e      	beq.n	66a2 <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    6684:	23ae      	movs	r3, #174	; 0xae
    6686:	005a      	lsls	r2, r3, #1
    6688:	4910      	ldr	r1, [pc, #64]	; (66cc <nm_drv_init+0x154>)
    668a:	4b11      	ldr	r3, [pc, #68]	; (66d0 <nm_drv_init+0x158>)
    668c:	0018      	movs	r0, r3
    668e:	4b11      	ldr	r3, [pc, #68]	; (66d4 <nm_drv_init+0x15c>)
    6690:	4798      	blx	r3
    6692:	4b1b      	ldr	r3, [pc, #108]	; (6700 <nm_drv_init+0x188>)
    6694:	0018      	movs	r0, r3
    6696:	4b11      	ldr	r3, [pc, #68]	; (66dc <nm_drv_init+0x164>)
    6698:	4798      	blx	r3
    669a:	200d      	movs	r0, #13
    669c:	4b10      	ldr	r3, [pc, #64]	; (66e0 <nm_drv_init+0x168>)
    669e:	4798      	blx	r3
		goto ERR2;
    66a0:	e007      	b.n	66b2 <nm_drv_init+0x13a>
	}
	
	return ret;
    66a2:	230f      	movs	r3, #15
    66a4:	18fb      	adds	r3, r7, r3
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	b25b      	sxtb	r3, r3
    66aa:	e008      	b.n	66be <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    66ac:	46c0      	nop			; (mov r8, r8)
    66ae:	e000      	b.n	66b2 <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    66b0:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    66b2:	4b14      	ldr	r3, [pc, #80]	; (6704 <nm_drv_init+0x18c>)
    66b4:	4798      	blx	r3
ERR1:
	return ret;
    66b6:	230f      	movs	r3, #15
    66b8:	18fb      	adds	r3, r7, r3
    66ba:	781b      	ldrb	r3, [r3, #0]
    66bc:	b25b      	sxtb	r3, r3
}
    66be:	0018      	movs	r0, r3
    66c0:	46bd      	mov	sp, r7
    66c2:	b005      	add	sp, #20
    66c4:	bd90      	pop	{r4, r7, pc}
    66c6:	46c0      	nop			; (mov r8, r8)
    66c8:	0000615d 	.word	0x0000615d
    66cc:	000134ec 	.word	0x000134ec
    66d0:	00013420 	.word	0x00013420
    66d4:	000114d9 	.word	0x000114d9
    66d8:	00013434 	.word	0x00013434
    66dc:	000115f9 	.word	0x000115f9
    66e0:	0001150d 	.word	0x0001150d
    66e4:	00013450 	.word	0x00013450
    66e8:	00005b45 	.word	0x00005b45
    66ec:	0001345c 	.word	0x0001345c
    66f0:	000076f1 	.word	0x000076f1
    66f4:	00005c3d 	.word	0x00005c3d
    66f8:	00005d85 	.word	0x00005d85
    66fc:	00005a89 	.word	0x00005a89
    6700:	0001346c 	.word	0x0001346c
    6704:	00006191 	.word	0x00006191

00006708 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    6708:	b590      	push	{r4, r7, lr}
    670a:	b085      	sub	sp, #20
    670c:	af00      	add	r7, sp, #0
    670e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    6710:	230f      	movs	r3, #15
    6712:	18fc      	adds	r4, r7, r3
    6714:	4b2d      	ldr	r3, [pc, #180]	; (67cc <nm_drv_deinit+0xc4>)
    6716:	4798      	blx	r3
    6718:	0003      	movs	r3, r0
    671a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    671c:	230f      	movs	r3, #15
    671e:	18fb      	adds	r3, r7, r3
    6720:	781b      	ldrb	r3, [r3, #0]
    6722:	b25b      	sxtb	r3, r3
    6724:	2b00      	cmp	r3, #0
    6726:	d00e      	beq.n	6746 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    6728:	23ba      	movs	r3, #186	; 0xba
    672a:	005a      	lsls	r2, r3, #1
    672c:	4928      	ldr	r1, [pc, #160]	; (67d0 <nm_drv_deinit+0xc8>)
    672e:	4b29      	ldr	r3, [pc, #164]	; (67d4 <nm_drv_deinit+0xcc>)
    6730:	0018      	movs	r0, r3
    6732:	4b29      	ldr	r3, [pc, #164]	; (67d8 <nm_drv_deinit+0xd0>)
    6734:	4798      	blx	r3
    6736:	4b29      	ldr	r3, [pc, #164]	; (67dc <nm_drv_deinit+0xd4>)
    6738:	0018      	movs	r0, r3
    673a:	4b29      	ldr	r3, [pc, #164]	; (67e0 <nm_drv_deinit+0xd8>)
    673c:	4798      	blx	r3
    673e:	200d      	movs	r0, #13
    6740:	4b28      	ldr	r3, [pc, #160]	; (67e4 <nm_drv_deinit+0xdc>)
    6742:	4798      	blx	r3
		goto ERR1;
    6744:	e03a      	b.n	67bc <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    6746:	230f      	movs	r3, #15
    6748:	18fc      	adds	r4, r7, r3
    674a:	2000      	movs	r0, #0
    674c:	4b26      	ldr	r3, [pc, #152]	; (67e8 <nm_drv_deinit+0xe0>)
    674e:	4798      	blx	r3
    6750:	0003      	movs	r3, r0
    6752:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    6754:	230f      	movs	r3, #15
    6756:	18fb      	adds	r3, r7, r3
    6758:	781b      	ldrb	r3, [r3, #0]
    675a:	b25b      	sxtb	r3, r3
    675c:	2b00      	cmp	r3, #0
    675e:	d00f      	beq.n	6780 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    6760:	237c      	movs	r3, #124	; 0x7c
    6762:	33ff      	adds	r3, #255	; 0xff
    6764:	001a      	movs	r2, r3
    6766:	491a      	ldr	r1, [pc, #104]	; (67d0 <nm_drv_deinit+0xc8>)
    6768:	4b1a      	ldr	r3, [pc, #104]	; (67d4 <nm_drv_deinit+0xcc>)
    676a:	0018      	movs	r0, r3
    676c:	4b1a      	ldr	r3, [pc, #104]	; (67d8 <nm_drv_deinit+0xd0>)
    676e:	4798      	blx	r3
    6770:	4b1e      	ldr	r3, [pc, #120]	; (67ec <nm_drv_deinit+0xe4>)
    6772:	0018      	movs	r0, r3
    6774:	4b1a      	ldr	r3, [pc, #104]	; (67e0 <nm_drv_deinit+0xd8>)
    6776:	4798      	blx	r3
    6778:	200d      	movs	r0, #13
    677a:	4b1a      	ldr	r3, [pc, #104]	; (67e4 <nm_drv_deinit+0xdc>)
    677c:	4798      	blx	r3
		goto ERR1;
    677e:	e01d      	b.n	67bc <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    6780:	230f      	movs	r3, #15
    6782:	18fc      	adds	r4, r7, r3
    6784:	4b1a      	ldr	r3, [pc, #104]	; (67f0 <nm_drv_deinit+0xe8>)
    6786:	4798      	blx	r3
    6788:	0003      	movs	r3, r0
    678a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    678c:	230f      	movs	r3, #15
    678e:	18fb      	adds	r3, r7, r3
    6790:	781b      	ldrb	r3, [r3, #0]
    6792:	b25b      	sxtb	r3, r3
    6794:	2b00      	cmp	r3, #0
    6796:	d00f      	beq.n	67b8 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    6798:	2382      	movs	r3, #130	; 0x82
    679a:	33ff      	adds	r3, #255	; 0xff
    679c:	001a      	movs	r2, r3
    679e:	490c      	ldr	r1, [pc, #48]	; (67d0 <nm_drv_deinit+0xc8>)
    67a0:	4b0c      	ldr	r3, [pc, #48]	; (67d4 <nm_drv_deinit+0xcc>)
    67a2:	0018      	movs	r0, r3
    67a4:	4b0c      	ldr	r3, [pc, #48]	; (67d8 <nm_drv_deinit+0xd0>)
    67a6:	4798      	blx	r3
    67a8:	4b12      	ldr	r3, [pc, #72]	; (67f4 <nm_drv_deinit+0xec>)
    67aa:	0018      	movs	r0, r3
    67ac:	4b0c      	ldr	r3, [pc, #48]	; (67e0 <nm_drv_deinit+0xd8>)
    67ae:	4798      	blx	r3
    67b0:	200d      	movs	r0, #13
    67b2:	4b0c      	ldr	r3, [pc, #48]	; (67e4 <nm_drv_deinit+0xdc>)
    67b4:	4798      	blx	r3
		goto ERR1;
    67b6:	e001      	b.n	67bc <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    67b8:	4b0f      	ldr	r3, [pc, #60]	; (67f8 <nm_drv_deinit+0xf0>)
    67ba:	4798      	blx	r3
#endif

ERR1:
	return ret;
    67bc:	230f      	movs	r3, #15
    67be:	18fb      	adds	r3, r7, r3
    67c0:	781b      	ldrb	r3, [r3, #0]
    67c2:	b25b      	sxtb	r3, r3
}
    67c4:	0018      	movs	r0, r3
    67c6:	46bd      	mov	sp, r7
    67c8:	b005      	add	sp, #20
    67ca:	bd90      	pop	{r4, r7, pc}
    67cc:	00005e39 	.word	0x00005e39
    67d0:	000134f8 	.word	0x000134f8
    67d4:	00013420 	.word	0x00013420
    67d8:	000114d9 	.word	0x000114d9
    67dc:	0001348c 	.word	0x0001348c
    67e0:	000115f9 	.word	0x000115f9
    67e4:	0001150d 	.word	0x0001150d
    67e8:	00008905 	.word	0x00008905
    67ec:	000134ac 	.word	0x000134ac
    67f0:	00006191 	.word	0x00006191
    67f4:	000134d0 	.word	0x000134d0
    67f8:	00007839 	.word	0x00007839

000067fc <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    67fc:	b580      	push	{r7, lr}
    67fe:	b086      	sub	sp, #24
    6800:	af00      	add	r7, sp, #0
    6802:	6078      	str	r0, [r7, #4]
    6804:	000a      	movs	r2, r1
    6806:	1cbb      	adds	r3, r7, #2
    6808:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    680a:	230c      	movs	r3, #12
    680c:	18fb      	adds	r3, r7, r3
    680e:	2200      	movs	r2, #0
    6810:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    6812:	230c      	movs	r3, #12
    6814:	18fb      	adds	r3, r7, r3
    6816:	687a      	ldr	r2, [r7, #4]
    6818:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    681a:	230c      	movs	r3, #12
    681c:	18fb      	adds	r3, r7, r3
    681e:	1cba      	adds	r2, r7, #2
    6820:	8812      	ldrh	r2, [r2, #0]
    6822:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    6824:	230c      	movs	r3, #12
    6826:	18fb      	adds	r3, r7, r3
    6828:	0019      	movs	r1, r3
    682a:	2003      	movs	r0, #3
    682c:	4b03      	ldr	r3, [pc, #12]	; (683c <nmi_spi_read+0x40>)
    682e:	4798      	blx	r3
    6830:	0003      	movs	r3, r0
}
    6832:	0018      	movs	r0, r3
    6834:	46bd      	mov	sp, r7
    6836:	b006      	add	sp, #24
    6838:	bd80      	pop	{r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	00003dad 	.word	0x00003dad

00006840 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    6840:	b580      	push	{r7, lr}
    6842:	b086      	sub	sp, #24
    6844:	af00      	add	r7, sp, #0
    6846:	6078      	str	r0, [r7, #4]
    6848:	000a      	movs	r2, r1
    684a:	1cbb      	adds	r3, r7, #2
    684c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    684e:	230c      	movs	r3, #12
    6850:	18fb      	adds	r3, r7, r3
    6852:	687a      	ldr	r2, [r7, #4]
    6854:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    6856:	230c      	movs	r3, #12
    6858:	18fb      	adds	r3, r7, r3
    685a:	2200      	movs	r2, #0
    685c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    685e:	230c      	movs	r3, #12
    6860:	18fb      	adds	r3, r7, r3
    6862:	1cba      	adds	r2, r7, #2
    6864:	8812      	ldrh	r2, [r2, #0]
    6866:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    6868:	230c      	movs	r3, #12
    686a:	18fb      	adds	r3, r7, r3
    686c:	0019      	movs	r1, r3
    686e:	2003      	movs	r0, #3
    6870:	4b03      	ldr	r3, [pc, #12]	; (6880 <nmi_spi_write+0x40>)
    6872:	4798      	blx	r3
    6874:	0003      	movs	r3, r0
}
    6876:	0018      	movs	r0, r3
    6878:	46bd      	mov	sp, r7
    687a:	b006      	add	sp, #24
    687c:	bd80      	pop	{r7, pc}
    687e:	46c0      	nop			; (mov r8, r8)
    6880:	00003dad 	.word	0x00003dad

00006884 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    6884:	b580      	push	{r7, lr}
    6886:	b082      	sub	sp, #8
    6888:	af00      	add	r7, sp, #0
    688a:	0002      	movs	r2, r0
    688c:	1dfb      	adds	r3, r7, #7
    688e:	701a      	strb	r2, [r3, #0]
    6890:	1dbb      	adds	r3, r7, #6
    6892:	1c0a      	adds	r2, r1, #0
    6894:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    6896:	1dfb      	adds	r3, r7, #7
    6898:	781b      	ldrb	r3, [r3, #0]
    689a:	005a      	lsls	r2, r3, #1
    689c:	1dbb      	adds	r3, r7, #6
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	4053      	eors	r3, r2
    68a2:	4a03      	ldr	r2, [pc, #12]	; (68b0 <crc7_byte+0x2c>)
    68a4:	5cd3      	ldrb	r3, [r2, r3]
}
    68a6:	0018      	movs	r0, r3
    68a8:	46bd      	mov	sp, r7
    68aa:	b002      	add	sp, #8
    68ac:	bd80      	pop	{r7, pc}
    68ae:	46c0      	nop			; (mov r8, r8)
    68b0:	00013508 	.word	0x00013508

000068b4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    68b4:	b590      	push	{r4, r7, lr}
    68b6:	b085      	sub	sp, #20
    68b8:	af00      	add	r7, sp, #0
    68ba:	60b9      	str	r1, [r7, #8]
    68bc:	607a      	str	r2, [r7, #4]
    68be:	230f      	movs	r3, #15
    68c0:	18fb      	adds	r3, r7, r3
    68c2:	1c02      	adds	r2, r0, #0
    68c4:	701a      	strb	r2, [r3, #0]
	while (len--)
    68c6:	e00e      	b.n	68e6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    68c8:	68bb      	ldr	r3, [r7, #8]
    68ca:	1c5a      	adds	r2, r3, #1
    68cc:	60ba      	str	r2, [r7, #8]
    68ce:	781a      	ldrb	r2, [r3, #0]
    68d0:	230f      	movs	r3, #15
    68d2:	18fc      	adds	r4, r7, r3
    68d4:	230f      	movs	r3, #15
    68d6:	18fb      	adds	r3, r7, r3
    68d8:	781b      	ldrb	r3, [r3, #0]
    68da:	0011      	movs	r1, r2
    68dc:	0018      	movs	r0, r3
    68de:	4b08      	ldr	r3, [pc, #32]	; (6900 <crc7+0x4c>)
    68e0:	4798      	blx	r3
    68e2:	0003      	movs	r3, r0
    68e4:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	1e5a      	subs	r2, r3, #1
    68ea:	607a      	str	r2, [r7, #4]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d1eb      	bne.n	68c8 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    68f0:	230f      	movs	r3, #15
    68f2:	18fb      	adds	r3, r7, r3
    68f4:	781b      	ldrb	r3, [r3, #0]
}
    68f6:	0018      	movs	r0, r3
    68f8:	46bd      	mov	sp, r7
    68fa:	b005      	add	sp, #20
    68fc:	bd90      	pop	{r4, r7, pc}
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	00006885 	.word	0x00006885

00006904 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    6904:	b590      	push	{r4, r7, lr}
    6906:	b089      	sub	sp, #36	; 0x24
    6908:	af00      	add	r7, sp, #0
    690a:	60b9      	str	r1, [r7, #8]
    690c:	607a      	str	r2, [r7, #4]
    690e:	603b      	str	r3, [r7, #0]
    6910:	230f      	movs	r3, #15
    6912:	18fb      	adds	r3, r7, r3
    6914:	1c02      	adds	r2, r0, #0
    6916:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    6918:	231f      	movs	r3, #31
    691a:	18fb      	adds	r3, r7, r3
    691c:	2205      	movs	r2, #5
    691e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    6920:	231e      	movs	r3, #30
    6922:	18fb      	adds	r3, r7, r3
    6924:	2201      	movs	r2, #1
    6926:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    6928:	2314      	movs	r3, #20
    692a:	18fb      	adds	r3, r7, r3
    692c:	220f      	movs	r2, #15
    692e:	18ba      	adds	r2, r7, r2
    6930:	7812      	ldrb	r2, [r2, #0]
    6932:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    6934:	230f      	movs	r3, #15
    6936:	18fb      	adds	r3, r7, r3
    6938:	781b      	ldrb	r3, [r3, #0]
    693a:	3bc1      	subs	r3, #193	; 0xc1
    693c:	2b0e      	cmp	r3, #14
    693e:	d900      	bls.n	6942 <spi_cmd+0x3e>
    6940:	e11b      	b.n	6b7a <spi_cmd+0x276>
    6942:	009a      	lsls	r2, r3, #2
    6944:	4bb6      	ldr	r3, [pc, #728]	; (6c20 <spi_cmd+0x31c>)
    6946:	18d3      	adds	r3, r2, r3
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    694c:	68bb      	ldr	r3, [r7, #8]
    694e:	0c1b      	lsrs	r3, r3, #16
    6950:	b2da      	uxtb	r2, r3
    6952:	2314      	movs	r3, #20
    6954:	18fb      	adds	r3, r7, r3
    6956:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6958:	68bb      	ldr	r3, [r7, #8]
    695a:	0a1b      	lsrs	r3, r3, #8
    695c:	b2da      	uxtb	r2, r3
    695e:	2314      	movs	r3, #20
    6960:	18fb      	adds	r3, r7, r3
    6962:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    6964:	68bb      	ldr	r3, [r7, #8]
    6966:	b2da      	uxtb	r2, r3
    6968:	2314      	movs	r3, #20
    696a:	18fb      	adds	r3, r7, r3
    696c:	70da      	strb	r2, [r3, #3]
		len = 5;
    696e:	231f      	movs	r3, #31
    6970:	18fb      	adds	r3, r7, r3
    6972:	2205      	movs	r2, #5
    6974:	701a      	strb	r2, [r3, #0]
		break;
    6976:	e105      	b.n	6b84 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    6978:	68bb      	ldr	r3, [r7, #8]
    697a:	0a1b      	lsrs	r3, r3, #8
    697c:	b2da      	uxtb	r2, r3
    697e:	2314      	movs	r3, #20
    6980:	18fb      	adds	r3, r7, r3
    6982:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    6984:	2330      	movs	r3, #48	; 0x30
    6986:	18fb      	adds	r3, r7, r3
    6988:	781b      	ldrb	r3, [r3, #0]
    698a:	2b00      	cmp	r3, #0
    698c:	d009      	beq.n	69a2 <spi_cmd+0x9e>
    698e:	2314      	movs	r3, #20
    6990:	18fb      	adds	r3, r7, r3
    6992:	785b      	ldrb	r3, [r3, #1]
    6994:	2280      	movs	r2, #128	; 0x80
    6996:	4252      	negs	r2, r2
    6998:	4313      	orrs	r3, r2
    699a:	b2da      	uxtb	r2, r3
    699c:	2314      	movs	r3, #20
    699e:	18fb      	adds	r3, r7, r3
    69a0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    69a2:	68bb      	ldr	r3, [r7, #8]
    69a4:	b2da      	uxtb	r2, r3
    69a6:	2314      	movs	r3, #20
    69a8:	18fb      	adds	r3, r7, r3
    69aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    69ac:	2314      	movs	r3, #20
    69ae:	18fb      	adds	r3, r7, r3
    69b0:	2200      	movs	r2, #0
    69b2:	70da      	strb	r2, [r3, #3]
		len = 5;
    69b4:	231f      	movs	r3, #31
    69b6:	18fb      	adds	r3, r7, r3
    69b8:	2205      	movs	r2, #5
    69ba:	701a      	strb	r2, [r3, #0]
		break;
    69bc:	e0e2      	b.n	6b84 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    69be:	2314      	movs	r3, #20
    69c0:	18fb      	adds	r3, r7, r3
    69c2:	2200      	movs	r2, #0
    69c4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    69c6:	2314      	movs	r3, #20
    69c8:	18fb      	adds	r3, r7, r3
    69ca:	2200      	movs	r2, #0
    69cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    69ce:	2314      	movs	r3, #20
    69d0:	18fb      	adds	r3, r7, r3
    69d2:	2200      	movs	r2, #0
    69d4:	70da      	strb	r2, [r3, #3]
		len = 5;
    69d6:	231f      	movs	r3, #31
    69d8:	18fb      	adds	r3, r7, r3
    69da:	2205      	movs	r2, #5
    69dc:	701a      	strb	r2, [r3, #0]
		break;
    69de:	e0d1      	b.n	6b84 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    69e0:	2314      	movs	r3, #20
    69e2:	18fb      	adds	r3, r7, r3
    69e4:	2200      	movs	r2, #0
    69e6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    69e8:	2314      	movs	r3, #20
    69ea:	18fb      	adds	r3, r7, r3
    69ec:	2200      	movs	r2, #0
    69ee:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    69f0:	2314      	movs	r3, #20
    69f2:	18fb      	adds	r3, r7, r3
    69f4:	2200      	movs	r2, #0
    69f6:	70da      	strb	r2, [r3, #3]
		len = 5;
    69f8:	231f      	movs	r3, #31
    69fa:	18fb      	adds	r3, r7, r3
    69fc:	2205      	movs	r2, #5
    69fe:	701a      	strb	r2, [r3, #0]
		break;
    6a00:	e0c0      	b.n	6b84 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    6a02:	2314      	movs	r3, #20
    6a04:	18fb      	adds	r3, r7, r3
    6a06:	22ff      	movs	r2, #255	; 0xff
    6a08:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    6a0a:	2314      	movs	r3, #20
    6a0c:	18fb      	adds	r3, r7, r3
    6a0e:	22ff      	movs	r2, #255	; 0xff
    6a10:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    6a12:	2314      	movs	r3, #20
    6a14:	18fb      	adds	r3, r7, r3
    6a16:	22ff      	movs	r2, #255	; 0xff
    6a18:	70da      	strb	r2, [r3, #3]
		len = 5;
    6a1a:	231f      	movs	r3, #31
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	2205      	movs	r2, #5
    6a20:	701a      	strb	r2, [r3, #0]
		break;
    6a22:	e0af      	b.n	6b84 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    6a24:	68bb      	ldr	r3, [r7, #8]
    6a26:	0c1b      	lsrs	r3, r3, #16
    6a28:	b2da      	uxtb	r2, r3
    6a2a:	2314      	movs	r3, #20
    6a2c:	18fb      	adds	r3, r7, r3
    6a2e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6a30:	68bb      	ldr	r3, [r7, #8]
    6a32:	0a1b      	lsrs	r3, r3, #8
    6a34:	b2da      	uxtb	r2, r3
    6a36:	2314      	movs	r3, #20
    6a38:	18fb      	adds	r3, r7, r3
    6a3a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    6a3c:	68bb      	ldr	r3, [r7, #8]
    6a3e:	b2da      	uxtb	r2, r3
    6a40:	2314      	movs	r3, #20
    6a42:	18fb      	adds	r3, r7, r3
    6a44:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    6a46:	683b      	ldr	r3, [r7, #0]
    6a48:	0a1b      	lsrs	r3, r3, #8
    6a4a:	b2da      	uxtb	r2, r3
    6a4c:	2314      	movs	r3, #20
    6a4e:	18fb      	adds	r3, r7, r3
    6a50:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    6a52:	683b      	ldr	r3, [r7, #0]
    6a54:	b2da      	uxtb	r2, r3
    6a56:	2314      	movs	r3, #20
    6a58:	18fb      	adds	r3, r7, r3
    6a5a:	715a      	strb	r2, [r3, #5]
		len = 7;
    6a5c:	231f      	movs	r3, #31
    6a5e:	18fb      	adds	r3, r7, r3
    6a60:	2207      	movs	r2, #7
    6a62:	701a      	strb	r2, [r3, #0]
		break;
    6a64:	e08e      	b.n	6b84 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    6a66:	68bb      	ldr	r3, [r7, #8]
    6a68:	0c1b      	lsrs	r3, r3, #16
    6a6a:	b2da      	uxtb	r2, r3
    6a6c:	2314      	movs	r3, #20
    6a6e:	18fb      	adds	r3, r7, r3
    6a70:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6a72:	68bb      	ldr	r3, [r7, #8]
    6a74:	0a1b      	lsrs	r3, r3, #8
    6a76:	b2da      	uxtb	r2, r3
    6a78:	2314      	movs	r3, #20
    6a7a:	18fb      	adds	r3, r7, r3
    6a7c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    6a7e:	68bb      	ldr	r3, [r7, #8]
    6a80:	b2da      	uxtb	r2, r3
    6a82:	2314      	movs	r3, #20
    6a84:	18fb      	adds	r3, r7, r3
    6a86:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    6a88:	683b      	ldr	r3, [r7, #0]
    6a8a:	0c1b      	lsrs	r3, r3, #16
    6a8c:	b2da      	uxtb	r2, r3
    6a8e:	2314      	movs	r3, #20
    6a90:	18fb      	adds	r3, r7, r3
    6a92:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    6a94:	683b      	ldr	r3, [r7, #0]
    6a96:	0a1b      	lsrs	r3, r3, #8
    6a98:	b2da      	uxtb	r2, r3
    6a9a:	2314      	movs	r3, #20
    6a9c:	18fb      	adds	r3, r7, r3
    6a9e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    6aa0:	683b      	ldr	r3, [r7, #0]
    6aa2:	b2da      	uxtb	r2, r3
    6aa4:	2314      	movs	r3, #20
    6aa6:	18fb      	adds	r3, r7, r3
    6aa8:	719a      	strb	r2, [r3, #6]
		len = 8;
    6aaa:	231f      	movs	r3, #31
    6aac:	18fb      	adds	r3, r7, r3
    6aae:	2208      	movs	r2, #8
    6ab0:	701a      	strb	r2, [r3, #0]
		break;
    6ab2:	e067      	b.n	6b84 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    6ab4:	68bb      	ldr	r3, [r7, #8]
    6ab6:	0a1b      	lsrs	r3, r3, #8
    6ab8:	b2da      	uxtb	r2, r3
    6aba:	2314      	movs	r3, #20
    6abc:	18fb      	adds	r3, r7, r3
    6abe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    6ac0:	2330      	movs	r3, #48	; 0x30
    6ac2:	18fb      	adds	r3, r7, r3
    6ac4:	781b      	ldrb	r3, [r3, #0]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d009      	beq.n	6ade <spi_cmd+0x1da>
    6aca:	2314      	movs	r3, #20
    6acc:	18fb      	adds	r3, r7, r3
    6ace:	785b      	ldrb	r3, [r3, #1]
    6ad0:	2280      	movs	r2, #128	; 0x80
    6ad2:	4252      	negs	r2, r2
    6ad4:	4313      	orrs	r3, r2
    6ad6:	b2da      	uxtb	r2, r3
    6ad8:	2314      	movs	r3, #20
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    6ade:	68bb      	ldr	r3, [r7, #8]
    6ae0:	b2da      	uxtb	r2, r3
    6ae2:	2314      	movs	r3, #20
    6ae4:	18fb      	adds	r3, r7, r3
    6ae6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    6ae8:	687b      	ldr	r3, [r7, #4]
    6aea:	0e1b      	lsrs	r3, r3, #24
    6aec:	b2da      	uxtb	r2, r3
    6aee:	2314      	movs	r3, #20
    6af0:	18fb      	adds	r3, r7, r3
    6af2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    6af4:	687b      	ldr	r3, [r7, #4]
    6af6:	0c1b      	lsrs	r3, r3, #16
    6af8:	b2da      	uxtb	r2, r3
    6afa:	2314      	movs	r3, #20
    6afc:	18fb      	adds	r3, r7, r3
    6afe:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    6b00:	687b      	ldr	r3, [r7, #4]
    6b02:	0a1b      	lsrs	r3, r3, #8
    6b04:	b2da      	uxtb	r2, r3
    6b06:	2314      	movs	r3, #20
    6b08:	18fb      	adds	r3, r7, r3
    6b0a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	b2da      	uxtb	r2, r3
    6b10:	2314      	movs	r3, #20
    6b12:	18fb      	adds	r3, r7, r3
    6b14:	719a      	strb	r2, [r3, #6]
		len = 8;
    6b16:	231f      	movs	r3, #31
    6b18:	18fb      	adds	r3, r7, r3
    6b1a:	2208      	movs	r2, #8
    6b1c:	701a      	strb	r2, [r3, #0]
		break;
    6b1e:	e031      	b.n	6b84 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    6b20:	68bb      	ldr	r3, [r7, #8]
    6b22:	0c1b      	lsrs	r3, r3, #16
    6b24:	b2da      	uxtb	r2, r3
    6b26:	2314      	movs	r3, #20
    6b28:	18fb      	adds	r3, r7, r3
    6b2a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    6b2c:	68bb      	ldr	r3, [r7, #8]
    6b2e:	0a1b      	lsrs	r3, r3, #8
    6b30:	b2da      	uxtb	r2, r3
    6b32:	2314      	movs	r3, #20
    6b34:	18fb      	adds	r3, r7, r3
    6b36:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    6b38:	68bb      	ldr	r3, [r7, #8]
    6b3a:	b2da      	uxtb	r2, r3
    6b3c:	2314      	movs	r3, #20
    6b3e:	18fb      	adds	r3, r7, r3
    6b40:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    6b42:	687b      	ldr	r3, [r7, #4]
    6b44:	0e1b      	lsrs	r3, r3, #24
    6b46:	b2da      	uxtb	r2, r3
    6b48:	2314      	movs	r3, #20
    6b4a:	18fb      	adds	r3, r7, r3
    6b4c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	0c1b      	lsrs	r3, r3, #16
    6b52:	b2da      	uxtb	r2, r3
    6b54:	2314      	movs	r3, #20
    6b56:	18fb      	adds	r3, r7, r3
    6b58:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    6b5a:	687b      	ldr	r3, [r7, #4]
    6b5c:	0a1b      	lsrs	r3, r3, #8
    6b5e:	b2da      	uxtb	r2, r3
    6b60:	2314      	movs	r3, #20
    6b62:	18fb      	adds	r3, r7, r3
    6b64:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    6b66:	687b      	ldr	r3, [r7, #4]
    6b68:	b2da      	uxtb	r2, r3
    6b6a:	2314      	movs	r3, #20
    6b6c:	18fb      	adds	r3, r7, r3
    6b6e:	71da      	strb	r2, [r3, #7]
		len = 9;
    6b70:	231f      	movs	r3, #31
    6b72:	18fb      	adds	r3, r7, r3
    6b74:	2209      	movs	r2, #9
    6b76:	701a      	strb	r2, [r3, #0]
		break;
    6b78:	e004      	b.n	6b84 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    6b7a:	231e      	movs	r3, #30
    6b7c:	18fb      	adds	r3, r7, r3
    6b7e:	2200      	movs	r2, #0
    6b80:	701a      	strb	r2, [r3, #0]
		break;
    6b82:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    6b84:	231e      	movs	r3, #30
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	781b      	ldrb	r3, [r3, #0]
    6b8a:	b25b      	sxtb	r3, r3
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d03e      	beq.n	6c0e <spi_cmd+0x30a>
		if (!gu8Crc_off)
    6b90:	4b24      	ldr	r3, [pc, #144]	; (6c24 <spi_cmd+0x320>)
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	2b00      	cmp	r3, #0
    6b96:	d115      	bne.n	6bc4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    6b98:	231f      	movs	r3, #31
    6b9a:	18fb      	adds	r3, r7, r3
    6b9c:	781b      	ldrb	r3, [r3, #0]
    6b9e:	1e5c      	subs	r4, r3, #1
    6ba0:	231f      	movs	r3, #31
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	3b01      	subs	r3, #1
    6ba8:	001a      	movs	r2, r3
    6baa:	2314      	movs	r3, #20
    6bac:	18fb      	adds	r3, r7, r3
    6bae:	0019      	movs	r1, r3
    6bb0:	207f      	movs	r0, #127	; 0x7f
    6bb2:	4b1d      	ldr	r3, [pc, #116]	; (6c28 <spi_cmd+0x324>)
    6bb4:	4798      	blx	r3
    6bb6:	0003      	movs	r3, r0
    6bb8:	18db      	adds	r3, r3, r3
    6bba:	b2da      	uxtb	r2, r3
    6bbc:	2314      	movs	r3, #20
    6bbe:	18fb      	adds	r3, r7, r3
    6bc0:	551a      	strb	r2, [r3, r4]
    6bc2:	e006      	b.n	6bd2 <spi_cmd+0x2ce>
		else
			len-=1;
    6bc4:	231f      	movs	r3, #31
    6bc6:	18fb      	adds	r3, r7, r3
    6bc8:	221f      	movs	r2, #31
    6bca:	18ba      	adds	r2, r7, r2
    6bcc:	7812      	ldrb	r2, [r2, #0]
    6bce:	3a01      	subs	r2, #1
    6bd0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    6bd2:	231f      	movs	r3, #31
    6bd4:	18fb      	adds	r3, r7, r3
    6bd6:	781b      	ldrb	r3, [r3, #0]
    6bd8:	b29a      	uxth	r2, r3
    6bda:	2314      	movs	r3, #20
    6bdc:	18fb      	adds	r3, r7, r3
    6bde:	0011      	movs	r1, r2
    6be0:	0018      	movs	r0, r3
    6be2:	4b12      	ldr	r3, [pc, #72]	; (6c2c <spi_cmd+0x328>)
    6be4:	4798      	blx	r3
    6be6:	1e03      	subs	r3, r0, #0
    6be8:	d011      	beq.n	6c0e <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    6bea:	2384      	movs	r3, #132	; 0x84
    6bec:	005a      	lsls	r2, r3, #1
    6bee:	4910      	ldr	r1, [pc, #64]	; (6c30 <spi_cmd+0x32c>)
    6bf0:	4b10      	ldr	r3, [pc, #64]	; (6c34 <spi_cmd+0x330>)
    6bf2:	0018      	movs	r0, r3
    6bf4:	4b10      	ldr	r3, [pc, #64]	; (6c38 <spi_cmd+0x334>)
    6bf6:	4798      	blx	r3
    6bf8:	4b10      	ldr	r3, [pc, #64]	; (6c3c <spi_cmd+0x338>)
    6bfa:	0018      	movs	r0, r3
    6bfc:	4b10      	ldr	r3, [pc, #64]	; (6c40 <spi_cmd+0x33c>)
    6bfe:	4798      	blx	r3
    6c00:	200d      	movs	r0, #13
    6c02:	4b10      	ldr	r3, [pc, #64]	; (6c44 <spi_cmd+0x340>)
    6c04:	4798      	blx	r3
			result = N_FAIL;
    6c06:	231e      	movs	r3, #30
    6c08:	18fb      	adds	r3, r7, r3
    6c0a:	2200      	movs	r2, #0
    6c0c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    6c0e:	231e      	movs	r3, #30
    6c10:	18fb      	adds	r3, r7, r3
    6c12:	781b      	ldrb	r3, [r3, #0]
    6c14:	b25b      	sxtb	r3, r3
}
    6c16:	0018      	movs	r0, r3
    6c18:	46bd      	mov	sp, r7
    6c1a:	b009      	add	sp, #36	; 0x24
    6c1c:	bd90      	pop	{r4, r7, pc}
    6c1e:	46c0      	nop			; (mov r8, r8)
    6c20:	00013ac0 	.word	0x00013ac0
    6c24:	200000f8 	.word	0x200000f8
    6c28:	000068b5 	.word	0x000068b5
    6c2c:	00006841 	.word	0x00006841
    6c30:	00013afc 	.word	0x00013afc
    6c34:	00013608 	.word	0x00013608
    6c38:	000114d9 	.word	0x000114d9
    6c3c:	0001361c 	.word	0x0001361c
    6c40:	000115f9 	.word	0x000115f9
    6c44:	0001150d 	.word	0x0001150d

00006c48 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b084      	sub	sp, #16
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	0002      	movs	r2, r0
    6c50:	1dfb      	adds	r3, r7, #7
    6c52:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    6c54:	230f      	movs	r3, #15
    6c56:	18fb      	adds	r3, r7, r3
    6c58:	2201      	movs	r2, #1
    6c5a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    6c5c:	1dfb      	adds	r3, r7, #7
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	2bcf      	cmp	r3, #207	; 0xcf
    6c62:	d007      	beq.n	6c74 <spi_cmd_rsp+0x2c>
    6c64:	1dfb      	adds	r3, r7, #7
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	2bc5      	cmp	r3, #197	; 0xc5
    6c6a:	d003      	beq.n	6c74 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    6c6c:	1dfb      	adds	r3, r7, #7
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	2bc6      	cmp	r3, #198	; 0xc6
    6c72:	d10c      	bne.n	6c8e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6c74:	230d      	movs	r3, #13
    6c76:	18fb      	adds	r3, r7, r3
    6c78:	2101      	movs	r1, #1
    6c7a:	0018      	movs	r0, r3
    6c7c:	4b3a      	ldr	r3, [pc, #232]	; (6d68 <spi_cmd_rsp+0x120>)
    6c7e:	4798      	blx	r3
    6c80:	1e03      	subs	r3, r0, #0
    6c82:	d004      	beq.n	6c8e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    6c84:	230f      	movs	r3, #15
    6c86:	18fb      	adds	r3, r7, r3
    6c88:	2200      	movs	r2, #0
    6c8a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6c8c:	e063      	b.n	6d56 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    6c8e:	230e      	movs	r3, #14
    6c90:	18fb      	adds	r3, r7, r3
    6c92:	220a      	movs	r2, #10
    6c94:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6c96:	230d      	movs	r3, #13
    6c98:	18fb      	adds	r3, r7, r3
    6c9a:	2101      	movs	r1, #1
    6c9c:	0018      	movs	r0, r3
    6c9e:	4b32      	ldr	r3, [pc, #200]	; (6d68 <spi_cmd_rsp+0x120>)
    6ca0:	4798      	blx	r3
    6ca2:	1e03      	subs	r3, r0, #0
    6ca4:	d013      	beq.n	6cce <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6ca6:	2328      	movs	r3, #40	; 0x28
    6ca8:	33ff      	adds	r3, #255	; 0xff
    6caa:	001a      	movs	r2, r3
    6cac:	492f      	ldr	r1, [pc, #188]	; (6d6c <spi_cmd_rsp+0x124>)
    6cae:	4b30      	ldr	r3, [pc, #192]	; (6d70 <spi_cmd_rsp+0x128>)
    6cb0:	0018      	movs	r0, r3
    6cb2:	4b30      	ldr	r3, [pc, #192]	; (6d74 <spi_cmd_rsp+0x12c>)
    6cb4:	4798      	blx	r3
    6cb6:	4b30      	ldr	r3, [pc, #192]	; (6d78 <spi_cmd_rsp+0x130>)
    6cb8:	0018      	movs	r0, r3
    6cba:	4b30      	ldr	r3, [pc, #192]	; (6d7c <spi_cmd_rsp+0x134>)
    6cbc:	4798      	blx	r3
    6cbe:	200d      	movs	r0, #13
    6cc0:	4b2f      	ldr	r3, [pc, #188]	; (6d80 <spi_cmd_rsp+0x138>)
    6cc2:	4798      	blx	r3
			result = N_FAIL;
    6cc4:	230f      	movs	r3, #15
    6cc6:	18fb      	adds	r3, r7, r3
    6cc8:	2200      	movs	r2, #0
    6cca:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6ccc:	e043      	b.n	6d56 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    6cce:	230d      	movs	r3, #13
    6cd0:	18fb      	adds	r3, r7, r3
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	1dfa      	adds	r2, r7, #7
    6cd6:	7812      	ldrb	r2, [r2, #0]
    6cd8:	429a      	cmp	r2, r3
    6cda:	d00b      	beq.n	6cf4 <spi_cmd_rsp+0xac>
    6cdc:	230e      	movs	r3, #14
    6cde:	18fb      	adds	r3, r7, r3
    6ce0:	781b      	ldrb	r3, [r3, #0]
    6ce2:	b25b      	sxtb	r3, r3
    6ce4:	b2da      	uxtb	r2, r3
    6ce6:	3a01      	subs	r2, #1
    6ce8:	b2d1      	uxtb	r1, r2
    6cea:	220e      	movs	r2, #14
    6cec:	18ba      	adds	r2, r7, r2
    6cee:	7011      	strb	r1, [r2, #0]
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	dcd0      	bgt.n	6c96 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    6cf4:	230e      	movs	r3, #14
    6cf6:	18fb      	adds	r3, r7, r3
    6cf8:	220a      	movs	r2, #10
    6cfa:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6cfc:	230d      	movs	r3, #13
    6cfe:	18fb      	adds	r3, r7, r3
    6d00:	2101      	movs	r1, #1
    6d02:	0018      	movs	r0, r3
    6d04:	4b18      	ldr	r3, [pc, #96]	; (6d68 <spi_cmd_rsp+0x120>)
    6d06:	4798      	blx	r3
    6d08:	1e03      	subs	r3, r0, #0
    6d0a:	d013      	beq.n	6d34 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    6d0c:	2336      	movs	r3, #54	; 0x36
    6d0e:	33ff      	adds	r3, #255	; 0xff
    6d10:	001a      	movs	r2, r3
    6d12:	4916      	ldr	r1, [pc, #88]	; (6d6c <spi_cmd_rsp+0x124>)
    6d14:	4b16      	ldr	r3, [pc, #88]	; (6d70 <spi_cmd_rsp+0x128>)
    6d16:	0018      	movs	r0, r3
    6d18:	4b16      	ldr	r3, [pc, #88]	; (6d74 <spi_cmd_rsp+0x12c>)
    6d1a:	4798      	blx	r3
    6d1c:	4b16      	ldr	r3, [pc, #88]	; (6d78 <spi_cmd_rsp+0x130>)
    6d1e:	0018      	movs	r0, r3
    6d20:	4b16      	ldr	r3, [pc, #88]	; (6d7c <spi_cmd_rsp+0x134>)
    6d22:	4798      	blx	r3
    6d24:	200d      	movs	r0, #13
    6d26:	4b16      	ldr	r3, [pc, #88]	; (6d80 <spi_cmd_rsp+0x138>)
    6d28:	4798      	blx	r3
			result = N_FAIL;
    6d2a:	230f      	movs	r3, #15
    6d2c:	18fb      	adds	r3, r7, r3
    6d2e:	2200      	movs	r2, #0
    6d30:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    6d32:	e010      	b.n	6d56 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    6d34:	230d      	movs	r3, #13
    6d36:	18fb      	adds	r3, r7, r3
    6d38:	781b      	ldrb	r3, [r3, #0]
    6d3a:	2b00      	cmp	r3, #0
    6d3c:	d00b      	beq.n	6d56 <spi_cmd_rsp+0x10e>
    6d3e:	230e      	movs	r3, #14
    6d40:	18fb      	adds	r3, r7, r3
    6d42:	781b      	ldrb	r3, [r3, #0]
    6d44:	b25b      	sxtb	r3, r3
    6d46:	b2da      	uxtb	r2, r3
    6d48:	3a01      	subs	r2, #1
    6d4a:	b2d1      	uxtb	r1, r2
    6d4c:	220e      	movs	r2, #14
    6d4e:	18ba      	adds	r2, r7, r2
    6d50:	7011      	strb	r1, [r2, #0]
    6d52:	2b00      	cmp	r3, #0
    6d54:	dcd2      	bgt.n	6cfc <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    6d56:	230f      	movs	r3, #15
    6d58:	18fb      	adds	r3, r7, r3
    6d5a:	781b      	ldrb	r3, [r3, #0]
    6d5c:	b25b      	sxtb	r3, r3
}
    6d5e:	0018      	movs	r0, r3
    6d60:	46bd      	mov	sp, r7
    6d62:	b004      	add	sp, #16
    6d64:	bd80      	pop	{r7, pc}
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	000067fd 	.word	0x000067fd
    6d6c:	00013b04 	.word	0x00013b04
    6d70:	00013608 	.word	0x00013608
    6d74:	000114d9 	.word	0x000114d9
    6d78:	00013648 	.word	0x00013648
    6d7c:	000115f9 	.word	0x000115f9
    6d80:	0001150d 	.word	0x0001150d

00006d84 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    6d84:	b580      	push	{r7, lr}
    6d86:	b086      	sub	sp, #24
    6d88:	af00      	add	r7, sp, #0
    6d8a:	6078      	str	r0, [r7, #4]
    6d8c:	0008      	movs	r0, r1
    6d8e:	0011      	movs	r1, r2
    6d90:	1cbb      	adds	r3, r7, #2
    6d92:	1c02      	adds	r2, r0, #0
    6d94:	801a      	strh	r2, [r3, #0]
    6d96:	1c7b      	adds	r3, r7, #1
    6d98:	1c0a      	adds	r2, r1, #0
    6d9a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    6d9c:	2311      	movs	r3, #17
    6d9e:	18fb      	adds	r3, r7, r3
    6da0:	2201      	movs	r2, #1
    6da2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6da4:	2314      	movs	r3, #20
    6da6:	18fb      	adds	r3, r7, r3
    6da8:	2200      	movs	r2, #0
    6daa:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6dac:	1cbb      	adds	r3, r7, #2
    6dae:	881a      	ldrh	r2, [r3, #0]
    6db0:	2380      	movs	r3, #128	; 0x80
    6db2:	019b      	lsls	r3, r3, #6
    6db4:	429a      	cmp	r2, r3
    6db6:	d805      	bhi.n	6dc4 <spi_data_read+0x40>
			nbytes = sz;
    6db8:	2312      	movs	r3, #18
    6dba:	18fb      	adds	r3, r7, r3
    6dbc:	1cba      	adds	r2, r7, #2
    6dbe:	8812      	ldrh	r2, [r2, #0]
    6dc0:	801a      	strh	r2, [r3, #0]
    6dc2:	e004      	b.n	6dce <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    6dc4:	2312      	movs	r3, #18
    6dc6:	18fb      	adds	r3, r7, r3
    6dc8:	2280      	movs	r2, #128	; 0x80
    6dca:	0192      	lsls	r2, r2, #6
    6dcc:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    6dce:	2316      	movs	r3, #22
    6dd0:	18fb      	adds	r3, r7, r3
    6dd2:	220a      	movs	r2, #10
    6dd4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    6dd6:	230b      	movs	r3, #11
    6dd8:	18fb      	adds	r3, r7, r3
    6dda:	2101      	movs	r1, #1
    6ddc:	0018      	movs	r0, r3
    6dde:	4b5f      	ldr	r3, [pc, #380]	; (6f5c <spi_data_read+0x1d8>)
    6de0:	4798      	blx	r3
    6de2:	1e03      	subs	r3, r0, #0
    6de4:	d013      	beq.n	6e0e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    6de6:	2358      	movs	r3, #88	; 0x58
    6de8:	33ff      	adds	r3, #255	; 0xff
    6dea:	001a      	movs	r2, r3
    6dec:	495c      	ldr	r1, [pc, #368]	; (6f60 <spi_data_read+0x1dc>)
    6dee:	4b5d      	ldr	r3, [pc, #372]	; (6f64 <spi_data_read+0x1e0>)
    6df0:	0018      	movs	r0, r3
    6df2:	4b5d      	ldr	r3, [pc, #372]	; (6f68 <spi_data_read+0x1e4>)
    6df4:	4798      	blx	r3
    6df6:	4b5d      	ldr	r3, [pc, #372]	; (6f6c <spi_data_read+0x1e8>)
    6df8:	0018      	movs	r0, r3
    6dfa:	4b5d      	ldr	r3, [pc, #372]	; (6f70 <spi_data_read+0x1ec>)
    6dfc:	4798      	blx	r3
    6dfe:	200d      	movs	r0, #13
    6e00:	4b5c      	ldr	r3, [pc, #368]	; (6f74 <spi_data_read+0x1f0>)
    6e02:	4798      	blx	r3
				result = N_FAIL;
    6e04:	2311      	movs	r3, #17
    6e06:	18fb      	adds	r3, r7, r3
    6e08:	2200      	movs	r2, #0
    6e0a:	701a      	strb	r2, [r3, #0]
				break;
    6e0c:	e017      	b.n	6e3e <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    6e0e:	230b      	movs	r3, #11
    6e10:	18fb      	adds	r3, r7, r3
    6e12:	781b      	ldrb	r3, [r3, #0]
    6e14:	091b      	lsrs	r3, r3, #4
    6e16:	b2db      	uxtb	r3, r3
    6e18:	001a      	movs	r2, r3
    6e1a:	230f      	movs	r3, #15
    6e1c:	4013      	ands	r3, r2
    6e1e:	2b0f      	cmp	r3, #15
    6e20:	d00c      	beq.n	6e3c <spi_data_read+0xb8>
				break;
		} while (retry--);
    6e22:	2316      	movs	r3, #22
    6e24:	18fb      	adds	r3, r7, r3
    6e26:	2200      	movs	r2, #0
    6e28:	5e9b      	ldrsh	r3, [r3, r2]
    6e2a:	b29a      	uxth	r2, r3
    6e2c:	3a01      	subs	r2, #1
    6e2e:	b291      	uxth	r1, r2
    6e30:	2216      	movs	r2, #22
    6e32:	18ba      	adds	r2, r7, r2
    6e34:	8011      	strh	r1, [r2, #0]
    6e36:	2b00      	cmp	r3, #0
    6e38:	d1cd      	bne.n	6dd6 <spi_data_read+0x52>
    6e3a:	e000      	b.n	6e3e <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    6e3c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    6e3e:	2311      	movs	r3, #17
    6e40:	18fb      	adds	r3, r7, r3
    6e42:	781b      	ldrb	r3, [r3, #0]
    6e44:	b25b      	sxtb	r3, r3
    6e46:	2b00      	cmp	r3, #0
    6e48:	d100      	bne.n	6e4c <spi_data_read+0xc8>
    6e4a:	e07d      	b.n	6f48 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    6e4c:	2316      	movs	r3, #22
    6e4e:	18fb      	adds	r3, r7, r3
    6e50:	2200      	movs	r2, #0
    6e52:	5e9b      	ldrsh	r3, [r3, r2]
    6e54:	2b00      	cmp	r3, #0
    6e56:	dc18      	bgt.n	6e8a <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    6e58:	2364      	movs	r3, #100	; 0x64
    6e5a:	33ff      	adds	r3, #255	; 0xff
    6e5c:	001a      	movs	r2, r3
    6e5e:	4940      	ldr	r1, [pc, #256]	; (6f60 <spi_data_read+0x1dc>)
    6e60:	4b40      	ldr	r3, [pc, #256]	; (6f64 <spi_data_read+0x1e0>)
    6e62:	0018      	movs	r0, r3
    6e64:	4b40      	ldr	r3, [pc, #256]	; (6f68 <spi_data_read+0x1e4>)
    6e66:	4798      	blx	r3
    6e68:	230b      	movs	r3, #11
    6e6a:	18fb      	adds	r3, r7, r3
    6e6c:	781b      	ldrb	r3, [r3, #0]
    6e6e:	001a      	movs	r2, r3
    6e70:	4b41      	ldr	r3, [pc, #260]	; (6f78 <spi_data_read+0x1f4>)
    6e72:	0011      	movs	r1, r2
    6e74:	0018      	movs	r0, r3
    6e76:	4b3c      	ldr	r3, [pc, #240]	; (6f68 <spi_data_read+0x1e4>)
    6e78:	4798      	blx	r3
    6e7a:	200d      	movs	r0, #13
    6e7c:	4b3d      	ldr	r3, [pc, #244]	; (6f74 <spi_data_read+0x1f0>)
    6e7e:	4798      	blx	r3
			result = N_FAIL;
    6e80:	2311      	movs	r3, #17
    6e82:	18fb      	adds	r3, r7, r3
    6e84:	2200      	movs	r2, #0
    6e86:	701a      	strb	r2, [r3, #0]
			break;
    6e88:	e05f      	b.n	6f4a <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    6e8a:	2314      	movs	r3, #20
    6e8c:	18fb      	adds	r3, r7, r3
    6e8e:	2200      	movs	r2, #0
    6e90:	5e9b      	ldrsh	r3, [r3, r2]
    6e92:	687a      	ldr	r2, [r7, #4]
    6e94:	18d2      	adds	r2, r2, r3
    6e96:	2312      	movs	r3, #18
    6e98:	18fb      	adds	r3, r7, r3
    6e9a:	881b      	ldrh	r3, [r3, #0]
    6e9c:	0019      	movs	r1, r3
    6e9e:	0010      	movs	r0, r2
    6ea0:	4b2e      	ldr	r3, [pc, #184]	; (6f5c <spi_data_read+0x1d8>)
    6ea2:	4798      	blx	r3
    6ea4:	1e03      	subs	r3, r0, #0
    6ea6:	d012      	beq.n	6ece <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    6ea8:	23b6      	movs	r3, #182	; 0xb6
    6eaa:	005a      	lsls	r2, r3, #1
    6eac:	492c      	ldr	r1, [pc, #176]	; (6f60 <spi_data_read+0x1dc>)
    6eae:	4b2d      	ldr	r3, [pc, #180]	; (6f64 <spi_data_read+0x1e0>)
    6eb0:	0018      	movs	r0, r3
    6eb2:	4b2d      	ldr	r3, [pc, #180]	; (6f68 <spi_data_read+0x1e4>)
    6eb4:	4798      	blx	r3
    6eb6:	4b31      	ldr	r3, [pc, #196]	; (6f7c <spi_data_read+0x1f8>)
    6eb8:	0018      	movs	r0, r3
    6eba:	4b2d      	ldr	r3, [pc, #180]	; (6f70 <spi_data_read+0x1ec>)
    6ebc:	4798      	blx	r3
    6ebe:	200d      	movs	r0, #13
    6ec0:	4b2c      	ldr	r3, [pc, #176]	; (6f74 <spi_data_read+0x1f0>)
    6ec2:	4798      	blx	r3
			result = N_FAIL;
    6ec4:	2311      	movs	r3, #17
    6ec6:	18fb      	adds	r3, r7, r3
    6ec8:	2200      	movs	r2, #0
    6eca:	701a      	strb	r2, [r3, #0]
			break;
    6ecc:	e03d      	b.n	6f4a <spi_data_read+0x1c6>
		}
		if(!clockless)
    6ece:	1c7b      	adds	r3, r7, #1
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	d11f      	bne.n	6f16 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    6ed6:	4b2a      	ldr	r3, [pc, #168]	; (6f80 <spi_data_read+0x1fc>)
    6ed8:	781b      	ldrb	r3, [r3, #0]
    6eda:	2b00      	cmp	r3, #0
    6edc:	d11b      	bne.n	6f16 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    6ede:	230c      	movs	r3, #12
    6ee0:	18fb      	adds	r3, r7, r3
    6ee2:	2102      	movs	r1, #2
    6ee4:	0018      	movs	r0, r3
    6ee6:	4b1d      	ldr	r3, [pc, #116]	; (6f5c <spi_data_read+0x1d8>)
    6ee8:	4798      	blx	r3
    6eea:	1e03      	subs	r3, r0, #0
    6eec:	d013      	beq.n	6f16 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    6eee:	2378      	movs	r3, #120	; 0x78
    6ef0:	33ff      	adds	r3, #255	; 0xff
    6ef2:	001a      	movs	r2, r3
    6ef4:	491a      	ldr	r1, [pc, #104]	; (6f60 <spi_data_read+0x1dc>)
    6ef6:	4b1b      	ldr	r3, [pc, #108]	; (6f64 <spi_data_read+0x1e0>)
    6ef8:	0018      	movs	r0, r3
    6efa:	4b1b      	ldr	r3, [pc, #108]	; (6f68 <spi_data_read+0x1e4>)
    6efc:	4798      	blx	r3
    6efe:	4b21      	ldr	r3, [pc, #132]	; (6f84 <spi_data_read+0x200>)
    6f00:	0018      	movs	r0, r3
    6f02:	4b1b      	ldr	r3, [pc, #108]	; (6f70 <spi_data_read+0x1ec>)
    6f04:	4798      	blx	r3
    6f06:	200d      	movs	r0, #13
    6f08:	4b1a      	ldr	r3, [pc, #104]	; (6f74 <spi_data_read+0x1f0>)
    6f0a:	4798      	blx	r3
					result = N_FAIL;
    6f0c:	2311      	movs	r3, #17
    6f0e:	18fb      	adds	r3, r7, r3
    6f10:	2200      	movs	r2, #0
    6f12:	701a      	strb	r2, [r3, #0]
					break;
    6f14:	e019      	b.n	6f4a <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    6f16:	2314      	movs	r3, #20
    6f18:	18fb      	adds	r3, r7, r3
    6f1a:	881a      	ldrh	r2, [r3, #0]
    6f1c:	2312      	movs	r3, #18
    6f1e:	18fb      	adds	r3, r7, r3
    6f20:	881b      	ldrh	r3, [r3, #0]
    6f22:	18d3      	adds	r3, r2, r3
    6f24:	b29a      	uxth	r2, r3
    6f26:	2314      	movs	r3, #20
    6f28:	18fb      	adds	r3, r7, r3
    6f2a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    6f2c:	2312      	movs	r3, #18
    6f2e:	18fb      	adds	r3, r7, r3
    6f30:	881a      	ldrh	r2, [r3, #0]
    6f32:	1cbb      	adds	r3, r7, #2
    6f34:	1cb9      	adds	r1, r7, #2
    6f36:	8809      	ldrh	r1, [r1, #0]
    6f38:	1a8a      	subs	r2, r1, r2
    6f3a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    6f3c:	1cbb      	adds	r3, r7, #2
    6f3e:	881b      	ldrh	r3, [r3, #0]
    6f40:	2b00      	cmp	r3, #0
    6f42:	d000      	beq.n	6f46 <spi_data_read+0x1c2>
    6f44:	e732      	b.n	6dac <spi_data_read+0x28>
    6f46:	e000      	b.n	6f4a <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    6f48:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    6f4a:	2311      	movs	r3, #17
    6f4c:	18fb      	adds	r3, r7, r3
    6f4e:	781b      	ldrb	r3, [r3, #0]
    6f50:	b25b      	sxtb	r3, r3
}
    6f52:	0018      	movs	r0, r3
    6f54:	46bd      	mov	sp, r7
    6f56:	b006      	add	sp, #24
    6f58:	bd80      	pop	{r7, pc}
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	000067fd 	.word	0x000067fd
    6f60:	00013b10 	.word	0x00013b10
    6f64:	00013608 	.word	0x00013608
    6f68:	000114d9 	.word	0x000114d9
    6f6c:	0001367c 	.word	0x0001367c
    6f70:	000115f9 	.word	0x000115f9
    6f74:	0001150d 	.word	0x0001150d
    6f78:	000136b0 	.word	0x000136b0
    6f7c:	000136e0 	.word	0x000136e0
    6f80:	200000f8 	.word	0x200000f8
    6f84:	00013710 	.word	0x00013710

00006f88 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    6f88:	b580      	push	{r7, lr}
    6f8a:	b086      	sub	sp, #24
    6f8c:	af00      	add	r7, sp, #0
    6f8e:	6078      	str	r0, [r7, #4]
    6f90:	000a      	movs	r2, r1
    6f92:	1cbb      	adds	r3, r7, #2
    6f94:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    6f96:	2313      	movs	r3, #19
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	2201      	movs	r2, #1
    6f9c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    6f9e:	230c      	movs	r3, #12
    6fa0:	18fb      	adds	r3, r7, r3
    6fa2:	2200      	movs	r2, #0
    6fa4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    6fa6:	2316      	movs	r3, #22
    6fa8:	18fb      	adds	r3, r7, r3
    6faa:	2200      	movs	r2, #0
    6fac:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    6fae:	1cbb      	adds	r3, r7, #2
    6fb0:	881a      	ldrh	r2, [r3, #0]
    6fb2:	2380      	movs	r3, #128	; 0x80
    6fb4:	019b      	lsls	r3, r3, #6
    6fb6:	429a      	cmp	r2, r3
    6fb8:	d805      	bhi.n	6fc6 <spi_data_write+0x3e>
			nbytes = sz;
    6fba:	2314      	movs	r3, #20
    6fbc:	18fb      	adds	r3, r7, r3
    6fbe:	1cba      	adds	r2, r7, #2
    6fc0:	8812      	ldrh	r2, [r2, #0]
    6fc2:	801a      	strh	r2, [r3, #0]
    6fc4:	e004      	b.n	6fd0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    6fc6:	2314      	movs	r3, #20
    6fc8:	18fb      	adds	r3, r7, r3
    6fca:	2280      	movs	r2, #128	; 0x80
    6fcc:	0192      	lsls	r2, r2, #6
    6fce:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    6fd0:	2311      	movs	r3, #17
    6fd2:	18fb      	adds	r3, r7, r3
    6fd4:	22f0      	movs	r2, #240	; 0xf0
    6fd6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    6fd8:	2316      	movs	r3, #22
    6fda:	18fb      	adds	r3, r7, r3
    6fdc:	2200      	movs	r2, #0
    6fde:	5e9b      	ldrsh	r3, [r3, r2]
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d10f      	bne.n	7004 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    6fe4:	1cbb      	adds	r3, r7, #2
    6fe6:	881a      	ldrh	r2, [r3, #0]
    6fe8:	2380      	movs	r3, #128	; 0x80
    6fea:	019b      	lsls	r3, r3, #6
    6fec:	429a      	cmp	r2, r3
    6fee:	d804      	bhi.n	6ffa <spi_data_write+0x72>
				order = 0x3;
    6ff0:	2312      	movs	r3, #18
    6ff2:	18fb      	adds	r3, r7, r3
    6ff4:	2203      	movs	r2, #3
    6ff6:	701a      	strb	r2, [r3, #0]
    6ff8:	e013      	b.n	7022 <spi_data_write+0x9a>
			else
				order = 0x1;
    6ffa:	2312      	movs	r3, #18
    6ffc:	18fb      	adds	r3, r7, r3
    6ffe:	2201      	movs	r2, #1
    7000:	701a      	strb	r2, [r3, #0]
    7002:	e00e      	b.n	7022 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    7004:	1cbb      	adds	r3, r7, #2
    7006:	881a      	ldrh	r2, [r3, #0]
    7008:	2380      	movs	r3, #128	; 0x80
    700a:	019b      	lsls	r3, r3, #6
    700c:	429a      	cmp	r2, r3
    700e:	d804      	bhi.n	701a <spi_data_write+0x92>
				order = 0x3;
    7010:	2312      	movs	r3, #18
    7012:	18fb      	adds	r3, r7, r3
    7014:	2203      	movs	r2, #3
    7016:	701a      	strb	r2, [r3, #0]
    7018:	e003      	b.n	7022 <spi_data_write+0x9a>
			else
				order = 0x2;
    701a:	2312      	movs	r3, #18
    701c:	18fb      	adds	r3, r7, r3
    701e:	2202      	movs	r2, #2
    7020:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    7022:	2311      	movs	r3, #17
    7024:	18fb      	adds	r3, r7, r3
    7026:	781a      	ldrb	r2, [r3, #0]
    7028:	2312      	movs	r3, #18
    702a:	18fb      	adds	r3, r7, r3
    702c:	781b      	ldrb	r3, [r3, #0]
    702e:	4313      	orrs	r3, r2
    7030:	b2da      	uxtb	r2, r3
    7032:	2311      	movs	r3, #17
    7034:	18fb      	adds	r3, r7, r3
    7036:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    7038:	2311      	movs	r3, #17
    703a:	18fb      	adds	r3, r7, r3
    703c:	2101      	movs	r1, #1
    703e:	0018      	movs	r0, r3
    7040:	4b3c      	ldr	r3, [pc, #240]	; (7134 <spi_data_write+0x1ac>)
    7042:	4798      	blx	r3
    7044:	1e03      	subs	r3, r0, #0
    7046:	d012      	beq.n	706e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    7048:	23d4      	movs	r3, #212	; 0xd4
    704a:	005a      	lsls	r2, r3, #1
    704c:	493a      	ldr	r1, [pc, #232]	; (7138 <spi_data_write+0x1b0>)
    704e:	4b3b      	ldr	r3, [pc, #236]	; (713c <spi_data_write+0x1b4>)
    7050:	0018      	movs	r0, r3
    7052:	4b3b      	ldr	r3, [pc, #236]	; (7140 <spi_data_write+0x1b8>)
    7054:	4798      	blx	r3
    7056:	4b3b      	ldr	r3, [pc, #236]	; (7144 <spi_data_write+0x1bc>)
    7058:	0018      	movs	r0, r3
    705a:	4b3b      	ldr	r3, [pc, #236]	; (7148 <spi_data_write+0x1c0>)
    705c:	4798      	blx	r3
    705e:	200d      	movs	r0, #13
    7060:	4b3a      	ldr	r3, [pc, #232]	; (714c <spi_data_write+0x1c4>)
    7062:	4798      	blx	r3
			result = N_FAIL;
    7064:	2313      	movs	r3, #19
    7066:	18fb      	adds	r3, r7, r3
    7068:	2200      	movs	r2, #0
    706a:	701a      	strb	r2, [r3, #0]
			break;
    706c:	e05a      	b.n	7124 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    706e:	2316      	movs	r3, #22
    7070:	18fb      	adds	r3, r7, r3
    7072:	2200      	movs	r2, #0
    7074:	5e9b      	ldrsh	r3, [r3, r2]
    7076:	687a      	ldr	r2, [r7, #4]
    7078:	18d2      	adds	r2, r2, r3
    707a:	2314      	movs	r3, #20
    707c:	18fb      	adds	r3, r7, r3
    707e:	881b      	ldrh	r3, [r3, #0]
    7080:	0019      	movs	r1, r3
    7082:	0010      	movs	r0, r2
    7084:	4b2b      	ldr	r3, [pc, #172]	; (7134 <spi_data_write+0x1ac>)
    7086:	4798      	blx	r3
    7088:	1e03      	subs	r3, r0, #0
    708a:	d013      	beq.n	70b4 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    708c:	23b2      	movs	r3, #178	; 0xb2
    708e:	33ff      	adds	r3, #255	; 0xff
    7090:	001a      	movs	r2, r3
    7092:	4929      	ldr	r1, [pc, #164]	; (7138 <spi_data_write+0x1b0>)
    7094:	4b29      	ldr	r3, [pc, #164]	; (713c <spi_data_write+0x1b4>)
    7096:	0018      	movs	r0, r3
    7098:	4b29      	ldr	r3, [pc, #164]	; (7140 <spi_data_write+0x1b8>)
    709a:	4798      	blx	r3
    709c:	4b2c      	ldr	r3, [pc, #176]	; (7150 <spi_data_write+0x1c8>)
    709e:	0018      	movs	r0, r3
    70a0:	4b29      	ldr	r3, [pc, #164]	; (7148 <spi_data_write+0x1c0>)
    70a2:	4798      	blx	r3
    70a4:	200d      	movs	r0, #13
    70a6:	4b29      	ldr	r3, [pc, #164]	; (714c <spi_data_write+0x1c4>)
    70a8:	4798      	blx	r3
			result = N_FAIL;
    70aa:	2313      	movs	r3, #19
    70ac:	18fb      	adds	r3, r7, r3
    70ae:	2200      	movs	r2, #0
    70b0:	701a      	strb	r2, [r3, #0]
			break;
    70b2:	e037      	b.n	7124 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    70b4:	4b27      	ldr	r3, [pc, #156]	; (7154 <spi_data_write+0x1cc>)
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	2b00      	cmp	r3, #0
    70ba:	d11b      	bne.n	70f4 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    70bc:	230c      	movs	r3, #12
    70be:	18fb      	adds	r3, r7, r3
    70c0:	2102      	movs	r1, #2
    70c2:	0018      	movs	r0, r3
    70c4:	4b1b      	ldr	r3, [pc, #108]	; (7134 <spi_data_write+0x1ac>)
    70c6:	4798      	blx	r3
    70c8:	1e03      	subs	r3, r0, #0
    70ca:	d013      	beq.n	70f4 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    70cc:	23bc      	movs	r3, #188	; 0xbc
    70ce:	33ff      	adds	r3, #255	; 0xff
    70d0:	001a      	movs	r2, r3
    70d2:	4919      	ldr	r1, [pc, #100]	; (7138 <spi_data_write+0x1b0>)
    70d4:	4b19      	ldr	r3, [pc, #100]	; (713c <spi_data_write+0x1b4>)
    70d6:	0018      	movs	r0, r3
    70d8:	4b19      	ldr	r3, [pc, #100]	; (7140 <spi_data_write+0x1b8>)
    70da:	4798      	blx	r3
    70dc:	4b1e      	ldr	r3, [pc, #120]	; (7158 <spi_data_write+0x1d0>)
    70de:	0018      	movs	r0, r3
    70e0:	4b19      	ldr	r3, [pc, #100]	; (7148 <spi_data_write+0x1c0>)
    70e2:	4798      	blx	r3
    70e4:	200d      	movs	r0, #13
    70e6:	4b19      	ldr	r3, [pc, #100]	; (714c <spi_data_write+0x1c4>)
    70e8:	4798      	blx	r3
				result = N_FAIL;
    70ea:	2313      	movs	r3, #19
    70ec:	18fb      	adds	r3, r7, r3
    70ee:	2200      	movs	r2, #0
    70f0:	701a      	strb	r2, [r3, #0]
				break;
    70f2:	e017      	b.n	7124 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    70f4:	2316      	movs	r3, #22
    70f6:	18fb      	adds	r3, r7, r3
    70f8:	881a      	ldrh	r2, [r3, #0]
    70fa:	2314      	movs	r3, #20
    70fc:	18fb      	adds	r3, r7, r3
    70fe:	881b      	ldrh	r3, [r3, #0]
    7100:	18d3      	adds	r3, r2, r3
    7102:	b29a      	uxth	r2, r3
    7104:	2316      	movs	r3, #22
    7106:	18fb      	adds	r3, r7, r3
    7108:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    710a:	1cbb      	adds	r3, r7, #2
    710c:	1cb9      	adds	r1, r7, #2
    710e:	2214      	movs	r2, #20
    7110:	18ba      	adds	r2, r7, r2
    7112:	8809      	ldrh	r1, [r1, #0]
    7114:	8812      	ldrh	r2, [r2, #0]
    7116:	1a8a      	subs	r2, r1, r2
    7118:	801a      	strh	r2, [r3, #0]
	} while (sz);
    711a:	1cbb      	adds	r3, r7, #2
    711c:	881b      	ldrh	r3, [r3, #0]
    711e:	2b00      	cmp	r3, #0
    7120:	d000      	beq.n	7124 <spi_data_write+0x19c>
    7122:	e744      	b.n	6fae <spi_data_write+0x26>


	return result;
    7124:	2313      	movs	r3, #19
    7126:	18fb      	adds	r3, r7, r3
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	b25b      	sxtb	r3, r3
}
    712c:	0018      	movs	r0, r3
    712e:	46bd      	mov	sp, r7
    7130:	b006      	add	sp, #24
    7132:	bd80      	pop	{r7, pc}
    7134:	00006841 	.word	0x00006841
    7138:	00013b20 	.word	0x00013b20
    713c:	00013608 	.word	0x00013608
    7140:	000114d9 	.word	0x000114d9
    7144:	00013744 	.word	0x00013744
    7148:	000115f9 	.word	0x000115f9
    714c:	0001150d 	.word	0x0001150d
    7150:	0001377c 	.word	0x0001377c
    7154:	200000f8 	.word	0x200000f8
    7158:	000137b0 	.word	0x000137b0

0000715c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    715c:	b5b0      	push	{r4, r5, r7, lr}
    715e:	b086      	sub	sp, #24
    7160:	af02      	add	r7, sp, #8
    7162:	6078      	str	r0, [r7, #4]
    7164:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    7166:	230d      	movs	r3, #13
    7168:	18fb      	adds	r3, r7, r3
    716a:	2201      	movs	r2, #1
    716c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    716e:	230f      	movs	r3, #15
    7170:	18fb      	adds	r3, r7, r3
    7172:	22c9      	movs	r2, #201	; 0xc9
    7174:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    7176:	230e      	movs	r3, #14
    7178:	18fb      	adds	r3, r7, r3
    717a:	2200      	movs	r2, #0
    717c:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    717e:	687b      	ldr	r3, [r7, #4]
    7180:	2b30      	cmp	r3, #48	; 0x30
    7182:	d808      	bhi.n	7196 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    7184:	230f      	movs	r3, #15
    7186:	18fb      	adds	r3, r7, r3
    7188:	22c3      	movs	r2, #195	; 0xc3
    718a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    718c:	230e      	movs	r3, #14
    718e:	18fb      	adds	r3, r7, r3
    7190:	2201      	movs	r2, #1
    7192:	701a      	strb	r2, [r3, #0]
    7194:	e007      	b.n	71a6 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    7196:	230f      	movs	r3, #15
    7198:	18fb      	adds	r3, r7, r3
    719a:	22c9      	movs	r2, #201	; 0xc9
    719c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    719e:	230e      	movs	r3, #14
    71a0:	18fb      	adds	r3, r7, r3
    71a2:	2200      	movs	r2, #0
    71a4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    71a6:	230d      	movs	r3, #13
    71a8:	18fc      	adds	r4, r7, r3
    71aa:	683a      	ldr	r2, [r7, #0]
    71ac:	6879      	ldr	r1, [r7, #4]
    71ae:	230f      	movs	r3, #15
    71b0:	18fb      	adds	r3, r7, r3
    71b2:	7818      	ldrb	r0, [r3, #0]
    71b4:	230e      	movs	r3, #14
    71b6:	18fb      	adds	r3, r7, r3
    71b8:	781b      	ldrb	r3, [r3, #0]
    71ba:	9300      	str	r3, [sp, #0]
    71bc:	2304      	movs	r3, #4
    71be:	4d26      	ldr	r5, [pc, #152]	; (7258 <spi_write_reg+0xfc>)
    71c0:	47a8      	blx	r5
    71c2:	0003      	movs	r3, r0
    71c4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    71c6:	230d      	movs	r3, #13
    71c8:	18fb      	adds	r3, r7, r3
    71ca:	781b      	ldrb	r3, [r3, #0]
    71cc:	b25b      	sxtb	r3, r3
    71ce:	2b01      	cmp	r3, #1
    71d0:	d012      	beq.n	71f8 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    71d2:	23ec      	movs	r3, #236	; 0xec
    71d4:	33ff      	adds	r3, #255	; 0xff
    71d6:	001a      	movs	r2, r3
    71d8:	4920      	ldr	r1, [pc, #128]	; (725c <spi_write_reg+0x100>)
    71da:	4b21      	ldr	r3, [pc, #132]	; (7260 <spi_write_reg+0x104>)
    71dc:	0018      	movs	r0, r3
    71de:	4b21      	ldr	r3, [pc, #132]	; (7264 <spi_write_reg+0x108>)
    71e0:	4798      	blx	r3
    71e2:	687a      	ldr	r2, [r7, #4]
    71e4:	4b20      	ldr	r3, [pc, #128]	; (7268 <spi_write_reg+0x10c>)
    71e6:	0011      	movs	r1, r2
    71e8:	0018      	movs	r0, r3
    71ea:	4b1e      	ldr	r3, [pc, #120]	; (7264 <spi_write_reg+0x108>)
    71ec:	4798      	blx	r3
    71ee:	200d      	movs	r0, #13
    71f0:	4b1e      	ldr	r3, [pc, #120]	; (726c <spi_write_reg+0x110>)
    71f2:	4798      	blx	r3
		return N_FAIL;
    71f4:	2300      	movs	r3, #0
    71f6:	e02b      	b.n	7250 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    71f8:	230d      	movs	r3, #13
    71fa:	18fc      	adds	r4, r7, r3
    71fc:	230f      	movs	r3, #15
    71fe:	18fb      	adds	r3, r7, r3
    7200:	781b      	ldrb	r3, [r3, #0]
    7202:	0018      	movs	r0, r3
    7204:	4b1a      	ldr	r3, [pc, #104]	; (7270 <spi_write_reg+0x114>)
    7206:	4798      	blx	r3
    7208:	0003      	movs	r3, r0
    720a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    720c:	230d      	movs	r3, #13
    720e:	18fb      	adds	r3, r7, r3
    7210:	781b      	ldrb	r3, [r3, #0]
    7212:	b25b      	sxtb	r3, r3
    7214:	2b01      	cmp	r3, #1
    7216:	d01a      	beq.n	724e <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7218:	23f2      	movs	r3, #242	; 0xf2
    721a:	33ff      	adds	r3, #255	; 0xff
    721c:	001a      	movs	r2, r3
    721e:	490f      	ldr	r1, [pc, #60]	; (725c <spi_write_reg+0x100>)
    7220:	4b0f      	ldr	r3, [pc, #60]	; (7260 <spi_write_reg+0x104>)
    7222:	0018      	movs	r0, r3
    7224:	4b0f      	ldr	r3, [pc, #60]	; (7264 <spi_write_reg+0x108>)
    7226:	4798      	blx	r3
    7228:	687a      	ldr	r2, [r7, #4]
    722a:	4b12      	ldr	r3, [pc, #72]	; (7274 <spi_write_reg+0x118>)
    722c:	0011      	movs	r1, r2
    722e:	0018      	movs	r0, r3
    7230:	4b0c      	ldr	r3, [pc, #48]	; (7264 <spi_write_reg+0x108>)
    7232:	4798      	blx	r3
    7234:	200d      	movs	r0, #13
    7236:	4b0d      	ldr	r3, [pc, #52]	; (726c <spi_write_reg+0x110>)
    7238:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    723a:	2300      	movs	r3, #0
    723c:	9300      	str	r3, [sp, #0]
    723e:	2300      	movs	r3, #0
    7240:	2200      	movs	r2, #0
    7242:	2100      	movs	r1, #0
    7244:	20cf      	movs	r0, #207	; 0xcf
    7246:	4c04      	ldr	r4, [pc, #16]	; (7258 <spi_write_reg+0xfc>)
    7248:	47a0      	blx	r4
		return N_FAIL;
    724a:	2300      	movs	r3, #0
    724c:	e000      	b.n	7250 <spi_write_reg+0xf4>
	}

	return N_OK;
    724e:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    7250:	0018      	movs	r0, r3
    7252:	46bd      	mov	sp, r7
    7254:	b004      	add	sp, #16
    7256:	bdb0      	pop	{r4, r5, r7, pc}
    7258:	00006905 	.word	0x00006905
    725c:	00013b30 	.word	0x00013b30
    7260:	00013608 	.word	0x00013608
    7264:	000114d9 	.word	0x000114d9
    7268:	000137e8 	.word	0x000137e8
    726c:	0001150d 	.word	0x0001150d
    7270:	00006c49 	.word	0x00006c49
    7274:	00013814 	.word	0x00013814

00007278 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    7278:	b5b0      	push	{r4, r5, r7, lr}
    727a:	b088      	sub	sp, #32
    727c:	af02      	add	r7, sp, #8
    727e:	60f8      	str	r0, [r7, #12]
    7280:	60b9      	str	r1, [r7, #8]
    7282:	1dbb      	adds	r3, r7, #6
    7284:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    7286:	2317      	movs	r3, #23
    7288:	18fb      	adds	r3, r7, r3
    728a:	22c7      	movs	r2, #199	; 0xc7
    728c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    728e:	1dbb      	adds	r3, r7, #6
    7290:	881a      	ldrh	r2, [r3, #0]
    7292:	2316      	movs	r3, #22
    7294:	18fc      	adds	r4, r7, r3
    7296:	68f9      	ldr	r1, [r7, #12]
    7298:	2317      	movs	r3, #23
    729a:	18fb      	adds	r3, r7, r3
    729c:	7818      	ldrb	r0, [r3, #0]
    729e:	2300      	movs	r3, #0
    72a0:	9300      	str	r3, [sp, #0]
    72a2:	0013      	movs	r3, r2
    72a4:	2200      	movs	r2, #0
    72a6:	4d37      	ldr	r5, [pc, #220]	; (7384 <nm_spi_write+0x10c>)
    72a8:	47a8      	blx	r5
    72aa:	0003      	movs	r3, r0
    72ac:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    72ae:	2316      	movs	r3, #22
    72b0:	18fb      	adds	r3, r7, r3
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	b25b      	sxtb	r3, r3
    72b6:	2b01      	cmp	r3, #1
    72b8:	d010      	beq.n	72dc <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    72ba:	4a33      	ldr	r2, [pc, #204]	; (7388 <nm_spi_write+0x110>)
    72bc:	4933      	ldr	r1, [pc, #204]	; (738c <nm_spi_write+0x114>)
    72be:	4b34      	ldr	r3, [pc, #208]	; (7390 <nm_spi_write+0x118>)
    72c0:	0018      	movs	r0, r3
    72c2:	4b34      	ldr	r3, [pc, #208]	; (7394 <nm_spi_write+0x11c>)
    72c4:	4798      	blx	r3
    72c6:	68fa      	ldr	r2, [r7, #12]
    72c8:	4b33      	ldr	r3, [pc, #204]	; (7398 <nm_spi_write+0x120>)
    72ca:	0011      	movs	r1, r2
    72cc:	0018      	movs	r0, r3
    72ce:	4b31      	ldr	r3, [pc, #196]	; (7394 <nm_spi_write+0x11c>)
    72d0:	4798      	blx	r3
    72d2:	200d      	movs	r0, #13
    72d4:	4b31      	ldr	r3, [pc, #196]	; (739c <nm_spi_write+0x124>)
    72d6:	4798      	blx	r3
		return N_FAIL;
    72d8:	2300      	movs	r3, #0
    72da:	e04f      	b.n	737c <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    72dc:	2316      	movs	r3, #22
    72de:	18fc      	adds	r4, r7, r3
    72e0:	2317      	movs	r3, #23
    72e2:	18fb      	adds	r3, r7, r3
    72e4:	781b      	ldrb	r3, [r3, #0]
    72e6:	0018      	movs	r0, r3
    72e8:	4b2d      	ldr	r3, [pc, #180]	; (73a0 <nm_spi_write+0x128>)
    72ea:	4798      	blx	r3
    72ec:	0003      	movs	r3, r0
    72ee:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    72f0:	2316      	movs	r3, #22
    72f2:	18fb      	adds	r3, r7, r3
    72f4:	781b      	ldrb	r3, [r3, #0]
    72f6:	b25b      	sxtb	r3, r3
    72f8:	2b01      	cmp	r3, #1
    72fa:	d018      	beq.n	732e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    72fc:	4a29      	ldr	r2, [pc, #164]	; (73a4 <nm_spi_write+0x12c>)
    72fe:	4923      	ldr	r1, [pc, #140]	; (738c <nm_spi_write+0x114>)
    7300:	4b23      	ldr	r3, [pc, #140]	; (7390 <nm_spi_write+0x118>)
    7302:	0018      	movs	r0, r3
    7304:	4b23      	ldr	r3, [pc, #140]	; (7394 <nm_spi_write+0x11c>)
    7306:	4798      	blx	r3
    7308:	68fa      	ldr	r2, [r7, #12]
    730a:	4b27      	ldr	r3, [pc, #156]	; (73a8 <nm_spi_write+0x130>)
    730c:	0011      	movs	r1, r2
    730e:	0018      	movs	r0, r3
    7310:	4b20      	ldr	r3, [pc, #128]	; (7394 <nm_spi_write+0x11c>)
    7312:	4798      	blx	r3
    7314:	200d      	movs	r0, #13
    7316:	4b21      	ldr	r3, [pc, #132]	; (739c <nm_spi_write+0x124>)
    7318:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    731a:	2300      	movs	r3, #0
    731c:	9300      	str	r3, [sp, #0]
    731e:	2300      	movs	r3, #0
    7320:	2200      	movs	r2, #0
    7322:	2100      	movs	r1, #0
    7324:	20cf      	movs	r0, #207	; 0xcf
    7326:	4c17      	ldr	r4, [pc, #92]	; (7384 <nm_spi_write+0x10c>)
    7328:	47a0      	blx	r4
		return N_FAIL;
    732a:	2300      	movs	r3, #0
    732c:	e026      	b.n	737c <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    732e:	2316      	movs	r3, #22
    7330:	18fc      	adds	r4, r7, r3
    7332:	1dbb      	adds	r3, r7, #6
    7334:	881a      	ldrh	r2, [r3, #0]
    7336:	68bb      	ldr	r3, [r7, #8]
    7338:	0011      	movs	r1, r2
    733a:	0018      	movs	r0, r3
    733c:	4b1b      	ldr	r3, [pc, #108]	; (73ac <nm_spi_write+0x134>)
    733e:	4798      	blx	r3
    7340:	0003      	movs	r3, r0
    7342:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7344:	2316      	movs	r3, #22
    7346:	18fb      	adds	r3, r7, r3
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	b25b      	sxtb	r3, r3
    734c:	2b01      	cmp	r3, #1
    734e:	d014      	beq.n	737a <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    7350:	4a17      	ldr	r2, [pc, #92]	; (73b0 <nm_spi_write+0x138>)
    7352:	490e      	ldr	r1, [pc, #56]	; (738c <nm_spi_write+0x114>)
    7354:	4b0e      	ldr	r3, [pc, #56]	; (7390 <nm_spi_write+0x118>)
    7356:	0018      	movs	r0, r3
    7358:	4b0e      	ldr	r3, [pc, #56]	; (7394 <nm_spi_write+0x11c>)
    735a:	4798      	blx	r3
    735c:	4b15      	ldr	r3, [pc, #84]	; (73b4 <nm_spi_write+0x13c>)
    735e:	0018      	movs	r0, r3
    7360:	4b15      	ldr	r3, [pc, #84]	; (73b8 <nm_spi_write+0x140>)
    7362:	4798      	blx	r3
    7364:	200d      	movs	r0, #13
    7366:	4b0d      	ldr	r3, [pc, #52]	; (739c <nm_spi_write+0x124>)
    7368:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    736a:	2300      	movs	r3, #0
    736c:	9300      	str	r3, [sp, #0]
    736e:	2300      	movs	r3, #0
    7370:	2200      	movs	r2, #0
    7372:	2100      	movs	r1, #0
    7374:	20cf      	movs	r0, #207	; 0xcf
    7376:	4c03      	ldr	r4, [pc, #12]	; (7384 <nm_spi_write+0x10c>)
    7378:	47a0      	blx	r4
	}

	return N_OK;
    737a:	2301      	movs	r3, #1
}
    737c:	0018      	movs	r0, r3
    737e:	46bd      	mov	sp, r7
    7380:	b006      	add	sp, #24
    7382:	bdb0      	pop	{r4, r5, r7, pc}
    7384:	00006905 	.word	0x00006905
    7388:	0000020f 	.word	0x0000020f
    738c:	00013b40 	.word	0x00013b40
    7390:	00013608 	.word	0x00013608
    7394:	000114d9 	.word	0x000114d9
    7398:	0001384c 	.word	0x0001384c
    739c:	0001150d 	.word	0x0001150d
    73a0:	00006c49 	.word	0x00006c49
    73a4:	00000215 	.word	0x00000215
    73a8:	0001387c 	.word	0x0001387c
    73ac:	00006f89 	.word	0x00006f89
    73b0:	00000226 	.word	0x00000226
    73b4:	000138b4 	.word	0x000138b4
    73b8:	000115f9 	.word	0x000115f9

000073bc <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    73bc:	b5b0      	push	{r4, r5, r7, lr}
    73be:	b086      	sub	sp, #24
    73c0:	af02      	add	r7, sp, #8
    73c2:	6078      	str	r0, [r7, #4]
    73c4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    73c6:	230d      	movs	r3, #13
    73c8:	18fb      	adds	r3, r7, r3
    73ca:	2201      	movs	r2, #1
    73cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    73ce:	230f      	movs	r3, #15
    73d0:	18fb      	adds	r3, r7, r3
    73d2:	22ca      	movs	r2, #202	; 0xca
    73d4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    73d6:	230e      	movs	r3, #14
    73d8:	18fb      	adds	r3, r7, r3
    73da:	2200      	movs	r2, #0
    73dc:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    73de:	687b      	ldr	r3, [r7, #4]
    73e0:	2bff      	cmp	r3, #255	; 0xff
    73e2:	d808      	bhi.n	73f6 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    73e4:	230f      	movs	r3, #15
    73e6:	18fb      	adds	r3, r7, r3
    73e8:	22c4      	movs	r2, #196	; 0xc4
    73ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    73ec:	230e      	movs	r3, #14
    73ee:	18fb      	adds	r3, r7, r3
    73f0:	2201      	movs	r2, #1
    73f2:	701a      	strb	r2, [r3, #0]
    73f4:	e007      	b.n	7406 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    73f6:	230f      	movs	r3, #15
    73f8:	18fb      	adds	r3, r7, r3
    73fa:	22ca      	movs	r2, #202	; 0xca
    73fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    73fe:	230e      	movs	r3, #14
    7400:	18fb      	adds	r3, r7, r3
    7402:	2200      	movs	r2, #0
    7404:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7406:	230d      	movs	r3, #13
    7408:	18fc      	adds	r4, r7, r3
    740a:	6879      	ldr	r1, [r7, #4]
    740c:	230f      	movs	r3, #15
    740e:	18fb      	adds	r3, r7, r3
    7410:	7818      	ldrb	r0, [r3, #0]
    7412:	230e      	movs	r3, #14
    7414:	18fb      	adds	r3, r7, r3
    7416:	781b      	ldrb	r3, [r3, #0]
    7418:	9300      	str	r3, [sp, #0]
    741a:	2304      	movs	r3, #4
    741c:	2200      	movs	r2, #0
    741e:	4d44      	ldr	r5, [pc, #272]	; (7530 <spi_read_reg+0x174>)
    7420:	47a8      	blx	r5
    7422:	0003      	movs	r3, r0
    7424:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7426:	230d      	movs	r3, #13
    7428:	18fb      	adds	r3, r7, r3
    742a:	781b      	ldrb	r3, [r3, #0]
    742c:	b25b      	sxtb	r3, r3
    742e:	2b01      	cmp	r3, #1
    7430:	d010      	beq.n	7454 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    7432:	4a40      	ldr	r2, [pc, #256]	; (7534 <spi_read_reg+0x178>)
    7434:	4940      	ldr	r1, [pc, #256]	; (7538 <spi_read_reg+0x17c>)
    7436:	4b41      	ldr	r3, [pc, #260]	; (753c <spi_read_reg+0x180>)
    7438:	0018      	movs	r0, r3
    743a:	4b41      	ldr	r3, [pc, #260]	; (7540 <spi_read_reg+0x184>)
    743c:	4798      	blx	r3
    743e:	687a      	ldr	r2, [r7, #4]
    7440:	4b40      	ldr	r3, [pc, #256]	; (7544 <spi_read_reg+0x188>)
    7442:	0011      	movs	r1, r2
    7444:	0018      	movs	r0, r3
    7446:	4b3e      	ldr	r3, [pc, #248]	; (7540 <spi_read_reg+0x184>)
    7448:	4798      	blx	r3
    744a:	200d      	movs	r0, #13
    744c:	4b3e      	ldr	r3, [pc, #248]	; (7548 <spi_read_reg+0x18c>)
    744e:	4798      	blx	r3
		return N_FAIL;
    7450:	2300      	movs	r3, #0
    7452:	e068      	b.n	7526 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    7454:	230d      	movs	r3, #13
    7456:	18fc      	adds	r4, r7, r3
    7458:	230f      	movs	r3, #15
    745a:	18fb      	adds	r3, r7, r3
    745c:	781b      	ldrb	r3, [r3, #0]
    745e:	0018      	movs	r0, r3
    7460:	4b3a      	ldr	r3, [pc, #232]	; (754c <spi_read_reg+0x190>)
    7462:	4798      	blx	r3
    7464:	0003      	movs	r3, r0
    7466:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7468:	230d      	movs	r3, #13
    746a:	18fb      	adds	r3, r7, r3
    746c:	781b      	ldrb	r3, [r3, #0]
    746e:	b25b      	sxtb	r3, r3
    7470:	2b01      	cmp	r3, #1
    7472:	d018      	beq.n	74a6 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    7474:	4a36      	ldr	r2, [pc, #216]	; (7550 <spi_read_reg+0x194>)
    7476:	4930      	ldr	r1, [pc, #192]	; (7538 <spi_read_reg+0x17c>)
    7478:	4b30      	ldr	r3, [pc, #192]	; (753c <spi_read_reg+0x180>)
    747a:	0018      	movs	r0, r3
    747c:	4b30      	ldr	r3, [pc, #192]	; (7540 <spi_read_reg+0x184>)
    747e:	4798      	blx	r3
    7480:	687a      	ldr	r2, [r7, #4]
    7482:	4b34      	ldr	r3, [pc, #208]	; (7554 <spi_read_reg+0x198>)
    7484:	0011      	movs	r1, r2
    7486:	0018      	movs	r0, r3
    7488:	4b2d      	ldr	r3, [pc, #180]	; (7540 <spi_read_reg+0x184>)
    748a:	4798      	blx	r3
    748c:	200d      	movs	r0, #13
    748e:	4b2e      	ldr	r3, [pc, #184]	; (7548 <spi_read_reg+0x18c>)
    7490:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7492:	2300      	movs	r3, #0
    7494:	9300      	str	r3, [sp, #0]
    7496:	2300      	movs	r3, #0
    7498:	2200      	movs	r2, #0
    749a:	2100      	movs	r1, #0
    749c:	20cf      	movs	r0, #207	; 0xcf
    749e:	4c24      	ldr	r4, [pc, #144]	; (7530 <spi_read_reg+0x174>)
    74a0:	47a0      	blx	r4
		return N_FAIL;
    74a2:	2300      	movs	r3, #0
    74a4:	e03f      	b.n	7526 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    74a6:	230d      	movs	r3, #13
    74a8:	18fc      	adds	r4, r7, r3
    74aa:	230e      	movs	r3, #14
    74ac:	18fb      	adds	r3, r7, r3
    74ae:	781a      	ldrb	r2, [r3, #0]
    74b0:	2308      	movs	r3, #8
    74b2:	18fb      	adds	r3, r7, r3
    74b4:	2104      	movs	r1, #4
    74b6:	0018      	movs	r0, r3
    74b8:	4b27      	ldr	r3, [pc, #156]	; (7558 <spi_read_reg+0x19c>)
    74ba:	4798      	blx	r3
    74bc:	0003      	movs	r3, r0
    74be:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    74c0:	230d      	movs	r3, #13
    74c2:	18fb      	adds	r3, r7, r3
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	b25b      	sxtb	r3, r3
    74c8:	2b01      	cmp	r3, #1
    74ca:	d016      	beq.n	74fa <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    74cc:	4a23      	ldr	r2, [pc, #140]	; (755c <spi_read_reg+0x1a0>)
    74ce:	491a      	ldr	r1, [pc, #104]	; (7538 <spi_read_reg+0x17c>)
    74d0:	4b1a      	ldr	r3, [pc, #104]	; (753c <spi_read_reg+0x180>)
    74d2:	0018      	movs	r0, r3
    74d4:	4b1a      	ldr	r3, [pc, #104]	; (7540 <spi_read_reg+0x184>)
    74d6:	4798      	blx	r3
    74d8:	4b21      	ldr	r3, [pc, #132]	; (7560 <spi_read_reg+0x1a4>)
    74da:	0018      	movs	r0, r3
    74dc:	4b21      	ldr	r3, [pc, #132]	; (7564 <spi_read_reg+0x1a8>)
    74de:	4798      	blx	r3
    74e0:	200d      	movs	r0, #13
    74e2:	4b19      	ldr	r3, [pc, #100]	; (7548 <spi_read_reg+0x18c>)
    74e4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    74e6:	2300      	movs	r3, #0
    74e8:	9300      	str	r3, [sp, #0]
    74ea:	2300      	movs	r3, #0
    74ec:	2200      	movs	r2, #0
    74ee:	2100      	movs	r1, #0
    74f0:	20cf      	movs	r0, #207	; 0xcf
    74f2:	4c0f      	ldr	r4, [pc, #60]	; (7530 <spi_read_reg+0x174>)
    74f4:	47a0      	blx	r4
		return N_FAIL;
    74f6:	2300      	movs	r3, #0
    74f8:	e015      	b.n	7526 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    74fa:	2308      	movs	r3, #8
    74fc:	18fb      	adds	r3, r7, r3
    74fe:	781b      	ldrb	r3, [r3, #0]
    7500:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    7502:	2308      	movs	r3, #8
    7504:	18fb      	adds	r3, r7, r3
    7506:	785b      	ldrb	r3, [r3, #1]
    7508:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    750a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    750c:	2308      	movs	r3, #8
    750e:	18fb      	adds	r3, r7, r3
    7510:	789b      	ldrb	r3, [r3, #2]
    7512:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    7514:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    7516:	2308      	movs	r3, #8
    7518:	18fb      	adds	r3, r7, r3
    751a:	78db      	ldrb	r3, [r3, #3]
    751c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    751e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    7520:	683b      	ldr	r3, [r7, #0]
    7522:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    7524:	2301      	movs	r3, #1
}
    7526:	0018      	movs	r0, r3
    7528:	46bd      	mov	sp, r7
    752a:	b004      	add	sp, #16
    752c:	bdb0      	pop	{r4, r5, r7, pc}
    752e:	46c0      	nop			; (mov r8, r8)
    7530:	00006905 	.word	0x00006905
    7534:	00000245 	.word	0x00000245
    7538:	00013b50 	.word	0x00013b50
    753c:	00013608 	.word	0x00013608
    7540:	000114d9 	.word	0x000114d9
    7544:	000138dc 	.word	0x000138dc
    7548:	0001150d 	.word	0x0001150d
    754c:	00006c49 	.word	0x00006c49
    7550:	0000024b 	.word	0x0000024b
    7554:	00013908 	.word	0x00013908
    7558:	00006d85 	.word	0x00006d85
    755c:	00000253 	.word	0x00000253
    7560:	0001393c 	.word	0x0001393c
    7564:	000115f9 	.word	0x000115f9

00007568 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    7568:	b5b0      	push	{r4, r5, r7, lr}
    756a:	b088      	sub	sp, #32
    756c:	af02      	add	r7, sp, #8
    756e:	60f8      	str	r0, [r7, #12]
    7570:	60b9      	str	r1, [r7, #8]
    7572:	1dbb      	adds	r3, r7, #6
    7574:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    7576:	2317      	movs	r3, #23
    7578:	18fb      	adds	r3, r7, r3
    757a:	22c8      	movs	r2, #200	; 0xc8
    757c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    757e:	1dbb      	adds	r3, r7, #6
    7580:	881a      	ldrh	r2, [r3, #0]
    7582:	2316      	movs	r3, #22
    7584:	18fc      	adds	r4, r7, r3
    7586:	68f9      	ldr	r1, [r7, #12]
    7588:	2317      	movs	r3, #23
    758a:	18fb      	adds	r3, r7, r3
    758c:	7818      	ldrb	r0, [r3, #0]
    758e:	2300      	movs	r3, #0
    7590:	9300      	str	r3, [sp, #0]
    7592:	0013      	movs	r3, r2
    7594:	2200      	movs	r2, #0
    7596:	4d39      	ldr	r5, [pc, #228]	; (767c <nm_spi_read+0x114>)
    7598:	47a8      	blx	r5
    759a:	0003      	movs	r3, r0
    759c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    759e:	2316      	movs	r3, #22
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	781b      	ldrb	r3, [r3, #0]
    75a4:	b25b      	sxtb	r3, r3
    75a6:	2b01      	cmp	r3, #1
    75a8:	d011      	beq.n	75ce <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    75aa:	239d      	movs	r3, #157	; 0x9d
    75ac:	009a      	lsls	r2, r3, #2
    75ae:	4934      	ldr	r1, [pc, #208]	; (7680 <nm_spi_read+0x118>)
    75b0:	4b34      	ldr	r3, [pc, #208]	; (7684 <nm_spi_read+0x11c>)
    75b2:	0018      	movs	r0, r3
    75b4:	4b34      	ldr	r3, [pc, #208]	; (7688 <nm_spi_read+0x120>)
    75b6:	4798      	blx	r3
    75b8:	68fa      	ldr	r2, [r7, #12]
    75ba:	4b34      	ldr	r3, [pc, #208]	; (768c <nm_spi_read+0x124>)
    75bc:	0011      	movs	r1, r2
    75be:	0018      	movs	r0, r3
    75c0:	4b31      	ldr	r3, [pc, #196]	; (7688 <nm_spi_read+0x120>)
    75c2:	4798      	blx	r3
    75c4:	200d      	movs	r0, #13
    75c6:	4b32      	ldr	r3, [pc, #200]	; (7690 <nm_spi_read+0x128>)
    75c8:	4798      	blx	r3
		return N_FAIL;
    75ca:	2300      	movs	r3, #0
    75cc:	e052      	b.n	7674 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    75ce:	2316      	movs	r3, #22
    75d0:	18fc      	adds	r4, r7, r3
    75d2:	2317      	movs	r3, #23
    75d4:	18fb      	adds	r3, r7, r3
    75d6:	781b      	ldrb	r3, [r3, #0]
    75d8:	0018      	movs	r0, r3
    75da:	4b2e      	ldr	r3, [pc, #184]	; (7694 <nm_spi_read+0x12c>)
    75dc:	4798      	blx	r3
    75de:	0003      	movs	r3, r0
    75e0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    75e2:	2316      	movs	r3, #22
    75e4:	18fb      	adds	r3, r7, r3
    75e6:	781b      	ldrb	r3, [r3, #0]
    75e8:	b25b      	sxtb	r3, r3
    75ea:	2b01      	cmp	r3, #1
    75ec:	d018      	beq.n	7620 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    75ee:	4a2a      	ldr	r2, [pc, #168]	; (7698 <nm_spi_read+0x130>)
    75f0:	4923      	ldr	r1, [pc, #140]	; (7680 <nm_spi_read+0x118>)
    75f2:	4b24      	ldr	r3, [pc, #144]	; (7684 <nm_spi_read+0x11c>)
    75f4:	0018      	movs	r0, r3
    75f6:	4b24      	ldr	r3, [pc, #144]	; (7688 <nm_spi_read+0x120>)
    75f8:	4798      	blx	r3
    75fa:	68fa      	ldr	r2, [r7, #12]
    75fc:	4b27      	ldr	r3, [pc, #156]	; (769c <nm_spi_read+0x134>)
    75fe:	0011      	movs	r1, r2
    7600:	0018      	movs	r0, r3
    7602:	4b21      	ldr	r3, [pc, #132]	; (7688 <nm_spi_read+0x120>)
    7604:	4798      	blx	r3
    7606:	200d      	movs	r0, #13
    7608:	4b21      	ldr	r3, [pc, #132]	; (7690 <nm_spi_read+0x128>)
    760a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    760c:	2300      	movs	r3, #0
    760e:	9300      	str	r3, [sp, #0]
    7610:	2300      	movs	r3, #0
    7612:	2200      	movs	r2, #0
    7614:	2100      	movs	r1, #0
    7616:	20cf      	movs	r0, #207	; 0xcf
    7618:	4c18      	ldr	r4, [pc, #96]	; (767c <nm_spi_read+0x114>)
    761a:	47a0      	blx	r4
		return N_FAIL;
    761c:	2300      	movs	r3, #0
    761e:	e029      	b.n	7674 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    7620:	2316      	movs	r3, #22
    7622:	18fc      	adds	r4, r7, r3
    7624:	1dbb      	adds	r3, r7, #6
    7626:	8819      	ldrh	r1, [r3, #0]
    7628:	68bb      	ldr	r3, [r7, #8]
    762a:	2200      	movs	r2, #0
    762c:	0018      	movs	r0, r3
    762e:	4b1c      	ldr	r3, [pc, #112]	; (76a0 <nm_spi_read+0x138>)
    7630:	4798      	blx	r3
    7632:	0003      	movs	r3, r0
    7634:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    7636:	2316      	movs	r3, #22
    7638:	18fb      	adds	r3, r7, r3
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	b25b      	sxtb	r3, r3
    763e:	2b01      	cmp	r3, #1
    7640:	d017      	beq.n	7672 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    7642:	23a1      	movs	r3, #161	; 0xa1
    7644:	009a      	lsls	r2, r3, #2
    7646:	490e      	ldr	r1, [pc, #56]	; (7680 <nm_spi_read+0x118>)
    7648:	4b0e      	ldr	r3, [pc, #56]	; (7684 <nm_spi_read+0x11c>)
    764a:	0018      	movs	r0, r3
    764c:	4b0e      	ldr	r3, [pc, #56]	; (7688 <nm_spi_read+0x120>)
    764e:	4798      	blx	r3
    7650:	4b14      	ldr	r3, [pc, #80]	; (76a4 <nm_spi_read+0x13c>)
    7652:	0018      	movs	r0, r3
    7654:	4b14      	ldr	r3, [pc, #80]	; (76a8 <nm_spi_read+0x140>)
    7656:	4798      	blx	r3
    7658:	200d      	movs	r0, #13
    765a:	4b0d      	ldr	r3, [pc, #52]	; (7690 <nm_spi_read+0x128>)
    765c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    765e:	2300      	movs	r3, #0
    7660:	9300      	str	r3, [sp, #0]
    7662:	2300      	movs	r3, #0
    7664:	2200      	movs	r2, #0
    7666:	2100      	movs	r1, #0
    7668:	20cf      	movs	r0, #207	; 0xcf
    766a:	4c04      	ldr	r4, [pc, #16]	; (767c <nm_spi_read+0x114>)
    766c:	47a0      	blx	r4
		return N_FAIL;
    766e:	2300      	movs	r3, #0
    7670:	e000      	b.n	7674 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    7672:	2301      	movs	r3, #1
}
    7674:	0018      	movs	r0, r3
    7676:	46bd      	mov	sp, r7
    7678:	b006      	add	sp, #24
    767a:	bdb0      	pop	{r4, r5, r7, pc}
    767c:	00006905 	.word	0x00006905
    7680:	00013b60 	.word	0x00013b60
    7684:	00013608 	.word	0x00013608
    7688:	000114d9 	.word	0x000114d9
    768c:	0001395c 	.word	0x0001395c
    7690:	0001150d 	.word	0x0001150d
    7694:	00006c49 	.word	0x00006c49
    7698:	0000027a 	.word	0x0000027a
    769c:	0001398c 	.word	0x0001398c
    76a0:	00006d85 	.word	0x00006d85
    76a4:	000139c4 	.word	0x000139c4
    76a8:	000115f9 	.word	0x000115f9

000076ac <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    76ac:	b580      	push	{r7, lr}
    76ae:	b082      	sub	sp, #8
    76b0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    76b2:	4b0c      	ldr	r3, [pc, #48]	; (76e4 <spi_init_pkt_sz+0x38>)
    76b4:	0018      	movs	r0, r3
    76b6:	4b0c      	ldr	r3, [pc, #48]	; (76e8 <spi_init_pkt_sz+0x3c>)
    76b8:	4798      	blx	r3
    76ba:	0003      	movs	r3, r0
    76bc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    76be:	687b      	ldr	r3, [r7, #4]
    76c0:	2270      	movs	r2, #112	; 0x70
    76c2:	4393      	bics	r3, r2
    76c4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    76c6:	687b      	ldr	r3, [r7, #4]
    76c8:	2250      	movs	r2, #80	; 0x50
    76ca:	4313      	orrs	r3, r2
    76cc:	607b      	str	r3, [r7, #4]
    76ce:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	4a04      	ldr	r2, [pc, #16]	; (76e4 <spi_init_pkt_sz+0x38>)
    76d4:	0019      	movs	r1, r3
    76d6:	0010      	movs	r0, r2
    76d8:	4b04      	ldr	r3, [pc, #16]	; (76ec <spi_init_pkt_sz+0x40>)
    76da:	4798      	blx	r3
}
    76dc:	46c0      	nop			; (mov r8, r8)
    76de:	46bd      	mov	sp, r7
    76e0:	b002      	add	sp, #8
    76e2:	bd80      	pop	{r7, pc}
    76e4:	0000e824 	.word	0x0000e824
    76e8:	00007851 	.word	0x00007851
    76ec:	000078c5 	.word	0x000078c5

000076f0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    76f0:	b580      	push	{r7, lr}
    76f2:	b082      	sub	sp, #8
    76f4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    76f6:	2300      	movs	r3, #0
    76f8:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    76fa:	4b3f      	ldr	r3, [pc, #252]	; (77f8 <nm_spi_init+0x108>)
    76fc:	2200      	movs	r2, #0
    76fe:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    7700:	003b      	movs	r3, r7
    7702:	4a3e      	ldr	r2, [pc, #248]	; (77fc <nm_spi_init+0x10c>)
    7704:	0019      	movs	r1, r3
    7706:	0010      	movs	r0, r2
    7708:	4b3d      	ldr	r3, [pc, #244]	; (7800 <nm_spi_init+0x110>)
    770a:	4798      	blx	r3
    770c:	1e03      	subs	r3, r0, #0
    770e:	d127      	bne.n	7760 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    7710:	4b39      	ldr	r3, [pc, #228]	; (77f8 <nm_spi_init+0x108>)
    7712:	2201      	movs	r2, #1
    7714:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    7716:	4a3b      	ldr	r2, [pc, #236]	; (7804 <nm_spi_init+0x114>)
    7718:	493b      	ldr	r1, [pc, #236]	; (7808 <nm_spi_init+0x118>)
    771a:	4b3c      	ldr	r3, [pc, #240]	; (780c <nm_spi_init+0x11c>)
    771c:	0018      	movs	r0, r3
    771e:	4b3c      	ldr	r3, [pc, #240]	; (7810 <nm_spi_init+0x120>)
    7720:	4798      	blx	r3
    7722:	4b3c      	ldr	r3, [pc, #240]	; (7814 <nm_spi_init+0x124>)
    7724:	0018      	movs	r0, r3
    7726:	4b3c      	ldr	r3, [pc, #240]	; (7818 <nm_spi_init+0x128>)
    7728:	4798      	blx	r3
    772a:	200d      	movs	r0, #13
    772c:	4b3b      	ldr	r3, [pc, #236]	; (781c <nm_spi_init+0x12c>)
    772e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    7730:	003b      	movs	r3, r7
    7732:	4a32      	ldr	r2, [pc, #200]	; (77fc <nm_spi_init+0x10c>)
    7734:	0019      	movs	r1, r3
    7736:	0010      	movs	r0, r2
    7738:	4b31      	ldr	r3, [pc, #196]	; (7800 <nm_spi_init+0x110>)
    773a:	4798      	blx	r3
    773c:	1e03      	subs	r3, r0, #0
    773e:	d10f      	bne.n	7760 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    7740:	23b2      	movs	r3, #178	; 0xb2
    7742:	009a      	lsls	r2, r3, #2
    7744:	4930      	ldr	r1, [pc, #192]	; (7808 <nm_spi_init+0x118>)
    7746:	4b31      	ldr	r3, [pc, #196]	; (780c <nm_spi_init+0x11c>)
    7748:	0018      	movs	r0, r3
    774a:	4b31      	ldr	r3, [pc, #196]	; (7810 <nm_spi_init+0x120>)
    774c:	4798      	blx	r3
    774e:	4b34      	ldr	r3, [pc, #208]	; (7820 <nm_spi_init+0x130>)
    7750:	0018      	movs	r0, r3
    7752:	4b31      	ldr	r3, [pc, #196]	; (7818 <nm_spi_init+0x128>)
    7754:	4798      	blx	r3
    7756:	200d      	movs	r0, #13
    7758:	4b30      	ldr	r3, [pc, #192]	; (781c <nm_spi_init+0x12c>)
    775a:	4798      	blx	r3
			return 0;
    775c:	2300      	movs	r3, #0
    775e:	e046      	b.n	77ee <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    7760:	4b25      	ldr	r3, [pc, #148]	; (77f8 <nm_spi_init+0x108>)
    7762:	781b      	ldrb	r3, [r3, #0]
    7764:	2b00      	cmp	r3, #0
    7766:	d125      	bne.n	77b4 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    7768:	683b      	ldr	r3, [r7, #0]
    776a:	220c      	movs	r2, #12
    776c:	4393      	bics	r3, r2
    776e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    7770:	683b      	ldr	r3, [r7, #0]
    7772:	2270      	movs	r2, #112	; 0x70
    7774:	4393      	bics	r3, r2
    7776:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    7778:	683b      	ldr	r3, [r7, #0]
    777a:	2250      	movs	r2, #80	; 0x50
    777c:	4313      	orrs	r3, r2
    777e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    7780:	683b      	ldr	r3, [r7, #0]
    7782:	4a1e      	ldr	r2, [pc, #120]	; (77fc <nm_spi_init+0x10c>)
    7784:	0019      	movs	r1, r3
    7786:	0010      	movs	r0, r2
    7788:	4b26      	ldr	r3, [pc, #152]	; (7824 <nm_spi_init+0x134>)
    778a:	4798      	blx	r3
    778c:	1e03      	subs	r3, r0, #0
    778e:	d10e      	bne.n	77ae <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    7790:	4a25      	ldr	r2, [pc, #148]	; (7828 <nm_spi_init+0x138>)
    7792:	491d      	ldr	r1, [pc, #116]	; (7808 <nm_spi_init+0x118>)
    7794:	4b1d      	ldr	r3, [pc, #116]	; (780c <nm_spi_init+0x11c>)
    7796:	0018      	movs	r0, r3
    7798:	4b1d      	ldr	r3, [pc, #116]	; (7810 <nm_spi_init+0x120>)
    779a:	4798      	blx	r3
    779c:	4b23      	ldr	r3, [pc, #140]	; (782c <nm_spi_init+0x13c>)
    779e:	0018      	movs	r0, r3
    77a0:	4b1d      	ldr	r3, [pc, #116]	; (7818 <nm_spi_init+0x128>)
    77a2:	4798      	blx	r3
    77a4:	200d      	movs	r0, #13
    77a6:	4b1d      	ldr	r3, [pc, #116]	; (781c <nm_spi_init+0x12c>)
    77a8:	4798      	blx	r3
			return 0;
    77aa:	2300      	movs	r3, #0
    77ac:	e01f      	b.n	77ee <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    77ae:	4b12      	ldr	r3, [pc, #72]	; (77f8 <nm_spi_init+0x108>)
    77b0:	2201      	movs	r2, #1
    77b2:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    77b4:	1d3a      	adds	r2, r7, #4
    77b6:	2380      	movs	r3, #128	; 0x80
    77b8:	015b      	lsls	r3, r3, #5
    77ba:	0011      	movs	r1, r2
    77bc:	0018      	movs	r0, r3
    77be:	4b10      	ldr	r3, [pc, #64]	; (7800 <nm_spi_init+0x110>)
    77c0:	4798      	blx	r3
    77c2:	1e03      	subs	r3, r0, #0
    77c4:	d110      	bne.n	77e8 <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    77c6:	23b7      	movs	r3, #183	; 0xb7
    77c8:	009a      	lsls	r2, r3, #2
    77ca:	490f      	ldr	r1, [pc, #60]	; (7808 <nm_spi_init+0x118>)
    77cc:	4b0f      	ldr	r3, [pc, #60]	; (780c <nm_spi_init+0x11c>)
    77ce:	0018      	movs	r0, r3
    77d0:	4b0f      	ldr	r3, [pc, #60]	; (7810 <nm_spi_init+0x120>)
    77d2:	4798      	blx	r3
    77d4:	4b16      	ldr	r3, [pc, #88]	; (7830 <nm_spi_init+0x140>)
    77d6:	0018      	movs	r0, r3
    77d8:	4b0f      	ldr	r3, [pc, #60]	; (7818 <nm_spi_init+0x128>)
    77da:	4798      	blx	r3
    77dc:	200d      	movs	r0, #13
    77de:	4b0f      	ldr	r3, [pc, #60]	; (781c <nm_spi_init+0x12c>)
    77e0:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    77e2:	2306      	movs	r3, #6
    77e4:	425b      	negs	r3, r3
    77e6:	e002      	b.n	77ee <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    77e8:	4b12      	ldr	r3, [pc, #72]	; (7834 <nm_spi_init+0x144>)
    77ea:	4798      	blx	r3


	return M2M_SUCCESS;
    77ec:	2300      	movs	r3, #0
}
    77ee:	0018      	movs	r0, r3
    77f0:	46bd      	mov	sp, r7
    77f2:	b002      	add	sp, #8
    77f4:	bd80      	pop	{r7, pc}
    77f6:	46c0      	nop			; (mov r8, r8)
    77f8:	200000f8 	.word	0x200000f8
    77fc:	0000e824 	.word	0x0000e824
    7800:	000073bd 	.word	0x000073bd
    7804:	000002c5 	.word	0x000002c5
    7808:	00013b6c 	.word	0x00013b6c
    780c:	00013608 	.word	0x00013608
    7810:	000114d9 	.word	0x000114d9
    7814:	000139ec 	.word	0x000139ec
    7818:	000115f9 	.word	0x000115f9
    781c:	0001150d 	.word	0x0001150d
    7820:	00013a3c 	.word	0x00013a3c
    7824:	0000715d 	.word	0x0000715d
    7828:	000002d2 	.word	0x000002d2
    782c:	00013a68 	.word	0x00013a68
    7830:	00013a9c 	.word	0x00013a9c
    7834:	000076ad 	.word	0x000076ad

00007838 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    7838:	b580      	push	{r7, lr}
    783a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    783c:	4b03      	ldr	r3, [pc, #12]	; (784c <nm_spi_deinit+0x14>)
    783e:	2200      	movs	r2, #0
    7840:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    7842:	2300      	movs	r3, #0
}
    7844:	0018      	movs	r0, r3
    7846:	46bd      	mov	sp, r7
    7848:	bd80      	pop	{r7, pc}
    784a:	46c0      	nop			; (mov r8, r8)
    784c:	200000f8 	.word	0x200000f8

00007850 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    7850:	b580      	push	{r7, lr}
    7852:	b084      	sub	sp, #16
    7854:	af00      	add	r7, sp, #0
    7856:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    7858:	230c      	movs	r3, #12
    785a:	18fa      	adds	r2, r7, r3
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	0011      	movs	r1, r2
    7860:	0018      	movs	r0, r3
    7862:	4b03      	ldr	r3, [pc, #12]	; (7870 <nm_spi_read_reg+0x20>)
    7864:	4798      	blx	r3

	return u32Val;
    7866:	68fb      	ldr	r3, [r7, #12]
}
    7868:	0018      	movs	r0, r3
    786a:	46bd      	mov	sp, r7
    786c:	b004      	add	sp, #16
    786e:	bd80      	pop	{r7, pc}
    7870:	000073bd 	.word	0x000073bd

00007874 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7874:	b590      	push	{r4, r7, lr}
    7876:	b085      	sub	sp, #20
    7878:	af00      	add	r7, sp, #0
    787a:	6078      	str	r0, [r7, #4]
    787c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    787e:	230f      	movs	r3, #15
    7880:	18fc      	adds	r4, r7, r3
    7882:	683a      	ldr	r2, [r7, #0]
    7884:	687b      	ldr	r3, [r7, #4]
    7886:	0011      	movs	r1, r2
    7888:	0018      	movs	r0, r3
    788a:	4b0d      	ldr	r3, [pc, #52]	; (78c0 <nm_spi_read_reg_with_ret+0x4c>)
    788c:	4798      	blx	r3
    788e:	0003      	movs	r3, r0
    7890:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7892:	230f      	movs	r3, #15
    7894:	18fb      	adds	r3, r7, r3
    7896:	781b      	ldrb	r3, [r3, #0]
    7898:	b25b      	sxtb	r3, r3
    789a:	2b01      	cmp	r3, #1
    789c:	d104      	bne.n	78a8 <nm_spi_read_reg_with_ret+0x34>
    789e:	230f      	movs	r3, #15
    78a0:	18fb      	adds	r3, r7, r3
    78a2:	2200      	movs	r2, #0
    78a4:	701a      	strb	r2, [r3, #0]
    78a6:	e003      	b.n	78b0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    78a8:	230f      	movs	r3, #15
    78aa:	18fb      	adds	r3, r7, r3
    78ac:	22fa      	movs	r2, #250	; 0xfa
    78ae:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    78b0:	230f      	movs	r3, #15
    78b2:	18fb      	adds	r3, r7, r3
    78b4:	781b      	ldrb	r3, [r3, #0]
    78b6:	b25b      	sxtb	r3, r3
}
    78b8:	0018      	movs	r0, r3
    78ba:	46bd      	mov	sp, r7
    78bc:	b005      	add	sp, #20
    78be:	bd90      	pop	{r4, r7, pc}
    78c0:	000073bd 	.word	0x000073bd

000078c4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    78c4:	b590      	push	{r4, r7, lr}
    78c6:	b085      	sub	sp, #20
    78c8:	af00      	add	r7, sp, #0
    78ca:	6078      	str	r0, [r7, #4]
    78cc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    78ce:	230f      	movs	r3, #15
    78d0:	18fc      	adds	r4, r7, r3
    78d2:	683a      	ldr	r2, [r7, #0]
    78d4:	687b      	ldr	r3, [r7, #4]
    78d6:	0011      	movs	r1, r2
    78d8:	0018      	movs	r0, r3
    78da:	4b0d      	ldr	r3, [pc, #52]	; (7910 <nm_spi_write_reg+0x4c>)
    78dc:	4798      	blx	r3
    78de:	0003      	movs	r3, r0
    78e0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    78e2:	230f      	movs	r3, #15
    78e4:	18fb      	adds	r3, r7, r3
    78e6:	781b      	ldrb	r3, [r3, #0]
    78e8:	b25b      	sxtb	r3, r3
    78ea:	2b01      	cmp	r3, #1
    78ec:	d104      	bne.n	78f8 <nm_spi_write_reg+0x34>
    78ee:	230f      	movs	r3, #15
    78f0:	18fb      	adds	r3, r7, r3
    78f2:	2200      	movs	r2, #0
    78f4:	701a      	strb	r2, [r3, #0]
    78f6:	e003      	b.n	7900 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    78f8:	230f      	movs	r3, #15
    78fa:	18fb      	adds	r3, r7, r3
    78fc:	22fa      	movs	r2, #250	; 0xfa
    78fe:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7900:	230f      	movs	r3, #15
    7902:	18fb      	adds	r3, r7, r3
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	b25b      	sxtb	r3, r3
}
    7908:	0018      	movs	r0, r3
    790a:	46bd      	mov	sp, r7
    790c:	b005      	add	sp, #20
    790e:	bd90      	pop	{r4, r7, pc}
    7910:	0000715d 	.word	0x0000715d

00007914 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7914:	b590      	push	{r4, r7, lr}
    7916:	b087      	sub	sp, #28
    7918:	af00      	add	r7, sp, #0
    791a:	60f8      	str	r0, [r7, #12]
    791c:	60b9      	str	r1, [r7, #8]
    791e:	1dbb      	adds	r3, r7, #6
    7920:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    7922:	2317      	movs	r3, #23
    7924:	18fc      	adds	r4, r7, r3
    7926:	1dbb      	adds	r3, r7, #6
    7928:	881a      	ldrh	r2, [r3, #0]
    792a:	68b9      	ldr	r1, [r7, #8]
    792c:	68fb      	ldr	r3, [r7, #12]
    792e:	0018      	movs	r0, r3
    7930:	4b0d      	ldr	r3, [pc, #52]	; (7968 <nm_spi_read_block+0x54>)
    7932:	4798      	blx	r3
    7934:	0003      	movs	r3, r0
    7936:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7938:	2317      	movs	r3, #23
    793a:	18fb      	adds	r3, r7, r3
    793c:	781b      	ldrb	r3, [r3, #0]
    793e:	b25b      	sxtb	r3, r3
    7940:	2b01      	cmp	r3, #1
    7942:	d104      	bne.n	794e <nm_spi_read_block+0x3a>
    7944:	2317      	movs	r3, #23
    7946:	18fb      	adds	r3, r7, r3
    7948:	2200      	movs	r2, #0
    794a:	701a      	strb	r2, [r3, #0]
    794c:	e003      	b.n	7956 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    794e:	2317      	movs	r3, #23
    7950:	18fb      	adds	r3, r7, r3
    7952:	22fa      	movs	r2, #250	; 0xfa
    7954:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    7956:	2317      	movs	r3, #23
    7958:	18fb      	adds	r3, r7, r3
    795a:	781b      	ldrb	r3, [r3, #0]
    795c:	b25b      	sxtb	r3, r3
}
    795e:	0018      	movs	r0, r3
    7960:	46bd      	mov	sp, r7
    7962:	b007      	add	sp, #28
    7964:	bd90      	pop	{r4, r7, pc}
    7966:	46c0      	nop			; (mov r8, r8)
    7968:	00007569 	.word	0x00007569

0000796c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    796c:	b590      	push	{r4, r7, lr}
    796e:	b087      	sub	sp, #28
    7970:	af00      	add	r7, sp, #0
    7972:	60f8      	str	r0, [r7, #12]
    7974:	60b9      	str	r1, [r7, #8]
    7976:	1dbb      	adds	r3, r7, #6
    7978:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    797a:	2317      	movs	r3, #23
    797c:	18fc      	adds	r4, r7, r3
    797e:	1dbb      	adds	r3, r7, #6
    7980:	881a      	ldrh	r2, [r3, #0]
    7982:	68b9      	ldr	r1, [r7, #8]
    7984:	68fb      	ldr	r3, [r7, #12]
    7986:	0018      	movs	r0, r3
    7988:	4b0d      	ldr	r3, [pc, #52]	; (79c0 <nm_spi_write_block+0x54>)
    798a:	4798      	blx	r3
    798c:	0003      	movs	r3, r0
    798e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    7990:	2317      	movs	r3, #23
    7992:	18fb      	adds	r3, r7, r3
    7994:	781b      	ldrb	r3, [r3, #0]
    7996:	b25b      	sxtb	r3, r3
    7998:	2b01      	cmp	r3, #1
    799a:	d104      	bne.n	79a6 <nm_spi_write_block+0x3a>
    799c:	2317      	movs	r3, #23
    799e:	18fb      	adds	r3, r7, r3
    79a0:	2200      	movs	r2, #0
    79a2:	701a      	strb	r2, [r3, #0]
    79a4:	e003      	b.n	79ae <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    79a6:	2317      	movs	r3, #23
    79a8:	18fb      	adds	r3, r7, r3
    79aa:	22fa      	movs	r2, #250	; 0xfa
    79ac:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    79ae:	2317      	movs	r3, #23
    79b0:	18fb      	adds	r3, r7, r3
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	b25b      	sxtb	r3, r3
}
    79b6:	0018      	movs	r0, r3
    79b8:	46bd      	mov	sp, r7
    79ba:	b007      	add	sp, #28
    79bc:	bd90      	pop	{r4, r7, pc}
    79be:	46c0      	nop			; (mov r8, r8)
    79c0:	00007279 	.word	0x00007279

000079c4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    79c4:	b590      	push	{r4, r7, lr}
    79c6:	b089      	sub	sp, #36	; 0x24
    79c8:	af00      	add	r7, sp, #0
    79ca:	60b9      	str	r1, [r7, #8]
    79cc:	0011      	movs	r1, r2
    79ce:	607b      	str	r3, [r7, #4]
    79d0:	230f      	movs	r3, #15
    79d2:	18fb      	adds	r3, r7, r3
    79d4:	1c02      	adds	r2, r0, #0
    79d6:	701a      	strb	r2, [r3, #0]
    79d8:	230e      	movs	r3, #14
    79da:	18fb      	adds	r3, r7, r3
    79dc:	1c0a      	adds	r2, r1, #0
    79de:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    79e0:	2330      	movs	r3, #48	; 0x30
    79e2:	18fb      	adds	r3, r7, r3
    79e4:	881b      	ldrh	r3, [r3, #0]
    79e6:	2b00      	cmp	r3, #0
    79e8:	d100      	bne.n	79ec <Socket_ReadSocketData+0x28>
    79ea:	e0bf      	b.n	7b6c <Socket_ReadSocketData+0x1a8>
    79ec:	230f      	movs	r3, #15
    79ee:	18fb      	adds	r3, r7, r3
    79f0:	2200      	movs	r2, #0
    79f2:	569a      	ldrsb	r2, [r3, r2]
    79f4:	4b5f      	ldr	r3, [pc, #380]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    79f6:	0112      	lsls	r2, r2, #4
    79f8:	58d3      	ldr	r3, [r2, r3]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d100      	bne.n	7a00 <Socket_ReadSocketData+0x3c>
    79fe:	e0b5      	b.n	7b6c <Socket_ReadSocketData+0x1a8>
    7a00:	230f      	movs	r3, #15
    7a02:	18fb      	adds	r3, r7, r3
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	b25b      	sxtb	r3, r3
    7a08:	4a5a      	ldr	r2, [pc, #360]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7a0a:	011b      	lsls	r3, r3, #4
    7a0c:	18d3      	adds	r3, r2, r3
    7a0e:	3304      	adds	r3, #4
    7a10:	881b      	ldrh	r3, [r3, #0]
    7a12:	b29b      	uxth	r3, r3
    7a14:	2b00      	cmp	r3, #0
    7a16:	d100      	bne.n	7a1a <Socket_ReadSocketData+0x56>
    7a18:	e0a8      	b.n	7b6c <Socket_ReadSocketData+0x1a8>
    7a1a:	230f      	movs	r3, #15
    7a1c:	18fb      	adds	r3, r7, r3
    7a1e:	781b      	ldrb	r3, [r3, #0]
    7a20:	b25b      	sxtb	r3, r3
    7a22:	4a54      	ldr	r2, [pc, #336]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7a24:	011b      	lsls	r3, r3, #4
    7a26:	18d3      	adds	r3, r2, r3
    7a28:	330a      	adds	r3, #10
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	b2db      	uxtb	r3, r3
    7a2e:	2b01      	cmp	r3, #1
    7a30:	d000      	beq.n	7a34 <Socket_ReadSocketData+0x70>
    7a32:	e09b      	b.n	7b6c <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    7a38:	68bb      	ldr	r3, [r7, #8]
    7a3a:	2230      	movs	r2, #48	; 0x30
    7a3c:	18ba      	adds	r2, r7, r2
    7a3e:	8812      	ldrh	r2, [r2, #0]
    7a40:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    7a42:	2319      	movs	r3, #25
    7a44:	18fb      	adds	r3, r7, r3
    7a46:	2201      	movs	r2, #1
    7a48:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    7a4a:	231a      	movs	r3, #26
    7a4c:	18fb      	adds	r3, r7, r3
    7a4e:	2230      	movs	r2, #48	; 0x30
    7a50:	18ba      	adds	r2, r7, r2
    7a52:	8812      	ldrh	r2, [r2, #0]
    7a54:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    7a56:	230f      	movs	r3, #15
    7a58:	18fb      	adds	r3, r7, r3
    7a5a:	781b      	ldrb	r3, [r3, #0]
    7a5c:	b25b      	sxtb	r3, r3
    7a5e:	4a45      	ldr	r2, [pc, #276]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7a60:	011b      	lsls	r3, r3, #4
    7a62:	18d3      	adds	r3, r2, r3
    7a64:	3304      	adds	r3, #4
    7a66:	881b      	ldrh	r3, [r3, #0]
    7a68:	b29b      	uxth	r3, r3
    7a6a:	221a      	movs	r2, #26
    7a6c:	18ba      	adds	r2, r7, r2
    7a6e:	8812      	ldrh	r2, [r2, #0]
    7a70:	1ad3      	subs	r3, r2, r3
    7a72:	b29a      	uxth	r2, r3
    7a74:	2316      	movs	r3, #22
    7a76:	18fb      	adds	r3, r7, r3
    7a78:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    7a7a:	2316      	movs	r3, #22
    7a7c:	18fb      	adds	r3, r7, r3
    7a7e:	2200      	movs	r2, #0
    7a80:	5e9b      	ldrsh	r3, [r3, r2]
    7a82:	2b00      	cmp	r3, #0
    7a84:	dd0f      	ble.n	7aa6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    7a86:	2319      	movs	r3, #25
    7a88:	18fb      	adds	r3, r7, r3
    7a8a:	2200      	movs	r2, #0
    7a8c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    7a8e:	230f      	movs	r3, #15
    7a90:	18fb      	adds	r3, r7, r3
    7a92:	2200      	movs	r2, #0
    7a94:	569a      	ldrsb	r2, [r3, r2]
    7a96:	231a      	movs	r3, #26
    7a98:	18fb      	adds	r3, r7, r3
    7a9a:	4936      	ldr	r1, [pc, #216]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7a9c:	0112      	lsls	r2, r2, #4
    7a9e:	188a      	adds	r2, r1, r2
    7aa0:	3204      	adds	r2, #4
    7aa2:	8812      	ldrh	r2, [r2, #0]
    7aa4:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    7aa6:	230f      	movs	r3, #15
    7aa8:	18fb      	adds	r3, r7, r3
    7aaa:	2200      	movs	r2, #0
    7aac:	569a      	ldrsb	r2, [r3, r2]
    7aae:	4b31      	ldr	r3, [pc, #196]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7ab0:	0112      	lsls	r2, r2, #4
    7ab2:	58d1      	ldr	r1, [r2, r3]
    7ab4:	2319      	movs	r3, #25
    7ab6:	18fb      	adds	r3, r7, r3
    7ab8:	781c      	ldrb	r4, [r3, #0]
    7aba:	231a      	movs	r3, #26
    7abc:	18fb      	adds	r3, r7, r3
    7abe:	881a      	ldrh	r2, [r3, #0]
    7ac0:	69f8      	ldr	r0, [r7, #28]
    7ac2:	0023      	movs	r3, r4
    7ac4:	4c2c      	ldr	r4, [pc, #176]	; (7b78 <Socket_ReadSocketData+0x1b4>)
    7ac6:	47a0      	blx	r4
    7ac8:	1e03      	subs	r3, r0, #0
    7aca:	d138      	bne.n	7b3e <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    7acc:	230f      	movs	r3, #15
    7ace:	18fb      	adds	r3, r7, r3
    7ad0:	2200      	movs	r2, #0
    7ad2:	569a      	ldrsb	r2, [r3, r2]
    7ad4:	4b27      	ldr	r3, [pc, #156]	; (7b74 <Socket_ReadSocketData+0x1b0>)
    7ad6:	0112      	lsls	r2, r2, #4
    7ad8:	58d2      	ldr	r2, [r2, r3]
    7ada:	68bb      	ldr	r3, [r7, #8]
    7adc:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    7ade:	231a      	movs	r3, #26
    7ae0:	18fb      	adds	r3, r7, r3
    7ae2:	2200      	movs	r2, #0
    7ae4:	5e9a      	ldrsh	r2, [r3, r2]
    7ae6:	68bb      	ldr	r3, [r7, #8]
    7ae8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    7aea:	68bb      	ldr	r3, [r7, #8]
    7aec:	88da      	ldrh	r2, [r3, #6]
    7aee:	231a      	movs	r3, #26
    7af0:	18fb      	adds	r3, r7, r3
    7af2:	881b      	ldrh	r3, [r3, #0]
    7af4:	1ad3      	subs	r3, r2, r3
    7af6:	b29a      	uxth	r2, r3
    7af8:	68bb      	ldr	r3, [r7, #8]
    7afa:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    7afc:	4b1f      	ldr	r3, [pc, #124]	; (7b7c <Socket_ReadSocketData+0x1b8>)
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	2b00      	cmp	r3, #0
    7b02:	d00b      	beq.n	7b1c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    7b04:	4b1d      	ldr	r3, [pc, #116]	; (7b7c <Socket_ReadSocketData+0x1b8>)
    7b06:	681b      	ldr	r3, [r3, #0]
    7b08:	68bc      	ldr	r4, [r7, #8]
    7b0a:	220e      	movs	r2, #14
    7b0c:	18ba      	adds	r2, r7, r2
    7b0e:	7811      	ldrb	r1, [r2, #0]
    7b10:	220f      	movs	r2, #15
    7b12:	18ba      	adds	r2, r7, r2
    7b14:	2000      	movs	r0, #0
    7b16:	5610      	ldrsb	r0, [r2, r0]
    7b18:	0022      	movs	r2, r4
    7b1a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    7b1c:	2330      	movs	r3, #48	; 0x30
    7b1e:	18f9      	adds	r1, r7, r3
    7b20:	2330      	movs	r3, #48	; 0x30
    7b22:	18fa      	adds	r2, r7, r3
    7b24:	231a      	movs	r3, #26
    7b26:	18fb      	adds	r3, r7, r3
    7b28:	8812      	ldrh	r2, [r2, #0]
    7b2a:	881b      	ldrh	r3, [r3, #0]
    7b2c:	1ad3      	subs	r3, r2, r3
    7b2e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    7b30:	231a      	movs	r3, #26
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	881b      	ldrh	r3, [r3, #0]
    7b36:	69fa      	ldr	r2, [r7, #28]
    7b38:	18d3      	adds	r3, r2, r3
    7b3a:	61fb      	str	r3, [r7, #28]
    7b3c:	e010      	b.n	7b60 <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    7b3e:	4b10      	ldr	r3, [pc, #64]	; (7b80 <Socket_ReadSocketData+0x1bc>)
    7b40:	0018      	movs	r0, r3
    7b42:	4b10      	ldr	r3, [pc, #64]	; (7b84 <Socket_ReadSocketData+0x1c0>)
    7b44:	4798      	blx	r3
    7b46:	2330      	movs	r3, #48	; 0x30
    7b48:	18fb      	adds	r3, r7, r3
    7b4a:	881a      	ldrh	r2, [r3, #0]
    7b4c:	4b0e      	ldr	r3, [pc, #56]	; (7b88 <Socket_ReadSocketData+0x1c4>)
    7b4e:	0011      	movs	r1, r2
    7b50:	0018      	movs	r0, r3
    7b52:	4b0c      	ldr	r3, [pc, #48]	; (7b84 <Socket_ReadSocketData+0x1c0>)
    7b54:	4798      	blx	r3
    7b56:	200d      	movs	r0, #13
    7b58:	4b0c      	ldr	r3, [pc, #48]	; (7b8c <Socket_ReadSocketData+0x1c8>)
    7b5a:	4798      	blx	r3
				break;
    7b5c:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    7b5e:	e005      	b.n	7b6c <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    7b60:	2330      	movs	r3, #48	; 0x30
    7b62:	18fb      	adds	r3, r7, r3
    7b64:	881b      	ldrh	r3, [r3, #0]
    7b66:	2b00      	cmp	r3, #0
    7b68:	d000      	beq.n	7b6c <Socket_ReadSocketData+0x1a8>
    7b6a:	e76a      	b.n	7a42 <Socket_ReadSocketData+0x7e>
	}
}
    7b6c:	46c0      	nop			; (mov r8, r8)
    7b6e:	46bd      	mov	sp, r7
    7b70:	b009      	add	sp, #36	; 0x24
    7b72:	bd90      	pop	{r4, r7, pc}
    7b74:	20004688 	.word	0x20004688
    7b78:	00004a79 	.word	0x00004a79
    7b7c:	20004738 	.word	0x20004738
    7b80:	00013b78 	.word	0x00013b78
    7b84:	000114d9 	.word	0x000114d9
    7b88:	00013b84 	.word	0x00013b84
    7b8c:	0001150d 	.word	0x0001150d

00007b90 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    7b90:	b590      	push	{r4, r7, lr}
    7b92:	b0bb      	sub	sp, #236	; 0xec
    7b94:	af02      	add	r7, sp, #8
    7b96:	603a      	str	r2, [r7, #0]
    7b98:	1dfb      	adds	r3, r7, #7
    7b9a:	1c02      	adds	r2, r0, #0
    7b9c:	701a      	strb	r2, [r3, #0]
    7b9e:	1d3b      	adds	r3, r7, #4
    7ba0:	1c0a      	adds	r2, r1, #0
    7ba2:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    7ba4:	1dfb      	adds	r3, r7, #7
    7ba6:	781b      	ldrb	r3, [r3, #0]
    7ba8:	2b41      	cmp	r3, #65	; 0x41
    7baa:	d120      	bne.n	7bee <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    7bac:	23cc      	movs	r3, #204	; 0xcc
    7bae:	18f9      	adds	r1, r7, r3
    7bb0:	6838      	ldr	r0, [r7, #0]
    7bb2:	2300      	movs	r3, #0
    7bb4:	2204      	movs	r2, #4
    7bb6:	4c8d      	ldr	r4, [pc, #564]	; (7dec <m2m_ip_cb+0x25c>)
    7bb8:	47a0      	blx	r4
    7bba:	1e03      	subs	r3, r0, #0
    7bbc:	d000      	beq.n	7bc0 <m2m_ip_cb+0x30>
    7bbe:	e264      	b.n	808a <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    7bc0:	23cc      	movs	r3, #204	; 0xcc
    7bc2:	18fb      	adds	r3, r7, r3
    7bc4:	2201      	movs	r2, #1
    7bc6:	569a      	ldrsb	r2, [r3, r2]
    7bc8:	23c8      	movs	r3, #200	; 0xc8
    7bca:	18fb      	adds	r3, r7, r3
    7bcc:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7bce:	4b88      	ldr	r3, [pc, #544]	; (7df0 <m2m_ip_cb+0x260>)
    7bd0:	681b      	ldr	r3, [r3, #0]
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d100      	bne.n	7bd8 <m2m_ip_cb+0x48>
    7bd6:	e258      	b.n	808a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    7bd8:	4b85      	ldr	r3, [pc, #532]	; (7df0 <m2m_ip_cb+0x260>)
    7bda:	681b      	ldr	r3, [r3, #0]
    7bdc:	22cc      	movs	r2, #204	; 0xcc
    7bde:	18ba      	adds	r2, r7, r2
    7be0:	2000      	movs	r0, #0
    7be2:	5610      	ldrsb	r0, [r2, r0]
    7be4:	22c8      	movs	r2, #200	; 0xc8
    7be6:	18ba      	adds	r2, r7, r2
    7be8:	2101      	movs	r1, #1
    7bea:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7bec:	e24d      	b.n	808a <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    7bee:	1dfb      	adds	r3, r7, #7
    7bf0:	781b      	ldrb	r3, [r3, #0]
    7bf2:	2b42      	cmp	r3, #66	; 0x42
    7bf4:	d120      	bne.n	7c38 <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    7bf6:	23c4      	movs	r3, #196	; 0xc4
    7bf8:	18f9      	adds	r1, r7, r3
    7bfa:	6838      	ldr	r0, [r7, #0]
    7bfc:	2300      	movs	r3, #0
    7bfe:	2204      	movs	r2, #4
    7c00:	4c7a      	ldr	r4, [pc, #488]	; (7dec <m2m_ip_cb+0x25c>)
    7c02:	47a0      	blx	r4
    7c04:	1e03      	subs	r3, r0, #0
    7c06:	d000      	beq.n	7c0a <m2m_ip_cb+0x7a>
    7c08:	e23f      	b.n	808a <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    7c0a:	23c4      	movs	r3, #196	; 0xc4
    7c0c:	18fb      	adds	r3, r7, r3
    7c0e:	2201      	movs	r2, #1
    7c10:	569a      	ldrsb	r2, [r3, r2]
    7c12:	23c0      	movs	r3, #192	; 0xc0
    7c14:	18fb      	adds	r3, r7, r3
    7c16:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    7c18:	4b75      	ldr	r3, [pc, #468]	; (7df0 <m2m_ip_cb+0x260>)
    7c1a:	681b      	ldr	r3, [r3, #0]
    7c1c:	2b00      	cmp	r3, #0
    7c1e:	d100      	bne.n	7c22 <m2m_ip_cb+0x92>
    7c20:	e233      	b.n	808a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    7c22:	4b73      	ldr	r3, [pc, #460]	; (7df0 <m2m_ip_cb+0x260>)
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	22c4      	movs	r2, #196	; 0xc4
    7c28:	18ba      	adds	r2, r7, r2
    7c2a:	2000      	movs	r0, #0
    7c2c:	5610      	ldrsb	r0, [r2, r0]
    7c2e:	22c0      	movs	r2, #192	; 0xc0
    7c30:	18ba      	adds	r2, r7, r2
    7c32:	2102      	movs	r1, #2
    7c34:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7c36:	e228      	b.n	808a <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    7c38:	1dfb      	adds	r3, r7, #7
    7c3a:	781b      	ldrb	r3, [r3, #0]
    7c3c:	2b43      	cmp	r3, #67	; 0x43
    7c3e:	d16b      	bne.n	7d18 <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    7c40:	23b4      	movs	r3, #180	; 0xb4
    7c42:	18f9      	adds	r1, r7, r3
    7c44:	6838      	ldr	r0, [r7, #0]
    7c46:	2300      	movs	r3, #0
    7c48:	220c      	movs	r2, #12
    7c4a:	4c68      	ldr	r4, [pc, #416]	; (7dec <m2m_ip_cb+0x25c>)
    7c4c:	47a0      	blx	r4
    7c4e:	1e03      	subs	r3, r0, #0
    7c50:	d000      	beq.n	7c54 <m2m_ip_cb+0xc4>
    7c52:	e21a      	b.n	808a <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    7c54:	23b4      	movs	r3, #180	; 0xb4
    7c56:	18fb      	adds	r3, r7, r3
    7c58:	7a5b      	ldrb	r3, [r3, #9]
    7c5a:	b25b      	sxtb	r3, r3
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	db34      	blt.n	7cca <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    7c60:	23b4      	movs	r3, #180	; 0xb4
    7c62:	18fb      	adds	r3, r7, r3
    7c64:	7a5b      	ldrb	r3, [r3, #9]
    7c66:	b25b      	sxtb	r3, r3
    7c68:	4a62      	ldr	r2, [pc, #392]	; (7df4 <m2m_ip_cb+0x264>)
    7c6a:	011b      	lsls	r3, r3, #4
    7c6c:	18d3      	adds	r3, r2, r3
    7c6e:	330b      	adds	r3, #11
    7c70:	2200      	movs	r2, #0
    7c72:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    7c74:	23b4      	movs	r3, #180	; 0xb4
    7c76:	18fb      	adds	r3, r7, r3
    7c78:	7a5b      	ldrb	r3, [r3, #9]
    7c7a:	b25b      	sxtb	r3, r3
    7c7c:	4a5d      	ldr	r2, [pc, #372]	; (7df4 <m2m_ip_cb+0x264>)
    7c7e:	011b      	lsls	r3, r3, #4
    7c80:	18d3      	adds	r3, r2, r3
    7c82:	330a      	adds	r3, #10
    7c84:	2201      	movs	r2, #1
    7c86:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    7c88:	4b5b      	ldr	r3, [pc, #364]	; (7df8 <m2m_ip_cb+0x268>)
    7c8a:	881b      	ldrh	r3, [r3, #0]
    7c8c:	b29b      	uxth	r3, r3
    7c8e:	3301      	adds	r3, #1
    7c90:	b29a      	uxth	r2, r3
    7c92:	4b59      	ldr	r3, [pc, #356]	; (7df8 <m2m_ip_cb+0x268>)
    7c94:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    7c96:	4b58      	ldr	r3, [pc, #352]	; (7df8 <m2m_ip_cb+0x268>)
    7c98:	881b      	ldrh	r3, [r3, #0]
    7c9a:	b29b      	uxth	r3, r3
    7c9c:	2b00      	cmp	r3, #0
    7c9e:	d106      	bne.n	7cae <m2m_ip_cb+0x11e>
					++gu16SessionID;
    7ca0:	4b55      	ldr	r3, [pc, #340]	; (7df8 <m2m_ip_cb+0x268>)
    7ca2:	881b      	ldrh	r3, [r3, #0]
    7ca4:	b29b      	uxth	r3, r3
    7ca6:	3301      	adds	r3, #1
    7ca8:	b29a      	uxth	r2, r3
    7caa:	4b53      	ldr	r3, [pc, #332]	; (7df8 <m2m_ip_cb+0x268>)
    7cac:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    7cae:	23b4      	movs	r3, #180	; 0xb4
    7cb0:	18fb      	adds	r3, r7, r3
    7cb2:	7a5b      	ldrb	r3, [r3, #9]
    7cb4:	b25b      	sxtb	r3, r3
    7cb6:	0018      	movs	r0, r3
    7cb8:	4b4f      	ldr	r3, [pc, #316]	; (7df8 <m2m_ip_cb+0x268>)
    7cba:	881b      	ldrh	r3, [r3, #0]
    7cbc:	b299      	uxth	r1, r3
    7cbe:	4a4d      	ldr	r2, [pc, #308]	; (7df4 <m2m_ip_cb+0x264>)
    7cc0:	0103      	lsls	r3, r0, #4
    7cc2:	18d3      	adds	r3, r2, r3
    7cc4:	3306      	adds	r3, #6
    7cc6:	1c0a      	adds	r2, r1, #0
    7cc8:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    7cca:	23b4      	movs	r3, #180	; 0xb4
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	2209      	movs	r2, #9
    7cd0:	569a      	ldrsb	r2, [r3, r2]
    7cd2:	23a0      	movs	r3, #160	; 0xa0
    7cd4:	18fb      	adds	r3, r7, r3
    7cd6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    7cd8:	23a0      	movs	r3, #160	; 0xa0
    7cda:	18fb      	adds	r3, r7, r3
    7cdc:	2202      	movs	r2, #2
    7cde:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7ce0:	23b4      	movs	r3, #180	; 0xb4
    7ce2:	18fb      	adds	r3, r7, r3
    7ce4:	885a      	ldrh	r2, [r3, #2]
    7ce6:	23a0      	movs	r3, #160	; 0xa0
    7ce8:	18fb      	adds	r3, r7, r3
    7cea:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7cec:	23b4      	movs	r3, #180	; 0xb4
    7cee:	18fb      	adds	r3, r7, r3
    7cf0:	685a      	ldr	r2, [r3, #4]
    7cf2:	23a0      	movs	r3, #160	; 0xa0
    7cf4:	18fb      	adds	r3, r7, r3
    7cf6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    7cf8:	4b3d      	ldr	r3, [pc, #244]	; (7df0 <m2m_ip_cb+0x260>)
    7cfa:	681b      	ldr	r3, [r3, #0]
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d100      	bne.n	7d02 <m2m_ip_cb+0x172>
    7d00:	e1c3      	b.n	808a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    7d02:	4b3b      	ldr	r3, [pc, #236]	; (7df0 <m2m_ip_cb+0x260>)
    7d04:	681b      	ldr	r3, [r3, #0]
    7d06:	22b4      	movs	r2, #180	; 0xb4
    7d08:	18ba      	adds	r2, r7, r2
    7d0a:	2008      	movs	r0, #8
    7d0c:	5610      	ldrsb	r0, [r2, r0]
    7d0e:	22a0      	movs	r2, #160	; 0xa0
    7d10:	18ba      	adds	r2, r7, r2
    7d12:	2104      	movs	r1, #4
    7d14:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7d16:	e1b8      	b.n	808a <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    7d18:	1dfb      	adds	r3, r7, #7
    7d1a:	781b      	ldrb	r3, [r3, #0]
    7d1c:	2b44      	cmp	r3, #68	; 0x44
    7d1e:	d003      	beq.n	7d28 <m2m_ip_cb+0x198>
    7d20:	1dfb      	adds	r3, r7, #7
    7d22:	781b      	ldrb	r3, [r3, #0]
    7d24:	2b4b      	cmp	r3, #75	; 0x4b
    7d26:	d13d      	bne.n	7da4 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    7d28:	239c      	movs	r3, #156	; 0x9c
    7d2a:	18f9      	adds	r1, r7, r3
    7d2c:	6838      	ldr	r0, [r7, #0]
    7d2e:	2300      	movs	r3, #0
    7d30:	2204      	movs	r2, #4
    7d32:	4c2e      	ldr	r4, [pc, #184]	; (7dec <m2m_ip_cb+0x25c>)
    7d34:	47a0      	blx	r4
    7d36:	1e03      	subs	r3, r0, #0
    7d38:	d000      	beq.n	7d3c <m2m_ip_cb+0x1ac>
    7d3a:	e1a1      	b.n	8080 <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    7d3c:	239c      	movs	r3, #156	; 0x9c
    7d3e:	18fb      	adds	r3, r7, r3
    7d40:	2200      	movs	r2, #0
    7d42:	569a      	ldrsb	r2, [r3, r2]
    7d44:	2398      	movs	r3, #152	; 0x98
    7d46:	18fb      	adds	r3, r7, r3
    7d48:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7d4a:	239c      	movs	r3, #156	; 0x9c
    7d4c:	18fb      	adds	r3, r7, r3
    7d4e:	2201      	movs	r2, #1
    7d50:	569a      	ldrsb	r2, [r3, r2]
    7d52:	2398      	movs	r3, #152	; 0x98
    7d54:	18fb      	adds	r3, r7, r3
    7d56:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    7d58:	239c      	movs	r3, #156	; 0x9c
    7d5a:	18fb      	adds	r3, r7, r3
    7d5c:	785b      	ldrb	r3, [r3, #1]
    7d5e:	b25b      	sxtb	r3, r3
    7d60:	2b00      	cmp	r3, #0
    7d62:	d10f      	bne.n	7d84 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7d64:	239c      	movs	r3, #156	; 0x9c
    7d66:	18fb      	adds	r3, r7, r3
    7d68:	781b      	ldrb	r3, [r3, #0]
    7d6a:	b25b      	sxtb	r3, r3
    7d6c:	0018      	movs	r0, r3
    7d6e:	239c      	movs	r3, #156	; 0x9c
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	885b      	ldrh	r3, [r3, #2]
    7d74:	3b08      	subs	r3, #8
    7d76:	b299      	uxth	r1, r3
    7d78:	4a1e      	ldr	r2, [pc, #120]	; (7df4 <m2m_ip_cb+0x264>)
    7d7a:	0103      	lsls	r3, r0, #4
    7d7c:	18d3      	adds	r3, r2, r3
    7d7e:	3308      	adds	r3, #8
    7d80:	1c0a      	adds	r2, r1, #0
    7d82:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    7d84:	4b1a      	ldr	r3, [pc, #104]	; (7df0 <m2m_ip_cb+0x260>)
    7d86:	681b      	ldr	r3, [r3, #0]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d100      	bne.n	7d8e <m2m_ip_cb+0x1fe>
    7d8c:	e178      	b.n	8080 <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    7d8e:	4b18      	ldr	r3, [pc, #96]	; (7df0 <m2m_ip_cb+0x260>)
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	229c      	movs	r2, #156	; 0x9c
    7d94:	18ba      	adds	r2, r7, r2
    7d96:	2000      	movs	r0, #0
    7d98:	5610      	ldrsb	r0, [r2, r0]
    7d9a:	2298      	movs	r2, #152	; 0x98
    7d9c:	18ba      	adds	r2, r7, r2
    7d9e:	2105      	movs	r1, #5
    7da0:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    7da2:	e16d      	b.n	8080 <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    7da4:	1dfb      	adds	r3, r7, #7
    7da6:	781b      	ldrb	r3, [r3, #0]
    7da8:	2b4a      	cmp	r3, #74	; 0x4a
    7daa:	d129      	bne.n	7e00 <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    7dac:	230c      	movs	r3, #12
    7dae:	18f9      	adds	r1, r7, r3
    7db0:	6838      	ldr	r0, [r7, #0]
    7db2:	2300      	movs	r3, #0
    7db4:	2244      	movs	r2, #68	; 0x44
    7db6:	4c0d      	ldr	r4, [pc, #52]	; (7dec <m2m_ip_cb+0x25c>)
    7db8:	47a0      	blx	r4
    7dba:	1e03      	subs	r3, r0, #0
    7dbc:	d000      	beq.n	7dc0 <m2m_ip_cb+0x230>
    7dbe:	e164      	b.n	808a <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    7dc0:	230c      	movs	r3, #12
    7dc2:	18fb      	adds	r3, r7, r3
    7dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7dc6:	230c      	movs	r3, #12
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    7dcc:	4b0b      	ldr	r3, [pc, #44]	; (7dfc <m2m_ip_cb+0x26c>)
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d100      	bne.n	7dd6 <m2m_ip_cb+0x246>
    7dd4:	e159      	b.n	808a <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    7dd6:	4b09      	ldr	r3, [pc, #36]	; (7dfc <m2m_ip_cb+0x26c>)
    7dd8:	681a      	ldr	r2, [r3, #0]
    7dda:	230c      	movs	r3, #12
    7ddc:	18fb      	adds	r3, r7, r3
    7dde:	6c19      	ldr	r1, [r3, #64]	; 0x40
    7de0:	230c      	movs	r3, #12
    7de2:	18fb      	adds	r3, r7, r3
    7de4:	0018      	movs	r0, r3
    7de6:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7de8:	e14f      	b.n	808a <m2m_ip_cb+0x4fa>
    7dea:	46c0      	nop			; (mov r8, r8)
    7dec:	00004a79 	.word	0x00004a79
    7df0:	20004738 	.word	0x20004738
    7df4:	20004688 	.word	0x20004688
    7df8:	200000fa 	.word	0x200000fa
    7dfc:	20004740 	.word	0x20004740
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    7e00:	1dfb      	adds	r3, r7, #7
    7e02:	781b      	ldrb	r3, [r3, #0]
    7e04:	2b46      	cmp	r3, #70	; 0x46
    7e06:	d008      	beq.n	7e1a <m2m_ip_cb+0x28a>
    7e08:	1dfb      	adds	r3, r7, #7
    7e0a:	781b      	ldrb	r3, [r3, #0]
    7e0c:	2b48      	cmp	r3, #72	; 0x48
    7e0e:	d004      	beq.n	7e1a <m2m_ip_cb+0x28a>
    7e10:	1dfb      	adds	r3, r7, #7
    7e12:	781b      	ldrb	r3, [r3, #0]
    7e14:	2b4d      	cmp	r3, #77	; 0x4d
    7e16:	d000      	beq.n	7e1a <m2m_ip_cb+0x28a>
    7e18:	e0b4      	b.n	7f84 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    7e1a:	23df      	movs	r3, #223	; 0xdf
    7e1c:	18fb      	adds	r3, r7, r3
    7e1e:	2206      	movs	r2, #6
    7e20:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    7e22:	1dfb      	adds	r3, r7, #7
    7e24:	781b      	ldrb	r3, [r3, #0]
    7e26:	2b48      	cmp	r3, #72	; 0x48
    7e28:	d103      	bne.n	7e32 <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    7e2a:	23df      	movs	r3, #223	; 0xdf
    7e2c:	18fb      	adds	r3, r7, r3
    7e2e:	2209      	movs	r2, #9
    7e30:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    7e32:	23d8      	movs	r3, #216	; 0xd8
    7e34:	18fb      	adds	r3, r7, r3
    7e36:	2210      	movs	r2, #16
    7e38:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    7e3a:	23d8      	movs	r3, #216	; 0xd8
    7e3c:	18fb      	adds	r3, r7, r3
    7e3e:	881a      	ldrh	r2, [r3, #0]
    7e40:	2388      	movs	r3, #136	; 0x88
    7e42:	18f9      	adds	r1, r7, r3
    7e44:	6838      	ldr	r0, [r7, #0]
    7e46:	2300      	movs	r3, #0
    7e48:	4c92      	ldr	r4, [pc, #584]	; (8094 <m2m_ip_cb+0x504>)
    7e4a:	47a0      	blx	r4
    7e4c:	1e03      	subs	r3, r0, #0
    7e4e:	d000      	beq.n	7e52 <m2m_ip_cb+0x2c2>
    7e50:	e118      	b.n	8084 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    7e52:	23d6      	movs	r3, #214	; 0xd6
    7e54:	18fb      	adds	r3, r7, r3
    7e56:	2200      	movs	r2, #0
    7e58:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    7e5a:	23d5      	movs	r3, #213	; 0xd5
    7e5c:	18fb      	adds	r3, r7, r3
    7e5e:	2288      	movs	r2, #136	; 0x88
    7e60:	18ba      	adds	r2, r7, r2
    7e62:	7b12      	ldrb	r2, [r2, #12]
    7e64:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    7e66:	23d6      	movs	r3, #214	; 0xd6
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	2288      	movs	r2, #136	; 0x88
    7e6c:	18ba      	adds	r2, r7, r2
    7e6e:	89d2      	ldrh	r2, [r2, #14]
    7e70:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    7e72:	23d5      	movs	r3, #213	; 0xd5
    7e74:	18fb      	adds	r3, r7, r3
    7e76:	781b      	ldrb	r3, [r3, #0]
    7e78:	b25b      	sxtb	r3, r3
    7e7a:	4a87      	ldr	r2, [pc, #540]	; (8098 <m2m_ip_cb+0x508>)
    7e7c:	011b      	lsls	r3, r3, #4
    7e7e:	18d3      	adds	r3, r2, r3
    7e80:	330c      	adds	r3, #12
    7e82:	2200      	movs	r2, #0
    7e84:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    7e86:	23d2      	movs	r3, #210	; 0xd2
    7e88:	18fb      	adds	r3, r7, r3
    7e8a:	2288      	movs	r2, #136	; 0x88
    7e8c:	18ba      	adds	r2, r7, r2
    7e8e:	8912      	ldrh	r2, [r2, #8]
    7e90:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    7e92:	23d0      	movs	r3, #208	; 0xd0
    7e94:	18fb      	adds	r3, r7, r3
    7e96:	2288      	movs	r2, #136	; 0x88
    7e98:	18ba      	adds	r2, r7, r2
    7e9a:	8952      	ldrh	r2, [r2, #10]
    7e9c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    7e9e:	2388      	movs	r3, #136	; 0x88
    7ea0:	18fb      	adds	r3, r7, r3
    7ea2:	885a      	ldrh	r2, [r3, #2]
    7ea4:	2370      	movs	r3, #112	; 0x70
    7ea6:	18fb      	adds	r3, r7, r3
    7ea8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    7eaa:	2388      	movs	r3, #136	; 0x88
    7eac:	18fb      	adds	r3, r7, r3
    7eae:	685a      	ldr	r2, [r3, #4]
    7eb0:	2370      	movs	r3, #112	; 0x70
    7eb2:	18fb      	adds	r3, r7, r3
    7eb4:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7eb6:	23d5      	movs	r3, #213	; 0xd5
    7eb8:	18fb      	adds	r3, r7, r3
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	b25b      	sxtb	r3, r3
    7ebe:	4a76      	ldr	r2, [pc, #472]	; (8098 <m2m_ip_cb+0x508>)
    7ec0:	011b      	lsls	r3, r3, #4
    7ec2:	18d3      	adds	r3, r2, r3
    7ec4:	3306      	adds	r3, #6
    7ec6:	881b      	ldrh	r3, [r3, #0]
    7ec8:	b29b      	uxth	r3, r3
    7eca:	22d6      	movs	r2, #214	; 0xd6
    7ecc:	18ba      	adds	r2, r7, r2
    7ece:	8812      	ldrh	r2, [r2, #0]
    7ed0:	429a      	cmp	r2, r3
    7ed2:	d148      	bne.n	7f66 <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    7ed4:	23d2      	movs	r3, #210	; 0xd2
    7ed6:	18fb      	adds	r3, r7, r3
    7ed8:	2200      	movs	r2, #0
    7eda:	5e9b      	ldrsh	r3, [r3, r2]
    7edc:	2b00      	cmp	r3, #0
    7ede:	dd25      	ble.n	7f2c <m2m_ip_cb+0x39c>
    7ee0:	23d2      	movs	r3, #210	; 0xd2
    7ee2:	18fb      	adds	r3, r7, r3
    7ee4:	2200      	movs	r2, #0
    7ee6:	5e9a      	ldrsh	r2, [r3, r2]
    7ee8:	1d3b      	adds	r3, r7, #4
    7eea:	881b      	ldrh	r3, [r3, #0]
    7eec:	429a      	cmp	r2, r3
    7eee:	da1d      	bge.n	7f2c <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    7ef0:	23d0      	movs	r3, #208	; 0xd0
    7ef2:	18fb      	adds	r3, r7, r3
    7ef4:	881b      	ldrh	r3, [r3, #0]
    7ef6:	683a      	ldr	r2, [r7, #0]
    7ef8:	18d3      	adds	r3, r2, r3
    7efa:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    7efc:	23d8      	movs	r3, #216	; 0xd8
    7efe:	18fb      	adds	r3, r7, r3
    7f00:	22d2      	movs	r2, #210	; 0xd2
    7f02:	18ba      	adds	r2, r7, r2
    7f04:	8812      	ldrh	r2, [r2, #0]
    7f06:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    7f08:	683c      	ldr	r4, [r7, #0]
    7f0a:	23df      	movs	r3, #223	; 0xdf
    7f0c:	18fb      	adds	r3, r7, r3
    7f0e:	781a      	ldrb	r2, [r3, #0]
    7f10:	2370      	movs	r3, #112	; 0x70
    7f12:	18f9      	adds	r1, r7, r3
    7f14:	23d5      	movs	r3, #213	; 0xd5
    7f16:	18fb      	adds	r3, r7, r3
    7f18:	2000      	movs	r0, #0
    7f1a:	5618      	ldrsb	r0, [r3, r0]
    7f1c:	23d8      	movs	r3, #216	; 0xd8
    7f1e:	18fb      	adds	r3, r7, r3
    7f20:	881b      	ldrh	r3, [r3, #0]
    7f22:	9300      	str	r3, [sp, #0]
    7f24:	0023      	movs	r3, r4
    7f26:	4c5d      	ldr	r4, [pc, #372]	; (809c <m2m_ip_cb+0x50c>)
    7f28:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7f2a:	e0ab      	b.n	8084 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    7f2c:	2370      	movs	r3, #112	; 0x70
    7f2e:	18fb      	adds	r3, r7, r3
    7f30:	22d2      	movs	r2, #210	; 0xd2
    7f32:	18ba      	adds	r2, r7, r2
    7f34:	8812      	ldrh	r2, [r2, #0]
    7f36:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    7f38:	2370      	movs	r3, #112	; 0x70
    7f3a:	18fb      	adds	r3, r7, r3
    7f3c:	2200      	movs	r2, #0
    7f3e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    7f40:	4b57      	ldr	r3, [pc, #348]	; (80a0 <m2m_ip_cb+0x510>)
    7f42:	681b      	ldr	r3, [r3, #0]
    7f44:	2b00      	cmp	r3, #0
    7f46:	d100      	bne.n	7f4a <m2m_ip_cb+0x3ba>
    7f48:	e09c      	b.n	8084 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    7f4a:	4b55      	ldr	r3, [pc, #340]	; (80a0 <m2m_ip_cb+0x510>)
    7f4c:	681b      	ldr	r3, [r3, #0]
    7f4e:	2270      	movs	r2, #112	; 0x70
    7f50:	18bc      	adds	r4, r7, r2
    7f52:	22df      	movs	r2, #223	; 0xdf
    7f54:	18ba      	adds	r2, r7, r2
    7f56:	7811      	ldrb	r1, [r2, #0]
    7f58:	22d5      	movs	r2, #213	; 0xd5
    7f5a:	18ba      	adds	r2, r7, r2
    7f5c:	2000      	movs	r0, #0
    7f5e:	5610      	ldrsb	r0, [r2, r0]
    7f60:	0022      	movs	r2, r4
    7f62:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7f64:	e08e      	b.n	8084 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    7f66:	23d8      	movs	r3, #216	; 0xd8
    7f68:	18fa      	adds	r2, r7, r3
    7f6a:	1d3b      	adds	r3, r7, #4
    7f6c:	8812      	ldrh	r2, [r2, #0]
    7f6e:	881b      	ldrh	r3, [r3, #0]
    7f70:	429a      	cmp	r2, r3
    7f72:	d300      	bcc.n	7f76 <m2m_ip_cb+0x3e6>
    7f74:	e086      	b.n	8084 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    7f76:	2301      	movs	r3, #1
    7f78:	2200      	movs	r2, #0
    7f7a:	2100      	movs	r1, #0
    7f7c:	2000      	movs	r0, #0
    7f7e:	4c45      	ldr	r4, [pc, #276]	; (8094 <m2m_ip_cb+0x504>)
    7f80:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    7f82:	e07f      	b.n	8084 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    7f84:	1dfb      	adds	r3, r7, #7
    7f86:	781b      	ldrb	r3, [r3, #0]
    7f88:	2b45      	cmp	r3, #69	; 0x45
    7f8a:	d007      	beq.n	7f9c <m2m_ip_cb+0x40c>
    7f8c:	1dfb      	adds	r3, r7, #7
    7f8e:	781b      	ldrb	r3, [r3, #0]
    7f90:	2b47      	cmp	r3, #71	; 0x47
    7f92:	d003      	beq.n	7f9c <m2m_ip_cb+0x40c>
    7f94:	1dfb      	adds	r3, r7, #7
    7f96:	781b      	ldrb	r3, [r3, #0]
    7f98:	2b4c      	cmp	r3, #76	; 0x4c
    7f9a:	d14c      	bne.n	8036 <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    7f9c:	23de      	movs	r3, #222	; 0xde
    7f9e:	18fb      	adds	r3, r7, r3
    7fa0:	2207      	movs	r2, #7
    7fa2:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    7fa4:	1dfb      	adds	r3, r7, #7
    7fa6:	781b      	ldrb	r3, [r3, #0]
    7fa8:	2b47      	cmp	r3, #71	; 0x47
    7faa:	d103      	bne.n	7fb4 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7fac:	23de      	movs	r3, #222	; 0xde
    7fae:	18fb      	adds	r3, r7, r3
    7fb0:	2208      	movs	r2, #8
    7fb2:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7fb4:	2364      	movs	r3, #100	; 0x64
    7fb6:	18f9      	adds	r1, r7, r3
    7fb8:	6838      	ldr	r0, [r7, #0]
    7fba:	2300      	movs	r3, #0
    7fbc:	2208      	movs	r2, #8
    7fbe:	4c35      	ldr	r4, [pc, #212]	; (8094 <m2m_ip_cb+0x504>)
    7fc0:	47a0      	blx	r4
    7fc2:	1e03      	subs	r3, r0, #0
    7fc4:	d160      	bne.n	8088 <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    7fc6:	23dc      	movs	r3, #220	; 0xdc
    7fc8:	18fb      	adds	r3, r7, r3
    7fca:	2200      	movs	r2, #0
    7fcc:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    7fce:	23db      	movs	r3, #219	; 0xdb
    7fd0:	18fb      	adds	r3, r7, r3
    7fd2:	2264      	movs	r2, #100	; 0x64
    7fd4:	18ba      	adds	r2, r7, r2
    7fd6:	7812      	ldrb	r2, [r2, #0]
    7fd8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    7fda:	23dc      	movs	r3, #220	; 0xdc
    7fdc:	18fb      	adds	r3, r7, r3
    7fde:	2264      	movs	r2, #100	; 0x64
    7fe0:	18ba      	adds	r2, r7, r2
    7fe2:	8892      	ldrh	r2, [r2, #4]
    7fe4:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    7fe6:	2364      	movs	r3, #100	; 0x64
    7fe8:	18fb      	adds	r3, r7, r3
    7fea:	2202      	movs	r2, #2
    7fec:	5e9a      	ldrsh	r2, [r3, r2]
    7fee:	236e      	movs	r3, #110	; 0x6e
    7ff0:	18fb      	adds	r3, r7, r3
    7ff2:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7ff4:	23db      	movs	r3, #219	; 0xdb
    7ff6:	18fb      	adds	r3, r7, r3
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	b25b      	sxtb	r3, r3
    7ffc:	4a26      	ldr	r2, [pc, #152]	; (8098 <m2m_ip_cb+0x508>)
    7ffe:	011b      	lsls	r3, r3, #4
    8000:	18d3      	adds	r3, r2, r3
    8002:	3306      	adds	r3, #6
    8004:	881b      	ldrh	r3, [r3, #0]
    8006:	b29b      	uxth	r3, r3
    8008:	22dc      	movs	r2, #220	; 0xdc
    800a:	18ba      	adds	r2, r7, r2
    800c:	8812      	ldrh	r2, [r2, #0]
    800e:	429a      	cmp	r2, r3
    8010:	d13a      	bne.n	8088 <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    8012:	4b23      	ldr	r3, [pc, #140]	; (80a0 <m2m_ip_cb+0x510>)
    8014:	681b      	ldr	r3, [r3, #0]
    8016:	2b00      	cmp	r3, #0
    8018:	d036      	beq.n	8088 <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    801a:	4b21      	ldr	r3, [pc, #132]	; (80a0 <m2m_ip_cb+0x510>)
    801c:	681b      	ldr	r3, [r3, #0]
    801e:	226e      	movs	r2, #110	; 0x6e
    8020:	18bc      	adds	r4, r7, r2
    8022:	22de      	movs	r2, #222	; 0xde
    8024:	18ba      	adds	r2, r7, r2
    8026:	7811      	ldrb	r1, [r2, #0]
    8028:	22db      	movs	r2, #219	; 0xdb
    802a:	18ba      	adds	r2, r7, r2
    802c:	2000      	movs	r0, #0
    802e:	5610      	ldrsb	r0, [r2, r0]
    8030:	0022      	movs	r2, r4
    8032:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    8034:	e028      	b.n	8088 <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    8036:	1dfb      	adds	r3, r7, #7
    8038:	781b      	ldrb	r3, [r3, #0]
    803a:	2b52      	cmp	r3, #82	; 0x52
    803c:	d125      	bne.n	808a <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    803e:	2350      	movs	r3, #80	; 0x50
    8040:	18f9      	adds	r1, r7, r3
    8042:	6838      	ldr	r0, [r7, #0]
    8044:	2301      	movs	r3, #1
    8046:	2214      	movs	r2, #20
    8048:	4c12      	ldr	r4, [pc, #72]	; (8094 <m2m_ip_cb+0x504>)
    804a:	47a0      	blx	r4
    804c:	1e03      	subs	r3, r0, #0
    804e:	d11c      	bne.n	808a <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    8050:	2350      	movs	r3, #80	; 0x50
    8052:	18fb      	adds	r3, r7, r3
    8054:	685b      	ldr	r3, [r3, #4]
    8056:	001a      	movs	r2, r3
    8058:	4b12      	ldr	r3, [pc, #72]	; (80a4 <m2m_ip_cb+0x514>)
    805a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    805c:	4b11      	ldr	r3, [pc, #68]	; (80a4 <m2m_ip_cb+0x514>)
    805e:	681b      	ldr	r3, [r3, #0]
    8060:	2b00      	cmp	r3, #0
    8062:	d012      	beq.n	808a <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    8064:	4b0f      	ldr	r3, [pc, #60]	; (80a4 <m2m_ip_cb+0x514>)
    8066:	681c      	ldr	r4, [r3, #0]
    8068:	2350      	movs	r3, #80	; 0x50
    806a:	18fb      	adds	r3, r7, r3
    806c:	6818      	ldr	r0, [r3, #0]
    806e:	2350      	movs	r3, #80	; 0x50
    8070:	18fb      	adds	r3, r7, r3
    8072:	6899      	ldr	r1, [r3, #8]
    8074:	2350      	movs	r3, #80	; 0x50
    8076:	18fb      	adds	r3, r7, r3
    8078:	7c1b      	ldrb	r3, [r3, #16]
    807a:	001a      	movs	r2, r3
    807c:	47a0      	blx	r4
			}
		}
	}
}
    807e:	e004      	b.n	808a <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    8080:	46c0      	nop			; (mov r8, r8)
    8082:	e002      	b.n	808a <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    8084:	46c0      	nop			; (mov r8, r8)
    8086:	e000      	b.n	808a <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    8088:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    808a:	46c0      	nop			; (mov r8, r8)
    808c:	46bd      	mov	sp, r7
    808e:	b039      	add	sp, #228	; 0xe4
    8090:	bd90      	pop	{r4, r7, pc}
    8092:	46c0      	nop			; (mov r8, r8)
    8094:	00004a79 	.word	0x00004a79
    8098:	20004688 	.word	0x20004688
    809c:	000079c5 	.word	0x000079c5
    80a0:	20004738 	.word	0x20004738
    80a4:	2000473c 	.word	0x2000473c

000080a8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    80a8:	b580      	push	{r7, lr}
    80aa:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    80ac:	4b0c      	ldr	r3, [pc, #48]	; (80e0 <socketInit+0x38>)
    80ae:	781b      	ldrb	r3, [r3, #0]
    80b0:	b2db      	uxtb	r3, r3
    80b2:	2b00      	cmp	r3, #0
    80b4:	d110      	bne.n	80d8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    80b6:	4b0b      	ldr	r3, [pc, #44]	; (80e4 <socketInit+0x3c>)
    80b8:	22b0      	movs	r2, #176	; 0xb0
    80ba:	2100      	movs	r1, #0
    80bc:	0018      	movs	r0, r3
    80be:	4b0a      	ldr	r3, [pc, #40]	; (80e8 <socketInit+0x40>)
    80c0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    80c2:	4b0a      	ldr	r3, [pc, #40]	; (80ec <socketInit+0x44>)
    80c4:	0019      	movs	r1, r3
    80c6:	2002      	movs	r0, #2
    80c8:	4b09      	ldr	r3, [pc, #36]	; (80f0 <socketInit+0x48>)
    80ca:	4798      	blx	r3
		gbSocketInit=1;
    80cc:	4b04      	ldr	r3, [pc, #16]	; (80e0 <socketInit+0x38>)
    80ce:	2201      	movs	r2, #1
    80d0:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    80d2:	4b08      	ldr	r3, [pc, #32]	; (80f4 <socketInit+0x4c>)
    80d4:	2200      	movs	r2, #0
    80d6:	801a      	strh	r2, [r3, #0]
	}
}
    80d8:	46c0      	nop			; (mov r8, r8)
    80da:	46bd      	mov	sp, r7
    80dc:	bd80      	pop	{r7, pc}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	200000fc 	.word	0x200000fc
    80e4:	20004688 	.word	0x20004688
    80e8:	00003ebd 	.word	0x00003ebd
    80ec:	00007b91 	.word	0x00007b91
    80f0:	00004c71 	.word	0x00004c71
    80f4:	200000fa 	.word	0x200000fa

000080f8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    80f8:	b580      	push	{r7, lr}
    80fa:	b082      	sub	sp, #8
    80fc:	af00      	add	r7, sp, #0
    80fe:	6078      	str	r0, [r7, #4]
    8100:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    8102:	4b05      	ldr	r3, [pc, #20]	; (8118 <registerSocketCallback+0x20>)
    8104:	687a      	ldr	r2, [r7, #4]
    8106:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    8108:	4b04      	ldr	r3, [pc, #16]	; (811c <registerSocketCallback+0x24>)
    810a:	683a      	ldr	r2, [r7, #0]
    810c:	601a      	str	r2, [r3, #0]
}
    810e:	46c0      	nop			; (mov r8, r8)
    8110:	46bd      	mov	sp, r7
    8112:	b002      	add	sp, #8
    8114:	bd80      	pop	{r7, pc}
    8116:	46c0      	nop			; (mov r8, r8)
    8118:	20004738 	.word	0x20004738
    811c:	20004740 	.word	0x20004740

00008120 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    8120:	b590      	push	{r4, r7, lr}
    8122:	b08b      	sub	sp, #44	; 0x2c
    8124:	af04      	add	r7, sp, #16
    8126:	0004      	movs	r4, r0
    8128:	0008      	movs	r0, r1
    812a:	0011      	movs	r1, r2
    812c:	1dbb      	adds	r3, r7, #6
    812e:	1c22      	adds	r2, r4, #0
    8130:	801a      	strh	r2, [r3, #0]
    8132:	1d7b      	adds	r3, r7, #5
    8134:	1c02      	adds	r2, r0, #0
    8136:	701a      	strb	r2, [r3, #0]
    8138:	1d3b      	adds	r3, r7, #4
    813a:	1c0a      	adds	r2, r1, #0
    813c:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    813e:	2317      	movs	r3, #23
    8140:	18fb      	adds	r3, r7, r3
    8142:	22ff      	movs	r2, #255	; 0xff
    8144:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    8146:	2315      	movs	r3, #21
    8148:	18fb      	adds	r3, r7, r3
    814a:	220b      	movs	r2, #11
    814c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    814e:	1dbb      	adds	r3, r7, #6
    8150:	881b      	ldrh	r3, [r3, #0]
    8152:	2b02      	cmp	r3, #2
    8154:	d000      	beq.n	8158 <socket+0x38>
    8156:	e07e      	b.n	8256 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    8158:	1d7b      	adds	r3, r7, #5
    815a:	781b      	ldrb	r3, [r3, #0]
    815c:	2b01      	cmp	r3, #1
    815e:	d108      	bne.n	8172 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    8160:	2315      	movs	r3, #21
    8162:	18fb      	adds	r3, r7, r3
    8164:	2207      	movs	r2, #7
    8166:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    8168:	2316      	movs	r3, #22
    816a:	18fb      	adds	r3, r7, r3
    816c:	2200      	movs	r2, #0
    816e:	701a      	strb	r2, [r3, #0]
    8170:	e067      	b.n	8242 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    8172:	1d7b      	adds	r3, r7, #5
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	2b02      	cmp	r3, #2
    8178:	d108      	bne.n	818c <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    817a:	2315      	movs	r3, #21
    817c:	18fb      	adds	r3, r7, r3
    817e:	220b      	movs	r2, #11
    8180:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    8182:	2316      	movs	r3, #22
    8184:	18fb      	adds	r3, r7, r3
    8186:	2207      	movs	r2, #7
    8188:	701a      	strb	r2, [r3, #0]
    818a:	e05a      	b.n	8242 <socket+0x122>
		}
		else
			return sock;
    818c:	2317      	movs	r3, #23
    818e:	18fb      	adds	r3, r7, r3
    8190:	781b      	ldrb	r3, [r3, #0]
    8192:	b25b      	sxtb	r3, r3
    8194:	e063      	b.n	825e <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    8196:	2316      	movs	r3, #22
    8198:	18fb      	adds	r3, r7, r3
    819a:	781b      	ldrb	r3, [r3, #0]
    819c:	011a      	lsls	r2, r3, #4
    819e:	4b32      	ldr	r3, [pc, #200]	; (8268 <socket+0x148>)
    81a0:	18d3      	adds	r3, r2, r3
    81a2:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    81a4:	693b      	ldr	r3, [r7, #16]
    81a6:	7a9b      	ldrb	r3, [r3, #10]
    81a8:	b2db      	uxtb	r3, r3
    81aa:	2b00      	cmp	r3, #0
    81ac:	d142      	bne.n	8234 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    81ae:	693b      	ldr	r3, [r7, #16]
    81b0:	2210      	movs	r2, #16
    81b2:	2100      	movs	r1, #0
    81b4:	0018      	movs	r0, r3
    81b6:	4b2d      	ldr	r3, [pc, #180]	; (826c <socket+0x14c>)
    81b8:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    81ba:	693b      	ldr	r3, [r7, #16]
    81bc:	2201      	movs	r2, #1
    81be:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    81c0:	4b2b      	ldr	r3, [pc, #172]	; (8270 <socket+0x150>)
    81c2:	881b      	ldrh	r3, [r3, #0]
    81c4:	b29b      	uxth	r3, r3
    81c6:	3301      	adds	r3, #1
    81c8:	b29a      	uxth	r2, r3
    81ca:	4b29      	ldr	r3, [pc, #164]	; (8270 <socket+0x150>)
    81cc:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    81ce:	4b28      	ldr	r3, [pc, #160]	; (8270 <socket+0x150>)
    81d0:	881b      	ldrh	r3, [r3, #0]
    81d2:	b29b      	uxth	r3, r3
    81d4:	2b00      	cmp	r3, #0
    81d6:	d106      	bne.n	81e6 <socket+0xc6>
					++gu16SessionID;
    81d8:	4b25      	ldr	r3, [pc, #148]	; (8270 <socket+0x150>)
    81da:	881b      	ldrh	r3, [r3, #0]
    81dc:	b29b      	uxth	r3, r3
    81de:	3301      	adds	r3, #1
    81e0:	b29a      	uxth	r2, r3
    81e2:	4b23      	ldr	r3, [pc, #140]	; (8270 <socket+0x150>)
    81e4:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    81e6:	4b22      	ldr	r3, [pc, #136]	; (8270 <socket+0x150>)
    81e8:	881b      	ldrh	r3, [r3, #0]
    81ea:	b29a      	uxth	r2, r3
    81ec:	693b      	ldr	r3, [r7, #16]
    81ee:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    81f0:	2317      	movs	r3, #23
    81f2:	18fb      	adds	r3, r7, r3
    81f4:	2216      	movs	r2, #22
    81f6:	18ba      	adds	r2, r7, r2
    81f8:	7812      	ldrb	r2, [r2, #0]
    81fa:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    81fc:	1d3b      	adds	r3, r7, #4
    81fe:	781b      	ldrb	r3, [r3, #0]
    8200:	2201      	movs	r2, #1
    8202:	4013      	ands	r3, r2
    8204:	d026      	beq.n	8254 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    8206:	230c      	movs	r3, #12
    8208:	18fb      	adds	r3, r7, r3
    820a:	2217      	movs	r2, #23
    820c:	18ba      	adds	r2, r7, r2
    820e:	7812      	ldrb	r2, [r2, #0]
    8210:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    8212:	693b      	ldr	r3, [r7, #16]
    8214:	2221      	movs	r2, #33	; 0x21
    8216:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    8218:	230c      	movs	r3, #12
    821a:	18fa      	adds	r2, r7, r3
    821c:	2300      	movs	r3, #0
    821e:	9302      	str	r3, [sp, #8]
    8220:	2300      	movs	r3, #0
    8222:	9301      	str	r3, [sp, #4]
    8224:	2300      	movs	r3, #0
    8226:	9300      	str	r3, [sp, #0]
    8228:	2304      	movs	r3, #4
    822a:	2150      	movs	r1, #80	; 0x50
    822c:	2002      	movs	r0, #2
    822e:	4c11      	ldr	r4, [pc, #68]	; (8274 <socket+0x154>)
    8230:	47a0      	blx	r4
				}
				break;
    8232:	e00f      	b.n	8254 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    8234:	2316      	movs	r3, #22
    8236:	18fb      	adds	r3, r7, r3
    8238:	781a      	ldrb	r2, [r3, #0]
    823a:	2316      	movs	r3, #22
    823c:	18fb      	adds	r3, r7, r3
    823e:	3201      	adds	r2, #1
    8240:	701a      	strb	r2, [r3, #0]
    8242:	2316      	movs	r3, #22
    8244:	18fa      	adds	r2, r7, r3
    8246:	2315      	movs	r3, #21
    8248:	18fb      	adds	r3, r7, r3
    824a:	7812      	ldrb	r2, [r2, #0]
    824c:	781b      	ldrb	r3, [r3, #0]
    824e:	429a      	cmp	r2, r3
    8250:	d3a1      	bcc.n	8196 <socket+0x76>
    8252:	e000      	b.n	8256 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    8254:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    8256:	2317      	movs	r3, #23
    8258:	18fb      	adds	r3, r7, r3
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	b25b      	sxtb	r3, r3
}
    825e:	0018      	movs	r0, r3
    8260:	46bd      	mov	sp, r7
    8262:	b007      	add	sp, #28
    8264:	bd90      	pop	{r4, r7, pc}
    8266:	46c0      	nop			; (mov r8, r8)
    8268:	20004688 	.word	0x20004688
    826c:	00003ebd 	.word	0x00003ebd
    8270:	200000fa 	.word	0x200000fa
    8274:	00004299 	.word	0x00004299

00008278 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    8278:	b5b0      	push	{r4, r5, r7, lr}
    827a:	b08a      	sub	sp, #40	; 0x28
    827c:	af04      	add	r7, sp, #16
    827e:	6039      	str	r1, [r7, #0]
    8280:	0011      	movs	r1, r2
    8282:	1dfb      	adds	r3, r7, #7
    8284:	1c02      	adds	r2, r0, #0
    8286:	701a      	strb	r2, [r3, #0]
    8288:	1dbb      	adds	r3, r7, #6
    828a:	1c0a      	adds	r2, r1, #0
    828c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    828e:	2317      	movs	r3, #23
    8290:	18fb      	adds	r3, r7, r3
    8292:	22fa      	movs	r2, #250	; 0xfa
    8294:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    8296:	1dfb      	adds	r3, r7, #7
    8298:	781b      	ldrb	r3, [r3, #0]
    829a:	2b7f      	cmp	r3, #127	; 0x7f
    829c:	d867      	bhi.n	836e <connect+0xf6>
    829e:	683b      	ldr	r3, [r7, #0]
    82a0:	2b00      	cmp	r3, #0
    82a2:	d064      	beq.n	836e <connect+0xf6>
    82a4:	1dfb      	adds	r3, r7, #7
    82a6:	781b      	ldrb	r3, [r3, #0]
    82a8:	b25b      	sxtb	r3, r3
    82aa:	4a35      	ldr	r2, [pc, #212]	; (8380 <connect+0x108>)
    82ac:	011b      	lsls	r3, r3, #4
    82ae:	18d3      	adds	r3, r2, r3
    82b0:	330a      	adds	r3, #10
    82b2:	781b      	ldrb	r3, [r3, #0]
    82b4:	b2db      	uxtb	r3, r3
    82b6:	2b01      	cmp	r3, #1
    82b8:	d159      	bne.n	836e <connect+0xf6>
    82ba:	1dbb      	adds	r3, r7, #6
    82bc:	781b      	ldrb	r3, [r3, #0]
    82be:	2b00      	cmp	r3, #0
    82c0:	d055      	beq.n	836e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    82c2:	2316      	movs	r3, #22
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	2244      	movs	r2, #68	; 0x44
    82c8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    82ca:	1dfb      	adds	r3, r7, #7
    82cc:	781b      	ldrb	r3, [r3, #0]
    82ce:	b25b      	sxtb	r3, r3
    82d0:	4a2b      	ldr	r2, [pc, #172]	; (8380 <connect+0x108>)
    82d2:	011b      	lsls	r3, r3, #4
    82d4:	18d3      	adds	r3, r2, r3
    82d6:	330b      	adds	r3, #11
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	b2db      	uxtb	r3, r3
    82dc:	001a      	movs	r2, r3
    82de:	2301      	movs	r3, #1
    82e0:	4013      	ands	r3, r2
    82e2:	d00f      	beq.n	8304 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    82e4:	2316      	movs	r3, #22
    82e6:	18fb      	adds	r3, r7, r3
    82e8:	224b      	movs	r2, #75	; 0x4b
    82ea:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    82ec:	1dfb      	adds	r3, r7, #7
    82ee:	781b      	ldrb	r3, [r3, #0]
    82f0:	b25b      	sxtb	r3, r3
    82f2:	4a23      	ldr	r2, [pc, #140]	; (8380 <connect+0x108>)
    82f4:	011b      	lsls	r3, r3, #4
    82f6:	18d3      	adds	r3, r2, r3
    82f8:	330b      	adds	r3, #11
    82fa:	781b      	ldrb	r3, [r3, #0]
    82fc:	b2da      	uxtb	r2, r3
    82fe:	2308      	movs	r3, #8
    8300:	18fb      	adds	r3, r7, r3
    8302:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    8304:	2308      	movs	r3, #8
    8306:	18fb      	adds	r3, r7, r3
    8308:	1dfa      	adds	r2, r7, #7
    830a:	7812      	ldrb	r2, [r2, #0]
    830c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    830e:	6839      	ldr	r1, [r7, #0]
    8310:	2308      	movs	r3, #8
    8312:	18fb      	adds	r3, r7, r3
    8314:	2208      	movs	r2, #8
    8316:	0018      	movs	r0, r3
    8318:	4b1a      	ldr	r3, [pc, #104]	; (8384 <connect+0x10c>)
    831a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    831c:	1dfb      	adds	r3, r7, #7
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	b25b      	sxtb	r3, r3
    8322:	4a17      	ldr	r2, [pc, #92]	; (8380 <connect+0x108>)
    8324:	011b      	lsls	r3, r3, #4
    8326:	18d3      	adds	r3, r2, r3
    8328:	3306      	adds	r3, #6
    832a:	881b      	ldrh	r3, [r3, #0]
    832c:	b29a      	uxth	r2, r3
    832e:	2308      	movs	r3, #8
    8330:	18fb      	adds	r3, r7, r3
    8332:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8334:	2317      	movs	r3, #23
    8336:	18fc      	adds	r4, r7, r3
    8338:	2308      	movs	r3, #8
    833a:	18fa      	adds	r2, r7, r3
    833c:	2316      	movs	r3, #22
    833e:	18fb      	adds	r3, r7, r3
    8340:	7819      	ldrb	r1, [r3, #0]
    8342:	2300      	movs	r3, #0
    8344:	9302      	str	r3, [sp, #8]
    8346:	2300      	movs	r3, #0
    8348:	9301      	str	r3, [sp, #4]
    834a:	2300      	movs	r3, #0
    834c:	9300      	str	r3, [sp, #0]
    834e:	230c      	movs	r3, #12
    8350:	2002      	movs	r0, #2
    8352:	4d0d      	ldr	r5, [pc, #52]	; (8388 <connect+0x110>)
    8354:	47a8      	blx	r5
    8356:	0003      	movs	r3, r0
    8358:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    835a:	2317      	movs	r3, #23
    835c:	18fb      	adds	r3, r7, r3
    835e:	781b      	ldrb	r3, [r3, #0]
    8360:	b25b      	sxtb	r3, r3
    8362:	2b00      	cmp	r3, #0
    8364:	d003      	beq.n	836e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    8366:	2317      	movs	r3, #23
    8368:	18fb      	adds	r3, r7, r3
    836a:	22f7      	movs	r2, #247	; 0xf7
    836c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    836e:	2317      	movs	r3, #23
    8370:	18fb      	adds	r3, r7, r3
    8372:	781b      	ldrb	r3, [r3, #0]
    8374:	b25b      	sxtb	r3, r3
}
    8376:	0018      	movs	r0, r3
    8378:	46bd      	mov	sp, r7
    837a:	b006      	add	sp, #24
    837c:	bdb0      	pop	{r4, r5, r7, pc}
    837e:	46c0      	nop			; (mov r8, r8)
    8380:	20004688 	.word	0x20004688
    8384:	00003e81 	.word	0x00003e81
    8388:	00004299 	.word	0x00004299

0000838c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    838c:	b590      	push	{r4, r7, lr}
    838e:	b08f      	sub	sp, #60	; 0x3c
    8390:	af04      	add	r7, sp, #16
    8392:	0004      	movs	r4, r0
    8394:	60b9      	str	r1, [r7, #8]
    8396:	0010      	movs	r0, r2
    8398:	0019      	movs	r1, r3
    839a:	230f      	movs	r3, #15
    839c:	18fb      	adds	r3, r7, r3
    839e:	1c22      	adds	r2, r4, #0
    83a0:	701a      	strb	r2, [r3, #0]
    83a2:	230c      	movs	r3, #12
    83a4:	18fb      	adds	r3, r7, r3
    83a6:	1c02      	adds	r2, r0, #0
    83a8:	801a      	strh	r2, [r3, #0]
    83aa:	1dbb      	adds	r3, r7, #6
    83ac:	1c0a      	adds	r2, r1, #0
    83ae:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    83b0:	2326      	movs	r3, #38	; 0x26
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	2206      	movs	r2, #6
    83b6:	4252      	negs	r2, r2
    83b8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    83ba:	230f      	movs	r3, #15
    83bc:	18fb      	adds	r3, r7, r3
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	2b7f      	cmp	r3, #127	; 0x7f
    83c2:	d900      	bls.n	83c6 <send+0x3a>
    83c4:	e087      	b.n	84d6 <send+0x14a>
    83c6:	68bb      	ldr	r3, [r7, #8]
    83c8:	2b00      	cmp	r3, #0
    83ca:	d100      	bne.n	83ce <send+0x42>
    83cc:	e083      	b.n	84d6 <send+0x14a>
    83ce:	230c      	movs	r3, #12
    83d0:	18fb      	adds	r3, r7, r3
    83d2:	881a      	ldrh	r2, [r3, #0]
    83d4:	23af      	movs	r3, #175	; 0xaf
    83d6:	00db      	lsls	r3, r3, #3
    83d8:	429a      	cmp	r2, r3
    83da:	d900      	bls.n	83de <send+0x52>
    83dc:	e07b      	b.n	84d6 <send+0x14a>
    83de:	230f      	movs	r3, #15
    83e0:	18fb      	adds	r3, r7, r3
    83e2:	781b      	ldrb	r3, [r3, #0]
    83e4:	b25b      	sxtb	r3, r3
    83e6:	4a40      	ldr	r2, [pc, #256]	; (84e8 <send+0x15c>)
    83e8:	011b      	lsls	r3, r3, #4
    83ea:	18d3      	adds	r3, r2, r3
    83ec:	330a      	adds	r3, #10
    83ee:	781b      	ldrb	r3, [r3, #0]
    83f0:	b2db      	uxtb	r3, r3
    83f2:	2b01      	cmp	r3, #1
    83f4:	d16f      	bne.n	84d6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    83f6:	2323      	movs	r3, #35	; 0x23
    83f8:	18fb      	adds	r3, r7, r3
    83fa:	2245      	movs	r2, #69	; 0x45
    83fc:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    83fe:	2324      	movs	r3, #36	; 0x24
    8400:	18fb      	adds	r3, r7, r3
    8402:	2250      	movs	r2, #80	; 0x50
    8404:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    8406:	2310      	movs	r3, #16
    8408:	18fb      	adds	r3, r7, r3
    840a:	220f      	movs	r2, #15
    840c:	18ba      	adds	r2, r7, r2
    840e:	7812      	ldrb	r2, [r2, #0]
    8410:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    8412:	2310      	movs	r3, #16
    8414:	18fb      	adds	r3, r7, r3
    8416:	220c      	movs	r2, #12
    8418:	18ba      	adds	r2, r7, r2
    841a:	8812      	ldrh	r2, [r2, #0]
    841c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    841e:	230f      	movs	r3, #15
    8420:	18fb      	adds	r3, r7, r3
    8422:	781b      	ldrb	r3, [r3, #0]
    8424:	b25b      	sxtb	r3, r3
    8426:	4a30      	ldr	r2, [pc, #192]	; (84e8 <send+0x15c>)
    8428:	011b      	lsls	r3, r3, #4
    842a:	18d3      	adds	r3, r2, r3
    842c:	3306      	adds	r3, #6
    842e:	881b      	ldrh	r3, [r3, #0]
    8430:	b29a      	uxth	r2, r3
    8432:	2310      	movs	r3, #16
    8434:	18fb      	adds	r3, r7, r3
    8436:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    8438:	230f      	movs	r3, #15
    843a:	18fb      	adds	r3, r7, r3
    843c:	781b      	ldrb	r3, [r3, #0]
    843e:	b25b      	sxtb	r3, r3
    8440:	2b06      	cmp	r3, #6
    8442:	dd03      	ble.n	844c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    8444:	2324      	movs	r3, #36	; 0x24
    8446:	18fb      	adds	r3, r7, r3
    8448:	2244      	movs	r2, #68	; 0x44
    844a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    844c:	230f      	movs	r3, #15
    844e:	18fb      	adds	r3, r7, r3
    8450:	781b      	ldrb	r3, [r3, #0]
    8452:	b25b      	sxtb	r3, r3
    8454:	4a24      	ldr	r2, [pc, #144]	; (84e8 <send+0x15c>)
    8456:	011b      	lsls	r3, r3, #4
    8458:	18d3      	adds	r3, r2, r3
    845a:	330b      	adds	r3, #11
    845c:	781b      	ldrb	r3, [r3, #0]
    845e:	b2db      	uxtb	r3, r3
    8460:	001a      	movs	r2, r3
    8462:	2301      	movs	r3, #1
    8464:	4013      	ands	r3, r2
    8466:	d00f      	beq.n	8488 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    8468:	2323      	movs	r3, #35	; 0x23
    846a:	18fb      	adds	r3, r7, r3
    846c:	224c      	movs	r2, #76	; 0x4c
    846e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    8470:	230f      	movs	r3, #15
    8472:	18fb      	adds	r3, r7, r3
    8474:	2200      	movs	r2, #0
    8476:	569a      	ldrsb	r2, [r3, r2]
    8478:	2324      	movs	r3, #36	; 0x24
    847a:	18fb      	adds	r3, r7, r3
    847c:	491a      	ldr	r1, [pc, #104]	; (84e8 <send+0x15c>)
    847e:	0112      	lsls	r2, r2, #4
    8480:	188a      	adds	r2, r1, r2
    8482:	3208      	adds	r2, #8
    8484:	8812      	ldrh	r2, [r2, #0]
    8486:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    8488:	2323      	movs	r3, #35	; 0x23
    848a:	18fb      	adds	r3, r7, r3
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	2280      	movs	r2, #128	; 0x80
    8490:	4252      	negs	r2, r2
    8492:	4313      	orrs	r3, r2
    8494:	b2d9      	uxtb	r1, r3
    8496:	2310      	movs	r3, #16
    8498:	18fa      	adds	r2, r7, r3
    849a:	2324      	movs	r3, #36	; 0x24
    849c:	18fb      	adds	r3, r7, r3
    849e:	881b      	ldrh	r3, [r3, #0]
    84a0:	9302      	str	r3, [sp, #8]
    84a2:	230c      	movs	r3, #12
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	881b      	ldrh	r3, [r3, #0]
    84a8:	9301      	str	r3, [sp, #4]
    84aa:	68bb      	ldr	r3, [r7, #8]
    84ac:	9300      	str	r3, [sp, #0]
    84ae:	2310      	movs	r3, #16
    84b0:	2002      	movs	r0, #2
    84b2:	4c0e      	ldr	r4, [pc, #56]	; (84ec <send+0x160>)
    84b4:	47a0      	blx	r4
    84b6:	0003      	movs	r3, r0
    84b8:	001a      	movs	r2, r3
    84ba:	2326      	movs	r3, #38	; 0x26
    84bc:	18fb      	adds	r3, r7, r3
    84be:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    84c0:	2326      	movs	r3, #38	; 0x26
    84c2:	18fb      	adds	r3, r7, r3
    84c4:	2200      	movs	r2, #0
    84c6:	5e9b      	ldrsh	r3, [r3, r2]
    84c8:	2b00      	cmp	r3, #0
    84ca:	d004      	beq.n	84d6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    84cc:	2326      	movs	r3, #38	; 0x26
    84ce:	18fb      	adds	r3, r7, r3
    84d0:	220e      	movs	r2, #14
    84d2:	4252      	negs	r2, r2
    84d4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    84d6:	2326      	movs	r3, #38	; 0x26
    84d8:	18fb      	adds	r3, r7, r3
    84da:	2200      	movs	r2, #0
    84dc:	5e9b      	ldrsh	r3, [r3, r2]
}
    84de:	0018      	movs	r0, r3
    84e0:	46bd      	mov	sp, r7
    84e2:	b00b      	add	sp, #44	; 0x2c
    84e4:	bd90      	pop	{r4, r7, pc}
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	20004688 	.word	0x20004688
    84ec:	00004299 	.word	0x00004299

000084f0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    84f0:	b590      	push	{r4, r7, lr}
    84f2:	b08d      	sub	sp, #52	; 0x34
    84f4:	af04      	add	r7, sp, #16
    84f6:	60b9      	str	r1, [r7, #8]
    84f8:	0011      	movs	r1, r2
    84fa:	607b      	str	r3, [r7, #4]
    84fc:	230f      	movs	r3, #15
    84fe:	18fb      	adds	r3, r7, r3
    8500:	1c02      	adds	r2, r0, #0
    8502:	701a      	strb	r2, [r3, #0]
    8504:	230c      	movs	r3, #12
    8506:	18fb      	adds	r3, r7, r3
    8508:	1c0a      	adds	r2, r1, #0
    850a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    850c:	231e      	movs	r3, #30
    850e:	18fb      	adds	r3, r7, r3
    8510:	2206      	movs	r2, #6
    8512:	4252      	negs	r2, r2
    8514:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    8516:	230f      	movs	r3, #15
    8518:	18fb      	adds	r3, r7, r3
    851a:	781b      	ldrb	r3, [r3, #0]
    851c:	2b7f      	cmp	r3, #127	; 0x7f
    851e:	d900      	bls.n	8522 <recv+0x32>
    8520:	e099      	b.n	8656 <recv+0x166>
    8522:	68bb      	ldr	r3, [r7, #8]
    8524:	2b00      	cmp	r3, #0
    8526:	d100      	bne.n	852a <recv+0x3a>
    8528:	e095      	b.n	8656 <recv+0x166>
    852a:	230c      	movs	r3, #12
    852c:	18fb      	adds	r3, r7, r3
    852e:	881b      	ldrh	r3, [r3, #0]
    8530:	2b00      	cmp	r3, #0
    8532:	d100      	bne.n	8536 <recv+0x46>
    8534:	e08f      	b.n	8656 <recv+0x166>
    8536:	230f      	movs	r3, #15
    8538:	18fb      	adds	r3, r7, r3
    853a:	781b      	ldrb	r3, [r3, #0]
    853c:	b25b      	sxtb	r3, r3
    853e:	4a4a      	ldr	r2, [pc, #296]	; (8668 <recv+0x178>)
    8540:	011b      	lsls	r3, r3, #4
    8542:	18d3      	adds	r3, r2, r3
    8544:	330a      	adds	r3, #10
    8546:	781b      	ldrb	r3, [r3, #0]
    8548:	b2db      	uxtb	r3, r3
    854a:	2b01      	cmp	r3, #1
    854c:	d000      	beq.n	8550 <recv+0x60>
    854e:	e082      	b.n	8656 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    8550:	231e      	movs	r3, #30
    8552:	18fb      	adds	r3, r7, r3
    8554:	2200      	movs	r2, #0
    8556:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    8558:	230f      	movs	r3, #15
    855a:	18fb      	adds	r3, r7, r3
    855c:	2200      	movs	r2, #0
    855e:	569a      	ldrsb	r2, [r3, r2]
    8560:	4b41      	ldr	r3, [pc, #260]	; (8668 <recv+0x178>)
    8562:	0112      	lsls	r2, r2, #4
    8564:	68b9      	ldr	r1, [r7, #8]
    8566:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    8568:	230f      	movs	r3, #15
    856a:	18fb      	adds	r3, r7, r3
    856c:	781b      	ldrb	r3, [r3, #0]
    856e:	b25b      	sxtb	r3, r3
    8570:	4a3d      	ldr	r2, [pc, #244]	; (8668 <recv+0x178>)
    8572:	011b      	lsls	r3, r3, #4
    8574:	18d3      	adds	r3, r2, r3
    8576:	3304      	adds	r3, #4
    8578:	220c      	movs	r2, #12
    857a:	18ba      	adds	r2, r7, r2
    857c:	8812      	ldrh	r2, [r2, #0]
    857e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    8580:	230f      	movs	r3, #15
    8582:	18fb      	adds	r3, r7, r3
    8584:	781b      	ldrb	r3, [r3, #0]
    8586:	b25b      	sxtb	r3, r3
    8588:	4a37      	ldr	r2, [pc, #220]	; (8668 <recv+0x178>)
    858a:	011b      	lsls	r3, r3, #4
    858c:	18d3      	adds	r3, r2, r3
    858e:	330c      	adds	r3, #12
    8590:	781b      	ldrb	r3, [r3, #0]
    8592:	b2db      	uxtb	r3, r3
    8594:	2b00      	cmp	r3, #0
    8596:	d15e      	bne.n	8656 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    8598:	231d      	movs	r3, #29
    859a:	18fb      	adds	r3, r7, r3
    859c:	2246      	movs	r2, #70	; 0x46
    859e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    85a0:	230f      	movs	r3, #15
    85a2:	18fb      	adds	r3, r7, r3
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	b25b      	sxtb	r3, r3
    85a8:	4a2f      	ldr	r2, [pc, #188]	; (8668 <recv+0x178>)
    85aa:	011b      	lsls	r3, r3, #4
    85ac:	18d3      	adds	r3, r2, r3
    85ae:	330c      	adds	r3, #12
    85b0:	2201      	movs	r2, #1
    85b2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    85b4:	230f      	movs	r3, #15
    85b6:	18fb      	adds	r3, r7, r3
    85b8:	781b      	ldrb	r3, [r3, #0]
    85ba:	b25b      	sxtb	r3, r3
    85bc:	4a2a      	ldr	r2, [pc, #168]	; (8668 <recv+0x178>)
    85be:	011b      	lsls	r3, r3, #4
    85c0:	18d3      	adds	r3, r2, r3
    85c2:	330b      	adds	r3, #11
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	b2db      	uxtb	r3, r3
    85c8:	001a      	movs	r2, r3
    85ca:	2301      	movs	r3, #1
    85cc:	4013      	ands	r3, r2
    85ce:	d003      	beq.n	85d8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    85d0:	231d      	movs	r3, #29
    85d2:	18fb      	adds	r3, r7, r3
    85d4:	224d      	movs	r2, #77	; 0x4d
    85d6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	2b00      	cmp	r3, #0
    85dc:	d105      	bne.n	85ea <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    85de:	2314      	movs	r3, #20
    85e0:	18fb      	adds	r3, r7, r3
    85e2:	2201      	movs	r2, #1
    85e4:	4252      	negs	r2, r2
    85e6:	601a      	str	r2, [r3, #0]
    85e8:	e003      	b.n	85f2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    85ea:	2314      	movs	r3, #20
    85ec:	18fb      	adds	r3, r7, r3
    85ee:	687a      	ldr	r2, [r7, #4]
    85f0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    85f2:	2314      	movs	r3, #20
    85f4:	18fb      	adds	r3, r7, r3
    85f6:	220f      	movs	r2, #15
    85f8:	18ba      	adds	r2, r7, r2
    85fa:	7812      	ldrb	r2, [r2, #0]
    85fc:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    85fe:	230f      	movs	r3, #15
    8600:	18fb      	adds	r3, r7, r3
    8602:	781b      	ldrb	r3, [r3, #0]
    8604:	b25b      	sxtb	r3, r3
    8606:	4a18      	ldr	r2, [pc, #96]	; (8668 <recv+0x178>)
    8608:	011b      	lsls	r3, r3, #4
    860a:	18d3      	adds	r3, r2, r3
    860c:	3306      	adds	r3, #6
    860e:	881b      	ldrh	r3, [r3, #0]
    8610:	b29a      	uxth	r2, r3
    8612:	2314      	movs	r3, #20
    8614:	18fb      	adds	r3, r7, r3
    8616:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    8618:	2314      	movs	r3, #20
    861a:	18fa      	adds	r2, r7, r3
    861c:	231d      	movs	r3, #29
    861e:	18fb      	adds	r3, r7, r3
    8620:	7819      	ldrb	r1, [r3, #0]
    8622:	2300      	movs	r3, #0
    8624:	9302      	str	r3, [sp, #8]
    8626:	2300      	movs	r3, #0
    8628:	9301      	str	r3, [sp, #4]
    862a:	2300      	movs	r3, #0
    862c:	9300      	str	r3, [sp, #0]
    862e:	2308      	movs	r3, #8
    8630:	2002      	movs	r0, #2
    8632:	4c0e      	ldr	r4, [pc, #56]	; (866c <recv+0x17c>)
    8634:	47a0      	blx	r4
    8636:	0003      	movs	r3, r0
    8638:	001a      	movs	r2, r3
    863a:	231e      	movs	r3, #30
    863c:	18fb      	adds	r3, r7, r3
    863e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    8640:	231e      	movs	r3, #30
    8642:	18fb      	adds	r3, r7, r3
    8644:	2200      	movs	r2, #0
    8646:	5e9b      	ldrsh	r3, [r3, r2]
    8648:	2b00      	cmp	r3, #0
    864a:	d004      	beq.n	8656 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    864c:	231e      	movs	r3, #30
    864e:	18fb      	adds	r3, r7, r3
    8650:	220e      	movs	r2, #14
    8652:	4252      	negs	r2, r2
    8654:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    8656:	231e      	movs	r3, #30
    8658:	18fb      	adds	r3, r7, r3
    865a:	2200      	movs	r2, #0
    865c:	5e9b      	ldrsh	r3, [r3, r2]
}
    865e:	0018      	movs	r0, r3
    8660:	46bd      	mov	sp, r7
    8662:	b009      	add	sp, #36	; 0x24
    8664:	bd90      	pop	{r4, r7, pc}
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	20004688 	.word	0x20004688
    866c:	00004299 	.word	0x00004299

00008670 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    8670:	b5b0      	push	{r4, r5, r7, lr}
    8672:	b088      	sub	sp, #32
    8674:	af04      	add	r7, sp, #16
    8676:	0002      	movs	r2, r0
    8678:	1dfb      	adds	r3, r7, #7
    867a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    867c:	230f      	movs	r3, #15
    867e:	18fb      	adds	r3, r7, r3
    8680:	22fa      	movs	r2, #250	; 0xfa
    8682:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    8684:	1dfb      	adds	r3, r7, #7
    8686:	781b      	ldrb	r3, [r3, #0]
    8688:	2b7f      	cmp	r3, #127	; 0x7f
    868a:	d86a      	bhi.n	8762 <close+0xf2>
    868c:	1dfb      	adds	r3, r7, #7
    868e:	781b      	ldrb	r3, [r3, #0]
    8690:	b25b      	sxtb	r3, r3
    8692:	4a38      	ldr	r2, [pc, #224]	; (8774 <close+0x104>)
    8694:	011b      	lsls	r3, r3, #4
    8696:	18d3      	adds	r3, r2, r3
    8698:	330a      	adds	r3, #10
    869a:	781b      	ldrb	r3, [r3, #0]
    869c:	b2db      	uxtb	r3, r3
    869e:	2b01      	cmp	r3, #1
    86a0:	d15f      	bne.n	8762 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    86a2:	230e      	movs	r3, #14
    86a4:	18fb      	adds	r3, r7, r3
    86a6:	2249      	movs	r2, #73	; 0x49
    86a8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    86aa:	2308      	movs	r3, #8
    86ac:	18fb      	adds	r3, r7, r3
    86ae:	1dfa      	adds	r2, r7, #7
    86b0:	7812      	ldrb	r2, [r2, #0]
    86b2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    86b4:	1dfb      	adds	r3, r7, #7
    86b6:	781b      	ldrb	r3, [r3, #0]
    86b8:	b25b      	sxtb	r3, r3
    86ba:	4a2e      	ldr	r2, [pc, #184]	; (8774 <close+0x104>)
    86bc:	011b      	lsls	r3, r3, #4
    86be:	18d3      	adds	r3, r2, r3
    86c0:	3306      	adds	r3, #6
    86c2:	881b      	ldrh	r3, [r3, #0]
    86c4:	b29a      	uxth	r2, r3
    86c6:	2308      	movs	r3, #8
    86c8:	18fb      	adds	r3, r7, r3
    86ca:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    86cc:	1dfb      	adds	r3, r7, #7
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	b25b      	sxtb	r3, r3
    86d2:	4a28      	ldr	r2, [pc, #160]	; (8774 <close+0x104>)
    86d4:	011b      	lsls	r3, r3, #4
    86d6:	18d3      	adds	r3, r2, r3
    86d8:	330a      	adds	r3, #10
    86da:	2200      	movs	r2, #0
    86dc:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    86de:	1dfb      	adds	r3, r7, #7
    86e0:	781b      	ldrb	r3, [r3, #0]
    86e2:	b25b      	sxtb	r3, r3
    86e4:	4a23      	ldr	r2, [pc, #140]	; (8774 <close+0x104>)
    86e6:	011b      	lsls	r3, r3, #4
    86e8:	18d3      	adds	r3, r2, r3
    86ea:	3306      	adds	r3, #6
    86ec:	2200      	movs	r2, #0
    86ee:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    86f0:	1dfb      	adds	r3, r7, #7
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	b25b      	sxtb	r3, r3
    86f6:	4a1f      	ldr	r2, [pc, #124]	; (8774 <close+0x104>)
    86f8:	011b      	lsls	r3, r3, #4
    86fa:	18d3      	adds	r3, r2, r3
    86fc:	330b      	adds	r3, #11
    86fe:	781b      	ldrb	r3, [r3, #0]
    8700:	b2db      	uxtb	r3, r3
    8702:	001a      	movs	r2, r3
    8704:	2301      	movs	r3, #1
    8706:	4013      	ands	r3, r2
    8708:	d003      	beq.n	8712 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    870a:	230e      	movs	r3, #14
    870c:	18fb      	adds	r3, r7, r3
    870e:	224e      	movs	r2, #78	; 0x4e
    8710:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8712:	230f      	movs	r3, #15
    8714:	18fc      	adds	r4, r7, r3
    8716:	2308      	movs	r3, #8
    8718:	18fa      	adds	r2, r7, r3
    871a:	230e      	movs	r3, #14
    871c:	18fb      	adds	r3, r7, r3
    871e:	7819      	ldrb	r1, [r3, #0]
    8720:	2300      	movs	r3, #0
    8722:	9302      	str	r3, [sp, #8]
    8724:	2300      	movs	r3, #0
    8726:	9301      	str	r3, [sp, #4]
    8728:	2300      	movs	r3, #0
    872a:	9300      	str	r3, [sp, #0]
    872c:	2304      	movs	r3, #4
    872e:	2002      	movs	r0, #2
    8730:	4d11      	ldr	r5, [pc, #68]	; (8778 <close+0x108>)
    8732:	47a8      	blx	r5
    8734:	0003      	movs	r3, r0
    8736:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8738:	230f      	movs	r3, #15
    873a:	18fb      	adds	r3, r7, r3
    873c:	781b      	ldrb	r3, [r3, #0]
    873e:	b25b      	sxtb	r3, r3
    8740:	2b00      	cmp	r3, #0
    8742:	d003      	beq.n	874c <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    8744:	230f      	movs	r3, #15
    8746:	18fb      	adds	r3, r7, r3
    8748:	22f7      	movs	r2, #247	; 0xf7
    874a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    874c:	1dfb      	adds	r3, r7, #7
    874e:	781b      	ldrb	r3, [r3, #0]
    8750:	b25b      	sxtb	r3, r3
    8752:	011a      	lsls	r2, r3, #4
    8754:	4b07      	ldr	r3, [pc, #28]	; (8774 <close+0x104>)
    8756:	18d3      	adds	r3, r2, r3
    8758:	2210      	movs	r2, #16
    875a:	2100      	movs	r1, #0
    875c:	0018      	movs	r0, r3
    875e:	4b07      	ldr	r3, [pc, #28]	; (877c <close+0x10c>)
    8760:	4798      	blx	r3
	}
	return s8Ret;
    8762:	230f      	movs	r3, #15
    8764:	18fb      	adds	r3, r7, r3
    8766:	781b      	ldrb	r3, [r3, #0]
    8768:	b25b      	sxtb	r3, r3
}
    876a:	0018      	movs	r0, r3
    876c:	46bd      	mov	sp, r7
    876e:	b004      	add	sp, #16
    8770:	bdb0      	pop	{r4, r5, r7, pc}
    8772:	46c0      	nop			; (mov r8, r8)
    8774:	20004688 	.word	0x20004688
    8778:	00004299 	.word	0x00004299
    877c:	00003ebd 	.word	0x00003ebd

00008780 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8780:	b5b0      	push	{r4, r5, r7, lr}
    8782:	b088      	sub	sp, #32
    8784:	af04      	add	r7, sp, #16
    8786:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8788:	230f      	movs	r3, #15
    878a:	18fb      	adds	r3, r7, r3
    878c:	22fa      	movs	r2, #250	; 0xfa
    878e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	0018      	movs	r0, r3
    8794:	4b19      	ldr	r3, [pc, #100]	; (87fc <gethostbyname+0x7c>)
    8796:	4798      	blx	r3
    8798:	0003      	movs	r3, r0
    879a:	001a      	movs	r2, r3
    879c:	230e      	movs	r3, #14
    879e:	18fb      	adds	r3, r7, r3
    87a0:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    87a2:	230e      	movs	r3, #14
    87a4:	18fb      	adds	r3, r7, r3
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	2b40      	cmp	r3, #64	; 0x40
    87aa:	d81f      	bhi.n	87ec <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    87ac:	230e      	movs	r3, #14
    87ae:	18fb      	adds	r3, r7, r3
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	b29b      	uxth	r3, r3
    87b4:	3301      	adds	r3, #1
    87b6:	b299      	uxth	r1, r3
    87b8:	230f      	movs	r3, #15
    87ba:	18fc      	adds	r4, r7, r3
    87bc:	687a      	ldr	r2, [r7, #4]
    87be:	2300      	movs	r3, #0
    87c0:	9302      	str	r3, [sp, #8]
    87c2:	2300      	movs	r3, #0
    87c4:	9301      	str	r3, [sp, #4]
    87c6:	2300      	movs	r3, #0
    87c8:	9300      	str	r3, [sp, #0]
    87ca:	000b      	movs	r3, r1
    87cc:	21ca      	movs	r1, #202	; 0xca
    87ce:	2002      	movs	r0, #2
    87d0:	4d0b      	ldr	r5, [pc, #44]	; (8800 <gethostbyname+0x80>)
    87d2:	47a8      	blx	r5
    87d4:	0003      	movs	r3, r0
    87d6:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    87d8:	230f      	movs	r3, #15
    87da:	18fb      	adds	r3, r7, r3
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	b25b      	sxtb	r3, r3
    87e0:	2b00      	cmp	r3, #0
    87e2:	d003      	beq.n	87ec <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    87e4:	230f      	movs	r3, #15
    87e6:	18fb      	adds	r3, r7, r3
    87e8:	22f7      	movs	r2, #247	; 0xf7
    87ea:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    87ec:	230f      	movs	r3, #15
    87ee:	18fb      	adds	r3, r7, r3
    87f0:	781b      	ldrb	r3, [r3, #0]
    87f2:	b25b      	sxtb	r3, r3
}
    87f4:	0018      	movs	r0, r3
    87f6:	46bd      	mov	sp, r7
    87f8:	b004      	add	sp, #16
    87fa:	bdb0      	pop	{r4, r5, r7, pc}
    87fc:	00003efd 	.word	0x00003efd
    8800:	00004299 	.word	0x00004299

00008804 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    8804:	b580      	push	{r7, lr}
    8806:	b082      	sub	sp, #8
    8808:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    880a:	003b      	movs	r3, r7
    880c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    880e:	687b      	ldr	r3, [r7, #4]
    8810:	22b9      	movs	r2, #185	; 0xb9
    8812:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8814:	4b13      	ldr	r3, [pc, #76]	; (8864 <spi_flash_enter_low_power_mode+0x60>)
    8816:	2100      	movs	r1, #0
    8818:	0018      	movs	r0, r3
    881a:	4b13      	ldr	r3, [pc, #76]	; (8868 <spi_flash_enter_low_power_mode+0x64>)
    881c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	781b      	ldrb	r3, [r3, #0]
    8822:	001a      	movs	r2, r3
    8824:	4b11      	ldr	r3, [pc, #68]	; (886c <spi_flash_enter_low_power_mode+0x68>)
    8826:	0011      	movs	r1, r2
    8828:	0018      	movs	r0, r3
    882a:	4b0f      	ldr	r3, [pc, #60]	; (8868 <spi_flash_enter_low_power_mode+0x64>)
    882c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    882e:	4b10      	ldr	r3, [pc, #64]	; (8870 <spi_flash_enter_low_power_mode+0x6c>)
    8830:	2101      	movs	r1, #1
    8832:	0018      	movs	r0, r3
    8834:	4b0c      	ldr	r3, [pc, #48]	; (8868 <spi_flash_enter_low_power_mode+0x64>)
    8836:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8838:	4b0e      	ldr	r3, [pc, #56]	; (8874 <spi_flash_enter_low_power_mode+0x70>)
    883a:	2100      	movs	r1, #0
    883c:	0018      	movs	r0, r3
    883e:	4b0a      	ldr	r3, [pc, #40]	; (8868 <spi_flash_enter_low_power_mode+0x64>)
    8840:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8842:	4b0d      	ldr	r3, [pc, #52]	; (8878 <spi_flash_enter_low_power_mode+0x74>)
    8844:	2181      	movs	r1, #129	; 0x81
    8846:	0018      	movs	r0, r3
    8848:	4b07      	ldr	r3, [pc, #28]	; (8868 <spi_flash_enter_low_power_mode+0x64>)
    884a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    884c:	46c0      	nop			; (mov r8, r8)
    884e:	4b0b      	ldr	r3, [pc, #44]	; (887c <spi_flash_enter_low_power_mode+0x78>)
    8850:	0018      	movs	r0, r3
    8852:	4b0b      	ldr	r3, [pc, #44]	; (8880 <spi_flash_enter_low_power_mode+0x7c>)
    8854:	4798      	blx	r3
    8856:	1e03      	subs	r3, r0, #0
    8858:	2b01      	cmp	r3, #1
    885a:	d1f8      	bne.n	884e <spi_flash_enter_low_power_mode+0x4a>
}
    885c:	46c0      	nop			; (mov r8, r8)
    885e:	46bd      	mov	sp, r7
    8860:	b002      	add	sp, #8
    8862:	bd80      	pop	{r7, pc}
    8864:	00010208 	.word	0x00010208
    8868:	000061fd 	.word	0x000061fd
    886c:	0001020c 	.word	0x0001020c
    8870:	00010214 	.word	0x00010214
    8874:	0001021c 	.word	0x0001021c
    8878:	00010204 	.word	0x00010204
    887c:	00010218 	.word	0x00010218
    8880:	000061b9 	.word	0x000061b9

00008884 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    8884:	b580      	push	{r7, lr}
    8886:	b082      	sub	sp, #8
    8888:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    888a:	003b      	movs	r3, r7
    888c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	22ab      	movs	r2, #171	; 0xab
    8892:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8894:	4b13      	ldr	r3, [pc, #76]	; (88e4 <spi_flash_leave_low_power_mode+0x60>)
    8896:	2100      	movs	r1, #0
    8898:	0018      	movs	r0, r3
    889a:	4b13      	ldr	r3, [pc, #76]	; (88e8 <spi_flash_leave_low_power_mode+0x64>)
    889c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    889e:	687b      	ldr	r3, [r7, #4]
    88a0:	781b      	ldrb	r3, [r3, #0]
    88a2:	001a      	movs	r2, r3
    88a4:	4b11      	ldr	r3, [pc, #68]	; (88ec <spi_flash_leave_low_power_mode+0x68>)
    88a6:	0011      	movs	r1, r2
    88a8:	0018      	movs	r0, r3
    88aa:	4b0f      	ldr	r3, [pc, #60]	; (88e8 <spi_flash_leave_low_power_mode+0x64>)
    88ac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    88ae:	4b10      	ldr	r3, [pc, #64]	; (88f0 <spi_flash_leave_low_power_mode+0x6c>)
    88b0:	2101      	movs	r1, #1
    88b2:	0018      	movs	r0, r3
    88b4:	4b0c      	ldr	r3, [pc, #48]	; (88e8 <spi_flash_leave_low_power_mode+0x64>)
    88b6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    88b8:	4b0e      	ldr	r3, [pc, #56]	; (88f4 <spi_flash_leave_low_power_mode+0x70>)
    88ba:	2100      	movs	r1, #0
    88bc:	0018      	movs	r0, r3
    88be:	4b0a      	ldr	r3, [pc, #40]	; (88e8 <spi_flash_leave_low_power_mode+0x64>)
    88c0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    88c2:	4b0d      	ldr	r3, [pc, #52]	; (88f8 <spi_flash_leave_low_power_mode+0x74>)
    88c4:	2181      	movs	r1, #129	; 0x81
    88c6:	0018      	movs	r0, r3
    88c8:	4b07      	ldr	r3, [pc, #28]	; (88e8 <spi_flash_leave_low_power_mode+0x64>)
    88ca:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    88cc:	46c0      	nop			; (mov r8, r8)
    88ce:	4b0b      	ldr	r3, [pc, #44]	; (88fc <spi_flash_leave_low_power_mode+0x78>)
    88d0:	0018      	movs	r0, r3
    88d2:	4b0b      	ldr	r3, [pc, #44]	; (8900 <spi_flash_leave_low_power_mode+0x7c>)
    88d4:	4798      	blx	r3
    88d6:	1e03      	subs	r3, r0, #0
    88d8:	2b01      	cmp	r3, #1
    88da:	d1f8      	bne.n	88ce <spi_flash_leave_low_power_mode+0x4a>
}
    88dc:	46c0      	nop			; (mov r8, r8)
    88de:	46bd      	mov	sp, r7
    88e0:	b002      	add	sp, #8
    88e2:	bd80      	pop	{r7, pc}
    88e4:	00010208 	.word	0x00010208
    88e8:	000061fd 	.word	0x000061fd
    88ec:	0001020c 	.word	0x0001020c
    88f0:	00010214 	.word	0x00010214
    88f4:	0001021c 	.word	0x0001021c
    88f8:	00010204 	.word	0x00010204
    88fc:	00010218 	.word	0x00010218
    8900:	000061b9 	.word	0x000061b9

00008904 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    8904:	b590      	push	{r4, r7, lr}
    8906:	b085      	sub	sp, #20
    8908:	af00      	add	r7, sp, #0
    890a:	0002      	movs	r2, r0
    890c:	1dfb      	adds	r3, r7, #7
    890e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    8910:	230f      	movs	r3, #15
    8912:	18fb      	adds	r3, r7, r3
    8914:	2200      	movs	r2, #0
    8916:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8918:	4b24      	ldr	r3, [pc, #144]	; (89ac <spi_flash_enable+0xa8>)
    891a:	4798      	blx	r3
    891c:	0003      	movs	r3, r0
    891e:	051b      	lsls	r3, r3, #20
    8920:	0d1b      	lsrs	r3, r3, #20
    8922:	4a23      	ldr	r2, [pc, #140]	; (89b0 <spi_flash_enable+0xac>)
    8924:	4293      	cmp	r3, r2
    8926:	d938      	bls.n	899a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    8928:	230f      	movs	r3, #15
    892a:	18fc      	adds	r4, r7, r3
    892c:	2308      	movs	r3, #8
    892e:	18fb      	adds	r3, r7, r3
    8930:	4a20      	ldr	r2, [pc, #128]	; (89b4 <spi_flash_enable+0xb0>)
    8932:	0019      	movs	r1, r3
    8934:	0010      	movs	r0, r2
    8936:	4b20      	ldr	r3, [pc, #128]	; (89b8 <spi_flash_enable+0xb4>)
    8938:	4798      	blx	r3
    893a:	0003      	movs	r3, r0
    893c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    893e:	230f      	movs	r3, #15
    8940:	18fb      	adds	r3, r7, r3
    8942:	781b      	ldrb	r3, [r3, #0]
    8944:	b25b      	sxtb	r3, r3
    8946:	2b00      	cmp	r3, #0
    8948:	d126      	bne.n	8998 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    894a:	68bb      	ldr	r3, [r7, #8]
    894c:	4a1b      	ldr	r2, [pc, #108]	; (89bc <spi_flash_enable+0xb8>)
    894e:	4013      	ands	r3, r2
    8950:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    8952:	68bb      	ldr	r3, [r7, #8]
    8954:	4a1a      	ldr	r2, [pc, #104]	; (89c0 <spi_flash_enable+0xbc>)
    8956:	4313      	orrs	r3, r2
    8958:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    895a:	68bb      	ldr	r3, [r7, #8]
    895c:	4a15      	ldr	r2, [pc, #84]	; (89b4 <spi_flash_enable+0xb0>)
    895e:	0019      	movs	r1, r3
    8960:	0010      	movs	r0, r2
    8962:	4b18      	ldr	r3, [pc, #96]	; (89c4 <spi_flash_enable+0xc0>)
    8964:	4798      	blx	r3
		if(enable) {
    8966:	1dfb      	adds	r3, r7, #7
    8968:	781b      	ldrb	r3, [r3, #0]
    896a:	2b00      	cmp	r3, #0
    896c:	d002      	beq.n	8974 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    896e:	4b16      	ldr	r3, [pc, #88]	; (89c8 <spi_flash_enable+0xc4>)
    8970:	4798      	blx	r3
    8972:	e001      	b.n	8978 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    8974:	4b15      	ldr	r3, [pc, #84]	; (89cc <spi_flash_enable+0xc8>)
    8976:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    8978:	68bb      	ldr	r3, [r7, #8]
    897a:	4a10      	ldr	r2, [pc, #64]	; (89bc <spi_flash_enable+0xb8>)
    897c:	4013      	ands	r3, r2
    897e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    8980:	68bb      	ldr	r3, [r7, #8]
    8982:	2280      	movs	r2, #128	; 0x80
    8984:	0252      	lsls	r2, r2, #9
    8986:	4313      	orrs	r3, r2
    8988:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    898a:	68bb      	ldr	r3, [r7, #8]
    898c:	4a09      	ldr	r2, [pc, #36]	; (89b4 <spi_flash_enable+0xb0>)
    898e:	0019      	movs	r1, r3
    8990:	0010      	movs	r0, r2
    8992:	4b0c      	ldr	r3, [pc, #48]	; (89c4 <spi_flash_enable+0xc0>)
    8994:	4798      	blx	r3
    8996:	e000      	b.n	899a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    8998:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    899a:	230f      	movs	r3, #15
    899c:	18fb      	adds	r3, r7, r3
    899e:	781b      	ldrb	r3, [r3, #0]
    89a0:	b25b      	sxtb	r3, r3
}
    89a2:	0018      	movs	r0, r3
    89a4:	46bd      	mov	sp, r7
    89a6:	b005      	add	sp, #20
    89a8:	bd90      	pop	{r4, r7, pc}
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	00005b45 	.word	0x00005b45
    89b0:	0000039f 	.word	0x0000039f
    89b4:	00001410 	.word	0x00001410
    89b8:	000061d9 	.word	0x000061d9
    89bc:	f8888fff 	.word	0xf8888fff
    89c0:	01111000 	.word	0x01111000
    89c4:	000061fd 	.word	0x000061fd
    89c8:	00008885 	.word	0x00008885
    89cc:	00008805 	.word	0x00008805

000089d0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    89d0:	b580      	push	{r7, lr}
    89d2:	b082      	sub	sp, #8
    89d4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    89d6:	4b10      	ldr	r3, [pc, #64]	; (8a18 <cpu_irq_enter_critical+0x48>)
    89d8:	681b      	ldr	r3, [r3, #0]
    89da:	2b00      	cmp	r3, #0
    89dc:	d112      	bne.n	8a04 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    89de:	f3ef 8310 	mrs	r3, PRIMASK
    89e2:	607b      	str	r3, [r7, #4]
  return(result);
    89e4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    89e6:	2b00      	cmp	r3, #0
    89e8:	d109      	bne.n	89fe <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    89ea:	b672      	cpsid	i
    89ec:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    89f0:	4b0a      	ldr	r3, [pc, #40]	; (8a1c <cpu_irq_enter_critical+0x4c>)
    89f2:	2200      	movs	r2, #0
    89f4:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    89f6:	4b0a      	ldr	r3, [pc, #40]	; (8a20 <cpu_irq_enter_critical+0x50>)
    89f8:	2201      	movs	r2, #1
    89fa:	701a      	strb	r2, [r3, #0]
    89fc:	e002      	b.n	8a04 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    89fe:	4b08      	ldr	r3, [pc, #32]	; (8a20 <cpu_irq_enter_critical+0x50>)
    8a00:	2200      	movs	r2, #0
    8a02:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    8a04:	4b04      	ldr	r3, [pc, #16]	; (8a18 <cpu_irq_enter_critical+0x48>)
    8a06:	681b      	ldr	r3, [r3, #0]
    8a08:	1c5a      	adds	r2, r3, #1
    8a0a:	4b03      	ldr	r3, [pc, #12]	; (8a18 <cpu_irq_enter_critical+0x48>)
    8a0c:	601a      	str	r2, [r3, #0]
}
    8a0e:	46c0      	nop			; (mov r8, r8)
    8a10:	46bd      	mov	sp, r7
    8a12:	b002      	add	sp, #8
    8a14:	bd80      	pop	{r7, pc}
    8a16:	46c0      	nop			; (mov r8, r8)
    8a18:	20000100 	.word	0x20000100
    8a1c:	2000002c 	.word	0x2000002c
    8a20:	20000104 	.word	0x20000104

00008a24 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    8a24:	b580      	push	{r7, lr}
    8a26:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    8a28:	4b0b      	ldr	r3, [pc, #44]	; (8a58 <cpu_irq_leave_critical+0x34>)
    8a2a:	681b      	ldr	r3, [r3, #0]
    8a2c:	1e5a      	subs	r2, r3, #1
    8a2e:	4b0a      	ldr	r3, [pc, #40]	; (8a58 <cpu_irq_leave_critical+0x34>)
    8a30:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    8a32:	4b09      	ldr	r3, [pc, #36]	; (8a58 <cpu_irq_leave_critical+0x34>)
    8a34:	681b      	ldr	r3, [r3, #0]
    8a36:	2b00      	cmp	r3, #0
    8a38:	d10a      	bne.n	8a50 <cpu_irq_leave_critical+0x2c>
    8a3a:	4b08      	ldr	r3, [pc, #32]	; (8a5c <cpu_irq_leave_critical+0x38>)
    8a3c:	781b      	ldrb	r3, [r3, #0]
    8a3e:	b2db      	uxtb	r3, r3
    8a40:	2b00      	cmp	r3, #0
    8a42:	d005      	beq.n	8a50 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    8a44:	4b06      	ldr	r3, [pc, #24]	; (8a60 <cpu_irq_leave_critical+0x3c>)
    8a46:	2201      	movs	r2, #1
    8a48:	701a      	strb	r2, [r3, #0]
    8a4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    8a4e:	b662      	cpsie	i
	}
}
    8a50:	46c0      	nop			; (mov r8, r8)
    8a52:	46bd      	mov	sp, r7
    8a54:	bd80      	pop	{r7, pc}
    8a56:	46c0      	nop			; (mov r8, r8)
    8a58:	20000100 	.word	0x20000100
    8a5c:	20000104 	.word	0x20000104
    8a60:	2000002c 	.word	0x2000002c

00008a64 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8a64:	b580      	push	{r7, lr}
    8a66:	b084      	sub	sp, #16
    8a68:	af00      	add	r7, sp, #0
    8a6a:	0002      	movs	r2, r0
    8a6c:	1dfb      	adds	r3, r7, #7
    8a6e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8a70:	230f      	movs	r3, #15
    8a72:	18fb      	adds	r3, r7, r3
    8a74:	1dfa      	adds	r2, r7, #7
    8a76:	7812      	ldrb	r2, [r2, #0]
    8a78:	09d2      	lsrs	r2, r2, #7
    8a7a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8a7c:	230e      	movs	r3, #14
    8a7e:	18fb      	adds	r3, r7, r3
    8a80:	1dfa      	adds	r2, r7, #7
    8a82:	7812      	ldrb	r2, [r2, #0]
    8a84:	0952      	lsrs	r2, r2, #5
    8a86:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8a88:	4b0d      	ldr	r3, [pc, #52]	; (8ac0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8a8a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8a8c:	230f      	movs	r3, #15
    8a8e:	18fb      	adds	r3, r7, r3
    8a90:	781b      	ldrb	r3, [r3, #0]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d10f      	bne.n	8ab6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8a96:	230f      	movs	r3, #15
    8a98:	18fb      	adds	r3, r7, r3
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	009b      	lsls	r3, r3, #2
    8a9e:	2210      	movs	r2, #16
    8aa0:	4694      	mov	ip, r2
    8aa2:	44bc      	add	ip, r7
    8aa4:	4463      	add	r3, ip
    8aa6:	3b08      	subs	r3, #8
    8aa8:	681a      	ldr	r2, [r3, #0]
    8aaa:	230e      	movs	r3, #14
    8aac:	18fb      	adds	r3, r7, r3
    8aae:	781b      	ldrb	r3, [r3, #0]
    8ab0:	01db      	lsls	r3, r3, #7
    8ab2:	18d3      	adds	r3, r2, r3
    8ab4:	e000      	b.n	8ab8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8ab6:	2300      	movs	r3, #0
	}
}
    8ab8:	0018      	movs	r0, r3
    8aba:	46bd      	mov	sp, r7
    8abc:	b004      	add	sp, #16
    8abe:	bd80      	pop	{r7, pc}
    8ac0:	41004400 	.word	0x41004400

00008ac4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8ac4:	b580      	push	{r7, lr}
    8ac6:	b082      	sub	sp, #8
    8ac8:	af00      	add	r7, sp, #0
    8aca:	0002      	movs	r2, r0
    8acc:	1dfb      	adds	r3, r7, #7
    8ace:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8ad0:	1dfb      	adds	r3, r7, #7
    8ad2:	781b      	ldrb	r3, [r3, #0]
    8ad4:	0018      	movs	r0, r3
    8ad6:	4b03      	ldr	r3, [pc, #12]	; (8ae4 <port_get_group_from_gpio_pin+0x20>)
    8ad8:	4798      	blx	r3
    8ada:	0003      	movs	r3, r0
}
    8adc:	0018      	movs	r0, r3
    8ade:	46bd      	mov	sp, r7
    8ae0:	b002      	add	sp, #8
    8ae2:	bd80      	pop	{r7, pc}
    8ae4:	00008a65 	.word	0x00008a65

00008ae8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    8ae8:	b580      	push	{r7, lr}
    8aea:	b082      	sub	sp, #8
    8aec:	af00      	add	r7, sp, #0
    8aee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    8af0:	687b      	ldr	r3, [r7, #4]
    8af2:	2200      	movs	r2, #0
    8af4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8af6:	687b      	ldr	r3, [r7, #4]
    8af8:	2201      	movs	r2, #1
    8afa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    8afc:	687b      	ldr	r3, [r7, #4]
    8afe:	2200      	movs	r2, #0
    8b00:	709a      	strb	r2, [r3, #2]
}
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	46bd      	mov	sp, r7
    8b06:	b002      	add	sp, #8
    8b08:	bd80      	pop	{r7, pc}
    8b0a:	46c0      	nop			; (mov r8, r8)

00008b0c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b084      	sub	sp, #16
    8b10:	af00      	add	r7, sp, #0
    8b12:	0002      	movs	r2, r0
    8b14:	1dfb      	adds	r3, r7, #7
    8b16:	701a      	strb	r2, [r3, #0]
    8b18:	1dbb      	adds	r3, r7, #6
    8b1a:	1c0a      	adds	r2, r1, #0
    8b1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8b1e:	1dfb      	adds	r3, r7, #7
    8b20:	781b      	ldrb	r3, [r3, #0]
    8b22:	0018      	movs	r0, r3
    8b24:	4b0d      	ldr	r3, [pc, #52]	; (8b5c <port_pin_set_output_level+0x50>)
    8b26:	4798      	blx	r3
    8b28:	0003      	movs	r3, r0
    8b2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8b2c:	1dfb      	adds	r3, r7, #7
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	221f      	movs	r2, #31
    8b32:	4013      	ands	r3, r2
    8b34:	2201      	movs	r2, #1
    8b36:	409a      	lsls	r2, r3
    8b38:	0013      	movs	r3, r2
    8b3a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8b3c:	1dbb      	adds	r3, r7, #6
    8b3e:	781b      	ldrb	r3, [r3, #0]
    8b40:	2b00      	cmp	r3, #0
    8b42:	d003      	beq.n	8b4c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8b44:	68fb      	ldr	r3, [r7, #12]
    8b46:	68ba      	ldr	r2, [r7, #8]
    8b48:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8b4a:	e002      	b.n	8b52 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8b4c:	68fb      	ldr	r3, [r7, #12]
    8b4e:	68ba      	ldr	r2, [r7, #8]
    8b50:	615a      	str	r2, [r3, #20]
	}
}
    8b52:	46c0      	nop			; (mov r8, r8)
    8b54:	46bd      	mov	sp, r7
    8b56:	b004      	add	sp, #16
    8b58:	bd80      	pop	{r7, pc}
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	00008ac5 	.word	0x00008ac5

00008b60 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    8b60:	b580      	push	{r7, lr}
    8b62:	b082      	sub	sp, #8
    8b64:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    8b66:	1d3b      	adds	r3, r7, #4
    8b68:	0018      	movs	r0, r3
    8b6a:	4b0e      	ldr	r3, [pc, #56]	; (8ba4 <system_board_init+0x44>)
    8b6c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    8b6e:	1d3b      	adds	r3, r7, #4
    8b70:	2201      	movs	r2, #1
    8b72:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    8b74:	1d3b      	adds	r3, r7, #4
    8b76:	0019      	movs	r1, r3
    8b78:	2017      	movs	r0, #23
    8b7a:	4b0b      	ldr	r3, [pc, #44]	; (8ba8 <system_board_init+0x48>)
    8b7c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    8b7e:	2101      	movs	r1, #1
    8b80:	2017      	movs	r0, #23
    8b82:	4b0a      	ldr	r3, [pc, #40]	; (8bac <system_board_init+0x4c>)
    8b84:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    8b86:	1d3b      	adds	r3, r7, #4
    8b88:	2200      	movs	r2, #0
    8b8a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    8b8c:	1d3b      	adds	r3, r7, #4
    8b8e:	2201      	movs	r2, #1
    8b90:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    8b92:	1d3b      	adds	r3, r7, #4
    8b94:	0019      	movs	r1, r3
    8b96:	2037      	movs	r0, #55	; 0x37
    8b98:	4b03      	ldr	r3, [pc, #12]	; (8ba8 <system_board_init+0x48>)
    8b9a:	4798      	blx	r3
}
    8b9c:	46c0      	nop			; (mov r8, r8)
    8b9e:	46bd      	mov	sp, r7
    8ba0:	b002      	add	sp, #8
    8ba2:	bd80      	pop	{r7, pc}
    8ba4:	00008ae9 	.word	0x00008ae9
    8ba8:	00009c39 	.word	0x00009c39
    8bac:	00008b0d 	.word	0x00008b0d

00008bb0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b082      	sub	sp, #8
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	2200      	movs	r2, #0
    8bbc:	701a      	strb	r2, [r3, #0]
}
    8bbe:	46c0      	nop			; (mov r8, r8)
    8bc0:	46bd      	mov	sp, r7
    8bc2:	b002      	add	sp, #8
    8bc4:	bd80      	pop	{r7, pc}
    8bc6:	46c0      	nop			; (mov r8, r8)

00008bc8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8bc8:	b580      	push	{r7, lr}
    8bca:	b082      	sub	sp, #8
    8bcc:	af00      	add	r7, sp, #0
    8bce:	0002      	movs	r2, r0
    8bd0:	6039      	str	r1, [r7, #0]
    8bd2:	1dfb      	adds	r3, r7, #7
    8bd4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8bd6:	1dfb      	adds	r3, r7, #7
    8bd8:	781b      	ldrb	r3, [r3, #0]
    8bda:	2b01      	cmp	r3, #1
    8bdc:	d00a      	beq.n	8bf4 <system_apb_clock_set_mask+0x2c>
    8bde:	2b02      	cmp	r3, #2
    8be0:	d00f      	beq.n	8c02 <system_apb_clock_set_mask+0x3a>
    8be2:	2b00      	cmp	r3, #0
    8be4:	d114      	bne.n	8c10 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8be6:	4b0e      	ldr	r3, [pc, #56]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8be8:	4a0d      	ldr	r2, [pc, #52]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8bea:	6991      	ldr	r1, [r2, #24]
    8bec:	683a      	ldr	r2, [r7, #0]
    8bee:	430a      	orrs	r2, r1
    8bf0:	619a      	str	r2, [r3, #24]
			break;
    8bf2:	e00f      	b.n	8c14 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8bf4:	4b0a      	ldr	r3, [pc, #40]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8bf6:	4a0a      	ldr	r2, [pc, #40]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8bf8:	69d1      	ldr	r1, [r2, #28]
    8bfa:	683a      	ldr	r2, [r7, #0]
    8bfc:	430a      	orrs	r2, r1
    8bfe:	61da      	str	r2, [r3, #28]
			break;
    8c00:	e008      	b.n	8c14 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8c02:	4b07      	ldr	r3, [pc, #28]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8c04:	4a06      	ldr	r2, [pc, #24]	; (8c20 <system_apb_clock_set_mask+0x58>)
    8c06:	6a11      	ldr	r1, [r2, #32]
    8c08:	683a      	ldr	r2, [r7, #0]
    8c0a:	430a      	orrs	r2, r1
    8c0c:	621a      	str	r2, [r3, #32]
			break;
    8c0e:	e001      	b.n	8c14 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8c10:	2317      	movs	r3, #23
    8c12:	e000      	b.n	8c16 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8c14:	2300      	movs	r3, #0
}
    8c16:	0018      	movs	r0, r3
    8c18:	46bd      	mov	sp, r7
    8c1a:	b002      	add	sp, #8
    8c1c:	bd80      	pop	{r7, pc}
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	40000400 	.word	0x40000400

00008c24 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b082      	sub	sp, #8
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8c2c:	687b      	ldr	r3, [r7, #4]
    8c2e:	2280      	movs	r2, #128	; 0x80
    8c30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8c32:	687b      	ldr	r3, [r7, #4]
    8c34:	2200      	movs	r2, #0
    8c36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	2201      	movs	r2, #1
    8c3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8c3e:	687b      	ldr	r3, [r7, #4]
    8c40:	2200      	movs	r2, #0
    8c42:	70da      	strb	r2, [r3, #3]
}
    8c44:	46c0      	nop			; (mov r8, r8)
    8c46:	46bd      	mov	sp, r7
    8c48:	b002      	add	sp, #8
    8c4a:	bd80      	pop	{r7, pc}

00008c4c <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    8c4c:	b580      	push	{r7, lr}
    8c4e:	b082      	sub	sp, #8
    8c50:	af00      	add	r7, sp, #0
    8c52:	0002      	movs	r2, r0
    8c54:	1dfb      	adds	r3, r7, #7
    8c56:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    8c58:	1dfb      	adds	r3, r7, #7
    8c5a:	781b      	ldrb	r3, [r3, #0]
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d002      	beq.n	8c66 <system_voltage_reference_enable+0x1a>
    8c60:	2b01      	cmp	r3, #1
    8c62:	d007      	beq.n	8c74 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    8c64:	e00d      	b.n	8c82 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    8c66:	4b08      	ldr	r3, [pc, #32]	; (8c88 <system_voltage_reference_enable+0x3c>)
    8c68:	4a07      	ldr	r2, [pc, #28]	; (8c88 <system_voltage_reference_enable+0x3c>)
    8c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
    8c6c:	2102      	movs	r1, #2
    8c6e:	430a      	orrs	r2, r1
    8c70:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    8c72:	e006      	b.n	8c82 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    8c74:	4b04      	ldr	r3, [pc, #16]	; (8c88 <system_voltage_reference_enable+0x3c>)
    8c76:	4a04      	ldr	r2, [pc, #16]	; (8c88 <system_voltage_reference_enable+0x3c>)
    8c78:	6c12      	ldr	r2, [r2, #64]	; 0x40
    8c7a:	2104      	movs	r1, #4
    8c7c:	430a      	orrs	r2, r1
    8c7e:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    8c80:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    8c82:	46bd      	mov	sp, r7
    8c84:	b002      	add	sp, #8
    8c86:	bd80      	pop	{r7, pc}
    8c88:	40000800 	.word	0x40000800

00008c8c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    8c8c:	b580      	push	{r7, lr}
    8c8e:	b084      	sub	sp, #16
    8c90:	af00      	add	r7, sp, #0
    8c92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	681b      	ldr	r3, [r3, #0]
    8c98:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8c9a:	68fb      	ldr	r3, [r7, #12]
    8c9c:	7e5b      	ldrb	r3, [r3, #25]
    8c9e:	b2db      	uxtb	r3, r3
    8ca0:	b25b      	sxtb	r3, r3
    8ca2:	2b00      	cmp	r3, #0
    8ca4:	da01      	bge.n	8caa <adc_is_syncing+0x1e>
		return true;
    8ca6:	2301      	movs	r3, #1
    8ca8:	e000      	b.n	8cac <adc_is_syncing+0x20>
	}

	return false;
    8caa:	2300      	movs	r3, #0
}
    8cac:	0018      	movs	r0, r3
    8cae:	46bd      	mov	sp, r7
    8cb0:	b004      	add	sp, #16
    8cb2:	bd80      	pop	{r7, pc}

00008cb4 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    8cb4:	b580      	push	{r7, lr}
    8cb6:	b082      	sub	sp, #8
    8cb8:	af00      	add	r7, sp, #0
    8cba:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    8cbc:	687b      	ldr	r3, [r7, #4]
    8cbe:	2200      	movs	r2, #0
    8cc0:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	2200      	movs	r2, #0
    8cc6:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    8cc8:	687b      	ldr	r3, [r7, #4]
    8cca:	2200      	movs	r2, #0
    8ccc:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    8cce:	687b      	ldr	r3, [r7, #4]
    8cd0:	2200      	movs	r2, #0
    8cd2:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    8cd4:	687b      	ldr	r3, [r7, #4]
    8cd6:	2200      	movs	r2, #0
    8cd8:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    8cda:	687b      	ldr	r3, [r7, #4]
    8cdc:	2200      	movs	r2, #0
    8cde:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    8ce0:	687b      	ldr	r3, [r7, #4]
    8ce2:	2200      	movs	r2, #0
    8ce4:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	2200      	movs	r2, #0
    8cea:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    8cec:	687b      	ldr	r3, [r7, #4]
    8cee:	2200      	movs	r2, #0
    8cf0:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    8cf2:	687b      	ldr	r3, [r7, #4]
    8cf4:	22c0      	movs	r2, #192	; 0xc0
    8cf6:	0152      	lsls	r2, r2, #5
    8cf8:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    8cfa:	687b      	ldr	r3, [r7, #4]
    8cfc:	2200      	movs	r2, #0
    8cfe:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    8d00:	687b      	ldr	r3, [r7, #4]
    8d02:	2200      	movs	r2, #0
    8d04:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	2200      	movs	r2, #0
    8d0a:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    8d0c:	687b      	ldr	r3, [r7, #4]
    8d0e:	2200      	movs	r2, #0
    8d10:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    8d12:	687b      	ldr	r3, [r7, #4]
    8d14:	2200      	movs	r2, #0
    8d16:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    8d18:	687b      	ldr	r3, [r7, #4]
    8d1a:	222a      	movs	r2, #42	; 0x2a
    8d1c:	2100      	movs	r1, #0
    8d1e:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    8d20:	687b      	ldr	r3, [r7, #4]
    8d22:	2200      	movs	r2, #0
    8d24:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    8d26:	687b      	ldr	r3, [r7, #4]
    8d28:	2200      	movs	r2, #0
    8d2a:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    8d2c:	687b      	ldr	r3, [r7, #4]
    8d2e:	2224      	movs	r2, #36	; 0x24
    8d30:	2100      	movs	r1, #0
    8d32:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	2200      	movs	r2, #0
    8d38:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	2200      	movs	r2, #0
    8d3e:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    8d40:	687b      	ldr	r3, [r7, #4]
    8d42:	2200      	movs	r2, #0
    8d44:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    8d46:	687b      	ldr	r3, [r7, #4]
    8d48:	222b      	movs	r2, #43	; 0x2b
    8d4a:	2100      	movs	r1, #0
    8d4c:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    8d4e:	687b      	ldr	r3, [r7, #4]
    8d50:	222c      	movs	r2, #44	; 0x2c
    8d52:	2100      	movs	r1, #0
    8d54:	5499      	strb	r1, [r3, r2]
}
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	46bd      	mov	sp, r7
    8d5a:	b002      	add	sp, #8
    8d5c:	bd80      	pop	{r7, pc}
    8d5e:	46c0      	nop			; (mov r8, r8)

00008d60 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    8d60:	b580      	push	{r7, lr}
    8d62:	b098      	sub	sp, #96	; 0x60
    8d64:	af00      	add	r7, sp, #0
    8d66:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    8d68:	230c      	movs	r3, #12
    8d6a:	18fa      	adds	r2, r7, r3
    8d6c:	4b15      	ldr	r3, [pc, #84]	; (8dc4 <_adc_configure_ain_pin+0x64>)
    8d6e:	0010      	movs	r0, r2
    8d70:	0019      	movs	r1, r3
    8d72:	2350      	movs	r3, #80	; 0x50
    8d74:	001a      	movs	r2, r3
    8d76:	4b14      	ldr	r3, [pc, #80]	; (8dc8 <_adc_configure_ain_pin+0x68>)
    8d78:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    8d7a:	4b14      	ldr	r3, [pc, #80]	; (8dcc <_adc_configure_ain_pin+0x6c>)
    8d7c:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    8d7e:	687b      	ldr	r3, [r7, #4]
    8d80:	2b13      	cmp	r3, #19
    8d82:	d81a      	bhi.n	8dba <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    8d84:	230c      	movs	r3, #12
    8d86:	18fb      	adds	r3, r7, r3
    8d88:	687a      	ldr	r2, [r7, #4]
    8d8a:	0092      	lsls	r2, r2, #2
    8d8c:	58d3      	ldr	r3, [r2, r3]
    8d8e:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    8d90:	2308      	movs	r3, #8
    8d92:	18fb      	adds	r3, r7, r3
    8d94:	0018      	movs	r0, r3
    8d96:	4b0e      	ldr	r3, [pc, #56]	; (8dd0 <_adc_configure_ain_pin+0x70>)
    8d98:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    8d9a:	2308      	movs	r3, #8
    8d9c:	18fb      	adds	r3, r7, r3
    8d9e:	2200      	movs	r2, #0
    8da0:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    8da2:	2308      	movs	r3, #8
    8da4:	18fb      	adds	r3, r7, r3
    8da6:	2201      	movs	r2, #1
    8da8:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    8daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8dac:	b2db      	uxtb	r3, r3
    8dae:	2208      	movs	r2, #8
    8db0:	18ba      	adds	r2, r7, r2
    8db2:	0011      	movs	r1, r2
    8db4:	0018      	movs	r0, r3
    8db6:	4b07      	ldr	r3, [pc, #28]	; (8dd4 <_adc_configure_ain_pin+0x74>)
    8db8:	4798      	blx	r3
	}
}
    8dba:	46c0      	nop			; (mov r8, r8)
    8dbc:	46bd      	mov	sp, r7
    8dbe:	b018      	add	sp, #96	; 0x60
    8dc0:	bd80      	pop	{r7, pc}
    8dc2:	46c0      	nop			; (mov r8, r8)
    8dc4:	00013bf4 	.word	0x00013bf4
    8dc8:	00010dd5 	.word	0x00010dd5
    8dcc:	0000ffff 	.word	0x0000ffff
    8dd0:	00008c25 	.word	0x00008c25
    8dd4:	0000cbfd 	.word	0x0000cbfd

00008dd8 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    8dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dda:	b089      	sub	sp, #36	; 0x24
    8ddc:	af00      	add	r7, sp, #0
    8dde:	6078      	str	r0, [r7, #4]
    8de0:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    8de2:	231f      	movs	r3, #31
    8de4:	18fb      	adds	r3, r7, r3
    8de6:	2200      	movs	r2, #0
    8de8:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    8dea:	2310      	movs	r3, #16
    8dec:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    8dee:	2317      	movs	r3, #23
    8df0:	18fb      	adds	r3, r7, r3
    8df2:	2200      	movs	r2, #0
    8df4:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	681b      	ldr	r3, [r3, #0]
    8dfa:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8dfc:	230c      	movs	r3, #12
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	0018      	movs	r0, r3
    8e02:	4bce      	ldr	r3, [pc, #824]	; (913c <_adc_set_config+0x364>)
    8e04:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    8e06:	683b      	ldr	r3, [r7, #0]
    8e08:	781a      	ldrb	r2, [r3, #0]
    8e0a:	230c      	movs	r3, #12
    8e0c:	18fb      	adds	r3, r7, r3
    8e0e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    8e10:	230c      	movs	r3, #12
    8e12:	18fb      	adds	r3, r7, r3
    8e14:	0019      	movs	r1, r3
    8e16:	201e      	movs	r0, #30
    8e18:	4bc9      	ldr	r3, [pc, #804]	; (9140 <_adc_set_config+0x368>)
    8e1a:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    8e1c:	201e      	movs	r0, #30
    8e1e:	4bc9      	ldr	r3, [pc, #804]	; (9144 <_adc_set_config+0x36c>)
    8e20:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    8e22:	683b      	ldr	r3, [r7, #0]
    8e24:	222c      	movs	r2, #44	; 0x2c
    8e26:	5c9b      	ldrb	r3, [r3, r2]
    8e28:	2b00      	cmp	r3, #0
    8e2a:	d040      	beq.n	8eae <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    8e2c:	2316      	movs	r3, #22
    8e2e:	18fb      	adds	r3, r7, r3
    8e30:	683a      	ldr	r2, [r7, #0]
    8e32:	212b      	movs	r1, #43	; 0x2b
    8e34:	5c52      	ldrb	r2, [r2, r1]
    8e36:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    8e38:	683b      	ldr	r3, [r7, #0]
    8e3a:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    8e3c:	2315      	movs	r3, #21
    8e3e:	18fb      	adds	r3, r7, r3
    8e40:	2216      	movs	r2, #22
    8e42:	18ba      	adds	r2, r7, r2
    8e44:	7812      	ldrb	r2, [r2, #0]
    8e46:	188a      	adds	r2, r1, r2
    8e48:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    8e4a:	683b      	ldr	r3, [r7, #0]
    8e4c:	222c      	movs	r2, #44	; 0x2c
    8e4e:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    8e50:	230f      	movs	r3, #15
    8e52:	18fb      	adds	r3, r7, r3
    8e54:	2215      	movs	r2, #21
    8e56:	18ba      	adds	r2, r7, r2
    8e58:	7812      	ldrb	r2, [r2, #0]
    8e5a:	188a      	adds	r2, r1, r2
    8e5c:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    8e5e:	e018      	b.n	8e92 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    8e60:	2316      	movs	r3, #22
    8e62:	18fb      	adds	r3, r7, r3
    8e64:	781b      	ldrb	r3, [r3, #0]
    8e66:	220f      	movs	r2, #15
    8e68:	4013      	ands	r3, r2
    8e6a:	683a      	ldr	r2, [r7, #0]
    8e6c:	7b12      	ldrb	r2, [r2, #12]
    8e6e:	189b      	adds	r3, r3, r2
    8e70:	0018      	movs	r0, r3
    8e72:	4bb5      	ldr	r3, [pc, #724]	; (9148 <_adc_set_config+0x370>)
    8e74:	4798      	blx	r3
			start_pin++;
    8e76:	2315      	movs	r3, #21
    8e78:	18fb      	adds	r3, r7, r3
    8e7a:	781a      	ldrb	r2, [r3, #0]
    8e7c:	2315      	movs	r3, #21
    8e7e:	18fb      	adds	r3, r7, r3
    8e80:	3201      	adds	r2, #1
    8e82:	701a      	strb	r2, [r3, #0]
			offset++;
    8e84:	2316      	movs	r3, #22
    8e86:	18fb      	adds	r3, r7, r3
    8e88:	781a      	ldrb	r2, [r3, #0]
    8e8a:	2316      	movs	r3, #22
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	3201      	adds	r2, #1
    8e90:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    8e92:	2315      	movs	r3, #21
    8e94:	18fa      	adds	r2, r7, r3
    8e96:	230f      	movs	r3, #15
    8e98:	18fb      	adds	r3, r7, r3
    8e9a:	7812      	ldrb	r2, [r2, #0]
    8e9c:	781b      	ldrb	r3, [r3, #0]
    8e9e:	429a      	cmp	r2, r3
    8ea0:	d3de      	bcc.n	8e60 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    8ea2:	683b      	ldr	r3, [r7, #0]
    8ea4:	89db      	ldrh	r3, [r3, #14]
    8ea6:	0018      	movs	r0, r3
    8ea8:	4ba7      	ldr	r3, [pc, #668]	; (9148 <_adc_set_config+0x370>)
    8eaa:	4798      	blx	r3
    8eac:	e009      	b.n	8ec2 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    8eae:	683b      	ldr	r3, [r7, #0]
    8eb0:	7b1b      	ldrb	r3, [r3, #12]
    8eb2:	0018      	movs	r0, r3
    8eb4:	4ba4      	ldr	r3, [pc, #656]	; (9148 <_adc_set_config+0x370>)
    8eb6:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    8eb8:	683b      	ldr	r3, [r7, #0]
    8eba:	89db      	ldrh	r3, [r3, #14]
    8ebc:	0018      	movs	r0, r3
    8ebe:	4ba2      	ldr	r3, [pc, #648]	; (9148 <_adc_set_config+0x370>)
    8ec0:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    8ec2:	683b      	ldr	r3, [r7, #0]
    8ec4:	7d5b      	ldrb	r3, [r3, #21]
    8ec6:	009b      	lsls	r3, r3, #2
    8ec8:	b2da      	uxtb	r2, r3
    8eca:	693b      	ldr	r3, [r7, #16]
    8ecc:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    8ece:	683b      	ldr	r3, [r7, #0]
    8ed0:	7d9b      	ldrb	r3, [r3, #22]
    8ed2:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    8ed4:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    8ed6:	683b      	ldr	r3, [r7, #0]
    8ed8:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    8eda:	b25b      	sxtb	r3, r3
    8edc:	4313      	orrs	r3, r2
    8ede:	b25b      	sxtb	r3, r3
    8ee0:	b2da      	uxtb	r2, r3
    8ee2:	693b      	ldr	r3, [r7, #16]
    8ee4:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    8ee6:	683b      	ldr	r3, [r7, #0]
    8ee8:	791b      	ldrb	r3, [r3, #4]
    8eea:	2b34      	cmp	r3, #52	; 0x34
    8eec:	d846      	bhi.n	8f7c <_adc_set_config+0x1a4>
    8eee:	009a      	lsls	r2, r3, #2
    8ef0:	4b96      	ldr	r3, [pc, #600]	; (914c <_adc_set_config+0x374>)
    8ef2:	18d3      	adds	r3, r2, r3
    8ef4:	681b      	ldr	r3, [r3, #0]
    8ef6:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    8ef8:	231f      	movs	r3, #31
    8efa:	18fb      	adds	r3, r7, r3
    8efc:	683a      	ldr	r2, [r7, #0]
    8efe:	7c52      	ldrb	r2, [r2, #17]
    8f00:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    8f02:	2317      	movs	r3, #23
    8f04:	18fb      	adds	r3, r7, r3
    8f06:	683a      	ldr	r2, [r7, #0]
    8f08:	7c12      	ldrb	r2, [r2, #16]
    8f0a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f0c:	2310      	movs	r3, #16
    8f0e:	61bb      	str	r3, [r7, #24]
		break;
    8f10:	e036      	b.n	8f80 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8f12:	231f      	movs	r3, #31
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	2201      	movs	r2, #1
    8f18:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    8f1a:	2317      	movs	r3, #23
    8f1c:	18fb      	adds	r3, r7, r3
    8f1e:	2202      	movs	r2, #2
    8f20:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f22:	2310      	movs	r3, #16
    8f24:	61bb      	str	r3, [r7, #24]
		break;
    8f26:	e02b      	b.n	8f80 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    8f28:	231f      	movs	r3, #31
    8f2a:	18fb      	adds	r3, r7, r3
    8f2c:	2202      	movs	r2, #2
    8f2e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    8f30:	2317      	movs	r3, #23
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	2204      	movs	r2, #4
    8f36:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f38:	2310      	movs	r3, #16
    8f3a:	61bb      	str	r3, [r7, #24]
		break;
    8f3c:	e020      	b.n	8f80 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    8f3e:	231f      	movs	r3, #31
    8f40:	18fb      	adds	r3, r7, r3
    8f42:	2201      	movs	r2, #1
    8f44:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    8f46:	2317      	movs	r3, #23
    8f48:	18fb      	adds	r3, r7, r3
    8f4a:	2206      	movs	r2, #6
    8f4c:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f4e:	2310      	movs	r3, #16
    8f50:	61bb      	str	r3, [r7, #24]
		break;
    8f52:	e015      	b.n	8f80 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    8f54:	231f      	movs	r3, #31
    8f56:	18fb      	adds	r3, r7, r3
    8f58:	2200      	movs	r2, #0
    8f5a:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    8f5c:	2317      	movs	r3, #23
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	2208      	movs	r2, #8
    8f62:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    8f64:	2310      	movs	r3, #16
    8f66:	61bb      	str	r3, [r7, #24]
		break;
    8f68:	e00a      	b.n	8f80 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    8f6a:	2330      	movs	r3, #48	; 0x30
    8f6c:	61bb      	str	r3, [r7, #24]
		break;
    8f6e:	e007      	b.n	8f80 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    8f70:	2320      	movs	r3, #32
    8f72:	61bb      	str	r3, [r7, #24]
		break;
    8f74:	e004      	b.n	8f80 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    8f76:	2300      	movs	r3, #0
    8f78:	61bb      	str	r3, [r7, #24]
		break;
    8f7a:	e001      	b.n	8f80 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    8f7c:	2317      	movs	r3, #23
    8f7e:	e1ae      	b.n	92de <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    8f80:	231f      	movs	r3, #31
    8f82:	18fb      	adds	r3, r7, r3
    8f84:	781b      	ldrb	r3, [r3, #0]
    8f86:	011b      	lsls	r3, r3, #4
    8f88:	b2db      	uxtb	r3, r3
    8f8a:	2270      	movs	r2, #112	; 0x70
    8f8c:	4013      	ands	r3, r2
    8f8e:	b2da      	uxtb	r2, r3
    8f90:	2317      	movs	r3, #23
    8f92:	18fb      	adds	r3, r7, r3
    8f94:	781b      	ldrb	r3, [r3, #0]
    8f96:	4313      	orrs	r3, r2
    8f98:	b2da      	uxtb	r2, r3
    8f9a:	693b      	ldr	r3, [r7, #16]
    8f9c:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    8f9e:	683b      	ldr	r3, [r7, #0]
    8fa0:	7ddb      	ldrb	r3, [r3, #23]
    8fa2:	2b3f      	cmp	r3, #63	; 0x3f
    8fa4:	d901      	bls.n	8faa <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    8fa6:	2317      	movs	r3, #23
    8fa8:	e199      	b.n	92de <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    8faa:	683b      	ldr	r3, [r7, #0]
    8fac:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    8fae:	693b      	ldr	r3, [r7, #16]
    8fb0:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    8fb2:	46c0      	nop			; (mov r8, r8)
    8fb4:	687b      	ldr	r3, [r7, #4]
    8fb6:	0018      	movs	r0, r3
    8fb8:	4b65      	ldr	r3, [pc, #404]	; (9150 <_adc_set_config+0x378>)
    8fba:	4798      	blx	r3
    8fbc:	1e03      	subs	r3, r0, #0
    8fbe:	d1f9      	bne.n	8fb4 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    8fc0:	683b      	ldr	r3, [r7, #0]
    8fc2:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8fc4:	69bb      	ldr	r3, [r7, #24]
    8fc6:	b29b      	uxth	r3, r3
    8fc8:	4313      	orrs	r3, r2
    8fca:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    8fcc:	683b      	ldr	r3, [r7, #0]
    8fce:	2124      	movs	r1, #36	; 0x24
    8fd0:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8fd2:	b29b      	uxth	r3, r3
    8fd4:	00db      	lsls	r3, r3, #3
    8fd6:	b29b      	uxth	r3, r3
    8fd8:	4313      	orrs	r3, r2
    8fda:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    8fdc:	683b      	ldr	r3, [r7, #0]
    8fde:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8fe0:	b29b      	uxth	r3, r3
    8fe2:	009b      	lsls	r3, r3, #2
    8fe4:	b29b      	uxth	r3, r3
    8fe6:	4313      	orrs	r3, r2
    8fe8:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    8fea:	683b      	ldr	r3, [r7, #0]
    8fec:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8fee:	b29b      	uxth	r3, r3
    8ff0:	18db      	adds	r3, r3, r3
    8ff2:	b29b      	uxth	r3, r3
    8ff4:	4313      	orrs	r3, r2
    8ff6:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    8ff8:	683b      	ldr	r3, [r7, #0]
    8ffa:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    8ffc:	b29b      	uxth	r3, r3
    8ffe:	4313      	orrs	r3, r2
    9000:	b29a      	uxth	r2, r3
    9002:	693b      	ldr	r3, [r7, #16]
    9004:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    9006:	683b      	ldr	r3, [r7, #0]
    9008:	7e1b      	ldrb	r3, [r3, #24]
    900a:	2b00      	cmp	r3, #0
    900c:	d100      	bne.n	9010 <_adc_set_config+0x238>
    900e:	e0c4      	b.n	919a <_adc_set_config+0x3c2>
		switch (resolution) {
    9010:	69bb      	ldr	r3, [r7, #24]
    9012:	2b10      	cmp	r3, #16
    9014:	d100      	bne.n	9018 <_adc_set_config+0x240>
    9016:	e076      	b.n	9106 <_adc_set_config+0x32e>
    9018:	d802      	bhi.n	9020 <_adc_set_config+0x248>
    901a:	2b00      	cmp	r3, #0
    901c:	d04d      	beq.n	90ba <_adc_set_config+0x2e2>
    901e:	e0bc      	b.n	919a <_adc_set_config+0x3c2>
    9020:	2b20      	cmp	r3, #32
    9022:	d023      	beq.n	906c <_adc_set_config+0x294>
    9024:	2b30      	cmp	r3, #48	; 0x30
    9026:	d000      	beq.n	902a <_adc_set_config+0x252>
    9028:	e0b7      	b.n	919a <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    902a:	683b      	ldr	r3, [r7, #0]
    902c:	7cdb      	ldrb	r3, [r3, #19]
    902e:	2b00      	cmp	r3, #0
    9030:	d011      	beq.n	9056 <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    9032:	683b      	ldr	r3, [r7, #0]
    9034:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    9036:	2b7f      	cmp	r3, #127	; 0x7f
    9038:	dc0b      	bgt.n	9052 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    903a:	683b      	ldr	r3, [r7, #0]
    903c:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    903e:	3380      	adds	r3, #128	; 0x80
    9040:	db07      	blt.n	9052 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    9042:	683b      	ldr	r3, [r7, #0]
    9044:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    9046:	2b7f      	cmp	r3, #127	; 0x7f
    9048:	dc03      	bgt.n	9052 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    904a:	683b      	ldr	r3, [r7, #0]
    904c:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    904e:	3380      	adds	r3, #128	; 0x80
    9050:	da01      	bge.n	9056 <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9052:	2317      	movs	r3, #23
    9054:	e143      	b.n	92de <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    9056:	683b      	ldr	r3, [r7, #0]
    9058:	69db      	ldr	r3, [r3, #28]
    905a:	2bff      	cmp	r3, #255	; 0xff
    905c:	dc04      	bgt.n	9068 <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    905e:	683b      	ldr	r3, [r7, #0]
    9060:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    9062:	2bff      	cmp	r3, #255	; 0xff
    9064:	dc00      	bgt.n	9068 <_adc_set_config+0x290>
    9066:	e091      	b.n	918c <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9068:	2317      	movs	r3, #23
    906a:	e138      	b.n	92de <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    906c:	683b      	ldr	r3, [r7, #0]
    906e:	7cdb      	ldrb	r3, [r3, #19]
    9070:	2b00      	cmp	r3, #0
    9072:	d015      	beq.n	90a0 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    9074:	683b      	ldr	r3, [r7, #0]
    9076:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    9078:	4a36      	ldr	r2, [pc, #216]	; (9154 <_adc_set_config+0x37c>)
    907a:	4293      	cmp	r3, r2
    907c:	dc0e      	bgt.n	909c <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    907e:	683b      	ldr	r3, [r7, #0]
    9080:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    9082:	4a35      	ldr	r2, [pc, #212]	; (9158 <_adc_set_config+0x380>)
    9084:	4293      	cmp	r3, r2
    9086:	db09      	blt.n	909c <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    9088:	683b      	ldr	r3, [r7, #0]
    908a:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    908c:	4a31      	ldr	r2, [pc, #196]	; (9154 <_adc_set_config+0x37c>)
    908e:	4293      	cmp	r3, r2
    9090:	dc04      	bgt.n	909c <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
    9092:	683b      	ldr	r3, [r7, #0]
    9094:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    9096:	4a30      	ldr	r2, [pc, #192]	; (9158 <_adc_set_config+0x380>)
    9098:	4293      	cmp	r3, r2
    909a:	da01      	bge.n	90a0 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    909c:	2317      	movs	r3, #23
    909e:	e11e      	b.n	92de <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    90a0:	683b      	ldr	r3, [r7, #0]
    90a2:	69db      	ldr	r3, [r3, #28]
    90a4:	4a2d      	ldr	r2, [pc, #180]	; (915c <_adc_set_config+0x384>)
    90a6:	4293      	cmp	r3, r2
    90a8:	dc05      	bgt.n	90b6 <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    90aa:	683b      	ldr	r3, [r7, #0]
    90ac:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    90ae:	4a2b      	ldr	r2, [pc, #172]	; (915c <_adc_set_config+0x384>)
    90b0:	4293      	cmp	r3, r2
    90b2:	dc00      	bgt.n	90b6 <_adc_set_config+0x2de>
    90b4:	e06c      	b.n	9190 <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    90b6:	2317      	movs	r3, #23
    90b8:	e111      	b.n	92de <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    90ba:	683b      	ldr	r3, [r7, #0]
    90bc:	7cdb      	ldrb	r3, [r3, #19]
    90be:	2b00      	cmp	r3, #0
    90c0:	d015      	beq.n	90ee <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    90c2:	683b      	ldr	r3, [r7, #0]
    90c4:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    90c6:	4a26      	ldr	r2, [pc, #152]	; (9160 <_adc_set_config+0x388>)
    90c8:	4293      	cmp	r3, r2
    90ca:	dc0e      	bgt.n	90ea <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    90cc:	683b      	ldr	r3, [r7, #0]
    90ce:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    90d0:	4a24      	ldr	r2, [pc, #144]	; (9164 <_adc_set_config+0x38c>)
    90d2:	4293      	cmp	r3, r2
    90d4:	db09      	blt.n	90ea <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    90d6:	683b      	ldr	r3, [r7, #0]
    90d8:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    90da:	4a21      	ldr	r2, [pc, #132]	; (9160 <_adc_set_config+0x388>)
    90dc:	4293      	cmp	r3, r2
    90de:	dc04      	bgt.n	90ea <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    90e0:	683b      	ldr	r3, [r7, #0]
    90e2:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    90e4:	4a1f      	ldr	r2, [pc, #124]	; (9164 <_adc_set_config+0x38c>)
    90e6:	4293      	cmp	r3, r2
    90e8:	da01      	bge.n	90ee <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    90ea:	2317      	movs	r3, #23
    90ec:	e0f7      	b.n	92de <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    90ee:	683b      	ldr	r3, [r7, #0]
    90f0:	69db      	ldr	r3, [r3, #28]
    90f2:	4a1d      	ldr	r2, [pc, #116]	; (9168 <_adc_set_config+0x390>)
    90f4:	4293      	cmp	r3, r2
    90f6:	dc04      	bgt.n	9102 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    90f8:	683b      	ldr	r3, [r7, #0]
    90fa:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    90fc:	4a1a      	ldr	r2, [pc, #104]	; (9168 <_adc_set_config+0x390>)
    90fe:	4293      	cmp	r3, r2
    9100:	dd48      	ble.n	9194 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9102:	2317      	movs	r3, #23
    9104:	e0eb      	b.n	92de <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    9106:	683b      	ldr	r3, [r7, #0]
    9108:	7cdb      	ldrb	r3, [r3, #19]
    910a:	2b00      	cmp	r3, #0
    910c:	d032      	beq.n	9174 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    910e:	683b      	ldr	r3, [r7, #0]
    9110:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    9112:	4a16      	ldr	r2, [pc, #88]	; (916c <_adc_set_config+0x394>)
    9114:	4293      	cmp	r3, r2
    9116:	dc0e      	bgt.n	9136 <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    9118:	683b      	ldr	r3, [r7, #0]
    911a:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    911c:	4a14      	ldr	r2, [pc, #80]	; (9170 <_adc_set_config+0x398>)
    911e:	4293      	cmp	r3, r2
    9120:	db09      	blt.n	9136 <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    9122:	683b      	ldr	r3, [r7, #0]
    9124:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    9126:	4a11      	ldr	r2, [pc, #68]	; (916c <_adc_set_config+0x394>)
    9128:	4293      	cmp	r3, r2
    912a:	dc04      	bgt.n	9136 <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    912c:	683b      	ldr	r3, [r7, #0]
    912e:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    9130:	4a0f      	ldr	r2, [pc, #60]	; (9170 <_adc_set_config+0x398>)
    9132:	4293      	cmp	r3, r2
    9134:	da1e      	bge.n	9174 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9136:	2317      	movs	r3, #23
    9138:	e0d1      	b.n	92de <_adc_set_config+0x506>
    913a:	46c0      	nop			; (mov r8, r8)
    913c:	00008bb1 	.word	0x00008bb1
    9140:	0000c911 	.word	0x0000c911
    9144:	0000c955 	.word	0x0000c955
    9148:	00008d61 	.word	0x00008d61
    914c:	00013c44 	.word	0x00013c44
    9150:	00008c8d 	.word	0x00008c8d
    9154:	000001ff 	.word	0x000001ff
    9158:	fffffe00 	.word	0xfffffe00
    915c:	000003ff 	.word	0x000003ff
    9160:	000007ff 	.word	0x000007ff
    9164:	fffff800 	.word	0xfffff800
    9168:	00000fff 	.word	0x00000fff
    916c:	00007fff 	.word	0x00007fff
    9170:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    9174:	683b      	ldr	r3, [r7, #0]
    9176:	69db      	ldr	r3, [r3, #28]
    9178:	4a5b      	ldr	r2, [pc, #364]	; (92e8 <_adc_set_config+0x510>)
    917a:	4293      	cmp	r3, r2
    917c:	dc04      	bgt.n	9188 <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    917e:	683b      	ldr	r3, [r7, #0]
    9180:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    9182:	4a59      	ldr	r2, [pc, #356]	; (92e8 <_adc_set_config+0x510>)
    9184:	4293      	cmp	r3, r2
    9186:	dd07      	ble.n	9198 <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    9188:	2317      	movs	r3, #23
    918a:	e0a8      	b.n	92de <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    918c:	46c0      	nop			; (mov r8, r8)
    918e:	e004      	b.n	919a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    9190:	46c0      	nop			; (mov r8, r8)
    9192:	e002      	b.n	919a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    9194:	46c0      	nop			; (mov r8, r8)
    9196:	e000      	b.n	919a <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    9198:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	0018      	movs	r0, r3
    91a0:	4b52      	ldr	r3, [pc, #328]	; (92ec <_adc_set_config+0x514>)
    91a2:	4798      	blx	r3
    91a4:	1e03      	subs	r3, r0, #0
    91a6:	d1f9      	bne.n	919c <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    91a8:	683b      	ldr	r3, [r7, #0]
    91aa:	7e1a      	ldrb	r2, [r3, #24]
    91ac:	693b      	ldr	r3, [r7, #16]
    91ae:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    91b0:	46c0      	nop			; (mov r8, r8)
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	0018      	movs	r0, r3
    91b6:	4b4d      	ldr	r3, [pc, #308]	; (92ec <_adc_set_config+0x514>)
    91b8:	4798      	blx	r3
    91ba:	1e03      	subs	r3, r0, #0
    91bc:	d1f9      	bne.n	91b2 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    91be:	683b      	ldr	r3, [r7, #0]
    91c0:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    91c2:	b29a      	uxth	r2, r3
    91c4:	693b      	ldr	r3, [r7, #16]
    91c6:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    91c8:	46c0      	nop			; (mov r8, r8)
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	0018      	movs	r0, r3
    91ce:	4b47      	ldr	r3, [pc, #284]	; (92ec <_adc_set_config+0x514>)
    91d0:	4798      	blx	r3
    91d2:	1e03      	subs	r3, r0, #0
    91d4:	d1f9      	bne.n	91ca <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    91d6:	683b      	ldr	r3, [r7, #0]
    91d8:	6a1b      	ldr	r3, [r3, #32]
    91da:	b29a      	uxth	r2, r3
    91dc:	693b      	ldr	r3, [r7, #16]
    91de:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    91e0:	2314      	movs	r3, #20
    91e2:	18fb      	adds	r3, r7, r3
    91e4:	683a      	ldr	r2, [r7, #0]
    91e6:	212c      	movs	r1, #44	; 0x2c
    91e8:	5c52      	ldrb	r2, [r2, r1]
    91ea:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    91ec:	2314      	movs	r3, #20
    91ee:	18fb      	adds	r3, r7, r3
    91f0:	781b      	ldrb	r3, [r3, #0]
    91f2:	2b00      	cmp	r3, #0
    91f4:	d006      	beq.n	9204 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    91f6:	2314      	movs	r3, #20
    91f8:	18fb      	adds	r3, r7, r3
    91fa:	781a      	ldrb	r2, [r3, #0]
    91fc:	2314      	movs	r3, #20
    91fe:	18fb      	adds	r3, r7, r3
    9200:	3a01      	subs	r2, #1
    9202:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    9204:	2314      	movs	r3, #20
    9206:	18fb      	adds	r3, r7, r3
    9208:	781b      	ldrb	r3, [r3, #0]
    920a:	2b0f      	cmp	r3, #15
    920c:	d804      	bhi.n	9218 <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    920e:	683b      	ldr	r3, [r7, #0]
    9210:	222b      	movs	r2, #43	; 0x2b
    9212:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    9214:	2b0f      	cmp	r3, #15
    9216:	d901      	bls.n	921c <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    9218:	2317      	movs	r3, #23
    921a:	e060      	b.n	92de <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    921c:	46c0      	nop			; (mov r8, r8)
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	0018      	movs	r0, r3
    9222:	4b32      	ldr	r3, [pc, #200]	; (92ec <_adc_set_config+0x514>)
    9224:	4798      	blx	r3
    9226:	1e03      	subs	r3, r0, #0
    9228:	d1f9      	bne.n	921e <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    922a:	683b      	ldr	r3, [r7, #0]
    922c:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    922e:	683a      	ldr	r2, [r7, #0]
    9230:	212b      	movs	r1, #43	; 0x2b
    9232:	5c52      	ldrb	r2, [r2, r1]
    9234:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    9236:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    9238:	2214      	movs	r2, #20
    923a:	18ba      	adds	r2, r7, r2
    923c:	7812      	ldrb	r2, [r2, #0]
    923e:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    9240:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    9242:	683a      	ldr	r2, [r7, #0]
    9244:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    9246:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
    9248:	683a      	ldr	r2, [r7, #0]
    924a:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    924c:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    924e:	693b      	ldr	r3, [r7, #16]
    9250:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    9252:	683b      	ldr	r3, [r7, #0]
    9254:	222a      	movs	r2, #42	; 0x2a
    9256:	5c9a      	ldrb	r2, [r3, r2]
    9258:	693b      	ldr	r3, [r7, #16]
    925a:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    925c:	693b      	ldr	r3, [r7, #16]
    925e:	220f      	movs	r2, #15
    9260:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    9262:	683b      	ldr	r3, [r7, #0]
    9264:	2224      	movs	r2, #36	; 0x24
    9266:	5c9b      	ldrb	r3, [r3, r2]
    9268:	2b00      	cmp	r3, #0
    926a:	d01e      	beq.n	92aa <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    926c:	683b      	ldr	r3, [r7, #0]
    926e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    9270:	4a1f      	ldr	r2, [pc, #124]	; (92f0 <_adc_set_config+0x518>)
    9272:	4293      	cmp	r3, r2
    9274:	d901      	bls.n	927a <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    9276:	2317      	movs	r3, #23
    9278:	e031      	b.n	92de <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    927a:	683b      	ldr	r3, [r7, #0]
    927c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    927e:	693b      	ldr	r3, [r7, #16]
    9280:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    9282:	683b      	ldr	r3, [r7, #0]
    9284:	2228      	movs	r2, #40	; 0x28
    9286:	5e9b      	ldrsh	r3, [r3, r2]
    9288:	4a1a      	ldr	r2, [pc, #104]	; (92f4 <_adc_set_config+0x51c>)
    928a:	4293      	cmp	r3, r2
    928c:	dc05      	bgt.n	929a <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    928e:	683b      	ldr	r3, [r7, #0]
    9290:	2228      	movs	r2, #40	; 0x28
    9292:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    9294:	4a18      	ldr	r2, [pc, #96]	; (92f8 <_adc_set_config+0x520>)
    9296:	4293      	cmp	r3, r2
    9298:	da01      	bge.n	929e <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    929a:	2317      	movs	r3, #23
    929c:	e01f      	b.n	92de <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    929e:	683b      	ldr	r3, [r7, #0]
    92a0:	2228      	movs	r2, #40	; 0x28
    92a2:	5e9b      	ldrsh	r3, [r3, r2]
    92a4:	b29a      	uxth	r2, r3
    92a6:	693b      	ldr	r3, [r7, #16]
    92a8:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    92aa:	4b14      	ldr	r3, [pc, #80]	; (92fc <_adc_set_config+0x524>)
    92ac:	681b      	ldr	r3, [r3, #0]
    92ae:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    92b0:	b29b      	uxth	r3, r3
    92b2:	021b      	lsls	r3, r3, #8
    92b4:	b29a      	uxth	r2, r3
    92b6:	23e0      	movs	r3, #224	; 0xe0
    92b8:	00db      	lsls	r3, r3, #3
    92ba:	4013      	ands	r3, r2
    92bc:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    92be:	4b10      	ldr	r3, [pc, #64]	; (9300 <_adc_set_config+0x528>)
    92c0:	685c      	ldr	r4, [r3, #4]
    92c2:	681b      	ldr	r3, [r3, #0]
    92c4:	0161      	lsls	r1, r4, #5
    92c6:	0edd      	lsrs	r5, r3, #27
    92c8:	430d      	orrs	r5, r1
    92ca:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    92cc:	b2ab      	uxth	r3, r5
    92ce:	21ff      	movs	r1, #255	; 0xff
    92d0:	400b      	ands	r3, r1
    92d2:	b29b      	uxth	r3, r3
    92d4:	4313      	orrs	r3, r2
    92d6:	b29a      	uxth	r2, r3
    92d8:	693b      	ldr	r3, [r7, #16]
    92da:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    92dc:	2300      	movs	r3, #0
}
    92de:	0018      	movs	r0, r3
    92e0:	46bd      	mov	sp, r7
    92e2:	b009      	add	sp, #36	; 0x24
    92e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e6:	46c0      	nop			; (mov r8, r8)
    92e8:	0000ffff 	.word	0x0000ffff
    92ec:	00008c8d 	.word	0x00008c8d
    92f0:	00000fff 	.word	0x00000fff
    92f4:	000007ff 	.word	0x000007ff
    92f8:	fffff800 	.word	0xfffff800
    92fc:	00806024 	.word	0x00806024
    9300:	00806020 	.word	0x00806020

00009304 <adc_regular_ain_channel>:
 *
 * \param[in]  pin_array   The array of the Mux selection for the positive ADC input
 * \param[in]  size        The size of pin_array
 */
void adc_regular_ain_channel(uint32_t *pin_array, uint8_t size)
{
    9304:	b580      	push	{r7, lr}
    9306:	b084      	sub	sp, #16
    9308:	af00      	add	r7, sp, #0
    930a:	6078      	str	r0, [r7, #4]
    930c:	000a      	movs	r2, r1
    930e:	1cfb      	adds	r3, r7, #3
    9310:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++) {
    9312:	2300      	movs	r3, #0
    9314:	60fb      	str	r3, [r7, #12]
    9316:	e00a      	b.n	932e <adc_regular_ain_channel+0x2a>
		_adc_configure_ain_pin(pin_array[i]);
    9318:	68fb      	ldr	r3, [r7, #12]
    931a:	009b      	lsls	r3, r3, #2
    931c:	687a      	ldr	r2, [r7, #4]
    931e:	18d3      	adds	r3, r2, r3
    9320:	681b      	ldr	r3, [r3, #0]
    9322:	0018      	movs	r0, r3
    9324:	4b06      	ldr	r3, [pc, #24]	; (9340 <adc_regular_ain_channel+0x3c>)
    9326:	4798      	blx	r3
 * \param[in]  pin_array   The array of the Mux selection for the positive ADC input
 * \param[in]  size        The size of pin_array
 */
void adc_regular_ain_channel(uint32_t *pin_array, uint8_t size)
{
	for (int i = 0; i < size; i++) {
    9328:	68fb      	ldr	r3, [r7, #12]
    932a:	3301      	adds	r3, #1
    932c:	60fb      	str	r3, [r7, #12]
    932e:	1cfb      	adds	r3, r7, #3
    9330:	781a      	ldrb	r2, [r3, #0]
    9332:	68fb      	ldr	r3, [r7, #12]
    9334:	429a      	cmp	r2, r3
    9336:	dcef      	bgt.n	9318 <adc_regular_ain_channel+0x14>
		_adc_configure_ain_pin(pin_array[i]);
  	}
}	
    9338:	46c0      	nop			; (mov r8, r8)
    933a:	46bd      	mov	sp, r7
    933c:	b004      	add	sp, #16
    933e:	bd80      	pop	{r7, pc}
    9340:	00008d61 	.word	0x00008d61

00009344 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    9344:	b580      	push	{r7, lr}
    9346:	b086      	sub	sp, #24
    9348:	af00      	add	r7, sp, #0
    934a:	60f8      	str	r0, [r7, #12]
    934c:	60b9      	str	r1, [r7, #8]
    934e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    9350:	68fb      	ldr	r3, [r7, #12]
    9352:	68ba      	ldr	r2, [r7, #8]
    9354:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    9356:	2380      	movs	r3, #128	; 0x80
    9358:	025b      	lsls	r3, r3, #9
    935a:	0019      	movs	r1, r3
    935c:	2002      	movs	r0, #2
    935e:	4b32      	ldr	r3, [pc, #200]	; (9428 <adc_init+0xe4>)
    9360:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    9362:	68bb      	ldr	r3, [r7, #8]
    9364:	781b      	ldrb	r3, [r3, #0]
    9366:	b2db      	uxtb	r3, r3
    9368:	001a      	movs	r2, r3
    936a:	2301      	movs	r3, #1
    936c:	4013      	ands	r3, r2
    936e:	d001      	beq.n	9374 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    9370:	2305      	movs	r3, #5
    9372:	e055      	b.n	9420 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    9374:	68bb      	ldr	r3, [r7, #8]
    9376:	781b      	ldrb	r3, [r3, #0]
    9378:	b2db      	uxtb	r3, r3
    937a:	001a      	movs	r2, r3
    937c:	2302      	movs	r3, #2
    937e:	4013      	ands	r3, r2
    9380:	d001      	beq.n	9386 <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    9382:	231c      	movs	r3, #28
    9384:	e04c      	b.n	9420 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    9386:	687b      	ldr	r3, [r7, #4]
    9388:	785a      	ldrb	r2, [r3, #1]
    938a:	68fb      	ldr	r3, [r7, #12]
    938c:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    938e:	68fb      	ldr	r3, [r7, #12]
    9390:	791b      	ldrb	r3, [r3, #4]
    9392:	2b00      	cmp	r3, #0
    9394:	d102      	bne.n	939c <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    9396:	2001      	movs	r0, #1
    9398:	4b24      	ldr	r3, [pc, #144]	; (942c <adc_init+0xe8>)
    939a:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    939c:	2317      	movs	r3, #23
    939e:	18fb      	adds	r3, r7, r3
    93a0:	2200      	movs	r2, #0
    93a2:	701a      	strb	r2, [r3, #0]
    93a4:	e00e      	b.n	93c4 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    93a6:	2317      	movs	r3, #23
    93a8:	18fb      	adds	r3, r7, r3
    93aa:	781a      	ldrb	r2, [r3, #0]
    93ac:	68fb      	ldr	r3, [r7, #12]
    93ae:	3202      	adds	r2, #2
    93b0:	0092      	lsls	r2, r2, #2
    93b2:	2100      	movs	r1, #0
    93b4:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    93b6:	2317      	movs	r3, #23
    93b8:	18fb      	adds	r3, r7, r3
    93ba:	781a      	ldrb	r2, [r3, #0]
    93bc:	2317      	movs	r3, #23
    93be:	18fb      	adds	r3, r7, r3
    93c0:	3201      	adds	r2, #1
    93c2:	701a      	strb	r2, [r3, #0]
    93c4:	2317      	movs	r3, #23
    93c6:	18fb      	adds	r3, r7, r3
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	2b02      	cmp	r3, #2
    93cc:	d9eb      	bls.n	93a6 <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    93ce:	68fb      	ldr	r3, [r7, #12]
    93d0:	2200      	movs	r2, #0
    93d2:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    93d4:	68fb      	ldr	r3, [r7, #12]
    93d6:	2200      	movs	r2, #0
    93d8:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    93da:	68fb      	ldr	r3, [r7, #12]
    93dc:	2200      	movs	r2, #0
    93de:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    93e0:	68fb      	ldr	r3, [r7, #12]
    93e2:	2200      	movs	r2, #0
    93e4:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    93e6:	4b12      	ldr	r3, [pc, #72]	; (9430 <adc_init+0xec>)
    93e8:	68fa      	ldr	r2, [r7, #12]
    93ea:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	222a      	movs	r2, #42	; 0x2a
    93f0:	5c9b      	ldrb	r3, [r3, r2]
    93f2:	2b00      	cmp	r3, #0
    93f4:	d10a      	bne.n	940c <adc_init+0xc8>
			!config->freerunning) {
    93f6:	687b      	ldr	r3, [r7, #4]
    93f8:	7d1b      	ldrb	r3, [r3, #20]
    93fa:	2201      	movs	r2, #1
    93fc:	4053      	eors	r3, r2
    93fe:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    9400:	2b00      	cmp	r3, #0
    9402:	d003      	beq.n	940c <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    9404:	68fb      	ldr	r3, [r7, #12]
    9406:	2201      	movs	r2, #1
    9408:	775a      	strb	r2, [r3, #29]
    940a:	e002      	b.n	9412 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    940c:	68fb      	ldr	r3, [r7, #12]
    940e:	2200      	movs	r2, #0
    9410:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    9412:	687a      	ldr	r2, [r7, #4]
    9414:	68fb      	ldr	r3, [r7, #12]
    9416:	0011      	movs	r1, r2
    9418:	0018      	movs	r0, r3
    941a:	4b06      	ldr	r3, [pc, #24]	; (9434 <adc_init+0xf0>)
    941c:	4798      	blx	r3
    941e:	0003      	movs	r3, r0
}
    9420:	0018      	movs	r0, r3
    9422:	46bd      	mov	sp, r7
    9424:	b006      	add	sp, #24
    9426:	bd80      	pop	{r7, pc}
    9428:	00008bc9 	.word	0x00008bc9
    942c:	00008c4d 	.word	0x00008c4d
    9430:	20004744 	.word	0x20004744
    9434:	00008dd9 	.word	0x00008dd9

00009438 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    9438:	b580      	push	{r7, lr}
    943a:	b084      	sub	sp, #16
    943c:	af00      	add	r7, sp, #0
    943e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    9446:	68fb      	ldr	r3, [r7, #12]
    9448:	7e5b      	ldrb	r3, [r3, #25]
    944a:	b2db      	uxtb	r3, r3
    944c:	b25b      	sxtb	r3, r3
    944e:	2b00      	cmp	r3, #0
    9450:	da01      	bge.n	9456 <adc_is_syncing+0x1e>
		return true;
    9452:	2301      	movs	r3, #1
    9454:	e000      	b.n	9458 <adc_is_syncing+0x20>
	}

	return false;
    9456:	2300      	movs	r3, #0
}
    9458:	0018      	movs	r0, r3
    945a:	46bd      	mov	sp, r7
    945c:	b004      	add	sp, #16
    945e:	bd80      	pop	{r7, pc}

00009460 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    9460:	b580      	push	{r7, lr}
    9462:	b084      	sub	sp, #16
    9464:	af00      	add	r7, sp, #0
    9466:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9468:	687b      	ldr	r3, [r7, #4]
    946a:	681b      	ldr	r3, [r3, #0]
    946c:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    946e:	46c0      	nop			; (mov r8, r8)
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	0018      	movs	r0, r3
    9474:	4b0b      	ldr	r3, [pc, #44]	; (94a4 <adc_start_conversion+0x44>)
    9476:	4798      	blx	r3
    9478:	1e03      	subs	r3, r0, #0
    947a:	d1f9      	bne.n	9470 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    947c:	68fb      	ldr	r3, [r7, #12]
    947e:	7b1b      	ldrb	r3, [r3, #12]
    9480:	b2db      	uxtb	r3, r3
    9482:	2202      	movs	r2, #2
    9484:	4313      	orrs	r3, r2
    9486:	b2da      	uxtb	r2, r3
    9488:	68fb      	ldr	r3, [r7, #12]
    948a:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    948c:	46c0      	nop			; (mov r8, r8)
    948e:	687b      	ldr	r3, [r7, #4]
    9490:	0018      	movs	r0, r3
    9492:	4b04      	ldr	r3, [pc, #16]	; (94a4 <adc_start_conversion+0x44>)
    9494:	4798      	blx	r3
    9496:	1e03      	subs	r3, r0, #0
    9498:	d1f9      	bne.n	948e <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    949a:	46c0      	nop			; (mov r8, r8)
    949c:	46bd      	mov	sp, r7
    949e:	b004      	add	sp, #16
    94a0:	bd80      	pop	{r7, pc}
    94a2:	46c0      	nop			; (mov r8, r8)
    94a4:	00009439 	.word	0x00009439

000094a8 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    94a8:	b580      	push	{r7, lr}
    94aa:	b084      	sub	sp, #16
    94ac:	af00      	add	r7, sp, #0
    94ae:	6078      	str	r0, [r7, #4]
    94b0:	000a      	movs	r2, r1
    94b2:	1cfb      	adds	r3, r7, #3
    94b4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    94b6:	687b      	ldr	r3, [r7, #4]
    94b8:	681b      	ldr	r3, [r3, #0]
    94ba:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	1cfa      	adds	r2, r7, #3
    94c0:	7812      	ldrb	r2, [r2, #0]
    94c2:	759a      	strb	r2, [r3, #22]
}
    94c4:	46c0      	nop			; (mov r8, r8)
    94c6:	46bd      	mov	sp, r7
    94c8:	b004      	add	sp, #16
    94ca:	bd80      	pop	{r7, pc}

000094cc <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    94cc:	b580      	push	{r7, lr}
    94ce:	b084      	sub	sp, #16
    94d0:	af00      	add	r7, sp, #0
    94d2:	0002      	movs	r2, r0
    94d4:	1dfb      	adds	r3, r7, #7
    94d6:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    94d8:	1dfb      	adds	r3, r7, #7
    94da:	781a      	ldrb	r2, [r3, #0]
    94dc:	4b44      	ldr	r3, [pc, #272]	; (95f0 <_adc_interrupt_handler+0x124>)
    94de:	0092      	lsls	r2, r2, #2
    94e0:	58d3      	ldr	r3, [r2, r3]
    94e2:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    94e4:	68fb      	ldr	r3, [r7, #12]
    94e6:	681b      	ldr	r3, [r3, #0]
    94e8:	7e1b      	ldrb	r3, [r3, #24]
    94ea:	b2db      	uxtb	r3, r3
    94ec:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    94ee:	68bb      	ldr	r3, [r7, #8]
    94f0:	2201      	movs	r2, #1
    94f2:	4013      	ands	r3, r2
    94f4:	d045      	beq.n	9582 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    94f6:	68fb      	ldr	r3, [r7, #12]
    94f8:	7edb      	ldrb	r3, [r3, #27]
    94fa:	001a      	movs	r2, r3
    94fc:	2301      	movs	r3, #1
    94fe:	4013      	ands	r3, r2
    9500:	d03f      	beq.n	9582 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    9502:	68fb      	ldr	r3, [r7, #12]
    9504:	7e9b      	ldrb	r3, [r3, #26]
    9506:	001a      	movs	r2, r3
    9508:	2301      	movs	r3, #1
    950a:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    950c:	d039      	beq.n	9582 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	681b      	ldr	r3, [r3, #0]
    9512:	2201      	movs	r2, #1
    9514:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    9516:	46c0      	nop			; (mov r8, r8)
    9518:	68fb      	ldr	r3, [r7, #12]
    951a:	0018      	movs	r0, r3
    951c:	4b35      	ldr	r3, [pc, #212]	; (95f4 <_adc_interrupt_handler+0x128>)
    951e:	4798      	blx	r3
    9520:	1e03      	subs	r3, r0, #0
    9522:	d1f9      	bne.n	9518 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    9524:	68fb      	ldr	r3, [r7, #12]
    9526:	695b      	ldr	r3, [r3, #20]
    9528:	1c99      	adds	r1, r3, #2
    952a:	68fa      	ldr	r2, [r7, #12]
    952c:	6151      	str	r1, [r2, #20]
    952e:	68fa      	ldr	r2, [r7, #12]
    9530:	6812      	ldr	r2, [r2, #0]
    9532:	8b52      	ldrh	r2, [r2, #26]
    9534:	b292      	uxth	r2, r2
    9536:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    9538:	68fb      	ldr	r3, [r7, #12]
    953a:	8b1b      	ldrh	r3, [r3, #24]
    953c:	b29b      	uxth	r3, r3
    953e:	3b01      	subs	r3, #1
    9540:	b29b      	uxth	r3, r3
    9542:	68fa      	ldr	r2, [r7, #12]
    9544:	1c19      	adds	r1, r3, #0
    9546:	8311      	strh	r1, [r2, #24]
    9548:	2b00      	cmp	r3, #0
    954a:	d008      	beq.n	955e <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    954c:	68fb      	ldr	r3, [r7, #12]
    954e:	7f5b      	ldrb	r3, [r3, #29]
    9550:	2b00      	cmp	r3, #0
    9552:	d016      	beq.n	9582 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    9554:	68fb      	ldr	r3, [r7, #12]
    9556:	0018      	movs	r0, r3
    9558:	4b27      	ldr	r3, [pc, #156]	; (95f8 <_adc_interrupt_handler+0x12c>)
    955a:	4798      	blx	r3
    955c:	e011      	b.n	9582 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    955e:	68fb      	ldr	r3, [r7, #12]
    9560:	7f1b      	ldrb	r3, [r3, #28]
    9562:	b2db      	uxtb	r3, r3
    9564:	2b05      	cmp	r3, #5
    9566:	d10c      	bne.n	9582 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    9568:	68fb      	ldr	r3, [r7, #12]
    956a:	2200      	movs	r2, #0
    956c:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    956e:	68fb      	ldr	r3, [r7, #12]
    9570:	2101      	movs	r1, #1
    9572:	0018      	movs	r0, r3
    9574:	4b21      	ldr	r3, [pc, #132]	; (95fc <_adc_interrupt_handler+0x130>)
    9576:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    9578:	68fb      	ldr	r3, [r7, #12]
    957a:	689b      	ldr	r3, [r3, #8]
    957c:	68fa      	ldr	r2, [r7, #12]
    957e:	0010      	movs	r0, r2
    9580:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    9582:	68bb      	ldr	r3, [r7, #8]
    9584:	2204      	movs	r2, #4
    9586:	4013      	ands	r3, r2
    9588:	d014      	beq.n	95b4 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    958a:	68fb      	ldr	r3, [r7, #12]
    958c:	681b      	ldr	r3, [r3, #0]
    958e:	2204      	movs	r2, #4
    9590:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    9592:	68fb      	ldr	r3, [r7, #12]
    9594:	7edb      	ldrb	r3, [r3, #27]
    9596:	001a      	movs	r2, r3
    9598:	2302      	movs	r3, #2
    959a:	4013      	ands	r3, r2
    959c:	d00a      	beq.n	95b4 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    959e:	68fb      	ldr	r3, [r7, #12]
    95a0:	7e9b      	ldrb	r3, [r3, #26]
    95a2:	001a      	movs	r2, r3
    95a4:	2302      	movs	r3, #2
    95a6:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    95a8:	d004      	beq.n	95b4 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    95aa:	68fb      	ldr	r3, [r7, #12]
    95ac:	68db      	ldr	r3, [r3, #12]
    95ae:	68fa      	ldr	r2, [r7, #12]
    95b0:	0010      	movs	r0, r2
    95b2:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    95b4:	68bb      	ldr	r3, [r7, #8]
    95b6:	2202      	movs	r2, #2
    95b8:	4013      	ands	r3, r2
    95ba:	d014      	beq.n	95e6 <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    95bc:	68fb      	ldr	r3, [r7, #12]
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	2202      	movs	r2, #2
    95c2:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    95c4:	68fb      	ldr	r3, [r7, #12]
    95c6:	7edb      	ldrb	r3, [r3, #27]
    95c8:	001a      	movs	r2, r3
    95ca:	2304      	movs	r3, #4
    95cc:	4013      	ands	r3, r2
    95ce:	d00a      	beq.n	95e6 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    95d0:	68fb      	ldr	r3, [r7, #12]
    95d2:	7e9b      	ldrb	r3, [r3, #26]
    95d4:	001a      	movs	r2, r3
    95d6:	2304      	movs	r3, #4
    95d8:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    95da:	d004      	beq.n	95e6 <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    95dc:	68fb      	ldr	r3, [r7, #12]
    95de:	691b      	ldr	r3, [r3, #16]
    95e0:	68fa      	ldr	r2, [r7, #12]
    95e2:	0010      	movs	r0, r2
    95e4:	4798      	blx	r3
		}
	}
}
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	46bd      	mov	sp, r7
    95ea:	b004      	add	sp, #16
    95ec:	bd80      	pop	{r7, pc}
    95ee:	46c0      	nop			; (mov r8, r8)
    95f0:	20004744 	.word	0x20004744
    95f4:	00009439 	.word	0x00009439
    95f8:	00009461 	.word	0x00009461
    95fc:	000094a9 	.word	0x000094a9

00009600 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    9600:	b580      	push	{r7, lr}
    9602:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    9604:	2000      	movs	r0, #0
    9606:	4b02      	ldr	r3, [pc, #8]	; (9610 <ADC_Handler+0x10>)
    9608:	4798      	blx	r3
}
    960a:	46c0      	nop			; (mov r8, r8)
    960c:	46bd      	mov	sp, r7
    960e:	bd80      	pop	{r7, pc}
    9610:	000094cd 	.word	0x000094cd

00009614 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    9614:	b580      	push	{r7, lr}
    9616:	b084      	sub	sp, #16
    9618:	af00      	add	r7, sp, #0
    961a:	0002      	movs	r2, r0
    961c:	1dfb      	adds	r3, r7, #7
    961e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9620:	230f      	movs	r3, #15
    9622:	18fb      	adds	r3, r7, r3
    9624:	1dfa      	adds	r2, r7, #7
    9626:	7812      	ldrb	r2, [r2, #0]
    9628:	0952      	lsrs	r2, r2, #5
    962a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    962c:	230f      	movs	r3, #15
    962e:	18fb      	adds	r3, r7, r3
    9630:	781b      	ldrb	r3, [r3, #0]
    9632:	2b00      	cmp	r3, #0
    9634:	d10c      	bne.n	9650 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9636:	4b09      	ldr	r3, [pc, #36]	; (965c <_extint_get_eic_from_channel+0x48>)
    9638:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    963a:	230f      	movs	r3, #15
    963c:	18fb      	adds	r3, r7, r3
    963e:	781b      	ldrb	r3, [r3, #0]
    9640:	009b      	lsls	r3, r3, #2
    9642:	2210      	movs	r2, #16
    9644:	4694      	mov	ip, r2
    9646:	44bc      	add	ip, r7
    9648:	4463      	add	r3, ip
    964a:	3b08      	subs	r3, #8
    964c:	681b      	ldr	r3, [r3, #0]
    964e:	e000      	b.n	9652 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    9650:	2300      	movs	r3, #0
	}
}
    9652:	0018      	movs	r0, r3
    9654:	46bd      	mov	sp, r7
    9656:	b004      	add	sp, #16
    9658:	bd80      	pop	{r7, pc}
    965a:	46c0      	nop			; (mov r8, r8)
    965c:	40001800 	.word	0x40001800

00009660 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    9660:	b580      	push	{r7, lr}
    9662:	b084      	sub	sp, #16
    9664:	af00      	add	r7, sp, #0
    9666:	0002      	movs	r2, r0
    9668:	1dfb      	adds	r3, r7, #7
    966a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    966c:	1dfb      	adds	r3, r7, #7
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	0018      	movs	r0, r3
    9672:	4b0b      	ldr	r3, [pc, #44]	; (96a0 <extint_chan_is_detected+0x40>)
    9674:	4798      	blx	r3
    9676:	0003      	movs	r3, r0
    9678:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    967a:	1dfb      	adds	r3, r7, #7
    967c:	781b      	ldrb	r3, [r3, #0]
    967e:	221f      	movs	r2, #31
    9680:	4013      	ands	r3, r2
    9682:	2201      	movs	r2, #1
    9684:	409a      	lsls	r2, r3
    9686:	0013      	movs	r3, r2
    9688:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    968a:	68fb      	ldr	r3, [r7, #12]
    968c:	691b      	ldr	r3, [r3, #16]
    968e:	68ba      	ldr	r2, [r7, #8]
    9690:	4013      	ands	r3, r2
    9692:	1e5a      	subs	r2, r3, #1
    9694:	4193      	sbcs	r3, r2
    9696:	b2db      	uxtb	r3, r3
}
    9698:	0018      	movs	r0, r3
    969a:	46bd      	mov	sp, r7
    969c:	b004      	add	sp, #16
    969e:	bd80      	pop	{r7, pc}
    96a0:	00009615 	.word	0x00009615

000096a4 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    96a4:	b580      	push	{r7, lr}
    96a6:	b084      	sub	sp, #16
    96a8:	af00      	add	r7, sp, #0
    96aa:	0002      	movs	r2, r0
    96ac:	1dfb      	adds	r3, r7, #7
    96ae:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    96b0:	1dfb      	adds	r3, r7, #7
    96b2:	781b      	ldrb	r3, [r3, #0]
    96b4:	0018      	movs	r0, r3
    96b6:	4b09      	ldr	r3, [pc, #36]	; (96dc <extint_chan_clear_detected+0x38>)
    96b8:	4798      	blx	r3
    96ba:	0003      	movs	r3, r0
    96bc:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    96be:	1dfb      	adds	r3, r7, #7
    96c0:	781b      	ldrb	r3, [r3, #0]
    96c2:	221f      	movs	r2, #31
    96c4:	4013      	ands	r3, r2
    96c6:	2201      	movs	r2, #1
    96c8:	409a      	lsls	r2, r3
    96ca:	0013      	movs	r3, r2
    96cc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    96ce:	68fb      	ldr	r3, [r7, #12]
    96d0:	68ba      	ldr	r2, [r7, #8]
    96d2:	611a      	str	r2, [r3, #16]
}
    96d4:	46c0      	nop			; (mov r8, r8)
    96d6:	46bd      	mov	sp, r7
    96d8:	b004      	add	sp, #16
    96da:	bd80      	pop	{r7, pc}
    96dc:	00009615 	.word	0x00009615

000096e0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b082      	sub	sp, #8
    96e4:	af00      	add	r7, sp, #0
    96e6:	6078      	str	r0, [r7, #4]
    96e8:	0008      	movs	r0, r1
    96ea:	0011      	movs	r1, r2
    96ec:	1cfb      	adds	r3, r7, #3
    96ee:	1c02      	adds	r2, r0, #0
    96f0:	701a      	strb	r2, [r3, #0]
    96f2:	1cbb      	adds	r3, r7, #2
    96f4:	1c0a      	adds	r2, r1, #0
    96f6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    96f8:	1cbb      	adds	r3, r7, #2
    96fa:	781b      	ldrb	r3, [r3, #0]
    96fc:	2b00      	cmp	r3, #0
    96fe:	d001      	beq.n	9704 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9700:	2317      	movs	r3, #23
    9702:	e019      	b.n	9738 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    9704:	1cfb      	adds	r3, r7, #3
    9706:	781a      	ldrb	r2, [r3, #0]
    9708:	4b0d      	ldr	r3, [pc, #52]	; (9740 <extint_register_callback+0x60>)
    970a:	0092      	lsls	r2, r2, #2
    970c:	58d3      	ldr	r3, [r2, r3]
    970e:	2b00      	cmp	r3, #0
    9710:	d107      	bne.n	9722 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    9712:	1cfb      	adds	r3, r7, #3
    9714:	781a      	ldrb	r2, [r3, #0]
    9716:	4b0a      	ldr	r3, [pc, #40]	; (9740 <extint_register_callback+0x60>)
    9718:	0092      	lsls	r2, r2, #2
    971a:	6879      	ldr	r1, [r7, #4]
    971c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    971e:	2300      	movs	r3, #0
    9720:	e00a      	b.n	9738 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    9722:	1cfb      	adds	r3, r7, #3
    9724:	781a      	ldrb	r2, [r3, #0]
    9726:	4b06      	ldr	r3, [pc, #24]	; (9740 <extint_register_callback+0x60>)
    9728:	0092      	lsls	r2, r2, #2
    972a:	58d2      	ldr	r2, [r2, r3]
    972c:	687b      	ldr	r3, [r7, #4]
    972e:	429a      	cmp	r2, r3
    9730:	d101      	bne.n	9736 <extint_register_callback+0x56>
		return STATUS_OK;
    9732:	2300      	movs	r3, #0
    9734:	e000      	b.n	9738 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    9736:	231d      	movs	r3, #29
}
    9738:	0018      	movs	r0, r3
    973a:	46bd      	mov	sp, r7
    973c:	b002      	add	sp, #8
    973e:	bd80      	pop	{r7, pc}
    9740:	2000474c 	.word	0x2000474c

00009744 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    9744:	b580      	push	{r7, lr}
    9746:	b084      	sub	sp, #16
    9748:	af00      	add	r7, sp, #0
    974a:	0002      	movs	r2, r0
    974c:	1dfb      	adds	r3, r7, #7
    974e:	701a      	strb	r2, [r3, #0]
    9750:	1dbb      	adds	r3, r7, #6
    9752:	1c0a      	adds	r2, r1, #0
    9754:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    9756:	1dbb      	adds	r3, r7, #6
    9758:	781b      	ldrb	r3, [r3, #0]
    975a:	2b00      	cmp	r3, #0
    975c:	d10e      	bne.n	977c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    975e:	1dfb      	adds	r3, r7, #7
    9760:	781b      	ldrb	r3, [r3, #0]
    9762:	0018      	movs	r0, r3
    9764:	4b08      	ldr	r3, [pc, #32]	; (9788 <extint_chan_enable_callback+0x44>)
    9766:	4798      	blx	r3
    9768:	0003      	movs	r3, r0
    976a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    976c:	1dfb      	adds	r3, r7, #7
    976e:	781b      	ldrb	r3, [r3, #0]
    9770:	2201      	movs	r2, #1
    9772:	409a      	lsls	r2, r3
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    9778:	2300      	movs	r3, #0
    977a:	e000      	b.n	977e <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    977c:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    977e:	0018      	movs	r0, r3
    9780:	46bd      	mov	sp, r7
    9782:	b004      	add	sp, #16
    9784:	bd80      	pop	{r7, pc}
    9786:	46c0      	nop			; (mov r8, r8)
    9788:	00009615 	.word	0x00009615

0000978c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    978c:	b580      	push	{r7, lr}
    978e:	b084      	sub	sp, #16
    9790:	af00      	add	r7, sp, #0
    9792:	0002      	movs	r2, r0
    9794:	1dfb      	adds	r3, r7, #7
    9796:	701a      	strb	r2, [r3, #0]
    9798:	1dbb      	adds	r3, r7, #6
    979a:	1c0a      	adds	r2, r1, #0
    979c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    979e:	1dbb      	adds	r3, r7, #6
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	2b00      	cmp	r3, #0
    97a4:	d10e      	bne.n	97c4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    97a6:	1dfb      	adds	r3, r7, #7
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	0018      	movs	r0, r3
    97ac:	4b08      	ldr	r3, [pc, #32]	; (97d0 <extint_chan_disable_callback+0x44>)
    97ae:	4798      	blx	r3
    97b0:	0003      	movs	r3, r0
    97b2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    97b4:	1dfb      	adds	r3, r7, #7
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	2201      	movs	r2, #1
    97ba:	409a      	lsls	r2, r3
    97bc:	68fb      	ldr	r3, [r7, #12]
    97be:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    97c0:	2300      	movs	r3, #0
    97c2:	e000      	b.n	97c6 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    97c4:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    97c6:	0018      	movs	r0, r3
    97c8:	46bd      	mov	sp, r7
    97ca:	b004      	add	sp, #16
    97cc:	bd80      	pop	{r7, pc}
    97ce:	46c0      	nop			; (mov r8, r8)
    97d0:	00009615 	.word	0x00009615

000097d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    97d4:	b580      	push	{r7, lr}
    97d6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    97d8:	4b15      	ldr	r3, [pc, #84]	; (9830 <EIC_Handler+0x5c>)
    97da:	2200      	movs	r2, #0
    97dc:	701a      	strb	r2, [r3, #0]
    97de:	e020      	b.n	9822 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    97e0:	4b13      	ldr	r3, [pc, #76]	; (9830 <EIC_Handler+0x5c>)
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	0018      	movs	r0, r3
    97e6:	4b13      	ldr	r3, [pc, #76]	; (9834 <EIC_Handler+0x60>)
    97e8:	4798      	blx	r3
    97ea:	1e03      	subs	r3, r0, #0
    97ec:	d013      	beq.n	9816 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    97ee:	4b10      	ldr	r3, [pc, #64]	; (9830 <EIC_Handler+0x5c>)
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	0018      	movs	r0, r3
    97f4:	4b10      	ldr	r3, [pc, #64]	; (9838 <EIC_Handler+0x64>)
    97f6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    97f8:	4b0d      	ldr	r3, [pc, #52]	; (9830 <EIC_Handler+0x5c>)
    97fa:	781b      	ldrb	r3, [r3, #0]
    97fc:	001a      	movs	r2, r3
    97fe:	4b0f      	ldr	r3, [pc, #60]	; (983c <EIC_Handler+0x68>)
    9800:	0092      	lsls	r2, r2, #2
    9802:	58d3      	ldr	r3, [r2, r3]
    9804:	2b00      	cmp	r3, #0
    9806:	d006      	beq.n	9816 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    9808:	4b09      	ldr	r3, [pc, #36]	; (9830 <EIC_Handler+0x5c>)
    980a:	781b      	ldrb	r3, [r3, #0]
    980c:	001a      	movs	r2, r3
    980e:	4b0b      	ldr	r3, [pc, #44]	; (983c <EIC_Handler+0x68>)
    9810:	0092      	lsls	r2, r2, #2
    9812:	58d3      	ldr	r3, [r2, r3]
    9814:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9816:	4b06      	ldr	r3, [pc, #24]	; (9830 <EIC_Handler+0x5c>)
    9818:	781b      	ldrb	r3, [r3, #0]
    981a:	3301      	adds	r3, #1
    981c:	b2da      	uxtb	r2, r3
    981e:	4b04      	ldr	r3, [pc, #16]	; (9830 <EIC_Handler+0x5c>)
    9820:	701a      	strb	r2, [r3, #0]
    9822:	4b03      	ldr	r3, [pc, #12]	; (9830 <EIC_Handler+0x5c>)
    9824:	781b      	ldrb	r3, [r3, #0]
    9826:	2b0f      	cmp	r3, #15
    9828:	d9da      	bls.n	97e0 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    982a:	46c0      	nop			; (mov r8, r8)
    982c:	46bd      	mov	sp, r7
    982e:	bd80      	pop	{r7, pc}
    9830:	20004748 	.word	0x20004748
    9834:	00009661 	.word	0x00009661
    9838:	000096a5 	.word	0x000096a5
    983c:	2000474c 	.word	0x2000474c

00009840 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9840:	b580      	push	{r7, lr}
    9842:	b082      	sub	sp, #8
    9844:	af00      	add	r7, sp, #0
    9846:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	2200      	movs	r2, #0
    984c:	701a      	strb	r2, [r3, #0]
}
    984e:	46c0      	nop			; (mov r8, r8)
    9850:	46bd      	mov	sp, r7
    9852:	b002      	add	sp, #8
    9854:	bd80      	pop	{r7, pc}
    9856:	46c0      	nop			; (mov r8, r8)

00009858 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    9858:	b580      	push	{r7, lr}
    985a:	b082      	sub	sp, #8
    985c:	af00      	add	r7, sp, #0
    985e:	0002      	movs	r2, r0
    9860:	6039      	str	r1, [r7, #0]
    9862:	1dfb      	adds	r3, r7, #7
    9864:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9866:	1dfb      	adds	r3, r7, #7
    9868:	781b      	ldrb	r3, [r3, #0]
    986a:	2b01      	cmp	r3, #1
    986c:	d00a      	beq.n	9884 <system_apb_clock_set_mask+0x2c>
    986e:	2b02      	cmp	r3, #2
    9870:	d00f      	beq.n	9892 <system_apb_clock_set_mask+0x3a>
    9872:	2b00      	cmp	r3, #0
    9874:	d114      	bne.n	98a0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    9876:	4b0e      	ldr	r3, [pc, #56]	; (98b0 <system_apb_clock_set_mask+0x58>)
    9878:	4a0d      	ldr	r2, [pc, #52]	; (98b0 <system_apb_clock_set_mask+0x58>)
    987a:	6991      	ldr	r1, [r2, #24]
    987c:	683a      	ldr	r2, [r7, #0]
    987e:	430a      	orrs	r2, r1
    9880:	619a      	str	r2, [r3, #24]
			break;
    9882:	e00f      	b.n	98a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    9884:	4b0a      	ldr	r3, [pc, #40]	; (98b0 <system_apb_clock_set_mask+0x58>)
    9886:	4a0a      	ldr	r2, [pc, #40]	; (98b0 <system_apb_clock_set_mask+0x58>)
    9888:	69d1      	ldr	r1, [r2, #28]
    988a:	683a      	ldr	r2, [r7, #0]
    988c:	430a      	orrs	r2, r1
    988e:	61da      	str	r2, [r3, #28]
			break;
    9890:	e008      	b.n	98a4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    9892:	4b07      	ldr	r3, [pc, #28]	; (98b0 <system_apb_clock_set_mask+0x58>)
    9894:	4a06      	ldr	r2, [pc, #24]	; (98b0 <system_apb_clock_set_mask+0x58>)
    9896:	6a11      	ldr	r1, [r2, #32]
    9898:	683a      	ldr	r2, [r7, #0]
    989a:	430a      	orrs	r2, r1
    989c:	621a      	str	r2, [r3, #32]
			break;
    989e:	e001      	b.n	98a4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    98a0:	2317      	movs	r3, #23
    98a2:	e000      	b.n	98a6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    98a4:	2300      	movs	r3, #0
}
    98a6:	0018      	movs	r0, r3
    98a8:	46bd      	mov	sp, r7
    98aa:	b002      	add	sp, #8
    98ac:	bd80      	pop	{r7, pc}
    98ae:	46c0      	nop			; (mov r8, r8)
    98b0:	40000400 	.word	0x40000400

000098b4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    98b4:	b580      	push	{r7, lr}
    98b6:	b082      	sub	sp, #8
    98b8:	af00      	add	r7, sp, #0
    98ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    98bc:	687b      	ldr	r3, [r7, #4]
    98be:	2280      	movs	r2, #128	; 0x80
    98c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	2200      	movs	r2, #0
    98c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	2201      	movs	r2, #1
    98cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    98ce:	687b      	ldr	r3, [r7, #4]
    98d0:	2200      	movs	r2, #0
    98d2:	70da      	strb	r2, [r3, #3]
}
    98d4:	46c0      	nop			; (mov r8, r8)
    98d6:	46bd      	mov	sp, r7
    98d8:	b002      	add	sp, #8
    98da:	bd80      	pop	{r7, pc}

000098dc <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    98dc:	b580      	push	{r7, lr}
    98de:	b082      	sub	sp, #8
    98e0:	af00      	add	r7, sp, #0
    98e2:	0002      	movs	r2, r0
    98e4:	1dfb      	adds	r3, r7, #7
    98e6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    98e8:	4b06      	ldr	r3, [pc, #24]	; (9904 <system_interrupt_enable+0x28>)
    98ea:	1dfa      	adds	r2, r7, #7
    98ec:	7812      	ldrb	r2, [r2, #0]
    98ee:	0011      	movs	r1, r2
    98f0:	221f      	movs	r2, #31
    98f2:	400a      	ands	r2, r1
    98f4:	2101      	movs	r1, #1
    98f6:	4091      	lsls	r1, r2
    98f8:	000a      	movs	r2, r1
    98fa:	601a      	str	r2, [r3, #0]
}
    98fc:	46c0      	nop			; (mov r8, r8)
    98fe:	46bd      	mov	sp, r7
    9900:	b002      	add	sp, #8
    9902:	bd80      	pop	{r7, pc}
    9904:	e000e100 	.word	0xe000e100

00009908 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    9908:	b580      	push	{r7, lr}
    990a:	b084      	sub	sp, #16
    990c:	af00      	add	r7, sp, #0
    990e:	0002      	movs	r2, r0
    9910:	1dfb      	adds	r3, r7, #7
    9912:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    9914:	230f      	movs	r3, #15
    9916:	18fb      	adds	r3, r7, r3
    9918:	1dfa      	adds	r2, r7, #7
    991a:	7812      	ldrb	r2, [r2, #0]
    991c:	0952      	lsrs	r2, r2, #5
    991e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    9920:	230f      	movs	r3, #15
    9922:	18fb      	adds	r3, r7, r3
    9924:	781b      	ldrb	r3, [r3, #0]
    9926:	2b00      	cmp	r3, #0
    9928:	d10c      	bne.n	9944 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    992a:	4b09      	ldr	r3, [pc, #36]	; (9950 <_extint_get_eic_from_channel+0x48>)
    992c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    992e:	230f      	movs	r3, #15
    9930:	18fb      	adds	r3, r7, r3
    9932:	781b      	ldrb	r3, [r3, #0]
    9934:	009b      	lsls	r3, r3, #2
    9936:	2210      	movs	r2, #16
    9938:	4694      	mov	ip, r2
    993a:	44bc      	add	ip, r7
    993c:	4463      	add	r3, ip
    993e:	3b08      	subs	r3, #8
    9940:	681b      	ldr	r3, [r3, #0]
    9942:	e000      	b.n	9946 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    9944:	2300      	movs	r3, #0
	}
}
    9946:	0018      	movs	r0, r3
    9948:	46bd      	mov	sp, r7
    994a:	b004      	add	sp, #16
    994c:	bd80      	pop	{r7, pc}
    994e:	46c0      	nop			; (mov r8, r8)
    9950:	40001800 	.word	0x40001800

00009954 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    9954:	b580      	push	{r7, lr}
    9956:	b082      	sub	sp, #8
    9958:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    995a:	4b0f      	ldr	r3, [pc, #60]	; (9998 <extint_is_syncing+0x44>)
    995c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    995e:	2300      	movs	r3, #0
    9960:	607b      	str	r3, [r7, #4]
    9962:	e011      	b.n	9988 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    9964:	687b      	ldr	r3, [r7, #4]
    9966:	009b      	lsls	r3, r3, #2
    9968:	2208      	movs	r2, #8
    996a:	4694      	mov	ip, r2
    996c:	44bc      	add	ip, r7
    996e:	4463      	add	r3, ip
    9970:	3b08      	subs	r3, #8
    9972:	681b      	ldr	r3, [r3, #0]
    9974:	785b      	ldrb	r3, [r3, #1]
    9976:	b2db      	uxtb	r3, r3
    9978:	b25b      	sxtb	r3, r3
    997a:	2b00      	cmp	r3, #0
    997c:	da01      	bge.n	9982 <extint_is_syncing+0x2e>
			return true;
    997e:	2301      	movs	r3, #1
    9980:	e006      	b.n	9990 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	3301      	adds	r3, #1
    9986:	607b      	str	r3, [r7, #4]
    9988:	687b      	ldr	r3, [r7, #4]
    998a:	2b00      	cmp	r3, #0
    998c:	d0ea      	beq.n	9964 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    998e:	2300      	movs	r3, #0
}
    9990:	0018      	movs	r0, r3
    9992:	46bd      	mov	sp, r7
    9994:	b002      	add	sp, #8
    9996:	bd80      	pop	{r7, pc}
    9998:	40001800 	.word	0x40001800

0000999c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    999c:	b580      	push	{r7, lr}
    999e:	b084      	sub	sp, #16
    99a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    99a2:	4b2d      	ldr	r3, [pc, #180]	; (9a58 <_system_extint_init+0xbc>)
    99a4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    99a6:	2140      	movs	r1, #64	; 0x40
    99a8:	2000      	movs	r0, #0
    99aa:	4b2c      	ldr	r3, [pc, #176]	; (9a5c <_system_extint_init+0xc0>)
    99ac:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    99ae:	003b      	movs	r3, r7
    99b0:	0018      	movs	r0, r3
    99b2:	4b2b      	ldr	r3, [pc, #172]	; (9a60 <_system_extint_init+0xc4>)
    99b4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    99b6:	003b      	movs	r3, r7
    99b8:	2200      	movs	r2, #0
    99ba:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    99bc:	003b      	movs	r3, r7
    99be:	0019      	movs	r1, r3
    99c0:	2005      	movs	r0, #5
    99c2:	4b28      	ldr	r3, [pc, #160]	; (9a64 <_system_extint_init+0xc8>)
    99c4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    99c6:	2005      	movs	r0, #5
    99c8:	4b27      	ldr	r3, [pc, #156]	; (9a68 <_system_extint_init+0xcc>)
    99ca:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    99cc:	2300      	movs	r3, #0
    99ce:	60fb      	str	r3, [r7, #12]
    99d0:	e018      	b.n	9a04 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    99d2:	68fb      	ldr	r3, [r7, #12]
    99d4:	009b      	lsls	r3, r3, #2
    99d6:	2210      	movs	r2, #16
    99d8:	4694      	mov	ip, r2
    99da:	44bc      	add	ip, r7
    99dc:	4463      	add	r3, ip
    99de:	3b0c      	subs	r3, #12
    99e0:	681a      	ldr	r2, [r3, #0]
    99e2:	68fb      	ldr	r3, [r7, #12]
    99e4:	009b      	lsls	r3, r3, #2
    99e6:	2110      	movs	r1, #16
    99e8:	468c      	mov	ip, r1
    99ea:	44bc      	add	ip, r7
    99ec:	4463      	add	r3, ip
    99ee:	3b0c      	subs	r3, #12
    99f0:	681b      	ldr	r3, [r3, #0]
    99f2:	781b      	ldrb	r3, [r3, #0]
    99f4:	b2db      	uxtb	r3, r3
    99f6:	2101      	movs	r1, #1
    99f8:	430b      	orrs	r3, r1
    99fa:	b2db      	uxtb	r3, r3
    99fc:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    99fe:	68fb      	ldr	r3, [r7, #12]
    9a00:	3301      	adds	r3, #1
    9a02:	60fb      	str	r3, [r7, #12]
    9a04:	68fb      	ldr	r3, [r7, #12]
    9a06:	2b00      	cmp	r3, #0
    9a08:	d0e3      	beq.n	99d2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    9a0a:	46c0      	nop			; (mov r8, r8)
    9a0c:	4b17      	ldr	r3, [pc, #92]	; (9a6c <_system_extint_init+0xd0>)
    9a0e:	4798      	blx	r3
    9a10:	1e03      	subs	r3, r0, #0
    9a12:	d1fb      	bne.n	9a0c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9a14:	230b      	movs	r3, #11
    9a16:	18fb      	adds	r3, r7, r3
    9a18:	2200      	movs	r2, #0
    9a1a:	701a      	strb	r2, [r3, #0]
    9a1c:	e00d      	b.n	9a3a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    9a1e:	230b      	movs	r3, #11
    9a20:	18fb      	adds	r3, r7, r3
    9a22:	781a      	ldrb	r2, [r3, #0]
    9a24:	4b12      	ldr	r3, [pc, #72]	; (9a70 <_system_extint_init+0xd4>)
    9a26:	0092      	lsls	r2, r2, #2
    9a28:	2100      	movs	r1, #0
    9a2a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9a2c:	230b      	movs	r3, #11
    9a2e:	18fb      	adds	r3, r7, r3
    9a30:	781a      	ldrb	r2, [r3, #0]
    9a32:	230b      	movs	r3, #11
    9a34:	18fb      	adds	r3, r7, r3
    9a36:	3201      	adds	r2, #1
    9a38:	701a      	strb	r2, [r3, #0]
    9a3a:	230b      	movs	r3, #11
    9a3c:	18fb      	adds	r3, r7, r3
    9a3e:	781b      	ldrb	r3, [r3, #0]
    9a40:	2b0f      	cmp	r3, #15
    9a42:	d9ec      	bls.n	9a1e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    9a44:	2004      	movs	r0, #4
    9a46:	4b0b      	ldr	r3, [pc, #44]	; (9a74 <_system_extint_init+0xd8>)
    9a48:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    9a4a:	4b0b      	ldr	r3, [pc, #44]	; (9a78 <_system_extint_init+0xdc>)
    9a4c:	4798      	blx	r3
}
    9a4e:	46c0      	nop			; (mov r8, r8)
    9a50:	46bd      	mov	sp, r7
    9a52:	b004      	add	sp, #16
    9a54:	bd80      	pop	{r7, pc}
    9a56:	46c0      	nop			; (mov r8, r8)
    9a58:	40001800 	.word	0x40001800
    9a5c:	00009859 	.word	0x00009859
    9a60:	00009841 	.word	0x00009841
    9a64:	0000c911 	.word	0x0000c911
    9a68:	0000c955 	.word	0x0000c955
    9a6c:	00009955 	.word	0x00009955
    9a70:	2000474c 	.word	0x2000474c
    9a74:	000098dd 	.word	0x000098dd
    9a78:	00009a7d 	.word	0x00009a7d

00009a7c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    9a7c:	b580      	push	{r7, lr}
    9a7e:	b082      	sub	sp, #8
    9a80:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    9a82:	4b15      	ldr	r3, [pc, #84]	; (9ad8 <_extint_enable+0x5c>)
    9a84:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9a86:	2300      	movs	r3, #0
    9a88:	607b      	str	r3, [r7, #4]
    9a8a:	e018      	b.n	9abe <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    9a8c:	687b      	ldr	r3, [r7, #4]
    9a8e:	009b      	lsls	r3, r3, #2
    9a90:	2208      	movs	r2, #8
    9a92:	4694      	mov	ip, r2
    9a94:	44bc      	add	ip, r7
    9a96:	4463      	add	r3, ip
    9a98:	3b08      	subs	r3, #8
    9a9a:	681a      	ldr	r2, [r3, #0]
    9a9c:	687b      	ldr	r3, [r7, #4]
    9a9e:	009b      	lsls	r3, r3, #2
    9aa0:	2108      	movs	r1, #8
    9aa2:	468c      	mov	ip, r1
    9aa4:	44bc      	add	ip, r7
    9aa6:	4463      	add	r3, ip
    9aa8:	3b08      	subs	r3, #8
    9aaa:	681b      	ldr	r3, [r3, #0]
    9aac:	781b      	ldrb	r3, [r3, #0]
    9aae:	b2db      	uxtb	r3, r3
    9ab0:	2102      	movs	r1, #2
    9ab2:	430b      	orrs	r3, r1
    9ab4:	b2db      	uxtb	r3, r3
    9ab6:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    9ab8:	687b      	ldr	r3, [r7, #4]
    9aba:	3301      	adds	r3, #1
    9abc:	607b      	str	r3, [r7, #4]
    9abe:	687b      	ldr	r3, [r7, #4]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d0e3      	beq.n	9a8c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    9ac4:	46c0      	nop			; (mov r8, r8)
    9ac6:	4b05      	ldr	r3, [pc, #20]	; (9adc <_extint_enable+0x60>)
    9ac8:	4798      	blx	r3
    9aca:	1e03      	subs	r3, r0, #0
    9acc:	d1fb      	bne.n	9ac6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    9ace:	46c0      	nop			; (mov r8, r8)
    9ad0:	46bd      	mov	sp, r7
    9ad2:	b002      	add	sp, #8
    9ad4:	bd80      	pop	{r7, pc}
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	40001800 	.word	0x40001800
    9adc:	00009955 	.word	0x00009955

00009ae0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    9ae0:	b580      	push	{r7, lr}
    9ae2:	b082      	sub	sp, #8
    9ae4:	af00      	add	r7, sp, #0
    9ae6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    9ae8:	687b      	ldr	r3, [r7, #4]
    9aea:	2200      	movs	r2, #0
    9aec:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	2200      	movs	r2, #0
    9af2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    9af4:	687b      	ldr	r3, [r7, #4]
    9af6:	2201      	movs	r2, #1
    9af8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    9afa:	687b      	ldr	r3, [r7, #4]
    9afc:	2201      	movs	r2, #1
    9afe:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    9b00:	687b      	ldr	r3, [r7, #4]
    9b02:	2200      	movs	r2, #0
    9b04:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    9b06:	687b      	ldr	r3, [r7, #4]
    9b08:	2202      	movs	r2, #2
    9b0a:	72da      	strb	r2, [r3, #11]
}
    9b0c:	46c0      	nop			; (mov r8, r8)
    9b0e:	46bd      	mov	sp, r7
    9b10:	b002      	add	sp, #8
    9b12:	bd80      	pop	{r7, pc}

00009b14 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    9b14:	b580      	push	{r7, lr}
    9b16:	b086      	sub	sp, #24
    9b18:	af00      	add	r7, sp, #0
    9b1a:	0002      	movs	r2, r0
    9b1c:	6039      	str	r1, [r7, #0]
    9b1e:	1dfb      	adds	r3, r7, #7
    9b20:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    9b22:	2308      	movs	r3, #8
    9b24:	18fb      	adds	r3, r7, r3
    9b26:	0018      	movs	r0, r3
    9b28:	4b36      	ldr	r3, [pc, #216]	; (9c04 <extint_chan_set_config+0xf0>)
    9b2a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    9b2c:	683b      	ldr	r3, [r7, #0]
    9b2e:	685b      	ldr	r3, [r3, #4]
    9b30:	b2da      	uxtb	r2, r3
    9b32:	2308      	movs	r3, #8
    9b34:	18fb      	adds	r3, r7, r3
    9b36:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9b38:	2308      	movs	r3, #8
    9b3a:	18fb      	adds	r3, r7, r3
    9b3c:	2200      	movs	r2, #0
    9b3e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    9b40:	683b      	ldr	r3, [r7, #0]
    9b42:	7a1a      	ldrb	r2, [r3, #8]
    9b44:	2308      	movs	r3, #8
    9b46:	18fb      	adds	r3, r7, r3
    9b48:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    9b4a:	683b      	ldr	r3, [r7, #0]
    9b4c:	681b      	ldr	r3, [r3, #0]
    9b4e:	b2db      	uxtb	r3, r3
    9b50:	2208      	movs	r2, #8
    9b52:	18ba      	adds	r2, r7, r2
    9b54:	0011      	movs	r1, r2
    9b56:	0018      	movs	r0, r3
    9b58:	4b2b      	ldr	r3, [pc, #172]	; (9c08 <extint_chan_set_config+0xf4>)
    9b5a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    9b5c:	1dfb      	adds	r3, r7, #7
    9b5e:	781b      	ldrb	r3, [r3, #0]
    9b60:	0018      	movs	r0, r3
    9b62:	4b2a      	ldr	r3, [pc, #168]	; (9c0c <extint_chan_set_config+0xf8>)
    9b64:	4798      	blx	r3
    9b66:	0003      	movs	r3, r0
    9b68:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    9b6a:	1dfb      	adds	r3, r7, #7
    9b6c:	781b      	ldrb	r3, [r3, #0]
    9b6e:	2207      	movs	r2, #7
    9b70:	4013      	ands	r3, r2
    9b72:	009b      	lsls	r3, r3, #2
    9b74:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    9b76:	683b      	ldr	r3, [r7, #0]
    9b78:	7adb      	ldrb	r3, [r3, #11]
    9b7a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    9b7c:	683b      	ldr	r3, [r7, #0]
    9b7e:	7a9b      	ldrb	r3, [r3, #10]
    9b80:	2b00      	cmp	r3, #0
    9b82:	d003      	beq.n	9b8c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    9b84:	697b      	ldr	r3, [r7, #20]
    9b86:	2208      	movs	r2, #8
    9b88:	4313      	orrs	r3, r2
    9b8a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    9b8c:	1dfb      	adds	r3, r7, #7
    9b8e:	781b      	ldrb	r3, [r3, #0]
    9b90:	08db      	lsrs	r3, r3, #3
    9b92:	b2db      	uxtb	r3, r3
    9b94:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    9b96:	1dfb      	adds	r3, r7, #7
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	08db      	lsrs	r3, r3, #3
    9b9c:	b2db      	uxtb	r3, r3
    9b9e:	001a      	movs	r2, r3
    9ba0:	693b      	ldr	r3, [r7, #16]
    9ba2:	3206      	adds	r2, #6
    9ba4:	0092      	lsls	r2, r2, #2
    9ba6:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9ba8:	210f      	movs	r1, #15
    9baa:	68fa      	ldr	r2, [r7, #12]
    9bac:	4091      	lsls	r1, r2
    9bae:	000a      	movs	r2, r1
    9bb0:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    9bb2:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    9bb4:	6979      	ldr	r1, [r7, #20]
    9bb6:	68fb      	ldr	r3, [r7, #12]
    9bb8:	4099      	lsls	r1, r3
    9bba:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9bbc:	431a      	orrs	r2, r3
    9bbe:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    9bc0:	693b      	ldr	r3, [r7, #16]
    9bc2:	1d82      	adds	r2, r0, #6
    9bc4:	0092      	lsls	r2, r2, #2
    9bc6:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    9bc8:	683b      	ldr	r3, [r7, #0]
    9bca:	7a5b      	ldrb	r3, [r3, #9]
    9bcc:	2b00      	cmp	r3, #0
    9bce:	d00a      	beq.n	9be6 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    9bd0:	693b      	ldr	r3, [r7, #16]
    9bd2:	695a      	ldr	r2, [r3, #20]
    9bd4:	1dfb      	adds	r3, r7, #7
    9bd6:	781b      	ldrb	r3, [r3, #0]
    9bd8:	2101      	movs	r1, #1
    9bda:	4099      	lsls	r1, r3
    9bdc:	000b      	movs	r3, r1
    9bde:	431a      	orrs	r2, r3
    9be0:	693b      	ldr	r3, [r7, #16]
    9be2:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    9be4:	e00a      	b.n	9bfc <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    9be6:	693b      	ldr	r3, [r7, #16]
    9be8:	695b      	ldr	r3, [r3, #20]
    9bea:	1dfa      	adds	r2, r7, #7
    9bec:	7812      	ldrb	r2, [r2, #0]
    9bee:	2101      	movs	r1, #1
    9bf0:	4091      	lsls	r1, r2
    9bf2:	000a      	movs	r2, r1
    9bf4:	43d2      	mvns	r2, r2
    9bf6:	401a      	ands	r2, r3
    9bf8:	693b      	ldr	r3, [r7, #16]
    9bfa:	615a      	str	r2, [r3, #20]
	}
}
    9bfc:	46c0      	nop			; (mov r8, r8)
    9bfe:	46bd      	mov	sp, r7
    9c00:	b006      	add	sp, #24
    9c02:	bd80      	pop	{r7, pc}
    9c04:	000098b5 	.word	0x000098b5
    9c08:	0000cbfd 	.word	0x0000cbfd
    9c0c:	00009909 	.word	0x00009909

00009c10 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    9c10:	b580      	push	{r7, lr}
    9c12:	b082      	sub	sp, #8
    9c14:	af00      	add	r7, sp, #0
    9c16:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9c18:	687b      	ldr	r3, [r7, #4]
    9c1a:	2280      	movs	r2, #128	; 0x80
    9c1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9c1e:	687b      	ldr	r3, [r7, #4]
    9c20:	2200      	movs	r2, #0
    9c22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9c24:	687b      	ldr	r3, [r7, #4]
    9c26:	2201      	movs	r2, #1
    9c28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9c2a:	687b      	ldr	r3, [r7, #4]
    9c2c:	2200      	movs	r2, #0
    9c2e:	70da      	strb	r2, [r3, #3]
}
    9c30:	46c0      	nop			; (mov r8, r8)
    9c32:	46bd      	mov	sp, r7
    9c34:	b002      	add	sp, #8
    9c36:	bd80      	pop	{r7, pc}

00009c38 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9c38:	b580      	push	{r7, lr}
    9c3a:	b084      	sub	sp, #16
    9c3c:	af00      	add	r7, sp, #0
    9c3e:	0002      	movs	r2, r0
    9c40:	6039      	str	r1, [r7, #0]
    9c42:	1dfb      	adds	r3, r7, #7
    9c44:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    9c46:	230c      	movs	r3, #12
    9c48:	18fb      	adds	r3, r7, r3
    9c4a:	0018      	movs	r0, r3
    9c4c:	4b10      	ldr	r3, [pc, #64]	; (9c90 <port_pin_set_config+0x58>)
    9c4e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    9c50:	230c      	movs	r3, #12
    9c52:	18fb      	adds	r3, r7, r3
    9c54:	2280      	movs	r2, #128	; 0x80
    9c56:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    9c58:	683b      	ldr	r3, [r7, #0]
    9c5a:	781a      	ldrb	r2, [r3, #0]
    9c5c:	230c      	movs	r3, #12
    9c5e:	18fb      	adds	r3, r7, r3
    9c60:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9c62:	683b      	ldr	r3, [r7, #0]
    9c64:	785a      	ldrb	r2, [r3, #1]
    9c66:	230c      	movs	r3, #12
    9c68:	18fb      	adds	r3, r7, r3
    9c6a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9c6c:	683b      	ldr	r3, [r7, #0]
    9c6e:	789a      	ldrb	r2, [r3, #2]
    9c70:	230c      	movs	r3, #12
    9c72:	18fb      	adds	r3, r7, r3
    9c74:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    9c76:	230c      	movs	r3, #12
    9c78:	18fa      	adds	r2, r7, r3
    9c7a:	1dfb      	adds	r3, r7, #7
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	0011      	movs	r1, r2
    9c80:	0018      	movs	r0, r3
    9c82:	4b04      	ldr	r3, [pc, #16]	; (9c94 <port_pin_set_config+0x5c>)
    9c84:	4798      	blx	r3
}
    9c86:	46c0      	nop			; (mov r8, r8)
    9c88:	46bd      	mov	sp, r7
    9c8a:	b004      	add	sp, #16
    9c8c:	bd80      	pop	{r7, pc}
    9c8e:	46c0      	nop			; (mov r8, r8)
    9c90:	00009c11 	.word	0x00009c11
    9c94:	0000cbfd 	.word	0x0000cbfd

00009c98 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    9c98:	b580      	push	{r7, lr}
    9c9a:	b086      	sub	sp, #24
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    9ca0:	4b28      	ldr	r3, [pc, #160]	; (9d44 <_rtc_interrupt_handler+0xac>)
    9ca2:	687a      	ldr	r2, [r7, #4]
    9ca4:	0092      	lsls	r2, r2, #2
    9ca6:	58d3      	ldr	r3, [r2, r3]
    9ca8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    9caa:	697b      	ldr	r3, [r7, #20]
    9cac:	681b      	ldr	r3, [r3, #0]
    9cae:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    9cb0:	230e      	movs	r3, #14
    9cb2:	18fb      	adds	r3, r7, r3
    9cb4:	697a      	ldr	r2, [r7, #20]
    9cb6:	8a52      	ldrh	r2, [r2, #18]
    9cb8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    9cba:	697b      	ldr	r3, [r7, #20]
    9cbc:	8a1b      	ldrh	r3, [r3, #16]
    9cbe:	b29a      	uxth	r2, r3
    9cc0:	230e      	movs	r3, #14
    9cc2:	18fb      	adds	r3, r7, r3
    9cc4:	210e      	movs	r1, #14
    9cc6:	1879      	adds	r1, r7, r1
    9cc8:	8809      	ldrh	r1, [r1, #0]
    9cca:	400a      	ands	r2, r1
    9ccc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    9cce:	693b      	ldr	r3, [r7, #16]
    9cd0:	7a1b      	ldrb	r3, [r3, #8]
    9cd2:	b2da      	uxtb	r2, r3
    9cd4:	230c      	movs	r3, #12
    9cd6:	18fb      	adds	r3, r7, r3
    9cd8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    9cda:	693b      	ldr	r3, [r7, #16]
    9cdc:	79db      	ldrb	r3, [r3, #7]
    9cde:	b2db      	uxtb	r3, r3
    9ce0:	b29a      	uxth	r2, r3
    9ce2:	230c      	movs	r3, #12
    9ce4:	18fb      	adds	r3, r7, r3
    9ce6:	210c      	movs	r1, #12
    9ce8:	1879      	adds	r1, r7, r1
    9cea:	8809      	ldrh	r1, [r1, #0]
    9cec:	400a      	ands	r2, r1
    9cee:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    9cf0:	230c      	movs	r3, #12
    9cf2:	18fb      	adds	r3, r7, r3
    9cf4:	881b      	ldrh	r3, [r3, #0]
    9cf6:	2280      	movs	r2, #128	; 0x80
    9cf8:	4013      	ands	r3, r2
    9cfa:	d00c      	beq.n	9d16 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    9cfc:	230e      	movs	r3, #14
    9cfe:	18fb      	adds	r3, r7, r3
    9d00:	881b      	ldrh	r3, [r3, #0]
    9d02:	2202      	movs	r2, #2
    9d04:	4013      	ands	r3, r2
    9d06:	d002      	beq.n	9d0e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    9d08:	697b      	ldr	r3, [r7, #20]
    9d0a:	68db      	ldr	r3, [r3, #12]
    9d0c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    9d0e:	693b      	ldr	r3, [r7, #16]
    9d10:	2280      	movs	r2, #128	; 0x80
    9d12:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    9d14:	e011      	b.n	9d3a <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    9d16:	230c      	movs	r3, #12
    9d18:	18fb      	adds	r3, r7, r3
    9d1a:	881b      	ldrh	r3, [r3, #0]
    9d1c:	2201      	movs	r2, #1
    9d1e:	4013      	ands	r3, r2
    9d20:	d00b      	beq.n	9d3a <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    9d22:	230e      	movs	r3, #14
    9d24:	18fb      	adds	r3, r7, r3
    9d26:	881b      	ldrh	r3, [r3, #0]
    9d28:	2201      	movs	r2, #1
    9d2a:	4013      	ands	r3, r2
    9d2c:	d002      	beq.n	9d34 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    9d2e:	697b      	ldr	r3, [r7, #20]
    9d30:	689b      	ldr	r3, [r3, #8]
    9d32:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    9d34:	693b      	ldr	r3, [r7, #16]
    9d36:	2201      	movs	r2, #1
    9d38:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    9d3a:	46c0      	nop			; (mov r8, r8)
    9d3c:	46bd      	mov	sp, r7
    9d3e:	b006      	add	sp, #24
    9d40:	bd80      	pop	{r7, pc}
    9d42:	46c0      	nop			; (mov r8, r8)
    9d44:	2000478c 	.word	0x2000478c

00009d48 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    9d48:	b580      	push	{r7, lr}
    9d4a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    9d4c:	2000      	movs	r0, #0
    9d4e:	4b02      	ldr	r3, [pc, #8]	; (9d58 <RTC_Handler+0x10>)
    9d50:	4798      	blx	r3
}
    9d52:	46c0      	nop			; (mov r8, r8)
    9d54:	46bd      	mov	sp, r7
    9d56:	bd80      	pop	{r7, pc}
    9d58:	00009c99 	.word	0x00009c99

00009d5c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b082      	sub	sp, #8
    9d60:	af00      	add	r7, sp, #0
    9d62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	2200      	movs	r2, #0
    9d68:	701a      	strb	r2, [r3, #0]
}
    9d6a:	46c0      	nop			; (mov r8, r8)
    9d6c:	46bd      	mov	sp, r7
    9d6e:	b002      	add	sp, #8
    9d70:	bd80      	pop	{r7, pc}
    9d72:	46c0      	nop			; (mov r8, r8)

00009d74 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d76:	b08d      	sub	sp, #52	; 0x34
    9d78:	af00      	add	r7, sp, #0
    9d7a:	60b8      	str	r0, [r7, #8]
    9d7c:	60f9      	str	r1, [r7, #12]
    9d7e:	603a      	str	r2, [r7, #0]
    9d80:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    9d82:	2300      	movs	r3, #0
    9d84:	2400      	movs	r4, #0
    9d86:	623b      	str	r3, [r7, #32]
    9d88:	627c      	str	r4, [r7, #36]	; 0x24
    9d8a:	2300      	movs	r3, #0
    9d8c:	2400      	movs	r4, #0
    9d8e:	61bb      	str	r3, [r7, #24]
    9d90:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    9d92:	233f      	movs	r3, #63	; 0x3f
    9d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    9d96:	e053      	b.n	9e40 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    9d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9d9a:	3b20      	subs	r3, #32
    9d9c:	2b00      	cmp	r3, #0
    9d9e:	db04      	blt.n	9daa <long_division+0x36>
    9da0:	2201      	movs	r2, #1
    9da2:	409a      	lsls	r2, r3
    9da4:	0013      	movs	r3, r2
    9da6:	617b      	str	r3, [r7, #20]
    9da8:	e00b      	b.n	9dc2 <long_division+0x4e>
    9daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9dac:	2220      	movs	r2, #32
    9dae:	1ad3      	subs	r3, r2, r3
    9db0:	2201      	movs	r2, #1
    9db2:	40da      	lsrs	r2, r3
    9db4:	0013      	movs	r3, r2
    9db6:	2100      	movs	r1, #0
    9db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9dba:	4091      	lsls	r1, r2
    9dbc:	000a      	movs	r2, r1
    9dbe:	4313      	orrs	r3, r2
    9dc0:	617b      	str	r3, [r7, #20]
    9dc2:	2201      	movs	r2, #1
    9dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9dc6:	409a      	lsls	r2, r3
    9dc8:	0013      	movs	r3, r2
    9dca:	613b      	str	r3, [r7, #16]

		r = r << 1;
    9dcc:	69bb      	ldr	r3, [r7, #24]
    9dce:	69fc      	ldr	r4, [r7, #28]
    9dd0:	18db      	adds	r3, r3, r3
    9dd2:	4164      	adcs	r4, r4
    9dd4:	61bb      	str	r3, [r7, #24]
    9dd6:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    9dd8:	68bb      	ldr	r3, [r7, #8]
    9dda:	693a      	ldr	r2, [r7, #16]
    9ddc:	401a      	ands	r2, r3
    9dde:	0015      	movs	r5, r2
    9de0:	68fb      	ldr	r3, [r7, #12]
    9de2:	697a      	ldr	r2, [r7, #20]
    9de4:	401a      	ands	r2, r3
    9de6:	0016      	movs	r6, r2
    9de8:	002b      	movs	r3, r5
    9dea:	4333      	orrs	r3, r6
    9dec:	d007      	beq.n	9dfe <long_division+0x8a>
			r |= 0x01;
    9dee:	69bb      	ldr	r3, [r7, #24]
    9df0:	2201      	movs	r2, #1
    9df2:	4313      	orrs	r3, r2
    9df4:	61bb      	str	r3, [r7, #24]
    9df6:	69fb      	ldr	r3, [r7, #28]
    9df8:	2200      	movs	r2, #0
    9dfa:	4313      	orrs	r3, r2
    9dfc:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    9dfe:	687a      	ldr	r2, [r7, #4]
    9e00:	69fb      	ldr	r3, [r7, #28]
    9e02:	429a      	cmp	r2, r3
    9e04:	d819      	bhi.n	9e3a <long_division+0xc6>
    9e06:	687a      	ldr	r2, [r7, #4]
    9e08:	69fb      	ldr	r3, [r7, #28]
    9e0a:	429a      	cmp	r2, r3
    9e0c:	d103      	bne.n	9e16 <long_division+0xa2>
    9e0e:	683a      	ldr	r2, [r7, #0]
    9e10:	69bb      	ldr	r3, [r7, #24]
    9e12:	429a      	cmp	r2, r3
    9e14:	d811      	bhi.n	9e3a <long_division+0xc6>
			r = r - d;
    9e16:	69b9      	ldr	r1, [r7, #24]
    9e18:	69fa      	ldr	r2, [r7, #28]
    9e1a:	683b      	ldr	r3, [r7, #0]
    9e1c:	687c      	ldr	r4, [r7, #4]
    9e1e:	1ac9      	subs	r1, r1, r3
    9e20:	41a2      	sbcs	r2, r4
    9e22:	000b      	movs	r3, r1
    9e24:	0014      	movs	r4, r2
    9e26:	61bb      	str	r3, [r7, #24]
    9e28:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    9e2a:	6a3a      	ldr	r2, [r7, #32]
    9e2c:	693b      	ldr	r3, [r7, #16]
    9e2e:	4313      	orrs	r3, r2
    9e30:	623b      	str	r3, [r7, #32]
    9e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9e34:	697b      	ldr	r3, [r7, #20]
    9e36:	4313      	orrs	r3, r2
    9e38:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    9e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e3c:	3b01      	subs	r3, #1
    9e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    9e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9e42:	2b00      	cmp	r3, #0
    9e44:	daa8      	bge.n	9d98 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    9e46:	6a3b      	ldr	r3, [r7, #32]
    9e48:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    9e4a:	0018      	movs	r0, r3
    9e4c:	0021      	movs	r1, r4
    9e4e:	46bd      	mov	sp, r7
    9e50:	b00d      	add	sp, #52	; 0x34
    9e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009e54 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    9e54:	b580      	push	{r7, lr}
    9e56:	b086      	sub	sp, #24
    9e58:	af00      	add	r7, sp, #0
    9e5a:	60f8      	str	r0, [r7, #12]
    9e5c:	60b9      	str	r1, [r7, #8]
    9e5e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    9e60:	2316      	movs	r3, #22
    9e62:	18fb      	adds	r3, r7, r3
    9e64:	2200      	movs	r2, #0
    9e66:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    9e68:	68bb      	ldr	r3, [r7, #8]
    9e6a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    9e6c:	68bb      	ldr	r3, [r7, #8]
    9e6e:	085a      	lsrs	r2, r3, #1
    9e70:	68fb      	ldr	r3, [r7, #12]
    9e72:	429a      	cmp	r2, r3
    9e74:	d201      	bcs.n	9e7a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9e76:	2340      	movs	r3, #64	; 0x40
    9e78:	e026      	b.n	9ec8 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    9e7a:	68bb      	ldr	r3, [r7, #8]
    9e7c:	085b      	lsrs	r3, r3, #1
    9e7e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    9e80:	e00a      	b.n	9e98 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    9e82:	693a      	ldr	r2, [r7, #16]
    9e84:	68fb      	ldr	r3, [r7, #12]
    9e86:	1ad3      	subs	r3, r2, r3
    9e88:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    9e8a:	2316      	movs	r3, #22
    9e8c:	18fb      	adds	r3, r7, r3
    9e8e:	881a      	ldrh	r2, [r3, #0]
    9e90:	2316      	movs	r3, #22
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	3201      	adds	r2, #1
    9e96:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    9e98:	693a      	ldr	r2, [r7, #16]
    9e9a:	68fb      	ldr	r3, [r7, #12]
    9e9c:	429a      	cmp	r2, r3
    9e9e:	d2f0      	bcs.n	9e82 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    9ea0:	2316      	movs	r3, #22
    9ea2:	18fb      	adds	r3, r7, r3
    9ea4:	2216      	movs	r2, #22
    9ea6:	18ba      	adds	r2, r7, r2
    9ea8:	8812      	ldrh	r2, [r2, #0]
    9eaa:	3a01      	subs	r2, #1
    9eac:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    9eae:	2316      	movs	r3, #22
    9eb0:	18fb      	adds	r3, r7, r3
    9eb2:	881b      	ldrh	r3, [r3, #0]
    9eb4:	2bff      	cmp	r3, #255	; 0xff
    9eb6:	d901      	bls.n	9ebc <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9eb8:	2340      	movs	r3, #64	; 0x40
    9eba:	e005      	b.n	9ec8 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	2216      	movs	r2, #22
    9ec0:	18ba      	adds	r2, r7, r2
    9ec2:	8812      	ldrh	r2, [r2, #0]
    9ec4:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    9ec6:	2300      	movs	r3, #0
	}
}
    9ec8:	0018      	movs	r0, r3
    9eca:	46bd      	mov	sp, r7
    9ecc:	b006      	add	sp, #24
    9ece:	bd80      	pop	{r7, pc}

00009ed0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ed2:	b09d      	sub	sp, #116	; 0x74
    9ed4:	af00      	add	r7, sp, #0
    9ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
    9ed8:	63b9      	str	r1, [r7, #56]	; 0x38
    9eda:	637a      	str	r2, [r7, #52]	; 0x34
    9edc:	2233      	movs	r2, #51	; 0x33
    9ede:	18ba      	adds	r2, r7, r2
    9ee0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    9ee2:	2300      	movs	r3, #0
    9ee4:	2400      	movs	r4, #0
    9ee6:	65bb      	str	r3, [r7, #88]	; 0x58
    9ee8:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    9eea:	2300      	movs	r3, #0
    9eec:	2400      	movs	r4, #0
    9eee:	653b      	str	r3, [r7, #80]	; 0x50
    9ef0:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    9ef2:	2300      	movs	r3, #0
    9ef4:	2400      	movs	r4, #0
    9ef6:	66bb      	str	r3, [r7, #104]	; 0x68
    9ef8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    9efa:	2300      	movs	r3, #0
    9efc:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    9efe:	2358      	movs	r3, #88	; 0x58
    9f00:	2230      	movs	r2, #48	; 0x30
    9f02:	4694      	mov	ip, r2
    9f04:	44bc      	add	ip, r7
    9f06:	4463      	add	r3, ip
    9f08:	781a      	ldrb	r2, [r3, #0]
    9f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9f0c:	435a      	muls	r2, r3
    9f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9f10:	429a      	cmp	r2, r3
    9f12:	d901      	bls.n	9f18 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9f14:	2340      	movs	r3, #64	; 0x40
    9f16:	e0c6      	b.n	a0a6 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    9f18:	2333      	movs	r3, #51	; 0x33
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	781b      	ldrb	r3, [r3, #0]
    9f1e:	2b00      	cmp	r3, #0
    9f20:	d13d      	bne.n	9f9e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    9f22:	2358      	movs	r3, #88	; 0x58
    9f24:	2230      	movs	r2, #48	; 0x30
    9f26:	4694      	mov	ip, r2
    9f28:	44bc      	add	ip, r7
    9f2a:	4463      	add	r3, ip
    9f2c:	781b      	ldrb	r3, [r3, #0]
    9f2e:	b2db      	uxtb	r3, r3
    9f30:	613b      	str	r3, [r7, #16]
    9f32:	2300      	movs	r3, #0
    9f34:	617b      	str	r3, [r7, #20]
    9f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9f38:	60bb      	str	r3, [r7, #8]
    9f3a:	2300      	movs	r3, #0
    9f3c:	60fb      	str	r3, [r7, #12]
    9f3e:	4c5c      	ldr	r4, [pc, #368]	; (a0b0 <_sercom_get_async_baud_val+0x1e0>)
    9f40:	68ba      	ldr	r2, [r7, #8]
    9f42:	68fb      	ldr	r3, [r7, #12]
    9f44:	6938      	ldr	r0, [r7, #16]
    9f46:	6979      	ldr	r1, [r7, #20]
    9f48:	47a0      	blx	r4
    9f4a:	0003      	movs	r3, r0
    9f4c:	000c      	movs	r4, r1
    9f4e:	001b      	movs	r3, r3
    9f50:	64fb      	str	r3, [r7, #76]	; 0x4c
    9f52:	2300      	movs	r3, #0
    9f54:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    9f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9f58:	603b      	str	r3, [r7, #0]
    9f5a:	2300      	movs	r3, #0
    9f5c:	607b      	str	r3, [r7, #4]
    9f5e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    9f60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    9f62:	683a      	ldr	r2, [r7, #0]
    9f64:	687b      	ldr	r3, [r7, #4]
    9f66:	4c53      	ldr	r4, [pc, #332]	; (a0b4 <_sercom_get_async_baud_val+0x1e4>)
    9f68:	47a0      	blx	r4
    9f6a:	0003      	movs	r3, r0
    9f6c:	000c      	movs	r4, r1
    9f6e:	65bb      	str	r3, [r7, #88]	; 0x58
    9f70:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    9f72:	2100      	movs	r1, #0
    9f74:	2201      	movs	r2, #1
    9f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9f78:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    9f7a:	1ac9      	subs	r1, r1, r3
    9f7c:	41a2      	sbcs	r2, r4
    9f7e:	000b      	movs	r3, r1
    9f80:	0014      	movs	r4, r2
    9f82:	653b      	str	r3, [r7, #80]	; 0x50
    9f84:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    9f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9f88:	0c1b      	lsrs	r3, r3, #16
    9f8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    9f8c:	0416      	lsls	r6, r2, #16
    9f8e:	431e      	orrs	r6, r3
    9f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    9f92:	041d      	lsls	r5, r3, #16
    9f94:	0033      	movs	r3, r6
    9f96:	66bb      	str	r3, [r7, #104]	; 0x68
    9f98:	2300      	movs	r3, #0
    9f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    9f9c:	e07d      	b.n	a09a <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    9f9e:	2333      	movs	r3, #51	; 0x33
    9fa0:	18fb      	adds	r3, r7, r3
    9fa2:	781b      	ldrb	r3, [r3, #0]
    9fa4:	2b01      	cmp	r3, #1
    9fa6:	d000      	beq.n	9faa <_sercom_get_async_baud_val+0xda>
    9fa8:	e077      	b.n	a09a <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    9faa:	2337      	movs	r3, #55	; 0x37
    9fac:	2230      	movs	r2, #48	; 0x30
    9fae:	4694      	mov	ip, r2
    9fb0:	44bc      	add	ip, r7
    9fb2:	4463      	add	r3, ip
    9fb4:	2200      	movs	r2, #0
    9fb6:	701a      	strb	r2, [r3, #0]
    9fb8:	e04e      	b.n	a058 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    9fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    9fbe:	2300      	movs	r3, #0
    9fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    9fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    9fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    9fc6:	0003      	movs	r3, r0
    9fc8:	0f5b      	lsrs	r3, r3, #29
    9fca:	000a      	movs	r2, r1
    9fcc:	00d2      	lsls	r2, r2, #3
    9fce:	4313      	orrs	r3, r2
    9fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    9fd2:	0003      	movs	r3, r0
    9fd4:	00db      	lsls	r3, r3, #3
    9fd6:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    9fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9fda:	623b      	str	r3, [r7, #32]
    9fdc:	2300      	movs	r3, #0
    9fde:	627b      	str	r3, [r7, #36]	; 0x24
    9fe0:	2358      	movs	r3, #88	; 0x58
    9fe2:	2230      	movs	r2, #48	; 0x30
    9fe4:	4694      	mov	ip, r2
    9fe6:	44bc      	add	ip, r7
    9fe8:	4463      	add	r3, ip
    9fea:	781b      	ldrb	r3, [r3, #0]
    9fec:	b2db      	uxtb	r3, r3
    9fee:	61bb      	str	r3, [r7, #24]
    9ff0:	2300      	movs	r3, #0
    9ff2:	61fb      	str	r3, [r7, #28]
    9ff4:	4c2e      	ldr	r4, [pc, #184]	; (a0b0 <_sercom_get_async_baud_val+0x1e0>)
    9ff6:	69ba      	ldr	r2, [r7, #24]
    9ff8:	69fb      	ldr	r3, [r7, #28]
    9ffa:	6a38      	ldr	r0, [r7, #32]
    9ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9ffe:	47a0      	blx	r4
    a000:	0003      	movs	r3, r0
    a002:	000c      	movs	r4, r1
    a004:	643b      	str	r3, [r7, #64]	; 0x40
    a006:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    a008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a00a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    a00c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    a00e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    a010:	001a      	movs	r2, r3
    a012:	0023      	movs	r3, r4
    a014:	4c27      	ldr	r4, [pc, #156]	; (a0b4 <_sercom_get_async_baud_val+0x1e4>)
    a016:	47a0      	blx	r4
    a018:	0003      	movs	r3, r0
    a01a:	000c      	movs	r4, r1
    a01c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    a01e:	2337      	movs	r3, #55	; 0x37
    a020:	2230      	movs	r2, #48	; 0x30
    a022:	4694      	mov	ip, r2
    a024:	44bc      	add	ip, r7
    a026:	4463      	add	r3, ip
    a028:	781b      	ldrb	r3, [r3, #0]
    a02a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a02c:	1ad3      	subs	r3, r2, r3
    a02e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    a030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a032:	08db      	lsrs	r3, r3, #3
    a034:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    a036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a038:	4a1f      	ldr	r2, [pc, #124]	; (a0b8 <_sercom_get_async_baud_val+0x1e8>)
    a03a:	4293      	cmp	r3, r2
    a03c:	d915      	bls.n	a06a <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    a03e:	2337      	movs	r3, #55	; 0x37
    a040:	2230      	movs	r2, #48	; 0x30
    a042:	4694      	mov	ip, r2
    a044:	44bc      	add	ip, r7
    a046:	4463      	add	r3, ip
    a048:	781a      	ldrb	r2, [r3, #0]
    a04a:	2337      	movs	r3, #55	; 0x37
    a04c:	2130      	movs	r1, #48	; 0x30
    a04e:	468c      	mov	ip, r1
    a050:	44bc      	add	ip, r7
    a052:	4463      	add	r3, ip
    a054:	3201      	adds	r2, #1
    a056:	701a      	strb	r2, [r3, #0]
    a058:	2337      	movs	r3, #55	; 0x37
    a05a:	2230      	movs	r2, #48	; 0x30
    a05c:	4694      	mov	ip, r2
    a05e:	44bc      	add	ip, r7
    a060:	4463      	add	r3, ip
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	2b07      	cmp	r3, #7
    a066:	d9a8      	bls.n	9fba <_sercom_get_async_baud_val+0xea>
    a068:	e000      	b.n	a06c <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    a06a:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    a06c:	2337      	movs	r3, #55	; 0x37
    a06e:	2230      	movs	r2, #48	; 0x30
    a070:	4694      	mov	ip, r2
    a072:	44bc      	add	ip, r7
    a074:	4463      	add	r3, ip
    a076:	781b      	ldrb	r3, [r3, #0]
    a078:	2b08      	cmp	r3, #8
    a07a:	d101      	bne.n	a080 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    a07c:	2340      	movs	r3, #64	; 0x40
    a07e:	e012      	b.n	a0a6 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    a080:	2337      	movs	r3, #55	; 0x37
    a082:	2230      	movs	r2, #48	; 0x30
    a084:	4694      	mov	ip, r2
    a086:	44bc      	add	ip, r7
    a088:	4463      	add	r3, ip
    a08a:	781b      	ldrb	r3, [r3, #0]
    a08c:	035b      	lsls	r3, r3, #13
    a08e:	001a      	movs	r2, r3
    a090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    a092:	4313      	orrs	r3, r2
    a094:	66bb      	str	r3, [r7, #104]	; 0x68
    a096:	2300      	movs	r3, #0
    a098:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    a09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    a09c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    a09e:	b29a      	uxth	r2, r3
    a0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a0a2:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    a0a4:	2300      	movs	r3, #0
}
    a0a6:	0018      	movs	r0, r3
    a0a8:	46bd      	mov	sp, r7
    a0aa:	b01d      	add	sp, #116	; 0x74
    a0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0ae:	46c0      	nop			; (mov r8, r8)
    a0b0:	00010ac9 	.word	0x00010ac9
    a0b4:	00009d75 	.word	0x00009d75
    a0b8:	00001fff 	.word	0x00001fff

0000a0bc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    a0bc:	b580      	push	{r7, lr}
    a0be:	b084      	sub	sp, #16
    a0c0:	af00      	add	r7, sp, #0
    a0c2:	0002      	movs	r2, r0
    a0c4:	1dfb      	adds	r3, r7, #7
    a0c6:	701a      	strb	r2, [r3, #0]
    a0c8:	1dbb      	adds	r3, r7, #6
    a0ca:	1c0a      	adds	r2, r1, #0
    a0cc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    a0ce:	4b1a      	ldr	r3, [pc, #104]	; (a138 <sercom_set_gclk_generator+0x7c>)
    a0d0:	781b      	ldrb	r3, [r3, #0]
    a0d2:	2201      	movs	r2, #1
    a0d4:	4053      	eors	r3, r2
    a0d6:	b2db      	uxtb	r3, r3
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d103      	bne.n	a0e4 <sercom_set_gclk_generator+0x28>
    a0dc:	1dbb      	adds	r3, r7, #6
    a0de:	781b      	ldrb	r3, [r3, #0]
    a0e0:	2b00      	cmp	r3, #0
    a0e2:	d01b      	beq.n	a11c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a0e4:	230c      	movs	r3, #12
    a0e6:	18fb      	adds	r3, r7, r3
    a0e8:	0018      	movs	r0, r3
    a0ea:	4b14      	ldr	r3, [pc, #80]	; (a13c <sercom_set_gclk_generator+0x80>)
    a0ec:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    a0ee:	230c      	movs	r3, #12
    a0f0:	18fb      	adds	r3, r7, r3
    a0f2:	1dfa      	adds	r2, r7, #7
    a0f4:	7812      	ldrb	r2, [r2, #0]
    a0f6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    a0f8:	230c      	movs	r3, #12
    a0fa:	18fb      	adds	r3, r7, r3
    a0fc:	0019      	movs	r1, r3
    a0fe:	2013      	movs	r0, #19
    a100:	4b0f      	ldr	r3, [pc, #60]	; (a140 <sercom_set_gclk_generator+0x84>)
    a102:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    a104:	2013      	movs	r0, #19
    a106:	4b0f      	ldr	r3, [pc, #60]	; (a144 <sercom_set_gclk_generator+0x88>)
    a108:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    a10a:	4b0b      	ldr	r3, [pc, #44]	; (a138 <sercom_set_gclk_generator+0x7c>)
    a10c:	1dfa      	adds	r2, r7, #7
    a10e:	7812      	ldrb	r2, [r2, #0]
    a110:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    a112:	4b09      	ldr	r3, [pc, #36]	; (a138 <sercom_set_gclk_generator+0x7c>)
    a114:	2201      	movs	r2, #1
    a116:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    a118:	2300      	movs	r3, #0
    a11a:	e008      	b.n	a12e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    a11c:	4b06      	ldr	r3, [pc, #24]	; (a138 <sercom_set_gclk_generator+0x7c>)
    a11e:	785b      	ldrb	r3, [r3, #1]
    a120:	1dfa      	adds	r2, r7, #7
    a122:	7812      	ldrb	r2, [r2, #0]
    a124:	429a      	cmp	r2, r3
    a126:	d101      	bne.n	a12c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    a128:	2300      	movs	r3, #0
    a12a:	e000      	b.n	a12e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    a12c:	231d      	movs	r3, #29
}
    a12e:	0018      	movs	r0, r3
    a130:	46bd      	mov	sp, r7
    a132:	b004      	add	sp, #16
    a134:	bd80      	pop	{r7, pc}
    a136:	46c0      	nop			; (mov r8, r8)
    a138:	20000108 	.word	0x20000108
    a13c:	00009d5d 	.word	0x00009d5d
    a140:	0000c911 	.word	0x0000c911
    a144:	0000c955 	.word	0x0000c955

0000a148 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    a148:	b580      	push	{r7, lr}
    a14a:	b082      	sub	sp, #8
    a14c:	af00      	add	r7, sp, #0
    a14e:	6078      	str	r0, [r7, #4]
    a150:	000a      	movs	r2, r1
    a152:	1cfb      	adds	r3, r7, #3
    a154:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	4a4d      	ldr	r2, [pc, #308]	; (a290 <_sercom_get_default_pad+0x148>)
    a15a:	4293      	cmp	r3, r2
    a15c:	d03f      	beq.n	a1de <_sercom_get_default_pad+0x96>
    a15e:	4a4c      	ldr	r2, [pc, #304]	; (a290 <_sercom_get_default_pad+0x148>)
    a160:	4293      	cmp	r3, r2
    a162:	d806      	bhi.n	a172 <_sercom_get_default_pad+0x2a>
    a164:	4a4b      	ldr	r2, [pc, #300]	; (a294 <_sercom_get_default_pad+0x14c>)
    a166:	4293      	cmp	r3, r2
    a168:	d00f      	beq.n	a18a <_sercom_get_default_pad+0x42>
    a16a:	4a4b      	ldr	r2, [pc, #300]	; (a298 <_sercom_get_default_pad+0x150>)
    a16c:	4293      	cmp	r3, r2
    a16e:	d021      	beq.n	a1b4 <_sercom_get_default_pad+0x6c>
    a170:	e089      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a172:	4a4a      	ldr	r2, [pc, #296]	; (a29c <_sercom_get_default_pad+0x154>)
    a174:	4293      	cmp	r3, r2
    a176:	d100      	bne.n	a17a <_sercom_get_default_pad+0x32>
    a178:	e05b      	b.n	a232 <_sercom_get_default_pad+0xea>
    a17a:	4a49      	ldr	r2, [pc, #292]	; (a2a0 <_sercom_get_default_pad+0x158>)
    a17c:	4293      	cmp	r3, r2
    a17e:	d100      	bne.n	a182 <_sercom_get_default_pad+0x3a>
    a180:	e06c      	b.n	a25c <_sercom_get_default_pad+0x114>
    a182:	4a48      	ldr	r2, [pc, #288]	; (a2a4 <_sercom_get_default_pad+0x15c>)
    a184:	4293      	cmp	r3, r2
    a186:	d03f      	beq.n	a208 <_sercom_get_default_pad+0xc0>
    a188:	e07d      	b.n	a286 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    a18a:	1cfb      	adds	r3, r7, #3
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	2b01      	cmp	r3, #1
    a190:	d00a      	beq.n	a1a8 <_sercom_get_default_pad+0x60>
    a192:	dc02      	bgt.n	a19a <_sercom_get_default_pad+0x52>
    a194:	2b00      	cmp	r3, #0
    a196:	d005      	beq.n	a1a4 <_sercom_get_default_pad+0x5c>
    a198:	e075      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a19a:	2b02      	cmp	r3, #2
    a19c:	d006      	beq.n	a1ac <_sercom_get_default_pad+0x64>
    a19e:	2b03      	cmp	r3, #3
    a1a0:	d006      	beq.n	a1b0 <_sercom_get_default_pad+0x68>
    a1a2:	e070      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a1a4:	4b40      	ldr	r3, [pc, #256]	; (a2a8 <_sercom_get_default_pad+0x160>)
    a1a6:	e06f      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1a8:	4b40      	ldr	r3, [pc, #256]	; (a2ac <_sercom_get_default_pad+0x164>)
    a1aa:	e06d      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1ac:	4b40      	ldr	r3, [pc, #256]	; (a2b0 <_sercom_get_default_pad+0x168>)
    a1ae:	e06b      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1b0:	4b40      	ldr	r3, [pc, #256]	; (a2b4 <_sercom_get_default_pad+0x16c>)
    a1b2:	e069      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1b4:	1cfb      	adds	r3, r7, #3
    a1b6:	781b      	ldrb	r3, [r3, #0]
    a1b8:	2b01      	cmp	r3, #1
    a1ba:	d00a      	beq.n	a1d2 <_sercom_get_default_pad+0x8a>
    a1bc:	dc02      	bgt.n	a1c4 <_sercom_get_default_pad+0x7c>
    a1be:	2b00      	cmp	r3, #0
    a1c0:	d005      	beq.n	a1ce <_sercom_get_default_pad+0x86>
    a1c2:	e060      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a1c4:	2b02      	cmp	r3, #2
    a1c6:	d006      	beq.n	a1d6 <_sercom_get_default_pad+0x8e>
    a1c8:	2b03      	cmp	r3, #3
    a1ca:	d006      	beq.n	a1da <_sercom_get_default_pad+0x92>
    a1cc:	e05b      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a1ce:	2303      	movs	r3, #3
    a1d0:	e05a      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1d2:	4b39      	ldr	r3, [pc, #228]	; (a2b8 <_sercom_get_default_pad+0x170>)
    a1d4:	e058      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1d6:	4b39      	ldr	r3, [pc, #228]	; (a2bc <_sercom_get_default_pad+0x174>)
    a1d8:	e056      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1da:	4b39      	ldr	r3, [pc, #228]	; (a2c0 <_sercom_get_default_pad+0x178>)
    a1dc:	e054      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1de:	1cfb      	adds	r3, r7, #3
    a1e0:	781b      	ldrb	r3, [r3, #0]
    a1e2:	2b01      	cmp	r3, #1
    a1e4:	d00a      	beq.n	a1fc <_sercom_get_default_pad+0xb4>
    a1e6:	dc02      	bgt.n	a1ee <_sercom_get_default_pad+0xa6>
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d005      	beq.n	a1f8 <_sercom_get_default_pad+0xb0>
    a1ec:	e04b      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a1ee:	2b02      	cmp	r3, #2
    a1f0:	d006      	beq.n	a200 <_sercom_get_default_pad+0xb8>
    a1f2:	2b03      	cmp	r3, #3
    a1f4:	d006      	beq.n	a204 <_sercom_get_default_pad+0xbc>
    a1f6:	e046      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a1f8:	4b32      	ldr	r3, [pc, #200]	; (a2c4 <_sercom_get_default_pad+0x17c>)
    a1fa:	e045      	b.n	a288 <_sercom_get_default_pad+0x140>
    a1fc:	4b32      	ldr	r3, [pc, #200]	; (a2c8 <_sercom_get_default_pad+0x180>)
    a1fe:	e043      	b.n	a288 <_sercom_get_default_pad+0x140>
    a200:	4b32      	ldr	r3, [pc, #200]	; (a2cc <_sercom_get_default_pad+0x184>)
    a202:	e041      	b.n	a288 <_sercom_get_default_pad+0x140>
    a204:	4b32      	ldr	r3, [pc, #200]	; (a2d0 <_sercom_get_default_pad+0x188>)
    a206:	e03f      	b.n	a288 <_sercom_get_default_pad+0x140>
    a208:	1cfb      	adds	r3, r7, #3
    a20a:	781b      	ldrb	r3, [r3, #0]
    a20c:	2b01      	cmp	r3, #1
    a20e:	d00a      	beq.n	a226 <_sercom_get_default_pad+0xde>
    a210:	dc02      	bgt.n	a218 <_sercom_get_default_pad+0xd0>
    a212:	2b00      	cmp	r3, #0
    a214:	d005      	beq.n	a222 <_sercom_get_default_pad+0xda>
    a216:	e036      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a218:	2b02      	cmp	r3, #2
    a21a:	d006      	beq.n	a22a <_sercom_get_default_pad+0xe2>
    a21c:	2b03      	cmp	r3, #3
    a21e:	d006      	beq.n	a22e <_sercom_get_default_pad+0xe6>
    a220:	e031      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a222:	4b2c      	ldr	r3, [pc, #176]	; (a2d4 <_sercom_get_default_pad+0x18c>)
    a224:	e030      	b.n	a288 <_sercom_get_default_pad+0x140>
    a226:	4b2c      	ldr	r3, [pc, #176]	; (a2d8 <_sercom_get_default_pad+0x190>)
    a228:	e02e      	b.n	a288 <_sercom_get_default_pad+0x140>
    a22a:	4b2c      	ldr	r3, [pc, #176]	; (a2dc <_sercom_get_default_pad+0x194>)
    a22c:	e02c      	b.n	a288 <_sercom_get_default_pad+0x140>
    a22e:	4b2c      	ldr	r3, [pc, #176]	; (a2e0 <_sercom_get_default_pad+0x198>)
    a230:	e02a      	b.n	a288 <_sercom_get_default_pad+0x140>
    a232:	1cfb      	adds	r3, r7, #3
    a234:	781b      	ldrb	r3, [r3, #0]
    a236:	2b01      	cmp	r3, #1
    a238:	d00a      	beq.n	a250 <_sercom_get_default_pad+0x108>
    a23a:	dc02      	bgt.n	a242 <_sercom_get_default_pad+0xfa>
    a23c:	2b00      	cmp	r3, #0
    a23e:	d005      	beq.n	a24c <_sercom_get_default_pad+0x104>
    a240:	e021      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a242:	2b02      	cmp	r3, #2
    a244:	d006      	beq.n	a254 <_sercom_get_default_pad+0x10c>
    a246:	2b03      	cmp	r3, #3
    a248:	d006      	beq.n	a258 <_sercom_get_default_pad+0x110>
    a24a:	e01c      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a24c:	4b25      	ldr	r3, [pc, #148]	; (a2e4 <_sercom_get_default_pad+0x19c>)
    a24e:	e01b      	b.n	a288 <_sercom_get_default_pad+0x140>
    a250:	4b25      	ldr	r3, [pc, #148]	; (a2e8 <_sercom_get_default_pad+0x1a0>)
    a252:	e019      	b.n	a288 <_sercom_get_default_pad+0x140>
    a254:	4b25      	ldr	r3, [pc, #148]	; (a2ec <_sercom_get_default_pad+0x1a4>)
    a256:	e017      	b.n	a288 <_sercom_get_default_pad+0x140>
    a258:	4b25      	ldr	r3, [pc, #148]	; (a2f0 <_sercom_get_default_pad+0x1a8>)
    a25a:	e015      	b.n	a288 <_sercom_get_default_pad+0x140>
    a25c:	1cfb      	adds	r3, r7, #3
    a25e:	781b      	ldrb	r3, [r3, #0]
    a260:	2b01      	cmp	r3, #1
    a262:	d00a      	beq.n	a27a <_sercom_get_default_pad+0x132>
    a264:	dc02      	bgt.n	a26c <_sercom_get_default_pad+0x124>
    a266:	2b00      	cmp	r3, #0
    a268:	d005      	beq.n	a276 <_sercom_get_default_pad+0x12e>
    a26a:	e00c      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a26c:	2b02      	cmp	r3, #2
    a26e:	d006      	beq.n	a27e <_sercom_get_default_pad+0x136>
    a270:	2b03      	cmp	r3, #3
    a272:	d006      	beq.n	a282 <_sercom_get_default_pad+0x13a>
    a274:	e007      	b.n	a286 <_sercom_get_default_pad+0x13e>
    a276:	4b1f      	ldr	r3, [pc, #124]	; (a2f4 <_sercom_get_default_pad+0x1ac>)
    a278:	e006      	b.n	a288 <_sercom_get_default_pad+0x140>
    a27a:	4b1f      	ldr	r3, [pc, #124]	; (a2f8 <_sercom_get_default_pad+0x1b0>)
    a27c:	e004      	b.n	a288 <_sercom_get_default_pad+0x140>
    a27e:	4b1f      	ldr	r3, [pc, #124]	; (a2fc <_sercom_get_default_pad+0x1b4>)
    a280:	e002      	b.n	a288 <_sercom_get_default_pad+0x140>
    a282:	4b1f      	ldr	r3, [pc, #124]	; (a300 <_sercom_get_default_pad+0x1b8>)
    a284:	e000      	b.n	a288 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    a286:	2300      	movs	r3, #0
}
    a288:	0018      	movs	r0, r3
    a28a:	46bd      	mov	sp, r7
    a28c:	b002      	add	sp, #8
    a28e:	bd80      	pop	{r7, pc}
    a290:	42001000 	.word	0x42001000
    a294:	42000800 	.word	0x42000800
    a298:	42000c00 	.word	0x42000c00
    a29c:	42001800 	.word	0x42001800
    a2a0:	42001c00 	.word	0x42001c00
    a2a4:	42001400 	.word	0x42001400
    a2a8:	00040003 	.word	0x00040003
    a2ac:	00050003 	.word	0x00050003
    a2b0:	00060003 	.word	0x00060003
    a2b4:	00070003 	.word	0x00070003
    a2b8:	00010003 	.word	0x00010003
    a2bc:	001e0003 	.word	0x001e0003
    a2c0:	001f0003 	.word	0x001f0003
    a2c4:	00080003 	.word	0x00080003
    a2c8:	00090003 	.word	0x00090003
    a2cc:	000a0003 	.word	0x000a0003
    a2d0:	000b0003 	.word	0x000b0003
    a2d4:	00100003 	.word	0x00100003
    a2d8:	00110003 	.word	0x00110003
    a2dc:	00120003 	.word	0x00120003
    a2e0:	00130003 	.word	0x00130003
    a2e4:	000c0003 	.word	0x000c0003
    a2e8:	000d0003 	.word	0x000d0003
    a2ec:	000e0003 	.word	0x000e0003
    a2f0:	000f0003 	.word	0x000f0003
    a2f4:	00160003 	.word	0x00160003
    a2f8:	00170003 	.word	0x00170003
    a2fc:	00180003 	.word	0x00180003
    a300:	00190003 	.word	0x00190003

0000a304 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    a304:	b590      	push	{r4, r7, lr}
    a306:	b08b      	sub	sp, #44	; 0x2c
    a308:	af00      	add	r7, sp, #0
    a30a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    a30c:	230c      	movs	r3, #12
    a30e:	18fb      	adds	r3, r7, r3
    a310:	4a0f      	ldr	r2, [pc, #60]	; (a350 <_sercom_get_sercom_inst_index+0x4c>)
    a312:	ca13      	ldmia	r2!, {r0, r1, r4}
    a314:	c313      	stmia	r3!, {r0, r1, r4}
    a316:	ca13      	ldmia	r2!, {r0, r1, r4}
    a318:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a31a:	2300      	movs	r3, #0
    a31c:	627b      	str	r3, [r7, #36]	; 0x24
    a31e:	e00e      	b.n	a33e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    a320:	230c      	movs	r3, #12
    a322:	18fb      	adds	r3, r7, r3
    a324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a326:	0092      	lsls	r2, r2, #2
    a328:	58d3      	ldr	r3, [r2, r3]
    a32a:	1e1a      	subs	r2, r3, #0
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	429a      	cmp	r2, r3
    a330:	d102      	bne.n	a338 <_sercom_get_sercom_inst_index+0x34>
			return i;
    a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a334:	b2db      	uxtb	r3, r3
    a336:	e006      	b.n	a346 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a33a:	3301      	adds	r3, #1
    a33c:	627b      	str	r3, [r7, #36]	; 0x24
    a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a340:	2b05      	cmp	r3, #5
    a342:	d9ed      	bls.n	a320 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    a344:	2300      	movs	r3, #0
}
    a346:	0018      	movs	r0, r3
    a348:	46bd      	mov	sp, r7
    a34a:	b00b      	add	sp, #44	; 0x2c
    a34c:	bd90      	pop	{r4, r7, pc}
    a34e:	46c0      	nop			; (mov r8, r8)
    a350:	00013d18 	.word	0x00013d18

0000a354 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    a354:	b580      	push	{r7, lr}
    a356:	b082      	sub	sp, #8
    a358:	af00      	add	r7, sp, #0
    a35a:	0002      	movs	r2, r0
    a35c:	1dfb      	adds	r3, r7, #7
    a35e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    a360:	46c0      	nop			; (mov r8, r8)
    a362:	46bd      	mov	sp, r7
    a364:	b002      	add	sp, #8
    a366:	bd80      	pop	{r7, pc}

0000a368 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    a368:	b580      	push	{r7, lr}
    a36a:	b084      	sub	sp, #16
    a36c:	af00      	add	r7, sp, #0
    a36e:	0002      	movs	r2, r0
    a370:	6039      	str	r1, [r7, #0]
    a372:	1dfb      	adds	r3, r7, #7
    a374:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    a376:	4b13      	ldr	r3, [pc, #76]	; (a3c4 <_sercom_set_handler+0x5c>)
    a378:	781b      	ldrb	r3, [r3, #0]
    a37a:	2201      	movs	r2, #1
    a37c:	4053      	eors	r3, r2
    a37e:	b2db      	uxtb	r3, r3
    a380:	2b00      	cmp	r3, #0
    a382:	d015      	beq.n	a3b0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a384:	2300      	movs	r3, #0
    a386:	60fb      	str	r3, [r7, #12]
    a388:	e00c      	b.n	a3a4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    a38a:	4b0f      	ldr	r3, [pc, #60]	; (a3c8 <_sercom_set_handler+0x60>)
    a38c:	68fa      	ldr	r2, [r7, #12]
    a38e:	0092      	lsls	r2, r2, #2
    a390:	490e      	ldr	r1, [pc, #56]	; (a3cc <_sercom_set_handler+0x64>)
    a392:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    a394:	4b0e      	ldr	r3, [pc, #56]	; (a3d0 <_sercom_set_handler+0x68>)
    a396:	68fa      	ldr	r2, [r7, #12]
    a398:	0092      	lsls	r2, r2, #2
    a39a:	2100      	movs	r1, #0
    a39c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    a39e:	68fb      	ldr	r3, [r7, #12]
    a3a0:	3301      	adds	r3, #1
    a3a2:	60fb      	str	r3, [r7, #12]
    a3a4:	68fb      	ldr	r3, [r7, #12]
    a3a6:	2b05      	cmp	r3, #5
    a3a8:	d9ef      	bls.n	a38a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    a3aa:	4b06      	ldr	r3, [pc, #24]	; (a3c4 <_sercom_set_handler+0x5c>)
    a3ac:	2201      	movs	r2, #1
    a3ae:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    a3b0:	1dfb      	adds	r3, r7, #7
    a3b2:	781a      	ldrb	r2, [r3, #0]
    a3b4:	4b04      	ldr	r3, [pc, #16]	; (a3c8 <_sercom_set_handler+0x60>)
    a3b6:	0092      	lsls	r2, r2, #2
    a3b8:	6839      	ldr	r1, [r7, #0]
    a3ba:	50d1      	str	r1, [r2, r3]
}
    a3bc:	46c0      	nop			; (mov r8, r8)
    a3be:	46bd      	mov	sp, r7
    a3c0:	b004      	add	sp, #16
    a3c2:	bd80      	pop	{r7, pc}
    a3c4:	2000010a 	.word	0x2000010a
    a3c8:	2000010c 	.word	0x2000010c
    a3cc:	0000a355 	.word	0x0000a355
    a3d0:	20004790 	.word	0x20004790

0000a3d4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    a3d4:	b590      	push	{r4, r7, lr}
    a3d6:	b085      	sub	sp, #20
    a3d8:	af00      	add	r7, sp, #0
    a3da:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    a3dc:	2308      	movs	r3, #8
    a3de:	18fa      	adds	r2, r7, r3
    a3e0:	4b0c      	ldr	r3, [pc, #48]	; (a414 <_sercom_get_interrupt_vector+0x40>)
    a3e2:	0010      	movs	r0, r2
    a3e4:	0019      	movs	r1, r3
    a3e6:	2306      	movs	r3, #6
    a3e8:	001a      	movs	r2, r3
    a3ea:	4b0b      	ldr	r3, [pc, #44]	; (a418 <_sercom_get_interrupt_vector+0x44>)
    a3ec:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    a3ee:	230f      	movs	r3, #15
    a3f0:	18fc      	adds	r4, r7, r3
    a3f2:	687b      	ldr	r3, [r7, #4]
    a3f4:	0018      	movs	r0, r3
    a3f6:	4b09      	ldr	r3, [pc, #36]	; (a41c <_sercom_get_interrupt_vector+0x48>)
    a3f8:	4798      	blx	r3
    a3fa:	0003      	movs	r3, r0
    a3fc:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    a3fe:	230f      	movs	r3, #15
    a400:	18fb      	adds	r3, r7, r3
    a402:	781b      	ldrb	r3, [r3, #0]
    a404:	2208      	movs	r2, #8
    a406:	18ba      	adds	r2, r7, r2
    a408:	5cd3      	ldrb	r3, [r2, r3]
    a40a:	b25b      	sxtb	r3, r3
}
    a40c:	0018      	movs	r0, r3
    a40e:	46bd      	mov	sp, r7
    a410:	b005      	add	sp, #20
    a412:	bd90      	pop	{r4, r7, pc}
    a414:	00013d30 	.word	0x00013d30
    a418:	00010dd5 	.word	0x00010dd5
    a41c:	0000a305 	.word	0x0000a305

0000a420 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    a420:	b580      	push	{r7, lr}
    a422:	af00      	add	r7, sp, #0
    a424:	4b03      	ldr	r3, [pc, #12]	; (a434 <SERCOM0_Handler+0x14>)
    a426:	681b      	ldr	r3, [r3, #0]
    a428:	2000      	movs	r0, #0
    a42a:	4798      	blx	r3
    a42c:	46c0      	nop			; (mov r8, r8)
    a42e:	46bd      	mov	sp, r7
    a430:	bd80      	pop	{r7, pc}
    a432:	46c0      	nop			; (mov r8, r8)
    a434:	2000010c 	.word	0x2000010c

0000a438 <SERCOM1_Handler>:
    a438:	b580      	push	{r7, lr}
    a43a:	af00      	add	r7, sp, #0
    a43c:	4b03      	ldr	r3, [pc, #12]	; (a44c <SERCOM1_Handler+0x14>)
    a43e:	685b      	ldr	r3, [r3, #4]
    a440:	2001      	movs	r0, #1
    a442:	4798      	blx	r3
    a444:	46c0      	nop			; (mov r8, r8)
    a446:	46bd      	mov	sp, r7
    a448:	bd80      	pop	{r7, pc}
    a44a:	46c0      	nop			; (mov r8, r8)
    a44c:	2000010c 	.word	0x2000010c

0000a450 <SERCOM2_Handler>:
    a450:	b580      	push	{r7, lr}
    a452:	af00      	add	r7, sp, #0
    a454:	4b03      	ldr	r3, [pc, #12]	; (a464 <SERCOM2_Handler+0x14>)
    a456:	689b      	ldr	r3, [r3, #8]
    a458:	2002      	movs	r0, #2
    a45a:	4798      	blx	r3
    a45c:	46c0      	nop			; (mov r8, r8)
    a45e:	46bd      	mov	sp, r7
    a460:	bd80      	pop	{r7, pc}
    a462:	46c0      	nop			; (mov r8, r8)
    a464:	2000010c 	.word	0x2000010c

0000a468 <SERCOM3_Handler>:
    a468:	b580      	push	{r7, lr}
    a46a:	af00      	add	r7, sp, #0
    a46c:	4b03      	ldr	r3, [pc, #12]	; (a47c <SERCOM3_Handler+0x14>)
    a46e:	68db      	ldr	r3, [r3, #12]
    a470:	2003      	movs	r0, #3
    a472:	4798      	blx	r3
    a474:	46c0      	nop			; (mov r8, r8)
    a476:	46bd      	mov	sp, r7
    a478:	bd80      	pop	{r7, pc}
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	2000010c 	.word	0x2000010c

0000a480 <SERCOM4_Handler>:
    a480:	b580      	push	{r7, lr}
    a482:	af00      	add	r7, sp, #0
    a484:	4b03      	ldr	r3, [pc, #12]	; (a494 <SERCOM4_Handler+0x14>)
    a486:	691b      	ldr	r3, [r3, #16]
    a488:	2004      	movs	r0, #4
    a48a:	4798      	blx	r3
    a48c:	46c0      	nop			; (mov r8, r8)
    a48e:	46bd      	mov	sp, r7
    a490:	bd80      	pop	{r7, pc}
    a492:	46c0      	nop			; (mov r8, r8)
    a494:	2000010c 	.word	0x2000010c

0000a498 <SERCOM5_Handler>:
    a498:	b580      	push	{r7, lr}
    a49a:	af00      	add	r7, sp, #0
    a49c:	4b03      	ldr	r3, [pc, #12]	; (a4ac <SERCOM5_Handler+0x14>)
    a49e:	695b      	ldr	r3, [r3, #20]
    a4a0:	2005      	movs	r0, #5
    a4a2:	4798      	blx	r3
    a4a4:	46c0      	nop			; (mov r8, r8)
    a4a6:	46bd      	mov	sp, r7
    a4a8:	bd80      	pop	{r7, pc}
    a4aa:	46c0      	nop			; (mov r8, r8)
    a4ac:	2000010c 	.word	0x2000010c

0000a4b0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    a4b0:	b580      	push	{r7, lr}
    a4b2:	b082      	sub	sp, #8
    a4b4:	af00      	add	r7, sp, #0
    a4b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a4b8:	687b      	ldr	r3, [r7, #4]
    a4ba:	2280      	movs	r2, #128	; 0x80
    a4bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a4be:	687b      	ldr	r3, [r7, #4]
    a4c0:	2200      	movs	r2, #0
    a4c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a4c4:	687b      	ldr	r3, [r7, #4]
    a4c6:	2201      	movs	r2, #1
    a4c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a4ca:	687b      	ldr	r3, [r7, #4]
    a4cc:	2200      	movs	r2, #0
    a4ce:	70da      	strb	r2, [r3, #3]
}
    a4d0:	46c0      	nop			; (mov r8, r8)
    a4d2:	46bd      	mov	sp, r7
    a4d4:	b002      	add	sp, #8
    a4d6:	bd80      	pop	{r7, pc}

0000a4d8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a4d8:	b580      	push	{r7, lr}
    a4da:	b084      	sub	sp, #16
    a4dc:	af00      	add	r7, sp, #0
    a4de:	0002      	movs	r2, r0
    a4e0:	1dfb      	adds	r3, r7, #7
    a4e2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a4e4:	230f      	movs	r3, #15
    a4e6:	18fb      	adds	r3, r7, r3
    a4e8:	1dfa      	adds	r2, r7, #7
    a4ea:	7812      	ldrb	r2, [r2, #0]
    a4ec:	09d2      	lsrs	r2, r2, #7
    a4ee:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a4f0:	230e      	movs	r3, #14
    a4f2:	18fb      	adds	r3, r7, r3
    a4f4:	1dfa      	adds	r2, r7, #7
    a4f6:	7812      	ldrb	r2, [r2, #0]
    a4f8:	0952      	lsrs	r2, r2, #5
    a4fa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a4fc:	4b0d      	ldr	r3, [pc, #52]	; (a534 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a4fe:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a500:	230f      	movs	r3, #15
    a502:	18fb      	adds	r3, r7, r3
    a504:	781b      	ldrb	r3, [r3, #0]
    a506:	2b00      	cmp	r3, #0
    a508:	d10f      	bne.n	a52a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a50a:	230f      	movs	r3, #15
    a50c:	18fb      	adds	r3, r7, r3
    a50e:	781b      	ldrb	r3, [r3, #0]
    a510:	009b      	lsls	r3, r3, #2
    a512:	2210      	movs	r2, #16
    a514:	4694      	mov	ip, r2
    a516:	44bc      	add	ip, r7
    a518:	4463      	add	r3, ip
    a51a:	3b08      	subs	r3, #8
    a51c:	681a      	ldr	r2, [r3, #0]
    a51e:	230e      	movs	r3, #14
    a520:	18fb      	adds	r3, r7, r3
    a522:	781b      	ldrb	r3, [r3, #0]
    a524:	01db      	lsls	r3, r3, #7
    a526:	18d3      	adds	r3, r2, r3
    a528:	e000      	b.n	a52c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a52a:	2300      	movs	r3, #0
	}
}
    a52c:	0018      	movs	r0, r3
    a52e:	46bd      	mov	sp, r7
    a530:	b004      	add	sp, #16
    a532:	bd80      	pop	{r7, pc}
    a534:	41004400 	.word	0x41004400

0000a538 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a538:	b580      	push	{r7, lr}
    a53a:	b082      	sub	sp, #8
    a53c:	af00      	add	r7, sp, #0
    a53e:	0002      	movs	r2, r0
    a540:	1dfb      	adds	r3, r7, #7
    a542:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a544:	1dfb      	adds	r3, r7, #7
    a546:	781b      	ldrb	r3, [r3, #0]
    a548:	0018      	movs	r0, r3
    a54a:	4b03      	ldr	r3, [pc, #12]	; (a558 <port_get_group_from_gpio_pin+0x20>)
    a54c:	4798      	blx	r3
    a54e:	0003      	movs	r3, r0
}
    a550:	0018      	movs	r0, r3
    a552:	46bd      	mov	sp, r7
    a554:	b002      	add	sp, #8
    a556:	bd80      	pop	{r7, pc}
    a558:	0000a4d9 	.word	0x0000a4d9

0000a55c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    a55c:	b580      	push	{r7, lr}
    a55e:	b084      	sub	sp, #16
    a560:	af00      	add	r7, sp, #0
    a562:	0002      	movs	r2, r0
    a564:	1dfb      	adds	r3, r7, #7
    a566:	701a      	strb	r2, [r3, #0]
    a568:	1dbb      	adds	r3, r7, #6
    a56a:	1c0a      	adds	r2, r1, #0
    a56c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a56e:	1dfb      	adds	r3, r7, #7
    a570:	781b      	ldrb	r3, [r3, #0]
    a572:	0018      	movs	r0, r3
    a574:	4b0d      	ldr	r3, [pc, #52]	; (a5ac <port_pin_set_output_level+0x50>)
    a576:	4798      	blx	r3
    a578:	0003      	movs	r3, r0
    a57a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a57c:	1dfb      	adds	r3, r7, #7
    a57e:	781b      	ldrb	r3, [r3, #0]
    a580:	221f      	movs	r2, #31
    a582:	4013      	ands	r3, r2
    a584:	2201      	movs	r2, #1
    a586:	409a      	lsls	r2, r3
    a588:	0013      	movs	r3, r2
    a58a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    a58c:	1dbb      	adds	r3, r7, #6
    a58e:	781b      	ldrb	r3, [r3, #0]
    a590:	2b00      	cmp	r3, #0
    a592:	d003      	beq.n	a59c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    a594:	68fb      	ldr	r3, [r7, #12]
    a596:	68ba      	ldr	r2, [r7, #8]
    a598:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    a59a:	e002      	b.n	a5a2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    a59c:	68fb      	ldr	r3, [r7, #12]
    a59e:	68ba      	ldr	r2, [r7, #8]
    a5a0:	615a      	str	r2, [r3, #20]
	}
}
    a5a2:	46c0      	nop			; (mov r8, r8)
    a5a4:	46bd      	mov	sp, r7
    a5a6:	b004      	add	sp, #16
    a5a8:	bd80      	pop	{r7, pc}
    a5aa:	46c0      	nop			; (mov r8, r8)
    a5ac:	0000a539 	.word	0x0000a539

0000a5b0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b082      	sub	sp, #8
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	2200      	movs	r2, #0
    a5bc:	701a      	strb	r2, [r3, #0]
}
    a5be:	46c0      	nop			; (mov r8, r8)
    a5c0:	46bd      	mov	sp, r7
    a5c2:	b002      	add	sp, #8
    a5c4:	bd80      	pop	{r7, pc}
    a5c6:	46c0      	nop			; (mov r8, r8)

0000a5c8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a5c8:	b580      	push	{r7, lr}
    a5ca:	b082      	sub	sp, #8
    a5cc:	af00      	add	r7, sp, #0
    a5ce:	0002      	movs	r2, r0
    a5d0:	6039      	str	r1, [r7, #0]
    a5d2:	1dfb      	adds	r3, r7, #7
    a5d4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a5d6:	1dfb      	adds	r3, r7, #7
    a5d8:	781b      	ldrb	r3, [r3, #0]
    a5da:	2b01      	cmp	r3, #1
    a5dc:	d00a      	beq.n	a5f4 <system_apb_clock_set_mask+0x2c>
    a5de:	2b02      	cmp	r3, #2
    a5e0:	d00f      	beq.n	a602 <system_apb_clock_set_mask+0x3a>
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d114      	bne.n	a610 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a5e6:	4b0e      	ldr	r3, [pc, #56]	; (a620 <system_apb_clock_set_mask+0x58>)
    a5e8:	4a0d      	ldr	r2, [pc, #52]	; (a620 <system_apb_clock_set_mask+0x58>)
    a5ea:	6991      	ldr	r1, [r2, #24]
    a5ec:	683a      	ldr	r2, [r7, #0]
    a5ee:	430a      	orrs	r2, r1
    a5f0:	619a      	str	r2, [r3, #24]
			break;
    a5f2:	e00f      	b.n	a614 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a5f4:	4b0a      	ldr	r3, [pc, #40]	; (a620 <system_apb_clock_set_mask+0x58>)
    a5f6:	4a0a      	ldr	r2, [pc, #40]	; (a620 <system_apb_clock_set_mask+0x58>)
    a5f8:	69d1      	ldr	r1, [r2, #28]
    a5fa:	683a      	ldr	r2, [r7, #0]
    a5fc:	430a      	orrs	r2, r1
    a5fe:	61da      	str	r2, [r3, #28]
			break;
    a600:	e008      	b.n	a614 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a602:	4b07      	ldr	r3, [pc, #28]	; (a620 <system_apb_clock_set_mask+0x58>)
    a604:	4a06      	ldr	r2, [pc, #24]	; (a620 <system_apb_clock_set_mask+0x58>)
    a606:	6a11      	ldr	r1, [r2, #32]
    a608:	683a      	ldr	r2, [r7, #0]
    a60a:	430a      	orrs	r2, r1
    a60c:	621a      	str	r2, [r3, #32]
			break;
    a60e:	e001      	b.n	a614 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a610:	2317      	movs	r3, #23
    a612:	e000      	b.n	a616 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a614:	2300      	movs	r3, #0
}
    a616:	0018      	movs	r0, r3
    a618:	46bd      	mov	sp, r7
    a61a:	b002      	add	sp, #8
    a61c:	bd80      	pop	{r7, pc}
    a61e:	46c0      	nop			; (mov r8, r8)
    a620:	40000400 	.word	0x40000400

0000a624 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    a624:	b580      	push	{r7, lr}
    a626:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    a628:	4b05      	ldr	r3, [pc, #20]	; (a640 <system_is_debugger_present+0x1c>)
    a62a:	789b      	ldrb	r3, [r3, #2]
    a62c:	b2db      	uxtb	r3, r3
    a62e:	001a      	movs	r2, r3
    a630:	2302      	movs	r3, #2
    a632:	4013      	ands	r3, r2
    a634:	1e5a      	subs	r2, r3, #1
    a636:	4193      	sbcs	r3, r2
    a638:	b2db      	uxtb	r3, r3
}
    a63a:	0018      	movs	r0, r3
    a63c:	46bd      	mov	sp, r7
    a63e:	bd80      	pop	{r7, pc}
    a640:	41002000 	.word	0x41002000

0000a644 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    a644:	b580      	push	{r7, lr}
    a646:	b084      	sub	sp, #16
    a648:	af00      	add	r7, sp, #0
    a64a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	681b      	ldr	r3, [r3, #0]
    a650:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    a652:	68fb      	ldr	r3, [r7, #12]
    a654:	7e1b      	ldrb	r3, [r3, #24]
    a656:	b2db      	uxtb	r3, r3
    a658:	001a      	movs	r2, r3
    a65a:	2301      	movs	r3, #1
    a65c:	4013      	ands	r3, r2
    a65e:	1e5a      	subs	r2, r3, #1
    a660:	4193      	sbcs	r3, r2
    a662:	b2db      	uxtb	r3, r3
}
    a664:	0018      	movs	r0, r3
    a666:	46bd      	mov	sp, r7
    a668:	b004      	add	sp, #16
    a66a:	bd80      	pop	{r7, pc}

0000a66c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    a66c:	b580      	push	{r7, lr}
    a66e:	b084      	sub	sp, #16
    a670:	af00      	add	r7, sp, #0
    a672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a674:	687b      	ldr	r3, [r7, #4]
    a676:	681b      	ldr	r3, [r3, #0]
    a678:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    a67a:	68fb      	ldr	r3, [r7, #12]
    a67c:	7e1b      	ldrb	r3, [r3, #24]
    a67e:	b2db      	uxtb	r3, r3
    a680:	001a      	movs	r2, r3
    a682:	2304      	movs	r3, #4
    a684:	4013      	ands	r3, r2
    a686:	1e5a      	subs	r2, r3, #1
    a688:	4193      	sbcs	r3, r2
    a68a:	b2db      	uxtb	r3, r3
}
    a68c:	0018      	movs	r0, r3
    a68e:	46bd      	mov	sp, r7
    a690:	b004      	add	sp, #16
    a692:	bd80      	pop	{r7, pc}

0000a694 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    a694:	b580      	push	{r7, lr}
    a696:	b084      	sub	sp, #16
    a698:	af00      	add	r7, sp, #0
    a69a:	6078      	str	r0, [r7, #4]
    a69c:	000a      	movs	r2, r1
    a69e:	1cbb      	adds	r3, r7, #2
    a6a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a6a2:	687b      	ldr	r3, [r7, #4]
    a6a4:	681b      	ldr	r3, [r3, #0]
    a6a6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	0018      	movs	r0, r3
    a6ac:	4b0a      	ldr	r3, [pc, #40]	; (a6d8 <spi_write+0x44>)
    a6ae:	4798      	blx	r3
    a6b0:	0003      	movs	r3, r0
    a6b2:	001a      	movs	r2, r3
    a6b4:	2301      	movs	r3, #1
    a6b6:	4053      	eors	r3, r2
    a6b8:	b2db      	uxtb	r3, r3
    a6ba:	2b00      	cmp	r3, #0
    a6bc:	d001      	beq.n	a6c2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    a6be:	2305      	movs	r3, #5
    a6c0:	e006      	b.n	a6d0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    a6c2:	1cbb      	adds	r3, r7, #2
    a6c4:	881b      	ldrh	r3, [r3, #0]
    a6c6:	05db      	lsls	r3, r3, #23
    a6c8:	0dda      	lsrs	r2, r3, #23
    a6ca:	68fb      	ldr	r3, [r7, #12]
    a6cc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    a6ce:	2300      	movs	r3, #0
}
    a6d0:	0018      	movs	r0, r3
    a6d2:	46bd      	mov	sp, r7
    a6d4:	b004      	add	sp, #16
    a6d6:	bd80      	pop	{r7, pc}
    a6d8:	0000a645 	.word	0x0000a645

0000a6dc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    a6dc:	b580      	push	{r7, lr}
    a6de:	b084      	sub	sp, #16
    a6e0:	af00      	add	r7, sp, #0
    a6e2:	6078      	str	r0, [r7, #4]
    a6e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a6e6:	687b      	ldr	r3, [r7, #4]
    a6e8:	681b      	ldr	r3, [r3, #0]
    a6ea:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	0018      	movs	r0, r3
    a6f0:	4b1b      	ldr	r3, [pc, #108]	; (a760 <spi_read+0x84>)
    a6f2:	4798      	blx	r3
    a6f4:	0003      	movs	r3, r0
    a6f6:	001a      	movs	r2, r3
    a6f8:	2301      	movs	r3, #1
    a6fa:	4053      	eors	r3, r2
    a6fc:	b2db      	uxtb	r3, r3
    a6fe:	2b00      	cmp	r3, #0
    a700:	d001      	beq.n	a706 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    a702:	2310      	movs	r3, #16
    a704:	e027      	b.n	a756 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    a706:	230f      	movs	r3, #15
    a708:	18fb      	adds	r3, r7, r3
    a70a:	2200      	movs	r2, #0
    a70c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    a70e:	68bb      	ldr	r3, [r7, #8]
    a710:	8b5b      	ldrh	r3, [r3, #26]
    a712:	b29b      	uxth	r3, r3
    a714:	001a      	movs	r2, r3
    a716:	2304      	movs	r3, #4
    a718:	4013      	ands	r3, r2
    a71a:	d006      	beq.n	a72a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    a71c:	230f      	movs	r3, #15
    a71e:	18fb      	adds	r3, r7, r3
    a720:	221e      	movs	r2, #30
    a722:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    a724:	68bb      	ldr	r3, [r7, #8]
    a726:	2204      	movs	r2, #4
    a728:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    a72a:	687b      	ldr	r3, [r7, #4]
    a72c:	799b      	ldrb	r3, [r3, #6]
    a72e:	2b01      	cmp	r3, #1
    a730:	d108      	bne.n	a744 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    a732:	68bb      	ldr	r3, [r7, #8]
    a734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a736:	b29b      	uxth	r3, r3
    a738:	05db      	lsls	r3, r3, #23
    a73a:	0ddb      	lsrs	r3, r3, #23
    a73c:	b29a      	uxth	r2, r3
    a73e:	683b      	ldr	r3, [r7, #0]
    a740:	801a      	strh	r2, [r3, #0]
    a742:	e005      	b.n	a750 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    a744:	68bb      	ldr	r3, [r7, #8]
    a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a748:	b2db      	uxtb	r3, r3
    a74a:	b29a      	uxth	r2, r3
    a74c:	683b      	ldr	r3, [r7, #0]
    a74e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    a750:	230f      	movs	r3, #15
    a752:	18fb      	adds	r3, r7, r3
    a754:	781b      	ldrb	r3, [r3, #0]
}
    a756:	0018      	movs	r0, r3
    a758:	46bd      	mov	sp, r7
    a75a:	b004      	add	sp, #16
    a75c:	bd80      	pop	{r7, pc}
    a75e:	46c0      	nop			; (mov r8, r8)
    a760:	0000a66d 	.word	0x0000a66d

0000a764 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    a764:	b590      	push	{r4, r7, lr}
    a766:	b093      	sub	sp, #76	; 0x4c
    a768:	af00      	add	r7, sp, #0
    a76a:	6078      	str	r0, [r7, #4]
    a76c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a76e:	687b      	ldr	r3, [r7, #4]
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    a774:	687b      	ldr	r3, [r7, #4]
    a776:	681b      	ldr	r3, [r3, #0]
    a778:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    a77a:	231c      	movs	r3, #28
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	0018      	movs	r0, r3
    a780:	4b75      	ldr	r3, [pc, #468]	; (a958 <_spi_set_config+0x1f4>)
    a782:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a784:	231c      	movs	r3, #28
    a786:	18fb      	adds	r3, r7, r3
    a788:	2200      	movs	r2, #0
    a78a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    a78c:	683b      	ldr	r3, [r7, #0]
    a78e:	781b      	ldrb	r3, [r3, #0]
    a790:	2b00      	cmp	r3, #0
    a792:	d103      	bne.n	a79c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a794:	231c      	movs	r3, #28
    a796:	18fb      	adds	r3, r7, r3
    a798:	2200      	movs	r2, #0
    a79a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    a79c:	683b      	ldr	r3, [r7, #0]
    a79e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a7a0:	230c      	movs	r3, #12
    a7a2:	18fb      	adds	r3, r7, r3
    a7a4:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    a7a6:	683b      	ldr	r3, [r7, #0]
    a7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a7aa:	230c      	movs	r3, #12
    a7ac:	18fb      	adds	r3, r7, r3
    a7ae:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a7b0:	683b      	ldr	r3, [r7, #0]
    a7b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a7b4:	230c      	movs	r3, #12
    a7b6:	18fb      	adds	r3, r7, r3
    a7b8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    a7ba:	683b      	ldr	r3, [r7, #0]
    a7bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    a7be:	230c      	movs	r3, #12
    a7c0:	18fb      	adds	r3, r7, r3
    a7c2:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a7c4:	2347      	movs	r3, #71	; 0x47
    a7c6:	18fb      	adds	r3, r7, r3
    a7c8:	2200      	movs	r2, #0
    a7ca:	701a      	strb	r2, [r3, #0]
    a7cc:	e02c      	b.n	a828 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a7ce:	2347      	movs	r3, #71	; 0x47
    a7d0:	18fb      	adds	r3, r7, r3
    a7d2:	781a      	ldrb	r2, [r3, #0]
    a7d4:	230c      	movs	r3, #12
    a7d6:	18fb      	adds	r3, r7, r3
    a7d8:	0092      	lsls	r2, r2, #2
    a7da:	58d3      	ldr	r3, [r2, r3]
    a7dc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    a7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	d109      	bne.n	a7f8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a7e4:	2347      	movs	r3, #71	; 0x47
    a7e6:	18fb      	adds	r3, r7, r3
    a7e8:	781a      	ldrb	r2, [r3, #0]
    a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a7ec:	0011      	movs	r1, r2
    a7ee:	0018      	movs	r0, r3
    a7f0:	4b5a      	ldr	r3, [pc, #360]	; (a95c <_spi_set_config+0x1f8>)
    a7f2:	4798      	blx	r3
    a7f4:	0003      	movs	r3, r0
    a7f6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    a7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a7fa:	3301      	adds	r3, #1
    a7fc:	d00d      	beq.n	a81a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a7fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a800:	b2da      	uxtb	r2, r3
    a802:	231c      	movs	r3, #28
    a804:	18fb      	adds	r3, r7, r3
    a806:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    a80a:	0c1b      	lsrs	r3, r3, #16
    a80c:	b2db      	uxtb	r3, r3
    a80e:	221c      	movs	r2, #28
    a810:	18ba      	adds	r2, r7, r2
    a812:	0011      	movs	r1, r2
    a814:	0018      	movs	r0, r3
    a816:	4b52      	ldr	r3, [pc, #328]	; (a960 <_spi_set_config+0x1fc>)
    a818:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    a81a:	2347      	movs	r3, #71	; 0x47
    a81c:	18fb      	adds	r3, r7, r3
    a81e:	781a      	ldrb	r2, [r3, #0]
    a820:	2347      	movs	r3, #71	; 0x47
    a822:	18fb      	adds	r3, r7, r3
    a824:	3201      	adds	r2, #1
    a826:	701a      	strb	r2, [r3, #0]
    a828:	2347      	movs	r3, #71	; 0x47
    a82a:	18fb      	adds	r3, r7, r3
    a82c:	781b      	ldrb	r3, [r3, #0]
    a82e:	2b03      	cmp	r3, #3
    a830:	d9cd      	bls.n	a7ce <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    a832:	683b      	ldr	r3, [r7, #0]
    a834:	781a      	ldrb	r2, [r3, #0]
    a836:	687b      	ldr	r3, [r7, #4]
    a838:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    a83a:	683b      	ldr	r3, [r7, #0]
    a83c:	7c1a      	ldrb	r2, [r3, #16]
    a83e:	687b      	ldr	r3, [r7, #4]
    a840:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    a842:	683b      	ldr	r3, [r7, #0]
    a844:	7c9a      	ldrb	r2, [r3, #18]
    a846:	687b      	ldr	r3, [r7, #4]
    a848:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    a84a:	683b      	ldr	r3, [r7, #0]
    a84c:	7d1a      	ldrb	r2, [r3, #20]
    a84e:	687b      	ldr	r3, [r7, #4]
    a850:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    a852:	230a      	movs	r3, #10
    a854:	18fb      	adds	r3, r7, r3
    a856:	2200      	movs	r2, #0
    a858:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    a85a:	2300      	movs	r3, #0
    a85c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    a85e:	2300      	movs	r3, #0
    a860:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    a862:	683b      	ldr	r3, [r7, #0]
    a864:	781b      	ldrb	r3, [r3, #0]
    a866:	2b01      	cmp	r3, #1
    a868:	d129      	bne.n	a8be <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a86a:	687b      	ldr	r3, [r7, #4]
    a86c:	681b      	ldr	r3, [r3, #0]
    a86e:	0018      	movs	r0, r3
    a870:	4b3c      	ldr	r3, [pc, #240]	; (a964 <_spi_set_config+0x200>)
    a872:	4798      	blx	r3
    a874:	0003      	movs	r3, r0
    a876:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a87a:	3314      	adds	r3, #20
    a87c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a880:	b2db      	uxtb	r3, r3
    a882:	0018      	movs	r0, r3
    a884:	4b38      	ldr	r3, [pc, #224]	; (a968 <_spi_set_config+0x204>)
    a886:	4798      	blx	r3
    a888:	0003      	movs	r3, r0
    a88a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    a88c:	683b      	ldr	r3, [r7, #0]
    a88e:	699b      	ldr	r3, [r3, #24]
    a890:	2223      	movs	r2, #35	; 0x23
    a892:	18bc      	adds	r4, r7, r2
    a894:	220a      	movs	r2, #10
    a896:	18ba      	adds	r2, r7, r2
    a898:	6a79      	ldr	r1, [r7, #36]	; 0x24
    a89a:	0018      	movs	r0, r3
    a89c:	4b33      	ldr	r3, [pc, #204]	; (a96c <_spi_set_config+0x208>)
    a89e:	4798      	blx	r3
    a8a0:	0003      	movs	r3, r0
    a8a2:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    a8a4:	2323      	movs	r3, #35	; 0x23
    a8a6:	18fb      	adds	r3, r7, r3
    a8a8:	781b      	ldrb	r3, [r3, #0]
    a8aa:	2b00      	cmp	r3, #0
    a8ac:	d001      	beq.n	a8b2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    a8ae:	2317      	movs	r3, #23
    a8b0:	e04e      	b.n	a950 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    a8b2:	230a      	movs	r3, #10
    a8b4:	18fb      	adds	r3, r7, r3
    a8b6:	881b      	ldrh	r3, [r3, #0]
    a8b8:	b2da      	uxtb	r2, r3
    a8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a8bc:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    a8be:	683b      	ldr	r3, [r7, #0]
    a8c0:	685b      	ldr	r3, [r3, #4]
    a8c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a8c4:	4313      	orrs	r3, r2
    a8c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    a8c8:	683b      	ldr	r3, [r7, #0]
    a8ca:	689b      	ldr	r3, [r3, #8]
    a8cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a8ce:	4313      	orrs	r3, r2
    a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    a8d2:	683b      	ldr	r3, [r7, #0]
    a8d4:	68db      	ldr	r3, [r3, #12]
    a8d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a8d8:	4313      	orrs	r3, r2
    a8da:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    a8dc:	683b      	ldr	r3, [r7, #0]
    a8de:	7c1b      	ldrb	r3, [r3, #16]
    a8e0:	001a      	movs	r2, r3
    a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a8e4:	4313      	orrs	r3, r2
    a8e6:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    a8e8:	683b      	ldr	r3, [r7, #0]
    a8ea:	7c5b      	ldrb	r3, [r3, #17]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d103      	bne.n	a8f8 <_spi_set_config+0x194>
    a8f0:	4b1f      	ldr	r3, [pc, #124]	; (a970 <_spi_set_config+0x20c>)
    a8f2:	4798      	blx	r3
    a8f4:	1e03      	subs	r3, r0, #0
    a8f6:	d003      	beq.n	a900 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    a8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a8fa:	2280      	movs	r2, #128	; 0x80
    a8fc:	4313      	orrs	r3, r2
    a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    a900:	683b      	ldr	r3, [r7, #0]
    a902:	7c9b      	ldrb	r3, [r3, #18]
    a904:	2b00      	cmp	r3, #0
    a906:	d004      	beq.n	a912 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a90a:	2280      	movs	r2, #128	; 0x80
    a90c:	0292      	lsls	r2, r2, #10
    a90e:	4313      	orrs	r3, r2
    a910:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    a912:	683b      	ldr	r3, [r7, #0]
    a914:	7cdb      	ldrb	r3, [r3, #19]
    a916:	2b00      	cmp	r3, #0
    a918:	d004      	beq.n	a924 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a91c:	2280      	movs	r2, #128	; 0x80
    a91e:	0092      	lsls	r2, r2, #2
    a920:	4313      	orrs	r3, r2
    a922:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    a924:	683b      	ldr	r3, [r7, #0]
    a926:	7d1b      	ldrb	r3, [r3, #20]
    a928:	2b00      	cmp	r3, #0
    a92a:	d004      	beq.n	a936 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a92e:	2280      	movs	r2, #128	; 0x80
    a930:	0192      	lsls	r2, r2, #6
    a932:	4313      	orrs	r3, r2
    a934:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    a936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a938:	681a      	ldr	r2, [r3, #0]
    a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a93c:	431a      	orrs	r2, r3
    a93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a940:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a944:	685a      	ldr	r2, [r3, #4]
    a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    a948:	431a      	orrs	r2, r3
    a94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a94c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    a94e:	2300      	movs	r3, #0
}
    a950:	0018      	movs	r0, r3
    a952:	46bd      	mov	sp, r7
    a954:	b013      	add	sp, #76	; 0x4c
    a956:	bd90      	pop	{r4, r7, pc}
    a958:	0000a4b1 	.word	0x0000a4b1
    a95c:	0000a149 	.word	0x0000a149
    a960:	0000cbfd 	.word	0x0000cbfd
    a964:	0000a305 	.word	0x0000a305
    a968:	0000ca35 	.word	0x0000ca35
    a96c:	00009e55 	.word	0x00009e55
    a970:	0000a625 	.word	0x0000a625

0000a974 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    a974:	b590      	push	{r4, r7, lr}
    a976:	b08b      	sub	sp, #44	; 0x2c
    a978:	af00      	add	r7, sp, #0
    a97a:	60f8      	str	r0, [r7, #12]
    a97c:	60b9      	str	r1, [r7, #8]
    a97e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    a980:	68fb      	ldr	r3, [r7, #12]
    a982:	68ba      	ldr	r2, [r7, #8]
    a984:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    a986:	68fb      	ldr	r3, [r7, #12]
    a988:	681b      	ldr	r3, [r3, #0]
    a98a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    a98c:	6a3b      	ldr	r3, [r7, #32]
    a98e:	681b      	ldr	r3, [r3, #0]
    a990:	2202      	movs	r2, #2
    a992:	4013      	ands	r3, r2
    a994:	d001      	beq.n	a99a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    a996:	231c      	movs	r3, #28
    a998:	e09c      	b.n	aad4 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    a99a:	6a3b      	ldr	r3, [r7, #32]
    a99c:	681b      	ldr	r3, [r3, #0]
    a99e:	2201      	movs	r2, #1
    a9a0:	4013      	ands	r3, r2
    a9a2:	d001      	beq.n	a9a8 <spi_init+0x34>
		return STATUS_BUSY;
    a9a4:	2305      	movs	r3, #5
    a9a6:	e095      	b.n	aad4 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a9a8:	68fb      	ldr	r3, [r7, #12]
    a9aa:	681b      	ldr	r3, [r3, #0]
    a9ac:	0018      	movs	r0, r3
    a9ae:	4b4b      	ldr	r3, [pc, #300]	; (aadc <spi_init+0x168>)
    a9b0:	4798      	blx	r3
    a9b2:	0003      	movs	r3, r0
    a9b4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a9b6:	69fb      	ldr	r3, [r7, #28]
    a9b8:	3302      	adds	r3, #2
    a9ba:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a9bc:	69fb      	ldr	r3, [r7, #28]
    a9be:	3314      	adds	r3, #20
    a9c0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a9c2:	2201      	movs	r2, #1
    a9c4:	69bb      	ldr	r3, [r7, #24]
    a9c6:	409a      	lsls	r2, r3
    a9c8:	0013      	movs	r3, r2
    a9ca:	0019      	movs	r1, r3
    a9cc:	2002      	movs	r0, #2
    a9ce:	4b44      	ldr	r3, [pc, #272]	; (aae0 <spi_init+0x16c>)
    a9d0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    a9d2:	2310      	movs	r3, #16
    a9d4:	18fb      	adds	r3, r7, r3
    a9d6:	0018      	movs	r0, r3
    a9d8:	4b42      	ldr	r3, [pc, #264]	; (aae4 <spi_init+0x170>)
    a9da:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    a9dc:	687b      	ldr	r3, [r7, #4]
    a9de:	2224      	movs	r2, #36	; 0x24
    a9e0:	5c9a      	ldrb	r2, [r3, r2]
    a9e2:	2310      	movs	r3, #16
    a9e4:	18fb      	adds	r3, r7, r3
    a9e6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a9e8:	697b      	ldr	r3, [r7, #20]
    a9ea:	b2db      	uxtb	r3, r3
    a9ec:	2210      	movs	r2, #16
    a9ee:	18ba      	adds	r2, r7, r2
    a9f0:	0011      	movs	r1, r2
    a9f2:	0018      	movs	r0, r3
    a9f4:	4b3c      	ldr	r3, [pc, #240]	; (aae8 <spi_init+0x174>)
    a9f6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a9f8:	697b      	ldr	r3, [r7, #20]
    a9fa:	b2db      	uxtb	r3, r3
    a9fc:	0018      	movs	r0, r3
    a9fe:	4b3b      	ldr	r3, [pc, #236]	; (aaec <spi_init+0x178>)
    aa00:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    aa02:	687b      	ldr	r3, [r7, #4]
    aa04:	2224      	movs	r2, #36	; 0x24
    aa06:	5c9b      	ldrb	r3, [r3, r2]
    aa08:	2100      	movs	r1, #0
    aa0a:	0018      	movs	r0, r3
    aa0c:	4b38      	ldr	r3, [pc, #224]	; (aaf0 <spi_init+0x17c>)
    aa0e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    aa10:	687b      	ldr	r3, [r7, #4]
    aa12:	781b      	ldrb	r3, [r3, #0]
    aa14:	2b01      	cmp	r3, #1
    aa16:	d105      	bne.n	aa24 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    aa18:	6a3b      	ldr	r3, [r7, #32]
    aa1a:	681b      	ldr	r3, [r3, #0]
    aa1c:	220c      	movs	r2, #12
    aa1e:	431a      	orrs	r2, r3
    aa20:	6a3b      	ldr	r3, [r7, #32]
    aa22:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    aa24:	2327      	movs	r3, #39	; 0x27
    aa26:	18fb      	adds	r3, r7, r3
    aa28:	2200      	movs	r2, #0
    aa2a:	701a      	strb	r2, [r3, #0]
    aa2c:	e010      	b.n	aa50 <spi_init+0xdc>
		module->callback[i]        = NULL;
    aa2e:	2327      	movs	r3, #39	; 0x27
    aa30:	18fb      	adds	r3, r7, r3
    aa32:	781b      	ldrb	r3, [r3, #0]
    aa34:	68fa      	ldr	r2, [r7, #12]
    aa36:	3302      	adds	r3, #2
    aa38:	009b      	lsls	r3, r3, #2
    aa3a:	18d3      	adds	r3, r2, r3
    aa3c:	3304      	adds	r3, #4
    aa3e:	2200      	movs	r2, #0
    aa40:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    aa42:	2327      	movs	r3, #39	; 0x27
    aa44:	18fb      	adds	r3, r7, r3
    aa46:	781a      	ldrb	r2, [r3, #0]
    aa48:	2327      	movs	r3, #39	; 0x27
    aa4a:	18fb      	adds	r3, r7, r3
    aa4c:	3201      	adds	r2, #1
    aa4e:	701a      	strb	r2, [r3, #0]
    aa50:	2327      	movs	r3, #39	; 0x27
    aa52:	18fb      	adds	r3, r7, r3
    aa54:	781b      	ldrb	r3, [r3, #0]
    aa56:	2b06      	cmp	r3, #6
    aa58:	d9e9      	bls.n	aa2e <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    aa5a:	68fb      	ldr	r3, [r7, #12]
    aa5c:	2200      	movs	r2, #0
    aa5e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    aa60:	68fb      	ldr	r3, [r7, #12]
    aa62:	2200      	movs	r2, #0
    aa64:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    aa66:	68fb      	ldr	r3, [r7, #12]
    aa68:	2200      	movs	r2, #0
    aa6a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    aa6c:	68fb      	ldr	r3, [r7, #12]
    aa6e:	2200      	movs	r2, #0
    aa70:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    aa72:	68fb      	ldr	r3, [r7, #12]
    aa74:	2236      	movs	r2, #54	; 0x36
    aa76:	2100      	movs	r1, #0
    aa78:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    aa7a:	68fb      	ldr	r3, [r7, #12]
    aa7c:	2237      	movs	r2, #55	; 0x37
    aa7e:	2100      	movs	r1, #0
    aa80:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    aa82:	68fb      	ldr	r3, [r7, #12]
    aa84:	2238      	movs	r2, #56	; 0x38
    aa86:	2100      	movs	r1, #0
    aa88:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    aa8a:	68fb      	ldr	r3, [r7, #12]
    aa8c:	2203      	movs	r2, #3
    aa8e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    aa90:	68fb      	ldr	r3, [r7, #12]
    aa92:	2200      	movs	r2, #0
    aa94:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    aa96:	68fb      	ldr	r3, [r7, #12]
    aa98:	681b      	ldr	r3, [r3, #0]
    aa9a:	2213      	movs	r2, #19
    aa9c:	18bc      	adds	r4, r7, r2
    aa9e:	0018      	movs	r0, r3
    aaa0:	4b0e      	ldr	r3, [pc, #56]	; (aadc <spi_init+0x168>)
    aaa2:	4798      	blx	r3
    aaa4:	0003      	movs	r3, r0
    aaa6:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    aaa8:	4a12      	ldr	r2, [pc, #72]	; (aaf4 <spi_init+0x180>)
    aaaa:	2313      	movs	r3, #19
    aaac:	18fb      	adds	r3, r7, r3
    aaae:	781b      	ldrb	r3, [r3, #0]
    aab0:	0011      	movs	r1, r2
    aab2:	0018      	movs	r0, r3
    aab4:	4b10      	ldr	r3, [pc, #64]	; (aaf8 <spi_init+0x184>)
    aab6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    aab8:	2313      	movs	r3, #19
    aaba:	18fb      	adds	r3, r7, r3
    aabc:	781a      	ldrb	r2, [r3, #0]
    aabe:	4b0f      	ldr	r3, [pc, #60]	; (aafc <spi_init+0x188>)
    aac0:	0092      	lsls	r2, r2, #2
    aac2:	68f9      	ldr	r1, [r7, #12]
    aac4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    aac6:	687a      	ldr	r2, [r7, #4]
    aac8:	68fb      	ldr	r3, [r7, #12]
    aaca:	0011      	movs	r1, r2
    aacc:	0018      	movs	r0, r3
    aace:	4b0c      	ldr	r3, [pc, #48]	; (ab00 <spi_init+0x18c>)
    aad0:	4798      	blx	r3
    aad2:	0003      	movs	r3, r0
}
    aad4:	0018      	movs	r0, r3
    aad6:	46bd      	mov	sp, r7
    aad8:	b00b      	add	sp, #44	; 0x2c
    aada:	bd90      	pop	{r4, r7, pc}
    aadc:	0000a305 	.word	0x0000a305
    aae0:	0000a5c9 	.word	0x0000a5c9
    aae4:	0000a5b1 	.word	0x0000a5b1
    aae8:	0000c911 	.word	0x0000c911
    aaec:	0000c955 	.word	0x0000c955
    aaf0:	0000a0bd 	.word	0x0000a0bd
    aaf4:	0000ae81 	.word	0x0000ae81
    aaf8:	0000a369 	.word	0x0000a369
    aafc:	20004790 	.word	0x20004790
    ab00:	0000a765 	.word	0x0000a765

0000ab04 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    ab04:	b590      	push	{r4, r7, lr}
    ab06:	b087      	sub	sp, #28
    ab08:	af00      	add	r7, sp, #0
    ab0a:	60f8      	str	r0, [r7, #12]
    ab0c:	60b9      	str	r1, [r7, #8]
    ab0e:	0019      	movs	r1, r3
    ab10:	1dbb      	adds	r3, r7, #6
    ab12:	801a      	strh	r2, [r3, #0]
    ab14:	1d3b      	adds	r3, r7, #4
    ab16:	1c0a      	adds	r2, r1, #0
    ab18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ab1a:	68fb      	ldr	r3, [r7, #12]
    ab1c:	2238      	movs	r2, #56	; 0x38
    ab1e:	5c9b      	ldrb	r3, [r3, r2]
    ab20:	b2db      	uxtb	r3, r3
    ab22:	2b05      	cmp	r3, #5
    ab24:	d101      	bne.n	ab2a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    ab26:	2305      	movs	r3, #5
    ab28:	e07a      	b.n	ac20 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    ab2a:	1dbb      	adds	r3, r7, #6
    ab2c:	881b      	ldrh	r3, [r3, #0]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d101      	bne.n	ab36 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    ab32:	2317      	movs	r3, #23
    ab34:	e074      	b.n	ac20 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    ab36:	68fb      	ldr	r3, [r7, #12]
    ab38:	79db      	ldrb	r3, [r3, #7]
    ab3a:	2201      	movs	r2, #1
    ab3c:	4053      	eors	r3, r2
    ab3e:	b2db      	uxtb	r3, r3
    ab40:	2b00      	cmp	r3, #0
    ab42:	d001      	beq.n	ab48 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    ab44:	231c      	movs	r3, #28
    ab46:	e06b      	b.n	ac20 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    ab48:	2316      	movs	r3, #22
    ab4a:	18fb      	adds	r3, r7, r3
    ab4c:	2200      	movs	r2, #0
    ab4e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    ab50:	e05e      	b.n	ac10 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    ab52:	68fb      	ldr	r3, [r7, #12]
    ab54:	795b      	ldrb	r3, [r3, #5]
    ab56:	2b01      	cmp	r3, #1
    ab58:	d112      	bne.n	ab80 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    ab5a:	46c0      	nop			; (mov r8, r8)
    ab5c:	68fb      	ldr	r3, [r7, #12]
    ab5e:	0018      	movs	r0, r3
    ab60:	4b31      	ldr	r3, [pc, #196]	; (ac28 <spi_read_buffer_wait+0x124>)
    ab62:	4798      	blx	r3
    ab64:	0003      	movs	r3, r0
    ab66:	001a      	movs	r2, r3
    ab68:	2301      	movs	r3, #1
    ab6a:	4053      	eors	r3, r2
    ab6c:	b2db      	uxtb	r3, r3
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d1f4      	bne.n	ab5c <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    ab72:	1d3b      	adds	r3, r7, #4
    ab74:	881a      	ldrh	r2, [r3, #0]
    ab76:	68fb      	ldr	r3, [r7, #12]
    ab78:	0011      	movs	r1, r2
    ab7a:	0018      	movs	r0, r3
    ab7c:	4b2b      	ldr	r3, [pc, #172]	; (ac2c <spi_read_buffer_wait+0x128>)
    ab7e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    ab80:	46c0      	nop			; (mov r8, r8)
    ab82:	68fb      	ldr	r3, [r7, #12]
    ab84:	0018      	movs	r0, r3
    ab86:	4b2a      	ldr	r3, [pc, #168]	; (ac30 <spi_read_buffer_wait+0x12c>)
    ab88:	4798      	blx	r3
    ab8a:	0003      	movs	r3, r0
    ab8c:	001a      	movs	r2, r3
    ab8e:	2301      	movs	r3, #1
    ab90:	4053      	eors	r3, r2
    ab92:	b2db      	uxtb	r3, r3
    ab94:	2b00      	cmp	r3, #0
    ab96:	d1f4      	bne.n	ab82 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    ab98:	2312      	movs	r3, #18
    ab9a:	18fb      	adds	r3, r7, r3
    ab9c:	2200      	movs	r2, #0
    ab9e:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    aba0:	2315      	movs	r3, #21
    aba2:	18fc      	adds	r4, r7, r3
    aba4:	2312      	movs	r3, #18
    aba6:	18fa      	adds	r2, r7, r3
    aba8:	68fb      	ldr	r3, [r7, #12]
    abaa:	0011      	movs	r1, r2
    abac:	0018      	movs	r0, r3
    abae:	4b21      	ldr	r3, [pc, #132]	; (ac34 <spi_read_buffer_wait+0x130>)
    abb0:	4798      	blx	r3
    abb2:	0003      	movs	r3, r0
    abb4:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    abb6:	2315      	movs	r3, #21
    abb8:	18fb      	adds	r3, r7, r3
    abba:	781b      	ldrb	r3, [r3, #0]
    abbc:	2b00      	cmp	r3, #0
    abbe:	d003      	beq.n	abc8 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    abc0:	2315      	movs	r3, #21
    abc2:	18fb      	adds	r3, r7, r3
    abc4:	781b      	ldrb	r3, [r3, #0]
    abc6:	e02b      	b.n	ac20 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    abc8:	2316      	movs	r3, #22
    abca:	18fb      	adds	r3, r7, r3
    abcc:	881b      	ldrh	r3, [r3, #0]
    abce:	2216      	movs	r2, #22
    abd0:	18ba      	adds	r2, r7, r2
    abd2:	1c59      	adds	r1, r3, #1
    abd4:	8011      	strh	r1, [r2, #0]
    abd6:	001a      	movs	r2, r3
    abd8:	68bb      	ldr	r3, [r7, #8]
    abda:	189b      	adds	r3, r3, r2
    abdc:	2212      	movs	r2, #18
    abde:	18ba      	adds	r2, r7, r2
    abe0:	8812      	ldrh	r2, [r2, #0]
    abe2:	b2d2      	uxtb	r2, r2
    abe4:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    abe6:	68fb      	ldr	r3, [r7, #12]
    abe8:	799b      	ldrb	r3, [r3, #6]
    abea:	2b01      	cmp	r3, #1
    abec:	d110      	bne.n	ac10 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    abee:	2316      	movs	r3, #22
    abf0:	18fb      	adds	r3, r7, r3
    abf2:	881b      	ldrh	r3, [r3, #0]
    abf4:	2216      	movs	r2, #22
    abf6:	18ba      	adds	r2, r7, r2
    abf8:	1c59      	adds	r1, r3, #1
    abfa:	8011      	strh	r1, [r2, #0]
    abfc:	001a      	movs	r2, r3
    abfe:	68bb      	ldr	r3, [r7, #8]
    ac00:	189b      	adds	r3, r3, r2
    ac02:	2212      	movs	r2, #18
    ac04:	18ba      	adds	r2, r7, r2
    ac06:	8812      	ldrh	r2, [r2, #0]
    ac08:	0a12      	lsrs	r2, r2, #8
    ac0a:	b292      	uxth	r2, r2
    ac0c:	b2d2      	uxtb	r2, r2
    ac0e:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    ac10:	1dbb      	adds	r3, r7, #6
    ac12:	881b      	ldrh	r3, [r3, #0]
    ac14:	1dba      	adds	r2, r7, #6
    ac16:	1e59      	subs	r1, r3, #1
    ac18:	8011      	strh	r1, [r2, #0]
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d199      	bne.n	ab52 <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    ac1e:	2300      	movs	r3, #0
}
    ac20:	0018      	movs	r0, r3
    ac22:	46bd      	mov	sp, r7
    ac24:	b007      	add	sp, #28
    ac26:	bd90      	pop	{r4, r7, pc}
    ac28:	0000a645 	.word	0x0000a645
    ac2c:	0000a695 	.word	0x0000a695
    ac30:	0000a66d 	.word	0x0000a66d
    ac34:	0000a6dd 	.word	0x0000a6dd

0000ac38 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    ac38:	b580      	push	{r7, lr}
    ac3a:	b086      	sub	sp, #24
    ac3c:	af00      	add	r7, sp, #0
    ac3e:	60f8      	str	r0, [r7, #12]
    ac40:	60b9      	str	r1, [r7, #8]
    ac42:	1dfb      	adds	r3, r7, #7
    ac44:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    ac46:	68fb      	ldr	r3, [r7, #12]
    ac48:	795b      	ldrb	r3, [r3, #5]
    ac4a:	2b01      	cmp	r3, #1
    ac4c:	d001      	beq.n	ac52 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    ac4e:	2315      	movs	r3, #21
    ac50:	e05c      	b.n	ad0c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    ac52:	68fb      	ldr	r3, [r7, #12]
    ac54:	7a1b      	ldrb	r3, [r3, #8]
    ac56:	2201      	movs	r2, #1
    ac58:	4053      	eors	r3, r2
    ac5a:	b2db      	uxtb	r3, r3
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d054      	beq.n	ad0a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    ac60:	1dfb      	adds	r3, r7, #7
    ac62:	781b      	ldrb	r3, [r3, #0]
    ac64:	2b00      	cmp	r3, #0
    ac66:	d04a      	beq.n	acfe <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    ac68:	68bb      	ldr	r3, [r7, #8]
    ac6a:	785b      	ldrb	r3, [r3, #1]
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d03f      	beq.n	acf0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    ac70:	68fb      	ldr	r3, [r7, #12]
    ac72:	0018      	movs	r0, r3
    ac74:	4b27      	ldr	r3, [pc, #156]	; (ad14 <spi_select_slave+0xdc>)
    ac76:	4798      	blx	r3
    ac78:	0003      	movs	r3, r0
    ac7a:	001a      	movs	r2, r3
    ac7c:	2301      	movs	r3, #1
    ac7e:	4053      	eors	r3, r2
    ac80:	b2db      	uxtb	r3, r3
    ac82:	2b00      	cmp	r3, #0
    ac84:	d007      	beq.n	ac96 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    ac86:	68bb      	ldr	r3, [r7, #8]
    ac88:	781b      	ldrb	r3, [r3, #0]
    ac8a:	2101      	movs	r1, #1
    ac8c:	0018      	movs	r0, r3
    ac8e:	4b22      	ldr	r3, [pc, #136]	; (ad18 <spi_select_slave+0xe0>)
    ac90:	4798      	blx	r3
					return STATUS_BUSY;
    ac92:	2305      	movs	r3, #5
    ac94:	e03a      	b.n	ad0c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    ac96:	68bb      	ldr	r3, [r7, #8]
    ac98:	781b      	ldrb	r3, [r3, #0]
    ac9a:	2100      	movs	r1, #0
    ac9c:	0018      	movs	r0, r3
    ac9e:	4b1e      	ldr	r3, [pc, #120]	; (ad18 <spi_select_slave+0xe0>)
    aca0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    aca2:	68bb      	ldr	r3, [r7, #8]
    aca4:	789b      	ldrb	r3, [r3, #2]
    aca6:	b29a      	uxth	r2, r3
    aca8:	68fb      	ldr	r3, [r7, #12]
    acaa:	0011      	movs	r1, r2
    acac:	0018      	movs	r0, r3
    acae:	4b1b      	ldr	r3, [pc, #108]	; (ad1c <spi_select_slave+0xe4>)
    acb0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    acb2:	68fb      	ldr	r3, [r7, #12]
    acb4:	79db      	ldrb	r3, [r3, #7]
    acb6:	2201      	movs	r2, #1
    acb8:	4053      	eors	r3, r2
    acba:	b2db      	uxtb	r3, r3
    acbc:	2b00      	cmp	r3, #0
    acbe:	d024      	beq.n	ad0a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    acc0:	46c0      	nop			; (mov r8, r8)
    acc2:	68fb      	ldr	r3, [r7, #12]
    acc4:	0018      	movs	r0, r3
    acc6:	4b16      	ldr	r3, [pc, #88]	; (ad20 <spi_select_slave+0xe8>)
    acc8:	4798      	blx	r3
    acca:	0003      	movs	r3, r0
    accc:	001a      	movs	r2, r3
    acce:	2301      	movs	r3, #1
    acd0:	4053      	eors	r3, r2
    acd2:	b2db      	uxtb	r3, r3
    acd4:	2b00      	cmp	r3, #0
    acd6:	d1f4      	bne.n	acc2 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    acd8:	2316      	movs	r3, #22
    acda:	18fb      	adds	r3, r7, r3
    acdc:	2200      	movs	r2, #0
    acde:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    ace0:	2316      	movs	r3, #22
    ace2:	18fa      	adds	r2, r7, r3
    ace4:	68fb      	ldr	r3, [r7, #12]
    ace6:	0011      	movs	r1, r2
    ace8:	0018      	movs	r0, r3
    acea:	4b0e      	ldr	r3, [pc, #56]	; (ad24 <spi_select_slave+0xec>)
    acec:	4798      	blx	r3
    acee:	e00c      	b.n	ad0a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    acf0:	68bb      	ldr	r3, [r7, #8]
    acf2:	781b      	ldrb	r3, [r3, #0]
    acf4:	2100      	movs	r1, #0
    acf6:	0018      	movs	r0, r3
    acf8:	4b07      	ldr	r3, [pc, #28]	; (ad18 <spi_select_slave+0xe0>)
    acfa:	4798      	blx	r3
    acfc:	e005      	b.n	ad0a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    acfe:	68bb      	ldr	r3, [r7, #8]
    ad00:	781b      	ldrb	r3, [r3, #0]
    ad02:	2101      	movs	r1, #1
    ad04:	0018      	movs	r0, r3
    ad06:	4b04      	ldr	r3, [pc, #16]	; (ad18 <spi_select_slave+0xe0>)
    ad08:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    ad0a:	2300      	movs	r3, #0
}
    ad0c:	0018      	movs	r0, r3
    ad0e:	46bd      	mov	sp, r7
    ad10:	b006      	add	sp, #24
    ad12:	bd80      	pop	{r7, pc}
    ad14:	0000a645 	.word	0x0000a645
    ad18:	0000a55d 	.word	0x0000a55d
    ad1c:	0000a695 	.word	0x0000a695
    ad20:	0000a66d 	.word	0x0000a66d
    ad24:	0000a6dd 	.word	0x0000a6dd

0000ad28 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b084      	sub	sp, #16
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ad30:	687b      	ldr	r3, [r7, #4]
    ad32:	681b      	ldr	r3, [r3, #0]
    ad34:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    ad36:	687b      	ldr	r3, [r7, #4]
    ad38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad3a:	781b      	ldrb	r3, [r3, #0]
    ad3c:	b2da      	uxtb	r2, r3
    ad3e:	230e      	movs	r3, #14
    ad40:	18fb      	adds	r3, r7, r3
    ad42:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    ad44:	687b      	ldr	r3, [r7, #4]
    ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad48:	1c5a      	adds	r2, r3, #1
    ad4a:	687b      	ldr	r3, [r7, #4]
    ad4c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	799b      	ldrb	r3, [r3, #6]
    ad52:	2b01      	cmp	r3, #1
    ad54:	d113      	bne.n	ad7e <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    ad56:	687b      	ldr	r3, [r7, #4]
    ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad5a:	781b      	ldrb	r3, [r3, #0]
    ad5c:	b2db      	uxtb	r3, r3
    ad5e:	021b      	lsls	r3, r3, #8
    ad60:	b21a      	sxth	r2, r3
    ad62:	230e      	movs	r3, #14
    ad64:	18fb      	adds	r3, r7, r3
    ad66:	2100      	movs	r1, #0
    ad68:	5e5b      	ldrsh	r3, [r3, r1]
    ad6a:	4313      	orrs	r3, r2
    ad6c:	b21a      	sxth	r2, r3
    ad6e:	230e      	movs	r3, #14
    ad70:	18fb      	adds	r3, r7, r3
    ad72:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    ad74:	687b      	ldr	r3, [r7, #4]
    ad76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad78:	1c5a      	adds	r2, r3, #1
    ad7a:	687b      	ldr	r3, [r7, #4]
    ad7c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    ad7e:	230e      	movs	r3, #14
    ad80:	18fb      	adds	r3, r7, r3
    ad82:	881b      	ldrh	r3, [r3, #0]
    ad84:	05db      	lsls	r3, r3, #23
    ad86:	0dda      	lsrs	r2, r3, #23
    ad88:	68bb      	ldr	r3, [r7, #8]
    ad8a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    ad8c:	687b      	ldr	r3, [r7, #4]
    ad8e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    ad90:	b29b      	uxth	r3, r3
    ad92:	3b01      	subs	r3, #1
    ad94:	b29a      	uxth	r2, r3
    ad96:	687b      	ldr	r3, [r7, #4]
    ad98:	869a      	strh	r2, [r3, #52]	; 0x34
}
    ad9a:	46c0      	nop			; (mov r8, r8)
    ad9c:	46bd      	mov	sp, r7
    ad9e:	b004      	add	sp, #16
    ada0:	bd80      	pop	{r7, pc}
    ada2:	46c0      	nop			; (mov r8, r8)

0000ada4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    ada4:	b580      	push	{r7, lr}
    ada6:	b084      	sub	sp, #16
    ada8:	af00      	add	r7, sp, #0
    adaa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    adac:	687b      	ldr	r3, [r7, #4]
    adae:	681b      	ldr	r3, [r3, #0]
    adb0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    adb2:	4b08      	ldr	r3, [pc, #32]	; (add4 <_spi_write_dummy+0x30>)
    adb4:	881b      	ldrh	r3, [r3, #0]
    adb6:	001a      	movs	r2, r3
    adb8:	68fb      	ldr	r3, [r7, #12]
    adba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    adbc:	687b      	ldr	r3, [r7, #4]
    adbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    adc0:	b29b      	uxth	r3, r3
    adc2:	3b01      	subs	r3, #1
    adc4:	b29a      	uxth	r2, r3
    adc6:	687b      	ldr	r3, [r7, #4]
    adc8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    adca:	46c0      	nop			; (mov r8, r8)
    adcc:	46bd      	mov	sp, r7
    adce:	b004      	add	sp, #16
    add0:	bd80      	pop	{r7, pc}
    add2:	46c0      	nop			; (mov r8, r8)
    add4:	200047a8 	.word	0x200047a8

0000add8 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    add8:	b580      	push	{r7, lr}
    adda:	b084      	sub	sp, #16
    addc:	af00      	add	r7, sp, #0
    adde:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	681b      	ldr	r3, [r3, #0]
    ade4:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    ade6:	230a      	movs	r3, #10
    ade8:	18fb      	adds	r3, r7, r3
    adea:	2200      	movs	r2, #0
    adec:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    adee:	68fb      	ldr	r3, [r7, #12]
    adf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    adf2:	230a      	movs	r3, #10
    adf4:	18fb      	adds	r3, r7, r3
    adf6:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    adf8:	687b      	ldr	r3, [r7, #4]
    adfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    adfc:	b29b      	uxth	r3, r3
    adfe:	3b01      	subs	r3, #1
    ae00:	b29a      	uxth	r2, r3
    ae02:	687b      	ldr	r3, [r7, #4]
    ae04:	865a      	strh	r2, [r3, #50]	; 0x32
}
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	46bd      	mov	sp, r7
    ae0a:	b004      	add	sp, #16
    ae0c:	bd80      	pop	{r7, pc}
    ae0e:	46c0      	nop			; (mov r8, r8)

0000ae10 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    ae10:	b580      	push	{r7, lr}
    ae12:	b084      	sub	sp, #16
    ae14:	af00      	add	r7, sp, #0
    ae16:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ae18:	687b      	ldr	r3, [r7, #4]
    ae1a:	681b      	ldr	r3, [r3, #0]
    ae1c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    ae1e:	68fb      	ldr	r3, [r7, #12]
    ae20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae22:	b29a      	uxth	r2, r3
    ae24:	230a      	movs	r3, #10
    ae26:	18fb      	adds	r3, r7, r3
    ae28:	05d2      	lsls	r2, r2, #23
    ae2a:	0dd2      	lsrs	r2, r2, #23
    ae2c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    ae2e:	687b      	ldr	r3, [r7, #4]
    ae30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae32:	220a      	movs	r2, #10
    ae34:	18ba      	adds	r2, r7, r2
    ae36:	8812      	ldrh	r2, [r2, #0]
    ae38:	b2d2      	uxtb	r2, r2
    ae3a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    ae3c:	687b      	ldr	r3, [r7, #4]
    ae3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae40:	1c5a      	adds	r2, r3, #1
    ae42:	687b      	ldr	r3, [r7, #4]
    ae44:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ae46:	687b      	ldr	r3, [r7, #4]
    ae48:	799b      	ldrb	r3, [r3, #6]
    ae4a:	2b01      	cmp	r3, #1
    ae4c:	d10d      	bne.n	ae6a <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    ae4e:	687b      	ldr	r3, [r7, #4]
    ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae52:	220a      	movs	r2, #10
    ae54:	18ba      	adds	r2, r7, r2
    ae56:	8812      	ldrh	r2, [r2, #0]
    ae58:	0a12      	lsrs	r2, r2, #8
    ae5a:	b292      	uxth	r2, r2
    ae5c:	b2d2      	uxtb	r2, r2
    ae5e:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    ae60:	687b      	ldr	r3, [r7, #4]
    ae62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae64:	1c5a      	adds	r2, r3, #1
    ae66:	687b      	ldr	r3, [r7, #4]
    ae68:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    ae6a:	687b      	ldr	r3, [r7, #4]
    ae6c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    ae6e:	b29b      	uxth	r3, r3
    ae70:	3b01      	subs	r3, #1
    ae72:	b29a      	uxth	r2, r3
    ae74:	687b      	ldr	r3, [r7, #4]
    ae76:	861a      	strh	r2, [r3, #48]	; 0x30
}
    ae78:	46c0      	nop			; (mov r8, r8)
    ae7a:	46bd      	mov	sp, r7
    ae7c:	b004      	add	sp, #16
    ae7e:	bd80      	pop	{r7, pc}

0000ae80 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    ae80:	b580      	push	{r7, lr}
    ae82:	b086      	sub	sp, #24
    ae84:	af00      	add	r7, sp, #0
    ae86:	0002      	movs	r2, r0
    ae88:	1dfb      	adds	r3, r7, #7
    ae8a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    ae8c:	1dfb      	adds	r3, r7, #7
    ae8e:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    ae90:	4b96      	ldr	r3, [pc, #600]	; (b0ec <_spi_interrupt_handler+0x26c>)
    ae92:	0092      	lsls	r2, r2, #2
    ae94:	58d3      	ldr	r3, [r2, r3]
    ae96:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    ae98:	697b      	ldr	r3, [r7, #20]
    ae9a:	681b      	ldr	r3, [r3, #0]
    ae9c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    ae9e:	697b      	ldr	r3, [r7, #20]
    aea0:	2237      	movs	r2, #55	; 0x37
    aea2:	5c9a      	ldrb	r2, [r3, r2]
    aea4:	697b      	ldr	r3, [r7, #20]
    aea6:	2136      	movs	r1, #54	; 0x36
    aea8:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    aeaa:	230f      	movs	r3, #15
    aeac:	18fb      	adds	r3, r7, r3
    aeae:	400a      	ands	r2, r1
    aeb0:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    aeb2:	693b      	ldr	r3, [r7, #16]
    aeb4:	7e1b      	ldrb	r3, [r3, #24]
    aeb6:	b2da      	uxtb	r2, r3
    aeb8:	230c      	movs	r3, #12
    aeba:	18fb      	adds	r3, r7, r3
    aebc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    aebe:	693b      	ldr	r3, [r7, #16]
    aec0:	7d9b      	ldrb	r3, [r3, #22]
    aec2:	b2db      	uxtb	r3, r3
    aec4:	b29a      	uxth	r2, r3
    aec6:	230c      	movs	r3, #12
    aec8:	18fb      	adds	r3, r7, r3
    aeca:	210c      	movs	r1, #12
    aecc:	1879      	adds	r1, r7, r1
    aece:	8809      	ldrh	r1, [r1, #0]
    aed0:	400a      	ands	r2, r1
    aed2:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    aed4:	230c      	movs	r3, #12
    aed6:	18fb      	adds	r3, r7, r3
    aed8:	881b      	ldrh	r3, [r3, #0]
    aeda:	2201      	movs	r2, #1
    aedc:	4013      	ands	r3, r2
    aede:	d038      	beq.n	af52 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    aee0:	697b      	ldr	r3, [r7, #20]
    aee2:	795b      	ldrb	r3, [r3, #5]
    aee4:	2b01      	cmp	r3, #1
    aee6:	d110      	bne.n	af0a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    aee8:	697b      	ldr	r3, [r7, #20]
    aeea:	7a5b      	ldrb	r3, [r3, #9]
    aeec:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    aeee:	2b00      	cmp	r3, #0
    aef0:	d10b      	bne.n	af0a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    aef2:	697b      	ldr	r3, [r7, #20]
    aef4:	0018      	movs	r0, r3
    aef6:	4b7e      	ldr	r3, [pc, #504]	; (b0f0 <_spi_interrupt_handler+0x270>)
    aef8:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    aefa:	697b      	ldr	r3, [r7, #20]
    aefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    aefe:	b29b      	uxth	r3, r3
    af00:	2b00      	cmp	r3, #0
    af02:	d102      	bne.n	af0a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    af04:	693b      	ldr	r3, [r7, #16]
    af06:	2201      	movs	r2, #1
    af08:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    af0a:	697b      	ldr	r3, [r7, #20]
    af0c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    af0e:	2b01      	cmp	r3, #1
    af10:	d11f      	bne.n	af52 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    af12:	697b      	ldr	r3, [r7, #20]
    af14:	7a5b      	ldrb	r3, [r3, #9]
    af16:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    af18:	2b00      	cmp	r3, #0
    af1a:	d01a      	beq.n	af52 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    af1c:	697b      	ldr	r3, [r7, #20]
    af1e:	0018      	movs	r0, r3
    af20:	4b74      	ldr	r3, [pc, #464]	; (b0f4 <_spi_interrupt_handler+0x274>)
    af22:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    af24:	697b      	ldr	r3, [r7, #20]
    af26:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    af28:	b29b      	uxth	r3, r3
    af2a:	2b00      	cmp	r3, #0
    af2c:	d111      	bne.n	af52 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    af2e:	693b      	ldr	r3, [r7, #16]
    af30:	2201      	movs	r2, #1
    af32:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    af34:	697b      	ldr	r3, [r7, #20]
    af36:	7a5b      	ldrb	r3, [r3, #9]
    af38:	b2db      	uxtb	r3, r3
    af3a:	2b01      	cmp	r3, #1
    af3c:	d109      	bne.n	af52 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    af3e:	697b      	ldr	r3, [r7, #20]
    af40:	79db      	ldrb	r3, [r3, #7]
    af42:	2201      	movs	r2, #1
    af44:	4053      	eors	r3, r2
    af46:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    af48:	2b00      	cmp	r3, #0
    af4a:	d002      	beq.n	af52 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    af4c:	693b      	ldr	r3, [r7, #16]
    af4e:	2202      	movs	r2, #2
    af50:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    af52:	230c      	movs	r3, #12
    af54:	18fb      	adds	r3, r7, r3
    af56:	881b      	ldrh	r3, [r3, #0]
    af58:	2204      	movs	r2, #4
    af5a:	4013      	ands	r3, r2
    af5c:	d100      	bne.n	af60 <_spi_interrupt_handler+0xe0>
    af5e:	e07e      	b.n	b05e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    af60:	693b      	ldr	r3, [r7, #16]
    af62:	8b5b      	ldrh	r3, [r3, #26]
    af64:	b29b      	uxth	r3, r3
    af66:	001a      	movs	r2, r3
    af68:	2304      	movs	r3, #4
    af6a:	4013      	ands	r3, r2
    af6c:	d022      	beq.n	afb4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    af6e:	697b      	ldr	r3, [r7, #20]
    af70:	7a5b      	ldrb	r3, [r3, #9]
    af72:	b2db      	uxtb	r3, r3
    af74:	2b01      	cmp	r3, #1
    af76:	d014      	beq.n	afa2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    af78:	697b      	ldr	r3, [r7, #20]
    af7a:	2238      	movs	r2, #56	; 0x38
    af7c:	211e      	movs	r1, #30
    af7e:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    af80:	697b      	ldr	r3, [r7, #20]
    af82:	2203      	movs	r2, #3
    af84:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    af86:	693b      	ldr	r3, [r7, #16]
    af88:	2205      	movs	r2, #5
    af8a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    af8c:	230f      	movs	r3, #15
    af8e:	18fb      	adds	r3, r7, r3
    af90:	781b      	ldrb	r3, [r3, #0]
    af92:	2208      	movs	r2, #8
    af94:	4013      	ands	r3, r2
    af96:	d004      	beq.n	afa2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    af98:	697b      	ldr	r3, [r7, #20]
    af9a:	699b      	ldr	r3, [r3, #24]
    af9c:	697a      	ldr	r2, [r7, #20]
    af9e:	0010      	movs	r0, r2
    afa0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    afa2:	693b      	ldr	r3, [r7, #16]
    afa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    afa6:	230a      	movs	r3, #10
    afa8:	18fb      	adds	r3, r7, r3
    afaa:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    afac:	693b      	ldr	r3, [r7, #16]
    afae:	2204      	movs	r2, #4
    afb0:	835a      	strh	r2, [r3, #26]
    afb2:	e054      	b.n	b05e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    afb4:	697b      	ldr	r3, [r7, #20]
    afb6:	7a5b      	ldrb	r3, [r3, #9]
    afb8:	b2db      	uxtb	r3, r3
    afba:	2b01      	cmp	r3, #1
    afbc:	d11e      	bne.n	affc <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    afbe:	697b      	ldr	r3, [r7, #20]
    afc0:	0018      	movs	r0, r3
    afc2:	4b4d      	ldr	r3, [pc, #308]	; (b0f8 <_spi_interrupt_handler+0x278>)
    afc4:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    afc6:	697b      	ldr	r3, [r7, #20]
    afc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    afca:	b29b      	uxth	r3, r3
    afcc:	2b00      	cmp	r3, #0
    afce:	d146      	bne.n	b05e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    afd0:	693b      	ldr	r3, [r7, #16]
    afd2:	2204      	movs	r2, #4
    afd4:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    afd6:	697b      	ldr	r3, [r7, #20]
    afd8:	2238      	movs	r2, #56	; 0x38
    afda:	2100      	movs	r1, #0
    afdc:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    afde:	697b      	ldr	r3, [r7, #20]
    afe0:	2203      	movs	r2, #3
    afe2:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    afe4:	230f      	movs	r3, #15
    afe6:	18fb      	adds	r3, r7, r3
    afe8:	781b      	ldrb	r3, [r3, #0]
    afea:	2201      	movs	r2, #1
    afec:	4013      	ands	r3, r2
    afee:	d036      	beq.n	b05e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    aff0:	697b      	ldr	r3, [r7, #20]
    aff2:	68db      	ldr	r3, [r3, #12]
    aff4:	697a      	ldr	r2, [r7, #20]
    aff6:	0010      	movs	r0, r2
    aff8:	4798      	blx	r3
    affa:	e030      	b.n	b05e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    affc:	697b      	ldr	r3, [r7, #20]
    affe:	0018      	movs	r0, r3
    b000:	4b3e      	ldr	r3, [pc, #248]	; (b0fc <_spi_interrupt_handler+0x27c>)
    b002:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    b004:	697b      	ldr	r3, [r7, #20]
    b006:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    b008:	b29b      	uxth	r3, r3
    b00a:	2b00      	cmp	r3, #0
    b00c:	d127      	bne.n	b05e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    b00e:	697b      	ldr	r3, [r7, #20]
    b010:	2238      	movs	r2, #56	; 0x38
    b012:	2100      	movs	r1, #0
    b014:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    b016:	693b      	ldr	r3, [r7, #16]
    b018:	2204      	movs	r2, #4
    b01a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    b01c:	697b      	ldr	r3, [r7, #20]
    b01e:	7a5b      	ldrb	r3, [r3, #9]
    b020:	b2db      	uxtb	r3, r3
    b022:	2b02      	cmp	r3, #2
    b024:	d10b      	bne.n	b03e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    b026:	230f      	movs	r3, #15
    b028:	18fb      	adds	r3, r7, r3
    b02a:	781b      	ldrb	r3, [r3, #0]
    b02c:	2204      	movs	r2, #4
    b02e:	4013      	ands	r3, r2
    b030:	d015      	beq.n	b05e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    b032:	697b      	ldr	r3, [r7, #20]
    b034:	695b      	ldr	r3, [r3, #20]
    b036:	697a      	ldr	r2, [r7, #20]
    b038:	0010      	movs	r0, r2
    b03a:	4798      	blx	r3
    b03c:	e00f      	b.n	b05e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    b03e:	697b      	ldr	r3, [r7, #20]
    b040:	7a5b      	ldrb	r3, [r3, #9]
    b042:	b2db      	uxtb	r3, r3
    b044:	2b00      	cmp	r3, #0
    b046:	d10a      	bne.n	b05e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    b048:	230f      	movs	r3, #15
    b04a:	18fb      	adds	r3, r7, r3
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	2202      	movs	r2, #2
    b050:	4013      	ands	r3, r2
    b052:	d004      	beq.n	b05e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    b054:	697b      	ldr	r3, [r7, #20]
    b056:	691b      	ldr	r3, [r3, #16]
    b058:	697a      	ldr	r2, [r7, #20]
    b05a:	0010      	movs	r0, r2
    b05c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    b05e:	230c      	movs	r3, #12
    b060:	18fb      	adds	r3, r7, r3
    b062:	881b      	ldrh	r3, [r3, #0]
    b064:	2202      	movs	r2, #2
    b066:	4013      	ands	r3, r2
    b068:	d024      	beq.n	b0b4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    b06a:	697b      	ldr	r3, [r7, #20]
    b06c:	795b      	ldrb	r3, [r3, #5]
    b06e:	2b01      	cmp	r3, #1
    b070:	d120      	bne.n	b0b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    b072:	697b      	ldr	r3, [r7, #20]
    b074:	7a5b      	ldrb	r3, [r3, #9]
    b076:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    b078:	2b01      	cmp	r3, #1
    b07a:	d11b      	bne.n	b0b4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    b07c:	697b      	ldr	r3, [r7, #20]
    b07e:	79db      	ldrb	r3, [r3, #7]
    b080:	2201      	movs	r2, #1
    b082:	4053      	eors	r3, r2
    b084:	b2db      	uxtb	r3, r3
    b086:	2b00      	cmp	r3, #0
    b088:	d014      	beq.n	b0b4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    b08a:	693b      	ldr	r3, [r7, #16]
    b08c:	2202      	movs	r2, #2
    b08e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    b090:	697b      	ldr	r3, [r7, #20]
    b092:	2203      	movs	r2, #3
    b094:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    b096:	697b      	ldr	r3, [r7, #20]
    b098:	2238      	movs	r2, #56	; 0x38
    b09a:	2100      	movs	r1, #0
    b09c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    b09e:	230f      	movs	r3, #15
    b0a0:	18fb      	adds	r3, r7, r3
    b0a2:	781b      	ldrb	r3, [r3, #0]
    b0a4:	2201      	movs	r2, #1
    b0a6:	4013      	ands	r3, r2
    b0a8:	d004      	beq.n	b0b4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    b0aa:	697b      	ldr	r3, [r7, #20]
    b0ac:	68db      	ldr	r3, [r3, #12]
    b0ae:	697a      	ldr	r2, [r7, #20]
    b0b0:	0010      	movs	r0, r2
    b0b2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    b0b4:	230c      	movs	r3, #12
    b0b6:	18fb      	adds	r3, r7, r3
    b0b8:	881b      	ldrh	r3, [r3, #0]
    b0ba:	2280      	movs	r2, #128	; 0x80
    b0bc:	4013      	ands	r3, r2
    b0be:	d010      	beq.n	b0e2 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    b0c0:	693b      	ldr	r3, [r7, #16]
    b0c2:	2280      	movs	r2, #128	; 0x80
    b0c4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    b0c6:	693b      	ldr	r3, [r7, #16]
    b0c8:	2280      	movs	r2, #128	; 0x80
    b0ca:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    b0cc:	230f      	movs	r3, #15
    b0ce:	18fb      	adds	r3, r7, r3
    b0d0:	781b      	ldrb	r3, [r3, #0]
    b0d2:	2240      	movs	r2, #64	; 0x40
    b0d4:	4013      	ands	r3, r2
    b0d6:	d004      	beq.n	b0e2 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    b0d8:	697b      	ldr	r3, [r7, #20]
    b0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b0dc:	697a      	ldr	r2, [r7, #20]
    b0de:	0010      	movs	r0, r2
    b0e0:	4798      	blx	r3
		}
	}
#  endif
}
    b0e2:	46c0      	nop			; (mov r8, r8)
    b0e4:	46bd      	mov	sp, r7
    b0e6:	b006      	add	sp, #24
    b0e8:	bd80      	pop	{r7, pc}
    b0ea:	46c0      	nop			; (mov r8, r8)
    b0ec:	20004790 	.word	0x20004790
    b0f0:	0000ada5 	.word	0x0000ada5
    b0f4:	0000ad29 	.word	0x0000ad29
    b0f8:	0000add9 	.word	0x0000add9
    b0fc:	0000ae11 	.word	0x0000ae11

0000b100 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    b100:	b580      	push	{r7, lr}
    b102:	b082      	sub	sp, #8
    b104:	af00      	add	r7, sp, #0
    b106:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	2200      	movs	r2, #0
    b10c:	701a      	strb	r2, [r3, #0]
}
    b10e:	46c0      	nop			; (mov r8, r8)
    b110:	46bd      	mov	sp, r7
    b112:	b002      	add	sp, #8
    b114:	bd80      	pop	{r7, pc}
    b116:	46c0      	nop			; (mov r8, r8)

0000b118 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    b118:	b580      	push	{r7, lr}
    b11a:	b082      	sub	sp, #8
    b11c:	af00      	add	r7, sp, #0
    b11e:	0002      	movs	r2, r0
    b120:	6039      	str	r1, [r7, #0]
    b122:	1dfb      	adds	r3, r7, #7
    b124:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b126:	1dfb      	adds	r3, r7, #7
    b128:	781b      	ldrb	r3, [r3, #0]
    b12a:	2b01      	cmp	r3, #1
    b12c:	d00a      	beq.n	b144 <system_apb_clock_set_mask+0x2c>
    b12e:	2b02      	cmp	r3, #2
    b130:	d00f      	beq.n	b152 <system_apb_clock_set_mask+0x3a>
    b132:	2b00      	cmp	r3, #0
    b134:	d114      	bne.n	b160 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    b136:	4b0e      	ldr	r3, [pc, #56]	; (b170 <system_apb_clock_set_mask+0x58>)
    b138:	4a0d      	ldr	r2, [pc, #52]	; (b170 <system_apb_clock_set_mask+0x58>)
    b13a:	6991      	ldr	r1, [r2, #24]
    b13c:	683a      	ldr	r2, [r7, #0]
    b13e:	430a      	orrs	r2, r1
    b140:	619a      	str	r2, [r3, #24]
			break;
    b142:	e00f      	b.n	b164 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    b144:	4b0a      	ldr	r3, [pc, #40]	; (b170 <system_apb_clock_set_mask+0x58>)
    b146:	4a0a      	ldr	r2, [pc, #40]	; (b170 <system_apb_clock_set_mask+0x58>)
    b148:	69d1      	ldr	r1, [r2, #28]
    b14a:	683a      	ldr	r2, [r7, #0]
    b14c:	430a      	orrs	r2, r1
    b14e:	61da      	str	r2, [r3, #28]
			break;
    b150:	e008      	b.n	b164 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    b152:	4b07      	ldr	r3, [pc, #28]	; (b170 <system_apb_clock_set_mask+0x58>)
    b154:	4a06      	ldr	r2, [pc, #24]	; (b170 <system_apb_clock_set_mask+0x58>)
    b156:	6a11      	ldr	r1, [r2, #32]
    b158:	683a      	ldr	r2, [r7, #0]
    b15a:	430a      	orrs	r2, r1
    b15c:	621a      	str	r2, [r3, #32]
			break;
    b15e:	e001      	b.n	b164 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    b160:	2317      	movs	r3, #23
    b162:	e000      	b.n	b166 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    b164:	2300      	movs	r3, #0
}
    b166:	0018      	movs	r0, r3
    b168:	46bd      	mov	sp, r7
    b16a:	b002      	add	sp, #8
    b16c:	bd80      	pop	{r7, pc}
    b16e:	46c0      	nop			; (mov r8, r8)
    b170:	40000400 	.word	0x40000400

0000b174 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    b174:	b580      	push	{r7, lr}
    b176:	b082      	sub	sp, #8
    b178:	af00      	add	r7, sp, #0
    b17a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	2280      	movs	r2, #128	; 0x80
    b180:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b182:	687b      	ldr	r3, [r7, #4]
    b184:	2200      	movs	r2, #0
    b186:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b188:	687b      	ldr	r3, [r7, #4]
    b18a:	2201      	movs	r2, #1
    b18c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	2200      	movs	r2, #0
    b192:	70da      	strb	r2, [r3, #3]
}
    b194:	46c0      	nop			; (mov r8, r8)
    b196:	46bd      	mov	sp, r7
    b198:	b002      	add	sp, #8
    b19a:	bd80      	pop	{r7, pc}

0000b19c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    b19c:	b580      	push	{r7, lr}
    b19e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    b1a0:	4b05      	ldr	r3, [pc, #20]	; (b1b8 <system_is_debugger_present+0x1c>)
    b1a2:	789b      	ldrb	r3, [r3, #2]
    b1a4:	b2db      	uxtb	r3, r3
    b1a6:	001a      	movs	r2, r3
    b1a8:	2302      	movs	r3, #2
    b1aa:	4013      	ands	r3, r2
    b1ac:	1e5a      	subs	r2, r3, #1
    b1ae:	4193      	sbcs	r3, r2
    b1b0:	b2db      	uxtb	r3, r3
}
    b1b2:	0018      	movs	r0, r3
    b1b4:	46bd      	mov	sp, r7
    b1b6:	bd80      	pop	{r7, pc}
    b1b8:	41002000 	.word	0x41002000

0000b1bc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    b1bc:	b580      	push	{r7, lr}
    b1be:	b084      	sub	sp, #16
    b1c0:	af00      	add	r7, sp, #0
    b1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    b1c4:	687b      	ldr	r3, [r7, #4]
    b1c6:	681b      	ldr	r3, [r3, #0]
    b1c8:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    b1ca:	68fb      	ldr	r3, [r7, #12]
    b1cc:	69db      	ldr	r3, [r3, #28]
    b1ce:	1e5a      	subs	r2, r3, #1
    b1d0:	4193      	sbcs	r3, r2
    b1d2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    b1d4:	0018      	movs	r0, r3
    b1d6:	46bd      	mov	sp, r7
    b1d8:	b004      	add	sp, #16
    b1da:	bd80      	pop	{r7, pc}

0000b1dc <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    b1dc:	b580      	push	{r7, lr}
    b1de:	b082      	sub	sp, #8
    b1e0:	af00      	add	r7, sp, #0
    b1e2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    b1e4:	46c0      	nop			; (mov r8, r8)
    b1e6:	687b      	ldr	r3, [r7, #4]
    b1e8:	0018      	movs	r0, r3
    b1ea:	4b04      	ldr	r3, [pc, #16]	; (b1fc <_usart_wait_for_sync+0x20>)
    b1ec:	4798      	blx	r3
    b1ee:	1e03      	subs	r3, r0, #0
    b1f0:	d1f9      	bne.n	b1e6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    b1f2:	46c0      	nop			; (mov r8, r8)
    b1f4:	46bd      	mov	sp, r7
    b1f6:	b002      	add	sp, #8
    b1f8:	bd80      	pop	{r7, pc}
    b1fa:	46c0      	nop			; (mov r8, r8)
    b1fc:	0000b1bd 	.word	0x0000b1bd

0000b200 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    b200:	b5b0      	push	{r4, r5, r7, lr}
    b202:	b08c      	sub	sp, #48	; 0x30
    b204:	af02      	add	r7, sp, #8
    b206:	6078      	str	r0, [r7, #4]
    b208:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b20a:	687b      	ldr	r3, [r7, #4]
    b20c:	681b      	ldr	r3, [r3, #0]
    b20e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b210:	687b      	ldr	r3, [r7, #4]
    b212:	681b      	ldr	r3, [r3, #0]
    b214:	0018      	movs	r0, r3
    b216:	4ba8      	ldr	r3, [pc, #672]	; (b4b8 <_usart_set_config+0x2b8>)
    b218:	4798      	blx	r3
    b21a:	0003      	movs	r3, r0
    b21c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b21e:	697b      	ldr	r3, [r7, #20]
    b220:	3314      	adds	r3, #20
    b222:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    b224:	2300      	movs	r3, #0
    b226:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    b228:	2300      	movs	r3, #0
    b22a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    b22c:	230a      	movs	r3, #10
    b22e:	18fb      	adds	r3, r7, r3
    b230:	2200      	movs	r2, #0
    b232:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b234:	231f      	movs	r3, #31
    b236:	18fb      	adds	r3, r7, r3
    b238:	2200      	movs	r2, #0
    b23a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b23c:	231e      	movs	r3, #30
    b23e:	18fb      	adds	r3, r7, r3
    b240:	2210      	movs	r2, #16
    b242:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    b244:	683b      	ldr	r3, [r7, #0]
    b246:	8a1b      	ldrh	r3, [r3, #16]
    b248:	2280      	movs	r2, #128	; 0x80
    b24a:	01d2      	lsls	r2, r2, #7
    b24c:	4293      	cmp	r3, r2
    b24e:	d01c      	beq.n	b28a <_usart_set_config+0x8a>
    b250:	2280      	movs	r2, #128	; 0x80
    b252:	01d2      	lsls	r2, r2, #7
    b254:	4293      	cmp	r3, r2
    b256:	dc06      	bgt.n	b266 <_usart_set_config+0x66>
    b258:	2b00      	cmp	r3, #0
    b25a:	d00d      	beq.n	b278 <_usart_set_config+0x78>
    b25c:	2280      	movs	r2, #128	; 0x80
    b25e:	0192      	lsls	r2, r2, #6
    b260:	4293      	cmp	r3, r2
    b262:	d024      	beq.n	b2ae <_usart_set_config+0xae>
    b264:	e035      	b.n	b2d2 <_usart_set_config+0xd2>
    b266:	22c0      	movs	r2, #192	; 0xc0
    b268:	01d2      	lsls	r2, r2, #7
    b26a:	4293      	cmp	r3, r2
    b26c:	d028      	beq.n	b2c0 <_usart_set_config+0xc0>
    b26e:	2280      	movs	r2, #128	; 0x80
    b270:	0212      	lsls	r2, r2, #8
    b272:	4293      	cmp	r3, r2
    b274:	d012      	beq.n	b29c <_usart_set_config+0x9c>
    b276:	e02c      	b.n	b2d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b278:	231f      	movs	r3, #31
    b27a:	18fb      	adds	r3, r7, r3
    b27c:	2200      	movs	r2, #0
    b27e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b280:	231e      	movs	r3, #30
    b282:	18fb      	adds	r3, r7, r3
    b284:	2210      	movs	r2, #16
    b286:	701a      	strb	r2, [r3, #0]
			break;
    b288:	e023      	b.n	b2d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b28a:	231f      	movs	r3, #31
    b28c:	18fb      	adds	r3, r7, r3
    b28e:	2200      	movs	r2, #0
    b290:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b292:	231e      	movs	r3, #30
    b294:	18fb      	adds	r3, r7, r3
    b296:	2208      	movs	r2, #8
    b298:	701a      	strb	r2, [r3, #0]
			break;
    b29a:	e01a      	b.n	b2d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    b29c:	231f      	movs	r3, #31
    b29e:	18fb      	adds	r3, r7, r3
    b2a0:	2200      	movs	r2, #0
    b2a2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    b2a4:	231e      	movs	r3, #30
    b2a6:	18fb      	adds	r3, r7, r3
    b2a8:	2203      	movs	r2, #3
    b2aa:	701a      	strb	r2, [r3, #0]
			break;
    b2ac:	e011      	b.n	b2d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b2ae:	231f      	movs	r3, #31
    b2b0:	18fb      	adds	r3, r7, r3
    b2b2:	2201      	movs	r2, #1
    b2b4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    b2b6:	231e      	movs	r3, #30
    b2b8:	18fb      	adds	r3, r7, r3
    b2ba:	2210      	movs	r2, #16
    b2bc:	701a      	strb	r2, [r3, #0]
			break;
    b2be:	e008      	b.n	b2d2 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    b2c0:	231f      	movs	r3, #31
    b2c2:	18fb      	adds	r3, r7, r3
    b2c4:	2201      	movs	r2, #1
    b2c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    b2c8:	231e      	movs	r3, #30
    b2ca:	18fb      	adds	r3, r7, r3
    b2cc:	2208      	movs	r2, #8
    b2ce:	701a      	strb	r2, [r3, #0]
			break;
    b2d0:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    b2d2:	683b      	ldr	r3, [r7, #0]
    b2d4:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    b2d6:	683b      	ldr	r3, [r7, #0]
    b2d8:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    b2da:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    b2dc:	683b      	ldr	r3, [r7, #0]
    b2de:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    b2e0:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    b2e2:	683a      	ldr	r2, [r7, #0]
    b2e4:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    b2e6:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    b2e8:	683a      	ldr	r2, [r7, #0]
    b2ea:	7e12      	ldrb	r2, [r2, #24]
    b2ec:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    b2ee:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    b2f0:	683a      	ldr	r2, [r7, #0]
    b2f2:	2126      	movs	r1, #38	; 0x26
    b2f4:	5c52      	ldrb	r2, [r2, r1]
    b2f6:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    b2f8:	4313      	orrs	r3, r2
    b2fa:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    b2fc:	231d      	movs	r3, #29
    b2fe:	18fb      	adds	r3, r7, r3
    b300:	2200      	movs	r2, #0
    b302:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    b304:	683b      	ldr	r3, [r7, #0]
    b306:	685b      	ldr	r3, [r3, #4]
    b308:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    b30a:	68fb      	ldr	r3, [r7, #12]
    b30c:	2b00      	cmp	r3, #0
    b30e:	d01e      	beq.n	b34e <_usart_set_config+0x14e>
    b310:	2280      	movs	r2, #128	; 0x80
    b312:	0552      	lsls	r2, r2, #21
    b314:	4293      	cmp	r3, r2
    b316:	d14f      	bne.n	b3b8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    b318:	683b      	ldr	r3, [r7, #0]
    b31a:	2227      	movs	r2, #39	; 0x27
    b31c:	5c9b      	ldrb	r3, [r3, r2]
    b31e:	2201      	movs	r2, #1
    b320:	4053      	eors	r3, r2
    b322:	b2db      	uxtb	r3, r3
    b324:	2b00      	cmp	r3, #0
    b326:	d046      	beq.n	b3b6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    b328:	683b      	ldr	r3, [r7, #0]
    b32a:	6a1d      	ldr	r5, [r3, #32]
    b32c:	693b      	ldr	r3, [r7, #16]
    b32e:	b2db      	uxtb	r3, r3
    b330:	0018      	movs	r0, r3
    b332:	4b62      	ldr	r3, [pc, #392]	; (b4bc <_usart_set_config+0x2bc>)
    b334:	4798      	blx	r3
    b336:	0001      	movs	r1, r0
    b338:	231d      	movs	r3, #29
    b33a:	18fc      	adds	r4, r7, r3
    b33c:	230a      	movs	r3, #10
    b33e:	18fb      	adds	r3, r7, r3
    b340:	001a      	movs	r2, r3
    b342:	0028      	movs	r0, r5
    b344:	4b5e      	ldr	r3, [pc, #376]	; (b4c0 <_usart_set_config+0x2c0>)
    b346:	4798      	blx	r3
    b348:	0003      	movs	r3, r0
    b34a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    b34c:	e033      	b.n	b3b6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    b34e:	683b      	ldr	r3, [r7, #0]
    b350:	2227      	movs	r2, #39	; 0x27
    b352:	5c9b      	ldrb	r3, [r3, r2]
    b354:	2b00      	cmp	r3, #0
    b356:	d014      	beq.n	b382 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    b358:	683b      	ldr	r3, [r7, #0]
    b35a:	6a18      	ldr	r0, [r3, #32]
    b35c:	683b      	ldr	r3, [r7, #0]
    b35e:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    b360:	231d      	movs	r3, #29
    b362:	18fc      	adds	r4, r7, r3
    b364:	231f      	movs	r3, #31
    b366:	18fb      	adds	r3, r7, r3
    b368:	781d      	ldrb	r5, [r3, #0]
    b36a:	230a      	movs	r3, #10
    b36c:	18fa      	adds	r2, r7, r3
    b36e:	231e      	movs	r3, #30
    b370:	18fb      	adds	r3, r7, r3
    b372:	781b      	ldrb	r3, [r3, #0]
    b374:	9300      	str	r3, [sp, #0]
    b376:	002b      	movs	r3, r5
    b378:	4d52      	ldr	r5, [pc, #328]	; (b4c4 <_usart_set_config+0x2c4>)
    b37a:	47a8      	blx	r5
    b37c:	0003      	movs	r3, r0
    b37e:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    b380:	e01a      	b.n	b3b8 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    b382:	683b      	ldr	r3, [r7, #0]
    b384:	6a1d      	ldr	r5, [r3, #32]
    b386:	693b      	ldr	r3, [r7, #16]
    b388:	b2db      	uxtb	r3, r3
    b38a:	0018      	movs	r0, r3
    b38c:	4b4b      	ldr	r3, [pc, #300]	; (b4bc <_usart_set_config+0x2bc>)
    b38e:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    b390:	231d      	movs	r3, #29
    b392:	18fc      	adds	r4, r7, r3
    b394:	231f      	movs	r3, #31
    b396:	18fb      	adds	r3, r7, r3
    b398:	7819      	ldrb	r1, [r3, #0]
    b39a:	230a      	movs	r3, #10
    b39c:	18fa      	adds	r2, r7, r3
    b39e:	231e      	movs	r3, #30
    b3a0:	18fb      	adds	r3, r7, r3
    b3a2:	781b      	ldrb	r3, [r3, #0]
    b3a4:	9300      	str	r3, [sp, #0]
    b3a6:	000b      	movs	r3, r1
    b3a8:	0001      	movs	r1, r0
    b3aa:	0028      	movs	r0, r5
    b3ac:	4d45      	ldr	r5, [pc, #276]	; (b4c4 <_usart_set_config+0x2c4>)
    b3ae:	47a8      	blx	r5
    b3b0:	0003      	movs	r3, r0
    b3b2:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    b3b4:	e000      	b.n	b3b8 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    b3b6:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    b3b8:	231d      	movs	r3, #29
    b3ba:	18fb      	adds	r3, r7, r3
    b3bc:	781b      	ldrb	r3, [r3, #0]
    b3be:	2b00      	cmp	r3, #0
    b3c0:	d003      	beq.n	b3ca <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    b3c2:	231d      	movs	r3, #29
    b3c4:	18fb      	adds	r3, r7, r3
    b3c6:	781b      	ldrb	r3, [r3, #0]
    b3c8:	e071      	b.n	b4ae <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    b3ca:	683b      	ldr	r3, [r7, #0]
    b3cc:	7e5b      	ldrb	r3, [r3, #25]
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d003      	beq.n	b3da <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    b3d2:	683b      	ldr	r3, [r7, #0]
    b3d4:	7e9a      	ldrb	r2, [r3, #26]
    b3d6:	69bb      	ldr	r3, [r7, #24]
    b3d8:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b3da:	687b      	ldr	r3, [r7, #4]
    b3dc:	0018      	movs	r0, r3
    b3de:	4b3a      	ldr	r3, [pc, #232]	; (b4c8 <_usart_set_config+0x2c8>)
    b3e0:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    b3e2:	230a      	movs	r3, #10
    b3e4:	18fb      	adds	r3, r7, r3
    b3e6:	881a      	ldrh	r2, [r3, #0]
    b3e8:	69bb      	ldr	r3, [r7, #24]
    b3ea:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    b3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b3ee:	68fb      	ldr	r3, [r7, #12]
    b3f0:	4313      	orrs	r3, r2
    b3f2:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    b3f4:	683b      	ldr	r3, [r7, #0]
    b3f6:	2227      	movs	r2, #39	; 0x27
    b3f8:	5c9b      	ldrb	r3, [r3, r2]
    b3fa:	2201      	movs	r2, #1
    b3fc:	4053      	eors	r3, r2
    b3fe:	b2db      	uxtb	r3, r3
    b400:	2b00      	cmp	r3, #0
    b402:	d003      	beq.n	b40c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b406:	2204      	movs	r2, #4
    b408:	4313      	orrs	r3, r2
    b40a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b40c:	683b      	ldr	r3, [r7, #0]
    b40e:	7e5b      	ldrb	r3, [r3, #25]
    b410:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b412:	683b      	ldr	r3, [r7, #0]
    b414:	7f1b      	ldrb	r3, [r3, #28]
    b416:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    b418:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b41a:	683b      	ldr	r3, [r7, #0]
    b41c:	7f5b      	ldrb	r3, [r3, #29]
    b41e:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    b420:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b422:	683b      	ldr	r3, [r7, #0]
    b424:	2124      	movs	r1, #36	; 0x24
    b426:	5c5b      	ldrb	r3, [r3, r1]
    b428:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    b42a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    b42c:	683b      	ldr	r3, [r7, #0]
    b42e:	2125      	movs	r1, #37	; 0x25
    b430:	5c5b      	ldrb	r3, [r3, r1]
    b432:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    b434:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    b436:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    b438:	683b      	ldr	r3, [r7, #0]
    b43a:	7adb      	ldrb	r3, [r3, #11]
    b43c:	001a      	movs	r2, r3
    b43e:	6a3b      	ldr	r3, [r7, #32]
    b440:	4313      	orrs	r3, r2
    b442:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    b444:	683b      	ldr	r3, [r7, #0]
    b446:	891b      	ldrh	r3, [r3, #8]
    b448:	2bff      	cmp	r3, #255	; 0xff
    b44a:	d00b      	beq.n	b464 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b44e:	2280      	movs	r2, #128	; 0x80
    b450:	0452      	lsls	r2, r2, #17
    b452:	4313      	orrs	r3, r2
    b454:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    b456:	683b      	ldr	r3, [r7, #0]
    b458:	891b      	ldrh	r3, [r3, #8]
    b45a:	001a      	movs	r2, r3
    b45c:	6a3b      	ldr	r3, [r7, #32]
    b45e:	4313      	orrs	r3, r2
    b460:	623b      	str	r3, [r7, #32]
    b462:	e008      	b.n	b476 <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    b464:	683b      	ldr	r3, [r7, #0]
    b466:	7edb      	ldrb	r3, [r3, #27]
    b468:	2b00      	cmp	r3, #0
    b46a:	d004      	beq.n	b476 <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    b46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b46e:	2280      	movs	r2, #128	; 0x80
    b470:	04d2      	lsls	r2, r2, #19
    b472:	4313      	orrs	r3, r2
    b474:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    b476:	683b      	ldr	r3, [r7, #0]
    b478:	222c      	movs	r2, #44	; 0x2c
    b47a:	5c9b      	ldrb	r3, [r3, r2]
    b47c:	2b00      	cmp	r3, #0
    b47e:	d103      	bne.n	b488 <_usart_set_config+0x288>
    b480:	4b12      	ldr	r3, [pc, #72]	; (b4cc <_usart_set_config+0x2cc>)
    b482:	4798      	blx	r3
    b484:	1e03      	subs	r3, r0, #0
    b486:	d003      	beq.n	b490 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b48a:	2280      	movs	r2, #128	; 0x80
    b48c:	4313      	orrs	r3, r2
    b48e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b490:	687b      	ldr	r3, [r7, #4]
    b492:	0018      	movs	r0, r3
    b494:	4b0c      	ldr	r3, [pc, #48]	; (b4c8 <_usart_set_config+0x2c8>)
    b496:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    b498:	69bb      	ldr	r3, [r7, #24]
    b49a:	6a3a      	ldr	r2, [r7, #32]
    b49c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b49e:	687b      	ldr	r3, [r7, #4]
    b4a0:	0018      	movs	r0, r3
    b4a2:	4b09      	ldr	r3, [pc, #36]	; (b4c8 <_usart_set_config+0x2c8>)
    b4a4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    b4a6:	69bb      	ldr	r3, [r7, #24]
    b4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b4aa:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    b4ac:	2300      	movs	r3, #0
}
    b4ae:	0018      	movs	r0, r3
    b4b0:	46bd      	mov	sp, r7
    b4b2:	b00a      	add	sp, #40	; 0x28
    b4b4:	bdb0      	pop	{r4, r5, r7, pc}
    b4b6:	46c0      	nop			; (mov r8, r8)
    b4b8:	0000a305 	.word	0x0000a305
    b4bc:	0000ca35 	.word	0x0000ca35
    b4c0:	00009e55 	.word	0x00009e55
    b4c4:	00009ed1 	.word	0x00009ed1
    b4c8:	0000b1dd 	.word	0x0000b1dd
    b4cc:	0000b19d 	.word	0x0000b19d

0000b4d0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    b4d0:	b590      	push	{r4, r7, lr}
    b4d2:	b093      	sub	sp, #76	; 0x4c
    b4d4:	af00      	add	r7, sp, #0
    b4d6:	60f8      	str	r0, [r7, #12]
    b4d8:	60b9      	str	r1, [r7, #8]
    b4da:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    b4dc:	233b      	movs	r3, #59	; 0x3b
    b4de:	18fb      	adds	r3, r7, r3
    b4e0:	2200      	movs	r2, #0
    b4e2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    b4e4:	68fb      	ldr	r3, [r7, #12]
    b4e6:	68ba      	ldr	r2, [r7, #8]
    b4e8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b4ea:	68fb      	ldr	r3, [r7, #12]
    b4ec:	681b      	ldr	r3, [r3, #0]
    b4ee:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    b4f0:	68fb      	ldr	r3, [r7, #12]
    b4f2:	681b      	ldr	r3, [r3, #0]
    b4f4:	0018      	movs	r0, r3
    b4f6:	4b86      	ldr	r3, [pc, #536]	; (b710 <usart_init+0x240>)
    b4f8:	4798      	blx	r3
    b4fa:	0003      	movs	r3, r0
    b4fc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    b4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b500:	3302      	adds	r3, #2
    b502:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    b504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b506:	3314      	adds	r3, #20
    b508:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    b50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b50c:	681b      	ldr	r3, [r3, #0]
    b50e:	2201      	movs	r2, #1
    b510:	4013      	ands	r3, r2
    b512:	d001      	beq.n	b518 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    b514:	2305      	movs	r3, #5
    b516:	e0f6      	b.n	b706 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    b518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	2202      	movs	r2, #2
    b51e:	4013      	ands	r3, r2
    b520:	d001      	beq.n	b526 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    b522:	231c      	movs	r3, #28
    b524:	e0ef      	b.n	b706 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    b526:	2201      	movs	r2, #1
    b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b52a:	409a      	lsls	r2, r3
    b52c:	0013      	movs	r3, r2
    b52e:	0019      	movs	r1, r3
    b530:	2002      	movs	r0, #2
    b532:	4b78      	ldr	r3, [pc, #480]	; (b714 <usart_init+0x244>)
    b534:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    b536:	2324      	movs	r3, #36	; 0x24
    b538:	18fb      	adds	r3, r7, r3
    b53a:	0018      	movs	r0, r3
    b53c:	4b76      	ldr	r3, [pc, #472]	; (b718 <usart_init+0x248>)
    b53e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    b540:	687b      	ldr	r3, [r7, #4]
    b542:	222d      	movs	r2, #45	; 0x2d
    b544:	5c9a      	ldrb	r2, [r3, r2]
    b546:	2324      	movs	r3, #36	; 0x24
    b548:	18fb      	adds	r3, r7, r3
    b54a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    b54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b54e:	b2db      	uxtb	r3, r3
    b550:	2224      	movs	r2, #36	; 0x24
    b552:	18ba      	adds	r2, r7, r2
    b554:	0011      	movs	r1, r2
    b556:	0018      	movs	r0, r3
    b558:	4b70      	ldr	r3, [pc, #448]	; (b71c <usart_init+0x24c>)
    b55a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    b55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b55e:	b2db      	uxtb	r3, r3
    b560:	0018      	movs	r0, r3
    b562:	4b6f      	ldr	r3, [pc, #444]	; (b720 <usart_init+0x250>)
    b564:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	222d      	movs	r2, #45	; 0x2d
    b56a:	5c9b      	ldrb	r3, [r3, r2]
    b56c:	2100      	movs	r1, #0
    b56e:	0018      	movs	r0, r3
    b570:	4b6c      	ldr	r3, [pc, #432]	; (b724 <usart_init+0x254>)
    b572:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    b574:	687b      	ldr	r3, [r7, #4]
    b576:	7ada      	ldrb	r2, [r3, #11]
    b578:	68fb      	ldr	r3, [r7, #12]
    b57a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	2224      	movs	r2, #36	; 0x24
    b580:	5c9a      	ldrb	r2, [r3, r2]
    b582:	68fb      	ldr	r3, [r7, #12]
    b584:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	2225      	movs	r2, #37	; 0x25
    b58a:	5c9a      	ldrb	r2, [r3, r2]
    b58c:	68fb      	ldr	r3, [r7, #12]
    b58e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    b590:	687b      	ldr	r3, [r7, #4]
    b592:	7eda      	ldrb	r2, [r3, #27]
    b594:	68fb      	ldr	r3, [r7, #12]
    b596:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    b598:	687b      	ldr	r3, [r7, #4]
    b59a:	7f1a      	ldrb	r2, [r3, #28]
    b59c:	68fb      	ldr	r3, [r7, #12]
    b59e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    b5a0:	233b      	movs	r3, #59	; 0x3b
    b5a2:	18fc      	adds	r4, r7, r3
    b5a4:	687a      	ldr	r2, [r7, #4]
    b5a6:	68fb      	ldr	r3, [r7, #12]
    b5a8:	0011      	movs	r1, r2
    b5aa:	0018      	movs	r0, r3
    b5ac:	4b5e      	ldr	r3, [pc, #376]	; (b728 <usart_init+0x258>)
    b5ae:	4798      	blx	r3
    b5b0:	0003      	movs	r3, r0
    b5b2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    b5b4:	233b      	movs	r3, #59	; 0x3b
    b5b6:	18fb      	adds	r3, r7, r3
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d003      	beq.n	b5c6 <usart_init+0xf6>
		return status_code;
    b5be:	233b      	movs	r3, #59	; 0x3b
    b5c0:	18fb      	adds	r3, r7, r3
    b5c2:	781b      	ldrb	r3, [r3, #0]
    b5c4:	e09f      	b.n	b706 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    b5c6:	2320      	movs	r3, #32
    b5c8:	18fb      	adds	r3, r7, r3
    b5ca:	0018      	movs	r0, r3
    b5cc:	4b57      	ldr	r3, [pc, #348]	; (b72c <usart_init+0x25c>)
    b5ce:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b5d0:	2320      	movs	r3, #32
    b5d2:	18fb      	adds	r3, r7, r3
    b5d4:	2200      	movs	r2, #0
    b5d6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    b5d8:	2320      	movs	r3, #32
    b5da:	18fb      	adds	r3, r7, r3
    b5dc:	2200      	movs	r2, #0
    b5de:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    b5e4:	2310      	movs	r3, #16
    b5e6:	18fb      	adds	r3, r7, r3
    b5e8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    b5ea:	687b      	ldr	r3, [r7, #4]
    b5ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    b5ee:	2310      	movs	r3, #16
    b5f0:	18fb      	adds	r3, r7, r3
    b5f2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    b5f4:	687b      	ldr	r3, [r7, #4]
    b5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    b5f8:	2310      	movs	r3, #16
    b5fa:	18fb      	adds	r3, r7, r3
    b5fc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    b602:	2310      	movs	r3, #16
    b604:	18fb      	adds	r3, r7, r3
    b606:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    b608:	2347      	movs	r3, #71	; 0x47
    b60a:	18fb      	adds	r3, r7, r3
    b60c:	2200      	movs	r2, #0
    b60e:	701a      	strb	r2, [r3, #0]
    b610:	e02c      	b.n	b66c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    b612:	2347      	movs	r3, #71	; 0x47
    b614:	18fb      	adds	r3, r7, r3
    b616:	781a      	ldrb	r2, [r3, #0]
    b618:	2310      	movs	r3, #16
    b61a:	18fb      	adds	r3, r7, r3
    b61c:	0092      	lsls	r2, r2, #2
    b61e:	58d3      	ldr	r3, [r2, r3]
    b620:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    b622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b624:	2b00      	cmp	r3, #0
    b626:	d109      	bne.n	b63c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    b628:	2347      	movs	r3, #71	; 0x47
    b62a:	18fb      	adds	r3, r7, r3
    b62c:	781a      	ldrb	r2, [r3, #0]
    b62e:	68bb      	ldr	r3, [r7, #8]
    b630:	0011      	movs	r1, r2
    b632:	0018      	movs	r0, r3
    b634:	4b3e      	ldr	r3, [pc, #248]	; (b730 <usart_init+0x260>)
    b636:	4798      	blx	r3
    b638:	0003      	movs	r3, r0
    b63a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    b63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b63e:	3301      	adds	r3, #1
    b640:	d00d      	beq.n	b65e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    b642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b644:	b2da      	uxtb	r2, r3
    b646:	2320      	movs	r3, #32
    b648:	18fb      	adds	r3, r7, r3
    b64a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    b64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b64e:	0c1b      	lsrs	r3, r3, #16
    b650:	b2db      	uxtb	r3, r3
    b652:	2220      	movs	r2, #32
    b654:	18ba      	adds	r2, r7, r2
    b656:	0011      	movs	r1, r2
    b658:	0018      	movs	r0, r3
    b65a:	4b36      	ldr	r3, [pc, #216]	; (b734 <usart_init+0x264>)
    b65c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    b65e:	2347      	movs	r3, #71	; 0x47
    b660:	18fb      	adds	r3, r7, r3
    b662:	781a      	ldrb	r2, [r3, #0]
    b664:	2347      	movs	r3, #71	; 0x47
    b666:	18fb      	adds	r3, r7, r3
    b668:	3201      	adds	r2, #1
    b66a:	701a      	strb	r2, [r3, #0]
    b66c:	2347      	movs	r3, #71	; 0x47
    b66e:	18fb      	adds	r3, r7, r3
    b670:	781b      	ldrb	r3, [r3, #0]
    b672:	2b03      	cmp	r3, #3
    b674:	d9cd      	bls.n	b612 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b676:	2300      	movs	r3, #0
    b678:	63fb      	str	r3, [r7, #60]	; 0x3c
    b67a:	e00a      	b.n	b692 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    b67c:	68fa      	ldr	r2, [r7, #12]
    b67e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b680:	3302      	adds	r3, #2
    b682:	009b      	lsls	r3, r3, #2
    b684:	18d3      	adds	r3, r2, r3
    b686:	3304      	adds	r3, #4
    b688:	2200      	movs	r2, #0
    b68a:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    b68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b68e:	3301      	adds	r3, #1
    b690:	63fb      	str	r3, [r7, #60]	; 0x3c
    b692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b694:	2b05      	cmp	r3, #5
    b696:	d9f1      	bls.n	b67c <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    b698:	68fb      	ldr	r3, [r7, #12]
    b69a:	2200      	movs	r2, #0
    b69c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    b69e:	68fb      	ldr	r3, [r7, #12]
    b6a0:	2200      	movs	r2, #0
    b6a2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    b6a4:	68fb      	ldr	r3, [r7, #12]
    b6a6:	2200      	movs	r2, #0
    b6a8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    b6aa:	68fb      	ldr	r3, [r7, #12]
    b6ac:	2200      	movs	r2, #0
    b6ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    b6b0:	68fb      	ldr	r3, [r7, #12]
    b6b2:	2230      	movs	r2, #48	; 0x30
    b6b4:	2100      	movs	r1, #0
    b6b6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    b6b8:	68fb      	ldr	r3, [r7, #12]
    b6ba:	2231      	movs	r2, #49	; 0x31
    b6bc:	2100      	movs	r1, #0
    b6be:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    b6c0:	68fb      	ldr	r3, [r7, #12]
    b6c2:	2232      	movs	r2, #50	; 0x32
    b6c4:	2100      	movs	r1, #0
    b6c6:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    b6c8:	68fb      	ldr	r3, [r7, #12]
    b6ca:	2233      	movs	r2, #51	; 0x33
    b6cc:	2100      	movs	r1, #0
    b6ce:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    b6d0:	68fb      	ldr	r3, [r7, #12]
    b6d2:	681b      	ldr	r3, [r3, #0]
    b6d4:	2227      	movs	r2, #39	; 0x27
    b6d6:	18bc      	adds	r4, r7, r2
    b6d8:	0018      	movs	r0, r3
    b6da:	4b0d      	ldr	r3, [pc, #52]	; (b710 <usart_init+0x240>)
    b6dc:	4798      	blx	r3
    b6de:	0003      	movs	r3, r0
    b6e0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    b6e2:	4a15      	ldr	r2, [pc, #84]	; (b738 <usart_init+0x268>)
    b6e4:	2327      	movs	r3, #39	; 0x27
    b6e6:	18fb      	adds	r3, r7, r3
    b6e8:	781b      	ldrb	r3, [r3, #0]
    b6ea:	0011      	movs	r1, r2
    b6ec:	0018      	movs	r0, r3
    b6ee:	4b13      	ldr	r3, [pc, #76]	; (b73c <usart_init+0x26c>)
    b6f0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    b6f2:	2327      	movs	r3, #39	; 0x27
    b6f4:	18fb      	adds	r3, r7, r3
    b6f6:	781a      	ldrb	r2, [r3, #0]
    b6f8:	4b11      	ldr	r3, [pc, #68]	; (b740 <usart_init+0x270>)
    b6fa:	0092      	lsls	r2, r2, #2
    b6fc:	68f9      	ldr	r1, [r7, #12]
    b6fe:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    b700:	233b      	movs	r3, #59	; 0x3b
    b702:	18fb      	adds	r3, r7, r3
    b704:	781b      	ldrb	r3, [r3, #0]
}
    b706:	0018      	movs	r0, r3
    b708:	46bd      	mov	sp, r7
    b70a:	b013      	add	sp, #76	; 0x4c
    b70c:	bd90      	pop	{r4, r7, pc}
    b70e:	46c0      	nop			; (mov r8, r8)
    b710:	0000a305 	.word	0x0000a305
    b714:	0000b119 	.word	0x0000b119
    b718:	0000b101 	.word	0x0000b101
    b71c:	0000c911 	.word	0x0000c911
    b720:	0000c955 	.word	0x0000c955
    b724:	0000a0bd 	.word	0x0000a0bd
    b728:	0000b201 	.word	0x0000b201
    b72c:	0000b175 	.word	0x0000b175
    b730:	0000a149 	.word	0x0000a149
    b734:	0000cbfd 	.word	0x0000cbfd
    b738:	0000b8d9 	.word	0x0000b8d9
    b73c:	0000a369 	.word	0x0000a369
    b740:	20004790 	.word	0x20004790

0000b744 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    b744:	b580      	push	{r7, lr}
    b746:	b084      	sub	sp, #16
    b748:	af00      	add	r7, sp, #0
    b74a:	6078      	str	r0, [r7, #4]
    b74c:	000a      	movs	r2, r1
    b74e:	1cbb      	adds	r3, r7, #2
    b750:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b752:	687b      	ldr	r3, [r7, #4]
    b754:	681b      	ldr	r3, [r3, #0]
    b756:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    b758:	687b      	ldr	r3, [r7, #4]
    b75a:	79db      	ldrb	r3, [r3, #7]
    b75c:	2201      	movs	r2, #1
    b75e:	4053      	eors	r3, r2
    b760:	b2db      	uxtb	r3, r3
    b762:	2b00      	cmp	r3, #0
    b764:	d001      	beq.n	b76a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    b766:	231c      	movs	r3, #28
    b768:	e017      	b.n	b79a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    b76a:	687b      	ldr	r3, [r7, #4]
    b76c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b76e:	b29b      	uxth	r3, r3
    b770:	2b00      	cmp	r3, #0
    b772:	d001      	beq.n	b778 <usart_write_wait+0x34>
		return STATUS_BUSY;
    b774:	2305      	movs	r3, #5
    b776:	e010      	b.n	b79a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b778:	687b      	ldr	r3, [r7, #4]
    b77a:	0018      	movs	r0, r3
    b77c:	4b09      	ldr	r3, [pc, #36]	; (b7a4 <usart_write_wait+0x60>)
    b77e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    b780:	68fb      	ldr	r3, [r7, #12]
    b782:	1cba      	adds	r2, r7, #2
    b784:	8812      	ldrh	r2, [r2, #0]
    b786:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    b788:	46c0      	nop			; (mov r8, r8)
    b78a:	68fb      	ldr	r3, [r7, #12]
    b78c:	7e1b      	ldrb	r3, [r3, #24]
    b78e:	b2db      	uxtb	r3, r3
    b790:	001a      	movs	r2, r3
    b792:	2302      	movs	r3, #2
    b794:	4013      	ands	r3, r2
    b796:	d0f8      	beq.n	b78a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    b798:	2300      	movs	r3, #0
}
    b79a:	0018      	movs	r0, r3
    b79c:	46bd      	mov	sp, r7
    b79e:	b004      	add	sp, #16
    b7a0:	bd80      	pop	{r7, pc}
    b7a2:	46c0      	nop			; (mov r8, r8)
    b7a4:	0000b1dd 	.word	0x0000b1dd

0000b7a8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    b7a8:	b580      	push	{r7, lr}
    b7aa:	b084      	sub	sp, #16
    b7ac:	af00      	add	r7, sp, #0
    b7ae:	6078      	str	r0, [r7, #4]
    b7b0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b7b2:	687b      	ldr	r3, [r7, #4]
    b7b4:	681b      	ldr	r3, [r3, #0]
    b7b6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    b7b8:	687b      	ldr	r3, [r7, #4]
    b7ba:	799b      	ldrb	r3, [r3, #6]
    b7bc:	2201      	movs	r2, #1
    b7be:	4053      	eors	r3, r2
    b7c0:	b2db      	uxtb	r3, r3
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d001      	beq.n	b7ca <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    b7c6:	231c      	movs	r3, #28
    b7c8:	e05e      	b.n	b888 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    b7ca:	687b      	ldr	r3, [r7, #4]
    b7cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    b7ce:	b29b      	uxth	r3, r3
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d001      	beq.n	b7d8 <usart_read_wait+0x30>
		return STATUS_BUSY;
    b7d4:	2305      	movs	r3, #5
    b7d6:	e057      	b.n	b888 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    b7d8:	68fb      	ldr	r3, [r7, #12]
    b7da:	7e1b      	ldrb	r3, [r3, #24]
    b7dc:	b2db      	uxtb	r3, r3
    b7de:	001a      	movs	r2, r3
    b7e0:	2304      	movs	r3, #4
    b7e2:	4013      	ands	r3, r2
    b7e4:	d101      	bne.n	b7ea <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    b7e6:	2305      	movs	r3, #5
    b7e8:	e04e      	b.n	b888 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    b7ea:	687b      	ldr	r3, [r7, #4]
    b7ec:	0018      	movs	r0, r3
    b7ee:	4b28      	ldr	r3, [pc, #160]	; (b890 <usart_read_wait+0xe8>)
    b7f0:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    b7f2:	68fb      	ldr	r3, [r7, #12]
    b7f4:	8b5b      	ldrh	r3, [r3, #26]
    b7f6:	b29b      	uxth	r3, r3
    b7f8:	b2da      	uxtb	r2, r3
    b7fa:	230b      	movs	r3, #11
    b7fc:	18fb      	adds	r3, r7, r3
    b7fe:	213f      	movs	r1, #63	; 0x3f
    b800:	400a      	ands	r2, r1
    b802:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    b804:	230b      	movs	r3, #11
    b806:	18fb      	adds	r3, r7, r3
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2b00      	cmp	r3, #0
    b80c:	d036      	beq.n	b87c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    b80e:	230b      	movs	r3, #11
    b810:	18fb      	adds	r3, r7, r3
    b812:	781b      	ldrb	r3, [r3, #0]
    b814:	2202      	movs	r2, #2
    b816:	4013      	ands	r3, r2
    b818:	d004      	beq.n	b824 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    b81a:	68fb      	ldr	r3, [r7, #12]
    b81c:	2202      	movs	r2, #2
    b81e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    b820:	231a      	movs	r3, #26
    b822:	e031      	b.n	b888 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    b824:	230b      	movs	r3, #11
    b826:	18fb      	adds	r3, r7, r3
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	2204      	movs	r2, #4
    b82c:	4013      	ands	r3, r2
    b82e:	d004      	beq.n	b83a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    b830:	68fb      	ldr	r3, [r7, #12]
    b832:	2204      	movs	r2, #4
    b834:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    b836:	231e      	movs	r3, #30
    b838:	e026      	b.n	b888 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    b83a:	230b      	movs	r3, #11
    b83c:	18fb      	adds	r3, r7, r3
    b83e:	781b      	ldrb	r3, [r3, #0]
    b840:	2201      	movs	r2, #1
    b842:	4013      	ands	r3, r2
    b844:	d004      	beq.n	b850 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    b846:	68fb      	ldr	r3, [r7, #12]
    b848:	2201      	movs	r2, #1
    b84a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    b84c:	2313      	movs	r3, #19
    b84e:	e01b      	b.n	b888 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    b850:	230b      	movs	r3, #11
    b852:	18fb      	adds	r3, r7, r3
    b854:	781b      	ldrb	r3, [r3, #0]
    b856:	2210      	movs	r2, #16
    b858:	4013      	ands	r3, r2
    b85a:	d004      	beq.n	b866 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    b85c:	68fb      	ldr	r3, [r7, #12]
    b85e:	2210      	movs	r2, #16
    b860:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    b862:	2342      	movs	r3, #66	; 0x42
    b864:	e010      	b.n	b888 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    b866:	230b      	movs	r3, #11
    b868:	18fb      	adds	r3, r7, r3
    b86a:	781b      	ldrb	r3, [r3, #0]
    b86c:	2220      	movs	r2, #32
    b86e:	4013      	ands	r3, r2
    b870:	d004      	beq.n	b87c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    b872:	68fb      	ldr	r3, [r7, #12]
    b874:	2220      	movs	r2, #32
    b876:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    b878:	2341      	movs	r3, #65	; 0x41
    b87a:	e005      	b.n	b888 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    b87c:	68fb      	ldr	r3, [r7, #12]
    b87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    b880:	b29a      	uxth	r2, r3
    b882:	683b      	ldr	r3, [r7, #0]
    b884:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    b886:	2300      	movs	r3, #0
}
    b888:	0018      	movs	r0, r3
    b88a:	46bd      	mov	sp, r7
    b88c:	b004      	add	sp, #16
    b88e:	bd80      	pop	{r7, pc}
    b890:	0000b1dd 	.word	0x0000b1dd

0000b894 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    b894:	b580      	push	{r7, lr}
    b896:	b084      	sub	sp, #16
    b898:	af00      	add	r7, sp, #0
    b89a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    b89c:	687b      	ldr	r3, [r7, #4]
    b89e:	681b      	ldr	r3, [r3, #0]
    b8a0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    b8a2:	68fb      	ldr	r3, [r7, #12]
    b8a4:	69db      	ldr	r3, [r3, #28]
    b8a6:	1e5a      	subs	r2, r3, #1
    b8a8:	4193      	sbcs	r3, r2
    b8aa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    b8ac:	0018      	movs	r0, r3
    b8ae:	46bd      	mov	sp, r7
    b8b0:	b004      	add	sp, #16
    b8b2:	bd80      	pop	{r7, pc}

0000b8b4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b082      	sub	sp, #8
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    b8bc:	46c0      	nop			; (mov r8, r8)
    b8be:	687b      	ldr	r3, [r7, #4]
    b8c0:	0018      	movs	r0, r3
    b8c2:	4b04      	ldr	r3, [pc, #16]	; (b8d4 <_usart_wait_for_sync+0x20>)
    b8c4:	4798      	blx	r3
    b8c6:	1e03      	subs	r3, r0, #0
    b8c8:	d1f9      	bne.n	b8be <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    b8ca:	46c0      	nop			; (mov r8, r8)
    b8cc:	46bd      	mov	sp, r7
    b8ce:	b002      	add	sp, #8
    b8d0:	bd80      	pop	{r7, pc}
    b8d2:	46c0      	nop			; (mov r8, r8)
    b8d4:	0000b895 	.word	0x0000b895

0000b8d8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    b8d8:	b580      	push	{r7, lr}
    b8da:	b088      	sub	sp, #32
    b8dc:	af00      	add	r7, sp, #0
    b8de:	0002      	movs	r2, r0
    b8e0:	1dfb      	adds	r3, r7, #7
    b8e2:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    b8e4:	1dfb      	adds	r3, r7, #7
    b8e6:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    b8e8:	4ba3      	ldr	r3, [pc, #652]	; (bb78 <_usart_interrupt_handler+0x2a0>)
    b8ea:	0092      	lsls	r2, r2, #2
    b8ec:	58d3      	ldr	r3, [r2, r3]
    b8ee:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    b8f0:	69bb      	ldr	r3, [r7, #24]
    b8f2:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    b8f4:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    b8f6:	69bb      	ldr	r3, [r7, #24]
    b8f8:	0018      	movs	r0, r3
    b8fa:	4ba0      	ldr	r3, [pc, #640]	; (bb7c <_usart_interrupt_handler+0x2a4>)
    b8fc:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    b8fe:	697b      	ldr	r3, [r7, #20]
    b900:	7e1b      	ldrb	r3, [r3, #24]
    b902:	b2da      	uxtb	r2, r3
    b904:	2312      	movs	r3, #18
    b906:	18fb      	adds	r3, r7, r3
    b908:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    b90a:	697b      	ldr	r3, [r7, #20]
    b90c:	7d9b      	ldrb	r3, [r3, #22]
    b90e:	b2db      	uxtb	r3, r3
    b910:	b29a      	uxth	r2, r3
    b912:	2312      	movs	r3, #18
    b914:	18fb      	adds	r3, r7, r3
    b916:	2112      	movs	r1, #18
    b918:	1879      	adds	r1, r7, r1
    b91a:	8809      	ldrh	r1, [r1, #0]
    b91c:	400a      	ands	r2, r1
    b91e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    b920:	69bb      	ldr	r3, [r7, #24]
    b922:	2230      	movs	r2, #48	; 0x30
    b924:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    b926:	69ba      	ldr	r2, [r7, #24]
    b928:	2131      	movs	r1, #49	; 0x31
    b92a:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    b92c:	4013      	ands	r3, r2
    b92e:	b2da      	uxtb	r2, r3
    b930:	2310      	movs	r3, #16
    b932:	18fb      	adds	r3, r7, r3
    b934:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    b936:	2312      	movs	r3, #18
    b938:	18fb      	adds	r3, r7, r3
    b93a:	881b      	ldrh	r3, [r3, #0]
    b93c:	2201      	movs	r2, #1
    b93e:	4013      	ands	r3, r2
    b940:	d044      	beq.n	b9cc <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    b942:	69bb      	ldr	r3, [r7, #24]
    b944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b946:	b29b      	uxth	r3, r3
    b948:	2b00      	cmp	r3, #0
    b94a:	d03c      	beq.n	b9c6 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    b94c:	69bb      	ldr	r3, [r7, #24]
    b94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b950:	781b      	ldrb	r3, [r3, #0]
    b952:	b2da      	uxtb	r2, r3
    b954:	231c      	movs	r3, #28
    b956:	18fb      	adds	r3, r7, r3
    b958:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    b95a:	69bb      	ldr	r3, [r7, #24]
    b95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b95e:	1c5a      	adds	r2, r3, #1
    b960:	69bb      	ldr	r3, [r7, #24]
    b962:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    b964:	69bb      	ldr	r3, [r7, #24]
    b966:	795b      	ldrb	r3, [r3, #5]
    b968:	2b01      	cmp	r3, #1
    b96a:	d113      	bne.n	b994 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    b96c:	69bb      	ldr	r3, [r7, #24]
    b96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	b2db      	uxtb	r3, r3
    b974:	021b      	lsls	r3, r3, #8
    b976:	b21a      	sxth	r2, r3
    b978:	231c      	movs	r3, #28
    b97a:	18fb      	adds	r3, r7, r3
    b97c:	2100      	movs	r1, #0
    b97e:	5e5b      	ldrsh	r3, [r3, r1]
    b980:	4313      	orrs	r3, r2
    b982:	b21a      	sxth	r2, r3
    b984:	231c      	movs	r3, #28
    b986:	18fb      	adds	r3, r7, r3
    b988:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    b98a:	69bb      	ldr	r3, [r7, #24]
    b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b98e:	1c5a      	adds	r2, r3, #1
    b990:	69bb      	ldr	r3, [r7, #24]
    b992:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    b994:	231c      	movs	r3, #28
    b996:	18fb      	adds	r3, r7, r3
    b998:	881b      	ldrh	r3, [r3, #0]
    b99a:	05db      	lsls	r3, r3, #23
    b99c:	0ddb      	lsrs	r3, r3, #23
    b99e:	b29a      	uxth	r2, r3
    b9a0:	697b      	ldr	r3, [r7, #20]
    b9a2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    b9a4:	69bb      	ldr	r3, [r7, #24]
    b9a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    b9a8:	b29b      	uxth	r3, r3
    b9aa:	3b01      	subs	r3, #1
    b9ac:	b29b      	uxth	r3, r3
    b9ae:	69ba      	ldr	r2, [r7, #24]
    b9b0:	1c19      	adds	r1, r3, #0
    b9b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    b9b4:	2b00      	cmp	r3, #0
    b9b6:	d109      	bne.n	b9cc <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b9b8:	697b      	ldr	r3, [r7, #20]
    b9ba:	2201      	movs	r2, #1
    b9bc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    b9be:	697b      	ldr	r3, [r7, #20]
    b9c0:	2202      	movs	r2, #2
    b9c2:	759a      	strb	r2, [r3, #22]
    b9c4:	e002      	b.n	b9cc <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    b9c6:	697b      	ldr	r3, [r7, #20]
    b9c8:	2201      	movs	r2, #1
    b9ca:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    b9cc:	2312      	movs	r3, #18
    b9ce:	18fb      	adds	r3, r7, r3
    b9d0:	881b      	ldrh	r3, [r3, #0]
    b9d2:	2202      	movs	r2, #2
    b9d4:	4013      	ands	r3, r2
    b9d6:	d011      	beq.n	b9fc <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    b9d8:	697b      	ldr	r3, [r7, #20]
    b9da:	2202      	movs	r2, #2
    b9dc:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    b9de:	69bb      	ldr	r3, [r7, #24]
    b9e0:	2233      	movs	r2, #51	; 0x33
    b9e2:	2100      	movs	r1, #0
    b9e4:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    b9e6:	2310      	movs	r3, #16
    b9e8:	18fb      	adds	r3, r7, r3
    b9ea:	881b      	ldrh	r3, [r3, #0]
    b9ec:	2201      	movs	r2, #1
    b9ee:	4013      	ands	r3, r2
    b9f0:	d004      	beq.n	b9fc <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    b9f2:	69bb      	ldr	r3, [r7, #24]
    b9f4:	68db      	ldr	r3, [r3, #12]
    b9f6:	69ba      	ldr	r2, [r7, #24]
    b9f8:	0010      	movs	r0, r2
    b9fa:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    b9fc:	2312      	movs	r3, #18
    b9fe:	18fb      	adds	r3, r7, r3
    ba00:	881b      	ldrh	r3, [r3, #0]
    ba02:	2204      	movs	r2, #4
    ba04:	4013      	ands	r3, r2
    ba06:	d100      	bne.n	ba0a <_usart_interrupt_handler+0x132>
    ba08:	e0bd      	b.n	bb86 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    ba0a:	69bb      	ldr	r3, [r7, #24]
    ba0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    ba0e:	b29b      	uxth	r3, r3
    ba10:	2b00      	cmp	r3, #0
    ba12:	d100      	bne.n	ba16 <_usart_interrupt_handler+0x13e>
    ba14:	e0b4      	b.n	bb80 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    ba16:	697b      	ldr	r3, [r7, #20]
    ba18:	8b5b      	ldrh	r3, [r3, #26]
    ba1a:	b29b      	uxth	r3, r3
    ba1c:	b2da      	uxtb	r2, r3
    ba1e:	231f      	movs	r3, #31
    ba20:	18fb      	adds	r3, r7, r3
    ba22:	213f      	movs	r1, #63	; 0x3f
    ba24:	400a      	ands	r2, r1
    ba26:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    ba28:	231f      	movs	r3, #31
    ba2a:	18fb      	adds	r3, r7, r3
    ba2c:	781b      	ldrb	r3, [r3, #0]
    ba2e:	2208      	movs	r2, #8
    ba30:	4013      	ands	r3, r2
    ba32:	d007      	beq.n	ba44 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    ba34:	231f      	movs	r3, #31
    ba36:	18fb      	adds	r3, r7, r3
    ba38:	221f      	movs	r2, #31
    ba3a:	18ba      	adds	r2, r7, r2
    ba3c:	7812      	ldrb	r2, [r2, #0]
    ba3e:	2108      	movs	r1, #8
    ba40:	438a      	bics	r2, r1
    ba42:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    ba44:	231f      	movs	r3, #31
    ba46:	18fb      	adds	r3, r7, r3
    ba48:	781b      	ldrb	r3, [r3, #0]
    ba4a:	2b00      	cmp	r3, #0
    ba4c:	d050      	beq.n	baf0 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    ba4e:	231f      	movs	r3, #31
    ba50:	18fb      	adds	r3, r7, r3
    ba52:	781b      	ldrb	r3, [r3, #0]
    ba54:	2202      	movs	r2, #2
    ba56:	4013      	ands	r3, r2
    ba58:	d007      	beq.n	ba6a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    ba5a:	69bb      	ldr	r3, [r7, #24]
    ba5c:	2232      	movs	r2, #50	; 0x32
    ba5e:	211a      	movs	r1, #26
    ba60:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    ba62:	697b      	ldr	r3, [r7, #20]
    ba64:	2202      	movs	r2, #2
    ba66:	835a      	strh	r2, [r3, #26]
    ba68:	e036      	b.n	bad8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    ba6a:	231f      	movs	r3, #31
    ba6c:	18fb      	adds	r3, r7, r3
    ba6e:	781b      	ldrb	r3, [r3, #0]
    ba70:	2204      	movs	r2, #4
    ba72:	4013      	ands	r3, r2
    ba74:	d007      	beq.n	ba86 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    ba76:	69bb      	ldr	r3, [r7, #24]
    ba78:	2232      	movs	r2, #50	; 0x32
    ba7a:	211e      	movs	r1, #30
    ba7c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    ba7e:	697b      	ldr	r3, [r7, #20]
    ba80:	2204      	movs	r2, #4
    ba82:	835a      	strh	r2, [r3, #26]
    ba84:	e028      	b.n	bad8 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    ba86:	231f      	movs	r3, #31
    ba88:	18fb      	adds	r3, r7, r3
    ba8a:	781b      	ldrb	r3, [r3, #0]
    ba8c:	2201      	movs	r2, #1
    ba8e:	4013      	ands	r3, r2
    ba90:	d007      	beq.n	baa2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    ba92:	69bb      	ldr	r3, [r7, #24]
    ba94:	2232      	movs	r2, #50	; 0x32
    ba96:	2113      	movs	r1, #19
    ba98:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    ba9a:	697b      	ldr	r3, [r7, #20]
    ba9c:	2201      	movs	r2, #1
    ba9e:	835a      	strh	r2, [r3, #26]
    baa0:	e01a      	b.n	bad8 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    baa2:	231f      	movs	r3, #31
    baa4:	18fb      	adds	r3, r7, r3
    baa6:	781b      	ldrb	r3, [r3, #0]
    baa8:	2210      	movs	r2, #16
    baaa:	4013      	ands	r3, r2
    baac:	d007      	beq.n	babe <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    baae:	69bb      	ldr	r3, [r7, #24]
    bab0:	2232      	movs	r2, #50	; 0x32
    bab2:	2142      	movs	r1, #66	; 0x42
    bab4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    bab6:	697b      	ldr	r3, [r7, #20]
    bab8:	2210      	movs	r2, #16
    baba:	835a      	strh	r2, [r3, #26]
    babc:	e00c      	b.n	bad8 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    babe:	231f      	movs	r3, #31
    bac0:	18fb      	adds	r3, r7, r3
    bac2:	781b      	ldrb	r3, [r3, #0]
    bac4:	2220      	movs	r2, #32
    bac6:	4013      	ands	r3, r2
    bac8:	d006      	beq.n	bad8 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    baca:	69bb      	ldr	r3, [r7, #24]
    bacc:	2232      	movs	r2, #50	; 0x32
    bace:	2141      	movs	r1, #65	; 0x41
    bad0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    bad2:	697b      	ldr	r3, [r7, #20]
    bad4:	2220      	movs	r2, #32
    bad6:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    bad8:	2310      	movs	r3, #16
    bada:	18fb      	adds	r3, r7, r3
    badc:	881b      	ldrh	r3, [r3, #0]
    bade:	2204      	movs	r2, #4
    bae0:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    bae2:	d050      	beq.n	bb86 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    bae4:	69bb      	ldr	r3, [r7, #24]
    bae6:	695b      	ldr	r3, [r3, #20]
    bae8:	69ba      	ldr	r2, [r7, #24]
    baea:	0010      	movs	r0, r2
    baec:	4798      	blx	r3
    baee:	e04a      	b.n	bb86 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    baf0:	697b      	ldr	r3, [r7, #20]
    baf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    baf4:	b29a      	uxth	r2, r3
    baf6:	230e      	movs	r3, #14
    baf8:	18fb      	adds	r3, r7, r3
    bafa:	05d2      	lsls	r2, r2, #23
    bafc:	0dd2      	lsrs	r2, r2, #23
    bafe:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    bb00:	69bb      	ldr	r3, [r7, #24]
    bb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb04:	220e      	movs	r2, #14
    bb06:	18ba      	adds	r2, r7, r2
    bb08:	8812      	ldrh	r2, [r2, #0]
    bb0a:	b2d2      	uxtb	r2, r2
    bb0c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    bb0e:	69bb      	ldr	r3, [r7, #24]
    bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb12:	1c5a      	adds	r2, r3, #1
    bb14:	69bb      	ldr	r3, [r7, #24]
    bb16:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    bb18:	69bb      	ldr	r3, [r7, #24]
    bb1a:	795b      	ldrb	r3, [r3, #5]
    bb1c:	2b01      	cmp	r3, #1
    bb1e:	d10d      	bne.n	bb3c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    bb20:	69bb      	ldr	r3, [r7, #24]
    bb22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb24:	220e      	movs	r2, #14
    bb26:	18ba      	adds	r2, r7, r2
    bb28:	8812      	ldrh	r2, [r2, #0]
    bb2a:	0a12      	lsrs	r2, r2, #8
    bb2c:	b292      	uxth	r2, r2
    bb2e:	b2d2      	uxtb	r2, r2
    bb30:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    bb32:	69bb      	ldr	r3, [r7, #24]
    bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb36:	1c5a      	adds	r2, r3, #1
    bb38:	69bb      	ldr	r3, [r7, #24]
    bb3a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    bb3c:	69bb      	ldr	r3, [r7, #24]
    bb3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    bb40:	b29b      	uxth	r3, r3
    bb42:	3b01      	subs	r3, #1
    bb44:	b29b      	uxth	r3, r3
    bb46:	69ba      	ldr	r2, [r7, #24]
    bb48:	1c19      	adds	r1, r3, #0
    bb4a:	8591      	strh	r1, [r2, #44]	; 0x2c
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d11a      	bne.n	bb86 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    bb50:	697b      	ldr	r3, [r7, #20]
    bb52:	2204      	movs	r2, #4
    bb54:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    bb56:	69bb      	ldr	r3, [r7, #24]
    bb58:	2232      	movs	r2, #50	; 0x32
    bb5a:	2100      	movs	r1, #0
    bb5c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    bb5e:	2310      	movs	r3, #16
    bb60:	18fb      	adds	r3, r7, r3
    bb62:	881b      	ldrh	r3, [r3, #0]
    bb64:	2202      	movs	r2, #2
    bb66:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    bb68:	d00d      	beq.n	bb86 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    bb6a:	69bb      	ldr	r3, [r7, #24]
    bb6c:	691b      	ldr	r3, [r3, #16]
    bb6e:	69ba      	ldr	r2, [r7, #24]
    bb70:	0010      	movs	r0, r2
    bb72:	4798      	blx	r3
    bb74:	e007      	b.n	bb86 <_usart_interrupt_handler+0x2ae>
    bb76:	46c0      	nop			; (mov r8, r8)
    bb78:	20004790 	.word	0x20004790
    bb7c:	0000b8b5 	.word	0x0000b8b5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    bb80:	697b      	ldr	r3, [r7, #20]
    bb82:	2204      	movs	r2, #4
    bb84:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    bb86:	2312      	movs	r3, #18
    bb88:	18fb      	adds	r3, r7, r3
    bb8a:	881b      	ldrh	r3, [r3, #0]
    bb8c:	2210      	movs	r2, #16
    bb8e:	4013      	ands	r3, r2
    bb90:	d010      	beq.n	bbb4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    bb92:	697b      	ldr	r3, [r7, #20]
    bb94:	2210      	movs	r2, #16
    bb96:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    bb98:	697b      	ldr	r3, [r7, #20]
    bb9a:	2210      	movs	r2, #16
    bb9c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    bb9e:	2310      	movs	r3, #16
    bba0:	18fb      	adds	r3, r7, r3
    bba2:	881b      	ldrh	r3, [r3, #0]
    bba4:	2210      	movs	r2, #16
    bba6:	4013      	ands	r3, r2
    bba8:	d004      	beq.n	bbb4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    bbaa:	69bb      	ldr	r3, [r7, #24]
    bbac:	69db      	ldr	r3, [r3, #28]
    bbae:	69ba      	ldr	r2, [r7, #24]
    bbb0:	0010      	movs	r0, r2
    bbb2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    bbb4:	2312      	movs	r3, #18
    bbb6:	18fb      	adds	r3, r7, r3
    bbb8:	881b      	ldrh	r3, [r3, #0]
    bbba:	2220      	movs	r2, #32
    bbbc:	4013      	ands	r3, r2
    bbbe:	d010      	beq.n	bbe2 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    bbc0:	697b      	ldr	r3, [r7, #20]
    bbc2:	2220      	movs	r2, #32
    bbc4:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    bbc6:	697b      	ldr	r3, [r7, #20]
    bbc8:	2220      	movs	r2, #32
    bbca:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    bbcc:	2310      	movs	r3, #16
    bbce:	18fb      	adds	r3, r7, r3
    bbd0:	881b      	ldrh	r3, [r3, #0]
    bbd2:	2208      	movs	r2, #8
    bbd4:	4013      	ands	r3, r2
    bbd6:	d004      	beq.n	bbe2 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    bbd8:	69bb      	ldr	r3, [r7, #24]
    bbda:	699b      	ldr	r3, [r3, #24]
    bbdc:	69ba      	ldr	r2, [r7, #24]
    bbde:	0010      	movs	r0, r2
    bbe0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    bbe2:	2312      	movs	r3, #18
    bbe4:	18fb      	adds	r3, r7, r3
    bbe6:	881b      	ldrh	r3, [r3, #0]
    bbe8:	2208      	movs	r2, #8
    bbea:	4013      	ands	r3, r2
    bbec:	d010      	beq.n	bc10 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    bbee:	697b      	ldr	r3, [r7, #20]
    bbf0:	2208      	movs	r2, #8
    bbf2:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    bbf4:	697b      	ldr	r3, [r7, #20]
    bbf6:	2208      	movs	r2, #8
    bbf8:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    bbfa:	2310      	movs	r3, #16
    bbfc:	18fb      	adds	r3, r7, r3
    bbfe:	881b      	ldrh	r3, [r3, #0]
    bc00:	2220      	movs	r2, #32
    bc02:	4013      	ands	r3, r2
    bc04:	d004      	beq.n	bc10 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    bc06:	69bb      	ldr	r3, [r7, #24]
    bc08:	6a1b      	ldr	r3, [r3, #32]
    bc0a:	69ba      	ldr	r2, [r7, #24]
    bc0c:	0010      	movs	r0, r2
    bc0e:	4798      	blx	r3
		}
	}
#endif
}
    bc10:	46c0      	nop			; (mov r8, r8)
    bc12:	46bd      	mov	sp, r7
    bc14:	b008      	add	sp, #32
    bc16:	bd80      	pop	{r7, pc}

0000bc18 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    bc18:	b580      	push	{r7, lr}
    bc1a:	b082      	sub	sp, #8
    bc1c:	af00      	add	r7, sp, #0
    bc1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    bc20:	687b      	ldr	r3, [r7, #4]
    bc22:	2201      	movs	r2, #1
    bc24:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    bc26:	687b      	ldr	r3, [r7, #4]
    bc28:	2200      	movs	r2, #0
    bc2a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    bc2c:	687b      	ldr	r3, [r7, #4]
    bc2e:	2206      	movs	r2, #6
    bc30:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    bc32:	687b      	ldr	r3, [r7, #4]
    bc34:	2200      	movs	r2, #0
    bc36:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    bc38:	687b      	ldr	r3, [r7, #4]
    bc3a:	2200      	movs	r2, #0
    bc3c:	725a      	strb	r2, [r3, #9]
}
    bc3e:	46c0      	nop			; (mov r8, r8)
    bc40:	46bd      	mov	sp, r7
    bc42:	b002      	add	sp, #8
    bc44:	bd80      	pop	{r7, pc}
    bc46:	46c0      	nop			; (mov r8, r8)

0000bc48 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    bc48:	b580      	push	{r7, lr}
    bc4a:	b082      	sub	sp, #8
    bc4c:	af00      	add	r7, sp, #0
    bc4e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    bc50:	687b      	ldr	r3, [r7, #4]
    bc52:	2200      	movs	r2, #0
    bc54:	701a      	strb	r2, [r3, #0]
}
    bc56:	46c0      	nop			; (mov r8, r8)
    bc58:	46bd      	mov	sp, r7
    bc5a:	b002      	add	sp, #8
    bc5c:	bd80      	pop	{r7, pc}
    bc5e:	46c0      	nop			; (mov r8, r8)

0000bc60 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    bc60:	b580      	push	{r7, lr}
    bc62:	b082      	sub	sp, #8
    bc64:	af00      	add	r7, sp, #0
    bc66:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    bc68:	687b      	ldr	r3, [r7, #4]
    bc6a:	2200      	movs	r2, #0
    bc6c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	2204      	movs	r2, #4
    bc72:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    bc74:	687b      	ldr	r3, [r7, #4]
    bc76:	2200      	movs	r2, #0
    bc78:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    bc7a:	687b      	ldr	r3, [r7, #4]
    bc7c:	2280      	movs	r2, #128	; 0x80
    bc7e:	0212      	lsls	r2, r2, #8
    bc80:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    bc82:	687b      	ldr	r3, [r7, #4]
    bc84:	2200      	movs	r2, #0
    bc86:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	2201      	movs	r2, #1
    bc8c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    bc8e:	687b      	ldr	r3, [r7, #4]
    bc90:	2200      	movs	r2, #0
    bc92:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    bc94:	687b      	ldr	r3, [r7, #4]
    bc96:	2201      	movs	r2, #1
    bc98:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    bc9a:	687b      	ldr	r3, [r7, #4]
    bc9c:	2200      	movs	r2, #0
    bc9e:	739a      	strb	r2, [r3, #14]
}
    bca0:	46c0      	nop			; (mov r8, r8)
    bca2:	46bd      	mov	sp, r7
    bca4:	b002      	add	sp, #8
    bca6:	bd80      	pop	{r7, pc}

0000bca8 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    bca8:	b580      	push	{r7, lr}
    bcaa:	b082      	sub	sp, #8
    bcac:	af00      	add	r7, sp, #0
    bcae:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    bcb0:	687b      	ldr	r3, [r7, #4]
    bcb2:	2203      	movs	r2, #3
    bcb4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    bcb6:	687b      	ldr	r3, [r7, #4]
    bcb8:	2200      	movs	r2, #0
    bcba:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    bcbc:	687b      	ldr	r3, [r7, #4]
    bcbe:	2201      	movs	r2, #1
    bcc0:	709a      	strb	r2, [r3, #2]
}
    bcc2:	46c0      	nop			; (mov r8, r8)
    bcc4:	46bd      	mov	sp, r7
    bcc6:	b002      	add	sp, #8
    bcc8:	bd80      	pop	{r7, pc}
    bcca:	46c0      	nop			; (mov r8, r8)

0000bccc <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    bccc:	b580      	push	{r7, lr}
    bcce:	b082      	sub	sp, #8
    bcd0:	af00      	add	r7, sp, #0
    bcd2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    bcd4:	687b      	ldr	r3, [r7, #4]
    bcd6:	2200      	movs	r2, #0
    bcd8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    bcda:	687b      	ldr	r3, [r7, #4]
    bcdc:	2200      	movs	r2, #0
    bcde:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    bce0:	687b      	ldr	r3, [r7, #4]
    bce2:	2200      	movs	r2, #0
    bce4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    bce6:	687b      	ldr	r3, [r7, #4]
    bce8:	2200      	movs	r2, #0
    bcea:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    bcec:	687b      	ldr	r3, [r7, #4]
    bcee:	2200      	movs	r2, #0
    bcf0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    bcf2:	687b      	ldr	r3, [r7, #4]
    bcf4:	2201      	movs	r2, #1
    bcf6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    bcf8:	687b      	ldr	r3, [r7, #4]
    bcfa:	2207      	movs	r2, #7
    bcfc:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    bcfe:	687b      	ldr	r3, [r7, #4]
    bd00:	223f      	movs	r2, #63	; 0x3f
    bd02:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    bd04:	687b      	ldr	r3, [r7, #4]
    bd06:	2201      	movs	r2, #1
    bd08:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    bd0a:	687b      	ldr	r3, [r7, #4]
    bd0c:	2201      	movs	r2, #1
    bd0e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    bd10:	687b      	ldr	r3, [r7, #4]
    bd12:	2206      	movs	r2, #6
    bd14:	821a      	strh	r2, [r3, #16]
}
    bd16:	46c0      	nop			; (mov r8, r8)
    bd18:	46bd      	mov	sp, r7
    bd1a:	b002      	add	sp, #8
    bd1c:	bd80      	pop	{r7, pc}
    bd1e:	46c0      	nop			; (mov r8, r8)

0000bd20 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    bd20:	b580      	push	{r7, lr}
    bd22:	b082      	sub	sp, #8
    bd24:	af00      	add	r7, sp, #0
    bd26:	0002      	movs	r2, r0
    bd28:	1dfb      	adds	r3, r7, #7
    bd2a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    bd2c:	4a03      	ldr	r2, [pc, #12]	; (bd3c <system_cpu_clock_set_divider+0x1c>)
    bd2e:	1dfb      	adds	r3, r7, #7
    bd30:	781b      	ldrb	r3, [r3, #0]
    bd32:	7213      	strb	r3, [r2, #8]
}
    bd34:	46c0      	nop			; (mov r8, r8)
    bd36:	46bd      	mov	sp, r7
    bd38:	b002      	add	sp, #8
    bd3a:	bd80      	pop	{r7, pc}
    bd3c:	40000400 	.word	0x40000400

0000bd40 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    bd40:	b580      	push	{r7, lr}
    bd42:	b082      	sub	sp, #8
    bd44:	af00      	add	r7, sp, #0
    bd46:	0002      	movs	r2, r0
    bd48:	1dfb      	adds	r3, r7, #7
    bd4a:	701a      	strb	r2, [r3, #0]
    bd4c:	1dbb      	adds	r3, r7, #6
    bd4e:	1c0a      	adds	r2, r1, #0
    bd50:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    bd52:	1dfb      	adds	r3, r7, #7
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	2b01      	cmp	r3, #1
    bd58:	d008      	beq.n	bd6c <system_apb_clock_set_divider+0x2c>
    bd5a:	2b02      	cmp	r3, #2
    bd5c:	d00b      	beq.n	bd76 <system_apb_clock_set_divider+0x36>
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d10e      	bne.n	bd80 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    bd62:	4a0b      	ldr	r2, [pc, #44]	; (bd90 <system_apb_clock_set_divider+0x50>)
    bd64:	1dbb      	adds	r3, r7, #6
    bd66:	781b      	ldrb	r3, [r3, #0]
    bd68:	7253      	strb	r3, [r2, #9]
			break;
    bd6a:	e00b      	b.n	bd84 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    bd6c:	4a08      	ldr	r2, [pc, #32]	; (bd90 <system_apb_clock_set_divider+0x50>)
    bd6e:	1dbb      	adds	r3, r7, #6
    bd70:	781b      	ldrb	r3, [r3, #0]
    bd72:	7293      	strb	r3, [r2, #10]
			break;
    bd74:	e006      	b.n	bd84 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    bd76:	4a06      	ldr	r2, [pc, #24]	; (bd90 <system_apb_clock_set_divider+0x50>)
    bd78:	1dbb      	adds	r3, r7, #6
    bd7a:	781b      	ldrb	r3, [r3, #0]
    bd7c:	72d3      	strb	r3, [r2, #11]
			break;
    bd7e:	e001      	b.n	bd84 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    bd80:	2317      	movs	r3, #23
    bd82:	e000      	b.n	bd86 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    bd84:	2300      	movs	r3, #0
}
    bd86:	0018      	movs	r0, r3
    bd88:	46bd      	mov	sp, r7
    bd8a:	b002      	add	sp, #8
    bd8c:	bd80      	pop	{r7, pc}
    bd8e:	46c0      	nop			; (mov r8, r8)
    bd90:	40000400 	.word	0x40000400

0000bd94 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    bd94:	b580      	push	{r7, lr}
    bd96:	b082      	sub	sp, #8
    bd98:	af00      	add	r7, sp, #0
    bd9a:	0002      	movs	r2, r0
    bd9c:	1dfb      	adds	r3, r7, #7
    bd9e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    bda0:	4a08      	ldr	r2, [pc, #32]	; (bdc4 <system_flash_set_waitstates+0x30>)
    bda2:	1dfb      	adds	r3, r7, #7
    bda4:	781b      	ldrb	r3, [r3, #0]
    bda6:	210f      	movs	r1, #15
    bda8:	400b      	ands	r3, r1
    bdaa:	b2d9      	uxtb	r1, r3
    bdac:	6853      	ldr	r3, [r2, #4]
    bdae:	200f      	movs	r0, #15
    bdb0:	4001      	ands	r1, r0
    bdb2:	0049      	lsls	r1, r1, #1
    bdb4:	201e      	movs	r0, #30
    bdb6:	4383      	bics	r3, r0
    bdb8:	430b      	orrs	r3, r1
    bdba:	6053      	str	r3, [r2, #4]
}
    bdbc:	46c0      	nop			; (mov r8, r8)
    bdbe:	46bd      	mov	sp, r7
    bdc0:	b002      	add	sp, #8
    bdc2:	bd80      	pop	{r7, pc}
    bdc4:	41004000 	.word	0x41004000

0000bdc8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    bdc8:	b580      	push	{r7, lr}
    bdca:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    bdcc:	46c0      	nop			; (mov r8, r8)
    bdce:	4b04      	ldr	r3, [pc, #16]	; (bde0 <_system_dfll_wait_for_sync+0x18>)
    bdd0:	68db      	ldr	r3, [r3, #12]
    bdd2:	2210      	movs	r2, #16
    bdd4:	4013      	ands	r3, r2
    bdd6:	d0fa      	beq.n	bdce <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    bdd8:	46c0      	nop			; (mov r8, r8)
    bdda:	46bd      	mov	sp, r7
    bddc:	bd80      	pop	{r7, pc}
    bdde:	46c0      	nop			; (mov r8, r8)
    bde0:	40000800 	.word	0x40000800

0000bde4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    bde4:	b580      	push	{r7, lr}
    bde6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    bde8:	4b0c      	ldr	r3, [pc, #48]	; (be1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bdea:	2202      	movs	r2, #2
    bdec:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    bdee:	4b0c      	ldr	r3, [pc, #48]	; (be20 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    bdf0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    bdf2:	4a0a      	ldr	r2, [pc, #40]	; (be1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bdf4:	4b0b      	ldr	r3, [pc, #44]	; (be24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bdf6:	689b      	ldr	r3, [r3, #8]
    bdf8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    bdfa:	4a08      	ldr	r2, [pc, #32]	; (be1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    bdfc:	4b09      	ldr	r3, [pc, #36]	; (be24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    bdfe:	685b      	ldr	r3, [r3, #4]
    be00:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    be02:	4b06      	ldr	r3, [pc, #24]	; (be1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    be04:	2200      	movs	r2, #0
    be06:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    be08:	4b05      	ldr	r3, [pc, #20]	; (be20 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    be0a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    be0c:	4a03      	ldr	r2, [pc, #12]	; (be1c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    be0e:	4b05      	ldr	r3, [pc, #20]	; (be24 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    be10:	681b      	ldr	r3, [r3, #0]
    be12:	b29b      	uxth	r3, r3
    be14:	8493      	strh	r3, [r2, #36]	; 0x24
}
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	46bd      	mov	sp, r7
    be1a:	bd80      	pop	{r7, pc}
    be1c:	40000800 	.word	0x40000800
    be20:	0000bdc9 	.word	0x0000bdc9
    be24:	20000124 	.word	0x20000124

0000be28 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    be28:	b580      	push	{r7, lr}
    be2a:	b082      	sub	sp, #8
    be2c:	af00      	add	r7, sp, #0
    be2e:	0002      	movs	r2, r0
    be30:	1dfb      	adds	r3, r7, #7
    be32:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    be34:	1dfb      	adds	r3, r7, #7
    be36:	781b      	ldrb	r3, [r3, #0]
    be38:	2b08      	cmp	r3, #8
    be3a:	d840      	bhi.n	bebe <system_clock_source_get_hz+0x96>
    be3c:	009a      	lsls	r2, r3, #2
    be3e:	4b22      	ldr	r3, [pc, #136]	; (bec8 <system_clock_source_get_hz+0xa0>)
    be40:	18d3      	adds	r3, r2, r3
    be42:	681b      	ldr	r3, [r3, #0]
    be44:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    be46:	4b21      	ldr	r3, [pc, #132]	; (becc <system_clock_source_get_hz+0xa4>)
    be48:	691b      	ldr	r3, [r3, #16]
    be4a:	e039      	b.n	bec0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    be4c:	4b20      	ldr	r3, [pc, #128]	; (bed0 <system_clock_source_get_hz+0xa8>)
    be4e:	6a1b      	ldr	r3, [r3, #32]
    be50:	059b      	lsls	r3, r3, #22
    be52:	0f9b      	lsrs	r3, r3, #30
    be54:	b2db      	uxtb	r3, r3
    be56:	001a      	movs	r2, r3
    be58:	4b1e      	ldr	r3, [pc, #120]	; (bed4 <system_clock_source_get_hz+0xac>)
    be5a:	40d3      	lsrs	r3, r2
    be5c:	e030      	b.n	bec0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    be5e:	2380      	movs	r3, #128	; 0x80
    be60:	021b      	lsls	r3, r3, #8
    be62:	e02d      	b.n	bec0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    be64:	2380      	movs	r3, #128	; 0x80
    be66:	021b      	lsls	r3, r3, #8
    be68:	e02a      	b.n	bec0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    be6a:	4b18      	ldr	r3, [pc, #96]	; (becc <system_clock_source_get_hz+0xa4>)
    be6c:	695b      	ldr	r3, [r3, #20]
    be6e:	e027      	b.n	bec0 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    be70:	4b16      	ldr	r3, [pc, #88]	; (becc <system_clock_source_get_hz+0xa4>)
    be72:	681b      	ldr	r3, [r3, #0]
    be74:	2202      	movs	r2, #2
    be76:	4013      	ands	r3, r2
    be78:	d101      	bne.n	be7e <system_clock_source_get_hz+0x56>
			return 0;
    be7a:	2300      	movs	r3, #0
    be7c:	e020      	b.n	bec0 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    be7e:	4b16      	ldr	r3, [pc, #88]	; (bed8 <system_clock_source_get_hz+0xb0>)
    be80:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    be82:	4b12      	ldr	r3, [pc, #72]	; (becc <system_clock_source_get_hz+0xa4>)
    be84:	681b      	ldr	r3, [r3, #0]
    be86:	2204      	movs	r2, #4
    be88:	4013      	ands	r3, r2
    be8a:	d009      	beq.n	bea0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    be8c:	2000      	movs	r0, #0
    be8e:	4b13      	ldr	r3, [pc, #76]	; (bedc <system_clock_source_get_hz+0xb4>)
    be90:	4798      	blx	r3
    be92:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    be94:	4b0d      	ldr	r3, [pc, #52]	; (becc <system_clock_source_get_hz+0xa4>)
    be96:	689b      	ldr	r3, [r3, #8]
    be98:	041b      	lsls	r3, r3, #16
    be9a:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    be9c:	4353      	muls	r3, r2
    be9e:	e00f      	b.n	bec0 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    bea0:	4b0f      	ldr	r3, [pc, #60]	; (bee0 <system_clock_source_get_hz+0xb8>)
    bea2:	e00d      	b.n	bec0 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    bea4:	4a0a      	ldr	r2, [pc, #40]	; (bed0 <system_clock_source_get_hz+0xa8>)
    bea6:	2350      	movs	r3, #80	; 0x50
    bea8:	5cd3      	ldrb	r3, [r2, r3]
    beaa:	b2db      	uxtb	r3, r3
    beac:	001a      	movs	r2, r3
    beae:	2304      	movs	r3, #4
    beb0:	4013      	ands	r3, r2
    beb2:	d101      	bne.n	beb8 <system_clock_source_get_hz+0x90>
			return 0;
    beb4:	2300      	movs	r3, #0
    beb6:	e003      	b.n	bec0 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    beb8:	4b04      	ldr	r3, [pc, #16]	; (becc <system_clock_source_get_hz+0xa4>)
    beba:	68db      	ldr	r3, [r3, #12]
    bebc:	e000      	b.n	bec0 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    bebe:	2300      	movs	r3, #0
	}
}
    bec0:	0018      	movs	r0, r3
    bec2:	46bd      	mov	sp, r7
    bec4:	b002      	add	sp, #8
    bec6:	bd80      	pop	{r7, pc}
    bec8:	00013d38 	.word	0x00013d38
    becc:	20000124 	.word	0x20000124
    bed0:	40000800 	.word	0x40000800
    bed4:	007a1200 	.word	0x007a1200
    bed8:	0000bdc9 	.word	0x0000bdc9
    bedc:	0000ca35 	.word	0x0000ca35
    bee0:	02dc6c00 	.word	0x02dc6c00

0000bee4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    bee4:	b580      	push	{r7, lr}
    bee6:	b084      	sub	sp, #16
    bee8:	af00      	add	r7, sp, #0
    beea:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    beec:	4b1a      	ldr	r3, [pc, #104]	; (bf58 <system_clock_source_osc8m_set_config+0x74>)
    beee:	6a1b      	ldr	r3, [r3, #32]
    bef0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    bef2:	687b      	ldr	r3, [r7, #4]
    bef4:	781b      	ldrb	r3, [r3, #0]
    bef6:	1c1a      	adds	r2, r3, #0
    bef8:	2303      	movs	r3, #3
    befa:	4013      	ands	r3, r2
    befc:	b2da      	uxtb	r2, r3
    befe:	230d      	movs	r3, #13
    bf00:	18fb      	adds	r3, r7, r3
    bf02:	2103      	movs	r1, #3
    bf04:	400a      	ands	r2, r1
    bf06:	0010      	movs	r0, r2
    bf08:	781a      	ldrb	r2, [r3, #0]
    bf0a:	2103      	movs	r1, #3
    bf0c:	438a      	bics	r2, r1
    bf0e:	1c11      	adds	r1, r2, #0
    bf10:	1c02      	adds	r2, r0, #0
    bf12:	430a      	orrs	r2, r1
    bf14:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    bf16:	687b      	ldr	r3, [r7, #4]
    bf18:	789a      	ldrb	r2, [r3, #2]
    bf1a:	230c      	movs	r3, #12
    bf1c:	18fb      	adds	r3, r7, r3
    bf1e:	01d0      	lsls	r0, r2, #7
    bf20:	781a      	ldrb	r2, [r3, #0]
    bf22:	217f      	movs	r1, #127	; 0x7f
    bf24:	400a      	ands	r2, r1
    bf26:	1c11      	adds	r1, r2, #0
    bf28:	1c02      	adds	r2, r0, #0
    bf2a:	430a      	orrs	r2, r1
    bf2c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    bf2e:	687b      	ldr	r3, [r7, #4]
    bf30:	785a      	ldrb	r2, [r3, #1]
    bf32:	230c      	movs	r3, #12
    bf34:	18fb      	adds	r3, r7, r3
    bf36:	2101      	movs	r1, #1
    bf38:	400a      	ands	r2, r1
    bf3a:	0190      	lsls	r0, r2, #6
    bf3c:	781a      	ldrb	r2, [r3, #0]
    bf3e:	2140      	movs	r1, #64	; 0x40
    bf40:	438a      	bics	r2, r1
    bf42:	1c11      	adds	r1, r2, #0
    bf44:	1c02      	adds	r2, r0, #0
    bf46:	430a      	orrs	r2, r1
    bf48:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    bf4a:	4b03      	ldr	r3, [pc, #12]	; (bf58 <system_clock_source_osc8m_set_config+0x74>)
    bf4c:	68fa      	ldr	r2, [r7, #12]
    bf4e:	621a      	str	r2, [r3, #32]
}
    bf50:	46c0      	nop			; (mov r8, r8)
    bf52:	46bd      	mov	sp, r7
    bf54:	b004      	add	sp, #16
    bf56:	bd80      	pop	{r7, pc}
    bf58:	40000800 	.word	0x40000800

0000bf5c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    bf5c:	b580      	push	{r7, lr}
    bf5e:	b084      	sub	sp, #16
    bf60:	af00      	add	r7, sp, #0
    bf62:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    bf64:	4a43      	ldr	r2, [pc, #268]	; (c074 <system_clock_source_xosc32k_set_config+0x118>)
    bf66:	230c      	movs	r3, #12
    bf68:	18fb      	adds	r3, r7, r3
    bf6a:	8a92      	ldrh	r2, [r2, #20]
    bf6c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    bf6e:	687b      	ldr	r3, [r7, #4]
    bf70:	785b      	ldrb	r3, [r3, #1]
    bf72:	1c1a      	adds	r2, r3, #0
    bf74:	2307      	movs	r3, #7
    bf76:	4013      	ands	r3, r2
    bf78:	b2da      	uxtb	r2, r3
    bf7a:	230c      	movs	r3, #12
    bf7c:	18fb      	adds	r3, r7, r3
    bf7e:	2107      	movs	r1, #7
    bf80:	400a      	ands	r2, r1
    bf82:	0010      	movs	r0, r2
    bf84:	785a      	ldrb	r2, [r3, #1]
    bf86:	2107      	movs	r1, #7
    bf88:	438a      	bics	r2, r1
    bf8a:	1c11      	adds	r1, r2, #0
    bf8c:	1c02      	adds	r2, r0, #0
    bf8e:	430a      	orrs	r2, r1
    bf90:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    bf92:	687b      	ldr	r3, [r7, #4]
    bf94:	781b      	ldrb	r3, [r3, #0]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d106      	bne.n	bfa8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    bf9a:	230c      	movs	r3, #12
    bf9c:	18fb      	adds	r3, r7, r3
    bf9e:	781a      	ldrb	r2, [r3, #0]
    bfa0:	2104      	movs	r1, #4
    bfa2:	430a      	orrs	r2, r1
    bfa4:	701a      	strb	r2, [r3, #0]
    bfa6:	e005      	b.n	bfb4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    bfa8:	230c      	movs	r3, #12
    bfaa:	18fb      	adds	r3, r7, r3
    bfac:	781a      	ldrb	r2, [r3, #0]
    bfae:	2104      	movs	r1, #4
    bfb0:	438a      	bics	r2, r1
    bfb2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    bfb4:	687b      	ldr	r3, [r7, #4]
    bfb6:	789a      	ldrb	r2, [r3, #2]
    bfb8:	230c      	movs	r3, #12
    bfba:	18fb      	adds	r3, r7, r3
    bfbc:	2101      	movs	r1, #1
    bfbe:	400a      	ands	r2, r1
    bfc0:	0150      	lsls	r0, r2, #5
    bfc2:	781a      	ldrb	r2, [r3, #0]
    bfc4:	2120      	movs	r1, #32
    bfc6:	438a      	bics	r2, r1
    bfc8:	1c11      	adds	r1, r2, #0
    bfca:	1c02      	adds	r2, r0, #0
    bfcc:	430a      	orrs	r2, r1
    bfce:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    bfd0:	687b      	ldr	r3, [r7, #4]
    bfd2:	78da      	ldrb	r2, [r3, #3]
    bfd4:	230c      	movs	r3, #12
    bfd6:	18fb      	adds	r3, r7, r3
    bfd8:	2101      	movs	r1, #1
    bfda:	400a      	ands	r2, r1
    bfdc:	0110      	lsls	r0, r2, #4
    bfde:	781a      	ldrb	r2, [r3, #0]
    bfe0:	2110      	movs	r1, #16
    bfe2:	438a      	bics	r2, r1
    bfe4:	1c11      	adds	r1, r2, #0
    bfe6:	1c02      	adds	r2, r0, #0
    bfe8:	430a      	orrs	r2, r1
    bfea:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    bfec:	687b      	ldr	r3, [r7, #4]
    bfee:	791a      	ldrb	r2, [r3, #4]
    bff0:	230c      	movs	r3, #12
    bff2:	18fb      	adds	r3, r7, r3
    bff4:	2101      	movs	r1, #1
    bff6:	400a      	ands	r2, r1
    bff8:	00d0      	lsls	r0, r2, #3
    bffa:	781a      	ldrb	r2, [r3, #0]
    bffc:	2108      	movs	r1, #8
    bffe:	438a      	bics	r2, r1
    c000:	1c11      	adds	r1, r2, #0
    c002:	1c02      	adds	r2, r0, #0
    c004:	430a      	orrs	r2, r1
    c006:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    c008:	687b      	ldr	r3, [r7, #4]
    c00a:	7b5a      	ldrb	r2, [r3, #13]
    c00c:	230c      	movs	r3, #12
    c00e:	18fb      	adds	r3, r7, r3
    c010:	01d0      	lsls	r0, r2, #7
    c012:	781a      	ldrb	r2, [r3, #0]
    c014:	217f      	movs	r1, #127	; 0x7f
    c016:	400a      	ands	r2, r1
    c018:	1c11      	adds	r1, r2, #0
    c01a:	1c02      	adds	r2, r0, #0
    c01c:	430a      	orrs	r2, r1
    c01e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    c020:	687b      	ldr	r3, [r7, #4]
    c022:	7b1a      	ldrb	r2, [r3, #12]
    c024:	230c      	movs	r3, #12
    c026:	18fb      	adds	r3, r7, r3
    c028:	2101      	movs	r1, #1
    c02a:	400a      	ands	r2, r1
    c02c:	0190      	lsls	r0, r2, #6
    c02e:	781a      	ldrb	r2, [r3, #0]
    c030:	2140      	movs	r1, #64	; 0x40
    c032:	438a      	bics	r2, r1
    c034:	1c11      	adds	r1, r2, #0
    c036:	1c02      	adds	r2, r0, #0
    c038:	430a      	orrs	r2, r1
    c03a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    c03c:	687b      	ldr	r3, [r7, #4]
    c03e:	7b9a      	ldrb	r2, [r3, #14]
    c040:	230c      	movs	r3, #12
    c042:	18fb      	adds	r3, r7, r3
    c044:	2101      	movs	r1, #1
    c046:	400a      	ands	r2, r1
    c048:	0110      	lsls	r0, r2, #4
    c04a:	785a      	ldrb	r2, [r3, #1]
    c04c:	2110      	movs	r1, #16
    c04e:	438a      	bics	r2, r1
    c050:	1c11      	adds	r1, r2, #0
    c052:	1c02      	adds	r2, r0, #0
    c054:	430a      	orrs	r2, r1
    c056:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    c058:	687b      	ldr	r3, [r7, #4]
    c05a:	689a      	ldr	r2, [r3, #8]
    c05c:	4b06      	ldr	r3, [pc, #24]	; (c078 <system_clock_source_xosc32k_set_config+0x11c>)
    c05e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    c060:	4a04      	ldr	r2, [pc, #16]	; (c074 <system_clock_source_xosc32k_set_config+0x118>)
    c062:	230c      	movs	r3, #12
    c064:	18fb      	adds	r3, r7, r3
    c066:	881b      	ldrh	r3, [r3, #0]
    c068:	8293      	strh	r3, [r2, #20]
}
    c06a:	46c0      	nop			; (mov r8, r8)
    c06c:	46bd      	mov	sp, r7
    c06e:	b004      	add	sp, #16
    c070:	bd80      	pop	{r7, pc}
    c072:	46c0      	nop			; (mov r8, r8)
    c074:	40000800 	.word	0x40000800
    c078:	20000124 	.word	0x20000124

0000c07c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    c07c:	b580      	push	{r7, lr}
    c07e:	b082      	sub	sp, #8
    c080:	af00      	add	r7, sp, #0
    c082:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    c084:	687b      	ldr	r3, [r7, #4]
    c086:	7a1b      	ldrb	r3, [r3, #8]
    c088:	029b      	lsls	r3, r3, #10
    c08a:	041b      	lsls	r3, r3, #16
    c08c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    c08e:	687b      	ldr	r3, [r7, #4]
    c090:	895b      	ldrh	r3, [r3, #10]
    c092:	059b      	lsls	r3, r3, #22
    c094:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    c096:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    c098:	4b2a      	ldr	r3, [pc, #168]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c09a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    c09c:	687b      	ldr	r3, [r7, #4]
    c09e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    c0a0:	687b      	ldr	r3, [r7, #4]
    c0a2:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    c0a4:	4313      	orrs	r3, r2
    c0a6:	b2db      	uxtb	r3, r3
    c0a8:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    c0aa:	687b      	ldr	r3, [r7, #4]
    c0ac:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    c0ae:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    c0b0:	687a      	ldr	r2, [r7, #4]
    c0b2:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    c0b4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	785b      	ldrb	r3, [r3, #1]
    c0ba:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    c0bc:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    c0be:	4b21      	ldr	r3, [pc, #132]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c0c0:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    c0c2:	687b      	ldr	r3, [r7, #4]
    c0c4:	781b      	ldrb	r3, [r3, #0]
    c0c6:	2b04      	cmp	r3, #4
    c0c8:	d116      	bne.n	c0f8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    c0ca:	687b      	ldr	r3, [r7, #4]
    c0cc:	7b1b      	ldrb	r3, [r3, #12]
    c0ce:	069b      	lsls	r3, r3, #26
    c0d0:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    c0d2:	687b      	ldr	r3, [r7, #4]
    c0d4:	89db      	ldrh	r3, [r3, #14]
    c0d6:	041b      	lsls	r3, r3, #16
    c0d8:	0019      	movs	r1, r3
    c0da:	4b1b      	ldr	r3, [pc, #108]	; (c148 <system_clock_source_dfll_set_config+0xcc>)
    c0dc:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    c0de:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    c0e0:	687a      	ldr	r2, [r7, #4]
    c0e2:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    c0e4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    c0e6:	4b17      	ldr	r3, [pc, #92]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c0e8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    c0ea:	4b16      	ldr	r3, [pc, #88]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c0ec:	681b      	ldr	r3, [r3, #0]
    c0ee:	687a      	ldr	r2, [r7, #4]
    c0f0:	7812      	ldrb	r2, [r2, #0]
    c0f2:	431a      	orrs	r2, r3
    c0f4:	4b13      	ldr	r3, [pc, #76]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c0f6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    c0f8:	687b      	ldr	r3, [r7, #4]
    c0fa:	781b      	ldrb	r3, [r3, #0]
    c0fc:	2b20      	cmp	r3, #32
    c0fe:	d11c      	bne.n	c13a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    c100:	687b      	ldr	r3, [r7, #4]
    c102:	7b1b      	ldrb	r3, [r3, #12]
    c104:	069b      	lsls	r3, r3, #26
    c106:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    c108:	687b      	ldr	r3, [r7, #4]
    c10a:	89db      	ldrh	r3, [r3, #14]
    c10c:	041b      	lsls	r3, r3, #16
    c10e:	0019      	movs	r1, r3
    c110:	4b0d      	ldr	r3, [pc, #52]	; (c148 <system_clock_source_dfll_set_config+0xcc>)
    c112:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    c114:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    c116:	687a      	ldr	r2, [r7, #4]
    c118:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    c11a:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    c11c:	4b09      	ldr	r3, [pc, #36]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c11e:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    c120:	4b08      	ldr	r3, [pc, #32]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c122:	681b      	ldr	r3, [r3, #0]
    c124:	687a      	ldr	r2, [r7, #4]
    c126:	7812      	ldrb	r2, [r2, #0]
    c128:	2104      	movs	r1, #4
    c12a:	430a      	orrs	r2, r1
    c12c:	b2d2      	uxtb	r2, r2
    c12e:	4313      	orrs	r3, r2
    c130:	2280      	movs	r2, #128	; 0x80
    c132:	00d2      	lsls	r2, r2, #3
    c134:	431a      	orrs	r2, r3
    c136:	4b03      	ldr	r3, [pc, #12]	; (c144 <system_clock_source_dfll_set_config+0xc8>)
    c138:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    c13a:	46c0      	nop			; (mov r8, r8)
    c13c:	46bd      	mov	sp, r7
    c13e:	b002      	add	sp, #8
    c140:	bd80      	pop	{r7, pc}
    c142:	46c0      	nop			; (mov r8, r8)
    c144:	20000124 	.word	0x20000124
    c148:	03ff0000 	.word	0x03ff0000

0000c14c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    c14c:	b580      	push	{r7, lr}
    c14e:	b082      	sub	sp, #8
    c150:	af00      	add	r7, sp, #0
    c152:	0002      	movs	r2, r0
    c154:	1dfb      	adds	r3, r7, #7
    c156:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    c158:	1dfb      	adds	r3, r7, #7
    c15a:	781b      	ldrb	r3, [r3, #0]
    c15c:	2b08      	cmp	r3, #8
    c15e:	d83b      	bhi.n	c1d8 <system_clock_source_enable+0x8c>
    c160:	009a      	lsls	r2, r3, #2
    c162:	4b21      	ldr	r3, [pc, #132]	; (c1e8 <system_clock_source_enable+0x9c>)
    c164:	18d3      	adds	r3, r2, r3
    c166:	681b      	ldr	r3, [r3, #0]
    c168:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    c16a:	4b20      	ldr	r3, [pc, #128]	; (c1ec <system_clock_source_enable+0xa0>)
    c16c:	4a1f      	ldr	r2, [pc, #124]	; (c1ec <system_clock_source_enable+0xa0>)
    c16e:	6a12      	ldr	r2, [r2, #32]
    c170:	2102      	movs	r1, #2
    c172:	430a      	orrs	r2, r1
    c174:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    c176:	2300      	movs	r3, #0
    c178:	e031      	b.n	c1de <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    c17a:	4b1c      	ldr	r3, [pc, #112]	; (c1ec <system_clock_source_enable+0xa0>)
    c17c:	4a1b      	ldr	r2, [pc, #108]	; (c1ec <system_clock_source_enable+0xa0>)
    c17e:	6992      	ldr	r2, [r2, #24]
    c180:	2102      	movs	r1, #2
    c182:	430a      	orrs	r2, r1
    c184:	619a      	str	r2, [r3, #24]
		break;
    c186:	e029      	b.n	c1dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    c188:	4a18      	ldr	r2, [pc, #96]	; (c1ec <system_clock_source_enable+0xa0>)
    c18a:	4b18      	ldr	r3, [pc, #96]	; (c1ec <system_clock_source_enable+0xa0>)
    c18c:	8a1b      	ldrh	r3, [r3, #16]
    c18e:	b29b      	uxth	r3, r3
    c190:	2102      	movs	r1, #2
    c192:	430b      	orrs	r3, r1
    c194:	b29b      	uxth	r3, r3
    c196:	8213      	strh	r3, [r2, #16]
		break;
    c198:	e020      	b.n	c1dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    c19a:	4a14      	ldr	r2, [pc, #80]	; (c1ec <system_clock_source_enable+0xa0>)
    c19c:	4b13      	ldr	r3, [pc, #76]	; (c1ec <system_clock_source_enable+0xa0>)
    c19e:	8a9b      	ldrh	r3, [r3, #20]
    c1a0:	b29b      	uxth	r3, r3
    c1a2:	2102      	movs	r1, #2
    c1a4:	430b      	orrs	r3, r1
    c1a6:	b29b      	uxth	r3, r3
    c1a8:	8293      	strh	r3, [r2, #20]
		break;
    c1aa:	e017      	b.n	c1dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    c1ac:	4b10      	ldr	r3, [pc, #64]	; (c1f0 <system_clock_source_enable+0xa4>)
    c1ae:	681b      	ldr	r3, [r3, #0]
    c1b0:	2202      	movs	r2, #2
    c1b2:	431a      	orrs	r2, r3
    c1b4:	4b0e      	ldr	r3, [pc, #56]	; (c1f0 <system_clock_source_enable+0xa4>)
    c1b6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    c1b8:	4b0e      	ldr	r3, [pc, #56]	; (c1f4 <system_clock_source_enable+0xa8>)
    c1ba:	4798      	blx	r3
		break;
    c1bc:	e00e      	b.n	c1dc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    c1be:	4a0b      	ldr	r2, [pc, #44]	; (c1ec <system_clock_source_enable+0xa0>)
    c1c0:	490a      	ldr	r1, [pc, #40]	; (c1ec <system_clock_source_enable+0xa0>)
    c1c2:	2344      	movs	r3, #68	; 0x44
    c1c4:	5ccb      	ldrb	r3, [r1, r3]
    c1c6:	b2db      	uxtb	r3, r3
    c1c8:	2102      	movs	r1, #2
    c1ca:	430b      	orrs	r3, r1
    c1cc:	b2d9      	uxtb	r1, r3
    c1ce:	2344      	movs	r3, #68	; 0x44
    c1d0:	54d1      	strb	r1, [r2, r3]
		break;
    c1d2:	e003      	b.n	c1dc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    c1d4:	2300      	movs	r3, #0
    c1d6:	e002      	b.n	c1de <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c1d8:	2317      	movs	r3, #23
    c1da:	e000      	b.n	c1de <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    c1dc:	2300      	movs	r3, #0
}
    c1de:	0018      	movs	r0, r3
    c1e0:	46bd      	mov	sp, r7
    c1e2:	b002      	add	sp, #8
    c1e4:	bd80      	pop	{r7, pc}
    c1e6:	46c0      	nop			; (mov r8, r8)
    c1e8:	00013d5c 	.word	0x00013d5c
    c1ec:	40000800 	.word	0x40000800
    c1f0:	20000124 	.word	0x20000124
    c1f4:	0000bde5 	.word	0x0000bde5

0000c1f8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    c1f8:	b580      	push	{r7, lr}
    c1fa:	b084      	sub	sp, #16
    c1fc:	af00      	add	r7, sp, #0
    c1fe:	0002      	movs	r2, r0
    c200:	1dfb      	adds	r3, r7, #7
    c202:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    c204:	2300      	movs	r3, #0
    c206:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    c208:	1dfb      	adds	r3, r7, #7
    c20a:	781b      	ldrb	r3, [r3, #0]
    c20c:	2b08      	cmp	r3, #8
    c20e:	d821      	bhi.n	c254 <system_clock_source_is_ready+0x5c>
    c210:	009a      	lsls	r2, r3, #2
    c212:	4b18      	ldr	r3, [pc, #96]	; (c274 <system_clock_source_is_ready+0x7c>)
    c214:	18d3      	adds	r3, r2, r3
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    c21a:	2308      	movs	r3, #8
    c21c:	60fb      	str	r3, [r7, #12]
		break;
    c21e:	e01b      	b.n	c258 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    c220:	2304      	movs	r3, #4
    c222:	60fb      	str	r3, [r7, #12]
		break;
    c224:	e018      	b.n	c258 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    c226:	2301      	movs	r3, #1
    c228:	60fb      	str	r3, [r7, #12]
		break;
    c22a:	e015      	b.n	c258 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    c22c:	2302      	movs	r3, #2
    c22e:	60fb      	str	r3, [r7, #12]
		break;
    c230:	e012      	b.n	c258 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    c232:	23d0      	movs	r3, #208	; 0xd0
    c234:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    c236:	e00f      	b.n	c258 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    c238:	4a0f      	ldr	r2, [pc, #60]	; (c278 <system_clock_source_is_ready+0x80>)
    c23a:	2350      	movs	r3, #80	; 0x50
    c23c:	5cd3      	ldrb	r3, [r2, r3]
    c23e:	b2db      	uxtb	r3, r3
    c240:	001a      	movs	r2, r3
    c242:	2303      	movs	r3, #3
    c244:	4013      	ands	r3, r2
    c246:	3b03      	subs	r3, #3
    c248:	425a      	negs	r2, r3
    c24a:	4153      	adcs	r3, r2
    c24c:	b2db      	uxtb	r3, r3
    c24e:	e00c      	b.n	c26a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    c250:	2301      	movs	r3, #1
    c252:	e00a      	b.n	c26a <system_clock_source_is_ready+0x72>

	default:
		return false;
    c254:	2300      	movs	r3, #0
    c256:	e008      	b.n	c26a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    c258:	4b07      	ldr	r3, [pc, #28]	; (c278 <system_clock_source_is_ready+0x80>)
    c25a:	68db      	ldr	r3, [r3, #12]
    c25c:	68fa      	ldr	r2, [r7, #12]
    c25e:	401a      	ands	r2, r3
    c260:	68fb      	ldr	r3, [r7, #12]
    c262:	1ad3      	subs	r3, r2, r3
    c264:	425a      	negs	r2, r3
    c266:	4153      	adcs	r3, r2
    c268:	b2db      	uxtb	r3, r3
}
    c26a:	0018      	movs	r0, r3
    c26c:	46bd      	mov	sp, r7
    c26e:	b004      	add	sp, #16
    c270:	bd80      	pop	{r7, pc}
    c272:	46c0      	nop			; (mov r8, r8)
    c274:	00013d80 	.word	0x00013d80
    c278:	40000800 	.word	0x40000800

0000c27c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    c27c:	b580      	push	{r7, lr}
    c27e:	b082      	sub	sp, #8
    c280:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    c282:	003b      	movs	r3, r7
    c284:	2202      	movs	r2, #2
    c286:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c288:	2300      	movs	r3, #0
    c28a:	607b      	str	r3, [r7, #4]
    c28c:	e009      	b.n	c2a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    c28e:	687b      	ldr	r3, [r7, #4]
    c290:	b2db      	uxtb	r3, r3
    c292:	003a      	movs	r2, r7
    c294:	0011      	movs	r1, r2
    c296:	0018      	movs	r0, r3
    c298:	4b05      	ldr	r3, [pc, #20]	; (c2b0 <_switch_peripheral_gclk+0x34>)
    c29a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    c29c:	687b      	ldr	r3, [r7, #4]
    c29e:	3301      	adds	r3, #1
    c2a0:	607b      	str	r3, [r7, #4]
    c2a2:	687b      	ldr	r3, [r7, #4]
    c2a4:	2b24      	cmp	r3, #36	; 0x24
    c2a6:	d9f2      	bls.n	c28e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    c2a8:	46c0      	nop			; (mov r8, r8)
    c2aa:	46bd      	mov	sp, r7
    c2ac:	b002      	add	sp, #8
    c2ae:	bd80      	pop	{r7, pc}
    c2b0:	0000c911 	.word	0x0000c911

0000c2b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    c2b4:	b580      	push	{r7, lr}
    c2b6:	b0aa      	sub	sp, #168	; 0xa8
    c2b8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    c2ba:	4bb4      	ldr	r3, [pc, #720]	; (c58c <system_clock_init+0x2d8>)
    c2bc:	22c2      	movs	r2, #194	; 0xc2
    c2be:	00d2      	lsls	r2, r2, #3
    c2c0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    c2c2:	2002      	movs	r0, #2
    c2c4:	4bb2      	ldr	r3, [pc, #712]	; (c590 <system_clock_init+0x2dc>)
    c2c6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    c2c8:	4bb2      	ldr	r3, [pc, #712]	; (c594 <system_clock_init+0x2e0>)
    c2ca:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    c2cc:	2394      	movs	r3, #148	; 0x94
    c2ce:	18fb      	adds	r3, r7, r3
    c2d0:	0018      	movs	r0, r3
    c2d2:	4bb1      	ldr	r3, [pc, #708]	; (c598 <system_clock_init+0x2e4>)
    c2d4:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    c2d6:	2394      	movs	r3, #148	; 0x94
    c2d8:	18fb      	adds	r3, r7, r3
    c2da:	2280      	movs	r2, #128	; 0x80
    c2dc:	0212      	lsls	r2, r2, #8
    c2de:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    c2e0:	2394      	movs	r3, #148	; 0x94
    c2e2:	18fb      	adds	r3, r7, r3
    c2e4:	2200      	movs	r2, #0
    c2e6:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    c2e8:	2394      	movs	r3, #148	; 0x94
    c2ea:	18fb      	adds	r3, r7, r3
    c2ec:	2203      	movs	r2, #3
    c2ee:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    c2f0:	2394      	movs	r3, #148	; 0x94
    c2f2:	18fb      	adds	r3, r7, r3
    c2f4:	2200      	movs	r2, #0
    c2f6:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    c2f8:	2394      	movs	r3, #148	; 0x94
    c2fa:	18fb      	adds	r3, r7, r3
    c2fc:	2200      	movs	r2, #0
    c2fe:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    c300:	2394      	movs	r3, #148	; 0x94
    c302:	18fb      	adds	r3, r7, r3
    c304:	2201      	movs	r2, #1
    c306:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    c308:	2394      	movs	r3, #148	; 0x94
    c30a:	18fb      	adds	r3, r7, r3
    c30c:	2200      	movs	r2, #0
    c30e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    c310:	2394      	movs	r3, #148	; 0x94
    c312:	18fb      	adds	r3, r7, r3
    c314:	2200      	movs	r2, #0
    c316:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    c318:	2394      	movs	r3, #148	; 0x94
    c31a:	18fb      	adds	r3, r7, r3
    c31c:	0018      	movs	r0, r3
    c31e:	4b9f      	ldr	r3, [pc, #636]	; (c59c <system_clock_init+0x2e8>)
    c320:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    c322:	2005      	movs	r0, #5
    c324:	4b9e      	ldr	r3, [pc, #632]	; (c5a0 <system_clock_init+0x2ec>)
    c326:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    c328:	46c0      	nop			; (mov r8, r8)
    c32a:	2005      	movs	r0, #5
    c32c:	4b9d      	ldr	r3, [pc, #628]	; (c5a4 <system_clock_init+0x2f0>)
    c32e:	4798      	blx	r3
    c330:	0003      	movs	r3, r0
    c332:	001a      	movs	r2, r3
    c334:	2301      	movs	r3, #1
    c336:	4053      	eors	r3, r2
    c338:	b2db      	uxtb	r3, r3
    c33a:	2b00      	cmp	r3, #0
    c33c:	d1f5      	bne.n	c32a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    c33e:	4a93      	ldr	r2, [pc, #588]	; (c58c <system_clock_init+0x2d8>)
    c340:	8a93      	ldrh	r3, [r2, #20]
    c342:	2180      	movs	r1, #128	; 0x80
    c344:	430b      	orrs	r3, r1
    c346:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    c348:	2380      	movs	r3, #128	; 0x80
    c34a:	18fb      	adds	r3, r7, r3
    c34c:	0018      	movs	r0, r3
    c34e:	4b96      	ldr	r3, [pc, #600]	; (c5a8 <system_clock_init+0x2f4>)
    c350:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    c352:	2380      	movs	r3, #128	; 0x80
    c354:	18fb      	adds	r3, r7, r3
    c356:	2204      	movs	r2, #4
    c358:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    c35a:	2380      	movs	r3, #128	; 0x80
    c35c:	18fb      	adds	r3, r7, r3
    c35e:	2200      	movs	r2, #0
    c360:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    c362:	4b92      	ldr	r3, [pc, #584]	; (c5ac <system_clock_init+0x2f8>)
    c364:	681b      	ldr	r3, [r3, #0]
    c366:	0e9b      	lsrs	r3, r3, #26
    c368:	22a4      	movs	r2, #164	; 0xa4
    c36a:	18ba      	adds	r2, r7, r2
    c36c:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    c36e:	23a4      	movs	r3, #164	; 0xa4
    c370:	18fb      	adds	r3, r7, r3
    c372:	681b      	ldr	r3, [r3, #0]
    c374:	2b3f      	cmp	r3, #63	; 0x3f
    c376:	d103      	bne.n	c380 <system_clock_init+0xcc>
		coarse = 0x1f;
    c378:	231f      	movs	r3, #31
    c37a:	22a4      	movs	r2, #164	; 0xa4
    c37c:	18ba      	adds	r2, r7, r2
    c37e:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    c380:	23a4      	movs	r3, #164	; 0xa4
    c382:	18fb      	adds	r3, r7, r3
    c384:	681b      	ldr	r3, [r3, #0]
    c386:	b2da      	uxtb	r2, r3
    c388:	2380      	movs	r3, #128	; 0x80
    c38a:	18fb      	adds	r3, r7, r3
    c38c:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    c38e:	2380      	movs	r3, #128	; 0x80
    c390:	18fb      	adds	r3, r7, r3
    c392:	2200      	movs	r2, #0
    c394:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    c396:	2380      	movs	r3, #128	; 0x80
    c398:	18fb      	adds	r3, r7, r3
    c39a:	2200      	movs	r2, #0
    c39c:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    c39e:	2380      	movs	r3, #128	; 0x80
    c3a0:	18fb      	adds	r3, r7, r3
    c3a2:	2200      	movs	r2, #0
    c3a4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    c3a6:	2380      	movs	r3, #128	; 0x80
    c3a8:	18fb      	adds	r3, r7, r3
    c3aa:	2200      	movs	r2, #0
    c3ac:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    c3ae:	2380      	movs	r3, #128	; 0x80
    c3b0:	18fb      	adds	r3, r7, r3
    c3b2:	4a7f      	ldr	r2, [pc, #508]	; (c5b0 <system_clock_init+0x2fc>)
    c3b4:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    c3b6:	2380      	movs	r3, #128	; 0x80
    c3b8:	18fb      	adds	r3, r7, r3
    c3ba:	2207      	movs	r2, #7
    c3bc:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    c3be:	2380      	movs	r3, #128	; 0x80
    c3c0:	18fb      	adds	r3, r7, r3
    c3c2:	223f      	movs	r2, #63	; 0x3f
    c3c4:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    c3c6:	2380      	movs	r3, #128	; 0x80
    c3c8:	18fb      	adds	r3, r7, r3
    c3ca:	0018      	movs	r0, r3
    c3cc:	4b79      	ldr	r3, [pc, #484]	; (c5b4 <system_clock_init+0x300>)
    c3ce:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    c3d0:	237c      	movs	r3, #124	; 0x7c
    c3d2:	18fb      	adds	r3, r7, r3
    c3d4:	0018      	movs	r0, r3
    c3d6:	4b78      	ldr	r3, [pc, #480]	; (c5b8 <system_clock_init+0x304>)
    c3d8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    c3da:	237c      	movs	r3, #124	; 0x7c
    c3dc:	18fb      	adds	r3, r7, r3
    c3de:	2200      	movs	r2, #0
    c3e0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    c3e2:	237c      	movs	r3, #124	; 0x7c
    c3e4:	18fb      	adds	r3, r7, r3
    c3e6:	2201      	movs	r2, #1
    c3e8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    c3ea:	237c      	movs	r3, #124	; 0x7c
    c3ec:	18fb      	adds	r3, r7, r3
    c3ee:	2200      	movs	r2, #0
    c3f0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    c3f2:	237c      	movs	r3, #124	; 0x7c
    c3f4:	18fb      	adds	r3, r7, r3
    c3f6:	0018      	movs	r0, r3
    c3f8:	4b70      	ldr	r3, [pc, #448]	; (c5bc <system_clock_init+0x308>)
    c3fa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    c3fc:	2006      	movs	r0, #6
    c3fe:	4b68      	ldr	r3, [pc, #416]	; (c5a0 <system_clock_init+0x2ec>)
    c400:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    c402:	4b6f      	ldr	r3, [pc, #444]	; (c5c0 <system_clock_init+0x30c>)
    c404:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    c406:	2364      	movs	r3, #100	; 0x64
    c408:	18fb      	adds	r3, r7, r3
    c40a:	0018      	movs	r0, r3
    c40c:	4b6d      	ldr	r3, [pc, #436]	; (c5c4 <system_clock_init+0x310>)
    c40e:	4798      	blx	r3
    c410:	2364      	movs	r3, #100	; 0x64
    c412:	18fb      	adds	r3, r7, r3
    c414:	2205      	movs	r2, #5
    c416:	701a      	strb	r2, [r3, #0]
    c418:	2364      	movs	r3, #100	; 0x64
    c41a:	18fb      	adds	r3, r7, r3
    c41c:	2201      	movs	r2, #1
    c41e:	605a      	str	r2, [r3, #4]
    c420:	2364      	movs	r3, #100	; 0x64
    c422:	18fb      	adds	r3, r7, r3
    c424:	2200      	movs	r2, #0
    c426:	721a      	strb	r2, [r3, #8]
    c428:	2364      	movs	r3, #100	; 0x64
    c42a:	18fb      	adds	r3, r7, r3
    c42c:	2200      	movs	r2, #0
    c42e:	725a      	strb	r2, [r3, #9]
    c430:	2364      	movs	r3, #100	; 0x64
    c432:	18fb      	adds	r3, r7, r3
    c434:	0019      	movs	r1, r3
    c436:	2001      	movs	r0, #1
    c438:	4b63      	ldr	r3, [pc, #396]	; (c5c8 <system_clock_init+0x314>)
    c43a:	4798      	blx	r3
    c43c:	2001      	movs	r0, #1
    c43e:	4b63      	ldr	r3, [pc, #396]	; (c5cc <system_clock_init+0x318>)
    c440:	4798      	blx	r3
    c442:	2340      	movs	r3, #64	; 0x40
    c444:	18fb      	adds	r3, r7, r3
    c446:	0018      	movs	r0, r3
    c448:	4b5e      	ldr	r3, [pc, #376]	; (c5c4 <system_clock_init+0x310>)
    c44a:	4798      	blx	r3
    c44c:	2340      	movs	r3, #64	; 0x40
    c44e:	18fb      	adds	r3, r7, r3
    c450:	2206      	movs	r2, #6
    c452:	701a      	strb	r2, [r3, #0]
    c454:	2340      	movs	r3, #64	; 0x40
    c456:	18fb      	adds	r3, r7, r3
    c458:	2202      	movs	r2, #2
    c45a:	605a      	str	r2, [r3, #4]
    c45c:	2340      	movs	r3, #64	; 0x40
    c45e:	18fb      	adds	r3, r7, r3
    c460:	2200      	movs	r2, #0
    c462:	721a      	strb	r2, [r3, #8]
    c464:	2340      	movs	r3, #64	; 0x40
    c466:	18fb      	adds	r3, r7, r3
    c468:	2201      	movs	r2, #1
    c46a:	725a      	strb	r2, [r3, #9]
    c46c:	2340      	movs	r3, #64	; 0x40
    c46e:	18fb      	adds	r3, r7, r3
    c470:	0019      	movs	r1, r3
    c472:	2004      	movs	r0, #4
    c474:	4b54      	ldr	r3, [pc, #336]	; (c5c8 <system_clock_init+0x314>)
    c476:	4798      	blx	r3
    c478:	2004      	movs	r0, #4
    c47a:	4b54      	ldr	r3, [pc, #336]	; (c5cc <system_clock_init+0x318>)
    c47c:	4798      	blx	r3
    c47e:	2334      	movs	r3, #52	; 0x34
    c480:	18fb      	adds	r3, r7, r3
    c482:	0018      	movs	r0, r3
    c484:	4b4f      	ldr	r3, [pc, #316]	; (c5c4 <system_clock_init+0x310>)
    c486:	4798      	blx	r3
    c488:	2334      	movs	r3, #52	; 0x34
    c48a:	18fb      	adds	r3, r7, r3
    c48c:	2206      	movs	r2, #6
    c48e:	701a      	strb	r2, [r3, #0]
    c490:	2334      	movs	r3, #52	; 0x34
    c492:	18fb      	adds	r3, r7, r3
    c494:	2210      	movs	r2, #16
    c496:	605a      	str	r2, [r3, #4]
    c498:	2334      	movs	r3, #52	; 0x34
    c49a:	18fb      	adds	r3, r7, r3
    c49c:	2200      	movs	r2, #0
    c49e:	721a      	strb	r2, [r3, #8]
    c4a0:	2334      	movs	r3, #52	; 0x34
    c4a2:	18fb      	adds	r3, r7, r3
    c4a4:	2201      	movs	r2, #1
    c4a6:	725a      	strb	r2, [r3, #9]
    c4a8:	2334      	movs	r3, #52	; 0x34
    c4aa:	18fb      	adds	r3, r7, r3
    c4ac:	0019      	movs	r1, r3
    c4ae:	2005      	movs	r0, #5
    c4b0:	4b45      	ldr	r3, [pc, #276]	; (c5c8 <system_clock_init+0x314>)
    c4b2:	4798      	blx	r3
    c4b4:	2005      	movs	r0, #5
    c4b6:	4b45      	ldr	r3, [pc, #276]	; (c5cc <system_clock_init+0x318>)
    c4b8:	4798      	blx	r3
    c4ba:	2328      	movs	r3, #40	; 0x28
    c4bc:	18fb      	adds	r3, r7, r3
    c4be:	0018      	movs	r0, r3
    c4c0:	4b40      	ldr	r3, [pc, #256]	; (c5c4 <system_clock_init+0x310>)
    c4c2:	4798      	blx	r3
    c4c4:	2328      	movs	r3, #40	; 0x28
    c4c6:	18fb      	adds	r3, r7, r3
    c4c8:	2206      	movs	r2, #6
    c4ca:	701a      	strb	r2, [r3, #0]
    c4cc:	2328      	movs	r3, #40	; 0x28
    c4ce:	18fb      	adds	r3, r7, r3
    c4d0:	2217      	movs	r2, #23
    c4d2:	605a      	str	r2, [r3, #4]
    c4d4:	2328      	movs	r3, #40	; 0x28
    c4d6:	18fb      	adds	r3, r7, r3
    c4d8:	2201      	movs	r2, #1
    c4da:	721a      	strb	r2, [r3, #8]
    c4dc:	2328      	movs	r3, #40	; 0x28
    c4de:	18fb      	adds	r3, r7, r3
    c4e0:	2201      	movs	r2, #1
    c4e2:	725a      	strb	r2, [r3, #9]
    c4e4:	2328      	movs	r3, #40	; 0x28
    c4e6:	18fb      	adds	r3, r7, r3
    c4e8:	0019      	movs	r1, r3
    c4ea:	2006      	movs	r0, #6
    c4ec:	4b36      	ldr	r3, [pc, #216]	; (c5c8 <system_clock_init+0x314>)
    c4ee:	4798      	blx	r3
    c4f0:	2006      	movs	r0, #6
    c4f2:	4b36      	ldr	r3, [pc, #216]	; (c5cc <system_clock_init+0x318>)
    c4f4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    c4f6:	230c      	movs	r3, #12
    c4f8:	18fb      	adds	r3, r7, r3
    c4fa:	0018      	movs	r0, r3
    c4fc:	4b34      	ldr	r3, [pc, #208]	; (c5d0 <system_clock_init+0x31c>)
    c4fe:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    c500:	230c      	movs	r3, #12
    c502:	18fb      	adds	r3, r7, r3
    c504:	2201      	movs	r2, #1
    c506:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    c508:	230c      	movs	r3, #12
    c50a:	18fb      	adds	r3, r7, r3
    c50c:	0019      	movs	r1, r3
    c50e:	2000      	movs	r0, #0
    c510:	4b30      	ldr	r3, [pc, #192]	; (c5d4 <system_clock_init+0x320>)
    c512:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    c514:	2000      	movs	r0, #0
    c516:	4b30      	ldr	r3, [pc, #192]	; (c5d8 <system_clock_init+0x324>)
    c518:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    c51a:	2007      	movs	r0, #7
    c51c:	4b20      	ldr	r3, [pc, #128]	; (c5a0 <system_clock_init+0x2ec>)
    c51e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    c520:	46c0      	nop			; (mov r8, r8)
    c522:	2007      	movs	r0, #7
    c524:	4b1f      	ldr	r3, [pc, #124]	; (c5a4 <system_clock_init+0x2f0>)
    c526:	4798      	blx	r3
    c528:	0003      	movs	r3, r0
    c52a:	001a      	movs	r2, r3
    c52c:	2301      	movs	r3, #1
    c52e:	4053      	eors	r3, r2
    c530:	b2db      	uxtb	r3, r3
    c532:	2b00      	cmp	r3, #0
    c534:	d1f5      	bne.n	c522 <system_clock_init+0x26e>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    c536:	2000      	movs	r0, #0
    c538:	4b28      	ldr	r3, [pc, #160]	; (c5dc <system_clock_init+0x328>)
    c53a:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    c53c:	2100      	movs	r1, #0
    c53e:	2000      	movs	r0, #0
    c540:	4b27      	ldr	r3, [pc, #156]	; (c5e0 <system_clock_init+0x32c>)
    c542:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    c544:	2100      	movs	r1, #0
    c546:	2001      	movs	r0, #1
    c548:	4b25      	ldr	r3, [pc, #148]	; (c5e0 <system_clock_init+0x32c>)
    c54a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    c54c:	2100      	movs	r1, #0
    c54e:	2002      	movs	r0, #2
    c550:	4b23      	ldr	r3, [pc, #140]	; (c5e0 <system_clock_init+0x32c>)
    c552:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    c554:	003b      	movs	r3, r7
    c556:	0018      	movs	r0, r3
    c558:	4b1a      	ldr	r3, [pc, #104]	; (c5c4 <system_clock_init+0x310>)
    c55a:	4798      	blx	r3
    c55c:	003b      	movs	r3, r7
    c55e:	2207      	movs	r2, #7
    c560:	701a      	strb	r2, [r3, #0]
    c562:	003b      	movs	r3, r7
    c564:	2201      	movs	r2, #1
    c566:	605a      	str	r2, [r3, #4]
    c568:	003b      	movs	r3, r7
    c56a:	2200      	movs	r2, #0
    c56c:	721a      	strb	r2, [r3, #8]
    c56e:	003b      	movs	r3, r7
    c570:	2200      	movs	r2, #0
    c572:	725a      	strb	r2, [r3, #9]
    c574:	003b      	movs	r3, r7
    c576:	0019      	movs	r1, r3
    c578:	2000      	movs	r0, #0
    c57a:	4b13      	ldr	r3, [pc, #76]	; (c5c8 <system_clock_init+0x314>)
    c57c:	4798      	blx	r3
    c57e:	2000      	movs	r0, #0
    c580:	4b12      	ldr	r3, [pc, #72]	; (c5cc <system_clock_init+0x318>)
    c582:	4798      	blx	r3
#endif
}
    c584:	46c0      	nop			; (mov r8, r8)
    c586:	46bd      	mov	sp, r7
    c588:	b02a      	add	sp, #168	; 0xa8
    c58a:	bd80      	pop	{r7, pc}
    c58c:	40000800 	.word	0x40000800
    c590:	0000bd95 	.word	0x0000bd95
    c594:	0000c27d 	.word	0x0000c27d
    c598:	0000bc61 	.word	0x0000bc61
    c59c:	0000bf5d 	.word	0x0000bf5d
    c5a0:	0000c14d 	.word	0x0000c14d
    c5a4:	0000c1f9 	.word	0x0000c1f9
    c5a8:	0000bccd 	.word	0x0000bccd
    c5ac:	00806024 	.word	0x00806024
    c5b0:	000005b9 	.word	0x000005b9
    c5b4:	0000c07d 	.word	0x0000c07d
    c5b8:	0000bca9 	.word	0x0000bca9
    c5bc:	0000bee5 	.word	0x0000bee5
    c5c0:	0000c689 	.word	0x0000c689
    c5c4:	0000bc19 	.word	0x0000bc19
    c5c8:	0000c6b9 	.word	0x0000c6b9
    c5cc:	0000c7dd 	.word	0x0000c7dd
    c5d0:	0000bc49 	.word	0x0000bc49
    c5d4:	0000c911 	.word	0x0000c911
    c5d8:	0000c955 	.word	0x0000c955
    c5dc:	0000bd21 	.word	0x0000bd21
    c5e0:	0000bd41 	.word	0x0000bd41

0000c5e4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    c5e4:	b580      	push	{r7, lr}
    c5e6:	b082      	sub	sp, #8
    c5e8:	af00      	add	r7, sp, #0
    c5ea:	0002      	movs	r2, r0
    c5ec:	6039      	str	r1, [r7, #0]
    c5ee:	1dfb      	adds	r3, r7, #7
    c5f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c5f2:	1dfb      	adds	r3, r7, #7
    c5f4:	781b      	ldrb	r3, [r3, #0]
    c5f6:	2b01      	cmp	r3, #1
    c5f8:	d00a      	beq.n	c610 <system_apb_clock_set_mask+0x2c>
    c5fa:	2b02      	cmp	r3, #2
    c5fc:	d00f      	beq.n	c61e <system_apb_clock_set_mask+0x3a>
    c5fe:	2b00      	cmp	r3, #0
    c600:	d114      	bne.n	c62c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    c602:	4b0e      	ldr	r3, [pc, #56]	; (c63c <system_apb_clock_set_mask+0x58>)
    c604:	4a0d      	ldr	r2, [pc, #52]	; (c63c <system_apb_clock_set_mask+0x58>)
    c606:	6991      	ldr	r1, [r2, #24]
    c608:	683a      	ldr	r2, [r7, #0]
    c60a:	430a      	orrs	r2, r1
    c60c:	619a      	str	r2, [r3, #24]
			break;
    c60e:	e00f      	b.n	c630 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    c610:	4b0a      	ldr	r3, [pc, #40]	; (c63c <system_apb_clock_set_mask+0x58>)
    c612:	4a0a      	ldr	r2, [pc, #40]	; (c63c <system_apb_clock_set_mask+0x58>)
    c614:	69d1      	ldr	r1, [r2, #28]
    c616:	683a      	ldr	r2, [r7, #0]
    c618:	430a      	orrs	r2, r1
    c61a:	61da      	str	r2, [r3, #28]
			break;
    c61c:	e008      	b.n	c630 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    c61e:	4b07      	ldr	r3, [pc, #28]	; (c63c <system_apb_clock_set_mask+0x58>)
    c620:	4a06      	ldr	r2, [pc, #24]	; (c63c <system_apb_clock_set_mask+0x58>)
    c622:	6a11      	ldr	r1, [r2, #32]
    c624:	683a      	ldr	r2, [r7, #0]
    c626:	430a      	orrs	r2, r1
    c628:	621a      	str	r2, [r3, #32]
			break;
    c62a:	e001      	b.n	c630 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    c62c:	2317      	movs	r3, #23
    c62e:	e000      	b.n	c632 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    c630:	2300      	movs	r3, #0
}
    c632:	0018      	movs	r0, r3
    c634:	46bd      	mov	sp, r7
    c636:	b002      	add	sp, #8
    c638:	bd80      	pop	{r7, pc}
    c63a:	46c0      	nop			; (mov r8, r8)
    c63c:	40000400 	.word	0x40000400

0000c640 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    c640:	b580      	push	{r7, lr}
    c642:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    c644:	4b02      	ldr	r3, [pc, #8]	; (c650 <system_interrupt_enter_critical_section+0x10>)
    c646:	4798      	blx	r3
}
    c648:	46c0      	nop			; (mov r8, r8)
    c64a:	46bd      	mov	sp, r7
    c64c:	bd80      	pop	{r7, pc}
    c64e:	46c0      	nop			; (mov r8, r8)
    c650:	000089d1 	.word	0x000089d1

0000c654 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    c654:	b580      	push	{r7, lr}
    c656:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    c658:	4b02      	ldr	r3, [pc, #8]	; (c664 <system_interrupt_leave_critical_section+0x10>)
    c65a:	4798      	blx	r3
}
    c65c:	46c0      	nop			; (mov r8, r8)
    c65e:	46bd      	mov	sp, r7
    c660:	bd80      	pop	{r7, pc}
    c662:	46c0      	nop			; (mov r8, r8)
    c664:	00008a25 	.word	0x00008a25

0000c668 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    c668:	b580      	push	{r7, lr}
    c66a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    c66c:	4b05      	ldr	r3, [pc, #20]	; (c684 <system_gclk_is_syncing+0x1c>)
    c66e:	785b      	ldrb	r3, [r3, #1]
    c670:	b2db      	uxtb	r3, r3
    c672:	b25b      	sxtb	r3, r3
    c674:	2b00      	cmp	r3, #0
    c676:	da01      	bge.n	c67c <system_gclk_is_syncing+0x14>
		return true;
    c678:	2301      	movs	r3, #1
    c67a:	e000      	b.n	c67e <system_gclk_is_syncing+0x16>
	}

	return false;
    c67c:	2300      	movs	r3, #0
}
    c67e:	0018      	movs	r0, r3
    c680:	46bd      	mov	sp, r7
    c682:	bd80      	pop	{r7, pc}
    c684:	40000c00 	.word	0x40000c00

0000c688 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    c688:	b580      	push	{r7, lr}
    c68a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    c68c:	2108      	movs	r1, #8
    c68e:	2000      	movs	r0, #0
    c690:	4b07      	ldr	r3, [pc, #28]	; (c6b0 <system_gclk_init+0x28>)
    c692:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    c694:	4b07      	ldr	r3, [pc, #28]	; (c6b4 <system_gclk_init+0x2c>)
    c696:	2201      	movs	r2, #1
    c698:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    c69a:	46c0      	nop			; (mov r8, r8)
    c69c:	4b05      	ldr	r3, [pc, #20]	; (c6b4 <system_gclk_init+0x2c>)
    c69e:	781b      	ldrb	r3, [r3, #0]
    c6a0:	b2db      	uxtb	r3, r3
    c6a2:	001a      	movs	r2, r3
    c6a4:	2301      	movs	r3, #1
    c6a6:	4013      	ands	r3, r2
    c6a8:	d1f8      	bne.n	c69c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    c6aa:	46c0      	nop			; (mov r8, r8)
    c6ac:	46bd      	mov	sp, r7
    c6ae:	bd80      	pop	{r7, pc}
    c6b0:	0000c5e5 	.word	0x0000c5e5
    c6b4:	40000c00 	.word	0x40000c00

0000c6b8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    c6b8:	b580      	push	{r7, lr}
    c6ba:	b086      	sub	sp, #24
    c6bc:	af00      	add	r7, sp, #0
    c6be:	0002      	movs	r2, r0
    c6c0:	6039      	str	r1, [r7, #0]
    c6c2:	1dfb      	adds	r3, r7, #7
    c6c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    c6c6:	1dfb      	adds	r3, r7, #7
    c6c8:	781b      	ldrb	r3, [r3, #0]
    c6ca:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    c6cc:	1dfb      	adds	r3, r7, #7
    c6ce:	781b      	ldrb	r3, [r3, #0]
    c6d0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    c6d2:	683b      	ldr	r3, [r7, #0]
    c6d4:	781b      	ldrb	r3, [r3, #0]
    c6d6:	021b      	lsls	r3, r3, #8
    c6d8:	001a      	movs	r2, r3
    c6da:	697b      	ldr	r3, [r7, #20]
    c6dc:	4313      	orrs	r3, r2
    c6de:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    c6e0:	683b      	ldr	r3, [r7, #0]
    c6e2:	785b      	ldrb	r3, [r3, #1]
    c6e4:	2b00      	cmp	r3, #0
    c6e6:	d004      	beq.n	c6f2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    c6e8:	697b      	ldr	r3, [r7, #20]
    c6ea:	2280      	movs	r2, #128	; 0x80
    c6ec:	02d2      	lsls	r2, r2, #11
    c6ee:	4313      	orrs	r3, r2
    c6f0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    c6f2:	683b      	ldr	r3, [r7, #0]
    c6f4:	7a5b      	ldrb	r3, [r3, #9]
    c6f6:	2b00      	cmp	r3, #0
    c6f8:	d004      	beq.n	c704 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    c6fa:	697b      	ldr	r3, [r7, #20]
    c6fc:	2280      	movs	r2, #128	; 0x80
    c6fe:	0312      	lsls	r2, r2, #12
    c700:	4313      	orrs	r3, r2
    c702:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    c704:	683b      	ldr	r3, [r7, #0]
    c706:	685b      	ldr	r3, [r3, #4]
    c708:	2b01      	cmp	r3, #1
    c70a:	d92c      	bls.n	c766 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    c70c:	683b      	ldr	r3, [r7, #0]
    c70e:	685a      	ldr	r2, [r3, #4]
    c710:	683b      	ldr	r3, [r7, #0]
    c712:	685b      	ldr	r3, [r3, #4]
    c714:	3b01      	subs	r3, #1
    c716:	4013      	ands	r3, r2
    c718:	d11a      	bne.n	c750 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    c71a:	2300      	movs	r3, #0
    c71c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c71e:	2302      	movs	r3, #2
    c720:	60bb      	str	r3, [r7, #8]
    c722:	e005      	b.n	c730 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    c724:	68fb      	ldr	r3, [r7, #12]
    c726:	3301      	adds	r3, #1
    c728:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    c72a:	68bb      	ldr	r3, [r7, #8]
    c72c:	005b      	lsls	r3, r3, #1
    c72e:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    c730:	683b      	ldr	r3, [r7, #0]
    c732:	685a      	ldr	r2, [r3, #4]
    c734:	68bb      	ldr	r3, [r7, #8]
    c736:	429a      	cmp	r2, r3
    c738:	d8f4      	bhi.n	c724 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    c73a:	68fb      	ldr	r3, [r7, #12]
    c73c:	021b      	lsls	r3, r3, #8
    c73e:	693a      	ldr	r2, [r7, #16]
    c740:	4313      	orrs	r3, r2
    c742:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    c744:	697b      	ldr	r3, [r7, #20]
    c746:	2280      	movs	r2, #128	; 0x80
    c748:	0352      	lsls	r2, r2, #13
    c74a:	4313      	orrs	r3, r2
    c74c:	617b      	str	r3, [r7, #20]
    c74e:	e00a      	b.n	c766 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    c750:	683b      	ldr	r3, [r7, #0]
    c752:	685b      	ldr	r3, [r3, #4]
    c754:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    c756:	693a      	ldr	r2, [r7, #16]
    c758:	4313      	orrs	r3, r2
    c75a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    c75c:	697b      	ldr	r3, [r7, #20]
    c75e:	2280      	movs	r2, #128	; 0x80
    c760:	0292      	lsls	r2, r2, #10
    c762:	4313      	orrs	r3, r2
    c764:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    c766:	683b      	ldr	r3, [r7, #0]
    c768:	7a1b      	ldrb	r3, [r3, #8]
    c76a:	2b00      	cmp	r3, #0
    c76c:	d004      	beq.n	c778 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    c76e:	697b      	ldr	r3, [r7, #20]
    c770:	2280      	movs	r2, #128	; 0x80
    c772:	0392      	lsls	r2, r2, #14
    c774:	4313      	orrs	r3, r2
    c776:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    c778:	46c0      	nop			; (mov r8, r8)
    c77a:	4b13      	ldr	r3, [pc, #76]	; (c7c8 <system_gclk_gen_set_config+0x110>)
    c77c:	4798      	blx	r3
    c77e:	1e03      	subs	r3, r0, #0
    c780:	d1fb      	bne.n	c77a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c782:	4b12      	ldr	r3, [pc, #72]	; (c7cc <system_gclk_gen_set_config+0x114>)
    c784:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c786:	4a12      	ldr	r2, [pc, #72]	; (c7d0 <system_gclk_gen_set_config+0x118>)
    c788:	1dfb      	adds	r3, r7, #7
    c78a:	781b      	ldrb	r3, [r3, #0]
    c78c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    c78e:	46c0      	nop			; (mov r8, r8)
    c790:	4b0d      	ldr	r3, [pc, #52]	; (c7c8 <system_gclk_gen_set_config+0x110>)
    c792:	4798      	blx	r3
    c794:	1e03      	subs	r3, r0, #0
    c796:	d1fb      	bne.n	c790 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    c798:	4b0e      	ldr	r3, [pc, #56]	; (c7d4 <system_gclk_gen_set_config+0x11c>)
    c79a:	693a      	ldr	r2, [r7, #16]
    c79c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    c79e:	46c0      	nop			; (mov r8, r8)
    c7a0:	4b09      	ldr	r3, [pc, #36]	; (c7c8 <system_gclk_gen_set_config+0x110>)
    c7a2:	4798      	blx	r3
    c7a4:	1e03      	subs	r3, r0, #0
    c7a6:	d1fb      	bne.n	c7a0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    c7a8:	4b0a      	ldr	r3, [pc, #40]	; (c7d4 <system_gclk_gen_set_config+0x11c>)
    c7aa:	4a0a      	ldr	r2, [pc, #40]	; (c7d4 <system_gclk_gen_set_config+0x11c>)
    c7ac:	6851      	ldr	r1, [r2, #4]
    c7ae:	2280      	movs	r2, #128	; 0x80
    c7b0:	0252      	lsls	r2, r2, #9
    c7b2:	4011      	ands	r1, r2
    c7b4:	697a      	ldr	r2, [r7, #20]
    c7b6:	430a      	orrs	r2, r1
    c7b8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c7ba:	4b07      	ldr	r3, [pc, #28]	; (c7d8 <system_gclk_gen_set_config+0x120>)
    c7bc:	4798      	blx	r3
}
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	46bd      	mov	sp, r7
    c7c2:	b006      	add	sp, #24
    c7c4:	bd80      	pop	{r7, pc}
    c7c6:	46c0      	nop			; (mov r8, r8)
    c7c8:	0000c669 	.word	0x0000c669
    c7cc:	0000c641 	.word	0x0000c641
    c7d0:	40000c08 	.word	0x40000c08
    c7d4:	40000c00 	.word	0x40000c00
    c7d8:	0000c655 	.word	0x0000c655

0000c7dc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    c7dc:	b580      	push	{r7, lr}
    c7de:	b082      	sub	sp, #8
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	0002      	movs	r2, r0
    c7e4:	1dfb      	adds	r3, r7, #7
    c7e6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c7e8:	46c0      	nop			; (mov r8, r8)
    c7ea:	4b0e      	ldr	r3, [pc, #56]	; (c824 <system_gclk_gen_enable+0x48>)
    c7ec:	4798      	blx	r3
    c7ee:	1e03      	subs	r3, r0, #0
    c7f0:	d1fb      	bne.n	c7ea <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c7f2:	4b0d      	ldr	r3, [pc, #52]	; (c828 <system_gclk_gen_enable+0x4c>)
    c7f4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c7f6:	4a0d      	ldr	r2, [pc, #52]	; (c82c <system_gclk_gen_enable+0x50>)
    c7f8:	1dfb      	adds	r3, r7, #7
    c7fa:	781b      	ldrb	r3, [r3, #0]
    c7fc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c7fe:	46c0      	nop			; (mov r8, r8)
    c800:	4b08      	ldr	r3, [pc, #32]	; (c824 <system_gclk_gen_enable+0x48>)
    c802:	4798      	blx	r3
    c804:	1e03      	subs	r3, r0, #0
    c806:	d1fb      	bne.n	c800 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    c808:	4b09      	ldr	r3, [pc, #36]	; (c830 <system_gclk_gen_enable+0x54>)
    c80a:	4a09      	ldr	r2, [pc, #36]	; (c830 <system_gclk_gen_enable+0x54>)
    c80c:	6852      	ldr	r2, [r2, #4]
    c80e:	2180      	movs	r1, #128	; 0x80
    c810:	0249      	lsls	r1, r1, #9
    c812:	430a      	orrs	r2, r1
    c814:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    c816:	4b07      	ldr	r3, [pc, #28]	; (c834 <system_gclk_gen_enable+0x58>)
    c818:	4798      	blx	r3
}
    c81a:	46c0      	nop			; (mov r8, r8)
    c81c:	46bd      	mov	sp, r7
    c81e:	b002      	add	sp, #8
    c820:	bd80      	pop	{r7, pc}
    c822:	46c0      	nop			; (mov r8, r8)
    c824:	0000c669 	.word	0x0000c669
    c828:	0000c641 	.word	0x0000c641
    c82c:	40000c04 	.word	0x40000c04
    c830:	40000c00 	.word	0x40000c00
    c834:	0000c655 	.word	0x0000c655

0000c838 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    c838:	b580      	push	{r7, lr}
    c83a:	b086      	sub	sp, #24
    c83c:	af00      	add	r7, sp, #0
    c83e:	0002      	movs	r2, r0
    c840:	1dfb      	adds	r3, r7, #7
    c842:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    c844:	46c0      	nop			; (mov r8, r8)
    c846:	4b2a      	ldr	r3, [pc, #168]	; (c8f0 <system_gclk_gen_get_hz+0xb8>)
    c848:	4798      	blx	r3
    c84a:	1e03      	subs	r3, r0, #0
    c84c:	d1fb      	bne.n	c846 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    c84e:	4b29      	ldr	r3, [pc, #164]	; (c8f4 <system_gclk_gen_get_hz+0xbc>)
    c850:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c852:	4a29      	ldr	r2, [pc, #164]	; (c8f8 <system_gclk_gen_get_hz+0xc0>)
    c854:	1dfb      	adds	r3, r7, #7
    c856:	781b      	ldrb	r3, [r3, #0]
    c858:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c85a:	46c0      	nop			; (mov r8, r8)
    c85c:	4b24      	ldr	r3, [pc, #144]	; (c8f0 <system_gclk_gen_get_hz+0xb8>)
    c85e:	4798      	blx	r3
    c860:	1e03      	subs	r3, r0, #0
    c862:	d1fb      	bne.n	c85c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    c864:	4b25      	ldr	r3, [pc, #148]	; (c8fc <system_gclk_gen_get_hz+0xc4>)
    c866:	685b      	ldr	r3, [r3, #4]
    c868:	04db      	lsls	r3, r3, #19
    c86a:	0edb      	lsrs	r3, r3, #27
    c86c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    c86e:	0018      	movs	r0, r3
    c870:	4b23      	ldr	r3, [pc, #140]	; (c900 <system_gclk_gen_get_hz+0xc8>)
    c872:	4798      	blx	r3
    c874:	0003      	movs	r3, r0
    c876:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    c878:	4a1f      	ldr	r2, [pc, #124]	; (c8f8 <system_gclk_gen_get_hz+0xc0>)
    c87a:	1dfb      	adds	r3, r7, #7
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    c880:	4b1e      	ldr	r3, [pc, #120]	; (c8fc <system_gclk_gen_get_hz+0xc4>)
    c882:	685b      	ldr	r3, [r3, #4]
    c884:	02db      	lsls	r3, r3, #11
    c886:	0fdb      	lsrs	r3, r3, #31
    c888:	b2da      	uxtb	r2, r3
    c88a:	2313      	movs	r3, #19
    c88c:	18fb      	adds	r3, r7, r3
    c88e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    c890:	4a1c      	ldr	r2, [pc, #112]	; (c904 <system_gclk_gen_get_hz+0xcc>)
    c892:	1dfb      	adds	r3, r7, #7
    c894:	781b      	ldrb	r3, [r3, #0]
    c896:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    c898:	46c0      	nop			; (mov r8, r8)
    c89a:	4b15      	ldr	r3, [pc, #84]	; (c8f0 <system_gclk_gen_get_hz+0xb8>)
    c89c:	4798      	blx	r3
    c89e:	1e03      	subs	r3, r0, #0
    c8a0:	d1fb      	bne.n	c89a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    c8a2:	4b16      	ldr	r3, [pc, #88]	; (c8fc <system_gclk_gen_get_hz+0xc4>)
    c8a4:	689b      	ldr	r3, [r3, #8]
    c8a6:	021b      	lsls	r3, r3, #8
    c8a8:	0c1b      	lsrs	r3, r3, #16
    c8aa:	b29b      	uxth	r3, r3
    c8ac:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    c8ae:	4b16      	ldr	r3, [pc, #88]	; (c908 <system_gclk_gen_get_hz+0xd0>)
    c8b0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    c8b2:	2313      	movs	r3, #19
    c8b4:	18fb      	adds	r3, r7, r3
    c8b6:	781b      	ldrb	r3, [r3, #0]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d109      	bne.n	c8d0 <system_gclk_gen_get_hz+0x98>
    c8bc:	68fb      	ldr	r3, [r7, #12]
    c8be:	2b01      	cmp	r3, #1
    c8c0:	d906      	bls.n	c8d0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    c8c2:	4b12      	ldr	r3, [pc, #72]	; (c90c <system_gclk_gen_get_hz+0xd4>)
    c8c4:	68f9      	ldr	r1, [r7, #12]
    c8c6:	6978      	ldr	r0, [r7, #20]
    c8c8:	4798      	blx	r3
    c8ca:	0003      	movs	r3, r0
    c8cc:	617b      	str	r3, [r7, #20]
    c8ce:	e00a      	b.n	c8e6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    c8d0:	2313      	movs	r3, #19
    c8d2:	18fb      	adds	r3, r7, r3
    c8d4:	781b      	ldrb	r3, [r3, #0]
    c8d6:	2b00      	cmp	r3, #0
    c8d8:	d005      	beq.n	c8e6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    c8da:	68fb      	ldr	r3, [r7, #12]
    c8dc:	3301      	adds	r3, #1
    c8de:	697a      	ldr	r2, [r7, #20]
    c8e0:	40da      	lsrs	r2, r3
    c8e2:	0013      	movs	r3, r2
    c8e4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    c8e6:	697b      	ldr	r3, [r7, #20]
}
    c8e8:	0018      	movs	r0, r3
    c8ea:	46bd      	mov	sp, r7
    c8ec:	b006      	add	sp, #24
    c8ee:	bd80      	pop	{r7, pc}
    c8f0:	0000c669 	.word	0x0000c669
    c8f4:	0000c641 	.word	0x0000c641
    c8f8:	40000c04 	.word	0x40000c04
    c8fc:	40000c00 	.word	0x40000c00
    c900:	0000be29 	.word	0x0000be29
    c904:	40000c08 	.word	0x40000c08
    c908:	0000c655 	.word	0x0000c655
    c90c:	0001079d 	.word	0x0001079d

0000c910 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    c910:	b580      	push	{r7, lr}
    c912:	b084      	sub	sp, #16
    c914:	af00      	add	r7, sp, #0
    c916:	0002      	movs	r2, r0
    c918:	6039      	str	r1, [r7, #0]
    c91a:	1dfb      	adds	r3, r7, #7
    c91c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    c91e:	1dfb      	adds	r3, r7, #7
    c920:	781b      	ldrb	r3, [r3, #0]
    c922:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    c924:	683b      	ldr	r3, [r7, #0]
    c926:	781b      	ldrb	r3, [r3, #0]
    c928:	021b      	lsls	r3, r3, #8
    c92a:	001a      	movs	r2, r3
    c92c:	68fb      	ldr	r3, [r7, #12]
    c92e:	4313      	orrs	r3, r2
    c930:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    c932:	1dfb      	adds	r3, r7, #7
    c934:	781b      	ldrb	r3, [r3, #0]
    c936:	0018      	movs	r0, r3
    c938:	4b04      	ldr	r3, [pc, #16]	; (c94c <system_gclk_chan_set_config+0x3c>)
    c93a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    c93c:	4b04      	ldr	r3, [pc, #16]	; (c950 <system_gclk_chan_set_config+0x40>)
    c93e:	68fa      	ldr	r2, [r7, #12]
    c940:	b292      	uxth	r2, r2
    c942:	805a      	strh	r2, [r3, #2]
}
    c944:	46c0      	nop			; (mov r8, r8)
    c946:	46bd      	mov	sp, r7
    c948:	b004      	add	sp, #16
    c94a:	bd80      	pop	{r7, pc}
    c94c:	0000c99d 	.word	0x0000c99d
    c950:	40000c00 	.word	0x40000c00

0000c954 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    c954:	b580      	push	{r7, lr}
    c956:	b082      	sub	sp, #8
    c958:	af00      	add	r7, sp, #0
    c95a:	0002      	movs	r2, r0
    c95c:	1dfb      	adds	r3, r7, #7
    c95e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c960:	4b0a      	ldr	r3, [pc, #40]	; (c98c <system_gclk_chan_enable+0x38>)
    c962:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c964:	4a0a      	ldr	r2, [pc, #40]	; (c990 <system_gclk_chan_enable+0x3c>)
    c966:	1dfb      	adds	r3, r7, #7
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    c96c:	4909      	ldr	r1, [pc, #36]	; (c994 <system_gclk_chan_enable+0x40>)
    c96e:	4b09      	ldr	r3, [pc, #36]	; (c994 <system_gclk_chan_enable+0x40>)
    c970:	885b      	ldrh	r3, [r3, #2]
    c972:	b29b      	uxth	r3, r3
    c974:	2280      	movs	r2, #128	; 0x80
    c976:	01d2      	lsls	r2, r2, #7
    c978:	4313      	orrs	r3, r2
    c97a:	b29b      	uxth	r3, r3
    c97c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    c97e:	4b06      	ldr	r3, [pc, #24]	; (c998 <system_gclk_chan_enable+0x44>)
    c980:	4798      	blx	r3
}
    c982:	46c0      	nop			; (mov r8, r8)
    c984:	46bd      	mov	sp, r7
    c986:	b002      	add	sp, #8
    c988:	bd80      	pop	{r7, pc}
    c98a:	46c0      	nop			; (mov r8, r8)
    c98c:	0000c641 	.word	0x0000c641
    c990:	40000c02 	.word	0x40000c02
    c994:	40000c00 	.word	0x40000c00
    c998:	0000c655 	.word	0x0000c655

0000c99c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    c99c:	b580      	push	{r7, lr}
    c99e:	b084      	sub	sp, #16
    c9a0:	af00      	add	r7, sp, #0
    c9a2:	0002      	movs	r2, r0
    c9a4:	1dfb      	adds	r3, r7, #7
    c9a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    c9a8:	4b1c      	ldr	r3, [pc, #112]	; (ca1c <system_gclk_chan_disable+0x80>)
    c9aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    c9ac:	4a1c      	ldr	r2, [pc, #112]	; (ca20 <system_gclk_chan_disable+0x84>)
    c9ae:	1dfb      	adds	r3, r7, #7
    c9b0:	781b      	ldrb	r3, [r3, #0]
    c9b2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    c9b4:	4b1b      	ldr	r3, [pc, #108]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9b6:	885b      	ldrh	r3, [r3, #2]
    c9b8:	051b      	lsls	r3, r3, #20
    c9ba:	0f1b      	lsrs	r3, r3, #28
    c9bc:	b2db      	uxtb	r3, r3
    c9be:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    c9c0:	4a18      	ldr	r2, [pc, #96]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9c2:	8853      	ldrh	r3, [r2, #2]
    c9c4:	4918      	ldr	r1, [pc, #96]	; (ca28 <system_gclk_chan_disable+0x8c>)
    c9c6:	400b      	ands	r3, r1
    c9c8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    c9ca:	4a16      	ldr	r2, [pc, #88]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9cc:	4b15      	ldr	r3, [pc, #84]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9ce:	885b      	ldrh	r3, [r3, #2]
    c9d0:	b29b      	uxth	r3, r3
    c9d2:	4916      	ldr	r1, [pc, #88]	; (ca2c <system_gclk_chan_disable+0x90>)
    c9d4:	400b      	ands	r3, r1
    c9d6:	b29b      	uxth	r3, r3
    c9d8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    c9da:	46c0      	nop			; (mov r8, r8)
    c9dc:	4b11      	ldr	r3, [pc, #68]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9de:	885b      	ldrh	r3, [r3, #2]
    c9e0:	b29b      	uxth	r3, r3
    c9e2:	001a      	movs	r2, r3
    c9e4:	2380      	movs	r3, #128	; 0x80
    c9e6:	01db      	lsls	r3, r3, #7
    c9e8:	4013      	ands	r3, r2
    c9ea:	d1f7      	bne.n	c9dc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    c9ec:	4a0d      	ldr	r2, [pc, #52]	; (ca24 <system_gclk_chan_disable+0x88>)
    c9ee:	68fb      	ldr	r3, [r7, #12]
    c9f0:	b2db      	uxtb	r3, r3
    c9f2:	1c19      	adds	r1, r3, #0
    c9f4:	230f      	movs	r3, #15
    c9f6:	400b      	ands	r3, r1
    c9f8:	b2d9      	uxtb	r1, r3
    c9fa:	8853      	ldrh	r3, [r2, #2]
    c9fc:	1c08      	adds	r0, r1, #0
    c9fe:	210f      	movs	r1, #15
    ca00:	4001      	ands	r1, r0
    ca02:	0208      	lsls	r0, r1, #8
    ca04:	4908      	ldr	r1, [pc, #32]	; (ca28 <system_gclk_chan_disable+0x8c>)
    ca06:	400b      	ands	r3, r1
    ca08:	1c19      	adds	r1, r3, #0
    ca0a:	1c03      	adds	r3, r0, #0
    ca0c:	430b      	orrs	r3, r1
    ca0e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    ca10:	4b07      	ldr	r3, [pc, #28]	; (ca30 <system_gclk_chan_disable+0x94>)
    ca12:	4798      	blx	r3
}
    ca14:	46c0      	nop			; (mov r8, r8)
    ca16:	46bd      	mov	sp, r7
    ca18:	b004      	add	sp, #16
    ca1a:	bd80      	pop	{r7, pc}
    ca1c:	0000c641 	.word	0x0000c641
    ca20:	40000c02 	.word	0x40000c02
    ca24:	40000c00 	.word	0x40000c00
    ca28:	fffff0ff 	.word	0xfffff0ff
    ca2c:	ffffbfff 	.word	0xffffbfff
    ca30:	0000c655 	.word	0x0000c655

0000ca34 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    ca34:	b580      	push	{r7, lr}
    ca36:	b084      	sub	sp, #16
    ca38:	af00      	add	r7, sp, #0
    ca3a:	0002      	movs	r2, r0
    ca3c:	1dfb      	adds	r3, r7, #7
    ca3e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    ca40:	4b0d      	ldr	r3, [pc, #52]	; (ca78 <system_gclk_chan_get_hz+0x44>)
    ca42:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ca44:	4a0d      	ldr	r2, [pc, #52]	; (ca7c <system_gclk_chan_get_hz+0x48>)
    ca46:	1dfb      	adds	r3, r7, #7
    ca48:	781b      	ldrb	r3, [r3, #0]
    ca4a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    ca4c:	4b0c      	ldr	r3, [pc, #48]	; (ca80 <system_gclk_chan_get_hz+0x4c>)
    ca4e:	885b      	ldrh	r3, [r3, #2]
    ca50:	051b      	lsls	r3, r3, #20
    ca52:	0f1b      	lsrs	r3, r3, #28
    ca54:	b2da      	uxtb	r2, r3
    ca56:	230f      	movs	r3, #15
    ca58:	18fb      	adds	r3, r7, r3
    ca5a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    ca5c:	4b09      	ldr	r3, [pc, #36]	; (ca84 <system_gclk_chan_get_hz+0x50>)
    ca5e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    ca60:	230f      	movs	r3, #15
    ca62:	18fb      	adds	r3, r7, r3
    ca64:	781b      	ldrb	r3, [r3, #0]
    ca66:	0018      	movs	r0, r3
    ca68:	4b07      	ldr	r3, [pc, #28]	; (ca88 <system_gclk_chan_get_hz+0x54>)
    ca6a:	4798      	blx	r3
    ca6c:	0003      	movs	r3, r0
}
    ca6e:	0018      	movs	r0, r3
    ca70:	46bd      	mov	sp, r7
    ca72:	b004      	add	sp, #16
    ca74:	bd80      	pop	{r7, pc}
    ca76:	46c0      	nop			; (mov r8, r8)
    ca78:	0000c641 	.word	0x0000c641
    ca7c:	40000c02 	.word	0x40000c02
    ca80:	40000c00 	.word	0x40000c00
    ca84:	0000c655 	.word	0x0000c655
    ca88:	0000c839 	.word	0x0000c839

0000ca8c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    ca8c:	b580      	push	{r7, lr}
    ca8e:	b084      	sub	sp, #16
    ca90:	af00      	add	r7, sp, #0
    ca92:	0002      	movs	r2, r0
    ca94:	1dfb      	adds	r3, r7, #7
    ca96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ca98:	230f      	movs	r3, #15
    ca9a:	18fb      	adds	r3, r7, r3
    ca9c:	1dfa      	adds	r2, r7, #7
    ca9e:	7812      	ldrb	r2, [r2, #0]
    caa0:	09d2      	lsrs	r2, r2, #7
    caa2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    caa4:	230e      	movs	r3, #14
    caa6:	18fb      	adds	r3, r7, r3
    caa8:	1dfa      	adds	r2, r7, #7
    caaa:	7812      	ldrb	r2, [r2, #0]
    caac:	0952      	lsrs	r2, r2, #5
    caae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cab0:	4b0d      	ldr	r3, [pc, #52]	; (cae8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cab2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    cab4:	230f      	movs	r3, #15
    cab6:	18fb      	adds	r3, r7, r3
    cab8:	781b      	ldrb	r3, [r3, #0]
    caba:	2b00      	cmp	r3, #0
    cabc:	d10f      	bne.n	cade <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cabe:	230f      	movs	r3, #15
    cac0:	18fb      	adds	r3, r7, r3
    cac2:	781b      	ldrb	r3, [r3, #0]
    cac4:	009b      	lsls	r3, r3, #2
    cac6:	2210      	movs	r2, #16
    cac8:	4694      	mov	ip, r2
    caca:	44bc      	add	ip, r7
    cacc:	4463      	add	r3, ip
    cace:	3b08      	subs	r3, #8
    cad0:	681a      	ldr	r2, [r3, #0]
    cad2:	230e      	movs	r3, #14
    cad4:	18fb      	adds	r3, r7, r3
    cad6:	781b      	ldrb	r3, [r3, #0]
    cad8:	01db      	lsls	r3, r3, #7
    cada:	18d3      	adds	r3, r2, r3
    cadc:	e000      	b.n	cae0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    cade:	2300      	movs	r3, #0
	}
}
    cae0:	0018      	movs	r0, r3
    cae2:	46bd      	mov	sp, r7
    cae4:	b004      	add	sp, #16
    cae6:	bd80      	pop	{r7, pc}
    cae8:	41004400 	.word	0x41004400

0000caec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    caec:	b580      	push	{r7, lr}
    caee:	b088      	sub	sp, #32
    caf0:	af00      	add	r7, sp, #0
    caf2:	60f8      	str	r0, [r7, #12]
    caf4:	60b9      	str	r1, [r7, #8]
    caf6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    caf8:	2300      	movs	r3, #0
    cafa:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    cafc:	687b      	ldr	r3, [r7, #4]
    cafe:	78db      	ldrb	r3, [r3, #3]
    cb00:	2201      	movs	r2, #1
    cb02:	4053      	eors	r3, r2
    cb04:	b2db      	uxtb	r3, r3
    cb06:	2b00      	cmp	r3, #0
    cb08:	d035      	beq.n	cb76 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    cb0a:	687b      	ldr	r3, [r7, #4]
    cb0c:	781b      	ldrb	r3, [r3, #0]
    cb0e:	2b80      	cmp	r3, #128	; 0x80
    cb10:	d00b      	beq.n	cb2a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    cb12:	69fb      	ldr	r3, [r7, #28]
    cb14:	2280      	movs	r2, #128	; 0x80
    cb16:	0252      	lsls	r2, r2, #9
    cb18:	4313      	orrs	r3, r2
    cb1a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	781b      	ldrb	r3, [r3, #0]
    cb20:	061b      	lsls	r3, r3, #24
    cb22:	001a      	movs	r2, r3
    cb24:	69fb      	ldr	r3, [r7, #28]
    cb26:	4313      	orrs	r3, r2
    cb28:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    cb2a:	687b      	ldr	r3, [r7, #4]
    cb2c:	785b      	ldrb	r3, [r3, #1]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d003      	beq.n	cb3a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    cb36:	2b02      	cmp	r3, #2
    cb38:	d110      	bne.n	cb5c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    cb3a:	69fb      	ldr	r3, [r7, #28]
    cb3c:	2280      	movs	r2, #128	; 0x80
    cb3e:	0292      	lsls	r2, r2, #10
    cb40:	4313      	orrs	r3, r2
    cb42:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    cb44:	687b      	ldr	r3, [r7, #4]
    cb46:	789b      	ldrb	r3, [r3, #2]
    cb48:	2b00      	cmp	r3, #0
    cb4a:	d004      	beq.n	cb56 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    cb4c:	69fb      	ldr	r3, [r7, #28]
    cb4e:	2280      	movs	r2, #128	; 0x80
    cb50:	02d2      	lsls	r2, r2, #11
    cb52:	4313      	orrs	r3, r2
    cb54:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    cb56:	68fb      	ldr	r3, [r7, #12]
    cb58:	68ba      	ldr	r2, [r7, #8]
    cb5a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    cb5c:	687b      	ldr	r3, [r7, #4]
    cb5e:	785b      	ldrb	r3, [r3, #1]
    cb60:	2b01      	cmp	r3, #1
    cb62:	d003      	beq.n	cb6c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    cb64:	687b      	ldr	r3, [r7, #4]
    cb66:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    cb68:	2b02      	cmp	r3, #2
    cb6a:	d107      	bne.n	cb7c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    cb6c:	69fb      	ldr	r3, [r7, #28]
    cb6e:	4a22      	ldr	r2, [pc, #136]	; (cbf8 <_system_pinmux_config+0x10c>)
    cb70:	4013      	ands	r3, r2
    cb72:	61fb      	str	r3, [r7, #28]
    cb74:	e002      	b.n	cb7c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    cb76:	68fb      	ldr	r3, [r7, #12]
    cb78:	68ba      	ldr	r2, [r7, #8]
    cb7a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    cb7c:	68bb      	ldr	r3, [r7, #8]
    cb7e:	041b      	lsls	r3, r3, #16
    cb80:	0c1b      	lsrs	r3, r3, #16
    cb82:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    cb84:	68bb      	ldr	r3, [r7, #8]
    cb86:	0c1b      	lsrs	r3, r3, #16
    cb88:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    cb8a:	69ba      	ldr	r2, [r7, #24]
    cb8c:	69fb      	ldr	r3, [r7, #28]
    cb8e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    cb90:	22a0      	movs	r2, #160	; 0xa0
    cb92:	05d2      	lsls	r2, r2, #23
    cb94:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    cb96:	68fb      	ldr	r3, [r7, #12]
    cb98:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    cb9a:	697a      	ldr	r2, [r7, #20]
    cb9c:	69fb      	ldr	r3, [r7, #28]
    cb9e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    cba0:	22d0      	movs	r2, #208	; 0xd0
    cba2:	0612      	lsls	r2, r2, #24
    cba4:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    cba6:	68fb      	ldr	r3, [r7, #12]
    cba8:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    cbaa:	687b      	ldr	r3, [r7, #4]
    cbac:	78db      	ldrb	r3, [r3, #3]
    cbae:	2201      	movs	r2, #1
    cbb0:	4053      	eors	r3, r2
    cbb2:	b2db      	uxtb	r3, r3
    cbb4:	2b00      	cmp	r3, #0
    cbb6:	d01a      	beq.n	cbee <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    cbb8:	69fa      	ldr	r2, [r7, #28]
    cbba:	2380      	movs	r3, #128	; 0x80
    cbbc:	02db      	lsls	r3, r3, #11
    cbbe:	4013      	ands	r3, r2
    cbc0:	d00a      	beq.n	cbd8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    cbc2:	687b      	ldr	r3, [r7, #4]
    cbc4:	789b      	ldrb	r3, [r3, #2]
    cbc6:	2b01      	cmp	r3, #1
    cbc8:	d103      	bne.n	cbd2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    cbca:	68fb      	ldr	r3, [r7, #12]
    cbcc:	68ba      	ldr	r2, [r7, #8]
    cbce:	619a      	str	r2, [r3, #24]
    cbd0:	e002      	b.n	cbd8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    cbd2:	68fb      	ldr	r3, [r7, #12]
    cbd4:	68ba      	ldr	r2, [r7, #8]
    cbd6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    cbd8:	687b      	ldr	r3, [r7, #4]
    cbda:	785b      	ldrb	r3, [r3, #1]
    cbdc:	2b01      	cmp	r3, #1
    cbde:	d003      	beq.n	cbe8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    cbe0:	687b      	ldr	r3, [r7, #4]
    cbe2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    cbe4:	2b02      	cmp	r3, #2
    cbe6:	d102      	bne.n	cbee <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    cbe8:	68fb      	ldr	r3, [r7, #12]
    cbea:	68ba      	ldr	r2, [r7, #8]
    cbec:	609a      	str	r2, [r3, #8]
		}
	}
}
    cbee:	46c0      	nop			; (mov r8, r8)
    cbf0:	46bd      	mov	sp, r7
    cbf2:	b008      	add	sp, #32
    cbf4:	bd80      	pop	{r7, pc}
    cbf6:	46c0      	nop			; (mov r8, r8)
    cbf8:	fffbffff 	.word	0xfffbffff

0000cbfc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    cbfc:	b580      	push	{r7, lr}
    cbfe:	b084      	sub	sp, #16
    cc00:	af00      	add	r7, sp, #0
    cc02:	0002      	movs	r2, r0
    cc04:	6039      	str	r1, [r7, #0]
    cc06:	1dfb      	adds	r3, r7, #7
    cc08:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cc0a:	1dfb      	adds	r3, r7, #7
    cc0c:	781b      	ldrb	r3, [r3, #0]
    cc0e:	0018      	movs	r0, r3
    cc10:	4b0a      	ldr	r3, [pc, #40]	; (cc3c <system_pinmux_pin_set_config+0x40>)
    cc12:	4798      	blx	r3
    cc14:	0003      	movs	r3, r0
    cc16:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    cc18:	1dfb      	adds	r3, r7, #7
    cc1a:	781b      	ldrb	r3, [r3, #0]
    cc1c:	221f      	movs	r2, #31
    cc1e:	4013      	ands	r3, r2
    cc20:	2201      	movs	r2, #1
    cc22:	409a      	lsls	r2, r3
    cc24:	0013      	movs	r3, r2
    cc26:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    cc28:	683a      	ldr	r2, [r7, #0]
    cc2a:	68b9      	ldr	r1, [r7, #8]
    cc2c:	68fb      	ldr	r3, [r7, #12]
    cc2e:	0018      	movs	r0, r3
    cc30:	4b03      	ldr	r3, [pc, #12]	; (cc40 <system_pinmux_pin_set_config+0x44>)
    cc32:	4798      	blx	r3
}
    cc34:	46c0      	nop			; (mov r8, r8)
    cc36:	46bd      	mov	sp, r7
    cc38:	b004      	add	sp, #16
    cc3a:	bd80      	pop	{r7, pc}
    cc3c:	0000ca8d 	.word	0x0000ca8d
    cc40:	0000caed 	.word	0x0000caed

0000cc44 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    cc44:	b580      	push	{r7, lr}
    cc46:	af00      	add	r7, sp, #0
	return;
    cc48:	46c0      	nop			; (mov r8, r8)
}
    cc4a:	46bd      	mov	sp, r7
    cc4c:	bd80      	pop	{r7, pc}
    cc4e:	46c0      	nop			; (mov r8, r8)

0000cc50 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    cc50:	b580      	push	{r7, lr}
    cc52:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    cc54:	4b06      	ldr	r3, [pc, #24]	; (cc70 <system_init+0x20>)
    cc56:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    cc58:	4b06      	ldr	r3, [pc, #24]	; (cc74 <system_init+0x24>)
    cc5a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    cc5c:	4b06      	ldr	r3, [pc, #24]	; (cc78 <system_init+0x28>)
    cc5e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    cc60:	4b06      	ldr	r3, [pc, #24]	; (cc7c <system_init+0x2c>)
    cc62:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    cc64:	4b06      	ldr	r3, [pc, #24]	; (cc80 <system_init+0x30>)
    cc66:	4798      	blx	r3
}
    cc68:	46c0      	nop			; (mov r8, r8)
    cc6a:	46bd      	mov	sp, r7
    cc6c:	bd80      	pop	{r7, pc}
    cc6e:	46c0      	nop			; (mov r8, r8)
    cc70:	0000c2b5 	.word	0x0000c2b5
    cc74:	00008b61 	.word	0x00008b61
    cc78:	0000cc45 	.word	0x0000cc45
    cc7c:	0000999d 	.word	0x0000999d
    cc80:	0000cc45 	.word	0x0000cc45

0000cc84 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    cc84:	b580      	push	{r7, lr}
    cc86:	af00      	add	r7, sp, #0
    cc88:	2000      	movs	r0, #0
    cc8a:	4b02      	ldr	r3, [pc, #8]	; (cc94 <TCC0_Handler+0x10>)
    cc8c:	4798      	blx	r3
    cc8e:	46c0      	nop			; (mov r8, r8)
    cc90:	46bd      	mov	sp, r7
    cc92:	bd80      	pop	{r7, pc}
    cc94:	0000ccc1 	.word	0x0000ccc1

0000cc98 <TCC1_Handler>:
    cc98:	b580      	push	{r7, lr}
    cc9a:	af00      	add	r7, sp, #0
    cc9c:	2001      	movs	r0, #1
    cc9e:	4b02      	ldr	r3, [pc, #8]	; (cca8 <TCC1_Handler+0x10>)
    cca0:	4798      	blx	r3
    cca2:	46c0      	nop			; (mov r8, r8)
    cca4:	46bd      	mov	sp, r7
    cca6:	bd80      	pop	{r7, pc}
    cca8:	0000ccc1 	.word	0x0000ccc1

0000ccac <TCC2_Handler>:
    ccac:	b580      	push	{r7, lr}
    ccae:	af00      	add	r7, sp, #0
    ccb0:	2002      	movs	r0, #2
    ccb2:	4b02      	ldr	r3, [pc, #8]	; (ccbc <TCC2_Handler+0x10>)
    ccb4:	4798      	blx	r3
    ccb6:	46c0      	nop			; (mov r8, r8)
    ccb8:	46bd      	mov	sp, r7
    ccba:	bd80      	pop	{r7, pc}
    ccbc:	0000ccc1 	.word	0x0000ccc1

0000ccc0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    ccc0:	b580      	push	{r7, lr}
    ccc2:	b086      	sub	sp, #24
    ccc4:	af00      	add	r7, sp, #0
    ccc6:	0002      	movs	r2, r0
    ccc8:	1dfb      	adds	r3, r7, #7
    ccca:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    cccc:	1dfb      	adds	r3, r7, #7
    ccce:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    ccd0:	4b18      	ldr	r3, [pc, #96]	; (cd34 <_tcc_interrupt_handler+0x74>)
    ccd2:	0092      	lsls	r2, r2, #2
    ccd4:	58d3      	ldr	r3, [r2, r3]
    ccd6:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ccd8:	693b      	ldr	r3, [r7, #16]
    ccda:	681b      	ldr	r3, [r3, #0]
    ccdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    ccde:	693b      	ldr	r3, [r7, #16]
    cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    cce2:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    cce4:	693b      	ldr	r3, [r7, #16]
    cce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    cce8:	4013      	ands	r3, r2
    ccea:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ccec:	2300      	movs	r3, #0
    ccee:	617b      	str	r3, [r7, #20]
    ccf0:	e019      	b.n	cd26 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    ccf2:	4b11      	ldr	r3, [pc, #68]	; (cd38 <_tcc_interrupt_handler+0x78>)
    ccf4:	697a      	ldr	r2, [r7, #20]
    ccf6:	0092      	lsls	r2, r2, #2
    ccf8:	58d3      	ldr	r3, [r2, r3]
    ccfa:	68fa      	ldr	r2, [r7, #12]
    ccfc:	4013      	ands	r3, r2
    ccfe:	d00f      	beq.n	cd20 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    cd00:	693a      	ldr	r2, [r7, #16]
    cd02:	697b      	ldr	r3, [r7, #20]
    cd04:	009b      	lsls	r3, r3, #2
    cd06:	18d3      	adds	r3, r2, r3
    cd08:	3304      	adds	r3, #4
    cd0a:	681b      	ldr	r3, [r3, #0]
    cd0c:	693a      	ldr	r2, [r7, #16]
    cd0e:	0010      	movs	r0, r2
    cd10:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    cd12:	693b      	ldr	r3, [r7, #16]
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	4a08      	ldr	r2, [pc, #32]	; (cd38 <_tcc_interrupt_handler+0x78>)
    cd18:	6979      	ldr	r1, [r7, #20]
    cd1a:	0089      	lsls	r1, r1, #2
    cd1c:	588a      	ldr	r2, [r1, r2]
    cd1e:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    cd20:	697b      	ldr	r3, [r7, #20]
    cd22:	3301      	adds	r3, #1
    cd24:	617b      	str	r3, [r7, #20]
    cd26:	697b      	ldr	r3, [r7, #20]
    cd28:	2b0b      	cmp	r3, #11
    cd2a:	dde2      	ble.n	ccf2 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    cd2c:	46c0      	nop			; (mov r8, r8)
    cd2e:	46bd      	mov	sp, r7
    cd30:	b006      	add	sp, #24
    cd32:	bd80      	pop	{r7, pc}
    cd34:	200047ac 	.word	0x200047ac
    cd38:	00013da4 	.word	0x00013da4

0000cd3c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b082      	sub	sp, #8
    cd40:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    cd42:	4b2f      	ldr	r3, [pc, #188]	; (ce00 <Reset_Handler+0xc4>)
    cd44:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    cd46:	4b2f      	ldr	r3, [pc, #188]	; (ce04 <Reset_Handler+0xc8>)
    cd48:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    cd4a:	687a      	ldr	r2, [r7, #4]
    cd4c:	683b      	ldr	r3, [r7, #0]
    cd4e:	429a      	cmp	r2, r3
    cd50:	d00c      	beq.n	cd6c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    cd52:	e007      	b.n	cd64 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    cd54:	683b      	ldr	r3, [r7, #0]
    cd56:	1d1a      	adds	r2, r3, #4
    cd58:	603a      	str	r2, [r7, #0]
    cd5a:	687a      	ldr	r2, [r7, #4]
    cd5c:	1d11      	adds	r1, r2, #4
    cd5e:	6079      	str	r1, [r7, #4]
    cd60:	6812      	ldr	r2, [r2, #0]
    cd62:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    cd64:	683a      	ldr	r2, [r7, #0]
    cd66:	4b28      	ldr	r3, [pc, #160]	; (ce08 <Reset_Handler+0xcc>)
    cd68:	429a      	cmp	r2, r3
    cd6a:	d3f3      	bcc.n	cd54 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    cd6c:	4b27      	ldr	r3, [pc, #156]	; (ce0c <Reset_Handler+0xd0>)
    cd6e:	603b      	str	r3, [r7, #0]
    cd70:	e004      	b.n	cd7c <Reset_Handler+0x40>
                *pDest++ = 0;
    cd72:	683b      	ldr	r3, [r7, #0]
    cd74:	1d1a      	adds	r2, r3, #4
    cd76:	603a      	str	r2, [r7, #0]
    cd78:	2200      	movs	r2, #0
    cd7a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    cd7c:	683a      	ldr	r2, [r7, #0]
    cd7e:	4b24      	ldr	r3, [pc, #144]	; (ce10 <Reset_Handler+0xd4>)
    cd80:	429a      	cmp	r2, r3
    cd82:	d3f6      	bcc.n	cd72 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    cd84:	4b23      	ldr	r3, [pc, #140]	; (ce14 <Reset_Handler+0xd8>)
    cd86:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    cd88:	4b23      	ldr	r3, [pc, #140]	; (ce18 <Reset_Handler+0xdc>)
    cd8a:	687a      	ldr	r2, [r7, #4]
    cd8c:	21ff      	movs	r1, #255	; 0xff
    cd8e:	438a      	bics	r2, r1
    cd90:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    cd92:	4a22      	ldr	r2, [pc, #136]	; (ce1c <Reset_Handler+0xe0>)
    cd94:	2390      	movs	r3, #144	; 0x90
    cd96:	005b      	lsls	r3, r3, #1
    cd98:	2102      	movs	r1, #2
    cd9a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    cd9c:	4a20      	ldr	r2, [pc, #128]	; (ce20 <Reset_Handler+0xe4>)
    cd9e:	78d3      	ldrb	r3, [r2, #3]
    cda0:	2103      	movs	r1, #3
    cda2:	438b      	bics	r3, r1
    cda4:	1c19      	adds	r1, r3, #0
    cda6:	2302      	movs	r3, #2
    cda8:	430b      	orrs	r3, r1
    cdaa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    cdac:	4a1c      	ldr	r2, [pc, #112]	; (ce20 <Reset_Handler+0xe4>)
    cdae:	78d3      	ldrb	r3, [r2, #3]
    cdb0:	210c      	movs	r1, #12
    cdb2:	438b      	bics	r3, r1
    cdb4:	1c19      	adds	r1, r3, #0
    cdb6:	2308      	movs	r3, #8
    cdb8:	430b      	orrs	r3, r1
    cdba:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    cdbc:	4a19      	ldr	r2, [pc, #100]	; (ce24 <Reset_Handler+0xe8>)
    cdbe:	7b93      	ldrb	r3, [r2, #14]
    cdc0:	2130      	movs	r1, #48	; 0x30
    cdc2:	438b      	bics	r3, r1
    cdc4:	1c19      	adds	r1, r3, #0
    cdc6:	2320      	movs	r3, #32
    cdc8:	430b      	orrs	r3, r1
    cdca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    cdcc:	4a15      	ldr	r2, [pc, #84]	; (ce24 <Reset_Handler+0xe8>)
    cdce:	7b93      	ldrb	r3, [r2, #14]
    cdd0:	210c      	movs	r1, #12
    cdd2:	438b      	bics	r3, r1
    cdd4:	1c19      	adds	r1, r3, #0
    cdd6:	2308      	movs	r3, #8
    cdd8:	430b      	orrs	r3, r1
    cdda:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    cddc:	4a11      	ldr	r2, [pc, #68]	; (ce24 <Reset_Handler+0xe8>)
    cdde:	7b93      	ldrb	r3, [r2, #14]
    cde0:	2103      	movs	r1, #3
    cde2:	438b      	bics	r3, r1
    cde4:	1c19      	adds	r1, r3, #0
    cde6:	2302      	movs	r3, #2
    cde8:	430b      	orrs	r3, r1
    cdea:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    cdec:	4a0e      	ldr	r2, [pc, #56]	; (ce28 <Reset_Handler+0xec>)
    cdee:	6853      	ldr	r3, [r2, #4]
    cdf0:	2180      	movs	r1, #128	; 0x80
    cdf2:	430b      	orrs	r3, r1
    cdf4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    cdf6:	4b0d      	ldr	r3, [pc, #52]	; (ce2c <Reset_Handler+0xf0>)
    cdf8:	4798      	blx	r3

        /* Branch to main function */
        main();
    cdfa:	4b0d      	ldr	r3, [pc, #52]	; (ce30 <Reset_Handler+0xf4>)
    cdfc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    cdfe:	e7fe      	b.n	cdfe <Reset_Handler+0xc2>
    ce00:	000142d8 	.word	0x000142d8
    ce04:	20000000 	.word	0x20000000
    ce08:	200000a0 	.word	0x200000a0
    ce0c:	200000a0 	.word	0x200000a0
    ce10:	20004800 	.word	0x20004800
    ce14:	00000000 	.word	0x00000000
    ce18:	e000ed00 	.word	0xe000ed00
    ce1c:	41007000 	.word	0x41007000
    ce20:	41005000 	.word	0x41005000
    ce24:	41004800 	.word	0x41004800
    ce28:	41004000 	.word	0x41004000
    ce2c:	00010d61 	.word	0x00010d61
    ce30:	0000f92d 	.word	0x0000f92d

0000ce34 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    ce34:	b580      	push	{r7, lr}
    ce36:	b082      	sub	sp, #8
    ce38:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ce3a:	f3ef 8305 	mrs	r3, IPSR
    ce3e:	607b      	str	r3, [r7, #4]
  return(result);
    ce40:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    ce42:	4b01      	ldr	r3, [pc, #4]	; (ce48 <Dummy_Handler+0x14>)
    ce44:	601a      	str	r2, [r3, #0]
        }
    ce46:	e7f8      	b.n	ce3a <Dummy_Handler+0x6>
    ce48:	20000030 	.word	0x20000030

0000ce4c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    ce4c:	b580      	push	{r7, lr}
    ce4e:	b086      	sub	sp, #24
    ce50:	af00      	add	r7, sp, #0
    ce52:	60f8      	str	r0, [r7, #12]
    ce54:	60b9      	str	r1, [r7, #8]
    ce56:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    ce58:	2300      	movs	r3, #0
    ce5a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    ce5c:	68fb      	ldr	r3, [r7, #12]
    ce5e:	2b00      	cmp	r3, #0
    ce60:	d012      	beq.n	ce88 <_read+0x3c>
		return -1;
    ce62:	2301      	movs	r3, #1
    ce64:	425b      	negs	r3, r3
    ce66:	e013      	b.n	ce90 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    ce68:	4b0b      	ldr	r3, [pc, #44]	; (ce98 <_read+0x4c>)
    ce6a:	681a      	ldr	r2, [r3, #0]
    ce6c:	4b0b      	ldr	r3, [pc, #44]	; (ce9c <_read+0x50>)
    ce6e:	681b      	ldr	r3, [r3, #0]
    ce70:	68b9      	ldr	r1, [r7, #8]
    ce72:	0018      	movs	r0, r3
    ce74:	4790      	blx	r2
		ptr++;
    ce76:	68bb      	ldr	r3, [r7, #8]
    ce78:	3301      	adds	r3, #1
    ce7a:	60bb      	str	r3, [r7, #8]
		nChars++;
    ce7c:	697b      	ldr	r3, [r7, #20]
    ce7e:	3301      	adds	r3, #1
    ce80:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    ce82:	687b      	ldr	r3, [r7, #4]
    ce84:	3b01      	subs	r3, #1
    ce86:	607b      	str	r3, [r7, #4]
    ce88:	687b      	ldr	r3, [r7, #4]
    ce8a:	2b00      	cmp	r3, #0
    ce8c:	dcec      	bgt.n	ce68 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    ce8e:	697b      	ldr	r3, [r7, #20]
}
    ce90:	0018      	movs	r0, r3
    ce92:	46bd      	mov	sp, r7
    ce94:	b006      	add	sp, #24
    ce96:	bd80      	pop	{r7, pc}
    ce98:	200047b8 	.word	0x200047b8
    ce9c:	200047c0 	.word	0x200047c0

0000cea0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    cea0:	b580      	push	{r7, lr}
    cea2:	b086      	sub	sp, #24
    cea4:	af00      	add	r7, sp, #0
    cea6:	60f8      	str	r0, [r7, #12]
    cea8:	60b9      	str	r1, [r7, #8]
    ceaa:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    ceac:	2300      	movs	r3, #0
    ceae:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    ceb0:	68fb      	ldr	r3, [r7, #12]
    ceb2:	2b01      	cmp	r3, #1
    ceb4:	d01d      	beq.n	cef2 <_write+0x52>
    ceb6:	68fb      	ldr	r3, [r7, #12]
    ceb8:	2b02      	cmp	r3, #2
    ceba:	d01a      	beq.n	cef2 <_write+0x52>
    cebc:	68fb      	ldr	r3, [r7, #12]
    cebe:	2b03      	cmp	r3, #3
    cec0:	d017      	beq.n	cef2 <_write+0x52>
		return -1;
    cec2:	2301      	movs	r3, #1
    cec4:	425b      	negs	r3, r3
    cec6:	e018      	b.n	cefa <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    cec8:	4b0e      	ldr	r3, [pc, #56]	; (cf04 <_write+0x64>)
    ceca:	681a      	ldr	r2, [r3, #0]
    cecc:	4b0e      	ldr	r3, [pc, #56]	; (cf08 <_write+0x68>)
    cece:	6818      	ldr	r0, [r3, #0]
    ced0:	68bb      	ldr	r3, [r7, #8]
    ced2:	1c59      	adds	r1, r3, #1
    ced4:	60b9      	str	r1, [r7, #8]
    ced6:	781b      	ldrb	r3, [r3, #0]
    ced8:	0019      	movs	r1, r3
    ceda:	4790      	blx	r2
    cedc:	1e03      	subs	r3, r0, #0
    cede:	da02      	bge.n	cee6 <_write+0x46>
			return -1;
    cee0:	2301      	movs	r3, #1
    cee2:	425b      	negs	r3, r3
    cee4:	e009      	b.n	cefa <_write+0x5a>
		}
		++nChars;
    cee6:	697b      	ldr	r3, [r7, #20]
    cee8:	3301      	adds	r3, #1
    ceea:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    ceec:	687b      	ldr	r3, [r7, #4]
    ceee:	3b01      	subs	r3, #1
    cef0:	607b      	str	r3, [r7, #4]
    cef2:	687b      	ldr	r3, [r7, #4]
    cef4:	2b00      	cmp	r3, #0
    cef6:	d1e7      	bne.n	cec8 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    cef8:	697b      	ldr	r3, [r7, #20]
}
    cefa:	0018      	movs	r0, r3
    cefc:	46bd      	mov	sp, r7
    cefe:	b006      	add	sp, #24
    cf00:	bd80      	pop	{r7, pc}
    cf02:	46c0      	nop			; (mov r8, r8)
    cf04:	200047bc 	.word	0x200047bc
    cf08:	200047c0 	.word	0x200047c0

0000cf0c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    cf0c:	b580      	push	{r7, lr}
    cf0e:	b084      	sub	sp, #16
    cf10:	af00      	add	r7, sp, #0
    cf12:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    cf14:	4b0a      	ldr	r3, [pc, #40]	; (cf40 <_sbrk+0x34>)
    cf16:	681b      	ldr	r3, [r3, #0]
    cf18:	2b00      	cmp	r3, #0
    cf1a:	d102      	bne.n	cf22 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    cf1c:	4b08      	ldr	r3, [pc, #32]	; (cf40 <_sbrk+0x34>)
    cf1e:	4a09      	ldr	r2, [pc, #36]	; (cf44 <_sbrk+0x38>)
    cf20:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    cf22:	4b07      	ldr	r3, [pc, #28]	; (cf40 <_sbrk+0x34>)
    cf24:	681b      	ldr	r3, [r3, #0]
    cf26:	60fb      	str	r3, [r7, #12]

	heap += incr;
    cf28:	4b05      	ldr	r3, [pc, #20]	; (cf40 <_sbrk+0x34>)
    cf2a:	681a      	ldr	r2, [r3, #0]
    cf2c:	687b      	ldr	r3, [r7, #4]
    cf2e:	18d2      	adds	r2, r2, r3
    cf30:	4b03      	ldr	r3, [pc, #12]	; (cf40 <_sbrk+0x34>)
    cf32:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    cf34:	68fb      	ldr	r3, [r7, #12]
}
    cf36:	0018      	movs	r0, r3
    cf38:	46bd      	mov	sp, r7
    cf3a:	b004      	add	sp, #16
    cf3c:	bd80      	pop	{r7, pc}
    cf3e:	46c0      	nop			; (mov r8, r8)
    cf40:	2000013c 	.word	0x2000013c
    cf44:	20006800 	.word	0x20006800

0000cf48 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    cf48:	b580      	push	{r7, lr}
    cf4a:	b082      	sub	sp, #8
    cf4c:	af00      	add	r7, sp, #0
    cf4e:	6078      	str	r0, [r7, #4]
	return -1;
    cf50:	2301      	movs	r3, #1
    cf52:	425b      	negs	r3, r3
}
    cf54:	0018      	movs	r0, r3
    cf56:	46bd      	mov	sp, r7
    cf58:	b002      	add	sp, #8
    cf5a:	bd80      	pop	{r7, pc}

0000cf5c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    cf5c:	b580      	push	{r7, lr}
    cf5e:	b082      	sub	sp, #8
    cf60:	af00      	add	r7, sp, #0
    cf62:	6078      	str	r0, [r7, #4]
    cf64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    cf66:	683b      	ldr	r3, [r7, #0]
    cf68:	2280      	movs	r2, #128	; 0x80
    cf6a:	0192      	lsls	r2, r2, #6
    cf6c:	605a      	str	r2, [r3, #4]

	return 0;
    cf6e:	2300      	movs	r3, #0
}
    cf70:	0018      	movs	r0, r3
    cf72:	46bd      	mov	sp, r7
    cf74:	b002      	add	sp, #8
    cf76:	bd80      	pop	{r7, pc}

0000cf78 <_isatty>:

extern int _isatty(int file)
{
    cf78:	b580      	push	{r7, lr}
    cf7a:	b082      	sub	sp, #8
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	6078      	str	r0, [r7, #4]
	return 1;
    cf80:	2301      	movs	r3, #1
}
    cf82:	0018      	movs	r0, r3
    cf84:	46bd      	mov	sp, r7
    cf86:	b002      	add	sp, #8
    cf88:	bd80      	pop	{r7, pc}
    cf8a:	46c0      	nop			; (mov r8, r8)

0000cf8c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    cf8c:	b580      	push	{r7, lr}
    cf8e:	b084      	sub	sp, #16
    cf90:	af00      	add	r7, sp, #0
    cf92:	60f8      	str	r0, [r7, #12]
    cf94:	60b9      	str	r1, [r7, #8]
    cf96:	607a      	str	r2, [r7, #4]
	return 0;
    cf98:	2300      	movs	r3, #0
}
    cf9a:	0018      	movs	r0, r3
    cf9c:	46bd      	mov	sp, r7
    cf9e:	b004      	add	sp, #16
    cfa0:	bd80      	pop	{r7, pc}
    cfa2:	46c0      	nop			; (mov r8, r8)

0000cfa4 <_exit>:

extern void _exit(int status)
{
    cfa4:	b580      	push	{r7, lr}
    cfa6:	b082      	sub	sp, #8
    cfa8:	af00      	add	r7, sp, #0
    cfaa:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    cfac:	be00      	bkpt	0x0000
}
    cfae:	46c0      	nop			; (mov r8, r8)
    cfb0:	46bd      	mov	sp, r7
    cfb2:	b002      	add	sp, #8
    cfb4:	bd80      	pop	{r7, pc}
    cfb6:	46c0      	nop			; (mov r8, r8)

0000cfb8 <_kill>:

extern void _kill(int pid, int sig)
{
    cfb8:	b580      	push	{r7, lr}
    cfba:	b082      	sub	sp, #8
    cfbc:	af00      	add	r7, sp, #0
    cfbe:	6078      	str	r0, [r7, #4]
    cfc0:	6039      	str	r1, [r7, #0]
	return;
    cfc2:	46c0      	nop			; (mov r8, r8)
}
    cfc4:	46bd      	mov	sp, r7
    cfc6:	b002      	add	sp, #8
    cfc8:	bd80      	pop	{r7, pc}
    cfca:	46c0      	nop			; (mov r8, r8)

0000cfcc <_getpid>:

extern int _getpid(void)
{
    cfcc:	b580      	push	{r7, lr}
    cfce:	af00      	add	r7, sp, #0
	return -1;
    cfd0:	2301      	movs	r3, #1
    cfd2:	425b      	negs	r3, r3
}
    cfd4:	0018      	movs	r0, r3
    cfd6:	46bd      	mov	sp, r7
    cfd8:	bd80      	pop	{r7, pc}
    cfda:	46c0      	nop			; (mov r8, r8)

0000cfdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    cfdc:	b580      	push	{r7, lr}
    cfde:	b082      	sub	sp, #8
    cfe0:	af00      	add	r7, sp, #0
    cfe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    cfe4:	687b      	ldr	r3, [r7, #4]
    cfe6:	3308      	adds	r3, #8
    cfe8:	001a      	movs	r2, r3
    cfea:	687b      	ldr	r3, [r7, #4]
    cfec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    cfee:	687b      	ldr	r3, [r7, #4]
    cff0:	2201      	movs	r2, #1
    cff2:	4252      	negs	r2, r2
    cff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    cff6:	687b      	ldr	r3, [r7, #4]
    cff8:	3308      	adds	r3, #8
    cffa:	001a      	movs	r2, r3
    cffc:	687b      	ldr	r3, [r7, #4]
    cffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    d000:	687b      	ldr	r3, [r7, #4]
    d002:	3308      	adds	r3, #8
    d004:	001a      	movs	r2, r3
    d006:	687b      	ldr	r3, [r7, #4]
    d008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    d00a:	687b      	ldr	r3, [r7, #4]
    d00c:	2200      	movs	r2, #0
    d00e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    d010:	46c0      	nop			; (mov r8, r8)
    d012:	46bd      	mov	sp, r7
    d014:	b002      	add	sp, #8
    d016:	bd80      	pop	{r7, pc}

0000d018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    d018:	b580      	push	{r7, lr}
    d01a:	b082      	sub	sp, #8
    d01c:	af00      	add	r7, sp, #0
    d01e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    d020:	687b      	ldr	r3, [r7, #4]
    d022:	2200      	movs	r2, #0
    d024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    d026:	46c0      	nop			; (mov r8, r8)
    d028:	46bd      	mov	sp, r7
    d02a:	b002      	add	sp, #8
    d02c:	bd80      	pop	{r7, pc}
    d02e:	46c0      	nop			; (mov r8, r8)

0000d030 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    d030:	b580      	push	{r7, lr}
    d032:	b084      	sub	sp, #16
    d034:	af00      	add	r7, sp, #0
    d036:	6078      	str	r0, [r7, #4]
    d038:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    d03a:	687b      	ldr	r3, [r7, #4]
    d03c:	685b      	ldr	r3, [r3, #4]
    d03e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    d040:	683b      	ldr	r3, [r7, #0]
    d042:	68fa      	ldr	r2, [r7, #12]
    d044:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    d046:	68fb      	ldr	r3, [r7, #12]
    d048:	689a      	ldr	r2, [r3, #8]
    d04a:	683b      	ldr	r3, [r7, #0]
    d04c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    d04e:	68fb      	ldr	r3, [r7, #12]
    d050:	689b      	ldr	r3, [r3, #8]
    d052:	683a      	ldr	r2, [r7, #0]
    d054:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    d056:	68fb      	ldr	r3, [r7, #12]
    d058:	683a      	ldr	r2, [r7, #0]
    d05a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    d05c:	683b      	ldr	r3, [r7, #0]
    d05e:	687a      	ldr	r2, [r7, #4]
    d060:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    d062:	687b      	ldr	r3, [r7, #4]
    d064:	681b      	ldr	r3, [r3, #0]
    d066:	1c5a      	adds	r2, r3, #1
    d068:	687b      	ldr	r3, [r7, #4]
    d06a:	601a      	str	r2, [r3, #0]
}
    d06c:	46c0      	nop			; (mov r8, r8)
    d06e:	46bd      	mov	sp, r7
    d070:	b004      	add	sp, #16
    d072:	bd80      	pop	{r7, pc}

0000d074 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    d074:	b580      	push	{r7, lr}
    d076:	b084      	sub	sp, #16
    d078:	af00      	add	r7, sp, #0
    d07a:	6078      	str	r0, [r7, #4]
    d07c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    d07e:	683b      	ldr	r3, [r7, #0]
    d080:	681b      	ldr	r3, [r3, #0]
    d082:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    d084:	68bb      	ldr	r3, [r7, #8]
    d086:	3301      	adds	r3, #1
    d088:	d103      	bne.n	d092 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    d08a:	687b      	ldr	r3, [r7, #4]
    d08c:	691b      	ldr	r3, [r3, #16]
    d08e:	60fb      	str	r3, [r7, #12]
    d090:	e00c      	b.n	d0ac <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    d092:	687b      	ldr	r3, [r7, #4]
    d094:	3308      	adds	r3, #8
    d096:	60fb      	str	r3, [r7, #12]
    d098:	e002      	b.n	d0a0 <vListInsert+0x2c>
    d09a:	68fb      	ldr	r3, [r7, #12]
    d09c:	685b      	ldr	r3, [r3, #4]
    d09e:	60fb      	str	r3, [r7, #12]
    d0a0:	68fb      	ldr	r3, [r7, #12]
    d0a2:	685b      	ldr	r3, [r3, #4]
    d0a4:	681a      	ldr	r2, [r3, #0]
    d0a6:	68bb      	ldr	r3, [r7, #8]
    d0a8:	429a      	cmp	r2, r3
    d0aa:	d9f6      	bls.n	d09a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    d0ac:	68fb      	ldr	r3, [r7, #12]
    d0ae:	685a      	ldr	r2, [r3, #4]
    d0b0:	683b      	ldr	r3, [r7, #0]
    d0b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    d0b4:	683b      	ldr	r3, [r7, #0]
    d0b6:	685b      	ldr	r3, [r3, #4]
    d0b8:	683a      	ldr	r2, [r7, #0]
    d0ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    d0bc:	683b      	ldr	r3, [r7, #0]
    d0be:	68fa      	ldr	r2, [r7, #12]
    d0c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    d0c2:	68fb      	ldr	r3, [r7, #12]
    d0c4:	683a      	ldr	r2, [r7, #0]
    d0c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    d0c8:	683b      	ldr	r3, [r7, #0]
    d0ca:	687a      	ldr	r2, [r7, #4]
    d0cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    d0ce:	687b      	ldr	r3, [r7, #4]
    d0d0:	681b      	ldr	r3, [r3, #0]
    d0d2:	1c5a      	adds	r2, r3, #1
    d0d4:	687b      	ldr	r3, [r7, #4]
    d0d6:	601a      	str	r2, [r3, #0]
}
    d0d8:	46c0      	nop			; (mov r8, r8)
    d0da:	46bd      	mov	sp, r7
    d0dc:	b004      	add	sp, #16
    d0de:	bd80      	pop	{r7, pc}

0000d0e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    d0e0:	b580      	push	{r7, lr}
    d0e2:	b084      	sub	sp, #16
    d0e4:	af00      	add	r7, sp, #0
    d0e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    d0e8:	687b      	ldr	r3, [r7, #4]
    d0ea:	691b      	ldr	r3, [r3, #16]
    d0ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    d0ee:	687b      	ldr	r3, [r7, #4]
    d0f0:	685b      	ldr	r3, [r3, #4]
    d0f2:	687a      	ldr	r2, [r7, #4]
    d0f4:	6892      	ldr	r2, [r2, #8]
    d0f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    d0f8:	687b      	ldr	r3, [r7, #4]
    d0fa:	689b      	ldr	r3, [r3, #8]
    d0fc:	687a      	ldr	r2, [r7, #4]
    d0fe:	6852      	ldr	r2, [r2, #4]
    d100:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    d102:	68fb      	ldr	r3, [r7, #12]
    d104:	685a      	ldr	r2, [r3, #4]
    d106:	687b      	ldr	r3, [r7, #4]
    d108:	429a      	cmp	r2, r3
    d10a:	d103      	bne.n	d114 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    d10c:	687b      	ldr	r3, [r7, #4]
    d10e:	689a      	ldr	r2, [r3, #8]
    d110:	68fb      	ldr	r3, [r7, #12]
    d112:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	2200      	movs	r2, #0
    d118:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    d11a:	68fb      	ldr	r3, [r7, #12]
    d11c:	681b      	ldr	r3, [r3, #0]
    d11e:	1e5a      	subs	r2, r3, #1
    d120:	68fb      	ldr	r3, [r7, #12]
    d122:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    d124:	68fb      	ldr	r3, [r7, #12]
    d126:	681b      	ldr	r3, [r3, #0]
}
    d128:	0018      	movs	r0, r3
    d12a:	46bd      	mov	sp, r7
    d12c:	b004      	add	sp, #16
    d12e:	bd80      	pop	{r7, pc}

0000d130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    d130:	b580      	push	{r7, lr}
    d132:	b084      	sub	sp, #16
    d134:	af00      	add	r7, sp, #0
    d136:	60f8      	str	r0, [r7, #12]
    d138:	60b9      	str	r1, [r7, #8]
    d13a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    d13c:	68fb      	ldr	r3, [r7, #12]
    d13e:	3b04      	subs	r3, #4
    d140:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    d142:	68fb      	ldr	r3, [r7, #12]
    d144:	2280      	movs	r2, #128	; 0x80
    d146:	0452      	lsls	r2, r2, #17
    d148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    d14a:	68fb      	ldr	r3, [r7, #12]
    d14c:	3b04      	subs	r3, #4
    d14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    d150:	68ba      	ldr	r2, [r7, #8]
    d152:	68fb      	ldr	r3, [r7, #12]
    d154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    d156:	68fb      	ldr	r3, [r7, #12]
    d158:	3b04      	subs	r3, #4
    d15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    d15c:	4a08      	ldr	r2, [pc, #32]	; (d180 <pxPortInitialiseStack+0x50>)
    d15e:	68fb      	ldr	r3, [r7, #12]
    d160:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    d162:	68fb      	ldr	r3, [r7, #12]
    d164:	3b14      	subs	r3, #20
    d166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    d168:	687a      	ldr	r2, [r7, #4]
    d16a:	68fb      	ldr	r3, [r7, #12]
    d16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    d16e:	68fb      	ldr	r3, [r7, #12]
    d170:	3b20      	subs	r3, #32
    d172:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    d174:	68fb      	ldr	r3, [r7, #12]
}
    d176:	0018      	movs	r0, r3
    d178:	46bd      	mov	sp, r7
    d17a:	b004      	add	sp, #16
    d17c:	bd80      	pop	{r7, pc}
    d17e:	46c0      	nop			; (mov r8, r8)
    d180:	0000d185 	.word	0x0000d185

0000d184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    d184:	b580      	push	{r7, lr}
    d186:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    d188:	4b03      	ldr	r3, [pc, #12]	; (d198 <prvTaskExitError+0x14>)
    d18a:	681b      	ldr	r3, [r3, #0]
    d18c:	3301      	adds	r3, #1
    d18e:	d001      	beq.n	d194 <prvTaskExitError+0x10>
    d190:	b672      	cpsid	i
    d192:	e7fe      	b.n	d192 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    d194:	b672      	cpsid	i
	for( ;; );
    d196:	e7fe      	b.n	d196 <prvTaskExitError+0x12>
    d198:	20000034 	.word	0x20000034

0000d19c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    d19c:	b580      	push	{r7, lr}
    d19e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    d1a0:	46c0      	nop			; (mov r8, r8)
    d1a2:	46bd      	mov	sp, r7
    d1a4:	bd80      	pop	{r7, pc}
    d1a6:	46c0      	nop			; (mov r8, r8)
	...

0000d1b0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    d1b0:	4a0b      	ldr	r2, [pc, #44]	; (d1e0 <pxCurrentTCBConst2>)
    d1b2:	6813      	ldr	r3, [r2, #0]
    d1b4:	6818      	ldr	r0, [r3, #0]
    d1b6:	3020      	adds	r0, #32
    d1b8:	f380 8809 	msr	PSP, r0
    d1bc:	2002      	movs	r0, #2
    d1be:	f380 8814 	msr	CONTROL, r0
    d1c2:	f3bf 8f6f 	isb	sy
    d1c6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    d1c8:	46ae      	mov	lr, r5
    d1ca:	bc08      	pop	{r3}
    d1cc:	bc04      	pop	{r2}
    d1ce:	b662      	cpsie	i
    d1d0:	4718      	bx	r3
    d1d2:	46c0      	nop			; (mov r8, r8)
    d1d4:	46c0      	nop			; (mov r8, r8)
    d1d6:	46c0      	nop			; (mov r8, r8)
    d1d8:	46c0      	nop			; (mov r8, r8)
    d1da:	46c0      	nop			; (mov r8, r8)
    d1dc:	46c0      	nop			; (mov r8, r8)
    d1de:	46c0      	nop			; (mov r8, r8)

0000d1e0 <pxCurrentTCBConst2>:
    d1e0:	20003d48 	.word	0x20003d48
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    d1e4:	46c0      	nop			; (mov r8, r8)
    d1e6:	46c0      	nop			; (mov r8, r8)

0000d1e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    d1e8:	b580      	push	{r7, lr}
    d1ea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    d1ec:	4b0d      	ldr	r3, [pc, #52]	; (d224 <xPortStartScheduler+0x3c>)
    d1ee:	4a0d      	ldr	r2, [pc, #52]	; (d224 <xPortStartScheduler+0x3c>)
    d1f0:	6812      	ldr	r2, [r2, #0]
    d1f2:	21ff      	movs	r1, #255	; 0xff
    d1f4:	0409      	lsls	r1, r1, #16
    d1f6:	430a      	orrs	r2, r1
    d1f8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    d1fa:	4b0a      	ldr	r3, [pc, #40]	; (d224 <xPortStartScheduler+0x3c>)
    d1fc:	4a09      	ldr	r2, [pc, #36]	; (d224 <xPortStartScheduler+0x3c>)
    d1fe:	6812      	ldr	r2, [r2, #0]
    d200:	21ff      	movs	r1, #255	; 0xff
    d202:	0609      	lsls	r1, r1, #24
    d204:	430a      	orrs	r2, r1
    d206:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    d208:	4b07      	ldr	r3, [pc, #28]	; (d228 <xPortStartScheduler+0x40>)
    d20a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    d20c:	4b07      	ldr	r3, [pc, #28]	; (d22c <xPortStartScheduler+0x44>)
    d20e:	2200      	movs	r2, #0
    d210:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    d212:	4b07      	ldr	r3, [pc, #28]	; (d230 <xPortStartScheduler+0x48>)
    d214:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    d216:	4b07      	ldr	r3, [pc, #28]	; (d234 <xPortStartScheduler+0x4c>)
    d218:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    d21a:	2300      	movs	r3, #0
}
    d21c:	0018      	movs	r0, r3
    d21e:	46bd      	mov	sp, r7
    d220:	bd80      	pop	{r7, pc}
    d222:	46c0      	nop			; (mov r8, r8)
    d224:	e000ed20 	.word	0xe000ed20
    d228:	0000d349 	.word	0x0000d349
    d22c:	20000034 	.word	0x20000034
    d230:	0000d1b1 	.word	0x0000d1b1
    d234:	0000d185 	.word	0x0000d185

0000d238 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    d238:	b580      	push	{r7, lr}
    d23a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    d23c:	4b05      	ldr	r3, [pc, #20]	; (d254 <vPortYield+0x1c>)
    d23e:	2280      	movs	r2, #128	; 0x80
    d240:	0552      	lsls	r2, r2, #21
    d242:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    d244:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    d248:	f3bf 8f6f 	isb	sy
}
    d24c:	46c0      	nop			; (mov r8, r8)
    d24e:	46bd      	mov	sp, r7
    d250:	bd80      	pop	{r7, pc}
    d252:	46c0      	nop			; (mov r8, r8)
    d254:	e000ed04 	.word	0xe000ed04

0000d258 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    d258:	b580      	push	{r7, lr}
    d25a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    d25c:	b672      	cpsid	i
    uxCriticalNesting++;
    d25e:	4b06      	ldr	r3, [pc, #24]	; (d278 <vPortEnterCritical+0x20>)
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	1c5a      	adds	r2, r3, #1
    d264:	4b04      	ldr	r3, [pc, #16]	; (d278 <vPortEnterCritical+0x20>)
    d266:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    d268:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    d26c:	f3bf 8f6f 	isb	sy
}
    d270:	46c0      	nop			; (mov r8, r8)
    d272:	46bd      	mov	sp, r7
    d274:	bd80      	pop	{r7, pc}
    d276:	46c0      	nop			; (mov r8, r8)
    d278:	20000034 	.word	0x20000034

0000d27c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    d27c:	b580      	push	{r7, lr}
    d27e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    d280:	4b09      	ldr	r3, [pc, #36]	; (d2a8 <vPortExitCritical+0x2c>)
    d282:	681b      	ldr	r3, [r3, #0]
    d284:	2b00      	cmp	r3, #0
    d286:	d101      	bne.n	d28c <vPortExitCritical+0x10>
    d288:	b672      	cpsid	i
    d28a:	e7fe      	b.n	d28a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    d28c:	4b06      	ldr	r3, [pc, #24]	; (d2a8 <vPortExitCritical+0x2c>)
    d28e:	681b      	ldr	r3, [r3, #0]
    d290:	1e5a      	subs	r2, r3, #1
    d292:	4b05      	ldr	r3, [pc, #20]	; (d2a8 <vPortExitCritical+0x2c>)
    d294:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    d296:	4b04      	ldr	r3, [pc, #16]	; (d2a8 <vPortExitCritical+0x2c>)
    d298:	681b      	ldr	r3, [r3, #0]
    d29a:	2b00      	cmp	r3, #0
    d29c:	d100      	bne.n	d2a0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    d29e:	b662      	cpsie	i
    }
}
    d2a0:	46c0      	nop			; (mov r8, r8)
    d2a2:	46bd      	mov	sp, r7
    d2a4:	bd80      	pop	{r7, pc}
    d2a6:	46c0      	nop			; (mov r8, r8)
    d2a8:	20000034 	.word	0x20000034

0000d2ac <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    d2ac:	f3ef 8010 	mrs	r0, PRIMASK
    d2b0:	b672      	cpsid	i
    d2b2:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    d2b4:	46c0      	nop			; (mov r8, r8)
    d2b6:	0018      	movs	r0, r3

0000d2b8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    d2b8:	f380 8810 	msr	PRIMASK, r0
    d2bc:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    d2be:	46c0      	nop			; (mov r8, r8)

0000d2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    d2c0:	f3ef 8009 	mrs	r0, PSP
    d2c4:	4b0e      	ldr	r3, [pc, #56]	; (d300 <pxCurrentTCBConst>)
    d2c6:	681a      	ldr	r2, [r3, #0]
    d2c8:	3820      	subs	r0, #32
    d2ca:	6010      	str	r0, [r2, #0]
    d2cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    d2ce:	4644      	mov	r4, r8
    d2d0:	464d      	mov	r5, r9
    d2d2:	4656      	mov	r6, sl
    d2d4:	465f      	mov	r7, fp
    d2d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    d2d8:	b508      	push	{r3, lr}
    d2da:	b672      	cpsid	i
    d2dc:	f001 f99e 	bl	e61c <vTaskSwitchContext>
    d2e0:	b662      	cpsie	i
    d2e2:	bc0c      	pop	{r2, r3}
    d2e4:	6811      	ldr	r1, [r2, #0]
    d2e6:	6808      	ldr	r0, [r1, #0]
    d2e8:	3010      	adds	r0, #16
    d2ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    d2ec:	46a0      	mov	r8, r4
    d2ee:	46a9      	mov	r9, r5
    d2f0:	46b2      	mov	sl, r6
    d2f2:	46bb      	mov	fp, r7
    d2f4:	f380 8809 	msr	PSP, r0
    d2f8:	3820      	subs	r0, #32
    d2fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    d2fc:	4718      	bx	r3
    d2fe:	46c0      	nop			; (mov r8, r8)

0000d300 <pxCurrentTCBConst>:
    d300:	20003d48 	.word	0x20003d48
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    d304:	46c0      	nop			; (mov r8, r8)
    d306:	46c0      	nop			; (mov r8, r8)

0000d308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    d308:	b580      	push	{r7, lr}
    d30a:	b082      	sub	sp, #8
    d30c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    d30e:	4b0a      	ldr	r3, [pc, #40]	; (d338 <SysTick_Handler+0x30>)
    d310:	4798      	blx	r3
    d312:	0003      	movs	r3, r0
    d314:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    d316:	4b09      	ldr	r3, [pc, #36]	; (d33c <SysTick_Handler+0x34>)
    d318:	4798      	blx	r3
    d31a:	1e03      	subs	r3, r0, #0
    d31c:	d003      	beq.n	d326 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    d31e:	4b08      	ldr	r3, [pc, #32]	; (d340 <SysTick_Handler+0x38>)
    d320:	2280      	movs	r2, #128	; 0x80
    d322:	0552      	lsls	r2, r2, #21
    d324:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    d326:	687b      	ldr	r3, [r7, #4]
    d328:	0018      	movs	r0, r3
    d32a:	4b06      	ldr	r3, [pc, #24]	; (d344 <SysTick_Handler+0x3c>)
    d32c:	4798      	blx	r3
}
    d32e:	46c0      	nop			; (mov r8, r8)
    d330:	46bd      	mov	sp, r7
    d332:	b002      	add	sp, #8
    d334:	bd80      	pop	{r7, pc}
    d336:	46c0      	nop			; (mov r8, r8)
    d338:	0000d2ad 	.word	0x0000d2ad
    d33c:	0000e4c5 	.word	0x0000e4c5
    d340:	e000ed04 	.word	0xe000ed04
    d344:	0000d2b9 	.word	0x0000d2b9

0000d348 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    d348:	b580      	push	{r7, lr}
    d34a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    d34c:	4b04      	ldr	r3, [pc, #16]	; (d360 <prvSetupTimerInterrupt+0x18>)
    d34e:	4a05      	ldr	r2, [pc, #20]	; (d364 <prvSetupTimerInterrupt+0x1c>)
    d350:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    d352:	4b05      	ldr	r3, [pc, #20]	; (d368 <prvSetupTimerInterrupt+0x20>)
    d354:	2207      	movs	r2, #7
    d356:	601a      	str	r2, [r3, #0]
}
    d358:	46c0      	nop			; (mov r8, r8)
    d35a:	46bd      	mov	sp, r7
    d35c:	bd80      	pop	{r7, pc}
    d35e:	46c0      	nop			; (mov r8, r8)
    d360:	e000e014 	.word	0xe000e014
    d364:	000752ff 	.word	0x000752ff
    d368:	e000e010 	.word	0xe000e010

0000d36c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    d36c:	b580      	push	{r7, lr}
    d36e:	b084      	sub	sp, #16
    d370:	af00      	add	r7, sp, #0
    d372:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    d374:	2300      	movs	r3, #0
    d376:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    d378:	687b      	ldr	r3, [r7, #4]
    d37a:	2207      	movs	r2, #7
    d37c:	4013      	ands	r3, r2
    d37e:	d004      	beq.n	d38a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    d380:	687b      	ldr	r3, [r7, #4]
    d382:	2207      	movs	r2, #7
    d384:	4393      	bics	r3, r2
    d386:	3308      	adds	r3, #8
    d388:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    d38a:	4b19      	ldr	r3, [pc, #100]	; (d3f0 <pvPortMalloc+0x84>)
    d38c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    d38e:	4b19      	ldr	r3, [pc, #100]	; (d3f4 <pvPortMalloc+0x88>)
    d390:	681b      	ldr	r3, [r3, #0]
    d392:	2b00      	cmp	r3, #0
    d394:	d105      	bne.n	d3a2 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    d396:	4b18      	ldr	r3, [pc, #96]	; (d3f8 <pvPortMalloc+0x8c>)
    d398:	2207      	movs	r2, #7
    d39a:	4393      	bics	r3, r2
    d39c:	001a      	movs	r2, r3
    d39e:	4b15      	ldr	r3, [pc, #84]	; (d3f4 <pvPortMalloc+0x88>)
    d3a0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    d3a2:	4b16      	ldr	r3, [pc, #88]	; (d3fc <pvPortMalloc+0x90>)
    d3a4:	681a      	ldr	r2, [r3, #0]
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	18d3      	adds	r3, r2, r3
    d3aa:	4a15      	ldr	r2, [pc, #84]	; (d400 <pvPortMalloc+0x94>)
    d3ac:	4293      	cmp	r3, r2
    d3ae:	d813      	bhi.n	d3d8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    d3b0:	4b12      	ldr	r3, [pc, #72]	; (d3fc <pvPortMalloc+0x90>)
    d3b2:	681a      	ldr	r2, [r3, #0]
    d3b4:	687b      	ldr	r3, [r7, #4]
    d3b6:	18d2      	adds	r2, r2, r3
    d3b8:	4b10      	ldr	r3, [pc, #64]	; (d3fc <pvPortMalloc+0x90>)
    d3ba:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    d3bc:	429a      	cmp	r2, r3
    d3be:	d90b      	bls.n	d3d8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    d3c0:	4b0c      	ldr	r3, [pc, #48]	; (d3f4 <pvPortMalloc+0x88>)
    d3c2:	681a      	ldr	r2, [r3, #0]
    d3c4:	4b0d      	ldr	r3, [pc, #52]	; (d3fc <pvPortMalloc+0x90>)
    d3c6:	681b      	ldr	r3, [r3, #0]
    d3c8:	18d3      	adds	r3, r2, r3
    d3ca:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    d3cc:	4b0b      	ldr	r3, [pc, #44]	; (d3fc <pvPortMalloc+0x90>)
    d3ce:	681a      	ldr	r2, [r3, #0]
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	18d2      	adds	r2, r2, r3
    d3d4:	4b09      	ldr	r3, [pc, #36]	; (d3fc <pvPortMalloc+0x90>)
    d3d6:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    d3d8:	4b0a      	ldr	r3, [pc, #40]	; (d404 <pvPortMalloc+0x98>)
    d3da:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    d3dc:	68fb      	ldr	r3, [r7, #12]
    d3de:	2b00      	cmp	r3, #0
    d3e0:	d101      	bne.n	d3e6 <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    d3e2:	4b09      	ldr	r3, [pc, #36]	; (d408 <pvPortMalloc+0x9c>)
    d3e4:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    d3e6:	68fb      	ldr	r3, [r7, #12]
}
    d3e8:	0018      	movs	r0, r3
    d3ea:	46bd      	mov	sp, r7
    d3ec:	b004      	add	sp, #16
    d3ee:	bd80      	pop	{r7, pc}
    d3f0:	0000e35d 	.word	0x0000e35d
    d3f4:	20003d44 	.word	0x20003d44
    d3f8:	20000148 	.word	0x20000148
    d3fc:	20003d40 	.word	0x20003d40
    d400:	00003bf7 	.word	0x00003bf7
    d404:	0000e375 	.word	0x0000e375
    d408:	0000f915 	.word	0x0000f915

0000d40c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    d40c:	b580      	push	{r7, lr}
    d40e:	b082      	sub	sp, #8
    d410:	af00      	add	r7, sp, #0
    d412:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    d414:	687b      	ldr	r3, [r7, #4]
    d416:	2b00      	cmp	r3, #0
    d418:	d001      	beq.n	d41e <vPortFree+0x12>
    d41a:	b672      	cpsid	i
    d41c:	e7fe      	b.n	d41c <vPortFree+0x10>
}
    d41e:	46c0      	nop			; (mov r8, r8)
    d420:	46bd      	mov	sp, r7
    d422:	b002      	add	sp, #8
    d424:	bd80      	pop	{r7, pc}
    d426:	46c0      	nop			; (mov r8, r8)

0000d428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    d428:	b580      	push	{r7, lr}
    d42a:	b084      	sub	sp, #16
    d42c:	af00      	add	r7, sp, #0
    d42e:	6078      	str	r0, [r7, #4]
    d430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    d432:	687b      	ldr	r3, [r7, #4]
    d434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    d436:	68fb      	ldr	r3, [r7, #12]
    d438:	2b00      	cmp	r3, #0
    d43a:	d101      	bne.n	d440 <xQueueGenericReset+0x18>
    d43c:	b672      	cpsid	i
    d43e:	e7fe      	b.n	d43e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    d440:	4b23      	ldr	r3, [pc, #140]	; (d4d0 <xQueueGenericReset+0xa8>)
    d442:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    d444:	68fb      	ldr	r3, [r7, #12]
    d446:	681a      	ldr	r2, [r3, #0]
    d448:	68fb      	ldr	r3, [r7, #12]
    d44a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d44c:	68fb      	ldr	r3, [r7, #12]
    d44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d450:	434b      	muls	r3, r1
    d452:	18d2      	adds	r2, r2, r3
    d454:	68fb      	ldr	r3, [r7, #12]
    d456:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    d458:	68fb      	ldr	r3, [r7, #12]
    d45a:	2200      	movs	r2, #0
    d45c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    d45e:	68fb      	ldr	r3, [r7, #12]
    d460:	681a      	ldr	r2, [r3, #0]
    d462:	68fb      	ldr	r3, [r7, #12]
    d464:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    d466:	68fb      	ldr	r3, [r7, #12]
    d468:	681a      	ldr	r2, [r3, #0]
    d46a:	68fb      	ldr	r3, [r7, #12]
    d46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d46e:	1e59      	subs	r1, r3, #1
    d470:	68fb      	ldr	r3, [r7, #12]
    d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d474:	434b      	muls	r3, r1
    d476:	18d2      	adds	r2, r2, r3
    d478:	68fb      	ldr	r3, [r7, #12]
    d47a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    d47c:	68fb      	ldr	r3, [r7, #12]
    d47e:	2244      	movs	r2, #68	; 0x44
    d480:	21ff      	movs	r1, #255	; 0xff
    d482:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    d484:	68fb      	ldr	r3, [r7, #12]
    d486:	2245      	movs	r2, #69	; 0x45
    d488:	21ff      	movs	r1, #255	; 0xff
    d48a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    d48c:	683b      	ldr	r3, [r7, #0]
    d48e:	2b00      	cmp	r3, #0
    d490:	d10d      	bne.n	d4ae <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    d492:	68fb      	ldr	r3, [r7, #12]
    d494:	691b      	ldr	r3, [r3, #16]
    d496:	2b00      	cmp	r3, #0
    d498:	d013      	beq.n	d4c2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    d49a:	68fb      	ldr	r3, [r7, #12]
    d49c:	3310      	adds	r3, #16
    d49e:	0018      	movs	r0, r3
    d4a0:	4b0c      	ldr	r3, [pc, #48]	; (d4d4 <xQueueGenericReset+0xac>)
    d4a2:	4798      	blx	r3
    d4a4:	1e03      	subs	r3, r0, #0
    d4a6:	d00c      	beq.n	d4c2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    d4a8:	4b0b      	ldr	r3, [pc, #44]	; (d4d8 <xQueueGenericReset+0xb0>)
    d4aa:	4798      	blx	r3
    d4ac:	e009      	b.n	d4c2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    d4ae:	68fb      	ldr	r3, [r7, #12]
    d4b0:	3310      	adds	r3, #16
    d4b2:	0018      	movs	r0, r3
    d4b4:	4b09      	ldr	r3, [pc, #36]	; (d4dc <xQueueGenericReset+0xb4>)
    d4b6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    d4b8:	68fb      	ldr	r3, [r7, #12]
    d4ba:	3324      	adds	r3, #36	; 0x24
    d4bc:	0018      	movs	r0, r3
    d4be:	4b07      	ldr	r3, [pc, #28]	; (d4dc <xQueueGenericReset+0xb4>)
    d4c0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    d4c2:	4b07      	ldr	r3, [pc, #28]	; (d4e0 <xQueueGenericReset+0xb8>)
    d4c4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    d4c6:	2301      	movs	r3, #1
}
    d4c8:	0018      	movs	r0, r3
    d4ca:	46bd      	mov	sp, r7
    d4cc:	b004      	add	sp, #16
    d4ce:	bd80      	pop	{r7, pc}
    d4d0:	0000d259 	.word	0x0000d259
    d4d4:	0000e77d 	.word	0x0000e77d
    d4d8:	0000d239 	.word	0x0000d239
    d4dc:	0000cfdd 	.word	0x0000cfdd
    d4e0:	0000d27d 	.word	0x0000d27d

0000d4e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    d4e4:	b590      	push	{r4, r7, lr}
    d4e6:	b08b      	sub	sp, #44	; 0x2c
    d4e8:	af02      	add	r7, sp, #8
    d4ea:	60f8      	str	r0, [r7, #12]
    d4ec:	60b9      	str	r1, [r7, #8]
    d4ee:	1dfb      	adds	r3, r7, #7
    d4f0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    d4f2:	68fb      	ldr	r3, [r7, #12]
    d4f4:	2b00      	cmp	r3, #0
    d4f6:	d101      	bne.n	d4fc <xQueueGenericCreate+0x18>
    d4f8:	b672      	cpsid	i
    d4fa:	e7fe      	b.n	d4fa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    d4fc:	68bb      	ldr	r3, [r7, #8]
    d4fe:	2b00      	cmp	r3, #0
    d500:	d102      	bne.n	d508 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    d502:	2300      	movs	r3, #0
    d504:	61fb      	str	r3, [r7, #28]
    d506:	e003      	b.n	d510 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    d508:	68fb      	ldr	r3, [r7, #12]
    d50a:	68ba      	ldr	r2, [r7, #8]
    d50c:	4353      	muls	r3, r2
    d50e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    d510:	69fb      	ldr	r3, [r7, #28]
    d512:	3354      	adds	r3, #84	; 0x54
    d514:	0018      	movs	r0, r3
    d516:	4b0c      	ldr	r3, [pc, #48]	; (d548 <xQueueGenericCreate+0x64>)
    d518:	4798      	blx	r3
    d51a:	0003      	movs	r3, r0
    d51c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    d51e:	69bb      	ldr	r3, [r7, #24]
    d520:	2b00      	cmp	r3, #0
    d522:	d00c      	beq.n	d53e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    d524:	69bb      	ldr	r3, [r7, #24]
    d526:	3354      	adds	r3, #84	; 0x54
    d528:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    d52a:	1dfb      	adds	r3, r7, #7
    d52c:	781c      	ldrb	r4, [r3, #0]
    d52e:	697a      	ldr	r2, [r7, #20]
    d530:	68b9      	ldr	r1, [r7, #8]
    d532:	68f8      	ldr	r0, [r7, #12]
    d534:	69bb      	ldr	r3, [r7, #24]
    d536:	9300      	str	r3, [sp, #0]
    d538:	0023      	movs	r3, r4
    d53a:	4c04      	ldr	r4, [pc, #16]	; (d54c <xQueueGenericCreate+0x68>)
    d53c:	47a0      	blx	r4
		}

		return pxNewQueue;
    d53e:	69bb      	ldr	r3, [r7, #24]
	}
    d540:	0018      	movs	r0, r3
    d542:	46bd      	mov	sp, r7
    d544:	b009      	add	sp, #36	; 0x24
    d546:	bd90      	pop	{r4, r7, pc}
    d548:	0000d36d 	.word	0x0000d36d
    d54c:	0000d551 	.word	0x0000d551

0000d550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    d550:	b580      	push	{r7, lr}
    d552:	b084      	sub	sp, #16
    d554:	af00      	add	r7, sp, #0
    d556:	60f8      	str	r0, [r7, #12]
    d558:	60b9      	str	r1, [r7, #8]
    d55a:	607a      	str	r2, [r7, #4]
    d55c:	001a      	movs	r2, r3
    d55e:	1cfb      	adds	r3, r7, #3
    d560:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    d562:	68bb      	ldr	r3, [r7, #8]
    d564:	2b00      	cmp	r3, #0
    d566:	d103      	bne.n	d570 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    d568:	69bb      	ldr	r3, [r7, #24]
    d56a:	69ba      	ldr	r2, [r7, #24]
    d56c:	601a      	str	r2, [r3, #0]
    d56e:	e002      	b.n	d576 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    d570:	69bb      	ldr	r3, [r7, #24]
    d572:	687a      	ldr	r2, [r7, #4]
    d574:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    d576:	69bb      	ldr	r3, [r7, #24]
    d578:	68fa      	ldr	r2, [r7, #12]
    d57a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    d57c:	69bb      	ldr	r3, [r7, #24]
    d57e:	68ba      	ldr	r2, [r7, #8]
    d580:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    d582:	69bb      	ldr	r3, [r7, #24]
    d584:	2101      	movs	r1, #1
    d586:	0018      	movs	r0, r3
    d588:	4b06      	ldr	r3, [pc, #24]	; (d5a4 <prvInitialiseNewQueue+0x54>)
    d58a:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    d58c:	69bb      	ldr	r3, [r7, #24]
    d58e:	1cfa      	adds	r2, r7, #3
    d590:	2150      	movs	r1, #80	; 0x50
    d592:	7812      	ldrb	r2, [r2, #0]
    d594:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    d596:	69bb      	ldr	r3, [r7, #24]
    d598:	2200      	movs	r2, #0
    d59a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    d59c:	46c0      	nop			; (mov r8, r8)
    d59e:	46bd      	mov	sp, r7
    d5a0:	b004      	add	sp, #16
    d5a2:	bd80      	pop	{r7, pc}
    d5a4:	0000d429 	.word	0x0000d429

0000d5a8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    d5a8:	b590      	push	{r4, r7, lr}
    d5aa:	b083      	sub	sp, #12
    d5ac:	af00      	add	r7, sp, #0
    d5ae:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    d5b0:	687b      	ldr	r3, [r7, #4]
    d5b2:	2b00      	cmp	r3, #0
    d5b4:	d00e      	beq.n	d5d4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    d5b6:	687b      	ldr	r3, [r7, #4]
    d5b8:	2200      	movs	r2, #0
    d5ba:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	2200      	movs	r2, #0
    d5c0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	2200      	movs	r2, #0
    d5c6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    d5c8:	6878      	ldr	r0, [r7, #4]
    d5ca:	2300      	movs	r3, #0
    d5cc:	2200      	movs	r2, #0
    d5ce:	2100      	movs	r1, #0
    d5d0:	4c02      	ldr	r4, [pc, #8]	; (d5dc <prvInitialiseMutex+0x34>)
    d5d2:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    d5d4:	46c0      	nop			; (mov r8, r8)
    d5d6:	46bd      	mov	sp, r7
    d5d8:	b003      	add	sp, #12
    d5da:	bd90      	pop	{r4, r7, pc}
    d5dc:	0000d621 	.word	0x0000d621

0000d5e0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    d5e0:	b580      	push	{r7, lr}
    d5e2:	b086      	sub	sp, #24
    d5e4:	af00      	add	r7, sp, #0
    d5e6:	0002      	movs	r2, r0
    d5e8:	1dfb      	adds	r3, r7, #7
    d5ea:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    d5ec:	2301      	movs	r3, #1
    d5ee:	617b      	str	r3, [r7, #20]
    d5f0:	2300      	movs	r3, #0
    d5f2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    d5f4:	1dfb      	adds	r3, r7, #7
    d5f6:	781a      	ldrb	r2, [r3, #0]
    d5f8:	6939      	ldr	r1, [r7, #16]
    d5fa:	697b      	ldr	r3, [r7, #20]
    d5fc:	0018      	movs	r0, r3
    d5fe:	4b06      	ldr	r3, [pc, #24]	; (d618 <xQueueCreateMutex+0x38>)
    d600:	4798      	blx	r3
    d602:	0003      	movs	r3, r0
    d604:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    d606:	68fb      	ldr	r3, [r7, #12]
    d608:	0018      	movs	r0, r3
    d60a:	4b04      	ldr	r3, [pc, #16]	; (d61c <xQueueCreateMutex+0x3c>)
    d60c:	4798      	blx	r3

		return pxNewQueue;
    d60e:	68fb      	ldr	r3, [r7, #12]
	}
    d610:	0018      	movs	r0, r3
    d612:	46bd      	mov	sp, r7
    d614:	b006      	add	sp, #24
    d616:	bd80      	pop	{r7, pc}
    d618:	0000d4e5 	.word	0x0000d4e5
    d61c:	0000d5a9 	.word	0x0000d5a9

0000d620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    d620:	b580      	push	{r7, lr}
    d622:	b08a      	sub	sp, #40	; 0x28
    d624:	af00      	add	r7, sp, #0
    d626:	60f8      	str	r0, [r7, #12]
    d628:	60b9      	str	r1, [r7, #8]
    d62a:	607a      	str	r2, [r7, #4]
    d62c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    d62e:	2300      	movs	r3, #0
    d630:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    d632:	68fb      	ldr	r3, [r7, #12]
    d634:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    d636:	6a3b      	ldr	r3, [r7, #32]
    d638:	2b00      	cmp	r3, #0
    d63a:	d101      	bne.n	d640 <xQueueGenericSend+0x20>
    d63c:	b672      	cpsid	i
    d63e:	e7fe      	b.n	d63e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    d640:	68bb      	ldr	r3, [r7, #8]
    d642:	2b00      	cmp	r3, #0
    d644:	d103      	bne.n	d64e <xQueueGenericSend+0x2e>
    d646:	6a3b      	ldr	r3, [r7, #32]
    d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d64a:	2b00      	cmp	r3, #0
    d64c:	d101      	bne.n	d652 <xQueueGenericSend+0x32>
    d64e:	2301      	movs	r3, #1
    d650:	e000      	b.n	d654 <xQueueGenericSend+0x34>
    d652:	2300      	movs	r3, #0
    d654:	2b00      	cmp	r3, #0
    d656:	d101      	bne.n	d65c <xQueueGenericSend+0x3c>
    d658:	b672      	cpsid	i
    d65a:	e7fe      	b.n	d65a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    d65c:	683b      	ldr	r3, [r7, #0]
    d65e:	2b02      	cmp	r3, #2
    d660:	d103      	bne.n	d66a <xQueueGenericSend+0x4a>
    d662:	6a3b      	ldr	r3, [r7, #32]
    d664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d666:	2b01      	cmp	r3, #1
    d668:	d101      	bne.n	d66e <xQueueGenericSend+0x4e>
    d66a:	2301      	movs	r3, #1
    d66c:	e000      	b.n	d670 <xQueueGenericSend+0x50>
    d66e:	2300      	movs	r3, #0
    d670:	2b00      	cmp	r3, #0
    d672:	d101      	bne.n	d678 <xQueueGenericSend+0x58>
    d674:	b672      	cpsid	i
    d676:	e7fe      	b.n	d676 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    d678:	4b53      	ldr	r3, [pc, #332]	; (d7c8 <xQueueGenericSend+0x1a8>)
    d67a:	4798      	blx	r3
    d67c:	1e03      	subs	r3, r0, #0
    d67e:	d102      	bne.n	d686 <xQueueGenericSend+0x66>
    d680:	687b      	ldr	r3, [r7, #4]
    d682:	2b00      	cmp	r3, #0
    d684:	d101      	bne.n	d68a <xQueueGenericSend+0x6a>
    d686:	2301      	movs	r3, #1
    d688:	e000      	b.n	d68c <xQueueGenericSend+0x6c>
    d68a:	2300      	movs	r3, #0
    d68c:	2b00      	cmp	r3, #0
    d68e:	d101      	bne.n	d694 <xQueueGenericSend+0x74>
    d690:	b672      	cpsid	i
    d692:	e7fe      	b.n	d692 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    d694:	4b4d      	ldr	r3, [pc, #308]	; (d7cc <xQueueGenericSend+0x1ac>)
    d696:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    d698:	6a3b      	ldr	r3, [r7, #32]
    d69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d69c:	6a3b      	ldr	r3, [r7, #32]
    d69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d6a0:	429a      	cmp	r2, r3
    d6a2:	d302      	bcc.n	d6aa <xQueueGenericSend+0x8a>
    d6a4:	683b      	ldr	r3, [r7, #0]
    d6a6:	2b02      	cmp	r3, #2
    d6a8:	d12d      	bne.n	d706 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    d6aa:	683a      	ldr	r2, [r7, #0]
    d6ac:	68b9      	ldr	r1, [r7, #8]
    d6ae:	6a3b      	ldr	r3, [r7, #32]
    d6b0:	0018      	movs	r0, r3
    d6b2:	4b47      	ldr	r3, [pc, #284]	; (d7d0 <xQueueGenericSend+0x1b0>)
    d6b4:	4798      	blx	r3
    d6b6:	0003      	movs	r3, r0
    d6b8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    d6ba:	6a3b      	ldr	r3, [r7, #32]
    d6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d6be:	2b00      	cmp	r3, #0
    d6c0:	d00a      	beq.n	d6d8 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    d6c2:	683a      	ldr	r2, [r7, #0]
    d6c4:	6a3b      	ldr	r3, [r7, #32]
    d6c6:	0011      	movs	r1, r2
    d6c8:	0018      	movs	r0, r3
    d6ca:	4b42      	ldr	r3, [pc, #264]	; (d7d4 <xQueueGenericSend+0x1b4>)
    d6cc:	4798      	blx	r3
    d6ce:	1e03      	subs	r3, r0, #0
    d6d0:	d015      	beq.n	d6fe <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    d6d2:	4b41      	ldr	r3, [pc, #260]	; (d7d8 <xQueueGenericSend+0x1b8>)
    d6d4:	4798      	blx	r3
    d6d6:	e012      	b.n	d6fe <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    d6d8:	6a3b      	ldr	r3, [r7, #32]
    d6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d009      	beq.n	d6f4 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    d6e0:	6a3b      	ldr	r3, [r7, #32]
    d6e2:	3324      	adds	r3, #36	; 0x24
    d6e4:	0018      	movs	r0, r3
    d6e6:	4b3d      	ldr	r3, [pc, #244]	; (d7dc <xQueueGenericSend+0x1bc>)
    d6e8:	4798      	blx	r3
    d6ea:	1e03      	subs	r3, r0, #0
    d6ec:	d007      	beq.n	d6fe <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    d6ee:	4b3a      	ldr	r3, [pc, #232]	; (d7d8 <xQueueGenericSend+0x1b8>)
    d6f0:	4798      	blx	r3
    d6f2:	e004      	b.n	d6fe <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    d6f4:	69fb      	ldr	r3, [r7, #28]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d001      	beq.n	d6fe <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    d6fa:	4b37      	ldr	r3, [pc, #220]	; (d7d8 <xQueueGenericSend+0x1b8>)
    d6fc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    d6fe:	4b38      	ldr	r3, [pc, #224]	; (d7e0 <xQueueGenericSend+0x1c0>)
    d700:	4798      	blx	r3
				return pdPASS;
    d702:	2301      	movs	r3, #1
    d704:	e05c      	b.n	d7c0 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    d706:	687b      	ldr	r3, [r7, #4]
    d708:	2b00      	cmp	r3, #0
    d70a:	d103      	bne.n	d714 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    d70c:	4b34      	ldr	r3, [pc, #208]	; (d7e0 <xQueueGenericSend+0x1c0>)
    d70e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    d710:	2300      	movs	r3, #0
    d712:	e055      	b.n	d7c0 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d716:	2b00      	cmp	r3, #0
    d718:	d106      	bne.n	d728 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    d71a:	2314      	movs	r3, #20
    d71c:	18fb      	adds	r3, r7, r3
    d71e:	0018      	movs	r0, r3
    d720:	4b30      	ldr	r3, [pc, #192]	; (d7e4 <xQueueGenericSend+0x1c4>)
    d722:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    d724:	2301      	movs	r3, #1
    d726:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    d728:	4b2d      	ldr	r3, [pc, #180]	; (d7e0 <xQueueGenericSend+0x1c0>)
    d72a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    d72c:	4b2e      	ldr	r3, [pc, #184]	; (d7e8 <xQueueGenericSend+0x1c8>)
    d72e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    d730:	4b26      	ldr	r3, [pc, #152]	; (d7cc <xQueueGenericSend+0x1ac>)
    d732:	4798      	blx	r3
    d734:	6a3b      	ldr	r3, [r7, #32]
    d736:	2244      	movs	r2, #68	; 0x44
    d738:	5c9b      	ldrb	r3, [r3, r2]
    d73a:	b25b      	sxtb	r3, r3
    d73c:	3301      	adds	r3, #1
    d73e:	d103      	bne.n	d748 <xQueueGenericSend+0x128>
    d740:	6a3b      	ldr	r3, [r7, #32]
    d742:	2244      	movs	r2, #68	; 0x44
    d744:	2100      	movs	r1, #0
    d746:	5499      	strb	r1, [r3, r2]
    d748:	6a3b      	ldr	r3, [r7, #32]
    d74a:	2245      	movs	r2, #69	; 0x45
    d74c:	5c9b      	ldrb	r3, [r3, r2]
    d74e:	b25b      	sxtb	r3, r3
    d750:	3301      	adds	r3, #1
    d752:	d103      	bne.n	d75c <xQueueGenericSend+0x13c>
    d754:	6a3b      	ldr	r3, [r7, #32]
    d756:	2245      	movs	r2, #69	; 0x45
    d758:	2100      	movs	r1, #0
    d75a:	5499      	strb	r1, [r3, r2]
    d75c:	4b20      	ldr	r3, [pc, #128]	; (d7e0 <xQueueGenericSend+0x1c0>)
    d75e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    d760:	1d3a      	adds	r2, r7, #4
    d762:	2314      	movs	r3, #20
    d764:	18fb      	adds	r3, r7, r3
    d766:	0011      	movs	r1, r2
    d768:	0018      	movs	r0, r3
    d76a:	4b20      	ldr	r3, [pc, #128]	; (d7ec <xQueueGenericSend+0x1cc>)
    d76c:	4798      	blx	r3
    d76e:	1e03      	subs	r3, r0, #0
    d770:	d11f      	bne.n	d7b2 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    d772:	6a3b      	ldr	r3, [r7, #32]
    d774:	0018      	movs	r0, r3
    d776:	4b1e      	ldr	r3, [pc, #120]	; (d7f0 <xQueueGenericSend+0x1d0>)
    d778:	4798      	blx	r3
    d77a:	1e03      	subs	r3, r0, #0
    d77c:	d012      	beq.n	d7a4 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    d77e:	6a3b      	ldr	r3, [r7, #32]
    d780:	3310      	adds	r3, #16
    d782:	687a      	ldr	r2, [r7, #4]
    d784:	0011      	movs	r1, r2
    d786:	0018      	movs	r0, r3
    d788:	4b1a      	ldr	r3, [pc, #104]	; (d7f4 <xQueueGenericSend+0x1d4>)
    d78a:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    d78c:	6a3b      	ldr	r3, [r7, #32]
    d78e:	0018      	movs	r0, r3
    d790:	4b19      	ldr	r3, [pc, #100]	; (d7f8 <xQueueGenericSend+0x1d8>)
    d792:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    d794:	4b19      	ldr	r3, [pc, #100]	; (d7fc <xQueueGenericSend+0x1dc>)
    d796:	4798      	blx	r3
    d798:	1e03      	subs	r3, r0, #0
    d79a:	d000      	beq.n	d79e <xQueueGenericSend+0x17e>
    d79c:	e77a      	b.n	d694 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    d79e:	4b0e      	ldr	r3, [pc, #56]	; (d7d8 <xQueueGenericSend+0x1b8>)
    d7a0:	4798      	blx	r3
    d7a2:	e777      	b.n	d694 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    d7a4:	6a3b      	ldr	r3, [r7, #32]
    d7a6:	0018      	movs	r0, r3
    d7a8:	4b13      	ldr	r3, [pc, #76]	; (d7f8 <xQueueGenericSend+0x1d8>)
    d7aa:	4798      	blx	r3
				( void ) xTaskResumeAll();
    d7ac:	4b13      	ldr	r3, [pc, #76]	; (d7fc <xQueueGenericSend+0x1dc>)
    d7ae:	4798      	blx	r3
    d7b0:	e770      	b.n	d694 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    d7b2:	6a3b      	ldr	r3, [r7, #32]
    d7b4:	0018      	movs	r0, r3
    d7b6:	4b10      	ldr	r3, [pc, #64]	; (d7f8 <xQueueGenericSend+0x1d8>)
    d7b8:	4798      	blx	r3
			( void ) xTaskResumeAll();
    d7ba:	4b10      	ldr	r3, [pc, #64]	; (d7fc <xQueueGenericSend+0x1dc>)
    d7bc:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    d7be:	2300      	movs	r3, #0
		}
	}
}
    d7c0:	0018      	movs	r0, r3
    d7c2:	46bd      	mov	sp, r7
    d7c4:	b00a      	add	sp, #40	; 0x28
    d7c6:	bd80      	pop	{r7, pc}
    d7c8:	0000ead1 	.word	0x0000ead1
    d7cc:	0000d259 	.word	0x0000d259
    d7d0:	0000db25 	.word	0x0000db25
    d7d4:	0000de79 	.word	0x0000de79
    d7d8:	0000d239 	.word	0x0000d239
    d7dc:	0000e77d 	.word	0x0000e77d
    d7e0:	0000d27d 	.word	0x0000d27d
    d7e4:	0000e83d 	.word	0x0000e83d
    d7e8:	0000e35d 	.word	0x0000e35d
    d7ec:	0000e871 	.word	0x0000e871
    d7f0:	0000dd79 	.word	0x0000dd79
    d7f4:	0000e6e5 	.word	0x0000e6e5
    d7f8:	0000dc55 	.word	0x0000dc55
    d7fc:	0000e375 	.word	0x0000e375

0000d800 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    d800:	b580      	push	{r7, lr}
    d802:	b088      	sub	sp, #32
    d804:	af00      	add	r7, sp, #0
    d806:	60f8      	str	r0, [r7, #12]
    d808:	60b9      	str	r1, [r7, #8]
    d80a:	607a      	str	r2, [r7, #4]
    d80c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    d80e:	68fb      	ldr	r3, [r7, #12]
    d810:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    d812:	69bb      	ldr	r3, [r7, #24]
    d814:	2b00      	cmp	r3, #0
    d816:	d101      	bne.n	d81c <xQueueGenericSendFromISR+0x1c>
    d818:	b672      	cpsid	i
    d81a:	e7fe      	b.n	d81a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    d81c:	68bb      	ldr	r3, [r7, #8]
    d81e:	2b00      	cmp	r3, #0
    d820:	d103      	bne.n	d82a <xQueueGenericSendFromISR+0x2a>
    d822:	69bb      	ldr	r3, [r7, #24]
    d824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d826:	2b00      	cmp	r3, #0
    d828:	d101      	bne.n	d82e <xQueueGenericSendFromISR+0x2e>
    d82a:	2301      	movs	r3, #1
    d82c:	e000      	b.n	d830 <xQueueGenericSendFromISR+0x30>
    d82e:	2300      	movs	r3, #0
    d830:	2b00      	cmp	r3, #0
    d832:	d101      	bne.n	d838 <xQueueGenericSendFromISR+0x38>
    d834:	b672      	cpsid	i
    d836:	e7fe      	b.n	d836 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    d838:	683b      	ldr	r3, [r7, #0]
    d83a:	2b02      	cmp	r3, #2
    d83c:	d103      	bne.n	d846 <xQueueGenericSendFromISR+0x46>
    d83e:	69bb      	ldr	r3, [r7, #24]
    d840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d842:	2b01      	cmp	r3, #1
    d844:	d101      	bne.n	d84a <xQueueGenericSendFromISR+0x4a>
    d846:	2301      	movs	r3, #1
    d848:	e000      	b.n	d84c <xQueueGenericSendFromISR+0x4c>
    d84a:	2300      	movs	r3, #0
    d84c:	2b00      	cmp	r3, #0
    d84e:	d101      	bne.n	d854 <xQueueGenericSendFromISR+0x54>
    d850:	b672      	cpsid	i
    d852:	e7fe      	b.n	d852 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    d854:	4b2d      	ldr	r3, [pc, #180]	; (d90c <xQueueGenericSendFromISR+0x10c>)
    d856:	4798      	blx	r3
    d858:	0003      	movs	r3, r0
    d85a:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    d85c:	69bb      	ldr	r3, [r7, #24]
    d85e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d860:	69bb      	ldr	r3, [r7, #24]
    d862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    d864:	429a      	cmp	r2, r3
    d866:	d302      	bcc.n	d86e <xQueueGenericSendFromISR+0x6e>
    d868:	683b      	ldr	r3, [r7, #0]
    d86a:	2b02      	cmp	r3, #2
    d86c:	d142      	bne.n	d8f4 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    d86e:	2313      	movs	r3, #19
    d870:	18fb      	adds	r3, r7, r3
    d872:	69ba      	ldr	r2, [r7, #24]
    d874:	2145      	movs	r1, #69	; 0x45
    d876:	5c52      	ldrb	r2, [r2, r1]
    d878:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    d87a:	683a      	ldr	r2, [r7, #0]
    d87c:	68b9      	ldr	r1, [r7, #8]
    d87e:	69bb      	ldr	r3, [r7, #24]
    d880:	0018      	movs	r0, r3
    d882:	4b23      	ldr	r3, [pc, #140]	; (d910 <xQueueGenericSendFromISR+0x110>)
    d884:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    d886:	2313      	movs	r3, #19
    d888:	18fb      	adds	r3, r7, r3
    d88a:	781b      	ldrb	r3, [r3, #0]
    d88c:	b25b      	sxtb	r3, r3
    d88e:	3301      	adds	r3, #1
    d890:	d124      	bne.n	d8dc <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    d892:	69bb      	ldr	r3, [r7, #24]
    d894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d896:	2b00      	cmp	r3, #0
    d898:	d00e      	beq.n	d8b8 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    d89a:	683a      	ldr	r2, [r7, #0]
    d89c:	69bb      	ldr	r3, [r7, #24]
    d89e:	0011      	movs	r1, r2
    d8a0:	0018      	movs	r0, r3
    d8a2:	4b1c      	ldr	r3, [pc, #112]	; (d914 <xQueueGenericSendFromISR+0x114>)
    d8a4:	4798      	blx	r3
    d8a6:	1e03      	subs	r3, r0, #0
    d8a8:	d021      	beq.n	d8ee <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    d8aa:	687b      	ldr	r3, [r7, #4]
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d01e      	beq.n	d8ee <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    d8b0:	687b      	ldr	r3, [r7, #4]
    d8b2:	2201      	movs	r2, #1
    d8b4:	601a      	str	r2, [r3, #0]
    d8b6:	e01a      	b.n	d8ee <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    d8b8:	69bb      	ldr	r3, [r7, #24]
    d8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d016      	beq.n	d8ee <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    d8c0:	69bb      	ldr	r3, [r7, #24]
    d8c2:	3324      	adds	r3, #36	; 0x24
    d8c4:	0018      	movs	r0, r3
    d8c6:	4b14      	ldr	r3, [pc, #80]	; (d918 <xQueueGenericSendFromISR+0x118>)
    d8c8:	4798      	blx	r3
    d8ca:	1e03      	subs	r3, r0, #0
    d8cc:	d00f      	beq.n	d8ee <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    d8ce:	687b      	ldr	r3, [r7, #4]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d00c      	beq.n	d8ee <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    d8d4:	687b      	ldr	r3, [r7, #4]
    d8d6:	2201      	movs	r2, #1
    d8d8:	601a      	str	r2, [r3, #0]
    d8da:	e008      	b.n	d8ee <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    d8dc:	2313      	movs	r3, #19
    d8de:	18fb      	adds	r3, r7, r3
    d8e0:	781b      	ldrb	r3, [r3, #0]
    d8e2:	3301      	adds	r3, #1
    d8e4:	b2db      	uxtb	r3, r3
    d8e6:	b259      	sxtb	r1, r3
    d8e8:	69bb      	ldr	r3, [r7, #24]
    d8ea:	2245      	movs	r2, #69	; 0x45
    d8ec:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    d8ee:	2301      	movs	r3, #1
    d8f0:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    d8f2:	e001      	b.n	d8f8 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    d8f4:	2300      	movs	r3, #0
    d8f6:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    d8f8:	697b      	ldr	r3, [r7, #20]
    d8fa:	0018      	movs	r0, r3
    d8fc:	4b07      	ldr	r3, [pc, #28]	; (d91c <xQueueGenericSendFromISR+0x11c>)
    d8fe:	4798      	blx	r3

	return xReturn;
    d900:	69fb      	ldr	r3, [r7, #28]
}
    d902:	0018      	movs	r0, r3
    d904:	46bd      	mov	sp, r7
    d906:	b008      	add	sp, #32
    d908:	bd80      	pop	{r7, pc}
    d90a:	46c0      	nop			; (mov r8, r8)
    d90c:	0000d2ad 	.word	0x0000d2ad
    d910:	0000db25 	.word	0x0000db25
    d914:	0000de79 	.word	0x0000de79
    d918:	0000e77d 	.word	0x0000e77d
    d91c:	0000d2b9 	.word	0x0000d2b9

0000d920 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    d920:	b580      	push	{r7, lr}
    d922:	b08a      	sub	sp, #40	; 0x28
    d924:	af00      	add	r7, sp, #0
    d926:	60f8      	str	r0, [r7, #12]
    d928:	60b9      	str	r1, [r7, #8]
    d92a:	607a      	str	r2, [r7, #4]
    d92c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    d92e:	2300      	movs	r3, #0
    d930:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    d932:	68fb      	ldr	r3, [r7, #12]
    d934:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    d936:	6a3b      	ldr	r3, [r7, #32]
    d938:	2b00      	cmp	r3, #0
    d93a:	d101      	bne.n	d940 <xQueueGenericReceive+0x20>
    d93c:	b672      	cpsid	i
    d93e:	e7fe      	b.n	d93e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    d940:	68bb      	ldr	r3, [r7, #8]
    d942:	2b00      	cmp	r3, #0
    d944:	d103      	bne.n	d94e <xQueueGenericReceive+0x2e>
    d946:	6a3b      	ldr	r3, [r7, #32]
    d948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d94a:	2b00      	cmp	r3, #0
    d94c:	d101      	bne.n	d952 <xQueueGenericReceive+0x32>
    d94e:	2301      	movs	r3, #1
    d950:	e000      	b.n	d954 <xQueueGenericReceive+0x34>
    d952:	2300      	movs	r3, #0
    d954:	2b00      	cmp	r3, #0
    d956:	d101      	bne.n	d95c <xQueueGenericReceive+0x3c>
    d958:	b672      	cpsid	i
    d95a:	e7fe      	b.n	d95a <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    d95c:	4b62      	ldr	r3, [pc, #392]	; (dae8 <xQueueGenericReceive+0x1c8>)
    d95e:	4798      	blx	r3
    d960:	1e03      	subs	r3, r0, #0
    d962:	d102      	bne.n	d96a <xQueueGenericReceive+0x4a>
    d964:	687b      	ldr	r3, [r7, #4]
    d966:	2b00      	cmp	r3, #0
    d968:	d101      	bne.n	d96e <xQueueGenericReceive+0x4e>
    d96a:	2301      	movs	r3, #1
    d96c:	e000      	b.n	d970 <xQueueGenericReceive+0x50>
    d96e:	2300      	movs	r3, #0
    d970:	2b00      	cmp	r3, #0
    d972:	d101      	bne.n	d978 <xQueueGenericReceive+0x58>
    d974:	b672      	cpsid	i
    d976:	e7fe      	b.n	d976 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    d978:	4b5c      	ldr	r3, [pc, #368]	; (daec <xQueueGenericReceive+0x1cc>)
    d97a:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    d97c:	6a3b      	ldr	r3, [r7, #32]
    d97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    d980:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    d982:	69fb      	ldr	r3, [r7, #28]
    d984:	2b00      	cmp	r3, #0
    d986:	d03a      	beq.n	d9fe <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    d988:	6a3b      	ldr	r3, [r7, #32]
    d98a:	68db      	ldr	r3, [r3, #12]
    d98c:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    d98e:	68ba      	ldr	r2, [r7, #8]
    d990:	6a3b      	ldr	r3, [r7, #32]
    d992:	0011      	movs	r1, r2
    d994:	0018      	movs	r0, r3
    d996:	4b56      	ldr	r3, [pc, #344]	; (daf0 <xQueueGenericReceive+0x1d0>)
    d998:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    d99a:	683b      	ldr	r3, [r7, #0]
    d99c:	2b00      	cmp	r3, #0
    d99e:	d11a      	bne.n	d9d6 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    d9a0:	69fb      	ldr	r3, [r7, #28]
    d9a2:	1e5a      	subs	r2, r3, #1
    d9a4:	6a3b      	ldr	r3, [r7, #32]
    d9a6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    d9a8:	6a3b      	ldr	r3, [r7, #32]
    d9aa:	681b      	ldr	r3, [r3, #0]
    d9ac:	2b00      	cmp	r3, #0
    d9ae:	d104      	bne.n	d9ba <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    d9b0:	4b50      	ldr	r3, [pc, #320]	; (daf4 <xQueueGenericReceive+0x1d4>)
    d9b2:	4798      	blx	r3
    d9b4:	0002      	movs	r2, r0
    d9b6:	6a3b      	ldr	r3, [r7, #32]
    d9b8:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    d9ba:	6a3b      	ldr	r3, [r7, #32]
    d9bc:	691b      	ldr	r3, [r3, #16]
    d9be:	2b00      	cmp	r3, #0
    d9c0:	d019      	beq.n	d9f6 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    d9c2:	6a3b      	ldr	r3, [r7, #32]
    d9c4:	3310      	adds	r3, #16
    d9c6:	0018      	movs	r0, r3
    d9c8:	4b4b      	ldr	r3, [pc, #300]	; (daf8 <xQueueGenericReceive+0x1d8>)
    d9ca:	4798      	blx	r3
    d9cc:	1e03      	subs	r3, r0, #0
    d9ce:	d012      	beq.n	d9f6 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    d9d0:	4b4a      	ldr	r3, [pc, #296]	; (dafc <xQueueGenericReceive+0x1dc>)
    d9d2:	4798      	blx	r3
    d9d4:	e00f      	b.n	d9f6 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    d9d6:	6a3b      	ldr	r3, [r7, #32]
    d9d8:	69ba      	ldr	r2, [r7, #24]
    d9da:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    d9dc:	6a3b      	ldr	r3, [r7, #32]
    d9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d008      	beq.n	d9f6 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    d9e4:	6a3b      	ldr	r3, [r7, #32]
    d9e6:	3324      	adds	r3, #36	; 0x24
    d9e8:	0018      	movs	r0, r3
    d9ea:	4b43      	ldr	r3, [pc, #268]	; (daf8 <xQueueGenericReceive+0x1d8>)
    d9ec:	4798      	blx	r3
    d9ee:	1e03      	subs	r3, r0, #0
    d9f0:	d001      	beq.n	d9f6 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    d9f2:	4b42      	ldr	r3, [pc, #264]	; (dafc <xQueueGenericReceive+0x1dc>)
    d9f4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    d9f6:	4b42      	ldr	r3, [pc, #264]	; (db00 <xQueueGenericReceive+0x1e0>)
    d9f8:	4798      	blx	r3
				return pdPASS;
    d9fa:	2301      	movs	r3, #1
    d9fc:	e070      	b.n	dae0 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    d9fe:	687b      	ldr	r3, [r7, #4]
    da00:	2b00      	cmp	r3, #0
    da02:	d103      	bne.n	da0c <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    da04:	4b3e      	ldr	r3, [pc, #248]	; (db00 <xQueueGenericReceive+0x1e0>)
    da06:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    da08:	2300      	movs	r3, #0
    da0a:	e069      	b.n	dae0 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da0e:	2b00      	cmp	r3, #0
    da10:	d106      	bne.n	da20 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    da12:	2310      	movs	r3, #16
    da14:	18fb      	adds	r3, r7, r3
    da16:	0018      	movs	r0, r3
    da18:	4b3a      	ldr	r3, [pc, #232]	; (db04 <xQueueGenericReceive+0x1e4>)
    da1a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    da1c:	2301      	movs	r3, #1
    da1e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    da20:	4b37      	ldr	r3, [pc, #220]	; (db00 <xQueueGenericReceive+0x1e0>)
    da22:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    da24:	4b38      	ldr	r3, [pc, #224]	; (db08 <xQueueGenericReceive+0x1e8>)
    da26:	4798      	blx	r3
		prvLockQueue( pxQueue );
    da28:	4b30      	ldr	r3, [pc, #192]	; (daec <xQueueGenericReceive+0x1cc>)
    da2a:	4798      	blx	r3
    da2c:	6a3b      	ldr	r3, [r7, #32]
    da2e:	2244      	movs	r2, #68	; 0x44
    da30:	5c9b      	ldrb	r3, [r3, r2]
    da32:	b25b      	sxtb	r3, r3
    da34:	3301      	adds	r3, #1
    da36:	d103      	bne.n	da40 <xQueueGenericReceive+0x120>
    da38:	6a3b      	ldr	r3, [r7, #32]
    da3a:	2244      	movs	r2, #68	; 0x44
    da3c:	2100      	movs	r1, #0
    da3e:	5499      	strb	r1, [r3, r2]
    da40:	6a3b      	ldr	r3, [r7, #32]
    da42:	2245      	movs	r2, #69	; 0x45
    da44:	5c9b      	ldrb	r3, [r3, r2]
    da46:	b25b      	sxtb	r3, r3
    da48:	3301      	adds	r3, #1
    da4a:	d103      	bne.n	da54 <xQueueGenericReceive+0x134>
    da4c:	6a3b      	ldr	r3, [r7, #32]
    da4e:	2245      	movs	r2, #69	; 0x45
    da50:	2100      	movs	r1, #0
    da52:	5499      	strb	r1, [r3, r2]
    da54:	4b2a      	ldr	r3, [pc, #168]	; (db00 <xQueueGenericReceive+0x1e0>)
    da56:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    da58:	1d3a      	adds	r2, r7, #4
    da5a:	2310      	movs	r3, #16
    da5c:	18fb      	adds	r3, r7, r3
    da5e:	0011      	movs	r1, r2
    da60:	0018      	movs	r0, r3
    da62:	4b2a      	ldr	r3, [pc, #168]	; (db0c <xQueueGenericReceive+0x1ec>)
    da64:	4798      	blx	r3
    da66:	1e03      	subs	r3, r0, #0
    da68:	d12c      	bne.n	dac4 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    da6a:	6a3b      	ldr	r3, [r7, #32]
    da6c:	0018      	movs	r0, r3
    da6e:	4b28      	ldr	r3, [pc, #160]	; (db10 <xQueueGenericReceive+0x1f0>)
    da70:	4798      	blx	r3
    da72:	1e03      	subs	r3, r0, #0
    da74:	d01f      	beq.n	dab6 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    da76:	6a3b      	ldr	r3, [r7, #32]
    da78:	681b      	ldr	r3, [r3, #0]
    da7a:	2b00      	cmp	r3, #0
    da7c:	d108      	bne.n	da90 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    da7e:	4b1b      	ldr	r3, [pc, #108]	; (daec <xQueueGenericReceive+0x1cc>)
    da80:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    da82:	6a3b      	ldr	r3, [r7, #32]
    da84:	685b      	ldr	r3, [r3, #4]
    da86:	0018      	movs	r0, r3
    da88:	4b22      	ldr	r3, [pc, #136]	; (db14 <xQueueGenericReceive+0x1f4>)
    da8a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    da8c:	4b1c      	ldr	r3, [pc, #112]	; (db00 <xQueueGenericReceive+0x1e0>)
    da8e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    da90:	6a3b      	ldr	r3, [r7, #32]
    da92:	3324      	adds	r3, #36	; 0x24
    da94:	687a      	ldr	r2, [r7, #4]
    da96:	0011      	movs	r1, r2
    da98:	0018      	movs	r0, r3
    da9a:	4b1f      	ldr	r3, [pc, #124]	; (db18 <xQueueGenericReceive+0x1f8>)
    da9c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    da9e:	6a3b      	ldr	r3, [r7, #32]
    daa0:	0018      	movs	r0, r3
    daa2:	4b1e      	ldr	r3, [pc, #120]	; (db1c <xQueueGenericReceive+0x1fc>)
    daa4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    daa6:	4b1e      	ldr	r3, [pc, #120]	; (db20 <xQueueGenericReceive+0x200>)
    daa8:	4798      	blx	r3
    daaa:	1e03      	subs	r3, r0, #0
    daac:	d000      	beq.n	dab0 <xQueueGenericReceive+0x190>
    daae:	e763      	b.n	d978 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    dab0:	4b12      	ldr	r3, [pc, #72]	; (dafc <xQueueGenericReceive+0x1dc>)
    dab2:	4798      	blx	r3
    dab4:	e760      	b.n	d978 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    dab6:	6a3b      	ldr	r3, [r7, #32]
    dab8:	0018      	movs	r0, r3
    daba:	4b18      	ldr	r3, [pc, #96]	; (db1c <xQueueGenericReceive+0x1fc>)
    dabc:	4798      	blx	r3
				( void ) xTaskResumeAll();
    dabe:	4b18      	ldr	r3, [pc, #96]	; (db20 <xQueueGenericReceive+0x200>)
    dac0:	4798      	blx	r3
    dac2:	e759      	b.n	d978 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    dac4:	6a3b      	ldr	r3, [r7, #32]
    dac6:	0018      	movs	r0, r3
    dac8:	4b14      	ldr	r3, [pc, #80]	; (db1c <xQueueGenericReceive+0x1fc>)
    daca:	4798      	blx	r3
			( void ) xTaskResumeAll();
    dacc:	4b14      	ldr	r3, [pc, #80]	; (db20 <xQueueGenericReceive+0x200>)
    dace:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    dad0:	6a3b      	ldr	r3, [r7, #32]
    dad2:	0018      	movs	r0, r3
    dad4:	4b0e      	ldr	r3, [pc, #56]	; (db10 <xQueueGenericReceive+0x1f0>)
    dad6:	4798      	blx	r3
    dad8:	1e03      	subs	r3, r0, #0
    dada:	d100      	bne.n	dade <xQueueGenericReceive+0x1be>
    dadc:	e74c      	b.n	d978 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    dade:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    dae0:	0018      	movs	r0, r3
    dae2:	46bd      	mov	sp, r7
    dae4:	b00a      	add	sp, #40	; 0x28
    dae6:	bd80      	pop	{r7, pc}
    dae8:	0000ead1 	.word	0x0000ead1
    daec:	0000d259 	.word	0x0000d259
    daf0:	0000dc05 	.word	0x0000dc05
    daf4:	0000ec8d 	.word	0x0000ec8d
    daf8:	0000e77d 	.word	0x0000e77d
    dafc:	0000d239 	.word	0x0000d239
    db00:	0000d27d 	.word	0x0000d27d
    db04:	0000e83d 	.word	0x0000e83d
    db08:	0000e35d 	.word	0x0000e35d
    db0c:	0000e871 	.word	0x0000e871
    db10:	0000dd45 	.word	0x0000dd45
    db14:	0000eb09 	.word	0x0000eb09
    db18:	0000e6e5 	.word	0x0000e6e5
    db1c:	0000dc55 	.word	0x0000dc55
    db20:	0000e375 	.word	0x0000e375

0000db24 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    db24:	b580      	push	{r7, lr}
    db26:	b086      	sub	sp, #24
    db28:	af00      	add	r7, sp, #0
    db2a:	60f8      	str	r0, [r7, #12]
    db2c:	60b9      	str	r1, [r7, #8]
    db2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    db30:	2300      	movs	r3, #0
    db32:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    db34:	68fb      	ldr	r3, [r7, #12]
    db36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    db38:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    db3a:	68fb      	ldr	r3, [r7, #12]
    db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    db3e:	2b00      	cmp	r3, #0
    db40:	d10e      	bne.n	db60 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    db42:	68fb      	ldr	r3, [r7, #12]
    db44:	681b      	ldr	r3, [r3, #0]
    db46:	2b00      	cmp	r3, #0
    db48:	d14e      	bne.n	dbe8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    db4a:	68fb      	ldr	r3, [r7, #12]
    db4c:	685b      	ldr	r3, [r3, #4]
    db4e:	0018      	movs	r0, r3
    db50:	4b2a      	ldr	r3, [pc, #168]	; (dbfc <prvCopyDataToQueue+0xd8>)
    db52:	4798      	blx	r3
    db54:	0003      	movs	r3, r0
    db56:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    db58:	68fb      	ldr	r3, [r7, #12]
    db5a:	2200      	movs	r2, #0
    db5c:	605a      	str	r2, [r3, #4]
    db5e:	e043      	b.n	dbe8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    db60:	687b      	ldr	r3, [r7, #4]
    db62:	2b00      	cmp	r3, #0
    db64:	d119      	bne.n	db9a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    db66:	68fb      	ldr	r3, [r7, #12]
    db68:	6898      	ldr	r0, [r3, #8]
    db6a:	68fb      	ldr	r3, [r7, #12]
    db6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    db6e:	68bb      	ldr	r3, [r7, #8]
    db70:	0019      	movs	r1, r3
    db72:	4b23      	ldr	r3, [pc, #140]	; (dc00 <prvCopyDataToQueue+0xdc>)
    db74:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    db76:	68fb      	ldr	r3, [r7, #12]
    db78:	689a      	ldr	r2, [r3, #8]
    db7a:	68fb      	ldr	r3, [r7, #12]
    db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    db7e:	18d2      	adds	r2, r2, r3
    db80:	68fb      	ldr	r3, [r7, #12]
    db82:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    db84:	68fb      	ldr	r3, [r7, #12]
    db86:	689a      	ldr	r2, [r3, #8]
    db88:	68fb      	ldr	r3, [r7, #12]
    db8a:	685b      	ldr	r3, [r3, #4]
    db8c:	429a      	cmp	r2, r3
    db8e:	d32b      	bcc.n	dbe8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    db90:	68fb      	ldr	r3, [r7, #12]
    db92:	681a      	ldr	r2, [r3, #0]
    db94:	68fb      	ldr	r3, [r7, #12]
    db96:	609a      	str	r2, [r3, #8]
    db98:	e026      	b.n	dbe8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    db9a:	68fb      	ldr	r3, [r7, #12]
    db9c:	68d8      	ldr	r0, [r3, #12]
    db9e:	68fb      	ldr	r3, [r7, #12]
    dba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    dba2:	68bb      	ldr	r3, [r7, #8]
    dba4:	0019      	movs	r1, r3
    dba6:	4b16      	ldr	r3, [pc, #88]	; (dc00 <prvCopyDataToQueue+0xdc>)
    dba8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    dbaa:	68fb      	ldr	r3, [r7, #12]
    dbac:	68da      	ldr	r2, [r3, #12]
    dbae:	68fb      	ldr	r3, [r7, #12]
    dbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dbb2:	425b      	negs	r3, r3
    dbb4:	18d2      	adds	r2, r2, r3
    dbb6:	68fb      	ldr	r3, [r7, #12]
    dbb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    dbba:	68fb      	ldr	r3, [r7, #12]
    dbbc:	68da      	ldr	r2, [r3, #12]
    dbbe:	68fb      	ldr	r3, [r7, #12]
    dbc0:	681b      	ldr	r3, [r3, #0]
    dbc2:	429a      	cmp	r2, r3
    dbc4:	d207      	bcs.n	dbd6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    dbc6:	68fb      	ldr	r3, [r7, #12]
    dbc8:	685a      	ldr	r2, [r3, #4]
    dbca:	68fb      	ldr	r3, [r7, #12]
    dbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dbce:	425b      	negs	r3, r3
    dbd0:	18d2      	adds	r2, r2, r3
    dbd2:	68fb      	ldr	r3, [r7, #12]
    dbd4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    dbd6:	687b      	ldr	r3, [r7, #4]
    dbd8:	2b02      	cmp	r3, #2
    dbda:	d105      	bne.n	dbe8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    dbdc:	693b      	ldr	r3, [r7, #16]
    dbde:	2b00      	cmp	r3, #0
    dbe0:	d002      	beq.n	dbe8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    dbe2:	693b      	ldr	r3, [r7, #16]
    dbe4:	3b01      	subs	r3, #1
    dbe6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    dbe8:	693b      	ldr	r3, [r7, #16]
    dbea:	1c5a      	adds	r2, r3, #1
    dbec:	68fb      	ldr	r3, [r7, #12]
    dbee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    dbf0:	697b      	ldr	r3, [r7, #20]
}
    dbf2:	0018      	movs	r0, r3
    dbf4:	46bd      	mov	sp, r7
    dbf6:	b006      	add	sp, #24
    dbf8:	bd80      	pop	{r7, pc}
    dbfa:	46c0      	nop			; (mov r8, r8)
    dbfc:	0000ebcd 	.word	0x0000ebcd
    dc00:	00010dd5 	.word	0x00010dd5

0000dc04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    dc04:	b580      	push	{r7, lr}
    dc06:	b082      	sub	sp, #8
    dc08:	af00      	add	r7, sp, #0
    dc0a:	6078      	str	r0, [r7, #4]
    dc0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    dc0e:	687b      	ldr	r3, [r7, #4]
    dc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dc12:	2b00      	cmp	r3, #0
    dc14:	d018      	beq.n	dc48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    dc16:	687b      	ldr	r3, [r7, #4]
    dc18:	68da      	ldr	r2, [r3, #12]
    dc1a:	687b      	ldr	r3, [r7, #4]
    dc1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    dc1e:	18d2      	adds	r2, r2, r3
    dc20:	687b      	ldr	r3, [r7, #4]
    dc22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    dc24:	687b      	ldr	r3, [r7, #4]
    dc26:	68da      	ldr	r2, [r3, #12]
    dc28:	687b      	ldr	r3, [r7, #4]
    dc2a:	685b      	ldr	r3, [r3, #4]
    dc2c:	429a      	cmp	r2, r3
    dc2e:	d303      	bcc.n	dc38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    dc30:	687b      	ldr	r3, [r7, #4]
    dc32:	681a      	ldr	r2, [r3, #0]
    dc34:	687b      	ldr	r3, [r7, #4]
    dc36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    dc38:	687b      	ldr	r3, [r7, #4]
    dc3a:	68d9      	ldr	r1, [r3, #12]
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    dc40:	683b      	ldr	r3, [r7, #0]
    dc42:	0018      	movs	r0, r3
    dc44:	4b02      	ldr	r3, [pc, #8]	; (dc50 <prvCopyDataFromQueue+0x4c>)
    dc46:	4798      	blx	r3
	}
}
    dc48:	46c0      	nop			; (mov r8, r8)
    dc4a:	46bd      	mov	sp, r7
    dc4c:	b002      	add	sp, #8
    dc4e:	bd80      	pop	{r7, pc}
    dc50:	00010dd5 	.word	0x00010dd5

0000dc54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    dc54:	b580      	push	{r7, lr}
    dc56:	b084      	sub	sp, #16
    dc58:	af00      	add	r7, sp, #0
    dc5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    dc5c:	4b34      	ldr	r3, [pc, #208]	; (dd30 <prvUnlockQueue+0xdc>)
    dc5e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    dc60:	230f      	movs	r3, #15
    dc62:	18fb      	adds	r3, r7, r3
    dc64:	687a      	ldr	r2, [r7, #4]
    dc66:	2145      	movs	r1, #69	; 0x45
    dc68:	5c52      	ldrb	r2, [r2, r1]
    dc6a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    dc6c:	e022      	b.n	dcb4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    dc6e:	687b      	ldr	r3, [r7, #4]
    dc70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    dc72:	2b00      	cmp	r3, #0
    dc74:	d009      	beq.n	dc8a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    dc76:	687b      	ldr	r3, [r7, #4]
    dc78:	2100      	movs	r1, #0
    dc7a:	0018      	movs	r0, r3
    dc7c:	4b2d      	ldr	r3, [pc, #180]	; (dd34 <prvUnlockQueue+0xe0>)
    dc7e:	4798      	blx	r3
    dc80:	1e03      	subs	r3, r0, #0
    dc82:	d00f      	beq.n	dca4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    dc84:	4b2c      	ldr	r3, [pc, #176]	; (dd38 <prvUnlockQueue+0xe4>)
    dc86:	4798      	blx	r3
    dc88:	e00c      	b.n	dca4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    dc8a:	687b      	ldr	r3, [r7, #4]
    dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dc8e:	2b00      	cmp	r3, #0
    dc90:	d017      	beq.n	dcc2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    dc92:	687b      	ldr	r3, [r7, #4]
    dc94:	3324      	adds	r3, #36	; 0x24
    dc96:	0018      	movs	r0, r3
    dc98:	4b28      	ldr	r3, [pc, #160]	; (dd3c <prvUnlockQueue+0xe8>)
    dc9a:	4798      	blx	r3
    dc9c:	1e03      	subs	r3, r0, #0
    dc9e:	d001      	beq.n	dca4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    dca0:	4b25      	ldr	r3, [pc, #148]	; (dd38 <prvUnlockQueue+0xe4>)
    dca2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    dca4:	230f      	movs	r3, #15
    dca6:	18fb      	adds	r3, r7, r3
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	3b01      	subs	r3, #1
    dcac:	b2da      	uxtb	r2, r3
    dcae:	230f      	movs	r3, #15
    dcb0:	18fb      	adds	r3, r7, r3
    dcb2:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    dcb4:	230f      	movs	r3, #15
    dcb6:	18fb      	adds	r3, r7, r3
    dcb8:	781b      	ldrb	r3, [r3, #0]
    dcba:	b25b      	sxtb	r3, r3
    dcbc:	2b00      	cmp	r3, #0
    dcbe:	dcd6      	bgt.n	dc6e <prvUnlockQueue+0x1a>
    dcc0:	e000      	b.n	dcc4 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    dcc2:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    dcc4:	687b      	ldr	r3, [r7, #4]
    dcc6:	2245      	movs	r2, #69	; 0x45
    dcc8:	21ff      	movs	r1, #255	; 0xff
    dcca:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    dccc:	4b1c      	ldr	r3, [pc, #112]	; (dd40 <prvUnlockQueue+0xec>)
    dcce:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    dcd0:	4b17      	ldr	r3, [pc, #92]	; (dd30 <prvUnlockQueue+0xdc>)
    dcd2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    dcd4:	230e      	movs	r3, #14
    dcd6:	18fb      	adds	r3, r7, r3
    dcd8:	687a      	ldr	r2, [r7, #4]
    dcda:	2144      	movs	r1, #68	; 0x44
    dcdc:	5c52      	ldrb	r2, [r2, r1]
    dcde:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    dce0:	e014      	b.n	dd0c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	691b      	ldr	r3, [r3, #16]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d017      	beq.n	dd1a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    dcea:	687b      	ldr	r3, [r7, #4]
    dcec:	3310      	adds	r3, #16
    dcee:	0018      	movs	r0, r3
    dcf0:	4b12      	ldr	r3, [pc, #72]	; (dd3c <prvUnlockQueue+0xe8>)
    dcf2:	4798      	blx	r3
    dcf4:	1e03      	subs	r3, r0, #0
    dcf6:	d001      	beq.n	dcfc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    dcf8:	4b0f      	ldr	r3, [pc, #60]	; (dd38 <prvUnlockQueue+0xe4>)
    dcfa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    dcfc:	230e      	movs	r3, #14
    dcfe:	18fb      	adds	r3, r7, r3
    dd00:	781b      	ldrb	r3, [r3, #0]
    dd02:	3b01      	subs	r3, #1
    dd04:	b2da      	uxtb	r2, r3
    dd06:	230e      	movs	r3, #14
    dd08:	18fb      	adds	r3, r7, r3
    dd0a:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    dd0c:	230e      	movs	r3, #14
    dd0e:	18fb      	adds	r3, r7, r3
    dd10:	781b      	ldrb	r3, [r3, #0]
    dd12:	b25b      	sxtb	r3, r3
    dd14:	2b00      	cmp	r3, #0
    dd16:	dce4      	bgt.n	dce2 <prvUnlockQueue+0x8e>
    dd18:	e000      	b.n	dd1c <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    dd1a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    dd1c:	687b      	ldr	r3, [r7, #4]
    dd1e:	2244      	movs	r2, #68	; 0x44
    dd20:	21ff      	movs	r1, #255	; 0xff
    dd22:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    dd24:	4b06      	ldr	r3, [pc, #24]	; (dd40 <prvUnlockQueue+0xec>)
    dd26:	4798      	blx	r3
}
    dd28:	46c0      	nop			; (mov r8, r8)
    dd2a:	46bd      	mov	sp, r7
    dd2c:	b004      	add	sp, #16
    dd2e:	bd80      	pop	{r7, pc}
    dd30:	0000d259 	.word	0x0000d259
    dd34:	0000de79 	.word	0x0000de79
    dd38:	0000e919 	.word	0x0000e919
    dd3c:	0000e77d 	.word	0x0000e77d
    dd40:	0000d27d 	.word	0x0000d27d

0000dd44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    dd44:	b580      	push	{r7, lr}
    dd46:	b084      	sub	sp, #16
    dd48:	af00      	add	r7, sp, #0
    dd4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    dd4c:	4b08      	ldr	r3, [pc, #32]	; (dd70 <prvIsQueueEmpty+0x2c>)
    dd4e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    dd50:	687b      	ldr	r3, [r7, #4]
    dd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dd54:	2b00      	cmp	r3, #0
    dd56:	d102      	bne.n	dd5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    dd58:	2301      	movs	r3, #1
    dd5a:	60fb      	str	r3, [r7, #12]
    dd5c:	e001      	b.n	dd62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    dd5e:	2300      	movs	r3, #0
    dd60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    dd62:	4b04      	ldr	r3, [pc, #16]	; (dd74 <prvIsQueueEmpty+0x30>)
    dd64:	4798      	blx	r3

	return xReturn;
    dd66:	68fb      	ldr	r3, [r7, #12]
}
    dd68:	0018      	movs	r0, r3
    dd6a:	46bd      	mov	sp, r7
    dd6c:	b004      	add	sp, #16
    dd6e:	bd80      	pop	{r7, pc}
    dd70:	0000d259 	.word	0x0000d259
    dd74:	0000d27d 	.word	0x0000d27d

0000dd78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    dd78:	b580      	push	{r7, lr}
    dd7a:	b084      	sub	sp, #16
    dd7c:	af00      	add	r7, sp, #0
    dd7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    dd80:	4b09      	ldr	r3, [pc, #36]	; (dda8 <prvIsQueueFull+0x30>)
    dd82:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    dd84:	687b      	ldr	r3, [r7, #4]
    dd86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dd88:	687b      	ldr	r3, [r7, #4]
    dd8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    dd8c:	429a      	cmp	r2, r3
    dd8e:	d102      	bne.n	dd96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    dd90:	2301      	movs	r3, #1
    dd92:	60fb      	str	r3, [r7, #12]
    dd94:	e001      	b.n	dd9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    dd96:	2300      	movs	r3, #0
    dd98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    dd9a:	4b04      	ldr	r3, [pc, #16]	; (ddac <prvIsQueueFull+0x34>)
    dd9c:	4798      	blx	r3

	return xReturn;
    dd9e:	68fb      	ldr	r3, [r7, #12]
}
    dda0:	0018      	movs	r0, r3
    dda2:	46bd      	mov	sp, r7
    dda4:	b004      	add	sp, #16
    dda6:	bd80      	pop	{r7, pc}
    dda8:	0000d259 	.word	0x0000d259
    ddac:	0000d27d 	.word	0x0000d27d

0000ddb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    ddb0:	b580      	push	{r7, lr}
    ddb2:	b084      	sub	sp, #16
    ddb4:	af00      	add	r7, sp, #0
    ddb6:	6078      	str	r0, [r7, #4]
    ddb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    ddba:	2300      	movs	r3, #0
    ddbc:	60fb      	str	r3, [r7, #12]
    ddbe:	e015      	b.n	ddec <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    ddc0:	4b0e      	ldr	r3, [pc, #56]	; (ddfc <vQueueAddToRegistry+0x4c>)
    ddc2:	68fa      	ldr	r2, [r7, #12]
    ddc4:	00d2      	lsls	r2, r2, #3
    ddc6:	58d3      	ldr	r3, [r2, r3]
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d10c      	bne.n	dde6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    ddcc:	4b0b      	ldr	r3, [pc, #44]	; (ddfc <vQueueAddToRegistry+0x4c>)
    ddce:	68fa      	ldr	r2, [r7, #12]
    ddd0:	00d2      	lsls	r2, r2, #3
    ddd2:	6839      	ldr	r1, [r7, #0]
    ddd4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    ddd6:	4a09      	ldr	r2, [pc, #36]	; (ddfc <vQueueAddToRegistry+0x4c>)
    ddd8:	68fb      	ldr	r3, [r7, #12]
    ddda:	00db      	lsls	r3, r3, #3
    dddc:	18d3      	adds	r3, r2, r3
    ddde:	3304      	adds	r3, #4
    dde0:	687a      	ldr	r2, [r7, #4]
    dde2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    dde4:	e005      	b.n	ddf2 <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    dde6:	68fb      	ldr	r3, [r7, #12]
    dde8:	3301      	adds	r3, #1
    ddea:	60fb      	str	r3, [r7, #12]
    ddec:	68fb      	ldr	r3, [r7, #12]
    ddee:	2b04      	cmp	r3, #4
    ddf0:	d9e6      	bls.n	ddc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    ddf2:	46c0      	nop			; (mov r8, r8)
    ddf4:	46bd      	mov	sp, r7
    ddf6:	b004      	add	sp, #16
    ddf8:	bd80      	pop	{r7, pc}
    ddfa:	46c0      	nop			; (mov r8, r8)
    ddfc:	200047c4 	.word	0x200047c4

0000de00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    de00:	b580      	push	{r7, lr}
    de02:	b086      	sub	sp, #24
    de04:	af00      	add	r7, sp, #0
    de06:	60f8      	str	r0, [r7, #12]
    de08:	60b9      	str	r1, [r7, #8]
    de0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    de0c:	68fb      	ldr	r3, [r7, #12]
    de0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    de10:	4b15      	ldr	r3, [pc, #84]	; (de68 <vQueueWaitForMessageRestricted+0x68>)
    de12:	4798      	blx	r3
    de14:	697b      	ldr	r3, [r7, #20]
    de16:	2244      	movs	r2, #68	; 0x44
    de18:	5c9b      	ldrb	r3, [r3, r2]
    de1a:	b25b      	sxtb	r3, r3
    de1c:	3301      	adds	r3, #1
    de1e:	d103      	bne.n	de28 <vQueueWaitForMessageRestricted+0x28>
    de20:	697b      	ldr	r3, [r7, #20]
    de22:	2244      	movs	r2, #68	; 0x44
    de24:	2100      	movs	r1, #0
    de26:	5499      	strb	r1, [r3, r2]
    de28:	697b      	ldr	r3, [r7, #20]
    de2a:	2245      	movs	r2, #69	; 0x45
    de2c:	5c9b      	ldrb	r3, [r3, r2]
    de2e:	b25b      	sxtb	r3, r3
    de30:	3301      	adds	r3, #1
    de32:	d103      	bne.n	de3c <vQueueWaitForMessageRestricted+0x3c>
    de34:	697b      	ldr	r3, [r7, #20]
    de36:	2245      	movs	r2, #69	; 0x45
    de38:	2100      	movs	r1, #0
    de3a:	5499      	strb	r1, [r3, r2]
    de3c:	4b0b      	ldr	r3, [pc, #44]	; (de6c <vQueueWaitForMessageRestricted+0x6c>)
    de3e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    de40:	697b      	ldr	r3, [r7, #20]
    de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    de44:	2b00      	cmp	r3, #0
    de46:	d106      	bne.n	de56 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    de48:	697b      	ldr	r3, [r7, #20]
    de4a:	3324      	adds	r3, #36	; 0x24
    de4c:	687a      	ldr	r2, [r7, #4]
    de4e:	68b9      	ldr	r1, [r7, #8]
    de50:	0018      	movs	r0, r3
    de52:	4b07      	ldr	r3, [pc, #28]	; (de70 <vQueueWaitForMessageRestricted+0x70>)
    de54:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    de56:	697b      	ldr	r3, [r7, #20]
    de58:	0018      	movs	r0, r3
    de5a:	4b06      	ldr	r3, [pc, #24]	; (de74 <vQueueWaitForMessageRestricted+0x74>)
    de5c:	4798      	blx	r3
	}
    de5e:	46c0      	nop			; (mov r8, r8)
    de60:	46bd      	mov	sp, r7
    de62:	b006      	add	sp, #24
    de64:	bd80      	pop	{r7, pc}
    de66:	46c0      	nop			; (mov r8, r8)
    de68:	0000d259 	.word	0x0000d259
    de6c:	0000d27d 	.word	0x0000d27d
    de70:	0000e729 	.word	0x0000e729
    de74:	0000dc55 	.word	0x0000dc55

0000de78 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    de78:	b580      	push	{r7, lr}
    de7a:	b086      	sub	sp, #24
    de7c:	af00      	add	r7, sp, #0
    de7e:	6078      	str	r0, [r7, #4]
    de80:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    de86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    de88:	2300      	movs	r3, #0
    de8a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    de8c:	693b      	ldr	r3, [r7, #16]
    de8e:	2b00      	cmp	r3, #0
    de90:	d101      	bne.n	de96 <prvNotifyQueueSetContainer+0x1e>
    de92:	b672      	cpsid	i
    de94:	e7fe      	b.n	de94 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    de96:	693b      	ldr	r3, [r7, #16]
    de98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    de9a:	693b      	ldr	r3, [r7, #16]
    de9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    de9e:	429a      	cmp	r2, r3
    dea0:	d301      	bcc.n	dea6 <prvNotifyQueueSetContainer+0x2e>
    dea2:	b672      	cpsid	i
    dea4:	e7fe      	b.n	dea4 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    dea6:	693b      	ldr	r3, [r7, #16]
    dea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    deaa:	693b      	ldr	r3, [r7, #16]
    deac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    deae:	429a      	cmp	r2, r3
    deb0:	d22a      	bcs.n	df08 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    deb2:	230f      	movs	r3, #15
    deb4:	18fb      	adds	r3, r7, r3
    deb6:	693a      	ldr	r2, [r7, #16]
    deb8:	2145      	movs	r1, #69	; 0x45
    deba:	5c52      	ldrb	r2, [r2, r1]
    debc:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    debe:	683a      	ldr	r2, [r7, #0]
    dec0:	1d39      	adds	r1, r7, #4
    dec2:	693b      	ldr	r3, [r7, #16]
    dec4:	0018      	movs	r0, r3
    dec6:	4b13      	ldr	r3, [pc, #76]	; (df14 <prvNotifyQueueSetContainer+0x9c>)
    dec8:	4798      	blx	r3
    deca:	0003      	movs	r3, r0
    decc:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    dece:	230f      	movs	r3, #15
    ded0:	18fb      	adds	r3, r7, r3
    ded2:	781b      	ldrb	r3, [r3, #0]
    ded4:	b25b      	sxtb	r3, r3
    ded6:	3301      	adds	r3, #1
    ded8:	d10d      	bne.n	def6 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    deda:	693b      	ldr	r3, [r7, #16]
    dedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dede:	2b00      	cmp	r3, #0
    dee0:	d012      	beq.n	df08 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    dee2:	693b      	ldr	r3, [r7, #16]
    dee4:	3324      	adds	r3, #36	; 0x24
    dee6:	0018      	movs	r0, r3
    dee8:	4b0b      	ldr	r3, [pc, #44]	; (df18 <prvNotifyQueueSetContainer+0xa0>)
    deea:	4798      	blx	r3
    deec:	1e03      	subs	r3, r0, #0
    deee:	d00b      	beq.n	df08 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    def0:	2301      	movs	r3, #1
    def2:	617b      	str	r3, [r7, #20]
    def4:	e008      	b.n	df08 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    def6:	230f      	movs	r3, #15
    def8:	18fb      	adds	r3, r7, r3
    defa:	781b      	ldrb	r3, [r3, #0]
    defc:	3301      	adds	r3, #1
    defe:	b2db      	uxtb	r3, r3
    df00:	b259      	sxtb	r1, r3
    df02:	693b      	ldr	r3, [r7, #16]
    df04:	2245      	movs	r2, #69	; 0x45
    df06:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    df08:	697b      	ldr	r3, [r7, #20]
	}
    df0a:	0018      	movs	r0, r3
    df0c:	46bd      	mov	sp, r7
    df0e:	b006      	add	sp, #24
    df10:	bd80      	pop	{r7, pc}
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	0000db25 	.word	0x0000db25
    df18:	0000e77d 	.word	0x0000e77d

0000df1c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    df1c:	b590      	push	{r4, r7, lr}
    df1e:	b08d      	sub	sp, #52	; 0x34
    df20:	af04      	add	r7, sp, #16
    df22:	60f8      	str	r0, [r7, #12]
    df24:	60b9      	str	r1, [r7, #8]
    df26:	603b      	str	r3, [r7, #0]
    df28:	1dbb      	adds	r3, r7, #6
    df2a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    df2c:	1dbb      	adds	r3, r7, #6
    df2e:	881b      	ldrh	r3, [r3, #0]
    df30:	009b      	lsls	r3, r3, #2
    df32:	0018      	movs	r0, r3
    df34:	4b1d      	ldr	r3, [pc, #116]	; (dfac <xTaskCreate+0x90>)
    df36:	4798      	blx	r3
    df38:	0003      	movs	r3, r0
    df3a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    df3c:	697b      	ldr	r3, [r7, #20]
    df3e:	2b00      	cmp	r3, #0
    df40:	d010      	beq.n	df64 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    df42:	2058      	movs	r0, #88	; 0x58
    df44:	4b19      	ldr	r3, [pc, #100]	; (dfac <xTaskCreate+0x90>)
    df46:	4798      	blx	r3
    df48:	0003      	movs	r3, r0
    df4a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    df4c:	69fb      	ldr	r3, [r7, #28]
    df4e:	2b00      	cmp	r3, #0
    df50:	d003      	beq.n	df5a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    df52:	69fb      	ldr	r3, [r7, #28]
    df54:	697a      	ldr	r2, [r7, #20]
    df56:	631a      	str	r2, [r3, #48]	; 0x30
    df58:	e006      	b.n	df68 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    df5a:	697b      	ldr	r3, [r7, #20]
    df5c:	0018      	movs	r0, r3
    df5e:	4b14      	ldr	r3, [pc, #80]	; (dfb0 <xTaskCreate+0x94>)
    df60:	4798      	blx	r3
    df62:	e001      	b.n	df68 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    df64:	2300      	movs	r3, #0
    df66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    df68:	69fb      	ldr	r3, [r7, #28]
    df6a:	2b00      	cmp	r3, #0
    df6c:	d016      	beq.n	df9c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    df6e:	1dbb      	adds	r3, r7, #6
    df70:	881a      	ldrh	r2, [r3, #0]
    df72:	683c      	ldr	r4, [r7, #0]
    df74:	68b9      	ldr	r1, [r7, #8]
    df76:	68f8      	ldr	r0, [r7, #12]
    df78:	2300      	movs	r3, #0
    df7a:	9303      	str	r3, [sp, #12]
    df7c:	69fb      	ldr	r3, [r7, #28]
    df7e:	9302      	str	r3, [sp, #8]
    df80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    df82:	9301      	str	r3, [sp, #4]
    df84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    df86:	9300      	str	r3, [sp, #0]
    df88:	0023      	movs	r3, r4
    df8a:	4c0a      	ldr	r4, [pc, #40]	; (dfb4 <xTaskCreate+0x98>)
    df8c:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    df8e:	69fb      	ldr	r3, [r7, #28]
    df90:	0018      	movs	r0, r3
    df92:	4b09      	ldr	r3, [pc, #36]	; (dfb8 <xTaskCreate+0x9c>)
    df94:	4798      	blx	r3
			xReturn = pdPASS;
    df96:	2301      	movs	r3, #1
    df98:	61bb      	str	r3, [r7, #24]
    df9a:	e002      	b.n	dfa2 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    df9c:	2301      	movs	r3, #1
    df9e:	425b      	negs	r3, r3
    dfa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    dfa2:	69bb      	ldr	r3, [r7, #24]
	}
    dfa4:	0018      	movs	r0, r3
    dfa6:	46bd      	mov	sp, r7
    dfa8:	b009      	add	sp, #36	; 0x24
    dfaa:	bd90      	pop	{r4, r7, pc}
    dfac:	0000d36d 	.word	0x0000d36d
    dfb0:	0000d40d 	.word	0x0000d40d
    dfb4:	0000dfbd 	.word	0x0000dfbd
    dfb8:	0000e0cd 	.word	0x0000e0cd

0000dfbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    dfbc:	b580      	push	{r7, lr}
    dfbe:	b086      	sub	sp, #24
    dfc0:	af00      	add	r7, sp, #0
    dfc2:	60f8      	str	r0, [r7, #12]
    dfc4:	60b9      	str	r1, [r7, #8]
    dfc6:	607a      	str	r2, [r7, #4]
    dfc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    dfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dfcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
    dfce:	687b      	ldr	r3, [r7, #4]
    dfd0:	009b      	lsls	r3, r3, #2
    dfd2:	001a      	movs	r2, r3
    dfd4:	21a5      	movs	r1, #165	; 0xa5
    dfd6:	4b39      	ldr	r3, [pc, #228]	; (e0bc <prvInitialiseNewTask+0x100>)
    dfd8:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    dfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dfdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dfde:	687b      	ldr	r3, [r7, #4]
    dfe0:	4937      	ldr	r1, [pc, #220]	; (e0c0 <prvInitialiseNewTask+0x104>)
    dfe2:	468c      	mov	ip, r1
    dfe4:	4463      	add	r3, ip
    dfe6:	009b      	lsls	r3, r3, #2
    dfe8:	18d3      	adds	r3, r2, r3
    dfea:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    dfec:	693b      	ldr	r3, [r7, #16]
    dfee:	2207      	movs	r2, #7
    dff0:	4393      	bics	r3, r2
    dff2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    dff4:	693b      	ldr	r3, [r7, #16]
    dff6:	2207      	movs	r2, #7
    dff8:	4013      	ands	r3, r2
    dffa:	d001      	beq.n	e000 <prvInitialiseNewTask+0x44>
    dffc:	b672      	cpsid	i
    dffe:	e7fe      	b.n	dffe <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    e000:	2300      	movs	r3, #0
    e002:	617b      	str	r3, [r7, #20]
    e004:	e013      	b.n	e02e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    e006:	68ba      	ldr	r2, [r7, #8]
    e008:	697b      	ldr	r3, [r7, #20]
    e00a:	18d3      	adds	r3, r2, r3
    e00c:	7818      	ldrb	r0, [r3, #0]
    e00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e010:	2134      	movs	r1, #52	; 0x34
    e012:	697b      	ldr	r3, [r7, #20]
    e014:	18d3      	adds	r3, r2, r3
    e016:	185b      	adds	r3, r3, r1
    e018:	1c02      	adds	r2, r0, #0
    e01a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    e01c:	68ba      	ldr	r2, [r7, #8]
    e01e:	697b      	ldr	r3, [r7, #20]
    e020:	18d3      	adds	r3, r2, r3
    e022:	781b      	ldrb	r3, [r3, #0]
    e024:	2b00      	cmp	r3, #0
    e026:	d006      	beq.n	e036 <prvInitialiseNewTask+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    e028:	697b      	ldr	r3, [r7, #20]
    e02a:	3301      	adds	r3, #1
    e02c:	617b      	str	r3, [r7, #20]
    e02e:	697b      	ldr	r3, [r7, #20]
    e030:	2b0b      	cmp	r3, #11
    e032:	d9e8      	bls.n	e006 <prvInitialiseNewTask+0x4a>
    e034:	e000      	b.n	e038 <prvInitialiseNewTask+0x7c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    e036:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e03a:	223f      	movs	r2, #63	; 0x3f
    e03c:	2100      	movs	r1, #0
    e03e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    e040:	6a3b      	ldr	r3, [r7, #32]
    e042:	2b04      	cmp	r3, #4
    e044:	d901      	bls.n	e04a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    e046:	2304      	movs	r3, #4
    e048:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e04c:	6a3a      	ldr	r2, [r7, #32]
    e04e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e052:	6a3a      	ldr	r2, [r7, #32]
    e054:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
    e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e058:	2200      	movs	r2, #0
    e05a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e05e:	3304      	adds	r3, #4
    e060:	0018      	movs	r0, r3
    e062:	4b18      	ldr	r3, [pc, #96]	; (e0c4 <prvInitialiseNewTask+0x108>)
    e064:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e068:	3318      	adds	r3, #24
    e06a:	0018      	movs	r0, r3
    e06c:	4b15      	ldr	r3, [pc, #84]	; (e0c4 <prvInitialiseNewTask+0x108>)
    e06e:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    e070:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e072:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e074:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e076:	6a3b      	ldr	r3, [r7, #32]
    e078:	2205      	movs	r2, #5
    e07a:	1ad2      	subs	r2, r2, r3
    e07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e07e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e082:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e084:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    e086:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e088:	2200      	movs	r2, #0
    e08a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e08e:	2254      	movs	r2, #84	; 0x54
    e090:	2100      	movs	r1, #0
    e092:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    e094:	683a      	ldr	r2, [r7, #0]
    e096:	68f9      	ldr	r1, [r7, #12]
    e098:	693b      	ldr	r3, [r7, #16]
    e09a:	0018      	movs	r0, r3
    e09c:	4b0a      	ldr	r3, [pc, #40]	; (e0c8 <prvInitialiseNewTask+0x10c>)
    e09e:	4798      	blx	r3
    e0a0:	0002      	movs	r2, r0
    e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e0a4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    e0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d002      	beq.n	e0b2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e0ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e0b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    e0b2:	46c0      	nop			; (mov r8, r8)
    e0b4:	46bd      	mov	sp, r7
    e0b6:	b006      	add	sp, #24
    e0b8:	bd80      	pop	{r7, pc}
    e0ba:	46c0      	nop			; (mov r8, r8)
    e0bc:	00010de7 	.word	0x00010de7
    e0c0:	3fffffff 	.word	0x3fffffff
    e0c4:	0000d019 	.word	0x0000d019
    e0c8:	0000d131 	.word	0x0000d131

0000e0cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    e0cc:	b580      	push	{r7, lr}
    e0ce:	b082      	sub	sp, #8
    e0d0:	af00      	add	r7, sp, #0
    e0d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    e0d4:	4b2b      	ldr	r3, [pc, #172]	; (e184 <prvAddNewTaskToReadyList+0xb8>)
    e0d6:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    e0d8:	4b2b      	ldr	r3, [pc, #172]	; (e188 <prvAddNewTaskToReadyList+0xbc>)
    e0da:	681b      	ldr	r3, [r3, #0]
    e0dc:	1c5a      	adds	r2, r3, #1
    e0de:	4b2a      	ldr	r3, [pc, #168]	; (e188 <prvAddNewTaskToReadyList+0xbc>)
    e0e0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    e0e2:	4b2a      	ldr	r3, [pc, #168]	; (e18c <prvAddNewTaskToReadyList+0xc0>)
    e0e4:	681b      	ldr	r3, [r3, #0]
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d109      	bne.n	e0fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    e0ea:	4b28      	ldr	r3, [pc, #160]	; (e18c <prvAddNewTaskToReadyList+0xc0>)
    e0ec:	687a      	ldr	r2, [r7, #4]
    e0ee:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    e0f0:	4b25      	ldr	r3, [pc, #148]	; (e188 <prvAddNewTaskToReadyList+0xbc>)
    e0f2:	681b      	ldr	r3, [r3, #0]
    e0f4:	2b01      	cmp	r3, #1
    e0f6:	d110      	bne.n	e11a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    e0f8:	4b25      	ldr	r3, [pc, #148]	; (e190 <prvAddNewTaskToReadyList+0xc4>)
    e0fa:	4798      	blx	r3
    e0fc:	e00d      	b.n	e11a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    e0fe:	4b25      	ldr	r3, [pc, #148]	; (e194 <prvAddNewTaskToReadyList+0xc8>)
    e100:	681b      	ldr	r3, [r3, #0]
    e102:	2b00      	cmp	r3, #0
    e104:	d109      	bne.n	e11a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    e106:	4b21      	ldr	r3, [pc, #132]	; (e18c <prvAddNewTaskToReadyList+0xc0>)
    e108:	681b      	ldr	r3, [r3, #0]
    e10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e10c:	687b      	ldr	r3, [r7, #4]
    e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e110:	429a      	cmp	r2, r3
    e112:	d802      	bhi.n	e11a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    e114:	4b1d      	ldr	r3, [pc, #116]	; (e18c <prvAddNewTaskToReadyList+0xc0>)
    e116:	687a      	ldr	r2, [r7, #4]
    e118:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    e11a:	4b1f      	ldr	r3, [pc, #124]	; (e198 <prvAddNewTaskToReadyList+0xcc>)
    e11c:	681b      	ldr	r3, [r3, #0]
    e11e:	1c5a      	adds	r2, r3, #1
    e120:	4b1d      	ldr	r3, [pc, #116]	; (e198 <prvAddNewTaskToReadyList+0xcc>)
    e122:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    e124:	4b1c      	ldr	r3, [pc, #112]	; (e198 <prvAddNewTaskToReadyList+0xcc>)
    e126:	681a      	ldr	r2, [r3, #0]
    e128:	687b      	ldr	r3, [r7, #4]
    e12a:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    e12c:	687b      	ldr	r3, [r7, #4]
    e12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e130:	4b1a      	ldr	r3, [pc, #104]	; (e19c <prvAddNewTaskToReadyList+0xd0>)
    e132:	681b      	ldr	r3, [r3, #0]
    e134:	429a      	cmp	r2, r3
    e136:	d903      	bls.n	e140 <prvAddNewTaskToReadyList+0x74>
    e138:	687b      	ldr	r3, [r7, #4]
    e13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e13c:	4b17      	ldr	r3, [pc, #92]	; (e19c <prvAddNewTaskToReadyList+0xd0>)
    e13e:	601a      	str	r2, [r3, #0]
    e140:	687b      	ldr	r3, [r7, #4]
    e142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e144:	0013      	movs	r3, r2
    e146:	009b      	lsls	r3, r3, #2
    e148:	189b      	adds	r3, r3, r2
    e14a:	009b      	lsls	r3, r3, #2
    e14c:	4a14      	ldr	r2, [pc, #80]	; (e1a0 <prvAddNewTaskToReadyList+0xd4>)
    e14e:	189a      	adds	r2, r3, r2
    e150:	687b      	ldr	r3, [r7, #4]
    e152:	3304      	adds	r3, #4
    e154:	0019      	movs	r1, r3
    e156:	0010      	movs	r0, r2
    e158:	4b12      	ldr	r3, [pc, #72]	; (e1a4 <prvAddNewTaskToReadyList+0xd8>)
    e15a:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    e15c:	4b12      	ldr	r3, [pc, #72]	; (e1a8 <prvAddNewTaskToReadyList+0xdc>)
    e15e:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    e160:	4b0c      	ldr	r3, [pc, #48]	; (e194 <prvAddNewTaskToReadyList+0xc8>)
    e162:	681b      	ldr	r3, [r3, #0]
    e164:	2b00      	cmp	r3, #0
    e166:	d008      	beq.n	e17a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    e168:	4b08      	ldr	r3, [pc, #32]	; (e18c <prvAddNewTaskToReadyList+0xc0>)
    e16a:	681b      	ldr	r3, [r3, #0]
    e16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e16e:	687b      	ldr	r3, [r7, #4]
    e170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e172:	429a      	cmp	r2, r3
    e174:	d201      	bcs.n	e17a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
    e176:	4b0d      	ldr	r3, [pc, #52]	; (e1ac <prvAddNewTaskToReadyList+0xe0>)
    e178:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    e17a:	46c0      	nop			; (mov r8, r8)
    e17c:	46bd      	mov	sp, r7
    e17e:	b002      	add	sp, #8
    e180:	bd80      	pop	{r7, pc}
    e182:	46c0      	nop			; (mov r8, r8)
    e184:	0000d259 	.word	0x0000d259
    e188:	20003e20 	.word	0x20003e20
    e18c:	20003d48 	.word	0x20003d48
    e190:	0000e949 	.word	0x0000e949
    e194:	20003e2c 	.word	0x20003e2c
    e198:	20003e3c 	.word	0x20003e3c
    e19c:	20003e28 	.word	0x20003e28
    e1a0:	20003d4c 	.word	0x20003d4c
    e1a4:	0000d031 	.word	0x0000d031
    e1a8:	0000d27d 	.word	0x0000d27d
    e1ac:	0000d239 	.word	0x0000d239

0000e1b0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    e1b0:	b580      	push	{r7, lr}
    e1b2:	b086      	sub	sp, #24
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	6078      	str	r0, [r7, #4]
    e1b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    e1ba:	2300      	movs	r3, #0
    e1bc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    e1be:	687b      	ldr	r3, [r7, #4]
    e1c0:	2b00      	cmp	r3, #0
    e1c2:	d101      	bne.n	e1c8 <vTaskDelayUntil+0x18>
    e1c4:	b672      	cpsid	i
    e1c6:	e7fe      	b.n	e1c6 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    e1c8:	683b      	ldr	r3, [r7, #0]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d101      	bne.n	e1d2 <vTaskDelayUntil+0x22>
    e1ce:	b672      	cpsid	i
    e1d0:	e7fe      	b.n	e1d0 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    e1d2:	4b23      	ldr	r3, [pc, #140]	; (e260 <vTaskDelayUntil+0xb0>)
    e1d4:	681b      	ldr	r3, [r3, #0]
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d001      	beq.n	e1de <vTaskDelayUntil+0x2e>
    e1da:	b672      	cpsid	i
    e1dc:	e7fe      	b.n	e1dc <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    e1de:	4b21      	ldr	r3, [pc, #132]	; (e264 <vTaskDelayUntil+0xb4>)
    e1e0:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    e1e2:	4b21      	ldr	r3, [pc, #132]	; (e268 <vTaskDelayUntil+0xb8>)
    e1e4:	681b      	ldr	r3, [r3, #0]
    e1e6:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    e1e8:	687b      	ldr	r3, [r7, #4]
    e1ea:	681a      	ldr	r2, [r3, #0]
    e1ec:	683b      	ldr	r3, [r7, #0]
    e1ee:	18d3      	adds	r3, r2, r3
    e1f0:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    e1f2:	687b      	ldr	r3, [r7, #4]
    e1f4:	681a      	ldr	r2, [r3, #0]
    e1f6:	693b      	ldr	r3, [r7, #16]
    e1f8:	429a      	cmp	r2, r3
    e1fa:	d90b      	bls.n	e214 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    e1fc:	687b      	ldr	r3, [r7, #4]
    e1fe:	681a      	ldr	r2, [r3, #0]
    e200:	68fb      	ldr	r3, [r7, #12]
    e202:	429a      	cmp	r2, r3
    e204:	d911      	bls.n	e22a <vTaskDelayUntil+0x7a>
    e206:	68fa      	ldr	r2, [r7, #12]
    e208:	693b      	ldr	r3, [r7, #16]
    e20a:	429a      	cmp	r2, r3
    e20c:	d90d      	bls.n	e22a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    e20e:	2301      	movs	r3, #1
    e210:	617b      	str	r3, [r7, #20]
    e212:	e00a      	b.n	e22a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    e214:	687b      	ldr	r3, [r7, #4]
    e216:	681a      	ldr	r2, [r3, #0]
    e218:	68fb      	ldr	r3, [r7, #12]
    e21a:	429a      	cmp	r2, r3
    e21c:	d803      	bhi.n	e226 <vTaskDelayUntil+0x76>
    e21e:	68fa      	ldr	r2, [r7, #12]
    e220:	693b      	ldr	r3, [r7, #16]
    e222:	429a      	cmp	r2, r3
    e224:	d901      	bls.n	e22a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    e226:	2301      	movs	r3, #1
    e228:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    e22a:	687b      	ldr	r3, [r7, #4]
    e22c:	68fa      	ldr	r2, [r7, #12]
    e22e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    e230:	697b      	ldr	r3, [r7, #20]
    e232:	2b00      	cmp	r3, #0
    e234:	d006      	beq.n	e244 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    e236:	68fa      	ldr	r2, [r7, #12]
    e238:	693b      	ldr	r3, [r7, #16]
    e23a:	1ad3      	subs	r3, r2, r3
    e23c:	2100      	movs	r1, #0
    e23e:	0018      	movs	r0, r3
    e240:	4b0a      	ldr	r3, [pc, #40]	; (e26c <vTaskDelayUntil+0xbc>)
    e242:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    e244:	4b0a      	ldr	r3, [pc, #40]	; (e270 <vTaskDelayUntil+0xc0>)
    e246:	4798      	blx	r3
    e248:	0003      	movs	r3, r0
    e24a:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    e24c:	68bb      	ldr	r3, [r7, #8]
    e24e:	2b00      	cmp	r3, #0
    e250:	d101      	bne.n	e256 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    e252:	4b08      	ldr	r3, [pc, #32]	; (e274 <vTaskDelayUntil+0xc4>)
    e254:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    e256:	46c0      	nop			; (mov r8, r8)
    e258:	46bd      	mov	sp, r7
    e25a:	b006      	add	sp, #24
    e25c:	bd80      	pop	{r7, pc}
    e25e:	46c0      	nop			; (mov r8, r8)
    e260:	20003e48 	.word	0x20003e48
    e264:	0000e35d 	.word	0x0000e35d
    e268:	20003e24 	.word	0x20003e24
    e26c:	0000ecb1 	.word	0x0000ecb1
    e270:	0000e375 	.word	0x0000e375
    e274:	0000d239 	.word	0x0000d239

0000e278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    e278:	b580      	push	{r7, lr}
    e27a:	b084      	sub	sp, #16
    e27c:	af00      	add	r7, sp, #0
    e27e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    e280:	2300      	movs	r3, #0
    e282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    e284:	687b      	ldr	r3, [r7, #4]
    e286:	2b00      	cmp	r3, #0
    e288:	d010      	beq.n	e2ac <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    e28a:	4b0d      	ldr	r3, [pc, #52]	; (e2c0 <vTaskDelay+0x48>)
    e28c:	681b      	ldr	r3, [r3, #0]
    e28e:	2b00      	cmp	r3, #0
    e290:	d001      	beq.n	e296 <vTaskDelay+0x1e>
    e292:	b672      	cpsid	i
    e294:	e7fe      	b.n	e294 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    e296:	4b0b      	ldr	r3, [pc, #44]	; (e2c4 <vTaskDelay+0x4c>)
    e298:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    e29a:	687b      	ldr	r3, [r7, #4]
    e29c:	2100      	movs	r1, #0
    e29e:	0018      	movs	r0, r3
    e2a0:	4b09      	ldr	r3, [pc, #36]	; (e2c8 <vTaskDelay+0x50>)
    e2a2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    e2a4:	4b09      	ldr	r3, [pc, #36]	; (e2cc <vTaskDelay+0x54>)
    e2a6:	4798      	blx	r3
    e2a8:	0003      	movs	r3, r0
    e2aa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    e2ac:	68fb      	ldr	r3, [r7, #12]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	d101      	bne.n	e2b6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    e2b2:	4b07      	ldr	r3, [pc, #28]	; (e2d0 <vTaskDelay+0x58>)
    e2b4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    e2b6:	46c0      	nop			; (mov r8, r8)
    e2b8:	46bd      	mov	sp, r7
    e2ba:	b004      	add	sp, #16
    e2bc:	bd80      	pop	{r7, pc}
    e2be:	46c0      	nop			; (mov r8, r8)
    e2c0:	20003e48 	.word	0x20003e48
    e2c4:	0000e35d 	.word	0x0000e35d
    e2c8:	0000ecb1 	.word	0x0000ecb1
    e2cc:	0000e375 	.word	0x0000e375
    e2d0:	0000d239 	.word	0x0000d239

0000e2d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    e2d4:	b590      	push	{r4, r7, lr}
    e2d6:	b085      	sub	sp, #20
    e2d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    e2da:	2380      	movs	r3, #128	; 0x80
    e2dc:	009a      	lsls	r2, r3, #2
    e2de:	4916      	ldr	r1, [pc, #88]	; (e338 <vTaskStartScheduler+0x64>)
    e2e0:	4816      	ldr	r0, [pc, #88]	; (e33c <vTaskStartScheduler+0x68>)
    e2e2:	4b17      	ldr	r3, [pc, #92]	; (e340 <vTaskStartScheduler+0x6c>)
    e2e4:	9301      	str	r3, [sp, #4]
    e2e6:	2300      	movs	r3, #0
    e2e8:	9300      	str	r3, [sp, #0]
    e2ea:	2300      	movs	r3, #0
    e2ec:	4c15      	ldr	r4, [pc, #84]	; (e344 <vTaskStartScheduler+0x70>)
    e2ee:	47a0      	blx	r4
    e2f0:	0003      	movs	r3, r0
    e2f2:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    e2f4:	687b      	ldr	r3, [r7, #4]
    e2f6:	2b01      	cmp	r3, #1
    e2f8:	d103      	bne.n	e302 <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    e2fa:	4b13      	ldr	r3, [pc, #76]	; (e348 <vTaskStartScheduler+0x74>)
    e2fc:	4798      	blx	r3
    e2fe:	0003      	movs	r3, r0
    e300:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    e302:	687b      	ldr	r3, [r7, #4]
    e304:	2b01      	cmp	r3, #1
    e306:	d10d      	bne.n	e324 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    e308:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    e30a:	4b10      	ldr	r3, [pc, #64]	; (e34c <vTaskStartScheduler+0x78>)
    e30c:	2201      	movs	r2, #1
    e30e:	4252      	negs	r2, r2
    e310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    e312:	4b0f      	ldr	r3, [pc, #60]	; (e350 <vTaskStartScheduler+0x7c>)
    e314:	2201      	movs	r2, #1
    e316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    e318:	4b0e      	ldr	r3, [pc, #56]	; (e354 <vTaskStartScheduler+0x80>)
    e31a:	2200      	movs	r2, #0
    e31c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    e31e:	4b0e      	ldr	r3, [pc, #56]	; (e358 <vTaskStartScheduler+0x84>)
    e320:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    e322:	e004      	b.n	e32e <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    e324:	687b      	ldr	r3, [r7, #4]
    e326:	3301      	adds	r3, #1
    e328:	d101      	bne.n	e32e <vTaskStartScheduler+0x5a>
    e32a:	b672      	cpsid	i
    e32c:	e7fe      	b.n	e32c <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    e32e:	46c0      	nop			; (mov r8, r8)
    e330:	46bd      	mov	sp, r7
    e332:	b003      	add	sp, #12
    e334:	bd90      	pop	{r4, r7, pc}
    e336:	46c0      	nop			; (mov r8, r8)
    e338:	00013dd4 	.word	0x00013dd4
    e33c:	0000e92d 	.word	0x0000e92d
    e340:	20003e44 	.word	0x20003e44
    e344:	0000df1d 	.word	0x0000df1d
    e348:	0000ed65 	.word	0x0000ed65
    e34c:	20003e40 	.word	0x20003e40
    e350:	20003e2c 	.word	0x20003e2c
    e354:	20003e24 	.word	0x20003e24
    e358:	0000d1e9 	.word	0x0000d1e9

0000e35c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    e35c:	b580      	push	{r7, lr}
    e35e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    e360:	4b03      	ldr	r3, [pc, #12]	; (e370 <vTaskSuspendAll+0x14>)
    e362:	681b      	ldr	r3, [r3, #0]
    e364:	1c5a      	adds	r2, r3, #1
    e366:	4b02      	ldr	r3, [pc, #8]	; (e370 <vTaskSuspendAll+0x14>)
    e368:	601a      	str	r2, [r3, #0]
}
    e36a:	46c0      	nop			; (mov r8, r8)
    e36c:	46bd      	mov	sp, r7
    e36e:	bd80      	pop	{r7, pc}
    e370:	20003e48 	.word	0x20003e48

0000e374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    e374:	b580      	push	{r7, lr}
    e376:	b084      	sub	sp, #16
    e378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    e37a:	2300      	movs	r3, #0
    e37c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    e37e:	2300      	movs	r3, #0
    e380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    e382:	4b3a      	ldr	r3, [pc, #232]	; (e46c <xTaskResumeAll+0xf8>)
    e384:	681b      	ldr	r3, [r3, #0]
    e386:	2b00      	cmp	r3, #0
    e388:	d101      	bne.n	e38e <xTaskResumeAll+0x1a>
    e38a:	b672      	cpsid	i
    e38c:	e7fe      	b.n	e38c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    e38e:	4b38      	ldr	r3, [pc, #224]	; (e470 <xTaskResumeAll+0xfc>)
    e390:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    e392:	4b36      	ldr	r3, [pc, #216]	; (e46c <xTaskResumeAll+0xf8>)
    e394:	681b      	ldr	r3, [r3, #0]
    e396:	1e5a      	subs	r2, r3, #1
    e398:	4b34      	ldr	r3, [pc, #208]	; (e46c <xTaskResumeAll+0xf8>)
    e39a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    e39c:	4b33      	ldr	r3, [pc, #204]	; (e46c <xTaskResumeAll+0xf8>)
    e39e:	681b      	ldr	r3, [r3, #0]
    e3a0:	2b00      	cmp	r3, #0
    e3a2:	d15b      	bne.n	e45c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    e3a4:	4b33      	ldr	r3, [pc, #204]	; (e474 <xTaskResumeAll+0x100>)
    e3a6:	681b      	ldr	r3, [r3, #0]
    e3a8:	2b00      	cmp	r3, #0
    e3aa:	d057      	beq.n	e45c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    e3ac:	e02f      	b.n	e40e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    e3ae:	4b32      	ldr	r3, [pc, #200]	; (e478 <xTaskResumeAll+0x104>)
    e3b0:	68db      	ldr	r3, [r3, #12]
    e3b2:	68db      	ldr	r3, [r3, #12]
    e3b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    e3b6:	68fb      	ldr	r3, [r7, #12]
    e3b8:	3318      	adds	r3, #24
    e3ba:	0018      	movs	r0, r3
    e3bc:	4b2f      	ldr	r3, [pc, #188]	; (e47c <xTaskResumeAll+0x108>)
    e3be:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    e3c0:	68fb      	ldr	r3, [r7, #12]
    e3c2:	3304      	adds	r3, #4
    e3c4:	0018      	movs	r0, r3
    e3c6:	4b2d      	ldr	r3, [pc, #180]	; (e47c <xTaskResumeAll+0x108>)
    e3c8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    e3ca:	68fb      	ldr	r3, [r7, #12]
    e3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3ce:	4b2c      	ldr	r3, [pc, #176]	; (e480 <xTaskResumeAll+0x10c>)
    e3d0:	681b      	ldr	r3, [r3, #0]
    e3d2:	429a      	cmp	r2, r3
    e3d4:	d903      	bls.n	e3de <xTaskResumeAll+0x6a>
    e3d6:	68fb      	ldr	r3, [r7, #12]
    e3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3da:	4b29      	ldr	r3, [pc, #164]	; (e480 <xTaskResumeAll+0x10c>)
    e3dc:	601a      	str	r2, [r3, #0]
    e3de:	68fb      	ldr	r3, [r7, #12]
    e3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3e2:	0013      	movs	r3, r2
    e3e4:	009b      	lsls	r3, r3, #2
    e3e6:	189b      	adds	r3, r3, r2
    e3e8:	009b      	lsls	r3, r3, #2
    e3ea:	4a26      	ldr	r2, [pc, #152]	; (e484 <xTaskResumeAll+0x110>)
    e3ec:	189a      	adds	r2, r3, r2
    e3ee:	68fb      	ldr	r3, [r7, #12]
    e3f0:	3304      	adds	r3, #4
    e3f2:	0019      	movs	r1, r3
    e3f4:	0010      	movs	r0, r2
    e3f6:	4b24      	ldr	r3, [pc, #144]	; (e488 <xTaskResumeAll+0x114>)
    e3f8:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    e3fa:	68fb      	ldr	r3, [r7, #12]
    e3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e3fe:	4b23      	ldr	r3, [pc, #140]	; (e48c <xTaskResumeAll+0x118>)
    e400:	681b      	ldr	r3, [r3, #0]
    e402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e404:	429a      	cmp	r2, r3
    e406:	d302      	bcc.n	e40e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    e408:	4b21      	ldr	r3, [pc, #132]	; (e490 <xTaskResumeAll+0x11c>)
    e40a:	2201      	movs	r2, #1
    e40c:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    e40e:	4b1a      	ldr	r3, [pc, #104]	; (e478 <xTaskResumeAll+0x104>)
    e410:	681b      	ldr	r3, [r3, #0]
    e412:	2b00      	cmp	r3, #0
    e414:	d1cb      	bne.n	e3ae <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    e416:	68fb      	ldr	r3, [r7, #12]
    e418:	2b00      	cmp	r3, #0
    e41a:	d001      	beq.n	e420 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    e41c:	4b1d      	ldr	r3, [pc, #116]	; (e494 <xTaskResumeAll+0x120>)
    e41e:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    e420:	4b1d      	ldr	r3, [pc, #116]	; (e498 <xTaskResumeAll+0x124>)
    e422:	681b      	ldr	r3, [r3, #0]
    e424:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	2b00      	cmp	r3, #0
    e42a:	d00f      	beq.n	e44c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    e42c:	4b1b      	ldr	r3, [pc, #108]	; (e49c <xTaskResumeAll+0x128>)
    e42e:	4798      	blx	r3
    e430:	1e03      	subs	r3, r0, #0
    e432:	d002      	beq.n	e43a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    e434:	4b16      	ldr	r3, [pc, #88]	; (e490 <xTaskResumeAll+0x11c>)
    e436:	2201      	movs	r2, #1
    e438:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    e43a:	687b      	ldr	r3, [r7, #4]
    e43c:	3b01      	subs	r3, #1
    e43e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    e440:	687b      	ldr	r3, [r7, #4]
    e442:	2b00      	cmp	r3, #0
    e444:	d1f2      	bne.n	e42c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    e446:	4b14      	ldr	r3, [pc, #80]	; (e498 <xTaskResumeAll+0x124>)
    e448:	2200      	movs	r2, #0
    e44a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    e44c:	4b10      	ldr	r3, [pc, #64]	; (e490 <xTaskResumeAll+0x11c>)
    e44e:	681b      	ldr	r3, [r3, #0]
    e450:	2b00      	cmp	r3, #0
    e452:	d003      	beq.n	e45c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    e454:	2301      	movs	r3, #1
    e456:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    e458:	4b11      	ldr	r3, [pc, #68]	; (e4a0 <xTaskResumeAll+0x12c>)
    e45a:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    e45c:	4b11      	ldr	r3, [pc, #68]	; (e4a4 <xTaskResumeAll+0x130>)
    e45e:	4798      	blx	r3

	return xAlreadyYielded;
    e460:	68bb      	ldr	r3, [r7, #8]
}
    e462:	0018      	movs	r0, r3
    e464:	46bd      	mov	sp, r7
    e466:	b004      	add	sp, #16
    e468:	bd80      	pop	{r7, pc}
    e46a:	46c0      	nop			; (mov r8, r8)
    e46c:	20003e48 	.word	0x20003e48
    e470:	0000d259 	.word	0x0000d259
    e474:	20003e20 	.word	0x20003e20
    e478:	20003de0 	.word	0x20003de0
    e47c:	0000d0e1 	.word	0x0000d0e1
    e480:	20003e28 	.word	0x20003e28
    e484:	20003d4c 	.word	0x20003d4c
    e488:	0000d031 	.word	0x0000d031
    e48c:	20003d48 	.word	0x20003d48
    e490:	20003e34 	.word	0x20003e34
    e494:	0000ea89 	.word	0x0000ea89
    e498:	20003e30 	.word	0x20003e30
    e49c:	0000e4c5 	.word	0x0000e4c5
    e4a0:	0000d239 	.word	0x0000d239
    e4a4:	0000d27d 	.word	0x0000d27d

0000e4a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    e4a8:	b580      	push	{r7, lr}
    e4aa:	b082      	sub	sp, #8
    e4ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    e4ae:	4b04      	ldr	r3, [pc, #16]	; (e4c0 <xTaskGetTickCount+0x18>)
    e4b0:	681b      	ldr	r3, [r3, #0]
    e4b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    e4b4:	687b      	ldr	r3, [r7, #4]
}
    e4b6:	0018      	movs	r0, r3
    e4b8:	46bd      	mov	sp, r7
    e4ba:	b002      	add	sp, #8
    e4bc:	bd80      	pop	{r7, pc}
    e4be:	46c0      	nop			; (mov r8, r8)
    e4c0:	20003e24 	.word	0x20003e24

0000e4c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    e4c4:	b580      	push	{r7, lr}
    e4c6:	b086      	sub	sp, #24
    e4c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    e4ca:	2300      	movs	r3, #0
    e4cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    e4ce:	4b45      	ldr	r3, [pc, #276]	; (e5e4 <xTaskIncrementTick+0x120>)
    e4d0:	681b      	ldr	r3, [r3, #0]
    e4d2:	2b00      	cmp	r3, #0
    e4d4:	d000      	beq.n	e4d8 <xTaskIncrementTick+0x14>
    e4d6:	e075      	b.n	e5c4 <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    e4d8:	4b43      	ldr	r3, [pc, #268]	; (e5e8 <xTaskIncrementTick+0x124>)
    e4da:	681b      	ldr	r3, [r3, #0]
    e4dc:	3301      	adds	r3, #1
    e4de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    e4e0:	4b41      	ldr	r3, [pc, #260]	; (e5e8 <xTaskIncrementTick+0x124>)
    e4e2:	693a      	ldr	r2, [r7, #16]
    e4e4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    e4e6:	693b      	ldr	r3, [r7, #16]
    e4e8:	2b00      	cmp	r3, #0
    e4ea:	d117      	bne.n	e51c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    e4ec:	4b3f      	ldr	r3, [pc, #252]	; (e5ec <xTaskIncrementTick+0x128>)
    e4ee:	681b      	ldr	r3, [r3, #0]
    e4f0:	681b      	ldr	r3, [r3, #0]
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d001      	beq.n	e4fa <xTaskIncrementTick+0x36>
    e4f6:	b672      	cpsid	i
    e4f8:	e7fe      	b.n	e4f8 <xTaskIncrementTick+0x34>
    e4fa:	4b3c      	ldr	r3, [pc, #240]	; (e5ec <xTaskIncrementTick+0x128>)
    e4fc:	681b      	ldr	r3, [r3, #0]
    e4fe:	60fb      	str	r3, [r7, #12]
    e500:	4b3b      	ldr	r3, [pc, #236]	; (e5f0 <xTaskIncrementTick+0x12c>)
    e502:	681a      	ldr	r2, [r3, #0]
    e504:	4b39      	ldr	r3, [pc, #228]	; (e5ec <xTaskIncrementTick+0x128>)
    e506:	601a      	str	r2, [r3, #0]
    e508:	4b39      	ldr	r3, [pc, #228]	; (e5f0 <xTaskIncrementTick+0x12c>)
    e50a:	68fa      	ldr	r2, [r7, #12]
    e50c:	601a      	str	r2, [r3, #0]
    e50e:	4b39      	ldr	r3, [pc, #228]	; (e5f4 <xTaskIncrementTick+0x130>)
    e510:	681b      	ldr	r3, [r3, #0]
    e512:	1c5a      	adds	r2, r3, #1
    e514:	4b37      	ldr	r3, [pc, #220]	; (e5f4 <xTaskIncrementTick+0x130>)
    e516:	601a      	str	r2, [r3, #0]
    e518:	4b37      	ldr	r3, [pc, #220]	; (e5f8 <xTaskIncrementTick+0x134>)
    e51a:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    e51c:	4b37      	ldr	r3, [pc, #220]	; (e5fc <xTaskIncrementTick+0x138>)
    e51e:	681b      	ldr	r3, [r3, #0]
    e520:	693a      	ldr	r2, [r7, #16]
    e522:	429a      	cmp	r2, r3
    e524:	d353      	bcc.n	e5ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    e526:	4b31      	ldr	r3, [pc, #196]	; (e5ec <xTaskIncrementTick+0x128>)
    e528:	681b      	ldr	r3, [r3, #0]
    e52a:	681b      	ldr	r3, [r3, #0]
    e52c:	2b00      	cmp	r3, #0
    e52e:	d101      	bne.n	e534 <xTaskIncrementTick+0x70>
    e530:	2301      	movs	r3, #1
    e532:	e000      	b.n	e536 <xTaskIncrementTick+0x72>
    e534:	2300      	movs	r3, #0
    e536:	2b00      	cmp	r3, #0
    e538:	d004      	beq.n	e544 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    e53a:	4b30      	ldr	r3, [pc, #192]	; (e5fc <xTaskIncrementTick+0x138>)
    e53c:	2201      	movs	r2, #1
    e53e:	4252      	negs	r2, r2
    e540:	601a      	str	r2, [r3, #0]
					break;
    e542:	e044      	b.n	e5ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    e544:	4b29      	ldr	r3, [pc, #164]	; (e5ec <xTaskIncrementTick+0x128>)
    e546:	681b      	ldr	r3, [r3, #0]
    e548:	68db      	ldr	r3, [r3, #12]
    e54a:	68db      	ldr	r3, [r3, #12]
    e54c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    e54e:	68bb      	ldr	r3, [r7, #8]
    e550:	685b      	ldr	r3, [r3, #4]
    e552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    e554:	693a      	ldr	r2, [r7, #16]
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	429a      	cmp	r2, r3
    e55a:	d203      	bcs.n	e564 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    e55c:	4b27      	ldr	r3, [pc, #156]	; (e5fc <xTaskIncrementTick+0x138>)
    e55e:	687a      	ldr	r2, [r7, #4]
    e560:	601a      	str	r2, [r3, #0]
						break;
    e562:	e034      	b.n	e5ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    e564:	68bb      	ldr	r3, [r7, #8]
    e566:	3304      	adds	r3, #4
    e568:	0018      	movs	r0, r3
    e56a:	4b25      	ldr	r3, [pc, #148]	; (e600 <xTaskIncrementTick+0x13c>)
    e56c:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    e56e:	68bb      	ldr	r3, [r7, #8]
    e570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e572:	2b00      	cmp	r3, #0
    e574:	d004      	beq.n	e580 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    e576:	68bb      	ldr	r3, [r7, #8]
    e578:	3318      	adds	r3, #24
    e57a:	0018      	movs	r0, r3
    e57c:	4b20      	ldr	r3, [pc, #128]	; (e600 <xTaskIncrementTick+0x13c>)
    e57e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    e580:	68bb      	ldr	r3, [r7, #8]
    e582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e584:	4b1f      	ldr	r3, [pc, #124]	; (e604 <xTaskIncrementTick+0x140>)
    e586:	681b      	ldr	r3, [r3, #0]
    e588:	429a      	cmp	r2, r3
    e58a:	d903      	bls.n	e594 <xTaskIncrementTick+0xd0>
    e58c:	68bb      	ldr	r3, [r7, #8]
    e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e590:	4b1c      	ldr	r3, [pc, #112]	; (e604 <xTaskIncrementTick+0x140>)
    e592:	601a      	str	r2, [r3, #0]
    e594:	68bb      	ldr	r3, [r7, #8]
    e596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e598:	0013      	movs	r3, r2
    e59a:	009b      	lsls	r3, r3, #2
    e59c:	189b      	adds	r3, r3, r2
    e59e:	009b      	lsls	r3, r3, #2
    e5a0:	4a19      	ldr	r2, [pc, #100]	; (e608 <xTaskIncrementTick+0x144>)
    e5a2:	189a      	adds	r2, r3, r2
    e5a4:	68bb      	ldr	r3, [r7, #8]
    e5a6:	3304      	adds	r3, #4
    e5a8:	0019      	movs	r1, r3
    e5aa:	0010      	movs	r0, r2
    e5ac:	4b17      	ldr	r3, [pc, #92]	; (e60c <xTaskIncrementTick+0x148>)
    e5ae:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    e5b0:	68bb      	ldr	r3, [r7, #8]
    e5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e5b4:	4b16      	ldr	r3, [pc, #88]	; (e610 <xTaskIncrementTick+0x14c>)
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e5ba:	429a      	cmp	r2, r3
    e5bc:	d3b3      	bcc.n	e526 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    e5be:	2301      	movs	r3, #1
    e5c0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    e5c2:	e7b0      	b.n	e526 <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    e5c4:	4b13      	ldr	r3, [pc, #76]	; (e614 <xTaskIncrementTick+0x150>)
    e5c6:	681b      	ldr	r3, [r3, #0]
    e5c8:	1c5a      	adds	r2, r3, #1
    e5ca:	4b12      	ldr	r3, [pc, #72]	; (e614 <xTaskIncrementTick+0x150>)
    e5cc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    e5ce:	4b12      	ldr	r3, [pc, #72]	; (e618 <xTaskIncrementTick+0x154>)
    e5d0:	681b      	ldr	r3, [r3, #0]
    e5d2:	2b00      	cmp	r3, #0
    e5d4:	d001      	beq.n	e5da <xTaskIncrementTick+0x116>
		{
			xSwitchRequired = pdTRUE;
    e5d6:	2301      	movs	r3, #1
    e5d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    e5da:	697b      	ldr	r3, [r7, #20]
}
    e5dc:	0018      	movs	r0, r3
    e5de:	46bd      	mov	sp, r7
    e5e0:	b006      	add	sp, #24
    e5e2:	bd80      	pop	{r7, pc}
    e5e4:	20003e48 	.word	0x20003e48
    e5e8:	20003e24 	.word	0x20003e24
    e5ec:	20003dd8 	.word	0x20003dd8
    e5f0:	20003ddc 	.word	0x20003ddc
    e5f4:	20003e38 	.word	0x20003e38
    e5f8:	0000ea89 	.word	0x0000ea89
    e5fc:	20003e40 	.word	0x20003e40
    e600:	0000d0e1 	.word	0x0000d0e1
    e604:	20003e28 	.word	0x20003e28
    e608:	20003d4c 	.word	0x20003d4c
    e60c:	0000d031 	.word	0x0000d031
    e610:	20003d48 	.word	0x20003d48
    e614:	20003e30 	.word	0x20003e30
    e618:	20003e34 	.word	0x20003e34

0000e61c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    e61c:	b580      	push	{r7, lr}
    e61e:	b082      	sub	sp, #8
    e620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    e622:	4b2a      	ldr	r3, [pc, #168]	; (e6cc <vTaskSwitchContext+0xb0>)
    e624:	681b      	ldr	r3, [r3, #0]
    e626:	2b00      	cmp	r3, #0
    e628:	d003      	beq.n	e632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    e62a:	4b29      	ldr	r3, [pc, #164]	; (e6d0 <vTaskSwitchContext+0xb4>)
    e62c:	2201      	movs	r2, #1
    e62e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    e630:	e048      	b.n	e6c4 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    e632:	4b27      	ldr	r3, [pc, #156]	; (e6d0 <vTaskSwitchContext+0xb4>)
    e634:	2200      	movs	r2, #0
    e636:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    e638:	4b26      	ldr	r3, [pc, #152]	; (e6d4 <vTaskSwitchContext+0xb8>)
    e63a:	681b      	ldr	r3, [r3, #0]
    e63c:	681a      	ldr	r2, [r3, #0]
    e63e:	4b25      	ldr	r3, [pc, #148]	; (e6d4 <vTaskSwitchContext+0xb8>)
    e640:	681b      	ldr	r3, [r3, #0]
    e642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    e644:	429a      	cmp	r2, r3
    e646:	d808      	bhi.n	e65a <vTaskSwitchContext+0x3e>
    e648:	4b22      	ldr	r3, [pc, #136]	; (e6d4 <vTaskSwitchContext+0xb8>)
    e64a:	681a      	ldr	r2, [r3, #0]
    e64c:	4b21      	ldr	r3, [pc, #132]	; (e6d4 <vTaskSwitchContext+0xb8>)
    e64e:	681b      	ldr	r3, [r3, #0]
    e650:	3334      	adds	r3, #52	; 0x34
    e652:	0019      	movs	r1, r3
    e654:	0010      	movs	r0, r2
    e656:	4b20      	ldr	r3, [pc, #128]	; (e6d8 <vTaskSwitchContext+0xbc>)
    e658:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    e65a:	4b20      	ldr	r3, [pc, #128]	; (e6dc <vTaskSwitchContext+0xc0>)
    e65c:	681b      	ldr	r3, [r3, #0]
    e65e:	607b      	str	r3, [r7, #4]
    e660:	e007      	b.n	e672 <vTaskSwitchContext+0x56>
    e662:	687b      	ldr	r3, [r7, #4]
    e664:	2b00      	cmp	r3, #0
    e666:	d101      	bne.n	e66c <vTaskSwitchContext+0x50>
    e668:	b672      	cpsid	i
    e66a:	e7fe      	b.n	e66a <vTaskSwitchContext+0x4e>
    e66c:	687b      	ldr	r3, [r7, #4]
    e66e:	3b01      	subs	r3, #1
    e670:	607b      	str	r3, [r7, #4]
    e672:	491b      	ldr	r1, [pc, #108]	; (e6e0 <vTaskSwitchContext+0xc4>)
    e674:	687a      	ldr	r2, [r7, #4]
    e676:	0013      	movs	r3, r2
    e678:	009b      	lsls	r3, r3, #2
    e67a:	189b      	adds	r3, r3, r2
    e67c:	009b      	lsls	r3, r3, #2
    e67e:	585b      	ldr	r3, [r3, r1]
    e680:	2b00      	cmp	r3, #0
    e682:	d0ee      	beq.n	e662 <vTaskSwitchContext+0x46>
    e684:	687a      	ldr	r2, [r7, #4]
    e686:	0013      	movs	r3, r2
    e688:	009b      	lsls	r3, r3, #2
    e68a:	189b      	adds	r3, r3, r2
    e68c:	009b      	lsls	r3, r3, #2
    e68e:	4a14      	ldr	r2, [pc, #80]	; (e6e0 <vTaskSwitchContext+0xc4>)
    e690:	189b      	adds	r3, r3, r2
    e692:	603b      	str	r3, [r7, #0]
    e694:	683b      	ldr	r3, [r7, #0]
    e696:	685b      	ldr	r3, [r3, #4]
    e698:	685a      	ldr	r2, [r3, #4]
    e69a:	683b      	ldr	r3, [r7, #0]
    e69c:	605a      	str	r2, [r3, #4]
    e69e:	683b      	ldr	r3, [r7, #0]
    e6a0:	685a      	ldr	r2, [r3, #4]
    e6a2:	683b      	ldr	r3, [r7, #0]
    e6a4:	3308      	adds	r3, #8
    e6a6:	429a      	cmp	r2, r3
    e6a8:	d104      	bne.n	e6b4 <vTaskSwitchContext+0x98>
    e6aa:	683b      	ldr	r3, [r7, #0]
    e6ac:	685b      	ldr	r3, [r3, #4]
    e6ae:	685a      	ldr	r2, [r3, #4]
    e6b0:	683b      	ldr	r3, [r7, #0]
    e6b2:	605a      	str	r2, [r3, #4]
    e6b4:	683b      	ldr	r3, [r7, #0]
    e6b6:	685b      	ldr	r3, [r3, #4]
    e6b8:	68da      	ldr	r2, [r3, #12]
    e6ba:	4b06      	ldr	r3, [pc, #24]	; (e6d4 <vTaskSwitchContext+0xb8>)
    e6bc:	601a      	str	r2, [r3, #0]
    e6be:	4b07      	ldr	r3, [pc, #28]	; (e6dc <vTaskSwitchContext+0xc0>)
    e6c0:	687a      	ldr	r2, [r7, #4]
    e6c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    e6c4:	46c0      	nop			; (mov r8, r8)
    e6c6:	46bd      	mov	sp, r7
    e6c8:	b002      	add	sp, #8
    e6ca:	bd80      	pop	{r7, pc}
    e6cc:	20003e48 	.word	0x20003e48
    e6d0:	20003e34 	.word	0x20003e34
    e6d4:	20003d48 	.word	0x20003d48
    e6d8:	0000f8f5 	.word	0x0000f8f5
    e6dc:	20003e28 	.word	0x20003e28
    e6e0:	20003d4c 	.word	0x20003d4c

0000e6e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    e6e4:	b580      	push	{r7, lr}
    e6e6:	b082      	sub	sp, #8
    e6e8:	af00      	add	r7, sp, #0
    e6ea:	6078      	str	r0, [r7, #4]
    e6ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    e6ee:	687b      	ldr	r3, [r7, #4]
    e6f0:	2b00      	cmp	r3, #0
    e6f2:	d101      	bne.n	e6f8 <vTaskPlaceOnEventList+0x14>
    e6f4:	b672      	cpsid	i
    e6f6:	e7fe      	b.n	e6f6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    e6f8:	4b08      	ldr	r3, [pc, #32]	; (e71c <vTaskPlaceOnEventList+0x38>)
    e6fa:	681b      	ldr	r3, [r3, #0]
    e6fc:	3318      	adds	r3, #24
    e6fe:	001a      	movs	r2, r3
    e700:	687b      	ldr	r3, [r7, #4]
    e702:	0011      	movs	r1, r2
    e704:	0018      	movs	r0, r3
    e706:	4b06      	ldr	r3, [pc, #24]	; (e720 <vTaskPlaceOnEventList+0x3c>)
    e708:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    e70a:	683b      	ldr	r3, [r7, #0]
    e70c:	2101      	movs	r1, #1
    e70e:	0018      	movs	r0, r3
    e710:	4b04      	ldr	r3, [pc, #16]	; (e724 <vTaskPlaceOnEventList+0x40>)
    e712:	4798      	blx	r3
}
    e714:	46c0      	nop			; (mov r8, r8)
    e716:	46bd      	mov	sp, r7
    e718:	b002      	add	sp, #8
    e71a:	bd80      	pop	{r7, pc}
    e71c:	20003d48 	.word	0x20003d48
    e720:	0000d075 	.word	0x0000d075
    e724:	0000ecb1 	.word	0x0000ecb1

0000e728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    e728:	b580      	push	{r7, lr}
    e72a:	b084      	sub	sp, #16
    e72c:	af00      	add	r7, sp, #0
    e72e:	60f8      	str	r0, [r7, #12]
    e730:	60b9      	str	r1, [r7, #8]
    e732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    e734:	68fb      	ldr	r3, [r7, #12]
    e736:	2b00      	cmp	r3, #0
    e738:	d101      	bne.n	e73e <vTaskPlaceOnEventListRestricted+0x16>
    e73a:	b672      	cpsid	i
    e73c:	e7fe      	b.n	e73c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    e73e:	4b0c      	ldr	r3, [pc, #48]	; (e770 <vTaskPlaceOnEventListRestricted+0x48>)
    e740:	681b      	ldr	r3, [r3, #0]
    e742:	3318      	adds	r3, #24
    e744:	001a      	movs	r2, r3
    e746:	68fb      	ldr	r3, [r7, #12]
    e748:	0011      	movs	r1, r2
    e74a:	0018      	movs	r0, r3
    e74c:	4b09      	ldr	r3, [pc, #36]	; (e774 <vTaskPlaceOnEventListRestricted+0x4c>)
    e74e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    e750:	687b      	ldr	r3, [r7, #4]
    e752:	2b00      	cmp	r3, #0
    e754:	d002      	beq.n	e75c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    e756:	2301      	movs	r3, #1
    e758:	425b      	negs	r3, r3
    e75a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    e75c:	687a      	ldr	r2, [r7, #4]
    e75e:	68bb      	ldr	r3, [r7, #8]
    e760:	0011      	movs	r1, r2
    e762:	0018      	movs	r0, r3
    e764:	4b04      	ldr	r3, [pc, #16]	; (e778 <vTaskPlaceOnEventListRestricted+0x50>)
    e766:	4798      	blx	r3
	}
    e768:	46c0      	nop			; (mov r8, r8)
    e76a:	46bd      	mov	sp, r7
    e76c:	b004      	add	sp, #16
    e76e:	bd80      	pop	{r7, pc}
    e770:	20003d48 	.word	0x20003d48
    e774:	0000d031 	.word	0x0000d031
    e778:	0000ecb1 	.word	0x0000ecb1

0000e77c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    e77c:	b580      	push	{r7, lr}
    e77e:	b084      	sub	sp, #16
    e780:	af00      	add	r7, sp, #0
    e782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    e784:	687b      	ldr	r3, [r7, #4]
    e786:	68db      	ldr	r3, [r3, #12]
    e788:	68db      	ldr	r3, [r3, #12]
    e78a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    e78c:	68bb      	ldr	r3, [r7, #8]
    e78e:	2b00      	cmp	r3, #0
    e790:	d101      	bne.n	e796 <xTaskRemoveFromEventList+0x1a>
    e792:	b672      	cpsid	i
    e794:	e7fe      	b.n	e794 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    e796:	68bb      	ldr	r3, [r7, #8]
    e798:	3318      	adds	r3, #24
    e79a:	0018      	movs	r0, r3
    e79c:	4b1f      	ldr	r3, [pc, #124]	; (e81c <xTaskRemoveFromEventList+0xa0>)
    e79e:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    e7a0:	4b1f      	ldr	r3, [pc, #124]	; (e820 <xTaskRemoveFromEventList+0xa4>)
    e7a2:	681b      	ldr	r3, [r3, #0]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d11d      	bne.n	e7e4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    e7a8:	68bb      	ldr	r3, [r7, #8]
    e7aa:	3304      	adds	r3, #4
    e7ac:	0018      	movs	r0, r3
    e7ae:	4b1b      	ldr	r3, [pc, #108]	; (e81c <xTaskRemoveFromEventList+0xa0>)
    e7b0:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    e7b2:	68bb      	ldr	r3, [r7, #8]
    e7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e7b6:	4b1b      	ldr	r3, [pc, #108]	; (e824 <xTaskRemoveFromEventList+0xa8>)
    e7b8:	681b      	ldr	r3, [r3, #0]
    e7ba:	429a      	cmp	r2, r3
    e7bc:	d903      	bls.n	e7c6 <xTaskRemoveFromEventList+0x4a>
    e7be:	68bb      	ldr	r3, [r7, #8]
    e7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e7c2:	4b18      	ldr	r3, [pc, #96]	; (e824 <xTaskRemoveFromEventList+0xa8>)
    e7c4:	601a      	str	r2, [r3, #0]
    e7c6:	68bb      	ldr	r3, [r7, #8]
    e7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e7ca:	0013      	movs	r3, r2
    e7cc:	009b      	lsls	r3, r3, #2
    e7ce:	189b      	adds	r3, r3, r2
    e7d0:	009b      	lsls	r3, r3, #2
    e7d2:	4a15      	ldr	r2, [pc, #84]	; (e828 <xTaskRemoveFromEventList+0xac>)
    e7d4:	189a      	adds	r2, r3, r2
    e7d6:	68bb      	ldr	r3, [r7, #8]
    e7d8:	3304      	adds	r3, #4
    e7da:	0019      	movs	r1, r3
    e7dc:	0010      	movs	r0, r2
    e7de:	4b13      	ldr	r3, [pc, #76]	; (e82c <xTaskRemoveFromEventList+0xb0>)
    e7e0:	4798      	blx	r3
    e7e2:	e007      	b.n	e7f4 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    e7e4:	68bb      	ldr	r3, [r7, #8]
    e7e6:	3318      	adds	r3, #24
    e7e8:	001a      	movs	r2, r3
    e7ea:	4b11      	ldr	r3, [pc, #68]	; (e830 <xTaskRemoveFromEventList+0xb4>)
    e7ec:	0011      	movs	r1, r2
    e7ee:	0018      	movs	r0, r3
    e7f0:	4b0e      	ldr	r3, [pc, #56]	; (e82c <xTaskRemoveFromEventList+0xb0>)
    e7f2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    e7f4:	68bb      	ldr	r3, [r7, #8]
    e7f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    e7f8:	4b0e      	ldr	r3, [pc, #56]	; (e834 <xTaskRemoveFromEventList+0xb8>)
    e7fa:	681b      	ldr	r3, [r3, #0]
    e7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e7fe:	429a      	cmp	r2, r3
    e800:	d905      	bls.n	e80e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    e802:	2301      	movs	r3, #1
    e804:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    e806:	4b0c      	ldr	r3, [pc, #48]	; (e838 <xTaskRemoveFromEventList+0xbc>)
    e808:	2201      	movs	r2, #1
    e80a:	601a      	str	r2, [r3, #0]
    e80c:	e001      	b.n	e812 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    e80e:	2300      	movs	r3, #0
    e810:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    e812:	68fb      	ldr	r3, [r7, #12]
}
    e814:	0018      	movs	r0, r3
    e816:	46bd      	mov	sp, r7
    e818:	b004      	add	sp, #16
    e81a:	bd80      	pop	{r7, pc}
    e81c:	0000d0e1 	.word	0x0000d0e1
    e820:	20003e48 	.word	0x20003e48
    e824:	20003e28 	.word	0x20003e28
    e828:	20003d4c 	.word	0x20003d4c
    e82c:	0000d031 	.word	0x0000d031
    e830:	20003de0 	.word	0x20003de0
    e834:	20003d48 	.word	0x20003d48
    e838:	20003e34 	.word	0x20003e34

0000e83c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    e83c:	b580      	push	{r7, lr}
    e83e:	b082      	sub	sp, #8
    e840:	af00      	add	r7, sp, #0
    e842:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    e844:	687b      	ldr	r3, [r7, #4]
    e846:	2b00      	cmp	r3, #0
    e848:	d101      	bne.n	e84e <vTaskSetTimeOutState+0x12>
    e84a:	b672      	cpsid	i
    e84c:	e7fe      	b.n	e84c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    e84e:	4b06      	ldr	r3, [pc, #24]	; (e868 <vTaskSetTimeOutState+0x2c>)
    e850:	681a      	ldr	r2, [r3, #0]
    e852:	687b      	ldr	r3, [r7, #4]
    e854:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    e856:	4b05      	ldr	r3, [pc, #20]	; (e86c <vTaskSetTimeOutState+0x30>)
    e858:	681a      	ldr	r2, [r3, #0]
    e85a:	687b      	ldr	r3, [r7, #4]
    e85c:	605a      	str	r2, [r3, #4]
}
    e85e:	46c0      	nop			; (mov r8, r8)
    e860:	46bd      	mov	sp, r7
    e862:	b002      	add	sp, #8
    e864:	bd80      	pop	{r7, pc}
    e866:	46c0      	nop			; (mov r8, r8)
    e868:	20003e38 	.word	0x20003e38
    e86c:	20003e24 	.word	0x20003e24

0000e870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    e870:	b580      	push	{r7, lr}
    e872:	b084      	sub	sp, #16
    e874:	af00      	add	r7, sp, #0
    e876:	6078      	str	r0, [r7, #4]
    e878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    e87a:	687b      	ldr	r3, [r7, #4]
    e87c:	2b00      	cmp	r3, #0
    e87e:	d101      	bne.n	e884 <xTaskCheckForTimeOut+0x14>
    e880:	b672      	cpsid	i
    e882:	e7fe      	b.n	e882 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    e884:	683b      	ldr	r3, [r7, #0]
    e886:	2b00      	cmp	r3, #0
    e888:	d101      	bne.n	e88e <xTaskCheckForTimeOut+0x1e>
    e88a:	b672      	cpsid	i
    e88c:	e7fe      	b.n	e88c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    e88e:	4b1d      	ldr	r3, [pc, #116]	; (e904 <xTaskCheckForTimeOut+0x94>)
    e890:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    e892:	4b1d      	ldr	r3, [pc, #116]	; (e908 <xTaskCheckForTimeOut+0x98>)
    e894:	681b      	ldr	r3, [r3, #0]
    e896:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    e898:	683b      	ldr	r3, [r7, #0]
    e89a:	681b      	ldr	r3, [r3, #0]
    e89c:	3301      	adds	r3, #1
    e89e:	d102      	bne.n	e8a6 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    e8a0:	2300      	movs	r3, #0
    e8a2:	60fb      	str	r3, [r7, #12]
    e8a4:	e027      	b.n	e8f6 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    e8a6:	687b      	ldr	r3, [r7, #4]
    e8a8:	681a      	ldr	r2, [r3, #0]
    e8aa:	4b18      	ldr	r3, [pc, #96]	; (e90c <xTaskCheckForTimeOut+0x9c>)
    e8ac:	681b      	ldr	r3, [r3, #0]
    e8ae:	429a      	cmp	r2, r3
    e8b0:	d007      	beq.n	e8c2 <xTaskCheckForTimeOut+0x52>
    e8b2:	687b      	ldr	r3, [r7, #4]
    e8b4:	685a      	ldr	r2, [r3, #4]
    e8b6:	68bb      	ldr	r3, [r7, #8]
    e8b8:	429a      	cmp	r2, r3
    e8ba:	d802      	bhi.n	e8c2 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    e8bc:	2301      	movs	r3, #1
    e8be:	60fb      	str	r3, [r7, #12]
    e8c0:	e019      	b.n	e8f6 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    e8c2:	687b      	ldr	r3, [r7, #4]
    e8c4:	685b      	ldr	r3, [r3, #4]
    e8c6:	68ba      	ldr	r2, [r7, #8]
    e8c8:	1ad2      	subs	r2, r2, r3
    e8ca:	683b      	ldr	r3, [r7, #0]
    e8cc:	681b      	ldr	r3, [r3, #0]
    e8ce:	429a      	cmp	r2, r3
    e8d0:	d20f      	bcs.n	e8f2 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    e8d2:	683b      	ldr	r3, [r7, #0]
    e8d4:	681a      	ldr	r2, [r3, #0]
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	6859      	ldr	r1, [r3, #4]
    e8da:	68bb      	ldr	r3, [r7, #8]
    e8dc:	1acb      	subs	r3, r1, r3
    e8de:	18d2      	adds	r2, r2, r3
    e8e0:	683b      	ldr	r3, [r7, #0]
    e8e2:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	0018      	movs	r0, r3
    e8e8:	4b09      	ldr	r3, [pc, #36]	; (e910 <xTaskCheckForTimeOut+0xa0>)
    e8ea:	4798      	blx	r3
			xReturn = pdFALSE;
    e8ec:	2300      	movs	r3, #0
    e8ee:	60fb      	str	r3, [r7, #12]
    e8f0:	e001      	b.n	e8f6 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    e8f2:	2301      	movs	r3, #1
    e8f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    e8f6:	4b07      	ldr	r3, [pc, #28]	; (e914 <xTaskCheckForTimeOut+0xa4>)
    e8f8:	4798      	blx	r3

	return xReturn;
    e8fa:	68fb      	ldr	r3, [r7, #12]
}
    e8fc:	0018      	movs	r0, r3
    e8fe:	46bd      	mov	sp, r7
    e900:	b004      	add	sp, #16
    e902:	bd80      	pop	{r7, pc}
    e904:	0000d259 	.word	0x0000d259
    e908:	20003e24 	.word	0x20003e24
    e90c:	20003e38 	.word	0x20003e38
    e910:	0000e83d 	.word	0x0000e83d
    e914:	0000d27d 	.word	0x0000d27d

0000e918 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    e918:	b580      	push	{r7, lr}
    e91a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    e91c:	4b02      	ldr	r3, [pc, #8]	; (e928 <vTaskMissedYield+0x10>)
    e91e:	2201      	movs	r2, #1
    e920:	601a      	str	r2, [r3, #0]
}
    e922:	46c0      	nop			; (mov r8, r8)
    e924:	46bd      	mov	sp, r7
    e926:	bd80      	pop	{r7, pc}
    e928:	20003e34 	.word	0x20003e34

0000e92c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    e92c:	b580      	push	{r7, lr}
    e92e:	b082      	sub	sp, #8
    e930:	af00      	add	r7, sp, #0
    e932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    e934:	4b02      	ldr	r3, [pc, #8]	; (e940 <prvIdleTask+0x14>)
    e936:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    e938:	4b02      	ldr	r3, [pc, #8]	; (e944 <prvIdleTask+0x18>)
    e93a:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    e93c:	e7fa      	b.n	e934 <prvIdleTask+0x8>
    e93e:	46c0      	nop			; (mov r8, r8)
    e940:	0000e9d5 	.word	0x0000e9d5
    e944:	0000f8d9 	.word	0x0000f8d9

0000e948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    e948:	b580      	push	{r7, lr}
    e94a:	b082      	sub	sp, #8
    e94c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    e94e:	2300      	movs	r3, #0
    e950:	607b      	str	r3, [r7, #4]
    e952:	e00c      	b.n	e96e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    e954:	687a      	ldr	r2, [r7, #4]
    e956:	0013      	movs	r3, r2
    e958:	009b      	lsls	r3, r3, #2
    e95a:	189b      	adds	r3, r3, r2
    e95c:	009b      	lsls	r3, r3, #2
    e95e:	4a14      	ldr	r2, [pc, #80]	; (e9b0 <prvInitialiseTaskLists+0x68>)
    e960:	189b      	adds	r3, r3, r2
    e962:	0018      	movs	r0, r3
    e964:	4b13      	ldr	r3, [pc, #76]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e966:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    e968:	687b      	ldr	r3, [r7, #4]
    e96a:	3301      	adds	r3, #1
    e96c:	607b      	str	r3, [r7, #4]
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	2b04      	cmp	r3, #4
    e972:	d9ef      	bls.n	e954 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    e974:	4b10      	ldr	r3, [pc, #64]	; (e9b8 <prvInitialiseTaskLists+0x70>)
    e976:	0018      	movs	r0, r3
    e978:	4b0e      	ldr	r3, [pc, #56]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e97a:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    e97c:	4b0f      	ldr	r3, [pc, #60]	; (e9bc <prvInitialiseTaskLists+0x74>)
    e97e:	0018      	movs	r0, r3
    e980:	4b0c      	ldr	r3, [pc, #48]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e982:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    e984:	4b0e      	ldr	r3, [pc, #56]	; (e9c0 <prvInitialiseTaskLists+0x78>)
    e986:	0018      	movs	r0, r3
    e988:	4b0a      	ldr	r3, [pc, #40]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e98a:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    e98c:	4b0d      	ldr	r3, [pc, #52]	; (e9c4 <prvInitialiseTaskLists+0x7c>)
    e98e:	0018      	movs	r0, r3
    e990:	4b08      	ldr	r3, [pc, #32]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e992:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    e994:	4b0c      	ldr	r3, [pc, #48]	; (e9c8 <prvInitialiseTaskLists+0x80>)
    e996:	0018      	movs	r0, r3
    e998:	4b06      	ldr	r3, [pc, #24]	; (e9b4 <prvInitialiseTaskLists+0x6c>)
    e99a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    e99c:	4b0b      	ldr	r3, [pc, #44]	; (e9cc <prvInitialiseTaskLists+0x84>)
    e99e:	4a06      	ldr	r2, [pc, #24]	; (e9b8 <prvInitialiseTaskLists+0x70>)
    e9a0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    e9a2:	4b0b      	ldr	r3, [pc, #44]	; (e9d0 <prvInitialiseTaskLists+0x88>)
    e9a4:	4a05      	ldr	r2, [pc, #20]	; (e9bc <prvInitialiseTaskLists+0x74>)
    e9a6:	601a      	str	r2, [r3, #0]
}
    e9a8:	46c0      	nop			; (mov r8, r8)
    e9aa:	46bd      	mov	sp, r7
    e9ac:	b002      	add	sp, #8
    e9ae:	bd80      	pop	{r7, pc}
    e9b0:	20003d4c 	.word	0x20003d4c
    e9b4:	0000cfdd 	.word	0x0000cfdd
    e9b8:	20003db0 	.word	0x20003db0
    e9bc:	20003dc4 	.word	0x20003dc4
    e9c0:	20003de0 	.word	0x20003de0
    e9c4:	20003df4 	.word	0x20003df4
    e9c8:	20003e0c 	.word	0x20003e0c
    e9cc:	20003dd8 	.word	0x20003dd8
    e9d0:	20003ddc 	.word	0x20003ddc

0000e9d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    e9d4:	b580      	push	{r7, lr}
    e9d6:	b082      	sub	sp, #8
    e9d8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    e9da:	e027      	b.n	ea2c <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    e9dc:	4b17      	ldr	r3, [pc, #92]	; (ea3c <prvCheckTasksWaitingTermination+0x68>)
    e9de:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    e9e0:	4b17      	ldr	r3, [pc, #92]	; (ea40 <prvCheckTasksWaitingTermination+0x6c>)
    e9e2:	681b      	ldr	r3, [r3, #0]
    e9e4:	425a      	negs	r2, r3
    e9e6:	4153      	adcs	r3, r2
    e9e8:	b2db      	uxtb	r3, r3
    e9ea:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    e9ec:	4b15      	ldr	r3, [pc, #84]	; (ea44 <prvCheckTasksWaitingTermination+0x70>)
    e9ee:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	2b00      	cmp	r3, #0
    e9f4:	d11a      	bne.n	ea2c <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    e9f6:	4b14      	ldr	r3, [pc, #80]	; (ea48 <prvCheckTasksWaitingTermination+0x74>)
    e9f8:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    e9fa:	4b11      	ldr	r3, [pc, #68]	; (ea40 <prvCheckTasksWaitingTermination+0x6c>)
    e9fc:	68db      	ldr	r3, [r3, #12]
    e9fe:	68db      	ldr	r3, [r3, #12]
    ea00:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ea02:	683b      	ldr	r3, [r7, #0]
    ea04:	3304      	adds	r3, #4
    ea06:	0018      	movs	r0, r3
    ea08:	4b10      	ldr	r3, [pc, #64]	; (ea4c <prvCheckTasksWaitingTermination+0x78>)
    ea0a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    ea0c:	4b10      	ldr	r3, [pc, #64]	; (ea50 <prvCheckTasksWaitingTermination+0x7c>)
    ea0e:	681b      	ldr	r3, [r3, #0]
    ea10:	1e5a      	subs	r2, r3, #1
    ea12:	4b0f      	ldr	r3, [pc, #60]	; (ea50 <prvCheckTasksWaitingTermination+0x7c>)
    ea14:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    ea16:	4b0f      	ldr	r3, [pc, #60]	; (ea54 <prvCheckTasksWaitingTermination+0x80>)
    ea18:	681b      	ldr	r3, [r3, #0]
    ea1a:	1e5a      	subs	r2, r3, #1
    ea1c:	4b0d      	ldr	r3, [pc, #52]	; (ea54 <prvCheckTasksWaitingTermination+0x80>)
    ea1e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    ea20:	4b0d      	ldr	r3, [pc, #52]	; (ea58 <prvCheckTasksWaitingTermination+0x84>)
    ea22:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    ea24:	683b      	ldr	r3, [r7, #0]
    ea26:	0018      	movs	r0, r3
    ea28:	4b0c      	ldr	r3, [pc, #48]	; (ea5c <prvCheckTasksWaitingTermination+0x88>)
    ea2a:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    ea2c:	4b09      	ldr	r3, [pc, #36]	; (ea54 <prvCheckTasksWaitingTermination+0x80>)
    ea2e:	681b      	ldr	r3, [r3, #0]
    ea30:	2b00      	cmp	r3, #0
    ea32:	d1d3      	bne.n	e9dc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    ea34:	46c0      	nop			; (mov r8, r8)
    ea36:	46bd      	mov	sp, r7
    ea38:	b002      	add	sp, #8
    ea3a:	bd80      	pop	{r7, pc}
    ea3c:	0000e35d 	.word	0x0000e35d
    ea40:	20003df4 	.word	0x20003df4
    ea44:	0000e375 	.word	0x0000e375
    ea48:	0000d259 	.word	0x0000d259
    ea4c:	0000d0e1 	.word	0x0000d0e1
    ea50:	20003e20 	.word	0x20003e20
    ea54:	20003e08 	.word	0x20003e08
    ea58:	0000d27d 	.word	0x0000d27d
    ea5c:	0000ea61 	.word	0x0000ea61

0000ea60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    ea60:	b580      	push	{r7, lr}
    ea62:	b082      	sub	sp, #8
    ea64:	af00      	add	r7, sp, #0
    ea66:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    ea68:	687b      	ldr	r3, [r7, #4]
    ea6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ea6c:	0018      	movs	r0, r3
    ea6e:	4b05      	ldr	r3, [pc, #20]	; (ea84 <prvDeleteTCB+0x24>)
    ea70:	4798      	blx	r3
			vPortFree( pxTCB );
    ea72:	687b      	ldr	r3, [r7, #4]
    ea74:	0018      	movs	r0, r3
    ea76:	4b03      	ldr	r3, [pc, #12]	; (ea84 <prvDeleteTCB+0x24>)
    ea78:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    ea7a:	46c0      	nop			; (mov r8, r8)
    ea7c:	46bd      	mov	sp, r7
    ea7e:	b002      	add	sp, #8
    ea80:	bd80      	pop	{r7, pc}
    ea82:	46c0      	nop			; (mov r8, r8)
    ea84:	0000d40d 	.word	0x0000d40d

0000ea88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    ea88:	b580      	push	{r7, lr}
    ea8a:	b082      	sub	sp, #8
    ea8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    ea8e:	4b0e      	ldr	r3, [pc, #56]	; (eac8 <prvResetNextTaskUnblockTime+0x40>)
    ea90:	681b      	ldr	r3, [r3, #0]
    ea92:	681b      	ldr	r3, [r3, #0]
    ea94:	2b00      	cmp	r3, #0
    ea96:	d101      	bne.n	ea9c <prvResetNextTaskUnblockTime+0x14>
    ea98:	2301      	movs	r3, #1
    ea9a:	e000      	b.n	ea9e <prvResetNextTaskUnblockTime+0x16>
    ea9c:	2300      	movs	r3, #0
    ea9e:	2b00      	cmp	r3, #0
    eaa0:	d004      	beq.n	eaac <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    eaa2:	4b0a      	ldr	r3, [pc, #40]	; (eacc <prvResetNextTaskUnblockTime+0x44>)
    eaa4:	2201      	movs	r2, #1
    eaa6:	4252      	negs	r2, r2
    eaa8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    eaaa:	e008      	b.n	eabe <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    eaac:	4b06      	ldr	r3, [pc, #24]	; (eac8 <prvResetNextTaskUnblockTime+0x40>)
    eaae:	681b      	ldr	r3, [r3, #0]
    eab0:	68db      	ldr	r3, [r3, #12]
    eab2:	68db      	ldr	r3, [r3, #12]
    eab4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    eab6:	687b      	ldr	r3, [r7, #4]
    eab8:	685a      	ldr	r2, [r3, #4]
    eaba:	4b04      	ldr	r3, [pc, #16]	; (eacc <prvResetNextTaskUnblockTime+0x44>)
    eabc:	601a      	str	r2, [r3, #0]
	}
}
    eabe:	46c0      	nop			; (mov r8, r8)
    eac0:	46bd      	mov	sp, r7
    eac2:	b002      	add	sp, #8
    eac4:	bd80      	pop	{r7, pc}
    eac6:	46c0      	nop			; (mov r8, r8)
    eac8:	20003dd8 	.word	0x20003dd8
    eacc:	20003e40 	.word	0x20003e40

0000ead0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    ead0:	b580      	push	{r7, lr}
    ead2:	b082      	sub	sp, #8
    ead4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    ead6:	4b0a      	ldr	r3, [pc, #40]	; (eb00 <xTaskGetSchedulerState+0x30>)
    ead8:	681b      	ldr	r3, [r3, #0]
    eada:	2b00      	cmp	r3, #0
    eadc:	d102      	bne.n	eae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    eade:	2301      	movs	r3, #1
    eae0:	607b      	str	r3, [r7, #4]
    eae2:	e008      	b.n	eaf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    eae4:	4b07      	ldr	r3, [pc, #28]	; (eb04 <xTaskGetSchedulerState+0x34>)
    eae6:	681b      	ldr	r3, [r3, #0]
    eae8:	2b00      	cmp	r3, #0
    eaea:	d102      	bne.n	eaf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    eaec:	2302      	movs	r3, #2
    eaee:	607b      	str	r3, [r7, #4]
    eaf0:	e001      	b.n	eaf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    eaf2:	2300      	movs	r3, #0
    eaf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    eaf6:	687b      	ldr	r3, [r7, #4]
	}
    eaf8:	0018      	movs	r0, r3
    eafa:	46bd      	mov	sp, r7
    eafc:	b002      	add	sp, #8
    eafe:	bd80      	pop	{r7, pc}
    eb00:	20003e2c 	.word	0x20003e2c
    eb04:	20003e48 	.word	0x20003e48

0000eb08 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    eb08:	b580      	push	{r7, lr}
    eb0a:	b084      	sub	sp, #16
    eb0c:	af00      	add	r7, sp, #0
    eb0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    eb10:	687b      	ldr	r3, [r7, #4]
    eb12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    eb14:	687b      	ldr	r3, [r7, #4]
    eb16:	2b00      	cmp	r3, #0
    eb18:	d04a      	beq.n	ebb0 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    eb1a:	68fb      	ldr	r3, [r7, #12]
    eb1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb1e:	4b26      	ldr	r3, [pc, #152]	; (ebb8 <vTaskPriorityInherit+0xb0>)
    eb20:	681b      	ldr	r3, [r3, #0]
    eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eb24:	429a      	cmp	r2, r3
    eb26:	d243      	bcs.n	ebb0 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    eb28:	68fb      	ldr	r3, [r7, #12]
    eb2a:	699b      	ldr	r3, [r3, #24]
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	db06      	blt.n	eb3e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    eb30:	4b21      	ldr	r3, [pc, #132]	; (ebb8 <vTaskPriorityInherit+0xb0>)
    eb32:	681b      	ldr	r3, [r3, #0]
    eb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    eb36:	2205      	movs	r2, #5
    eb38:	1ad2      	subs	r2, r2, r3
    eb3a:	68fb      	ldr	r3, [r7, #12]
    eb3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	6959      	ldr	r1, [r3, #20]
    eb42:	68fb      	ldr	r3, [r7, #12]
    eb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb46:	0013      	movs	r3, r2
    eb48:	009b      	lsls	r3, r3, #2
    eb4a:	189b      	adds	r3, r3, r2
    eb4c:	009b      	lsls	r3, r3, #2
    eb4e:	4a1b      	ldr	r2, [pc, #108]	; (ebbc <vTaskPriorityInherit+0xb4>)
    eb50:	189b      	adds	r3, r3, r2
    eb52:	4299      	cmp	r1, r3
    eb54:	d101      	bne.n	eb5a <vTaskPriorityInherit+0x52>
    eb56:	2301      	movs	r3, #1
    eb58:	e000      	b.n	eb5c <vTaskPriorityInherit+0x54>
    eb5a:	2300      	movs	r3, #0
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d022      	beq.n	eba6 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    eb60:	68fb      	ldr	r3, [r7, #12]
    eb62:	3304      	adds	r3, #4
    eb64:	0018      	movs	r0, r3
    eb66:	4b16      	ldr	r3, [pc, #88]	; (ebc0 <vTaskPriorityInherit+0xb8>)
    eb68:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    eb6a:	4b13      	ldr	r3, [pc, #76]	; (ebb8 <vTaskPriorityInherit+0xb0>)
    eb6c:	681b      	ldr	r3, [r3, #0]
    eb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb70:	68fb      	ldr	r3, [r7, #12]
    eb72:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    eb74:	68fb      	ldr	r3, [r7, #12]
    eb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb78:	4b12      	ldr	r3, [pc, #72]	; (ebc4 <vTaskPriorityInherit+0xbc>)
    eb7a:	681b      	ldr	r3, [r3, #0]
    eb7c:	429a      	cmp	r2, r3
    eb7e:	d903      	bls.n	eb88 <vTaskPriorityInherit+0x80>
    eb80:	68fb      	ldr	r3, [r7, #12]
    eb82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb84:	4b0f      	ldr	r3, [pc, #60]	; (ebc4 <vTaskPriorityInherit+0xbc>)
    eb86:	601a      	str	r2, [r3, #0]
    eb88:	68fb      	ldr	r3, [r7, #12]
    eb8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    eb8c:	0013      	movs	r3, r2
    eb8e:	009b      	lsls	r3, r3, #2
    eb90:	189b      	adds	r3, r3, r2
    eb92:	009b      	lsls	r3, r3, #2
    eb94:	4a09      	ldr	r2, [pc, #36]	; (ebbc <vTaskPriorityInherit+0xb4>)
    eb96:	189a      	adds	r2, r3, r2
    eb98:	68fb      	ldr	r3, [r7, #12]
    eb9a:	3304      	adds	r3, #4
    eb9c:	0019      	movs	r1, r3
    eb9e:	0010      	movs	r0, r2
    eba0:	4b09      	ldr	r3, [pc, #36]	; (ebc8 <vTaskPriorityInherit+0xc0>)
    eba2:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    eba4:	e004      	b.n	ebb0 <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    eba6:	4b04      	ldr	r3, [pc, #16]	; (ebb8 <vTaskPriorityInherit+0xb0>)
    eba8:	681b      	ldr	r3, [r3, #0]
    ebaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ebac:	68fb      	ldr	r3, [r7, #12]
    ebae:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ebb0:	46c0      	nop			; (mov r8, r8)
    ebb2:	46bd      	mov	sp, r7
    ebb4:	b004      	add	sp, #16
    ebb6:	bd80      	pop	{r7, pc}
    ebb8:	20003d48 	.word	0x20003d48
    ebbc:	20003d4c 	.word	0x20003d4c
    ebc0:	0000d0e1 	.word	0x0000d0e1
    ebc4:	20003e28 	.word	0x20003e28
    ebc8:	0000d031 	.word	0x0000d031

0000ebcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    ebcc:	b580      	push	{r7, lr}
    ebce:	b084      	sub	sp, #16
    ebd0:	af00      	add	r7, sp, #0
    ebd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    ebd4:	687b      	ldr	r3, [r7, #4]
    ebd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    ebd8:	2300      	movs	r3, #0
    ebda:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    ebdc:	687b      	ldr	r3, [r7, #4]
    ebde:	2b00      	cmp	r3, #0
    ebe0:	d044      	beq.n	ec6c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    ebe2:	4b25      	ldr	r3, [pc, #148]	; (ec78 <xTaskPriorityDisinherit+0xac>)
    ebe4:	681b      	ldr	r3, [r3, #0]
    ebe6:	68ba      	ldr	r2, [r7, #8]
    ebe8:	429a      	cmp	r2, r3
    ebea:	d001      	beq.n	ebf0 <xTaskPriorityDisinherit+0x24>
    ebec:	b672      	cpsid	i
    ebee:	e7fe      	b.n	ebee <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    ebf0:	68bb      	ldr	r3, [r7, #8]
    ebf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ebf4:	2b00      	cmp	r3, #0
    ebf6:	d101      	bne.n	ebfc <xTaskPriorityDisinherit+0x30>
    ebf8:	b672      	cpsid	i
    ebfa:	e7fe      	b.n	ebfa <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    ebfc:	68bb      	ldr	r3, [r7, #8]
    ebfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ec00:	1e5a      	subs	r2, r3, #1
    ec02:	68bb      	ldr	r3, [r7, #8]
    ec04:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    ec06:	68bb      	ldr	r3, [r7, #8]
    ec08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ec0a:	68bb      	ldr	r3, [r7, #8]
    ec0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ec0e:	429a      	cmp	r2, r3
    ec10:	d02c      	beq.n	ec6c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    ec12:	68bb      	ldr	r3, [r7, #8]
    ec14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ec16:	2b00      	cmp	r3, #0
    ec18:	d128      	bne.n	ec6c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ec1a:	68bb      	ldr	r3, [r7, #8]
    ec1c:	3304      	adds	r3, #4
    ec1e:	0018      	movs	r0, r3
    ec20:	4b16      	ldr	r3, [pc, #88]	; (ec7c <xTaskPriorityDisinherit+0xb0>)
    ec22:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    ec24:	68bb      	ldr	r3, [r7, #8]
    ec26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    ec28:	68bb      	ldr	r3, [r7, #8]
    ec2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ec2c:	68bb      	ldr	r3, [r7, #8]
    ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ec30:	2205      	movs	r2, #5
    ec32:	1ad2      	subs	r2, r2, r3
    ec34:	68bb      	ldr	r3, [r7, #8]
    ec36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    ec38:	68bb      	ldr	r3, [r7, #8]
    ec3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ec3c:	4b10      	ldr	r3, [pc, #64]	; (ec80 <xTaskPriorityDisinherit+0xb4>)
    ec3e:	681b      	ldr	r3, [r3, #0]
    ec40:	429a      	cmp	r2, r3
    ec42:	d903      	bls.n	ec4c <xTaskPriorityDisinherit+0x80>
    ec44:	68bb      	ldr	r3, [r7, #8]
    ec46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ec48:	4b0d      	ldr	r3, [pc, #52]	; (ec80 <xTaskPriorityDisinherit+0xb4>)
    ec4a:	601a      	str	r2, [r3, #0]
    ec4c:	68bb      	ldr	r3, [r7, #8]
    ec4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ec50:	0013      	movs	r3, r2
    ec52:	009b      	lsls	r3, r3, #2
    ec54:	189b      	adds	r3, r3, r2
    ec56:	009b      	lsls	r3, r3, #2
    ec58:	4a0a      	ldr	r2, [pc, #40]	; (ec84 <xTaskPriorityDisinherit+0xb8>)
    ec5a:	189a      	adds	r2, r3, r2
    ec5c:	68bb      	ldr	r3, [r7, #8]
    ec5e:	3304      	adds	r3, #4
    ec60:	0019      	movs	r1, r3
    ec62:	0010      	movs	r0, r2
    ec64:	4b08      	ldr	r3, [pc, #32]	; (ec88 <xTaskPriorityDisinherit+0xbc>)
    ec66:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    ec68:	2301      	movs	r3, #1
    ec6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    ec6c:	68fb      	ldr	r3, [r7, #12]
	}
    ec6e:	0018      	movs	r0, r3
    ec70:	46bd      	mov	sp, r7
    ec72:	b004      	add	sp, #16
    ec74:	bd80      	pop	{r7, pc}
    ec76:	46c0      	nop			; (mov r8, r8)
    ec78:	20003d48 	.word	0x20003d48
    ec7c:	0000d0e1 	.word	0x0000d0e1
    ec80:	20003e28 	.word	0x20003e28
    ec84:	20003d4c 	.word	0x20003d4c
    ec88:	0000d031 	.word	0x0000d031

0000ec8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    ec8c:	b580      	push	{r7, lr}
    ec8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    ec90:	4b06      	ldr	r3, [pc, #24]	; (ecac <pvTaskIncrementMutexHeldCount+0x20>)
    ec92:	681b      	ldr	r3, [r3, #0]
    ec94:	2b00      	cmp	r3, #0
    ec96:	d004      	beq.n	eca2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    ec98:	4b04      	ldr	r3, [pc, #16]	; (ecac <pvTaskIncrementMutexHeldCount+0x20>)
    ec9a:	681b      	ldr	r3, [r3, #0]
    ec9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    ec9e:	3201      	adds	r2, #1
    eca0:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
    eca2:	4b02      	ldr	r3, [pc, #8]	; (ecac <pvTaskIncrementMutexHeldCount+0x20>)
    eca4:	681b      	ldr	r3, [r3, #0]
	}
    eca6:	0018      	movs	r0, r3
    eca8:	46bd      	mov	sp, r7
    ecaa:	bd80      	pop	{r7, pc}
    ecac:	20003d48 	.word	0x20003d48

0000ecb0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b084      	sub	sp, #16
    ecb4:	af00      	add	r7, sp, #0
    ecb6:	6078      	str	r0, [r7, #4]
    ecb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    ecba:	4b21      	ldr	r3, [pc, #132]	; (ed40 <prvAddCurrentTaskToDelayedList+0x90>)
    ecbc:	681b      	ldr	r3, [r3, #0]
    ecbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ecc0:	4b20      	ldr	r3, [pc, #128]	; (ed44 <prvAddCurrentTaskToDelayedList+0x94>)
    ecc2:	681b      	ldr	r3, [r3, #0]
    ecc4:	3304      	adds	r3, #4
    ecc6:	0018      	movs	r0, r3
    ecc8:	4b1f      	ldr	r3, [pc, #124]	; (ed48 <prvAddCurrentTaskToDelayedList+0x98>)
    ecca:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    eccc:	687b      	ldr	r3, [r7, #4]
    ecce:	3301      	adds	r3, #1
    ecd0:	d10b      	bne.n	ecea <prvAddCurrentTaskToDelayedList+0x3a>
    ecd2:	683b      	ldr	r3, [r7, #0]
    ecd4:	2b00      	cmp	r3, #0
    ecd6:	d008      	beq.n	ecea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ecd8:	4b1a      	ldr	r3, [pc, #104]	; (ed44 <prvAddCurrentTaskToDelayedList+0x94>)
    ecda:	681b      	ldr	r3, [r3, #0]
    ecdc:	1d1a      	adds	r2, r3, #4
    ecde:	4b1b      	ldr	r3, [pc, #108]	; (ed4c <prvAddCurrentTaskToDelayedList+0x9c>)
    ece0:	0011      	movs	r1, r2
    ece2:	0018      	movs	r0, r3
    ece4:	4b1a      	ldr	r3, [pc, #104]	; (ed50 <prvAddCurrentTaskToDelayedList+0xa0>)
    ece6:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    ece8:	e026      	b.n	ed38 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    ecea:	68fa      	ldr	r2, [r7, #12]
    ecec:	687b      	ldr	r3, [r7, #4]
    ecee:	18d3      	adds	r3, r2, r3
    ecf0:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    ecf2:	4b14      	ldr	r3, [pc, #80]	; (ed44 <prvAddCurrentTaskToDelayedList+0x94>)
    ecf4:	681b      	ldr	r3, [r3, #0]
    ecf6:	68ba      	ldr	r2, [r7, #8]
    ecf8:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    ecfa:	68ba      	ldr	r2, [r7, #8]
    ecfc:	68fb      	ldr	r3, [r7, #12]
    ecfe:	429a      	cmp	r2, r3
    ed00:	d209      	bcs.n	ed16 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ed02:	4b14      	ldr	r3, [pc, #80]	; (ed54 <prvAddCurrentTaskToDelayedList+0xa4>)
    ed04:	681a      	ldr	r2, [r3, #0]
    ed06:	4b0f      	ldr	r3, [pc, #60]	; (ed44 <prvAddCurrentTaskToDelayedList+0x94>)
    ed08:	681b      	ldr	r3, [r3, #0]
    ed0a:	3304      	adds	r3, #4
    ed0c:	0019      	movs	r1, r3
    ed0e:	0010      	movs	r0, r2
    ed10:	4b11      	ldr	r3, [pc, #68]	; (ed58 <prvAddCurrentTaskToDelayedList+0xa8>)
    ed12:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    ed14:	e010      	b.n	ed38 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    ed16:	4b11      	ldr	r3, [pc, #68]	; (ed5c <prvAddCurrentTaskToDelayedList+0xac>)
    ed18:	681a      	ldr	r2, [r3, #0]
    ed1a:	4b0a      	ldr	r3, [pc, #40]	; (ed44 <prvAddCurrentTaskToDelayedList+0x94>)
    ed1c:	681b      	ldr	r3, [r3, #0]
    ed1e:	3304      	adds	r3, #4
    ed20:	0019      	movs	r1, r3
    ed22:	0010      	movs	r0, r2
    ed24:	4b0c      	ldr	r3, [pc, #48]	; (ed58 <prvAddCurrentTaskToDelayedList+0xa8>)
    ed26:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    ed28:	4b0d      	ldr	r3, [pc, #52]	; (ed60 <prvAddCurrentTaskToDelayedList+0xb0>)
    ed2a:	681b      	ldr	r3, [r3, #0]
    ed2c:	68ba      	ldr	r2, [r7, #8]
    ed2e:	429a      	cmp	r2, r3
    ed30:	d202      	bcs.n	ed38 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    ed32:	4b0b      	ldr	r3, [pc, #44]	; (ed60 <prvAddCurrentTaskToDelayedList+0xb0>)
    ed34:	68ba      	ldr	r2, [r7, #8]
    ed36:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    ed38:	46c0      	nop			; (mov r8, r8)
    ed3a:	46bd      	mov	sp, r7
    ed3c:	b004      	add	sp, #16
    ed3e:	bd80      	pop	{r7, pc}
    ed40:	20003e24 	.word	0x20003e24
    ed44:	20003d48 	.word	0x20003d48
    ed48:	0000d0e1 	.word	0x0000d0e1
    ed4c:	20003e0c 	.word	0x20003e0c
    ed50:	0000d031 	.word	0x0000d031
    ed54:	20003ddc 	.word	0x20003ddc
    ed58:	0000d075 	.word	0x0000d075
    ed5c:	20003dd8 	.word	0x20003dd8
    ed60:	20003e40 	.word	0x20003e40

0000ed64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    ed64:	b590      	push	{r4, r7, lr}
    ed66:	b085      	sub	sp, #20
    ed68:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    ed6a:	2300      	movs	r3, #0
    ed6c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    ed6e:	4b0e      	ldr	r3, [pc, #56]	; (eda8 <xTimerCreateTimerTask+0x44>)
    ed70:	4798      	blx	r3

	if( xTimerQueue != NULL )
    ed72:	4b0e      	ldr	r3, [pc, #56]	; (edac <xTimerCreateTimerTask+0x48>)
    ed74:	681b      	ldr	r3, [r3, #0]
    ed76:	2b00      	cmp	r3, #0
    ed78:	d00b      	beq.n	ed92 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    ed7a:	490d      	ldr	r1, [pc, #52]	; (edb0 <xTimerCreateTimerTask+0x4c>)
    ed7c:	480d      	ldr	r0, [pc, #52]	; (edb4 <xTimerCreateTimerTask+0x50>)
    ed7e:	4b0e      	ldr	r3, [pc, #56]	; (edb8 <xTimerCreateTimerTask+0x54>)
    ed80:	9301      	str	r3, [sp, #4]
    ed82:	2302      	movs	r3, #2
    ed84:	9300      	str	r3, [sp, #0]
    ed86:	2300      	movs	r3, #0
    ed88:	2250      	movs	r2, #80	; 0x50
    ed8a:	4c0c      	ldr	r4, [pc, #48]	; (edbc <xTimerCreateTimerTask+0x58>)
    ed8c:	47a0      	blx	r4
    ed8e:	0003      	movs	r3, r0
    ed90:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    ed92:	687b      	ldr	r3, [r7, #4]
    ed94:	2b00      	cmp	r3, #0
    ed96:	d101      	bne.n	ed9c <xTimerCreateTimerTask+0x38>
    ed98:	b672      	cpsid	i
    ed9a:	e7fe      	b.n	ed9a <xTimerCreateTimerTask+0x36>
	return xReturn;
    ed9c:	687b      	ldr	r3, [r7, #4]
}
    ed9e:	0018      	movs	r0, r3
    eda0:	46bd      	mov	sp, r7
    eda2:	b003      	add	sp, #12
    eda4:	bd90      	pop	{r4, r7, pc}
    eda6:	46c0      	nop			; (mov r8, r8)
    eda8:	0000f2a5 	.word	0x0000f2a5
    edac:	20003e7c 	.word	0x20003e7c
    edb0:	00013ddc 	.word	0x00013ddc
    edb4:	0000eee5 	.word	0x0000eee5
    edb8:	20003e80 	.word	0x20003e80
    edbc:	0000df1d 	.word	0x0000df1d

0000edc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    edc0:	b590      	push	{r4, r7, lr}
    edc2:	b089      	sub	sp, #36	; 0x24
    edc4:	af00      	add	r7, sp, #0
    edc6:	60f8      	str	r0, [r7, #12]
    edc8:	60b9      	str	r1, [r7, #8]
    edca:	607a      	str	r2, [r7, #4]
    edcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    edce:	2300      	movs	r3, #0
    edd0:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    edd2:	68fb      	ldr	r3, [r7, #12]
    edd4:	2b00      	cmp	r3, #0
    edd6:	d101      	bne.n	eddc <xTimerGenericCommand+0x1c>
    edd8:	b672      	cpsid	i
    edda:	e7fe      	b.n	edda <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    eddc:	4b1e      	ldr	r3, [pc, #120]	; (ee58 <xTimerGenericCommand+0x98>)
    edde:	681b      	ldr	r3, [r3, #0]
    ede0:	2b00      	cmp	r3, #0
    ede2:	d033      	beq.n	ee4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    ede4:	2310      	movs	r3, #16
    ede6:	18fb      	adds	r3, r7, r3
    ede8:	68ba      	ldr	r2, [r7, #8]
    edea:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    edec:	2310      	movs	r3, #16
    edee:	18fb      	adds	r3, r7, r3
    edf0:	687a      	ldr	r2, [r7, #4]
    edf2:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    edf4:	2310      	movs	r3, #16
    edf6:	18fb      	adds	r3, r7, r3
    edf8:	68fa      	ldr	r2, [r7, #12]
    edfa:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    edfc:	68bb      	ldr	r3, [r7, #8]
    edfe:	2b05      	cmp	r3, #5
    ee00:	dc1a      	bgt.n	ee38 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    ee02:	4b16      	ldr	r3, [pc, #88]	; (ee5c <xTimerGenericCommand+0x9c>)
    ee04:	4798      	blx	r3
    ee06:	1e03      	subs	r3, r0, #0
    ee08:	2b02      	cmp	r3, #2
    ee0a:	d10a      	bne.n	ee22 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    ee0c:	4b12      	ldr	r3, [pc, #72]	; (ee58 <xTimerGenericCommand+0x98>)
    ee0e:	6818      	ldr	r0, [r3, #0]
    ee10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ee12:	2310      	movs	r3, #16
    ee14:	18f9      	adds	r1, r7, r3
    ee16:	2300      	movs	r3, #0
    ee18:	4c11      	ldr	r4, [pc, #68]	; (ee60 <xTimerGenericCommand+0xa0>)
    ee1a:	47a0      	blx	r4
    ee1c:	0003      	movs	r3, r0
    ee1e:	61fb      	str	r3, [r7, #28]
    ee20:	e014      	b.n	ee4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    ee22:	4b0d      	ldr	r3, [pc, #52]	; (ee58 <xTimerGenericCommand+0x98>)
    ee24:	6818      	ldr	r0, [r3, #0]
    ee26:	2310      	movs	r3, #16
    ee28:	18f9      	adds	r1, r7, r3
    ee2a:	2300      	movs	r3, #0
    ee2c:	2200      	movs	r2, #0
    ee2e:	4c0c      	ldr	r4, [pc, #48]	; (ee60 <xTimerGenericCommand+0xa0>)
    ee30:	47a0      	blx	r4
    ee32:	0003      	movs	r3, r0
    ee34:	61fb      	str	r3, [r7, #28]
    ee36:	e009      	b.n	ee4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    ee38:	4b07      	ldr	r3, [pc, #28]	; (ee58 <xTimerGenericCommand+0x98>)
    ee3a:	6818      	ldr	r0, [r3, #0]
    ee3c:	683a      	ldr	r2, [r7, #0]
    ee3e:	2310      	movs	r3, #16
    ee40:	18f9      	adds	r1, r7, r3
    ee42:	2300      	movs	r3, #0
    ee44:	4c07      	ldr	r4, [pc, #28]	; (ee64 <xTimerGenericCommand+0xa4>)
    ee46:	47a0      	blx	r4
    ee48:	0003      	movs	r3, r0
    ee4a:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    ee4c:	69fb      	ldr	r3, [r7, #28]
}
    ee4e:	0018      	movs	r0, r3
    ee50:	46bd      	mov	sp, r7
    ee52:	b009      	add	sp, #36	; 0x24
    ee54:	bd90      	pop	{r4, r7, pc}
    ee56:	46c0      	nop			; (mov r8, r8)
    ee58:	20003e7c 	.word	0x20003e7c
    ee5c:	0000ead1 	.word	0x0000ead1
    ee60:	0000d621 	.word	0x0000d621
    ee64:	0000d801 	.word	0x0000d801

0000ee68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    ee68:	b590      	push	{r4, r7, lr}
    ee6a:	b087      	sub	sp, #28
    ee6c:	af02      	add	r7, sp, #8
    ee6e:	6078      	str	r0, [r7, #4]
    ee70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    ee72:	4b18      	ldr	r3, [pc, #96]	; (eed4 <prvProcessExpiredTimer+0x6c>)
    ee74:	681b      	ldr	r3, [r3, #0]
    ee76:	68db      	ldr	r3, [r3, #12]
    ee78:	68db      	ldr	r3, [r3, #12]
    ee7a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ee7c:	68fb      	ldr	r3, [r7, #12]
    ee7e:	3304      	adds	r3, #4
    ee80:	0018      	movs	r0, r3
    ee82:	4b15      	ldr	r3, [pc, #84]	; (eed8 <prvProcessExpiredTimer+0x70>)
    ee84:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ee86:	68fb      	ldr	r3, [r7, #12]
    ee88:	69db      	ldr	r3, [r3, #28]
    ee8a:	2b01      	cmp	r3, #1
    ee8c:	d119      	bne.n	eec2 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    ee8e:	68fb      	ldr	r3, [r7, #12]
    ee90:	699a      	ldr	r2, [r3, #24]
    ee92:	687b      	ldr	r3, [r7, #4]
    ee94:	18d1      	adds	r1, r2, r3
    ee96:	687b      	ldr	r3, [r7, #4]
    ee98:	683a      	ldr	r2, [r7, #0]
    ee9a:	68f8      	ldr	r0, [r7, #12]
    ee9c:	4c0f      	ldr	r4, [pc, #60]	; (eedc <prvProcessExpiredTimer+0x74>)
    ee9e:	47a0      	blx	r4
    eea0:	1e03      	subs	r3, r0, #0
    eea2:	d00e      	beq.n	eec2 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    eea4:	687a      	ldr	r2, [r7, #4]
    eea6:	68f8      	ldr	r0, [r7, #12]
    eea8:	2300      	movs	r3, #0
    eeaa:	9300      	str	r3, [sp, #0]
    eeac:	2300      	movs	r3, #0
    eeae:	2100      	movs	r1, #0
    eeb0:	4c0b      	ldr	r4, [pc, #44]	; (eee0 <prvProcessExpiredTimer+0x78>)
    eeb2:	47a0      	blx	r4
    eeb4:	0003      	movs	r3, r0
    eeb6:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    eeb8:	68bb      	ldr	r3, [r7, #8]
    eeba:	2b00      	cmp	r3, #0
    eebc:	d101      	bne.n	eec2 <prvProcessExpiredTimer+0x5a>
    eebe:	b672      	cpsid	i
    eec0:	e7fe      	b.n	eec0 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    eec2:	68fb      	ldr	r3, [r7, #12]
    eec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eec6:	68fa      	ldr	r2, [r7, #12]
    eec8:	0010      	movs	r0, r2
    eeca:	4798      	blx	r3
}
    eecc:	46c0      	nop			; (mov r8, r8)
    eece:	46bd      	mov	sp, r7
    eed0:	b005      	add	sp, #20
    eed2:	bd90      	pop	{r4, r7, pc}
    eed4:	20003e74 	.word	0x20003e74
    eed8:	0000d0e1 	.word	0x0000d0e1
    eedc:	0000f045 	.word	0x0000f045
    eee0:	0000edc1 	.word	0x0000edc1

0000eee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    eee4:	b580      	push	{r7, lr}
    eee6:	b084      	sub	sp, #16
    eee8:	af00      	add	r7, sp, #0
    eeea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    eeec:	2308      	movs	r3, #8
    eeee:	18fb      	adds	r3, r7, r3
    eef0:	0018      	movs	r0, r3
    eef2:	4b06      	ldr	r3, [pc, #24]	; (ef0c <prvTimerTask+0x28>)
    eef4:	4798      	blx	r3
    eef6:	0003      	movs	r3, r0
    eef8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    eefa:	68ba      	ldr	r2, [r7, #8]
    eefc:	68fb      	ldr	r3, [r7, #12]
    eefe:	0011      	movs	r1, r2
    ef00:	0018      	movs	r0, r3
    ef02:	4b03      	ldr	r3, [pc, #12]	; (ef10 <prvTimerTask+0x2c>)
    ef04:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    ef06:	4b03      	ldr	r3, [pc, #12]	; (ef14 <prvTimerTask+0x30>)
    ef08:	4798      	blx	r3
	}
    ef0a:	e7ef      	b.n	eeec <prvTimerTask+0x8>
    ef0c:	0000efbd 	.word	0x0000efbd
    ef10:	0000ef19 	.word	0x0000ef19
    ef14:	0000f0cd 	.word	0x0000f0cd

0000ef18 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    ef18:	b580      	push	{r7, lr}
    ef1a:	b084      	sub	sp, #16
    ef1c:	af00      	add	r7, sp, #0
    ef1e:	6078      	str	r0, [r7, #4]
    ef20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    ef22:	4b1e      	ldr	r3, [pc, #120]	; (ef9c <prvProcessTimerOrBlockTask+0x84>)
    ef24:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    ef26:	2308      	movs	r3, #8
    ef28:	18fb      	adds	r3, r7, r3
    ef2a:	0018      	movs	r0, r3
    ef2c:	4b1c      	ldr	r3, [pc, #112]	; (efa0 <prvProcessTimerOrBlockTask+0x88>)
    ef2e:	4798      	blx	r3
    ef30:	0003      	movs	r3, r0
    ef32:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    ef34:	68bb      	ldr	r3, [r7, #8]
    ef36:	2b00      	cmp	r3, #0
    ef38:	d129      	bne.n	ef8e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    ef3a:	683b      	ldr	r3, [r7, #0]
    ef3c:	2b00      	cmp	r3, #0
    ef3e:	d10c      	bne.n	ef5a <prvProcessTimerOrBlockTask+0x42>
    ef40:	687a      	ldr	r2, [r7, #4]
    ef42:	68fb      	ldr	r3, [r7, #12]
    ef44:	429a      	cmp	r2, r3
    ef46:	d808      	bhi.n	ef5a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    ef48:	4b16      	ldr	r3, [pc, #88]	; (efa4 <prvProcessTimerOrBlockTask+0x8c>)
    ef4a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    ef4c:	68fa      	ldr	r2, [r7, #12]
    ef4e:	687b      	ldr	r3, [r7, #4]
    ef50:	0011      	movs	r1, r2
    ef52:	0018      	movs	r0, r3
    ef54:	4b14      	ldr	r3, [pc, #80]	; (efa8 <prvProcessTimerOrBlockTask+0x90>)
    ef56:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    ef58:	e01b      	b.n	ef92 <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    ef5a:	683b      	ldr	r3, [r7, #0]
    ef5c:	2b00      	cmp	r3, #0
    ef5e:	d006      	beq.n	ef6e <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    ef60:	4b12      	ldr	r3, [pc, #72]	; (efac <prvProcessTimerOrBlockTask+0x94>)
    ef62:	681b      	ldr	r3, [r3, #0]
    ef64:	681b      	ldr	r3, [r3, #0]
    ef66:	425a      	negs	r2, r3
    ef68:	4153      	adcs	r3, r2
    ef6a:	b2db      	uxtb	r3, r3
    ef6c:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    ef6e:	4b10      	ldr	r3, [pc, #64]	; (efb0 <prvProcessTimerOrBlockTask+0x98>)
    ef70:	6818      	ldr	r0, [r3, #0]
    ef72:	687a      	ldr	r2, [r7, #4]
    ef74:	68fb      	ldr	r3, [r7, #12]
    ef76:	1ad3      	subs	r3, r2, r3
    ef78:	683a      	ldr	r2, [r7, #0]
    ef7a:	0019      	movs	r1, r3
    ef7c:	4b0d      	ldr	r3, [pc, #52]	; (efb4 <prvProcessTimerOrBlockTask+0x9c>)
    ef7e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    ef80:	4b08      	ldr	r3, [pc, #32]	; (efa4 <prvProcessTimerOrBlockTask+0x8c>)
    ef82:	4798      	blx	r3
    ef84:	1e03      	subs	r3, r0, #0
    ef86:	d104      	bne.n	ef92 <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    ef88:	4b0b      	ldr	r3, [pc, #44]	; (efb8 <prvProcessTimerOrBlockTask+0xa0>)
    ef8a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    ef8c:	e001      	b.n	ef92 <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    ef8e:	4b05      	ldr	r3, [pc, #20]	; (efa4 <prvProcessTimerOrBlockTask+0x8c>)
    ef90:	4798      	blx	r3
		}
	}
}
    ef92:	46c0      	nop			; (mov r8, r8)
    ef94:	46bd      	mov	sp, r7
    ef96:	b004      	add	sp, #16
    ef98:	bd80      	pop	{r7, pc}
    ef9a:	46c0      	nop			; (mov r8, r8)
    ef9c:	0000e35d 	.word	0x0000e35d
    efa0:	0000effd 	.word	0x0000effd
    efa4:	0000e375 	.word	0x0000e375
    efa8:	0000ee69 	.word	0x0000ee69
    efac:	20003e78 	.word	0x20003e78
    efb0:	20003e7c 	.word	0x20003e7c
    efb4:	0000de01 	.word	0x0000de01
    efb8:	0000d239 	.word	0x0000d239

0000efbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    efbc:	b580      	push	{r7, lr}
    efbe:	b084      	sub	sp, #16
    efc0:	af00      	add	r7, sp, #0
    efc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    efc4:	4b0c      	ldr	r3, [pc, #48]	; (eff8 <prvGetNextExpireTime+0x3c>)
    efc6:	681b      	ldr	r3, [r3, #0]
    efc8:	681b      	ldr	r3, [r3, #0]
    efca:	425a      	negs	r2, r3
    efcc:	4153      	adcs	r3, r2
    efce:	b2db      	uxtb	r3, r3
    efd0:	001a      	movs	r2, r3
    efd2:	687b      	ldr	r3, [r7, #4]
    efd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    efd6:	687b      	ldr	r3, [r7, #4]
    efd8:	681b      	ldr	r3, [r3, #0]
    efda:	2b00      	cmp	r3, #0
    efdc:	d105      	bne.n	efea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    efde:	4b06      	ldr	r3, [pc, #24]	; (eff8 <prvGetNextExpireTime+0x3c>)
    efe0:	681b      	ldr	r3, [r3, #0]
    efe2:	68db      	ldr	r3, [r3, #12]
    efe4:	681b      	ldr	r3, [r3, #0]
    efe6:	60fb      	str	r3, [r7, #12]
    efe8:	e001      	b.n	efee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    efea:	2300      	movs	r3, #0
    efec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    efee:	68fb      	ldr	r3, [r7, #12]
}
    eff0:	0018      	movs	r0, r3
    eff2:	46bd      	mov	sp, r7
    eff4:	b004      	add	sp, #16
    eff6:	bd80      	pop	{r7, pc}
    eff8:	20003e74 	.word	0x20003e74

0000effc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    effc:	b580      	push	{r7, lr}
    effe:	b084      	sub	sp, #16
    f000:	af00      	add	r7, sp, #0
    f002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    f004:	4b0c      	ldr	r3, [pc, #48]	; (f038 <prvSampleTimeNow+0x3c>)
    f006:	4798      	blx	r3
    f008:	0003      	movs	r3, r0
    f00a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    f00c:	4b0b      	ldr	r3, [pc, #44]	; (f03c <prvSampleTimeNow+0x40>)
    f00e:	681b      	ldr	r3, [r3, #0]
    f010:	68fa      	ldr	r2, [r7, #12]
    f012:	429a      	cmp	r2, r3
    f014:	d205      	bcs.n	f022 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    f016:	4b0a      	ldr	r3, [pc, #40]	; (f040 <prvSampleTimeNow+0x44>)
    f018:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    f01a:	687b      	ldr	r3, [r7, #4]
    f01c:	2201      	movs	r2, #1
    f01e:	601a      	str	r2, [r3, #0]
    f020:	e002      	b.n	f028 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    f022:	687b      	ldr	r3, [r7, #4]
    f024:	2200      	movs	r2, #0
    f026:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    f028:	4b04      	ldr	r3, [pc, #16]	; (f03c <prvSampleTimeNow+0x40>)
    f02a:	68fa      	ldr	r2, [r7, #12]
    f02c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    f02e:	68fb      	ldr	r3, [r7, #12]
}
    f030:	0018      	movs	r0, r3
    f032:	46bd      	mov	sp, r7
    f034:	b004      	add	sp, #16
    f036:	bd80      	pop	{r7, pc}
    f038:	0000e4a9 	.word	0x0000e4a9
    f03c:	20003e84 	.word	0x20003e84
    f040:	0000f1e5 	.word	0x0000f1e5

0000f044 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    f044:	b580      	push	{r7, lr}
    f046:	b086      	sub	sp, #24
    f048:	af00      	add	r7, sp, #0
    f04a:	60f8      	str	r0, [r7, #12]
    f04c:	60b9      	str	r1, [r7, #8]
    f04e:	607a      	str	r2, [r7, #4]
    f050:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    f052:	2300      	movs	r3, #0
    f054:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    f056:	68fb      	ldr	r3, [r7, #12]
    f058:	68ba      	ldr	r2, [r7, #8]
    f05a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    f05c:	68fb      	ldr	r3, [r7, #12]
    f05e:	68fa      	ldr	r2, [r7, #12]
    f060:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    f062:	68ba      	ldr	r2, [r7, #8]
    f064:	687b      	ldr	r3, [r7, #4]
    f066:	429a      	cmp	r2, r3
    f068:	d812      	bhi.n	f090 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    f06a:	687a      	ldr	r2, [r7, #4]
    f06c:	683b      	ldr	r3, [r7, #0]
    f06e:	1ad2      	subs	r2, r2, r3
    f070:	68fb      	ldr	r3, [r7, #12]
    f072:	699b      	ldr	r3, [r3, #24]
    f074:	429a      	cmp	r2, r3
    f076:	d302      	bcc.n	f07e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    f078:	2301      	movs	r3, #1
    f07a:	617b      	str	r3, [r7, #20]
    f07c:	e01b      	b.n	f0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    f07e:	4b10      	ldr	r3, [pc, #64]	; (f0c0 <prvInsertTimerInActiveList+0x7c>)
    f080:	681a      	ldr	r2, [r3, #0]
    f082:	68fb      	ldr	r3, [r7, #12]
    f084:	3304      	adds	r3, #4
    f086:	0019      	movs	r1, r3
    f088:	0010      	movs	r0, r2
    f08a:	4b0e      	ldr	r3, [pc, #56]	; (f0c4 <prvInsertTimerInActiveList+0x80>)
    f08c:	4798      	blx	r3
    f08e:	e012      	b.n	f0b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    f090:	687a      	ldr	r2, [r7, #4]
    f092:	683b      	ldr	r3, [r7, #0]
    f094:	429a      	cmp	r2, r3
    f096:	d206      	bcs.n	f0a6 <prvInsertTimerInActiveList+0x62>
    f098:	68ba      	ldr	r2, [r7, #8]
    f09a:	683b      	ldr	r3, [r7, #0]
    f09c:	429a      	cmp	r2, r3
    f09e:	d302      	bcc.n	f0a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    f0a0:	2301      	movs	r3, #1
    f0a2:	617b      	str	r3, [r7, #20]
    f0a4:	e007      	b.n	f0b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    f0a6:	4b08      	ldr	r3, [pc, #32]	; (f0c8 <prvInsertTimerInActiveList+0x84>)
    f0a8:	681a      	ldr	r2, [r3, #0]
    f0aa:	68fb      	ldr	r3, [r7, #12]
    f0ac:	3304      	adds	r3, #4
    f0ae:	0019      	movs	r1, r3
    f0b0:	0010      	movs	r0, r2
    f0b2:	4b04      	ldr	r3, [pc, #16]	; (f0c4 <prvInsertTimerInActiveList+0x80>)
    f0b4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    f0b6:	697b      	ldr	r3, [r7, #20]
}
    f0b8:	0018      	movs	r0, r3
    f0ba:	46bd      	mov	sp, r7
    f0bc:	b006      	add	sp, #24
    f0be:	bd80      	pop	{r7, pc}
    f0c0:	20003e78 	.word	0x20003e78
    f0c4:	0000d075 	.word	0x0000d075
    f0c8:	20003e74 	.word	0x20003e74

0000f0cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    f0cc:	b590      	push	{r4, r7, lr}
    f0ce:	b08b      	sub	sp, #44	; 0x2c
    f0d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    f0d2:	e068      	b.n	f1a6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    f0d4:	2308      	movs	r3, #8
    f0d6:	18fb      	adds	r3, r7, r3
    f0d8:	681b      	ldr	r3, [r3, #0]
    f0da:	2b00      	cmp	r3, #0
    f0dc:	db63      	blt.n	f1a6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    f0de:	2308      	movs	r3, #8
    f0e0:	18fb      	adds	r3, r7, r3
    f0e2:	689b      	ldr	r3, [r3, #8]
    f0e4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    f0e6:	69fb      	ldr	r3, [r7, #28]
    f0e8:	695b      	ldr	r3, [r3, #20]
    f0ea:	2b00      	cmp	r3, #0
    f0ec:	d004      	beq.n	f0f8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    f0ee:	69fb      	ldr	r3, [r7, #28]
    f0f0:	3304      	adds	r3, #4
    f0f2:	0018      	movs	r0, r3
    f0f4:	4b33      	ldr	r3, [pc, #204]	; (f1c4 <prvProcessReceivedCommands+0xf8>)
    f0f6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    f0f8:	1d3b      	adds	r3, r7, #4
    f0fa:	0018      	movs	r0, r3
    f0fc:	4b32      	ldr	r3, [pc, #200]	; (f1c8 <prvProcessReceivedCommands+0xfc>)
    f0fe:	4798      	blx	r3
    f100:	0003      	movs	r3, r0
    f102:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    f104:	2308      	movs	r3, #8
    f106:	18fb      	adds	r3, r7, r3
    f108:	681b      	ldr	r3, [r3, #0]
    f10a:	2b09      	cmp	r3, #9
    f10c:	d84a      	bhi.n	f1a4 <prvProcessReceivedCommands+0xd8>
    f10e:	009a      	lsls	r2, r3, #2
    f110:	4b2e      	ldr	r3, [pc, #184]	; (f1cc <prvProcessReceivedCommands+0x100>)
    f112:	18d3      	adds	r3, r2, r3
    f114:	681b      	ldr	r3, [r3, #0]
    f116:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    f118:	2308      	movs	r3, #8
    f11a:	18fb      	adds	r3, r7, r3
    f11c:	685a      	ldr	r2, [r3, #4]
    f11e:	69fb      	ldr	r3, [r7, #28]
    f120:	699b      	ldr	r3, [r3, #24]
    f122:	18d1      	adds	r1, r2, r3
    f124:	2308      	movs	r3, #8
    f126:	18fb      	adds	r3, r7, r3
    f128:	685b      	ldr	r3, [r3, #4]
    f12a:	69ba      	ldr	r2, [r7, #24]
    f12c:	69f8      	ldr	r0, [r7, #28]
    f12e:	4c28      	ldr	r4, [pc, #160]	; (f1d0 <prvProcessReceivedCommands+0x104>)
    f130:	47a0      	blx	r4
    f132:	1e03      	subs	r3, r0, #0
    f134:	d037      	beq.n	f1a6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    f136:	69fb      	ldr	r3, [r7, #28]
    f138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f13a:	69fa      	ldr	r2, [r7, #28]
    f13c:	0010      	movs	r0, r2
    f13e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    f140:	69fb      	ldr	r3, [r7, #28]
    f142:	69db      	ldr	r3, [r3, #28]
    f144:	2b01      	cmp	r3, #1
    f146:	d12e      	bne.n	f1a6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    f148:	2308      	movs	r3, #8
    f14a:	18fb      	adds	r3, r7, r3
    f14c:	685a      	ldr	r2, [r3, #4]
    f14e:	69fb      	ldr	r3, [r7, #28]
    f150:	699b      	ldr	r3, [r3, #24]
    f152:	18d2      	adds	r2, r2, r3
    f154:	69f8      	ldr	r0, [r7, #28]
    f156:	2300      	movs	r3, #0
    f158:	9300      	str	r3, [sp, #0]
    f15a:	2300      	movs	r3, #0
    f15c:	2100      	movs	r1, #0
    f15e:	4c1d      	ldr	r4, [pc, #116]	; (f1d4 <prvProcessReceivedCommands+0x108>)
    f160:	47a0      	blx	r4
    f162:	0003      	movs	r3, r0
    f164:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    f166:	697b      	ldr	r3, [r7, #20]
    f168:	2b00      	cmp	r3, #0
    f16a:	d11c      	bne.n	f1a6 <prvProcessReceivedCommands+0xda>
    f16c:	b672      	cpsid	i
    f16e:	e7fe      	b.n	f16e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    f170:	2308      	movs	r3, #8
    f172:	18fb      	adds	r3, r7, r3
    f174:	685a      	ldr	r2, [r3, #4]
    f176:	69fb      	ldr	r3, [r7, #28]
    f178:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    f17a:	69fb      	ldr	r3, [r7, #28]
    f17c:	699b      	ldr	r3, [r3, #24]
    f17e:	2b00      	cmp	r3, #0
    f180:	d101      	bne.n	f186 <prvProcessReceivedCommands+0xba>
    f182:	b672      	cpsid	i
    f184:	e7fe      	b.n	f184 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    f186:	69fb      	ldr	r3, [r7, #28]
    f188:	699a      	ldr	r2, [r3, #24]
    f18a:	69bb      	ldr	r3, [r7, #24]
    f18c:	18d1      	adds	r1, r2, r3
    f18e:	69bb      	ldr	r3, [r7, #24]
    f190:	69ba      	ldr	r2, [r7, #24]
    f192:	69f8      	ldr	r0, [r7, #28]
    f194:	4c0e      	ldr	r4, [pc, #56]	; (f1d0 <prvProcessReceivedCommands+0x104>)
    f196:	47a0      	blx	r4
					break;
    f198:	e005      	b.n	f1a6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    f19a:	69fb      	ldr	r3, [r7, #28]
    f19c:	0018      	movs	r0, r3
    f19e:	4b0e      	ldr	r3, [pc, #56]	; (f1d8 <prvProcessReceivedCommands+0x10c>)
    f1a0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    f1a2:	e000      	b.n	f1a6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    f1a4:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    f1a6:	4b0d      	ldr	r3, [pc, #52]	; (f1dc <prvProcessReceivedCommands+0x110>)
    f1a8:	6818      	ldr	r0, [r3, #0]
    f1aa:	2308      	movs	r3, #8
    f1ac:	18f9      	adds	r1, r7, r3
    f1ae:	2300      	movs	r3, #0
    f1b0:	2200      	movs	r2, #0
    f1b2:	4c0b      	ldr	r4, [pc, #44]	; (f1e0 <prvProcessReceivedCommands+0x114>)
    f1b4:	47a0      	blx	r4
    f1b6:	1e03      	subs	r3, r0, #0
    f1b8:	d18c      	bne.n	f0d4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    f1ba:	46c0      	nop			; (mov r8, r8)
    f1bc:	46bd      	mov	sp, r7
    f1be:	b009      	add	sp, #36	; 0x24
    f1c0:	bd90      	pop	{r4, r7, pc}
    f1c2:	46c0      	nop			; (mov r8, r8)
    f1c4:	0000d0e1 	.word	0x0000d0e1
    f1c8:	0000effd 	.word	0x0000effd
    f1cc:	00013dec 	.word	0x00013dec
    f1d0:	0000f045 	.word	0x0000f045
    f1d4:	0000edc1 	.word	0x0000edc1
    f1d8:	0000d40d 	.word	0x0000d40d
    f1dc:	20003e7c 	.word	0x20003e7c
    f1e0:	0000d921 	.word	0x0000d921

0000f1e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    f1e4:	b590      	push	{r4, r7, lr}
    f1e6:	b089      	sub	sp, #36	; 0x24
    f1e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    f1ea:	e03e      	b.n	f26a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    f1ec:	4b28      	ldr	r3, [pc, #160]	; (f290 <prvSwitchTimerLists+0xac>)
    f1ee:	681b      	ldr	r3, [r3, #0]
    f1f0:	68db      	ldr	r3, [r3, #12]
    f1f2:	681b      	ldr	r3, [r3, #0]
    f1f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    f1f6:	4b26      	ldr	r3, [pc, #152]	; (f290 <prvSwitchTimerLists+0xac>)
    f1f8:	681b      	ldr	r3, [r3, #0]
    f1fa:	68db      	ldr	r3, [r3, #12]
    f1fc:	68db      	ldr	r3, [r3, #12]
    f1fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    f200:	693b      	ldr	r3, [r7, #16]
    f202:	3304      	adds	r3, #4
    f204:	0018      	movs	r0, r3
    f206:	4b23      	ldr	r3, [pc, #140]	; (f294 <prvSwitchTimerLists+0xb0>)
    f208:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    f20a:	693b      	ldr	r3, [r7, #16]
    f20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f20e:	693a      	ldr	r2, [r7, #16]
    f210:	0010      	movs	r0, r2
    f212:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    f214:	693b      	ldr	r3, [r7, #16]
    f216:	69db      	ldr	r3, [r3, #28]
    f218:	2b01      	cmp	r3, #1
    f21a:	d126      	bne.n	f26a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    f21c:	693b      	ldr	r3, [r7, #16]
    f21e:	699a      	ldr	r2, [r3, #24]
    f220:	697b      	ldr	r3, [r7, #20]
    f222:	18d3      	adds	r3, r2, r3
    f224:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    f226:	68fa      	ldr	r2, [r7, #12]
    f228:	697b      	ldr	r3, [r7, #20]
    f22a:	429a      	cmp	r2, r3
    f22c:	d90e      	bls.n	f24c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    f22e:	693b      	ldr	r3, [r7, #16]
    f230:	68fa      	ldr	r2, [r7, #12]
    f232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    f234:	693b      	ldr	r3, [r7, #16]
    f236:	693a      	ldr	r2, [r7, #16]
    f238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    f23a:	4b15      	ldr	r3, [pc, #84]	; (f290 <prvSwitchTimerLists+0xac>)
    f23c:	681a      	ldr	r2, [r3, #0]
    f23e:	693b      	ldr	r3, [r7, #16]
    f240:	3304      	adds	r3, #4
    f242:	0019      	movs	r1, r3
    f244:	0010      	movs	r0, r2
    f246:	4b14      	ldr	r3, [pc, #80]	; (f298 <prvSwitchTimerLists+0xb4>)
    f248:	4798      	blx	r3
    f24a:	e00e      	b.n	f26a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    f24c:	697a      	ldr	r2, [r7, #20]
    f24e:	6938      	ldr	r0, [r7, #16]
    f250:	2300      	movs	r3, #0
    f252:	9300      	str	r3, [sp, #0]
    f254:	2300      	movs	r3, #0
    f256:	2100      	movs	r1, #0
    f258:	4c10      	ldr	r4, [pc, #64]	; (f29c <prvSwitchTimerLists+0xb8>)
    f25a:	47a0      	blx	r4
    f25c:	0003      	movs	r3, r0
    f25e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    f260:	68bb      	ldr	r3, [r7, #8]
    f262:	2b00      	cmp	r3, #0
    f264:	d101      	bne.n	f26a <prvSwitchTimerLists+0x86>
    f266:	b672      	cpsid	i
    f268:	e7fe      	b.n	f268 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    f26a:	4b09      	ldr	r3, [pc, #36]	; (f290 <prvSwitchTimerLists+0xac>)
    f26c:	681b      	ldr	r3, [r3, #0]
    f26e:	681b      	ldr	r3, [r3, #0]
    f270:	2b00      	cmp	r3, #0
    f272:	d1bb      	bne.n	f1ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    f274:	4b06      	ldr	r3, [pc, #24]	; (f290 <prvSwitchTimerLists+0xac>)
    f276:	681b      	ldr	r3, [r3, #0]
    f278:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    f27a:	4b09      	ldr	r3, [pc, #36]	; (f2a0 <prvSwitchTimerLists+0xbc>)
    f27c:	681a      	ldr	r2, [r3, #0]
    f27e:	4b04      	ldr	r3, [pc, #16]	; (f290 <prvSwitchTimerLists+0xac>)
    f280:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    f282:	4b07      	ldr	r3, [pc, #28]	; (f2a0 <prvSwitchTimerLists+0xbc>)
    f284:	687a      	ldr	r2, [r7, #4]
    f286:	601a      	str	r2, [r3, #0]
}
    f288:	46c0      	nop			; (mov r8, r8)
    f28a:	46bd      	mov	sp, r7
    f28c:	b007      	add	sp, #28
    f28e:	bd90      	pop	{r4, r7, pc}
    f290:	20003e74 	.word	0x20003e74
    f294:	0000d0e1 	.word	0x0000d0e1
    f298:	0000d075 	.word	0x0000d075
    f29c:	0000edc1 	.word	0x0000edc1
    f2a0:	20003e78 	.word	0x20003e78

0000f2a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    f2a4:	b580      	push	{r7, lr}
    f2a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    f2a8:	4b15      	ldr	r3, [pc, #84]	; (f300 <prvCheckForValidListAndQueue+0x5c>)
    f2aa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    f2ac:	4b15      	ldr	r3, [pc, #84]	; (f304 <prvCheckForValidListAndQueue+0x60>)
    f2ae:	681b      	ldr	r3, [r3, #0]
    f2b0:	2b00      	cmp	r3, #0
    f2b2:	d120      	bne.n	f2f6 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    f2b4:	4b14      	ldr	r3, [pc, #80]	; (f308 <prvCheckForValidListAndQueue+0x64>)
    f2b6:	0018      	movs	r0, r3
    f2b8:	4b14      	ldr	r3, [pc, #80]	; (f30c <prvCheckForValidListAndQueue+0x68>)
    f2ba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    f2bc:	4b14      	ldr	r3, [pc, #80]	; (f310 <prvCheckForValidListAndQueue+0x6c>)
    f2be:	0018      	movs	r0, r3
    f2c0:	4b12      	ldr	r3, [pc, #72]	; (f30c <prvCheckForValidListAndQueue+0x68>)
    f2c2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    f2c4:	4b13      	ldr	r3, [pc, #76]	; (f314 <prvCheckForValidListAndQueue+0x70>)
    f2c6:	4a10      	ldr	r2, [pc, #64]	; (f308 <prvCheckForValidListAndQueue+0x64>)
    f2c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    f2ca:	4b13      	ldr	r3, [pc, #76]	; (f318 <prvCheckForValidListAndQueue+0x74>)
    f2cc:	4a10      	ldr	r2, [pc, #64]	; (f310 <prvCheckForValidListAndQueue+0x6c>)
    f2ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    f2d0:	2200      	movs	r2, #0
    f2d2:	210c      	movs	r1, #12
    f2d4:	2002      	movs	r0, #2
    f2d6:	4b11      	ldr	r3, [pc, #68]	; (f31c <prvCheckForValidListAndQueue+0x78>)
    f2d8:	4798      	blx	r3
    f2da:	0002      	movs	r2, r0
    f2dc:	4b09      	ldr	r3, [pc, #36]	; (f304 <prvCheckForValidListAndQueue+0x60>)
    f2de:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    f2e0:	4b08      	ldr	r3, [pc, #32]	; (f304 <prvCheckForValidListAndQueue+0x60>)
    f2e2:	681b      	ldr	r3, [r3, #0]
    f2e4:	2b00      	cmp	r3, #0
    f2e6:	d006      	beq.n	f2f6 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    f2e8:	4b06      	ldr	r3, [pc, #24]	; (f304 <prvCheckForValidListAndQueue+0x60>)
    f2ea:	681b      	ldr	r3, [r3, #0]
    f2ec:	4a0c      	ldr	r2, [pc, #48]	; (f320 <prvCheckForValidListAndQueue+0x7c>)
    f2ee:	0011      	movs	r1, r2
    f2f0:	0018      	movs	r0, r3
    f2f2:	4b0c      	ldr	r3, [pc, #48]	; (f324 <prvCheckForValidListAndQueue+0x80>)
    f2f4:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    f2f6:	4b0c      	ldr	r3, [pc, #48]	; (f328 <prvCheckForValidListAndQueue+0x84>)
    f2f8:	4798      	blx	r3
}
    f2fa:	46c0      	nop			; (mov r8, r8)
    f2fc:	46bd      	mov	sp, r7
    f2fe:	bd80      	pop	{r7, pc}
    f300:	0000d259 	.word	0x0000d259
    f304:	20003e7c 	.word	0x20003e7c
    f308:	20003e4c 	.word	0x20003e4c
    f30c:	0000cfdd 	.word	0x0000cfdd
    f310:	20003e60 	.word	0x20003e60
    f314:	20003e74 	.word	0x20003e74
    f318:	20003e78 	.word	0x20003e78
    f31c:	0000d4e5 	.word	0x0000d4e5
    f320:	00013de4 	.word	0x00013de4
    f324:	0000ddb1 	.word	0x0000ddb1
    f328:	0000d27d 	.word	0x0000d27d

0000f32c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    f32c:	b580      	push	{r7, lr}
    f32e:	b082      	sub	sp, #8
    f330:	af00      	add	r7, sp, #0
    f332:	0002      	movs	r2, r0
    f334:	1dfb      	adds	r3, r7, #7
    f336:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f338:	4b06      	ldr	r3, [pc, #24]	; (f354 <system_interrupt_enable+0x28>)
    f33a:	1dfa      	adds	r2, r7, #7
    f33c:	7812      	ldrb	r2, [r2, #0]
    f33e:	0011      	movs	r1, r2
    f340:	221f      	movs	r2, #31
    f342:	400a      	ands	r2, r1
    f344:	2101      	movs	r1, #1
    f346:	4091      	lsls	r1, r2
    f348:	000a      	movs	r2, r1
    f34a:	601a      	str	r2, [r3, #0]
}
    f34c:	46c0      	nop			; (mov r8, r8)
    f34e:	46bd      	mov	sp, r7
    f350:	b002      	add	sp, #8
    f352:	bd80      	pop	{r7, pc}
    f354:	e000e100 	.word	0xe000e100

0000f358 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    f358:	b580      	push	{r7, lr}
    f35a:	b084      	sub	sp, #16
    f35c:	af00      	add	r7, sp, #0
    f35e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    f360:	687b      	ldr	r3, [r7, #4]
    f362:	681b      	ldr	r3, [r3, #0]
    f364:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    f366:	68fb      	ldr	r3, [r7, #12]
    f368:	69db      	ldr	r3, [r3, #28]
    f36a:	1e5a      	subs	r2, r3, #1
    f36c:	4193      	sbcs	r3, r2
    f36e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    f370:	0018      	movs	r0, r3
    f372:	46bd      	mov	sp, r7
    f374:	b004      	add	sp, #16
    f376:	bd80      	pop	{r7, pc}

0000f378 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    f378:	b580      	push	{r7, lr}
    f37a:	b082      	sub	sp, #8
    f37c:	af00      	add	r7, sp, #0
    f37e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    f380:	46c0      	nop			; (mov r8, r8)
    f382:	687b      	ldr	r3, [r7, #4]
    f384:	0018      	movs	r0, r3
    f386:	4b04      	ldr	r3, [pc, #16]	; (f398 <_usart_wait_for_sync+0x20>)
    f388:	4798      	blx	r3
    f38a:	1e03      	subs	r3, r0, #0
    f38c:	d1f9      	bne.n	f382 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    f38e:	46c0      	nop			; (mov r8, r8)
    f390:	46bd      	mov	sp, r7
    f392:	b002      	add	sp, #8
    f394:	bd80      	pop	{r7, pc}
    f396:	46c0      	nop			; (mov r8, r8)
    f398:	0000f359 	.word	0x0000f359

0000f39c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    f39c:	b580      	push	{r7, lr}
    f39e:	b082      	sub	sp, #8
    f3a0:	af00      	add	r7, sp, #0
    f3a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    f3a4:	687b      	ldr	r3, [r7, #4]
    f3a6:	2280      	movs	r2, #128	; 0x80
    f3a8:	05d2      	lsls	r2, r2, #23
    f3aa:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    f3ac:	687b      	ldr	r3, [r7, #4]
    f3ae:	2200      	movs	r2, #0
    f3b0:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    f3b2:	687b      	ldr	r3, [r7, #4]
    f3b4:	22ff      	movs	r2, #255	; 0xff
    f3b6:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    f3b8:	687b      	ldr	r3, [r7, #4]
    f3ba:	2200      	movs	r2, #0
    f3bc:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    f3be:	687b      	ldr	r3, [r7, #4]
    f3c0:	2200      	movs	r2, #0
    f3c2:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    f3c4:	687b      	ldr	r3, [r7, #4]
    f3c6:	2296      	movs	r2, #150	; 0x96
    f3c8:	0192      	lsls	r2, r2, #6
    f3ca:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    f3cc:	687b      	ldr	r3, [r7, #4]
    f3ce:	2224      	movs	r2, #36	; 0x24
    f3d0:	2101      	movs	r1, #1
    f3d2:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    f3d4:	687b      	ldr	r3, [r7, #4]
    f3d6:	2225      	movs	r2, #37	; 0x25
    f3d8:	2101      	movs	r1, #1
    f3da:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    f3dc:	687b      	ldr	r3, [r7, #4]
    f3de:	2226      	movs	r2, #38	; 0x26
    f3e0:	2100      	movs	r1, #0
    f3e2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    f3e4:	687b      	ldr	r3, [r7, #4]
    f3e6:	2227      	movs	r2, #39	; 0x27
    f3e8:	2100      	movs	r1, #0
    f3ea:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    f3ec:	687b      	ldr	r3, [r7, #4]
    f3ee:	2200      	movs	r2, #0
    f3f0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    f3f2:	687b      	ldr	r3, [r7, #4]
    f3f4:	2288      	movs	r2, #136	; 0x88
    f3f6:	0352      	lsls	r2, r2, #13
    f3f8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    f3fa:	687b      	ldr	r3, [r7, #4]
    f3fc:	222c      	movs	r2, #44	; 0x2c
    f3fe:	2100      	movs	r1, #0
    f400:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    f402:	687b      	ldr	r3, [r7, #4]
    f404:	222d      	movs	r2, #45	; 0x2d
    f406:	2100      	movs	r1, #0
    f408:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    f40a:	687b      	ldr	r3, [r7, #4]
    f40c:	2200      	movs	r2, #0
    f40e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    f410:	687b      	ldr	r3, [r7, #4]
    f412:	2200      	movs	r2, #0
    f414:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    f416:	687b      	ldr	r3, [r7, #4]
    f418:	2200      	movs	r2, #0
    f41a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    f41c:	687b      	ldr	r3, [r7, #4]
    f41e:	2200      	movs	r2, #0
    f420:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    f422:	687b      	ldr	r3, [r7, #4]
    f424:	2200      	movs	r2, #0
    f426:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    f428:	687b      	ldr	r3, [r7, #4]
    f42a:	2200      	movs	r2, #0
    f42c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    f42e:	687b      	ldr	r3, [r7, #4]
    f430:	2200      	movs	r2, #0
    f432:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    f434:	687b      	ldr	r3, [r7, #4]
    f436:	2200      	movs	r2, #0
    f438:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    f43a:	687b      	ldr	r3, [r7, #4]
    f43c:	2200      	movs	r2, #0
    f43e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    f440:	687b      	ldr	r3, [r7, #4]
    f442:	2200      	movs	r2, #0
    f444:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    f446:	687b      	ldr	r3, [r7, #4]
    f448:	2213      	movs	r2, #19
    f44a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    f44c:	687b      	ldr	r3, [r7, #4]
    f44e:	2200      	movs	r2, #0
    f450:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    f452:	46c0      	nop			; (mov r8, r8)
    f454:	46bd      	mov	sp, r7
    f456:	b002      	add	sp, #8
    f458:	bd80      	pop	{r7, pc}
    f45a:	46c0      	nop			; (mov r8, r8)

0000f45c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    f45c:	b580      	push	{r7, lr}
    f45e:	b084      	sub	sp, #16
    f460:	af00      	add	r7, sp, #0
    f462:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    f464:	687b      	ldr	r3, [r7, #4]
    f466:	681b      	ldr	r3, [r3, #0]
    f468:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f46a:	687b      	ldr	r3, [r7, #4]
    f46c:	681b      	ldr	r3, [r3, #0]
    f46e:	0018      	movs	r0, r3
    f470:	4b09      	ldr	r3, [pc, #36]	; (f498 <usart_enable+0x3c>)
    f472:	4798      	blx	r3
    f474:	0003      	movs	r3, r0
    f476:	0018      	movs	r0, r3
    f478:	4b08      	ldr	r3, [pc, #32]	; (f49c <usart_enable+0x40>)
    f47a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    f47c:	687b      	ldr	r3, [r7, #4]
    f47e:	0018      	movs	r0, r3
    f480:	4b07      	ldr	r3, [pc, #28]	; (f4a0 <usart_enable+0x44>)
    f482:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    f484:	68fb      	ldr	r3, [r7, #12]
    f486:	681b      	ldr	r3, [r3, #0]
    f488:	2202      	movs	r2, #2
    f48a:	431a      	orrs	r2, r3
    f48c:	68fb      	ldr	r3, [r7, #12]
    f48e:	601a      	str	r2, [r3, #0]
}
    f490:	46c0      	nop			; (mov r8, r8)
    f492:	46bd      	mov	sp, r7
    f494:	b004      	add	sp, #16
    f496:	bd80      	pop	{r7, pc}
    f498:	0000a3d5 	.word	0x0000a3d5
    f49c:	0000f32d 	.word	0x0000f32d
    f4a0:	0000f379 	.word	0x0000f379

0000f4a4 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    f4a4:	b580      	push	{r7, lr}
    f4a6:	b084      	sub	sp, #16
    f4a8:	af00      	add	r7, sp, #0
    f4aa:	60f8      	str	r0, [r7, #12]
    f4ac:	60b9      	str	r1, [r7, #8]
    f4ae:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    f4b0:	687a      	ldr	r2, [r7, #4]
    f4b2:	68b9      	ldr	r1, [r7, #8]
    f4b4:	68fb      	ldr	r3, [r7, #12]
    f4b6:	0018      	movs	r0, r3
    f4b8:	4b05      	ldr	r3, [pc, #20]	; (f4d0 <usart_serial_init+0x2c>)
    f4ba:	4798      	blx	r3
    f4bc:	1e03      	subs	r3, r0, #0
    f4be:	d101      	bne.n	f4c4 <usart_serial_init+0x20>
		return true;
    f4c0:	2301      	movs	r3, #1
    f4c2:	e000      	b.n	f4c6 <usart_serial_init+0x22>
	}
	else {
		return false;
    f4c4:	2300      	movs	r3, #0
	}
}
    f4c6:	0018      	movs	r0, r3
    f4c8:	46bd      	mov	sp, r7
    f4ca:	b004      	add	sp, #16
    f4cc:	bd80      	pop	{r7, pc}
    f4ce:	46c0      	nop			; (mov r8, r8)
    f4d0:	0000b4d1 	.word	0x0000b4d1

0000f4d4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    f4d4:	b580      	push	{r7, lr}
    f4d6:	b082      	sub	sp, #8
    f4d8:	af00      	add	r7, sp, #0
    f4da:	6078      	str	r0, [r7, #4]
    f4dc:	000a      	movs	r2, r1
    f4de:	1cfb      	adds	r3, r7, #3
    f4e0:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    f4e2:	46c0      	nop			; (mov r8, r8)
    f4e4:	1cfb      	adds	r3, r7, #3
    f4e6:	781b      	ldrb	r3, [r3, #0]
    f4e8:	b29a      	uxth	r2, r3
    f4ea:	687b      	ldr	r3, [r7, #4]
    f4ec:	0011      	movs	r1, r2
    f4ee:	0018      	movs	r0, r3
    f4f0:	4b04      	ldr	r3, [pc, #16]	; (f504 <usart_serial_putchar+0x30>)
    f4f2:	4798      	blx	r3
    f4f4:	1e03      	subs	r3, r0, #0
    f4f6:	d1f5      	bne.n	f4e4 <usart_serial_putchar+0x10>

	return STATUS_OK;
    f4f8:	2300      	movs	r3, #0
}
    f4fa:	0018      	movs	r0, r3
    f4fc:	46bd      	mov	sp, r7
    f4fe:	b002      	add	sp, #8
    f500:	bd80      	pop	{r7, pc}
    f502:	46c0      	nop			; (mov r8, r8)
    f504:	0000b745 	.word	0x0000b745

0000f508 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    f508:	b580      	push	{r7, lr}
    f50a:	b084      	sub	sp, #16
    f50c:	af00      	add	r7, sp, #0
    f50e:	6078      	str	r0, [r7, #4]
    f510:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    f512:	230e      	movs	r3, #14
    f514:	18fb      	adds	r3, r7, r3
    f516:	2200      	movs	r2, #0
    f518:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    f51a:	46c0      	nop			; (mov r8, r8)
    f51c:	230e      	movs	r3, #14
    f51e:	18fa      	adds	r2, r7, r3
    f520:	687b      	ldr	r3, [r7, #4]
    f522:	0011      	movs	r1, r2
    f524:	0018      	movs	r0, r3
    f526:	4b07      	ldr	r3, [pc, #28]	; (f544 <usart_serial_getchar+0x3c>)
    f528:	4798      	blx	r3
    f52a:	1e03      	subs	r3, r0, #0
    f52c:	d1f6      	bne.n	f51c <usart_serial_getchar+0x14>

	*c = temp;
    f52e:	230e      	movs	r3, #14
    f530:	18fb      	adds	r3, r7, r3
    f532:	881b      	ldrh	r3, [r3, #0]
    f534:	b2da      	uxtb	r2, r3
    f536:	683b      	ldr	r3, [r7, #0]
    f538:	701a      	strb	r2, [r3, #0]
}
    f53a:	46c0      	nop			; (mov r8, r8)
    f53c:	46bd      	mov	sp, r7
    f53e:	b004      	add	sp, #16
    f540:	bd80      	pop	{r7, pc}
    f542:	46c0      	nop			; (mov r8, r8)
    f544:	0000b7a9 	.word	0x0000b7a9

0000f548 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    f548:	b580      	push	{r7, lr}
    f54a:	b084      	sub	sp, #16
    f54c:	af00      	add	r7, sp, #0
    f54e:	60f8      	str	r0, [r7, #12]
    f550:	60b9      	str	r1, [r7, #8]
    f552:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    f554:	4b10      	ldr	r3, [pc, #64]	; (f598 <stdio_serial_init+0x50>)
    f556:	68fa      	ldr	r2, [r7, #12]
    f558:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    f55a:	4b10      	ldr	r3, [pc, #64]	; (f59c <stdio_serial_init+0x54>)
    f55c:	4a10      	ldr	r2, [pc, #64]	; (f5a0 <stdio_serial_init+0x58>)
    f55e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    f560:	4b10      	ldr	r3, [pc, #64]	; (f5a4 <stdio_serial_init+0x5c>)
    f562:	4a11      	ldr	r2, [pc, #68]	; (f5a8 <stdio_serial_init+0x60>)
    f564:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    f566:	687a      	ldr	r2, [r7, #4]
    f568:	68b9      	ldr	r1, [r7, #8]
    f56a:	68fb      	ldr	r3, [r7, #12]
    f56c:	0018      	movs	r0, r3
    f56e:	4b0f      	ldr	r3, [pc, #60]	; (f5ac <stdio_serial_init+0x64>)
    f570:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    f572:	4b0f      	ldr	r3, [pc, #60]	; (f5b0 <stdio_serial_init+0x68>)
    f574:	681b      	ldr	r3, [r3, #0]
    f576:	689b      	ldr	r3, [r3, #8]
    f578:	2100      	movs	r1, #0
    f57a:	0018      	movs	r0, r3
    f57c:	4b0d      	ldr	r3, [pc, #52]	; (f5b4 <stdio_serial_init+0x6c>)
    f57e:	4798      	blx	r3
	setbuf(stdin, NULL);
    f580:	4b0b      	ldr	r3, [pc, #44]	; (f5b0 <stdio_serial_init+0x68>)
    f582:	681b      	ldr	r3, [r3, #0]
    f584:	685b      	ldr	r3, [r3, #4]
    f586:	2100      	movs	r1, #0
    f588:	0018      	movs	r0, r3
    f58a:	4b0a      	ldr	r3, [pc, #40]	; (f5b4 <stdio_serial_init+0x6c>)
    f58c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    f58e:	46c0      	nop			; (mov r8, r8)
    f590:	46bd      	mov	sp, r7
    f592:	b004      	add	sp, #16
    f594:	bd80      	pop	{r7, pc}
    f596:	46c0      	nop			; (mov r8, r8)
    f598:	200047c0 	.word	0x200047c0
    f59c:	200047bc 	.word	0x200047bc
    f5a0:	0000f4d5 	.word	0x0000f4d5
    f5a4:	200047b8 	.word	0x200047b8
    f5a8:	0000f509 	.word	0x0000f509
    f5ac:	0000f4a5 	.word	0x0000f4a5
    f5b0:	20000098 	.word	0x20000098
    f5b4:	00011631 	.word	0x00011631

0000f5b8 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    f5b8:	b580      	push	{r7, lr}
    f5ba:	b084      	sub	sp, #16
    f5bc:	af00      	add	r7, sp, #0
    f5be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f5c0:	687b      	ldr	r3, [r7, #4]
    f5c2:	681b      	ldr	r3, [r3, #0]
    f5c4:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    f5c6:	68fb      	ldr	r3, [r7, #12]
    f5c8:	7bdb      	ldrb	r3, [r3, #15]
    f5ca:	b2db      	uxtb	r3, r3
    f5cc:	001a      	movs	r2, r3
    f5ce:	2380      	movs	r3, #128	; 0x80
    f5d0:	4013      	ands	r3, r2
    f5d2:	1e5a      	subs	r2, r3, #1
    f5d4:	4193      	sbcs	r3, r2
    f5d6:	b2db      	uxtb	r3, r3
#endif
}
    f5d8:	0018      	movs	r0, r3
    f5da:	46bd      	mov	sp, r7
    f5dc:	b004      	add	sp, #16
    f5de:	bd80      	pop	{r7, pc}

0000f5e0 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    f5e0:	b580      	push	{r7, lr}
    f5e2:	b082      	sub	sp, #8
    f5e4:	af00      	add	r7, sp, #0
    f5e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    f5e8:	687b      	ldr	r3, [r7, #4]
    f5ea:	2200      	movs	r2, #0
    f5ec:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f5ee:	687b      	ldr	r3, [r7, #4]
    f5f0:	2200      	movs	r2, #0
    f5f2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f5f4:	687b      	ldr	r3, [r7, #4]
    f5f6:	2200      	movs	r2, #0
    f5f8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f5fa:	687b      	ldr	r3, [r7, #4]
    f5fc:	2200      	movs	r2, #0
    f5fe:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f600:	687b      	ldr	r3, [r7, #4]
    f602:	2200      	movs	r2, #0
    f604:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    f606:	687b      	ldr	r3, [r7, #4]
    f608:	2200      	movs	r2, #0
    f60a:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f60c:	687b      	ldr	r3, [r7, #4]
    f60e:	2200      	movs	r2, #0
    f610:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	2200      	movs	r2, #0
    f616:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f618:	687b      	ldr	r3, [r7, #4]
    f61a:	2200      	movs	r2, #0
    f61c:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f61e:	687b      	ldr	r3, [r7, #4]
    f620:	2200      	movs	r2, #0
    f622:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    f624:	687b      	ldr	r3, [r7, #4]
    f626:	2200      	movs	r2, #0
    f628:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f62a:	687b      	ldr	r3, [r7, #4]
    f62c:	2200      	movs	r2, #0
    f62e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f630:	687b      	ldr	r3, [r7, #4]
    f632:	2200      	movs	r2, #0
    f634:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f636:	687b      	ldr	r3, [r7, #4]
    f638:	2200      	movs	r2, #0
    f63a:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f63c:	687b      	ldr	r3, [r7, #4]
    f63e:	2200      	movs	r2, #0
    f640:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f642:	687b      	ldr	r3, [r7, #4]
    f644:	2200      	movs	r2, #0
    f646:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f648:	687b      	ldr	r3, [r7, #4]
    f64a:	2200      	movs	r2, #0
    f64c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    f64e:	687b      	ldr	r3, [r7, #4]
    f650:	2200      	movs	r2, #0
    f652:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    f654:	687b      	ldr	r3, [r7, #4]
    f656:	2200      	movs	r2, #0
    f658:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f65a:	687b      	ldr	r3, [r7, #4]
    f65c:	2200      	movs	r2, #0
    f65e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    f660:	46c0      	nop			; (mov r8, r8)
    f662:	46bd      	mov	sp, r7
    f664:	b002      	add	sp, #8
    f666:	bd80      	pop	{r7, pc}

0000f668 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    f668:	b580      	push	{r7, lr}
    f66a:	b084      	sub	sp, #16
    f66c:	af00      	add	r7, sp, #0
    f66e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f670:	687b      	ldr	r3, [r7, #4]
    f672:	681b      	ldr	r3, [r3, #0]
    f674:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    f676:	46c0      	nop			; (mov r8, r8)
    f678:	687b      	ldr	r3, [r7, #4]
    f67a:	0018      	movs	r0, r3
    f67c:	4b07      	ldr	r3, [pc, #28]	; (f69c <tc_enable+0x34>)
    f67e:	4798      	blx	r3
    f680:	1e03      	subs	r3, r0, #0
    f682:	d1f9      	bne.n	f678 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f684:	68fb      	ldr	r3, [r7, #12]
    f686:	881b      	ldrh	r3, [r3, #0]
    f688:	b29b      	uxth	r3, r3
    f68a:	2202      	movs	r2, #2
    f68c:	4313      	orrs	r3, r2
    f68e:	b29a      	uxth	r2, r3
    f690:	68fb      	ldr	r3, [r7, #12]
    f692:	801a      	strh	r2, [r3, #0]
}
    f694:	46c0      	nop			; (mov r8, r8)
    f696:	46bd      	mov	sp, r7
    f698:	b004      	add	sp, #16
    f69a:	bd80      	pop	{r7, pc}
    f69c:	0000f5b9 	.word	0x0000f5b9

0000f6a0 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    f6a0:	b580      	push	{r7, lr}
    f6a2:	b084      	sub	sp, #16
    f6a4:	af00      	add	r7, sp, #0
    f6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f6a8:	687b      	ldr	r3, [r7, #4]
    f6aa:	681b      	ldr	r3, [r3, #0]
    f6ac:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    f6ae:	46c0      	nop			; (mov r8, r8)
    f6b0:	687b      	ldr	r3, [r7, #4]
    f6b2:	0018      	movs	r0, r3
    f6b4:	4b0a      	ldr	r3, [pc, #40]	; (f6e0 <tc_disable+0x40>)
    f6b6:	4798      	blx	r3
    f6b8:	1e03      	subs	r3, r0, #0
    f6ba:	d1f9      	bne.n	f6b0 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    f6bc:	68fb      	ldr	r3, [r7, #12]
    f6be:	223b      	movs	r2, #59	; 0x3b
    f6c0:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    f6c2:	68fb      	ldr	r3, [r7, #12]
    f6c4:	223b      	movs	r2, #59	; 0x3b
    f6c6:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    f6c8:	68fb      	ldr	r3, [r7, #12]
    f6ca:	881b      	ldrh	r3, [r3, #0]
    f6cc:	b29b      	uxth	r3, r3
    f6ce:	2202      	movs	r2, #2
    f6d0:	4393      	bics	r3, r2
    f6d2:	b29a      	uxth	r2, r3
    f6d4:	68fb      	ldr	r3, [r7, #12]
    f6d6:	801a      	strh	r2, [r3, #0]
}
    f6d8:	46c0      	nop			; (mov r8, r8)
    f6da:	46bd      	mov	sp, r7
    f6dc:	b004      	add	sp, #16
    f6de:	bd80      	pop	{r7, pc}
    f6e0:	0000f5b9 	.word	0x0000f5b9

0000f6e4 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    f6e4:	b580      	push	{r7, lr}
    f6e6:	b090      	sub	sp, #64	; 0x40
    f6e8:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    f6ea:	003b      	movs	r3, r7
    f6ec:	0018      	movs	r0, r3
    f6ee:	4b14      	ldr	r3, [pc, #80]	; (f740 <configure_console+0x5c>)
    f6f0:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    f6f2:	003b      	movs	r3, r7
    f6f4:	22c4      	movs	r2, #196	; 0xc4
    f6f6:	0392      	lsls	r2, r2, #14
    f6f8:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    f6fa:	003b      	movs	r3, r7
    f6fc:	2201      	movs	r2, #1
    f6fe:	4252      	negs	r2, r2
    f700:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    f702:	003b      	movs	r3, r7
    f704:	2201      	movs	r2, #1
    f706:	4252      	negs	r2, r2
    f708:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    f70a:	003b      	movs	r3, r7
    f70c:	2201      	movs	r2, #1
    f70e:	4252      	negs	r2, r2
    f710:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    f712:	003b      	movs	r3, r7
    f714:	2201      	movs	r2, #1
    f716:	4252      	negs	r2, r2
    f718:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    f71a:	003b      	movs	r3, r7
    f71c:	22e1      	movs	r2, #225	; 0xe1
    f71e:	0252      	lsls	r2, r2, #9
    f720:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    f722:	003a      	movs	r2, r7
    f724:	4907      	ldr	r1, [pc, #28]	; (f744 <configure_console+0x60>)
    f726:	4b08      	ldr	r3, [pc, #32]	; (f748 <configure_console+0x64>)
    f728:	0018      	movs	r0, r3
    f72a:	4b08      	ldr	r3, [pc, #32]	; (f74c <configure_console+0x68>)
    f72c:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    f72e:	4b06      	ldr	r3, [pc, #24]	; (f748 <configure_console+0x64>)
    f730:	0018      	movs	r0, r3
    f732:	4b07      	ldr	r3, [pc, #28]	; (f750 <configure_console+0x6c>)
    f734:	4798      	blx	r3
}
    f736:	46c0      	nop			; (mov r8, r8)
    f738:	46bd      	mov	sp, r7
    f73a:	b010      	add	sp, #64	; 0x40
    f73c:	bd80      	pop	{r7, pc}
    f73e:	46c0      	nop			; (mov r8, r8)
    f740:	0000f39d 	.word	0x0000f39d
    f744:	42001400 	.word	0x42001400
    f748:	20003e88 	.word	0x20003e88
    f74c:	0000f549 	.word	0x0000f549
    f750:	0000f45d 	.word	0x0000f45d

0000f754 <task_3s>:

static void task_3s(void *args)
{    
    f754:	b580      	push	{r7, lr}
    f756:	b084      	sub	sp, #16
    f758:	af00      	add	r7, sp, #0
    f75a:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    f75c:	2396      	movs	r3, #150	; 0x96
    f75e:	005b      	lsls	r3, r3, #1
    f760:	60fb      	str	r3, [r7, #12]

    lastTimer = xTaskGetTickCount();
    f762:	4b08      	ldr	r3, [pc, #32]	; (f784 <task_3s+0x30>)
    f764:	4798      	blx	r3
    f766:	0003      	movs	r3, r0
    f768:	60bb      	str	r3, [r7, #8]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);        
    f76a:	68fa      	ldr	r2, [r7, #12]
    f76c:	2308      	movs	r3, #8
    f76e:	18fb      	adds	r3, r7, r3
    f770:	0011      	movs	r1, r2
    f772:	0018      	movs	r0, r3
    f774:	4b04      	ldr	r3, [pc, #16]	; (f788 <task_3s+0x34>)
    f776:	4798      	blx	r3
                    
        thermal_3s();
    f778:	4b04      	ldr	r3, [pc, #16]	; (f78c <task_3s+0x38>)
    f77a:	4798      	blx	r3
        wifi_task_3s();
    f77c:	4b04      	ldr	r3, [pc, #16]	; (f790 <task_3s+0x3c>)
    f77e:	4798      	blx	r3
    }
    f780:	e7f3      	b.n	f76a <task_3s+0x16>
    f782:	46c0      	nop			; (mov r8, r8)
    f784:	0000e4a9 	.word	0x0000e4a9
    f788:	0000e1b1 	.word	0x0000e1b1
    f78c:	000025b1 	.word	0x000025b1
    f790:	00000c09 	.word	0x00000c09

0000f794 <task_1s>:
}

static void task_1s(void *args)
{
    f794:	b580      	push	{r7, lr}
    f796:	b084      	sub	sp, #16
    f798:	af00      	add	r7, sp, #0
    f79a:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    f79c:	4b08      	ldr	r3, [pc, #32]	; (f7c0 <task_1s+0x2c>)
    f79e:	4798      	blx	r3
    f7a0:	0003      	movs	r3, r0
    f7a2:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(500);
    f7a4:	2332      	movs	r3, #50	; 0x32
    f7a6:	60fb      	str	r3, [r7, #12]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    f7a8:	68fa      	ldr	r2, [r7, #12]
    f7aa:	2308      	movs	r3, #8
    f7ac:	18fb      	adds	r3, r7, r3
    f7ae:	0011      	movs	r1, r2
    f7b0:	0018      	movs	r0, r3
    f7b2:	4b04      	ldr	r3, [pc, #16]	; (f7c4 <task_1s+0x30>)
    f7b4:	4798      	blx	r3

        wifi_task_1s();    
    f7b6:	4b04      	ldr	r3, [pc, #16]	; (f7c8 <task_1s+0x34>)
    f7b8:	4798      	blx	r3
               
        display_update_1Hz();
    f7ba:	4b04      	ldr	r3, [pc, #16]	; (f7cc <task_1s+0x38>)
    f7bc:	4798      	blx	r3
    }
    f7be:	e7f3      	b.n	f7a8 <task_1s+0x14>
    f7c0:	0000e4a9 	.word	0x0000e4a9
    f7c4:	0000e1b1 	.word	0x0000e1b1
    f7c8:	00000cd9 	.word	0x00000cd9
    f7cc:	00001c9d 	.word	0x00001c9d

0000f7d0 <task_33Hz>:

}

#include "tm1640.h"
static void task_33Hz(void *args)
{
    f7d0:	b580      	push	{r7, lr}
    f7d2:	b084      	sub	sp, #16
    f7d4:	af00      	add	r7, sp, #0
    f7d6:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    // Turn on the display
    tm1640_display_on(1);
    f7d8:	2001      	movs	r0, #1
    f7da:	4b09      	ldr	r3, [pc, #36]	; (f800 <task_33Hz+0x30>)
    f7dc:	4798      	blx	r3

    lastTimer = xTaskGetTickCount();
    f7de:	4b09      	ldr	r3, [pc, #36]	; (f804 <task_33Hz+0x34>)
    f7e0:	4798      	blx	r3
    f7e2:	0003      	movs	r3, r0
    f7e4:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(MAIN_33HZ_TASK_INTERVAL);        
    f7e6:	2303      	movs	r3, #3
    f7e8:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    f7ea:	68fa      	ldr	r2, [r7, #12]
    f7ec:	2308      	movs	r3, #8
    f7ee:	18fb      	adds	r3, r7, r3
    f7f0:	0011      	movs	r1, r2
    f7f2:	0018      	movs	r0, r3
    f7f4:	4b04      	ldr	r3, [pc, #16]	; (f808 <task_33Hz+0x38>)
    f7f6:	4798      	blx	r3

        display_update_33Hz();
    f7f8:	4b04      	ldr	r3, [pc, #16]	; (f80c <task_33Hz+0x3c>)
    f7fa:	4798      	blx	r3

    }
    f7fc:	e7f5      	b.n	f7ea <task_33Hz+0x1a>
    f7fe:	46c0      	nop			; (mov r8, r8)
    f800:	00002cb9 	.word	0x00002cb9
    f804:	0000e4a9 	.word	0x0000e4a9
    f808:	0000e1b1 	.word	0x0000e1b1
    f80c:	00001e05 	.word	0x00001e05

0000f810 <task_Buzzer>:
}

static void task_Buzzer(void *args)
{
    f810:	b590      	push	{r4, r7, lr}
    f812:	b097      	sub	sp, #92	; 0x5c
    f814:	af00      	add	r7, sp, #0
    f816:	6078      	str	r0, [r7, #4]
    struct tc_module buzz_module;
    struct tc_config buzz_config;    

    tc_get_config_defaults(&buzz_config);
    f818:	2308      	movs	r3, #8
    f81a:	18fb      	adds	r3, r7, r3
    f81c:	0018      	movs	r0, r3
    f81e:	4b24      	ldr	r3, [pc, #144]	; (f8b0 <task_Buzzer+0xa0>)
    f820:	4798      	blx	r3
    buzz_config.clock_source = GCLK_GENERATOR_5; // ~500kHz
    f822:	2308      	movs	r3, #8
    f824:	18fb      	adds	r3, r7, r3
    f826:	2205      	movs	r2, #5
    f828:	701a      	strb	r2, [r3, #0]
    buzz_config.run_in_standby = true;
    f82a:	2308      	movs	r3, #8
    f82c:	18fb      	adds	r3, r7, r3
    f82e:	2201      	movs	r2, #1
    f830:	705a      	strb	r2, [r3, #1]
    buzz_config.counter_size = TC_COUNTER_SIZE_8BIT;
    f832:	2308      	movs	r3, #8
    f834:	18fb      	adds	r3, r7, r3
    f836:	2204      	movs	r2, #4
    f838:	709a      	strb	r2, [r3, #2]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = true;
    f83a:	2308      	movs	r3, #8
    f83c:	18fb      	adds	r3, r7, r3
    f83e:	2201      	movs	r2, #1
    f840:	771a      	strb	r2, [r3, #28]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = (PINMUX_PB11E_TC5_WO1) >> 16;
    f842:	2308      	movs	r3, #8
    f844:	18fb      	adds	r3, r7, r3
    f846:	222b      	movs	r2, #43	; 0x2b
    f848:	621a      	str	r2, [r3, #32]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = PINMUX_PB11E_TC5_WO1;
    f84a:	2308      	movs	r3, #8
    f84c:	18fb      	adds	r3, r7, r3
    f84e:	4a19      	ldr	r2, [pc, #100]	; (f8b4 <task_Buzzer+0xa4>)
    f850:	625a      	str	r2, [r3, #36]	; 0x24
    buzz_config.counter_8_bit.period = (500000 / BUZZER_FREQUENCY) / 2;
    f852:	2308      	movs	r3, #8
    f854:	18fb      	adds	r3, r7, r3
    f856:	2229      	movs	r2, #41	; 0x29
    f858:	2153      	movs	r1, #83	; 0x53
    f85a:	5499      	strb	r1, [r3, r2]
    buzz_config.counter_8_bit.value = 0;
    f85c:	2308      	movs	r3, #8
    f85e:	18fb      	adds	r3, r7, r3
    f860:	2228      	movs	r2, #40	; 0x28
    f862:	2100      	movs	r1, #0
    f864:	5499      	strb	r1, [r3, r2]

    tc_init(&buzz_module, TC5, &buzz_config);    
    f866:	2308      	movs	r3, #8
    f868:	18fa      	adds	r2, r7, r3
    f86a:	4913      	ldr	r1, [pc, #76]	; (f8b8 <task_Buzzer+0xa8>)
    f86c:	233c      	movs	r3, #60	; 0x3c
    f86e:	18fb      	adds	r3, r7, r3
    f870:	0018      	movs	r0, r3
    f872:	4b12      	ldr	r3, [pc, #72]	; (f8bc <task_Buzzer+0xac>)
    f874:	4798      	blx	r3

    while(1) {
        xSemaphoreTake(buzzer_sem, portMAX_DELAY);
    f876:	4b12      	ldr	r3, [pc, #72]	; (f8c0 <task_Buzzer+0xb0>)
    f878:	6818      	ldr	r0, [r3, #0]
    f87a:	2301      	movs	r3, #1
    f87c:	425a      	negs	r2, r3
    f87e:	2300      	movs	r3, #0
    f880:	2100      	movs	r1, #0
    f882:	4c10      	ldr	r4, [pc, #64]	; (f8c4 <task_Buzzer+0xb4>)
    f884:	47a0      	blx	r4

        // When another task gives up the semaphore, the buzzer will run 
        // for the set delay time.
        tc_set_count_value(&buzz_module, 0);
    f886:	233c      	movs	r3, #60	; 0x3c
    f888:	18fb      	adds	r3, r7, r3
    f88a:	2100      	movs	r1, #0
    f88c:	0018      	movs	r0, r3
    f88e:	4b0e      	ldr	r3, [pc, #56]	; (f8c8 <task_Buzzer+0xb8>)
    f890:	4798      	blx	r3
        tc_enable(&buzz_module);        
    f892:	233c      	movs	r3, #60	; 0x3c
    f894:	18fb      	adds	r3, r7, r3
    f896:	0018      	movs	r0, r3
    f898:	4b0c      	ldr	r3, [pc, #48]	; (f8cc <task_Buzzer+0xbc>)
    f89a:	4798      	blx	r3
        vTaskDelay(pdMS_TO_TICKS(BUZZER_ON_TIME));
    f89c:	2019      	movs	r0, #25
    f89e:	4b0c      	ldr	r3, [pc, #48]	; (f8d0 <task_Buzzer+0xc0>)
    f8a0:	4798      	blx	r3
        tc_disable(&buzz_module);
    f8a2:	233c      	movs	r3, #60	; 0x3c
    f8a4:	18fb      	adds	r3, r7, r3
    f8a6:	0018      	movs	r0, r3
    f8a8:	4b0a      	ldr	r3, [pc, #40]	; (f8d4 <task_Buzzer+0xc4>)
    f8aa:	4798      	blx	r3
    }
    f8ac:	e7e3      	b.n	f876 <task_Buzzer+0x66>
    f8ae:	46c0      	nop			; (mov r8, r8)
    f8b0:	0000f5e1 	.word	0x0000f5e1
    f8b4:	002b0004 	.word	0x002b0004
    f8b8:	42003400 	.word	0x42003400
    f8bc:	0000115d 	.word	0x0000115d
    f8c0:	200045b4 	.word	0x200045b4
    f8c4:	0000d921 	.word	0x0000d921
    f8c8:	000015b9 	.word	0x000015b9
    f8cc:	0000f669 	.word	0x0000f669
    f8d0:	0000e279 	.word	0x0000e279
    f8d4:	0000f6a1 	.word	0x0000f6a1

0000f8d8 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{         
    f8d8:	b580      	push	{r7, lr}
    f8da:	af00      	add	r7, sp, #0
    wifi_task_idle();
    f8dc:	4b03      	ldr	r3, [pc, #12]	; (f8ec <vApplicationIdleHook+0x14>)
    f8de:	4798      	blx	r3
    display_idle();
    f8e0:	4b03      	ldr	r3, [pc, #12]	; (f8f0 <vApplicationIdleHook+0x18>)
    f8e2:	4798      	blx	r3
}
    f8e4:	46c0      	nop			; (mov r8, r8)
    f8e6:	46bd      	mov	sp, r7
    f8e8:	bd80      	pop	{r7, pc}
    f8ea:	46c0      	nop			; (mov r8, r8)
    f8ec:	00000f49 	.word	0x00000f49
    f8f0:	00001c3d 	.word	0x00001c3d

0000f8f4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    f8f4:	b580      	push	{r7, lr}
    f8f6:	b082      	sub	sp, #8
    f8f8:	af00      	add	r7, sp, #0
    f8fa:	6078      	str	r0, [r7, #4]
    f8fc:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    f8fe:	683a      	ldr	r2, [r7, #0]
    f900:	4b02      	ldr	r3, [pc, #8]	; (f90c <vApplicationStackOverflowHook+0x18>)
    f902:	0011      	movs	r1, r2
    f904:	0018      	movs	r0, r3
    f906:	4b02      	ldr	r3, [pc, #8]	; (f910 <vApplicationStackOverflowHook+0x1c>)
    f908:	4798      	blx	r3
    while (1) {}
    f90a:	e7fe      	b.n	f90a <vApplicationStackOverflowHook+0x16>
    f90c:	00013e14 	.word	0x00013e14
    f910:	000114d9 	.word	0x000114d9

0000f914 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook(void);
void vApplicationMallocFailedHook(void)
{
    f914:	b580      	push	{r7, lr}
    f916:	af00      	add	r7, sp, #0
    printf("Malloc failed!\n\r");
    f918:	4b02      	ldr	r3, [pc, #8]	; (f924 <vApplicationMallocFailedHook+0x10>)
    f91a:	0018      	movs	r0, r3
    f91c:	4b02      	ldr	r3, [pc, #8]	; (f928 <vApplicationMallocFailedHook+0x14>)
    f91e:	4798      	blx	r3
    while(1) {}
    f920:	e7fe      	b.n	f920 <vApplicationMallocFailedHook+0xc>
    f922:	46c0      	nop			; (mov r8, r8)
    f924:	00013e2c 	.word	0x00013e2c
    f928:	000114d9 	.word	0x000114d9

0000f92c <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    f92c:	b590      	push	{r4, r7, lr}
    f92e:	b083      	sub	sp, #12
    f930:	af02      	add	r7, sp, #8
	/* Initialize the board. */
	system_init();
    f932:	4b24      	ldr	r3, [pc, #144]	; (f9c4 <main+0x98>)
    f934:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    f936:	4b24      	ldr	r3, [pc, #144]	; (f9c8 <main+0x9c>)
    f938:	4798      	blx	r3

	/* Initialize the delay driver. */
	delay_init();	
    f93a:	4b24      	ldr	r3, [pc, #144]	; (f9cc <main+0xa0>)
    f93c:	4798      	blx	r3

    /* Initialize the display */
    display_init();	
    f93e:	4b24      	ldr	r3, [pc, #144]	; (f9d0 <main+0xa4>)
    f940:	4798      	blx	r3

    wifi_init();	    
    f942:	4b24      	ldr	r3, [pc, #144]	; (f9d4 <main+0xa8>)
    f944:	4798      	blx	r3

    thermal_init();
    f946:	4b24      	ldr	r3, [pc, #144]	; (f9d8 <main+0xac>)
    f948:	4798      	blx	r3

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE, 0, TASK_3S_PRIORITY, NULL);
    f94a:	2380      	movs	r3, #128	; 0x80
    f94c:	009a      	lsls	r2, r3, #2
    f94e:	4923      	ldr	r1, [pc, #140]	; (f9dc <main+0xb0>)
    f950:	4823      	ldr	r0, [pc, #140]	; (f9e0 <main+0xb4>)
    f952:	2300      	movs	r3, #0
    f954:	9301      	str	r3, [sp, #4]
    f956:	2301      	movs	r3, #1
    f958:	9300      	str	r3, [sp, #0]
    f95a:	2300      	movs	r3, #0
    f95c:	4c21      	ldr	r4, [pc, #132]	; (f9e4 <main+0xb8>)
    f95e:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    f960:	2380      	movs	r3, #128	; 0x80
    f962:	009a      	lsls	r2, r3, #2
    f964:	4920      	ldr	r1, [pc, #128]	; (f9e8 <main+0xbc>)
    f966:	4821      	ldr	r0, [pc, #132]	; (f9ec <main+0xc0>)
    f968:	2300      	movs	r3, #0
    f96a:	9301      	str	r3, [sp, #4]
    f96c:	2301      	movs	r3, #1
    f96e:	9300      	str	r3, [sp, #0]
    f970:	2300      	movs	r3, #0
    f972:	4c1c      	ldr	r4, [pc, #112]	; (f9e4 <main+0xb8>)
    f974:	47a0      	blx	r4
    xTaskCreate(task_33Hz, "task_33Hz", configMINIMAL_STACK_SIZE, 0, TASK_50HZ_PRIORITY, NULL); 
    f976:	2380      	movs	r3, #128	; 0x80
    f978:	009a      	lsls	r2, r3, #2
    f97a:	491d      	ldr	r1, [pc, #116]	; (f9f0 <main+0xc4>)
    f97c:	481d      	ldr	r0, [pc, #116]	; (f9f4 <main+0xc8>)
    f97e:	2300      	movs	r3, #0
    f980:	9301      	str	r3, [sp, #4]
    f982:	2301      	movs	r3, #1
    f984:	9300      	str	r3, [sp, #0]
    f986:	2300      	movs	r3, #0
    f988:	4c16      	ldr	r4, [pc, #88]	; (f9e4 <main+0xb8>)
    f98a:	47a0      	blx	r4
    xTaskCreate(task_Buzzer, "task_Buzzer", 100, 0, tskIDLE_PRIORITY, NULL);
    f98c:	491a      	ldr	r1, [pc, #104]	; (f9f8 <main+0xcc>)
    f98e:	481b      	ldr	r0, [pc, #108]	; (f9fc <main+0xd0>)
    f990:	2300      	movs	r3, #0
    f992:	9301      	str	r3, [sp, #4]
    f994:	2300      	movs	r3, #0
    f996:	9300      	str	r3, [sp, #0]
    f998:	2300      	movs	r3, #0
    f99a:	2264      	movs	r2, #100	; 0x64
    f99c:	4c11      	ldr	r4, [pc, #68]	; (f9e4 <main+0xb8>)
    f99e:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    f9a0:	2001      	movs	r0, #1
    f9a2:	4b17      	ldr	r3, [pc, #92]	; (fa00 <main+0xd4>)
    f9a4:	4798      	blx	r3
    f9a6:	0002      	movs	r2, r0
    f9a8:	4b16      	ldr	r3, [pc, #88]	; (fa04 <main+0xd8>)
    f9aa:	601a      	str	r2, [r3, #0]
    buzzer_sem = xSemaphoreCreateBinary();
    f9ac:	2203      	movs	r2, #3
    f9ae:	2100      	movs	r1, #0
    f9b0:	2001      	movs	r0, #1
    f9b2:	4b15      	ldr	r3, [pc, #84]	; (fa08 <main+0xdc>)
    f9b4:	4798      	blx	r3
    f9b6:	0002      	movs	r2, r0
    f9b8:	4b14      	ldr	r3, [pc, #80]	; (fa0c <main+0xe0>)
    f9ba:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    f9bc:	4b14      	ldr	r3, [pc, #80]	; (fa10 <main+0xe4>)
    f9be:	4798      	blx	r3

    while(1) {}
    f9c0:	e7fe      	b.n	f9c0 <main+0x94>
    f9c2:	46c0      	nop			; (mov r8, r8)
    f9c4:	0000cc51 	.word	0x0000cc51
    f9c8:	0000f6e5 	.word	0x0000f6e5
    f9cc:	00000115 	.word	0x00000115
    f9d0:	00001bdd 	.word	0x00001bdd
    f9d4:	00000aa9 	.word	0x00000aa9
    f9d8:	00002455 	.word	0x00002455
    f9dc:	00013e40 	.word	0x00013e40
    f9e0:	0000f755 	.word	0x0000f755
    f9e4:	0000df1d 	.word	0x0000df1d
    f9e8:	00013e48 	.word	0x00013e48
    f9ec:	0000f795 	.word	0x0000f795
    f9f0:	00013e50 	.word	0x00013e50
    f9f4:	0000f7d1 	.word	0x0000f7d1
    f9f8:	00013e5c 	.word	0x00013e5c
    f9fc:	0000f811 	.word	0x0000f811
    fa00:	0000d5e1 	.word	0x0000d5e1
    fa04:	200045b0 	.word	0x200045b0
    fa08:	0000d4e5 	.word	0x0000d4e5
    fa0c:	200045b4 	.word	0x200045b4
    fa10:	0000e2d5 	.word	0x0000e2d5

0000fa14 <HardFault_Handler>:

	return 0;
}

void HardFault_Handler(void)
{
    fa14:	b580      	push	{r7, lr}
    fa16:	af00      	add	r7, sp, #0
    __asm volatile
    fa18:	f3ef 8009 	mrs	r0, PSP
    fa1c:	6981      	ldr	r1, [r0, #24]
    (
        "mrs r0,psp         \n"
        "ldr r1,[r0,#24]    \n"    // r1 will contain the address where the hard fault occurred
    );    
}
    fa1e:	46c0      	nop			; (mov r8, r8)
    fa20:	46bd      	mov	sp, r7
    fa22:	bd80      	pop	{r7, pc}

0000fa24 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    fa24:	b590      	push	{r4, r7, lr}
    fa26:	b0dd      	sub	sp, #372	; 0x174
    fa28:	af00      	add	r7, sp, #0
    fa2a:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    fa2c:	687b      	ldr	r3, [r7, #4]
    fa2e:	2252      	movs	r2, #82	; 0x52
    fa30:	5c9b      	ldrb	r3, [r3, r2]
    fa32:	2b03      	cmp	r3, #3
    fa34:	d126      	bne.n	fa84 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    fa36:	4b1e      	ldr	r3, [pc, #120]	; (fab0 <handle_transaction+0x8c>)
    fa38:	22b8      	movs	r2, #184	; 0xb8
    fa3a:	0052      	lsls	r2, r2, #1
    fa3c:	4694      	mov	ip, r2
    fa3e:	44bc      	add	ip, r7
    fa40:	4463      	add	r3, ip
    fa42:	0018      	movs	r0, r3
    fa44:	2366      	movs	r3, #102	; 0x66
    fa46:	33ff      	adds	r3, #255	; 0xff
    fa48:	001a      	movs	r2, r3
    fa4a:	2100      	movs	r1, #0
    fa4c:	4b19      	ldr	r3, [pc, #100]	; (fab4 <handle_transaction+0x90>)
    fa4e:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    fa50:	687b      	ldr	r3, [r7, #4]
    fa52:	3354      	adds	r3, #84	; 0x54
    fa54:	001a      	movs	r2, r3
    fa56:	4b18      	ldr	r3, [pc, #96]	; (fab8 <handle_transaction+0x94>)
    fa58:	4918      	ldr	r1, [pc, #96]	; (fabc <handle_transaction+0x98>)
    fa5a:	2008      	movs	r0, #8
    fa5c:	1838      	adds	r0, r7, r0
    fa5e:	4c18      	ldr	r4, [pc, #96]	; (fac0 <handle_transaction+0x9c>)
    fa60:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    fa62:	687b      	ldr	r3, [r7, #4]
    fa64:	2253      	movs	r2, #83	; 0x53
    fa66:	569c      	ldrsb	r4, [r3, r2]
    fa68:	2308      	movs	r3, #8
    fa6a:	18fb      	adds	r3, r7, r3
    fa6c:	0018      	movs	r0, r3
    fa6e:	4b15      	ldr	r3, [pc, #84]	; (fac4 <handle_transaction+0xa0>)
    fa70:	4798      	blx	r3
    fa72:	0003      	movs	r3, r0
    fa74:	b29a      	uxth	r2, r3
    fa76:	2308      	movs	r3, #8
    fa78:	18f9      	adds	r1, r7, r3
    fa7a:	2300      	movs	r3, #0
    fa7c:	0020      	movs	r0, r4
    fa7e:	4c12      	ldr	r4, [pc, #72]	; (fac8 <handle_transaction+0xa4>)
    fa80:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    fa82:	e010      	b.n	faa6 <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    fa84:	687b      	ldr	r3, [r7, #4]
    fa86:	2252      	movs	r2, #82	; 0x52
    fa88:	5c9b      	ldrb	r3, [r3, r2]
    fa8a:	2b04      	cmp	r3, #4
    fa8c:	d10b      	bne.n	faa6 <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    fa8e:	687b      	ldr	r3, [r7, #4]
    fa90:	2253      	movs	r2, #83	; 0x53
    fa92:	5698      	ldrsb	r0, [r3, r2]
    fa94:	687b      	ldr	r3, [r7, #4]
    fa96:	3354      	adds	r3, #84	; 0x54
    fa98:	0019      	movs	r1, r3
    fa9a:	4c0c      	ldr	r4, [pc, #48]	; (facc <handle_transaction+0xa8>)
    fa9c:	2380      	movs	r3, #128	; 0x80
    fa9e:	005a      	lsls	r2, r3, #1
    faa0:	0023      	movs	r3, r4
    faa2:	4c0b      	ldr	r4, [pc, #44]	; (fad0 <handle_transaction+0xac>)
    faa4:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    faa6:	46c0      	nop			; (mov r8, r8)
    faa8:	46bd      	mov	sp, r7
    faaa:	b05d      	add	sp, #372	; 0x174
    faac:	bd90      	pop	{r4, r7, pc}
    faae:	46c0      	nop			; (mov r8, r8)
    fab0:	fffffe98 	.word	0xfffffe98
    fab4:	00010de7 	.word	0x00010de7
    fab8:	00013e68 	.word	0x00013e68
    fabc:	00013e7c 	.word	0x00013e7c
    fac0:	00011809 	.word	0x00011809
    fac4:	00011871 	.word	0x00011871
    fac8:	0000838d 	.word	0x0000838d
    facc:	00007530 	.word	0x00007530
    fad0:	000084f1 	.word	0x000084f1

0000fad4 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    fad4:	b580      	push	{r7, lr}
    fad6:	b082      	sub	sp, #8
    fad8:	af00      	add	r7, sp, #0
    fada:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    fadc:	687a      	ldr	r2, [r7, #4]
    fade:	4b09      	ldr	r3, [pc, #36]	; (fb04 <valid_ctx_prt+0x30>)
    fae0:	429a      	cmp	r2, r3
    fae2:	d305      	bcc.n	faf0 <valid_ctx_prt+0x1c>
    fae4:	4b08      	ldr	r3, [pc, #32]	; (fb08 <valid_ctx_prt+0x34>)
    fae6:	687a      	ldr	r2, [r7, #4]
    fae8:	429a      	cmp	r2, r3
    faea:	d201      	bcs.n	faf0 <valid_ctx_prt+0x1c>
    faec:	2301      	movs	r3, #1
    faee:	e000      	b.n	faf2 <valid_ctx_prt+0x1e>
    faf0:	2300      	movs	r3, #0
    faf2:	1c1a      	adds	r2, r3, #0
    faf4:	2301      	movs	r3, #1
    faf6:	4013      	ands	r3, r2
    faf8:	b2db      	uxtb	r3, r3
}
    fafa:	0018      	movs	r0, r3
    fafc:	46bd      	mov	sp, r7
    fafe:	b002      	add	sp, #8
    fb00:	bd80      	pop	{r7, pc}
    fb02:	46c0      	nop			; (mov r8, r8)
    fb04:	20003ebc 	.word	0x20003ebc
    fb08:	2000459c 	.word	0x2000459c

0000fb0c <pubnub_find_ctx>:

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
    fb0c:	b580      	push	{r7, lr}
    fb0e:	b084      	sub	sp, #16
    fb10:	af00      	add	r7, sp, #0
    fb12:	0002      	movs	r2, r0
    fb14:	1dfb      	adds	r3, r7, #7
    fb16:	701a      	strb	r2, [r3, #0]
    fb18:	1dbb      	adds	r3, r7, #6
    fb1a:	1c0a      	adds	r2, r1, #0
    fb1c:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    fb1e:	4b11      	ldr	r3, [pc, #68]	; (fb64 <pubnub_find_ctx+0x58>)
    fb20:	60fb      	str	r3, [r7, #12]
    fb22:	e016      	b.n	fb52 <pubnub_find_ctx+0x46>
		if (pb->state == state && pb->tcp_socket == sock) {
    fb24:	68fb      	ldr	r3, [r7, #12]
    fb26:	2252      	movs	r2, #82	; 0x52
    fb28:	5c9b      	ldrb	r3, [r3, r2]
    fb2a:	1dba      	adds	r2, r7, #6
    fb2c:	7812      	ldrb	r2, [r2, #0]
    fb2e:	429a      	cmp	r2, r3
    fb30:	d109      	bne.n	fb46 <pubnub_find_ctx+0x3a>
    fb32:	68fb      	ldr	r3, [r7, #12]
    fb34:	2253      	movs	r2, #83	; 0x53
    fb36:	569b      	ldrsb	r3, [r3, r2]
    fb38:	1dfa      	adds	r2, r7, #7
    fb3a:	7812      	ldrb	r2, [r2, #0]
    fb3c:	b252      	sxtb	r2, r2
    fb3e:	429a      	cmp	r2, r3
    fb40:	d101      	bne.n	fb46 <pubnub_find_ctx+0x3a>
			return pb;
    fb42:	68fb      	ldr	r3, [r7, #12]
    fb44:	e00a      	b.n	fb5c <pubnub_find_ctx+0x50>

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    fb46:	68fb      	ldr	r3, [r7, #12]
    fb48:	22dc      	movs	r2, #220	; 0xdc
    fb4a:	0092      	lsls	r2, r2, #2
    fb4c:	4694      	mov	ip, r2
    fb4e:	4463      	add	r3, ip
    fb50:	60fb      	str	r3, [r7, #12]
    fb52:	4b05      	ldr	r3, [pc, #20]	; (fb68 <pubnub_find_ctx+0x5c>)
    fb54:	68fa      	ldr	r2, [r7, #12]
    fb56:	429a      	cmp	r2, r3
    fb58:	d1e4      	bne.n	fb24 <pubnub_find_ctx+0x18>
		if (pb->state == state && pb->tcp_socket == sock) {
			return pb;
		}
	}

	return NULL;
    fb5a:	2300      	movs	r3, #0
}
    fb5c:	0018      	movs	r0, r3
    fb5e:	46bd      	mov	sp, r7
    fb60:	b004      	add	sp, #16
    fb62:	bd80      	pop	{r7, pc}
    fb64:	20003ebc 	.word	0x20003ebc
    fb68:	2000459c 	.word	0x2000459c

0000fb6c <handle_start_connect>:

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    fb6c:	b590      	push	{r4, r7, lr}
    fb6e:	b083      	sub	sp, #12
    fb70:	af00      	add	r7, sp, #0
    fb72:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    fb74:	687b      	ldr	r3, [r7, #4]
    fb76:	0018      	movs	r0, r3
    fb78:	4b2f      	ldr	r3, [pc, #188]	; (fc38 <handle_start_connect+0xcc>)
    fb7a:	4798      	blx	r3
    fb7c:	1e03      	subs	r3, r0, #0
    fb7e:	d105      	bne.n	fb8c <handle_start_connect+0x20>
    fb80:	4b2e      	ldr	r3, [pc, #184]	; (fc3c <handle_start_connect+0xd0>)
    fb82:	4a2f      	ldr	r2, [pc, #188]	; (fc40 <handle_start_connect+0xd4>)
    fb84:	482f      	ldr	r0, [pc, #188]	; (fc44 <handle_start_connect+0xd8>)
    fb86:	2154      	movs	r1, #84	; 0x54
    fb88:	4c2f      	ldr	r4, [pc, #188]	; (fc48 <handle_start_connect+0xdc>)
    fb8a:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    fb8c:	687b      	ldr	r3, [r7, #4]
    fb8e:	2252      	movs	r2, #82	; 0x52
    fb90:	5c9b      	ldrb	r3, [r3, r2]
    fb92:	2b00      	cmp	r3, #0
    fb94:	d00f      	beq.n	fbb6 <handle_start_connect+0x4a>
    fb96:	687b      	ldr	r3, [r7, #4]
    fb98:	2252      	movs	r2, #82	; 0x52
    fb9a:	5c9b      	ldrb	r3, [r3, r2]
    fb9c:	2b01      	cmp	r3, #1
    fb9e:	d00a      	beq.n	fbb6 <handle_start_connect+0x4a>
    fba0:	687b      	ldr	r3, [r7, #4]
    fba2:	2252      	movs	r2, #82	; 0x52
    fba4:	5c9b      	ldrb	r3, [r3, r2]
    fba6:	2b02      	cmp	r3, #2
    fba8:	d005      	beq.n	fbb6 <handle_start_connect+0x4a>
    fbaa:	4b28      	ldr	r3, [pc, #160]	; (fc4c <handle_start_connect+0xe0>)
    fbac:	4a24      	ldr	r2, [pc, #144]	; (fc40 <handle_start_connect+0xd4>)
    fbae:	4825      	ldr	r0, [pc, #148]	; (fc44 <handle_start_connect+0xd8>)
    fbb0:	2155      	movs	r1, #85	; 0x55
    fbb2:	4c25      	ldr	r4, [pc, #148]	; (fc48 <handle_start_connect+0xdc>)
    fbb4:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    fbb6:	687b      	ldr	r3, [r7, #4]
    fbb8:	2252      	movs	r2, #82	; 0x52
    fbba:	5c9b      	ldrb	r3, [r3, r2]
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d12c      	bne.n	fc1a <handle_start_connect+0xae>
    fbc0:	687b      	ldr	r3, [r7, #4]
    fbc2:	2253      	movs	r2, #83	; 0x53
    fbc4:	569b      	ldrsb	r3, [r3, r2]
    fbc6:	2b00      	cmp	r3, #0
    fbc8:	dc27      	bgt.n	fc1a <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    fbca:	2200      	movs	r2, #0
    fbcc:	2101      	movs	r1, #1
    fbce:	2002      	movs	r0, #2
    fbd0:	4b1f      	ldr	r3, [pc, #124]	; (fc50 <handle_start_connect+0xe4>)
    fbd2:	4798      	blx	r3
    fbd4:	0003      	movs	r3, r0
    fbd6:	0019      	movs	r1, r3
    fbd8:	687b      	ldr	r3, [r7, #4]
    fbda:	2253      	movs	r2, #83	; 0x53
    fbdc:	5499      	strb	r1, [r3, r2]
    fbde:	687b      	ldr	r3, [r7, #4]
    fbe0:	2253      	movs	r2, #83	; 0x53
    fbe2:	569b      	ldrsb	r3, [r3, r2]
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	da04      	bge.n	fbf2 <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    fbe8:	4b1a      	ldr	r3, [pc, #104]	; (fc54 <handle_start_connect+0xe8>)
    fbea:	0018      	movs	r0, r3
    fbec:	4b1a      	ldr	r3, [pc, #104]	; (fc58 <handle_start_connect+0xec>)
    fbee:	4798      	blx	r3
			return;
    fbf0:	e01f      	b.n	fc32 <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    fbf2:	4b1a      	ldr	r3, [pc, #104]	; (fc5c <handle_start_connect+0xf0>)
    fbf4:	685b      	ldr	r3, [r3, #4]
    fbf6:	2b00      	cmp	r3, #0
    fbf8:	d10f      	bne.n	fc1a <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    fbfa:	4b18      	ldr	r3, [pc, #96]	; (fc5c <handle_start_connect+0xf0>)
    fbfc:	2202      	movs	r2, #2
    fbfe:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    fc00:	4b16      	ldr	r3, [pc, #88]	; (fc5c <handle_start_connect+0xf0>)
    fc02:	22a0      	movs	r2, #160	; 0xa0
    fc04:	01d2      	lsls	r2, r2, #7
    fc06:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    fc08:	687b      	ldr	r3, [r7, #4]
    fc0a:	2252      	movs	r2, #82	; 0x52
    fc0c:	2101      	movs	r1, #1
    fc0e:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    fc10:	4b13      	ldr	r3, [pc, #76]	; (fc60 <handle_start_connect+0xf4>)
    fc12:	0018      	movs	r0, r3
    fc14:	4b13      	ldr	r3, [pc, #76]	; (fc64 <handle_start_connect+0xf8>)
    fc16:	4798      	blx	r3
			return;
    fc18:	e00b      	b.n	fc32 <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	2253      	movs	r2, #83	; 0x53
    fc1e:	569b      	ldrsb	r3, [r3, r2]
    fc20:	490e      	ldr	r1, [pc, #56]	; (fc5c <handle_start_connect+0xf0>)
    fc22:	2210      	movs	r2, #16
    fc24:	0018      	movs	r0, r3
    fc26:	4b10      	ldr	r3, [pc, #64]	; (fc68 <handle_start_connect+0xfc>)
    fc28:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    fc2a:	687b      	ldr	r3, [r7, #4]
    fc2c:	2252      	movs	r2, #82	; 0x52
    fc2e:	2102      	movs	r1, #2
    fc30:	5499      	strb	r1, [r3, r2]
}
    fc32:	46bd      	mov	sp, r7
    fc34:	b003      	add	sp, #12
    fc36:	bd90      	pop	{r4, r7, pc}
    fc38:	0000fad5 	.word	0x0000fad5
    fc3c:	00013ed0 	.word	0x00013ed0
    fc40:	00014074 	.word	0x00014074
    fc44:	00013ee4 	.word	0x00013ee4
    fc48:	00010cf5 	.word	0x00010cf5
    fc4c:	00013ef4 	.word	0x00013ef4
    fc50:	00008121 	.word	0x00008121
    fc54:	00013f4c 	.word	0x00013f4c
    fc58:	000115f9 	.word	0x000115f9
    fc5c:	200047ec 	.word	0x200047ec
    fc60:	00013e68 	.word	0x00013e68
    fc64:	00008781 	.word	0x00008781
    fc68:	00008279 	.word	0x00008279

0000fc6c <find_string_start>:

/* Find the beginning of a JSON string that comes after comma and ends
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    fc6c:	b580      	push	{r7, lr}
    fc6e:	b084      	sub	sp, #16
    fc70:	af00      	add	r7, sp, #0
    fc72:	6078      	str	r0, [r7, #4]
    fc74:	6039      	str	r1, [r7, #0]
	int i;
	for (i = len - 1; i > 0; i--) {
    fc76:	683b      	ldr	r3, [r7, #0]
    fc78:	3b01      	subs	r3, #1
    fc7a:	60fb      	str	r3, [r7, #12]
    fc7c:	e014      	b.n	fca8 <find_string_start+0x3c>
		if (buf[i] == '"') {
    fc7e:	68fb      	ldr	r3, [r7, #12]
    fc80:	687a      	ldr	r2, [r7, #4]
    fc82:	18d3      	adds	r3, r2, r3
    fc84:	781b      	ldrb	r3, [r3, #0]
    fc86:	2b22      	cmp	r3, #34	; 0x22
    fc88:	d10b      	bne.n	fca2 <find_string_start+0x36>
			return (buf[i - 1] == ',') ? i : -1;
    fc8a:	68fb      	ldr	r3, [r7, #12]
    fc8c:	3b01      	subs	r3, #1
    fc8e:	687a      	ldr	r2, [r7, #4]
    fc90:	18d3      	adds	r3, r2, r3
    fc92:	781b      	ldrb	r3, [r3, #0]
    fc94:	2b2c      	cmp	r3, #44	; 0x2c
    fc96:	d101      	bne.n	fc9c <find_string_start+0x30>
    fc98:	68fb      	ldr	r3, [r7, #12]
    fc9a:	e00a      	b.n	fcb2 <find_string_start+0x46>
    fc9c:	2301      	movs	r3, #1
    fc9e:	425b      	negs	r3, r3
    fca0:	e007      	b.n	fcb2 <find_string_start+0x46>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
	int i;
	for (i = len - 1; i > 0; i--) {
    fca2:	68fb      	ldr	r3, [r7, #12]
    fca4:	3b01      	subs	r3, #1
    fca6:	60fb      	str	r3, [r7, #12]
    fca8:	68fb      	ldr	r3, [r7, #12]
    fcaa:	2b00      	cmp	r3, #0
    fcac:	dce7      	bgt.n	fc7e <find_string_start+0x12>
		if (buf[i] == '"') {
			return (buf[i - 1] == ',') ? i : -1;
		}
	}
	return -1;
    fcae:	2301      	movs	r3, #1
    fcb0:	425b      	negs	r3, r3
}
    fcb2:	0018      	movs	r0, r3
    fcb4:	46bd      	mov	sp, r7
    fcb6:	b004      	add	sp, #16
    fcb8:	bd80      	pop	{r7, pc}
    fcba:	46c0      	nop			; (mov r8, r8)

0000fcbc <split_array>:

/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    fcbc:	b580      	push	{r7, lr}
    fcbe:	b084      	sub	sp, #16
    fcc0:	af00      	add	r7, sp, #0
    fcc2:	6078      	str	r0, [r7, #4]
	bool escaped = false;
    fcc4:	230f      	movs	r3, #15
    fcc6:	18fb      	adds	r3, r7, r3
    fcc8:	2200      	movs	r2, #0
    fcca:	701a      	strb	r2, [r3, #0]
	bool in_string = false;
    fccc:	230e      	movs	r3, #14
    fcce:	18fb      	adds	r3, r7, r3
    fcd0:	2200      	movs	r2, #0
    fcd2:	701a      	strb	r2, [r3, #0]
	int bracket_level = 0;
    fcd4:	2300      	movs	r3, #0
    fcd6:	60bb      	str	r3, [r7, #8]

	for (; *buf != '\0'; ++buf) {
    fcd8:	e04e      	b.n	fd78 <split_array+0xbc>
		if (escaped) {
    fcda:	230f      	movs	r3, #15
    fcdc:	18fb      	adds	r3, r7, r3
    fcde:	781b      	ldrb	r3, [r3, #0]
    fce0:	2b00      	cmp	r3, #0
    fce2:	d004      	beq.n	fcee <split_array+0x32>
			escaped = false;
    fce4:	230f      	movs	r3, #15
    fce6:	18fb      	adds	r3, r7, r3
    fce8:	2200      	movs	r2, #0
    fcea:	701a      	strb	r2, [r3, #0]
    fcec:	e041      	b.n	fd72 <split_array+0xb6>
		} else if ('"' == *buf) {
    fcee:	687b      	ldr	r3, [r7, #4]
    fcf0:	781b      	ldrb	r3, [r3, #0]
    fcf2:	2b22      	cmp	r3, #34	; 0x22
    fcf4:	d111      	bne.n	fd1a <split_array+0x5e>
			in_string = !in_string;
    fcf6:	230e      	movs	r3, #14
    fcf8:	18fb      	adds	r3, r7, r3
    fcfa:	781b      	ldrb	r3, [r3, #0]
    fcfc:	1e5a      	subs	r2, r3, #1
    fcfe:	4193      	sbcs	r3, r2
    fd00:	b2db      	uxtb	r3, r3
    fd02:	2201      	movs	r2, #1
    fd04:	4053      	eors	r3, r2
    fd06:	b2db      	uxtb	r3, r3
    fd08:	001a      	movs	r2, r3
    fd0a:	230e      	movs	r3, #14
    fd0c:	18fb      	adds	r3, r7, r3
    fd0e:	701a      	strb	r2, [r3, #0]
    fd10:	781a      	ldrb	r2, [r3, #0]
    fd12:	2101      	movs	r1, #1
    fd14:	400a      	ands	r2, r1
    fd16:	701a      	strb	r2, [r3, #0]
    fd18:	e02b      	b.n	fd72 <split_array+0xb6>
		} else if (in_string) {
    fd1a:	230e      	movs	r3, #14
    fd1c:	18fb      	adds	r3, r7, r3
    fd1e:	781b      	ldrb	r3, [r3, #0]
    fd20:	2b00      	cmp	r3, #0
    fd22:	d008      	beq.n	fd36 <split_array+0x7a>
			escaped = ('\\' == *buf);
    fd24:	687b      	ldr	r3, [r7, #4]
    fd26:	781a      	ldrb	r2, [r3, #0]
    fd28:	230f      	movs	r3, #15
    fd2a:	18fb      	adds	r3, r7, r3
    fd2c:	3a5c      	subs	r2, #92	; 0x5c
    fd2e:	4251      	negs	r1, r2
    fd30:	414a      	adcs	r2, r1
    fd32:	701a      	strb	r2, [r3, #0]
    fd34:	e01d      	b.n	fd72 <split_array+0xb6>
		} else {
			switch (*buf) {
    fd36:	687b      	ldr	r3, [r7, #4]
    fd38:	781b      	ldrb	r3, [r3, #0]
    fd3a:	2b5d      	cmp	r3, #93	; 0x5d
    fd3c:	d00e      	beq.n	fd5c <split_array+0xa0>
    fd3e:	dc04      	bgt.n	fd4a <split_array+0x8e>
    fd40:	2b2c      	cmp	r3, #44	; 0x2c
    fd42:	d00f      	beq.n	fd64 <split_array+0xa8>
    fd44:	2b5b      	cmp	r3, #91	; 0x5b
    fd46:	d005      	beq.n	fd54 <split_array+0x98>
				}

				break;

			default:
				break;
    fd48:	e013      	b.n	fd72 <split_array+0xb6>
		} else if ('"' == *buf) {
			in_string = !in_string;
		} else if (in_string) {
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
    fd4a:	2b7b      	cmp	r3, #123	; 0x7b
    fd4c:	d002      	beq.n	fd54 <split_array+0x98>
    fd4e:	2b7d      	cmp	r3, #125	; 0x7d
    fd50:	d004      	beq.n	fd5c <split_array+0xa0>
				}

				break;

			default:
				break;
    fd52:	e00e      	b.n	fd72 <split_array+0xb6>
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
			case '[':
			case '{':
				bracket_level++; break;
    fd54:	68bb      	ldr	r3, [r7, #8]
    fd56:	3301      	adds	r3, #1
    fd58:	60bb      	str	r3, [r7, #8]
    fd5a:	e00a      	b.n	fd72 <split_array+0xb6>

			case ']':
			case '}':
				bracket_level--; break;
    fd5c:	68bb      	ldr	r3, [r7, #8]
    fd5e:	3b01      	subs	r3, #1
    fd60:	60bb      	str	r3, [r7, #8]
    fd62:	e006      	b.n	fd72 <split_array+0xb6>

			/* if at root, split! */
			case ',':
				if (bracket_level == 0) {
    fd64:	68bb      	ldr	r3, [r7, #8]
    fd66:	2b00      	cmp	r3, #0
    fd68:	d102      	bne.n	fd70 <split_array+0xb4>
					*buf = '\0';
    fd6a:	687b      	ldr	r3, [r7, #4]
    fd6c:	2200      	movs	r2, #0
    fd6e:	701a      	strb	r2, [r3, #0]
				}

				break;
    fd70:	46c0      	nop			; (mov r8, r8)
{
	bool escaped = false;
	bool in_string = false;
	int bracket_level = 0;

	for (; *buf != '\0'; ++buf) {
    fd72:	687b      	ldr	r3, [r7, #4]
    fd74:	3301      	adds	r3, #1
    fd76:	607b      	str	r3, [r7, #4]
    fd78:	687b      	ldr	r3, [r7, #4]
    fd7a:	781b      	ldrb	r3, [r3, #0]
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	d1ac      	bne.n	fcda <split_array+0x1e>
				break;
			}
		}
	}

	return !(escaped || in_string || (bracket_level > 0));
    fd80:	230f      	movs	r3, #15
    fd82:	18fb      	adds	r3, r7, r3
    fd84:	781b      	ldrb	r3, [r3, #0]
    fd86:	2201      	movs	r2, #1
    fd88:	4053      	eors	r3, r2
    fd8a:	b2db      	uxtb	r3, r3
    fd8c:	2b00      	cmp	r3, #0
    fd8e:	d00c      	beq.n	fdaa <split_array+0xee>
    fd90:	230e      	movs	r3, #14
    fd92:	18fb      	adds	r3, r7, r3
    fd94:	781b      	ldrb	r3, [r3, #0]
    fd96:	2201      	movs	r2, #1
    fd98:	4053      	eors	r3, r2
    fd9a:	b2db      	uxtb	r3, r3
    fd9c:	2b00      	cmp	r3, #0
    fd9e:	d004      	beq.n	fdaa <split_array+0xee>
    fda0:	68bb      	ldr	r3, [r7, #8]
    fda2:	2b00      	cmp	r3, #0
    fda4:	dc01      	bgt.n	fdaa <split_array+0xee>
    fda6:	2301      	movs	r3, #1
    fda8:	e000      	b.n	fdac <split_array+0xf0>
    fdaa:	2300      	movs	r3, #0
    fdac:	1c1a      	adds	r2, r3, #0
    fdae:	2301      	movs	r3, #1
    fdb0:	4013      	ands	r3, r2
    fdb2:	b2db      	uxtb	r3, r3
}
    fdb4:	0018      	movs	r0, r3
    fdb6:	46bd      	mov	sp, r7
    fdb8:	b004      	add	sp, #16
    fdba:	bd80      	pop	{r7, pc}

0000fdbc <parse_subscribe_response>:

static int parse_subscribe_response(pubnub_t *p)
{
    fdbc:	b580      	push	{r7, lr}
    fdbe:	b086      	sub	sp, #24
    fdc0:	af00      	add	r7, sp, #0
    fdc2:	6078      	str	r0, [r7, #4]
	char *reply = p->http_reply;
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	3366      	adds	r3, #102	; 0x66
    fdc8:	33ff      	adds	r3, #255	; 0xff
    fdca:	60bb      	str	r3, [r7, #8]
	unsigned int replylen = strlen(reply);
    fdcc:	68bb      	ldr	r3, [r7, #8]
    fdce:	0018      	movs	r0, r3
    fdd0:	4b62      	ldr	r3, [pc, #392]	; (ff5c <parse_subscribe_response+0x1a0>)
    fdd2:	4798      	blx	r3
    fdd4:	0003      	movs	r3, r0
    fdd6:	617b      	str	r3, [r7, #20]
	if (reply[replylen - 1] != ']' && replylen > 2) {
    fdd8:	697b      	ldr	r3, [r7, #20]
    fdda:	3b01      	subs	r3, #1
    fddc:	68ba      	ldr	r2, [r7, #8]
    fdde:	18d3      	adds	r3, r2, r3
    fde0:	781b      	ldrb	r3, [r3, #0]
    fde2:	2b5d      	cmp	r3, #93	; 0x5d
    fde4:	d005      	beq.n	fdf2 <parse_subscribe_response+0x36>
    fde6:	697b      	ldr	r3, [r7, #20]
    fde8:	2b02      	cmp	r3, #2
    fdea:	d902      	bls.n	fdf2 <parse_subscribe_response+0x36>
		replylen -= 2; /* XXX: this seems required by Manxiang */
    fdec:	697b      	ldr	r3, [r7, #20]
    fdee:	3b02      	subs	r3, #2
    fdf0:	617b      	str	r3, [r7, #20]
	}

	if ((reply[0] != '[') || (reply[replylen - 1] != ']') || (reply[replylen - 2] != '"')) {
    fdf2:	68bb      	ldr	r3, [r7, #8]
    fdf4:	781b      	ldrb	r3, [r3, #0]
    fdf6:	2b5b      	cmp	r3, #91	; 0x5b
    fdf8:	d10d      	bne.n	fe16 <parse_subscribe_response+0x5a>
    fdfa:	697b      	ldr	r3, [r7, #20]
    fdfc:	3b01      	subs	r3, #1
    fdfe:	68ba      	ldr	r2, [r7, #8]
    fe00:	18d3      	adds	r3, r2, r3
    fe02:	781b      	ldrb	r3, [r3, #0]
    fe04:	2b5d      	cmp	r3, #93	; 0x5d
    fe06:	d106      	bne.n	fe16 <parse_subscribe_response+0x5a>
    fe08:	697b      	ldr	r3, [r7, #20]
    fe0a:	3b02      	subs	r3, #2
    fe0c:	68ba      	ldr	r2, [r7, #8]
    fe0e:	18d3      	adds	r3, r2, r3
    fe10:	781b      	ldrb	r3, [r3, #0]
    fe12:	2b22      	cmp	r3, #34	; 0x22
    fe14:	d002      	beq.n	fe1c <parse_subscribe_response+0x60>
		return -1;
    fe16:	2301      	movs	r3, #1
    fe18:	425b      	negs	r3, r3
    fe1a:	e09a      	b.n	ff52 <parse_subscribe_response+0x196>
	}

	/* Extract the last argument. */
	int i = find_string_start(reply, replylen - 2);
    fe1c:	697b      	ldr	r3, [r7, #20]
    fe1e:	3b02      	subs	r3, #2
    fe20:	001a      	movs	r2, r3
    fe22:	68bb      	ldr	r3, [r7, #8]
    fe24:	0011      	movs	r1, r2
    fe26:	0018      	movs	r0, r3
    fe28:	4b4d      	ldr	r3, [pc, #308]	; (ff60 <parse_subscribe_response+0x1a4>)
    fe2a:	4798      	blx	r3
    fe2c:	0003      	movs	r3, r0
    fe2e:	613b      	str	r3, [r7, #16]
	if (i < 0) {
    fe30:	693b      	ldr	r3, [r7, #16]
    fe32:	2b00      	cmp	r3, #0
    fe34:	da02      	bge.n	fe3c <parse_subscribe_response+0x80>
		return -1;
    fe36:	2301      	movs	r3, #1
    fe38:	425b      	negs	r3, r3
    fe3a:	e08a      	b.n	ff52 <parse_subscribe_response+0x196>
	}

	reply[replylen - 2] = 0;
    fe3c:	697b      	ldr	r3, [r7, #20]
    fe3e:	3b02      	subs	r3, #2
    fe40:	68ba      	ldr	r2, [r7, #8]
    fe42:	18d3      	adds	r3, r2, r3
    fe44:	2200      	movs	r2, #0
    fe46:	701a      	strb	r2, [r3, #0]

	/* Now, the last argument may either be a timetoken or a channel list. */
	if (reply[i - 2] == '"') {
    fe48:	693b      	ldr	r3, [r7, #16]
    fe4a:	3b02      	subs	r3, #2
    fe4c:	68ba      	ldr	r2, [r7, #8]
    fe4e:	18d3      	adds	r3, r2, r3
    fe50:	781b      	ldrb	r3, [r3, #0]
    fe52:	2b22      	cmp	r3, #34	; 0x22
    fe54:	d13f      	bne.n	fed6 <parse_subscribe_response+0x11a>
		int k;

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
    fe56:	693b      	ldr	r3, [r7, #16]
    fe58:	b29b      	uxth	r3, r3
    fe5a:	3301      	adds	r3, #1
    fe5c:	b299      	uxth	r1, r3
    fe5e:	687b      	ldr	r3, [r7, #4]
    fe60:	4a40      	ldr	r2, [pc, #256]	; (ff64 <parse_subscribe_response+0x1a8>)
    fe62:	5299      	strh	r1, [r3, r2]
		p->chan_end = replylen - 1;
    fe64:	697b      	ldr	r3, [r7, #20]
    fe66:	b29b      	uxth	r3, r3
    fe68:	3b01      	subs	r3, #1
    fe6a:	b299      	uxth	r1, r3
    fe6c:	687a      	ldr	r2, [r7, #4]
    fe6e:	23db      	movs	r3, #219	; 0xdb
    fe70:	009b      	lsls	r3, r3, #2
    fe72:	52d1      	strh	r1, [r2, r3]
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    fe74:	687a      	ldr	r2, [r7, #4]
    fe76:	23db      	movs	r3, #219	; 0xdb
    fe78:	009b      	lsls	r3, r3, #2
    fe7a:	5ad3      	ldrh	r3, [r2, r3]
    fe7c:	3b01      	subs	r3, #1
    fe7e:	60fb      	str	r3, [r7, #12]
    fe80:	e00d      	b.n	fe9e <parse_subscribe_response+0xe2>
			if (reply[k] == ',') {
    fe82:	68fb      	ldr	r3, [r7, #12]
    fe84:	68ba      	ldr	r2, [r7, #8]
    fe86:	18d3      	adds	r3, r2, r3
    fe88:	781b      	ldrb	r3, [r3, #0]
    fe8a:	2b2c      	cmp	r3, #44	; 0x2c
    fe8c:	d104      	bne.n	fe98 <parse_subscribe_response+0xdc>
				reply[k] = 0;
    fe8e:	68fb      	ldr	r3, [r7, #12]
    fe90:	68ba      	ldr	r2, [r7, #8]
    fe92:	18d3      	adds	r3, r2, r3
    fe94:	2200      	movs	r2, #0
    fe96:	701a      	strb	r2, [r3, #0]

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
		p->chan_end = replylen - 1;
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    fe98:	68fb      	ldr	r3, [r7, #12]
    fe9a:	3b01      	subs	r3, #1
    fe9c:	60fb      	str	r3, [r7, #12]
    fe9e:	687b      	ldr	r3, [r7, #4]
    fea0:	4a30      	ldr	r2, [pc, #192]	; (ff64 <parse_subscribe_response+0x1a8>)
    fea2:	5a9b      	ldrh	r3, [r3, r2]
    fea4:	1e1a      	subs	r2, r3, #0
    fea6:	68fb      	ldr	r3, [r7, #12]
    fea8:	429a      	cmp	r2, r3
    feaa:	dbea      	blt.n	fe82 <parse_subscribe_response+0xc6>
				reply[k] = 0;
			}
		}

		/* ... and look for timetoken again. */
		reply[i - 2] = 0;
    feac:	693b      	ldr	r3, [r7, #16]
    feae:	3b02      	subs	r3, #2
    feb0:	68ba      	ldr	r2, [r7, #8]
    feb2:	18d3      	adds	r3, r2, r3
    feb4:	2200      	movs	r2, #0
    feb6:	701a      	strb	r2, [r3, #0]
		i = find_string_start(reply, i - 2);
    feb8:	693b      	ldr	r3, [r7, #16]
    feba:	1e9a      	subs	r2, r3, #2
    febc:	68bb      	ldr	r3, [r7, #8]
    febe:	0011      	movs	r1, r2
    fec0:	0018      	movs	r0, r3
    fec2:	4b27      	ldr	r3, [pc, #156]	; (ff60 <parse_subscribe_response+0x1a4>)
    fec4:	4798      	blx	r3
    fec6:	0003      	movs	r3, r0
    fec8:	613b      	str	r3, [r7, #16]
		if (i < 0) {
    feca:	693b      	ldr	r3, [r7, #16]
    fecc:	2b00      	cmp	r3, #0
    fece:	da0b      	bge.n	fee8 <parse_subscribe_response+0x12c>
			return -1;
    fed0:	2301      	movs	r3, #1
    fed2:	425b      	negs	r3, r3
    fed4:	e03d      	b.n	ff52 <parse_subscribe_response+0x196>
		}
	} else {
		p->chan_ofs = 0;
    fed6:	687b      	ldr	r3, [r7, #4]
    fed8:	4a22      	ldr	r2, [pc, #136]	; (ff64 <parse_subscribe_response+0x1a8>)
    feda:	2100      	movs	r1, #0
    fedc:	5299      	strh	r1, [r3, r2]
		p->chan_end = 0;
    fede:	687a      	ldr	r2, [r7, #4]
    fee0:	23db      	movs	r3, #219	; 0xdb
    fee2:	009b      	lsls	r3, r3, #2
    fee4:	2100      	movs	r1, #0
    fee6:	52d1      	strh	r1, [r2, r3]
	 * [[1,2,3],"5678"]
	 * [[1,2,3],"5678","a,b,c"]
	 *          ^-- here */

	/* Setup timetoken. */
	if (replylen >= sizeof(p->timetoken) + 2 + (i + 1)) {
    fee8:	693b      	ldr	r3, [r7, #16]
    feea:	3343      	adds	r3, #67	; 0x43
    feec:	1e1a      	subs	r2, r3, #0
    feee:	697b      	ldr	r3, [r7, #20]
    fef0:	429a      	cmp	r2, r3
    fef2:	d802      	bhi.n	fefa <parse_subscribe_response+0x13e>
		return -1;
    fef4:	2301      	movs	r3, #1
    fef6:	425b      	negs	r3, r3
    fef8:	e02b      	b.n	ff52 <parse_subscribe_response+0x196>
	}

	strcpy(p->timetoken, reply + i + 1);
    fefa:	687b      	ldr	r3, [r7, #4]
    fefc:	3310      	adds	r3, #16
    fefe:	0018      	movs	r0, r3
    ff00:	693b      	ldr	r3, [r7, #16]
    ff02:	3301      	adds	r3, #1
    ff04:	68ba      	ldr	r2, [r7, #8]
    ff06:	18d3      	adds	r3, r2, r3
    ff08:	0019      	movs	r1, r3
    ff0a:	4b17      	ldr	r3, [pc, #92]	; (ff68 <parse_subscribe_response+0x1ac>)
    ff0c:	4798      	blx	r3
	reply[i - 2] = 0; /* terminate the [] message array (before the ]!) */
    ff0e:	693b      	ldr	r3, [r7, #16]
    ff10:	3b02      	subs	r3, #2
    ff12:	68ba      	ldr	r2, [r7, #8]
    ff14:	18d3      	adds	r3, r2, r3
    ff16:	2200      	movs	r2, #0
    ff18:	701a      	strb	r2, [r3, #0]

	/* Set up the message list - offset, length and NUL-characters splitting the messages. */
	p->msg_ofs = 2;
    ff1a:	687b      	ldr	r3, [r7, #4]
    ff1c:	4a13      	ldr	r2, [pc, #76]	; (ff6c <parse_subscribe_response+0x1b0>)
    ff1e:	2102      	movs	r1, #2
    ff20:	5299      	strh	r1, [r3, r2]
	p->msg_end = i - 2;
    ff22:	693b      	ldr	r3, [r7, #16]
    ff24:	b29b      	uxth	r3, r3
    ff26:	3b02      	subs	r3, #2
    ff28:	b299      	uxth	r1, r3
    ff2a:	687a      	ldr	r2, [r7, #4]
    ff2c:	23da      	movs	r3, #218	; 0xda
    ff2e:	009b      	lsls	r3, r3, #2
    ff30:	52d1      	strh	r1, [r2, r3]

	return split_array(reply + p->msg_ofs) ? 0 : -1;
    ff32:	687b      	ldr	r3, [r7, #4]
    ff34:	4a0d      	ldr	r2, [pc, #52]	; (ff6c <parse_subscribe_response+0x1b0>)
    ff36:	5a9b      	ldrh	r3, [r3, r2]
    ff38:	001a      	movs	r2, r3
    ff3a:	68bb      	ldr	r3, [r7, #8]
    ff3c:	189b      	adds	r3, r3, r2
    ff3e:	0018      	movs	r0, r3
    ff40:	4b0b      	ldr	r3, [pc, #44]	; (ff70 <parse_subscribe_response+0x1b4>)
    ff42:	4798      	blx	r3
    ff44:	1e03      	subs	r3, r0, #0
    ff46:	d001      	beq.n	ff4c <parse_subscribe_response+0x190>
    ff48:	2300      	movs	r3, #0
    ff4a:	e001      	b.n	ff50 <parse_subscribe_response+0x194>
    ff4c:	2301      	movs	r3, #1
    ff4e:	425b      	negs	r3, r3
    ff50:	46c0      	nop			; (mov r8, r8)
}
    ff52:	0018      	movs	r0, r3
    ff54:	46bd      	mov	sp, r7
    ff56:	b006      	add	sp, #24
    ff58:	bd80      	pop	{r7, pc}
    ff5a:	46c0      	nop			; (mov r8, r8)
    ff5c:	00011871 	.word	0x00011871
    ff60:	0000fc6d 	.word	0x0000fc6d
    ff64:	0000036a 	.word	0x0000036a
    ff68:	00011861 	.word	0x00011861
    ff6c:	00000366 	.word	0x00000366
    ff70:	0000fcbd 	.word	0x0000fcbd

0000ff74 <handle_tcpip_connect>:

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    ff74:	b580      	push	{r7, lr}
    ff76:	b084      	sub	sp, #16
    ff78:	af00      	add	r7, sp, #0
    ff7a:	603a      	str	r2, [r7, #0]
    ff7c:	1dfb      	adds	r3, r7, #7
    ff7e:	1c02      	adds	r2, r0, #0
    ff80:	701a      	strb	r2, [r3, #0]
    ff82:	1dbb      	adds	r3, r7, #6
    ff84:	1c0a      	adds	r2, r1, #0
    ff86:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_CONNECT);
    ff88:	1dfb      	adds	r3, r7, #7
    ff8a:	781b      	ldrb	r3, [r3, #0]
    ff8c:	b25b      	sxtb	r3, r3
    ff8e:	2102      	movs	r1, #2
    ff90:	0018      	movs	r0, r3
    ff92:	4b16      	ldr	r3, [pc, #88]	; (ffec <handle_tcpip_connect+0x78>)
    ff94:	4798      	blx	r3
    ff96:	0003      	movs	r3, r0
    ff98:	60fb      	str	r3, [r7, #12]

	if (pb != NULL) {
    ff9a:	68fb      	ldr	r3, [r7, #12]
    ff9c:	2b00      	cmp	r3, #0
    ff9e:	d020      	beq.n	ffe2 <handle_tcpip_connect+0x6e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    ffa0:	683b      	ldr	r3, [r7, #0]
    ffa2:	60bb      	str	r3, [r7, #8]
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    ffa4:	68bb      	ldr	r3, [r7, #8]
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d00d      	beq.n	ffc6 <handle_tcpip_connect+0x52>
    ffaa:	68bb      	ldr	r3, [r7, #8]
    ffac:	785b      	ldrb	r3, [r3, #1]
    ffae:	b25b      	sxtb	r3, r3
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	db08      	blt.n	ffc6 <handle_tcpip_connect+0x52>
			PUBNUB_PRINTF("handle_tcpip_connect : connect success!\r\n");
			pb->state = PS_WAIT_SEND;
    ffb4:	68fb      	ldr	r3, [r7, #12]
    ffb6:	2252      	movs	r2, #82	; 0x52
    ffb8:	2103      	movs	r1, #3
    ffba:	5499      	strb	r1, [r3, r2]

			handle_transaction(pb);
    ffbc:	68fb      	ldr	r3, [r7, #12]
    ffbe:	0018      	movs	r0, r3
    ffc0:	4b0b      	ldr	r3, [pc, #44]	; (fff0 <handle_tcpip_connect+0x7c>)
    ffc2:	4798      	blx	r3

			pb->state = PS_IDLE;
			pb->last_result = PNR_IO_ERROR;
		}
	}
}
    ffc4:	e00d      	b.n	ffe2 <handle_tcpip_connect+0x6e>
			pb->state = PS_WAIT_SEND;

			handle_transaction(pb);
		} else {
			PUBNUB_PRINTF("handle_tcpip_connect : connect error!\r\n");
			close(pb->tcp_socket);
    ffc6:	68fb      	ldr	r3, [r7, #12]
    ffc8:	2253      	movs	r2, #83	; 0x53
    ffca:	569b      	ldrsb	r3, [r3, r2]
    ffcc:	0018      	movs	r0, r3
    ffce:	4b09      	ldr	r3, [pc, #36]	; (fff4 <handle_tcpip_connect+0x80>)
    ffd0:	4798      	blx	r3

			pb->state = PS_IDLE;
    ffd2:	68fb      	ldr	r3, [r7, #12]
    ffd4:	2252      	movs	r2, #82	; 0x52
    ffd6:	2100      	movs	r1, #0
    ffd8:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    ffda:	68fb      	ldr	r3, [r7, #12]
    ffdc:	2250      	movs	r2, #80	; 0x50
    ffde:	2102      	movs	r1, #2
    ffe0:	5499      	strb	r1, [r3, r2]
		}
	}
}
    ffe2:	46c0      	nop			; (mov r8, r8)
    ffe4:	46bd      	mov	sp, r7
    ffe6:	b004      	add	sp, #16
    ffe8:	bd80      	pop	{r7, pc}
    ffea:	46c0      	nop			; (mov r8, r8)
    ffec:	0000fb0d 	.word	0x0000fb0d
    fff0:	0000fa25 	.word	0x0000fa25
    fff4:	00008671 	.word	0x00008671

0000fff8 <handle_tcpip_recv>:

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    fff8:	b580      	push	{r7, lr}
    fffa:	b086      	sub	sp, #24
    fffc:	af00      	add	r7, sp, #0
    fffe:	603a      	str	r2, [r7, #0]
   10000:	1dfb      	adds	r3, r7, #7
   10002:	1c02      	adds	r2, r0, #0
   10004:	701a      	strb	r2, [r3, #0]
   10006:	1dbb      	adds	r3, r7, #6
   10008:	1c0a      	adds	r2, r1, #0
   1000a:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
   1000c:	4b57      	ldr	r3, [pc, #348]	; (1016c <handle_tcpip_recv+0x174>)
   1000e:	617b      	str	r3, [r7, #20]
   10010:	e012      	b.n	10038 <handle_tcpip_recv+0x40>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
   10012:	697b      	ldr	r3, [r7, #20]
   10014:	2252      	movs	r2, #82	; 0x52
   10016:	5c9b      	ldrb	r3, [r3, r2]
   10018:	2b04      	cmp	r3, #4
   1001a:	d107      	bne.n	1002c <handle_tcpip_recv+0x34>
   1001c:	697b      	ldr	r3, [r7, #20]
   1001e:	2253      	movs	r2, #83	; 0x53
   10020:	569b      	ldrsb	r3, [r3, r2]
   10022:	1dfa      	adds	r2, r7, #7
   10024:	7812      	ldrb	r2, [r2, #0]
   10026:	b252      	sxtb	r2, r2
   10028:	429a      	cmp	r2, r3
   1002a:	d00a      	beq.n	10042 <handle_tcpip_recv+0x4a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
   1002c:	697b      	ldr	r3, [r7, #20]
   1002e:	22dc      	movs	r2, #220	; 0xdc
   10030:	0092      	lsls	r2, r2, #2
   10032:	4694      	mov	ip, r2
   10034:	4463      	add	r3, ip
   10036:	617b      	str	r3, [r7, #20]
   10038:	4b4d      	ldr	r3, [pc, #308]	; (10170 <handle_tcpip_recv+0x178>)
   1003a:	697a      	ldr	r2, [r7, #20]
   1003c:	429a      	cmp	r2, r3
   1003e:	d1e8      	bne.n	10012 <handle_tcpip_recv+0x1a>
   10040:	e000      	b.n	10044 <handle_tcpip_recv+0x4c>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
   10042:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (pb != NULL) {
   10044:	697b      	ldr	r3, [r7, #20]
   10046:	2b00      	cmp	r3, #0
   10048:	d100      	bne.n	1004c <handle_tcpip_recv+0x54>
   1004a:	e08b      	b.n	10164 <handle_tcpip_recv+0x16c>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
   1004c:	683b      	ldr	r3, [r7, #0]
   1004e:	613b      	str	r3, [r7, #16]

		if (pstrRecv->s16BufferSize <= 0) {
   10050:	693b      	ldr	r3, [r7, #16]
   10052:	2204      	movs	r2, #4
   10054:	5e9b      	ldrsh	r3, [r3, r2]
   10056:	2b00      	cmp	r3, #0
   10058:	dc0e      	bgt.n	10078 <handle_tcpip_recv+0x80>
			close(pb->tcp_socket);
   1005a:	697b      	ldr	r3, [r7, #20]
   1005c:	2253      	movs	r2, #83	; 0x53
   1005e:	569b      	ldrsb	r3, [r3, r2]
   10060:	0018      	movs	r0, r3
   10062:	4b44      	ldr	r3, [pc, #272]	; (10174 <handle_tcpip_recv+0x17c>)
   10064:	4798      	blx	r3

			pb->state = PS_IDLE;
   10066:	697b      	ldr	r3, [r7, #20]
   10068:	2252      	movs	r2, #82	; 0x52
   1006a:	2100      	movs	r1, #0
   1006c:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
   1006e:	697b      	ldr	r3, [r7, #20]
   10070:	2250      	movs	r2, #80	; 0x50
   10072:	2102      	movs	r1, #2
   10074:	5499      	strb	r1, [r3, r2]
			return;
   10076:	e075      	b.n	10164 <handle_tcpip_recv+0x16c>
		}

		if (pb->trans == PBTT_PUBLISH) {
   10078:	697b      	ldr	r3, [r7, #20]
   1007a:	2251      	movs	r2, #81	; 0x51
   1007c:	5c9b      	ldrb	r3, [r3, r2]
   1007e:	2b02      	cmp	r3, #2
   10080:	d10c      	bne.n	1009c <handle_tcpip_recv+0xa4>
			PUBNUB_PRINTF(("handle_tcpip_recv: PBTT_PUBLISH msg: %s\n", pstrRecv->pu8Buffer));

			if (pstrRecv->u16RemainingSize == 0) {
   10082:	693b      	ldr	r3, [r7, #16]
   10084:	88db      	ldrh	r3, [r3, #6]
   10086:	2b00      	cmp	r3, #0
   10088:	d16b      	bne.n	10162 <handle_tcpip_recv+0x16a>
				pb->last_result = PNR_OK;
   1008a:	697b      	ldr	r3, [r7, #20]
   1008c:	2250      	movs	r2, #80	; 0x50
   1008e:	2100      	movs	r1, #0
   10090:	5499      	strb	r1, [r3, r2]
				pb->state = PS_IDLE;
   10092:	697b      	ldr	r3, [r7, #20]
   10094:	2252      	movs	r2, #82	; 0x52
   10096:	2100      	movs	r1, #0
   10098:	5499      	strb	r1, [r3, r2]
			}

			return;
   1009a:	e062      	b.n	10162 <handle_tcpip_recv+0x16a>
		}

		if (pstrRecv->u16RemainingSize > 0) {
   1009c:	693b      	ldr	r3, [r7, #16]
   1009e:	88db      	ldrh	r3, [r3, #6]
   100a0:	2b00      	cmp	r3, #0
   100a2:	d037      	beq.n	10114 <handle_tcpip_recv+0x11c>
			pb->state = PS_WAIT_RECV;
   100a4:	697b      	ldr	r3, [r7, #20]
   100a6:	2252      	movs	r2, #82	; 0x52
   100a8:	2104      	movs	r1, #4
   100aa:	5499      	strb	r1, [r3, r2]

			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"Content-Length: ") + 16;
   100ac:	693b      	ldr	r3, [r7, #16]
   100ae:	681b      	ldr	r3, [r3, #0]
   100b0:	4a31      	ldr	r2, [pc, #196]	; (10178 <handle_tcpip_recv+0x180>)
   100b2:	0011      	movs	r1, r2
   100b4:	0018      	movs	r0, r3
   100b6:	4b31      	ldr	r3, [pc, #196]	; (1017c <handle_tcpip_recv+0x184>)
   100b8:	4798      	blx	r3
   100ba:	0003      	movs	r3, r0
   100bc:	3310      	adds	r3, #16
   100be:	60fb      	str	r3, [r7, #12]
			pb->http_content_len = atoi((const char *)length);
   100c0:	68fb      	ldr	r3, [r7, #12]
   100c2:	0018      	movs	r0, r3
   100c4:	4b2e      	ldr	r3, [pc, #184]	; (10180 <handle_tcpip_recv+0x188>)
   100c6:	4798      	blx	r3
   100c8:	0003      	movs	r3, r0
   100ca:	0019      	movs	r1, r3
   100cc:	697a      	ldr	r2, [r7, #20]
   100ce:	23ae      	movs	r3, #174	; 0xae
   100d0:	005b      	lsls	r3, r3, #1
   100d2:	50d1      	str	r1, [r2, r3]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
   100d4:	693b      	ldr	r3, [r7, #16]
   100d6:	88db      	ldrh	r3, [r3, #6]
   100d8:	0019      	movs	r1, r3
   100da:	697a      	ldr	r2, [r7, #20]
   100dc:	23b0      	movs	r3, #176	; 0xb0
   100de:	005b      	lsls	r3, r3, #1
   100e0:	50d1      	str	r1, [r2, r3]
			PUBNUB_PRINTF(("Content-Length = %d\r\n", (int)pb->http_content_len));

			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"[");
   100e2:	693b      	ldr	r3, [r7, #16]
   100e4:	681b      	ldr	r3, [r3, #0]
   100e6:	4a27      	ldr	r2, [pc, #156]	; (10184 <handle_tcpip_recv+0x18c>)
   100e8:	0011      	movs	r1, r2
   100ea:	0018      	movs	r0, r3
   100ec:	4b23      	ldr	r3, [pc, #140]	; (1017c <handle_tcpip_recv+0x184>)
   100ee:	4798      	blx	r3
   100f0:	0003      	movs	r3, r0
   100f2:	60bb      	str	r3, [r7, #8]
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
   100f4:	697b      	ldr	r3, [r7, #20]
   100f6:	3366      	adds	r3, #102	; 0x66
   100f8:	33ff      	adds	r3, #255	; 0xff
   100fa:	0018      	movs	r0, r3
   100fc:	697a      	ldr	r2, [r7, #20]
   100fe:	23ae      	movs	r3, #174	; 0xae
   10100:	005b      	lsls	r3, r3, #1
   10102:	58d3      	ldr	r3, [r2, r3]
   10104:	693a      	ldr	r2, [r7, #16]
   10106:	88d2      	ldrh	r2, [r2, #6]
   10108:	1a9a      	subs	r2, r3, r2
   1010a:	68bb      	ldr	r3, [r7, #8]
   1010c:	0019      	movs	r1, r3
   1010e:	4b1e      	ldr	r3, [pc, #120]	; (10188 <handle_tcpip_recv+0x190>)
   10110:	4798      	blx	r3
   10112:	e027      	b.n	10164 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));
		} else if (pstrRecv->u16RemainingSize == 0) {
   10114:	693b      	ldr	r3, [r7, #16]
   10116:	88db      	ldrh	r3, [r3, #6]
   10118:	2b00      	cmp	r3, #0
   1011a:	d123      	bne.n	10164 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_content_remaining_len = %d\r\n", (int)pb->http_content_remaining_len));

			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
   1011c:	697b      	ldr	r3, [r7, #20]
   1011e:	3366      	adds	r3, #102	; 0x66
   10120:	33ff      	adds	r3, #255	; 0xff
   10122:	001a      	movs	r2, r3
   10124:	6979      	ldr	r1, [r7, #20]
   10126:	23ae      	movs	r3, #174	; 0xae
   10128:	005b      	lsls	r3, r3, #1
   1012a:	58c9      	ldr	r1, [r1, r3]
   1012c:	6978      	ldr	r0, [r7, #20]
   1012e:	23b0      	movs	r3, #176	; 0xb0
   10130:	005b      	lsls	r3, r3, #1
   10132:	58c3      	ldr	r3, [r0, r3]
   10134:	1acb      	subs	r3, r1, r3
   10136:	18d0      	adds	r0, r2, r3
   10138:	693b      	ldr	r3, [r7, #16]
   1013a:	6819      	ldr	r1, [r3, #0]
   1013c:	693b      	ldr	r3, [r7, #16]
   1013e:	2204      	movs	r2, #4
   10140:	5e9b      	ldrsh	r3, [r3, r2]
   10142:	001a      	movs	r2, r3
   10144:	4b10      	ldr	r3, [pc, #64]	; (10188 <handle_tcpip_recv+0x190>)
   10146:	4798      	blx	r3
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));

			parse_subscribe_response(pb);
   10148:	697b      	ldr	r3, [r7, #20]
   1014a:	0018      	movs	r0, r3
   1014c:	4b0f      	ldr	r3, [pc, #60]	; (1018c <handle_tcpip_recv+0x194>)
   1014e:	4798      	blx	r3

			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
   10150:	697b      	ldr	r3, [r7, #20]
   10152:	2250      	movs	r2, #80	; 0x50
   10154:	2100      	movs	r1, #0
   10156:	5499      	strb	r1, [r3, r2]
			pb->state = PS_IDLE;
   10158:	697b      	ldr	r3, [r7, #20]
   1015a:	2252      	movs	r2, #82	; 0x52
   1015c:	2100      	movs	r1, #0
   1015e:	5499      	strb	r1, [r3, r2]
   10160:	e000      	b.n	10164 <handle_tcpip_recv+0x16c>
			if (pstrRecv->u16RemainingSize == 0) {
				pb->last_result = PNR_OK;
				pb->state = PS_IDLE;
			}

			return;
   10162:	46c0      	nop			; (mov r8, r8)
			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
			pb->state = PS_IDLE;
		}
	}
}
   10164:	46bd      	mov	sp, r7
   10166:	b006      	add	sp, #24
   10168:	bd80      	pop	{r7, pc}
   1016a:	46c0      	nop			; (mov r8, r8)
   1016c:	20003ebc 	.word	0x20003ebc
   10170:	2000459c 	.word	0x2000459c
   10174:	00008671 	.word	0x00008671
   10178:	00013f78 	.word	0x00013f78
   1017c:	00003f9d 	.word	0x00003f9d
   10180:	00010d35 	.word	0x00010d35
   10184:	00013f8c 	.word	0x00013f8c
   10188:	00010dd5 	.word	0x00010dd5
   1018c:	0000fdbd 	.word	0x0000fdbd

00010190 <handle_dns_found>:

void handle_dns_found(char const *name, uint32_t hostip)
{
   10190:	b580      	push	{r7, lr}
   10192:	b084      	sub	sp, #16
   10194:	af00      	add	r7, sp, #0
   10196:	6078      	str	r0, [r7, #4]
   10198:	6039      	str	r1, [r7, #0]
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
   1019a:	4a13      	ldr	r2, [pc, #76]	; (101e8 <handle_dns_found+0x58>)
   1019c:	687b      	ldr	r3, [r7, #4]
   1019e:	0011      	movs	r1, r2
   101a0:	0018      	movs	r0, r3
   101a2:	4b12      	ldr	r3, [pc, #72]	; (101ec <handle_dns_found+0x5c>)
   101a4:	4798      	blx	r3
   101a6:	1e03      	subs	r3, r0, #0
   101a8:	d119      	bne.n	101de <handle_dns_found+0x4e>
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;
   101aa:	4b11      	ldr	r3, [pc, #68]	; (101f0 <handle_dns_found+0x60>)
   101ac:	683a      	ldr	r2, [r7, #0]
   101ae:	605a      	str	r2, [r3, #4]

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
   101b0:	4b10      	ldr	r3, [pc, #64]	; (101f4 <handle_dns_found+0x64>)
   101b2:	60fb      	str	r3, [r7, #12]
   101b4:	e00e      	b.n	101d4 <handle_dns_found+0x44>
		if (pb->state == PS_WAIT_DNS) {
   101b6:	68fb      	ldr	r3, [r7, #12]
   101b8:	2252      	movs	r2, #82	; 0x52
   101ba:	5c9b      	ldrb	r3, [r3, r2]
   101bc:	2b01      	cmp	r3, #1
   101be:	d103      	bne.n	101c8 <handle_dns_found+0x38>
			handle_start_connect(pb);
   101c0:	68fb      	ldr	r3, [r7, #12]
   101c2:	0018      	movs	r0, r3
   101c4:	4b0c      	ldr	r3, [pc, #48]	; (101f8 <handle_dns_found+0x68>)
   101c6:	4798      	blx	r3
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
   101c8:	68fb      	ldr	r3, [r7, #12]
   101ca:	22dc      	movs	r2, #220	; 0xdc
   101cc:	0092      	lsls	r2, r2, #2
   101ce:	4694      	mov	ip, r2
   101d0:	4463      	add	r3, ip
   101d2:	60fb      	str	r3, [r7, #12]
   101d4:	4b09      	ldr	r3, [pc, #36]	; (101fc <handle_dns_found+0x6c>)
   101d6:	68fa      	ldr	r2, [r7, #12]
   101d8:	429a      	cmp	r2, r3
   101da:	d1ec      	bne.n	101b6 <handle_dns_found+0x26>
   101dc:	e000      	b.n	101e0 <handle_dns_found+0x50>
void handle_dns_found(char const *name, uint32_t hostip)
{
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
		return;
   101de:	46c0      	nop			; (mov r8, r8)
	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
		if (pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
   101e0:	46bd      	mov	sp, r7
   101e2:	b004      	add	sp, #16
   101e4:	bd80      	pop	{r7, pc}
   101e6:	46c0      	nop			; (mov r8, r8)
   101e8:	00013e68 	.word	0x00013e68
   101ec:	0001184d 	.word	0x0001184d
   101f0:	200047ec 	.word	0x200047ec
   101f4:	20003ebc 	.word	0x20003ebc
   101f8:	0000fb6d 	.word	0x0000fb6d
   101fc:	2000459c 	.word	0x2000459c

00010200 <handle_tcpip>:

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   10200:	b580      	push	{r7, lr}
   10202:	b086      	sub	sp, #24
   10204:	af00      	add	r7, sp, #0
   10206:	603a      	str	r2, [r7, #0]
   10208:	1dfb      	adds	r3, r7, #7
   1020a:	1c02      	adds	r2, r0, #0
   1020c:	701a      	strb	r2, [r3, #0]
   1020e:	1dbb      	adds	r3, r7, #6
   10210:	1c0a      	adds	r2, r1, #0
   10212:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
   10214:	1dbb      	adds	r3, r7, #6
   10216:	781b      	ldrb	r3, [r3, #0]
   10218:	2b06      	cmp	r3, #6
   1021a:	d023      	beq.n	10264 <handle_tcpip+0x64>
   1021c:	2b07      	cmp	r3, #7
   1021e:	d00c      	beq.n	1023a <handle_tcpip+0x3a>
   10220:	2b05      	cmp	r3, #5
   10222:	d000      	beq.n	10226 <handle_tcpip+0x26>
		handle_tcpip_recv(sock, u8Msg, pvMsg);
	}
	break;

	default:
		break;
   10224:	e034      	b.n	10290 <handle_tcpip+0x90>
void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	case SOCKET_MSG_CONNECT:
	{
		handle_tcpip_connect(sock, u8Msg, pvMsg);
   10226:	683a      	ldr	r2, [r7, #0]
   10228:	1dbb      	adds	r3, r7, #6
   1022a:	7819      	ldrb	r1, [r3, #0]
   1022c:	1dfb      	adds	r3, r7, #7
   1022e:	781b      	ldrb	r3, [r3, #0]
   10230:	b25b      	sxtb	r3, r3
   10232:	0018      	movs	r0, r3
   10234:	4b18      	ldr	r3, [pc, #96]	; (10298 <handle_tcpip+0x98>)
   10236:	4798      	blx	r3
	}
	break;
   10238:	e02a      	b.n	10290 <handle_tcpip+0x90>

	case SOCKET_MSG_SEND:
	{
		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_SEND);
   1023a:	1dfb      	adds	r3, r7, #7
   1023c:	781b      	ldrb	r3, [r3, #0]
   1023e:	b25b      	sxtb	r3, r3
   10240:	2103      	movs	r1, #3
   10242:	0018      	movs	r0, r3
   10244:	4b15      	ldr	r3, [pc, #84]	; (1029c <handle_tcpip+0x9c>)
   10246:	4798      	blx	r3
   10248:	0003      	movs	r3, r0
   1024a:	617b      	str	r3, [r7, #20]

		if (pb != NULL) {
   1024c:	697b      	ldr	r3, [r7, #20]
   1024e:	2b00      	cmp	r3, #0
   10250:	d01d      	beq.n	1028e <handle_tcpip+0x8e>
			pb->state = PS_WAIT_RECV;
   10252:	697b      	ldr	r3, [r7, #20]
   10254:	2252      	movs	r2, #82	; 0x52
   10256:	2104      	movs	r1, #4
   10258:	5499      	strb	r1, [r3, r2]
			handle_transaction(pb);
   1025a:	697b      	ldr	r3, [r7, #20]
   1025c:	0018      	movs	r0, r3
   1025e:	4b10      	ldr	r3, [pc, #64]	; (102a0 <handle_tcpip+0xa0>)
   10260:	4798      	blx	r3
		}
	}
	break;
   10262:	e014      	b.n	1028e <handle_tcpip+0x8e>

	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
   10264:	683b      	ldr	r3, [r7, #0]
   10266:	613b      	str	r3, [r7, #16]
			PUBNUB_PRINTF(("handle_tcpip: msg: %s\r\n", pstrRecv->pu8Buffer));
		} else {
			PUBNUB_PRINTF(("handle_tcpip: recv error!\r\n"));
		}

		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_RECV);
   10268:	1dfb      	adds	r3, r7, #7
   1026a:	781b      	ldrb	r3, [r3, #0]
   1026c:	b25b      	sxtb	r3, r3
   1026e:	2104      	movs	r1, #4
   10270:	0018      	movs	r0, r3
   10272:	4b0a      	ldr	r3, [pc, #40]	; (1029c <handle_tcpip+0x9c>)
   10274:	4798      	blx	r3
   10276:	0003      	movs	r3, r0
   10278:	60fb      	str	r3, [r7, #12]

		if (pb != NULL) {
		}

		handle_tcpip_recv(sock, u8Msg, pvMsg);
   1027a:	683a      	ldr	r2, [r7, #0]
   1027c:	1dbb      	adds	r3, r7, #6
   1027e:	7819      	ldrb	r1, [r3, #0]
   10280:	1dfb      	adds	r3, r7, #7
   10282:	781b      	ldrb	r3, [r3, #0]
   10284:	b25b      	sxtb	r3, r3
   10286:	0018      	movs	r0, r3
   10288:	4b06      	ldr	r3, [pc, #24]	; (102a4 <handle_tcpip+0xa4>)
   1028a:	4798      	blx	r3
	}
	break;
   1028c:	e000      	b.n	10290 <handle_tcpip+0x90>
		if (pb != NULL) {
			pb->state = PS_WAIT_RECV;
			handle_transaction(pb);
		}
	}
	break;
   1028e:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
   10290:	46c0      	nop			; (mov r8, r8)
   10292:	46bd      	mov	sp, r7
   10294:	b006      	add	sp, #24
   10296:	bd80      	pop	{r7, pc}
   10298:	0000ff75 	.word	0x0000ff75
   1029c:	0000fb0d 	.word	0x0000fb0d
   102a0:	0000fa25 	.word	0x0000fa25
   102a4:	0000fff9 	.word	0x0000fff9

000102a8 <pubnub_get_ctx>:

pubnub_t *pubnub_get_ctx(uint8_t index)
{
   102a8:	b590      	push	{r4, r7, lr}
   102aa:	b083      	sub	sp, #12
   102ac:	af00      	add	r7, sp, #0
   102ae:	0002      	movs	r2, r0
   102b0:	1dfb      	adds	r3, r7, #7
   102b2:	701a      	strb	r2, [r3, #0]
	assert(index < PUBNUB_CTX_MAX);
   102b4:	1dfb      	adds	r3, r7, #7
   102b6:	781b      	ldrb	r3, [r3, #0]
   102b8:	2b01      	cmp	r3, #1
   102ba:	d908      	bls.n	102ce <pubnub_get_ctx+0x26>
   102bc:	4c09      	ldr	r4, [pc, #36]	; (102e4 <pubnub_get_ctx+0x3c>)
   102be:	4a0a      	ldr	r2, [pc, #40]	; (102e8 <pubnub_get_ctx+0x40>)
   102c0:	2376      	movs	r3, #118	; 0x76
   102c2:	33ff      	adds	r3, #255	; 0xff
   102c4:	0019      	movs	r1, r3
   102c6:	4809      	ldr	r0, [pc, #36]	; (102ec <pubnub_get_ctx+0x44>)
   102c8:	0023      	movs	r3, r4
   102ca:	4c09      	ldr	r4, [pc, #36]	; (102f0 <pubnub_get_ctx+0x48>)
   102cc:	47a0      	blx	r4
	return m_aCtx + index;
   102ce:	1dfb      	adds	r3, r7, #7
   102d0:	781b      	ldrb	r3, [r3, #0]
   102d2:	22dc      	movs	r2, #220	; 0xdc
   102d4:	0092      	lsls	r2, r2, #2
   102d6:	435a      	muls	r2, r3
   102d8:	4b06      	ldr	r3, [pc, #24]	; (102f4 <pubnub_get_ctx+0x4c>)
   102da:	18d3      	adds	r3, r2, r3
}
   102dc:	0018      	movs	r0, r3
   102de:	46bd      	mov	sp, r7
   102e0:	b003      	add	sp, #12
   102e2:	bd90      	pop	{r4, r7, pc}
   102e4:	00013f90 	.word	0x00013f90
   102e8:	0001408c 	.word	0x0001408c
   102ec:	00013ee4 	.word	0x00013ee4
   102f0:	00010cf5 	.word	0x00010cf5
   102f4:	20003ebc 	.word	0x20003ebc

000102f8 <pubnub_init>:

void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
   102f8:	b590      	push	{r4, r7, lr}
   102fa:	b085      	sub	sp, #20
   102fc:	af00      	add	r7, sp, #0
   102fe:	60f8      	str	r0, [r7, #12]
   10300:	60b9      	str	r1, [r7, #8]
   10302:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
   10304:	68fb      	ldr	r3, [r7, #12]
   10306:	0018      	movs	r0, r3
   10308:	4b17      	ldr	r3, [pc, #92]	; (10368 <pubnub_init+0x70>)
   1030a:	4798      	blx	r3
   1030c:	1e03      	subs	r3, r0, #0
   1030e:	d108      	bne.n	10322 <pubnub_init+0x2a>
   10310:	4c16      	ldr	r4, [pc, #88]	; (1036c <pubnub_init+0x74>)
   10312:	4a17      	ldr	r2, [pc, #92]	; (10370 <pubnub_init+0x78>)
   10314:	237c      	movs	r3, #124	; 0x7c
   10316:	33ff      	adds	r3, #255	; 0xff
   10318:	0019      	movs	r1, r3
   1031a:	4816      	ldr	r0, [pc, #88]	; (10374 <pubnub_init+0x7c>)
   1031c:	0023      	movs	r3, r4
   1031e:	4c16      	ldr	r4, [pc, #88]	; (10378 <pubnub_init+0x80>)
   10320:	47a0      	blx	r4

	pb->publish_key = publish_key;
   10322:	68fb      	ldr	r3, [r7, #12]
   10324:	68ba      	ldr	r2, [r7, #8]
   10326:	601a      	str	r2, [r3, #0]
	pb->subscribe_key = subscribe_key;
   10328:	68fb      	ldr	r3, [r7, #12]
   1032a:	687a      	ldr	r2, [r7, #4]
   1032c:	605a      	str	r2, [r3, #4]
	pb->timetoken[0] = '0';
   1032e:	68fb      	ldr	r3, [r7, #12]
   10330:	2230      	movs	r2, #48	; 0x30
   10332:	741a      	strb	r2, [r3, #16]
	pb->timetoken[1] = '\0';
   10334:	68fb      	ldr	r3, [r7, #12]
   10336:	2200      	movs	r2, #0
   10338:	745a      	strb	r2, [r3, #17]
	pb->uuid = pb->auth = NULL;
   1033a:	68fb      	ldr	r3, [r7, #12]
   1033c:	2200      	movs	r2, #0
   1033e:	60da      	str	r2, [r3, #12]
   10340:	68fb      	ldr	r3, [r7, #12]
   10342:	68da      	ldr	r2, [r3, #12]
   10344:	68fb      	ldr	r3, [r7, #12]
   10346:	609a      	str	r2, [r3, #8]
	pb->tcp_socket = -1;
   10348:	68fb      	ldr	r3, [r7, #12]
   1034a:	2253      	movs	r2, #83	; 0x53
   1034c:	21ff      	movs	r1, #255	; 0xff
   1034e:	5499      	strb	r1, [r3, r2]
	pb->state = PS_IDLE;
   10350:	68fb      	ldr	r3, [r7, #12]
   10352:	2252      	movs	r2, #82	; 0x52
   10354:	2100      	movs	r1, #0
   10356:	5499      	strb	r1, [r3, r2]
	pb->last_result = PNR_IO_ERROR;
   10358:	68fb      	ldr	r3, [r7, #12]
   1035a:	2250      	movs	r2, #80	; 0x50
   1035c:	2102      	movs	r1, #2
   1035e:	5499      	strb	r1, [r3, r2]
}
   10360:	46c0      	nop			; (mov r8, r8)
   10362:	46bd      	mov	sp, r7
   10364:	b005      	add	sp, #20
   10366:	bd90      	pop	{r4, r7, pc}
   10368:	0000fad5 	.word	0x0000fad5
   1036c:	00013ed0 	.word	0x00013ed0
   10370:	0001409c 	.word	0x0001409c
   10374:	00013ee4 	.word	0x00013ee4
   10378:	00010cf5 	.word	0x00010cf5

0001037c <pubnub_publish>:

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
   1037c:	b5b0      	push	{r4, r5, r7, lr}
   1037e:	b08a      	sub	sp, #40	; 0x28
   10380:	af02      	add	r7, sp, #8
   10382:	60f8      	str	r0, [r7, #12]
   10384:	60b9      	str	r1, [r7, #8]
   10386:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
   10388:	68fb      	ldr	r3, [r7, #12]
   1038a:	0018      	movs	r0, r3
   1038c:	4b6c      	ldr	r3, [pc, #432]	; (10540 <pubnub_publish+0x1c4>)
   1038e:	4798      	blx	r3
   10390:	1e03      	subs	r3, r0, #0
   10392:	d108      	bne.n	103a6 <pubnub_publish+0x2a>
   10394:	4c6b      	ldr	r4, [pc, #428]	; (10544 <pubnub_publish+0x1c8>)
   10396:	4a6c      	ldr	r2, [pc, #432]	; (10548 <pubnub_publish+0x1cc>)
   10398:	238a      	movs	r3, #138	; 0x8a
   1039a:	33ff      	adds	r3, #255	; 0xff
   1039c:	0019      	movs	r1, r3
   1039e:	486b      	ldr	r0, [pc, #428]	; (1054c <pubnub_publish+0x1d0>)
   103a0:	0023      	movs	r3, r4
   103a2:	4c6b      	ldr	r4, [pc, #428]	; (10550 <pubnub_publish+0x1d4>)
   103a4:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
   103a6:	68fb      	ldr	r3, [r7, #12]
   103a8:	2252      	movs	r2, #82	; 0x52
   103aa:	5c9b      	ldrb	r3, [r3, r2]
   103ac:	2b00      	cmp	r3, #0
   103ae:	d001      	beq.n	103b4 <pubnub_publish+0x38>
		return false;
   103b0:	2300      	movs	r3, #0
   103b2:	e0c0      	b.n	10536 <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
   103b4:	68fb      	ldr	r3, [r7, #12]
   103b6:	2251      	movs	r2, #81	; 0x51
   103b8:	2102      	movs	r1, #2
   103ba:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
   103bc:	68fb      	ldr	r3, [r7, #12]
   103be:	3354      	adds	r3, #84	; 0x54
   103c0:	0018      	movs	r0, r3
   103c2:	68fb      	ldr	r3, [r7, #12]
   103c4:	681d      	ldr	r5, [r3, #0]
   103c6:	68fb      	ldr	r3, [r7, #12]
   103c8:	685b      	ldr	r3, [r3, #4]
   103ca:	4c62      	ldr	r4, [pc, #392]	; (10554 <pubnub_publish+0x1d8>)
   103cc:	2280      	movs	r2, #128	; 0x80
   103ce:	0051      	lsls	r1, r2, #1
   103d0:	68ba      	ldr	r2, [r7, #8]
   103d2:	9201      	str	r2, [sp, #4]
   103d4:	9300      	str	r3, [sp, #0]
   103d6:	002b      	movs	r3, r5
   103d8:	0022      	movs	r2, r4
   103da:	4c5f      	ldr	r4, [pc, #380]	; (10558 <pubnub_publish+0x1dc>)
   103dc:	47a0      	blx	r4
   103de:	0003      	movs	r3, r0
   103e0:	0019      	movs	r1, r3
   103e2:	68fa      	ldr	r2, [r7, #12]
   103e4:	23ac      	movs	r3, #172	; 0xac
   103e6:	005b      	lsls	r3, r3, #1
   103e8:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
   103ea:	687b      	ldr	r3, [r7, #4]
   103ec:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
   103ee:	e08a      	b.n	10506 <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
   103f0:	4a5a      	ldr	r2, [pc, #360]	; (1055c <pubnub_publish+0x1e0>)
   103f2:	69fb      	ldr	r3, [r7, #28]
   103f4:	0011      	movs	r1, r2
   103f6:	0018      	movs	r0, r3
   103f8:	4b59      	ldr	r3, [pc, #356]	; (10560 <pubnub_publish+0x1e4>)
   103fa:	4798      	blx	r3
   103fc:	0003      	movs	r3, r0
   103fe:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
   10400:	69bb      	ldr	r3, [r7, #24]
   10402:	2b00      	cmp	r3, #0
   10404:	d034      	beq.n	10470 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
   10406:	68fa      	ldr	r2, [r7, #12]
   10408:	23ac      	movs	r3, #172	; 0xac
   1040a:	005b      	lsls	r3, r3, #1
   1040c:	58d3      	ldr	r3, [r2, r3]
   1040e:	22ff      	movs	r2, #255	; 0xff
   10410:	1ad2      	subs	r2, r2, r3
   10412:	69bb      	ldr	r3, [r7, #24]
   10414:	429a      	cmp	r2, r3
   10416:	d206      	bcs.n	10426 <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
   10418:	68fa      	ldr	r2, [r7, #12]
   1041a:	23ac      	movs	r3, #172	; 0xac
   1041c:	005b      	lsls	r3, r3, #1
   1041e:	2100      	movs	r1, #0
   10420:	50d1      	str	r1, [r2, r3]
				return false;
   10422:	2300      	movs	r3, #0
   10424:	e087      	b.n	10536 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
   10426:	68fb      	ldr	r3, [r7, #12]
   10428:	3354      	adds	r3, #84	; 0x54
   1042a:	001a      	movs	r2, r3
   1042c:	68f9      	ldr	r1, [r7, #12]
   1042e:	23ac      	movs	r3, #172	; 0xac
   10430:	005b      	lsls	r3, r3, #1
   10432:	58cb      	ldr	r3, [r1, r3]
   10434:	18d3      	adds	r3, r2, r3
   10436:	69ba      	ldr	r2, [r7, #24]
   10438:	69f9      	ldr	r1, [r7, #28]
   1043a:	0018      	movs	r0, r3
   1043c:	4b49      	ldr	r3, [pc, #292]	; (10564 <pubnub_publish+0x1e8>)
   1043e:	4798      	blx	r3
			pb->http_buf_len += okspan;
   10440:	68fa      	ldr	r2, [r7, #12]
   10442:	23ac      	movs	r3, #172	; 0xac
   10444:	005b      	lsls	r3, r3, #1
   10446:	58d2      	ldr	r2, [r2, r3]
   10448:	69bb      	ldr	r3, [r7, #24]
   1044a:	18d1      	adds	r1, r2, r3
   1044c:	68fa      	ldr	r2, [r7, #12]
   1044e:	23ac      	movs	r3, #172	; 0xac
   10450:	005b      	lsls	r3, r3, #1
   10452:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
   10454:	68fa      	ldr	r2, [r7, #12]
   10456:	23ac      	movs	r3, #172	; 0xac
   10458:	005b      	lsls	r3, r3, #1
   1045a:	58d3      	ldr	r3, [r2, r3]
   1045c:	68fa      	ldr	r2, [r7, #12]
   1045e:	2154      	movs	r1, #84	; 0x54
   10460:	18d3      	adds	r3, r2, r3
   10462:	185b      	adds	r3, r3, r1
   10464:	2200      	movs	r2, #0
   10466:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
   10468:	69fa      	ldr	r2, [r7, #28]
   1046a:	69bb      	ldr	r3, [r7, #24]
   1046c:	18d3      	adds	r3, r2, r3
   1046e:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
   10470:	69fb      	ldr	r3, [r7, #28]
   10472:	781b      	ldrb	r3, [r3, #0]
   10474:	2b00      	cmp	r3, #0
   10476:	d046      	beq.n	10506 <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
   10478:	2314      	movs	r3, #20
   1047a:	18fb      	adds	r3, r7, r3
   1047c:	2200      	movs	r2, #0
   1047e:	601a      	str	r2, [r3, #0]
   10480:	2314      	movs	r3, #20
   10482:	18fb      	adds	r3, r7, r3
   10484:	2225      	movs	r2, #37	; 0x25
   10486:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
   10488:	69fb      	ldr	r3, [r7, #28]
   1048a:	781b      	ldrb	r3, [r3, #0]
   1048c:	091b      	lsrs	r3, r3, #4
   1048e:	b2db      	uxtb	r3, r3
   10490:	001a      	movs	r2, r3
   10492:	4b35      	ldr	r3, [pc, #212]	; (10568 <pubnub_publish+0x1ec>)
   10494:	5c9a      	ldrb	r2, [r3, r2]
   10496:	2314      	movs	r3, #20
   10498:	18fb      	adds	r3, r7, r3
   1049a:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
   1049c:	69fb      	ldr	r3, [r7, #28]
   1049e:	781b      	ldrb	r3, [r3, #0]
   104a0:	001a      	movs	r2, r3
   104a2:	230f      	movs	r3, #15
   104a4:	4013      	ands	r3, r2
   104a6:	4a30      	ldr	r2, [pc, #192]	; (10568 <pubnub_publish+0x1ec>)
   104a8:	5cd2      	ldrb	r2, [r2, r3]
   104aa:	2314      	movs	r3, #20
   104ac:	18fb      	adds	r3, r7, r3
   104ae:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
   104b0:	68fa      	ldr	r2, [r7, #12]
   104b2:	23ac      	movs	r3, #172	; 0xac
   104b4:	005b      	lsls	r3, r3, #1
   104b6:	58d3      	ldr	r3, [r2, r3]
   104b8:	22ff      	movs	r2, #255	; 0xff
   104ba:	1ad3      	subs	r3, r2, r3
   104bc:	2b02      	cmp	r3, #2
   104be:	d806      	bhi.n	104ce <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
   104c0:	68fa      	ldr	r2, [r7, #12]
   104c2:	23ac      	movs	r3, #172	; 0xac
   104c4:	005b      	lsls	r3, r3, #1
   104c6:	2100      	movs	r1, #0
   104c8:	50d1      	str	r1, [r2, r3]
				return false;
   104ca:	2300      	movs	r3, #0
   104cc:	e033      	b.n	10536 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
   104ce:	68fb      	ldr	r3, [r7, #12]
   104d0:	3354      	adds	r3, #84	; 0x54
   104d2:	001a      	movs	r2, r3
   104d4:	68f9      	ldr	r1, [r7, #12]
   104d6:	23ac      	movs	r3, #172	; 0xac
   104d8:	005b      	lsls	r3, r3, #1
   104da:	58cb      	ldr	r3, [r1, r3]
   104dc:	18d2      	adds	r2, r2, r3
   104de:	2314      	movs	r3, #20
   104e0:	18fb      	adds	r3, r7, r3
   104e2:	0010      	movs	r0, r2
   104e4:	0019      	movs	r1, r3
   104e6:	2304      	movs	r3, #4
   104e8:	001a      	movs	r2, r3
   104ea:	4b1e      	ldr	r3, [pc, #120]	; (10564 <pubnub_publish+0x1e8>)
   104ec:	4798      	blx	r3
			pb->http_buf_len += 3;
   104ee:	68fa      	ldr	r2, [r7, #12]
   104f0:	23ac      	movs	r3, #172	; 0xac
   104f2:	005b      	lsls	r3, r3, #1
   104f4:	58d3      	ldr	r3, [r2, r3]
   104f6:	1cd9      	adds	r1, r3, #3
   104f8:	68fa      	ldr	r2, [r7, #12]
   104fa:	23ac      	movs	r3, #172	; 0xac
   104fc:	005b      	lsls	r3, r3, #1
   104fe:	50d1      	str	r1, [r2, r3]
			++pmessage;
   10500:	69fb      	ldr	r3, [r7, #28]
   10502:	3301      	adds	r3, #1
   10504:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
   10506:	69fb      	ldr	r3, [r7, #28]
   10508:	781b      	ldrb	r3, [r3, #0]
   1050a:	2b00      	cmp	r3, #0
   1050c:	d000      	beq.n	10510 <pubnub_publish+0x194>
   1050e:	e76f      	b.n	103f0 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
   10510:	68fb      	ldr	r3, [r7, #12]
   10512:	2250      	movs	r2, #80	; 0x50
   10514:	5c9b      	ldrb	r3, [r3, r2]
   10516:	2b00      	cmp	r3, #0
   10518:	d108      	bne.n	1052c <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
   1051a:	68fb      	ldr	r3, [r7, #12]
   1051c:	2252      	movs	r2, #82	; 0x52
   1051e:	2103      	movs	r1, #3
   10520:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
   10522:	68fb      	ldr	r3, [r7, #12]
   10524:	0018      	movs	r0, r3
   10526:	4b11      	ldr	r3, [pc, #68]	; (1056c <pubnub_publish+0x1f0>)
   10528:	4798      	blx	r3
   1052a:	e003      	b.n	10534 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
   1052c:	68fb      	ldr	r3, [r7, #12]
   1052e:	0018      	movs	r0, r3
   10530:	4b0f      	ldr	r3, [pc, #60]	; (10570 <pubnub_publish+0x1f4>)
   10532:	4798      	blx	r3
	}

	return true;
   10534:	2301      	movs	r3, #1
}
   10536:	0018      	movs	r0, r3
   10538:	46bd      	mov	sp, r7
   1053a:	b008      	add	sp, #32
   1053c:	bdb0      	pop	{r4, r5, r7, pc}
   1053e:	46c0      	nop			; (mov r8, r8)
   10540:	0000fad5 	.word	0x0000fad5
   10544:	00013ed0 	.word	0x00013ed0
   10548:	000140a8 	.word	0x000140a8
   1054c:	00013ee4 	.word	0x00013ee4
   10550:	00010cf5 	.word	0x00010cf5
   10554:	00013fa8 	.word	0x00013fa8
   10558:	000117a5 	.word	0x000117a5
   1055c:	00013fc0 	.word	0x00013fc0
   10560:	000118a3 	.word	0x000118a3
   10564:	00010dd5 	.word	0x00010dd5
   10568:	0001400c 	.word	0x0001400c
   1056c:	0000fa25 	.word	0x0000fa25
   10570:	0000fb6d 	.word	0x0000fb6d

00010574 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
   10574:	b5f0      	push	{r4, r5, r6, r7, lr}
   10576:	4657      	mov	r7, sl
   10578:	464e      	mov	r6, r9
   1057a:	4645      	mov	r5, r8
   1057c:	b4e0      	push	{r5, r6, r7}
   1057e:	b08c      	sub	sp, #48	; 0x30
   10580:	af0a      	add	r7, sp, #40	; 0x28
   10582:	6078      	str	r0, [r7, #4]
   10584:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
   10586:	687b      	ldr	r3, [r7, #4]
   10588:	0018      	movs	r0, r3
   1058a:	4b4a      	ldr	r3, [pc, #296]	; (106b4 <pubnub_subscribe+0x140>)
   1058c:	4798      	blx	r3
   1058e:	1e03      	subs	r3, r0, #0
   10590:	d108      	bne.n	105a4 <pubnub_subscribe+0x30>
   10592:	4c49      	ldr	r4, [pc, #292]	; (106b8 <pubnub_subscribe+0x144>)
   10594:	4a49      	ldr	r2, [pc, #292]	; (106bc <pubnub_subscribe+0x148>)
   10596:	23c2      	movs	r3, #194	; 0xc2
   10598:	33ff      	adds	r3, #255	; 0xff
   1059a:	0019      	movs	r1, r3
   1059c:	4848      	ldr	r0, [pc, #288]	; (106c0 <pubnub_subscribe+0x14c>)
   1059e:	0023      	movs	r3, r4
   105a0:	4c48      	ldr	r4, [pc, #288]	; (106c4 <pubnub_subscribe+0x150>)
   105a2:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
   105a4:	687b      	ldr	r3, [r7, #4]
   105a6:	2252      	movs	r2, #82	; 0x52
   105a8:	5c9b      	ldrb	r3, [r3, r2]
   105aa:	2b00      	cmp	r3, #0
   105ac:	d001      	beq.n	105b2 <pubnub_subscribe+0x3e>
		return false;
   105ae:	2300      	movs	r3, #0
   105b0:	e078      	b.n	106a4 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
   105b2:	687b      	ldr	r3, [r7, #4]
   105b4:	2251      	movs	r2, #81	; 0x51
   105b6:	2101      	movs	r1, #1
   105b8:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
   105ba:	687b      	ldr	r3, [r7, #4]
   105bc:	3366      	adds	r3, #102	; 0x66
   105be:	33ff      	adds	r3, #255	; 0xff
   105c0:	0018      	movs	r0, r3
   105c2:	2380      	movs	r3, #128	; 0x80
   105c4:	009b      	lsls	r3, r3, #2
   105c6:	001a      	movs	r2, r3
   105c8:	2100      	movs	r1, #0
   105ca:	4b3f      	ldr	r3, [pc, #252]	; (106c8 <pubnub_subscribe+0x154>)
   105cc:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	2254      	movs	r2, #84	; 0x54
   105d2:	4694      	mov	ip, r2
   105d4:	449c      	add	ip, r3
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	685b      	ldr	r3, [r3, #4]
   105da:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
   105dc:	687b      	ldr	r3, [r7, #4]
   105de:	3310      	adds	r3, #16
   105e0:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
   105e2:	687b      	ldr	r3, [r7, #4]
   105e4:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   105e6:	2b00      	cmp	r3, #0
   105e8:	d001      	beq.n	105ee <pubnub_subscribe+0x7a>
   105ea:	4b38      	ldr	r3, [pc, #224]	; (106cc <pubnub_subscribe+0x158>)
   105ec:	e000      	b.n	105f0 <pubnub_subscribe+0x7c>
   105ee:	4b38      	ldr	r3, [pc, #224]	; (106d0 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
   105f0:	687a      	ldr	r2, [r7, #4]
   105f2:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   105f4:	2a00      	cmp	r2, #0
   105f6:	d002      	beq.n	105fe <pubnub_subscribe+0x8a>
   105f8:	687a      	ldr	r2, [r7, #4]
   105fa:	6892      	ldr	r2, [r2, #8]
   105fc:	e000      	b.n	10600 <pubnub_subscribe+0x8c>
   105fe:	4a34      	ldr	r2, [pc, #208]	; (106d0 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
   10600:	6879      	ldr	r1, [r7, #4]
   10602:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   10604:	2900      	cmp	r1, #0
   10606:	d005      	beq.n	10614 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
   10608:	6879      	ldr	r1, [r7, #4]
   1060a:	68c9      	ldr	r1, [r1, #12]
   1060c:	2900      	cmp	r1, #0
   1060e:	d001      	beq.n	10614 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   10610:	4930      	ldr	r1, [pc, #192]	; (106d4 <pubnub_subscribe+0x160>)
   10612:	e000      	b.n	10616 <pubnub_subscribe+0xa2>
   10614:	492e      	ldr	r1, [pc, #184]	; (106d0 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
   10616:	6878      	ldr	r0, [r7, #4]
   10618:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   1061a:	2800      	cmp	r0, #0
   1061c:	d005      	beq.n	1062a <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
   1061e:	6878      	ldr	r0, [r7, #4]
   10620:	68c0      	ldr	r0, [r0, #12]
   10622:	2800      	cmp	r0, #0
   10624:	d001      	beq.n	1062a <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   10626:	482c      	ldr	r0, [pc, #176]	; (106d8 <pubnub_subscribe+0x164>)
   10628:	e000      	b.n	1062c <pubnub_subscribe+0xb8>
   1062a:	4829      	ldr	r0, [pc, #164]	; (106d0 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
   1062c:	687c      	ldr	r4, [r7, #4]
   1062e:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   10630:	2c00      	cmp	r4, #0
   10632:	d006      	beq.n	10642 <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
   10634:	687c      	ldr	r4, [r7, #4]
   10636:	68e4      	ldr	r4, [r4, #12]
   10638:	2c00      	cmp	r4, #0
   1063a:	d002      	beq.n	10642 <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
   1063c:	687c      	ldr	r4, [r7, #4]
   1063e:	68e4      	ldr	r4, [r4, #12]
   10640:	e000      	b.n	10644 <pubnub_subscribe+0xd0>
   10642:	4c23      	ldr	r4, [pc, #140]	; (106d0 <pubnub_subscribe+0x15c>)
   10644:	4e25      	ldr	r6, [pc, #148]	; (106dc <pubnub_subscribe+0x168>)
   10646:	46b1      	mov	r9, r6
   10648:	2680      	movs	r6, #128	; 0x80
   1064a:	0076      	lsls	r6, r6, #1
   1064c:	46b0      	mov	r8, r6
   1064e:	4e24      	ldr	r6, [pc, #144]	; (106e0 <pubnub_subscribe+0x16c>)
   10650:	9608      	str	r6, [sp, #32]
   10652:	4e1f      	ldr	r6, [pc, #124]	; (106d0 <pubnub_subscribe+0x15c>)
   10654:	9607      	str	r6, [sp, #28]
   10656:	9406      	str	r4, [sp, #24]
   10658:	9005      	str	r0, [sp, #20]
   1065a:	9104      	str	r1, [sp, #16]
   1065c:	9203      	str	r2, [sp, #12]
   1065e:	9302      	str	r3, [sp, #8]
   10660:	9501      	str	r5, [sp, #4]
   10662:	683b      	ldr	r3, [r7, #0]
   10664:	9300      	str	r3, [sp, #0]
   10666:	4653      	mov	r3, sl
   10668:	464a      	mov	r2, r9
   1066a:	4641      	mov	r1, r8
   1066c:	4660      	mov	r0, ip
   1066e:	4c1d      	ldr	r4, [pc, #116]	; (106e4 <pubnub_subscribe+0x170>)
   10670:	47a0      	blx	r4
   10672:	0003      	movs	r3, r0
   10674:	0019      	movs	r1, r3
   10676:	687a      	ldr	r2, [r7, #4]
   10678:	23ac      	movs	r3, #172	; 0xac
   1067a:	005b      	lsls	r3, r3, #1
   1067c:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
   1067e:	687b      	ldr	r3, [r7, #4]
   10680:	2250      	movs	r2, #80	; 0x50
   10682:	5c9b      	ldrb	r3, [r3, r2]
   10684:	2b00      	cmp	r3, #0
   10686:	d108      	bne.n	1069a <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
   10688:	687b      	ldr	r3, [r7, #4]
   1068a:	2252      	movs	r2, #82	; 0x52
   1068c:	2103      	movs	r1, #3
   1068e:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
   10690:	687b      	ldr	r3, [r7, #4]
   10692:	0018      	movs	r0, r3
   10694:	4b14      	ldr	r3, [pc, #80]	; (106e8 <pubnub_subscribe+0x174>)
   10696:	4798      	blx	r3
   10698:	e003      	b.n	106a2 <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
   1069a:	687b      	ldr	r3, [r7, #4]
   1069c:	0018      	movs	r0, r3
   1069e:	4b13      	ldr	r3, [pc, #76]	; (106ec <pubnub_subscribe+0x178>)
   106a0:	4798      	blx	r3
	}

	return true;
   106a2:	2301      	movs	r3, #1
}
   106a4:	0018      	movs	r0, r3
   106a6:	46bd      	mov	sp, r7
   106a8:	b002      	add	sp, #8
   106aa:	bc1c      	pop	{r2, r3, r4}
   106ac:	4690      	mov	r8, r2
   106ae:	4699      	mov	r9, r3
   106b0:	46a2      	mov	sl, r4
   106b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106b4:	0000fad5 	.word	0x0000fad5
   106b8:	00013ed0 	.word	0x00013ed0
   106bc:	000140b8 	.word	0x000140b8
   106c0:	00013ee4 	.word	0x00013ee4
   106c4:	00010cf5 	.word	0x00010cf5
   106c8:	00010de7 	.word	0x00010de7
   106cc:	00014020 	.word	0x00014020
   106d0:	00014028 	.word	0x00014028
   106d4:	0001402c 	.word	0x0001402c
   106d8:	00014030 	.word	0x00014030
   106dc:	00014038 	.word	0x00014038
   106e0:	00014070 	.word	0x00014070
   106e4:	000117a5 	.word	0x000117a5
   106e8:	0000fa25 	.word	0x0000fa25
   106ec:	0000fb6d 	.word	0x0000fb6d

000106f0 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
   106f0:	b590      	push	{r4, r7, lr}
   106f2:	b085      	sub	sp, #20
   106f4:	af00      	add	r7, sp, #0
   106f6:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
   106f8:	687b      	ldr	r3, [r7, #4]
   106fa:	0018      	movs	r0, r3
   106fc:	4b20      	ldr	r3, [pc, #128]	; (10780 <pubnub_get+0x90>)
   106fe:	4798      	blx	r3
   10700:	1e03      	subs	r3, r0, #0
   10702:	d108      	bne.n	10716 <pubnub_get+0x26>
   10704:	4c1f      	ldr	r4, [pc, #124]	; (10784 <pubnub_get+0x94>)
   10706:	4a20      	ldr	r2, [pc, #128]	; (10788 <pubnub_get+0x98>)
   10708:	23e0      	movs	r3, #224	; 0xe0
   1070a:	33ff      	adds	r3, #255	; 0xff
   1070c:	0019      	movs	r1, r3
   1070e:	481f      	ldr	r0, [pc, #124]	; (1078c <pubnub_get+0x9c>)
   10710:	0023      	movs	r3, r4
   10712:	4c1f      	ldr	r4, [pc, #124]	; (10790 <pubnub_get+0xa0>)
   10714:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
   10716:	687b      	ldr	r3, [r7, #4]
   10718:	4a1e      	ldr	r2, [pc, #120]	; (10794 <pubnub_get+0xa4>)
   1071a:	5a9a      	ldrh	r2, [r3, r2]
   1071c:	6879      	ldr	r1, [r7, #4]
   1071e:	23da      	movs	r3, #218	; 0xda
   10720:	009b      	lsls	r3, r3, #2
   10722:	5acb      	ldrh	r3, [r1, r3]
   10724:	429a      	cmp	r2, r3
   10726:	d225      	bcs.n	10774 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
   10728:	687b      	ldr	r3, [r7, #4]
   1072a:	3366      	adds	r3, #102	; 0x66
   1072c:	33ff      	adds	r3, #255	; 0xff
   1072e:	687a      	ldr	r2, [r7, #4]
   10730:	4918      	ldr	r1, [pc, #96]	; (10794 <pubnub_get+0xa4>)
   10732:	5a52      	ldrh	r2, [r2, r1]
   10734:	189b      	adds	r3, r3, r2
   10736:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
   10738:	687b      	ldr	r3, [r7, #4]
   1073a:	4a16      	ldr	r2, [pc, #88]	; (10794 <pubnub_get+0xa4>)
   1073c:	5a9c      	ldrh	r4, [r3, r2]
   1073e:	68fb      	ldr	r3, [r7, #12]
   10740:	0018      	movs	r0, r3
   10742:	4b15      	ldr	r3, [pc, #84]	; (10798 <pubnub_get+0xa8>)
   10744:	4798      	blx	r3
   10746:	0003      	movs	r3, r0
   10748:	b29b      	uxth	r3, r3
   1074a:	18e3      	adds	r3, r4, r3
   1074c:	b299      	uxth	r1, r3
   1074e:	687b      	ldr	r3, [r7, #4]
   10750:	4a10      	ldr	r2, [pc, #64]	; (10794 <pubnub_get+0xa4>)
   10752:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
   10754:	687b      	ldr	r3, [r7, #4]
   10756:	4a0f      	ldr	r2, [pc, #60]	; (10794 <pubnub_get+0xa4>)
   10758:	5a9b      	ldrh	r3, [r3, r2]
   1075a:	1c5a      	adds	r2, r3, #1
   1075c:	b290      	uxth	r0, r2
   1075e:	687a      	ldr	r2, [r7, #4]
   10760:	490c      	ldr	r1, [pc, #48]	; (10794 <pubnub_get+0xa4>)
   10762:	5250      	strh	r0, [r2, r1]
   10764:	6879      	ldr	r1, [r7, #4]
   10766:	22da      	movs	r2, #218	; 0xda
   10768:	0092      	lsls	r2, r2, #2
   1076a:	5a8a      	ldrh	r2, [r1, r2]
   1076c:	4293      	cmp	r3, r2
   1076e:	d801      	bhi.n	10774 <pubnub_get+0x84>
			return rslt;
   10770:	68fb      	ldr	r3, [r7, #12]
   10772:	e000      	b.n	10776 <pubnub_get+0x86>
		}
	}

	return NULL;
   10774:	2300      	movs	r3, #0
}
   10776:	0018      	movs	r0, r3
   10778:	46bd      	mov	sp, r7
   1077a:	b005      	add	sp, #20
   1077c:	bd90      	pop	{r4, r7, pc}
   1077e:	46c0      	nop			; (mov r8, r8)
   10780:	0000fad5 	.word	0x0000fad5
   10784:	00013ed0 	.word	0x00013ed0
   10788:	000140cc 	.word	0x000140cc
   1078c:	00013ee4 	.word	0x00013ee4
   10790:	00010cf5 	.word	0x00010cf5
   10794:	00000366 	.word	0x00000366
   10798:	00011871 	.word	0x00011871

0001079c <__aeabi_uidiv>:
   1079c:	2200      	movs	r2, #0
   1079e:	0843      	lsrs	r3, r0, #1
   107a0:	428b      	cmp	r3, r1
   107a2:	d374      	bcc.n	1088e <__aeabi_uidiv+0xf2>
   107a4:	0903      	lsrs	r3, r0, #4
   107a6:	428b      	cmp	r3, r1
   107a8:	d35f      	bcc.n	1086a <__aeabi_uidiv+0xce>
   107aa:	0a03      	lsrs	r3, r0, #8
   107ac:	428b      	cmp	r3, r1
   107ae:	d344      	bcc.n	1083a <__aeabi_uidiv+0x9e>
   107b0:	0b03      	lsrs	r3, r0, #12
   107b2:	428b      	cmp	r3, r1
   107b4:	d328      	bcc.n	10808 <__aeabi_uidiv+0x6c>
   107b6:	0c03      	lsrs	r3, r0, #16
   107b8:	428b      	cmp	r3, r1
   107ba:	d30d      	bcc.n	107d8 <__aeabi_uidiv+0x3c>
   107bc:	22ff      	movs	r2, #255	; 0xff
   107be:	0209      	lsls	r1, r1, #8
   107c0:	ba12      	rev	r2, r2
   107c2:	0c03      	lsrs	r3, r0, #16
   107c4:	428b      	cmp	r3, r1
   107c6:	d302      	bcc.n	107ce <__aeabi_uidiv+0x32>
   107c8:	1212      	asrs	r2, r2, #8
   107ca:	0209      	lsls	r1, r1, #8
   107cc:	d065      	beq.n	1089a <__aeabi_uidiv+0xfe>
   107ce:	0b03      	lsrs	r3, r0, #12
   107d0:	428b      	cmp	r3, r1
   107d2:	d319      	bcc.n	10808 <__aeabi_uidiv+0x6c>
   107d4:	e000      	b.n	107d8 <__aeabi_uidiv+0x3c>
   107d6:	0a09      	lsrs	r1, r1, #8
   107d8:	0bc3      	lsrs	r3, r0, #15
   107da:	428b      	cmp	r3, r1
   107dc:	d301      	bcc.n	107e2 <__aeabi_uidiv+0x46>
   107de:	03cb      	lsls	r3, r1, #15
   107e0:	1ac0      	subs	r0, r0, r3
   107e2:	4152      	adcs	r2, r2
   107e4:	0b83      	lsrs	r3, r0, #14
   107e6:	428b      	cmp	r3, r1
   107e8:	d301      	bcc.n	107ee <__aeabi_uidiv+0x52>
   107ea:	038b      	lsls	r3, r1, #14
   107ec:	1ac0      	subs	r0, r0, r3
   107ee:	4152      	adcs	r2, r2
   107f0:	0b43      	lsrs	r3, r0, #13
   107f2:	428b      	cmp	r3, r1
   107f4:	d301      	bcc.n	107fa <__aeabi_uidiv+0x5e>
   107f6:	034b      	lsls	r3, r1, #13
   107f8:	1ac0      	subs	r0, r0, r3
   107fa:	4152      	adcs	r2, r2
   107fc:	0b03      	lsrs	r3, r0, #12
   107fe:	428b      	cmp	r3, r1
   10800:	d301      	bcc.n	10806 <__aeabi_uidiv+0x6a>
   10802:	030b      	lsls	r3, r1, #12
   10804:	1ac0      	subs	r0, r0, r3
   10806:	4152      	adcs	r2, r2
   10808:	0ac3      	lsrs	r3, r0, #11
   1080a:	428b      	cmp	r3, r1
   1080c:	d301      	bcc.n	10812 <__aeabi_uidiv+0x76>
   1080e:	02cb      	lsls	r3, r1, #11
   10810:	1ac0      	subs	r0, r0, r3
   10812:	4152      	adcs	r2, r2
   10814:	0a83      	lsrs	r3, r0, #10
   10816:	428b      	cmp	r3, r1
   10818:	d301      	bcc.n	1081e <__aeabi_uidiv+0x82>
   1081a:	028b      	lsls	r3, r1, #10
   1081c:	1ac0      	subs	r0, r0, r3
   1081e:	4152      	adcs	r2, r2
   10820:	0a43      	lsrs	r3, r0, #9
   10822:	428b      	cmp	r3, r1
   10824:	d301      	bcc.n	1082a <__aeabi_uidiv+0x8e>
   10826:	024b      	lsls	r3, r1, #9
   10828:	1ac0      	subs	r0, r0, r3
   1082a:	4152      	adcs	r2, r2
   1082c:	0a03      	lsrs	r3, r0, #8
   1082e:	428b      	cmp	r3, r1
   10830:	d301      	bcc.n	10836 <__aeabi_uidiv+0x9a>
   10832:	020b      	lsls	r3, r1, #8
   10834:	1ac0      	subs	r0, r0, r3
   10836:	4152      	adcs	r2, r2
   10838:	d2cd      	bcs.n	107d6 <__aeabi_uidiv+0x3a>
   1083a:	09c3      	lsrs	r3, r0, #7
   1083c:	428b      	cmp	r3, r1
   1083e:	d301      	bcc.n	10844 <__aeabi_uidiv+0xa8>
   10840:	01cb      	lsls	r3, r1, #7
   10842:	1ac0      	subs	r0, r0, r3
   10844:	4152      	adcs	r2, r2
   10846:	0983      	lsrs	r3, r0, #6
   10848:	428b      	cmp	r3, r1
   1084a:	d301      	bcc.n	10850 <__aeabi_uidiv+0xb4>
   1084c:	018b      	lsls	r3, r1, #6
   1084e:	1ac0      	subs	r0, r0, r3
   10850:	4152      	adcs	r2, r2
   10852:	0943      	lsrs	r3, r0, #5
   10854:	428b      	cmp	r3, r1
   10856:	d301      	bcc.n	1085c <__aeabi_uidiv+0xc0>
   10858:	014b      	lsls	r3, r1, #5
   1085a:	1ac0      	subs	r0, r0, r3
   1085c:	4152      	adcs	r2, r2
   1085e:	0903      	lsrs	r3, r0, #4
   10860:	428b      	cmp	r3, r1
   10862:	d301      	bcc.n	10868 <__aeabi_uidiv+0xcc>
   10864:	010b      	lsls	r3, r1, #4
   10866:	1ac0      	subs	r0, r0, r3
   10868:	4152      	adcs	r2, r2
   1086a:	08c3      	lsrs	r3, r0, #3
   1086c:	428b      	cmp	r3, r1
   1086e:	d301      	bcc.n	10874 <__aeabi_uidiv+0xd8>
   10870:	00cb      	lsls	r3, r1, #3
   10872:	1ac0      	subs	r0, r0, r3
   10874:	4152      	adcs	r2, r2
   10876:	0883      	lsrs	r3, r0, #2
   10878:	428b      	cmp	r3, r1
   1087a:	d301      	bcc.n	10880 <__aeabi_uidiv+0xe4>
   1087c:	008b      	lsls	r3, r1, #2
   1087e:	1ac0      	subs	r0, r0, r3
   10880:	4152      	adcs	r2, r2
   10882:	0843      	lsrs	r3, r0, #1
   10884:	428b      	cmp	r3, r1
   10886:	d301      	bcc.n	1088c <__aeabi_uidiv+0xf0>
   10888:	004b      	lsls	r3, r1, #1
   1088a:	1ac0      	subs	r0, r0, r3
   1088c:	4152      	adcs	r2, r2
   1088e:	1a41      	subs	r1, r0, r1
   10890:	d200      	bcs.n	10894 <__aeabi_uidiv+0xf8>
   10892:	4601      	mov	r1, r0
   10894:	4152      	adcs	r2, r2
   10896:	4610      	mov	r0, r2
   10898:	4770      	bx	lr
   1089a:	e7ff      	b.n	1089c <__aeabi_uidiv+0x100>
   1089c:	b501      	push	{r0, lr}
   1089e:	2000      	movs	r0, #0
   108a0:	f000 f8f0 	bl	10a84 <__aeabi_idiv0>
   108a4:	bd02      	pop	{r1, pc}
   108a6:	46c0      	nop			; (mov r8, r8)

000108a8 <__aeabi_uidivmod>:
   108a8:	2900      	cmp	r1, #0
   108aa:	d0f7      	beq.n	1089c <__aeabi_uidiv+0x100>
   108ac:	e776      	b.n	1079c <__aeabi_uidiv>
   108ae:	4770      	bx	lr

000108b0 <__aeabi_idiv>:
   108b0:	4603      	mov	r3, r0
   108b2:	430b      	orrs	r3, r1
   108b4:	d47f      	bmi.n	109b6 <__aeabi_idiv+0x106>
   108b6:	2200      	movs	r2, #0
   108b8:	0843      	lsrs	r3, r0, #1
   108ba:	428b      	cmp	r3, r1
   108bc:	d374      	bcc.n	109a8 <__aeabi_idiv+0xf8>
   108be:	0903      	lsrs	r3, r0, #4
   108c0:	428b      	cmp	r3, r1
   108c2:	d35f      	bcc.n	10984 <__aeabi_idiv+0xd4>
   108c4:	0a03      	lsrs	r3, r0, #8
   108c6:	428b      	cmp	r3, r1
   108c8:	d344      	bcc.n	10954 <__aeabi_idiv+0xa4>
   108ca:	0b03      	lsrs	r3, r0, #12
   108cc:	428b      	cmp	r3, r1
   108ce:	d328      	bcc.n	10922 <__aeabi_idiv+0x72>
   108d0:	0c03      	lsrs	r3, r0, #16
   108d2:	428b      	cmp	r3, r1
   108d4:	d30d      	bcc.n	108f2 <__aeabi_idiv+0x42>
   108d6:	22ff      	movs	r2, #255	; 0xff
   108d8:	0209      	lsls	r1, r1, #8
   108da:	ba12      	rev	r2, r2
   108dc:	0c03      	lsrs	r3, r0, #16
   108de:	428b      	cmp	r3, r1
   108e0:	d302      	bcc.n	108e8 <__aeabi_idiv+0x38>
   108e2:	1212      	asrs	r2, r2, #8
   108e4:	0209      	lsls	r1, r1, #8
   108e6:	d065      	beq.n	109b4 <__aeabi_idiv+0x104>
   108e8:	0b03      	lsrs	r3, r0, #12
   108ea:	428b      	cmp	r3, r1
   108ec:	d319      	bcc.n	10922 <__aeabi_idiv+0x72>
   108ee:	e000      	b.n	108f2 <__aeabi_idiv+0x42>
   108f0:	0a09      	lsrs	r1, r1, #8
   108f2:	0bc3      	lsrs	r3, r0, #15
   108f4:	428b      	cmp	r3, r1
   108f6:	d301      	bcc.n	108fc <__aeabi_idiv+0x4c>
   108f8:	03cb      	lsls	r3, r1, #15
   108fa:	1ac0      	subs	r0, r0, r3
   108fc:	4152      	adcs	r2, r2
   108fe:	0b83      	lsrs	r3, r0, #14
   10900:	428b      	cmp	r3, r1
   10902:	d301      	bcc.n	10908 <__aeabi_idiv+0x58>
   10904:	038b      	lsls	r3, r1, #14
   10906:	1ac0      	subs	r0, r0, r3
   10908:	4152      	adcs	r2, r2
   1090a:	0b43      	lsrs	r3, r0, #13
   1090c:	428b      	cmp	r3, r1
   1090e:	d301      	bcc.n	10914 <__aeabi_idiv+0x64>
   10910:	034b      	lsls	r3, r1, #13
   10912:	1ac0      	subs	r0, r0, r3
   10914:	4152      	adcs	r2, r2
   10916:	0b03      	lsrs	r3, r0, #12
   10918:	428b      	cmp	r3, r1
   1091a:	d301      	bcc.n	10920 <__aeabi_idiv+0x70>
   1091c:	030b      	lsls	r3, r1, #12
   1091e:	1ac0      	subs	r0, r0, r3
   10920:	4152      	adcs	r2, r2
   10922:	0ac3      	lsrs	r3, r0, #11
   10924:	428b      	cmp	r3, r1
   10926:	d301      	bcc.n	1092c <__aeabi_idiv+0x7c>
   10928:	02cb      	lsls	r3, r1, #11
   1092a:	1ac0      	subs	r0, r0, r3
   1092c:	4152      	adcs	r2, r2
   1092e:	0a83      	lsrs	r3, r0, #10
   10930:	428b      	cmp	r3, r1
   10932:	d301      	bcc.n	10938 <__aeabi_idiv+0x88>
   10934:	028b      	lsls	r3, r1, #10
   10936:	1ac0      	subs	r0, r0, r3
   10938:	4152      	adcs	r2, r2
   1093a:	0a43      	lsrs	r3, r0, #9
   1093c:	428b      	cmp	r3, r1
   1093e:	d301      	bcc.n	10944 <__aeabi_idiv+0x94>
   10940:	024b      	lsls	r3, r1, #9
   10942:	1ac0      	subs	r0, r0, r3
   10944:	4152      	adcs	r2, r2
   10946:	0a03      	lsrs	r3, r0, #8
   10948:	428b      	cmp	r3, r1
   1094a:	d301      	bcc.n	10950 <__aeabi_idiv+0xa0>
   1094c:	020b      	lsls	r3, r1, #8
   1094e:	1ac0      	subs	r0, r0, r3
   10950:	4152      	adcs	r2, r2
   10952:	d2cd      	bcs.n	108f0 <__aeabi_idiv+0x40>
   10954:	09c3      	lsrs	r3, r0, #7
   10956:	428b      	cmp	r3, r1
   10958:	d301      	bcc.n	1095e <__aeabi_idiv+0xae>
   1095a:	01cb      	lsls	r3, r1, #7
   1095c:	1ac0      	subs	r0, r0, r3
   1095e:	4152      	adcs	r2, r2
   10960:	0983      	lsrs	r3, r0, #6
   10962:	428b      	cmp	r3, r1
   10964:	d301      	bcc.n	1096a <__aeabi_idiv+0xba>
   10966:	018b      	lsls	r3, r1, #6
   10968:	1ac0      	subs	r0, r0, r3
   1096a:	4152      	adcs	r2, r2
   1096c:	0943      	lsrs	r3, r0, #5
   1096e:	428b      	cmp	r3, r1
   10970:	d301      	bcc.n	10976 <__aeabi_idiv+0xc6>
   10972:	014b      	lsls	r3, r1, #5
   10974:	1ac0      	subs	r0, r0, r3
   10976:	4152      	adcs	r2, r2
   10978:	0903      	lsrs	r3, r0, #4
   1097a:	428b      	cmp	r3, r1
   1097c:	d301      	bcc.n	10982 <__aeabi_idiv+0xd2>
   1097e:	010b      	lsls	r3, r1, #4
   10980:	1ac0      	subs	r0, r0, r3
   10982:	4152      	adcs	r2, r2
   10984:	08c3      	lsrs	r3, r0, #3
   10986:	428b      	cmp	r3, r1
   10988:	d301      	bcc.n	1098e <__aeabi_idiv+0xde>
   1098a:	00cb      	lsls	r3, r1, #3
   1098c:	1ac0      	subs	r0, r0, r3
   1098e:	4152      	adcs	r2, r2
   10990:	0883      	lsrs	r3, r0, #2
   10992:	428b      	cmp	r3, r1
   10994:	d301      	bcc.n	1099a <__aeabi_idiv+0xea>
   10996:	008b      	lsls	r3, r1, #2
   10998:	1ac0      	subs	r0, r0, r3
   1099a:	4152      	adcs	r2, r2
   1099c:	0843      	lsrs	r3, r0, #1
   1099e:	428b      	cmp	r3, r1
   109a0:	d301      	bcc.n	109a6 <__aeabi_idiv+0xf6>
   109a2:	004b      	lsls	r3, r1, #1
   109a4:	1ac0      	subs	r0, r0, r3
   109a6:	4152      	adcs	r2, r2
   109a8:	1a41      	subs	r1, r0, r1
   109aa:	d200      	bcs.n	109ae <__aeabi_idiv+0xfe>
   109ac:	4601      	mov	r1, r0
   109ae:	4152      	adcs	r2, r2
   109b0:	4610      	mov	r0, r2
   109b2:	4770      	bx	lr
   109b4:	e05d      	b.n	10a72 <__aeabi_idiv+0x1c2>
   109b6:	0fca      	lsrs	r2, r1, #31
   109b8:	d000      	beq.n	109bc <__aeabi_idiv+0x10c>
   109ba:	4249      	negs	r1, r1
   109bc:	1003      	asrs	r3, r0, #32
   109be:	d300      	bcc.n	109c2 <__aeabi_idiv+0x112>
   109c0:	4240      	negs	r0, r0
   109c2:	4053      	eors	r3, r2
   109c4:	2200      	movs	r2, #0
   109c6:	469c      	mov	ip, r3
   109c8:	0903      	lsrs	r3, r0, #4
   109ca:	428b      	cmp	r3, r1
   109cc:	d32d      	bcc.n	10a2a <__aeabi_idiv+0x17a>
   109ce:	0a03      	lsrs	r3, r0, #8
   109d0:	428b      	cmp	r3, r1
   109d2:	d312      	bcc.n	109fa <__aeabi_idiv+0x14a>
   109d4:	22fc      	movs	r2, #252	; 0xfc
   109d6:	0189      	lsls	r1, r1, #6
   109d8:	ba12      	rev	r2, r2
   109da:	0a03      	lsrs	r3, r0, #8
   109dc:	428b      	cmp	r3, r1
   109de:	d30c      	bcc.n	109fa <__aeabi_idiv+0x14a>
   109e0:	0189      	lsls	r1, r1, #6
   109e2:	1192      	asrs	r2, r2, #6
   109e4:	428b      	cmp	r3, r1
   109e6:	d308      	bcc.n	109fa <__aeabi_idiv+0x14a>
   109e8:	0189      	lsls	r1, r1, #6
   109ea:	1192      	asrs	r2, r2, #6
   109ec:	428b      	cmp	r3, r1
   109ee:	d304      	bcc.n	109fa <__aeabi_idiv+0x14a>
   109f0:	0189      	lsls	r1, r1, #6
   109f2:	d03a      	beq.n	10a6a <__aeabi_idiv+0x1ba>
   109f4:	1192      	asrs	r2, r2, #6
   109f6:	e000      	b.n	109fa <__aeabi_idiv+0x14a>
   109f8:	0989      	lsrs	r1, r1, #6
   109fa:	09c3      	lsrs	r3, r0, #7
   109fc:	428b      	cmp	r3, r1
   109fe:	d301      	bcc.n	10a04 <__aeabi_idiv+0x154>
   10a00:	01cb      	lsls	r3, r1, #7
   10a02:	1ac0      	subs	r0, r0, r3
   10a04:	4152      	adcs	r2, r2
   10a06:	0983      	lsrs	r3, r0, #6
   10a08:	428b      	cmp	r3, r1
   10a0a:	d301      	bcc.n	10a10 <__aeabi_idiv+0x160>
   10a0c:	018b      	lsls	r3, r1, #6
   10a0e:	1ac0      	subs	r0, r0, r3
   10a10:	4152      	adcs	r2, r2
   10a12:	0943      	lsrs	r3, r0, #5
   10a14:	428b      	cmp	r3, r1
   10a16:	d301      	bcc.n	10a1c <__aeabi_idiv+0x16c>
   10a18:	014b      	lsls	r3, r1, #5
   10a1a:	1ac0      	subs	r0, r0, r3
   10a1c:	4152      	adcs	r2, r2
   10a1e:	0903      	lsrs	r3, r0, #4
   10a20:	428b      	cmp	r3, r1
   10a22:	d301      	bcc.n	10a28 <__aeabi_idiv+0x178>
   10a24:	010b      	lsls	r3, r1, #4
   10a26:	1ac0      	subs	r0, r0, r3
   10a28:	4152      	adcs	r2, r2
   10a2a:	08c3      	lsrs	r3, r0, #3
   10a2c:	428b      	cmp	r3, r1
   10a2e:	d301      	bcc.n	10a34 <__aeabi_idiv+0x184>
   10a30:	00cb      	lsls	r3, r1, #3
   10a32:	1ac0      	subs	r0, r0, r3
   10a34:	4152      	adcs	r2, r2
   10a36:	0883      	lsrs	r3, r0, #2
   10a38:	428b      	cmp	r3, r1
   10a3a:	d301      	bcc.n	10a40 <__aeabi_idiv+0x190>
   10a3c:	008b      	lsls	r3, r1, #2
   10a3e:	1ac0      	subs	r0, r0, r3
   10a40:	4152      	adcs	r2, r2
   10a42:	d2d9      	bcs.n	109f8 <__aeabi_idiv+0x148>
   10a44:	0843      	lsrs	r3, r0, #1
   10a46:	428b      	cmp	r3, r1
   10a48:	d301      	bcc.n	10a4e <__aeabi_idiv+0x19e>
   10a4a:	004b      	lsls	r3, r1, #1
   10a4c:	1ac0      	subs	r0, r0, r3
   10a4e:	4152      	adcs	r2, r2
   10a50:	1a41      	subs	r1, r0, r1
   10a52:	d200      	bcs.n	10a56 <__aeabi_idiv+0x1a6>
   10a54:	4601      	mov	r1, r0
   10a56:	4663      	mov	r3, ip
   10a58:	4152      	adcs	r2, r2
   10a5a:	105b      	asrs	r3, r3, #1
   10a5c:	4610      	mov	r0, r2
   10a5e:	d301      	bcc.n	10a64 <__aeabi_idiv+0x1b4>
   10a60:	4240      	negs	r0, r0
   10a62:	2b00      	cmp	r3, #0
   10a64:	d500      	bpl.n	10a68 <__aeabi_idiv+0x1b8>
   10a66:	4249      	negs	r1, r1
   10a68:	4770      	bx	lr
   10a6a:	4663      	mov	r3, ip
   10a6c:	105b      	asrs	r3, r3, #1
   10a6e:	d300      	bcc.n	10a72 <__aeabi_idiv+0x1c2>
   10a70:	4240      	negs	r0, r0
   10a72:	b501      	push	{r0, lr}
   10a74:	2000      	movs	r0, #0
   10a76:	f000 f805 	bl	10a84 <__aeabi_idiv0>
   10a7a:	bd02      	pop	{r1, pc}

00010a7c <__aeabi_idivmod>:
   10a7c:	2900      	cmp	r1, #0
   10a7e:	d0f8      	beq.n	10a72 <__aeabi_idiv+0x1c2>
   10a80:	e716      	b.n	108b0 <__aeabi_idiv>
   10a82:	4770      	bx	lr

00010a84 <__aeabi_idiv0>:
   10a84:	4770      	bx	lr
   10a86:	46c0      	nop			; (mov r8, r8)

00010a88 <__aeabi_uldivmod>:
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d111      	bne.n	10ab0 <__aeabi_uldivmod+0x28>
   10a8c:	2a00      	cmp	r2, #0
   10a8e:	d10f      	bne.n	10ab0 <__aeabi_uldivmod+0x28>
   10a90:	2900      	cmp	r1, #0
   10a92:	d100      	bne.n	10a96 <__aeabi_uldivmod+0xe>
   10a94:	2800      	cmp	r0, #0
   10a96:	d002      	beq.n	10a9e <__aeabi_uldivmod+0x16>
   10a98:	2100      	movs	r1, #0
   10a9a:	43c9      	mvns	r1, r1
   10a9c:	1c08      	adds	r0, r1, #0
   10a9e:	b407      	push	{r0, r1, r2}
   10aa0:	4802      	ldr	r0, [pc, #8]	; (10aac <__aeabi_uldivmod+0x24>)
   10aa2:	a102      	add	r1, pc, #8	; (adr r1, 10aac <__aeabi_uldivmod+0x24>)
   10aa4:	1840      	adds	r0, r0, r1
   10aa6:	9002      	str	r0, [sp, #8]
   10aa8:	bd03      	pop	{r0, r1, pc}
   10aaa:	46c0      	nop			; (mov r8, r8)
   10aac:	ffffffd9 	.word	0xffffffd9
   10ab0:	b403      	push	{r0, r1}
   10ab2:	4668      	mov	r0, sp
   10ab4:	b501      	push	{r0, lr}
   10ab6:	9802      	ldr	r0, [sp, #8]
   10ab8:	f000 f832 	bl	10b20 <__udivmoddi4>
   10abc:	9b01      	ldr	r3, [sp, #4]
   10abe:	469e      	mov	lr, r3
   10ac0:	b002      	add	sp, #8
   10ac2:	bc0c      	pop	{r2, r3}
   10ac4:	4770      	bx	lr
   10ac6:	46c0      	nop			; (mov r8, r8)

00010ac8 <__aeabi_lmul>:
   10ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aca:	464f      	mov	r7, r9
   10acc:	4646      	mov	r6, r8
   10ace:	b4c0      	push	{r6, r7}
   10ad0:	0416      	lsls	r6, r2, #16
   10ad2:	0c36      	lsrs	r6, r6, #16
   10ad4:	4699      	mov	r9, r3
   10ad6:	0033      	movs	r3, r6
   10ad8:	0405      	lsls	r5, r0, #16
   10ada:	0c2c      	lsrs	r4, r5, #16
   10adc:	0c07      	lsrs	r7, r0, #16
   10ade:	0c15      	lsrs	r5, r2, #16
   10ae0:	4363      	muls	r3, r4
   10ae2:	437e      	muls	r6, r7
   10ae4:	436f      	muls	r7, r5
   10ae6:	4365      	muls	r5, r4
   10ae8:	0c1c      	lsrs	r4, r3, #16
   10aea:	19ad      	adds	r5, r5, r6
   10aec:	1964      	adds	r4, r4, r5
   10aee:	469c      	mov	ip, r3
   10af0:	42a6      	cmp	r6, r4
   10af2:	d903      	bls.n	10afc <__aeabi_lmul+0x34>
   10af4:	2380      	movs	r3, #128	; 0x80
   10af6:	025b      	lsls	r3, r3, #9
   10af8:	4698      	mov	r8, r3
   10afa:	4447      	add	r7, r8
   10afc:	4663      	mov	r3, ip
   10afe:	0c25      	lsrs	r5, r4, #16
   10b00:	19ef      	adds	r7, r5, r7
   10b02:	041d      	lsls	r5, r3, #16
   10b04:	464b      	mov	r3, r9
   10b06:	434a      	muls	r2, r1
   10b08:	4343      	muls	r3, r0
   10b0a:	0c2d      	lsrs	r5, r5, #16
   10b0c:	0424      	lsls	r4, r4, #16
   10b0e:	1964      	adds	r4, r4, r5
   10b10:	1899      	adds	r1, r3, r2
   10b12:	19c9      	adds	r1, r1, r7
   10b14:	0020      	movs	r0, r4
   10b16:	bc0c      	pop	{r2, r3}
   10b18:	4690      	mov	r8, r2
   10b1a:	4699      	mov	r9, r3
   10b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b1e:	46c0      	nop			; (mov r8, r8)

00010b20 <__udivmoddi4>:
   10b20:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b22:	464d      	mov	r5, r9
   10b24:	4656      	mov	r6, sl
   10b26:	4644      	mov	r4, r8
   10b28:	465f      	mov	r7, fp
   10b2a:	b4f0      	push	{r4, r5, r6, r7}
   10b2c:	4692      	mov	sl, r2
   10b2e:	b083      	sub	sp, #12
   10b30:	0004      	movs	r4, r0
   10b32:	000d      	movs	r5, r1
   10b34:	4699      	mov	r9, r3
   10b36:	428b      	cmp	r3, r1
   10b38:	d82f      	bhi.n	10b9a <__udivmoddi4+0x7a>
   10b3a:	d02c      	beq.n	10b96 <__udivmoddi4+0x76>
   10b3c:	4649      	mov	r1, r9
   10b3e:	4650      	mov	r0, sl
   10b40:	f000 f8cc 	bl	10cdc <__clzdi2>
   10b44:	0029      	movs	r1, r5
   10b46:	0006      	movs	r6, r0
   10b48:	0020      	movs	r0, r4
   10b4a:	f000 f8c7 	bl	10cdc <__clzdi2>
   10b4e:	1a33      	subs	r3, r6, r0
   10b50:	4698      	mov	r8, r3
   10b52:	3b20      	subs	r3, #32
   10b54:	469b      	mov	fp, r3
   10b56:	d500      	bpl.n	10b5a <__udivmoddi4+0x3a>
   10b58:	e074      	b.n	10c44 <__udivmoddi4+0x124>
   10b5a:	4653      	mov	r3, sl
   10b5c:	465a      	mov	r2, fp
   10b5e:	4093      	lsls	r3, r2
   10b60:	001f      	movs	r7, r3
   10b62:	4653      	mov	r3, sl
   10b64:	4642      	mov	r2, r8
   10b66:	4093      	lsls	r3, r2
   10b68:	001e      	movs	r6, r3
   10b6a:	42af      	cmp	r7, r5
   10b6c:	d829      	bhi.n	10bc2 <__udivmoddi4+0xa2>
   10b6e:	d026      	beq.n	10bbe <__udivmoddi4+0x9e>
   10b70:	465b      	mov	r3, fp
   10b72:	1ba4      	subs	r4, r4, r6
   10b74:	41bd      	sbcs	r5, r7
   10b76:	2b00      	cmp	r3, #0
   10b78:	da00      	bge.n	10b7c <__udivmoddi4+0x5c>
   10b7a:	e079      	b.n	10c70 <__udivmoddi4+0x150>
   10b7c:	2200      	movs	r2, #0
   10b7e:	2300      	movs	r3, #0
   10b80:	9200      	str	r2, [sp, #0]
   10b82:	9301      	str	r3, [sp, #4]
   10b84:	2301      	movs	r3, #1
   10b86:	465a      	mov	r2, fp
   10b88:	4093      	lsls	r3, r2
   10b8a:	9301      	str	r3, [sp, #4]
   10b8c:	2301      	movs	r3, #1
   10b8e:	4642      	mov	r2, r8
   10b90:	4093      	lsls	r3, r2
   10b92:	9300      	str	r3, [sp, #0]
   10b94:	e019      	b.n	10bca <__udivmoddi4+0xaa>
   10b96:	4282      	cmp	r2, r0
   10b98:	d9d0      	bls.n	10b3c <__udivmoddi4+0x1c>
   10b9a:	2200      	movs	r2, #0
   10b9c:	2300      	movs	r3, #0
   10b9e:	9200      	str	r2, [sp, #0]
   10ba0:	9301      	str	r3, [sp, #4]
   10ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ba4:	2b00      	cmp	r3, #0
   10ba6:	d001      	beq.n	10bac <__udivmoddi4+0x8c>
   10ba8:	601c      	str	r4, [r3, #0]
   10baa:	605d      	str	r5, [r3, #4]
   10bac:	9800      	ldr	r0, [sp, #0]
   10bae:	9901      	ldr	r1, [sp, #4]
   10bb0:	b003      	add	sp, #12
   10bb2:	bc3c      	pop	{r2, r3, r4, r5}
   10bb4:	4690      	mov	r8, r2
   10bb6:	4699      	mov	r9, r3
   10bb8:	46a2      	mov	sl, r4
   10bba:	46ab      	mov	fp, r5
   10bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10bbe:	42a3      	cmp	r3, r4
   10bc0:	d9d6      	bls.n	10b70 <__udivmoddi4+0x50>
   10bc2:	2200      	movs	r2, #0
   10bc4:	2300      	movs	r3, #0
   10bc6:	9200      	str	r2, [sp, #0]
   10bc8:	9301      	str	r3, [sp, #4]
   10bca:	4643      	mov	r3, r8
   10bcc:	2b00      	cmp	r3, #0
   10bce:	d0e8      	beq.n	10ba2 <__udivmoddi4+0x82>
   10bd0:	07fb      	lsls	r3, r7, #31
   10bd2:	0872      	lsrs	r2, r6, #1
   10bd4:	431a      	orrs	r2, r3
   10bd6:	4646      	mov	r6, r8
   10bd8:	087b      	lsrs	r3, r7, #1
   10bda:	e00e      	b.n	10bfa <__udivmoddi4+0xda>
   10bdc:	42ab      	cmp	r3, r5
   10bde:	d101      	bne.n	10be4 <__udivmoddi4+0xc4>
   10be0:	42a2      	cmp	r2, r4
   10be2:	d80c      	bhi.n	10bfe <__udivmoddi4+0xde>
   10be4:	1aa4      	subs	r4, r4, r2
   10be6:	419d      	sbcs	r5, r3
   10be8:	2001      	movs	r0, #1
   10bea:	1924      	adds	r4, r4, r4
   10bec:	416d      	adcs	r5, r5
   10bee:	2100      	movs	r1, #0
   10bf0:	3e01      	subs	r6, #1
   10bf2:	1824      	adds	r4, r4, r0
   10bf4:	414d      	adcs	r5, r1
   10bf6:	2e00      	cmp	r6, #0
   10bf8:	d006      	beq.n	10c08 <__udivmoddi4+0xe8>
   10bfa:	42ab      	cmp	r3, r5
   10bfc:	d9ee      	bls.n	10bdc <__udivmoddi4+0xbc>
   10bfe:	3e01      	subs	r6, #1
   10c00:	1924      	adds	r4, r4, r4
   10c02:	416d      	adcs	r5, r5
   10c04:	2e00      	cmp	r6, #0
   10c06:	d1f8      	bne.n	10bfa <__udivmoddi4+0xda>
   10c08:	465b      	mov	r3, fp
   10c0a:	9800      	ldr	r0, [sp, #0]
   10c0c:	9901      	ldr	r1, [sp, #4]
   10c0e:	1900      	adds	r0, r0, r4
   10c10:	4169      	adcs	r1, r5
   10c12:	2b00      	cmp	r3, #0
   10c14:	db22      	blt.n	10c5c <__udivmoddi4+0x13c>
   10c16:	002b      	movs	r3, r5
   10c18:	465a      	mov	r2, fp
   10c1a:	40d3      	lsrs	r3, r2
   10c1c:	002a      	movs	r2, r5
   10c1e:	4644      	mov	r4, r8
   10c20:	40e2      	lsrs	r2, r4
   10c22:	001c      	movs	r4, r3
   10c24:	465b      	mov	r3, fp
   10c26:	0015      	movs	r5, r2
   10c28:	2b00      	cmp	r3, #0
   10c2a:	db2c      	blt.n	10c86 <__udivmoddi4+0x166>
   10c2c:	0026      	movs	r6, r4
   10c2e:	409e      	lsls	r6, r3
   10c30:	0033      	movs	r3, r6
   10c32:	0026      	movs	r6, r4
   10c34:	4647      	mov	r7, r8
   10c36:	40be      	lsls	r6, r7
   10c38:	0032      	movs	r2, r6
   10c3a:	1a80      	subs	r0, r0, r2
   10c3c:	4199      	sbcs	r1, r3
   10c3e:	9000      	str	r0, [sp, #0]
   10c40:	9101      	str	r1, [sp, #4]
   10c42:	e7ae      	b.n	10ba2 <__udivmoddi4+0x82>
   10c44:	4642      	mov	r2, r8
   10c46:	2320      	movs	r3, #32
   10c48:	1a9b      	subs	r3, r3, r2
   10c4a:	4652      	mov	r2, sl
   10c4c:	40da      	lsrs	r2, r3
   10c4e:	4641      	mov	r1, r8
   10c50:	0013      	movs	r3, r2
   10c52:	464a      	mov	r2, r9
   10c54:	408a      	lsls	r2, r1
   10c56:	0017      	movs	r7, r2
   10c58:	431f      	orrs	r7, r3
   10c5a:	e782      	b.n	10b62 <__udivmoddi4+0x42>
   10c5c:	4642      	mov	r2, r8
   10c5e:	2320      	movs	r3, #32
   10c60:	1a9b      	subs	r3, r3, r2
   10c62:	002a      	movs	r2, r5
   10c64:	4646      	mov	r6, r8
   10c66:	409a      	lsls	r2, r3
   10c68:	0023      	movs	r3, r4
   10c6a:	40f3      	lsrs	r3, r6
   10c6c:	4313      	orrs	r3, r2
   10c6e:	e7d5      	b.n	10c1c <__udivmoddi4+0xfc>
   10c70:	4642      	mov	r2, r8
   10c72:	2320      	movs	r3, #32
   10c74:	2100      	movs	r1, #0
   10c76:	1a9b      	subs	r3, r3, r2
   10c78:	2200      	movs	r2, #0
   10c7a:	9100      	str	r1, [sp, #0]
   10c7c:	9201      	str	r2, [sp, #4]
   10c7e:	2201      	movs	r2, #1
   10c80:	40da      	lsrs	r2, r3
   10c82:	9201      	str	r2, [sp, #4]
   10c84:	e782      	b.n	10b8c <__udivmoddi4+0x6c>
   10c86:	4642      	mov	r2, r8
   10c88:	2320      	movs	r3, #32
   10c8a:	0026      	movs	r6, r4
   10c8c:	1a9b      	subs	r3, r3, r2
   10c8e:	40de      	lsrs	r6, r3
   10c90:	002f      	movs	r7, r5
   10c92:	46b4      	mov	ip, r6
   10c94:	4097      	lsls	r7, r2
   10c96:	4666      	mov	r6, ip
   10c98:	003b      	movs	r3, r7
   10c9a:	4333      	orrs	r3, r6
   10c9c:	e7c9      	b.n	10c32 <__udivmoddi4+0x112>
   10c9e:	46c0      	nop			; (mov r8, r8)

00010ca0 <__clzsi2>:
   10ca0:	211c      	movs	r1, #28
   10ca2:	2301      	movs	r3, #1
   10ca4:	041b      	lsls	r3, r3, #16
   10ca6:	4298      	cmp	r0, r3
   10ca8:	d301      	bcc.n	10cae <__clzsi2+0xe>
   10caa:	0c00      	lsrs	r0, r0, #16
   10cac:	3910      	subs	r1, #16
   10cae:	0a1b      	lsrs	r3, r3, #8
   10cb0:	4298      	cmp	r0, r3
   10cb2:	d301      	bcc.n	10cb8 <__clzsi2+0x18>
   10cb4:	0a00      	lsrs	r0, r0, #8
   10cb6:	3908      	subs	r1, #8
   10cb8:	091b      	lsrs	r3, r3, #4
   10cba:	4298      	cmp	r0, r3
   10cbc:	d301      	bcc.n	10cc2 <__clzsi2+0x22>
   10cbe:	0900      	lsrs	r0, r0, #4
   10cc0:	3904      	subs	r1, #4
   10cc2:	a202      	add	r2, pc, #8	; (adr r2, 10ccc <__clzsi2+0x2c>)
   10cc4:	5c10      	ldrb	r0, [r2, r0]
   10cc6:	1840      	adds	r0, r0, r1
   10cc8:	4770      	bx	lr
   10cca:	46c0      	nop			; (mov r8, r8)
   10ccc:	02020304 	.word	0x02020304
   10cd0:	01010101 	.word	0x01010101
	...

00010cdc <__clzdi2>:
   10cdc:	b510      	push	{r4, lr}
   10cde:	2900      	cmp	r1, #0
   10ce0:	d103      	bne.n	10cea <__clzdi2+0xe>
   10ce2:	f7ff ffdd 	bl	10ca0 <__clzsi2>
   10ce6:	3020      	adds	r0, #32
   10ce8:	e002      	b.n	10cf0 <__clzdi2+0x14>
   10cea:	1c08      	adds	r0, r1, #0
   10cec:	f7ff ffd8 	bl	10ca0 <__clzsi2>
   10cf0:	bd10      	pop	{r4, pc}
   10cf2:	46c0      	nop			; (mov r8, r8)

00010cf4 <__assert_func>:
   10cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cf6:	001d      	movs	r5, r3
   10cf8:	4b0a      	ldr	r3, [pc, #40]	; (10d24 <__assert_func+0x30>)
   10cfa:	0006      	movs	r6, r0
   10cfc:	681b      	ldr	r3, [r3, #0]
   10cfe:	68d8      	ldr	r0, [r3, #12]
   10d00:	2a00      	cmp	r2, #0
   10d02:	d102      	bne.n	10d0a <__assert_func+0x16>
   10d04:	4c08      	ldr	r4, [pc, #32]	; (10d28 <__assert_func+0x34>)
   10d06:	0023      	movs	r3, r4
   10d08:	e001      	b.n	10d0e <__assert_func+0x1a>
   10d0a:	0013      	movs	r3, r2
   10d0c:	4c07      	ldr	r4, [pc, #28]	; (10d2c <__assert_func+0x38>)
   10d0e:	9302      	str	r3, [sp, #8]
   10d10:	9100      	str	r1, [sp, #0]
   10d12:	0033      	movs	r3, r6
   10d14:	002a      	movs	r2, r5
   10d16:	4906      	ldr	r1, [pc, #24]	; (10d30 <__assert_func+0x3c>)
   10d18:	9401      	str	r4, [sp, #4]
   10d1a:	f000 f811 	bl	10d40 <fiprintf>
   10d1e:	f000 ff3d 	bl	11b9c <abort>
   10d22:	46c0      	nop			; (mov r8, r8)
   10d24:	20000098 	.word	0x20000098
   10d28:	00014112 	.word	0x00014112
   10d2c:	000140d7 	.word	0x000140d7
   10d30:	000140e4 	.word	0x000140e4

00010d34 <atoi>:
   10d34:	b510      	push	{r4, lr}
   10d36:	220a      	movs	r2, #10
   10d38:	2100      	movs	r1, #0
   10d3a:	f000 fe55 	bl	119e8 <strtol>
   10d3e:	bd10      	pop	{r4, pc}

00010d40 <fiprintf>:
   10d40:	b40e      	push	{r1, r2, r3}
   10d42:	b503      	push	{r0, r1, lr}
   10d44:	0001      	movs	r1, r0
   10d46:	ab03      	add	r3, sp, #12
   10d48:	4804      	ldr	r0, [pc, #16]	; (10d5c <fiprintf+0x1c>)
   10d4a:	cb04      	ldmia	r3!, {r2}
   10d4c:	6800      	ldr	r0, [r0, #0]
   10d4e:	9301      	str	r3, [sp, #4]
   10d50:	f000 f916 	bl	10f80 <_vfiprintf_r>
   10d54:	b002      	add	sp, #8
   10d56:	bc08      	pop	{r3}
   10d58:	b003      	add	sp, #12
   10d5a:	4718      	bx	r3
   10d5c:	20000098 	.word	0x20000098

00010d60 <__libc_init_array>:
   10d60:	4b0e      	ldr	r3, [pc, #56]	; (10d9c <__libc_init_array+0x3c>)
   10d62:	b570      	push	{r4, r5, r6, lr}
   10d64:	2500      	movs	r5, #0
   10d66:	001e      	movs	r6, r3
   10d68:	4c0d      	ldr	r4, [pc, #52]	; (10da0 <__libc_init_array+0x40>)
   10d6a:	1ae4      	subs	r4, r4, r3
   10d6c:	10a4      	asrs	r4, r4, #2
   10d6e:	42a5      	cmp	r5, r4
   10d70:	d004      	beq.n	10d7c <__libc_init_array+0x1c>
   10d72:	00ab      	lsls	r3, r5, #2
   10d74:	58f3      	ldr	r3, [r6, r3]
   10d76:	4798      	blx	r3
   10d78:	3501      	adds	r5, #1
   10d7a:	e7f8      	b.n	10d6e <__libc_init_array+0xe>
   10d7c:	f003 fa98 	bl	142b0 <_init>
   10d80:	4b08      	ldr	r3, [pc, #32]	; (10da4 <__libc_init_array+0x44>)
   10d82:	2500      	movs	r5, #0
   10d84:	001e      	movs	r6, r3
   10d86:	4c08      	ldr	r4, [pc, #32]	; (10da8 <__libc_init_array+0x48>)
   10d88:	1ae4      	subs	r4, r4, r3
   10d8a:	10a4      	asrs	r4, r4, #2
   10d8c:	42a5      	cmp	r5, r4
   10d8e:	d004      	beq.n	10d9a <__libc_init_array+0x3a>
   10d90:	00ab      	lsls	r3, r5, #2
   10d92:	58f3      	ldr	r3, [r6, r3]
   10d94:	4798      	blx	r3
   10d96:	3501      	adds	r5, #1
   10d98:	e7f8      	b.n	10d8c <__libc_init_array+0x2c>
   10d9a:	bd70      	pop	{r4, r5, r6, pc}
   10d9c:	000142bc 	.word	0x000142bc
   10da0:	000142bc 	.word	0x000142bc
   10da4:	000142bc 	.word	0x000142bc
   10da8:	000142c0 	.word	0x000142c0

00010dac <malloc>:
   10dac:	b510      	push	{r4, lr}
   10dae:	4b03      	ldr	r3, [pc, #12]	; (10dbc <malloc+0x10>)
   10db0:	0001      	movs	r1, r0
   10db2:	6818      	ldr	r0, [r3, #0]
   10db4:	f000 f866 	bl	10e84 <_malloc_r>
   10db8:	bd10      	pop	{r4, pc}
   10dba:	46c0      	nop			; (mov r8, r8)
   10dbc:	20000098 	.word	0x20000098

00010dc0 <free>:
   10dc0:	b510      	push	{r4, lr}
   10dc2:	4b03      	ldr	r3, [pc, #12]	; (10dd0 <free+0x10>)
   10dc4:	0001      	movs	r1, r0
   10dc6:	6818      	ldr	r0, [r3, #0]
   10dc8:	f000 f816 	bl	10df8 <_free_r>
   10dcc:	bd10      	pop	{r4, pc}
   10dce:	46c0      	nop			; (mov r8, r8)
   10dd0:	20000098 	.word	0x20000098

00010dd4 <memcpy>:
   10dd4:	2300      	movs	r3, #0
   10dd6:	b510      	push	{r4, lr}
   10dd8:	429a      	cmp	r2, r3
   10dda:	d003      	beq.n	10de4 <memcpy+0x10>
   10ddc:	5ccc      	ldrb	r4, [r1, r3]
   10dde:	54c4      	strb	r4, [r0, r3]
   10de0:	3301      	adds	r3, #1
   10de2:	e7f9      	b.n	10dd8 <memcpy+0x4>
   10de4:	bd10      	pop	{r4, pc}

00010de6 <memset>:
   10de6:	0003      	movs	r3, r0
   10de8:	1882      	adds	r2, r0, r2
   10dea:	4293      	cmp	r3, r2
   10dec:	d002      	beq.n	10df4 <memset+0xe>
   10dee:	7019      	strb	r1, [r3, #0]
   10df0:	3301      	adds	r3, #1
   10df2:	e7fa      	b.n	10dea <memset+0x4>
   10df4:	4770      	bx	lr
	...

00010df8 <_free_r>:
   10df8:	b530      	push	{r4, r5, lr}
   10dfa:	2900      	cmp	r1, #0
   10dfc:	d03e      	beq.n	10e7c <_free_r+0x84>
   10dfe:	3904      	subs	r1, #4
   10e00:	680b      	ldr	r3, [r1, #0]
   10e02:	2b00      	cmp	r3, #0
   10e04:	da00      	bge.n	10e08 <_free_r+0x10>
   10e06:	18c9      	adds	r1, r1, r3
   10e08:	4a1d      	ldr	r2, [pc, #116]	; (10e80 <_free_r+0x88>)
   10e0a:	6813      	ldr	r3, [r2, #0]
   10e0c:	0014      	movs	r4, r2
   10e0e:	2b00      	cmp	r3, #0
   10e10:	d102      	bne.n	10e18 <_free_r+0x20>
   10e12:	604b      	str	r3, [r1, #4]
   10e14:	6011      	str	r1, [r2, #0]
   10e16:	e031      	b.n	10e7c <_free_r+0x84>
   10e18:	428b      	cmp	r3, r1
   10e1a:	d90d      	bls.n	10e38 <_free_r+0x40>
   10e1c:	680a      	ldr	r2, [r1, #0]
   10e1e:	1888      	adds	r0, r1, r2
   10e20:	4283      	cmp	r3, r0
   10e22:	d103      	bne.n	10e2c <_free_r+0x34>
   10e24:	6818      	ldr	r0, [r3, #0]
   10e26:	685b      	ldr	r3, [r3, #4]
   10e28:	1882      	adds	r2, r0, r2
   10e2a:	600a      	str	r2, [r1, #0]
   10e2c:	604b      	str	r3, [r1, #4]
   10e2e:	6021      	str	r1, [r4, #0]
   10e30:	e024      	b.n	10e7c <_free_r+0x84>
   10e32:	428a      	cmp	r2, r1
   10e34:	d803      	bhi.n	10e3e <_free_r+0x46>
   10e36:	0013      	movs	r3, r2
   10e38:	685a      	ldr	r2, [r3, #4]
   10e3a:	2a00      	cmp	r2, #0
   10e3c:	d1f9      	bne.n	10e32 <_free_r+0x3a>
   10e3e:	681d      	ldr	r5, [r3, #0]
   10e40:	195c      	adds	r4, r3, r5
   10e42:	428c      	cmp	r4, r1
   10e44:	d10b      	bne.n	10e5e <_free_r+0x66>
   10e46:	6809      	ldr	r1, [r1, #0]
   10e48:	1869      	adds	r1, r5, r1
   10e4a:	1858      	adds	r0, r3, r1
   10e4c:	6019      	str	r1, [r3, #0]
   10e4e:	4282      	cmp	r2, r0
   10e50:	d114      	bne.n	10e7c <_free_r+0x84>
   10e52:	6810      	ldr	r0, [r2, #0]
   10e54:	6852      	ldr	r2, [r2, #4]
   10e56:	1841      	adds	r1, r0, r1
   10e58:	6019      	str	r1, [r3, #0]
   10e5a:	605a      	str	r2, [r3, #4]
   10e5c:	e00e      	b.n	10e7c <_free_r+0x84>
   10e5e:	428c      	cmp	r4, r1
   10e60:	d902      	bls.n	10e68 <_free_r+0x70>
   10e62:	230c      	movs	r3, #12
   10e64:	6003      	str	r3, [r0, #0]
   10e66:	e009      	b.n	10e7c <_free_r+0x84>
   10e68:	6808      	ldr	r0, [r1, #0]
   10e6a:	180c      	adds	r4, r1, r0
   10e6c:	42a2      	cmp	r2, r4
   10e6e:	d103      	bne.n	10e78 <_free_r+0x80>
   10e70:	6814      	ldr	r4, [r2, #0]
   10e72:	6852      	ldr	r2, [r2, #4]
   10e74:	1820      	adds	r0, r4, r0
   10e76:	6008      	str	r0, [r1, #0]
   10e78:	604a      	str	r2, [r1, #4]
   10e7a:	6059      	str	r1, [r3, #4]
   10e7c:	bd30      	pop	{r4, r5, pc}
   10e7e:	46c0      	nop			; (mov r8, r8)
   10e80:	200045a0 	.word	0x200045a0

00010e84 <_malloc_r>:
   10e84:	2303      	movs	r3, #3
   10e86:	b570      	push	{r4, r5, r6, lr}
   10e88:	1ccd      	adds	r5, r1, #3
   10e8a:	439d      	bics	r5, r3
   10e8c:	3508      	adds	r5, #8
   10e8e:	0006      	movs	r6, r0
   10e90:	2d0c      	cmp	r5, #12
   10e92:	d201      	bcs.n	10e98 <_malloc_r+0x14>
   10e94:	250c      	movs	r5, #12
   10e96:	e005      	b.n	10ea4 <_malloc_r+0x20>
   10e98:	2d00      	cmp	r5, #0
   10e9a:	da03      	bge.n	10ea4 <_malloc_r+0x20>
   10e9c:	230c      	movs	r3, #12
   10e9e:	2000      	movs	r0, #0
   10ea0:	6033      	str	r3, [r6, #0]
   10ea2:	e040      	b.n	10f26 <_malloc_r+0xa2>
   10ea4:	42a9      	cmp	r1, r5
   10ea6:	d8f9      	bhi.n	10e9c <_malloc_r+0x18>
   10ea8:	4b1f      	ldr	r3, [pc, #124]	; (10f28 <_malloc_r+0xa4>)
   10eaa:	681c      	ldr	r4, [r3, #0]
   10eac:	001a      	movs	r2, r3
   10eae:	0021      	movs	r1, r4
   10eb0:	2900      	cmp	r1, #0
   10eb2:	d013      	beq.n	10edc <_malloc_r+0x58>
   10eb4:	680b      	ldr	r3, [r1, #0]
   10eb6:	1b5b      	subs	r3, r3, r5
   10eb8:	d40d      	bmi.n	10ed6 <_malloc_r+0x52>
   10eba:	2b0b      	cmp	r3, #11
   10ebc:	d902      	bls.n	10ec4 <_malloc_r+0x40>
   10ebe:	600b      	str	r3, [r1, #0]
   10ec0:	18cc      	adds	r4, r1, r3
   10ec2:	e01e      	b.n	10f02 <_malloc_r+0x7e>
   10ec4:	428c      	cmp	r4, r1
   10ec6:	d102      	bne.n	10ece <_malloc_r+0x4a>
   10ec8:	6863      	ldr	r3, [r4, #4]
   10eca:	6013      	str	r3, [r2, #0]
   10ecc:	e01a      	b.n	10f04 <_malloc_r+0x80>
   10ece:	684b      	ldr	r3, [r1, #4]
   10ed0:	6063      	str	r3, [r4, #4]
   10ed2:	000c      	movs	r4, r1
   10ed4:	e016      	b.n	10f04 <_malloc_r+0x80>
   10ed6:	000c      	movs	r4, r1
   10ed8:	6849      	ldr	r1, [r1, #4]
   10eda:	e7e9      	b.n	10eb0 <_malloc_r+0x2c>
   10edc:	4c13      	ldr	r4, [pc, #76]	; (10f2c <_malloc_r+0xa8>)
   10ede:	6823      	ldr	r3, [r4, #0]
   10ee0:	2b00      	cmp	r3, #0
   10ee2:	d103      	bne.n	10eec <_malloc_r+0x68>
   10ee4:	0030      	movs	r0, r6
   10ee6:	f000 fb91 	bl	1160c <_sbrk_r>
   10eea:	6020      	str	r0, [r4, #0]
   10eec:	0029      	movs	r1, r5
   10eee:	0030      	movs	r0, r6
   10ef0:	f000 fb8c 	bl	1160c <_sbrk_r>
   10ef4:	1c43      	adds	r3, r0, #1
   10ef6:	d0d1      	beq.n	10e9c <_malloc_r+0x18>
   10ef8:	2303      	movs	r3, #3
   10efa:	1cc4      	adds	r4, r0, #3
   10efc:	439c      	bics	r4, r3
   10efe:	42a0      	cmp	r0, r4
   10f00:	d10a      	bne.n	10f18 <_malloc_r+0x94>
   10f02:	6025      	str	r5, [r4, #0]
   10f04:	0020      	movs	r0, r4
   10f06:	2207      	movs	r2, #7
   10f08:	300b      	adds	r0, #11
   10f0a:	1d23      	adds	r3, r4, #4
   10f0c:	4390      	bics	r0, r2
   10f0e:	1ac3      	subs	r3, r0, r3
   10f10:	d009      	beq.n	10f26 <_malloc_r+0xa2>
   10f12:	425a      	negs	r2, r3
   10f14:	50e2      	str	r2, [r4, r3]
   10f16:	e006      	b.n	10f26 <_malloc_r+0xa2>
   10f18:	1a21      	subs	r1, r4, r0
   10f1a:	0030      	movs	r0, r6
   10f1c:	f000 fb76 	bl	1160c <_sbrk_r>
   10f20:	1c43      	adds	r3, r0, #1
   10f22:	d1ee      	bne.n	10f02 <_malloc_r+0x7e>
   10f24:	e7ba      	b.n	10e9c <_malloc_r+0x18>
   10f26:	bd70      	pop	{r4, r5, r6, pc}
   10f28:	200045a0 	.word	0x200045a0
   10f2c:	2000459c 	.word	0x2000459c

00010f30 <__sfputc_r>:
   10f30:	6893      	ldr	r3, [r2, #8]
   10f32:	b510      	push	{r4, lr}
   10f34:	3b01      	subs	r3, #1
   10f36:	6093      	str	r3, [r2, #8]
   10f38:	2b00      	cmp	r3, #0
   10f3a:	da05      	bge.n	10f48 <__sfputc_r+0x18>
   10f3c:	6994      	ldr	r4, [r2, #24]
   10f3e:	42a3      	cmp	r3, r4
   10f40:	db08      	blt.n	10f54 <__sfputc_r+0x24>
   10f42:	b2cb      	uxtb	r3, r1
   10f44:	2b0a      	cmp	r3, #10
   10f46:	d005      	beq.n	10f54 <__sfputc_r+0x24>
   10f48:	6813      	ldr	r3, [r2, #0]
   10f4a:	1c58      	adds	r0, r3, #1
   10f4c:	6010      	str	r0, [r2, #0]
   10f4e:	7019      	strb	r1, [r3, #0]
   10f50:	b2c8      	uxtb	r0, r1
   10f52:	e001      	b.n	10f58 <__sfputc_r+0x28>
   10f54:	f000 fd54 	bl	11a00 <__swbuf_r>
   10f58:	bd10      	pop	{r4, pc}

00010f5a <__sfputs_r>:
   10f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f5c:	0006      	movs	r6, r0
   10f5e:	000f      	movs	r7, r1
   10f60:	0014      	movs	r4, r2
   10f62:	18d5      	adds	r5, r2, r3
   10f64:	42ac      	cmp	r4, r5
   10f66:	d008      	beq.n	10f7a <__sfputs_r+0x20>
   10f68:	7821      	ldrb	r1, [r4, #0]
   10f6a:	003a      	movs	r2, r7
   10f6c:	0030      	movs	r0, r6
   10f6e:	f7ff ffdf 	bl	10f30 <__sfputc_r>
   10f72:	3401      	adds	r4, #1
   10f74:	1c43      	adds	r3, r0, #1
   10f76:	d1f5      	bne.n	10f64 <__sfputs_r+0xa>
   10f78:	e000      	b.n	10f7c <__sfputs_r+0x22>
   10f7a:	2000      	movs	r0, #0
   10f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00010f80 <_vfiprintf_r>:
   10f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f82:	b09f      	sub	sp, #124	; 0x7c
   10f84:	0006      	movs	r6, r0
   10f86:	000f      	movs	r7, r1
   10f88:	9202      	str	r2, [sp, #8]
   10f8a:	9305      	str	r3, [sp, #20]
   10f8c:	2800      	cmp	r0, #0
   10f8e:	d004      	beq.n	10f9a <_vfiprintf_r+0x1a>
   10f90:	6983      	ldr	r3, [r0, #24]
   10f92:	2b00      	cmp	r3, #0
   10f94:	d101      	bne.n	10f9a <_vfiprintf_r+0x1a>
   10f96:	f000 fefd 	bl	11d94 <__sinit>
   10f9a:	4b7f      	ldr	r3, [pc, #508]	; (11198 <_vfiprintf_r+0x218>)
   10f9c:	429f      	cmp	r7, r3
   10f9e:	d101      	bne.n	10fa4 <_vfiprintf_r+0x24>
   10fa0:	6877      	ldr	r7, [r6, #4]
   10fa2:	e008      	b.n	10fb6 <_vfiprintf_r+0x36>
   10fa4:	4b7d      	ldr	r3, [pc, #500]	; (1119c <_vfiprintf_r+0x21c>)
   10fa6:	429f      	cmp	r7, r3
   10fa8:	d101      	bne.n	10fae <_vfiprintf_r+0x2e>
   10faa:	68b7      	ldr	r7, [r6, #8]
   10fac:	e003      	b.n	10fb6 <_vfiprintf_r+0x36>
   10fae:	4b7c      	ldr	r3, [pc, #496]	; (111a0 <_vfiprintf_r+0x220>)
   10fb0:	429f      	cmp	r7, r3
   10fb2:	d100      	bne.n	10fb6 <_vfiprintf_r+0x36>
   10fb4:	68f7      	ldr	r7, [r6, #12]
   10fb6:	89bb      	ldrh	r3, [r7, #12]
   10fb8:	071b      	lsls	r3, r3, #28
   10fba:	d50a      	bpl.n	10fd2 <_vfiprintf_r+0x52>
   10fbc:	693b      	ldr	r3, [r7, #16]
   10fbe:	2b00      	cmp	r3, #0
   10fc0:	d007      	beq.n	10fd2 <_vfiprintf_r+0x52>
   10fc2:	2300      	movs	r3, #0
   10fc4:	ad06      	add	r5, sp, #24
   10fc6:	616b      	str	r3, [r5, #20]
   10fc8:	3320      	adds	r3, #32
   10fca:	766b      	strb	r3, [r5, #25]
   10fcc:	3310      	adds	r3, #16
   10fce:	76ab      	strb	r3, [r5, #26]
   10fd0:	e03d      	b.n	1104e <_vfiprintf_r+0xce>
   10fd2:	0039      	movs	r1, r7
   10fd4:	0030      	movs	r0, r6
   10fd6:	f000 fd6b 	bl	11ab0 <__swsetup_r>
   10fda:	2800      	cmp	r0, #0
   10fdc:	d0f1      	beq.n	10fc2 <_vfiprintf_r+0x42>
   10fde:	2001      	movs	r0, #1
   10fe0:	4240      	negs	r0, r0
   10fe2:	e0d6      	b.n	11192 <_vfiprintf_r+0x212>
   10fe4:	9a05      	ldr	r2, [sp, #20]
   10fe6:	1d11      	adds	r1, r2, #4
   10fe8:	6812      	ldr	r2, [r2, #0]
   10fea:	9105      	str	r1, [sp, #20]
   10fec:	2a00      	cmp	r2, #0
   10fee:	da00      	bge.n	10ff2 <_vfiprintf_r+0x72>
   10ff0:	e07f      	b.n	110f2 <_vfiprintf_r+0x172>
   10ff2:	9209      	str	r2, [sp, #36]	; 0x24
   10ff4:	3401      	adds	r4, #1
   10ff6:	7823      	ldrb	r3, [r4, #0]
   10ff8:	2b2e      	cmp	r3, #46	; 0x2e
   10ffa:	d100      	bne.n	10ffe <_vfiprintf_r+0x7e>
   10ffc:	e08d      	b.n	1111a <_vfiprintf_r+0x19a>
   10ffe:	7821      	ldrb	r1, [r4, #0]
   11000:	2203      	movs	r2, #3
   11002:	4868      	ldr	r0, [pc, #416]	; (111a4 <_vfiprintf_r+0x224>)
   11004:	f000 ffbe 	bl	11f84 <memchr>
   11008:	2800      	cmp	r0, #0
   1100a:	d007      	beq.n	1101c <_vfiprintf_r+0x9c>
   1100c:	4b65      	ldr	r3, [pc, #404]	; (111a4 <_vfiprintf_r+0x224>)
   1100e:	682a      	ldr	r2, [r5, #0]
   11010:	1ac0      	subs	r0, r0, r3
   11012:	2340      	movs	r3, #64	; 0x40
   11014:	4083      	lsls	r3, r0
   11016:	4313      	orrs	r3, r2
   11018:	602b      	str	r3, [r5, #0]
   1101a:	3401      	adds	r4, #1
   1101c:	7821      	ldrb	r1, [r4, #0]
   1101e:	1c63      	adds	r3, r4, #1
   11020:	2206      	movs	r2, #6
   11022:	4861      	ldr	r0, [pc, #388]	; (111a8 <_vfiprintf_r+0x228>)
   11024:	9302      	str	r3, [sp, #8]
   11026:	7629      	strb	r1, [r5, #24]
   11028:	f000 ffac 	bl	11f84 <memchr>
   1102c:	2800      	cmp	r0, #0
   1102e:	d100      	bne.n	11032 <_vfiprintf_r+0xb2>
   11030:	e09d      	b.n	1116e <_vfiprintf_r+0x1ee>
   11032:	4b5e      	ldr	r3, [pc, #376]	; (111ac <_vfiprintf_r+0x22c>)
   11034:	2b00      	cmp	r3, #0
   11036:	d000      	beq.n	1103a <_vfiprintf_r+0xba>
   11038:	e090      	b.n	1115c <_vfiprintf_r+0x1dc>
   1103a:	2207      	movs	r2, #7
   1103c:	9b05      	ldr	r3, [sp, #20]
   1103e:	3307      	adds	r3, #7
   11040:	4393      	bics	r3, r2
   11042:	3308      	adds	r3, #8
   11044:	9305      	str	r3, [sp, #20]
   11046:	696b      	ldr	r3, [r5, #20]
   11048:	9a03      	ldr	r2, [sp, #12]
   1104a:	189b      	adds	r3, r3, r2
   1104c:	616b      	str	r3, [r5, #20]
   1104e:	9c02      	ldr	r4, [sp, #8]
   11050:	7823      	ldrb	r3, [r4, #0]
   11052:	2b00      	cmp	r3, #0
   11054:	d104      	bne.n	11060 <_vfiprintf_r+0xe0>
   11056:	9b02      	ldr	r3, [sp, #8]
   11058:	1ae3      	subs	r3, r4, r3
   1105a:	9304      	str	r3, [sp, #16]
   1105c:	d012      	beq.n	11084 <_vfiprintf_r+0x104>
   1105e:	e003      	b.n	11068 <_vfiprintf_r+0xe8>
   11060:	2b25      	cmp	r3, #37	; 0x25
   11062:	d0f8      	beq.n	11056 <_vfiprintf_r+0xd6>
   11064:	3401      	adds	r4, #1
   11066:	e7f3      	b.n	11050 <_vfiprintf_r+0xd0>
   11068:	9b04      	ldr	r3, [sp, #16]
   1106a:	9a02      	ldr	r2, [sp, #8]
   1106c:	0039      	movs	r1, r7
   1106e:	0030      	movs	r0, r6
   11070:	f7ff ff73 	bl	10f5a <__sfputs_r>
   11074:	1c43      	adds	r3, r0, #1
   11076:	d100      	bne.n	1107a <_vfiprintf_r+0xfa>
   11078:	e086      	b.n	11188 <_vfiprintf_r+0x208>
   1107a:	696a      	ldr	r2, [r5, #20]
   1107c:	9b04      	ldr	r3, [sp, #16]
   1107e:	4694      	mov	ip, r2
   11080:	4463      	add	r3, ip
   11082:	616b      	str	r3, [r5, #20]
   11084:	7823      	ldrb	r3, [r4, #0]
   11086:	2b00      	cmp	r3, #0
   11088:	d07e      	beq.n	11188 <_vfiprintf_r+0x208>
   1108a:	2201      	movs	r2, #1
   1108c:	2300      	movs	r3, #0
   1108e:	4252      	negs	r2, r2
   11090:	606a      	str	r2, [r5, #4]
   11092:	a902      	add	r1, sp, #8
   11094:	3254      	adds	r2, #84	; 0x54
   11096:	1852      	adds	r2, r2, r1
   11098:	3401      	adds	r4, #1
   1109a:	602b      	str	r3, [r5, #0]
   1109c:	60eb      	str	r3, [r5, #12]
   1109e:	60ab      	str	r3, [r5, #8]
   110a0:	7013      	strb	r3, [r2, #0]
   110a2:	65ab      	str	r3, [r5, #88]	; 0x58
   110a4:	7821      	ldrb	r1, [r4, #0]
   110a6:	2205      	movs	r2, #5
   110a8:	4841      	ldr	r0, [pc, #260]	; (111b0 <_vfiprintf_r+0x230>)
   110aa:	f000 ff6b 	bl	11f84 <memchr>
   110ae:	2800      	cmp	r0, #0
   110b0:	d008      	beq.n	110c4 <_vfiprintf_r+0x144>
   110b2:	4b3f      	ldr	r3, [pc, #252]	; (111b0 <_vfiprintf_r+0x230>)
   110b4:	682a      	ldr	r2, [r5, #0]
   110b6:	1ac0      	subs	r0, r0, r3
   110b8:	2301      	movs	r3, #1
   110ba:	4083      	lsls	r3, r0
   110bc:	4313      	orrs	r3, r2
   110be:	602b      	str	r3, [r5, #0]
   110c0:	3401      	adds	r4, #1
   110c2:	e7ef      	b.n	110a4 <_vfiprintf_r+0x124>
   110c4:	682b      	ldr	r3, [r5, #0]
   110c6:	06da      	lsls	r2, r3, #27
   110c8:	d504      	bpl.n	110d4 <_vfiprintf_r+0x154>
   110ca:	2253      	movs	r2, #83	; 0x53
   110cc:	2120      	movs	r1, #32
   110ce:	a802      	add	r0, sp, #8
   110d0:	1812      	adds	r2, r2, r0
   110d2:	7011      	strb	r1, [r2, #0]
   110d4:	071a      	lsls	r2, r3, #28
   110d6:	d504      	bpl.n	110e2 <_vfiprintf_r+0x162>
   110d8:	2253      	movs	r2, #83	; 0x53
   110da:	212b      	movs	r1, #43	; 0x2b
   110dc:	a802      	add	r0, sp, #8
   110de:	1812      	adds	r2, r2, r0
   110e0:	7011      	strb	r1, [r2, #0]
   110e2:	7822      	ldrb	r2, [r4, #0]
   110e4:	2a2a      	cmp	r2, #42	; 0x2a
   110e6:	d100      	bne.n	110ea <_vfiprintf_r+0x16a>
   110e8:	e77c      	b.n	10fe4 <_vfiprintf_r+0x64>
   110ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110ec:	2000      	movs	r0, #0
   110ee:	210a      	movs	r1, #10
   110f0:	e005      	b.n	110fe <_vfiprintf_r+0x17e>
   110f2:	4252      	negs	r2, r2
   110f4:	60ea      	str	r2, [r5, #12]
   110f6:	2202      	movs	r2, #2
   110f8:	4313      	orrs	r3, r2
   110fa:	602b      	str	r3, [r5, #0]
   110fc:	e77a      	b.n	10ff4 <_vfiprintf_r+0x74>
   110fe:	7822      	ldrb	r2, [r4, #0]
   11100:	3a30      	subs	r2, #48	; 0x30
   11102:	2a09      	cmp	r2, #9
   11104:	d804      	bhi.n	11110 <_vfiprintf_r+0x190>
   11106:	434b      	muls	r3, r1
   11108:	3401      	adds	r4, #1
   1110a:	189b      	adds	r3, r3, r2
   1110c:	2001      	movs	r0, #1
   1110e:	e7f6      	b.n	110fe <_vfiprintf_r+0x17e>
   11110:	2800      	cmp	r0, #0
   11112:	d100      	bne.n	11116 <_vfiprintf_r+0x196>
   11114:	e76f      	b.n	10ff6 <_vfiprintf_r+0x76>
   11116:	9309      	str	r3, [sp, #36]	; 0x24
   11118:	e76d      	b.n	10ff6 <_vfiprintf_r+0x76>
   1111a:	7863      	ldrb	r3, [r4, #1]
   1111c:	2b2a      	cmp	r3, #42	; 0x2a
   1111e:	d10a      	bne.n	11136 <_vfiprintf_r+0x1b6>
   11120:	9b05      	ldr	r3, [sp, #20]
   11122:	3402      	adds	r4, #2
   11124:	1d1a      	adds	r2, r3, #4
   11126:	681b      	ldr	r3, [r3, #0]
   11128:	9205      	str	r2, [sp, #20]
   1112a:	2b00      	cmp	r3, #0
   1112c:	da01      	bge.n	11132 <_vfiprintf_r+0x1b2>
   1112e:	2301      	movs	r3, #1
   11130:	425b      	negs	r3, r3
   11132:	9307      	str	r3, [sp, #28]
   11134:	e763      	b.n	10ffe <_vfiprintf_r+0x7e>
   11136:	2300      	movs	r3, #0
   11138:	200a      	movs	r0, #10
   1113a:	001a      	movs	r2, r3
   1113c:	3401      	adds	r4, #1
   1113e:	606b      	str	r3, [r5, #4]
   11140:	7821      	ldrb	r1, [r4, #0]
   11142:	3930      	subs	r1, #48	; 0x30
   11144:	2909      	cmp	r1, #9
   11146:	d804      	bhi.n	11152 <_vfiprintf_r+0x1d2>
   11148:	4342      	muls	r2, r0
   1114a:	3401      	adds	r4, #1
   1114c:	1852      	adds	r2, r2, r1
   1114e:	2301      	movs	r3, #1
   11150:	e7f6      	b.n	11140 <_vfiprintf_r+0x1c0>
   11152:	2b00      	cmp	r3, #0
   11154:	d100      	bne.n	11158 <_vfiprintf_r+0x1d8>
   11156:	e752      	b.n	10ffe <_vfiprintf_r+0x7e>
   11158:	9207      	str	r2, [sp, #28]
   1115a:	e750      	b.n	10ffe <_vfiprintf_r+0x7e>
   1115c:	ab05      	add	r3, sp, #20
   1115e:	9300      	str	r3, [sp, #0]
   11160:	003a      	movs	r2, r7
   11162:	4b14      	ldr	r3, [pc, #80]	; (111b4 <_vfiprintf_r+0x234>)
   11164:	0029      	movs	r1, r5
   11166:	0030      	movs	r0, r6
   11168:	e000      	b.n	1116c <_vfiprintf_r+0x1ec>
   1116a:	bf00      	nop
   1116c:	e007      	b.n	1117e <_vfiprintf_r+0x1fe>
   1116e:	ab05      	add	r3, sp, #20
   11170:	9300      	str	r3, [sp, #0]
   11172:	003a      	movs	r2, r7
   11174:	4b0f      	ldr	r3, [pc, #60]	; (111b4 <_vfiprintf_r+0x234>)
   11176:	0029      	movs	r1, r5
   11178:	0030      	movs	r0, r6
   1117a:	f000 f88b 	bl	11294 <_printf_i>
   1117e:	9003      	str	r0, [sp, #12]
   11180:	9b03      	ldr	r3, [sp, #12]
   11182:	3301      	adds	r3, #1
   11184:	d000      	beq.n	11188 <_vfiprintf_r+0x208>
   11186:	e75e      	b.n	11046 <_vfiprintf_r+0xc6>
   11188:	89bb      	ldrh	r3, [r7, #12]
   1118a:	065b      	lsls	r3, r3, #25
   1118c:	d500      	bpl.n	11190 <_vfiprintf_r+0x210>
   1118e:	e726      	b.n	10fde <_vfiprintf_r+0x5e>
   11190:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11192:	b01f      	add	sp, #124	; 0x7c
   11194:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11196:	46c0      	nop			; (mov r8, r8)
   11198:	00014250 	.word	0x00014250
   1119c:	00014270 	.word	0x00014270
   111a0:	00014290 	.word	0x00014290
   111a4:	00014122 	.word	0x00014122
   111a8:	00014126 	.word	0x00014126
   111ac:	00000000 	.word	0x00000000
   111b0:	0001411c 	.word	0x0001411c
   111b4:	00010f5b 	.word	0x00010f5b

000111b8 <_printf_common>:
   111b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   111ba:	0017      	movs	r7, r2
   111bc:	9301      	str	r3, [sp, #4]
   111be:	688a      	ldr	r2, [r1, #8]
   111c0:	690b      	ldr	r3, [r1, #16]
   111c2:	9000      	str	r0, [sp, #0]
   111c4:	000c      	movs	r4, r1
   111c6:	4293      	cmp	r3, r2
   111c8:	da00      	bge.n	111cc <_printf_common+0x14>
   111ca:	0013      	movs	r3, r2
   111cc:	0022      	movs	r2, r4
   111ce:	603b      	str	r3, [r7, #0]
   111d0:	3243      	adds	r2, #67	; 0x43
   111d2:	7812      	ldrb	r2, [r2, #0]
   111d4:	2a00      	cmp	r2, #0
   111d6:	d001      	beq.n	111dc <_printf_common+0x24>
   111d8:	3301      	adds	r3, #1
   111da:	603b      	str	r3, [r7, #0]
   111dc:	6823      	ldr	r3, [r4, #0]
   111de:	069b      	lsls	r3, r3, #26
   111e0:	d502      	bpl.n	111e8 <_printf_common+0x30>
   111e2:	683b      	ldr	r3, [r7, #0]
   111e4:	3302      	adds	r3, #2
   111e6:	603b      	str	r3, [r7, #0]
   111e8:	2506      	movs	r5, #6
   111ea:	6823      	ldr	r3, [r4, #0]
   111ec:	401d      	ands	r5, r3
   111ee:	d01e      	beq.n	1122e <_printf_common+0x76>
   111f0:	0023      	movs	r3, r4
   111f2:	3343      	adds	r3, #67	; 0x43
   111f4:	781b      	ldrb	r3, [r3, #0]
   111f6:	1e5a      	subs	r2, r3, #1
   111f8:	4193      	sbcs	r3, r2
   111fa:	6822      	ldr	r2, [r4, #0]
   111fc:	0692      	lsls	r2, r2, #26
   111fe:	d51c      	bpl.n	1123a <_printf_common+0x82>
   11200:	2030      	movs	r0, #48	; 0x30
   11202:	18e1      	adds	r1, r4, r3
   11204:	3143      	adds	r1, #67	; 0x43
   11206:	7008      	strb	r0, [r1, #0]
   11208:	0021      	movs	r1, r4
   1120a:	1c5a      	adds	r2, r3, #1
   1120c:	3145      	adds	r1, #69	; 0x45
   1120e:	7809      	ldrb	r1, [r1, #0]
   11210:	18a2      	adds	r2, r4, r2
   11212:	3243      	adds	r2, #67	; 0x43
   11214:	3302      	adds	r3, #2
   11216:	7011      	strb	r1, [r2, #0]
   11218:	e00f      	b.n	1123a <_printf_common+0x82>
   1121a:	0022      	movs	r2, r4
   1121c:	2301      	movs	r3, #1
   1121e:	3219      	adds	r2, #25
   11220:	9901      	ldr	r1, [sp, #4]
   11222:	9800      	ldr	r0, [sp, #0]
   11224:	9e08      	ldr	r6, [sp, #32]
   11226:	47b0      	blx	r6
   11228:	1c43      	adds	r3, r0, #1
   1122a:	d00e      	beq.n	1124a <_printf_common+0x92>
   1122c:	3501      	adds	r5, #1
   1122e:	68e3      	ldr	r3, [r4, #12]
   11230:	683a      	ldr	r2, [r7, #0]
   11232:	1a9b      	subs	r3, r3, r2
   11234:	429d      	cmp	r5, r3
   11236:	dbf0      	blt.n	1121a <_printf_common+0x62>
   11238:	e7da      	b.n	111f0 <_printf_common+0x38>
   1123a:	0022      	movs	r2, r4
   1123c:	9901      	ldr	r1, [sp, #4]
   1123e:	3243      	adds	r2, #67	; 0x43
   11240:	9800      	ldr	r0, [sp, #0]
   11242:	9d08      	ldr	r5, [sp, #32]
   11244:	47a8      	blx	r5
   11246:	1c43      	adds	r3, r0, #1
   11248:	d102      	bne.n	11250 <_printf_common+0x98>
   1124a:	2001      	movs	r0, #1
   1124c:	4240      	negs	r0, r0
   1124e:	e020      	b.n	11292 <_printf_common+0xda>
   11250:	2306      	movs	r3, #6
   11252:	6820      	ldr	r0, [r4, #0]
   11254:	68e1      	ldr	r1, [r4, #12]
   11256:	683a      	ldr	r2, [r7, #0]
   11258:	4003      	ands	r3, r0
   1125a:	2500      	movs	r5, #0
   1125c:	2b04      	cmp	r3, #4
   1125e:	d103      	bne.n	11268 <_printf_common+0xb0>
   11260:	1a8d      	subs	r5, r1, r2
   11262:	43eb      	mvns	r3, r5
   11264:	17db      	asrs	r3, r3, #31
   11266:	401d      	ands	r5, r3
   11268:	68a3      	ldr	r3, [r4, #8]
   1126a:	6922      	ldr	r2, [r4, #16]
   1126c:	4293      	cmp	r3, r2
   1126e:	dd01      	ble.n	11274 <_printf_common+0xbc>
   11270:	1a9b      	subs	r3, r3, r2
   11272:	18ed      	adds	r5, r5, r3
   11274:	2700      	movs	r7, #0
   11276:	42bd      	cmp	r5, r7
   11278:	d00a      	beq.n	11290 <_printf_common+0xd8>
   1127a:	0022      	movs	r2, r4
   1127c:	2301      	movs	r3, #1
   1127e:	321a      	adds	r2, #26
   11280:	9901      	ldr	r1, [sp, #4]
   11282:	9800      	ldr	r0, [sp, #0]
   11284:	9e08      	ldr	r6, [sp, #32]
   11286:	47b0      	blx	r6
   11288:	1c43      	adds	r3, r0, #1
   1128a:	d0de      	beq.n	1124a <_printf_common+0x92>
   1128c:	3701      	adds	r7, #1
   1128e:	e7f2      	b.n	11276 <_printf_common+0xbe>
   11290:	2000      	movs	r0, #0
   11292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00011294 <_printf_i>:
   11294:	b5f0      	push	{r4, r5, r6, r7, lr}
   11296:	b08b      	sub	sp, #44	; 0x2c
   11298:	9206      	str	r2, [sp, #24]
   1129a:	000a      	movs	r2, r1
   1129c:	3243      	adds	r2, #67	; 0x43
   1129e:	9307      	str	r3, [sp, #28]
   112a0:	9005      	str	r0, [sp, #20]
   112a2:	9204      	str	r2, [sp, #16]
   112a4:	7e0a      	ldrb	r2, [r1, #24]
   112a6:	000c      	movs	r4, r1
   112a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   112aa:	2a6e      	cmp	r2, #110	; 0x6e
   112ac:	d100      	bne.n	112b0 <_printf_i+0x1c>
   112ae:	e0ab      	b.n	11408 <_printf_i+0x174>
   112b0:	d811      	bhi.n	112d6 <_printf_i+0x42>
   112b2:	2a63      	cmp	r2, #99	; 0x63
   112b4:	d022      	beq.n	112fc <_printf_i+0x68>
   112b6:	d809      	bhi.n	112cc <_printf_i+0x38>
   112b8:	2a00      	cmp	r2, #0
   112ba:	d100      	bne.n	112be <_printf_i+0x2a>
   112bc:	e0b5      	b.n	1142a <_printf_i+0x196>
   112be:	2a58      	cmp	r2, #88	; 0x58
   112c0:	d000      	beq.n	112c4 <_printf_i+0x30>
   112c2:	e0c5      	b.n	11450 <_printf_i+0x1bc>
   112c4:	3145      	adds	r1, #69	; 0x45
   112c6:	700a      	strb	r2, [r1, #0]
   112c8:	4a81      	ldr	r2, [pc, #516]	; (114d0 <_printf_i+0x23c>)
   112ca:	e04f      	b.n	1136c <_printf_i+0xd8>
   112cc:	2a64      	cmp	r2, #100	; 0x64
   112ce:	d01d      	beq.n	1130c <_printf_i+0x78>
   112d0:	2a69      	cmp	r2, #105	; 0x69
   112d2:	d01b      	beq.n	1130c <_printf_i+0x78>
   112d4:	e0bc      	b.n	11450 <_printf_i+0x1bc>
   112d6:	2a73      	cmp	r2, #115	; 0x73
   112d8:	d100      	bne.n	112dc <_printf_i+0x48>
   112da:	e0aa      	b.n	11432 <_printf_i+0x19e>
   112dc:	d809      	bhi.n	112f2 <_printf_i+0x5e>
   112de:	2a6f      	cmp	r2, #111	; 0x6f
   112e0:	d029      	beq.n	11336 <_printf_i+0xa2>
   112e2:	2a70      	cmp	r2, #112	; 0x70
   112e4:	d000      	beq.n	112e8 <_printf_i+0x54>
   112e6:	e0b3      	b.n	11450 <_printf_i+0x1bc>
   112e8:	2220      	movs	r2, #32
   112ea:	6809      	ldr	r1, [r1, #0]
   112ec:	430a      	orrs	r2, r1
   112ee:	6022      	str	r2, [r4, #0]
   112f0:	e037      	b.n	11362 <_printf_i+0xce>
   112f2:	2a75      	cmp	r2, #117	; 0x75
   112f4:	d01f      	beq.n	11336 <_printf_i+0xa2>
   112f6:	2a78      	cmp	r2, #120	; 0x78
   112f8:	d033      	beq.n	11362 <_printf_i+0xce>
   112fa:	e0a9      	b.n	11450 <_printf_i+0x1bc>
   112fc:	000e      	movs	r6, r1
   112fe:	681a      	ldr	r2, [r3, #0]
   11300:	3642      	adds	r6, #66	; 0x42
   11302:	1d11      	adds	r1, r2, #4
   11304:	6019      	str	r1, [r3, #0]
   11306:	6813      	ldr	r3, [r2, #0]
   11308:	7033      	strb	r3, [r6, #0]
   1130a:	e0a4      	b.n	11456 <_printf_i+0x1c2>
   1130c:	6821      	ldr	r1, [r4, #0]
   1130e:	681a      	ldr	r2, [r3, #0]
   11310:	0608      	lsls	r0, r1, #24
   11312:	d406      	bmi.n	11322 <_printf_i+0x8e>
   11314:	0649      	lsls	r1, r1, #25
   11316:	d504      	bpl.n	11322 <_printf_i+0x8e>
   11318:	1d11      	adds	r1, r2, #4
   1131a:	6019      	str	r1, [r3, #0]
   1131c:	2300      	movs	r3, #0
   1131e:	5ed5      	ldrsh	r5, [r2, r3]
   11320:	e002      	b.n	11328 <_printf_i+0x94>
   11322:	1d11      	adds	r1, r2, #4
   11324:	6019      	str	r1, [r3, #0]
   11326:	6815      	ldr	r5, [r2, #0]
   11328:	2d00      	cmp	r5, #0
   1132a:	da3b      	bge.n	113a4 <_printf_i+0x110>
   1132c:	232d      	movs	r3, #45	; 0x2d
   1132e:	9a04      	ldr	r2, [sp, #16]
   11330:	426d      	negs	r5, r5
   11332:	7013      	strb	r3, [r2, #0]
   11334:	e036      	b.n	113a4 <_printf_i+0x110>
   11336:	6821      	ldr	r1, [r4, #0]
   11338:	681a      	ldr	r2, [r3, #0]
   1133a:	0608      	lsls	r0, r1, #24
   1133c:	d406      	bmi.n	1134c <_printf_i+0xb8>
   1133e:	0649      	lsls	r1, r1, #25
   11340:	d504      	bpl.n	1134c <_printf_i+0xb8>
   11342:	6815      	ldr	r5, [r2, #0]
   11344:	1d11      	adds	r1, r2, #4
   11346:	6019      	str	r1, [r3, #0]
   11348:	b2ad      	uxth	r5, r5
   1134a:	e002      	b.n	11352 <_printf_i+0xbe>
   1134c:	1d11      	adds	r1, r2, #4
   1134e:	6019      	str	r1, [r3, #0]
   11350:	6815      	ldr	r5, [r2, #0]
   11352:	4b5f      	ldr	r3, [pc, #380]	; (114d0 <_printf_i+0x23c>)
   11354:	7e22      	ldrb	r2, [r4, #24]
   11356:	9303      	str	r3, [sp, #12]
   11358:	2708      	movs	r7, #8
   1135a:	2a6f      	cmp	r2, #111	; 0x6f
   1135c:	d01d      	beq.n	1139a <_printf_i+0x106>
   1135e:	270a      	movs	r7, #10
   11360:	e01b      	b.n	1139a <_printf_i+0x106>
   11362:	0022      	movs	r2, r4
   11364:	2178      	movs	r1, #120	; 0x78
   11366:	3245      	adds	r2, #69	; 0x45
   11368:	7011      	strb	r1, [r2, #0]
   1136a:	4a5a      	ldr	r2, [pc, #360]	; (114d4 <_printf_i+0x240>)
   1136c:	6819      	ldr	r1, [r3, #0]
   1136e:	9203      	str	r2, [sp, #12]
   11370:	1d08      	adds	r0, r1, #4
   11372:	6822      	ldr	r2, [r4, #0]
   11374:	6018      	str	r0, [r3, #0]
   11376:	680d      	ldr	r5, [r1, #0]
   11378:	0610      	lsls	r0, r2, #24
   1137a:	d402      	bmi.n	11382 <_printf_i+0xee>
   1137c:	0650      	lsls	r0, r2, #25
   1137e:	d500      	bpl.n	11382 <_printf_i+0xee>
   11380:	b2ad      	uxth	r5, r5
   11382:	07d3      	lsls	r3, r2, #31
   11384:	d502      	bpl.n	1138c <_printf_i+0xf8>
   11386:	2320      	movs	r3, #32
   11388:	431a      	orrs	r2, r3
   1138a:	6022      	str	r2, [r4, #0]
   1138c:	2710      	movs	r7, #16
   1138e:	2d00      	cmp	r5, #0
   11390:	d103      	bne.n	1139a <_printf_i+0x106>
   11392:	2320      	movs	r3, #32
   11394:	6822      	ldr	r2, [r4, #0]
   11396:	439a      	bics	r2, r3
   11398:	6022      	str	r2, [r4, #0]
   1139a:	0023      	movs	r3, r4
   1139c:	2200      	movs	r2, #0
   1139e:	3343      	adds	r3, #67	; 0x43
   113a0:	701a      	strb	r2, [r3, #0]
   113a2:	e002      	b.n	113aa <_printf_i+0x116>
   113a4:	270a      	movs	r7, #10
   113a6:	4b4a      	ldr	r3, [pc, #296]	; (114d0 <_printf_i+0x23c>)
   113a8:	9303      	str	r3, [sp, #12]
   113aa:	6863      	ldr	r3, [r4, #4]
   113ac:	60a3      	str	r3, [r4, #8]
   113ae:	2b00      	cmp	r3, #0
   113b0:	db09      	blt.n	113c6 <_printf_i+0x132>
   113b2:	2204      	movs	r2, #4
   113b4:	6821      	ldr	r1, [r4, #0]
   113b6:	4391      	bics	r1, r2
   113b8:	6021      	str	r1, [r4, #0]
   113ba:	2d00      	cmp	r5, #0
   113bc:	d105      	bne.n	113ca <_printf_i+0x136>
   113be:	9e04      	ldr	r6, [sp, #16]
   113c0:	2b00      	cmp	r3, #0
   113c2:	d011      	beq.n	113e8 <_printf_i+0x154>
   113c4:	e07b      	b.n	114be <_printf_i+0x22a>
   113c6:	2d00      	cmp	r5, #0
   113c8:	d079      	beq.n	114be <_printf_i+0x22a>
   113ca:	9e04      	ldr	r6, [sp, #16]
   113cc:	0028      	movs	r0, r5
   113ce:	0039      	movs	r1, r7
   113d0:	f7ff fa6a 	bl	108a8 <__aeabi_uidivmod>
   113d4:	9b03      	ldr	r3, [sp, #12]
   113d6:	3e01      	subs	r6, #1
   113d8:	5c5b      	ldrb	r3, [r3, r1]
   113da:	0028      	movs	r0, r5
   113dc:	7033      	strb	r3, [r6, #0]
   113de:	0039      	movs	r1, r7
   113e0:	f7ff f9dc 	bl	1079c <__aeabi_uidiv>
   113e4:	1e05      	subs	r5, r0, #0
   113e6:	d1f1      	bne.n	113cc <_printf_i+0x138>
   113e8:	2f08      	cmp	r7, #8
   113ea:	d109      	bne.n	11400 <_printf_i+0x16c>
   113ec:	6823      	ldr	r3, [r4, #0]
   113ee:	07db      	lsls	r3, r3, #31
   113f0:	d506      	bpl.n	11400 <_printf_i+0x16c>
   113f2:	6863      	ldr	r3, [r4, #4]
   113f4:	6922      	ldr	r2, [r4, #16]
   113f6:	4293      	cmp	r3, r2
   113f8:	dc02      	bgt.n	11400 <_printf_i+0x16c>
   113fa:	2330      	movs	r3, #48	; 0x30
   113fc:	3e01      	subs	r6, #1
   113fe:	7033      	strb	r3, [r6, #0]
   11400:	9b04      	ldr	r3, [sp, #16]
   11402:	1b9b      	subs	r3, r3, r6
   11404:	6123      	str	r3, [r4, #16]
   11406:	e02b      	b.n	11460 <_printf_i+0x1cc>
   11408:	6809      	ldr	r1, [r1, #0]
   1140a:	681a      	ldr	r2, [r3, #0]
   1140c:	0608      	lsls	r0, r1, #24
   1140e:	d407      	bmi.n	11420 <_printf_i+0x18c>
   11410:	0649      	lsls	r1, r1, #25
   11412:	d505      	bpl.n	11420 <_printf_i+0x18c>
   11414:	1d11      	adds	r1, r2, #4
   11416:	6019      	str	r1, [r3, #0]
   11418:	6813      	ldr	r3, [r2, #0]
   1141a:	8aa2      	ldrh	r2, [r4, #20]
   1141c:	801a      	strh	r2, [r3, #0]
   1141e:	e004      	b.n	1142a <_printf_i+0x196>
   11420:	1d11      	adds	r1, r2, #4
   11422:	6019      	str	r1, [r3, #0]
   11424:	6813      	ldr	r3, [r2, #0]
   11426:	6962      	ldr	r2, [r4, #20]
   11428:	601a      	str	r2, [r3, #0]
   1142a:	2300      	movs	r3, #0
   1142c:	9e04      	ldr	r6, [sp, #16]
   1142e:	6123      	str	r3, [r4, #16]
   11430:	e016      	b.n	11460 <_printf_i+0x1cc>
   11432:	681a      	ldr	r2, [r3, #0]
   11434:	1d11      	adds	r1, r2, #4
   11436:	6019      	str	r1, [r3, #0]
   11438:	6816      	ldr	r6, [r2, #0]
   1143a:	2100      	movs	r1, #0
   1143c:	6862      	ldr	r2, [r4, #4]
   1143e:	0030      	movs	r0, r6
   11440:	f000 fda0 	bl	11f84 <memchr>
   11444:	2800      	cmp	r0, #0
   11446:	d001      	beq.n	1144c <_printf_i+0x1b8>
   11448:	1b80      	subs	r0, r0, r6
   1144a:	6060      	str	r0, [r4, #4]
   1144c:	6863      	ldr	r3, [r4, #4]
   1144e:	e003      	b.n	11458 <_printf_i+0x1c4>
   11450:	0026      	movs	r6, r4
   11452:	3642      	adds	r6, #66	; 0x42
   11454:	7032      	strb	r2, [r6, #0]
   11456:	2301      	movs	r3, #1
   11458:	6123      	str	r3, [r4, #16]
   1145a:	2300      	movs	r3, #0
   1145c:	9a04      	ldr	r2, [sp, #16]
   1145e:	7013      	strb	r3, [r2, #0]
   11460:	9b07      	ldr	r3, [sp, #28]
   11462:	aa09      	add	r2, sp, #36	; 0x24
   11464:	9300      	str	r3, [sp, #0]
   11466:	0021      	movs	r1, r4
   11468:	9b06      	ldr	r3, [sp, #24]
   1146a:	9805      	ldr	r0, [sp, #20]
   1146c:	f7ff fea4 	bl	111b8 <_printf_common>
   11470:	1c43      	adds	r3, r0, #1
   11472:	d102      	bne.n	1147a <_printf_i+0x1e6>
   11474:	2001      	movs	r0, #1
   11476:	4240      	negs	r0, r0
   11478:	e027      	b.n	114ca <_printf_i+0x236>
   1147a:	6923      	ldr	r3, [r4, #16]
   1147c:	0032      	movs	r2, r6
   1147e:	9906      	ldr	r1, [sp, #24]
   11480:	9805      	ldr	r0, [sp, #20]
   11482:	9d07      	ldr	r5, [sp, #28]
   11484:	47a8      	blx	r5
   11486:	1c43      	adds	r3, r0, #1
   11488:	d0f4      	beq.n	11474 <_printf_i+0x1e0>
   1148a:	6823      	ldr	r3, [r4, #0]
   1148c:	2500      	movs	r5, #0
   1148e:	079b      	lsls	r3, r3, #30
   11490:	d40f      	bmi.n	114b2 <_printf_i+0x21e>
   11492:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11494:	68e0      	ldr	r0, [r4, #12]
   11496:	4298      	cmp	r0, r3
   11498:	da17      	bge.n	114ca <_printf_i+0x236>
   1149a:	0018      	movs	r0, r3
   1149c:	e015      	b.n	114ca <_printf_i+0x236>
   1149e:	0022      	movs	r2, r4
   114a0:	2301      	movs	r3, #1
   114a2:	3219      	adds	r2, #25
   114a4:	9906      	ldr	r1, [sp, #24]
   114a6:	9805      	ldr	r0, [sp, #20]
   114a8:	9e07      	ldr	r6, [sp, #28]
   114aa:	47b0      	blx	r6
   114ac:	1c43      	adds	r3, r0, #1
   114ae:	d0e1      	beq.n	11474 <_printf_i+0x1e0>
   114b0:	3501      	adds	r5, #1
   114b2:	68e3      	ldr	r3, [r4, #12]
   114b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114b6:	1a9b      	subs	r3, r3, r2
   114b8:	429d      	cmp	r5, r3
   114ba:	dbf0      	blt.n	1149e <_printf_i+0x20a>
   114bc:	e7e9      	b.n	11492 <_printf_i+0x1fe>
   114be:	0026      	movs	r6, r4
   114c0:	9b03      	ldr	r3, [sp, #12]
   114c2:	3642      	adds	r6, #66	; 0x42
   114c4:	781b      	ldrb	r3, [r3, #0]
   114c6:	7033      	strb	r3, [r6, #0]
   114c8:	e78e      	b.n	113e8 <_printf_i+0x154>
   114ca:	b00b      	add	sp, #44	; 0x2c
   114cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114ce:	46c0      	nop			; (mov r8, r8)
   114d0:	0001412d 	.word	0x0001412d
   114d4:	0001413e 	.word	0x0001413e

000114d8 <iprintf>:
   114d8:	b40f      	push	{r0, r1, r2, r3}
   114da:	4b0b      	ldr	r3, [pc, #44]	; (11508 <iprintf+0x30>)
   114dc:	b513      	push	{r0, r1, r4, lr}
   114de:	681c      	ldr	r4, [r3, #0]
   114e0:	2c00      	cmp	r4, #0
   114e2:	d005      	beq.n	114f0 <iprintf+0x18>
   114e4:	69a3      	ldr	r3, [r4, #24]
   114e6:	2b00      	cmp	r3, #0
   114e8:	d102      	bne.n	114f0 <iprintf+0x18>
   114ea:	0020      	movs	r0, r4
   114ec:	f000 fc52 	bl	11d94 <__sinit>
   114f0:	ab05      	add	r3, sp, #20
   114f2:	9a04      	ldr	r2, [sp, #16]
   114f4:	68a1      	ldr	r1, [r4, #8]
   114f6:	0020      	movs	r0, r4
   114f8:	9301      	str	r3, [sp, #4]
   114fa:	f7ff fd41 	bl	10f80 <_vfiprintf_r>
   114fe:	bc16      	pop	{r1, r2, r4}
   11500:	bc08      	pop	{r3}
   11502:	b004      	add	sp, #16
   11504:	4718      	bx	r3
   11506:	46c0      	nop			; (mov r8, r8)
   11508:	20000098 	.word	0x20000098

0001150c <putchar>:
   1150c:	4b08      	ldr	r3, [pc, #32]	; (11530 <putchar+0x24>)
   1150e:	b570      	push	{r4, r5, r6, lr}
   11510:	681c      	ldr	r4, [r3, #0]
   11512:	0005      	movs	r5, r0
   11514:	2c00      	cmp	r4, #0
   11516:	d005      	beq.n	11524 <putchar+0x18>
   11518:	69a3      	ldr	r3, [r4, #24]
   1151a:	2b00      	cmp	r3, #0
   1151c:	d102      	bne.n	11524 <putchar+0x18>
   1151e:	0020      	movs	r0, r4
   11520:	f000 fc38 	bl	11d94 <__sinit>
   11524:	0029      	movs	r1, r5
   11526:	68a2      	ldr	r2, [r4, #8]
   11528:	0020      	movs	r0, r4
   1152a:	f000 fed1 	bl	122d0 <_putc_r>
   1152e:	bd70      	pop	{r4, r5, r6, pc}
   11530:	20000098 	.word	0x20000098

00011534 <_puts_r>:
   11534:	b570      	push	{r4, r5, r6, lr}
   11536:	0005      	movs	r5, r0
   11538:	000e      	movs	r6, r1
   1153a:	2800      	cmp	r0, #0
   1153c:	d004      	beq.n	11548 <_puts_r+0x14>
   1153e:	6983      	ldr	r3, [r0, #24]
   11540:	2b00      	cmp	r3, #0
   11542:	d101      	bne.n	11548 <_puts_r+0x14>
   11544:	f000 fc26 	bl	11d94 <__sinit>
   11548:	69ab      	ldr	r3, [r5, #24]
   1154a:	68ac      	ldr	r4, [r5, #8]
   1154c:	2b00      	cmp	r3, #0
   1154e:	d102      	bne.n	11556 <_puts_r+0x22>
   11550:	0028      	movs	r0, r5
   11552:	f000 fc1f 	bl	11d94 <__sinit>
   11556:	4b25      	ldr	r3, [pc, #148]	; (115ec <_puts_r+0xb8>)
   11558:	429c      	cmp	r4, r3
   1155a:	d101      	bne.n	11560 <_puts_r+0x2c>
   1155c:	686c      	ldr	r4, [r5, #4]
   1155e:	e008      	b.n	11572 <_puts_r+0x3e>
   11560:	4b23      	ldr	r3, [pc, #140]	; (115f0 <_puts_r+0xbc>)
   11562:	429c      	cmp	r4, r3
   11564:	d101      	bne.n	1156a <_puts_r+0x36>
   11566:	68ac      	ldr	r4, [r5, #8]
   11568:	e003      	b.n	11572 <_puts_r+0x3e>
   1156a:	4b22      	ldr	r3, [pc, #136]	; (115f4 <_puts_r+0xc0>)
   1156c:	429c      	cmp	r4, r3
   1156e:	d100      	bne.n	11572 <_puts_r+0x3e>
   11570:	68ec      	ldr	r4, [r5, #12]
   11572:	89a3      	ldrh	r3, [r4, #12]
   11574:	071b      	lsls	r3, r3, #28
   11576:	d502      	bpl.n	1157e <_puts_r+0x4a>
   11578:	6923      	ldr	r3, [r4, #16]
   1157a:	2b00      	cmp	r3, #0
   1157c:	d111      	bne.n	115a2 <_puts_r+0x6e>
   1157e:	0021      	movs	r1, r4
   11580:	0028      	movs	r0, r5
   11582:	f000 fa95 	bl	11ab0 <__swsetup_r>
   11586:	2800      	cmp	r0, #0
   11588:	d00b      	beq.n	115a2 <_puts_r+0x6e>
   1158a:	2001      	movs	r0, #1
   1158c:	4240      	negs	r0, r0
   1158e:	e02b      	b.n	115e8 <_puts_r+0xb4>
   11590:	3b01      	subs	r3, #1
   11592:	3601      	adds	r6, #1
   11594:	60a3      	str	r3, [r4, #8]
   11596:	2b00      	cmp	r3, #0
   11598:	db08      	blt.n	115ac <_puts_r+0x78>
   1159a:	6823      	ldr	r3, [r4, #0]
   1159c:	1c5a      	adds	r2, r3, #1
   1159e:	6022      	str	r2, [r4, #0]
   115a0:	7019      	strb	r1, [r3, #0]
   115a2:	7831      	ldrb	r1, [r6, #0]
   115a4:	68a3      	ldr	r3, [r4, #8]
   115a6:	2900      	cmp	r1, #0
   115a8:	d1f2      	bne.n	11590 <_puts_r+0x5c>
   115aa:	e00b      	b.n	115c4 <_puts_r+0x90>
   115ac:	69a2      	ldr	r2, [r4, #24]
   115ae:	4293      	cmp	r3, r2
   115b0:	db01      	blt.n	115b6 <_puts_r+0x82>
   115b2:	290a      	cmp	r1, #10
   115b4:	d1f1      	bne.n	1159a <_puts_r+0x66>
   115b6:	0022      	movs	r2, r4
   115b8:	0028      	movs	r0, r5
   115ba:	f000 fa21 	bl	11a00 <__swbuf_r>
   115be:	1c43      	adds	r3, r0, #1
   115c0:	d1ef      	bne.n	115a2 <_puts_r+0x6e>
   115c2:	e7e2      	b.n	1158a <_puts_r+0x56>
   115c4:	3b01      	subs	r3, #1
   115c6:	60a3      	str	r3, [r4, #8]
   115c8:	2b00      	cmp	r3, #0
   115ca:	da08      	bge.n	115de <_puts_r+0xaa>
   115cc:	0022      	movs	r2, r4
   115ce:	310a      	adds	r1, #10
   115d0:	0028      	movs	r0, r5
   115d2:	f000 fa15 	bl	11a00 <__swbuf_r>
   115d6:	1c43      	adds	r3, r0, #1
   115d8:	d0d7      	beq.n	1158a <_puts_r+0x56>
   115da:	200a      	movs	r0, #10
   115dc:	e004      	b.n	115e8 <_puts_r+0xb4>
   115de:	200a      	movs	r0, #10
   115e0:	6823      	ldr	r3, [r4, #0]
   115e2:	1c5a      	adds	r2, r3, #1
   115e4:	6022      	str	r2, [r4, #0]
   115e6:	7018      	strb	r0, [r3, #0]
   115e8:	bd70      	pop	{r4, r5, r6, pc}
   115ea:	46c0      	nop			; (mov r8, r8)
   115ec:	00014250 	.word	0x00014250
   115f0:	00014270 	.word	0x00014270
   115f4:	00014290 	.word	0x00014290

000115f8 <puts>:
   115f8:	b510      	push	{r4, lr}
   115fa:	4b03      	ldr	r3, [pc, #12]	; (11608 <puts+0x10>)
   115fc:	0001      	movs	r1, r0
   115fe:	6818      	ldr	r0, [r3, #0]
   11600:	f7ff ff98 	bl	11534 <_puts_r>
   11604:	bd10      	pop	{r4, pc}
   11606:	46c0      	nop			; (mov r8, r8)
   11608:	20000098 	.word	0x20000098

0001160c <_sbrk_r>:
   1160c:	2300      	movs	r3, #0
   1160e:	b570      	push	{r4, r5, r6, lr}
   11610:	4c06      	ldr	r4, [pc, #24]	; (1162c <_sbrk_r+0x20>)
   11612:	0005      	movs	r5, r0
   11614:	0008      	movs	r0, r1
   11616:	6023      	str	r3, [r4, #0]
   11618:	f7fb fc78 	bl	cf0c <_sbrk>
   1161c:	1c43      	adds	r3, r0, #1
   1161e:	d103      	bne.n	11628 <_sbrk_r+0x1c>
   11620:	6823      	ldr	r3, [r4, #0]
   11622:	2b00      	cmp	r3, #0
   11624:	d000      	beq.n	11628 <_sbrk_r+0x1c>
   11626:	602b      	str	r3, [r5, #0]
   11628:	bd70      	pop	{r4, r5, r6, pc}
   1162a:	46c0      	nop			; (mov r8, r8)
   1162c:	200047fc 	.word	0x200047fc

00011630 <setbuf>:
   11630:	424a      	negs	r2, r1
   11632:	414a      	adcs	r2, r1
   11634:	2380      	movs	r3, #128	; 0x80
   11636:	b510      	push	{r4, lr}
   11638:	0052      	lsls	r2, r2, #1
   1163a:	00db      	lsls	r3, r3, #3
   1163c:	f000 f802 	bl	11644 <setvbuf>
   11640:	bd10      	pop	{r4, pc}
	...

00011644 <setvbuf>:
   11644:	b5f0      	push	{r4, r5, r6, r7, lr}
   11646:	001d      	movs	r5, r3
   11648:	4b51      	ldr	r3, [pc, #324]	; (11790 <setvbuf+0x14c>)
   1164a:	b085      	sub	sp, #20
   1164c:	681e      	ldr	r6, [r3, #0]
   1164e:	0004      	movs	r4, r0
   11650:	000f      	movs	r7, r1
   11652:	9200      	str	r2, [sp, #0]
   11654:	2e00      	cmp	r6, #0
   11656:	d005      	beq.n	11664 <setvbuf+0x20>
   11658:	69b3      	ldr	r3, [r6, #24]
   1165a:	2b00      	cmp	r3, #0
   1165c:	d102      	bne.n	11664 <setvbuf+0x20>
   1165e:	0030      	movs	r0, r6
   11660:	f000 fb98 	bl	11d94 <__sinit>
   11664:	4b4b      	ldr	r3, [pc, #300]	; (11794 <setvbuf+0x150>)
   11666:	429c      	cmp	r4, r3
   11668:	d101      	bne.n	1166e <setvbuf+0x2a>
   1166a:	6874      	ldr	r4, [r6, #4]
   1166c:	e008      	b.n	11680 <setvbuf+0x3c>
   1166e:	4b4a      	ldr	r3, [pc, #296]	; (11798 <setvbuf+0x154>)
   11670:	429c      	cmp	r4, r3
   11672:	d101      	bne.n	11678 <setvbuf+0x34>
   11674:	68b4      	ldr	r4, [r6, #8]
   11676:	e003      	b.n	11680 <setvbuf+0x3c>
   11678:	4b48      	ldr	r3, [pc, #288]	; (1179c <setvbuf+0x158>)
   1167a:	429c      	cmp	r4, r3
   1167c:	d100      	bne.n	11680 <setvbuf+0x3c>
   1167e:	68f4      	ldr	r4, [r6, #12]
   11680:	9b00      	ldr	r3, [sp, #0]
   11682:	2b02      	cmp	r3, #2
   11684:	d005      	beq.n	11692 <setvbuf+0x4e>
   11686:	2b01      	cmp	r3, #1
   11688:	d900      	bls.n	1168c <setvbuf+0x48>
   1168a:	e07c      	b.n	11786 <setvbuf+0x142>
   1168c:	2d00      	cmp	r5, #0
   1168e:	da00      	bge.n	11692 <setvbuf+0x4e>
   11690:	e079      	b.n	11786 <setvbuf+0x142>
   11692:	0021      	movs	r1, r4
   11694:	0030      	movs	r0, r6
   11696:	f000 fb0f 	bl	11cb8 <_fflush_r>
   1169a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1169c:	2900      	cmp	r1, #0
   1169e:	d008      	beq.n	116b2 <setvbuf+0x6e>
   116a0:	0023      	movs	r3, r4
   116a2:	3344      	adds	r3, #68	; 0x44
   116a4:	4299      	cmp	r1, r3
   116a6:	d002      	beq.n	116ae <setvbuf+0x6a>
   116a8:	0030      	movs	r0, r6
   116aa:	f7ff fba5 	bl	10df8 <_free_r>
   116ae:	2300      	movs	r3, #0
   116b0:	6363      	str	r3, [r4, #52]	; 0x34
   116b2:	2300      	movs	r3, #0
   116b4:	61a3      	str	r3, [r4, #24]
   116b6:	6063      	str	r3, [r4, #4]
   116b8:	89a3      	ldrh	r3, [r4, #12]
   116ba:	061b      	lsls	r3, r3, #24
   116bc:	d503      	bpl.n	116c6 <setvbuf+0x82>
   116be:	6921      	ldr	r1, [r4, #16]
   116c0:	0030      	movs	r0, r6
   116c2:	f7ff fb99 	bl	10df8 <_free_r>
   116c6:	89a2      	ldrh	r2, [r4, #12]
   116c8:	4b35      	ldr	r3, [pc, #212]	; (117a0 <setvbuf+0x15c>)
   116ca:	4013      	ands	r3, r2
   116cc:	81a3      	strh	r3, [r4, #12]
   116ce:	9b00      	ldr	r3, [sp, #0]
   116d0:	2b02      	cmp	r3, #2
   116d2:	d021      	beq.n	11718 <setvbuf+0xd4>
   116d4:	ab03      	add	r3, sp, #12
   116d6:	aa02      	add	r2, sp, #8
   116d8:	0021      	movs	r1, r4
   116da:	0030      	movs	r0, r6
   116dc:	f000 fbee 	bl	11ebc <__swhatbuf_r>
   116e0:	89a3      	ldrh	r3, [r4, #12]
   116e2:	4318      	orrs	r0, r3
   116e4:	81a0      	strh	r0, [r4, #12]
   116e6:	2d00      	cmp	r5, #0
   116e8:	d101      	bne.n	116ee <setvbuf+0xaa>
   116ea:	9d02      	ldr	r5, [sp, #8]
   116ec:	e001      	b.n	116f2 <setvbuf+0xae>
   116ee:	2f00      	cmp	r7, #0
   116f0:	d125      	bne.n	1173e <setvbuf+0xfa>
   116f2:	0028      	movs	r0, r5
   116f4:	f7ff fb5a 	bl	10dac <malloc>
   116f8:	9501      	str	r5, [sp, #4]
   116fa:	1e07      	subs	r7, r0, #0
   116fc:	d11a      	bne.n	11734 <setvbuf+0xf0>
   116fe:	9b02      	ldr	r3, [sp, #8]
   11700:	9301      	str	r3, [sp, #4]
   11702:	42ab      	cmp	r3, r5
   11704:	d102      	bne.n	1170c <setvbuf+0xc8>
   11706:	2001      	movs	r0, #1
   11708:	4240      	negs	r0, r0
   1170a:	e006      	b.n	1171a <setvbuf+0xd6>
   1170c:	9801      	ldr	r0, [sp, #4]
   1170e:	f7ff fb4d 	bl	10dac <malloc>
   11712:	1e07      	subs	r7, r0, #0
   11714:	d10e      	bne.n	11734 <setvbuf+0xf0>
   11716:	e7f6      	b.n	11706 <setvbuf+0xc2>
   11718:	2000      	movs	r0, #0
   1171a:	2202      	movs	r2, #2
   1171c:	89a3      	ldrh	r3, [r4, #12]
   1171e:	4313      	orrs	r3, r2
   11720:	81a3      	strh	r3, [r4, #12]
   11722:	2300      	movs	r3, #0
   11724:	60a3      	str	r3, [r4, #8]
   11726:	0023      	movs	r3, r4
   11728:	3347      	adds	r3, #71	; 0x47
   1172a:	6023      	str	r3, [r4, #0]
   1172c:	6123      	str	r3, [r4, #16]
   1172e:	2301      	movs	r3, #1
   11730:	6163      	str	r3, [r4, #20]
   11732:	e02a      	b.n	1178a <setvbuf+0x146>
   11734:	2280      	movs	r2, #128	; 0x80
   11736:	89a3      	ldrh	r3, [r4, #12]
   11738:	9d01      	ldr	r5, [sp, #4]
   1173a:	4313      	orrs	r3, r2
   1173c:	81a3      	strh	r3, [r4, #12]
   1173e:	69b3      	ldr	r3, [r6, #24]
   11740:	2b00      	cmp	r3, #0
   11742:	d102      	bne.n	1174a <setvbuf+0x106>
   11744:	0030      	movs	r0, r6
   11746:	f000 fb25 	bl	11d94 <__sinit>
   1174a:	9b00      	ldr	r3, [sp, #0]
   1174c:	2b01      	cmp	r3, #1
   1174e:	d103      	bne.n	11758 <setvbuf+0x114>
   11750:	89a3      	ldrh	r3, [r4, #12]
   11752:	9a00      	ldr	r2, [sp, #0]
   11754:	431a      	orrs	r2, r3
   11756:	81a2      	strh	r2, [r4, #12]
   11758:	2308      	movs	r3, #8
   1175a:	89a2      	ldrh	r2, [r4, #12]
   1175c:	6027      	str	r7, [r4, #0]
   1175e:	4013      	ands	r3, r2
   11760:	6127      	str	r7, [r4, #16]
   11762:	6165      	str	r5, [r4, #20]
   11764:	1e18      	subs	r0, r3, #0
   11766:	d00c      	beq.n	11782 <setvbuf+0x13e>
   11768:	2301      	movs	r3, #1
   1176a:	401a      	ands	r2, r3
   1176c:	2300      	movs	r3, #0
   1176e:	1e10      	subs	r0, r2, #0
   11770:	4298      	cmp	r0, r3
   11772:	d004      	beq.n	1177e <setvbuf+0x13a>
   11774:	426d      	negs	r5, r5
   11776:	60a3      	str	r3, [r4, #8]
   11778:	61a5      	str	r5, [r4, #24]
   1177a:	0018      	movs	r0, r3
   1177c:	e005      	b.n	1178a <setvbuf+0x146>
   1177e:	60a5      	str	r5, [r4, #8]
   11780:	e003      	b.n	1178a <setvbuf+0x146>
   11782:	60a3      	str	r3, [r4, #8]
   11784:	e001      	b.n	1178a <setvbuf+0x146>
   11786:	2001      	movs	r0, #1
   11788:	4240      	negs	r0, r0
   1178a:	b005      	add	sp, #20
   1178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1178e:	46c0      	nop			; (mov r8, r8)
   11790:	20000098 	.word	0x20000098
   11794:	00014250 	.word	0x00014250
   11798:	00014270 	.word	0x00014270
   1179c:	00014290 	.word	0x00014290
   117a0:	fffff35c 	.word	0xfffff35c

000117a4 <sniprintf>:
   117a4:	b40c      	push	{r2, r3}
   117a6:	b530      	push	{r4, r5, lr}
   117a8:	4b16      	ldr	r3, [pc, #88]	; (11804 <sniprintf+0x60>)
   117aa:	b09d      	sub	sp, #116	; 0x74
   117ac:	1e0c      	subs	r4, r1, #0
   117ae:	681d      	ldr	r5, [r3, #0]
   117b0:	da04      	bge.n	117bc <sniprintf+0x18>
   117b2:	238b      	movs	r3, #139	; 0x8b
   117b4:	2001      	movs	r0, #1
   117b6:	602b      	str	r3, [r5, #0]
   117b8:	4240      	negs	r0, r0
   117ba:	e01d      	b.n	117f8 <sniprintf+0x54>
   117bc:	2382      	movs	r3, #130	; 0x82
   117be:	a902      	add	r1, sp, #8
   117c0:	009b      	lsls	r3, r3, #2
   117c2:	818b      	strh	r3, [r1, #12]
   117c4:	2300      	movs	r3, #0
   117c6:	9002      	str	r0, [sp, #8]
   117c8:	6108      	str	r0, [r1, #16]
   117ca:	429c      	cmp	r4, r3
   117cc:	d000      	beq.n	117d0 <sniprintf+0x2c>
   117ce:	1e63      	subs	r3, r4, #1
   117d0:	608b      	str	r3, [r1, #8]
   117d2:	614b      	str	r3, [r1, #20]
   117d4:	2301      	movs	r3, #1
   117d6:	425b      	negs	r3, r3
   117d8:	81cb      	strh	r3, [r1, #14]
   117da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   117dc:	ab21      	add	r3, sp, #132	; 0x84
   117de:	0028      	movs	r0, r5
   117e0:	9301      	str	r3, [sp, #4]
   117e2:	f000 fc77 	bl	120d4 <_svfiprintf_r>
   117e6:	1c43      	adds	r3, r0, #1
   117e8:	da01      	bge.n	117ee <sniprintf+0x4a>
   117ea:	238b      	movs	r3, #139	; 0x8b
   117ec:	602b      	str	r3, [r5, #0]
   117ee:	2c00      	cmp	r4, #0
   117f0:	d002      	beq.n	117f8 <sniprintf+0x54>
   117f2:	2300      	movs	r3, #0
   117f4:	9a02      	ldr	r2, [sp, #8]
   117f6:	7013      	strb	r3, [r2, #0]
   117f8:	b01d      	add	sp, #116	; 0x74
   117fa:	bc30      	pop	{r4, r5}
   117fc:	bc08      	pop	{r3}
   117fe:	b002      	add	sp, #8
   11800:	4718      	bx	r3
   11802:	46c0      	nop			; (mov r8, r8)
   11804:	20000098 	.word	0x20000098

00011808 <siprintf>:
   11808:	b40e      	push	{r1, r2, r3}
   1180a:	b510      	push	{r4, lr}
   1180c:	b09d      	sub	sp, #116	; 0x74
   1180e:	a902      	add	r1, sp, #8
   11810:	9002      	str	r0, [sp, #8]
   11812:	6108      	str	r0, [r1, #16]
   11814:	480b      	ldr	r0, [pc, #44]	; (11844 <siprintf+0x3c>)
   11816:	2482      	movs	r4, #130	; 0x82
   11818:	6088      	str	r0, [r1, #8]
   1181a:	6148      	str	r0, [r1, #20]
   1181c:	2001      	movs	r0, #1
   1181e:	4240      	negs	r0, r0
   11820:	ab1f      	add	r3, sp, #124	; 0x7c
   11822:	81c8      	strh	r0, [r1, #14]
   11824:	4808      	ldr	r0, [pc, #32]	; (11848 <siprintf+0x40>)
   11826:	cb04      	ldmia	r3!, {r2}
   11828:	00a4      	lsls	r4, r4, #2
   1182a:	6800      	ldr	r0, [r0, #0]
   1182c:	9301      	str	r3, [sp, #4]
   1182e:	818c      	strh	r4, [r1, #12]
   11830:	f000 fc50 	bl	120d4 <_svfiprintf_r>
   11834:	2300      	movs	r3, #0
   11836:	9a02      	ldr	r2, [sp, #8]
   11838:	7013      	strb	r3, [r2, #0]
   1183a:	b01d      	add	sp, #116	; 0x74
   1183c:	bc10      	pop	{r4}
   1183e:	bc08      	pop	{r3}
   11840:	b003      	add	sp, #12
   11842:	4718      	bx	r3
   11844:	7fffffff 	.word	0x7fffffff
   11848:	20000098 	.word	0x20000098

0001184c <strcmp>:
   1184c:	7802      	ldrb	r2, [r0, #0]
   1184e:	780b      	ldrb	r3, [r1, #0]
   11850:	2a00      	cmp	r2, #0
   11852:	d003      	beq.n	1185c <strcmp+0x10>
   11854:	3001      	adds	r0, #1
   11856:	3101      	adds	r1, #1
   11858:	429a      	cmp	r2, r3
   1185a:	d0f7      	beq.n	1184c <strcmp>
   1185c:	1ad0      	subs	r0, r2, r3
   1185e:	4770      	bx	lr

00011860 <strcpy>:
   11860:	1c03      	adds	r3, r0, #0
   11862:	780a      	ldrb	r2, [r1, #0]
   11864:	3101      	adds	r1, #1
   11866:	701a      	strb	r2, [r3, #0]
   11868:	3301      	adds	r3, #1
   1186a:	2a00      	cmp	r2, #0
   1186c:	d1f9      	bne.n	11862 <strcpy+0x2>
   1186e:	4770      	bx	lr

00011870 <strlen>:
   11870:	2300      	movs	r3, #0
   11872:	5cc2      	ldrb	r2, [r0, r3]
   11874:	3301      	adds	r3, #1
   11876:	2a00      	cmp	r2, #0
   11878:	d1fb      	bne.n	11872 <strlen+0x2>
   1187a:	1e58      	subs	r0, r3, #1
   1187c:	4770      	bx	lr

0001187e <strncmp>:
   1187e:	2300      	movs	r3, #0
   11880:	b530      	push	{r4, r5, lr}
   11882:	429a      	cmp	r2, r3
   11884:	d00b      	beq.n	1189e <strncmp+0x20>
   11886:	3a01      	subs	r2, #1
   11888:	5cc4      	ldrb	r4, [r0, r3]
   1188a:	5ccd      	ldrb	r5, [r1, r3]
   1188c:	42ac      	cmp	r4, r5
   1188e:	d105      	bne.n	1189c <strncmp+0x1e>
   11890:	429a      	cmp	r2, r3
   11892:	d002      	beq.n	1189a <strncmp+0x1c>
   11894:	3301      	adds	r3, #1
   11896:	2c00      	cmp	r4, #0
   11898:	d1f6      	bne.n	11888 <strncmp+0xa>
   1189a:	0025      	movs	r5, r4
   1189c:	1b63      	subs	r3, r4, r5
   1189e:	0018      	movs	r0, r3
   118a0:	bd30      	pop	{r4, r5, pc}

000118a2 <strspn>:
   118a2:	0003      	movs	r3, r0
   118a4:	b530      	push	{r4, r5, lr}
   118a6:	781c      	ldrb	r4, [r3, #0]
   118a8:	2c00      	cmp	r4, #0
   118aa:	d009      	beq.n	118c0 <strspn+0x1e>
   118ac:	000a      	movs	r2, r1
   118ae:	7815      	ldrb	r5, [r2, #0]
   118b0:	2d00      	cmp	r5, #0
   118b2:	d005      	beq.n	118c0 <strspn+0x1e>
   118b4:	42ac      	cmp	r4, r5
   118b6:	d001      	beq.n	118bc <strspn+0x1a>
   118b8:	3201      	adds	r2, #1
   118ba:	e7f8      	b.n	118ae <strspn+0xc>
   118bc:	3301      	adds	r3, #1
   118be:	e7f2      	b.n	118a6 <strspn+0x4>
   118c0:	1a18      	subs	r0, r3, r0
   118c2:	bd30      	pop	{r4, r5, pc}

000118c4 <_strtol_r>:
   118c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118c6:	001e      	movs	r6, r3
   118c8:	4b45      	ldr	r3, [pc, #276]	; (119e0 <_strtol_r+0x11c>)
   118ca:	b087      	sub	sp, #28
   118cc:	681b      	ldr	r3, [r3, #0]
   118ce:	9201      	str	r2, [sp, #4]
   118d0:	9302      	str	r3, [sp, #8]
   118d2:	2208      	movs	r2, #8
   118d4:	000b      	movs	r3, r1
   118d6:	9005      	str	r0, [sp, #20]
   118d8:	9103      	str	r1, [sp, #12]
   118da:	781c      	ldrb	r4, [r3, #0]
   118dc:	9902      	ldr	r1, [sp, #8]
   118de:	1c5d      	adds	r5, r3, #1
   118e0:	1909      	adds	r1, r1, r4
   118e2:	7848      	ldrb	r0, [r1, #1]
   118e4:	4010      	ands	r0, r2
   118e6:	d001      	beq.n	118ec <_strtol_r+0x28>
   118e8:	002b      	movs	r3, r5
   118ea:	e7f6      	b.n	118da <_strtol_r+0x16>
   118ec:	2c2d      	cmp	r4, #45	; 0x2d
   118ee:	d104      	bne.n	118fa <_strtol_r+0x36>
   118f0:	1c9d      	adds	r5, r3, #2
   118f2:	785c      	ldrb	r4, [r3, #1]
   118f4:	2301      	movs	r3, #1
   118f6:	9300      	str	r3, [sp, #0]
   118f8:	e004      	b.n	11904 <_strtol_r+0x40>
   118fa:	9000      	str	r0, [sp, #0]
   118fc:	2c2b      	cmp	r4, #43	; 0x2b
   118fe:	d101      	bne.n	11904 <_strtol_r+0x40>
   11900:	785c      	ldrb	r4, [r3, #1]
   11902:	1c9d      	adds	r5, r3, #2
   11904:	2e00      	cmp	r6, #0
   11906:	d002      	beq.n	1190e <_strtol_r+0x4a>
   11908:	2e10      	cmp	r6, #16
   1190a:	d10a      	bne.n	11922 <_strtol_r+0x5e>
   1190c:	e062      	b.n	119d4 <_strtol_r+0x110>
   1190e:	2c30      	cmp	r4, #48	; 0x30
   11910:	d15e      	bne.n	119d0 <_strtol_r+0x10c>
   11912:	2220      	movs	r2, #32
   11914:	782b      	ldrb	r3, [r5, #0]
   11916:	4393      	bics	r3, r2
   11918:	2b58      	cmp	r3, #88	; 0x58
   1191a:	d154      	bne.n	119c6 <_strtol_r+0x102>
   1191c:	2610      	movs	r6, #16
   1191e:	786c      	ldrb	r4, [r5, #1]
   11920:	3502      	adds	r5, #2
   11922:	9f00      	ldr	r7, [sp, #0]
   11924:	0031      	movs	r1, r6
   11926:	1e7b      	subs	r3, r7, #1
   11928:	419f      	sbcs	r7, r3
   1192a:	4b2e      	ldr	r3, [pc, #184]	; (119e4 <_strtol_r+0x120>)
   1192c:	18ff      	adds	r7, r7, r3
   1192e:	0038      	movs	r0, r7
   11930:	f7fe ffba 	bl	108a8 <__aeabi_uidivmod>
   11934:	0038      	movs	r0, r7
   11936:	9104      	str	r1, [sp, #16]
   11938:	0031      	movs	r1, r6
   1193a:	f7fe ff2f 	bl	1079c <__aeabi_uidiv>
   1193e:	2300      	movs	r3, #0
   11940:	2203      	movs	r2, #3
   11942:	0007      	movs	r7, r0
   11944:	4694      	mov	ip, r2
   11946:	0018      	movs	r0, r3
   11948:	9a02      	ldr	r2, [sp, #8]
   1194a:	1912      	adds	r2, r2, r4
   1194c:	7851      	ldrb	r1, [r2, #1]
   1194e:	2204      	movs	r2, #4
   11950:	4211      	tst	r1, r2
   11952:	d001      	beq.n	11958 <_strtol_r+0x94>
   11954:	3c30      	subs	r4, #48	; 0x30
   11956:	e007      	b.n	11968 <_strtol_r+0xa4>
   11958:	4662      	mov	r2, ip
   1195a:	4011      	ands	r1, r2
   1195c:	d017      	beq.n	1198e <_strtol_r+0xca>
   1195e:	2237      	movs	r2, #55	; 0x37
   11960:	2901      	cmp	r1, #1
   11962:	d000      	beq.n	11966 <_strtol_r+0xa2>
   11964:	3220      	adds	r2, #32
   11966:	1aa4      	subs	r4, r4, r2
   11968:	42a6      	cmp	r6, r4
   1196a:	dd10      	ble.n	1198e <_strtol_r+0xca>
   1196c:	1c5a      	adds	r2, r3, #1
   1196e:	d00b      	beq.n	11988 <_strtol_r+0xc4>
   11970:	42b8      	cmp	r0, r7
   11972:	d807      	bhi.n	11984 <_strtol_r+0xc0>
   11974:	d102      	bne.n	1197c <_strtol_r+0xb8>
   11976:	9b04      	ldr	r3, [sp, #16]
   11978:	429c      	cmp	r4, r3
   1197a:	dc03      	bgt.n	11984 <_strtol_r+0xc0>
   1197c:	4370      	muls	r0, r6
   1197e:	2301      	movs	r3, #1
   11980:	1820      	adds	r0, r4, r0
   11982:	e001      	b.n	11988 <_strtol_r+0xc4>
   11984:	2301      	movs	r3, #1
   11986:	425b      	negs	r3, r3
   11988:	782c      	ldrb	r4, [r5, #0]
   1198a:	3501      	adds	r5, #1
   1198c:	e7dc      	b.n	11948 <_strtol_r+0x84>
   1198e:	1c5a      	adds	r2, r3, #1
   11990:	d10b      	bne.n	119aa <_strtol_r+0xe6>
   11992:	9800      	ldr	r0, [sp, #0]
   11994:	9a05      	ldr	r2, [sp, #20]
   11996:	1e43      	subs	r3, r0, #1
   11998:	4198      	sbcs	r0, r3
   1199a:	4b12      	ldr	r3, [pc, #72]	; (119e4 <_strtol_r+0x120>)
   1199c:	18c0      	adds	r0, r0, r3
   1199e:	2322      	movs	r3, #34	; 0x22
   119a0:	6013      	str	r3, [r2, #0]
   119a2:	9b01      	ldr	r3, [sp, #4]
   119a4:	2b00      	cmp	r3, #0
   119a6:	d10a      	bne.n	119be <_strtol_r+0xfa>
   119a8:	e017      	b.n	119da <_strtol_r+0x116>
   119aa:	9a00      	ldr	r2, [sp, #0]
   119ac:	2a00      	cmp	r2, #0
   119ae:	d000      	beq.n	119b2 <_strtol_r+0xee>
   119b0:	4240      	negs	r0, r0
   119b2:	9a01      	ldr	r2, [sp, #4]
   119b4:	2a00      	cmp	r2, #0
   119b6:	d010      	beq.n	119da <_strtol_r+0x116>
   119b8:	9a03      	ldr	r2, [sp, #12]
   119ba:	2b00      	cmp	r3, #0
   119bc:	d000      	beq.n	119c0 <_strtol_r+0xfc>
   119be:	1e6a      	subs	r2, r5, #1
   119c0:	9b01      	ldr	r3, [sp, #4]
   119c2:	601a      	str	r2, [r3, #0]
   119c4:	e009      	b.n	119da <_strtol_r+0x116>
   119c6:	2430      	movs	r4, #48	; 0x30
   119c8:	2e00      	cmp	r6, #0
   119ca:	d1aa      	bne.n	11922 <_strtol_r+0x5e>
   119cc:	2608      	movs	r6, #8
   119ce:	e7a8      	b.n	11922 <_strtol_r+0x5e>
   119d0:	260a      	movs	r6, #10
   119d2:	e7a6      	b.n	11922 <_strtol_r+0x5e>
   119d4:	2c30      	cmp	r4, #48	; 0x30
   119d6:	d09c      	beq.n	11912 <_strtol_r+0x4e>
   119d8:	e7a3      	b.n	11922 <_strtol_r+0x5e>
   119da:	b007      	add	sp, #28
   119dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119de:	46c0      	nop			; (mov r8, r8)
   119e0:	2000009c 	.word	0x2000009c
   119e4:	7fffffff 	.word	0x7fffffff

000119e8 <strtol>:
   119e8:	b510      	push	{r4, lr}
   119ea:	0013      	movs	r3, r2
   119ec:	000a      	movs	r2, r1
   119ee:	0001      	movs	r1, r0
   119f0:	4802      	ldr	r0, [pc, #8]	; (119fc <strtol+0x14>)
   119f2:	6800      	ldr	r0, [r0, #0]
   119f4:	f7ff ff66 	bl	118c4 <_strtol_r>
   119f8:	bd10      	pop	{r4, pc}
   119fa:	46c0      	nop			; (mov r8, r8)
   119fc:	20000098 	.word	0x20000098

00011a00 <__swbuf_r>:
   11a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a02:	0005      	movs	r5, r0
   11a04:	000f      	movs	r7, r1
   11a06:	0014      	movs	r4, r2
   11a08:	2800      	cmp	r0, #0
   11a0a:	d004      	beq.n	11a16 <__swbuf_r+0x16>
   11a0c:	6983      	ldr	r3, [r0, #24]
   11a0e:	2b00      	cmp	r3, #0
   11a10:	d101      	bne.n	11a16 <__swbuf_r+0x16>
   11a12:	f000 f9bf 	bl	11d94 <__sinit>
   11a16:	4b23      	ldr	r3, [pc, #140]	; (11aa4 <__swbuf_r+0xa4>)
   11a18:	429c      	cmp	r4, r3
   11a1a:	d101      	bne.n	11a20 <__swbuf_r+0x20>
   11a1c:	686c      	ldr	r4, [r5, #4]
   11a1e:	e008      	b.n	11a32 <__swbuf_r+0x32>
   11a20:	4b21      	ldr	r3, [pc, #132]	; (11aa8 <__swbuf_r+0xa8>)
   11a22:	429c      	cmp	r4, r3
   11a24:	d101      	bne.n	11a2a <__swbuf_r+0x2a>
   11a26:	68ac      	ldr	r4, [r5, #8]
   11a28:	e003      	b.n	11a32 <__swbuf_r+0x32>
   11a2a:	4b20      	ldr	r3, [pc, #128]	; (11aac <__swbuf_r+0xac>)
   11a2c:	429c      	cmp	r4, r3
   11a2e:	d100      	bne.n	11a32 <__swbuf_r+0x32>
   11a30:	68ec      	ldr	r4, [r5, #12]
   11a32:	69a3      	ldr	r3, [r4, #24]
   11a34:	60a3      	str	r3, [r4, #8]
   11a36:	89a3      	ldrh	r3, [r4, #12]
   11a38:	071b      	lsls	r3, r3, #28
   11a3a:	d50a      	bpl.n	11a52 <__swbuf_r+0x52>
   11a3c:	6923      	ldr	r3, [r4, #16]
   11a3e:	2b00      	cmp	r3, #0
   11a40:	d007      	beq.n	11a52 <__swbuf_r+0x52>
   11a42:	6823      	ldr	r3, [r4, #0]
   11a44:	6922      	ldr	r2, [r4, #16]
   11a46:	b2fe      	uxtb	r6, r7
   11a48:	1a98      	subs	r0, r3, r2
   11a4a:	6963      	ldr	r3, [r4, #20]
   11a4c:	4298      	cmp	r0, r3
   11a4e:	db0f      	blt.n	11a70 <__swbuf_r+0x70>
   11a50:	e008      	b.n	11a64 <__swbuf_r+0x64>
   11a52:	0021      	movs	r1, r4
   11a54:	0028      	movs	r0, r5
   11a56:	f000 f82b 	bl	11ab0 <__swsetup_r>
   11a5a:	2800      	cmp	r0, #0
   11a5c:	d0f1      	beq.n	11a42 <__swbuf_r+0x42>
   11a5e:	2001      	movs	r0, #1
   11a60:	4240      	negs	r0, r0
   11a62:	e01d      	b.n	11aa0 <__swbuf_r+0xa0>
   11a64:	0021      	movs	r1, r4
   11a66:	0028      	movs	r0, r5
   11a68:	f000 f926 	bl	11cb8 <_fflush_r>
   11a6c:	2800      	cmp	r0, #0
   11a6e:	d1f6      	bne.n	11a5e <__swbuf_r+0x5e>
   11a70:	68a3      	ldr	r3, [r4, #8]
   11a72:	3001      	adds	r0, #1
   11a74:	3b01      	subs	r3, #1
   11a76:	60a3      	str	r3, [r4, #8]
   11a78:	6823      	ldr	r3, [r4, #0]
   11a7a:	1c5a      	adds	r2, r3, #1
   11a7c:	6022      	str	r2, [r4, #0]
   11a7e:	701f      	strb	r7, [r3, #0]
   11a80:	6963      	ldr	r3, [r4, #20]
   11a82:	4298      	cmp	r0, r3
   11a84:	d005      	beq.n	11a92 <__swbuf_r+0x92>
   11a86:	89a3      	ldrh	r3, [r4, #12]
   11a88:	0030      	movs	r0, r6
   11a8a:	07db      	lsls	r3, r3, #31
   11a8c:	d508      	bpl.n	11aa0 <__swbuf_r+0xa0>
   11a8e:	2e0a      	cmp	r6, #10
   11a90:	d106      	bne.n	11aa0 <__swbuf_r+0xa0>
   11a92:	0021      	movs	r1, r4
   11a94:	0028      	movs	r0, r5
   11a96:	f000 f90f 	bl	11cb8 <_fflush_r>
   11a9a:	2800      	cmp	r0, #0
   11a9c:	d1df      	bne.n	11a5e <__swbuf_r+0x5e>
   11a9e:	0030      	movs	r0, r6
   11aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11aa2:	46c0      	nop			; (mov r8, r8)
   11aa4:	00014250 	.word	0x00014250
   11aa8:	00014270 	.word	0x00014270
   11aac:	00014290 	.word	0x00014290

00011ab0 <__swsetup_r>:
   11ab0:	4b36      	ldr	r3, [pc, #216]	; (11b8c <__swsetup_r+0xdc>)
   11ab2:	b570      	push	{r4, r5, r6, lr}
   11ab4:	681d      	ldr	r5, [r3, #0]
   11ab6:	0006      	movs	r6, r0
   11ab8:	000c      	movs	r4, r1
   11aba:	2d00      	cmp	r5, #0
   11abc:	d005      	beq.n	11aca <__swsetup_r+0x1a>
   11abe:	69ab      	ldr	r3, [r5, #24]
   11ac0:	2b00      	cmp	r3, #0
   11ac2:	d102      	bne.n	11aca <__swsetup_r+0x1a>
   11ac4:	0028      	movs	r0, r5
   11ac6:	f000 f965 	bl	11d94 <__sinit>
   11aca:	4b31      	ldr	r3, [pc, #196]	; (11b90 <__swsetup_r+0xe0>)
   11acc:	429c      	cmp	r4, r3
   11ace:	d101      	bne.n	11ad4 <__swsetup_r+0x24>
   11ad0:	686c      	ldr	r4, [r5, #4]
   11ad2:	e008      	b.n	11ae6 <__swsetup_r+0x36>
   11ad4:	4b2f      	ldr	r3, [pc, #188]	; (11b94 <__swsetup_r+0xe4>)
   11ad6:	429c      	cmp	r4, r3
   11ad8:	d101      	bne.n	11ade <__swsetup_r+0x2e>
   11ada:	68ac      	ldr	r4, [r5, #8]
   11adc:	e003      	b.n	11ae6 <__swsetup_r+0x36>
   11ade:	4b2e      	ldr	r3, [pc, #184]	; (11b98 <__swsetup_r+0xe8>)
   11ae0:	429c      	cmp	r4, r3
   11ae2:	d100      	bne.n	11ae6 <__swsetup_r+0x36>
   11ae4:	68ec      	ldr	r4, [r5, #12]
   11ae6:	220c      	movs	r2, #12
   11ae8:	5ea3      	ldrsh	r3, [r4, r2]
   11aea:	b29a      	uxth	r2, r3
   11aec:	0711      	lsls	r1, r2, #28
   11aee:	d423      	bmi.n	11b38 <__swsetup_r+0x88>
   11af0:	06d1      	lsls	r1, r2, #27
   11af2:	d407      	bmi.n	11b04 <__swsetup_r+0x54>
   11af4:	2209      	movs	r2, #9
   11af6:	2001      	movs	r0, #1
   11af8:	6032      	str	r2, [r6, #0]
   11afa:	3237      	adds	r2, #55	; 0x37
   11afc:	4313      	orrs	r3, r2
   11afe:	81a3      	strh	r3, [r4, #12]
   11b00:	4240      	negs	r0, r0
   11b02:	e042      	b.n	11b8a <__swsetup_r+0xda>
   11b04:	0753      	lsls	r3, r2, #29
   11b06:	d513      	bpl.n	11b30 <__swsetup_r+0x80>
   11b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11b0a:	2900      	cmp	r1, #0
   11b0c:	d008      	beq.n	11b20 <__swsetup_r+0x70>
   11b0e:	0023      	movs	r3, r4
   11b10:	3344      	adds	r3, #68	; 0x44
   11b12:	4299      	cmp	r1, r3
   11b14:	d002      	beq.n	11b1c <__swsetup_r+0x6c>
   11b16:	0030      	movs	r0, r6
   11b18:	f7ff f96e 	bl	10df8 <_free_r>
   11b1c:	2300      	movs	r3, #0
   11b1e:	6363      	str	r3, [r4, #52]	; 0x34
   11b20:	2224      	movs	r2, #36	; 0x24
   11b22:	89a3      	ldrh	r3, [r4, #12]
   11b24:	4393      	bics	r3, r2
   11b26:	81a3      	strh	r3, [r4, #12]
   11b28:	2300      	movs	r3, #0
   11b2a:	6063      	str	r3, [r4, #4]
   11b2c:	6923      	ldr	r3, [r4, #16]
   11b2e:	6023      	str	r3, [r4, #0]
   11b30:	2208      	movs	r2, #8
   11b32:	89a3      	ldrh	r3, [r4, #12]
   11b34:	4313      	orrs	r3, r2
   11b36:	81a3      	strh	r3, [r4, #12]
   11b38:	6923      	ldr	r3, [r4, #16]
   11b3a:	2b00      	cmp	r3, #0
   11b3c:	d10b      	bne.n	11b56 <__swsetup_r+0xa6>
   11b3e:	23a0      	movs	r3, #160	; 0xa0
   11b40:	89a2      	ldrh	r2, [r4, #12]
   11b42:	009b      	lsls	r3, r3, #2
   11b44:	4013      	ands	r3, r2
   11b46:	2280      	movs	r2, #128	; 0x80
   11b48:	0092      	lsls	r2, r2, #2
   11b4a:	4293      	cmp	r3, r2
   11b4c:	d003      	beq.n	11b56 <__swsetup_r+0xa6>
   11b4e:	0021      	movs	r1, r4
   11b50:	0030      	movs	r0, r6
   11b52:	f000 f9d9 	bl	11f08 <__smakebuf_r>
   11b56:	2301      	movs	r3, #1
   11b58:	89a2      	ldrh	r2, [r4, #12]
   11b5a:	4013      	ands	r3, r2
   11b5c:	d005      	beq.n	11b6a <__swsetup_r+0xba>
   11b5e:	2300      	movs	r3, #0
   11b60:	60a3      	str	r3, [r4, #8]
   11b62:	6963      	ldr	r3, [r4, #20]
   11b64:	425b      	negs	r3, r3
   11b66:	61a3      	str	r3, [r4, #24]
   11b68:	e003      	b.n	11b72 <__swsetup_r+0xc2>
   11b6a:	0792      	lsls	r2, r2, #30
   11b6c:	d400      	bmi.n	11b70 <__swsetup_r+0xc0>
   11b6e:	6963      	ldr	r3, [r4, #20]
   11b70:	60a3      	str	r3, [r4, #8]
   11b72:	2000      	movs	r0, #0
   11b74:	6923      	ldr	r3, [r4, #16]
   11b76:	4283      	cmp	r3, r0
   11b78:	d107      	bne.n	11b8a <__swsetup_r+0xda>
   11b7a:	220c      	movs	r2, #12
   11b7c:	5ea3      	ldrsh	r3, [r4, r2]
   11b7e:	061a      	lsls	r2, r3, #24
   11b80:	d503      	bpl.n	11b8a <__swsetup_r+0xda>
   11b82:	2240      	movs	r2, #64	; 0x40
   11b84:	4313      	orrs	r3, r2
   11b86:	81a3      	strh	r3, [r4, #12]
   11b88:	3801      	subs	r0, #1
   11b8a:	bd70      	pop	{r4, r5, r6, pc}
   11b8c:	20000098 	.word	0x20000098
   11b90:	00014250 	.word	0x00014250
   11b94:	00014270 	.word	0x00014270
   11b98:	00014290 	.word	0x00014290

00011b9c <abort>:
   11b9c:	b510      	push	{r4, lr}
   11b9e:	2006      	movs	r0, #6
   11ba0:	f000 fbf6 	bl	12390 <raise>
   11ba4:	2001      	movs	r0, #1
   11ba6:	f7fb f9fd 	bl	cfa4 <_exit>
	...

00011bac <__sflush_r>:
   11bac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11bae:	898a      	ldrh	r2, [r1, #12]
   11bb0:	0005      	movs	r5, r0
   11bb2:	000c      	movs	r4, r1
   11bb4:	0713      	lsls	r3, r2, #28
   11bb6:	d45a      	bmi.n	11c6e <__sflush_r+0xc2>
   11bb8:	684b      	ldr	r3, [r1, #4]
   11bba:	2b00      	cmp	r3, #0
   11bbc:	dc02      	bgt.n	11bc4 <__sflush_r+0x18>
   11bbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	dd19      	ble.n	11bf8 <__sflush_r+0x4c>
   11bc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11bc6:	2f00      	cmp	r7, #0
   11bc8:	d016      	beq.n	11bf8 <__sflush_r+0x4c>
   11bca:	2300      	movs	r3, #0
   11bcc:	682e      	ldr	r6, [r5, #0]
   11bce:	602b      	str	r3, [r5, #0]
   11bd0:	2380      	movs	r3, #128	; 0x80
   11bd2:	015b      	lsls	r3, r3, #5
   11bd4:	401a      	ands	r2, r3
   11bd6:	d001      	beq.n	11bdc <__sflush_r+0x30>
   11bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   11bda:	e014      	b.n	11c06 <__sflush_r+0x5a>
   11bdc:	2301      	movs	r3, #1
   11bde:	6a21      	ldr	r1, [r4, #32]
   11be0:	0028      	movs	r0, r5
   11be2:	47b8      	blx	r7
   11be4:	1c43      	adds	r3, r0, #1
   11be6:	d10e      	bne.n	11c06 <__sflush_r+0x5a>
   11be8:	682b      	ldr	r3, [r5, #0]
   11bea:	2b00      	cmp	r3, #0
   11bec:	d00b      	beq.n	11c06 <__sflush_r+0x5a>
   11bee:	2b1d      	cmp	r3, #29
   11bf0:	d001      	beq.n	11bf6 <__sflush_r+0x4a>
   11bf2:	2b16      	cmp	r3, #22
   11bf4:	d102      	bne.n	11bfc <__sflush_r+0x50>
   11bf6:	602e      	str	r6, [r5, #0]
   11bf8:	2000      	movs	r0, #0
   11bfa:	e05a      	b.n	11cb2 <__sflush_r+0x106>
   11bfc:	2240      	movs	r2, #64	; 0x40
   11bfe:	89a3      	ldrh	r3, [r4, #12]
   11c00:	4313      	orrs	r3, r2
   11c02:	81a3      	strh	r3, [r4, #12]
   11c04:	e055      	b.n	11cb2 <__sflush_r+0x106>
   11c06:	89a3      	ldrh	r3, [r4, #12]
   11c08:	075b      	lsls	r3, r3, #29
   11c0a:	d506      	bpl.n	11c1a <__sflush_r+0x6e>
   11c0c:	6863      	ldr	r3, [r4, #4]
   11c0e:	1ac0      	subs	r0, r0, r3
   11c10:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11c12:	2b00      	cmp	r3, #0
   11c14:	d001      	beq.n	11c1a <__sflush_r+0x6e>
   11c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11c18:	1ac0      	subs	r0, r0, r3
   11c1a:	2300      	movs	r3, #0
   11c1c:	0002      	movs	r2, r0
   11c1e:	6a21      	ldr	r1, [r4, #32]
   11c20:	0028      	movs	r0, r5
   11c22:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   11c24:	47b8      	blx	r7
   11c26:	89a3      	ldrh	r3, [r4, #12]
   11c28:	1c42      	adds	r2, r0, #1
   11c2a:	d106      	bne.n	11c3a <__sflush_r+0x8e>
   11c2c:	6829      	ldr	r1, [r5, #0]
   11c2e:	291d      	cmp	r1, #29
   11c30:	d83a      	bhi.n	11ca8 <__sflush_r+0xfc>
   11c32:	4a20      	ldr	r2, [pc, #128]	; (11cb4 <__sflush_r+0x108>)
   11c34:	40ca      	lsrs	r2, r1
   11c36:	07d2      	lsls	r2, r2, #31
   11c38:	d536      	bpl.n	11ca8 <__sflush_r+0xfc>
   11c3a:	2200      	movs	r2, #0
   11c3c:	6062      	str	r2, [r4, #4]
   11c3e:	6922      	ldr	r2, [r4, #16]
   11c40:	6022      	str	r2, [r4, #0]
   11c42:	04db      	lsls	r3, r3, #19
   11c44:	d505      	bpl.n	11c52 <__sflush_r+0xa6>
   11c46:	1c43      	adds	r3, r0, #1
   11c48:	d102      	bne.n	11c50 <__sflush_r+0xa4>
   11c4a:	682b      	ldr	r3, [r5, #0]
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	d100      	bne.n	11c52 <__sflush_r+0xa6>
   11c50:	6560      	str	r0, [r4, #84]	; 0x54
   11c52:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11c54:	602e      	str	r6, [r5, #0]
   11c56:	2900      	cmp	r1, #0
   11c58:	d0ce      	beq.n	11bf8 <__sflush_r+0x4c>
   11c5a:	0023      	movs	r3, r4
   11c5c:	3344      	adds	r3, #68	; 0x44
   11c5e:	4299      	cmp	r1, r3
   11c60:	d002      	beq.n	11c68 <__sflush_r+0xbc>
   11c62:	0028      	movs	r0, r5
   11c64:	f7ff f8c8 	bl	10df8 <_free_r>
   11c68:	2000      	movs	r0, #0
   11c6a:	6360      	str	r0, [r4, #52]	; 0x34
   11c6c:	e021      	b.n	11cb2 <__sflush_r+0x106>
   11c6e:	690f      	ldr	r7, [r1, #16]
   11c70:	2f00      	cmp	r7, #0
   11c72:	d0c1      	beq.n	11bf8 <__sflush_r+0x4c>
   11c74:	680b      	ldr	r3, [r1, #0]
   11c76:	600f      	str	r7, [r1, #0]
   11c78:	1bdb      	subs	r3, r3, r7
   11c7a:	9301      	str	r3, [sp, #4]
   11c7c:	2300      	movs	r3, #0
   11c7e:	0792      	lsls	r2, r2, #30
   11c80:	d100      	bne.n	11c84 <__sflush_r+0xd8>
   11c82:	694b      	ldr	r3, [r1, #20]
   11c84:	60a3      	str	r3, [r4, #8]
   11c86:	e003      	b.n	11c90 <__sflush_r+0xe4>
   11c88:	9b01      	ldr	r3, [sp, #4]
   11c8a:	183f      	adds	r7, r7, r0
   11c8c:	1a1b      	subs	r3, r3, r0
   11c8e:	9301      	str	r3, [sp, #4]
   11c90:	9b01      	ldr	r3, [sp, #4]
   11c92:	2b00      	cmp	r3, #0
   11c94:	ddb0      	ble.n	11bf8 <__sflush_r+0x4c>
   11c96:	9b01      	ldr	r3, [sp, #4]
   11c98:	003a      	movs	r2, r7
   11c9a:	6a21      	ldr	r1, [r4, #32]
   11c9c:	0028      	movs	r0, r5
   11c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11ca0:	47b0      	blx	r6
   11ca2:	2800      	cmp	r0, #0
   11ca4:	dcf0      	bgt.n	11c88 <__sflush_r+0xdc>
   11ca6:	89a3      	ldrh	r3, [r4, #12]
   11ca8:	2240      	movs	r2, #64	; 0x40
   11caa:	2001      	movs	r0, #1
   11cac:	4313      	orrs	r3, r2
   11cae:	81a3      	strh	r3, [r4, #12]
   11cb0:	4240      	negs	r0, r0
   11cb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11cb4:	20400001 	.word	0x20400001

00011cb8 <_fflush_r>:
   11cb8:	690b      	ldr	r3, [r1, #16]
   11cba:	b570      	push	{r4, r5, r6, lr}
   11cbc:	0005      	movs	r5, r0
   11cbe:	000c      	movs	r4, r1
   11cc0:	2b00      	cmp	r3, #0
   11cc2:	d101      	bne.n	11cc8 <_fflush_r+0x10>
   11cc4:	2000      	movs	r0, #0
   11cc6:	e01c      	b.n	11d02 <_fflush_r+0x4a>
   11cc8:	2800      	cmp	r0, #0
   11cca:	d004      	beq.n	11cd6 <_fflush_r+0x1e>
   11ccc:	6983      	ldr	r3, [r0, #24]
   11cce:	2b00      	cmp	r3, #0
   11cd0:	d101      	bne.n	11cd6 <_fflush_r+0x1e>
   11cd2:	f000 f85f 	bl	11d94 <__sinit>
   11cd6:	4b0b      	ldr	r3, [pc, #44]	; (11d04 <_fflush_r+0x4c>)
   11cd8:	429c      	cmp	r4, r3
   11cda:	d101      	bne.n	11ce0 <_fflush_r+0x28>
   11cdc:	686c      	ldr	r4, [r5, #4]
   11cde:	e008      	b.n	11cf2 <_fflush_r+0x3a>
   11ce0:	4b09      	ldr	r3, [pc, #36]	; (11d08 <_fflush_r+0x50>)
   11ce2:	429c      	cmp	r4, r3
   11ce4:	d101      	bne.n	11cea <_fflush_r+0x32>
   11ce6:	68ac      	ldr	r4, [r5, #8]
   11ce8:	e003      	b.n	11cf2 <_fflush_r+0x3a>
   11cea:	4b08      	ldr	r3, [pc, #32]	; (11d0c <_fflush_r+0x54>)
   11cec:	429c      	cmp	r4, r3
   11cee:	d100      	bne.n	11cf2 <_fflush_r+0x3a>
   11cf0:	68ec      	ldr	r4, [r5, #12]
   11cf2:	220c      	movs	r2, #12
   11cf4:	5ea3      	ldrsh	r3, [r4, r2]
   11cf6:	2b00      	cmp	r3, #0
   11cf8:	d0e4      	beq.n	11cc4 <_fflush_r+0xc>
   11cfa:	0021      	movs	r1, r4
   11cfc:	0028      	movs	r0, r5
   11cfe:	f7ff ff55 	bl	11bac <__sflush_r>
   11d02:	bd70      	pop	{r4, r5, r6, pc}
   11d04:	00014250 	.word	0x00014250
   11d08:	00014270 	.word	0x00014270
   11d0c:	00014290 	.word	0x00014290

00011d10 <_cleanup_r>:
   11d10:	b510      	push	{r4, lr}
   11d12:	4902      	ldr	r1, [pc, #8]	; (11d1c <_cleanup_r+0xc>)
   11d14:	f000 f8b0 	bl	11e78 <_fwalk_reent>
   11d18:	bd10      	pop	{r4, pc}
   11d1a:	46c0      	nop			; (mov r8, r8)
   11d1c:	00011cb9 	.word	0x00011cb9

00011d20 <std.isra.0>:
   11d20:	2300      	movs	r3, #0
   11d22:	b510      	push	{r4, lr}
   11d24:	0004      	movs	r4, r0
   11d26:	6003      	str	r3, [r0, #0]
   11d28:	6043      	str	r3, [r0, #4]
   11d2a:	6083      	str	r3, [r0, #8]
   11d2c:	8181      	strh	r1, [r0, #12]
   11d2e:	6643      	str	r3, [r0, #100]	; 0x64
   11d30:	81c2      	strh	r2, [r0, #14]
   11d32:	6103      	str	r3, [r0, #16]
   11d34:	6143      	str	r3, [r0, #20]
   11d36:	6183      	str	r3, [r0, #24]
   11d38:	0019      	movs	r1, r3
   11d3a:	2208      	movs	r2, #8
   11d3c:	305c      	adds	r0, #92	; 0x5c
   11d3e:	f7ff f852 	bl	10de6 <memset>
   11d42:	4b05      	ldr	r3, [pc, #20]	; (11d58 <std.isra.0+0x38>)
   11d44:	6224      	str	r4, [r4, #32]
   11d46:	6263      	str	r3, [r4, #36]	; 0x24
   11d48:	4b04      	ldr	r3, [pc, #16]	; (11d5c <std.isra.0+0x3c>)
   11d4a:	62a3      	str	r3, [r4, #40]	; 0x28
   11d4c:	4b04      	ldr	r3, [pc, #16]	; (11d60 <std.isra.0+0x40>)
   11d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
   11d50:	4b04      	ldr	r3, [pc, #16]	; (11d64 <std.isra.0+0x44>)
   11d52:	6323      	str	r3, [r4, #48]	; 0x30
   11d54:	bd10      	pop	{r4, pc}
   11d56:	46c0      	nop			; (mov r8, r8)
   11d58:	000123d1 	.word	0x000123d1
   11d5c:	000123f9 	.word	0x000123f9
   11d60:	00012431 	.word	0x00012431
   11d64:	0001245d 	.word	0x0001245d

00011d68 <__sfmoreglue>:
   11d68:	b570      	push	{r4, r5, r6, lr}
   11d6a:	2568      	movs	r5, #104	; 0x68
   11d6c:	1e4b      	subs	r3, r1, #1
   11d6e:	435d      	muls	r5, r3
   11d70:	000e      	movs	r6, r1
   11d72:	0029      	movs	r1, r5
   11d74:	3174      	adds	r1, #116	; 0x74
   11d76:	f7ff f885 	bl	10e84 <_malloc_r>
   11d7a:	1e04      	subs	r4, r0, #0
   11d7c:	d008      	beq.n	11d90 <__sfmoreglue+0x28>
   11d7e:	2100      	movs	r1, #0
   11d80:	002a      	movs	r2, r5
   11d82:	6001      	str	r1, [r0, #0]
   11d84:	6046      	str	r6, [r0, #4]
   11d86:	300c      	adds	r0, #12
   11d88:	60a0      	str	r0, [r4, #8]
   11d8a:	3268      	adds	r2, #104	; 0x68
   11d8c:	f7ff f82b 	bl	10de6 <memset>
   11d90:	0020      	movs	r0, r4
   11d92:	bd70      	pop	{r4, r5, r6, pc}

00011d94 <__sinit>:
   11d94:	6983      	ldr	r3, [r0, #24]
   11d96:	b513      	push	{r0, r1, r4, lr}
   11d98:	0004      	movs	r4, r0
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	d128      	bne.n	11df0 <__sinit+0x5c>
   11d9e:	6483      	str	r3, [r0, #72]	; 0x48
   11da0:	64c3      	str	r3, [r0, #76]	; 0x4c
   11da2:	6503      	str	r3, [r0, #80]	; 0x50
   11da4:	4b13      	ldr	r3, [pc, #76]	; (11df4 <__sinit+0x60>)
   11da6:	4a14      	ldr	r2, [pc, #80]	; (11df8 <__sinit+0x64>)
   11da8:	681b      	ldr	r3, [r3, #0]
   11daa:	6282      	str	r2, [r0, #40]	; 0x28
   11dac:	9301      	str	r3, [sp, #4]
   11dae:	4298      	cmp	r0, r3
   11db0:	d101      	bne.n	11db6 <__sinit+0x22>
   11db2:	2301      	movs	r3, #1
   11db4:	6183      	str	r3, [r0, #24]
   11db6:	0020      	movs	r0, r4
   11db8:	f000 f820 	bl	11dfc <__sfp>
   11dbc:	6060      	str	r0, [r4, #4]
   11dbe:	0020      	movs	r0, r4
   11dc0:	f000 f81c 	bl	11dfc <__sfp>
   11dc4:	60a0      	str	r0, [r4, #8]
   11dc6:	0020      	movs	r0, r4
   11dc8:	f000 f818 	bl	11dfc <__sfp>
   11dcc:	2200      	movs	r2, #0
   11dce:	60e0      	str	r0, [r4, #12]
   11dd0:	2104      	movs	r1, #4
   11dd2:	6860      	ldr	r0, [r4, #4]
   11dd4:	f7ff ffa4 	bl	11d20 <std.isra.0>
   11dd8:	2201      	movs	r2, #1
   11dda:	2109      	movs	r1, #9
   11ddc:	68a0      	ldr	r0, [r4, #8]
   11dde:	f7ff ff9f 	bl	11d20 <std.isra.0>
   11de2:	2202      	movs	r2, #2
   11de4:	2112      	movs	r1, #18
   11de6:	68e0      	ldr	r0, [r4, #12]
   11de8:	f7ff ff9a 	bl	11d20 <std.isra.0>
   11dec:	2301      	movs	r3, #1
   11dee:	61a3      	str	r3, [r4, #24]
   11df0:	bd13      	pop	{r0, r1, r4, pc}
   11df2:	46c0      	nop			; (mov r8, r8)
   11df4:	00014118 	.word	0x00014118
   11df8:	00011d11 	.word	0x00011d11

00011dfc <__sfp>:
   11dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dfe:	4b1d      	ldr	r3, [pc, #116]	; (11e74 <__sfp+0x78>)
   11e00:	0006      	movs	r6, r0
   11e02:	681d      	ldr	r5, [r3, #0]
   11e04:	69ab      	ldr	r3, [r5, #24]
   11e06:	2b00      	cmp	r3, #0
   11e08:	d102      	bne.n	11e10 <__sfp+0x14>
   11e0a:	0028      	movs	r0, r5
   11e0c:	f7ff ffc2 	bl	11d94 <__sinit>
   11e10:	3548      	adds	r5, #72	; 0x48
   11e12:	68ac      	ldr	r4, [r5, #8]
   11e14:	686b      	ldr	r3, [r5, #4]
   11e16:	3b01      	subs	r3, #1
   11e18:	d405      	bmi.n	11e26 <__sfp+0x2a>
   11e1a:	220c      	movs	r2, #12
   11e1c:	5ea7      	ldrsh	r7, [r4, r2]
   11e1e:	2f00      	cmp	r7, #0
   11e20:	d010      	beq.n	11e44 <__sfp+0x48>
   11e22:	3468      	adds	r4, #104	; 0x68
   11e24:	e7f7      	b.n	11e16 <__sfp+0x1a>
   11e26:	682b      	ldr	r3, [r5, #0]
   11e28:	2b00      	cmp	r3, #0
   11e2a:	d001      	beq.n	11e30 <__sfp+0x34>
   11e2c:	682d      	ldr	r5, [r5, #0]
   11e2e:	e7f0      	b.n	11e12 <__sfp+0x16>
   11e30:	2104      	movs	r1, #4
   11e32:	0030      	movs	r0, r6
   11e34:	f7ff ff98 	bl	11d68 <__sfmoreglue>
   11e38:	6028      	str	r0, [r5, #0]
   11e3a:	2800      	cmp	r0, #0
   11e3c:	d1f6      	bne.n	11e2c <__sfp+0x30>
   11e3e:	230c      	movs	r3, #12
   11e40:	6033      	str	r3, [r6, #0]
   11e42:	e016      	b.n	11e72 <__sfp+0x76>
   11e44:	2301      	movs	r3, #1
   11e46:	0020      	movs	r0, r4
   11e48:	425b      	negs	r3, r3
   11e4a:	81e3      	strh	r3, [r4, #14]
   11e4c:	3302      	adds	r3, #2
   11e4e:	81a3      	strh	r3, [r4, #12]
   11e50:	6667      	str	r7, [r4, #100]	; 0x64
   11e52:	6027      	str	r7, [r4, #0]
   11e54:	60a7      	str	r7, [r4, #8]
   11e56:	6067      	str	r7, [r4, #4]
   11e58:	6127      	str	r7, [r4, #16]
   11e5a:	6167      	str	r7, [r4, #20]
   11e5c:	61a7      	str	r7, [r4, #24]
   11e5e:	305c      	adds	r0, #92	; 0x5c
   11e60:	2208      	movs	r2, #8
   11e62:	0039      	movs	r1, r7
   11e64:	f7fe ffbf 	bl	10de6 <memset>
   11e68:	0020      	movs	r0, r4
   11e6a:	6367      	str	r7, [r4, #52]	; 0x34
   11e6c:	63a7      	str	r7, [r4, #56]	; 0x38
   11e6e:	64a7      	str	r7, [r4, #72]	; 0x48
   11e70:	64e7      	str	r7, [r4, #76]	; 0x4c
   11e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e74:	00014118 	.word	0x00014118

00011e78 <_fwalk_reent>:
   11e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11e7a:	0004      	movs	r4, r0
   11e7c:	0007      	movs	r7, r0
   11e7e:	2600      	movs	r6, #0
   11e80:	9101      	str	r1, [sp, #4]
   11e82:	3448      	adds	r4, #72	; 0x48
   11e84:	2c00      	cmp	r4, #0
   11e86:	d016      	beq.n	11eb6 <_fwalk_reent+0x3e>
   11e88:	6863      	ldr	r3, [r4, #4]
   11e8a:	68a5      	ldr	r5, [r4, #8]
   11e8c:	9300      	str	r3, [sp, #0]
   11e8e:	9b00      	ldr	r3, [sp, #0]
   11e90:	3b01      	subs	r3, #1
   11e92:	9300      	str	r3, [sp, #0]
   11e94:	d40d      	bmi.n	11eb2 <_fwalk_reent+0x3a>
   11e96:	89ab      	ldrh	r3, [r5, #12]
   11e98:	2b01      	cmp	r3, #1
   11e9a:	d908      	bls.n	11eae <_fwalk_reent+0x36>
   11e9c:	220e      	movs	r2, #14
   11e9e:	5eab      	ldrsh	r3, [r5, r2]
   11ea0:	3301      	adds	r3, #1
   11ea2:	d004      	beq.n	11eae <_fwalk_reent+0x36>
   11ea4:	0029      	movs	r1, r5
   11ea6:	0038      	movs	r0, r7
   11ea8:	9b01      	ldr	r3, [sp, #4]
   11eaa:	4798      	blx	r3
   11eac:	4306      	orrs	r6, r0
   11eae:	3568      	adds	r5, #104	; 0x68
   11eb0:	e7ed      	b.n	11e8e <_fwalk_reent+0x16>
   11eb2:	6824      	ldr	r4, [r4, #0]
   11eb4:	e7e6      	b.n	11e84 <_fwalk_reent+0xc>
   11eb6:	0030      	movs	r0, r6
   11eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011ebc <__swhatbuf_r>:
   11ebc:	b570      	push	{r4, r5, r6, lr}
   11ebe:	000e      	movs	r6, r1
   11ec0:	001d      	movs	r5, r3
   11ec2:	230e      	movs	r3, #14
   11ec4:	5ec9      	ldrsh	r1, [r1, r3]
   11ec6:	b090      	sub	sp, #64	; 0x40
   11ec8:	0014      	movs	r4, r2
   11eca:	2900      	cmp	r1, #0
   11ecc:	da06      	bge.n	11edc <__swhatbuf_r+0x20>
   11ece:	2300      	movs	r3, #0
   11ed0:	602b      	str	r3, [r5, #0]
   11ed2:	89b3      	ldrh	r3, [r6, #12]
   11ed4:	061b      	lsls	r3, r3, #24
   11ed6:	d50f      	bpl.n	11ef8 <__swhatbuf_r+0x3c>
   11ed8:	2340      	movs	r3, #64	; 0x40
   11eda:	e00f      	b.n	11efc <__swhatbuf_r+0x40>
   11edc:	aa01      	add	r2, sp, #4
   11ede:	f000 fae9 	bl	124b4 <_fstat_r>
   11ee2:	2800      	cmp	r0, #0
   11ee4:	dbf3      	blt.n	11ece <__swhatbuf_r+0x12>
   11ee6:	23f0      	movs	r3, #240	; 0xf0
   11ee8:	9a02      	ldr	r2, [sp, #8]
   11eea:	021b      	lsls	r3, r3, #8
   11eec:	4013      	ands	r3, r2
   11eee:	4a05      	ldr	r2, [pc, #20]	; (11f04 <__swhatbuf_r+0x48>)
   11ef0:	189b      	adds	r3, r3, r2
   11ef2:	425a      	negs	r2, r3
   11ef4:	4153      	adcs	r3, r2
   11ef6:	602b      	str	r3, [r5, #0]
   11ef8:	2380      	movs	r3, #128	; 0x80
   11efa:	00db      	lsls	r3, r3, #3
   11efc:	2000      	movs	r0, #0
   11efe:	6023      	str	r3, [r4, #0]
   11f00:	b010      	add	sp, #64	; 0x40
   11f02:	bd70      	pop	{r4, r5, r6, pc}
   11f04:	ffffe000 	.word	0xffffe000

00011f08 <__smakebuf_r>:
   11f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11f0a:	2602      	movs	r6, #2
   11f0c:	898b      	ldrh	r3, [r1, #12]
   11f0e:	0005      	movs	r5, r0
   11f10:	000c      	movs	r4, r1
   11f12:	4233      	tst	r3, r6
   11f14:	d110      	bne.n	11f38 <__smakebuf_r+0x30>
   11f16:	ab01      	add	r3, sp, #4
   11f18:	466a      	mov	r2, sp
   11f1a:	f7ff ffcf 	bl	11ebc <__swhatbuf_r>
   11f1e:	9900      	ldr	r1, [sp, #0]
   11f20:	0007      	movs	r7, r0
   11f22:	0028      	movs	r0, r5
   11f24:	f7fe ffae 	bl	10e84 <_malloc_r>
   11f28:	2800      	cmp	r0, #0
   11f2a:	d10c      	bne.n	11f46 <__smakebuf_r+0x3e>
   11f2c:	220c      	movs	r2, #12
   11f2e:	5ea3      	ldrsh	r3, [r4, r2]
   11f30:	059a      	lsls	r2, r3, #22
   11f32:	d423      	bmi.n	11f7c <__smakebuf_r+0x74>
   11f34:	4333      	orrs	r3, r6
   11f36:	81a3      	strh	r3, [r4, #12]
   11f38:	0023      	movs	r3, r4
   11f3a:	3347      	adds	r3, #71	; 0x47
   11f3c:	6023      	str	r3, [r4, #0]
   11f3e:	6123      	str	r3, [r4, #16]
   11f40:	2301      	movs	r3, #1
   11f42:	6163      	str	r3, [r4, #20]
   11f44:	e01a      	b.n	11f7c <__smakebuf_r+0x74>
   11f46:	2280      	movs	r2, #128	; 0x80
   11f48:	4b0d      	ldr	r3, [pc, #52]	; (11f80 <__smakebuf_r+0x78>)
   11f4a:	62ab      	str	r3, [r5, #40]	; 0x28
   11f4c:	89a3      	ldrh	r3, [r4, #12]
   11f4e:	6020      	str	r0, [r4, #0]
   11f50:	4313      	orrs	r3, r2
   11f52:	81a3      	strh	r3, [r4, #12]
   11f54:	9b00      	ldr	r3, [sp, #0]
   11f56:	6120      	str	r0, [r4, #16]
   11f58:	6163      	str	r3, [r4, #20]
   11f5a:	9b01      	ldr	r3, [sp, #4]
   11f5c:	2b00      	cmp	r3, #0
   11f5e:	d00a      	beq.n	11f76 <__smakebuf_r+0x6e>
   11f60:	230e      	movs	r3, #14
   11f62:	5ee1      	ldrsh	r1, [r4, r3]
   11f64:	0028      	movs	r0, r5
   11f66:	f000 fab7 	bl	124d8 <_isatty_r>
   11f6a:	2800      	cmp	r0, #0
   11f6c:	d003      	beq.n	11f76 <__smakebuf_r+0x6e>
   11f6e:	2201      	movs	r2, #1
   11f70:	89a3      	ldrh	r3, [r4, #12]
   11f72:	4313      	orrs	r3, r2
   11f74:	81a3      	strh	r3, [r4, #12]
   11f76:	89a3      	ldrh	r3, [r4, #12]
   11f78:	431f      	orrs	r7, r3
   11f7a:	81a7      	strh	r7, [r4, #12]
   11f7c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   11f7e:	46c0      	nop			; (mov r8, r8)
   11f80:	00011d11 	.word	0x00011d11

00011f84 <memchr>:
   11f84:	b2c9      	uxtb	r1, r1
   11f86:	1882      	adds	r2, r0, r2
   11f88:	4290      	cmp	r0, r2
   11f8a:	d004      	beq.n	11f96 <memchr+0x12>
   11f8c:	7803      	ldrb	r3, [r0, #0]
   11f8e:	428b      	cmp	r3, r1
   11f90:	d002      	beq.n	11f98 <memchr+0x14>
   11f92:	3001      	adds	r0, #1
   11f94:	e7f8      	b.n	11f88 <memchr+0x4>
   11f96:	2000      	movs	r0, #0
   11f98:	4770      	bx	lr

00011f9a <memmove>:
   11f9a:	b510      	push	{r4, lr}
   11f9c:	4288      	cmp	r0, r1
   11f9e:	d902      	bls.n	11fa6 <memmove+0xc>
   11fa0:	188b      	adds	r3, r1, r2
   11fa2:	4298      	cmp	r0, r3
   11fa4:	d301      	bcc.n	11faa <memmove+0x10>
   11fa6:	2300      	movs	r3, #0
   11fa8:	e005      	b.n	11fb6 <memmove+0x1c>
   11faa:	1a9b      	subs	r3, r3, r2
   11fac:	3a01      	subs	r2, #1
   11fae:	d308      	bcc.n	11fc2 <memmove+0x28>
   11fb0:	5c99      	ldrb	r1, [r3, r2]
   11fb2:	5481      	strb	r1, [r0, r2]
   11fb4:	e7fa      	b.n	11fac <memmove+0x12>
   11fb6:	4293      	cmp	r3, r2
   11fb8:	d003      	beq.n	11fc2 <memmove+0x28>
   11fba:	5ccc      	ldrb	r4, [r1, r3]
   11fbc:	54c4      	strb	r4, [r0, r3]
   11fbe:	3301      	adds	r3, #1
   11fc0:	e7f9      	b.n	11fb6 <memmove+0x1c>
   11fc2:	bd10      	pop	{r4, pc}

00011fc4 <_realloc_r>:
   11fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fc6:	0006      	movs	r6, r0
   11fc8:	000c      	movs	r4, r1
   11fca:	0015      	movs	r5, r2
   11fcc:	2900      	cmp	r1, #0
   11fce:	d104      	bne.n	11fda <_realloc_r+0x16>
   11fd0:	0011      	movs	r1, r2
   11fd2:	f7fe ff57 	bl	10e84 <_malloc_r>
   11fd6:	0004      	movs	r4, r0
   11fd8:	e018      	b.n	1200c <_realloc_r+0x48>
   11fda:	2a00      	cmp	r2, #0
   11fdc:	d103      	bne.n	11fe6 <_realloc_r+0x22>
   11fde:	f7fe ff0b 	bl	10df8 <_free_r>
   11fe2:	002c      	movs	r4, r5
   11fe4:	e012      	b.n	1200c <_realloc_r+0x48>
   11fe6:	f000 fa9d 	bl	12524 <_malloc_usable_size_r>
   11fea:	4285      	cmp	r5, r0
   11fec:	d90e      	bls.n	1200c <_realloc_r+0x48>
   11fee:	0029      	movs	r1, r5
   11ff0:	0030      	movs	r0, r6
   11ff2:	f7fe ff47 	bl	10e84 <_malloc_r>
   11ff6:	1e07      	subs	r7, r0, #0
   11ff8:	d007      	beq.n	1200a <_realloc_r+0x46>
   11ffa:	0021      	movs	r1, r4
   11ffc:	002a      	movs	r2, r5
   11ffe:	f7fe fee9 	bl	10dd4 <memcpy>
   12002:	0021      	movs	r1, r4
   12004:	0030      	movs	r0, r6
   12006:	f7fe fef7 	bl	10df8 <_free_r>
   1200a:	003c      	movs	r4, r7
   1200c:	0020      	movs	r0, r4
   1200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012010 <__ssputs_r>:
   12010:	b5f0      	push	{r4, r5, r6, r7, lr}
   12012:	688e      	ldr	r6, [r1, #8]
   12014:	b085      	sub	sp, #20
   12016:	0007      	movs	r7, r0
   12018:	000c      	movs	r4, r1
   1201a:	9203      	str	r2, [sp, #12]
   1201c:	9301      	str	r3, [sp, #4]
   1201e:	429e      	cmp	r6, r3
   12020:	d843      	bhi.n	120aa <__ssputs_r+0x9a>
   12022:	2390      	movs	r3, #144	; 0x90
   12024:	898a      	ldrh	r2, [r1, #12]
   12026:	00db      	lsls	r3, r3, #3
   12028:	421a      	tst	r2, r3
   1202a:	d03e      	beq.n	120aa <__ssputs_r+0x9a>
   1202c:	2503      	movs	r5, #3
   1202e:	6909      	ldr	r1, [r1, #16]
   12030:	6823      	ldr	r3, [r4, #0]
   12032:	9801      	ldr	r0, [sp, #4]
   12034:	1a5b      	subs	r3, r3, r1
   12036:	9302      	str	r3, [sp, #8]
   12038:	6963      	ldr	r3, [r4, #20]
   1203a:	435d      	muls	r5, r3
   1203c:	0feb      	lsrs	r3, r5, #31
   1203e:	195d      	adds	r5, r3, r5
   12040:	9b02      	ldr	r3, [sp, #8]
   12042:	106d      	asrs	r5, r5, #1
   12044:	3301      	adds	r3, #1
   12046:	181b      	adds	r3, r3, r0
   12048:	42ab      	cmp	r3, r5
   1204a:	d900      	bls.n	1204e <__ssputs_r+0x3e>
   1204c:	001d      	movs	r5, r3
   1204e:	0553      	lsls	r3, r2, #21
   12050:	d510      	bpl.n	12074 <__ssputs_r+0x64>
   12052:	0029      	movs	r1, r5
   12054:	0038      	movs	r0, r7
   12056:	f7fe ff15 	bl	10e84 <_malloc_r>
   1205a:	1e06      	subs	r6, r0, #0
   1205c:	d014      	beq.n	12088 <__ssputs_r+0x78>
   1205e:	9a02      	ldr	r2, [sp, #8]
   12060:	6921      	ldr	r1, [r4, #16]
   12062:	f7fe feb7 	bl	10dd4 <memcpy>
   12066:	89a2      	ldrh	r2, [r4, #12]
   12068:	4b19      	ldr	r3, [pc, #100]	; (120d0 <__ssputs_r+0xc0>)
   1206a:	4013      	ands	r3, r2
   1206c:	2280      	movs	r2, #128	; 0x80
   1206e:	4313      	orrs	r3, r2
   12070:	81a3      	strh	r3, [r4, #12]
   12072:	e012      	b.n	1209a <__ssputs_r+0x8a>
   12074:	002a      	movs	r2, r5
   12076:	0038      	movs	r0, r7
   12078:	f7ff ffa4 	bl	11fc4 <_realloc_r>
   1207c:	1e06      	subs	r6, r0, #0
   1207e:	d10c      	bne.n	1209a <__ssputs_r+0x8a>
   12080:	6921      	ldr	r1, [r4, #16]
   12082:	0038      	movs	r0, r7
   12084:	f7fe feb8 	bl	10df8 <_free_r>
   12088:	230c      	movs	r3, #12
   1208a:	2240      	movs	r2, #64	; 0x40
   1208c:	2001      	movs	r0, #1
   1208e:	603b      	str	r3, [r7, #0]
   12090:	89a3      	ldrh	r3, [r4, #12]
   12092:	4240      	negs	r0, r0
   12094:	4313      	orrs	r3, r2
   12096:	81a3      	strh	r3, [r4, #12]
   12098:	e017      	b.n	120ca <__ssputs_r+0xba>
   1209a:	9b02      	ldr	r3, [sp, #8]
   1209c:	6126      	str	r6, [r4, #16]
   1209e:	18f6      	adds	r6, r6, r3
   120a0:	6026      	str	r6, [r4, #0]
   120a2:	6165      	str	r5, [r4, #20]
   120a4:	9e01      	ldr	r6, [sp, #4]
   120a6:	1aed      	subs	r5, r5, r3
   120a8:	60a5      	str	r5, [r4, #8]
   120aa:	9b01      	ldr	r3, [sp, #4]
   120ac:	42b3      	cmp	r3, r6
   120ae:	d200      	bcs.n	120b2 <__ssputs_r+0xa2>
   120b0:	001e      	movs	r6, r3
   120b2:	0032      	movs	r2, r6
   120b4:	9903      	ldr	r1, [sp, #12]
   120b6:	6820      	ldr	r0, [r4, #0]
   120b8:	f7ff ff6f 	bl	11f9a <memmove>
   120bc:	2000      	movs	r0, #0
   120be:	68a3      	ldr	r3, [r4, #8]
   120c0:	1b9b      	subs	r3, r3, r6
   120c2:	60a3      	str	r3, [r4, #8]
   120c4:	6823      	ldr	r3, [r4, #0]
   120c6:	199e      	adds	r6, r3, r6
   120c8:	6026      	str	r6, [r4, #0]
   120ca:	b005      	add	sp, #20
   120cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120ce:	46c0      	nop			; (mov r8, r8)
   120d0:	fffffb7f 	.word	0xfffffb7f

000120d4 <_svfiprintf_r>:
   120d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   120d6:	b09f      	sub	sp, #124	; 0x7c
   120d8:	9002      	str	r0, [sp, #8]
   120da:	9305      	str	r3, [sp, #20]
   120dc:	898b      	ldrh	r3, [r1, #12]
   120de:	000f      	movs	r7, r1
   120e0:	0016      	movs	r6, r2
   120e2:	061b      	lsls	r3, r3, #24
   120e4:	d510      	bpl.n	12108 <_svfiprintf_r+0x34>
   120e6:	690b      	ldr	r3, [r1, #16]
   120e8:	2b00      	cmp	r3, #0
   120ea:	d10d      	bne.n	12108 <_svfiprintf_r+0x34>
   120ec:	2140      	movs	r1, #64	; 0x40
   120ee:	f7fe fec9 	bl	10e84 <_malloc_r>
   120f2:	6038      	str	r0, [r7, #0]
   120f4:	6138      	str	r0, [r7, #16]
   120f6:	2800      	cmp	r0, #0
   120f8:	d104      	bne.n	12104 <_svfiprintf_r+0x30>
   120fa:	230c      	movs	r3, #12
   120fc:	9a02      	ldr	r2, [sp, #8]
   120fe:	3801      	subs	r0, #1
   12100:	6013      	str	r3, [r2, #0]
   12102:	e0d8      	b.n	122b6 <_svfiprintf_r+0x1e2>
   12104:	2340      	movs	r3, #64	; 0x40
   12106:	617b      	str	r3, [r7, #20]
   12108:	2300      	movs	r3, #0
   1210a:	ad06      	add	r5, sp, #24
   1210c:	616b      	str	r3, [r5, #20]
   1210e:	3320      	adds	r3, #32
   12110:	766b      	strb	r3, [r5, #25]
   12112:	3310      	adds	r3, #16
   12114:	76ab      	strb	r3, [r5, #26]
   12116:	0034      	movs	r4, r6
   12118:	7823      	ldrb	r3, [r4, #0]
   1211a:	2b00      	cmp	r3, #0
   1211c:	d103      	bne.n	12126 <_svfiprintf_r+0x52>
   1211e:	1ba3      	subs	r3, r4, r6
   12120:	9304      	str	r3, [sp, #16]
   12122:	d012      	beq.n	1214a <_svfiprintf_r+0x76>
   12124:	e003      	b.n	1212e <_svfiprintf_r+0x5a>
   12126:	2b25      	cmp	r3, #37	; 0x25
   12128:	d0f9      	beq.n	1211e <_svfiprintf_r+0x4a>
   1212a:	3401      	adds	r4, #1
   1212c:	e7f4      	b.n	12118 <_svfiprintf_r+0x44>
   1212e:	1ba3      	subs	r3, r4, r6
   12130:	0032      	movs	r2, r6
   12132:	0039      	movs	r1, r7
   12134:	9802      	ldr	r0, [sp, #8]
   12136:	f7ff ff6b 	bl	12010 <__ssputs_r>
   1213a:	1c43      	adds	r3, r0, #1
   1213c:	d100      	bne.n	12140 <_svfiprintf_r+0x6c>
   1213e:	e0b4      	b.n	122aa <_svfiprintf_r+0x1d6>
   12140:	696a      	ldr	r2, [r5, #20]
   12142:	9b04      	ldr	r3, [sp, #16]
   12144:	4694      	mov	ip, r2
   12146:	4463      	add	r3, ip
   12148:	616b      	str	r3, [r5, #20]
   1214a:	7823      	ldrb	r3, [r4, #0]
   1214c:	2b00      	cmp	r3, #0
   1214e:	d100      	bne.n	12152 <_svfiprintf_r+0x7e>
   12150:	e0ab      	b.n	122aa <_svfiprintf_r+0x1d6>
   12152:	2201      	movs	r2, #1
   12154:	2300      	movs	r3, #0
   12156:	4252      	negs	r2, r2
   12158:	606a      	str	r2, [r5, #4]
   1215a:	a902      	add	r1, sp, #8
   1215c:	3254      	adds	r2, #84	; 0x54
   1215e:	1852      	adds	r2, r2, r1
   12160:	3401      	adds	r4, #1
   12162:	602b      	str	r3, [r5, #0]
   12164:	60eb      	str	r3, [r5, #12]
   12166:	60ab      	str	r3, [r5, #8]
   12168:	7013      	strb	r3, [r2, #0]
   1216a:	65ab      	str	r3, [r5, #88]	; 0x58
   1216c:	4e53      	ldr	r6, [pc, #332]	; (122bc <_svfiprintf_r+0x1e8>)
   1216e:	7821      	ldrb	r1, [r4, #0]
   12170:	2205      	movs	r2, #5
   12172:	0030      	movs	r0, r6
   12174:	f7ff ff06 	bl	11f84 <memchr>
   12178:	2800      	cmp	r0, #0
   1217a:	d007      	beq.n	1218c <_svfiprintf_r+0xb8>
   1217c:	2301      	movs	r3, #1
   1217e:	1b80      	subs	r0, r0, r6
   12180:	4083      	lsls	r3, r0
   12182:	682a      	ldr	r2, [r5, #0]
   12184:	3401      	adds	r4, #1
   12186:	4313      	orrs	r3, r2
   12188:	602b      	str	r3, [r5, #0]
   1218a:	e7ef      	b.n	1216c <_svfiprintf_r+0x98>
   1218c:	682b      	ldr	r3, [r5, #0]
   1218e:	06da      	lsls	r2, r3, #27
   12190:	d504      	bpl.n	1219c <_svfiprintf_r+0xc8>
   12192:	2253      	movs	r2, #83	; 0x53
   12194:	2120      	movs	r1, #32
   12196:	a802      	add	r0, sp, #8
   12198:	1812      	adds	r2, r2, r0
   1219a:	7011      	strb	r1, [r2, #0]
   1219c:	071a      	lsls	r2, r3, #28
   1219e:	d504      	bpl.n	121aa <_svfiprintf_r+0xd6>
   121a0:	2253      	movs	r2, #83	; 0x53
   121a2:	212b      	movs	r1, #43	; 0x2b
   121a4:	a802      	add	r0, sp, #8
   121a6:	1812      	adds	r2, r2, r0
   121a8:	7011      	strb	r1, [r2, #0]
   121aa:	7822      	ldrb	r2, [r4, #0]
   121ac:	2a2a      	cmp	r2, #42	; 0x2a
   121ae:	d003      	beq.n	121b8 <_svfiprintf_r+0xe4>
   121b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   121b2:	2000      	movs	r0, #0
   121b4:	210a      	movs	r1, #10
   121b6:	e00e      	b.n	121d6 <_svfiprintf_r+0x102>
   121b8:	9a05      	ldr	r2, [sp, #20]
   121ba:	1d11      	adds	r1, r2, #4
   121bc:	6812      	ldr	r2, [r2, #0]
   121be:	9105      	str	r1, [sp, #20]
   121c0:	2a00      	cmp	r2, #0
   121c2:	db01      	blt.n	121c8 <_svfiprintf_r+0xf4>
   121c4:	9209      	str	r2, [sp, #36]	; 0x24
   121c6:	e004      	b.n	121d2 <_svfiprintf_r+0xfe>
   121c8:	4252      	negs	r2, r2
   121ca:	60ea      	str	r2, [r5, #12]
   121cc:	2202      	movs	r2, #2
   121ce:	4313      	orrs	r3, r2
   121d0:	602b      	str	r3, [r5, #0]
   121d2:	3401      	adds	r4, #1
   121d4:	e00b      	b.n	121ee <_svfiprintf_r+0x11a>
   121d6:	7822      	ldrb	r2, [r4, #0]
   121d8:	3a30      	subs	r2, #48	; 0x30
   121da:	2a09      	cmp	r2, #9
   121dc:	d804      	bhi.n	121e8 <_svfiprintf_r+0x114>
   121de:	434b      	muls	r3, r1
   121e0:	3401      	adds	r4, #1
   121e2:	189b      	adds	r3, r3, r2
   121e4:	2001      	movs	r0, #1
   121e6:	e7f6      	b.n	121d6 <_svfiprintf_r+0x102>
   121e8:	2800      	cmp	r0, #0
   121ea:	d000      	beq.n	121ee <_svfiprintf_r+0x11a>
   121ec:	9309      	str	r3, [sp, #36]	; 0x24
   121ee:	7823      	ldrb	r3, [r4, #0]
   121f0:	2b2e      	cmp	r3, #46	; 0x2e
   121f2:	d11e      	bne.n	12232 <_svfiprintf_r+0x15e>
   121f4:	7863      	ldrb	r3, [r4, #1]
   121f6:	2b2a      	cmp	r3, #42	; 0x2a
   121f8:	d10a      	bne.n	12210 <_svfiprintf_r+0x13c>
   121fa:	9b05      	ldr	r3, [sp, #20]
   121fc:	3402      	adds	r4, #2
   121fe:	1d1a      	adds	r2, r3, #4
   12200:	681b      	ldr	r3, [r3, #0]
   12202:	9205      	str	r2, [sp, #20]
   12204:	2b00      	cmp	r3, #0
   12206:	da01      	bge.n	1220c <_svfiprintf_r+0x138>
   12208:	2301      	movs	r3, #1
   1220a:	425b      	negs	r3, r3
   1220c:	9307      	str	r3, [sp, #28]
   1220e:	e010      	b.n	12232 <_svfiprintf_r+0x15e>
   12210:	2300      	movs	r3, #0
   12212:	200a      	movs	r0, #10
   12214:	001a      	movs	r2, r3
   12216:	3401      	adds	r4, #1
   12218:	606b      	str	r3, [r5, #4]
   1221a:	7821      	ldrb	r1, [r4, #0]
   1221c:	3930      	subs	r1, #48	; 0x30
   1221e:	2909      	cmp	r1, #9
   12220:	d804      	bhi.n	1222c <_svfiprintf_r+0x158>
   12222:	4342      	muls	r2, r0
   12224:	3401      	adds	r4, #1
   12226:	1852      	adds	r2, r2, r1
   12228:	2301      	movs	r3, #1
   1222a:	e7f6      	b.n	1221a <_svfiprintf_r+0x146>
   1222c:	2b00      	cmp	r3, #0
   1222e:	d000      	beq.n	12232 <_svfiprintf_r+0x15e>
   12230:	9207      	str	r2, [sp, #28]
   12232:	4e23      	ldr	r6, [pc, #140]	; (122c0 <_svfiprintf_r+0x1ec>)
   12234:	7821      	ldrb	r1, [r4, #0]
   12236:	2203      	movs	r2, #3
   12238:	0030      	movs	r0, r6
   1223a:	f7ff fea3 	bl	11f84 <memchr>
   1223e:	2800      	cmp	r0, #0
   12240:	d006      	beq.n	12250 <_svfiprintf_r+0x17c>
   12242:	2340      	movs	r3, #64	; 0x40
   12244:	1b80      	subs	r0, r0, r6
   12246:	4083      	lsls	r3, r0
   12248:	682a      	ldr	r2, [r5, #0]
   1224a:	3401      	adds	r4, #1
   1224c:	4313      	orrs	r3, r2
   1224e:	602b      	str	r3, [r5, #0]
   12250:	7821      	ldrb	r1, [r4, #0]
   12252:	2206      	movs	r2, #6
   12254:	481b      	ldr	r0, [pc, #108]	; (122c4 <_svfiprintf_r+0x1f0>)
   12256:	1c66      	adds	r6, r4, #1
   12258:	7629      	strb	r1, [r5, #24]
   1225a:	f7ff fe93 	bl	11f84 <memchr>
   1225e:	2800      	cmp	r0, #0
   12260:	d012      	beq.n	12288 <_svfiprintf_r+0x1b4>
   12262:	4b19      	ldr	r3, [pc, #100]	; (122c8 <_svfiprintf_r+0x1f4>)
   12264:	2b00      	cmp	r3, #0
   12266:	d106      	bne.n	12276 <_svfiprintf_r+0x1a2>
   12268:	2207      	movs	r2, #7
   1226a:	9b05      	ldr	r3, [sp, #20]
   1226c:	3307      	adds	r3, #7
   1226e:	4393      	bics	r3, r2
   12270:	3308      	adds	r3, #8
   12272:	9305      	str	r3, [sp, #20]
   12274:	e014      	b.n	122a0 <_svfiprintf_r+0x1cc>
   12276:	ab05      	add	r3, sp, #20
   12278:	9300      	str	r3, [sp, #0]
   1227a:	003a      	movs	r2, r7
   1227c:	4b13      	ldr	r3, [pc, #76]	; (122cc <_svfiprintf_r+0x1f8>)
   1227e:	0029      	movs	r1, r5
   12280:	9802      	ldr	r0, [sp, #8]
   12282:	e000      	b.n	12286 <_svfiprintf_r+0x1b2>
   12284:	bf00      	nop
   12286:	e007      	b.n	12298 <_svfiprintf_r+0x1c4>
   12288:	ab05      	add	r3, sp, #20
   1228a:	9300      	str	r3, [sp, #0]
   1228c:	003a      	movs	r2, r7
   1228e:	4b0f      	ldr	r3, [pc, #60]	; (122cc <_svfiprintf_r+0x1f8>)
   12290:	0029      	movs	r1, r5
   12292:	9802      	ldr	r0, [sp, #8]
   12294:	f7fe fffe 	bl	11294 <_printf_i>
   12298:	9003      	str	r0, [sp, #12]
   1229a:	9b03      	ldr	r3, [sp, #12]
   1229c:	3301      	adds	r3, #1
   1229e:	d004      	beq.n	122aa <_svfiprintf_r+0x1d6>
   122a0:	696b      	ldr	r3, [r5, #20]
   122a2:	9a03      	ldr	r2, [sp, #12]
   122a4:	189b      	adds	r3, r3, r2
   122a6:	616b      	str	r3, [r5, #20]
   122a8:	e735      	b.n	12116 <_svfiprintf_r+0x42>
   122aa:	89bb      	ldrh	r3, [r7, #12]
   122ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   122ae:	065b      	lsls	r3, r3, #25
   122b0:	d501      	bpl.n	122b6 <_svfiprintf_r+0x1e2>
   122b2:	2001      	movs	r0, #1
   122b4:	4240      	negs	r0, r0
   122b6:	b01f      	add	sp, #124	; 0x7c
   122b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122ba:	46c0      	nop			; (mov r8, r8)
   122bc:	0001411c 	.word	0x0001411c
   122c0:	00014122 	.word	0x00014122
   122c4:	00014126 	.word	0x00014126
   122c8:	00000000 	.word	0x00000000
   122cc:	00012011 	.word	0x00012011

000122d0 <_putc_r>:
   122d0:	b570      	push	{r4, r5, r6, lr}
   122d2:	0006      	movs	r6, r0
   122d4:	000d      	movs	r5, r1
   122d6:	0014      	movs	r4, r2
   122d8:	2800      	cmp	r0, #0
   122da:	d004      	beq.n	122e6 <_putc_r+0x16>
   122dc:	6983      	ldr	r3, [r0, #24]
   122de:	2b00      	cmp	r3, #0
   122e0:	d101      	bne.n	122e6 <_putc_r+0x16>
   122e2:	f7ff fd57 	bl	11d94 <__sinit>
   122e6:	4b12      	ldr	r3, [pc, #72]	; (12330 <_putc_r+0x60>)
   122e8:	429c      	cmp	r4, r3
   122ea:	d101      	bne.n	122f0 <_putc_r+0x20>
   122ec:	6874      	ldr	r4, [r6, #4]
   122ee:	e008      	b.n	12302 <_putc_r+0x32>
   122f0:	4b10      	ldr	r3, [pc, #64]	; (12334 <_putc_r+0x64>)
   122f2:	429c      	cmp	r4, r3
   122f4:	d101      	bne.n	122fa <_putc_r+0x2a>
   122f6:	68b4      	ldr	r4, [r6, #8]
   122f8:	e003      	b.n	12302 <_putc_r+0x32>
   122fa:	4b0f      	ldr	r3, [pc, #60]	; (12338 <_putc_r+0x68>)
   122fc:	429c      	cmp	r4, r3
   122fe:	d100      	bne.n	12302 <_putc_r+0x32>
   12300:	68f4      	ldr	r4, [r6, #12]
   12302:	68a3      	ldr	r3, [r4, #8]
   12304:	3b01      	subs	r3, #1
   12306:	60a3      	str	r3, [r4, #8]
   12308:	2b00      	cmp	r3, #0
   1230a:	da05      	bge.n	12318 <_putc_r+0x48>
   1230c:	69a2      	ldr	r2, [r4, #24]
   1230e:	4293      	cmp	r3, r2
   12310:	db08      	blt.n	12324 <_putc_r+0x54>
   12312:	b2eb      	uxtb	r3, r5
   12314:	2b0a      	cmp	r3, #10
   12316:	d005      	beq.n	12324 <_putc_r+0x54>
   12318:	6823      	ldr	r3, [r4, #0]
   1231a:	b2e8      	uxtb	r0, r5
   1231c:	1c5a      	adds	r2, r3, #1
   1231e:	6022      	str	r2, [r4, #0]
   12320:	701d      	strb	r5, [r3, #0]
   12322:	e004      	b.n	1232e <_putc_r+0x5e>
   12324:	0022      	movs	r2, r4
   12326:	0029      	movs	r1, r5
   12328:	0030      	movs	r0, r6
   1232a:	f7ff fb69 	bl	11a00 <__swbuf_r>
   1232e:	bd70      	pop	{r4, r5, r6, pc}
   12330:	00014250 	.word	0x00014250
   12334:	00014270 	.word	0x00014270
   12338:	00014290 	.word	0x00014290

0001233c <_raise_r>:
   1233c:	b570      	push	{r4, r5, r6, lr}
   1233e:	0004      	movs	r4, r0
   12340:	1e0d      	subs	r5, r1, #0
   12342:	2d1f      	cmp	r5, #31
   12344:	d904      	bls.n	12350 <_raise_r+0x14>
   12346:	2316      	movs	r3, #22
   12348:	6003      	str	r3, [r0, #0]
   1234a:	2001      	movs	r0, #1
   1234c:	4240      	negs	r0, r0
   1234e:	e01e      	b.n	1238e <_raise_r+0x52>
   12350:	6c42      	ldr	r2, [r0, #68]	; 0x44
   12352:	2a00      	cmp	r2, #0
   12354:	d004      	beq.n	12360 <_raise_r+0x24>
   12356:	008b      	lsls	r3, r1, #2
   12358:	18d2      	adds	r2, r2, r3
   1235a:	6813      	ldr	r3, [r2, #0]
   1235c:	2b00      	cmp	r3, #0
   1235e:	d108      	bne.n	12372 <_raise_r+0x36>
   12360:	0020      	movs	r0, r4
   12362:	f000 f831 	bl	123c8 <_getpid_r>
   12366:	002a      	movs	r2, r5
   12368:	0001      	movs	r1, r0
   1236a:	0020      	movs	r0, r4
   1236c:	f000 f81a 	bl	123a4 <_kill_r>
   12370:	e00d      	b.n	1238e <_raise_r+0x52>
   12372:	2000      	movs	r0, #0
   12374:	2b01      	cmp	r3, #1
   12376:	d00a      	beq.n	1238e <_raise_r+0x52>
   12378:	1c59      	adds	r1, r3, #1
   1237a:	d103      	bne.n	12384 <_raise_r+0x48>
   1237c:	3317      	adds	r3, #23
   1237e:	6023      	str	r3, [r4, #0]
   12380:	3001      	adds	r0, #1
   12382:	e004      	b.n	1238e <_raise_r+0x52>
   12384:	2400      	movs	r4, #0
   12386:	0028      	movs	r0, r5
   12388:	6014      	str	r4, [r2, #0]
   1238a:	4798      	blx	r3
   1238c:	0020      	movs	r0, r4
   1238e:	bd70      	pop	{r4, r5, r6, pc}

00012390 <raise>:
   12390:	b510      	push	{r4, lr}
   12392:	4b03      	ldr	r3, [pc, #12]	; (123a0 <raise+0x10>)
   12394:	0001      	movs	r1, r0
   12396:	6818      	ldr	r0, [r3, #0]
   12398:	f7ff ffd0 	bl	1233c <_raise_r>
   1239c:	bd10      	pop	{r4, pc}
   1239e:	46c0      	nop			; (mov r8, r8)
   123a0:	20000098 	.word	0x20000098

000123a4 <_kill_r>:
   123a4:	2300      	movs	r3, #0
   123a6:	b570      	push	{r4, r5, r6, lr}
   123a8:	4c06      	ldr	r4, [pc, #24]	; (123c4 <_kill_r+0x20>)
   123aa:	0005      	movs	r5, r0
   123ac:	0008      	movs	r0, r1
   123ae:	0011      	movs	r1, r2
   123b0:	6023      	str	r3, [r4, #0]
   123b2:	f7fa fe01 	bl	cfb8 <_kill>
   123b6:	1c43      	adds	r3, r0, #1
   123b8:	d103      	bne.n	123c2 <_kill_r+0x1e>
   123ba:	6823      	ldr	r3, [r4, #0]
   123bc:	2b00      	cmp	r3, #0
   123be:	d000      	beq.n	123c2 <_kill_r+0x1e>
   123c0:	602b      	str	r3, [r5, #0]
   123c2:	bd70      	pop	{r4, r5, r6, pc}
   123c4:	200047fc 	.word	0x200047fc

000123c8 <_getpid_r>:
   123c8:	b510      	push	{r4, lr}
   123ca:	f7fa fdff 	bl	cfcc <_getpid>
   123ce:	bd10      	pop	{r4, pc}

000123d0 <__sread>:
   123d0:	b570      	push	{r4, r5, r6, lr}
   123d2:	000c      	movs	r4, r1
   123d4:	250e      	movs	r5, #14
   123d6:	5f49      	ldrsh	r1, [r1, r5]
   123d8:	f000 f8b0 	bl	1253c <_read_r>
   123dc:	2800      	cmp	r0, #0
   123de:	db03      	blt.n	123e8 <__sread+0x18>
   123e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   123e2:	181b      	adds	r3, r3, r0
   123e4:	6563      	str	r3, [r4, #84]	; 0x54
   123e6:	e003      	b.n	123f0 <__sread+0x20>
   123e8:	89a2      	ldrh	r2, [r4, #12]
   123ea:	4b02      	ldr	r3, [pc, #8]	; (123f4 <__sread+0x24>)
   123ec:	4013      	ands	r3, r2
   123ee:	81a3      	strh	r3, [r4, #12]
   123f0:	bd70      	pop	{r4, r5, r6, pc}
   123f2:	46c0      	nop			; (mov r8, r8)
   123f4:	ffffefff 	.word	0xffffefff

000123f8 <__swrite>:
   123f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   123fa:	001f      	movs	r7, r3
   123fc:	898b      	ldrh	r3, [r1, #12]
   123fe:	0005      	movs	r5, r0
   12400:	000c      	movs	r4, r1
   12402:	0016      	movs	r6, r2
   12404:	05db      	lsls	r3, r3, #23
   12406:	d505      	bpl.n	12414 <__swrite+0x1c>
   12408:	230e      	movs	r3, #14
   1240a:	5ec9      	ldrsh	r1, [r1, r3]
   1240c:	2200      	movs	r2, #0
   1240e:	2302      	movs	r3, #2
   12410:	f000 f874 	bl	124fc <_lseek_r>
   12414:	89a2      	ldrh	r2, [r4, #12]
   12416:	4b05      	ldr	r3, [pc, #20]	; (1242c <__swrite+0x34>)
   12418:	0028      	movs	r0, r5
   1241a:	4013      	ands	r3, r2
   1241c:	81a3      	strh	r3, [r4, #12]
   1241e:	0032      	movs	r2, r6
   12420:	230e      	movs	r3, #14
   12422:	5ee1      	ldrsh	r1, [r4, r3]
   12424:	003b      	movs	r3, r7
   12426:	f000 f81f 	bl	12468 <_write_r>
   1242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1242c:	ffffefff 	.word	0xffffefff

00012430 <__sseek>:
   12430:	b570      	push	{r4, r5, r6, lr}
   12432:	000c      	movs	r4, r1
   12434:	250e      	movs	r5, #14
   12436:	5f49      	ldrsh	r1, [r1, r5]
   12438:	f000 f860 	bl	124fc <_lseek_r>
   1243c:	89a3      	ldrh	r3, [r4, #12]
   1243e:	1c42      	adds	r2, r0, #1
   12440:	d103      	bne.n	1244a <__sseek+0x1a>
   12442:	4a05      	ldr	r2, [pc, #20]	; (12458 <__sseek+0x28>)
   12444:	4013      	ands	r3, r2
   12446:	81a3      	strh	r3, [r4, #12]
   12448:	e004      	b.n	12454 <__sseek+0x24>
   1244a:	2280      	movs	r2, #128	; 0x80
   1244c:	0152      	lsls	r2, r2, #5
   1244e:	4313      	orrs	r3, r2
   12450:	81a3      	strh	r3, [r4, #12]
   12452:	6560      	str	r0, [r4, #84]	; 0x54
   12454:	bd70      	pop	{r4, r5, r6, pc}
   12456:	46c0      	nop			; (mov r8, r8)
   12458:	ffffefff 	.word	0xffffefff

0001245c <__sclose>:
   1245c:	b510      	push	{r4, lr}
   1245e:	230e      	movs	r3, #14
   12460:	5ec9      	ldrsh	r1, [r1, r3]
   12462:	f000 f815 	bl	12490 <_close_r>
   12466:	bd10      	pop	{r4, pc}

00012468 <_write_r>:
   12468:	b570      	push	{r4, r5, r6, lr}
   1246a:	0005      	movs	r5, r0
   1246c:	0008      	movs	r0, r1
   1246e:	0011      	movs	r1, r2
   12470:	2200      	movs	r2, #0
   12472:	4c06      	ldr	r4, [pc, #24]	; (1248c <_write_r+0x24>)
   12474:	6022      	str	r2, [r4, #0]
   12476:	001a      	movs	r2, r3
   12478:	f7fa fd12 	bl	cea0 <_write>
   1247c:	1c43      	adds	r3, r0, #1
   1247e:	d103      	bne.n	12488 <_write_r+0x20>
   12480:	6823      	ldr	r3, [r4, #0]
   12482:	2b00      	cmp	r3, #0
   12484:	d000      	beq.n	12488 <_write_r+0x20>
   12486:	602b      	str	r3, [r5, #0]
   12488:	bd70      	pop	{r4, r5, r6, pc}
   1248a:	46c0      	nop			; (mov r8, r8)
   1248c:	200047fc 	.word	0x200047fc

00012490 <_close_r>:
   12490:	2300      	movs	r3, #0
   12492:	b570      	push	{r4, r5, r6, lr}
   12494:	4c06      	ldr	r4, [pc, #24]	; (124b0 <_close_r+0x20>)
   12496:	0005      	movs	r5, r0
   12498:	0008      	movs	r0, r1
   1249a:	6023      	str	r3, [r4, #0]
   1249c:	f7fa fd54 	bl	cf48 <_close>
   124a0:	1c43      	adds	r3, r0, #1
   124a2:	d103      	bne.n	124ac <_close_r+0x1c>
   124a4:	6823      	ldr	r3, [r4, #0]
   124a6:	2b00      	cmp	r3, #0
   124a8:	d000      	beq.n	124ac <_close_r+0x1c>
   124aa:	602b      	str	r3, [r5, #0]
   124ac:	bd70      	pop	{r4, r5, r6, pc}
   124ae:	46c0      	nop			; (mov r8, r8)
   124b0:	200047fc 	.word	0x200047fc

000124b4 <_fstat_r>:
   124b4:	2300      	movs	r3, #0
   124b6:	b570      	push	{r4, r5, r6, lr}
   124b8:	4c06      	ldr	r4, [pc, #24]	; (124d4 <_fstat_r+0x20>)
   124ba:	0005      	movs	r5, r0
   124bc:	0008      	movs	r0, r1
   124be:	0011      	movs	r1, r2
   124c0:	6023      	str	r3, [r4, #0]
   124c2:	f7fa fd4b 	bl	cf5c <_fstat>
   124c6:	1c43      	adds	r3, r0, #1
   124c8:	d103      	bne.n	124d2 <_fstat_r+0x1e>
   124ca:	6823      	ldr	r3, [r4, #0]
   124cc:	2b00      	cmp	r3, #0
   124ce:	d000      	beq.n	124d2 <_fstat_r+0x1e>
   124d0:	602b      	str	r3, [r5, #0]
   124d2:	bd70      	pop	{r4, r5, r6, pc}
   124d4:	200047fc 	.word	0x200047fc

000124d8 <_isatty_r>:
   124d8:	2300      	movs	r3, #0
   124da:	b570      	push	{r4, r5, r6, lr}
   124dc:	4c06      	ldr	r4, [pc, #24]	; (124f8 <_isatty_r+0x20>)
   124de:	0005      	movs	r5, r0
   124e0:	0008      	movs	r0, r1
   124e2:	6023      	str	r3, [r4, #0]
   124e4:	f7fa fd48 	bl	cf78 <_isatty>
   124e8:	1c43      	adds	r3, r0, #1
   124ea:	d103      	bne.n	124f4 <_isatty_r+0x1c>
   124ec:	6823      	ldr	r3, [r4, #0]
   124ee:	2b00      	cmp	r3, #0
   124f0:	d000      	beq.n	124f4 <_isatty_r+0x1c>
   124f2:	602b      	str	r3, [r5, #0]
   124f4:	bd70      	pop	{r4, r5, r6, pc}
   124f6:	46c0      	nop			; (mov r8, r8)
   124f8:	200047fc 	.word	0x200047fc

000124fc <_lseek_r>:
   124fc:	b570      	push	{r4, r5, r6, lr}
   124fe:	0005      	movs	r5, r0
   12500:	0008      	movs	r0, r1
   12502:	0011      	movs	r1, r2
   12504:	2200      	movs	r2, #0
   12506:	4c06      	ldr	r4, [pc, #24]	; (12520 <_lseek_r+0x24>)
   12508:	6022      	str	r2, [r4, #0]
   1250a:	001a      	movs	r2, r3
   1250c:	f7fa fd3e 	bl	cf8c <_lseek>
   12510:	1c43      	adds	r3, r0, #1
   12512:	d103      	bne.n	1251c <_lseek_r+0x20>
   12514:	6823      	ldr	r3, [r4, #0]
   12516:	2b00      	cmp	r3, #0
   12518:	d000      	beq.n	1251c <_lseek_r+0x20>
   1251a:	602b      	str	r3, [r5, #0]
   1251c:	bd70      	pop	{r4, r5, r6, pc}
   1251e:	46c0      	nop			; (mov r8, r8)
   12520:	200047fc 	.word	0x200047fc

00012524 <_malloc_usable_size_r>:
   12524:	1f0b      	subs	r3, r1, #4
   12526:	681a      	ldr	r2, [r3, #0]
   12528:	1f10      	subs	r0, r2, #4
   1252a:	2a00      	cmp	r2, #0
   1252c:	da04      	bge.n	12538 <_malloc_usable_size_r+0x14>
   1252e:	1889      	adds	r1, r1, r2
   12530:	3904      	subs	r1, #4
   12532:	680b      	ldr	r3, [r1, #0]
   12534:	18d0      	adds	r0, r2, r3
   12536:	3804      	subs	r0, #4
   12538:	4770      	bx	lr
	...

0001253c <_read_r>:
   1253c:	b570      	push	{r4, r5, r6, lr}
   1253e:	0005      	movs	r5, r0
   12540:	0008      	movs	r0, r1
   12542:	0011      	movs	r1, r2
   12544:	2200      	movs	r2, #0
   12546:	4c06      	ldr	r4, [pc, #24]	; (12560 <_read_r+0x24>)
   12548:	6022      	str	r2, [r4, #0]
   1254a:	001a      	movs	r2, r3
   1254c:	f7fa fc7e 	bl	ce4c <_read>
   12550:	1c43      	adds	r3, r0, #1
   12552:	d103      	bne.n	1255c <_read_r+0x20>
   12554:	6823      	ldr	r3, [r4, #0]
   12556:	2b00      	cmp	r3, #0
   12558:	d000      	beq.n	1255c <_read_r+0x20>
   1255a:	602b      	str	r3, [r5, #0]
   1255c:	bd70      	pop	{r4, r5, r6, pc}
   1255e:	46c0      	nop			; (mov r8, r8)
   12560:	200047fc 	.word	0x200047fc
   12564:	0000040a 	.word	0x0000040a
   12568:	000003fe 	.word	0x000003fe
   1256c:	000003fe 	.word	0x000003fe
   12570:	000003fe 	.word	0x000003fe
   12574:	000003fe 	.word	0x000003fe
   12578:	000003fe 	.word	0x000003fe
   1257c:	000003fe 	.word	0x000003fe
   12580:	000003fe 	.word	0x000003fe
   12584:	000003fe 	.word	0x000003fe
   12588:	000003fe 	.word	0x000003fe
   1258c:	000003fe 	.word	0x000003fe
   12590:	000003fe 	.word	0x000003fe
   12594:	000003fe 	.word	0x000003fe
   12598:	0000040a 	.word	0x0000040a
   1259c:	000003fe 	.word	0x000003fe
   125a0:	000003fe 	.word	0x000003fe
   125a4:	000003fe 	.word	0x000003fe
   125a8:	000003fe 	.word	0x000003fe
   125ac:	000003fe 	.word	0x000003fe
   125b0:	000003fe 	.word	0x000003fe
   125b4:	000003fe 	.word	0x000003fe
   125b8:	000003fe 	.word	0x000003fe
   125bc:	000003fe 	.word	0x000003fe
   125c0:	000003fe 	.word	0x000003fe
   125c4:	000003fe 	.word	0x000003fe
   125c8:	000003fe 	.word	0x000003fe
   125cc:	000003fe 	.word	0x000003fe
   125d0:	000003fe 	.word	0x000003fe
   125d4:	000003fe 	.word	0x000003fe
   125d8:	000003fe 	.word	0x000003fe
   125dc:	000003fe 	.word	0x000003fe
   125e0:	000003fe 	.word	0x000003fe
   125e4:	000003fe 	.word	0x000003fe
   125e8:	000003fe 	.word	0x000003fe
   125ec:	000003fe 	.word	0x000003fe
   125f0:	000003fe 	.word	0x000003fe
   125f4:	000003fe 	.word	0x000003fe
   125f8:	000003fe 	.word	0x000003fe
   125fc:	000003fe 	.word	0x000003fe
   12600:	000003fe 	.word	0x000003fe
   12604:	000003fe 	.word	0x000003fe
   12608:	000003fe 	.word	0x000003fe
   1260c:	000003fe 	.word	0x000003fe
   12610:	000003fe 	.word	0x000003fe
   12614:	000003fe 	.word	0x000003fe
   12618:	000003fe 	.word	0x000003fe
   1261c:	000003fe 	.word	0x000003fe
   12620:	000003fe 	.word	0x000003fe
   12624:	000003fe 	.word	0x000003fe
   12628:	000003fe 	.word	0x000003fe
   1262c:	000003fe 	.word	0x000003fe
   12630:	000003fe 	.word	0x000003fe
   12634:	000003fe 	.word	0x000003fe
   12638:	000003fe 	.word	0x000003fe
   1263c:	000003fe 	.word	0x000003fe
   12640:	000003fe 	.word	0x000003fe
   12644:	000003fe 	.word	0x000003fe
   12648:	000003fe 	.word	0x000003fe
   1264c:	0000040a 	.word	0x0000040a
   12650:	000003fe 	.word	0x000003fe
   12654:	000003fe 	.word	0x000003fe
   12658:	000003fe 	.word	0x000003fe
   1265c:	000003fe 	.word	0x000003fe
   12660:	000003fe 	.word	0x000003fe
   12664:	0000040a 	.word	0x0000040a
   12668:	000003fe 	.word	0x000003fe
   1266c:	000003fe 	.word	0x000003fe
   12670:	000003fe 	.word	0x000003fe
   12674:	0000040a 	.word	0x0000040a
   12678:	000003fe 	.word	0x000003fe
   1267c:	000003fe 	.word	0x000003fe
   12680:	000003fe 	.word	0x000003fe
   12684:	000003fe 	.word	0x000003fe
   12688:	000003fe 	.word	0x000003fe
   1268c:	000003fe 	.word	0x000003fe
   12690:	000003fe 	.word	0x000003fe
   12694:	0000040a 	.word	0x0000040a
   12698:	000003fe 	.word	0x000003fe
   1269c:	000003fe 	.word	0x000003fe
   126a0:	000003fe 	.word	0x000003fe
   126a4:	0000040a 	.word	0x0000040a
   126a8:	000003fe 	.word	0x000003fe
   126ac:	0000040a 	.word	0x0000040a
   126b0:	00000354 	.word	0x00000354

000126b4 <PubNubPublishKey>:
   126b4:	6f6d6564 00000000                       demo....

000126bc <PubNubSubscribeKey>:
   126bc:	6f6d6564 00000000 706d6574 7465735f     demo....temp_set
   126cc:	6e696f70 00000074 6b636f73 725f7465     point...socket_r
   126dc:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
   126ec:	766c6f73 77206465 20687469 25205049     solved with IP %
   126fc:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
   1270c:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
   1271c:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
   1272c:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
   1273c:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
   1274c:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
   1275c:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
   1276c:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
   1277c:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
   1278c:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
   1279c:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
   127ac:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
   127bc:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
   127cc:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
   127dc:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
   127ec:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   127fc:	2074696e 6c6c6163 72726520 0d21726f     nit call error!.
   1280c:	00000000 6e69616d 414d203a 64612043     ....main: MAC ad
   1281c:	73657264 75662073 62206573 68207469     dress fuse bit h
   1282c:	6e207361 6220746f 206e6565 666e6f63     as not been conf
   1283c:	72756769 0d216465 00000000 6e69616d     igured!.....main
   1284c:	7355203a 326d2065 69775f6d 735f6966     : Use m2m_wifi_s
   1285c:	6d5f7465 615f6361 65726464 29287373     et_mac_address()
   1286c:	49504120 206f7420 20746573 2043414d      API to set MAC 
   1287c:	72646461 20737365 20616976 74666f73     address via soft
   1288c:	65726177 00000d2e 0000000d 6e69616d     ware........main
   1289c:	7550203a 62754e62 6e6f6320 75676966     : PubNub configu
   128ac:	20646572 68746977 6c6f6620 69776f6c     red with followi
   128bc:	7320676e 69747465 3a73676e 0000000d     ng settings:....
   128cc:	6e69616d 2d20203a 62755020 6873696c     main:  - Publish
   128dc:	79656b20 2522203a 202c2273 73627553      key: "%s", Subs
   128ec:	62697263 656b2065 22203a79 2c227325     cribe key: "%s",
   128fc:	61684320 6c656e6e 2522203a 0d2e2273      Channel: "%s"..
   1290c:	000a0d0a 6e69616d 6957203a 2069462d     ....main: Wi-Fi 
   1291c:	6e6e6f63 69746365 7420676e 5041206f     connecting to AP
   1292c:	69737520 6820676e 63647261 6465646f      using hardcoded
   1293c:	65726320 746e6564 736c6169 0d2e2e2e      credentials....
   1294c:	00000000 6564227b 65636976 25223a22     ....{"device":"%
   1295c:	202c2273 74617722 745f7265 22706d65     s", "water_temp"
   1296c:	6425223a 22202c22 5f746573 706d6574     :"%d", "set_temp
   1297c:	25223a22 202c2264 67656422 73656572     ":"%d", "degrees
   1298c:	3a22465f 22642522 0000007d 6e69616d     _F":"%d"}...main
   1299c:	7573203a 72637362 20656269 6e657665     : subscribe even
   129ac:	50202c74 4f5f524e 00000d4b 69666977     t, PNR_OK...wifi
   129bc:	7361745f 73315f6b 6f63203a 20646c75     _task_1s: could 
   129cc:	20746f6e 6f6c6c61 65746163 6d656d20     not allocate mem
   129dc:	2079726f 20726f66 656b6f74 0000736e     ory for tokens..
   129ec:	69766564 00006563                       device..

000129f4 <wifi_handlers>:
   129f4:	000126c4 0000000e 000007c1 00000000     .&..............
	...
   12a0c:	42002c00 42003000 42003400 001c1c1b     .,.B.0.B.4.B....
   12a1c:	10000800 00002000                       ..... ..

00012a24 <num_to_seg>:
   12a24:	4f5b063f 077d6d66 00006f7f              ?.[Ofm}..o..

00012a30 <display_handlers>:
   12a30:	00000001 0000170d 00000004 0000179d     ................
   12a40:	00000008 00001835 00000010 00001899     ....5...........
   12a50:	00000020 00001935 00000040 000019c9      ...5...@.......
   12a60:	00000080 00001a41 00000002 00001765     ....A.......e...
	...
   12a78:	6f727245 55202172 6c62616e 6f742065     Error! Unable to
   12a88:	61657220 75622064 6e6f7474 61747320      read button sta
   12a98:	00737574                                tus.

00012a9c <water_temp_LUT>:
   12a9c:	00c50000 00c80001 00ca0002 00cc0003     ................
   12aac:	00ce0004 00d00005 00d20006 00d40007     ................
   12abc:	00d60008 00d90009 00db000a 00dd000b     ................
   12acc:	00e0000c 00e2000d 00e5000e 00e7000f     ................
   12adc:	00ea0010 00ed0011 00ef0012 00f20013     ................
   12aec:	00f50014 00f80015 00fb0016 00fe0017     ................
   12afc:	01010018 01040019 0108001a 010b001b     ................
   12b0c:	010f001c 0112001d 0116001e 011a001f     ................
   12b1c:	011e0020 01220021 01260022 012a0023      ...!.".".&.#.*.
   12b2c:	012e0024 01330025 01380026 013d0027     $...%.3.&.8.'.=.
   12b3c:	01410028 01460029 014b002a 0151002b     (.A.).F.*.K.+.Q.
   12b4c:	0157002c 015c002d 0162002e 0169002f     ,.W.-.\...b./.i.
   12b5c:	016f0030 01760031 017c0032 01840033     0.o.1.v.2.|.3...
   12b6c:	018b0034 01930035 019b0036 01a30037     4...5...6...7...
   12b7c:	01ac0038 01b50039 01be003a 01c8003b     8...9...:...;...
   12b8c:	01d2003c 01dd003d 01e8003e 01f4003f     <...=...>...?...
   12b9c:	02010040 020e0041 02180042 02230043     @...A...B...C.#.
   12bac:	022e0044 023a0045 02460046 02510047     D...E.:.F.F.G.Q.
   12bbc:	025c0048 02690049 0275004a 0282004b     H.\.I.i.J.u.K...
   12bcc:	0290004c 029e004d 02ad004e 02bc004f     L...M...N...O...
   12bdc:	02cc0050 02d90051 02e60052 02f40053     P...Q...R...S...
   12bec:	03020054 03100055 03200056 03300057     T...U...V. .W.0.
   12bfc:	03410058 03520059 0364005a 0372005b     X.A.Y.R.Z.d.[.r.
   12c0c:	0381005c 0390005d 039f005e 03af005f     \...]...^..._...
   12c1c:	03c00060 03d10061 03e30062 03f80063     `...a...b...c...
   12c2c:	040a0064 041d0065 04320066 04470067     d...e...f.2.g.G.
   12c3c:	045d0068 6b736174 6568545f 00006d72     h.].task_Therm..
   12c4c:	6c696146 74206465 7263206f 65746165     Failed to create
   12c5c:	73617420 68545f6b 616d7265 6874206c      task_Thermal th
   12c6c:	64616572 00000021 6c696146 74206465     read!...Failed t
   12c7c:	7263206f 65746165 65687420 735f6d72     o create therm_s
   12c8c:	00216d65 6c696166 74206465 6e69206f     em!.failed to in
   12c9c:	61697469 657a696c 43545720 38303536     itialize WTC6508
   12cac:	00000021 50504128 52452829 255b2952     !...(APP)(ERR)[%
   12cbc:	255b5d73 00005d64 61766e69 6564696c     s][%d]..invalide
   12ccc:	636f6920 6320746c 0000646d               ioclt cmd..

00012cd8 <__FUNCTION__.14919>:
   12cd8:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   12ce8:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   12cf8:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
   12d08:	6b617720 74207075 63206568 00706968      wakup the chip.
   12d18:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   12d28:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   12d38:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   12d48:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   12d58:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   12d68:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   12d78:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   12d88:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
   12d98:	6e692029 696c6176 72672064 2070756f     ) invalid group 
   12da8:	00004449 66696828 6f682029 61207473     ID..(hif) host a
   12db8:	64207070 276e6469 65732074 58522074     pp didn't set RX
   12dc8:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
   12dd8:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   12de8:	61462029 2065736c 65746e69 70757272     ) False interrup
   12df8:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   12e08:	74206c69 6552206f 69206461 7265746e     il to Read inter
   12e18:	74707572 67657220 00000000 66696828     rupt reg....(hif
   12e28:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
   12e38:	65687420 69686320 00000070 46494828      the chip...(HIF
   12e48:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   12e58:	746e6920 75727265 25207470 72742064      interrupt %d tr
   12e68:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   12e78:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   12e88:	72612064 656d7567 0000746e 20505041     d argument..APP 
   12e98:	75716552 65747365 69532064 6920657a     Requested Size i
   12ea8:	616c2073 72656772 61687420 6874206e     s larger than th
   12eb8:	65722065 65766963 75622064 72656666     e recived buffer
   12ec8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
   12ed8:	20505041 75716552 65747365 64412064     APP Requested Ad
   12ee8:	73657264 65622073 646e6f79 65687420     dress beyond the
   12ef8:	63657220 64657669 66756220 20726566      recived buffer 
   12f08:	72646461 20737365 20646e61 676e656c     address and leng
   12f18:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
   12f28:	00004cc8 00004ca0 00004c98 00004cb0     .L...L...L...L..
   12f38:	00004ca8 00004cc8 00004cb8 00004cc0     .L...L...L...L..

00012f48 <__FUNCTION__.12480>:
   12f48:	5f666968 646e6573 00000000              hif_send....

00012f54 <__FUNCTION__.12490>:
   12f54:	5f666968 00727369                       hif_isr.

00012f5c <__FUNCTION__.12496>:
   12f5c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00012f6c <__FUNCTION__.12511>:
   12f6c:	5f666968 65636572 00657669              hif_receive.

00012f78 <__FUNCTION__.12526>:
   12f78:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   12f88:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   12f98:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   12fa8:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   12fb8:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12fc8:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   12fd8:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   12fe8:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   12ff8:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   13008:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   13018:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   13028:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   13038:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   13048:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   13058:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   13068:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   13078:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   13088:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   13098:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   130a8:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   130b8:	2065626f 75716572 73747365 72657020     obe requests per
   130c8:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   130d8:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   130e8:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
   130f8:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   13108:	00000a75 206e694d 76697264 76207265     u...Min driver v
   13118:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   13128:	72727543 69726420 20726576 3a726576     Curr driver ver:
   13138:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
   13148:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
   13158:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
   13168:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   13178:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   13188:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   13198:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   131a8:	20706557 2079656b 65646e69 64252078     Wep key index %d
   131b8:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   131c8:	2079656b 676e656c 25206874 00000a64     key length %d...
   131d8:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   131e8:	656c2079 6874676e 00000000 65646e75     y length....unde
   131f8:	656e6966 65732064 79742063 00006570     fined sec type..
   13208:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   13218:	6420746f 6e696665 00006465 7473694c     ot defined..List
   13228:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   13238:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
   13248:	31312072 00000000 45574f50 41532052     r 11....POWER SA
   13258:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   13268:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   13278:	66754220 20726566 65637865 64656465      Buffer exceeded
   13288:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   13298:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   132a8:	00000000                                ....

000132ac <__FUNCTION__.12453>:
   132ac:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000132b8 <__FUNCTION__.12477>:
   132b8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000132c8 <__FUNCTION__.12505>:
   132c8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   132d8:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   132e8:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   132f8:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   13308:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   13318:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   13328:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   13338:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   13348:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   13358:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   13368:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   13378:	0000002e 6c696166 74206465 6564206f     ....failed to de
   13388:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   13398:	68772072 20656c69 74697277 20676e69     r while writing 
   133a8:	00676572 6f727245 68772072 20656c69     reg.Error while 
   133b8:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   133c8:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   133d8:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   133e8:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   133f8:	6f742064 69727720 00006574              d to write..

00013404 <__FUNCTION__.12290>:
   13404:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00013414 <__FUNCTION__.12384>:
   13414:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   13424:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13434:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   13444:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   13454:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   13464:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   13474:	6e65206f 656c6261 746e6920 75727265     o enable interru
   13484:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   13494:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   134a4:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   134b4:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   134c4:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   134d4:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   134e4:	75622074 00000073                       t bus...

000134ec <__FUNCTION__.12371>:
   134ec:	645f6d6e 695f7672 0074696e              nm_drv_init.

000134f8 <__FUNCTION__.12378>:
   134f8:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00013508 <crc7_syndrome_table>:
   13508:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   13518:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   13528:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   13538:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   13548:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   13558:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   13568:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   13578:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   13588:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   13598:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   135a8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   135b8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   135c8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   135d8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   135e8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   135f8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   13608:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   13618:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   13628:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   13638:	73756220 72726520 2e2e726f 0000002e      bus error......
   13648:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13658:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   13668:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   13678:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13688:	656c6961 61642064 72206174 6f707365     ailed data respo
   13698:	2065736e 64616572 7562202c 72652073     nse read, bus er
   136a8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   136b8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   136c8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   136d8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   136e8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   136f8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   13708:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   13718:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   13728:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   13738:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   13748:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   13758:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   13768:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   13778:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13788:	656c6961 61642064 62206174 6b636f6c     ailed data block
   13798:	69727720 202c6574 20737562 6f727265      write, bus erro
   137a8:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   137b8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   137c8:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   137d8:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   137e8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   137f8:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   13808:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   13818:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   13828:	65722064 6e6f7073 202c6573 74697277     d response, writ
   13838:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   13848:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13858:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   13868:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   13878:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   13888:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   13898:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   138a8:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   138b8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   138c8:	206b636f 61746164 69727720 2e2e6574     ock data write..
   138d8:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   138e8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   138f8:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   13908:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13918:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   13928:	64616572 67657220 30252820 2e297838     read reg (%08x).
   13938:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13948:	656c6961 61642064 72206174 2e646165     ailed data read.
   13958:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13968:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   13978:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   13988:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13998:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   139a8:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   139b8:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   139c8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   139d8:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   139e8:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   139f8:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   13a08:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   13a18:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   13a28:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   13a38:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13a48:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   13a58:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   13a68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   13a78:	6e692064 6e726574 77206c61 65746972     d internal write
   13a88:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   13a98:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   13aa8:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   13ab8:	64692070 002e2e2e 00006a24 00006a24     p id....$j..$j..
   13ac8:	00006ab4 00006978 000069be 000069e0     .j..xi...i...i..
   13ad8:	00006a66 00006a66 00006b20 0000694c     fj..fj.. k..Li..
   13ae8:	00006b7a 00006b7a 00006b7a 00006b7a     zk..zk..zk..zk..
   13af8:	00006a02                                .j..

00013afc <__FUNCTION__.11755>:
   13afc:	5f697073 00646d63                       spi_cmd.

00013b04 <__FUNCTION__.11763>:
   13b04:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00013b10 <__FUNCTION__.11779>:
   13b10:	5f697073 61746164 6165725f 00000064     spi_data_read...

00013b20 <__FUNCTION__.11794>:
   13b20:	5f697073 61746164 6972775f 00006574     spi_data_write..

00013b30 <__FUNCTION__.11804>:
   13b30:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00013b40 <__FUNCTION__.11812>:
   13b40:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00013b50 <__FUNCTION__.11821>:
   13b50:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00013b60 <__FUNCTION__.11829>:
   13b60:	735f6d6e 725f6970 00646165              nm_spi_read.

00013b6c <__FUNCTION__.11846>:
   13b6c:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   13b7c:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   13b8c:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   13b9c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   13bac:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   13bbc:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   13bcc:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   13bdc:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   13bec:	6b636f53 00007465 00000002 00000003     Socket..........
   13bfc:	00000028 00000029 00000004 00000005     (...)...........
   13c0c:	00000006 00000007 0000ffff 0000ffff     ................
   13c1c:	00000022 00000023 0000ffff 0000ffff     "...#...........
   13c2c:	0000ffff 0000ffff 00000008 00000009     ................
   13c3c:	0000000a 0000000b 00008f76 00008f7c     ........v...|...
   13c4c:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13c5c:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13c6c:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13c7c:	00008f7c 00008f7c 00008f54 00008f7c     |...|...T...|...
   13c8c:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13c9c:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13cac:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13cbc:	00008f7c 00008f7c 00008f70 00008f7c     |...|...p...|...
   13ccc:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13cdc:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13cec:	00008f7c 00008f7c 00008f7c 00008f7c     |...|...|...|...
   13cfc:	00008f7c 00008f7c 00008f6a 00008f12     |...|...j.......
   13d0c:	00008f28 00008f3e 00008ef8 42000800     (...>..........B
   13d1c:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   13d2c:	42001c00 0c0b0a09 00000e0d 0000be46     ...B........F...
   13d3c:	0000bebe 0000bebe 0000be64 0000be5e     ........d...^...
   13d4c:	0000be6a 0000be4c 0000be70 0000bea4     j...L...p.......
   13d5c:	0000c188 0000c1d8 0000c1d8 0000c1d4     ................
   13d6c:	0000c17a 0000c19a 0000c16a 0000c1ac     z.......j.......
   13d7c:	0000c1be 0000c226 0000c254 0000c254     ....&...T...T...
   13d8c:	0000c250 0000c220 0000c22c 0000c21a     P... ...,.......
   13d9c:	0000c232 0000c238                       2...8...

00013da4 <_tcc_intflag>:
   13da4:	00000001 00000002 00000004 00000008     ................
   13db4:	00001000 00002000 00004000 00008000     ..... ...@......
   13dc4:	00010000 00020000 00040000 00080000     ................
   13dd4:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   13de4:	51726d54 00000000 0000f118 0000f118     TmrQ............
   13df4:	0000f118 0000f1a6 0000f170 0000f19a     ........p.......
   13e04:	0000f118 0000f118 0000f1a6 0000f170     ............p...
   13e14:	63617453 766f206b 6c667265 3a21776f     Stack overflow!:
   13e24:	0a732520 0000000d 6c6c614d 6620636f      %s.....Malloc f
   13e34:	656c6961 0d0a2164 00000000 6b736174     ailed!......task
   13e44:	0073335f 6b736174 0073315f 6b736174     _3s.task_1s.task
   13e54:	4833335f 0000007a 6b736174 7a75425f     _33Hz...task_Buz
   13e64:	0072657a 73627570 702e6275 756e6275     zer.pubsub.pubnu
   13e74:	6f632e62 0000006d 20544547 48207325     b.com...GET %s H
   13e84:	2f505454 0d312e31 736f480a 25203a74     TTP/1.1..Host: %
   13e94:	550a0d73 2d726573 6e656741 50203a74     s..User-Agent: P
   13ea4:	754e6275 49572d62 3531434e 0a0d3030     ubNub-WINC1500..
   13eb4:	6e6e6f43 69746365 203a6e6f 7065654b     Connection: Keep
   13ec4:	696c412d 0a0d6576 00000a0d 696c6176     -Alive......vali
   13ed4:	74635f64 72705f78 62702874 00000029     d_ctx_prt(pb)...
   13ee4:	732f2e2e 502f6372 754e6275 00632e62     ../src/PubNub.c.
   13ef4:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
   13f04:	4c44495f 7c202945 7028207c 733e2d62     _IDLE) || (pb->s
   13f14:	65746174 203d3d20 575f5350 5f544941     tate == PS_WAIT_
   13f24:	29534e44 207c7c20 2d627028 6174733e     DNS) || (pb->sta
   13f34:	3d206574 5350203d 4941575f 4f435f54     te == PS_WAIT_CO
   13f44:	43454e4e 00002954 6c696166 74206465     NNECT)..failed t
   13f54:	7263206f 65746165 50435420 696c6320     o create TCP cli
   13f64:	20746e65 6b636f73 65207465 726f7272     ent socket error
   13f74:	00000d21 746e6f43 2d746e65 676e654c     !...Content-Leng
   13f84:	203a6874 00000000 0000005b 65646e69     th: ....[...inde
   13f94:	203c2078 4e425550 435f4255 4d5f5854     x < PUBNUB_CTX_M
   13fa4:	00005841 6275702f 6873696c 2f73252f     AX../publish/%s/
   13fb4:	302f7325 2f73252f 00002f30 64636261     %s/0/%s/0/..abcd
   13fc4:	68676665 6c6b6a69 706f6e6d 74737271     efghijklmnopqrst
   13fd4:	78777675 42417a79 46454443 4a494847     uvwxyzABCDEFGHIJ
   13fe4:	4e4d4c4b 5251504f 56555453 5a595857     KLMNOPQRSTUVWXYZ
   13ff4:	33323130 37363534 5f2d3938 3d2c7e2e     0123456789-_.~,=
   14004:	5b403b3a 0000005d 33323130 37363534     :;@[]...01234567
   14014:	42413938 46454443 00000000 64697575     89ABCDEF....uuid
   14024:	0000003d 00000000 00000026 68747561     =.......&...auth
   14034:	0000003d 6275732f 69726373 252f6562     =.../subscribe/%
   14044:	73252f73 252f302f 73253f73 73257325     s/%s/0/%s?%s%s%s
   14054:	73257325 736e7026 573d6b64 31434e49     %s%s&pnsdk=WINC1
   14064:	25303035 32252573 00732546 00312e30     500%s%%2F%s.0.1.

00014074 <__func__.12046>:
   14074:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
   14084:	7463656e 00000000                       nect....

0001408c <__func__.12124>:
   1408c:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

0001409c <__func__.12130>:
   1409c:	6e627570 695f6275 0074696e              pubnub_init.

000140a8 <__func__.12136>:
   140a8:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

000140b8 <__func__.12147>:
   140b8:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
   140c8:	00000000                                ....

000140cc <__func__.12151>:
   140cc:	6e627570 675f6275 2c007465 6e756620     pubnub_get., fun
   140dc:	6f697463 00203a6e 65737361 6f697472     ction: .assertio
   140ec:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   140fc:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   1410c:	25732564 43000a73 00000000              d%s%s..C....

00014118 <_global_impure_ptr>:
   14118:	20000038 2b302d23 6c680020 6665004c     8.. #-0+ .hlL.ef
   14128:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   14138:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   14148:	64636261 00006665                                abcdef.

0001414f <_ctype_>:
   1414f:	20202000 20202020 28282020 20282828     .         ((((( 
   1415f:	20202020 20202020 20202020 20202020                     
   1416f:	10108820 10101010 10101010 10101010      ...............
   1417f:	04040410 04040404 10040404 10101010     ................
   1418f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1419f:	01010101 01010101 01010101 10101010     ................
   141af:	42421010 42424242 02020202 02020202     ..BBBBBB........
   141bf:	02020202 02020202 02020202 10101010     ................
   141cf:	00000020 00000000 00000000 00000000      ...............
	...

00014250 <__sf_fake_stdin>:
	...

00014270 <__sf_fake_stdout>:
	...

00014290 <__sf_fake_stderr>:
	...

000142b0 <_init>:
   142b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142b2:	46c0      	nop			; (mov r8, r8)
   142b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   142b6:	bc08      	pop	{r3}
   142b8:	469e      	mov	lr, r3
   142ba:	4770      	bx	lr

000142bc <__init_array_start>:
   142bc:	000000dd 	.word	0x000000dd

000142c0 <_fini>:
   142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142c2:	46c0      	nop			; (mov r8, r8)
   142c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   142c6:	bc08      	pop	{r3}
   142c8:	469e      	mov	lr, r3
   142ca:	4770      	bx	lr

000142cc <__fini_array_start>:
   142cc:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <PubNubChannel>:
2000000c:	4957 434e 3531 3030 305f 3a30 3030 0a00          WINC1500_00:00.

2000001b <num_tokens>:
2000001b:	120a                                             .

2000001c <analog_channels>:
2000001c:	0012 0000 0007 0000                         ........

20000024 <egstrNmBusCapabilities>:
20000024:	0100 0000                                   ....

20000028 <clk_status_reg_adr>:
20000028:	000f 0000                                   ....

2000002c <g_interrupt_enabled>:
2000002c:	0001 0000                                   ....

20000030 <phantomISR>:
20000030:	270f 0000                                   .'..

20000034 <uxCriticalNesting>:
20000034:	aaaa aaaa                                   ....

20000038 <impure_data>:
20000038:	0000 0000 4250 0001 4270 0001 4290 0001     ....PB..pB...B..
	...
20000058:	4113 0001 0000 0000 0000 0000 0000 0000     .A..............
	...

20000098 <_impure_ptr>:
20000098:	0038 2000                                   8.. 

2000009c <__ctype_ptr__>:
2000009c:	414f 0001                                   OA..
