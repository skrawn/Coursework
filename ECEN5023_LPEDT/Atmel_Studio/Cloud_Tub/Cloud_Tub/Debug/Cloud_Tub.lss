
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cb64  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  0000cb64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000458c  20000090  0000cbf4  00020090  2**2
                  ALLOC
  3 .stack        00002004  2000461c  00011180  00020090  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004162b  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005b1e  00000000  00000000  0006173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000082f9  00000000  00000000  0006725a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001728  00000000  00000000  0006f553  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001588  00000000  00000000  00070c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000221ad  00000000  00000000  00072203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001deb0  00000000  00000000  000943b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a9c3  00000000  00000000  000b2260  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005b74  00000000  00000000  0014cc24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006620 	.word	0x20006620
       4:	000065fd 	.word	0x000065fd
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	000066f5 	.word	0x000066f5
       c:	000066f5 	.word	0x000066f5
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	00006a5d 	.word	0x00006a5d
	...
      38:	00006b81 	.word	0x00006b81
      3c:	00006bc9 	.word	0x00006bc9
      40:	000066f5 	.word	0x000066f5

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	000066f5 	.word	0x000066f5
      48:	000066f5 	.word	0x000066f5
      4c:	00003f25 	.word	0x00003f25
      50:	00003b55 	.word	0x00003b55
      54:	000066f5 	.word	0x000066f5
      58:	000066f5 	.word	0x000066f5
		if (time.hour == 0) {
      5c:	000066f5 	.word	0x000066f5
      60:	000066f5 	.word	0x000066f5
			time.hour = 12;
      64:	000048f9 	.word	0x000048f9
      68:	00004911 	.word	0x00004911
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00004929 	.word	0x00004929
      70:	00004941 	.word	0x00004941
      74:	00004959 	.word	0x00004959
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00004971 	.word	0x00004971
      7c:	00006545 	.word	0x00006545
      80:	00006559 	.word	0x00006559
      84:	0000656d 	.word	0x0000656d
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	000066f5 	.word	0x000066f5
      8c:	000066f5 	.word	0x000066f5
      90:	000066f5 	.word	0x000066f5
	...
      9c:	000039e5 	.word	0x000039e5
      a0:	000066f5 	.word	0x000066f5
      a4:	000066f5 	.word	0x000066f5
			alarm.time.hour = alarm.time.hour % 12;
      a8:	000066f5 	.word	0x000066f5
      ac:	000066f5 	.word	0x000066f5
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000090 	.word	0x20000090
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0000cb64 	.word	0x0000cb64

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000094 	.word	0x20000094
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0000cb64 	.word	0x0000cb64
     10c:	0000cb64 	.word	0x0000cb64
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <NVIC_EnableIRQ+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	0002      	movs	r2, r0
     148:	1dfb      	adds	r3, r7, #7
     14a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     14c:	4a07      	ldr	r2, [pc, #28]	; (16c <NVIC_DisableIRQ+0x2c>)
     14e:	1dfb      	adds	r3, r7, #7
     150:	781b      	ldrb	r3, [r3, #0]
     152:	0019      	movs	r1, r3
     154:	231f      	movs	r3, #31
     156:	400b      	ands	r3, r1
     158:	2101      	movs	r1, #1
     15a:	4099      	lsls	r1, r3
     15c:	000b      	movs	r3, r1
     15e:	0019      	movs	r1, r3
     160:	2380      	movs	r3, #128	; 0x80
     162:	50d1      	str	r1, [r2, r3]
}
     164:	46c0      	nop			; (mov r8, r8)
     166:	46bd      	mov	sp, r7
     168:	b002      	add	sp, #8
     16a:	bd80      	pop	{r7, pc}
     16c:	e000e100 	.word	0xe000e100

00000170 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     170:	b580      	push	{r7, lr}
     172:	b082      	sub	sp, #8
     174:	af00      	add	r7, sp, #0
     176:	0002      	movs	r2, r0
     178:	1dfb      	adds	r3, r7, #7
     17a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <system_interrupt_enable+0x28>)
     17e:	1dfa      	adds	r2, r7, #7
     180:	7812      	ldrb	r2, [r2, #0]
     182:	0011      	movs	r1, r2
     184:	221f      	movs	r2, #31
     186:	400a      	ands	r2, r1
     188:	2101      	movs	r1, #1
     18a:	4091      	lsls	r1, r2
     18c:	000a      	movs	r2, r1
     18e:	601a      	str	r2, [r3, #0]
}
     190:	46c0      	nop			; (mov r8, r8)
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	e000e100 	.word	0xe000e100

0000019c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     19c:	b580      	push	{r7, lr}
     19e:	b084      	sub	sp, #16
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     1aa:	68fb      	ldr	r3, [r7, #12]
     1ac:	69db      	ldr	r3, [r3, #28]
     1ae:	1e5a      	subs	r2, r3, #1
     1b0:	4193      	sbcs	r3, r2
     1b2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     1b4:	0018      	movs	r0, r3
     1b6:	46bd      	mov	sp, r7
     1b8:	b004      	add	sp, #16
     1ba:	bd80      	pop	{r7, pc}

000001bc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	681b      	ldr	r3, [r3, #0]
     1ce:	0018      	movs	r0, r3
     1d0:	4b0b      	ldr	r3, [pc, #44]	; (200 <spi_enable+0x44>)
     1d2:	4798      	blx	r3
     1d4:	0003      	movs	r3, r0
     1d6:	0018      	movs	r0, r3
     1d8:	4b0a      	ldr	r3, [pc, #40]	; (204 <spi_enable+0x48>)
     1da:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	687b      	ldr	r3, [r7, #4]
     1e0:	0018      	movs	r0, r3
     1e2:	4b09      	ldr	r3, [pc, #36]	; (208 <spi_enable+0x4c>)
     1e4:	4798      	blx	r3
     1e6:	1e03      	subs	r3, r0, #0
     1e8:	d1f9      	bne.n	1de <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	2202      	movs	r2, #2
     1f0:	431a      	orrs	r2, r3
     1f2:	68fb      	ldr	r3, [r7, #12]
     1f4:	601a      	str	r2, [r3, #0]
}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	46bd      	mov	sp, r7
     1fa:	b004      	add	sp, #16
     1fc:	bd80      	pop	{r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	000048ad 	.word	0x000048ad
     204:	00000171 	.word	0x00000171
     208:	0000019d 	.word	0x0000019d

0000020c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     20c:	b580      	push	{r7, lr}
     20e:	b084      	sub	sp, #16
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     214:	687b      	ldr	r3, [r7, #4]
     216:	681b      	ldr	r3, [r3, #0]
     218:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     21a:	68fb      	ldr	r3, [r7, #12]
     21c:	7e1b      	ldrb	r3, [r3, #24]
     21e:	b2db      	uxtb	r3, r3
     220:	001a      	movs	r2, r3
     222:	2301      	movs	r3, #1
     224:	4013      	ands	r3, r2
     226:	1e5a      	subs	r2, r3, #1
     228:	4193      	sbcs	r3, r2
     22a:	b2db      	uxtb	r3, r3
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b004      	add	sp, #16
     232:	bd80      	pop	{r7, pc}

00000234 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
     23c:	000a      	movs	r2, r1
     23e:	1cbb      	adds	r3, r7, #2
     240:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     242:	687b      	ldr	r3, [r7, #4]
     244:	681b      	ldr	r3, [r3, #0]
     246:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     248:	687b      	ldr	r3, [r7, #4]
     24a:	0018      	movs	r0, r3
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <spi_write+0x44>)
     24e:	4798      	blx	r3
     250:	0003      	movs	r3, r0
     252:	001a      	movs	r2, r3
     254:	2301      	movs	r3, #1
     256:	4053      	eors	r3, r2
     258:	b2db      	uxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	d001      	beq.n	262 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     25e:	2305      	movs	r3, #5
     260:	e006      	b.n	270 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     262:	1cbb      	adds	r3, r7, #2
     264:	881b      	ldrh	r3, [r3, #0]
     266:	05db      	lsls	r3, r3, #23
     268:	0dda      	lsrs	r2, r3, #23
     26a:	68fb      	ldr	r3, [r7, #12]
     26c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     26e:	2300      	movs	r3, #0
}
     270:	0018      	movs	r0, r3
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}
     278:	0000020d 	.word	0x0000020d

0000027c <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	6078      	str	r0, [r7, #4]
     284:	000a      	movs	r2, r1
     286:	1cfb      	adds	r3, r7, #3
     288:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2237      	movs	r2, #55	; 0x37
     28e:	5c9b      	ldrb	r3, [r3, r2]
     290:	b25a      	sxtb	r2, r3
     292:	1cfb      	adds	r3, r7, #3
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2101      	movs	r1, #1
     298:	4099      	lsls	r1, r3
     29a:	000b      	movs	r3, r1
     29c:	b25b      	sxtb	r3, r3
     29e:	4313      	orrs	r3, r2
     2a0:	b25b      	sxtb	r3, r3
     2a2:	b2d9      	uxtb	r1, r3
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2237      	movs	r2, #55	; 0x37
     2a8:	5499      	strb	r1, [r3, r2]
}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	46bd      	mov	sp, r7
     2ae:	b002      	add	sp, #8
     2b0:	bd80      	pop	{r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)

000002b4 <tm1640_get_state>:
} tm1640_state_t;

volatile tm1640_state_t tm1640_state;

static tm1640_state_t tm1640_get_state(void)
{    
     2b4:	b580      	push	{r7, lr}
     2b6:	b082      	sub	sp, #8
     2b8:	af00      	add	r7, sp, #0
    // State will be updated from an interrupt so disable interrupts
    // to make this interaction atomic.
    tm1640_state_t temp_state;
    NVIC_DisableIRQ(TM1640_IRQ);
     2ba:	200d      	movs	r0, #13
     2bc:	4b07      	ldr	r3, [pc, #28]	; (2dc <tm1640_get_state+0x28>)
     2be:	4798      	blx	r3
    temp_state = tm1640_state;
     2c0:	1dfb      	adds	r3, r7, #7
     2c2:	4a07      	ldr	r2, [pc, #28]	; (2e0 <tm1640_get_state+0x2c>)
     2c4:	7812      	ldrb	r2, [r2, #0]
     2c6:	701a      	strb	r2, [r3, #0]
    NVIC_EnableIRQ(TM1640_IRQ);
     2c8:	200d      	movs	r0, #13
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <tm1640_get_state+0x30>)
     2cc:	4798      	blx	r3
    return temp_state;
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
}
     2d2:	0018      	movs	r0, r3
     2d4:	46bd      	mov	sp, r7
     2d6:	b002      	add	sp, #8
     2d8:	bd80      	pop	{r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	00000141 	.word	0x00000141
     2e0:	200043ec 	.word	0x200043ec
     2e4:	00000115 	.word	0x00000115

000002e8 <spi_cb_buffer_transmitted>:

static void spi_cb_buffer_transmitted(struct spi_module *const module) 
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	6078      	str	r0, [r7, #4]
    // This function will be called from an interrupt context
    switch (tm1640_state) {
     2f0:	4b15      	ldr	r3, [pc, #84]	; (348 <spi_cb_buffer_transmitted+0x60>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	b2db      	uxtb	r3, r3
     2f6:	2b01      	cmp	r3, #1
     2f8:	d002      	beq.n	300 <spi_cb_buffer_transmitted+0x18>
     2fa:	2b02      	cmp	r3, #2
     2fc:	d012      	beq.n	324 <spi_cb_buffer_transmitted+0x3c>
     2fe:	e01b      	b.n	338 <spi_cb_buffer_transmitted+0x50>
    case STATE_SET_DATA:
        tm1640_state = STATE_SET_ADDR;
     300:	4b11      	ldr	r3, [pc, #68]	; (348 <spi_cb_buffer_transmitted+0x60>)
     302:	2202      	movs	r2, #2
     304:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_addr, TM1640_GRIDS + 1);
     306:	4911      	ldr	r1, [pc, #68]	; (34c <spi_cb_buffer_transmitted+0x64>)
     308:	4b11      	ldr	r3, [pc, #68]	; (350 <spi_cb_buffer_transmitted+0x68>)
     30a:	2211      	movs	r2, #17
     30c:	0018      	movs	r0, r3
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <spi_cb_buffer_transmitted+0x6c>)
     310:	4798      	blx	r3
        spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     312:	4b11      	ldr	r3, [pc, #68]	; (358 <spi_cb_buffer_transmitted+0x70>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	b29a      	uxth	r2, r3
     318:	4b0d      	ldr	r3, [pc, #52]	; (350 <spi_cb_buffer_transmitted+0x68>)
     31a:	0011      	movs	r1, r2
     31c:	0018      	movs	r0, r3
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <spi_cb_buffer_transmitted+0x74>)
     320:	4798      	blx	r3
        break;
     322:	e00d      	b.n	340 <spi_cb_buffer_transmitted+0x58>

    case STATE_SET_ADDR:
        tm1640_state = STATE_CONTROL;
     324:	4b08      	ldr	r3, [pc, #32]	; (348 <spi_cb_buffer_transmitted+0x60>)
     326:	2203      	movs	r2, #3
     328:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.brigtness, 1);
     32a:	490d      	ldr	r1, [pc, #52]	; (360 <spi_cb_buffer_transmitted+0x78>)
     32c:	4b08      	ldr	r3, [pc, #32]	; (350 <spi_cb_buffer_transmitted+0x68>)
     32e:	2201      	movs	r2, #1
     330:	0018      	movs	r0, r3
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <spi_cb_buffer_transmitted+0x6c>)
     334:	4798      	blx	r3
        break;
     336:	e003      	b.n	340 <spi_cb_buffer_transmitted+0x58>

    case STATE_CONTROL:
    default:
        tm1640_state = STATE_IDLE;
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <spi_cb_buffer_transmitted+0x60>)
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]
        break;
     33e:	46c0      	nop			; (mov r8, r8)
    }
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b002      	add	sp, #8
     346:	bd80      	pop	{r7, pc}
     348:	200043ec 	.word	0x200043ec
     34c:	200043f1 	.word	0x200043f1
     350:	20004404 	.word	0x20004404
     354:	0000516d 	.word	0x0000516d
     358:	200043f0 	.word	0x200043f0
     35c:	00000235 	.word	0x00000235
     360:	20004402 	.word	0x20004402

00000364 <spi_cb_error>:

static void spi_cb_error(struct spi_module *const module) 
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
    printf("Spi error!\n");
     36c:	4b02      	ldr	r3, [pc, #8]	; (378 <spi_cb_error+0x14>)
     36e:	0018      	movs	r0, r3
     370:	4b02      	ldr	r3, [pc, #8]	; (37c <spi_cb_error+0x18>)
     372:	4798      	blx	r3
    while(1) {}
     374:	e7fe      	b.n	374 <spi_cb_error+0x10>
     376:	46c0      	nop			; (mov r8, r8)
     378:	0000b700 	.word	0x0000b700
     37c:	0000a931 	.word	0x0000a931

00000380 <tm1640_init>:
}

void tm1640_init(void)
{
     380:	b580      	push	{r7, lr}
     382:	b090      	sub	sp, #64	; 0x40
     384:	af00      	add	r7, sp, #0
    struct spi_config config;
    struct system_pinmux_config do_pin;
    struct system_pinmux_config sck_pin;

    do_pin.powersave = false;
     386:	1d3b      	adds	r3, r7, #4
     388:	2200      	movs	r2, #0
     38a:	70da      	strb	r2, [r3, #3]
    do_pin.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     38c:	1d3b      	adds	r3, r7, #4
     38e:	2201      	movs	r2, #1
     390:	705a      	strb	r2, [r3, #1]
    do_pin.input_pull = SYSTEM_PINMUX_PIN_PULL_UP;
     392:	1d3b      	adds	r3, r7, #4
     394:	2201      	movs	r2, #1
     396:	709a      	strb	r2, [r3, #2]

    sck_pin.powersave = false;
     398:	003b      	movs	r3, r7
     39a:	2200      	movs	r2, #0
     39c:	70da      	strb	r2, [r3, #3]
    sck_pin.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     39e:	003b      	movs	r3, r7
     3a0:	2201      	movs	r2, #1
     3a2:	705a      	strb	r2, [r3, #1]
    sck_pin.input_pull = SYSTEM_PINMUX_PIN_PULL_UP;
     3a4:	003b      	movs	r3, r7
     3a6:	2201      	movs	r2, #1
     3a8:	709a      	strb	r2, [r3, #2]

    config.character_size = SPI_CHARACTER_SIZE_8BIT;
     3aa:	2308      	movs	r3, #8
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	2200      	movs	r2, #0
     3b0:	741a      	strb	r2, [r3, #16]
    config.data_order = SPI_DATA_ORDER_LSB;
     3b2:	2308      	movs	r3, #8
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	2280      	movs	r2, #128	; 0x80
     3b8:	05d2      	lsls	r2, r2, #23
     3ba:	605a      	str	r2, [r3, #4]
    config.mode = SPI_MODE_MASTER;
     3bc:	2308      	movs	r3, #8
     3be:	18fb      	adds	r3, r7, r3
     3c0:	2201      	movs	r2, #1
     3c2:	701a      	strb	r2, [r3, #0]
    config.transfer_mode = SPI_TRANSFER_MODE_3;
     3c4:	2308      	movs	r3, #8
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	22c0      	movs	r2, #192	; 0xc0
     3ca:	0592      	lsls	r2, r2, #22
     3cc:	609a      	str	r2, [r3, #8]
    config.select_slave_low_detect_enable = false;
     3ce:	2308      	movs	r3, #8
     3d0:	18fb      	adds	r3, r7, r3
     3d2:	2200      	movs	r2, #0
     3d4:	74da      	strb	r2, [r3, #19]
#ifndef XPLAINED
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;    
     3d6:	2308      	movs	r3, #8
     3d8:	18fb      	adds	r3, r7, r3
     3da:	2280      	movs	r2, #128	; 0x80
     3dc:	0252      	lsls	r2, r2, #9
     3de:	60da      	str	r2, [r3, #12]

    //config.pinmux_pad0 = (uint32_t) PORT->Group[1].PMUX[10/2];
    
    // PB10 - DO, PB11 - SCK
    do_pin.mux_position = 0x3;
     3e0:	1d3b      	adds	r3, r7, #4
     3e2:	2203      	movs	r2, #3
     3e4:	701a      	strb	r2, [r3, #0]
    sck_pin.mux_position = 0x3;
     3e6:	003b      	movs	r3, r7
     3e8:	2203      	movs	r2, #3
     3ea:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(32 + 10, &do_pin);
     3ec:	1d3b      	adds	r3, r7, #4
     3ee:	0019      	movs	r1, r3
     3f0:	202a      	movs	r0, #42	; 0x2a
     3f2:	4b25      	ldr	r3, [pc, #148]	; (488 <tm1640_init+0x108>)
     3f4:	4798      	blx	r3
    system_pinmux_pin_set_config(32 + 11, &sck_pin);
     3f6:	003b      	movs	r3, r7
     3f8:	0019      	movs	r1, r3
     3fa:	202b      	movs	r0, #43	; 0x2b
     3fc:	4b22      	ldr	r3, [pc, #136]	; (488 <tm1640_init+0x108>)
     3fe:	4798      	blx	r3
    do_pin.mux_position = 0x2;    
    sck_pin.mux_position = 0x2;
    //system_pinmux_pin_set_config(16, &do_pin);
    //system_pinmux_pin_set_config(19, &sck_pin);
#endif
    config.receiver_enable = false;
     400:	2308      	movs	r3, #8
     402:	18fb      	adds	r3, r7, r3
     404:	2200      	movs	r2, #0
     406:	749a      	strb	r2, [r3, #18]
    config.master_slave_select_enable = false;
     408:	2308      	movs	r3, #8
     40a:	18fb      	adds	r3, r7, r3
     40c:	2200      	movs	r2, #0
     40e:	751a      	strb	r2, [r3, #20]
    config.run_in_standby = true;
     410:	2308      	movs	r3, #8
     412:	18fb      	adds	r3, r7, r3
     414:	2201      	movs	r2, #1
     416:	745a      	strb	r2, [r3, #17]
    config.mode_specific.master.baudrate = TM1640_BAUD_RATE;
     418:	2308      	movs	r3, #8
     41a:	18fb      	adds	r3, r7, r3
     41c:	4a1b      	ldr	r2, [pc, #108]	; (48c <tm1640_init+0x10c>)
     41e:	619a      	str	r2, [r3, #24]
    config.generator_source = GCLK_GENERATOR_0;
     420:	2308      	movs	r3, #8
     422:	18fb      	adds	r3, r7, r3
     424:	2224      	movs	r2, #36	; 0x24
     426:	2100      	movs	r1, #0
     428:	5499      	strb	r1, [r3, r2]

    if (spi_init(&spi_module, TM1640_SERCOM, &config)) {
     42a:	2308      	movs	r3, #8
     42c:	18fa      	adds	r2, r7, r3
     42e:	4918      	ldr	r1, [pc, #96]	; (490 <tm1640_init+0x110>)
     430:	4b18      	ldr	r3, [pc, #96]	; (494 <tm1640_init+0x114>)
     432:	0018      	movs	r0, r3
     434:	4b18      	ldr	r3, [pc, #96]	; (498 <tm1640_init+0x118>)
     436:	4798      	blx	r3
     438:	1e03      	subs	r3, r0, #0
     43a:	d004      	beq.n	446 <tm1640_init+0xc6>
        printf("Failed to initialize TM1640_SERCOM!\n");
     43c:	4b17      	ldr	r3, [pc, #92]	; (49c <tm1640_init+0x11c>)
     43e:	0018      	movs	r0, r3
     440:	4b17      	ldr	r3, [pc, #92]	; (4a0 <tm1640_init+0x120>)
     442:	4798      	blx	r3
     444:	e01c      	b.n	480 <tm1640_init+0x100>
        return;
    }

    spi_register_callback(&spi_module, spi_cb_buffer_transmitted, SPI_CALLBACK_BUFFER_TRANSMITTED);      
     446:	4917      	ldr	r1, [pc, #92]	; (4a4 <tm1640_init+0x124>)
     448:	4b12      	ldr	r3, [pc, #72]	; (494 <tm1640_init+0x114>)
     44a:	2200      	movs	r2, #0
     44c:	0018      	movs	r0, r3
     44e:	4b16      	ldr	r3, [pc, #88]	; (4a8 <tm1640_init+0x128>)
     450:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_BUFFER_TRANSMITTED);  
     452:	4b10      	ldr	r3, [pc, #64]	; (494 <tm1640_init+0x114>)
     454:	2100      	movs	r1, #0
     456:	0018      	movs	r0, r3
     458:	4b14      	ldr	r3, [pc, #80]	; (4ac <tm1640_init+0x12c>)
     45a:	4798      	blx	r3
    spi_register_callback(&spi_module, spi_cb_error, SPI_CALLBACK_ERROR);    
     45c:	4914      	ldr	r1, [pc, #80]	; (4b0 <tm1640_init+0x130>)
     45e:	4b0d      	ldr	r3, [pc, #52]	; (494 <tm1640_init+0x114>)
     460:	2203      	movs	r2, #3
     462:	0018      	movs	r0, r3
     464:	4b10      	ldr	r3, [pc, #64]	; (4a8 <tm1640_init+0x128>)
     466:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_ERROR);
     468:	4b0a      	ldr	r3, [pc, #40]	; (494 <tm1640_init+0x114>)
     46a:	2103      	movs	r1, #3
     46c:	0018      	movs	r0, r3
     46e:	4b0f      	ldr	r3, [pc, #60]	; (4ac <tm1640_init+0x12c>)
     470:	4798      	blx	r3

    NVIC_EnableIRQ(TM1640_IRQ);
     472:	200d      	movs	r0, #13
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <tm1640_init+0x134>)
     476:	4798      	blx	r3
    spi_enable(&spi_module);
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <tm1640_init+0x114>)
     47a:	0018      	movs	r0, r3
     47c:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <tm1640_init+0x138>)
     47e:	4798      	blx	r3
}
     480:	46bd      	mov	sp, r7
     482:	b010      	add	sp, #64	; 0x40
     484:	bd80      	pop	{r7, pc}
     486:	46c0      	nop			; (mov r8, r8)
     488:	000064bd 	.word	0x000064bd
     48c:	00030d40 	.word	0x00030d40
     490:	42001800 	.word	0x42001800
     494:	20004404 	.word	0x20004404
     498:	00004e4d 	.word	0x00004e4d
     49c:	0000b70c 	.word	0x0000b70c
     4a0:	0000a931 	.word	0x0000a931
     4a4:	000002e9 	.word	0x000002e9
     4a8:	00005125 	.word	0x00005125
     4ac:	0000027d 	.word	0x0000027d
     4b0:	00000365 	.word	0x00000365
     4b4:	00000115 	.word	0x00000115
     4b8:	000001bd 	.word	0x000001bd

000004bc <tm1640_set_display>:

enum status_code tm1640_set_display(tm1640_display_t *disp, tm1640_brightness_t brightness)
{
     4bc:	b590      	push	{r4, r7, lr}
     4be:	b085      	sub	sp, #20
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
     4c4:	000a      	movs	r2, r1
     4c6:	1cfb      	adds	r3, r7, #3
     4c8:	701a      	strb	r2, [r3, #0]
    enum status_code status;

    // Transactions have to be broken up into 3 segments because the data and clock need to go high
    // for a period of time between the data command, the address/display data, and the display control.
    // Start off with a single byte transfer and then keep the transaction moving with the callback.
    if (tm1640_get_state() == STATE_IDLE) {
     4ca:	4b1d      	ldr	r3, [pc, #116]	; (540 <tm1640_set_display+0x84>)
     4cc:	4798      	blx	r3
     4ce:	1e03      	subs	r3, r0, #0
     4d0:	d131      	bne.n	536 <tm1640_set_display+0x7a>
        tm1640_state = STATE_SET_DATA;
     4d2:	4b1c      	ldr	r3, [pc, #112]	; (544 <tm1640_set_display+0x88>)
     4d4:	2201      	movs	r2, #1
     4d6:	701a      	strb	r2, [r3, #0]

        memcpy(&tm1640_display_pkt.disp_data, disp->grid, TM1640_GRIDS);
     4d8:	6879      	ldr	r1, [r7, #4]
     4da:	4b1b      	ldr	r3, [pc, #108]	; (548 <tm1640_set_display+0x8c>)
     4dc:	2202      	movs	r2, #2
     4de:	189b      	adds	r3, r3, r2
     4e0:	2210      	movs	r2, #16
     4e2:	0018      	movs	r0, r3
     4e4:	4b19      	ldr	r3, [pc, #100]	; (54c <tm1640_set_display+0x90>)
     4e6:	4798      	blx	r3
        tm1640_display_pkt.set_addr = ADDR_CMD_ADDR0;
     4e8:	4b17      	ldr	r3, [pc, #92]	; (548 <tm1640_set_display+0x8c>)
     4ea:	22c0      	movs	r2, #192	; 0xc0
     4ec:	705a      	strb	r2, [r3, #1]
        tm1640_display_pkt.set_data = DATA_CMD_ADDR_INC;
     4ee:	4b16      	ldr	r3, [pc, #88]	; (548 <tm1640_set_display+0x8c>)
     4f0:	2240      	movs	r2, #64	; 0x40
     4f2:	701a      	strb	r2, [r3, #0]
        tm1640_display_pkt.brigtness = brightness;
     4f4:	4b14      	ldr	r3, [pc, #80]	; (548 <tm1640_set_display+0x8c>)
     4f6:	1cfa      	adds	r2, r7, #3
     4f8:	7812      	ldrb	r2, [r2, #0]
     4fa:	749a      	strb	r2, [r3, #18]

        status = spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_data, 1);
     4fc:	230f      	movs	r3, #15
     4fe:	18fc      	adds	r4, r7, r3
     500:	4911      	ldr	r1, [pc, #68]	; (548 <tm1640_set_display+0x8c>)
     502:	4b13      	ldr	r3, [pc, #76]	; (550 <tm1640_set_display+0x94>)
     504:	2201      	movs	r2, #1
     506:	0018      	movs	r0, r3
     508:	4b12      	ldr	r3, [pc, #72]	; (554 <tm1640_set_display+0x98>)
     50a:	4798      	blx	r3
     50c:	0003      	movs	r3, r0
     50e:	7023      	strb	r3, [r4, #0]

        // First byte needs to be started manually
        if (!status) 
     510:	230f      	movs	r3, #15
     512:	18fb      	adds	r3, r7, r3
     514:	781b      	ldrb	r3, [r3, #0]
     516:	2b00      	cmp	r3, #0
     518:	d109      	bne.n	52e <tm1640_set_display+0x72>
            return spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     51a:	4b0b      	ldr	r3, [pc, #44]	; (548 <tm1640_set_display+0x8c>)
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	b29a      	uxth	r2, r3
     520:	4b0b      	ldr	r3, [pc, #44]	; (550 <tm1640_set_display+0x94>)
     522:	0011      	movs	r1, r2
     524:	0018      	movs	r0, r3
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <tm1640_set_display+0x9c>)
     528:	4798      	blx	r3
     52a:	0003      	movs	r3, r0
     52c:	e004      	b.n	538 <tm1640_set_display+0x7c>
        else
            return status;
     52e:	230f      	movs	r3, #15
     530:	18fb      	adds	r3, r7, r3
     532:	781b      	ldrb	r3, [r3, #0]
     534:	e000      	b.n	538 <tm1640_set_display+0x7c>
    }
    else
        return STATUS_BUSY;
     536:	2305      	movs	r3, #5
}
     538:	0018      	movs	r0, r3
     53a:	46bd      	mov	sp, r7
     53c:	b005      	add	sp, #20
     53e:	bd90      	pop	{r4, r7, pc}
     540:	000002b5 	.word	0x000002b5
     544:	200043ec 	.word	0x200043ec
     548:	200043f0 	.word	0x200043f0
     54c:	0000a249 	.word	0x0000a249
     550:	20004404 	.word	0x20004404
     554:	0000516d 	.word	0x0000516d
     558:	00000235 	.word	0x00000235

0000055c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     55c:	b580      	push	{r7, lr}
     55e:	b082      	sub	sp, #8
     560:	af00      	add	r7, sp, #0
     562:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     564:	687b      	ldr	r3, [r7, #4]
     566:	2b00      	cmp	r3, #0
     568:	d00c      	beq.n	584 <delay_cycles+0x28>
		SysTick->LOAD = n;
     56a:	4b08      	ldr	r3, [pc, #32]	; (58c <delay_cycles+0x30>)
     56c:	687a      	ldr	r2, [r7, #4]
     56e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     570:	4b06      	ldr	r3, [pc, #24]	; (58c <delay_cycles+0x30>)
     572:	2200      	movs	r2, #0
     574:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     576:	46c0      	nop			; (mov r8, r8)
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <delay_cycles+0x30>)
     57a:	681a      	ldr	r2, [r3, #0]
     57c:	2380      	movs	r3, #128	; 0x80
     57e:	025b      	lsls	r3, r3, #9
     580:	4013      	ands	r3, r2
     582:	d0f9      	beq.n	578 <delay_cycles+0x1c>
		};
	}
}
     584:	46c0      	nop			; (mov r8, r8)
     586:	46bd      	mov	sp, r7
     588:	b002      	add	sp, #8
     58a:	bd80      	pop	{r7, pc}
     58c:	e000e010 	.word	0xe000e010

00000590 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     590:	b580      	push	{r7, lr}
     592:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     594:	2000      	movs	r0, #0
     596:	4b0f      	ldr	r3, [pc, #60]	; (5d4 <delay_init+0x44>)
     598:	4798      	blx	r3
     59a:	0002      	movs	r2, r0
     59c:	4b0e      	ldr	r3, [pc, #56]	; (5d8 <delay_init+0x48>)
     59e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     5a0:	4b0d      	ldr	r3, [pc, #52]	; (5d8 <delay_init+0x48>)
     5a2:	6818      	ldr	r0, [r3, #0]
     5a4:	4b0d      	ldr	r3, [pc, #52]	; (5dc <delay_init+0x4c>)
     5a6:	22fa      	movs	r2, #250	; 0xfa
     5a8:	0091      	lsls	r1, r2, #2
     5aa:	4798      	blx	r3
     5ac:	0003      	movs	r3, r0
     5ae:	001a      	movs	r2, r3
     5b0:	4b09      	ldr	r3, [pc, #36]	; (5d8 <delay_init+0x48>)
     5b2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     5b4:	4b08      	ldr	r3, [pc, #32]	; (5d8 <delay_init+0x48>)
     5b6:	6818      	ldr	r0, [r3, #0]
     5b8:	4b08      	ldr	r3, [pc, #32]	; (5dc <delay_init+0x4c>)
     5ba:	22fa      	movs	r2, #250	; 0xfa
     5bc:	0091      	lsls	r1, r2, #2
     5be:	4798      	blx	r3
     5c0:	0003      	movs	r3, r0
     5c2:	001a      	movs	r2, r3
     5c4:	4b06      	ldr	r3, [pc, #24]	; (5e0 <delay_init+0x50>)
     5c6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5c8:	4b06      	ldr	r3, [pc, #24]	; (5e4 <delay_init+0x54>)
     5ca:	2205      	movs	r2, #5
     5cc:	601a      	str	r2, [r3, #0]
}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	46bd      	mov	sp, r7
     5d2:	bd80      	pop	{r7, pc}
     5d4:	000060f9 	.word	0x000060f9
     5d8:	20000000 	.word	0x20000000
     5dc:	00009891 	.word	0x00009891
     5e0:	20000004 	.word	0x20000004
     5e4:	e000e010 	.word	0xe000e010

000005e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b082      	sub	sp, #8
     5ec:	af00      	add	r7, sp, #0
     5ee:	6078      	str	r0, [r7, #4]
	while (n--) {
     5f0:	e004      	b.n	5fc <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     5f2:	4b07      	ldr	r3, [pc, #28]	; (610 <delay_cycles_ms+0x28>)
     5f4:	681b      	ldr	r3, [r3, #0]
     5f6:	0018      	movs	r0, r3
     5f8:	4b06      	ldr	r3, [pc, #24]	; (614 <delay_cycles_ms+0x2c>)
     5fa:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	1e5a      	subs	r2, r3, #1
     600:	607a      	str	r2, [r7, #4]
     602:	2b00      	cmp	r3, #0
     604:	d1f5      	bne.n	5f2 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     606:	46c0      	nop			; (mov r8, r8)
     608:	46bd      	mov	sp, r7
     60a:	b002      	add	sp, #8
     60c:	bd80      	pop	{r7, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	20000000 	.word	0x20000000
     614:	0000055d 	.word	0x0000055d

00000618 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     618:	b580      	push	{r7, lr}
     61a:	b082      	sub	sp, #8
     61c:	af00      	add	r7, sp, #0
     61e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     620:	e002      	b.n	628 <nm_bsp_sleep+0x10>
		delay_ms(1);
     622:	2001      	movs	r0, #1
     624:	4b05      	ldr	r3, [pc, #20]	; (63c <nm_bsp_sleep+0x24>)
     626:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     628:	687b      	ldr	r3, [r7, #4]
     62a:	1e5a      	subs	r2, r3, #1
     62c:	607a      	str	r2, [r7, #4]
     62e:	2b00      	cmp	r3, #0
     630:	d1f7      	bne.n	622 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     632:	46c0      	nop			; (mov r8, r8)
     634:	46bd      	mov	sp, r7
     636:	b002      	add	sp, #8
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	000005e9 	.word	0x000005e9

00000640 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     640:	b580      	push	{r7, lr}
     642:	b082      	sub	sp, #8
     644:	af00      	add	r7, sp, #0
     646:	0002      	movs	r2, r0
     648:	1dfb      	adds	r3, r7, #7
     64a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     64c:	1dfb      	adds	r3, r7, #7
     64e:	781b      	ldrb	r3, [r3, #0]
     650:	2b00      	cmp	r3, #0
     652:	d004      	beq.n	65e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     654:	2100      	movs	r1, #0
     656:	2009      	movs	r0, #9
     658:	4b05      	ldr	r3, [pc, #20]	; (670 <nm_bsp_interrupt_ctrl+0x30>)
     65a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     65c:	e003      	b.n	666 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     65e:	2100      	movs	r1, #0
     660:	2009      	movs	r0, #9
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <nm_bsp_interrupt_ctrl+0x34>)
     664:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     666:	46c0      	nop			; (mov r8, r8)
     668:	46bd      	mov	sp, r7
     66a:	b002      	add	sp, #8
     66c:	bd80      	pop	{r7, pc}
     66e:	46c0      	nop			; (mov r8, r8)
     670:	00003ac5 	.word	0x00003ac5
     674:	00003b0d 	.word	0x00003b0d

00000678 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     678:	b580      	push	{r7, lr}
     67a:	b084      	sub	sp, #16
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     680:	687b      	ldr	r3, [r7, #4]
     682:	681b      	ldr	r3, [r3, #0]
     684:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     686:	68fb      	ldr	r3, [r7, #12]
     688:	7e1b      	ldrb	r3, [r3, #24]
     68a:	b2db      	uxtb	r3, r3
     68c:	001a      	movs	r2, r3
     68e:	2302      	movs	r3, #2
     690:	4013      	ands	r3, r2
     692:	1e5a      	subs	r2, r3, #1
     694:	4193      	sbcs	r3, r2
     696:	b2db      	uxtb	r3, r3
}
     698:	0018      	movs	r0, r3
     69a:	46bd      	mov	sp, r7
     69c:	b004      	add	sp, #16
     69e:	bd80      	pop	{r7, pc}

000006a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     6a0:	b580      	push	{r7, lr}
     6a2:	b084      	sub	sp, #16
     6a4:	af00      	add	r7, sp, #0
     6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	7e1b      	ldrb	r3, [r3, #24]
     6b2:	b2db      	uxtb	r3, r3
     6b4:	001a      	movs	r2, r3
     6b6:	2301      	movs	r3, #1
     6b8:	4013      	ands	r3, r2
     6ba:	1e5a      	subs	r2, r3, #1
     6bc:	4193      	sbcs	r3, r2
     6be:	b2db      	uxtb	r3, r3
}
     6c0:	0018      	movs	r0, r3
     6c2:	46bd      	mov	sp, r7
     6c4:	b004      	add	sp, #16
     6c6:	bd80      	pop	{r7, pc}

000006c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     6c8:	b580      	push	{r7, lr}
     6ca:	b084      	sub	sp, #16
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6d0:	687b      	ldr	r3, [r7, #4]
     6d2:	681b      	ldr	r3, [r3, #0]
     6d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	7e1b      	ldrb	r3, [r3, #24]
     6da:	b2db      	uxtb	r3, r3
     6dc:	001a      	movs	r2, r3
     6de:	2304      	movs	r3, #4
     6e0:	4013      	ands	r3, r2
     6e2:	1e5a      	subs	r2, r3, #1
     6e4:	4193      	sbcs	r3, r2
     6e6:	b2db      	uxtb	r3, r3
}
     6e8:	0018      	movs	r0, r3
     6ea:	46bd      	mov	sp, r7
     6ec:	b004      	add	sp, #16
     6ee:	bd80      	pop	{r7, pc}

000006f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b084      	sub	sp, #16
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
     6f8:	000a      	movs	r2, r1
     6fa:	1cbb      	adds	r3, r7, #2
     6fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6fe:	687b      	ldr	r3, [r7, #4]
     700:	681b      	ldr	r3, [r3, #0]
     702:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     704:	687b      	ldr	r3, [r7, #4]
     706:	0018      	movs	r0, r3
     708:	4b0a      	ldr	r3, [pc, #40]	; (734 <spi_write+0x44>)
     70a:	4798      	blx	r3
     70c:	0003      	movs	r3, r0
     70e:	001a      	movs	r2, r3
     710:	2301      	movs	r3, #1
     712:	4053      	eors	r3, r2
     714:	b2db      	uxtb	r3, r3
     716:	2b00      	cmp	r3, #0
     718:	d001      	beq.n	71e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     71a:	2305      	movs	r3, #5
     71c:	e006      	b.n	72c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     71e:	1cbb      	adds	r3, r7, #2
     720:	881b      	ldrh	r3, [r3, #0]
     722:	05db      	lsls	r3, r3, #23
     724:	0dda      	lsrs	r2, r3, #23
     726:	68fb      	ldr	r3, [r7, #12]
     728:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     72a:	2300      	movs	r3, #0
}
     72c:	0018      	movs	r0, r3
     72e:	46bd      	mov	sp, r7
     730:	b004      	add	sp, #16
     732:	bd80      	pop	{r7, pc}
     734:	000006a1 	.word	0x000006a1

00000738 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     738:	b580      	push	{r7, lr}
     73a:	b084      	sub	sp, #16
     73c:	af00      	add	r7, sp, #0
     73e:	6078      	str	r0, [r7, #4]
     740:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     742:	687b      	ldr	r3, [r7, #4]
     744:	681b      	ldr	r3, [r3, #0]
     746:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     748:	687b      	ldr	r3, [r7, #4]
     74a:	0018      	movs	r0, r3
     74c:	4b1b      	ldr	r3, [pc, #108]	; (7bc <spi_read+0x84>)
     74e:	4798      	blx	r3
     750:	0003      	movs	r3, r0
     752:	001a      	movs	r2, r3
     754:	2301      	movs	r3, #1
     756:	4053      	eors	r3, r2
     758:	b2db      	uxtb	r3, r3
     75a:	2b00      	cmp	r3, #0
     75c:	d001      	beq.n	762 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     75e:	2310      	movs	r3, #16
     760:	e027      	b.n	7b2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     762:	230f      	movs	r3, #15
     764:	18fb      	adds	r3, r7, r3
     766:	2200      	movs	r2, #0
     768:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     76a:	68bb      	ldr	r3, [r7, #8]
     76c:	8b5b      	ldrh	r3, [r3, #26]
     76e:	b29b      	uxth	r3, r3
     770:	001a      	movs	r2, r3
     772:	2304      	movs	r3, #4
     774:	4013      	ands	r3, r2
     776:	d006      	beq.n	786 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     778:	230f      	movs	r3, #15
     77a:	18fb      	adds	r3, r7, r3
     77c:	221e      	movs	r2, #30
     77e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     780:	68bb      	ldr	r3, [r7, #8]
     782:	2204      	movs	r2, #4
     784:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     786:	687b      	ldr	r3, [r7, #4]
     788:	799b      	ldrb	r3, [r3, #6]
     78a:	2b01      	cmp	r3, #1
     78c:	d108      	bne.n	7a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     78e:	68bb      	ldr	r3, [r7, #8]
     790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     792:	b29b      	uxth	r3, r3
     794:	05db      	lsls	r3, r3, #23
     796:	0ddb      	lsrs	r3, r3, #23
     798:	b29a      	uxth	r2, r3
     79a:	683b      	ldr	r3, [r7, #0]
     79c:	801a      	strh	r2, [r3, #0]
     79e:	e005      	b.n	7ac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     7a0:	68bb      	ldr	r3, [r7, #8]
     7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     7a4:	b2db      	uxtb	r3, r3
     7a6:	b29a      	uxth	r2, r3
     7a8:	683b      	ldr	r3, [r7, #0]
     7aa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     7ac:	230f      	movs	r3, #15
     7ae:	18fb      	adds	r3, r7, r3
     7b0:	781b      	ldrb	r3, [r3, #0]
}
     7b2:	0018      	movs	r0, r3
     7b4:	46bd      	mov	sp, r7
     7b6:	b004      	add	sp, #16
     7b8:	bd80      	pop	{r7, pc}
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	000006c9 	.word	0x000006c9

000007c0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     7c0:	b580      	push	{r7, lr}
     7c2:	b086      	sub	sp, #24
     7c4:	af00      	add	r7, sp, #0
     7c6:	60f8      	str	r0, [r7, #12]
     7c8:	60b9      	str	r1, [r7, #8]
     7ca:	1dbb      	adds	r3, r7, #6
     7cc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     7ce:	2313      	movs	r3, #19
     7d0:	18fb      	adds	r3, r7, r3
     7d2:	2200      	movs	r2, #0
     7d4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     7d6:	2317      	movs	r3, #23
     7d8:	18fb      	adds	r3, r7, r3
     7da:	2200      	movs	r2, #0
     7dc:	701a      	strb	r2, [r3, #0]
     7de:	2316      	movs	r3, #22
     7e0:	18fb      	adds	r3, r7, r3
     7e2:	2200      	movs	r2, #0
     7e4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     7e6:	2314      	movs	r3, #20
     7e8:	18fb      	adds	r3, r7, r3
     7ea:	2200      	movs	r2, #0
     7ec:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     7ee:	2310      	movs	r3, #16
     7f0:	18fb      	adds	r3, r7, r3
     7f2:	2200      	movs	r2, #0
     7f4:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     7f6:	68fb      	ldr	r3, [r7, #12]
     7f8:	2b00      	cmp	r3, #0
     7fa:	d107      	bne.n	80c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     7fc:	2313      	movs	r3, #19
     7fe:	18fb      	adds	r3, r7, r3
     800:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     802:	2317      	movs	r3, #23
     804:	18fb      	adds	r3, r7, r3
     806:	2201      	movs	r2, #1
     808:	701a      	strb	r2, [r3, #0]
     80a:	e00d      	b.n	828 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     80c:	68bb      	ldr	r3, [r7, #8]
     80e:	2b00      	cmp	r3, #0
     810:	d107      	bne.n	822 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     812:	2313      	movs	r3, #19
     814:	18fb      	adds	r3, r7, r3
     816:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     818:	2316      	movs	r3, #22
     81a:	18fb      	adds	r3, r7, r3
     81c:	2201      	movs	r2, #1
     81e:	701a      	strb	r2, [r3, #0]
     820:	e002      	b.n	828 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     822:	2306      	movs	r3, #6
     824:	425b      	negs	r3, r3
     826:	e06a      	b.n	8fe <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
     828:	4937      	ldr	r1, [pc, #220]	; (908 <spi_rw+0x148>)
     82a:	4b38      	ldr	r3, [pc, #224]	; (90c <spi_rw+0x14c>)
     82c:	2201      	movs	r2, #1
     82e:	0018      	movs	r0, r3
     830:	4b37      	ldr	r3, [pc, #220]	; (910 <spi_rw+0x150>)
     832:	4798      	blx	r3

	while (u16Sz) {
     834:	e04c      	b.n	8d0 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     836:	68fb      	ldr	r3, [r7, #12]
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	2314      	movs	r3, #20
     83c:	18fb      	adds	r3, r7, r3
     83e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     840:	46c0      	nop			; (mov r8, r8)
     842:	4b32      	ldr	r3, [pc, #200]	; (90c <spi_rw+0x14c>)
     844:	0018      	movs	r0, r3
     846:	4b33      	ldr	r3, [pc, #204]	; (914 <spi_rw+0x154>)
     848:	4798      	blx	r3
     84a:	0003      	movs	r3, r0
     84c:	001a      	movs	r2, r3
     84e:	2301      	movs	r3, #1
     850:	4053      	eors	r3, r2
     852:	b2db      	uxtb	r3, r3
     854:	2b00      	cmp	r3, #0
     856:	d1f4      	bne.n	842 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     858:	46c0      	nop			; (mov r8, r8)
     85a:	2314      	movs	r3, #20
     85c:	18fb      	adds	r3, r7, r3
     85e:	881a      	ldrh	r2, [r3, #0]
     860:	4b2a      	ldr	r3, [pc, #168]	; (90c <spi_rw+0x14c>)
     862:	0011      	movs	r1, r2
     864:	0018      	movs	r0, r3
     866:	4b2c      	ldr	r3, [pc, #176]	; (918 <spi_rw+0x158>)
     868:	4798      	blx	r3
     86a:	1e03      	subs	r3, r0, #0
     86c:	d1f5      	bne.n	85a <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     86e:	46c0      	nop			; (mov r8, r8)
     870:	4b26      	ldr	r3, [pc, #152]	; (90c <spi_rw+0x14c>)
     872:	0018      	movs	r0, r3
     874:	4b29      	ldr	r3, [pc, #164]	; (91c <spi_rw+0x15c>)
     876:	4798      	blx	r3
     878:	0003      	movs	r3, r0
     87a:	001a      	movs	r2, r3
     87c:	2301      	movs	r3, #1
     87e:	4053      	eors	r3, r2
     880:	b2db      	uxtb	r3, r3
     882:	2b00      	cmp	r3, #0
     884:	d1f4      	bne.n	870 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     886:	46c0      	nop			; (mov r8, r8)
     888:	2310      	movs	r3, #16
     88a:	18fa      	adds	r2, r7, r3
     88c:	4b1f      	ldr	r3, [pc, #124]	; (90c <spi_rw+0x14c>)
     88e:	0011      	movs	r1, r2
     890:	0018      	movs	r0, r3
     892:	4b23      	ldr	r3, [pc, #140]	; (920 <spi_rw+0x160>)
     894:	4798      	blx	r3
     896:	1e03      	subs	r3, r0, #0
     898:	d1f6      	bne.n	888 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     89a:	2310      	movs	r3, #16
     89c:	18fb      	adds	r3, r7, r3
     89e:	881b      	ldrh	r3, [r3, #0]
     8a0:	b2da      	uxtb	r2, r3
     8a2:	68bb      	ldr	r3, [r7, #8]
     8a4:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     8a6:	1dbb      	adds	r3, r7, #6
     8a8:	881a      	ldrh	r2, [r3, #0]
     8aa:	1dbb      	adds	r3, r7, #6
     8ac:	3a01      	subs	r2, #1
     8ae:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     8b0:	2316      	movs	r3, #22
     8b2:	18fb      	adds	r3, r7, r3
     8b4:	781b      	ldrb	r3, [r3, #0]
     8b6:	2b00      	cmp	r3, #0
     8b8:	d102      	bne.n	8c0 <spi_rw+0x100>
			pu8Miso++;
     8ba:	68bb      	ldr	r3, [r7, #8]
     8bc:	3301      	adds	r3, #1
     8be:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     8c0:	2317      	movs	r3, #23
     8c2:	18fb      	adds	r3, r7, r3
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	2b00      	cmp	r3, #0
     8c8:	d102      	bne.n	8d0 <spi_rw+0x110>
			pu8Mosi++;
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	3301      	adds	r3, #1
     8ce:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     8d0:	1dbb      	adds	r3, r7, #6
     8d2:	881b      	ldrh	r3, [r3, #0]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d1ae      	bne.n	836 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     8d8:	46c0      	nop			; (mov r8, r8)
     8da:	4b0c      	ldr	r3, [pc, #48]	; (90c <spi_rw+0x14c>)
     8dc:	0018      	movs	r0, r3
     8de:	4b11      	ldr	r3, [pc, #68]	; (924 <spi_rw+0x164>)
     8e0:	4798      	blx	r3
     8e2:	0003      	movs	r3, r0
     8e4:	001a      	movs	r2, r3
     8e6:	2301      	movs	r3, #1
     8e8:	4053      	eors	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2b00      	cmp	r3, #0
     8ee:	d1f4      	bne.n	8da <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
     8f0:	4905      	ldr	r1, [pc, #20]	; (908 <spi_rw+0x148>)
     8f2:	4b06      	ldr	r3, [pc, #24]	; (90c <spi_rw+0x14c>)
     8f4:	2200      	movs	r2, #0
     8f6:	0018      	movs	r0, r3
     8f8:	4b05      	ldr	r3, [pc, #20]	; (910 <spi_rw+0x150>)
     8fa:	4798      	blx	r3

	return M2M_SUCCESS;
     8fc:	2300      	movs	r3, #0
}
     8fe:	0018      	movs	r0, r3
     900:	46bd      	mov	sp, r7
     902:	b006      	add	sp, #24
     904:	bd80      	pop	{r7, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	20004440 	.word	0x20004440
     90c:	20004444 	.word	0x20004444
     910:	00004fdd 	.word	0x00004fdd
     914:	000006a1 	.word	0x000006a1
     918:	000006f1 	.word	0x000006f1
     91c:	000006c9 	.word	0x000006c9
     920:	00000739 	.word	0x00000739
     924:	00000679 	.word	0x00000679

00000928 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     928:	b590      	push	{r4, r7, lr}
     92a:	b085      	sub	sp, #20
     92c:	af00      	add	r7, sp, #0
     92e:	0002      	movs	r2, r0
     930:	6039      	str	r1, [r7, #0]
     932:	1dfb      	adds	r3, r7, #7
     934:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     936:	230f      	movs	r3, #15
     938:	18fb      	adds	r3, r7, r3
     93a:	2200      	movs	r2, #0
     93c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     93e:	1dfb      	adds	r3, r7, #7
     940:	781b      	ldrb	r3, [r3, #0]
     942:	2b03      	cmp	r3, #3
     944:	d10f      	bne.n	966 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     946:	683b      	ldr	r3, [r7, #0]
     948:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     94a:	68bb      	ldr	r3, [r7, #8]
     94c:	6818      	ldr	r0, [r3, #0]
     94e:	68bb      	ldr	r3, [r7, #8]
     950:	6859      	ldr	r1, [r3, #4]
     952:	68bb      	ldr	r3, [r7, #8]
     954:	891b      	ldrh	r3, [r3, #8]
     956:	220f      	movs	r2, #15
     958:	18bc      	adds	r4, r7, r2
     95a:	001a      	movs	r2, r3
     95c:	4b0f      	ldr	r3, [pc, #60]	; (99c <nm_bus_ioctl+0x74>)
     95e:	4798      	blx	r3
     960:	0003      	movs	r3, r0
     962:	7023      	strb	r3, [r4, #0]
		}
		break;
     964:	e012      	b.n	98c <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
     966:	230f      	movs	r3, #15
     968:	18fb      	adds	r3, r7, r3
     96a:	22ff      	movs	r2, #255	; 0xff
     96c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     96e:	2386      	movs	r3, #134	; 0x86
     970:	005a      	lsls	r2, r3, #1
     972:	490b      	ldr	r1, [pc, #44]	; (9a0 <nm_bus_ioctl+0x78>)
     974:	4b0b      	ldr	r3, [pc, #44]	; (9a4 <nm_bus_ioctl+0x7c>)
     976:	0018      	movs	r0, r3
     978:	4b0b      	ldr	r3, [pc, #44]	; (9a8 <nm_bus_ioctl+0x80>)
     97a:	4798      	blx	r3
     97c:	4b0b      	ldr	r3, [pc, #44]	; (9ac <nm_bus_ioctl+0x84>)
     97e:	0018      	movs	r0, r3
     980:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <nm_bus_ioctl+0x88>)
     982:	4798      	blx	r3
     984:	200d      	movs	r0, #13
     986:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <nm_bus_ioctl+0x8c>)
     988:	4798      	blx	r3
			break;
     98a:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     98c:	230f      	movs	r3, #15
     98e:	18fb      	adds	r3, r7, r3
     990:	781b      	ldrb	r3, [r3, #0]
     992:	b25b      	sxtb	r3, r3
}
     994:	0018      	movs	r0, r3
     996:	46bd      	mov	sp, r7
     998:	b005      	add	sp, #20
     99a:	bd90      	pop	{r4, r7, pc}
     99c:	000007c1 	.word	0x000007c1
     9a0:	0000b758 	.word	0x0000b758
     9a4:	0000b730 	.word	0x0000b730
     9a8:	0000a811 	.word	0x0000a811
     9ac:	0000b744 	.word	0x0000b744
     9b0:	0000a931 	.word	0x0000a931
     9b4:	0000a845 	.word	0x0000a845

000009b8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b084      	sub	sp, #16
     9bc:	af00      	add	r7, sp, #0
     9be:	60f8      	str	r0, [r7, #12]
     9c0:	60b9      	str	r1, [r7, #8]
     9c2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     9c4:	687b      	ldr	r3, [r7, #4]
     9c6:	2b00      	cmp	r3, #0
     9c8:	d010      	beq.n	9ec <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     9ca:	68bb      	ldr	r3, [r7, #8]
     9cc:	781a      	ldrb	r2, [r3, #0]
     9ce:	68fb      	ldr	r3, [r7, #12]
     9d0:	701a      	strb	r2, [r3, #0]
		pDst++;
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	3301      	adds	r3, #1
     9d6:	60fb      	str	r3, [r7, #12]
		pSrc++;
     9d8:	68bb      	ldr	r3, [r7, #8]
     9da:	3301      	adds	r3, #1
     9dc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	3b01      	subs	r3, #1
     9e2:	607b      	str	r3, [r7, #4]
     9e4:	687b      	ldr	r3, [r7, #4]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d1ef      	bne.n	9ca <m2m_memcpy+0x12>
     9ea:	e000      	b.n	9ee <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     9ec:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
     9ee:	46bd      	mov	sp, r7
     9f0:	b004      	add	sp, #16
     9f2:	bd80      	pop	{r7, pc}

000009f4 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	b084      	sub	sp, #16
     9f8:	af00      	add	r7, sp, #0
     9fa:	60f8      	str	r0, [r7, #12]
     9fc:	607a      	str	r2, [r7, #4]
     9fe:	230b      	movs	r3, #11
     a00:	18fb      	adds	r3, r7, r3
     a02:	1c0a      	adds	r2, r1, #0
     a04:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     a06:	687b      	ldr	r3, [r7, #4]
     a08:	2b00      	cmp	r3, #0
     a0a:	d00e      	beq.n	a2a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     a0c:	68fb      	ldr	r3, [r7, #12]
     a0e:	220b      	movs	r2, #11
     a10:	18ba      	adds	r2, r7, r2
     a12:	7812      	ldrb	r2, [r2, #0]
     a14:	701a      	strb	r2, [r3, #0]
		pBuf++;
     a16:	68fb      	ldr	r3, [r7, #12]
     a18:	3301      	adds	r3, #1
     a1a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	3b01      	subs	r3, #1
     a20:	607b      	str	r3, [r7, #4]
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	2b00      	cmp	r3, #0
     a26:	d1f1      	bne.n	a0c <m2m_memset+0x18>
     a28:	e000      	b.n	a2c <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     a2a:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
     a2c:	46bd      	mov	sp, r7
     a2e:	b004      	add	sp, #16
     a30:	bd80      	pop	{r7, pc}
     a32:	46c0      	nop			; (mov r8, r8)

00000a34 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     a34:	b580      	push	{r7, lr}
     a36:	b084      	sub	sp, #16
     a38:	af00      	add	r7, sp, #0
     a3a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     a3c:	230e      	movs	r3, #14
     a3e:	18fb      	adds	r3, r7, r3
     a40:	2200      	movs	r2, #0
     a42:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     a44:	e009      	b.n	a5a <m2m_strlen+0x26>
	{
		u16StrLen ++;
     a46:	230e      	movs	r3, #14
     a48:	18fb      	adds	r3, r7, r3
     a4a:	881a      	ldrh	r2, [r3, #0]
     a4c:	230e      	movs	r3, #14
     a4e:	18fb      	adds	r3, r7, r3
     a50:	3201      	adds	r2, #1
     a52:	801a      	strh	r2, [r3, #0]
		pcStr++;
     a54:	687b      	ldr	r3, [r7, #4]
     a56:	3301      	adds	r3, #1
     a58:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     a5a:	687b      	ldr	r3, [r7, #4]
     a5c:	781b      	ldrb	r3, [r3, #0]
     a5e:	2b00      	cmp	r3, #0
     a60:	d1f1      	bne.n	a46 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
     a62:	230e      	movs	r3, #14
     a64:	18fb      	adds	r3, r7, r3
     a66:	881b      	ldrh	r3, [r3, #0]
}
     a68:	0018      	movs	r0, r3
     a6a:	46bd      	mov	sp, r7
     a6c:	b004      	add	sp, #16
     a6e:	bd80      	pop	{r7, pc}

00000a70 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     a70:	b590      	push	{r4, r7, lr}
     a72:	b083      	sub	sp, #12
     a74:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     a76:	1dfb      	adds	r3, r7, #7
     a78:	2200      	movs	r2, #0
     a7a:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     a7c:	2001      	movs	r0, #1
     a7e:	4b13      	ldr	r3, [pc, #76]	; (acc <hif_set_rx_done+0x5c>)
     a80:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     a82:	1dfc      	adds	r4, r7, #7
     a84:	003b      	movs	r3, r7
     a86:	4a12      	ldr	r2, [pc, #72]	; (ad0 <hif_set_rx_done+0x60>)
     a88:	0019      	movs	r1, r3
     a8a:	0010      	movs	r0, r2
     a8c:	4b11      	ldr	r3, [pc, #68]	; (ad4 <hif_set_rx_done+0x64>)
     a8e:	4798      	blx	r3
     a90:	0003      	movs	r3, r0
     a92:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     a94:	1dfb      	adds	r3, r7, #7
     a96:	781b      	ldrb	r3, [r3, #0]
     a98:	b25b      	sxtb	r3, r3
     a9a:	2b00      	cmp	r3, #0
     a9c:	d10d      	bne.n	aba <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     a9e:	683b      	ldr	r3, [r7, #0]
     aa0:	2202      	movs	r2, #2
     aa2:	4313      	orrs	r3, r2
     aa4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     aa6:	683b      	ldr	r3, [r7, #0]
     aa8:	1dfc      	adds	r4, r7, #7
     aaa:	4a09      	ldr	r2, [pc, #36]	; (ad0 <hif_set_rx_done+0x60>)
     aac:	0019      	movs	r1, r3
     aae:	0010      	movs	r0, r2
     ab0:	4b09      	ldr	r3, [pc, #36]	; (ad8 <hif_set_rx_done+0x68>)
     ab2:	4798      	blx	r3
     ab4:	0003      	movs	r3, r0
     ab6:	7023      	strb	r3, [r4, #0]
     ab8:	e000      	b.n	abc <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
     aba:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     abc:	1dfb      	adds	r3, r7, #7
     abe:	781b      	ldrb	r3, [r3, #0]
     ac0:	b25b      	sxtb	r3, r3

}
     ac2:	0018      	movs	r0, r3
     ac4:	46bd      	mov	sp, r7
     ac6:	b003      	add	sp, #12
     ac8:	bd90      	pop	{r4, r7, pc}
     aca:	46c0      	nop			; (mov r8, r8)
     acc:	00000641 	.word	0x00000641
     ad0:	00001070 	.word	0x00001070
     ad4:	00001ad5 	.word	0x00001ad5
     ad8:	00001af9 	.word	0x00001af9

00000adc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     adc:	b590      	push	{r4, r7, lr}
     ade:	b083      	sub	sp, #12
     ae0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     ae2:	1dfb      	adds	r3, r7, #7
     ae4:	2200      	movs	r2, #0
     ae6:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
     ae8:	4b1c      	ldr	r3, [pc, #112]	; (b5c <hif_chip_wake+0x80>)
     aea:	781b      	ldrb	r3, [r3, #0]
     aec:	b2db      	uxtb	r3, r3
     aee:	2b00      	cmp	r3, #0
     af0:	d121      	bne.n	b36 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     af2:	4b1b      	ldr	r3, [pc, #108]	; (b60 <hif_chip_wake+0x84>)
     af4:	781b      	ldrb	r3, [r3, #0]
     af6:	b2db      	uxtb	r3, r3
     af8:	2b03      	cmp	r3, #3
     afa:	d004      	beq.n	b06 <hif_chip_wake+0x2a>
     afc:	4b18      	ldr	r3, [pc, #96]	; (b60 <hif_chip_wake+0x84>)
     afe:	781b      	ldrb	r3, [r3, #0]
     b00:	b2db      	uxtb	r3, r3
     b02:	2b04      	cmp	r3, #4
     b04:	d117      	bne.n	b36 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
     b06:	1dfc      	adds	r4, r7, #7
     b08:	4b16      	ldr	r3, [pc, #88]	; (b64 <hif_chip_wake+0x88>)
     b0a:	4798      	blx	r3
     b0c:	0003      	movs	r3, r0
     b0e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     b10:	1dfb      	adds	r3, r7, #7
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	b25b      	sxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	d115      	bne.n	b46 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     b1a:	1dfc      	adds	r4, r7, #7
     b1c:	4a12      	ldr	r2, [pc, #72]	; (b68 <hif_chip_wake+0x8c>)
     b1e:	4b13      	ldr	r3, [pc, #76]	; (b6c <hif_chip_wake+0x90>)
     b20:	0011      	movs	r1, r2
     b22:	0018      	movs	r0, r3
     b24:	4b12      	ldr	r3, [pc, #72]	; (b70 <hif_chip_wake+0x94>)
     b26:	4798      	blx	r3
     b28:	0003      	movs	r3, r0
     b2a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     b2c:	1dfb      	adds	r3, r7, #7
     b2e:	781b      	ldrb	r3, [r3, #0]
     b30:	b25b      	sxtb	r3, r3
     b32:	2b00      	cmp	r3, #0
     b34:	d109      	bne.n	b4a <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     b36:	4b09      	ldr	r3, [pc, #36]	; (b5c <hif_chip_wake+0x80>)
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	b2db      	uxtb	r3, r3
     b3c:	3301      	adds	r3, #1
     b3e:	b2da      	uxtb	r2, r3
     b40:	4b06      	ldr	r3, [pc, #24]	; (b5c <hif_chip_wake+0x80>)
     b42:	701a      	strb	r2, [r3, #0]
     b44:	e002      	b.n	b4c <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	e000      	b.n	b4c <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     b4a:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
     b4c:	1dfb      	adds	r3, r7, #7
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	b25b      	sxtb	r3, r3
}
     b52:	0018      	movs	r0, r3
     b54:	46bd      	mov	sp, r7
     b56:	b003      	add	sp, #12
     b58:	bd90      	pop	{r4, r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	200000ad 	.word	0x200000ad
     b60:	200000ac 	.word	0x200000ac
     b64:	000018f9 	.word	0x000018f9
     b68:	00005678 	.word	0x00005678
     b6c:	00001074 	.word	0x00001074
     b70:	00001af9 	.word	0x00001af9

00000b74 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     b74:	b590      	push	{r4, r7, lr}
     b76:	b083      	sub	sp, #12
     b78:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     b7a:	1dfb      	adds	r3, r7, #7
     b7c:	2200      	movs	r2, #0
     b7e:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
     b80:	4b29      	ldr	r3, [pc, #164]	; (c28 <hif_chip_sleep+0xb4>)
     b82:	781b      	ldrb	r3, [r3, #0]
     b84:	b2db      	uxtb	r3, r3
     b86:	2b00      	cmp	r3, #0
     b88:	d006      	beq.n	b98 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
     b8a:	4b27      	ldr	r3, [pc, #156]	; (c28 <hif_chip_sleep+0xb4>)
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	b2db      	uxtb	r3, r3
     b90:	3b01      	subs	r3, #1
     b92:	b2da      	uxtb	r2, r3
     b94:	4b24      	ldr	r3, [pc, #144]	; (c28 <hif_chip_sleep+0xb4>)
     b96:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
     b98:	4b23      	ldr	r3, [pc, #140]	; (c28 <hif_chip_sleep+0xb4>)
     b9a:	781b      	ldrb	r3, [r3, #0]
     b9c:	b2db      	uxtb	r3, r3
     b9e:	2b00      	cmp	r3, #0
     ba0:	d13a      	bne.n	c18 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     ba2:	4b22      	ldr	r3, [pc, #136]	; (c2c <hif_chip_sleep+0xb8>)
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	b2db      	uxtb	r3, r3
     ba8:	2b03      	cmp	r3, #3
     baa:	d004      	beq.n	bb6 <hif_chip_sleep+0x42>
     bac:	4b1f      	ldr	r3, [pc, #124]	; (c2c <hif_chip_sleep+0xb8>)
     bae:	781b      	ldrb	r3, [r3, #0]
     bb0:	b2db      	uxtb	r3, r3
     bb2:	2b04      	cmp	r3, #4
     bb4:	d130      	bne.n	c18 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
     bb6:	2300      	movs	r3, #0
     bb8:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     bba:	1dfc      	adds	r4, r7, #7
     bbc:	4a1c      	ldr	r2, [pc, #112]	; (c30 <hif_chip_sleep+0xbc>)
     bbe:	4b1d      	ldr	r3, [pc, #116]	; (c34 <hif_chip_sleep+0xc0>)
     bc0:	0011      	movs	r1, r2
     bc2:	0018      	movs	r0, r3
     bc4:	4b1c      	ldr	r3, [pc, #112]	; (c38 <hif_chip_sleep+0xc4>)
     bc6:	4798      	blx	r3
     bc8:	0003      	movs	r3, r0
     bca:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     bcc:	1dfb      	adds	r3, r7, #7
     bce:	781b      	ldrb	r3, [r3, #0]
     bd0:	b25b      	sxtb	r3, r3
     bd2:	2b00      	cmp	r3, #0
     bd4:	d11d      	bne.n	c12 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     bd6:	1dfc      	adds	r4, r7, #7
     bd8:	003b      	movs	r3, r7
     bda:	0019      	movs	r1, r3
     bdc:	2001      	movs	r0, #1
     bde:	4b17      	ldr	r3, [pc, #92]	; (c3c <hif_chip_sleep+0xc8>)
     be0:	4798      	blx	r3
     be2:	0003      	movs	r3, r0
     be4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     be6:	1dfb      	adds	r3, r7, #7
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	b25b      	sxtb	r3, r3
     bec:	2b00      	cmp	r3, #0
     bee:	d112      	bne.n	c16 <hif_chip_sleep+0xa2>
			if(reg&0x2)
     bf0:	683b      	ldr	r3, [r7, #0]
     bf2:	2202      	movs	r2, #2
     bf4:	4013      	ands	r3, r2
     bf6:	d00f      	beq.n	c18 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
     bf8:	683b      	ldr	r3, [r7, #0]
     bfa:	2202      	movs	r2, #2
     bfc:	4393      	bics	r3, r2
     bfe:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
     c00:	683b      	ldr	r3, [r7, #0]
     c02:	1dfc      	adds	r4, r7, #7
     c04:	0019      	movs	r1, r3
     c06:	2001      	movs	r0, #1
     c08:	4b0b      	ldr	r3, [pc, #44]	; (c38 <hif_chip_sleep+0xc4>)
     c0a:	4798      	blx	r3
     c0c:	0003      	movs	r3, r0
     c0e:	7023      	strb	r3, [r4, #0]
     c10:	e002      	b.n	c18 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	e000      	b.n	c18 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
     c16:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
     c18:	1dfb      	adds	r3, r7, #7
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	b25b      	sxtb	r3, r3
}
     c1e:	0018      	movs	r0, r3
     c20:	46bd      	mov	sp, r7
     c22:	b003      	add	sp, #12
     c24:	bd90      	pop	{r4, r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	200000ad 	.word	0x200000ad
     c2c:	200000ac 	.word	0x200000ac
     c30:	00004321 	.word	0x00004321
     c34:	00001074 	.word	0x00001074
     c38:	00001af9 	.word	0x00001af9
     c3c:	00001ad5 	.word	0x00001ad5

00000c40 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     c40:	b590      	push	{r4, r7, lr}
     c42:	b089      	sub	sp, #36	; 0x24
     c44:	af00      	add	r7, sp, #0
     c46:	0004      	movs	r4, r0
     c48:	0008      	movs	r0, r1
     c4a:	603a      	str	r2, [r7, #0]
     c4c:	0019      	movs	r1, r3
     c4e:	1dfb      	adds	r3, r7, #7
     c50:	1c22      	adds	r2, r4, #0
     c52:	701a      	strb	r2, [r3, #0]
     c54:	1dbb      	adds	r3, r7, #6
     c56:	1c02      	adds	r2, r0, #0
     c58:	701a      	strb	r2, [r3, #0]
     c5a:	1d3b      	adds	r3, r7, #4
     c5c:	1c0a      	adds	r2, r1, #0
     c5e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     c60:	231f      	movs	r3, #31
     c62:	18fb      	adds	r3, r7, r3
     c64:	22ff      	movs	r2, #255	; 0xff
     c66:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     c68:	1dbb      	adds	r3, r7, #6
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	227f      	movs	r2, #127	; 0x7f
     c6e:	4013      	ands	r3, r2
     c70:	b2da      	uxtb	r2, r3
     c72:	2318      	movs	r3, #24
     c74:	18fb      	adds	r3, r7, r3
     c76:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     c78:	2318      	movs	r3, #24
     c7a:	18fb      	adds	r3, r7, r3
     c7c:	1dfa      	adds	r2, r7, #7
     c7e:	7812      	ldrb	r2, [r2, #0]
     c80:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     c82:	2318      	movs	r3, #24
     c84:	18fb      	adds	r3, r7, r3
     c86:	2208      	movs	r2, #8
     c88:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     c8c:	2b00      	cmp	r3, #0
     c8e:	d011      	beq.n	cb4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     c90:	2318      	movs	r3, #24
     c92:	18fb      	adds	r3, r7, r3
     c94:	885b      	ldrh	r3, [r3, #2]
     c96:	b29a      	uxth	r2, r3
     c98:	2338      	movs	r3, #56	; 0x38
     c9a:	18f9      	adds	r1, r7, r3
     c9c:	2334      	movs	r3, #52	; 0x34
     c9e:	18fb      	adds	r3, r7, r3
     ca0:	8809      	ldrh	r1, [r1, #0]
     ca2:	881b      	ldrh	r3, [r3, #0]
     ca4:	18cb      	adds	r3, r1, r3
     ca6:	b29b      	uxth	r3, r3
     ca8:	18d3      	adds	r3, r2, r3
     caa:	b29a      	uxth	r2, r3
     cac:	2318      	movs	r3, #24
     cae:	18fb      	adds	r3, r7, r3
     cb0:	805a      	strh	r2, [r3, #2]
     cb2:	e00a      	b.n	cca <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     cb4:	2318      	movs	r3, #24
     cb6:	18fb      	adds	r3, r7, r3
     cb8:	885b      	ldrh	r3, [r3, #2]
     cba:	b29a      	uxth	r2, r3
     cbc:	1d3b      	adds	r3, r7, #4
     cbe:	881b      	ldrh	r3, [r3, #0]
     cc0:	18d3      	adds	r3, r2, r3
     cc2:	b29a      	uxth	r2, r3
     cc4:	2318      	movs	r3, #24
     cc6:	18fb      	adds	r3, r7, r3
     cc8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     cca:	231f      	movs	r3, #31
     ccc:	18fc      	adds	r4, r7, r3
     cce:	4b9b      	ldr	r3, [pc, #620]	; (f3c <hif_send+0x2fc>)
     cd0:	4798      	blx	r3
     cd2:	0003      	movs	r3, r0
     cd4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     cd6:	231f      	movs	r3, #31
     cd8:	18fb      	adds	r3, r7, r3
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	b25b      	sxtb	r3, r3
     cde:	2b00      	cmp	r3, #0
     ce0:	d000      	beq.n	ce4 <hif_send+0xa4>
     ce2:	e103      	b.n	eec <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
     ce4:	2300      	movs	r3, #0
     ce6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     ce8:	230e      	movs	r3, #14
     cea:	18fb      	adds	r3, r7, r3
     cec:	2200      	movs	r2, #0
     cee:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
     cf0:	2300      	movs	r3, #0
     cf2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     cf4:	1dfb      	adds	r3, r7, #7
     cf6:	781a      	ldrb	r2, [r3, #0]
     cf8:	697b      	ldr	r3, [r7, #20]
     cfa:	4313      	orrs	r3, r2
     cfc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     cfe:	1dbb      	adds	r3, r7, #6
     d00:	781b      	ldrb	r3, [r3, #0]
     d02:	021a      	lsls	r2, r3, #8
     d04:	697b      	ldr	r3, [r7, #20]
     d06:	4313      	orrs	r3, r2
     d08:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     d0a:	2318      	movs	r3, #24
     d0c:	18fb      	adds	r3, r7, r3
     d0e:	885b      	ldrh	r3, [r3, #2]
     d10:	b29b      	uxth	r3, r3
     d12:	041a      	lsls	r2, r3, #16
     d14:	697b      	ldr	r3, [r7, #20]
     d16:	4313      	orrs	r3, r2
     d18:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     d1a:	697b      	ldr	r3, [r7, #20]
     d1c:	221f      	movs	r2, #31
     d1e:	18bc      	adds	r4, r7, r2
     d20:	4a87      	ldr	r2, [pc, #540]	; (f40 <hif_send+0x300>)
     d22:	0019      	movs	r1, r3
     d24:	0010      	movs	r0, r2
     d26:	4b87      	ldr	r3, [pc, #540]	; (f44 <hif_send+0x304>)
     d28:	4798      	blx	r3
     d2a:	0003      	movs	r3, r0
     d2c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     d2e:	231f      	movs	r3, #31
     d30:	18fb      	adds	r3, r7, r3
     d32:	781b      	ldrb	r3, [r3, #0]
     d34:	b25b      	sxtb	r3, r3
     d36:	2b00      	cmp	r3, #0
     d38:	d000      	beq.n	d3c <hif_send+0xfc>
     d3a:	e0ee      	b.n	f1a <hif_send+0x2da>


		reg = 0;
     d3c:	2300      	movs	r3, #0
     d3e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
     d40:	697b      	ldr	r3, [r7, #20]
     d42:	2202      	movs	r2, #2
     d44:	4313      	orrs	r3, r2
     d46:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     d48:	697b      	ldr	r3, [r7, #20]
     d4a:	221f      	movs	r2, #31
     d4c:	18bc      	adds	r4, r7, r2
     d4e:	4a7e      	ldr	r2, [pc, #504]	; (f48 <hif_send+0x308>)
     d50:	0019      	movs	r1, r3
     d52:	0010      	movs	r0, r2
     d54:	4b7b      	ldr	r3, [pc, #492]	; (f44 <hif_send+0x304>)
     d56:	4798      	blx	r3
     d58:	0003      	movs	r3, r0
     d5a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     d5c:	231f      	movs	r3, #31
     d5e:	18fb      	adds	r3, r7, r3
     d60:	781b      	ldrb	r3, [r3, #0]
     d62:	b25b      	sxtb	r3, r3
     d64:	2b00      	cmp	r3, #0
     d66:	d000      	beq.n	d6a <hif_send+0x12a>
     d68:	e0d9      	b.n	f1e <hif_send+0x2de>
		dma_addr = 0;
     d6a:	2300      	movs	r3, #0
     d6c:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     d6e:	230e      	movs	r3, #14
     d70:	18fb      	adds	r3, r7, r3
     d72:	2200      	movs	r2, #0
     d74:	801a      	strh	r2, [r3, #0]
     d76:	e031      	b.n	ddc <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     d78:	231f      	movs	r3, #31
     d7a:	18fc      	adds	r4, r7, r3
     d7c:	2314      	movs	r3, #20
     d7e:	18fb      	adds	r3, r7, r3
     d80:	4a71      	ldr	r2, [pc, #452]	; (f48 <hif_send+0x308>)
     d82:	0019      	movs	r1, r3
     d84:	0010      	movs	r0, r2
     d86:	4b71      	ldr	r3, [pc, #452]	; (f4c <hif_send+0x30c>)
     d88:	4798      	blx	r3
     d8a:	0003      	movs	r3, r0
     d8c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     d8e:	231f      	movs	r3, #31
     d90:	18fb      	adds	r3, r7, r3
     d92:	781b      	ldrb	r3, [r3, #0]
     d94:	b25b      	sxtb	r3, r3
     d96:	2b00      	cmp	r3, #0
     d98:	d128      	bne.n	dec <hif_send+0x1ac>
			if (!(reg & 0x2))
     d9a:	697b      	ldr	r3, [r7, #20]
     d9c:	2202      	movs	r2, #2
     d9e:	4013      	ands	r3, r2
     da0:	d113      	bne.n	dca <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     da2:	231f      	movs	r3, #31
     da4:	18fc      	adds	r4, r7, r3
     da6:	2310      	movs	r3, #16
     da8:	18fb      	adds	r3, r7, r3
     daa:	4a69      	ldr	r2, [pc, #420]	; (f50 <hif_send+0x310>)
     dac:	0019      	movs	r1, r3
     dae:	0010      	movs	r0, r2
     db0:	4b66      	ldr	r3, [pc, #408]	; (f4c <hif_send+0x30c>)
     db2:	4798      	blx	r3
     db4:	0003      	movs	r3, r0
     db6:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
     db8:	231f      	movs	r3, #31
     dba:	18fb      	adds	r3, r7, r3
     dbc:	781b      	ldrb	r3, [r3, #0]
     dbe:	b25b      	sxtb	r3, r3
     dc0:	2b00      	cmp	r3, #0
     dc2:	d015      	beq.n	df0 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     dc4:	2300      	movs	r3, #0
     dc6:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
     dc8:	e012      	b.n	df0 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     dca:	230e      	movs	r3, #14
     dcc:	18fb      	adds	r3, r7, r3
     dce:	881b      	ldrh	r3, [r3, #0]
     dd0:	b29b      	uxth	r3, r3
     dd2:	3301      	adds	r3, #1
     dd4:	b29a      	uxth	r2, r3
     dd6:	230e      	movs	r3, #14
     dd8:	18fb      	adds	r3, r7, r3
     dda:	801a      	strh	r2, [r3, #0]
     ddc:	230e      	movs	r3, #14
     dde:	18fb      	adds	r3, r7, r3
     de0:	881b      	ldrh	r3, [r3, #0]
     de2:	b29b      	uxth	r3, r3
     de4:	4a5b      	ldr	r2, [pc, #364]	; (f54 <hif_send+0x314>)
     de6:	4293      	cmp	r3, r2
     de8:	d9c6      	bls.n	d78 <hif_send+0x138>
     dea:	e002      	b.n	df2 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
     dec:	46c0      	nop			; (mov r8, r8)
     dee:	e000      	b.n	df2 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
     df0:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     df2:	693b      	ldr	r3, [r7, #16]
     df4:	2b00      	cmp	r3, #0
     df6:	d100      	bne.n	dfa <hif_send+0x1ba>
     df8:	e073      	b.n	ee2 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     dfa:	693b      	ldr	r3, [r7, #16]
     dfc:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     dfe:	2318      	movs	r3, #24
     e00:	18fb      	adds	r3, r7, r3
     e02:	885b      	ldrh	r3, [r3, #2]
     e04:	b29a      	uxth	r2, r3
     e06:	2318      	movs	r3, #24
     e08:	18fb      	adds	r3, r7, r3
     e0a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     e0c:	68bb      	ldr	r3, [r7, #8]
     e0e:	221f      	movs	r2, #31
     e10:	18bc      	adds	r4, r7, r2
     e12:	2218      	movs	r2, #24
     e14:	18b9      	adds	r1, r7, r2
     e16:	2208      	movs	r2, #8
     e18:	0018      	movs	r0, r3
     e1a:	4b4f      	ldr	r3, [pc, #316]	; (f58 <hif_send+0x318>)
     e1c:	4798      	blx	r3
     e1e:	0003      	movs	r3, r0
     e20:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     e22:	231f      	movs	r3, #31
     e24:	18fb      	adds	r3, r7, r3
     e26:	781b      	ldrb	r3, [r3, #0]
     e28:	b25b      	sxtb	r3, r3
     e2a:	2b00      	cmp	r3, #0
     e2c:	d000      	beq.n	e30 <hif_send+0x1f0>
     e2e:	e078      	b.n	f22 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     e30:	68bb      	ldr	r3, [r7, #8]
     e32:	3308      	adds	r3, #8
     e34:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
     e36:	683b      	ldr	r3, [r7, #0]
     e38:	2b00      	cmp	r3, #0
     e3a:	d015      	beq.n	e68 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     e3c:	68b8      	ldr	r0, [r7, #8]
     e3e:	1d3b      	adds	r3, r7, #4
     e40:	881a      	ldrh	r2, [r3, #0]
     e42:	231f      	movs	r3, #31
     e44:	18fc      	adds	r4, r7, r3
     e46:	683b      	ldr	r3, [r7, #0]
     e48:	0019      	movs	r1, r3
     e4a:	4b43      	ldr	r3, [pc, #268]	; (f58 <hif_send+0x318>)
     e4c:	4798      	blx	r3
     e4e:	0003      	movs	r3, r0
     e50:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     e52:	231f      	movs	r3, #31
     e54:	18fb      	adds	r3, r7, r3
     e56:	781b      	ldrb	r3, [r3, #0]
     e58:	b25b      	sxtb	r3, r3
     e5a:	2b00      	cmp	r3, #0
     e5c:	d163      	bne.n	f26 <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
     e5e:	1d3b      	adds	r3, r7, #4
     e60:	881a      	ldrh	r2, [r3, #0]
     e62:	68bb      	ldr	r3, [r7, #8]
     e64:	18d3      	adds	r3, r2, r3
     e66:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
     e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e6a:	2b00      	cmp	r3, #0
     e6c:	d021      	beq.n	eb2 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     e6e:	2338      	movs	r3, #56	; 0x38
     e70:	18fb      	adds	r3, r7, r3
     e72:	881a      	ldrh	r2, [r3, #0]
     e74:	1d3b      	adds	r3, r7, #4
     e76:	881b      	ldrh	r3, [r3, #0]
     e78:	1ad3      	subs	r3, r2, r3
     e7a:	001a      	movs	r2, r3
     e7c:	68bb      	ldr	r3, [r7, #8]
     e7e:	18d3      	adds	r3, r2, r3
     e80:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     e82:	68b8      	ldr	r0, [r7, #8]
     e84:	2334      	movs	r3, #52	; 0x34
     e86:	18fb      	adds	r3, r7, r3
     e88:	881a      	ldrh	r2, [r3, #0]
     e8a:	231f      	movs	r3, #31
     e8c:	18fc      	adds	r4, r7, r3
     e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e90:	0019      	movs	r1, r3
     e92:	4b31      	ldr	r3, [pc, #196]	; (f58 <hif_send+0x318>)
     e94:	4798      	blx	r3
     e96:	0003      	movs	r3, r0
     e98:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     e9a:	231f      	movs	r3, #31
     e9c:	18fb      	adds	r3, r7, r3
     e9e:	781b      	ldrb	r3, [r3, #0]
     ea0:	b25b      	sxtb	r3, r3
     ea2:	2b00      	cmp	r3, #0
     ea4:	d141      	bne.n	f2a <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
     ea6:	2334      	movs	r3, #52	; 0x34
     ea8:	18fb      	adds	r3, r7, r3
     eaa:	881a      	ldrh	r2, [r3, #0]
     eac:	68bb      	ldr	r3, [r7, #8]
     eae:	18d3      	adds	r3, r2, r3
     eb0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
     eb2:	693b      	ldr	r3, [r7, #16]
     eb4:	009b      	lsls	r3, r3, #2
     eb6:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
     eb8:	697b      	ldr	r3, [r7, #20]
     eba:	2202      	movs	r2, #2
     ebc:	4313      	orrs	r3, r2
     ebe:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     ec0:	697b      	ldr	r3, [r7, #20]
     ec2:	221f      	movs	r2, #31
     ec4:	18bc      	adds	r4, r7, r2
     ec6:	4a25      	ldr	r2, [pc, #148]	; (f5c <hif_send+0x31c>)
     ec8:	0019      	movs	r1, r3
     eca:	0010      	movs	r0, r2
     ecc:	4b1d      	ldr	r3, [pc, #116]	; (f44 <hif_send+0x304>)
     ece:	4798      	blx	r3
     ed0:	0003      	movs	r3, r0
     ed2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
     ed4:	231f      	movs	r3, #31
     ed6:	18fb      	adds	r3, r7, r3
     ed8:	781b      	ldrb	r3, [r3, #0]
     eda:	b25b      	sxtb	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	d015      	beq.n	f0c <hif_send+0x2cc>
     ee0:	e024      	b.n	f2c <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
     ee2:	231f      	movs	r3, #31
     ee4:	18fb      	adds	r3, r7, r3
     ee6:	22fd      	movs	r2, #253	; 0xfd
     ee8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
     eea:	e01f      	b.n	f2c <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     eec:	23a0      	movs	r3, #160	; 0xa0
     eee:	33ff      	adds	r3, #255	; 0xff
     ef0:	001a      	movs	r2, r3
     ef2:	491b      	ldr	r1, [pc, #108]	; (f60 <hif_send+0x320>)
     ef4:	4b1b      	ldr	r3, [pc, #108]	; (f64 <hif_send+0x324>)
     ef6:	0018      	movs	r0, r3
     ef8:	4b1b      	ldr	r3, [pc, #108]	; (f68 <hif_send+0x328>)
     efa:	4798      	blx	r3
     efc:	4b1b      	ldr	r3, [pc, #108]	; (f6c <hif_send+0x32c>)
     efe:	0018      	movs	r0, r3
     f00:	4b1b      	ldr	r3, [pc, #108]	; (f70 <hif_send+0x330>)
     f02:	4798      	blx	r3
     f04:	200d      	movs	r0, #13
     f06:	4b1b      	ldr	r3, [pc, #108]	; (f74 <hif_send+0x334>)
     f08:	4798      	blx	r3
		goto ERR1;
     f0a:	e00f      	b.n	f2c <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
     f0c:	231f      	movs	r3, #31
     f0e:	18fc      	adds	r4, r7, r3
     f10:	4b19      	ldr	r3, [pc, #100]	; (f78 <hif_send+0x338>)
     f12:	4798      	blx	r3
     f14:	0003      	movs	r3, r0
     f16:	7023      	strb	r3, [r4, #0]
     f18:	e008      	b.n	f2c <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	e006      	b.n	f2c <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	e004      	b.n	f2c <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	e002      	b.n	f2c <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	e000      	b.n	f2c <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     f2a:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
     f2c:	231f      	movs	r3, #31
     f2e:	18fb      	adds	r3, r7, r3
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	b25b      	sxtb	r3, r3
}
     f34:	0018      	movs	r0, r3
     f36:	46bd      	mov	sp, r7
     f38:	b009      	add	sp, #36	; 0x24
     f3a:	bd90      	pop	{r4, r7, pc}
     f3c:	00000add 	.word	0x00000add
     f40:	0000108c 	.word	0x0000108c
     f44:	00001af9 	.word	0x00001af9
     f48:	00001078 	.word	0x00001078
     f4c:	00001ad5 	.word	0x00001ad5
     f50:	00150400 	.word	0x00150400
     f54:	000003e7 	.word	0x000003e7
     f58:	00001c41 	.word	0x00001c41
     f5c:	0000106c 	.word	0x0000106c
     f60:	0000b9a8 	.word	0x0000b9a8
     f64:	0000b768 	.word	0x0000b768
     f68:	0000a811 	.word	0x0000a811
     f6c:	0000b77c 	.word	0x0000b77c
     f70:	0000a931 	.word	0x0000a931
     f74:	0000a845 	.word	0x0000a845
     f78:	00000b75 	.word	0x00000b75

00000f7c <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
     f7c:	b590      	push	{r4, r7, lr}
     f7e:	b087      	sub	sp, #28
     f80:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
     f82:	230f      	movs	r3, #15
     f84:	18fb      	adds	r3, r7, r3
     f86:	22fa      	movs	r2, #250	; 0xfa
     f88:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     f8a:	230f      	movs	r3, #15
     f8c:	18fc      	adds	r4, r7, r3
     f8e:	4bda      	ldr	r3, [pc, #872]	; (12f8 <hif_isr+0x37c>)
     f90:	4798      	blx	r3
     f92:	0003      	movs	r3, r0
     f94:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     f96:	230f      	movs	r3, #15
     f98:	18fb      	adds	r3, r7, r3
     f9a:	781b      	ldrb	r3, [r3, #0]
     f9c:	b25b      	sxtb	r3, r3
     f9e:	2b00      	cmp	r3, #0
     fa0:	d000      	beq.n	fa4 <hif_isr+0x28>
     fa2:	e192      	b.n	12ca <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     fa4:	230f      	movs	r3, #15
     fa6:	18fc      	adds	r4, r7, r3
     fa8:	2308      	movs	r3, #8
     faa:	18fb      	adds	r3, r7, r3
     fac:	4ad3      	ldr	r2, [pc, #844]	; (12fc <hif_isr+0x380>)
     fae:	0019      	movs	r1, r3
     fb0:	0010      	movs	r0, r2
     fb2:	4bd3      	ldr	r3, [pc, #844]	; (1300 <hif_isr+0x384>)
     fb4:	4798      	blx	r3
     fb6:	0003      	movs	r3, r0
     fb8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
     fba:	230f      	movs	r3, #15
     fbc:	18fb      	adds	r3, r7, r3
     fbe:	781b      	ldrb	r3, [r3, #0]
     fc0:	b25b      	sxtb	r3, r3
     fc2:	2b00      	cmp	r3, #0
     fc4:	d000      	beq.n	fc8 <hif_isr+0x4c>
     fc6:	e172      	b.n	12ae <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
     fc8:	68bb      	ldr	r3, [r7, #8]
     fca:	2201      	movs	r2, #1
     fcc:	4013      	ands	r3, r2
     fce:	d100      	bne.n	fd2 <hif_isr+0x56>
     fd0:	e15c      	b.n	128c <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
     fd2:	2000      	movs	r0, #0
     fd4:	4bcb      	ldr	r3, [pc, #812]	; (1304 <hif_isr+0x388>)
     fd6:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
     fd8:	68bb      	ldr	r3, [r7, #8]
     fda:	2201      	movs	r2, #1
     fdc:	4393      	bics	r3, r2
     fde:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     fe0:	68bb      	ldr	r3, [r7, #8]
     fe2:	220f      	movs	r2, #15
     fe4:	18bc      	adds	r4, r7, r2
     fe6:	4ac5      	ldr	r2, [pc, #788]	; (12fc <hif_isr+0x380>)
     fe8:	0019      	movs	r1, r3
     fea:	0010      	movs	r0, r2
     fec:	4bc6      	ldr	r3, [pc, #792]	; (1308 <hif_isr+0x38c>)
     fee:	4798      	blx	r3
     ff0:	0003      	movs	r3, r0
     ff2:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
     ff4:	230f      	movs	r3, #15
     ff6:	18fb      	adds	r3, r7, r3
     ff8:	781b      	ldrb	r3, [r3, #0]
     ffa:	b25b      	sxtb	r3, r3
     ffc:	2b00      	cmp	r3, #0
     ffe:	d000      	beq.n	1002 <hif_isr+0x86>
    1000:	e1bc      	b.n	137c <hif_isr+0x400>
				gu8HifSizeDone = 0;
    1002:	4bc2      	ldr	r3, [pc, #776]	; (130c <hif_isr+0x390>)
    1004:	2200      	movs	r2, #0
    1006:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    1008:	68bb      	ldr	r3, [r7, #8]
    100a:	089b      	lsrs	r3, r3, #2
    100c:	b29a      	uxth	r2, r3
    100e:	230c      	movs	r3, #12
    1010:	18fb      	adds	r3, r7, r3
    1012:	0512      	lsls	r2, r2, #20
    1014:	0d12      	lsrs	r2, r2, #20
    1016:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    1018:	230c      	movs	r3, #12
    101a:	18fb      	adds	r3, r7, r3
    101c:	881b      	ldrh	r3, [r3, #0]
    101e:	2b00      	cmp	r3, #0
    1020:	d100      	bne.n	1024 <hif_isr+0xa8>
    1022:	e121      	b.n	1268 <hif_isr+0x2ec>
					uint32 address = 0;
    1024:	2300      	movs	r3, #0
    1026:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1028:	230f      	movs	r3, #15
    102a:	18fc      	adds	r4, r7, r3
    102c:	003b      	movs	r3, r7
    102e:	4ab8      	ldr	r2, [pc, #736]	; (1310 <hif_isr+0x394>)
    1030:	0019      	movs	r1, r3
    1032:	0010      	movs	r0, r2
    1034:	4bb2      	ldr	r3, [pc, #712]	; (1300 <hif_isr+0x384>)
    1036:	4798      	blx	r3
    1038:	0003      	movs	r3, r0
    103a:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	b25b      	sxtb	r3, r3
    1044:	2b00      	cmp	r3, #0
    1046:	d011      	beq.n	106c <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1048:	23e7      	movs	r3, #231	; 0xe7
    104a:	005a      	lsls	r2, r3, #1
    104c:	49b1      	ldr	r1, [pc, #708]	; (1314 <hif_isr+0x398>)
    104e:	4bb2      	ldr	r3, [pc, #712]	; (1318 <hif_isr+0x39c>)
    1050:	0018      	movs	r0, r3
    1052:	4bb2      	ldr	r3, [pc, #712]	; (131c <hif_isr+0x3a0>)
    1054:	4798      	blx	r3
    1056:	4bb2      	ldr	r3, [pc, #712]	; (1320 <hif_isr+0x3a4>)
    1058:	0018      	movs	r0, r3
    105a:	4bb2      	ldr	r3, [pc, #712]	; (1324 <hif_isr+0x3a8>)
    105c:	4798      	blx	r3
    105e:	200d      	movs	r0, #13
    1060:	4bb1      	ldr	r3, [pc, #708]	; (1328 <hif_isr+0x3ac>)
    1062:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1064:	2001      	movs	r0, #1
    1066:	4ba7      	ldr	r3, [pc, #668]	; (1304 <hif_isr+0x388>)
    1068:	4798      	blx	r3
						goto ERR1;
    106a:	e188      	b.n	137e <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    106c:	683b      	ldr	r3, [r7, #0]
    106e:	220f      	movs	r2, #15
    1070:	18bc      	adds	r4, r7, r2
    1072:	1d39      	adds	r1, r7, #4
    1074:	2204      	movs	r2, #4
    1076:	0018      	movs	r0, r3
    1078:	4bac      	ldr	r3, [pc, #688]	; (132c <hif_isr+0x3b0>)
    107a:	4798      	blx	r3
    107c:	0003      	movs	r3, r0
    107e:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1080:	1d3b      	adds	r3, r7, #4
    1082:	885b      	ldrh	r3, [r3, #2]
    1084:	b29a      	uxth	r2, r3
    1086:	1d3b      	adds	r3, r7, #4
    1088:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    108a:	230f      	movs	r3, #15
    108c:	18fb      	adds	r3, r7, r3
    108e:	781b      	ldrb	r3, [r3, #0]
    1090:	b25b      	sxtb	r3, r3
    1092:	2b00      	cmp	r3, #0
    1094:	d011      	beq.n	10ba <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    1096:	23eb      	movs	r3, #235	; 0xeb
    1098:	005a      	lsls	r2, r3, #1
    109a:	499e      	ldr	r1, [pc, #632]	; (1314 <hif_isr+0x398>)
    109c:	4b9e      	ldr	r3, [pc, #632]	; (1318 <hif_isr+0x39c>)
    109e:	0018      	movs	r0, r3
    10a0:	4b9e      	ldr	r3, [pc, #632]	; (131c <hif_isr+0x3a0>)
    10a2:	4798      	blx	r3
    10a4:	4ba2      	ldr	r3, [pc, #648]	; (1330 <hif_isr+0x3b4>)
    10a6:	0018      	movs	r0, r3
    10a8:	4b9e      	ldr	r3, [pc, #632]	; (1324 <hif_isr+0x3a8>)
    10aa:	4798      	blx	r3
    10ac:	200d      	movs	r0, #13
    10ae:	4b9e      	ldr	r3, [pc, #632]	; (1328 <hif_isr+0x3ac>)
    10b0:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    10b2:	2001      	movs	r0, #1
    10b4:	4b93      	ldr	r3, [pc, #588]	; (1304 <hif_isr+0x388>)
    10b6:	4798      	blx	r3
						goto ERR1;
    10b8:	e161      	b.n	137e <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    10ba:	1d3b      	adds	r3, r7, #4
    10bc:	885b      	ldrh	r3, [r3, #2]
    10be:	b29b      	uxth	r3, r3
    10c0:	220c      	movs	r2, #12
    10c2:	18ba      	adds	r2, r7, r2
    10c4:	8812      	ldrh	r2, [r2, #0]
    10c6:	429a      	cmp	r2, r3
    10c8:	d02e      	beq.n	1128 <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    10ca:	230c      	movs	r3, #12
    10cc:	18fb      	adds	r3, r7, r3
    10ce:	881b      	ldrh	r3, [r3, #0]
    10d0:	1d3a      	adds	r2, r7, #4
    10d2:	8852      	ldrh	r2, [r2, #2]
    10d4:	b292      	uxth	r2, r2
    10d6:	1a9b      	subs	r3, r3, r2
    10d8:	2b04      	cmp	r3, #4
    10da:	dd25      	ble.n	1128 <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    10dc:	23e0      	movs	r3, #224	; 0xe0
    10de:	33ff      	adds	r3, #255	; 0xff
    10e0:	001a      	movs	r2, r3
    10e2:	498c      	ldr	r1, [pc, #560]	; (1314 <hif_isr+0x398>)
    10e4:	4b8c      	ldr	r3, [pc, #560]	; (1318 <hif_isr+0x39c>)
    10e6:	0018      	movs	r0, r3
    10e8:	4b8c      	ldr	r3, [pc, #560]	; (131c <hif_isr+0x3a0>)
    10ea:	4798      	blx	r3
    10ec:	230c      	movs	r3, #12
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	8819      	ldrh	r1, [r3, #0]
    10f2:	1d3b      	adds	r3, r7, #4
    10f4:	885b      	ldrh	r3, [r3, #2]
    10f6:	b29b      	uxth	r3, r3
    10f8:	001a      	movs	r2, r3
    10fa:	1d3b      	adds	r3, r7, #4
    10fc:	781b      	ldrb	r3, [r3, #0]
    10fe:	b2db      	uxtb	r3, r3
    1100:	001c      	movs	r4, r3
    1102:	1d3b      	adds	r3, r7, #4
    1104:	785b      	ldrb	r3, [r3, #1]
    1106:	b2db      	uxtb	r3, r3
    1108:	488a      	ldr	r0, [pc, #552]	; (1334 <hif_isr+0x3b8>)
    110a:	9300      	str	r3, [sp, #0]
    110c:	0023      	movs	r3, r4
    110e:	4c83      	ldr	r4, [pc, #524]	; (131c <hif_isr+0x3a0>)
    1110:	47a0      	blx	r4
    1112:	200d      	movs	r0, #13
    1114:	4b84      	ldr	r3, [pc, #528]	; (1328 <hif_isr+0x3ac>)
    1116:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    1118:	2001      	movs	r0, #1
    111a:	4b7a      	ldr	r3, [pc, #488]	; (1304 <hif_isr+0x388>)
    111c:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    111e:	230f      	movs	r3, #15
    1120:	18fb      	adds	r3, r7, r3
    1122:	22fa      	movs	r2, #250	; 0xfa
    1124:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    1126:	e12a      	b.n	137e <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1128:	1d3b      	adds	r3, r7, #4
    112a:	781b      	ldrb	r3, [r3, #0]
    112c:	b2db      	uxtb	r3, r3
    112e:	2b01      	cmp	r3, #1
    1130:	d112      	bne.n	1158 <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    1132:	4b81      	ldr	r3, [pc, #516]	; (1338 <hif_isr+0x3bc>)
    1134:	681b      	ldr	r3, [r3, #0]
    1136:	2b00      	cmp	r3, #0
    1138:	d100      	bne.n	113c <hif_isr+0x1c0>
    113a:	e07c      	b.n	1236 <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    113c:	4b7e      	ldr	r3, [pc, #504]	; (1338 <hif_isr+0x3bc>)
    113e:	681b      	ldr	r3, [r3, #0]
    1140:	1d3a      	adds	r2, r7, #4
    1142:	7852      	ldrb	r2, [r2, #1]
    1144:	b2d0      	uxtb	r0, r2
    1146:	1d3a      	adds	r2, r7, #4
    1148:	8852      	ldrh	r2, [r2, #2]
    114a:	b292      	uxth	r2, r2
    114c:	3a08      	subs	r2, #8
    114e:	b291      	uxth	r1, r2
    1150:	683a      	ldr	r2, [r7, #0]
    1152:	3208      	adds	r2, #8
    1154:	4798      	blx	r3
    1156:	e06e      	b.n	1236 <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1158:	1d3b      	adds	r3, r7, #4
    115a:	781b      	ldrb	r3, [r3, #0]
    115c:	b2db      	uxtb	r3, r3
    115e:	2b02      	cmp	r3, #2
    1160:	d111      	bne.n	1186 <hif_isr+0x20a>
					{
						if(pfIpCb)
    1162:	4b76      	ldr	r3, [pc, #472]	; (133c <hif_isr+0x3c0>)
    1164:	681b      	ldr	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d065      	beq.n	1236 <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    116a:	4b74      	ldr	r3, [pc, #464]	; (133c <hif_isr+0x3c0>)
    116c:	681b      	ldr	r3, [r3, #0]
    116e:	1d3a      	adds	r2, r7, #4
    1170:	7852      	ldrb	r2, [r2, #1]
    1172:	b2d0      	uxtb	r0, r2
    1174:	1d3a      	adds	r2, r7, #4
    1176:	8852      	ldrh	r2, [r2, #2]
    1178:	b292      	uxth	r2, r2
    117a:	3a08      	subs	r2, #8
    117c:	b291      	uxth	r1, r2
    117e:	683a      	ldr	r2, [r7, #0]
    1180:	3208      	adds	r2, #8
    1182:	4798      	blx	r3
    1184:	e057      	b.n	1236 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1186:	1d3b      	adds	r3, r7, #4
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	b2db      	uxtb	r3, r3
    118c:	2b04      	cmp	r3, #4
    118e:	d111      	bne.n	11b4 <hif_isr+0x238>
					{
						if(pfOtaCb)
    1190:	4b6b      	ldr	r3, [pc, #428]	; (1340 <hif_isr+0x3c4>)
    1192:	681b      	ldr	r3, [r3, #0]
    1194:	2b00      	cmp	r3, #0
    1196:	d04e      	beq.n	1236 <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1198:	4b69      	ldr	r3, [pc, #420]	; (1340 <hif_isr+0x3c4>)
    119a:	681b      	ldr	r3, [r3, #0]
    119c:	1d3a      	adds	r2, r7, #4
    119e:	7852      	ldrb	r2, [r2, #1]
    11a0:	b2d0      	uxtb	r0, r2
    11a2:	1d3a      	adds	r2, r7, #4
    11a4:	8852      	ldrh	r2, [r2, #2]
    11a6:	b292      	uxth	r2, r2
    11a8:	3a08      	subs	r2, #8
    11aa:	b291      	uxth	r1, r2
    11ac:	683a      	ldr	r2, [r7, #0]
    11ae:	3208      	adds	r2, #8
    11b0:	4798      	blx	r3
    11b2:	e040      	b.n	1236 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    11b4:	1d3b      	adds	r3, r7, #4
    11b6:	781b      	ldrb	r3, [r3, #0]
    11b8:	b2db      	uxtb	r3, r3
    11ba:	2b06      	cmp	r3, #6
    11bc:	d111      	bne.n	11e2 <hif_isr+0x266>
					{
						if(pfCryptoCb)
    11be:	4b61      	ldr	r3, [pc, #388]	; (1344 <hif_isr+0x3c8>)
    11c0:	681b      	ldr	r3, [r3, #0]
    11c2:	2b00      	cmp	r3, #0
    11c4:	d037      	beq.n	1236 <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    11c6:	4b5f      	ldr	r3, [pc, #380]	; (1344 <hif_isr+0x3c8>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	1d3a      	adds	r2, r7, #4
    11cc:	7852      	ldrb	r2, [r2, #1]
    11ce:	b2d0      	uxtb	r0, r2
    11d0:	1d3a      	adds	r2, r7, #4
    11d2:	8852      	ldrh	r2, [r2, #2]
    11d4:	b292      	uxth	r2, r2
    11d6:	3a08      	subs	r2, #8
    11d8:	b291      	uxth	r1, r2
    11da:	683a      	ldr	r2, [r7, #0]
    11dc:	3208      	adds	r2, #8
    11de:	4798      	blx	r3
    11e0:	e029      	b.n	1236 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    11e2:	1d3b      	adds	r3, r7, #4
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	b2db      	uxtb	r3, r3
    11e8:	2b07      	cmp	r3, #7
    11ea:	d111      	bne.n	1210 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    11ec:	4b56      	ldr	r3, [pc, #344]	; (1348 <hif_isr+0x3cc>)
    11ee:	681b      	ldr	r3, [r3, #0]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d020      	beq.n	1236 <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    11f4:	4b54      	ldr	r3, [pc, #336]	; (1348 <hif_isr+0x3cc>)
    11f6:	681b      	ldr	r3, [r3, #0]
    11f8:	1d3a      	adds	r2, r7, #4
    11fa:	7852      	ldrb	r2, [r2, #1]
    11fc:	b2d0      	uxtb	r0, r2
    11fe:	1d3a      	adds	r2, r7, #4
    1200:	8852      	ldrh	r2, [r2, #2]
    1202:	b292      	uxth	r2, r2
    1204:	3a08      	subs	r2, #8
    1206:	b291      	uxth	r1, r2
    1208:	683a      	ldr	r2, [r7, #0]
    120a:	3208      	adds	r2, #8
    120c:	4798      	blx	r3
    120e:	e012      	b.n	1236 <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    1210:	4a4e      	ldr	r2, [pc, #312]	; (134c <hif_isr+0x3d0>)
    1212:	4940      	ldr	r1, [pc, #256]	; (1314 <hif_isr+0x398>)
    1214:	4b40      	ldr	r3, [pc, #256]	; (1318 <hif_isr+0x39c>)
    1216:	0018      	movs	r0, r3
    1218:	4b40      	ldr	r3, [pc, #256]	; (131c <hif_isr+0x3a0>)
    121a:	4798      	blx	r3
    121c:	4b4c      	ldr	r3, [pc, #304]	; (1350 <hif_isr+0x3d4>)
    121e:	0018      	movs	r0, r3
    1220:	4b40      	ldr	r3, [pc, #256]	; (1324 <hif_isr+0x3a8>)
    1222:	4798      	blx	r3
    1224:	200d      	movs	r0, #13
    1226:	4b40      	ldr	r3, [pc, #256]	; (1328 <hif_isr+0x3ac>)
    1228:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    122a:	230f      	movs	r3, #15
    122c:	18fb      	adds	r3, r7, r3
    122e:	22fa      	movs	r2, #250	; 0xfa
    1230:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	e0a3      	b.n	137e <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    1236:	4b35      	ldr	r3, [pc, #212]	; (130c <hif_isr+0x390>)
    1238:	781b      	ldrb	r3, [r3, #0]
    123a:	b2db      	uxtb	r3, r3
    123c:	2b00      	cmp	r3, #0
    123e:	d153      	bne.n	12e8 <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    1240:	4a44      	ldr	r2, [pc, #272]	; (1354 <hif_isr+0x3d8>)
    1242:	4934      	ldr	r1, [pc, #208]	; (1314 <hif_isr+0x398>)
    1244:	4b34      	ldr	r3, [pc, #208]	; (1318 <hif_isr+0x39c>)
    1246:	0018      	movs	r0, r3
    1248:	4b34      	ldr	r3, [pc, #208]	; (131c <hif_isr+0x3a0>)
    124a:	4798      	blx	r3
    124c:	4b42      	ldr	r3, [pc, #264]	; (1358 <hif_isr+0x3dc>)
    124e:	0018      	movs	r0, r3
    1250:	4b34      	ldr	r3, [pc, #208]	; (1324 <hif_isr+0x3a8>)
    1252:	4798      	blx	r3
    1254:	200d      	movs	r0, #13
    1256:	4b34      	ldr	r3, [pc, #208]	; (1328 <hif_isr+0x3ac>)
    1258:	4798      	blx	r3
						ret = hif_set_rx_done();
    125a:	230f      	movs	r3, #15
    125c:	18fc      	adds	r4, r7, r3
    125e:	4b3f      	ldr	r3, [pc, #252]	; (135c <hif_isr+0x3e0>)
    1260:	4798      	blx	r3
    1262:	0003      	movs	r3, r0
    1264:	7023      	strb	r3, [r4, #0]
    1266:	e03f      	b.n	12e8 <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    1268:	230f      	movs	r3, #15
    126a:	18fb      	adds	r3, r7, r3
    126c:	22fe      	movs	r2, #254	; 0xfe
    126e:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    1270:	4a3b      	ldr	r2, [pc, #236]	; (1360 <hif_isr+0x3e4>)
    1272:	4928      	ldr	r1, [pc, #160]	; (1314 <hif_isr+0x398>)
    1274:	4b28      	ldr	r3, [pc, #160]	; (1318 <hif_isr+0x39c>)
    1276:	0018      	movs	r0, r3
    1278:	4b28      	ldr	r3, [pc, #160]	; (131c <hif_isr+0x3a0>)
    127a:	4798      	blx	r3
    127c:	4b39      	ldr	r3, [pc, #228]	; (1364 <hif_isr+0x3e8>)
    127e:	0018      	movs	r0, r3
    1280:	4b28      	ldr	r3, [pc, #160]	; (1324 <hif_isr+0x3a8>)
    1282:	4798      	blx	r3
    1284:	200d      	movs	r0, #13
    1286:	4b28      	ldr	r3, [pc, #160]	; (1328 <hif_isr+0x3ac>)
    1288:	4798      	blx	r3
					goto ERR1;
    128a:	e078      	b.n	137e <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    128c:	2386      	movs	r3, #134	; 0x86
    128e:	009a      	lsls	r2, r3, #2
    1290:	4920      	ldr	r1, [pc, #128]	; (1314 <hif_isr+0x398>)
    1292:	4b21      	ldr	r3, [pc, #132]	; (1318 <hif_isr+0x39c>)
    1294:	0018      	movs	r0, r3
    1296:	4b21      	ldr	r3, [pc, #132]	; (131c <hif_isr+0x3a0>)
    1298:	4798      	blx	r3
    129a:	68ba      	ldr	r2, [r7, #8]
    129c:	4b32      	ldr	r3, [pc, #200]	; (1368 <hif_isr+0x3ec>)
    129e:	0011      	movs	r1, r2
    12a0:	0018      	movs	r0, r3
    12a2:	4b1e      	ldr	r3, [pc, #120]	; (131c <hif_isr+0x3a0>)
    12a4:	4798      	blx	r3
    12a6:	200d      	movs	r0, #13
    12a8:	4b1f      	ldr	r3, [pc, #124]	; (1328 <hif_isr+0x3ac>)
    12aa:	4798      	blx	r3
    12ac:	e01c      	b.n	12e8 <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    12ae:	4a2f      	ldr	r2, [pc, #188]	; (136c <hif_isr+0x3f0>)
    12b0:	4918      	ldr	r1, [pc, #96]	; (1314 <hif_isr+0x398>)
    12b2:	4b19      	ldr	r3, [pc, #100]	; (1318 <hif_isr+0x39c>)
    12b4:	0018      	movs	r0, r3
    12b6:	4b19      	ldr	r3, [pc, #100]	; (131c <hif_isr+0x3a0>)
    12b8:	4798      	blx	r3
    12ba:	4b2d      	ldr	r3, [pc, #180]	; (1370 <hif_isr+0x3f4>)
    12bc:	0018      	movs	r0, r3
    12be:	4b19      	ldr	r3, [pc, #100]	; (1324 <hif_isr+0x3a8>)
    12c0:	4798      	blx	r3
    12c2:	200d      	movs	r0, #13
    12c4:	4b18      	ldr	r3, [pc, #96]	; (1328 <hif_isr+0x3ac>)
    12c6:	4798      	blx	r3
			goto ERR1;
    12c8:	e059      	b.n	137e <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    12ca:	2389      	movs	r3, #137	; 0x89
    12cc:	009a      	lsls	r2, r3, #2
    12ce:	4911      	ldr	r1, [pc, #68]	; (1314 <hif_isr+0x398>)
    12d0:	4b11      	ldr	r3, [pc, #68]	; (1318 <hif_isr+0x39c>)
    12d2:	0018      	movs	r0, r3
    12d4:	4b11      	ldr	r3, [pc, #68]	; (131c <hif_isr+0x3a0>)
    12d6:	4798      	blx	r3
    12d8:	4b26      	ldr	r3, [pc, #152]	; (1374 <hif_isr+0x3f8>)
    12da:	0018      	movs	r0, r3
    12dc:	4b11      	ldr	r3, [pc, #68]	; (1324 <hif_isr+0x3a8>)
    12de:	4798      	blx	r3
    12e0:	200d      	movs	r0, #13
    12e2:	4b11      	ldr	r3, [pc, #68]	; (1328 <hif_isr+0x3ac>)
    12e4:	4798      	blx	r3
		goto ERR1;
    12e6:	e04a      	b.n	137e <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    12e8:	230f      	movs	r3, #15
    12ea:	18fc      	adds	r4, r7, r3
    12ec:	4b22      	ldr	r3, [pc, #136]	; (1378 <hif_isr+0x3fc>)
    12ee:	4798      	blx	r3
    12f0:	0003      	movs	r3, r0
    12f2:	7023      	strb	r3, [r4, #0]
    12f4:	e043      	b.n	137e <hif_isr+0x402>
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	00000add 	.word	0x00000add
    12fc:	00001070 	.word	0x00001070
    1300:	00001ad5 	.word	0x00001ad5
    1304:	00000641 	.word	0x00000641
    1308:	00001af9 	.word	0x00001af9
    130c:	200000ae 	.word	0x200000ae
    1310:	00001084 	.word	0x00001084
    1314:	0000b9b4 	.word	0x0000b9b4
    1318:	0000b768 	.word	0x0000b768
    131c:	0000a811 	.word	0x0000a811
    1320:	0000b798 	.word	0x0000b798
    1324:	0000a931 	.word	0x0000a931
    1328:	0000a845 	.word	0x0000a845
    132c:	00001b49 	.word	0x00001b49
    1330:	0000b7bc 	.word	0x0000b7bc
    1334:	0000b7d4 	.word	0x0000b7d4
    1338:	200000b0 	.word	0x200000b0
    133c:	200000b4 	.word	0x200000b4
    1340:	200000b8 	.word	0x200000b8
    1344:	200000c0 	.word	0x200000c0
    1348:	200000bc 	.word	0x200000bc
    134c:	00000202 	.word	0x00000202
    1350:	0000b814 	.word	0x0000b814
    1354:	00000209 	.word	0x00000209
    1358:	0000b82c 	.word	0x0000b82c
    135c:	00000a71 	.word	0x00000a71
    1360:	00000211 	.word	0x00000211
    1364:	0000b850 	.word	0x0000b850
    1368:	0000b864 	.word	0x0000b864
    136c:	0000021e 	.word	0x0000021e
    1370:	0000b880 	.word	0x0000b880
    1374:	0000b8a4 	.word	0x0000b8a4
    1378:	00000b75 	.word	0x00000b75

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    137c:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    137e:	230f      	movs	r3, #15
    1380:	18fb      	adds	r3, r7, r3
    1382:	781b      	ldrb	r3, [r3, #0]
    1384:	b25b      	sxtb	r3, r3
}
    1386:	0018      	movs	r0, r3
    1388:	46bd      	mov	sp, r7
    138a:	b005      	add	sp, #20
    138c:	bd90      	pop	{r4, r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)

00001390 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1390:	b590      	push	{r4, r7, lr}
    1392:	b083      	sub	sp, #12
    1394:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1396:	1dfb      	adds	r3, r7, #7
    1398:	2200      	movs	r2, #0
    139a:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    139c:	e023      	b.n	13e6 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    139e:	4b18      	ldr	r3, [pc, #96]	; (1400 <hif_handle_isr+0x70>)
    13a0:	781b      	ldrb	r3, [r3, #0]
    13a2:	b2db      	uxtb	r3, r3
    13a4:	3b01      	subs	r3, #1
    13a6:	b2da      	uxtb	r2, r3
    13a8:	4b15      	ldr	r3, [pc, #84]	; (1400 <hif_handle_isr+0x70>)
    13aa:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    13ac:	1dfc      	adds	r4, r7, #7
    13ae:	4b15      	ldr	r3, [pc, #84]	; (1404 <hif_handle_isr+0x74>)
    13b0:	4798      	blx	r3
    13b2:	0003      	movs	r3, r0
    13b4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    13b6:	1dfb      	adds	r3, r7, #7
    13b8:	781b      	ldrb	r3, [r3, #0]
    13ba:	b25b      	sxtb	r3, r3
    13bc:	2b00      	cmp	r3, #0
    13be:	d100      	bne.n	13c2 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    13c0:	e011      	b.n	13e6 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    13c2:	4a11      	ldr	r2, [pc, #68]	; (1408 <hif_handle_isr+0x78>)
    13c4:	4911      	ldr	r1, [pc, #68]	; (140c <hif_handle_isr+0x7c>)
    13c6:	4b12      	ldr	r3, [pc, #72]	; (1410 <hif_handle_isr+0x80>)
    13c8:	0018      	movs	r0, r3
    13ca:	4b12      	ldr	r3, [pc, #72]	; (1414 <hif_handle_isr+0x84>)
    13cc:	4798      	blx	r3
    13ce:	1dfb      	adds	r3, r7, #7
    13d0:	2200      	movs	r2, #0
    13d2:	569a      	ldrsb	r2, [r3, r2]
    13d4:	4b10      	ldr	r3, [pc, #64]	; (1418 <hif_handle_isr+0x88>)
    13d6:	0011      	movs	r1, r2
    13d8:	0018      	movs	r0, r3
    13da:	4b0e      	ldr	r3, [pc, #56]	; (1414 <hif_handle_isr+0x84>)
    13dc:	4798      	blx	r3
    13de:	200d      	movs	r0, #13
    13e0:	4b0e      	ldr	r3, [pc, #56]	; (141c <hif_handle_isr+0x8c>)
    13e2:	4798      	blx	r3
			}
		}
    13e4:	e7e2      	b.n	13ac <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    13e6:	4b06      	ldr	r3, [pc, #24]	; (1400 <hif_handle_isr+0x70>)
    13e8:	781b      	ldrb	r3, [r3, #0]
    13ea:	b2db      	uxtb	r3, r3
    13ec:	2b00      	cmp	r3, #0
    13ee:	d1d6      	bne.n	139e <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    13f0:	1dfb      	adds	r3, r7, #7
    13f2:	781b      	ldrb	r3, [r3, #0]
    13f4:	b25b      	sxtb	r3, r3
}
    13f6:	0018      	movs	r0, r3
    13f8:	46bd      	mov	sp, r7
    13fa:	b003      	add	sp, #12
    13fc:	bd90      	pop	{r4, r7, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	200000af 	.word	0x200000af
    1404:	00000f7d 	.word	0x00000f7d
    1408:	00000243 	.word	0x00000243
    140c:	0000b9bc 	.word	0x0000b9bc
    1410:	0000b768 	.word	0x0000b768
    1414:	0000a811 	.word	0x0000a811
    1418:	0000b8c4 	.word	0x0000b8c4
    141c:	0000a845 	.word	0x0000a845

00001420 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1420:	b580      	push	{r7, lr}
    1422:	b082      	sub	sp, #8
    1424:	af00      	add	r7, sp, #0
    1426:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1428:	4b03      	ldr	r3, [pc, #12]	; (1438 <m2m_wifi_handle_events+0x18>)
    142a:	4798      	blx	r3
    142c:	0003      	movs	r3, r0
}
    142e:	0018      	movs	r0, r3
    1430:	46bd      	mov	sp, r7
    1432:	b002      	add	sp, #8
    1434:	bd80      	pop	{r7, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	00001391 	.word	0x00001391

0000143c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    143c:	b590      	push	{r4, r7, lr}
    143e:	b087      	sub	sp, #28
    1440:	af02      	add	r7, sp, #8
    1442:	60f8      	str	r0, [r7, #12]
    1444:	0008      	movs	r0, r1
    1446:	0011      	movs	r1, r2
    1448:	607b      	str	r3, [r7, #4]
    144a:	230b      	movs	r3, #11
    144c:	18fb      	adds	r3, r7, r3
    144e:	1c02      	adds	r2, r0, #0
    1450:	701a      	strb	r2, [r3, #0]
    1452:	230a      	movs	r3, #10
    1454:	18fb      	adds	r3, r7, r3
    1456:	1c0a      	adds	r2, r1, #0
    1458:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    145a:	687c      	ldr	r4, [r7, #4]
    145c:	230a      	movs	r3, #10
    145e:	18fb      	adds	r3, r7, r3
    1460:	781a      	ldrb	r2, [r3, #0]
    1462:	230b      	movs	r3, #11
    1464:	18fb      	adds	r3, r7, r3
    1466:	7819      	ldrb	r1, [r3, #0]
    1468:	68f8      	ldr	r0, [r7, #12]
    146a:	2300      	movs	r3, #0
    146c:	9301      	str	r3, [sp, #4]
    146e:	2320      	movs	r3, #32
    1470:	18fb      	adds	r3, r7, r3
    1472:	881b      	ldrh	r3, [r3, #0]
    1474:	9300      	str	r3, [sp, #0]
    1476:	0023      	movs	r3, r4
    1478:	4c03      	ldr	r4, [pc, #12]	; (1488 <m2m_wifi_connect+0x4c>)
    147a:	47a0      	blx	r4
    147c:	0003      	movs	r3, r0
}
    147e:	0018      	movs	r0, r3
    1480:	46bd      	mov	sp, r7
    1482:	b005      	add	sp, #20
    1484:	bd90      	pop	{r4, r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	0000148d 	.word	0x0000148d

0000148c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    148c:	b5b0      	push	{r4, r5, r7, lr}
    148e:	b0aa      	sub	sp, #168	; 0xa8
    1490:	af04      	add	r7, sp, #16
    1492:	60f8      	str	r0, [r7, #12]
    1494:	0008      	movs	r0, r1
    1496:	0011      	movs	r1, r2
    1498:	607b      	str	r3, [r7, #4]
    149a:	230b      	movs	r3, #11
    149c:	18fb      	adds	r3, r7, r3
    149e:	1c02      	adds	r2, r0, #0
    14a0:	701a      	strb	r2, [r3, #0]
    14a2:	230a      	movs	r3, #10
    14a4:	18fb      	adds	r3, r7, r3
    14a6:	1c0a      	adds	r2, r1, #0
    14a8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    14aa:	2397      	movs	r3, #151	; 0x97
    14ac:	18fb      	adds	r3, r7, r3
    14ae:	2200      	movs	r2, #0
    14b0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    14b2:	230a      	movs	r3, #10
    14b4:	18fb      	adds	r3, r7, r3
    14b6:	781b      	ldrb	r3, [r3, #0]
    14b8:	2b01      	cmp	r3, #1
    14ba:	d100      	bne.n	14be <m2m_wifi_connect_sc+0x32>
    14bc:	e083      	b.n	15c6 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    14be:	687b      	ldr	r3, [r7, #4]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d111      	bne.n	14e8 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    14c4:	4ad8      	ldr	r2, [pc, #864]	; (1828 <m2m_wifi_connect_sc+0x39c>)
    14c6:	49d9      	ldr	r1, [pc, #868]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    14c8:	4bd9      	ldr	r3, [pc, #868]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    14ca:	0018      	movs	r0, r3
    14cc:	4bd9      	ldr	r3, [pc, #868]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    14ce:	4798      	blx	r3
    14d0:	4bd9      	ldr	r3, [pc, #868]	; (1838 <m2m_wifi_connect_sc+0x3ac>)
    14d2:	0018      	movs	r0, r3
    14d4:	4bd9      	ldr	r3, [pc, #868]	; (183c <m2m_wifi_connect_sc+0x3b0>)
    14d6:	4798      	blx	r3
    14d8:	200d      	movs	r0, #13
    14da:	4bd9      	ldr	r3, [pc, #868]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    14dc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    14de:	2397      	movs	r3, #151	; 0x97
    14e0:	18fb      	adds	r3, r7, r3
    14e2:	22f4      	movs	r2, #244	; 0xf4
    14e4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    14e6:	e1ef      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    14e8:	230a      	movs	r3, #10
    14ea:	18fb      	adds	r3, r7, r3
    14ec:	781b      	ldrb	r3, [r3, #0]
    14ee:	2b02      	cmp	r3, #2
    14f0:	d169      	bne.n	15c6 <m2m_wifi_connect_sc+0x13a>
    14f2:	687b      	ldr	r3, [r7, #4]
    14f4:	0018      	movs	r0, r3
    14f6:	4bd3      	ldr	r3, [pc, #844]	; (1844 <m2m_wifi_connect_sc+0x3b8>)
    14f8:	4798      	blx	r3
    14fa:	1e03      	subs	r3, r0, #0
    14fc:	2b40      	cmp	r3, #64	; 0x40
    14fe:	d162      	bne.n	15c6 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    1500:	2396      	movs	r3, #150	; 0x96
    1502:	18fb      	adds	r3, r7, r3
    1504:	2200      	movs	r2, #0
    1506:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	2290      	movs	r2, #144	; 0x90
    150c:	18ba      	adds	r2, r7, r2
    150e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    1510:	e054      	b.n	15bc <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1512:	2396      	movs	r3, #150	; 0x96
    1514:	18fb      	adds	r3, r7, r3
    1516:	781b      	ldrb	r3, [r3, #0]
    1518:	2290      	movs	r2, #144	; 0x90
    151a:	18ba      	adds	r2, r7, r2
    151c:	6812      	ldr	r2, [r2, #0]
    151e:	18d3      	adds	r3, r2, r3
    1520:	781b      	ldrb	r3, [r3, #0]
    1522:	2b2f      	cmp	r3, #47	; 0x2f
    1524:	d931      	bls.n	158a <m2m_wifi_connect_sc+0xfe>
    1526:	2396      	movs	r3, #150	; 0x96
    1528:	18fb      	adds	r3, r7, r3
    152a:	781b      	ldrb	r3, [r3, #0]
    152c:	2290      	movs	r2, #144	; 0x90
    152e:	18ba      	adds	r2, r7, r2
    1530:	6812      	ldr	r2, [r2, #0]
    1532:	18d3      	adds	r3, r2, r3
    1534:	781b      	ldrb	r3, [r3, #0]
    1536:	2b39      	cmp	r3, #57	; 0x39
    1538:	d909      	bls.n	154e <m2m_wifi_connect_sc+0xc2>
    153a:	2396      	movs	r3, #150	; 0x96
    153c:	18fb      	adds	r3, r7, r3
    153e:	781b      	ldrb	r3, [r3, #0]
    1540:	2290      	movs	r2, #144	; 0x90
    1542:	18ba      	adds	r2, r7, r2
    1544:	6812      	ldr	r2, [r2, #0]
    1546:	18d3      	adds	r3, r2, r3
    1548:	781b      	ldrb	r3, [r3, #0]
    154a:	2b40      	cmp	r3, #64	; 0x40
    154c:	d91d      	bls.n	158a <m2m_wifi_connect_sc+0xfe>
    154e:	2396      	movs	r3, #150	; 0x96
    1550:	18fb      	adds	r3, r7, r3
    1552:	781b      	ldrb	r3, [r3, #0]
    1554:	2290      	movs	r2, #144	; 0x90
    1556:	18ba      	adds	r2, r7, r2
    1558:	6812      	ldr	r2, [r2, #0]
    155a:	18d3      	adds	r3, r2, r3
    155c:	781b      	ldrb	r3, [r3, #0]
    155e:	2b46      	cmp	r3, #70	; 0x46
    1560:	d909      	bls.n	1576 <m2m_wifi_connect_sc+0xea>
    1562:	2396      	movs	r3, #150	; 0x96
    1564:	18fb      	adds	r3, r7, r3
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	2290      	movs	r2, #144	; 0x90
    156a:	18ba      	adds	r2, r7, r2
    156c:	6812      	ldr	r2, [r2, #0]
    156e:	18d3      	adds	r3, r2, r3
    1570:	781b      	ldrb	r3, [r3, #0]
    1572:	2b60      	cmp	r3, #96	; 0x60
    1574:	d909      	bls.n	158a <m2m_wifi_connect_sc+0xfe>
    1576:	2396      	movs	r3, #150	; 0x96
    1578:	18fb      	adds	r3, r7, r3
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	2290      	movs	r2, #144	; 0x90
    157e:	18ba      	adds	r2, r7, r2
    1580:	6812      	ldr	r2, [r2, #0]
    1582:	18d3      	adds	r3, r2, r3
    1584:	781b      	ldrb	r3, [r3, #0]
    1586:	2b66      	cmp	r3, #102	; 0x66
    1588:	d911      	bls.n	15ae <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    158a:	4aaf      	ldr	r2, [pc, #700]	; (1848 <m2m_wifi_connect_sc+0x3bc>)
    158c:	49a7      	ldr	r1, [pc, #668]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    158e:	4ba8      	ldr	r3, [pc, #672]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    1590:	0018      	movs	r0, r3
    1592:	4ba8      	ldr	r3, [pc, #672]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    1594:	4798      	blx	r3
    1596:	4bad      	ldr	r3, [pc, #692]	; (184c <m2m_wifi_connect_sc+0x3c0>)
    1598:	0018      	movs	r0, r3
    159a:	4ba8      	ldr	r3, [pc, #672]	; (183c <m2m_wifi_connect_sc+0x3b0>)
    159c:	4798      	blx	r3
    159e:	200d      	movs	r0, #13
    15a0:	4ba7      	ldr	r3, [pc, #668]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    15a2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    15a4:	2397      	movs	r3, #151	; 0x97
    15a6:	18fb      	adds	r3, r7, r3
    15a8:	22f4      	movs	r2, #244	; 0xf4
    15aa:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    15ac:	e18c      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    15ae:	2396      	movs	r3, #150	; 0x96
    15b0:	18fb      	adds	r3, r7, r3
    15b2:	781a      	ldrb	r2, [r3, #0]
    15b4:	2396      	movs	r3, #150	; 0x96
    15b6:	18fb      	adds	r3, r7, r3
    15b8:	3201      	adds	r2, #1
    15ba:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    15bc:	2396      	movs	r3, #150	; 0x96
    15be:	18fb      	adds	r3, r7, r3
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	2b3f      	cmp	r3, #63	; 0x3f
    15c4:	d9a5      	bls.n	1512 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    15c6:	230b      	movs	r3, #11
    15c8:	18fb      	adds	r3, r7, r3
    15ca:	781b      	ldrb	r3, [r3, #0]
    15cc:	2b00      	cmp	r3, #0
    15ce:	d004      	beq.n	15da <m2m_wifi_connect_sc+0x14e>
    15d0:	230b      	movs	r3, #11
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	781b      	ldrb	r3, [r3, #0]
    15d6:	2b20      	cmp	r3, #32
    15d8:	d911      	bls.n	15fe <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    15da:	4a9d      	ldr	r2, [pc, #628]	; (1850 <m2m_wifi_connect_sc+0x3c4>)
    15dc:	4993      	ldr	r1, [pc, #588]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    15de:	4b94      	ldr	r3, [pc, #592]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    15e0:	0018      	movs	r0, r3
    15e2:	4b94      	ldr	r3, [pc, #592]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    15e4:	4798      	blx	r3
    15e6:	4b9b      	ldr	r3, [pc, #620]	; (1854 <m2m_wifi_connect_sc+0x3c8>)
    15e8:	0018      	movs	r0, r3
    15ea:	4b94      	ldr	r3, [pc, #592]	; (183c <m2m_wifi_connect_sc+0x3b0>)
    15ec:	4798      	blx	r3
    15ee:	200d      	movs	r0, #13
    15f0:	4b93      	ldr	r3, [pc, #588]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    15f2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    15f4:	2397      	movs	r3, #151	; 0x97
    15f6:	18fb      	adds	r3, r7, r3
    15f8:	22f4      	movs	r2, #244	; 0xf4
    15fa:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    15fc:	e164      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    15fe:	23a8      	movs	r3, #168	; 0xa8
    1600:	18fb      	adds	r3, r7, r3
    1602:	881b      	ldrh	r3, [r3, #0]
    1604:	2b0d      	cmp	r3, #13
    1606:	d916      	bls.n	1636 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1608:	23a8      	movs	r3, #168	; 0xa8
    160a:	18fb      	adds	r3, r7, r3
    160c:	881b      	ldrh	r3, [r3, #0]
    160e:	2bff      	cmp	r3, #255	; 0xff
    1610:	d011      	beq.n	1636 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    1612:	4a91      	ldr	r2, [pc, #580]	; (1858 <m2m_wifi_connect_sc+0x3cc>)
    1614:	4985      	ldr	r1, [pc, #532]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    1616:	4b86      	ldr	r3, [pc, #536]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    1618:	0018      	movs	r0, r3
    161a:	4b86      	ldr	r3, [pc, #536]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    161c:	4798      	blx	r3
    161e:	4b8f      	ldr	r3, [pc, #572]	; (185c <m2m_wifi_connect_sc+0x3d0>)
    1620:	0018      	movs	r0, r3
    1622:	4b86      	ldr	r3, [pc, #536]	; (183c <m2m_wifi_connect_sc+0x3b0>)
    1624:	4798      	blx	r3
    1626:	200d      	movs	r0, #13
    1628:	4b85      	ldr	r3, [pc, #532]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    162a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    162c:	2397      	movs	r3, #151	; 0x97
    162e:	18fb      	adds	r3, r7, r3
    1630:	22f4      	movs	r2, #244	; 0xf4
    1632:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1634:	e148      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1636:	230b      	movs	r3, #11
    1638:	18fb      	adds	r3, r7, r3
    163a:	781a      	ldrb	r2, [r3, #0]
    163c:	68f9      	ldr	r1, [r7, #12]
    163e:	2314      	movs	r3, #20
    1640:	18fb      	adds	r3, r7, r3
    1642:	3346      	adds	r3, #70	; 0x46
    1644:	0018      	movs	r0, r3
    1646:	4b86      	ldr	r3, [pc, #536]	; (1860 <m2m_wifi_connect_sc+0x3d4>)
    1648:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    164a:	230b      	movs	r3, #11
    164c:	18fb      	adds	r3, r7, r3
    164e:	781b      	ldrb	r3, [r3, #0]
    1650:	2214      	movs	r2, #20
    1652:	18ba      	adds	r2, r7, r2
    1654:	2146      	movs	r1, #70	; 0x46
    1656:	18d3      	adds	r3, r2, r3
    1658:	185b      	adds	r3, r3, r1
    165a:	2200      	movs	r2, #0
    165c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    165e:	2314      	movs	r3, #20
    1660:	18fb      	adds	r3, r7, r3
    1662:	22a8      	movs	r2, #168	; 0xa8
    1664:	18ba      	adds	r2, r7, r2
    1666:	2144      	movs	r1, #68	; 0x44
    1668:	8812      	ldrh	r2, [r2, #0]
    166a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    166c:	23ac      	movs	r3, #172	; 0xac
    166e:	18fb      	adds	r3, r7, r3
    1670:	781b      	ldrb	r3, [r3, #0]
    1672:	1e5a      	subs	r2, r3, #1
    1674:	4193      	sbcs	r3, r2
    1676:	b2db      	uxtb	r3, r3
    1678:	0019      	movs	r1, r3
    167a:	2314      	movs	r3, #20
    167c:	18fb      	adds	r3, r7, r3
    167e:	2267      	movs	r2, #103	; 0x67
    1680:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    1682:	2314      	movs	r3, #20
    1684:	18fb      	adds	r3, r7, r3
    1686:	228c      	movs	r2, #140	; 0x8c
    1688:	18ba      	adds	r2, r7, r2
    168a:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    168c:	238c      	movs	r3, #140	; 0x8c
    168e:	18fb      	adds	r3, r7, r3
    1690:	681b      	ldr	r3, [r3, #0]
    1692:	220a      	movs	r2, #10
    1694:	18ba      	adds	r2, r7, r2
    1696:	2141      	movs	r1, #65	; 0x41
    1698:	7812      	ldrb	r2, [r2, #0]
    169a:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    169c:	230a      	movs	r3, #10
    169e:	18fb      	adds	r3, r7, r3
    16a0:	781b      	ldrb	r3, [r3, #0]
    16a2:	2b03      	cmp	r3, #3
    16a4:	d000      	beq.n	16a8 <m2m_wifi_connect_sc+0x21c>
    16a6:	e07b      	b.n	17a0 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	2288      	movs	r2, #136	; 0x88
    16ac:	18ba      	adds	r2, r7, r2
    16ae:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    16b0:	238c      	movs	r3, #140	; 0x8c
    16b2:	18fb      	adds	r3, r7, r3
    16b4:	681b      	ldr	r3, [r3, #0]
    16b6:	2284      	movs	r2, #132	; 0x84
    16b8:	18ba      	adds	r2, r7, r2
    16ba:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    16bc:	2388      	movs	r3, #136	; 0x88
    16be:	18fb      	adds	r3, r7, r3
    16c0:	681b      	ldr	r3, [r3, #0]
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	3b01      	subs	r3, #1
    16c6:	b2da      	uxtb	r2, r3
    16c8:	2384      	movs	r3, #132	; 0x84
    16ca:	18fb      	adds	r3, r7, r3
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    16d0:	2384      	movs	r3, #132	; 0x84
    16d2:	18fb      	adds	r3, r7, r3
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	781b      	ldrb	r3, [r3, #0]
    16d8:	2b03      	cmp	r3, #3
    16da:	d917      	bls.n	170c <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    16dc:	4a61      	ldr	r2, [pc, #388]	; (1864 <m2m_wifi_connect_sc+0x3d8>)
    16de:	4953      	ldr	r1, [pc, #332]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    16e0:	4b53      	ldr	r3, [pc, #332]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    16e2:	0018      	movs	r0, r3
    16e4:	4b53      	ldr	r3, [pc, #332]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    16e6:	4798      	blx	r3
    16e8:	2384      	movs	r3, #132	; 0x84
    16ea:	18fb      	adds	r3, r7, r3
    16ec:	681b      	ldr	r3, [r3, #0]
    16ee:	781b      	ldrb	r3, [r3, #0]
    16f0:	001a      	movs	r2, r3
    16f2:	4b5d      	ldr	r3, [pc, #372]	; (1868 <m2m_wifi_connect_sc+0x3dc>)
    16f4:	0011      	movs	r1, r2
    16f6:	0018      	movs	r0, r3
    16f8:	4b4e      	ldr	r3, [pc, #312]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    16fa:	4798      	blx	r3
    16fc:	200d      	movs	r0, #13
    16fe:	4b50      	ldr	r3, [pc, #320]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    1700:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1702:	2397      	movs	r3, #151	; 0x97
    1704:	18fb      	adds	r3, r7, r3
    1706:	22f4      	movs	r2, #244	; 0xf4
    1708:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    170a:	e0dd      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    170c:	2388      	movs	r3, #136	; 0x88
    170e:	18fb      	adds	r3, r7, r3
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	785b      	ldrb	r3, [r3, #1]
    1714:	3b01      	subs	r3, #1
    1716:	b2da      	uxtb	r2, r3
    1718:	2384      	movs	r3, #132	; 0x84
    171a:	18fb      	adds	r3, r7, r3
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1720:	2384      	movs	r3, #132	; 0x84
    1722:	18fb      	adds	r3, r7, r3
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	785b      	ldrb	r3, [r3, #1]
    1728:	2b0a      	cmp	r3, #10
    172a:	d01e      	beq.n	176a <m2m_wifi_connect_sc+0x2de>
    172c:	2384      	movs	r3, #132	; 0x84
    172e:	18fb      	adds	r3, r7, r3
    1730:	681b      	ldr	r3, [r3, #0]
    1732:	785b      	ldrb	r3, [r3, #1]
    1734:	2b1a      	cmp	r3, #26
    1736:	d018      	beq.n	176a <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1738:	2390      	movs	r3, #144	; 0x90
    173a:	009a      	lsls	r2, r3, #2
    173c:	493b      	ldr	r1, [pc, #236]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    173e:	4b3c      	ldr	r3, [pc, #240]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    1740:	0018      	movs	r0, r3
    1742:	4b3c      	ldr	r3, [pc, #240]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    1744:	4798      	blx	r3
    1746:	2384      	movs	r3, #132	; 0x84
    1748:	18fb      	adds	r3, r7, r3
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	785b      	ldrb	r3, [r3, #1]
    174e:	001a      	movs	r2, r3
    1750:	4b46      	ldr	r3, [pc, #280]	; (186c <m2m_wifi_connect_sc+0x3e0>)
    1752:	0011      	movs	r1, r2
    1754:	0018      	movs	r0, r3
    1756:	4b37      	ldr	r3, [pc, #220]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    1758:	4798      	blx	r3
    175a:	200d      	movs	r0, #13
    175c:	4b38      	ldr	r3, [pc, #224]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    175e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1760:	2397      	movs	r3, #151	; 0x97
    1762:	18fb      	adds	r3, r7, r3
    1764:	22f4      	movs	r2, #244	; 0xf4
    1766:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1768:	e0ae      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    176a:	2384      	movs	r3, #132	; 0x84
    176c:	18fb      	adds	r3, r7, r3
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	1c98      	adds	r0, r3, #2
    1772:	2388      	movs	r3, #136	; 0x88
    1774:	18fb      	adds	r3, r7, r3
    1776:	681b      	ldr	r3, [r3, #0]
    1778:	1c99      	adds	r1, r3, #2
    177a:	2388      	movs	r3, #136	; 0x88
    177c:	18fb      	adds	r3, r7, r3
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	785b      	ldrb	r3, [r3, #1]
    1782:	001a      	movs	r2, r3
    1784:	4b36      	ldr	r3, [pc, #216]	; (1860 <m2m_wifi_connect_sc+0x3d4>)
    1786:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1788:	2388      	movs	r3, #136	; 0x88
    178a:	18fb      	adds	r3, r7, r3
    178c:	681b      	ldr	r3, [r3, #0]
    178e:	785b      	ldrb	r3, [r3, #1]
    1790:	001a      	movs	r2, r3
    1792:	2384      	movs	r3, #132	; 0x84
    1794:	18fb      	adds	r3, r7, r3
    1796:	681b      	ldr	r3, [r3, #0]
    1798:	189b      	adds	r3, r3, r2
    179a:	2200      	movs	r2, #0
    179c:	709a      	strb	r2, [r3, #2]
    179e:	e082      	b.n	18a6 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    17a0:	230a      	movs	r3, #10
    17a2:	18fb      	adds	r3, r7, r3
    17a4:	781b      	ldrb	r3, [r3, #0]
    17a6:	2b02      	cmp	r3, #2
    17a8:	d130      	bne.n	180c <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    17aa:	2382      	movs	r3, #130	; 0x82
    17ac:	18fc      	adds	r4, r7, r3
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	0018      	movs	r0, r3
    17b2:	4b24      	ldr	r3, [pc, #144]	; (1844 <m2m_wifi_connect_sc+0x3b8>)
    17b4:	4798      	blx	r3
    17b6:	0003      	movs	r3, r0
    17b8:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    17ba:	2382      	movs	r3, #130	; 0x82
    17bc:	18fb      	adds	r3, r7, r3
    17be:	881b      	ldrh	r3, [r3, #0]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d004      	beq.n	17ce <m2m_wifi_connect_sc+0x342>
    17c4:	2382      	movs	r3, #130	; 0x82
    17c6:	18fb      	adds	r3, r7, r3
    17c8:	881b      	ldrh	r3, [r3, #0]
    17ca:	2b40      	cmp	r3, #64	; 0x40
    17cc:	d911      	bls.n	17f2 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    17ce:	4a28      	ldr	r2, [pc, #160]	; (1870 <m2m_wifi_connect_sc+0x3e4>)
    17d0:	4916      	ldr	r1, [pc, #88]	; (182c <m2m_wifi_connect_sc+0x3a0>)
    17d2:	4b17      	ldr	r3, [pc, #92]	; (1830 <m2m_wifi_connect_sc+0x3a4>)
    17d4:	0018      	movs	r0, r3
    17d6:	4b17      	ldr	r3, [pc, #92]	; (1834 <m2m_wifi_connect_sc+0x3a8>)
    17d8:	4798      	blx	r3
    17da:	4b26      	ldr	r3, [pc, #152]	; (1874 <m2m_wifi_connect_sc+0x3e8>)
    17dc:	0018      	movs	r0, r3
    17de:	4b17      	ldr	r3, [pc, #92]	; (183c <m2m_wifi_connect_sc+0x3b0>)
    17e0:	4798      	blx	r3
    17e2:	200d      	movs	r0, #13
    17e4:	4b16      	ldr	r3, [pc, #88]	; (1840 <m2m_wifi_connect_sc+0x3b4>)
    17e6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    17e8:	2397      	movs	r3, #151	; 0x97
    17ea:	18fb      	adds	r3, r7, r3
    17ec:	22f4      	movs	r2, #244	; 0xf4
    17ee:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    17f0:	e06a      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    17f2:	238c      	movs	r3, #140	; 0x8c
    17f4:	18fb      	adds	r3, r7, r3
    17f6:	6818      	ldr	r0, [r3, #0]
    17f8:	2382      	movs	r3, #130	; 0x82
    17fa:	18fb      	adds	r3, r7, r3
    17fc:	881b      	ldrh	r3, [r3, #0]
    17fe:	3301      	adds	r3, #1
    1800:	001a      	movs	r2, r3
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	0019      	movs	r1, r3
    1806:	4b16      	ldr	r3, [pc, #88]	; (1860 <m2m_wifi_connect_sc+0x3d4>)
    1808:	4798      	blx	r3
    180a:	e04c      	b.n	18a6 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    180c:	230a      	movs	r3, #10
    180e:	18fb      	adds	r3, r7, r3
    1810:	781b      	ldrb	r3, [r3, #0]
    1812:	2b04      	cmp	r3, #4
    1814:	d130      	bne.n	1878 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1816:	238c      	movs	r3, #140	; 0x8c
    1818:	18fb      	adds	r3, r7, r3
    181a:	681b      	ldr	r3, [r3, #0]
    181c:	6879      	ldr	r1, [r7, #4]
    181e:	223e      	movs	r2, #62	; 0x3e
    1820:	0018      	movs	r0, r3
    1822:	4b0f      	ldr	r3, [pc, #60]	; (1860 <m2m_wifi_connect_sc+0x3d4>)
    1824:	4798      	blx	r3
    1826:	e03e      	b.n	18a6 <m2m_wifi_connect_sc+0x41a>
    1828:	00000203 	.word	0x00000203
    182c:	0000bcf0 	.word	0x0000bcf0
    1830:	0000b9f8 	.word	0x0000b9f8
    1834:	0000a811 	.word	0x0000a811
    1838:	0000bba4 	.word	0x0000bba4
    183c:	0000a931 	.word	0x0000a931
    1840:	0000a845 	.word	0x0000a845
    1844:	00000a35 	.word	0x00000a35
    1848:	0000020f 	.word	0x0000020f
    184c:	0000bbb8 	.word	0x0000bbb8
    1850:	00000219 	.word	0x00000219
    1854:	0000bbc4 	.word	0x0000bbc4
    1858:	00000222 	.word	0x00000222
    185c:	0000bbd8 	.word	0x0000bbd8
    1860:	000009b9 	.word	0x000009b9
    1864:	00000239 	.word	0x00000239
    1868:	0000bbe4 	.word	0x0000bbe4
    186c:	0000bc00 	.word	0x0000bc00
    1870:	0000024f 	.word	0x0000024f
    1874:	0000bc1c 	.word	0x0000bc1c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1878:	230a      	movs	r3, #10
    187a:	18fb      	adds	r3, r7, r3
    187c:	781b      	ldrb	r3, [r3, #0]
    187e:	2b01      	cmp	r3, #1
    1880:	d011      	beq.n	18a6 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    1882:	4a15      	ldr	r2, [pc, #84]	; (18d8 <m2m_wifi_connect_sc+0x44c>)
    1884:	4915      	ldr	r1, [pc, #84]	; (18dc <m2m_wifi_connect_sc+0x450>)
    1886:	4b16      	ldr	r3, [pc, #88]	; (18e0 <m2m_wifi_connect_sc+0x454>)
    1888:	0018      	movs	r0, r3
    188a:	4b16      	ldr	r3, [pc, #88]	; (18e4 <m2m_wifi_connect_sc+0x458>)
    188c:	4798      	blx	r3
    188e:	4b16      	ldr	r3, [pc, #88]	; (18e8 <m2m_wifi_connect_sc+0x45c>)
    1890:	0018      	movs	r0, r3
    1892:	4b16      	ldr	r3, [pc, #88]	; (18ec <m2m_wifi_connect_sc+0x460>)
    1894:	4798      	blx	r3
    1896:	200d      	movs	r0, #13
    1898:	4b15      	ldr	r3, [pc, #84]	; (18f0 <m2m_wifi_connect_sc+0x464>)
    189a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    189c:	2397      	movs	r3, #151	; 0x97
    189e:	18fb      	adds	r3, r7, r3
    18a0:	22f4      	movs	r2, #244	; 0xf4
    18a2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    18a4:	e010      	b.n	18c8 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    18a6:	2397      	movs	r3, #151	; 0x97
    18a8:	18fc      	adds	r4, r7, r3
    18aa:	2314      	movs	r3, #20
    18ac:	18fa      	adds	r2, r7, r3
    18ae:	2300      	movs	r3, #0
    18b0:	9302      	str	r3, [sp, #8]
    18b2:	2300      	movs	r3, #0
    18b4:	9301      	str	r3, [sp, #4]
    18b6:	2300      	movs	r3, #0
    18b8:	9300      	str	r3, [sp, #0]
    18ba:	236c      	movs	r3, #108	; 0x6c
    18bc:	2128      	movs	r1, #40	; 0x28
    18be:	2001      	movs	r0, #1
    18c0:	4d0c      	ldr	r5, [pc, #48]	; (18f4 <m2m_wifi_connect_sc+0x468>)
    18c2:	47a8      	blx	r5
    18c4:	0003      	movs	r3, r0
    18c6:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    18c8:	2397      	movs	r3, #151	; 0x97
    18ca:	18fb      	adds	r3, r7, r3
    18cc:	781b      	ldrb	r3, [r3, #0]
    18ce:	b25b      	sxtb	r3, r3
}
    18d0:	0018      	movs	r0, r3
    18d2:	46bd      	mov	sp, r7
    18d4:	b026      	add	sp, #152	; 0x98
    18d6:	bdb0      	pop	{r4, r5, r7, pc}
    18d8:	0000025f 	.word	0x0000025f
    18dc:	0000bcf0 	.word	0x0000bcf0
    18e0:	0000b9f8 	.word	0x0000b9f8
    18e4:	0000a811 	.word	0x0000a811
    18e8:	0000bc38 	.word	0x0000bc38
    18ec:	0000a931 	.word	0x0000a931
    18f0:	0000a845 	.word	0x0000a845
    18f4:	00000c41 	.word	0x00000c41

000018f8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    18f8:	b590      	push	{r4, r7, lr}
    18fa:	b085      	sub	sp, #20
    18fc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    18fe:	230f      	movs	r3, #15
    1900:	18fb      	adds	r3, r7, r3
    1902:	2200      	movs	r2, #0
    1904:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    1906:	2300      	movs	r3, #0
    1908:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    190a:	2001      	movs	r0, #1
    190c:	4b64      	ldr	r3, [pc, #400]	; (1aa0 <nm_clkless_wake+0x1a8>)
    190e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    1910:	230f      	movs	r3, #15
    1912:	18fc      	adds	r4, r7, r3
    1914:	1d3b      	adds	r3, r7, #4
    1916:	0019      	movs	r1, r3
    1918:	2001      	movs	r0, #1
    191a:	4b62      	ldr	r3, [pc, #392]	; (1aa4 <nm_clkless_wake+0x1ac>)
    191c:	4798      	blx	r3
    191e:	0003      	movs	r3, r0
    1920:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    1922:	230f      	movs	r3, #15
    1924:	18fb      	adds	r3, r7, r3
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	b25b      	sxtb	r3, r3
    192a:	2b00      	cmp	r3, #0
    192c:	d00d      	beq.n	194a <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    192e:	495e      	ldr	r1, [pc, #376]	; (1aa8 <nm_clkless_wake+0x1b0>)
    1930:	4b5e      	ldr	r3, [pc, #376]	; (1aac <nm_clkless_wake+0x1b4>)
    1932:	2272      	movs	r2, #114	; 0x72
    1934:	0018      	movs	r0, r3
    1936:	4b5e      	ldr	r3, [pc, #376]	; (1ab0 <nm_clkless_wake+0x1b8>)
    1938:	4798      	blx	r3
    193a:	4b5e      	ldr	r3, [pc, #376]	; (1ab4 <nm_clkless_wake+0x1bc>)
    193c:	0018      	movs	r0, r3
    193e:	4b5e      	ldr	r3, [pc, #376]	; (1ab8 <nm_clkless_wake+0x1c0>)
    1940:	4798      	blx	r3
    1942:	200d      	movs	r0, #13
    1944:	4b5d      	ldr	r3, [pc, #372]	; (1abc <nm_clkless_wake+0x1c4>)
    1946:	4798      	blx	r3
		goto _WAKE_EXIT;
    1948:	e0a1      	b.n	1a8e <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    194a:	687b      	ldr	r3, [r7, #4]
    194c:	2202      	movs	r2, #2
    194e:	4313      	orrs	r3, r2
    1950:	0019      	movs	r1, r3
    1952:	2001      	movs	r0, #1
    1954:	4b5a      	ldr	r3, [pc, #360]	; (1ac0 <nm_clkless_wake+0x1c8>)
    1956:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    1958:	2001      	movs	r0, #1
    195a:	4b51      	ldr	r3, [pc, #324]	; (1aa0 <nm_clkless_wake+0x1a8>)
    195c:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    195e:	4b59      	ldr	r3, [pc, #356]	; (1ac4 <nm_clkless_wake+0x1cc>)
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	220f      	movs	r2, #15
    1964:	18bc      	adds	r4, r7, r2
    1966:	003a      	movs	r2, r7
    1968:	0011      	movs	r1, r2
    196a:	0018      	movs	r0, r3
    196c:	4b4d      	ldr	r3, [pc, #308]	; (1aa4 <nm_clkless_wake+0x1ac>)
    196e:	4798      	blx	r3
    1970:	0003      	movs	r3, r0
    1972:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1974:	230f      	movs	r3, #15
    1976:	18fb      	adds	r3, r7, r3
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	b25b      	sxtb	r3, r3
    197c:	2b00      	cmp	r3, #0
    197e:	d108      	bne.n	1992 <nm_clkless_wake+0x9a>
    1980:	230f      	movs	r3, #15
    1982:	18fb      	adds	r3, r7, r3
    1984:	781b      	ldrb	r3, [r3, #0]
    1986:	b25b      	sxtb	r3, r3
    1988:	2b00      	cmp	r3, #0
    198a:	d162      	bne.n	1a52 <nm_clkless_wake+0x15a>
    198c:	683b      	ldr	r3, [r7, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	d15f      	bne.n	1a52 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    1992:	4b4c      	ldr	r3, [pc, #304]	; (1ac4 <nm_clkless_wake+0x1cc>)
    1994:	220e      	movs	r2, #14
    1996:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    1998:	2001      	movs	r0, #1
    199a:	4b41      	ldr	r3, [pc, #260]	; (1aa0 <nm_clkless_wake+0x1a8>)
    199c:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    199e:	4b49      	ldr	r3, [pc, #292]	; (1ac4 <nm_clkless_wake+0x1cc>)
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	220f      	movs	r2, #15
    19a4:	18bc      	adds	r4, r7, r2
    19a6:	003a      	movs	r2, r7
    19a8:	0011      	movs	r1, r2
    19aa:	0018      	movs	r0, r3
    19ac:	4b3d      	ldr	r3, [pc, #244]	; (1aa4 <nm_clkless_wake+0x1ac>)
    19ae:	4798      	blx	r3
    19b0:	0003      	movs	r3, r0
    19b2:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    19b4:	230f      	movs	r3, #15
    19b6:	18fb      	adds	r3, r7, r3
    19b8:	781b      	ldrb	r3, [r3, #0]
    19ba:	b25b      	sxtb	r3, r3
    19bc:	2b00      	cmp	r3, #0
    19be:	d108      	bne.n	19d2 <nm_clkless_wake+0xda>
    19c0:	230f      	movs	r3, #15
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	781b      	ldrb	r3, [r3, #0]
    19c6:	b25b      	sxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	d142      	bne.n	1a52 <nm_clkless_wake+0x15a>
    19cc:	683b      	ldr	r3, [r7, #0]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d13f      	bne.n	1a52 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    19d2:	4b3c      	ldr	r3, [pc, #240]	; (1ac4 <nm_clkless_wake+0x1cc>)
    19d4:	2213      	movs	r2, #19
    19d6:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    19d8:	2001      	movs	r0, #1
    19da:	4b31      	ldr	r3, [pc, #196]	; (1aa0 <nm_clkless_wake+0x1a8>)
    19dc:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    19de:	4b39      	ldr	r3, [pc, #228]	; (1ac4 <nm_clkless_wake+0x1cc>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	220f      	movs	r2, #15
    19e4:	18bc      	adds	r4, r7, r2
    19e6:	003a      	movs	r2, r7
    19e8:	0011      	movs	r1, r2
    19ea:	0018      	movs	r0, r3
    19ec:	4b2d      	ldr	r3, [pc, #180]	; (1aa4 <nm_clkless_wake+0x1ac>)
    19ee:	4798      	blx	r3
    19f0:	0003      	movs	r3, r0
    19f2:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    19f4:	230f      	movs	r3, #15
    19f6:	18fb      	adds	r3, r7, r3
    19f8:	781b      	ldrb	r3, [r3, #0]
    19fa:	b25b      	sxtb	r3, r3
    19fc:	2b00      	cmp	r3, #0
    19fe:	d028      	beq.n	1a52 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    1a00:	4929      	ldr	r1, [pc, #164]	; (1aa8 <nm_clkless_wake+0x1b0>)
    1a02:	4b2a      	ldr	r3, [pc, #168]	; (1aac <nm_clkless_wake+0x1b4>)
    1a04:	2296      	movs	r2, #150	; 0x96
    1a06:	0018      	movs	r0, r3
    1a08:	4b29      	ldr	r3, [pc, #164]	; (1ab0 <nm_clkless_wake+0x1b8>)
    1a0a:	4798      	blx	r3
    1a0c:	4b2e      	ldr	r3, [pc, #184]	; (1ac8 <nm_clkless_wake+0x1d0>)
    1a0e:	0018      	movs	r0, r3
    1a10:	4b29      	ldr	r3, [pc, #164]	; (1ab8 <nm_clkless_wake+0x1c0>)
    1a12:	4798      	blx	r3
    1a14:	200d      	movs	r0, #13
    1a16:	4b29      	ldr	r3, [pc, #164]	; (1abc <nm_clkless_wake+0x1c4>)
    1a18:	4798      	blx	r3
					goto _WAKE_EXIT;
    1a1a:	e038      	b.n	1a8e <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    1a1c:	2002      	movs	r0, #2
    1a1e:	4b20      	ldr	r3, [pc, #128]	; (1aa0 <nm_clkless_wake+0x1a8>)
    1a20:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1a22:	4b28      	ldr	r3, [pc, #160]	; (1ac4 <nm_clkless_wake+0x1cc>)
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	003a      	movs	r2, r7
    1a28:	0011      	movs	r1, r2
    1a2a:	0018      	movs	r0, r3
    1a2c:	4b1d      	ldr	r3, [pc, #116]	; (1aa4 <nm_clkless_wake+0x1ac>)
    1a2e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    1a30:	683b      	ldr	r3, [r7, #0]
    1a32:	2204      	movs	r2, #4
    1a34:	4013      	ands	r3, r2
    1a36:	d10c      	bne.n	1a52 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    1a38:	491b      	ldr	r1, [pc, #108]	; (1aa8 <nm_clkless_wake+0x1b0>)
    1a3a:	4b1c      	ldr	r3, [pc, #112]	; (1aac <nm_clkless_wake+0x1b4>)
    1a3c:	22aa      	movs	r2, #170	; 0xaa
    1a3e:	0018      	movs	r0, r3
    1a40:	4b1b      	ldr	r3, [pc, #108]	; (1ab0 <nm_clkless_wake+0x1b8>)
    1a42:	4798      	blx	r3
    1a44:	4b21      	ldr	r3, [pc, #132]	; (1acc <nm_clkless_wake+0x1d4>)
    1a46:	0018      	movs	r0, r3
    1a48:	4b1b      	ldr	r3, [pc, #108]	; (1ab8 <nm_clkless_wake+0x1c0>)
    1a4a:	4798      	blx	r3
    1a4c:	200d      	movs	r0, #13
    1a4e:	4b1b      	ldr	r3, [pc, #108]	; (1abc <nm_clkless_wake+0x1c4>)
    1a50:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1a52:	683b      	ldr	r3, [r7, #0]
    1a54:	2204      	movs	r2, #4
    1a56:	4013      	ands	r3, r2
    1a58:	d109      	bne.n	1a6e <nm_clkless_wake+0x176>
    1a5a:	68bb      	ldr	r3, [r7, #8]
    1a5c:	3301      	adds	r3, #1
    1a5e:	60bb      	str	r3, [r7, #8]
    1a60:	68ba      	ldr	r2, [r7, #8]
    1a62:	4b1b      	ldr	r3, [pc, #108]	; (1ad0 <nm_clkless_wake+0x1d8>)
    1a64:	2103      	movs	r1, #3
    1a66:	0010      	movs	r0, r2
    1a68:	4798      	blx	r3
    1a6a:	1e0b      	subs	r3, r1, #0
    1a6c:	d0d6      	beq.n	1a1c <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    1a6e:	683b      	ldr	r3, [r7, #0]
    1a70:	2204      	movs	r2, #4
    1a72:	4013      	ands	r3, r2
    1a74:	d106      	bne.n	1a84 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    1a76:	687b      	ldr	r3, [r7, #4]
    1a78:	2202      	movs	r2, #2
    1a7a:	4313      	orrs	r3, r2
    1a7c:	0019      	movs	r1, r3
    1a7e:	2001      	movs	r0, #1
    1a80:	4b0f      	ldr	r3, [pc, #60]	; (1ac0 <nm_clkless_wake+0x1c8>)
    1a82:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    1a84:	683b      	ldr	r3, [r7, #0]
    1a86:	2204      	movs	r2, #4
    1a88:	4013      	ands	r3, r2
    1a8a:	d100      	bne.n	1a8e <nm_clkless_wake+0x196>
    1a8c:	e75d      	b.n	194a <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    1a8e:	230f      	movs	r3, #15
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	781b      	ldrb	r3, [r3, #0]
    1a94:	b25b      	sxtb	r3, r3
}
    1a96:	0018      	movs	r0, r3
    1a98:	46bd      	mov	sp, r7
    1a9a:	b005      	add	sp, #20
    1a9c:	bd90      	pop	{r4, r7, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	00000619 	.word	0x00000619
    1aa4:	00001ad5 	.word	0x00001ad5
    1aa8:	0000be2c 	.word	0x0000be2c
    1aac:	0000bd04 	.word	0x0000bd04
    1ab0:	0000a811 	.word	0x0000a811
    1ab4:	0000bd18 	.word	0x0000bd18
    1ab8:	0000a931 	.word	0x0000a931
    1abc:	0000a845 	.word	0x0000a845
    1ac0:	00001af9 	.word	0x00001af9
    1ac4:	2000000c 	.word	0x2000000c
    1ac8:	0000bd38 	.word	0x0000bd38
    1acc:	0000bd58 	.word	0x0000bd58
    1ad0:	0000999d 	.word	0x0000999d

00001ad4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1ad4:	b580      	push	{r7, lr}
    1ad6:	b082      	sub	sp, #8
    1ad8:	af00      	add	r7, sp, #0
    1ada:	6078      	str	r0, [r7, #4]
    1adc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1ade:	683a      	ldr	r2, [r7, #0]
    1ae0:	687b      	ldr	r3, [r7, #4]
    1ae2:	0011      	movs	r1, r2
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b03      	ldr	r3, [pc, #12]	; (1af4 <nm_read_reg_with_ret+0x20>)
    1ae8:	4798      	blx	r3
    1aea:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1aec:	0018      	movs	r0, r3
    1aee:	46bd      	mov	sp, r7
    1af0:	b002      	add	sp, #8
    1af2:	bd80      	pop	{r7, pc}
    1af4:	00002bbd 	.word	0x00002bbd

00001af8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1af8:	b580      	push	{r7, lr}
    1afa:	b082      	sub	sp, #8
    1afc:	af00      	add	r7, sp, #0
    1afe:	6078      	str	r0, [r7, #4]
    1b00:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1b02:	683a      	ldr	r2, [r7, #0]
    1b04:	687b      	ldr	r3, [r7, #4]
    1b06:	0011      	movs	r1, r2
    1b08:	0018      	movs	r0, r3
    1b0a:	4b03      	ldr	r3, [pc, #12]	; (1b18 <nm_write_reg+0x20>)
    1b0c:	4798      	blx	r3
    1b0e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1b10:	0018      	movs	r0, r3
    1b12:	46bd      	mov	sp, r7
    1b14:	b002      	add	sp, #8
    1b16:	bd80      	pop	{r7, pc}
    1b18:	00002c0d 	.word	0x00002c0d

00001b1c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1b1c:	b580      	push	{r7, lr}
    1b1e:	b084      	sub	sp, #16
    1b20:	af00      	add	r7, sp, #0
    1b22:	60f8      	str	r0, [r7, #12]
    1b24:	60b9      	str	r1, [r7, #8]
    1b26:	1dbb      	adds	r3, r7, #6
    1b28:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1b2a:	1dbb      	adds	r3, r7, #6
    1b2c:	881a      	ldrh	r2, [r3, #0]
    1b2e:	68b9      	ldr	r1, [r7, #8]
    1b30:	68fb      	ldr	r3, [r7, #12]
    1b32:	0018      	movs	r0, r3
    1b34:	4b03      	ldr	r3, [pc, #12]	; (1b44 <p_nm_read_block+0x28>)
    1b36:	4798      	blx	r3
    1b38:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1b3a:	0018      	movs	r0, r3
    1b3c:	46bd      	mov	sp, r7
    1b3e:	b004      	add	sp, #16
    1b40:	bd80      	pop	{r7, pc}
    1b42:	46c0      	nop			; (mov r8, r8)
    1b44:	00002c5d 	.word	0x00002c5d

00001b48 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1b48:	b580      	push	{r7, lr}
    1b4a:	b086      	sub	sp, #24
    1b4c:	af00      	add	r7, sp, #0
    1b4e:	60f8      	str	r0, [r7, #12]
    1b50:	60b9      	str	r1, [r7, #8]
    1b52:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1b54:	4b2d      	ldr	r3, [pc, #180]	; (1c0c <nm_read_block+0xc4>)
    1b56:	881a      	ldrh	r2, [r3, #0]
    1b58:	2310      	movs	r3, #16
    1b5a:	18fb      	adds	r3, r7, r3
    1b5c:	3a08      	subs	r2, #8
    1b5e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1b60:	2300      	movs	r3, #0
    1b62:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1b64:	2313      	movs	r3, #19
    1b66:	18fb      	adds	r3, r7, r3
    1b68:	2200      	movs	r2, #0
    1b6a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1b6c:	2310      	movs	r3, #16
    1b6e:	18fb      	adds	r3, r7, r3
    1b70:	881a      	ldrh	r2, [r3, #0]
    1b72:	687b      	ldr	r3, [r7, #4]
    1b74:	429a      	cmp	r2, r3
    1b76:	d313      	bcc.n	1ba0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1b78:	68ba      	ldr	r2, [r7, #8]
    1b7a:	697b      	ldr	r3, [r7, #20]
    1b7c:	18d1      	adds	r1, r2, r3
    1b7e:	687b      	ldr	r3, [r7, #4]
    1b80:	b29a      	uxth	r2, r3
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	0018      	movs	r0, r3
    1b86:	4b22      	ldr	r3, [pc, #136]	; (1c10 <nm_read_block+0xc8>)
    1b88:	4798      	blx	r3
    1b8a:	0003      	movs	r3, r0
    1b8c:	b2da      	uxtb	r2, r3
    1b8e:	2313      	movs	r3, #19
    1b90:	18fb      	adds	r3, r7, r3
    1b92:	781b      	ldrb	r3, [r3, #0]
    1b94:	18d3      	adds	r3, r2, r3
    1b96:	b2da      	uxtb	r2, r3
    1b98:	2313      	movs	r3, #19
    1b9a:	18fb      	adds	r3, r7, r3
    1b9c:	701a      	strb	r2, [r3, #0]
			break;
    1b9e:	e02d      	b.n	1bfc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1ba0:	68ba      	ldr	r2, [r7, #8]
    1ba2:	697b      	ldr	r3, [r7, #20]
    1ba4:	18d1      	adds	r1, r2, r3
    1ba6:	2310      	movs	r3, #16
    1ba8:	18fb      	adds	r3, r7, r3
    1baa:	881a      	ldrh	r2, [r3, #0]
    1bac:	68fb      	ldr	r3, [r7, #12]
    1bae:	0018      	movs	r0, r3
    1bb0:	4b17      	ldr	r3, [pc, #92]	; (1c10 <nm_read_block+0xc8>)
    1bb2:	4798      	blx	r3
    1bb4:	0003      	movs	r3, r0
    1bb6:	b2da      	uxtb	r2, r3
    1bb8:	2313      	movs	r3, #19
    1bba:	18fb      	adds	r3, r7, r3
    1bbc:	781b      	ldrb	r3, [r3, #0]
    1bbe:	18d3      	adds	r3, r2, r3
    1bc0:	b2da      	uxtb	r2, r3
    1bc2:	2313      	movs	r3, #19
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1bc8:	2313      	movs	r3, #19
    1bca:	18fb      	adds	r3, r7, r3
    1bcc:	781b      	ldrb	r3, [r3, #0]
    1bce:	b25b      	sxtb	r3, r3
    1bd0:	2b00      	cmp	r3, #0
    1bd2:	d112      	bne.n	1bfa <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1bd4:	2310      	movs	r3, #16
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	881b      	ldrh	r3, [r3, #0]
    1bda:	687a      	ldr	r2, [r7, #4]
    1bdc:	1ad3      	subs	r3, r2, r3
    1bde:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1be0:	2310      	movs	r3, #16
    1be2:	18fb      	adds	r3, r7, r3
    1be4:	881b      	ldrh	r3, [r3, #0]
    1be6:	697a      	ldr	r2, [r7, #20]
    1be8:	18d3      	adds	r3, r2, r3
    1bea:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1bec:	2310      	movs	r3, #16
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	881b      	ldrh	r3, [r3, #0]
    1bf2:	68fa      	ldr	r2, [r7, #12]
    1bf4:	18d3      	adds	r3, r2, r3
    1bf6:	60fb      	str	r3, [r7, #12]
		}
	}
    1bf8:	e7b8      	b.n	1b6c <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1bfa:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1bfc:	2313      	movs	r3, #19
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	781b      	ldrb	r3, [r3, #0]
    1c02:	b25b      	sxtb	r3, r3
}
    1c04:	0018      	movs	r0, r3
    1c06:	46bd      	mov	sp, r7
    1c08:	b006      	add	sp, #24
    1c0a:	bd80      	pop	{r7, pc}
    1c0c:	20000008 	.word	0x20000008
    1c10:	00001b1d 	.word	0x00001b1d

00001c14 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b084      	sub	sp, #16
    1c18:	af00      	add	r7, sp, #0
    1c1a:	60f8      	str	r0, [r7, #12]
    1c1c:	60b9      	str	r1, [r7, #8]
    1c1e:	1dbb      	adds	r3, r7, #6
    1c20:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1c22:	1dbb      	adds	r3, r7, #6
    1c24:	881a      	ldrh	r2, [r3, #0]
    1c26:	68b9      	ldr	r1, [r7, #8]
    1c28:	68fb      	ldr	r3, [r7, #12]
    1c2a:	0018      	movs	r0, r3
    1c2c:	4b03      	ldr	r3, [pc, #12]	; (1c3c <p_nm_write_block+0x28>)
    1c2e:	4798      	blx	r3
    1c30:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1c32:	0018      	movs	r0, r3
    1c34:	46bd      	mov	sp, r7
    1c36:	b004      	add	sp, #16
    1c38:	bd80      	pop	{r7, pc}
    1c3a:	46c0      	nop			; (mov r8, r8)
    1c3c:	00002cb5 	.word	0x00002cb5

00001c40 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1c40:	b580      	push	{r7, lr}
    1c42:	b086      	sub	sp, #24
    1c44:	af00      	add	r7, sp, #0
    1c46:	60f8      	str	r0, [r7, #12]
    1c48:	60b9      	str	r1, [r7, #8]
    1c4a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1c4c:	4b2d      	ldr	r3, [pc, #180]	; (1d04 <nm_write_block+0xc4>)
    1c4e:	881a      	ldrh	r2, [r3, #0]
    1c50:	2310      	movs	r3, #16
    1c52:	18fb      	adds	r3, r7, r3
    1c54:	3a08      	subs	r2, #8
    1c56:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1c58:	2300      	movs	r3, #0
    1c5a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1c5c:	2313      	movs	r3, #19
    1c5e:	18fb      	adds	r3, r7, r3
    1c60:	2200      	movs	r2, #0
    1c62:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1c64:	2310      	movs	r3, #16
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	881a      	ldrh	r2, [r3, #0]
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	429a      	cmp	r2, r3
    1c6e:	d313      	bcc.n	1c98 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1c70:	68ba      	ldr	r2, [r7, #8]
    1c72:	697b      	ldr	r3, [r7, #20]
    1c74:	18d1      	adds	r1, r2, r3
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	b29a      	uxth	r2, r3
    1c7a:	68fb      	ldr	r3, [r7, #12]
    1c7c:	0018      	movs	r0, r3
    1c7e:	4b22      	ldr	r3, [pc, #136]	; (1d08 <nm_write_block+0xc8>)
    1c80:	4798      	blx	r3
    1c82:	0003      	movs	r3, r0
    1c84:	b2da      	uxtb	r2, r3
    1c86:	2313      	movs	r3, #19
    1c88:	18fb      	adds	r3, r7, r3
    1c8a:	781b      	ldrb	r3, [r3, #0]
    1c8c:	18d3      	adds	r3, r2, r3
    1c8e:	b2da      	uxtb	r2, r3
    1c90:	2313      	movs	r3, #19
    1c92:	18fb      	adds	r3, r7, r3
    1c94:	701a      	strb	r2, [r3, #0]
			break;
    1c96:	e02d      	b.n	1cf4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1c98:	68ba      	ldr	r2, [r7, #8]
    1c9a:	697b      	ldr	r3, [r7, #20]
    1c9c:	18d1      	adds	r1, r2, r3
    1c9e:	2310      	movs	r3, #16
    1ca0:	18fb      	adds	r3, r7, r3
    1ca2:	881a      	ldrh	r2, [r3, #0]
    1ca4:	68fb      	ldr	r3, [r7, #12]
    1ca6:	0018      	movs	r0, r3
    1ca8:	4b17      	ldr	r3, [pc, #92]	; (1d08 <nm_write_block+0xc8>)
    1caa:	4798      	blx	r3
    1cac:	0003      	movs	r3, r0
    1cae:	b2da      	uxtb	r2, r3
    1cb0:	2313      	movs	r3, #19
    1cb2:	18fb      	adds	r3, r7, r3
    1cb4:	781b      	ldrb	r3, [r3, #0]
    1cb6:	18d3      	adds	r3, r2, r3
    1cb8:	b2da      	uxtb	r2, r3
    1cba:	2313      	movs	r3, #19
    1cbc:	18fb      	adds	r3, r7, r3
    1cbe:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1cc0:	2313      	movs	r3, #19
    1cc2:	18fb      	adds	r3, r7, r3
    1cc4:	781b      	ldrb	r3, [r3, #0]
    1cc6:	b25b      	sxtb	r3, r3
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d112      	bne.n	1cf2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1ccc:	2310      	movs	r3, #16
    1cce:	18fb      	adds	r3, r7, r3
    1cd0:	881b      	ldrh	r3, [r3, #0]
    1cd2:	687a      	ldr	r2, [r7, #4]
    1cd4:	1ad3      	subs	r3, r2, r3
    1cd6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1cd8:	2310      	movs	r3, #16
    1cda:	18fb      	adds	r3, r7, r3
    1cdc:	881b      	ldrh	r3, [r3, #0]
    1cde:	697a      	ldr	r2, [r7, #20]
    1ce0:	18d3      	adds	r3, r2, r3
    1ce2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1ce4:	2310      	movs	r3, #16
    1ce6:	18fb      	adds	r3, r7, r3
    1ce8:	881b      	ldrh	r3, [r3, #0]
    1cea:	68fa      	ldr	r2, [r7, #12]
    1cec:	18d3      	adds	r3, r2, r3
    1cee:	60fb      	str	r3, [r7, #12]
		}
	}
    1cf0:	e7b8      	b.n	1c64 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1cf2:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1cf4:	2313      	movs	r3, #19
    1cf6:	18fb      	adds	r3, r7, r3
    1cf8:	781b      	ldrb	r3, [r3, #0]
    1cfa:	b25b      	sxtb	r3, r3
}
    1cfc:	0018      	movs	r0, r3
    1cfe:	46bd      	mov	sp, r7
    1d00:	b006      	add	sp, #24
    1d02:	bd80      	pop	{r7, pc}
    1d04:	20000008 	.word	0x20000008
    1d08:	00001c15 	.word	0x00001c15

00001d0c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1d0c:	b580      	push	{r7, lr}
    1d0e:	b086      	sub	sp, #24
    1d10:	af00      	add	r7, sp, #0
    1d12:	6078      	str	r0, [r7, #4]
    1d14:	000a      	movs	r2, r1
    1d16:	1cbb      	adds	r3, r7, #2
    1d18:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1d1a:	230c      	movs	r3, #12
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	2200      	movs	r2, #0
    1d20:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    1d22:	230c      	movs	r3, #12
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	687a      	ldr	r2, [r7, #4]
    1d28:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1d2a:	230c      	movs	r3, #12
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	1cba      	adds	r2, r7, #2
    1d30:	8812      	ldrh	r2, [r2, #0]
    1d32:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d34:	230c      	movs	r3, #12
    1d36:	18fb      	adds	r3, r7, r3
    1d38:	0019      	movs	r1, r3
    1d3a:	2003      	movs	r0, #3
    1d3c:	4b03      	ldr	r3, [pc, #12]	; (1d4c <nmi_spi_read+0x40>)
    1d3e:	4798      	blx	r3
    1d40:	0003      	movs	r3, r0
}
    1d42:	0018      	movs	r0, r3
    1d44:	46bd      	mov	sp, r7
    1d46:	b006      	add	sp, #24
    1d48:	bd80      	pop	{r7, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00000929 	.word	0x00000929

00001d50 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1d50:	b580      	push	{r7, lr}
    1d52:	b086      	sub	sp, #24
    1d54:	af00      	add	r7, sp, #0
    1d56:	6078      	str	r0, [r7, #4]
    1d58:	000a      	movs	r2, r1
    1d5a:	1cbb      	adds	r3, r7, #2
    1d5c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1d5e:	230c      	movs	r3, #12
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	687a      	ldr	r2, [r7, #4]
    1d64:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    1d66:	230c      	movs	r3, #12
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	2200      	movs	r2, #0
    1d6c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1d6e:	230c      	movs	r3, #12
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	1cba      	adds	r2, r7, #2
    1d74:	8812      	ldrh	r2, [r2, #0]
    1d76:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d78:	230c      	movs	r3, #12
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	0019      	movs	r1, r3
    1d7e:	2003      	movs	r0, #3
    1d80:	4b03      	ldr	r3, [pc, #12]	; (1d90 <nmi_spi_write+0x40>)
    1d82:	4798      	blx	r3
    1d84:	0003      	movs	r3, r0
}
    1d86:	0018      	movs	r0, r3
    1d88:	46bd      	mov	sp, r7
    1d8a:	b006      	add	sp, #24
    1d8c:	bd80      	pop	{r7, pc}
    1d8e:	46c0      	nop			; (mov r8, r8)
    1d90:	00000929 	.word	0x00000929

00001d94 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    1d94:	b580      	push	{r7, lr}
    1d96:	b082      	sub	sp, #8
    1d98:	af00      	add	r7, sp, #0
    1d9a:	0002      	movs	r2, r0
    1d9c:	1dfb      	adds	r3, r7, #7
    1d9e:	701a      	strb	r2, [r3, #0]
    1da0:	1dbb      	adds	r3, r7, #6
    1da2:	1c0a      	adds	r2, r1, #0
    1da4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    1da6:	1dfb      	adds	r3, r7, #7
    1da8:	781b      	ldrb	r3, [r3, #0]
    1daa:	005a      	lsls	r2, r3, #1
    1dac:	1dbb      	adds	r3, r7, #6
    1dae:	781b      	ldrb	r3, [r3, #0]
    1db0:	4053      	eors	r3, r2
    1db2:	4a03      	ldr	r2, [pc, #12]	; (1dc0 <crc7_byte+0x2c>)
    1db4:	5cd3      	ldrb	r3, [r2, r3]
}
    1db6:	0018      	movs	r0, r3
    1db8:	46bd      	mov	sp, r7
    1dba:	b002      	add	sp, #8
    1dbc:	bd80      	pop	{r7, pc}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	0000be3c 	.word	0x0000be3c

00001dc4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    1dc4:	b590      	push	{r4, r7, lr}
    1dc6:	b085      	sub	sp, #20
    1dc8:	af00      	add	r7, sp, #0
    1dca:	60b9      	str	r1, [r7, #8]
    1dcc:	607a      	str	r2, [r7, #4]
    1dce:	230f      	movs	r3, #15
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	1c02      	adds	r2, r0, #0
    1dd4:	701a      	strb	r2, [r3, #0]
	while (len--)
    1dd6:	e00e      	b.n	1df6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    1dd8:	68bb      	ldr	r3, [r7, #8]
    1dda:	1c5a      	adds	r2, r3, #1
    1ddc:	60ba      	str	r2, [r7, #8]
    1dde:	781a      	ldrb	r2, [r3, #0]
    1de0:	230f      	movs	r3, #15
    1de2:	18fc      	adds	r4, r7, r3
    1de4:	230f      	movs	r3, #15
    1de6:	18fb      	adds	r3, r7, r3
    1de8:	781b      	ldrb	r3, [r3, #0]
    1dea:	0011      	movs	r1, r2
    1dec:	0018      	movs	r0, r3
    1dee:	4b08      	ldr	r3, [pc, #32]	; (1e10 <crc7+0x4c>)
    1df0:	4798      	blx	r3
    1df2:	0003      	movs	r3, r0
    1df4:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	1e5a      	subs	r2, r3, #1
    1dfa:	607a      	str	r2, [r7, #4]
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d1eb      	bne.n	1dd8 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    1e00:	230f      	movs	r3, #15
    1e02:	18fb      	adds	r3, r7, r3
    1e04:	781b      	ldrb	r3, [r3, #0]
}
    1e06:	0018      	movs	r0, r3
    1e08:	46bd      	mov	sp, r7
    1e0a:	b005      	add	sp, #20
    1e0c:	bd90      	pop	{r4, r7, pc}
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	00001d95 	.word	0x00001d95

00001e14 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1e14:	b590      	push	{r4, r7, lr}
    1e16:	b089      	sub	sp, #36	; 0x24
    1e18:	af00      	add	r7, sp, #0
    1e1a:	60b9      	str	r1, [r7, #8]
    1e1c:	607a      	str	r2, [r7, #4]
    1e1e:	603b      	str	r3, [r7, #0]
    1e20:	230f      	movs	r3, #15
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	1c02      	adds	r2, r0, #0
    1e26:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    1e28:	231f      	movs	r3, #31
    1e2a:	18fb      	adds	r3, r7, r3
    1e2c:	2205      	movs	r2, #5
    1e2e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    1e30:	231e      	movs	r3, #30
    1e32:	18fb      	adds	r3, r7, r3
    1e34:	2201      	movs	r2, #1
    1e36:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    1e38:	2314      	movs	r3, #20
    1e3a:	18fb      	adds	r3, r7, r3
    1e3c:	220f      	movs	r2, #15
    1e3e:	18ba      	adds	r2, r7, r2
    1e40:	7812      	ldrb	r2, [r2, #0]
    1e42:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    1e44:	230f      	movs	r3, #15
    1e46:	18fb      	adds	r3, r7, r3
    1e48:	781b      	ldrb	r3, [r3, #0]
    1e4a:	3bc1      	subs	r3, #193	; 0xc1
    1e4c:	2b0e      	cmp	r3, #14
    1e4e:	d900      	bls.n	1e52 <spi_cmd+0x3e>
    1e50:	e11b      	b.n	208a <STACK_SIZE+0x8a>
    1e52:	009a      	lsls	r2, r3, #2
    1e54:	4bb6      	ldr	r3, [pc, #728]	; (2130 <STACK_SIZE+0x130>)
    1e56:	18d3      	adds	r3, r2, r3
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1e5c:	68bb      	ldr	r3, [r7, #8]
    1e5e:	0c1b      	lsrs	r3, r3, #16
    1e60:	b2da      	uxtb	r2, r3
    1e62:	2314      	movs	r3, #20
    1e64:	18fb      	adds	r3, r7, r3
    1e66:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e68:	68bb      	ldr	r3, [r7, #8]
    1e6a:	0a1b      	lsrs	r3, r3, #8
    1e6c:	b2da      	uxtb	r2, r3
    1e6e:	2314      	movs	r3, #20
    1e70:	18fb      	adds	r3, r7, r3
    1e72:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1e74:	68bb      	ldr	r3, [r7, #8]
    1e76:	b2da      	uxtb	r2, r3
    1e78:	2314      	movs	r3, #20
    1e7a:	18fb      	adds	r3, r7, r3
    1e7c:	70da      	strb	r2, [r3, #3]
		len = 5;
    1e7e:	231f      	movs	r3, #31
    1e80:	18fb      	adds	r3, r7, r3
    1e82:	2205      	movs	r2, #5
    1e84:	701a      	strb	r2, [r3, #0]
		break;
    1e86:	e105      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1e88:	68bb      	ldr	r3, [r7, #8]
    1e8a:	0a1b      	lsrs	r3, r3, #8
    1e8c:	b2da      	uxtb	r2, r3
    1e8e:	2314      	movs	r3, #20
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1e94:	2330      	movs	r3, #48	; 0x30
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d009      	beq.n	1eb2 <spi_cmd+0x9e>
    1e9e:	2314      	movs	r3, #20
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	785b      	ldrb	r3, [r3, #1]
    1ea4:	2280      	movs	r2, #128	; 0x80
    1ea6:	4252      	negs	r2, r2
    1ea8:	4313      	orrs	r3, r2
    1eaa:	b2da      	uxtb	r2, r3
    1eac:	2314      	movs	r3, #20
    1eae:	18fb      	adds	r3, r7, r3
    1eb0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    1eb2:	68bb      	ldr	r3, [r7, #8]
    1eb4:	b2da      	uxtb	r2, r3
    1eb6:	2314      	movs	r3, #20
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1ebc:	2314      	movs	r3, #20
    1ebe:	18fb      	adds	r3, r7, r3
    1ec0:	2200      	movs	r2, #0
    1ec2:	70da      	strb	r2, [r3, #3]
		len = 5;
    1ec4:	231f      	movs	r3, #31
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	2205      	movs	r2, #5
    1eca:	701a      	strb	r2, [r3, #0]
		break;
    1ecc:	e0e2      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1ece:	2314      	movs	r3, #20
    1ed0:	18fb      	adds	r3, r7, r3
    1ed2:	2200      	movs	r2, #0
    1ed4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1ed6:	2314      	movs	r3, #20
    1ed8:	18fb      	adds	r3, r7, r3
    1eda:	2200      	movs	r2, #0
    1edc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1ede:	2314      	movs	r3, #20
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	2200      	movs	r2, #0
    1ee4:	70da      	strb	r2, [r3, #3]
		len = 5;
    1ee6:	231f      	movs	r3, #31
    1ee8:	18fb      	adds	r3, r7, r3
    1eea:	2205      	movs	r2, #5
    1eec:	701a      	strb	r2, [r3, #0]
		break;
    1eee:	e0d1      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    1ef0:	2314      	movs	r3, #20
    1ef2:	18fb      	adds	r3, r7, r3
    1ef4:	2200      	movs	r2, #0
    1ef6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1ef8:	2314      	movs	r3, #20
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	2200      	movs	r2, #0
    1efe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f00:	2314      	movs	r3, #20
    1f02:	18fb      	adds	r3, r7, r3
    1f04:	2200      	movs	r2, #0
    1f06:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f08:	231f      	movs	r3, #31
    1f0a:	18fb      	adds	r3, r7, r3
    1f0c:	2205      	movs	r2, #5
    1f0e:	701a      	strb	r2, [r3, #0]
		break;
    1f10:	e0c0      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    1f12:	2314      	movs	r3, #20
    1f14:	18fb      	adds	r3, r7, r3
    1f16:	22ff      	movs	r2, #255	; 0xff
    1f18:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1f1a:	2314      	movs	r3, #20
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	22ff      	movs	r2, #255	; 0xff
    1f20:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1f22:	2314      	movs	r3, #20
    1f24:	18fb      	adds	r3, r7, r3
    1f26:	22ff      	movs	r2, #255	; 0xff
    1f28:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f2a:	231f      	movs	r3, #31
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	2205      	movs	r2, #5
    1f30:	701a      	strb	r2, [r3, #0]
		break;
    1f32:	e0af      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    1f34:	68bb      	ldr	r3, [r7, #8]
    1f36:	0c1b      	lsrs	r3, r3, #16
    1f38:	b2da      	uxtb	r2, r3
    1f3a:	2314      	movs	r3, #20
    1f3c:	18fb      	adds	r3, r7, r3
    1f3e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	0a1b      	lsrs	r3, r3, #8
    1f44:	b2da      	uxtb	r2, r3
    1f46:	2314      	movs	r3, #20
    1f48:	18fb      	adds	r3, r7, r3
    1f4a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f4c:	68bb      	ldr	r3, [r7, #8]
    1f4e:	b2da      	uxtb	r2, r3
    1f50:	2314      	movs	r3, #20
    1f52:	18fb      	adds	r3, r7, r3
    1f54:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    1f56:	683b      	ldr	r3, [r7, #0]
    1f58:	0a1b      	lsrs	r3, r3, #8
    1f5a:	b2da      	uxtb	r2, r3
    1f5c:	2314      	movs	r3, #20
    1f5e:	18fb      	adds	r3, r7, r3
    1f60:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    1f62:	683b      	ldr	r3, [r7, #0]
    1f64:	b2da      	uxtb	r2, r3
    1f66:	2314      	movs	r3, #20
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	715a      	strb	r2, [r3, #5]
		len = 7;
    1f6c:	231f      	movs	r3, #31
    1f6e:	18fb      	adds	r3, r7, r3
    1f70:	2207      	movs	r2, #7
    1f72:	701a      	strb	r2, [r3, #0]
		break;
    1f74:	e08e      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    1f76:	68bb      	ldr	r3, [r7, #8]
    1f78:	0c1b      	lsrs	r3, r3, #16
    1f7a:	b2da      	uxtb	r2, r3
    1f7c:	2314      	movs	r3, #20
    1f7e:	18fb      	adds	r3, r7, r3
    1f80:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f82:	68bb      	ldr	r3, [r7, #8]
    1f84:	0a1b      	lsrs	r3, r3, #8
    1f86:	b2da      	uxtb	r2, r3
    1f88:	2314      	movs	r3, #20
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f8e:	68bb      	ldr	r3, [r7, #8]
    1f90:	b2da      	uxtb	r2, r3
    1f92:	2314      	movs	r3, #20
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    1f98:	683b      	ldr	r3, [r7, #0]
    1f9a:	0c1b      	lsrs	r3, r3, #16
    1f9c:	b2da      	uxtb	r2, r3
    1f9e:	2314      	movs	r3, #20
    1fa0:	18fb      	adds	r3, r7, r3
    1fa2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    1fa4:	683b      	ldr	r3, [r7, #0]
    1fa6:	0a1b      	lsrs	r3, r3, #8
    1fa8:	b2da      	uxtb	r2, r3
    1faa:	2314      	movs	r3, #20
    1fac:	18fb      	adds	r3, r7, r3
    1fae:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    1fb0:	683b      	ldr	r3, [r7, #0]
    1fb2:	b2da      	uxtb	r2, r3
    1fb4:	2314      	movs	r3, #20
    1fb6:	18fb      	adds	r3, r7, r3
    1fb8:	719a      	strb	r2, [r3, #6]
		len = 8;
    1fba:	231f      	movs	r3, #31
    1fbc:	18fb      	adds	r3, r7, r3
    1fbe:	2208      	movs	r2, #8
    1fc0:	701a      	strb	r2, [r3, #0]
		break;
    1fc2:	e067      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1fc4:	68bb      	ldr	r3, [r7, #8]
    1fc6:	0a1b      	lsrs	r3, r3, #8
    1fc8:	b2da      	uxtb	r2, r3
    1fca:	2314      	movs	r3, #20
    1fcc:	18fb      	adds	r3, r7, r3
    1fce:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1fd0:	2330      	movs	r3, #48	; 0x30
    1fd2:	18fb      	adds	r3, r7, r3
    1fd4:	781b      	ldrb	r3, [r3, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d009      	beq.n	1fee <spi_cmd+0x1da>
    1fda:	2314      	movs	r3, #20
    1fdc:	18fb      	adds	r3, r7, r3
    1fde:	785b      	ldrb	r3, [r3, #1]
    1fe0:	2280      	movs	r2, #128	; 0x80
    1fe2:	4252      	negs	r2, r2
    1fe4:	4313      	orrs	r3, r2
    1fe6:	b2da      	uxtb	r2, r3
    1fe8:	2314      	movs	r3, #20
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    1fee:	68bb      	ldr	r3, [r7, #8]
    1ff0:	b2da      	uxtb	r2, r3
    1ff2:	2314      	movs	r3, #20
    1ff4:	18fb      	adds	r3, r7, r3
    1ff6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1ff8:	687b      	ldr	r3, [r7, #4]
    1ffa:	0e1b      	lsrs	r3, r3, #24
    1ffc:	b2da      	uxtb	r2, r3
    1ffe:	2314      	movs	r3, #20
    2000:	18fb      	adds	r3, r7, r3
    2002:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2004:	687b      	ldr	r3, [r7, #4]
    2006:	0c1b      	lsrs	r3, r3, #16
    2008:	b2da      	uxtb	r2, r3
    200a:	2314      	movs	r3, #20
    200c:	18fb      	adds	r3, r7, r3
    200e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2010:	687b      	ldr	r3, [r7, #4]
    2012:	0a1b      	lsrs	r3, r3, #8
    2014:	b2da      	uxtb	r2, r3
    2016:	2314      	movs	r3, #20
    2018:	18fb      	adds	r3, r7, r3
    201a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	b2da      	uxtb	r2, r3
    2020:	2314      	movs	r3, #20
    2022:	18fb      	adds	r3, r7, r3
    2024:	719a      	strb	r2, [r3, #6]
		len = 8;
    2026:	231f      	movs	r3, #31
    2028:	18fb      	adds	r3, r7, r3
    202a:	2208      	movs	r2, #8
    202c:	701a      	strb	r2, [r3, #0]
		break;
    202e:	e031      	b.n	2094 <STACK_SIZE+0x94>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2030:	68bb      	ldr	r3, [r7, #8]
    2032:	0c1b      	lsrs	r3, r3, #16
    2034:	b2da      	uxtb	r2, r3
    2036:	2314      	movs	r3, #20
    2038:	18fb      	adds	r3, r7, r3
    203a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    203c:	68bb      	ldr	r3, [r7, #8]
    203e:	0a1b      	lsrs	r3, r3, #8
    2040:	b2da      	uxtb	r2, r3
    2042:	2314      	movs	r3, #20
    2044:	18fb      	adds	r3, r7, r3
    2046:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    2048:	68bb      	ldr	r3, [r7, #8]
    204a:	b2da      	uxtb	r2, r3
    204c:	2314      	movs	r3, #20
    204e:	18fb      	adds	r3, r7, r3
    2050:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2052:	687b      	ldr	r3, [r7, #4]
    2054:	0e1b      	lsrs	r3, r3, #24
    2056:	b2da      	uxtb	r2, r3
    2058:	2314      	movs	r3, #20
    205a:	18fb      	adds	r3, r7, r3
    205c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	0c1b      	lsrs	r3, r3, #16
    2062:	b2da      	uxtb	r2, r3
    2064:	2314      	movs	r3, #20
    2066:	18fb      	adds	r3, r7, r3
    2068:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    206a:	687b      	ldr	r3, [r7, #4]
    206c:	0a1b      	lsrs	r3, r3, #8
    206e:	b2da      	uxtb	r2, r3
    2070:	2314      	movs	r3, #20
    2072:	18fb      	adds	r3, r7, r3
    2074:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	b2da      	uxtb	r2, r3
    207a:	2314      	movs	r3, #20
    207c:	18fb      	adds	r3, r7, r3
    207e:	71da      	strb	r2, [r3, #7]
		len = 9;
    2080:	231f      	movs	r3, #31
    2082:	18fb      	adds	r3, r7, r3
    2084:	2209      	movs	r2, #9
    2086:	701a      	strb	r2, [r3, #0]
		break;
    2088:	e004      	b.n	2094 <STACK_SIZE+0x94>
	default:
		result = N_FAIL;
    208a:	231e      	movs	r3, #30
    208c:	18fb      	adds	r3, r7, r3
    208e:	2200      	movs	r2, #0
    2090:	701a      	strb	r2, [r3, #0]
		break;
    2092:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    2094:	231e      	movs	r3, #30
    2096:	18fb      	adds	r3, r7, r3
    2098:	781b      	ldrb	r3, [r3, #0]
    209a:	b25b      	sxtb	r3, r3
    209c:	2b00      	cmp	r3, #0
    209e:	d03e      	beq.n	211e <STACK_SIZE+0x11e>
		if (!gu8Crc_off)
    20a0:	4b24      	ldr	r3, [pc, #144]	; (2134 <STACK_SIZE+0x134>)
    20a2:	781b      	ldrb	r3, [r3, #0]
    20a4:	2b00      	cmp	r3, #0
    20a6:	d115      	bne.n	20d4 <STACK_SIZE+0xd4>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    20a8:	231f      	movs	r3, #31
    20aa:	18fb      	adds	r3, r7, r3
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	1e5c      	subs	r4, r3, #1
    20b0:	231f      	movs	r3, #31
    20b2:	18fb      	adds	r3, r7, r3
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	3b01      	subs	r3, #1
    20b8:	001a      	movs	r2, r3
    20ba:	2314      	movs	r3, #20
    20bc:	18fb      	adds	r3, r7, r3
    20be:	0019      	movs	r1, r3
    20c0:	207f      	movs	r0, #127	; 0x7f
    20c2:	4b1d      	ldr	r3, [pc, #116]	; (2138 <STACK_SIZE+0x138>)
    20c4:	4798      	blx	r3
    20c6:	0003      	movs	r3, r0
    20c8:	18db      	adds	r3, r3, r3
    20ca:	b2da      	uxtb	r2, r3
    20cc:	2314      	movs	r3, #20
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	551a      	strb	r2, [r3, r4]
    20d2:	e006      	b.n	20e2 <STACK_SIZE+0xe2>
		else
			len-=1;
    20d4:	231f      	movs	r3, #31
    20d6:	18fb      	adds	r3, r7, r3
    20d8:	221f      	movs	r2, #31
    20da:	18ba      	adds	r2, r7, r2
    20dc:	7812      	ldrb	r2, [r2, #0]
    20de:	3a01      	subs	r2, #1
    20e0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    20e2:	231f      	movs	r3, #31
    20e4:	18fb      	adds	r3, r7, r3
    20e6:	781b      	ldrb	r3, [r3, #0]
    20e8:	b29a      	uxth	r2, r3
    20ea:	2314      	movs	r3, #20
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	0011      	movs	r1, r2
    20f0:	0018      	movs	r0, r3
    20f2:	4b12      	ldr	r3, [pc, #72]	; (213c <STACK_SIZE+0x13c>)
    20f4:	4798      	blx	r3
    20f6:	1e03      	subs	r3, r0, #0
    20f8:	d011      	beq.n	211e <STACK_SIZE+0x11e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    20fa:	2384      	movs	r3, #132	; 0x84
    20fc:	005a      	lsls	r2, r3, #1
    20fe:	4910      	ldr	r1, [pc, #64]	; (2140 <STACK_SIZE+0x140>)
    2100:	4b10      	ldr	r3, [pc, #64]	; (2144 <STACK_SIZE+0x144>)
    2102:	0018      	movs	r0, r3
    2104:	4b10      	ldr	r3, [pc, #64]	; (2148 <STACK_SIZE+0x148>)
    2106:	4798      	blx	r3
    2108:	4b10      	ldr	r3, [pc, #64]	; (214c <STACK_SIZE+0x14c>)
    210a:	0018      	movs	r0, r3
    210c:	4b10      	ldr	r3, [pc, #64]	; (2150 <STACK_SIZE+0x150>)
    210e:	4798      	blx	r3
    2110:	200d      	movs	r0, #13
    2112:	4b10      	ldr	r3, [pc, #64]	; (2154 <STACK_SIZE+0x154>)
    2114:	4798      	blx	r3
			result = N_FAIL;
    2116:	231e      	movs	r3, #30
    2118:	18fb      	adds	r3, r7, r3
    211a:	2200      	movs	r2, #0
    211c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    211e:	231e      	movs	r3, #30
    2120:	18fb      	adds	r3, r7, r3
    2122:	781b      	ldrb	r3, [r3, #0]
    2124:	b25b      	sxtb	r3, r3
}
    2126:	0018      	movs	r0, r3
    2128:	46bd      	mov	sp, r7
    212a:	b009      	add	sp, #36	; 0x24
    212c:	bd90      	pop	{r4, r7, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	0000c3f4 	.word	0x0000c3f4
    2134:	200000c4 	.word	0x200000c4
    2138:	00001dc5 	.word	0x00001dc5
    213c:	00001d51 	.word	0x00001d51
    2140:	0000c430 	.word	0x0000c430
    2144:	0000bf3c 	.word	0x0000bf3c
    2148:	0000a811 	.word	0x0000a811
    214c:	0000bf50 	.word	0x0000bf50
    2150:	0000a931 	.word	0x0000a931
    2154:	0000a845 	.word	0x0000a845

00002158 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2158:	b580      	push	{r7, lr}
    215a:	b084      	sub	sp, #16
    215c:	af00      	add	r7, sp, #0
    215e:	0002      	movs	r2, r0
    2160:	1dfb      	adds	r3, r7, #7
    2162:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    2164:	230f      	movs	r3, #15
    2166:	18fb      	adds	r3, r7, r3
    2168:	2201      	movs	r2, #1
    216a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    216c:	1dfb      	adds	r3, r7, #7
    216e:	781b      	ldrb	r3, [r3, #0]
    2170:	2bcf      	cmp	r3, #207	; 0xcf
    2172:	d007      	beq.n	2184 <spi_cmd_rsp+0x2c>
    2174:	1dfb      	adds	r3, r7, #7
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	2bc5      	cmp	r3, #197	; 0xc5
    217a:	d003      	beq.n	2184 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    217c:	1dfb      	adds	r3, r7, #7
    217e:	781b      	ldrb	r3, [r3, #0]
    2180:	2bc6      	cmp	r3, #198	; 0xc6
    2182:	d10c      	bne.n	219e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2184:	230d      	movs	r3, #13
    2186:	18fb      	adds	r3, r7, r3
    2188:	2101      	movs	r1, #1
    218a:	0018      	movs	r0, r3
    218c:	4b3a      	ldr	r3, [pc, #232]	; (2278 <spi_cmd_rsp+0x120>)
    218e:	4798      	blx	r3
    2190:	1e03      	subs	r3, r0, #0
    2192:	d004      	beq.n	219e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    2194:	230f      	movs	r3, #15
    2196:	18fb      	adds	r3, r7, r3
    2198:	2200      	movs	r2, #0
    219a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    219c:	e063      	b.n	2266 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    219e:	230e      	movs	r3, #14
    21a0:	18fb      	adds	r3, r7, r3
    21a2:	220a      	movs	r2, #10
    21a4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    21a6:	230d      	movs	r3, #13
    21a8:	18fb      	adds	r3, r7, r3
    21aa:	2101      	movs	r1, #1
    21ac:	0018      	movs	r0, r3
    21ae:	4b32      	ldr	r3, [pc, #200]	; (2278 <spi_cmd_rsp+0x120>)
    21b0:	4798      	blx	r3
    21b2:	1e03      	subs	r3, r0, #0
    21b4:	d013      	beq.n	21de <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    21b6:	2328      	movs	r3, #40	; 0x28
    21b8:	33ff      	adds	r3, #255	; 0xff
    21ba:	001a      	movs	r2, r3
    21bc:	492f      	ldr	r1, [pc, #188]	; (227c <spi_cmd_rsp+0x124>)
    21be:	4b30      	ldr	r3, [pc, #192]	; (2280 <spi_cmd_rsp+0x128>)
    21c0:	0018      	movs	r0, r3
    21c2:	4b30      	ldr	r3, [pc, #192]	; (2284 <spi_cmd_rsp+0x12c>)
    21c4:	4798      	blx	r3
    21c6:	4b30      	ldr	r3, [pc, #192]	; (2288 <spi_cmd_rsp+0x130>)
    21c8:	0018      	movs	r0, r3
    21ca:	4b30      	ldr	r3, [pc, #192]	; (228c <spi_cmd_rsp+0x134>)
    21cc:	4798      	blx	r3
    21ce:	200d      	movs	r0, #13
    21d0:	4b2f      	ldr	r3, [pc, #188]	; (2290 <spi_cmd_rsp+0x138>)
    21d2:	4798      	blx	r3
			result = N_FAIL;
    21d4:	230f      	movs	r3, #15
    21d6:	18fb      	adds	r3, r7, r3
    21d8:	2200      	movs	r2, #0
    21da:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    21dc:	e043      	b.n	2266 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    21de:	230d      	movs	r3, #13
    21e0:	18fb      	adds	r3, r7, r3
    21e2:	781b      	ldrb	r3, [r3, #0]
    21e4:	1dfa      	adds	r2, r7, #7
    21e6:	7812      	ldrb	r2, [r2, #0]
    21e8:	429a      	cmp	r2, r3
    21ea:	d00b      	beq.n	2204 <spi_cmd_rsp+0xac>
    21ec:	230e      	movs	r3, #14
    21ee:	18fb      	adds	r3, r7, r3
    21f0:	781b      	ldrb	r3, [r3, #0]
    21f2:	b25b      	sxtb	r3, r3
    21f4:	b2da      	uxtb	r2, r3
    21f6:	3a01      	subs	r2, #1
    21f8:	b2d1      	uxtb	r1, r2
    21fa:	220e      	movs	r2, #14
    21fc:	18ba      	adds	r2, r7, r2
    21fe:	7011      	strb	r1, [r2, #0]
    2200:	2b00      	cmp	r3, #0
    2202:	dcd0      	bgt.n	21a6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    2204:	230e      	movs	r3, #14
    2206:	18fb      	adds	r3, r7, r3
    2208:	220a      	movs	r2, #10
    220a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    220c:	230d      	movs	r3, #13
    220e:	18fb      	adds	r3, r7, r3
    2210:	2101      	movs	r1, #1
    2212:	0018      	movs	r0, r3
    2214:	4b18      	ldr	r3, [pc, #96]	; (2278 <spi_cmd_rsp+0x120>)
    2216:	4798      	blx	r3
    2218:	1e03      	subs	r3, r0, #0
    221a:	d013      	beq.n	2244 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    221c:	2336      	movs	r3, #54	; 0x36
    221e:	33ff      	adds	r3, #255	; 0xff
    2220:	001a      	movs	r2, r3
    2222:	4916      	ldr	r1, [pc, #88]	; (227c <spi_cmd_rsp+0x124>)
    2224:	4b16      	ldr	r3, [pc, #88]	; (2280 <spi_cmd_rsp+0x128>)
    2226:	0018      	movs	r0, r3
    2228:	4b16      	ldr	r3, [pc, #88]	; (2284 <spi_cmd_rsp+0x12c>)
    222a:	4798      	blx	r3
    222c:	4b16      	ldr	r3, [pc, #88]	; (2288 <spi_cmd_rsp+0x130>)
    222e:	0018      	movs	r0, r3
    2230:	4b16      	ldr	r3, [pc, #88]	; (228c <spi_cmd_rsp+0x134>)
    2232:	4798      	blx	r3
    2234:	200d      	movs	r0, #13
    2236:	4b16      	ldr	r3, [pc, #88]	; (2290 <spi_cmd_rsp+0x138>)
    2238:	4798      	blx	r3
			result = N_FAIL;
    223a:	230f      	movs	r3, #15
    223c:	18fb      	adds	r3, r7, r3
    223e:	2200      	movs	r2, #0
    2240:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    2242:	e010      	b.n	2266 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2244:	230d      	movs	r3, #13
    2246:	18fb      	adds	r3, r7, r3
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	2b00      	cmp	r3, #0
    224c:	d00b      	beq.n	2266 <spi_cmd_rsp+0x10e>
    224e:	230e      	movs	r3, #14
    2250:	18fb      	adds	r3, r7, r3
    2252:	781b      	ldrb	r3, [r3, #0]
    2254:	b25b      	sxtb	r3, r3
    2256:	b2da      	uxtb	r2, r3
    2258:	3a01      	subs	r2, #1
    225a:	b2d1      	uxtb	r1, r2
    225c:	220e      	movs	r2, #14
    225e:	18ba      	adds	r2, r7, r2
    2260:	7011      	strb	r1, [r2, #0]
    2262:	2b00      	cmp	r3, #0
    2264:	dcd2      	bgt.n	220c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    2266:	230f      	movs	r3, #15
    2268:	18fb      	adds	r3, r7, r3
    226a:	781b      	ldrb	r3, [r3, #0]
    226c:	b25b      	sxtb	r3, r3
}
    226e:	0018      	movs	r0, r3
    2270:	46bd      	mov	sp, r7
    2272:	b004      	add	sp, #16
    2274:	bd80      	pop	{r7, pc}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	00001d0d 	.word	0x00001d0d
    227c:	0000c438 	.word	0x0000c438
    2280:	0000bf3c 	.word	0x0000bf3c
    2284:	0000a811 	.word	0x0000a811
    2288:	0000bf7c 	.word	0x0000bf7c
    228c:	0000a931 	.word	0x0000a931
    2290:	0000a845 	.word	0x0000a845

00002294 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    2294:	b580      	push	{r7, lr}
    2296:	b086      	sub	sp, #24
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
    229c:	0008      	movs	r0, r1
    229e:	0011      	movs	r1, r2
    22a0:	1cbb      	adds	r3, r7, #2
    22a2:	1c02      	adds	r2, r0, #0
    22a4:	801a      	strh	r2, [r3, #0]
    22a6:	1c7b      	adds	r3, r7, #1
    22a8:	1c0a      	adds	r2, r1, #0
    22aa:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    22ac:	2311      	movs	r3, #17
    22ae:	18fb      	adds	r3, r7, r3
    22b0:	2201      	movs	r2, #1
    22b2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    22b4:	2314      	movs	r3, #20
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	2200      	movs	r2, #0
    22ba:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    22bc:	1cbb      	adds	r3, r7, #2
    22be:	881a      	ldrh	r2, [r3, #0]
    22c0:	2380      	movs	r3, #128	; 0x80
    22c2:	019b      	lsls	r3, r3, #6
    22c4:	429a      	cmp	r2, r3
    22c6:	d805      	bhi.n	22d4 <spi_data_read+0x40>
			nbytes = sz;
    22c8:	2312      	movs	r3, #18
    22ca:	18fb      	adds	r3, r7, r3
    22cc:	1cba      	adds	r2, r7, #2
    22ce:	8812      	ldrh	r2, [r2, #0]
    22d0:	801a      	strh	r2, [r3, #0]
    22d2:	e004      	b.n	22de <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    22d4:	2312      	movs	r3, #18
    22d6:	18fb      	adds	r3, r7, r3
    22d8:	2280      	movs	r2, #128	; 0x80
    22da:	0192      	lsls	r2, r2, #6
    22dc:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    22de:	2316      	movs	r3, #22
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	220a      	movs	r2, #10
    22e4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    22e6:	230b      	movs	r3, #11
    22e8:	18fb      	adds	r3, r7, r3
    22ea:	2101      	movs	r1, #1
    22ec:	0018      	movs	r0, r3
    22ee:	4b5f      	ldr	r3, [pc, #380]	; (246c <spi_data_read+0x1d8>)
    22f0:	4798      	blx	r3
    22f2:	1e03      	subs	r3, r0, #0
    22f4:	d013      	beq.n	231e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    22f6:	2358      	movs	r3, #88	; 0x58
    22f8:	33ff      	adds	r3, #255	; 0xff
    22fa:	001a      	movs	r2, r3
    22fc:	495c      	ldr	r1, [pc, #368]	; (2470 <spi_data_read+0x1dc>)
    22fe:	4b5d      	ldr	r3, [pc, #372]	; (2474 <spi_data_read+0x1e0>)
    2300:	0018      	movs	r0, r3
    2302:	4b5d      	ldr	r3, [pc, #372]	; (2478 <spi_data_read+0x1e4>)
    2304:	4798      	blx	r3
    2306:	4b5d      	ldr	r3, [pc, #372]	; (247c <spi_data_read+0x1e8>)
    2308:	0018      	movs	r0, r3
    230a:	4b5d      	ldr	r3, [pc, #372]	; (2480 <spi_data_read+0x1ec>)
    230c:	4798      	blx	r3
    230e:	200d      	movs	r0, #13
    2310:	4b5c      	ldr	r3, [pc, #368]	; (2484 <spi_data_read+0x1f0>)
    2312:	4798      	blx	r3
				result = N_FAIL;
    2314:	2311      	movs	r3, #17
    2316:	18fb      	adds	r3, r7, r3
    2318:	2200      	movs	r2, #0
    231a:	701a      	strb	r2, [r3, #0]
				break;
    231c:	e017      	b.n	234e <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    231e:	230b      	movs	r3, #11
    2320:	18fb      	adds	r3, r7, r3
    2322:	781b      	ldrb	r3, [r3, #0]
    2324:	091b      	lsrs	r3, r3, #4
    2326:	b2db      	uxtb	r3, r3
    2328:	001a      	movs	r2, r3
    232a:	230f      	movs	r3, #15
    232c:	4013      	ands	r3, r2
    232e:	2b0f      	cmp	r3, #15
    2330:	d00c      	beq.n	234c <spi_data_read+0xb8>
				break;
		} while (retry--);
    2332:	2316      	movs	r3, #22
    2334:	18fb      	adds	r3, r7, r3
    2336:	2200      	movs	r2, #0
    2338:	5e9b      	ldrsh	r3, [r3, r2]
    233a:	b29a      	uxth	r2, r3
    233c:	3a01      	subs	r2, #1
    233e:	b291      	uxth	r1, r2
    2340:	2216      	movs	r2, #22
    2342:	18ba      	adds	r2, r7, r2
    2344:	8011      	strh	r1, [r2, #0]
    2346:	2b00      	cmp	r3, #0
    2348:	d1cd      	bne.n	22e6 <spi_data_read+0x52>
    234a:	e000      	b.n	234e <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    234c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    234e:	2311      	movs	r3, #17
    2350:	18fb      	adds	r3, r7, r3
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	b25b      	sxtb	r3, r3
    2356:	2b00      	cmp	r3, #0
    2358:	d100      	bne.n	235c <spi_data_read+0xc8>
    235a:	e07d      	b.n	2458 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    235c:	2316      	movs	r3, #22
    235e:	18fb      	adds	r3, r7, r3
    2360:	2200      	movs	r2, #0
    2362:	5e9b      	ldrsh	r3, [r3, r2]
    2364:	2b00      	cmp	r3, #0
    2366:	dc18      	bgt.n	239a <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2368:	2364      	movs	r3, #100	; 0x64
    236a:	33ff      	adds	r3, #255	; 0xff
    236c:	001a      	movs	r2, r3
    236e:	4940      	ldr	r1, [pc, #256]	; (2470 <spi_data_read+0x1dc>)
    2370:	4b40      	ldr	r3, [pc, #256]	; (2474 <spi_data_read+0x1e0>)
    2372:	0018      	movs	r0, r3
    2374:	4b40      	ldr	r3, [pc, #256]	; (2478 <spi_data_read+0x1e4>)
    2376:	4798      	blx	r3
    2378:	230b      	movs	r3, #11
    237a:	18fb      	adds	r3, r7, r3
    237c:	781b      	ldrb	r3, [r3, #0]
    237e:	001a      	movs	r2, r3
    2380:	4b41      	ldr	r3, [pc, #260]	; (2488 <spi_data_read+0x1f4>)
    2382:	0011      	movs	r1, r2
    2384:	0018      	movs	r0, r3
    2386:	4b3c      	ldr	r3, [pc, #240]	; (2478 <spi_data_read+0x1e4>)
    2388:	4798      	blx	r3
    238a:	200d      	movs	r0, #13
    238c:	4b3d      	ldr	r3, [pc, #244]	; (2484 <spi_data_read+0x1f0>)
    238e:	4798      	blx	r3
			result = N_FAIL;
    2390:	2311      	movs	r3, #17
    2392:	18fb      	adds	r3, r7, r3
    2394:	2200      	movs	r2, #0
    2396:	701a      	strb	r2, [r3, #0]
			break;
    2398:	e05f      	b.n	245a <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    239a:	2314      	movs	r3, #20
    239c:	18fb      	adds	r3, r7, r3
    239e:	2200      	movs	r2, #0
    23a0:	5e9b      	ldrsh	r3, [r3, r2]
    23a2:	687a      	ldr	r2, [r7, #4]
    23a4:	18d2      	adds	r2, r2, r3
    23a6:	2312      	movs	r3, #18
    23a8:	18fb      	adds	r3, r7, r3
    23aa:	881b      	ldrh	r3, [r3, #0]
    23ac:	0019      	movs	r1, r3
    23ae:	0010      	movs	r0, r2
    23b0:	4b2e      	ldr	r3, [pc, #184]	; (246c <spi_data_read+0x1d8>)
    23b2:	4798      	blx	r3
    23b4:	1e03      	subs	r3, r0, #0
    23b6:	d012      	beq.n	23de <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    23b8:	23b6      	movs	r3, #182	; 0xb6
    23ba:	005a      	lsls	r2, r3, #1
    23bc:	492c      	ldr	r1, [pc, #176]	; (2470 <spi_data_read+0x1dc>)
    23be:	4b2d      	ldr	r3, [pc, #180]	; (2474 <spi_data_read+0x1e0>)
    23c0:	0018      	movs	r0, r3
    23c2:	4b2d      	ldr	r3, [pc, #180]	; (2478 <spi_data_read+0x1e4>)
    23c4:	4798      	blx	r3
    23c6:	4b31      	ldr	r3, [pc, #196]	; (248c <spi_data_read+0x1f8>)
    23c8:	0018      	movs	r0, r3
    23ca:	4b2d      	ldr	r3, [pc, #180]	; (2480 <spi_data_read+0x1ec>)
    23cc:	4798      	blx	r3
    23ce:	200d      	movs	r0, #13
    23d0:	4b2c      	ldr	r3, [pc, #176]	; (2484 <spi_data_read+0x1f0>)
    23d2:	4798      	blx	r3
			result = N_FAIL;
    23d4:	2311      	movs	r3, #17
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	2200      	movs	r2, #0
    23da:	701a      	strb	r2, [r3, #0]
			break;
    23dc:	e03d      	b.n	245a <spi_data_read+0x1c6>
		}
		if(!clockless)
    23de:	1c7b      	adds	r3, r7, #1
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	2b00      	cmp	r3, #0
    23e4:	d11f      	bne.n	2426 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    23e6:	4b2a      	ldr	r3, [pc, #168]	; (2490 <spi_data_read+0x1fc>)
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d11b      	bne.n	2426 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    23ee:	230c      	movs	r3, #12
    23f0:	18fb      	adds	r3, r7, r3
    23f2:	2102      	movs	r1, #2
    23f4:	0018      	movs	r0, r3
    23f6:	4b1d      	ldr	r3, [pc, #116]	; (246c <spi_data_read+0x1d8>)
    23f8:	4798      	blx	r3
    23fa:	1e03      	subs	r3, r0, #0
    23fc:	d013      	beq.n	2426 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    23fe:	2378      	movs	r3, #120	; 0x78
    2400:	33ff      	adds	r3, #255	; 0xff
    2402:	001a      	movs	r2, r3
    2404:	491a      	ldr	r1, [pc, #104]	; (2470 <spi_data_read+0x1dc>)
    2406:	4b1b      	ldr	r3, [pc, #108]	; (2474 <spi_data_read+0x1e0>)
    2408:	0018      	movs	r0, r3
    240a:	4b1b      	ldr	r3, [pc, #108]	; (2478 <spi_data_read+0x1e4>)
    240c:	4798      	blx	r3
    240e:	4b21      	ldr	r3, [pc, #132]	; (2494 <spi_data_read+0x200>)
    2410:	0018      	movs	r0, r3
    2412:	4b1b      	ldr	r3, [pc, #108]	; (2480 <spi_data_read+0x1ec>)
    2414:	4798      	blx	r3
    2416:	200d      	movs	r0, #13
    2418:	4b1a      	ldr	r3, [pc, #104]	; (2484 <spi_data_read+0x1f0>)
    241a:	4798      	blx	r3
					result = N_FAIL;
    241c:	2311      	movs	r3, #17
    241e:	18fb      	adds	r3, r7, r3
    2420:	2200      	movs	r2, #0
    2422:	701a      	strb	r2, [r3, #0]
					break;
    2424:	e019      	b.n	245a <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    2426:	2314      	movs	r3, #20
    2428:	18fb      	adds	r3, r7, r3
    242a:	881a      	ldrh	r2, [r3, #0]
    242c:	2312      	movs	r3, #18
    242e:	18fb      	adds	r3, r7, r3
    2430:	881b      	ldrh	r3, [r3, #0]
    2432:	18d3      	adds	r3, r2, r3
    2434:	b29a      	uxth	r2, r3
    2436:	2314      	movs	r3, #20
    2438:	18fb      	adds	r3, r7, r3
    243a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    243c:	2312      	movs	r3, #18
    243e:	18fb      	adds	r3, r7, r3
    2440:	881a      	ldrh	r2, [r3, #0]
    2442:	1cbb      	adds	r3, r7, #2
    2444:	1cb9      	adds	r1, r7, #2
    2446:	8809      	ldrh	r1, [r1, #0]
    2448:	1a8a      	subs	r2, r1, r2
    244a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    244c:	1cbb      	adds	r3, r7, #2
    244e:	881b      	ldrh	r3, [r3, #0]
    2450:	2b00      	cmp	r3, #0
    2452:	d000      	beq.n	2456 <spi_data_read+0x1c2>
    2454:	e732      	b.n	22bc <spi_data_read+0x28>
    2456:	e000      	b.n	245a <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    2458:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    245a:	2311      	movs	r3, #17
    245c:	18fb      	adds	r3, r7, r3
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	b25b      	sxtb	r3, r3
}
    2462:	0018      	movs	r0, r3
    2464:	46bd      	mov	sp, r7
    2466:	b006      	add	sp, #24
    2468:	bd80      	pop	{r7, pc}
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	00001d0d 	.word	0x00001d0d
    2470:	0000c444 	.word	0x0000c444
    2474:	0000bf3c 	.word	0x0000bf3c
    2478:	0000a811 	.word	0x0000a811
    247c:	0000bfb0 	.word	0x0000bfb0
    2480:	0000a931 	.word	0x0000a931
    2484:	0000a845 	.word	0x0000a845
    2488:	0000bfe4 	.word	0x0000bfe4
    248c:	0000c014 	.word	0x0000c014
    2490:	200000c4 	.word	0x200000c4
    2494:	0000c044 	.word	0x0000c044

00002498 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    2498:	b580      	push	{r7, lr}
    249a:	b086      	sub	sp, #24
    249c:	af00      	add	r7, sp, #0
    249e:	6078      	str	r0, [r7, #4]
    24a0:	000a      	movs	r2, r1
    24a2:	1cbb      	adds	r3, r7, #2
    24a4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    24a6:	2313      	movs	r3, #19
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2201      	movs	r2, #1
    24ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    24ae:	230c      	movs	r3, #12
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	2200      	movs	r2, #0
    24b4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    24b6:	2316      	movs	r3, #22
    24b8:	18fb      	adds	r3, r7, r3
    24ba:	2200      	movs	r2, #0
    24bc:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    24be:	1cbb      	adds	r3, r7, #2
    24c0:	881a      	ldrh	r2, [r3, #0]
    24c2:	2380      	movs	r3, #128	; 0x80
    24c4:	019b      	lsls	r3, r3, #6
    24c6:	429a      	cmp	r2, r3
    24c8:	d805      	bhi.n	24d6 <spi_data_write+0x3e>
			nbytes = sz;
    24ca:	2314      	movs	r3, #20
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	1cba      	adds	r2, r7, #2
    24d0:	8812      	ldrh	r2, [r2, #0]
    24d2:	801a      	strh	r2, [r3, #0]
    24d4:	e004      	b.n	24e0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    24d6:	2314      	movs	r3, #20
    24d8:	18fb      	adds	r3, r7, r3
    24da:	2280      	movs	r2, #128	; 0x80
    24dc:	0192      	lsls	r2, r2, #6
    24de:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    24e0:	2311      	movs	r3, #17
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	22f0      	movs	r2, #240	; 0xf0
    24e6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    24e8:	2316      	movs	r3, #22
    24ea:	18fb      	adds	r3, r7, r3
    24ec:	2200      	movs	r2, #0
    24ee:	5e9b      	ldrsh	r3, [r3, r2]
    24f0:	2b00      	cmp	r3, #0
    24f2:	d10f      	bne.n	2514 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    24f4:	1cbb      	adds	r3, r7, #2
    24f6:	881a      	ldrh	r2, [r3, #0]
    24f8:	2380      	movs	r3, #128	; 0x80
    24fa:	019b      	lsls	r3, r3, #6
    24fc:	429a      	cmp	r2, r3
    24fe:	d804      	bhi.n	250a <spi_data_write+0x72>
				order = 0x3;
    2500:	2312      	movs	r3, #18
    2502:	18fb      	adds	r3, r7, r3
    2504:	2203      	movs	r2, #3
    2506:	701a      	strb	r2, [r3, #0]
    2508:	e013      	b.n	2532 <spi_data_write+0x9a>
			else
				order = 0x1;
    250a:	2312      	movs	r3, #18
    250c:	18fb      	adds	r3, r7, r3
    250e:	2201      	movs	r2, #1
    2510:	701a      	strb	r2, [r3, #0]
    2512:	e00e      	b.n	2532 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    2514:	1cbb      	adds	r3, r7, #2
    2516:	881a      	ldrh	r2, [r3, #0]
    2518:	2380      	movs	r3, #128	; 0x80
    251a:	019b      	lsls	r3, r3, #6
    251c:	429a      	cmp	r2, r3
    251e:	d804      	bhi.n	252a <spi_data_write+0x92>
				order = 0x3;
    2520:	2312      	movs	r3, #18
    2522:	18fb      	adds	r3, r7, r3
    2524:	2203      	movs	r2, #3
    2526:	701a      	strb	r2, [r3, #0]
    2528:	e003      	b.n	2532 <spi_data_write+0x9a>
			else
				order = 0x2;
    252a:	2312      	movs	r3, #18
    252c:	18fb      	adds	r3, r7, r3
    252e:	2202      	movs	r2, #2
    2530:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    2532:	2311      	movs	r3, #17
    2534:	18fb      	adds	r3, r7, r3
    2536:	781a      	ldrb	r2, [r3, #0]
    2538:	2312      	movs	r3, #18
    253a:	18fb      	adds	r3, r7, r3
    253c:	781b      	ldrb	r3, [r3, #0]
    253e:	4313      	orrs	r3, r2
    2540:	b2da      	uxtb	r2, r3
    2542:	2311      	movs	r3, #17
    2544:	18fb      	adds	r3, r7, r3
    2546:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2548:	2311      	movs	r3, #17
    254a:	18fb      	adds	r3, r7, r3
    254c:	2101      	movs	r1, #1
    254e:	0018      	movs	r0, r3
    2550:	4b3c      	ldr	r3, [pc, #240]	; (2644 <spi_data_write+0x1ac>)
    2552:	4798      	blx	r3
    2554:	1e03      	subs	r3, r0, #0
    2556:	d012      	beq.n	257e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2558:	23d4      	movs	r3, #212	; 0xd4
    255a:	005a      	lsls	r2, r3, #1
    255c:	493a      	ldr	r1, [pc, #232]	; (2648 <spi_data_write+0x1b0>)
    255e:	4b3b      	ldr	r3, [pc, #236]	; (264c <spi_data_write+0x1b4>)
    2560:	0018      	movs	r0, r3
    2562:	4b3b      	ldr	r3, [pc, #236]	; (2650 <spi_data_write+0x1b8>)
    2564:	4798      	blx	r3
    2566:	4b3b      	ldr	r3, [pc, #236]	; (2654 <spi_data_write+0x1bc>)
    2568:	0018      	movs	r0, r3
    256a:	4b3b      	ldr	r3, [pc, #236]	; (2658 <spi_data_write+0x1c0>)
    256c:	4798      	blx	r3
    256e:	200d      	movs	r0, #13
    2570:	4b3a      	ldr	r3, [pc, #232]	; (265c <spi_data_write+0x1c4>)
    2572:	4798      	blx	r3
			result = N_FAIL;
    2574:	2313      	movs	r3, #19
    2576:	18fb      	adds	r3, r7, r3
    2578:	2200      	movs	r2, #0
    257a:	701a      	strb	r2, [r3, #0]
			break;
    257c:	e05a      	b.n	2634 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    257e:	2316      	movs	r3, #22
    2580:	18fb      	adds	r3, r7, r3
    2582:	2200      	movs	r2, #0
    2584:	5e9b      	ldrsh	r3, [r3, r2]
    2586:	687a      	ldr	r2, [r7, #4]
    2588:	18d2      	adds	r2, r2, r3
    258a:	2314      	movs	r3, #20
    258c:	18fb      	adds	r3, r7, r3
    258e:	881b      	ldrh	r3, [r3, #0]
    2590:	0019      	movs	r1, r3
    2592:	0010      	movs	r0, r2
    2594:	4b2b      	ldr	r3, [pc, #172]	; (2644 <spi_data_write+0x1ac>)
    2596:	4798      	blx	r3
    2598:	1e03      	subs	r3, r0, #0
    259a:	d013      	beq.n	25c4 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    259c:	23b2      	movs	r3, #178	; 0xb2
    259e:	33ff      	adds	r3, #255	; 0xff
    25a0:	001a      	movs	r2, r3
    25a2:	4929      	ldr	r1, [pc, #164]	; (2648 <spi_data_write+0x1b0>)
    25a4:	4b29      	ldr	r3, [pc, #164]	; (264c <spi_data_write+0x1b4>)
    25a6:	0018      	movs	r0, r3
    25a8:	4b29      	ldr	r3, [pc, #164]	; (2650 <spi_data_write+0x1b8>)
    25aa:	4798      	blx	r3
    25ac:	4b2c      	ldr	r3, [pc, #176]	; (2660 <spi_data_write+0x1c8>)
    25ae:	0018      	movs	r0, r3
    25b0:	4b29      	ldr	r3, [pc, #164]	; (2658 <spi_data_write+0x1c0>)
    25b2:	4798      	blx	r3
    25b4:	200d      	movs	r0, #13
    25b6:	4b29      	ldr	r3, [pc, #164]	; (265c <spi_data_write+0x1c4>)
    25b8:	4798      	blx	r3
			result = N_FAIL;
    25ba:	2313      	movs	r3, #19
    25bc:	18fb      	adds	r3, r7, r3
    25be:	2200      	movs	r2, #0
    25c0:	701a      	strb	r2, [r3, #0]
			break;
    25c2:	e037      	b.n	2634 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    25c4:	4b27      	ldr	r3, [pc, #156]	; (2664 <spi_data_write+0x1cc>)
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d11b      	bne.n	2604 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    25cc:	230c      	movs	r3, #12
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	2102      	movs	r1, #2
    25d2:	0018      	movs	r0, r3
    25d4:	4b1b      	ldr	r3, [pc, #108]	; (2644 <spi_data_write+0x1ac>)
    25d6:	4798      	blx	r3
    25d8:	1e03      	subs	r3, r0, #0
    25da:	d013      	beq.n	2604 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    25dc:	23bc      	movs	r3, #188	; 0xbc
    25de:	33ff      	adds	r3, #255	; 0xff
    25e0:	001a      	movs	r2, r3
    25e2:	4919      	ldr	r1, [pc, #100]	; (2648 <spi_data_write+0x1b0>)
    25e4:	4b19      	ldr	r3, [pc, #100]	; (264c <spi_data_write+0x1b4>)
    25e6:	0018      	movs	r0, r3
    25e8:	4b19      	ldr	r3, [pc, #100]	; (2650 <spi_data_write+0x1b8>)
    25ea:	4798      	blx	r3
    25ec:	4b1e      	ldr	r3, [pc, #120]	; (2668 <spi_data_write+0x1d0>)
    25ee:	0018      	movs	r0, r3
    25f0:	4b19      	ldr	r3, [pc, #100]	; (2658 <spi_data_write+0x1c0>)
    25f2:	4798      	blx	r3
    25f4:	200d      	movs	r0, #13
    25f6:	4b19      	ldr	r3, [pc, #100]	; (265c <spi_data_write+0x1c4>)
    25f8:	4798      	blx	r3
				result = N_FAIL;
    25fa:	2313      	movs	r3, #19
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	2200      	movs	r2, #0
    2600:	701a      	strb	r2, [r3, #0]
				break;
    2602:	e017      	b.n	2634 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    2604:	2316      	movs	r3, #22
    2606:	18fb      	adds	r3, r7, r3
    2608:	881a      	ldrh	r2, [r3, #0]
    260a:	2314      	movs	r3, #20
    260c:	18fb      	adds	r3, r7, r3
    260e:	881b      	ldrh	r3, [r3, #0]
    2610:	18d3      	adds	r3, r2, r3
    2612:	b29a      	uxth	r2, r3
    2614:	2316      	movs	r3, #22
    2616:	18fb      	adds	r3, r7, r3
    2618:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    261a:	1cbb      	adds	r3, r7, #2
    261c:	1cb9      	adds	r1, r7, #2
    261e:	2214      	movs	r2, #20
    2620:	18ba      	adds	r2, r7, r2
    2622:	8809      	ldrh	r1, [r1, #0]
    2624:	8812      	ldrh	r2, [r2, #0]
    2626:	1a8a      	subs	r2, r1, r2
    2628:	801a      	strh	r2, [r3, #0]
	} while (sz);
    262a:	1cbb      	adds	r3, r7, #2
    262c:	881b      	ldrh	r3, [r3, #0]
    262e:	2b00      	cmp	r3, #0
    2630:	d000      	beq.n	2634 <spi_data_write+0x19c>
    2632:	e744      	b.n	24be <spi_data_write+0x26>


	return result;
    2634:	2313      	movs	r3, #19
    2636:	18fb      	adds	r3, r7, r3
    2638:	781b      	ldrb	r3, [r3, #0]
    263a:	b25b      	sxtb	r3, r3
}
    263c:	0018      	movs	r0, r3
    263e:	46bd      	mov	sp, r7
    2640:	b006      	add	sp, #24
    2642:	bd80      	pop	{r7, pc}
    2644:	00001d51 	.word	0x00001d51
    2648:	0000c454 	.word	0x0000c454
    264c:	0000bf3c 	.word	0x0000bf3c
    2650:	0000a811 	.word	0x0000a811
    2654:	0000c078 	.word	0x0000c078
    2658:	0000a931 	.word	0x0000a931
    265c:	0000a845 	.word	0x0000a845
    2660:	0000c0b0 	.word	0x0000c0b0
    2664:	200000c4 	.word	0x200000c4
    2668:	0000c0e4 	.word	0x0000c0e4

0000266c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    266c:	b5b0      	push	{r4, r5, r7, lr}
    266e:	b086      	sub	sp, #24
    2670:	af02      	add	r7, sp, #8
    2672:	6078      	str	r0, [r7, #4]
    2674:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    2676:	230d      	movs	r3, #13
    2678:	18fb      	adds	r3, r7, r3
    267a:	2201      	movs	r2, #1
    267c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    267e:	230f      	movs	r3, #15
    2680:	18fb      	adds	r3, r7, r3
    2682:	22c9      	movs	r2, #201	; 0xc9
    2684:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    2686:	230e      	movs	r3, #14
    2688:	18fb      	adds	r3, r7, r3
    268a:	2200      	movs	r2, #0
    268c:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    268e:	687b      	ldr	r3, [r7, #4]
    2690:	2b30      	cmp	r3, #48	; 0x30
    2692:	d808      	bhi.n	26a6 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2694:	230f      	movs	r3, #15
    2696:	18fb      	adds	r3, r7, r3
    2698:	22c3      	movs	r2, #195	; 0xc3
    269a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    269c:	230e      	movs	r3, #14
    269e:	18fb      	adds	r3, r7, r3
    26a0:	2201      	movs	r2, #1
    26a2:	701a      	strb	r2, [r3, #0]
    26a4:	e007      	b.n	26b6 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    26a6:	230f      	movs	r3, #15
    26a8:	18fb      	adds	r3, r7, r3
    26aa:	22c9      	movs	r2, #201	; 0xc9
    26ac:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    26ae:	230e      	movs	r3, #14
    26b0:	18fb      	adds	r3, r7, r3
    26b2:	2200      	movs	r2, #0
    26b4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    26b6:	230d      	movs	r3, #13
    26b8:	18fc      	adds	r4, r7, r3
    26ba:	683a      	ldr	r2, [r7, #0]
    26bc:	6879      	ldr	r1, [r7, #4]
    26be:	230f      	movs	r3, #15
    26c0:	18fb      	adds	r3, r7, r3
    26c2:	7818      	ldrb	r0, [r3, #0]
    26c4:	230e      	movs	r3, #14
    26c6:	18fb      	adds	r3, r7, r3
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	9300      	str	r3, [sp, #0]
    26cc:	2304      	movs	r3, #4
    26ce:	4d26      	ldr	r5, [pc, #152]	; (2768 <spi_write_reg+0xfc>)
    26d0:	47a8      	blx	r5
    26d2:	0003      	movs	r3, r0
    26d4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    26d6:	230d      	movs	r3, #13
    26d8:	18fb      	adds	r3, r7, r3
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	b25b      	sxtb	r3, r3
    26de:	2b01      	cmp	r3, #1
    26e0:	d012      	beq.n	2708 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    26e2:	23ec      	movs	r3, #236	; 0xec
    26e4:	33ff      	adds	r3, #255	; 0xff
    26e6:	001a      	movs	r2, r3
    26e8:	4920      	ldr	r1, [pc, #128]	; (276c <spi_write_reg+0x100>)
    26ea:	4b21      	ldr	r3, [pc, #132]	; (2770 <spi_write_reg+0x104>)
    26ec:	0018      	movs	r0, r3
    26ee:	4b21      	ldr	r3, [pc, #132]	; (2774 <spi_write_reg+0x108>)
    26f0:	4798      	blx	r3
    26f2:	687a      	ldr	r2, [r7, #4]
    26f4:	4b20      	ldr	r3, [pc, #128]	; (2778 <spi_write_reg+0x10c>)
    26f6:	0011      	movs	r1, r2
    26f8:	0018      	movs	r0, r3
    26fa:	4b1e      	ldr	r3, [pc, #120]	; (2774 <spi_write_reg+0x108>)
    26fc:	4798      	blx	r3
    26fe:	200d      	movs	r0, #13
    2700:	4b1e      	ldr	r3, [pc, #120]	; (277c <spi_write_reg+0x110>)
    2702:	4798      	blx	r3
		return N_FAIL;
    2704:	2300      	movs	r3, #0
    2706:	e02b      	b.n	2760 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    2708:	230d      	movs	r3, #13
    270a:	18fc      	adds	r4, r7, r3
    270c:	230f      	movs	r3, #15
    270e:	18fb      	adds	r3, r7, r3
    2710:	781b      	ldrb	r3, [r3, #0]
    2712:	0018      	movs	r0, r3
    2714:	4b1a      	ldr	r3, [pc, #104]	; (2780 <spi_write_reg+0x114>)
    2716:	4798      	blx	r3
    2718:	0003      	movs	r3, r0
    271a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    271c:	230d      	movs	r3, #13
    271e:	18fb      	adds	r3, r7, r3
    2720:	781b      	ldrb	r3, [r3, #0]
    2722:	b25b      	sxtb	r3, r3
    2724:	2b01      	cmp	r3, #1
    2726:	d01a      	beq.n	275e <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2728:	23f2      	movs	r3, #242	; 0xf2
    272a:	33ff      	adds	r3, #255	; 0xff
    272c:	001a      	movs	r2, r3
    272e:	490f      	ldr	r1, [pc, #60]	; (276c <spi_write_reg+0x100>)
    2730:	4b0f      	ldr	r3, [pc, #60]	; (2770 <spi_write_reg+0x104>)
    2732:	0018      	movs	r0, r3
    2734:	4b0f      	ldr	r3, [pc, #60]	; (2774 <spi_write_reg+0x108>)
    2736:	4798      	blx	r3
    2738:	687a      	ldr	r2, [r7, #4]
    273a:	4b12      	ldr	r3, [pc, #72]	; (2784 <spi_write_reg+0x118>)
    273c:	0011      	movs	r1, r2
    273e:	0018      	movs	r0, r3
    2740:	4b0c      	ldr	r3, [pc, #48]	; (2774 <spi_write_reg+0x108>)
    2742:	4798      	blx	r3
    2744:	200d      	movs	r0, #13
    2746:	4b0d      	ldr	r3, [pc, #52]	; (277c <spi_write_reg+0x110>)
    2748:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    274a:	2300      	movs	r3, #0
    274c:	9300      	str	r3, [sp, #0]
    274e:	2300      	movs	r3, #0
    2750:	2200      	movs	r2, #0
    2752:	2100      	movs	r1, #0
    2754:	20cf      	movs	r0, #207	; 0xcf
    2756:	4c04      	ldr	r4, [pc, #16]	; (2768 <spi_write_reg+0xfc>)
    2758:	47a0      	blx	r4
		return N_FAIL;
    275a:	2300      	movs	r3, #0
    275c:	e000      	b.n	2760 <spi_write_reg+0xf4>
	}

	return N_OK;
    275e:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    2760:	0018      	movs	r0, r3
    2762:	46bd      	mov	sp, r7
    2764:	b004      	add	sp, #16
    2766:	bdb0      	pop	{r4, r5, r7, pc}
    2768:	00001e15 	.word	0x00001e15
    276c:	0000c464 	.word	0x0000c464
    2770:	0000bf3c 	.word	0x0000bf3c
    2774:	0000a811 	.word	0x0000a811
    2778:	0000c11c 	.word	0x0000c11c
    277c:	0000a845 	.word	0x0000a845
    2780:	00002159 	.word	0x00002159
    2784:	0000c148 	.word	0x0000c148

00002788 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    2788:	b5b0      	push	{r4, r5, r7, lr}
    278a:	b088      	sub	sp, #32
    278c:	af02      	add	r7, sp, #8
    278e:	60f8      	str	r0, [r7, #12]
    2790:	60b9      	str	r1, [r7, #8]
    2792:	1dbb      	adds	r3, r7, #6
    2794:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    2796:	2317      	movs	r3, #23
    2798:	18fb      	adds	r3, r7, r3
    279a:	22c7      	movs	r2, #199	; 0xc7
    279c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    279e:	1dbb      	adds	r3, r7, #6
    27a0:	881a      	ldrh	r2, [r3, #0]
    27a2:	2316      	movs	r3, #22
    27a4:	18fc      	adds	r4, r7, r3
    27a6:	68f9      	ldr	r1, [r7, #12]
    27a8:	2317      	movs	r3, #23
    27aa:	18fb      	adds	r3, r7, r3
    27ac:	7818      	ldrb	r0, [r3, #0]
    27ae:	2300      	movs	r3, #0
    27b0:	9300      	str	r3, [sp, #0]
    27b2:	0013      	movs	r3, r2
    27b4:	2200      	movs	r2, #0
    27b6:	4d37      	ldr	r5, [pc, #220]	; (2894 <nm_spi_write+0x10c>)
    27b8:	47a8      	blx	r5
    27ba:	0003      	movs	r3, r0
    27bc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    27be:	2316      	movs	r3, #22
    27c0:	18fb      	adds	r3, r7, r3
    27c2:	781b      	ldrb	r3, [r3, #0]
    27c4:	b25b      	sxtb	r3, r3
    27c6:	2b01      	cmp	r3, #1
    27c8:	d010      	beq.n	27ec <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    27ca:	4a33      	ldr	r2, [pc, #204]	; (2898 <nm_spi_write+0x110>)
    27cc:	4933      	ldr	r1, [pc, #204]	; (289c <nm_spi_write+0x114>)
    27ce:	4b34      	ldr	r3, [pc, #208]	; (28a0 <nm_spi_write+0x118>)
    27d0:	0018      	movs	r0, r3
    27d2:	4b34      	ldr	r3, [pc, #208]	; (28a4 <nm_spi_write+0x11c>)
    27d4:	4798      	blx	r3
    27d6:	68fa      	ldr	r2, [r7, #12]
    27d8:	4b33      	ldr	r3, [pc, #204]	; (28a8 <nm_spi_write+0x120>)
    27da:	0011      	movs	r1, r2
    27dc:	0018      	movs	r0, r3
    27de:	4b31      	ldr	r3, [pc, #196]	; (28a4 <nm_spi_write+0x11c>)
    27e0:	4798      	blx	r3
    27e2:	200d      	movs	r0, #13
    27e4:	4b31      	ldr	r3, [pc, #196]	; (28ac <nm_spi_write+0x124>)
    27e6:	4798      	blx	r3
		return N_FAIL;
    27e8:	2300      	movs	r3, #0
    27ea:	e04f      	b.n	288c <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    27ec:	2316      	movs	r3, #22
    27ee:	18fc      	adds	r4, r7, r3
    27f0:	2317      	movs	r3, #23
    27f2:	18fb      	adds	r3, r7, r3
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	0018      	movs	r0, r3
    27f8:	4b2d      	ldr	r3, [pc, #180]	; (28b0 <nm_spi_write+0x128>)
    27fa:	4798      	blx	r3
    27fc:	0003      	movs	r3, r0
    27fe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2800:	2316      	movs	r3, #22
    2802:	18fb      	adds	r3, r7, r3
    2804:	781b      	ldrb	r3, [r3, #0]
    2806:	b25b      	sxtb	r3, r3
    2808:	2b01      	cmp	r3, #1
    280a:	d018      	beq.n	283e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    280c:	4a29      	ldr	r2, [pc, #164]	; (28b4 <nm_spi_write+0x12c>)
    280e:	4923      	ldr	r1, [pc, #140]	; (289c <nm_spi_write+0x114>)
    2810:	4b23      	ldr	r3, [pc, #140]	; (28a0 <nm_spi_write+0x118>)
    2812:	0018      	movs	r0, r3
    2814:	4b23      	ldr	r3, [pc, #140]	; (28a4 <nm_spi_write+0x11c>)
    2816:	4798      	blx	r3
    2818:	68fa      	ldr	r2, [r7, #12]
    281a:	4b27      	ldr	r3, [pc, #156]	; (28b8 <nm_spi_write+0x130>)
    281c:	0011      	movs	r1, r2
    281e:	0018      	movs	r0, r3
    2820:	4b20      	ldr	r3, [pc, #128]	; (28a4 <nm_spi_write+0x11c>)
    2822:	4798      	blx	r3
    2824:	200d      	movs	r0, #13
    2826:	4b21      	ldr	r3, [pc, #132]	; (28ac <nm_spi_write+0x124>)
    2828:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    282a:	2300      	movs	r3, #0
    282c:	9300      	str	r3, [sp, #0]
    282e:	2300      	movs	r3, #0
    2830:	2200      	movs	r2, #0
    2832:	2100      	movs	r1, #0
    2834:	20cf      	movs	r0, #207	; 0xcf
    2836:	4c17      	ldr	r4, [pc, #92]	; (2894 <nm_spi_write+0x10c>)
    2838:	47a0      	blx	r4
		return N_FAIL;
    283a:	2300      	movs	r3, #0
    283c:	e026      	b.n	288c <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    283e:	2316      	movs	r3, #22
    2840:	18fc      	adds	r4, r7, r3
    2842:	1dbb      	adds	r3, r7, #6
    2844:	881a      	ldrh	r2, [r3, #0]
    2846:	68bb      	ldr	r3, [r7, #8]
    2848:	0011      	movs	r1, r2
    284a:	0018      	movs	r0, r3
    284c:	4b1b      	ldr	r3, [pc, #108]	; (28bc <nm_spi_write+0x134>)
    284e:	4798      	blx	r3
    2850:	0003      	movs	r3, r0
    2852:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2854:	2316      	movs	r3, #22
    2856:	18fb      	adds	r3, r7, r3
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	b25b      	sxtb	r3, r3
    285c:	2b01      	cmp	r3, #1
    285e:	d014      	beq.n	288a <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2860:	4a17      	ldr	r2, [pc, #92]	; (28c0 <nm_spi_write+0x138>)
    2862:	490e      	ldr	r1, [pc, #56]	; (289c <nm_spi_write+0x114>)
    2864:	4b0e      	ldr	r3, [pc, #56]	; (28a0 <nm_spi_write+0x118>)
    2866:	0018      	movs	r0, r3
    2868:	4b0e      	ldr	r3, [pc, #56]	; (28a4 <nm_spi_write+0x11c>)
    286a:	4798      	blx	r3
    286c:	4b15      	ldr	r3, [pc, #84]	; (28c4 <nm_spi_write+0x13c>)
    286e:	0018      	movs	r0, r3
    2870:	4b15      	ldr	r3, [pc, #84]	; (28c8 <nm_spi_write+0x140>)
    2872:	4798      	blx	r3
    2874:	200d      	movs	r0, #13
    2876:	4b0d      	ldr	r3, [pc, #52]	; (28ac <nm_spi_write+0x124>)
    2878:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    287a:	2300      	movs	r3, #0
    287c:	9300      	str	r3, [sp, #0]
    287e:	2300      	movs	r3, #0
    2880:	2200      	movs	r2, #0
    2882:	2100      	movs	r1, #0
    2884:	20cf      	movs	r0, #207	; 0xcf
    2886:	4c03      	ldr	r4, [pc, #12]	; (2894 <nm_spi_write+0x10c>)
    2888:	47a0      	blx	r4
	}

	return N_OK;
    288a:	2301      	movs	r3, #1
}
    288c:	0018      	movs	r0, r3
    288e:	46bd      	mov	sp, r7
    2890:	b006      	add	sp, #24
    2892:	bdb0      	pop	{r4, r5, r7, pc}
    2894:	00001e15 	.word	0x00001e15
    2898:	0000020f 	.word	0x0000020f
    289c:	0000c474 	.word	0x0000c474
    28a0:	0000bf3c 	.word	0x0000bf3c
    28a4:	0000a811 	.word	0x0000a811
    28a8:	0000c180 	.word	0x0000c180
    28ac:	0000a845 	.word	0x0000a845
    28b0:	00002159 	.word	0x00002159
    28b4:	00000215 	.word	0x00000215
    28b8:	0000c1b0 	.word	0x0000c1b0
    28bc:	00002499 	.word	0x00002499
    28c0:	00000226 	.word	0x00000226
    28c4:	0000c1e8 	.word	0x0000c1e8
    28c8:	0000a931 	.word	0x0000a931

000028cc <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    28cc:	b5b0      	push	{r4, r5, r7, lr}
    28ce:	b086      	sub	sp, #24
    28d0:	af02      	add	r7, sp, #8
    28d2:	6078      	str	r0, [r7, #4]
    28d4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    28d6:	230d      	movs	r3, #13
    28d8:	18fb      	adds	r3, r7, r3
    28da:	2201      	movs	r2, #1
    28dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    28de:	230f      	movs	r3, #15
    28e0:	18fb      	adds	r3, r7, r3
    28e2:	22ca      	movs	r2, #202	; 0xca
    28e4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    28e6:	230e      	movs	r3, #14
    28e8:	18fb      	adds	r3, r7, r3
    28ea:	2200      	movs	r2, #0
    28ec:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    28ee:	687b      	ldr	r3, [r7, #4]
    28f0:	2bff      	cmp	r3, #255	; 0xff
    28f2:	d808      	bhi.n	2906 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    28f4:	230f      	movs	r3, #15
    28f6:	18fb      	adds	r3, r7, r3
    28f8:	22c4      	movs	r2, #196	; 0xc4
    28fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    28fc:	230e      	movs	r3, #14
    28fe:	18fb      	adds	r3, r7, r3
    2900:	2201      	movs	r2, #1
    2902:	701a      	strb	r2, [r3, #0]
    2904:	e007      	b.n	2916 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    2906:	230f      	movs	r3, #15
    2908:	18fb      	adds	r3, r7, r3
    290a:	22ca      	movs	r2, #202	; 0xca
    290c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    290e:	230e      	movs	r3, #14
    2910:	18fb      	adds	r3, r7, r3
    2912:	2200      	movs	r2, #0
    2914:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2916:	230d      	movs	r3, #13
    2918:	18fc      	adds	r4, r7, r3
    291a:	6879      	ldr	r1, [r7, #4]
    291c:	230f      	movs	r3, #15
    291e:	18fb      	adds	r3, r7, r3
    2920:	7818      	ldrb	r0, [r3, #0]
    2922:	230e      	movs	r3, #14
    2924:	18fb      	adds	r3, r7, r3
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	9300      	str	r3, [sp, #0]
    292a:	2304      	movs	r3, #4
    292c:	2200      	movs	r2, #0
    292e:	4d44      	ldr	r5, [pc, #272]	; (2a40 <spi_read_reg+0x174>)
    2930:	47a8      	blx	r5
    2932:	0003      	movs	r3, r0
    2934:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2936:	230d      	movs	r3, #13
    2938:	18fb      	adds	r3, r7, r3
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	b25b      	sxtb	r3, r3
    293e:	2b01      	cmp	r3, #1
    2940:	d010      	beq.n	2964 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2942:	4a40      	ldr	r2, [pc, #256]	; (2a44 <spi_read_reg+0x178>)
    2944:	4940      	ldr	r1, [pc, #256]	; (2a48 <spi_read_reg+0x17c>)
    2946:	4b41      	ldr	r3, [pc, #260]	; (2a4c <spi_read_reg+0x180>)
    2948:	0018      	movs	r0, r3
    294a:	4b41      	ldr	r3, [pc, #260]	; (2a50 <spi_read_reg+0x184>)
    294c:	4798      	blx	r3
    294e:	687a      	ldr	r2, [r7, #4]
    2950:	4b40      	ldr	r3, [pc, #256]	; (2a54 <spi_read_reg+0x188>)
    2952:	0011      	movs	r1, r2
    2954:	0018      	movs	r0, r3
    2956:	4b3e      	ldr	r3, [pc, #248]	; (2a50 <spi_read_reg+0x184>)
    2958:	4798      	blx	r3
    295a:	200d      	movs	r0, #13
    295c:	4b3e      	ldr	r3, [pc, #248]	; (2a58 <spi_read_reg+0x18c>)
    295e:	4798      	blx	r3
		return N_FAIL;
    2960:	2300      	movs	r3, #0
    2962:	e068      	b.n	2a36 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    2964:	230d      	movs	r3, #13
    2966:	18fc      	adds	r4, r7, r3
    2968:	230f      	movs	r3, #15
    296a:	18fb      	adds	r3, r7, r3
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	0018      	movs	r0, r3
    2970:	4b3a      	ldr	r3, [pc, #232]	; (2a5c <spi_read_reg+0x190>)
    2972:	4798      	blx	r3
    2974:	0003      	movs	r3, r0
    2976:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2978:	230d      	movs	r3, #13
    297a:	18fb      	adds	r3, r7, r3
    297c:	781b      	ldrb	r3, [r3, #0]
    297e:	b25b      	sxtb	r3, r3
    2980:	2b01      	cmp	r3, #1
    2982:	d018      	beq.n	29b6 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2984:	4a36      	ldr	r2, [pc, #216]	; (2a60 <spi_read_reg+0x194>)
    2986:	4930      	ldr	r1, [pc, #192]	; (2a48 <spi_read_reg+0x17c>)
    2988:	4b30      	ldr	r3, [pc, #192]	; (2a4c <spi_read_reg+0x180>)
    298a:	0018      	movs	r0, r3
    298c:	4b30      	ldr	r3, [pc, #192]	; (2a50 <spi_read_reg+0x184>)
    298e:	4798      	blx	r3
    2990:	687a      	ldr	r2, [r7, #4]
    2992:	4b34      	ldr	r3, [pc, #208]	; (2a64 <spi_read_reg+0x198>)
    2994:	0011      	movs	r1, r2
    2996:	0018      	movs	r0, r3
    2998:	4b2d      	ldr	r3, [pc, #180]	; (2a50 <spi_read_reg+0x184>)
    299a:	4798      	blx	r3
    299c:	200d      	movs	r0, #13
    299e:	4b2e      	ldr	r3, [pc, #184]	; (2a58 <spi_read_reg+0x18c>)
    29a0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    29a2:	2300      	movs	r3, #0
    29a4:	9300      	str	r3, [sp, #0]
    29a6:	2300      	movs	r3, #0
    29a8:	2200      	movs	r2, #0
    29aa:	2100      	movs	r1, #0
    29ac:	20cf      	movs	r0, #207	; 0xcf
    29ae:	4c24      	ldr	r4, [pc, #144]	; (2a40 <spi_read_reg+0x174>)
    29b0:	47a0      	blx	r4
		return N_FAIL;
    29b2:	2300      	movs	r3, #0
    29b4:	e03f      	b.n	2a36 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    29b6:	230d      	movs	r3, #13
    29b8:	18fc      	adds	r4, r7, r3
    29ba:	230e      	movs	r3, #14
    29bc:	18fb      	adds	r3, r7, r3
    29be:	781a      	ldrb	r2, [r3, #0]
    29c0:	2308      	movs	r3, #8
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	2104      	movs	r1, #4
    29c6:	0018      	movs	r0, r3
    29c8:	4b27      	ldr	r3, [pc, #156]	; (2a68 <spi_read_reg+0x19c>)
    29ca:	4798      	blx	r3
    29cc:	0003      	movs	r3, r0
    29ce:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    29d0:	230d      	movs	r3, #13
    29d2:	18fb      	adds	r3, r7, r3
    29d4:	781b      	ldrb	r3, [r3, #0]
    29d6:	b25b      	sxtb	r3, r3
    29d8:	2b01      	cmp	r3, #1
    29da:	d016      	beq.n	2a0a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    29dc:	4a23      	ldr	r2, [pc, #140]	; (2a6c <spi_read_reg+0x1a0>)
    29de:	491a      	ldr	r1, [pc, #104]	; (2a48 <spi_read_reg+0x17c>)
    29e0:	4b1a      	ldr	r3, [pc, #104]	; (2a4c <spi_read_reg+0x180>)
    29e2:	0018      	movs	r0, r3
    29e4:	4b1a      	ldr	r3, [pc, #104]	; (2a50 <spi_read_reg+0x184>)
    29e6:	4798      	blx	r3
    29e8:	4b21      	ldr	r3, [pc, #132]	; (2a70 <spi_read_reg+0x1a4>)
    29ea:	0018      	movs	r0, r3
    29ec:	4b21      	ldr	r3, [pc, #132]	; (2a74 <spi_read_reg+0x1a8>)
    29ee:	4798      	blx	r3
    29f0:	200d      	movs	r0, #13
    29f2:	4b19      	ldr	r3, [pc, #100]	; (2a58 <spi_read_reg+0x18c>)
    29f4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    29f6:	2300      	movs	r3, #0
    29f8:	9300      	str	r3, [sp, #0]
    29fa:	2300      	movs	r3, #0
    29fc:	2200      	movs	r2, #0
    29fe:	2100      	movs	r1, #0
    2a00:	20cf      	movs	r0, #207	; 0xcf
    2a02:	4c0f      	ldr	r4, [pc, #60]	; (2a40 <spi_read_reg+0x174>)
    2a04:	47a0      	blx	r4
		return N_FAIL;
    2a06:	2300      	movs	r3, #0
    2a08:	e015      	b.n	2a36 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2a0a:	2308      	movs	r3, #8
    2a0c:	18fb      	adds	r3, r7, r3
    2a0e:	781b      	ldrb	r3, [r3, #0]
    2a10:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    2a12:	2308      	movs	r3, #8
    2a14:	18fb      	adds	r3, r7, r3
    2a16:	785b      	ldrb	r3, [r3, #1]
    2a18:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2a1a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    2a1c:	2308      	movs	r3, #8
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	789b      	ldrb	r3, [r3, #2]
    2a22:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2a24:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    2a26:	2308      	movs	r3, #8
    2a28:	18fb      	adds	r3, r7, r3
    2a2a:	78db      	ldrb	r3, [r3, #3]
    2a2c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    2a2e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2a30:	683b      	ldr	r3, [r7, #0]
    2a32:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    2a34:	2301      	movs	r3, #1
}
    2a36:	0018      	movs	r0, r3
    2a38:	46bd      	mov	sp, r7
    2a3a:	b004      	add	sp, #16
    2a3c:	bdb0      	pop	{r4, r5, r7, pc}
    2a3e:	46c0      	nop			; (mov r8, r8)
    2a40:	00001e15 	.word	0x00001e15
    2a44:	00000245 	.word	0x00000245
    2a48:	0000c484 	.word	0x0000c484
    2a4c:	0000bf3c 	.word	0x0000bf3c
    2a50:	0000a811 	.word	0x0000a811
    2a54:	0000c210 	.word	0x0000c210
    2a58:	0000a845 	.word	0x0000a845
    2a5c:	00002159 	.word	0x00002159
    2a60:	0000024b 	.word	0x0000024b
    2a64:	0000c23c 	.word	0x0000c23c
    2a68:	00002295 	.word	0x00002295
    2a6c:	00000253 	.word	0x00000253
    2a70:	0000c270 	.word	0x0000c270
    2a74:	0000a931 	.word	0x0000a931

00002a78 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    2a78:	b5b0      	push	{r4, r5, r7, lr}
    2a7a:	b088      	sub	sp, #32
    2a7c:	af02      	add	r7, sp, #8
    2a7e:	60f8      	str	r0, [r7, #12]
    2a80:	60b9      	str	r1, [r7, #8]
    2a82:	1dbb      	adds	r3, r7, #6
    2a84:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    2a86:	2317      	movs	r3, #23
    2a88:	18fb      	adds	r3, r7, r3
    2a8a:	22c8      	movs	r2, #200	; 0xc8
    2a8c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2a8e:	1dbb      	adds	r3, r7, #6
    2a90:	881a      	ldrh	r2, [r3, #0]
    2a92:	2316      	movs	r3, #22
    2a94:	18fc      	adds	r4, r7, r3
    2a96:	68f9      	ldr	r1, [r7, #12]
    2a98:	2317      	movs	r3, #23
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	7818      	ldrb	r0, [r3, #0]
    2a9e:	2300      	movs	r3, #0
    2aa0:	9300      	str	r3, [sp, #0]
    2aa2:	0013      	movs	r3, r2
    2aa4:	2200      	movs	r2, #0
    2aa6:	4d39      	ldr	r5, [pc, #228]	; (2b8c <nm_spi_read+0x114>)
    2aa8:	47a8      	blx	r5
    2aaa:	0003      	movs	r3, r0
    2aac:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2aae:	2316      	movs	r3, #22
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	b25b      	sxtb	r3, r3
    2ab6:	2b01      	cmp	r3, #1
    2ab8:	d011      	beq.n	2ade <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2aba:	239d      	movs	r3, #157	; 0x9d
    2abc:	009a      	lsls	r2, r3, #2
    2abe:	4934      	ldr	r1, [pc, #208]	; (2b90 <nm_spi_read+0x118>)
    2ac0:	4b34      	ldr	r3, [pc, #208]	; (2b94 <nm_spi_read+0x11c>)
    2ac2:	0018      	movs	r0, r3
    2ac4:	4b34      	ldr	r3, [pc, #208]	; (2b98 <nm_spi_read+0x120>)
    2ac6:	4798      	blx	r3
    2ac8:	68fa      	ldr	r2, [r7, #12]
    2aca:	4b34      	ldr	r3, [pc, #208]	; (2b9c <nm_spi_read+0x124>)
    2acc:	0011      	movs	r1, r2
    2ace:	0018      	movs	r0, r3
    2ad0:	4b31      	ldr	r3, [pc, #196]	; (2b98 <nm_spi_read+0x120>)
    2ad2:	4798      	blx	r3
    2ad4:	200d      	movs	r0, #13
    2ad6:	4b32      	ldr	r3, [pc, #200]	; (2ba0 <nm_spi_read+0x128>)
    2ad8:	4798      	blx	r3
		return N_FAIL;
    2ada:	2300      	movs	r3, #0
    2adc:	e052      	b.n	2b84 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    2ade:	2316      	movs	r3, #22
    2ae0:	18fc      	adds	r4, r7, r3
    2ae2:	2317      	movs	r3, #23
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	781b      	ldrb	r3, [r3, #0]
    2ae8:	0018      	movs	r0, r3
    2aea:	4b2e      	ldr	r3, [pc, #184]	; (2ba4 <nm_spi_read+0x12c>)
    2aec:	4798      	blx	r3
    2aee:	0003      	movs	r3, r0
    2af0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2af2:	2316      	movs	r3, #22
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	781b      	ldrb	r3, [r3, #0]
    2af8:	b25b      	sxtb	r3, r3
    2afa:	2b01      	cmp	r3, #1
    2afc:	d018      	beq.n	2b30 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    2afe:	4a2a      	ldr	r2, [pc, #168]	; (2ba8 <nm_spi_read+0x130>)
    2b00:	4923      	ldr	r1, [pc, #140]	; (2b90 <nm_spi_read+0x118>)
    2b02:	4b24      	ldr	r3, [pc, #144]	; (2b94 <nm_spi_read+0x11c>)
    2b04:	0018      	movs	r0, r3
    2b06:	4b24      	ldr	r3, [pc, #144]	; (2b98 <nm_spi_read+0x120>)
    2b08:	4798      	blx	r3
    2b0a:	68fa      	ldr	r2, [r7, #12]
    2b0c:	4b27      	ldr	r3, [pc, #156]	; (2bac <nm_spi_read+0x134>)
    2b0e:	0011      	movs	r1, r2
    2b10:	0018      	movs	r0, r3
    2b12:	4b21      	ldr	r3, [pc, #132]	; (2b98 <nm_spi_read+0x120>)
    2b14:	4798      	blx	r3
    2b16:	200d      	movs	r0, #13
    2b18:	4b21      	ldr	r3, [pc, #132]	; (2ba0 <nm_spi_read+0x128>)
    2b1a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2b1c:	2300      	movs	r3, #0
    2b1e:	9300      	str	r3, [sp, #0]
    2b20:	2300      	movs	r3, #0
    2b22:	2200      	movs	r2, #0
    2b24:	2100      	movs	r1, #0
    2b26:	20cf      	movs	r0, #207	; 0xcf
    2b28:	4c18      	ldr	r4, [pc, #96]	; (2b8c <nm_spi_read+0x114>)
    2b2a:	47a0      	blx	r4
		return N_FAIL;
    2b2c:	2300      	movs	r3, #0
    2b2e:	e029      	b.n	2b84 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2b30:	2316      	movs	r3, #22
    2b32:	18fc      	adds	r4, r7, r3
    2b34:	1dbb      	adds	r3, r7, #6
    2b36:	8819      	ldrh	r1, [r3, #0]
    2b38:	68bb      	ldr	r3, [r7, #8]
    2b3a:	2200      	movs	r2, #0
    2b3c:	0018      	movs	r0, r3
    2b3e:	4b1c      	ldr	r3, [pc, #112]	; (2bb0 <nm_spi_read+0x138>)
    2b40:	4798      	blx	r3
    2b42:	0003      	movs	r3, r0
    2b44:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2b46:	2316      	movs	r3, #22
    2b48:	18fb      	adds	r3, r7, r3
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	b25b      	sxtb	r3, r3
    2b4e:	2b01      	cmp	r3, #1
    2b50:	d017      	beq.n	2b82 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2b52:	23a1      	movs	r3, #161	; 0xa1
    2b54:	009a      	lsls	r2, r3, #2
    2b56:	490e      	ldr	r1, [pc, #56]	; (2b90 <nm_spi_read+0x118>)
    2b58:	4b0e      	ldr	r3, [pc, #56]	; (2b94 <nm_spi_read+0x11c>)
    2b5a:	0018      	movs	r0, r3
    2b5c:	4b0e      	ldr	r3, [pc, #56]	; (2b98 <nm_spi_read+0x120>)
    2b5e:	4798      	blx	r3
    2b60:	4b14      	ldr	r3, [pc, #80]	; (2bb4 <nm_spi_read+0x13c>)
    2b62:	0018      	movs	r0, r3
    2b64:	4b14      	ldr	r3, [pc, #80]	; (2bb8 <nm_spi_read+0x140>)
    2b66:	4798      	blx	r3
    2b68:	200d      	movs	r0, #13
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <nm_spi_read+0x128>)
    2b6c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2b6e:	2300      	movs	r3, #0
    2b70:	9300      	str	r3, [sp, #0]
    2b72:	2300      	movs	r3, #0
    2b74:	2200      	movs	r2, #0
    2b76:	2100      	movs	r1, #0
    2b78:	20cf      	movs	r0, #207	; 0xcf
    2b7a:	4c04      	ldr	r4, [pc, #16]	; (2b8c <nm_spi_read+0x114>)
    2b7c:	47a0      	blx	r4
		return N_FAIL;
    2b7e:	2300      	movs	r3, #0
    2b80:	e000      	b.n	2b84 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    2b82:	2301      	movs	r3, #1
}
    2b84:	0018      	movs	r0, r3
    2b86:	46bd      	mov	sp, r7
    2b88:	b006      	add	sp, #24
    2b8a:	bdb0      	pop	{r4, r5, r7, pc}
    2b8c:	00001e15 	.word	0x00001e15
    2b90:	0000c494 	.word	0x0000c494
    2b94:	0000bf3c 	.word	0x0000bf3c
    2b98:	0000a811 	.word	0x0000a811
    2b9c:	0000c290 	.word	0x0000c290
    2ba0:	0000a845 	.word	0x0000a845
    2ba4:	00002159 	.word	0x00002159
    2ba8:	0000027a 	.word	0x0000027a
    2bac:	0000c2c0 	.word	0x0000c2c0
    2bb0:	00002295 	.word	0x00002295
    2bb4:	0000c2f8 	.word	0x0000c2f8
    2bb8:	0000a931 	.word	0x0000a931

00002bbc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2bbc:	b590      	push	{r4, r7, lr}
    2bbe:	b085      	sub	sp, #20
    2bc0:	af00      	add	r7, sp, #0
    2bc2:	6078      	str	r0, [r7, #4]
    2bc4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2bc6:	230f      	movs	r3, #15
    2bc8:	18fc      	adds	r4, r7, r3
    2bca:	683a      	ldr	r2, [r7, #0]
    2bcc:	687b      	ldr	r3, [r7, #4]
    2bce:	0011      	movs	r1, r2
    2bd0:	0018      	movs	r0, r3
    2bd2:	4b0d      	ldr	r3, [pc, #52]	; (2c08 <nm_spi_read_reg_with_ret+0x4c>)
    2bd4:	4798      	blx	r3
    2bd6:	0003      	movs	r3, r0
    2bd8:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2bda:	230f      	movs	r3, #15
    2bdc:	18fb      	adds	r3, r7, r3
    2bde:	781b      	ldrb	r3, [r3, #0]
    2be0:	b25b      	sxtb	r3, r3
    2be2:	2b01      	cmp	r3, #1
    2be4:	d104      	bne.n	2bf0 <nm_spi_read_reg_with_ret+0x34>
    2be6:	230f      	movs	r3, #15
    2be8:	18fb      	adds	r3, r7, r3
    2bea:	2200      	movs	r2, #0
    2bec:	701a      	strb	r2, [r3, #0]
    2bee:	e003      	b.n	2bf8 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2bf0:	230f      	movs	r3, #15
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	22fa      	movs	r2, #250	; 0xfa
    2bf6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2bf8:	230f      	movs	r3, #15
    2bfa:	18fb      	adds	r3, r7, r3
    2bfc:	781b      	ldrb	r3, [r3, #0]
    2bfe:	b25b      	sxtb	r3, r3
}
    2c00:	0018      	movs	r0, r3
    2c02:	46bd      	mov	sp, r7
    2c04:	b005      	add	sp, #20
    2c06:	bd90      	pop	{r4, r7, pc}
    2c08:	000028cd 	.word	0x000028cd

00002c0c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2c0c:	b590      	push	{r4, r7, lr}
    2c0e:	b085      	sub	sp, #20
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
    2c14:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2c16:	230f      	movs	r3, #15
    2c18:	18fc      	adds	r4, r7, r3
    2c1a:	683a      	ldr	r2, [r7, #0]
    2c1c:	687b      	ldr	r3, [r7, #4]
    2c1e:	0011      	movs	r1, r2
    2c20:	0018      	movs	r0, r3
    2c22:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <nm_spi_write_reg+0x4c>)
    2c24:	4798      	blx	r3
    2c26:	0003      	movs	r3, r0
    2c28:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c2a:	230f      	movs	r3, #15
    2c2c:	18fb      	adds	r3, r7, r3
    2c2e:	781b      	ldrb	r3, [r3, #0]
    2c30:	b25b      	sxtb	r3, r3
    2c32:	2b01      	cmp	r3, #1
    2c34:	d104      	bne.n	2c40 <nm_spi_write_reg+0x34>
    2c36:	230f      	movs	r3, #15
    2c38:	18fb      	adds	r3, r7, r3
    2c3a:	2200      	movs	r2, #0
    2c3c:	701a      	strb	r2, [r3, #0]
    2c3e:	e003      	b.n	2c48 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2c40:	230f      	movs	r3, #15
    2c42:	18fb      	adds	r3, r7, r3
    2c44:	22fa      	movs	r2, #250	; 0xfa
    2c46:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2c48:	230f      	movs	r3, #15
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	781b      	ldrb	r3, [r3, #0]
    2c4e:	b25b      	sxtb	r3, r3
}
    2c50:	0018      	movs	r0, r3
    2c52:	46bd      	mov	sp, r7
    2c54:	b005      	add	sp, #20
    2c56:	bd90      	pop	{r4, r7, pc}
    2c58:	0000266d 	.word	0x0000266d

00002c5c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2c5c:	b590      	push	{r4, r7, lr}
    2c5e:	b087      	sub	sp, #28
    2c60:	af00      	add	r7, sp, #0
    2c62:	60f8      	str	r0, [r7, #12]
    2c64:	60b9      	str	r1, [r7, #8]
    2c66:	1dbb      	adds	r3, r7, #6
    2c68:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    2c6a:	2317      	movs	r3, #23
    2c6c:	18fc      	adds	r4, r7, r3
    2c6e:	1dbb      	adds	r3, r7, #6
    2c70:	881a      	ldrh	r2, [r3, #0]
    2c72:	68b9      	ldr	r1, [r7, #8]
    2c74:	68fb      	ldr	r3, [r7, #12]
    2c76:	0018      	movs	r0, r3
    2c78:	4b0d      	ldr	r3, [pc, #52]	; (2cb0 <nm_spi_read_block+0x54>)
    2c7a:	4798      	blx	r3
    2c7c:	0003      	movs	r3, r0
    2c7e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2c80:	2317      	movs	r3, #23
    2c82:	18fb      	adds	r3, r7, r3
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	b25b      	sxtb	r3, r3
    2c88:	2b01      	cmp	r3, #1
    2c8a:	d104      	bne.n	2c96 <nm_spi_read_block+0x3a>
    2c8c:	2317      	movs	r3, #23
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	2200      	movs	r2, #0
    2c92:	701a      	strb	r2, [r3, #0]
    2c94:	e003      	b.n	2c9e <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2c96:	2317      	movs	r3, #23
    2c98:	18fb      	adds	r3, r7, r3
    2c9a:	22fa      	movs	r2, #250	; 0xfa
    2c9c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2c9e:	2317      	movs	r3, #23
    2ca0:	18fb      	adds	r3, r7, r3
    2ca2:	781b      	ldrb	r3, [r3, #0]
    2ca4:	b25b      	sxtb	r3, r3
}
    2ca6:	0018      	movs	r0, r3
    2ca8:	46bd      	mov	sp, r7
    2caa:	b007      	add	sp, #28
    2cac:	bd90      	pop	{r4, r7, pc}
    2cae:	46c0      	nop			; (mov r8, r8)
    2cb0:	00002a79 	.word	0x00002a79

00002cb4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2cb4:	b590      	push	{r4, r7, lr}
    2cb6:	b087      	sub	sp, #28
    2cb8:	af00      	add	r7, sp, #0
    2cba:	60f8      	str	r0, [r7, #12]
    2cbc:	60b9      	str	r1, [r7, #8]
    2cbe:	1dbb      	adds	r3, r7, #6
    2cc0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    2cc2:	2317      	movs	r3, #23
    2cc4:	18fc      	adds	r4, r7, r3
    2cc6:	1dbb      	adds	r3, r7, #6
    2cc8:	881a      	ldrh	r2, [r3, #0]
    2cca:	68b9      	ldr	r1, [r7, #8]
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	0018      	movs	r0, r3
    2cd0:	4b0d      	ldr	r3, [pc, #52]	; (2d08 <nm_spi_write_block+0x54>)
    2cd2:	4798      	blx	r3
    2cd4:	0003      	movs	r3, r0
    2cd6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2cd8:	2317      	movs	r3, #23
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	781b      	ldrb	r3, [r3, #0]
    2cde:	b25b      	sxtb	r3, r3
    2ce0:	2b01      	cmp	r3, #1
    2ce2:	d104      	bne.n	2cee <nm_spi_write_block+0x3a>
    2ce4:	2317      	movs	r3, #23
    2ce6:	18fb      	adds	r3, r7, r3
    2ce8:	2200      	movs	r2, #0
    2cea:	701a      	strb	r2, [r3, #0]
    2cec:	e003      	b.n	2cf6 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2cee:	2317      	movs	r3, #23
    2cf0:	18fb      	adds	r3, r7, r3
    2cf2:	22fa      	movs	r2, #250	; 0xfa
    2cf4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2cf6:	2317      	movs	r3, #23
    2cf8:	18fb      	adds	r3, r7, r3
    2cfa:	781b      	ldrb	r3, [r3, #0]
    2cfc:	b25b      	sxtb	r3, r3
}
    2cfe:	0018      	movs	r0, r3
    2d00:	46bd      	mov	sp, r7
    2d02:	b007      	add	sp, #28
    2d04:	bd90      	pop	{r4, r7, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	00002789 	.word	0x00002789

00002d0c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d0c:	b590      	push	{r4, r7, lr}
    2d0e:	b08b      	sub	sp, #44	; 0x2c
    2d10:	af04      	add	r7, sp, #16
    2d12:	0004      	movs	r4, r0
    2d14:	0008      	movs	r0, r1
    2d16:	0011      	movs	r1, r2
    2d18:	1dbb      	adds	r3, r7, #6
    2d1a:	1c22      	adds	r2, r4, #0
    2d1c:	801a      	strh	r2, [r3, #0]
    2d1e:	1d7b      	adds	r3, r7, #5
    2d20:	1c02      	adds	r2, r0, #0
    2d22:	701a      	strb	r2, [r3, #0]
    2d24:	1d3b      	adds	r3, r7, #4
    2d26:	1c0a      	adds	r2, r1, #0
    2d28:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    2d2a:	2317      	movs	r3, #23
    2d2c:	18fb      	adds	r3, r7, r3
    2d2e:	22ff      	movs	r2, #255	; 0xff
    2d30:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    2d32:	2315      	movs	r3, #21
    2d34:	18fb      	adds	r3, r7, r3
    2d36:	220b      	movs	r2, #11
    2d38:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2d3a:	1dbb      	adds	r3, r7, #6
    2d3c:	881b      	ldrh	r3, [r3, #0]
    2d3e:	2b02      	cmp	r3, #2
    2d40:	d000      	beq.n	2d44 <socket+0x38>
    2d42:	e07e      	b.n	2e42 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    2d44:	1d7b      	adds	r3, r7, #5
    2d46:	781b      	ldrb	r3, [r3, #0]
    2d48:	2b01      	cmp	r3, #1
    2d4a:	d108      	bne.n	2d5e <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    2d4c:	2315      	movs	r3, #21
    2d4e:	18fb      	adds	r3, r7, r3
    2d50:	2207      	movs	r2, #7
    2d52:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    2d54:	2316      	movs	r3, #22
    2d56:	18fb      	adds	r3, r7, r3
    2d58:	2200      	movs	r2, #0
    2d5a:	701a      	strb	r2, [r3, #0]
    2d5c:	e067      	b.n	2e2e <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    2d5e:	1d7b      	adds	r3, r7, #5
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	2b02      	cmp	r3, #2
    2d64:	d108      	bne.n	2d78 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2d66:	2315      	movs	r3, #21
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	220b      	movs	r2, #11
    2d6c:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    2d6e:	2316      	movs	r3, #22
    2d70:	18fb      	adds	r3, r7, r3
    2d72:	2207      	movs	r2, #7
    2d74:	701a      	strb	r2, [r3, #0]
    2d76:	e05a      	b.n	2e2e <socket+0x122>
		}
		else
			return sock;
    2d78:	2317      	movs	r3, #23
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	b25b      	sxtb	r3, r3
    2d80:	e063      	b.n	2e4a <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2d82:	2316      	movs	r3, #22
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	781b      	ldrb	r3, [r3, #0]
    2d88:	011a      	lsls	r2, r3, #4
    2d8a:	4b32      	ldr	r3, [pc, #200]	; (2e54 <socket+0x148>)
    2d8c:	18d3      	adds	r3, r2, r3
    2d8e:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    2d90:	693b      	ldr	r3, [r7, #16]
    2d92:	7a9b      	ldrb	r3, [r3, #10]
    2d94:	b2db      	uxtb	r3, r3
    2d96:	2b00      	cmp	r3, #0
    2d98:	d142      	bne.n	2e20 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2d9a:	693b      	ldr	r3, [r7, #16]
    2d9c:	2210      	movs	r2, #16
    2d9e:	2100      	movs	r1, #0
    2da0:	0018      	movs	r0, r3
    2da2:	4b2d      	ldr	r3, [pc, #180]	; (2e58 <socket+0x14c>)
    2da4:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    2da6:	693b      	ldr	r3, [r7, #16]
    2da8:	2201      	movs	r2, #1
    2daa:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2dac:	4b2b      	ldr	r3, [pc, #172]	; (2e5c <socket+0x150>)
    2dae:	881b      	ldrh	r3, [r3, #0]
    2db0:	b29b      	uxth	r3, r3
    2db2:	3301      	adds	r3, #1
    2db4:	b29a      	uxth	r2, r3
    2db6:	4b29      	ldr	r3, [pc, #164]	; (2e5c <socket+0x150>)
    2db8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    2dba:	4b28      	ldr	r3, [pc, #160]	; (2e5c <socket+0x150>)
    2dbc:	881b      	ldrh	r3, [r3, #0]
    2dbe:	b29b      	uxth	r3, r3
    2dc0:	2b00      	cmp	r3, #0
    2dc2:	d106      	bne.n	2dd2 <socket+0xc6>
					++gu16SessionID;
    2dc4:	4b25      	ldr	r3, [pc, #148]	; (2e5c <socket+0x150>)
    2dc6:	881b      	ldrh	r3, [r3, #0]
    2dc8:	b29b      	uxth	r3, r3
    2dca:	3301      	adds	r3, #1
    2dcc:	b29a      	uxth	r2, r3
    2dce:	4b23      	ldr	r3, [pc, #140]	; (2e5c <socket+0x150>)
    2dd0:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    2dd2:	4b22      	ldr	r3, [pc, #136]	; (2e5c <socket+0x150>)
    2dd4:	881b      	ldrh	r3, [r3, #0]
    2dd6:	b29a      	uxth	r2, r3
    2dd8:	693b      	ldr	r3, [r7, #16]
    2dda:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2ddc:	2317      	movs	r3, #23
    2dde:	18fb      	adds	r3, r7, r3
    2de0:	2216      	movs	r2, #22
    2de2:	18ba      	adds	r2, r7, r2
    2de4:	7812      	ldrb	r2, [r2, #0]
    2de6:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    2de8:	1d3b      	adds	r3, r7, #4
    2dea:	781b      	ldrb	r3, [r3, #0]
    2dec:	2201      	movs	r2, #1
    2dee:	4013      	ands	r3, r2
    2df0:	d026      	beq.n	2e40 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2df2:	230c      	movs	r3, #12
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	2217      	movs	r2, #23
    2df8:	18ba      	adds	r2, r7, r2
    2dfa:	7812      	ldrb	r2, [r2, #0]
    2dfc:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2dfe:	693b      	ldr	r3, [r7, #16]
    2e00:	2221      	movs	r2, #33	; 0x21
    2e02:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e04:	230c      	movs	r3, #12
    2e06:	18fa      	adds	r2, r7, r3
    2e08:	2300      	movs	r3, #0
    2e0a:	9302      	str	r3, [sp, #8]
    2e0c:	2300      	movs	r3, #0
    2e0e:	9301      	str	r3, [sp, #4]
    2e10:	2300      	movs	r3, #0
    2e12:	9300      	str	r3, [sp, #0]
    2e14:	2304      	movs	r3, #4
    2e16:	2150      	movs	r1, #80	; 0x50
    2e18:	2002      	movs	r0, #2
    2e1a:	4c11      	ldr	r4, [pc, #68]	; (2e60 <socket+0x154>)
    2e1c:	47a0      	blx	r4
				}
				break;
    2e1e:	e00f      	b.n	2e40 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2e20:	2316      	movs	r3, #22
    2e22:	18fb      	adds	r3, r7, r3
    2e24:	781a      	ldrb	r2, [r3, #0]
    2e26:	2316      	movs	r3, #22
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	3201      	adds	r2, #1
    2e2c:	701a      	strb	r2, [r3, #0]
    2e2e:	2316      	movs	r3, #22
    2e30:	18fa      	adds	r2, r7, r3
    2e32:	2315      	movs	r3, #21
    2e34:	18fb      	adds	r3, r7, r3
    2e36:	7812      	ldrb	r2, [r2, #0]
    2e38:	781b      	ldrb	r3, [r3, #0]
    2e3a:	429a      	cmp	r2, r3
    2e3c:	d3a1      	bcc.n	2d82 <socket+0x76>
    2e3e:	e000      	b.n	2e42 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    2e40:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    2e42:	2317      	movs	r3, #23
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	781b      	ldrb	r3, [r3, #0]
    2e48:	b25b      	sxtb	r3, r3
}
    2e4a:	0018      	movs	r0, r3
    2e4c:	46bd      	mov	sp, r7
    2e4e:	b007      	add	sp, #28
    2e50:	bd90      	pop	{r4, r7, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	20004484 	.word	0x20004484
    2e58:	000009f5 	.word	0x000009f5
    2e5c:	200000c6 	.word	0x200000c6
    2e60:	00000c41 	.word	0x00000c41

00002e64 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2e64:	b5b0      	push	{r4, r5, r7, lr}
    2e66:	b08a      	sub	sp, #40	; 0x28
    2e68:	af04      	add	r7, sp, #16
    2e6a:	6039      	str	r1, [r7, #0]
    2e6c:	0011      	movs	r1, r2
    2e6e:	1dfb      	adds	r3, r7, #7
    2e70:	1c02      	adds	r2, r0, #0
    2e72:	701a      	strb	r2, [r3, #0]
    2e74:	1dbb      	adds	r3, r7, #6
    2e76:	1c0a      	adds	r2, r1, #0
    2e78:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2e7a:	2317      	movs	r3, #23
    2e7c:	18fb      	adds	r3, r7, r3
    2e7e:	22fa      	movs	r2, #250	; 0xfa
    2e80:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2e82:	1dfb      	adds	r3, r7, #7
    2e84:	781b      	ldrb	r3, [r3, #0]
    2e86:	2b7f      	cmp	r3, #127	; 0x7f
    2e88:	d867      	bhi.n	2f5a <connect+0xf6>
    2e8a:	683b      	ldr	r3, [r7, #0]
    2e8c:	2b00      	cmp	r3, #0
    2e8e:	d064      	beq.n	2f5a <connect+0xf6>
    2e90:	1dfb      	adds	r3, r7, #7
    2e92:	781b      	ldrb	r3, [r3, #0]
    2e94:	b25b      	sxtb	r3, r3
    2e96:	4a35      	ldr	r2, [pc, #212]	; (2f6c <connect+0x108>)
    2e98:	011b      	lsls	r3, r3, #4
    2e9a:	18d3      	adds	r3, r2, r3
    2e9c:	330a      	adds	r3, #10
    2e9e:	781b      	ldrb	r3, [r3, #0]
    2ea0:	b2db      	uxtb	r3, r3
    2ea2:	2b01      	cmp	r3, #1
    2ea4:	d159      	bne.n	2f5a <connect+0xf6>
    2ea6:	1dbb      	adds	r3, r7, #6
    2ea8:	781b      	ldrb	r3, [r3, #0]
    2eaa:	2b00      	cmp	r3, #0
    2eac:	d055      	beq.n	2f5a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2eae:	2316      	movs	r3, #22
    2eb0:	18fb      	adds	r3, r7, r3
    2eb2:	2244      	movs	r2, #68	; 0x44
    2eb4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2eb6:	1dfb      	adds	r3, r7, #7
    2eb8:	781b      	ldrb	r3, [r3, #0]
    2eba:	b25b      	sxtb	r3, r3
    2ebc:	4a2b      	ldr	r2, [pc, #172]	; (2f6c <connect+0x108>)
    2ebe:	011b      	lsls	r3, r3, #4
    2ec0:	18d3      	adds	r3, r2, r3
    2ec2:	330b      	adds	r3, #11
    2ec4:	781b      	ldrb	r3, [r3, #0]
    2ec6:	b2db      	uxtb	r3, r3
    2ec8:	001a      	movs	r2, r3
    2eca:	2301      	movs	r3, #1
    2ecc:	4013      	ands	r3, r2
    2ece:	d00f      	beq.n	2ef0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2ed0:	2316      	movs	r3, #22
    2ed2:	18fb      	adds	r3, r7, r3
    2ed4:	224b      	movs	r2, #75	; 0x4b
    2ed6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2ed8:	1dfb      	adds	r3, r7, #7
    2eda:	781b      	ldrb	r3, [r3, #0]
    2edc:	b25b      	sxtb	r3, r3
    2ede:	4a23      	ldr	r2, [pc, #140]	; (2f6c <connect+0x108>)
    2ee0:	011b      	lsls	r3, r3, #4
    2ee2:	18d3      	adds	r3, r2, r3
    2ee4:	330b      	adds	r3, #11
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	b2da      	uxtb	r2, r3
    2eea:	2308      	movs	r3, #8
    2eec:	18fb      	adds	r3, r7, r3
    2eee:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    2ef0:	2308      	movs	r3, #8
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	1dfa      	adds	r2, r7, #7
    2ef6:	7812      	ldrb	r2, [r2, #0]
    2ef8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2efa:	6839      	ldr	r1, [r7, #0]
    2efc:	2308      	movs	r3, #8
    2efe:	18fb      	adds	r3, r7, r3
    2f00:	2208      	movs	r2, #8
    2f02:	0018      	movs	r0, r3
    2f04:	4b1a      	ldr	r3, [pc, #104]	; (2f70 <connect+0x10c>)
    2f06:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f08:	1dfb      	adds	r3, r7, #7
    2f0a:	781b      	ldrb	r3, [r3, #0]
    2f0c:	b25b      	sxtb	r3, r3
    2f0e:	4a17      	ldr	r2, [pc, #92]	; (2f6c <connect+0x108>)
    2f10:	011b      	lsls	r3, r3, #4
    2f12:	18d3      	adds	r3, r2, r3
    2f14:	3306      	adds	r3, #6
    2f16:	881b      	ldrh	r3, [r3, #0]
    2f18:	b29a      	uxth	r2, r3
    2f1a:	2308      	movs	r3, #8
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2f20:	2317      	movs	r3, #23
    2f22:	18fc      	adds	r4, r7, r3
    2f24:	2308      	movs	r3, #8
    2f26:	18fa      	adds	r2, r7, r3
    2f28:	2316      	movs	r3, #22
    2f2a:	18fb      	adds	r3, r7, r3
    2f2c:	7819      	ldrb	r1, [r3, #0]
    2f2e:	2300      	movs	r3, #0
    2f30:	9302      	str	r3, [sp, #8]
    2f32:	2300      	movs	r3, #0
    2f34:	9301      	str	r3, [sp, #4]
    2f36:	2300      	movs	r3, #0
    2f38:	9300      	str	r3, [sp, #0]
    2f3a:	230c      	movs	r3, #12
    2f3c:	2002      	movs	r0, #2
    2f3e:	4d0d      	ldr	r5, [pc, #52]	; (2f74 <connect+0x110>)
    2f40:	47a8      	blx	r5
    2f42:	0003      	movs	r3, r0
    2f44:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f46:	2317      	movs	r3, #23
    2f48:	18fb      	adds	r3, r7, r3
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	b25b      	sxtb	r3, r3
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d003      	beq.n	2f5a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f52:	2317      	movs	r3, #23
    2f54:	18fb      	adds	r3, r7, r3
    2f56:	22f7      	movs	r2, #247	; 0xf7
    2f58:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    2f5a:	2317      	movs	r3, #23
    2f5c:	18fb      	adds	r3, r7, r3
    2f5e:	781b      	ldrb	r3, [r3, #0]
    2f60:	b25b      	sxtb	r3, r3
}
    2f62:	0018      	movs	r0, r3
    2f64:	46bd      	mov	sp, r7
    2f66:	b006      	add	sp, #24
    2f68:	bdb0      	pop	{r4, r5, r7, pc}
    2f6a:	46c0      	nop			; (mov r8, r8)
    2f6c:	20004484 	.word	0x20004484
    2f70:	000009b9 	.word	0x000009b9
    2f74:	00000c41 	.word	0x00000c41

00002f78 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2f78:	b590      	push	{r4, r7, lr}
    2f7a:	b08f      	sub	sp, #60	; 0x3c
    2f7c:	af04      	add	r7, sp, #16
    2f7e:	0004      	movs	r4, r0
    2f80:	60b9      	str	r1, [r7, #8]
    2f82:	0010      	movs	r0, r2
    2f84:	0019      	movs	r1, r3
    2f86:	230f      	movs	r3, #15
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	1c22      	adds	r2, r4, #0
    2f8c:	701a      	strb	r2, [r3, #0]
    2f8e:	230c      	movs	r3, #12
    2f90:	18fb      	adds	r3, r7, r3
    2f92:	1c02      	adds	r2, r0, #0
    2f94:	801a      	strh	r2, [r3, #0]
    2f96:	1dbb      	adds	r3, r7, #6
    2f98:	1c0a      	adds	r2, r1, #0
    2f9a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    2f9c:	2326      	movs	r3, #38	; 0x26
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	2206      	movs	r2, #6
    2fa2:	4252      	negs	r2, r2
    2fa4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2fa6:	230f      	movs	r3, #15
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	2b7f      	cmp	r3, #127	; 0x7f
    2fae:	d900      	bls.n	2fb2 <send+0x3a>
    2fb0:	e087      	b.n	30c2 <send+0x14a>
    2fb2:	68bb      	ldr	r3, [r7, #8]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d100      	bne.n	2fba <send+0x42>
    2fb8:	e083      	b.n	30c2 <send+0x14a>
    2fba:	230c      	movs	r3, #12
    2fbc:	18fb      	adds	r3, r7, r3
    2fbe:	881a      	ldrh	r2, [r3, #0]
    2fc0:	23af      	movs	r3, #175	; 0xaf
    2fc2:	00db      	lsls	r3, r3, #3
    2fc4:	429a      	cmp	r2, r3
    2fc6:	d900      	bls.n	2fca <send+0x52>
    2fc8:	e07b      	b.n	30c2 <send+0x14a>
    2fca:	230f      	movs	r3, #15
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	b25b      	sxtb	r3, r3
    2fd2:	4a40      	ldr	r2, [pc, #256]	; (30d4 <send+0x15c>)
    2fd4:	011b      	lsls	r3, r3, #4
    2fd6:	18d3      	adds	r3, r2, r3
    2fd8:	330a      	adds	r3, #10
    2fda:	781b      	ldrb	r3, [r3, #0]
    2fdc:	b2db      	uxtb	r3, r3
    2fde:	2b01      	cmp	r3, #1
    2fe0:	d16f      	bne.n	30c2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    2fe2:	2323      	movs	r3, #35	; 0x23
    2fe4:	18fb      	adds	r3, r7, r3
    2fe6:	2245      	movs	r2, #69	; 0x45
    2fe8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2fea:	2324      	movs	r3, #36	; 0x24
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	2250      	movs	r2, #80	; 0x50
    2ff0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    2ff2:	2310      	movs	r3, #16
    2ff4:	18fb      	adds	r3, r7, r3
    2ff6:	220f      	movs	r2, #15
    2ff8:	18ba      	adds	r2, r7, r2
    2ffa:	7812      	ldrb	r2, [r2, #0]
    2ffc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    2ffe:	2310      	movs	r3, #16
    3000:	18fb      	adds	r3, r7, r3
    3002:	220c      	movs	r2, #12
    3004:	18ba      	adds	r2, r7, r2
    3006:	8812      	ldrh	r2, [r2, #0]
    3008:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    300a:	230f      	movs	r3, #15
    300c:	18fb      	adds	r3, r7, r3
    300e:	781b      	ldrb	r3, [r3, #0]
    3010:	b25b      	sxtb	r3, r3
    3012:	4a30      	ldr	r2, [pc, #192]	; (30d4 <send+0x15c>)
    3014:	011b      	lsls	r3, r3, #4
    3016:	18d3      	adds	r3, r2, r3
    3018:	3306      	adds	r3, #6
    301a:	881b      	ldrh	r3, [r3, #0]
    301c:	b29a      	uxth	r2, r3
    301e:	2310      	movs	r3, #16
    3020:	18fb      	adds	r3, r7, r3
    3022:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    3024:	230f      	movs	r3, #15
    3026:	18fb      	adds	r3, r7, r3
    3028:	781b      	ldrb	r3, [r3, #0]
    302a:	b25b      	sxtb	r3, r3
    302c:	2b06      	cmp	r3, #6
    302e:	dd03      	ble.n	3038 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3030:	2324      	movs	r3, #36	; 0x24
    3032:	18fb      	adds	r3, r7, r3
    3034:	2244      	movs	r2, #68	; 0x44
    3036:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3038:	230f      	movs	r3, #15
    303a:	18fb      	adds	r3, r7, r3
    303c:	781b      	ldrb	r3, [r3, #0]
    303e:	b25b      	sxtb	r3, r3
    3040:	4a24      	ldr	r2, [pc, #144]	; (30d4 <send+0x15c>)
    3042:	011b      	lsls	r3, r3, #4
    3044:	18d3      	adds	r3, r2, r3
    3046:	330b      	adds	r3, #11
    3048:	781b      	ldrb	r3, [r3, #0]
    304a:	b2db      	uxtb	r3, r3
    304c:	001a      	movs	r2, r3
    304e:	2301      	movs	r3, #1
    3050:	4013      	ands	r3, r2
    3052:	d00f      	beq.n	3074 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3054:	2323      	movs	r3, #35	; 0x23
    3056:	18fb      	adds	r3, r7, r3
    3058:	224c      	movs	r2, #76	; 0x4c
    305a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    305c:	230f      	movs	r3, #15
    305e:	18fb      	adds	r3, r7, r3
    3060:	2200      	movs	r2, #0
    3062:	569a      	ldrsb	r2, [r3, r2]
    3064:	2324      	movs	r3, #36	; 0x24
    3066:	18fb      	adds	r3, r7, r3
    3068:	491a      	ldr	r1, [pc, #104]	; (30d4 <send+0x15c>)
    306a:	0112      	lsls	r2, r2, #4
    306c:	188a      	adds	r2, r1, r2
    306e:	3208      	adds	r2, #8
    3070:	8812      	ldrh	r2, [r2, #0]
    3072:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3074:	2323      	movs	r3, #35	; 0x23
    3076:	18fb      	adds	r3, r7, r3
    3078:	781b      	ldrb	r3, [r3, #0]
    307a:	2280      	movs	r2, #128	; 0x80
    307c:	4252      	negs	r2, r2
    307e:	4313      	orrs	r3, r2
    3080:	b2d9      	uxtb	r1, r3
    3082:	2310      	movs	r3, #16
    3084:	18fa      	adds	r2, r7, r3
    3086:	2324      	movs	r3, #36	; 0x24
    3088:	18fb      	adds	r3, r7, r3
    308a:	881b      	ldrh	r3, [r3, #0]
    308c:	9302      	str	r3, [sp, #8]
    308e:	230c      	movs	r3, #12
    3090:	18fb      	adds	r3, r7, r3
    3092:	881b      	ldrh	r3, [r3, #0]
    3094:	9301      	str	r3, [sp, #4]
    3096:	68bb      	ldr	r3, [r7, #8]
    3098:	9300      	str	r3, [sp, #0]
    309a:	2310      	movs	r3, #16
    309c:	2002      	movs	r0, #2
    309e:	4c0e      	ldr	r4, [pc, #56]	; (30d8 <send+0x160>)
    30a0:	47a0      	blx	r4
    30a2:	0003      	movs	r3, r0
    30a4:	001a      	movs	r2, r3
    30a6:	2326      	movs	r3, #38	; 0x26
    30a8:	18fb      	adds	r3, r7, r3
    30aa:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    30ac:	2326      	movs	r3, #38	; 0x26
    30ae:	18fb      	adds	r3, r7, r3
    30b0:	2200      	movs	r2, #0
    30b2:	5e9b      	ldrsh	r3, [r3, r2]
    30b4:	2b00      	cmp	r3, #0
    30b6:	d004      	beq.n	30c2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    30b8:	2326      	movs	r3, #38	; 0x26
    30ba:	18fb      	adds	r3, r7, r3
    30bc:	220e      	movs	r2, #14
    30be:	4252      	negs	r2, r2
    30c0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    30c2:	2326      	movs	r3, #38	; 0x26
    30c4:	18fb      	adds	r3, r7, r3
    30c6:	2200      	movs	r2, #0
    30c8:	5e9b      	ldrsh	r3, [r3, r2]
}
    30ca:	0018      	movs	r0, r3
    30cc:	46bd      	mov	sp, r7
    30ce:	b00b      	add	sp, #44	; 0x2c
    30d0:	bd90      	pop	{r4, r7, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	20004484 	.word	0x20004484
    30d8:	00000c41 	.word	0x00000c41

000030dc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    30dc:	b590      	push	{r4, r7, lr}
    30de:	b08d      	sub	sp, #52	; 0x34
    30e0:	af04      	add	r7, sp, #16
    30e2:	60b9      	str	r1, [r7, #8]
    30e4:	0011      	movs	r1, r2
    30e6:	607b      	str	r3, [r7, #4]
    30e8:	230f      	movs	r3, #15
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	1c02      	adds	r2, r0, #0
    30ee:	701a      	strb	r2, [r3, #0]
    30f0:	230c      	movs	r3, #12
    30f2:	18fb      	adds	r3, r7, r3
    30f4:	1c0a      	adds	r2, r1, #0
    30f6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30f8:	231e      	movs	r3, #30
    30fa:	18fb      	adds	r3, r7, r3
    30fc:	2206      	movs	r2, #6
    30fe:	4252      	negs	r2, r2
    3100:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3102:	230f      	movs	r3, #15
    3104:	18fb      	adds	r3, r7, r3
    3106:	781b      	ldrb	r3, [r3, #0]
    3108:	2b7f      	cmp	r3, #127	; 0x7f
    310a:	d900      	bls.n	310e <recv+0x32>
    310c:	e099      	b.n	3242 <recv+0x166>
    310e:	68bb      	ldr	r3, [r7, #8]
    3110:	2b00      	cmp	r3, #0
    3112:	d100      	bne.n	3116 <recv+0x3a>
    3114:	e095      	b.n	3242 <recv+0x166>
    3116:	230c      	movs	r3, #12
    3118:	18fb      	adds	r3, r7, r3
    311a:	881b      	ldrh	r3, [r3, #0]
    311c:	2b00      	cmp	r3, #0
    311e:	d100      	bne.n	3122 <recv+0x46>
    3120:	e08f      	b.n	3242 <recv+0x166>
    3122:	230f      	movs	r3, #15
    3124:	18fb      	adds	r3, r7, r3
    3126:	781b      	ldrb	r3, [r3, #0]
    3128:	b25b      	sxtb	r3, r3
    312a:	4a4a      	ldr	r2, [pc, #296]	; (3254 <recv+0x178>)
    312c:	011b      	lsls	r3, r3, #4
    312e:	18d3      	adds	r3, r2, r3
    3130:	330a      	adds	r3, #10
    3132:	781b      	ldrb	r3, [r3, #0]
    3134:	b2db      	uxtb	r3, r3
    3136:	2b01      	cmp	r3, #1
    3138:	d000      	beq.n	313c <recv+0x60>
    313a:	e082      	b.n	3242 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    313c:	231e      	movs	r3, #30
    313e:	18fb      	adds	r3, r7, r3
    3140:	2200      	movs	r2, #0
    3142:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3144:	230f      	movs	r3, #15
    3146:	18fb      	adds	r3, r7, r3
    3148:	2200      	movs	r2, #0
    314a:	569a      	ldrsb	r2, [r3, r2]
    314c:	4b41      	ldr	r3, [pc, #260]	; (3254 <recv+0x178>)
    314e:	0112      	lsls	r2, r2, #4
    3150:	68b9      	ldr	r1, [r7, #8]
    3152:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3154:	230f      	movs	r3, #15
    3156:	18fb      	adds	r3, r7, r3
    3158:	781b      	ldrb	r3, [r3, #0]
    315a:	b25b      	sxtb	r3, r3
    315c:	4a3d      	ldr	r2, [pc, #244]	; (3254 <recv+0x178>)
    315e:	011b      	lsls	r3, r3, #4
    3160:	18d3      	adds	r3, r2, r3
    3162:	3304      	adds	r3, #4
    3164:	220c      	movs	r2, #12
    3166:	18ba      	adds	r2, r7, r2
    3168:	8812      	ldrh	r2, [r2, #0]
    316a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    316c:	230f      	movs	r3, #15
    316e:	18fb      	adds	r3, r7, r3
    3170:	781b      	ldrb	r3, [r3, #0]
    3172:	b25b      	sxtb	r3, r3
    3174:	4a37      	ldr	r2, [pc, #220]	; (3254 <recv+0x178>)
    3176:	011b      	lsls	r3, r3, #4
    3178:	18d3      	adds	r3, r2, r3
    317a:	330c      	adds	r3, #12
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	b2db      	uxtb	r3, r3
    3180:	2b00      	cmp	r3, #0
    3182:	d15e      	bne.n	3242 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3184:	231d      	movs	r3, #29
    3186:	18fb      	adds	r3, r7, r3
    3188:	2246      	movs	r2, #70	; 0x46
    318a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    318c:	230f      	movs	r3, #15
    318e:	18fb      	adds	r3, r7, r3
    3190:	781b      	ldrb	r3, [r3, #0]
    3192:	b25b      	sxtb	r3, r3
    3194:	4a2f      	ldr	r2, [pc, #188]	; (3254 <recv+0x178>)
    3196:	011b      	lsls	r3, r3, #4
    3198:	18d3      	adds	r3, r2, r3
    319a:	330c      	adds	r3, #12
    319c:	2201      	movs	r2, #1
    319e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    31a0:	230f      	movs	r3, #15
    31a2:	18fb      	adds	r3, r7, r3
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	b25b      	sxtb	r3, r3
    31a8:	4a2a      	ldr	r2, [pc, #168]	; (3254 <recv+0x178>)
    31aa:	011b      	lsls	r3, r3, #4
    31ac:	18d3      	adds	r3, r2, r3
    31ae:	330b      	adds	r3, #11
    31b0:	781b      	ldrb	r3, [r3, #0]
    31b2:	b2db      	uxtb	r3, r3
    31b4:	001a      	movs	r2, r3
    31b6:	2301      	movs	r3, #1
    31b8:	4013      	ands	r3, r2
    31ba:	d003      	beq.n	31c4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    31bc:	231d      	movs	r3, #29
    31be:	18fb      	adds	r3, r7, r3
    31c0:	224d      	movs	r2, #77	; 0x4d
    31c2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	2b00      	cmp	r3, #0
    31c8:	d105      	bne.n	31d6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    31ca:	2314      	movs	r3, #20
    31cc:	18fb      	adds	r3, r7, r3
    31ce:	2201      	movs	r2, #1
    31d0:	4252      	negs	r2, r2
    31d2:	601a      	str	r2, [r3, #0]
    31d4:	e003      	b.n	31de <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    31d6:	2314      	movs	r3, #20
    31d8:	18fb      	adds	r3, r7, r3
    31da:	687a      	ldr	r2, [r7, #4]
    31dc:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    31de:	2314      	movs	r3, #20
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	220f      	movs	r2, #15
    31e4:	18ba      	adds	r2, r7, r2
    31e6:	7812      	ldrb	r2, [r2, #0]
    31e8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    31ea:	230f      	movs	r3, #15
    31ec:	18fb      	adds	r3, r7, r3
    31ee:	781b      	ldrb	r3, [r3, #0]
    31f0:	b25b      	sxtb	r3, r3
    31f2:	4a18      	ldr	r2, [pc, #96]	; (3254 <recv+0x178>)
    31f4:	011b      	lsls	r3, r3, #4
    31f6:	18d3      	adds	r3, r2, r3
    31f8:	3306      	adds	r3, #6
    31fa:	881b      	ldrh	r3, [r3, #0]
    31fc:	b29a      	uxth	r2, r3
    31fe:	2314      	movs	r3, #20
    3200:	18fb      	adds	r3, r7, r3
    3202:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3204:	2314      	movs	r3, #20
    3206:	18fa      	adds	r2, r7, r3
    3208:	231d      	movs	r3, #29
    320a:	18fb      	adds	r3, r7, r3
    320c:	7819      	ldrb	r1, [r3, #0]
    320e:	2300      	movs	r3, #0
    3210:	9302      	str	r3, [sp, #8]
    3212:	2300      	movs	r3, #0
    3214:	9301      	str	r3, [sp, #4]
    3216:	2300      	movs	r3, #0
    3218:	9300      	str	r3, [sp, #0]
    321a:	2308      	movs	r3, #8
    321c:	2002      	movs	r0, #2
    321e:	4c0e      	ldr	r4, [pc, #56]	; (3258 <recv+0x17c>)
    3220:	47a0      	blx	r4
    3222:	0003      	movs	r3, r0
    3224:	001a      	movs	r2, r3
    3226:	231e      	movs	r3, #30
    3228:	18fb      	adds	r3, r7, r3
    322a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    322c:	231e      	movs	r3, #30
    322e:	18fb      	adds	r3, r7, r3
    3230:	2200      	movs	r2, #0
    3232:	5e9b      	ldrsh	r3, [r3, r2]
    3234:	2b00      	cmp	r3, #0
    3236:	d004      	beq.n	3242 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3238:	231e      	movs	r3, #30
    323a:	18fb      	adds	r3, r7, r3
    323c:	220e      	movs	r2, #14
    323e:	4252      	negs	r2, r2
    3240:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    3242:	231e      	movs	r3, #30
    3244:	18fb      	adds	r3, r7, r3
    3246:	2200      	movs	r2, #0
    3248:	5e9b      	ldrsh	r3, [r3, r2]
}
    324a:	0018      	movs	r0, r3
    324c:	46bd      	mov	sp, r7
    324e:	b009      	add	sp, #36	; 0x24
    3250:	bd90      	pop	{r4, r7, pc}
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	20004484 	.word	0x20004484
    3258:	00000c41 	.word	0x00000c41

0000325c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    325c:	b5b0      	push	{r4, r5, r7, lr}
    325e:	b088      	sub	sp, #32
    3260:	af04      	add	r7, sp, #16
    3262:	0002      	movs	r2, r0
    3264:	1dfb      	adds	r3, r7, #7
    3266:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3268:	230f      	movs	r3, #15
    326a:	18fb      	adds	r3, r7, r3
    326c:	22fa      	movs	r2, #250	; 0xfa
    326e:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3270:	1dfb      	adds	r3, r7, #7
    3272:	781b      	ldrb	r3, [r3, #0]
    3274:	2b7f      	cmp	r3, #127	; 0x7f
    3276:	d86a      	bhi.n	334e <close+0xf2>
    3278:	1dfb      	adds	r3, r7, #7
    327a:	781b      	ldrb	r3, [r3, #0]
    327c:	b25b      	sxtb	r3, r3
    327e:	4a38      	ldr	r2, [pc, #224]	; (3360 <close+0x104>)
    3280:	011b      	lsls	r3, r3, #4
    3282:	18d3      	adds	r3, r2, r3
    3284:	330a      	adds	r3, #10
    3286:	781b      	ldrb	r3, [r3, #0]
    3288:	b2db      	uxtb	r3, r3
    328a:	2b01      	cmp	r3, #1
    328c:	d15f      	bne.n	334e <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    328e:	230e      	movs	r3, #14
    3290:	18fb      	adds	r3, r7, r3
    3292:	2249      	movs	r2, #73	; 0x49
    3294:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3296:	2308      	movs	r3, #8
    3298:	18fb      	adds	r3, r7, r3
    329a:	1dfa      	adds	r2, r7, #7
    329c:	7812      	ldrb	r2, [r2, #0]
    329e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    32a0:	1dfb      	adds	r3, r7, #7
    32a2:	781b      	ldrb	r3, [r3, #0]
    32a4:	b25b      	sxtb	r3, r3
    32a6:	4a2e      	ldr	r2, [pc, #184]	; (3360 <close+0x104>)
    32a8:	011b      	lsls	r3, r3, #4
    32aa:	18d3      	adds	r3, r2, r3
    32ac:	3306      	adds	r3, #6
    32ae:	881b      	ldrh	r3, [r3, #0]
    32b0:	b29a      	uxth	r2, r3
    32b2:	2308      	movs	r3, #8
    32b4:	18fb      	adds	r3, r7, r3
    32b6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    32b8:	1dfb      	adds	r3, r7, #7
    32ba:	781b      	ldrb	r3, [r3, #0]
    32bc:	b25b      	sxtb	r3, r3
    32be:	4a28      	ldr	r2, [pc, #160]	; (3360 <close+0x104>)
    32c0:	011b      	lsls	r3, r3, #4
    32c2:	18d3      	adds	r3, r2, r3
    32c4:	330a      	adds	r3, #10
    32c6:	2200      	movs	r2, #0
    32c8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    32ca:	1dfb      	adds	r3, r7, #7
    32cc:	781b      	ldrb	r3, [r3, #0]
    32ce:	b25b      	sxtb	r3, r3
    32d0:	4a23      	ldr	r2, [pc, #140]	; (3360 <close+0x104>)
    32d2:	011b      	lsls	r3, r3, #4
    32d4:	18d3      	adds	r3, r2, r3
    32d6:	3306      	adds	r3, #6
    32d8:	2200      	movs	r2, #0
    32da:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    32dc:	1dfb      	adds	r3, r7, #7
    32de:	781b      	ldrb	r3, [r3, #0]
    32e0:	b25b      	sxtb	r3, r3
    32e2:	4a1f      	ldr	r2, [pc, #124]	; (3360 <close+0x104>)
    32e4:	011b      	lsls	r3, r3, #4
    32e6:	18d3      	adds	r3, r2, r3
    32e8:	330b      	adds	r3, #11
    32ea:	781b      	ldrb	r3, [r3, #0]
    32ec:	b2db      	uxtb	r3, r3
    32ee:	001a      	movs	r2, r3
    32f0:	2301      	movs	r3, #1
    32f2:	4013      	ands	r3, r2
    32f4:	d003      	beq.n	32fe <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    32f6:	230e      	movs	r3, #14
    32f8:	18fb      	adds	r3, r7, r3
    32fa:	224e      	movs	r2, #78	; 0x4e
    32fc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    32fe:	230f      	movs	r3, #15
    3300:	18fc      	adds	r4, r7, r3
    3302:	2308      	movs	r3, #8
    3304:	18fa      	adds	r2, r7, r3
    3306:	230e      	movs	r3, #14
    3308:	18fb      	adds	r3, r7, r3
    330a:	7819      	ldrb	r1, [r3, #0]
    330c:	2300      	movs	r3, #0
    330e:	9302      	str	r3, [sp, #8]
    3310:	2300      	movs	r3, #0
    3312:	9301      	str	r3, [sp, #4]
    3314:	2300      	movs	r3, #0
    3316:	9300      	str	r3, [sp, #0]
    3318:	2304      	movs	r3, #4
    331a:	2002      	movs	r0, #2
    331c:	4d11      	ldr	r5, [pc, #68]	; (3364 <close+0x108>)
    331e:	47a8      	blx	r5
    3320:	0003      	movs	r3, r0
    3322:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3324:	230f      	movs	r3, #15
    3326:	18fb      	adds	r3, r7, r3
    3328:	781b      	ldrb	r3, [r3, #0]
    332a:	b25b      	sxtb	r3, r3
    332c:	2b00      	cmp	r3, #0
    332e:	d003      	beq.n	3338 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    3330:	230f      	movs	r3, #15
    3332:	18fb      	adds	r3, r7, r3
    3334:	22f7      	movs	r2, #247	; 0xf7
    3336:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3338:	1dfb      	adds	r3, r7, #7
    333a:	781b      	ldrb	r3, [r3, #0]
    333c:	b25b      	sxtb	r3, r3
    333e:	011a      	lsls	r2, r3, #4
    3340:	4b07      	ldr	r3, [pc, #28]	; (3360 <close+0x104>)
    3342:	18d3      	adds	r3, r2, r3
    3344:	2210      	movs	r2, #16
    3346:	2100      	movs	r1, #0
    3348:	0018      	movs	r0, r3
    334a:	4b07      	ldr	r3, [pc, #28]	; (3368 <close+0x10c>)
    334c:	4798      	blx	r3
	}
	return s8Ret;
    334e:	230f      	movs	r3, #15
    3350:	18fb      	adds	r3, r7, r3
    3352:	781b      	ldrb	r3, [r3, #0]
    3354:	b25b      	sxtb	r3, r3
}
    3356:	0018      	movs	r0, r3
    3358:	46bd      	mov	sp, r7
    335a:	b004      	add	sp, #16
    335c:	bdb0      	pop	{r4, r5, r7, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	20004484 	.word	0x20004484
    3364:	00000c41 	.word	0x00000c41
    3368:	000009f5 	.word	0x000009f5

0000336c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    336c:	b5b0      	push	{r4, r5, r7, lr}
    336e:	b088      	sub	sp, #32
    3370:	af04      	add	r7, sp, #16
    3372:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3374:	230f      	movs	r3, #15
    3376:	18fb      	adds	r3, r7, r3
    3378:	22fa      	movs	r2, #250	; 0xfa
    337a:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    337c:	687b      	ldr	r3, [r7, #4]
    337e:	0018      	movs	r0, r3
    3380:	4b19      	ldr	r3, [pc, #100]	; (33e8 <gethostbyname+0x7c>)
    3382:	4798      	blx	r3
    3384:	0003      	movs	r3, r0
    3386:	001a      	movs	r2, r3
    3388:	230e      	movs	r3, #14
    338a:	18fb      	adds	r3, r7, r3
    338c:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    338e:	230e      	movs	r3, #14
    3390:	18fb      	adds	r3, r7, r3
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	2b40      	cmp	r3, #64	; 0x40
    3396:	d81f      	bhi.n	33d8 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3398:	230e      	movs	r3, #14
    339a:	18fb      	adds	r3, r7, r3
    339c:	781b      	ldrb	r3, [r3, #0]
    339e:	b29b      	uxth	r3, r3
    33a0:	3301      	adds	r3, #1
    33a2:	b299      	uxth	r1, r3
    33a4:	230f      	movs	r3, #15
    33a6:	18fc      	adds	r4, r7, r3
    33a8:	687a      	ldr	r2, [r7, #4]
    33aa:	2300      	movs	r3, #0
    33ac:	9302      	str	r3, [sp, #8]
    33ae:	2300      	movs	r3, #0
    33b0:	9301      	str	r3, [sp, #4]
    33b2:	2300      	movs	r3, #0
    33b4:	9300      	str	r3, [sp, #0]
    33b6:	000b      	movs	r3, r1
    33b8:	21ca      	movs	r1, #202	; 0xca
    33ba:	2002      	movs	r0, #2
    33bc:	4d0b      	ldr	r5, [pc, #44]	; (33ec <gethostbyname+0x80>)
    33be:	47a8      	blx	r5
    33c0:	0003      	movs	r3, r0
    33c2:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    33c4:	230f      	movs	r3, #15
    33c6:	18fb      	adds	r3, r7, r3
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	b25b      	sxtb	r3, r3
    33cc:	2b00      	cmp	r3, #0
    33ce:	d003      	beq.n	33d8 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    33d0:	230f      	movs	r3, #15
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	22f7      	movs	r2, #247	; 0xf7
    33d6:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    33d8:	230f      	movs	r3, #15
    33da:	18fb      	adds	r3, r7, r3
    33dc:	781b      	ldrb	r3, [r3, #0]
    33de:	b25b      	sxtb	r3, r3
}
    33e0:	0018      	movs	r0, r3
    33e2:	46bd      	mov	sp, r7
    33e4:	b004      	add	sp, #16
    33e6:	bdb0      	pop	{r4, r5, r7, pc}
    33e8:	00000a35 	.word	0x00000a35
    33ec:	00000c41 	.word	0x00000c41

000033f0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b082      	sub	sp, #8
    33f4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    33f6:	4b10      	ldr	r3, [pc, #64]	; (3438 <cpu_irq_enter_critical+0x48>)
    33f8:	681b      	ldr	r3, [r3, #0]
    33fa:	2b00      	cmp	r3, #0
    33fc:	d112      	bne.n	3424 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    33fe:	f3ef 8310 	mrs	r3, PRIMASK
    3402:	607b      	str	r3, [r7, #4]
  return(result);
    3404:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3406:	2b00      	cmp	r3, #0
    3408:	d109      	bne.n	341e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    340a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    340c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3410:	4b0a      	ldr	r3, [pc, #40]	; (343c <cpu_irq_enter_critical+0x4c>)
    3412:	2200      	movs	r2, #0
    3414:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3416:	4b0a      	ldr	r3, [pc, #40]	; (3440 <cpu_irq_enter_critical+0x50>)
    3418:	2201      	movs	r2, #1
    341a:	701a      	strb	r2, [r3, #0]
    341c:	e002      	b.n	3424 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    341e:	4b08      	ldr	r3, [pc, #32]	; (3440 <cpu_irq_enter_critical+0x50>)
    3420:	2200      	movs	r2, #0
    3422:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3424:	4b04      	ldr	r3, [pc, #16]	; (3438 <cpu_irq_enter_critical+0x48>)
    3426:	681b      	ldr	r3, [r3, #0]
    3428:	1c5a      	adds	r2, r3, #1
    342a:	4b03      	ldr	r3, [pc, #12]	; (3438 <cpu_irq_enter_critical+0x48>)
    342c:	601a      	str	r2, [r3, #0]
}
    342e:	46c0      	nop			; (mov r8, r8)
    3430:	46bd      	mov	sp, r7
    3432:	b002      	add	sp, #8
    3434:	bd80      	pop	{r7, pc}
    3436:	46c0      	nop			; (mov r8, r8)
    3438:	200000c8 	.word	0x200000c8
    343c:	20000010 	.word	0x20000010
    3440:	200000cc 	.word	0x200000cc

00003444 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3444:	b580      	push	{r7, lr}
    3446:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3448:	4b0b      	ldr	r3, [pc, #44]	; (3478 <cpu_irq_leave_critical+0x34>)
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	1e5a      	subs	r2, r3, #1
    344e:	4b0a      	ldr	r3, [pc, #40]	; (3478 <cpu_irq_leave_critical+0x34>)
    3450:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3452:	4b09      	ldr	r3, [pc, #36]	; (3478 <cpu_irq_leave_critical+0x34>)
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	2b00      	cmp	r3, #0
    3458:	d10a      	bne.n	3470 <cpu_irq_leave_critical+0x2c>
    345a:	4b08      	ldr	r3, [pc, #32]	; (347c <cpu_irq_leave_critical+0x38>)
    345c:	781b      	ldrb	r3, [r3, #0]
    345e:	b2db      	uxtb	r3, r3
    3460:	2b00      	cmp	r3, #0
    3462:	d005      	beq.n	3470 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3464:	4b06      	ldr	r3, [pc, #24]	; (3480 <cpu_irq_leave_critical+0x3c>)
    3466:	2201      	movs	r2, #1
    3468:	701a      	strb	r2, [r3, #0]
    346a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    346e:	b662      	cpsie	i
	}
}
    3470:	46c0      	nop			; (mov r8, r8)
    3472:	46bd      	mov	sp, r7
    3474:	bd80      	pop	{r7, pc}
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	200000c8 	.word	0x200000c8
    347c:	200000cc 	.word	0x200000cc
    3480:	20000010 	.word	0x20000010

00003484 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3484:	b580      	push	{r7, lr}
    3486:	b084      	sub	sp, #16
    3488:	af00      	add	r7, sp, #0
    348a:	0002      	movs	r2, r0
    348c:	1dfb      	adds	r3, r7, #7
    348e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3490:	230f      	movs	r3, #15
    3492:	18fb      	adds	r3, r7, r3
    3494:	1dfa      	adds	r2, r7, #7
    3496:	7812      	ldrb	r2, [r2, #0]
    3498:	09d2      	lsrs	r2, r2, #7
    349a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    349c:	230e      	movs	r3, #14
    349e:	18fb      	adds	r3, r7, r3
    34a0:	1dfa      	adds	r2, r7, #7
    34a2:	7812      	ldrb	r2, [r2, #0]
    34a4:	0952      	lsrs	r2, r2, #5
    34a6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    34a8:	4b0d      	ldr	r3, [pc, #52]	; (34e0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    34aa:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    34ac:	230f      	movs	r3, #15
    34ae:	18fb      	adds	r3, r7, r3
    34b0:	781b      	ldrb	r3, [r3, #0]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d10f      	bne.n	34d6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    34b6:	230f      	movs	r3, #15
    34b8:	18fb      	adds	r3, r7, r3
    34ba:	781b      	ldrb	r3, [r3, #0]
    34bc:	009b      	lsls	r3, r3, #2
    34be:	2210      	movs	r2, #16
    34c0:	4694      	mov	ip, r2
    34c2:	44bc      	add	ip, r7
    34c4:	4463      	add	r3, ip
    34c6:	3b08      	subs	r3, #8
    34c8:	681a      	ldr	r2, [r3, #0]
    34ca:	230e      	movs	r3, #14
    34cc:	18fb      	adds	r3, r7, r3
    34ce:	781b      	ldrb	r3, [r3, #0]
    34d0:	01db      	lsls	r3, r3, #7
    34d2:	18d3      	adds	r3, r2, r3
    34d4:	e000      	b.n	34d8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    34d6:	2300      	movs	r3, #0
	}
}
    34d8:	0018      	movs	r0, r3
    34da:	46bd      	mov	sp, r7
    34dc:	b004      	add	sp, #16
    34de:	bd80      	pop	{r7, pc}
    34e0:	41004400 	.word	0x41004400

000034e4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b082      	sub	sp, #8
    34e8:	af00      	add	r7, sp, #0
    34ea:	0002      	movs	r2, r0
    34ec:	1dfb      	adds	r3, r7, #7
    34ee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    34f0:	1dfb      	adds	r3, r7, #7
    34f2:	781b      	ldrb	r3, [r3, #0]
    34f4:	0018      	movs	r0, r3
    34f6:	4b03      	ldr	r3, [pc, #12]	; (3504 <port_get_group_from_gpio_pin+0x20>)
    34f8:	4798      	blx	r3
    34fa:	0003      	movs	r3, r0
}
    34fc:	0018      	movs	r0, r3
    34fe:	46bd      	mov	sp, r7
    3500:	b002      	add	sp, #8
    3502:	bd80      	pop	{r7, pc}
    3504:	00003485 	.word	0x00003485

00003508 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3508:	b580      	push	{r7, lr}
    350a:	b082      	sub	sp, #8
    350c:	af00      	add	r7, sp, #0
    350e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3510:	687b      	ldr	r3, [r7, #4]
    3512:	2200      	movs	r2, #0
    3514:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3516:	687b      	ldr	r3, [r7, #4]
    3518:	2201      	movs	r2, #1
    351a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    351c:	687b      	ldr	r3, [r7, #4]
    351e:	2200      	movs	r2, #0
    3520:	709a      	strb	r2, [r3, #2]
}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	46bd      	mov	sp, r7
    3526:	b002      	add	sp, #8
    3528:	bd80      	pop	{r7, pc}
    352a:	46c0      	nop			; (mov r8, r8)

0000352c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    352c:	b580      	push	{r7, lr}
    352e:	b084      	sub	sp, #16
    3530:	af00      	add	r7, sp, #0
    3532:	0002      	movs	r2, r0
    3534:	1dfb      	adds	r3, r7, #7
    3536:	701a      	strb	r2, [r3, #0]
    3538:	1dbb      	adds	r3, r7, #6
    353a:	1c0a      	adds	r2, r1, #0
    353c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    353e:	1dfb      	adds	r3, r7, #7
    3540:	781b      	ldrb	r3, [r3, #0]
    3542:	0018      	movs	r0, r3
    3544:	4b0d      	ldr	r3, [pc, #52]	; (357c <port_pin_set_output_level+0x50>)
    3546:	4798      	blx	r3
    3548:	0003      	movs	r3, r0
    354a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    354c:	1dfb      	adds	r3, r7, #7
    354e:	781b      	ldrb	r3, [r3, #0]
    3550:	221f      	movs	r2, #31
    3552:	4013      	ands	r3, r2
    3554:	2201      	movs	r2, #1
    3556:	409a      	lsls	r2, r3
    3558:	0013      	movs	r3, r2
    355a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    355c:	1dbb      	adds	r3, r7, #6
    355e:	781b      	ldrb	r3, [r3, #0]
    3560:	2b00      	cmp	r3, #0
    3562:	d003      	beq.n	356c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3564:	68fb      	ldr	r3, [r7, #12]
    3566:	68ba      	ldr	r2, [r7, #8]
    3568:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    356a:	e002      	b.n	3572 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    356c:	68fb      	ldr	r3, [r7, #12]
    356e:	68ba      	ldr	r2, [r7, #8]
    3570:	615a      	str	r2, [r3, #20]
	}
}
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	46bd      	mov	sp, r7
    3576:	b004      	add	sp, #16
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	000034e5 	.word	0x000034e5

00003580 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3580:	b580      	push	{r7, lr}
    3582:	b082      	sub	sp, #8
    3584:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    3586:	1d3b      	adds	r3, r7, #4
    3588:	0018      	movs	r0, r3
    358a:	4b0e      	ldr	r3, [pc, #56]	; (35c4 <system_board_init+0x44>)
    358c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    358e:	1d3b      	adds	r3, r7, #4
    3590:	2201      	movs	r2, #1
    3592:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3594:	1d3b      	adds	r3, r7, #4
    3596:	0019      	movs	r1, r3
    3598:	2017      	movs	r0, #23
    359a:	4b0b      	ldr	r3, [pc, #44]	; (35c8 <system_board_init+0x48>)
    359c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    359e:	2101      	movs	r1, #1
    35a0:	2017      	movs	r0, #23
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <system_board_init+0x4c>)
    35a4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    35a6:	1d3b      	adds	r3, r7, #4
    35a8:	2200      	movs	r2, #0
    35aa:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    35ac:	1d3b      	adds	r3, r7, #4
    35ae:	2201      	movs	r2, #1
    35b0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    35b2:	1d3b      	adds	r3, r7, #4
    35b4:	0019      	movs	r1, r3
    35b6:	2037      	movs	r0, #55	; 0x37
    35b8:	4b03      	ldr	r3, [pc, #12]	; (35c8 <system_board_init+0x48>)
    35ba:	4798      	blx	r3
}
    35bc:	46c0      	nop			; (mov r8, r8)
    35be:	46bd      	mov	sp, r7
    35c0:	b002      	add	sp, #8
    35c2:	bd80      	pop	{r7, pc}
    35c4:	00003509 	.word	0x00003509
    35c8:	00003e15 	.word	0x00003e15
    35cc:	0000352d 	.word	0x0000352d

000035d0 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
    35d0:	b590      	push	{r4, r7, lr}
    35d2:	b08b      	sub	sp, #44	; 0x2c
    35d4:	af00      	add	r7, sp, #0
    35d6:	0004      	movs	r4, r0
    35d8:	0008      	movs	r0, r1
    35da:	0011      	movs	r1, r2
    35dc:	1dfb      	adds	r3, r7, #7
    35de:	1c22      	adds	r2, r4, #0
    35e0:	701a      	strb	r2, [r3, #0]
    35e2:	1dbb      	adds	r3, r7, #6
    35e4:	1c02      	adds	r2, r0, #0
    35e6:	701a      	strb	r2, [r3, #0]
    35e8:	1d7b      	adds	r3, r7, #5
    35ea:	1c0a      	adds	r2, r1, #0
    35ec:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
    35ee:	1dfa      	adds	r2, r7, #7
    35f0:	1dbb      	adds	r3, r7, #6
    35f2:	7812      	ldrb	r2, [r2, #0]
    35f4:	781b      	ldrb	r3, [r3, #0]
    35f6:	4313      	orrs	r3, r2
    35f8:	b2da      	uxtb	r2, r3
    35fa:	2324      	movs	r3, #36	; 0x24
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
    3600:	2324      	movs	r3, #36	; 0x24
    3602:	18fb      	adds	r3, r7, r3
    3604:	2200      	movs	r2, #0
    3606:	705a      	strb	r2, [r3, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
    3608:	2318      	movs	r3, #24
    360a:	18fb      	adds	r3, r7, r3
    360c:	224f      	movs	r2, #79	; 0x4f
    360e:	801a      	strh	r2, [r3, #0]
    3610:	2318      	movs	r3, #24
    3612:	18fb      	adds	r3, r7, r3
    3614:	2201      	movs	r2, #1
    3616:	805a      	strh	r2, [r3, #2]
    3618:	2318      	movs	r3, #24
    361a:	18fb      	adds	r3, r7, r3
    361c:	2224      	movs	r2, #36	; 0x24
    361e:	18ba      	adds	r2, r7, r2
    3620:	605a      	str	r2, [r3, #4]
    3622:	2318      	movs	r3, #24
    3624:	18fb      	adds	r3, r7, r3
    3626:	2200      	movs	r2, #0
    3628:	721a      	strb	r2, [r3, #8]
    362a:	2318      	movs	r3, #24
    362c:	18fb      	adds	r3, r7, r3
    362e:	2200      	movs	r2, #0
    3630:	725a      	strb	r2, [r3, #9]
    3632:	2318      	movs	r3, #24
    3634:	18fb      	adds	r3, r7, r3
    3636:	2200      	movs	r2, #0
    3638:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
    363a:	230c      	movs	r3, #12
    363c:	18fb      	adds	r3, r7, r3
    363e:	224f      	movs	r2, #79	; 0x4f
    3640:	801a      	strh	r2, [r3, #0]
    3642:	1d7b      	adds	r3, r7, #5
    3644:	781b      	ldrb	r3, [r3, #0]
    3646:	b29a      	uxth	r2, r3
    3648:	230c      	movs	r3, #12
    364a:	18fb      	adds	r3, r7, r3
    364c:	805a      	strh	r2, [r3, #2]
    364e:	230c      	movs	r3, #12
    3650:	18fb      	adds	r3, r7, r3
    3652:	2224      	movs	r2, #36	; 0x24
    3654:	18ba      	adds	r2, r7, r2
    3656:	605a      	str	r2, [r3, #4]
    3658:	230c      	movs	r3, #12
    365a:	18fb      	adds	r3, r7, r3
    365c:	2200      	movs	r2, #0
    365e:	721a      	strb	r2, [r3, #8]
    3660:	230c      	movs	r3, #12
    3662:	18fb      	adds	r3, r7, r3
    3664:	2200      	movs	r2, #0
    3666:	725a      	strb	r2, [r3, #9]
    3668:	230c      	movs	r3, #12
    366a:	18fb      	adds	r3, r7, r3
    366c:	2200      	movs	r2, #0
    366e:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
    3670:	2318      	movs	r3, #24
    3672:	18fa      	adds	r2, r7, r3
    3674:	4b0d      	ldr	r3, [pc, #52]	; (36ac <at30tse_read_register+0xdc>)
    3676:	0011      	movs	r1, r2
    3678:	0018      	movs	r0, r3
    367a:	4b0d      	ldr	r3, [pc, #52]	; (36b0 <at30tse_read_register+0xe0>)
    367c:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
    367e:	230c      	movs	r3, #12
    3680:	18fa      	adds	r2, r7, r3
    3682:	4b0a      	ldr	r3, [pc, #40]	; (36ac <at30tse_read_register+0xdc>)
    3684:	0011      	movs	r1, r2
    3686:	0018      	movs	r0, r3
    3688:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <at30tse_read_register+0xe4>)
    368a:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
    368c:	2324      	movs	r3, #36	; 0x24
    368e:	18fb      	adds	r3, r7, r3
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	021b      	lsls	r3, r3, #8
    3694:	b21a      	sxth	r2, r3
    3696:	2324      	movs	r3, #36	; 0x24
    3698:	18fb      	adds	r3, r7, r3
    369a:	785b      	ldrb	r3, [r3, #1]
    369c:	b21b      	sxth	r3, r3
    369e:	4313      	orrs	r3, r2
    36a0:	b21b      	sxth	r3, r3
    36a2:	b29b      	uxth	r3, r3
}
    36a4:	0018      	movs	r0, r3
    36a6:	46bd      	mov	sp, r7
    36a8:	b00b      	add	sp, #44	; 0x2c
    36aa:	bd90      	pop	{r4, r7, pc}
    36ac:	20004540 	.word	0x20004540
    36b0:	000044c1 	.word	0x000044c1
    36b4:	00004309 	.word	0x00004309

000036b8 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
    36b8:	b590      	push	{r4, r7, lr}
    36ba:	b087      	sub	sp, #28
    36bc:	af00      	add	r7, sp, #0
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
    36be:	2316      	movs	r3, #22
    36c0:	18fc      	adds	r4, r7, r3
    36c2:	2202      	movs	r2, #2
    36c4:	2100      	movs	r1, #0
    36c6:	2000      	movs	r0, #0
    36c8:	4b4d      	ldr	r3, [pc, #308]	; (3800 <at30tse_read_temperature+0x148>)
    36ca:	4798      	blx	r3
    36cc:	0003      	movs	r3, r0
    36ce:	8023      	strh	r3, [r4, #0]
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
    36d0:	2300      	movs	r3, #0
    36d2:	2400      	movs	r4, #0
    36d4:	60bb      	str	r3, [r7, #8]
    36d6:	60fc      	str	r4, [r7, #12]
	int8_t sign = 1;
    36d8:	1dfb      	adds	r3, r7, #7
    36da:	2201      	movs	r2, #1
    36dc:	701a      	strb	r2, [r3, #0]

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
    36de:	2316      	movs	r3, #22
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	2200      	movs	r2, #0
    36e4:	5e9b      	ldrsh	r3, [r3, r2]
    36e6:	2b00      	cmp	r3, #0
    36e8:	da0d      	bge.n	3706 <at30tse_read_temperature+0x4e>
		sign *= -1;
    36ea:	1dfb      	adds	r3, r7, #7
    36ec:	781b      	ldrb	r3, [r3, #0]
    36ee:	425b      	negs	r3, r3
    36f0:	b2da      	uxtb	r2, r3
    36f2:	1dfb      	adds	r3, r7, #7
    36f4:	701a      	strb	r2, [r3, #0]
		data &= ~(1 << 15);
    36f6:	2316      	movs	r3, #22
    36f8:	18fb      	adds	r3, r7, r3
    36fa:	2216      	movs	r2, #22
    36fc:	18ba      	adds	r2, r7, r2
    36fe:	8812      	ldrh	r2, [r2, #0]
    3700:	0452      	lsls	r2, r2, #17
    3702:	0c52      	lsrs	r2, r2, #17
    3704:	801a      	strh	r2, [r3, #0]
	}

	/* Convert to temperature  */
	switch (resolution){
    3706:	4b3f      	ldr	r3, [pc, #252]	; (3804 <at30tse_read_temperature+0x14c>)
    3708:	781b      	ldrb	r3, [r3, #0]
    370a:	2b01      	cmp	r3, #1
    370c:	d022      	beq.n	3754 <at30tse_read_temperature+0x9c>
    370e:	dc02      	bgt.n	3716 <at30tse_read_temperature+0x5e>
    3710:	2b00      	cmp	r3, #0
    3712:	d005      	beq.n	3720 <at30tse_read_temperature+0x68>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
    3714:	e06d      	b.n	37f2 <at30tse_read_temperature+0x13a>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
    3716:	2b02      	cmp	r3, #2
    3718:	d036      	beq.n	3788 <at30tse_read_temperature+0xd0>
    371a:	2b03      	cmp	r3, #3
    371c:	d04f      	beq.n	37be <at30tse_read_temperature+0x106>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
    371e:	e068      	b.n	37f2 <at30tse_read_temperature+0x13a>
	}

	/* Convert to temperature  */
	switch (resolution){
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
    3720:	2316      	movs	r3, #22
    3722:	18fb      	adds	r3, r7, r3
    3724:	2216      	movs	r2, #22
    3726:	18ba      	adds	r2, r7, r2
    3728:	8812      	ldrh	r2, [r2, #0]
    372a:	09d2      	lsrs	r2, r2, #7
    372c:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.5;
    372e:	2316      	movs	r3, #22
    3730:	18fb      	adds	r3, r7, r3
    3732:	881b      	ldrh	r3, [r3, #0]
    3734:	1dfa      	adds	r2, r7, #7
    3736:	7812      	ldrb	r2, [r2, #0]
    3738:	b252      	sxtb	r2, r2
    373a:	435a      	muls	r2, r3
    373c:	4b32      	ldr	r3, [pc, #200]	; (3808 <at30tse_read_temperature+0x150>)
    373e:	0010      	movs	r0, r2
    3740:	4798      	blx	r3
    3742:	4c32      	ldr	r4, [pc, #200]	; (380c <at30tse_read_temperature+0x154>)
    3744:	2200      	movs	r2, #0
    3746:	4b32      	ldr	r3, [pc, #200]	; (3810 <at30tse_read_temperature+0x158>)
    3748:	47a0      	blx	r4
    374a:	0003      	movs	r3, r0
    374c:	000c      	movs	r4, r1
    374e:	60bb      	str	r3, [r7, #8]
    3750:	60fc      	str	r4, [r7, #12]
			break;
    3752:	e04e      	b.n	37f2 <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
    3754:	2316      	movs	r3, #22
    3756:	18fb      	adds	r3, r7, r3
    3758:	2216      	movs	r2, #22
    375a:	18ba      	adds	r2, r7, r2
    375c:	8812      	ldrh	r2, [r2, #0]
    375e:	0992      	lsrs	r2, r2, #6
    3760:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.25;
    3762:	2316      	movs	r3, #22
    3764:	18fb      	adds	r3, r7, r3
    3766:	881b      	ldrh	r3, [r3, #0]
    3768:	1dfa      	adds	r2, r7, #7
    376a:	7812      	ldrb	r2, [r2, #0]
    376c:	b252      	sxtb	r2, r2
    376e:	435a      	muls	r2, r3
    3770:	4b25      	ldr	r3, [pc, #148]	; (3808 <at30tse_read_temperature+0x150>)
    3772:	0010      	movs	r0, r2
    3774:	4798      	blx	r3
    3776:	4c25      	ldr	r4, [pc, #148]	; (380c <at30tse_read_temperature+0x154>)
    3778:	2200      	movs	r2, #0
    377a:	4b26      	ldr	r3, [pc, #152]	; (3814 <at30tse_read_temperature+0x15c>)
    377c:	47a0      	blx	r4
    377e:	0003      	movs	r3, r0
    3780:	000c      	movs	r4, r1
    3782:	60bb      	str	r3, [r7, #8]
    3784:	60fc      	str	r4, [r7, #12]
			break;
    3786:	e034      	b.n	37f2 <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
    3788:	2316      	movs	r3, #22
    378a:	18fb      	adds	r3, r7, r3
    378c:	2216      	movs	r2, #22
    378e:	18ba      	adds	r2, r7, r2
    3790:	8812      	ldrh	r2, [r2, #0]
    3792:	0952      	lsrs	r2, r2, #5
    3794:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.125;
    3796:	2316      	movs	r3, #22
    3798:	18fb      	adds	r3, r7, r3
    379a:	881b      	ldrh	r3, [r3, #0]
    379c:	1dfa      	adds	r2, r7, #7
    379e:	7812      	ldrb	r2, [r2, #0]
    37a0:	b252      	sxtb	r2, r2
    37a2:	435a      	muls	r2, r3
    37a4:	4b18      	ldr	r3, [pc, #96]	; (3808 <at30tse_read_temperature+0x150>)
    37a6:	0010      	movs	r0, r2
    37a8:	4798      	blx	r3
    37aa:	4c18      	ldr	r4, [pc, #96]	; (380c <at30tse_read_temperature+0x154>)
    37ac:	2200      	movs	r2, #0
    37ae:	23ff      	movs	r3, #255	; 0xff
    37b0:	059b      	lsls	r3, r3, #22
    37b2:	47a0      	blx	r4
    37b4:	0003      	movs	r3, r0
    37b6:	000c      	movs	r4, r1
    37b8:	60bb      	str	r3, [r7, #8]
    37ba:	60fc      	str	r4, [r7, #12]
			break;
    37bc:	e019      	b.n	37f2 <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
    37be:	2316      	movs	r3, #22
    37c0:	18fb      	adds	r3, r7, r3
    37c2:	2216      	movs	r2, #22
    37c4:	18ba      	adds	r2, r7, r2
    37c6:	8812      	ldrh	r2, [r2, #0]
    37c8:	0912      	lsrs	r2, r2, #4
    37ca:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.0625;
    37cc:	2316      	movs	r3, #22
    37ce:	18fb      	adds	r3, r7, r3
    37d0:	881b      	ldrh	r3, [r3, #0]
    37d2:	1dfa      	adds	r2, r7, #7
    37d4:	7812      	ldrb	r2, [r2, #0]
    37d6:	b252      	sxtb	r2, r2
    37d8:	435a      	muls	r2, r3
    37da:	4b0b      	ldr	r3, [pc, #44]	; (3808 <at30tse_read_temperature+0x150>)
    37dc:	0010      	movs	r0, r2
    37de:	4798      	blx	r3
    37e0:	4c0a      	ldr	r4, [pc, #40]	; (380c <at30tse_read_temperature+0x154>)
    37e2:	2200      	movs	r2, #0
    37e4:	4b0c      	ldr	r3, [pc, #48]	; (3818 <at30tse_read_temperature+0x160>)
    37e6:	47a0      	blx	r4
    37e8:	0003      	movs	r3, r0
    37ea:	000c      	movs	r4, r1
    37ec:	60bb      	str	r3, [r7, #8]
    37ee:	60fc      	str	r4, [r7, #12]
			break;
    37f0:	46c0      	nop			; (mov r8, r8)
		default:
			break;
	}
	return temperature;
    37f2:	68bb      	ldr	r3, [r7, #8]
    37f4:	68fc      	ldr	r4, [r7, #12]
}
    37f6:	0018      	movs	r0, r3
    37f8:	0021      	movs	r1, r4
    37fa:	46bd      	mov	sp, r7
    37fc:	b007      	add	sp, #28
    37fe:	bd90      	pop	{r4, r7, pc}
    3800:	000035d1 	.word	0x000035d1
    3804:	200000cd 	.word	0x200000cd
    3808:	0000a0dd 	.word	0x0000a0dd
    380c:	00009b7d 	.word	0x00009b7d
    3810:	3fe00000 	.word	0x3fe00000
    3814:	3fd00000 	.word	0x3fd00000
    3818:	3fb00000 	.word	0x3fb00000

0000381c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    381c:	b580      	push	{r7, lr}
    381e:	b084      	sub	sp, #16
    3820:	af00      	add	r7, sp, #0
    3822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3824:	687b      	ldr	r3, [r7, #4]
    3826:	681b      	ldr	r3, [r3, #0]
    3828:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    382a:	68fb      	ldr	r3, [r7, #12]
    382c:	7e5b      	ldrb	r3, [r3, #25]
    382e:	b2db      	uxtb	r3, r3
    3830:	b25b      	sxtb	r3, r3
    3832:	2b00      	cmp	r3, #0
    3834:	da01      	bge.n	383a <adc_is_syncing+0x1e>
		return true;
    3836:	2301      	movs	r3, #1
    3838:	e000      	b.n	383c <adc_is_syncing+0x20>
	}

	return false;
    383a:	2300      	movs	r3, #0
}
    383c:	0018      	movs	r0, r3
    383e:	46bd      	mov	sp, r7
    3840:	b004      	add	sp, #16
    3842:	bd80      	pop	{r7, pc}

00003844 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3844:	b580      	push	{r7, lr}
    3846:	b084      	sub	sp, #16
    3848:	af00      	add	r7, sp, #0
    384a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    384c:	687b      	ldr	r3, [r7, #4]
    384e:	681b      	ldr	r3, [r3, #0]
    3850:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	687b      	ldr	r3, [r7, #4]
    3856:	0018      	movs	r0, r3
    3858:	4b0b      	ldr	r3, [pc, #44]	; (3888 <adc_start_conversion+0x44>)
    385a:	4798      	blx	r3
    385c:	1e03      	subs	r3, r0, #0
    385e:	d1f9      	bne.n	3854 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3860:	68fb      	ldr	r3, [r7, #12]
    3862:	7b1b      	ldrb	r3, [r3, #12]
    3864:	b2db      	uxtb	r3, r3
    3866:	2202      	movs	r2, #2
    3868:	4313      	orrs	r3, r2
    386a:	b2da      	uxtb	r2, r3
    386c:	68fb      	ldr	r3, [r7, #12]
    386e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3870:	46c0      	nop			; (mov r8, r8)
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	0018      	movs	r0, r3
    3876:	4b04      	ldr	r3, [pc, #16]	; (3888 <adc_start_conversion+0x44>)
    3878:	4798      	blx	r3
    387a:	1e03      	subs	r3, r0, #0
    387c:	d1f9      	bne.n	3872 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	46bd      	mov	sp, r7
    3882:	b004      	add	sp, #16
    3884:	bd80      	pop	{r7, pc}
    3886:	46c0      	nop			; (mov r8, r8)
    3888:	0000381d 	.word	0x0000381d

0000388c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    388c:	b580      	push	{r7, lr}
    388e:	b084      	sub	sp, #16
    3890:	af00      	add	r7, sp, #0
    3892:	6078      	str	r0, [r7, #4]
    3894:	000a      	movs	r2, r1
    3896:	1cfb      	adds	r3, r7, #3
    3898:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    389a:	687b      	ldr	r3, [r7, #4]
    389c:	681b      	ldr	r3, [r3, #0]
    389e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    38a0:	68fb      	ldr	r3, [r7, #12]
    38a2:	1cfa      	adds	r2, r7, #3
    38a4:	7812      	ldrb	r2, [r2, #0]
    38a6:	759a      	strb	r2, [r3, #22]
}
    38a8:	46c0      	nop			; (mov r8, r8)
    38aa:	46bd      	mov	sp, r7
    38ac:	b004      	add	sp, #16
    38ae:	bd80      	pop	{r7, pc}

000038b0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    38b0:	b580      	push	{r7, lr}
    38b2:	b084      	sub	sp, #16
    38b4:	af00      	add	r7, sp, #0
    38b6:	0002      	movs	r2, r0
    38b8:	1dfb      	adds	r3, r7, #7
    38ba:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    38bc:	1dfb      	adds	r3, r7, #7
    38be:	781a      	ldrb	r2, [r3, #0]
    38c0:	4b44      	ldr	r3, [pc, #272]	; (39d4 <_adc_interrupt_handler+0x124>)
    38c2:	0092      	lsls	r2, r2, #2
    38c4:	58d3      	ldr	r3, [r2, r3]
    38c6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    38c8:	68fb      	ldr	r3, [r7, #12]
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	7e1b      	ldrb	r3, [r3, #24]
    38ce:	b2db      	uxtb	r3, r3
    38d0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    38d2:	68bb      	ldr	r3, [r7, #8]
    38d4:	2201      	movs	r2, #1
    38d6:	4013      	ands	r3, r2
    38d8:	d045      	beq.n	3966 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    38da:	68fb      	ldr	r3, [r7, #12]
    38dc:	7edb      	ldrb	r3, [r3, #27]
    38de:	001a      	movs	r2, r3
    38e0:	2301      	movs	r3, #1
    38e2:	4013      	ands	r3, r2
    38e4:	d03f      	beq.n	3966 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    38e6:	68fb      	ldr	r3, [r7, #12]
    38e8:	7e9b      	ldrb	r3, [r3, #26]
    38ea:	001a      	movs	r2, r3
    38ec:	2301      	movs	r3, #1
    38ee:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    38f0:	d039      	beq.n	3966 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    38f2:	68fb      	ldr	r3, [r7, #12]
    38f4:	681b      	ldr	r3, [r3, #0]
    38f6:	2201      	movs	r2, #1
    38f8:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    38fa:	46c0      	nop			; (mov r8, r8)
    38fc:	68fb      	ldr	r3, [r7, #12]
    38fe:	0018      	movs	r0, r3
    3900:	4b35      	ldr	r3, [pc, #212]	; (39d8 <_adc_interrupt_handler+0x128>)
    3902:	4798      	blx	r3
    3904:	1e03      	subs	r3, r0, #0
    3906:	d1f9      	bne.n	38fc <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3908:	68fb      	ldr	r3, [r7, #12]
    390a:	695b      	ldr	r3, [r3, #20]
    390c:	1c99      	adds	r1, r3, #2
    390e:	68fa      	ldr	r2, [r7, #12]
    3910:	6151      	str	r1, [r2, #20]
    3912:	68fa      	ldr	r2, [r7, #12]
    3914:	6812      	ldr	r2, [r2, #0]
    3916:	8b52      	ldrh	r2, [r2, #26]
    3918:	b292      	uxth	r2, r2
    391a:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    391c:	68fb      	ldr	r3, [r7, #12]
    391e:	8b1b      	ldrh	r3, [r3, #24]
    3920:	b29b      	uxth	r3, r3
    3922:	3b01      	subs	r3, #1
    3924:	b29b      	uxth	r3, r3
    3926:	68fa      	ldr	r2, [r7, #12]
    3928:	1c19      	adds	r1, r3, #0
    392a:	8311      	strh	r1, [r2, #24]
    392c:	2b00      	cmp	r3, #0
    392e:	d008      	beq.n	3942 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    3930:	68fb      	ldr	r3, [r7, #12]
    3932:	7f5b      	ldrb	r3, [r3, #29]
    3934:	2b00      	cmp	r3, #0
    3936:	d016      	beq.n	3966 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    3938:	68fb      	ldr	r3, [r7, #12]
    393a:	0018      	movs	r0, r3
    393c:	4b27      	ldr	r3, [pc, #156]	; (39dc <_adc_interrupt_handler+0x12c>)
    393e:	4798      	blx	r3
    3940:	e011      	b.n	3966 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3942:	68fb      	ldr	r3, [r7, #12]
    3944:	7f1b      	ldrb	r3, [r3, #28]
    3946:	b2db      	uxtb	r3, r3
    3948:	2b05      	cmp	r3, #5
    394a:	d10c      	bne.n	3966 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    394c:	68fb      	ldr	r3, [r7, #12]
    394e:	2200      	movs	r2, #0
    3950:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	2101      	movs	r1, #1
    3956:	0018      	movs	r0, r3
    3958:	4b21      	ldr	r3, [pc, #132]	; (39e0 <_adc_interrupt_handler+0x130>)
    395a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    395c:	68fb      	ldr	r3, [r7, #12]
    395e:	689b      	ldr	r3, [r3, #8]
    3960:	68fa      	ldr	r2, [r7, #12]
    3962:	0010      	movs	r0, r2
    3964:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    3966:	68bb      	ldr	r3, [r7, #8]
    3968:	2204      	movs	r2, #4
    396a:	4013      	ands	r3, r2
    396c:	d014      	beq.n	3998 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	2204      	movs	r2, #4
    3974:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3976:	68fb      	ldr	r3, [r7, #12]
    3978:	7edb      	ldrb	r3, [r3, #27]
    397a:	001a      	movs	r2, r3
    397c:	2302      	movs	r3, #2
    397e:	4013      	ands	r3, r2
    3980:	d00a      	beq.n	3998 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3982:	68fb      	ldr	r3, [r7, #12]
    3984:	7e9b      	ldrb	r3, [r3, #26]
    3986:	001a      	movs	r2, r3
    3988:	2302      	movs	r3, #2
    398a:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    398c:	d004      	beq.n	3998 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    398e:	68fb      	ldr	r3, [r7, #12]
    3990:	68db      	ldr	r3, [r3, #12]
    3992:	68fa      	ldr	r2, [r7, #12]
    3994:	0010      	movs	r0, r2
    3996:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3998:	68bb      	ldr	r3, [r7, #8]
    399a:	2202      	movs	r2, #2
    399c:	4013      	ands	r3, r2
    399e:	d014      	beq.n	39ca <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	681b      	ldr	r3, [r3, #0]
    39a4:	2202      	movs	r2, #2
    39a6:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    39a8:	68fb      	ldr	r3, [r7, #12]
    39aa:	7edb      	ldrb	r3, [r3, #27]
    39ac:	001a      	movs	r2, r3
    39ae:	2304      	movs	r3, #4
    39b0:	4013      	ands	r3, r2
    39b2:	d00a      	beq.n	39ca <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    39b4:	68fb      	ldr	r3, [r7, #12]
    39b6:	7e9b      	ldrb	r3, [r3, #26]
    39b8:	001a      	movs	r2, r3
    39ba:	2304      	movs	r3, #4
    39bc:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    39be:	d004      	beq.n	39ca <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    39c0:	68fb      	ldr	r3, [r7, #12]
    39c2:	691b      	ldr	r3, [r3, #16]
    39c4:	68fa      	ldr	r2, [r7, #12]
    39c6:	0010      	movs	r0, r2
    39c8:	4798      	blx	r3
		}
	}
}
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	46bd      	mov	sp, r7
    39ce:	b004      	add	sp, #16
    39d0:	bd80      	pop	{r7, pc}
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	20004568 	.word	0x20004568
    39d8:	0000381d 	.word	0x0000381d
    39dc:	00003845 	.word	0x00003845
    39e0:	0000388d 	.word	0x0000388d

000039e4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    39e4:	b580      	push	{r7, lr}
    39e6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    39e8:	2000      	movs	r0, #0
    39ea:	4b02      	ldr	r3, [pc, #8]	; (39f4 <ADC_Handler+0x10>)
    39ec:	4798      	blx	r3
}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	46bd      	mov	sp, r7
    39f2:	bd80      	pop	{r7, pc}
    39f4:	000038b1 	.word	0x000038b1

000039f8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b084      	sub	sp, #16
    39fc:	af00      	add	r7, sp, #0
    39fe:	0002      	movs	r2, r0
    3a00:	1dfb      	adds	r3, r7, #7
    3a02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    3a04:	230f      	movs	r3, #15
    3a06:	18fb      	adds	r3, r7, r3
    3a08:	1dfa      	adds	r2, r7, #7
    3a0a:	7812      	ldrb	r2, [r2, #0]
    3a0c:	0952      	lsrs	r2, r2, #5
    3a0e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    3a10:	230f      	movs	r3, #15
    3a12:	18fb      	adds	r3, r7, r3
    3a14:	781b      	ldrb	r3, [r3, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d10c      	bne.n	3a34 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3a1a:	4b09      	ldr	r3, [pc, #36]	; (3a40 <_extint_get_eic_from_channel+0x48>)
    3a1c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3a1e:	230f      	movs	r3, #15
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	781b      	ldrb	r3, [r3, #0]
    3a24:	009b      	lsls	r3, r3, #2
    3a26:	2210      	movs	r2, #16
    3a28:	4694      	mov	ip, r2
    3a2a:	44bc      	add	ip, r7
    3a2c:	4463      	add	r3, ip
    3a2e:	3b08      	subs	r3, #8
    3a30:	681b      	ldr	r3, [r3, #0]
    3a32:	e000      	b.n	3a36 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3a34:	2300      	movs	r3, #0
	}
}
    3a36:	0018      	movs	r0, r3
    3a38:	46bd      	mov	sp, r7
    3a3a:	b004      	add	sp, #16
    3a3c:	bd80      	pop	{r7, pc}
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	40001800 	.word	0x40001800

00003a44 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3a44:	b580      	push	{r7, lr}
    3a46:	b084      	sub	sp, #16
    3a48:	af00      	add	r7, sp, #0
    3a4a:	0002      	movs	r2, r0
    3a4c:	1dfb      	adds	r3, r7, #7
    3a4e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3a50:	1dfb      	adds	r3, r7, #7
    3a52:	781b      	ldrb	r3, [r3, #0]
    3a54:	0018      	movs	r0, r3
    3a56:	4b0b      	ldr	r3, [pc, #44]	; (3a84 <extint_chan_is_detected+0x40>)
    3a58:	4798      	blx	r3
    3a5a:	0003      	movs	r3, r0
    3a5c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3a5e:	1dfb      	adds	r3, r7, #7
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	221f      	movs	r2, #31
    3a64:	4013      	ands	r3, r2
    3a66:	2201      	movs	r2, #1
    3a68:	409a      	lsls	r2, r3
    3a6a:	0013      	movs	r3, r2
    3a6c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3a6e:	68fb      	ldr	r3, [r7, #12]
    3a70:	691b      	ldr	r3, [r3, #16]
    3a72:	68ba      	ldr	r2, [r7, #8]
    3a74:	4013      	ands	r3, r2
    3a76:	1e5a      	subs	r2, r3, #1
    3a78:	4193      	sbcs	r3, r2
    3a7a:	b2db      	uxtb	r3, r3
}
    3a7c:	0018      	movs	r0, r3
    3a7e:	46bd      	mov	sp, r7
    3a80:	b004      	add	sp, #16
    3a82:	bd80      	pop	{r7, pc}
    3a84:	000039f9 	.word	0x000039f9

00003a88 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    3a88:	b580      	push	{r7, lr}
    3a8a:	b084      	sub	sp, #16
    3a8c:	af00      	add	r7, sp, #0
    3a8e:	0002      	movs	r2, r0
    3a90:	1dfb      	adds	r3, r7, #7
    3a92:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3a94:	1dfb      	adds	r3, r7, #7
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	0018      	movs	r0, r3
    3a9a:	4b09      	ldr	r3, [pc, #36]	; (3ac0 <extint_chan_clear_detected+0x38>)
    3a9c:	4798      	blx	r3
    3a9e:	0003      	movs	r3, r0
    3aa0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3aa2:	1dfb      	adds	r3, r7, #7
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	221f      	movs	r2, #31
    3aa8:	4013      	ands	r3, r2
    3aaa:	2201      	movs	r2, #1
    3aac:	409a      	lsls	r2, r3
    3aae:	0013      	movs	r3, r2
    3ab0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3ab2:	68fb      	ldr	r3, [r7, #12]
    3ab4:	68ba      	ldr	r2, [r7, #8]
    3ab6:	611a      	str	r2, [r3, #16]
}
    3ab8:	46c0      	nop			; (mov r8, r8)
    3aba:	46bd      	mov	sp, r7
    3abc:	b004      	add	sp, #16
    3abe:	bd80      	pop	{r7, pc}
    3ac0:	000039f9 	.word	0x000039f9

00003ac4 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b084      	sub	sp, #16
    3ac8:	af00      	add	r7, sp, #0
    3aca:	0002      	movs	r2, r0
    3acc:	1dfb      	adds	r3, r7, #7
    3ace:	701a      	strb	r2, [r3, #0]
    3ad0:	1dbb      	adds	r3, r7, #6
    3ad2:	1c0a      	adds	r2, r1, #0
    3ad4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3ad6:	1dbb      	adds	r3, r7, #6
    3ad8:	781b      	ldrb	r3, [r3, #0]
    3ada:	2b00      	cmp	r3, #0
    3adc:	d10e      	bne.n	3afc <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3ade:	1dfb      	adds	r3, r7, #7
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	0018      	movs	r0, r3
    3ae4:	4b08      	ldr	r3, [pc, #32]	; (3b08 <extint_chan_enable_callback+0x44>)
    3ae6:	4798      	blx	r3
    3ae8:	0003      	movs	r3, r0
    3aea:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    3aec:	1dfb      	adds	r3, r7, #7
    3aee:	781b      	ldrb	r3, [r3, #0]
    3af0:	2201      	movs	r2, #1
    3af2:	409a      	lsls	r2, r3
    3af4:	68fb      	ldr	r3, [r7, #12]
    3af6:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3af8:	2300      	movs	r3, #0
    3afa:	e000      	b.n	3afe <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3afc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3afe:	0018      	movs	r0, r3
    3b00:	46bd      	mov	sp, r7
    3b02:	b004      	add	sp, #16
    3b04:	bd80      	pop	{r7, pc}
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	000039f9 	.word	0x000039f9

00003b0c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    3b0c:	b580      	push	{r7, lr}
    3b0e:	b084      	sub	sp, #16
    3b10:	af00      	add	r7, sp, #0
    3b12:	0002      	movs	r2, r0
    3b14:	1dfb      	adds	r3, r7, #7
    3b16:	701a      	strb	r2, [r3, #0]
    3b18:	1dbb      	adds	r3, r7, #6
    3b1a:	1c0a      	adds	r2, r1, #0
    3b1c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3b1e:	1dbb      	adds	r3, r7, #6
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d10e      	bne.n	3b44 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3b26:	1dfb      	adds	r3, r7, #7
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	0018      	movs	r0, r3
    3b2c:	4b08      	ldr	r3, [pc, #32]	; (3b50 <extint_chan_disable_callback+0x44>)
    3b2e:	4798      	blx	r3
    3b30:	0003      	movs	r3, r0
    3b32:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    3b34:	1dfb      	adds	r3, r7, #7
    3b36:	781b      	ldrb	r3, [r3, #0]
    3b38:	2201      	movs	r2, #1
    3b3a:	409a      	lsls	r2, r3
    3b3c:	68fb      	ldr	r3, [r7, #12]
    3b3e:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3b40:	2300      	movs	r3, #0
    3b42:	e000      	b.n	3b46 <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3b44:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3b46:	0018      	movs	r0, r3
    3b48:	46bd      	mov	sp, r7
    3b4a:	b004      	add	sp, #16
    3b4c:	bd80      	pop	{r7, pc}
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	000039f9 	.word	0x000039f9

00003b54 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3b54:	b580      	push	{r7, lr}
    3b56:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3b58:	4b15      	ldr	r3, [pc, #84]	; (3bb0 <EIC_Handler+0x5c>)
    3b5a:	2200      	movs	r2, #0
    3b5c:	701a      	strb	r2, [r3, #0]
    3b5e:	e020      	b.n	3ba2 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    3b60:	4b13      	ldr	r3, [pc, #76]	; (3bb0 <EIC_Handler+0x5c>)
    3b62:	781b      	ldrb	r3, [r3, #0]
    3b64:	0018      	movs	r0, r3
    3b66:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <EIC_Handler+0x60>)
    3b68:	4798      	blx	r3
    3b6a:	1e03      	subs	r3, r0, #0
    3b6c:	d013      	beq.n	3b96 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    3b6e:	4b10      	ldr	r3, [pc, #64]	; (3bb0 <EIC_Handler+0x5c>)
    3b70:	781b      	ldrb	r3, [r3, #0]
    3b72:	0018      	movs	r0, r3
    3b74:	4b10      	ldr	r3, [pc, #64]	; (3bb8 <EIC_Handler+0x64>)
    3b76:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3b78:	4b0d      	ldr	r3, [pc, #52]	; (3bb0 <EIC_Handler+0x5c>)
    3b7a:	781b      	ldrb	r3, [r3, #0]
    3b7c:	001a      	movs	r2, r3
    3b7e:	4b0f      	ldr	r3, [pc, #60]	; (3bbc <EIC_Handler+0x68>)
    3b80:	0092      	lsls	r2, r2, #2
    3b82:	58d3      	ldr	r3, [r2, r3]
    3b84:	2b00      	cmp	r3, #0
    3b86:	d006      	beq.n	3b96 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3b88:	4b09      	ldr	r3, [pc, #36]	; (3bb0 <EIC_Handler+0x5c>)
    3b8a:	781b      	ldrb	r3, [r3, #0]
    3b8c:	001a      	movs	r2, r3
    3b8e:	4b0b      	ldr	r3, [pc, #44]	; (3bbc <EIC_Handler+0x68>)
    3b90:	0092      	lsls	r2, r2, #2
    3b92:	58d3      	ldr	r3, [r2, r3]
    3b94:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3b96:	4b06      	ldr	r3, [pc, #24]	; (3bb0 <EIC_Handler+0x5c>)
    3b98:	781b      	ldrb	r3, [r3, #0]
    3b9a:	3301      	adds	r3, #1
    3b9c:	b2da      	uxtb	r2, r3
    3b9e:	4b04      	ldr	r3, [pc, #16]	; (3bb0 <EIC_Handler+0x5c>)
    3ba0:	701a      	strb	r2, [r3, #0]
    3ba2:	4b03      	ldr	r3, [pc, #12]	; (3bb0 <EIC_Handler+0x5c>)
    3ba4:	781b      	ldrb	r3, [r3, #0]
    3ba6:	2b0f      	cmp	r3, #15
    3ba8:	d9da      	bls.n	3b60 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	46bd      	mov	sp, r7
    3bae:	bd80      	pop	{r7, pc}
    3bb0:	2000456c 	.word	0x2000456c
    3bb4:	00003a45 	.word	0x00003a45
    3bb8:	00003a89 	.word	0x00003a89
    3bbc:	20004570 	.word	0x20004570

00003bc0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3bc0:	b580      	push	{r7, lr}
    3bc2:	b082      	sub	sp, #8
    3bc4:	af00      	add	r7, sp, #0
    3bc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3bc8:	687b      	ldr	r3, [r7, #4]
    3bca:	2200      	movs	r2, #0
    3bcc:	701a      	strb	r2, [r3, #0]
}
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	46bd      	mov	sp, r7
    3bd2:	b002      	add	sp, #8
    3bd4:	bd80      	pop	{r7, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)

00003bd8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	b082      	sub	sp, #8
    3bdc:	af00      	add	r7, sp, #0
    3bde:	0002      	movs	r2, r0
    3be0:	6039      	str	r1, [r7, #0]
    3be2:	1dfb      	adds	r3, r7, #7
    3be4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3be6:	1dfb      	adds	r3, r7, #7
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	2b01      	cmp	r3, #1
    3bec:	d00a      	beq.n	3c04 <system_apb_clock_set_mask+0x2c>
    3bee:	2b02      	cmp	r3, #2
    3bf0:	d00f      	beq.n	3c12 <system_apb_clock_set_mask+0x3a>
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d114      	bne.n	3c20 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3bf6:	4b0e      	ldr	r3, [pc, #56]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3bf8:	4a0d      	ldr	r2, [pc, #52]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3bfa:	6991      	ldr	r1, [r2, #24]
    3bfc:	683a      	ldr	r2, [r7, #0]
    3bfe:	430a      	orrs	r2, r1
    3c00:	619a      	str	r2, [r3, #24]
			break;
    3c02:	e00f      	b.n	3c24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3c04:	4b0a      	ldr	r3, [pc, #40]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3c06:	4a0a      	ldr	r2, [pc, #40]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3c08:	69d1      	ldr	r1, [r2, #28]
    3c0a:	683a      	ldr	r2, [r7, #0]
    3c0c:	430a      	orrs	r2, r1
    3c0e:	61da      	str	r2, [r3, #28]
			break;
    3c10:	e008      	b.n	3c24 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3c12:	4b07      	ldr	r3, [pc, #28]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3c14:	4a06      	ldr	r2, [pc, #24]	; (3c30 <system_apb_clock_set_mask+0x58>)
    3c16:	6a11      	ldr	r1, [r2, #32]
    3c18:	683a      	ldr	r2, [r7, #0]
    3c1a:	430a      	orrs	r2, r1
    3c1c:	621a      	str	r2, [r3, #32]
			break;
    3c1e:	e001      	b.n	3c24 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3c20:	2317      	movs	r3, #23
    3c22:	e000      	b.n	3c26 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3c24:	2300      	movs	r3, #0
}
    3c26:	0018      	movs	r0, r3
    3c28:	46bd      	mov	sp, r7
    3c2a:	b002      	add	sp, #8
    3c2c:	bd80      	pop	{r7, pc}
    3c2e:	46c0      	nop			; (mov r8, r8)
    3c30:	40000400 	.word	0x40000400

00003c34 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3c34:	b580      	push	{r7, lr}
    3c36:	b082      	sub	sp, #8
    3c38:	af00      	add	r7, sp, #0
    3c3a:	0002      	movs	r2, r0
    3c3c:	1dfb      	adds	r3, r7, #7
    3c3e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c40:	4b06      	ldr	r3, [pc, #24]	; (3c5c <system_interrupt_enable+0x28>)
    3c42:	1dfa      	adds	r2, r7, #7
    3c44:	7812      	ldrb	r2, [r2, #0]
    3c46:	0011      	movs	r1, r2
    3c48:	221f      	movs	r2, #31
    3c4a:	400a      	ands	r2, r1
    3c4c:	2101      	movs	r1, #1
    3c4e:	4091      	lsls	r1, r2
    3c50:	000a      	movs	r2, r1
    3c52:	601a      	str	r2, [r3, #0]
}
    3c54:	46c0      	nop			; (mov r8, r8)
    3c56:	46bd      	mov	sp, r7
    3c58:	b002      	add	sp, #8
    3c5a:	bd80      	pop	{r7, pc}
    3c5c:	e000e100 	.word	0xe000e100

00003c60 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3c66:	4b0f      	ldr	r3, [pc, #60]	; (3ca4 <extint_is_syncing+0x44>)
    3c68:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3c6a:	2300      	movs	r3, #0
    3c6c:	607b      	str	r3, [r7, #4]
    3c6e:	e011      	b.n	3c94 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	009b      	lsls	r3, r3, #2
    3c74:	2208      	movs	r2, #8
    3c76:	4694      	mov	ip, r2
    3c78:	44bc      	add	ip, r7
    3c7a:	4463      	add	r3, ip
    3c7c:	3b08      	subs	r3, #8
    3c7e:	681b      	ldr	r3, [r3, #0]
    3c80:	785b      	ldrb	r3, [r3, #1]
    3c82:	b2db      	uxtb	r3, r3
    3c84:	b25b      	sxtb	r3, r3
    3c86:	2b00      	cmp	r3, #0
    3c88:	da01      	bge.n	3c8e <extint_is_syncing+0x2e>
			return true;
    3c8a:	2301      	movs	r3, #1
    3c8c:	e006      	b.n	3c9c <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	3301      	adds	r3, #1
    3c92:	607b      	str	r3, [r7, #4]
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	2b00      	cmp	r3, #0
    3c98:	d0ea      	beq.n	3c70 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    3c9a:	2300      	movs	r3, #0
}
    3c9c:	0018      	movs	r0, r3
    3c9e:	46bd      	mov	sp, r7
    3ca0:	b002      	add	sp, #8
    3ca2:	bd80      	pop	{r7, pc}
    3ca4:	40001800 	.word	0x40001800

00003ca8 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3ca8:	b580      	push	{r7, lr}
    3caa:	b084      	sub	sp, #16
    3cac:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3cae:	4b2d      	ldr	r3, [pc, #180]	; (3d64 <_system_extint_init+0xbc>)
    3cb0:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3cb2:	2140      	movs	r1, #64	; 0x40
    3cb4:	2000      	movs	r0, #0
    3cb6:	4b2c      	ldr	r3, [pc, #176]	; (3d68 <_system_extint_init+0xc0>)
    3cb8:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3cba:	003b      	movs	r3, r7
    3cbc:	0018      	movs	r0, r3
    3cbe:	4b2b      	ldr	r3, [pc, #172]	; (3d6c <_system_extint_init+0xc4>)
    3cc0:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3cc2:	003b      	movs	r3, r7
    3cc4:	2200      	movs	r2, #0
    3cc6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3cc8:	003b      	movs	r3, r7
    3cca:	0019      	movs	r1, r3
    3ccc:	2005      	movs	r0, #5
    3cce:	4b28      	ldr	r3, [pc, #160]	; (3d70 <_system_extint_init+0xc8>)
    3cd0:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3cd2:	2005      	movs	r0, #5
    3cd4:	4b27      	ldr	r3, [pc, #156]	; (3d74 <_system_extint_init+0xcc>)
    3cd6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3cd8:	2300      	movs	r3, #0
    3cda:	60fb      	str	r3, [r7, #12]
    3cdc:	e018      	b.n	3d10 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3cde:	68fb      	ldr	r3, [r7, #12]
    3ce0:	009b      	lsls	r3, r3, #2
    3ce2:	2210      	movs	r2, #16
    3ce4:	4694      	mov	ip, r2
    3ce6:	44bc      	add	ip, r7
    3ce8:	4463      	add	r3, ip
    3cea:	3b0c      	subs	r3, #12
    3cec:	681a      	ldr	r2, [r3, #0]
    3cee:	68fb      	ldr	r3, [r7, #12]
    3cf0:	009b      	lsls	r3, r3, #2
    3cf2:	2110      	movs	r1, #16
    3cf4:	468c      	mov	ip, r1
    3cf6:	44bc      	add	ip, r7
    3cf8:	4463      	add	r3, ip
    3cfa:	3b0c      	subs	r3, #12
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	781b      	ldrb	r3, [r3, #0]
    3d00:	b2db      	uxtb	r3, r3
    3d02:	2101      	movs	r1, #1
    3d04:	430b      	orrs	r3, r1
    3d06:	b2db      	uxtb	r3, r3
    3d08:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3d0a:	68fb      	ldr	r3, [r7, #12]
    3d0c:	3301      	adds	r3, #1
    3d0e:	60fb      	str	r3, [r7, #12]
    3d10:	68fb      	ldr	r3, [r7, #12]
    3d12:	2b00      	cmp	r3, #0
    3d14:	d0e3      	beq.n	3cde <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	4b17      	ldr	r3, [pc, #92]	; (3d78 <_system_extint_init+0xd0>)
    3d1a:	4798      	blx	r3
    3d1c:	1e03      	subs	r3, r0, #0
    3d1e:	d1fb      	bne.n	3d18 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3d20:	230b      	movs	r3, #11
    3d22:	18fb      	adds	r3, r7, r3
    3d24:	2200      	movs	r2, #0
    3d26:	701a      	strb	r2, [r3, #0]
    3d28:	e00d      	b.n	3d46 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    3d2a:	230b      	movs	r3, #11
    3d2c:	18fb      	adds	r3, r7, r3
    3d2e:	781a      	ldrb	r2, [r3, #0]
    3d30:	4b12      	ldr	r3, [pc, #72]	; (3d7c <_system_extint_init+0xd4>)
    3d32:	0092      	lsls	r2, r2, #2
    3d34:	2100      	movs	r1, #0
    3d36:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3d38:	230b      	movs	r3, #11
    3d3a:	18fb      	adds	r3, r7, r3
    3d3c:	781a      	ldrb	r2, [r3, #0]
    3d3e:	230b      	movs	r3, #11
    3d40:	18fb      	adds	r3, r7, r3
    3d42:	3201      	adds	r2, #1
    3d44:	701a      	strb	r2, [r3, #0]
    3d46:	230b      	movs	r3, #11
    3d48:	18fb      	adds	r3, r7, r3
    3d4a:	781b      	ldrb	r3, [r3, #0]
    3d4c:	2b0f      	cmp	r3, #15
    3d4e:	d9ec      	bls.n	3d2a <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3d50:	2004      	movs	r0, #4
    3d52:	4b0b      	ldr	r3, [pc, #44]	; (3d80 <_system_extint_init+0xd8>)
    3d54:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3d56:	4b0b      	ldr	r3, [pc, #44]	; (3d84 <_system_extint_init+0xdc>)
    3d58:	4798      	blx	r3
}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	46bd      	mov	sp, r7
    3d5e:	b004      	add	sp, #16
    3d60:	bd80      	pop	{r7, pc}
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	40001800 	.word	0x40001800
    3d68:	00003bd9 	.word	0x00003bd9
    3d6c:	00003bc1 	.word	0x00003bc1
    3d70:	000061d1 	.word	0x000061d1
    3d74:	00006215 	.word	0x00006215
    3d78:	00003c61 	.word	0x00003c61
    3d7c:	20004570 	.word	0x20004570
    3d80:	00003c35 	.word	0x00003c35
    3d84:	00003d89 	.word	0x00003d89

00003d88 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3d88:	b580      	push	{r7, lr}
    3d8a:	b082      	sub	sp, #8
    3d8c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3d8e:	4b15      	ldr	r3, [pc, #84]	; (3de4 <_extint_enable+0x5c>)
    3d90:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3d92:	2300      	movs	r3, #0
    3d94:	607b      	str	r3, [r7, #4]
    3d96:	e018      	b.n	3dca <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3d98:	687b      	ldr	r3, [r7, #4]
    3d9a:	009b      	lsls	r3, r3, #2
    3d9c:	2208      	movs	r2, #8
    3d9e:	4694      	mov	ip, r2
    3da0:	44bc      	add	ip, r7
    3da2:	4463      	add	r3, ip
    3da4:	3b08      	subs	r3, #8
    3da6:	681a      	ldr	r2, [r3, #0]
    3da8:	687b      	ldr	r3, [r7, #4]
    3daa:	009b      	lsls	r3, r3, #2
    3dac:	2108      	movs	r1, #8
    3dae:	468c      	mov	ip, r1
    3db0:	44bc      	add	ip, r7
    3db2:	4463      	add	r3, ip
    3db4:	3b08      	subs	r3, #8
    3db6:	681b      	ldr	r3, [r3, #0]
    3db8:	781b      	ldrb	r3, [r3, #0]
    3dba:	b2db      	uxtb	r3, r3
    3dbc:	2102      	movs	r1, #2
    3dbe:	430b      	orrs	r3, r1
    3dc0:	b2db      	uxtb	r3, r3
    3dc2:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	3301      	adds	r3, #1
    3dc8:	607b      	str	r3, [r7, #4]
    3dca:	687b      	ldr	r3, [r7, #4]
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d0e3      	beq.n	3d98 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    3dd0:	46c0      	nop			; (mov r8, r8)
    3dd2:	4b05      	ldr	r3, [pc, #20]	; (3de8 <_extint_enable+0x60>)
    3dd4:	4798      	blx	r3
    3dd6:	1e03      	subs	r3, r0, #0
    3dd8:	d1fb      	bne.n	3dd2 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3dda:	46c0      	nop			; (mov r8, r8)
    3ddc:	46bd      	mov	sp, r7
    3dde:	b002      	add	sp, #8
    3de0:	bd80      	pop	{r7, pc}
    3de2:	46c0      	nop			; (mov r8, r8)
    3de4:	40001800 	.word	0x40001800
    3de8:	00003c61 	.word	0x00003c61

00003dec <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3dec:	b580      	push	{r7, lr}
    3dee:	b082      	sub	sp, #8
    3df0:	af00      	add	r7, sp, #0
    3df2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	2280      	movs	r2, #128	; 0x80
    3df8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	2200      	movs	r2, #0
    3dfe:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3e00:	687b      	ldr	r3, [r7, #4]
    3e02:	2201      	movs	r2, #1
    3e04:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3e06:	687b      	ldr	r3, [r7, #4]
    3e08:	2200      	movs	r2, #0
    3e0a:	70da      	strb	r2, [r3, #3]
}
    3e0c:	46c0      	nop			; (mov r8, r8)
    3e0e:	46bd      	mov	sp, r7
    3e10:	b002      	add	sp, #8
    3e12:	bd80      	pop	{r7, pc}

00003e14 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3e14:	b580      	push	{r7, lr}
    3e16:	b084      	sub	sp, #16
    3e18:	af00      	add	r7, sp, #0
    3e1a:	0002      	movs	r2, r0
    3e1c:	6039      	str	r1, [r7, #0]
    3e1e:	1dfb      	adds	r3, r7, #7
    3e20:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3e22:	230c      	movs	r3, #12
    3e24:	18fb      	adds	r3, r7, r3
    3e26:	0018      	movs	r0, r3
    3e28:	4b10      	ldr	r3, [pc, #64]	; (3e6c <port_pin_set_config+0x58>)
    3e2a:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3e2c:	230c      	movs	r3, #12
    3e2e:	18fb      	adds	r3, r7, r3
    3e30:	2280      	movs	r2, #128	; 0x80
    3e32:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3e34:	683b      	ldr	r3, [r7, #0]
    3e36:	781a      	ldrb	r2, [r3, #0]
    3e38:	230c      	movs	r3, #12
    3e3a:	18fb      	adds	r3, r7, r3
    3e3c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3e3e:	683b      	ldr	r3, [r7, #0]
    3e40:	785a      	ldrb	r2, [r3, #1]
    3e42:	230c      	movs	r3, #12
    3e44:	18fb      	adds	r3, r7, r3
    3e46:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3e48:	683b      	ldr	r3, [r7, #0]
    3e4a:	789a      	ldrb	r2, [r3, #2]
    3e4c:	230c      	movs	r3, #12
    3e4e:	18fb      	adds	r3, r7, r3
    3e50:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3e52:	230c      	movs	r3, #12
    3e54:	18fa      	adds	r2, r7, r3
    3e56:	1dfb      	adds	r3, r7, #7
    3e58:	781b      	ldrb	r3, [r3, #0]
    3e5a:	0011      	movs	r1, r2
    3e5c:	0018      	movs	r0, r3
    3e5e:	4b04      	ldr	r3, [pc, #16]	; (3e70 <port_pin_set_config+0x5c>)
    3e60:	4798      	blx	r3
}
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	46bd      	mov	sp, r7
    3e66:	b004      	add	sp, #16
    3e68:	bd80      	pop	{r7, pc}
    3e6a:	46c0      	nop			; (mov r8, r8)
    3e6c:	00003ded 	.word	0x00003ded
    3e70:	000064bd 	.word	0x000064bd

00003e74 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    3e74:	b580      	push	{r7, lr}
    3e76:	b086      	sub	sp, #24
    3e78:	af00      	add	r7, sp, #0
    3e7a:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    3e7c:	4b28      	ldr	r3, [pc, #160]	; (3f20 <_rtc_interrupt_handler+0xac>)
    3e7e:	687a      	ldr	r2, [r7, #4]
    3e80:	0092      	lsls	r2, r2, #2
    3e82:	58d3      	ldr	r3, [r2, r3]
    3e84:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    3e86:	697b      	ldr	r3, [r7, #20]
    3e88:	681b      	ldr	r3, [r3, #0]
    3e8a:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    3e8c:	230e      	movs	r3, #14
    3e8e:	18fb      	adds	r3, r7, r3
    3e90:	697a      	ldr	r2, [r7, #20]
    3e92:	8a52      	ldrh	r2, [r2, #18]
    3e94:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    3e96:	697b      	ldr	r3, [r7, #20]
    3e98:	8a1b      	ldrh	r3, [r3, #16]
    3e9a:	b29a      	uxth	r2, r3
    3e9c:	230e      	movs	r3, #14
    3e9e:	18fb      	adds	r3, r7, r3
    3ea0:	210e      	movs	r1, #14
    3ea2:	1879      	adds	r1, r7, r1
    3ea4:	8809      	ldrh	r1, [r1, #0]
    3ea6:	400a      	ands	r2, r1
    3ea8:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    3eaa:	693b      	ldr	r3, [r7, #16]
    3eac:	7a1b      	ldrb	r3, [r3, #8]
    3eae:	b2da      	uxtb	r2, r3
    3eb0:	230c      	movs	r3, #12
    3eb2:	18fb      	adds	r3, r7, r3
    3eb4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    3eb6:	693b      	ldr	r3, [r7, #16]
    3eb8:	79db      	ldrb	r3, [r3, #7]
    3eba:	b2db      	uxtb	r3, r3
    3ebc:	b29a      	uxth	r2, r3
    3ebe:	230c      	movs	r3, #12
    3ec0:	18fb      	adds	r3, r7, r3
    3ec2:	210c      	movs	r1, #12
    3ec4:	1879      	adds	r1, r7, r1
    3ec6:	8809      	ldrh	r1, [r1, #0]
    3ec8:	400a      	ands	r2, r1
    3eca:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    3ecc:	230c      	movs	r3, #12
    3ece:	18fb      	adds	r3, r7, r3
    3ed0:	881b      	ldrh	r3, [r3, #0]
    3ed2:	2280      	movs	r2, #128	; 0x80
    3ed4:	4013      	ands	r3, r2
    3ed6:	d00c      	beq.n	3ef2 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    3ed8:	230e      	movs	r3, #14
    3eda:	18fb      	adds	r3, r7, r3
    3edc:	881b      	ldrh	r3, [r3, #0]
    3ede:	2202      	movs	r2, #2
    3ee0:	4013      	ands	r3, r2
    3ee2:	d002      	beq.n	3eea <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    3ee4:	697b      	ldr	r3, [r7, #20]
    3ee6:	68db      	ldr	r3, [r3, #12]
    3ee8:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    3eea:	693b      	ldr	r3, [r7, #16]
    3eec:	2280      	movs	r2, #128	; 0x80
    3eee:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    3ef0:	e011      	b.n	3f16 <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    3ef2:	230c      	movs	r3, #12
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	881b      	ldrh	r3, [r3, #0]
    3ef8:	2201      	movs	r2, #1
    3efa:	4013      	ands	r3, r2
    3efc:	d00b      	beq.n	3f16 <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    3efe:	230e      	movs	r3, #14
    3f00:	18fb      	adds	r3, r7, r3
    3f02:	881b      	ldrh	r3, [r3, #0]
    3f04:	2201      	movs	r2, #1
    3f06:	4013      	ands	r3, r2
    3f08:	d002      	beq.n	3f10 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    3f0a:	697b      	ldr	r3, [r7, #20]
    3f0c:	689b      	ldr	r3, [r3, #8]
    3f0e:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    3f10:	693b      	ldr	r3, [r7, #16]
    3f12:	2201      	movs	r2, #1
    3f14:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    3f16:	46c0      	nop			; (mov r8, r8)
    3f18:	46bd      	mov	sp, r7
    3f1a:	b006      	add	sp, #24
    3f1c:	bd80      	pop	{r7, pc}
    3f1e:	46c0      	nop			; (mov r8, r8)
    3f20:	200045b0 	.word	0x200045b0

00003f24 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    3f24:	b580      	push	{r7, lr}
    3f26:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    3f28:	2000      	movs	r0, #0
    3f2a:	4b02      	ldr	r3, [pc, #8]	; (3f34 <RTC_Handler+0x10>)
    3f2c:	4798      	blx	r3
}
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	46bd      	mov	sp, r7
    3f32:	bd80      	pop	{r7, pc}
    3f34:	00003e75 	.word	0x00003e75

00003f38 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b084      	sub	sp, #16
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	681b      	ldr	r3, [r3, #0]
    3f44:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3f46:	68fb      	ldr	r3, [r7, #12]
    3f48:	69db      	ldr	r3, [r3, #28]
    3f4a:	2207      	movs	r2, #7
    3f4c:	4013      	ands	r3, r2
    3f4e:	1e5a      	subs	r2, r3, #1
    3f50:	4193      	sbcs	r3, r2
    3f52:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3f54:	0018      	movs	r0, r3
    3f56:	46bd      	mov	sp, r7
    3f58:	b004      	add	sp, #16
    3f5a:	bd80      	pop	{r7, pc}

00003f5c <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b082      	sub	sp, #8
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3f64:	46c0      	nop			; (mov r8, r8)
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	0018      	movs	r0, r3
    3f6a:	4b04      	ldr	r3, [pc, #16]	; (3f7c <_i2c_master_wait_for_sync+0x20>)
    3f6c:	4798      	blx	r3
    3f6e:	1e03      	subs	r3, r0, #0
    3f70:	d1f9      	bne.n	3f66 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3f72:	46c0      	nop			; (mov r8, r8)
    3f74:	46bd      	mov	sp, r7
    3f76:	b002      	add	sp, #8
    3f78:	bd80      	pop	{r7, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00003f39 	.word	0x00003f39

00003f80 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    3f80:	b580      	push	{r7, lr}
    3f82:	b084      	sub	sp, #16
    3f84:	af00      	add	r7, sp, #0
    3f86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	681b      	ldr	r3, [r3, #0]
    3f8c:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3f8e:	68fb      	ldr	r3, [r7, #12]
    3f90:	7e1b      	ldrb	r3, [r3, #24]
    3f92:	b2db      	uxtb	r3, r3
    3f94:	001a      	movs	r2, r3
    3f96:	2302      	movs	r3, #2
    3f98:	4013      	ands	r3, r2
    3f9a:	d00b      	beq.n	3fb4 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3f9c:	68fb      	ldr	r3, [r7, #12]
    3f9e:	2202      	movs	r2, #2
    3fa0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3fa2:	68fb      	ldr	r3, [r7, #12]
    3fa4:	8b5b      	ldrh	r3, [r3, #26]
    3fa6:	b29b      	uxth	r3, r3
    3fa8:	001a      	movs	r2, r3
    3faa:	2302      	movs	r3, #2
    3fac:	4013      	ands	r3, r2
    3fae:	d011      	beq.n	3fd4 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3fb0:	2341      	movs	r3, #65	; 0x41
    3fb2:	e010      	b.n	3fd6 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3fb4:	68fb      	ldr	r3, [r7, #12]
    3fb6:	8b5b      	ldrh	r3, [r3, #26]
    3fb8:	b29b      	uxth	r3, r3
    3fba:	001a      	movs	r2, r3
    3fbc:	2304      	movs	r3, #4
    3fbe:	4013      	ands	r3, r2
    3fc0:	d008      	beq.n	3fd4 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fc2:	68fb      	ldr	r3, [r7, #12]
    3fc4:	685b      	ldr	r3, [r3, #4]
    3fc6:	22c0      	movs	r2, #192	; 0xc0
    3fc8:	0292      	lsls	r2, r2, #10
    3fca:	431a      	orrs	r2, r3
    3fcc:	68fb      	ldr	r3, [r7, #12]
    3fce:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3fd0:	2318      	movs	r3, #24
    3fd2:	e000      	b.n	3fd6 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    3fd4:	2300      	movs	r3, #0
}
    3fd6:	0018      	movs	r0, r3
    3fd8:	46bd      	mov	sp, r7
    3fda:	b004      	add	sp, #16
    3fdc:	bd80      	pop	{r7, pc}
    3fde:	46c0      	nop			; (mov r8, r8)

00003fe0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3fe0:	b580      	push	{r7, lr}
    3fe2:	b084      	sub	sp, #16
    3fe4:	af00      	add	r7, sp, #0
    3fe6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3fee:	230e      	movs	r3, #14
    3ff0:	18fb      	adds	r3, r7, r3
    3ff2:	2200      	movs	r2, #0
    3ff4:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3ff6:	e00f      	b.n	4018 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3ff8:	230e      	movs	r3, #14
    3ffa:	18fb      	adds	r3, r7, r3
    3ffc:	220e      	movs	r2, #14
    3ffe:	18ba      	adds	r2, r7, r2
    4000:	8812      	ldrh	r2, [r2, #0]
    4002:	3201      	adds	r2, #1
    4004:	801a      	strh	r2, [r3, #0]
    4006:	687b      	ldr	r3, [r7, #4]
    4008:	891b      	ldrh	r3, [r3, #8]
    400a:	220e      	movs	r2, #14
    400c:	18ba      	adds	r2, r7, r2
    400e:	8812      	ldrh	r2, [r2, #0]
    4010:	429a      	cmp	r2, r3
    4012:	d301      	bcc.n	4018 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    4014:	2312      	movs	r3, #18
    4016:	e00e      	b.n	4036 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4018:	68bb      	ldr	r3, [r7, #8]
    401a:	7e1b      	ldrb	r3, [r3, #24]
    401c:	b2db      	uxtb	r3, r3
    401e:	001a      	movs	r2, r3
    4020:	2301      	movs	r3, #1
    4022:	4013      	ands	r3, r2
    4024:	d106      	bne.n	4034 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    4026:	68bb      	ldr	r3, [r7, #8]
    4028:	7e1b      	ldrb	r3, [r3, #24]
    402a:	b2db      	uxtb	r3, r3
    402c:	001a      	movs	r2, r3
    402e:	2302      	movs	r3, #2
    4030:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4032:	d0e1      	beq.n	3ff8 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    4034:	2300      	movs	r3, #0
}
    4036:	0018      	movs	r0, r3
    4038:	46bd      	mov	sp, r7
    403a:	b004      	add	sp, #16
    403c:	bd80      	pop	{r7, pc}
    403e:	46c0      	nop			; (mov r8, r8)

00004040 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4040:	b590      	push	{r4, r7, lr}
    4042:	b085      	sub	sp, #20
    4044:	af00      	add	r7, sp, #0
    4046:	6078      	str	r0, [r7, #4]
    4048:	000a      	movs	r2, r1
    404a:	1cfb      	adds	r3, r7, #3
    404c:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    404e:	687b      	ldr	r3, [r7, #4]
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4054:	68fb      	ldr	r3, [r7, #12]
    4056:	685b      	ldr	r3, [r3, #4]
    4058:	2280      	movs	r2, #128	; 0x80
    405a:	02d2      	lsls	r2, r2, #11
    405c:	431a      	orrs	r2, r3
    405e:	68fb      	ldr	r3, [r7, #12]
    4060:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    4062:	1cfb      	adds	r3, r7, #3
    4064:	781a      	ldrb	r2, [r3, #0]
    4066:	68fb      	ldr	r3, [r7, #12]
    4068:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    406a:	230b      	movs	r3, #11
    406c:	18fc      	adds	r4, r7, r3
    406e:	687b      	ldr	r3, [r7, #4]
    4070:	0018      	movs	r0, r3
    4072:	4b07      	ldr	r3, [pc, #28]	; (4090 <_i2c_master_send_hs_master_code+0x50>)
    4074:	4798      	blx	r3
    4076:	0003      	movs	r3, r0
    4078:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    407a:	68fb      	ldr	r3, [r7, #12]
    407c:	2201      	movs	r2, #1
    407e:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    4080:	230b      	movs	r3, #11
    4082:	18fb      	adds	r3, r7, r3
    4084:	781b      	ldrb	r3, [r3, #0]
}
    4086:	0018      	movs	r0, r3
    4088:	46bd      	mov	sp, r7
    408a:	b005      	add	sp, #20
    408c:	bd90      	pop	{r4, r7, pc}
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	00003fe1 	.word	0x00003fe1

00004094 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4094:	b590      	push	{r4, r7, lr}
    4096:	b087      	sub	sp, #28
    4098:	af00      	add	r7, sp, #0
    409a:	6078      	str	r0, [r7, #4]
    409c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	681b      	ldr	r3, [r3, #0]
    40a2:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    40a4:	2314      	movs	r3, #20
    40a6:	18fb      	adds	r3, r7, r3
    40a8:	683a      	ldr	r2, [r7, #0]
    40aa:	8852      	ldrh	r2, [r2, #2]
    40ac:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    40ae:	2312      	movs	r3, #18
    40b0:	18fb      	adds	r3, r7, r3
    40b2:	2200      	movs	r2, #0
    40b4:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    40b6:	68fb      	ldr	r3, [r7, #12]
    40b8:	681b      	ldr	r3, [r3, #0]
    40ba:	011b      	lsls	r3, r3, #4
    40bc:	0fdb      	lsrs	r3, r3, #31
    40be:	b2db      	uxtb	r3, r3
    40c0:	001a      	movs	r2, r3
    40c2:	230b      	movs	r3, #11
    40c4:	18fb      	adds	r3, r7, r3
    40c6:	1e51      	subs	r1, r2, #1
    40c8:	418a      	sbcs	r2, r1
    40ca:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    40cc:	683b      	ldr	r3, [r7, #0]
    40ce:	7a5b      	ldrb	r3, [r3, #9]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d006      	beq.n	40e2 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    40d4:	683b      	ldr	r3, [r7, #0]
    40d6:	7a9a      	ldrb	r2, [r3, #10]
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	0011      	movs	r1, r2
    40dc:	0018      	movs	r0, r3
    40de:	4b85      	ldr	r3, [pc, #532]	; (42f4 <_i2c_master_read_packet+0x260>)
    40e0:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    40e2:	68fb      	ldr	r3, [r7, #12]
    40e4:	685b      	ldr	r3, [r3, #4]
    40e6:	4a84      	ldr	r2, [pc, #528]	; (42f8 <_i2c_master_read_packet+0x264>)
    40e8:	401a      	ands	r2, r3
    40ea:	68fb      	ldr	r3, [r7, #12]
    40ec:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    40ee:	683b      	ldr	r3, [r7, #0]
    40f0:	7a1b      	ldrb	r3, [r3, #8]
    40f2:	2b00      	cmp	r3, #0
    40f4:	d042      	beq.n	417c <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    40f6:	683b      	ldr	r3, [r7, #0]
    40f8:	881b      	ldrh	r3, [r3, #0]
    40fa:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    40fc:	683b      	ldr	r3, [r7, #0]
    40fe:	7a5b      	ldrb	r3, [r3, #9]
    4100:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    4102:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4104:	001a      	movs	r2, r3
    4106:	2380      	movs	r3, #128	; 0x80
    4108:	021b      	lsls	r3, r3, #8
    410a:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    410c:	68fb      	ldr	r3, [r7, #12]
    410e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    4110:	2317      	movs	r3, #23
    4112:	18fc      	adds	r4, r7, r3
    4114:	687b      	ldr	r3, [r7, #4]
    4116:	0018      	movs	r0, r3
    4118:	4b78      	ldr	r3, [pc, #480]	; (42fc <_i2c_master_read_packet+0x268>)
    411a:	4798      	blx	r3
    411c:	0003      	movs	r3, r0
    411e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4120:	68fb      	ldr	r3, [r7, #12]
    4122:	685b      	ldr	r3, [r3, #4]
    4124:	4a74      	ldr	r2, [pc, #464]	; (42f8 <_i2c_master_read_packet+0x264>)
    4126:	401a      	ands	r2, r3
    4128:	68fb      	ldr	r3, [r7, #12]
    412a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    412c:	2317      	movs	r3, #23
    412e:	18fb      	adds	r3, r7, r3
    4130:	781b      	ldrb	r3, [r3, #0]
    4132:	2b00      	cmp	r3, #0
    4134:	d107      	bne.n	4146 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    4136:	2317      	movs	r3, #23
    4138:	18fc      	adds	r4, r7, r3
    413a:	687b      	ldr	r3, [r7, #4]
    413c:	0018      	movs	r0, r3
    413e:	4b70      	ldr	r3, [pc, #448]	; (4300 <_i2c_master_read_packet+0x26c>)
    4140:	4798      	blx	r3
    4142:	0003      	movs	r3, r0
    4144:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    4146:	2317      	movs	r3, #23
    4148:	18fb      	adds	r3, r7, r3
    414a:	781b      	ldrb	r3, [r3, #0]
    414c:	2b00      	cmp	r3, #0
    414e:	d111      	bne.n	4174 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4150:	683b      	ldr	r3, [r7, #0]
    4152:	881b      	ldrh	r3, [r3, #0]
    4154:	0a1b      	lsrs	r3, r3, #8
    4156:	b29b      	uxth	r3, r3
    4158:	2278      	movs	r2, #120	; 0x78
    415a:	4313      	orrs	r3, r2
    415c:	b29b      	uxth	r3, r3
    415e:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4160:	683b      	ldr	r3, [r7, #0]
    4162:	7a5b      	ldrb	r3, [r3, #9]
    4164:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    4166:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4168:	2201      	movs	r2, #1
    416a:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    416c:	001a      	movs	r2, r3
    416e:	68fb      	ldr	r3, [r7, #12]
    4170:	625a      	str	r2, [r3, #36]	; 0x24
    4172:	e00f      	b.n	4194 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    4174:	2317      	movs	r3, #23
    4176:	18fb      	adds	r3, r7, r3
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	e0b6      	b.n	42ea <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    417c:	683b      	ldr	r3, [r7, #0]
    417e:	881b      	ldrh	r3, [r3, #0]
    4180:	005b      	lsls	r3, r3, #1
    4182:	2201      	movs	r2, #1
    4184:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    4186:	683b      	ldr	r3, [r7, #0]
    4188:	7a5b      	ldrb	r3, [r3, #9]
    418a:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    418c:	4313      	orrs	r3, r2
    418e:	001a      	movs	r2, r3
    4190:	68fb      	ldr	r3, [r7, #12]
    4192:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4194:	2317      	movs	r3, #23
    4196:	18fc      	adds	r4, r7, r3
    4198:	687b      	ldr	r3, [r7, #4]
    419a:	0018      	movs	r0, r3
    419c:	4b57      	ldr	r3, [pc, #348]	; (42fc <_i2c_master_read_packet+0x268>)
    419e:	4798      	blx	r3
    41a0:	0003      	movs	r3, r0
    41a2:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    41a4:	230b      	movs	r3, #11
    41a6:	18fb      	adds	r3, r7, r3
    41a8:	781b      	ldrb	r3, [r3, #0]
    41aa:	2b00      	cmp	r3, #0
    41ac:	d00b      	beq.n	41c6 <_i2c_master_read_packet+0x132>
    41ae:	683b      	ldr	r3, [r7, #0]
    41b0:	885b      	ldrh	r3, [r3, #2]
    41b2:	2b01      	cmp	r3, #1
    41b4:	d107      	bne.n	41c6 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    41b6:	68fb      	ldr	r3, [r7, #12]
    41b8:	685b      	ldr	r3, [r3, #4]
    41ba:	2280      	movs	r2, #128	; 0x80
    41bc:	02d2      	lsls	r2, r2, #11
    41be:	431a      	orrs	r2, r3
    41c0:	68fb      	ldr	r3, [r7, #12]
    41c2:	605a      	str	r2, [r3, #4]
    41c4:	e005      	b.n	41d2 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    41c6:	68fb      	ldr	r3, [r7, #12]
    41c8:	685b      	ldr	r3, [r3, #4]
    41ca:	4a4b      	ldr	r2, [pc, #300]	; (42f8 <_i2c_master_read_packet+0x264>)
    41cc:	401a      	ands	r2, r3
    41ce:	68fb      	ldr	r3, [r7, #12]
    41d0:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    41d2:	2317      	movs	r3, #23
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	2b00      	cmp	r3, #0
    41da:	d107      	bne.n	41ec <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    41dc:	2317      	movs	r3, #23
    41de:	18fc      	adds	r4, r7, r3
    41e0:	687b      	ldr	r3, [r7, #4]
    41e2:	0018      	movs	r0, r3
    41e4:	4b46      	ldr	r3, [pc, #280]	; (4300 <_i2c_master_read_packet+0x26c>)
    41e6:	4798      	blx	r3
    41e8:	0003      	movs	r3, r0
    41ea:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    41ec:	2317      	movs	r3, #23
    41ee:	18fb      	adds	r3, r7, r3
    41f0:	781b      	ldrb	r3, [r3, #0]
    41f2:	2b00      	cmp	r3, #0
    41f4:	d000      	beq.n	41f8 <_i2c_master_read_packet+0x164>
    41f6:	e075      	b.n	42e4 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    41f8:	e04b      	b.n	4292 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    41fa:	68fb      	ldr	r3, [r7, #12]
    41fc:	8b5b      	ldrh	r3, [r3, #26]
    41fe:	b29b      	uxth	r3, r3
    4200:	001a      	movs	r2, r3
    4202:	2320      	movs	r3, #32
    4204:	4013      	ands	r3, r2
    4206:	d101      	bne.n	420c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    4208:	2341      	movs	r3, #65	; 0x41
    420a:	e06e      	b.n	42ea <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    420c:	687b      	ldr	r3, [r7, #4]
    420e:	7adb      	ldrb	r3, [r3, #11]
    4210:	2b00      	cmp	r3, #0
    4212:	d01e      	beq.n	4252 <_i2c_master_read_packet+0x1be>
    4214:	230b      	movs	r3, #11
    4216:	18fb      	adds	r3, r7, r3
    4218:	781b      	ldrb	r3, [r3, #0]
    421a:	2201      	movs	r2, #1
    421c:	4053      	eors	r3, r2
    421e:	b2db      	uxtb	r3, r3
    4220:	2b00      	cmp	r3, #0
    4222:	d004      	beq.n	422e <_i2c_master_read_packet+0x19a>
    4224:	2314      	movs	r3, #20
    4226:	18fb      	adds	r3, r7, r3
    4228:	881b      	ldrh	r3, [r3, #0]
    422a:	2b00      	cmp	r3, #0
    422c:	d009      	beq.n	4242 <_i2c_master_read_packet+0x1ae>
    422e:	230b      	movs	r3, #11
    4230:	18fb      	adds	r3, r7, r3
    4232:	781b      	ldrb	r3, [r3, #0]
    4234:	2b00      	cmp	r3, #0
    4236:	d00c      	beq.n	4252 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    4238:	2314      	movs	r3, #20
    423a:	18fb      	adds	r3, r7, r3
    423c:	881b      	ldrh	r3, [r3, #0]
    423e:	2b01      	cmp	r3, #1
    4240:	d107      	bne.n	4252 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4242:	68fb      	ldr	r3, [r7, #12]
    4244:	685b      	ldr	r3, [r3, #4]
    4246:	2280      	movs	r2, #128	; 0x80
    4248:	02d2      	lsls	r2, r2, #11
    424a:	431a      	orrs	r2, r3
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	605a      	str	r2, [r3, #4]
    4250:	e01a      	b.n	4288 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    4252:	687b      	ldr	r3, [r7, #4]
    4254:	0018      	movs	r0, r3
    4256:	4b2b      	ldr	r3, [pc, #172]	; (4304 <_i2c_master_read_packet+0x270>)
    4258:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    425a:	683b      	ldr	r3, [r7, #0]
    425c:	685a      	ldr	r2, [r3, #4]
    425e:	2312      	movs	r3, #18
    4260:	18fb      	adds	r3, r7, r3
    4262:	881b      	ldrh	r3, [r3, #0]
    4264:	2112      	movs	r1, #18
    4266:	1879      	adds	r1, r7, r1
    4268:	1c58      	adds	r0, r3, #1
    426a:	8008      	strh	r0, [r1, #0]
    426c:	18d3      	adds	r3, r2, r3
    426e:	68fa      	ldr	r2, [r7, #12]
    4270:	2128      	movs	r1, #40	; 0x28
    4272:	5c52      	ldrb	r2, [r2, r1]
    4274:	b2d2      	uxtb	r2, r2
    4276:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    4278:	2317      	movs	r3, #23
    427a:	18fc      	adds	r4, r7, r3
    427c:	687b      	ldr	r3, [r7, #4]
    427e:	0018      	movs	r0, r3
    4280:	4b1e      	ldr	r3, [pc, #120]	; (42fc <_i2c_master_read_packet+0x268>)
    4282:	4798      	blx	r3
    4284:	0003      	movs	r3, r0
    4286:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    4288:	2317      	movs	r3, #23
    428a:	18fb      	adds	r3, r7, r3
    428c:	781b      	ldrb	r3, [r3, #0]
    428e:	2b00      	cmp	r3, #0
    4290:	d109      	bne.n	42a6 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    4292:	2314      	movs	r3, #20
    4294:	18fb      	adds	r3, r7, r3
    4296:	881b      	ldrh	r3, [r3, #0]
    4298:	2214      	movs	r2, #20
    429a:	18ba      	adds	r2, r7, r2
    429c:	1e59      	subs	r1, r3, #1
    429e:	8011      	strh	r1, [r2, #0]
    42a0:	2b00      	cmp	r3, #0
    42a2:	d1aa      	bne.n	41fa <_i2c_master_read_packet+0x166>
    42a4:	e000      	b.n	42a8 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    42a6:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    42a8:	687b      	ldr	r3, [r7, #4]
    42aa:	7a9b      	ldrb	r3, [r3, #10]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d00a      	beq.n	42c6 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    42b0:	687b      	ldr	r3, [r7, #4]
    42b2:	0018      	movs	r0, r3
    42b4:	4b13      	ldr	r3, [pc, #76]	; (4304 <_i2c_master_read_packet+0x270>)
    42b6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    42b8:	68fb      	ldr	r3, [r7, #12]
    42ba:	685b      	ldr	r3, [r3, #4]
    42bc:	22c0      	movs	r2, #192	; 0xc0
    42be:	0292      	lsls	r2, r2, #10
    42c0:	431a      	orrs	r2, r3
    42c2:	68fb      	ldr	r3, [r7, #12]
    42c4:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	0018      	movs	r0, r3
    42ca:	4b0e      	ldr	r3, [pc, #56]	; (4304 <_i2c_master_read_packet+0x270>)
    42cc:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    42ce:	683b      	ldr	r3, [r7, #0]
    42d0:	685a      	ldr	r2, [r3, #4]
    42d2:	2312      	movs	r3, #18
    42d4:	18fb      	adds	r3, r7, r3
    42d6:	881b      	ldrh	r3, [r3, #0]
    42d8:	18d3      	adds	r3, r2, r3
    42da:	68fa      	ldr	r2, [r7, #12]
    42dc:	2128      	movs	r1, #40	; 0x28
    42de:	5c52      	ldrb	r2, [r2, r1]
    42e0:	b2d2      	uxtb	r2, r2
    42e2:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    42e4:	2317      	movs	r3, #23
    42e6:	18fb      	adds	r3, r7, r3
    42e8:	781b      	ldrb	r3, [r3, #0]
}
    42ea:	0018      	movs	r0, r3
    42ec:	46bd      	mov	sp, r7
    42ee:	b007      	add	sp, #28
    42f0:	bd90      	pop	{r4, r7, pc}
    42f2:	46c0      	nop			; (mov r8, r8)
    42f4:	00004041 	.word	0x00004041
    42f8:	fffbffff 	.word	0xfffbffff
    42fc:	00003fe1 	.word	0x00003fe1
    4300:	00003f81 	.word	0x00003f81
    4304:	00003f5d 	.word	0x00003f5d

00004308 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4308:	b580      	push	{r7, lr}
    430a:	b082      	sub	sp, #8
    430c:	af00      	add	r7, sp, #0
    430e:	6078      	str	r0, [r7, #4]
    4310:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    4312:	687b      	ldr	r3, [r7, #4]
    4314:	8b9b      	ldrh	r3, [r3, #28]
    4316:	b29b      	uxth	r3, r3
    4318:	2b00      	cmp	r3, #0
    431a:	d001      	beq.n	4320 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    431c:	2305      	movs	r3, #5
    431e:	e00c      	b.n	433a <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	2201      	movs	r2, #1
    4324:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	2201      	movs	r2, #1
    432a:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    432c:	683a      	ldr	r2, [r7, #0]
    432e:	687b      	ldr	r3, [r7, #4]
    4330:	0011      	movs	r1, r2
    4332:	0018      	movs	r0, r3
    4334:	4b03      	ldr	r3, [pc, #12]	; (4344 <i2c_master_read_packet_wait+0x3c>)
    4336:	4798      	blx	r3
    4338:	0003      	movs	r3, r0
}
    433a:	0018      	movs	r0, r3
    433c:	46bd      	mov	sp, r7
    433e:	b002      	add	sp, #8
    4340:	bd80      	pop	{r7, pc}
    4342:	46c0      	nop			; (mov r8, r8)
    4344:	00004095 	.word	0x00004095

00004348 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4348:	b590      	push	{r4, r7, lr}
    434a:	b087      	sub	sp, #28
    434c:	af00      	add	r7, sp, #0
    434e:	6078      	str	r0, [r7, #4]
    4350:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4352:	687b      	ldr	r3, [r7, #4]
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    4358:	2314      	movs	r3, #20
    435a:	18fb      	adds	r3, r7, r3
    435c:	683a      	ldr	r2, [r7, #0]
    435e:	8852      	ldrh	r2, [r2, #2]
    4360:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    4362:	687b      	ldr	r3, [r7, #4]
    4364:	0018      	movs	r0, r3
    4366:	4b51      	ldr	r3, [pc, #324]	; (44ac <_i2c_master_write_packet+0x164>)
    4368:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    436a:	683b      	ldr	r3, [r7, #0]
    436c:	7a5b      	ldrb	r3, [r3, #9]
    436e:	2b00      	cmp	r3, #0
    4370:	d006      	beq.n	4380 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    4372:	683b      	ldr	r3, [r7, #0]
    4374:	7a9a      	ldrb	r2, [r3, #10]
    4376:	687b      	ldr	r3, [r7, #4]
    4378:	0011      	movs	r1, r2
    437a:	0018      	movs	r0, r3
    437c:	4b4c      	ldr	r3, [pc, #304]	; (44b0 <_i2c_master_write_packet+0x168>)
    437e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4380:	68fb      	ldr	r3, [r7, #12]
    4382:	685b      	ldr	r3, [r3, #4]
    4384:	4a4b      	ldr	r2, [pc, #300]	; (44b4 <_i2c_master_write_packet+0x16c>)
    4386:	401a      	ands	r2, r3
    4388:	68fb      	ldr	r3, [r7, #12]
    438a:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    438c:	683b      	ldr	r3, [r7, #0]
    438e:	7a1b      	ldrb	r3, [r3, #8]
    4390:	2b00      	cmp	r3, #0
    4392:	d00d      	beq.n	43b0 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    4394:	683b      	ldr	r3, [r7, #0]
    4396:	881b      	ldrh	r3, [r3, #0]
    4398:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    439a:	683b      	ldr	r3, [r7, #0]
    439c:	7a5b      	ldrb	r3, [r3, #9]
    439e:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    43a0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    43a2:	001a      	movs	r2, r3
    43a4:	2380      	movs	r3, #128	; 0x80
    43a6:	021b      	lsls	r3, r3, #8
    43a8:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    43aa:	68fb      	ldr	r3, [r7, #12]
    43ac:	625a      	str	r2, [r3, #36]	; 0x24
    43ae:	e009      	b.n	43c4 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    43b0:	683b      	ldr	r3, [r7, #0]
    43b2:	881b      	ldrh	r3, [r3, #0]
    43b4:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    43b6:	683b      	ldr	r3, [r7, #0]
    43b8:	7a5b      	ldrb	r3, [r3, #9]
    43ba:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    43bc:	4313      	orrs	r3, r2
    43be:	001a      	movs	r2, r3
    43c0:	68fb      	ldr	r3, [r7, #12]
    43c2:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    43c4:	2317      	movs	r3, #23
    43c6:	18fc      	adds	r4, r7, r3
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	0018      	movs	r0, r3
    43cc:	4b3a      	ldr	r3, [pc, #232]	; (44b8 <_i2c_master_write_packet+0x170>)
    43ce:	4798      	blx	r3
    43d0:	0003      	movs	r3, r0
    43d2:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    43d4:	2317      	movs	r3, #23
    43d6:	18fb      	adds	r3, r7, r3
    43d8:	781b      	ldrb	r3, [r3, #0]
    43da:	2b00      	cmp	r3, #0
    43dc:	d107      	bne.n	43ee <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    43de:	2317      	movs	r3, #23
    43e0:	18fc      	adds	r4, r7, r3
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	0018      	movs	r0, r3
    43e6:	4b35      	ldr	r3, [pc, #212]	; (44bc <_i2c_master_write_packet+0x174>)
    43e8:	4798      	blx	r3
    43ea:	0003      	movs	r3, r0
    43ec:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    43ee:	2317      	movs	r3, #23
    43f0:	18fb      	adds	r3, r7, r3
    43f2:	781b      	ldrb	r3, [r3, #0]
    43f4:	2b00      	cmp	r3, #0
    43f6:	d152      	bne.n	449e <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    43f8:	2312      	movs	r3, #18
    43fa:	18fb      	adds	r3, r7, r3
    43fc:	2200      	movs	r2, #0
    43fe:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    4400:	e033      	b.n	446a <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	8b5b      	ldrh	r3, [r3, #26]
    4406:	b29b      	uxth	r3, r3
    4408:	001a      	movs	r2, r3
    440a:	2320      	movs	r3, #32
    440c:	4013      	ands	r3, r2
    440e:	d101      	bne.n	4414 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    4410:	2341      	movs	r3, #65	; 0x41
    4412:	e047      	b.n	44a4 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    4414:	687b      	ldr	r3, [r7, #4]
    4416:	0018      	movs	r0, r3
    4418:	4b24      	ldr	r3, [pc, #144]	; (44ac <_i2c_master_write_packet+0x164>)
    441a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    441c:	683b      	ldr	r3, [r7, #0]
    441e:	685a      	ldr	r2, [r3, #4]
    4420:	2312      	movs	r3, #18
    4422:	18fb      	adds	r3, r7, r3
    4424:	881b      	ldrh	r3, [r3, #0]
    4426:	2112      	movs	r1, #18
    4428:	1879      	adds	r1, r7, r1
    442a:	1c58      	adds	r0, r3, #1
    442c:	8008      	strh	r0, [r1, #0]
    442e:	18d3      	adds	r3, r2, r3
    4430:	7819      	ldrb	r1, [r3, #0]
    4432:	68fb      	ldr	r3, [r7, #12]
    4434:	2228      	movs	r2, #40	; 0x28
    4436:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    4438:	2317      	movs	r3, #23
    443a:	18fc      	adds	r4, r7, r3
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	0018      	movs	r0, r3
    4440:	4b1d      	ldr	r3, [pc, #116]	; (44b8 <_i2c_master_write_packet+0x170>)
    4442:	4798      	blx	r3
    4444:	0003      	movs	r3, r0
    4446:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    4448:	2317      	movs	r3, #23
    444a:	18fb      	adds	r3, r7, r3
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	2b00      	cmp	r3, #0
    4450:	d115      	bne.n	447e <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	8b5b      	ldrh	r3, [r3, #26]
    4456:	b29b      	uxth	r3, r3
    4458:	001a      	movs	r2, r3
    445a:	2304      	movs	r3, #4
    445c:	4013      	ands	r3, r2
    445e:	d004      	beq.n	446a <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    4460:	2317      	movs	r3, #23
    4462:	18fb      	adds	r3, r7, r3
    4464:	221e      	movs	r2, #30
    4466:	701a      	strb	r2, [r3, #0]
				break;
    4468:	e00a      	b.n	4480 <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    446a:	2314      	movs	r3, #20
    446c:	18fb      	adds	r3, r7, r3
    446e:	881b      	ldrh	r3, [r3, #0]
    4470:	2214      	movs	r2, #20
    4472:	18ba      	adds	r2, r7, r2
    4474:	1e59      	subs	r1, r3, #1
    4476:	8011      	strh	r1, [r2, #0]
    4478:	2b00      	cmp	r3, #0
    447a:	d1c2      	bne.n	4402 <_i2c_master_write_packet+0xba>
    447c:	e000      	b.n	4480 <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    447e:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	7a9b      	ldrb	r3, [r3, #10]
    4484:	2b00      	cmp	r3, #0
    4486:	d00a      	beq.n	449e <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    4488:	687b      	ldr	r3, [r7, #4]
    448a:	0018      	movs	r0, r3
    448c:	4b07      	ldr	r3, [pc, #28]	; (44ac <_i2c_master_write_packet+0x164>)
    448e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4490:	68fb      	ldr	r3, [r7, #12]
    4492:	685b      	ldr	r3, [r3, #4]
    4494:	22c0      	movs	r2, #192	; 0xc0
    4496:	0292      	lsls	r2, r2, #10
    4498:	431a      	orrs	r2, r3
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    449e:	2317      	movs	r3, #23
    44a0:	18fb      	adds	r3, r7, r3
    44a2:	781b      	ldrb	r3, [r3, #0]
}
    44a4:	0018      	movs	r0, r3
    44a6:	46bd      	mov	sp, r7
    44a8:	b007      	add	sp, #28
    44aa:	bd90      	pop	{r4, r7, pc}
    44ac:	00003f5d 	.word	0x00003f5d
    44b0:	00004041 	.word	0x00004041
    44b4:	fffbffff 	.word	0xfffbffff
    44b8:	00003fe1 	.word	0x00003fe1
    44bc:	00003f81 	.word	0x00003f81

000044c0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    44c0:	b580      	push	{r7, lr}
    44c2:	b082      	sub	sp, #8
    44c4:	af00      	add	r7, sp, #0
    44c6:	6078      	str	r0, [r7, #4]
    44c8:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    44ca:	687b      	ldr	r3, [r7, #4]
    44cc:	8b9b      	ldrh	r3, [r3, #28]
    44ce:	b29b      	uxth	r3, r3
    44d0:	2b00      	cmp	r3, #0
    44d2:	d001      	beq.n	44d8 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    44d4:	2305      	movs	r3, #5
    44d6:	e00c      	b.n	44f2 <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	2200      	movs	r2, #0
    44dc:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    44de:	687b      	ldr	r3, [r7, #4]
    44e0:	2201      	movs	r2, #1
    44e2:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    44e4:	683a      	ldr	r2, [r7, #0]
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	0011      	movs	r1, r2
    44ea:	0018      	movs	r0, r3
    44ec:	4b03      	ldr	r3, [pc, #12]	; (44fc <i2c_master_write_packet_wait_no_stop+0x3c>)
    44ee:	4798      	blx	r3
    44f0:	0003      	movs	r3, r0
}
    44f2:	0018      	movs	r0, r3
    44f4:	46bd      	mov	sp, r7
    44f6:	b002      	add	sp, #8
    44f8:	bd80      	pop	{r7, pc}
    44fa:	46c0      	nop			; (mov r8, r8)
    44fc:	00004349 	.word	0x00004349

00004500 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4500:	b580      	push	{r7, lr}
    4502:	b082      	sub	sp, #8
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	2200      	movs	r2, #0
    450c:	701a      	strb	r2, [r3, #0]
}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	46bd      	mov	sp, r7
    4512:	b002      	add	sp, #8
    4514:	bd80      	pop	{r7, pc}
    4516:	46c0      	nop			; (mov r8, r8)

00004518 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4518:	b580      	push	{r7, lr}
    451a:	b086      	sub	sp, #24
    451c:	af00      	add	r7, sp, #0
    451e:	60f8      	str	r0, [r7, #12]
    4520:	60b9      	str	r1, [r7, #8]
    4522:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4524:	2316      	movs	r3, #22
    4526:	18fb      	adds	r3, r7, r3
    4528:	2200      	movs	r2, #0
    452a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    452c:	68bb      	ldr	r3, [r7, #8]
    452e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4530:	68bb      	ldr	r3, [r7, #8]
    4532:	085a      	lsrs	r2, r3, #1
    4534:	68fb      	ldr	r3, [r7, #12]
    4536:	429a      	cmp	r2, r3
    4538:	d201      	bcs.n	453e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    453a:	2340      	movs	r3, #64	; 0x40
    453c:	e026      	b.n	458c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    453e:	68bb      	ldr	r3, [r7, #8]
    4540:	085b      	lsrs	r3, r3, #1
    4542:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4544:	e00a      	b.n	455c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4546:	693a      	ldr	r2, [r7, #16]
    4548:	68fb      	ldr	r3, [r7, #12]
    454a:	1ad3      	subs	r3, r2, r3
    454c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    454e:	2316      	movs	r3, #22
    4550:	18fb      	adds	r3, r7, r3
    4552:	881a      	ldrh	r2, [r3, #0]
    4554:	2316      	movs	r3, #22
    4556:	18fb      	adds	r3, r7, r3
    4558:	3201      	adds	r2, #1
    455a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    455c:	693a      	ldr	r2, [r7, #16]
    455e:	68fb      	ldr	r3, [r7, #12]
    4560:	429a      	cmp	r2, r3
    4562:	d2f0      	bcs.n	4546 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    4564:	2316      	movs	r3, #22
    4566:	18fb      	adds	r3, r7, r3
    4568:	2216      	movs	r2, #22
    456a:	18ba      	adds	r2, r7, r2
    456c:	8812      	ldrh	r2, [r2, #0]
    456e:	3a01      	subs	r2, #1
    4570:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4572:	2316      	movs	r3, #22
    4574:	18fb      	adds	r3, r7, r3
    4576:	881b      	ldrh	r3, [r3, #0]
    4578:	2bff      	cmp	r3, #255	; 0xff
    457a:	d901      	bls.n	4580 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    457c:	2340      	movs	r3, #64	; 0x40
    457e:	e005      	b.n	458c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	2216      	movs	r2, #22
    4584:	18ba      	adds	r2, r7, r2
    4586:	8812      	ldrh	r2, [r2, #0]
    4588:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    458a:	2300      	movs	r3, #0
	}
}
    458c:	0018      	movs	r0, r3
    458e:	46bd      	mov	sp, r7
    4590:	b006      	add	sp, #24
    4592:	bd80      	pop	{r7, pc}

00004594 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4594:	b580      	push	{r7, lr}
    4596:	b084      	sub	sp, #16
    4598:	af00      	add	r7, sp, #0
    459a:	0002      	movs	r2, r0
    459c:	1dfb      	adds	r3, r7, #7
    459e:	701a      	strb	r2, [r3, #0]
    45a0:	1dbb      	adds	r3, r7, #6
    45a2:	1c0a      	adds	r2, r1, #0
    45a4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    45a6:	4b1a      	ldr	r3, [pc, #104]	; (4610 <sercom_set_gclk_generator+0x7c>)
    45a8:	781b      	ldrb	r3, [r3, #0]
    45aa:	2201      	movs	r2, #1
    45ac:	4053      	eors	r3, r2
    45ae:	b2db      	uxtb	r3, r3
    45b0:	2b00      	cmp	r3, #0
    45b2:	d103      	bne.n	45bc <sercom_set_gclk_generator+0x28>
    45b4:	1dbb      	adds	r3, r7, #6
    45b6:	781b      	ldrb	r3, [r3, #0]
    45b8:	2b00      	cmp	r3, #0
    45ba:	d01b      	beq.n	45f4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    45bc:	230c      	movs	r3, #12
    45be:	18fb      	adds	r3, r7, r3
    45c0:	0018      	movs	r0, r3
    45c2:	4b14      	ldr	r3, [pc, #80]	; (4614 <sercom_set_gclk_generator+0x80>)
    45c4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    45c6:	230c      	movs	r3, #12
    45c8:	18fb      	adds	r3, r7, r3
    45ca:	1dfa      	adds	r2, r7, #7
    45cc:	7812      	ldrb	r2, [r2, #0]
    45ce:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    45d0:	230c      	movs	r3, #12
    45d2:	18fb      	adds	r3, r7, r3
    45d4:	0019      	movs	r1, r3
    45d6:	2013      	movs	r0, #19
    45d8:	4b0f      	ldr	r3, [pc, #60]	; (4618 <sercom_set_gclk_generator+0x84>)
    45da:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    45dc:	2013      	movs	r0, #19
    45de:	4b0f      	ldr	r3, [pc, #60]	; (461c <sercom_set_gclk_generator+0x88>)
    45e0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    45e2:	4b0b      	ldr	r3, [pc, #44]	; (4610 <sercom_set_gclk_generator+0x7c>)
    45e4:	1dfa      	adds	r2, r7, #7
    45e6:	7812      	ldrb	r2, [r2, #0]
    45e8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    45ea:	4b09      	ldr	r3, [pc, #36]	; (4610 <sercom_set_gclk_generator+0x7c>)
    45ec:	2201      	movs	r2, #1
    45ee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    45f0:	2300      	movs	r3, #0
    45f2:	e008      	b.n	4606 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    45f4:	4b06      	ldr	r3, [pc, #24]	; (4610 <sercom_set_gclk_generator+0x7c>)
    45f6:	785b      	ldrb	r3, [r3, #1]
    45f8:	1dfa      	adds	r2, r7, #7
    45fa:	7812      	ldrb	r2, [r2, #0]
    45fc:	429a      	cmp	r2, r3
    45fe:	d101      	bne.n	4604 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    4600:	2300      	movs	r3, #0
    4602:	e000      	b.n	4606 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4604:	231d      	movs	r3, #29
}
    4606:	0018      	movs	r0, r3
    4608:	46bd      	mov	sp, r7
    460a:	b004      	add	sp, #16
    460c:	bd80      	pop	{r7, pc}
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	200000d0 	.word	0x200000d0
    4614:	00004501 	.word	0x00004501
    4618:	000061d1 	.word	0x000061d1
    461c:	00006215 	.word	0x00006215

00004620 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4620:	b580      	push	{r7, lr}
    4622:	b082      	sub	sp, #8
    4624:	af00      	add	r7, sp, #0
    4626:	6078      	str	r0, [r7, #4]
    4628:	000a      	movs	r2, r1
    462a:	1cfb      	adds	r3, r7, #3
    462c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	4a4d      	ldr	r2, [pc, #308]	; (4768 <_sercom_get_default_pad+0x148>)
    4632:	4293      	cmp	r3, r2
    4634:	d03f      	beq.n	46b6 <_sercom_get_default_pad+0x96>
    4636:	4a4c      	ldr	r2, [pc, #304]	; (4768 <_sercom_get_default_pad+0x148>)
    4638:	4293      	cmp	r3, r2
    463a:	d806      	bhi.n	464a <_sercom_get_default_pad+0x2a>
    463c:	4a4b      	ldr	r2, [pc, #300]	; (476c <_sercom_get_default_pad+0x14c>)
    463e:	4293      	cmp	r3, r2
    4640:	d00f      	beq.n	4662 <_sercom_get_default_pad+0x42>
    4642:	4a4b      	ldr	r2, [pc, #300]	; (4770 <_sercom_get_default_pad+0x150>)
    4644:	4293      	cmp	r3, r2
    4646:	d021      	beq.n	468c <_sercom_get_default_pad+0x6c>
    4648:	e089      	b.n	475e <_sercom_get_default_pad+0x13e>
    464a:	4a4a      	ldr	r2, [pc, #296]	; (4774 <_sercom_get_default_pad+0x154>)
    464c:	4293      	cmp	r3, r2
    464e:	d100      	bne.n	4652 <_sercom_get_default_pad+0x32>
    4650:	e05b      	b.n	470a <_sercom_get_default_pad+0xea>
    4652:	4a49      	ldr	r2, [pc, #292]	; (4778 <_sercom_get_default_pad+0x158>)
    4654:	4293      	cmp	r3, r2
    4656:	d100      	bne.n	465a <_sercom_get_default_pad+0x3a>
    4658:	e06c      	b.n	4734 <_sercom_get_default_pad+0x114>
    465a:	4a48      	ldr	r2, [pc, #288]	; (477c <_sercom_get_default_pad+0x15c>)
    465c:	4293      	cmp	r3, r2
    465e:	d03f      	beq.n	46e0 <_sercom_get_default_pad+0xc0>
    4660:	e07d      	b.n	475e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4662:	1cfb      	adds	r3, r7, #3
    4664:	781b      	ldrb	r3, [r3, #0]
    4666:	2b01      	cmp	r3, #1
    4668:	d00a      	beq.n	4680 <_sercom_get_default_pad+0x60>
    466a:	dc02      	bgt.n	4672 <_sercom_get_default_pad+0x52>
    466c:	2b00      	cmp	r3, #0
    466e:	d005      	beq.n	467c <_sercom_get_default_pad+0x5c>
    4670:	e075      	b.n	475e <_sercom_get_default_pad+0x13e>
    4672:	2b02      	cmp	r3, #2
    4674:	d006      	beq.n	4684 <_sercom_get_default_pad+0x64>
    4676:	2b03      	cmp	r3, #3
    4678:	d006      	beq.n	4688 <_sercom_get_default_pad+0x68>
    467a:	e070      	b.n	475e <_sercom_get_default_pad+0x13e>
    467c:	4b40      	ldr	r3, [pc, #256]	; (4780 <_sercom_get_default_pad+0x160>)
    467e:	e06f      	b.n	4760 <_sercom_get_default_pad+0x140>
    4680:	4b40      	ldr	r3, [pc, #256]	; (4784 <_sercom_get_default_pad+0x164>)
    4682:	e06d      	b.n	4760 <_sercom_get_default_pad+0x140>
    4684:	4b40      	ldr	r3, [pc, #256]	; (4788 <_sercom_get_default_pad+0x168>)
    4686:	e06b      	b.n	4760 <_sercom_get_default_pad+0x140>
    4688:	4b40      	ldr	r3, [pc, #256]	; (478c <_sercom_get_default_pad+0x16c>)
    468a:	e069      	b.n	4760 <_sercom_get_default_pad+0x140>
    468c:	1cfb      	adds	r3, r7, #3
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	2b01      	cmp	r3, #1
    4692:	d00a      	beq.n	46aa <_sercom_get_default_pad+0x8a>
    4694:	dc02      	bgt.n	469c <_sercom_get_default_pad+0x7c>
    4696:	2b00      	cmp	r3, #0
    4698:	d005      	beq.n	46a6 <_sercom_get_default_pad+0x86>
    469a:	e060      	b.n	475e <_sercom_get_default_pad+0x13e>
    469c:	2b02      	cmp	r3, #2
    469e:	d006      	beq.n	46ae <_sercom_get_default_pad+0x8e>
    46a0:	2b03      	cmp	r3, #3
    46a2:	d006      	beq.n	46b2 <_sercom_get_default_pad+0x92>
    46a4:	e05b      	b.n	475e <_sercom_get_default_pad+0x13e>
    46a6:	2303      	movs	r3, #3
    46a8:	e05a      	b.n	4760 <_sercom_get_default_pad+0x140>
    46aa:	4b39      	ldr	r3, [pc, #228]	; (4790 <_sercom_get_default_pad+0x170>)
    46ac:	e058      	b.n	4760 <_sercom_get_default_pad+0x140>
    46ae:	4b39      	ldr	r3, [pc, #228]	; (4794 <_sercom_get_default_pad+0x174>)
    46b0:	e056      	b.n	4760 <_sercom_get_default_pad+0x140>
    46b2:	4b39      	ldr	r3, [pc, #228]	; (4798 <_sercom_get_default_pad+0x178>)
    46b4:	e054      	b.n	4760 <_sercom_get_default_pad+0x140>
    46b6:	1cfb      	adds	r3, r7, #3
    46b8:	781b      	ldrb	r3, [r3, #0]
    46ba:	2b01      	cmp	r3, #1
    46bc:	d00a      	beq.n	46d4 <_sercom_get_default_pad+0xb4>
    46be:	dc02      	bgt.n	46c6 <_sercom_get_default_pad+0xa6>
    46c0:	2b00      	cmp	r3, #0
    46c2:	d005      	beq.n	46d0 <_sercom_get_default_pad+0xb0>
    46c4:	e04b      	b.n	475e <_sercom_get_default_pad+0x13e>
    46c6:	2b02      	cmp	r3, #2
    46c8:	d006      	beq.n	46d8 <_sercom_get_default_pad+0xb8>
    46ca:	2b03      	cmp	r3, #3
    46cc:	d006      	beq.n	46dc <_sercom_get_default_pad+0xbc>
    46ce:	e046      	b.n	475e <_sercom_get_default_pad+0x13e>
    46d0:	4b32      	ldr	r3, [pc, #200]	; (479c <_sercom_get_default_pad+0x17c>)
    46d2:	e045      	b.n	4760 <_sercom_get_default_pad+0x140>
    46d4:	4b32      	ldr	r3, [pc, #200]	; (47a0 <_sercom_get_default_pad+0x180>)
    46d6:	e043      	b.n	4760 <_sercom_get_default_pad+0x140>
    46d8:	4b32      	ldr	r3, [pc, #200]	; (47a4 <_sercom_get_default_pad+0x184>)
    46da:	e041      	b.n	4760 <_sercom_get_default_pad+0x140>
    46dc:	4b32      	ldr	r3, [pc, #200]	; (47a8 <_sercom_get_default_pad+0x188>)
    46de:	e03f      	b.n	4760 <_sercom_get_default_pad+0x140>
    46e0:	1cfb      	adds	r3, r7, #3
    46e2:	781b      	ldrb	r3, [r3, #0]
    46e4:	2b01      	cmp	r3, #1
    46e6:	d00a      	beq.n	46fe <_sercom_get_default_pad+0xde>
    46e8:	dc02      	bgt.n	46f0 <_sercom_get_default_pad+0xd0>
    46ea:	2b00      	cmp	r3, #0
    46ec:	d005      	beq.n	46fa <_sercom_get_default_pad+0xda>
    46ee:	e036      	b.n	475e <_sercom_get_default_pad+0x13e>
    46f0:	2b02      	cmp	r3, #2
    46f2:	d006      	beq.n	4702 <_sercom_get_default_pad+0xe2>
    46f4:	2b03      	cmp	r3, #3
    46f6:	d006      	beq.n	4706 <_sercom_get_default_pad+0xe6>
    46f8:	e031      	b.n	475e <_sercom_get_default_pad+0x13e>
    46fa:	4b2c      	ldr	r3, [pc, #176]	; (47ac <_sercom_get_default_pad+0x18c>)
    46fc:	e030      	b.n	4760 <_sercom_get_default_pad+0x140>
    46fe:	4b2c      	ldr	r3, [pc, #176]	; (47b0 <_sercom_get_default_pad+0x190>)
    4700:	e02e      	b.n	4760 <_sercom_get_default_pad+0x140>
    4702:	4b2c      	ldr	r3, [pc, #176]	; (47b4 <_sercom_get_default_pad+0x194>)
    4704:	e02c      	b.n	4760 <_sercom_get_default_pad+0x140>
    4706:	4b2c      	ldr	r3, [pc, #176]	; (47b8 <_sercom_get_default_pad+0x198>)
    4708:	e02a      	b.n	4760 <_sercom_get_default_pad+0x140>
    470a:	1cfb      	adds	r3, r7, #3
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	2b01      	cmp	r3, #1
    4710:	d00a      	beq.n	4728 <_sercom_get_default_pad+0x108>
    4712:	dc02      	bgt.n	471a <_sercom_get_default_pad+0xfa>
    4714:	2b00      	cmp	r3, #0
    4716:	d005      	beq.n	4724 <_sercom_get_default_pad+0x104>
    4718:	e021      	b.n	475e <_sercom_get_default_pad+0x13e>
    471a:	2b02      	cmp	r3, #2
    471c:	d006      	beq.n	472c <_sercom_get_default_pad+0x10c>
    471e:	2b03      	cmp	r3, #3
    4720:	d006      	beq.n	4730 <_sercom_get_default_pad+0x110>
    4722:	e01c      	b.n	475e <_sercom_get_default_pad+0x13e>
    4724:	4b25      	ldr	r3, [pc, #148]	; (47bc <_sercom_get_default_pad+0x19c>)
    4726:	e01b      	b.n	4760 <_sercom_get_default_pad+0x140>
    4728:	4b25      	ldr	r3, [pc, #148]	; (47c0 <_sercom_get_default_pad+0x1a0>)
    472a:	e019      	b.n	4760 <_sercom_get_default_pad+0x140>
    472c:	4b25      	ldr	r3, [pc, #148]	; (47c4 <_sercom_get_default_pad+0x1a4>)
    472e:	e017      	b.n	4760 <_sercom_get_default_pad+0x140>
    4730:	4b25      	ldr	r3, [pc, #148]	; (47c8 <_sercom_get_default_pad+0x1a8>)
    4732:	e015      	b.n	4760 <_sercom_get_default_pad+0x140>
    4734:	1cfb      	adds	r3, r7, #3
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	2b01      	cmp	r3, #1
    473a:	d00a      	beq.n	4752 <_sercom_get_default_pad+0x132>
    473c:	dc02      	bgt.n	4744 <_sercom_get_default_pad+0x124>
    473e:	2b00      	cmp	r3, #0
    4740:	d005      	beq.n	474e <_sercom_get_default_pad+0x12e>
    4742:	e00c      	b.n	475e <_sercom_get_default_pad+0x13e>
    4744:	2b02      	cmp	r3, #2
    4746:	d006      	beq.n	4756 <_sercom_get_default_pad+0x136>
    4748:	2b03      	cmp	r3, #3
    474a:	d006      	beq.n	475a <_sercom_get_default_pad+0x13a>
    474c:	e007      	b.n	475e <_sercom_get_default_pad+0x13e>
    474e:	4b1f      	ldr	r3, [pc, #124]	; (47cc <_sercom_get_default_pad+0x1ac>)
    4750:	e006      	b.n	4760 <_sercom_get_default_pad+0x140>
    4752:	4b1f      	ldr	r3, [pc, #124]	; (47d0 <_sercom_get_default_pad+0x1b0>)
    4754:	e004      	b.n	4760 <_sercom_get_default_pad+0x140>
    4756:	4b1f      	ldr	r3, [pc, #124]	; (47d4 <_sercom_get_default_pad+0x1b4>)
    4758:	e002      	b.n	4760 <_sercom_get_default_pad+0x140>
    475a:	4b1f      	ldr	r3, [pc, #124]	; (47d8 <_sercom_get_default_pad+0x1b8>)
    475c:	e000      	b.n	4760 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    475e:	2300      	movs	r3, #0
}
    4760:	0018      	movs	r0, r3
    4762:	46bd      	mov	sp, r7
    4764:	b002      	add	sp, #8
    4766:	bd80      	pop	{r7, pc}
    4768:	42001000 	.word	0x42001000
    476c:	42000800 	.word	0x42000800
    4770:	42000c00 	.word	0x42000c00
    4774:	42001800 	.word	0x42001800
    4778:	42001c00 	.word	0x42001c00
    477c:	42001400 	.word	0x42001400
    4780:	00040003 	.word	0x00040003
    4784:	00050003 	.word	0x00050003
    4788:	00060003 	.word	0x00060003
    478c:	00070003 	.word	0x00070003
    4790:	00010003 	.word	0x00010003
    4794:	001e0003 	.word	0x001e0003
    4798:	001f0003 	.word	0x001f0003
    479c:	00080003 	.word	0x00080003
    47a0:	00090003 	.word	0x00090003
    47a4:	000a0003 	.word	0x000a0003
    47a8:	000b0003 	.word	0x000b0003
    47ac:	00100003 	.word	0x00100003
    47b0:	00110003 	.word	0x00110003
    47b4:	00120003 	.word	0x00120003
    47b8:	00130003 	.word	0x00130003
    47bc:	000c0003 	.word	0x000c0003
    47c0:	000d0003 	.word	0x000d0003
    47c4:	000e0003 	.word	0x000e0003
    47c8:	000f0003 	.word	0x000f0003
    47cc:	00160003 	.word	0x00160003
    47d0:	00170003 	.word	0x00170003
    47d4:	00180003 	.word	0x00180003
    47d8:	00190003 	.word	0x00190003

000047dc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    47dc:	b590      	push	{r4, r7, lr}
    47de:	b08b      	sub	sp, #44	; 0x2c
    47e0:	af00      	add	r7, sp, #0
    47e2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    47e4:	230c      	movs	r3, #12
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	4a0f      	ldr	r2, [pc, #60]	; (4828 <_sercom_get_sercom_inst_index+0x4c>)
    47ea:	ca13      	ldmia	r2!, {r0, r1, r4}
    47ec:	c313      	stmia	r3!, {r0, r1, r4}
    47ee:	ca13      	ldmia	r2!, {r0, r1, r4}
    47f0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    47f2:	2300      	movs	r3, #0
    47f4:	627b      	str	r3, [r7, #36]	; 0x24
    47f6:	e00e      	b.n	4816 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    47f8:	230c      	movs	r3, #12
    47fa:	18fb      	adds	r3, r7, r3
    47fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    47fe:	0092      	lsls	r2, r2, #2
    4800:	58d3      	ldr	r3, [r2, r3]
    4802:	1e1a      	subs	r2, r3, #0
    4804:	687b      	ldr	r3, [r7, #4]
    4806:	429a      	cmp	r2, r3
    4808:	d102      	bne.n	4810 <_sercom_get_sercom_inst_index+0x34>
			return i;
    480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    480c:	b2db      	uxtb	r3, r3
    480e:	e006      	b.n	481e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4812:	3301      	adds	r3, #1
    4814:	627b      	str	r3, [r7, #36]	; 0x24
    4816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4818:	2b05      	cmp	r3, #5
    481a:	d9ed      	bls.n	47f8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    481c:	2300      	movs	r3, #0
}
    481e:	0018      	movs	r0, r3
    4820:	46bd      	mov	sp, r7
    4822:	b00b      	add	sp, #44	; 0x2c
    4824:	bd90      	pop	{r4, r7, pc}
    4826:	46c0      	nop			; (mov r8, r8)
    4828:	0000c4a0 	.word	0x0000c4a0

0000482c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    482c:	b580      	push	{r7, lr}
    482e:	b082      	sub	sp, #8
    4830:	af00      	add	r7, sp, #0
    4832:	0002      	movs	r2, r0
    4834:	1dfb      	adds	r3, r7, #7
    4836:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4838:	46c0      	nop			; (mov r8, r8)
    483a:	46bd      	mov	sp, r7
    483c:	b002      	add	sp, #8
    483e:	bd80      	pop	{r7, pc}

00004840 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4840:	b580      	push	{r7, lr}
    4842:	b084      	sub	sp, #16
    4844:	af00      	add	r7, sp, #0
    4846:	0002      	movs	r2, r0
    4848:	6039      	str	r1, [r7, #0]
    484a:	1dfb      	adds	r3, r7, #7
    484c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    484e:	4b13      	ldr	r3, [pc, #76]	; (489c <_sercom_set_handler+0x5c>)
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	2201      	movs	r2, #1
    4854:	4053      	eors	r3, r2
    4856:	b2db      	uxtb	r3, r3
    4858:	2b00      	cmp	r3, #0
    485a:	d015      	beq.n	4888 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    485c:	2300      	movs	r3, #0
    485e:	60fb      	str	r3, [r7, #12]
    4860:	e00c      	b.n	487c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4862:	4b0f      	ldr	r3, [pc, #60]	; (48a0 <_sercom_set_handler+0x60>)
    4864:	68fa      	ldr	r2, [r7, #12]
    4866:	0092      	lsls	r2, r2, #2
    4868:	490e      	ldr	r1, [pc, #56]	; (48a4 <_sercom_set_handler+0x64>)
    486a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    486c:	4b0e      	ldr	r3, [pc, #56]	; (48a8 <_sercom_set_handler+0x68>)
    486e:	68fa      	ldr	r2, [r7, #12]
    4870:	0092      	lsls	r2, r2, #2
    4872:	2100      	movs	r1, #0
    4874:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4876:	68fb      	ldr	r3, [r7, #12]
    4878:	3301      	adds	r3, #1
    487a:	60fb      	str	r3, [r7, #12]
    487c:	68fb      	ldr	r3, [r7, #12]
    487e:	2b05      	cmp	r3, #5
    4880:	d9ef      	bls.n	4862 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4882:	4b06      	ldr	r3, [pc, #24]	; (489c <_sercom_set_handler+0x5c>)
    4884:	2201      	movs	r2, #1
    4886:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4888:	1dfb      	adds	r3, r7, #7
    488a:	781a      	ldrb	r2, [r3, #0]
    488c:	4b04      	ldr	r3, [pc, #16]	; (48a0 <_sercom_set_handler+0x60>)
    488e:	0092      	lsls	r2, r2, #2
    4890:	6839      	ldr	r1, [r7, #0]
    4892:	50d1      	str	r1, [r2, r3]
}
    4894:	46c0      	nop			; (mov r8, r8)
    4896:	46bd      	mov	sp, r7
    4898:	b004      	add	sp, #16
    489a:	bd80      	pop	{r7, pc}
    489c:	200000d2 	.word	0x200000d2
    48a0:	200000d4 	.word	0x200000d4
    48a4:	0000482d 	.word	0x0000482d
    48a8:	200045b4 	.word	0x200045b4

000048ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    48ac:	b590      	push	{r4, r7, lr}
    48ae:	b085      	sub	sp, #20
    48b0:	af00      	add	r7, sp, #0
    48b2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    48b4:	2308      	movs	r3, #8
    48b6:	18fa      	adds	r2, r7, r3
    48b8:	4b0c      	ldr	r3, [pc, #48]	; (48ec <_sercom_get_interrupt_vector+0x40>)
    48ba:	0010      	movs	r0, r2
    48bc:	0019      	movs	r1, r3
    48be:	2306      	movs	r3, #6
    48c0:	001a      	movs	r2, r3
    48c2:	4b0b      	ldr	r3, [pc, #44]	; (48f0 <_sercom_get_interrupt_vector+0x44>)
    48c4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    48c6:	230f      	movs	r3, #15
    48c8:	18fc      	adds	r4, r7, r3
    48ca:	687b      	ldr	r3, [r7, #4]
    48cc:	0018      	movs	r0, r3
    48ce:	4b09      	ldr	r3, [pc, #36]	; (48f4 <_sercom_get_interrupt_vector+0x48>)
    48d0:	4798      	blx	r3
    48d2:	0003      	movs	r3, r0
    48d4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    48d6:	230f      	movs	r3, #15
    48d8:	18fb      	adds	r3, r7, r3
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	2208      	movs	r2, #8
    48de:	18ba      	adds	r2, r7, r2
    48e0:	5cd3      	ldrb	r3, [r2, r3]
    48e2:	b25b      	sxtb	r3, r3
}
    48e4:	0018      	movs	r0, r3
    48e6:	46bd      	mov	sp, r7
    48e8:	b005      	add	sp, #20
    48ea:	bd90      	pop	{r4, r7, pc}
    48ec:	0000c4b8 	.word	0x0000c4b8
    48f0:	0000a249 	.word	0x0000a249
    48f4:	000047dd 	.word	0x000047dd

000048f8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    48f8:	b580      	push	{r7, lr}
    48fa:	af00      	add	r7, sp, #0
    48fc:	4b03      	ldr	r3, [pc, #12]	; (490c <SERCOM0_Handler+0x14>)
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	2000      	movs	r0, #0
    4902:	4798      	blx	r3
    4904:	46c0      	nop			; (mov r8, r8)
    4906:	46bd      	mov	sp, r7
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	200000d4 	.word	0x200000d4

00004910 <SERCOM1_Handler>:
    4910:	b580      	push	{r7, lr}
    4912:	af00      	add	r7, sp, #0
    4914:	4b03      	ldr	r3, [pc, #12]	; (4924 <SERCOM1_Handler+0x14>)
    4916:	685b      	ldr	r3, [r3, #4]
    4918:	2001      	movs	r0, #1
    491a:	4798      	blx	r3
    491c:	46c0      	nop			; (mov r8, r8)
    491e:	46bd      	mov	sp, r7
    4920:	bd80      	pop	{r7, pc}
    4922:	46c0      	nop			; (mov r8, r8)
    4924:	200000d4 	.word	0x200000d4

00004928 <SERCOM2_Handler>:
    4928:	b580      	push	{r7, lr}
    492a:	af00      	add	r7, sp, #0
    492c:	4b03      	ldr	r3, [pc, #12]	; (493c <SERCOM2_Handler+0x14>)
    492e:	689b      	ldr	r3, [r3, #8]
    4930:	2002      	movs	r0, #2
    4932:	4798      	blx	r3
    4934:	46c0      	nop			; (mov r8, r8)
    4936:	46bd      	mov	sp, r7
    4938:	bd80      	pop	{r7, pc}
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	200000d4 	.word	0x200000d4

00004940 <SERCOM3_Handler>:
    4940:	b580      	push	{r7, lr}
    4942:	af00      	add	r7, sp, #0
    4944:	4b03      	ldr	r3, [pc, #12]	; (4954 <SERCOM3_Handler+0x14>)
    4946:	68db      	ldr	r3, [r3, #12]
    4948:	2003      	movs	r0, #3
    494a:	4798      	blx	r3
    494c:	46c0      	nop			; (mov r8, r8)
    494e:	46bd      	mov	sp, r7
    4950:	bd80      	pop	{r7, pc}
    4952:	46c0      	nop			; (mov r8, r8)
    4954:	200000d4 	.word	0x200000d4

00004958 <SERCOM4_Handler>:
    4958:	b580      	push	{r7, lr}
    495a:	af00      	add	r7, sp, #0
    495c:	4b03      	ldr	r3, [pc, #12]	; (496c <SERCOM4_Handler+0x14>)
    495e:	691b      	ldr	r3, [r3, #16]
    4960:	2004      	movs	r0, #4
    4962:	4798      	blx	r3
    4964:	46c0      	nop			; (mov r8, r8)
    4966:	46bd      	mov	sp, r7
    4968:	bd80      	pop	{r7, pc}
    496a:	46c0      	nop			; (mov r8, r8)
    496c:	200000d4 	.word	0x200000d4

00004970 <SERCOM5_Handler>:
    4970:	b580      	push	{r7, lr}
    4972:	af00      	add	r7, sp, #0
    4974:	4b03      	ldr	r3, [pc, #12]	; (4984 <SERCOM5_Handler+0x14>)
    4976:	695b      	ldr	r3, [r3, #20]
    4978:	2005      	movs	r0, #5
    497a:	4798      	blx	r3
    497c:	46c0      	nop			; (mov r8, r8)
    497e:	46bd      	mov	sp, r7
    4980:	bd80      	pop	{r7, pc}
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	200000d4 	.word	0x200000d4

00004988 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4988:	b580      	push	{r7, lr}
    498a:	b082      	sub	sp, #8
    498c:	af00      	add	r7, sp, #0
    498e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4990:	687b      	ldr	r3, [r7, #4]
    4992:	2280      	movs	r2, #128	; 0x80
    4994:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4996:	687b      	ldr	r3, [r7, #4]
    4998:	2200      	movs	r2, #0
    499a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    499c:	687b      	ldr	r3, [r7, #4]
    499e:	2201      	movs	r2, #1
    49a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	2200      	movs	r2, #0
    49a6:	70da      	strb	r2, [r3, #3]
}
    49a8:	46c0      	nop			; (mov r8, r8)
    49aa:	46bd      	mov	sp, r7
    49ac:	b002      	add	sp, #8
    49ae:	bd80      	pop	{r7, pc}

000049b0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    49b0:	b580      	push	{r7, lr}
    49b2:	b084      	sub	sp, #16
    49b4:	af00      	add	r7, sp, #0
    49b6:	0002      	movs	r2, r0
    49b8:	1dfb      	adds	r3, r7, #7
    49ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    49bc:	230f      	movs	r3, #15
    49be:	18fb      	adds	r3, r7, r3
    49c0:	1dfa      	adds	r2, r7, #7
    49c2:	7812      	ldrb	r2, [r2, #0]
    49c4:	09d2      	lsrs	r2, r2, #7
    49c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    49c8:	230e      	movs	r3, #14
    49ca:	18fb      	adds	r3, r7, r3
    49cc:	1dfa      	adds	r2, r7, #7
    49ce:	7812      	ldrb	r2, [r2, #0]
    49d0:	0952      	lsrs	r2, r2, #5
    49d2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    49d4:	4b0d      	ldr	r3, [pc, #52]	; (4a0c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    49d6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    49d8:	230f      	movs	r3, #15
    49da:	18fb      	adds	r3, r7, r3
    49dc:	781b      	ldrb	r3, [r3, #0]
    49de:	2b00      	cmp	r3, #0
    49e0:	d10f      	bne.n	4a02 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    49e2:	230f      	movs	r3, #15
    49e4:	18fb      	adds	r3, r7, r3
    49e6:	781b      	ldrb	r3, [r3, #0]
    49e8:	009b      	lsls	r3, r3, #2
    49ea:	2210      	movs	r2, #16
    49ec:	4694      	mov	ip, r2
    49ee:	44bc      	add	ip, r7
    49f0:	4463      	add	r3, ip
    49f2:	3b08      	subs	r3, #8
    49f4:	681a      	ldr	r2, [r3, #0]
    49f6:	230e      	movs	r3, #14
    49f8:	18fb      	adds	r3, r7, r3
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	01db      	lsls	r3, r3, #7
    49fe:	18d3      	adds	r3, r2, r3
    4a00:	e000      	b.n	4a04 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4a02:	2300      	movs	r3, #0
	}
}
    4a04:	0018      	movs	r0, r3
    4a06:	46bd      	mov	sp, r7
    4a08:	b004      	add	sp, #16
    4a0a:	bd80      	pop	{r7, pc}
    4a0c:	41004400 	.word	0x41004400

00004a10 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4a10:	b580      	push	{r7, lr}
    4a12:	b082      	sub	sp, #8
    4a14:	af00      	add	r7, sp, #0
    4a16:	0002      	movs	r2, r0
    4a18:	1dfb      	adds	r3, r7, #7
    4a1a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4a1c:	1dfb      	adds	r3, r7, #7
    4a1e:	781b      	ldrb	r3, [r3, #0]
    4a20:	0018      	movs	r0, r3
    4a22:	4b03      	ldr	r3, [pc, #12]	; (4a30 <port_get_group_from_gpio_pin+0x20>)
    4a24:	4798      	blx	r3
    4a26:	0003      	movs	r3, r0
}
    4a28:	0018      	movs	r0, r3
    4a2a:	46bd      	mov	sp, r7
    4a2c:	b002      	add	sp, #8
    4a2e:	bd80      	pop	{r7, pc}
    4a30:	000049b1 	.word	0x000049b1

00004a34 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4a34:	b580      	push	{r7, lr}
    4a36:	b084      	sub	sp, #16
    4a38:	af00      	add	r7, sp, #0
    4a3a:	0002      	movs	r2, r0
    4a3c:	1dfb      	adds	r3, r7, #7
    4a3e:	701a      	strb	r2, [r3, #0]
    4a40:	1dbb      	adds	r3, r7, #6
    4a42:	1c0a      	adds	r2, r1, #0
    4a44:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4a46:	1dfb      	adds	r3, r7, #7
    4a48:	781b      	ldrb	r3, [r3, #0]
    4a4a:	0018      	movs	r0, r3
    4a4c:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <port_pin_set_output_level+0x50>)
    4a4e:	4798      	blx	r3
    4a50:	0003      	movs	r3, r0
    4a52:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4a54:	1dfb      	adds	r3, r7, #7
    4a56:	781b      	ldrb	r3, [r3, #0]
    4a58:	221f      	movs	r2, #31
    4a5a:	4013      	ands	r3, r2
    4a5c:	2201      	movs	r2, #1
    4a5e:	409a      	lsls	r2, r3
    4a60:	0013      	movs	r3, r2
    4a62:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4a64:	1dbb      	adds	r3, r7, #6
    4a66:	781b      	ldrb	r3, [r3, #0]
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d003      	beq.n	4a74 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4a6c:	68fb      	ldr	r3, [r7, #12]
    4a6e:	68ba      	ldr	r2, [r7, #8]
    4a70:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4a72:	e002      	b.n	4a7a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4a74:	68fb      	ldr	r3, [r7, #12]
    4a76:	68ba      	ldr	r2, [r7, #8]
    4a78:	615a      	str	r2, [r3, #20]
	}
}
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	46bd      	mov	sp, r7
    4a7e:	b004      	add	sp, #16
    4a80:	bd80      	pop	{r7, pc}
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	00004a11 	.word	0x00004a11

00004a88 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4a88:	b580      	push	{r7, lr}
    4a8a:	b082      	sub	sp, #8
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	2200      	movs	r2, #0
    4a94:	701a      	strb	r2, [r3, #0]
}
    4a96:	46c0      	nop			; (mov r8, r8)
    4a98:	46bd      	mov	sp, r7
    4a9a:	b002      	add	sp, #8
    4a9c:	bd80      	pop	{r7, pc}
    4a9e:	46c0      	nop			; (mov r8, r8)

00004aa0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4aa0:	b580      	push	{r7, lr}
    4aa2:	b082      	sub	sp, #8
    4aa4:	af00      	add	r7, sp, #0
    4aa6:	0002      	movs	r2, r0
    4aa8:	6039      	str	r1, [r7, #0]
    4aaa:	1dfb      	adds	r3, r7, #7
    4aac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4aae:	1dfb      	adds	r3, r7, #7
    4ab0:	781b      	ldrb	r3, [r3, #0]
    4ab2:	2b01      	cmp	r3, #1
    4ab4:	d00a      	beq.n	4acc <system_apb_clock_set_mask+0x2c>
    4ab6:	2b02      	cmp	r3, #2
    4ab8:	d00f      	beq.n	4ada <system_apb_clock_set_mask+0x3a>
    4aba:	2b00      	cmp	r3, #0
    4abc:	d114      	bne.n	4ae8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4abe:	4b0e      	ldr	r3, [pc, #56]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4ac0:	4a0d      	ldr	r2, [pc, #52]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4ac2:	6991      	ldr	r1, [r2, #24]
    4ac4:	683a      	ldr	r2, [r7, #0]
    4ac6:	430a      	orrs	r2, r1
    4ac8:	619a      	str	r2, [r3, #24]
			break;
    4aca:	e00f      	b.n	4aec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4acc:	4b0a      	ldr	r3, [pc, #40]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4ace:	4a0a      	ldr	r2, [pc, #40]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4ad0:	69d1      	ldr	r1, [r2, #28]
    4ad2:	683a      	ldr	r2, [r7, #0]
    4ad4:	430a      	orrs	r2, r1
    4ad6:	61da      	str	r2, [r3, #28]
			break;
    4ad8:	e008      	b.n	4aec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4ada:	4b07      	ldr	r3, [pc, #28]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4adc:	4a06      	ldr	r2, [pc, #24]	; (4af8 <system_apb_clock_set_mask+0x58>)
    4ade:	6a11      	ldr	r1, [r2, #32]
    4ae0:	683a      	ldr	r2, [r7, #0]
    4ae2:	430a      	orrs	r2, r1
    4ae4:	621a      	str	r2, [r3, #32]
			break;
    4ae6:	e001      	b.n	4aec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4ae8:	2317      	movs	r3, #23
    4aea:	e000      	b.n	4aee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4aec:	2300      	movs	r3, #0
}
    4aee:	0018      	movs	r0, r3
    4af0:	46bd      	mov	sp, r7
    4af2:	b002      	add	sp, #8
    4af4:	bd80      	pop	{r7, pc}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	40000400 	.word	0x40000400

00004afc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    4afc:	b580      	push	{r7, lr}
    4afe:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4b00:	4b05      	ldr	r3, [pc, #20]	; (4b18 <system_is_debugger_present+0x1c>)
    4b02:	789b      	ldrb	r3, [r3, #2]
    4b04:	b2db      	uxtb	r3, r3
    4b06:	001a      	movs	r2, r3
    4b08:	2302      	movs	r3, #2
    4b0a:	4013      	ands	r3, r2
    4b0c:	1e5a      	subs	r2, r3, #1
    4b0e:	4193      	sbcs	r3, r2
    4b10:	b2db      	uxtb	r3, r3
}
    4b12:	0018      	movs	r0, r3
    4b14:	46bd      	mov	sp, r7
    4b16:	bd80      	pop	{r7, pc}
    4b18:	41002000 	.word	0x41002000

00004b1c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4b1c:	b580      	push	{r7, lr}
    4b1e:	b084      	sub	sp, #16
    4b20:	af00      	add	r7, sp, #0
    4b22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	681b      	ldr	r3, [r3, #0]
    4b28:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b2a:	68fb      	ldr	r3, [r7, #12]
    4b2c:	7e1b      	ldrb	r3, [r3, #24]
    4b2e:	b2db      	uxtb	r3, r3
    4b30:	001a      	movs	r2, r3
    4b32:	2301      	movs	r3, #1
    4b34:	4013      	ands	r3, r2
    4b36:	1e5a      	subs	r2, r3, #1
    4b38:	4193      	sbcs	r3, r2
    4b3a:	b2db      	uxtb	r3, r3
}
    4b3c:	0018      	movs	r0, r3
    4b3e:	46bd      	mov	sp, r7
    4b40:	b004      	add	sp, #16
    4b42:	bd80      	pop	{r7, pc}

00004b44 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    4b44:	b580      	push	{r7, lr}
    4b46:	b084      	sub	sp, #16
    4b48:	af00      	add	r7, sp, #0
    4b4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4b4c:	687b      	ldr	r3, [r7, #4]
    4b4e:	681b      	ldr	r3, [r3, #0]
    4b50:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b52:	68fb      	ldr	r3, [r7, #12]
    4b54:	7e1b      	ldrb	r3, [r3, #24]
    4b56:	b2db      	uxtb	r3, r3
    4b58:	001a      	movs	r2, r3
    4b5a:	2304      	movs	r3, #4
    4b5c:	4013      	ands	r3, r2
    4b5e:	1e5a      	subs	r2, r3, #1
    4b60:	4193      	sbcs	r3, r2
    4b62:	b2db      	uxtb	r3, r3
}
    4b64:	0018      	movs	r0, r3
    4b66:	46bd      	mov	sp, r7
    4b68:	b004      	add	sp, #16
    4b6a:	bd80      	pop	{r7, pc}

00004b6c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b084      	sub	sp, #16
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
    4b74:	000a      	movs	r2, r1
    4b76:	1cbb      	adds	r3, r7, #2
    4b78:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4b7a:	687b      	ldr	r3, [r7, #4]
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4b80:	687b      	ldr	r3, [r7, #4]
    4b82:	0018      	movs	r0, r3
    4b84:	4b0a      	ldr	r3, [pc, #40]	; (4bb0 <spi_write+0x44>)
    4b86:	4798      	blx	r3
    4b88:	0003      	movs	r3, r0
    4b8a:	001a      	movs	r2, r3
    4b8c:	2301      	movs	r3, #1
    4b8e:	4053      	eors	r3, r2
    4b90:	b2db      	uxtb	r3, r3
    4b92:	2b00      	cmp	r3, #0
    4b94:	d001      	beq.n	4b9a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    4b96:	2305      	movs	r3, #5
    4b98:	e006      	b.n	4ba8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b9a:	1cbb      	adds	r3, r7, #2
    4b9c:	881b      	ldrh	r3, [r3, #0]
    4b9e:	05db      	lsls	r3, r3, #23
    4ba0:	0dda      	lsrs	r2, r3, #23
    4ba2:	68fb      	ldr	r3, [r7, #12]
    4ba4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    4ba6:	2300      	movs	r3, #0
}
    4ba8:	0018      	movs	r0, r3
    4baa:	46bd      	mov	sp, r7
    4bac:	b004      	add	sp, #16
    4bae:	bd80      	pop	{r7, pc}
    4bb0:	00004b1d 	.word	0x00004b1d

00004bb4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    4bb4:	b580      	push	{r7, lr}
    4bb6:	b084      	sub	sp, #16
    4bb8:	af00      	add	r7, sp, #0
    4bba:	6078      	str	r0, [r7, #4]
    4bbc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    4bc4:	687b      	ldr	r3, [r7, #4]
    4bc6:	0018      	movs	r0, r3
    4bc8:	4b1b      	ldr	r3, [pc, #108]	; (4c38 <spi_read+0x84>)
    4bca:	4798      	blx	r3
    4bcc:	0003      	movs	r3, r0
    4bce:	001a      	movs	r2, r3
    4bd0:	2301      	movs	r3, #1
    4bd2:	4053      	eors	r3, r2
    4bd4:	b2db      	uxtb	r3, r3
    4bd6:	2b00      	cmp	r3, #0
    4bd8:	d001      	beq.n	4bde <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4bda:	2310      	movs	r3, #16
    4bdc:	e027      	b.n	4c2e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4bde:	230f      	movs	r3, #15
    4be0:	18fb      	adds	r3, r7, r3
    4be2:	2200      	movs	r2, #0
    4be4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4be6:	68bb      	ldr	r3, [r7, #8]
    4be8:	8b5b      	ldrh	r3, [r3, #26]
    4bea:	b29b      	uxth	r3, r3
    4bec:	001a      	movs	r2, r3
    4bee:	2304      	movs	r3, #4
    4bf0:	4013      	ands	r3, r2
    4bf2:	d006      	beq.n	4c02 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    4bf4:	230f      	movs	r3, #15
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	221e      	movs	r2, #30
    4bfa:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4bfc:	68bb      	ldr	r3, [r7, #8]
    4bfe:	2204      	movs	r2, #4
    4c00:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4c02:	687b      	ldr	r3, [r7, #4]
    4c04:	799b      	ldrb	r3, [r3, #6]
    4c06:	2b01      	cmp	r3, #1
    4c08:	d108      	bne.n	4c1c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4c0a:	68bb      	ldr	r3, [r7, #8]
    4c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c0e:	b29b      	uxth	r3, r3
    4c10:	05db      	lsls	r3, r3, #23
    4c12:	0ddb      	lsrs	r3, r3, #23
    4c14:	b29a      	uxth	r2, r3
    4c16:	683b      	ldr	r3, [r7, #0]
    4c18:	801a      	strh	r2, [r3, #0]
    4c1a:	e005      	b.n	4c28 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4c1c:	68bb      	ldr	r3, [r7, #8]
    4c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c20:	b2db      	uxtb	r3, r3
    4c22:	b29a      	uxth	r2, r3
    4c24:	683b      	ldr	r3, [r7, #0]
    4c26:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4c28:	230f      	movs	r3, #15
    4c2a:	18fb      	adds	r3, r7, r3
    4c2c:	781b      	ldrb	r3, [r3, #0]
}
    4c2e:	0018      	movs	r0, r3
    4c30:	46bd      	mov	sp, r7
    4c32:	b004      	add	sp, #16
    4c34:	bd80      	pop	{r7, pc}
    4c36:	46c0      	nop			; (mov r8, r8)
    4c38:	00004b45 	.word	0x00004b45

00004c3c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    4c3c:	b590      	push	{r4, r7, lr}
    4c3e:	b093      	sub	sp, #76	; 0x4c
    4c40:	af00      	add	r7, sp, #0
    4c42:	6078      	str	r0, [r7, #4]
    4c44:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c46:	687b      	ldr	r3, [r7, #4]
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	681b      	ldr	r3, [r3, #0]
    4c50:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4c52:	231c      	movs	r3, #28
    4c54:	18fb      	adds	r3, r7, r3
    4c56:	0018      	movs	r0, r3
    4c58:	4b75      	ldr	r3, [pc, #468]	; (4e30 <_spi_set_config+0x1f4>)
    4c5a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c5c:	231c      	movs	r3, #28
    4c5e:	18fb      	adds	r3, r7, r3
    4c60:	2200      	movs	r2, #0
    4c62:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4c64:	683b      	ldr	r3, [r7, #0]
    4c66:	781b      	ldrb	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d103      	bne.n	4c74 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4c6c:	231c      	movs	r3, #28
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	2200      	movs	r2, #0
    4c72:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    4c74:	683b      	ldr	r3, [r7, #0]
    4c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4c78:	230c      	movs	r3, #12
    4c7a:	18fb      	adds	r3, r7, r3
    4c7c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4c7e:	683b      	ldr	r3, [r7, #0]
    4c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4c82:	230c      	movs	r3, #12
    4c84:	18fb      	adds	r3, r7, r3
    4c86:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4c88:	683b      	ldr	r3, [r7, #0]
    4c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4c8c:	230c      	movs	r3, #12
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    4c92:	683b      	ldr	r3, [r7, #0]
    4c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    4c96:	230c      	movs	r3, #12
    4c98:	18fb      	adds	r3, r7, r3
    4c9a:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4c9c:	2347      	movs	r3, #71	; 0x47
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	2200      	movs	r2, #0
    4ca2:	701a      	strb	r2, [r3, #0]
    4ca4:	e02c      	b.n	4d00 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ca6:	2347      	movs	r3, #71	; 0x47
    4ca8:	18fb      	adds	r3, r7, r3
    4caa:	781a      	ldrb	r2, [r3, #0]
    4cac:	230c      	movs	r3, #12
    4cae:	18fb      	adds	r3, r7, r3
    4cb0:	0092      	lsls	r2, r2, #2
    4cb2:	58d3      	ldr	r3, [r2, r3]
    4cb4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    4cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cb8:	2b00      	cmp	r3, #0
    4cba:	d109      	bne.n	4cd0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4cbc:	2347      	movs	r3, #71	; 0x47
    4cbe:	18fb      	adds	r3, r7, r3
    4cc0:	781a      	ldrb	r2, [r3, #0]
    4cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4cc4:	0011      	movs	r1, r2
    4cc6:	0018      	movs	r0, r3
    4cc8:	4b5a      	ldr	r3, [pc, #360]	; (4e34 <_spi_set_config+0x1f8>)
    4cca:	4798      	blx	r3
    4ccc:	0003      	movs	r3, r0
    4cce:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cd2:	3301      	adds	r3, #1
    4cd4:	d00d      	beq.n	4cf2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4cd8:	b2da      	uxtb	r2, r3
    4cda:	231c      	movs	r3, #28
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4ce2:	0c1b      	lsrs	r3, r3, #16
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	221c      	movs	r2, #28
    4ce8:	18ba      	adds	r2, r7, r2
    4cea:	0011      	movs	r1, r2
    4cec:	0018      	movs	r0, r3
    4cee:	4b52      	ldr	r3, [pc, #328]	; (4e38 <_spi_set_config+0x1fc>)
    4cf0:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4cf2:	2347      	movs	r3, #71	; 0x47
    4cf4:	18fb      	adds	r3, r7, r3
    4cf6:	781a      	ldrb	r2, [r3, #0]
    4cf8:	2347      	movs	r3, #71	; 0x47
    4cfa:	18fb      	adds	r3, r7, r3
    4cfc:	3201      	adds	r2, #1
    4cfe:	701a      	strb	r2, [r3, #0]
    4d00:	2347      	movs	r3, #71	; 0x47
    4d02:	18fb      	adds	r3, r7, r3
    4d04:	781b      	ldrb	r3, [r3, #0]
    4d06:	2b03      	cmp	r3, #3
    4d08:	d9cd      	bls.n	4ca6 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    4d0a:	683b      	ldr	r3, [r7, #0]
    4d0c:	781a      	ldrb	r2, [r3, #0]
    4d0e:	687b      	ldr	r3, [r7, #4]
    4d10:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4d12:	683b      	ldr	r3, [r7, #0]
    4d14:	7c1a      	ldrb	r2, [r3, #16]
    4d16:	687b      	ldr	r3, [r7, #4]
    4d18:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    4d1a:	683b      	ldr	r3, [r7, #0]
    4d1c:	7c9a      	ldrb	r2, [r3, #18]
    4d1e:	687b      	ldr	r3, [r7, #4]
    4d20:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4d22:	683b      	ldr	r3, [r7, #0]
    4d24:	7d1a      	ldrb	r2, [r3, #20]
    4d26:	687b      	ldr	r3, [r7, #4]
    4d28:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4d2a:	230a      	movs	r3, #10
    4d2c:	18fb      	adds	r3, r7, r3
    4d2e:	2200      	movs	r2, #0
    4d30:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4d32:	2300      	movs	r3, #0
    4d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4d36:	2300      	movs	r3, #0
    4d38:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    4d3a:	683b      	ldr	r3, [r7, #0]
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	2b01      	cmp	r3, #1
    4d40:	d129      	bne.n	4d96 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	681b      	ldr	r3, [r3, #0]
    4d46:	0018      	movs	r0, r3
    4d48:	4b3c      	ldr	r3, [pc, #240]	; (4e3c <_spi_set_config+0x200>)
    4d4a:	4798      	blx	r3
    4d4c:	0003      	movs	r3, r0
    4d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d52:	3314      	adds	r3, #20
    4d54:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4d58:	b2db      	uxtb	r3, r3
    4d5a:	0018      	movs	r0, r3
    4d5c:	4b38      	ldr	r3, [pc, #224]	; (4e40 <_spi_set_config+0x204>)
    4d5e:	4798      	blx	r3
    4d60:	0003      	movs	r3, r0
    4d62:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4d64:	683b      	ldr	r3, [r7, #0]
    4d66:	699b      	ldr	r3, [r3, #24]
    4d68:	2223      	movs	r2, #35	; 0x23
    4d6a:	18bc      	adds	r4, r7, r2
    4d6c:	220a      	movs	r2, #10
    4d6e:	18ba      	adds	r2, r7, r2
    4d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4d72:	0018      	movs	r0, r3
    4d74:	4b33      	ldr	r3, [pc, #204]	; (4e44 <_spi_set_config+0x208>)
    4d76:	4798      	blx	r3
    4d78:	0003      	movs	r3, r0
    4d7a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4d7c:	2323      	movs	r3, #35	; 0x23
    4d7e:	18fb      	adds	r3, r7, r3
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	2b00      	cmp	r3, #0
    4d84:	d001      	beq.n	4d8a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    4d86:	2317      	movs	r3, #23
    4d88:	e04e      	b.n	4e28 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4d8a:	230a      	movs	r3, #10
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	881b      	ldrh	r3, [r3, #0]
    4d90:	b2da      	uxtb	r2, r3
    4d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4d94:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    4d96:	683b      	ldr	r3, [r7, #0]
    4d98:	685b      	ldr	r3, [r3, #4]
    4d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4d9c:	4313      	orrs	r3, r2
    4d9e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4da0:	683b      	ldr	r3, [r7, #0]
    4da2:	689b      	ldr	r3, [r3, #8]
    4da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4da6:	4313      	orrs	r3, r2
    4da8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4daa:	683b      	ldr	r3, [r7, #0]
    4dac:	68db      	ldr	r3, [r3, #12]
    4dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4db0:	4313      	orrs	r3, r2
    4db2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    4db4:	683b      	ldr	r3, [r7, #0]
    4db6:	7c1b      	ldrb	r3, [r3, #16]
    4db8:	001a      	movs	r2, r3
    4dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4dbc:	4313      	orrs	r3, r2
    4dbe:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4dc0:	683b      	ldr	r3, [r7, #0]
    4dc2:	7c5b      	ldrb	r3, [r3, #17]
    4dc4:	2b00      	cmp	r3, #0
    4dc6:	d103      	bne.n	4dd0 <_spi_set_config+0x194>
    4dc8:	4b1f      	ldr	r3, [pc, #124]	; (4e48 <_spi_set_config+0x20c>)
    4dca:	4798      	blx	r3
    4dcc:	1e03      	subs	r3, r0, #0
    4dce:	d003      	beq.n	4dd8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4dd2:	2280      	movs	r2, #128	; 0x80
    4dd4:	4313      	orrs	r3, r2
    4dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4dd8:	683b      	ldr	r3, [r7, #0]
    4dda:	7c9b      	ldrb	r3, [r3, #18]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d004      	beq.n	4dea <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4de2:	2280      	movs	r2, #128	; 0x80
    4de4:	0292      	lsls	r2, r2, #10
    4de6:	4313      	orrs	r3, r2
    4de8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4dea:	683b      	ldr	r3, [r7, #0]
    4dec:	7cdb      	ldrb	r3, [r3, #19]
    4dee:	2b00      	cmp	r3, #0
    4df0:	d004      	beq.n	4dfc <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4df4:	2280      	movs	r2, #128	; 0x80
    4df6:	0092      	lsls	r2, r2, #2
    4df8:	4313      	orrs	r3, r2
    4dfa:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4dfc:	683b      	ldr	r3, [r7, #0]
    4dfe:	7d1b      	ldrb	r3, [r3, #20]
    4e00:	2b00      	cmp	r3, #0
    4e02:	d004      	beq.n	4e0e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e06:	2280      	movs	r2, #128	; 0x80
    4e08:	0192      	lsls	r2, r2, #6
    4e0a:	4313      	orrs	r3, r2
    4e0c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e10:	681a      	ldr	r2, [r3, #0]
    4e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e14:	431a      	orrs	r2, r3
    4e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e18:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e1c:	685a      	ldr	r2, [r3, #4]
    4e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e20:	431a      	orrs	r2, r3
    4e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4e24:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4e26:	2300      	movs	r3, #0
}
    4e28:	0018      	movs	r0, r3
    4e2a:	46bd      	mov	sp, r7
    4e2c:	b013      	add	sp, #76	; 0x4c
    4e2e:	bd90      	pop	{r4, r7, pc}
    4e30:	00004989 	.word	0x00004989
    4e34:	00004621 	.word	0x00004621
    4e38:	000064bd 	.word	0x000064bd
    4e3c:	000047dd 	.word	0x000047dd
    4e40:	000062f5 	.word	0x000062f5
    4e44:	00004519 	.word	0x00004519
    4e48:	00004afd 	.word	0x00004afd

00004e4c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4e4c:	b590      	push	{r4, r7, lr}
    4e4e:	b08b      	sub	sp, #44	; 0x2c
    4e50:	af00      	add	r7, sp, #0
    4e52:	60f8      	str	r0, [r7, #12]
    4e54:	60b9      	str	r1, [r7, #8]
    4e56:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4e58:	68fb      	ldr	r3, [r7, #12]
    4e5a:	68ba      	ldr	r2, [r7, #8]
    4e5c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4e5e:	68fb      	ldr	r3, [r7, #12]
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4e64:	6a3b      	ldr	r3, [r7, #32]
    4e66:	681b      	ldr	r3, [r3, #0]
    4e68:	2202      	movs	r2, #2
    4e6a:	4013      	ands	r3, r2
    4e6c:	d001      	beq.n	4e72 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4e6e:	231c      	movs	r3, #28
    4e70:	e09c      	b.n	4fac <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4e72:	6a3b      	ldr	r3, [r7, #32]
    4e74:	681b      	ldr	r3, [r3, #0]
    4e76:	2201      	movs	r2, #1
    4e78:	4013      	ands	r3, r2
    4e7a:	d001      	beq.n	4e80 <spi_init+0x34>
		return STATUS_BUSY;
    4e7c:	2305      	movs	r3, #5
    4e7e:	e095      	b.n	4fac <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e80:	68fb      	ldr	r3, [r7, #12]
    4e82:	681b      	ldr	r3, [r3, #0]
    4e84:	0018      	movs	r0, r3
    4e86:	4b4b      	ldr	r3, [pc, #300]	; (4fb4 <spi_init+0x168>)
    4e88:	4798      	blx	r3
    4e8a:	0003      	movs	r3, r0
    4e8c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4e8e:	69fb      	ldr	r3, [r7, #28]
    4e90:	3302      	adds	r3, #2
    4e92:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e94:	69fb      	ldr	r3, [r7, #28]
    4e96:	3314      	adds	r3, #20
    4e98:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e9a:	2201      	movs	r2, #1
    4e9c:	69bb      	ldr	r3, [r7, #24]
    4e9e:	409a      	lsls	r2, r3
    4ea0:	0013      	movs	r3, r2
    4ea2:	0019      	movs	r1, r3
    4ea4:	2002      	movs	r0, #2
    4ea6:	4b44      	ldr	r3, [pc, #272]	; (4fb8 <spi_init+0x16c>)
    4ea8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4eaa:	2310      	movs	r3, #16
    4eac:	18fb      	adds	r3, r7, r3
    4eae:	0018      	movs	r0, r3
    4eb0:	4b42      	ldr	r3, [pc, #264]	; (4fbc <spi_init+0x170>)
    4eb2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2224      	movs	r2, #36	; 0x24
    4eb8:	5c9a      	ldrb	r2, [r3, r2]
    4eba:	2310      	movs	r3, #16
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4ec0:	697b      	ldr	r3, [r7, #20]
    4ec2:	b2db      	uxtb	r3, r3
    4ec4:	2210      	movs	r2, #16
    4ec6:	18ba      	adds	r2, r7, r2
    4ec8:	0011      	movs	r1, r2
    4eca:	0018      	movs	r0, r3
    4ecc:	4b3c      	ldr	r3, [pc, #240]	; (4fc0 <spi_init+0x174>)
    4ece:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4ed0:	697b      	ldr	r3, [r7, #20]
    4ed2:	b2db      	uxtb	r3, r3
    4ed4:	0018      	movs	r0, r3
    4ed6:	4b3b      	ldr	r3, [pc, #236]	; (4fc4 <spi_init+0x178>)
    4ed8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4eda:	687b      	ldr	r3, [r7, #4]
    4edc:	2224      	movs	r2, #36	; 0x24
    4ede:	5c9b      	ldrb	r3, [r3, r2]
    4ee0:	2100      	movs	r1, #0
    4ee2:	0018      	movs	r0, r3
    4ee4:	4b38      	ldr	r3, [pc, #224]	; (4fc8 <spi_init+0x17c>)
    4ee6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	781b      	ldrb	r3, [r3, #0]
    4eec:	2b01      	cmp	r3, #1
    4eee:	d105      	bne.n	4efc <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4ef0:	6a3b      	ldr	r3, [r7, #32]
    4ef2:	681b      	ldr	r3, [r3, #0]
    4ef4:	220c      	movs	r2, #12
    4ef6:	431a      	orrs	r2, r3
    4ef8:	6a3b      	ldr	r3, [r7, #32]
    4efa:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4efc:	2327      	movs	r3, #39	; 0x27
    4efe:	18fb      	adds	r3, r7, r3
    4f00:	2200      	movs	r2, #0
    4f02:	701a      	strb	r2, [r3, #0]
    4f04:	e010      	b.n	4f28 <spi_init+0xdc>
		module->callback[i]        = NULL;
    4f06:	2327      	movs	r3, #39	; 0x27
    4f08:	18fb      	adds	r3, r7, r3
    4f0a:	781b      	ldrb	r3, [r3, #0]
    4f0c:	68fa      	ldr	r2, [r7, #12]
    4f0e:	3302      	adds	r3, #2
    4f10:	009b      	lsls	r3, r3, #2
    4f12:	18d3      	adds	r3, r2, r3
    4f14:	3304      	adds	r3, #4
    4f16:	2200      	movs	r2, #0
    4f18:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4f1a:	2327      	movs	r3, #39	; 0x27
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	781a      	ldrb	r2, [r3, #0]
    4f20:	2327      	movs	r3, #39	; 0x27
    4f22:	18fb      	adds	r3, r7, r3
    4f24:	3201      	adds	r2, #1
    4f26:	701a      	strb	r2, [r3, #0]
    4f28:	2327      	movs	r3, #39	; 0x27
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	781b      	ldrb	r3, [r3, #0]
    4f2e:	2b06      	cmp	r3, #6
    4f30:	d9e9      	bls.n	4f06 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    4f32:	68fb      	ldr	r3, [r7, #12]
    4f34:	2200      	movs	r2, #0
    4f36:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4f38:	68fb      	ldr	r3, [r7, #12]
    4f3a:	2200      	movs	r2, #0
    4f3c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4f3e:	68fb      	ldr	r3, [r7, #12]
    4f40:	2200      	movs	r2, #0
    4f42:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4f44:	68fb      	ldr	r3, [r7, #12]
    4f46:	2200      	movs	r2, #0
    4f48:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    4f4a:	68fb      	ldr	r3, [r7, #12]
    4f4c:	2236      	movs	r2, #54	; 0x36
    4f4e:	2100      	movs	r1, #0
    4f50:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4f52:	68fb      	ldr	r3, [r7, #12]
    4f54:	2237      	movs	r2, #55	; 0x37
    4f56:	2100      	movs	r1, #0
    4f58:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    4f5a:	68fb      	ldr	r3, [r7, #12]
    4f5c:	2238      	movs	r2, #56	; 0x38
    4f5e:	2100      	movs	r1, #0
    4f60:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	2203      	movs	r2, #3
    4f66:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4f68:	68fb      	ldr	r3, [r7, #12]
    4f6a:	2200      	movs	r2, #0
    4f6c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4f6e:	68fb      	ldr	r3, [r7, #12]
    4f70:	681b      	ldr	r3, [r3, #0]
    4f72:	2213      	movs	r2, #19
    4f74:	18bc      	adds	r4, r7, r2
    4f76:	0018      	movs	r0, r3
    4f78:	4b0e      	ldr	r3, [pc, #56]	; (4fb4 <spi_init+0x168>)
    4f7a:	4798      	blx	r3
    4f7c:	0003      	movs	r3, r0
    4f7e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4f80:	4a12      	ldr	r2, [pc, #72]	; (4fcc <spi_init+0x180>)
    4f82:	2313      	movs	r3, #19
    4f84:	18fb      	adds	r3, r7, r3
    4f86:	781b      	ldrb	r3, [r3, #0]
    4f88:	0011      	movs	r1, r2
    4f8a:	0018      	movs	r0, r3
    4f8c:	4b10      	ldr	r3, [pc, #64]	; (4fd0 <spi_init+0x184>)
    4f8e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4f90:	2313      	movs	r3, #19
    4f92:	18fb      	adds	r3, r7, r3
    4f94:	781a      	ldrb	r2, [r3, #0]
    4f96:	4b0f      	ldr	r3, [pc, #60]	; (4fd4 <spi_init+0x188>)
    4f98:	0092      	lsls	r2, r2, #2
    4f9a:	68f9      	ldr	r1, [r7, #12]
    4f9c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	68fb      	ldr	r3, [r7, #12]
    4fa2:	0011      	movs	r1, r2
    4fa4:	0018      	movs	r0, r3
    4fa6:	4b0c      	ldr	r3, [pc, #48]	; (4fd8 <spi_init+0x18c>)
    4fa8:	4798      	blx	r3
    4faa:	0003      	movs	r3, r0
}
    4fac:	0018      	movs	r0, r3
    4fae:	46bd      	mov	sp, r7
    4fb0:	b00b      	add	sp, #44	; 0x2c
    4fb2:	bd90      	pop	{r4, r7, pc}
    4fb4:	000047dd 	.word	0x000047dd
    4fb8:	00004aa1 	.word	0x00004aa1
    4fbc:	00004a89 	.word	0x00004a89
    4fc0:	000061d1 	.word	0x000061d1
    4fc4:	00006215 	.word	0x00006215
    4fc8:	00004595 	.word	0x00004595
    4fcc:	0000530d 	.word	0x0000530d
    4fd0:	00004841 	.word	0x00004841
    4fd4:	200045b4 	.word	0x200045b4
    4fd8:	00004c3d 	.word	0x00004c3d

00004fdc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4fdc:	b580      	push	{r7, lr}
    4fde:	b086      	sub	sp, #24
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	60f8      	str	r0, [r7, #12]
    4fe4:	60b9      	str	r1, [r7, #8]
    4fe6:	1dfb      	adds	r3, r7, #7
    4fe8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	795b      	ldrb	r3, [r3, #5]
    4fee:	2b01      	cmp	r3, #1
    4ff0:	d001      	beq.n	4ff6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4ff2:	2315      	movs	r3, #21
    4ff4:	e05c      	b.n	50b0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4ff6:	68fb      	ldr	r3, [r7, #12]
    4ff8:	7a1b      	ldrb	r3, [r3, #8]
    4ffa:	2201      	movs	r2, #1
    4ffc:	4053      	eors	r3, r2
    4ffe:	b2db      	uxtb	r3, r3
    5000:	2b00      	cmp	r3, #0
    5002:	d054      	beq.n	50ae <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    5004:	1dfb      	adds	r3, r7, #7
    5006:	781b      	ldrb	r3, [r3, #0]
    5008:	2b00      	cmp	r3, #0
    500a:	d04a      	beq.n	50a2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    500c:	68bb      	ldr	r3, [r7, #8]
    500e:	785b      	ldrb	r3, [r3, #1]
    5010:	2b00      	cmp	r3, #0
    5012:	d03f      	beq.n	5094 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    5014:	68fb      	ldr	r3, [r7, #12]
    5016:	0018      	movs	r0, r3
    5018:	4b27      	ldr	r3, [pc, #156]	; (50b8 <spi_select_slave+0xdc>)
    501a:	4798      	blx	r3
    501c:	0003      	movs	r3, r0
    501e:	001a      	movs	r2, r3
    5020:	2301      	movs	r3, #1
    5022:	4053      	eors	r3, r2
    5024:	b2db      	uxtb	r3, r3
    5026:	2b00      	cmp	r3, #0
    5028:	d007      	beq.n	503a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    502a:	68bb      	ldr	r3, [r7, #8]
    502c:	781b      	ldrb	r3, [r3, #0]
    502e:	2101      	movs	r1, #1
    5030:	0018      	movs	r0, r3
    5032:	4b22      	ldr	r3, [pc, #136]	; (50bc <spi_select_slave+0xe0>)
    5034:	4798      	blx	r3
					return STATUS_BUSY;
    5036:	2305      	movs	r3, #5
    5038:	e03a      	b.n	50b0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    503a:	68bb      	ldr	r3, [r7, #8]
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	2100      	movs	r1, #0
    5040:	0018      	movs	r0, r3
    5042:	4b1e      	ldr	r3, [pc, #120]	; (50bc <spi_select_slave+0xe0>)
    5044:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    5046:	68bb      	ldr	r3, [r7, #8]
    5048:	789b      	ldrb	r3, [r3, #2]
    504a:	b29a      	uxth	r2, r3
    504c:	68fb      	ldr	r3, [r7, #12]
    504e:	0011      	movs	r1, r2
    5050:	0018      	movs	r0, r3
    5052:	4b1b      	ldr	r3, [pc, #108]	; (50c0 <spi_select_slave+0xe4>)
    5054:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    5056:	68fb      	ldr	r3, [r7, #12]
    5058:	79db      	ldrb	r3, [r3, #7]
    505a:	2201      	movs	r2, #1
    505c:	4053      	eors	r3, r2
    505e:	b2db      	uxtb	r3, r3
    5060:	2b00      	cmp	r3, #0
    5062:	d024      	beq.n	50ae <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    5064:	46c0      	nop			; (mov r8, r8)
    5066:	68fb      	ldr	r3, [r7, #12]
    5068:	0018      	movs	r0, r3
    506a:	4b16      	ldr	r3, [pc, #88]	; (50c4 <spi_select_slave+0xe8>)
    506c:	4798      	blx	r3
    506e:	0003      	movs	r3, r0
    5070:	001a      	movs	r2, r3
    5072:	2301      	movs	r3, #1
    5074:	4053      	eors	r3, r2
    5076:	b2db      	uxtb	r3, r3
    5078:	2b00      	cmp	r3, #0
    507a:	d1f4      	bne.n	5066 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    507c:	2316      	movs	r3, #22
    507e:	18fb      	adds	r3, r7, r3
    5080:	2200      	movs	r2, #0
    5082:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    5084:	2316      	movs	r3, #22
    5086:	18fa      	adds	r2, r7, r3
    5088:	68fb      	ldr	r3, [r7, #12]
    508a:	0011      	movs	r1, r2
    508c:	0018      	movs	r0, r3
    508e:	4b0e      	ldr	r3, [pc, #56]	; (50c8 <spi_select_slave+0xec>)
    5090:	4798      	blx	r3
    5092:	e00c      	b.n	50ae <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    5094:	68bb      	ldr	r3, [r7, #8]
    5096:	781b      	ldrb	r3, [r3, #0]
    5098:	2100      	movs	r1, #0
    509a:	0018      	movs	r0, r3
    509c:	4b07      	ldr	r3, [pc, #28]	; (50bc <spi_select_slave+0xe0>)
    509e:	4798      	blx	r3
    50a0:	e005      	b.n	50ae <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    50a2:	68bb      	ldr	r3, [r7, #8]
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	2101      	movs	r1, #1
    50a8:	0018      	movs	r0, r3
    50aa:	4b04      	ldr	r3, [pc, #16]	; (50bc <spi_select_slave+0xe0>)
    50ac:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    50ae:	2300      	movs	r3, #0
}
    50b0:	0018      	movs	r0, r3
    50b2:	46bd      	mov	sp, r7
    50b4:	b006      	add	sp, #24
    50b6:	bd80      	pop	{r7, pc}
    50b8:	00004b1d 	.word	0x00004b1d
    50bc:	00004a35 	.word	0x00004a35
    50c0:	00004b6d 	.word	0x00004b6d
    50c4:	00004b45 	.word	0x00004b45
    50c8:	00004bb5 	.word	0x00004bb5

000050cc <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b086      	sub	sp, #24
    50d0:	af00      	add	r7, sp, #0
    50d2:	60f8      	str	r0, [r7, #12]
    50d4:	60b9      	str	r1, [r7, #8]
    50d6:	1dbb      	adds	r3, r7, #6
    50d8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    50da:	68fb      	ldr	r3, [r7, #12]
    50dc:	1dba      	adds	r2, r7, #6
    50de:	8812      	ldrh	r2, [r2, #0]
    50e0:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    50e2:	68fb      	ldr	r3, [r7, #12]
    50e4:	1dba      	adds	r2, r7, #6
    50e6:	8812      	ldrh	r2, [r2, #0]
    50e8:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    50ea:	68fb      	ldr	r3, [r7, #12]
    50ec:	68ba      	ldr	r2, [r7, #8]
    50ee:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    50f0:	68fb      	ldr	r3, [r7, #12]
    50f2:	2238      	movs	r2, #56	; 0x38
    50f4:	2105      	movs	r1, #5
    50f6:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    50f8:	68fb      	ldr	r3, [r7, #12]
    50fa:	2201      	movs	r2, #1
    50fc:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    50fe:	68fb      	ldr	r3, [r7, #12]
    5100:	681b      	ldr	r3, [r3, #0]
    5102:	617b      	str	r3, [r7, #20]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
	}
#  endif

	if (module->receiver_enabled) {
    5104:	68fb      	ldr	r3, [r7, #12]
    5106:	79db      	ldrb	r3, [r3, #7]
    5108:	2b00      	cmp	r3, #0
    510a:	d003      	beq.n	5114 <_spi_write_buffer+0x48>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    510c:	697b      	ldr	r3, [r7, #20]
    510e:	2205      	movs	r2, #5
    5110:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    5112:	e002      	b.n	511a <_spi_write_buffer+0x4e>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5114:	697b      	ldr	r3, [r7, #20]
    5116:	2201      	movs	r2, #1
    5118:	759a      	strb	r2, [r3, #22]
	}
}
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	46bd      	mov	sp, r7
    511e:	b006      	add	sp, #24
    5120:	bd80      	pop	{r7, pc}
    5122:	46c0      	nop			; (mov r8, r8)

00005124 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    5124:	b580      	push	{r7, lr}
    5126:	b084      	sub	sp, #16
    5128:	af00      	add	r7, sp, #0
    512a:	60f8      	str	r0, [r7, #12]
    512c:	60b9      	str	r1, [r7, #8]
    512e:	1dfb      	adds	r3, r7, #7
    5130:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5132:	1dfb      	adds	r3, r7, #7
    5134:	781b      	ldrb	r3, [r3, #0]
    5136:	68fa      	ldr	r2, [r7, #12]
    5138:	3302      	adds	r3, #2
    513a:	009b      	lsls	r3, r3, #2
    513c:	18d3      	adds	r3, r2, r3
    513e:	3304      	adds	r3, #4
    5140:	68ba      	ldr	r2, [r7, #8]
    5142:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    5144:	68fb      	ldr	r3, [r7, #12]
    5146:	2236      	movs	r2, #54	; 0x36
    5148:	5c9b      	ldrb	r3, [r3, r2]
    514a:	b25a      	sxtb	r2, r3
    514c:	1dfb      	adds	r3, r7, #7
    514e:	781b      	ldrb	r3, [r3, #0]
    5150:	2101      	movs	r1, #1
    5152:	4099      	lsls	r1, r3
    5154:	000b      	movs	r3, r1
    5156:	b25b      	sxtb	r3, r3
    5158:	4313      	orrs	r3, r2
    515a:	b25b      	sxtb	r3, r3
    515c:	b2d9      	uxtb	r1, r3
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	2236      	movs	r2, #54	; 0x36
    5162:	5499      	strb	r1, [r3, r2]
}
    5164:	46c0      	nop			; (mov r8, r8)
    5166:	46bd      	mov	sp, r7
    5168:	b004      	add	sp, #16
    516a:	bd80      	pop	{r7, pc}

0000516c <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    516c:	b580      	push	{r7, lr}
    516e:	b084      	sub	sp, #16
    5170:	af00      	add	r7, sp, #0
    5172:	60f8      	str	r0, [r7, #12]
    5174:	60b9      	str	r1, [r7, #8]
    5176:	1dbb      	adds	r3, r7, #6
    5178:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    517a:	1dbb      	adds	r3, r7, #6
    517c:	881b      	ldrh	r3, [r3, #0]
    517e:	2b00      	cmp	r3, #0
    5180:	d101      	bne.n	5186 <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5182:	2317      	movs	r3, #23
    5184:	e00f      	b.n	51a6 <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    5186:	68fb      	ldr	r3, [r7, #12]
    5188:	2238      	movs	r2, #56	; 0x38
    518a:	5c9b      	ldrb	r3, [r3, r2]
    518c:	b2db      	uxtb	r3, r3
    518e:	2b05      	cmp	r3, #5
    5190:	d101      	bne.n	5196 <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    5192:	2305      	movs	r3, #5
    5194:	e007      	b.n	51a6 <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    5196:	1dbb      	adds	r3, r7, #6
    5198:	881a      	ldrh	r2, [r3, #0]
    519a:	68b9      	ldr	r1, [r7, #8]
    519c:	68fb      	ldr	r3, [r7, #12]
    519e:	0018      	movs	r0, r3
    51a0:	4b03      	ldr	r3, [pc, #12]	; (51b0 <spi_write_buffer_job+0x44>)
    51a2:	4798      	blx	r3

	return STATUS_OK;
    51a4:	2300      	movs	r3, #0
}
    51a6:	0018      	movs	r0, r3
    51a8:	46bd      	mov	sp, r7
    51aa:	b004      	add	sp, #16
    51ac:	bd80      	pop	{r7, pc}
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	000050cd 	.word	0x000050cd

000051b4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    51b4:	b580      	push	{r7, lr}
    51b6:	b084      	sub	sp, #16
    51b8:	af00      	add	r7, sp, #0
    51ba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	681b      	ldr	r3, [r3, #0]
    51c0:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51c6:	781b      	ldrb	r3, [r3, #0]
    51c8:	b2da      	uxtb	r2, r3
    51ca:	230e      	movs	r3, #14
    51cc:	18fb      	adds	r3, r7, r3
    51ce:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51d4:	1c5a      	adds	r2, r3, #1
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51da:	687b      	ldr	r3, [r7, #4]
    51dc:	799b      	ldrb	r3, [r3, #6]
    51de:	2b01      	cmp	r3, #1
    51e0:	d113      	bne.n	520a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	b2db      	uxtb	r3, r3
    51ea:	021b      	lsls	r3, r3, #8
    51ec:	b21a      	sxth	r2, r3
    51ee:	230e      	movs	r3, #14
    51f0:	18fb      	adds	r3, r7, r3
    51f2:	2100      	movs	r1, #0
    51f4:	5e5b      	ldrsh	r3, [r3, r1]
    51f6:	4313      	orrs	r3, r2
    51f8:	b21a      	sxth	r2, r3
    51fa:	230e      	movs	r3, #14
    51fc:	18fb      	adds	r3, r7, r3
    51fe:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5204:	1c5a      	adds	r2, r3, #1
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    520a:	230e      	movs	r3, #14
    520c:	18fb      	adds	r3, r7, r3
    520e:	881b      	ldrh	r3, [r3, #0]
    5210:	05db      	lsls	r3, r3, #23
    5212:	0dda      	lsrs	r2, r3, #23
    5214:	68bb      	ldr	r3, [r7, #8]
    5216:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    521c:	b29b      	uxth	r3, r3
    521e:	3b01      	subs	r3, #1
    5220:	b29a      	uxth	r2, r3
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	869a      	strh	r2, [r3, #52]	; 0x34
}
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	46bd      	mov	sp, r7
    522a:	b004      	add	sp, #16
    522c:	bd80      	pop	{r7, pc}
    522e:	46c0      	nop			; (mov r8, r8)

00005230 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    5230:	b580      	push	{r7, lr}
    5232:	b084      	sub	sp, #16
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	681b      	ldr	r3, [r3, #0]
    523c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    523e:	4b08      	ldr	r3, [pc, #32]	; (5260 <_spi_write_dummy+0x30>)
    5240:	881b      	ldrh	r3, [r3, #0]
    5242:	001a      	movs	r2, r3
    5244:	68fb      	ldr	r3, [r7, #12]
    5246:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    524c:	b29b      	uxth	r3, r3
    524e:	3b01      	subs	r3, #1
    5250:	b29a      	uxth	r2, r3
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5256:	46c0      	nop			; (mov r8, r8)
    5258:	46bd      	mov	sp, r7
    525a:	b004      	add	sp, #16
    525c:	bd80      	pop	{r7, pc}
    525e:	46c0      	nop			; (mov r8, r8)
    5260:	200045cc 	.word	0x200045cc

00005264 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    5264:	b580      	push	{r7, lr}
    5266:	b084      	sub	sp, #16
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	681b      	ldr	r3, [r3, #0]
    5270:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    5272:	230a      	movs	r3, #10
    5274:	18fb      	adds	r3, r7, r3
    5276:	2200      	movs	r2, #0
    5278:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    527a:	68fb      	ldr	r3, [r7, #12]
    527c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    527e:	230a      	movs	r3, #10
    5280:	18fb      	adds	r3, r7, r3
    5282:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5284:	687b      	ldr	r3, [r7, #4]
    5286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5288:	b29b      	uxth	r3, r3
    528a:	3b01      	subs	r3, #1
    528c:	b29a      	uxth	r2, r3
    528e:	687b      	ldr	r3, [r7, #4]
    5290:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	46bd      	mov	sp, r7
    5296:	b004      	add	sp, #16
    5298:	bd80      	pop	{r7, pc}
    529a:	46c0      	nop			; (mov r8, r8)

0000529c <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    529c:	b580      	push	{r7, lr}
    529e:	b084      	sub	sp, #16
    52a0:	af00      	add	r7, sp, #0
    52a2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	681b      	ldr	r3, [r3, #0]
    52a8:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    52aa:	68fb      	ldr	r3, [r7, #12]
    52ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52ae:	b29a      	uxth	r2, r3
    52b0:	230a      	movs	r3, #10
    52b2:	18fb      	adds	r3, r7, r3
    52b4:	05d2      	lsls	r2, r2, #23
    52b6:	0dd2      	lsrs	r2, r2, #23
    52b8:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52be:	220a      	movs	r2, #10
    52c0:	18ba      	adds	r2, r7, r2
    52c2:	8812      	ldrh	r2, [r2, #0]
    52c4:	b2d2      	uxtb	r2, r2
    52c6:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    52c8:	687b      	ldr	r3, [r7, #4]
    52ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52cc:	1c5a      	adds	r2, r3, #1
    52ce:	687b      	ldr	r3, [r7, #4]
    52d0:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52d2:	687b      	ldr	r3, [r7, #4]
    52d4:	799b      	ldrb	r3, [r3, #6]
    52d6:	2b01      	cmp	r3, #1
    52d8:	d10d      	bne.n	52f6 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52de:	220a      	movs	r2, #10
    52e0:	18ba      	adds	r2, r7, r2
    52e2:	8812      	ldrh	r2, [r2, #0]
    52e4:	0a12      	lsrs	r2, r2, #8
    52e6:	b292      	uxth	r2, r2
    52e8:	b2d2      	uxtb	r2, r2
    52ea:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52f0:	1c5a      	adds	r2, r3, #1
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    52f6:	687b      	ldr	r3, [r7, #4]
    52f8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    52fa:	b29b      	uxth	r3, r3
    52fc:	3b01      	subs	r3, #1
    52fe:	b29a      	uxth	r2, r3
    5300:	687b      	ldr	r3, [r7, #4]
    5302:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5304:	46c0      	nop			; (mov r8, r8)
    5306:	46bd      	mov	sp, r7
    5308:	b004      	add	sp, #16
    530a:	bd80      	pop	{r7, pc}

0000530c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    530c:	b580      	push	{r7, lr}
    530e:	b086      	sub	sp, #24
    5310:	af00      	add	r7, sp, #0
    5312:	0002      	movs	r2, r0
    5314:	1dfb      	adds	r3, r7, #7
    5316:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    5318:	1dfb      	adds	r3, r7, #7
    531a:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    531c:	4b96      	ldr	r3, [pc, #600]	; (5578 <_spi_interrupt_handler+0x26c>)
    531e:	0092      	lsls	r2, r2, #2
    5320:	58d3      	ldr	r3, [r2, r3]
    5322:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5324:	697b      	ldr	r3, [r7, #20]
    5326:	681b      	ldr	r3, [r3, #0]
    5328:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    532a:	697b      	ldr	r3, [r7, #20]
    532c:	2237      	movs	r2, #55	; 0x37
    532e:	5c9a      	ldrb	r2, [r3, r2]
    5330:	697b      	ldr	r3, [r7, #20]
    5332:	2136      	movs	r1, #54	; 0x36
    5334:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    5336:	230f      	movs	r3, #15
    5338:	18fb      	adds	r3, r7, r3
    533a:	400a      	ands	r2, r1
    533c:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    533e:	693b      	ldr	r3, [r7, #16]
    5340:	7e1b      	ldrb	r3, [r3, #24]
    5342:	b2da      	uxtb	r2, r3
    5344:	230c      	movs	r3, #12
    5346:	18fb      	adds	r3, r7, r3
    5348:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    534a:	693b      	ldr	r3, [r7, #16]
    534c:	7d9b      	ldrb	r3, [r3, #22]
    534e:	b2db      	uxtb	r3, r3
    5350:	b29a      	uxth	r2, r3
    5352:	230c      	movs	r3, #12
    5354:	18fb      	adds	r3, r7, r3
    5356:	210c      	movs	r1, #12
    5358:	1879      	adds	r1, r7, r1
    535a:	8809      	ldrh	r1, [r1, #0]
    535c:	400a      	ands	r2, r1
    535e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5360:	230c      	movs	r3, #12
    5362:	18fb      	adds	r3, r7, r3
    5364:	881b      	ldrh	r3, [r3, #0]
    5366:	2201      	movs	r2, #1
    5368:	4013      	ands	r3, r2
    536a:	d038      	beq.n	53de <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    536c:	697b      	ldr	r3, [r7, #20]
    536e:	795b      	ldrb	r3, [r3, #5]
    5370:	2b01      	cmp	r3, #1
    5372:	d110      	bne.n	5396 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    5374:	697b      	ldr	r3, [r7, #20]
    5376:	7a5b      	ldrb	r3, [r3, #9]
    5378:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    537a:	2b00      	cmp	r3, #0
    537c:	d10b      	bne.n	5396 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    537e:	697b      	ldr	r3, [r7, #20]
    5380:	0018      	movs	r0, r3
    5382:	4b7e      	ldr	r3, [pc, #504]	; (557c <_spi_interrupt_handler+0x270>)
    5384:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    5386:	697b      	ldr	r3, [r7, #20]
    5388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    538a:	b29b      	uxth	r3, r3
    538c:	2b00      	cmp	r3, #0
    538e:	d102      	bne.n	5396 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5390:	693b      	ldr	r3, [r7, #16]
    5392:	2201      	movs	r2, #1
    5394:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5396:	697b      	ldr	r3, [r7, #20]
    5398:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    539a:	2b01      	cmp	r3, #1
    539c:	d11f      	bne.n	53de <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    539e:	697b      	ldr	r3, [r7, #20]
    53a0:	7a5b      	ldrb	r3, [r3, #9]
    53a2:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    53a4:	2b00      	cmp	r3, #0
    53a6:	d01a      	beq.n	53de <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    53a8:	697b      	ldr	r3, [r7, #20]
    53aa:	0018      	movs	r0, r3
    53ac:	4b74      	ldr	r3, [pc, #464]	; (5580 <_spi_interrupt_handler+0x274>)
    53ae:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    53b0:	697b      	ldr	r3, [r7, #20]
    53b2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    53b4:	b29b      	uxth	r3, r3
    53b6:	2b00      	cmp	r3, #0
    53b8:	d111      	bne.n	53de <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    53ba:	693b      	ldr	r3, [r7, #16]
    53bc:	2201      	movs	r2, #1
    53be:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    53c0:	697b      	ldr	r3, [r7, #20]
    53c2:	7a5b      	ldrb	r3, [r3, #9]
    53c4:	b2db      	uxtb	r3, r3
    53c6:	2b01      	cmp	r3, #1
    53c8:	d109      	bne.n	53de <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    53ca:	697b      	ldr	r3, [r7, #20]
    53cc:	79db      	ldrb	r3, [r3, #7]
    53ce:	2201      	movs	r2, #1
    53d0:	4053      	eors	r3, r2
    53d2:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    53d4:	2b00      	cmp	r3, #0
    53d6:	d002      	beq.n	53de <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    53d8:	693b      	ldr	r3, [r7, #16]
    53da:	2202      	movs	r2, #2
    53dc:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    53de:	230c      	movs	r3, #12
    53e0:	18fb      	adds	r3, r7, r3
    53e2:	881b      	ldrh	r3, [r3, #0]
    53e4:	2204      	movs	r2, #4
    53e6:	4013      	ands	r3, r2
    53e8:	d100      	bne.n	53ec <_spi_interrupt_handler+0xe0>
    53ea:	e07e      	b.n	54ea <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    53ec:	693b      	ldr	r3, [r7, #16]
    53ee:	8b5b      	ldrh	r3, [r3, #26]
    53f0:	b29b      	uxth	r3, r3
    53f2:	001a      	movs	r2, r3
    53f4:	2304      	movs	r3, #4
    53f6:	4013      	ands	r3, r2
    53f8:	d022      	beq.n	5440 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    53fa:	697b      	ldr	r3, [r7, #20]
    53fc:	7a5b      	ldrb	r3, [r3, #9]
    53fe:	b2db      	uxtb	r3, r3
    5400:	2b01      	cmp	r3, #1
    5402:	d014      	beq.n	542e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5404:	697b      	ldr	r3, [r7, #20]
    5406:	2238      	movs	r2, #56	; 0x38
    5408:	211e      	movs	r1, #30
    540a:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    540c:	697b      	ldr	r3, [r7, #20]
    540e:	2203      	movs	r2, #3
    5410:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5412:	693b      	ldr	r3, [r7, #16]
    5414:	2205      	movs	r2, #5
    5416:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5418:	230f      	movs	r3, #15
    541a:	18fb      	adds	r3, r7, r3
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	2208      	movs	r2, #8
    5420:	4013      	ands	r3, r2
    5422:	d004      	beq.n	542e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5424:	697b      	ldr	r3, [r7, #20]
    5426:	699b      	ldr	r3, [r3, #24]
    5428:	697a      	ldr	r2, [r7, #20]
    542a:	0010      	movs	r0, r2
    542c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    542e:	693b      	ldr	r3, [r7, #16]
    5430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5432:	230a      	movs	r3, #10
    5434:	18fb      	adds	r3, r7, r3
    5436:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5438:	693b      	ldr	r3, [r7, #16]
    543a:	2204      	movs	r2, #4
    543c:	835a      	strh	r2, [r3, #26]
    543e:	e054      	b.n	54ea <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5440:	697b      	ldr	r3, [r7, #20]
    5442:	7a5b      	ldrb	r3, [r3, #9]
    5444:	b2db      	uxtb	r3, r3
    5446:	2b01      	cmp	r3, #1
    5448:	d11e      	bne.n	5488 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    544a:	697b      	ldr	r3, [r7, #20]
    544c:	0018      	movs	r0, r3
    544e:	4b4d      	ldr	r3, [pc, #308]	; (5584 <_spi_interrupt_handler+0x278>)
    5450:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    5452:	697b      	ldr	r3, [r7, #20]
    5454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5456:	b29b      	uxth	r3, r3
    5458:	2b00      	cmp	r3, #0
    545a:	d146      	bne.n	54ea <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    545c:	693b      	ldr	r3, [r7, #16]
    545e:	2204      	movs	r2, #4
    5460:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    5462:	697b      	ldr	r3, [r7, #20]
    5464:	2238      	movs	r2, #56	; 0x38
    5466:	2100      	movs	r1, #0
    5468:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    546a:	697b      	ldr	r3, [r7, #20]
    546c:	2203      	movs	r2, #3
    546e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5470:	230f      	movs	r3, #15
    5472:	18fb      	adds	r3, r7, r3
    5474:	781b      	ldrb	r3, [r3, #0]
    5476:	2201      	movs	r2, #1
    5478:	4013      	ands	r3, r2
    547a:	d036      	beq.n	54ea <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    547c:	697b      	ldr	r3, [r7, #20]
    547e:	68db      	ldr	r3, [r3, #12]
    5480:	697a      	ldr	r2, [r7, #20]
    5482:	0010      	movs	r0, r2
    5484:	4798      	blx	r3
    5486:	e030      	b.n	54ea <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5488:	697b      	ldr	r3, [r7, #20]
    548a:	0018      	movs	r0, r3
    548c:	4b3e      	ldr	r3, [pc, #248]	; (5588 <_spi_interrupt_handler+0x27c>)
    548e:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5490:	697b      	ldr	r3, [r7, #20]
    5492:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5494:	b29b      	uxth	r3, r3
    5496:	2b00      	cmp	r3, #0
    5498:	d127      	bne.n	54ea <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    549a:	697b      	ldr	r3, [r7, #20]
    549c:	2238      	movs	r2, #56	; 0x38
    549e:	2100      	movs	r1, #0
    54a0:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    54a2:	693b      	ldr	r3, [r7, #16]
    54a4:	2204      	movs	r2, #4
    54a6:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    54a8:	697b      	ldr	r3, [r7, #20]
    54aa:	7a5b      	ldrb	r3, [r3, #9]
    54ac:	b2db      	uxtb	r3, r3
    54ae:	2b02      	cmp	r3, #2
    54b0:	d10b      	bne.n	54ca <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    54b2:	230f      	movs	r3, #15
    54b4:	18fb      	adds	r3, r7, r3
    54b6:	781b      	ldrb	r3, [r3, #0]
    54b8:	2204      	movs	r2, #4
    54ba:	4013      	ands	r3, r2
    54bc:	d015      	beq.n	54ea <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    54be:	697b      	ldr	r3, [r7, #20]
    54c0:	695b      	ldr	r3, [r3, #20]
    54c2:	697a      	ldr	r2, [r7, #20]
    54c4:	0010      	movs	r0, r2
    54c6:	4798      	blx	r3
    54c8:	e00f      	b.n	54ea <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    54ca:	697b      	ldr	r3, [r7, #20]
    54cc:	7a5b      	ldrb	r3, [r3, #9]
    54ce:	b2db      	uxtb	r3, r3
    54d0:	2b00      	cmp	r3, #0
    54d2:	d10a      	bne.n	54ea <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    54d4:	230f      	movs	r3, #15
    54d6:	18fb      	adds	r3, r7, r3
    54d8:	781b      	ldrb	r3, [r3, #0]
    54da:	2202      	movs	r2, #2
    54dc:	4013      	ands	r3, r2
    54de:	d004      	beq.n	54ea <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    54e0:	697b      	ldr	r3, [r7, #20]
    54e2:	691b      	ldr	r3, [r3, #16]
    54e4:	697a      	ldr	r2, [r7, #20]
    54e6:	0010      	movs	r0, r2
    54e8:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    54ea:	230c      	movs	r3, #12
    54ec:	18fb      	adds	r3, r7, r3
    54ee:	881b      	ldrh	r3, [r3, #0]
    54f0:	2202      	movs	r2, #2
    54f2:	4013      	ands	r3, r2
    54f4:	d024      	beq.n	5540 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    54f6:	697b      	ldr	r3, [r7, #20]
    54f8:	795b      	ldrb	r3, [r3, #5]
    54fa:	2b01      	cmp	r3, #1
    54fc:	d120      	bne.n	5540 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    54fe:	697b      	ldr	r3, [r7, #20]
    5500:	7a5b      	ldrb	r3, [r3, #9]
    5502:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5504:	2b01      	cmp	r3, #1
    5506:	d11b      	bne.n	5540 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5508:	697b      	ldr	r3, [r7, #20]
    550a:	79db      	ldrb	r3, [r3, #7]
    550c:	2201      	movs	r2, #1
    550e:	4053      	eors	r3, r2
    5510:	b2db      	uxtb	r3, r3
    5512:	2b00      	cmp	r3, #0
    5514:	d014      	beq.n	5540 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5516:	693b      	ldr	r3, [r7, #16]
    5518:	2202      	movs	r2, #2
    551a:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    551c:	697b      	ldr	r3, [r7, #20]
    551e:	2203      	movs	r2, #3
    5520:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    5522:	697b      	ldr	r3, [r7, #20]
    5524:	2238      	movs	r2, #56	; 0x38
    5526:	2100      	movs	r1, #0
    5528:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    552a:	230f      	movs	r3, #15
    552c:	18fb      	adds	r3, r7, r3
    552e:	781b      	ldrb	r3, [r3, #0]
    5530:	2201      	movs	r2, #1
    5532:	4013      	ands	r3, r2
    5534:	d004      	beq.n	5540 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5536:	697b      	ldr	r3, [r7, #20]
    5538:	68db      	ldr	r3, [r3, #12]
    553a:	697a      	ldr	r2, [r7, #20]
    553c:	0010      	movs	r0, r2
    553e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5540:	230c      	movs	r3, #12
    5542:	18fb      	adds	r3, r7, r3
    5544:	881b      	ldrh	r3, [r3, #0]
    5546:	2280      	movs	r2, #128	; 0x80
    5548:	4013      	ands	r3, r2
    554a:	d010      	beq.n	556e <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    554c:	693b      	ldr	r3, [r7, #16]
    554e:	2280      	movs	r2, #128	; 0x80
    5550:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5552:	693b      	ldr	r3, [r7, #16]
    5554:	2280      	movs	r2, #128	; 0x80
    5556:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5558:	230f      	movs	r3, #15
    555a:	18fb      	adds	r3, r7, r3
    555c:	781b      	ldrb	r3, [r3, #0]
    555e:	2240      	movs	r2, #64	; 0x40
    5560:	4013      	ands	r3, r2
    5562:	d004      	beq.n	556e <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5564:	697b      	ldr	r3, [r7, #20]
    5566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5568:	697a      	ldr	r2, [r7, #20]
    556a:	0010      	movs	r0, r2
    556c:	4798      	blx	r3
		}
	}
#  endif
}
    556e:	46c0      	nop			; (mov r8, r8)
    5570:	46bd      	mov	sp, r7
    5572:	b006      	add	sp, #24
    5574:	bd80      	pop	{r7, pc}
    5576:	46c0      	nop			; (mov r8, r8)
    5578:	200045b4 	.word	0x200045b4
    557c:	00005231 	.word	0x00005231
    5580:	000051b5 	.word	0x000051b5
    5584:	00005265 	.word	0x00005265
    5588:	0000529d 	.word	0x0000529d

0000558c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    558c:	b580      	push	{r7, lr}
    558e:	b082      	sub	sp, #8
    5590:	af00      	add	r7, sp, #0
    5592:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	2201      	movs	r2, #1
    5598:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    559a:	687b      	ldr	r3, [r7, #4]
    559c:	2200      	movs	r2, #0
    559e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	2206      	movs	r2, #6
    55a4:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	2200      	movs	r2, #0
    55aa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    55ac:	687b      	ldr	r3, [r7, #4]
    55ae:	2200      	movs	r2, #0
    55b0:	725a      	strb	r2, [r3, #9]
}
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	46bd      	mov	sp, r7
    55b6:	b002      	add	sp, #8
    55b8:	bd80      	pop	{r7, pc}
    55ba:	46c0      	nop			; (mov r8, r8)

000055bc <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    55bc:	b580      	push	{r7, lr}
    55be:	b082      	sub	sp, #8
    55c0:	af00      	add	r7, sp, #0
    55c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	2200      	movs	r2, #0
    55c8:	701a      	strb	r2, [r3, #0]
}
    55ca:	46c0      	nop			; (mov r8, r8)
    55cc:	46bd      	mov	sp, r7
    55ce:	b002      	add	sp, #8
    55d0:	bd80      	pop	{r7, pc}
    55d2:	46c0      	nop			; (mov r8, r8)

000055d4 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b082      	sub	sp, #8
    55d8:	af00      	add	r7, sp, #0
    55da:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	2200      	movs	r2, #0
    55e0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    55e2:	687b      	ldr	r3, [r7, #4]
    55e4:	2204      	movs	r2, #4
    55e6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    55e8:	687b      	ldr	r3, [r7, #4]
    55ea:	2200      	movs	r2, #0
    55ec:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    55ee:	687b      	ldr	r3, [r7, #4]
    55f0:	2280      	movs	r2, #128	; 0x80
    55f2:	0212      	lsls	r2, r2, #8
    55f4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    55f6:	687b      	ldr	r3, [r7, #4]
    55f8:	2200      	movs	r2, #0
    55fa:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    55fc:	687b      	ldr	r3, [r7, #4]
    55fe:	2201      	movs	r2, #1
    5600:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5602:	687b      	ldr	r3, [r7, #4]
    5604:	2200      	movs	r2, #0
    5606:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5608:	687b      	ldr	r3, [r7, #4]
    560a:	2201      	movs	r2, #1
    560c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    560e:	687b      	ldr	r3, [r7, #4]
    5610:	2200      	movs	r2, #0
    5612:	739a      	strb	r2, [r3, #14]
}
    5614:	46c0      	nop			; (mov r8, r8)
    5616:	46bd      	mov	sp, r7
    5618:	b002      	add	sp, #8
    561a:	bd80      	pop	{r7, pc}

0000561c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    561c:	b580      	push	{r7, lr}
    561e:	b082      	sub	sp, #8
    5620:	af00      	add	r7, sp, #0
    5622:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5624:	687b      	ldr	r3, [r7, #4]
    5626:	2203      	movs	r2, #3
    5628:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	2200      	movs	r2, #0
    562e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5630:	687b      	ldr	r3, [r7, #4]
    5632:	2201      	movs	r2, #1
    5634:	709a      	strb	r2, [r3, #2]
}
    5636:	46c0      	nop			; (mov r8, r8)
    5638:	46bd      	mov	sp, r7
    563a:	b002      	add	sp, #8
    563c:	bd80      	pop	{r7, pc}
    563e:	46c0      	nop			; (mov r8, r8)

00005640 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5648:	687b      	ldr	r3, [r7, #4]
    564a:	2200      	movs	r2, #0
    564c:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    564e:	687b      	ldr	r3, [r7, #4]
    5650:	2200      	movs	r2, #0
    5652:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	2200      	movs	r2, #0
    5658:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    565a:	687b      	ldr	r3, [r7, #4]
    565c:	2200      	movs	r2, #0
    565e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5660:	687b      	ldr	r3, [r7, #4]
    5662:	2200      	movs	r2, #0
    5664:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	2201      	movs	r2, #1
    566a:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    566c:	687b      	ldr	r3, [r7, #4]
    566e:	2207      	movs	r2, #7
    5670:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	223f      	movs	r2, #63	; 0x3f
    5676:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	2201      	movs	r2, #1
    567c:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	2201      	movs	r2, #1
    5682:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	2206      	movs	r2, #6
    5688:	821a      	strh	r2, [r3, #16]
}
    568a:	46c0      	nop			; (mov r8, r8)
    568c:	46bd      	mov	sp, r7
    568e:	b002      	add	sp, #8
    5690:	bd80      	pop	{r7, pc}
    5692:	46c0      	nop			; (mov r8, r8)

00005694 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    5694:	b580      	push	{r7, lr}
    5696:	b082      	sub	sp, #8
    5698:	af00      	add	r7, sp, #0
    569a:	0002      	movs	r2, r0
    569c:	1dfb      	adds	r3, r7, #7
    569e:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    56a0:	4a03      	ldr	r2, [pc, #12]	; (56b0 <system_cpu_clock_set_divider+0x1c>)
    56a2:	1dfb      	adds	r3, r7, #7
    56a4:	781b      	ldrb	r3, [r3, #0]
    56a6:	7213      	strb	r3, [r2, #8]
}
    56a8:	46c0      	nop			; (mov r8, r8)
    56aa:	46bd      	mov	sp, r7
    56ac:	b002      	add	sp, #8
    56ae:	bd80      	pop	{r7, pc}
    56b0:	40000400 	.word	0x40000400

000056b4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    56b4:	b580      	push	{r7, lr}
    56b6:	b082      	sub	sp, #8
    56b8:	af00      	add	r7, sp, #0
    56ba:	0002      	movs	r2, r0
    56bc:	1dfb      	adds	r3, r7, #7
    56be:	701a      	strb	r2, [r3, #0]
    56c0:	1dbb      	adds	r3, r7, #6
    56c2:	1c0a      	adds	r2, r1, #0
    56c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56c6:	1dfb      	adds	r3, r7, #7
    56c8:	781b      	ldrb	r3, [r3, #0]
    56ca:	2b01      	cmp	r3, #1
    56cc:	d008      	beq.n	56e0 <system_apb_clock_set_divider+0x2c>
    56ce:	2b02      	cmp	r3, #2
    56d0:	d00b      	beq.n	56ea <system_apb_clock_set_divider+0x36>
    56d2:	2b00      	cmp	r3, #0
    56d4:	d10e      	bne.n	56f4 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    56d6:	4a0b      	ldr	r2, [pc, #44]	; (5704 <system_apb_clock_set_divider+0x50>)
    56d8:	1dbb      	adds	r3, r7, #6
    56da:	781b      	ldrb	r3, [r3, #0]
    56dc:	7253      	strb	r3, [r2, #9]
			break;
    56de:	e00b      	b.n	56f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    56e0:	4a08      	ldr	r2, [pc, #32]	; (5704 <system_apb_clock_set_divider+0x50>)
    56e2:	1dbb      	adds	r3, r7, #6
    56e4:	781b      	ldrb	r3, [r3, #0]
    56e6:	7293      	strb	r3, [r2, #10]
			break;
    56e8:	e006      	b.n	56f8 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    56ea:	4a06      	ldr	r2, [pc, #24]	; (5704 <system_apb_clock_set_divider+0x50>)
    56ec:	1dbb      	adds	r3, r7, #6
    56ee:	781b      	ldrb	r3, [r3, #0]
    56f0:	72d3      	strb	r3, [r2, #11]
			break;
    56f2:	e001      	b.n	56f8 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    56f4:	2317      	movs	r3, #23
    56f6:	e000      	b.n	56fa <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    56f8:	2300      	movs	r3, #0
}
    56fa:	0018      	movs	r0, r3
    56fc:	46bd      	mov	sp, r7
    56fe:	b002      	add	sp, #8
    5700:	bd80      	pop	{r7, pc}
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	40000400 	.word	0x40000400

00005708 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5708:	b580      	push	{r7, lr}
    570a:	b082      	sub	sp, #8
    570c:	af00      	add	r7, sp, #0
    570e:	0002      	movs	r2, r0
    5710:	1dfb      	adds	r3, r7, #7
    5712:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5714:	4a08      	ldr	r2, [pc, #32]	; (5738 <system_flash_set_waitstates+0x30>)
    5716:	1dfb      	adds	r3, r7, #7
    5718:	781b      	ldrb	r3, [r3, #0]
    571a:	210f      	movs	r1, #15
    571c:	400b      	ands	r3, r1
    571e:	b2d9      	uxtb	r1, r3
    5720:	6853      	ldr	r3, [r2, #4]
    5722:	200f      	movs	r0, #15
    5724:	4001      	ands	r1, r0
    5726:	0049      	lsls	r1, r1, #1
    5728:	201e      	movs	r0, #30
    572a:	4383      	bics	r3, r0
    572c:	430b      	orrs	r3, r1
    572e:	6053      	str	r3, [r2, #4]
}
    5730:	46c0      	nop			; (mov r8, r8)
    5732:	46bd      	mov	sp, r7
    5734:	b002      	add	sp, #8
    5736:	bd80      	pop	{r7, pc}
    5738:	41004000 	.word	0x41004000

0000573c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    573c:	b580      	push	{r7, lr}
    573e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5740:	46c0      	nop			; (mov r8, r8)
    5742:	4b04      	ldr	r3, [pc, #16]	; (5754 <_system_dfll_wait_for_sync+0x18>)
    5744:	68db      	ldr	r3, [r3, #12]
    5746:	2210      	movs	r2, #16
    5748:	4013      	ands	r3, r2
    574a:	d0fa      	beq.n	5742 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    574c:	46c0      	nop			; (mov r8, r8)
    574e:	46bd      	mov	sp, r7
    5750:	bd80      	pop	{r7, pc}
    5752:	46c0      	nop			; (mov r8, r8)
    5754:	40000800 	.word	0x40000800

00005758 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5758:	b580      	push	{r7, lr}
    575a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    575c:	4b0c      	ldr	r3, [pc, #48]	; (5790 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    575e:	2202      	movs	r2, #2
    5760:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5762:	4b0c      	ldr	r3, [pc, #48]	; (5794 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5764:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5766:	4a0a      	ldr	r2, [pc, #40]	; (5790 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5768:	4b0b      	ldr	r3, [pc, #44]	; (5798 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    576a:	689b      	ldr	r3, [r3, #8]
    576c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    576e:	4a08      	ldr	r2, [pc, #32]	; (5790 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5770:	4b09      	ldr	r3, [pc, #36]	; (5798 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5772:	685b      	ldr	r3, [r3, #4]
    5774:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5776:	4b06      	ldr	r3, [pc, #24]	; (5790 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5778:	2200      	movs	r2, #0
    577a:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    577c:	4b05      	ldr	r3, [pc, #20]	; (5794 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    577e:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5780:	4a03      	ldr	r2, [pc, #12]	; (5790 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5782:	4b05      	ldr	r3, [pc, #20]	; (5798 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5784:	681b      	ldr	r3, [r3, #0]
    5786:	b29b      	uxth	r3, r3
    5788:	8493      	strh	r3, [r2, #36]	; 0x24
}
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	46bd      	mov	sp, r7
    578e:	bd80      	pop	{r7, pc}
    5790:	40000800 	.word	0x40000800
    5794:	0000573d 	.word	0x0000573d
    5798:	200000ec 	.word	0x200000ec

0000579c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    579c:	b580      	push	{r7, lr}
    579e:	b082      	sub	sp, #8
    57a0:	af00      	add	r7, sp, #0
    57a2:	0002      	movs	r2, r0
    57a4:	1dfb      	adds	r3, r7, #7
    57a6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    57a8:	1dfb      	adds	r3, r7, #7
    57aa:	781b      	ldrb	r3, [r3, #0]
    57ac:	2b08      	cmp	r3, #8
    57ae:	d840      	bhi.n	5832 <system_clock_source_get_hz+0x96>
    57b0:	009a      	lsls	r2, r3, #2
    57b2:	4b22      	ldr	r3, [pc, #136]	; (583c <system_clock_source_get_hz+0xa0>)
    57b4:	18d3      	adds	r3, r2, r3
    57b6:	681b      	ldr	r3, [r3, #0]
    57b8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    57ba:	4b21      	ldr	r3, [pc, #132]	; (5840 <system_clock_source_get_hz+0xa4>)
    57bc:	691b      	ldr	r3, [r3, #16]
    57be:	e039      	b.n	5834 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    57c0:	4b20      	ldr	r3, [pc, #128]	; (5844 <system_clock_source_get_hz+0xa8>)
    57c2:	6a1b      	ldr	r3, [r3, #32]
    57c4:	059b      	lsls	r3, r3, #22
    57c6:	0f9b      	lsrs	r3, r3, #30
    57c8:	b2db      	uxtb	r3, r3
    57ca:	001a      	movs	r2, r3
    57cc:	4b1e      	ldr	r3, [pc, #120]	; (5848 <system_clock_source_get_hz+0xac>)
    57ce:	40d3      	lsrs	r3, r2
    57d0:	e030      	b.n	5834 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    57d2:	2380      	movs	r3, #128	; 0x80
    57d4:	021b      	lsls	r3, r3, #8
    57d6:	e02d      	b.n	5834 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    57d8:	2380      	movs	r3, #128	; 0x80
    57da:	021b      	lsls	r3, r3, #8
    57dc:	e02a      	b.n	5834 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    57de:	4b18      	ldr	r3, [pc, #96]	; (5840 <system_clock_source_get_hz+0xa4>)
    57e0:	695b      	ldr	r3, [r3, #20]
    57e2:	e027      	b.n	5834 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    57e4:	4b16      	ldr	r3, [pc, #88]	; (5840 <system_clock_source_get_hz+0xa4>)
    57e6:	681b      	ldr	r3, [r3, #0]
    57e8:	2202      	movs	r2, #2
    57ea:	4013      	ands	r3, r2
    57ec:	d101      	bne.n	57f2 <system_clock_source_get_hz+0x56>
			return 0;
    57ee:	2300      	movs	r3, #0
    57f0:	e020      	b.n	5834 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    57f2:	4b16      	ldr	r3, [pc, #88]	; (584c <system_clock_source_get_hz+0xb0>)
    57f4:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    57f6:	4b12      	ldr	r3, [pc, #72]	; (5840 <system_clock_source_get_hz+0xa4>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	2204      	movs	r2, #4
    57fc:	4013      	ands	r3, r2
    57fe:	d009      	beq.n	5814 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5800:	2000      	movs	r0, #0
    5802:	4b13      	ldr	r3, [pc, #76]	; (5850 <system_clock_source_get_hz+0xb4>)
    5804:	4798      	blx	r3
    5806:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5808:	4b0d      	ldr	r3, [pc, #52]	; (5840 <system_clock_source_get_hz+0xa4>)
    580a:	689b      	ldr	r3, [r3, #8]
    580c:	041b      	lsls	r3, r3, #16
    580e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5810:	4353      	muls	r3, r2
    5812:	e00f      	b.n	5834 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5814:	4b0f      	ldr	r3, [pc, #60]	; (5854 <system_clock_source_get_hz+0xb8>)
    5816:	e00d      	b.n	5834 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5818:	4a0a      	ldr	r2, [pc, #40]	; (5844 <system_clock_source_get_hz+0xa8>)
    581a:	2350      	movs	r3, #80	; 0x50
    581c:	5cd3      	ldrb	r3, [r2, r3]
    581e:	b2db      	uxtb	r3, r3
    5820:	001a      	movs	r2, r3
    5822:	2304      	movs	r3, #4
    5824:	4013      	ands	r3, r2
    5826:	d101      	bne.n	582c <system_clock_source_get_hz+0x90>
			return 0;
    5828:	2300      	movs	r3, #0
    582a:	e003      	b.n	5834 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    582c:	4b04      	ldr	r3, [pc, #16]	; (5840 <system_clock_source_get_hz+0xa4>)
    582e:	68db      	ldr	r3, [r3, #12]
    5830:	e000      	b.n	5834 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5832:	2300      	movs	r3, #0
	}
}
    5834:	0018      	movs	r0, r3
    5836:	46bd      	mov	sp, r7
    5838:	b002      	add	sp, #8
    583a:	bd80      	pop	{r7, pc}
    583c:	0000c4c0 	.word	0x0000c4c0
    5840:	200000ec 	.word	0x200000ec
    5844:	40000800 	.word	0x40000800
    5848:	007a1200 	.word	0x007a1200
    584c:	0000573d 	.word	0x0000573d
    5850:	000062f5 	.word	0x000062f5
    5854:	02dc6c00 	.word	0x02dc6c00

00005858 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5858:	b580      	push	{r7, lr}
    585a:	b084      	sub	sp, #16
    585c:	af00      	add	r7, sp, #0
    585e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5860:	4b1a      	ldr	r3, [pc, #104]	; (58cc <system_clock_source_osc8m_set_config+0x74>)
    5862:	6a1b      	ldr	r3, [r3, #32]
    5864:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5866:	687b      	ldr	r3, [r7, #4]
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	1c1a      	adds	r2, r3, #0
    586c:	2303      	movs	r3, #3
    586e:	4013      	ands	r3, r2
    5870:	b2da      	uxtb	r2, r3
    5872:	230d      	movs	r3, #13
    5874:	18fb      	adds	r3, r7, r3
    5876:	2103      	movs	r1, #3
    5878:	400a      	ands	r2, r1
    587a:	0010      	movs	r0, r2
    587c:	781a      	ldrb	r2, [r3, #0]
    587e:	2103      	movs	r1, #3
    5880:	438a      	bics	r2, r1
    5882:	1c11      	adds	r1, r2, #0
    5884:	1c02      	adds	r2, r0, #0
    5886:	430a      	orrs	r2, r1
    5888:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    588a:	687b      	ldr	r3, [r7, #4]
    588c:	789a      	ldrb	r2, [r3, #2]
    588e:	230c      	movs	r3, #12
    5890:	18fb      	adds	r3, r7, r3
    5892:	01d0      	lsls	r0, r2, #7
    5894:	781a      	ldrb	r2, [r3, #0]
    5896:	217f      	movs	r1, #127	; 0x7f
    5898:	400a      	ands	r2, r1
    589a:	1c11      	adds	r1, r2, #0
    589c:	1c02      	adds	r2, r0, #0
    589e:	430a      	orrs	r2, r1
    58a0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    58a2:	687b      	ldr	r3, [r7, #4]
    58a4:	785a      	ldrb	r2, [r3, #1]
    58a6:	230c      	movs	r3, #12
    58a8:	18fb      	adds	r3, r7, r3
    58aa:	2101      	movs	r1, #1
    58ac:	400a      	ands	r2, r1
    58ae:	0190      	lsls	r0, r2, #6
    58b0:	781a      	ldrb	r2, [r3, #0]
    58b2:	2140      	movs	r1, #64	; 0x40
    58b4:	438a      	bics	r2, r1
    58b6:	1c11      	adds	r1, r2, #0
    58b8:	1c02      	adds	r2, r0, #0
    58ba:	430a      	orrs	r2, r1
    58bc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    58be:	4b03      	ldr	r3, [pc, #12]	; (58cc <system_clock_source_osc8m_set_config+0x74>)
    58c0:	68fa      	ldr	r2, [r7, #12]
    58c2:	621a      	str	r2, [r3, #32]
}
    58c4:	46c0      	nop			; (mov r8, r8)
    58c6:	46bd      	mov	sp, r7
    58c8:	b004      	add	sp, #16
    58ca:	bd80      	pop	{r7, pc}
    58cc:	40000800 	.word	0x40000800

000058d0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    58d0:	b580      	push	{r7, lr}
    58d2:	b084      	sub	sp, #16
    58d4:	af00      	add	r7, sp, #0
    58d6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    58d8:	4a43      	ldr	r2, [pc, #268]	; (59e8 <system_clock_source_xosc32k_set_config+0x118>)
    58da:	230c      	movs	r3, #12
    58dc:	18fb      	adds	r3, r7, r3
    58de:	8a92      	ldrh	r2, [r2, #20]
    58e0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	785b      	ldrb	r3, [r3, #1]
    58e6:	1c1a      	adds	r2, r3, #0
    58e8:	2307      	movs	r3, #7
    58ea:	4013      	ands	r3, r2
    58ec:	b2da      	uxtb	r2, r3
    58ee:	230c      	movs	r3, #12
    58f0:	18fb      	adds	r3, r7, r3
    58f2:	2107      	movs	r1, #7
    58f4:	400a      	ands	r2, r1
    58f6:	0010      	movs	r0, r2
    58f8:	785a      	ldrb	r2, [r3, #1]
    58fa:	2107      	movs	r1, #7
    58fc:	438a      	bics	r2, r1
    58fe:	1c11      	adds	r1, r2, #0
    5900:	1c02      	adds	r2, r0, #0
    5902:	430a      	orrs	r2, r1
    5904:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5906:	687b      	ldr	r3, [r7, #4]
    5908:	781b      	ldrb	r3, [r3, #0]
    590a:	2b00      	cmp	r3, #0
    590c:	d106      	bne.n	591c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    590e:	230c      	movs	r3, #12
    5910:	18fb      	adds	r3, r7, r3
    5912:	781a      	ldrb	r2, [r3, #0]
    5914:	2104      	movs	r1, #4
    5916:	430a      	orrs	r2, r1
    5918:	701a      	strb	r2, [r3, #0]
    591a:	e005      	b.n	5928 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    591c:	230c      	movs	r3, #12
    591e:	18fb      	adds	r3, r7, r3
    5920:	781a      	ldrb	r2, [r3, #0]
    5922:	2104      	movs	r1, #4
    5924:	438a      	bics	r2, r1
    5926:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	789a      	ldrb	r2, [r3, #2]
    592c:	230c      	movs	r3, #12
    592e:	18fb      	adds	r3, r7, r3
    5930:	2101      	movs	r1, #1
    5932:	400a      	ands	r2, r1
    5934:	0150      	lsls	r0, r2, #5
    5936:	781a      	ldrb	r2, [r3, #0]
    5938:	2120      	movs	r1, #32
    593a:	438a      	bics	r2, r1
    593c:	1c11      	adds	r1, r2, #0
    593e:	1c02      	adds	r2, r0, #0
    5940:	430a      	orrs	r2, r1
    5942:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	78da      	ldrb	r2, [r3, #3]
    5948:	230c      	movs	r3, #12
    594a:	18fb      	adds	r3, r7, r3
    594c:	2101      	movs	r1, #1
    594e:	400a      	ands	r2, r1
    5950:	0110      	lsls	r0, r2, #4
    5952:	781a      	ldrb	r2, [r3, #0]
    5954:	2110      	movs	r1, #16
    5956:	438a      	bics	r2, r1
    5958:	1c11      	adds	r1, r2, #0
    595a:	1c02      	adds	r2, r0, #0
    595c:	430a      	orrs	r2, r1
    595e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	791a      	ldrb	r2, [r3, #4]
    5964:	230c      	movs	r3, #12
    5966:	18fb      	adds	r3, r7, r3
    5968:	2101      	movs	r1, #1
    596a:	400a      	ands	r2, r1
    596c:	00d0      	lsls	r0, r2, #3
    596e:	781a      	ldrb	r2, [r3, #0]
    5970:	2108      	movs	r1, #8
    5972:	438a      	bics	r2, r1
    5974:	1c11      	adds	r1, r2, #0
    5976:	1c02      	adds	r2, r0, #0
    5978:	430a      	orrs	r2, r1
    597a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    597c:	687b      	ldr	r3, [r7, #4]
    597e:	7b5a      	ldrb	r2, [r3, #13]
    5980:	230c      	movs	r3, #12
    5982:	18fb      	adds	r3, r7, r3
    5984:	01d0      	lsls	r0, r2, #7
    5986:	781a      	ldrb	r2, [r3, #0]
    5988:	217f      	movs	r1, #127	; 0x7f
    598a:	400a      	ands	r2, r1
    598c:	1c11      	adds	r1, r2, #0
    598e:	1c02      	adds	r2, r0, #0
    5990:	430a      	orrs	r2, r1
    5992:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5994:	687b      	ldr	r3, [r7, #4]
    5996:	7b1a      	ldrb	r2, [r3, #12]
    5998:	230c      	movs	r3, #12
    599a:	18fb      	adds	r3, r7, r3
    599c:	2101      	movs	r1, #1
    599e:	400a      	ands	r2, r1
    59a0:	0190      	lsls	r0, r2, #6
    59a2:	781a      	ldrb	r2, [r3, #0]
    59a4:	2140      	movs	r1, #64	; 0x40
    59a6:	438a      	bics	r2, r1
    59a8:	1c11      	adds	r1, r2, #0
    59aa:	1c02      	adds	r2, r0, #0
    59ac:	430a      	orrs	r2, r1
    59ae:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    59b0:	687b      	ldr	r3, [r7, #4]
    59b2:	7b9a      	ldrb	r2, [r3, #14]
    59b4:	230c      	movs	r3, #12
    59b6:	18fb      	adds	r3, r7, r3
    59b8:	2101      	movs	r1, #1
    59ba:	400a      	ands	r2, r1
    59bc:	0110      	lsls	r0, r2, #4
    59be:	785a      	ldrb	r2, [r3, #1]
    59c0:	2110      	movs	r1, #16
    59c2:	438a      	bics	r2, r1
    59c4:	1c11      	adds	r1, r2, #0
    59c6:	1c02      	adds	r2, r0, #0
    59c8:	430a      	orrs	r2, r1
    59ca:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    59cc:	687b      	ldr	r3, [r7, #4]
    59ce:	689a      	ldr	r2, [r3, #8]
    59d0:	4b06      	ldr	r3, [pc, #24]	; (59ec <system_clock_source_xosc32k_set_config+0x11c>)
    59d2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    59d4:	4a04      	ldr	r2, [pc, #16]	; (59e8 <system_clock_source_xosc32k_set_config+0x118>)
    59d6:	230c      	movs	r3, #12
    59d8:	18fb      	adds	r3, r7, r3
    59da:	881b      	ldrh	r3, [r3, #0]
    59dc:	8293      	strh	r3, [r2, #20]
}
    59de:	46c0      	nop			; (mov r8, r8)
    59e0:	46bd      	mov	sp, r7
    59e2:	b004      	add	sp, #16
    59e4:	bd80      	pop	{r7, pc}
    59e6:	46c0      	nop			; (mov r8, r8)
    59e8:	40000800 	.word	0x40000800
    59ec:	200000ec 	.word	0x200000ec

000059f0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    59f0:	b580      	push	{r7, lr}
    59f2:	b082      	sub	sp, #8
    59f4:	af00      	add	r7, sp, #0
    59f6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	7a1b      	ldrb	r3, [r3, #8]
    59fc:	029b      	lsls	r3, r3, #10
    59fe:	041b      	lsls	r3, r3, #16
    5a00:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	895b      	ldrh	r3, [r3, #10]
    5a06:	059b      	lsls	r3, r3, #22
    5a08:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5a0a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5a0c:	4b2a      	ldr	r3, [pc, #168]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a0e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5a14:	687b      	ldr	r3, [r7, #4]
    5a16:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5a18:	4313      	orrs	r3, r2
    5a1a:	b2db      	uxtb	r3, r3
    5a1c:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    5a22:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5a24:	687a      	ldr	r2, [r7, #4]
    5a26:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5a28:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	785b      	ldrb	r3, [r3, #1]
    5a2e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5a30:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    5a32:	4b21      	ldr	r3, [pc, #132]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a34:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	781b      	ldrb	r3, [r3, #0]
    5a3a:	2b04      	cmp	r3, #4
    5a3c:	d116      	bne.n	5a6c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a3e:	687b      	ldr	r3, [r7, #4]
    5a40:	7b1b      	ldrb	r3, [r3, #12]
    5a42:	069b      	lsls	r3, r3, #26
    5a44:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	89db      	ldrh	r3, [r3, #14]
    5a4a:	041b      	lsls	r3, r3, #16
    5a4c:	0019      	movs	r1, r3
    5a4e:	4b1b      	ldr	r3, [pc, #108]	; (5abc <system_clock_source_dfll_set_config+0xcc>)
    5a50:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a52:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5a54:	687a      	ldr	r2, [r7, #4]
    5a56:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a58:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    5a5a:	4b17      	ldr	r3, [pc, #92]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a5c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5a5e:	4b16      	ldr	r3, [pc, #88]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a60:	681b      	ldr	r3, [r3, #0]
    5a62:	687a      	ldr	r2, [r7, #4]
    5a64:	7812      	ldrb	r2, [r2, #0]
    5a66:	431a      	orrs	r2, r3
    5a68:	4b13      	ldr	r3, [pc, #76]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a6a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5a6c:	687b      	ldr	r3, [r7, #4]
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	2b20      	cmp	r3, #32
    5a72:	d11c      	bne.n	5aae <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	7b1b      	ldrb	r3, [r3, #12]
    5a78:	069b      	lsls	r3, r3, #26
    5a7a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a7c:	687b      	ldr	r3, [r7, #4]
    5a7e:	89db      	ldrh	r3, [r3, #14]
    5a80:	041b      	lsls	r3, r3, #16
    5a82:	0019      	movs	r1, r3
    5a84:	4b0d      	ldr	r3, [pc, #52]	; (5abc <system_clock_source_dfll_set_config+0xcc>)
    5a86:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a88:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5a8a:	687a      	ldr	r2, [r7, #4]
    5a8c:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a8e:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    5a90:	4b09      	ldr	r3, [pc, #36]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a92:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5a94:	4b08      	ldr	r3, [pc, #32]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5a96:	681b      	ldr	r3, [r3, #0]
    5a98:	687a      	ldr	r2, [r7, #4]
    5a9a:	7812      	ldrb	r2, [r2, #0]
    5a9c:	2104      	movs	r1, #4
    5a9e:	430a      	orrs	r2, r1
    5aa0:	b2d2      	uxtb	r2, r2
    5aa2:	4313      	orrs	r3, r2
    5aa4:	2280      	movs	r2, #128	; 0x80
    5aa6:	00d2      	lsls	r2, r2, #3
    5aa8:	431a      	orrs	r2, r3
    5aaa:	4b03      	ldr	r3, [pc, #12]	; (5ab8 <system_clock_source_dfll_set_config+0xc8>)
    5aac:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5aae:	46c0      	nop			; (mov r8, r8)
    5ab0:	46bd      	mov	sp, r7
    5ab2:	b002      	add	sp, #8
    5ab4:	bd80      	pop	{r7, pc}
    5ab6:	46c0      	nop			; (mov r8, r8)
    5ab8:	200000ec 	.word	0x200000ec
    5abc:	03ff0000 	.word	0x03ff0000

00005ac0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5ac0:	b580      	push	{r7, lr}
    5ac2:	b082      	sub	sp, #8
    5ac4:	af00      	add	r7, sp, #0
    5ac6:	0002      	movs	r2, r0
    5ac8:	1dfb      	adds	r3, r7, #7
    5aca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5acc:	1dfb      	adds	r3, r7, #7
    5ace:	781b      	ldrb	r3, [r3, #0]
    5ad0:	2b08      	cmp	r3, #8
    5ad2:	d83b      	bhi.n	5b4c <system_clock_source_enable+0x8c>
    5ad4:	009a      	lsls	r2, r3, #2
    5ad6:	4b21      	ldr	r3, [pc, #132]	; (5b5c <system_clock_source_enable+0x9c>)
    5ad8:	18d3      	adds	r3, r2, r3
    5ada:	681b      	ldr	r3, [r3, #0]
    5adc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5ade:	4b20      	ldr	r3, [pc, #128]	; (5b60 <system_clock_source_enable+0xa0>)
    5ae0:	4a1f      	ldr	r2, [pc, #124]	; (5b60 <system_clock_source_enable+0xa0>)
    5ae2:	6a12      	ldr	r2, [r2, #32]
    5ae4:	2102      	movs	r1, #2
    5ae6:	430a      	orrs	r2, r1
    5ae8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5aea:	2300      	movs	r3, #0
    5aec:	e031      	b.n	5b52 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5aee:	4b1c      	ldr	r3, [pc, #112]	; (5b60 <system_clock_source_enable+0xa0>)
    5af0:	4a1b      	ldr	r2, [pc, #108]	; (5b60 <system_clock_source_enable+0xa0>)
    5af2:	6992      	ldr	r2, [r2, #24]
    5af4:	2102      	movs	r1, #2
    5af6:	430a      	orrs	r2, r1
    5af8:	619a      	str	r2, [r3, #24]
		break;
    5afa:	e029      	b.n	5b50 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5afc:	4a18      	ldr	r2, [pc, #96]	; (5b60 <system_clock_source_enable+0xa0>)
    5afe:	4b18      	ldr	r3, [pc, #96]	; (5b60 <system_clock_source_enable+0xa0>)
    5b00:	8a1b      	ldrh	r3, [r3, #16]
    5b02:	b29b      	uxth	r3, r3
    5b04:	2102      	movs	r1, #2
    5b06:	430b      	orrs	r3, r1
    5b08:	b29b      	uxth	r3, r3
    5b0a:	8213      	strh	r3, [r2, #16]
		break;
    5b0c:	e020      	b.n	5b50 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5b0e:	4a14      	ldr	r2, [pc, #80]	; (5b60 <system_clock_source_enable+0xa0>)
    5b10:	4b13      	ldr	r3, [pc, #76]	; (5b60 <system_clock_source_enable+0xa0>)
    5b12:	8a9b      	ldrh	r3, [r3, #20]
    5b14:	b29b      	uxth	r3, r3
    5b16:	2102      	movs	r1, #2
    5b18:	430b      	orrs	r3, r1
    5b1a:	b29b      	uxth	r3, r3
    5b1c:	8293      	strh	r3, [r2, #20]
		break;
    5b1e:	e017      	b.n	5b50 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5b20:	4b10      	ldr	r3, [pc, #64]	; (5b64 <system_clock_source_enable+0xa4>)
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	2202      	movs	r2, #2
    5b26:	431a      	orrs	r2, r3
    5b28:	4b0e      	ldr	r3, [pc, #56]	; (5b64 <system_clock_source_enable+0xa4>)
    5b2a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5b2c:	4b0e      	ldr	r3, [pc, #56]	; (5b68 <system_clock_source_enable+0xa8>)
    5b2e:	4798      	blx	r3
		break;
    5b30:	e00e      	b.n	5b50 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5b32:	4a0b      	ldr	r2, [pc, #44]	; (5b60 <system_clock_source_enable+0xa0>)
    5b34:	490a      	ldr	r1, [pc, #40]	; (5b60 <system_clock_source_enable+0xa0>)
    5b36:	2344      	movs	r3, #68	; 0x44
    5b38:	5ccb      	ldrb	r3, [r1, r3]
    5b3a:	b2db      	uxtb	r3, r3
    5b3c:	2102      	movs	r1, #2
    5b3e:	430b      	orrs	r3, r1
    5b40:	b2d9      	uxtb	r1, r3
    5b42:	2344      	movs	r3, #68	; 0x44
    5b44:	54d1      	strb	r1, [r2, r3]
		break;
    5b46:	e003      	b.n	5b50 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5b48:	2300      	movs	r3, #0
    5b4a:	e002      	b.n	5b52 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b4c:	2317      	movs	r3, #23
    5b4e:	e000      	b.n	5b52 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5b50:	2300      	movs	r3, #0
}
    5b52:	0018      	movs	r0, r3
    5b54:	46bd      	mov	sp, r7
    5b56:	b002      	add	sp, #8
    5b58:	bd80      	pop	{r7, pc}
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	0000c4e4 	.word	0x0000c4e4
    5b60:	40000800 	.word	0x40000800
    5b64:	200000ec 	.word	0x200000ec
    5b68:	00005759 	.word	0x00005759

00005b6c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b084      	sub	sp, #16
    5b70:	af00      	add	r7, sp, #0
    5b72:	0002      	movs	r2, r0
    5b74:	1dfb      	adds	r3, r7, #7
    5b76:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5b78:	2300      	movs	r3, #0
    5b7a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5b7c:	1dfb      	adds	r3, r7, #7
    5b7e:	781b      	ldrb	r3, [r3, #0]
    5b80:	2b08      	cmp	r3, #8
    5b82:	d821      	bhi.n	5bc8 <system_clock_source_is_ready+0x5c>
    5b84:	009a      	lsls	r2, r3, #2
    5b86:	4b18      	ldr	r3, [pc, #96]	; (5be8 <system_clock_source_is_ready+0x7c>)
    5b88:	18d3      	adds	r3, r2, r3
    5b8a:	681b      	ldr	r3, [r3, #0]
    5b8c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5b8e:	2308      	movs	r3, #8
    5b90:	60fb      	str	r3, [r7, #12]
		break;
    5b92:	e01b      	b.n	5bcc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5b94:	2304      	movs	r3, #4
    5b96:	60fb      	str	r3, [r7, #12]
		break;
    5b98:	e018      	b.n	5bcc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5b9a:	2301      	movs	r3, #1
    5b9c:	60fb      	str	r3, [r7, #12]
		break;
    5b9e:	e015      	b.n	5bcc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5ba0:	2302      	movs	r3, #2
    5ba2:	60fb      	str	r3, [r7, #12]
		break;
    5ba4:	e012      	b.n	5bcc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5ba6:	23d0      	movs	r3, #208	; 0xd0
    5ba8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5baa:	e00f      	b.n	5bcc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5bac:	4a0f      	ldr	r2, [pc, #60]	; (5bec <system_clock_source_is_ready+0x80>)
    5bae:	2350      	movs	r3, #80	; 0x50
    5bb0:	5cd3      	ldrb	r3, [r2, r3]
    5bb2:	b2db      	uxtb	r3, r3
    5bb4:	001a      	movs	r2, r3
    5bb6:	2303      	movs	r3, #3
    5bb8:	4013      	ands	r3, r2
    5bba:	3b03      	subs	r3, #3
    5bbc:	425a      	negs	r2, r3
    5bbe:	4153      	adcs	r3, r2
    5bc0:	b2db      	uxtb	r3, r3
    5bc2:	e00c      	b.n	5bde <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5bc4:	2301      	movs	r3, #1
    5bc6:	e00a      	b.n	5bde <system_clock_source_is_ready+0x72>

	default:
		return false;
    5bc8:	2300      	movs	r3, #0
    5bca:	e008      	b.n	5bde <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5bcc:	4b07      	ldr	r3, [pc, #28]	; (5bec <system_clock_source_is_ready+0x80>)
    5bce:	68db      	ldr	r3, [r3, #12]
    5bd0:	68fa      	ldr	r2, [r7, #12]
    5bd2:	401a      	ands	r2, r3
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	1ad3      	subs	r3, r2, r3
    5bd8:	425a      	negs	r2, r3
    5bda:	4153      	adcs	r3, r2
    5bdc:	b2db      	uxtb	r3, r3
}
    5bde:	0018      	movs	r0, r3
    5be0:	46bd      	mov	sp, r7
    5be2:	b004      	add	sp, #16
    5be4:	bd80      	pop	{r7, pc}
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	0000c508 	.word	0x0000c508
    5bec:	40000800 	.word	0x40000800

00005bf0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	b082      	sub	sp, #8
    5bf4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5bf6:	003b      	movs	r3, r7
    5bf8:	2202      	movs	r2, #2
    5bfa:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5bfc:	2300      	movs	r3, #0
    5bfe:	607b      	str	r3, [r7, #4]
    5c00:	e009      	b.n	5c16 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5c02:	687b      	ldr	r3, [r7, #4]
    5c04:	b2db      	uxtb	r3, r3
    5c06:	003a      	movs	r2, r7
    5c08:	0011      	movs	r1, r2
    5c0a:	0018      	movs	r0, r3
    5c0c:	4b05      	ldr	r3, [pc, #20]	; (5c24 <_switch_peripheral_gclk+0x34>)
    5c0e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	3301      	adds	r3, #1
    5c14:	607b      	str	r3, [r7, #4]
    5c16:	687b      	ldr	r3, [r7, #4]
    5c18:	2b24      	cmp	r3, #36	; 0x24
    5c1a:	d9f2      	bls.n	5c02 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    5c1c:	46c0      	nop			; (mov r8, r8)
    5c1e:	46bd      	mov	sp, r7
    5c20:	b002      	add	sp, #8
    5c22:	bd80      	pop	{r7, pc}
    5c24:	000061d1 	.word	0x000061d1

00005c28 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b0aa      	sub	sp, #168	; 0xa8
    5c2c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5c2e:	4b87      	ldr	r3, [pc, #540]	; (5e4c <system_clock_init+0x224>)
    5c30:	22c2      	movs	r2, #194	; 0xc2
    5c32:	00d2      	lsls	r2, r2, #3
    5c34:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5c36:	2002      	movs	r0, #2
    5c38:	4b85      	ldr	r3, [pc, #532]	; (5e50 <system_clock_init+0x228>)
    5c3a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5c3c:	4b85      	ldr	r3, [pc, #532]	; (5e54 <system_clock_init+0x22c>)
    5c3e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    5c40:	2394      	movs	r3, #148	; 0x94
    5c42:	18fb      	adds	r3, r7, r3
    5c44:	0018      	movs	r0, r3
    5c46:	4b84      	ldr	r3, [pc, #528]	; (5e58 <system_clock_init+0x230>)
    5c48:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    5c4a:	2394      	movs	r3, #148	; 0x94
    5c4c:	18fb      	adds	r3, r7, r3
    5c4e:	2280      	movs	r2, #128	; 0x80
    5c50:	0212      	lsls	r2, r2, #8
    5c52:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    5c54:	2394      	movs	r3, #148	; 0x94
    5c56:	18fb      	adds	r3, r7, r3
    5c58:	2200      	movs	r2, #0
    5c5a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5c5c:	2394      	movs	r3, #148	; 0x94
    5c5e:	18fb      	adds	r3, r7, r3
    5c60:	2203      	movs	r2, #3
    5c62:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    5c64:	2394      	movs	r3, #148	; 0x94
    5c66:	18fb      	adds	r3, r7, r3
    5c68:	2200      	movs	r2, #0
    5c6a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    5c6c:	2394      	movs	r3, #148	; 0x94
    5c6e:	18fb      	adds	r3, r7, r3
    5c70:	2200      	movs	r2, #0
    5c72:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    5c74:	2394      	movs	r3, #148	; 0x94
    5c76:	18fb      	adds	r3, r7, r3
    5c78:	2201      	movs	r2, #1
    5c7a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    5c7c:	2394      	movs	r3, #148	; 0x94
    5c7e:	18fb      	adds	r3, r7, r3
    5c80:	2200      	movs	r2, #0
    5c82:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    5c84:	2394      	movs	r3, #148	; 0x94
    5c86:	18fb      	adds	r3, r7, r3
    5c88:	2200      	movs	r2, #0
    5c8a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5c8c:	2394      	movs	r3, #148	; 0x94
    5c8e:	18fb      	adds	r3, r7, r3
    5c90:	0018      	movs	r0, r3
    5c92:	4b72      	ldr	r3, [pc, #456]	; (5e5c <system_clock_init+0x234>)
    5c94:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5c96:	2005      	movs	r0, #5
    5c98:	4b71      	ldr	r3, [pc, #452]	; (5e60 <system_clock_init+0x238>)
    5c9a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5c9c:	46c0      	nop			; (mov r8, r8)
    5c9e:	2005      	movs	r0, #5
    5ca0:	4b70      	ldr	r3, [pc, #448]	; (5e64 <system_clock_init+0x23c>)
    5ca2:	4798      	blx	r3
    5ca4:	0003      	movs	r3, r0
    5ca6:	001a      	movs	r2, r3
    5ca8:	2301      	movs	r3, #1
    5caa:	4053      	eors	r3, r2
    5cac:	b2db      	uxtb	r3, r3
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d1f5      	bne.n	5c9e <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5cb2:	4a66      	ldr	r2, [pc, #408]	; (5e4c <system_clock_init+0x224>)
    5cb4:	8a93      	ldrh	r3, [r2, #20]
    5cb6:	2180      	movs	r1, #128	; 0x80
    5cb8:	430b      	orrs	r3, r1
    5cba:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5cbc:	2380      	movs	r3, #128	; 0x80
    5cbe:	18fb      	adds	r3, r7, r3
    5cc0:	0018      	movs	r0, r3
    5cc2:	4b69      	ldr	r3, [pc, #420]	; (5e68 <system_clock_init+0x240>)
    5cc4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5cc6:	2380      	movs	r3, #128	; 0x80
    5cc8:	18fb      	adds	r3, r7, r3
    5cca:	2204      	movs	r2, #4
    5ccc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5cce:	2380      	movs	r3, #128	; 0x80
    5cd0:	18fb      	adds	r3, r7, r3
    5cd2:	2200      	movs	r2, #0
    5cd4:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5cd6:	4b65      	ldr	r3, [pc, #404]	; (5e6c <system_clock_init+0x244>)
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	0e9b      	lsrs	r3, r3, #26
    5cdc:	22a4      	movs	r2, #164	; 0xa4
    5cde:	18ba      	adds	r2, r7, r2
    5ce0:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5ce2:	23a4      	movs	r3, #164	; 0xa4
    5ce4:	18fb      	adds	r3, r7, r3
    5ce6:	681b      	ldr	r3, [r3, #0]
    5ce8:	2b3f      	cmp	r3, #63	; 0x3f
    5cea:	d103      	bne.n	5cf4 <system_clock_init+0xcc>
		coarse = 0x1f;
    5cec:	231f      	movs	r3, #31
    5cee:	22a4      	movs	r2, #164	; 0xa4
    5cf0:	18ba      	adds	r2, r7, r2
    5cf2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    5cf4:	23a4      	movs	r3, #164	; 0xa4
    5cf6:	18fb      	adds	r3, r7, r3
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	b2da      	uxtb	r2, r3
    5cfc:	2380      	movs	r3, #128	; 0x80
    5cfe:	18fb      	adds	r3, r7, r3
    5d00:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5d02:	2380      	movs	r3, #128	; 0x80
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	2200      	movs	r2, #0
    5d08:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5d0a:	2380      	movs	r3, #128	; 0x80
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	2200      	movs	r2, #0
    5d10:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5d12:	2380      	movs	r3, #128	; 0x80
    5d14:	18fb      	adds	r3, r7, r3
    5d16:	2200      	movs	r2, #0
    5d18:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5d1a:	2380      	movs	r3, #128	; 0x80
    5d1c:	18fb      	adds	r3, r7, r3
    5d1e:	2200      	movs	r2, #0
    5d20:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5d22:	2380      	movs	r3, #128	; 0x80
    5d24:	18fb      	adds	r3, r7, r3
    5d26:	4a52      	ldr	r2, [pc, #328]	; (5e70 <system_clock_init+0x248>)
    5d28:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5d2a:	2380      	movs	r3, #128	; 0x80
    5d2c:	18fb      	adds	r3, r7, r3
    5d2e:	2207      	movs	r2, #7
    5d30:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5d32:	2380      	movs	r3, #128	; 0x80
    5d34:	18fb      	adds	r3, r7, r3
    5d36:	223f      	movs	r2, #63	; 0x3f
    5d38:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5d3a:	2380      	movs	r3, #128	; 0x80
    5d3c:	18fb      	adds	r3, r7, r3
    5d3e:	0018      	movs	r0, r3
    5d40:	4b4c      	ldr	r3, [pc, #304]	; (5e74 <system_clock_init+0x24c>)
    5d42:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5d44:	237c      	movs	r3, #124	; 0x7c
    5d46:	18fb      	adds	r3, r7, r3
    5d48:	0018      	movs	r0, r3
    5d4a:	4b4b      	ldr	r3, [pc, #300]	; (5e78 <system_clock_init+0x250>)
    5d4c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5d4e:	237c      	movs	r3, #124	; 0x7c
    5d50:	18fb      	adds	r3, r7, r3
    5d52:	2200      	movs	r2, #0
    5d54:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5d56:	237c      	movs	r3, #124	; 0x7c
    5d58:	18fb      	adds	r3, r7, r3
    5d5a:	2201      	movs	r2, #1
    5d5c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5d5e:	237c      	movs	r3, #124	; 0x7c
    5d60:	18fb      	adds	r3, r7, r3
    5d62:	2200      	movs	r2, #0
    5d64:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5d66:	237c      	movs	r3, #124	; 0x7c
    5d68:	18fb      	adds	r3, r7, r3
    5d6a:	0018      	movs	r0, r3
    5d6c:	4b43      	ldr	r3, [pc, #268]	; (5e7c <system_clock_init+0x254>)
    5d6e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5d70:	2006      	movs	r0, #6
    5d72:	4b3b      	ldr	r3, [pc, #236]	; (5e60 <system_clock_init+0x238>)
    5d74:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5d76:	4b42      	ldr	r3, [pc, #264]	; (5e80 <system_clock_init+0x258>)
    5d78:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5d7a:	2364      	movs	r3, #100	; 0x64
    5d7c:	18fb      	adds	r3, r7, r3
    5d7e:	0018      	movs	r0, r3
    5d80:	4b40      	ldr	r3, [pc, #256]	; (5e84 <system_clock_init+0x25c>)
    5d82:	4798      	blx	r3
    5d84:	2364      	movs	r3, #100	; 0x64
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	2205      	movs	r2, #5
    5d8a:	701a      	strb	r2, [r3, #0]
    5d8c:	2364      	movs	r3, #100	; 0x64
    5d8e:	18fb      	adds	r3, r7, r3
    5d90:	2201      	movs	r2, #1
    5d92:	605a      	str	r2, [r3, #4]
    5d94:	2364      	movs	r3, #100	; 0x64
    5d96:	18fb      	adds	r3, r7, r3
    5d98:	2200      	movs	r2, #0
    5d9a:	721a      	strb	r2, [r3, #8]
    5d9c:	2364      	movs	r3, #100	; 0x64
    5d9e:	18fb      	adds	r3, r7, r3
    5da0:	2200      	movs	r2, #0
    5da2:	725a      	strb	r2, [r3, #9]
    5da4:	2364      	movs	r3, #100	; 0x64
    5da6:	18fb      	adds	r3, r7, r3
    5da8:	0019      	movs	r1, r3
    5daa:	2001      	movs	r0, #1
    5dac:	4b36      	ldr	r3, [pc, #216]	; (5e88 <system_clock_init+0x260>)
    5dae:	4798      	blx	r3
    5db0:	2001      	movs	r0, #1
    5db2:	4b36      	ldr	r3, [pc, #216]	; (5e8c <system_clock_init+0x264>)
    5db4:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    5db6:	230c      	movs	r3, #12
    5db8:	18fb      	adds	r3, r7, r3
    5dba:	0018      	movs	r0, r3
    5dbc:	4b34      	ldr	r3, [pc, #208]	; (5e90 <system_clock_init+0x268>)
    5dbe:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5dc0:	230c      	movs	r3, #12
    5dc2:	18fb      	adds	r3, r7, r3
    5dc4:	2201      	movs	r2, #1
    5dc6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5dc8:	230c      	movs	r3, #12
    5dca:	18fb      	adds	r3, r7, r3
    5dcc:	0019      	movs	r1, r3
    5dce:	2000      	movs	r0, #0
    5dd0:	4b30      	ldr	r3, [pc, #192]	; (5e94 <system_clock_init+0x26c>)
    5dd2:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5dd4:	2000      	movs	r0, #0
    5dd6:	4b30      	ldr	r3, [pc, #192]	; (5e98 <system_clock_init+0x270>)
    5dd8:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5dda:	2007      	movs	r0, #7
    5ddc:	4b20      	ldr	r3, [pc, #128]	; (5e60 <system_clock_init+0x238>)
    5dde:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5de0:	46c0      	nop			; (mov r8, r8)
    5de2:	2007      	movs	r0, #7
    5de4:	4b1f      	ldr	r3, [pc, #124]	; (5e64 <system_clock_init+0x23c>)
    5de6:	4798      	blx	r3
    5de8:	0003      	movs	r3, r0
    5dea:	001a      	movs	r2, r3
    5dec:	2301      	movs	r3, #1
    5dee:	4053      	eors	r3, r2
    5df0:	b2db      	uxtb	r3, r3
    5df2:	2b00      	cmp	r3, #0
    5df4:	d1f5      	bne.n	5de2 <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5df6:	2000      	movs	r0, #0
    5df8:	4b28      	ldr	r3, [pc, #160]	; (5e9c <system_clock_init+0x274>)
    5dfa:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5dfc:	2100      	movs	r1, #0
    5dfe:	2000      	movs	r0, #0
    5e00:	4b27      	ldr	r3, [pc, #156]	; (5ea0 <system_clock_init+0x278>)
    5e02:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5e04:	2100      	movs	r1, #0
    5e06:	2001      	movs	r0, #1
    5e08:	4b25      	ldr	r3, [pc, #148]	; (5ea0 <system_clock_init+0x278>)
    5e0a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5e0c:	2100      	movs	r1, #0
    5e0e:	2002      	movs	r0, #2
    5e10:	4b23      	ldr	r3, [pc, #140]	; (5ea0 <system_clock_init+0x278>)
    5e12:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5e14:	003b      	movs	r3, r7
    5e16:	0018      	movs	r0, r3
    5e18:	4b1a      	ldr	r3, [pc, #104]	; (5e84 <system_clock_init+0x25c>)
    5e1a:	4798      	blx	r3
    5e1c:	003b      	movs	r3, r7
    5e1e:	2207      	movs	r2, #7
    5e20:	701a      	strb	r2, [r3, #0]
    5e22:	003b      	movs	r3, r7
    5e24:	2201      	movs	r2, #1
    5e26:	605a      	str	r2, [r3, #4]
    5e28:	003b      	movs	r3, r7
    5e2a:	2200      	movs	r2, #0
    5e2c:	721a      	strb	r2, [r3, #8]
    5e2e:	003b      	movs	r3, r7
    5e30:	2200      	movs	r2, #0
    5e32:	725a      	strb	r2, [r3, #9]
    5e34:	003b      	movs	r3, r7
    5e36:	0019      	movs	r1, r3
    5e38:	2000      	movs	r0, #0
    5e3a:	4b13      	ldr	r3, [pc, #76]	; (5e88 <system_clock_init+0x260>)
    5e3c:	4798      	blx	r3
    5e3e:	2000      	movs	r0, #0
    5e40:	4b12      	ldr	r3, [pc, #72]	; (5e8c <system_clock_init+0x264>)
    5e42:	4798      	blx	r3
#endif
}
    5e44:	46c0      	nop			; (mov r8, r8)
    5e46:	46bd      	mov	sp, r7
    5e48:	b02a      	add	sp, #168	; 0xa8
    5e4a:	bd80      	pop	{r7, pc}
    5e4c:	40000800 	.word	0x40000800
    5e50:	00005709 	.word	0x00005709
    5e54:	00005bf1 	.word	0x00005bf1
    5e58:	000055d5 	.word	0x000055d5
    5e5c:	000058d1 	.word	0x000058d1
    5e60:	00005ac1 	.word	0x00005ac1
    5e64:	00005b6d 	.word	0x00005b6d
    5e68:	00005641 	.word	0x00005641
    5e6c:	00806024 	.word	0x00806024
    5e70:	000005b9 	.word	0x000005b9
    5e74:	000059f1 	.word	0x000059f1
    5e78:	0000561d 	.word	0x0000561d
    5e7c:	00005859 	.word	0x00005859
    5e80:	00005f49 	.word	0x00005f49
    5e84:	0000558d 	.word	0x0000558d
    5e88:	00005f79 	.word	0x00005f79
    5e8c:	0000609d 	.word	0x0000609d
    5e90:	000055bd 	.word	0x000055bd
    5e94:	000061d1 	.word	0x000061d1
    5e98:	00006215 	.word	0x00006215
    5e9c:	00005695 	.word	0x00005695
    5ea0:	000056b5 	.word	0x000056b5

00005ea4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5ea4:	b580      	push	{r7, lr}
    5ea6:	b082      	sub	sp, #8
    5ea8:	af00      	add	r7, sp, #0
    5eaa:	0002      	movs	r2, r0
    5eac:	6039      	str	r1, [r7, #0]
    5eae:	1dfb      	adds	r3, r7, #7
    5eb0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5eb2:	1dfb      	adds	r3, r7, #7
    5eb4:	781b      	ldrb	r3, [r3, #0]
    5eb6:	2b01      	cmp	r3, #1
    5eb8:	d00a      	beq.n	5ed0 <system_apb_clock_set_mask+0x2c>
    5eba:	2b02      	cmp	r3, #2
    5ebc:	d00f      	beq.n	5ede <system_apb_clock_set_mask+0x3a>
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d114      	bne.n	5eec <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5ec2:	4b0e      	ldr	r3, [pc, #56]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ec4:	4a0d      	ldr	r2, [pc, #52]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ec6:	6991      	ldr	r1, [r2, #24]
    5ec8:	683a      	ldr	r2, [r7, #0]
    5eca:	430a      	orrs	r2, r1
    5ecc:	619a      	str	r2, [r3, #24]
			break;
    5ece:	e00f      	b.n	5ef0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5ed0:	4b0a      	ldr	r3, [pc, #40]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ed2:	4a0a      	ldr	r2, [pc, #40]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ed4:	69d1      	ldr	r1, [r2, #28]
    5ed6:	683a      	ldr	r2, [r7, #0]
    5ed8:	430a      	orrs	r2, r1
    5eda:	61da      	str	r2, [r3, #28]
			break;
    5edc:	e008      	b.n	5ef0 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5ede:	4b07      	ldr	r3, [pc, #28]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ee0:	4a06      	ldr	r2, [pc, #24]	; (5efc <system_apb_clock_set_mask+0x58>)
    5ee2:	6a11      	ldr	r1, [r2, #32]
    5ee4:	683a      	ldr	r2, [r7, #0]
    5ee6:	430a      	orrs	r2, r1
    5ee8:	621a      	str	r2, [r3, #32]
			break;
    5eea:	e001      	b.n	5ef0 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5eec:	2317      	movs	r3, #23
    5eee:	e000      	b.n	5ef2 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5ef0:	2300      	movs	r3, #0
}
    5ef2:	0018      	movs	r0, r3
    5ef4:	46bd      	mov	sp, r7
    5ef6:	b002      	add	sp, #8
    5ef8:	bd80      	pop	{r7, pc}
    5efa:	46c0      	nop			; (mov r8, r8)
    5efc:	40000400 	.word	0x40000400

00005f00 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5f04:	4b02      	ldr	r3, [pc, #8]	; (5f10 <system_interrupt_enter_critical_section+0x10>)
    5f06:	4798      	blx	r3
}
    5f08:	46c0      	nop			; (mov r8, r8)
    5f0a:	46bd      	mov	sp, r7
    5f0c:	bd80      	pop	{r7, pc}
    5f0e:	46c0      	nop			; (mov r8, r8)
    5f10:	000033f1 	.word	0x000033f1

00005f14 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5f14:	b580      	push	{r7, lr}
    5f16:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5f18:	4b02      	ldr	r3, [pc, #8]	; (5f24 <system_interrupt_leave_critical_section+0x10>)
    5f1a:	4798      	blx	r3
}
    5f1c:	46c0      	nop			; (mov r8, r8)
    5f1e:	46bd      	mov	sp, r7
    5f20:	bd80      	pop	{r7, pc}
    5f22:	46c0      	nop			; (mov r8, r8)
    5f24:	00003445 	.word	0x00003445

00005f28 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5f2c:	4b05      	ldr	r3, [pc, #20]	; (5f44 <system_gclk_is_syncing+0x1c>)
    5f2e:	785b      	ldrb	r3, [r3, #1]
    5f30:	b2db      	uxtb	r3, r3
    5f32:	b25b      	sxtb	r3, r3
    5f34:	2b00      	cmp	r3, #0
    5f36:	da01      	bge.n	5f3c <system_gclk_is_syncing+0x14>
		return true;
    5f38:	2301      	movs	r3, #1
    5f3a:	e000      	b.n	5f3e <system_gclk_is_syncing+0x16>
	}

	return false;
    5f3c:	2300      	movs	r3, #0
}
    5f3e:	0018      	movs	r0, r3
    5f40:	46bd      	mov	sp, r7
    5f42:	bd80      	pop	{r7, pc}
    5f44:	40000c00 	.word	0x40000c00

00005f48 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5f48:	b580      	push	{r7, lr}
    5f4a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5f4c:	2108      	movs	r1, #8
    5f4e:	2000      	movs	r0, #0
    5f50:	4b07      	ldr	r3, [pc, #28]	; (5f70 <system_gclk_init+0x28>)
    5f52:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5f54:	4b07      	ldr	r3, [pc, #28]	; (5f74 <system_gclk_init+0x2c>)
    5f56:	2201      	movs	r2, #1
    5f58:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5f5a:	46c0      	nop			; (mov r8, r8)
    5f5c:	4b05      	ldr	r3, [pc, #20]	; (5f74 <system_gclk_init+0x2c>)
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	b2db      	uxtb	r3, r3
    5f62:	001a      	movs	r2, r3
    5f64:	2301      	movs	r3, #1
    5f66:	4013      	ands	r3, r2
    5f68:	d1f8      	bne.n	5f5c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	46bd      	mov	sp, r7
    5f6e:	bd80      	pop	{r7, pc}
    5f70:	00005ea5 	.word	0x00005ea5
    5f74:	40000c00 	.word	0x40000c00

00005f78 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5f78:	b580      	push	{r7, lr}
    5f7a:	b086      	sub	sp, #24
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	0002      	movs	r2, r0
    5f80:	6039      	str	r1, [r7, #0]
    5f82:	1dfb      	adds	r3, r7, #7
    5f84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5f86:	1dfb      	adds	r3, r7, #7
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5f8c:	1dfb      	adds	r3, r7, #7
    5f8e:	781b      	ldrb	r3, [r3, #0]
    5f90:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5f92:	683b      	ldr	r3, [r7, #0]
    5f94:	781b      	ldrb	r3, [r3, #0]
    5f96:	021b      	lsls	r3, r3, #8
    5f98:	001a      	movs	r2, r3
    5f9a:	697b      	ldr	r3, [r7, #20]
    5f9c:	4313      	orrs	r3, r2
    5f9e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5fa0:	683b      	ldr	r3, [r7, #0]
    5fa2:	785b      	ldrb	r3, [r3, #1]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d004      	beq.n	5fb2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5fa8:	697b      	ldr	r3, [r7, #20]
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	02d2      	lsls	r2, r2, #11
    5fae:	4313      	orrs	r3, r2
    5fb0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5fb2:	683b      	ldr	r3, [r7, #0]
    5fb4:	7a5b      	ldrb	r3, [r3, #9]
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d004      	beq.n	5fc4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5fba:	697b      	ldr	r3, [r7, #20]
    5fbc:	2280      	movs	r2, #128	; 0x80
    5fbe:	0312      	lsls	r2, r2, #12
    5fc0:	4313      	orrs	r3, r2
    5fc2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5fc4:	683b      	ldr	r3, [r7, #0]
    5fc6:	685b      	ldr	r3, [r3, #4]
    5fc8:	2b01      	cmp	r3, #1
    5fca:	d92c      	bls.n	6026 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5fcc:	683b      	ldr	r3, [r7, #0]
    5fce:	685a      	ldr	r2, [r3, #4]
    5fd0:	683b      	ldr	r3, [r7, #0]
    5fd2:	685b      	ldr	r3, [r3, #4]
    5fd4:	3b01      	subs	r3, #1
    5fd6:	4013      	ands	r3, r2
    5fd8:	d11a      	bne.n	6010 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5fda:	2300      	movs	r3, #0
    5fdc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5fde:	2302      	movs	r3, #2
    5fe0:	60bb      	str	r3, [r7, #8]
    5fe2:	e005      	b.n	5ff0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    5fe4:	68fb      	ldr	r3, [r7, #12]
    5fe6:	3301      	adds	r3, #1
    5fe8:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5fea:	68bb      	ldr	r3, [r7, #8]
    5fec:	005b      	lsls	r3, r3, #1
    5fee:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5ff0:	683b      	ldr	r3, [r7, #0]
    5ff2:	685a      	ldr	r2, [r3, #4]
    5ff4:	68bb      	ldr	r3, [r7, #8]
    5ff6:	429a      	cmp	r2, r3
    5ff8:	d8f4      	bhi.n	5fe4 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5ffa:	68fb      	ldr	r3, [r7, #12]
    5ffc:	021b      	lsls	r3, r3, #8
    5ffe:	693a      	ldr	r2, [r7, #16]
    6000:	4313      	orrs	r3, r2
    6002:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6004:	697b      	ldr	r3, [r7, #20]
    6006:	2280      	movs	r2, #128	; 0x80
    6008:	0352      	lsls	r2, r2, #13
    600a:	4313      	orrs	r3, r2
    600c:	617b      	str	r3, [r7, #20]
    600e:	e00a      	b.n	6026 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6010:	683b      	ldr	r3, [r7, #0]
    6012:	685b      	ldr	r3, [r3, #4]
    6014:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    6016:	693a      	ldr	r2, [r7, #16]
    6018:	4313      	orrs	r3, r2
    601a:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    601c:	697b      	ldr	r3, [r7, #20]
    601e:	2280      	movs	r2, #128	; 0x80
    6020:	0292      	lsls	r2, r2, #10
    6022:	4313      	orrs	r3, r2
    6024:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	7a1b      	ldrb	r3, [r3, #8]
    602a:	2b00      	cmp	r3, #0
    602c:	d004      	beq.n	6038 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    602e:	697b      	ldr	r3, [r7, #20]
    6030:	2280      	movs	r2, #128	; 0x80
    6032:	0392      	lsls	r2, r2, #14
    6034:	4313      	orrs	r3, r2
    6036:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6038:	46c0      	nop			; (mov r8, r8)
    603a:	4b13      	ldr	r3, [pc, #76]	; (6088 <system_gclk_gen_set_config+0x110>)
    603c:	4798      	blx	r3
    603e:	1e03      	subs	r3, r0, #0
    6040:	d1fb      	bne.n	603a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6042:	4b12      	ldr	r3, [pc, #72]	; (608c <system_gclk_gen_set_config+0x114>)
    6044:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6046:	4a12      	ldr	r2, [pc, #72]	; (6090 <system_gclk_gen_set_config+0x118>)
    6048:	1dfb      	adds	r3, r7, #7
    604a:	781b      	ldrb	r3, [r3, #0]
    604c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	4b0d      	ldr	r3, [pc, #52]	; (6088 <system_gclk_gen_set_config+0x110>)
    6052:	4798      	blx	r3
    6054:	1e03      	subs	r3, r0, #0
    6056:	d1fb      	bne.n	6050 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6058:	4b0e      	ldr	r3, [pc, #56]	; (6094 <system_gclk_gen_set_config+0x11c>)
    605a:	693a      	ldr	r2, [r7, #16]
    605c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    605e:	46c0      	nop			; (mov r8, r8)
    6060:	4b09      	ldr	r3, [pc, #36]	; (6088 <system_gclk_gen_set_config+0x110>)
    6062:	4798      	blx	r3
    6064:	1e03      	subs	r3, r0, #0
    6066:	d1fb      	bne.n	6060 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6068:	4b0a      	ldr	r3, [pc, #40]	; (6094 <system_gclk_gen_set_config+0x11c>)
    606a:	4a0a      	ldr	r2, [pc, #40]	; (6094 <system_gclk_gen_set_config+0x11c>)
    606c:	6851      	ldr	r1, [r2, #4]
    606e:	2280      	movs	r2, #128	; 0x80
    6070:	0252      	lsls	r2, r2, #9
    6072:	4011      	ands	r1, r2
    6074:	697a      	ldr	r2, [r7, #20]
    6076:	430a      	orrs	r2, r1
    6078:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    607a:	4b07      	ldr	r3, [pc, #28]	; (6098 <system_gclk_gen_set_config+0x120>)
    607c:	4798      	blx	r3
}
    607e:	46c0      	nop			; (mov r8, r8)
    6080:	46bd      	mov	sp, r7
    6082:	b006      	add	sp, #24
    6084:	bd80      	pop	{r7, pc}
    6086:	46c0      	nop			; (mov r8, r8)
    6088:	00005f29 	.word	0x00005f29
    608c:	00005f01 	.word	0x00005f01
    6090:	40000c08 	.word	0x40000c08
    6094:	40000c00 	.word	0x40000c00
    6098:	00005f15 	.word	0x00005f15

0000609c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    609c:	b580      	push	{r7, lr}
    609e:	b082      	sub	sp, #8
    60a0:	af00      	add	r7, sp, #0
    60a2:	0002      	movs	r2, r0
    60a4:	1dfb      	adds	r3, r7, #7
    60a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    60a8:	46c0      	nop			; (mov r8, r8)
    60aa:	4b0e      	ldr	r3, [pc, #56]	; (60e4 <system_gclk_gen_enable+0x48>)
    60ac:	4798      	blx	r3
    60ae:	1e03      	subs	r3, r0, #0
    60b0:	d1fb      	bne.n	60aa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    60b2:	4b0d      	ldr	r3, [pc, #52]	; (60e8 <system_gclk_gen_enable+0x4c>)
    60b4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    60b6:	4a0d      	ldr	r2, [pc, #52]	; (60ec <system_gclk_gen_enable+0x50>)
    60b8:	1dfb      	adds	r3, r7, #7
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    60be:	46c0      	nop			; (mov r8, r8)
    60c0:	4b08      	ldr	r3, [pc, #32]	; (60e4 <system_gclk_gen_enable+0x48>)
    60c2:	4798      	blx	r3
    60c4:	1e03      	subs	r3, r0, #0
    60c6:	d1fb      	bne.n	60c0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    60c8:	4b09      	ldr	r3, [pc, #36]	; (60f0 <system_gclk_gen_enable+0x54>)
    60ca:	4a09      	ldr	r2, [pc, #36]	; (60f0 <system_gclk_gen_enable+0x54>)
    60cc:	6852      	ldr	r2, [r2, #4]
    60ce:	2180      	movs	r1, #128	; 0x80
    60d0:	0249      	lsls	r1, r1, #9
    60d2:	430a      	orrs	r2, r1
    60d4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    60d6:	4b07      	ldr	r3, [pc, #28]	; (60f4 <system_gclk_gen_enable+0x58>)
    60d8:	4798      	blx	r3
}
    60da:	46c0      	nop			; (mov r8, r8)
    60dc:	46bd      	mov	sp, r7
    60de:	b002      	add	sp, #8
    60e0:	bd80      	pop	{r7, pc}
    60e2:	46c0      	nop			; (mov r8, r8)
    60e4:	00005f29 	.word	0x00005f29
    60e8:	00005f01 	.word	0x00005f01
    60ec:	40000c04 	.word	0x40000c04
    60f0:	40000c00 	.word	0x40000c00
    60f4:	00005f15 	.word	0x00005f15

000060f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    60f8:	b580      	push	{r7, lr}
    60fa:	b086      	sub	sp, #24
    60fc:	af00      	add	r7, sp, #0
    60fe:	0002      	movs	r2, r0
    6100:	1dfb      	adds	r3, r7, #7
    6102:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6104:	46c0      	nop			; (mov r8, r8)
    6106:	4b2a      	ldr	r3, [pc, #168]	; (61b0 <system_gclk_gen_get_hz+0xb8>)
    6108:	4798      	blx	r3
    610a:	1e03      	subs	r3, r0, #0
    610c:	d1fb      	bne.n	6106 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    610e:	4b29      	ldr	r3, [pc, #164]	; (61b4 <system_gclk_gen_get_hz+0xbc>)
    6110:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6112:	4a29      	ldr	r2, [pc, #164]	; (61b8 <system_gclk_gen_get_hz+0xc0>)
    6114:	1dfb      	adds	r3, r7, #7
    6116:	781b      	ldrb	r3, [r3, #0]
    6118:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    611a:	46c0      	nop			; (mov r8, r8)
    611c:	4b24      	ldr	r3, [pc, #144]	; (61b0 <system_gclk_gen_get_hz+0xb8>)
    611e:	4798      	blx	r3
    6120:	1e03      	subs	r3, r0, #0
    6122:	d1fb      	bne.n	611c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6124:	4b25      	ldr	r3, [pc, #148]	; (61bc <system_gclk_gen_get_hz+0xc4>)
    6126:	685b      	ldr	r3, [r3, #4]
    6128:	04db      	lsls	r3, r3, #19
    612a:	0edb      	lsrs	r3, r3, #27
    612c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    612e:	0018      	movs	r0, r3
    6130:	4b23      	ldr	r3, [pc, #140]	; (61c0 <system_gclk_gen_get_hz+0xc8>)
    6132:	4798      	blx	r3
    6134:	0003      	movs	r3, r0
    6136:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6138:	4a1f      	ldr	r2, [pc, #124]	; (61b8 <system_gclk_gen_get_hz+0xc0>)
    613a:	1dfb      	adds	r3, r7, #7
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6140:	4b1e      	ldr	r3, [pc, #120]	; (61bc <system_gclk_gen_get_hz+0xc4>)
    6142:	685b      	ldr	r3, [r3, #4]
    6144:	02db      	lsls	r3, r3, #11
    6146:	0fdb      	lsrs	r3, r3, #31
    6148:	b2da      	uxtb	r2, r3
    614a:	2313      	movs	r3, #19
    614c:	18fb      	adds	r3, r7, r3
    614e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6150:	4a1c      	ldr	r2, [pc, #112]	; (61c4 <system_gclk_gen_get_hz+0xcc>)
    6152:	1dfb      	adds	r3, r7, #7
    6154:	781b      	ldrb	r3, [r3, #0]
    6156:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6158:	46c0      	nop			; (mov r8, r8)
    615a:	4b15      	ldr	r3, [pc, #84]	; (61b0 <system_gclk_gen_get_hz+0xb8>)
    615c:	4798      	blx	r3
    615e:	1e03      	subs	r3, r0, #0
    6160:	d1fb      	bne.n	615a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6162:	4b16      	ldr	r3, [pc, #88]	; (61bc <system_gclk_gen_get_hz+0xc4>)
    6164:	689b      	ldr	r3, [r3, #8]
    6166:	021b      	lsls	r3, r3, #8
    6168:	0c1b      	lsrs	r3, r3, #16
    616a:	b29b      	uxth	r3, r3
    616c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    616e:	4b16      	ldr	r3, [pc, #88]	; (61c8 <system_gclk_gen_get_hz+0xd0>)
    6170:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6172:	2313      	movs	r3, #19
    6174:	18fb      	adds	r3, r7, r3
    6176:	781b      	ldrb	r3, [r3, #0]
    6178:	2b00      	cmp	r3, #0
    617a:	d109      	bne.n	6190 <system_gclk_gen_get_hz+0x98>
    617c:	68fb      	ldr	r3, [r7, #12]
    617e:	2b01      	cmp	r3, #1
    6180:	d906      	bls.n	6190 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6182:	4b12      	ldr	r3, [pc, #72]	; (61cc <system_gclk_gen_get_hz+0xd4>)
    6184:	68f9      	ldr	r1, [r7, #12]
    6186:	6978      	ldr	r0, [r7, #20]
    6188:	4798      	blx	r3
    618a:	0003      	movs	r3, r0
    618c:	617b      	str	r3, [r7, #20]
    618e:	e00a      	b.n	61a6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6190:	2313      	movs	r3, #19
    6192:	18fb      	adds	r3, r7, r3
    6194:	781b      	ldrb	r3, [r3, #0]
    6196:	2b00      	cmp	r3, #0
    6198:	d005      	beq.n	61a6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    619a:	68fb      	ldr	r3, [r7, #12]
    619c:	3301      	adds	r3, #1
    619e:	697a      	ldr	r2, [r7, #20]
    61a0:	40da      	lsrs	r2, r3
    61a2:	0013      	movs	r3, r2
    61a4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    61a6:	697b      	ldr	r3, [r7, #20]
}
    61a8:	0018      	movs	r0, r3
    61aa:	46bd      	mov	sp, r7
    61ac:	b006      	add	sp, #24
    61ae:	bd80      	pop	{r7, pc}
    61b0:	00005f29 	.word	0x00005f29
    61b4:	00005f01 	.word	0x00005f01
    61b8:	40000c04 	.word	0x40000c04
    61bc:	40000c00 	.word	0x40000c00
    61c0:	0000579d 	.word	0x0000579d
    61c4:	40000c08 	.word	0x40000c08
    61c8:	00005f15 	.word	0x00005f15
    61cc:	00009891 	.word	0x00009891

000061d0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    61d0:	b580      	push	{r7, lr}
    61d2:	b084      	sub	sp, #16
    61d4:	af00      	add	r7, sp, #0
    61d6:	0002      	movs	r2, r0
    61d8:	6039      	str	r1, [r7, #0]
    61da:	1dfb      	adds	r3, r7, #7
    61dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    61de:	1dfb      	adds	r3, r7, #7
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    61e4:	683b      	ldr	r3, [r7, #0]
    61e6:	781b      	ldrb	r3, [r3, #0]
    61e8:	021b      	lsls	r3, r3, #8
    61ea:	001a      	movs	r2, r3
    61ec:	68fb      	ldr	r3, [r7, #12]
    61ee:	4313      	orrs	r3, r2
    61f0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    61f2:	1dfb      	adds	r3, r7, #7
    61f4:	781b      	ldrb	r3, [r3, #0]
    61f6:	0018      	movs	r0, r3
    61f8:	4b04      	ldr	r3, [pc, #16]	; (620c <system_gclk_chan_set_config+0x3c>)
    61fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    61fc:	4b04      	ldr	r3, [pc, #16]	; (6210 <system_gclk_chan_set_config+0x40>)
    61fe:	68fa      	ldr	r2, [r7, #12]
    6200:	b292      	uxth	r2, r2
    6202:	805a      	strh	r2, [r3, #2]
}
    6204:	46c0      	nop			; (mov r8, r8)
    6206:	46bd      	mov	sp, r7
    6208:	b004      	add	sp, #16
    620a:	bd80      	pop	{r7, pc}
    620c:	0000625d 	.word	0x0000625d
    6210:	40000c00 	.word	0x40000c00

00006214 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6214:	b580      	push	{r7, lr}
    6216:	b082      	sub	sp, #8
    6218:	af00      	add	r7, sp, #0
    621a:	0002      	movs	r2, r0
    621c:	1dfb      	adds	r3, r7, #7
    621e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6220:	4b0a      	ldr	r3, [pc, #40]	; (624c <system_gclk_chan_enable+0x38>)
    6222:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6224:	4a0a      	ldr	r2, [pc, #40]	; (6250 <system_gclk_chan_enable+0x3c>)
    6226:	1dfb      	adds	r3, r7, #7
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    622c:	4909      	ldr	r1, [pc, #36]	; (6254 <system_gclk_chan_enable+0x40>)
    622e:	4b09      	ldr	r3, [pc, #36]	; (6254 <system_gclk_chan_enable+0x40>)
    6230:	885b      	ldrh	r3, [r3, #2]
    6232:	b29b      	uxth	r3, r3
    6234:	2280      	movs	r2, #128	; 0x80
    6236:	01d2      	lsls	r2, r2, #7
    6238:	4313      	orrs	r3, r2
    623a:	b29b      	uxth	r3, r3
    623c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    623e:	4b06      	ldr	r3, [pc, #24]	; (6258 <system_gclk_chan_enable+0x44>)
    6240:	4798      	blx	r3
}
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	46bd      	mov	sp, r7
    6246:	b002      	add	sp, #8
    6248:	bd80      	pop	{r7, pc}
    624a:	46c0      	nop			; (mov r8, r8)
    624c:	00005f01 	.word	0x00005f01
    6250:	40000c02 	.word	0x40000c02
    6254:	40000c00 	.word	0x40000c00
    6258:	00005f15 	.word	0x00005f15

0000625c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    625c:	b580      	push	{r7, lr}
    625e:	b084      	sub	sp, #16
    6260:	af00      	add	r7, sp, #0
    6262:	0002      	movs	r2, r0
    6264:	1dfb      	adds	r3, r7, #7
    6266:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6268:	4b1c      	ldr	r3, [pc, #112]	; (62dc <system_gclk_chan_disable+0x80>)
    626a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    626c:	4a1c      	ldr	r2, [pc, #112]	; (62e0 <system_gclk_chan_disable+0x84>)
    626e:	1dfb      	adds	r3, r7, #7
    6270:	781b      	ldrb	r3, [r3, #0]
    6272:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6274:	4b1b      	ldr	r3, [pc, #108]	; (62e4 <system_gclk_chan_disable+0x88>)
    6276:	885b      	ldrh	r3, [r3, #2]
    6278:	051b      	lsls	r3, r3, #20
    627a:	0f1b      	lsrs	r3, r3, #28
    627c:	b2db      	uxtb	r3, r3
    627e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6280:	4a18      	ldr	r2, [pc, #96]	; (62e4 <system_gclk_chan_disable+0x88>)
    6282:	8853      	ldrh	r3, [r2, #2]
    6284:	4918      	ldr	r1, [pc, #96]	; (62e8 <system_gclk_chan_disable+0x8c>)
    6286:	400b      	ands	r3, r1
    6288:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    628a:	4a16      	ldr	r2, [pc, #88]	; (62e4 <system_gclk_chan_disable+0x88>)
    628c:	4b15      	ldr	r3, [pc, #84]	; (62e4 <system_gclk_chan_disable+0x88>)
    628e:	885b      	ldrh	r3, [r3, #2]
    6290:	b29b      	uxth	r3, r3
    6292:	4916      	ldr	r1, [pc, #88]	; (62ec <system_gclk_chan_disable+0x90>)
    6294:	400b      	ands	r3, r1
    6296:	b29b      	uxth	r3, r3
    6298:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	4b11      	ldr	r3, [pc, #68]	; (62e4 <system_gclk_chan_disable+0x88>)
    629e:	885b      	ldrh	r3, [r3, #2]
    62a0:	b29b      	uxth	r3, r3
    62a2:	001a      	movs	r2, r3
    62a4:	2380      	movs	r3, #128	; 0x80
    62a6:	01db      	lsls	r3, r3, #7
    62a8:	4013      	ands	r3, r2
    62aa:	d1f7      	bne.n	629c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    62ac:	4a0d      	ldr	r2, [pc, #52]	; (62e4 <system_gclk_chan_disable+0x88>)
    62ae:	68fb      	ldr	r3, [r7, #12]
    62b0:	b2db      	uxtb	r3, r3
    62b2:	1c19      	adds	r1, r3, #0
    62b4:	230f      	movs	r3, #15
    62b6:	400b      	ands	r3, r1
    62b8:	b2d9      	uxtb	r1, r3
    62ba:	8853      	ldrh	r3, [r2, #2]
    62bc:	1c08      	adds	r0, r1, #0
    62be:	210f      	movs	r1, #15
    62c0:	4001      	ands	r1, r0
    62c2:	0208      	lsls	r0, r1, #8
    62c4:	4908      	ldr	r1, [pc, #32]	; (62e8 <system_gclk_chan_disable+0x8c>)
    62c6:	400b      	ands	r3, r1
    62c8:	1c19      	adds	r1, r3, #0
    62ca:	1c03      	adds	r3, r0, #0
    62cc:	430b      	orrs	r3, r1
    62ce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    62d0:	4b07      	ldr	r3, [pc, #28]	; (62f0 <system_gclk_chan_disable+0x94>)
    62d2:	4798      	blx	r3
}
    62d4:	46c0      	nop			; (mov r8, r8)
    62d6:	46bd      	mov	sp, r7
    62d8:	b004      	add	sp, #16
    62da:	bd80      	pop	{r7, pc}
    62dc:	00005f01 	.word	0x00005f01
    62e0:	40000c02 	.word	0x40000c02
    62e4:	40000c00 	.word	0x40000c00
    62e8:	fffff0ff 	.word	0xfffff0ff
    62ec:	ffffbfff 	.word	0xffffbfff
    62f0:	00005f15 	.word	0x00005f15

000062f4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	0002      	movs	r2, r0
    62fc:	1dfb      	adds	r3, r7, #7
    62fe:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6300:	4b0d      	ldr	r3, [pc, #52]	; (6338 <system_gclk_chan_get_hz+0x44>)
    6302:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6304:	4a0d      	ldr	r2, [pc, #52]	; (633c <system_gclk_chan_get_hz+0x48>)
    6306:	1dfb      	adds	r3, r7, #7
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    630c:	4b0c      	ldr	r3, [pc, #48]	; (6340 <system_gclk_chan_get_hz+0x4c>)
    630e:	885b      	ldrh	r3, [r3, #2]
    6310:	051b      	lsls	r3, r3, #20
    6312:	0f1b      	lsrs	r3, r3, #28
    6314:	b2da      	uxtb	r2, r3
    6316:	230f      	movs	r3, #15
    6318:	18fb      	adds	r3, r7, r3
    631a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    631c:	4b09      	ldr	r3, [pc, #36]	; (6344 <system_gclk_chan_get_hz+0x50>)
    631e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6320:	230f      	movs	r3, #15
    6322:	18fb      	adds	r3, r7, r3
    6324:	781b      	ldrb	r3, [r3, #0]
    6326:	0018      	movs	r0, r3
    6328:	4b07      	ldr	r3, [pc, #28]	; (6348 <system_gclk_chan_get_hz+0x54>)
    632a:	4798      	blx	r3
    632c:	0003      	movs	r3, r0
}
    632e:	0018      	movs	r0, r3
    6330:	46bd      	mov	sp, r7
    6332:	b004      	add	sp, #16
    6334:	bd80      	pop	{r7, pc}
    6336:	46c0      	nop			; (mov r8, r8)
    6338:	00005f01 	.word	0x00005f01
    633c:	40000c02 	.word	0x40000c02
    6340:	40000c00 	.word	0x40000c00
    6344:	00005f15 	.word	0x00005f15
    6348:	000060f9 	.word	0x000060f9

0000634c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    634c:	b580      	push	{r7, lr}
    634e:	b084      	sub	sp, #16
    6350:	af00      	add	r7, sp, #0
    6352:	0002      	movs	r2, r0
    6354:	1dfb      	adds	r3, r7, #7
    6356:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6358:	230f      	movs	r3, #15
    635a:	18fb      	adds	r3, r7, r3
    635c:	1dfa      	adds	r2, r7, #7
    635e:	7812      	ldrb	r2, [r2, #0]
    6360:	09d2      	lsrs	r2, r2, #7
    6362:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6364:	230e      	movs	r3, #14
    6366:	18fb      	adds	r3, r7, r3
    6368:	1dfa      	adds	r2, r7, #7
    636a:	7812      	ldrb	r2, [r2, #0]
    636c:	0952      	lsrs	r2, r2, #5
    636e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6370:	4b0d      	ldr	r3, [pc, #52]	; (63a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6372:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    6374:	230f      	movs	r3, #15
    6376:	18fb      	adds	r3, r7, r3
    6378:	781b      	ldrb	r3, [r3, #0]
    637a:	2b00      	cmp	r3, #0
    637c:	d10f      	bne.n	639e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    637e:	230f      	movs	r3, #15
    6380:	18fb      	adds	r3, r7, r3
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	009b      	lsls	r3, r3, #2
    6386:	2210      	movs	r2, #16
    6388:	4694      	mov	ip, r2
    638a:	44bc      	add	ip, r7
    638c:	4463      	add	r3, ip
    638e:	3b08      	subs	r3, #8
    6390:	681a      	ldr	r2, [r3, #0]
    6392:	230e      	movs	r3, #14
    6394:	18fb      	adds	r3, r7, r3
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	01db      	lsls	r3, r3, #7
    639a:	18d3      	adds	r3, r2, r3
    639c:	e000      	b.n	63a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    639e:	2300      	movs	r3, #0
	}
}
    63a0:	0018      	movs	r0, r3
    63a2:	46bd      	mov	sp, r7
    63a4:	b004      	add	sp, #16
    63a6:	bd80      	pop	{r7, pc}
    63a8:	41004400 	.word	0x41004400

000063ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    63ac:	b580      	push	{r7, lr}
    63ae:	b088      	sub	sp, #32
    63b0:	af00      	add	r7, sp, #0
    63b2:	60f8      	str	r0, [r7, #12]
    63b4:	60b9      	str	r1, [r7, #8]
    63b6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    63b8:	2300      	movs	r3, #0
    63ba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    63bc:	687b      	ldr	r3, [r7, #4]
    63be:	78db      	ldrb	r3, [r3, #3]
    63c0:	2201      	movs	r2, #1
    63c2:	4053      	eors	r3, r2
    63c4:	b2db      	uxtb	r3, r3
    63c6:	2b00      	cmp	r3, #0
    63c8:	d035      	beq.n	6436 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    63ca:	687b      	ldr	r3, [r7, #4]
    63cc:	781b      	ldrb	r3, [r3, #0]
    63ce:	2b80      	cmp	r3, #128	; 0x80
    63d0:	d00b      	beq.n	63ea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    63d2:	69fb      	ldr	r3, [r7, #28]
    63d4:	2280      	movs	r2, #128	; 0x80
    63d6:	0252      	lsls	r2, r2, #9
    63d8:	4313      	orrs	r3, r2
    63da:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    63dc:	687b      	ldr	r3, [r7, #4]
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	061b      	lsls	r3, r3, #24
    63e2:	001a      	movs	r2, r3
    63e4:	69fb      	ldr	r3, [r7, #28]
    63e6:	4313      	orrs	r3, r2
    63e8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    63ea:	687b      	ldr	r3, [r7, #4]
    63ec:	785b      	ldrb	r3, [r3, #1]
    63ee:	2b00      	cmp	r3, #0
    63f0:	d003      	beq.n	63fa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    63f6:	2b02      	cmp	r3, #2
    63f8:	d110      	bne.n	641c <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    63fa:	69fb      	ldr	r3, [r7, #28]
    63fc:	2280      	movs	r2, #128	; 0x80
    63fe:	0292      	lsls	r2, r2, #10
    6400:	4313      	orrs	r3, r2
    6402:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6404:	687b      	ldr	r3, [r7, #4]
    6406:	789b      	ldrb	r3, [r3, #2]
    6408:	2b00      	cmp	r3, #0
    640a:	d004      	beq.n	6416 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    640c:	69fb      	ldr	r3, [r7, #28]
    640e:	2280      	movs	r2, #128	; 0x80
    6410:	02d2      	lsls	r2, r2, #11
    6412:	4313      	orrs	r3, r2
    6414:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6416:	68fb      	ldr	r3, [r7, #12]
    6418:	68ba      	ldr	r2, [r7, #8]
    641a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    641c:	687b      	ldr	r3, [r7, #4]
    641e:	785b      	ldrb	r3, [r3, #1]
    6420:	2b01      	cmp	r3, #1
    6422:	d003      	beq.n	642c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6424:	687b      	ldr	r3, [r7, #4]
    6426:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6428:	2b02      	cmp	r3, #2
    642a:	d107      	bne.n	643c <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    642c:	69fb      	ldr	r3, [r7, #28]
    642e:	4a22      	ldr	r2, [pc, #136]	; (64b8 <_system_pinmux_config+0x10c>)
    6430:	4013      	ands	r3, r2
    6432:	61fb      	str	r3, [r7, #28]
    6434:	e002      	b.n	643c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6436:	68fb      	ldr	r3, [r7, #12]
    6438:	68ba      	ldr	r2, [r7, #8]
    643a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    643c:	68bb      	ldr	r3, [r7, #8]
    643e:	041b      	lsls	r3, r3, #16
    6440:	0c1b      	lsrs	r3, r3, #16
    6442:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6444:	68bb      	ldr	r3, [r7, #8]
    6446:	0c1b      	lsrs	r3, r3, #16
    6448:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    644a:	69ba      	ldr	r2, [r7, #24]
    644c:	69fb      	ldr	r3, [r7, #28]
    644e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6450:	22a0      	movs	r2, #160	; 0xa0
    6452:	05d2      	lsls	r2, r2, #23
    6454:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6456:	68fb      	ldr	r3, [r7, #12]
    6458:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    645a:	697a      	ldr	r2, [r7, #20]
    645c:	69fb      	ldr	r3, [r7, #28]
    645e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6460:	22d0      	movs	r2, #208	; 0xd0
    6462:	0612      	lsls	r2, r2, #24
    6464:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6466:	68fb      	ldr	r3, [r7, #12]
    6468:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    646a:	687b      	ldr	r3, [r7, #4]
    646c:	78db      	ldrb	r3, [r3, #3]
    646e:	2201      	movs	r2, #1
    6470:	4053      	eors	r3, r2
    6472:	b2db      	uxtb	r3, r3
    6474:	2b00      	cmp	r3, #0
    6476:	d01a      	beq.n	64ae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6478:	69fa      	ldr	r2, [r7, #28]
    647a:	2380      	movs	r3, #128	; 0x80
    647c:	02db      	lsls	r3, r3, #11
    647e:	4013      	ands	r3, r2
    6480:	d00a      	beq.n	6498 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6482:	687b      	ldr	r3, [r7, #4]
    6484:	789b      	ldrb	r3, [r3, #2]
    6486:	2b01      	cmp	r3, #1
    6488:	d103      	bne.n	6492 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    648a:	68fb      	ldr	r3, [r7, #12]
    648c:	68ba      	ldr	r2, [r7, #8]
    648e:	619a      	str	r2, [r3, #24]
    6490:	e002      	b.n	6498 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6492:	68fb      	ldr	r3, [r7, #12]
    6494:	68ba      	ldr	r2, [r7, #8]
    6496:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6498:	687b      	ldr	r3, [r7, #4]
    649a:	785b      	ldrb	r3, [r3, #1]
    649c:	2b01      	cmp	r3, #1
    649e:	d003      	beq.n	64a8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    64a0:	687b      	ldr	r3, [r7, #4]
    64a2:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    64a4:	2b02      	cmp	r3, #2
    64a6:	d102      	bne.n	64ae <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    64a8:	68fb      	ldr	r3, [r7, #12]
    64aa:	68ba      	ldr	r2, [r7, #8]
    64ac:	609a      	str	r2, [r3, #8]
		}
	}
}
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	46bd      	mov	sp, r7
    64b2:	b008      	add	sp, #32
    64b4:	bd80      	pop	{r7, pc}
    64b6:	46c0      	nop			; (mov r8, r8)
    64b8:	fffbffff 	.word	0xfffbffff

000064bc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    64bc:	b580      	push	{r7, lr}
    64be:	b084      	sub	sp, #16
    64c0:	af00      	add	r7, sp, #0
    64c2:	0002      	movs	r2, r0
    64c4:	6039      	str	r1, [r7, #0]
    64c6:	1dfb      	adds	r3, r7, #7
    64c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    64ca:	1dfb      	adds	r3, r7, #7
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	0018      	movs	r0, r3
    64d0:	4b0a      	ldr	r3, [pc, #40]	; (64fc <system_pinmux_pin_set_config+0x40>)
    64d2:	4798      	blx	r3
    64d4:	0003      	movs	r3, r0
    64d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    64d8:	1dfb      	adds	r3, r7, #7
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	221f      	movs	r2, #31
    64de:	4013      	ands	r3, r2
    64e0:	2201      	movs	r2, #1
    64e2:	409a      	lsls	r2, r3
    64e4:	0013      	movs	r3, r2
    64e6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    64e8:	683a      	ldr	r2, [r7, #0]
    64ea:	68b9      	ldr	r1, [r7, #8]
    64ec:	68fb      	ldr	r3, [r7, #12]
    64ee:	0018      	movs	r0, r3
    64f0:	4b03      	ldr	r3, [pc, #12]	; (6500 <system_pinmux_pin_set_config+0x44>)
    64f2:	4798      	blx	r3
}
    64f4:	46c0      	nop			; (mov r8, r8)
    64f6:	46bd      	mov	sp, r7
    64f8:	b004      	add	sp, #16
    64fa:	bd80      	pop	{r7, pc}
    64fc:	0000634d 	.word	0x0000634d
    6500:	000063ad 	.word	0x000063ad

00006504 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6504:	b580      	push	{r7, lr}
    6506:	af00      	add	r7, sp, #0
	return;
    6508:	46c0      	nop			; (mov r8, r8)
}
    650a:	46bd      	mov	sp, r7
    650c:	bd80      	pop	{r7, pc}
    650e:	46c0      	nop			; (mov r8, r8)

00006510 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6510:	b580      	push	{r7, lr}
    6512:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6514:	4b06      	ldr	r3, [pc, #24]	; (6530 <system_init+0x20>)
    6516:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6518:	4b06      	ldr	r3, [pc, #24]	; (6534 <system_init+0x24>)
    651a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    651c:	4b06      	ldr	r3, [pc, #24]	; (6538 <system_init+0x28>)
    651e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6520:	4b06      	ldr	r3, [pc, #24]	; (653c <system_init+0x2c>)
    6522:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6524:	4b06      	ldr	r3, [pc, #24]	; (6540 <system_init+0x30>)
    6526:	4798      	blx	r3
}
    6528:	46c0      	nop			; (mov r8, r8)
    652a:	46bd      	mov	sp, r7
    652c:	bd80      	pop	{r7, pc}
    652e:	46c0      	nop			; (mov r8, r8)
    6530:	00005c29 	.word	0x00005c29
    6534:	00003581 	.word	0x00003581
    6538:	00006505 	.word	0x00006505
    653c:	00003ca9 	.word	0x00003ca9
    6540:	00006505 	.word	0x00006505

00006544 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6544:	b580      	push	{r7, lr}
    6546:	af00      	add	r7, sp, #0
    6548:	2000      	movs	r0, #0
    654a:	4b02      	ldr	r3, [pc, #8]	; (6554 <TCC0_Handler+0x10>)
    654c:	4798      	blx	r3
    654e:	46c0      	nop			; (mov r8, r8)
    6550:	46bd      	mov	sp, r7
    6552:	bd80      	pop	{r7, pc}
    6554:	00006581 	.word	0x00006581

00006558 <TCC1_Handler>:
    6558:	b580      	push	{r7, lr}
    655a:	af00      	add	r7, sp, #0
    655c:	2001      	movs	r0, #1
    655e:	4b02      	ldr	r3, [pc, #8]	; (6568 <TCC1_Handler+0x10>)
    6560:	4798      	blx	r3
    6562:	46c0      	nop			; (mov r8, r8)
    6564:	46bd      	mov	sp, r7
    6566:	bd80      	pop	{r7, pc}
    6568:	00006581 	.word	0x00006581

0000656c <TCC2_Handler>:
    656c:	b580      	push	{r7, lr}
    656e:	af00      	add	r7, sp, #0
    6570:	2002      	movs	r0, #2
    6572:	4b02      	ldr	r3, [pc, #8]	; (657c <TCC2_Handler+0x10>)
    6574:	4798      	blx	r3
    6576:	46c0      	nop			; (mov r8, r8)
    6578:	46bd      	mov	sp, r7
    657a:	bd80      	pop	{r7, pc}
    657c:	00006581 	.word	0x00006581

00006580 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6580:	b580      	push	{r7, lr}
    6582:	b086      	sub	sp, #24
    6584:	af00      	add	r7, sp, #0
    6586:	0002      	movs	r2, r0
    6588:	1dfb      	adds	r3, r7, #7
    658a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    658c:	1dfb      	adds	r3, r7, #7
    658e:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6590:	4b18      	ldr	r3, [pc, #96]	; (65f4 <_tcc_interrupt_handler+0x74>)
    6592:	0092      	lsls	r2, r2, #2
    6594:	58d3      	ldr	r3, [r2, r3]
    6596:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6598:	693b      	ldr	r3, [r7, #16]
    659a:	681b      	ldr	r3, [r3, #0]
    659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    659e:	693b      	ldr	r3, [r7, #16]
    65a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    65a2:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    65a4:	693b      	ldr	r3, [r7, #16]
    65a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    65a8:	4013      	ands	r3, r2
    65aa:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    65ac:	2300      	movs	r3, #0
    65ae:	617b      	str	r3, [r7, #20]
    65b0:	e019      	b.n	65e6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    65b2:	4b11      	ldr	r3, [pc, #68]	; (65f8 <_tcc_interrupt_handler+0x78>)
    65b4:	697a      	ldr	r2, [r7, #20]
    65b6:	0092      	lsls	r2, r2, #2
    65b8:	58d3      	ldr	r3, [r2, r3]
    65ba:	68fa      	ldr	r2, [r7, #12]
    65bc:	4013      	ands	r3, r2
    65be:	d00f      	beq.n	65e0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    65c0:	693a      	ldr	r2, [r7, #16]
    65c2:	697b      	ldr	r3, [r7, #20]
    65c4:	009b      	lsls	r3, r3, #2
    65c6:	18d3      	adds	r3, r2, r3
    65c8:	3304      	adds	r3, #4
    65ca:	681b      	ldr	r3, [r3, #0]
    65cc:	693a      	ldr	r2, [r7, #16]
    65ce:	0010      	movs	r0, r2
    65d0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    65d2:	693b      	ldr	r3, [r7, #16]
    65d4:	681b      	ldr	r3, [r3, #0]
    65d6:	4a08      	ldr	r2, [pc, #32]	; (65f8 <_tcc_interrupt_handler+0x78>)
    65d8:	6979      	ldr	r1, [r7, #20]
    65da:	0089      	lsls	r1, r1, #2
    65dc:	588a      	ldr	r2, [r1, r2]
    65de:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    65e0:	697b      	ldr	r3, [r7, #20]
    65e2:	3301      	adds	r3, #1
    65e4:	617b      	str	r3, [r7, #20]
    65e6:	697b      	ldr	r3, [r7, #20]
    65e8:	2b0b      	cmp	r3, #11
    65ea:	dde2      	ble.n	65b2 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    65ec:	46c0      	nop			; (mov r8, r8)
    65ee:	46bd      	mov	sp, r7
    65f0:	b006      	add	sp, #24
    65f2:	bd80      	pop	{r7, pc}
    65f4:	200045d0 	.word	0x200045d0
    65f8:	0000c52c 	.word	0x0000c52c

000065fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    65fc:	b580      	push	{r7, lr}
    65fe:	b082      	sub	sp, #8
    6600:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6602:	4b2f      	ldr	r3, [pc, #188]	; (66c0 <Reset_Handler+0xc4>)
    6604:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6606:	4b2f      	ldr	r3, [pc, #188]	; (66c4 <Reset_Handler+0xc8>)
    6608:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    660a:	687a      	ldr	r2, [r7, #4]
    660c:	683b      	ldr	r3, [r7, #0]
    660e:	429a      	cmp	r2, r3
    6610:	d00c      	beq.n	662c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6612:	e007      	b.n	6624 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6614:	683b      	ldr	r3, [r7, #0]
    6616:	1d1a      	adds	r2, r3, #4
    6618:	603a      	str	r2, [r7, #0]
    661a:	687a      	ldr	r2, [r7, #4]
    661c:	1d11      	adds	r1, r2, #4
    661e:	6079      	str	r1, [r7, #4]
    6620:	6812      	ldr	r2, [r2, #0]
    6622:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    6624:	683a      	ldr	r2, [r7, #0]
    6626:	4b28      	ldr	r3, [pc, #160]	; (66c8 <Reset_Handler+0xcc>)
    6628:	429a      	cmp	r2, r3
    662a:	d3f3      	bcc.n	6614 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    662c:	4b27      	ldr	r3, [pc, #156]	; (66cc <Reset_Handler+0xd0>)
    662e:	603b      	str	r3, [r7, #0]
    6630:	e004      	b.n	663c <Reset_Handler+0x40>
                *pDest++ = 0;
    6632:	683b      	ldr	r3, [r7, #0]
    6634:	1d1a      	adds	r2, r3, #4
    6636:	603a      	str	r2, [r7, #0]
    6638:	2200      	movs	r2, #0
    663a:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    663c:	683a      	ldr	r2, [r7, #0]
    663e:	4b24      	ldr	r3, [pc, #144]	; (66d0 <Reset_Handler+0xd4>)
    6640:	429a      	cmp	r2, r3
    6642:	d3f6      	bcc.n	6632 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6644:	4b23      	ldr	r3, [pc, #140]	; (66d4 <Reset_Handler+0xd8>)
    6646:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6648:	4b23      	ldr	r3, [pc, #140]	; (66d8 <Reset_Handler+0xdc>)
    664a:	687a      	ldr	r2, [r7, #4]
    664c:	21ff      	movs	r1, #255	; 0xff
    664e:	438a      	bics	r2, r1
    6650:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6652:	4a22      	ldr	r2, [pc, #136]	; (66dc <Reset_Handler+0xe0>)
    6654:	2390      	movs	r3, #144	; 0x90
    6656:	005b      	lsls	r3, r3, #1
    6658:	2102      	movs	r1, #2
    665a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    665c:	4a20      	ldr	r2, [pc, #128]	; (66e0 <Reset_Handler+0xe4>)
    665e:	78d3      	ldrb	r3, [r2, #3]
    6660:	2103      	movs	r1, #3
    6662:	438b      	bics	r3, r1
    6664:	1c19      	adds	r1, r3, #0
    6666:	2302      	movs	r3, #2
    6668:	430b      	orrs	r3, r1
    666a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    666c:	4a1c      	ldr	r2, [pc, #112]	; (66e0 <Reset_Handler+0xe4>)
    666e:	78d3      	ldrb	r3, [r2, #3]
    6670:	210c      	movs	r1, #12
    6672:	438b      	bics	r3, r1
    6674:	1c19      	adds	r1, r3, #0
    6676:	2308      	movs	r3, #8
    6678:	430b      	orrs	r3, r1
    667a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    667c:	4a19      	ldr	r2, [pc, #100]	; (66e4 <Reset_Handler+0xe8>)
    667e:	7b93      	ldrb	r3, [r2, #14]
    6680:	2130      	movs	r1, #48	; 0x30
    6682:	438b      	bics	r3, r1
    6684:	1c19      	adds	r1, r3, #0
    6686:	2320      	movs	r3, #32
    6688:	430b      	orrs	r3, r1
    668a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    668c:	4a15      	ldr	r2, [pc, #84]	; (66e4 <Reset_Handler+0xe8>)
    668e:	7b93      	ldrb	r3, [r2, #14]
    6690:	210c      	movs	r1, #12
    6692:	438b      	bics	r3, r1
    6694:	1c19      	adds	r1, r3, #0
    6696:	2308      	movs	r3, #8
    6698:	430b      	orrs	r3, r1
    669a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    669c:	4a11      	ldr	r2, [pc, #68]	; (66e4 <Reset_Handler+0xe8>)
    669e:	7b93      	ldrb	r3, [r2, #14]
    66a0:	2103      	movs	r1, #3
    66a2:	438b      	bics	r3, r1
    66a4:	1c19      	adds	r1, r3, #0
    66a6:	2302      	movs	r3, #2
    66a8:	430b      	orrs	r3, r1
    66aa:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    66ac:	4a0e      	ldr	r2, [pc, #56]	; (66e8 <Reset_Handler+0xec>)
    66ae:	6853      	ldr	r3, [r2, #4]
    66b0:	2180      	movs	r1, #128	; 0x80
    66b2:	430b      	orrs	r3, r1
    66b4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    66b6:	4b0d      	ldr	r3, [pc, #52]	; (66ec <Reset_Handler+0xf0>)
    66b8:	4798      	blx	r3

        /* Branch to main function */
        main();
    66ba:	4b0d      	ldr	r3, [pc, #52]	; (66f0 <Reset_Handler+0xf4>)
    66bc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    66be:	e7fe      	b.n	66be <Reset_Handler+0xc2>
    66c0:	0000cb64 	.word	0x0000cb64
    66c4:	20000000 	.word	0x20000000
    66c8:	20000090 	.word	0x20000090
    66cc:	20000090 	.word	0x20000090
    66d0:	2000461c 	.word	0x2000461c
    66d4:	00000000 	.word	0x00000000
    66d8:	e000ed00 	.word	0xe000ed00
    66dc:	41007000 	.word	0x41007000
    66e0:	41005000 	.word	0x41005000
    66e4:	41004800 	.word	0x41004800
    66e8:	41004000 	.word	0x41004000
    66ec:	0000a1fd 	.word	0x0000a1fd
    66f0:	000091ad 	.word	0x000091ad

000066f4 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    66f4:	b580      	push	{r7, lr}
    66f6:	b082      	sub	sp, #8
    66f8:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    66fa:	f3ef 8305 	mrs	r3, IPSR
    66fe:	607b      	str	r3, [r7, #4]
  return(result);
    6700:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    6702:	4b01      	ldr	r3, [pc, #4]	; (6708 <Dummy_Handler+0x14>)
    6704:	601a      	str	r2, [r3, #0]
        }
    6706:	e7f8      	b.n	66fa <Dummy_Handler+0x6>
    6708:	20000014 	.word	0x20000014

0000670c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    670c:	b580      	push	{r7, lr}
    670e:	b086      	sub	sp, #24
    6710:	af00      	add	r7, sp, #0
    6712:	60f8      	str	r0, [r7, #12]
    6714:	60b9      	str	r1, [r7, #8]
    6716:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6718:	2300      	movs	r3, #0
    671a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    671c:	68fb      	ldr	r3, [r7, #12]
    671e:	2b00      	cmp	r3, #0
    6720:	d012      	beq.n	6748 <_read+0x3c>
		return -1;
    6722:	2301      	movs	r3, #1
    6724:	425b      	negs	r3, r3
    6726:	e013      	b.n	6750 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6728:	4b0b      	ldr	r3, [pc, #44]	; (6758 <_read+0x4c>)
    672a:	681a      	ldr	r2, [r3, #0]
    672c:	4b0b      	ldr	r3, [pc, #44]	; (675c <_read+0x50>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	68b9      	ldr	r1, [r7, #8]
    6732:	0018      	movs	r0, r3
    6734:	4790      	blx	r2
		ptr++;
    6736:	68bb      	ldr	r3, [r7, #8]
    6738:	3301      	adds	r3, #1
    673a:	60bb      	str	r3, [r7, #8]
		nChars++;
    673c:	697b      	ldr	r3, [r7, #20]
    673e:	3301      	adds	r3, #1
    6740:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	3b01      	subs	r3, #1
    6746:	607b      	str	r3, [r7, #4]
    6748:	687b      	ldr	r3, [r7, #4]
    674a:	2b00      	cmp	r3, #0
    674c:	dcec      	bgt.n	6728 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    674e:	697b      	ldr	r3, [r7, #20]
}
    6750:	0018      	movs	r0, r3
    6752:	46bd      	mov	sp, r7
    6754:	b006      	add	sp, #24
    6756:	bd80      	pop	{r7, pc}
    6758:	200045dc 	.word	0x200045dc
    675c:	200045e4 	.word	0x200045e4

00006760 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6760:	b580      	push	{r7, lr}
    6762:	b086      	sub	sp, #24
    6764:	af00      	add	r7, sp, #0
    6766:	60f8      	str	r0, [r7, #12]
    6768:	60b9      	str	r1, [r7, #8]
    676a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    676c:	2300      	movs	r3, #0
    676e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6770:	68fb      	ldr	r3, [r7, #12]
    6772:	2b01      	cmp	r3, #1
    6774:	d01d      	beq.n	67b2 <_write+0x52>
    6776:	68fb      	ldr	r3, [r7, #12]
    6778:	2b02      	cmp	r3, #2
    677a:	d01a      	beq.n	67b2 <_write+0x52>
    677c:	68fb      	ldr	r3, [r7, #12]
    677e:	2b03      	cmp	r3, #3
    6780:	d017      	beq.n	67b2 <_write+0x52>
		return -1;
    6782:	2301      	movs	r3, #1
    6784:	425b      	negs	r3, r3
    6786:	e018      	b.n	67ba <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6788:	4b0e      	ldr	r3, [pc, #56]	; (67c4 <_write+0x64>)
    678a:	681a      	ldr	r2, [r3, #0]
    678c:	4b0e      	ldr	r3, [pc, #56]	; (67c8 <_write+0x68>)
    678e:	6818      	ldr	r0, [r3, #0]
    6790:	68bb      	ldr	r3, [r7, #8]
    6792:	1c59      	adds	r1, r3, #1
    6794:	60b9      	str	r1, [r7, #8]
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	0019      	movs	r1, r3
    679a:	4790      	blx	r2
    679c:	1e03      	subs	r3, r0, #0
    679e:	da02      	bge.n	67a6 <_write+0x46>
			return -1;
    67a0:	2301      	movs	r3, #1
    67a2:	425b      	negs	r3, r3
    67a4:	e009      	b.n	67ba <_write+0x5a>
		}
		++nChars;
    67a6:	697b      	ldr	r3, [r7, #20]
    67a8:	3301      	adds	r3, #1
    67aa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	3b01      	subs	r3, #1
    67b0:	607b      	str	r3, [r7, #4]
    67b2:	687b      	ldr	r3, [r7, #4]
    67b4:	2b00      	cmp	r3, #0
    67b6:	d1e7      	bne.n	6788 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    67b8:	697b      	ldr	r3, [r7, #20]
}
    67ba:	0018      	movs	r0, r3
    67bc:	46bd      	mov	sp, r7
    67be:	b006      	add	sp, #24
    67c0:	bd80      	pop	{r7, pc}
    67c2:	46c0      	nop			; (mov r8, r8)
    67c4:	200045e0 	.word	0x200045e0
    67c8:	200045e4 	.word	0x200045e4

000067cc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b084      	sub	sp, #16
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    67d4:	4b0a      	ldr	r3, [pc, #40]	; (6800 <_sbrk+0x34>)
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	2b00      	cmp	r3, #0
    67da:	d102      	bne.n	67e2 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    67dc:	4b08      	ldr	r3, [pc, #32]	; (6800 <_sbrk+0x34>)
    67de:	4a09      	ldr	r2, [pc, #36]	; (6804 <_sbrk+0x38>)
    67e0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    67e2:	4b07      	ldr	r3, [pc, #28]	; (6800 <_sbrk+0x34>)
    67e4:	681b      	ldr	r3, [r3, #0]
    67e6:	60fb      	str	r3, [r7, #12]

	heap += incr;
    67e8:	4b05      	ldr	r3, [pc, #20]	; (6800 <_sbrk+0x34>)
    67ea:	681a      	ldr	r2, [r3, #0]
    67ec:	687b      	ldr	r3, [r7, #4]
    67ee:	18d2      	adds	r2, r2, r3
    67f0:	4b03      	ldr	r3, [pc, #12]	; (6800 <_sbrk+0x34>)
    67f2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    67f4:	68fb      	ldr	r3, [r7, #12]
}
    67f6:	0018      	movs	r0, r3
    67f8:	46bd      	mov	sp, r7
    67fa:	b004      	add	sp, #16
    67fc:	bd80      	pop	{r7, pc}
    67fe:	46c0      	nop			; (mov r8, r8)
    6800:	20000104 	.word	0x20000104
    6804:	20006620 	.word	0x20006620

00006808 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6808:	b580      	push	{r7, lr}
    680a:	b082      	sub	sp, #8
    680c:	af00      	add	r7, sp, #0
    680e:	6078      	str	r0, [r7, #4]
	return -1;
    6810:	2301      	movs	r3, #1
    6812:	425b      	negs	r3, r3
}
    6814:	0018      	movs	r0, r3
    6816:	46bd      	mov	sp, r7
    6818:	b002      	add	sp, #8
    681a:	bd80      	pop	{r7, pc}

0000681c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    681c:	b580      	push	{r7, lr}
    681e:	b082      	sub	sp, #8
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
    6824:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6826:	683b      	ldr	r3, [r7, #0]
    6828:	2280      	movs	r2, #128	; 0x80
    682a:	0192      	lsls	r2, r2, #6
    682c:	605a      	str	r2, [r3, #4]

	return 0;
    682e:	2300      	movs	r3, #0
}
    6830:	0018      	movs	r0, r3
    6832:	46bd      	mov	sp, r7
    6834:	b002      	add	sp, #8
    6836:	bd80      	pop	{r7, pc}

00006838 <_isatty>:

extern int _isatty(int file)
{
    6838:	b580      	push	{r7, lr}
    683a:	b082      	sub	sp, #8
    683c:	af00      	add	r7, sp, #0
    683e:	6078      	str	r0, [r7, #4]
	return 1;
    6840:	2301      	movs	r3, #1
}
    6842:	0018      	movs	r0, r3
    6844:	46bd      	mov	sp, r7
    6846:	b002      	add	sp, #8
    6848:	bd80      	pop	{r7, pc}
    684a:	46c0      	nop			; (mov r8, r8)

0000684c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    684c:	b580      	push	{r7, lr}
    684e:	b084      	sub	sp, #16
    6850:	af00      	add	r7, sp, #0
    6852:	60f8      	str	r0, [r7, #12]
    6854:	60b9      	str	r1, [r7, #8]
    6856:	607a      	str	r2, [r7, #4]
	return 0;
    6858:	2300      	movs	r3, #0
}
    685a:	0018      	movs	r0, r3
    685c:	46bd      	mov	sp, r7
    685e:	b004      	add	sp, #16
    6860:	bd80      	pop	{r7, pc}
    6862:	46c0      	nop			; (mov r8, r8)

00006864 <_exit>:

extern void _exit(int status)
{
    6864:	b580      	push	{r7, lr}
    6866:	b082      	sub	sp, #8
    6868:	af00      	add	r7, sp, #0
    686a:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    686c:	be00      	bkpt	0x0000
}
    686e:	46c0      	nop			; (mov r8, r8)
    6870:	46bd      	mov	sp, r7
    6872:	b002      	add	sp, #8
    6874:	bd80      	pop	{r7, pc}
    6876:	46c0      	nop			; (mov r8, r8)

00006878 <_kill>:

extern void _kill(int pid, int sig)
{
    6878:	b580      	push	{r7, lr}
    687a:	b082      	sub	sp, #8
    687c:	af00      	add	r7, sp, #0
    687e:	6078      	str	r0, [r7, #4]
    6880:	6039      	str	r1, [r7, #0]
	return;
    6882:	46c0      	nop			; (mov r8, r8)
}
    6884:	46bd      	mov	sp, r7
    6886:	b002      	add	sp, #8
    6888:	bd80      	pop	{r7, pc}
    688a:	46c0      	nop			; (mov r8, r8)

0000688c <_getpid>:

extern int _getpid(void)
{
    688c:	b580      	push	{r7, lr}
    688e:	af00      	add	r7, sp, #0
	return -1;
    6890:	2301      	movs	r3, #1
    6892:	425b      	negs	r3, r3
}
    6894:	0018      	movs	r0, r3
    6896:	46bd      	mov	sp, r7
    6898:	bd80      	pop	{r7, pc}
    689a:	46c0      	nop			; (mov r8, r8)

0000689c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    689c:	b580      	push	{r7, lr}
    689e:	b082      	sub	sp, #8
    68a0:	af00      	add	r7, sp, #0
    68a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	3308      	adds	r3, #8
    68a8:	001a      	movs	r2, r3
    68aa:	687b      	ldr	r3, [r7, #4]
    68ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	2201      	movs	r2, #1
    68b2:	4252      	negs	r2, r2
    68b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    68b6:	687b      	ldr	r3, [r7, #4]
    68b8:	3308      	adds	r3, #8
    68ba:	001a      	movs	r2, r3
    68bc:	687b      	ldr	r3, [r7, #4]
    68be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    68c0:	687b      	ldr	r3, [r7, #4]
    68c2:	3308      	adds	r3, #8
    68c4:	001a      	movs	r2, r3
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	2200      	movs	r2, #0
    68ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    68d0:	46c0      	nop			; (mov r8, r8)
    68d2:	46bd      	mov	sp, r7
    68d4:	b002      	add	sp, #8
    68d6:	bd80      	pop	{r7, pc}

000068d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    68d8:	b580      	push	{r7, lr}
    68da:	b082      	sub	sp, #8
    68dc:	af00      	add	r7, sp, #0
    68de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	2200      	movs	r2, #0
    68e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    68e6:	46c0      	nop			; (mov r8, r8)
    68e8:	46bd      	mov	sp, r7
    68ea:	b002      	add	sp, #8
    68ec:	bd80      	pop	{r7, pc}
    68ee:	46c0      	nop			; (mov r8, r8)

000068f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
    68f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    68fa:	687b      	ldr	r3, [r7, #4]
    68fc:	685b      	ldr	r3, [r3, #4]
    68fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    6900:	683b      	ldr	r3, [r7, #0]
    6902:	68fa      	ldr	r2, [r7, #12]
    6904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6906:	68fb      	ldr	r3, [r7, #12]
    6908:	689a      	ldr	r2, [r3, #8]
    690a:	683b      	ldr	r3, [r7, #0]
    690c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    690e:	68fb      	ldr	r3, [r7, #12]
    6910:	689b      	ldr	r3, [r3, #8]
    6912:	683a      	ldr	r2, [r7, #0]
    6914:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6916:	68fb      	ldr	r3, [r7, #12]
    6918:	683a      	ldr	r2, [r7, #0]
    691a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	687a      	ldr	r2, [r7, #4]
    6920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6922:	687b      	ldr	r3, [r7, #4]
    6924:	681b      	ldr	r3, [r3, #0]
    6926:	1c5a      	adds	r2, r3, #1
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	601a      	str	r2, [r3, #0]
}
    692c:	46c0      	nop			; (mov r8, r8)
    692e:	46bd      	mov	sp, r7
    6930:	b004      	add	sp, #16
    6932:	bd80      	pop	{r7, pc}

00006934 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6934:	b580      	push	{r7, lr}
    6936:	b084      	sub	sp, #16
    6938:	af00      	add	r7, sp, #0
    693a:	6078      	str	r0, [r7, #4]
    693c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    693e:	683b      	ldr	r3, [r7, #0]
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6944:	68bb      	ldr	r3, [r7, #8]
    6946:	3301      	adds	r3, #1
    6948:	d103      	bne.n	6952 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    694a:	687b      	ldr	r3, [r7, #4]
    694c:	691b      	ldr	r3, [r3, #16]
    694e:	60fb      	str	r3, [r7, #12]
    6950:	e00c      	b.n	696c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6952:	687b      	ldr	r3, [r7, #4]
    6954:	3308      	adds	r3, #8
    6956:	60fb      	str	r3, [r7, #12]
    6958:	e002      	b.n	6960 <vListInsert+0x2c>
    695a:	68fb      	ldr	r3, [r7, #12]
    695c:	685b      	ldr	r3, [r3, #4]
    695e:	60fb      	str	r3, [r7, #12]
    6960:	68fb      	ldr	r3, [r7, #12]
    6962:	685b      	ldr	r3, [r3, #4]
    6964:	681a      	ldr	r2, [r3, #0]
    6966:	68bb      	ldr	r3, [r7, #8]
    6968:	429a      	cmp	r2, r3
    696a:	d9f6      	bls.n	695a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    696c:	68fb      	ldr	r3, [r7, #12]
    696e:	685a      	ldr	r2, [r3, #4]
    6970:	683b      	ldr	r3, [r7, #0]
    6972:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    6974:	683b      	ldr	r3, [r7, #0]
    6976:	685b      	ldr	r3, [r3, #4]
    6978:	683a      	ldr	r2, [r7, #0]
    697a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    697c:	683b      	ldr	r3, [r7, #0]
    697e:	68fa      	ldr	r2, [r7, #12]
    6980:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    6982:	68fb      	ldr	r3, [r7, #12]
    6984:	683a      	ldr	r2, [r7, #0]
    6986:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6988:	683b      	ldr	r3, [r7, #0]
    698a:	687a      	ldr	r2, [r7, #4]
    698c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    698e:	687b      	ldr	r3, [r7, #4]
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	1c5a      	adds	r2, r3, #1
    6994:	687b      	ldr	r3, [r7, #4]
    6996:	601a      	str	r2, [r3, #0]
}
    6998:	46c0      	nop			; (mov r8, r8)
    699a:	46bd      	mov	sp, r7
    699c:	b004      	add	sp, #16
    699e:	bd80      	pop	{r7, pc}

000069a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    69a0:	b580      	push	{r7, lr}
    69a2:	b084      	sub	sp, #16
    69a4:	af00      	add	r7, sp, #0
    69a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    69a8:	687b      	ldr	r3, [r7, #4]
    69aa:	691b      	ldr	r3, [r3, #16]
    69ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    69ae:	687b      	ldr	r3, [r7, #4]
    69b0:	685b      	ldr	r3, [r3, #4]
    69b2:	687a      	ldr	r2, [r7, #4]
    69b4:	6892      	ldr	r2, [r2, #8]
    69b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    69b8:	687b      	ldr	r3, [r7, #4]
    69ba:	689b      	ldr	r3, [r3, #8]
    69bc:	687a      	ldr	r2, [r7, #4]
    69be:	6852      	ldr	r2, [r2, #4]
    69c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    69c2:	68fb      	ldr	r3, [r7, #12]
    69c4:	685a      	ldr	r2, [r3, #4]
    69c6:	687b      	ldr	r3, [r7, #4]
    69c8:	429a      	cmp	r2, r3
    69ca:	d103      	bne.n	69d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    69cc:	687b      	ldr	r3, [r7, #4]
    69ce:	689a      	ldr	r2, [r3, #8]
    69d0:	68fb      	ldr	r3, [r7, #12]
    69d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    69d4:	687b      	ldr	r3, [r7, #4]
    69d6:	2200      	movs	r2, #0
    69d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    69da:	68fb      	ldr	r3, [r7, #12]
    69dc:	681b      	ldr	r3, [r3, #0]
    69de:	1e5a      	subs	r2, r3, #1
    69e0:	68fb      	ldr	r3, [r7, #12]
    69e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    69e4:	68fb      	ldr	r3, [r7, #12]
    69e6:	681b      	ldr	r3, [r3, #0]
}
    69e8:	0018      	movs	r0, r3
    69ea:	46bd      	mov	sp, r7
    69ec:	b004      	add	sp, #16
    69ee:	bd80      	pop	{r7, pc}

000069f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    69f0:	b580      	push	{r7, lr}
    69f2:	b084      	sub	sp, #16
    69f4:	af00      	add	r7, sp, #0
    69f6:	60f8      	str	r0, [r7, #12]
    69f8:	60b9      	str	r1, [r7, #8]
    69fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    69fc:	68fb      	ldr	r3, [r7, #12]
    69fe:	3b04      	subs	r3, #4
    6a00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6a02:	68fb      	ldr	r3, [r7, #12]
    6a04:	2280      	movs	r2, #128	; 0x80
    6a06:	0452      	lsls	r2, r2, #17
    6a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6a0a:	68fb      	ldr	r3, [r7, #12]
    6a0c:	3b04      	subs	r3, #4
    6a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    6a10:	68ba      	ldr	r2, [r7, #8]
    6a12:	68fb      	ldr	r3, [r7, #12]
    6a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6a16:	68fb      	ldr	r3, [r7, #12]
    6a18:	3b04      	subs	r3, #4
    6a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6a1c:	4a08      	ldr	r2, [pc, #32]	; (6a40 <pxPortInitialiseStack+0x50>)
    6a1e:	68fb      	ldr	r3, [r7, #12]
    6a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6a22:	68fb      	ldr	r3, [r7, #12]
    6a24:	3b14      	subs	r3, #20
    6a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6a28:	687a      	ldr	r2, [r7, #4]
    6a2a:	68fb      	ldr	r3, [r7, #12]
    6a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    6a2e:	68fb      	ldr	r3, [r7, #12]
    6a30:	3b20      	subs	r3, #32
    6a32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6a34:	68fb      	ldr	r3, [r7, #12]
}
    6a36:	0018      	movs	r0, r3
    6a38:	46bd      	mov	sp, r7
    6a3a:	b004      	add	sp, #16
    6a3c:	bd80      	pop	{r7, pc}
    6a3e:	46c0      	nop			; (mov r8, r8)
    6a40:	00006a45 	.word	0x00006a45

00006a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6a44:	b580      	push	{r7, lr}
    6a46:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    6a48:	4b03      	ldr	r3, [pc, #12]	; (6a58 <prvTaskExitError+0x14>)
    6a4a:	681b      	ldr	r3, [r3, #0]
    6a4c:	3301      	adds	r3, #1
    6a4e:	d001      	beq.n	6a54 <prvTaskExitError+0x10>
    6a50:	b672      	cpsid	i
    6a52:	e7fe      	b.n	6a52 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    6a54:	b672      	cpsid	i
	for( ;; );
    6a56:	e7fe      	b.n	6a56 <prvTaskExitError+0x12>
    6a58:	20000018 	.word	0x20000018

00006a5c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    6a5c:	b580      	push	{r7, lr}
    6a5e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    6a60:	46c0      	nop			; (mov r8, r8)
    6a62:	46bd      	mov	sp, r7
    6a64:	bd80      	pop	{r7, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
	...

00006a70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    6a70:	4a0b      	ldr	r2, [pc, #44]	; (6aa0 <pxCurrentTCBConst2>)
    6a72:	6813      	ldr	r3, [r2, #0]
    6a74:	6818      	ldr	r0, [r3, #0]
    6a76:	3020      	adds	r0, #32
    6a78:	f380 8809 	msr	PSP, r0
    6a7c:	2002      	movs	r0, #2
    6a7e:	f380 8814 	msr	CONTROL, r0
    6a82:	f3bf 8f6f 	isb	sy
    6a86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    6a88:	46ae      	mov	lr, r5
    6a8a:	bc08      	pop	{r3}
    6a8c:	bc04      	pop	{r2}
    6a8e:	b662      	cpsie	i
    6a90:	4718      	bx	r3
    6a92:	46c0      	nop			; (mov r8, r8)
    6a94:	46c0      	nop			; (mov r8, r8)
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	46c0      	nop			; (mov r8, r8)
    6a9a:	46c0      	nop			; (mov r8, r8)
    6a9c:	46c0      	nop			; (mov r8, r8)
    6a9e:	46c0      	nop			; (mov r8, r8)

00006aa0 <pxCurrentTCBConst2>:
    6aa0:	20003ba8 	.word	0x20003ba8
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    6aa4:	46c0      	nop			; (mov r8, r8)
    6aa6:	46c0      	nop			; (mov r8, r8)

00006aa8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6aa8:	b580      	push	{r7, lr}
    6aaa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    6aac:	4b0d      	ldr	r3, [pc, #52]	; (6ae4 <xPortStartScheduler+0x3c>)
    6aae:	4a0d      	ldr	r2, [pc, #52]	; (6ae4 <xPortStartScheduler+0x3c>)
    6ab0:	6812      	ldr	r2, [r2, #0]
    6ab2:	21ff      	movs	r1, #255	; 0xff
    6ab4:	0409      	lsls	r1, r1, #16
    6ab6:	430a      	orrs	r2, r1
    6ab8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    6aba:	4b0a      	ldr	r3, [pc, #40]	; (6ae4 <xPortStartScheduler+0x3c>)
    6abc:	4a09      	ldr	r2, [pc, #36]	; (6ae4 <xPortStartScheduler+0x3c>)
    6abe:	6812      	ldr	r2, [r2, #0]
    6ac0:	21ff      	movs	r1, #255	; 0xff
    6ac2:	0609      	lsls	r1, r1, #24
    6ac4:	430a      	orrs	r2, r1
    6ac6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    6ac8:	4b07      	ldr	r3, [pc, #28]	; (6ae8 <xPortStartScheduler+0x40>)
    6aca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    6acc:	4b07      	ldr	r3, [pc, #28]	; (6aec <xPortStartScheduler+0x44>)
    6ace:	2200      	movs	r2, #0
    6ad0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    6ad2:	4b07      	ldr	r3, [pc, #28]	; (6af0 <xPortStartScheduler+0x48>)
    6ad4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    6ad6:	4b07      	ldr	r3, [pc, #28]	; (6af4 <xPortStartScheduler+0x4c>)
    6ad8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    6ada:	2300      	movs	r3, #0
}
    6adc:	0018      	movs	r0, r3
    6ade:	46bd      	mov	sp, r7
    6ae0:	bd80      	pop	{r7, pc}
    6ae2:	46c0      	nop			; (mov r8, r8)
    6ae4:	e000ed20 	.word	0xe000ed20
    6ae8:	00006c09 	.word	0x00006c09
    6aec:	20000018 	.word	0x20000018
    6af0:	00006a71 	.word	0x00006a71
    6af4:	00006a45 	.word	0x00006a45

00006af8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    6af8:	b580      	push	{r7, lr}
    6afa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    6afc:	4b05      	ldr	r3, [pc, #20]	; (6b14 <vPortYield+0x1c>)
    6afe:	2280      	movs	r2, #128	; 0x80
    6b00:	0552      	lsls	r2, r2, #21
    6b02:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    6b04:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    6b08:	f3bf 8f6f 	isb	sy
}
    6b0c:	46c0      	nop			; (mov r8, r8)
    6b0e:	46bd      	mov	sp, r7
    6b10:	bd80      	pop	{r7, pc}
    6b12:	46c0      	nop			; (mov r8, r8)
    6b14:	e000ed04 	.word	0xe000ed04

00006b18 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    6b18:	b580      	push	{r7, lr}
    6b1a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    6b1c:	b672      	cpsid	i
    uxCriticalNesting++;
    6b1e:	4b06      	ldr	r3, [pc, #24]	; (6b38 <vPortEnterCritical+0x20>)
    6b20:	681b      	ldr	r3, [r3, #0]
    6b22:	1c5a      	adds	r2, r3, #1
    6b24:	4b04      	ldr	r3, [pc, #16]	; (6b38 <vPortEnterCritical+0x20>)
    6b26:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    6b28:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    6b2c:	f3bf 8f6f 	isb	sy
}
    6b30:	46c0      	nop			; (mov r8, r8)
    6b32:	46bd      	mov	sp, r7
    6b34:	bd80      	pop	{r7, pc}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	20000018 	.word	0x20000018

00006b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    6b40:	4b09      	ldr	r3, [pc, #36]	; (6b68 <vPortExitCritical+0x2c>)
    6b42:	681b      	ldr	r3, [r3, #0]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d101      	bne.n	6b4c <vPortExitCritical+0x10>
    6b48:	b672      	cpsid	i
    6b4a:	e7fe      	b.n	6b4a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    6b4c:	4b06      	ldr	r3, [pc, #24]	; (6b68 <vPortExitCritical+0x2c>)
    6b4e:	681b      	ldr	r3, [r3, #0]
    6b50:	1e5a      	subs	r2, r3, #1
    6b52:	4b05      	ldr	r3, [pc, #20]	; (6b68 <vPortExitCritical+0x2c>)
    6b54:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    6b56:	4b04      	ldr	r3, [pc, #16]	; (6b68 <vPortExitCritical+0x2c>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d100      	bne.n	6b60 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    6b5e:	b662      	cpsie	i
    }
}
    6b60:	46c0      	nop			; (mov r8, r8)
    6b62:	46bd      	mov	sp, r7
    6b64:	bd80      	pop	{r7, pc}
    6b66:	46c0      	nop			; (mov r8, r8)
    6b68:	20000018 	.word	0x20000018

00006b6c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    6b6c:	f3ef 8010 	mrs	r0, PRIMASK
    6b70:	b672      	cpsid	i
    6b72:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    6b74:	46c0      	nop			; (mov r8, r8)
    6b76:	0018      	movs	r0, r3

00006b78 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    6b78:	f380 8810 	msr	PRIMASK, r0
    6b7c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    6b7e:	46c0      	nop			; (mov r8, r8)

00006b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    6b80:	f3ef 8009 	mrs	r0, PSP
    6b84:	4b0e      	ldr	r3, [pc, #56]	; (6bc0 <pxCurrentTCBConst>)
    6b86:	681a      	ldr	r2, [r3, #0]
    6b88:	3820      	subs	r0, #32
    6b8a:	6010      	str	r0, [r2, #0]
    6b8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    6b8e:	4644      	mov	r4, r8
    6b90:	464d      	mov	r5, r9
    6b92:	4656      	mov	r6, sl
    6b94:	465f      	mov	r7, fp
    6b96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    6b98:	b508      	push	{r3, lr}
    6b9a:	b672      	cpsid	i
    6b9c:	f001 f902 	bl	7da4 <vTaskSwitchContext>
    6ba0:	b662      	cpsie	i
    6ba2:	bc0c      	pop	{r2, r3}
    6ba4:	6811      	ldr	r1, [r2, #0]
    6ba6:	6808      	ldr	r0, [r1, #0]
    6ba8:	3010      	adds	r0, #16
    6baa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    6bac:	46a0      	mov	r8, r4
    6bae:	46a9      	mov	r9, r5
    6bb0:	46b2      	mov	sl, r6
    6bb2:	46bb      	mov	fp, r7
    6bb4:	f380 8809 	msr	PSP, r0
    6bb8:	3820      	subs	r0, #32
    6bba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    6bbc:	4718      	bx	r3
    6bbe:	46c0      	nop			; (mov r8, r8)

00006bc0 <pxCurrentTCBConst>:
    6bc0:	20003ba8 	.word	0x20003ba8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    6bc4:	46c0      	nop			; (mov r8, r8)
    6bc6:	46c0      	nop			; (mov r8, r8)

00006bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    6bc8:	b580      	push	{r7, lr}
    6bca:	b082      	sub	sp, #8
    6bcc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    6bce:	4b0a      	ldr	r3, [pc, #40]	; (6bf8 <SysTick_Handler+0x30>)
    6bd0:	4798      	blx	r3
    6bd2:	0003      	movs	r3, r0
    6bd4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    6bd6:	4b09      	ldr	r3, [pc, #36]	; (6bfc <SysTick_Handler+0x34>)
    6bd8:	4798      	blx	r3
    6bda:	1e03      	subs	r3, r0, #0
    6bdc:	d003      	beq.n	6be6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    6bde:	4b08      	ldr	r3, [pc, #32]	; (6c00 <SysTick_Handler+0x38>)
    6be0:	2280      	movs	r2, #128	; 0x80
    6be2:	0552      	lsls	r2, r2, #21
    6be4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    6be6:	687b      	ldr	r3, [r7, #4]
    6be8:	0018      	movs	r0, r3
    6bea:	4b06      	ldr	r3, [pc, #24]	; (6c04 <SysTick_Handler+0x3c>)
    6bec:	4798      	blx	r3
}
    6bee:	46c0      	nop			; (mov r8, r8)
    6bf0:	46bd      	mov	sp, r7
    6bf2:	b002      	add	sp, #8
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	46c0      	nop			; (mov r8, r8)
    6bf8:	00006b6d 	.word	0x00006b6d
    6bfc:	00007c31 	.word	0x00007c31
    6c00:	e000ed04 	.word	0xe000ed04
    6c04:	00006b79 	.word	0x00006b79

00006c08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    6c08:	b580      	push	{r7, lr}
    6c0a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    6c0c:	4b04      	ldr	r3, [pc, #16]	; (6c20 <prvSetupTimerInterrupt+0x18>)
    6c0e:	4a05      	ldr	r2, [pc, #20]	; (6c24 <prvSetupTimerInterrupt+0x1c>)
    6c10:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    6c12:	4b05      	ldr	r3, [pc, #20]	; (6c28 <prvSetupTimerInterrupt+0x20>)
    6c14:	2207      	movs	r2, #7
    6c16:	601a      	str	r2, [r3, #0]
}
    6c18:	46c0      	nop			; (mov r8, r8)
    6c1a:	46bd      	mov	sp, r7
    6c1c:	bd80      	pop	{r7, pc}
    6c1e:	46c0      	nop			; (mov r8, r8)
    6c20:	e000e014 	.word	0xe000e014
    6c24:	0000bb7f 	.word	0x0000bb7f
    6c28:	e000e010 	.word	0xe000e010

00006c2c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    6c2c:	b580      	push	{r7, lr}
    6c2e:	b084      	sub	sp, #16
    6c30:	af00      	add	r7, sp, #0
    6c32:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    6c34:	2300      	movs	r3, #0
    6c36:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	2207      	movs	r2, #7
    6c3c:	4013      	ands	r3, r2
    6c3e:	d004      	beq.n	6c4a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	2207      	movs	r2, #7
    6c44:	4393      	bics	r3, r2
    6c46:	3308      	adds	r3, #8
    6c48:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    6c4a:	4b17      	ldr	r3, [pc, #92]	; (6ca8 <pvPortMalloc+0x7c>)
    6c4c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    6c4e:	4b17      	ldr	r3, [pc, #92]	; (6cac <pvPortMalloc+0x80>)
    6c50:	681b      	ldr	r3, [r3, #0]
    6c52:	2b00      	cmp	r3, #0
    6c54:	d105      	bne.n	6c62 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    6c56:	4b16      	ldr	r3, [pc, #88]	; (6cb0 <pvPortMalloc+0x84>)
    6c58:	2207      	movs	r2, #7
    6c5a:	4393      	bics	r3, r2
    6c5c:	001a      	movs	r2, r3
    6c5e:	4b13      	ldr	r3, [pc, #76]	; (6cac <pvPortMalloc+0x80>)
    6c60:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    6c62:	4b14      	ldr	r3, [pc, #80]	; (6cb4 <pvPortMalloc+0x88>)
    6c64:	681a      	ldr	r2, [r3, #0]
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	18d3      	adds	r3, r2, r3
    6c6a:	4a13      	ldr	r2, [pc, #76]	; (6cb8 <pvPortMalloc+0x8c>)
    6c6c:	4293      	cmp	r3, r2
    6c6e:	d813      	bhi.n	6c98 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    6c70:	4b10      	ldr	r3, [pc, #64]	; (6cb4 <pvPortMalloc+0x88>)
    6c72:	681a      	ldr	r2, [r3, #0]
    6c74:	687b      	ldr	r3, [r7, #4]
    6c76:	18d2      	adds	r2, r2, r3
    6c78:	4b0e      	ldr	r3, [pc, #56]	; (6cb4 <pvPortMalloc+0x88>)
    6c7a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    6c7c:	429a      	cmp	r2, r3
    6c7e:	d90b      	bls.n	6c98 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    6c80:	4b0a      	ldr	r3, [pc, #40]	; (6cac <pvPortMalloc+0x80>)
    6c82:	681a      	ldr	r2, [r3, #0]
    6c84:	4b0b      	ldr	r3, [pc, #44]	; (6cb4 <pvPortMalloc+0x88>)
    6c86:	681b      	ldr	r3, [r3, #0]
    6c88:	18d3      	adds	r3, r2, r3
    6c8a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    6c8c:	4b09      	ldr	r3, [pc, #36]	; (6cb4 <pvPortMalloc+0x88>)
    6c8e:	681a      	ldr	r2, [r3, #0]
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	18d2      	adds	r2, r2, r3
    6c94:	4b07      	ldr	r3, [pc, #28]	; (6cb4 <pvPortMalloc+0x88>)
    6c96:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    6c98:	4b08      	ldr	r3, [pc, #32]	; (6cbc <pvPortMalloc+0x90>)
    6c9a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    6c9c:	68fb      	ldr	r3, [r7, #12]
}
    6c9e:	0018      	movs	r0, r3
    6ca0:	46bd      	mov	sp, r7
    6ca2:	b004      	add	sp, #16
    6ca4:	bd80      	pop	{r7, pc}
    6ca6:	46c0      	nop			; (mov r8, r8)
    6ca8:	00007ac9 	.word	0x00007ac9
    6cac:	20003ba4 	.word	0x20003ba4
    6cb0:	20000110 	.word	0x20000110
    6cb4:	20003ba0 	.word	0x20003ba0
    6cb8:	00003a8f 	.word	0x00003a8f
    6cbc:	00007ae1 	.word	0x00007ae1

00006cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    6cc0:	b580      	push	{r7, lr}
    6cc2:	b082      	sub	sp, #8
    6cc4:	af00      	add	r7, sp, #0
    6cc6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    6cc8:	687b      	ldr	r3, [r7, #4]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d001      	beq.n	6cd2 <vPortFree+0x12>
    6cce:	b672      	cpsid	i
    6cd0:	e7fe      	b.n	6cd0 <vPortFree+0x10>
}
    6cd2:	46c0      	nop			; (mov r8, r8)
    6cd4:	46bd      	mov	sp, r7
    6cd6:	b002      	add	sp, #8
    6cd8:	bd80      	pop	{r7, pc}
    6cda:	46c0      	nop			; (mov r8, r8)

00006cdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    6cdc:	b580      	push	{r7, lr}
    6cde:	b084      	sub	sp, #16
    6ce0:	af00      	add	r7, sp, #0
    6ce2:	6078      	str	r0, [r7, #4]
    6ce4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6ce6:	687b      	ldr	r3, [r7, #4]
    6ce8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    6cea:	68fb      	ldr	r3, [r7, #12]
    6cec:	2b00      	cmp	r3, #0
    6cee:	d101      	bne.n	6cf4 <xQueueGenericReset+0x18>
    6cf0:	b672      	cpsid	i
    6cf2:	e7fe      	b.n	6cf2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    6cf4:	4b23      	ldr	r3, [pc, #140]	; (6d84 <xQueueGenericReset+0xa8>)
    6cf6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    6cf8:	68fb      	ldr	r3, [r7, #12]
    6cfa:	681a      	ldr	r2, [r3, #0]
    6cfc:	68fb      	ldr	r3, [r7, #12]
    6cfe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    6d00:	68fb      	ldr	r3, [r7, #12]
    6d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6d04:	434b      	muls	r3, r1
    6d06:	18d2      	adds	r2, r2, r3
    6d08:	68fb      	ldr	r3, [r7, #12]
    6d0a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    6d0c:	68fb      	ldr	r3, [r7, #12]
    6d0e:	2200      	movs	r2, #0
    6d10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    6d12:	68fb      	ldr	r3, [r7, #12]
    6d14:	681a      	ldr	r2, [r3, #0]
    6d16:	68fb      	ldr	r3, [r7, #12]
    6d18:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    6d1a:	68fb      	ldr	r3, [r7, #12]
    6d1c:	681a      	ldr	r2, [r3, #0]
    6d1e:	68fb      	ldr	r3, [r7, #12]
    6d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6d22:	1e59      	subs	r1, r3, #1
    6d24:	68fb      	ldr	r3, [r7, #12]
    6d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6d28:	434b      	muls	r3, r1
    6d2a:	18d2      	adds	r2, r2, r3
    6d2c:	68fb      	ldr	r3, [r7, #12]
    6d2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    6d30:	68fb      	ldr	r3, [r7, #12]
    6d32:	2244      	movs	r2, #68	; 0x44
    6d34:	21ff      	movs	r1, #255	; 0xff
    6d36:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    6d38:	68fb      	ldr	r3, [r7, #12]
    6d3a:	2245      	movs	r2, #69	; 0x45
    6d3c:	21ff      	movs	r1, #255	; 0xff
    6d3e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    6d40:	683b      	ldr	r3, [r7, #0]
    6d42:	2b00      	cmp	r3, #0
    6d44:	d10d      	bne.n	6d62 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6d46:	68fb      	ldr	r3, [r7, #12]
    6d48:	691b      	ldr	r3, [r3, #16]
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d013      	beq.n	6d76 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6d4e:	68fb      	ldr	r3, [r7, #12]
    6d50:	3310      	adds	r3, #16
    6d52:	0018      	movs	r0, r3
    6d54:	4b0c      	ldr	r3, [pc, #48]	; (6d88 <xQueueGenericReset+0xac>)
    6d56:	4798      	blx	r3
    6d58:	1e03      	subs	r3, r0, #0
    6d5a:	d00c      	beq.n	6d76 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    6d5c:	4b0b      	ldr	r3, [pc, #44]	; (6d8c <xQueueGenericReset+0xb0>)
    6d5e:	4798      	blx	r3
    6d60:	e009      	b.n	6d76 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    6d62:	68fb      	ldr	r3, [r7, #12]
    6d64:	3310      	adds	r3, #16
    6d66:	0018      	movs	r0, r3
    6d68:	4b09      	ldr	r3, [pc, #36]	; (6d90 <xQueueGenericReset+0xb4>)
    6d6a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    6d6c:	68fb      	ldr	r3, [r7, #12]
    6d6e:	3324      	adds	r3, #36	; 0x24
    6d70:	0018      	movs	r0, r3
    6d72:	4b07      	ldr	r3, [pc, #28]	; (6d90 <xQueueGenericReset+0xb4>)
    6d74:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    6d76:	4b07      	ldr	r3, [pc, #28]	; (6d94 <xQueueGenericReset+0xb8>)
    6d78:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    6d7a:	2301      	movs	r3, #1
}
    6d7c:	0018      	movs	r0, r3
    6d7e:	46bd      	mov	sp, r7
    6d80:	b004      	add	sp, #16
    6d82:	bd80      	pop	{r7, pc}
    6d84:	00006b19 	.word	0x00006b19
    6d88:	00007f05 	.word	0x00007f05
    6d8c:	00006af9 	.word	0x00006af9
    6d90:	0000689d 	.word	0x0000689d
    6d94:	00006b3d 	.word	0x00006b3d

00006d98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    6d98:	b590      	push	{r4, r7, lr}
    6d9a:	b08b      	sub	sp, #44	; 0x2c
    6d9c:	af02      	add	r7, sp, #8
    6d9e:	60f8      	str	r0, [r7, #12]
    6da0:	60b9      	str	r1, [r7, #8]
    6da2:	1dfb      	adds	r3, r7, #7
    6da4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    6da6:	68fb      	ldr	r3, [r7, #12]
    6da8:	2b00      	cmp	r3, #0
    6daa:	d101      	bne.n	6db0 <xQueueGenericCreate+0x18>
    6dac:	b672      	cpsid	i
    6dae:	e7fe      	b.n	6dae <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    6db0:	68bb      	ldr	r3, [r7, #8]
    6db2:	2b00      	cmp	r3, #0
    6db4:	d102      	bne.n	6dbc <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    6db6:	2300      	movs	r3, #0
    6db8:	61fb      	str	r3, [r7, #28]
    6dba:	e003      	b.n	6dc4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6dbc:	68fb      	ldr	r3, [r7, #12]
    6dbe:	68ba      	ldr	r2, [r7, #8]
    6dc0:	4353      	muls	r3, r2
    6dc2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    6dc4:	69fb      	ldr	r3, [r7, #28]
    6dc6:	334c      	adds	r3, #76	; 0x4c
    6dc8:	0018      	movs	r0, r3
    6dca:	4b0c      	ldr	r3, [pc, #48]	; (6dfc <xQueueGenericCreate+0x64>)
    6dcc:	4798      	blx	r3
    6dce:	0003      	movs	r3, r0
    6dd0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    6dd2:	69bb      	ldr	r3, [r7, #24]
    6dd4:	2b00      	cmp	r3, #0
    6dd6:	d00c      	beq.n	6df2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    6dd8:	69bb      	ldr	r3, [r7, #24]
    6dda:	334c      	adds	r3, #76	; 0x4c
    6ddc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    6dde:	1dfb      	adds	r3, r7, #7
    6de0:	781c      	ldrb	r4, [r3, #0]
    6de2:	697a      	ldr	r2, [r7, #20]
    6de4:	68b9      	ldr	r1, [r7, #8]
    6de6:	68f8      	ldr	r0, [r7, #12]
    6de8:	69bb      	ldr	r3, [r7, #24]
    6dea:	9300      	str	r3, [sp, #0]
    6dec:	0023      	movs	r3, r4
    6dee:	4c04      	ldr	r4, [pc, #16]	; (6e00 <xQueueGenericCreate+0x68>)
    6df0:	47a0      	blx	r4
		}

		return pxNewQueue;
    6df2:	69bb      	ldr	r3, [r7, #24]
	}
    6df4:	0018      	movs	r0, r3
    6df6:	46bd      	mov	sp, r7
    6df8:	b009      	add	sp, #36	; 0x24
    6dfa:	bd90      	pop	{r4, r7, pc}
    6dfc:	00006c2d 	.word	0x00006c2d
    6e00:	00006e05 	.word	0x00006e05

00006e04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    6e04:	b580      	push	{r7, lr}
    6e06:	b084      	sub	sp, #16
    6e08:	af00      	add	r7, sp, #0
    6e0a:	60f8      	str	r0, [r7, #12]
    6e0c:	60b9      	str	r1, [r7, #8]
    6e0e:	607a      	str	r2, [r7, #4]
    6e10:	001a      	movs	r2, r3
    6e12:	1cfb      	adds	r3, r7, #3
    6e14:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    6e16:	68bb      	ldr	r3, [r7, #8]
    6e18:	2b00      	cmp	r3, #0
    6e1a:	d103      	bne.n	6e24 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    6e1c:	69bb      	ldr	r3, [r7, #24]
    6e1e:	69ba      	ldr	r2, [r7, #24]
    6e20:	601a      	str	r2, [r3, #0]
    6e22:	e002      	b.n	6e2a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    6e24:	69bb      	ldr	r3, [r7, #24]
    6e26:	687a      	ldr	r2, [r7, #4]
    6e28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    6e2a:	69bb      	ldr	r3, [r7, #24]
    6e2c:	68fa      	ldr	r2, [r7, #12]
    6e2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    6e30:	69bb      	ldr	r3, [r7, #24]
    6e32:	68ba      	ldr	r2, [r7, #8]
    6e34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    6e36:	69bb      	ldr	r3, [r7, #24]
    6e38:	2101      	movs	r1, #1
    6e3a:	0018      	movs	r0, r3
    6e3c:	4b04      	ldr	r3, [pc, #16]	; (6e50 <prvInitialiseNewQueue+0x4c>)
    6e3e:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    6e40:	69bb      	ldr	r3, [r7, #24]
    6e42:	2200      	movs	r2, #0
    6e44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    6e46:	46c0      	nop			; (mov r8, r8)
    6e48:	46bd      	mov	sp, r7
    6e4a:	b004      	add	sp, #16
    6e4c:	bd80      	pop	{r7, pc}
    6e4e:	46c0      	nop			; (mov r8, r8)
    6e50:	00006cdd 	.word	0x00006cdd

00006e54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    6e54:	b580      	push	{r7, lr}
    6e56:	b08a      	sub	sp, #40	; 0x28
    6e58:	af00      	add	r7, sp, #0
    6e5a:	60f8      	str	r0, [r7, #12]
    6e5c:	60b9      	str	r1, [r7, #8]
    6e5e:	607a      	str	r2, [r7, #4]
    6e60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    6e62:	2300      	movs	r3, #0
    6e64:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    6e66:	68fb      	ldr	r3, [r7, #12]
    6e68:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    6e6a:	6a3b      	ldr	r3, [r7, #32]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d101      	bne.n	6e74 <xQueueGenericSend+0x20>
    6e70:	b672      	cpsid	i
    6e72:	e7fe      	b.n	6e72 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    6e74:	68bb      	ldr	r3, [r7, #8]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d103      	bne.n	6e82 <xQueueGenericSend+0x2e>
    6e7a:	6a3b      	ldr	r3, [r7, #32]
    6e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6e7e:	2b00      	cmp	r3, #0
    6e80:	d101      	bne.n	6e86 <xQueueGenericSend+0x32>
    6e82:	2301      	movs	r3, #1
    6e84:	e000      	b.n	6e88 <xQueueGenericSend+0x34>
    6e86:	2300      	movs	r3, #0
    6e88:	2b00      	cmp	r3, #0
    6e8a:	d101      	bne.n	6e90 <xQueueGenericSend+0x3c>
    6e8c:	b672      	cpsid	i
    6e8e:	e7fe      	b.n	6e8e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    6e90:	683b      	ldr	r3, [r7, #0]
    6e92:	2b02      	cmp	r3, #2
    6e94:	d103      	bne.n	6e9e <xQueueGenericSend+0x4a>
    6e96:	6a3b      	ldr	r3, [r7, #32]
    6e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6e9a:	2b01      	cmp	r3, #1
    6e9c:	d101      	bne.n	6ea2 <xQueueGenericSend+0x4e>
    6e9e:	2301      	movs	r3, #1
    6ea0:	e000      	b.n	6ea4 <xQueueGenericSend+0x50>
    6ea2:	2300      	movs	r3, #0
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d101      	bne.n	6eac <xQueueGenericSend+0x58>
    6ea8:	b672      	cpsid	i
    6eaa:	e7fe      	b.n	6eaa <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    6eac:	4b53      	ldr	r3, [pc, #332]	; (6ffc <xQueueGenericSend+0x1a8>)
    6eae:	4798      	blx	r3
    6eb0:	1e03      	subs	r3, r0, #0
    6eb2:	d102      	bne.n	6eba <xQueueGenericSend+0x66>
    6eb4:	687b      	ldr	r3, [r7, #4]
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d101      	bne.n	6ebe <xQueueGenericSend+0x6a>
    6eba:	2301      	movs	r3, #1
    6ebc:	e000      	b.n	6ec0 <xQueueGenericSend+0x6c>
    6ebe:	2300      	movs	r3, #0
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d101      	bne.n	6ec8 <xQueueGenericSend+0x74>
    6ec4:	b672      	cpsid	i
    6ec6:	e7fe      	b.n	6ec6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    6ec8:	4b4d      	ldr	r3, [pc, #308]	; (7000 <xQueueGenericSend+0x1ac>)
    6eca:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    6ecc:	6a3b      	ldr	r3, [r7, #32]
    6ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6ed0:	6a3b      	ldr	r3, [r7, #32]
    6ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6ed4:	429a      	cmp	r2, r3
    6ed6:	d302      	bcc.n	6ede <xQueueGenericSend+0x8a>
    6ed8:	683b      	ldr	r3, [r7, #0]
    6eda:	2b02      	cmp	r3, #2
    6edc:	d12d      	bne.n	6f3a <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6ede:	683a      	ldr	r2, [r7, #0]
    6ee0:	68b9      	ldr	r1, [r7, #8]
    6ee2:	6a3b      	ldr	r3, [r7, #32]
    6ee4:	0018      	movs	r0, r3
    6ee6:	4b47      	ldr	r3, [pc, #284]	; (7004 <xQueueGenericSend+0x1b0>)
    6ee8:	4798      	blx	r3
    6eea:	0003      	movs	r3, r0
    6eec:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    6eee:	6a3b      	ldr	r3, [r7, #32]
    6ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6ef2:	2b00      	cmp	r3, #0
    6ef4:	d00a      	beq.n	6f0c <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    6ef6:	683a      	ldr	r2, [r7, #0]
    6ef8:	6a3b      	ldr	r3, [r7, #32]
    6efa:	0011      	movs	r1, r2
    6efc:	0018      	movs	r0, r3
    6efe:	4b42      	ldr	r3, [pc, #264]	; (7008 <xQueueGenericSend+0x1b4>)
    6f00:	4798      	blx	r3
    6f02:	1e03      	subs	r3, r0, #0
    6f04:	d015      	beq.n	6f32 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    6f06:	4b41      	ldr	r3, [pc, #260]	; (700c <xQueueGenericSend+0x1b8>)
    6f08:	4798      	blx	r3
    6f0a:	e012      	b.n	6f32 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6f0c:	6a3b      	ldr	r3, [r7, #32]
    6f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f10:	2b00      	cmp	r3, #0
    6f12:	d009      	beq.n	6f28 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6f14:	6a3b      	ldr	r3, [r7, #32]
    6f16:	3324      	adds	r3, #36	; 0x24
    6f18:	0018      	movs	r0, r3
    6f1a:	4b3d      	ldr	r3, [pc, #244]	; (7010 <xQueueGenericSend+0x1bc>)
    6f1c:	4798      	blx	r3
    6f1e:	1e03      	subs	r3, r0, #0
    6f20:	d007      	beq.n	6f32 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    6f22:	4b3a      	ldr	r3, [pc, #232]	; (700c <xQueueGenericSend+0x1b8>)
    6f24:	4798      	blx	r3
    6f26:	e004      	b.n	6f32 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    6f28:	69fb      	ldr	r3, [r7, #28]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	d001      	beq.n	6f32 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    6f2e:	4b37      	ldr	r3, [pc, #220]	; (700c <xQueueGenericSend+0x1b8>)
    6f30:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    6f32:	4b38      	ldr	r3, [pc, #224]	; (7014 <xQueueGenericSend+0x1c0>)
    6f34:	4798      	blx	r3
				return pdPASS;
    6f36:	2301      	movs	r3, #1
    6f38:	e05c      	b.n	6ff4 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    6f3a:	687b      	ldr	r3, [r7, #4]
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d103      	bne.n	6f48 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6f40:	4b34      	ldr	r3, [pc, #208]	; (7014 <xQueueGenericSend+0x1c0>)
    6f42:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    6f44:	2300      	movs	r3, #0
    6f46:	e055      	b.n	6ff4 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    6f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d106      	bne.n	6f5c <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6f4e:	2314      	movs	r3, #20
    6f50:	18fb      	adds	r3, r7, r3
    6f52:	0018      	movs	r0, r3
    6f54:	4b30      	ldr	r3, [pc, #192]	; (7018 <xQueueGenericSend+0x1c4>)
    6f56:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    6f58:	2301      	movs	r3, #1
    6f5a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    6f5c:	4b2d      	ldr	r3, [pc, #180]	; (7014 <xQueueGenericSend+0x1c0>)
    6f5e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6f60:	4b2e      	ldr	r3, [pc, #184]	; (701c <xQueueGenericSend+0x1c8>)
    6f62:	4798      	blx	r3
		prvLockQueue( pxQueue );
    6f64:	4b26      	ldr	r3, [pc, #152]	; (7000 <xQueueGenericSend+0x1ac>)
    6f66:	4798      	blx	r3
    6f68:	6a3b      	ldr	r3, [r7, #32]
    6f6a:	2244      	movs	r2, #68	; 0x44
    6f6c:	5c9b      	ldrb	r3, [r3, r2]
    6f6e:	b25b      	sxtb	r3, r3
    6f70:	3301      	adds	r3, #1
    6f72:	d103      	bne.n	6f7c <xQueueGenericSend+0x128>
    6f74:	6a3b      	ldr	r3, [r7, #32]
    6f76:	2244      	movs	r2, #68	; 0x44
    6f78:	2100      	movs	r1, #0
    6f7a:	5499      	strb	r1, [r3, r2]
    6f7c:	6a3b      	ldr	r3, [r7, #32]
    6f7e:	2245      	movs	r2, #69	; 0x45
    6f80:	5c9b      	ldrb	r3, [r3, r2]
    6f82:	b25b      	sxtb	r3, r3
    6f84:	3301      	adds	r3, #1
    6f86:	d103      	bne.n	6f90 <xQueueGenericSend+0x13c>
    6f88:	6a3b      	ldr	r3, [r7, #32]
    6f8a:	2245      	movs	r2, #69	; 0x45
    6f8c:	2100      	movs	r1, #0
    6f8e:	5499      	strb	r1, [r3, r2]
    6f90:	4b20      	ldr	r3, [pc, #128]	; (7014 <xQueueGenericSend+0x1c0>)
    6f92:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6f94:	1d3a      	adds	r2, r7, #4
    6f96:	2314      	movs	r3, #20
    6f98:	18fb      	adds	r3, r7, r3
    6f9a:	0011      	movs	r1, r2
    6f9c:	0018      	movs	r0, r3
    6f9e:	4b20      	ldr	r3, [pc, #128]	; (7020 <xQueueGenericSend+0x1cc>)
    6fa0:	4798      	blx	r3
    6fa2:	1e03      	subs	r3, r0, #0
    6fa4:	d11f      	bne.n	6fe6 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    6fa6:	6a3b      	ldr	r3, [r7, #32]
    6fa8:	0018      	movs	r0, r3
    6faa:	4b1e      	ldr	r3, [pc, #120]	; (7024 <xQueueGenericSend+0x1d0>)
    6fac:	4798      	blx	r3
    6fae:	1e03      	subs	r3, r0, #0
    6fb0:	d012      	beq.n	6fd8 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6fb2:	6a3b      	ldr	r3, [r7, #32]
    6fb4:	3310      	adds	r3, #16
    6fb6:	687a      	ldr	r2, [r7, #4]
    6fb8:	0011      	movs	r1, r2
    6fba:	0018      	movs	r0, r3
    6fbc:	4b1a      	ldr	r3, [pc, #104]	; (7028 <xQueueGenericSend+0x1d4>)
    6fbe:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    6fc0:	6a3b      	ldr	r3, [r7, #32]
    6fc2:	0018      	movs	r0, r3
    6fc4:	4b19      	ldr	r3, [pc, #100]	; (702c <xQueueGenericSend+0x1d8>)
    6fc6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    6fc8:	4b19      	ldr	r3, [pc, #100]	; (7030 <xQueueGenericSend+0x1dc>)
    6fca:	4798      	blx	r3
    6fcc:	1e03      	subs	r3, r0, #0
    6fce:	d000      	beq.n	6fd2 <xQueueGenericSend+0x17e>
    6fd0:	e77a      	b.n	6ec8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    6fd2:	4b0e      	ldr	r3, [pc, #56]	; (700c <xQueueGenericSend+0x1b8>)
    6fd4:	4798      	blx	r3
    6fd6:	e777      	b.n	6ec8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    6fd8:	6a3b      	ldr	r3, [r7, #32]
    6fda:	0018      	movs	r0, r3
    6fdc:	4b13      	ldr	r3, [pc, #76]	; (702c <xQueueGenericSend+0x1d8>)
    6fde:	4798      	blx	r3
				( void ) xTaskResumeAll();
    6fe0:	4b13      	ldr	r3, [pc, #76]	; (7030 <xQueueGenericSend+0x1dc>)
    6fe2:	4798      	blx	r3
    6fe4:	e770      	b.n	6ec8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    6fe6:	6a3b      	ldr	r3, [r7, #32]
    6fe8:	0018      	movs	r0, r3
    6fea:	4b10      	ldr	r3, [pc, #64]	; (702c <xQueueGenericSend+0x1d8>)
    6fec:	4798      	blx	r3
			( void ) xTaskResumeAll();
    6fee:	4b10      	ldr	r3, [pc, #64]	; (7030 <xQueueGenericSend+0x1dc>)
    6ff0:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    6ff2:	2300      	movs	r3, #0
		}
	}
}
    6ff4:	0018      	movs	r0, r3
    6ff6:	46bd      	mov	sp, r7
    6ff8:	b00a      	add	sp, #40	; 0x28
    6ffa:	bd80      	pop	{r7, pc}
    6ffc:	0000826d 	.word	0x0000826d
    7000:	00006b19 	.word	0x00006b19
    7004:	00007359 	.word	0x00007359
    7008:	0000765d 	.word	0x0000765d
    700c:	00006af9 	.word	0x00006af9
    7010:	00007f05 	.word	0x00007f05
    7014:	00006b3d 	.word	0x00006b3d
    7018:	00007fc5 	.word	0x00007fc5
    701c:	00007ac9 	.word	0x00007ac9
    7020:	00007ff9 	.word	0x00007ff9
    7024:	000075ad 	.word	0x000075ad
    7028:	00007e6d 	.word	0x00007e6d
    702c:	00007489 	.word	0x00007489
    7030:	00007ae1 	.word	0x00007ae1

00007034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7034:	b580      	push	{r7, lr}
    7036:	b088      	sub	sp, #32
    7038:	af00      	add	r7, sp, #0
    703a:	60f8      	str	r0, [r7, #12]
    703c:	60b9      	str	r1, [r7, #8]
    703e:	607a      	str	r2, [r7, #4]
    7040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7042:	68fb      	ldr	r3, [r7, #12]
    7044:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7046:	69bb      	ldr	r3, [r7, #24]
    7048:	2b00      	cmp	r3, #0
    704a:	d101      	bne.n	7050 <xQueueGenericSendFromISR+0x1c>
    704c:	b672      	cpsid	i
    704e:	e7fe      	b.n	704e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7050:	68bb      	ldr	r3, [r7, #8]
    7052:	2b00      	cmp	r3, #0
    7054:	d103      	bne.n	705e <xQueueGenericSendFromISR+0x2a>
    7056:	69bb      	ldr	r3, [r7, #24]
    7058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    705a:	2b00      	cmp	r3, #0
    705c:	d101      	bne.n	7062 <xQueueGenericSendFromISR+0x2e>
    705e:	2301      	movs	r3, #1
    7060:	e000      	b.n	7064 <xQueueGenericSendFromISR+0x30>
    7062:	2300      	movs	r3, #0
    7064:	2b00      	cmp	r3, #0
    7066:	d101      	bne.n	706c <xQueueGenericSendFromISR+0x38>
    7068:	b672      	cpsid	i
    706a:	e7fe      	b.n	706a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    706c:	683b      	ldr	r3, [r7, #0]
    706e:	2b02      	cmp	r3, #2
    7070:	d103      	bne.n	707a <xQueueGenericSendFromISR+0x46>
    7072:	69bb      	ldr	r3, [r7, #24]
    7074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7076:	2b01      	cmp	r3, #1
    7078:	d101      	bne.n	707e <xQueueGenericSendFromISR+0x4a>
    707a:	2301      	movs	r3, #1
    707c:	e000      	b.n	7080 <xQueueGenericSendFromISR+0x4c>
    707e:	2300      	movs	r3, #0
    7080:	2b00      	cmp	r3, #0
    7082:	d101      	bne.n	7088 <xQueueGenericSendFromISR+0x54>
    7084:	b672      	cpsid	i
    7086:	e7fe      	b.n	7086 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    7088:	4b2d      	ldr	r3, [pc, #180]	; (7140 <xQueueGenericSendFromISR+0x10c>)
    708a:	4798      	blx	r3
    708c:	0003      	movs	r3, r0
    708e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    7090:	69bb      	ldr	r3, [r7, #24]
    7092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7094:	69bb      	ldr	r3, [r7, #24]
    7096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7098:	429a      	cmp	r2, r3
    709a:	d302      	bcc.n	70a2 <xQueueGenericSendFromISR+0x6e>
    709c:	683b      	ldr	r3, [r7, #0]
    709e:	2b02      	cmp	r3, #2
    70a0:	d142      	bne.n	7128 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    70a2:	2313      	movs	r3, #19
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	69ba      	ldr	r2, [r7, #24]
    70a8:	2145      	movs	r1, #69	; 0x45
    70aa:	5c52      	ldrb	r2, [r2, r1]
    70ac:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    70ae:	683a      	ldr	r2, [r7, #0]
    70b0:	68b9      	ldr	r1, [r7, #8]
    70b2:	69bb      	ldr	r3, [r7, #24]
    70b4:	0018      	movs	r0, r3
    70b6:	4b23      	ldr	r3, [pc, #140]	; (7144 <xQueueGenericSendFromISR+0x110>)
    70b8:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    70ba:	2313      	movs	r3, #19
    70bc:	18fb      	adds	r3, r7, r3
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	b25b      	sxtb	r3, r3
    70c2:	3301      	adds	r3, #1
    70c4:	d124      	bne.n	7110 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    70c6:	69bb      	ldr	r3, [r7, #24]
    70c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    70ca:	2b00      	cmp	r3, #0
    70cc:	d00e      	beq.n	70ec <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    70ce:	683a      	ldr	r2, [r7, #0]
    70d0:	69bb      	ldr	r3, [r7, #24]
    70d2:	0011      	movs	r1, r2
    70d4:	0018      	movs	r0, r3
    70d6:	4b1c      	ldr	r3, [pc, #112]	; (7148 <xQueueGenericSendFromISR+0x114>)
    70d8:	4798      	blx	r3
    70da:	1e03      	subs	r3, r0, #0
    70dc:	d021      	beq.n	7122 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	2b00      	cmp	r3, #0
    70e2:	d01e      	beq.n	7122 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	2201      	movs	r2, #1
    70e8:	601a      	str	r2, [r3, #0]
    70ea:	e01a      	b.n	7122 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    70ec:	69bb      	ldr	r3, [r7, #24]
    70ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    70f0:	2b00      	cmp	r3, #0
    70f2:	d016      	beq.n	7122 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    70f4:	69bb      	ldr	r3, [r7, #24]
    70f6:	3324      	adds	r3, #36	; 0x24
    70f8:	0018      	movs	r0, r3
    70fa:	4b14      	ldr	r3, [pc, #80]	; (714c <xQueueGenericSendFromISR+0x118>)
    70fc:	4798      	blx	r3
    70fe:	1e03      	subs	r3, r0, #0
    7100:	d00f      	beq.n	7122 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	2b00      	cmp	r3, #0
    7106:	d00c      	beq.n	7122 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    7108:	687b      	ldr	r3, [r7, #4]
    710a:	2201      	movs	r2, #1
    710c:	601a      	str	r2, [r3, #0]
    710e:	e008      	b.n	7122 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7110:	2313      	movs	r3, #19
    7112:	18fb      	adds	r3, r7, r3
    7114:	781b      	ldrb	r3, [r3, #0]
    7116:	3301      	adds	r3, #1
    7118:	b2db      	uxtb	r3, r3
    711a:	b259      	sxtb	r1, r3
    711c:	69bb      	ldr	r3, [r7, #24]
    711e:	2245      	movs	r2, #69	; 0x45
    7120:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    7122:	2301      	movs	r3, #1
    7124:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    7126:	e001      	b.n	712c <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    7128:	2300      	movs	r3, #0
    712a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    712c:	697b      	ldr	r3, [r7, #20]
    712e:	0018      	movs	r0, r3
    7130:	4b07      	ldr	r3, [pc, #28]	; (7150 <xQueueGenericSendFromISR+0x11c>)
    7132:	4798      	blx	r3

	return xReturn;
    7134:	69fb      	ldr	r3, [r7, #28]
}
    7136:	0018      	movs	r0, r3
    7138:	46bd      	mov	sp, r7
    713a:	b008      	add	sp, #32
    713c:	bd80      	pop	{r7, pc}
    713e:	46c0      	nop			; (mov r8, r8)
    7140:	00006b6d 	.word	0x00006b6d
    7144:	00007359 	.word	0x00007359
    7148:	0000765d 	.word	0x0000765d
    714c:	00007f05 	.word	0x00007f05
    7150:	00006b79 	.word	0x00006b79

00007154 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    7154:	b580      	push	{r7, lr}
    7156:	b08a      	sub	sp, #40	; 0x28
    7158:	af00      	add	r7, sp, #0
    715a:	60f8      	str	r0, [r7, #12]
    715c:	60b9      	str	r1, [r7, #8]
    715e:	607a      	str	r2, [r7, #4]
    7160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    7162:	2300      	movs	r3, #0
    7164:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7166:	68fb      	ldr	r3, [r7, #12]
    7168:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    716a:	6a3b      	ldr	r3, [r7, #32]
    716c:	2b00      	cmp	r3, #0
    716e:	d101      	bne.n	7174 <xQueueGenericReceive+0x20>
    7170:	b672      	cpsid	i
    7172:	e7fe      	b.n	7172 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7174:	68bb      	ldr	r3, [r7, #8]
    7176:	2b00      	cmp	r3, #0
    7178:	d103      	bne.n	7182 <xQueueGenericReceive+0x2e>
    717a:	6a3b      	ldr	r3, [r7, #32]
    717c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    717e:	2b00      	cmp	r3, #0
    7180:	d101      	bne.n	7186 <xQueueGenericReceive+0x32>
    7182:	2301      	movs	r3, #1
    7184:	e000      	b.n	7188 <xQueueGenericReceive+0x34>
    7186:	2300      	movs	r3, #0
    7188:	2b00      	cmp	r3, #0
    718a:	d101      	bne.n	7190 <xQueueGenericReceive+0x3c>
    718c:	b672      	cpsid	i
    718e:	e7fe      	b.n	718e <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    7190:	4b62      	ldr	r3, [pc, #392]	; (731c <xQueueGenericReceive+0x1c8>)
    7192:	4798      	blx	r3
    7194:	1e03      	subs	r3, r0, #0
    7196:	d102      	bne.n	719e <xQueueGenericReceive+0x4a>
    7198:	687b      	ldr	r3, [r7, #4]
    719a:	2b00      	cmp	r3, #0
    719c:	d101      	bne.n	71a2 <xQueueGenericReceive+0x4e>
    719e:	2301      	movs	r3, #1
    71a0:	e000      	b.n	71a4 <xQueueGenericReceive+0x50>
    71a2:	2300      	movs	r3, #0
    71a4:	2b00      	cmp	r3, #0
    71a6:	d101      	bne.n	71ac <xQueueGenericReceive+0x58>
    71a8:	b672      	cpsid	i
    71aa:	e7fe      	b.n	71aa <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    71ac:	4b5c      	ldr	r3, [pc, #368]	; (7320 <xQueueGenericReceive+0x1cc>)
    71ae:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    71b0:	6a3b      	ldr	r3, [r7, #32]
    71b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    71b4:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    71b6:	69fb      	ldr	r3, [r7, #28]
    71b8:	2b00      	cmp	r3, #0
    71ba:	d03a      	beq.n	7232 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    71bc:	6a3b      	ldr	r3, [r7, #32]
    71be:	68db      	ldr	r3, [r3, #12]
    71c0:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    71c2:	68ba      	ldr	r2, [r7, #8]
    71c4:	6a3b      	ldr	r3, [r7, #32]
    71c6:	0011      	movs	r1, r2
    71c8:	0018      	movs	r0, r3
    71ca:	4b56      	ldr	r3, [pc, #344]	; (7324 <xQueueGenericReceive+0x1d0>)
    71cc:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    71ce:	683b      	ldr	r3, [r7, #0]
    71d0:	2b00      	cmp	r3, #0
    71d2:	d11a      	bne.n	720a <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    71d4:	69fb      	ldr	r3, [r7, #28]
    71d6:	1e5a      	subs	r2, r3, #1
    71d8:	6a3b      	ldr	r3, [r7, #32]
    71da:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    71dc:	6a3b      	ldr	r3, [r7, #32]
    71de:	681b      	ldr	r3, [r3, #0]
    71e0:	2b00      	cmp	r3, #0
    71e2:	d104      	bne.n	71ee <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    71e4:	4b50      	ldr	r3, [pc, #320]	; (7328 <xQueueGenericReceive+0x1d4>)
    71e6:	4798      	blx	r3
    71e8:	0002      	movs	r2, r0
    71ea:	6a3b      	ldr	r3, [r7, #32]
    71ec:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    71ee:	6a3b      	ldr	r3, [r7, #32]
    71f0:	691b      	ldr	r3, [r3, #16]
    71f2:	2b00      	cmp	r3, #0
    71f4:	d019      	beq.n	722a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    71f6:	6a3b      	ldr	r3, [r7, #32]
    71f8:	3310      	adds	r3, #16
    71fa:	0018      	movs	r0, r3
    71fc:	4b4b      	ldr	r3, [pc, #300]	; (732c <xQueueGenericReceive+0x1d8>)
    71fe:	4798      	blx	r3
    7200:	1e03      	subs	r3, r0, #0
    7202:	d012      	beq.n	722a <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    7204:	4b4a      	ldr	r3, [pc, #296]	; (7330 <xQueueGenericReceive+0x1dc>)
    7206:	4798      	blx	r3
    7208:	e00f      	b.n	722a <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    720a:	6a3b      	ldr	r3, [r7, #32]
    720c:	69ba      	ldr	r2, [r7, #24]
    720e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7210:	6a3b      	ldr	r3, [r7, #32]
    7212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7214:	2b00      	cmp	r3, #0
    7216:	d008      	beq.n	722a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7218:	6a3b      	ldr	r3, [r7, #32]
    721a:	3324      	adds	r3, #36	; 0x24
    721c:	0018      	movs	r0, r3
    721e:	4b43      	ldr	r3, [pc, #268]	; (732c <xQueueGenericReceive+0x1d8>)
    7220:	4798      	blx	r3
    7222:	1e03      	subs	r3, r0, #0
    7224:	d001      	beq.n	722a <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    7226:	4b42      	ldr	r3, [pc, #264]	; (7330 <xQueueGenericReceive+0x1dc>)
    7228:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    722a:	4b42      	ldr	r3, [pc, #264]	; (7334 <xQueueGenericReceive+0x1e0>)
    722c:	4798      	blx	r3
				return pdPASS;
    722e:	2301      	movs	r3, #1
    7230:	e070      	b.n	7314 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7232:	687b      	ldr	r3, [r7, #4]
    7234:	2b00      	cmp	r3, #0
    7236:	d103      	bne.n	7240 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7238:	4b3e      	ldr	r3, [pc, #248]	; (7334 <xQueueGenericReceive+0x1e0>)
    723a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    723c:	2300      	movs	r3, #0
    723e:	e069      	b.n	7314 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    7240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7242:	2b00      	cmp	r3, #0
    7244:	d106      	bne.n	7254 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    7246:	2310      	movs	r3, #16
    7248:	18fb      	adds	r3, r7, r3
    724a:	0018      	movs	r0, r3
    724c:	4b3a      	ldr	r3, [pc, #232]	; (7338 <xQueueGenericReceive+0x1e4>)
    724e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    7250:	2301      	movs	r3, #1
    7252:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    7254:	4b37      	ldr	r3, [pc, #220]	; (7334 <xQueueGenericReceive+0x1e0>)
    7256:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    7258:	4b38      	ldr	r3, [pc, #224]	; (733c <xQueueGenericReceive+0x1e8>)
    725a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    725c:	4b30      	ldr	r3, [pc, #192]	; (7320 <xQueueGenericReceive+0x1cc>)
    725e:	4798      	blx	r3
    7260:	6a3b      	ldr	r3, [r7, #32]
    7262:	2244      	movs	r2, #68	; 0x44
    7264:	5c9b      	ldrb	r3, [r3, r2]
    7266:	b25b      	sxtb	r3, r3
    7268:	3301      	adds	r3, #1
    726a:	d103      	bne.n	7274 <xQueueGenericReceive+0x120>
    726c:	6a3b      	ldr	r3, [r7, #32]
    726e:	2244      	movs	r2, #68	; 0x44
    7270:	2100      	movs	r1, #0
    7272:	5499      	strb	r1, [r3, r2]
    7274:	6a3b      	ldr	r3, [r7, #32]
    7276:	2245      	movs	r2, #69	; 0x45
    7278:	5c9b      	ldrb	r3, [r3, r2]
    727a:	b25b      	sxtb	r3, r3
    727c:	3301      	adds	r3, #1
    727e:	d103      	bne.n	7288 <xQueueGenericReceive+0x134>
    7280:	6a3b      	ldr	r3, [r7, #32]
    7282:	2245      	movs	r2, #69	; 0x45
    7284:	2100      	movs	r1, #0
    7286:	5499      	strb	r1, [r3, r2]
    7288:	4b2a      	ldr	r3, [pc, #168]	; (7334 <xQueueGenericReceive+0x1e0>)
    728a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    728c:	1d3a      	adds	r2, r7, #4
    728e:	2310      	movs	r3, #16
    7290:	18fb      	adds	r3, r7, r3
    7292:	0011      	movs	r1, r2
    7294:	0018      	movs	r0, r3
    7296:	4b2a      	ldr	r3, [pc, #168]	; (7340 <xQueueGenericReceive+0x1ec>)
    7298:	4798      	blx	r3
    729a:	1e03      	subs	r3, r0, #0
    729c:	d12c      	bne.n	72f8 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    729e:	6a3b      	ldr	r3, [r7, #32]
    72a0:	0018      	movs	r0, r3
    72a2:	4b28      	ldr	r3, [pc, #160]	; (7344 <xQueueGenericReceive+0x1f0>)
    72a4:	4798      	blx	r3
    72a6:	1e03      	subs	r3, r0, #0
    72a8:	d01f      	beq.n	72ea <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    72aa:	6a3b      	ldr	r3, [r7, #32]
    72ac:	681b      	ldr	r3, [r3, #0]
    72ae:	2b00      	cmp	r3, #0
    72b0:	d108      	bne.n	72c4 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    72b2:	4b1b      	ldr	r3, [pc, #108]	; (7320 <xQueueGenericReceive+0x1cc>)
    72b4:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    72b6:	6a3b      	ldr	r3, [r7, #32]
    72b8:	685b      	ldr	r3, [r3, #4]
    72ba:	0018      	movs	r0, r3
    72bc:	4b22      	ldr	r3, [pc, #136]	; (7348 <xQueueGenericReceive+0x1f4>)
    72be:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    72c0:	4b1c      	ldr	r3, [pc, #112]	; (7334 <xQueueGenericReceive+0x1e0>)
    72c2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    72c4:	6a3b      	ldr	r3, [r7, #32]
    72c6:	3324      	adds	r3, #36	; 0x24
    72c8:	687a      	ldr	r2, [r7, #4]
    72ca:	0011      	movs	r1, r2
    72cc:	0018      	movs	r0, r3
    72ce:	4b1f      	ldr	r3, [pc, #124]	; (734c <xQueueGenericReceive+0x1f8>)
    72d0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    72d2:	6a3b      	ldr	r3, [r7, #32]
    72d4:	0018      	movs	r0, r3
    72d6:	4b1e      	ldr	r3, [pc, #120]	; (7350 <xQueueGenericReceive+0x1fc>)
    72d8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    72da:	4b1e      	ldr	r3, [pc, #120]	; (7354 <xQueueGenericReceive+0x200>)
    72dc:	4798      	blx	r3
    72de:	1e03      	subs	r3, r0, #0
    72e0:	d000      	beq.n	72e4 <xQueueGenericReceive+0x190>
    72e2:	e763      	b.n	71ac <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    72e4:	4b12      	ldr	r3, [pc, #72]	; (7330 <xQueueGenericReceive+0x1dc>)
    72e6:	4798      	blx	r3
    72e8:	e760      	b.n	71ac <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    72ea:	6a3b      	ldr	r3, [r7, #32]
    72ec:	0018      	movs	r0, r3
    72ee:	4b18      	ldr	r3, [pc, #96]	; (7350 <xQueueGenericReceive+0x1fc>)
    72f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    72f2:	4b18      	ldr	r3, [pc, #96]	; (7354 <xQueueGenericReceive+0x200>)
    72f4:	4798      	blx	r3
    72f6:	e759      	b.n	71ac <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    72f8:	6a3b      	ldr	r3, [r7, #32]
    72fa:	0018      	movs	r0, r3
    72fc:	4b14      	ldr	r3, [pc, #80]	; (7350 <xQueueGenericReceive+0x1fc>)
    72fe:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7300:	4b14      	ldr	r3, [pc, #80]	; (7354 <xQueueGenericReceive+0x200>)
    7302:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7304:	6a3b      	ldr	r3, [r7, #32]
    7306:	0018      	movs	r0, r3
    7308:	4b0e      	ldr	r3, [pc, #56]	; (7344 <xQueueGenericReceive+0x1f0>)
    730a:	4798      	blx	r3
    730c:	1e03      	subs	r3, r0, #0
    730e:	d100      	bne.n	7312 <xQueueGenericReceive+0x1be>
    7310:	e74c      	b.n	71ac <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    7312:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7314:	0018      	movs	r0, r3
    7316:	46bd      	mov	sp, r7
    7318:	b00a      	add	sp, #40	; 0x28
    731a:	bd80      	pop	{r7, pc}
    731c:	0000826d 	.word	0x0000826d
    7320:	00006b19 	.word	0x00006b19
    7324:	00007439 	.word	0x00007439
    7328:	00008429 	.word	0x00008429
    732c:	00007f05 	.word	0x00007f05
    7330:	00006af9 	.word	0x00006af9
    7334:	00006b3d 	.word	0x00006b3d
    7338:	00007fc5 	.word	0x00007fc5
    733c:	00007ac9 	.word	0x00007ac9
    7340:	00007ff9 	.word	0x00007ff9
    7344:	00007579 	.word	0x00007579
    7348:	000082a5 	.word	0x000082a5
    734c:	00007e6d 	.word	0x00007e6d
    7350:	00007489 	.word	0x00007489
    7354:	00007ae1 	.word	0x00007ae1

00007358 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    7358:	b580      	push	{r7, lr}
    735a:	b086      	sub	sp, #24
    735c:	af00      	add	r7, sp, #0
    735e:	60f8      	str	r0, [r7, #12]
    7360:	60b9      	str	r1, [r7, #8]
    7362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    7364:	2300      	movs	r3, #0
    7366:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7368:	68fb      	ldr	r3, [r7, #12]
    736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    736c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    736e:	68fb      	ldr	r3, [r7, #12]
    7370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7372:	2b00      	cmp	r3, #0
    7374:	d10e      	bne.n	7394 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    7376:	68fb      	ldr	r3, [r7, #12]
    7378:	681b      	ldr	r3, [r3, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	d14e      	bne.n	741c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    737e:	68fb      	ldr	r3, [r7, #12]
    7380:	685b      	ldr	r3, [r3, #4]
    7382:	0018      	movs	r0, r3
    7384:	4b2a      	ldr	r3, [pc, #168]	; (7430 <prvCopyDataToQueue+0xd8>)
    7386:	4798      	blx	r3
    7388:	0003      	movs	r3, r0
    738a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    738c:	68fb      	ldr	r3, [r7, #12]
    738e:	2200      	movs	r2, #0
    7390:	605a      	str	r2, [r3, #4]
    7392:	e043      	b.n	741c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	2b00      	cmp	r3, #0
    7398:	d119      	bne.n	73ce <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    739a:	68fb      	ldr	r3, [r7, #12]
    739c:	6898      	ldr	r0, [r3, #8]
    739e:	68fb      	ldr	r3, [r7, #12]
    73a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	0019      	movs	r1, r3
    73a6:	4b23      	ldr	r3, [pc, #140]	; (7434 <prvCopyDataToQueue+0xdc>)
    73a8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    73aa:	68fb      	ldr	r3, [r7, #12]
    73ac:	689a      	ldr	r2, [r3, #8]
    73ae:	68fb      	ldr	r3, [r7, #12]
    73b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    73b2:	18d2      	adds	r2, r2, r3
    73b4:	68fb      	ldr	r3, [r7, #12]
    73b6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    73b8:	68fb      	ldr	r3, [r7, #12]
    73ba:	689a      	ldr	r2, [r3, #8]
    73bc:	68fb      	ldr	r3, [r7, #12]
    73be:	685b      	ldr	r3, [r3, #4]
    73c0:	429a      	cmp	r2, r3
    73c2:	d32b      	bcc.n	741c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    73c4:	68fb      	ldr	r3, [r7, #12]
    73c6:	681a      	ldr	r2, [r3, #0]
    73c8:	68fb      	ldr	r3, [r7, #12]
    73ca:	609a      	str	r2, [r3, #8]
    73cc:	e026      	b.n	741c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    73ce:	68fb      	ldr	r3, [r7, #12]
    73d0:	68d8      	ldr	r0, [r3, #12]
    73d2:	68fb      	ldr	r3, [r7, #12]
    73d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    73d6:	68bb      	ldr	r3, [r7, #8]
    73d8:	0019      	movs	r1, r3
    73da:	4b16      	ldr	r3, [pc, #88]	; (7434 <prvCopyDataToQueue+0xdc>)
    73dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    73de:	68fb      	ldr	r3, [r7, #12]
    73e0:	68da      	ldr	r2, [r3, #12]
    73e2:	68fb      	ldr	r3, [r7, #12]
    73e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    73e6:	425b      	negs	r3, r3
    73e8:	18d2      	adds	r2, r2, r3
    73ea:	68fb      	ldr	r3, [r7, #12]
    73ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    73ee:	68fb      	ldr	r3, [r7, #12]
    73f0:	68da      	ldr	r2, [r3, #12]
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	681b      	ldr	r3, [r3, #0]
    73f6:	429a      	cmp	r2, r3
    73f8:	d207      	bcs.n	740a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    73fa:	68fb      	ldr	r3, [r7, #12]
    73fc:	685a      	ldr	r2, [r3, #4]
    73fe:	68fb      	ldr	r3, [r7, #12]
    7400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7402:	425b      	negs	r3, r3
    7404:	18d2      	adds	r2, r2, r3
    7406:	68fb      	ldr	r3, [r7, #12]
    7408:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    740a:	687b      	ldr	r3, [r7, #4]
    740c:	2b02      	cmp	r3, #2
    740e:	d105      	bne.n	741c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7410:	693b      	ldr	r3, [r7, #16]
    7412:	2b00      	cmp	r3, #0
    7414:	d002      	beq.n	741c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7416:	693b      	ldr	r3, [r7, #16]
    7418:	3b01      	subs	r3, #1
    741a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    741c:	693b      	ldr	r3, [r7, #16]
    741e:	1c5a      	adds	r2, r3, #1
    7420:	68fb      	ldr	r3, [r7, #12]
    7422:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7424:	697b      	ldr	r3, [r7, #20]
}
    7426:	0018      	movs	r0, r3
    7428:	46bd      	mov	sp, r7
    742a:	b006      	add	sp, #24
    742c:	bd80      	pop	{r7, pc}
    742e:	46c0      	nop			; (mov r8, r8)
    7430:	00008369 	.word	0x00008369
    7434:	0000a249 	.word	0x0000a249

00007438 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    7438:	b580      	push	{r7, lr}
    743a:	b082      	sub	sp, #8
    743c:	af00      	add	r7, sp, #0
    743e:	6078      	str	r0, [r7, #4]
    7440:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7442:	687b      	ldr	r3, [r7, #4]
    7444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7446:	2b00      	cmp	r3, #0
    7448:	d018      	beq.n	747c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    744a:	687b      	ldr	r3, [r7, #4]
    744c:	68da      	ldr	r2, [r3, #12]
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7452:	18d2      	adds	r2, r2, r3
    7454:	687b      	ldr	r3, [r7, #4]
    7456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    7458:	687b      	ldr	r3, [r7, #4]
    745a:	68da      	ldr	r2, [r3, #12]
    745c:	687b      	ldr	r3, [r7, #4]
    745e:	685b      	ldr	r3, [r3, #4]
    7460:	429a      	cmp	r2, r3
    7462:	d303      	bcc.n	746c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	681a      	ldr	r2, [r3, #0]
    7468:	687b      	ldr	r3, [r7, #4]
    746a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	68d9      	ldr	r1, [r3, #12]
    7470:	687b      	ldr	r3, [r7, #4]
    7472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7474:	683b      	ldr	r3, [r7, #0]
    7476:	0018      	movs	r0, r3
    7478:	4b02      	ldr	r3, [pc, #8]	; (7484 <prvCopyDataFromQueue+0x4c>)
    747a:	4798      	blx	r3
	}
}
    747c:	46c0      	nop			; (mov r8, r8)
    747e:	46bd      	mov	sp, r7
    7480:	b002      	add	sp, #8
    7482:	bd80      	pop	{r7, pc}
    7484:	0000a249 	.word	0x0000a249

00007488 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    7488:	b580      	push	{r7, lr}
    748a:	b084      	sub	sp, #16
    748c:	af00      	add	r7, sp, #0
    748e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    7490:	4b34      	ldr	r3, [pc, #208]	; (7564 <prvUnlockQueue+0xdc>)
    7492:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    7494:	230f      	movs	r3, #15
    7496:	18fb      	adds	r3, r7, r3
    7498:	687a      	ldr	r2, [r7, #4]
    749a:	2145      	movs	r1, #69	; 0x45
    749c:	5c52      	ldrb	r2, [r2, r1]
    749e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    74a0:	e022      	b.n	74e8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    74a2:	687b      	ldr	r3, [r7, #4]
    74a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    74a6:	2b00      	cmp	r3, #0
    74a8:	d009      	beq.n	74be <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    74aa:	687b      	ldr	r3, [r7, #4]
    74ac:	2100      	movs	r1, #0
    74ae:	0018      	movs	r0, r3
    74b0:	4b2d      	ldr	r3, [pc, #180]	; (7568 <prvUnlockQueue+0xe0>)
    74b2:	4798      	blx	r3
    74b4:	1e03      	subs	r3, r0, #0
    74b6:	d00f      	beq.n	74d8 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    74b8:	4b2c      	ldr	r3, [pc, #176]	; (756c <prvUnlockQueue+0xe4>)
    74ba:	4798      	blx	r3
    74bc:	e00c      	b.n	74d8 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    74be:	687b      	ldr	r3, [r7, #4]
    74c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    74c2:	2b00      	cmp	r3, #0
    74c4:	d017      	beq.n	74f6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    74c6:	687b      	ldr	r3, [r7, #4]
    74c8:	3324      	adds	r3, #36	; 0x24
    74ca:	0018      	movs	r0, r3
    74cc:	4b28      	ldr	r3, [pc, #160]	; (7570 <prvUnlockQueue+0xe8>)
    74ce:	4798      	blx	r3
    74d0:	1e03      	subs	r3, r0, #0
    74d2:	d001      	beq.n	74d8 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    74d4:	4b25      	ldr	r3, [pc, #148]	; (756c <prvUnlockQueue+0xe4>)
    74d6:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    74d8:	230f      	movs	r3, #15
    74da:	18fb      	adds	r3, r7, r3
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	3b01      	subs	r3, #1
    74e0:	b2da      	uxtb	r2, r3
    74e2:	230f      	movs	r3, #15
    74e4:	18fb      	adds	r3, r7, r3
    74e6:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    74e8:	230f      	movs	r3, #15
    74ea:	18fb      	adds	r3, r7, r3
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	b25b      	sxtb	r3, r3
    74f0:	2b00      	cmp	r3, #0
    74f2:	dcd6      	bgt.n	74a2 <prvUnlockQueue+0x1a>
    74f4:	e000      	b.n	74f8 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    74f6:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    74f8:	687b      	ldr	r3, [r7, #4]
    74fa:	2245      	movs	r2, #69	; 0x45
    74fc:	21ff      	movs	r1, #255	; 0xff
    74fe:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7500:	4b1c      	ldr	r3, [pc, #112]	; (7574 <prvUnlockQueue+0xec>)
    7502:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    7504:	4b17      	ldr	r3, [pc, #92]	; (7564 <prvUnlockQueue+0xdc>)
    7506:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    7508:	230e      	movs	r3, #14
    750a:	18fb      	adds	r3, r7, r3
    750c:	687a      	ldr	r2, [r7, #4]
    750e:	2144      	movs	r1, #68	; 0x44
    7510:	5c52      	ldrb	r2, [r2, r1]
    7512:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7514:	e014      	b.n	7540 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7516:	687b      	ldr	r3, [r7, #4]
    7518:	691b      	ldr	r3, [r3, #16]
    751a:	2b00      	cmp	r3, #0
    751c:	d017      	beq.n	754e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	3310      	adds	r3, #16
    7522:	0018      	movs	r0, r3
    7524:	4b12      	ldr	r3, [pc, #72]	; (7570 <prvUnlockQueue+0xe8>)
    7526:	4798      	blx	r3
    7528:	1e03      	subs	r3, r0, #0
    752a:	d001      	beq.n	7530 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    752c:	4b0f      	ldr	r3, [pc, #60]	; (756c <prvUnlockQueue+0xe4>)
    752e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    7530:	230e      	movs	r3, #14
    7532:	18fb      	adds	r3, r7, r3
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	3b01      	subs	r3, #1
    7538:	b2da      	uxtb	r2, r3
    753a:	230e      	movs	r3, #14
    753c:	18fb      	adds	r3, r7, r3
    753e:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7540:	230e      	movs	r3, #14
    7542:	18fb      	adds	r3, r7, r3
    7544:	781b      	ldrb	r3, [r3, #0]
    7546:	b25b      	sxtb	r3, r3
    7548:	2b00      	cmp	r3, #0
    754a:	dce4      	bgt.n	7516 <prvUnlockQueue+0x8e>
    754c:	e000      	b.n	7550 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    754e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	2244      	movs	r2, #68	; 0x44
    7554:	21ff      	movs	r1, #255	; 0xff
    7556:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7558:	4b06      	ldr	r3, [pc, #24]	; (7574 <prvUnlockQueue+0xec>)
    755a:	4798      	blx	r3
}
    755c:	46c0      	nop			; (mov r8, r8)
    755e:	46bd      	mov	sp, r7
    7560:	b004      	add	sp, #16
    7562:	bd80      	pop	{r7, pc}
    7564:	00006b19 	.word	0x00006b19
    7568:	0000765d 	.word	0x0000765d
    756c:	000080a1 	.word	0x000080a1
    7570:	00007f05 	.word	0x00007f05
    7574:	00006b3d 	.word	0x00006b3d

00007578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    7578:	b580      	push	{r7, lr}
    757a:	b084      	sub	sp, #16
    757c:	af00      	add	r7, sp, #0
    757e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7580:	4b08      	ldr	r3, [pc, #32]	; (75a4 <prvIsQueueEmpty+0x2c>)
    7582:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    7584:	687b      	ldr	r3, [r7, #4]
    7586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7588:	2b00      	cmp	r3, #0
    758a:	d102      	bne.n	7592 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    758c:	2301      	movs	r3, #1
    758e:	60fb      	str	r3, [r7, #12]
    7590:	e001      	b.n	7596 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    7592:	2300      	movs	r3, #0
    7594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7596:	4b04      	ldr	r3, [pc, #16]	; (75a8 <prvIsQueueEmpty+0x30>)
    7598:	4798      	blx	r3

	return xReturn;
    759a:	68fb      	ldr	r3, [r7, #12]
}
    759c:	0018      	movs	r0, r3
    759e:	46bd      	mov	sp, r7
    75a0:	b004      	add	sp, #16
    75a2:	bd80      	pop	{r7, pc}
    75a4:	00006b19 	.word	0x00006b19
    75a8:	00006b3d 	.word	0x00006b3d

000075ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    75ac:	b580      	push	{r7, lr}
    75ae:	b084      	sub	sp, #16
    75b0:	af00      	add	r7, sp, #0
    75b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    75b4:	4b09      	ldr	r3, [pc, #36]	; (75dc <prvIsQueueFull+0x30>)
    75b6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    75b8:	687b      	ldr	r3, [r7, #4]
    75ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    75bc:	687b      	ldr	r3, [r7, #4]
    75be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    75c0:	429a      	cmp	r2, r3
    75c2:	d102      	bne.n	75ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    75c4:	2301      	movs	r3, #1
    75c6:	60fb      	str	r3, [r7, #12]
    75c8:	e001      	b.n	75ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    75ca:	2300      	movs	r3, #0
    75cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    75ce:	4b04      	ldr	r3, [pc, #16]	; (75e0 <prvIsQueueFull+0x34>)
    75d0:	4798      	blx	r3

	return xReturn;
    75d2:	68fb      	ldr	r3, [r7, #12]
}
    75d4:	0018      	movs	r0, r3
    75d6:	46bd      	mov	sp, r7
    75d8:	b004      	add	sp, #16
    75da:	bd80      	pop	{r7, pc}
    75dc:	00006b19 	.word	0x00006b19
    75e0:	00006b3d 	.word	0x00006b3d

000075e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    75e4:	b580      	push	{r7, lr}
    75e6:	b086      	sub	sp, #24
    75e8:	af00      	add	r7, sp, #0
    75ea:	60f8      	str	r0, [r7, #12]
    75ec:	60b9      	str	r1, [r7, #8]
    75ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    75f0:	68fb      	ldr	r3, [r7, #12]
    75f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    75f4:	4b15      	ldr	r3, [pc, #84]	; (764c <vQueueWaitForMessageRestricted+0x68>)
    75f6:	4798      	blx	r3
    75f8:	697b      	ldr	r3, [r7, #20]
    75fa:	2244      	movs	r2, #68	; 0x44
    75fc:	5c9b      	ldrb	r3, [r3, r2]
    75fe:	b25b      	sxtb	r3, r3
    7600:	3301      	adds	r3, #1
    7602:	d103      	bne.n	760c <vQueueWaitForMessageRestricted+0x28>
    7604:	697b      	ldr	r3, [r7, #20]
    7606:	2244      	movs	r2, #68	; 0x44
    7608:	2100      	movs	r1, #0
    760a:	5499      	strb	r1, [r3, r2]
    760c:	697b      	ldr	r3, [r7, #20]
    760e:	2245      	movs	r2, #69	; 0x45
    7610:	5c9b      	ldrb	r3, [r3, r2]
    7612:	b25b      	sxtb	r3, r3
    7614:	3301      	adds	r3, #1
    7616:	d103      	bne.n	7620 <vQueueWaitForMessageRestricted+0x3c>
    7618:	697b      	ldr	r3, [r7, #20]
    761a:	2245      	movs	r2, #69	; 0x45
    761c:	2100      	movs	r1, #0
    761e:	5499      	strb	r1, [r3, r2]
    7620:	4b0b      	ldr	r3, [pc, #44]	; (7650 <vQueueWaitForMessageRestricted+0x6c>)
    7622:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    7624:	697b      	ldr	r3, [r7, #20]
    7626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7628:	2b00      	cmp	r3, #0
    762a:	d106      	bne.n	763a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    762c:	697b      	ldr	r3, [r7, #20]
    762e:	3324      	adds	r3, #36	; 0x24
    7630:	687a      	ldr	r2, [r7, #4]
    7632:	68b9      	ldr	r1, [r7, #8]
    7634:	0018      	movs	r0, r3
    7636:	4b07      	ldr	r3, [pc, #28]	; (7654 <vQueueWaitForMessageRestricted+0x70>)
    7638:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    763a:	697b      	ldr	r3, [r7, #20]
    763c:	0018      	movs	r0, r3
    763e:	4b06      	ldr	r3, [pc, #24]	; (7658 <vQueueWaitForMessageRestricted+0x74>)
    7640:	4798      	blx	r3
	}
    7642:	46c0      	nop			; (mov r8, r8)
    7644:	46bd      	mov	sp, r7
    7646:	b006      	add	sp, #24
    7648:	bd80      	pop	{r7, pc}
    764a:	46c0      	nop			; (mov r8, r8)
    764c:	00006b19 	.word	0x00006b19
    7650:	00006b3d 	.word	0x00006b3d
    7654:	00007eb1 	.word	0x00007eb1
    7658:	00007489 	.word	0x00007489

0000765c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    765c:	b580      	push	{r7, lr}
    765e:	b086      	sub	sp, #24
    7660:	af00      	add	r7, sp, #0
    7662:	6078      	str	r0, [r7, #4]
    7664:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    7666:	687b      	ldr	r3, [r7, #4]
    7668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    766a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    766c:	2300      	movs	r3, #0
    766e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    7670:	693b      	ldr	r3, [r7, #16]
    7672:	2b00      	cmp	r3, #0
    7674:	d101      	bne.n	767a <prvNotifyQueueSetContainer+0x1e>
    7676:	b672      	cpsid	i
    7678:	e7fe      	b.n	7678 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    767a:	693b      	ldr	r3, [r7, #16]
    767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    767e:	693b      	ldr	r3, [r7, #16]
    7680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7682:	429a      	cmp	r2, r3
    7684:	d301      	bcc.n	768a <prvNotifyQueueSetContainer+0x2e>
    7686:	b672      	cpsid	i
    7688:	e7fe      	b.n	7688 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    768a:	693b      	ldr	r3, [r7, #16]
    768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    768e:	693b      	ldr	r3, [r7, #16]
    7690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7692:	429a      	cmp	r2, r3
    7694:	d22a      	bcs.n	76ec <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    7696:	230f      	movs	r3, #15
    7698:	18fb      	adds	r3, r7, r3
    769a:	693a      	ldr	r2, [r7, #16]
    769c:	2145      	movs	r1, #69	; 0x45
    769e:	5c52      	ldrb	r2, [r2, r1]
    76a0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    76a2:	683a      	ldr	r2, [r7, #0]
    76a4:	1d39      	adds	r1, r7, #4
    76a6:	693b      	ldr	r3, [r7, #16]
    76a8:	0018      	movs	r0, r3
    76aa:	4b13      	ldr	r3, [pc, #76]	; (76f8 <prvNotifyQueueSetContainer+0x9c>)
    76ac:	4798      	blx	r3
    76ae:	0003      	movs	r3, r0
    76b0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    76b2:	230f      	movs	r3, #15
    76b4:	18fb      	adds	r3, r7, r3
    76b6:	781b      	ldrb	r3, [r3, #0]
    76b8:	b25b      	sxtb	r3, r3
    76ba:	3301      	adds	r3, #1
    76bc:	d10d      	bne.n	76da <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    76be:	693b      	ldr	r3, [r7, #16]
    76c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    76c2:	2b00      	cmp	r3, #0
    76c4:	d012      	beq.n	76ec <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    76c6:	693b      	ldr	r3, [r7, #16]
    76c8:	3324      	adds	r3, #36	; 0x24
    76ca:	0018      	movs	r0, r3
    76cc:	4b0b      	ldr	r3, [pc, #44]	; (76fc <prvNotifyQueueSetContainer+0xa0>)
    76ce:	4798      	blx	r3
    76d0:	1e03      	subs	r3, r0, #0
    76d2:	d00b      	beq.n	76ec <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    76d4:	2301      	movs	r3, #1
    76d6:	617b      	str	r3, [r7, #20]
    76d8:	e008      	b.n	76ec <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    76da:	230f      	movs	r3, #15
    76dc:	18fb      	adds	r3, r7, r3
    76de:	781b      	ldrb	r3, [r3, #0]
    76e0:	3301      	adds	r3, #1
    76e2:	b2db      	uxtb	r3, r3
    76e4:	b259      	sxtb	r1, r3
    76e6:	693b      	ldr	r3, [r7, #16]
    76e8:	2245      	movs	r2, #69	; 0x45
    76ea:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    76ec:	697b      	ldr	r3, [r7, #20]
	}
    76ee:	0018      	movs	r0, r3
    76f0:	46bd      	mov	sp, r7
    76f2:	b006      	add	sp, #24
    76f4:	bd80      	pop	{r7, pc}
    76f6:	46c0      	nop			; (mov r8, r8)
    76f8:	00007359 	.word	0x00007359
    76fc:	00007f05 	.word	0x00007f05

00007700 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    7700:	b590      	push	{r4, r7, lr}
    7702:	b08d      	sub	sp, #52	; 0x34
    7704:	af04      	add	r7, sp, #16
    7706:	60f8      	str	r0, [r7, #12]
    7708:	60b9      	str	r1, [r7, #8]
    770a:	603b      	str	r3, [r7, #0]
    770c:	1dbb      	adds	r3, r7, #6
    770e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7710:	1dbb      	adds	r3, r7, #6
    7712:	881b      	ldrh	r3, [r3, #0]
    7714:	009b      	lsls	r3, r3, #2
    7716:	0018      	movs	r0, r3
    7718:	4b1d      	ldr	r3, [pc, #116]	; (7790 <xTaskCreate+0x90>)
    771a:	4798      	blx	r3
    771c:	0003      	movs	r3, r0
    771e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    7720:	697b      	ldr	r3, [r7, #20]
    7722:	2b00      	cmp	r3, #0
    7724:	d010      	beq.n	7748 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    7726:	2050      	movs	r0, #80	; 0x50
    7728:	4b19      	ldr	r3, [pc, #100]	; (7790 <xTaskCreate+0x90>)
    772a:	4798      	blx	r3
    772c:	0003      	movs	r3, r0
    772e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    7730:	69fb      	ldr	r3, [r7, #28]
    7732:	2b00      	cmp	r3, #0
    7734:	d003      	beq.n	773e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    7736:	69fb      	ldr	r3, [r7, #28]
    7738:	697a      	ldr	r2, [r7, #20]
    773a:	631a      	str	r2, [r3, #48]	; 0x30
    773c:	e006      	b.n	774c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    773e:	697b      	ldr	r3, [r7, #20]
    7740:	0018      	movs	r0, r3
    7742:	4b14      	ldr	r3, [pc, #80]	; (7794 <xTaskCreate+0x94>)
    7744:	4798      	blx	r3
    7746:	e001      	b.n	774c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    7748:	2300      	movs	r3, #0
    774a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    774c:	69fb      	ldr	r3, [r7, #28]
    774e:	2b00      	cmp	r3, #0
    7750:	d016      	beq.n	7780 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    7752:	1dbb      	adds	r3, r7, #6
    7754:	881a      	ldrh	r2, [r3, #0]
    7756:	683c      	ldr	r4, [r7, #0]
    7758:	68b9      	ldr	r1, [r7, #8]
    775a:	68f8      	ldr	r0, [r7, #12]
    775c:	2300      	movs	r3, #0
    775e:	9303      	str	r3, [sp, #12]
    7760:	69fb      	ldr	r3, [r7, #28]
    7762:	9302      	str	r3, [sp, #8]
    7764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7766:	9301      	str	r3, [sp, #4]
    7768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    776a:	9300      	str	r3, [sp, #0]
    776c:	0023      	movs	r3, r4
    776e:	4c0a      	ldr	r4, [pc, #40]	; (7798 <xTaskCreate+0x98>)
    7770:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    7772:	69fb      	ldr	r3, [r7, #28]
    7774:	0018      	movs	r0, r3
    7776:	4b09      	ldr	r3, [pc, #36]	; (779c <xTaskCreate+0x9c>)
    7778:	4798      	blx	r3
			xReturn = pdPASS;
    777a:	2301      	movs	r3, #1
    777c:	61bb      	str	r3, [r7, #24]
    777e:	e002      	b.n	7786 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7780:	2301      	movs	r3, #1
    7782:	425b      	negs	r3, r3
    7784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    7786:	69bb      	ldr	r3, [r7, #24]
	}
    7788:	0018      	movs	r0, r3
    778a:	46bd      	mov	sp, r7
    778c:	b009      	add	sp, #36	; 0x24
    778e:	bd90      	pop	{r4, r7, pc}
    7790:	00006c2d 	.word	0x00006c2d
    7794:	00006cc1 	.word	0x00006cc1
    7798:	000077a1 	.word	0x000077a1
    779c:	0000789d 	.word	0x0000789d

000077a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    77a0:	b580      	push	{r7, lr}
    77a2:	b086      	sub	sp, #24
    77a4:	af00      	add	r7, sp, #0
    77a6:	60f8      	str	r0, [r7, #12]
    77a8:	60b9      	str	r1, [r7, #8]
    77aa:	607a      	str	r2, [r7, #4]
    77ac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    77ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    77b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    77b2:	687b      	ldr	r3, [r7, #4]
    77b4:	4936      	ldr	r1, [pc, #216]	; (7890 <prvInitialiseNewTask+0xf0>)
    77b6:	468c      	mov	ip, r1
    77b8:	4463      	add	r3, ip
    77ba:	009b      	lsls	r3, r3, #2
    77bc:	18d3      	adds	r3, r2, r3
    77be:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    77c0:	693b      	ldr	r3, [r7, #16]
    77c2:	2207      	movs	r2, #7
    77c4:	4393      	bics	r3, r2
    77c6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    77c8:	693b      	ldr	r3, [r7, #16]
    77ca:	2207      	movs	r2, #7
    77cc:	4013      	ands	r3, r2
    77ce:	d001      	beq.n	77d4 <prvInitialiseNewTask+0x34>
    77d0:	b672      	cpsid	i
    77d2:	e7fe      	b.n	77d2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    77d4:	2300      	movs	r3, #0
    77d6:	617b      	str	r3, [r7, #20]
    77d8:	e013      	b.n	7802 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    77da:	68ba      	ldr	r2, [r7, #8]
    77dc:	697b      	ldr	r3, [r7, #20]
    77de:	18d3      	adds	r3, r2, r3
    77e0:	7818      	ldrb	r0, [r3, #0]
    77e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    77e4:	2134      	movs	r1, #52	; 0x34
    77e6:	697b      	ldr	r3, [r7, #20]
    77e8:	18d3      	adds	r3, r2, r3
    77ea:	185b      	adds	r3, r3, r1
    77ec:	1c02      	adds	r2, r0, #0
    77ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    77f0:	68ba      	ldr	r2, [r7, #8]
    77f2:	697b      	ldr	r3, [r7, #20]
    77f4:	18d3      	adds	r3, r2, r3
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	2b00      	cmp	r3, #0
    77fa:	d006      	beq.n	780a <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    77fc:	697b      	ldr	r3, [r7, #20]
    77fe:	3301      	adds	r3, #1
    7800:	617b      	str	r3, [r7, #20]
    7802:	697b      	ldr	r3, [r7, #20]
    7804:	2b0b      	cmp	r3, #11
    7806:	d9e8      	bls.n	77da <prvInitialiseNewTask+0x3a>
    7808:	e000      	b.n	780c <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    780a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    780e:	223f      	movs	r2, #63	; 0x3f
    7810:	2100      	movs	r1, #0
    7812:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    7814:	6a3b      	ldr	r3, [r7, #32]
    7816:	2b04      	cmp	r3, #4
    7818:	d901      	bls.n	781e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    781a:	2304      	movs	r3, #4
    781c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7820:	6a3a      	ldr	r2, [r7, #32]
    7822:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    7824:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7826:	6a3a      	ldr	r2, [r7, #32]
    7828:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    782c:	2200      	movs	r2, #0
    782e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7830:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7832:	3304      	adds	r3, #4
    7834:	0018      	movs	r0, r3
    7836:	4b17      	ldr	r3, [pc, #92]	; (7894 <prvInitialiseNewTask+0xf4>)
    7838:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    783c:	3318      	adds	r3, #24
    783e:	0018      	movs	r0, r3
    7840:	4b14      	ldr	r3, [pc, #80]	; (7894 <prvInitialiseNewTask+0xf4>)
    7842:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7844:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7846:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7848:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    784a:	6a3b      	ldr	r3, [r7, #32]
    784c:	2205      	movs	r2, #5
    784e:	1ad2      	subs	r2, r2, r3
    7850:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7852:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7854:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7856:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7858:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    785c:	2200      	movs	r2, #0
    785e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7860:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7862:	224c      	movs	r2, #76	; 0x4c
    7864:	2100      	movs	r1, #0
    7866:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7868:	683a      	ldr	r2, [r7, #0]
    786a:	68f9      	ldr	r1, [r7, #12]
    786c:	693b      	ldr	r3, [r7, #16]
    786e:	0018      	movs	r0, r3
    7870:	4b09      	ldr	r3, [pc, #36]	; (7898 <prvInitialiseNewTask+0xf8>)
    7872:	4798      	blx	r3
    7874:	0002      	movs	r2, r0
    7876:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7878:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    787c:	2b00      	cmp	r3, #0
    787e:	d002      	beq.n	7886 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7882:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	46bd      	mov	sp, r7
    788a:	b006      	add	sp, #24
    788c:	bd80      	pop	{r7, pc}
    788e:	46c0      	nop			; (mov r8, r8)
    7890:	3fffffff 	.word	0x3fffffff
    7894:	000068d9 	.word	0x000068d9
    7898:	000069f1 	.word	0x000069f1

0000789c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    789c:	b580      	push	{r7, lr}
    789e:	b082      	sub	sp, #8
    78a0:	af00      	add	r7, sp, #0
    78a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    78a4:	4b29      	ldr	r3, [pc, #164]	; (794c <prvAddNewTaskToReadyList+0xb0>)
    78a6:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    78a8:	4b29      	ldr	r3, [pc, #164]	; (7950 <prvAddNewTaskToReadyList+0xb4>)
    78aa:	681b      	ldr	r3, [r3, #0]
    78ac:	1c5a      	adds	r2, r3, #1
    78ae:	4b28      	ldr	r3, [pc, #160]	; (7950 <prvAddNewTaskToReadyList+0xb4>)
    78b0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    78b2:	4b28      	ldr	r3, [pc, #160]	; (7954 <prvAddNewTaskToReadyList+0xb8>)
    78b4:	681b      	ldr	r3, [r3, #0]
    78b6:	2b00      	cmp	r3, #0
    78b8:	d109      	bne.n	78ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    78ba:	4b26      	ldr	r3, [pc, #152]	; (7954 <prvAddNewTaskToReadyList+0xb8>)
    78bc:	687a      	ldr	r2, [r7, #4]
    78be:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    78c0:	4b23      	ldr	r3, [pc, #140]	; (7950 <prvAddNewTaskToReadyList+0xb4>)
    78c2:	681b      	ldr	r3, [r3, #0]
    78c4:	2b01      	cmp	r3, #1
    78c6:	d110      	bne.n	78ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    78c8:	4b23      	ldr	r3, [pc, #140]	; (7958 <prvAddNewTaskToReadyList+0xbc>)
    78ca:	4798      	blx	r3
    78cc:	e00d      	b.n	78ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    78ce:	4b23      	ldr	r3, [pc, #140]	; (795c <prvAddNewTaskToReadyList+0xc0>)
    78d0:	681b      	ldr	r3, [r3, #0]
    78d2:	2b00      	cmp	r3, #0
    78d4:	d109      	bne.n	78ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    78d6:	4b1f      	ldr	r3, [pc, #124]	; (7954 <prvAddNewTaskToReadyList+0xb8>)
    78d8:	681b      	ldr	r3, [r3, #0]
    78da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    78dc:	687b      	ldr	r3, [r7, #4]
    78de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    78e0:	429a      	cmp	r2, r3
    78e2:	d802      	bhi.n	78ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    78e4:	4b1b      	ldr	r3, [pc, #108]	; (7954 <prvAddNewTaskToReadyList+0xb8>)
    78e6:	687a      	ldr	r2, [r7, #4]
    78e8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    78ea:	4b1d      	ldr	r3, [pc, #116]	; (7960 <prvAddNewTaskToReadyList+0xc4>)
    78ec:	681b      	ldr	r3, [r3, #0]
    78ee:	1c5a      	adds	r2, r3, #1
    78f0:	4b1b      	ldr	r3, [pc, #108]	; (7960 <prvAddNewTaskToReadyList+0xc4>)
    78f2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    78f4:	687b      	ldr	r3, [r7, #4]
    78f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    78f8:	4b1a      	ldr	r3, [pc, #104]	; (7964 <prvAddNewTaskToReadyList+0xc8>)
    78fa:	681b      	ldr	r3, [r3, #0]
    78fc:	429a      	cmp	r2, r3
    78fe:	d903      	bls.n	7908 <prvAddNewTaskToReadyList+0x6c>
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7904:	4b17      	ldr	r3, [pc, #92]	; (7964 <prvAddNewTaskToReadyList+0xc8>)
    7906:	601a      	str	r2, [r3, #0]
    7908:	687b      	ldr	r3, [r7, #4]
    790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    790c:	0013      	movs	r3, r2
    790e:	009b      	lsls	r3, r3, #2
    7910:	189b      	adds	r3, r3, r2
    7912:	009b      	lsls	r3, r3, #2
    7914:	4a14      	ldr	r2, [pc, #80]	; (7968 <prvAddNewTaskToReadyList+0xcc>)
    7916:	189a      	adds	r2, r3, r2
    7918:	687b      	ldr	r3, [r7, #4]
    791a:	3304      	adds	r3, #4
    791c:	0019      	movs	r1, r3
    791e:	0010      	movs	r0, r2
    7920:	4b12      	ldr	r3, [pc, #72]	; (796c <prvAddNewTaskToReadyList+0xd0>)
    7922:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    7924:	4b12      	ldr	r3, [pc, #72]	; (7970 <prvAddNewTaskToReadyList+0xd4>)
    7926:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    7928:	4b0c      	ldr	r3, [pc, #48]	; (795c <prvAddNewTaskToReadyList+0xc0>)
    792a:	681b      	ldr	r3, [r3, #0]
    792c:	2b00      	cmp	r3, #0
    792e:	d008      	beq.n	7942 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7930:	4b08      	ldr	r3, [pc, #32]	; (7954 <prvAddNewTaskToReadyList+0xb8>)
    7932:	681b      	ldr	r3, [r3, #0]
    7934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7936:	687b      	ldr	r3, [r7, #4]
    7938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    793a:	429a      	cmp	r2, r3
    793c:	d201      	bcs.n	7942 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    793e:	4b0d      	ldr	r3, [pc, #52]	; (7974 <prvAddNewTaskToReadyList+0xd8>)
    7940:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7942:	46c0      	nop			; (mov r8, r8)
    7944:	46bd      	mov	sp, r7
    7946:	b002      	add	sp, #8
    7948:	bd80      	pop	{r7, pc}
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	00006b19 	.word	0x00006b19
    7950:	20003c80 	.word	0x20003c80
    7954:	20003ba8 	.word	0x20003ba8
    7958:	000080e5 	.word	0x000080e5
    795c:	20003c8c 	.word	0x20003c8c
    7960:	20003c9c 	.word	0x20003c9c
    7964:	20003c88 	.word	0x20003c88
    7968:	20003bac 	.word	0x20003bac
    796c:	000068f1 	.word	0x000068f1
    7970:	00006b3d 	.word	0x00006b3d
    7974:	00006af9 	.word	0x00006af9

00007978 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    7978:	b580      	push	{r7, lr}
    797a:	b086      	sub	sp, #24
    797c:	af00      	add	r7, sp, #0
    797e:	6078      	str	r0, [r7, #4]
    7980:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    7982:	2300      	movs	r3, #0
    7984:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    7986:	687b      	ldr	r3, [r7, #4]
    7988:	2b00      	cmp	r3, #0
    798a:	d101      	bne.n	7990 <vTaskDelayUntil+0x18>
    798c:	b672      	cpsid	i
    798e:	e7fe      	b.n	798e <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    7990:	683b      	ldr	r3, [r7, #0]
    7992:	2b00      	cmp	r3, #0
    7994:	d101      	bne.n	799a <vTaskDelayUntil+0x22>
    7996:	b672      	cpsid	i
    7998:	e7fe      	b.n	7998 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    799a:	4b23      	ldr	r3, [pc, #140]	; (7a28 <vTaskDelayUntil+0xb0>)
    799c:	681b      	ldr	r3, [r3, #0]
    799e:	2b00      	cmp	r3, #0
    79a0:	d001      	beq.n	79a6 <vTaskDelayUntil+0x2e>
    79a2:	b672      	cpsid	i
    79a4:	e7fe      	b.n	79a4 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    79a6:	4b21      	ldr	r3, [pc, #132]	; (7a2c <vTaskDelayUntil+0xb4>)
    79a8:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    79aa:	4b21      	ldr	r3, [pc, #132]	; (7a30 <vTaskDelayUntil+0xb8>)
    79ac:	681b      	ldr	r3, [r3, #0]
    79ae:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	681a      	ldr	r2, [r3, #0]
    79b4:	683b      	ldr	r3, [r7, #0]
    79b6:	18d3      	adds	r3, r2, r3
    79b8:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    79ba:	687b      	ldr	r3, [r7, #4]
    79bc:	681a      	ldr	r2, [r3, #0]
    79be:	693b      	ldr	r3, [r7, #16]
    79c0:	429a      	cmp	r2, r3
    79c2:	d90b      	bls.n	79dc <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    79c4:	687b      	ldr	r3, [r7, #4]
    79c6:	681a      	ldr	r2, [r3, #0]
    79c8:	68fb      	ldr	r3, [r7, #12]
    79ca:	429a      	cmp	r2, r3
    79cc:	d911      	bls.n	79f2 <vTaskDelayUntil+0x7a>
    79ce:	68fa      	ldr	r2, [r7, #12]
    79d0:	693b      	ldr	r3, [r7, #16]
    79d2:	429a      	cmp	r2, r3
    79d4:	d90d      	bls.n	79f2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    79d6:	2301      	movs	r3, #1
    79d8:	617b      	str	r3, [r7, #20]
    79da:	e00a      	b.n	79f2 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	681a      	ldr	r2, [r3, #0]
    79e0:	68fb      	ldr	r3, [r7, #12]
    79e2:	429a      	cmp	r2, r3
    79e4:	d803      	bhi.n	79ee <vTaskDelayUntil+0x76>
    79e6:	68fa      	ldr	r2, [r7, #12]
    79e8:	693b      	ldr	r3, [r7, #16]
    79ea:	429a      	cmp	r2, r3
    79ec:	d901      	bls.n	79f2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    79ee:	2301      	movs	r3, #1
    79f0:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	68fa      	ldr	r2, [r7, #12]
    79f6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    79f8:	697b      	ldr	r3, [r7, #20]
    79fa:	2b00      	cmp	r3, #0
    79fc:	d006      	beq.n	7a0c <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    79fe:	68fa      	ldr	r2, [r7, #12]
    7a00:	693b      	ldr	r3, [r7, #16]
    7a02:	1ad3      	subs	r3, r2, r3
    7a04:	2100      	movs	r1, #0
    7a06:	0018      	movs	r0, r3
    7a08:	4b0a      	ldr	r3, [pc, #40]	; (7a34 <vTaskDelayUntil+0xbc>)
    7a0a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    7a0c:	4b0a      	ldr	r3, [pc, #40]	; (7a38 <vTaskDelayUntil+0xc0>)
    7a0e:	4798      	blx	r3
    7a10:	0003      	movs	r3, r0
    7a12:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7a14:	68bb      	ldr	r3, [r7, #8]
    7a16:	2b00      	cmp	r3, #0
    7a18:	d101      	bne.n	7a1e <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    7a1a:	4b08      	ldr	r3, [pc, #32]	; (7a3c <vTaskDelayUntil+0xc4>)
    7a1c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    7a1e:	46c0      	nop			; (mov r8, r8)
    7a20:	46bd      	mov	sp, r7
    7a22:	b006      	add	sp, #24
    7a24:	bd80      	pop	{r7, pc}
    7a26:	46c0      	nop			; (mov r8, r8)
    7a28:	20003ca8 	.word	0x20003ca8
    7a2c:	00007ac9 	.word	0x00007ac9
    7a30:	20003c84 	.word	0x20003c84
    7a34:	0000844d 	.word	0x0000844d
    7a38:	00007ae1 	.word	0x00007ae1
    7a3c:	00006af9 	.word	0x00006af9

00007a40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    7a40:	b590      	push	{r4, r7, lr}
    7a42:	b085      	sub	sp, #20
    7a44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    7a46:	2380      	movs	r3, #128	; 0x80
    7a48:	005a      	lsls	r2, r3, #1
    7a4a:	4916      	ldr	r1, [pc, #88]	; (7aa4 <vTaskStartScheduler+0x64>)
    7a4c:	4816      	ldr	r0, [pc, #88]	; (7aa8 <vTaskStartScheduler+0x68>)
    7a4e:	4b17      	ldr	r3, [pc, #92]	; (7aac <vTaskStartScheduler+0x6c>)
    7a50:	9301      	str	r3, [sp, #4]
    7a52:	2300      	movs	r3, #0
    7a54:	9300      	str	r3, [sp, #0]
    7a56:	2300      	movs	r3, #0
    7a58:	4c15      	ldr	r4, [pc, #84]	; (7ab0 <vTaskStartScheduler+0x70>)
    7a5a:	47a0      	blx	r4
    7a5c:	0003      	movs	r3, r0
    7a5e:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	2b01      	cmp	r3, #1
    7a64:	d103      	bne.n	7a6e <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    7a66:	4b13      	ldr	r3, [pc, #76]	; (7ab4 <vTaskStartScheduler+0x74>)
    7a68:	4798      	blx	r3
    7a6a:	0003      	movs	r3, r0
    7a6c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	2b01      	cmp	r3, #1
    7a72:	d10d      	bne.n	7a90 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    7a74:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    7a76:	4b10      	ldr	r3, [pc, #64]	; (7ab8 <vTaskStartScheduler+0x78>)
    7a78:	2201      	movs	r2, #1
    7a7a:	4252      	negs	r2, r2
    7a7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7a7e:	4b0f      	ldr	r3, [pc, #60]	; (7abc <vTaskStartScheduler+0x7c>)
    7a80:	2201      	movs	r2, #1
    7a82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    7a84:	4b0e      	ldr	r3, [pc, #56]	; (7ac0 <vTaskStartScheduler+0x80>)
    7a86:	2200      	movs	r2, #0
    7a88:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7a8a:	4b0e      	ldr	r3, [pc, #56]	; (7ac4 <vTaskStartScheduler+0x84>)
    7a8c:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7a8e:	e004      	b.n	7a9a <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    7a90:	687b      	ldr	r3, [r7, #4]
    7a92:	3301      	adds	r3, #1
    7a94:	d101      	bne.n	7a9a <vTaskStartScheduler+0x5a>
    7a96:	b672      	cpsid	i
    7a98:	e7fe      	b.n	7a98 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7a9a:	46c0      	nop			; (mov r8, r8)
    7a9c:	46bd      	mov	sp, r7
    7a9e:	b003      	add	sp, #12
    7aa0:	bd90      	pop	{r4, r7, pc}
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	0000c55c 	.word	0x0000c55c
    7aa8:	000080b5 	.word	0x000080b5
    7aac:	20003ca4 	.word	0x20003ca4
    7ab0:	00007701 	.word	0x00007701
    7ab4:	00008501 	.word	0x00008501
    7ab8:	20003ca0 	.word	0x20003ca0
    7abc:	20003c8c 	.word	0x20003c8c
    7ac0:	20003c84 	.word	0x20003c84
    7ac4:	00006aa9 	.word	0x00006aa9

00007ac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    7acc:	4b03      	ldr	r3, [pc, #12]	; (7adc <vTaskSuspendAll+0x14>)
    7ace:	681b      	ldr	r3, [r3, #0]
    7ad0:	1c5a      	adds	r2, r3, #1
    7ad2:	4b02      	ldr	r3, [pc, #8]	; (7adc <vTaskSuspendAll+0x14>)
    7ad4:	601a      	str	r2, [r3, #0]
}
    7ad6:	46c0      	nop			; (mov r8, r8)
    7ad8:	46bd      	mov	sp, r7
    7ada:	bd80      	pop	{r7, pc}
    7adc:	20003ca8 	.word	0x20003ca8

00007ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    7ae0:	b580      	push	{r7, lr}
    7ae2:	b084      	sub	sp, #16
    7ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    7ae6:	2300      	movs	r3, #0
    7ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    7aea:	2300      	movs	r3, #0
    7aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    7aee:	4b3a      	ldr	r3, [pc, #232]	; (7bd8 <xTaskResumeAll+0xf8>)
    7af0:	681b      	ldr	r3, [r3, #0]
    7af2:	2b00      	cmp	r3, #0
    7af4:	d101      	bne.n	7afa <xTaskResumeAll+0x1a>
    7af6:	b672      	cpsid	i
    7af8:	e7fe      	b.n	7af8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    7afa:	4b38      	ldr	r3, [pc, #224]	; (7bdc <xTaskResumeAll+0xfc>)
    7afc:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    7afe:	4b36      	ldr	r3, [pc, #216]	; (7bd8 <xTaskResumeAll+0xf8>)
    7b00:	681b      	ldr	r3, [r3, #0]
    7b02:	1e5a      	subs	r2, r3, #1
    7b04:	4b34      	ldr	r3, [pc, #208]	; (7bd8 <xTaskResumeAll+0xf8>)
    7b06:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7b08:	4b33      	ldr	r3, [pc, #204]	; (7bd8 <xTaskResumeAll+0xf8>)
    7b0a:	681b      	ldr	r3, [r3, #0]
    7b0c:	2b00      	cmp	r3, #0
    7b0e:	d15b      	bne.n	7bc8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7b10:	4b33      	ldr	r3, [pc, #204]	; (7be0 <xTaskResumeAll+0x100>)
    7b12:	681b      	ldr	r3, [r3, #0]
    7b14:	2b00      	cmp	r3, #0
    7b16:	d057      	beq.n	7bc8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7b18:	e02f      	b.n	7b7a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7b1a:	4b32      	ldr	r3, [pc, #200]	; (7be4 <xTaskResumeAll+0x104>)
    7b1c:	68db      	ldr	r3, [r3, #12]
    7b1e:	68db      	ldr	r3, [r3, #12]
    7b20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7b22:	68fb      	ldr	r3, [r7, #12]
    7b24:	3318      	adds	r3, #24
    7b26:	0018      	movs	r0, r3
    7b28:	4b2f      	ldr	r3, [pc, #188]	; (7be8 <xTaskResumeAll+0x108>)
    7b2a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7b2c:	68fb      	ldr	r3, [r7, #12]
    7b2e:	3304      	adds	r3, #4
    7b30:	0018      	movs	r0, r3
    7b32:	4b2d      	ldr	r3, [pc, #180]	; (7be8 <xTaskResumeAll+0x108>)
    7b34:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    7b36:	68fb      	ldr	r3, [r7, #12]
    7b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b3a:	4b2c      	ldr	r3, [pc, #176]	; (7bec <xTaskResumeAll+0x10c>)
    7b3c:	681b      	ldr	r3, [r3, #0]
    7b3e:	429a      	cmp	r2, r3
    7b40:	d903      	bls.n	7b4a <xTaskResumeAll+0x6a>
    7b42:	68fb      	ldr	r3, [r7, #12]
    7b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b46:	4b29      	ldr	r3, [pc, #164]	; (7bec <xTaskResumeAll+0x10c>)
    7b48:	601a      	str	r2, [r3, #0]
    7b4a:	68fb      	ldr	r3, [r7, #12]
    7b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b4e:	0013      	movs	r3, r2
    7b50:	009b      	lsls	r3, r3, #2
    7b52:	189b      	adds	r3, r3, r2
    7b54:	009b      	lsls	r3, r3, #2
    7b56:	4a26      	ldr	r2, [pc, #152]	; (7bf0 <xTaskResumeAll+0x110>)
    7b58:	189a      	adds	r2, r3, r2
    7b5a:	68fb      	ldr	r3, [r7, #12]
    7b5c:	3304      	adds	r3, #4
    7b5e:	0019      	movs	r1, r3
    7b60:	0010      	movs	r0, r2
    7b62:	4b24      	ldr	r3, [pc, #144]	; (7bf4 <xTaskResumeAll+0x114>)
    7b64:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7b66:	68fb      	ldr	r3, [r7, #12]
    7b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b6a:	4b23      	ldr	r3, [pc, #140]	; (7bf8 <xTaskResumeAll+0x118>)
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7b70:	429a      	cmp	r2, r3
    7b72:	d302      	bcc.n	7b7a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    7b74:	4b21      	ldr	r3, [pc, #132]	; (7bfc <xTaskResumeAll+0x11c>)
    7b76:	2201      	movs	r2, #1
    7b78:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7b7a:	4b1a      	ldr	r3, [pc, #104]	; (7be4 <xTaskResumeAll+0x104>)
    7b7c:	681b      	ldr	r3, [r3, #0]
    7b7e:	2b00      	cmp	r3, #0
    7b80:	d1cb      	bne.n	7b1a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    7b82:	68fb      	ldr	r3, [r7, #12]
    7b84:	2b00      	cmp	r3, #0
    7b86:	d001      	beq.n	7b8c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    7b88:	4b1d      	ldr	r3, [pc, #116]	; (7c00 <xTaskResumeAll+0x120>)
    7b8a:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7b8c:	4b1d      	ldr	r3, [pc, #116]	; (7c04 <xTaskResumeAll+0x124>)
    7b8e:	681b      	ldr	r3, [r3, #0]
    7b90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    7b92:	687b      	ldr	r3, [r7, #4]
    7b94:	2b00      	cmp	r3, #0
    7b96:	d00f      	beq.n	7bb8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    7b98:	4b1b      	ldr	r3, [pc, #108]	; (7c08 <xTaskResumeAll+0x128>)
    7b9a:	4798      	blx	r3
    7b9c:	1e03      	subs	r3, r0, #0
    7b9e:	d002      	beq.n	7ba6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    7ba0:	4b16      	ldr	r3, [pc, #88]	; (7bfc <xTaskResumeAll+0x11c>)
    7ba2:	2201      	movs	r2, #1
    7ba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    7ba6:	687b      	ldr	r3, [r7, #4]
    7ba8:	3b01      	subs	r3, #1
    7baa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    7bac:	687b      	ldr	r3, [r7, #4]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d1f2      	bne.n	7b98 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    7bb2:	4b14      	ldr	r3, [pc, #80]	; (7c04 <xTaskResumeAll+0x124>)
    7bb4:	2200      	movs	r2, #0
    7bb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    7bb8:	4b10      	ldr	r3, [pc, #64]	; (7bfc <xTaskResumeAll+0x11c>)
    7bba:	681b      	ldr	r3, [r3, #0]
    7bbc:	2b00      	cmp	r3, #0
    7bbe:	d003      	beq.n	7bc8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    7bc0:	2301      	movs	r3, #1
    7bc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    7bc4:	4b11      	ldr	r3, [pc, #68]	; (7c0c <xTaskResumeAll+0x12c>)
    7bc6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    7bc8:	4b11      	ldr	r3, [pc, #68]	; (7c10 <xTaskResumeAll+0x130>)
    7bca:	4798      	blx	r3

	return xAlreadyYielded;
    7bcc:	68bb      	ldr	r3, [r7, #8]
}
    7bce:	0018      	movs	r0, r3
    7bd0:	46bd      	mov	sp, r7
    7bd2:	b004      	add	sp, #16
    7bd4:	bd80      	pop	{r7, pc}
    7bd6:	46c0      	nop			; (mov r8, r8)
    7bd8:	20003ca8 	.word	0x20003ca8
    7bdc:	00006b19 	.word	0x00006b19
    7be0:	20003c80 	.word	0x20003c80
    7be4:	20003c40 	.word	0x20003c40
    7be8:	000069a1 	.word	0x000069a1
    7bec:	20003c88 	.word	0x20003c88
    7bf0:	20003bac 	.word	0x20003bac
    7bf4:	000068f1 	.word	0x000068f1
    7bf8:	20003ba8 	.word	0x20003ba8
    7bfc:	20003c94 	.word	0x20003c94
    7c00:	00008225 	.word	0x00008225
    7c04:	20003c90 	.word	0x20003c90
    7c08:	00007c31 	.word	0x00007c31
    7c0c:	00006af9 	.word	0x00006af9
    7c10:	00006b3d 	.word	0x00006b3d

00007c14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    7c14:	b580      	push	{r7, lr}
    7c16:	b082      	sub	sp, #8
    7c18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    7c1a:	4b04      	ldr	r3, [pc, #16]	; (7c2c <xTaskGetTickCount+0x18>)
    7c1c:	681b      	ldr	r3, [r3, #0]
    7c1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    7c20:	687b      	ldr	r3, [r7, #4]
}
    7c22:	0018      	movs	r0, r3
    7c24:	46bd      	mov	sp, r7
    7c26:	b002      	add	sp, #8
    7c28:	bd80      	pop	{r7, pc}
    7c2a:	46c0      	nop			; (mov r8, r8)
    7c2c:	20003c84 	.word	0x20003c84

00007c30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    7c30:	b580      	push	{r7, lr}
    7c32:	b086      	sub	sp, #24
    7c34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    7c36:	2300      	movs	r3, #0
    7c38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7c3a:	4b4c      	ldr	r3, [pc, #304]	; (7d6c <xTaskIncrementTick+0x13c>)
    7c3c:	681b      	ldr	r3, [r3, #0]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d000      	beq.n	7c44 <xTaskIncrementTick+0x14>
    7c42:	e083      	b.n	7d4c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    7c44:	4b4a      	ldr	r3, [pc, #296]	; (7d70 <xTaskIncrementTick+0x140>)
    7c46:	681b      	ldr	r3, [r3, #0]
    7c48:	3301      	adds	r3, #1
    7c4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    7c4c:	4b48      	ldr	r3, [pc, #288]	; (7d70 <xTaskIncrementTick+0x140>)
    7c4e:	693a      	ldr	r2, [r7, #16]
    7c50:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    7c52:	693b      	ldr	r3, [r7, #16]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d117      	bne.n	7c88 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    7c58:	4b46      	ldr	r3, [pc, #280]	; (7d74 <xTaskIncrementTick+0x144>)
    7c5a:	681b      	ldr	r3, [r3, #0]
    7c5c:	681b      	ldr	r3, [r3, #0]
    7c5e:	2b00      	cmp	r3, #0
    7c60:	d001      	beq.n	7c66 <xTaskIncrementTick+0x36>
    7c62:	b672      	cpsid	i
    7c64:	e7fe      	b.n	7c64 <xTaskIncrementTick+0x34>
    7c66:	4b43      	ldr	r3, [pc, #268]	; (7d74 <xTaskIncrementTick+0x144>)
    7c68:	681b      	ldr	r3, [r3, #0]
    7c6a:	60fb      	str	r3, [r7, #12]
    7c6c:	4b42      	ldr	r3, [pc, #264]	; (7d78 <xTaskIncrementTick+0x148>)
    7c6e:	681a      	ldr	r2, [r3, #0]
    7c70:	4b40      	ldr	r3, [pc, #256]	; (7d74 <xTaskIncrementTick+0x144>)
    7c72:	601a      	str	r2, [r3, #0]
    7c74:	4b40      	ldr	r3, [pc, #256]	; (7d78 <xTaskIncrementTick+0x148>)
    7c76:	68fa      	ldr	r2, [r7, #12]
    7c78:	601a      	str	r2, [r3, #0]
    7c7a:	4b40      	ldr	r3, [pc, #256]	; (7d7c <xTaskIncrementTick+0x14c>)
    7c7c:	681b      	ldr	r3, [r3, #0]
    7c7e:	1c5a      	adds	r2, r3, #1
    7c80:	4b3e      	ldr	r3, [pc, #248]	; (7d7c <xTaskIncrementTick+0x14c>)
    7c82:	601a      	str	r2, [r3, #0]
    7c84:	4b3e      	ldr	r3, [pc, #248]	; (7d80 <xTaskIncrementTick+0x150>)
    7c86:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    7c88:	4b3e      	ldr	r3, [pc, #248]	; (7d84 <xTaskIncrementTick+0x154>)
    7c8a:	681b      	ldr	r3, [r3, #0]
    7c8c:	693a      	ldr	r2, [r7, #16]
    7c8e:	429a      	cmp	r2, r3
    7c90:	d34e      	bcc.n	7d30 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7c92:	4b38      	ldr	r3, [pc, #224]	; (7d74 <xTaskIncrementTick+0x144>)
    7c94:	681b      	ldr	r3, [r3, #0]
    7c96:	681b      	ldr	r3, [r3, #0]
    7c98:	2b00      	cmp	r3, #0
    7c9a:	d101      	bne.n	7ca0 <xTaskIncrementTick+0x70>
    7c9c:	2301      	movs	r3, #1
    7c9e:	e000      	b.n	7ca2 <xTaskIncrementTick+0x72>
    7ca0:	2300      	movs	r3, #0
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d004      	beq.n	7cb0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7ca6:	4b37      	ldr	r3, [pc, #220]	; (7d84 <xTaskIncrementTick+0x154>)
    7ca8:	2201      	movs	r2, #1
    7caa:	4252      	negs	r2, r2
    7cac:	601a      	str	r2, [r3, #0]
					break;
    7cae:	e03f      	b.n	7d30 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7cb0:	4b30      	ldr	r3, [pc, #192]	; (7d74 <xTaskIncrementTick+0x144>)
    7cb2:	681b      	ldr	r3, [r3, #0]
    7cb4:	68db      	ldr	r3, [r3, #12]
    7cb6:	68db      	ldr	r3, [r3, #12]
    7cb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    7cba:	68bb      	ldr	r3, [r7, #8]
    7cbc:	685b      	ldr	r3, [r3, #4]
    7cbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    7cc0:	693a      	ldr	r2, [r7, #16]
    7cc2:	687b      	ldr	r3, [r7, #4]
    7cc4:	429a      	cmp	r2, r3
    7cc6:	d203      	bcs.n	7cd0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    7cc8:	4b2e      	ldr	r3, [pc, #184]	; (7d84 <xTaskIncrementTick+0x154>)
    7cca:	687a      	ldr	r2, [r7, #4]
    7ccc:	601a      	str	r2, [r3, #0]
						break;
    7cce:	e02f      	b.n	7d30 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7cd0:	68bb      	ldr	r3, [r7, #8]
    7cd2:	3304      	adds	r3, #4
    7cd4:	0018      	movs	r0, r3
    7cd6:	4b2c      	ldr	r3, [pc, #176]	; (7d88 <xTaskIncrementTick+0x158>)
    7cd8:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7cda:	68bb      	ldr	r3, [r7, #8]
    7cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d004      	beq.n	7cec <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7ce2:	68bb      	ldr	r3, [r7, #8]
    7ce4:	3318      	adds	r3, #24
    7ce6:	0018      	movs	r0, r3
    7ce8:	4b27      	ldr	r3, [pc, #156]	; (7d88 <xTaskIncrementTick+0x158>)
    7cea:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    7cec:	68bb      	ldr	r3, [r7, #8]
    7cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7cf0:	4b26      	ldr	r3, [pc, #152]	; (7d8c <xTaskIncrementTick+0x15c>)
    7cf2:	681b      	ldr	r3, [r3, #0]
    7cf4:	429a      	cmp	r2, r3
    7cf6:	d903      	bls.n	7d00 <xTaskIncrementTick+0xd0>
    7cf8:	68bb      	ldr	r3, [r7, #8]
    7cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7cfc:	4b23      	ldr	r3, [pc, #140]	; (7d8c <xTaskIncrementTick+0x15c>)
    7cfe:	601a      	str	r2, [r3, #0]
    7d00:	68bb      	ldr	r3, [r7, #8]
    7d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d04:	0013      	movs	r3, r2
    7d06:	009b      	lsls	r3, r3, #2
    7d08:	189b      	adds	r3, r3, r2
    7d0a:	009b      	lsls	r3, r3, #2
    7d0c:	4a20      	ldr	r2, [pc, #128]	; (7d90 <xTaskIncrementTick+0x160>)
    7d0e:	189a      	adds	r2, r3, r2
    7d10:	68bb      	ldr	r3, [r7, #8]
    7d12:	3304      	adds	r3, #4
    7d14:	0019      	movs	r1, r3
    7d16:	0010      	movs	r0, r2
    7d18:	4b1e      	ldr	r3, [pc, #120]	; (7d94 <xTaskIncrementTick+0x164>)
    7d1a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7d1c:	68bb      	ldr	r3, [r7, #8]
    7d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d20:	4b1d      	ldr	r3, [pc, #116]	; (7d98 <xTaskIncrementTick+0x168>)
    7d22:	681b      	ldr	r3, [r3, #0]
    7d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d26:	429a      	cmp	r2, r3
    7d28:	d3b3      	bcc.n	7c92 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    7d2a:	2301      	movs	r3, #1
    7d2c:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    7d2e:	e7b0      	b.n	7c92 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    7d30:	4b19      	ldr	r3, [pc, #100]	; (7d98 <xTaskIncrementTick+0x168>)
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d36:	4916      	ldr	r1, [pc, #88]	; (7d90 <xTaskIncrementTick+0x160>)
    7d38:	0013      	movs	r3, r2
    7d3a:	009b      	lsls	r3, r3, #2
    7d3c:	189b      	adds	r3, r3, r2
    7d3e:	009b      	lsls	r3, r3, #2
    7d40:	585b      	ldr	r3, [r3, r1]
    7d42:	2b01      	cmp	r3, #1
    7d44:	d907      	bls.n	7d56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    7d46:	2301      	movs	r3, #1
    7d48:	617b      	str	r3, [r7, #20]
    7d4a:	e004      	b.n	7d56 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    7d4c:	4b13      	ldr	r3, [pc, #76]	; (7d9c <xTaskIncrementTick+0x16c>)
    7d4e:	681b      	ldr	r3, [r3, #0]
    7d50:	1c5a      	adds	r2, r3, #1
    7d52:	4b12      	ldr	r3, [pc, #72]	; (7d9c <xTaskIncrementTick+0x16c>)
    7d54:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    7d56:	4b12      	ldr	r3, [pc, #72]	; (7da0 <xTaskIncrementTick+0x170>)
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	2b00      	cmp	r3, #0
    7d5c:	d001      	beq.n	7d62 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    7d5e:	2301      	movs	r3, #1
    7d60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    7d62:	697b      	ldr	r3, [r7, #20]
}
    7d64:	0018      	movs	r0, r3
    7d66:	46bd      	mov	sp, r7
    7d68:	b006      	add	sp, #24
    7d6a:	bd80      	pop	{r7, pc}
    7d6c:	20003ca8 	.word	0x20003ca8
    7d70:	20003c84 	.word	0x20003c84
    7d74:	20003c38 	.word	0x20003c38
    7d78:	20003c3c 	.word	0x20003c3c
    7d7c:	20003c98 	.word	0x20003c98
    7d80:	00008225 	.word	0x00008225
    7d84:	20003ca0 	.word	0x20003ca0
    7d88:	000069a1 	.word	0x000069a1
    7d8c:	20003c88 	.word	0x20003c88
    7d90:	20003bac 	.word	0x20003bac
    7d94:	000068f1 	.word	0x000068f1
    7d98:	20003ba8 	.word	0x20003ba8
    7d9c:	20003c90 	.word	0x20003c90
    7da0:	20003c94 	.word	0x20003c94

00007da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    7da4:	b580      	push	{r7, lr}
    7da6:	b082      	sub	sp, #8
    7da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    7daa:	4b2a      	ldr	r3, [pc, #168]	; (7e54 <vTaskSwitchContext+0xb0>)
    7dac:	681b      	ldr	r3, [r3, #0]
    7dae:	2b00      	cmp	r3, #0
    7db0:	d003      	beq.n	7dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    7db2:	4b29      	ldr	r3, [pc, #164]	; (7e58 <vTaskSwitchContext+0xb4>)
    7db4:	2201      	movs	r2, #1
    7db6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    7db8:	e048      	b.n	7e4c <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    7dba:	4b27      	ldr	r3, [pc, #156]	; (7e58 <vTaskSwitchContext+0xb4>)
    7dbc:	2200      	movs	r2, #0
    7dbe:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    7dc0:	4b26      	ldr	r3, [pc, #152]	; (7e5c <vTaskSwitchContext+0xb8>)
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	681a      	ldr	r2, [r3, #0]
    7dc6:	4b25      	ldr	r3, [pc, #148]	; (7e5c <vTaskSwitchContext+0xb8>)
    7dc8:	681b      	ldr	r3, [r3, #0]
    7dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7dcc:	429a      	cmp	r2, r3
    7dce:	d808      	bhi.n	7de2 <vTaskSwitchContext+0x3e>
    7dd0:	4b22      	ldr	r3, [pc, #136]	; (7e5c <vTaskSwitchContext+0xb8>)
    7dd2:	681a      	ldr	r2, [r3, #0]
    7dd4:	4b21      	ldr	r3, [pc, #132]	; (7e5c <vTaskSwitchContext+0xb8>)
    7dd6:	681b      	ldr	r3, [r3, #0]
    7dd8:	3334      	adds	r3, #52	; 0x34
    7dda:	0019      	movs	r1, r3
    7ddc:	0010      	movs	r0, r2
    7dde:	4b20      	ldr	r3, [pc, #128]	; (7e60 <vTaskSwitchContext+0xbc>)
    7de0:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7de2:	4b20      	ldr	r3, [pc, #128]	; (7e64 <vTaskSwitchContext+0xc0>)
    7de4:	681b      	ldr	r3, [r3, #0]
    7de6:	607b      	str	r3, [r7, #4]
    7de8:	e007      	b.n	7dfa <vTaskSwitchContext+0x56>
    7dea:	687b      	ldr	r3, [r7, #4]
    7dec:	2b00      	cmp	r3, #0
    7dee:	d101      	bne.n	7df4 <vTaskSwitchContext+0x50>
    7df0:	b672      	cpsid	i
    7df2:	e7fe      	b.n	7df2 <vTaskSwitchContext+0x4e>
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	3b01      	subs	r3, #1
    7df8:	607b      	str	r3, [r7, #4]
    7dfa:	491b      	ldr	r1, [pc, #108]	; (7e68 <vTaskSwitchContext+0xc4>)
    7dfc:	687a      	ldr	r2, [r7, #4]
    7dfe:	0013      	movs	r3, r2
    7e00:	009b      	lsls	r3, r3, #2
    7e02:	189b      	adds	r3, r3, r2
    7e04:	009b      	lsls	r3, r3, #2
    7e06:	585b      	ldr	r3, [r3, r1]
    7e08:	2b00      	cmp	r3, #0
    7e0a:	d0ee      	beq.n	7dea <vTaskSwitchContext+0x46>
    7e0c:	687a      	ldr	r2, [r7, #4]
    7e0e:	0013      	movs	r3, r2
    7e10:	009b      	lsls	r3, r3, #2
    7e12:	189b      	adds	r3, r3, r2
    7e14:	009b      	lsls	r3, r3, #2
    7e16:	4a14      	ldr	r2, [pc, #80]	; (7e68 <vTaskSwitchContext+0xc4>)
    7e18:	189b      	adds	r3, r3, r2
    7e1a:	603b      	str	r3, [r7, #0]
    7e1c:	683b      	ldr	r3, [r7, #0]
    7e1e:	685b      	ldr	r3, [r3, #4]
    7e20:	685a      	ldr	r2, [r3, #4]
    7e22:	683b      	ldr	r3, [r7, #0]
    7e24:	605a      	str	r2, [r3, #4]
    7e26:	683b      	ldr	r3, [r7, #0]
    7e28:	685a      	ldr	r2, [r3, #4]
    7e2a:	683b      	ldr	r3, [r7, #0]
    7e2c:	3308      	adds	r3, #8
    7e2e:	429a      	cmp	r2, r3
    7e30:	d104      	bne.n	7e3c <vTaskSwitchContext+0x98>
    7e32:	683b      	ldr	r3, [r7, #0]
    7e34:	685b      	ldr	r3, [r3, #4]
    7e36:	685a      	ldr	r2, [r3, #4]
    7e38:	683b      	ldr	r3, [r7, #0]
    7e3a:	605a      	str	r2, [r3, #4]
    7e3c:	683b      	ldr	r3, [r7, #0]
    7e3e:	685b      	ldr	r3, [r3, #4]
    7e40:	68da      	ldr	r2, [r3, #12]
    7e42:	4b06      	ldr	r3, [pc, #24]	; (7e5c <vTaskSwitchContext+0xb8>)
    7e44:	601a      	str	r2, [r3, #0]
    7e46:	4b07      	ldr	r3, [pc, #28]	; (7e64 <vTaskSwitchContext+0xc0>)
    7e48:	687a      	ldr	r2, [r7, #4]
    7e4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    7e4c:	46c0      	nop			; (mov r8, r8)
    7e4e:	46bd      	mov	sp, r7
    7e50:	b002      	add	sp, #8
    7e52:	bd80      	pop	{r7, pc}
    7e54:	20003ca8 	.word	0x20003ca8
    7e58:	20003c94 	.word	0x20003c94
    7e5c:	20003ba8 	.word	0x20003ba8
    7e60:	0000918d 	.word	0x0000918d
    7e64:	20003c88 	.word	0x20003c88
    7e68:	20003bac 	.word	0x20003bac

00007e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    7e6c:	b580      	push	{r7, lr}
    7e6e:	b082      	sub	sp, #8
    7e70:	af00      	add	r7, sp, #0
    7e72:	6078      	str	r0, [r7, #4]
    7e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    7e76:	687b      	ldr	r3, [r7, #4]
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d101      	bne.n	7e80 <vTaskPlaceOnEventList+0x14>
    7e7c:	b672      	cpsid	i
    7e7e:	e7fe      	b.n	7e7e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7e80:	4b08      	ldr	r3, [pc, #32]	; (7ea4 <vTaskPlaceOnEventList+0x38>)
    7e82:	681b      	ldr	r3, [r3, #0]
    7e84:	3318      	adds	r3, #24
    7e86:	001a      	movs	r2, r3
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	0011      	movs	r1, r2
    7e8c:	0018      	movs	r0, r3
    7e8e:	4b06      	ldr	r3, [pc, #24]	; (7ea8 <vTaskPlaceOnEventList+0x3c>)
    7e90:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    7e92:	683b      	ldr	r3, [r7, #0]
    7e94:	2101      	movs	r1, #1
    7e96:	0018      	movs	r0, r3
    7e98:	4b04      	ldr	r3, [pc, #16]	; (7eac <vTaskPlaceOnEventList+0x40>)
    7e9a:	4798      	blx	r3
}
    7e9c:	46c0      	nop			; (mov r8, r8)
    7e9e:	46bd      	mov	sp, r7
    7ea0:	b002      	add	sp, #8
    7ea2:	bd80      	pop	{r7, pc}
    7ea4:	20003ba8 	.word	0x20003ba8
    7ea8:	00006935 	.word	0x00006935
    7eac:	0000844d 	.word	0x0000844d

00007eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    7eb0:	b580      	push	{r7, lr}
    7eb2:	b084      	sub	sp, #16
    7eb4:	af00      	add	r7, sp, #0
    7eb6:	60f8      	str	r0, [r7, #12]
    7eb8:	60b9      	str	r1, [r7, #8]
    7eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    7ebc:	68fb      	ldr	r3, [r7, #12]
    7ebe:	2b00      	cmp	r3, #0
    7ec0:	d101      	bne.n	7ec6 <vTaskPlaceOnEventListRestricted+0x16>
    7ec2:	b672      	cpsid	i
    7ec4:	e7fe      	b.n	7ec4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    7ec6:	4b0c      	ldr	r3, [pc, #48]	; (7ef8 <vTaskPlaceOnEventListRestricted+0x48>)
    7ec8:	681b      	ldr	r3, [r3, #0]
    7eca:	3318      	adds	r3, #24
    7ecc:	001a      	movs	r2, r3
    7ece:	68fb      	ldr	r3, [r7, #12]
    7ed0:	0011      	movs	r1, r2
    7ed2:	0018      	movs	r0, r3
    7ed4:	4b09      	ldr	r3, [pc, #36]	; (7efc <vTaskPlaceOnEventListRestricted+0x4c>)
    7ed6:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    7ed8:	687b      	ldr	r3, [r7, #4]
    7eda:	2b00      	cmp	r3, #0
    7edc:	d002      	beq.n	7ee4 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    7ede:	2301      	movs	r3, #1
    7ee0:	425b      	negs	r3, r3
    7ee2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    7ee4:	687a      	ldr	r2, [r7, #4]
    7ee6:	68bb      	ldr	r3, [r7, #8]
    7ee8:	0011      	movs	r1, r2
    7eea:	0018      	movs	r0, r3
    7eec:	4b04      	ldr	r3, [pc, #16]	; (7f00 <vTaskPlaceOnEventListRestricted+0x50>)
    7eee:	4798      	blx	r3
	}
    7ef0:	46c0      	nop			; (mov r8, r8)
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b004      	add	sp, #16
    7ef6:	bd80      	pop	{r7, pc}
    7ef8:	20003ba8 	.word	0x20003ba8
    7efc:	000068f1 	.word	0x000068f1
    7f00:	0000844d 	.word	0x0000844d

00007f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    7f04:	b580      	push	{r7, lr}
    7f06:	b084      	sub	sp, #16
    7f08:	af00      	add	r7, sp, #0
    7f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    7f0c:	687b      	ldr	r3, [r7, #4]
    7f0e:	68db      	ldr	r3, [r3, #12]
    7f10:	68db      	ldr	r3, [r3, #12]
    7f12:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    7f14:	68bb      	ldr	r3, [r7, #8]
    7f16:	2b00      	cmp	r3, #0
    7f18:	d101      	bne.n	7f1e <xTaskRemoveFromEventList+0x1a>
    7f1a:	b672      	cpsid	i
    7f1c:	e7fe      	b.n	7f1c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    7f1e:	68bb      	ldr	r3, [r7, #8]
    7f20:	3318      	adds	r3, #24
    7f22:	0018      	movs	r0, r3
    7f24:	4b1f      	ldr	r3, [pc, #124]	; (7fa4 <xTaskRemoveFromEventList+0xa0>)
    7f26:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7f28:	4b1f      	ldr	r3, [pc, #124]	; (7fa8 <xTaskRemoveFromEventList+0xa4>)
    7f2a:	681b      	ldr	r3, [r3, #0]
    7f2c:	2b00      	cmp	r3, #0
    7f2e:	d11d      	bne.n	7f6c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    7f30:	68bb      	ldr	r3, [r7, #8]
    7f32:	3304      	adds	r3, #4
    7f34:	0018      	movs	r0, r3
    7f36:	4b1b      	ldr	r3, [pc, #108]	; (7fa4 <xTaskRemoveFromEventList+0xa0>)
    7f38:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    7f3a:	68bb      	ldr	r3, [r7, #8]
    7f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f3e:	4b1b      	ldr	r3, [pc, #108]	; (7fac <xTaskRemoveFromEventList+0xa8>)
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	429a      	cmp	r2, r3
    7f44:	d903      	bls.n	7f4e <xTaskRemoveFromEventList+0x4a>
    7f46:	68bb      	ldr	r3, [r7, #8]
    7f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f4a:	4b18      	ldr	r3, [pc, #96]	; (7fac <xTaskRemoveFromEventList+0xa8>)
    7f4c:	601a      	str	r2, [r3, #0]
    7f4e:	68bb      	ldr	r3, [r7, #8]
    7f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f52:	0013      	movs	r3, r2
    7f54:	009b      	lsls	r3, r3, #2
    7f56:	189b      	adds	r3, r3, r2
    7f58:	009b      	lsls	r3, r3, #2
    7f5a:	4a15      	ldr	r2, [pc, #84]	; (7fb0 <xTaskRemoveFromEventList+0xac>)
    7f5c:	189a      	adds	r2, r3, r2
    7f5e:	68bb      	ldr	r3, [r7, #8]
    7f60:	3304      	adds	r3, #4
    7f62:	0019      	movs	r1, r3
    7f64:	0010      	movs	r0, r2
    7f66:	4b13      	ldr	r3, [pc, #76]	; (7fb4 <xTaskRemoveFromEventList+0xb0>)
    7f68:	4798      	blx	r3
    7f6a:	e007      	b.n	7f7c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    7f6c:	68bb      	ldr	r3, [r7, #8]
    7f6e:	3318      	adds	r3, #24
    7f70:	001a      	movs	r2, r3
    7f72:	4b11      	ldr	r3, [pc, #68]	; (7fb8 <xTaskRemoveFromEventList+0xb4>)
    7f74:	0011      	movs	r1, r2
    7f76:	0018      	movs	r0, r3
    7f78:	4b0e      	ldr	r3, [pc, #56]	; (7fb4 <xTaskRemoveFromEventList+0xb0>)
    7f7a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    7f7c:	68bb      	ldr	r3, [r7, #8]
    7f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7f80:	4b0e      	ldr	r3, [pc, #56]	; (7fbc <xTaskRemoveFromEventList+0xb8>)
    7f82:	681b      	ldr	r3, [r3, #0]
    7f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7f86:	429a      	cmp	r2, r3
    7f88:	d905      	bls.n	7f96 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    7f8a:	2301      	movs	r3, #1
    7f8c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    7f8e:	4b0c      	ldr	r3, [pc, #48]	; (7fc0 <xTaskRemoveFromEventList+0xbc>)
    7f90:	2201      	movs	r2, #1
    7f92:	601a      	str	r2, [r3, #0]
    7f94:	e001      	b.n	7f9a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    7f96:	2300      	movs	r3, #0
    7f98:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    7f9a:	68fb      	ldr	r3, [r7, #12]
}
    7f9c:	0018      	movs	r0, r3
    7f9e:	46bd      	mov	sp, r7
    7fa0:	b004      	add	sp, #16
    7fa2:	bd80      	pop	{r7, pc}
    7fa4:	000069a1 	.word	0x000069a1
    7fa8:	20003ca8 	.word	0x20003ca8
    7fac:	20003c88 	.word	0x20003c88
    7fb0:	20003bac 	.word	0x20003bac
    7fb4:	000068f1 	.word	0x000068f1
    7fb8:	20003c40 	.word	0x20003c40
    7fbc:	20003ba8 	.word	0x20003ba8
    7fc0:	20003c94 	.word	0x20003c94

00007fc4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    7fc4:	b580      	push	{r7, lr}
    7fc6:	b082      	sub	sp, #8
    7fc8:	af00      	add	r7, sp, #0
    7fca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d101      	bne.n	7fd6 <vTaskSetTimeOutState+0x12>
    7fd2:	b672      	cpsid	i
    7fd4:	e7fe      	b.n	7fd4 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    7fd6:	4b06      	ldr	r3, [pc, #24]	; (7ff0 <vTaskSetTimeOutState+0x2c>)
    7fd8:	681a      	ldr	r2, [r3, #0]
    7fda:	687b      	ldr	r3, [r7, #4]
    7fdc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    7fde:	4b05      	ldr	r3, [pc, #20]	; (7ff4 <vTaskSetTimeOutState+0x30>)
    7fe0:	681a      	ldr	r2, [r3, #0]
    7fe2:	687b      	ldr	r3, [r7, #4]
    7fe4:	605a      	str	r2, [r3, #4]
}
    7fe6:	46c0      	nop			; (mov r8, r8)
    7fe8:	46bd      	mov	sp, r7
    7fea:	b002      	add	sp, #8
    7fec:	bd80      	pop	{r7, pc}
    7fee:	46c0      	nop			; (mov r8, r8)
    7ff0:	20003c98 	.word	0x20003c98
    7ff4:	20003c84 	.word	0x20003c84

00007ff8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    7ff8:	b580      	push	{r7, lr}
    7ffa:	b084      	sub	sp, #16
    7ffc:	af00      	add	r7, sp, #0
    7ffe:	6078      	str	r0, [r7, #4]
    8000:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    8002:	687b      	ldr	r3, [r7, #4]
    8004:	2b00      	cmp	r3, #0
    8006:	d101      	bne.n	800c <xTaskCheckForTimeOut+0x14>
    8008:	b672      	cpsid	i
    800a:	e7fe      	b.n	800a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    800c:	683b      	ldr	r3, [r7, #0]
    800e:	2b00      	cmp	r3, #0
    8010:	d101      	bne.n	8016 <xTaskCheckForTimeOut+0x1e>
    8012:	b672      	cpsid	i
    8014:	e7fe      	b.n	8014 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    8016:	4b1d      	ldr	r3, [pc, #116]	; (808c <xTaskCheckForTimeOut+0x94>)
    8018:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    801a:	4b1d      	ldr	r3, [pc, #116]	; (8090 <xTaskCheckForTimeOut+0x98>)
    801c:	681b      	ldr	r3, [r3, #0]
    801e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8020:	683b      	ldr	r3, [r7, #0]
    8022:	681b      	ldr	r3, [r3, #0]
    8024:	3301      	adds	r3, #1
    8026:	d102      	bne.n	802e <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    8028:	2300      	movs	r3, #0
    802a:	60fb      	str	r3, [r7, #12]
    802c:	e027      	b.n	807e <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	681a      	ldr	r2, [r3, #0]
    8032:	4b18      	ldr	r3, [pc, #96]	; (8094 <xTaskCheckForTimeOut+0x9c>)
    8034:	681b      	ldr	r3, [r3, #0]
    8036:	429a      	cmp	r2, r3
    8038:	d007      	beq.n	804a <xTaskCheckForTimeOut+0x52>
    803a:	687b      	ldr	r3, [r7, #4]
    803c:	685a      	ldr	r2, [r3, #4]
    803e:	68bb      	ldr	r3, [r7, #8]
    8040:	429a      	cmp	r2, r3
    8042:	d802      	bhi.n	804a <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    8044:	2301      	movs	r3, #1
    8046:	60fb      	str	r3, [r7, #12]
    8048:	e019      	b.n	807e <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    804a:	687b      	ldr	r3, [r7, #4]
    804c:	685b      	ldr	r3, [r3, #4]
    804e:	68ba      	ldr	r2, [r7, #8]
    8050:	1ad2      	subs	r2, r2, r3
    8052:	683b      	ldr	r3, [r7, #0]
    8054:	681b      	ldr	r3, [r3, #0]
    8056:	429a      	cmp	r2, r3
    8058:	d20f      	bcs.n	807a <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    805a:	683b      	ldr	r3, [r7, #0]
    805c:	681a      	ldr	r2, [r3, #0]
    805e:	687b      	ldr	r3, [r7, #4]
    8060:	6859      	ldr	r1, [r3, #4]
    8062:	68bb      	ldr	r3, [r7, #8]
    8064:	1acb      	subs	r3, r1, r3
    8066:	18d2      	adds	r2, r2, r3
    8068:	683b      	ldr	r3, [r7, #0]
    806a:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    806c:	687b      	ldr	r3, [r7, #4]
    806e:	0018      	movs	r0, r3
    8070:	4b09      	ldr	r3, [pc, #36]	; (8098 <xTaskCheckForTimeOut+0xa0>)
    8072:	4798      	blx	r3
			xReturn = pdFALSE;
    8074:	2300      	movs	r3, #0
    8076:	60fb      	str	r3, [r7, #12]
    8078:	e001      	b.n	807e <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    807a:	2301      	movs	r3, #1
    807c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    807e:	4b07      	ldr	r3, [pc, #28]	; (809c <xTaskCheckForTimeOut+0xa4>)
    8080:	4798      	blx	r3

	return xReturn;
    8082:	68fb      	ldr	r3, [r7, #12]
}
    8084:	0018      	movs	r0, r3
    8086:	46bd      	mov	sp, r7
    8088:	b004      	add	sp, #16
    808a:	bd80      	pop	{r7, pc}
    808c:	00006b19 	.word	0x00006b19
    8090:	20003c84 	.word	0x20003c84
    8094:	20003c98 	.word	0x20003c98
    8098:	00007fc5 	.word	0x00007fc5
    809c:	00006b3d 	.word	0x00006b3d

000080a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    80a0:	b580      	push	{r7, lr}
    80a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    80a4:	4b02      	ldr	r3, [pc, #8]	; (80b0 <vTaskMissedYield+0x10>)
    80a6:	2201      	movs	r2, #1
    80a8:	601a      	str	r2, [r3, #0]
}
    80aa:	46c0      	nop			; (mov r8, r8)
    80ac:	46bd      	mov	sp, r7
    80ae:	bd80      	pop	{r7, pc}
    80b0:	20003c94 	.word	0x20003c94

000080b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    80b4:	b580      	push	{r7, lr}
    80b6:	b082      	sub	sp, #8
    80b8:	af00      	add	r7, sp, #0
    80ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    80bc:	4b05      	ldr	r3, [pc, #20]	; (80d4 <prvIdleTask+0x20>)
    80be:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    80c0:	4b05      	ldr	r3, [pc, #20]	; (80d8 <prvIdleTask+0x24>)
    80c2:	681b      	ldr	r3, [r3, #0]
    80c4:	2b01      	cmp	r3, #1
    80c6:	d901      	bls.n	80cc <prvIdleTask+0x18>
			{
				taskYIELD();
    80c8:	4b04      	ldr	r3, [pc, #16]	; (80dc <prvIdleTask+0x28>)
    80ca:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    80cc:	4b04      	ldr	r3, [pc, #16]	; (80e0 <prvIdleTask+0x2c>)
    80ce:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    80d0:	e7f4      	b.n	80bc <prvIdleTask+0x8>
    80d2:	46c0      	nop			; (mov r8, r8)
    80d4:	00008171 	.word	0x00008171
    80d8:	20003bac 	.word	0x20003bac
    80dc:	00006af9 	.word	0x00006af9
    80e0:	00009179 	.word	0x00009179

000080e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    80e4:	b580      	push	{r7, lr}
    80e6:	b082      	sub	sp, #8
    80e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    80ea:	2300      	movs	r3, #0
    80ec:	607b      	str	r3, [r7, #4]
    80ee:	e00c      	b.n	810a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    80f0:	687a      	ldr	r2, [r7, #4]
    80f2:	0013      	movs	r3, r2
    80f4:	009b      	lsls	r3, r3, #2
    80f6:	189b      	adds	r3, r3, r2
    80f8:	009b      	lsls	r3, r3, #2
    80fa:	4a14      	ldr	r2, [pc, #80]	; (814c <prvInitialiseTaskLists+0x68>)
    80fc:	189b      	adds	r3, r3, r2
    80fe:	0018      	movs	r0, r3
    8100:	4b13      	ldr	r3, [pc, #76]	; (8150 <prvInitialiseTaskLists+0x6c>)
    8102:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8104:	687b      	ldr	r3, [r7, #4]
    8106:	3301      	adds	r3, #1
    8108:	607b      	str	r3, [r7, #4]
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	2b04      	cmp	r3, #4
    810e:	d9ef      	bls.n	80f0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    8110:	4b10      	ldr	r3, [pc, #64]	; (8154 <prvInitialiseTaskLists+0x70>)
    8112:	0018      	movs	r0, r3
    8114:	4b0e      	ldr	r3, [pc, #56]	; (8150 <prvInitialiseTaskLists+0x6c>)
    8116:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    8118:	4b0f      	ldr	r3, [pc, #60]	; (8158 <prvInitialiseTaskLists+0x74>)
    811a:	0018      	movs	r0, r3
    811c:	4b0c      	ldr	r3, [pc, #48]	; (8150 <prvInitialiseTaskLists+0x6c>)
    811e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    8120:	4b0e      	ldr	r3, [pc, #56]	; (815c <prvInitialiseTaskLists+0x78>)
    8122:	0018      	movs	r0, r3
    8124:	4b0a      	ldr	r3, [pc, #40]	; (8150 <prvInitialiseTaskLists+0x6c>)
    8126:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    8128:	4b0d      	ldr	r3, [pc, #52]	; (8160 <prvInitialiseTaskLists+0x7c>)
    812a:	0018      	movs	r0, r3
    812c:	4b08      	ldr	r3, [pc, #32]	; (8150 <prvInitialiseTaskLists+0x6c>)
    812e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    8130:	4b0c      	ldr	r3, [pc, #48]	; (8164 <prvInitialiseTaskLists+0x80>)
    8132:	0018      	movs	r0, r3
    8134:	4b06      	ldr	r3, [pc, #24]	; (8150 <prvInitialiseTaskLists+0x6c>)
    8136:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    8138:	4b0b      	ldr	r3, [pc, #44]	; (8168 <prvInitialiseTaskLists+0x84>)
    813a:	4a06      	ldr	r2, [pc, #24]	; (8154 <prvInitialiseTaskLists+0x70>)
    813c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    813e:	4b0b      	ldr	r3, [pc, #44]	; (816c <prvInitialiseTaskLists+0x88>)
    8140:	4a05      	ldr	r2, [pc, #20]	; (8158 <prvInitialiseTaskLists+0x74>)
    8142:	601a      	str	r2, [r3, #0]
}
    8144:	46c0      	nop			; (mov r8, r8)
    8146:	46bd      	mov	sp, r7
    8148:	b002      	add	sp, #8
    814a:	bd80      	pop	{r7, pc}
    814c:	20003bac 	.word	0x20003bac
    8150:	0000689d 	.word	0x0000689d
    8154:	20003c10 	.word	0x20003c10
    8158:	20003c24 	.word	0x20003c24
    815c:	20003c40 	.word	0x20003c40
    8160:	20003c54 	.word	0x20003c54
    8164:	20003c6c 	.word	0x20003c6c
    8168:	20003c38 	.word	0x20003c38
    816c:	20003c3c 	.word	0x20003c3c

00008170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    8170:	b580      	push	{r7, lr}
    8172:	b082      	sub	sp, #8
    8174:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    8176:	e027      	b.n	81c8 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    8178:	4b17      	ldr	r3, [pc, #92]	; (81d8 <prvCheckTasksWaitingTermination+0x68>)
    817a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    817c:	4b17      	ldr	r3, [pc, #92]	; (81dc <prvCheckTasksWaitingTermination+0x6c>)
    817e:	681b      	ldr	r3, [r3, #0]
    8180:	425a      	negs	r2, r3
    8182:	4153      	adcs	r3, r2
    8184:	b2db      	uxtb	r3, r3
    8186:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    8188:	4b15      	ldr	r3, [pc, #84]	; (81e0 <prvCheckTasksWaitingTermination+0x70>)
    818a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    818c:	687b      	ldr	r3, [r7, #4]
    818e:	2b00      	cmp	r3, #0
    8190:	d11a      	bne.n	81c8 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    8192:	4b14      	ldr	r3, [pc, #80]	; (81e4 <prvCheckTasksWaitingTermination+0x74>)
    8194:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    8196:	4b11      	ldr	r3, [pc, #68]	; (81dc <prvCheckTasksWaitingTermination+0x6c>)
    8198:	68db      	ldr	r3, [r3, #12]
    819a:	68db      	ldr	r3, [r3, #12]
    819c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    819e:	683b      	ldr	r3, [r7, #0]
    81a0:	3304      	adds	r3, #4
    81a2:	0018      	movs	r0, r3
    81a4:	4b10      	ldr	r3, [pc, #64]	; (81e8 <prvCheckTasksWaitingTermination+0x78>)
    81a6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    81a8:	4b10      	ldr	r3, [pc, #64]	; (81ec <prvCheckTasksWaitingTermination+0x7c>)
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	1e5a      	subs	r2, r3, #1
    81ae:	4b0f      	ldr	r3, [pc, #60]	; (81ec <prvCheckTasksWaitingTermination+0x7c>)
    81b0:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    81b2:	4b0f      	ldr	r3, [pc, #60]	; (81f0 <prvCheckTasksWaitingTermination+0x80>)
    81b4:	681b      	ldr	r3, [r3, #0]
    81b6:	1e5a      	subs	r2, r3, #1
    81b8:	4b0d      	ldr	r3, [pc, #52]	; (81f0 <prvCheckTasksWaitingTermination+0x80>)
    81ba:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    81bc:	4b0d      	ldr	r3, [pc, #52]	; (81f4 <prvCheckTasksWaitingTermination+0x84>)
    81be:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    81c0:	683b      	ldr	r3, [r7, #0]
    81c2:	0018      	movs	r0, r3
    81c4:	4b0c      	ldr	r3, [pc, #48]	; (81f8 <prvCheckTasksWaitingTermination+0x88>)
    81c6:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    81c8:	4b09      	ldr	r3, [pc, #36]	; (81f0 <prvCheckTasksWaitingTermination+0x80>)
    81ca:	681b      	ldr	r3, [r3, #0]
    81cc:	2b00      	cmp	r3, #0
    81ce:	d1d3      	bne.n	8178 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    81d0:	46c0      	nop			; (mov r8, r8)
    81d2:	46bd      	mov	sp, r7
    81d4:	b002      	add	sp, #8
    81d6:	bd80      	pop	{r7, pc}
    81d8:	00007ac9 	.word	0x00007ac9
    81dc:	20003c54 	.word	0x20003c54
    81e0:	00007ae1 	.word	0x00007ae1
    81e4:	00006b19 	.word	0x00006b19
    81e8:	000069a1 	.word	0x000069a1
    81ec:	20003c80 	.word	0x20003c80
    81f0:	20003c68 	.word	0x20003c68
    81f4:	00006b3d 	.word	0x00006b3d
    81f8:	000081fd 	.word	0x000081fd

000081fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    81fc:	b580      	push	{r7, lr}
    81fe:	b082      	sub	sp, #8
    8200:	af00      	add	r7, sp, #0
    8202:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    8204:	687b      	ldr	r3, [r7, #4]
    8206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8208:	0018      	movs	r0, r3
    820a:	4b05      	ldr	r3, [pc, #20]	; (8220 <prvDeleteTCB+0x24>)
    820c:	4798      	blx	r3
			vPortFree( pxTCB );
    820e:	687b      	ldr	r3, [r7, #4]
    8210:	0018      	movs	r0, r3
    8212:	4b03      	ldr	r3, [pc, #12]	; (8220 <prvDeleteTCB+0x24>)
    8214:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    8216:	46c0      	nop			; (mov r8, r8)
    8218:	46bd      	mov	sp, r7
    821a:	b002      	add	sp, #8
    821c:	bd80      	pop	{r7, pc}
    821e:	46c0      	nop			; (mov r8, r8)
    8220:	00006cc1 	.word	0x00006cc1

00008224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8224:	b580      	push	{r7, lr}
    8226:	b082      	sub	sp, #8
    8228:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    822a:	4b0e      	ldr	r3, [pc, #56]	; (8264 <prvResetNextTaskUnblockTime+0x40>)
    822c:	681b      	ldr	r3, [r3, #0]
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	2b00      	cmp	r3, #0
    8232:	d101      	bne.n	8238 <prvResetNextTaskUnblockTime+0x14>
    8234:	2301      	movs	r3, #1
    8236:	e000      	b.n	823a <prvResetNextTaskUnblockTime+0x16>
    8238:	2300      	movs	r3, #0
    823a:	2b00      	cmp	r3, #0
    823c:	d004      	beq.n	8248 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    823e:	4b0a      	ldr	r3, [pc, #40]	; (8268 <prvResetNextTaskUnblockTime+0x44>)
    8240:	2201      	movs	r2, #1
    8242:	4252      	negs	r2, r2
    8244:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    8246:	e008      	b.n	825a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8248:	4b06      	ldr	r3, [pc, #24]	; (8264 <prvResetNextTaskUnblockTime+0x40>)
    824a:	681b      	ldr	r3, [r3, #0]
    824c:	68db      	ldr	r3, [r3, #12]
    824e:	68db      	ldr	r3, [r3, #12]
    8250:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    8252:	687b      	ldr	r3, [r7, #4]
    8254:	685a      	ldr	r2, [r3, #4]
    8256:	4b04      	ldr	r3, [pc, #16]	; (8268 <prvResetNextTaskUnblockTime+0x44>)
    8258:	601a      	str	r2, [r3, #0]
	}
}
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	46bd      	mov	sp, r7
    825e:	b002      	add	sp, #8
    8260:	bd80      	pop	{r7, pc}
    8262:	46c0      	nop			; (mov r8, r8)
    8264:	20003c38 	.word	0x20003c38
    8268:	20003ca0 	.word	0x20003ca0

0000826c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    826c:	b580      	push	{r7, lr}
    826e:	b082      	sub	sp, #8
    8270:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    8272:	4b0a      	ldr	r3, [pc, #40]	; (829c <xTaskGetSchedulerState+0x30>)
    8274:	681b      	ldr	r3, [r3, #0]
    8276:	2b00      	cmp	r3, #0
    8278:	d102      	bne.n	8280 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    827a:	2301      	movs	r3, #1
    827c:	607b      	str	r3, [r7, #4]
    827e:	e008      	b.n	8292 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8280:	4b07      	ldr	r3, [pc, #28]	; (82a0 <xTaskGetSchedulerState+0x34>)
    8282:	681b      	ldr	r3, [r3, #0]
    8284:	2b00      	cmp	r3, #0
    8286:	d102      	bne.n	828e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    8288:	2302      	movs	r3, #2
    828a:	607b      	str	r3, [r7, #4]
    828c:	e001      	b.n	8292 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    828e:	2300      	movs	r3, #0
    8290:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    8292:	687b      	ldr	r3, [r7, #4]
	}
    8294:	0018      	movs	r0, r3
    8296:	46bd      	mov	sp, r7
    8298:	b002      	add	sp, #8
    829a:	bd80      	pop	{r7, pc}
    829c:	20003c8c 	.word	0x20003c8c
    82a0:	20003ca8 	.word	0x20003ca8

000082a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    82a4:	b580      	push	{r7, lr}
    82a6:	b084      	sub	sp, #16
    82a8:	af00      	add	r7, sp, #0
    82aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    82b0:	687b      	ldr	r3, [r7, #4]
    82b2:	2b00      	cmp	r3, #0
    82b4:	d04a      	beq.n	834c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    82b6:	68fb      	ldr	r3, [r7, #12]
    82b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    82ba:	4b26      	ldr	r3, [pc, #152]	; (8354 <vTaskPriorityInherit+0xb0>)
    82bc:	681b      	ldr	r3, [r3, #0]
    82be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82c0:	429a      	cmp	r2, r3
    82c2:	d243      	bcs.n	834c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    82c4:	68fb      	ldr	r3, [r7, #12]
    82c6:	699b      	ldr	r3, [r3, #24]
    82c8:	2b00      	cmp	r3, #0
    82ca:	db06      	blt.n	82da <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    82cc:	4b21      	ldr	r3, [pc, #132]	; (8354 <vTaskPriorityInherit+0xb0>)
    82ce:	681b      	ldr	r3, [r3, #0]
    82d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    82d2:	2205      	movs	r2, #5
    82d4:	1ad2      	subs	r2, r2, r3
    82d6:	68fb      	ldr	r3, [r7, #12]
    82d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    82da:	68fb      	ldr	r3, [r7, #12]
    82dc:	6959      	ldr	r1, [r3, #20]
    82de:	68fb      	ldr	r3, [r7, #12]
    82e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    82e2:	0013      	movs	r3, r2
    82e4:	009b      	lsls	r3, r3, #2
    82e6:	189b      	adds	r3, r3, r2
    82e8:	009b      	lsls	r3, r3, #2
    82ea:	4a1b      	ldr	r2, [pc, #108]	; (8358 <vTaskPriorityInherit+0xb4>)
    82ec:	189b      	adds	r3, r3, r2
    82ee:	4299      	cmp	r1, r3
    82f0:	d101      	bne.n	82f6 <vTaskPriorityInherit+0x52>
    82f2:	2301      	movs	r3, #1
    82f4:	e000      	b.n	82f8 <vTaskPriorityInherit+0x54>
    82f6:	2300      	movs	r3, #0
    82f8:	2b00      	cmp	r3, #0
    82fa:	d022      	beq.n	8342 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    82fc:	68fb      	ldr	r3, [r7, #12]
    82fe:	3304      	adds	r3, #4
    8300:	0018      	movs	r0, r3
    8302:	4b16      	ldr	r3, [pc, #88]	; (835c <vTaskPriorityInherit+0xb8>)
    8304:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    8306:	4b13      	ldr	r3, [pc, #76]	; (8354 <vTaskPriorityInherit+0xb0>)
    8308:	681b      	ldr	r3, [r3, #0]
    830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    830c:	68fb      	ldr	r3, [r7, #12]
    830e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    8310:	68fb      	ldr	r3, [r7, #12]
    8312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8314:	4b12      	ldr	r3, [pc, #72]	; (8360 <vTaskPriorityInherit+0xbc>)
    8316:	681b      	ldr	r3, [r3, #0]
    8318:	429a      	cmp	r2, r3
    831a:	d903      	bls.n	8324 <vTaskPriorityInherit+0x80>
    831c:	68fb      	ldr	r3, [r7, #12]
    831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8320:	4b0f      	ldr	r3, [pc, #60]	; (8360 <vTaskPriorityInherit+0xbc>)
    8322:	601a      	str	r2, [r3, #0]
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8328:	0013      	movs	r3, r2
    832a:	009b      	lsls	r3, r3, #2
    832c:	189b      	adds	r3, r3, r2
    832e:	009b      	lsls	r3, r3, #2
    8330:	4a09      	ldr	r2, [pc, #36]	; (8358 <vTaskPriorityInherit+0xb4>)
    8332:	189a      	adds	r2, r3, r2
    8334:	68fb      	ldr	r3, [r7, #12]
    8336:	3304      	adds	r3, #4
    8338:	0019      	movs	r1, r3
    833a:	0010      	movs	r0, r2
    833c:	4b09      	ldr	r3, [pc, #36]	; (8364 <vTaskPriorityInherit+0xc0>)
    833e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8340:	e004      	b.n	834c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    8342:	4b04      	ldr	r3, [pc, #16]	; (8354 <vTaskPriorityInherit+0xb0>)
    8344:	681b      	ldr	r3, [r3, #0]
    8346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8348:	68fb      	ldr	r3, [r7, #12]
    834a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    834c:	46c0      	nop			; (mov r8, r8)
    834e:	46bd      	mov	sp, r7
    8350:	b004      	add	sp, #16
    8352:	bd80      	pop	{r7, pc}
    8354:	20003ba8 	.word	0x20003ba8
    8358:	20003bac 	.word	0x20003bac
    835c:	000069a1 	.word	0x000069a1
    8360:	20003c88 	.word	0x20003c88
    8364:	000068f1 	.word	0x000068f1

00008368 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    8368:	b580      	push	{r7, lr}
    836a:	b084      	sub	sp, #16
    836c:	af00      	add	r7, sp, #0
    836e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    8374:	2300      	movs	r3, #0
    8376:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	2b00      	cmp	r3, #0
    837c:	d044      	beq.n	8408 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    837e:	4b25      	ldr	r3, [pc, #148]	; (8414 <xTaskPriorityDisinherit+0xac>)
    8380:	681b      	ldr	r3, [r3, #0]
    8382:	68ba      	ldr	r2, [r7, #8]
    8384:	429a      	cmp	r2, r3
    8386:	d001      	beq.n	838c <xTaskPriorityDisinherit+0x24>
    8388:	b672      	cpsid	i
    838a:	e7fe      	b.n	838a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    838c:	68bb      	ldr	r3, [r7, #8]
    838e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8390:	2b00      	cmp	r3, #0
    8392:	d101      	bne.n	8398 <xTaskPriorityDisinherit+0x30>
    8394:	b672      	cpsid	i
    8396:	e7fe      	b.n	8396 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    8398:	68bb      	ldr	r3, [r7, #8]
    839a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    839c:	1e5a      	subs	r2, r3, #1
    839e:	68bb      	ldr	r3, [r7, #8]
    83a0:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    83a2:	68bb      	ldr	r3, [r7, #8]
    83a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    83a6:	68bb      	ldr	r3, [r7, #8]
    83a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    83aa:	429a      	cmp	r2, r3
    83ac:	d02c      	beq.n	8408 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    83ae:	68bb      	ldr	r3, [r7, #8]
    83b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    83b2:	2b00      	cmp	r3, #0
    83b4:	d128      	bne.n	8408 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    83b6:	68bb      	ldr	r3, [r7, #8]
    83b8:	3304      	adds	r3, #4
    83ba:	0018      	movs	r0, r3
    83bc:	4b16      	ldr	r3, [pc, #88]	; (8418 <xTaskPriorityDisinherit+0xb0>)
    83be:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    83c0:	68bb      	ldr	r3, [r7, #8]
    83c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    83c4:	68bb      	ldr	r3, [r7, #8]
    83c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    83c8:	68bb      	ldr	r3, [r7, #8]
    83ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83cc:	2205      	movs	r2, #5
    83ce:	1ad2      	subs	r2, r2, r3
    83d0:	68bb      	ldr	r3, [r7, #8]
    83d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    83d4:	68bb      	ldr	r3, [r7, #8]
    83d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    83d8:	4b10      	ldr	r3, [pc, #64]	; (841c <xTaskPriorityDisinherit+0xb4>)
    83da:	681b      	ldr	r3, [r3, #0]
    83dc:	429a      	cmp	r2, r3
    83de:	d903      	bls.n	83e8 <xTaskPriorityDisinherit+0x80>
    83e0:	68bb      	ldr	r3, [r7, #8]
    83e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    83e4:	4b0d      	ldr	r3, [pc, #52]	; (841c <xTaskPriorityDisinherit+0xb4>)
    83e6:	601a      	str	r2, [r3, #0]
    83e8:	68bb      	ldr	r3, [r7, #8]
    83ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    83ec:	0013      	movs	r3, r2
    83ee:	009b      	lsls	r3, r3, #2
    83f0:	189b      	adds	r3, r3, r2
    83f2:	009b      	lsls	r3, r3, #2
    83f4:	4a0a      	ldr	r2, [pc, #40]	; (8420 <xTaskPriorityDisinherit+0xb8>)
    83f6:	189a      	adds	r2, r3, r2
    83f8:	68bb      	ldr	r3, [r7, #8]
    83fa:	3304      	adds	r3, #4
    83fc:	0019      	movs	r1, r3
    83fe:	0010      	movs	r0, r2
    8400:	4b08      	ldr	r3, [pc, #32]	; (8424 <xTaskPriorityDisinherit+0xbc>)
    8402:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    8404:	2301      	movs	r3, #1
    8406:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8408:	68fb      	ldr	r3, [r7, #12]
	}
    840a:	0018      	movs	r0, r3
    840c:	46bd      	mov	sp, r7
    840e:	b004      	add	sp, #16
    8410:	bd80      	pop	{r7, pc}
    8412:	46c0      	nop			; (mov r8, r8)
    8414:	20003ba8 	.word	0x20003ba8
    8418:	000069a1 	.word	0x000069a1
    841c:	20003c88 	.word	0x20003c88
    8420:	20003bac 	.word	0x20003bac
    8424:	000068f1 	.word	0x000068f1

00008428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    8428:	b580      	push	{r7, lr}
    842a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    842c:	4b06      	ldr	r3, [pc, #24]	; (8448 <pvTaskIncrementMutexHeldCount+0x20>)
    842e:	681b      	ldr	r3, [r3, #0]
    8430:	2b00      	cmp	r3, #0
    8432:	d004      	beq.n	843e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    8434:	4b04      	ldr	r3, [pc, #16]	; (8448 <pvTaskIncrementMutexHeldCount+0x20>)
    8436:	681b      	ldr	r3, [r3, #0]
    8438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    843a:	3201      	adds	r2, #1
    843c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    843e:	4b02      	ldr	r3, [pc, #8]	; (8448 <pvTaskIncrementMutexHeldCount+0x20>)
    8440:	681b      	ldr	r3, [r3, #0]
	}
    8442:	0018      	movs	r0, r3
    8444:	46bd      	mov	sp, r7
    8446:	bd80      	pop	{r7, pc}
    8448:	20003ba8 	.word	0x20003ba8

0000844c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    844c:	b580      	push	{r7, lr}
    844e:	b084      	sub	sp, #16
    8450:	af00      	add	r7, sp, #0
    8452:	6078      	str	r0, [r7, #4]
    8454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    8456:	4b21      	ldr	r3, [pc, #132]	; (84dc <prvAddCurrentTaskToDelayedList+0x90>)
    8458:	681b      	ldr	r3, [r3, #0]
    845a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    845c:	4b20      	ldr	r3, [pc, #128]	; (84e0 <prvAddCurrentTaskToDelayedList+0x94>)
    845e:	681b      	ldr	r3, [r3, #0]
    8460:	3304      	adds	r3, #4
    8462:	0018      	movs	r0, r3
    8464:	4b1f      	ldr	r3, [pc, #124]	; (84e4 <prvAddCurrentTaskToDelayedList+0x98>)
    8466:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	3301      	adds	r3, #1
    846c:	d10b      	bne.n	8486 <prvAddCurrentTaskToDelayedList+0x3a>
    846e:	683b      	ldr	r3, [r7, #0]
    8470:	2b00      	cmp	r3, #0
    8472:	d008      	beq.n	8486 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8474:	4b1a      	ldr	r3, [pc, #104]	; (84e0 <prvAddCurrentTaskToDelayedList+0x94>)
    8476:	681b      	ldr	r3, [r3, #0]
    8478:	1d1a      	adds	r2, r3, #4
    847a:	4b1b      	ldr	r3, [pc, #108]	; (84e8 <prvAddCurrentTaskToDelayedList+0x9c>)
    847c:	0011      	movs	r1, r2
    847e:	0018      	movs	r0, r3
    8480:	4b1a      	ldr	r3, [pc, #104]	; (84ec <prvAddCurrentTaskToDelayedList+0xa0>)
    8482:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    8484:	e026      	b.n	84d4 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    8486:	68fa      	ldr	r2, [r7, #12]
    8488:	687b      	ldr	r3, [r7, #4]
    848a:	18d3      	adds	r3, r2, r3
    848c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    848e:	4b14      	ldr	r3, [pc, #80]	; (84e0 <prvAddCurrentTaskToDelayedList+0x94>)
    8490:	681b      	ldr	r3, [r3, #0]
    8492:	68ba      	ldr	r2, [r7, #8]
    8494:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    8496:	68ba      	ldr	r2, [r7, #8]
    8498:	68fb      	ldr	r3, [r7, #12]
    849a:	429a      	cmp	r2, r3
    849c:	d209      	bcs.n	84b2 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    849e:	4b14      	ldr	r3, [pc, #80]	; (84f0 <prvAddCurrentTaskToDelayedList+0xa4>)
    84a0:	681a      	ldr	r2, [r3, #0]
    84a2:	4b0f      	ldr	r3, [pc, #60]	; (84e0 <prvAddCurrentTaskToDelayedList+0x94>)
    84a4:	681b      	ldr	r3, [r3, #0]
    84a6:	3304      	adds	r3, #4
    84a8:	0019      	movs	r1, r3
    84aa:	0010      	movs	r0, r2
    84ac:	4b11      	ldr	r3, [pc, #68]	; (84f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    84ae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    84b0:	e010      	b.n	84d4 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    84b2:	4b11      	ldr	r3, [pc, #68]	; (84f8 <prvAddCurrentTaskToDelayedList+0xac>)
    84b4:	681a      	ldr	r2, [r3, #0]
    84b6:	4b0a      	ldr	r3, [pc, #40]	; (84e0 <prvAddCurrentTaskToDelayedList+0x94>)
    84b8:	681b      	ldr	r3, [r3, #0]
    84ba:	3304      	adds	r3, #4
    84bc:	0019      	movs	r1, r3
    84be:	0010      	movs	r0, r2
    84c0:	4b0c      	ldr	r3, [pc, #48]	; (84f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    84c2:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    84c4:	4b0d      	ldr	r3, [pc, #52]	; (84fc <prvAddCurrentTaskToDelayedList+0xb0>)
    84c6:	681b      	ldr	r3, [r3, #0]
    84c8:	68ba      	ldr	r2, [r7, #8]
    84ca:	429a      	cmp	r2, r3
    84cc:	d202      	bcs.n	84d4 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    84ce:	4b0b      	ldr	r3, [pc, #44]	; (84fc <prvAddCurrentTaskToDelayedList+0xb0>)
    84d0:	68ba      	ldr	r2, [r7, #8]
    84d2:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    84d4:	46c0      	nop			; (mov r8, r8)
    84d6:	46bd      	mov	sp, r7
    84d8:	b004      	add	sp, #16
    84da:	bd80      	pop	{r7, pc}
    84dc:	20003c84 	.word	0x20003c84
    84e0:	20003ba8 	.word	0x20003ba8
    84e4:	000069a1 	.word	0x000069a1
    84e8:	20003c6c 	.word	0x20003c6c
    84ec:	000068f1 	.word	0x000068f1
    84f0:	20003c3c 	.word	0x20003c3c
    84f4:	00006935 	.word	0x00006935
    84f8:	20003c38 	.word	0x20003c38
    84fc:	20003ca0 	.word	0x20003ca0

00008500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    8500:	b590      	push	{r4, r7, lr}
    8502:	b085      	sub	sp, #20
    8504:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    8506:	2300      	movs	r3, #0
    8508:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    850a:	4b0e      	ldr	r3, [pc, #56]	; (8544 <xTimerCreateTimerTask+0x44>)
    850c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    850e:	4b0e      	ldr	r3, [pc, #56]	; (8548 <xTimerCreateTimerTask+0x48>)
    8510:	681b      	ldr	r3, [r3, #0]
    8512:	2b00      	cmp	r3, #0
    8514:	d00b      	beq.n	852e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    8516:	490d      	ldr	r1, [pc, #52]	; (854c <xTimerCreateTimerTask+0x4c>)
    8518:	480d      	ldr	r0, [pc, #52]	; (8550 <xTimerCreateTimerTask+0x50>)
    851a:	4b0e      	ldr	r3, [pc, #56]	; (8554 <xTimerCreateTimerTask+0x54>)
    851c:	9301      	str	r3, [sp, #4]
    851e:	2302      	movs	r3, #2
    8520:	9300      	str	r3, [sp, #0]
    8522:	2300      	movs	r3, #0
    8524:	2250      	movs	r2, #80	; 0x50
    8526:	4c0c      	ldr	r4, [pc, #48]	; (8558 <xTimerCreateTimerTask+0x58>)
    8528:	47a0      	blx	r4
    852a:	0003      	movs	r3, r0
    852c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	2b00      	cmp	r3, #0
    8532:	d101      	bne.n	8538 <xTimerCreateTimerTask+0x38>
    8534:	b672      	cpsid	i
    8536:	e7fe      	b.n	8536 <xTimerCreateTimerTask+0x36>
	return xReturn;
    8538:	687b      	ldr	r3, [r7, #4]
}
    853a:	0018      	movs	r0, r3
    853c:	46bd      	mov	sp, r7
    853e:	b003      	add	sp, #12
    8540:	bd90      	pop	{r4, r7, pc}
    8542:	46c0      	nop			; (mov r8, r8)
    8544:	00008a41 	.word	0x00008a41
    8548:	20003cdc 	.word	0x20003cdc
    854c:	0000c564 	.word	0x0000c564
    8550:	00008681 	.word	0x00008681
    8554:	20003ce0 	.word	0x20003ce0
    8558:	00007701 	.word	0x00007701

0000855c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    855c:	b590      	push	{r4, r7, lr}
    855e:	b089      	sub	sp, #36	; 0x24
    8560:	af00      	add	r7, sp, #0
    8562:	60f8      	str	r0, [r7, #12]
    8564:	60b9      	str	r1, [r7, #8]
    8566:	607a      	str	r2, [r7, #4]
    8568:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    856a:	2300      	movs	r3, #0
    856c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    856e:	68fb      	ldr	r3, [r7, #12]
    8570:	2b00      	cmp	r3, #0
    8572:	d101      	bne.n	8578 <xTimerGenericCommand+0x1c>
    8574:	b672      	cpsid	i
    8576:	e7fe      	b.n	8576 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    8578:	4b1e      	ldr	r3, [pc, #120]	; (85f4 <xTimerGenericCommand+0x98>)
    857a:	681b      	ldr	r3, [r3, #0]
    857c:	2b00      	cmp	r3, #0
    857e:	d033      	beq.n	85e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    8580:	2310      	movs	r3, #16
    8582:	18fb      	adds	r3, r7, r3
    8584:	68ba      	ldr	r2, [r7, #8]
    8586:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    8588:	2310      	movs	r3, #16
    858a:	18fb      	adds	r3, r7, r3
    858c:	687a      	ldr	r2, [r7, #4]
    858e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    8590:	2310      	movs	r3, #16
    8592:	18fb      	adds	r3, r7, r3
    8594:	68fa      	ldr	r2, [r7, #12]
    8596:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    8598:	68bb      	ldr	r3, [r7, #8]
    859a:	2b05      	cmp	r3, #5
    859c:	dc1a      	bgt.n	85d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    859e:	4b16      	ldr	r3, [pc, #88]	; (85f8 <xTimerGenericCommand+0x9c>)
    85a0:	4798      	blx	r3
    85a2:	1e03      	subs	r3, r0, #0
    85a4:	2b02      	cmp	r3, #2
    85a6:	d10a      	bne.n	85be <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    85a8:	4b12      	ldr	r3, [pc, #72]	; (85f4 <xTimerGenericCommand+0x98>)
    85aa:	6818      	ldr	r0, [r3, #0]
    85ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    85ae:	2310      	movs	r3, #16
    85b0:	18f9      	adds	r1, r7, r3
    85b2:	2300      	movs	r3, #0
    85b4:	4c11      	ldr	r4, [pc, #68]	; (85fc <xTimerGenericCommand+0xa0>)
    85b6:	47a0      	blx	r4
    85b8:	0003      	movs	r3, r0
    85ba:	61fb      	str	r3, [r7, #28]
    85bc:	e014      	b.n	85e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    85be:	4b0d      	ldr	r3, [pc, #52]	; (85f4 <xTimerGenericCommand+0x98>)
    85c0:	6818      	ldr	r0, [r3, #0]
    85c2:	2310      	movs	r3, #16
    85c4:	18f9      	adds	r1, r7, r3
    85c6:	2300      	movs	r3, #0
    85c8:	2200      	movs	r2, #0
    85ca:	4c0c      	ldr	r4, [pc, #48]	; (85fc <xTimerGenericCommand+0xa0>)
    85cc:	47a0      	blx	r4
    85ce:	0003      	movs	r3, r0
    85d0:	61fb      	str	r3, [r7, #28]
    85d2:	e009      	b.n	85e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    85d4:	4b07      	ldr	r3, [pc, #28]	; (85f4 <xTimerGenericCommand+0x98>)
    85d6:	6818      	ldr	r0, [r3, #0]
    85d8:	683a      	ldr	r2, [r7, #0]
    85da:	2310      	movs	r3, #16
    85dc:	18f9      	adds	r1, r7, r3
    85de:	2300      	movs	r3, #0
    85e0:	4c07      	ldr	r4, [pc, #28]	; (8600 <xTimerGenericCommand+0xa4>)
    85e2:	47a0      	blx	r4
    85e4:	0003      	movs	r3, r0
    85e6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    85e8:	69fb      	ldr	r3, [r7, #28]
}
    85ea:	0018      	movs	r0, r3
    85ec:	46bd      	mov	sp, r7
    85ee:	b009      	add	sp, #36	; 0x24
    85f0:	bd90      	pop	{r4, r7, pc}
    85f2:	46c0      	nop			; (mov r8, r8)
    85f4:	20003cdc 	.word	0x20003cdc
    85f8:	0000826d 	.word	0x0000826d
    85fc:	00006e55 	.word	0x00006e55
    8600:	00007035 	.word	0x00007035

00008604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    8604:	b590      	push	{r4, r7, lr}
    8606:	b087      	sub	sp, #28
    8608:	af02      	add	r7, sp, #8
    860a:	6078      	str	r0, [r7, #4]
    860c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    860e:	4b18      	ldr	r3, [pc, #96]	; (8670 <prvProcessExpiredTimer+0x6c>)
    8610:	681b      	ldr	r3, [r3, #0]
    8612:	68db      	ldr	r3, [r3, #12]
    8614:	68db      	ldr	r3, [r3, #12]
    8616:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8618:	68fb      	ldr	r3, [r7, #12]
    861a:	3304      	adds	r3, #4
    861c:	0018      	movs	r0, r3
    861e:	4b15      	ldr	r3, [pc, #84]	; (8674 <prvProcessExpiredTimer+0x70>)
    8620:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8622:	68fb      	ldr	r3, [r7, #12]
    8624:	69db      	ldr	r3, [r3, #28]
    8626:	2b01      	cmp	r3, #1
    8628:	d119      	bne.n	865e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    862a:	68fb      	ldr	r3, [r7, #12]
    862c:	699a      	ldr	r2, [r3, #24]
    862e:	687b      	ldr	r3, [r7, #4]
    8630:	18d1      	adds	r1, r2, r3
    8632:	687b      	ldr	r3, [r7, #4]
    8634:	683a      	ldr	r2, [r7, #0]
    8636:	68f8      	ldr	r0, [r7, #12]
    8638:	4c0f      	ldr	r4, [pc, #60]	; (8678 <prvProcessExpiredTimer+0x74>)
    863a:	47a0      	blx	r4
    863c:	1e03      	subs	r3, r0, #0
    863e:	d00e      	beq.n	865e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8640:	687a      	ldr	r2, [r7, #4]
    8642:	68f8      	ldr	r0, [r7, #12]
    8644:	2300      	movs	r3, #0
    8646:	9300      	str	r3, [sp, #0]
    8648:	2300      	movs	r3, #0
    864a:	2100      	movs	r1, #0
    864c:	4c0b      	ldr	r4, [pc, #44]	; (867c <prvProcessExpiredTimer+0x78>)
    864e:	47a0      	blx	r4
    8650:	0003      	movs	r3, r0
    8652:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    8654:	68bb      	ldr	r3, [r7, #8]
    8656:	2b00      	cmp	r3, #0
    8658:	d101      	bne.n	865e <prvProcessExpiredTimer+0x5a>
    865a:	b672      	cpsid	i
    865c:	e7fe      	b.n	865c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    865e:	68fb      	ldr	r3, [r7, #12]
    8660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8662:	68fa      	ldr	r2, [r7, #12]
    8664:	0010      	movs	r0, r2
    8666:	4798      	blx	r3
}
    8668:	46c0      	nop			; (mov r8, r8)
    866a:	46bd      	mov	sp, r7
    866c:	b005      	add	sp, #20
    866e:	bd90      	pop	{r4, r7, pc}
    8670:	20003cd4 	.word	0x20003cd4
    8674:	000069a1 	.word	0x000069a1
    8678:	000087e1 	.word	0x000087e1
    867c:	0000855d 	.word	0x0000855d

00008680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    8680:	b580      	push	{r7, lr}
    8682:	b084      	sub	sp, #16
    8684:	af00      	add	r7, sp, #0
    8686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    8688:	2308      	movs	r3, #8
    868a:	18fb      	adds	r3, r7, r3
    868c:	0018      	movs	r0, r3
    868e:	4b06      	ldr	r3, [pc, #24]	; (86a8 <prvTimerTask+0x28>)
    8690:	4798      	blx	r3
    8692:	0003      	movs	r3, r0
    8694:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    8696:	68ba      	ldr	r2, [r7, #8]
    8698:	68fb      	ldr	r3, [r7, #12]
    869a:	0011      	movs	r1, r2
    869c:	0018      	movs	r0, r3
    869e:	4b03      	ldr	r3, [pc, #12]	; (86ac <prvTimerTask+0x2c>)
    86a0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    86a2:	4b03      	ldr	r3, [pc, #12]	; (86b0 <prvTimerTask+0x30>)
    86a4:	4798      	blx	r3
	}
    86a6:	e7ef      	b.n	8688 <prvTimerTask+0x8>
    86a8:	00008759 	.word	0x00008759
    86ac:	000086b5 	.word	0x000086b5
    86b0:	00008869 	.word	0x00008869

000086b4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    86b4:	b580      	push	{r7, lr}
    86b6:	b084      	sub	sp, #16
    86b8:	af00      	add	r7, sp, #0
    86ba:	6078      	str	r0, [r7, #4]
    86bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    86be:	4b1e      	ldr	r3, [pc, #120]	; (8738 <prvProcessTimerOrBlockTask+0x84>)
    86c0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    86c2:	2308      	movs	r3, #8
    86c4:	18fb      	adds	r3, r7, r3
    86c6:	0018      	movs	r0, r3
    86c8:	4b1c      	ldr	r3, [pc, #112]	; (873c <prvProcessTimerOrBlockTask+0x88>)
    86ca:	4798      	blx	r3
    86cc:	0003      	movs	r3, r0
    86ce:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    86d0:	68bb      	ldr	r3, [r7, #8]
    86d2:	2b00      	cmp	r3, #0
    86d4:	d129      	bne.n	872a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    86d6:	683b      	ldr	r3, [r7, #0]
    86d8:	2b00      	cmp	r3, #0
    86da:	d10c      	bne.n	86f6 <prvProcessTimerOrBlockTask+0x42>
    86dc:	687a      	ldr	r2, [r7, #4]
    86de:	68fb      	ldr	r3, [r7, #12]
    86e0:	429a      	cmp	r2, r3
    86e2:	d808      	bhi.n	86f6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    86e4:	4b16      	ldr	r3, [pc, #88]	; (8740 <prvProcessTimerOrBlockTask+0x8c>)
    86e6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    86e8:	68fa      	ldr	r2, [r7, #12]
    86ea:	687b      	ldr	r3, [r7, #4]
    86ec:	0011      	movs	r1, r2
    86ee:	0018      	movs	r0, r3
    86f0:	4b14      	ldr	r3, [pc, #80]	; (8744 <prvProcessTimerOrBlockTask+0x90>)
    86f2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    86f4:	e01b      	b.n	872e <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    86f6:	683b      	ldr	r3, [r7, #0]
    86f8:	2b00      	cmp	r3, #0
    86fa:	d006      	beq.n	870a <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    86fc:	4b12      	ldr	r3, [pc, #72]	; (8748 <prvProcessTimerOrBlockTask+0x94>)
    86fe:	681b      	ldr	r3, [r3, #0]
    8700:	681b      	ldr	r3, [r3, #0]
    8702:	425a      	negs	r2, r3
    8704:	4153      	adcs	r3, r2
    8706:	b2db      	uxtb	r3, r3
    8708:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    870a:	4b10      	ldr	r3, [pc, #64]	; (874c <prvProcessTimerOrBlockTask+0x98>)
    870c:	6818      	ldr	r0, [r3, #0]
    870e:	687a      	ldr	r2, [r7, #4]
    8710:	68fb      	ldr	r3, [r7, #12]
    8712:	1ad3      	subs	r3, r2, r3
    8714:	683a      	ldr	r2, [r7, #0]
    8716:	0019      	movs	r1, r3
    8718:	4b0d      	ldr	r3, [pc, #52]	; (8750 <prvProcessTimerOrBlockTask+0x9c>)
    871a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    871c:	4b08      	ldr	r3, [pc, #32]	; (8740 <prvProcessTimerOrBlockTask+0x8c>)
    871e:	4798      	blx	r3
    8720:	1e03      	subs	r3, r0, #0
    8722:	d104      	bne.n	872e <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    8724:	4b0b      	ldr	r3, [pc, #44]	; (8754 <prvProcessTimerOrBlockTask+0xa0>)
    8726:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    8728:	e001      	b.n	872e <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    872a:	4b05      	ldr	r3, [pc, #20]	; (8740 <prvProcessTimerOrBlockTask+0x8c>)
    872c:	4798      	blx	r3
		}
	}
}
    872e:	46c0      	nop			; (mov r8, r8)
    8730:	46bd      	mov	sp, r7
    8732:	b004      	add	sp, #16
    8734:	bd80      	pop	{r7, pc}
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	00007ac9 	.word	0x00007ac9
    873c:	00008799 	.word	0x00008799
    8740:	00007ae1 	.word	0x00007ae1
    8744:	00008605 	.word	0x00008605
    8748:	20003cd8 	.word	0x20003cd8
    874c:	20003cdc 	.word	0x20003cdc
    8750:	000075e5 	.word	0x000075e5
    8754:	00006af9 	.word	0x00006af9

00008758 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    8758:	b580      	push	{r7, lr}
    875a:	b084      	sub	sp, #16
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    8760:	4b0c      	ldr	r3, [pc, #48]	; (8794 <prvGetNextExpireTime+0x3c>)
    8762:	681b      	ldr	r3, [r3, #0]
    8764:	681b      	ldr	r3, [r3, #0]
    8766:	425a      	negs	r2, r3
    8768:	4153      	adcs	r3, r2
    876a:	b2db      	uxtb	r3, r3
    876c:	001a      	movs	r2, r3
    876e:	687b      	ldr	r3, [r7, #4]
    8770:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    8772:	687b      	ldr	r3, [r7, #4]
    8774:	681b      	ldr	r3, [r3, #0]
    8776:	2b00      	cmp	r3, #0
    8778:	d105      	bne.n	8786 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    877a:	4b06      	ldr	r3, [pc, #24]	; (8794 <prvGetNextExpireTime+0x3c>)
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	68db      	ldr	r3, [r3, #12]
    8780:	681b      	ldr	r3, [r3, #0]
    8782:	60fb      	str	r3, [r7, #12]
    8784:	e001      	b.n	878a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    8786:	2300      	movs	r3, #0
    8788:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    878a:	68fb      	ldr	r3, [r7, #12]
}
    878c:	0018      	movs	r0, r3
    878e:	46bd      	mov	sp, r7
    8790:	b004      	add	sp, #16
    8792:	bd80      	pop	{r7, pc}
    8794:	20003cd4 	.word	0x20003cd4

00008798 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    8798:	b580      	push	{r7, lr}
    879a:	b084      	sub	sp, #16
    879c:	af00      	add	r7, sp, #0
    879e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    87a0:	4b0c      	ldr	r3, [pc, #48]	; (87d4 <prvSampleTimeNow+0x3c>)
    87a2:	4798      	blx	r3
    87a4:	0003      	movs	r3, r0
    87a6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    87a8:	4b0b      	ldr	r3, [pc, #44]	; (87d8 <prvSampleTimeNow+0x40>)
    87aa:	681b      	ldr	r3, [r3, #0]
    87ac:	68fa      	ldr	r2, [r7, #12]
    87ae:	429a      	cmp	r2, r3
    87b0:	d205      	bcs.n	87be <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    87b2:	4b0a      	ldr	r3, [pc, #40]	; (87dc <prvSampleTimeNow+0x44>)
    87b4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    87b6:	687b      	ldr	r3, [r7, #4]
    87b8:	2201      	movs	r2, #1
    87ba:	601a      	str	r2, [r3, #0]
    87bc:	e002      	b.n	87c4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	2200      	movs	r2, #0
    87c2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    87c4:	4b04      	ldr	r3, [pc, #16]	; (87d8 <prvSampleTimeNow+0x40>)
    87c6:	68fa      	ldr	r2, [r7, #12]
    87c8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    87ca:	68fb      	ldr	r3, [r7, #12]
}
    87cc:	0018      	movs	r0, r3
    87ce:	46bd      	mov	sp, r7
    87d0:	b004      	add	sp, #16
    87d2:	bd80      	pop	{r7, pc}
    87d4:	00007c15 	.word	0x00007c15
    87d8:	20003ce4 	.word	0x20003ce4
    87dc:	00008981 	.word	0x00008981

000087e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    87e0:	b580      	push	{r7, lr}
    87e2:	b086      	sub	sp, #24
    87e4:	af00      	add	r7, sp, #0
    87e6:	60f8      	str	r0, [r7, #12]
    87e8:	60b9      	str	r1, [r7, #8]
    87ea:	607a      	str	r2, [r7, #4]
    87ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    87ee:	2300      	movs	r3, #0
    87f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    87f2:	68fb      	ldr	r3, [r7, #12]
    87f4:	68ba      	ldr	r2, [r7, #8]
    87f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    87f8:	68fb      	ldr	r3, [r7, #12]
    87fa:	68fa      	ldr	r2, [r7, #12]
    87fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    87fe:	68ba      	ldr	r2, [r7, #8]
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	429a      	cmp	r2, r3
    8804:	d812      	bhi.n	882c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8806:	687a      	ldr	r2, [r7, #4]
    8808:	683b      	ldr	r3, [r7, #0]
    880a:	1ad2      	subs	r2, r2, r3
    880c:	68fb      	ldr	r3, [r7, #12]
    880e:	699b      	ldr	r3, [r3, #24]
    8810:	429a      	cmp	r2, r3
    8812:	d302      	bcc.n	881a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    8814:	2301      	movs	r3, #1
    8816:	617b      	str	r3, [r7, #20]
    8818:	e01b      	b.n	8852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    881a:	4b10      	ldr	r3, [pc, #64]	; (885c <prvInsertTimerInActiveList+0x7c>)
    881c:	681a      	ldr	r2, [r3, #0]
    881e:	68fb      	ldr	r3, [r7, #12]
    8820:	3304      	adds	r3, #4
    8822:	0019      	movs	r1, r3
    8824:	0010      	movs	r0, r2
    8826:	4b0e      	ldr	r3, [pc, #56]	; (8860 <prvInsertTimerInActiveList+0x80>)
    8828:	4798      	blx	r3
    882a:	e012      	b.n	8852 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    882c:	687a      	ldr	r2, [r7, #4]
    882e:	683b      	ldr	r3, [r7, #0]
    8830:	429a      	cmp	r2, r3
    8832:	d206      	bcs.n	8842 <prvInsertTimerInActiveList+0x62>
    8834:	68ba      	ldr	r2, [r7, #8]
    8836:	683b      	ldr	r3, [r7, #0]
    8838:	429a      	cmp	r2, r3
    883a:	d302      	bcc.n	8842 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    883c:	2301      	movs	r3, #1
    883e:	617b      	str	r3, [r7, #20]
    8840:	e007      	b.n	8852 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8842:	4b08      	ldr	r3, [pc, #32]	; (8864 <prvInsertTimerInActiveList+0x84>)
    8844:	681a      	ldr	r2, [r3, #0]
    8846:	68fb      	ldr	r3, [r7, #12]
    8848:	3304      	adds	r3, #4
    884a:	0019      	movs	r1, r3
    884c:	0010      	movs	r0, r2
    884e:	4b04      	ldr	r3, [pc, #16]	; (8860 <prvInsertTimerInActiveList+0x80>)
    8850:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    8852:	697b      	ldr	r3, [r7, #20]
}
    8854:	0018      	movs	r0, r3
    8856:	46bd      	mov	sp, r7
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}
    885c:	20003cd8 	.word	0x20003cd8
    8860:	00006935 	.word	0x00006935
    8864:	20003cd4 	.word	0x20003cd4

00008868 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    8868:	b590      	push	{r4, r7, lr}
    886a:	b08b      	sub	sp, #44	; 0x2c
    886c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    886e:	e068      	b.n	8942 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    8870:	2308      	movs	r3, #8
    8872:	18fb      	adds	r3, r7, r3
    8874:	681b      	ldr	r3, [r3, #0]
    8876:	2b00      	cmp	r3, #0
    8878:	db63      	blt.n	8942 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    887a:	2308      	movs	r3, #8
    887c:	18fb      	adds	r3, r7, r3
    887e:	689b      	ldr	r3, [r3, #8]
    8880:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    8882:	69fb      	ldr	r3, [r7, #28]
    8884:	695b      	ldr	r3, [r3, #20]
    8886:	2b00      	cmp	r3, #0
    8888:	d004      	beq.n	8894 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    888a:	69fb      	ldr	r3, [r7, #28]
    888c:	3304      	adds	r3, #4
    888e:	0018      	movs	r0, r3
    8890:	4b33      	ldr	r3, [pc, #204]	; (8960 <prvProcessReceivedCommands+0xf8>)
    8892:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8894:	1d3b      	adds	r3, r7, #4
    8896:	0018      	movs	r0, r3
    8898:	4b32      	ldr	r3, [pc, #200]	; (8964 <prvProcessReceivedCommands+0xfc>)
    889a:	4798      	blx	r3
    889c:	0003      	movs	r3, r0
    889e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    88a0:	2308      	movs	r3, #8
    88a2:	18fb      	adds	r3, r7, r3
    88a4:	681b      	ldr	r3, [r3, #0]
    88a6:	2b09      	cmp	r3, #9
    88a8:	d84a      	bhi.n	8940 <prvProcessReceivedCommands+0xd8>
    88aa:	009a      	lsls	r2, r3, #2
    88ac:	4b2e      	ldr	r3, [pc, #184]	; (8968 <prvProcessReceivedCommands+0x100>)
    88ae:	18d3      	adds	r3, r2, r3
    88b0:	681b      	ldr	r3, [r3, #0]
    88b2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    88b4:	2308      	movs	r3, #8
    88b6:	18fb      	adds	r3, r7, r3
    88b8:	685a      	ldr	r2, [r3, #4]
    88ba:	69fb      	ldr	r3, [r7, #28]
    88bc:	699b      	ldr	r3, [r3, #24]
    88be:	18d1      	adds	r1, r2, r3
    88c0:	2308      	movs	r3, #8
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	685b      	ldr	r3, [r3, #4]
    88c6:	69ba      	ldr	r2, [r7, #24]
    88c8:	69f8      	ldr	r0, [r7, #28]
    88ca:	4c28      	ldr	r4, [pc, #160]	; (896c <prvProcessReceivedCommands+0x104>)
    88cc:	47a0      	blx	r4
    88ce:	1e03      	subs	r3, r0, #0
    88d0:	d037      	beq.n	8942 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    88d2:	69fb      	ldr	r3, [r7, #28]
    88d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    88d6:	69fa      	ldr	r2, [r7, #28]
    88d8:	0010      	movs	r0, r2
    88da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    88dc:	69fb      	ldr	r3, [r7, #28]
    88de:	69db      	ldr	r3, [r3, #28]
    88e0:	2b01      	cmp	r3, #1
    88e2:	d12e      	bne.n	8942 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    88e4:	2308      	movs	r3, #8
    88e6:	18fb      	adds	r3, r7, r3
    88e8:	685a      	ldr	r2, [r3, #4]
    88ea:	69fb      	ldr	r3, [r7, #28]
    88ec:	699b      	ldr	r3, [r3, #24]
    88ee:	18d2      	adds	r2, r2, r3
    88f0:	69f8      	ldr	r0, [r7, #28]
    88f2:	2300      	movs	r3, #0
    88f4:	9300      	str	r3, [sp, #0]
    88f6:	2300      	movs	r3, #0
    88f8:	2100      	movs	r1, #0
    88fa:	4c1d      	ldr	r4, [pc, #116]	; (8970 <prvProcessReceivedCommands+0x108>)
    88fc:	47a0      	blx	r4
    88fe:	0003      	movs	r3, r0
    8900:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    8902:	697b      	ldr	r3, [r7, #20]
    8904:	2b00      	cmp	r3, #0
    8906:	d11c      	bne.n	8942 <prvProcessReceivedCommands+0xda>
    8908:	b672      	cpsid	i
    890a:	e7fe      	b.n	890a <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    890c:	2308      	movs	r3, #8
    890e:	18fb      	adds	r3, r7, r3
    8910:	685a      	ldr	r2, [r3, #4]
    8912:	69fb      	ldr	r3, [r7, #28]
    8914:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    8916:	69fb      	ldr	r3, [r7, #28]
    8918:	699b      	ldr	r3, [r3, #24]
    891a:	2b00      	cmp	r3, #0
    891c:	d101      	bne.n	8922 <prvProcessReceivedCommands+0xba>
    891e:	b672      	cpsid	i
    8920:	e7fe      	b.n	8920 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    8922:	69fb      	ldr	r3, [r7, #28]
    8924:	699a      	ldr	r2, [r3, #24]
    8926:	69bb      	ldr	r3, [r7, #24]
    8928:	18d1      	adds	r1, r2, r3
    892a:	69bb      	ldr	r3, [r7, #24]
    892c:	69ba      	ldr	r2, [r7, #24]
    892e:	69f8      	ldr	r0, [r7, #28]
    8930:	4c0e      	ldr	r4, [pc, #56]	; (896c <prvProcessReceivedCommands+0x104>)
    8932:	47a0      	blx	r4
					break;
    8934:	e005      	b.n	8942 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    8936:	69fb      	ldr	r3, [r7, #28]
    8938:	0018      	movs	r0, r3
    893a:	4b0e      	ldr	r3, [pc, #56]	; (8974 <prvProcessReceivedCommands+0x10c>)
    893c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    893e:	e000      	b.n	8942 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    8940:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8942:	4b0d      	ldr	r3, [pc, #52]	; (8978 <prvProcessReceivedCommands+0x110>)
    8944:	6818      	ldr	r0, [r3, #0]
    8946:	2308      	movs	r3, #8
    8948:	18f9      	adds	r1, r7, r3
    894a:	2300      	movs	r3, #0
    894c:	2200      	movs	r2, #0
    894e:	4c0b      	ldr	r4, [pc, #44]	; (897c <prvProcessReceivedCommands+0x114>)
    8950:	47a0      	blx	r4
    8952:	1e03      	subs	r3, r0, #0
    8954:	d18c      	bne.n	8870 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    8956:	46c0      	nop			; (mov r8, r8)
    8958:	46bd      	mov	sp, r7
    895a:	b009      	add	sp, #36	; 0x24
    895c:	bd90      	pop	{r4, r7, pc}
    895e:	46c0      	nop			; (mov r8, r8)
    8960:	000069a1 	.word	0x000069a1
    8964:	00008799 	.word	0x00008799
    8968:	0000c56c 	.word	0x0000c56c
    896c:	000087e1 	.word	0x000087e1
    8970:	0000855d 	.word	0x0000855d
    8974:	00006cc1 	.word	0x00006cc1
    8978:	20003cdc 	.word	0x20003cdc
    897c:	00007155 	.word	0x00007155

00008980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    8980:	b590      	push	{r4, r7, lr}
    8982:	b089      	sub	sp, #36	; 0x24
    8984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8986:	e03e      	b.n	8a06 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8988:	4b28      	ldr	r3, [pc, #160]	; (8a2c <prvSwitchTimerLists+0xac>)
    898a:	681b      	ldr	r3, [r3, #0]
    898c:	68db      	ldr	r3, [r3, #12]
    898e:	681b      	ldr	r3, [r3, #0]
    8990:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    8992:	4b26      	ldr	r3, [pc, #152]	; (8a2c <prvSwitchTimerLists+0xac>)
    8994:	681b      	ldr	r3, [r3, #0]
    8996:	68db      	ldr	r3, [r3, #12]
    8998:	68db      	ldr	r3, [r3, #12]
    899a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    899c:	693b      	ldr	r3, [r7, #16]
    899e:	3304      	adds	r3, #4
    89a0:	0018      	movs	r0, r3
    89a2:	4b23      	ldr	r3, [pc, #140]	; (8a30 <prvSwitchTimerLists+0xb0>)
    89a4:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    89a6:	693b      	ldr	r3, [r7, #16]
    89a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89aa:	693a      	ldr	r2, [r7, #16]
    89ac:	0010      	movs	r0, r2
    89ae:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    89b0:	693b      	ldr	r3, [r7, #16]
    89b2:	69db      	ldr	r3, [r3, #28]
    89b4:	2b01      	cmp	r3, #1
    89b6:	d126      	bne.n	8a06 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    89b8:	693b      	ldr	r3, [r7, #16]
    89ba:	699a      	ldr	r2, [r3, #24]
    89bc:	697b      	ldr	r3, [r7, #20]
    89be:	18d3      	adds	r3, r2, r3
    89c0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    89c2:	68fa      	ldr	r2, [r7, #12]
    89c4:	697b      	ldr	r3, [r7, #20]
    89c6:	429a      	cmp	r2, r3
    89c8:	d90e      	bls.n	89e8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    89ca:	693b      	ldr	r3, [r7, #16]
    89cc:	68fa      	ldr	r2, [r7, #12]
    89ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    89d0:	693b      	ldr	r3, [r7, #16]
    89d2:	693a      	ldr	r2, [r7, #16]
    89d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    89d6:	4b15      	ldr	r3, [pc, #84]	; (8a2c <prvSwitchTimerLists+0xac>)
    89d8:	681a      	ldr	r2, [r3, #0]
    89da:	693b      	ldr	r3, [r7, #16]
    89dc:	3304      	adds	r3, #4
    89de:	0019      	movs	r1, r3
    89e0:	0010      	movs	r0, r2
    89e2:	4b14      	ldr	r3, [pc, #80]	; (8a34 <prvSwitchTimerLists+0xb4>)
    89e4:	4798      	blx	r3
    89e6:	e00e      	b.n	8a06 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    89e8:	697a      	ldr	r2, [r7, #20]
    89ea:	6938      	ldr	r0, [r7, #16]
    89ec:	2300      	movs	r3, #0
    89ee:	9300      	str	r3, [sp, #0]
    89f0:	2300      	movs	r3, #0
    89f2:	2100      	movs	r1, #0
    89f4:	4c10      	ldr	r4, [pc, #64]	; (8a38 <prvSwitchTimerLists+0xb8>)
    89f6:	47a0      	blx	r4
    89f8:	0003      	movs	r3, r0
    89fa:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    89fc:	68bb      	ldr	r3, [r7, #8]
    89fe:	2b00      	cmp	r3, #0
    8a00:	d101      	bne.n	8a06 <prvSwitchTimerLists+0x86>
    8a02:	b672      	cpsid	i
    8a04:	e7fe      	b.n	8a04 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8a06:	4b09      	ldr	r3, [pc, #36]	; (8a2c <prvSwitchTimerLists+0xac>)
    8a08:	681b      	ldr	r3, [r3, #0]
    8a0a:	681b      	ldr	r3, [r3, #0]
    8a0c:	2b00      	cmp	r3, #0
    8a0e:	d1bb      	bne.n	8988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    8a10:	4b06      	ldr	r3, [pc, #24]	; (8a2c <prvSwitchTimerLists+0xac>)
    8a12:	681b      	ldr	r3, [r3, #0]
    8a14:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    8a16:	4b09      	ldr	r3, [pc, #36]	; (8a3c <prvSwitchTimerLists+0xbc>)
    8a18:	681a      	ldr	r2, [r3, #0]
    8a1a:	4b04      	ldr	r3, [pc, #16]	; (8a2c <prvSwitchTimerLists+0xac>)
    8a1c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    8a1e:	4b07      	ldr	r3, [pc, #28]	; (8a3c <prvSwitchTimerLists+0xbc>)
    8a20:	687a      	ldr	r2, [r7, #4]
    8a22:	601a      	str	r2, [r3, #0]
}
    8a24:	46c0      	nop			; (mov r8, r8)
    8a26:	46bd      	mov	sp, r7
    8a28:	b007      	add	sp, #28
    8a2a:	bd90      	pop	{r4, r7, pc}
    8a2c:	20003cd4 	.word	0x20003cd4
    8a30:	000069a1 	.word	0x000069a1
    8a34:	00006935 	.word	0x00006935
    8a38:	0000855d 	.word	0x0000855d
    8a3c:	20003cd8 	.word	0x20003cd8

00008a40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    8a40:	b580      	push	{r7, lr}
    8a42:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    8a44:	4b10      	ldr	r3, [pc, #64]	; (8a88 <prvCheckForValidListAndQueue+0x48>)
    8a46:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    8a48:	4b10      	ldr	r3, [pc, #64]	; (8a8c <prvCheckForValidListAndQueue+0x4c>)
    8a4a:	681b      	ldr	r3, [r3, #0]
    8a4c:	2b00      	cmp	r3, #0
    8a4e:	d115      	bne.n	8a7c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    8a50:	4b0f      	ldr	r3, [pc, #60]	; (8a90 <prvCheckForValidListAndQueue+0x50>)
    8a52:	0018      	movs	r0, r3
    8a54:	4b0f      	ldr	r3, [pc, #60]	; (8a94 <prvCheckForValidListAndQueue+0x54>)
    8a56:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    8a58:	4b0f      	ldr	r3, [pc, #60]	; (8a98 <prvCheckForValidListAndQueue+0x58>)
    8a5a:	0018      	movs	r0, r3
    8a5c:	4b0d      	ldr	r3, [pc, #52]	; (8a94 <prvCheckForValidListAndQueue+0x54>)
    8a5e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    8a60:	4b0e      	ldr	r3, [pc, #56]	; (8a9c <prvCheckForValidListAndQueue+0x5c>)
    8a62:	4a0b      	ldr	r2, [pc, #44]	; (8a90 <prvCheckForValidListAndQueue+0x50>)
    8a64:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    8a66:	4b0e      	ldr	r3, [pc, #56]	; (8aa0 <prvCheckForValidListAndQueue+0x60>)
    8a68:	4a0b      	ldr	r2, [pc, #44]	; (8a98 <prvCheckForValidListAndQueue+0x58>)
    8a6a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    8a6c:	2200      	movs	r2, #0
    8a6e:	210c      	movs	r1, #12
    8a70:	2002      	movs	r0, #2
    8a72:	4b0c      	ldr	r3, [pc, #48]	; (8aa4 <prvCheckForValidListAndQueue+0x64>)
    8a74:	4798      	blx	r3
    8a76:	0002      	movs	r2, r0
    8a78:	4b04      	ldr	r3, [pc, #16]	; (8a8c <prvCheckForValidListAndQueue+0x4c>)
    8a7a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8a7c:	4b0a      	ldr	r3, [pc, #40]	; (8aa8 <prvCheckForValidListAndQueue+0x68>)
    8a7e:	4798      	blx	r3
}
    8a80:	46c0      	nop			; (mov r8, r8)
    8a82:	46bd      	mov	sp, r7
    8a84:	bd80      	pop	{r7, pc}
    8a86:	46c0      	nop			; (mov r8, r8)
    8a88:	00006b19 	.word	0x00006b19
    8a8c:	20003cdc 	.word	0x20003cdc
    8a90:	20003cac 	.word	0x20003cac
    8a94:	0000689d 	.word	0x0000689d
    8a98:	20003cc0 	.word	0x20003cc0
    8a9c:	20003cd4 	.word	0x20003cd4
    8aa0:	20003cd8 	.word	0x20003cd8
    8aa4:	00006d99 	.word	0x00006d99
    8aa8:	00006b3d 	.word	0x00006b3d

00008aac <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8aac:	b580      	push	{r7, lr}
    8aae:	b084      	sub	sp, #16
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	0002      	movs	r2, r0
    8ab4:	1dfb      	adds	r3, r7, #7
    8ab6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8ab8:	230f      	movs	r3, #15
    8aba:	18fb      	adds	r3, r7, r3
    8abc:	1dfa      	adds	r2, r7, #7
    8abe:	7812      	ldrb	r2, [r2, #0]
    8ac0:	09d2      	lsrs	r2, r2, #7
    8ac2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8ac4:	230e      	movs	r3, #14
    8ac6:	18fb      	adds	r3, r7, r3
    8ac8:	1dfa      	adds	r2, r7, #7
    8aca:	7812      	ldrb	r2, [r2, #0]
    8acc:	0952      	lsrs	r2, r2, #5
    8ace:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8ad0:	4b0d      	ldr	r3, [pc, #52]	; (8b08 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8ad2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8ad4:	230f      	movs	r3, #15
    8ad6:	18fb      	adds	r3, r7, r3
    8ad8:	781b      	ldrb	r3, [r3, #0]
    8ada:	2b00      	cmp	r3, #0
    8adc:	d10f      	bne.n	8afe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8ade:	230f      	movs	r3, #15
    8ae0:	18fb      	adds	r3, r7, r3
    8ae2:	781b      	ldrb	r3, [r3, #0]
    8ae4:	009b      	lsls	r3, r3, #2
    8ae6:	2210      	movs	r2, #16
    8ae8:	4694      	mov	ip, r2
    8aea:	44bc      	add	ip, r7
    8aec:	4463      	add	r3, ip
    8aee:	3b08      	subs	r3, #8
    8af0:	681a      	ldr	r2, [r3, #0]
    8af2:	230e      	movs	r3, #14
    8af4:	18fb      	adds	r3, r7, r3
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	01db      	lsls	r3, r3, #7
    8afa:	18d3      	adds	r3, r2, r3
    8afc:	e000      	b.n	8b00 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8afe:	2300      	movs	r3, #0
	}
}
    8b00:	0018      	movs	r0, r3
    8b02:	46bd      	mov	sp, r7
    8b04:	b004      	add	sp, #16
    8b06:	bd80      	pop	{r7, pc}
    8b08:	41004400 	.word	0x41004400

00008b0c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    8b0c:	b580      	push	{r7, lr}
    8b0e:	b084      	sub	sp, #16
    8b10:	af00      	add	r7, sp, #0
    8b12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    8b14:	687b      	ldr	r3, [r7, #4]
    8b16:	681b      	ldr	r3, [r3, #0]
    8b18:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    8b1a:	68fb      	ldr	r3, [r7, #12]
    8b1c:	7e5b      	ldrb	r3, [r3, #25]
    8b1e:	b2db      	uxtb	r3, r3
    8b20:	b25b      	sxtb	r3, r3
    8b22:	2b00      	cmp	r3, #0
    8b24:	da01      	bge.n	8b2a <adc_is_syncing+0x1e>
		return true;
    8b26:	2301      	movs	r3, #1
    8b28:	e000      	b.n	8b2c <adc_is_syncing+0x20>
	}

	return false;
    8b2a:	2300      	movs	r3, #0
}
    8b2c:	0018      	movs	r0, r3
    8b2e:	46bd      	mov	sp, r7
    8b30:	b004      	add	sp, #16
    8b32:	bd80      	pop	{r7, pc}

00008b34 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    8b34:	b580      	push	{r7, lr}
    8b36:	b086      	sub	sp, #24
    8b38:	af00      	add	r7, sp, #0
    8b3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8b3c:	687b      	ldr	r3, [r7, #4]
    8b3e:	681b      	ldr	r3, [r3, #0]
    8b40:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    8b42:	693b      	ldr	r3, [r7, #16]
    8b44:	7e1b      	ldrb	r3, [r3, #24]
    8b46:	b2db      	uxtb	r3, r3
    8b48:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    8b4a:	2300      	movs	r3, #0
    8b4c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    8b4e:	68fb      	ldr	r3, [r7, #12]
    8b50:	2201      	movs	r2, #1
    8b52:	4013      	ands	r3, r2
    8b54:	d003      	beq.n	8b5e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    8b56:	697b      	ldr	r3, [r7, #20]
    8b58:	2201      	movs	r2, #1
    8b5a:	4313      	orrs	r3, r2
    8b5c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    8b5e:	68fb      	ldr	r3, [r7, #12]
    8b60:	2204      	movs	r2, #4
    8b62:	4013      	ands	r3, r2
    8b64:	d003      	beq.n	8b6e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    8b66:	697b      	ldr	r3, [r7, #20]
    8b68:	2202      	movs	r2, #2
    8b6a:	4313      	orrs	r3, r2
    8b6c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    8b6e:	68fb      	ldr	r3, [r7, #12]
    8b70:	2202      	movs	r2, #2
    8b72:	4013      	ands	r3, r2
    8b74:	d003      	beq.n	8b7e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    8b76:	697b      	ldr	r3, [r7, #20]
    8b78:	2204      	movs	r2, #4
    8b7a:	4313      	orrs	r3, r2
    8b7c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    8b7e:	697b      	ldr	r3, [r7, #20]
}
    8b80:	0018      	movs	r0, r3
    8b82:	46bd      	mov	sp, r7
    8b84:	b006      	add	sp, #24
    8b86:	bd80      	pop	{r7, pc}

00008b88 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    8b88:	b580      	push	{r7, lr}
    8b8a:	b084      	sub	sp, #16
    8b8c:	af00      	add	r7, sp, #0
    8b8e:	6078      	str	r0, [r7, #4]
    8b90:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    8b98:	2300      	movs	r3, #0
    8b9a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    8b9c:	683b      	ldr	r3, [r7, #0]
    8b9e:	2201      	movs	r2, #1
    8ba0:	4013      	ands	r3, r2
    8ba2:	d003      	beq.n	8bac <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    8ba4:	68fb      	ldr	r3, [r7, #12]
    8ba6:	2201      	movs	r2, #1
    8ba8:	4313      	orrs	r3, r2
    8baa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    8bac:	683b      	ldr	r3, [r7, #0]
    8bae:	2202      	movs	r2, #2
    8bb0:	4013      	ands	r3, r2
    8bb2:	d003      	beq.n	8bbc <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    8bb4:	68fb      	ldr	r3, [r7, #12]
    8bb6:	2204      	movs	r2, #4
    8bb8:	4313      	orrs	r3, r2
    8bba:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    8bbc:	683b      	ldr	r3, [r7, #0]
    8bbe:	2204      	movs	r2, #4
    8bc0:	4013      	ands	r3, r2
    8bc2:	d003      	beq.n	8bcc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    8bc4:	68fb      	ldr	r3, [r7, #12]
    8bc6:	2202      	movs	r2, #2
    8bc8:	4313      	orrs	r3, r2
    8bca:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    8bcc:	68fb      	ldr	r3, [r7, #12]
    8bce:	b2da      	uxtb	r2, r3
    8bd0:	68bb      	ldr	r3, [r7, #8]
    8bd2:	761a      	strb	r2, [r3, #24]
}
    8bd4:	46c0      	nop			; (mov r8, r8)
    8bd6:	46bd      	mov	sp, r7
    8bd8:	b004      	add	sp, #16
    8bda:	bd80      	pop	{r7, pc}

00008bdc <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    8bdc:	b580      	push	{r7, lr}
    8bde:	b084      	sub	sp, #16
    8be0:	af00      	add	r7, sp, #0
    8be2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	681b      	ldr	r3, [r3, #0]
    8be8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	687b      	ldr	r3, [r7, #4]
    8bee:	0018      	movs	r0, r3
    8bf0:	4b0b      	ldr	r3, [pc, #44]	; (8c20 <adc_start_conversion+0x44>)
    8bf2:	4798      	blx	r3
    8bf4:	1e03      	subs	r3, r0, #0
    8bf6:	d1f9      	bne.n	8bec <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    8bf8:	68fb      	ldr	r3, [r7, #12]
    8bfa:	7b1b      	ldrb	r3, [r3, #12]
    8bfc:	b2db      	uxtb	r3, r3
    8bfe:	2202      	movs	r2, #2
    8c00:	4313      	orrs	r3, r2
    8c02:	b2da      	uxtb	r2, r3
    8c04:	68fb      	ldr	r3, [r7, #12]
    8c06:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    8c08:	46c0      	nop			; (mov r8, r8)
    8c0a:	687b      	ldr	r3, [r7, #4]
    8c0c:	0018      	movs	r0, r3
    8c0e:	4b04      	ldr	r3, [pc, #16]	; (8c20 <adc_start_conversion+0x44>)
    8c10:	4798      	blx	r3
    8c12:	1e03      	subs	r3, r0, #0
    8c14:	d1f9      	bne.n	8c0a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    8c16:	46c0      	nop			; (mov r8, r8)
    8c18:	46bd      	mov	sp, r7
    8c1a:	b004      	add	sp, #16
    8c1c:	bd80      	pop	{r7, pc}
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	00008b0d 	.word	0x00008b0d

00008c24 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    8c24:	b580      	push	{r7, lr}
    8c26:	b084      	sub	sp, #16
    8c28:	af00      	add	r7, sp, #0
    8c2a:	6078      	str	r0, [r7, #4]
    8c2c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    8c2e:	687b      	ldr	r3, [r7, #4]
    8c30:	0018      	movs	r0, r3
    8c32:	4b18      	ldr	r3, [pc, #96]	; (8c94 <adc_read+0x70>)
    8c34:	4798      	blx	r3
    8c36:	0002      	movs	r2, r0
    8c38:	2301      	movs	r3, #1
    8c3a:	4013      	ands	r3, r2
    8c3c:	d101      	bne.n	8c42 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    8c3e:	2305      	movs	r3, #5
    8c40:	e023      	b.n	8c8a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	681b      	ldr	r3, [r3, #0]
    8c46:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    8c48:	46c0      	nop			; (mov r8, r8)
    8c4a:	687b      	ldr	r3, [r7, #4]
    8c4c:	0018      	movs	r0, r3
    8c4e:	4b12      	ldr	r3, [pc, #72]	; (8c98 <adc_read+0x74>)
    8c50:	4798      	blx	r3
    8c52:	1e03      	subs	r3, r0, #0
    8c54:	d1f9      	bne.n	8c4a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    8c56:	68fb      	ldr	r3, [r7, #12]
    8c58:	8b5b      	ldrh	r3, [r3, #26]
    8c5a:	b29a      	uxth	r2, r3
    8c5c:	683b      	ldr	r3, [r7, #0]
    8c5e:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	2101      	movs	r1, #1
    8c64:	0018      	movs	r0, r3
    8c66:	4b0d      	ldr	r3, [pc, #52]	; (8c9c <adc_read+0x78>)
    8c68:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	0018      	movs	r0, r3
    8c6e:	4b09      	ldr	r3, [pc, #36]	; (8c94 <adc_read+0x70>)
    8c70:	4798      	blx	r3
    8c72:	0002      	movs	r2, r0
    8c74:	2304      	movs	r3, #4
    8c76:	4013      	ands	r3, r2
    8c78:	d006      	beq.n	8c88 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	2104      	movs	r1, #4
    8c7e:	0018      	movs	r0, r3
    8c80:	4b06      	ldr	r3, [pc, #24]	; (8c9c <adc_read+0x78>)
    8c82:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    8c84:	231e      	movs	r3, #30
    8c86:	e000      	b.n	8c8a <adc_read+0x66>
	}

	return STATUS_OK;
    8c88:	2300      	movs	r3, #0
}
    8c8a:	0018      	movs	r0, r3
    8c8c:	46bd      	mov	sp, r7
    8c8e:	b004      	add	sp, #16
    8c90:	bd80      	pop	{r7, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	00008b35 	.word	0x00008b35
    8c98:	00008b0d 	.word	0x00008b0d
    8c9c:	00008b89 	.word	0x00008b89

00008ca0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8ca0:	b580      	push	{r7, lr}
    8ca2:	b082      	sub	sp, #8
    8ca4:	af00      	add	r7, sp, #0
    8ca6:	0002      	movs	r2, r0
    8ca8:	1dfb      	adds	r3, r7, #7
    8caa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    8cac:	1dfb      	adds	r3, r7, #7
    8cae:	781b      	ldrb	r3, [r3, #0]
    8cb0:	0018      	movs	r0, r3
    8cb2:	4b03      	ldr	r3, [pc, #12]	; (8cc0 <port_get_group_from_gpio_pin+0x20>)
    8cb4:	4798      	blx	r3
    8cb6:	0003      	movs	r3, r0
}
    8cb8:	0018      	movs	r0, r3
    8cba:	46bd      	mov	sp, r7
    8cbc:	b002      	add	sp, #8
    8cbe:	bd80      	pop	{r7, pc}
    8cc0:	00008aad 	.word	0x00008aad

00008cc4 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    8cc4:	b580      	push	{r7, lr}
    8cc6:	b084      	sub	sp, #16
    8cc8:	af00      	add	r7, sp, #0
    8cca:	0002      	movs	r2, r0
    8ccc:	1dfb      	adds	r3, r7, #7
    8cce:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8cd0:	1dfb      	adds	r3, r7, #7
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	0018      	movs	r0, r3
    8cd6:	4b0b      	ldr	r3, [pc, #44]	; (8d04 <port_pin_get_output_level+0x40>)
    8cd8:	4798      	blx	r3
    8cda:	0003      	movs	r3, r0
    8cdc:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8cde:	1dfb      	adds	r3, r7, #7
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	221f      	movs	r2, #31
    8ce4:	4013      	ands	r3, r2
    8ce6:	2201      	movs	r2, #1
    8ce8:	409a      	lsls	r2, r3
    8cea:	0013      	movs	r3, r2
    8cec:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    8cee:	68fb      	ldr	r3, [r7, #12]
    8cf0:	691b      	ldr	r3, [r3, #16]
    8cf2:	68ba      	ldr	r2, [r7, #8]
    8cf4:	4013      	ands	r3, r2
    8cf6:	1e5a      	subs	r2, r3, #1
    8cf8:	4193      	sbcs	r3, r2
    8cfa:	b2db      	uxtb	r3, r3
}
    8cfc:	0018      	movs	r0, r3
    8cfe:	46bd      	mov	sp, r7
    8d00:	b004      	add	sp, #16
    8d02:	bd80      	pop	{r7, pc}
    8d04:	00008ca1 	.word	0x00008ca1

00008d08 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8d08:	b580      	push	{r7, lr}
    8d0a:	b084      	sub	sp, #16
    8d0c:	af00      	add	r7, sp, #0
    8d0e:	0002      	movs	r2, r0
    8d10:	1dfb      	adds	r3, r7, #7
    8d12:	701a      	strb	r2, [r3, #0]
    8d14:	1dbb      	adds	r3, r7, #6
    8d16:	1c0a      	adds	r2, r1, #0
    8d18:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8d1a:	1dfb      	adds	r3, r7, #7
    8d1c:	781b      	ldrb	r3, [r3, #0]
    8d1e:	0018      	movs	r0, r3
    8d20:	4b0d      	ldr	r3, [pc, #52]	; (8d58 <port_pin_set_output_level+0x50>)
    8d22:	4798      	blx	r3
    8d24:	0003      	movs	r3, r0
    8d26:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8d28:	1dfb      	adds	r3, r7, #7
    8d2a:	781b      	ldrb	r3, [r3, #0]
    8d2c:	221f      	movs	r2, #31
    8d2e:	4013      	ands	r3, r2
    8d30:	2201      	movs	r2, #1
    8d32:	409a      	lsls	r2, r3
    8d34:	0013      	movs	r3, r2
    8d36:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8d38:	1dbb      	adds	r3, r7, #6
    8d3a:	781b      	ldrb	r3, [r3, #0]
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d003      	beq.n	8d48 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8d40:	68fb      	ldr	r3, [r7, #12]
    8d42:	68ba      	ldr	r2, [r7, #8]
    8d44:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8d46:	e002      	b.n	8d4e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8d48:	68fb      	ldr	r3, [r7, #12]
    8d4a:	68ba      	ldr	r2, [r7, #8]
    8d4c:	615a      	str	r2, [r3, #20]
	}
}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	46bd      	mov	sp, r7
    8d52:	b004      	add	sp, #16
    8d54:	bd80      	pop	{r7, pc}
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	00008ca1 	.word	0x00008ca1

00008d5c <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    8d5c:	b590      	push	{r4, r7, lr}
    8d5e:	b087      	sub	sp, #28
    8d60:	af02      	add	r7, sp, #8
    8d62:	0002      	movs	r2, r0
    8d64:	6039      	str	r1, [r7, #0]
    8d66:	1dfb      	adds	r3, r7, #7
    8d68:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    8d6a:	1dfb      	adds	r3, r7, #7
    8d6c:	781b      	ldrb	r3, [r3, #0]
    8d6e:	2b2c      	cmp	r3, #44	; 0x2c
    8d70:	d002      	beq.n	8d78 <m2m_wifi_state+0x1c>
    8d72:	2b32      	cmp	r3, #50	; 0x32
    8d74:	d025      	beq.n	8dc2 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    8d76:	e042      	b.n	8dfe <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    8d78:	683b      	ldr	r3, [r7, #0]
    8d7a:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    8d7c:	68fb      	ldr	r3, [r7, #12]
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	2b01      	cmp	r3, #1
    8d82:	d104      	bne.n	8d8e <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    8d84:	4b20      	ldr	r3, [pc, #128]	; (8e08 <m2m_wifi_state+0xac>)
    8d86:	0018      	movs	r0, r3
    8d88:	4b20      	ldr	r3, [pc, #128]	; (8e0c <m2m_wifi_state+0xb0>)
    8d8a:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    8d8c:	e036      	b.n	8dfc <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    8d8e:	68fb      	ldr	r3, [r7, #12]
    8d90:	781b      	ldrb	r3, [r3, #0]
    8d92:	2b00      	cmp	r3, #0
    8d94:	d132      	bne.n	8dfc <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    8d96:	4b1e      	ldr	r3, [pc, #120]	; (8e10 <m2m_wifi_state+0xb4>)
    8d98:	0018      	movs	r0, r3
    8d9a:	4b1c      	ldr	r3, [pc, #112]	; (8e0c <m2m_wifi_state+0xb0>)
    8d9c:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    8d9e:	4b1d      	ldr	r3, [pc, #116]	; (8e14 <m2m_wifi_state+0xb8>)
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	b2db      	uxtb	r3, r3
    8da4:	2b03      	cmp	r3, #3
    8da6:	d129      	bne.n	8dfc <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    8da8:	4b1a      	ldr	r3, [pc, #104]	; (8e14 <m2m_wifi_state+0xb8>)
    8daa:	2204      	movs	r2, #4
    8dac:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    8dae:	4a1a      	ldr	r2, [pc, #104]	; (8e18 <m2m_wifi_state+0xbc>)
    8db0:	481a      	ldr	r0, [pc, #104]	; (8e1c <m2m_wifi_state+0xc0>)
    8db2:	23ff      	movs	r3, #255	; 0xff
    8db4:	9300      	str	r3, [sp, #0]
    8db6:	0013      	movs	r3, r2
    8db8:	2202      	movs	r2, #2
    8dba:	211b      	movs	r1, #27
    8dbc:	4c18      	ldr	r4, [pc, #96]	; (8e20 <m2m_wifi_state+0xc4>)
    8dbe:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    8dc0:	e01c      	b.n	8dfc <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    8dc2:	683b      	ldr	r3, [r7, #0]
    8dc4:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    8dc6:	4b17      	ldr	r3, [pc, #92]	; (8e24 <m2m_wifi_state+0xc8>)
    8dc8:	681a      	ldr	r2, [r3, #0]
    8dca:	4b17      	ldr	r3, [pc, #92]	; (8e28 <m2m_wifi_state+0xcc>)
    8dcc:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8dce:	68bb      	ldr	r3, [r7, #8]
    8dd0:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    8dd2:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8dd4:	68bb      	ldr	r3, [r7, #8]
    8dd6:	3301      	adds	r3, #1
    8dd8:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    8dda:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8ddc:	68bb      	ldr	r3, [r7, #8]
    8dde:	3302      	adds	r3, #2
    8de0:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    8de2:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    8de4:	68bb      	ldr	r3, [r7, #8]
    8de6:	3303      	adds	r3, #3
    8de8:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    8dea:	4810      	ldr	r0, [pc, #64]	; (8e2c <m2m_wifi_state+0xd0>)
    8dec:	9300      	str	r3, [sp, #0]
    8dee:	0023      	movs	r3, r4
    8df0:	4c0f      	ldr	r4, [pc, #60]	; (8e30 <m2m_wifi_state+0xd4>)
    8df2:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    8df4:	4b07      	ldr	r3, [pc, #28]	; (8e14 <m2m_wifi_state+0xb8>)
    8df6:	2203      	movs	r2, #3
    8df8:	701a      	strb	r2, [r3, #0]

		break;
    8dfa:	e000      	b.n	8dfe <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    8dfc:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    8dfe:	46c0      	nop			; (mov r8, r8)
    8e00:	46bd      	mov	sp, r7
    8e02:	b005      	add	sp, #20
    8e04:	bd90      	pop	{r4, r7, pc}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	0000c5cc 	.word	0x0000c5cc
    8e0c:	0000a931 	.word	0x0000a931
    8e10:	0000c608 	.word	0x0000c608
    8e14:	20003ce8 	.word	0x20003ce8
    8e18:	0000c648 	.word	0x0000c648
    8e1c:	0000c654 	.word	0x0000c654
    8e20:	0000143d 	.word	0x0000143d
    8e24:	20003cec 	.word	0x20003cec
    8e28:	20003cfc 	.word	0x20003cfc
    8e2c:	0000c670 	.word	0x0000c670
    8e30:	0000a811 	.word	0x0000a811

00008e34 <task_3s>:
	adc_enable(&adc_instance);
}


static void task_3s(void *args)
{
    8e34:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e36:	b0cd      	sub	sp, #308	; 0x134
    8e38:	af04      	add	r7, sp, #16
    8e3a:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    8e3c:	2300      	movs	r3, #0
    8e3e:	2400      	movs	r4, #0
    8e40:	228c      	movs	r2, #140	; 0x8c
    8e42:	0052      	lsls	r2, r2, #1
    8e44:	18ba      	adds	r2, r7, r2
    8e46:	6013      	str	r3, [r2, #0]
    8e48:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    8e4a:	2389      	movs	r3, #137	; 0x89
    8e4c:	005b      	lsls	r3, r3, #1
    8e4e:	18fb      	adds	r3, r7, r3
    8e50:	2200      	movs	r2, #0
    8e52:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    8e54:	4b50      	ldr	r3, [pc, #320]	; (8f98 <task_3s+0x164>)
    8e56:	2290      	movs	r2, #144	; 0x90
    8e58:	0052      	lsls	r2, r2, #1
    8e5a:	4694      	mov	ip, r2
    8e5c:	44bc      	add	ip, r7
    8e5e:	4463      	add	r3, ip
    8e60:	0018      	movs	r0, r3
    8e62:	2380      	movs	r3, #128	; 0x80
    8e64:	005b      	lsls	r3, r3, #1
    8e66:	001a      	movs	r2, r3
    8e68:	2100      	movs	r1, #0
    8e6a:	4b4c      	ldr	r3, [pc, #304]	; (8f9c <task_3s+0x168>)
    8e6c:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    8e6e:	4b4c      	ldr	r3, [pc, #304]	; (8fa0 <task_3s+0x16c>)
    8e70:	228a      	movs	r2, #138	; 0x8a
    8e72:	0052      	lsls	r2, r2, #1
    8e74:	18ba      	adds	r2, r7, r2
    8e76:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    8e78:	4b4a      	ldr	r3, [pc, #296]	; (8fa4 <task_3s+0x170>)
    8e7a:	4798      	blx	r3
    8e7c:	0003      	movs	r3, r0
    8e7e:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);
    8e80:	238a      	movs	r3, #138	; 0x8a
    8e82:	005b      	lsls	r3, r3, #1
    8e84:	18fb      	adds	r3, r7, r3
    8e86:	681a      	ldr	r2, [r3, #0]
    8e88:	230c      	movs	r3, #12
    8e8a:	18fb      	adds	r3, r7, r3
    8e8c:	0011      	movs	r1, r2
    8e8e:	0018      	movs	r0, r3
    8e90:	4b45      	ldr	r3, [pc, #276]	; (8fa8 <task_3s+0x174>)
    8e92:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    8e94:	4b45      	ldr	r3, [pc, #276]	; (8fac <task_3s+0x178>)
    8e96:	781b      	ldrb	r3, [r3, #0]
    8e98:	b2db      	uxtb	r3, r3
    8e9a:	2b03      	cmp	r3, #3
    8e9c:	d1f0      	bne.n	8e80 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    8e9e:	4b44      	ldr	r3, [pc, #272]	; (8fb0 <task_3s+0x17c>)
    8ea0:	681a      	ldr	r2, [r3, #0]
    8ea2:	4b44      	ldr	r3, [pc, #272]	; (8fb4 <task_3s+0x180>)
    8ea4:	601a      	str	r2, [r3, #0]
            adc_start_conversion(&adc_instance);
    8ea6:	4b44      	ldr	r3, [pc, #272]	; (8fb8 <task_3s+0x184>)
    8ea8:	0018      	movs	r0, r3
    8eaa:	4b44      	ldr	r3, [pc, #272]	; (8fbc <task_3s+0x188>)
    8eac:	4798      	blx	r3
            temperature = at30tse_read_temperature();
    8eae:	4b44      	ldr	r3, [pc, #272]	; (8fc0 <task_3s+0x18c>)
    8eb0:	4798      	blx	r3
    8eb2:	0003      	movs	r3, r0
    8eb4:	000c      	movs	r4, r1
    8eb6:	228c      	movs	r2, #140	; 0x8c
    8eb8:	0052      	lsls	r2, r2, #1
    8eba:	18ba      	adds	r2, r7, r2
    8ebc:	6013      	str	r3, [r2, #0]
    8ebe:	6054      	str	r4, [r2, #4]
            //temperature = 0;
            adc_read(&adc_instance, &light);
    8ec0:	2389      	movs	r3, #137	; 0x89
    8ec2:	005b      	lsls	r3, r3, #1
    8ec4:	18fa      	adds	r2, r7, r3
    8ec6:	4b3c      	ldr	r3, [pc, #240]	; (8fb8 <task_3s+0x184>)
    8ec8:	0011      	movs	r1, r2
    8eca:	0018      	movs	r0, r3
    8ecc:	4b3d      	ldr	r3, [pc, #244]	; (8fc4 <task_3s+0x190>)
    8ece:	4798      	blx	r3
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    8ed0:	4b3d      	ldr	r3, [pc, #244]	; (8fc8 <task_3s+0x194>)
    8ed2:	228c      	movs	r2, #140	; 0x8c
    8ed4:	0052      	lsls	r2, r2, #1
    8ed6:	18ba      	adds	r2, r7, r2
    8ed8:	6810      	ldr	r0, [r2, #0]
    8eda:	6851      	ldr	r1, [r2, #4]
    8edc:	4798      	blx	r3
    8ede:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    8ee0:	4c3a      	ldr	r4, [pc, #232]	; (8fcc <task_3s+0x198>)
    8ee2:	2200      	movs	r2, #0
    8ee4:	4b3a      	ldr	r3, [pc, #232]	; (8fd0 <task_3s+0x19c>)
    8ee6:	218c      	movs	r1, #140	; 0x8c
    8ee8:	0049      	lsls	r1, r1, #1
    8eea:	1879      	adds	r1, r7, r1
    8eec:	6808      	ldr	r0, [r1, #0]
    8eee:	6849      	ldr	r1, [r1, #4]
    8ef0:	47a0      	blx	r4
    8ef2:	0003      	movs	r3, r0
    8ef4:	000c      	movs	r4, r1
    8ef6:	0019      	movs	r1, r3
    8ef8:	0022      	movs	r2, r4
    8efa:	4b33      	ldr	r3, [pc, #204]	; (8fc8 <task_3s+0x194>)
    8efc:	0008      	movs	r0, r1
    8efe:	0011      	movs	r1, r2
    8f00:	4798      	blx	r3
    8f02:	0002      	movs	r2, r0
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    8f04:	4b33      	ldr	r3, [pc, #204]	; (8fd4 <task_3s+0x1a0>)
    8f06:	2164      	movs	r1, #100	; 0x64
    8f08:	0010      	movs	r0, r2
    8f0a:	4798      	blx	r3
    8f0c:	000b      	movs	r3, r1
    8f0e:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    8f10:	2389      	movs	r3, #137	; 0x89
    8f12:	005b      	lsls	r3, r3, #1
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	881b      	ldrh	r3, [r3, #0]
    8f18:	001a      	movs	r2, r3
    8f1a:	2380      	movs	r3, #128	; 0x80
    8f1c:	015b      	lsls	r3, r3, #5
    8f1e:	1a9b      	subs	r3, r3, r2
    8f20:	2264      	movs	r2, #100	; 0x64
    8f22:	4353      	muls	r3, r2
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    8f24:	2b00      	cmp	r3, #0
    8f26:	da02      	bge.n	8f2e <task_3s+0xfa>
    8f28:	4a2b      	ldr	r2, [pc, #172]	; (8fd8 <task_3s+0x1a4>)
    8f2a:	4694      	mov	ip, r2
    8f2c:	4463      	add	r3, ip
    8f2e:	131b      	asrs	r3, r3, #12
    8f30:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    8f32:	2017      	movs	r0, #23
    8f34:	4b29      	ldr	r3, [pc, #164]	; (8fdc <task_3s+0x1a8>)
    8f36:	4798      	blx	r3
    8f38:	1e03      	subs	r3, r0, #0
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    8f3a:	d001      	beq.n	8f40 <task_3s+0x10c>
    8f3c:	4b28      	ldr	r3, [pc, #160]	; (8fe0 <task_3s+0x1ac>)
    8f3e:	e000      	b.n	8f42 <task_3s+0x10e>
    8f40:	4b28      	ldr	r3, [pc, #160]	; (8fe4 <task_3s+0x1b0>)
    8f42:	4a29      	ldr	r2, [pc, #164]	; (8fe8 <task_3s+0x1b4>)
    8f44:	4929      	ldr	r1, [pc, #164]	; (8fec <task_3s+0x1b8>)
    8f46:	2010      	movs	r0, #16
    8f48:	1838      	adds	r0, r7, r0
    8f4a:	9302      	str	r3, [sp, #8]
    8f4c:	9501      	str	r5, [sp, #4]
    8f4e:	9400      	str	r4, [sp, #0]
    8f50:	0033      	movs	r3, r6
    8f52:	4c27      	ldr	r4, [pc, #156]	; (8ff0 <task_3s+0x1bc>)
    8f54:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    8f56:	2310      	movs	r3, #16
    8f58:	18fa      	adds	r2, r7, r3
    8f5a:	4b26      	ldr	r3, [pc, #152]	; (8ff4 <task_3s+0x1c0>)
    8f5c:	0011      	movs	r1, r2
    8f5e:	0018      	movs	r0, r3
    8f60:	4b25      	ldr	r3, [pc, #148]	; (8ff8 <task_3s+0x1c4>)
    8f62:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    8f64:	4b25      	ldr	r3, [pc, #148]	; (8ffc <task_3s+0x1c8>)
    8f66:	681b      	ldr	r3, [r3, #0]
    8f68:	2253      	movs	r2, #83	; 0x53
    8f6a:	569b      	ldrsb	r3, [r3, r2]
    8f6c:	0018      	movs	r0, r3
    8f6e:	4b24      	ldr	r3, [pc, #144]	; (9000 <task_3s+0x1cc>)
    8f70:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    8f72:	4b22      	ldr	r3, [pc, #136]	; (8ffc <task_3s+0x1c8>)
    8f74:	681b      	ldr	r3, [r3, #0]
    8f76:	2252      	movs	r2, #82	; 0x52
    8f78:	2100      	movs	r1, #0
    8f7a:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    8f7c:	4b1f      	ldr	r3, [pc, #124]	; (8ffc <task_3s+0x1c8>)
    8f7e:	681b      	ldr	r3, [r3, #0]
    8f80:	2250      	movs	r2, #80	; 0x50
    8f82:	2102      	movs	r1, #2
    8f84:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    8f86:	4b1d      	ldr	r3, [pc, #116]	; (8ffc <task_3s+0x1c8>)
    8f88:	681b      	ldr	r3, [r3, #0]
    8f8a:	2210      	movs	r2, #16
    8f8c:	18ba      	adds	r2, r7, r2
    8f8e:	4916      	ldr	r1, [pc, #88]	; (8fe8 <task_3s+0x1b4>)
    8f90:	0018      	movs	r0, r3
    8f92:	4b1c      	ldr	r3, [pc, #112]	; (9004 <task_3s+0x1d0>)
    8f94:	4798      	blx	r3
        }        
    }
    8f96:	e773      	b.n	8e80 <task_3s+0x4c>
    8f98:	fffffef0 	.word	0xfffffef0
    8f9c:	0000a25b 	.word	0x0000a25b
    8fa0:	00000bb8 	.word	0x00000bb8
    8fa4:	00007c15 	.word	0x00007c15
    8fa8:	00007979 	.word	0x00007979
    8fac:	20003ce8 	.word	0x20003ce8
    8fb0:	20003cec 	.word	0x20003cec
    8fb4:	20003cf0 	.word	0x20003cf0
    8fb8:	200045e8 	.word	0x200045e8
    8fbc:	00008bdd 	.word	0x00008bdd
    8fc0:	000036b9 	.word	0x000036b9
    8fc4:	00008c25 	.word	0x00008c25
    8fc8:	0000a071 	.word	0x0000a071
    8fcc:	00009b7d 	.word	0x00009b7d
    8fd0:	40590000 	.word	0x40590000
    8fd4:	00009b71 	.word	0x00009b71
    8fd8:	00000fff 	.word	0x00000fff
    8fdc:	00008cc5 	.word	0x00008cc5
    8fe0:	0000c6ac 	.word	0x0000c6ac
    8fe4:	0000c6b0 	.word	0x0000c6b0
    8fe8:	2000001c 	.word	0x2000001c
    8fec:	0000c6b4 	.word	0x0000c6b4
    8ff0:	0000a9a9 	.word	0x0000a9a9
    8ff4:	0000c6f8 	.word	0x0000c6f8
    8ff8:	0000a811 	.word	0x0000a811
    8ffc:	20003d00 	.word	0x20003d00
    9000:	0000325d 	.word	0x0000325d
    9004:	00009471 	.word	0x00009471

00009008 <task_1s>:
}

static void task_1s(void *args)
{
    9008:	b580      	push	{r7, lr}
    900a:	b086      	sub	sp, #24
    900c:	af00      	add	r7, sp, #0
    900e:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    9010:	4b45      	ldr	r3, [pc, #276]	; (9128 <task_1s+0x120>)
    9012:	4798      	blx	r3
    9014:	0003      	movs	r3, r0
    9016:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    9018:	23fa      	movs	r3, #250	; 0xfa
    901a:	009b      	lsls	r3, r3, #2
    901c:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    901e:	697a      	ldr	r2, [r7, #20]
    9020:	230c      	movs	r3, #12
    9022:	18fb      	adds	r3, r7, r3
    9024:	0011      	movs	r1, r2
    9026:	0018      	movs	r0, r3
    9028:	4b40      	ldr	r3, [pc, #256]	; (912c <task_1s+0x124>)
    902a:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    902c:	4b40      	ldr	r3, [pc, #256]	; (9130 <task_1s+0x128>)
    902e:	781b      	ldrb	r3, [r3, #0]
    9030:	b2db      	uxtb	r3, r3
    9032:	2b03      	cmp	r3, #3
    9034:	d1f3      	bne.n	901e <task_1s+0x16>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    9036:	4b3f      	ldr	r3, [pc, #252]	; (9134 <task_1s+0x12c>)
    9038:	681b      	ldr	r3, [r3, #0]
    903a:	2252      	movs	r2, #82	; 0x52
    903c:	5c9b      	ldrb	r3, [r3, r2]
    903e:	2b00      	cmp	r3, #0
    9040:	d1ed      	bne.n	901e <task_1s+0x16>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    9042:	4b3c      	ldr	r3, [pc, #240]	; (9134 <task_1s+0x12c>)
    9044:	681b      	ldr	r3, [r3, #0]
    9046:	2251      	movs	r2, #81	; 0x51
    9048:	5c9b      	ldrb	r3, [r3, r2]
    904a:	2b00      	cmp	r3, #0
    904c:	d00b      	beq.n	9066 <task_1s+0x5e>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    904e:	4b39      	ldr	r3, [pc, #228]	; (9134 <task_1s+0x12c>)
    9050:	681b      	ldr	r3, [r3, #0]
    9052:	2251      	movs	r2, #81	; 0x51
    9054:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    9056:	2b02      	cmp	r3, #2
    9058:	d110      	bne.n	907c <task_1s+0x74>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    905a:	4b36      	ldr	r3, [pc, #216]	; (9134 <task_1s+0x12c>)
    905c:	681b      	ldr	r3, [r3, #0]
    905e:	2250      	movs	r2, #80	; 0x50
    9060:	5c9b      	ldrb	r3, [r3, r2]
    9062:	2b00      	cmp	r3, #0
    9064:	d10a      	bne.n	907c <task_1s+0x74>
                    printf("main: subscribe event, PNR_OK\r\n");
    9066:	4b34      	ldr	r3, [pc, #208]	; (9138 <task_1s+0x130>)
    9068:	0018      	movs	r0, r3
    906a:	4b34      	ldr	r3, [pc, #208]	; (913c <task_1s+0x134>)
    906c:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    906e:	4b31      	ldr	r3, [pc, #196]	; (9134 <task_1s+0x12c>)
    9070:	681b      	ldr	r3, [r3, #0]
    9072:	4a33      	ldr	r2, [pc, #204]	; (9140 <task_1s+0x138>)
    9074:	0011      	movs	r1, r2
    9076:	0018      	movs	r0, r3
    9078:	4b32      	ldr	r3, [pc, #200]	; (9144 <task_1s+0x13c>)
    907a:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    907c:	4b2d      	ldr	r3, [pc, #180]	; (9134 <task_1s+0x12c>)
    907e:	681b      	ldr	r3, [r3, #0]
    9080:	0018      	movs	r0, r3
    9082:	4b31      	ldr	r3, [pc, #196]	; (9148 <task_1s+0x140>)
    9084:	4798      	blx	r3
    9086:	0003      	movs	r3, r0
    9088:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    908a:	693b      	ldr	r3, [r7, #16]
    908c:	2b00      	cmp	r3, #0
    908e:	d031      	beq.n	90f4 <task_1s+0xec>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    9090:	693b      	ldr	r3, [r7, #16]
    9092:	3302      	adds	r3, #2
    9094:	492d      	ldr	r1, [pc, #180]	; (914c <task_1s+0x144>)
    9096:	2203      	movs	r2, #3
    9098:	0018      	movs	r0, r3
    909a:	4b2d      	ldr	r3, [pc, #180]	; (9150 <task_1s+0x148>)
    909c:	4798      	blx	r3
    909e:	1e03      	subs	r3, r0, #0
    90a0:	d121      	bne.n	90e6 <task_1s+0xde>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    90a2:	693a      	ldr	r2, [r7, #16]
    90a4:	4b2b      	ldr	r3, [pc, #172]	; (9154 <task_1s+0x14c>)
    90a6:	0011      	movs	r1, r2
    90a8:	0018      	movs	r0, r3
    90aa:	4b2b      	ldr	r3, [pc, #172]	; (9158 <task_1s+0x150>)
    90ac:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    90ae:	693b      	ldr	r3, [r7, #16]
    90b0:	3308      	adds	r3, #8
    90b2:	492a      	ldr	r1, [pc, #168]	; (915c <task_1s+0x154>)
    90b4:	2202      	movs	r2, #2
    90b6:	0018      	movs	r0, r3
    90b8:	4b25      	ldr	r3, [pc, #148]	; (9150 <task_1s+0x148>)
    90ba:	4798      	blx	r3
    90bc:	1e03      	subs	r3, r0, #0
    90be:	d104      	bne.n	90ca <task_1s+0xc2>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    90c0:	2100      	movs	r1, #0
    90c2:	2017      	movs	r0, #23
    90c4:	4b26      	ldr	r3, [pc, #152]	; (9160 <task_1s+0x158>)
    90c6:	4798      	blx	r3
    90c8:	e7d8      	b.n	907c <task_1s+0x74>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    90ca:	693b      	ldr	r3, [r7, #16]
    90cc:	3308      	adds	r3, #8
    90ce:	4925      	ldr	r1, [pc, #148]	; (9164 <task_1s+0x15c>)
    90d0:	2203      	movs	r2, #3
    90d2:	0018      	movs	r0, r3
    90d4:	4b1e      	ldr	r3, [pc, #120]	; (9150 <task_1s+0x148>)
    90d6:	4798      	blx	r3
    90d8:	1e03      	subs	r3, r0, #0
    90da:	d1cf      	bne.n	907c <task_1s+0x74>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    90dc:	2101      	movs	r1, #1
    90de:	2017      	movs	r0, #23
    90e0:	4b1f      	ldr	r3, [pc, #124]	; (9160 <task_1s+0x158>)
    90e2:	4798      	blx	r3
    90e4:	e7ca      	b.n	907c <task_1s+0x74>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    90e6:	693a      	ldr	r2, [r7, #16]
    90e8:	4b1f      	ldr	r3, [pc, #124]	; (9168 <task_1s+0x160>)
    90ea:	0011      	movs	r1, r2
    90ec:	0018      	movs	r0, r3
    90ee:	4b1a      	ldr	r3, [pc, #104]	; (9158 <task_1s+0x150>)
    90f0:	4798      	blx	r3
                    }
                }
    90f2:	e7c3      	b.n	907c <task_1s+0x74>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    90f4:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    90f6:	4b1d      	ldr	r3, [pc, #116]	; (916c <task_1s+0x164>)
    90f8:	681a      	ldr	r2, [r3, #0]
    90fa:	4b1d      	ldr	r3, [pc, #116]	; (9170 <task_1s+0x168>)
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	1ad2      	subs	r2, r2, r3
    9100:	23fa      	movs	r3, #250	; 0xfa
    9102:	009b      	lsls	r3, r3, #2
    9104:	429a      	cmp	r2, r3
    9106:	d98a      	bls.n	901e <task_1s+0x16>
                    gu32subscribeDelay = gu32MsTicks;
    9108:	4b18      	ldr	r3, [pc, #96]	; (916c <task_1s+0x164>)
    910a:	681a      	ldr	r2, [r3, #0]
    910c:	4b18      	ldr	r3, [pc, #96]	; (9170 <task_1s+0x168>)
    910e:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    9110:	4b18      	ldr	r3, [pc, #96]	; (9174 <task_1s+0x16c>)
    9112:	0018      	movs	r0, r3
    9114:	4b09      	ldr	r3, [pc, #36]	; (913c <task_1s+0x134>)
    9116:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    9118:	4b06      	ldr	r3, [pc, #24]	; (9134 <task_1s+0x12c>)
    911a:	681b      	ldr	r3, [r3, #0]
    911c:	4a08      	ldr	r2, [pc, #32]	; (9140 <task_1s+0x138>)
    911e:	0011      	movs	r1, r2
    9120:	0018      	movs	r0, r3
    9122:	4b08      	ldr	r3, [pc, #32]	; (9144 <task_1s+0x13c>)
    9124:	4798      	blx	r3
                }
            }
        }        
    }
    9126:	e77a      	b.n	901e <task_1s+0x16>
    9128:	00007c15 	.word	0x00007c15
    912c:	00007979 	.word	0x00007979
    9130:	20003ce8 	.word	0x20003ce8
    9134:	20003d00 	.word	0x20003d00
    9138:	0000c714 	.word	0x0000c714
    913c:	0000a931 	.word	0x0000a931
    9140:	2000001c 	.word	0x2000001c
    9144:	00009669 	.word	0x00009669
    9148:	000097e5 	.word	0x000097e5
    914c:	0000c734 	.word	0x0000c734
    9150:	0000a9fb 	.word	0x0000a9fb
    9154:	0000c738 	.word	0x0000c738
    9158:	0000a811 	.word	0x0000a811
    915c:	0000c764 	.word	0x0000c764
    9160:	00008d09 	.word	0x00008d09
    9164:	0000c768 	.word	0x0000c768
    9168:	0000c76c 	.word	0x0000c76c
    916c:	20003cec 	.word	0x20003cec
    9170:	20003cf4 	.word	0x20003cf4
    9174:	0000c78c 	.word	0x0000c78c

00009178 <vApplicationIdleHook>:

}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{
    9178:	b580      	push	{r7, lr}
    917a:	af00      	add	r7, sp, #0
   
   // NOTE: NO BLOCKING FUNCTIONS MAY GO IN THE IDLE HOOK
   m2m_wifi_handle_events(NULL);
    917c:	2000      	movs	r0, #0
    917e:	4b02      	ldr	r3, [pc, #8]	; (9188 <vApplicationIdleHook+0x10>)
    9180:	4798      	blx	r3

}
    9182:	46c0      	nop			; (mov r8, r8)
    9184:	46bd      	mov	sp, r7
    9186:	bd80      	pop	{r7, pc}
    9188:	00001421 	.word	0x00001421

0000918c <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    918c:	b580      	push	{r7, lr}
    918e:	b082      	sub	sp, #8
    9190:	af00      	add	r7, sp, #0
    9192:	6078      	str	r0, [r7, #4]
    9194:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    9196:	683a      	ldr	r2, [r7, #0]
    9198:	4b02      	ldr	r3, [pc, #8]	; (91a4 <vApplicationStackOverflowHook+0x18>)
    919a:	0011      	movs	r1, r2
    919c:	0018      	movs	r0, r3
    919e:	4b02      	ldr	r3, [pc, #8]	; (91a8 <vApplicationStackOverflowHook+0x1c>)
    91a0:	4798      	blx	r3
    while (1) {}
    91a2:	e7fe      	b.n	91a2 <vApplicationStackOverflowHook+0x16>
    91a4:	0000c7b0 	.word	0x0000c7b0
    91a8:	0000a811 	.word	0x0000a811

000091ac <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    91ac:	b590      	push	{r4, r7, lr}
    91ae:	b091      	sub	sp, #68	; 0x44
    91b0:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    91b2:	4b27      	ldr	r3, [pc, #156]	; (9250 <main+0xa4>)
    91b4:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();
    91b6:	4b27      	ldr	r3, [pc, #156]	; (9254 <main+0xa8>)
    91b8:	4798      	blx	r3

	/* Initialize the Wi-Fi BSP. */
	//nm_bsp_init();

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    91ba:	231c      	movs	r3, #28
    91bc:	18fb      	adds	r3, r7, r3
    91be:	2218      	movs	r2, #24
    91c0:	2100      	movs	r1, #0
    91c2:	0018      	movs	r0, r3
    91c4:	4b24      	ldr	r3, [pc, #144]	; (9258 <main+0xac>)
    91c6:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    91c8:	231c      	movs	r3, #28
    91ca:	18fb      	adds	r3, r7, r3
    91cc:	4a23      	ldr	r2, [pc, #140]	; (925c <main+0xb0>)
    91ce:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    91d0:	4b23      	ldr	r3, [pc, #140]	; (9260 <main+0xb4>)
    91d2:	681a      	ldr	r2, [r3, #0]
    91d4:	4b23      	ldr	r3, [pc, #140]	; (9264 <main+0xb8>)
    91d6:	601a      	str	r2, [r3, #0]
	///* Connect to AP using Wi-Fi settings from main.h. */
	//printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
	//m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			//MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

    tm1640_init();
    91d8:	4b23      	ldr	r3, [pc, #140]	; (9268 <main+0xbc>)
    91da:	4798      	blx	r3
    tm1640_display_t disp;
    disp.grid[0] = SEG_0;
    91dc:	1d3b      	adds	r3, r7, #4
    91de:	221f      	movs	r2, #31
    91e0:	701a      	strb	r2, [r3, #0]
    disp.grid[1] = SEG_1;
    91e2:	1d3b      	adds	r3, r7, #4
    91e4:	2206      	movs	r2, #6
    91e6:	705a      	strb	r2, [r3, #1]
    disp.grid[2] = SEG_2;
    91e8:	1d3b      	adds	r3, r7, #4
    91ea:	225b      	movs	r2, #91	; 0x5b
    91ec:	709a      	strb	r2, [r3, #2]
    disp.grid[3] = SEG_3;
    91ee:	1d3b      	adds	r3, r7, #4
    91f0:	224f      	movs	r2, #79	; 0x4f
    91f2:	70da      	strb	r2, [r3, #3]
    disp.grid[4] = SEG_4;
    91f4:	1d3b      	adds	r3, r7, #4
    91f6:	2266      	movs	r2, #102	; 0x66
    91f8:	711a      	strb	r2, [r3, #4]
    disp.grid[5] = SEG_5;
    91fa:	1d3b      	adds	r3, r7, #4
    91fc:	226d      	movs	r2, #109	; 0x6d
    91fe:	715a      	strb	r2, [r3, #5]
    disp.grid[6] = SEG_6;
    9200:	1d3b      	adds	r3, r7, #4
    9202:	227d      	movs	r2, #125	; 0x7d
    9204:	719a      	strb	r2, [r3, #6]
    disp.grid[7] = SEG_7;
    9206:	1d3b      	adds	r3, r7, #4
    9208:	2207      	movs	r2, #7
    920a:	71da      	strb	r2, [r3, #7]
    enum status_code ret = tm1640_set_display(&disp, BRIGHT_5);
    920c:	2337      	movs	r3, #55	; 0x37
    920e:	18fc      	adds	r4, r7, r3
    9210:	1d3b      	adds	r3, r7, #4
    9212:	218d      	movs	r1, #141	; 0x8d
    9214:	0018      	movs	r0, r3
    9216:	4b15      	ldr	r3, [pc, #84]	; (926c <main+0xc0>)
    9218:	4798      	blx	r3
    921a:	0003      	movs	r3, r0
    921c:	7023      	strb	r3, [r4, #0]

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE + 256, 0, TASK_3S_PRIORITY, NULL);
    921e:	2380      	movs	r3, #128	; 0x80
    9220:	009a      	lsls	r2, r3, #2
    9222:	4913      	ldr	r1, [pc, #76]	; (9270 <main+0xc4>)
    9224:	4813      	ldr	r0, [pc, #76]	; (9274 <main+0xc8>)
    9226:	2300      	movs	r3, #0
    9228:	9301      	str	r3, [sp, #4]
    922a:	2301      	movs	r3, #1
    922c:	9300      	str	r3, [sp, #0]
    922e:	2300      	movs	r3, #0
    9230:	4c11      	ldr	r4, [pc, #68]	; (9278 <main+0xcc>)
    9232:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    9234:	2380      	movs	r3, #128	; 0x80
    9236:	005a      	lsls	r2, r3, #1
    9238:	4910      	ldr	r1, [pc, #64]	; (927c <main+0xd0>)
    923a:	4811      	ldr	r0, [pc, #68]	; (9280 <main+0xd4>)
    923c:	2300      	movs	r3, #0
    923e:	9301      	str	r3, [sp, #4]
    9240:	2301      	movs	r3, #1
    9242:	9300      	str	r3, [sp, #0]
    9244:	2300      	movs	r3, #0
    9246:	4c0c      	ldr	r4, [pc, #48]	; (9278 <main+0xcc>)
    9248:	47a0      	blx	r4

    vTaskStartScheduler();
    924a:	4b0e      	ldr	r3, [pc, #56]	; (9284 <main+0xd8>)
    924c:	4798      	blx	r3

    while(1) {}
    924e:	e7fe      	b.n	924e <main+0xa2>
    9250:	00006511 	.word	0x00006511
    9254:	00000591 	.word	0x00000591
    9258:	0000a25b 	.word	0x0000a25b
    925c:	00008d5d 	.word	0x00008d5d
    9260:	20003cec 	.word	0x20003cec
    9264:	20003cf8 	.word	0x20003cf8
    9268:	00000381 	.word	0x00000381
    926c:	000004bd 	.word	0x000004bd
    9270:	0000c7c8 	.word	0x0000c7c8
    9274:	00008e35 	.word	0x00008e35
    9278:	00007701 	.word	0x00007701
    927c:	0000c7d0 	.word	0x0000c7d0
    9280:	00009009 	.word	0x00009009
    9284:	00007a41 	.word	0x00007a41

00009288 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    9288:	b590      	push	{r4, r7, lr}
    928a:	b0dd      	sub	sp, #372	; 0x174
    928c:	af00      	add	r7, sp, #0
    928e:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	2252      	movs	r2, #82	; 0x52
    9294:	5c9b      	ldrb	r3, [r3, r2]
    9296:	2b03      	cmp	r3, #3
    9298:	d126      	bne.n	92e8 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    929a:	4b1e      	ldr	r3, [pc, #120]	; (9314 <handle_transaction+0x8c>)
    929c:	22b8      	movs	r2, #184	; 0xb8
    929e:	0052      	lsls	r2, r2, #1
    92a0:	4694      	mov	ip, r2
    92a2:	44bc      	add	ip, r7
    92a4:	4463      	add	r3, ip
    92a6:	0018      	movs	r0, r3
    92a8:	2366      	movs	r3, #102	; 0x66
    92aa:	33ff      	adds	r3, #255	; 0xff
    92ac:	001a      	movs	r2, r3
    92ae:	2100      	movs	r1, #0
    92b0:	4b19      	ldr	r3, [pc, #100]	; (9318 <handle_transaction+0x90>)
    92b2:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	3354      	adds	r3, #84	; 0x54
    92b8:	001a      	movs	r2, r3
    92ba:	4b18      	ldr	r3, [pc, #96]	; (931c <handle_transaction+0x94>)
    92bc:	4918      	ldr	r1, [pc, #96]	; (9320 <handle_transaction+0x98>)
    92be:	2008      	movs	r0, #8
    92c0:	1838      	adds	r0, r7, r0
    92c2:	4c18      	ldr	r4, [pc, #96]	; (9324 <handle_transaction+0x9c>)
    92c4:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    92c6:	687b      	ldr	r3, [r7, #4]
    92c8:	2253      	movs	r2, #83	; 0x53
    92ca:	569c      	ldrsb	r4, [r3, r2]
    92cc:	2308      	movs	r3, #8
    92ce:	18fb      	adds	r3, r7, r3
    92d0:	0018      	movs	r0, r3
    92d2:	4b15      	ldr	r3, [pc, #84]	; (9328 <handle_transaction+0xa0>)
    92d4:	4798      	blx	r3
    92d6:	0003      	movs	r3, r0
    92d8:	b29a      	uxth	r2, r3
    92da:	2308      	movs	r3, #8
    92dc:	18f9      	adds	r1, r7, r3
    92de:	2300      	movs	r3, #0
    92e0:	0020      	movs	r0, r4
    92e2:	4c12      	ldr	r4, [pc, #72]	; (932c <handle_transaction+0xa4>)
    92e4:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    92e6:	e010      	b.n	930a <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	2252      	movs	r2, #82	; 0x52
    92ec:	5c9b      	ldrb	r3, [r3, r2]
    92ee:	2b04      	cmp	r3, #4
    92f0:	d10b      	bne.n	930a <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    92f2:	687b      	ldr	r3, [r7, #4]
    92f4:	2253      	movs	r2, #83	; 0x53
    92f6:	5698      	ldrsb	r0, [r3, r2]
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	3354      	adds	r3, #84	; 0x54
    92fc:	0019      	movs	r1, r3
    92fe:	4c0c      	ldr	r4, [pc, #48]	; (9330 <handle_transaction+0xa8>)
    9300:	2380      	movs	r3, #128	; 0x80
    9302:	005a      	lsls	r2, r3, #1
    9304:	0023      	movs	r3, r4
    9306:	4c0b      	ldr	r4, [pc, #44]	; (9334 <handle_transaction+0xac>)
    9308:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    930a:	46c0      	nop			; (mov r8, r8)
    930c:	46bd      	mov	sp, r7
    930e:	b05d      	add	sp, #372	; 0x174
    9310:	bd90      	pop	{r4, r7, pc}
    9312:	46c0      	nop			; (mov r8, r8)
    9314:	fffffe98 	.word	0xfffffe98
    9318:	0000a25b 	.word	0x0000a25b
    931c:	0000c7d8 	.word	0x0000c7d8
    9320:	0000c7ec 	.word	0x0000c7ec
    9324:	0000a9a9 	.word	0x0000a9a9
    9328:	0000a9ed 	.word	0x0000a9ed
    932c:	00002f79 	.word	0x00002f79
    9330:	00007530 	.word	0x00007530
    9334:	000030dd 	.word	0x000030dd

00009338 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    9338:	b580      	push	{r7, lr}
    933a:	b082      	sub	sp, #8
    933c:	af00      	add	r7, sp, #0
    933e:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    9340:	687a      	ldr	r2, [r7, #4]
    9342:	4b09      	ldr	r3, [pc, #36]	; (9368 <valid_ctx_prt+0x30>)
    9344:	429a      	cmp	r2, r3
    9346:	d305      	bcc.n	9354 <valid_ctx_prt+0x1c>
    9348:	4b08      	ldr	r3, [pc, #32]	; (936c <valid_ctx_prt+0x34>)
    934a:	687a      	ldr	r2, [r7, #4]
    934c:	429a      	cmp	r2, r3
    934e:	d201      	bcs.n	9354 <valid_ctx_prt+0x1c>
    9350:	2301      	movs	r3, #1
    9352:	e000      	b.n	9356 <valid_ctx_prt+0x1e>
    9354:	2300      	movs	r3, #0
    9356:	1c1a      	adds	r2, r3, #0
    9358:	2301      	movs	r3, #1
    935a:	4013      	ands	r3, r2
    935c:	b2db      	uxtb	r3, r3
}
    935e:	0018      	movs	r0, r3
    9360:	46bd      	mov	sp, r7
    9362:	b002      	add	sp, #8
    9364:	bd80      	pop	{r7, pc}
    9366:	46c0      	nop			; (mov r8, r8)
    9368:	20003d04 	.word	0x20003d04
    936c:	200043e4 	.word	0x200043e4

00009370 <handle_start_connect>:
	return NULL;
}

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    9370:	b590      	push	{r4, r7, lr}
    9372:	b083      	sub	sp, #12
    9374:	af00      	add	r7, sp, #0
    9376:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    9378:	687b      	ldr	r3, [r7, #4]
    937a:	0018      	movs	r0, r3
    937c:	4b2f      	ldr	r3, [pc, #188]	; (943c <handle_start_connect+0xcc>)
    937e:	4798      	blx	r3
    9380:	1e03      	subs	r3, r0, #0
    9382:	d105      	bne.n	9390 <handle_start_connect+0x20>
    9384:	4b2e      	ldr	r3, [pc, #184]	; (9440 <handle_start_connect+0xd0>)
    9386:	4a2f      	ldr	r2, [pc, #188]	; (9444 <handle_start_connect+0xd4>)
    9388:	482f      	ldr	r0, [pc, #188]	; (9448 <handle_start_connect+0xd8>)
    938a:	2154      	movs	r1, #84	; 0x54
    938c:	4c2f      	ldr	r4, [pc, #188]	; (944c <handle_start_connect+0xdc>)
    938e:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	2252      	movs	r2, #82	; 0x52
    9394:	5c9b      	ldrb	r3, [r3, r2]
    9396:	2b00      	cmp	r3, #0
    9398:	d00f      	beq.n	93ba <handle_start_connect+0x4a>
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	2252      	movs	r2, #82	; 0x52
    939e:	5c9b      	ldrb	r3, [r3, r2]
    93a0:	2b01      	cmp	r3, #1
    93a2:	d00a      	beq.n	93ba <handle_start_connect+0x4a>
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	2252      	movs	r2, #82	; 0x52
    93a8:	5c9b      	ldrb	r3, [r3, r2]
    93aa:	2b02      	cmp	r3, #2
    93ac:	d005      	beq.n	93ba <handle_start_connect+0x4a>
    93ae:	4b28      	ldr	r3, [pc, #160]	; (9450 <handle_start_connect+0xe0>)
    93b0:	4a24      	ldr	r2, [pc, #144]	; (9444 <handle_start_connect+0xd4>)
    93b2:	4825      	ldr	r0, [pc, #148]	; (9448 <handle_start_connect+0xd8>)
    93b4:	2155      	movs	r1, #85	; 0x55
    93b6:	4c25      	ldr	r4, [pc, #148]	; (944c <handle_start_connect+0xdc>)
    93b8:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    93ba:	687b      	ldr	r3, [r7, #4]
    93bc:	2252      	movs	r2, #82	; 0x52
    93be:	5c9b      	ldrb	r3, [r3, r2]
    93c0:	2b00      	cmp	r3, #0
    93c2:	d12c      	bne.n	941e <handle_start_connect+0xae>
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	2253      	movs	r2, #83	; 0x53
    93c8:	569b      	ldrsb	r3, [r3, r2]
    93ca:	2b00      	cmp	r3, #0
    93cc:	dc27      	bgt.n	941e <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    93ce:	2200      	movs	r2, #0
    93d0:	2101      	movs	r1, #1
    93d2:	2002      	movs	r0, #2
    93d4:	4b1f      	ldr	r3, [pc, #124]	; (9454 <handle_start_connect+0xe4>)
    93d6:	4798      	blx	r3
    93d8:	0003      	movs	r3, r0
    93da:	0019      	movs	r1, r3
    93dc:	687b      	ldr	r3, [r7, #4]
    93de:	2253      	movs	r2, #83	; 0x53
    93e0:	5499      	strb	r1, [r3, r2]
    93e2:	687b      	ldr	r3, [r7, #4]
    93e4:	2253      	movs	r2, #83	; 0x53
    93e6:	569b      	ldrsb	r3, [r3, r2]
    93e8:	2b00      	cmp	r3, #0
    93ea:	da04      	bge.n	93f6 <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    93ec:	4b1a      	ldr	r3, [pc, #104]	; (9458 <handle_start_connect+0xe8>)
    93ee:	0018      	movs	r0, r3
    93f0:	4b1a      	ldr	r3, [pc, #104]	; (945c <handle_start_connect+0xec>)
    93f2:	4798      	blx	r3
			return;
    93f4:	e01f      	b.n	9436 <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    93f6:	4b1a      	ldr	r3, [pc, #104]	; (9460 <handle_start_connect+0xf0>)
    93f8:	685b      	ldr	r3, [r3, #4]
    93fa:	2b00      	cmp	r3, #0
    93fc:	d10f      	bne.n	941e <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    93fe:	4b18      	ldr	r3, [pc, #96]	; (9460 <handle_start_connect+0xf0>)
    9400:	2202      	movs	r2, #2
    9402:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    9404:	4b16      	ldr	r3, [pc, #88]	; (9460 <handle_start_connect+0xf0>)
    9406:	22a0      	movs	r2, #160	; 0xa0
    9408:	01d2      	lsls	r2, r2, #7
    940a:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    940c:	687b      	ldr	r3, [r7, #4]
    940e:	2252      	movs	r2, #82	; 0x52
    9410:	2101      	movs	r1, #1
    9412:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    9414:	4b13      	ldr	r3, [pc, #76]	; (9464 <handle_start_connect+0xf4>)
    9416:	0018      	movs	r0, r3
    9418:	4b13      	ldr	r3, [pc, #76]	; (9468 <handle_start_connect+0xf8>)
    941a:	4798      	blx	r3
			return;
    941c:	e00b      	b.n	9436 <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    941e:	687b      	ldr	r3, [r7, #4]
    9420:	2253      	movs	r2, #83	; 0x53
    9422:	569b      	ldrsb	r3, [r3, r2]
    9424:	490e      	ldr	r1, [pc, #56]	; (9460 <handle_start_connect+0xf0>)
    9426:	2210      	movs	r2, #16
    9428:	0018      	movs	r0, r3
    942a:	4b10      	ldr	r3, [pc, #64]	; (946c <handle_start_connect+0xfc>)
    942c:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    942e:	687b      	ldr	r3, [r7, #4]
    9430:	2252      	movs	r2, #82	; 0x52
    9432:	2102      	movs	r1, #2
    9434:	5499      	strb	r1, [r3, r2]
}
    9436:	46bd      	mov	sp, r7
    9438:	b003      	add	sp, #12
    943a:	bd90      	pop	{r4, r7, pc}
    943c:	00009339 	.word	0x00009339
    9440:	0000c840 	.word	0x0000c840
    9444:	0000c9e4 	.word	0x0000c9e4
    9448:	0000c854 	.word	0x0000c854
    944c:	0000a19d 	.word	0x0000a19d
    9450:	0000c864 	.word	0x0000c864
    9454:	00002d0d 	.word	0x00002d0d
    9458:	0000c8bc 	.word	0x0000c8bc
    945c:	0000a931 	.word	0x0000a931
    9460:	20004608 	.word	0x20004608
    9464:	0000c7d8 	.word	0x0000c7d8
    9468:	0000336d 	.word	0x0000336d
    946c:	00002e65 	.word	0x00002e65

00009470 <pubnub_publish>:
	pb->state = PS_IDLE;
	pb->last_result = PNR_IO_ERROR;
}

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    9470:	b5b0      	push	{r4, r5, r7, lr}
    9472:	b08a      	sub	sp, #40	; 0x28
    9474:	af02      	add	r7, sp, #8
    9476:	60f8      	str	r0, [r7, #12]
    9478:	60b9      	str	r1, [r7, #8]
    947a:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    947c:	68fb      	ldr	r3, [r7, #12]
    947e:	0018      	movs	r0, r3
    9480:	4b6c      	ldr	r3, [pc, #432]	; (9634 <pubnub_publish+0x1c4>)
    9482:	4798      	blx	r3
    9484:	1e03      	subs	r3, r0, #0
    9486:	d108      	bne.n	949a <pubnub_publish+0x2a>
    9488:	4c6b      	ldr	r4, [pc, #428]	; (9638 <pubnub_publish+0x1c8>)
    948a:	4a6c      	ldr	r2, [pc, #432]	; (963c <pubnub_publish+0x1cc>)
    948c:	238a      	movs	r3, #138	; 0x8a
    948e:	33ff      	adds	r3, #255	; 0xff
    9490:	0019      	movs	r1, r3
    9492:	486b      	ldr	r0, [pc, #428]	; (9640 <pubnub_publish+0x1d0>)
    9494:	0023      	movs	r3, r4
    9496:	4c6b      	ldr	r4, [pc, #428]	; (9644 <pubnub_publish+0x1d4>)
    9498:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    949a:	68fb      	ldr	r3, [r7, #12]
    949c:	2252      	movs	r2, #82	; 0x52
    949e:	5c9b      	ldrb	r3, [r3, r2]
    94a0:	2b00      	cmp	r3, #0
    94a2:	d001      	beq.n	94a8 <pubnub_publish+0x38>
		return false;
    94a4:	2300      	movs	r3, #0
    94a6:	e0c0      	b.n	962a <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    94a8:	68fb      	ldr	r3, [r7, #12]
    94aa:	2251      	movs	r2, #81	; 0x51
    94ac:	2102      	movs	r1, #2
    94ae:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    94b0:	68fb      	ldr	r3, [r7, #12]
    94b2:	3354      	adds	r3, #84	; 0x54
    94b4:	0018      	movs	r0, r3
    94b6:	68fb      	ldr	r3, [r7, #12]
    94b8:	681d      	ldr	r5, [r3, #0]
    94ba:	68fb      	ldr	r3, [r7, #12]
    94bc:	685b      	ldr	r3, [r3, #4]
    94be:	4c62      	ldr	r4, [pc, #392]	; (9648 <pubnub_publish+0x1d8>)
    94c0:	2280      	movs	r2, #128	; 0x80
    94c2:	0051      	lsls	r1, r2, #1
    94c4:	68ba      	ldr	r2, [r7, #8]
    94c6:	9201      	str	r2, [sp, #4]
    94c8:	9300      	str	r3, [sp, #0]
    94ca:	002b      	movs	r3, r5
    94cc:	0022      	movs	r2, r4
    94ce:	4c5f      	ldr	r4, [pc, #380]	; (964c <pubnub_publish+0x1dc>)
    94d0:	47a0      	blx	r4
    94d2:	0003      	movs	r3, r0
    94d4:	0019      	movs	r1, r3
    94d6:	68fa      	ldr	r2, [r7, #12]
    94d8:	23ac      	movs	r3, #172	; 0xac
    94da:	005b      	lsls	r3, r3, #1
    94dc:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    94de:	687b      	ldr	r3, [r7, #4]
    94e0:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    94e2:	e08a      	b.n	95fa <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    94e4:	4a5a      	ldr	r2, [pc, #360]	; (9650 <pubnub_publish+0x1e0>)
    94e6:	69fb      	ldr	r3, [r7, #28]
    94e8:	0011      	movs	r1, r2
    94ea:	0018      	movs	r0, r3
    94ec:	4b59      	ldr	r3, [pc, #356]	; (9654 <pubnub_publish+0x1e4>)
    94ee:	4798      	blx	r3
    94f0:	0003      	movs	r3, r0
    94f2:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    94f4:	69bb      	ldr	r3, [r7, #24]
    94f6:	2b00      	cmp	r3, #0
    94f8:	d034      	beq.n	9564 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    94fa:	68fa      	ldr	r2, [r7, #12]
    94fc:	23ac      	movs	r3, #172	; 0xac
    94fe:	005b      	lsls	r3, r3, #1
    9500:	58d3      	ldr	r3, [r2, r3]
    9502:	22ff      	movs	r2, #255	; 0xff
    9504:	1ad2      	subs	r2, r2, r3
    9506:	69bb      	ldr	r3, [r7, #24]
    9508:	429a      	cmp	r2, r3
    950a:	d206      	bcs.n	951a <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    950c:	68fa      	ldr	r2, [r7, #12]
    950e:	23ac      	movs	r3, #172	; 0xac
    9510:	005b      	lsls	r3, r3, #1
    9512:	2100      	movs	r1, #0
    9514:	50d1      	str	r1, [r2, r3]
				return false;
    9516:	2300      	movs	r3, #0
    9518:	e087      	b.n	962a <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    951a:	68fb      	ldr	r3, [r7, #12]
    951c:	3354      	adds	r3, #84	; 0x54
    951e:	001a      	movs	r2, r3
    9520:	68f9      	ldr	r1, [r7, #12]
    9522:	23ac      	movs	r3, #172	; 0xac
    9524:	005b      	lsls	r3, r3, #1
    9526:	58cb      	ldr	r3, [r1, r3]
    9528:	18d3      	adds	r3, r2, r3
    952a:	69ba      	ldr	r2, [r7, #24]
    952c:	69f9      	ldr	r1, [r7, #28]
    952e:	0018      	movs	r0, r3
    9530:	4b49      	ldr	r3, [pc, #292]	; (9658 <pubnub_publish+0x1e8>)
    9532:	4798      	blx	r3
			pb->http_buf_len += okspan;
    9534:	68fa      	ldr	r2, [r7, #12]
    9536:	23ac      	movs	r3, #172	; 0xac
    9538:	005b      	lsls	r3, r3, #1
    953a:	58d2      	ldr	r2, [r2, r3]
    953c:	69bb      	ldr	r3, [r7, #24]
    953e:	18d1      	adds	r1, r2, r3
    9540:	68fa      	ldr	r2, [r7, #12]
    9542:	23ac      	movs	r3, #172	; 0xac
    9544:	005b      	lsls	r3, r3, #1
    9546:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    9548:	68fa      	ldr	r2, [r7, #12]
    954a:	23ac      	movs	r3, #172	; 0xac
    954c:	005b      	lsls	r3, r3, #1
    954e:	58d3      	ldr	r3, [r2, r3]
    9550:	68fa      	ldr	r2, [r7, #12]
    9552:	2154      	movs	r1, #84	; 0x54
    9554:	18d3      	adds	r3, r2, r3
    9556:	185b      	adds	r3, r3, r1
    9558:	2200      	movs	r2, #0
    955a:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    955c:	69fa      	ldr	r2, [r7, #28]
    955e:	69bb      	ldr	r3, [r7, #24]
    9560:	18d3      	adds	r3, r2, r3
    9562:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    9564:	69fb      	ldr	r3, [r7, #28]
    9566:	781b      	ldrb	r3, [r3, #0]
    9568:	2b00      	cmp	r3, #0
    956a:	d046      	beq.n	95fa <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    956c:	2314      	movs	r3, #20
    956e:	18fb      	adds	r3, r7, r3
    9570:	2200      	movs	r2, #0
    9572:	601a      	str	r2, [r3, #0]
    9574:	2314      	movs	r3, #20
    9576:	18fb      	adds	r3, r7, r3
    9578:	2225      	movs	r2, #37	; 0x25
    957a:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    957c:	69fb      	ldr	r3, [r7, #28]
    957e:	781b      	ldrb	r3, [r3, #0]
    9580:	091b      	lsrs	r3, r3, #4
    9582:	b2db      	uxtb	r3, r3
    9584:	001a      	movs	r2, r3
    9586:	4b35      	ldr	r3, [pc, #212]	; (965c <pubnub_publish+0x1ec>)
    9588:	5c9a      	ldrb	r2, [r3, r2]
    958a:	2314      	movs	r3, #20
    958c:	18fb      	adds	r3, r7, r3
    958e:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    9590:	69fb      	ldr	r3, [r7, #28]
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	001a      	movs	r2, r3
    9596:	230f      	movs	r3, #15
    9598:	4013      	ands	r3, r2
    959a:	4a30      	ldr	r2, [pc, #192]	; (965c <pubnub_publish+0x1ec>)
    959c:	5cd2      	ldrb	r2, [r2, r3]
    959e:	2314      	movs	r3, #20
    95a0:	18fb      	adds	r3, r7, r3
    95a2:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    95a4:	68fa      	ldr	r2, [r7, #12]
    95a6:	23ac      	movs	r3, #172	; 0xac
    95a8:	005b      	lsls	r3, r3, #1
    95aa:	58d3      	ldr	r3, [r2, r3]
    95ac:	22ff      	movs	r2, #255	; 0xff
    95ae:	1ad3      	subs	r3, r2, r3
    95b0:	2b02      	cmp	r3, #2
    95b2:	d806      	bhi.n	95c2 <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    95b4:	68fa      	ldr	r2, [r7, #12]
    95b6:	23ac      	movs	r3, #172	; 0xac
    95b8:	005b      	lsls	r3, r3, #1
    95ba:	2100      	movs	r1, #0
    95bc:	50d1      	str	r1, [r2, r3]
				return false;
    95be:	2300      	movs	r3, #0
    95c0:	e033      	b.n	962a <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    95c2:	68fb      	ldr	r3, [r7, #12]
    95c4:	3354      	adds	r3, #84	; 0x54
    95c6:	001a      	movs	r2, r3
    95c8:	68f9      	ldr	r1, [r7, #12]
    95ca:	23ac      	movs	r3, #172	; 0xac
    95cc:	005b      	lsls	r3, r3, #1
    95ce:	58cb      	ldr	r3, [r1, r3]
    95d0:	18d2      	adds	r2, r2, r3
    95d2:	2314      	movs	r3, #20
    95d4:	18fb      	adds	r3, r7, r3
    95d6:	0010      	movs	r0, r2
    95d8:	0019      	movs	r1, r3
    95da:	2304      	movs	r3, #4
    95dc:	001a      	movs	r2, r3
    95de:	4b1e      	ldr	r3, [pc, #120]	; (9658 <pubnub_publish+0x1e8>)
    95e0:	4798      	blx	r3
			pb->http_buf_len += 3;
    95e2:	68fa      	ldr	r2, [r7, #12]
    95e4:	23ac      	movs	r3, #172	; 0xac
    95e6:	005b      	lsls	r3, r3, #1
    95e8:	58d3      	ldr	r3, [r2, r3]
    95ea:	1cd9      	adds	r1, r3, #3
    95ec:	68fa      	ldr	r2, [r7, #12]
    95ee:	23ac      	movs	r3, #172	; 0xac
    95f0:	005b      	lsls	r3, r3, #1
    95f2:	50d1      	str	r1, [r2, r3]
			++pmessage;
    95f4:	69fb      	ldr	r3, [r7, #28]
    95f6:	3301      	adds	r3, #1
    95f8:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    95fa:	69fb      	ldr	r3, [r7, #28]
    95fc:	781b      	ldrb	r3, [r3, #0]
    95fe:	2b00      	cmp	r3, #0
    9600:	d000      	beq.n	9604 <pubnub_publish+0x194>
    9602:	e76f      	b.n	94e4 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    9604:	68fb      	ldr	r3, [r7, #12]
    9606:	2250      	movs	r2, #80	; 0x50
    9608:	5c9b      	ldrb	r3, [r3, r2]
    960a:	2b00      	cmp	r3, #0
    960c:	d108      	bne.n	9620 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    960e:	68fb      	ldr	r3, [r7, #12]
    9610:	2252      	movs	r2, #82	; 0x52
    9612:	2103      	movs	r1, #3
    9614:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    9616:	68fb      	ldr	r3, [r7, #12]
    9618:	0018      	movs	r0, r3
    961a:	4b11      	ldr	r3, [pc, #68]	; (9660 <pubnub_publish+0x1f0>)
    961c:	4798      	blx	r3
    961e:	e003      	b.n	9628 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    9620:	68fb      	ldr	r3, [r7, #12]
    9622:	0018      	movs	r0, r3
    9624:	4b0f      	ldr	r3, [pc, #60]	; (9664 <pubnub_publish+0x1f4>)
    9626:	4798      	blx	r3
	}

	return true;
    9628:	2301      	movs	r3, #1
}
    962a:	0018      	movs	r0, r3
    962c:	46bd      	mov	sp, r7
    962e:	b008      	add	sp, #32
    9630:	bdb0      	pop	{r4, r5, r7, pc}
    9632:	46c0      	nop			; (mov r8, r8)
    9634:	00009339 	.word	0x00009339
    9638:	0000c840 	.word	0x0000c840
    963c:	0000c9fc 	.word	0x0000c9fc
    9640:	0000c854 	.word	0x0000c854
    9644:	0000a19d 	.word	0x0000a19d
    9648:	0000c918 	.word	0x0000c918
    964c:	0000a945 	.word	0x0000a945
    9650:	0000c930 	.word	0x0000c930
    9654:	0000aa1f 	.word	0x0000aa1f
    9658:	0000a249 	.word	0x0000a249
    965c:	0000c97c 	.word	0x0000c97c
    9660:	00009289 	.word	0x00009289
    9664:	00009371 	.word	0x00009371

00009668 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    9668:	b5f0      	push	{r4, r5, r6, r7, lr}
    966a:	4657      	mov	r7, sl
    966c:	464e      	mov	r6, r9
    966e:	4645      	mov	r5, r8
    9670:	b4e0      	push	{r5, r6, r7}
    9672:	b08c      	sub	sp, #48	; 0x30
    9674:	af0a      	add	r7, sp, #40	; 0x28
    9676:	6078      	str	r0, [r7, #4]
    9678:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    967a:	687b      	ldr	r3, [r7, #4]
    967c:	0018      	movs	r0, r3
    967e:	4b4a      	ldr	r3, [pc, #296]	; (97a8 <pubnub_subscribe+0x140>)
    9680:	4798      	blx	r3
    9682:	1e03      	subs	r3, r0, #0
    9684:	d108      	bne.n	9698 <pubnub_subscribe+0x30>
    9686:	4c49      	ldr	r4, [pc, #292]	; (97ac <pubnub_subscribe+0x144>)
    9688:	4a49      	ldr	r2, [pc, #292]	; (97b0 <pubnub_subscribe+0x148>)
    968a:	23c2      	movs	r3, #194	; 0xc2
    968c:	33ff      	adds	r3, #255	; 0xff
    968e:	0019      	movs	r1, r3
    9690:	4848      	ldr	r0, [pc, #288]	; (97b4 <pubnub_subscribe+0x14c>)
    9692:	0023      	movs	r3, r4
    9694:	4c48      	ldr	r4, [pc, #288]	; (97b8 <pubnub_subscribe+0x150>)
    9696:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	2252      	movs	r2, #82	; 0x52
    969c:	5c9b      	ldrb	r3, [r3, r2]
    969e:	2b00      	cmp	r3, #0
    96a0:	d001      	beq.n	96a6 <pubnub_subscribe+0x3e>
		return false;
    96a2:	2300      	movs	r3, #0
    96a4:	e078      	b.n	9798 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    96a6:	687b      	ldr	r3, [r7, #4]
    96a8:	2251      	movs	r2, #81	; 0x51
    96aa:	2101      	movs	r1, #1
    96ac:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    96ae:	687b      	ldr	r3, [r7, #4]
    96b0:	3366      	adds	r3, #102	; 0x66
    96b2:	33ff      	adds	r3, #255	; 0xff
    96b4:	0018      	movs	r0, r3
    96b6:	2380      	movs	r3, #128	; 0x80
    96b8:	009b      	lsls	r3, r3, #2
    96ba:	001a      	movs	r2, r3
    96bc:	2100      	movs	r1, #0
    96be:	4b3f      	ldr	r3, [pc, #252]	; (97bc <pubnub_subscribe+0x154>)
    96c0:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	2254      	movs	r2, #84	; 0x54
    96c6:	4694      	mov	ip, r2
    96c8:	449c      	add	ip, r3
    96ca:	687b      	ldr	r3, [r7, #4]
    96cc:	685b      	ldr	r3, [r3, #4]
    96ce:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    96d0:	687b      	ldr	r3, [r7, #4]
    96d2:	3310      	adds	r3, #16
    96d4:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    96da:	2b00      	cmp	r3, #0
    96dc:	d001      	beq.n	96e2 <pubnub_subscribe+0x7a>
    96de:	4b38      	ldr	r3, [pc, #224]	; (97c0 <pubnub_subscribe+0x158>)
    96e0:	e000      	b.n	96e4 <pubnub_subscribe+0x7c>
    96e2:	4b38      	ldr	r3, [pc, #224]	; (97c4 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    96e4:	687a      	ldr	r2, [r7, #4]
    96e6:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    96e8:	2a00      	cmp	r2, #0
    96ea:	d002      	beq.n	96f2 <pubnub_subscribe+0x8a>
    96ec:	687a      	ldr	r2, [r7, #4]
    96ee:	6892      	ldr	r2, [r2, #8]
    96f0:	e000      	b.n	96f4 <pubnub_subscribe+0x8c>
    96f2:	4a34      	ldr	r2, [pc, #208]	; (97c4 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    96f4:	6879      	ldr	r1, [r7, #4]
    96f6:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    96f8:	2900      	cmp	r1, #0
    96fa:	d005      	beq.n	9708 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    96fc:	6879      	ldr	r1, [r7, #4]
    96fe:	68c9      	ldr	r1, [r1, #12]
    9700:	2900      	cmp	r1, #0
    9702:	d001      	beq.n	9708 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9704:	4930      	ldr	r1, [pc, #192]	; (97c8 <pubnub_subscribe+0x160>)
    9706:	e000      	b.n	970a <pubnub_subscribe+0xa2>
    9708:	492e      	ldr	r1, [pc, #184]	; (97c4 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    970a:	6878      	ldr	r0, [r7, #4]
    970c:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    970e:	2800      	cmp	r0, #0
    9710:	d005      	beq.n	971e <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9712:	6878      	ldr	r0, [r7, #4]
    9714:	68c0      	ldr	r0, [r0, #12]
    9716:	2800      	cmp	r0, #0
    9718:	d001      	beq.n	971e <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    971a:	482c      	ldr	r0, [pc, #176]	; (97cc <pubnub_subscribe+0x164>)
    971c:	e000      	b.n	9720 <pubnub_subscribe+0xb8>
    971e:	4829      	ldr	r0, [pc, #164]	; (97c4 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9720:	687c      	ldr	r4, [r7, #4]
    9722:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9724:	2c00      	cmp	r4, #0
    9726:	d006      	beq.n	9736 <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9728:	687c      	ldr	r4, [r7, #4]
    972a:	68e4      	ldr	r4, [r4, #12]
    972c:	2c00      	cmp	r4, #0
    972e:	d002      	beq.n	9736 <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9730:	687c      	ldr	r4, [r7, #4]
    9732:	68e4      	ldr	r4, [r4, #12]
    9734:	e000      	b.n	9738 <pubnub_subscribe+0xd0>
    9736:	4c23      	ldr	r4, [pc, #140]	; (97c4 <pubnub_subscribe+0x15c>)
    9738:	4e25      	ldr	r6, [pc, #148]	; (97d0 <pubnub_subscribe+0x168>)
    973a:	46b1      	mov	r9, r6
    973c:	2680      	movs	r6, #128	; 0x80
    973e:	0076      	lsls	r6, r6, #1
    9740:	46b0      	mov	r8, r6
    9742:	4e24      	ldr	r6, [pc, #144]	; (97d4 <pubnub_subscribe+0x16c>)
    9744:	9608      	str	r6, [sp, #32]
    9746:	4e1f      	ldr	r6, [pc, #124]	; (97c4 <pubnub_subscribe+0x15c>)
    9748:	9607      	str	r6, [sp, #28]
    974a:	9406      	str	r4, [sp, #24]
    974c:	9005      	str	r0, [sp, #20]
    974e:	9104      	str	r1, [sp, #16]
    9750:	9203      	str	r2, [sp, #12]
    9752:	9302      	str	r3, [sp, #8]
    9754:	9501      	str	r5, [sp, #4]
    9756:	683b      	ldr	r3, [r7, #0]
    9758:	9300      	str	r3, [sp, #0]
    975a:	4653      	mov	r3, sl
    975c:	464a      	mov	r2, r9
    975e:	4641      	mov	r1, r8
    9760:	4660      	mov	r0, ip
    9762:	4c1d      	ldr	r4, [pc, #116]	; (97d8 <pubnub_subscribe+0x170>)
    9764:	47a0      	blx	r4
    9766:	0003      	movs	r3, r0
    9768:	0019      	movs	r1, r3
    976a:	687a      	ldr	r2, [r7, #4]
    976c:	23ac      	movs	r3, #172	; 0xac
    976e:	005b      	lsls	r3, r3, #1
    9770:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    9772:	687b      	ldr	r3, [r7, #4]
    9774:	2250      	movs	r2, #80	; 0x50
    9776:	5c9b      	ldrb	r3, [r3, r2]
    9778:	2b00      	cmp	r3, #0
    977a:	d108      	bne.n	978e <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	2252      	movs	r2, #82	; 0x52
    9780:	2103      	movs	r1, #3
    9782:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    9784:	687b      	ldr	r3, [r7, #4]
    9786:	0018      	movs	r0, r3
    9788:	4b14      	ldr	r3, [pc, #80]	; (97dc <pubnub_subscribe+0x174>)
    978a:	4798      	blx	r3
    978c:	e003      	b.n	9796 <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    978e:	687b      	ldr	r3, [r7, #4]
    9790:	0018      	movs	r0, r3
    9792:	4b13      	ldr	r3, [pc, #76]	; (97e0 <pubnub_subscribe+0x178>)
    9794:	4798      	blx	r3
	}

	return true;
    9796:	2301      	movs	r3, #1
}
    9798:	0018      	movs	r0, r3
    979a:	46bd      	mov	sp, r7
    979c:	b002      	add	sp, #8
    979e:	bc1c      	pop	{r2, r3, r4}
    97a0:	4690      	mov	r8, r2
    97a2:	4699      	mov	r9, r3
    97a4:	46a2      	mov	sl, r4
    97a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97a8:	00009339 	.word	0x00009339
    97ac:	0000c840 	.word	0x0000c840
    97b0:	0000ca0c 	.word	0x0000ca0c
    97b4:	0000c854 	.word	0x0000c854
    97b8:	0000a19d 	.word	0x0000a19d
    97bc:	0000a25b 	.word	0x0000a25b
    97c0:	0000c990 	.word	0x0000c990
    97c4:	0000c998 	.word	0x0000c998
    97c8:	0000c99c 	.word	0x0000c99c
    97cc:	0000c9a0 	.word	0x0000c9a0
    97d0:	0000c9a8 	.word	0x0000c9a8
    97d4:	0000c9e0 	.word	0x0000c9e0
    97d8:	0000a945 	.word	0x0000a945
    97dc:	00009289 	.word	0x00009289
    97e0:	00009371 	.word	0x00009371

000097e4 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    97e4:	b590      	push	{r4, r7, lr}
    97e6:	b085      	sub	sp, #20
    97e8:	af00      	add	r7, sp, #0
    97ea:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    97ec:	687b      	ldr	r3, [r7, #4]
    97ee:	0018      	movs	r0, r3
    97f0:	4b20      	ldr	r3, [pc, #128]	; (9874 <pubnub_get+0x90>)
    97f2:	4798      	blx	r3
    97f4:	1e03      	subs	r3, r0, #0
    97f6:	d108      	bne.n	980a <pubnub_get+0x26>
    97f8:	4c1f      	ldr	r4, [pc, #124]	; (9878 <pubnub_get+0x94>)
    97fa:	4a20      	ldr	r2, [pc, #128]	; (987c <pubnub_get+0x98>)
    97fc:	23e0      	movs	r3, #224	; 0xe0
    97fe:	33ff      	adds	r3, #255	; 0xff
    9800:	0019      	movs	r1, r3
    9802:	481f      	ldr	r0, [pc, #124]	; (9880 <pubnub_get+0x9c>)
    9804:	0023      	movs	r3, r4
    9806:	4c1f      	ldr	r4, [pc, #124]	; (9884 <pubnub_get+0xa0>)
    9808:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	4a1e      	ldr	r2, [pc, #120]	; (9888 <pubnub_get+0xa4>)
    980e:	5a9a      	ldrh	r2, [r3, r2]
    9810:	6879      	ldr	r1, [r7, #4]
    9812:	23da      	movs	r3, #218	; 0xda
    9814:	009b      	lsls	r3, r3, #2
    9816:	5acb      	ldrh	r3, [r1, r3]
    9818:	429a      	cmp	r2, r3
    981a:	d225      	bcs.n	9868 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	3366      	adds	r3, #102	; 0x66
    9820:	33ff      	adds	r3, #255	; 0xff
    9822:	687a      	ldr	r2, [r7, #4]
    9824:	4918      	ldr	r1, [pc, #96]	; (9888 <pubnub_get+0xa4>)
    9826:	5a52      	ldrh	r2, [r2, r1]
    9828:	189b      	adds	r3, r3, r2
    982a:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    982c:	687b      	ldr	r3, [r7, #4]
    982e:	4a16      	ldr	r2, [pc, #88]	; (9888 <pubnub_get+0xa4>)
    9830:	5a9c      	ldrh	r4, [r3, r2]
    9832:	68fb      	ldr	r3, [r7, #12]
    9834:	0018      	movs	r0, r3
    9836:	4b15      	ldr	r3, [pc, #84]	; (988c <pubnub_get+0xa8>)
    9838:	4798      	blx	r3
    983a:	0003      	movs	r3, r0
    983c:	b29b      	uxth	r3, r3
    983e:	18e3      	adds	r3, r4, r3
    9840:	b299      	uxth	r1, r3
    9842:	687b      	ldr	r3, [r7, #4]
    9844:	4a10      	ldr	r2, [pc, #64]	; (9888 <pubnub_get+0xa4>)
    9846:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    9848:	687b      	ldr	r3, [r7, #4]
    984a:	4a0f      	ldr	r2, [pc, #60]	; (9888 <pubnub_get+0xa4>)
    984c:	5a9b      	ldrh	r3, [r3, r2]
    984e:	1c5a      	adds	r2, r3, #1
    9850:	b290      	uxth	r0, r2
    9852:	687a      	ldr	r2, [r7, #4]
    9854:	490c      	ldr	r1, [pc, #48]	; (9888 <pubnub_get+0xa4>)
    9856:	5250      	strh	r0, [r2, r1]
    9858:	6879      	ldr	r1, [r7, #4]
    985a:	22da      	movs	r2, #218	; 0xda
    985c:	0092      	lsls	r2, r2, #2
    985e:	5a8a      	ldrh	r2, [r1, r2]
    9860:	4293      	cmp	r3, r2
    9862:	d801      	bhi.n	9868 <pubnub_get+0x84>
			return rslt;
    9864:	68fb      	ldr	r3, [r7, #12]
    9866:	e000      	b.n	986a <pubnub_get+0x86>
		}
	}

	return NULL;
    9868:	2300      	movs	r3, #0
}
    986a:	0018      	movs	r0, r3
    986c:	46bd      	mov	sp, r7
    986e:	b005      	add	sp, #20
    9870:	bd90      	pop	{r4, r7, pc}
    9872:	46c0      	nop			; (mov r8, r8)
    9874:	00009339 	.word	0x00009339
    9878:	0000c840 	.word	0x0000c840
    987c:	0000ca20 	.word	0x0000ca20
    9880:	0000c854 	.word	0x0000c854
    9884:	0000a19d 	.word	0x0000a19d
    9888:	00000366 	.word	0x00000366
    988c:	0000a9ed 	.word	0x0000a9ed

00009890 <__aeabi_uidiv>:
    9890:	2200      	movs	r2, #0
    9892:	0843      	lsrs	r3, r0, #1
    9894:	428b      	cmp	r3, r1
    9896:	d374      	bcc.n	9982 <__aeabi_uidiv+0xf2>
    9898:	0903      	lsrs	r3, r0, #4
    989a:	428b      	cmp	r3, r1
    989c:	d35f      	bcc.n	995e <__aeabi_uidiv+0xce>
    989e:	0a03      	lsrs	r3, r0, #8
    98a0:	428b      	cmp	r3, r1
    98a2:	d344      	bcc.n	992e <__aeabi_uidiv+0x9e>
    98a4:	0b03      	lsrs	r3, r0, #12
    98a6:	428b      	cmp	r3, r1
    98a8:	d328      	bcc.n	98fc <__aeabi_uidiv+0x6c>
    98aa:	0c03      	lsrs	r3, r0, #16
    98ac:	428b      	cmp	r3, r1
    98ae:	d30d      	bcc.n	98cc <__aeabi_uidiv+0x3c>
    98b0:	22ff      	movs	r2, #255	; 0xff
    98b2:	0209      	lsls	r1, r1, #8
    98b4:	ba12      	rev	r2, r2
    98b6:	0c03      	lsrs	r3, r0, #16
    98b8:	428b      	cmp	r3, r1
    98ba:	d302      	bcc.n	98c2 <__aeabi_uidiv+0x32>
    98bc:	1212      	asrs	r2, r2, #8
    98be:	0209      	lsls	r1, r1, #8
    98c0:	d065      	beq.n	998e <__aeabi_uidiv+0xfe>
    98c2:	0b03      	lsrs	r3, r0, #12
    98c4:	428b      	cmp	r3, r1
    98c6:	d319      	bcc.n	98fc <__aeabi_uidiv+0x6c>
    98c8:	e000      	b.n	98cc <__aeabi_uidiv+0x3c>
    98ca:	0a09      	lsrs	r1, r1, #8
    98cc:	0bc3      	lsrs	r3, r0, #15
    98ce:	428b      	cmp	r3, r1
    98d0:	d301      	bcc.n	98d6 <__aeabi_uidiv+0x46>
    98d2:	03cb      	lsls	r3, r1, #15
    98d4:	1ac0      	subs	r0, r0, r3
    98d6:	4152      	adcs	r2, r2
    98d8:	0b83      	lsrs	r3, r0, #14
    98da:	428b      	cmp	r3, r1
    98dc:	d301      	bcc.n	98e2 <__aeabi_uidiv+0x52>
    98de:	038b      	lsls	r3, r1, #14
    98e0:	1ac0      	subs	r0, r0, r3
    98e2:	4152      	adcs	r2, r2
    98e4:	0b43      	lsrs	r3, r0, #13
    98e6:	428b      	cmp	r3, r1
    98e8:	d301      	bcc.n	98ee <__aeabi_uidiv+0x5e>
    98ea:	034b      	lsls	r3, r1, #13
    98ec:	1ac0      	subs	r0, r0, r3
    98ee:	4152      	adcs	r2, r2
    98f0:	0b03      	lsrs	r3, r0, #12
    98f2:	428b      	cmp	r3, r1
    98f4:	d301      	bcc.n	98fa <__aeabi_uidiv+0x6a>
    98f6:	030b      	lsls	r3, r1, #12
    98f8:	1ac0      	subs	r0, r0, r3
    98fa:	4152      	adcs	r2, r2
    98fc:	0ac3      	lsrs	r3, r0, #11
    98fe:	428b      	cmp	r3, r1
    9900:	d301      	bcc.n	9906 <__aeabi_uidiv+0x76>
    9902:	02cb      	lsls	r3, r1, #11
    9904:	1ac0      	subs	r0, r0, r3
    9906:	4152      	adcs	r2, r2
    9908:	0a83      	lsrs	r3, r0, #10
    990a:	428b      	cmp	r3, r1
    990c:	d301      	bcc.n	9912 <__aeabi_uidiv+0x82>
    990e:	028b      	lsls	r3, r1, #10
    9910:	1ac0      	subs	r0, r0, r3
    9912:	4152      	adcs	r2, r2
    9914:	0a43      	lsrs	r3, r0, #9
    9916:	428b      	cmp	r3, r1
    9918:	d301      	bcc.n	991e <__aeabi_uidiv+0x8e>
    991a:	024b      	lsls	r3, r1, #9
    991c:	1ac0      	subs	r0, r0, r3
    991e:	4152      	adcs	r2, r2
    9920:	0a03      	lsrs	r3, r0, #8
    9922:	428b      	cmp	r3, r1
    9924:	d301      	bcc.n	992a <__aeabi_uidiv+0x9a>
    9926:	020b      	lsls	r3, r1, #8
    9928:	1ac0      	subs	r0, r0, r3
    992a:	4152      	adcs	r2, r2
    992c:	d2cd      	bcs.n	98ca <__aeabi_uidiv+0x3a>
    992e:	09c3      	lsrs	r3, r0, #7
    9930:	428b      	cmp	r3, r1
    9932:	d301      	bcc.n	9938 <__aeabi_uidiv+0xa8>
    9934:	01cb      	lsls	r3, r1, #7
    9936:	1ac0      	subs	r0, r0, r3
    9938:	4152      	adcs	r2, r2
    993a:	0983      	lsrs	r3, r0, #6
    993c:	428b      	cmp	r3, r1
    993e:	d301      	bcc.n	9944 <__aeabi_uidiv+0xb4>
    9940:	018b      	lsls	r3, r1, #6
    9942:	1ac0      	subs	r0, r0, r3
    9944:	4152      	adcs	r2, r2
    9946:	0943      	lsrs	r3, r0, #5
    9948:	428b      	cmp	r3, r1
    994a:	d301      	bcc.n	9950 <__aeabi_uidiv+0xc0>
    994c:	014b      	lsls	r3, r1, #5
    994e:	1ac0      	subs	r0, r0, r3
    9950:	4152      	adcs	r2, r2
    9952:	0903      	lsrs	r3, r0, #4
    9954:	428b      	cmp	r3, r1
    9956:	d301      	bcc.n	995c <__aeabi_uidiv+0xcc>
    9958:	010b      	lsls	r3, r1, #4
    995a:	1ac0      	subs	r0, r0, r3
    995c:	4152      	adcs	r2, r2
    995e:	08c3      	lsrs	r3, r0, #3
    9960:	428b      	cmp	r3, r1
    9962:	d301      	bcc.n	9968 <__aeabi_uidiv+0xd8>
    9964:	00cb      	lsls	r3, r1, #3
    9966:	1ac0      	subs	r0, r0, r3
    9968:	4152      	adcs	r2, r2
    996a:	0883      	lsrs	r3, r0, #2
    996c:	428b      	cmp	r3, r1
    996e:	d301      	bcc.n	9974 <__aeabi_uidiv+0xe4>
    9970:	008b      	lsls	r3, r1, #2
    9972:	1ac0      	subs	r0, r0, r3
    9974:	4152      	adcs	r2, r2
    9976:	0843      	lsrs	r3, r0, #1
    9978:	428b      	cmp	r3, r1
    997a:	d301      	bcc.n	9980 <__aeabi_uidiv+0xf0>
    997c:	004b      	lsls	r3, r1, #1
    997e:	1ac0      	subs	r0, r0, r3
    9980:	4152      	adcs	r2, r2
    9982:	1a41      	subs	r1, r0, r1
    9984:	d200      	bcs.n	9988 <__aeabi_uidiv+0xf8>
    9986:	4601      	mov	r1, r0
    9988:	4152      	adcs	r2, r2
    998a:	4610      	mov	r0, r2
    998c:	4770      	bx	lr
    998e:	e7ff      	b.n	9990 <__aeabi_uidiv+0x100>
    9990:	b501      	push	{r0, lr}
    9992:	2000      	movs	r0, #0
    9994:	f000 f8f0 	bl	9b78 <__aeabi_idiv0>
    9998:	bd02      	pop	{r1, pc}
    999a:	46c0      	nop			; (mov r8, r8)

0000999c <__aeabi_uidivmod>:
    999c:	2900      	cmp	r1, #0
    999e:	d0f7      	beq.n	9990 <__aeabi_uidiv+0x100>
    99a0:	e776      	b.n	9890 <__aeabi_uidiv>
    99a2:	4770      	bx	lr

000099a4 <__aeabi_idiv>:
    99a4:	4603      	mov	r3, r0
    99a6:	430b      	orrs	r3, r1
    99a8:	d47f      	bmi.n	9aaa <__aeabi_idiv+0x106>
    99aa:	2200      	movs	r2, #0
    99ac:	0843      	lsrs	r3, r0, #1
    99ae:	428b      	cmp	r3, r1
    99b0:	d374      	bcc.n	9a9c <__aeabi_idiv+0xf8>
    99b2:	0903      	lsrs	r3, r0, #4
    99b4:	428b      	cmp	r3, r1
    99b6:	d35f      	bcc.n	9a78 <__aeabi_idiv+0xd4>
    99b8:	0a03      	lsrs	r3, r0, #8
    99ba:	428b      	cmp	r3, r1
    99bc:	d344      	bcc.n	9a48 <__aeabi_idiv+0xa4>
    99be:	0b03      	lsrs	r3, r0, #12
    99c0:	428b      	cmp	r3, r1
    99c2:	d328      	bcc.n	9a16 <__aeabi_idiv+0x72>
    99c4:	0c03      	lsrs	r3, r0, #16
    99c6:	428b      	cmp	r3, r1
    99c8:	d30d      	bcc.n	99e6 <__aeabi_idiv+0x42>
    99ca:	22ff      	movs	r2, #255	; 0xff
    99cc:	0209      	lsls	r1, r1, #8
    99ce:	ba12      	rev	r2, r2
    99d0:	0c03      	lsrs	r3, r0, #16
    99d2:	428b      	cmp	r3, r1
    99d4:	d302      	bcc.n	99dc <__aeabi_idiv+0x38>
    99d6:	1212      	asrs	r2, r2, #8
    99d8:	0209      	lsls	r1, r1, #8
    99da:	d065      	beq.n	9aa8 <__aeabi_idiv+0x104>
    99dc:	0b03      	lsrs	r3, r0, #12
    99de:	428b      	cmp	r3, r1
    99e0:	d319      	bcc.n	9a16 <__aeabi_idiv+0x72>
    99e2:	e000      	b.n	99e6 <__aeabi_idiv+0x42>
    99e4:	0a09      	lsrs	r1, r1, #8
    99e6:	0bc3      	lsrs	r3, r0, #15
    99e8:	428b      	cmp	r3, r1
    99ea:	d301      	bcc.n	99f0 <__aeabi_idiv+0x4c>
    99ec:	03cb      	lsls	r3, r1, #15
    99ee:	1ac0      	subs	r0, r0, r3
    99f0:	4152      	adcs	r2, r2
    99f2:	0b83      	lsrs	r3, r0, #14
    99f4:	428b      	cmp	r3, r1
    99f6:	d301      	bcc.n	99fc <__aeabi_idiv+0x58>
    99f8:	038b      	lsls	r3, r1, #14
    99fa:	1ac0      	subs	r0, r0, r3
    99fc:	4152      	adcs	r2, r2
    99fe:	0b43      	lsrs	r3, r0, #13
    9a00:	428b      	cmp	r3, r1
    9a02:	d301      	bcc.n	9a08 <__aeabi_idiv+0x64>
    9a04:	034b      	lsls	r3, r1, #13
    9a06:	1ac0      	subs	r0, r0, r3
    9a08:	4152      	adcs	r2, r2
    9a0a:	0b03      	lsrs	r3, r0, #12
    9a0c:	428b      	cmp	r3, r1
    9a0e:	d301      	bcc.n	9a14 <__aeabi_idiv+0x70>
    9a10:	030b      	lsls	r3, r1, #12
    9a12:	1ac0      	subs	r0, r0, r3
    9a14:	4152      	adcs	r2, r2
    9a16:	0ac3      	lsrs	r3, r0, #11
    9a18:	428b      	cmp	r3, r1
    9a1a:	d301      	bcc.n	9a20 <__aeabi_idiv+0x7c>
    9a1c:	02cb      	lsls	r3, r1, #11
    9a1e:	1ac0      	subs	r0, r0, r3
    9a20:	4152      	adcs	r2, r2
    9a22:	0a83      	lsrs	r3, r0, #10
    9a24:	428b      	cmp	r3, r1
    9a26:	d301      	bcc.n	9a2c <__aeabi_idiv+0x88>
    9a28:	028b      	lsls	r3, r1, #10
    9a2a:	1ac0      	subs	r0, r0, r3
    9a2c:	4152      	adcs	r2, r2
    9a2e:	0a43      	lsrs	r3, r0, #9
    9a30:	428b      	cmp	r3, r1
    9a32:	d301      	bcc.n	9a38 <__aeabi_idiv+0x94>
    9a34:	024b      	lsls	r3, r1, #9
    9a36:	1ac0      	subs	r0, r0, r3
    9a38:	4152      	adcs	r2, r2
    9a3a:	0a03      	lsrs	r3, r0, #8
    9a3c:	428b      	cmp	r3, r1
    9a3e:	d301      	bcc.n	9a44 <__aeabi_idiv+0xa0>
    9a40:	020b      	lsls	r3, r1, #8
    9a42:	1ac0      	subs	r0, r0, r3
    9a44:	4152      	adcs	r2, r2
    9a46:	d2cd      	bcs.n	99e4 <__aeabi_idiv+0x40>
    9a48:	09c3      	lsrs	r3, r0, #7
    9a4a:	428b      	cmp	r3, r1
    9a4c:	d301      	bcc.n	9a52 <__aeabi_idiv+0xae>
    9a4e:	01cb      	lsls	r3, r1, #7
    9a50:	1ac0      	subs	r0, r0, r3
    9a52:	4152      	adcs	r2, r2
    9a54:	0983      	lsrs	r3, r0, #6
    9a56:	428b      	cmp	r3, r1
    9a58:	d301      	bcc.n	9a5e <__aeabi_idiv+0xba>
    9a5a:	018b      	lsls	r3, r1, #6
    9a5c:	1ac0      	subs	r0, r0, r3
    9a5e:	4152      	adcs	r2, r2
    9a60:	0943      	lsrs	r3, r0, #5
    9a62:	428b      	cmp	r3, r1
    9a64:	d301      	bcc.n	9a6a <__aeabi_idiv+0xc6>
    9a66:	014b      	lsls	r3, r1, #5
    9a68:	1ac0      	subs	r0, r0, r3
    9a6a:	4152      	adcs	r2, r2
    9a6c:	0903      	lsrs	r3, r0, #4
    9a6e:	428b      	cmp	r3, r1
    9a70:	d301      	bcc.n	9a76 <__aeabi_idiv+0xd2>
    9a72:	010b      	lsls	r3, r1, #4
    9a74:	1ac0      	subs	r0, r0, r3
    9a76:	4152      	adcs	r2, r2
    9a78:	08c3      	lsrs	r3, r0, #3
    9a7a:	428b      	cmp	r3, r1
    9a7c:	d301      	bcc.n	9a82 <__aeabi_idiv+0xde>
    9a7e:	00cb      	lsls	r3, r1, #3
    9a80:	1ac0      	subs	r0, r0, r3
    9a82:	4152      	adcs	r2, r2
    9a84:	0883      	lsrs	r3, r0, #2
    9a86:	428b      	cmp	r3, r1
    9a88:	d301      	bcc.n	9a8e <__aeabi_idiv+0xea>
    9a8a:	008b      	lsls	r3, r1, #2
    9a8c:	1ac0      	subs	r0, r0, r3
    9a8e:	4152      	adcs	r2, r2
    9a90:	0843      	lsrs	r3, r0, #1
    9a92:	428b      	cmp	r3, r1
    9a94:	d301      	bcc.n	9a9a <__aeabi_idiv+0xf6>
    9a96:	004b      	lsls	r3, r1, #1
    9a98:	1ac0      	subs	r0, r0, r3
    9a9a:	4152      	adcs	r2, r2
    9a9c:	1a41      	subs	r1, r0, r1
    9a9e:	d200      	bcs.n	9aa2 <__aeabi_idiv+0xfe>
    9aa0:	4601      	mov	r1, r0
    9aa2:	4152      	adcs	r2, r2
    9aa4:	4610      	mov	r0, r2
    9aa6:	4770      	bx	lr
    9aa8:	e05d      	b.n	9b66 <__aeabi_idiv+0x1c2>
    9aaa:	0fca      	lsrs	r2, r1, #31
    9aac:	d000      	beq.n	9ab0 <__aeabi_idiv+0x10c>
    9aae:	4249      	negs	r1, r1
    9ab0:	1003      	asrs	r3, r0, #32
    9ab2:	d300      	bcc.n	9ab6 <__aeabi_idiv+0x112>
    9ab4:	4240      	negs	r0, r0
    9ab6:	4053      	eors	r3, r2
    9ab8:	2200      	movs	r2, #0
    9aba:	469c      	mov	ip, r3
    9abc:	0903      	lsrs	r3, r0, #4
    9abe:	428b      	cmp	r3, r1
    9ac0:	d32d      	bcc.n	9b1e <__aeabi_idiv+0x17a>
    9ac2:	0a03      	lsrs	r3, r0, #8
    9ac4:	428b      	cmp	r3, r1
    9ac6:	d312      	bcc.n	9aee <__aeabi_idiv+0x14a>
    9ac8:	22fc      	movs	r2, #252	; 0xfc
    9aca:	0189      	lsls	r1, r1, #6
    9acc:	ba12      	rev	r2, r2
    9ace:	0a03      	lsrs	r3, r0, #8
    9ad0:	428b      	cmp	r3, r1
    9ad2:	d30c      	bcc.n	9aee <__aeabi_idiv+0x14a>
    9ad4:	0189      	lsls	r1, r1, #6
    9ad6:	1192      	asrs	r2, r2, #6
    9ad8:	428b      	cmp	r3, r1
    9ada:	d308      	bcc.n	9aee <__aeabi_idiv+0x14a>
    9adc:	0189      	lsls	r1, r1, #6
    9ade:	1192      	asrs	r2, r2, #6
    9ae0:	428b      	cmp	r3, r1
    9ae2:	d304      	bcc.n	9aee <__aeabi_idiv+0x14a>
    9ae4:	0189      	lsls	r1, r1, #6
    9ae6:	d03a      	beq.n	9b5e <__aeabi_idiv+0x1ba>
    9ae8:	1192      	asrs	r2, r2, #6
    9aea:	e000      	b.n	9aee <__aeabi_idiv+0x14a>
    9aec:	0989      	lsrs	r1, r1, #6
    9aee:	09c3      	lsrs	r3, r0, #7
    9af0:	428b      	cmp	r3, r1
    9af2:	d301      	bcc.n	9af8 <__aeabi_idiv+0x154>
    9af4:	01cb      	lsls	r3, r1, #7
    9af6:	1ac0      	subs	r0, r0, r3
    9af8:	4152      	adcs	r2, r2
    9afa:	0983      	lsrs	r3, r0, #6
    9afc:	428b      	cmp	r3, r1
    9afe:	d301      	bcc.n	9b04 <__aeabi_idiv+0x160>
    9b00:	018b      	lsls	r3, r1, #6
    9b02:	1ac0      	subs	r0, r0, r3
    9b04:	4152      	adcs	r2, r2
    9b06:	0943      	lsrs	r3, r0, #5
    9b08:	428b      	cmp	r3, r1
    9b0a:	d301      	bcc.n	9b10 <__aeabi_idiv+0x16c>
    9b0c:	014b      	lsls	r3, r1, #5
    9b0e:	1ac0      	subs	r0, r0, r3
    9b10:	4152      	adcs	r2, r2
    9b12:	0903      	lsrs	r3, r0, #4
    9b14:	428b      	cmp	r3, r1
    9b16:	d301      	bcc.n	9b1c <__aeabi_idiv+0x178>
    9b18:	010b      	lsls	r3, r1, #4
    9b1a:	1ac0      	subs	r0, r0, r3
    9b1c:	4152      	adcs	r2, r2
    9b1e:	08c3      	lsrs	r3, r0, #3
    9b20:	428b      	cmp	r3, r1
    9b22:	d301      	bcc.n	9b28 <__aeabi_idiv+0x184>
    9b24:	00cb      	lsls	r3, r1, #3
    9b26:	1ac0      	subs	r0, r0, r3
    9b28:	4152      	adcs	r2, r2
    9b2a:	0883      	lsrs	r3, r0, #2
    9b2c:	428b      	cmp	r3, r1
    9b2e:	d301      	bcc.n	9b34 <__aeabi_idiv+0x190>
    9b30:	008b      	lsls	r3, r1, #2
    9b32:	1ac0      	subs	r0, r0, r3
    9b34:	4152      	adcs	r2, r2
    9b36:	d2d9      	bcs.n	9aec <__aeabi_idiv+0x148>
    9b38:	0843      	lsrs	r3, r0, #1
    9b3a:	428b      	cmp	r3, r1
    9b3c:	d301      	bcc.n	9b42 <__aeabi_idiv+0x19e>
    9b3e:	004b      	lsls	r3, r1, #1
    9b40:	1ac0      	subs	r0, r0, r3
    9b42:	4152      	adcs	r2, r2
    9b44:	1a41      	subs	r1, r0, r1
    9b46:	d200      	bcs.n	9b4a <__aeabi_idiv+0x1a6>
    9b48:	4601      	mov	r1, r0
    9b4a:	4663      	mov	r3, ip
    9b4c:	4152      	adcs	r2, r2
    9b4e:	105b      	asrs	r3, r3, #1
    9b50:	4610      	mov	r0, r2
    9b52:	d301      	bcc.n	9b58 <__aeabi_idiv+0x1b4>
    9b54:	4240      	negs	r0, r0
    9b56:	2b00      	cmp	r3, #0
    9b58:	d500      	bpl.n	9b5c <__aeabi_idiv+0x1b8>
    9b5a:	4249      	negs	r1, r1
    9b5c:	4770      	bx	lr
    9b5e:	4663      	mov	r3, ip
    9b60:	105b      	asrs	r3, r3, #1
    9b62:	d300      	bcc.n	9b66 <__aeabi_idiv+0x1c2>
    9b64:	4240      	negs	r0, r0
    9b66:	b501      	push	{r0, lr}
    9b68:	2000      	movs	r0, #0
    9b6a:	f000 f805 	bl	9b78 <__aeabi_idiv0>
    9b6e:	bd02      	pop	{r1, pc}

00009b70 <__aeabi_idivmod>:
    9b70:	2900      	cmp	r1, #0
    9b72:	d0f8      	beq.n	9b66 <__aeabi_idiv+0x1c2>
    9b74:	e716      	b.n	99a4 <__aeabi_idiv>
    9b76:	4770      	bx	lr

00009b78 <__aeabi_idiv0>:
    9b78:	4770      	bx	lr
    9b7a:	46c0      	nop			; (mov r8, r8)

00009b7c <__aeabi_dmul>:
    9b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b7e:	465f      	mov	r7, fp
    9b80:	4656      	mov	r6, sl
    9b82:	464d      	mov	r5, r9
    9b84:	4644      	mov	r4, r8
    9b86:	b4f0      	push	{r4, r5, r6, r7}
    9b88:	030d      	lsls	r5, r1, #12
    9b8a:	4699      	mov	r9, r3
    9b8c:	004e      	lsls	r6, r1, #1
    9b8e:	0b2b      	lsrs	r3, r5, #12
    9b90:	b087      	sub	sp, #28
    9b92:	0007      	movs	r7, r0
    9b94:	4692      	mov	sl, r2
    9b96:	4680      	mov	r8, r0
    9b98:	469b      	mov	fp, r3
    9b9a:	0d76      	lsrs	r6, r6, #21
    9b9c:	0fcc      	lsrs	r4, r1, #31
    9b9e:	2e00      	cmp	r6, #0
    9ba0:	d069      	beq.n	9c76 <__aeabi_dmul+0xfa>
    9ba2:	4b6d      	ldr	r3, [pc, #436]	; (9d58 <__aeabi_dmul+0x1dc>)
    9ba4:	429e      	cmp	r6, r3
    9ba6:	d035      	beq.n	9c14 <__aeabi_dmul+0x98>
    9ba8:	465b      	mov	r3, fp
    9baa:	2280      	movs	r2, #128	; 0x80
    9bac:	00dd      	lsls	r5, r3, #3
    9bae:	0412      	lsls	r2, r2, #16
    9bb0:	0f43      	lsrs	r3, r0, #29
    9bb2:	4313      	orrs	r3, r2
    9bb4:	432b      	orrs	r3, r5
    9bb6:	469b      	mov	fp, r3
    9bb8:	00c3      	lsls	r3, r0, #3
    9bba:	4698      	mov	r8, r3
    9bbc:	4b67      	ldr	r3, [pc, #412]	; (9d5c <__aeabi_dmul+0x1e0>)
    9bbe:	2700      	movs	r7, #0
    9bc0:	469c      	mov	ip, r3
    9bc2:	2300      	movs	r3, #0
    9bc4:	4466      	add	r6, ip
    9bc6:	9301      	str	r3, [sp, #4]
    9bc8:	464a      	mov	r2, r9
    9bca:	0315      	lsls	r5, r2, #12
    9bcc:	0050      	lsls	r0, r2, #1
    9bce:	0fd2      	lsrs	r2, r2, #31
    9bd0:	4653      	mov	r3, sl
    9bd2:	0b2d      	lsrs	r5, r5, #12
    9bd4:	0d40      	lsrs	r0, r0, #21
    9bd6:	4691      	mov	r9, r2
    9bd8:	d100      	bne.n	9bdc <__aeabi_dmul+0x60>
    9bda:	e076      	b.n	9cca <__aeabi_dmul+0x14e>
    9bdc:	4a5e      	ldr	r2, [pc, #376]	; (9d58 <__aeabi_dmul+0x1dc>)
    9bde:	4290      	cmp	r0, r2
    9be0:	d06c      	beq.n	9cbc <__aeabi_dmul+0x140>
    9be2:	2280      	movs	r2, #128	; 0x80
    9be4:	0f5b      	lsrs	r3, r3, #29
    9be6:	0412      	lsls	r2, r2, #16
    9be8:	4313      	orrs	r3, r2
    9bea:	4a5c      	ldr	r2, [pc, #368]	; (9d5c <__aeabi_dmul+0x1e0>)
    9bec:	00ed      	lsls	r5, r5, #3
    9bee:	4694      	mov	ip, r2
    9bf0:	431d      	orrs	r5, r3
    9bf2:	4653      	mov	r3, sl
    9bf4:	2200      	movs	r2, #0
    9bf6:	00db      	lsls	r3, r3, #3
    9bf8:	4460      	add	r0, ip
    9bfa:	4649      	mov	r1, r9
    9bfc:	1836      	adds	r6, r6, r0
    9bfe:	1c70      	adds	r0, r6, #1
    9c00:	4061      	eors	r1, r4
    9c02:	9002      	str	r0, [sp, #8]
    9c04:	4317      	orrs	r7, r2
    9c06:	2f0f      	cmp	r7, #15
    9c08:	d900      	bls.n	9c0c <__aeabi_dmul+0x90>
    9c0a:	e0af      	b.n	9d6c <__aeabi_dmul+0x1f0>
    9c0c:	4854      	ldr	r0, [pc, #336]	; (9d60 <__aeabi_dmul+0x1e4>)
    9c0e:	00bf      	lsls	r7, r7, #2
    9c10:	59c7      	ldr	r7, [r0, r7]
    9c12:	46bf      	mov	pc, r7
    9c14:	465b      	mov	r3, fp
    9c16:	431f      	orrs	r7, r3
    9c18:	d000      	beq.n	9c1c <__aeabi_dmul+0xa0>
    9c1a:	e088      	b.n	9d2e <__aeabi_dmul+0x1b2>
    9c1c:	2300      	movs	r3, #0
    9c1e:	469b      	mov	fp, r3
    9c20:	4698      	mov	r8, r3
    9c22:	3302      	adds	r3, #2
    9c24:	2708      	movs	r7, #8
    9c26:	9301      	str	r3, [sp, #4]
    9c28:	e7ce      	b.n	9bc8 <__aeabi_dmul+0x4c>
    9c2a:	4649      	mov	r1, r9
    9c2c:	2a02      	cmp	r2, #2
    9c2e:	d06a      	beq.n	9d06 <__aeabi_dmul+0x18a>
    9c30:	2a03      	cmp	r2, #3
    9c32:	d100      	bne.n	9c36 <__aeabi_dmul+0xba>
    9c34:	e209      	b.n	a04a <__aeabi_dmul+0x4ce>
    9c36:	2a01      	cmp	r2, #1
    9c38:	d000      	beq.n	9c3c <__aeabi_dmul+0xc0>
    9c3a:	e1bb      	b.n	9fb4 <__aeabi_dmul+0x438>
    9c3c:	4011      	ands	r1, r2
    9c3e:	2200      	movs	r2, #0
    9c40:	2300      	movs	r3, #0
    9c42:	2500      	movs	r5, #0
    9c44:	4690      	mov	r8, r2
    9c46:	b2cc      	uxtb	r4, r1
    9c48:	2100      	movs	r1, #0
    9c4a:	032d      	lsls	r5, r5, #12
    9c4c:	0d0a      	lsrs	r2, r1, #20
    9c4e:	0512      	lsls	r2, r2, #20
    9c50:	0b2d      	lsrs	r5, r5, #12
    9c52:	4315      	orrs	r5, r2
    9c54:	4a43      	ldr	r2, [pc, #268]	; (9d64 <__aeabi_dmul+0x1e8>)
    9c56:	051b      	lsls	r3, r3, #20
    9c58:	4015      	ands	r5, r2
    9c5a:	431d      	orrs	r5, r3
    9c5c:	006d      	lsls	r5, r5, #1
    9c5e:	07e4      	lsls	r4, r4, #31
    9c60:	086d      	lsrs	r5, r5, #1
    9c62:	4325      	orrs	r5, r4
    9c64:	4640      	mov	r0, r8
    9c66:	0029      	movs	r1, r5
    9c68:	b007      	add	sp, #28
    9c6a:	bc3c      	pop	{r2, r3, r4, r5}
    9c6c:	4690      	mov	r8, r2
    9c6e:	4699      	mov	r9, r3
    9c70:	46a2      	mov	sl, r4
    9c72:	46ab      	mov	fp, r5
    9c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c76:	4303      	orrs	r3, r0
    9c78:	d052      	beq.n	9d20 <__aeabi_dmul+0x1a4>
    9c7a:	465b      	mov	r3, fp
    9c7c:	2b00      	cmp	r3, #0
    9c7e:	d100      	bne.n	9c82 <__aeabi_dmul+0x106>
    9c80:	e18a      	b.n	9f98 <__aeabi_dmul+0x41c>
    9c82:	4658      	mov	r0, fp
    9c84:	f000 fa6c 	bl	a160 <__clzsi2>
    9c88:	0003      	movs	r3, r0
    9c8a:	3b0b      	subs	r3, #11
    9c8c:	2b1c      	cmp	r3, #28
    9c8e:	dd00      	ble.n	9c92 <__aeabi_dmul+0x116>
    9c90:	e17b      	b.n	9f8a <__aeabi_dmul+0x40e>
    9c92:	221d      	movs	r2, #29
    9c94:	1ad3      	subs	r3, r2, r3
    9c96:	003a      	movs	r2, r7
    9c98:	0001      	movs	r1, r0
    9c9a:	465d      	mov	r5, fp
    9c9c:	40da      	lsrs	r2, r3
    9c9e:	3908      	subs	r1, #8
    9ca0:	408d      	lsls	r5, r1
    9ca2:	0013      	movs	r3, r2
    9ca4:	408f      	lsls	r7, r1
    9ca6:	432b      	orrs	r3, r5
    9ca8:	469b      	mov	fp, r3
    9caa:	46b8      	mov	r8, r7
    9cac:	4b2e      	ldr	r3, [pc, #184]	; (9d68 <__aeabi_dmul+0x1ec>)
    9cae:	2700      	movs	r7, #0
    9cb0:	469c      	mov	ip, r3
    9cb2:	2300      	movs	r3, #0
    9cb4:	4460      	add	r0, ip
    9cb6:	4246      	negs	r6, r0
    9cb8:	9301      	str	r3, [sp, #4]
    9cba:	e785      	b.n	9bc8 <__aeabi_dmul+0x4c>
    9cbc:	4652      	mov	r2, sl
    9cbe:	432a      	orrs	r2, r5
    9cc0:	d12c      	bne.n	9d1c <__aeabi_dmul+0x1a0>
    9cc2:	2500      	movs	r5, #0
    9cc4:	2300      	movs	r3, #0
    9cc6:	2202      	movs	r2, #2
    9cc8:	e797      	b.n	9bfa <__aeabi_dmul+0x7e>
    9cca:	4652      	mov	r2, sl
    9ccc:	432a      	orrs	r2, r5
    9cce:	d021      	beq.n	9d14 <__aeabi_dmul+0x198>
    9cd0:	2d00      	cmp	r5, #0
    9cd2:	d100      	bne.n	9cd6 <__aeabi_dmul+0x15a>
    9cd4:	e154      	b.n	9f80 <__aeabi_dmul+0x404>
    9cd6:	0028      	movs	r0, r5
    9cd8:	f000 fa42 	bl	a160 <__clzsi2>
    9cdc:	0003      	movs	r3, r0
    9cde:	3b0b      	subs	r3, #11
    9ce0:	2b1c      	cmp	r3, #28
    9ce2:	dd00      	ble.n	9ce6 <__aeabi_dmul+0x16a>
    9ce4:	e146      	b.n	9f74 <__aeabi_dmul+0x3f8>
    9ce6:	211d      	movs	r1, #29
    9ce8:	1acb      	subs	r3, r1, r3
    9cea:	4651      	mov	r1, sl
    9cec:	0002      	movs	r2, r0
    9cee:	40d9      	lsrs	r1, r3
    9cf0:	4653      	mov	r3, sl
    9cf2:	3a08      	subs	r2, #8
    9cf4:	4095      	lsls	r5, r2
    9cf6:	4093      	lsls	r3, r2
    9cf8:	430d      	orrs	r5, r1
    9cfa:	4a1b      	ldr	r2, [pc, #108]	; (9d68 <__aeabi_dmul+0x1ec>)
    9cfc:	4694      	mov	ip, r2
    9cfe:	4460      	add	r0, ip
    9d00:	4240      	negs	r0, r0
    9d02:	2200      	movs	r2, #0
    9d04:	e779      	b.n	9bfa <__aeabi_dmul+0x7e>
    9d06:	2401      	movs	r4, #1
    9d08:	2200      	movs	r2, #0
    9d0a:	400c      	ands	r4, r1
    9d0c:	4b12      	ldr	r3, [pc, #72]	; (9d58 <__aeabi_dmul+0x1dc>)
    9d0e:	2500      	movs	r5, #0
    9d10:	4690      	mov	r8, r2
    9d12:	e799      	b.n	9c48 <__aeabi_dmul+0xcc>
    9d14:	2500      	movs	r5, #0
    9d16:	2300      	movs	r3, #0
    9d18:	2201      	movs	r2, #1
    9d1a:	e76e      	b.n	9bfa <__aeabi_dmul+0x7e>
    9d1c:	2203      	movs	r2, #3
    9d1e:	e76c      	b.n	9bfa <__aeabi_dmul+0x7e>
    9d20:	2300      	movs	r3, #0
    9d22:	469b      	mov	fp, r3
    9d24:	4698      	mov	r8, r3
    9d26:	3301      	adds	r3, #1
    9d28:	2704      	movs	r7, #4
    9d2a:	9301      	str	r3, [sp, #4]
    9d2c:	e74c      	b.n	9bc8 <__aeabi_dmul+0x4c>
    9d2e:	2303      	movs	r3, #3
    9d30:	270c      	movs	r7, #12
    9d32:	9301      	str	r3, [sp, #4]
    9d34:	e748      	b.n	9bc8 <__aeabi_dmul+0x4c>
    9d36:	2300      	movs	r3, #0
    9d38:	2580      	movs	r5, #128	; 0x80
    9d3a:	4698      	mov	r8, r3
    9d3c:	2400      	movs	r4, #0
    9d3e:	032d      	lsls	r5, r5, #12
    9d40:	4b05      	ldr	r3, [pc, #20]	; (9d58 <__aeabi_dmul+0x1dc>)
    9d42:	e781      	b.n	9c48 <__aeabi_dmul+0xcc>
    9d44:	465d      	mov	r5, fp
    9d46:	4643      	mov	r3, r8
    9d48:	9a01      	ldr	r2, [sp, #4]
    9d4a:	e76f      	b.n	9c2c <__aeabi_dmul+0xb0>
    9d4c:	465d      	mov	r5, fp
    9d4e:	4643      	mov	r3, r8
    9d50:	0021      	movs	r1, r4
    9d52:	9a01      	ldr	r2, [sp, #4]
    9d54:	e76a      	b.n	9c2c <__aeabi_dmul+0xb0>
    9d56:	46c0      	nop			; (mov r8, r8)
    9d58:	000007ff 	.word	0x000007ff
    9d5c:	fffffc01 	.word	0xfffffc01
    9d60:	0000ca2c 	.word	0x0000ca2c
    9d64:	800fffff 	.word	0x800fffff
    9d68:	000003f3 	.word	0x000003f3
    9d6c:	4642      	mov	r2, r8
    9d6e:	0c12      	lsrs	r2, r2, #16
    9d70:	4691      	mov	r9, r2
    9d72:	0c1a      	lsrs	r2, r3, #16
    9d74:	4694      	mov	ip, r2
    9d76:	4642      	mov	r2, r8
    9d78:	0417      	lsls	r7, r2, #16
    9d7a:	464a      	mov	r2, r9
    9d7c:	041b      	lsls	r3, r3, #16
    9d7e:	0c1b      	lsrs	r3, r3, #16
    9d80:	435a      	muls	r2, r3
    9d82:	4660      	mov	r0, ip
    9d84:	4690      	mov	r8, r2
    9d86:	464a      	mov	r2, r9
    9d88:	4342      	muls	r2, r0
    9d8a:	0010      	movs	r0, r2
    9d8c:	9203      	str	r2, [sp, #12]
    9d8e:	4662      	mov	r2, ip
    9d90:	001c      	movs	r4, r3
    9d92:	0c3f      	lsrs	r7, r7, #16
    9d94:	437a      	muls	r2, r7
    9d96:	437c      	muls	r4, r7
    9d98:	4442      	add	r2, r8
    9d9a:	9201      	str	r2, [sp, #4]
    9d9c:	0c22      	lsrs	r2, r4, #16
    9d9e:	4692      	mov	sl, r2
    9da0:	9a01      	ldr	r2, [sp, #4]
    9da2:	4452      	add	r2, sl
    9da4:	4590      	cmp	r8, r2
    9da6:	d906      	bls.n	9db6 <__aeabi_dmul+0x23a>
    9da8:	4682      	mov	sl, r0
    9daa:	2080      	movs	r0, #128	; 0x80
    9dac:	0240      	lsls	r0, r0, #9
    9dae:	4680      	mov	r8, r0
    9db0:	44c2      	add	sl, r8
    9db2:	4650      	mov	r0, sl
    9db4:	9003      	str	r0, [sp, #12]
    9db6:	0c10      	lsrs	r0, r2, #16
    9db8:	9004      	str	r0, [sp, #16]
    9dba:	4648      	mov	r0, r9
    9dbc:	0424      	lsls	r4, r4, #16
    9dbe:	0c24      	lsrs	r4, r4, #16
    9dc0:	0412      	lsls	r2, r2, #16
    9dc2:	1912      	adds	r2, r2, r4
    9dc4:	9205      	str	r2, [sp, #20]
    9dc6:	0c2a      	lsrs	r2, r5, #16
    9dc8:	042d      	lsls	r5, r5, #16
    9dca:	0c2d      	lsrs	r5, r5, #16
    9dcc:	4368      	muls	r0, r5
    9dce:	002c      	movs	r4, r5
    9dd0:	4682      	mov	sl, r0
    9dd2:	4648      	mov	r0, r9
    9dd4:	437c      	muls	r4, r7
    9dd6:	4350      	muls	r0, r2
    9dd8:	4681      	mov	r9, r0
    9dda:	0c20      	lsrs	r0, r4, #16
    9ddc:	4680      	mov	r8, r0
    9dde:	4357      	muls	r7, r2
    9de0:	4457      	add	r7, sl
    9de2:	4447      	add	r7, r8
    9de4:	45ba      	cmp	sl, r7
    9de6:	d903      	bls.n	9df0 <__aeabi_dmul+0x274>
    9de8:	2080      	movs	r0, #128	; 0x80
    9dea:	0240      	lsls	r0, r0, #9
    9dec:	4680      	mov	r8, r0
    9dee:	44c1      	add	r9, r8
    9df0:	0c38      	lsrs	r0, r7, #16
    9df2:	043f      	lsls	r7, r7, #16
    9df4:	46b8      	mov	r8, r7
    9df6:	4448      	add	r0, r9
    9df8:	0424      	lsls	r4, r4, #16
    9dfa:	0c24      	lsrs	r4, r4, #16
    9dfc:	9001      	str	r0, [sp, #4]
    9dfe:	9804      	ldr	r0, [sp, #16]
    9e00:	44a0      	add	r8, r4
    9e02:	4440      	add	r0, r8
    9e04:	9004      	str	r0, [sp, #16]
    9e06:	4658      	mov	r0, fp
    9e08:	0c00      	lsrs	r0, r0, #16
    9e0a:	4681      	mov	r9, r0
    9e0c:	4658      	mov	r0, fp
    9e0e:	0404      	lsls	r4, r0, #16
    9e10:	0c20      	lsrs	r0, r4, #16
    9e12:	4682      	mov	sl, r0
    9e14:	0007      	movs	r7, r0
    9e16:	4648      	mov	r0, r9
    9e18:	435f      	muls	r7, r3
    9e1a:	464c      	mov	r4, r9
    9e1c:	4343      	muls	r3, r0
    9e1e:	4660      	mov	r0, ip
    9e20:	4360      	muls	r0, r4
    9e22:	4664      	mov	r4, ip
    9e24:	4683      	mov	fp, r0
    9e26:	4650      	mov	r0, sl
    9e28:	4344      	muls	r4, r0
    9e2a:	0c38      	lsrs	r0, r7, #16
    9e2c:	4684      	mov	ip, r0
    9e2e:	18e4      	adds	r4, r4, r3
    9e30:	4464      	add	r4, ip
    9e32:	42a3      	cmp	r3, r4
    9e34:	d903      	bls.n	9e3e <__aeabi_dmul+0x2c2>
    9e36:	2380      	movs	r3, #128	; 0x80
    9e38:	025b      	lsls	r3, r3, #9
    9e3a:	469c      	mov	ip, r3
    9e3c:	44e3      	add	fp, ip
    9e3e:	4648      	mov	r0, r9
    9e40:	043f      	lsls	r7, r7, #16
    9e42:	0c23      	lsrs	r3, r4, #16
    9e44:	0c3f      	lsrs	r7, r7, #16
    9e46:	0424      	lsls	r4, r4, #16
    9e48:	19e4      	adds	r4, r4, r7
    9e4a:	4657      	mov	r7, sl
    9e4c:	4368      	muls	r0, r5
    9e4e:	436f      	muls	r7, r5
    9e50:	4684      	mov	ip, r0
    9e52:	464d      	mov	r5, r9
    9e54:	4650      	mov	r0, sl
    9e56:	4355      	muls	r5, r2
    9e58:	4342      	muls	r2, r0
    9e5a:	0c38      	lsrs	r0, r7, #16
    9e5c:	4681      	mov	r9, r0
    9e5e:	4462      	add	r2, ip
    9e60:	444a      	add	r2, r9
    9e62:	445b      	add	r3, fp
    9e64:	4594      	cmp	ip, r2
    9e66:	d903      	bls.n	9e70 <__aeabi_dmul+0x2f4>
    9e68:	2080      	movs	r0, #128	; 0x80
    9e6a:	0240      	lsls	r0, r0, #9
    9e6c:	4684      	mov	ip, r0
    9e6e:	4465      	add	r5, ip
    9e70:	9803      	ldr	r0, [sp, #12]
    9e72:	043f      	lsls	r7, r7, #16
    9e74:	4683      	mov	fp, r0
    9e76:	9804      	ldr	r0, [sp, #16]
    9e78:	0c3f      	lsrs	r7, r7, #16
    9e7a:	4684      	mov	ip, r0
    9e7c:	44e3      	add	fp, ip
    9e7e:	45c3      	cmp	fp, r8
    9e80:	4180      	sbcs	r0, r0
    9e82:	4240      	negs	r0, r0
    9e84:	4682      	mov	sl, r0
    9e86:	0410      	lsls	r0, r2, #16
    9e88:	4684      	mov	ip, r0
    9e8a:	9801      	ldr	r0, [sp, #4]
    9e8c:	4467      	add	r7, ip
    9e8e:	4684      	mov	ip, r0
    9e90:	4467      	add	r7, ip
    9e92:	44a3      	add	fp, r4
    9e94:	46bc      	mov	ip, r7
    9e96:	45a3      	cmp	fp, r4
    9e98:	41a4      	sbcs	r4, r4
    9e9a:	4699      	mov	r9, r3
    9e9c:	44d4      	add	ip, sl
    9e9e:	4264      	negs	r4, r4
    9ea0:	4287      	cmp	r7, r0
    9ea2:	41bf      	sbcs	r7, r7
    9ea4:	45d4      	cmp	ip, sl
    9ea6:	4180      	sbcs	r0, r0
    9ea8:	44e1      	add	r9, ip
    9eaa:	46a0      	mov	r8, r4
    9eac:	4599      	cmp	r9, r3
    9eae:	419b      	sbcs	r3, r3
    9eb0:	427f      	negs	r7, r7
    9eb2:	4240      	negs	r0, r0
    9eb4:	44c8      	add	r8, r9
    9eb6:	4307      	orrs	r7, r0
    9eb8:	0c12      	lsrs	r2, r2, #16
    9eba:	18ba      	adds	r2, r7, r2
    9ebc:	45a0      	cmp	r8, r4
    9ebe:	41a4      	sbcs	r4, r4
    9ec0:	425f      	negs	r7, r3
    9ec2:	003b      	movs	r3, r7
    9ec4:	4264      	negs	r4, r4
    9ec6:	4323      	orrs	r3, r4
    9ec8:	18d7      	adds	r7, r2, r3
    9eca:	4643      	mov	r3, r8
    9ecc:	197d      	adds	r5, r7, r5
    9ece:	0ddb      	lsrs	r3, r3, #23
    9ed0:	026d      	lsls	r5, r5, #9
    9ed2:	431d      	orrs	r5, r3
    9ed4:	465b      	mov	r3, fp
    9ed6:	025a      	lsls	r2, r3, #9
    9ed8:	9b05      	ldr	r3, [sp, #20]
    9eda:	431a      	orrs	r2, r3
    9edc:	1e53      	subs	r3, r2, #1
    9ede:	419a      	sbcs	r2, r3
    9ee0:	465b      	mov	r3, fp
    9ee2:	0ddb      	lsrs	r3, r3, #23
    9ee4:	431a      	orrs	r2, r3
    9ee6:	4643      	mov	r3, r8
    9ee8:	025b      	lsls	r3, r3, #9
    9eea:	4313      	orrs	r3, r2
    9eec:	01ea      	lsls	r2, r5, #7
    9eee:	d507      	bpl.n	9f00 <__aeabi_dmul+0x384>
    9ef0:	2201      	movs	r2, #1
    9ef2:	085c      	lsrs	r4, r3, #1
    9ef4:	4013      	ands	r3, r2
    9ef6:	4323      	orrs	r3, r4
    9ef8:	07ea      	lsls	r2, r5, #31
    9efa:	9e02      	ldr	r6, [sp, #8]
    9efc:	4313      	orrs	r3, r2
    9efe:	086d      	lsrs	r5, r5, #1
    9f00:	4a57      	ldr	r2, [pc, #348]	; (a060 <__aeabi_dmul+0x4e4>)
    9f02:	18b2      	adds	r2, r6, r2
    9f04:	2a00      	cmp	r2, #0
    9f06:	dd4b      	ble.n	9fa0 <__aeabi_dmul+0x424>
    9f08:	0758      	lsls	r0, r3, #29
    9f0a:	d009      	beq.n	9f20 <__aeabi_dmul+0x3a4>
    9f0c:	200f      	movs	r0, #15
    9f0e:	4018      	ands	r0, r3
    9f10:	2804      	cmp	r0, #4
    9f12:	d005      	beq.n	9f20 <__aeabi_dmul+0x3a4>
    9f14:	1d18      	adds	r0, r3, #4
    9f16:	4298      	cmp	r0, r3
    9f18:	419b      	sbcs	r3, r3
    9f1a:	425b      	negs	r3, r3
    9f1c:	18ed      	adds	r5, r5, r3
    9f1e:	0003      	movs	r3, r0
    9f20:	01e8      	lsls	r0, r5, #7
    9f22:	d504      	bpl.n	9f2e <__aeabi_dmul+0x3b2>
    9f24:	4a4f      	ldr	r2, [pc, #316]	; (a064 <__aeabi_dmul+0x4e8>)
    9f26:	4015      	ands	r5, r2
    9f28:	2280      	movs	r2, #128	; 0x80
    9f2a:	00d2      	lsls	r2, r2, #3
    9f2c:	18b2      	adds	r2, r6, r2
    9f2e:	484e      	ldr	r0, [pc, #312]	; (a068 <__aeabi_dmul+0x4ec>)
    9f30:	4282      	cmp	r2, r0
    9f32:	dd00      	ble.n	9f36 <__aeabi_dmul+0x3ba>
    9f34:	e6e7      	b.n	9d06 <__aeabi_dmul+0x18a>
    9f36:	2401      	movs	r4, #1
    9f38:	08db      	lsrs	r3, r3, #3
    9f3a:	0768      	lsls	r0, r5, #29
    9f3c:	4318      	orrs	r0, r3
    9f3e:	026d      	lsls	r5, r5, #9
    9f40:	0553      	lsls	r3, r2, #21
    9f42:	4680      	mov	r8, r0
    9f44:	0b2d      	lsrs	r5, r5, #12
    9f46:	0d5b      	lsrs	r3, r3, #21
    9f48:	400c      	ands	r4, r1
    9f4a:	e67d      	b.n	9c48 <__aeabi_dmul+0xcc>
    9f4c:	2280      	movs	r2, #128	; 0x80
    9f4e:	4659      	mov	r1, fp
    9f50:	0312      	lsls	r2, r2, #12
    9f52:	4211      	tst	r1, r2
    9f54:	d008      	beq.n	9f68 <__aeabi_dmul+0x3ec>
    9f56:	4215      	tst	r5, r2
    9f58:	d106      	bne.n	9f68 <__aeabi_dmul+0x3ec>
    9f5a:	4315      	orrs	r5, r2
    9f5c:	032d      	lsls	r5, r5, #12
    9f5e:	4698      	mov	r8, r3
    9f60:	0b2d      	lsrs	r5, r5, #12
    9f62:	464c      	mov	r4, r9
    9f64:	4b41      	ldr	r3, [pc, #260]	; (a06c <__aeabi_dmul+0x4f0>)
    9f66:	e66f      	b.n	9c48 <__aeabi_dmul+0xcc>
    9f68:	465d      	mov	r5, fp
    9f6a:	4315      	orrs	r5, r2
    9f6c:	032d      	lsls	r5, r5, #12
    9f6e:	0b2d      	lsrs	r5, r5, #12
    9f70:	4b3e      	ldr	r3, [pc, #248]	; (a06c <__aeabi_dmul+0x4f0>)
    9f72:	e669      	b.n	9c48 <__aeabi_dmul+0xcc>
    9f74:	0003      	movs	r3, r0
    9f76:	4655      	mov	r5, sl
    9f78:	3b28      	subs	r3, #40	; 0x28
    9f7a:	409d      	lsls	r5, r3
    9f7c:	2300      	movs	r3, #0
    9f7e:	e6bc      	b.n	9cfa <__aeabi_dmul+0x17e>
    9f80:	4650      	mov	r0, sl
    9f82:	f000 f8ed 	bl	a160 <__clzsi2>
    9f86:	3020      	adds	r0, #32
    9f88:	e6a8      	b.n	9cdc <__aeabi_dmul+0x160>
    9f8a:	0003      	movs	r3, r0
    9f8c:	3b28      	subs	r3, #40	; 0x28
    9f8e:	409f      	lsls	r7, r3
    9f90:	2300      	movs	r3, #0
    9f92:	46bb      	mov	fp, r7
    9f94:	4698      	mov	r8, r3
    9f96:	e689      	b.n	9cac <__aeabi_dmul+0x130>
    9f98:	f000 f8e2 	bl	a160 <__clzsi2>
    9f9c:	3020      	adds	r0, #32
    9f9e:	e673      	b.n	9c88 <__aeabi_dmul+0x10c>
    9fa0:	2401      	movs	r4, #1
    9fa2:	1aa6      	subs	r6, r4, r2
    9fa4:	2e38      	cmp	r6, #56	; 0x38
    9fa6:	dd07      	ble.n	9fb8 <__aeabi_dmul+0x43c>
    9fa8:	2200      	movs	r2, #0
    9faa:	400c      	ands	r4, r1
    9fac:	2300      	movs	r3, #0
    9fae:	2500      	movs	r5, #0
    9fb0:	4690      	mov	r8, r2
    9fb2:	e649      	b.n	9c48 <__aeabi_dmul+0xcc>
    9fb4:	9e02      	ldr	r6, [sp, #8]
    9fb6:	e7a3      	b.n	9f00 <__aeabi_dmul+0x384>
    9fb8:	2e1f      	cmp	r6, #31
    9fba:	dc20      	bgt.n	9ffe <__aeabi_dmul+0x482>
    9fbc:	2220      	movs	r2, #32
    9fbe:	002c      	movs	r4, r5
    9fc0:	0018      	movs	r0, r3
    9fc2:	1b92      	subs	r2, r2, r6
    9fc4:	40f0      	lsrs	r0, r6
    9fc6:	4094      	lsls	r4, r2
    9fc8:	4093      	lsls	r3, r2
    9fca:	4304      	orrs	r4, r0
    9fcc:	1e58      	subs	r0, r3, #1
    9fce:	4183      	sbcs	r3, r0
    9fd0:	431c      	orrs	r4, r3
    9fd2:	40f5      	lsrs	r5, r6
    9fd4:	0763      	lsls	r3, r4, #29
    9fd6:	d009      	beq.n	9fec <__aeabi_dmul+0x470>
    9fd8:	230f      	movs	r3, #15
    9fda:	4023      	ands	r3, r4
    9fdc:	2b04      	cmp	r3, #4
    9fde:	d005      	beq.n	9fec <__aeabi_dmul+0x470>
    9fe0:	0023      	movs	r3, r4
    9fe2:	1d1c      	adds	r4, r3, #4
    9fe4:	429c      	cmp	r4, r3
    9fe6:	4192      	sbcs	r2, r2
    9fe8:	4252      	negs	r2, r2
    9fea:	18ad      	adds	r5, r5, r2
    9fec:	022b      	lsls	r3, r5, #8
    9fee:	d51f      	bpl.n	a030 <__aeabi_dmul+0x4b4>
    9ff0:	2401      	movs	r4, #1
    9ff2:	2200      	movs	r2, #0
    9ff4:	400c      	ands	r4, r1
    9ff6:	2301      	movs	r3, #1
    9ff8:	2500      	movs	r5, #0
    9ffa:	4690      	mov	r8, r2
    9ffc:	e624      	b.n	9c48 <__aeabi_dmul+0xcc>
    9ffe:	201f      	movs	r0, #31
    a000:	002c      	movs	r4, r5
    a002:	4240      	negs	r0, r0
    a004:	1a82      	subs	r2, r0, r2
    a006:	40d4      	lsrs	r4, r2
    a008:	2e20      	cmp	r6, #32
    a00a:	d01c      	beq.n	a046 <__aeabi_dmul+0x4ca>
    a00c:	2240      	movs	r2, #64	; 0x40
    a00e:	1b96      	subs	r6, r2, r6
    a010:	40b5      	lsls	r5, r6
    a012:	432b      	orrs	r3, r5
    a014:	1e58      	subs	r0, r3, #1
    a016:	4183      	sbcs	r3, r0
    a018:	2007      	movs	r0, #7
    a01a:	4323      	orrs	r3, r4
    a01c:	4018      	ands	r0, r3
    a01e:	2500      	movs	r5, #0
    a020:	2800      	cmp	r0, #0
    a022:	d009      	beq.n	a038 <__aeabi_dmul+0x4bc>
    a024:	220f      	movs	r2, #15
    a026:	2500      	movs	r5, #0
    a028:	401a      	ands	r2, r3
    a02a:	001c      	movs	r4, r3
    a02c:	2a04      	cmp	r2, #4
    a02e:	d1d8      	bne.n	9fe2 <__aeabi_dmul+0x466>
    a030:	0023      	movs	r3, r4
    a032:	0768      	lsls	r0, r5, #29
    a034:	026d      	lsls	r5, r5, #9
    a036:	0b2d      	lsrs	r5, r5, #12
    a038:	2401      	movs	r4, #1
    a03a:	08db      	lsrs	r3, r3, #3
    a03c:	4303      	orrs	r3, r0
    a03e:	4698      	mov	r8, r3
    a040:	400c      	ands	r4, r1
    a042:	2300      	movs	r3, #0
    a044:	e600      	b.n	9c48 <__aeabi_dmul+0xcc>
    a046:	2500      	movs	r5, #0
    a048:	e7e3      	b.n	a012 <__aeabi_dmul+0x496>
    a04a:	2280      	movs	r2, #128	; 0x80
    a04c:	2401      	movs	r4, #1
    a04e:	0312      	lsls	r2, r2, #12
    a050:	4315      	orrs	r5, r2
    a052:	032d      	lsls	r5, r5, #12
    a054:	4698      	mov	r8, r3
    a056:	0b2d      	lsrs	r5, r5, #12
    a058:	400c      	ands	r4, r1
    a05a:	4b04      	ldr	r3, [pc, #16]	; (a06c <__aeabi_dmul+0x4f0>)
    a05c:	e5f4      	b.n	9c48 <__aeabi_dmul+0xcc>
    a05e:	46c0      	nop			; (mov r8, r8)
    a060:	000003ff 	.word	0x000003ff
    a064:	feffffff 	.word	0xfeffffff
    a068:	000007fe 	.word	0x000007fe
    a06c:	000007ff 	.word	0x000007ff

0000a070 <__aeabi_d2iz>:
    a070:	030b      	lsls	r3, r1, #12
    a072:	b530      	push	{r4, r5, lr}
    a074:	4d13      	ldr	r5, [pc, #76]	; (a0c4 <__aeabi_d2iz+0x54>)
    a076:	0b1a      	lsrs	r2, r3, #12
    a078:	004b      	lsls	r3, r1, #1
    a07a:	0d5b      	lsrs	r3, r3, #21
    a07c:	0fc9      	lsrs	r1, r1, #31
    a07e:	2400      	movs	r4, #0
    a080:	42ab      	cmp	r3, r5
    a082:	dd11      	ble.n	a0a8 <__aeabi_d2iz+0x38>
    a084:	4c10      	ldr	r4, [pc, #64]	; (a0c8 <__aeabi_d2iz+0x58>)
    a086:	42a3      	cmp	r3, r4
    a088:	dc10      	bgt.n	a0ac <__aeabi_d2iz+0x3c>
    a08a:	2480      	movs	r4, #128	; 0x80
    a08c:	0364      	lsls	r4, r4, #13
    a08e:	4322      	orrs	r2, r4
    a090:	4c0e      	ldr	r4, [pc, #56]	; (a0cc <__aeabi_d2iz+0x5c>)
    a092:	1ae4      	subs	r4, r4, r3
    a094:	2c1f      	cmp	r4, #31
    a096:	dd0c      	ble.n	a0b2 <__aeabi_d2iz+0x42>
    a098:	480d      	ldr	r0, [pc, #52]	; (a0d0 <__aeabi_d2iz+0x60>)
    a09a:	1ac3      	subs	r3, r0, r3
    a09c:	40da      	lsrs	r2, r3
    a09e:	0013      	movs	r3, r2
    a0a0:	425c      	negs	r4, r3
    a0a2:	2900      	cmp	r1, #0
    a0a4:	d100      	bne.n	a0a8 <__aeabi_d2iz+0x38>
    a0a6:	001c      	movs	r4, r3
    a0a8:	0020      	movs	r0, r4
    a0aa:	bd30      	pop	{r4, r5, pc}
    a0ac:	4b09      	ldr	r3, [pc, #36]	; (a0d4 <__aeabi_d2iz+0x64>)
    a0ae:	18cc      	adds	r4, r1, r3
    a0b0:	e7fa      	b.n	a0a8 <__aeabi_d2iz+0x38>
    a0b2:	40e0      	lsrs	r0, r4
    a0b4:	4c08      	ldr	r4, [pc, #32]	; (a0d8 <__aeabi_d2iz+0x68>)
    a0b6:	46a4      	mov	ip, r4
    a0b8:	4463      	add	r3, ip
    a0ba:	409a      	lsls	r2, r3
    a0bc:	0013      	movs	r3, r2
    a0be:	4303      	orrs	r3, r0
    a0c0:	e7ee      	b.n	a0a0 <__aeabi_d2iz+0x30>
    a0c2:	46c0      	nop			; (mov r8, r8)
    a0c4:	000003fe 	.word	0x000003fe
    a0c8:	0000041d 	.word	0x0000041d
    a0cc:	00000433 	.word	0x00000433
    a0d0:	00000413 	.word	0x00000413
    a0d4:	7fffffff 	.word	0x7fffffff
    a0d8:	fffffbed 	.word	0xfffffbed

0000a0dc <__aeabi_i2d>:
    a0dc:	b570      	push	{r4, r5, r6, lr}
    a0de:	2800      	cmp	r0, #0
    a0e0:	d030      	beq.n	a144 <__aeabi_i2d+0x68>
    a0e2:	17c3      	asrs	r3, r0, #31
    a0e4:	18c4      	adds	r4, r0, r3
    a0e6:	405c      	eors	r4, r3
    a0e8:	0fc5      	lsrs	r5, r0, #31
    a0ea:	0020      	movs	r0, r4
    a0ec:	f000 f838 	bl	a160 <__clzsi2>
    a0f0:	4b17      	ldr	r3, [pc, #92]	; (a150 <__aeabi_i2d+0x74>)
    a0f2:	4a18      	ldr	r2, [pc, #96]	; (a154 <__aeabi_i2d+0x78>)
    a0f4:	1a1b      	subs	r3, r3, r0
    a0f6:	1ad2      	subs	r2, r2, r3
    a0f8:	2a1f      	cmp	r2, #31
    a0fa:	dd18      	ble.n	a12e <__aeabi_i2d+0x52>
    a0fc:	4a16      	ldr	r2, [pc, #88]	; (a158 <__aeabi_i2d+0x7c>)
    a0fe:	1ad2      	subs	r2, r2, r3
    a100:	4094      	lsls	r4, r2
    a102:	2200      	movs	r2, #0
    a104:	0324      	lsls	r4, r4, #12
    a106:	055b      	lsls	r3, r3, #21
    a108:	0b24      	lsrs	r4, r4, #12
    a10a:	0d5b      	lsrs	r3, r3, #21
    a10c:	2100      	movs	r1, #0
    a10e:	0010      	movs	r0, r2
    a110:	0324      	lsls	r4, r4, #12
    a112:	0d0a      	lsrs	r2, r1, #20
    a114:	0512      	lsls	r2, r2, #20
    a116:	0b24      	lsrs	r4, r4, #12
    a118:	4314      	orrs	r4, r2
    a11a:	4a10      	ldr	r2, [pc, #64]	; (a15c <__aeabi_i2d+0x80>)
    a11c:	051b      	lsls	r3, r3, #20
    a11e:	4014      	ands	r4, r2
    a120:	431c      	orrs	r4, r3
    a122:	0064      	lsls	r4, r4, #1
    a124:	07ed      	lsls	r5, r5, #31
    a126:	0864      	lsrs	r4, r4, #1
    a128:	432c      	orrs	r4, r5
    a12a:	0021      	movs	r1, r4
    a12c:	bd70      	pop	{r4, r5, r6, pc}
    a12e:	0021      	movs	r1, r4
    a130:	4091      	lsls	r1, r2
    a132:	000a      	movs	r2, r1
    a134:	210b      	movs	r1, #11
    a136:	1a08      	subs	r0, r1, r0
    a138:	40c4      	lsrs	r4, r0
    a13a:	055b      	lsls	r3, r3, #21
    a13c:	0324      	lsls	r4, r4, #12
    a13e:	0b24      	lsrs	r4, r4, #12
    a140:	0d5b      	lsrs	r3, r3, #21
    a142:	e7e3      	b.n	a10c <__aeabi_i2d+0x30>
    a144:	2500      	movs	r5, #0
    a146:	2300      	movs	r3, #0
    a148:	2400      	movs	r4, #0
    a14a:	2200      	movs	r2, #0
    a14c:	e7de      	b.n	a10c <__aeabi_i2d+0x30>
    a14e:	46c0      	nop			; (mov r8, r8)
    a150:	0000041e 	.word	0x0000041e
    a154:	00000433 	.word	0x00000433
    a158:	00000413 	.word	0x00000413
    a15c:	800fffff 	.word	0x800fffff

0000a160 <__clzsi2>:
    a160:	211c      	movs	r1, #28
    a162:	2301      	movs	r3, #1
    a164:	041b      	lsls	r3, r3, #16
    a166:	4298      	cmp	r0, r3
    a168:	d301      	bcc.n	a16e <__clzsi2+0xe>
    a16a:	0c00      	lsrs	r0, r0, #16
    a16c:	3910      	subs	r1, #16
    a16e:	0a1b      	lsrs	r3, r3, #8
    a170:	4298      	cmp	r0, r3
    a172:	d301      	bcc.n	a178 <__clzsi2+0x18>
    a174:	0a00      	lsrs	r0, r0, #8
    a176:	3908      	subs	r1, #8
    a178:	091b      	lsrs	r3, r3, #4
    a17a:	4298      	cmp	r0, r3
    a17c:	d301      	bcc.n	a182 <__clzsi2+0x22>
    a17e:	0900      	lsrs	r0, r0, #4
    a180:	3904      	subs	r1, #4
    a182:	a202      	add	r2, pc, #8	; (adr r2, a18c <__clzsi2+0x2c>)
    a184:	5c10      	ldrb	r0, [r2, r0]
    a186:	1840      	adds	r0, r0, r1
    a188:	4770      	bx	lr
    a18a:	46c0      	nop			; (mov r8, r8)
    a18c:	02020304 	.word	0x02020304
    a190:	01010101 	.word	0x01010101
	...

0000a19c <__assert_func>:
    a19c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a19e:	001d      	movs	r5, r3
    a1a0:	4b0a      	ldr	r3, [pc, #40]	; (a1cc <__assert_func+0x30>)
    a1a2:	0006      	movs	r6, r0
    a1a4:	681b      	ldr	r3, [r3, #0]
    a1a6:	68d8      	ldr	r0, [r3, #12]
    a1a8:	2a00      	cmp	r2, #0
    a1aa:	d102      	bne.n	a1b2 <__assert_func+0x16>
    a1ac:	4c08      	ldr	r4, [pc, #32]	; (a1d0 <__assert_func+0x34>)
    a1ae:	0023      	movs	r3, r4
    a1b0:	e001      	b.n	a1b6 <__assert_func+0x1a>
    a1b2:	0013      	movs	r3, r2
    a1b4:	4c07      	ldr	r4, [pc, #28]	; (a1d4 <__assert_func+0x38>)
    a1b6:	9302      	str	r3, [sp, #8]
    a1b8:	9100      	str	r1, [sp, #0]
    a1ba:	0033      	movs	r3, r6
    a1bc:	002a      	movs	r2, r5
    a1be:	4906      	ldr	r1, [pc, #24]	; (a1d8 <__assert_func+0x3c>)
    a1c0:	9401      	str	r4, [sp, #4]
    a1c2:	f000 f80b 	bl	a1dc <fiprintf>
    a1c6:	f000 fd09 	bl	abdc <abort>
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	2000008c 	.word	0x2000008c
    a1d0:	0000caa7 	.word	0x0000caa7
    a1d4:	0000ca6c 	.word	0x0000ca6c
    a1d8:	0000ca79 	.word	0x0000ca79

0000a1dc <fiprintf>:
    a1dc:	b40e      	push	{r1, r2, r3}
    a1de:	b503      	push	{r0, r1, lr}
    a1e0:	0001      	movs	r1, r0
    a1e2:	ab03      	add	r3, sp, #12
    a1e4:	4804      	ldr	r0, [pc, #16]	; (a1f8 <fiprintf+0x1c>)
    a1e6:	cb04      	ldmia	r3!, {r2}
    a1e8:	6800      	ldr	r0, [r0, #0]
    a1ea:	9301      	str	r3, [sp, #4]
    a1ec:	f000 f864 	bl	a2b8 <_vfiprintf_r>
    a1f0:	b002      	add	sp, #8
    a1f2:	bc08      	pop	{r3}
    a1f4:	b003      	add	sp, #12
    a1f6:	4718      	bx	r3
    a1f8:	2000008c 	.word	0x2000008c

0000a1fc <__libc_init_array>:
    a1fc:	4b0e      	ldr	r3, [pc, #56]	; (a238 <__libc_init_array+0x3c>)
    a1fe:	b570      	push	{r4, r5, r6, lr}
    a200:	2500      	movs	r5, #0
    a202:	001e      	movs	r6, r3
    a204:	4c0d      	ldr	r4, [pc, #52]	; (a23c <__libc_init_array+0x40>)
    a206:	1ae4      	subs	r4, r4, r3
    a208:	10a4      	asrs	r4, r4, #2
    a20a:	42a5      	cmp	r5, r4
    a20c:	d004      	beq.n	a218 <__libc_init_array+0x1c>
    a20e:	00ab      	lsls	r3, r5, #2
    a210:	58f3      	ldr	r3, [r6, r3]
    a212:	4798      	blx	r3
    a214:	3501      	adds	r5, #1
    a216:	e7f8      	b.n	a20a <__libc_init_array+0xe>
    a218:	f002 fc94 	bl	cb44 <_init>
    a21c:	4b08      	ldr	r3, [pc, #32]	; (a240 <__libc_init_array+0x44>)
    a21e:	2500      	movs	r5, #0
    a220:	001e      	movs	r6, r3
    a222:	4c08      	ldr	r4, [pc, #32]	; (a244 <__libc_init_array+0x48>)
    a224:	1ae4      	subs	r4, r4, r3
    a226:	10a4      	asrs	r4, r4, #2
    a228:	42a5      	cmp	r5, r4
    a22a:	d004      	beq.n	a236 <__libc_init_array+0x3a>
    a22c:	00ab      	lsls	r3, r5, #2
    a22e:	58f3      	ldr	r3, [r6, r3]
    a230:	4798      	blx	r3
    a232:	3501      	adds	r5, #1
    a234:	e7f8      	b.n	a228 <__libc_init_array+0x2c>
    a236:	bd70      	pop	{r4, r5, r6, pc}
    a238:	0000cb50 	.word	0x0000cb50
    a23c:	0000cb50 	.word	0x0000cb50
    a240:	0000cb50 	.word	0x0000cb50
    a244:	0000cb54 	.word	0x0000cb54

0000a248 <memcpy>:
    a248:	2300      	movs	r3, #0
    a24a:	b510      	push	{r4, lr}
    a24c:	429a      	cmp	r2, r3
    a24e:	d003      	beq.n	a258 <memcpy+0x10>
    a250:	5ccc      	ldrb	r4, [r1, r3]
    a252:	54c4      	strb	r4, [r0, r3]
    a254:	3301      	adds	r3, #1
    a256:	e7f9      	b.n	a24c <memcpy+0x4>
    a258:	bd10      	pop	{r4, pc}

0000a25a <memset>:
    a25a:	0003      	movs	r3, r0
    a25c:	1882      	adds	r2, r0, r2
    a25e:	4293      	cmp	r3, r2
    a260:	d002      	beq.n	a268 <memset+0xe>
    a262:	7019      	strb	r1, [r3, #0]
    a264:	3301      	adds	r3, #1
    a266:	e7fa      	b.n	a25e <memset+0x4>
    a268:	4770      	bx	lr

0000a26a <__sfputc_r>:
    a26a:	6893      	ldr	r3, [r2, #8]
    a26c:	b510      	push	{r4, lr}
    a26e:	3b01      	subs	r3, #1
    a270:	6093      	str	r3, [r2, #8]
    a272:	2b00      	cmp	r3, #0
    a274:	da05      	bge.n	a282 <__sfputc_r+0x18>
    a276:	6994      	ldr	r4, [r2, #24]
    a278:	42a3      	cmp	r3, r4
    a27a:	db08      	blt.n	a28e <__sfputc_r+0x24>
    a27c:	b2cb      	uxtb	r3, r1
    a27e:	2b0a      	cmp	r3, #10
    a280:	d005      	beq.n	a28e <__sfputc_r+0x24>
    a282:	6813      	ldr	r3, [r2, #0]
    a284:	1c58      	adds	r0, r3, #1
    a286:	6010      	str	r0, [r2, #0]
    a288:	7019      	strb	r1, [r3, #0]
    a28a:	b2c8      	uxtb	r0, r1
    a28c:	e001      	b.n	a292 <__sfputc_r+0x28>
    a28e:	f000 fbd7 	bl	aa40 <__swbuf_r>
    a292:	bd10      	pop	{r4, pc}

0000a294 <__sfputs_r>:
    a294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a296:	0006      	movs	r6, r0
    a298:	000f      	movs	r7, r1
    a29a:	0014      	movs	r4, r2
    a29c:	18d5      	adds	r5, r2, r3
    a29e:	42ac      	cmp	r4, r5
    a2a0:	d008      	beq.n	a2b4 <__sfputs_r+0x20>
    a2a2:	7821      	ldrb	r1, [r4, #0]
    a2a4:	003a      	movs	r2, r7
    a2a6:	0030      	movs	r0, r6
    a2a8:	f7ff ffdf 	bl	a26a <__sfputc_r>
    a2ac:	3401      	adds	r4, #1
    a2ae:	1c43      	adds	r3, r0, #1
    a2b0:	d1f5      	bne.n	a29e <__sfputs_r+0xa>
    a2b2:	e000      	b.n	a2b6 <__sfputs_r+0x22>
    a2b4:	2000      	movs	r0, #0
    a2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a2b8 <_vfiprintf_r>:
    a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ba:	b09f      	sub	sp, #124	; 0x7c
    a2bc:	0006      	movs	r6, r0
    a2be:	000f      	movs	r7, r1
    a2c0:	9202      	str	r2, [sp, #8]
    a2c2:	9305      	str	r3, [sp, #20]
    a2c4:	2800      	cmp	r0, #0
    a2c6:	d004      	beq.n	a2d2 <_vfiprintf_r+0x1a>
    a2c8:	6983      	ldr	r3, [r0, #24]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d101      	bne.n	a2d2 <_vfiprintf_r+0x1a>
    a2ce:	f000 fd81 	bl	add4 <__sinit>
    a2d2:	4b7f      	ldr	r3, [pc, #508]	; (a4d0 <_vfiprintf_r+0x218>)
    a2d4:	429f      	cmp	r7, r3
    a2d6:	d101      	bne.n	a2dc <_vfiprintf_r+0x24>
    a2d8:	6877      	ldr	r7, [r6, #4]
    a2da:	e008      	b.n	a2ee <_vfiprintf_r+0x36>
    a2dc:	4b7d      	ldr	r3, [pc, #500]	; (a4d4 <_vfiprintf_r+0x21c>)
    a2de:	429f      	cmp	r7, r3
    a2e0:	d101      	bne.n	a2e6 <_vfiprintf_r+0x2e>
    a2e2:	68b7      	ldr	r7, [r6, #8]
    a2e4:	e003      	b.n	a2ee <_vfiprintf_r+0x36>
    a2e6:	4b7c      	ldr	r3, [pc, #496]	; (a4d8 <_vfiprintf_r+0x220>)
    a2e8:	429f      	cmp	r7, r3
    a2ea:	d100      	bne.n	a2ee <_vfiprintf_r+0x36>
    a2ec:	68f7      	ldr	r7, [r6, #12]
    a2ee:	89bb      	ldrh	r3, [r7, #12]
    a2f0:	071b      	lsls	r3, r3, #28
    a2f2:	d50a      	bpl.n	a30a <_vfiprintf_r+0x52>
    a2f4:	693b      	ldr	r3, [r7, #16]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d007      	beq.n	a30a <_vfiprintf_r+0x52>
    a2fa:	2300      	movs	r3, #0
    a2fc:	ad06      	add	r5, sp, #24
    a2fe:	616b      	str	r3, [r5, #20]
    a300:	3320      	adds	r3, #32
    a302:	766b      	strb	r3, [r5, #25]
    a304:	3310      	adds	r3, #16
    a306:	76ab      	strb	r3, [r5, #26]
    a308:	e03d      	b.n	a386 <_vfiprintf_r+0xce>
    a30a:	0039      	movs	r1, r7
    a30c:	0030      	movs	r0, r6
    a30e:	f000 fbef 	bl	aaf0 <__swsetup_r>
    a312:	2800      	cmp	r0, #0
    a314:	d0f1      	beq.n	a2fa <_vfiprintf_r+0x42>
    a316:	2001      	movs	r0, #1
    a318:	4240      	negs	r0, r0
    a31a:	e0d6      	b.n	a4ca <_vfiprintf_r+0x212>
    a31c:	9a05      	ldr	r2, [sp, #20]
    a31e:	1d11      	adds	r1, r2, #4
    a320:	6812      	ldr	r2, [r2, #0]
    a322:	9105      	str	r1, [sp, #20]
    a324:	2a00      	cmp	r2, #0
    a326:	da00      	bge.n	a32a <_vfiprintf_r+0x72>
    a328:	e07f      	b.n	a42a <_vfiprintf_r+0x172>
    a32a:	9209      	str	r2, [sp, #36]	; 0x24
    a32c:	3401      	adds	r4, #1
    a32e:	7823      	ldrb	r3, [r4, #0]
    a330:	2b2e      	cmp	r3, #46	; 0x2e
    a332:	d100      	bne.n	a336 <_vfiprintf_r+0x7e>
    a334:	e08d      	b.n	a452 <_vfiprintf_r+0x19a>
    a336:	7821      	ldrb	r1, [r4, #0]
    a338:	2203      	movs	r2, #3
    a33a:	4868      	ldr	r0, [pc, #416]	; (a4dc <_vfiprintf_r+0x224>)
    a33c:	f000 fe42 	bl	afc4 <memchr>
    a340:	2800      	cmp	r0, #0
    a342:	d007      	beq.n	a354 <_vfiprintf_r+0x9c>
    a344:	4b65      	ldr	r3, [pc, #404]	; (a4dc <_vfiprintf_r+0x224>)
    a346:	682a      	ldr	r2, [r5, #0]
    a348:	1ac0      	subs	r0, r0, r3
    a34a:	2340      	movs	r3, #64	; 0x40
    a34c:	4083      	lsls	r3, r0
    a34e:	4313      	orrs	r3, r2
    a350:	602b      	str	r3, [r5, #0]
    a352:	3401      	adds	r4, #1
    a354:	7821      	ldrb	r1, [r4, #0]
    a356:	1c63      	adds	r3, r4, #1
    a358:	2206      	movs	r2, #6
    a35a:	4861      	ldr	r0, [pc, #388]	; (a4e0 <_vfiprintf_r+0x228>)
    a35c:	9302      	str	r3, [sp, #8]
    a35e:	7629      	strb	r1, [r5, #24]
    a360:	f000 fe30 	bl	afc4 <memchr>
    a364:	2800      	cmp	r0, #0
    a366:	d100      	bne.n	a36a <_vfiprintf_r+0xb2>
    a368:	e09d      	b.n	a4a6 <_vfiprintf_r+0x1ee>
    a36a:	4b5e      	ldr	r3, [pc, #376]	; (a4e4 <_vfiprintf_r+0x22c>)
    a36c:	2b00      	cmp	r3, #0
    a36e:	d000      	beq.n	a372 <_vfiprintf_r+0xba>
    a370:	e090      	b.n	a494 <_vfiprintf_r+0x1dc>
    a372:	2207      	movs	r2, #7
    a374:	9b05      	ldr	r3, [sp, #20]
    a376:	3307      	adds	r3, #7
    a378:	4393      	bics	r3, r2
    a37a:	3308      	adds	r3, #8
    a37c:	9305      	str	r3, [sp, #20]
    a37e:	696b      	ldr	r3, [r5, #20]
    a380:	9a03      	ldr	r2, [sp, #12]
    a382:	189b      	adds	r3, r3, r2
    a384:	616b      	str	r3, [r5, #20]
    a386:	9c02      	ldr	r4, [sp, #8]
    a388:	7823      	ldrb	r3, [r4, #0]
    a38a:	2b00      	cmp	r3, #0
    a38c:	d104      	bne.n	a398 <_vfiprintf_r+0xe0>
    a38e:	9b02      	ldr	r3, [sp, #8]
    a390:	1ae3      	subs	r3, r4, r3
    a392:	9304      	str	r3, [sp, #16]
    a394:	d012      	beq.n	a3bc <_vfiprintf_r+0x104>
    a396:	e003      	b.n	a3a0 <_vfiprintf_r+0xe8>
    a398:	2b25      	cmp	r3, #37	; 0x25
    a39a:	d0f8      	beq.n	a38e <_vfiprintf_r+0xd6>
    a39c:	3401      	adds	r4, #1
    a39e:	e7f3      	b.n	a388 <_vfiprintf_r+0xd0>
    a3a0:	9b04      	ldr	r3, [sp, #16]
    a3a2:	9a02      	ldr	r2, [sp, #8]
    a3a4:	0039      	movs	r1, r7
    a3a6:	0030      	movs	r0, r6
    a3a8:	f7ff ff74 	bl	a294 <__sfputs_r>
    a3ac:	1c43      	adds	r3, r0, #1
    a3ae:	d100      	bne.n	a3b2 <_vfiprintf_r+0xfa>
    a3b0:	e086      	b.n	a4c0 <_vfiprintf_r+0x208>
    a3b2:	696a      	ldr	r2, [r5, #20]
    a3b4:	9b04      	ldr	r3, [sp, #16]
    a3b6:	4694      	mov	ip, r2
    a3b8:	4463      	add	r3, ip
    a3ba:	616b      	str	r3, [r5, #20]
    a3bc:	7823      	ldrb	r3, [r4, #0]
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d07e      	beq.n	a4c0 <_vfiprintf_r+0x208>
    a3c2:	2201      	movs	r2, #1
    a3c4:	2300      	movs	r3, #0
    a3c6:	4252      	negs	r2, r2
    a3c8:	606a      	str	r2, [r5, #4]
    a3ca:	a902      	add	r1, sp, #8
    a3cc:	3254      	adds	r2, #84	; 0x54
    a3ce:	1852      	adds	r2, r2, r1
    a3d0:	3401      	adds	r4, #1
    a3d2:	602b      	str	r3, [r5, #0]
    a3d4:	60eb      	str	r3, [r5, #12]
    a3d6:	60ab      	str	r3, [r5, #8]
    a3d8:	7013      	strb	r3, [r2, #0]
    a3da:	65ab      	str	r3, [r5, #88]	; 0x58
    a3dc:	7821      	ldrb	r1, [r4, #0]
    a3de:	2205      	movs	r2, #5
    a3e0:	4841      	ldr	r0, [pc, #260]	; (a4e8 <_vfiprintf_r+0x230>)
    a3e2:	f000 fdef 	bl	afc4 <memchr>
    a3e6:	2800      	cmp	r0, #0
    a3e8:	d008      	beq.n	a3fc <_vfiprintf_r+0x144>
    a3ea:	4b3f      	ldr	r3, [pc, #252]	; (a4e8 <_vfiprintf_r+0x230>)
    a3ec:	682a      	ldr	r2, [r5, #0]
    a3ee:	1ac0      	subs	r0, r0, r3
    a3f0:	2301      	movs	r3, #1
    a3f2:	4083      	lsls	r3, r0
    a3f4:	4313      	orrs	r3, r2
    a3f6:	602b      	str	r3, [r5, #0]
    a3f8:	3401      	adds	r4, #1
    a3fa:	e7ef      	b.n	a3dc <_vfiprintf_r+0x124>
    a3fc:	682b      	ldr	r3, [r5, #0]
    a3fe:	06da      	lsls	r2, r3, #27
    a400:	d504      	bpl.n	a40c <_vfiprintf_r+0x154>
    a402:	2253      	movs	r2, #83	; 0x53
    a404:	2120      	movs	r1, #32
    a406:	a802      	add	r0, sp, #8
    a408:	1812      	adds	r2, r2, r0
    a40a:	7011      	strb	r1, [r2, #0]
    a40c:	071a      	lsls	r2, r3, #28
    a40e:	d504      	bpl.n	a41a <_vfiprintf_r+0x162>
    a410:	2253      	movs	r2, #83	; 0x53
    a412:	212b      	movs	r1, #43	; 0x2b
    a414:	a802      	add	r0, sp, #8
    a416:	1812      	adds	r2, r2, r0
    a418:	7011      	strb	r1, [r2, #0]
    a41a:	7822      	ldrb	r2, [r4, #0]
    a41c:	2a2a      	cmp	r2, #42	; 0x2a
    a41e:	d100      	bne.n	a422 <_vfiprintf_r+0x16a>
    a420:	e77c      	b.n	a31c <_vfiprintf_r+0x64>
    a422:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a424:	2000      	movs	r0, #0
    a426:	210a      	movs	r1, #10
    a428:	e005      	b.n	a436 <_vfiprintf_r+0x17e>
    a42a:	4252      	negs	r2, r2
    a42c:	60ea      	str	r2, [r5, #12]
    a42e:	2202      	movs	r2, #2
    a430:	4313      	orrs	r3, r2
    a432:	602b      	str	r3, [r5, #0]
    a434:	e77a      	b.n	a32c <_vfiprintf_r+0x74>
    a436:	7822      	ldrb	r2, [r4, #0]
    a438:	3a30      	subs	r2, #48	; 0x30
    a43a:	2a09      	cmp	r2, #9
    a43c:	d804      	bhi.n	a448 <_vfiprintf_r+0x190>
    a43e:	434b      	muls	r3, r1
    a440:	3401      	adds	r4, #1
    a442:	189b      	adds	r3, r3, r2
    a444:	2001      	movs	r0, #1
    a446:	e7f6      	b.n	a436 <_vfiprintf_r+0x17e>
    a448:	2800      	cmp	r0, #0
    a44a:	d100      	bne.n	a44e <_vfiprintf_r+0x196>
    a44c:	e76f      	b.n	a32e <_vfiprintf_r+0x76>
    a44e:	9309      	str	r3, [sp, #36]	; 0x24
    a450:	e76d      	b.n	a32e <_vfiprintf_r+0x76>
    a452:	7863      	ldrb	r3, [r4, #1]
    a454:	2b2a      	cmp	r3, #42	; 0x2a
    a456:	d10a      	bne.n	a46e <_vfiprintf_r+0x1b6>
    a458:	9b05      	ldr	r3, [sp, #20]
    a45a:	3402      	adds	r4, #2
    a45c:	1d1a      	adds	r2, r3, #4
    a45e:	681b      	ldr	r3, [r3, #0]
    a460:	9205      	str	r2, [sp, #20]
    a462:	2b00      	cmp	r3, #0
    a464:	da01      	bge.n	a46a <_vfiprintf_r+0x1b2>
    a466:	2301      	movs	r3, #1
    a468:	425b      	negs	r3, r3
    a46a:	9307      	str	r3, [sp, #28]
    a46c:	e763      	b.n	a336 <_vfiprintf_r+0x7e>
    a46e:	2300      	movs	r3, #0
    a470:	200a      	movs	r0, #10
    a472:	001a      	movs	r2, r3
    a474:	3401      	adds	r4, #1
    a476:	606b      	str	r3, [r5, #4]
    a478:	7821      	ldrb	r1, [r4, #0]
    a47a:	3930      	subs	r1, #48	; 0x30
    a47c:	2909      	cmp	r1, #9
    a47e:	d804      	bhi.n	a48a <_vfiprintf_r+0x1d2>
    a480:	4342      	muls	r2, r0
    a482:	3401      	adds	r4, #1
    a484:	1852      	adds	r2, r2, r1
    a486:	2301      	movs	r3, #1
    a488:	e7f6      	b.n	a478 <_vfiprintf_r+0x1c0>
    a48a:	2b00      	cmp	r3, #0
    a48c:	d100      	bne.n	a490 <_vfiprintf_r+0x1d8>
    a48e:	e752      	b.n	a336 <_vfiprintf_r+0x7e>
    a490:	9207      	str	r2, [sp, #28]
    a492:	e750      	b.n	a336 <_vfiprintf_r+0x7e>
    a494:	ab05      	add	r3, sp, #20
    a496:	9300      	str	r3, [sp, #0]
    a498:	003a      	movs	r2, r7
    a49a:	4b14      	ldr	r3, [pc, #80]	; (a4ec <_vfiprintf_r+0x234>)
    a49c:	0029      	movs	r1, r5
    a49e:	0030      	movs	r0, r6
    a4a0:	e000      	b.n	a4a4 <_vfiprintf_r+0x1ec>
    a4a2:	bf00      	nop
    a4a4:	e007      	b.n	a4b6 <_vfiprintf_r+0x1fe>
    a4a6:	ab05      	add	r3, sp, #20
    a4a8:	9300      	str	r3, [sp, #0]
    a4aa:	003a      	movs	r2, r7
    a4ac:	4b0f      	ldr	r3, [pc, #60]	; (a4ec <_vfiprintf_r+0x234>)
    a4ae:	0029      	movs	r1, r5
    a4b0:	0030      	movs	r0, r6
    a4b2:	f000 f88b 	bl	a5cc <_printf_i>
    a4b6:	9003      	str	r0, [sp, #12]
    a4b8:	9b03      	ldr	r3, [sp, #12]
    a4ba:	3301      	adds	r3, #1
    a4bc:	d000      	beq.n	a4c0 <_vfiprintf_r+0x208>
    a4be:	e75e      	b.n	a37e <_vfiprintf_r+0xc6>
    a4c0:	89bb      	ldrh	r3, [r7, #12]
    a4c2:	065b      	lsls	r3, r3, #25
    a4c4:	d500      	bpl.n	a4c8 <_vfiprintf_r+0x210>
    a4c6:	e726      	b.n	a316 <_vfiprintf_r+0x5e>
    a4c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a4ca:	b01f      	add	sp, #124	; 0x7c
    a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a4ce:	46c0      	nop			; (mov r8, r8)
    a4d0:	0000cae4 	.word	0x0000cae4
    a4d4:	0000cb04 	.word	0x0000cb04
    a4d8:	0000cb24 	.word	0x0000cb24
    a4dc:	0000cab6 	.word	0x0000cab6
    a4e0:	0000caba 	.word	0x0000caba
    a4e4:	00000000 	.word	0x00000000
    a4e8:	0000cab0 	.word	0x0000cab0
    a4ec:	0000a295 	.word	0x0000a295

0000a4f0 <_printf_common>:
    a4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a4f2:	0017      	movs	r7, r2
    a4f4:	9301      	str	r3, [sp, #4]
    a4f6:	688a      	ldr	r2, [r1, #8]
    a4f8:	690b      	ldr	r3, [r1, #16]
    a4fa:	9000      	str	r0, [sp, #0]
    a4fc:	000c      	movs	r4, r1
    a4fe:	4293      	cmp	r3, r2
    a500:	da00      	bge.n	a504 <_printf_common+0x14>
    a502:	0013      	movs	r3, r2
    a504:	0022      	movs	r2, r4
    a506:	603b      	str	r3, [r7, #0]
    a508:	3243      	adds	r2, #67	; 0x43
    a50a:	7812      	ldrb	r2, [r2, #0]
    a50c:	2a00      	cmp	r2, #0
    a50e:	d001      	beq.n	a514 <_printf_common+0x24>
    a510:	3301      	adds	r3, #1
    a512:	603b      	str	r3, [r7, #0]
    a514:	6823      	ldr	r3, [r4, #0]
    a516:	069b      	lsls	r3, r3, #26
    a518:	d502      	bpl.n	a520 <_printf_common+0x30>
    a51a:	683b      	ldr	r3, [r7, #0]
    a51c:	3302      	adds	r3, #2
    a51e:	603b      	str	r3, [r7, #0]
    a520:	2506      	movs	r5, #6
    a522:	6823      	ldr	r3, [r4, #0]
    a524:	401d      	ands	r5, r3
    a526:	d01e      	beq.n	a566 <_printf_common+0x76>
    a528:	0023      	movs	r3, r4
    a52a:	3343      	adds	r3, #67	; 0x43
    a52c:	781b      	ldrb	r3, [r3, #0]
    a52e:	1e5a      	subs	r2, r3, #1
    a530:	4193      	sbcs	r3, r2
    a532:	6822      	ldr	r2, [r4, #0]
    a534:	0692      	lsls	r2, r2, #26
    a536:	d51c      	bpl.n	a572 <_printf_common+0x82>
    a538:	2030      	movs	r0, #48	; 0x30
    a53a:	18e1      	adds	r1, r4, r3
    a53c:	3143      	adds	r1, #67	; 0x43
    a53e:	7008      	strb	r0, [r1, #0]
    a540:	0021      	movs	r1, r4
    a542:	1c5a      	adds	r2, r3, #1
    a544:	3145      	adds	r1, #69	; 0x45
    a546:	7809      	ldrb	r1, [r1, #0]
    a548:	18a2      	adds	r2, r4, r2
    a54a:	3243      	adds	r2, #67	; 0x43
    a54c:	3302      	adds	r3, #2
    a54e:	7011      	strb	r1, [r2, #0]
    a550:	e00f      	b.n	a572 <_printf_common+0x82>
    a552:	0022      	movs	r2, r4
    a554:	2301      	movs	r3, #1
    a556:	3219      	adds	r2, #25
    a558:	9901      	ldr	r1, [sp, #4]
    a55a:	9800      	ldr	r0, [sp, #0]
    a55c:	9e08      	ldr	r6, [sp, #32]
    a55e:	47b0      	blx	r6
    a560:	1c43      	adds	r3, r0, #1
    a562:	d00e      	beq.n	a582 <_printf_common+0x92>
    a564:	3501      	adds	r5, #1
    a566:	68e3      	ldr	r3, [r4, #12]
    a568:	683a      	ldr	r2, [r7, #0]
    a56a:	1a9b      	subs	r3, r3, r2
    a56c:	429d      	cmp	r5, r3
    a56e:	dbf0      	blt.n	a552 <_printf_common+0x62>
    a570:	e7da      	b.n	a528 <_printf_common+0x38>
    a572:	0022      	movs	r2, r4
    a574:	9901      	ldr	r1, [sp, #4]
    a576:	3243      	adds	r2, #67	; 0x43
    a578:	9800      	ldr	r0, [sp, #0]
    a57a:	9d08      	ldr	r5, [sp, #32]
    a57c:	47a8      	blx	r5
    a57e:	1c43      	adds	r3, r0, #1
    a580:	d102      	bne.n	a588 <_printf_common+0x98>
    a582:	2001      	movs	r0, #1
    a584:	4240      	negs	r0, r0
    a586:	e020      	b.n	a5ca <_printf_common+0xda>
    a588:	2306      	movs	r3, #6
    a58a:	6820      	ldr	r0, [r4, #0]
    a58c:	68e1      	ldr	r1, [r4, #12]
    a58e:	683a      	ldr	r2, [r7, #0]
    a590:	4003      	ands	r3, r0
    a592:	2500      	movs	r5, #0
    a594:	2b04      	cmp	r3, #4
    a596:	d103      	bne.n	a5a0 <_printf_common+0xb0>
    a598:	1a8d      	subs	r5, r1, r2
    a59a:	43eb      	mvns	r3, r5
    a59c:	17db      	asrs	r3, r3, #31
    a59e:	401d      	ands	r5, r3
    a5a0:	68a3      	ldr	r3, [r4, #8]
    a5a2:	6922      	ldr	r2, [r4, #16]
    a5a4:	4293      	cmp	r3, r2
    a5a6:	dd01      	ble.n	a5ac <_printf_common+0xbc>
    a5a8:	1a9b      	subs	r3, r3, r2
    a5aa:	18ed      	adds	r5, r5, r3
    a5ac:	2700      	movs	r7, #0
    a5ae:	42bd      	cmp	r5, r7
    a5b0:	d00a      	beq.n	a5c8 <_printf_common+0xd8>
    a5b2:	0022      	movs	r2, r4
    a5b4:	2301      	movs	r3, #1
    a5b6:	321a      	adds	r2, #26
    a5b8:	9901      	ldr	r1, [sp, #4]
    a5ba:	9800      	ldr	r0, [sp, #0]
    a5bc:	9e08      	ldr	r6, [sp, #32]
    a5be:	47b0      	blx	r6
    a5c0:	1c43      	adds	r3, r0, #1
    a5c2:	d0de      	beq.n	a582 <_printf_common+0x92>
    a5c4:	3701      	adds	r7, #1
    a5c6:	e7f2      	b.n	a5ae <_printf_common+0xbe>
    a5c8:	2000      	movs	r0, #0
    a5ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000a5cc <_printf_i>:
    a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5ce:	b08b      	sub	sp, #44	; 0x2c
    a5d0:	9206      	str	r2, [sp, #24]
    a5d2:	000a      	movs	r2, r1
    a5d4:	3243      	adds	r2, #67	; 0x43
    a5d6:	9307      	str	r3, [sp, #28]
    a5d8:	9005      	str	r0, [sp, #20]
    a5da:	9204      	str	r2, [sp, #16]
    a5dc:	7e0a      	ldrb	r2, [r1, #24]
    a5de:	000c      	movs	r4, r1
    a5e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a5e2:	2a6e      	cmp	r2, #110	; 0x6e
    a5e4:	d100      	bne.n	a5e8 <_printf_i+0x1c>
    a5e6:	e0ab      	b.n	a740 <_printf_i+0x174>
    a5e8:	d811      	bhi.n	a60e <_printf_i+0x42>
    a5ea:	2a63      	cmp	r2, #99	; 0x63
    a5ec:	d022      	beq.n	a634 <_printf_i+0x68>
    a5ee:	d809      	bhi.n	a604 <_printf_i+0x38>
    a5f0:	2a00      	cmp	r2, #0
    a5f2:	d100      	bne.n	a5f6 <_printf_i+0x2a>
    a5f4:	e0b5      	b.n	a762 <_printf_i+0x196>
    a5f6:	2a58      	cmp	r2, #88	; 0x58
    a5f8:	d000      	beq.n	a5fc <_printf_i+0x30>
    a5fa:	e0c5      	b.n	a788 <_printf_i+0x1bc>
    a5fc:	3145      	adds	r1, #69	; 0x45
    a5fe:	700a      	strb	r2, [r1, #0]
    a600:	4a81      	ldr	r2, [pc, #516]	; (a808 <_printf_i+0x23c>)
    a602:	e04f      	b.n	a6a4 <_printf_i+0xd8>
    a604:	2a64      	cmp	r2, #100	; 0x64
    a606:	d01d      	beq.n	a644 <_printf_i+0x78>
    a608:	2a69      	cmp	r2, #105	; 0x69
    a60a:	d01b      	beq.n	a644 <_printf_i+0x78>
    a60c:	e0bc      	b.n	a788 <_printf_i+0x1bc>
    a60e:	2a73      	cmp	r2, #115	; 0x73
    a610:	d100      	bne.n	a614 <_printf_i+0x48>
    a612:	e0aa      	b.n	a76a <_printf_i+0x19e>
    a614:	d809      	bhi.n	a62a <_printf_i+0x5e>
    a616:	2a6f      	cmp	r2, #111	; 0x6f
    a618:	d029      	beq.n	a66e <_printf_i+0xa2>
    a61a:	2a70      	cmp	r2, #112	; 0x70
    a61c:	d000      	beq.n	a620 <_printf_i+0x54>
    a61e:	e0b3      	b.n	a788 <_printf_i+0x1bc>
    a620:	2220      	movs	r2, #32
    a622:	6809      	ldr	r1, [r1, #0]
    a624:	430a      	orrs	r2, r1
    a626:	6022      	str	r2, [r4, #0]
    a628:	e037      	b.n	a69a <_printf_i+0xce>
    a62a:	2a75      	cmp	r2, #117	; 0x75
    a62c:	d01f      	beq.n	a66e <_printf_i+0xa2>
    a62e:	2a78      	cmp	r2, #120	; 0x78
    a630:	d033      	beq.n	a69a <_printf_i+0xce>
    a632:	e0a9      	b.n	a788 <_printf_i+0x1bc>
    a634:	000e      	movs	r6, r1
    a636:	681a      	ldr	r2, [r3, #0]
    a638:	3642      	adds	r6, #66	; 0x42
    a63a:	1d11      	adds	r1, r2, #4
    a63c:	6019      	str	r1, [r3, #0]
    a63e:	6813      	ldr	r3, [r2, #0]
    a640:	7033      	strb	r3, [r6, #0]
    a642:	e0a4      	b.n	a78e <_printf_i+0x1c2>
    a644:	6821      	ldr	r1, [r4, #0]
    a646:	681a      	ldr	r2, [r3, #0]
    a648:	0608      	lsls	r0, r1, #24
    a64a:	d406      	bmi.n	a65a <_printf_i+0x8e>
    a64c:	0649      	lsls	r1, r1, #25
    a64e:	d504      	bpl.n	a65a <_printf_i+0x8e>
    a650:	1d11      	adds	r1, r2, #4
    a652:	6019      	str	r1, [r3, #0]
    a654:	2300      	movs	r3, #0
    a656:	5ed5      	ldrsh	r5, [r2, r3]
    a658:	e002      	b.n	a660 <_printf_i+0x94>
    a65a:	1d11      	adds	r1, r2, #4
    a65c:	6019      	str	r1, [r3, #0]
    a65e:	6815      	ldr	r5, [r2, #0]
    a660:	2d00      	cmp	r5, #0
    a662:	da3b      	bge.n	a6dc <_printf_i+0x110>
    a664:	232d      	movs	r3, #45	; 0x2d
    a666:	9a04      	ldr	r2, [sp, #16]
    a668:	426d      	negs	r5, r5
    a66a:	7013      	strb	r3, [r2, #0]
    a66c:	e036      	b.n	a6dc <_printf_i+0x110>
    a66e:	6821      	ldr	r1, [r4, #0]
    a670:	681a      	ldr	r2, [r3, #0]
    a672:	0608      	lsls	r0, r1, #24
    a674:	d406      	bmi.n	a684 <_printf_i+0xb8>
    a676:	0649      	lsls	r1, r1, #25
    a678:	d504      	bpl.n	a684 <_printf_i+0xb8>
    a67a:	6815      	ldr	r5, [r2, #0]
    a67c:	1d11      	adds	r1, r2, #4
    a67e:	6019      	str	r1, [r3, #0]
    a680:	b2ad      	uxth	r5, r5
    a682:	e002      	b.n	a68a <_printf_i+0xbe>
    a684:	1d11      	adds	r1, r2, #4
    a686:	6019      	str	r1, [r3, #0]
    a688:	6815      	ldr	r5, [r2, #0]
    a68a:	4b5f      	ldr	r3, [pc, #380]	; (a808 <_printf_i+0x23c>)
    a68c:	7e22      	ldrb	r2, [r4, #24]
    a68e:	9303      	str	r3, [sp, #12]
    a690:	2708      	movs	r7, #8
    a692:	2a6f      	cmp	r2, #111	; 0x6f
    a694:	d01d      	beq.n	a6d2 <_printf_i+0x106>
    a696:	270a      	movs	r7, #10
    a698:	e01b      	b.n	a6d2 <_printf_i+0x106>
    a69a:	0022      	movs	r2, r4
    a69c:	2178      	movs	r1, #120	; 0x78
    a69e:	3245      	adds	r2, #69	; 0x45
    a6a0:	7011      	strb	r1, [r2, #0]
    a6a2:	4a5a      	ldr	r2, [pc, #360]	; (a80c <_printf_i+0x240>)
    a6a4:	6819      	ldr	r1, [r3, #0]
    a6a6:	9203      	str	r2, [sp, #12]
    a6a8:	1d08      	adds	r0, r1, #4
    a6aa:	6822      	ldr	r2, [r4, #0]
    a6ac:	6018      	str	r0, [r3, #0]
    a6ae:	680d      	ldr	r5, [r1, #0]
    a6b0:	0610      	lsls	r0, r2, #24
    a6b2:	d402      	bmi.n	a6ba <_printf_i+0xee>
    a6b4:	0650      	lsls	r0, r2, #25
    a6b6:	d500      	bpl.n	a6ba <_printf_i+0xee>
    a6b8:	b2ad      	uxth	r5, r5
    a6ba:	07d3      	lsls	r3, r2, #31
    a6bc:	d502      	bpl.n	a6c4 <_printf_i+0xf8>
    a6be:	2320      	movs	r3, #32
    a6c0:	431a      	orrs	r2, r3
    a6c2:	6022      	str	r2, [r4, #0]
    a6c4:	2710      	movs	r7, #16
    a6c6:	2d00      	cmp	r5, #0
    a6c8:	d103      	bne.n	a6d2 <_printf_i+0x106>
    a6ca:	2320      	movs	r3, #32
    a6cc:	6822      	ldr	r2, [r4, #0]
    a6ce:	439a      	bics	r2, r3
    a6d0:	6022      	str	r2, [r4, #0]
    a6d2:	0023      	movs	r3, r4
    a6d4:	2200      	movs	r2, #0
    a6d6:	3343      	adds	r3, #67	; 0x43
    a6d8:	701a      	strb	r2, [r3, #0]
    a6da:	e002      	b.n	a6e2 <_printf_i+0x116>
    a6dc:	270a      	movs	r7, #10
    a6de:	4b4a      	ldr	r3, [pc, #296]	; (a808 <_printf_i+0x23c>)
    a6e0:	9303      	str	r3, [sp, #12]
    a6e2:	6863      	ldr	r3, [r4, #4]
    a6e4:	60a3      	str	r3, [r4, #8]
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	db09      	blt.n	a6fe <_printf_i+0x132>
    a6ea:	2204      	movs	r2, #4
    a6ec:	6821      	ldr	r1, [r4, #0]
    a6ee:	4391      	bics	r1, r2
    a6f0:	6021      	str	r1, [r4, #0]
    a6f2:	2d00      	cmp	r5, #0
    a6f4:	d105      	bne.n	a702 <_printf_i+0x136>
    a6f6:	9e04      	ldr	r6, [sp, #16]
    a6f8:	2b00      	cmp	r3, #0
    a6fa:	d011      	beq.n	a720 <_printf_i+0x154>
    a6fc:	e07b      	b.n	a7f6 <_printf_i+0x22a>
    a6fe:	2d00      	cmp	r5, #0
    a700:	d079      	beq.n	a7f6 <_printf_i+0x22a>
    a702:	9e04      	ldr	r6, [sp, #16]
    a704:	0028      	movs	r0, r5
    a706:	0039      	movs	r1, r7
    a708:	f7ff f948 	bl	999c <__aeabi_uidivmod>
    a70c:	9b03      	ldr	r3, [sp, #12]
    a70e:	3e01      	subs	r6, #1
    a710:	5c5b      	ldrb	r3, [r3, r1]
    a712:	0028      	movs	r0, r5
    a714:	7033      	strb	r3, [r6, #0]
    a716:	0039      	movs	r1, r7
    a718:	f7ff f8ba 	bl	9890 <__aeabi_uidiv>
    a71c:	1e05      	subs	r5, r0, #0
    a71e:	d1f1      	bne.n	a704 <_printf_i+0x138>
    a720:	2f08      	cmp	r7, #8
    a722:	d109      	bne.n	a738 <_printf_i+0x16c>
    a724:	6823      	ldr	r3, [r4, #0]
    a726:	07db      	lsls	r3, r3, #31
    a728:	d506      	bpl.n	a738 <_printf_i+0x16c>
    a72a:	6863      	ldr	r3, [r4, #4]
    a72c:	6922      	ldr	r2, [r4, #16]
    a72e:	4293      	cmp	r3, r2
    a730:	dc02      	bgt.n	a738 <_printf_i+0x16c>
    a732:	2330      	movs	r3, #48	; 0x30
    a734:	3e01      	subs	r6, #1
    a736:	7033      	strb	r3, [r6, #0]
    a738:	9b04      	ldr	r3, [sp, #16]
    a73a:	1b9b      	subs	r3, r3, r6
    a73c:	6123      	str	r3, [r4, #16]
    a73e:	e02b      	b.n	a798 <_printf_i+0x1cc>
    a740:	6809      	ldr	r1, [r1, #0]
    a742:	681a      	ldr	r2, [r3, #0]
    a744:	0608      	lsls	r0, r1, #24
    a746:	d407      	bmi.n	a758 <_printf_i+0x18c>
    a748:	0649      	lsls	r1, r1, #25
    a74a:	d505      	bpl.n	a758 <_printf_i+0x18c>
    a74c:	1d11      	adds	r1, r2, #4
    a74e:	6019      	str	r1, [r3, #0]
    a750:	6813      	ldr	r3, [r2, #0]
    a752:	8aa2      	ldrh	r2, [r4, #20]
    a754:	801a      	strh	r2, [r3, #0]
    a756:	e004      	b.n	a762 <_printf_i+0x196>
    a758:	1d11      	adds	r1, r2, #4
    a75a:	6019      	str	r1, [r3, #0]
    a75c:	6813      	ldr	r3, [r2, #0]
    a75e:	6962      	ldr	r2, [r4, #20]
    a760:	601a      	str	r2, [r3, #0]
    a762:	2300      	movs	r3, #0
    a764:	9e04      	ldr	r6, [sp, #16]
    a766:	6123      	str	r3, [r4, #16]
    a768:	e016      	b.n	a798 <_printf_i+0x1cc>
    a76a:	681a      	ldr	r2, [r3, #0]
    a76c:	1d11      	adds	r1, r2, #4
    a76e:	6019      	str	r1, [r3, #0]
    a770:	6816      	ldr	r6, [r2, #0]
    a772:	2100      	movs	r1, #0
    a774:	6862      	ldr	r2, [r4, #4]
    a776:	0030      	movs	r0, r6
    a778:	f000 fc24 	bl	afc4 <memchr>
    a77c:	2800      	cmp	r0, #0
    a77e:	d001      	beq.n	a784 <_printf_i+0x1b8>
    a780:	1b80      	subs	r0, r0, r6
    a782:	6060      	str	r0, [r4, #4]
    a784:	6863      	ldr	r3, [r4, #4]
    a786:	e003      	b.n	a790 <_printf_i+0x1c4>
    a788:	0026      	movs	r6, r4
    a78a:	3642      	adds	r6, #66	; 0x42
    a78c:	7032      	strb	r2, [r6, #0]
    a78e:	2301      	movs	r3, #1
    a790:	6123      	str	r3, [r4, #16]
    a792:	2300      	movs	r3, #0
    a794:	9a04      	ldr	r2, [sp, #16]
    a796:	7013      	strb	r3, [r2, #0]
    a798:	9b07      	ldr	r3, [sp, #28]
    a79a:	aa09      	add	r2, sp, #36	; 0x24
    a79c:	9300      	str	r3, [sp, #0]
    a79e:	0021      	movs	r1, r4
    a7a0:	9b06      	ldr	r3, [sp, #24]
    a7a2:	9805      	ldr	r0, [sp, #20]
    a7a4:	f7ff fea4 	bl	a4f0 <_printf_common>
    a7a8:	1c43      	adds	r3, r0, #1
    a7aa:	d102      	bne.n	a7b2 <_printf_i+0x1e6>
    a7ac:	2001      	movs	r0, #1
    a7ae:	4240      	negs	r0, r0
    a7b0:	e027      	b.n	a802 <_printf_i+0x236>
    a7b2:	6923      	ldr	r3, [r4, #16]
    a7b4:	0032      	movs	r2, r6
    a7b6:	9906      	ldr	r1, [sp, #24]
    a7b8:	9805      	ldr	r0, [sp, #20]
    a7ba:	9d07      	ldr	r5, [sp, #28]
    a7bc:	47a8      	blx	r5
    a7be:	1c43      	adds	r3, r0, #1
    a7c0:	d0f4      	beq.n	a7ac <_printf_i+0x1e0>
    a7c2:	6823      	ldr	r3, [r4, #0]
    a7c4:	2500      	movs	r5, #0
    a7c6:	079b      	lsls	r3, r3, #30
    a7c8:	d40f      	bmi.n	a7ea <_printf_i+0x21e>
    a7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7cc:	68e0      	ldr	r0, [r4, #12]
    a7ce:	4298      	cmp	r0, r3
    a7d0:	da17      	bge.n	a802 <_printf_i+0x236>
    a7d2:	0018      	movs	r0, r3
    a7d4:	e015      	b.n	a802 <_printf_i+0x236>
    a7d6:	0022      	movs	r2, r4
    a7d8:	2301      	movs	r3, #1
    a7da:	3219      	adds	r2, #25
    a7dc:	9906      	ldr	r1, [sp, #24]
    a7de:	9805      	ldr	r0, [sp, #20]
    a7e0:	9e07      	ldr	r6, [sp, #28]
    a7e2:	47b0      	blx	r6
    a7e4:	1c43      	adds	r3, r0, #1
    a7e6:	d0e1      	beq.n	a7ac <_printf_i+0x1e0>
    a7e8:	3501      	adds	r5, #1
    a7ea:	68e3      	ldr	r3, [r4, #12]
    a7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a7ee:	1a9b      	subs	r3, r3, r2
    a7f0:	429d      	cmp	r5, r3
    a7f2:	dbf0      	blt.n	a7d6 <_printf_i+0x20a>
    a7f4:	e7e9      	b.n	a7ca <_printf_i+0x1fe>
    a7f6:	0026      	movs	r6, r4
    a7f8:	9b03      	ldr	r3, [sp, #12]
    a7fa:	3642      	adds	r6, #66	; 0x42
    a7fc:	781b      	ldrb	r3, [r3, #0]
    a7fe:	7033      	strb	r3, [r6, #0]
    a800:	e78e      	b.n	a720 <_printf_i+0x154>
    a802:	b00b      	add	sp, #44	; 0x2c
    a804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a806:	46c0      	nop			; (mov r8, r8)
    a808:	0000cac1 	.word	0x0000cac1
    a80c:	0000cad2 	.word	0x0000cad2

0000a810 <iprintf>:
    a810:	b40f      	push	{r0, r1, r2, r3}
    a812:	4b0b      	ldr	r3, [pc, #44]	; (a840 <iprintf+0x30>)
    a814:	b513      	push	{r0, r1, r4, lr}
    a816:	681c      	ldr	r4, [r3, #0]
    a818:	2c00      	cmp	r4, #0
    a81a:	d005      	beq.n	a828 <iprintf+0x18>
    a81c:	69a3      	ldr	r3, [r4, #24]
    a81e:	2b00      	cmp	r3, #0
    a820:	d102      	bne.n	a828 <iprintf+0x18>
    a822:	0020      	movs	r0, r4
    a824:	f000 fad6 	bl	add4 <__sinit>
    a828:	ab05      	add	r3, sp, #20
    a82a:	9a04      	ldr	r2, [sp, #16]
    a82c:	68a1      	ldr	r1, [r4, #8]
    a82e:	0020      	movs	r0, r4
    a830:	9301      	str	r3, [sp, #4]
    a832:	f7ff fd41 	bl	a2b8 <_vfiprintf_r>
    a836:	bc16      	pop	{r1, r2, r4}
    a838:	bc08      	pop	{r3}
    a83a:	b004      	add	sp, #16
    a83c:	4718      	bx	r3
    a83e:	46c0      	nop			; (mov r8, r8)
    a840:	2000008c 	.word	0x2000008c

0000a844 <putchar>:
    a844:	4b08      	ldr	r3, [pc, #32]	; (a868 <putchar+0x24>)
    a846:	b570      	push	{r4, r5, r6, lr}
    a848:	681c      	ldr	r4, [r3, #0]
    a84a:	0005      	movs	r5, r0
    a84c:	2c00      	cmp	r4, #0
    a84e:	d005      	beq.n	a85c <putchar+0x18>
    a850:	69a3      	ldr	r3, [r4, #24]
    a852:	2b00      	cmp	r3, #0
    a854:	d102      	bne.n	a85c <putchar+0x18>
    a856:	0020      	movs	r0, r4
    a858:	f000 fabc 	bl	add4 <__sinit>
    a85c:	0029      	movs	r1, r5
    a85e:	68a2      	ldr	r2, [r4, #8]
    a860:	0020      	movs	r0, r4
    a862:	f000 fdf1 	bl	b448 <_putc_r>
    a866:	bd70      	pop	{r4, r5, r6, pc}
    a868:	2000008c 	.word	0x2000008c

0000a86c <_puts_r>:
    a86c:	b570      	push	{r4, r5, r6, lr}
    a86e:	0005      	movs	r5, r0
    a870:	000e      	movs	r6, r1
    a872:	2800      	cmp	r0, #0
    a874:	d004      	beq.n	a880 <_puts_r+0x14>
    a876:	6983      	ldr	r3, [r0, #24]
    a878:	2b00      	cmp	r3, #0
    a87a:	d101      	bne.n	a880 <_puts_r+0x14>
    a87c:	f000 faaa 	bl	add4 <__sinit>
    a880:	69ab      	ldr	r3, [r5, #24]
    a882:	68ac      	ldr	r4, [r5, #8]
    a884:	2b00      	cmp	r3, #0
    a886:	d102      	bne.n	a88e <_puts_r+0x22>
    a888:	0028      	movs	r0, r5
    a88a:	f000 faa3 	bl	add4 <__sinit>
    a88e:	4b25      	ldr	r3, [pc, #148]	; (a924 <_puts_r+0xb8>)
    a890:	429c      	cmp	r4, r3
    a892:	d101      	bne.n	a898 <_puts_r+0x2c>
    a894:	686c      	ldr	r4, [r5, #4]
    a896:	e008      	b.n	a8aa <_puts_r+0x3e>
    a898:	4b23      	ldr	r3, [pc, #140]	; (a928 <_puts_r+0xbc>)
    a89a:	429c      	cmp	r4, r3
    a89c:	d101      	bne.n	a8a2 <_puts_r+0x36>
    a89e:	68ac      	ldr	r4, [r5, #8]
    a8a0:	e003      	b.n	a8aa <_puts_r+0x3e>
    a8a2:	4b22      	ldr	r3, [pc, #136]	; (a92c <_puts_r+0xc0>)
    a8a4:	429c      	cmp	r4, r3
    a8a6:	d100      	bne.n	a8aa <_puts_r+0x3e>
    a8a8:	68ec      	ldr	r4, [r5, #12]
    a8aa:	89a3      	ldrh	r3, [r4, #12]
    a8ac:	071b      	lsls	r3, r3, #28
    a8ae:	d502      	bpl.n	a8b6 <_puts_r+0x4a>
    a8b0:	6923      	ldr	r3, [r4, #16]
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d111      	bne.n	a8da <_puts_r+0x6e>
    a8b6:	0021      	movs	r1, r4
    a8b8:	0028      	movs	r0, r5
    a8ba:	f000 f919 	bl	aaf0 <__swsetup_r>
    a8be:	2800      	cmp	r0, #0
    a8c0:	d00b      	beq.n	a8da <_puts_r+0x6e>
    a8c2:	2001      	movs	r0, #1
    a8c4:	4240      	negs	r0, r0
    a8c6:	e02b      	b.n	a920 <_puts_r+0xb4>
    a8c8:	3b01      	subs	r3, #1
    a8ca:	3601      	adds	r6, #1
    a8cc:	60a3      	str	r3, [r4, #8]
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	db08      	blt.n	a8e4 <_puts_r+0x78>
    a8d2:	6823      	ldr	r3, [r4, #0]
    a8d4:	1c5a      	adds	r2, r3, #1
    a8d6:	6022      	str	r2, [r4, #0]
    a8d8:	7019      	strb	r1, [r3, #0]
    a8da:	7831      	ldrb	r1, [r6, #0]
    a8dc:	68a3      	ldr	r3, [r4, #8]
    a8de:	2900      	cmp	r1, #0
    a8e0:	d1f2      	bne.n	a8c8 <_puts_r+0x5c>
    a8e2:	e00b      	b.n	a8fc <_puts_r+0x90>
    a8e4:	69a2      	ldr	r2, [r4, #24]
    a8e6:	4293      	cmp	r3, r2
    a8e8:	db01      	blt.n	a8ee <_puts_r+0x82>
    a8ea:	290a      	cmp	r1, #10
    a8ec:	d1f1      	bne.n	a8d2 <_puts_r+0x66>
    a8ee:	0022      	movs	r2, r4
    a8f0:	0028      	movs	r0, r5
    a8f2:	f000 f8a5 	bl	aa40 <__swbuf_r>
    a8f6:	1c43      	adds	r3, r0, #1
    a8f8:	d1ef      	bne.n	a8da <_puts_r+0x6e>
    a8fa:	e7e2      	b.n	a8c2 <_puts_r+0x56>
    a8fc:	3b01      	subs	r3, #1
    a8fe:	60a3      	str	r3, [r4, #8]
    a900:	2b00      	cmp	r3, #0
    a902:	da08      	bge.n	a916 <_puts_r+0xaa>
    a904:	0022      	movs	r2, r4
    a906:	310a      	adds	r1, #10
    a908:	0028      	movs	r0, r5
    a90a:	f000 f899 	bl	aa40 <__swbuf_r>
    a90e:	1c43      	adds	r3, r0, #1
    a910:	d0d7      	beq.n	a8c2 <_puts_r+0x56>
    a912:	200a      	movs	r0, #10
    a914:	e004      	b.n	a920 <_puts_r+0xb4>
    a916:	200a      	movs	r0, #10
    a918:	6823      	ldr	r3, [r4, #0]
    a91a:	1c5a      	adds	r2, r3, #1
    a91c:	6022      	str	r2, [r4, #0]
    a91e:	7018      	strb	r0, [r3, #0]
    a920:	bd70      	pop	{r4, r5, r6, pc}
    a922:	46c0      	nop			; (mov r8, r8)
    a924:	0000cae4 	.word	0x0000cae4
    a928:	0000cb04 	.word	0x0000cb04
    a92c:	0000cb24 	.word	0x0000cb24

0000a930 <puts>:
    a930:	b510      	push	{r4, lr}
    a932:	4b03      	ldr	r3, [pc, #12]	; (a940 <puts+0x10>)
    a934:	0001      	movs	r1, r0
    a936:	6818      	ldr	r0, [r3, #0]
    a938:	f7ff ff98 	bl	a86c <_puts_r>
    a93c:	bd10      	pop	{r4, pc}
    a93e:	46c0      	nop			; (mov r8, r8)
    a940:	2000008c 	.word	0x2000008c

0000a944 <sniprintf>:
    a944:	b40c      	push	{r2, r3}
    a946:	b530      	push	{r4, r5, lr}
    a948:	4b16      	ldr	r3, [pc, #88]	; (a9a4 <sniprintf+0x60>)
    a94a:	b09d      	sub	sp, #116	; 0x74
    a94c:	1e0c      	subs	r4, r1, #0
    a94e:	681d      	ldr	r5, [r3, #0]
    a950:	da04      	bge.n	a95c <sniprintf+0x18>
    a952:	238b      	movs	r3, #139	; 0x8b
    a954:	2001      	movs	r0, #1
    a956:	602b      	str	r3, [r5, #0]
    a958:	4240      	negs	r0, r0
    a95a:	e01d      	b.n	a998 <sniprintf+0x54>
    a95c:	2382      	movs	r3, #130	; 0x82
    a95e:	a902      	add	r1, sp, #8
    a960:	009b      	lsls	r3, r3, #2
    a962:	818b      	strh	r3, [r1, #12]
    a964:	2300      	movs	r3, #0
    a966:	9002      	str	r0, [sp, #8]
    a968:	6108      	str	r0, [r1, #16]
    a96a:	429c      	cmp	r4, r3
    a96c:	d000      	beq.n	a970 <sniprintf+0x2c>
    a96e:	1e63      	subs	r3, r4, #1
    a970:	608b      	str	r3, [r1, #8]
    a972:	614b      	str	r3, [r1, #20]
    a974:	2301      	movs	r3, #1
    a976:	425b      	negs	r3, r3
    a978:	81cb      	strh	r3, [r1, #14]
    a97a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    a97c:	ab21      	add	r3, sp, #132	; 0x84
    a97e:	0028      	movs	r0, r5
    a980:	9301      	str	r3, [sp, #4]
    a982:	f000 fc63 	bl	b24c <_svfiprintf_r>
    a986:	1c43      	adds	r3, r0, #1
    a988:	da01      	bge.n	a98e <sniprintf+0x4a>
    a98a:	238b      	movs	r3, #139	; 0x8b
    a98c:	602b      	str	r3, [r5, #0]
    a98e:	2c00      	cmp	r4, #0
    a990:	d002      	beq.n	a998 <sniprintf+0x54>
    a992:	2300      	movs	r3, #0
    a994:	9a02      	ldr	r2, [sp, #8]
    a996:	7013      	strb	r3, [r2, #0]
    a998:	b01d      	add	sp, #116	; 0x74
    a99a:	bc30      	pop	{r4, r5}
    a99c:	bc08      	pop	{r3}
    a99e:	b002      	add	sp, #8
    a9a0:	4718      	bx	r3
    a9a2:	46c0      	nop			; (mov r8, r8)
    a9a4:	2000008c 	.word	0x2000008c

0000a9a8 <siprintf>:
    a9a8:	b40e      	push	{r1, r2, r3}
    a9aa:	b510      	push	{r4, lr}
    a9ac:	b09d      	sub	sp, #116	; 0x74
    a9ae:	a902      	add	r1, sp, #8
    a9b0:	9002      	str	r0, [sp, #8]
    a9b2:	6108      	str	r0, [r1, #16]
    a9b4:	480b      	ldr	r0, [pc, #44]	; (a9e4 <siprintf+0x3c>)
    a9b6:	2482      	movs	r4, #130	; 0x82
    a9b8:	6088      	str	r0, [r1, #8]
    a9ba:	6148      	str	r0, [r1, #20]
    a9bc:	2001      	movs	r0, #1
    a9be:	4240      	negs	r0, r0
    a9c0:	ab1f      	add	r3, sp, #124	; 0x7c
    a9c2:	81c8      	strh	r0, [r1, #14]
    a9c4:	4808      	ldr	r0, [pc, #32]	; (a9e8 <siprintf+0x40>)
    a9c6:	cb04      	ldmia	r3!, {r2}
    a9c8:	00a4      	lsls	r4, r4, #2
    a9ca:	6800      	ldr	r0, [r0, #0]
    a9cc:	9301      	str	r3, [sp, #4]
    a9ce:	818c      	strh	r4, [r1, #12]
    a9d0:	f000 fc3c 	bl	b24c <_svfiprintf_r>
    a9d4:	2300      	movs	r3, #0
    a9d6:	9a02      	ldr	r2, [sp, #8]
    a9d8:	7013      	strb	r3, [r2, #0]
    a9da:	b01d      	add	sp, #116	; 0x74
    a9dc:	bc10      	pop	{r4}
    a9de:	bc08      	pop	{r3}
    a9e0:	b003      	add	sp, #12
    a9e2:	4718      	bx	r3
    a9e4:	7fffffff 	.word	0x7fffffff
    a9e8:	2000008c 	.word	0x2000008c

0000a9ec <strlen>:
    a9ec:	2300      	movs	r3, #0
    a9ee:	5cc2      	ldrb	r2, [r0, r3]
    a9f0:	3301      	adds	r3, #1
    a9f2:	2a00      	cmp	r2, #0
    a9f4:	d1fb      	bne.n	a9ee <strlen+0x2>
    a9f6:	1e58      	subs	r0, r3, #1
    a9f8:	4770      	bx	lr

0000a9fa <strncmp>:
    a9fa:	2300      	movs	r3, #0
    a9fc:	b530      	push	{r4, r5, lr}
    a9fe:	429a      	cmp	r2, r3
    aa00:	d00b      	beq.n	aa1a <strncmp+0x20>
    aa02:	3a01      	subs	r2, #1
    aa04:	5cc4      	ldrb	r4, [r0, r3]
    aa06:	5ccd      	ldrb	r5, [r1, r3]
    aa08:	42ac      	cmp	r4, r5
    aa0a:	d105      	bne.n	aa18 <strncmp+0x1e>
    aa0c:	429a      	cmp	r2, r3
    aa0e:	d002      	beq.n	aa16 <strncmp+0x1c>
    aa10:	3301      	adds	r3, #1
    aa12:	2c00      	cmp	r4, #0
    aa14:	d1f6      	bne.n	aa04 <strncmp+0xa>
    aa16:	0025      	movs	r5, r4
    aa18:	1b63      	subs	r3, r4, r5
    aa1a:	0018      	movs	r0, r3
    aa1c:	bd30      	pop	{r4, r5, pc}

0000aa1e <strspn>:
    aa1e:	0003      	movs	r3, r0
    aa20:	b530      	push	{r4, r5, lr}
    aa22:	781c      	ldrb	r4, [r3, #0]
    aa24:	2c00      	cmp	r4, #0
    aa26:	d009      	beq.n	aa3c <strspn+0x1e>
    aa28:	000a      	movs	r2, r1
    aa2a:	7815      	ldrb	r5, [r2, #0]
    aa2c:	2d00      	cmp	r5, #0
    aa2e:	d005      	beq.n	aa3c <strspn+0x1e>
    aa30:	42ac      	cmp	r4, r5
    aa32:	d001      	beq.n	aa38 <strspn+0x1a>
    aa34:	3201      	adds	r2, #1
    aa36:	e7f8      	b.n	aa2a <strspn+0xc>
    aa38:	3301      	adds	r3, #1
    aa3a:	e7f2      	b.n	aa22 <strspn+0x4>
    aa3c:	1a18      	subs	r0, r3, r0
    aa3e:	bd30      	pop	{r4, r5, pc}

0000aa40 <__swbuf_r>:
    aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa42:	0005      	movs	r5, r0
    aa44:	000f      	movs	r7, r1
    aa46:	0014      	movs	r4, r2
    aa48:	2800      	cmp	r0, #0
    aa4a:	d004      	beq.n	aa56 <__swbuf_r+0x16>
    aa4c:	6983      	ldr	r3, [r0, #24]
    aa4e:	2b00      	cmp	r3, #0
    aa50:	d101      	bne.n	aa56 <__swbuf_r+0x16>
    aa52:	f000 f9bf 	bl	add4 <__sinit>
    aa56:	4b23      	ldr	r3, [pc, #140]	; (aae4 <__swbuf_r+0xa4>)
    aa58:	429c      	cmp	r4, r3
    aa5a:	d101      	bne.n	aa60 <__swbuf_r+0x20>
    aa5c:	686c      	ldr	r4, [r5, #4]
    aa5e:	e008      	b.n	aa72 <__swbuf_r+0x32>
    aa60:	4b21      	ldr	r3, [pc, #132]	; (aae8 <__swbuf_r+0xa8>)
    aa62:	429c      	cmp	r4, r3
    aa64:	d101      	bne.n	aa6a <__swbuf_r+0x2a>
    aa66:	68ac      	ldr	r4, [r5, #8]
    aa68:	e003      	b.n	aa72 <__swbuf_r+0x32>
    aa6a:	4b20      	ldr	r3, [pc, #128]	; (aaec <__swbuf_r+0xac>)
    aa6c:	429c      	cmp	r4, r3
    aa6e:	d100      	bne.n	aa72 <__swbuf_r+0x32>
    aa70:	68ec      	ldr	r4, [r5, #12]
    aa72:	69a3      	ldr	r3, [r4, #24]
    aa74:	60a3      	str	r3, [r4, #8]
    aa76:	89a3      	ldrh	r3, [r4, #12]
    aa78:	071b      	lsls	r3, r3, #28
    aa7a:	d50a      	bpl.n	aa92 <__swbuf_r+0x52>
    aa7c:	6923      	ldr	r3, [r4, #16]
    aa7e:	2b00      	cmp	r3, #0
    aa80:	d007      	beq.n	aa92 <__swbuf_r+0x52>
    aa82:	6823      	ldr	r3, [r4, #0]
    aa84:	6922      	ldr	r2, [r4, #16]
    aa86:	b2fe      	uxtb	r6, r7
    aa88:	1a98      	subs	r0, r3, r2
    aa8a:	6963      	ldr	r3, [r4, #20]
    aa8c:	4298      	cmp	r0, r3
    aa8e:	db0f      	blt.n	aab0 <__swbuf_r+0x70>
    aa90:	e008      	b.n	aaa4 <__swbuf_r+0x64>
    aa92:	0021      	movs	r1, r4
    aa94:	0028      	movs	r0, r5
    aa96:	f000 f82b 	bl	aaf0 <__swsetup_r>
    aa9a:	2800      	cmp	r0, #0
    aa9c:	d0f1      	beq.n	aa82 <__swbuf_r+0x42>
    aa9e:	2001      	movs	r0, #1
    aaa0:	4240      	negs	r0, r0
    aaa2:	e01d      	b.n	aae0 <__swbuf_r+0xa0>
    aaa4:	0021      	movs	r1, r4
    aaa6:	0028      	movs	r0, r5
    aaa8:	f000 f926 	bl	acf8 <_fflush_r>
    aaac:	2800      	cmp	r0, #0
    aaae:	d1f6      	bne.n	aa9e <__swbuf_r+0x5e>
    aab0:	68a3      	ldr	r3, [r4, #8]
    aab2:	3001      	adds	r0, #1
    aab4:	3b01      	subs	r3, #1
    aab6:	60a3      	str	r3, [r4, #8]
    aab8:	6823      	ldr	r3, [r4, #0]
    aaba:	1c5a      	adds	r2, r3, #1
    aabc:	6022      	str	r2, [r4, #0]
    aabe:	701f      	strb	r7, [r3, #0]
    aac0:	6963      	ldr	r3, [r4, #20]
    aac2:	4298      	cmp	r0, r3
    aac4:	d005      	beq.n	aad2 <__swbuf_r+0x92>
    aac6:	89a3      	ldrh	r3, [r4, #12]
    aac8:	0030      	movs	r0, r6
    aaca:	07db      	lsls	r3, r3, #31
    aacc:	d508      	bpl.n	aae0 <__swbuf_r+0xa0>
    aace:	2e0a      	cmp	r6, #10
    aad0:	d106      	bne.n	aae0 <__swbuf_r+0xa0>
    aad2:	0021      	movs	r1, r4
    aad4:	0028      	movs	r0, r5
    aad6:	f000 f90f 	bl	acf8 <_fflush_r>
    aada:	2800      	cmp	r0, #0
    aadc:	d1df      	bne.n	aa9e <__swbuf_r+0x5e>
    aade:	0030      	movs	r0, r6
    aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aae2:	46c0      	nop			; (mov r8, r8)
    aae4:	0000cae4 	.word	0x0000cae4
    aae8:	0000cb04 	.word	0x0000cb04
    aaec:	0000cb24 	.word	0x0000cb24

0000aaf0 <__swsetup_r>:
    aaf0:	4b36      	ldr	r3, [pc, #216]	; (abcc <__swsetup_r+0xdc>)
    aaf2:	b570      	push	{r4, r5, r6, lr}
    aaf4:	681d      	ldr	r5, [r3, #0]
    aaf6:	0006      	movs	r6, r0
    aaf8:	000c      	movs	r4, r1
    aafa:	2d00      	cmp	r5, #0
    aafc:	d005      	beq.n	ab0a <__swsetup_r+0x1a>
    aafe:	69ab      	ldr	r3, [r5, #24]
    ab00:	2b00      	cmp	r3, #0
    ab02:	d102      	bne.n	ab0a <__swsetup_r+0x1a>
    ab04:	0028      	movs	r0, r5
    ab06:	f000 f965 	bl	add4 <__sinit>
    ab0a:	4b31      	ldr	r3, [pc, #196]	; (abd0 <__swsetup_r+0xe0>)
    ab0c:	429c      	cmp	r4, r3
    ab0e:	d101      	bne.n	ab14 <__swsetup_r+0x24>
    ab10:	686c      	ldr	r4, [r5, #4]
    ab12:	e008      	b.n	ab26 <__swsetup_r+0x36>
    ab14:	4b2f      	ldr	r3, [pc, #188]	; (abd4 <__swsetup_r+0xe4>)
    ab16:	429c      	cmp	r4, r3
    ab18:	d101      	bne.n	ab1e <__swsetup_r+0x2e>
    ab1a:	68ac      	ldr	r4, [r5, #8]
    ab1c:	e003      	b.n	ab26 <__swsetup_r+0x36>
    ab1e:	4b2e      	ldr	r3, [pc, #184]	; (abd8 <__swsetup_r+0xe8>)
    ab20:	429c      	cmp	r4, r3
    ab22:	d100      	bne.n	ab26 <__swsetup_r+0x36>
    ab24:	68ec      	ldr	r4, [r5, #12]
    ab26:	220c      	movs	r2, #12
    ab28:	5ea3      	ldrsh	r3, [r4, r2]
    ab2a:	b29a      	uxth	r2, r3
    ab2c:	0711      	lsls	r1, r2, #28
    ab2e:	d423      	bmi.n	ab78 <__swsetup_r+0x88>
    ab30:	06d1      	lsls	r1, r2, #27
    ab32:	d407      	bmi.n	ab44 <__swsetup_r+0x54>
    ab34:	2209      	movs	r2, #9
    ab36:	2001      	movs	r0, #1
    ab38:	6032      	str	r2, [r6, #0]
    ab3a:	3237      	adds	r2, #55	; 0x37
    ab3c:	4313      	orrs	r3, r2
    ab3e:	81a3      	strh	r3, [r4, #12]
    ab40:	4240      	negs	r0, r0
    ab42:	e042      	b.n	abca <__swsetup_r+0xda>
    ab44:	0753      	lsls	r3, r2, #29
    ab46:	d513      	bpl.n	ab70 <__swsetup_r+0x80>
    ab48:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ab4a:	2900      	cmp	r1, #0
    ab4c:	d008      	beq.n	ab60 <__swsetup_r+0x70>
    ab4e:	0023      	movs	r3, r4
    ab50:	3344      	adds	r3, #68	; 0x44
    ab52:	4299      	cmp	r1, r3
    ab54:	d002      	beq.n	ab5c <__swsetup_r+0x6c>
    ab56:	0030      	movs	r0, r6
    ab58:	f000 fa54 	bl	b004 <_free_r>
    ab5c:	2300      	movs	r3, #0
    ab5e:	6363      	str	r3, [r4, #52]	; 0x34
    ab60:	2224      	movs	r2, #36	; 0x24
    ab62:	89a3      	ldrh	r3, [r4, #12]
    ab64:	4393      	bics	r3, r2
    ab66:	81a3      	strh	r3, [r4, #12]
    ab68:	2300      	movs	r3, #0
    ab6a:	6063      	str	r3, [r4, #4]
    ab6c:	6923      	ldr	r3, [r4, #16]
    ab6e:	6023      	str	r3, [r4, #0]
    ab70:	2208      	movs	r2, #8
    ab72:	89a3      	ldrh	r3, [r4, #12]
    ab74:	4313      	orrs	r3, r2
    ab76:	81a3      	strh	r3, [r4, #12]
    ab78:	6923      	ldr	r3, [r4, #16]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d10b      	bne.n	ab96 <__swsetup_r+0xa6>
    ab7e:	23a0      	movs	r3, #160	; 0xa0
    ab80:	89a2      	ldrh	r2, [r4, #12]
    ab82:	009b      	lsls	r3, r3, #2
    ab84:	4013      	ands	r3, r2
    ab86:	2280      	movs	r2, #128	; 0x80
    ab88:	0092      	lsls	r2, r2, #2
    ab8a:	4293      	cmp	r3, r2
    ab8c:	d003      	beq.n	ab96 <__swsetup_r+0xa6>
    ab8e:	0021      	movs	r1, r4
    ab90:	0030      	movs	r0, r6
    ab92:	f000 f9d9 	bl	af48 <__smakebuf_r>
    ab96:	2301      	movs	r3, #1
    ab98:	89a2      	ldrh	r2, [r4, #12]
    ab9a:	4013      	ands	r3, r2
    ab9c:	d005      	beq.n	abaa <__swsetup_r+0xba>
    ab9e:	2300      	movs	r3, #0
    aba0:	60a3      	str	r3, [r4, #8]
    aba2:	6963      	ldr	r3, [r4, #20]
    aba4:	425b      	negs	r3, r3
    aba6:	61a3      	str	r3, [r4, #24]
    aba8:	e003      	b.n	abb2 <__swsetup_r+0xc2>
    abaa:	0792      	lsls	r2, r2, #30
    abac:	d400      	bmi.n	abb0 <__swsetup_r+0xc0>
    abae:	6963      	ldr	r3, [r4, #20]
    abb0:	60a3      	str	r3, [r4, #8]
    abb2:	2000      	movs	r0, #0
    abb4:	6923      	ldr	r3, [r4, #16]
    abb6:	4283      	cmp	r3, r0
    abb8:	d107      	bne.n	abca <__swsetup_r+0xda>
    abba:	220c      	movs	r2, #12
    abbc:	5ea3      	ldrsh	r3, [r4, r2]
    abbe:	061a      	lsls	r2, r3, #24
    abc0:	d503      	bpl.n	abca <__swsetup_r+0xda>
    abc2:	2240      	movs	r2, #64	; 0x40
    abc4:	4313      	orrs	r3, r2
    abc6:	81a3      	strh	r3, [r4, #12]
    abc8:	3801      	subs	r0, #1
    abca:	bd70      	pop	{r4, r5, r6, pc}
    abcc:	2000008c 	.word	0x2000008c
    abd0:	0000cae4 	.word	0x0000cae4
    abd4:	0000cb04 	.word	0x0000cb04
    abd8:	0000cb24 	.word	0x0000cb24

0000abdc <abort>:
    abdc:	b510      	push	{r4, lr}
    abde:	2006      	movs	r0, #6
    abe0:	f000 fca4 	bl	b52c <raise>
    abe4:	2001      	movs	r0, #1
    abe6:	f7fb fe3d 	bl	6864 <_exit>
	...

0000abec <__sflush_r>:
    abec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    abee:	898a      	ldrh	r2, [r1, #12]
    abf0:	0005      	movs	r5, r0
    abf2:	000c      	movs	r4, r1
    abf4:	0713      	lsls	r3, r2, #28
    abf6:	d45a      	bmi.n	acae <__sflush_r+0xc2>
    abf8:	684b      	ldr	r3, [r1, #4]
    abfa:	2b00      	cmp	r3, #0
    abfc:	dc02      	bgt.n	ac04 <__sflush_r+0x18>
    abfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    ac00:	2b00      	cmp	r3, #0
    ac02:	dd19      	ble.n	ac38 <__sflush_r+0x4c>
    ac04:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    ac06:	2f00      	cmp	r7, #0
    ac08:	d016      	beq.n	ac38 <__sflush_r+0x4c>
    ac0a:	2300      	movs	r3, #0
    ac0c:	682e      	ldr	r6, [r5, #0]
    ac0e:	602b      	str	r3, [r5, #0]
    ac10:	2380      	movs	r3, #128	; 0x80
    ac12:	015b      	lsls	r3, r3, #5
    ac14:	401a      	ands	r2, r3
    ac16:	d001      	beq.n	ac1c <__sflush_r+0x30>
    ac18:	6d60      	ldr	r0, [r4, #84]	; 0x54
    ac1a:	e014      	b.n	ac46 <__sflush_r+0x5a>
    ac1c:	2301      	movs	r3, #1
    ac1e:	6a21      	ldr	r1, [r4, #32]
    ac20:	0028      	movs	r0, r5
    ac22:	47b8      	blx	r7
    ac24:	1c43      	adds	r3, r0, #1
    ac26:	d10e      	bne.n	ac46 <__sflush_r+0x5a>
    ac28:	682b      	ldr	r3, [r5, #0]
    ac2a:	2b00      	cmp	r3, #0
    ac2c:	d00b      	beq.n	ac46 <__sflush_r+0x5a>
    ac2e:	2b1d      	cmp	r3, #29
    ac30:	d001      	beq.n	ac36 <__sflush_r+0x4a>
    ac32:	2b16      	cmp	r3, #22
    ac34:	d102      	bne.n	ac3c <__sflush_r+0x50>
    ac36:	602e      	str	r6, [r5, #0]
    ac38:	2000      	movs	r0, #0
    ac3a:	e05a      	b.n	acf2 <__sflush_r+0x106>
    ac3c:	2240      	movs	r2, #64	; 0x40
    ac3e:	89a3      	ldrh	r3, [r4, #12]
    ac40:	4313      	orrs	r3, r2
    ac42:	81a3      	strh	r3, [r4, #12]
    ac44:	e055      	b.n	acf2 <__sflush_r+0x106>
    ac46:	89a3      	ldrh	r3, [r4, #12]
    ac48:	075b      	lsls	r3, r3, #29
    ac4a:	d506      	bpl.n	ac5a <__sflush_r+0x6e>
    ac4c:	6863      	ldr	r3, [r4, #4]
    ac4e:	1ac0      	subs	r0, r0, r3
    ac50:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ac52:	2b00      	cmp	r3, #0
    ac54:	d001      	beq.n	ac5a <__sflush_r+0x6e>
    ac56:	6c23      	ldr	r3, [r4, #64]	; 0x40
    ac58:	1ac0      	subs	r0, r0, r3
    ac5a:	2300      	movs	r3, #0
    ac5c:	0002      	movs	r2, r0
    ac5e:	6a21      	ldr	r1, [r4, #32]
    ac60:	0028      	movs	r0, r5
    ac62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    ac64:	47b8      	blx	r7
    ac66:	89a3      	ldrh	r3, [r4, #12]
    ac68:	1c42      	adds	r2, r0, #1
    ac6a:	d106      	bne.n	ac7a <__sflush_r+0x8e>
    ac6c:	6829      	ldr	r1, [r5, #0]
    ac6e:	291d      	cmp	r1, #29
    ac70:	d83a      	bhi.n	ace8 <__sflush_r+0xfc>
    ac72:	4a20      	ldr	r2, [pc, #128]	; (acf4 <__sflush_r+0x108>)
    ac74:	40ca      	lsrs	r2, r1
    ac76:	07d2      	lsls	r2, r2, #31
    ac78:	d536      	bpl.n	ace8 <__sflush_r+0xfc>
    ac7a:	2200      	movs	r2, #0
    ac7c:	6062      	str	r2, [r4, #4]
    ac7e:	6922      	ldr	r2, [r4, #16]
    ac80:	6022      	str	r2, [r4, #0]
    ac82:	04db      	lsls	r3, r3, #19
    ac84:	d505      	bpl.n	ac92 <__sflush_r+0xa6>
    ac86:	1c43      	adds	r3, r0, #1
    ac88:	d102      	bne.n	ac90 <__sflush_r+0xa4>
    ac8a:	682b      	ldr	r3, [r5, #0]
    ac8c:	2b00      	cmp	r3, #0
    ac8e:	d100      	bne.n	ac92 <__sflush_r+0xa6>
    ac90:	6560      	str	r0, [r4, #84]	; 0x54
    ac92:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ac94:	602e      	str	r6, [r5, #0]
    ac96:	2900      	cmp	r1, #0
    ac98:	d0ce      	beq.n	ac38 <__sflush_r+0x4c>
    ac9a:	0023      	movs	r3, r4
    ac9c:	3344      	adds	r3, #68	; 0x44
    ac9e:	4299      	cmp	r1, r3
    aca0:	d002      	beq.n	aca8 <__sflush_r+0xbc>
    aca2:	0028      	movs	r0, r5
    aca4:	f000 f9ae 	bl	b004 <_free_r>
    aca8:	2000      	movs	r0, #0
    acaa:	6360      	str	r0, [r4, #52]	; 0x34
    acac:	e021      	b.n	acf2 <__sflush_r+0x106>
    acae:	690f      	ldr	r7, [r1, #16]
    acb0:	2f00      	cmp	r7, #0
    acb2:	d0c1      	beq.n	ac38 <__sflush_r+0x4c>
    acb4:	680b      	ldr	r3, [r1, #0]
    acb6:	600f      	str	r7, [r1, #0]
    acb8:	1bdb      	subs	r3, r3, r7
    acba:	9301      	str	r3, [sp, #4]
    acbc:	2300      	movs	r3, #0
    acbe:	0792      	lsls	r2, r2, #30
    acc0:	d100      	bne.n	acc4 <__sflush_r+0xd8>
    acc2:	694b      	ldr	r3, [r1, #20]
    acc4:	60a3      	str	r3, [r4, #8]
    acc6:	e003      	b.n	acd0 <__sflush_r+0xe4>
    acc8:	9b01      	ldr	r3, [sp, #4]
    acca:	183f      	adds	r7, r7, r0
    accc:	1a1b      	subs	r3, r3, r0
    acce:	9301      	str	r3, [sp, #4]
    acd0:	9b01      	ldr	r3, [sp, #4]
    acd2:	2b00      	cmp	r3, #0
    acd4:	ddb0      	ble.n	ac38 <__sflush_r+0x4c>
    acd6:	9b01      	ldr	r3, [sp, #4]
    acd8:	003a      	movs	r2, r7
    acda:	6a21      	ldr	r1, [r4, #32]
    acdc:	0028      	movs	r0, r5
    acde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ace0:	47b0      	blx	r6
    ace2:	2800      	cmp	r0, #0
    ace4:	dcf0      	bgt.n	acc8 <__sflush_r+0xdc>
    ace6:	89a3      	ldrh	r3, [r4, #12]
    ace8:	2240      	movs	r2, #64	; 0x40
    acea:	2001      	movs	r0, #1
    acec:	4313      	orrs	r3, r2
    acee:	81a3      	strh	r3, [r4, #12]
    acf0:	4240      	negs	r0, r0
    acf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    acf4:	20400001 	.word	0x20400001

0000acf8 <_fflush_r>:
    acf8:	690b      	ldr	r3, [r1, #16]
    acfa:	b570      	push	{r4, r5, r6, lr}
    acfc:	0005      	movs	r5, r0
    acfe:	000c      	movs	r4, r1
    ad00:	2b00      	cmp	r3, #0
    ad02:	d101      	bne.n	ad08 <_fflush_r+0x10>
    ad04:	2000      	movs	r0, #0
    ad06:	e01c      	b.n	ad42 <_fflush_r+0x4a>
    ad08:	2800      	cmp	r0, #0
    ad0a:	d004      	beq.n	ad16 <_fflush_r+0x1e>
    ad0c:	6983      	ldr	r3, [r0, #24]
    ad0e:	2b00      	cmp	r3, #0
    ad10:	d101      	bne.n	ad16 <_fflush_r+0x1e>
    ad12:	f000 f85f 	bl	add4 <__sinit>
    ad16:	4b0b      	ldr	r3, [pc, #44]	; (ad44 <_fflush_r+0x4c>)
    ad18:	429c      	cmp	r4, r3
    ad1a:	d101      	bne.n	ad20 <_fflush_r+0x28>
    ad1c:	686c      	ldr	r4, [r5, #4]
    ad1e:	e008      	b.n	ad32 <_fflush_r+0x3a>
    ad20:	4b09      	ldr	r3, [pc, #36]	; (ad48 <_fflush_r+0x50>)
    ad22:	429c      	cmp	r4, r3
    ad24:	d101      	bne.n	ad2a <_fflush_r+0x32>
    ad26:	68ac      	ldr	r4, [r5, #8]
    ad28:	e003      	b.n	ad32 <_fflush_r+0x3a>
    ad2a:	4b08      	ldr	r3, [pc, #32]	; (ad4c <_fflush_r+0x54>)
    ad2c:	429c      	cmp	r4, r3
    ad2e:	d100      	bne.n	ad32 <_fflush_r+0x3a>
    ad30:	68ec      	ldr	r4, [r5, #12]
    ad32:	220c      	movs	r2, #12
    ad34:	5ea3      	ldrsh	r3, [r4, r2]
    ad36:	2b00      	cmp	r3, #0
    ad38:	d0e4      	beq.n	ad04 <_fflush_r+0xc>
    ad3a:	0021      	movs	r1, r4
    ad3c:	0028      	movs	r0, r5
    ad3e:	f7ff ff55 	bl	abec <__sflush_r>
    ad42:	bd70      	pop	{r4, r5, r6, pc}
    ad44:	0000cae4 	.word	0x0000cae4
    ad48:	0000cb04 	.word	0x0000cb04
    ad4c:	0000cb24 	.word	0x0000cb24

0000ad50 <_cleanup_r>:
    ad50:	b510      	push	{r4, lr}
    ad52:	4902      	ldr	r1, [pc, #8]	; (ad5c <_cleanup_r+0xc>)
    ad54:	f000 f8b0 	bl	aeb8 <_fwalk_reent>
    ad58:	bd10      	pop	{r4, pc}
    ad5a:	46c0      	nop			; (mov r8, r8)
    ad5c:	0000acf9 	.word	0x0000acf9

0000ad60 <std.isra.0>:
    ad60:	2300      	movs	r3, #0
    ad62:	b510      	push	{r4, lr}
    ad64:	0004      	movs	r4, r0
    ad66:	6003      	str	r3, [r0, #0]
    ad68:	6043      	str	r3, [r0, #4]
    ad6a:	6083      	str	r3, [r0, #8]
    ad6c:	8181      	strh	r1, [r0, #12]
    ad6e:	6643      	str	r3, [r0, #100]	; 0x64
    ad70:	81c2      	strh	r2, [r0, #14]
    ad72:	6103      	str	r3, [r0, #16]
    ad74:	6143      	str	r3, [r0, #20]
    ad76:	6183      	str	r3, [r0, #24]
    ad78:	0019      	movs	r1, r3
    ad7a:	2208      	movs	r2, #8
    ad7c:	305c      	adds	r0, #92	; 0x5c
    ad7e:	f7ff fa6c 	bl	a25a <memset>
    ad82:	4b05      	ldr	r3, [pc, #20]	; (ad98 <std.isra.0+0x38>)
    ad84:	6224      	str	r4, [r4, #32]
    ad86:	6263      	str	r3, [r4, #36]	; 0x24
    ad88:	4b04      	ldr	r3, [pc, #16]	; (ad9c <std.isra.0+0x3c>)
    ad8a:	62a3      	str	r3, [r4, #40]	; 0x28
    ad8c:	4b04      	ldr	r3, [pc, #16]	; (ada0 <std.isra.0+0x40>)
    ad8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    ad90:	4b04      	ldr	r3, [pc, #16]	; (ada4 <std.isra.0+0x44>)
    ad92:	6323      	str	r3, [r4, #48]	; 0x30
    ad94:	bd10      	pop	{r4, pc}
    ad96:	46c0      	nop			; (mov r8, r8)
    ad98:	0000b56d 	.word	0x0000b56d
    ad9c:	0000b595 	.word	0x0000b595
    ada0:	0000b5cd 	.word	0x0000b5cd
    ada4:	0000b5f9 	.word	0x0000b5f9

0000ada8 <__sfmoreglue>:
    ada8:	b570      	push	{r4, r5, r6, lr}
    adaa:	2568      	movs	r5, #104	; 0x68
    adac:	1e4b      	subs	r3, r1, #1
    adae:	435d      	muls	r5, r3
    adb0:	000e      	movs	r6, r1
    adb2:	0029      	movs	r1, r5
    adb4:	3174      	adds	r1, #116	; 0x74
    adb6:	f000 f96b 	bl	b090 <_malloc_r>
    adba:	1e04      	subs	r4, r0, #0
    adbc:	d008      	beq.n	add0 <__sfmoreglue+0x28>
    adbe:	2100      	movs	r1, #0
    adc0:	002a      	movs	r2, r5
    adc2:	6001      	str	r1, [r0, #0]
    adc4:	6046      	str	r6, [r0, #4]
    adc6:	300c      	adds	r0, #12
    adc8:	60a0      	str	r0, [r4, #8]
    adca:	3268      	adds	r2, #104	; 0x68
    adcc:	f7ff fa45 	bl	a25a <memset>
    add0:	0020      	movs	r0, r4
    add2:	bd70      	pop	{r4, r5, r6, pc}

0000add4 <__sinit>:
    add4:	6983      	ldr	r3, [r0, #24]
    add6:	b513      	push	{r0, r1, r4, lr}
    add8:	0004      	movs	r4, r0
    adda:	2b00      	cmp	r3, #0
    addc:	d128      	bne.n	ae30 <__sinit+0x5c>
    adde:	6483      	str	r3, [r0, #72]	; 0x48
    ade0:	64c3      	str	r3, [r0, #76]	; 0x4c
    ade2:	6503      	str	r3, [r0, #80]	; 0x50
    ade4:	4b13      	ldr	r3, [pc, #76]	; (ae34 <__sinit+0x60>)
    ade6:	4a14      	ldr	r2, [pc, #80]	; (ae38 <__sinit+0x64>)
    ade8:	681b      	ldr	r3, [r3, #0]
    adea:	6282      	str	r2, [r0, #40]	; 0x28
    adec:	9301      	str	r3, [sp, #4]
    adee:	4298      	cmp	r0, r3
    adf0:	d101      	bne.n	adf6 <__sinit+0x22>
    adf2:	2301      	movs	r3, #1
    adf4:	6183      	str	r3, [r0, #24]
    adf6:	0020      	movs	r0, r4
    adf8:	f000 f820 	bl	ae3c <__sfp>
    adfc:	6060      	str	r0, [r4, #4]
    adfe:	0020      	movs	r0, r4
    ae00:	f000 f81c 	bl	ae3c <__sfp>
    ae04:	60a0      	str	r0, [r4, #8]
    ae06:	0020      	movs	r0, r4
    ae08:	f000 f818 	bl	ae3c <__sfp>
    ae0c:	2200      	movs	r2, #0
    ae0e:	60e0      	str	r0, [r4, #12]
    ae10:	2104      	movs	r1, #4
    ae12:	6860      	ldr	r0, [r4, #4]
    ae14:	f7ff ffa4 	bl	ad60 <std.isra.0>
    ae18:	2201      	movs	r2, #1
    ae1a:	2109      	movs	r1, #9
    ae1c:	68a0      	ldr	r0, [r4, #8]
    ae1e:	f7ff ff9f 	bl	ad60 <std.isra.0>
    ae22:	2202      	movs	r2, #2
    ae24:	2112      	movs	r1, #18
    ae26:	68e0      	ldr	r0, [r4, #12]
    ae28:	f7ff ff9a 	bl	ad60 <std.isra.0>
    ae2c:	2301      	movs	r3, #1
    ae2e:	61a3      	str	r3, [r4, #24]
    ae30:	bd13      	pop	{r0, r1, r4, pc}
    ae32:	46c0      	nop			; (mov r8, r8)
    ae34:	0000caac 	.word	0x0000caac
    ae38:	0000ad51 	.word	0x0000ad51

0000ae3c <__sfp>:
    ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae3e:	4b1d      	ldr	r3, [pc, #116]	; (aeb4 <__sfp+0x78>)
    ae40:	0006      	movs	r6, r0
    ae42:	681d      	ldr	r5, [r3, #0]
    ae44:	69ab      	ldr	r3, [r5, #24]
    ae46:	2b00      	cmp	r3, #0
    ae48:	d102      	bne.n	ae50 <__sfp+0x14>
    ae4a:	0028      	movs	r0, r5
    ae4c:	f7ff ffc2 	bl	add4 <__sinit>
    ae50:	3548      	adds	r5, #72	; 0x48
    ae52:	68ac      	ldr	r4, [r5, #8]
    ae54:	686b      	ldr	r3, [r5, #4]
    ae56:	3b01      	subs	r3, #1
    ae58:	d405      	bmi.n	ae66 <__sfp+0x2a>
    ae5a:	220c      	movs	r2, #12
    ae5c:	5ea7      	ldrsh	r7, [r4, r2]
    ae5e:	2f00      	cmp	r7, #0
    ae60:	d010      	beq.n	ae84 <__sfp+0x48>
    ae62:	3468      	adds	r4, #104	; 0x68
    ae64:	e7f7      	b.n	ae56 <__sfp+0x1a>
    ae66:	682b      	ldr	r3, [r5, #0]
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d001      	beq.n	ae70 <__sfp+0x34>
    ae6c:	682d      	ldr	r5, [r5, #0]
    ae6e:	e7f0      	b.n	ae52 <__sfp+0x16>
    ae70:	2104      	movs	r1, #4
    ae72:	0030      	movs	r0, r6
    ae74:	f7ff ff98 	bl	ada8 <__sfmoreglue>
    ae78:	6028      	str	r0, [r5, #0]
    ae7a:	2800      	cmp	r0, #0
    ae7c:	d1f6      	bne.n	ae6c <__sfp+0x30>
    ae7e:	230c      	movs	r3, #12
    ae80:	6033      	str	r3, [r6, #0]
    ae82:	e016      	b.n	aeb2 <__sfp+0x76>
    ae84:	2301      	movs	r3, #1
    ae86:	0020      	movs	r0, r4
    ae88:	425b      	negs	r3, r3
    ae8a:	81e3      	strh	r3, [r4, #14]
    ae8c:	3302      	adds	r3, #2
    ae8e:	81a3      	strh	r3, [r4, #12]
    ae90:	6667      	str	r7, [r4, #100]	; 0x64
    ae92:	6027      	str	r7, [r4, #0]
    ae94:	60a7      	str	r7, [r4, #8]
    ae96:	6067      	str	r7, [r4, #4]
    ae98:	6127      	str	r7, [r4, #16]
    ae9a:	6167      	str	r7, [r4, #20]
    ae9c:	61a7      	str	r7, [r4, #24]
    ae9e:	305c      	adds	r0, #92	; 0x5c
    aea0:	2208      	movs	r2, #8
    aea2:	0039      	movs	r1, r7
    aea4:	f7ff f9d9 	bl	a25a <memset>
    aea8:	0020      	movs	r0, r4
    aeaa:	6367      	str	r7, [r4, #52]	; 0x34
    aeac:	63a7      	str	r7, [r4, #56]	; 0x38
    aeae:	64a7      	str	r7, [r4, #72]	; 0x48
    aeb0:	64e7      	str	r7, [r4, #76]	; 0x4c
    aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aeb4:	0000caac 	.word	0x0000caac

0000aeb8 <_fwalk_reent>:
    aeb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aeba:	0004      	movs	r4, r0
    aebc:	0007      	movs	r7, r0
    aebe:	2600      	movs	r6, #0
    aec0:	9101      	str	r1, [sp, #4]
    aec2:	3448      	adds	r4, #72	; 0x48
    aec4:	2c00      	cmp	r4, #0
    aec6:	d016      	beq.n	aef6 <_fwalk_reent+0x3e>
    aec8:	6863      	ldr	r3, [r4, #4]
    aeca:	68a5      	ldr	r5, [r4, #8]
    aecc:	9300      	str	r3, [sp, #0]
    aece:	9b00      	ldr	r3, [sp, #0]
    aed0:	3b01      	subs	r3, #1
    aed2:	9300      	str	r3, [sp, #0]
    aed4:	d40d      	bmi.n	aef2 <_fwalk_reent+0x3a>
    aed6:	89ab      	ldrh	r3, [r5, #12]
    aed8:	2b01      	cmp	r3, #1
    aeda:	d908      	bls.n	aeee <_fwalk_reent+0x36>
    aedc:	220e      	movs	r2, #14
    aede:	5eab      	ldrsh	r3, [r5, r2]
    aee0:	3301      	adds	r3, #1
    aee2:	d004      	beq.n	aeee <_fwalk_reent+0x36>
    aee4:	0029      	movs	r1, r5
    aee6:	0038      	movs	r0, r7
    aee8:	9b01      	ldr	r3, [sp, #4]
    aeea:	4798      	blx	r3
    aeec:	4306      	orrs	r6, r0
    aeee:	3568      	adds	r5, #104	; 0x68
    aef0:	e7ed      	b.n	aece <_fwalk_reent+0x16>
    aef2:	6824      	ldr	r4, [r4, #0]
    aef4:	e7e6      	b.n	aec4 <_fwalk_reent+0xc>
    aef6:	0030      	movs	r0, r6
    aef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000aefc <__swhatbuf_r>:
    aefc:	b570      	push	{r4, r5, r6, lr}
    aefe:	000e      	movs	r6, r1
    af00:	001d      	movs	r5, r3
    af02:	230e      	movs	r3, #14
    af04:	5ec9      	ldrsh	r1, [r1, r3]
    af06:	b090      	sub	sp, #64	; 0x40
    af08:	0014      	movs	r4, r2
    af0a:	2900      	cmp	r1, #0
    af0c:	da06      	bge.n	af1c <__swhatbuf_r+0x20>
    af0e:	2300      	movs	r3, #0
    af10:	602b      	str	r3, [r5, #0]
    af12:	89b3      	ldrh	r3, [r6, #12]
    af14:	061b      	lsls	r3, r3, #24
    af16:	d50f      	bpl.n	af38 <__swhatbuf_r+0x3c>
    af18:	2340      	movs	r3, #64	; 0x40
    af1a:	e00f      	b.n	af3c <__swhatbuf_r+0x40>
    af1c:	aa01      	add	r2, sp, #4
    af1e:	f000 fb97 	bl	b650 <_fstat_r>
    af22:	2800      	cmp	r0, #0
    af24:	dbf3      	blt.n	af0e <__swhatbuf_r+0x12>
    af26:	23f0      	movs	r3, #240	; 0xf0
    af28:	9a02      	ldr	r2, [sp, #8]
    af2a:	021b      	lsls	r3, r3, #8
    af2c:	4013      	ands	r3, r2
    af2e:	4a05      	ldr	r2, [pc, #20]	; (af44 <__swhatbuf_r+0x48>)
    af30:	189b      	adds	r3, r3, r2
    af32:	425a      	negs	r2, r3
    af34:	4153      	adcs	r3, r2
    af36:	602b      	str	r3, [r5, #0]
    af38:	2380      	movs	r3, #128	; 0x80
    af3a:	00db      	lsls	r3, r3, #3
    af3c:	2000      	movs	r0, #0
    af3e:	6023      	str	r3, [r4, #0]
    af40:	b010      	add	sp, #64	; 0x40
    af42:	bd70      	pop	{r4, r5, r6, pc}
    af44:	ffffe000 	.word	0xffffe000

0000af48 <__smakebuf_r>:
    af48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    af4a:	2602      	movs	r6, #2
    af4c:	898b      	ldrh	r3, [r1, #12]
    af4e:	0005      	movs	r5, r0
    af50:	000c      	movs	r4, r1
    af52:	4233      	tst	r3, r6
    af54:	d110      	bne.n	af78 <__smakebuf_r+0x30>
    af56:	ab01      	add	r3, sp, #4
    af58:	466a      	mov	r2, sp
    af5a:	f7ff ffcf 	bl	aefc <__swhatbuf_r>
    af5e:	9900      	ldr	r1, [sp, #0]
    af60:	0007      	movs	r7, r0
    af62:	0028      	movs	r0, r5
    af64:	f000 f894 	bl	b090 <_malloc_r>
    af68:	2800      	cmp	r0, #0
    af6a:	d10c      	bne.n	af86 <__smakebuf_r+0x3e>
    af6c:	220c      	movs	r2, #12
    af6e:	5ea3      	ldrsh	r3, [r4, r2]
    af70:	059a      	lsls	r2, r3, #22
    af72:	d423      	bmi.n	afbc <__smakebuf_r+0x74>
    af74:	4333      	orrs	r3, r6
    af76:	81a3      	strh	r3, [r4, #12]
    af78:	0023      	movs	r3, r4
    af7a:	3347      	adds	r3, #71	; 0x47
    af7c:	6023      	str	r3, [r4, #0]
    af7e:	6123      	str	r3, [r4, #16]
    af80:	2301      	movs	r3, #1
    af82:	6163      	str	r3, [r4, #20]
    af84:	e01a      	b.n	afbc <__smakebuf_r+0x74>
    af86:	2280      	movs	r2, #128	; 0x80
    af88:	4b0d      	ldr	r3, [pc, #52]	; (afc0 <__smakebuf_r+0x78>)
    af8a:	62ab      	str	r3, [r5, #40]	; 0x28
    af8c:	89a3      	ldrh	r3, [r4, #12]
    af8e:	6020      	str	r0, [r4, #0]
    af90:	4313      	orrs	r3, r2
    af92:	81a3      	strh	r3, [r4, #12]
    af94:	9b00      	ldr	r3, [sp, #0]
    af96:	6120      	str	r0, [r4, #16]
    af98:	6163      	str	r3, [r4, #20]
    af9a:	9b01      	ldr	r3, [sp, #4]
    af9c:	2b00      	cmp	r3, #0
    af9e:	d00a      	beq.n	afb6 <__smakebuf_r+0x6e>
    afa0:	230e      	movs	r3, #14
    afa2:	5ee1      	ldrsh	r1, [r4, r3]
    afa4:	0028      	movs	r0, r5
    afa6:	f000 fb65 	bl	b674 <_isatty_r>
    afaa:	2800      	cmp	r0, #0
    afac:	d003      	beq.n	afb6 <__smakebuf_r+0x6e>
    afae:	2201      	movs	r2, #1
    afb0:	89a3      	ldrh	r3, [r4, #12]
    afb2:	4313      	orrs	r3, r2
    afb4:	81a3      	strh	r3, [r4, #12]
    afb6:	89a3      	ldrh	r3, [r4, #12]
    afb8:	431f      	orrs	r7, r3
    afba:	81a7      	strh	r7, [r4, #12]
    afbc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    afbe:	46c0      	nop			; (mov r8, r8)
    afc0:	0000ad51 	.word	0x0000ad51

0000afc4 <memchr>:
    afc4:	b2c9      	uxtb	r1, r1
    afc6:	1882      	adds	r2, r0, r2
    afc8:	4290      	cmp	r0, r2
    afca:	d004      	beq.n	afd6 <memchr+0x12>
    afcc:	7803      	ldrb	r3, [r0, #0]
    afce:	428b      	cmp	r3, r1
    afd0:	d002      	beq.n	afd8 <memchr+0x14>
    afd2:	3001      	adds	r0, #1
    afd4:	e7f8      	b.n	afc8 <memchr+0x4>
    afd6:	2000      	movs	r0, #0
    afd8:	4770      	bx	lr

0000afda <memmove>:
    afda:	b510      	push	{r4, lr}
    afdc:	4288      	cmp	r0, r1
    afde:	d902      	bls.n	afe6 <memmove+0xc>
    afe0:	188b      	adds	r3, r1, r2
    afe2:	4298      	cmp	r0, r3
    afe4:	d301      	bcc.n	afea <memmove+0x10>
    afe6:	2300      	movs	r3, #0
    afe8:	e005      	b.n	aff6 <memmove+0x1c>
    afea:	1a9b      	subs	r3, r3, r2
    afec:	3a01      	subs	r2, #1
    afee:	d308      	bcc.n	b002 <memmove+0x28>
    aff0:	5c99      	ldrb	r1, [r3, r2]
    aff2:	5481      	strb	r1, [r0, r2]
    aff4:	e7fa      	b.n	afec <memmove+0x12>
    aff6:	4293      	cmp	r3, r2
    aff8:	d003      	beq.n	b002 <memmove+0x28>
    affa:	5ccc      	ldrb	r4, [r1, r3]
    affc:	54c4      	strb	r4, [r0, r3]
    affe:	3301      	adds	r3, #1
    b000:	e7f9      	b.n	aff6 <memmove+0x1c>
    b002:	bd10      	pop	{r4, pc}

0000b004 <_free_r>:
    b004:	b530      	push	{r4, r5, lr}
    b006:	2900      	cmp	r1, #0
    b008:	d03e      	beq.n	b088 <_free_r+0x84>
    b00a:	3904      	subs	r1, #4
    b00c:	680b      	ldr	r3, [r1, #0]
    b00e:	2b00      	cmp	r3, #0
    b010:	da00      	bge.n	b014 <_free_r+0x10>
    b012:	18c9      	adds	r1, r1, r3
    b014:	4a1d      	ldr	r2, [pc, #116]	; (b08c <_free_r+0x88>)
    b016:	6813      	ldr	r3, [r2, #0]
    b018:	0014      	movs	r4, r2
    b01a:	2b00      	cmp	r3, #0
    b01c:	d102      	bne.n	b024 <_free_r+0x20>
    b01e:	604b      	str	r3, [r1, #4]
    b020:	6011      	str	r1, [r2, #0]
    b022:	e031      	b.n	b088 <_free_r+0x84>
    b024:	428b      	cmp	r3, r1
    b026:	d90d      	bls.n	b044 <_free_r+0x40>
    b028:	680a      	ldr	r2, [r1, #0]
    b02a:	1888      	adds	r0, r1, r2
    b02c:	4283      	cmp	r3, r0
    b02e:	d103      	bne.n	b038 <_free_r+0x34>
    b030:	6818      	ldr	r0, [r3, #0]
    b032:	685b      	ldr	r3, [r3, #4]
    b034:	1882      	adds	r2, r0, r2
    b036:	600a      	str	r2, [r1, #0]
    b038:	604b      	str	r3, [r1, #4]
    b03a:	6021      	str	r1, [r4, #0]
    b03c:	e024      	b.n	b088 <_free_r+0x84>
    b03e:	428a      	cmp	r2, r1
    b040:	d803      	bhi.n	b04a <_free_r+0x46>
    b042:	0013      	movs	r3, r2
    b044:	685a      	ldr	r2, [r3, #4]
    b046:	2a00      	cmp	r2, #0
    b048:	d1f9      	bne.n	b03e <_free_r+0x3a>
    b04a:	681d      	ldr	r5, [r3, #0]
    b04c:	195c      	adds	r4, r3, r5
    b04e:	428c      	cmp	r4, r1
    b050:	d10b      	bne.n	b06a <_free_r+0x66>
    b052:	6809      	ldr	r1, [r1, #0]
    b054:	1869      	adds	r1, r5, r1
    b056:	1858      	adds	r0, r3, r1
    b058:	6019      	str	r1, [r3, #0]
    b05a:	4282      	cmp	r2, r0
    b05c:	d114      	bne.n	b088 <_free_r+0x84>
    b05e:	6810      	ldr	r0, [r2, #0]
    b060:	6852      	ldr	r2, [r2, #4]
    b062:	1841      	adds	r1, r0, r1
    b064:	6019      	str	r1, [r3, #0]
    b066:	605a      	str	r2, [r3, #4]
    b068:	e00e      	b.n	b088 <_free_r+0x84>
    b06a:	428c      	cmp	r4, r1
    b06c:	d902      	bls.n	b074 <_free_r+0x70>
    b06e:	230c      	movs	r3, #12
    b070:	6003      	str	r3, [r0, #0]
    b072:	e009      	b.n	b088 <_free_r+0x84>
    b074:	6808      	ldr	r0, [r1, #0]
    b076:	180c      	adds	r4, r1, r0
    b078:	42a2      	cmp	r2, r4
    b07a:	d103      	bne.n	b084 <_free_r+0x80>
    b07c:	6814      	ldr	r4, [r2, #0]
    b07e:	6852      	ldr	r2, [r2, #4]
    b080:	1820      	adds	r0, r4, r0
    b082:	6008      	str	r0, [r1, #0]
    b084:	604a      	str	r2, [r1, #4]
    b086:	6059      	str	r1, [r3, #4]
    b088:	bd30      	pop	{r4, r5, pc}
    b08a:	46c0      	nop			; (mov r8, r8)
    b08c:	200043e8 	.word	0x200043e8

0000b090 <_malloc_r>:
    b090:	2303      	movs	r3, #3
    b092:	b570      	push	{r4, r5, r6, lr}
    b094:	1ccd      	adds	r5, r1, #3
    b096:	439d      	bics	r5, r3
    b098:	3508      	adds	r5, #8
    b09a:	0006      	movs	r6, r0
    b09c:	2d0c      	cmp	r5, #12
    b09e:	d201      	bcs.n	b0a4 <_malloc_r+0x14>
    b0a0:	250c      	movs	r5, #12
    b0a2:	e005      	b.n	b0b0 <_malloc_r+0x20>
    b0a4:	2d00      	cmp	r5, #0
    b0a6:	da03      	bge.n	b0b0 <_malloc_r+0x20>
    b0a8:	230c      	movs	r3, #12
    b0aa:	2000      	movs	r0, #0
    b0ac:	6033      	str	r3, [r6, #0]
    b0ae:	e040      	b.n	b132 <_malloc_r+0xa2>
    b0b0:	42a9      	cmp	r1, r5
    b0b2:	d8f9      	bhi.n	b0a8 <_malloc_r+0x18>
    b0b4:	4b1f      	ldr	r3, [pc, #124]	; (b134 <_malloc_r+0xa4>)
    b0b6:	681c      	ldr	r4, [r3, #0]
    b0b8:	001a      	movs	r2, r3
    b0ba:	0021      	movs	r1, r4
    b0bc:	2900      	cmp	r1, #0
    b0be:	d013      	beq.n	b0e8 <_malloc_r+0x58>
    b0c0:	680b      	ldr	r3, [r1, #0]
    b0c2:	1b5b      	subs	r3, r3, r5
    b0c4:	d40d      	bmi.n	b0e2 <_malloc_r+0x52>
    b0c6:	2b0b      	cmp	r3, #11
    b0c8:	d902      	bls.n	b0d0 <_malloc_r+0x40>
    b0ca:	600b      	str	r3, [r1, #0]
    b0cc:	18cc      	adds	r4, r1, r3
    b0ce:	e01e      	b.n	b10e <_malloc_r+0x7e>
    b0d0:	428c      	cmp	r4, r1
    b0d2:	d102      	bne.n	b0da <_malloc_r+0x4a>
    b0d4:	6863      	ldr	r3, [r4, #4]
    b0d6:	6013      	str	r3, [r2, #0]
    b0d8:	e01a      	b.n	b110 <_malloc_r+0x80>
    b0da:	684b      	ldr	r3, [r1, #4]
    b0dc:	6063      	str	r3, [r4, #4]
    b0de:	000c      	movs	r4, r1
    b0e0:	e016      	b.n	b110 <_malloc_r+0x80>
    b0e2:	000c      	movs	r4, r1
    b0e4:	6849      	ldr	r1, [r1, #4]
    b0e6:	e7e9      	b.n	b0bc <_malloc_r+0x2c>
    b0e8:	4c13      	ldr	r4, [pc, #76]	; (b138 <_malloc_r+0xa8>)
    b0ea:	6823      	ldr	r3, [r4, #0]
    b0ec:	2b00      	cmp	r3, #0
    b0ee:	d103      	bne.n	b0f8 <_malloc_r+0x68>
    b0f0:	0030      	movs	r0, r6
    b0f2:	f000 f9df 	bl	b4b4 <_sbrk_r>
    b0f6:	6020      	str	r0, [r4, #0]
    b0f8:	0029      	movs	r1, r5
    b0fa:	0030      	movs	r0, r6
    b0fc:	f000 f9da 	bl	b4b4 <_sbrk_r>
    b100:	1c43      	adds	r3, r0, #1
    b102:	d0d1      	beq.n	b0a8 <_malloc_r+0x18>
    b104:	2303      	movs	r3, #3
    b106:	1cc4      	adds	r4, r0, #3
    b108:	439c      	bics	r4, r3
    b10a:	42a0      	cmp	r0, r4
    b10c:	d10a      	bne.n	b124 <_malloc_r+0x94>
    b10e:	6025      	str	r5, [r4, #0]
    b110:	0020      	movs	r0, r4
    b112:	2207      	movs	r2, #7
    b114:	300b      	adds	r0, #11
    b116:	1d23      	adds	r3, r4, #4
    b118:	4390      	bics	r0, r2
    b11a:	1ac3      	subs	r3, r0, r3
    b11c:	d009      	beq.n	b132 <_malloc_r+0xa2>
    b11e:	425a      	negs	r2, r3
    b120:	50e2      	str	r2, [r4, r3]
    b122:	e006      	b.n	b132 <_malloc_r+0xa2>
    b124:	1a21      	subs	r1, r4, r0
    b126:	0030      	movs	r0, r6
    b128:	f000 f9c4 	bl	b4b4 <_sbrk_r>
    b12c:	1c43      	adds	r3, r0, #1
    b12e:	d1ee      	bne.n	b10e <_malloc_r+0x7e>
    b130:	e7ba      	b.n	b0a8 <_malloc_r+0x18>
    b132:	bd70      	pop	{r4, r5, r6, pc}
    b134:	200043e8 	.word	0x200043e8
    b138:	200043e4 	.word	0x200043e4

0000b13c <_realloc_r>:
    b13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b13e:	0006      	movs	r6, r0
    b140:	000c      	movs	r4, r1
    b142:	0015      	movs	r5, r2
    b144:	2900      	cmp	r1, #0
    b146:	d104      	bne.n	b152 <_realloc_r+0x16>
    b148:	0011      	movs	r1, r2
    b14a:	f7ff ffa1 	bl	b090 <_malloc_r>
    b14e:	0004      	movs	r4, r0
    b150:	e018      	b.n	b184 <_realloc_r+0x48>
    b152:	2a00      	cmp	r2, #0
    b154:	d103      	bne.n	b15e <_realloc_r+0x22>
    b156:	f7ff ff55 	bl	b004 <_free_r>
    b15a:	002c      	movs	r4, r5
    b15c:	e012      	b.n	b184 <_realloc_r+0x48>
    b15e:	f000 faaf 	bl	b6c0 <_malloc_usable_size_r>
    b162:	4285      	cmp	r5, r0
    b164:	d90e      	bls.n	b184 <_realloc_r+0x48>
    b166:	0029      	movs	r1, r5
    b168:	0030      	movs	r0, r6
    b16a:	f7ff ff91 	bl	b090 <_malloc_r>
    b16e:	1e07      	subs	r7, r0, #0
    b170:	d007      	beq.n	b182 <_realloc_r+0x46>
    b172:	0021      	movs	r1, r4
    b174:	002a      	movs	r2, r5
    b176:	f7ff f867 	bl	a248 <memcpy>
    b17a:	0021      	movs	r1, r4
    b17c:	0030      	movs	r0, r6
    b17e:	f7ff ff41 	bl	b004 <_free_r>
    b182:	003c      	movs	r4, r7
    b184:	0020      	movs	r0, r4
    b186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b188 <__ssputs_r>:
    b188:	b5f0      	push	{r4, r5, r6, r7, lr}
    b18a:	688e      	ldr	r6, [r1, #8]
    b18c:	b085      	sub	sp, #20
    b18e:	0007      	movs	r7, r0
    b190:	000c      	movs	r4, r1
    b192:	9203      	str	r2, [sp, #12]
    b194:	9301      	str	r3, [sp, #4]
    b196:	429e      	cmp	r6, r3
    b198:	d843      	bhi.n	b222 <__ssputs_r+0x9a>
    b19a:	2390      	movs	r3, #144	; 0x90
    b19c:	898a      	ldrh	r2, [r1, #12]
    b19e:	00db      	lsls	r3, r3, #3
    b1a0:	421a      	tst	r2, r3
    b1a2:	d03e      	beq.n	b222 <__ssputs_r+0x9a>
    b1a4:	2503      	movs	r5, #3
    b1a6:	6909      	ldr	r1, [r1, #16]
    b1a8:	6823      	ldr	r3, [r4, #0]
    b1aa:	9801      	ldr	r0, [sp, #4]
    b1ac:	1a5b      	subs	r3, r3, r1
    b1ae:	9302      	str	r3, [sp, #8]
    b1b0:	6963      	ldr	r3, [r4, #20]
    b1b2:	435d      	muls	r5, r3
    b1b4:	0feb      	lsrs	r3, r5, #31
    b1b6:	195d      	adds	r5, r3, r5
    b1b8:	9b02      	ldr	r3, [sp, #8]
    b1ba:	106d      	asrs	r5, r5, #1
    b1bc:	3301      	adds	r3, #1
    b1be:	181b      	adds	r3, r3, r0
    b1c0:	42ab      	cmp	r3, r5
    b1c2:	d900      	bls.n	b1c6 <__ssputs_r+0x3e>
    b1c4:	001d      	movs	r5, r3
    b1c6:	0553      	lsls	r3, r2, #21
    b1c8:	d510      	bpl.n	b1ec <__ssputs_r+0x64>
    b1ca:	0029      	movs	r1, r5
    b1cc:	0038      	movs	r0, r7
    b1ce:	f7ff ff5f 	bl	b090 <_malloc_r>
    b1d2:	1e06      	subs	r6, r0, #0
    b1d4:	d014      	beq.n	b200 <__ssputs_r+0x78>
    b1d6:	9a02      	ldr	r2, [sp, #8]
    b1d8:	6921      	ldr	r1, [r4, #16]
    b1da:	f7ff f835 	bl	a248 <memcpy>
    b1de:	89a2      	ldrh	r2, [r4, #12]
    b1e0:	4b19      	ldr	r3, [pc, #100]	; (b248 <__ssputs_r+0xc0>)
    b1e2:	4013      	ands	r3, r2
    b1e4:	2280      	movs	r2, #128	; 0x80
    b1e6:	4313      	orrs	r3, r2
    b1e8:	81a3      	strh	r3, [r4, #12]
    b1ea:	e012      	b.n	b212 <__ssputs_r+0x8a>
    b1ec:	002a      	movs	r2, r5
    b1ee:	0038      	movs	r0, r7
    b1f0:	f7ff ffa4 	bl	b13c <_realloc_r>
    b1f4:	1e06      	subs	r6, r0, #0
    b1f6:	d10c      	bne.n	b212 <__ssputs_r+0x8a>
    b1f8:	6921      	ldr	r1, [r4, #16]
    b1fa:	0038      	movs	r0, r7
    b1fc:	f7ff ff02 	bl	b004 <_free_r>
    b200:	230c      	movs	r3, #12
    b202:	2240      	movs	r2, #64	; 0x40
    b204:	2001      	movs	r0, #1
    b206:	603b      	str	r3, [r7, #0]
    b208:	89a3      	ldrh	r3, [r4, #12]
    b20a:	4240      	negs	r0, r0
    b20c:	4313      	orrs	r3, r2
    b20e:	81a3      	strh	r3, [r4, #12]
    b210:	e017      	b.n	b242 <__ssputs_r+0xba>
    b212:	9b02      	ldr	r3, [sp, #8]
    b214:	6126      	str	r6, [r4, #16]
    b216:	18f6      	adds	r6, r6, r3
    b218:	6026      	str	r6, [r4, #0]
    b21a:	6165      	str	r5, [r4, #20]
    b21c:	9e01      	ldr	r6, [sp, #4]
    b21e:	1aed      	subs	r5, r5, r3
    b220:	60a5      	str	r5, [r4, #8]
    b222:	9b01      	ldr	r3, [sp, #4]
    b224:	42b3      	cmp	r3, r6
    b226:	d200      	bcs.n	b22a <__ssputs_r+0xa2>
    b228:	001e      	movs	r6, r3
    b22a:	0032      	movs	r2, r6
    b22c:	9903      	ldr	r1, [sp, #12]
    b22e:	6820      	ldr	r0, [r4, #0]
    b230:	f7ff fed3 	bl	afda <memmove>
    b234:	2000      	movs	r0, #0
    b236:	68a3      	ldr	r3, [r4, #8]
    b238:	1b9b      	subs	r3, r3, r6
    b23a:	60a3      	str	r3, [r4, #8]
    b23c:	6823      	ldr	r3, [r4, #0]
    b23e:	199e      	adds	r6, r3, r6
    b240:	6026      	str	r6, [r4, #0]
    b242:	b005      	add	sp, #20
    b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b246:	46c0      	nop			; (mov r8, r8)
    b248:	fffffb7f 	.word	0xfffffb7f

0000b24c <_svfiprintf_r>:
    b24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b24e:	b09f      	sub	sp, #124	; 0x7c
    b250:	9002      	str	r0, [sp, #8]
    b252:	9305      	str	r3, [sp, #20]
    b254:	898b      	ldrh	r3, [r1, #12]
    b256:	000f      	movs	r7, r1
    b258:	0016      	movs	r6, r2
    b25a:	061b      	lsls	r3, r3, #24
    b25c:	d510      	bpl.n	b280 <_svfiprintf_r+0x34>
    b25e:	690b      	ldr	r3, [r1, #16]
    b260:	2b00      	cmp	r3, #0
    b262:	d10d      	bne.n	b280 <_svfiprintf_r+0x34>
    b264:	2140      	movs	r1, #64	; 0x40
    b266:	f7ff ff13 	bl	b090 <_malloc_r>
    b26a:	6038      	str	r0, [r7, #0]
    b26c:	6138      	str	r0, [r7, #16]
    b26e:	2800      	cmp	r0, #0
    b270:	d104      	bne.n	b27c <_svfiprintf_r+0x30>
    b272:	230c      	movs	r3, #12
    b274:	9a02      	ldr	r2, [sp, #8]
    b276:	3801      	subs	r0, #1
    b278:	6013      	str	r3, [r2, #0]
    b27a:	e0d8      	b.n	b42e <_svfiprintf_r+0x1e2>
    b27c:	2340      	movs	r3, #64	; 0x40
    b27e:	617b      	str	r3, [r7, #20]
    b280:	2300      	movs	r3, #0
    b282:	ad06      	add	r5, sp, #24
    b284:	616b      	str	r3, [r5, #20]
    b286:	3320      	adds	r3, #32
    b288:	766b      	strb	r3, [r5, #25]
    b28a:	3310      	adds	r3, #16
    b28c:	76ab      	strb	r3, [r5, #26]
    b28e:	0034      	movs	r4, r6
    b290:	7823      	ldrb	r3, [r4, #0]
    b292:	2b00      	cmp	r3, #0
    b294:	d103      	bne.n	b29e <_svfiprintf_r+0x52>
    b296:	1ba3      	subs	r3, r4, r6
    b298:	9304      	str	r3, [sp, #16]
    b29a:	d012      	beq.n	b2c2 <_svfiprintf_r+0x76>
    b29c:	e003      	b.n	b2a6 <_svfiprintf_r+0x5a>
    b29e:	2b25      	cmp	r3, #37	; 0x25
    b2a0:	d0f9      	beq.n	b296 <_svfiprintf_r+0x4a>
    b2a2:	3401      	adds	r4, #1
    b2a4:	e7f4      	b.n	b290 <_svfiprintf_r+0x44>
    b2a6:	1ba3      	subs	r3, r4, r6
    b2a8:	0032      	movs	r2, r6
    b2aa:	0039      	movs	r1, r7
    b2ac:	9802      	ldr	r0, [sp, #8]
    b2ae:	f7ff ff6b 	bl	b188 <__ssputs_r>
    b2b2:	1c43      	adds	r3, r0, #1
    b2b4:	d100      	bne.n	b2b8 <_svfiprintf_r+0x6c>
    b2b6:	e0b4      	b.n	b422 <_svfiprintf_r+0x1d6>
    b2b8:	696a      	ldr	r2, [r5, #20]
    b2ba:	9b04      	ldr	r3, [sp, #16]
    b2bc:	4694      	mov	ip, r2
    b2be:	4463      	add	r3, ip
    b2c0:	616b      	str	r3, [r5, #20]
    b2c2:	7823      	ldrb	r3, [r4, #0]
    b2c4:	2b00      	cmp	r3, #0
    b2c6:	d100      	bne.n	b2ca <_svfiprintf_r+0x7e>
    b2c8:	e0ab      	b.n	b422 <_svfiprintf_r+0x1d6>
    b2ca:	2201      	movs	r2, #1
    b2cc:	2300      	movs	r3, #0
    b2ce:	4252      	negs	r2, r2
    b2d0:	606a      	str	r2, [r5, #4]
    b2d2:	a902      	add	r1, sp, #8
    b2d4:	3254      	adds	r2, #84	; 0x54
    b2d6:	1852      	adds	r2, r2, r1
    b2d8:	3401      	adds	r4, #1
    b2da:	602b      	str	r3, [r5, #0]
    b2dc:	60eb      	str	r3, [r5, #12]
    b2de:	60ab      	str	r3, [r5, #8]
    b2e0:	7013      	strb	r3, [r2, #0]
    b2e2:	65ab      	str	r3, [r5, #88]	; 0x58
    b2e4:	4e53      	ldr	r6, [pc, #332]	; (b434 <_svfiprintf_r+0x1e8>)
    b2e6:	7821      	ldrb	r1, [r4, #0]
    b2e8:	2205      	movs	r2, #5
    b2ea:	0030      	movs	r0, r6
    b2ec:	f7ff fe6a 	bl	afc4 <memchr>
    b2f0:	2800      	cmp	r0, #0
    b2f2:	d007      	beq.n	b304 <_svfiprintf_r+0xb8>
    b2f4:	2301      	movs	r3, #1
    b2f6:	1b80      	subs	r0, r0, r6
    b2f8:	4083      	lsls	r3, r0
    b2fa:	682a      	ldr	r2, [r5, #0]
    b2fc:	3401      	adds	r4, #1
    b2fe:	4313      	orrs	r3, r2
    b300:	602b      	str	r3, [r5, #0]
    b302:	e7ef      	b.n	b2e4 <_svfiprintf_r+0x98>
    b304:	682b      	ldr	r3, [r5, #0]
    b306:	06da      	lsls	r2, r3, #27
    b308:	d504      	bpl.n	b314 <_svfiprintf_r+0xc8>
    b30a:	2253      	movs	r2, #83	; 0x53
    b30c:	2120      	movs	r1, #32
    b30e:	a802      	add	r0, sp, #8
    b310:	1812      	adds	r2, r2, r0
    b312:	7011      	strb	r1, [r2, #0]
    b314:	071a      	lsls	r2, r3, #28
    b316:	d504      	bpl.n	b322 <_svfiprintf_r+0xd6>
    b318:	2253      	movs	r2, #83	; 0x53
    b31a:	212b      	movs	r1, #43	; 0x2b
    b31c:	a802      	add	r0, sp, #8
    b31e:	1812      	adds	r2, r2, r0
    b320:	7011      	strb	r1, [r2, #0]
    b322:	7822      	ldrb	r2, [r4, #0]
    b324:	2a2a      	cmp	r2, #42	; 0x2a
    b326:	d003      	beq.n	b330 <_svfiprintf_r+0xe4>
    b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b32a:	2000      	movs	r0, #0
    b32c:	210a      	movs	r1, #10
    b32e:	e00e      	b.n	b34e <_svfiprintf_r+0x102>
    b330:	9a05      	ldr	r2, [sp, #20]
    b332:	1d11      	adds	r1, r2, #4
    b334:	6812      	ldr	r2, [r2, #0]
    b336:	9105      	str	r1, [sp, #20]
    b338:	2a00      	cmp	r2, #0
    b33a:	db01      	blt.n	b340 <_svfiprintf_r+0xf4>
    b33c:	9209      	str	r2, [sp, #36]	; 0x24
    b33e:	e004      	b.n	b34a <_svfiprintf_r+0xfe>
    b340:	4252      	negs	r2, r2
    b342:	60ea      	str	r2, [r5, #12]
    b344:	2202      	movs	r2, #2
    b346:	4313      	orrs	r3, r2
    b348:	602b      	str	r3, [r5, #0]
    b34a:	3401      	adds	r4, #1
    b34c:	e00b      	b.n	b366 <_svfiprintf_r+0x11a>
    b34e:	7822      	ldrb	r2, [r4, #0]
    b350:	3a30      	subs	r2, #48	; 0x30
    b352:	2a09      	cmp	r2, #9
    b354:	d804      	bhi.n	b360 <_svfiprintf_r+0x114>
    b356:	434b      	muls	r3, r1
    b358:	3401      	adds	r4, #1
    b35a:	189b      	adds	r3, r3, r2
    b35c:	2001      	movs	r0, #1
    b35e:	e7f6      	b.n	b34e <_svfiprintf_r+0x102>
    b360:	2800      	cmp	r0, #0
    b362:	d000      	beq.n	b366 <_svfiprintf_r+0x11a>
    b364:	9309      	str	r3, [sp, #36]	; 0x24
    b366:	7823      	ldrb	r3, [r4, #0]
    b368:	2b2e      	cmp	r3, #46	; 0x2e
    b36a:	d11e      	bne.n	b3aa <_svfiprintf_r+0x15e>
    b36c:	7863      	ldrb	r3, [r4, #1]
    b36e:	2b2a      	cmp	r3, #42	; 0x2a
    b370:	d10a      	bne.n	b388 <_svfiprintf_r+0x13c>
    b372:	9b05      	ldr	r3, [sp, #20]
    b374:	3402      	adds	r4, #2
    b376:	1d1a      	adds	r2, r3, #4
    b378:	681b      	ldr	r3, [r3, #0]
    b37a:	9205      	str	r2, [sp, #20]
    b37c:	2b00      	cmp	r3, #0
    b37e:	da01      	bge.n	b384 <_svfiprintf_r+0x138>
    b380:	2301      	movs	r3, #1
    b382:	425b      	negs	r3, r3
    b384:	9307      	str	r3, [sp, #28]
    b386:	e010      	b.n	b3aa <_svfiprintf_r+0x15e>
    b388:	2300      	movs	r3, #0
    b38a:	200a      	movs	r0, #10
    b38c:	001a      	movs	r2, r3
    b38e:	3401      	adds	r4, #1
    b390:	606b      	str	r3, [r5, #4]
    b392:	7821      	ldrb	r1, [r4, #0]
    b394:	3930      	subs	r1, #48	; 0x30
    b396:	2909      	cmp	r1, #9
    b398:	d804      	bhi.n	b3a4 <_svfiprintf_r+0x158>
    b39a:	4342      	muls	r2, r0
    b39c:	3401      	adds	r4, #1
    b39e:	1852      	adds	r2, r2, r1
    b3a0:	2301      	movs	r3, #1
    b3a2:	e7f6      	b.n	b392 <_svfiprintf_r+0x146>
    b3a4:	2b00      	cmp	r3, #0
    b3a6:	d000      	beq.n	b3aa <_svfiprintf_r+0x15e>
    b3a8:	9207      	str	r2, [sp, #28]
    b3aa:	4e23      	ldr	r6, [pc, #140]	; (b438 <_svfiprintf_r+0x1ec>)
    b3ac:	7821      	ldrb	r1, [r4, #0]
    b3ae:	2203      	movs	r2, #3
    b3b0:	0030      	movs	r0, r6
    b3b2:	f7ff fe07 	bl	afc4 <memchr>
    b3b6:	2800      	cmp	r0, #0
    b3b8:	d006      	beq.n	b3c8 <_svfiprintf_r+0x17c>
    b3ba:	2340      	movs	r3, #64	; 0x40
    b3bc:	1b80      	subs	r0, r0, r6
    b3be:	4083      	lsls	r3, r0
    b3c0:	682a      	ldr	r2, [r5, #0]
    b3c2:	3401      	adds	r4, #1
    b3c4:	4313      	orrs	r3, r2
    b3c6:	602b      	str	r3, [r5, #0]
    b3c8:	7821      	ldrb	r1, [r4, #0]
    b3ca:	2206      	movs	r2, #6
    b3cc:	481b      	ldr	r0, [pc, #108]	; (b43c <_svfiprintf_r+0x1f0>)
    b3ce:	1c66      	adds	r6, r4, #1
    b3d0:	7629      	strb	r1, [r5, #24]
    b3d2:	f7ff fdf7 	bl	afc4 <memchr>
    b3d6:	2800      	cmp	r0, #0
    b3d8:	d012      	beq.n	b400 <_svfiprintf_r+0x1b4>
    b3da:	4b19      	ldr	r3, [pc, #100]	; (b440 <_svfiprintf_r+0x1f4>)
    b3dc:	2b00      	cmp	r3, #0
    b3de:	d106      	bne.n	b3ee <_svfiprintf_r+0x1a2>
    b3e0:	2207      	movs	r2, #7
    b3e2:	9b05      	ldr	r3, [sp, #20]
    b3e4:	3307      	adds	r3, #7
    b3e6:	4393      	bics	r3, r2
    b3e8:	3308      	adds	r3, #8
    b3ea:	9305      	str	r3, [sp, #20]
    b3ec:	e014      	b.n	b418 <_svfiprintf_r+0x1cc>
    b3ee:	ab05      	add	r3, sp, #20
    b3f0:	9300      	str	r3, [sp, #0]
    b3f2:	003a      	movs	r2, r7
    b3f4:	4b13      	ldr	r3, [pc, #76]	; (b444 <_svfiprintf_r+0x1f8>)
    b3f6:	0029      	movs	r1, r5
    b3f8:	9802      	ldr	r0, [sp, #8]
    b3fa:	e000      	b.n	b3fe <_svfiprintf_r+0x1b2>
    b3fc:	bf00      	nop
    b3fe:	e007      	b.n	b410 <_svfiprintf_r+0x1c4>
    b400:	ab05      	add	r3, sp, #20
    b402:	9300      	str	r3, [sp, #0]
    b404:	003a      	movs	r2, r7
    b406:	4b0f      	ldr	r3, [pc, #60]	; (b444 <_svfiprintf_r+0x1f8>)
    b408:	0029      	movs	r1, r5
    b40a:	9802      	ldr	r0, [sp, #8]
    b40c:	f7ff f8de 	bl	a5cc <_printf_i>
    b410:	9003      	str	r0, [sp, #12]
    b412:	9b03      	ldr	r3, [sp, #12]
    b414:	3301      	adds	r3, #1
    b416:	d004      	beq.n	b422 <_svfiprintf_r+0x1d6>
    b418:	696b      	ldr	r3, [r5, #20]
    b41a:	9a03      	ldr	r2, [sp, #12]
    b41c:	189b      	adds	r3, r3, r2
    b41e:	616b      	str	r3, [r5, #20]
    b420:	e735      	b.n	b28e <_svfiprintf_r+0x42>
    b422:	89bb      	ldrh	r3, [r7, #12]
    b424:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b426:	065b      	lsls	r3, r3, #25
    b428:	d501      	bpl.n	b42e <_svfiprintf_r+0x1e2>
    b42a:	2001      	movs	r0, #1
    b42c:	4240      	negs	r0, r0
    b42e:	b01f      	add	sp, #124	; 0x7c
    b430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b432:	46c0      	nop			; (mov r8, r8)
    b434:	0000cab0 	.word	0x0000cab0
    b438:	0000cab6 	.word	0x0000cab6
    b43c:	0000caba 	.word	0x0000caba
    b440:	00000000 	.word	0x00000000
    b444:	0000b189 	.word	0x0000b189

0000b448 <_putc_r>:
    b448:	b570      	push	{r4, r5, r6, lr}
    b44a:	0006      	movs	r6, r0
    b44c:	000d      	movs	r5, r1
    b44e:	0014      	movs	r4, r2
    b450:	2800      	cmp	r0, #0
    b452:	d004      	beq.n	b45e <_putc_r+0x16>
    b454:	6983      	ldr	r3, [r0, #24]
    b456:	2b00      	cmp	r3, #0
    b458:	d101      	bne.n	b45e <_putc_r+0x16>
    b45a:	f7ff fcbb 	bl	add4 <__sinit>
    b45e:	4b12      	ldr	r3, [pc, #72]	; (b4a8 <_putc_r+0x60>)
    b460:	429c      	cmp	r4, r3
    b462:	d101      	bne.n	b468 <_putc_r+0x20>
    b464:	6874      	ldr	r4, [r6, #4]
    b466:	e008      	b.n	b47a <_putc_r+0x32>
    b468:	4b10      	ldr	r3, [pc, #64]	; (b4ac <_putc_r+0x64>)
    b46a:	429c      	cmp	r4, r3
    b46c:	d101      	bne.n	b472 <_putc_r+0x2a>
    b46e:	68b4      	ldr	r4, [r6, #8]
    b470:	e003      	b.n	b47a <_putc_r+0x32>
    b472:	4b0f      	ldr	r3, [pc, #60]	; (b4b0 <_putc_r+0x68>)
    b474:	429c      	cmp	r4, r3
    b476:	d100      	bne.n	b47a <_putc_r+0x32>
    b478:	68f4      	ldr	r4, [r6, #12]
    b47a:	68a3      	ldr	r3, [r4, #8]
    b47c:	3b01      	subs	r3, #1
    b47e:	60a3      	str	r3, [r4, #8]
    b480:	2b00      	cmp	r3, #0
    b482:	da05      	bge.n	b490 <_putc_r+0x48>
    b484:	69a2      	ldr	r2, [r4, #24]
    b486:	4293      	cmp	r3, r2
    b488:	db08      	blt.n	b49c <_putc_r+0x54>
    b48a:	b2eb      	uxtb	r3, r5
    b48c:	2b0a      	cmp	r3, #10
    b48e:	d005      	beq.n	b49c <_putc_r+0x54>
    b490:	6823      	ldr	r3, [r4, #0]
    b492:	b2e8      	uxtb	r0, r5
    b494:	1c5a      	adds	r2, r3, #1
    b496:	6022      	str	r2, [r4, #0]
    b498:	701d      	strb	r5, [r3, #0]
    b49a:	e004      	b.n	b4a6 <_putc_r+0x5e>
    b49c:	0022      	movs	r2, r4
    b49e:	0029      	movs	r1, r5
    b4a0:	0030      	movs	r0, r6
    b4a2:	f7ff facd 	bl	aa40 <__swbuf_r>
    b4a6:	bd70      	pop	{r4, r5, r6, pc}
    b4a8:	0000cae4 	.word	0x0000cae4
    b4ac:	0000cb04 	.word	0x0000cb04
    b4b0:	0000cb24 	.word	0x0000cb24

0000b4b4 <_sbrk_r>:
    b4b4:	2300      	movs	r3, #0
    b4b6:	b570      	push	{r4, r5, r6, lr}
    b4b8:	4c06      	ldr	r4, [pc, #24]	; (b4d4 <_sbrk_r+0x20>)
    b4ba:	0005      	movs	r5, r0
    b4bc:	0008      	movs	r0, r1
    b4be:	6023      	str	r3, [r4, #0]
    b4c0:	f7fb f984 	bl	67cc <_sbrk>
    b4c4:	1c43      	adds	r3, r0, #1
    b4c6:	d103      	bne.n	b4d0 <_sbrk_r+0x1c>
    b4c8:	6823      	ldr	r3, [r4, #0]
    b4ca:	2b00      	cmp	r3, #0
    b4cc:	d000      	beq.n	b4d0 <_sbrk_r+0x1c>
    b4ce:	602b      	str	r3, [r5, #0]
    b4d0:	bd70      	pop	{r4, r5, r6, pc}
    b4d2:	46c0      	nop			; (mov r8, r8)
    b4d4:	20004618 	.word	0x20004618

0000b4d8 <_raise_r>:
    b4d8:	b570      	push	{r4, r5, r6, lr}
    b4da:	0004      	movs	r4, r0
    b4dc:	1e0d      	subs	r5, r1, #0
    b4de:	2d1f      	cmp	r5, #31
    b4e0:	d904      	bls.n	b4ec <_raise_r+0x14>
    b4e2:	2316      	movs	r3, #22
    b4e4:	6003      	str	r3, [r0, #0]
    b4e6:	2001      	movs	r0, #1
    b4e8:	4240      	negs	r0, r0
    b4ea:	e01e      	b.n	b52a <_raise_r+0x52>
    b4ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b4ee:	2a00      	cmp	r2, #0
    b4f0:	d004      	beq.n	b4fc <_raise_r+0x24>
    b4f2:	008b      	lsls	r3, r1, #2
    b4f4:	18d2      	adds	r2, r2, r3
    b4f6:	6813      	ldr	r3, [r2, #0]
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d108      	bne.n	b50e <_raise_r+0x36>
    b4fc:	0020      	movs	r0, r4
    b4fe:	f000 f831 	bl	b564 <_getpid_r>
    b502:	002a      	movs	r2, r5
    b504:	0001      	movs	r1, r0
    b506:	0020      	movs	r0, r4
    b508:	f000 f81a 	bl	b540 <_kill_r>
    b50c:	e00d      	b.n	b52a <_raise_r+0x52>
    b50e:	2000      	movs	r0, #0
    b510:	2b01      	cmp	r3, #1
    b512:	d00a      	beq.n	b52a <_raise_r+0x52>
    b514:	1c59      	adds	r1, r3, #1
    b516:	d103      	bne.n	b520 <_raise_r+0x48>
    b518:	3317      	adds	r3, #23
    b51a:	6023      	str	r3, [r4, #0]
    b51c:	3001      	adds	r0, #1
    b51e:	e004      	b.n	b52a <_raise_r+0x52>
    b520:	2400      	movs	r4, #0
    b522:	0028      	movs	r0, r5
    b524:	6014      	str	r4, [r2, #0]
    b526:	4798      	blx	r3
    b528:	0020      	movs	r0, r4
    b52a:	bd70      	pop	{r4, r5, r6, pc}

0000b52c <raise>:
    b52c:	b510      	push	{r4, lr}
    b52e:	4b03      	ldr	r3, [pc, #12]	; (b53c <raise+0x10>)
    b530:	0001      	movs	r1, r0
    b532:	6818      	ldr	r0, [r3, #0]
    b534:	f7ff ffd0 	bl	b4d8 <_raise_r>
    b538:	bd10      	pop	{r4, pc}
    b53a:	46c0      	nop			; (mov r8, r8)
    b53c:	2000008c 	.word	0x2000008c

0000b540 <_kill_r>:
    b540:	2300      	movs	r3, #0
    b542:	b570      	push	{r4, r5, r6, lr}
    b544:	4c06      	ldr	r4, [pc, #24]	; (b560 <_kill_r+0x20>)
    b546:	0005      	movs	r5, r0
    b548:	0008      	movs	r0, r1
    b54a:	0011      	movs	r1, r2
    b54c:	6023      	str	r3, [r4, #0]
    b54e:	f7fb f993 	bl	6878 <_kill>
    b552:	1c43      	adds	r3, r0, #1
    b554:	d103      	bne.n	b55e <_kill_r+0x1e>
    b556:	6823      	ldr	r3, [r4, #0]
    b558:	2b00      	cmp	r3, #0
    b55a:	d000      	beq.n	b55e <_kill_r+0x1e>
    b55c:	602b      	str	r3, [r5, #0]
    b55e:	bd70      	pop	{r4, r5, r6, pc}
    b560:	20004618 	.word	0x20004618

0000b564 <_getpid_r>:
    b564:	b510      	push	{r4, lr}
    b566:	f7fb f991 	bl	688c <_getpid>
    b56a:	bd10      	pop	{r4, pc}

0000b56c <__sread>:
    b56c:	b570      	push	{r4, r5, r6, lr}
    b56e:	000c      	movs	r4, r1
    b570:	250e      	movs	r5, #14
    b572:	5f49      	ldrsh	r1, [r1, r5]
    b574:	f000 f8b0 	bl	b6d8 <_read_r>
    b578:	2800      	cmp	r0, #0
    b57a:	db03      	blt.n	b584 <__sread+0x18>
    b57c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    b57e:	181b      	adds	r3, r3, r0
    b580:	6563      	str	r3, [r4, #84]	; 0x54
    b582:	e003      	b.n	b58c <__sread+0x20>
    b584:	89a2      	ldrh	r2, [r4, #12]
    b586:	4b02      	ldr	r3, [pc, #8]	; (b590 <__sread+0x24>)
    b588:	4013      	ands	r3, r2
    b58a:	81a3      	strh	r3, [r4, #12]
    b58c:	bd70      	pop	{r4, r5, r6, pc}
    b58e:	46c0      	nop			; (mov r8, r8)
    b590:	ffffefff 	.word	0xffffefff

0000b594 <__swrite>:
    b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b596:	001f      	movs	r7, r3
    b598:	898b      	ldrh	r3, [r1, #12]
    b59a:	0005      	movs	r5, r0
    b59c:	000c      	movs	r4, r1
    b59e:	0016      	movs	r6, r2
    b5a0:	05db      	lsls	r3, r3, #23
    b5a2:	d505      	bpl.n	b5b0 <__swrite+0x1c>
    b5a4:	230e      	movs	r3, #14
    b5a6:	5ec9      	ldrsh	r1, [r1, r3]
    b5a8:	2200      	movs	r2, #0
    b5aa:	2302      	movs	r3, #2
    b5ac:	f000 f874 	bl	b698 <_lseek_r>
    b5b0:	89a2      	ldrh	r2, [r4, #12]
    b5b2:	4b05      	ldr	r3, [pc, #20]	; (b5c8 <__swrite+0x34>)
    b5b4:	0028      	movs	r0, r5
    b5b6:	4013      	ands	r3, r2
    b5b8:	81a3      	strh	r3, [r4, #12]
    b5ba:	0032      	movs	r2, r6
    b5bc:	230e      	movs	r3, #14
    b5be:	5ee1      	ldrsh	r1, [r4, r3]
    b5c0:	003b      	movs	r3, r7
    b5c2:	f000 f81f 	bl	b604 <_write_r>
    b5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5c8:	ffffefff 	.word	0xffffefff

0000b5cc <__sseek>:
    b5cc:	b570      	push	{r4, r5, r6, lr}
    b5ce:	000c      	movs	r4, r1
    b5d0:	250e      	movs	r5, #14
    b5d2:	5f49      	ldrsh	r1, [r1, r5]
    b5d4:	f000 f860 	bl	b698 <_lseek_r>
    b5d8:	89a3      	ldrh	r3, [r4, #12]
    b5da:	1c42      	adds	r2, r0, #1
    b5dc:	d103      	bne.n	b5e6 <__sseek+0x1a>
    b5de:	4a05      	ldr	r2, [pc, #20]	; (b5f4 <__sseek+0x28>)
    b5e0:	4013      	ands	r3, r2
    b5e2:	81a3      	strh	r3, [r4, #12]
    b5e4:	e004      	b.n	b5f0 <__sseek+0x24>
    b5e6:	2280      	movs	r2, #128	; 0x80
    b5e8:	0152      	lsls	r2, r2, #5
    b5ea:	4313      	orrs	r3, r2
    b5ec:	81a3      	strh	r3, [r4, #12]
    b5ee:	6560      	str	r0, [r4, #84]	; 0x54
    b5f0:	bd70      	pop	{r4, r5, r6, pc}
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	ffffefff 	.word	0xffffefff

0000b5f8 <__sclose>:
    b5f8:	b510      	push	{r4, lr}
    b5fa:	230e      	movs	r3, #14
    b5fc:	5ec9      	ldrsh	r1, [r1, r3]
    b5fe:	f000 f815 	bl	b62c <_close_r>
    b602:	bd10      	pop	{r4, pc}

0000b604 <_write_r>:
    b604:	b570      	push	{r4, r5, r6, lr}
    b606:	0005      	movs	r5, r0
    b608:	0008      	movs	r0, r1
    b60a:	0011      	movs	r1, r2
    b60c:	2200      	movs	r2, #0
    b60e:	4c06      	ldr	r4, [pc, #24]	; (b628 <_write_r+0x24>)
    b610:	6022      	str	r2, [r4, #0]
    b612:	001a      	movs	r2, r3
    b614:	f7fb f8a4 	bl	6760 <_write>
    b618:	1c43      	adds	r3, r0, #1
    b61a:	d103      	bne.n	b624 <_write_r+0x20>
    b61c:	6823      	ldr	r3, [r4, #0]
    b61e:	2b00      	cmp	r3, #0
    b620:	d000      	beq.n	b624 <_write_r+0x20>
    b622:	602b      	str	r3, [r5, #0]
    b624:	bd70      	pop	{r4, r5, r6, pc}
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	20004618 	.word	0x20004618

0000b62c <_close_r>:
    b62c:	2300      	movs	r3, #0
    b62e:	b570      	push	{r4, r5, r6, lr}
    b630:	4c06      	ldr	r4, [pc, #24]	; (b64c <_close_r+0x20>)
    b632:	0005      	movs	r5, r0
    b634:	0008      	movs	r0, r1
    b636:	6023      	str	r3, [r4, #0]
    b638:	f7fb f8e6 	bl	6808 <_close>
    b63c:	1c43      	adds	r3, r0, #1
    b63e:	d103      	bne.n	b648 <_close_r+0x1c>
    b640:	6823      	ldr	r3, [r4, #0]
    b642:	2b00      	cmp	r3, #0
    b644:	d000      	beq.n	b648 <_close_r+0x1c>
    b646:	602b      	str	r3, [r5, #0]
    b648:	bd70      	pop	{r4, r5, r6, pc}
    b64a:	46c0      	nop			; (mov r8, r8)
    b64c:	20004618 	.word	0x20004618

0000b650 <_fstat_r>:
    b650:	2300      	movs	r3, #0
    b652:	b570      	push	{r4, r5, r6, lr}
    b654:	4c06      	ldr	r4, [pc, #24]	; (b670 <_fstat_r+0x20>)
    b656:	0005      	movs	r5, r0
    b658:	0008      	movs	r0, r1
    b65a:	0011      	movs	r1, r2
    b65c:	6023      	str	r3, [r4, #0]
    b65e:	f7fb f8dd 	bl	681c <_fstat>
    b662:	1c43      	adds	r3, r0, #1
    b664:	d103      	bne.n	b66e <_fstat_r+0x1e>
    b666:	6823      	ldr	r3, [r4, #0]
    b668:	2b00      	cmp	r3, #0
    b66a:	d000      	beq.n	b66e <_fstat_r+0x1e>
    b66c:	602b      	str	r3, [r5, #0]
    b66e:	bd70      	pop	{r4, r5, r6, pc}
    b670:	20004618 	.word	0x20004618

0000b674 <_isatty_r>:
    b674:	2300      	movs	r3, #0
    b676:	b570      	push	{r4, r5, r6, lr}
    b678:	4c06      	ldr	r4, [pc, #24]	; (b694 <_isatty_r+0x20>)
    b67a:	0005      	movs	r5, r0
    b67c:	0008      	movs	r0, r1
    b67e:	6023      	str	r3, [r4, #0]
    b680:	f7fb f8da 	bl	6838 <_isatty>
    b684:	1c43      	adds	r3, r0, #1
    b686:	d103      	bne.n	b690 <_isatty_r+0x1c>
    b688:	6823      	ldr	r3, [r4, #0]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d000      	beq.n	b690 <_isatty_r+0x1c>
    b68e:	602b      	str	r3, [r5, #0]
    b690:	bd70      	pop	{r4, r5, r6, pc}
    b692:	46c0      	nop			; (mov r8, r8)
    b694:	20004618 	.word	0x20004618

0000b698 <_lseek_r>:
    b698:	b570      	push	{r4, r5, r6, lr}
    b69a:	0005      	movs	r5, r0
    b69c:	0008      	movs	r0, r1
    b69e:	0011      	movs	r1, r2
    b6a0:	2200      	movs	r2, #0
    b6a2:	4c06      	ldr	r4, [pc, #24]	; (b6bc <_lseek_r+0x24>)
    b6a4:	6022      	str	r2, [r4, #0]
    b6a6:	001a      	movs	r2, r3
    b6a8:	f7fb f8d0 	bl	684c <_lseek>
    b6ac:	1c43      	adds	r3, r0, #1
    b6ae:	d103      	bne.n	b6b8 <_lseek_r+0x20>
    b6b0:	6823      	ldr	r3, [r4, #0]
    b6b2:	2b00      	cmp	r3, #0
    b6b4:	d000      	beq.n	b6b8 <_lseek_r+0x20>
    b6b6:	602b      	str	r3, [r5, #0]
    b6b8:	bd70      	pop	{r4, r5, r6, pc}
    b6ba:	46c0      	nop			; (mov r8, r8)
    b6bc:	20004618 	.word	0x20004618

0000b6c0 <_malloc_usable_size_r>:
    b6c0:	1f0b      	subs	r3, r1, #4
    b6c2:	681a      	ldr	r2, [r3, #0]
    b6c4:	1f10      	subs	r0, r2, #4
    b6c6:	2a00      	cmp	r2, #0
    b6c8:	da04      	bge.n	b6d4 <_malloc_usable_size_r+0x14>
    b6ca:	1889      	adds	r1, r1, r2
    b6cc:	3904      	subs	r1, #4
    b6ce:	680b      	ldr	r3, [r1, #0]
    b6d0:	18d0      	adds	r0, r2, r3
    b6d2:	3804      	subs	r0, #4
    b6d4:	4770      	bx	lr
	...

0000b6d8 <_read_r>:
    b6d8:	b570      	push	{r4, r5, r6, lr}
    b6da:	0005      	movs	r5, r0
    b6dc:	0008      	movs	r0, r1
    b6de:	0011      	movs	r1, r2
    b6e0:	2200      	movs	r2, #0
    b6e2:	4c06      	ldr	r4, [pc, #24]	; (b6fc <_read_r+0x24>)
    b6e4:	6022      	str	r2, [r4, #0]
    b6e6:	001a      	movs	r2, r3
    b6e8:	f7fb f810 	bl	670c <_read>
    b6ec:	1c43      	adds	r3, r0, #1
    b6ee:	d103      	bne.n	b6f8 <_read_r+0x20>
    b6f0:	6823      	ldr	r3, [r4, #0]
    b6f2:	2b00      	cmp	r3, #0
    b6f4:	d000      	beq.n	b6f8 <_read_r+0x20>
    b6f6:	602b      	str	r3, [r5, #0]
    b6f8:	bd70      	pop	{r4, r5, r6, pc}
    b6fa:	46c0      	nop			; (mov r8, r8)
    b6fc:	20004618 	.word	0x20004618
    b700:	20697053 	.word	0x20697053
    b704:	6f727265 	.word	0x6f727265
    b708:	00002172 	.word	0x00002172
    b70c:	6c696146 	.word	0x6c696146
    b710:	74206465 	.word	0x74206465
    b714:	6e69206f 	.word	0x6e69206f
    b718:	61697469 	.word	0x61697469
    b71c:	657a696c 	.word	0x657a696c
    b720:	314d5420 	.word	0x314d5420
    b724:	5f303436 	.word	0x5f303436
    b728:	43524553 	.word	0x43524553
    b72c:	00214d4f 	.word	0x00214d4f
    b730:	50504128 	.word	0x50504128
    b734:	52452829 	.word	0x52452829
    b738:	255b2952 	.word	0x255b2952
    b73c:	255b5d73 	.word	0x255b5d73
    b740:	00005d64 	.word	0x00005d64
    b744:	61766e69 	.word	0x61766e69
    b748:	6564696c 	.word	0x6564696c
    b74c:	636f6920 	.word	0x636f6920
    b750:	6320746c 	.word	0x6320746c
    b754:	0000646d 	.word	0x0000646d

0000b758 <__FUNCTION__.14731>:
    b758:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    b768:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    b778:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
    b788:	6b617720 74207075 63206568 00706968      wakup the chip.
    b798:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    b7a8:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    b7b8:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    b7c8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    b7d8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    b7e8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    b7f8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    b808:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    b818:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    b828:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    b838:	64207070 276e6469 65732074 58522074     pp didn't set RX
    b848:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    b858:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    b868:	61462029 2065736c 65746e69 70757272     ) False interrup
    b878:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    b888:	74206c69 6552206f 69206461 7265746e     il to Read inter
    b898:	74707572 67657220 00000000 66696828     rupt reg....(hif
    b8a8:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    b8b8:	65687420 69686320 00000070 46494828      the chip...(HIF
    b8c8:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    b8d8:	746e6920 75727265 25207470 72742064      interrupt %d tr
    b8e8:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    b8f8:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    b908:	72612064 656d7567 0000746e 20505041     d argument..APP 
    b918:	75716552 65747365 69532064 6920657a     Requested Size i
    b928:	616c2073 72656772 61687420 6874206e     s larger than th
    b938:	65722065 65766963 75622064 72656666     e recived buffer
    b948:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    b958:	20505041 75716552 65747365 64412064     APP Requested Ad
    b968:	73657264 65622073 646e6f79 65687420     dress beyond the
    b978:	63657220 64657669 66756220 20726566      recived buffer 
    b988:	72646461 20737365 20646e61 676e656c     address and leng
    b998:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

0000b9a8 <__FUNCTION__.12480>:
    b9a8:	5f666968 646e6573 00000000              hif_send....

0000b9b4 <__FUNCTION__.12490>:
    b9b4:	5f666968 00727369                       hif_isr.

0000b9bc <__FUNCTION__.12496>:
    b9bc:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
    b9cc:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    b9dc:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    b9ec:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    b9fc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    ba0c:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    ba1c:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    ba2c:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    ba3c:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    ba4c:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    ba5c:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    ba6c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    ba7c:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    ba8c:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    ba9c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    baac:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    babc:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    bacc:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    badc:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    baec:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    bafc:	2065626f 75716572 73747365 72657020     obe requests per
    bb0c:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    bb1c:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    bb2c:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
    bb3c:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    bb4c:	00000a75 206e694d 76697264 76207265     u...Min driver v
    bb5c:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    bb6c:	72727543 69726420 20726576 3a726576     Curr driver ver:
    bb7c:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    bb8c:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    bb9c:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    bbac:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    bbbc:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    bbcc:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    bbdc:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    bbec:	20706557 2079656b 65646e69 64252078     Wep key index %d
    bbfc:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    bc0c:	2079656b 676e656c 25206874 00000a64     key length %d...
    bc1c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    bc2c:	656c2079 6874676e 00000000 65646e75     y length....unde
    bc3c:	656e6966 65732064 79742063 00006570     fined sec type..
    bc4c:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
    bc5c:	6420746f 6e696665 00006465 7473694c     ot defined..List
    bc6c:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
    bc7c:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
    bc8c:	31312072 00000000 45574f50 41532052     r 11....POWER SA
    bc9c:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    bcac:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    bcbc:	66754220 20726566 65637865 64656465      Buffer exceeded
    bccc:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    bcdc:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    bcec:	00000000                                ....

0000bcf0 <__FUNCTION__.12505>:
    bcf0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    bd00:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    bd10:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    bd20:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
    bd30:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
    bd40:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
    bd50:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
    bd60:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
    bd70:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
    bd80:	61747320 3a5d7472 69616620 6572206c      start]: fail re
    bd90:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
    bda0:	0000002e 6c696166 74206465 6564206f     ....failed to de
    bdb0:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
    bdc0:	68772072 20656c69 74697277 20676e69     r while writing 
    bdd0:	00676572 6f727245 68772072 20656c69     reg.Error while 
    bde0:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
    bdf0:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    be00:	6f742064 61657220 00000064 6c75705b     d to read...[pul
    be10:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    be20:	6f742064 69727720 00006574              d to write..

0000be2c <__FUNCTION__.12290>:
    be2c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0000be3c <crc7_syndrome_table>:
    be3c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    be4c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    be5c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    be6c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    be7c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    be8c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    be9c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    beac:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    bebc:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    becc:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    bedc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    beec:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    befc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    bf0c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    bf1c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    bf2c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    bf3c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    bf4c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    bf5c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    bf6c:	73756220 72726520 2e2e726f 0000002e      bus error......
    bf7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    bf8c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    bf9c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    bfac:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    bfbc:	656c6961 61642064 72206174 6f707365     ailed data respo
    bfcc:	2065736e 64616572 7562202c 72652073     nse read, bus er
    bfdc:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    bfec:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    bffc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    c00c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    c01c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    c02c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    c03c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    c04c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    c05c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    c06c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    c07c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    c08c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    c09c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    c0ac:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c0bc:	656c6961 61642064 62206174 6b636f6c     ailed data block
    c0cc:	69727720 202c6574 20737562 6f727265      write, bus erro
    c0dc:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    c0ec:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    c0fc:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    c10c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    c11c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    c12c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    c13c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    c14c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    c15c:	65722064 6e6f7073 202c6573 74697277     d response, writ
    c16c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    c17c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c18c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    c19c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    c1ac:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    c1bc:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    c1cc:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    c1dc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    c1ec:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    c1fc:	206b636f 61746164 69727720 2e2e6574     ock data write..
    c20c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c21c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    c22c:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    c23c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    c24c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    c25c:	64616572 67657220 30252820 2e297838     read reg (%08x).
    c26c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c27c:	656c6961 61642064 72206174 2e646165     ailed data read.
    c28c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c29c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    c2ac:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    c2bc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c2cc:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    c2dc:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    c2ec:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    c2fc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    c30c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    c31c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c32c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    c33c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    c34c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    c35c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    c36c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c37c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    c38c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    c39c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    c3ac:	6e692064 6e726574 77206c61 65746972     d internal write
    c3bc:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    c3cc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    c3dc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    c3ec:	64692070 002e2e2e 00001f34 00001f34     p id....4...4...
    c3fc:	00001fc4 00001e88 00001ece 00001ef0     ................
    c40c:	00001f76 00001f76 00002030 00001e5c     v...v...0 ..\...
    c41c:	0000208a 0000208a 0000208a 0000208a     . ... ... ... ..
    c42c:	00001f12                                ....

0000c430 <__FUNCTION__.11755>:
    c430:	5f697073 00646d63                       spi_cmd.

0000c438 <__FUNCTION__.11763>:
    c438:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000c444 <__FUNCTION__.11779>:
    c444:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000c454 <__FUNCTION__.11794>:
    c454:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000c464 <__FUNCTION__.11804>:
    c464:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000c474 <__FUNCTION__.11812>:
    c474:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000c484 <__FUNCTION__.11821>:
    c484:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000c494 <__FUNCTION__.11829>:
    c494:	735f6d6e 725f6970 00646165 42000800     nm_spi_read....B
    c4a4:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    c4b4:	42001c00 0c0b0a09 00000e0d 000057ba     ...B.........W..
    c4c4:	00005832 00005832 000057d8 000057d2     2X..2X...W...W..
    c4d4:	000057de 000057c0 000057e4 00005818     .W...W...W...X..
    c4e4:	00005afc 00005b4c 00005b4c 00005b48     .Z..L[..L[..H[..
    c4f4:	00005aee 00005b0e 00005ade 00005b20     .Z...[...Z.. [..
    c504:	00005b32 00005b9a 00005bc8 00005bc8     2[...[...[...[..
    c514:	00005bc4 00005b94 00005ba0 00005b8e     .[...[...[...[..
    c524:	00005ba6 00005bac                       .[...[..

0000c52c <_tcc_intflag>:
    c52c:	00000001 00000002 00000004 00000008     ................
    c53c:	00001000 00002000 00004000 00008000     ..... ...@......
    c54c:	00010000 00020000 00040000 00080000     ................
    c55c:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    c56c:	000088b4 000088b4 000088b4 00008942     ............B...
    c57c:	0000890c 00008936 000088b4 000088b4     ....6...........
    c58c:	00008942 0000890c 6b636f73 725f7465     B.......socket_r
    c59c:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
    c5ac:	766c6f73 77206465 20687469 25205049     solved with IP %
    c5bc:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
    c5cc:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
    c5dc:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
    c5ec:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
    c5fc:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
    c60c:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    c61c:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
    c62c:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
    c63c:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
    c64c:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
    c65c:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
    c66c:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
    c67c:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
    c68c:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
    c69c:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
    c6ac:	00000030 00000031 6564227b 65636976     0...1...{"device
    c6bc:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
    c6cc:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
    c6dc:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
    c6ec:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
    c6fc:	7570203a 73696c62 76652068 3a746e65     : publish event:
    c70c:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
    c71c:	72637362 20656269 6e657665 50202c74     bscribe event, P
    c72c:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
    c73c:	6572203a 76696563 4c206465 63204445     : received LED c
    c74c:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
    c75c:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
    c76c:	6e69616d 6572203a 76696563 6d206465     main: received m
    c77c:	61737365 203a6567 0a0d7325 00000000     essage: %s......
    c78c:	6e69616d 7573203a 72637362 20656269     main: subscribe 
    c79c:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
    c7ac:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
    c7bc:	3a21776f 0a732520 0000000d 6b736174     ow!: %s.....task
    c7cc:	0073335f 6b736174 0073315f 73627570     _3s.task_1s.pubs
    c7dc:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
    c7ec:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
    c7fc:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
    c80c:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
    c81c:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
    c82c:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
    c83c:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
    c84c:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
    c85c:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
    c86c:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
    c87c:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
    c88c:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
    c89c:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
    c8ac:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
    c8bc:	6c696166 74206465 7263206f 65746165     failed to create
    c8cc:	50435420 696c6320 20746e65 6b636f73      TCP client sock
    c8dc:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
    c8ec:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
    c8fc:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
    c90c:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
    c91c:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
    c92c:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
    c93c:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
    c94c:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
    c95c:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
    c96c:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
    c97c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    c98c:	00000000 64697575 0000003d 00000000     ....uuid=.......
    c99c:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
    c9ac:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
    c9bc:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
    c9cc:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
    c9dc:	00732546 00312e30                       F%s.0.1.

0000c9e4 <__func__.12046>:
    c9e4:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
    c9f4:	7463656e 00000000                       nect....

0000c9fc <__func__.12136>:
    c9fc:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

0000ca0c <__func__.12147>:
    ca0c:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
    ca1c:	00000000                                ....

0000ca20 <__func__.12151>:
    ca20:	6e627570 675f6275 00007465 00009d6c     pubnub_get..l...
    ca30:	00009c2c 00009c2c 00009c2a 00009d44     ,...,...*...D...
    ca40:	00009d44 00009d36 00009c2a 00009d44     D...6...*...D...
    ca50:	00009d36 00009d44 00009c2a 00009d4c     6...D...*...L...
    ca60:	00009d4c 00009d4c 00009f4c 7566202c     L...L...L..., fu
    ca70:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
    ca80:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
    ca90:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
    caa0:	73256425 000a7325 00000043              %d%s%s..C...

0000caac <_global_impure_ptr>:
    caac:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
    cabc:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    cacc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    cadc:	64636261 00006665                       abcdef..

0000cae4 <__sf_fake_stdin>:
	...

0000cb04 <__sf_fake_stdout>:
	...

0000cb24 <__sf_fake_stderr>:
	...

0000cb44 <_init>:
    cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb46:	46c0      	nop			; (mov r8, r8)
    cb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cb4a:	bc08      	pop	{r3}
    cb4c:	469e      	mov	lr, r3
    cb4e:	4770      	bx	lr

0000cb50 <__init_array_start>:
    cb50:	000000dd 	.word	0x000000dd

0000cb54 <_fini>:
    cb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb56:	46c0      	nop			; (mov r8, r8)
    cb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cb5a:	bc08      	pop	{r3}
    cb5c:	469e      	mov	lr, r3
    cb5e:	4770      	bx	lr

0000cb60 <__fini_array_start>:
    cb60:	000000b5 	.word	0x000000b5
