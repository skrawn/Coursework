
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000eb48  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000eb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004630  20000094  0000ebdc  00020094  2**2
                  ALLOC
  3 .stack        00002004  200046c4  0001320c  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004cad7  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000066ed  00000000  00000000  0006cbec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008c50  00000000  00000000  000732d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000018f0  00000000  00000000  0007bf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001710  00000000  00000000  0007d819  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000244e8  00000000  00000000  0007ef29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000217c2  00000000  00000000  000a3411  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009aee4  00000000  00000000  000c4bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000061c8  00000000  00000000  0015fab8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	200066c8 	.word	0x200066c8
       4:	00007cd9 	.word	0x00007cd9
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	00007dd1 	.word	0x00007dd1
       c:	00007dd1 	.word	0x00007dd1
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	00008139 	.word	0x00008139
	...
      38:	00008261 	.word	0x00008261
      3c:	000082a9 	.word	0x000082a9
      40:	00007dd1 	.word	0x00007dd1

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	00007dd1 	.word	0x00007dd1
      48:	00007dd1 	.word	0x00007dd1
      4c:	00004c39 	.word	0x00004c39
      50:	00004869 	.word	0x00004869
      54:	00007dd1 	.word	0x00007dd1
      58:	00007dd1 	.word	0x00007dd1
		if (time.hour == 0) {
      5c:	00007dd1 	.word	0x00007dd1
      60:	00007dd1 	.word	0x00007dd1
			time.hour = 12;
      64:	00005311 	.word	0x00005311
      68:	00005329 	.word	0x00005329
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00005341 	.word	0x00005341
      70:	00005359 	.word	0x00005359
      74:	00005371 	.word	0x00005371
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00005389 	.word	0x00005389
      7c:	00007c21 	.word	0x00007c21
      80:	00007c35 	.word	0x00007c35
      84:	00007c49 	.word	0x00007c49
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00000115 	.word	0x00000115
      8c:	00000129 	.word	0x00000129
      90:	0000013d 	.word	0x0000013d
	...
      9c:	000046f9 	.word	0x000046f9
      a0:	00007dd1 	.word	0x00007dd1
      a4:	00007dd1 	.word	0x00007dd1
			alarm.time.hour = alarm.time.hour % 12;
      a8:	00007dd1 	.word	0x00007dd1
      ac:	00007dd1 	.word	0x00007dd1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0000eb48 	.word	0x0000eb48

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0000eb48 	.word	0x0000eb48
     10c:	0000eb48 	.word	0x0000eb48
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
     118:	2000      	movs	r0, #0
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <TC3_Handler+0x10>)
     11c:	4798      	blx	r3
     11e:	46c0      	nop			; (mov r8, r8)
     120:	46bd      	mov	sp, r7
     122:	bd80      	pop	{r7, pc}
     124:	00000151 	.word	0x00000151

00000128 <TC4_Handler>:
     128:	b580      	push	{r7, lr}
     12a:	af00      	add	r7, sp, #0
     12c:	2001      	movs	r0, #1
     12e:	4b02      	ldr	r3, [pc, #8]	; (138 <TC4_Handler+0x10>)
     130:	4798      	blx	r3
     132:	46c0      	nop			; (mov r8, r8)
     134:	46bd      	mov	sp, r7
     136:	bd80      	pop	{r7, pc}
     138:	00000151 	.word	0x00000151

0000013c <TC5_Handler>:
     13c:	b580      	push	{r7, lr}
     13e:	af00      	add	r7, sp, #0
     140:	2002      	movs	r0, #2
     142:	4b02      	ldr	r3, [pc, #8]	; (14c <TC5_Handler+0x10>)
     144:	4798      	blx	r3
     146:	46c0      	nop			; (mov r8, r8)
     148:	46bd      	mov	sp, r7
     14a:	bd80      	pop	{r7, pc}
     14c:	00000151 	.word	0x00000151

00000150 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     150:	b580      	push	{r7, lr}
     152:	b084      	sub	sp, #16
     154:	af00      	add	r7, sp, #0
     156:	0002      	movs	r2, r0
     158:	1dfb      	adds	r3, r7, #7
     15a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     15c:	1dfb      	adds	r3, r7, #7
     15e:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     160:	4b28      	ldr	r3, [pc, #160]	; (204 <_tc_interrupt_handler+0xb4>)
     162:	0092      	lsls	r2, r2, #2
     164:	58d3      	ldr	r3, [r2, r3]
     166:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     168:	68fb      	ldr	r3, [r7, #12]
     16a:	681b      	ldr	r3, [r3, #0]
     16c:	7b9b      	ldrb	r3, [r3, #14]
     16e:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     170:	68fa      	ldr	r2, [r7, #12]
     172:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     174:	4013      	ands	r3, r2
     176:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     178:	68fb      	ldr	r3, [r7, #12]
     17a:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     17c:	230b      	movs	r3, #11
     17e:	18fb      	adds	r3, r7, r3
     180:	400a      	ands	r2, r1
     182:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     184:	230b      	movs	r3, #11
     186:	18fb      	adds	r3, r7, r3
     188:	781b      	ldrb	r3, [r3, #0]
     18a:	2201      	movs	r2, #1
     18c:	4013      	ands	r3, r2
     18e:	d008      	beq.n	1a2 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     190:	68fb      	ldr	r3, [r7, #12]
     192:	689b      	ldr	r3, [r3, #8]
     194:	68fa      	ldr	r2, [r7, #12]
     196:	0010      	movs	r0, r2
     198:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     19a:	68fb      	ldr	r3, [r7, #12]
     19c:	681b      	ldr	r3, [r3, #0]
     19e:	2201      	movs	r2, #1
     1a0:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     1a2:	230b      	movs	r3, #11
     1a4:	18fb      	adds	r3, r7, r3
     1a6:	781b      	ldrb	r3, [r3, #0]
     1a8:	2202      	movs	r2, #2
     1aa:	4013      	ands	r3, r2
     1ac:	d008      	beq.n	1c0 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     1ae:	68fb      	ldr	r3, [r7, #12]
     1b0:	68db      	ldr	r3, [r3, #12]
     1b2:	68fa      	ldr	r2, [r7, #12]
     1b4:	0010      	movs	r0, r2
     1b6:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     1b8:	68fb      	ldr	r3, [r7, #12]
     1ba:	681b      	ldr	r3, [r3, #0]
     1bc:	2202      	movs	r2, #2
     1be:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     1c0:	230b      	movs	r3, #11
     1c2:	18fb      	adds	r3, r7, r3
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	2210      	movs	r2, #16
     1c8:	4013      	ands	r3, r2
     1ca:	d008      	beq.n	1de <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     1cc:	68fb      	ldr	r3, [r7, #12]
     1ce:	691b      	ldr	r3, [r3, #16]
     1d0:	68fa      	ldr	r2, [r7, #12]
     1d2:	0010      	movs	r0, r2
     1d4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     1d6:	68fb      	ldr	r3, [r7, #12]
     1d8:	681b      	ldr	r3, [r3, #0]
     1da:	2210      	movs	r2, #16
     1dc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     1de:	230b      	movs	r3, #11
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	2220      	movs	r2, #32
     1e6:	4013      	ands	r3, r2
     1e8:	d008      	beq.n	1fc <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	695b      	ldr	r3, [r3, #20]
     1ee:	68fa      	ldr	r2, [r7, #12]
     1f0:	0010      	movs	r0, r2
     1f2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     1f4:	68fb      	ldr	r3, [r7, #12]
     1f6:	681b      	ldr	r3, [r3, #0]
     1f8:	2220      	movs	r2, #32
     1fa:	739a      	strb	r2, [r3, #14]
	}
}
     1fc:	46c0      	nop			; (mov r8, r8)
     1fe:	46bd      	mov	sp, r7
     200:	b004      	add	sp, #16
     202:	bd80      	pop	{r7, pc}
     204:	20004440 	.word	0x20004440

00000208 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     208:	b580      	push	{r7, lr}
     20a:	b082      	sub	sp, #8
     20c:	af00      	add	r7, sp, #0
     20e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     210:	687b      	ldr	r3, [r7, #4]
     212:	2200      	movs	r2, #0
     214:	701a      	strb	r2, [r3, #0]
}
     216:	46c0      	nop			; (mov r8, r8)
     218:	46bd      	mov	sp, r7
     21a:	b002      	add	sp, #8
     21c:	bd80      	pop	{r7, pc}
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
     21e:	46c0      	nop			; (mov r8, r8)

00000220 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     220:	b580      	push	{r7, lr}
     222:	b082      	sub	sp, #8
     224:	af00      	add	r7, sp, #0
     226:	0002      	movs	r2, r0
     228:	6039      	str	r1, [r7, #0]
     22a:	1dfb      	adds	r3, r7, #7
     22c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     22e:	1dfb      	adds	r3, r7, #7
     230:	781b      	ldrb	r3, [r3, #0]
     232:	2b01      	cmp	r3, #1
     234:	d00a      	beq.n	24c <system_apb_clock_set_mask+0x2c>
     236:	2b02      	cmp	r3, #2
     238:	d00f      	beq.n	25a <system_apb_clock_set_mask+0x3a>
     23a:	2b00      	cmp	r3, #0
     23c:	d114      	bne.n	268 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     23e:	4b0e      	ldr	r3, [pc, #56]	; (278 <system_apb_clock_set_mask+0x58>)
     240:	4a0d      	ldr	r2, [pc, #52]	; (278 <system_apb_clock_set_mask+0x58>)
     242:	6991      	ldr	r1, [r2, #24]
     244:	683a      	ldr	r2, [r7, #0]
     246:	430a      	orrs	r2, r1
     248:	619a      	str	r2, [r3, #24]
			break;
     24a:	e00f      	b.n	26c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <system_apb_clock_set_mask+0x58>)
     24e:	4a0a      	ldr	r2, [pc, #40]	; (278 <system_apb_clock_set_mask+0x58>)
     250:	69d1      	ldr	r1, [r2, #28]
     252:	683a      	ldr	r2, [r7, #0]
     254:	430a      	orrs	r2, r1
     256:	61da      	str	r2, [r3, #28]
			break;
     258:	e008      	b.n	26c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     25a:	4b07      	ldr	r3, [pc, #28]	; (278 <system_apb_clock_set_mask+0x58>)
     25c:	4a06      	ldr	r2, [pc, #24]	; (278 <system_apb_clock_set_mask+0x58>)
     25e:	6a11      	ldr	r1, [r2, #32]
     260:	683a      	ldr	r2, [r7, #0]
     262:	430a      	orrs	r2, r1
     264:	621a      	str	r2, [r3, #32]
			break;
     266:	e001      	b.n	26c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     268:	2317      	movs	r3, #23
     26a:	e000      	b.n	26e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     26c:	2300      	movs	r3, #0
}
     26e:	0018      	movs	r0, r3
     270:	46bd      	mov	sp, r7
     272:	b002      	add	sp, #8
     274:	bd80      	pop	{r7, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	40000400 	.word	0x40000400

0000027c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2280      	movs	r2, #128	; 0x80
     288:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2200      	movs	r2, #0
     28e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2201      	movs	r2, #1
     294:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	70da      	strb	r2, [r3, #3]
}
     29c:	46c0      	nop			; (mov r8, r8)
     29e:	46bd      	mov	sp, r7
     2a0:	b002      	add	sp, #8
     2a2:	bd80      	pop	{r7, pc}

000002a4 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2ac:	687b      	ldr	r3, [r7, #4]
     2ae:	681b      	ldr	r3, [r3, #0]
     2b0:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2b2:	68fb      	ldr	r3, [r7, #12]
     2b4:	7bdb      	ldrb	r3, [r3, #15]
     2b6:	b2db      	uxtb	r3, r3
     2b8:	001a      	movs	r2, r3
     2ba:	2380      	movs	r3, #128	; 0x80
     2bc:	4013      	ands	r3, r2
     2be:	1e5a      	subs	r2, r3, #1
     2c0:	4193      	sbcs	r3, r2
     2c2:	b2db      	uxtb	r3, r3
#endif
}
     2c4:	0018      	movs	r0, r3
     2c6:	46bd      	mov	sp, r7
     2c8:	b004      	add	sp, #16
     2ca:	bd80      	pop	{r7, pc}

000002cc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     2cc:	b590      	push	{r4, r7, lr}
     2ce:	b087      	sub	sp, #28
     2d0:	af00      	add	r7, sp, #0
     2d2:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     2d4:	2308      	movs	r3, #8
     2d6:	18fb      	adds	r3, r7, r3
     2d8:	4a0d      	ldr	r2, [pc, #52]	; (310 <_tc_get_inst_index+0x44>)
     2da:	ca13      	ldmia	r2!, {r0, r1, r4}
     2dc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     2de:	2300      	movs	r3, #0
     2e0:	617b      	str	r3, [r7, #20]
     2e2:	e00d      	b.n	300 <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
     2e4:	2308      	movs	r3, #8
     2e6:	18fb      	adds	r3, r7, r3
     2e8:	697a      	ldr	r2, [r7, #20]
     2ea:	0092      	lsls	r2, r2, #2
     2ec:	58d2      	ldr	r2, [r2, r3]
     2ee:	687b      	ldr	r3, [r7, #4]
     2f0:	429a      	cmp	r2, r3
     2f2:	d102      	bne.n	2fa <_tc_get_inst_index+0x2e>
			return i;
     2f4:	697b      	ldr	r3, [r7, #20]
     2f6:	b2db      	uxtb	r3, r3
     2f8:	e006      	b.n	308 <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     2fa:	697b      	ldr	r3, [r7, #20]
     2fc:	3301      	adds	r3, #1
     2fe:	617b      	str	r3, [r7, #20]
     300:	697b      	ldr	r3, [r7, #20]
     302:	2b02      	cmp	r3, #2
     304:	d9ee      	bls.n	2e4 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     306:	2300      	movs	r3, #0
}
     308:	0018      	movs	r0, r3
     30a:	46bd      	mov	sp, r7
     30c:	b007      	add	sp, #28
     30e:	bd90      	pop	{r4, r7, pc}
     310:	0000d650 	.word	0x0000d650

00000314 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     314:	b590      	push	{r4, r7, lr}
     316:	b08d      	sub	sp, #52	; 0x34
     318:	af00      	add	r7, sp, #0
     31a:	60f8      	str	r0, [r7, #12]
     31c:	60b9      	str	r1, [r7, #8]
     31e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     320:	232e      	movs	r3, #46	; 0x2e
     322:	18fb      	adds	r3, r7, r3
     324:	2200      	movs	r2, #0
     326:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     328:	232d      	movs	r3, #45	; 0x2d
     32a:	18fb      	adds	r3, r7, r3
     32c:	2200      	movs	r2, #0
     32e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     330:	232c      	movs	r3, #44	; 0x2c
     332:	18fb      	adds	r3, r7, r3
     334:	2200      	movs	r2, #0
     336:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     338:	2329      	movs	r3, #41	; 0x29
     33a:	18fc      	adds	r4, r7, r3
     33c:	68bb      	ldr	r3, [r7, #8]
     33e:	0018      	movs	r0, r3
     340:	4bbf      	ldr	r3, [pc, #764]	; (640 <tc_init+0x32c>)
     342:	4798      	blx	r3
     344:	0003      	movs	r3, r0
     346:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     348:	2324      	movs	r3, #36	; 0x24
     34a:	18fa      	adds	r2, r7, r3
     34c:	4bbd      	ldr	r3, [pc, #756]	; (644 <tc_init+0x330>)
     34e:	0010      	movs	r0, r2
     350:	0019      	movs	r1, r3
     352:	2303      	movs	r3, #3
     354:	001a      	movs	r2, r3
     356:	4bbc      	ldr	r3, [pc, #752]	; (648 <tc_init+0x334>)
     358:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     35a:	231c      	movs	r3, #28
     35c:	18fa      	adds	r2, r7, r3
     35e:	4bbb      	ldr	r3, [pc, #748]	; (64c <tc_init+0x338>)
     360:	0010      	movs	r0, r2
     362:	0019      	movs	r1, r3
     364:	2306      	movs	r3, #6
     366:	001a      	movs	r2, r3
     368:	4bb7      	ldr	r3, [pc, #732]	; (648 <tc_init+0x334>)
     36a:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     36c:	232b      	movs	r3, #43	; 0x2b
     36e:	18fb      	adds	r3, r7, r3
     370:	2200      	movs	r2, #0
     372:	701a      	strb	r2, [r3, #0]
     374:	e00e      	b.n	394 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
     376:	232b      	movs	r3, #43	; 0x2b
     378:	18fb      	adds	r3, r7, r3
     37a:	781a      	ldrb	r2, [r3, #0]
     37c:	68fb      	ldr	r3, [r7, #12]
     37e:	3202      	adds	r2, #2
     380:	0092      	lsls	r2, r2, #2
     382:	2100      	movs	r1, #0
     384:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     386:	232b      	movs	r3, #43	; 0x2b
     388:	18fb      	adds	r3, r7, r3
     38a:	781a      	ldrb	r2, [r3, #0]
     38c:	232b      	movs	r3, #43	; 0x2b
     38e:	18fb      	adds	r3, r7, r3
     390:	3201      	adds	r2, #1
     392:	701a      	strb	r2, [r3, #0]
     394:	232b      	movs	r3, #43	; 0x2b
     396:	18fb      	adds	r3, r7, r3
     398:	781b      	ldrb	r3, [r3, #0]
     39a:	2b03      	cmp	r3, #3
     39c:	d9eb      	bls.n	376 <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     39e:	68fb      	ldr	r3, [r7, #12]
     3a0:	2200      	movs	r2, #0
     3a2:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     3a4:	68fb      	ldr	r3, [r7, #12]
     3a6:	2200      	movs	r2, #0
     3a8:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     3aa:	2329      	movs	r3, #41	; 0x29
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	781a      	ldrb	r2, [r3, #0]
     3b0:	4ba7      	ldr	r3, [pc, #668]	; (650 <tc_init+0x33c>)
     3b2:	0092      	lsls	r2, r2, #2
     3b4:	68f9      	ldr	r1, [r7, #12]
     3b6:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     3b8:	68fb      	ldr	r3, [r7, #12]
     3ba:	68ba      	ldr	r2, [r7, #8]
     3bc:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3be:	687b      	ldr	r3, [r7, #4]
     3c0:	789b      	ldrb	r3, [r3, #2]
     3c2:	2b08      	cmp	r3, #8
     3c4:	d108      	bne.n	3d8 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     3c6:	2329      	movs	r3, #41	; 0x29
     3c8:	18fb      	adds	r3, r7, r3
     3ca:	781b      	ldrb	r3, [r3, #0]
     3cc:	3303      	adds	r3, #3
     3ce:	2201      	movs	r2, #1
     3d0:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3d2:	d001      	beq.n	3d8 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3d4:	2317      	movs	r3, #23
     3d6:	e1c4      	b.n	762 <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	789a      	ldrb	r2, [r3, #2]
     3dc:	68fb      	ldr	r3, [r7, #12]
     3de:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     3e0:	68bb      	ldr	r3, [r7, #8]
     3e2:	881b      	ldrh	r3, [r3, #0]
     3e4:	b29b      	uxth	r3, r3
     3e6:	001a      	movs	r2, r3
     3e8:	2301      	movs	r3, #1
     3ea:	4013      	ands	r3, r2
     3ec:	d001      	beq.n	3f2 <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     3ee:	2305      	movs	r3, #5
     3f0:	e1b7      	b.n	762 <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     3f2:	68bb      	ldr	r3, [r7, #8]
     3f4:	7bdb      	ldrb	r3, [r3, #15]
     3f6:	b2db      	uxtb	r3, r3
     3f8:	001a      	movs	r2, r3
     3fa:	2310      	movs	r3, #16
     3fc:	4013      	ands	r3, r2
     3fe:	d001      	beq.n	404 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     400:	231c      	movs	r3, #28
     402:	e1ae      	b.n	762 <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     404:	68bb      	ldr	r3, [r7, #8]
     406:	881b      	ldrh	r3, [r3, #0]
     408:	b29b      	uxth	r3, r3
     40a:	001a      	movs	r2, r3
     40c:	2302      	movs	r3, #2
     40e:	4013      	ands	r3, r2
     410:	d001      	beq.n	416 <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     412:	231c      	movs	r3, #28
     414:	e1a5      	b.n	762 <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     416:	687b      	ldr	r3, [r7, #4]
     418:	7c1b      	ldrb	r3, [r3, #16]
     41a:	2b00      	cmp	r3, #0
     41c:	d017      	beq.n	44e <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
     41e:	2318      	movs	r3, #24
     420:	18fb      	adds	r3, r7, r3
     422:	0018      	movs	r0, r3
     424:	4b8b      	ldr	r3, [pc, #556]	; (654 <tc_init+0x340>)
     426:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     428:	687b      	ldr	r3, [r7, #4]
     42a:	699b      	ldr	r3, [r3, #24]
     42c:	b2da      	uxtb	r2, r3
     42e:	2318      	movs	r3, #24
     430:	18fb      	adds	r3, r7, r3
     432:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     434:	2318      	movs	r3, #24
     436:	18fb      	adds	r3, r7, r3
     438:	2201      	movs	r2, #1
     43a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     43c:	687b      	ldr	r3, [r7, #4]
     43e:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     440:	b2db      	uxtb	r3, r3
     442:	2218      	movs	r2, #24
     444:	18ba      	adds	r2, r7, r2
     446:	0011      	movs	r1, r2
     448:	0018      	movs	r0, r3
     44a:	4b83      	ldr	r3, [pc, #524]	; (658 <tc_init+0x344>)
     44c:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     44e:	687b      	ldr	r3, [r7, #4]
     450:	7f1b      	ldrb	r3, [r3, #28]
     452:	2b00      	cmp	r3, #0
     454:	d017      	beq.n	486 <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
     456:	2318      	movs	r3, #24
     458:	18fb      	adds	r3, r7, r3
     45a:	0018      	movs	r0, r3
     45c:	4b7d      	ldr	r3, [pc, #500]	; (654 <tc_init+0x340>)
     45e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     460:	687b      	ldr	r3, [r7, #4]
     462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     464:	b2da      	uxtb	r2, r3
     466:	2318      	movs	r3, #24
     468:	18fb      	adds	r3, r7, r3
     46a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     46c:	2318      	movs	r3, #24
     46e:	18fb      	adds	r3, r7, r3
     470:	2201      	movs	r2, #1
     472:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     474:	687b      	ldr	r3, [r7, #4]
     476:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     478:	b2db      	uxtb	r3, r3
     47a:	2218      	movs	r2, #24
     47c:	18ba      	adds	r2, r7, r2
     47e:	0011      	movs	r1, r2
     480:	0018      	movs	r0, r3
     482:	4b75      	ldr	r3, [pc, #468]	; (658 <tc_init+0x344>)
     484:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     486:	2329      	movs	r3, #41	; 0x29
     488:	18fb      	adds	r3, r7, r3
     48a:	781a      	ldrb	r2, [r3, #0]
     48c:	231c      	movs	r3, #28
     48e:	18fb      	adds	r3, r7, r3
     490:	0052      	lsls	r2, r2, #1
     492:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     494:	0019      	movs	r1, r3
     496:	2002      	movs	r0, #2
     498:	4b70      	ldr	r3, [pc, #448]	; (65c <tc_init+0x348>)
     49a:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	789b      	ldrb	r3, [r3, #2]
     4a0:	2b08      	cmp	r3, #8
     4a2:	d10b      	bne.n	4bc <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     4a4:	2329      	movs	r3, #41	; 0x29
     4a6:	18fb      	adds	r3, r7, r3
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	1c5a      	adds	r2, r3, #1
     4ac:	231c      	movs	r3, #28
     4ae:	18fb      	adds	r3, r7, r3
     4b0:	0052      	lsls	r2, r2, #1
     4b2:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4b4:	0019      	movs	r1, r3
     4b6:	2002      	movs	r0, #2
     4b8:	4b68      	ldr	r3, [pc, #416]	; (65c <tc_init+0x348>)
     4ba:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     4bc:	2314      	movs	r3, #20
     4be:	18fb      	adds	r3, r7, r3
     4c0:	0018      	movs	r0, r3
     4c2:	4b67      	ldr	r3, [pc, #412]	; (660 <tc_init+0x34c>)
     4c4:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     4c6:	687b      	ldr	r3, [r7, #4]
     4c8:	781a      	ldrb	r2, [r3, #0]
     4ca:	2314      	movs	r3, #20
     4cc:	18fb      	adds	r3, r7, r3
     4ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     4d0:	2329      	movs	r3, #41	; 0x29
     4d2:	18fb      	adds	r3, r7, r3
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2224      	movs	r2, #36	; 0x24
     4d8:	18ba      	adds	r2, r7, r2
     4da:	5cd3      	ldrb	r3, [r2, r3]
     4dc:	2214      	movs	r2, #20
     4de:	18ba      	adds	r2, r7, r2
     4e0:	0011      	movs	r1, r2
     4e2:	0018      	movs	r0, r3
     4e4:	4b5f      	ldr	r3, [pc, #380]	; (664 <tc_init+0x350>)
     4e6:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     4e8:	2329      	movs	r3, #41	; 0x29
     4ea:	18fb      	adds	r3, r7, r3
     4ec:	781b      	ldrb	r3, [r3, #0]
     4ee:	2224      	movs	r2, #36	; 0x24
     4f0:	18ba      	adds	r2, r7, r2
     4f2:	5cd3      	ldrb	r3, [r2, r3]
     4f4:	0018      	movs	r0, r3
     4f6:	4b5c      	ldr	r3, [pc, #368]	; (668 <tc_init+0x354>)
     4f8:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     4fa:	687b      	ldr	r3, [r7, #4]
     4fc:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     502:	4313      	orrs	r3, r2
     504:	b2db      	uxtb	r3, r3
     506:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     508:	687b      	ldr	r3, [r7, #4]
     50a:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     50c:	4313      	orrs	r3, r2
     50e:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     510:	687b      	ldr	r3, [r7, #4]
     512:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     514:	232e      	movs	r3, #46	; 0x2e
     516:	18fb      	adds	r3, r7, r3
     518:	430a      	orrs	r2, r1
     51a:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	785b      	ldrb	r3, [r3, #1]
     520:	2b00      	cmp	r3, #0
     522:	d008      	beq.n	536 <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     524:	232e      	movs	r3, #46	; 0x2e
     526:	18fb      	adds	r3, r7, r3
     528:	222e      	movs	r2, #46	; 0x2e
     52a:	18ba      	adds	r2, r7, r2
     52c:	8812      	ldrh	r2, [r2, #0]
     52e:	2180      	movs	r1, #128	; 0x80
     530:	0109      	lsls	r1, r1, #4
     532:	430a      	orrs	r2, r1
     534:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     536:	46c0      	nop			; (mov r8, r8)
     538:	68fb      	ldr	r3, [r7, #12]
     53a:	0018      	movs	r0, r3
     53c:	4b4b      	ldr	r3, [pc, #300]	; (66c <tc_init+0x358>)
     53e:	4798      	blx	r3
     540:	1e03      	subs	r3, r0, #0
     542:	d1f9      	bne.n	538 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     544:	68bb      	ldr	r3, [r7, #8]
     546:	222e      	movs	r2, #46	; 0x2e
     548:	18ba      	adds	r2, r7, r2
     54a:	8812      	ldrh	r2, [r2, #0]
     54c:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     54e:	687b      	ldr	r3, [r7, #4]
     550:	7b5b      	ldrb	r3, [r3, #13]
     552:	2b00      	cmp	r3, #0
     554:	d003      	beq.n	55e <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     556:	232d      	movs	r3, #45	; 0x2d
     558:	18fb      	adds	r3, r7, r3
     55a:	2204      	movs	r2, #4
     55c:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     55e:	687b      	ldr	r3, [r7, #4]
     560:	7b9b      	ldrb	r3, [r3, #14]
     562:	2b00      	cmp	r3, #0
     564:	d007      	beq.n	576 <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     566:	232d      	movs	r3, #45	; 0x2d
     568:	18fb      	adds	r3, r7, r3
     56a:	222d      	movs	r2, #45	; 0x2d
     56c:	18ba      	adds	r2, r7, r2
     56e:	7812      	ldrb	r2, [r2, #0]
     570:	2101      	movs	r1, #1
     572:	430a      	orrs	r2, r1
     574:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     576:	46c0      	nop			; (mov r8, r8)
     578:	68fb      	ldr	r3, [r7, #12]
     57a:	0018      	movs	r0, r3
     57c:	4b3b      	ldr	r3, [pc, #236]	; (66c <tc_init+0x358>)
     57e:	4798      	blx	r3
     580:	1e03      	subs	r3, r0, #0
     582:	d1f9      	bne.n	578 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     584:	68bb      	ldr	r3, [r7, #8]
     586:	22ff      	movs	r2, #255	; 0xff
     588:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     58a:	232d      	movs	r3, #45	; 0x2d
     58c:	18fb      	adds	r3, r7, r3
     58e:	781b      	ldrb	r3, [r3, #0]
     590:	2b00      	cmp	r3, #0
     592:	d00b      	beq.n	5ac <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
     594:	46c0      	nop			; (mov r8, r8)
     596:	68fb      	ldr	r3, [r7, #12]
     598:	0018      	movs	r0, r3
     59a:	4b34      	ldr	r3, [pc, #208]	; (66c <tc_init+0x358>)
     59c:	4798      	blx	r3
     59e:	1e03      	subs	r3, r0, #0
     5a0:	d1f9      	bne.n	596 <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5a2:	68bb      	ldr	r3, [r7, #8]
     5a4:	222d      	movs	r2, #45	; 0x2d
     5a6:	18ba      	adds	r2, r7, r2
     5a8:	7812      	ldrb	r2, [r2, #0]
     5aa:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     5ac:	232c      	movs	r3, #44	; 0x2c
     5ae:	18fb      	adds	r3, r7, r3
     5b0:	687a      	ldr	r2, [r7, #4]
     5b2:	7a92      	ldrb	r2, [r2, #10]
     5b4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5b6:	232a      	movs	r3, #42	; 0x2a
     5b8:	18fb      	adds	r3, r7, r3
     5ba:	2200      	movs	r2, #0
     5bc:	701a      	strb	r2, [r3, #0]
     5be:	e01c      	b.n	5fa <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
     5c0:	232a      	movs	r3, #42	; 0x2a
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	781b      	ldrb	r3, [r3, #0]
     5c6:	687a      	ldr	r2, [r7, #4]
     5c8:	18d3      	adds	r3, r2, r3
     5ca:	7adb      	ldrb	r3, [r3, #11]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d00d      	beq.n	5ec <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5d0:	232a      	movs	r3, #42	; 0x2a
     5d2:	18fb      	adds	r3, r7, r3
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	2210      	movs	r2, #16
     5d8:	409a      	lsls	r2, r3
     5da:	0013      	movs	r3, r2
     5dc:	b2d9      	uxtb	r1, r3
     5de:	232c      	movs	r3, #44	; 0x2c
     5e0:	18fb      	adds	r3, r7, r3
     5e2:	222c      	movs	r2, #44	; 0x2c
     5e4:	18ba      	adds	r2, r7, r2
     5e6:	7812      	ldrb	r2, [r2, #0]
     5e8:	430a      	orrs	r2, r1
     5ea:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5ec:	232a      	movs	r3, #42	; 0x2a
     5ee:	18fb      	adds	r3, r7, r3
     5f0:	781a      	ldrb	r2, [r3, #0]
     5f2:	232a      	movs	r3, #42	; 0x2a
     5f4:	18fb      	adds	r3, r7, r3
     5f6:	3201      	adds	r2, #1
     5f8:	701a      	strb	r2, [r3, #0]
     5fa:	232a      	movs	r3, #42	; 0x2a
     5fc:	18fb      	adds	r3, r7, r3
     5fe:	781b      	ldrb	r3, [r3, #0]
     600:	2b01      	cmp	r3, #1
     602:	d9dd      	bls.n	5c0 <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     604:	46c0      	nop			; (mov r8, r8)
     606:	68fb      	ldr	r3, [r7, #12]
     608:	0018      	movs	r0, r3
     60a:	4b18      	ldr	r3, [pc, #96]	; (66c <tc_init+0x358>)
     60c:	4798      	blx	r3
     60e:	1e03      	subs	r3, r0, #0
     610:	d1f9      	bne.n	606 <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     612:	68bb      	ldr	r3, [r7, #8]
     614:	222c      	movs	r2, #44	; 0x2c
     616:	18ba      	adds	r2, r7, r2
     618:	7812      	ldrb	r2, [r2, #0]
     61a:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     61c:	46c0      	nop			; (mov r8, r8)
     61e:	68fb      	ldr	r3, [r7, #12]
     620:	0018      	movs	r0, r3
     622:	4b12      	ldr	r3, [pc, #72]	; (66c <tc_init+0x358>)
     624:	4798      	blx	r3
     626:	1e03      	subs	r3, r0, #0
     628:	d1f9      	bne.n	61e <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	791b      	ldrb	r3, [r3, #4]
     62e:	2b04      	cmp	r3, #4
     630:	d01e      	beq.n	670 <tc_init+0x35c>
     632:	2b08      	cmp	r3, #8
     634:	d100      	bne.n	638 <tc_init+0x324>
     636:	e070      	b.n	71a <tc_init+0x406>
     638:	2b00      	cmp	r3, #0
     63a:	d04b      	beq.n	6d4 <tc_init+0x3c0>
     63c:	e090      	b.n	760 <tc_init+0x44c>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	000002cd 	.word	0x000002cd
     644:	0000d65c 	.word	0x0000d65c
     648:	0000c011 	.word	0x0000c011
     64c:	0000d660 	.word	0x0000d660
     650:	20004440 	.word	0x20004440
     654:	0000027d 	.word	0x0000027d
     658:	00007b99 	.word	0x00007b99
     65c:	00000221 	.word	0x00000221
     660:	00000209 	.word	0x00000209
     664:	000078ad 	.word	0x000078ad
     668:	000078f1 	.word	0x000078f1
     66c:	000002a5 	.word	0x000002a5
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     670:	46c0      	nop			; (mov r8, r8)
     672:	68fb      	ldr	r3, [r7, #12]
     674:	0018      	movs	r0, r3
     676:	4b3d      	ldr	r3, [pc, #244]	; (76c <tc_init+0x458>)
     678:	4798      	blx	r3
     67a:	1e03      	subs	r3, r0, #0
     67c:	d1f9      	bne.n	672 <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	2228      	movs	r2, #40	; 0x28
     682:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     684:	68bb      	ldr	r3, [r7, #8]
     686:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     688:	46c0      	nop			; (mov r8, r8)
     68a:	68fb      	ldr	r3, [r7, #12]
     68c:	0018      	movs	r0, r3
     68e:	4b37      	ldr	r3, [pc, #220]	; (76c <tc_init+0x458>)
     690:	4798      	blx	r3
     692:	1e03      	subs	r3, r0, #0
     694:	d1f9      	bne.n	68a <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     696:	687b      	ldr	r3, [r7, #4]
     698:	2229      	movs	r2, #41	; 0x29
     69a:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     69c:	68bb      	ldr	r3, [r7, #8]
     69e:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     6a0:	46c0      	nop			; (mov r8, r8)
     6a2:	68fb      	ldr	r3, [r7, #12]
     6a4:	0018      	movs	r0, r3
     6a6:	4b31      	ldr	r3, [pc, #196]	; (76c <tc_init+0x458>)
     6a8:	4798      	blx	r3
     6aa:	1e03      	subs	r3, r0, #0
     6ac:	d1f9      	bne.n	6a2 <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	222a      	movs	r2, #42	; 0x2a
     6b2:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     6b4:	68bb      	ldr	r3, [r7, #8]
     6b6:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     6b8:	46c0      	nop			; (mov r8, r8)
     6ba:	68fb      	ldr	r3, [r7, #12]
     6bc:	0018      	movs	r0, r3
     6be:	4b2b      	ldr	r3, [pc, #172]	; (76c <tc_init+0x458>)
     6c0:	4798      	blx	r3
     6c2:	1e03      	subs	r3, r0, #0
     6c4:	d1f9      	bne.n	6ba <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     6c6:	687b      	ldr	r3, [r7, #4]
     6c8:	222b      	movs	r2, #43	; 0x2b
     6ca:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     6cc:	68bb      	ldr	r3, [r7, #8]
     6ce:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     6d0:	2300      	movs	r3, #0
     6d2:	e046      	b.n	762 <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     6d4:	46c0      	nop			; (mov r8, r8)
     6d6:	68fb      	ldr	r3, [r7, #12]
     6d8:	0018      	movs	r0, r3
     6da:	4b24      	ldr	r3, [pc, #144]	; (76c <tc_init+0x458>)
     6dc:	4798      	blx	r3
     6de:	1e03      	subs	r3, r0, #0
     6e0:	d1f9      	bne.n	6d6 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     6e6:	68bb      	ldr	r3, [r7, #8]
     6e8:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	68fb      	ldr	r3, [r7, #12]
     6ee:	0018      	movs	r0, r3
     6f0:	4b1e      	ldr	r3, [pc, #120]	; (76c <tc_init+0x458>)
     6f2:	4798      	blx	r3
     6f4:	1e03      	subs	r3, r0, #0
     6f6:	d1f9      	bne.n	6ec <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     6fc:	68bb      	ldr	r3, [r7, #8]
     6fe:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     700:	46c0      	nop			; (mov r8, r8)
     702:	68fb      	ldr	r3, [r7, #12]
     704:	0018      	movs	r0, r3
     706:	4b19      	ldr	r3, [pc, #100]	; (76c <tc_init+0x458>)
     708:	4798      	blx	r3
     70a:	1e03      	subs	r3, r0, #0
     70c:	d1f9      	bne.n	702 <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     70e:	687b      	ldr	r3, [r7, #4]
     710:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     712:	68bb      	ldr	r3, [r7, #8]
     714:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     716:	2300      	movs	r3, #0
     718:	e023      	b.n	762 <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	68fb      	ldr	r3, [r7, #12]
     71e:	0018      	movs	r0, r3
     720:	4b12      	ldr	r3, [pc, #72]	; (76c <tc_init+0x458>)
     722:	4798      	blx	r3
     724:	1e03      	subs	r3, r0, #0
     726:	d1f9      	bne.n	71c <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     728:	687b      	ldr	r3, [r7, #4]
     72a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     72c:	68bb      	ldr	r3, [r7, #8]
     72e:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     730:	46c0      	nop			; (mov r8, r8)
     732:	68fb      	ldr	r3, [r7, #12]
     734:	0018      	movs	r0, r3
     736:	4b0d      	ldr	r3, [pc, #52]	; (76c <tc_init+0x458>)
     738:	4798      	blx	r3
     73a:	1e03      	subs	r3, r0, #0
     73c:	d1f9      	bne.n	732 <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     73e:	687b      	ldr	r3, [r7, #4]
     740:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     742:	68bb      	ldr	r3, [r7, #8]
     744:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     746:	46c0      	nop			; (mov r8, r8)
     748:	68fb      	ldr	r3, [r7, #12]
     74a:	0018      	movs	r0, r3
     74c:	4b07      	ldr	r3, [pc, #28]	; (76c <tc_init+0x458>)
     74e:	4798      	blx	r3
     750:	1e03      	subs	r3, r0, #0
     752:	d1f9      	bne.n	748 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     754:	687b      	ldr	r3, [r7, #4]
     756:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     758:	68bb      	ldr	r3, [r7, #8]
     75a:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     75c:	2300      	movs	r3, #0
     75e:	e000      	b.n	762 <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     760:	2317      	movs	r3, #23
}
     762:	0018      	movs	r0, r3
     764:	46bd      	mov	sp, r7
     766:	b00d      	add	sp, #52	; 0x34
     768:	bd90      	pop	{r4, r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	000002a5 	.word	0x000002a5

00000770 <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
     770:	b580      	push	{r7, lr}
     772:	b084      	sub	sp, #16
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
     778:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	681b      	ldr	r3, [r3, #0]
     77e:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     780:	46c0      	nop			; (mov r8, r8)
     782:	687b      	ldr	r3, [r7, #4]
     784:	0018      	movs	r0, r3
     786:	4b11      	ldr	r3, [pc, #68]	; (7cc <tc_set_count_value+0x5c>)
     788:	4798      	blx	r3
     78a:	1e03      	subs	r3, r0, #0
     78c:	d1f9      	bne.n	782 <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     78e:	687b      	ldr	r3, [r7, #4]
     790:	791b      	ldrb	r3, [r3, #4]
     792:	2b04      	cmp	r3, #4
     794:	d004      	beq.n	7a0 <tc_set_count_value+0x30>
     796:	2b08      	cmp	r3, #8
     798:	d00e      	beq.n	7b8 <tc_set_count_value+0x48>
     79a:	2b00      	cmp	r3, #0
     79c:	d006      	beq.n	7ac <tc_set_count_value+0x3c>
     79e:	e010      	b.n	7c2 <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     7a0:	683b      	ldr	r3, [r7, #0]
     7a2:	b2da      	uxtb	r2, r3
     7a4:	68fb      	ldr	r3, [r7, #12]
     7a6:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
     7a8:	2300      	movs	r3, #0
     7aa:	e00b      	b.n	7c4 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	b29a      	uxth	r2, r3
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
     7b4:	2300      	movs	r3, #0
     7b6:	e005      	b.n	7c4 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     7b8:	68fb      	ldr	r3, [r7, #12]
     7ba:	683a      	ldr	r2, [r7, #0]
     7bc:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
     7be:	2300      	movs	r3, #0
     7c0:	e000      	b.n	7c4 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
     7c2:	2317      	movs	r3, #23
	}
}
     7c4:	0018      	movs	r0, r3
     7c6:	46bd      	mov	sp, r7
     7c8:	b004      	add	sp, #16
     7ca:	bd80      	pop	{r7, pc}
     7cc:	000002a5 	.word	0x000002a5

000007d0 <display_init>:
    { BUTTON_UP,            display_button_up_handler },
    { 0, NULL },
};

void display_init(void)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	af00      	add	r7, sp, #0
    wtc6508_init();   
     7d4:	4b03      	ldr	r3, [pc, #12]	; (7e4 <display_init+0x14>)
     7d6:	4798      	blx	r3
    tm1640_init();
     7d8:	4b03      	ldr	r3, [pc, #12]	; (7e8 <display_init+0x18>)
     7da:	4798      	blx	r3
}
     7dc:	46c0      	nop			; (mov r8, r8)
     7de:	46bd      	mov	sp, r7
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	00001085 	.word	0x00001085
     7e8:	00000bd9 	.word	0x00000bd9

000007ec <display_update_50Hz>:


void display_update_50Hz(void)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	b082      	sub	sp, #8
     7f0:	af00      	add	r7, sp, #0
    uint8_t status = 0;
     7f2:	1dbb      	adds	r3, r7, #6
     7f4:	2200      	movs	r2, #0
     7f6:	701a      	strb	r2, [r3, #0]
    uint8_t button_mask = 0x1;
     7f8:	1dfb      	adds	r3, r7, #7
     7fa:	2201      	movs	r2, #1
     7fc:	701a      	strb	r2, [r3, #0]
    
    // Check for user input
    if (wtc6508_read(&status)) {
     7fe:	1dbb      	adds	r3, r7, #6
     800:	0018      	movs	r0, r3
     802:	4b07      	ldr	r3, [pc, #28]	; (820 <display_update_50Hz+0x34>)
     804:	4798      	blx	r3
     806:	1e03      	subs	r3, r0, #0
     808:	d006      	beq.n	818 <display_update_50Hz+0x2c>
        printf("Error! Unable to read button status\n");
     80a:	4b06      	ldr	r3, [pc, #24]	; (824 <display_update_50Hz+0x38>)
     80c:	0018      	movs	r0, r3
     80e:	4b06      	ldr	r3, [pc, #24]	; (828 <display_update_50Hz+0x3c>)
     810:	4798      	blx	r3
        status = 0;
     812:	1dbb      	adds	r3, r7, #6
     814:	2200      	movs	r2, #0
     816:	701a      	strb	r2, [r3, #0]
#if !DISPLAY_TEST_MODE    
    // Get temperature and error statuses

    // Update display if necessary
#endif
}
     818:	46c0      	nop			; (mov r8, r8)
     81a:	46bd      	mov	sp, r7
     81c:	b002      	add	sp, #8
     81e:	bd80      	pop	{r7, pc}
     820:	00001155 	.word	0x00001155
     824:	0000d668 	.word	0x0000d668
     828:	0000c6f9 	.word	0x0000c6f9

0000082c <display_led_test_1Hz>:
    SEG_0, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, SEG_7, SEG_8, SEG_9, 
    SEG_C, SEG_F, SEG_E, SEG_H, SEG_h
};

void display_led_test_1Hz(void)
{
     82c:	b580      	push	{r7, lr}
     82e:	b084      	sub	sp, #16
     830:	af00      	add	r7, sp, #0
#if DISPLAY_TEST_MODE    
    static uint8_t grid_number = 0;
    static uint8_t segment_number = 0;

    tm1640_display_t disp_conf = {0};    
     832:	003b      	movs	r3, r7
     834:	0018      	movs	r0, r3
     836:	2310      	movs	r3, #16
     838:	001a      	movs	r2, r3
     83a:	2100      	movs	r1, #0
     83c:	4b19      	ldr	r3, [pc, #100]	; (8a4 <display_led_test_1Hz+0x78>)
     83e:	4798      	blx	r3
    disp_conf.grid[grid_number] = tm1640_segments[segment_number];
     840:	4b19      	ldr	r3, [pc, #100]	; (8a8 <display_led_test_1Hz+0x7c>)
     842:	781b      	ldrb	r3, [r3, #0]
     844:	001a      	movs	r2, r3
     846:	4b19      	ldr	r3, [pc, #100]	; (8ac <display_led_test_1Hz+0x80>)
     848:	781b      	ldrb	r3, [r3, #0]
     84a:	0019      	movs	r1, r3
     84c:	4b18      	ldr	r3, [pc, #96]	; (8b0 <display_led_test_1Hz+0x84>)
     84e:	5c59      	ldrb	r1, [r3, r1]
     850:	003b      	movs	r3, r7
     852:	5499      	strb	r1, [r3, r2]
    tm1640_set_display(&disp_conf, BRIGHT_MAX);
     854:	003b      	movs	r3, r7
     856:	218f      	movs	r1, #143	; 0x8f
     858:	0018      	movs	r0, r3
     85a:	4b16      	ldr	r3, [pc, #88]	; (8b4 <display_led_test_1Hz+0x88>)
     85c:	4798      	blx	r3

    segment_number = (segment_number + 1) % (sizeof(tm1640_segments) / sizeof(tm1640_seg_t));
     85e:	4b13      	ldr	r3, [pc, #76]	; (8ac <display_led_test_1Hz+0x80>)
     860:	781b      	ldrb	r3, [r3, #0]
     862:	3301      	adds	r3, #1
     864:	001a      	movs	r2, r3
     866:	4b14      	ldr	r3, [pc, #80]	; (8b8 <display_led_test_1Hz+0x8c>)
     868:	2117      	movs	r1, #23
     86a:	0010      	movs	r0, r2
     86c:	4798      	blx	r3
     86e:	000b      	movs	r3, r1
     870:	b2da      	uxtb	r2, r3
     872:	4b0e      	ldr	r3, [pc, #56]	; (8ac <display_led_test_1Hz+0x80>)
     874:	701a      	strb	r2, [r3, #0]

    if (segment_number == 0) {
     876:	4b0d      	ldr	r3, [pc, #52]	; (8ac <display_led_test_1Hz+0x80>)
     878:	781b      	ldrb	r3, [r3, #0]
     87a:	2b00      	cmp	r3, #0
     87c:	d10d      	bne.n	89a <display_led_test_1Hz+0x6e>
        grid_number = (grid_number + 1) % TM1640_GRIDS;    
     87e:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <display_led_test_1Hz+0x7c>)
     880:	781b      	ldrb	r3, [r3, #0]
     882:	3301      	adds	r3, #1
     884:	4a0d      	ldr	r2, [pc, #52]	; (8bc <display_led_test_1Hz+0x90>)
     886:	4013      	ands	r3, r2
     888:	d504      	bpl.n	894 <display_led_test_1Hz+0x68>
     88a:	3b01      	subs	r3, #1
     88c:	2210      	movs	r2, #16
     88e:	4252      	negs	r2, r2
     890:	4313      	orrs	r3, r2
     892:	3301      	adds	r3, #1
     894:	b2da      	uxtb	r2, r3
     896:	4b04      	ldr	r3, [pc, #16]	; (8a8 <display_led_test_1Hz+0x7c>)
     898:	701a      	strb	r2, [r3, #0]
    }       

#endif
}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	46bd      	mov	sp, r7
     89e:	b004      	add	sp, #16
     8a0:	bd80      	pop	{r7, pc}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	0000c023 	.word	0x0000c023
     8a8:	200000b0 	.word	0x200000b0
     8ac:	200000b1 	.word	0x200000b1
     8b0:	0000d68c 	.word	0x0000d68c
     8b4:	00000ced 	.word	0x00000ced
     8b8:	0000b791 	.word	0x0000b791
     8bc:	8000000f 	.word	0x8000000f

000008c0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     8c0:	b580      	push	{r7, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	af00      	add	r7, sp, #0
     8c6:	0002      	movs	r2, r0
     8c8:	1dfb      	adds	r3, r7, #7
     8ca:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     8cc:	4b06      	ldr	r3, [pc, #24]	; (8e8 <NVIC_EnableIRQ+0x28>)
     8ce:	1dfa      	adds	r2, r7, #7
     8d0:	7812      	ldrb	r2, [r2, #0]
     8d2:	0011      	movs	r1, r2
     8d4:	221f      	movs	r2, #31
     8d6:	400a      	ands	r2, r1
     8d8:	2101      	movs	r1, #1
     8da:	4091      	lsls	r1, r2
     8dc:	000a      	movs	r2, r1
     8de:	601a      	str	r2, [r3, #0]
}
     8e0:	46c0      	nop			; (mov r8, r8)
     8e2:	46bd      	mov	sp, r7
     8e4:	b002      	add	sp, #8
     8e6:	bd80      	pop	{r7, pc}
     8e8:	e000e100 	.word	0xe000e100

000008ec <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     8ec:	b580      	push	{r7, lr}
     8ee:	b082      	sub	sp, #8
     8f0:	af00      	add	r7, sp, #0
     8f2:	0002      	movs	r2, r0
     8f4:	1dfb      	adds	r3, r7, #7
     8f6:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     8f8:	4a07      	ldr	r2, [pc, #28]	; (918 <NVIC_DisableIRQ+0x2c>)
     8fa:	1dfb      	adds	r3, r7, #7
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	0019      	movs	r1, r3
     900:	231f      	movs	r3, #31
     902:	400b      	ands	r3, r1
     904:	2101      	movs	r1, #1
     906:	4099      	lsls	r1, r3
     908:	000b      	movs	r3, r1
     90a:	0019      	movs	r1, r3
     90c:	2380      	movs	r3, #128	; 0x80
     90e:	50d1      	str	r1, [r2, r3]
}
     910:	46c0      	nop			; (mov r8, r8)
     912:	46bd      	mov	sp, r7
     914:	b002      	add	sp, #8
     916:	bd80      	pop	{r7, pc}
     918:	e000e100 	.word	0xe000e100

0000091c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     91c:	b580      	push	{r7, lr}
     91e:	b082      	sub	sp, #8
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     924:	687b      	ldr	r3, [r7, #4]
     926:	2280      	movs	r2, #128	; 0x80
     928:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     92a:	687b      	ldr	r3, [r7, #4]
     92c:	2200      	movs	r2, #0
     92e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     930:	687b      	ldr	r3, [r7, #4]
     932:	2201      	movs	r2, #1
     934:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     936:	687b      	ldr	r3, [r7, #4]
     938:	2200      	movs	r2, #0
     93a:	70da      	strb	r2, [r3, #3]
}
     93c:	46c0      	nop			; (mov r8, r8)
     93e:	46bd      	mov	sp, r7
     940:	b002      	add	sp, #8
     942:	bd80      	pop	{r7, pc}

00000944 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     944:	b580      	push	{r7, lr}
     946:	b082      	sub	sp, #8
     948:	af00      	add	r7, sp, #0
     94a:	0002      	movs	r2, r0
     94c:	1dfb      	adds	r3, r7, #7
     94e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     950:	4b06      	ldr	r3, [pc, #24]	; (96c <system_interrupt_enable+0x28>)
     952:	1dfa      	adds	r2, r7, #7
     954:	7812      	ldrb	r2, [r2, #0]
     956:	0011      	movs	r1, r2
     958:	221f      	movs	r2, #31
     95a:	400a      	ands	r2, r1
     95c:	2101      	movs	r1, #1
     95e:	4091      	lsls	r1, r2
     960:	000a      	movs	r2, r1
     962:	601a      	str	r2, [r3, #0]
}
     964:	46c0      	nop			; (mov r8, r8)
     966:	46bd      	mov	sp, r7
     968:	b002      	add	sp, #8
     96a:	bd80      	pop	{r7, pc}
     96c:	e000e100 	.word	0xe000e100

00000970 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     970:	b580      	push	{r7, lr}
     972:	b084      	sub	sp, #16
     974:	af00      	add	r7, sp, #0
     976:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     978:	687b      	ldr	r3, [r7, #4]
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     97e:	68fb      	ldr	r3, [r7, #12]
     980:	69db      	ldr	r3, [r3, #28]
     982:	1e5a      	subs	r2, r3, #1
     984:	4193      	sbcs	r3, r2
     986:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     988:	0018      	movs	r0, r3
     98a:	46bd      	mov	sp, r7
     98c:	b004      	add	sp, #16
     98e:	bd80      	pop	{r7, pc}

00000990 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     990:	b580      	push	{r7, lr}
     992:	b084      	sub	sp, #16
     994:	af00      	add	r7, sp, #0
     996:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     998:	687b      	ldr	r3, [r7, #4]
     99a:	681b      	ldr	r3, [r3, #0]
     99c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	681b      	ldr	r3, [r3, #0]
     9a2:	0018      	movs	r0, r3
     9a4:	4b0b      	ldr	r3, [pc, #44]	; (9d4 <spi_enable+0x44>)
     9a6:	4798      	blx	r3
     9a8:	0003      	movs	r3, r0
     9aa:	0018      	movs	r0, r3
     9ac:	4b0a      	ldr	r3, [pc, #40]	; (9d8 <spi_enable+0x48>)
     9ae:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     9b0:	46c0      	nop			; (mov r8, r8)
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	0018      	movs	r0, r3
     9b6:	4b09      	ldr	r3, [pc, #36]	; (9dc <spi_enable+0x4c>)
     9b8:	4798      	blx	r3
     9ba:	1e03      	subs	r3, r0, #0
     9bc:	d1f9      	bne.n	9b2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     9be:	68fb      	ldr	r3, [r7, #12]
     9c0:	681b      	ldr	r3, [r3, #0]
     9c2:	2202      	movs	r2, #2
     9c4:	431a      	orrs	r2, r3
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	601a      	str	r2, [r3, #0]
}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	46bd      	mov	sp, r7
     9ce:	b004      	add	sp, #16
     9d0:	bd80      	pop	{r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)
     9d4:	000052c5 	.word	0x000052c5
     9d8:	00000945 	.word	0x00000945
     9dc:	00000971 	.word	0x00000971

000009e0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     9e0:	b580      	push	{r7, lr}
     9e2:	b084      	sub	sp, #16
     9e4:	af00      	add	r7, sp, #0
     9e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9e8:	687b      	ldr	r3, [r7, #4]
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	7e1b      	ldrb	r3, [r3, #24]
     9f2:	b2db      	uxtb	r3, r3
     9f4:	001a      	movs	r2, r3
     9f6:	2301      	movs	r3, #1
     9f8:	4013      	ands	r3, r2
     9fa:	1e5a      	subs	r2, r3, #1
     9fc:	4193      	sbcs	r3, r2
     9fe:	b2db      	uxtb	r3, r3
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	b004      	add	sp, #16
     a06:	bd80      	pop	{r7, pc}

00000a08 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     a08:	b580      	push	{r7, lr}
     a0a:	b084      	sub	sp, #16
     a0c:	af00      	add	r7, sp, #0
     a0e:	6078      	str	r0, [r7, #4]
     a10:	000a      	movs	r2, r1
     a12:	1cbb      	adds	r3, r7, #2
     a14:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     a16:	687b      	ldr	r3, [r7, #4]
     a18:	681b      	ldr	r3, [r3, #0]
     a1a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	0018      	movs	r0, r3
     a20:	4b0a      	ldr	r3, [pc, #40]	; (a4c <spi_write+0x44>)
     a22:	4798      	blx	r3
     a24:	0003      	movs	r3, r0
     a26:	001a      	movs	r2, r3
     a28:	2301      	movs	r3, #1
     a2a:	4053      	eors	r3, r2
     a2c:	b2db      	uxtb	r3, r3
     a2e:	2b00      	cmp	r3, #0
     a30:	d001      	beq.n	a36 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     a32:	2305      	movs	r3, #5
     a34:	e006      	b.n	a44 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a36:	1cbb      	adds	r3, r7, #2
     a38:	881b      	ldrh	r3, [r3, #0]
     a3a:	05db      	lsls	r3, r3, #23
     a3c:	0dda      	lsrs	r2, r3, #23
     a3e:	68fb      	ldr	r3, [r7, #12]
     a40:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     a42:	2300      	movs	r3, #0
}
     a44:	0018      	movs	r0, r3
     a46:	46bd      	mov	sp, r7
     a48:	b004      	add	sp, #16
     a4a:	bd80      	pop	{r7, pc}
     a4c:	000009e1 	.word	0x000009e1

00000a50 <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
     a50:	b580      	push	{r7, lr}
     a52:	b082      	sub	sp, #8
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
     a58:	000a      	movs	r2, r1
     a5a:	1cfb      	adds	r3, r7, #3
     a5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     a5e:	687b      	ldr	r3, [r7, #4]
     a60:	2237      	movs	r2, #55	; 0x37
     a62:	5c9b      	ldrb	r3, [r3, r2]
     a64:	b25a      	sxtb	r2, r3
     a66:	1cfb      	adds	r3, r7, #3
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	2101      	movs	r1, #1
     a6c:	4099      	lsls	r1, r3
     a6e:	000b      	movs	r3, r1
     a70:	b25b      	sxtb	r3, r3
     a72:	4313      	orrs	r3, r2
     a74:	b25b      	sxtb	r3, r3
     a76:	b2d9      	uxtb	r1, r3
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	2237      	movs	r2, #55	; 0x37
     a7c:	5499      	strb	r1, [r3, r2]
}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	46bd      	mov	sp, r7
     a82:	b002      	add	sp, #8
     a84:	bd80      	pop	{r7, pc}
     a86:	46c0      	nop			; (mov r8, r8)

00000a88 <tm1640_get_state>:
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;
uint8_t wtc_bus_dummy_data[TM1640_GRIDS + 1] = {0};

static tm1640_state_t tm1640_get_state(void)
{    
     a88:	b580      	push	{r7, lr}
     a8a:	b082      	sub	sp, #8
     a8c:	af00      	add	r7, sp, #0
    // State will be updated from an interrupt so disable interrupts
    // to make this interaction atomic.
    tm1640_state_t temp_state;
    NVIC_DisableIRQ(TM1640_IRQ);
     a8e:	200d      	movs	r0, #13
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <tm1640_get_state+0x28>)
     a92:	4798      	blx	r3
    temp_state = tm1640_state;
     a94:	1dfb      	adds	r3, r7, #7
     a96:	4a07      	ldr	r2, [pc, #28]	; (ab4 <tm1640_get_state+0x2c>)
     a98:	7812      	ldrb	r2, [r2, #0]
     a9a:	701a      	strb	r2, [r3, #0]
    NVIC_EnableIRQ(TM1640_IRQ);
     a9c:	200d      	movs	r0, #13
     a9e:	4b06      	ldr	r3, [pc, #24]	; (ab8 <tm1640_get_state+0x30>)
     aa0:	4798      	blx	r3
    return temp_state;
     aa2:	1dfb      	adds	r3, r7, #7
     aa4:	781b      	ldrb	r3, [r3, #0]
}
     aa6:	0018      	movs	r0, r3
     aa8:	46bd      	mov	sp, r7
     aaa:	b002      	add	sp, #8
     aac:	bd80      	pop	{r7, pc}
     aae:	46c0      	nop			; (mov r8, r8)
     ab0:	000008ed 	.word	0x000008ed
     ab4:	200044c4 	.word	0x200044c4
     ab8:	000008c1 	.word	0x000008c1

00000abc <spi_cb_buffer_transmitted>:

static void spi_cb_buffer_transmitted(struct spi_module *const module) 
{
     abc:	b580      	push	{r7, lr}
     abe:	b082      	sub	sp, #8
     ac0:	af00      	add	r7, sp, #0
     ac2:	6078      	str	r0, [r7, #4]
    static BaseType_t wakeTask;

    // This function will be called from an interrupt context
    wakeTask = pdFALSE;
     ac4:	4b31      	ldr	r3, [pc, #196]	; (b8c <spi_cb_buffer_transmitted+0xd0>)
     ac6:	2200      	movs	r2, #0
     ac8:	601a      	str	r2, [r3, #0]
    switch (tm1640_state) {
     aca:	4b31      	ldr	r3, [pc, #196]	; (b90 <spi_cb_buffer_transmitted+0xd4>)
     acc:	781b      	ldrb	r3, [r3, #0]
     ace:	b2db      	uxtb	r3, r3
     ad0:	2b01      	cmp	r3, #1
     ad2:	d002      	beq.n	ada <spi_cb_buffer_transmitted+0x1e>
     ad4:	2b02      	cmp	r3, #2
     ad6:	d020      	beq.n	b1a <spi_cb_buffer_transmitted+0x5e>
     ad8:	e041      	b.n	b5e <spi_cb_buffer_transmitted+0xa2>
    case STATE_SET_DATA:
        tm1640_state = STATE_SET_ADDR;
     ada:	4b2d      	ldr	r3, [pc, #180]	; (b90 <spi_cb_buffer_transmitted+0xd4>)
     adc:	2202      	movs	r2, #2
     ade:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&tm1640_module, &tm1640_display_pkt.set_addr, TM1640_GRIDS + 1);
     ae0:	492c      	ldr	r1, [pc, #176]	; (b94 <spi_cb_buffer_transmitted+0xd8>)
     ae2:	4b2d      	ldr	r3, [pc, #180]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     ae4:	2211      	movs	r2, #17
     ae6:	0018      	movs	r0, r3
     ae8:	4b2c      	ldr	r3, [pc, #176]	; (b9c <spi_cb_buffer_transmitted+0xe0>)
     aea:	4798      	blx	r3
        spi_write_buffer_job(&wtc6508_module, wtc_bus_dummy_data, TM1640_GRIDS + 1);
     aec:	492c      	ldr	r1, [pc, #176]	; (ba0 <spi_cb_buffer_transmitted+0xe4>)
     aee:	4b2d      	ldr	r3, [pc, #180]	; (ba4 <spi_cb_buffer_transmitted+0xe8>)
     af0:	2211      	movs	r2, #17
     af2:	0018      	movs	r0, r3
     af4:	4b29      	ldr	r3, [pc, #164]	; (b9c <spi_cb_buffer_transmitted+0xe0>)
     af6:	4798      	blx	r3
        spi_write(&tm1640_module, (uint16_t) tm1640_display_pkt.set_addr);
     af8:	4b2b      	ldr	r3, [pc, #172]	; (ba8 <spi_cb_buffer_transmitted+0xec>)
     afa:	785b      	ldrb	r3, [r3, #1]
     afc:	b29a      	uxth	r2, r3
     afe:	4b26      	ldr	r3, [pc, #152]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b00:	0011      	movs	r1, r2
     b02:	0018      	movs	r0, r3
     b04:	4b29      	ldr	r3, [pc, #164]	; (bac <spi_cb_buffer_transmitted+0xf0>)
     b06:	4798      	blx	r3
        spi_write(&wtc6508_module, (uint16_t) wtc_bus_dummy_data[0]);
     b08:	4b25      	ldr	r3, [pc, #148]	; (ba0 <spi_cb_buffer_transmitted+0xe4>)
     b0a:	781b      	ldrb	r3, [r3, #0]
     b0c:	b29a      	uxth	r2, r3
     b0e:	4b25      	ldr	r3, [pc, #148]	; (ba4 <spi_cb_buffer_transmitted+0xe8>)
     b10:	0011      	movs	r1, r2
     b12:	0018      	movs	r0, r3
     b14:	4b25      	ldr	r3, [pc, #148]	; (bac <spi_cb_buffer_transmitted+0xf0>)
     b16:	4798      	blx	r3
        break;
     b18:	e02c      	b.n	b74 <spi_cb_buffer_transmitted+0xb8>

    case STATE_SET_ADDR:
        tm1640_state = STATE_CONTROL;
     b1a:	4b1d      	ldr	r3, [pc, #116]	; (b90 <spi_cb_buffer_transmitted+0xd4>)
     b1c:	2203      	movs	r2, #3
     b1e:	701a      	strb	r2, [r3, #0]
                       
        tm1640_module.dir = SPI_DIRECTION_WRITE;
     b20:	4b1d      	ldr	r3, [pc, #116]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b22:	2201      	movs	r2, #1
     b24:	725a      	strb	r2, [r3, #9]
        tm1640_module.hw->SPI.INTFLAG.reg = 0x1F;
     b26:	4b1c      	ldr	r3, [pc, #112]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b28:	681b      	ldr	r3, [r3, #0]
     b2a:	221f      	movs	r2, #31
     b2c:	761a      	strb	r2, [r3, #24]
        tm1640_module.hw->SPI.INTENSET.reg |= SPI_INTERRUPT_FLAG_TX_COMPLETE;
     b2e:	4b1a      	ldr	r3, [pc, #104]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b30:	681a      	ldr	r2, [r3, #0]
     b32:	4b19      	ldr	r3, [pc, #100]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	7d9b      	ldrb	r3, [r3, #22]
     b38:	b2db      	uxtb	r3, r3
     b3a:	2102      	movs	r1, #2
     b3c:	430b      	orrs	r3, r1
     b3e:	b2db      	uxtb	r3, r3
     b40:	7593      	strb	r3, [r2, #22]
        
        spi_write(&tm1640_module, (uint16_t) tm1640_display_pkt.brigtness);
     b42:	4b19      	ldr	r3, [pc, #100]	; (ba8 <spi_cb_buffer_transmitted+0xec>)
     b44:	7c9b      	ldrb	r3, [r3, #18]
     b46:	b29a      	uxth	r2, r3
     b48:	4b13      	ldr	r3, [pc, #76]	; (b98 <spi_cb_buffer_transmitted+0xdc>)
     b4a:	0011      	movs	r1, r2
     b4c:	0018      	movs	r0, r3
     b4e:	4b17      	ldr	r3, [pc, #92]	; (bac <spi_cb_buffer_transmitted+0xf0>)
     b50:	4798      	blx	r3
        spi_write(&wtc6508_module, 0);
     b52:	4b14      	ldr	r3, [pc, #80]	; (ba4 <spi_cb_buffer_transmitted+0xe8>)
     b54:	2100      	movs	r1, #0
     b56:	0018      	movs	r0, r3
     b58:	4b14      	ldr	r3, [pc, #80]	; (bac <spi_cb_buffer_transmitted+0xf0>)
     b5a:	4798      	blx	r3
        break;
     b5c:	e00a      	b.n	b74 <spi_cb_buffer_transmitted+0xb8>

    case STATE_CONTROL:
    default:
        tm1640_state = STATE_IDLE;        
     b5e:	4b0c      	ldr	r3, [pc, #48]	; (b90 <spi_cb_buffer_transmitted+0xd4>)
     b60:	2200      	movs	r2, #0
     b62:	701a      	strb	r2, [r3, #0]
        xSemaphoreGiveFromISR(tm1640_sem, &wakeTask);
     b64:	4b12      	ldr	r3, [pc, #72]	; (bb0 <spi_cb_buffer_transmitted+0xf4>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	4a08      	ldr	r2, [pc, #32]	; (b8c <spi_cb_buffer_transmitted+0xd0>)
     b6a:	0011      	movs	r1, r2
     b6c:	0018      	movs	r0, r3
     b6e:	4b11      	ldr	r3, [pc, #68]	; (bb4 <spi_cb_buffer_transmitted+0xf8>)
     b70:	4798      	blx	r3
        break;
     b72:	46c0      	nop			; (mov r8, r8)
    }

    portYIELD_FROM_ISR(wakeTask);
     b74:	4b05      	ldr	r3, [pc, #20]	; (b8c <spi_cb_buffer_transmitted+0xd0>)
     b76:	681b      	ldr	r3, [r3, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	d003      	beq.n	b84 <spi_cb_buffer_transmitted+0xc8>
     b7c:	4b0e      	ldr	r3, [pc, #56]	; (bb8 <spi_cb_buffer_transmitted+0xfc>)
     b7e:	2280      	movs	r2, #128	; 0x80
     b80:	0552      	lsls	r2, r2, #21
     b82:	601a      	str	r2, [r3, #0]
}
     b84:	46c0      	nop			; (mov r8, r8)
     b86:	46bd      	mov	sp, r7
     b88:	b002      	add	sp, #8
     b8a:	bd80      	pop	{r7, pc}
     b8c:	200000c8 	.word	0x200000c8
     b90:	200044c4 	.word	0x200044c4
     b94:	200044c9 	.word	0x200044c9
     b98:	20004488 	.word	0x20004488
     b9c:	00005cb9 	.word	0x00005cb9
     ba0:	200000b4 	.word	0x200000b4
     ba4:	2000444c 	.word	0x2000444c
     ba8:	200044c8 	.word	0x200044c8
     bac:	00000a09 	.word	0x00000a09
     bb0:	200044e0 	.word	0x200044e0
     bb4:	000088ad 	.word	0x000088ad
     bb8:	e000ed04 	.word	0xe000ed04

00000bbc <spi_cb_error>:

static void spi_cb_error(struct spi_module *const module) 
{
     bbc:	b580      	push	{r7, lr}
     bbe:	b082      	sub	sp, #8
     bc0:	af00      	add	r7, sp, #0
     bc2:	6078      	str	r0, [r7, #4]
    printf("Spi error!\n");
     bc4:	4b02      	ldr	r3, [pc, #8]	; (bd0 <spi_cb_error+0x14>)
     bc6:	0018      	movs	r0, r3
     bc8:	4b02      	ldr	r3, [pc, #8]	; (bd4 <spi_cb_error+0x18>)
     bca:	4798      	blx	r3
    while(1) {}
     bcc:	e7fe      	b.n	bcc <spi_cb_error+0x10>
     bce:	46c0      	nop			; (mov r8, r8)
     bd0:	0000d6a4 	.word	0x0000d6a4
     bd4:	0000c6f9 	.word	0x0000c6f9

00000bd8 <tm1640_init>:
}

void tm1640_init(void)
{
     bd8:	b580      	push	{r7, lr}
     bda:	b08e      	sub	sp, #56	; 0x38
     bdc:	af00      	add	r7, sp, #0
    struct spi_config config;

    config.character_size = SPI_CHARACTER_SIZE_8BIT;
     bde:	003b      	movs	r3, r7
     be0:	2200      	movs	r2, #0
     be2:	741a      	strb	r2, [r3, #16]
    config.data_order = SPI_DATA_ORDER_LSB;
     be4:	003b      	movs	r3, r7
     be6:	2280      	movs	r2, #128	; 0x80
     be8:	05d2      	lsls	r2, r2, #23
     bea:	605a      	str	r2, [r3, #4]
    config.mode = SPI_MODE_MASTER;
     bec:	003b      	movs	r3, r7
     bee:	2201      	movs	r2, #1
     bf0:	701a      	strb	r2, [r3, #0]
    config.transfer_mode = SPI_TRANSFER_MODE_3;
     bf2:	003b      	movs	r3, r7
     bf4:	22c0      	movs	r2, #192	; 0xc0
     bf6:	0592      	lsls	r2, r2, #22
     bf8:	609a      	str	r2, [r3, #8]
    config.select_slave_low_detect_enable = false;
     bfa:	003b      	movs	r3, r7
     bfc:	2200      	movs	r2, #0
     bfe:	74da      	strb	r2, [r3, #19]
#ifndef XPLAINED
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;    
     c00:	003b      	movs	r3, r7
     c02:	2280      	movs	r2, #128	; 0x80
     c04:	0252      	lsls	r2, r2, #9
     c06:	60da      	str	r2, [r3, #12]
#else
    //config.mux_setting = SPI_SIGNAL_MUX_SETTING_O;
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
#endif
    config.receiver_enable = false;
     c08:	003b      	movs	r3, r7
     c0a:	2200      	movs	r2, #0
     c0c:	749a      	strb	r2, [r3, #18]
    config.master_slave_select_enable = false;
     c0e:	003b      	movs	r3, r7
     c10:	2200      	movs	r2, #0
     c12:	751a      	strb	r2, [r3, #20]
    config.run_in_standby = true;
     c14:	003b      	movs	r3, r7
     c16:	2201      	movs	r2, #1
     c18:	745a      	strb	r2, [r3, #17]
    config.mode_specific.master.baudrate = TM1640_BAUD_RATE;    
     c1a:	003b      	movs	r3, r7
     c1c:	4a24      	ldr	r2, [pc, #144]	; (cb0 <tm1640_init+0xd8>)
     c1e:	619a      	str	r2, [r3, #24]
    config.generator_source = GCLK_GENERATOR_4;
     c20:	003b      	movs	r3, r7
     c22:	2224      	movs	r2, #36	; 0x24
     c24:	2104      	movs	r1, #4
     c26:	5499      	strb	r1, [r3, r2]
    config.pinmux_pad0 = TM1640_PINMUX_PAD0;
     c28:	003b      	movs	r3, r7
     c2a:	2201      	movs	r2, #1
     c2c:	4252      	negs	r2, r2
     c2e:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = TM1640_PINMUX_PAD1;
     c30:	003b      	movs	r3, r7
     c32:	2201      	movs	r2, #1
     c34:	4252      	negs	r2, r2
     c36:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = TM1640_PINMUX_PAD2;
     c38:	003b      	movs	r3, r7
     c3a:	4a1e      	ldr	r2, [pc, #120]	; (cb4 <tm1640_init+0xdc>)
     c3c:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = TM1640_PINMUX_PAD3;
     c3e:	003b      	movs	r3, r7
     c40:	2201      	movs	r2, #1
     c42:	4252      	negs	r2, r2
     c44:	635a      	str	r2, [r3, #52]	; 0x34

    if (spi_init(&tm1640_module, TM1640_SERCOM, &config)) {
     c46:	003a      	movs	r2, r7
     c48:	491b      	ldr	r1, [pc, #108]	; (cb8 <tm1640_init+0xe0>)
     c4a:	4b1c      	ldr	r3, [pc, #112]	; (cbc <tm1640_init+0xe4>)
     c4c:	0018      	movs	r0, r3
     c4e:	4b1c      	ldr	r3, [pc, #112]	; (cc0 <tm1640_init+0xe8>)
     c50:	4798      	blx	r3
     c52:	1e03      	subs	r3, r0, #0
     c54:	d004      	beq.n	c60 <tm1640_init+0x88>
        printf("Failed to initialize TM1640_SERCOM!\n");
     c56:	4b1b      	ldr	r3, [pc, #108]	; (cc4 <tm1640_init+0xec>)
     c58:	0018      	movs	r0, r3
     c5a:	4b1b      	ldr	r3, [pc, #108]	; (cc8 <tm1640_init+0xf0>)
     c5c:	4798      	blx	r3
     c5e:	e024      	b.n	caa <tm1640_init+0xd2>
        return;
    }

    spi_register_callback(&tm1640_module, spi_cb_buffer_transmitted, SPI_CALLBACK_BUFFER_TRANSMITTED);      
     c60:	491a      	ldr	r1, [pc, #104]	; (ccc <tm1640_init+0xf4>)
     c62:	4b16      	ldr	r3, [pc, #88]	; (cbc <tm1640_init+0xe4>)
     c64:	2200      	movs	r2, #0
     c66:	0018      	movs	r0, r3
     c68:	4b19      	ldr	r3, [pc, #100]	; (cd0 <tm1640_init+0xf8>)
     c6a:	4798      	blx	r3
    spi_enable_callback(&tm1640_module, SPI_CALLBACK_BUFFER_TRANSMITTED);  
     c6c:	4b13      	ldr	r3, [pc, #76]	; (cbc <tm1640_init+0xe4>)
     c6e:	2100      	movs	r1, #0
     c70:	0018      	movs	r0, r3
     c72:	4b18      	ldr	r3, [pc, #96]	; (cd4 <tm1640_init+0xfc>)
     c74:	4798      	blx	r3
    spi_register_callback(&tm1640_module, spi_cb_error, SPI_CALLBACK_ERROR);    
     c76:	4918      	ldr	r1, [pc, #96]	; (cd8 <tm1640_init+0x100>)
     c78:	4b10      	ldr	r3, [pc, #64]	; (cbc <tm1640_init+0xe4>)
     c7a:	2203      	movs	r2, #3
     c7c:	0018      	movs	r0, r3
     c7e:	4b14      	ldr	r3, [pc, #80]	; (cd0 <tm1640_init+0xf8>)
     c80:	4798      	blx	r3
    spi_enable_callback(&tm1640_module, SPI_CALLBACK_ERROR);
     c82:	4b0e      	ldr	r3, [pc, #56]	; (cbc <tm1640_init+0xe4>)
     c84:	2103      	movs	r1, #3
     c86:	0018      	movs	r0, r3
     c88:	4b12      	ldr	r3, [pc, #72]	; (cd4 <tm1640_init+0xfc>)
     c8a:	4798      	blx	r3

    NVIC_EnableIRQ(TM1640_IRQ);
     c8c:	200d      	movs	r0, #13
     c8e:	4b13      	ldr	r3, [pc, #76]	; (cdc <tm1640_init+0x104>)
     c90:	4798      	blx	r3
    spi_enable(&tm1640_module);
     c92:	4b0a      	ldr	r3, [pc, #40]	; (cbc <tm1640_init+0xe4>)
     c94:	0018      	movs	r0, r3
     c96:	4b12      	ldr	r3, [pc, #72]	; (ce0 <tm1640_init+0x108>)
     c98:	4798      	blx	r3

    tm1640_sem = xSemaphoreCreateBinary();
     c9a:	2203      	movs	r2, #3
     c9c:	2100      	movs	r1, #0
     c9e:	2001      	movs	r0, #1
     ca0:	4b10      	ldr	r3, [pc, #64]	; (ce4 <tm1640_init+0x10c>)
     ca2:	4798      	blx	r3
     ca4:	0002      	movs	r2, r0
     ca6:	4b10      	ldr	r3, [pc, #64]	; (ce8 <tm1640_init+0x110>)
     ca8:	601a      	str	r2, [r3, #0]
}
     caa:	46bd      	mov	sp, r7
     cac:	b00e      	add	sp, #56	; 0x38
     cae:	bd80      	pop	{r7, pc}
     cb0:	00003a98 	.word	0x00003a98
     cb4:	002a0003 	.word	0x002a0003
     cb8:	42001800 	.word	0x42001800
     cbc:	20004488 	.word	0x20004488
     cc0:	00005865 	.word	0x00005865
     cc4:	0000d6b0 	.word	0x0000d6b0
     cc8:	0000c6f9 	.word	0x0000c6f9
     ccc:	00000abd 	.word	0x00000abd
     cd0:	00005c71 	.word	0x00005c71
     cd4:	00000a51 	.word	0x00000a51
     cd8:	00000bbd 	.word	0x00000bbd
     cdc:	000008c1 	.word	0x000008c1
     ce0:	00000991 	.word	0x00000991
     ce4:	00008479 	.word	0x00008479
     ce8:	200044e0 	.word	0x200044e0

00000cec <tm1640_set_display>:

enum status_code tm1640_set_display(tm1640_display_t *disp, tm1640_brightness_t brightness)
{
     cec:	b590      	push	{r4, r7, lr}
     cee:	b087      	sub	sp, #28
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
     cf4:	000a      	movs	r2, r1
     cf6:	1cfb      	adds	r3, r7, #3
     cf8:	701a      	strb	r2, [r3, #0]
    struct system_pinmux_config pin_conf;

    // Transactions have to be broken up into 3 segments because the data and clock need to go high
    // for a period of time between the data command, the address/display data, and the display control.
    // Start off with a single byte transfer and then keep the transaction moving with the callback.
    if (tm1640_get_state() == STATE_IDLE) {
     cfa:	4b4b      	ldr	r3, [pc, #300]	; (e28 <tm1640_set_display+0x13c>)
     cfc:	4798      	blx	r3
     cfe:	1e03      	subs	r3, r0, #0
     d00:	d000      	beq.n	d04 <tm1640_set_display+0x18>
     d02:	e08b      	b.n	e1c <tm1640_set_display+0x130>
        tm1640_state = STATE_SET_DATA;
     d04:	4b49      	ldr	r3, [pc, #292]	; (e2c <tm1640_set_display+0x140>)
     d06:	2201      	movs	r2, #1
     d08:	701a      	strb	r2, [r3, #0]

        memcpy(&tm1640_display_pkt.disp_data, disp->grid, TM1640_GRIDS);
     d0a:	6879      	ldr	r1, [r7, #4]
     d0c:	4b48      	ldr	r3, [pc, #288]	; (e30 <tm1640_set_display+0x144>)
     d0e:	2202      	movs	r2, #2
     d10:	189b      	adds	r3, r3, r2
     d12:	2210      	movs	r2, #16
     d14:	0018      	movs	r0, r3
     d16:	4b47      	ldr	r3, [pc, #284]	; (e34 <tm1640_set_display+0x148>)
     d18:	4798      	blx	r3
        tm1640_display_pkt.set_addr = ADDR_CMD_ADDR0;
     d1a:	4b45      	ldr	r3, [pc, #276]	; (e30 <tm1640_set_display+0x144>)
     d1c:	22c0      	movs	r2, #192	; 0xc0
     d1e:	705a      	strb	r2, [r3, #1]
        tm1640_display_pkt.set_data = DATA_CMD_ADDR_INC;
     d20:	4b43      	ldr	r3, [pc, #268]	; (e30 <tm1640_set_display+0x144>)
     d22:	2240      	movs	r2, #64	; 0x40
     d24:	701a      	strb	r2, [r3, #0]
        tm1640_display_pkt.brigtness = brightness;
     d26:	4b42      	ldr	r3, [pc, #264]	; (e30 <tm1640_set_display+0x144>)
     d28:	1cfa      	adds	r2, r7, #3
     d2a:	7812      	ldrb	r2, [r2, #0]
     d2c:	749a      	strb	r2, [r3, #18]
       
        // Take the display bus mutex
        if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
     d2e:	4b42      	ldr	r3, [pc, #264]	; (e38 <tm1640_set_display+0x14c>)
     d30:	6818      	ldr	r0, [r3, #0]
     d32:	2301      	movs	r3, #1
     d34:	425a      	negs	r2, r3
     d36:	2300      	movs	r3, #0
     d38:	2100      	movs	r1, #0
     d3a:	4c40      	ldr	r4, [pc, #256]	; (e3c <tm1640_set_display+0x150>)
     d3c:	47a0      	blx	r4
     d3e:	1e03      	subs	r3, r0, #0
     d40:	d101      	bne.n	d46 <tm1640_set_display+0x5a>
            // Timeout waiting for semaphore. Just return
            return STATUS_ERR_TIMEOUT;
     d42:	2312      	movs	r3, #18
     d44:	e06b      	b.n	e1e <tm1640_set_display+0x132>
        }

        transfer_complete = 0;
     d46:	4b3e      	ldr	r3, [pc, #248]	; (e40 <tm1640_set_display+0x154>)
     d48:	2200      	movs	r2, #0
     d4a:	701a      	strb	r2, [r3, #0]

        system_pinmux_get_config_defaults(&pin_conf);
     d4c:	230c      	movs	r3, #12
     d4e:	18fb      	adds	r3, r7, r3
     d50:	0018      	movs	r0, r3
     d52:	4b3c      	ldr	r3, [pc, #240]	; (e44 <tm1640_set_display+0x158>)
     d54:	4798      	blx	r3
        pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d56:	230c      	movs	r3, #12
     d58:	18fb      	adds	r3, r7, r3
     d5a:	2200      	movs	r2, #0
     d5c:	705a      	strb	r2, [r3, #1]
        pin_conf.mux_position = PINMUX_PA08C_SERCOM0_PAD0 & 0xFFFF;
     d5e:	230c      	movs	r3, #12
     d60:	18fb      	adds	r3, r7, r3
     d62:	2202      	movs	r2, #2
     d64:	701a      	strb	r2, [r3, #0]

        // Data input pin for the WTC6508 needs to be set to a GPIO so it isn't driven
        // when the clock is generated for the TM1640
        di_conf.direction = PORT_PIN_DIR_INPUT;
     d66:	2310      	movs	r3, #16
     d68:	18fb      	adds	r3, r7, r3
     d6a:	2200      	movs	r2, #0
     d6c:	701a      	strb	r2, [r3, #0]
        di_conf.input_pull = PORT_PIN_PULL_UP;
     d6e:	2310      	movs	r3, #16
     d70:	18fb      	adds	r3, r7, r3
     d72:	2201      	movs	r2, #1
     d74:	705a      	strb	r2, [r3, #1]
        di_conf.powersave = false;
     d76:	2310      	movs	r3, #16
     d78:	18fb      	adds	r3, r7, r3
     d7a:	2200      	movs	r2, #0
     d7c:	709a      	strb	r2, [r3, #2]
        port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
     d7e:	2310      	movs	r3, #16
     d80:	18fb      	adds	r3, r7, r3
     d82:	0019      	movs	r1, r3
     d84:	2008      	movs	r0, #8
     d86:	4b30      	ldr	r3, [pc, #192]	; (e48 <tm1640_set_display+0x15c>)
     d88:	4798      	blx	r3
        
        SercomSpi *const hw = &tm1640_module.hw->SPI;
     d8a:	4b30      	ldr	r3, [pc, #192]	; (e4c <tm1640_set_display+0x160>)
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	617b      	str	r3, [r7, #20]
        hw->INTFLAG.reg = 0x1F;
     d90:	697b      	ldr	r3, [r7, #20]
     d92:	221f      	movs	r2, #31
     d94:	761a      	strb	r2, [r3, #24]
        tm1640_module.dir = SPI_DIRECTION_WRITE;
     d96:	4b2d      	ldr	r3, [pc, #180]	; (e4c <tm1640_set_display+0x160>)
     d98:	2201      	movs	r2, #1
     d9a:	725a      	strb	r2, [r3, #9]
        hw->INTENSET.reg |= SPI_INTERRUPT_FLAG_TX_COMPLETE;                
     d9c:	697b      	ldr	r3, [r7, #20]
     d9e:	7d9b      	ldrb	r3, [r3, #22]
     da0:	b2db      	uxtb	r3, r3
     da2:	2202      	movs	r2, #2
     da4:	4313      	orrs	r3, r2
     da6:	b2da      	uxtb	r2, r3
     da8:	697b      	ldr	r3, [r7, #20]
     daa:	759a      	strb	r2, [r3, #22]

        status = spi_write(&tm1640_module, (uint16_t) tm1640_display_pkt.set_data);
     dac:	4b20      	ldr	r3, [pc, #128]	; (e30 <tm1640_set_display+0x144>)
     dae:	781b      	ldrb	r3, [r3, #0]
     db0:	b29a      	uxth	r2, r3
     db2:	2313      	movs	r3, #19
     db4:	18fc      	adds	r4, r7, r3
     db6:	4b25      	ldr	r3, [pc, #148]	; (e4c <tm1640_set_display+0x160>)
     db8:	0011      	movs	r1, r2
     dba:	0018      	movs	r0, r3
     dbc:	4b24      	ldr	r3, [pc, #144]	; (e50 <tm1640_set_display+0x164>)
     dbe:	4798      	blx	r3
     dc0:	0003      	movs	r3, r0
     dc2:	7023      	strb	r3, [r4, #0]
        spi_write(&wtc6508_module, 0);
     dc4:	4b23      	ldr	r3, [pc, #140]	; (e54 <tm1640_set_display+0x168>)
     dc6:	2100      	movs	r1, #0
     dc8:	0018      	movs	r0, r3
     dca:	4b21      	ldr	r3, [pc, #132]	; (e50 <tm1640_set_display+0x164>)
     dcc:	4798      	blx	r3

        if (!status) {
     dce:	2313      	movs	r3, #19
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	781b      	ldrb	r3, [r3, #0]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d107      	bne.n	de8 <tm1640_set_display+0xfc>
            xSemaphoreTake(tm1640_sem, portMAX_DELAY);
     dd8:	4b1f      	ldr	r3, [pc, #124]	; (e58 <tm1640_set_display+0x16c>)
     dda:	6818      	ldr	r0, [r3, #0]
     ddc:	2301      	movs	r3, #1
     dde:	425a      	negs	r2, r3
     de0:	2300      	movs	r3, #0
     de2:	2100      	movs	r1, #0
     de4:	4c15      	ldr	r4, [pc, #84]	; (e3c <tm1640_set_display+0x150>)
     de6:	47a0      	blx	r4
        }
 
        // Ensure the WTC6508 bus has finished transmitting before giving it up
        while (!(wtc6508_module.hw->SPI.INTFLAG.reg & SPI_INTERRUPT_FLAG_TX_COMPLETE)) {}
     de8:	46c0      	nop			; (mov r8, r8)
     dea:	4b1a      	ldr	r3, [pc, #104]	; (e54 <tm1640_set_display+0x168>)
     dec:	681b      	ldr	r3, [r3, #0]
     dee:	7e1b      	ldrb	r3, [r3, #24]
     df0:	b2db      	uxtb	r3, r3
     df2:	001a      	movs	r2, r3
     df4:	2302      	movs	r3, #2
     df6:	4013      	ands	r3, r2
     df8:	d0f7      	beq.n	dea <tm1640_set_display+0xfe>

        // Restore pin function to the WTC6508 SPI
        system_pinmux_pin_set_config(PINMUX_PA08C_SERCOM0_PAD0 >> 16, &pin_conf);                        
     dfa:	230c      	movs	r3, #12
     dfc:	18fb      	adds	r3, r7, r3
     dfe:	0019      	movs	r1, r3
     e00:	2008      	movs	r0, #8
     e02:	4b16      	ldr	r3, [pc, #88]	; (e5c <tm1640_set_display+0x170>)
     e04:	4798      	blx	r3

        xSemaphoreGive(display_mutex);     
     e06:	4b0c      	ldr	r3, [pc, #48]	; (e38 <tm1640_set_display+0x14c>)
     e08:	6818      	ldr	r0, [r3, #0]
     e0a:	2300      	movs	r3, #0
     e0c:	2200      	movs	r2, #0
     e0e:	2100      	movs	r1, #0
     e10:	4c13      	ldr	r4, [pc, #76]	; (e60 <tm1640_set_display+0x174>)
     e12:	47a0      	blx	r4
        return status;
     e14:	2313      	movs	r3, #19
     e16:	18fb      	adds	r3, r7, r3
     e18:	781b      	ldrb	r3, [r3, #0]
     e1a:	e000      	b.n	e1e <tm1640_set_display+0x132>
    }
    else
        return STATUS_BUSY;
     e1c:	2305      	movs	r3, #5
}
     e1e:	0018      	movs	r0, r3
     e20:	46bd      	mov	sp, r7
     e22:	b007      	add	sp, #28
     e24:	bd90      	pop	{r4, r7, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	00000a89 	.word	0x00000a89
     e2c:	200044c4 	.word	0x200044c4
     e30:	200044c8 	.word	0x200044c8
     e34:	0000c011 	.word	0x0000c011
     e38:	200044dc 	.word	0x200044dc
     e3c:	000089ad 	.word	0x000089ad
     e40:	20000000 	.word	0x20000000
     e44:	0000091d 	.word	0x0000091d
     e48:	00004b29 	.word	0x00004b29
     e4c:	20004488 	.word	0x20004488
     e50:	00000a09 	.word	0x00000a09
     e54:	2000444c 	.word	0x2000444c
     e58:	200044e0 	.word	0x200044e0
     e5c:	00007b99 	.word	0x00007b99
     e60:	000085ad 	.word	0x000085ad

00000e64 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e64:	b580      	push	{r7, lr}
     e66:	b082      	sub	sp, #8
     e68:	af00      	add	r7, sp, #0
     e6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	2280      	movs	r2, #128	; 0x80
     e70:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	2200      	movs	r2, #0
     e76:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e78:	687b      	ldr	r3, [r7, #4]
     e7a:	2201      	movs	r2, #1
     e7c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e7e:	687b      	ldr	r3, [r7, #4]
     e80:	2200      	movs	r2, #0
     e82:	70da      	strb	r2, [r3, #3]
}
     e84:	46c0      	nop			; (mov r8, r8)
     e86:	46bd      	mov	sp, r7
     e88:	b002      	add	sp, #8
     e8a:	bd80      	pop	{r7, pc}

00000e8c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     e8c:	b580      	push	{r7, lr}
     e8e:	b084      	sub	sp, #16
     e90:	af00      	add	r7, sp, #0
     e92:	0002      	movs	r2, r0
     e94:	1dfb      	adds	r3, r7, #7
     e96:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e98:	230f      	movs	r3, #15
     e9a:	18fb      	adds	r3, r7, r3
     e9c:	1dfa      	adds	r2, r7, #7
     e9e:	7812      	ldrb	r2, [r2, #0]
     ea0:	09d2      	lsrs	r2, r2, #7
     ea2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     ea4:	230e      	movs	r3, #14
     ea6:	18fb      	adds	r3, r7, r3
     ea8:	1dfa      	adds	r2, r7, #7
     eaa:	7812      	ldrb	r2, [r2, #0]
     eac:	0952      	lsrs	r2, r2, #5
     eae:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     eb0:	4b0d      	ldr	r3, [pc, #52]	; (ee8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     eb2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     eb4:	230f      	movs	r3, #15
     eb6:	18fb      	adds	r3, r7, r3
     eb8:	781b      	ldrb	r3, [r3, #0]
     eba:	2b00      	cmp	r3, #0
     ebc:	d10f      	bne.n	ede <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     ebe:	230f      	movs	r3, #15
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	781b      	ldrb	r3, [r3, #0]
     ec4:	009b      	lsls	r3, r3, #2
     ec6:	2210      	movs	r2, #16
     ec8:	4694      	mov	ip, r2
     eca:	44bc      	add	ip, r7
     ecc:	4463      	add	r3, ip
     ece:	3b08      	subs	r3, #8
     ed0:	681a      	ldr	r2, [r3, #0]
     ed2:	230e      	movs	r3, #14
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	781b      	ldrb	r3, [r3, #0]
     ed8:	01db      	lsls	r3, r3, #7
     eda:	18d3      	adds	r3, r2, r3
     edc:	e000      	b.n	ee0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     ede:	2300      	movs	r3, #0
	}
}
     ee0:	0018      	movs	r0, r3
     ee2:	46bd      	mov	sp, r7
     ee4:	b004      	add	sp, #16
     ee6:	bd80      	pop	{r7, pc}
     ee8:	41004400 	.word	0x41004400

00000eec <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     eec:	b580      	push	{r7, lr}
     eee:	b082      	sub	sp, #8
     ef0:	af00      	add	r7, sp, #0
     ef2:	0002      	movs	r2, r0
     ef4:	1dfb      	adds	r3, r7, #7
     ef6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ef8:	4b06      	ldr	r3, [pc, #24]	; (f14 <system_interrupt_enable+0x28>)
     efa:	1dfa      	adds	r2, r7, #7
     efc:	7812      	ldrb	r2, [r2, #0]
     efe:	0011      	movs	r1, r2
     f00:	221f      	movs	r2, #31
     f02:	400a      	ands	r2, r1
     f04:	2101      	movs	r1, #1
     f06:	4091      	lsls	r1, r2
     f08:	000a      	movs	r2, r1
     f0a:	601a      	str	r2, [r3, #0]
}
     f0c:	46c0      	nop			; (mov r8, r8)
     f0e:	46bd      	mov	sp, r7
     f10:	b002      	add	sp, #8
     f12:	bd80      	pop	{r7, pc}
     f14:	e000e100 	.word	0xe000e100

00000f18 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     f18:	b580      	push	{r7, lr}
     f1a:	b082      	sub	sp, #8
     f1c:	af00      	add	r7, sp, #0
     f1e:	0002      	movs	r2, r0
     f20:	1dfb      	adds	r3, r7, #7
     f22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     f24:	1dfb      	adds	r3, r7, #7
     f26:	781b      	ldrb	r3, [r3, #0]
     f28:	0018      	movs	r0, r3
     f2a:	4b03      	ldr	r3, [pc, #12]	; (f38 <port_get_group_from_gpio_pin+0x20>)
     f2c:	4798      	blx	r3
     f2e:	0003      	movs	r3, r0
}
     f30:	0018      	movs	r0, r3
     f32:	46bd      	mov	sp, r7
     f34:	b002      	add	sp, #8
     f36:	bd80      	pop	{r7, pc}
     f38:	00000e8d 	.word	0x00000e8d

00000f3c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     f3c:	b580      	push	{r7, lr}
     f3e:	b084      	sub	sp, #16
     f40:	af00      	add	r7, sp, #0
     f42:	0002      	movs	r2, r0
     f44:	1dfb      	adds	r3, r7, #7
     f46:	701a      	strb	r2, [r3, #0]
     f48:	1dbb      	adds	r3, r7, #6
     f4a:	1c0a      	adds	r2, r1, #0
     f4c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     f4e:	1dfb      	adds	r3, r7, #7
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	0018      	movs	r0, r3
     f54:	4b0d      	ldr	r3, [pc, #52]	; (f8c <port_pin_set_output_level+0x50>)
     f56:	4798      	blx	r3
     f58:	0003      	movs	r3, r0
     f5a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     f5c:	1dfb      	adds	r3, r7, #7
     f5e:	781b      	ldrb	r3, [r3, #0]
     f60:	221f      	movs	r2, #31
     f62:	4013      	ands	r3, r2
     f64:	2201      	movs	r2, #1
     f66:	409a      	lsls	r2, r3
     f68:	0013      	movs	r3, r2
     f6a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     f6c:	1dbb      	adds	r3, r7, #6
     f6e:	781b      	ldrb	r3, [r3, #0]
     f70:	2b00      	cmp	r3, #0
     f72:	d003      	beq.n	f7c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     f74:	68fb      	ldr	r3, [r7, #12]
     f76:	68ba      	ldr	r2, [r7, #8]
     f78:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     f7a:	e002      	b.n	f82 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f7c:	68fb      	ldr	r3, [r7, #12]
     f7e:	68ba      	ldr	r2, [r7, #8]
     f80:	615a      	str	r2, [r3, #20]
	}
}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	46bd      	mov	sp, r7
     f86:	b004      	add	sp, #16
     f88:	bd80      	pop	{r7, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00000f19 	.word	0x00000f19

00000f90 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     f90:	b580      	push	{r7, lr}
     f92:	b084      	sub	sp, #16
     f94:	af00      	add	r7, sp, #0
     f96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     f98:	687b      	ldr	r3, [r7, #4]
     f9a:	681b      	ldr	r3, [r3, #0]
     f9c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     f9e:	68fb      	ldr	r3, [r7, #12]
     fa0:	69db      	ldr	r3, [r3, #28]
     fa2:	1e5a      	subs	r2, r3, #1
     fa4:	4193      	sbcs	r3, r2
     fa6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     fa8:	0018      	movs	r0, r3
     faa:	46bd      	mov	sp, r7
     fac:	b004      	add	sp, #16
     fae:	bd80      	pop	{r7, pc}

00000fb0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     fb0:	b580      	push	{r7, lr}
     fb2:	b082      	sub	sp, #8
     fb4:	af00      	add	r7, sp, #0
     fb6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	2201      	movs	r2, #1
     fbc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     fbe:	687b      	ldr	r3, [r7, #4]
     fc0:	2200      	movs	r2, #0
     fc2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     fc4:	687b      	ldr	r3, [r7, #4]
     fc6:	2200      	movs	r2, #0
     fc8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	22c0      	movs	r2, #192	; 0xc0
     fce:	0392      	lsls	r2, r2, #14
     fd0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	2200      	movs	r2, #0
     fd6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     fd8:	687b      	ldr	r3, [r7, #4]
     fda:	2200      	movs	r2, #0
     fdc:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     fde:	687b      	ldr	r3, [r7, #4]
     fe0:	2201      	movs	r2, #1
     fe2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     fe4:	687b      	ldr	r3, [r7, #4]
     fe6:	2201      	movs	r2, #1
     fe8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	2200      	movs	r2, #0
     fee:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     ff0:	687b      	ldr	r3, [r7, #4]
     ff2:	2224      	movs	r2, #36	; 0x24
     ff4:	2100      	movs	r1, #0
     ff6:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	3318      	adds	r3, #24
     ffc:	220c      	movs	r2, #12
     ffe:	2100      	movs	r1, #0
    1000:	0018      	movs	r0, r3
    1002:	4b0a      	ldr	r3, [pc, #40]	; (102c <spi_get_config_defaults+0x7c>)
    1004:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1006:	687b      	ldr	r3, [r7, #4]
    1008:	4a09      	ldr	r2, [pc, #36]	; (1030 <spi_get_config_defaults+0x80>)
    100a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	2200      	movs	r2, #0
    1010:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1012:	687b      	ldr	r3, [r7, #4]
    1014:	2200      	movs	r2, #0
    1016:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	2200      	movs	r2, #0
    101c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    101e:	687b      	ldr	r3, [r7, #4]
    1020:	2200      	movs	r2, #0
    1022:	635a      	str	r2, [r3, #52]	; 0x34

};
    1024:	46c0      	nop			; (mov r8, r8)
    1026:	46bd      	mov	sp, r7
    1028:	b002      	add	sp, #8
    102a:	bd80      	pop	{r7, pc}
    102c:	0000c023 	.word	0x0000c023
    1030:	000186a0 	.word	0x000186a0

00001034 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1034:	b580      	push	{r7, lr}
    1036:	b084      	sub	sp, #16
    1038:	af00      	add	r7, sp, #0
    103a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	681b      	ldr	r3, [r3, #0]
    1040:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	0018      	movs	r0, r3
    1048:	4b0b      	ldr	r3, [pc, #44]	; (1078 <spi_enable+0x44>)
    104a:	4798      	blx	r3
    104c:	0003      	movs	r3, r0
    104e:	0018      	movs	r0, r3
    1050:	4b0a      	ldr	r3, [pc, #40]	; (107c <spi_enable+0x48>)
    1052:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1054:	46c0      	nop			; (mov r8, r8)
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	0018      	movs	r0, r3
    105a:	4b09      	ldr	r3, [pc, #36]	; (1080 <spi_enable+0x4c>)
    105c:	4798      	blx	r3
    105e:	1e03      	subs	r3, r0, #0
    1060:	d1f9      	bne.n	1056 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	681b      	ldr	r3, [r3, #0]
    1066:	2202      	movs	r2, #2
    1068:	431a      	orrs	r2, r3
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	601a      	str	r2, [r3, #0]
}
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	46bd      	mov	sp, r7
    1072:	b004      	add	sp, #16
    1074:	bd80      	pop	{r7, pc}
    1076:	46c0      	nop			; (mov r8, r8)
    1078:	000052c5 	.word	0x000052c5
    107c:	00000eed 	.word	0x00000eed
    1080:	00000f91 	.word	0x00000f91

00001084 <wtc6508_init>:
#define DISPLAY_MUTEX_TIMEOUT     pdMS_TO_TICKS(5)

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
    1084:	b580      	push	{r7, lr}
    1086:	b08e      	sub	sp, #56	; 0x38
    1088:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
    108a:	003b      	movs	r3, r7
    108c:	0018      	movs	r0, r3
    108e:	4b1c      	ldr	r3, [pc, #112]	; (1100 <wtc6508_init+0x7c>)
    1090:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
    1092:	003b      	movs	r3, r7
    1094:	4a1b      	ldr	r2, [pc, #108]	; (1104 <wtc6508_init+0x80>)
    1096:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
    1098:	003b      	movs	r3, r7
    109a:	4a1b      	ldr	r2, [pc, #108]	; (1108 <wtc6508_init+0x84>)
    109c:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
    109e:	003b      	movs	r3, r7
    10a0:	2201      	movs	r2, #1
    10a2:	4252      	negs	r2, r2
    10a4:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
    10a6:	003b      	movs	r3, r7
    10a8:	2201      	movs	r2, #1
    10aa:	4252      	negs	r2, r2
    10ac:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    10ae:	003b      	movs	r3, r7
    10b0:	2280      	movs	r2, #128	; 0x80
    10b2:	0292      	lsls	r2, r2, #10
    10b4:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
    10b6:	003b      	movs	r3, r7
    10b8:	2200      	movs	r2, #0
    10ba:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
    10bc:	003b      	movs	r3, r7
    10be:	4a13      	ldr	r2, [pc, #76]	; (110c <wtc6508_init+0x88>)
    10c0:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
    10c2:	003b      	movs	r3, r7
    10c4:	22c0      	movs	r2, #192	; 0xc0
    10c6:	0592      	lsls	r2, r2, #22
    10c8:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
    10ca:	003b      	movs	r3, r7
    10cc:	2224      	movs	r2, #36	; 0x24
    10ce:	2104      	movs	r1, #4
    10d0:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
    10d2:	003b      	movs	r3, r7
    10d4:	2200      	movs	r2, #0
    10d6:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
    10d8:	003a      	movs	r2, r7
    10da:	490d      	ldr	r1, [pc, #52]	; (1110 <wtc6508_init+0x8c>)
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <wtc6508_init+0x90>)
    10de:	0018      	movs	r0, r3
    10e0:	4b0d      	ldr	r3, [pc, #52]	; (1118 <wtc6508_init+0x94>)
    10e2:	4798      	blx	r3
    10e4:	1e03      	subs	r3, r0, #0
    10e6:	d004      	beq.n	10f2 <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
    10e8:	4b0c      	ldr	r3, [pc, #48]	; (111c <wtc6508_init+0x98>)
    10ea:	0018      	movs	r0, r3
    10ec:	4b0c      	ldr	r3, [pc, #48]	; (1120 <wtc6508_init+0x9c>)
    10ee:	4798      	blx	r3
    10f0:	e003      	b.n	10fa <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <wtc6508_init+0x90>)
    10f4:	0018      	movs	r0, r3
    10f6:	4b0b      	ldr	r3, [pc, #44]	; (1124 <wtc6508_init+0xa0>)
    10f8:	4798      	blx	r3
}
    10fa:	46bd      	mov	sp, r7
    10fc:	b00e      	add	sp, #56	; 0x38
    10fe:	bd80      	pop	{r7, pc}
    1100:	00000fb1 	.word	0x00000fb1
    1104:	00080002 	.word	0x00080002
    1108:	00090002 	.word	0x00090002
    110c:	00003a98 	.word	0x00003a98
    1110:	42000800 	.word	0x42000800
    1114:	2000444c 	.word	0x2000444c
    1118:	00005865 	.word	0x00005865
    111c:	0000d6d4 	.word	0x0000d6d4
    1120:	0000c6f9 	.word	0x0000c6f9
    1124:	00001035 	.word	0x00001035

00001128 <delay_us_nop>:

static void delay_us_nop(uint32_t us_delay)
{
    1128:	b580      	push	{r7, lr}
    112a:	b084      	sub	sp, #16
    112c:	af00      	add	r7, sp, #0
    112e:	6078      	str	r0, [r7, #4]
    uint32_t delay_ticks = us_delay * N_NOP_PER_US;
    1130:	687a      	ldr	r2, [r7, #4]
    1132:	0013      	movs	r3, r2
    1134:	005b      	lsls	r3, r3, #1
    1136:	189b      	adds	r3, r3, r2
    1138:	011b      	lsls	r3, r3, #4
    113a:	60fb      	str	r3, [r7, #12]

    while (delay_ticks-- > 0) {
    113c:	e000      	b.n	1140 <delay_us_nop+0x18>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	68fb      	ldr	r3, [r7, #12]
    1142:	1e5a      	subs	r2, r3, #1
    1144:	60fa      	str	r2, [r7, #12]
    1146:	2b00      	cmp	r3, #0
    1148:	d1f9      	bne.n	113e <delay_us_nop+0x16>
        nop();
    }
}
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	46bd      	mov	sp, r7
    114e:	b004      	add	sp, #16
    1150:	bd80      	pop	{r7, pc}
    1152:	46c0      	nop			; (mov r8, r8)

00001154 <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
    1154:	b5b0      	push	{r4, r5, r7, lr}
    1156:	b086      	sub	sp, #24
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
    115c:	2310      	movs	r3, #16
    115e:	18fb      	adds	r3, r7, r3
    1160:	2201      	movs	r2, #1
    1162:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
    1164:	2310      	movs	r3, #16
    1166:	18fb      	adds	r3, r7, r3
    1168:	2201      	movs	r2, #1
    116a:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
    116c:	2310      	movs	r3, #16
    116e:	18fb      	adds	r3, r7, r3
    1170:	2200      	movs	r2, #0
    1172:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
    1174:	2314      	movs	r3, #20
    1176:	18fb      	adds	r3, r7, r3
    1178:	2200      	movs	r2, #0
    117a:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    117c:	2314      	movs	r3, #20
    117e:	18fb      	adds	r3, r7, r3
    1180:	2201      	movs	r2, #1
    1182:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    1184:	2314      	movs	r3, #20
    1186:	18fb      	adds	r3, r7, r3
    1188:	2200      	movs	r2, #0
    118a:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
    118c:	230c      	movs	r3, #12
    118e:	18fb      	adds	r3, r7, r3
    1190:	0018      	movs	r0, r3
    1192:	4b42      	ldr	r3, [pc, #264]	; (129c <wtc6508_read+0x148>)
    1194:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1196:	230c      	movs	r3, #12
    1198:	18fb      	adds	r3, r7, r3
    119a:	2200      	movs	r2, #0
    119c:	705a      	strb	r2, [r3, #1]

    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    119e:	4b40      	ldr	r3, [pc, #256]	; (12a0 <wtc6508_read+0x14c>)
    11a0:	6818      	ldr	r0, [r3, #0]
    11a2:	2301      	movs	r3, #1
    11a4:	425a      	negs	r2, r3
    11a6:	2300      	movs	r3, #0
    11a8:	2100      	movs	r1, #0
    11aa:	4c3e      	ldr	r4, [pc, #248]	; (12a4 <wtc6508_read+0x150>)
    11ac:	47a0      	blx	r4
    11ae:	1e03      	subs	r3, r0, #0
    11b0:	d101      	bne.n	11b6 <wtc6508_read+0x62>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    11b2:	2312      	movs	r3, #18
    11b4:	e06d      	b.n	1292 <wtc6508_read+0x13e>
    }

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    vTaskSuspendAll();
    11b6:	4b3c      	ldr	r3, [pc, #240]	; (12a8 <wtc6508_read+0x154>)
    11b8:	4798      	blx	r3

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    11ba:	2310      	movs	r3, #16
    11bc:	18fb      	adds	r3, r7, r3
    11be:	0019      	movs	r1, r3
    11c0:	2009      	movs	r0, #9
    11c2:	4b3a      	ldr	r3, [pc, #232]	; (12ac <wtc6508_read+0x158>)
    11c4:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    11c6:	2314      	movs	r3, #20
    11c8:	18fb      	adds	r3, r7, r3
    11ca:	0019      	movs	r1, r3
    11cc:	2008      	movs	r0, #8
    11ce:	4b37      	ldr	r3, [pc, #220]	; (12ac <wtc6508_read+0x158>)
    11d0:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
    11d2:	2100      	movs	r1, #0
    11d4:	2009      	movs	r0, #9
    11d6:	4b36      	ldr	r3, [pc, #216]	; (12b0 <wtc6508_read+0x15c>)
    11d8:	4798      	blx	r3
    delay_us_nop(3);
    11da:	2003      	movs	r0, #3
    11dc:	4b35      	ldr	r3, [pc, #212]	; (12b4 <wtc6508_read+0x160>)
    11de:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);        
    11e0:	2101      	movs	r1, #1
    11e2:	2009      	movs	r0, #9
    11e4:	4b32      	ldr	r3, [pc, #200]	; (12b0 <wtc6508_read+0x15c>)
    11e6:	4798      	blx	r3

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    11e8:	230c      	movs	r3, #12
    11ea:	18fb      	adds	r3, r7, r3
    11ec:	2202      	movs	r2, #2
    11ee:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    11f0:	230c      	movs	r3, #12
    11f2:	18fb      	adds	r3, r7, r3
    11f4:	0019      	movs	r1, r3
    11f6:	2008      	movs	r0, #8
    11f8:	4b2f      	ldr	r3, [pc, #188]	; (12b8 <wtc6508_read+0x164>)
    11fa:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    11fc:	230c      	movs	r3, #12
    11fe:	18fb      	adds	r3, r7, r3
    1200:	2202      	movs	r2, #2
    1202:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
    1204:	230c      	movs	r3, #12
    1206:	18fb      	adds	r3, r7, r3
    1208:	0019      	movs	r1, r3
    120a:	2009      	movs	r0, #9
    120c:	4b2a      	ldr	r3, [pc, #168]	; (12b8 <wtc6508_read+0x164>)
    120e:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
    1210:	2317      	movs	r3, #23
    1212:	18fc      	adds	r4, r7, r3
    1214:	6879      	ldr	r1, [r7, #4]
    1216:	4829      	ldr	r0, [pc, #164]	; (12bc <wtc6508_read+0x168>)
    1218:	2300      	movs	r3, #0
    121a:	2201      	movs	r2, #1
    121c:	4d28      	ldr	r5, [pc, #160]	; (12c0 <wtc6508_read+0x16c>)
    121e:	47a8      	blx	r5
    1220:	0003      	movs	r3, r0
    1222:	7023      	strb	r3, [r4, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    1224:	2310      	movs	r3, #16
    1226:	18fb      	adds	r3, r7, r3
    1228:	0019      	movs	r1, r3
    122a:	2009      	movs	r0, #9
    122c:	4b1f      	ldr	r3, [pc, #124]	; (12ac <wtc6508_read+0x158>)
    122e:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1230:	2314      	movs	r3, #20
    1232:	18fb      	adds	r3, r7, r3
    1234:	0019      	movs	r1, r3
    1236:	2008      	movs	r0, #8
    1238:	4b1c      	ldr	r3, [pc, #112]	; (12ac <wtc6508_read+0x158>)
    123a:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
    123c:	2100      	movs	r1, #0
    123e:	2009      	movs	r0, #9
    1240:	4b1b      	ldr	r3, [pc, #108]	; (12b0 <wtc6508_read+0x15c>)
    1242:	4798      	blx	r3
    delay_us_nop(3);
    1244:	2003      	movs	r0, #3
    1246:	4b1b      	ldr	r3, [pc, #108]	; (12b4 <wtc6508_read+0x160>)
    1248:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
    124a:	2101      	movs	r1, #1
    124c:	2009      	movs	r0, #9
    124e:	4b18      	ldr	r3, [pc, #96]	; (12b0 <wtc6508_read+0x15c>)
    1250:	4798      	blx	r3

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    1252:	230c      	movs	r3, #12
    1254:	18fb      	adds	r3, r7, r3
    1256:	2202      	movs	r2, #2
    1258:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    125a:	230c      	movs	r3, #12
    125c:	18fb      	adds	r3, r7, r3
    125e:	0019      	movs	r1, r3
    1260:	2008      	movs	r0, #8
    1262:	4b15      	ldr	r3, [pc, #84]	; (12b8 <wtc6508_read+0x164>)
    1264:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    1266:	230c      	movs	r3, #12
    1268:	18fb      	adds	r3, r7, r3
    126a:	2202      	movs	r2, #2
    126c:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);        
    126e:	230c      	movs	r3, #12
    1270:	18fb      	adds	r3, r7, r3
    1272:	0019      	movs	r1, r3
    1274:	2009      	movs	r0, #9
    1276:	4b10      	ldr	r3, [pc, #64]	; (12b8 <wtc6508_read+0x164>)
    1278:	4798      	blx	r3

    xTaskResumeAll();
    127a:	4b12      	ldr	r3, [pc, #72]	; (12c4 <wtc6508_read+0x170>)
    127c:	4798      	blx	r3

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
    127e:	4b08      	ldr	r3, [pc, #32]	; (12a0 <wtc6508_read+0x14c>)
    1280:	6818      	ldr	r0, [r3, #0]
    1282:	2300      	movs	r3, #0
    1284:	2200      	movs	r2, #0
    1286:	2100      	movs	r1, #0
    1288:	4c0f      	ldr	r4, [pc, #60]	; (12c8 <wtc6508_read+0x174>)
    128a:	47a0      	blx	r4

    return ret;
    128c:	2317      	movs	r3, #23
    128e:	18fb      	adds	r3, r7, r3
    1290:	781b      	ldrb	r3, [r3, #0]
}
    1292:	0018      	movs	r0, r3
    1294:	46bd      	mov	sp, r7
    1296:	b006      	add	sp, #24
    1298:	bdb0      	pop	{r4, r5, r7, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	00000e65 	.word	0x00000e65
    12a0:	200044dc 	.word	0x200044dc
    12a4:	000089ad 	.word	0x000089ad
    12a8:	00009371 	.word	0x00009371
    12ac:	00004b29 	.word	0x00004b29
    12b0:	00000f3d 	.word	0x00000f3d
    12b4:	00001129 	.word	0x00001129
    12b8:	00007b99 	.word	0x00007b99
    12bc:	2000444c 	.word	0x2000444c
    12c0:	000059f5 	.word	0x000059f5
    12c4:	00009389 	.word	0x00009389
    12c8:	000085ad 	.word	0x000085ad

000012cc <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    12cc:	b580      	push	{r7, lr}
    12ce:	b082      	sub	sp, #8
    12d0:	af00      	add	r7, sp, #0
    12d2:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    12d4:	687b      	ldr	r3, [r7, #4]
    12d6:	2b00      	cmp	r3, #0
    12d8:	d00c      	beq.n	12f4 <delay_cycles+0x28>
		SysTick->LOAD = n;
    12da:	4b08      	ldr	r3, [pc, #32]	; (12fc <delay_cycles+0x30>)
    12dc:	687a      	ldr	r2, [r7, #4]
    12de:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    12e0:	4b06      	ldr	r3, [pc, #24]	; (12fc <delay_cycles+0x30>)
    12e2:	2200      	movs	r2, #0
    12e4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    12e6:	46c0      	nop			; (mov r8, r8)
    12e8:	4b04      	ldr	r3, [pc, #16]	; (12fc <delay_cycles+0x30>)
    12ea:	681a      	ldr	r2, [r3, #0]
    12ec:	2380      	movs	r3, #128	; 0x80
    12ee:	025b      	lsls	r3, r3, #9
    12f0:	4013      	ands	r3, r2
    12f2:	d0f9      	beq.n	12e8 <delay_cycles+0x1c>
		};
	}
}
    12f4:	46c0      	nop			; (mov r8, r8)
    12f6:	46bd      	mov	sp, r7
    12f8:	b002      	add	sp, #8
    12fa:	bd80      	pop	{r7, pc}
    12fc:	e000e010 	.word	0xe000e010

00001300 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    1300:	b580      	push	{r7, lr}
    1302:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
    1304:	2000      	movs	r0, #0
    1306:	4b0f      	ldr	r3, [pc, #60]	; (1344 <delay_init+0x44>)
    1308:	4798      	blx	r3
    130a:	0002      	movs	r2, r0
    130c:	4b0e      	ldr	r3, [pc, #56]	; (1348 <delay_init+0x48>)
    130e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    1310:	4b0d      	ldr	r3, [pc, #52]	; (1348 <delay_init+0x48>)
    1312:	6818      	ldr	r0, [r3, #0]
    1314:	4b0d      	ldr	r3, [pc, #52]	; (134c <delay_init+0x4c>)
    1316:	22fa      	movs	r2, #250	; 0xfa
    1318:	0091      	lsls	r1, r2, #2
    131a:	4798      	blx	r3
    131c:	0003      	movs	r3, r0
    131e:	001a      	movs	r2, r3
    1320:	4b09      	ldr	r3, [pc, #36]	; (1348 <delay_init+0x48>)
    1322:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    1324:	4b08      	ldr	r3, [pc, #32]	; (1348 <delay_init+0x48>)
    1326:	6818      	ldr	r0, [r3, #0]
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <delay_init+0x4c>)
    132a:	22fa      	movs	r2, #250	; 0xfa
    132c:	0091      	lsls	r1, r2, #2
    132e:	4798      	blx	r3
    1330:	0003      	movs	r3, r0
    1332:	001a      	movs	r2, r3
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <delay_init+0x50>)
    1336:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1338:	4b06      	ldr	r3, [pc, #24]	; (1354 <delay_init+0x54>)
    133a:	2205      	movs	r2, #5
    133c:	601a      	str	r2, [r3, #0]
}
    133e:	46c0      	nop			; (mov r8, r8)
    1340:	46bd      	mov	sp, r7
    1342:	bd80      	pop	{r7, pc}
    1344:	000077d5 	.word	0x000077d5
    1348:	20000004 	.word	0x20000004
    134c:	0000b685 	.word	0x0000b685
    1350:	20000008 	.word	0x20000008
    1354:	e000e010 	.word	0xe000e010

00001358 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1358:	b580      	push	{r7, lr}
    135a:	b082      	sub	sp, #8
    135c:	af00      	add	r7, sp, #0
    135e:	6078      	str	r0, [r7, #4]
	while (n--) {
    1360:	e004      	b.n	136c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1362:	4b07      	ldr	r3, [pc, #28]	; (1380 <delay_cycles_ms+0x28>)
    1364:	681b      	ldr	r3, [r3, #0]
    1366:	0018      	movs	r0, r3
    1368:	4b06      	ldr	r3, [pc, #24]	; (1384 <delay_cycles_ms+0x2c>)
    136a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	1e5a      	subs	r2, r3, #1
    1370:	607a      	str	r2, [r7, #4]
    1372:	2b00      	cmp	r3, #0
    1374:	d1f5      	bne.n	1362 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46bd      	mov	sp, r7
    137a:	b002      	add	sp, #8
    137c:	bd80      	pop	{r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	20000004 	.word	0x20000004
    1384:	000012cd 	.word	0x000012cd

00001388 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1388:	b580      	push	{r7, lr}
    138a:	b084      	sub	sp, #16
    138c:	af00      	add	r7, sp, #0
    138e:	0002      	movs	r2, r0
    1390:	1dfb      	adds	r3, r7, #7
    1392:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1394:	230f      	movs	r3, #15
    1396:	18fb      	adds	r3, r7, r3
    1398:	1dfa      	adds	r2, r7, #7
    139a:	7812      	ldrb	r2, [r2, #0]
    139c:	09d2      	lsrs	r2, r2, #7
    139e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13a0:	230e      	movs	r3, #14
    13a2:	18fb      	adds	r3, r7, r3
    13a4:	1dfa      	adds	r2, r7, #7
    13a6:	7812      	ldrb	r2, [r2, #0]
    13a8:	0952      	lsrs	r2, r2, #5
    13aa:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13ac:	4b0d      	ldr	r3, [pc, #52]	; (13e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13ae:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    13b0:	230f      	movs	r3, #15
    13b2:	18fb      	adds	r3, r7, r3
    13b4:	781b      	ldrb	r3, [r3, #0]
    13b6:	2b00      	cmp	r3, #0
    13b8:	d10f      	bne.n	13da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    13ba:	230f      	movs	r3, #15
    13bc:	18fb      	adds	r3, r7, r3
    13be:	781b      	ldrb	r3, [r3, #0]
    13c0:	009b      	lsls	r3, r3, #2
    13c2:	2210      	movs	r2, #16
    13c4:	4694      	mov	ip, r2
    13c6:	44bc      	add	ip, r7
    13c8:	4463      	add	r3, ip
    13ca:	3b08      	subs	r3, #8
    13cc:	681a      	ldr	r2, [r3, #0]
    13ce:	230e      	movs	r3, #14
    13d0:	18fb      	adds	r3, r7, r3
    13d2:	781b      	ldrb	r3, [r3, #0]
    13d4:	01db      	lsls	r3, r3, #7
    13d6:	18d3      	adds	r3, r2, r3
    13d8:	e000      	b.n	13dc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    13da:	2300      	movs	r3, #0
	}
}
    13dc:	0018      	movs	r0, r3
    13de:	46bd      	mov	sp, r7
    13e0:	b004      	add	sp, #16
    13e2:	bd80      	pop	{r7, pc}
    13e4:	41004400 	.word	0x41004400

000013e8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    13ec:	4b04      	ldr	r3, [pc, #16]	; (1400 <system_interrupt_enable_global+0x18>)
    13ee:	2201      	movs	r2, #1
    13f0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    13f2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    13f6:	b662      	cpsie	i
}
    13f8:	46c0      	nop			; (mov r8, r8)
    13fa:	46bd      	mov	sp, r7
    13fc:	bd80      	pop	{r7, pc}
    13fe:	46c0      	nop			; (mov r8, r8)
    1400:	20000014 	.word	0x20000014

00001404 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1404:	b580      	push	{r7, lr}
    1406:	b082      	sub	sp, #8
    1408:	af00      	add	r7, sp, #0
    140a:	0002      	movs	r2, r0
    140c:	1dfb      	adds	r3, r7, #7
    140e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1410:	1dfb      	adds	r3, r7, #7
    1412:	781b      	ldrb	r3, [r3, #0]
    1414:	0018      	movs	r0, r3
    1416:	4b03      	ldr	r3, [pc, #12]	; (1424 <port_get_group_from_gpio_pin+0x20>)
    1418:	4798      	blx	r3
    141a:	0003      	movs	r3, r0
}
    141c:	0018      	movs	r0, r3
    141e:	46bd      	mov	sp, r7
    1420:	b002      	add	sp, #8
    1422:	bd80      	pop	{r7, pc}
    1424:	00001389 	.word	0x00001389

00001428 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1428:	b580      	push	{r7, lr}
    142a:	b082      	sub	sp, #8
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1430:	687b      	ldr	r3, [r7, #4]
    1432:	2200      	movs	r2, #0
    1434:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1436:	687b      	ldr	r3, [r7, #4]
    1438:	2201      	movs	r2, #1
    143a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    143c:	687b      	ldr	r3, [r7, #4]
    143e:	2200      	movs	r2, #0
    1440:	709a      	strb	r2, [r3, #2]
}
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	46bd      	mov	sp, r7
    1446:	b002      	add	sp, #8
    1448:	bd80      	pop	{r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)

0000144c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    144c:	b580      	push	{r7, lr}
    144e:	b084      	sub	sp, #16
    1450:	af00      	add	r7, sp, #0
    1452:	0002      	movs	r2, r0
    1454:	1dfb      	adds	r3, r7, #7
    1456:	701a      	strb	r2, [r3, #0]
    1458:	1dbb      	adds	r3, r7, #6
    145a:	1c0a      	adds	r2, r1, #0
    145c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    145e:	1dfb      	adds	r3, r7, #7
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	0018      	movs	r0, r3
    1464:	4b0d      	ldr	r3, [pc, #52]	; (149c <port_pin_set_output_level+0x50>)
    1466:	4798      	blx	r3
    1468:	0003      	movs	r3, r0
    146a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    146c:	1dfb      	adds	r3, r7, #7
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	221f      	movs	r2, #31
    1472:	4013      	ands	r3, r2
    1474:	2201      	movs	r2, #1
    1476:	409a      	lsls	r2, r3
    1478:	0013      	movs	r3, r2
    147a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    147c:	1dbb      	adds	r3, r7, #6
    147e:	781b      	ldrb	r3, [r3, #0]
    1480:	2b00      	cmp	r3, #0
    1482:	d003      	beq.n	148c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1484:	68fb      	ldr	r3, [r7, #12]
    1486:	68ba      	ldr	r2, [r7, #8]
    1488:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    148a:	e002      	b.n	1492 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	68ba      	ldr	r2, [r7, #8]
    1490:	615a      	str	r2, [r3, #20]
	}
}
    1492:	46c0      	nop			; (mov r8, r8)
    1494:	46bd      	mov	sp, r7
    1496:	b004      	add	sp, #16
    1498:	bd80      	pop	{r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00001405 	.word	0x00001405

000014a0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    14a0:	b580      	push	{r7, lr}
    14a2:	b082      	sub	sp, #8
    14a4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    14a6:	1d3b      	adds	r3, r7, #4
    14a8:	0018      	movs	r0, r3
    14aa:	4b0c      	ldr	r3, [pc, #48]	; (14dc <init_chip_pins+0x3c>)
    14ac:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    14ae:	1d3b      	adds	r3, r7, #4
    14b0:	2201      	movs	r2, #1
    14b2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    14b4:	1d3b      	adds	r3, r7, #4
    14b6:	0019      	movs	r1, r3
    14b8:	201b      	movs	r0, #27
    14ba:	4b09      	ldr	r3, [pc, #36]	; (14e0 <init_chip_pins+0x40>)
    14bc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    14be:	1d3b      	adds	r3, r7, #4
    14c0:	0019      	movs	r1, r3
    14c2:	201c      	movs	r0, #28
    14c4:	4b06      	ldr	r3, [pc, #24]	; (14e0 <init_chip_pins+0x40>)
    14c6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    14c8:	1d3b      	adds	r3, r7, #4
    14ca:	0019      	movs	r1, r3
    14cc:	2028      	movs	r0, #40	; 0x28
    14ce:	4b04      	ldr	r3, [pc, #16]	; (14e0 <init_chip_pins+0x40>)
    14d0:	4798      	blx	r3
}
    14d2:	46c0      	nop			; (mov r8, r8)
    14d4:	46bd      	mov	sp, r7
    14d6:	b002      	add	sp, #8
    14d8:	bd80      	pop	{r7, pc}
    14da:	46c0      	nop			; (mov r8, r8)
    14dc:	00001429 	.word	0x00001429
    14e0:	00004b29 	.word	0x00004b29

000014e4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    14e8:	4b0c      	ldr	r3, [pc, #48]	; (151c <nm_bsp_init+0x38>)
    14ea:	2200      	movs	r2, #0
    14ec:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    14ee:	4b0c      	ldr	r3, [pc, #48]	; (1520 <nm_bsp_init+0x3c>)
    14f0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    14f2:	4b0c      	ldr	r3, [pc, #48]	; (1524 <nm_bsp_init+0x40>)
    14f4:	681b      	ldr	r3, [r3, #0]
    14f6:	2201      	movs	r2, #1
    14f8:	4013      	ands	r3, r2
    14fa:	d004      	beq.n	1506 <nm_bsp_init+0x22>
    14fc:	4b09      	ldr	r3, [pc, #36]	; (1524 <nm_bsp_init+0x40>)
    14fe:	681b      	ldr	r3, [r3, #0]
    1500:	2202      	movs	r2, #2
    1502:	4013      	ands	r3, r2
    1504:	d101      	bne.n	150a <nm_bsp_init+0x26>
	    delay_init();
    1506:	4b08      	ldr	r3, [pc, #32]	; (1528 <nm_bsp_init+0x44>)
    1508:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    150a:	4b08      	ldr	r3, [pc, #32]	; (152c <nm_bsp_init+0x48>)
    150c:	4798      	blx	r3

	system_interrupt_enable_global();
    150e:	4b08      	ldr	r3, [pc, #32]	; (1530 <nm_bsp_init+0x4c>)
    1510:	4798      	blx	r3

	return M2M_SUCCESS;
    1512:	2300      	movs	r3, #0
}
    1514:	0018      	movs	r0, r3
    1516:	46bd      	mov	sp, r7
    1518:	bd80      	pop	{r7, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	200000cc 	.word	0x200000cc
    1520:	000014a1 	.word	0x000014a1
    1524:	e000e010 	.word	0xe000e010
    1528:	00001301 	.word	0x00001301
    152c:	00001535 	.word	0x00001535
    1530:	000013e9 	.word	0x000013e9

00001534 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    1534:	b580      	push	{r7, lr}
    1536:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    1538:	2100      	movs	r1, #0
    153a:	201c      	movs	r0, #28
    153c:	4b0c      	ldr	r3, [pc, #48]	; (1570 <nm_bsp_reset+0x3c>)
    153e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    1540:	2100      	movs	r1, #0
    1542:	201b      	movs	r0, #27
    1544:	4b0a      	ldr	r3, [pc, #40]	; (1570 <nm_bsp_reset+0x3c>)
    1546:	4798      	blx	r3
	nm_bsp_sleep(100);
    1548:	2064      	movs	r0, #100	; 0x64
    154a:	4b0a      	ldr	r3, [pc, #40]	; (1574 <nm_bsp_reset+0x40>)
    154c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    154e:	2101      	movs	r1, #1
    1550:	201c      	movs	r0, #28
    1552:	4b07      	ldr	r3, [pc, #28]	; (1570 <nm_bsp_reset+0x3c>)
    1554:	4798      	blx	r3
	nm_bsp_sleep(10);
    1556:	200a      	movs	r0, #10
    1558:	4b06      	ldr	r3, [pc, #24]	; (1574 <nm_bsp_reset+0x40>)
    155a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    155c:	2101      	movs	r1, #1
    155e:	201b      	movs	r0, #27
    1560:	4b03      	ldr	r3, [pc, #12]	; (1570 <nm_bsp_reset+0x3c>)
    1562:	4798      	blx	r3
	nm_bsp_sleep(10);
    1564:	200a      	movs	r0, #10
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <nm_bsp_reset+0x40>)
    1568:	4798      	blx	r3
}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	46bd      	mov	sp, r7
    156e:	bd80      	pop	{r7, pc}
    1570:	0000144d 	.word	0x0000144d
    1574:	00001579 	.word	0x00001579

00001578 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1578:	b580      	push	{r7, lr}
    157a:	b082      	sub	sp, #8
    157c:	af00      	add	r7, sp, #0
    157e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    1580:	e002      	b.n	1588 <nm_bsp_sleep+0x10>
		delay_ms(1);
    1582:	2001      	movs	r0, #1
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <nm_bsp_sleep+0x24>)
    1586:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	1e5a      	subs	r2, r3, #1
    158c:	607a      	str	r2, [r7, #4]
    158e:	2b00      	cmp	r3, #0
    1590:	d1f7      	bne.n	1582 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	46bd      	mov	sp, r7
    1596:	b002      	add	sp, #8
    1598:	bd80      	pop	{r7, pc}
    159a:	46c0      	nop			; (mov r8, r8)
    159c:	00001359 	.word	0x00001359

000015a0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    15a0:	b580      	push	{r7, lr}
    15a2:	b082      	sub	sp, #8
    15a4:	af00      	add	r7, sp, #0
    15a6:	0002      	movs	r2, r0
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    15ac:	1dfb      	adds	r3, r7, #7
    15ae:	781b      	ldrb	r3, [r3, #0]
    15b0:	2b00      	cmp	r3, #0
    15b2:	d004      	beq.n	15be <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    15b4:	2100      	movs	r1, #0
    15b6:	2009      	movs	r0, #9
    15b8:	4b05      	ldr	r3, [pc, #20]	; (15d0 <nm_bsp_interrupt_ctrl+0x30>)
    15ba:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    15bc:	e003      	b.n	15c6 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    15be:	2100      	movs	r1, #0
    15c0:	2009      	movs	r0, #9
    15c2:	4b04      	ldr	r3, [pc, #16]	; (15d4 <nm_bsp_interrupt_ctrl+0x34>)
    15c4:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	46bd      	mov	sp, r7
    15ca:	b002      	add	sp, #8
    15cc:	bd80      	pop	{r7, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	000047d9 	.word	0x000047d9
    15d4:	00004821 	.word	0x00004821

000015d8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af00      	add	r7, sp, #0
    15de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15e0:	687b      	ldr	r3, [r7, #4]
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    15e6:	68fb      	ldr	r3, [r7, #12]
    15e8:	7e1b      	ldrb	r3, [r3, #24]
    15ea:	b2db      	uxtb	r3, r3
    15ec:	001a      	movs	r2, r3
    15ee:	2302      	movs	r3, #2
    15f0:	4013      	ands	r3, r2
    15f2:	1e5a      	subs	r2, r3, #1
    15f4:	4193      	sbcs	r3, r2
    15f6:	b2db      	uxtb	r3, r3
}
    15f8:	0018      	movs	r0, r3
    15fa:	46bd      	mov	sp, r7
    15fc:	b004      	add	sp, #16
    15fe:	bd80      	pop	{r7, pc}

00001600 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1600:	b580      	push	{r7, lr}
    1602:	b084      	sub	sp, #16
    1604:	af00      	add	r7, sp, #0
    1606:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    160e:	68fb      	ldr	r3, [r7, #12]
    1610:	7e1b      	ldrb	r3, [r3, #24]
    1612:	b2db      	uxtb	r3, r3
    1614:	001a      	movs	r2, r3
    1616:	2301      	movs	r3, #1
    1618:	4013      	ands	r3, r2
    161a:	1e5a      	subs	r2, r3, #1
    161c:	4193      	sbcs	r3, r2
    161e:	b2db      	uxtb	r3, r3
}
    1620:	0018      	movs	r0, r3
    1622:	46bd      	mov	sp, r7
    1624:	b004      	add	sp, #16
    1626:	bd80      	pop	{r7, pc}

00001628 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1628:	b580      	push	{r7, lr}
    162a:	b084      	sub	sp, #16
    162c:	af00      	add	r7, sp, #0
    162e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1630:	687b      	ldr	r3, [r7, #4]
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	7e1b      	ldrb	r3, [r3, #24]
    163a:	b2db      	uxtb	r3, r3
    163c:	001a      	movs	r2, r3
    163e:	2304      	movs	r3, #4
    1640:	4013      	ands	r3, r2
    1642:	1e5a      	subs	r2, r3, #1
    1644:	4193      	sbcs	r3, r2
    1646:	b2db      	uxtb	r3, r3
}
    1648:	0018      	movs	r0, r3
    164a:	46bd      	mov	sp, r7
    164c:	b004      	add	sp, #16
    164e:	bd80      	pop	{r7, pc}

00001650 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    1650:	b580      	push	{r7, lr}
    1652:	b084      	sub	sp, #16
    1654:	af00      	add	r7, sp, #0
    1656:	6078      	str	r0, [r7, #4]
    1658:	000a      	movs	r2, r1
    165a:	1cbb      	adds	r3, r7, #2
    165c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	681b      	ldr	r3, [r3, #0]
    1662:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	0018      	movs	r0, r3
    1668:	4b0a      	ldr	r3, [pc, #40]	; (1694 <spi_write+0x44>)
    166a:	4798      	blx	r3
    166c:	0003      	movs	r3, r0
    166e:	001a      	movs	r2, r3
    1670:	2301      	movs	r3, #1
    1672:	4053      	eors	r3, r2
    1674:	b2db      	uxtb	r3, r3
    1676:	2b00      	cmp	r3, #0
    1678:	d001      	beq.n	167e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    167a:	2305      	movs	r3, #5
    167c:	e006      	b.n	168c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    167e:	1cbb      	adds	r3, r7, #2
    1680:	881b      	ldrh	r3, [r3, #0]
    1682:	05db      	lsls	r3, r3, #23
    1684:	0dda      	lsrs	r2, r3, #23
    1686:	68fb      	ldr	r3, [r7, #12]
    1688:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    168a:	2300      	movs	r3, #0
}
    168c:	0018      	movs	r0, r3
    168e:	46bd      	mov	sp, r7
    1690:	b004      	add	sp, #16
    1692:	bd80      	pop	{r7, pc}
    1694:	00001601 	.word	0x00001601

00001698 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    1698:	b580      	push	{r7, lr}
    169a:	b084      	sub	sp, #16
    169c:	af00      	add	r7, sp, #0
    169e:	6078      	str	r0, [r7, #4]
    16a0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    16a8:	687b      	ldr	r3, [r7, #4]
    16aa:	0018      	movs	r0, r3
    16ac:	4b1b      	ldr	r3, [pc, #108]	; (171c <spi_read+0x84>)
    16ae:	4798      	blx	r3
    16b0:	0003      	movs	r3, r0
    16b2:	001a      	movs	r2, r3
    16b4:	2301      	movs	r3, #1
    16b6:	4053      	eors	r3, r2
    16b8:	b2db      	uxtb	r3, r3
    16ba:	2b00      	cmp	r3, #0
    16bc:	d001      	beq.n	16c2 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    16be:	2310      	movs	r3, #16
    16c0:	e027      	b.n	1712 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    16c2:	230f      	movs	r3, #15
    16c4:	18fb      	adds	r3, r7, r3
    16c6:	2200      	movs	r2, #0
    16c8:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    16ca:	68bb      	ldr	r3, [r7, #8]
    16cc:	8b5b      	ldrh	r3, [r3, #26]
    16ce:	b29b      	uxth	r3, r3
    16d0:	001a      	movs	r2, r3
    16d2:	2304      	movs	r3, #4
    16d4:	4013      	ands	r3, r2
    16d6:	d006      	beq.n	16e6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    16d8:	230f      	movs	r3, #15
    16da:	18fb      	adds	r3, r7, r3
    16dc:	221e      	movs	r2, #30
    16de:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    16e0:	68bb      	ldr	r3, [r7, #8]
    16e2:	2204      	movs	r2, #4
    16e4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    16e6:	687b      	ldr	r3, [r7, #4]
    16e8:	799b      	ldrb	r3, [r3, #6]
    16ea:	2b01      	cmp	r3, #1
    16ec:	d108      	bne.n	1700 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    16ee:	68bb      	ldr	r3, [r7, #8]
    16f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16f2:	b29b      	uxth	r3, r3
    16f4:	05db      	lsls	r3, r3, #23
    16f6:	0ddb      	lsrs	r3, r3, #23
    16f8:	b29a      	uxth	r2, r3
    16fa:	683b      	ldr	r3, [r7, #0]
    16fc:	801a      	strh	r2, [r3, #0]
    16fe:	e005      	b.n	170c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1700:	68bb      	ldr	r3, [r7, #8]
    1702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1704:	b2db      	uxtb	r3, r3
    1706:	b29a      	uxth	r2, r3
    1708:	683b      	ldr	r3, [r7, #0]
    170a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    170c:	230f      	movs	r3, #15
    170e:	18fb      	adds	r3, r7, r3
    1710:	781b      	ldrb	r3, [r3, #0]
}
    1712:	0018      	movs	r0, r3
    1714:	46bd      	mov	sp, r7
    1716:	b004      	add	sp, #16
    1718:	bd80      	pop	{r7, pc}
    171a:	46c0      	nop			; (mov r8, r8)
    171c:	00001629 	.word	0x00001629

00001720 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    1720:	b580      	push	{r7, lr}
    1722:	b086      	sub	sp, #24
    1724:	af00      	add	r7, sp, #0
    1726:	60f8      	str	r0, [r7, #12]
    1728:	60b9      	str	r1, [r7, #8]
    172a:	1dbb      	adds	r3, r7, #6
    172c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    172e:	2313      	movs	r3, #19
    1730:	18fb      	adds	r3, r7, r3
    1732:	2200      	movs	r2, #0
    1734:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1736:	2317      	movs	r3, #23
    1738:	18fb      	adds	r3, r7, r3
    173a:	2200      	movs	r2, #0
    173c:	701a      	strb	r2, [r3, #0]
    173e:	2316      	movs	r3, #22
    1740:	18fb      	adds	r3, r7, r3
    1742:	2200      	movs	r2, #0
    1744:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    1746:	2314      	movs	r3, #20
    1748:	18fb      	adds	r3, r7, r3
    174a:	2200      	movs	r2, #0
    174c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    174e:	2310      	movs	r3, #16
    1750:	18fb      	adds	r3, r7, r3
    1752:	2200      	movs	r2, #0
    1754:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    1756:	68fb      	ldr	r3, [r7, #12]
    1758:	2b00      	cmp	r3, #0
    175a:	d107      	bne.n	176c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    175c:	2313      	movs	r3, #19
    175e:	18fb      	adds	r3, r7, r3
    1760:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    1762:	2317      	movs	r3, #23
    1764:	18fb      	adds	r3, r7, r3
    1766:	2201      	movs	r2, #1
    1768:	701a      	strb	r2, [r3, #0]
    176a:	e00d      	b.n	1788 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    176c:	68bb      	ldr	r3, [r7, #8]
    176e:	2b00      	cmp	r3, #0
    1770:	d107      	bne.n	1782 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    1772:	2313      	movs	r3, #19
    1774:	18fb      	adds	r3, r7, r3
    1776:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    1778:	2316      	movs	r3, #22
    177a:	18fb      	adds	r3, r7, r3
    177c:	2201      	movs	r2, #1
    177e:	701a      	strb	r2, [r3, #0]
    1780:	e002      	b.n	1788 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    1782:	2306      	movs	r3, #6
    1784:	425b      	negs	r3, r3
    1786:	e06a      	b.n	185e <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    1788:	4937      	ldr	r1, [pc, #220]	; (1868 <spi_rw+0x148>)
    178a:	4b38      	ldr	r3, [pc, #224]	; (186c <spi_rw+0x14c>)
    178c:	2201      	movs	r2, #1
    178e:	0018      	movs	r0, r3
    1790:	4b37      	ldr	r3, [pc, #220]	; (1870 <spi_rw+0x150>)
    1792:	4798      	blx	r3

	while (u16Sz) {
    1794:	e04c      	b.n	1830 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    1796:	68fb      	ldr	r3, [r7, #12]
    1798:	781a      	ldrb	r2, [r3, #0]
    179a:	2314      	movs	r3, #20
    179c:	18fb      	adds	r3, r7, r3
    179e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    17a0:	46c0      	nop			; (mov r8, r8)
    17a2:	4b32      	ldr	r3, [pc, #200]	; (186c <spi_rw+0x14c>)
    17a4:	0018      	movs	r0, r3
    17a6:	4b33      	ldr	r3, [pc, #204]	; (1874 <spi_rw+0x154>)
    17a8:	4798      	blx	r3
    17aa:	0003      	movs	r3, r0
    17ac:	001a      	movs	r2, r3
    17ae:	2301      	movs	r3, #1
    17b0:	4053      	eors	r3, r2
    17b2:	b2db      	uxtb	r3, r3
    17b4:	2b00      	cmp	r3, #0
    17b6:	d1f4      	bne.n	17a2 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    17b8:	46c0      	nop			; (mov r8, r8)
    17ba:	2314      	movs	r3, #20
    17bc:	18fb      	adds	r3, r7, r3
    17be:	881a      	ldrh	r2, [r3, #0]
    17c0:	4b2a      	ldr	r3, [pc, #168]	; (186c <spi_rw+0x14c>)
    17c2:	0011      	movs	r1, r2
    17c4:	0018      	movs	r0, r3
    17c6:	4b2c      	ldr	r3, [pc, #176]	; (1878 <spi_rw+0x158>)
    17c8:	4798      	blx	r3
    17ca:	1e03      	subs	r3, r0, #0
    17cc:	d1f5      	bne.n	17ba <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	4b26      	ldr	r3, [pc, #152]	; (186c <spi_rw+0x14c>)
    17d2:	0018      	movs	r0, r3
    17d4:	4b29      	ldr	r3, [pc, #164]	; (187c <spi_rw+0x15c>)
    17d6:	4798      	blx	r3
    17d8:	0003      	movs	r3, r0
    17da:	001a      	movs	r2, r3
    17dc:	2301      	movs	r3, #1
    17de:	4053      	eors	r3, r2
    17e0:	b2db      	uxtb	r3, r3
    17e2:	2b00      	cmp	r3, #0
    17e4:	d1f4      	bne.n	17d0 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    17e6:	46c0      	nop			; (mov r8, r8)
    17e8:	2310      	movs	r3, #16
    17ea:	18fa      	adds	r2, r7, r3
    17ec:	4b1f      	ldr	r3, [pc, #124]	; (186c <spi_rw+0x14c>)
    17ee:	0011      	movs	r1, r2
    17f0:	0018      	movs	r0, r3
    17f2:	4b23      	ldr	r3, [pc, #140]	; (1880 <spi_rw+0x160>)
    17f4:	4798      	blx	r3
    17f6:	1e03      	subs	r3, r0, #0
    17f8:	d1f6      	bne.n	17e8 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    17fa:	2310      	movs	r3, #16
    17fc:	18fb      	adds	r3, r7, r3
    17fe:	881b      	ldrh	r3, [r3, #0]
    1800:	b2da      	uxtb	r2, r3
    1802:	68bb      	ldr	r3, [r7, #8]
    1804:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    1806:	1dbb      	adds	r3, r7, #6
    1808:	881a      	ldrh	r2, [r3, #0]
    180a:	1dbb      	adds	r3, r7, #6
    180c:	3a01      	subs	r2, #1
    180e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    1810:	2316      	movs	r3, #22
    1812:	18fb      	adds	r3, r7, r3
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d102      	bne.n	1820 <spi_rw+0x100>
			pu8Miso++;
    181a:	68bb      	ldr	r3, [r7, #8]
    181c:	3301      	adds	r3, #1
    181e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    1820:	2317      	movs	r3, #23
    1822:	18fb      	adds	r3, r7, r3
    1824:	781b      	ldrb	r3, [r3, #0]
    1826:	2b00      	cmp	r3, #0
    1828:	d102      	bne.n	1830 <spi_rw+0x110>
			pu8Mosi++;
    182a:	68fb      	ldr	r3, [r7, #12]
    182c:	3301      	adds	r3, #1
    182e:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    1830:	1dbb      	adds	r3, r7, #6
    1832:	881b      	ldrh	r3, [r3, #0]
    1834:	2b00      	cmp	r3, #0
    1836:	d1ae      	bne.n	1796 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    1838:	46c0      	nop			; (mov r8, r8)
    183a:	4b0c      	ldr	r3, [pc, #48]	; (186c <spi_rw+0x14c>)
    183c:	0018      	movs	r0, r3
    183e:	4b11      	ldr	r3, [pc, #68]	; (1884 <spi_rw+0x164>)
    1840:	4798      	blx	r3
    1842:	0003      	movs	r3, r0
    1844:	001a      	movs	r2, r3
    1846:	2301      	movs	r3, #1
    1848:	4053      	eors	r3, r2
    184a:	b2db      	uxtb	r3, r3
    184c:	2b00      	cmp	r3, #0
    184e:	d1f4      	bne.n	183a <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    1850:	4905      	ldr	r1, [pc, #20]	; (1868 <spi_rw+0x148>)
    1852:	4b06      	ldr	r3, [pc, #24]	; (186c <spi_rw+0x14c>)
    1854:	2200      	movs	r2, #0
    1856:	0018      	movs	r0, r3
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <spi_rw+0x150>)
    185a:	4798      	blx	r3

	return M2M_SUCCESS;
    185c:	2300      	movs	r3, #0
}
    185e:	0018      	movs	r0, r3
    1860:	46bd      	mov	sp, r7
    1862:	b006      	add	sp, #24
    1864:	bd80      	pop	{r7, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	200044e8 	.word	0x200044e8
    186c:	200044ec 	.word	0x200044ec
    1870:	00005b29 	.word	0x00005b29
    1874:	00001601 	.word	0x00001601
    1878:	00001651 	.word	0x00001651
    187c:	00001629 	.word	0x00001629
    1880:	00001699 	.word	0x00001699
    1884:	000015d9 	.word	0x000015d9

00001888 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1888:	b590      	push	{r4, r7, lr}
    188a:	b085      	sub	sp, #20
    188c:	af00      	add	r7, sp, #0
    188e:	0002      	movs	r2, r0
    1890:	6039      	str	r1, [r7, #0]
    1892:	1dfb      	adds	r3, r7, #7
    1894:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    1896:	230f      	movs	r3, #15
    1898:	18fb      	adds	r3, r7, r3
    189a:	2200      	movs	r2, #0
    189c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    189e:	1dfb      	adds	r3, r7, #7
    18a0:	781b      	ldrb	r3, [r3, #0]
    18a2:	2b03      	cmp	r3, #3
    18a4:	d10f      	bne.n	18c6 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    18a6:	683b      	ldr	r3, [r7, #0]
    18a8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    18aa:	68bb      	ldr	r3, [r7, #8]
    18ac:	6818      	ldr	r0, [r3, #0]
    18ae:	68bb      	ldr	r3, [r7, #8]
    18b0:	6859      	ldr	r1, [r3, #4]
    18b2:	68bb      	ldr	r3, [r7, #8]
    18b4:	891b      	ldrh	r3, [r3, #8]
    18b6:	220f      	movs	r2, #15
    18b8:	18bc      	adds	r4, r7, r2
    18ba:	001a      	movs	r2, r3
    18bc:	4b0f      	ldr	r3, [pc, #60]	; (18fc <nm_bus_ioctl+0x74>)
    18be:	4798      	blx	r3
    18c0:	0003      	movs	r3, r0
    18c2:	7023      	strb	r3, [r4, #0]
		}
		break;
    18c4:	e012      	b.n	18ec <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    18c6:	230f      	movs	r3, #15
    18c8:	18fb      	adds	r3, r7, r3
    18ca:	22ff      	movs	r2, #255	; 0xff
    18cc:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    18ce:	2386      	movs	r3, #134	; 0x86
    18d0:	005a      	lsls	r2, r3, #1
    18d2:	490b      	ldr	r1, [pc, #44]	; (1900 <nm_bus_ioctl+0x78>)
    18d4:	4b0b      	ldr	r3, [pc, #44]	; (1904 <nm_bus_ioctl+0x7c>)
    18d6:	0018      	movs	r0, r3
    18d8:	4b0b      	ldr	r3, [pc, #44]	; (1908 <nm_bus_ioctl+0x80>)
    18da:	4798      	blx	r3
    18dc:	4b0b      	ldr	r3, [pc, #44]	; (190c <nm_bus_ioctl+0x84>)
    18de:	0018      	movs	r0, r3
    18e0:	4b0b      	ldr	r3, [pc, #44]	; (1910 <nm_bus_ioctl+0x88>)
    18e2:	4798      	blx	r3
    18e4:	200d      	movs	r0, #13
    18e6:	4b0b      	ldr	r3, [pc, #44]	; (1914 <nm_bus_ioctl+0x8c>)
    18e8:	4798      	blx	r3
			break;
    18ea:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    18ec:	230f      	movs	r3, #15
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	b25b      	sxtb	r3, r3
}
    18f4:	0018      	movs	r0, r3
    18f6:	46bd      	mov	sp, r7
    18f8:	b005      	add	sp, #20
    18fa:	bd90      	pop	{r4, r7, pc}
    18fc:	00001721 	.word	0x00001721
    1900:	0000d71c 	.word	0x0000d71c
    1904:	0000d6f4 	.word	0x0000d6f4
    1908:	0000c5d9 	.word	0x0000c5d9
    190c:	0000d708 	.word	0x0000d708
    1910:	0000c6f9 	.word	0x0000c6f9
    1914:	0000c60d 	.word	0x0000c60d

00001918 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    1918:	b580      	push	{r7, lr}
    191a:	b084      	sub	sp, #16
    191c:	af00      	add	r7, sp, #0
    191e:	60f8      	str	r0, [r7, #12]
    1920:	60b9      	str	r1, [r7, #8]
    1922:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    1924:	687b      	ldr	r3, [r7, #4]
    1926:	2b00      	cmp	r3, #0
    1928:	d010      	beq.n	194c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    192a:	68bb      	ldr	r3, [r7, #8]
    192c:	781a      	ldrb	r2, [r3, #0]
    192e:	68fb      	ldr	r3, [r7, #12]
    1930:	701a      	strb	r2, [r3, #0]
		pDst++;
    1932:	68fb      	ldr	r3, [r7, #12]
    1934:	3301      	adds	r3, #1
    1936:	60fb      	str	r3, [r7, #12]
		pSrc++;
    1938:	68bb      	ldr	r3, [r7, #8]
    193a:	3301      	adds	r3, #1
    193c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    193e:	687b      	ldr	r3, [r7, #4]
    1940:	3b01      	subs	r3, #1
    1942:	607b      	str	r3, [r7, #4]
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	2b00      	cmp	r3, #0
    1948:	d1ef      	bne.n	192a <m2m_memcpy+0x12>
    194a:	e000      	b.n	194e <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    194c:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    194e:	46bd      	mov	sp, r7
    1950:	b004      	add	sp, #16
    1952:	bd80      	pop	{r7, pc}

00001954 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    1954:	b580      	push	{r7, lr}
    1956:	b084      	sub	sp, #16
    1958:	af00      	add	r7, sp, #0
    195a:	60f8      	str	r0, [r7, #12]
    195c:	607a      	str	r2, [r7, #4]
    195e:	230b      	movs	r3, #11
    1960:	18fb      	adds	r3, r7, r3
    1962:	1c0a      	adds	r2, r1, #0
    1964:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    1966:	687b      	ldr	r3, [r7, #4]
    1968:	2b00      	cmp	r3, #0
    196a:	d00e      	beq.n	198a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    196c:	68fb      	ldr	r3, [r7, #12]
    196e:	220b      	movs	r2, #11
    1970:	18ba      	adds	r2, r7, r2
    1972:	7812      	ldrb	r2, [r2, #0]
    1974:	701a      	strb	r2, [r3, #0]
		pBuf++;
    1976:	68fb      	ldr	r3, [r7, #12]
    1978:	3301      	adds	r3, #1
    197a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	3b01      	subs	r3, #1
    1980:	607b      	str	r3, [r7, #4]
    1982:	687b      	ldr	r3, [r7, #4]
    1984:	2b00      	cmp	r3, #0
    1986:	d1f1      	bne.n	196c <m2m_memset+0x18>
    1988:	e000      	b.n	198c <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    198a:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    198c:	46bd      	mov	sp, r7
    198e:	b004      	add	sp, #16
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)

00001994 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1994:	b580      	push	{r7, lr}
    1996:	b084      	sub	sp, #16
    1998:	af00      	add	r7, sp, #0
    199a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    199c:	230e      	movs	r3, #14
    199e:	18fb      	adds	r3, r7, r3
    19a0:	2200      	movs	r2, #0
    19a2:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    19a4:	e009      	b.n	19ba <m2m_strlen+0x26>
	{
		u16StrLen ++;
    19a6:	230e      	movs	r3, #14
    19a8:	18fb      	adds	r3, r7, r3
    19aa:	881a      	ldrh	r2, [r3, #0]
    19ac:	230e      	movs	r3, #14
    19ae:	18fb      	adds	r3, r7, r3
    19b0:	3201      	adds	r2, #1
    19b2:	801a      	strh	r2, [r3, #0]
		pcStr++;
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	3301      	adds	r3, #1
    19b8:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    19ba:	687b      	ldr	r3, [r7, #4]
    19bc:	781b      	ldrb	r3, [r3, #0]
    19be:	2b00      	cmp	r3, #0
    19c0:	d1f1      	bne.n	19a6 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    19c2:	230e      	movs	r3, #14
    19c4:	18fb      	adds	r3, r7, r3
    19c6:	881b      	ldrh	r3, [r3, #0]
}
    19c8:	0018      	movs	r0, r3
    19ca:	46bd      	mov	sp, r7
    19cc:	b004      	add	sp, #16
    19ce:	bd80      	pop	{r7, pc}

000019d0 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
    19d0:	b590      	push	{r4, r7, lr}
    19d2:	b083      	sub	sp, #12
    19d4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    19d6:	1dfb      	adds	r3, r7, #7
    19d8:	2200      	movs	r2, #0
    19da:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    19dc:	2001      	movs	r0, #1
    19de:	4b13      	ldr	r3, [pc, #76]	; (1a2c <hif_set_rx_done+0x5c>)
    19e0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    19e2:	1dfc      	adds	r4, r7, #7
    19e4:	003b      	movs	r3, r7
    19e6:	4a12      	ldr	r2, [pc, #72]	; (1a30 <hif_set_rx_done+0x60>)
    19e8:	0019      	movs	r1, r3
    19ea:	0010      	movs	r0, r2
    19ec:	4b11      	ldr	r3, [pc, #68]	; (1a34 <hif_set_rx_done+0x64>)
    19ee:	4798      	blx	r3
    19f0:	0003      	movs	r3, r0
    19f2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    19f4:	1dfb      	adds	r3, r7, #7
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	b25b      	sxtb	r3, r3
    19fa:	2b00      	cmp	r3, #0
    19fc:	d10d      	bne.n	1a1a <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    19fe:	683b      	ldr	r3, [r7, #0]
    1a00:	2202      	movs	r2, #2
    1a02:	4313      	orrs	r3, r2
    1a04:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1a06:	683b      	ldr	r3, [r7, #0]
    1a08:	1dfc      	adds	r4, r7, #7
    1a0a:	4a09      	ldr	r2, [pc, #36]	; (1a30 <hif_set_rx_done+0x60>)
    1a0c:	0019      	movs	r1, r3
    1a0e:	0010      	movs	r0, r2
    1a10:	4b09      	ldr	r3, [pc, #36]	; (1a38 <hif_set_rx_done+0x68>)
    1a12:	4798      	blx	r3
    1a14:	0003      	movs	r3, r0
    1a16:	7023      	strb	r3, [r4, #0]
    1a18:	e000      	b.n	1a1c <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    1a1a:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    1a1c:	1dfb      	adds	r3, r7, #7
    1a1e:	781b      	ldrb	r3, [r3, #0]
    1a20:	b25b      	sxtb	r3, r3

}
    1a22:	0018      	movs	r0, r3
    1a24:	46bd      	mov	sp, r7
    1a26:	b003      	add	sp, #12
    1a28:	bd90      	pop	{r4, r7, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	000015a1 	.word	0x000015a1
    1a30:	00001070 	.word	0x00001070
    1a34:	00002a35 	.word	0x00002a35
    1a38:	00002a59 	.word	0x00002a59

00001a3c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1a3c:	b590      	push	{r4, r7, lr}
    1a3e:	b083      	sub	sp, #12
    1a40:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1a42:	1dfb      	adds	r3, r7, #7
    1a44:	2200      	movs	r2, #0
    1a46:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    1a48:	4b1c      	ldr	r3, [pc, #112]	; (1abc <hif_chip_wake+0x80>)
    1a4a:	781b      	ldrb	r3, [r3, #0]
    1a4c:	b2db      	uxtb	r3, r3
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d121      	bne.n	1a96 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1a52:	4b1b      	ldr	r3, [pc, #108]	; (1ac0 <hif_chip_wake+0x84>)
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	b2db      	uxtb	r3, r3
    1a58:	2b03      	cmp	r3, #3
    1a5a:	d004      	beq.n	1a66 <hif_chip_wake+0x2a>
    1a5c:	4b18      	ldr	r3, [pc, #96]	; (1ac0 <hif_chip_wake+0x84>)
    1a5e:	781b      	ldrb	r3, [r3, #0]
    1a60:	b2db      	uxtb	r3, r3
    1a62:	2b04      	cmp	r3, #4
    1a64:	d117      	bne.n	1a96 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    1a66:	1dfc      	adds	r4, r7, #7
    1a68:	4b16      	ldr	r3, [pc, #88]	; (1ac4 <hif_chip_wake+0x88>)
    1a6a:	4798      	blx	r3
    1a6c:	0003      	movs	r3, r0
    1a6e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1a70:	1dfb      	adds	r3, r7, #7
    1a72:	781b      	ldrb	r3, [r3, #0]
    1a74:	b25b      	sxtb	r3, r3
    1a76:	2b00      	cmp	r3, #0
    1a78:	d115      	bne.n	1aa6 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    1a7a:	1dfc      	adds	r4, r7, #7
    1a7c:	4a12      	ldr	r2, [pc, #72]	; (1ac8 <hif_chip_wake+0x8c>)
    1a7e:	4b13      	ldr	r3, [pc, #76]	; (1acc <hif_chip_wake+0x90>)
    1a80:	0011      	movs	r1, r2
    1a82:	0018      	movs	r0, r3
    1a84:	4b12      	ldr	r3, [pc, #72]	; (1ad0 <hif_chip_wake+0x94>)
    1a86:	4798      	blx	r3
    1a88:	0003      	movs	r3, r0
    1a8a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1a8c:	1dfb      	adds	r3, r7, #7
    1a8e:	781b      	ldrb	r3, [r3, #0]
    1a90:	b25b      	sxtb	r3, r3
    1a92:	2b00      	cmp	r3, #0
    1a94:	d109      	bne.n	1aaa <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    1a96:	4b09      	ldr	r3, [pc, #36]	; (1abc <hif_chip_wake+0x80>)
    1a98:	781b      	ldrb	r3, [r3, #0]
    1a9a:	b2db      	uxtb	r3, r3
    1a9c:	3301      	adds	r3, #1
    1a9e:	b2da      	uxtb	r2, r3
    1aa0:	4b06      	ldr	r3, [pc, #24]	; (1abc <hif_chip_wake+0x80>)
    1aa2:	701a      	strb	r2, [r3, #0]
    1aa4:	e002      	b.n	1aac <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    1aa6:	46c0      	nop			; (mov r8, r8)
    1aa8:	e000      	b.n	1aac <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    1aaa:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    1aac:	1dfb      	adds	r3, r7, #7
    1aae:	781b      	ldrb	r3, [r3, #0]
    1ab0:	b25b      	sxtb	r3, r3
}
    1ab2:	0018      	movs	r0, r3
    1ab4:	46bd      	mov	sp, r7
    1ab6:	b003      	add	sp, #12
    1ab8:	bd90      	pop	{r4, r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	200000d1 	.word	0x200000d1
    1ac0:	200000d0 	.word	0x200000d0
    1ac4:	00002859 	.word	0x00002859
    1ac8:	00005678 	.word	0x00005678
    1acc:	00001074 	.word	0x00001074
    1ad0:	00002a59 	.word	0x00002a59

00001ad4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1ad4:	b590      	push	{r4, r7, lr}
    1ad6:	b083      	sub	sp, #12
    1ad8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1ada:	1dfb      	adds	r3, r7, #7
    1adc:	2200      	movs	r2, #0
    1ade:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    1ae0:	4b29      	ldr	r3, [pc, #164]	; (1b88 <hif_chip_sleep+0xb4>)
    1ae2:	781b      	ldrb	r3, [r3, #0]
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d006      	beq.n	1af8 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    1aea:	4b27      	ldr	r3, [pc, #156]	; (1b88 <hif_chip_sleep+0xb4>)
    1aec:	781b      	ldrb	r3, [r3, #0]
    1aee:	b2db      	uxtb	r3, r3
    1af0:	3b01      	subs	r3, #1
    1af2:	b2da      	uxtb	r2, r3
    1af4:	4b24      	ldr	r3, [pc, #144]	; (1b88 <hif_chip_sleep+0xb4>)
    1af6:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    1af8:	4b23      	ldr	r3, [pc, #140]	; (1b88 <hif_chip_sleep+0xb4>)
    1afa:	781b      	ldrb	r3, [r3, #0]
    1afc:	b2db      	uxtb	r3, r3
    1afe:	2b00      	cmp	r3, #0
    1b00:	d13a      	bne.n	1b78 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    1b02:	4b22      	ldr	r3, [pc, #136]	; (1b8c <hif_chip_sleep+0xb8>)
    1b04:	781b      	ldrb	r3, [r3, #0]
    1b06:	b2db      	uxtb	r3, r3
    1b08:	2b03      	cmp	r3, #3
    1b0a:	d004      	beq.n	1b16 <hif_chip_sleep+0x42>
    1b0c:	4b1f      	ldr	r3, [pc, #124]	; (1b8c <hif_chip_sleep+0xb8>)
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	b2db      	uxtb	r3, r3
    1b12:	2b04      	cmp	r3, #4
    1b14:	d130      	bne.n	1b78 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    1b16:	2300      	movs	r3, #0
    1b18:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    1b1a:	1dfc      	adds	r4, r7, #7
    1b1c:	4a1c      	ldr	r2, [pc, #112]	; (1b90 <hif_chip_sleep+0xbc>)
    1b1e:	4b1d      	ldr	r3, [pc, #116]	; (1b94 <hif_chip_sleep+0xc0>)
    1b20:	0011      	movs	r1, r2
    1b22:	0018      	movs	r0, r3
    1b24:	4b1c      	ldr	r3, [pc, #112]	; (1b98 <hif_chip_sleep+0xc4>)
    1b26:	4798      	blx	r3
    1b28:	0003      	movs	r3, r0
    1b2a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1b2c:	1dfb      	adds	r3, r7, #7
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	b25b      	sxtb	r3, r3
    1b32:	2b00      	cmp	r3, #0
    1b34:	d11d      	bne.n	1b72 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    1b36:	1dfc      	adds	r4, r7, #7
    1b38:	003b      	movs	r3, r7
    1b3a:	0019      	movs	r1, r3
    1b3c:	2001      	movs	r0, #1
    1b3e:	4b17      	ldr	r3, [pc, #92]	; (1b9c <hif_chip_sleep+0xc8>)
    1b40:	4798      	blx	r3
    1b42:	0003      	movs	r3, r0
    1b44:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    1b46:	1dfb      	adds	r3, r7, #7
    1b48:	781b      	ldrb	r3, [r3, #0]
    1b4a:	b25b      	sxtb	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d112      	bne.n	1b76 <hif_chip_sleep+0xa2>
			if(reg&0x2)
    1b50:	683b      	ldr	r3, [r7, #0]
    1b52:	2202      	movs	r2, #2
    1b54:	4013      	ands	r3, r2
    1b56:	d00f      	beq.n	1b78 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    1b58:	683b      	ldr	r3, [r7, #0]
    1b5a:	2202      	movs	r2, #2
    1b5c:	4393      	bics	r3, r2
    1b5e:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    1b60:	683b      	ldr	r3, [r7, #0]
    1b62:	1dfc      	adds	r4, r7, #7
    1b64:	0019      	movs	r1, r3
    1b66:	2001      	movs	r0, #1
    1b68:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <hif_chip_sleep+0xc4>)
    1b6a:	4798      	blx	r3
    1b6c:	0003      	movs	r3, r0
    1b6e:	7023      	strb	r3, [r4, #0]
    1b70:	e002      	b.n	1b78 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    1b72:	46c0      	nop			; (mov r8, r8)
    1b74:	e000      	b.n	1b78 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    1b76:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    1b78:	1dfb      	adds	r3, r7, #7
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	b25b      	sxtb	r3, r3
}
    1b7e:	0018      	movs	r0, r3
    1b80:	46bd      	mov	sp, r7
    1b82:	b003      	add	sp, #12
    1b84:	bd90      	pop	{r4, r7, pc}
    1b86:	46c0      	nop			; (mov r8, r8)
    1b88:	200000d1 	.word	0x200000d1
    1b8c:	200000d0 	.word	0x200000d0
    1b90:	00004321 	.word	0x00004321
    1b94:	00001074 	.word	0x00001074
    1b98:	00002a59 	.word	0x00002a59
    1b9c:	00002a35 	.word	0x00002a35

00001ba0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1ba0:	b590      	push	{r4, r7, lr}
    1ba2:	b089      	sub	sp, #36	; 0x24
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	0004      	movs	r4, r0
    1ba8:	0008      	movs	r0, r1
    1baa:	603a      	str	r2, [r7, #0]
    1bac:	0019      	movs	r1, r3
    1bae:	1dfb      	adds	r3, r7, #7
    1bb0:	1c22      	adds	r2, r4, #0
    1bb2:	701a      	strb	r2, [r3, #0]
    1bb4:	1dbb      	adds	r3, r7, #6
    1bb6:	1c02      	adds	r2, r0, #0
    1bb8:	701a      	strb	r2, [r3, #0]
    1bba:	1d3b      	adds	r3, r7, #4
    1bbc:	1c0a      	adds	r2, r1, #0
    1bbe:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    1bc0:	231f      	movs	r3, #31
    1bc2:	18fb      	adds	r3, r7, r3
    1bc4:	22ff      	movs	r2, #255	; 0xff
    1bc6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1bc8:	1dbb      	adds	r3, r7, #6
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	227f      	movs	r2, #127	; 0x7f
    1bce:	4013      	ands	r3, r2
    1bd0:	b2da      	uxtb	r2, r3
    1bd2:	2318      	movs	r3, #24
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1bd8:	2318      	movs	r3, #24
    1bda:	18fb      	adds	r3, r7, r3
    1bdc:	1dfa      	adds	r2, r7, #7
    1bde:	7812      	ldrb	r2, [r2, #0]
    1be0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    1be2:	2318      	movs	r3, #24
    1be4:	18fb      	adds	r3, r7, r3
    1be6:	2208      	movs	r2, #8
    1be8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    1bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1bec:	2b00      	cmp	r3, #0
    1bee:	d011      	beq.n	1c14 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1bf0:	2318      	movs	r3, #24
    1bf2:	18fb      	adds	r3, r7, r3
    1bf4:	885b      	ldrh	r3, [r3, #2]
    1bf6:	b29a      	uxth	r2, r3
    1bf8:	2338      	movs	r3, #56	; 0x38
    1bfa:	18f9      	adds	r1, r7, r3
    1bfc:	2334      	movs	r3, #52	; 0x34
    1bfe:	18fb      	adds	r3, r7, r3
    1c00:	8809      	ldrh	r1, [r1, #0]
    1c02:	881b      	ldrh	r3, [r3, #0]
    1c04:	18cb      	adds	r3, r1, r3
    1c06:	b29b      	uxth	r3, r3
    1c08:	18d3      	adds	r3, r2, r3
    1c0a:	b29a      	uxth	r2, r3
    1c0c:	2318      	movs	r3, #24
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	805a      	strh	r2, [r3, #2]
    1c12:	e00a      	b.n	1c2a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    1c14:	2318      	movs	r3, #24
    1c16:	18fb      	adds	r3, r7, r3
    1c18:	885b      	ldrh	r3, [r3, #2]
    1c1a:	b29a      	uxth	r2, r3
    1c1c:	1d3b      	adds	r3, r7, #4
    1c1e:	881b      	ldrh	r3, [r3, #0]
    1c20:	18d3      	adds	r3, r2, r3
    1c22:	b29a      	uxth	r2, r3
    1c24:	2318      	movs	r3, #24
    1c26:	18fb      	adds	r3, r7, r3
    1c28:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    1c2a:	231f      	movs	r3, #31
    1c2c:	18fc      	adds	r4, r7, r3
    1c2e:	4b9b      	ldr	r3, [pc, #620]	; (1e9c <hif_send+0x2fc>)
    1c30:	4798      	blx	r3
    1c32:	0003      	movs	r3, r0
    1c34:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    1c36:	231f      	movs	r3, #31
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	b25b      	sxtb	r3, r3
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d000      	beq.n	1c44 <hif_send+0xa4>
    1c42:	e103      	b.n	1e4c <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    1c44:	2300      	movs	r3, #0
    1c46:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    1c48:	230e      	movs	r3, #14
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	2200      	movs	r2, #0
    1c4e:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    1c50:	2300      	movs	r3, #0
    1c52:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    1c54:	1dfb      	adds	r3, r7, #7
    1c56:	781a      	ldrb	r2, [r3, #0]
    1c58:	697b      	ldr	r3, [r7, #20]
    1c5a:	4313      	orrs	r3, r2
    1c5c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    1c5e:	1dbb      	adds	r3, r7, #6
    1c60:	781b      	ldrb	r3, [r3, #0]
    1c62:	021a      	lsls	r2, r3, #8
    1c64:	697b      	ldr	r3, [r7, #20]
    1c66:	4313      	orrs	r3, r2
    1c68:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    1c6a:	2318      	movs	r3, #24
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	885b      	ldrh	r3, [r3, #2]
    1c70:	b29b      	uxth	r3, r3
    1c72:	041a      	lsls	r2, r3, #16
    1c74:	697b      	ldr	r3, [r7, #20]
    1c76:	4313      	orrs	r3, r2
    1c78:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1c7a:	697b      	ldr	r3, [r7, #20]
    1c7c:	221f      	movs	r2, #31
    1c7e:	18bc      	adds	r4, r7, r2
    1c80:	4a87      	ldr	r2, [pc, #540]	; (1ea0 <hif_send+0x300>)
    1c82:	0019      	movs	r1, r3
    1c84:	0010      	movs	r0, r2
    1c86:	4b87      	ldr	r3, [pc, #540]	; (1ea4 <hif_send+0x304>)
    1c88:	4798      	blx	r3
    1c8a:	0003      	movs	r3, r0
    1c8c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1c8e:	231f      	movs	r3, #31
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	781b      	ldrb	r3, [r3, #0]
    1c94:	b25b      	sxtb	r3, r3
    1c96:	2b00      	cmp	r3, #0
    1c98:	d000      	beq.n	1c9c <hif_send+0xfc>
    1c9a:	e0ee      	b.n	1e7a <hif_send+0x2da>


		reg = 0;
    1c9c:	2300      	movs	r3, #0
    1c9e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    1ca0:	697b      	ldr	r3, [r7, #20]
    1ca2:	2202      	movs	r2, #2
    1ca4:	4313      	orrs	r3, r2
    1ca6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1ca8:	697b      	ldr	r3, [r7, #20]
    1caa:	221f      	movs	r2, #31
    1cac:	18bc      	adds	r4, r7, r2
    1cae:	4a7e      	ldr	r2, [pc, #504]	; (1ea8 <hif_send+0x308>)
    1cb0:	0019      	movs	r1, r3
    1cb2:	0010      	movs	r0, r2
    1cb4:	4b7b      	ldr	r3, [pc, #492]	; (1ea4 <hif_send+0x304>)
    1cb6:	4798      	blx	r3
    1cb8:	0003      	movs	r3, r0
    1cba:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1cbc:	231f      	movs	r3, #31
    1cbe:	18fb      	adds	r3, r7, r3
    1cc0:	781b      	ldrb	r3, [r3, #0]
    1cc2:	b25b      	sxtb	r3, r3
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d000      	beq.n	1cca <hif_send+0x12a>
    1cc8:	e0d9      	b.n	1e7e <hif_send+0x2de>
		dma_addr = 0;
    1cca:	2300      	movs	r3, #0
    1ccc:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1cce:	230e      	movs	r3, #14
    1cd0:	18fb      	adds	r3, r7, r3
    1cd2:	2200      	movs	r2, #0
    1cd4:	801a      	strh	r2, [r3, #0]
    1cd6:	e031      	b.n	1d3c <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1cd8:	231f      	movs	r3, #31
    1cda:	18fc      	adds	r4, r7, r3
    1cdc:	2314      	movs	r3, #20
    1cde:	18fb      	adds	r3, r7, r3
    1ce0:	4a71      	ldr	r2, [pc, #452]	; (1ea8 <hif_send+0x308>)
    1ce2:	0019      	movs	r1, r3
    1ce4:	0010      	movs	r0, r2
    1ce6:	4b71      	ldr	r3, [pc, #452]	; (1eac <hif_send+0x30c>)
    1ce8:	4798      	blx	r3
    1cea:	0003      	movs	r3, r0
    1cec:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    1cee:	231f      	movs	r3, #31
    1cf0:	18fb      	adds	r3, r7, r3
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	b25b      	sxtb	r3, r3
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d128      	bne.n	1d4c <hif_send+0x1ac>
			if (!(reg & 0x2))
    1cfa:	697b      	ldr	r3, [r7, #20]
    1cfc:	2202      	movs	r2, #2
    1cfe:	4013      	ands	r3, r2
    1d00:	d113      	bne.n	1d2a <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    1d02:	231f      	movs	r3, #31
    1d04:	18fc      	adds	r4, r7, r3
    1d06:	2310      	movs	r3, #16
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	4a69      	ldr	r2, [pc, #420]	; (1eb0 <hif_send+0x310>)
    1d0c:	0019      	movs	r1, r3
    1d0e:	0010      	movs	r0, r2
    1d10:	4b66      	ldr	r3, [pc, #408]	; (1eac <hif_send+0x30c>)
    1d12:	4798      	blx	r3
    1d14:	0003      	movs	r3, r0
    1d16:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    1d18:	231f      	movs	r3, #31
    1d1a:	18fb      	adds	r3, r7, r3
    1d1c:	781b      	ldrb	r3, [r3, #0]
    1d1e:	b25b      	sxtb	r3, r3
    1d20:	2b00      	cmp	r3, #0
    1d22:	d015      	beq.n	1d50 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    1d24:	2300      	movs	r3, #0
    1d26:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    1d28:	e012      	b.n	1d50 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1d2a:	230e      	movs	r3, #14
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	881b      	ldrh	r3, [r3, #0]
    1d30:	b29b      	uxth	r3, r3
    1d32:	3301      	adds	r3, #1
    1d34:	b29a      	uxth	r2, r3
    1d36:	230e      	movs	r3, #14
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	801a      	strh	r2, [r3, #0]
    1d3c:	230e      	movs	r3, #14
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	881b      	ldrh	r3, [r3, #0]
    1d42:	b29b      	uxth	r3, r3
    1d44:	4a5b      	ldr	r2, [pc, #364]	; (1eb4 <hif_send+0x314>)
    1d46:	4293      	cmp	r3, r2
    1d48:	d9c6      	bls.n	1cd8 <hif_send+0x138>
    1d4a:	e002      	b.n	1d52 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    1d4c:	46c0      	nop			; (mov r8, r8)
    1d4e:	e000      	b.n	1d52 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    1d50:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    1d52:	693b      	ldr	r3, [r7, #16]
    1d54:	2b00      	cmp	r3, #0
    1d56:	d100      	bne.n	1d5a <hif_send+0x1ba>
    1d58:	e073      	b.n	1e42 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1d5a:	693b      	ldr	r3, [r7, #16]
    1d5c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1d5e:	2318      	movs	r3, #24
    1d60:	18fb      	adds	r3, r7, r3
    1d62:	885b      	ldrh	r3, [r3, #2]
    1d64:	b29a      	uxth	r2, r3
    1d66:	2318      	movs	r3, #24
    1d68:	18fb      	adds	r3, r7, r3
    1d6a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1d6c:	68bb      	ldr	r3, [r7, #8]
    1d6e:	221f      	movs	r2, #31
    1d70:	18bc      	adds	r4, r7, r2
    1d72:	2218      	movs	r2, #24
    1d74:	18b9      	adds	r1, r7, r2
    1d76:	2208      	movs	r2, #8
    1d78:	0018      	movs	r0, r3
    1d7a:	4b4f      	ldr	r3, [pc, #316]	; (1eb8 <hif_send+0x318>)
    1d7c:	4798      	blx	r3
    1d7e:	0003      	movs	r3, r0
    1d80:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    1d82:	231f      	movs	r3, #31
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	781b      	ldrb	r3, [r3, #0]
    1d88:	b25b      	sxtb	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d000      	beq.n	1d90 <hif_send+0x1f0>
    1d8e:	e078      	b.n	1e82 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1d90:	68bb      	ldr	r3, [r7, #8]
    1d92:	3308      	adds	r3, #8
    1d94:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    1d96:	683b      	ldr	r3, [r7, #0]
    1d98:	2b00      	cmp	r3, #0
    1d9a:	d015      	beq.n	1dc8 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1d9c:	68b8      	ldr	r0, [r7, #8]
    1d9e:	1d3b      	adds	r3, r7, #4
    1da0:	881a      	ldrh	r2, [r3, #0]
    1da2:	231f      	movs	r3, #31
    1da4:	18fc      	adds	r4, r7, r3
    1da6:	683b      	ldr	r3, [r7, #0]
    1da8:	0019      	movs	r1, r3
    1daa:	4b43      	ldr	r3, [pc, #268]	; (1eb8 <hif_send+0x318>)
    1dac:	4798      	blx	r3
    1dae:	0003      	movs	r3, r0
    1db0:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1db2:	231f      	movs	r3, #31
    1db4:	18fb      	adds	r3, r7, r3
    1db6:	781b      	ldrb	r3, [r3, #0]
    1db8:	b25b      	sxtb	r3, r3
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d163      	bne.n	1e86 <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    1dbe:	1d3b      	adds	r3, r7, #4
    1dc0:	881a      	ldrh	r2, [r3, #0]
    1dc2:	68bb      	ldr	r3, [r7, #8]
    1dc4:	18d3      	adds	r3, r2, r3
    1dc6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    1dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1dca:	2b00      	cmp	r3, #0
    1dcc:	d021      	beq.n	1e12 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1dce:	2338      	movs	r3, #56	; 0x38
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	881a      	ldrh	r2, [r3, #0]
    1dd4:	1d3b      	adds	r3, r7, #4
    1dd6:	881b      	ldrh	r3, [r3, #0]
    1dd8:	1ad3      	subs	r3, r2, r3
    1dda:	001a      	movs	r2, r3
    1ddc:	68bb      	ldr	r3, [r7, #8]
    1dde:	18d3      	adds	r3, r2, r3
    1de0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    1de2:	68b8      	ldr	r0, [r7, #8]
    1de4:	2334      	movs	r3, #52	; 0x34
    1de6:	18fb      	adds	r3, r7, r3
    1de8:	881a      	ldrh	r2, [r3, #0]
    1dea:	231f      	movs	r3, #31
    1dec:	18fc      	adds	r4, r7, r3
    1dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1df0:	0019      	movs	r1, r3
    1df2:	4b31      	ldr	r3, [pc, #196]	; (1eb8 <hif_send+0x318>)
    1df4:	4798      	blx	r3
    1df6:	0003      	movs	r3, r0
    1df8:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1dfa:	231f      	movs	r3, #31
    1dfc:	18fb      	adds	r3, r7, r3
    1dfe:	781b      	ldrb	r3, [r3, #0]
    1e00:	b25b      	sxtb	r3, r3
    1e02:	2b00      	cmp	r3, #0
    1e04:	d141      	bne.n	1e8a <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    1e06:	2334      	movs	r3, #52	; 0x34
    1e08:	18fb      	adds	r3, r7, r3
    1e0a:	881a      	ldrh	r2, [r3, #0]
    1e0c:	68bb      	ldr	r3, [r7, #8]
    1e0e:	18d3      	adds	r3, r2, r3
    1e10:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    1e12:	693b      	ldr	r3, [r7, #16]
    1e14:	009b      	lsls	r3, r3, #2
    1e16:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    1e18:	697b      	ldr	r3, [r7, #20]
    1e1a:	2202      	movs	r2, #2
    1e1c:	4313      	orrs	r3, r2
    1e1e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1e20:	697b      	ldr	r3, [r7, #20]
    1e22:	221f      	movs	r2, #31
    1e24:	18bc      	adds	r4, r7, r2
    1e26:	4a25      	ldr	r2, [pc, #148]	; (1ebc <hif_send+0x31c>)
    1e28:	0019      	movs	r1, r3
    1e2a:	0010      	movs	r0, r2
    1e2c:	4b1d      	ldr	r3, [pc, #116]	; (1ea4 <hif_send+0x304>)
    1e2e:	4798      	blx	r3
    1e30:	0003      	movs	r3, r0
    1e32:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1e34:	231f      	movs	r3, #31
    1e36:	18fb      	adds	r3, r7, r3
    1e38:	781b      	ldrb	r3, [r3, #0]
    1e3a:	b25b      	sxtb	r3, r3
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d015      	beq.n	1e6c <hif_send+0x2cc>
    1e40:	e024      	b.n	1e8c <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    1e42:	231f      	movs	r3, #31
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	22fd      	movs	r2, #253	; 0xfd
    1e48:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1e4a:	e01f      	b.n	1e8c <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1e4c:	23a0      	movs	r3, #160	; 0xa0
    1e4e:	33ff      	adds	r3, #255	; 0xff
    1e50:	001a      	movs	r2, r3
    1e52:	491b      	ldr	r1, [pc, #108]	; (1ec0 <hif_send+0x320>)
    1e54:	4b1b      	ldr	r3, [pc, #108]	; (1ec4 <hif_send+0x324>)
    1e56:	0018      	movs	r0, r3
    1e58:	4b1b      	ldr	r3, [pc, #108]	; (1ec8 <hif_send+0x328>)
    1e5a:	4798      	blx	r3
    1e5c:	4b1b      	ldr	r3, [pc, #108]	; (1ecc <hif_send+0x32c>)
    1e5e:	0018      	movs	r0, r3
    1e60:	4b1b      	ldr	r3, [pc, #108]	; (1ed0 <hif_send+0x330>)
    1e62:	4798      	blx	r3
    1e64:	200d      	movs	r0, #13
    1e66:	4b1b      	ldr	r3, [pc, #108]	; (1ed4 <hif_send+0x334>)
    1e68:	4798      	blx	r3
		goto ERR1;
    1e6a:	e00f      	b.n	1e8c <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    1e6c:	231f      	movs	r3, #31
    1e6e:	18fc      	adds	r4, r7, r3
    1e70:	4b19      	ldr	r3, [pc, #100]	; (1ed8 <hif_send+0x338>)
    1e72:	4798      	blx	r3
    1e74:	0003      	movs	r3, r0
    1e76:	7023      	strb	r3, [r4, #0]
    1e78:	e008      	b.n	1e8c <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	e006      	b.n	1e8c <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	e004      	b.n	1e8c <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	e002      	b.n	1e8c <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	e000      	b.n	1e8c <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1e8a:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    1e8c:	231f      	movs	r3, #31
    1e8e:	18fb      	adds	r3, r7, r3
    1e90:	781b      	ldrb	r3, [r3, #0]
    1e92:	b25b      	sxtb	r3, r3
}
    1e94:	0018      	movs	r0, r3
    1e96:	46bd      	mov	sp, r7
    1e98:	b009      	add	sp, #36	; 0x24
    1e9a:	bd90      	pop	{r4, r7, pc}
    1e9c:	00001a3d 	.word	0x00001a3d
    1ea0:	0000108c 	.word	0x0000108c
    1ea4:	00002a59 	.word	0x00002a59
    1ea8:	00001078 	.word	0x00001078
    1eac:	00002a35 	.word	0x00002a35
    1eb0:	00150400 	.word	0x00150400
    1eb4:	000003e7 	.word	0x000003e7
    1eb8:	00002ba1 	.word	0x00002ba1
    1ebc:	0000106c 	.word	0x0000106c
    1ec0:	0000d96c 	.word	0x0000d96c
    1ec4:	0000d72c 	.word	0x0000d72c
    1ec8:	0000c5d9 	.word	0x0000c5d9
    1ecc:	0000d740 	.word	0x0000d740
    1ed0:	0000c6f9 	.word	0x0000c6f9
    1ed4:	0000c60d 	.word	0x0000c60d
    1ed8:	00001ad5 	.word	0x00001ad5

00001edc <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    1edc:	b590      	push	{r4, r7, lr}
    1ede:	b087      	sub	sp, #28
    1ee0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    1ee2:	230f      	movs	r3, #15
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	22fa      	movs	r2, #250	; 0xfa
    1ee8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    1eea:	230f      	movs	r3, #15
    1eec:	18fc      	adds	r4, r7, r3
    1eee:	4bda      	ldr	r3, [pc, #872]	; (2258 <STACK_SIZE+0x258>)
    1ef0:	4798      	blx	r3
    1ef2:	0003      	movs	r3, r0
    1ef4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    1ef6:	230f      	movs	r3, #15
    1ef8:	18fb      	adds	r3, r7, r3
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	b25b      	sxtb	r3, r3
    1efe:	2b00      	cmp	r3, #0
    1f00:	d000      	beq.n	1f04 <hif_isr+0x28>
    1f02:	e192      	b.n	222a <STACK_SIZE+0x22a>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1f04:	230f      	movs	r3, #15
    1f06:	18fc      	adds	r4, r7, r3
    1f08:	2308      	movs	r3, #8
    1f0a:	18fb      	adds	r3, r7, r3
    1f0c:	4ad3      	ldr	r2, [pc, #844]	; (225c <STACK_SIZE+0x25c>)
    1f0e:	0019      	movs	r1, r3
    1f10:	0010      	movs	r0, r2
    1f12:	4bd3      	ldr	r3, [pc, #844]	; (2260 <STACK_SIZE+0x260>)
    1f14:	4798      	blx	r3
    1f16:	0003      	movs	r3, r0
    1f18:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    1f1a:	230f      	movs	r3, #15
    1f1c:	18fb      	adds	r3, r7, r3
    1f1e:	781b      	ldrb	r3, [r3, #0]
    1f20:	b25b      	sxtb	r3, r3
    1f22:	2b00      	cmp	r3, #0
    1f24:	d000      	beq.n	1f28 <hif_isr+0x4c>
    1f26:	e172      	b.n	220e <STACK_SIZE+0x20e>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    1f28:	68bb      	ldr	r3, [r7, #8]
    1f2a:	2201      	movs	r2, #1
    1f2c:	4013      	ands	r3, r2
    1f2e:	d100      	bne.n	1f32 <hif_isr+0x56>
    1f30:	e15c      	b.n	21ec <STACK_SIZE+0x1ec>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    1f32:	2000      	movs	r0, #0
    1f34:	4bcb      	ldr	r3, [pc, #812]	; (2264 <STACK_SIZE+0x264>)
    1f36:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    1f38:	68bb      	ldr	r3, [r7, #8]
    1f3a:	2201      	movs	r2, #1
    1f3c:	4393      	bics	r3, r2
    1f3e:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1f40:	68bb      	ldr	r3, [r7, #8]
    1f42:	220f      	movs	r2, #15
    1f44:	18bc      	adds	r4, r7, r2
    1f46:	4ac5      	ldr	r2, [pc, #788]	; (225c <STACK_SIZE+0x25c>)
    1f48:	0019      	movs	r1, r3
    1f4a:	0010      	movs	r0, r2
    1f4c:	4bc6      	ldr	r3, [pc, #792]	; (2268 <STACK_SIZE+0x268>)
    1f4e:	4798      	blx	r3
    1f50:	0003      	movs	r3, r0
    1f52:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    1f54:	230f      	movs	r3, #15
    1f56:	18fb      	adds	r3, r7, r3
    1f58:	781b      	ldrb	r3, [r3, #0]
    1f5a:	b25b      	sxtb	r3, r3
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d000      	beq.n	1f62 <hif_isr+0x86>
    1f60:	e1bc      	b.n	22dc <STACK_SIZE+0x2dc>
				gu8HifSizeDone = 0;
    1f62:	4bc2      	ldr	r3, [pc, #776]	; (226c <STACK_SIZE+0x26c>)
    1f64:	2200      	movs	r2, #0
    1f66:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    1f68:	68bb      	ldr	r3, [r7, #8]
    1f6a:	089b      	lsrs	r3, r3, #2
    1f6c:	b29a      	uxth	r2, r3
    1f6e:	230c      	movs	r3, #12
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	0512      	lsls	r2, r2, #20
    1f74:	0d12      	lsrs	r2, r2, #20
    1f76:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    1f78:	230c      	movs	r3, #12
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	881b      	ldrh	r3, [r3, #0]
    1f7e:	2b00      	cmp	r3, #0
    1f80:	d100      	bne.n	1f84 <hif_isr+0xa8>
    1f82:	e121      	b.n	21c8 <STACK_SIZE+0x1c8>
					uint32 address = 0;
    1f84:	2300      	movs	r3, #0
    1f86:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1f88:	230f      	movs	r3, #15
    1f8a:	18fc      	adds	r4, r7, r3
    1f8c:	003b      	movs	r3, r7
    1f8e:	4ab8      	ldr	r2, [pc, #736]	; (2270 <STACK_SIZE+0x270>)
    1f90:	0019      	movs	r1, r3
    1f92:	0010      	movs	r0, r2
    1f94:	4bb2      	ldr	r3, [pc, #712]	; (2260 <STACK_SIZE+0x260>)
    1f96:	4798      	blx	r3
    1f98:	0003      	movs	r3, r0
    1f9a:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    1f9c:	230f      	movs	r3, #15
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	b25b      	sxtb	r3, r3
    1fa4:	2b00      	cmp	r3, #0
    1fa6:	d011      	beq.n	1fcc <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1fa8:	23e7      	movs	r3, #231	; 0xe7
    1faa:	005a      	lsls	r2, r3, #1
    1fac:	49b1      	ldr	r1, [pc, #708]	; (2274 <STACK_SIZE+0x274>)
    1fae:	4bb2      	ldr	r3, [pc, #712]	; (2278 <STACK_SIZE+0x278>)
    1fb0:	0018      	movs	r0, r3
    1fb2:	4bb2      	ldr	r3, [pc, #712]	; (227c <STACK_SIZE+0x27c>)
    1fb4:	4798      	blx	r3
    1fb6:	4bb2      	ldr	r3, [pc, #712]	; (2280 <STACK_SIZE+0x280>)
    1fb8:	0018      	movs	r0, r3
    1fba:	4bb2      	ldr	r3, [pc, #712]	; (2284 <STACK_SIZE+0x284>)
    1fbc:	4798      	blx	r3
    1fbe:	200d      	movs	r0, #13
    1fc0:	4bb1      	ldr	r3, [pc, #708]	; (2288 <STACK_SIZE+0x288>)
    1fc2:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1fc4:	2001      	movs	r0, #1
    1fc6:	4ba7      	ldr	r3, [pc, #668]	; (2264 <STACK_SIZE+0x264>)
    1fc8:	4798      	blx	r3
						goto ERR1;
    1fca:	e188      	b.n	22de <STACK_SIZE+0x2de>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    1fcc:	683b      	ldr	r3, [r7, #0]
    1fce:	220f      	movs	r2, #15
    1fd0:	18bc      	adds	r4, r7, r2
    1fd2:	1d39      	adds	r1, r7, #4
    1fd4:	2204      	movs	r2, #4
    1fd6:	0018      	movs	r0, r3
    1fd8:	4bac      	ldr	r3, [pc, #688]	; (228c <STACK_SIZE+0x28c>)
    1fda:	4798      	blx	r3
    1fdc:	0003      	movs	r3, r0
    1fde:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1fe0:	1d3b      	adds	r3, r7, #4
    1fe2:	885b      	ldrh	r3, [r3, #2]
    1fe4:	b29a      	uxth	r2, r3
    1fe6:	1d3b      	adds	r3, r7, #4
    1fe8:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    1fea:	230f      	movs	r3, #15
    1fec:	18fb      	adds	r3, r7, r3
    1fee:	781b      	ldrb	r3, [r3, #0]
    1ff0:	b25b      	sxtb	r3, r3
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d011      	beq.n	201a <STACK_SIZE+0x1a>
					{
						M2M_ERR("(hif) address bus fail\n");
    1ff6:	23eb      	movs	r3, #235	; 0xeb
    1ff8:	005a      	lsls	r2, r3, #1
    1ffa:	499e      	ldr	r1, [pc, #632]	; (2274 <STACK_SIZE+0x274>)
    1ffc:	4b9e      	ldr	r3, [pc, #632]	; (2278 <STACK_SIZE+0x278>)
    1ffe:	0018      	movs	r0, r3
    2000:	4b9e      	ldr	r3, [pc, #632]	; (227c <STACK_SIZE+0x27c>)
    2002:	4798      	blx	r3
    2004:	4ba2      	ldr	r3, [pc, #648]	; (2290 <STACK_SIZE+0x290>)
    2006:	0018      	movs	r0, r3
    2008:	4b9e      	ldr	r3, [pc, #632]	; (2284 <STACK_SIZE+0x284>)
    200a:	4798      	blx	r3
    200c:	200d      	movs	r0, #13
    200e:	4b9e      	ldr	r3, [pc, #632]	; (2288 <STACK_SIZE+0x288>)
    2010:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    2012:	2001      	movs	r0, #1
    2014:	4b93      	ldr	r3, [pc, #588]	; (2264 <STACK_SIZE+0x264>)
    2016:	4798      	blx	r3
						goto ERR1;
    2018:	e161      	b.n	22de <STACK_SIZE+0x2de>
					}
					if(strHif.u16Length != size)
    201a:	1d3b      	adds	r3, r7, #4
    201c:	885b      	ldrh	r3, [r3, #2]
    201e:	b29b      	uxth	r3, r3
    2020:	220c      	movs	r2, #12
    2022:	18ba      	adds	r2, r7, r2
    2024:	8812      	ldrh	r2, [r2, #0]
    2026:	429a      	cmp	r2, r3
    2028:	d02e      	beq.n	2088 <STACK_SIZE+0x88>
					{
						if((size - strHif.u16Length) > 4)
    202a:	230c      	movs	r3, #12
    202c:	18fb      	adds	r3, r7, r3
    202e:	881b      	ldrh	r3, [r3, #0]
    2030:	1d3a      	adds	r2, r7, #4
    2032:	8852      	ldrh	r2, [r2, #2]
    2034:	b292      	uxth	r2, r2
    2036:	1a9b      	subs	r3, r3, r2
    2038:	2b04      	cmp	r3, #4
    203a:	dd25      	ble.n	2088 <STACK_SIZE+0x88>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    203c:	23e0      	movs	r3, #224	; 0xe0
    203e:	33ff      	adds	r3, #255	; 0xff
    2040:	001a      	movs	r2, r3
    2042:	498c      	ldr	r1, [pc, #560]	; (2274 <STACK_SIZE+0x274>)
    2044:	4b8c      	ldr	r3, [pc, #560]	; (2278 <STACK_SIZE+0x278>)
    2046:	0018      	movs	r0, r3
    2048:	4b8c      	ldr	r3, [pc, #560]	; (227c <STACK_SIZE+0x27c>)
    204a:	4798      	blx	r3
    204c:	230c      	movs	r3, #12
    204e:	18fb      	adds	r3, r7, r3
    2050:	8819      	ldrh	r1, [r3, #0]
    2052:	1d3b      	adds	r3, r7, #4
    2054:	885b      	ldrh	r3, [r3, #2]
    2056:	b29b      	uxth	r3, r3
    2058:	001a      	movs	r2, r3
    205a:	1d3b      	adds	r3, r7, #4
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	b2db      	uxtb	r3, r3
    2060:	001c      	movs	r4, r3
    2062:	1d3b      	adds	r3, r7, #4
    2064:	785b      	ldrb	r3, [r3, #1]
    2066:	b2db      	uxtb	r3, r3
    2068:	488a      	ldr	r0, [pc, #552]	; (2294 <STACK_SIZE+0x294>)
    206a:	9300      	str	r3, [sp, #0]
    206c:	0023      	movs	r3, r4
    206e:	4c83      	ldr	r4, [pc, #524]	; (227c <STACK_SIZE+0x27c>)
    2070:	47a0      	blx	r4
    2072:	200d      	movs	r0, #13
    2074:	4b84      	ldr	r3, [pc, #528]	; (2288 <STACK_SIZE+0x288>)
    2076:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    2078:	2001      	movs	r0, #1
    207a:	4b7a      	ldr	r3, [pc, #488]	; (2264 <STACK_SIZE+0x264>)
    207c:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    207e:	230f      	movs	r3, #15
    2080:	18fb      	adds	r3, r7, r3
    2082:	22fa      	movs	r2, #250	; 0xfa
    2084:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    2086:	e12a      	b.n	22de <STACK_SIZE+0x2de>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    2088:	1d3b      	adds	r3, r7, #4
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	b2db      	uxtb	r3, r3
    208e:	2b01      	cmp	r3, #1
    2090:	d112      	bne.n	20b8 <STACK_SIZE+0xb8>
					{
						if(pfWifiCb)
    2092:	4b81      	ldr	r3, [pc, #516]	; (2298 <STACK_SIZE+0x298>)
    2094:	681b      	ldr	r3, [r3, #0]
    2096:	2b00      	cmp	r3, #0
    2098:	d100      	bne.n	209c <STACK_SIZE+0x9c>
    209a:	e07c      	b.n	2196 <STACK_SIZE+0x196>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    209c:	4b7e      	ldr	r3, [pc, #504]	; (2298 <STACK_SIZE+0x298>)
    209e:	681b      	ldr	r3, [r3, #0]
    20a0:	1d3a      	adds	r2, r7, #4
    20a2:	7852      	ldrb	r2, [r2, #1]
    20a4:	b2d0      	uxtb	r0, r2
    20a6:	1d3a      	adds	r2, r7, #4
    20a8:	8852      	ldrh	r2, [r2, #2]
    20aa:	b292      	uxth	r2, r2
    20ac:	3a08      	subs	r2, #8
    20ae:	b291      	uxth	r1, r2
    20b0:	683a      	ldr	r2, [r7, #0]
    20b2:	3208      	adds	r2, #8
    20b4:	4798      	blx	r3
    20b6:	e06e      	b.n	2196 <STACK_SIZE+0x196>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    20b8:	1d3b      	adds	r3, r7, #4
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	b2db      	uxtb	r3, r3
    20be:	2b02      	cmp	r3, #2
    20c0:	d111      	bne.n	20e6 <STACK_SIZE+0xe6>
					{
						if(pfIpCb)
    20c2:	4b76      	ldr	r3, [pc, #472]	; (229c <STACK_SIZE+0x29c>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	2b00      	cmp	r3, #0
    20c8:	d065      	beq.n	2196 <STACK_SIZE+0x196>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    20ca:	4b74      	ldr	r3, [pc, #464]	; (229c <STACK_SIZE+0x29c>)
    20cc:	681b      	ldr	r3, [r3, #0]
    20ce:	1d3a      	adds	r2, r7, #4
    20d0:	7852      	ldrb	r2, [r2, #1]
    20d2:	b2d0      	uxtb	r0, r2
    20d4:	1d3a      	adds	r2, r7, #4
    20d6:	8852      	ldrh	r2, [r2, #2]
    20d8:	b292      	uxth	r2, r2
    20da:	3a08      	subs	r2, #8
    20dc:	b291      	uxth	r1, r2
    20de:	683a      	ldr	r2, [r7, #0]
    20e0:	3208      	adds	r2, #8
    20e2:	4798      	blx	r3
    20e4:	e057      	b.n	2196 <STACK_SIZE+0x196>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    20e6:	1d3b      	adds	r3, r7, #4
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	b2db      	uxtb	r3, r3
    20ec:	2b04      	cmp	r3, #4
    20ee:	d111      	bne.n	2114 <STACK_SIZE+0x114>
					{
						if(pfOtaCb)
    20f0:	4b6b      	ldr	r3, [pc, #428]	; (22a0 <STACK_SIZE+0x2a0>)
    20f2:	681b      	ldr	r3, [r3, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d04e      	beq.n	2196 <STACK_SIZE+0x196>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    20f8:	4b69      	ldr	r3, [pc, #420]	; (22a0 <STACK_SIZE+0x2a0>)
    20fa:	681b      	ldr	r3, [r3, #0]
    20fc:	1d3a      	adds	r2, r7, #4
    20fe:	7852      	ldrb	r2, [r2, #1]
    2100:	b2d0      	uxtb	r0, r2
    2102:	1d3a      	adds	r2, r7, #4
    2104:	8852      	ldrh	r2, [r2, #2]
    2106:	b292      	uxth	r2, r2
    2108:	3a08      	subs	r2, #8
    210a:	b291      	uxth	r1, r2
    210c:	683a      	ldr	r2, [r7, #0]
    210e:	3208      	adds	r2, #8
    2110:	4798      	blx	r3
    2112:	e040      	b.n	2196 <STACK_SIZE+0x196>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    2114:	1d3b      	adds	r3, r7, #4
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	b2db      	uxtb	r3, r3
    211a:	2b06      	cmp	r3, #6
    211c:	d111      	bne.n	2142 <STACK_SIZE+0x142>
					{
						if(pfCryptoCb)
    211e:	4b61      	ldr	r3, [pc, #388]	; (22a4 <STACK_SIZE+0x2a4>)
    2120:	681b      	ldr	r3, [r3, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d037      	beq.n	2196 <STACK_SIZE+0x196>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2126:	4b5f      	ldr	r3, [pc, #380]	; (22a4 <STACK_SIZE+0x2a4>)
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	1d3a      	adds	r2, r7, #4
    212c:	7852      	ldrb	r2, [r2, #1]
    212e:	b2d0      	uxtb	r0, r2
    2130:	1d3a      	adds	r2, r7, #4
    2132:	8852      	ldrh	r2, [r2, #2]
    2134:	b292      	uxth	r2, r2
    2136:	3a08      	subs	r2, #8
    2138:	b291      	uxth	r1, r2
    213a:	683a      	ldr	r2, [r7, #0]
    213c:	3208      	adds	r2, #8
    213e:	4798      	blx	r3
    2140:	e029      	b.n	2196 <STACK_SIZE+0x196>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    2142:	1d3b      	adds	r3, r7, #4
    2144:	781b      	ldrb	r3, [r3, #0]
    2146:	b2db      	uxtb	r3, r3
    2148:	2b07      	cmp	r3, #7
    214a:	d111      	bne.n	2170 <STACK_SIZE+0x170>
					{
						if(pfSigmaCb)
    214c:	4b56      	ldr	r3, [pc, #344]	; (22a8 <STACK_SIZE+0x2a8>)
    214e:	681b      	ldr	r3, [r3, #0]
    2150:	2b00      	cmp	r3, #0
    2152:	d020      	beq.n	2196 <STACK_SIZE+0x196>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2154:	4b54      	ldr	r3, [pc, #336]	; (22a8 <STACK_SIZE+0x2a8>)
    2156:	681b      	ldr	r3, [r3, #0]
    2158:	1d3a      	adds	r2, r7, #4
    215a:	7852      	ldrb	r2, [r2, #1]
    215c:	b2d0      	uxtb	r0, r2
    215e:	1d3a      	adds	r2, r7, #4
    2160:	8852      	ldrh	r2, [r2, #2]
    2162:	b292      	uxth	r2, r2
    2164:	3a08      	subs	r2, #8
    2166:	b291      	uxth	r1, r2
    2168:	683a      	ldr	r2, [r7, #0]
    216a:	3208      	adds	r2, #8
    216c:	4798      	blx	r3
    216e:	e012      	b.n	2196 <STACK_SIZE+0x196>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    2170:	4a4e      	ldr	r2, [pc, #312]	; (22ac <STACK_SIZE+0x2ac>)
    2172:	4940      	ldr	r1, [pc, #256]	; (2274 <STACK_SIZE+0x274>)
    2174:	4b40      	ldr	r3, [pc, #256]	; (2278 <STACK_SIZE+0x278>)
    2176:	0018      	movs	r0, r3
    2178:	4b40      	ldr	r3, [pc, #256]	; (227c <STACK_SIZE+0x27c>)
    217a:	4798      	blx	r3
    217c:	4b4c      	ldr	r3, [pc, #304]	; (22b0 <STACK_SIZE+0x2b0>)
    217e:	0018      	movs	r0, r3
    2180:	4b40      	ldr	r3, [pc, #256]	; (2284 <STACK_SIZE+0x284>)
    2182:	4798      	blx	r3
    2184:	200d      	movs	r0, #13
    2186:	4b40      	ldr	r3, [pc, #256]	; (2288 <STACK_SIZE+0x288>)
    2188:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    218a:	230f      	movs	r3, #15
    218c:	18fb      	adds	r3, r7, r3
    218e:	22fa      	movs	r2, #250	; 0xfa
    2190:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	e0a3      	b.n	22de <STACK_SIZE+0x2de>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    2196:	4b35      	ldr	r3, [pc, #212]	; (226c <STACK_SIZE+0x26c>)
    2198:	781b      	ldrb	r3, [r3, #0]
    219a:	b2db      	uxtb	r3, r3
    219c:	2b00      	cmp	r3, #0
    219e:	d153      	bne.n	2248 <STACK_SIZE+0x248>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    21a0:	4a44      	ldr	r2, [pc, #272]	; (22b4 <STACK_SIZE+0x2b4>)
    21a2:	4934      	ldr	r1, [pc, #208]	; (2274 <STACK_SIZE+0x274>)
    21a4:	4b34      	ldr	r3, [pc, #208]	; (2278 <STACK_SIZE+0x278>)
    21a6:	0018      	movs	r0, r3
    21a8:	4b34      	ldr	r3, [pc, #208]	; (227c <STACK_SIZE+0x27c>)
    21aa:	4798      	blx	r3
    21ac:	4b42      	ldr	r3, [pc, #264]	; (22b8 <STACK_SIZE+0x2b8>)
    21ae:	0018      	movs	r0, r3
    21b0:	4b34      	ldr	r3, [pc, #208]	; (2284 <STACK_SIZE+0x284>)
    21b2:	4798      	blx	r3
    21b4:	200d      	movs	r0, #13
    21b6:	4b34      	ldr	r3, [pc, #208]	; (2288 <STACK_SIZE+0x288>)
    21b8:	4798      	blx	r3
						ret = hif_set_rx_done();
    21ba:	230f      	movs	r3, #15
    21bc:	18fc      	adds	r4, r7, r3
    21be:	4b3f      	ldr	r3, [pc, #252]	; (22bc <STACK_SIZE+0x2bc>)
    21c0:	4798      	blx	r3
    21c2:	0003      	movs	r3, r0
    21c4:	7023      	strb	r3, [r4, #0]
    21c6:	e03f      	b.n	2248 <STACK_SIZE+0x248>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    21c8:	230f      	movs	r3, #15
    21ca:	18fb      	adds	r3, r7, r3
    21cc:	22fe      	movs	r2, #254	; 0xfe
    21ce:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    21d0:	4a3b      	ldr	r2, [pc, #236]	; (22c0 <STACK_SIZE+0x2c0>)
    21d2:	4928      	ldr	r1, [pc, #160]	; (2274 <STACK_SIZE+0x274>)
    21d4:	4b28      	ldr	r3, [pc, #160]	; (2278 <STACK_SIZE+0x278>)
    21d6:	0018      	movs	r0, r3
    21d8:	4b28      	ldr	r3, [pc, #160]	; (227c <STACK_SIZE+0x27c>)
    21da:	4798      	blx	r3
    21dc:	4b39      	ldr	r3, [pc, #228]	; (22c4 <STACK_SIZE+0x2c4>)
    21de:	0018      	movs	r0, r3
    21e0:	4b28      	ldr	r3, [pc, #160]	; (2284 <STACK_SIZE+0x284>)
    21e2:	4798      	blx	r3
    21e4:	200d      	movs	r0, #13
    21e6:	4b28      	ldr	r3, [pc, #160]	; (2288 <STACK_SIZE+0x288>)
    21e8:	4798      	blx	r3
					goto ERR1;
    21ea:	e078      	b.n	22de <STACK_SIZE+0x2de>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    21ec:	2386      	movs	r3, #134	; 0x86
    21ee:	009a      	lsls	r2, r3, #2
    21f0:	4920      	ldr	r1, [pc, #128]	; (2274 <STACK_SIZE+0x274>)
    21f2:	4b21      	ldr	r3, [pc, #132]	; (2278 <STACK_SIZE+0x278>)
    21f4:	0018      	movs	r0, r3
    21f6:	4b21      	ldr	r3, [pc, #132]	; (227c <STACK_SIZE+0x27c>)
    21f8:	4798      	blx	r3
    21fa:	68ba      	ldr	r2, [r7, #8]
    21fc:	4b32      	ldr	r3, [pc, #200]	; (22c8 <STACK_SIZE+0x2c8>)
    21fe:	0011      	movs	r1, r2
    2200:	0018      	movs	r0, r3
    2202:	4b1e      	ldr	r3, [pc, #120]	; (227c <STACK_SIZE+0x27c>)
    2204:	4798      	blx	r3
    2206:	200d      	movs	r0, #13
    2208:	4b1f      	ldr	r3, [pc, #124]	; (2288 <STACK_SIZE+0x288>)
    220a:	4798      	blx	r3
    220c:	e01c      	b.n	2248 <STACK_SIZE+0x248>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    220e:	4a2f      	ldr	r2, [pc, #188]	; (22cc <STACK_SIZE+0x2cc>)
    2210:	4918      	ldr	r1, [pc, #96]	; (2274 <STACK_SIZE+0x274>)
    2212:	4b19      	ldr	r3, [pc, #100]	; (2278 <STACK_SIZE+0x278>)
    2214:	0018      	movs	r0, r3
    2216:	4b19      	ldr	r3, [pc, #100]	; (227c <STACK_SIZE+0x27c>)
    2218:	4798      	blx	r3
    221a:	4b2d      	ldr	r3, [pc, #180]	; (22d0 <STACK_SIZE+0x2d0>)
    221c:	0018      	movs	r0, r3
    221e:	4b19      	ldr	r3, [pc, #100]	; (2284 <STACK_SIZE+0x284>)
    2220:	4798      	blx	r3
    2222:	200d      	movs	r0, #13
    2224:	4b18      	ldr	r3, [pc, #96]	; (2288 <STACK_SIZE+0x288>)
    2226:	4798      	blx	r3
			goto ERR1;
    2228:	e059      	b.n	22de <STACK_SIZE+0x2de>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    222a:	2389      	movs	r3, #137	; 0x89
    222c:	009a      	lsls	r2, r3, #2
    222e:	4911      	ldr	r1, [pc, #68]	; (2274 <STACK_SIZE+0x274>)
    2230:	4b11      	ldr	r3, [pc, #68]	; (2278 <STACK_SIZE+0x278>)
    2232:	0018      	movs	r0, r3
    2234:	4b11      	ldr	r3, [pc, #68]	; (227c <STACK_SIZE+0x27c>)
    2236:	4798      	blx	r3
    2238:	4b26      	ldr	r3, [pc, #152]	; (22d4 <STACK_SIZE+0x2d4>)
    223a:	0018      	movs	r0, r3
    223c:	4b11      	ldr	r3, [pc, #68]	; (2284 <STACK_SIZE+0x284>)
    223e:	4798      	blx	r3
    2240:	200d      	movs	r0, #13
    2242:	4b11      	ldr	r3, [pc, #68]	; (2288 <STACK_SIZE+0x288>)
    2244:	4798      	blx	r3
		goto ERR1;
    2246:	e04a      	b.n	22de <STACK_SIZE+0x2de>
	}

	ret = hif_chip_sleep();
    2248:	230f      	movs	r3, #15
    224a:	18fc      	adds	r4, r7, r3
    224c:	4b22      	ldr	r3, [pc, #136]	; (22d8 <STACK_SIZE+0x2d8>)
    224e:	4798      	blx	r3
    2250:	0003      	movs	r3, r0
    2252:	7023      	strb	r3, [r4, #0]
    2254:	e043      	b.n	22de <STACK_SIZE+0x2de>
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	00001a3d 	.word	0x00001a3d
    225c:	00001070 	.word	0x00001070
    2260:	00002a35 	.word	0x00002a35
    2264:	000015a1 	.word	0x000015a1
    2268:	00002a59 	.word	0x00002a59
    226c:	200000d2 	.word	0x200000d2
    2270:	00001084 	.word	0x00001084
    2274:	0000d978 	.word	0x0000d978
    2278:	0000d72c 	.word	0x0000d72c
    227c:	0000c5d9 	.word	0x0000c5d9
    2280:	0000d75c 	.word	0x0000d75c
    2284:	0000c6f9 	.word	0x0000c6f9
    2288:	0000c60d 	.word	0x0000c60d
    228c:	00002aa9 	.word	0x00002aa9
    2290:	0000d780 	.word	0x0000d780
    2294:	0000d798 	.word	0x0000d798
    2298:	200000d4 	.word	0x200000d4
    229c:	200000d8 	.word	0x200000d8
    22a0:	200000dc 	.word	0x200000dc
    22a4:	200000e4 	.word	0x200000e4
    22a8:	200000e0 	.word	0x200000e0
    22ac:	00000202 	.word	0x00000202
    22b0:	0000d7d8 	.word	0x0000d7d8
    22b4:	00000209 	.word	0x00000209
    22b8:	0000d7f0 	.word	0x0000d7f0
    22bc:	000019d1 	.word	0x000019d1
    22c0:	00000211 	.word	0x00000211
    22c4:	0000d814 	.word	0x0000d814
    22c8:	0000d828 	.word	0x0000d828
    22cc:	0000021e 	.word	0x0000021e
    22d0:	0000d844 	.word	0x0000d844
    22d4:	0000d868 	.word	0x0000d868
    22d8:	00001ad5 	.word	0x00001ad5

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    22dc:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    22de:	230f      	movs	r3, #15
    22e0:	18fb      	adds	r3, r7, r3
    22e2:	781b      	ldrb	r3, [r3, #0]
    22e4:	b25b      	sxtb	r3, r3
}
    22e6:	0018      	movs	r0, r3
    22e8:	46bd      	mov	sp, r7
    22ea:	b005      	add	sp, #20
    22ec:	bd90      	pop	{r4, r7, pc}
    22ee:	46c0      	nop			; (mov r8, r8)

000022f0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    22f0:	b590      	push	{r4, r7, lr}
    22f2:	b083      	sub	sp, #12
    22f4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    22f6:	1dfb      	adds	r3, r7, #7
    22f8:	2200      	movs	r2, #0
    22fa:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    22fc:	e023      	b.n	2346 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    22fe:	4b18      	ldr	r3, [pc, #96]	; (2360 <hif_handle_isr+0x70>)
    2300:	781b      	ldrb	r3, [r3, #0]
    2302:	b2db      	uxtb	r3, r3
    2304:	3b01      	subs	r3, #1
    2306:	b2da      	uxtb	r2, r3
    2308:	4b15      	ldr	r3, [pc, #84]	; (2360 <hif_handle_isr+0x70>)
    230a:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    230c:	1dfc      	adds	r4, r7, #7
    230e:	4b15      	ldr	r3, [pc, #84]	; (2364 <hif_handle_isr+0x74>)
    2310:	4798      	blx	r3
    2312:	0003      	movs	r3, r0
    2314:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2316:	1dfb      	adds	r3, r7, #7
    2318:	781b      	ldrb	r3, [r3, #0]
    231a:	b25b      	sxtb	r3, r3
    231c:	2b00      	cmp	r3, #0
    231e:	d100      	bne.n	2322 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    2320:	e011      	b.n	2346 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    2322:	4a11      	ldr	r2, [pc, #68]	; (2368 <hif_handle_isr+0x78>)
    2324:	4911      	ldr	r1, [pc, #68]	; (236c <hif_handle_isr+0x7c>)
    2326:	4b12      	ldr	r3, [pc, #72]	; (2370 <hif_handle_isr+0x80>)
    2328:	0018      	movs	r0, r3
    232a:	4b12      	ldr	r3, [pc, #72]	; (2374 <hif_handle_isr+0x84>)
    232c:	4798      	blx	r3
    232e:	1dfb      	adds	r3, r7, #7
    2330:	2200      	movs	r2, #0
    2332:	569a      	ldrsb	r2, [r3, r2]
    2334:	4b10      	ldr	r3, [pc, #64]	; (2378 <hif_handle_isr+0x88>)
    2336:	0011      	movs	r1, r2
    2338:	0018      	movs	r0, r3
    233a:	4b0e      	ldr	r3, [pc, #56]	; (2374 <hif_handle_isr+0x84>)
    233c:	4798      	blx	r3
    233e:	200d      	movs	r0, #13
    2340:	4b0e      	ldr	r3, [pc, #56]	; (237c <hif_handle_isr+0x8c>)
    2342:	4798      	blx	r3
			}
		}
    2344:	e7e2      	b.n	230c <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    2346:	4b06      	ldr	r3, [pc, #24]	; (2360 <hif_handle_isr+0x70>)
    2348:	781b      	ldrb	r3, [r3, #0]
    234a:	b2db      	uxtb	r3, r3
    234c:	2b00      	cmp	r3, #0
    234e:	d1d6      	bne.n	22fe <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    2350:	1dfb      	adds	r3, r7, #7
    2352:	781b      	ldrb	r3, [r3, #0]
    2354:	b25b      	sxtb	r3, r3
}
    2356:	0018      	movs	r0, r3
    2358:	46bd      	mov	sp, r7
    235a:	b003      	add	sp, #12
    235c:	bd90      	pop	{r4, r7, pc}
    235e:	46c0      	nop			; (mov r8, r8)
    2360:	200000d3 	.word	0x200000d3
    2364:	00001edd 	.word	0x00001edd
    2368:	00000243 	.word	0x00000243
    236c:	0000d980 	.word	0x0000d980
    2370:	0000d72c 	.word	0x0000d72c
    2374:	0000c5d9 	.word	0x0000c5d9
    2378:	0000d888 	.word	0x0000d888
    237c:	0000c60d 	.word	0x0000c60d

00002380 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    2380:	b580      	push	{r7, lr}
    2382:	b082      	sub	sp, #8
    2384:	af00      	add	r7, sp, #0
    2386:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    2388:	4b03      	ldr	r3, [pc, #12]	; (2398 <m2m_wifi_handle_events+0x18>)
    238a:	4798      	blx	r3
    238c:	0003      	movs	r3, r0
}
    238e:	0018      	movs	r0, r3
    2390:	46bd      	mov	sp, r7
    2392:	b002      	add	sp, #8
    2394:	bd80      	pop	{r7, pc}
    2396:	46c0      	nop			; (mov r8, r8)
    2398:	000022f1 	.word	0x000022f1

0000239c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    239c:	b590      	push	{r4, r7, lr}
    239e:	b087      	sub	sp, #28
    23a0:	af02      	add	r7, sp, #8
    23a2:	60f8      	str	r0, [r7, #12]
    23a4:	0008      	movs	r0, r1
    23a6:	0011      	movs	r1, r2
    23a8:	607b      	str	r3, [r7, #4]
    23aa:	230b      	movs	r3, #11
    23ac:	18fb      	adds	r3, r7, r3
    23ae:	1c02      	adds	r2, r0, #0
    23b0:	701a      	strb	r2, [r3, #0]
    23b2:	230a      	movs	r3, #10
    23b4:	18fb      	adds	r3, r7, r3
    23b6:	1c0a      	adds	r2, r1, #0
    23b8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    23ba:	687c      	ldr	r4, [r7, #4]
    23bc:	230a      	movs	r3, #10
    23be:	18fb      	adds	r3, r7, r3
    23c0:	781a      	ldrb	r2, [r3, #0]
    23c2:	230b      	movs	r3, #11
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	7819      	ldrb	r1, [r3, #0]
    23c8:	68f8      	ldr	r0, [r7, #12]
    23ca:	2300      	movs	r3, #0
    23cc:	9301      	str	r3, [sp, #4]
    23ce:	2320      	movs	r3, #32
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	881b      	ldrh	r3, [r3, #0]
    23d4:	9300      	str	r3, [sp, #0]
    23d6:	0023      	movs	r3, r4
    23d8:	4c03      	ldr	r4, [pc, #12]	; (23e8 <m2m_wifi_connect+0x4c>)
    23da:	47a0      	blx	r4
    23dc:	0003      	movs	r3, r0
}
    23de:	0018      	movs	r0, r3
    23e0:	46bd      	mov	sp, r7
    23e2:	b005      	add	sp, #20
    23e4:	bd90      	pop	{r4, r7, pc}
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	000023ed 	.word	0x000023ed

000023ec <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    23ec:	b5b0      	push	{r4, r5, r7, lr}
    23ee:	b0aa      	sub	sp, #168	; 0xa8
    23f0:	af04      	add	r7, sp, #16
    23f2:	60f8      	str	r0, [r7, #12]
    23f4:	0008      	movs	r0, r1
    23f6:	0011      	movs	r1, r2
    23f8:	607b      	str	r3, [r7, #4]
    23fa:	230b      	movs	r3, #11
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	1c02      	adds	r2, r0, #0
    2400:	701a      	strb	r2, [r3, #0]
    2402:	230a      	movs	r3, #10
    2404:	18fb      	adds	r3, r7, r3
    2406:	1c0a      	adds	r2, r1, #0
    2408:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    240a:	2397      	movs	r3, #151	; 0x97
    240c:	18fb      	adds	r3, r7, r3
    240e:	2200      	movs	r2, #0
    2410:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    2412:	230a      	movs	r3, #10
    2414:	18fb      	adds	r3, r7, r3
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b01      	cmp	r3, #1
    241a:	d100      	bne.n	241e <m2m_wifi_connect_sc+0x32>
    241c:	e083      	b.n	2526 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    241e:	687b      	ldr	r3, [r7, #4]
    2420:	2b00      	cmp	r3, #0
    2422:	d111      	bne.n	2448 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    2424:	4ad8      	ldr	r2, [pc, #864]	; (2788 <m2m_wifi_connect_sc+0x39c>)
    2426:	49d9      	ldr	r1, [pc, #868]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    2428:	4bd9      	ldr	r3, [pc, #868]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    242a:	0018      	movs	r0, r3
    242c:	4bd9      	ldr	r3, [pc, #868]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    242e:	4798      	blx	r3
    2430:	4bd9      	ldr	r3, [pc, #868]	; (2798 <m2m_wifi_connect_sc+0x3ac>)
    2432:	0018      	movs	r0, r3
    2434:	4bd9      	ldr	r3, [pc, #868]	; (279c <m2m_wifi_connect_sc+0x3b0>)
    2436:	4798      	blx	r3
    2438:	200d      	movs	r0, #13
    243a:	4bd9      	ldr	r3, [pc, #868]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    243c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    243e:	2397      	movs	r3, #151	; 0x97
    2440:	18fb      	adds	r3, r7, r3
    2442:	22f4      	movs	r2, #244	; 0xf4
    2444:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2446:	e1ef      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2448:	230a      	movs	r3, #10
    244a:	18fb      	adds	r3, r7, r3
    244c:	781b      	ldrb	r3, [r3, #0]
    244e:	2b02      	cmp	r3, #2
    2450:	d169      	bne.n	2526 <m2m_wifi_connect_sc+0x13a>
    2452:	687b      	ldr	r3, [r7, #4]
    2454:	0018      	movs	r0, r3
    2456:	4bd3      	ldr	r3, [pc, #844]	; (27a4 <m2m_wifi_connect_sc+0x3b8>)
    2458:	4798      	blx	r3
    245a:	1e03      	subs	r3, r0, #0
    245c:	2b40      	cmp	r3, #64	; 0x40
    245e:	d162      	bne.n	2526 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    2460:	2396      	movs	r3, #150	; 0x96
    2462:	18fb      	adds	r3, r7, r3
    2464:	2200      	movs	r2, #0
    2466:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	2290      	movs	r2, #144	; 0x90
    246c:	18ba      	adds	r2, r7, r2
    246e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    2470:	e054      	b.n	251c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    2472:	2396      	movs	r3, #150	; 0x96
    2474:	18fb      	adds	r3, r7, r3
    2476:	781b      	ldrb	r3, [r3, #0]
    2478:	2290      	movs	r2, #144	; 0x90
    247a:	18ba      	adds	r2, r7, r2
    247c:	6812      	ldr	r2, [r2, #0]
    247e:	18d3      	adds	r3, r2, r3
    2480:	781b      	ldrb	r3, [r3, #0]
    2482:	2b2f      	cmp	r3, #47	; 0x2f
    2484:	d931      	bls.n	24ea <m2m_wifi_connect_sc+0xfe>
    2486:	2396      	movs	r3, #150	; 0x96
    2488:	18fb      	adds	r3, r7, r3
    248a:	781b      	ldrb	r3, [r3, #0]
    248c:	2290      	movs	r2, #144	; 0x90
    248e:	18ba      	adds	r2, r7, r2
    2490:	6812      	ldr	r2, [r2, #0]
    2492:	18d3      	adds	r3, r2, r3
    2494:	781b      	ldrb	r3, [r3, #0]
    2496:	2b39      	cmp	r3, #57	; 0x39
    2498:	d909      	bls.n	24ae <m2m_wifi_connect_sc+0xc2>
    249a:	2396      	movs	r3, #150	; 0x96
    249c:	18fb      	adds	r3, r7, r3
    249e:	781b      	ldrb	r3, [r3, #0]
    24a0:	2290      	movs	r2, #144	; 0x90
    24a2:	18ba      	adds	r2, r7, r2
    24a4:	6812      	ldr	r2, [r2, #0]
    24a6:	18d3      	adds	r3, r2, r3
    24a8:	781b      	ldrb	r3, [r3, #0]
    24aa:	2b40      	cmp	r3, #64	; 0x40
    24ac:	d91d      	bls.n	24ea <m2m_wifi_connect_sc+0xfe>
    24ae:	2396      	movs	r3, #150	; 0x96
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	2290      	movs	r2, #144	; 0x90
    24b6:	18ba      	adds	r2, r7, r2
    24b8:	6812      	ldr	r2, [r2, #0]
    24ba:	18d3      	adds	r3, r2, r3
    24bc:	781b      	ldrb	r3, [r3, #0]
    24be:	2b46      	cmp	r3, #70	; 0x46
    24c0:	d909      	bls.n	24d6 <m2m_wifi_connect_sc+0xea>
    24c2:	2396      	movs	r3, #150	; 0x96
    24c4:	18fb      	adds	r3, r7, r3
    24c6:	781b      	ldrb	r3, [r3, #0]
    24c8:	2290      	movs	r2, #144	; 0x90
    24ca:	18ba      	adds	r2, r7, r2
    24cc:	6812      	ldr	r2, [r2, #0]
    24ce:	18d3      	adds	r3, r2, r3
    24d0:	781b      	ldrb	r3, [r3, #0]
    24d2:	2b60      	cmp	r3, #96	; 0x60
    24d4:	d909      	bls.n	24ea <m2m_wifi_connect_sc+0xfe>
    24d6:	2396      	movs	r3, #150	; 0x96
    24d8:	18fb      	adds	r3, r7, r3
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	2290      	movs	r2, #144	; 0x90
    24de:	18ba      	adds	r2, r7, r2
    24e0:	6812      	ldr	r2, [r2, #0]
    24e2:	18d3      	adds	r3, r2, r3
    24e4:	781b      	ldrb	r3, [r3, #0]
    24e6:	2b66      	cmp	r3, #102	; 0x66
    24e8:	d911      	bls.n	250e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    24ea:	4aaf      	ldr	r2, [pc, #700]	; (27a8 <m2m_wifi_connect_sc+0x3bc>)
    24ec:	49a7      	ldr	r1, [pc, #668]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    24ee:	4ba8      	ldr	r3, [pc, #672]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    24f0:	0018      	movs	r0, r3
    24f2:	4ba8      	ldr	r3, [pc, #672]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    24f4:	4798      	blx	r3
    24f6:	4bad      	ldr	r3, [pc, #692]	; (27ac <m2m_wifi_connect_sc+0x3c0>)
    24f8:	0018      	movs	r0, r3
    24fa:	4ba8      	ldr	r3, [pc, #672]	; (279c <m2m_wifi_connect_sc+0x3b0>)
    24fc:	4798      	blx	r3
    24fe:	200d      	movs	r0, #13
    2500:	4ba7      	ldr	r3, [pc, #668]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    2502:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    2504:	2397      	movs	r3, #151	; 0x97
    2506:	18fb      	adds	r3, r7, r3
    2508:	22f4      	movs	r2, #244	; 0xf4
    250a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    250c:	e18c      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    250e:	2396      	movs	r3, #150	; 0x96
    2510:	18fb      	adds	r3, r7, r3
    2512:	781a      	ldrb	r2, [r3, #0]
    2514:	2396      	movs	r3, #150	; 0x96
    2516:	18fb      	adds	r3, r7, r3
    2518:	3201      	adds	r2, #1
    251a:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    251c:	2396      	movs	r3, #150	; 0x96
    251e:	18fb      	adds	r3, r7, r3
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	2b3f      	cmp	r3, #63	; 0x3f
    2524:	d9a5      	bls.n	2472 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    2526:	230b      	movs	r3, #11
    2528:	18fb      	adds	r3, r7, r3
    252a:	781b      	ldrb	r3, [r3, #0]
    252c:	2b00      	cmp	r3, #0
    252e:	d004      	beq.n	253a <m2m_wifi_connect_sc+0x14e>
    2530:	230b      	movs	r3, #11
    2532:	18fb      	adds	r3, r7, r3
    2534:	781b      	ldrb	r3, [r3, #0]
    2536:	2b20      	cmp	r3, #32
    2538:	d911      	bls.n	255e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    253a:	4a9d      	ldr	r2, [pc, #628]	; (27b0 <m2m_wifi_connect_sc+0x3c4>)
    253c:	4993      	ldr	r1, [pc, #588]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    253e:	4b94      	ldr	r3, [pc, #592]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    2540:	0018      	movs	r0, r3
    2542:	4b94      	ldr	r3, [pc, #592]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    2544:	4798      	blx	r3
    2546:	4b9b      	ldr	r3, [pc, #620]	; (27b4 <m2m_wifi_connect_sc+0x3c8>)
    2548:	0018      	movs	r0, r3
    254a:	4b94      	ldr	r3, [pc, #592]	; (279c <m2m_wifi_connect_sc+0x3b0>)
    254c:	4798      	blx	r3
    254e:	200d      	movs	r0, #13
    2550:	4b93      	ldr	r3, [pc, #588]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    2552:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2554:	2397      	movs	r3, #151	; 0x97
    2556:	18fb      	adds	r3, r7, r3
    2558:	22f4      	movs	r2, #244	; 0xf4
    255a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    255c:	e164      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    255e:	23a8      	movs	r3, #168	; 0xa8
    2560:	18fb      	adds	r3, r7, r3
    2562:	881b      	ldrh	r3, [r3, #0]
    2564:	2b0d      	cmp	r3, #13
    2566:	d916      	bls.n	2596 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2568:	23a8      	movs	r3, #168	; 0xa8
    256a:	18fb      	adds	r3, r7, r3
    256c:	881b      	ldrh	r3, [r3, #0]
    256e:	2bff      	cmp	r3, #255	; 0xff
    2570:	d011      	beq.n	2596 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    2572:	4a91      	ldr	r2, [pc, #580]	; (27b8 <m2m_wifi_connect_sc+0x3cc>)
    2574:	4985      	ldr	r1, [pc, #532]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    2576:	4b86      	ldr	r3, [pc, #536]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    2578:	0018      	movs	r0, r3
    257a:	4b86      	ldr	r3, [pc, #536]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    257c:	4798      	blx	r3
    257e:	4b8f      	ldr	r3, [pc, #572]	; (27bc <m2m_wifi_connect_sc+0x3d0>)
    2580:	0018      	movs	r0, r3
    2582:	4b86      	ldr	r3, [pc, #536]	; (279c <m2m_wifi_connect_sc+0x3b0>)
    2584:	4798      	blx	r3
    2586:	200d      	movs	r0, #13
    2588:	4b85      	ldr	r3, [pc, #532]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    258a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    258c:	2397      	movs	r3, #151	; 0x97
    258e:	18fb      	adds	r3, r7, r3
    2590:	22f4      	movs	r2, #244	; 0xf4
    2592:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2594:	e148      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2596:	230b      	movs	r3, #11
    2598:	18fb      	adds	r3, r7, r3
    259a:	781a      	ldrb	r2, [r3, #0]
    259c:	68f9      	ldr	r1, [r7, #12]
    259e:	2314      	movs	r3, #20
    25a0:	18fb      	adds	r3, r7, r3
    25a2:	3346      	adds	r3, #70	; 0x46
    25a4:	0018      	movs	r0, r3
    25a6:	4b86      	ldr	r3, [pc, #536]	; (27c0 <m2m_wifi_connect_sc+0x3d4>)
    25a8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    25aa:	230b      	movs	r3, #11
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	2214      	movs	r2, #20
    25b2:	18ba      	adds	r2, r7, r2
    25b4:	2146      	movs	r1, #70	; 0x46
    25b6:	18d3      	adds	r3, r2, r3
    25b8:	185b      	adds	r3, r3, r1
    25ba:	2200      	movs	r2, #0
    25bc:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    25be:	2314      	movs	r3, #20
    25c0:	18fb      	adds	r3, r7, r3
    25c2:	22a8      	movs	r2, #168	; 0xa8
    25c4:	18ba      	adds	r2, r7, r2
    25c6:	2144      	movs	r1, #68	; 0x44
    25c8:	8812      	ldrh	r2, [r2, #0]
    25ca:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    25cc:	23ac      	movs	r3, #172	; 0xac
    25ce:	18fb      	adds	r3, r7, r3
    25d0:	781b      	ldrb	r3, [r3, #0]
    25d2:	1e5a      	subs	r2, r3, #1
    25d4:	4193      	sbcs	r3, r2
    25d6:	b2db      	uxtb	r3, r3
    25d8:	0019      	movs	r1, r3
    25da:	2314      	movs	r3, #20
    25dc:	18fb      	adds	r3, r7, r3
    25de:	2267      	movs	r2, #103	; 0x67
    25e0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    25e2:	2314      	movs	r3, #20
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	228c      	movs	r2, #140	; 0x8c
    25e8:	18ba      	adds	r2, r7, r2
    25ea:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    25ec:	238c      	movs	r3, #140	; 0x8c
    25ee:	18fb      	adds	r3, r7, r3
    25f0:	681b      	ldr	r3, [r3, #0]
    25f2:	220a      	movs	r2, #10
    25f4:	18ba      	adds	r2, r7, r2
    25f6:	2141      	movs	r1, #65	; 0x41
    25f8:	7812      	ldrb	r2, [r2, #0]
    25fa:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    25fc:	230a      	movs	r3, #10
    25fe:	18fb      	adds	r3, r7, r3
    2600:	781b      	ldrb	r3, [r3, #0]
    2602:	2b03      	cmp	r3, #3
    2604:	d000      	beq.n	2608 <m2m_wifi_connect_sc+0x21c>
    2606:	e07b      	b.n	2700 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    2608:	687b      	ldr	r3, [r7, #4]
    260a:	2288      	movs	r2, #136	; 0x88
    260c:	18ba      	adds	r2, r7, r2
    260e:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    2610:	238c      	movs	r3, #140	; 0x8c
    2612:	18fb      	adds	r3, r7, r3
    2614:	681b      	ldr	r3, [r3, #0]
    2616:	2284      	movs	r2, #132	; 0x84
    2618:	18ba      	adds	r2, r7, r2
    261a:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    261c:	2388      	movs	r3, #136	; 0x88
    261e:	18fb      	adds	r3, r7, r3
    2620:	681b      	ldr	r3, [r3, #0]
    2622:	781b      	ldrb	r3, [r3, #0]
    2624:	3b01      	subs	r3, #1
    2626:	b2da      	uxtb	r2, r3
    2628:	2384      	movs	r3, #132	; 0x84
    262a:	18fb      	adds	r3, r7, r3
    262c:	681b      	ldr	r3, [r3, #0]
    262e:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2630:	2384      	movs	r3, #132	; 0x84
    2632:	18fb      	adds	r3, r7, r3
    2634:	681b      	ldr	r3, [r3, #0]
    2636:	781b      	ldrb	r3, [r3, #0]
    2638:	2b03      	cmp	r3, #3
    263a:	d917      	bls.n	266c <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    263c:	4a61      	ldr	r2, [pc, #388]	; (27c4 <m2m_wifi_connect_sc+0x3d8>)
    263e:	4953      	ldr	r1, [pc, #332]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    2640:	4b53      	ldr	r3, [pc, #332]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    2642:	0018      	movs	r0, r3
    2644:	4b53      	ldr	r3, [pc, #332]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    2646:	4798      	blx	r3
    2648:	2384      	movs	r3, #132	; 0x84
    264a:	18fb      	adds	r3, r7, r3
    264c:	681b      	ldr	r3, [r3, #0]
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	001a      	movs	r2, r3
    2652:	4b5d      	ldr	r3, [pc, #372]	; (27c8 <m2m_wifi_connect_sc+0x3dc>)
    2654:	0011      	movs	r1, r2
    2656:	0018      	movs	r0, r3
    2658:	4b4e      	ldr	r3, [pc, #312]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    265a:	4798      	blx	r3
    265c:	200d      	movs	r0, #13
    265e:	4b50      	ldr	r3, [pc, #320]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    2660:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2662:	2397      	movs	r3, #151	; 0x97
    2664:	18fb      	adds	r3, r7, r3
    2666:	22f4      	movs	r2, #244	; 0xf4
    2668:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    266a:	e0dd      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    266c:	2388      	movs	r3, #136	; 0x88
    266e:	18fb      	adds	r3, r7, r3
    2670:	681b      	ldr	r3, [r3, #0]
    2672:	785b      	ldrb	r3, [r3, #1]
    2674:	3b01      	subs	r3, #1
    2676:	b2da      	uxtb	r2, r3
    2678:	2384      	movs	r3, #132	; 0x84
    267a:	18fb      	adds	r3, r7, r3
    267c:	681b      	ldr	r3, [r3, #0]
    267e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2680:	2384      	movs	r3, #132	; 0x84
    2682:	18fb      	adds	r3, r7, r3
    2684:	681b      	ldr	r3, [r3, #0]
    2686:	785b      	ldrb	r3, [r3, #1]
    2688:	2b0a      	cmp	r3, #10
    268a:	d01e      	beq.n	26ca <m2m_wifi_connect_sc+0x2de>
    268c:	2384      	movs	r3, #132	; 0x84
    268e:	18fb      	adds	r3, r7, r3
    2690:	681b      	ldr	r3, [r3, #0]
    2692:	785b      	ldrb	r3, [r3, #1]
    2694:	2b1a      	cmp	r3, #26
    2696:	d018      	beq.n	26ca <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    2698:	2390      	movs	r3, #144	; 0x90
    269a:	009a      	lsls	r2, r3, #2
    269c:	493b      	ldr	r1, [pc, #236]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    269e:	4b3c      	ldr	r3, [pc, #240]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    26a0:	0018      	movs	r0, r3
    26a2:	4b3c      	ldr	r3, [pc, #240]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    26a4:	4798      	blx	r3
    26a6:	2384      	movs	r3, #132	; 0x84
    26a8:	18fb      	adds	r3, r7, r3
    26aa:	681b      	ldr	r3, [r3, #0]
    26ac:	785b      	ldrb	r3, [r3, #1]
    26ae:	001a      	movs	r2, r3
    26b0:	4b46      	ldr	r3, [pc, #280]	; (27cc <m2m_wifi_connect_sc+0x3e0>)
    26b2:	0011      	movs	r1, r2
    26b4:	0018      	movs	r0, r3
    26b6:	4b37      	ldr	r3, [pc, #220]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    26b8:	4798      	blx	r3
    26ba:	200d      	movs	r0, #13
    26bc:	4b38      	ldr	r3, [pc, #224]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    26be:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    26c0:	2397      	movs	r3, #151	; 0x97
    26c2:	18fb      	adds	r3, r7, r3
    26c4:	22f4      	movs	r2, #244	; 0xf4
    26c6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    26c8:	e0ae      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    26ca:	2384      	movs	r3, #132	; 0x84
    26cc:	18fb      	adds	r3, r7, r3
    26ce:	681b      	ldr	r3, [r3, #0]
    26d0:	1c98      	adds	r0, r3, #2
    26d2:	2388      	movs	r3, #136	; 0x88
    26d4:	18fb      	adds	r3, r7, r3
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	1c99      	adds	r1, r3, #2
    26da:	2388      	movs	r3, #136	; 0x88
    26dc:	18fb      	adds	r3, r7, r3
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	785b      	ldrb	r3, [r3, #1]
    26e2:	001a      	movs	r2, r3
    26e4:	4b36      	ldr	r3, [pc, #216]	; (27c0 <m2m_wifi_connect_sc+0x3d4>)
    26e6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    26e8:	2388      	movs	r3, #136	; 0x88
    26ea:	18fb      	adds	r3, r7, r3
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	785b      	ldrb	r3, [r3, #1]
    26f0:	001a      	movs	r2, r3
    26f2:	2384      	movs	r3, #132	; 0x84
    26f4:	18fb      	adds	r3, r7, r3
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	189b      	adds	r3, r3, r2
    26fa:	2200      	movs	r2, #0
    26fc:	709a      	strb	r2, [r3, #2]
    26fe:	e082      	b.n	2806 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2700:	230a      	movs	r3, #10
    2702:	18fb      	adds	r3, r7, r3
    2704:	781b      	ldrb	r3, [r3, #0]
    2706:	2b02      	cmp	r3, #2
    2708:	d130      	bne.n	276c <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    270a:	2382      	movs	r3, #130	; 0x82
    270c:	18fc      	adds	r4, r7, r3
    270e:	687b      	ldr	r3, [r7, #4]
    2710:	0018      	movs	r0, r3
    2712:	4b24      	ldr	r3, [pc, #144]	; (27a4 <m2m_wifi_connect_sc+0x3b8>)
    2714:	4798      	blx	r3
    2716:	0003      	movs	r3, r0
    2718:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    271a:	2382      	movs	r3, #130	; 0x82
    271c:	18fb      	adds	r3, r7, r3
    271e:	881b      	ldrh	r3, [r3, #0]
    2720:	2b00      	cmp	r3, #0
    2722:	d004      	beq.n	272e <m2m_wifi_connect_sc+0x342>
    2724:	2382      	movs	r3, #130	; 0x82
    2726:	18fb      	adds	r3, r7, r3
    2728:	881b      	ldrh	r3, [r3, #0]
    272a:	2b40      	cmp	r3, #64	; 0x40
    272c:	d911      	bls.n	2752 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    272e:	4a28      	ldr	r2, [pc, #160]	; (27d0 <m2m_wifi_connect_sc+0x3e4>)
    2730:	4916      	ldr	r1, [pc, #88]	; (278c <m2m_wifi_connect_sc+0x3a0>)
    2732:	4b17      	ldr	r3, [pc, #92]	; (2790 <m2m_wifi_connect_sc+0x3a4>)
    2734:	0018      	movs	r0, r3
    2736:	4b17      	ldr	r3, [pc, #92]	; (2794 <m2m_wifi_connect_sc+0x3a8>)
    2738:	4798      	blx	r3
    273a:	4b26      	ldr	r3, [pc, #152]	; (27d4 <m2m_wifi_connect_sc+0x3e8>)
    273c:	0018      	movs	r0, r3
    273e:	4b17      	ldr	r3, [pc, #92]	; (279c <m2m_wifi_connect_sc+0x3b0>)
    2740:	4798      	blx	r3
    2742:	200d      	movs	r0, #13
    2744:	4b16      	ldr	r3, [pc, #88]	; (27a0 <m2m_wifi_connect_sc+0x3b4>)
    2746:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2748:	2397      	movs	r3, #151	; 0x97
    274a:	18fb      	adds	r3, r7, r3
    274c:	22f4      	movs	r2, #244	; 0xf4
    274e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2750:	e06a      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2752:	238c      	movs	r3, #140	; 0x8c
    2754:	18fb      	adds	r3, r7, r3
    2756:	6818      	ldr	r0, [r3, #0]
    2758:	2382      	movs	r3, #130	; 0x82
    275a:	18fb      	adds	r3, r7, r3
    275c:	881b      	ldrh	r3, [r3, #0]
    275e:	3301      	adds	r3, #1
    2760:	001a      	movs	r2, r3
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	0019      	movs	r1, r3
    2766:	4b16      	ldr	r3, [pc, #88]	; (27c0 <m2m_wifi_connect_sc+0x3d4>)
    2768:	4798      	blx	r3
    276a:	e04c      	b.n	2806 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    276c:	230a      	movs	r3, #10
    276e:	18fb      	adds	r3, r7, r3
    2770:	781b      	ldrb	r3, [r3, #0]
    2772:	2b04      	cmp	r3, #4
    2774:	d130      	bne.n	27d8 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    2776:	238c      	movs	r3, #140	; 0x8c
    2778:	18fb      	adds	r3, r7, r3
    277a:	681b      	ldr	r3, [r3, #0]
    277c:	6879      	ldr	r1, [r7, #4]
    277e:	223e      	movs	r2, #62	; 0x3e
    2780:	0018      	movs	r0, r3
    2782:	4b0f      	ldr	r3, [pc, #60]	; (27c0 <m2m_wifi_connect_sc+0x3d4>)
    2784:	4798      	blx	r3
    2786:	e03e      	b.n	2806 <m2m_wifi_connect_sc+0x41a>
    2788:	00000203 	.word	0x00000203
    278c:	0000dcb4 	.word	0x0000dcb4
    2790:	0000d9bc 	.word	0x0000d9bc
    2794:	0000c5d9 	.word	0x0000c5d9
    2798:	0000db68 	.word	0x0000db68
    279c:	0000c6f9 	.word	0x0000c6f9
    27a0:	0000c60d 	.word	0x0000c60d
    27a4:	00001995 	.word	0x00001995
    27a8:	0000020f 	.word	0x0000020f
    27ac:	0000db7c 	.word	0x0000db7c
    27b0:	00000219 	.word	0x00000219
    27b4:	0000db88 	.word	0x0000db88
    27b8:	00000222 	.word	0x00000222
    27bc:	0000db9c 	.word	0x0000db9c
    27c0:	00001919 	.word	0x00001919
    27c4:	00000239 	.word	0x00000239
    27c8:	0000dba8 	.word	0x0000dba8
    27cc:	0000dbc4 	.word	0x0000dbc4
    27d0:	0000024f 	.word	0x0000024f
    27d4:	0000dbe0 	.word	0x0000dbe0
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    27d8:	230a      	movs	r3, #10
    27da:	18fb      	adds	r3, r7, r3
    27dc:	781b      	ldrb	r3, [r3, #0]
    27de:	2b01      	cmp	r3, #1
    27e0:	d011      	beq.n	2806 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    27e2:	4a15      	ldr	r2, [pc, #84]	; (2838 <m2m_wifi_connect_sc+0x44c>)
    27e4:	4915      	ldr	r1, [pc, #84]	; (283c <m2m_wifi_connect_sc+0x450>)
    27e6:	4b16      	ldr	r3, [pc, #88]	; (2840 <m2m_wifi_connect_sc+0x454>)
    27e8:	0018      	movs	r0, r3
    27ea:	4b16      	ldr	r3, [pc, #88]	; (2844 <m2m_wifi_connect_sc+0x458>)
    27ec:	4798      	blx	r3
    27ee:	4b16      	ldr	r3, [pc, #88]	; (2848 <m2m_wifi_connect_sc+0x45c>)
    27f0:	0018      	movs	r0, r3
    27f2:	4b16      	ldr	r3, [pc, #88]	; (284c <m2m_wifi_connect_sc+0x460>)
    27f4:	4798      	blx	r3
    27f6:	200d      	movs	r0, #13
    27f8:	4b15      	ldr	r3, [pc, #84]	; (2850 <m2m_wifi_connect_sc+0x464>)
    27fa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    27fc:	2397      	movs	r3, #151	; 0x97
    27fe:	18fb      	adds	r3, r7, r3
    2800:	22f4      	movs	r2, #244	; 0xf4
    2802:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2804:	e010      	b.n	2828 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2806:	2397      	movs	r3, #151	; 0x97
    2808:	18fc      	adds	r4, r7, r3
    280a:	2314      	movs	r3, #20
    280c:	18fa      	adds	r2, r7, r3
    280e:	2300      	movs	r3, #0
    2810:	9302      	str	r3, [sp, #8]
    2812:	2300      	movs	r3, #0
    2814:	9301      	str	r3, [sp, #4]
    2816:	2300      	movs	r3, #0
    2818:	9300      	str	r3, [sp, #0]
    281a:	236c      	movs	r3, #108	; 0x6c
    281c:	2128      	movs	r1, #40	; 0x28
    281e:	2001      	movs	r0, #1
    2820:	4d0c      	ldr	r5, [pc, #48]	; (2854 <m2m_wifi_connect_sc+0x468>)
    2822:	47a8      	blx	r5
    2824:	0003      	movs	r3, r0
    2826:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2828:	2397      	movs	r3, #151	; 0x97
    282a:	18fb      	adds	r3, r7, r3
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	b25b      	sxtb	r3, r3
}
    2830:	0018      	movs	r0, r3
    2832:	46bd      	mov	sp, r7
    2834:	b026      	add	sp, #152	; 0x98
    2836:	bdb0      	pop	{r4, r5, r7, pc}
    2838:	0000025f 	.word	0x0000025f
    283c:	0000dcb4 	.word	0x0000dcb4
    2840:	0000d9bc 	.word	0x0000d9bc
    2844:	0000c5d9 	.word	0x0000c5d9
    2848:	0000dbfc 	.word	0x0000dbfc
    284c:	0000c6f9 	.word	0x0000c6f9
    2850:	0000c60d 	.word	0x0000c60d
    2854:	00001ba1 	.word	0x00001ba1

00002858 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    2858:	b590      	push	{r4, r7, lr}
    285a:	b085      	sub	sp, #20
    285c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    285e:	230f      	movs	r3, #15
    2860:	18fb      	adds	r3, r7, r3
    2862:	2200      	movs	r2, #0
    2864:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    2866:	2300      	movs	r3, #0
    2868:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    286a:	2001      	movs	r0, #1
    286c:	4b64      	ldr	r3, [pc, #400]	; (2a00 <nm_clkless_wake+0x1a8>)
    286e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    2870:	230f      	movs	r3, #15
    2872:	18fc      	adds	r4, r7, r3
    2874:	1d3b      	adds	r3, r7, #4
    2876:	0019      	movs	r1, r3
    2878:	2001      	movs	r0, #1
    287a:	4b62      	ldr	r3, [pc, #392]	; (2a04 <nm_clkless_wake+0x1ac>)
    287c:	4798      	blx	r3
    287e:	0003      	movs	r3, r0
    2880:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    2882:	230f      	movs	r3, #15
    2884:	18fb      	adds	r3, r7, r3
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	b25b      	sxtb	r3, r3
    288a:	2b00      	cmp	r3, #0
    288c:	d00d      	beq.n	28aa <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    288e:	495e      	ldr	r1, [pc, #376]	; (2a08 <nm_clkless_wake+0x1b0>)
    2890:	4b5e      	ldr	r3, [pc, #376]	; (2a0c <nm_clkless_wake+0x1b4>)
    2892:	2272      	movs	r2, #114	; 0x72
    2894:	0018      	movs	r0, r3
    2896:	4b5e      	ldr	r3, [pc, #376]	; (2a10 <nm_clkless_wake+0x1b8>)
    2898:	4798      	blx	r3
    289a:	4b5e      	ldr	r3, [pc, #376]	; (2a14 <nm_clkless_wake+0x1bc>)
    289c:	0018      	movs	r0, r3
    289e:	4b5e      	ldr	r3, [pc, #376]	; (2a18 <nm_clkless_wake+0x1c0>)
    28a0:	4798      	blx	r3
    28a2:	200d      	movs	r0, #13
    28a4:	4b5d      	ldr	r3, [pc, #372]	; (2a1c <nm_clkless_wake+0x1c4>)
    28a6:	4798      	blx	r3
		goto _WAKE_EXIT;
    28a8:	e0a1      	b.n	29ee <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    28aa:	687b      	ldr	r3, [r7, #4]
    28ac:	2202      	movs	r2, #2
    28ae:	4313      	orrs	r3, r2
    28b0:	0019      	movs	r1, r3
    28b2:	2001      	movs	r0, #1
    28b4:	4b5a      	ldr	r3, [pc, #360]	; (2a20 <nm_clkless_wake+0x1c8>)
    28b6:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    28b8:	2001      	movs	r0, #1
    28ba:	4b51      	ldr	r3, [pc, #324]	; (2a00 <nm_clkless_wake+0x1a8>)
    28bc:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    28be:	4b59      	ldr	r3, [pc, #356]	; (2a24 <nm_clkless_wake+0x1cc>)
    28c0:	681b      	ldr	r3, [r3, #0]
    28c2:	220f      	movs	r2, #15
    28c4:	18bc      	adds	r4, r7, r2
    28c6:	003a      	movs	r2, r7
    28c8:	0011      	movs	r1, r2
    28ca:	0018      	movs	r0, r3
    28cc:	4b4d      	ldr	r3, [pc, #308]	; (2a04 <nm_clkless_wake+0x1ac>)
    28ce:	4798      	blx	r3
    28d0:	0003      	movs	r3, r0
    28d2:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    28d4:	230f      	movs	r3, #15
    28d6:	18fb      	adds	r3, r7, r3
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	b25b      	sxtb	r3, r3
    28dc:	2b00      	cmp	r3, #0
    28de:	d108      	bne.n	28f2 <nm_clkless_wake+0x9a>
    28e0:	230f      	movs	r3, #15
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	b25b      	sxtb	r3, r3
    28e8:	2b00      	cmp	r3, #0
    28ea:	d162      	bne.n	29b2 <nm_clkless_wake+0x15a>
    28ec:	683b      	ldr	r3, [r7, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d15f      	bne.n	29b2 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    28f2:	4b4c      	ldr	r3, [pc, #304]	; (2a24 <nm_clkless_wake+0x1cc>)
    28f4:	220e      	movs	r2, #14
    28f6:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    28f8:	2001      	movs	r0, #1
    28fa:	4b41      	ldr	r3, [pc, #260]	; (2a00 <nm_clkless_wake+0x1a8>)
    28fc:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    28fe:	4b49      	ldr	r3, [pc, #292]	; (2a24 <nm_clkless_wake+0x1cc>)
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	220f      	movs	r2, #15
    2904:	18bc      	adds	r4, r7, r2
    2906:	003a      	movs	r2, r7
    2908:	0011      	movs	r1, r2
    290a:	0018      	movs	r0, r3
    290c:	4b3d      	ldr	r3, [pc, #244]	; (2a04 <nm_clkless_wake+0x1ac>)
    290e:	4798      	blx	r3
    2910:	0003      	movs	r3, r0
    2912:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    2914:	230f      	movs	r3, #15
    2916:	18fb      	adds	r3, r7, r3
    2918:	781b      	ldrb	r3, [r3, #0]
    291a:	b25b      	sxtb	r3, r3
    291c:	2b00      	cmp	r3, #0
    291e:	d108      	bne.n	2932 <nm_clkless_wake+0xda>
    2920:	230f      	movs	r3, #15
    2922:	18fb      	adds	r3, r7, r3
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	b25b      	sxtb	r3, r3
    2928:	2b00      	cmp	r3, #0
    292a:	d142      	bne.n	29b2 <nm_clkless_wake+0x15a>
    292c:	683b      	ldr	r3, [r7, #0]
    292e:	2b00      	cmp	r3, #0
    2930:	d13f      	bne.n	29b2 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    2932:	4b3c      	ldr	r3, [pc, #240]	; (2a24 <nm_clkless_wake+0x1cc>)
    2934:	2213      	movs	r2, #19
    2936:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    2938:	2001      	movs	r0, #1
    293a:	4b31      	ldr	r3, [pc, #196]	; (2a00 <nm_clkless_wake+0x1a8>)
    293c:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    293e:	4b39      	ldr	r3, [pc, #228]	; (2a24 <nm_clkless_wake+0x1cc>)
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	220f      	movs	r2, #15
    2944:	18bc      	adds	r4, r7, r2
    2946:	003a      	movs	r2, r7
    2948:	0011      	movs	r1, r2
    294a:	0018      	movs	r0, r3
    294c:	4b2d      	ldr	r3, [pc, #180]	; (2a04 <nm_clkless_wake+0x1ac>)
    294e:	4798      	blx	r3
    2950:	0003      	movs	r3, r0
    2952:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    2954:	230f      	movs	r3, #15
    2956:	18fb      	adds	r3, r7, r3
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	b25b      	sxtb	r3, r3
    295c:	2b00      	cmp	r3, #0
    295e:	d028      	beq.n	29b2 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    2960:	4929      	ldr	r1, [pc, #164]	; (2a08 <nm_clkless_wake+0x1b0>)
    2962:	4b2a      	ldr	r3, [pc, #168]	; (2a0c <nm_clkless_wake+0x1b4>)
    2964:	2296      	movs	r2, #150	; 0x96
    2966:	0018      	movs	r0, r3
    2968:	4b29      	ldr	r3, [pc, #164]	; (2a10 <nm_clkless_wake+0x1b8>)
    296a:	4798      	blx	r3
    296c:	4b2e      	ldr	r3, [pc, #184]	; (2a28 <nm_clkless_wake+0x1d0>)
    296e:	0018      	movs	r0, r3
    2970:	4b29      	ldr	r3, [pc, #164]	; (2a18 <nm_clkless_wake+0x1c0>)
    2972:	4798      	blx	r3
    2974:	200d      	movs	r0, #13
    2976:	4b29      	ldr	r3, [pc, #164]	; (2a1c <nm_clkless_wake+0x1c4>)
    2978:	4798      	blx	r3
					goto _WAKE_EXIT;
    297a:	e038      	b.n	29ee <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    297c:	2002      	movs	r0, #2
    297e:	4b20      	ldr	r3, [pc, #128]	; (2a00 <nm_clkless_wake+0x1a8>)
    2980:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2982:	4b28      	ldr	r3, [pc, #160]	; (2a24 <nm_clkless_wake+0x1cc>)
    2984:	681b      	ldr	r3, [r3, #0]
    2986:	003a      	movs	r2, r7
    2988:	0011      	movs	r1, r2
    298a:	0018      	movs	r0, r3
    298c:	4b1d      	ldr	r3, [pc, #116]	; (2a04 <nm_clkless_wake+0x1ac>)
    298e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    2990:	683b      	ldr	r3, [r7, #0]
    2992:	2204      	movs	r2, #4
    2994:	4013      	ands	r3, r2
    2996:	d10c      	bne.n	29b2 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    2998:	491b      	ldr	r1, [pc, #108]	; (2a08 <nm_clkless_wake+0x1b0>)
    299a:	4b1c      	ldr	r3, [pc, #112]	; (2a0c <nm_clkless_wake+0x1b4>)
    299c:	22aa      	movs	r2, #170	; 0xaa
    299e:	0018      	movs	r0, r3
    29a0:	4b1b      	ldr	r3, [pc, #108]	; (2a10 <nm_clkless_wake+0x1b8>)
    29a2:	4798      	blx	r3
    29a4:	4b21      	ldr	r3, [pc, #132]	; (2a2c <nm_clkless_wake+0x1d4>)
    29a6:	0018      	movs	r0, r3
    29a8:	4b1b      	ldr	r3, [pc, #108]	; (2a18 <nm_clkless_wake+0x1c0>)
    29aa:	4798      	blx	r3
    29ac:	200d      	movs	r0, #13
    29ae:	4b1b      	ldr	r3, [pc, #108]	; (2a1c <nm_clkless_wake+0x1c4>)
    29b0:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    29b2:	683b      	ldr	r3, [r7, #0]
    29b4:	2204      	movs	r2, #4
    29b6:	4013      	ands	r3, r2
    29b8:	d109      	bne.n	29ce <nm_clkless_wake+0x176>
    29ba:	68bb      	ldr	r3, [r7, #8]
    29bc:	3301      	adds	r3, #1
    29be:	60bb      	str	r3, [r7, #8]
    29c0:	68ba      	ldr	r2, [r7, #8]
    29c2:	4b1b      	ldr	r3, [pc, #108]	; (2a30 <nm_clkless_wake+0x1d8>)
    29c4:	2103      	movs	r1, #3
    29c6:	0010      	movs	r0, r2
    29c8:	4798      	blx	r3
    29ca:	1e0b      	subs	r3, r1, #0
    29cc:	d0d6      	beq.n	297c <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    29ce:	683b      	ldr	r3, [r7, #0]
    29d0:	2204      	movs	r2, #4
    29d2:	4013      	ands	r3, r2
    29d4:	d106      	bne.n	29e4 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    29d6:	687b      	ldr	r3, [r7, #4]
    29d8:	2202      	movs	r2, #2
    29da:	4313      	orrs	r3, r2
    29dc:	0019      	movs	r1, r3
    29de:	2001      	movs	r0, #1
    29e0:	4b0f      	ldr	r3, [pc, #60]	; (2a20 <nm_clkless_wake+0x1c8>)
    29e2:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    29e4:	683b      	ldr	r3, [r7, #0]
    29e6:	2204      	movs	r2, #4
    29e8:	4013      	ands	r3, r2
    29ea:	d100      	bne.n	29ee <nm_clkless_wake+0x196>
    29ec:	e75d      	b.n	28aa <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    29ee:	230f      	movs	r3, #15
    29f0:	18fb      	adds	r3, r7, r3
    29f2:	781b      	ldrb	r3, [r3, #0]
    29f4:	b25b      	sxtb	r3, r3
}
    29f6:	0018      	movs	r0, r3
    29f8:	46bd      	mov	sp, r7
    29fa:	b005      	add	sp, #20
    29fc:	bd90      	pop	{r4, r7, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	00001579 	.word	0x00001579
    2a04:	00002a35 	.word	0x00002a35
    2a08:	0000ddf0 	.word	0x0000ddf0
    2a0c:	0000dcc8 	.word	0x0000dcc8
    2a10:	0000c5d9 	.word	0x0000c5d9
    2a14:	0000dcdc 	.word	0x0000dcdc
    2a18:	0000c6f9 	.word	0x0000c6f9
    2a1c:	0000c60d 	.word	0x0000c60d
    2a20:	00002a59 	.word	0x00002a59
    2a24:	20000010 	.word	0x20000010
    2a28:	0000dcfc 	.word	0x0000dcfc
    2a2c:	0000dd1c 	.word	0x0000dd1c
    2a30:	0000b791 	.word	0x0000b791

00002a34 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2a34:	b580      	push	{r7, lr}
    2a36:	b082      	sub	sp, #8
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
    2a3c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2a3e:	683a      	ldr	r2, [r7, #0]
    2a40:	687b      	ldr	r3, [r7, #4]
    2a42:	0011      	movs	r1, r2
    2a44:	0018      	movs	r0, r3
    2a46:	4b03      	ldr	r3, [pc, #12]	; (2a54 <nm_read_reg_with_ret+0x20>)
    2a48:	4798      	blx	r3
    2a4a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2a4c:	0018      	movs	r0, r3
    2a4e:	46bd      	mov	sp, r7
    2a50:	b002      	add	sp, #8
    2a52:	bd80      	pop	{r7, pc}
    2a54:	00003b1d 	.word	0x00003b1d

00002a58 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b082      	sub	sp, #8
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	6078      	str	r0, [r7, #4]
    2a60:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2a62:	683a      	ldr	r2, [r7, #0]
    2a64:	687b      	ldr	r3, [r7, #4]
    2a66:	0011      	movs	r1, r2
    2a68:	0018      	movs	r0, r3
    2a6a:	4b03      	ldr	r3, [pc, #12]	; (2a78 <nm_write_reg+0x20>)
    2a6c:	4798      	blx	r3
    2a6e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2a70:	0018      	movs	r0, r3
    2a72:	46bd      	mov	sp, r7
    2a74:	b002      	add	sp, #8
    2a76:	bd80      	pop	{r7, pc}
    2a78:	00003b6d 	.word	0x00003b6d

00002a7c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2a7c:	b580      	push	{r7, lr}
    2a7e:	b084      	sub	sp, #16
    2a80:	af00      	add	r7, sp, #0
    2a82:	60f8      	str	r0, [r7, #12]
    2a84:	60b9      	str	r1, [r7, #8]
    2a86:	1dbb      	adds	r3, r7, #6
    2a88:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2a8a:	1dbb      	adds	r3, r7, #6
    2a8c:	881a      	ldrh	r2, [r3, #0]
    2a8e:	68b9      	ldr	r1, [r7, #8]
    2a90:	68fb      	ldr	r3, [r7, #12]
    2a92:	0018      	movs	r0, r3
    2a94:	4b03      	ldr	r3, [pc, #12]	; (2aa4 <p_nm_read_block+0x28>)
    2a96:	4798      	blx	r3
    2a98:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2a9a:	0018      	movs	r0, r3
    2a9c:	46bd      	mov	sp, r7
    2a9e:	b004      	add	sp, #16
    2aa0:	bd80      	pop	{r7, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	00003bbd 	.word	0x00003bbd

00002aa8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2aa8:	b580      	push	{r7, lr}
    2aaa:	b086      	sub	sp, #24
    2aac:	af00      	add	r7, sp, #0
    2aae:	60f8      	str	r0, [r7, #12]
    2ab0:	60b9      	str	r1, [r7, #8]
    2ab2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2ab4:	4b2d      	ldr	r3, [pc, #180]	; (2b6c <nm_read_block+0xc4>)
    2ab6:	881a      	ldrh	r2, [r3, #0]
    2ab8:	2310      	movs	r3, #16
    2aba:	18fb      	adds	r3, r7, r3
    2abc:	3a08      	subs	r2, #8
    2abe:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2ac0:	2300      	movs	r3, #0
    2ac2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2ac4:	2313      	movs	r3, #19
    2ac6:	18fb      	adds	r3, r7, r3
    2ac8:	2200      	movs	r2, #0
    2aca:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2acc:	2310      	movs	r3, #16
    2ace:	18fb      	adds	r3, r7, r3
    2ad0:	881a      	ldrh	r2, [r3, #0]
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	429a      	cmp	r2, r3
    2ad6:	d313      	bcc.n	2b00 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2ad8:	68ba      	ldr	r2, [r7, #8]
    2ada:	697b      	ldr	r3, [r7, #20]
    2adc:	18d1      	adds	r1, r2, r3
    2ade:	687b      	ldr	r3, [r7, #4]
    2ae0:	b29a      	uxth	r2, r3
    2ae2:	68fb      	ldr	r3, [r7, #12]
    2ae4:	0018      	movs	r0, r3
    2ae6:	4b22      	ldr	r3, [pc, #136]	; (2b70 <nm_read_block+0xc8>)
    2ae8:	4798      	blx	r3
    2aea:	0003      	movs	r3, r0
    2aec:	b2da      	uxtb	r2, r3
    2aee:	2313      	movs	r3, #19
    2af0:	18fb      	adds	r3, r7, r3
    2af2:	781b      	ldrb	r3, [r3, #0]
    2af4:	18d3      	adds	r3, r2, r3
    2af6:	b2da      	uxtb	r2, r3
    2af8:	2313      	movs	r3, #19
    2afa:	18fb      	adds	r3, r7, r3
    2afc:	701a      	strb	r2, [r3, #0]
			break;
    2afe:	e02d      	b.n	2b5c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2b00:	68ba      	ldr	r2, [r7, #8]
    2b02:	697b      	ldr	r3, [r7, #20]
    2b04:	18d1      	adds	r1, r2, r3
    2b06:	2310      	movs	r3, #16
    2b08:	18fb      	adds	r3, r7, r3
    2b0a:	881a      	ldrh	r2, [r3, #0]
    2b0c:	68fb      	ldr	r3, [r7, #12]
    2b0e:	0018      	movs	r0, r3
    2b10:	4b17      	ldr	r3, [pc, #92]	; (2b70 <nm_read_block+0xc8>)
    2b12:	4798      	blx	r3
    2b14:	0003      	movs	r3, r0
    2b16:	b2da      	uxtb	r2, r3
    2b18:	2313      	movs	r3, #19
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	18d3      	adds	r3, r2, r3
    2b20:	b2da      	uxtb	r2, r3
    2b22:	2313      	movs	r3, #19
    2b24:	18fb      	adds	r3, r7, r3
    2b26:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2b28:	2313      	movs	r3, #19
    2b2a:	18fb      	adds	r3, r7, r3
    2b2c:	781b      	ldrb	r3, [r3, #0]
    2b2e:	b25b      	sxtb	r3, r3
    2b30:	2b00      	cmp	r3, #0
    2b32:	d112      	bne.n	2b5a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2b34:	2310      	movs	r3, #16
    2b36:	18fb      	adds	r3, r7, r3
    2b38:	881b      	ldrh	r3, [r3, #0]
    2b3a:	687a      	ldr	r2, [r7, #4]
    2b3c:	1ad3      	subs	r3, r2, r3
    2b3e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2b40:	2310      	movs	r3, #16
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	881b      	ldrh	r3, [r3, #0]
    2b46:	697a      	ldr	r2, [r7, #20]
    2b48:	18d3      	adds	r3, r2, r3
    2b4a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2b4c:	2310      	movs	r3, #16
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	881b      	ldrh	r3, [r3, #0]
    2b52:	68fa      	ldr	r2, [r7, #12]
    2b54:	18d3      	adds	r3, r2, r3
    2b56:	60fb      	str	r3, [r7, #12]
		}
	}
    2b58:	e7b8      	b.n	2acc <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b5a:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2b5c:	2313      	movs	r3, #19
    2b5e:	18fb      	adds	r3, r7, r3
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	b25b      	sxtb	r3, r3
}
    2b64:	0018      	movs	r0, r3
    2b66:	46bd      	mov	sp, r7
    2b68:	b006      	add	sp, #24
    2b6a:	bd80      	pop	{r7, pc}
    2b6c:	2000000c 	.word	0x2000000c
    2b70:	00002a7d 	.word	0x00002a7d

00002b74 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2b74:	b580      	push	{r7, lr}
    2b76:	b084      	sub	sp, #16
    2b78:	af00      	add	r7, sp, #0
    2b7a:	60f8      	str	r0, [r7, #12]
    2b7c:	60b9      	str	r1, [r7, #8]
    2b7e:	1dbb      	adds	r3, r7, #6
    2b80:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b82:	1dbb      	adds	r3, r7, #6
    2b84:	881a      	ldrh	r2, [r3, #0]
    2b86:	68b9      	ldr	r1, [r7, #8]
    2b88:	68fb      	ldr	r3, [r7, #12]
    2b8a:	0018      	movs	r0, r3
    2b8c:	4b03      	ldr	r3, [pc, #12]	; (2b9c <p_nm_write_block+0x28>)
    2b8e:	4798      	blx	r3
    2b90:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2b92:	0018      	movs	r0, r3
    2b94:	46bd      	mov	sp, r7
    2b96:	b004      	add	sp, #16
    2b98:	bd80      	pop	{r7, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00003c15 	.word	0x00003c15

00002ba0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2ba0:	b580      	push	{r7, lr}
    2ba2:	b086      	sub	sp, #24
    2ba4:	af00      	add	r7, sp, #0
    2ba6:	60f8      	str	r0, [r7, #12]
    2ba8:	60b9      	str	r1, [r7, #8]
    2baa:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2bac:	4b2d      	ldr	r3, [pc, #180]	; (2c64 <nm_write_block+0xc4>)
    2bae:	881a      	ldrh	r2, [r3, #0]
    2bb0:	2310      	movs	r3, #16
    2bb2:	18fb      	adds	r3, r7, r3
    2bb4:	3a08      	subs	r2, #8
    2bb6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2bb8:	2300      	movs	r3, #0
    2bba:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2bbc:	2313      	movs	r3, #19
    2bbe:	18fb      	adds	r3, r7, r3
    2bc0:	2200      	movs	r2, #0
    2bc2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2bc4:	2310      	movs	r3, #16
    2bc6:	18fb      	adds	r3, r7, r3
    2bc8:	881a      	ldrh	r2, [r3, #0]
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	429a      	cmp	r2, r3
    2bce:	d313      	bcc.n	2bf8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2bd0:	68ba      	ldr	r2, [r7, #8]
    2bd2:	697b      	ldr	r3, [r7, #20]
    2bd4:	18d1      	adds	r1, r2, r3
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	b29a      	uxth	r2, r3
    2bda:	68fb      	ldr	r3, [r7, #12]
    2bdc:	0018      	movs	r0, r3
    2bde:	4b22      	ldr	r3, [pc, #136]	; (2c68 <nm_write_block+0xc8>)
    2be0:	4798      	blx	r3
    2be2:	0003      	movs	r3, r0
    2be4:	b2da      	uxtb	r2, r3
    2be6:	2313      	movs	r3, #19
    2be8:	18fb      	adds	r3, r7, r3
    2bea:	781b      	ldrb	r3, [r3, #0]
    2bec:	18d3      	adds	r3, r2, r3
    2bee:	b2da      	uxtb	r2, r3
    2bf0:	2313      	movs	r3, #19
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	701a      	strb	r2, [r3, #0]
			break;
    2bf6:	e02d      	b.n	2c54 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2bf8:	68ba      	ldr	r2, [r7, #8]
    2bfa:	697b      	ldr	r3, [r7, #20]
    2bfc:	18d1      	adds	r1, r2, r3
    2bfe:	2310      	movs	r3, #16
    2c00:	18fb      	adds	r3, r7, r3
    2c02:	881a      	ldrh	r2, [r3, #0]
    2c04:	68fb      	ldr	r3, [r7, #12]
    2c06:	0018      	movs	r0, r3
    2c08:	4b17      	ldr	r3, [pc, #92]	; (2c68 <nm_write_block+0xc8>)
    2c0a:	4798      	blx	r3
    2c0c:	0003      	movs	r3, r0
    2c0e:	b2da      	uxtb	r2, r3
    2c10:	2313      	movs	r3, #19
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	18d3      	adds	r3, r2, r3
    2c18:	b2da      	uxtb	r2, r3
    2c1a:	2313      	movs	r3, #19
    2c1c:	18fb      	adds	r3, r7, r3
    2c1e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2c20:	2313      	movs	r3, #19
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	781b      	ldrb	r3, [r3, #0]
    2c26:	b25b      	sxtb	r3, r3
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d112      	bne.n	2c52 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2c2c:	2310      	movs	r3, #16
    2c2e:	18fb      	adds	r3, r7, r3
    2c30:	881b      	ldrh	r3, [r3, #0]
    2c32:	687a      	ldr	r2, [r7, #4]
    2c34:	1ad3      	subs	r3, r2, r3
    2c36:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2c38:	2310      	movs	r3, #16
    2c3a:	18fb      	adds	r3, r7, r3
    2c3c:	881b      	ldrh	r3, [r3, #0]
    2c3e:	697a      	ldr	r2, [r7, #20]
    2c40:	18d3      	adds	r3, r2, r3
    2c42:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2c44:	2310      	movs	r3, #16
    2c46:	18fb      	adds	r3, r7, r3
    2c48:	881b      	ldrh	r3, [r3, #0]
    2c4a:	68fa      	ldr	r2, [r7, #12]
    2c4c:	18d3      	adds	r3, r2, r3
    2c4e:	60fb      	str	r3, [r7, #12]
		}
	}
    2c50:	e7b8      	b.n	2bc4 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2c52:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2c54:	2313      	movs	r3, #19
    2c56:	18fb      	adds	r3, r7, r3
    2c58:	781b      	ldrb	r3, [r3, #0]
    2c5a:	b25b      	sxtb	r3, r3
}
    2c5c:	0018      	movs	r0, r3
    2c5e:	46bd      	mov	sp, r7
    2c60:	b006      	add	sp, #24
    2c62:	bd80      	pop	{r7, pc}
    2c64:	2000000c 	.word	0x2000000c
    2c68:	00002b75 	.word	0x00002b75

00002c6c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b086      	sub	sp, #24
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
    2c74:	000a      	movs	r2, r1
    2c76:	1cbb      	adds	r3, r7, #2
    2c78:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    2c7a:	230c      	movs	r3, #12
    2c7c:	18fb      	adds	r3, r7, r3
    2c7e:	2200      	movs	r2, #0
    2c80:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    2c82:	230c      	movs	r3, #12
    2c84:	18fb      	adds	r3, r7, r3
    2c86:	687a      	ldr	r2, [r7, #4]
    2c88:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    2c8a:	230c      	movs	r3, #12
    2c8c:	18fb      	adds	r3, r7, r3
    2c8e:	1cba      	adds	r2, r7, #2
    2c90:	8812      	ldrh	r2, [r2, #0]
    2c92:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2c94:	230c      	movs	r3, #12
    2c96:	18fb      	adds	r3, r7, r3
    2c98:	0019      	movs	r1, r3
    2c9a:	2003      	movs	r0, #3
    2c9c:	4b03      	ldr	r3, [pc, #12]	; (2cac <nmi_spi_read+0x40>)
    2c9e:	4798      	blx	r3
    2ca0:	0003      	movs	r3, r0
}
    2ca2:	0018      	movs	r0, r3
    2ca4:	46bd      	mov	sp, r7
    2ca6:	b006      	add	sp, #24
    2ca8:	bd80      	pop	{r7, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	00001889 	.word	0x00001889

00002cb0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2cb0:	b580      	push	{r7, lr}
    2cb2:	b086      	sub	sp, #24
    2cb4:	af00      	add	r7, sp, #0
    2cb6:	6078      	str	r0, [r7, #4]
    2cb8:	000a      	movs	r2, r1
    2cba:	1cbb      	adds	r3, r7, #2
    2cbc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2cbe:	230c      	movs	r3, #12
    2cc0:	18fb      	adds	r3, r7, r3
    2cc2:	687a      	ldr	r2, [r7, #4]
    2cc4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    2cc6:	230c      	movs	r3, #12
    2cc8:	18fb      	adds	r3, r7, r3
    2cca:	2200      	movs	r2, #0
    2ccc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    2cce:	230c      	movs	r3, #12
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	1cba      	adds	r2, r7, #2
    2cd4:	8812      	ldrh	r2, [r2, #0]
    2cd6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2cd8:	230c      	movs	r3, #12
    2cda:	18fb      	adds	r3, r7, r3
    2cdc:	0019      	movs	r1, r3
    2cde:	2003      	movs	r0, #3
    2ce0:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <nmi_spi_write+0x40>)
    2ce2:	4798      	blx	r3
    2ce4:	0003      	movs	r3, r0
}
    2ce6:	0018      	movs	r0, r3
    2ce8:	46bd      	mov	sp, r7
    2cea:	b006      	add	sp, #24
    2cec:	bd80      	pop	{r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	00001889 	.word	0x00001889

00002cf4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    2cf4:	b580      	push	{r7, lr}
    2cf6:	b082      	sub	sp, #8
    2cf8:	af00      	add	r7, sp, #0
    2cfa:	0002      	movs	r2, r0
    2cfc:	1dfb      	adds	r3, r7, #7
    2cfe:	701a      	strb	r2, [r3, #0]
    2d00:	1dbb      	adds	r3, r7, #6
    2d02:	1c0a      	adds	r2, r1, #0
    2d04:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    2d06:	1dfb      	adds	r3, r7, #7
    2d08:	781b      	ldrb	r3, [r3, #0]
    2d0a:	005a      	lsls	r2, r3, #1
    2d0c:	1dbb      	adds	r3, r7, #6
    2d0e:	781b      	ldrb	r3, [r3, #0]
    2d10:	4053      	eors	r3, r2
    2d12:	4a03      	ldr	r2, [pc, #12]	; (2d20 <crc7_byte+0x2c>)
    2d14:	5cd3      	ldrb	r3, [r2, r3]
}
    2d16:	0018      	movs	r0, r3
    2d18:	46bd      	mov	sp, r7
    2d1a:	b002      	add	sp, #8
    2d1c:	bd80      	pop	{r7, pc}
    2d1e:	46c0      	nop			; (mov r8, r8)
    2d20:	0000de00 	.word	0x0000de00

00002d24 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    2d24:	b590      	push	{r4, r7, lr}
    2d26:	b085      	sub	sp, #20
    2d28:	af00      	add	r7, sp, #0
    2d2a:	60b9      	str	r1, [r7, #8]
    2d2c:	607a      	str	r2, [r7, #4]
    2d2e:	230f      	movs	r3, #15
    2d30:	18fb      	adds	r3, r7, r3
    2d32:	1c02      	adds	r2, r0, #0
    2d34:	701a      	strb	r2, [r3, #0]
	while (len--)
    2d36:	e00e      	b.n	2d56 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    2d38:	68bb      	ldr	r3, [r7, #8]
    2d3a:	1c5a      	adds	r2, r3, #1
    2d3c:	60ba      	str	r2, [r7, #8]
    2d3e:	781a      	ldrb	r2, [r3, #0]
    2d40:	230f      	movs	r3, #15
    2d42:	18fc      	adds	r4, r7, r3
    2d44:	230f      	movs	r3, #15
    2d46:	18fb      	adds	r3, r7, r3
    2d48:	781b      	ldrb	r3, [r3, #0]
    2d4a:	0011      	movs	r1, r2
    2d4c:	0018      	movs	r0, r3
    2d4e:	4b08      	ldr	r3, [pc, #32]	; (2d70 <crc7+0x4c>)
    2d50:	4798      	blx	r3
    2d52:	0003      	movs	r3, r0
    2d54:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    2d56:	687b      	ldr	r3, [r7, #4]
    2d58:	1e5a      	subs	r2, r3, #1
    2d5a:	607a      	str	r2, [r7, #4]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d1eb      	bne.n	2d38 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    2d60:	230f      	movs	r3, #15
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	781b      	ldrb	r3, [r3, #0]
}
    2d66:	0018      	movs	r0, r3
    2d68:	46bd      	mov	sp, r7
    2d6a:	b005      	add	sp, #20
    2d6c:	bd90      	pop	{r4, r7, pc}
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00002cf5 	.word	0x00002cf5

00002d74 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2d74:	b590      	push	{r4, r7, lr}
    2d76:	b089      	sub	sp, #36	; 0x24
    2d78:	af00      	add	r7, sp, #0
    2d7a:	60b9      	str	r1, [r7, #8]
    2d7c:	607a      	str	r2, [r7, #4]
    2d7e:	603b      	str	r3, [r7, #0]
    2d80:	230f      	movs	r3, #15
    2d82:	18fb      	adds	r3, r7, r3
    2d84:	1c02      	adds	r2, r0, #0
    2d86:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    2d88:	231f      	movs	r3, #31
    2d8a:	18fb      	adds	r3, r7, r3
    2d8c:	2205      	movs	r2, #5
    2d8e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    2d90:	231e      	movs	r3, #30
    2d92:	18fb      	adds	r3, r7, r3
    2d94:	2201      	movs	r2, #1
    2d96:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    2d98:	2314      	movs	r3, #20
    2d9a:	18fb      	adds	r3, r7, r3
    2d9c:	220f      	movs	r2, #15
    2d9e:	18ba      	adds	r2, r7, r2
    2da0:	7812      	ldrb	r2, [r2, #0]
    2da2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    2da4:	230f      	movs	r3, #15
    2da6:	18fb      	adds	r3, r7, r3
    2da8:	781b      	ldrb	r3, [r3, #0]
    2daa:	3bc1      	subs	r3, #193	; 0xc1
    2dac:	2b0e      	cmp	r3, #14
    2dae:	d900      	bls.n	2db2 <spi_cmd+0x3e>
    2db0:	e11b      	b.n	2fea <spi_cmd+0x276>
    2db2:	009a      	lsls	r2, r3, #2
    2db4:	4bb6      	ldr	r3, [pc, #728]	; (3090 <spi_cmd+0x31c>)
    2db6:	18d3      	adds	r3, r2, r3
    2db8:	681b      	ldr	r3, [r3, #0]
    2dba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2dbc:	68bb      	ldr	r3, [r7, #8]
    2dbe:	0c1b      	lsrs	r3, r3, #16
    2dc0:	b2da      	uxtb	r2, r3
    2dc2:	2314      	movs	r3, #20
    2dc4:	18fb      	adds	r3, r7, r3
    2dc6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2dc8:	68bb      	ldr	r3, [r7, #8]
    2dca:	0a1b      	lsrs	r3, r3, #8
    2dcc:	b2da      	uxtb	r2, r3
    2dce:	2314      	movs	r3, #20
    2dd0:	18fb      	adds	r3, r7, r3
    2dd2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2dd4:	68bb      	ldr	r3, [r7, #8]
    2dd6:	b2da      	uxtb	r2, r3
    2dd8:	2314      	movs	r3, #20
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	70da      	strb	r2, [r3, #3]
		len = 5;
    2dde:	231f      	movs	r3, #31
    2de0:	18fb      	adds	r3, r7, r3
    2de2:	2205      	movs	r2, #5
    2de4:	701a      	strb	r2, [r3, #0]
		break;
    2de6:	e105      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    2de8:	68bb      	ldr	r3, [r7, #8]
    2dea:	0a1b      	lsrs	r3, r3, #8
    2dec:	b2da      	uxtb	r2, r3
    2dee:	2314      	movs	r3, #20
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    2df4:	2330      	movs	r3, #48	; 0x30
    2df6:	18fb      	adds	r3, r7, r3
    2df8:	781b      	ldrb	r3, [r3, #0]
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	d009      	beq.n	2e12 <spi_cmd+0x9e>
    2dfe:	2314      	movs	r3, #20
    2e00:	18fb      	adds	r3, r7, r3
    2e02:	785b      	ldrb	r3, [r3, #1]
    2e04:	2280      	movs	r2, #128	; 0x80
    2e06:	4252      	negs	r2, r2
    2e08:	4313      	orrs	r3, r2
    2e0a:	b2da      	uxtb	r2, r3
    2e0c:	2314      	movs	r3, #20
    2e0e:	18fb      	adds	r3, r7, r3
    2e10:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    2e12:	68bb      	ldr	r3, [r7, #8]
    2e14:	b2da      	uxtb	r2, r3
    2e16:	2314      	movs	r3, #20
    2e18:	18fb      	adds	r3, r7, r3
    2e1a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e1c:	2314      	movs	r3, #20
    2e1e:	18fb      	adds	r3, r7, r3
    2e20:	2200      	movs	r2, #0
    2e22:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e24:	231f      	movs	r3, #31
    2e26:	18fb      	adds	r3, r7, r3
    2e28:	2205      	movs	r2, #5
    2e2a:	701a      	strb	r2, [r3, #0]
		break;
    2e2c:	e0e2      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    2e2e:	2314      	movs	r3, #20
    2e30:	18fb      	adds	r3, r7, r3
    2e32:	2200      	movs	r2, #0
    2e34:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e36:	2314      	movs	r3, #20
    2e38:	18fb      	adds	r3, r7, r3
    2e3a:	2200      	movs	r2, #0
    2e3c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e3e:	2314      	movs	r3, #20
    2e40:	18fb      	adds	r3, r7, r3
    2e42:	2200      	movs	r2, #0
    2e44:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e46:	231f      	movs	r3, #31
    2e48:	18fb      	adds	r3, r7, r3
    2e4a:	2205      	movs	r2, #5
    2e4c:	701a      	strb	r2, [r3, #0]
		break;
    2e4e:	e0d1      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    2e50:	2314      	movs	r3, #20
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	2200      	movs	r2, #0
    2e56:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e58:	2314      	movs	r3, #20
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	2200      	movs	r2, #0
    2e5e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e60:	2314      	movs	r3, #20
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	2200      	movs	r2, #0
    2e66:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e68:	231f      	movs	r3, #31
    2e6a:	18fb      	adds	r3, r7, r3
    2e6c:	2205      	movs	r2, #5
    2e6e:	701a      	strb	r2, [r3, #0]
		break;
    2e70:	e0c0      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    2e72:	2314      	movs	r3, #20
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	22ff      	movs	r2, #255	; 0xff
    2e78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2e7a:	2314      	movs	r3, #20
    2e7c:	18fb      	adds	r3, r7, r3
    2e7e:	22ff      	movs	r2, #255	; 0xff
    2e80:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2e82:	2314      	movs	r3, #20
    2e84:	18fb      	adds	r3, r7, r3
    2e86:	22ff      	movs	r2, #255	; 0xff
    2e88:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e8a:	231f      	movs	r3, #31
    2e8c:	18fb      	adds	r3, r7, r3
    2e8e:	2205      	movs	r2, #5
    2e90:	701a      	strb	r2, [r3, #0]
		break;
    2e92:	e0af      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    2e94:	68bb      	ldr	r3, [r7, #8]
    2e96:	0c1b      	lsrs	r3, r3, #16
    2e98:	b2da      	uxtb	r2, r3
    2e9a:	2314      	movs	r3, #20
    2e9c:	18fb      	adds	r3, r7, r3
    2e9e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2ea0:	68bb      	ldr	r3, [r7, #8]
    2ea2:	0a1b      	lsrs	r3, r3, #8
    2ea4:	b2da      	uxtb	r2, r3
    2ea6:	2314      	movs	r3, #20
    2ea8:	18fb      	adds	r3, r7, r3
    2eaa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2eac:	68bb      	ldr	r3, [r7, #8]
    2eae:	b2da      	uxtb	r2, r3
    2eb0:	2314      	movs	r3, #20
    2eb2:	18fb      	adds	r3, r7, r3
    2eb4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    2eb6:	683b      	ldr	r3, [r7, #0]
    2eb8:	0a1b      	lsrs	r3, r3, #8
    2eba:	b2da      	uxtb	r2, r3
    2ebc:	2314      	movs	r3, #20
    2ebe:	18fb      	adds	r3, r7, r3
    2ec0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    2ec2:	683b      	ldr	r3, [r7, #0]
    2ec4:	b2da      	uxtb	r2, r3
    2ec6:	2314      	movs	r3, #20
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	715a      	strb	r2, [r3, #5]
		len = 7;
    2ecc:	231f      	movs	r3, #31
    2ece:	18fb      	adds	r3, r7, r3
    2ed0:	2207      	movs	r2, #7
    2ed2:	701a      	strb	r2, [r3, #0]
		break;
    2ed4:	e08e      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    2ed6:	68bb      	ldr	r3, [r7, #8]
    2ed8:	0c1b      	lsrs	r3, r3, #16
    2eda:	b2da      	uxtb	r2, r3
    2edc:	2314      	movs	r3, #20
    2ede:	18fb      	adds	r3, r7, r3
    2ee0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2ee2:	68bb      	ldr	r3, [r7, #8]
    2ee4:	0a1b      	lsrs	r3, r3, #8
    2ee6:	b2da      	uxtb	r2, r3
    2ee8:	2314      	movs	r3, #20
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2eee:	68bb      	ldr	r3, [r7, #8]
    2ef0:	b2da      	uxtb	r2, r3
    2ef2:	2314      	movs	r3, #20
    2ef4:	18fb      	adds	r3, r7, r3
    2ef6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    2ef8:	683b      	ldr	r3, [r7, #0]
    2efa:	0c1b      	lsrs	r3, r3, #16
    2efc:	b2da      	uxtb	r2, r3
    2efe:	2314      	movs	r3, #20
    2f00:	18fb      	adds	r3, r7, r3
    2f02:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    2f04:	683b      	ldr	r3, [r7, #0]
    2f06:	0a1b      	lsrs	r3, r3, #8
    2f08:	b2da      	uxtb	r2, r3
    2f0a:	2314      	movs	r3, #20
    2f0c:	18fb      	adds	r3, r7, r3
    2f0e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    2f10:	683b      	ldr	r3, [r7, #0]
    2f12:	b2da      	uxtb	r2, r3
    2f14:	2314      	movs	r3, #20
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	719a      	strb	r2, [r3, #6]
		len = 8;
    2f1a:	231f      	movs	r3, #31
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	2208      	movs	r2, #8
    2f20:	701a      	strb	r2, [r3, #0]
		break;
    2f22:	e067      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    2f24:	68bb      	ldr	r3, [r7, #8]
    2f26:	0a1b      	lsrs	r3, r3, #8
    2f28:	b2da      	uxtb	r2, r3
    2f2a:	2314      	movs	r3, #20
    2f2c:	18fb      	adds	r3, r7, r3
    2f2e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    2f30:	2330      	movs	r3, #48	; 0x30
    2f32:	18fb      	adds	r3, r7, r3
    2f34:	781b      	ldrb	r3, [r3, #0]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d009      	beq.n	2f4e <spi_cmd+0x1da>
    2f3a:	2314      	movs	r3, #20
    2f3c:	18fb      	adds	r3, r7, r3
    2f3e:	785b      	ldrb	r3, [r3, #1]
    2f40:	2280      	movs	r2, #128	; 0x80
    2f42:	4252      	negs	r2, r2
    2f44:	4313      	orrs	r3, r2
    2f46:	b2da      	uxtb	r2, r3
    2f48:	2314      	movs	r3, #20
    2f4a:	18fb      	adds	r3, r7, r3
    2f4c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    2f4e:	68bb      	ldr	r3, [r7, #8]
    2f50:	b2da      	uxtb	r2, r3
    2f52:	2314      	movs	r3, #20
    2f54:	18fb      	adds	r3, r7, r3
    2f56:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	0e1b      	lsrs	r3, r3, #24
    2f5c:	b2da      	uxtb	r2, r3
    2f5e:	2314      	movs	r3, #20
    2f60:	18fb      	adds	r3, r7, r3
    2f62:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	0c1b      	lsrs	r3, r3, #16
    2f68:	b2da      	uxtb	r2, r3
    2f6a:	2314      	movs	r3, #20
    2f6c:	18fb      	adds	r3, r7, r3
    2f6e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	0a1b      	lsrs	r3, r3, #8
    2f74:	b2da      	uxtb	r2, r3
    2f76:	2314      	movs	r3, #20
    2f78:	18fb      	adds	r3, r7, r3
    2f7a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	b2da      	uxtb	r2, r3
    2f80:	2314      	movs	r3, #20
    2f82:	18fb      	adds	r3, r7, r3
    2f84:	719a      	strb	r2, [r3, #6]
		len = 8;
    2f86:	231f      	movs	r3, #31
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	2208      	movs	r2, #8
    2f8c:	701a      	strb	r2, [r3, #0]
		break;
    2f8e:	e031      	b.n	2ff4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2f90:	68bb      	ldr	r3, [r7, #8]
    2f92:	0c1b      	lsrs	r3, r3, #16
    2f94:	b2da      	uxtb	r2, r3
    2f96:	2314      	movs	r3, #20
    2f98:	18fb      	adds	r3, r7, r3
    2f9a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2f9c:	68bb      	ldr	r3, [r7, #8]
    2f9e:	0a1b      	lsrs	r3, r3, #8
    2fa0:	b2da      	uxtb	r2, r3
    2fa2:	2314      	movs	r3, #20
    2fa4:	18fb      	adds	r3, r7, r3
    2fa6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    2fa8:	68bb      	ldr	r3, [r7, #8]
    2faa:	b2da      	uxtb	r2, r3
    2fac:	2314      	movs	r3, #20
    2fae:	18fb      	adds	r3, r7, r3
    2fb0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	0e1b      	lsrs	r3, r3, #24
    2fb6:	b2da      	uxtb	r2, r3
    2fb8:	2314      	movs	r3, #20
    2fba:	18fb      	adds	r3, r7, r3
    2fbc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2fbe:	687b      	ldr	r3, [r7, #4]
    2fc0:	0c1b      	lsrs	r3, r3, #16
    2fc2:	b2da      	uxtb	r2, r3
    2fc4:	2314      	movs	r3, #20
    2fc6:	18fb      	adds	r3, r7, r3
    2fc8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	0a1b      	lsrs	r3, r3, #8
    2fce:	b2da      	uxtb	r2, r3
    2fd0:	2314      	movs	r3, #20
    2fd2:	18fb      	adds	r3, r7, r3
    2fd4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    2fd6:	687b      	ldr	r3, [r7, #4]
    2fd8:	b2da      	uxtb	r2, r3
    2fda:	2314      	movs	r3, #20
    2fdc:	18fb      	adds	r3, r7, r3
    2fde:	71da      	strb	r2, [r3, #7]
		len = 9;
    2fe0:	231f      	movs	r3, #31
    2fe2:	18fb      	adds	r3, r7, r3
    2fe4:	2209      	movs	r2, #9
    2fe6:	701a      	strb	r2, [r3, #0]
		break;
    2fe8:	e004      	b.n	2ff4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    2fea:	231e      	movs	r3, #30
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	2200      	movs	r2, #0
    2ff0:	701a      	strb	r2, [r3, #0]
		break;
    2ff2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    2ff4:	231e      	movs	r3, #30
    2ff6:	18fb      	adds	r3, r7, r3
    2ff8:	781b      	ldrb	r3, [r3, #0]
    2ffa:	b25b      	sxtb	r3, r3
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d03e      	beq.n	307e <spi_cmd+0x30a>
		if (!gu8Crc_off)
    3000:	4b24      	ldr	r3, [pc, #144]	; (3094 <spi_cmd+0x320>)
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	2b00      	cmp	r3, #0
    3006:	d115      	bne.n	3034 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    3008:	231f      	movs	r3, #31
    300a:	18fb      	adds	r3, r7, r3
    300c:	781b      	ldrb	r3, [r3, #0]
    300e:	1e5c      	subs	r4, r3, #1
    3010:	231f      	movs	r3, #31
    3012:	18fb      	adds	r3, r7, r3
    3014:	781b      	ldrb	r3, [r3, #0]
    3016:	3b01      	subs	r3, #1
    3018:	001a      	movs	r2, r3
    301a:	2314      	movs	r3, #20
    301c:	18fb      	adds	r3, r7, r3
    301e:	0019      	movs	r1, r3
    3020:	207f      	movs	r0, #127	; 0x7f
    3022:	4b1d      	ldr	r3, [pc, #116]	; (3098 <spi_cmd+0x324>)
    3024:	4798      	blx	r3
    3026:	0003      	movs	r3, r0
    3028:	18db      	adds	r3, r3, r3
    302a:	b2da      	uxtb	r2, r3
    302c:	2314      	movs	r3, #20
    302e:	18fb      	adds	r3, r7, r3
    3030:	551a      	strb	r2, [r3, r4]
    3032:	e006      	b.n	3042 <spi_cmd+0x2ce>
		else
			len-=1;
    3034:	231f      	movs	r3, #31
    3036:	18fb      	adds	r3, r7, r3
    3038:	221f      	movs	r2, #31
    303a:	18ba      	adds	r2, r7, r2
    303c:	7812      	ldrb	r2, [r2, #0]
    303e:	3a01      	subs	r2, #1
    3040:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    3042:	231f      	movs	r3, #31
    3044:	18fb      	adds	r3, r7, r3
    3046:	781b      	ldrb	r3, [r3, #0]
    3048:	b29a      	uxth	r2, r3
    304a:	2314      	movs	r3, #20
    304c:	18fb      	adds	r3, r7, r3
    304e:	0011      	movs	r1, r2
    3050:	0018      	movs	r0, r3
    3052:	4b12      	ldr	r3, [pc, #72]	; (309c <spi_cmd+0x328>)
    3054:	4798      	blx	r3
    3056:	1e03      	subs	r3, r0, #0
    3058:	d011      	beq.n	307e <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    305a:	2384      	movs	r3, #132	; 0x84
    305c:	005a      	lsls	r2, r3, #1
    305e:	4910      	ldr	r1, [pc, #64]	; (30a0 <spi_cmd+0x32c>)
    3060:	4b10      	ldr	r3, [pc, #64]	; (30a4 <spi_cmd+0x330>)
    3062:	0018      	movs	r0, r3
    3064:	4b10      	ldr	r3, [pc, #64]	; (30a8 <spi_cmd+0x334>)
    3066:	4798      	blx	r3
    3068:	4b10      	ldr	r3, [pc, #64]	; (30ac <spi_cmd+0x338>)
    306a:	0018      	movs	r0, r3
    306c:	4b10      	ldr	r3, [pc, #64]	; (30b0 <spi_cmd+0x33c>)
    306e:	4798      	blx	r3
    3070:	200d      	movs	r0, #13
    3072:	4b10      	ldr	r3, [pc, #64]	; (30b4 <spi_cmd+0x340>)
    3074:	4798      	blx	r3
			result = N_FAIL;
    3076:	231e      	movs	r3, #30
    3078:	18fb      	adds	r3, r7, r3
    307a:	2200      	movs	r2, #0
    307c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    307e:	231e      	movs	r3, #30
    3080:	18fb      	adds	r3, r7, r3
    3082:	781b      	ldrb	r3, [r3, #0]
    3084:	b25b      	sxtb	r3, r3
}
    3086:	0018      	movs	r0, r3
    3088:	46bd      	mov	sp, r7
    308a:	b009      	add	sp, #36	; 0x24
    308c:	bd90      	pop	{r4, r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	0000e3b8 	.word	0x0000e3b8
    3094:	200000e8 	.word	0x200000e8
    3098:	00002d25 	.word	0x00002d25
    309c:	00002cb1 	.word	0x00002cb1
    30a0:	0000e3f4 	.word	0x0000e3f4
    30a4:	0000df00 	.word	0x0000df00
    30a8:	0000c5d9 	.word	0x0000c5d9
    30ac:	0000df14 	.word	0x0000df14
    30b0:	0000c6f9 	.word	0x0000c6f9
    30b4:	0000c60d 	.word	0x0000c60d

000030b8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    30b8:	b580      	push	{r7, lr}
    30ba:	b084      	sub	sp, #16
    30bc:	af00      	add	r7, sp, #0
    30be:	0002      	movs	r2, r0
    30c0:	1dfb      	adds	r3, r7, #7
    30c2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    30c4:	230f      	movs	r3, #15
    30c6:	18fb      	adds	r3, r7, r3
    30c8:	2201      	movs	r2, #1
    30ca:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    30cc:	1dfb      	adds	r3, r7, #7
    30ce:	781b      	ldrb	r3, [r3, #0]
    30d0:	2bcf      	cmp	r3, #207	; 0xcf
    30d2:	d007      	beq.n	30e4 <spi_cmd_rsp+0x2c>
    30d4:	1dfb      	adds	r3, r7, #7
    30d6:	781b      	ldrb	r3, [r3, #0]
    30d8:	2bc5      	cmp	r3, #197	; 0xc5
    30da:	d003      	beq.n	30e4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    30dc:	1dfb      	adds	r3, r7, #7
    30de:	781b      	ldrb	r3, [r3, #0]
    30e0:	2bc6      	cmp	r3, #198	; 0xc6
    30e2:	d10c      	bne.n	30fe <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30e4:	230d      	movs	r3, #13
    30e6:	18fb      	adds	r3, r7, r3
    30e8:	2101      	movs	r1, #1
    30ea:	0018      	movs	r0, r3
    30ec:	4b3a      	ldr	r3, [pc, #232]	; (31d8 <spi_cmd_rsp+0x120>)
    30ee:	4798      	blx	r3
    30f0:	1e03      	subs	r3, r0, #0
    30f2:	d004      	beq.n	30fe <spi_cmd_rsp+0x46>
			result = N_FAIL;
    30f4:	230f      	movs	r3, #15
    30f6:	18fb      	adds	r3, r7, r3
    30f8:	2200      	movs	r2, #0
    30fa:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    30fc:	e063      	b.n	31c6 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    30fe:	230e      	movs	r3, #14
    3100:	18fb      	adds	r3, r7, r3
    3102:	220a      	movs	r2, #10
    3104:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3106:	230d      	movs	r3, #13
    3108:	18fb      	adds	r3, r7, r3
    310a:	2101      	movs	r1, #1
    310c:	0018      	movs	r0, r3
    310e:	4b32      	ldr	r3, [pc, #200]	; (31d8 <spi_cmd_rsp+0x120>)
    3110:	4798      	blx	r3
    3112:	1e03      	subs	r3, r0, #0
    3114:	d013      	beq.n	313e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3116:	2328      	movs	r3, #40	; 0x28
    3118:	33ff      	adds	r3, #255	; 0xff
    311a:	001a      	movs	r2, r3
    311c:	492f      	ldr	r1, [pc, #188]	; (31dc <spi_cmd_rsp+0x124>)
    311e:	4b30      	ldr	r3, [pc, #192]	; (31e0 <spi_cmd_rsp+0x128>)
    3120:	0018      	movs	r0, r3
    3122:	4b30      	ldr	r3, [pc, #192]	; (31e4 <spi_cmd_rsp+0x12c>)
    3124:	4798      	blx	r3
    3126:	4b30      	ldr	r3, [pc, #192]	; (31e8 <spi_cmd_rsp+0x130>)
    3128:	0018      	movs	r0, r3
    312a:	4b30      	ldr	r3, [pc, #192]	; (31ec <spi_cmd_rsp+0x134>)
    312c:	4798      	blx	r3
    312e:	200d      	movs	r0, #13
    3130:	4b2f      	ldr	r3, [pc, #188]	; (31f0 <spi_cmd_rsp+0x138>)
    3132:	4798      	blx	r3
			result = N_FAIL;
    3134:	230f      	movs	r3, #15
    3136:	18fb      	adds	r3, r7, r3
    3138:	2200      	movs	r2, #0
    313a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    313c:	e043      	b.n	31c6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    313e:	230d      	movs	r3, #13
    3140:	18fb      	adds	r3, r7, r3
    3142:	781b      	ldrb	r3, [r3, #0]
    3144:	1dfa      	adds	r2, r7, #7
    3146:	7812      	ldrb	r2, [r2, #0]
    3148:	429a      	cmp	r2, r3
    314a:	d00b      	beq.n	3164 <spi_cmd_rsp+0xac>
    314c:	230e      	movs	r3, #14
    314e:	18fb      	adds	r3, r7, r3
    3150:	781b      	ldrb	r3, [r3, #0]
    3152:	b25b      	sxtb	r3, r3
    3154:	b2da      	uxtb	r2, r3
    3156:	3a01      	subs	r2, #1
    3158:	b2d1      	uxtb	r1, r2
    315a:	220e      	movs	r2, #14
    315c:	18ba      	adds	r2, r7, r2
    315e:	7011      	strb	r1, [r2, #0]
    3160:	2b00      	cmp	r3, #0
    3162:	dcd0      	bgt.n	3106 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    3164:	230e      	movs	r3, #14
    3166:	18fb      	adds	r3, r7, r3
    3168:	220a      	movs	r2, #10
    316a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    316c:	230d      	movs	r3, #13
    316e:	18fb      	adds	r3, r7, r3
    3170:	2101      	movs	r1, #1
    3172:	0018      	movs	r0, r3
    3174:	4b18      	ldr	r3, [pc, #96]	; (31d8 <spi_cmd_rsp+0x120>)
    3176:	4798      	blx	r3
    3178:	1e03      	subs	r3, r0, #0
    317a:	d013      	beq.n	31a4 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    317c:	2336      	movs	r3, #54	; 0x36
    317e:	33ff      	adds	r3, #255	; 0xff
    3180:	001a      	movs	r2, r3
    3182:	4916      	ldr	r1, [pc, #88]	; (31dc <spi_cmd_rsp+0x124>)
    3184:	4b16      	ldr	r3, [pc, #88]	; (31e0 <spi_cmd_rsp+0x128>)
    3186:	0018      	movs	r0, r3
    3188:	4b16      	ldr	r3, [pc, #88]	; (31e4 <spi_cmd_rsp+0x12c>)
    318a:	4798      	blx	r3
    318c:	4b16      	ldr	r3, [pc, #88]	; (31e8 <spi_cmd_rsp+0x130>)
    318e:	0018      	movs	r0, r3
    3190:	4b16      	ldr	r3, [pc, #88]	; (31ec <spi_cmd_rsp+0x134>)
    3192:	4798      	blx	r3
    3194:	200d      	movs	r0, #13
    3196:	4b16      	ldr	r3, [pc, #88]	; (31f0 <spi_cmd_rsp+0x138>)
    3198:	4798      	blx	r3
			result = N_FAIL;
    319a:	230f      	movs	r3, #15
    319c:	18fb      	adds	r3, r7, r3
    319e:	2200      	movs	r2, #0
    31a0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    31a2:	e010      	b.n	31c6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    31a4:	230d      	movs	r3, #13
    31a6:	18fb      	adds	r3, r7, r3
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d00b      	beq.n	31c6 <spi_cmd_rsp+0x10e>
    31ae:	230e      	movs	r3, #14
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	781b      	ldrb	r3, [r3, #0]
    31b4:	b25b      	sxtb	r3, r3
    31b6:	b2da      	uxtb	r2, r3
    31b8:	3a01      	subs	r2, #1
    31ba:	b2d1      	uxtb	r1, r2
    31bc:	220e      	movs	r2, #14
    31be:	18ba      	adds	r2, r7, r2
    31c0:	7011      	strb	r1, [r2, #0]
    31c2:	2b00      	cmp	r3, #0
    31c4:	dcd2      	bgt.n	316c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    31c6:	230f      	movs	r3, #15
    31c8:	18fb      	adds	r3, r7, r3
    31ca:	781b      	ldrb	r3, [r3, #0]
    31cc:	b25b      	sxtb	r3, r3
}
    31ce:	0018      	movs	r0, r3
    31d0:	46bd      	mov	sp, r7
    31d2:	b004      	add	sp, #16
    31d4:	bd80      	pop	{r7, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
    31d8:	00002c6d 	.word	0x00002c6d
    31dc:	0000e3fc 	.word	0x0000e3fc
    31e0:	0000df00 	.word	0x0000df00
    31e4:	0000c5d9 	.word	0x0000c5d9
    31e8:	0000df40 	.word	0x0000df40
    31ec:	0000c6f9 	.word	0x0000c6f9
    31f0:	0000c60d 	.word	0x0000c60d

000031f4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    31f4:	b580      	push	{r7, lr}
    31f6:	b086      	sub	sp, #24
    31f8:	af00      	add	r7, sp, #0
    31fa:	6078      	str	r0, [r7, #4]
    31fc:	0008      	movs	r0, r1
    31fe:	0011      	movs	r1, r2
    3200:	1cbb      	adds	r3, r7, #2
    3202:	1c02      	adds	r2, r0, #0
    3204:	801a      	strh	r2, [r3, #0]
    3206:	1c7b      	adds	r3, r7, #1
    3208:	1c0a      	adds	r2, r1, #0
    320a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    320c:	2311      	movs	r3, #17
    320e:	18fb      	adds	r3, r7, r3
    3210:	2201      	movs	r2, #1
    3212:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3214:	2314      	movs	r3, #20
    3216:	18fb      	adds	r3, r7, r3
    3218:	2200      	movs	r2, #0
    321a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    321c:	1cbb      	adds	r3, r7, #2
    321e:	881a      	ldrh	r2, [r3, #0]
    3220:	2380      	movs	r3, #128	; 0x80
    3222:	019b      	lsls	r3, r3, #6
    3224:	429a      	cmp	r2, r3
    3226:	d805      	bhi.n	3234 <spi_data_read+0x40>
			nbytes = sz;
    3228:	2312      	movs	r3, #18
    322a:	18fb      	adds	r3, r7, r3
    322c:	1cba      	adds	r2, r7, #2
    322e:	8812      	ldrh	r2, [r2, #0]
    3230:	801a      	strh	r2, [r3, #0]
    3232:	e004      	b.n	323e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    3234:	2312      	movs	r3, #18
    3236:	18fb      	adds	r3, r7, r3
    3238:	2280      	movs	r2, #128	; 0x80
    323a:	0192      	lsls	r2, r2, #6
    323c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    323e:	2316      	movs	r3, #22
    3240:	18fb      	adds	r3, r7, r3
    3242:	220a      	movs	r2, #10
    3244:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3246:	230b      	movs	r3, #11
    3248:	18fb      	adds	r3, r7, r3
    324a:	2101      	movs	r1, #1
    324c:	0018      	movs	r0, r3
    324e:	4b5f      	ldr	r3, [pc, #380]	; (33cc <spi_data_read+0x1d8>)
    3250:	4798      	blx	r3
    3252:	1e03      	subs	r3, r0, #0
    3254:	d013      	beq.n	327e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    3256:	2358      	movs	r3, #88	; 0x58
    3258:	33ff      	adds	r3, #255	; 0xff
    325a:	001a      	movs	r2, r3
    325c:	495c      	ldr	r1, [pc, #368]	; (33d0 <spi_data_read+0x1dc>)
    325e:	4b5d      	ldr	r3, [pc, #372]	; (33d4 <spi_data_read+0x1e0>)
    3260:	0018      	movs	r0, r3
    3262:	4b5d      	ldr	r3, [pc, #372]	; (33d8 <spi_data_read+0x1e4>)
    3264:	4798      	blx	r3
    3266:	4b5d      	ldr	r3, [pc, #372]	; (33dc <spi_data_read+0x1e8>)
    3268:	0018      	movs	r0, r3
    326a:	4b5d      	ldr	r3, [pc, #372]	; (33e0 <spi_data_read+0x1ec>)
    326c:	4798      	blx	r3
    326e:	200d      	movs	r0, #13
    3270:	4b5c      	ldr	r3, [pc, #368]	; (33e4 <spi_data_read+0x1f0>)
    3272:	4798      	blx	r3
				result = N_FAIL;
    3274:	2311      	movs	r3, #17
    3276:	18fb      	adds	r3, r7, r3
    3278:	2200      	movs	r2, #0
    327a:	701a      	strb	r2, [r3, #0]
				break;
    327c:	e017      	b.n	32ae <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    327e:	230b      	movs	r3, #11
    3280:	18fb      	adds	r3, r7, r3
    3282:	781b      	ldrb	r3, [r3, #0]
    3284:	091b      	lsrs	r3, r3, #4
    3286:	b2db      	uxtb	r3, r3
    3288:	001a      	movs	r2, r3
    328a:	230f      	movs	r3, #15
    328c:	4013      	ands	r3, r2
    328e:	2b0f      	cmp	r3, #15
    3290:	d00c      	beq.n	32ac <spi_data_read+0xb8>
				break;
		} while (retry--);
    3292:	2316      	movs	r3, #22
    3294:	18fb      	adds	r3, r7, r3
    3296:	2200      	movs	r2, #0
    3298:	5e9b      	ldrsh	r3, [r3, r2]
    329a:	b29a      	uxth	r2, r3
    329c:	3a01      	subs	r2, #1
    329e:	b291      	uxth	r1, r2
    32a0:	2216      	movs	r2, #22
    32a2:	18ba      	adds	r2, r7, r2
    32a4:	8011      	strh	r1, [r2, #0]
    32a6:	2b00      	cmp	r3, #0
    32a8:	d1cd      	bne.n	3246 <spi_data_read+0x52>
    32aa:	e000      	b.n	32ae <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    32ac:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    32ae:	2311      	movs	r3, #17
    32b0:	18fb      	adds	r3, r7, r3
    32b2:	781b      	ldrb	r3, [r3, #0]
    32b4:	b25b      	sxtb	r3, r3
    32b6:	2b00      	cmp	r3, #0
    32b8:	d100      	bne.n	32bc <spi_data_read+0xc8>
    32ba:	e07d      	b.n	33b8 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    32bc:	2316      	movs	r3, #22
    32be:	18fb      	adds	r3, r7, r3
    32c0:	2200      	movs	r2, #0
    32c2:	5e9b      	ldrsh	r3, [r3, r2]
    32c4:	2b00      	cmp	r3, #0
    32c6:	dc18      	bgt.n	32fa <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    32c8:	2364      	movs	r3, #100	; 0x64
    32ca:	33ff      	adds	r3, #255	; 0xff
    32cc:	001a      	movs	r2, r3
    32ce:	4940      	ldr	r1, [pc, #256]	; (33d0 <spi_data_read+0x1dc>)
    32d0:	4b40      	ldr	r3, [pc, #256]	; (33d4 <spi_data_read+0x1e0>)
    32d2:	0018      	movs	r0, r3
    32d4:	4b40      	ldr	r3, [pc, #256]	; (33d8 <spi_data_read+0x1e4>)
    32d6:	4798      	blx	r3
    32d8:	230b      	movs	r3, #11
    32da:	18fb      	adds	r3, r7, r3
    32dc:	781b      	ldrb	r3, [r3, #0]
    32de:	001a      	movs	r2, r3
    32e0:	4b41      	ldr	r3, [pc, #260]	; (33e8 <spi_data_read+0x1f4>)
    32e2:	0011      	movs	r1, r2
    32e4:	0018      	movs	r0, r3
    32e6:	4b3c      	ldr	r3, [pc, #240]	; (33d8 <spi_data_read+0x1e4>)
    32e8:	4798      	blx	r3
    32ea:	200d      	movs	r0, #13
    32ec:	4b3d      	ldr	r3, [pc, #244]	; (33e4 <spi_data_read+0x1f0>)
    32ee:	4798      	blx	r3
			result = N_FAIL;
    32f0:	2311      	movs	r3, #17
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	2200      	movs	r2, #0
    32f6:	701a      	strb	r2, [r3, #0]
			break;
    32f8:	e05f      	b.n	33ba <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    32fa:	2314      	movs	r3, #20
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	2200      	movs	r2, #0
    3300:	5e9b      	ldrsh	r3, [r3, r2]
    3302:	687a      	ldr	r2, [r7, #4]
    3304:	18d2      	adds	r2, r2, r3
    3306:	2312      	movs	r3, #18
    3308:	18fb      	adds	r3, r7, r3
    330a:	881b      	ldrh	r3, [r3, #0]
    330c:	0019      	movs	r1, r3
    330e:	0010      	movs	r0, r2
    3310:	4b2e      	ldr	r3, [pc, #184]	; (33cc <spi_data_read+0x1d8>)
    3312:	4798      	blx	r3
    3314:	1e03      	subs	r3, r0, #0
    3316:	d012      	beq.n	333e <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3318:	23b6      	movs	r3, #182	; 0xb6
    331a:	005a      	lsls	r2, r3, #1
    331c:	492c      	ldr	r1, [pc, #176]	; (33d0 <spi_data_read+0x1dc>)
    331e:	4b2d      	ldr	r3, [pc, #180]	; (33d4 <spi_data_read+0x1e0>)
    3320:	0018      	movs	r0, r3
    3322:	4b2d      	ldr	r3, [pc, #180]	; (33d8 <spi_data_read+0x1e4>)
    3324:	4798      	blx	r3
    3326:	4b31      	ldr	r3, [pc, #196]	; (33ec <spi_data_read+0x1f8>)
    3328:	0018      	movs	r0, r3
    332a:	4b2d      	ldr	r3, [pc, #180]	; (33e0 <spi_data_read+0x1ec>)
    332c:	4798      	blx	r3
    332e:	200d      	movs	r0, #13
    3330:	4b2c      	ldr	r3, [pc, #176]	; (33e4 <spi_data_read+0x1f0>)
    3332:	4798      	blx	r3
			result = N_FAIL;
    3334:	2311      	movs	r3, #17
    3336:	18fb      	adds	r3, r7, r3
    3338:	2200      	movs	r2, #0
    333a:	701a      	strb	r2, [r3, #0]
			break;
    333c:	e03d      	b.n	33ba <spi_data_read+0x1c6>
		}
		if(!clockless)
    333e:	1c7b      	adds	r3, r7, #1
    3340:	781b      	ldrb	r3, [r3, #0]
    3342:	2b00      	cmp	r3, #0
    3344:	d11f      	bne.n	3386 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    3346:	4b2a      	ldr	r3, [pc, #168]	; (33f0 <spi_data_read+0x1fc>)
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	2b00      	cmp	r3, #0
    334c:	d11b      	bne.n	3386 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    334e:	230c      	movs	r3, #12
    3350:	18fb      	adds	r3, r7, r3
    3352:	2102      	movs	r1, #2
    3354:	0018      	movs	r0, r3
    3356:	4b1d      	ldr	r3, [pc, #116]	; (33cc <spi_data_read+0x1d8>)
    3358:	4798      	blx	r3
    335a:	1e03      	subs	r3, r0, #0
    335c:	d013      	beq.n	3386 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    335e:	2378      	movs	r3, #120	; 0x78
    3360:	33ff      	adds	r3, #255	; 0xff
    3362:	001a      	movs	r2, r3
    3364:	491a      	ldr	r1, [pc, #104]	; (33d0 <spi_data_read+0x1dc>)
    3366:	4b1b      	ldr	r3, [pc, #108]	; (33d4 <spi_data_read+0x1e0>)
    3368:	0018      	movs	r0, r3
    336a:	4b1b      	ldr	r3, [pc, #108]	; (33d8 <spi_data_read+0x1e4>)
    336c:	4798      	blx	r3
    336e:	4b21      	ldr	r3, [pc, #132]	; (33f4 <spi_data_read+0x200>)
    3370:	0018      	movs	r0, r3
    3372:	4b1b      	ldr	r3, [pc, #108]	; (33e0 <spi_data_read+0x1ec>)
    3374:	4798      	blx	r3
    3376:	200d      	movs	r0, #13
    3378:	4b1a      	ldr	r3, [pc, #104]	; (33e4 <spi_data_read+0x1f0>)
    337a:	4798      	blx	r3
					result = N_FAIL;
    337c:	2311      	movs	r3, #17
    337e:	18fb      	adds	r3, r7, r3
    3380:	2200      	movs	r2, #0
    3382:	701a      	strb	r2, [r3, #0]
					break;
    3384:	e019      	b.n	33ba <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    3386:	2314      	movs	r3, #20
    3388:	18fb      	adds	r3, r7, r3
    338a:	881a      	ldrh	r2, [r3, #0]
    338c:	2312      	movs	r3, #18
    338e:	18fb      	adds	r3, r7, r3
    3390:	881b      	ldrh	r3, [r3, #0]
    3392:	18d3      	adds	r3, r2, r3
    3394:	b29a      	uxth	r2, r3
    3396:	2314      	movs	r3, #20
    3398:	18fb      	adds	r3, r7, r3
    339a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    339c:	2312      	movs	r3, #18
    339e:	18fb      	adds	r3, r7, r3
    33a0:	881a      	ldrh	r2, [r3, #0]
    33a2:	1cbb      	adds	r3, r7, #2
    33a4:	1cb9      	adds	r1, r7, #2
    33a6:	8809      	ldrh	r1, [r1, #0]
    33a8:	1a8a      	subs	r2, r1, r2
    33aa:	801a      	strh	r2, [r3, #0]

	} while (sz);
    33ac:	1cbb      	adds	r3, r7, #2
    33ae:	881b      	ldrh	r3, [r3, #0]
    33b0:	2b00      	cmp	r3, #0
    33b2:	d000      	beq.n	33b6 <spi_data_read+0x1c2>
    33b4:	e732      	b.n	321c <spi_data_read+0x28>
    33b6:	e000      	b.n	33ba <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    33b8:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    33ba:	2311      	movs	r3, #17
    33bc:	18fb      	adds	r3, r7, r3
    33be:	781b      	ldrb	r3, [r3, #0]
    33c0:	b25b      	sxtb	r3, r3
}
    33c2:	0018      	movs	r0, r3
    33c4:	46bd      	mov	sp, r7
    33c6:	b006      	add	sp, #24
    33c8:	bd80      	pop	{r7, pc}
    33ca:	46c0      	nop			; (mov r8, r8)
    33cc:	00002c6d 	.word	0x00002c6d
    33d0:	0000e408 	.word	0x0000e408
    33d4:	0000df00 	.word	0x0000df00
    33d8:	0000c5d9 	.word	0x0000c5d9
    33dc:	0000df74 	.word	0x0000df74
    33e0:	0000c6f9 	.word	0x0000c6f9
    33e4:	0000c60d 	.word	0x0000c60d
    33e8:	0000dfa8 	.word	0x0000dfa8
    33ec:	0000dfd8 	.word	0x0000dfd8
    33f0:	200000e8 	.word	0x200000e8
    33f4:	0000e008 	.word	0x0000e008

000033f8 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    33f8:	b580      	push	{r7, lr}
    33fa:	b086      	sub	sp, #24
    33fc:	af00      	add	r7, sp, #0
    33fe:	6078      	str	r0, [r7, #4]
    3400:	000a      	movs	r2, r1
    3402:	1cbb      	adds	r3, r7, #2
    3404:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    3406:	2313      	movs	r3, #19
    3408:	18fb      	adds	r3, r7, r3
    340a:	2201      	movs	r2, #1
    340c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    340e:	230c      	movs	r3, #12
    3410:	18fb      	adds	r3, r7, r3
    3412:	2200      	movs	r2, #0
    3414:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    3416:	2316      	movs	r3, #22
    3418:	18fb      	adds	r3, r7, r3
    341a:	2200      	movs	r2, #0
    341c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    341e:	1cbb      	adds	r3, r7, #2
    3420:	881a      	ldrh	r2, [r3, #0]
    3422:	2380      	movs	r3, #128	; 0x80
    3424:	019b      	lsls	r3, r3, #6
    3426:	429a      	cmp	r2, r3
    3428:	d805      	bhi.n	3436 <spi_data_write+0x3e>
			nbytes = sz;
    342a:	2314      	movs	r3, #20
    342c:	18fb      	adds	r3, r7, r3
    342e:	1cba      	adds	r2, r7, #2
    3430:	8812      	ldrh	r2, [r2, #0]
    3432:	801a      	strh	r2, [r3, #0]
    3434:	e004      	b.n	3440 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    3436:	2314      	movs	r3, #20
    3438:	18fb      	adds	r3, r7, r3
    343a:	2280      	movs	r2, #128	; 0x80
    343c:	0192      	lsls	r2, r2, #6
    343e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    3440:	2311      	movs	r3, #17
    3442:	18fb      	adds	r3, r7, r3
    3444:	22f0      	movs	r2, #240	; 0xf0
    3446:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    3448:	2316      	movs	r3, #22
    344a:	18fb      	adds	r3, r7, r3
    344c:	2200      	movs	r2, #0
    344e:	5e9b      	ldrsh	r3, [r3, r2]
    3450:	2b00      	cmp	r3, #0
    3452:	d10f      	bne.n	3474 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    3454:	1cbb      	adds	r3, r7, #2
    3456:	881a      	ldrh	r2, [r3, #0]
    3458:	2380      	movs	r3, #128	; 0x80
    345a:	019b      	lsls	r3, r3, #6
    345c:	429a      	cmp	r2, r3
    345e:	d804      	bhi.n	346a <spi_data_write+0x72>
				order = 0x3;
    3460:	2312      	movs	r3, #18
    3462:	18fb      	adds	r3, r7, r3
    3464:	2203      	movs	r2, #3
    3466:	701a      	strb	r2, [r3, #0]
    3468:	e013      	b.n	3492 <spi_data_write+0x9a>
			else
				order = 0x1;
    346a:	2312      	movs	r3, #18
    346c:	18fb      	adds	r3, r7, r3
    346e:	2201      	movs	r2, #1
    3470:	701a      	strb	r2, [r3, #0]
    3472:	e00e      	b.n	3492 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3474:	1cbb      	adds	r3, r7, #2
    3476:	881a      	ldrh	r2, [r3, #0]
    3478:	2380      	movs	r3, #128	; 0x80
    347a:	019b      	lsls	r3, r3, #6
    347c:	429a      	cmp	r2, r3
    347e:	d804      	bhi.n	348a <spi_data_write+0x92>
				order = 0x3;
    3480:	2312      	movs	r3, #18
    3482:	18fb      	adds	r3, r7, r3
    3484:	2203      	movs	r2, #3
    3486:	701a      	strb	r2, [r3, #0]
    3488:	e003      	b.n	3492 <spi_data_write+0x9a>
			else
				order = 0x2;
    348a:	2312      	movs	r3, #18
    348c:	18fb      	adds	r3, r7, r3
    348e:	2202      	movs	r2, #2
    3490:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3492:	2311      	movs	r3, #17
    3494:	18fb      	adds	r3, r7, r3
    3496:	781a      	ldrb	r2, [r3, #0]
    3498:	2312      	movs	r3, #18
    349a:	18fb      	adds	r3, r7, r3
    349c:	781b      	ldrb	r3, [r3, #0]
    349e:	4313      	orrs	r3, r2
    34a0:	b2da      	uxtb	r2, r3
    34a2:	2311      	movs	r3, #17
    34a4:	18fb      	adds	r3, r7, r3
    34a6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    34a8:	2311      	movs	r3, #17
    34aa:	18fb      	adds	r3, r7, r3
    34ac:	2101      	movs	r1, #1
    34ae:	0018      	movs	r0, r3
    34b0:	4b3c      	ldr	r3, [pc, #240]	; (35a4 <spi_data_write+0x1ac>)
    34b2:	4798      	blx	r3
    34b4:	1e03      	subs	r3, r0, #0
    34b6:	d012      	beq.n	34de <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    34b8:	23d4      	movs	r3, #212	; 0xd4
    34ba:	005a      	lsls	r2, r3, #1
    34bc:	493a      	ldr	r1, [pc, #232]	; (35a8 <spi_data_write+0x1b0>)
    34be:	4b3b      	ldr	r3, [pc, #236]	; (35ac <spi_data_write+0x1b4>)
    34c0:	0018      	movs	r0, r3
    34c2:	4b3b      	ldr	r3, [pc, #236]	; (35b0 <spi_data_write+0x1b8>)
    34c4:	4798      	blx	r3
    34c6:	4b3b      	ldr	r3, [pc, #236]	; (35b4 <spi_data_write+0x1bc>)
    34c8:	0018      	movs	r0, r3
    34ca:	4b3b      	ldr	r3, [pc, #236]	; (35b8 <spi_data_write+0x1c0>)
    34cc:	4798      	blx	r3
    34ce:	200d      	movs	r0, #13
    34d0:	4b3a      	ldr	r3, [pc, #232]	; (35bc <spi_data_write+0x1c4>)
    34d2:	4798      	blx	r3
			result = N_FAIL;
    34d4:	2313      	movs	r3, #19
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	2200      	movs	r2, #0
    34da:	701a      	strb	r2, [r3, #0]
			break;
    34dc:	e05a      	b.n	3594 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    34de:	2316      	movs	r3, #22
    34e0:	18fb      	adds	r3, r7, r3
    34e2:	2200      	movs	r2, #0
    34e4:	5e9b      	ldrsh	r3, [r3, r2]
    34e6:	687a      	ldr	r2, [r7, #4]
    34e8:	18d2      	adds	r2, r2, r3
    34ea:	2314      	movs	r3, #20
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	881b      	ldrh	r3, [r3, #0]
    34f0:	0019      	movs	r1, r3
    34f2:	0010      	movs	r0, r2
    34f4:	4b2b      	ldr	r3, [pc, #172]	; (35a4 <spi_data_write+0x1ac>)
    34f6:	4798      	blx	r3
    34f8:	1e03      	subs	r3, r0, #0
    34fa:	d013      	beq.n	3524 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    34fc:	23b2      	movs	r3, #178	; 0xb2
    34fe:	33ff      	adds	r3, #255	; 0xff
    3500:	001a      	movs	r2, r3
    3502:	4929      	ldr	r1, [pc, #164]	; (35a8 <spi_data_write+0x1b0>)
    3504:	4b29      	ldr	r3, [pc, #164]	; (35ac <spi_data_write+0x1b4>)
    3506:	0018      	movs	r0, r3
    3508:	4b29      	ldr	r3, [pc, #164]	; (35b0 <spi_data_write+0x1b8>)
    350a:	4798      	blx	r3
    350c:	4b2c      	ldr	r3, [pc, #176]	; (35c0 <spi_data_write+0x1c8>)
    350e:	0018      	movs	r0, r3
    3510:	4b29      	ldr	r3, [pc, #164]	; (35b8 <spi_data_write+0x1c0>)
    3512:	4798      	blx	r3
    3514:	200d      	movs	r0, #13
    3516:	4b29      	ldr	r3, [pc, #164]	; (35bc <spi_data_write+0x1c4>)
    3518:	4798      	blx	r3
			result = N_FAIL;
    351a:	2313      	movs	r3, #19
    351c:	18fb      	adds	r3, r7, r3
    351e:	2200      	movs	r2, #0
    3520:	701a      	strb	r2, [r3, #0]
			break;
    3522:	e037      	b.n	3594 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    3524:	4b27      	ldr	r3, [pc, #156]	; (35c4 <spi_data_write+0x1cc>)
    3526:	781b      	ldrb	r3, [r3, #0]
    3528:	2b00      	cmp	r3, #0
    352a:	d11b      	bne.n	3564 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    352c:	230c      	movs	r3, #12
    352e:	18fb      	adds	r3, r7, r3
    3530:	2102      	movs	r1, #2
    3532:	0018      	movs	r0, r3
    3534:	4b1b      	ldr	r3, [pc, #108]	; (35a4 <spi_data_write+0x1ac>)
    3536:	4798      	blx	r3
    3538:	1e03      	subs	r3, r0, #0
    353a:	d013      	beq.n	3564 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    353c:	23bc      	movs	r3, #188	; 0xbc
    353e:	33ff      	adds	r3, #255	; 0xff
    3540:	001a      	movs	r2, r3
    3542:	4919      	ldr	r1, [pc, #100]	; (35a8 <spi_data_write+0x1b0>)
    3544:	4b19      	ldr	r3, [pc, #100]	; (35ac <spi_data_write+0x1b4>)
    3546:	0018      	movs	r0, r3
    3548:	4b19      	ldr	r3, [pc, #100]	; (35b0 <spi_data_write+0x1b8>)
    354a:	4798      	blx	r3
    354c:	4b1e      	ldr	r3, [pc, #120]	; (35c8 <spi_data_write+0x1d0>)
    354e:	0018      	movs	r0, r3
    3550:	4b19      	ldr	r3, [pc, #100]	; (35b8 <spi_data_write+0x1c0>)
    3552:	4798      	blx	r3
    3554:	200d      	movs	r0, #13
    3556:	4b19      	ldr	r3, [pc, #100]	; (35bc <spi_data_write+0x1c4>)
    3558:	4798      	blx	r3
				result = N_FAIL;
    355a:	2313      	movs	r3, #19
    355c:	18fb      	adds	r3, r7, r3
    355e:	2200      	movs	r2, #0
    3560:	701a      	strb	r2, [r3, #0]
				break;
    3562:	e017      	b.n	3594 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    3564:	2316      	movs	r3, #22
    3566:	18fb      	adds	r3, r7, r3
    3568:	881a      	ldrh	r2, [r3, #0]
    356a:	2314      	movs	r3, #20
    356c:	18fb      	adds	r3, r7, r3
    356e:	881b      	ldrh	r3, [r3, #0]
    3570:	18d3      	adds	r3, r2, r3
    3572:	b29a      	uxth	r2, r3
    3574:	2316      	movs	r3, #22
    3576:	18fb      	adds	r3, r7, r3
    3578:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    357a:	1cbb      	adds	r3, r7, #2
    357c:	1cb9      	adds	r1, r7, #2
    357e:	2214      	movs	r2, #20
    3580:	18ba      	adds	r2, r7, r2
    3582:	8809      	ldrh	r1, [r1, #0]
    3584:	8812      	ldrh	r2, [r2, #0]
    3586:	1a8a      	subs	r2, r1, r2
    3588:	801a      	strh	r2, [r3, #0]
	} while (sz);
    358a:	1cbb      	adds	r3, r7, #2
    358c:	881b      	ldrh	r3, [r3, #0]
    358e:	2b00      	cmp	r3, #0
    3590:	d000      	beq.n	3594 <spi_data_write+0x19c>
    3592:	e744      	b.n	341e <spi_data_write+0x26>


	return result;
    3594:	2313      	movs	r3, #19
    3596:	18fb      	adds	r3, r7, r3
    3598:	781b      	ldrb	r3, [r3, #0]
    359a:	b25b      	sxtb	r3, r3
}
    359c:	0018      	movs	r0, r3
    359e:	46bd      	mov	sp, r7
    35a0:	b006      	add	sp, #24
    35a2:	bd80      	pop	{r7, pc}
    35a4:	00002cb1 	.word	0x00002cb1
    35a8:	0000e418 	.word	0x0000e418
    35ac:	0000df00 	.word	0x0000df00
    35b0:	0000c5d9 	.word	0x0000c5d9
    35b4:	0000e03c 	.word	0x0000e03c
    35b8:	0000c6f9 	.word	0x0000c6f9
    35bc:	0000c60d 	.word	0x0000c60d
    35c0:	0000e074 	.word	0x0000e074
    35c4:	200000e8 	.word	0x200000e8
    35c8:	0000e0a8 	.word	0x0000e0a8

000035cc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    35cc:	b5b0      	push	{r4, r5, r7, lr}
    35ce:	b086      	sub	sp, #24
    35d0:	af02      	add	r7, sp, #8
    35d2:	6078      	str	r0, [r7, #4]
    35d4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    35d6:	230d      	movs	r3, #13
    35d8:	18fb      	adds	r3, r7, r3
    35da:	2201      	movs	r2, #1
    35dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    35de:	230f      	movs	r3, #15
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	22c9      	movs	r2, #201	; 0xc9
    35e4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    35e6:	230e      	movs	r3, #14
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	2200      	movs	r2, #0
    35ec:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    35ee:	687b      	ldr	r3, [r7, #4]
    35f0:	2b30      	cmp	r3, #48	; 0x30
    35f2:	d808      	bhi.n	3606 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    35f4:	230f      	movs	r3, #15
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	22c3      	movs	r2, #195	; 0xc3
    35fa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    35fc:	230e      	movs	r3, #14
    35fe:	18fb      	adds	r3, r7, r3
    3600:	2201      	movs	r2, #1
    3602:	701a      	strb	r2, [r3, #0]
    3604:	e007      	b.n	3616 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3606:	230f      	movs	r3, #15
    3608:	18fb      	adds	r3, r7, r3
    360a:	22c9      	movs	r2, #201	; 0xc9
    360c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    360e:	230e      	movs	r3, #14
    3610:	18fb      	adds	r3, r7, r3
    3612:	2200      	movs	r2, #0
    3614:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3616:	230d      	movs	r3, #13
    3618:	18fc      	adds	r4, r7, r3
    361a:	683a      	ldr	r2, [r7, #0]
    361c:	6879      	ldr	r1, [r7, #4]
    361e:	230f      	movs	r3, #15
    3620:	18fb      	adds	r3, r7, r3
    3622:	7818      	ldrb	r0, [r3, #0]
    3624:	230e      	movs	r3, #14
    3626:	18fb      	adds	r3, r7, r3
    3628:	781b      	ldrb	r3, [r3, #0]
    362a:	9300      	str	r3, [sp, #0]
    362c:	2304      	movs	r3, #4
    362e:	4d26      	ldr	r5, [pc, #152]	; (36c8 <spi_write_reg+0xfc>)
    3630:	47a8      	blx	r5
    3632:	0003      	movs	r3, r0
    3634:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3636:	230d      	movs	r3, #13
    3638:	18fb      	adds	r3, r7, r3
    363a:	781b      	ldrb	r3, [r3, #0]
    363c:	b25b      	sxtb	r3, r3
    363e:	2b01      	cmp	r3, #1
    3640:	d012      	beq.n	3668 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3642:	23ec      	movs	r3, #236	; 0xec
    3644:	33ff      	adds	r3, #255	; 0xff
    3646:	001a      	movs	r2, r3
    3648:	4920      	ldr	r1, [pc, #128]	; (36cc <spi_write_reg+0x100>)
    364a:	4b21      	ldr	r3, [pc, #132]	; (36d0 <spi_write_reg+0x104>)
    364c:	0018      	movs	r0, r3
    364e:	4b21      	ldr	r3, [pc, #132]	; (36d4 <spi_write_reg+0x108>)
    3650:	4798      	blx	r3
    3652:	687a      	ldr	r2, [r7, #4]
    3654:	4b20      	ldr	r3, [pc, #128]	; (36d8 <spi_write_reg+0x10c>)
    3656:	0011      	movs	r1, r2
    3658:	0018      	movs	r0, r3
    365a:	4b1e      	ldr	r3, [pc, #120]	; (36d4 <spi_write_reg+0x108>)
    365c:	4798      	blx	r3
    365e:	200d      	movs	r0, #13
    3660:	4b1e      	ldr	r3, [pc, #120]	; (36dc <spi_write_reg+0x110>)
    3662:	4798      	blx	r3
		return N_FAIL;
    3664:	2300      	movs	r3, #0
    3666:	e02b      	b.n	36c0 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    3668:	230d      	movs	r3, #13
    366a:	18fc      	adds	r4, r7, r3
    366c:	230f      	movs	r3, #15
    366e:	18fb      	adds	r3, r7, r3
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	0018      	movs	r0, r3
    3674:	4b1a      	ldr	r3, [pc, #104]	; (36e0 <spi_write_reg+0x114>)
    3676:	4798      	blx	r3
    3678:	0003      	movs	r3, r0
    367a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    367c:	230d      	movs	r3, #13
    367e:	18fb      	adds	r3, r7, r3
    3680:	781b      	ldrb	r3, [r3, #0]
    3682:	b25b      	sxtb	r3, r3
    3684:	2b01      	cmp	r3, #1
    3686:	d01a      	beq.n	36be <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3688:	23f2      	movs	r3, #242	; 0xf2
    368a:	33ff      	adds	r3, #255	; 0xff
    368c:	001a      	movs	r2, r3
    368e:	490f      	ldr	r1, [pc, #60]	; (36cc <spi_write_reg+0x100>)
    3690:	4b0f      	ldr	r3, [pc, #60]	; (36d0 <spi_write_reg+0x104>)
    3692:	0018      	movs	r0, r3
    3694:	4b0f      	ldr	r3, [pc, #60]	; (36d4 <spi_write_reg+0x108>)
    3696:	4798      	blx	r3
    3698:	687a      	ldr	r2, [r7, #4]
    369a:	4b12      	ldr	r3, [pc, #72]	; (36e4 <spi_write_reg+0x118>)
    369c:	0011      	movs	r1, r2
    369e:	0018      	movs	r0, r3
    36a0:	4b0c      	ldr	r3, [pc, #48]	; (36d4 <spi_write_reg+0x108>)
    36a2:	4798      	blx	r3
    36a4:	200d      	movs	r0, #13
    36a6:	4b0d      	ldr	r3, [pc, #52]	; (36dc <spi_write_reg+0x110>)
    36a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    36aa:	2300      	movs	r3, #0
    36ac:	9300      	str	r3, [sp, #0]
    36ae:	2300      	movs	r3, #0
    36b0:	2200      	movs	r2, #0
    36b2:	2100      	movs	r1, #0
    36b4:	20cf      	movs	r0, #207	; 0xcf
    36b6:	4c04      	ldr	r4, [pc, #16]	; (36c8 <spi_write_reg+0xfc>)
    36b8:	47a0      	blx	r4
		return N_FAIL;
    36ba:	2300      	movs	r3, #0
    36bc:	e000      	b.n	36c0 <spi_write_reg+0xf4>
	}

	return N_OK;
    36be:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    36c0:	0018      	movs	r0, r3
    36c2:	46bd      	mov	sp, r7
    36c4:	b004      	add	sp, #16
    36c6:	bdb0      	pop	{r4, r5, r7, pc}
    36c8:	00002d75 	.word	0x00002d75
    36cc:	0000e428 	.word	0x0000e428
    36d0:	0000df00 	.word	0x0000df00
    36d4:	0000c5d9 	.word	0x0000c5d9
    36d8:	0000e0e0 	.word	0x0000e0e0
    36dc:	0000c60d 	.word	0x0000c60d
    36e0:	000030b9 	.word	0x000030b9
    36e4:	0000e10c 	.word	0x0000e10c

000036e8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    36e8:	b5b0      	push	{r4, r5, r7, lr}
    36ea:	b088      	sub	sp, #32
    36ec:	af02      	add	r7, sp, #8
    36ee:	60f8      	str	r0, [r7, #12]
    36f0:	60b9      	str	r1, [r7, #8]
    36f2:	1dbb      	adds	r3, r7, #6
    36f4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    36f6:	2317      	movs	r3, #23
    36f8:	18fb      	adds	r3, r7, r3
    36fa:	22c7      	movs	r2, #199	; 0xc7
    36fc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    36fe:	1dbb      	adds	r3, r7, #6
    3700:	881a      	ldrh	r2, [r3, #0]
    3702:	2316      	movs	r3, #22
    3704:	18fc      	adds	r4, r7, r3
    3706:	68f9      	ldr	r1, [r7, #12]
    3708:	2317      	movs	r3, #23
    370a:	18fb      	adds	r3, r7, r3
    370c:	7818      	ldrb	r0, [r3, #0]
    370e:	2300      	movs	r3, #0
    3710:	9300      	str	r3, [sp, #0]
    3712:	0013      	movs	r3, r2
    3714:	2200      	movs	r2, #0
    3716:	4d37      	ldr	r5, [pc, #220]	; (37f4 <nm_spi_write+0x10c>)
    3718:	47a8      	blx	r5
    371a:	0003      	movs	r3, r0
    371c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    371e:	2316      	movs	r3, #22
    3720:	18fb      	adds	r3, r7, r3
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	b25b      	sxtb	r3, r3
    3726:	2b01      	cmp	r3, #1
    3728:	d010      	beq.n	374c <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    372a:	4a33      	ldr	r2, [pc, #204]	; (37f8 <nm_spi_write+0x110>)
    372c:	4933      	ldr	r1, [pc, #204]	; (37fc <nm_spi_write+0x114>)
    372e:	4b34      	ldr	r3, [pc, #208]	; (3800 <nm_spi_write+0x118>)
    3730:	0018      	movs	r0, r3
    3732:	4b34      	ldr	r3, [pc, #208]	; (3804 <nm_spi_write+0x11c>)
    3734:	4798      	blx	r3
    3736:	68fa      	ldr	r2, [r7, #12]
    3738:	4b33      	ldr	r3, [pc, #204]	; (3808 <nm_spi_write+0x120>)
    373a:	0011      	movs	r1, r2
    373c:	0018      	movs	r0, r3
    373e:	4b31      	ldr	r3, [pc, #196]	; (3804 <nm_spi_write+0x11c>)
    3740:	4798      	blx	r3
    3742:	200d      	movs	r0, #13
    3744:	4b31      	ldr	r3, [pc, #196]	; (380c <nm_spi_write+0x124>)
    3746:	4798      	blx	r3
		return N_FAIL;
    3748:	2300      	movs	r3, #0
    374a:	e04f      	b.n	37ec <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    374c:	2316      	movs	r3, #22
    374e:	18fc      	adds	r4, r7, r3
    3750:	2317      	movs	r3, #23
    3752:	18fb      	adds	r3, r7, r3
    3754:	781b      	ldrb	r3, [r3, #0]
    3756:	0018      	movs	r0, r3
    3758:	4b2d      	ldr	r3, [pc, #180]	; (3810 <nm_spi_write+0x128>)
    375a:	4798      	blx	r3
    375c:	0003      	movs	r3, r0
    375e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3760:	2316      	movs	r3, #22
    3762:	18fb      	adds	r3, r7, r3
    3764:	781b      	ldrb	r3, [r3, #0]
    3766:	b25b      	sxtb	r3, r3
    3768:	2b01      	cmp	r3, #1
    376a:	d018      	beq.n	379e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    376c:	4a29      	ldr	r2, [pc, #164]	; (3814 <nm_spi_write+0x12c>)
    376e:	4923      	ldr	r1, [pc, #140]	; (37fc <nm_spi_write+0x114>)
    3770:	4b23      	ldr	r3, [pc, #140]	; (3800 <nm_spi_write+0x118>)
    3772:	0018      	movs	r0, r3
    3774:	4b23      	ldr	r3, [pc, #140]	; (3804 <nm_spi_write+0x11c>)
    3776:	4798      	blx	r3
    3778:	68fa      	ldr	r2, [r7, #12]
    377a:	4b27      	ldr	r3, [pc, #156]	; (3818 <nm_spi_write+0x130>)
    377c:	0011      	movs	r1, r2
    377e:	0018      	movs	r0, r3
    3780:	4b20      	ldr	r3, [pc, #128]	; (3804 <nm_spi_write+0x11c>)
    3782:	4798      	blx	r3
    3784:	200d      	movs	r0, #13
    3786:	4b21      	ldr	r3, [pc, #132]	; (380c <nm_spi_write+0x124>)
    3788:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    378a:	2300      	movs	r3, #0
    378c:	9300      	str	r3, [sp, #0]
    378e:	2300      	movs	r3, #0
    3790:	2200      	movs	r2, #0
    3792:	2100      	movs	r1, #0
    3794:	20cf      	movs	r0, #207	; 0xcf
    3796:	4c17      	ldr	r4, [pc, #92]	; (37f4 <nm_spi_write+0x10c>)
    3798:	47a0      	blx	r4
		return N_FAIL;
    379a:	2300      	movs	r3, #0
    379c:	e026      	b.n	37ec <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    379e:	2316      	movs	r3, #22
    37a0:	18fc      	adds	r4, r7, r3
    37a2:	1dbb      	adds	r3, r7, #6
    37a4:	881a      	ldrh	r2, [r3, #0]
    37a6:	68bb      	ldr	r3, [r7, #8]
    37a8:	0011      	movs	r1, r2
    37aa:	0018      	movs	r0, r3
    37ac:	4b1b      	ldr	r3, [pc, #108]	; (381c <nm_spi_write+0x134>)
    37ae:	4798      	blx	r3
    37b0:	0003      	movs	r3, r0
    37b2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    37b4:	2316      	movs	r3, #22
    37b6:	18fb      	adds	r3, r7, r3
    37b8:	781b      	ldrb	r3, [r3, #0]
    37ba:	b25b      	sxtb	r3, r3
    37bc:	2b01      	cmp	r3, #1
    37be:	d014      	beq.n	37ea <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    37c0:	4a17      	ldr	r2, [pc, #92]	; (3820 <nm_spi_write+0x138>)
    37c2:	490e      	ldr	r1, [pc, #56]	; (37fc <nm_spi_write+0x114>)
    37c4:	4b0e      	ldr	r3, [pc, #56]	; (3800 <nm_spi_write+0x118>)
    37c6:	0018      	movs	r0, r3
    37c8:	4b0e      	ldr	r3, [pc, #56]	; (3804 <nm_spi_write+0x11c>)
    37ca:	4798      	blx	r3
    37cc:	4b15      	ldr	r3, [pc, #84]	; (3824 <nm_spi_write+0x13c>)
    37ce:	0018      	movs	r0, r3
    37d0:	4b15      	ldr	r3, [pc, #84]	; (3828 <nm_spi_write+0x140>)
    37d2:	4798      	blx	r3
    37d4:	200d      	movs	r0, #13
    37d6:	4b0d      	ldr	r3, [pc, #52]	; (380c <nm_spi_write+0x124>)
    37d8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    37da:	2300      	movs	r3, #0
    37dc:	9300      	str	r3, [sp, #0]
    37de:	2300      	movs	r3, #0
    37e0:	2200      	movs	r2, #0
    37e2:	2100      	movs	r1, #0
    37e4:	20cf      	movs	r0, #207	; 0xcf
    37e6:	4c03      	ldr	r4, [pc, #12]	; (37f4 <nm_spi_write+0x10c>)
    37e8:	47a0      	blx	r4
	}

	return N_OK;
    37ea:	2301      	movs	r3, #1
}
    37ec:	0018      	movs	r0, r3
    37ee:	46bd      	mov	sp, r7
    37f0:	b006      	add	sp, #24
    37f2:	bdb0      	pop	{r4, r5, r7, pc}
    37f4:	00002d75 	.word	0x00002d75
    37f8:	0000020f 	.word	0x0000020f
    37fc:	0000e438 	.word	0x0000e438
    3800:	0000df00 	.word	0x0000df00
    3804:	0000c5d9 	.word	0x0000c5d9
    3808:	0000e144 	.word	0x0000e144
    380c:	0000c60d 	.word	0x0000c60d
    3810:	000030b9 	.word	0x000030b9
    3814:	00000215 	.word	0x00000215
    3818:	0000e174 	.word	0x0000e174
    381c:	000033f9 	.word	0x000033f9
    3820:	00000226 	.word	0x00000226
    3824:	0000e1ac 	.word	0x0000e1ac
    3828:	0000c6f9 	.word	0x0000c6f9

0000382c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    382c:	b5b0      	push	{r4, r5, r7, lr}
    382e:	b086      	sub	sp, #24
    3830:	af02      	add	r7, sp, #8
    3832:	6078      	str	r0, [r7, #4]
    3834:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    3836:	230d      	movs	r3, #13
    3838:	18fb      	adds	r3, r7, r3
    383a:	2201      	movs	r2, #1
    383c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    383e:	230f      	movs	r3, #15
    3840:	18fb      	adds	r3, r7, r3
    3842:	22ca      	movs	r2, #202	; 0xca
    3844:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    3846:	230e      	movs	r3, #14
    3848:	18fb      	adds	r3, r7, r3
    384a:	2200      	movs	r2, #0
    384c:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    384e:	687b      	ldr	r3, [r7, #4]
    3850:	2bff      	cmp	r3, #255	; 0xff
    3852:	d808      	bhi.n	3866 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    3854:	230f      	movs	r3, #15
    3856:	18fb      	adds	r3, r7, r3
    3858:	22c4      	movs	r2, #196	; 0xc4
    385a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    385c:	230e      	movs	r3, #14
    385e:	18fb      	adds	r3, r7, r3
    3860:	2201      	movs	r2, #1
    3862:	701a      	strb	r2, [r3, #0]
    3864:	e007      	b.n	3876 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    3866:	230f      	movs	r3, #15
    3868:	18fb      	adds	r3, r7, r3
    386a:	22ca      	movs	r2, #202	; 0xca
    386c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    386e:	230e      	movs	r3, #14
    3870:	18fb      	adds	r3, r7, r3
    3872:	2200      	movs	r2, #0
    3874:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3876:	230d      	movs	r3, #13
    3878:	18fc      	adds	r4, r7, r3
    387a:	6879      	ldr	r1, [r7, #4]
    387c:	230f      	movs	r3, #15
    387e:	18fb      	adds	r3, r7, r3
    3880:	7818      	ldrb	r0, [r3, #0]
    3882:	230e      	movs	r3, #14
    3884:	18fb      	adds	r3, r7, r3
    3886:	781b      	ldrb	r3, [r3, #0]
    3888:	9300      	str	r3, [sp, #0]
    388a:	2304      	movs	r3, #4
    388c:	2200      	movs	r2, #0
    388e:	4d44      	ldr	r5, [pc, #272]	; (39a0 <spi_read_reg+0x174>)
    3890:	47a8      	blx	r5
    3892:	0003      	movs	r3, r0
    3894:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3896:	230d      	movs	r3, #13
    3898:	18fb      	adds	r3, r7, r3
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	b25b      	sxtb	r3, r3
    389e:	2b01      	cmp	r3, #1
    38a0:	d010      	beq.n	38c4 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    38a2:	4a40      	ldr	r2, [pc, #256]	; (39a4 <spi_read_reg+0x178>)
    38a4:	4940      	ldr	r1, [pc, #256]	; (39a8 <spi_read_reg+0x17c>)
    38a6:	4b41      	ldr	r3, [pc, #260]	; (39ac <spi_read_reg+0x180>)
    38a8:	0018      	movs	r0, r3
    38aa:	4b41      	ldr	r3, [pc, #260]	; (39b0 <spi_read_reg+0x184>)
    38ac:	4798      	blx	r3
    38ae:	687a      	ldr	r2, [r7, #4]
    38b0:	4b40      	ldr	r3, [pc, #256]	; (39b4 <spi_read_reg+0x188>)
    38b2:	0011      	movs	r1, r2
    38b4:	0018      	movs	r0, r3
    38b6:	4b3e      	ldr	r3, [pc, #248]	; (39b0 <spi_read_reg+0x184>)
    38b8:	4798      	blx	r3
    38ba:	200d      	movs	r0, #13
    38bc:	4b3e      	ldr	r3, [pc, #248]	; (39b8 <spi_read_reg+0x18c>)
    38be:	4798      	blx	r3
		return N_FAIL;
    38c0:	2300      	movs	r3, #0
    38c2:	e068      	b.n	3996 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    38c4:	230d      	movs	r3, #13
    38c6:	18fc      	adds	r4, r7, r3
    38c8:	230f      	movs	r3, #15
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	0018      	movs	r0, r3
    38d0:	4b3a      	ldr	r3, [pc, #232]	; (39bc <spi_read_reg+0x190>)
    38d2:	4798      	blx	r3
    38d4:	0003      	movs	r3, r0
    38d6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    38d8:	230d      	movs	r3, #13
    38da:	18fb      	adds	r3, r7, r3
    38dc:	781b      	ldrb	r3, [r3, #0]
    38de:	b25b      	sxtb	r3, r3
    38e0:	2b01      	cmp	r3, #1
    38e2:	d018      	beq.n	3916 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    38e4:	4a36      	ldr	r2, [pc, #216]	; (39c0 <spi_read_reg+0x194>)
    38e6:	4930      	ldr	r1, [pc, #192]	; (39a8 <spi_read_reg+0x17c>)
    38e8:	4b30      	ldr	r3, [pc, #192]	; (39ac <spi_read_reg+0x180>)
    38ea:	0018      	movs	r0, r3
    38ec:	4b30      	ldr	r3, [pc, #192]	; (39b0 <spi_read_reg+0x184>)
    38ee:	4798      	blx	r3
    38f0:	687a      	ldr	r2, [r7, #4]
    38f2:	4b34      	ldr	r3, [pc, #208]	; (39c4 <spi_read_reg+0x198>)
    38f4:	0011      	movs	r1, r2
    38f6:	0018      	movs	r0, r3
    38f8:	4b2d      	ldr	r3, [pc, #180]	; (39b0 <spi_read_reg+0x184>)
    38fa:	4798      	blx	r3
    38fc:	200d      	movs	r0, #13
    38fe:	4b2e      	ldr	r3, [pc, #184]	; (39b8 <spi_read_reg+0x18c>)
    3900:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3902:	2300      	movs	r3, #0
    3904:	9300      	str	r3, [sp, #0]
    3906:	2300      	movs	r3, #0
    3908:	2200      	movs	r2, #0
    390a:	2100      	movs	r1, #0
    390c:	20cf      	movs	r0, #207	; 0xcf
    390e:	4c24      	ldr	r4, [pc, #144]	; (39a0 <spi_read_reg+0x174>)
    3910:	47a0      	blx	r4
		return N_FAIL;
    3912:	2300      	movs	r3, #0
    3914:	e03f      	b.n	3996 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3916:	230d      	movs	r3, #13
    3918:	18fc      	adds	r4, r7, r3
    391a:	230e      	movs	r3, #14
    391c:	18fb      	adds	r3, r7, r3
    391e:	781a      	ldrb	r2, [r3, #0]
    3920:	2308      	movs	r3, #8
    3922:	18fb      	adds	r3, r7, r3
    3924:	2104      	movs	r1, #4
    3926:	0018      	movs	r0, r3
    3928:	4b27      	ldr	r3, [pc, #156]	; (39c8 <spi_read_reg+0x19c>)
    392a:	4798      	blx	r3
    392c:	0003      	movs	r3, r0
    392e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3930:	230d      	movs	r3, #13
    3932:	18fb      	adds	r3, r7, r3
    3934:	781b      	ldrb	r3, [r3, #0]
    3936:	b25b      	sxtb	r3, r3
    3938:	2b01      	cmp	r3, #1
    393a:	d016      	beq.n	396a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    393c:	4a23      	ldr	r2, [pc, #140]	; (39cc <spi_read_reg+0x1a0>)
    393e:	491a      	ldr	r1, [pc, #104]	; (39a8 <spi_read_reg+0x17c>)
    3940:	4b1a      	ldr	r3, [pc, #104]	; (39ac <spi_read_reg+0x180>)
    3942:	0018      	movs	r0, r3
    3944:	4b1a      	ldr	r3, [pc, #104]	; (39b0 <spi_read_reg+0x184>)
    3946:	4798      	blx	r3
    3948:	4b21      	ldr	r3, [pc, #132]	; (39d0 <spi_read_reg+0x1a4>)
    394a:	0018      	movs	r0, r3
    394c:	4b21      	ldr	r3, [pc, #132]	; (39d4 <spi_read_reg+0x1a8>)
    394e:	4798      	blx	r3
    3950:	200d      	movs	r0, #13
    3952:	4b19      	ldr	r3, [pc, #100]	; (39b8 <spi_read_reg+0x18c>)
    3954:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3956:	2300      	movs	r3, #0
    3958:	9300      	str	r3, [sp, #0]
    395a:	2300      	movs	r3, #0
    395c:	2200      	movs	r2, #0
    395e:	2100      	movs	r1, #0
    3960:	20cf      	movs	r0, #207	; 0xcf
    3962:	4c0f      	ldr	r4, [pc, #60]	; (39a0 <spi_read_reg+0x174>)
    3964:	47a0      	blx	r4
		return N_FAIL;
    3966:	2300      	movs	r3, #0
    3968:	e015      	b.n	3996 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    396a:	2308      	movs	r3, #8
    396c:	18fb      	adds	r3, r7, r3
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    3972:	2308      	movs	r3, #8
    3974:	18fb      	adds	r3, r7, r3
    3976:	785b      	ldrb	r3, [r3, #1]
    3978:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    397a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    397c:	2308      	movs	r3, #8
    397e:	18fb      	adds	r3, r7, r3
    3980:	789b      	ldrb	r3, [r3, #2]
    3982:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    3984:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    3986:	2308      	movs	r3, #8
    3988:	18fb      	adds	r3, r7, r3
    398a:	78db      	ldrb	r3, [r3, #3]
    398c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    398e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    3990:	683b      	ldr	r3, [r7, #0]
    3992:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    3994:	2301      	movs	r3, #1
}
    3996:	0018      	movs	r0, r3
    3998:	46bd      	mov	sp, r7
    399a:	b004      	add	sp, #16
    399c:	bdb0      	pop	{r4, r5, r7, pc}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	00002d75 	.word	0x00002d75
    39a4:	00000245 	.word	0x00000245
    39a8:	0000e448 	.word	0x0000e448
    39ac:	0000df00 	.word	0x0000df00
    39b0:	0000c5d9 	.word	0x0000c5d9
    39b4:	0000e1d4 	.word	0x0000e1d4
    39b8:	0000c60d 	.word	0x0000c60d
    39bc:	000030b9 	.word	0x000030b9
    39c0:	0000024b 	.word	0x0000024b
    39c4:	0000e200 	.word	0x0000e200
    39c8:	000031f5 	.word	0x000031f5
    39cc:	00000253 	.word	0x00000253
    39d0:	0000e234 	.word	0x0000e234
    39d4:	0000c6f9 	.word	0x0000c6f9

000039d8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    39d8:	b5b0      	push	{r4, r5, r7, lr}
    39da:	b088      	sub	sp, #32
    39dc:	af02      	add	r7, sp, #8
    39de:	60f8      	str	r0, [r7, #12]
    39e0:	60b9      	str	r1, [r7, #8]
    39e2:	1dbb      	adds	r3, r7, #6
    39e4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    39e6:	2317      	movs	r3, #23
    39e8:	18fb      	adds	r3, r7, r3
    39ea:	22c8      	movs	r2, #200	; 0xc8
    39ec:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    39ee:	1dbb      	adds	r3, r7, #6
    39f0:	881a      	ldrh	r2, [r3, #0]
    39f2:	2316      	movs	r3, #22
    39f4:	18fc      	adds	r4, r7, r3
    39f6:	68f9      	ldr	r1, [r7, #12]
    39f8:	2317      	movs	r3, #23
    39fa:	18fb      	adds	r3, r7, r3
    39fc:	7818      	ldrb	r0, [r3, #0]
    39fe:	2300      	movs	r3, #0
    3a00:	9300      	str	r3, [sp, #0]
    3a02:	0013      	movs	r3, r2
    3a04:	2200      	movs	r2, #0
    3a06:	4d39      	ldr	r5, [pc, #228]	; (3aec <nm_spi_read+0x114>)
    3a08:	47a8      	blx	r5
    3a0a:	0003      	movs	r3, r0
    3a0c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3a0e:	2316      	movs	r3, #22
    3a10:	18fb      	adds	r3, r7, r3
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	b25b      	sxtb	r3, r3
    3a16:	2b01      	cmp	r3, #1
    3a18:	d011      	beq.n	3a3e <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    3a1a:	239d      	movs	r3, #157	; 0x9d
    3a1c:	009a      	lsls	r2, r3, #2
    3a1e:	4934      	ldr	r1, [pc, #208]	; (3af0 <nm_spi_read+0x118>)
    3a20:	4b34      	ldr	r3, [pc, #208]	; (3af4 <nm_spi_read+0x11c>)
    3a22:	0018      	movs	r0, r3
    3a24:	4b34      	ldr	r3, [pc, #208]	; (3af8 <nm_spi_read+0x120>)
    3a26:	4798      	blx	r3
    3a28:	68fa      	ldr	r2, [r7, #12]
    3a2a:	4b34      	ldr	r3, [pc, #208]	; (3afc <nm_spi_read+0x124>)
    3a2c:	0011      	movs	r1, r2
    3a2e:	0018      	movs	r0, r3
    3a30:	4b31      	ldr	r3, [pc, #196]	; (3af8 <nm_spi_read+0x120>)
    3a32:	4798      	blx	r3
    3a34:	200d      	movs	r0, #13
    3a36:	4b32      	ldr	r3, [pc, #200]	; (3b00 <nm_spi_read+0x128>)
    3a38:	4798      	blx	r3
		return N_FAIL;
    3a3a:	2300      	movs	r3, #0
    3a3c:	e052      	b.n	3ae4 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    3a3e:	2316      	movs	r3, #22
    3a40:	18fc      	adds	r4, r7, r3
    3a42:	2317      	movs	r3, #23
    3a44:	18fb      	adds	r3, r7, r3
    3a46:	781b      	ldrb	r3, [r3, #0]
    3a48:	0018      	movs	r0, r3
    3a4a:	4b2e      	ldr	r3, [pc, #184]	; (3b04 <nm_spi_read+0x12c>)
    3a4c:	4798      	blx	r3
    3a4e:	0003      	movs	r3, r0
    3a50:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3a52:	2316      	movs	r3, #22
    3a54:	18fb      	adds	r3, r7, r3
    3a56:	781b      	ldrb	r3, [r3, #0]
    3a58:	b25b      	sxtb	r3, r3
    3a5a:	2b01      	cmp	r3, #1
    3a5c:	d018      	beq.n	3a90 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    3a5e:	4a2a      	ldr	r2, [pc, #168]	; (3b08 <nm_spi_read+0x130>)
    3a60:	4923      	ldr	r1, [pc, #140]	; (3af0 <nm_spi_read+0x118>)
    3a62:	4b24      	ldr	r3, [pc, #144]	; (3af4 <nm_spi_read+0x11c>)
    3a64:	0018      	movs	r0, r3
    3a66:	4b24      	ldr	r3, [pc, #144]	; (3af8 <nm_spi_read+0x120>)
    3a68:	4798      	blx	r3
    3a6a:	68fa      	ldr	r2, [r7, #12]
    3a6c:	4b27      	ldr	r3, [pc, #156]	; (3b0c <nm_spi_read+0x134>)
    3a6e:	0011      	movs	r1, r2
    3a70:	0018      	movs	r0, r3
    3a72:	4b21      	ldr	r3, [pc, #132]	; (3af8 <nm_spi_read+0x120>)
    3a74:	4798      	blx	r3
    3a76:	200d      	movs	r0, #13
    3a78:	4b21      	ldr	r3, [pc, #132]	; (3b00 <nm_spi_read+0x128>)
    3a7a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3a7c:	2300      	movs	r3, #0
    3a7e:	9300      	str	r3, [sp, #0]
    3a80:	2300      	movs	r3, #0
    3a82:	2200      	movs	r2, #0
    3a84:	2100      	movs	r1, #0
    3a86:	20cf      	movs	r0, #207	; 0xcf
    3a88:	4c18      	ldr	r4, [pc, #96]	; (3aec <nm_spi_read+0x114>)
    3a8a:	47a0      	blx	r4
		return N_FAIL;
    3a8c:	2300      	movs	r3, #0
    3a8e:	e029      	b.n	3ae4 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    3a90:	2316      	movs	r3, #22
    3a92:	18fc      	adds	r4, r7, r3
    3a94:	1dbb      	adds	r3, r7, #6
    3a96:	8819      	ldrh	r1, [r3, #0]
    3a98:	68bb      	ldr	r3, [r7, #8]
    3a9a:	2200      	movs	r2, #0
    3a9c:	0018      	movs	r0, r3
    3a9e:	4b1c      	ldr	r3, [pc, #112]	; (3b10 <nm_spi_read+0x138>)
    3aa0:	4798      	blx	r3
    3aa2:	0003      	movs	r3, r0
    3aa4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3aa6:	2316      	movs	r3, #22
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	781b      	ldrb	r3, [r3, #0]
    3aac:	b25b      	sxtb	r3, r3
    3aae:	2b01      	cmp	r3, #1
    3ab0:	d017      	beq.n	3ae2 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3ab2:	23a1      	movs	r3, #161	; 0xa1
    3ab4:	009a      	lsls	r2, r3, #2
    3ab6:	490e      	ldr	r1, [pc, #56]	; (3af0 <nm_spi_read+0x118>)
    3ab8:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <nm_spi_read+0x11c>)
    3aba:	0018      	movs	r0, r3
    3abc:	4b0e      	ldr	r3, [pc, #56]	; (3af8 <nm_spi_read+0x120>)
    3abe:	4798      	blx	r3
    3ac0:	4b14      	ldr	r3, [pc, #80]	; (3b14 <nm_spi_read+0x13c>)
    3ac2:	0018      	movs	r0, r3
    3ac4:	4b14      	ldr	r3, [pc, #80]	; (3b18 <nm_spi_read+0x140>)
    3ac6:	4798      	blx	r3
    3ac8:	200d      	movs	r0, #13
    3aca:	4b0d      	ldr	r3, [pc, #52]	; (3b00 <nm_spi_read+0x128>)
    3acc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3ace:	2300      	movs	r3, #0
    3ad0:	9300      	str	r3, [sp, #0]
    3ad2:	2300      	movs	r3, #0
    3ad4:	2200      	movs	r2, #0
    3ad6:	2100      	movs	r1, #0
    3ad8:	20cf      	movs	r0, #207	; 0xcf
    3ada:	4c04      	ldr	r4, [pc, #16]	; (3aec <nm_spi_read+0x114>)
    3adc:	47a0      	blx	r4
		return N_FAIL;
    3ade:	2300      	movs	r3, #0
    3ae0:	e000      	b.n	3ae4 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    3ae2:	2301      	movs	r3, #1
}
    3ae4:	0018      	movs	r0, r3
    3ae6:	46bd      	mov	sp, r7
    3ae8:	b006      	add	sp, #24
    3aea:	bdb0      	pop	{r4, r5, r7, pc}
    3aec:	00002d75 	.word	0x00002d75
    3af0:	0000e458 	.word	0x0000e458
    3af4:	0000df00 	.word	0x0000df00
    3af8:	0000c5d9 	.word	0x0000c5d9
    3afc:	0000e254 	.word	0x0000e254
    3b00:	0000c60d 	.word	0x0000c60d
    3b04:	000030b9 	.word	0x000030b9
    3b08:	0000027a 	.word	0x0000027a
    3b0c:	0000e284 	.word	0x0000e284
    3b10:	000031f5 	.word	0x000031f5
    3b14:	0000e2bc 	.word	0x0000e2bc
    3b18:	0000c6f9 	.word	0x0000c6f9

00003b1c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3b1c:	b590      	push	{r4, r7, lr}
    3b1e:	b085      	sub	sp, #20
    3b20:	af00      	add	r7, sp, #0
    3b22:	6078      	str	r0, [r7, #4]
    3b24:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    3b26:	230f      	movs	r3, #15
    3b28:	18fc      	adds	r4, r7, r3
    3b2a:	683a      	ldr	r2, [r7, #0]
    3b2c:	687b      	ldr	r3, [r7, #4]
    3b2e:	0011      	movs	r1, r2
    3b30:	0018      	movs	r0, r3
    3b32:	4b0d      	ldr	r3, [pc, #52]	; (3b68 <nm_spi_read_reg_with_ret+0x4c>)
    3b34:	4798      	blx	r3
    3b36:	0003      	movs	r3, r0
    3b38:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3b3a:	230f      	movs	r3, #15
    3b3c:	18fb      	adds	r3, r7, r3
    3b3e:	781b      	ldrb	r3, [r3, #0]
    3b40:	b25b      	sxtb	r3, r3
    3b42:	2b01      	cmp	r3, #1
    3b44:	d104      	bne.n	3b50 <nm_spi_read_reg_with_ret+0x34>
    3b46:	230f      	movs	r3, #15
    3b48:	18fb      	adds	r3, r7, r3
    3b4a:	2200      	movs	r2, #0
    3b4c:	701a      	strb	r2, [r3, #0]
    3b4e:	e003      	b.n	3b58 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3b50:	230f      	movs	r3, #15
    3b52:	18fb      	adds	r3, r7, r3
    3b54:	22fa      	movs	r2, #250	; 0xfa
    3b56:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    3b58:	230f      	movs	r3, #15
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	781b      	ldrb	r3, [r3, #0]
    3b5e:	b25b      	sxtb	r3, r3
}
    3b60:	0018      	movs	r0, r3
    3b62:	46bd      	mov	sp, r7
    3b64:	b005      	add	sp, #20
    3b66:	bd90      	pop	{r4, r7, pc}
    3b68:	0000382d 	.word	0x0000382d

00003b6c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3b6c:	b590      	push	{r4, r7, lr}
    3b6e:	b085      	sub	sp, #20
    3b70:	af00      	add	r7, sp, #0
    3b72:	6078      	str	r0, [r7, #4]
    3b74:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    3b76:	230f      	movs	r3, #15
    3b78:	18fc      	adds	r4, r7, r3
    3b7a:	683a      	ldr	r2, [r7, #0]
    3b7c:	687b      	ldr	r3, [r7, #4]
    3b7e:	0011      	movs	r1, r2
    3b80:	0018      	movs	r0, r3
    3b82:	4b0d      	ldr	r3, [pc, #52]	; (3bb8 <nm_spi_write_reg+0x4c>)
    3b84:	4798      	blx	r3
    3b86:	0003      	movs	r3, r0
    3b88:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3b8a:	230f      	movs	r3, #15
    3b8c:	18fb      	adds	r3, r7, r3
    3b8e:	781b      	ldrb	r3, [r3, #0]
    3b90:	b25b      	sxtb	r3, r3
    3b92:	2b01      	cmp	r3, #1
    3b94:	d104      	bne.n	3ba0 <nm_spi_write_reg+0x34>
    3b96:	230f      	movs	r3, #15
    3b98:	18fb      	adds	r3, r7, r3
    3b9a:	2200      	movs	r2, #0
    3b9c:	701a      	strb	r2, [r3, #0]
    3b9e:	e003      	b.n	3ba8 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3ba0:	230f      	movs	r3, #15
    3ba2:	18fb      	adds	r3, r7, r3
    3ba4:	22fa      	movs	r2, #250	; 0xfa
    3ba6:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    3ba8:	230f      	movs	r3, #15
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	b25b      	sxtb	r3, r3
}
    3bb0:	0018      	movs	r0, r3
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b005      	add	sp, #20
    3bb6:	bd90      	pop	{r4, r7, pc}
    3bb8:	000035cd 	.word	0x000035cd

00003bbc <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3bbc:	b590      	push	{r4, r7, lr}
    3bbe:	b087      	sub	sp, #28
    3bc0:	af00      	add	r7, sp, #0
    3bc2:	60f8      	str	r0, [r7, #12]
    3bc4:	60b9      	str	r1, [r7, #8]
    3bc6:	1dbb      	adds	r3, r7, #6
    3bc8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    3bca:	2317      	movs	r3, #23
    3bcc:	18fc      	adds	r4, r7, r3
    3bce:	1dbb      	adds	r3, r7, #6
    3bd0:	881a      	ldrh	r2, [r3, #0]
    3bd2:	68b9      	ldr	r1, [r7, #8]
    3bd4:	68fb      	ldr	r3, [r7, #12]
    3bd6:	0018      	movs	r0, r3
    3bd8:	4b0d      	ldr	r3, [pc, #52]	; (3c10 <nm_spi_read_block+0x54>)
    3bda:	4798      	blx	r3
    3bdc:	0003      	movs	r3, r0
    3bde:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3be0:	2317      	movs	r3, #23
    3be2:	18fb      	adds	r3, r7, r3
    3be4:	781b      	ldrb	r3, [r3, #0]
    3be6:	b25b      	sxtb	r3, r3
    3be8:	2b01      	cmp	r3, #1
    3bea:	d104      	bne.n	3bf6 <nm_spi_read_block+0x3a>
    3bec:	2317      	movs	r3, #23
    3bee:	18fb      	adds	r3, r7, r3
    3bf0:	2200      	movs	r2, #0
    3bf2:	701a      	strb	r2, [r3, #0]
    3bf4:	e003      	b.n	3bfe <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3bf6:	2317      	movs	r3, #23
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	22fa      	movs	r2, #250	; 0xfa
    3bfc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    3bfe:	2317      	movs	r3, #23
    3c00:	18fb      	adds	r3, r7, r3
    3c02:	781b      	ldrb	r3, [r3, #0]
    3c04:	b25b      	sxtb	r3, r3
}
    3c06:	0018      	movs	r0, r3
    3c08:	46bd      	mov	sp, r7
    3c0a:	b007      	add	sp, #28
    3c0c:	bd90      	pop	{r4, r7, pc}
    3c0e:	46c0      	nop			; (mov r8, r8)
    3c10:	000039d9 	.word	0x000039d9

00003c14 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3c14:	b590      	push	{r4, r7, lr}
    3c16:	b087      	sub	sp, #28
    3c18:	af00      	add	r7, sp, #0
    3c1a:	60f8      	str	r0, [r7, #12]
    3c1c:	60b9      	str	r1, [r7, #8]
    3c1e:	1dbb      	adds	r3, r7, #6
    3c20:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    3c22:	2317      	movs	r3, #23
    3c24:	18fc      	adds	r4, r7, r3
    3c26:	1dbb      	adds	r3, r7, #6
    3c28:	881a      	ldrh	r2, [r3, #0]
    3c2a:	68b9      	ldr	r1, [r7, #8]
    3c2c:	68fb      	ldr	r3, [r7, #12]
    3c2e:	0018      	movs	r0, r3
    3c30:	4b0d      	ldr	r3, [pc, #52]	; (3c68 <nm_spi_write_block+0x54>)
    3c32:	4798      	blx	r3
    3c34:	0003      	movs	r3, r0
    3c36:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3c38:	2317      	movs	r3, #23
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	b25b      	sxtb	r3, r3
    3c40:	2b01      	cmp	r3, #1
    3c42:	d104      	bne.n	3c4e <nm_spi_write_block+0x3a>
    3c44:	2317      	movs	r3, #23
    3c46:	18fb      	adds	r3, r7, r3
    3c48:	2200      	movs	r2, #0
    3c4a:	701a      	strb	r2, [r3, #0]
    3c4c:	e003      	b.n	3c56 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3c4e:	2317      	movs	r3, #23
    3c50:	18fb      	adds	r3, r7, r3
    3c52:	22fa      	movs	r2, #250	; 0xfa
    3c54:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    3c56:	2317      	movs	r3, #23
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	b25b      	sxtb	r3, r3
}
    3c5e:	0018      	movs	r0, r3
    3c60:	46bd      	mov	sp, r7
    3c62:	b007      	add	sp, #28
    3c64:	bd90      	pop	{r4, r7, pc}
    3c66:	46c0      	nop			; (mov r8, r8)
    3c68:	000036e9 	.word	0x000036e9

00003c6c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3c6c:	b590      	push	{r4, r7, lr}
    3c6e:	b08b      	sub	sp, #44	; 0x2c
    3c70:	af04      	add	r7, sp, #16
    3c72:	0004      	movs	r4, r0
    3c74:	0008      	movs	r0, r1
    3c76:	0011      	movs	r1, r2
    3c78:	1dbb      	adds	r3, r7, #6
    3c7a:	1c22      	adds	r2, r4, #0
    3c7c:	801a      	strh	r2, [r3, #0]
    3c7e:	1d7b      	adds	r3, r7, #5
    3c80:	1c02      	adds	r2, r0, #0
    3c82:	701a      	strb	r2, [r3, #0]
    3c84:	1d3b      	adds	r3, r7, #4
    3c86:	1c0a      	adds	r2, r1, #0
    3c88:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    3c8a:	2317      	movs	r3, #23
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	22ff      	movs	r2, #255	; 0xff
    3c90:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    3c92:	2315      	movs	r3, #21
    3c94:	18fb      	adds	r3, r7, r3
    3c96:	220b      	movs	r2, #11
    3c98:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3c9a:	1dbb      	adds	r3, r7, #6
    3c9c:	881b      	ldrh	r3, [r3, #0]
    3c9e:	2b02      	cmp	r3, #2
    3ca0:	d000      	beq.n	3ca4 <socket+0x38>
    3ca2:	e07e      	b.n	3da2 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    3ca4:	1d7b      	adds	r3, r7, #5
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	2b01      	cmp	r3, #1
    3caa:	d108      	bne.n	3cbe <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    3cac:	2315      	movs	r3, #21
    3cae:	18fb      	adds	r3, r7, r3
    3cb0:	2207      	movs	r2, #7
    3cb2:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    3cb4:	2316      	movs	r3, #22
    3cb6:	18fb      	adds	r3, r7, r3
    3cb8:	2200      	movs	r2, #0
    3cba:	701a      	strb	r2, [r3, #0]
    3cbc:	e067      	b.n	3d8e <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    3cbe:	1d7b      	adds	r3, r7, #5
    3cc0:	781b      	ldrb	r3, [r3, #0]
    3cc2:	2b02      	cmp	r3, #2
    3cc4:	d108      	bne.n	3cd8 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    3cc6:	2315      	movs	r3, #21
    3cc8:	18fb      	adds	r3, r7, r3
    3cca:	220b      	movs	r2, #11
    3ccc:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    3cce:	2316      	movs	r3, #22
    3cd0:	18fb      	adds	r3, r7, r3
    3cd2:	2207      	movs	r2, #7
    3cd4:	701a      	strb	r2, [r3, #0]
    3cd6:	e05a      	b.n	3d8e <socket+0x122>
		}
		else
			return sock;
    3cd8:	2317      	movs	r3, #23
    3cda:	18fb      	adds	r3, r7, r3
    3cdc:	781b      	ldrb	r3, [r3, #0]
    3cde:	b25b      	sxtb	r3, r3
    3ce0:	e063      	b.n	3daa <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    3ce2:	2316      	movs	r3, #22
    3ce4:	18fb      	adds	r3, r7, r3
    3ce6:	781b      	ldrb	r3, [r3, #0]
    3ce8:	011a      	lsls	r2, r3, #4
    3cea:	4b32      	ldr	r3, [pc, #200]	; (3db4 <socket+0x148>)
    3cec:	18d3      	adds	r3, r2, r3
    3cee:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    3cf0:	693b      	ldr	r3, [r7, #16]
    3cf2:	7a9b      	ldrb	r3, [r3, #10]
    3cf4:	b2db      	uxtb	r3, r3
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d142      	bne.n	3d80 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3cfa:	693b      	ldr	r3, [r7, #16]
    3cfc:	2210      	movs	r2, #16
    3cfe:	2100      	movs	r1, #0
    3d00:	0018      	movs	r0, r3
    3d02:	4b2d      	ldr	r3, [pc, #180]	; (3db8 <socket+0x14c>)
    3d04:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    3d06:	693b      	ldr	r3, [r7, #16]
    3d08:	2201      	movs	r2, #1
    3d0a:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    3d0c:	4b2b      	ldr	r3, [pc, #172]	; (3dbc <socket+0x150>)
    3d0e:	881b      	ldrh	r3, [r3, #0]
    3d10:	b29b      	uxth	r3, r3
    3d12:	3301      	adds	r3, #1
    3d14:	b29a      	uxth	r2, r3
    3d16:	4b29      	ldr	r3, [pc, #164]	; (3dbc <socket+0x150>)
    3d18:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    3d1a:	4b28      	ldr	r3, [pc, #160]	; (3dbc <socket+0x150>)
    3d1c:	881b      	ldrh	r3, [r3, #0]
    3d1e:	b29b      	uxth	r3, r3
    3d20:	2b00      	cmp	r3, #0
    3d22:	d106      	bne.n	3d32 <socket+0xc6>
					++gu16SessionID;
    3d24:	4b25      	ldr	r3, [pc, #148]	; (3dbc <socket+0x150>)
    3d26:	881b      	ldrh	r3, [r3, #0]
    3d28:	b29b      	uxth	r3, r3
    3d2a:	3301      	adds	r3, #1
    3d2c:	b29a      	uxth	r2, r3
    3d2e:	4b23      	ldr	r3, [pc, #140]	; (3dbc <socket+0x150>)
    3d30:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    3d32:	4b22      	ldr	r3, [pc, #136]	; (3dbc <socket+0x150>)
    3d34:	881b      	ldrh	r3, [r3, #0]
    3d36:	b29a      	uxth	r2, r3
    3d38:	693b      	ldr	r3, [r7, #16]
    3d3a:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    3d3c:	2317      	movs	r3, #23
    3d3e:	18fb      	adds	r3, r7, r3
    3d40:	2216      	movs	r2, #22
    3d42:	18ba      	adds	r2, r7, r2
    3d44:	7812      	ldrb	r2, [r2, #0]
    3d46:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    3d48:	1d3b      	adds	r3, r7, #4
    3d4a:	781b      	ldrb	r3, [r3, #0]
    3d4c:	2201      	movs	r2, #1
    3d4e:	4013      	ands	r3, r2
    3d50:	d026      	beq.n	3da0 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    3d52:	230c      	movs	r3, #12
    3d54:	18fb      	adds	r3, r7, r3
    3d56:	2217      	movs	r2, #23
    3d58:	18ba      	adds	r2, r7, r2
    3d5a:	7812      	ldrb	r2, [r2, #0]
    3d5c:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3d5e:	693b      	ldr	r3, [r7, #16]
    3d60:	2221      	movs	r2, #33	; 0x21
    3d62:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3d64:	230c      	movs	r3, #12
    3d66:	18fa      	adds	r2, r7, r3
    3d68:	2300      	movs	r3, #0
    3d6a:	9302      	str	r3, [sp, #8]
    3d6c:	2300      	movs	r3, #0
    3d6e:	9301      	str	r3, [sp, #4]
    3d70:	2300      	movs	r3, #0
    3d72:	9300      	str	r3, [sp, #0]
    3d74:	2304      	movs	r3, #4
    3d76:	2150      	movs	r1, #80	; 0x50
    3d78:	2002      	movs	r0, #2
    3d7a:	4c11      	ldr	r4, [pc, #68]	; (3dc0 <socket+0x154>)
    3d7c:	47a0      	blx	r4
				}
				break;
    3d7e:	e00f      	b.n	3da0 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    3d80:	2316      	movs	r3, #22
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	781a      	ldrb	r2, [r3, #0]
    3d86:	2316      	movs	r3, #22
    3d88:	18fb      	adds	r3, r7, r3
    3d8a:	3201      	adds	r2, #1
    3d8c:	701a      	strb	r2, [r3, #0]
    3d8e:	2316      	movs	r3, #22
    3d90:	18fa      	adds	r2, r7, r3
    3d92:	2315      	movs	r3, #21
    3d94:	18fb      	adds	r3, r7, r3
    3d96:	7812      	ldrb	r2, [r2, #0]
    3d98:	781b      	ldrb	r3, [r3, #0]
    3d9a:	429a      	cmp	r2, r3
    3d9c:	d3a1      	bcc.n	3ce2 <socket+0x76>
    3d9e:	e000      	b.n	3da2 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    3da0:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    3da2:	2317      	movs	r3, #23
    3da4:	18fb      	adds	r3, r7, r3
    3da6:	781b      	ldrb	r3, [r3, #0]
    3da8:	b25b      	sxtb	r3, r3
}
    3daa:	0018      	movs	r0, r3
    3dac:	46bd      	mov	sp, r7
    3dae:	b007      	add	sp, #28
    3db0:	bd90      	pop	{r4, r7, pc}
    3db2:	46c0      	nop			; (mov r8, r8)
    3db4:	2000452c 	.word	0x2000452c
    3db8:	00001955 	.word	0x00001955
    3dbc:	200000ea 	.word	0x200000ea
    3dc0:	00001ba1 	.word	0x00001ba1

00003dc4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3dc4:	b5b0      	push	{r4, r5, r7, lr}
    3dc6:	b08a      	sub	sp, #40	; 0x28
    3dc8:	af04      	add	r7, sp, #16
    3dca:	6039      	str	r1, [r7, #0]
    3dcc:	0011      	movs	r1, r2
    3dce:	1dfb      	adds	r3, r7, #7
    3dd0:	1c02      	adds	r2, r0, #0
    3dd2:	701a      	strb	r2, [r3, #0]
    3dd4:	1dbb      	adds	r3, r7, #6
    3dd6:	1c0a      	adds	r2, r1, #0
    3dd8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3dda:	2317      	movs	r3, #23
    3ddc:	18fb      	adds	r3, r7, r3
    3dde:	22fa      	movs	r2, #250	; 0xfa
    3de0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3de2:	1dfb      	adds	r3, r7, #7
    3de4:	781b      	ldrb	r3, [r3, #0]
    3de6:	2b7f      	cmp	r3, #127	; 0x7f
    3de8:	d867      	bhi.n	3eba <connect+0xf6>
    3dea:	683b      	ldr	r3, [r7, #0]
    3dec:	2b00      	cmp	r3, #0
    3dee:	d064      	beq.n	3eba <connect+0xf6>
    3df0:	1dfb      	adds	r3, r7, #7
    3df2:	781b      	ldrb	r3, [r3, #0]
    3df4:	b25b      	sxtb	r3, r3
    3df6:	4a35      	ldr	r2, [pc, #212]	; (3ecc <connect+0x108>)
    3df8:	011b      	lsls	r3, r3, #4
    3dfa:	18d3      	adds	r3, r2, r3
    3dfc:	330a      	adds	r3, #10
    3dfe:	781b      	ldrb	r3, [r3, #0]
    3e00:	b2db      	uxtb	r3, r3
    3e02:	2b01      	cmp	r3, #1
    3e04:	d159      	bne.n	3eba <connect+0xf6>
    3e06:	1dbb      	adds	r3, r7, #6
    3e08:	781b      	ldrb	r3, [r3, #0]
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d055      	beq.n	3eba <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3e0e:	2316      	movs	r3, #22
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	2244      	movs	r2, #68	; 0x44
    3e14:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3e16:	1dfb      	adds	r3, r7, #7
    3e18:	781b      	ldrb	r3, [r3, #0]
    3e1a:	b25b      	sxtb	r3, r3
    3e1c:	4a2b      	ldr	r2, [pc, #172]	; (3ecc <connect+0x108>)
    3e1e:	011b      	lsls	r3, r3, #4
    3e20:	18d3      	adds	r3, r2, r3
    3e22:	330b      	adds	r3, #11
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	b2db      	uxtb	r3, r3
    3e28:	001a      	movs	r2, r3
    3e2a:	2301      	movs	r3, #1
    3e2c:	4013      	ands	r3, r2
    3e2e:	d00f      	beq.n	3e50 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3e30:	2316      	movs	r3, #22
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	224b      	movs	r2, #75	; 0x4b
    3e36:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3e38:	1dfb      	adds	r3, r7, #7
    3e3a:	781b      	ldrb	r3, [r3, #0]
    3e3c:	b25b      	sxtb	r3, r3
    3e3e:	4a23      	ldr	r2, [pc, #140]	; (3ecc <connect+0x108>)
    3e40:	011b      	lsls	r3, r3, #4
    3e42:	18d3      	adds	r3, r2, r3
    3e44:	330b      	adds	r3, #11
    3e46:	781b      	ldrb	r3, [r3, #0]
    3e48:	b2da      	uxtb	r2, r3
    3e4a:	2308      	movs	r3, #8
    3e4c:	18fb      	adds	r3, r7, r3
    3e4e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    3e50:	2308      	movs	r3, #8
    3e52:	18fb      	adds	r3, r7, r3
    3e54:	1dfa      	adds	r2, r7, #7
    3e56:	7812      	ldrb	r2, [r2, #0]
    3e58:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3e5a:	6839      	ldr	r1, [r7, #0]
    3e5c:	2308      	movs	r3, #8
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	2208      	movs	r2, #8
    3e62:	0018      	movs	r0, r3
    3e64:	4b1a      	ldr	r3, [pc, #104]	; (3ed0 <connect+0x10c>)
    3e66:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3e68:	1dfb      	adds	r3, r7, #7
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	b25b      	sxtb	r3, r3
    3e6e:	4a17      	ldr	r2, [pc, #92]	; (3ecc <connect+0x108>)
    3e70:	011b      	lsls	r3, r3, #4
    3e72:	18d3      	adds	r3, r2, r3
    3e74:	3306      	adds	r3, #6
    3e76:	881b      	ldrh	r3, [r3, #0]
    3e78:	b29a      	uxth	r2, r3
    3e7a:	2308      	movs	r3, #8
    3e7c:	18fb      	adds	r3, r7, r3
    3e7e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3e80:	2317      	movs	r3, #23
    3e82:	18fc      	adds	r4, r7, r3
    3e84:	2308      	movs	r3, #8
    3e86:	18fa      	adds	r2, r7, r3
    3e88:	2316      	movs	r3, #22
    3e8a:	18fb      	adds	r3, r7, r3
    3e8c:	7819      	ldrb	r1, [r3, #0]
    3e8e:	2300      	movs	r3, #0
    3e90:	9302      	str	r3, [sp, #8]
    3e92:	2300      	movs	r3, #0
    3e94:	9301      	str	r3, [sp, #4]
    3e96:	2300      	movs	r3, #0
    3e98:	9300      	str	r3, [sp, #0]
    3e9a:	230c      	movs	r3, #12
    3e9c:	2002      	movs	r0, #2
    3e9e:	4d0d      	ldr	r5, [pc, #52]	; (3ed4 <connect+0x110>)
    3ea0:	47a8      	blx	r5
    3ea2:	0003      	movs	r3, r0
    3ea4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3ea6:	2317      	movs	r3, #23
    3ea8:	18fb      	adds	r3, r7, r3
    3eaa:	781b      	ldrb	r3, [r3, #0]
    3eac:	b25b      	sxtb	r3, r3
    3eae:	2b00      	cmp	r3, #0
    3eb0:	d003      	beq.n	3eba <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    3eb2:	2317      	movs	r3, #23
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	22f7      	movs	r2, #247	; 0xf7
    3eb8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    3eba:	2317      	movs	r3, #23
    3ebc:	18fb      	adds	r3, r7, r3
    3ebe:	781b      	ldrb	r3, [r3, #0]
    3ec0:	b25b      	sxtb	r3, r3
}
    3ec2:	0018      	movs	r0, r3
    3ec4:	46bd      	mov	sp, r7
    3ec6:	b006      	add	sp, #24
    3ec8:	bdb0      	pop	{r4, r5, r7, pc}
    3eca:	46c0      	nop			; (mov r8, r8)
    3ecc:	2000452c 	.word	0x2000452c
    3ed0:	00001919 	.word	0x00001919
    3ed4:	00001ba1 	.word	0x00001ba1

00003ed8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3ed8:	b590      	push	{r4, r7, lr}
    3eda:	b08f      	sub	sp, #60	; 0x3c
    3edc:	af04      	add	r7, sp, #16
    3ede:	0004      	movs	r4, r0
    3ee0:	60b9      	str	r1, [r7, #8]
    3ee2:	0010      	movs	r0, r2
    3ee4:	0019      	movs	r1, r3
    3ee6:	230f      	movs	r3, #15
    3ee8:	18fb      	adds	r3, r7, r3
    3eea:	1c22      	adds	r2, r4, #0
    3eec:	701a      	strb	r2, [r3, #0]
    3eee:	230c      	movs	r3, #12
    3ef0:	18fb      	adds	r3, r7, r3
    3ef2:	1c02      	adds	r2, r0, #0
    3ef4:	801a      	strh	r2, [r3, #0]
    3ef6:	1dbb      	adds	r3, r7, #6
    3ef8:	1c0a      	adds	r2, r1, #0
    3efa:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3efc:	2326      	movs	r3, #38	; 0x26
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	2206      	movs	r2, #6
    3f02:	4252      	negs	r2, r2
    3f04:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3f06:	230f      	movs	r3, #15
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	781b      	ldrb	r3, [r3, #0]
    3f0c:	2b7f      	cmp	r3, #127	; 0x7f
    3f0e:	d900      	bls.n	3f12 <send+0x3a>
    3f10:	e087      	b.n	4022 <send+0x14a>
    3f12:	68bb      	ldr	r3, [r7, #8]
    3f14:	2b00      	cmp	r3, #0
    3f16:	d100      	bne.n	3f1a <send+0x42>
    3f18:	e083      	b.n	4022 <send+0x14a>
    3f1a:	230c      	movs	r3, #12
    3f1c:	18fb      	adds	r3, r7, r3
    3f1e:	881a      	ldrh	r2, [r3, #0]
    3f20:	23af      	movs	r3, #175	; 0xaf
    3f22:	00db      	lsls	r3, r3, #3
    3f24:	429a      	cmp	r2, r3
    3f26:	d900      	bls.n	3f2a <send+0x52>
    3f28:	e07b      	b.n	4022 <send+0x14a>
    3f2a:	230f      	movs	r3, #15
    3f2c:	18fb      	adds	r3, r7, r3
    3f2e:	781b      	ldrb	r3, [r3, #0]
    3f30:	b25b      	sxtb	r3, r3
    3f32:	4a40      	ldr	r2, [pc, #256]	; (4034 <send+0x15c>)
    3f34:	011b      	lsls	r3, r3, #4
    3f36:	18d3      	adds	r3, r2, r3
    3f38:	330a      	adds	r3, #10
    3f3a:	781b      	ldrb	r3, [r3, #0]
    3f3c:	b2db      	uxtb	r3, r3
    3f3e:	2b01      	cmp	r3, #1
    3f40:	d16f      	bne.n	4022 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3f42:	2323      	movs	r3, #35	; 0x23
    3f44:	18fb      	adds	r3, r7, r3
    3f46:	2245      	movs	r2, #69	; 0x45
    3f48:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3f4a:	2324      	movs	r3, #36	; 0x24
    3f4c:	18fb      	adds	r3, r7, r3
    3f4e:	2250      	movs	r2, #80	; 0x50
    3f50:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    3f52:	2310      	movs	r3, #16
    3f54:	18fb      	adds	r3, r7, r3
    3f56:	220f      	movs	r2, #15
    3f58:	18ba      	adds	r2, r7, r2
    3f5a:	7812      	ldrb	r2, [r2, #0]
    3f5c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3f5e:	2310      	movs	r3, #16
    3f60:	18fb      	adds	r3, r7, r3
    3f62:	220c      	movs	r2, #12
    3f64:	18ba      	adds	r2, r7, r2
    3f66:	8812      	ldrh	r2, [r2, #0]
    3f68:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3f6a:	230f      	movs	r3, #15
    3f6c:	18fb      	adds	r3, r7, r3
    3f6e:	781b      	ldrb	r3, [r3, #0]
    3f70:	b25b      	sxtb	r3, r3
    3f72:	4a30      	ldr	r2, [pc, #192]	; (4034 <send+0x15c>)
    3f74:	011b      	lsls	r3, r3, #4
    3f76:	18d3      	adds	r3, r2, r3
    3f78:	3306      	adds	r3, #6
    3f7a:	881b      	ldrh	r3, [r3, #0]
    3f7c:	b29a      	uxth	r2, r3
    3f7e:	2310      	movs	r3, #16
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    3f84:	230f      	movs	r3, #15
    3f86:	18fb      	adds	r3, r7, r3
    3f88:	781b      	ldrb	r3, [r3, #0]
    3f8a:	b25b      	sxtb	r3, r3
    3f8c:	2b06      	cmp	r3, #6
    3f8e:	dd03      	ble.n	3f98 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3f90:	2324      	movs	r3, #36	; 0x24
    3f92:	18fb      	adds	r3, r7, r3
    3f94:	2244      	movs	r2, #68	; 0x44
    3f96:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3f98:	230f      	movs	r3, #15
    3f9a:	18fb      	adds	r3, r7, r3
    3f9c:	781b      	ldrb	r3, [r3, #0]
    3f9e:	b25b      	sxtb	r3, r3
    3fa0:	4a24      	ldr	r2, [pc, #144]	; (4034 <send+0x15c>)
    3fa2:	011b      	lsls	r3, r3, #4
    3fa4:	18d3      	adds	r3, r2, r3
    3fa6:	330b      	adds	r3, #11
    3fa8:	781b      	ldrb	r3, [r3, #0]
    3faa:	b2db      	uxtb	r3, r3
    3fac:	001a      	movs	r2, r3
    3fae:	2301      	movs	r3, #1
    3fb0:	4013      	ands	r3, r2
    3fb2:	d00f      	beq.n	3fd4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3fb4:	2323      	movs	r3, #35	; 0x23
    3fb6:	18fb      	adds	r3, r7, r3
    3fb8:	224c      	movs	r2, #76	; 0x4c
    3fba:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3fbc:	230f      	movs	r3, #15
    3fbe:	18fb      	adds	r3, r7, r3
    3fc0:	2200      	movs	r2, #0
    3fc2:	569a      	ldrsb	r2, [r3, r2]
    3fc4:	2324      	movs	r3, #36	; 0x24
    3fc6:	18fb      	adds	r3, r7, r3
    3fc8:	491a      	ldr	r1, [pc, #104]	; (4034 <send+0x15c>)
    3fca:	0112      	lsls	r2, r2, #4
    3fcc:	188a      	adds	r2, r1, r2
    3fce:	3208      	adds	r2, #8
    3fd0:	8812      	ldrh	r2, [r2, #0]
    3fd2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3fd4:	2323      	movs	r3, #35	; 0x23
    3fd6:	18fb      	adds	r3, r7, r3
    3fd8:	781b      	ldrb	r3, [r3, #0]
    3fda:	2280      	movs	r2, #128	; 0x80
    3fdc:	4252      	negs	r2, r2
    3fde:	4313      	orrs	r3, r2
    3fe0:	b2d9      	uxtb	r1, r3
    3fe2:	2310      	movs	r3, #16
    3fe4:	18fa      	adds	r2, r7, r3
    3fe6:	2324      	movs	r3, #36	; 0x24
    3fe8:	18fb      	adds	r3, r7, r3
    3fea:	881b      	ldrh	r3, [r3, #0]
    3fec:	9302      	str	r3, [sp, #8]
    3fee:	230c      	movs	r3, #12
    3ff0:	18fb      	adds	r3, r7, r3
    3ff2:	881b      	ldrh	r3, [r3, #0]
    3ff4:	9301      	str	r3, [sp, #4]
    3ff6:	68bb      	ldr	r3, [r7, #8]
    3ff8:	9300      	str	r3, [sp, #0]
    3ffa:	2310      	movs	r3, #16
    3ffc:	2002      	movs	r0, #2
    3ffe:	4c0e      	ldr	r4, [pc, #56]	; (4038 <send+0x160>)
    4000:	47a0      	blx	r4
    4002:	0003      	movs	r3, r0
    4004:	001a      	movs	r2, r3
    4006:	2326      	movs	r3, #38	; 0x26
    4008:	18fb      	adds	r3, r7, r3
    400a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    400c:	2326      	movs	r3, #38	; 0x26
    400e:	18fb      	adds	r3, r7, r3
    4010:	2200      	movs	r2, #0
    4012:	5e9b      	ldrsh	r3, [r3, r2]
    4014:	2b00      	cmp	r3, #0
    4016:	d004      	beq.n	4022 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    4018:	2326      	movs	r3, #38	; 0x26
    401a:	18fb      	adds	r3, r7, r3
    401c:	220e      	movs	r2, #14
    401e:	4252      	negs	r2, r2
    4020:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    4022:	2326      	movs	r3, #38	; 0x26
    4024:	18fb      	adds	r3, r7, r3
    4026:	2200      	movs	r2, #0
    4028:	5e9b      	ldrsh	r3, [r3, r2]
}
    402a:	0018      	movs	r0, r3
    402c:	46bd      	mov	sp, r7
    402e:	b00b      	add	sp, #44	; 0x2c
    4030:	bd90      	pop	{r4, r7, pc}
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	2000452c 	.word	0x2000452c
    4038:	00001ba1 	.word	0x00001ba1

0000403c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    403c:	b590      	push	{r4, r7, lr}
    403e:	b08d      	sub	sp, #52	; 0x34
    4040:	af04      	add	r7, sp, #16
    4042:	60b9      	str	r1, [r7, #8]
    4044:	0011      	movs	r1, r2
    4046:	607b      	str	r3, [r7, #4]
    4048:	230f      	movs	r3, #15
    404a:	18fb      	adds	r3, r7, r3
    404c:	1c02      	adds	r2, r0, #0
    404e:	701a      	strb	r2, [r3, #0]
    4050:	230c      	movs	r3, #12
    4052:	18fb      	adds	r3, r7, r3
    4054:	1c0a      	adds	r2, r1, #0
    4056:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4058:	231e      	movs	r3, #30
    405a:	18fb      	adds	r3, r7, r3
    405c:	2206      	movs	r2, #6
    405e:	4252      	negs	r2, r2
    4060:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4062:	230f      	movs	r3, #15
    4064:	18fb      	adds	r3, r7, r3
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	2b7f      	cmp	r3, #127	; 0x7f
    406a:	d900      	bls.n	406e <recv+0x32>
    406c:	e099      	b.n	41a2 <recv+0x166>
    406e:	68bb      	ldr	r3, [r7, #8]
    4070:	2b00      	cmp	r3, #0
    4072:	d100      	bne.n	4076 <recv+0x3a>
    4074:	e095      	b.n	41a2 <recv+0x166>
    4076:	230c      	movs	r3, #12
    4078:	18fb      	adds	r3, r7, r3
    407a:	881b      	ldrh	r3, [r3, #0]
    407c:	2b00      	cmp	r3, #0
    407e:	d100      	bne.n	4082 <recv+0x46>
    4080:	e08f      	b.n	41a2 <recv+0x166>
    4082:	230f      	movs	r3, #15
    4084:	18fb      	adds	r3, r7, r3
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	b25b      	sxtb	r3, r3
    408a:	4a4a      	ldr	r2, [pc, #296]	; (41b4 <recv+0x178>)
    408c:	011b      	lsls	r3, r3, #4
    408e:	18d3      	adds	r3, r2, r3
    4090:	330a      	adds	r3, #10
    4092:	781b      	ldrb	r3, [r3, #0]
    4094:	b2db      	uxtb	r3, r3
    4096:	2b01      	cmp	r3, #1
    4098:	d000      	beq.n	409c <recv+0x60>
    409a:	e082      	b.n	41a2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    409c:	231e      	movs	r3, #30
    409e:	18fb      	adds	r3, r7, r3
    40a0:	2200      	movs	r2, #0
    40a2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    40a4:	230f      	movs	r3, #15
    40a6:	18fb      	adds	r3, r7, r3
    40a8:	2200      	movs	r2, #0
    40aa:	569a      	ldrsb	r2, [r3, r2]
    40ac:	4b41      	ldr	r3, [pc, #260]	; (41b4 <recv+0x178>)
    40ae:	0112      	lsls	r2, r2, #4
    40b0:	68b9      	ldr	r1, [r7, #8]
    40b2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    40b4:	230f      	movs	r3, #15
    40b6:	18fb      	adds	r3, r7, r3
    40b8:	781b      	ldrb	r3, [r3, #0]
    40ba:	b25b      	sxtb	r3, r3
    40bc:	4a3d      	ldr	r2, [pc, #244]	; (41b4 <recv+0x178>)
    40be:	011b      	lsls	r3, r3, #4
    40c0:	18d3      	adds	r3, r2, r3
    40c2:	3304      	adds	r3, #4
    40c4:	220c      	movs	r2, #12
    40c6:	18ba      	adds	r2, r7, r2
    40c8:	8812      	ldrh	r2, [r2, #0]
    40ca:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    40cc:	230f      	movs	r3, #15
    40ce:	18fb      	adds	r3, r7, r3
    40d0:	781b      	ldrb	r3, [r3, #0]
    40d2:	b25b      	sxtb	r3, r3
    40d4:	4a37      	ldr	r2, [pc, #220]	; (41b4 <recv+0x178>)
    40d6:	011b      	lsls	r3, r3, #4
    40d8:	18d3      	adds	r3, r2, r3
    40da:	330c      	adds	r3, #12
    40dc:	781b      	ldrb	r3, [r3, #0]
    40de:	b2db      	uxtb	r3, r3
    40e0:	2b00      	cmp	r3, #0
    40e2:	d15e      	bne.n	41a2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    40e4:	231d      	movs	r3, #29
    40e6:	18fb      	adds	r3, r7, r3
    40e8:	2246      	movs	r2, #70	; 0x46
    40ea:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    40ec:	230f      	movs	r3, #15
    40ee:	18fb      	adds	r3, r7, r3
    40f0:	781b      	ldrb	r3, [r3, #0]
    40f2:	b25b      	sxtb	r3, r3
    40f4:	4a2f      	ldr	r2, [pc, #188]	; (41b4 <recv+0x178>)
    40f6:	011b      	lsls	r3, r3, #4
    40f8:	18d3      	adds	r3, r2, r3
    40fa:	330c      	adds	r3, #12
    40fc:	2201      	movs	r2, #1
    40fe:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4100:	230f      	movs	r3, #15
    4102:	18fb      	adds	r3, r7, r3
    4104:	781b      	ldrb	r3, [r3, #0]
    4106:	b25b      	sxtb	r3, r3
    4108:	4a2a      	ldr	r2, [pc, #168]	; (41b4 <recv+0x178>)
    410a:	011b      	lsls	r3, r3, #4
    410c:	18d3      	adds	r3, r2, r3
    410e:	330b      	adds	r3, #11
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	b2db      	uxtb	r3, r3
    4114:	001a      	movs	r2, r3
    4116:	2301      	movs	r3, #1
    4118:	4013      	ands	r3, r2
    411a:	d003      	beq.n	4124 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    411c:	231d      	movs	r3, #29
    411e:	18fb      	adds	r3, r7, r3
    4120:	224d      	movs	r2, #77	; 0x4d
    4122:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	2b00      	cmp	r3, #0
    4128:	d105      	bne.n	4136 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    412a:	2314      	movs	r3, #20
    412c:	18fb      	adds	r3, r7, r3
    412e:	2201      	movs	r2, #1
    4130:	4252      	negs	r2, r2
    4132:	601a      	str	r2, [r3, #0]
    4134:	e003      	b.n	413e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    4136:	2314      	movs	r3, #20
    4138:	18fb      	adds	r3, r7, r3
    413a:	687a      	ldr	r2, [r7, #4]
    413c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    413e:	2314      	movs	r3, #20
    4140:	18fb      	adds	r3, r7, r3
    4142:	220f      	movs	r2, #15
    4144:	18ba      	adds	r2, r7, r2
    4146:	7812      	ldrb	r2, [r2, #0]
    4148:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    414a:	230f      	movs	r3, #15
    414c:	18fb      	adds	r3, r7, r3
    414e:	781b      	ldrb	r3, [r3, #0]
    4150:	b25b      	sxtb	r3, r3
    4152:	4a18      	ldr	r2, [pc, #96]	; (41b4 <recv+0x178>)
    4154:	011b      	lsls	r3, r3, #4
    4156:	18d3      	adds	r3, r2, r3
    4158:	3306      	adds	r3, #6
    415a:	881b      	ldrh	r3, [r3, #0]
    415c:	b29a      	uxth	r2, r3
    415e:	2314      	movs	r3, #20
    4160:	18fb      	adds	r3, r7, r3
    4162:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4164:	2314      	movs	r3, #20
    4166:	18fa      	adds	r2, r7, r3
    4168:	231d      	movs	r3, #29
    416a:	18fb      	adds	r3, r7, r3
    416c:	7819      	ldrb	r1, [r3, #0]
    416e:	2300      	movs	r3, #0
    4170:	9302      	str	r3, [sp, #8]
    4172:	2300      	movs	r3, #0
    4174:	9301      	str	r3, [sp, #4]
    4176:	2300      	movs	r3, #0
    4178:	9300      	str	r3, [sp, #0]
    417a:	2308      	movs	r3, #8
    417c:	2002      	movs	r0, #2
    417e:	4c0e      	ldr	r4, [pc, #56]	; (41b8 <recv+0x17c>)
    4180:	47a0      	blx	r4
    4182:	0003      	movs	r3, r0
    4184:	001a      	movs	r2, r3
    4186:	231e      	movs	r3, #30
    4188:	18fb      	adds	r3, r7, r3
    418a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    418c:	231e      	movs	r3, #30
    418e:	18fb      	adds	r3, r7, r3
    4190:	2200      	movs	r2, #0
    4192:	5e9b      	ldrsh	r3, [r3, r2]
    4194:	2b00      	cmp	r3, #0
    4196:	d004      	beq.n	41a2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    4198:	231e      	movs	r3, #30
    419a:	18fb      	adds	r3, r7, r3
    419c:	220e      	movs	r2, #14
    419e:	4252      	negs	r2, r2
    41a0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    41a2:	231e      	movs	r3, #30
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	2200      	movs	r2, #0
    41a8:	5e9b      	ldrsh	r3, [r3, r2]
}
    41aa:	0018      	movs	r0, r3
    41ac:	46bd      	mov	sp, r7
    41ae:	b009      	add	sp, #36	; 0x24
    41b0:	bd90      	pop	{r4, r7, pc}
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	2000452c 	.word	0x2000452c
    41b8:	00001ba1 	.word	0x00001ba1

000041bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    41bc:	b5b0      	push	{r4, r5, r7, lr}
    41be:	b088      	sub	sp, #32
    41c0:	af04      	add	r7, sp, #16
    41c2:	0002      	movs	r2, r0
    41c4:	1dfb      	adds	r3, r7, #7
    41c6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    41c8:	230f      	movs	r3, #15
    41ca:	18fb      	adds	r3, r7, r3
    41cc:	22fa      	movs	r2, #250	; 0xfa
    41ce:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    41d0:	1dfb      	adds	r3, r7, #7
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	2b7f      	cmp	r3, #127	; 0x7f
    41d6:	d86a      	bhi.n	42ae <close+0xf2>
    41d8:	1dfb      	adds	r3, r7, #7
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	b25b      	sxtb	r3, r3
    41de:	4a38      	ldr	r2, [pc, #224]	; (42c0 <close+0x104>)
    41e0:	011b      	lsls	r3, r3, #4
    41e2:	18d3      	adds	r3, r2, r3
    41e4:	330a      	adds	r3, #10
    41e6:	781b      	ldrb	r3, [r3, #0]
    41e8:	b2db      	uxtb	r3, r3
    41ea:	2b01      	cmp	r3, #1
    41ec:	d15f      	bne.n	42ae <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    41ee:	230e      	movs	r3, #14
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	2249      	movs	r2, #73	; 0x49
    41f4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    41f6:	2308      	movs	r3, #8
    41f8:	18fb      	adds	r3, r7, r3
    41fa:	1dfa      	adds	r2, r7, #7
    41fc:	7812      	ldrb	r2, [r2, #0]
    41fe:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    4200:	1dfb      	adds	r3, r7, #7
    4202:	781b      	ldrb	r3, [r3, #0]
    4204:	b25b      	sxtb	r3, r3
    4206:	4a2e      	ldr	r2, [pc, #184]	; (42c0 <close+0x104>)
    4208:	011b      	lsls	r3, r3, #4
    420a:	18d3      	adds	r3, r2, r3
    420c:	3306      	adds	r3, #6
    420e:	881b      	ldrh	r3, [r3, #0]
    4210:	b29a      	uxth	r2, r3
    4212:	2308      	movs	r3, #8
    4214:	18fb      	adds	r3, r7, r3
    4216:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    4218:	1dfb      	adds	r3, r7, #7
    421a:	781b      	ldrb	r3, [r3, #0]
    421c:	b25b      	sxtb	r3, r3
    421e:	4a28      	ldr	r2, [pc, #160]	; (42c0 <close+0x104>)
    4220:	011b      	lsls	r3, r3, #4
    4222:	18d3      	adds	r3, r2, r3
    4224:	330a      	adds	r3, #10
    4226:	2200      	movs	r2, #0
    4228:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    422a:	1dfb      	adds	r3, r7, #7
    422c:	781b      	ldrb	r3, [r3, #0]
    422e:	b25b      	sxtb	r3, r3
    4230:	4a23      	ldr	r2, [pc, #140]	; (42c0 <close+0x104>)
    4232:	011b      	lsls	r3, r3, #4
    4234:	18d3      	adds	r3, r2, r3
    4236:	3306      	adds	r3, #6
    4238:	2200      	movs	r2, #0
    423a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    423c:	1dfb      	adds	r3, r7, #7
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	b25b      	sxtb	r3, r3
    4242:	4a1f      	ldr	r2, [pc, #124]	; (42c0 <close+0x104>)
    4244:	011b      	lsls	r3, r3, #4
    4246:	18d3      	adds	r3, r2, r3
    4248:	330b      	adds	r3, #11
    424a:	781b      	ldrb	r3, [r3, #0]
    424c:	b2db      	uxtb	r3, r3
    424e:	001a      	movs	r2, r3
    4250:	2301      	movs	r3, #1
    4252:	4013      	ands	r3, r2
    4254:	d003      	beq.n	425e <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    4256:	230e      	movs	r3, #14
    4258:	18fb      	adds	r3, r7, r3
    425a:	224e      	movs	r2, #78	; 0x4e
    425c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    425e:	230f      	movs	r3, #15
    4260:	18fc      	adds	r4, r7, r3
    4262:	2308      	movs	r3, #8
    4264:	18fa      	adds	r2, r7, r3
    4266:	230e      	movs	r3, #14
    4268:	18fb      	adds	r3, r7, r3
    426a:	7819      	ldrb	r1, [r3, #0]
    426c:	2300      	movs	r3, #0
    426e:	9302      	str	r3, [sp, #8]
    4270:	2300      	movs	r3, #0
    4272:	9301      	str	r3, [sp, #4]
    4274:	2300      	movs	r3, #0
    4276:	9300      	str	r3, [sp, #0]
    4278:	2304      	movs	r3, #4
    427a:	2002      	movs	r0, #2
    427c:	4d11      	ldr	r5, [pc, #68]	; (42c4 <close+0x108>)
    427e:	47a8      	blx	r5
    4280:	0003      	movs	r3, r0
    4282:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4284:	230f      	movs	r3, #15
    4286:	18fb      	adds	r3, r7, r3
    4288:	781b      	ldrb	r3, [r3, #0]
    428a:	b25b      	sxtb	r3, r3
    428c:	2b00      	cmp	r3, #0
    428e:	d003      	beq.n	4298 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    4290:	230f      	movs	r3, #15
    4292:	18fb      	adds	r3, r7, r3
    4294:	22f7      	movs	r2, #247	; 0xf7
    4296:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    4298:	1dfb      	adds	r3, r7, #7
    429a:	781b      	ldrb	r3, [r3, #0]
    429c:	b25b      	sxtb	r3, r3
    429e:	011a      	lsls	r2, r3, #4
    42a0:	4b07      	ldr	r3, [pc, #28]	; (42c0 <close+0x104>)
    42a2:	18d3      	adds	r3, r2, r3
    42a4:	2210      	movs	r2, #16
    42a6:	2100      	movs	r1, #0
    42a8:	0018      	movs	r0, r3
    42aa:	4b07      	ldr	r3, [pc, #28]	; (42c8 <close+0x10c>)
    42ac:	4798      	blx	r3
	}
	return s8Ret;
    42ae:	230f      	movs	r3, #15
    42b0:	18fb      	adds	r3, r7, r3
    42b2:	781b      	ldrb	r3, [r3, #0]
    42b4:	b25b      	sxtb	r3, r3
}
    42b6:	0018      	movs	r0, r3
    42b8:	46bd      	mov	sp, r7
    42ba:	b004      	add	sp, #16
    42bc:	bdb0      	pop	{r4, r5, r7, pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	2000452c 	.word	0x2000452c
    42c4:	00001ba1 	.word	0x00001ba1
    42c8:	00001955 	.word	0x00001955

000042cc <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    42cc:	b5b0      	push	{r4, r5, r7, lr}
    42ce:	b088      	sub	sp, #32
    42d0:	af04      	add	r7, sp, #16
    42d2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    42d4:	230f      	movs	r3, #15
    42d6:	18fb      	adds	r3, r7, r3
    42d8:	22fa      	movs	r2, #250	; 0xfa
    42da:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	0018      	movs	r0, r3
    42e0:	4b19      	ldr	r3, [pc, #100]	; (4348 <gethostbyname+0x7c>)
    42e2:	4798      	blx	r3
    42e4:	0003      	movs	r3, r0
    42e6:	001a      	movs	r2, r3
    42e8:	230e      	movs	r3, #14
    42ea:	18fb      	adds	r3, r7, r3
    42ec:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    42ee:	230e      	movs	r3, #14
    42f0:	18fb      	adds	r3, r7, r3
    42f2:	781b      	ldrb	r3, [r3, #0]
    42f4:	2b40      	cmp	r3, #64	; 0x40
    42f6:	d81f      	bhi.n	4338 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    42f8:	230e      	movs	r3, #14
    42fa:	18fb      	adds	r3, r7, r3
    42fc:	781b      	ldrb	r3, [r3, #0]
    42fe:	b29b      	uxth	r3, r3
    4300:	3301      	adds	r3, #1
    4302:	b299      	uxth	r1, r3
    4304:	230f      	movs	r3, #15
    4306:	18fc      	adds	r4, r7, r3
    4308:	687a      	ldr	r2, [r7, #4]
    430a:	2300      	movs	r3, #0
    430c:	9302      	str	r3, [sp, #8]
    430e:	2300      	movs	r3, #0
    4310:	9301      	str	r3, [sp, #4]
    4312:	2300      	movs	r3, #0
    4314:	9300      	str	r3, [sp, #0]
    4316:	000b      	movs	r3, r1
    4318:	21ca      	movs	r1, #202	; 0xca
    431a:	2002      	movs	r0, #2
    431c:	4d0b      	ldr	r5, [pc, #44]	; (434c <gethostbyname+0x80>)
    431e:	47a8      	blx	r5
    4320:	0003      	movs	r3, r0
    4322:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    4324:	230f      	movs	r3, #15
    4326:	18fb      	adds	r3, r7, r3
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	b25b      	sxtb	r3, r3
    432c:	2b00      	cmp	r3, #0
    432e:	d003      	beq.n	4338 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    4330:	230f      	movs	r3, #15
    4332:	18fb      	adds	r3, r7, r3
    4334:	22f7      	movs	r2, #247	; 0xf7
    4336:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    4338:	230f      	movs	r3, #15
    433a:	18fb      	adds	r3, r7, r3
    433c:	781b      	ldrb	r3, [r3, #0]
    433e:	b25b      	sxtb	r3, r3
}
    4340:	0018      	movs	r0, r3
    4342:	46bd      	mov	sp, r7
    4344:	b004      	add	sp, #16
    4346:	bdb0      	pop	{r4, r5, r7, pc}
    4348:	00001995 	.word	0x00001995
    434c:	00001ba1 	.word	0x00001ba1

00004350 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    4350:	b580      	push	{r7, lr}
    4352:	b082      	sub	sp, #8
    4354:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    4356:	4b10      	ldr	r3, [pc, #64]	; (4398 <cpu_irq_enter_critical+0x48>)
    4358:	681b      	ldr	r3, [r3, #0]
    435a:	2b00      	cmp	r3, #0
    435c:	d112      	bne.n	4384 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    435e:	f3ef 8310 	mrs	r3, PRIMASK
    4362:	607b      	str	r3, [r7, #4]
  return(result);
    4364:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    4366:	2b00      	cmp	r3, #0
    4368:	d109      	bne.n	437e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    436a:	b672      	cpsid	i
    436c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4370:	4b0a      	ldr	r3, [pc, #40]	; (439c <cpu_irq_enter_critical+0x4c>)
    4372:	2200      	movs	r2, #0
    4374:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    4376:	4b0a      	ldr	r3, [pc, #40]	; (43a0 <cpu_irq_enter_critical+0x50>)
    4378:	2201      	movs	r2, #1
    437a:	701a      	strb	r2, [r3, #0]
    437c:	e002      	b.n	4384 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <cpu_irq_enter_critical+0x50>)
    4380:	2200      	movs	r2, #0
    4382:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4384:	4b04      	ldr	r3, [pc, #16]	; (4398 <cpu_irq_enter_critical+0x48>)
    4386:	681b      	ldr	r3, [r3, #0]
    4388:	1c5a      	adds	r2, r3, #1
    438a:	4b03      	ldr	r3, [pc, #12]	; (4398 <cpu_irq_enter_critical+0x48>)
    438c:	601a      	str	r2, [r3, #0]
}
    438e:	46c0      	nop			; (mov r8, r8)
    4390:	46bd      	mov	sp, r7
    4392:	b002      	add	sp, #8
    4394:	bd80      	pop	{r7, pc}
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	200000ec 	.word	0x200000ec
    439c:	20000014 	.word	0x20000014
    43a0:	200000f0 	.word	0x200000f0

000043a4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    43a4:	b580      	push	{r7, lr}
    43a6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    43a8:	4b0b      	ldr	r3, [pc, #44]	; (43d8 <cpu_irq_leave_critical+0x34>)
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	1e5a      	subs	r2, r3, #1
    43ae:	4b0a      	ldr	r3, [pc, #40]	; (43d8 <cpu_irq_leave_critical+0x34>)
    43b0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    43b2:	4b09      	ldr	r3, [pc, #36]	; (43d8 <cpu_irq_leave_critical+0x34>)
    43b4:	681b      	ldr	r3, [r3, #0]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d10a      	bne.n	43d0 <cpu_irq_leave_critical+0x2c>
    43ba:	4b08      	ldr	r3, [pc, #32]	; (43dc <cpu_irq_leave_critical+0x38>)
    43bc:	781b      	ldrb	r3, [r3, #0]
    43be:	b2db      	uxtb	r3, r3
    43c0:	2b00      	cmp	r3, #0
    43c2:	d005      	beq.n	43d0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    43c4:	4b06      	ldr	r3, [pc, #24]	; (43e0 <cpu_irq_leave_critical+0x3c>)
    43c6:	2201      	movs	r2, #1
    43c8:	701a      	strb	r2, [r3, #0]
    43ca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    43ce:	b662      	cpsie	i
	}
}
    43d0:	46c0      	nop			; (mov r8, r8)
    43d2:	46bd      	mov	sp, r7
    43d4:	bd80      	pop	{r7, pc}
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	200000ec 	.word	0x200000ec
    43dc:	200000f0 	.word	0x200000f0
    43e0:	20000014 	.word	0x20000014

000043e4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    43e4:	b580      	push	{r7, lr}
    43e6:	b084      	sub	sp, #16
    43e8:	af00      	add	r7, sp, #0
    43ea:	0002      	movs	r2, r0
    43ec:	1dfb      	adds	r3, r7, #7
    43ee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    43f0:	230f      	movs	r3, #15
    43f2:	18fb      	adds	r3, r7, r3
    43f4:	1dfa      	adds	r2, r7, #7
    43f6:	7812      	ldrb	r2, [r2, #0]
    43f8:	09d2      	lsrs	r2, r2, #7
    43fa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    43fc:	230e      	movs	r3, #14
    43fe:	18fb      	adds	r3, r7, r3
    4400:	1dfa      	adds	r2, r7, #7
    4402:	7812      	ldrb	r2, [r2, #0]
    4404:	0952      	lsrs	r2, r2, #5
    4406:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4408:	4b0d      	ldr	r3, [pc, #52]	; (4440 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    440a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    440c:	230f      	movs	r3, #15
    440e:	18fb      	adds	r3, r7, r3
    4410:	781b      	ldrb	r3, [r3, #0]
    4412:	2b00      	cmp	r3, #0
    4414:	d10f      	bne.n	4436 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4416:	230f      	movs	r3, #15
    4418:	18fb      	adds	r3, r7, r3
    441a:	781b      	ldrb	r3, [r3, #0]
    441c:	009b      	lsls	r3, r3, #2
    441e:	2210      	movs	r2, #16
    4420:	4694      	mov	ip, r2
    4422:	44bc      	add	ip, r7
    4424:	4463      	add	r3, ip
    4426:	3b08      	subs	r3, #8
    4428:	681a      	ldr	r2, [r3, #0]
    442a:	230e      	movs	r3, #14
    442c:	18fb      	adds	r3, r7, r3
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	01db      	lsls	r3, r3, #7
    4432:	18d3      	adds	r3, r2, r3
    4434:	e000      	b.n	4438 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4436:	2300      	movs	r3, #0
	}
}
    4438:	0018      	movs	r0, r3
    443a:	46bd      	mov	sp, r7
    443c:	b004      	add	sp, #16
    443e:	bd80      	pop	{r7, pc}
    4440:	41004400 	.word	0x41004400

00004444 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4444:	b580      	push	{r7, lr}
    4446:	b082      	sub	sp, #8
    4448:	af00      	add	r7, sp, #0
    444a:	0002      	movs	r2, r0
    444c:	1dfb      	adds	r3, r7, #7
    444e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4450:	1dfb      	adds	r3, r7, #7
    4452:	781b      	ldrb	r3, [r3, #0]
    4454:	0018      	movs	r0, r3
    4456:	4b03      	ldr	r3, [pc, #12]	; (4464 <port_get_group_from_gpio_pin+0x20>)
    4458:	4798      	blx	r3
    445a:	0003      	movs	r3, r0
}
    445c:	0018      	movs	r0, r3
    445e:	46bd      	mov	sp, r7
    4460:	b002      	add	sp, #8
    4462:	bd80      	pop	{r7, pc}
    4464:	000043e5 	.word	0x000043e5

00004468 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    4468:	b580      	push	{r7, lr}
    446a:	b082      	sub	sp, #8
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	2200      	movs	r2, #0
    4474:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	2201      	movs	r2, #1
    447a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    447c:	687b      	ldr	r3, [r7, #4]
    447e:	2200      	movs	r2, #0
    4480:	709a      	strb	r2, [r3, #2]
}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	46bd      	mov	sp, r7
    4486:	b002      	add	sp, #8
    4488:	bd80      	pop	{r7, pc}
    448a:	46c0      	nop			; (mov r8, r8)

0000448c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    448c:	b580      	push	{r7, lr}
    448e:	b084      	sub	sp, #16
    4490:	af00      	add	r7, sp, #0
    4492:	0002      	movs	r2, r0
    4494:	1dfb      	adds	r3, r7, #7
    4496:	701a      	strb	r2, [r3, #0]
    4498:	1dbb      	adds	r3, r7, #6
    449a:	1c0a      	adds	r2, r1, #0
    449c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    449e:	1dfb      	adds	r3, r7, #7
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	0018      	movs	r0, r3
    44a4:	4b0d      	ldr	r3, [pc, #52]	; (44dc <port_pin_set_output_level+0x50>)
    44a6:	4798      	blx	r3
    44a8:	0003      	movs	r3, r0
    44aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44ac:	1dfb      	adds	r3, r7, #7
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	221f      	movs	r2, #31
    44b2:	4013      	ands	r3, r2
    44b4:	2201      	movs	r2, #1
    44b6:	409a      	lsls	r2, r3
    44b8:	0013      	movs	r3, r2
    44ba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    44bc:	1dbb      	adds	r3, r7, #6
    44be:	781b      	ldrb	r3, [r3, #0]
    44c0:	2b00      	cmp	r3, #0
    44c2:	d003      	beq.n	44cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    44c4:	68fb      	ldr	r3, [r7, #12]
    44c6:	68ba      	ldr	r2, [r7, #8]
    44c8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    44ca:	e002      	b.n	44d2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    44cc:	68fb      	ldr	r3, [r7, #12]
    44ce:	68ba      	ldr	r2, [r7, #8]
    44d0:	615a      	str	r2, [r3, #20]
	}
}
    44d2:	46c0      	nop			; (mov r8, r8)
    44d4:	46bd      	mov	sp, r7
    44d6:	b004      	add	sp, #16
    44d8:	bd80      	pop	{r7, pc}
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	00004445 	.word	0x00004445

000044e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b082      	sub	sp, #8
    44e4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    44e6:	1d3b      	adds	r3, r7, #4
    44e8:	0018      	movs	r0, r3
    44ea:	4b0e      	ldr	r3, [pc, #56]	; (4524 <system_board_init+0x44>)
    44ec:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    44ee:	1d3b      	adds	r3, r7, #4
    44f0:	2201      	movs	r2, #1
    44f2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    44f4:	1d3b      	adds	r3, r7, #4
    44f6:	0019      	movs	r1, r3
    44f8:	2017      	movs	r0, #23
    44fa:	4b0b      	ldr	r3, [pc, #44]	; (4528 <system_board_init+0x48>)
    44fc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    44fe:	2101      	movs	r1, #1
    4500:	2017      	movs	r0, #23
    4502:	4b0a      	ldr	r3, [pc, #40]	; (452c <system_board_init+0x4c>)
    4504:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4506:	1d3b      	adds	r3, r7, #4
    4508:	2200      	movs	r2, #0
    450a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    450c:	1d3b      	adds	r3, r7, #4
    450e:	2201      	movs	r2, #1
    4510:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4512:	1d3b      	adds	r3, r7, #4
    4514:	0019      	movs	r1, r3
    4516:	2037      	movs	r0, #55	; 0x37
    4518:	4b03      	ldr	r3, [pc, #12]	; (4528 <system_board_init+0x48>)
    451a:	4798      	blx	r3
}
    451c:	46c0      	nop			; (mov r8, r8)
    451e:	46bd      	mov	sp, r7
    4520:	b002      	add	sp, #8
    4522:	bd80      	pop	{r7, pc}
    4524:	00004469 	.word	0x00004469
    4528:	00004b29 	.word	0x00004b29
    452c:	0000448d 	.word	0x0000448d

00004530 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    4530:	b580      	push	{r7, lr}
    4532:	b084      	sub	sp, #16
    4534:	af00      	add	r7, sp, #0
    4536:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    4538:	687b      	ldr	r3, [r7, #4]
    453a:	681b      	ldr	r3, [r3, #0]
    453c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    453e:	68fb      	ldr	r3, [r7, #12]
    4540:	7e5b      	ldrb	r3, [r3, #25]
    4542:	b2db      	uxtb	r3, r3
    4544:	b25b      	sxtb	r3, r3
    4546:	2b00      	cmp	r3, #0
    4548:	da01      	bge.n	454e <adc_is_syncing+0x1e>
		return true;
    454a:	2301      	movs	r3, #1
    454c:	e000      	b.n	4550 <adc_is_syncing+0x20>
	}

	return false;
    454e:	2300      	movs	r3, #0
}
    4550:	0018      	movs	r0, r3
    4552:	46bd      	mov	sp, r7
    4554:	b004      	add	sp, #16
    4556:	bd80      	pop	{r7, pc}

00004558 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    4558:	b580      	push	{r7, lr}
    455a:	b084      	sub	sp, #16
    455c:	af00      	add	r7, sp, #0
    455e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4560:	687b      	ldr	r3, [r7, #4]
    4562:	681b      	ldr	r3, [r3, #0]
    4564:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	0018      	movs	r0, r3
    456c:	4b0b      	ldr	r3, [pc, #44]	; (459c <adc_start_conversion+0x44>)
    456e:	4798      	blx	r3
    4570:	1e03      	subs	r3, r0, #0
    4572:	d1f9      	bne.n	4568 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4574:	68fb      	ldr	r3, [r7, #12]
    4576:	7b1b      	ldrb	r3, [r3, #12]
    4578:	b2db      	uxtb	r3, r3
    457a:	2202      	movs	r2, #2
    457c:	4313      	orrs	r3, r2
    457e:	b2da      	uxtb	r2, r3
    4580:	68fb      	ldr	r3, [r7, #12]
    4582:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    4584:	46c0      	nop			; (mov r8, r8)
    4586:	687b      	ldr	r3, [r7, #4]
    4588:	0018      	movs	r0, r3
    458a:	4b04      	ldr	r3, [pc, #16]	; (459c <adc_start_conversion+0x44>)
    458c:	4798      	blx	r3
    458e:	1e03      	subs	r3, r0, #0
    4590:	d1f9      	bne.n	4586 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	46bd      	mov	sp, r7
    4596:	b004      	add	sp, #16
    4598:	bd80      	pop	{r7, pc}
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	00004531 	.word	0x00004531

000045a0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    45a0:	b580      	push	{r7, lr}
    45a2:	b084      	sub	sp, #16
    45a4:	af00      	add	r7, sp, #0
    45a6:	6078      	str	r0, [r7, #4]
    45a8:	000a      	movs	r2, r1
    45aa:	1cfb      	adds	r3, r7, #3
    45ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    45ae:	687b      	ldr	r3, [r7, #4]
    45b0:	681b      	ldr	r3, [r3, #0]
    45b2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    45b4:	68fb      	ldr	r3, [r7, #12]
    45b6:	1cfa      	adds	r2, r7, #3
    45b8:	7812      	ldrb	r2, [r2, #0]
    45ba:	759a      	strb	r2, [r3, #22]
}
    45bc:	46c0      	nop			; (mov r8, r8)
    45be:	46bd      	mov	sp, r7
    45c0:	b004      	add	sp, #16
    45c2:	bd80      	pop	{r7, pc}

000045c4 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    45c4:	b580      	push	{r7, lr}
    45c6:	b084      	sub	sp, #16
    45c8:	af00      	add	r7, sp, #0
    45ca:	0002      	movs	r2, r0
    45cc:	1dfb      	adds	r3, r7, #7
    45ce:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    45d0:	1dfb      	adds	r3, r7, #7
    45d2:	781a      	ldrb	r2, [r3, #0]
    45d4:	4b44      	ldr	r3, [pc, #272]	; (46e8 <_adc_interrupt_handler+0x124>)
    45d6:	0092      	lsls	r2, r2, #2
    45d8:	58d3      	ldr	r3, [r2, r3]
    45da:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    45dc:	68fb      	ldr	r3, [r7, #12]
    45de:	681b      	ldr	r3, [r3, #0]
    45e0:	7e1b      	ldrb	r3, [r3, #24]
    45e2:	b2db      	uxtb	r3, r3
    45e4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    45e6:	68bb      	ldr	r3, [r7, #8]
    45e8:	2201      	movs	r2, #1
    45ea:	4013      	ands	r3, r2
    45ec:	d045      	beq.n	467a <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    45ee:	68fb      	ldr	r3, [r7, #12]
    45f0:	7edb      	ldrb	r3, [r3, #27]
    45f2:	001a      	movs	r2, r3
    45f4:	2301      	movs	r3, #1
    45f6:	4013      	ands	r3, r2
    45f8:	d03f      	beq.n	467a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    45fa:	68fb      	ldr	r3, [r7, #12]
    45fc:	7e9b      	ldrb	r3, [r3, #26]
    45fe:	001a      	movs	r2, r3
    4600:	2301      	movs	r3, #1
    4602:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    4604:	d039      	beq.n	467a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    4606:	68fb      	ldr	r3, [r7, #12]
    4608:	681b      	ldr	r3, [r3, #0]
    460a:	2201      	movs	r2, #1
    460c:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	0018      	movs	r0, r3
    4614:	4b35      	ldr	r3, [pc, #212]	; (46ec <_adc_interrupt_handler+0x128>)
    4616:	4798      	blx	r3
    4618:	1e03      	subs	r3, r0, #0
    461a:	d1f9      	bne.n	4610 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    461c:	68fb      	ldr	r3, [r7, #12]
    461e:	695b      	ldr	r3, [r3, #20]
    4620:	1c99      	adds	r1, r3, #2
    4622:	68fa      	ldr	r2, [r7, #12]
    4624:	6151      	str	r1, [r2, #20]
    4626:	68fa      	ldr	r2, [r7, #12]
    4628:	6812      	ldr	r2, [r2, #0]
    462a:	8b52      	ldrh	r2, [r2, #26]
    462c:	b292      	uxth	r2, r2
    462e:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    4630:	68fb      	ldr	r3, [r7, #12]
    4632:	8b1b      	ldrh	r3, [r3, #24]
    4634:	b29b      	uxth	r3, r3
    4636:	3b01      	subs	r3, #1
    4638:	b29b      	uxth	r3, r3
    463a:	68fa      	ldr	r2, [r7, #12]
    463c:	1c19      	adds	r1, r3, #0
    463e:	8311      	strh	r1, [r2, #24]
    4640:	2b00      	cmp	r3, #0
    4642:	d008      	beq.n	4656 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    4644:	68fb      	ldr	r3, [r7, #12]
    4646:	7f5b      	ldrb	r3, [r3, #29]
    4648:	2b00      	cmp	r3, #0
    464a:	d016      	beq.n	467a <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    464c:	68fb      	ldr	r3, [r7, #12]
    464e:	0018      	movs	r0, r3
    4650:	4b27      	ldr	r3, [pc, #156]	; (46f0 <_adc_interrupt_handler+0x12c>)
    4652:	4798      	blx	r3
    4654:	e011      	b.n	467a <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    4656:	68fb      	ldr	r3, [r7, #12]
    4658:	7f1b      	ldrb	r3, [r3, #28]
    465a:	b2db      	uxtb	r3, r3
    465c:	2b05      	cmp	r3, #5
    465e:	d10c      	bne.n	467a <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    4660:	68fb      	ldr	r3, [r7, #12]
    4662:	2200      	movs	r2, #0
    4664:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    4666:	68fb      	ldr	r3, [r7, #12]
    4668:	2101      	movs	r1, #1
    466a:	0018      	movs	r0, r3
    466c:	4b21      	ldr	r3, [pc, #132]	; (46f4 <_adc_interrupt_handler+0x130>)
    466e:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    4670:	68fb      	ldr	r3, [r7, #12]
    4672:	689b      	ldr	r3, [r3, #8]
    4674:	68fa      	ldr	r2, [r7, #12]
    4676:	0010      	movs	r0, r2
    4678:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    467a:	68bb      	ldr	r3, [r7, #8]
    467c:	2204      	movs	r2, #4
    467e:	4013      	ands	r3, r2
    4680:	d014      	beq.n	46ac <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	2204      	movs	r2, #4
    4688:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    468a:	68fb      	ldr	r3, [r7, #12]
    468c:	7edb      	ldrb	r3, [r3, #27]
    468e:	001a      	movs	r2, r3
    4690:	2302      	movs	r3, #2
    4692:	4013      	ands	r3, r2
    4694:	d00a      	beq.n	46ac <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    4696:	68fb      	ldr	r3, [r7, #12]
    4698:	7e9b      	ldrb	r3, [r3, #26]
    469a:	001a      	movs	r2, r3
    469c:	2302      	movs	r3, #2
    469e:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    46a0:	d004      	beq.n	46ac <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    46a2:	68fb      	ldr	r3, [r7, #12]
    46a4:	68db      	ldr	r3, [r3, #12]
    46a6:	68fa      	ldr	r2, [r7, #12]
    46a8:	0010      	movs	r0, r2
    46aa:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    46ac:	68bb      	ldr	r3, [r7, #8]
    46ae:	2202      	movs	r2, #2
    46b0:	4013      	ands	r3, r2
    46b2:	d014      	beq.n	46de <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    46b4:	68fb      	ldr	r3, [r7, #12]
    46b6:	681b      	ldr	r3, [r3, #0]
    46b8:	2202      	movs	r2, #2
    46ba:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    46bc:	68fb      	ldr	r3, [r7, #12]
    46be:	7edb      	ldrb	r3, [r3, #27]
    46c0:	001a      	movs	r2, r3
    46c2:	2304      	movs	r3, #4
    46c4:	4013      	ands	r3, r2
    46c6:	d00a      	beq.n	46de <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    46c8:	68fb      	ldr	r3, [r7, #12]
    46ca:	7e9b      	ldrb	r3, [r3, #26]
    46cc:	001a      	movs	r2, r3
    46ce:	2304      	movs	r3, #4
    46d0:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    46d2:	d004      	beq.n	46de <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    46d4:	68fb      	ldr	r3, [r7, #12]
    46d6:	691b      	ldr	r3, [r3, #16]
    46d8:	68fa      	ldr	r2, [r7, #12]
    46da:	0010      	movs	r0, r2
    46dc:	4798      	blx	r3
		}
	}
}
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	46bd      	mov	sp, r7
    46e2:	b004      	add	sp, #16
    46e4:	bd80      	pop	{r7, pc}
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	200045e8 	.word	0x200045e8
    46ec:	00004531 	.word	0x00004531
    46f0:	00004559 	.word	0x00004559
    46f4:	000045a1 	.word	0x000045a1

000046f8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    46f8:	b580      	push	{r7, lr}
    46fa:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    46fc:	2000      	movs	r0, #0
    46fe:	4b02      	ldr	r3, [pc, #8]	; (4708 <ADC_Handler+0x10>)
    4700:	4798      	blx	r3
}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	46bd      	mov	sp, r7
    4706:	bd80      	pop	{r7, pc}
    4708:	000045c5 	.word	0x000045c5

0000470c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    470c:	b580      	push	{r7, lr}
    470e:	b084      	sub	sp, #16
    4710:	af00      	add	r7, sp, #0
    4712:	0002      	movs	r2, r0
    4714:	1dfb      	adds	r3, r7, #7
    4716:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4718:	230f      	movs	r3, #15
    471a:	18fb      	adds	r3, r7, r3
    471c:	1dfa      	adds	r2, r7, #7
    471e:	7812      	ldrb	r2, [r2, #0]
    4720:	0952      	lsrs	r2, r2, #5
    4722:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4724:	230f      	movs	r3, #15
    4726:	18fb      	adds	r3, r7, r3
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	2b00      	cmp	r3, #0
    472c:	d10c      	bne.n	4748 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    472e:	4b09      	ldr	r3, [pc, #36]	; (4754 <_extint_get_eic_from_channel+0x48>)
    4730:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4732:	230f      	movs	r3, #15
    4734:	18fb      	adds	r3, r7, r3
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	009b      	lsls	r3, r3, #2
    473a:	2210      	movs	r2, #16
    473c:	4694      	mov	ip, r2
    473e:	44bc      	add	ip, r7
    4740:	4463      	add	r3, ip
    4742:	3b08      	subs	r3, #8
    4744:	681b      	ldr	r3, [r3, #0]
    4746:	e000      	b.n	474a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4748:	2300      	movs	r3, #0
	}
}
    474a:	0018      	movs	r0, r3
    474c:	46bd      	mov	sp, r7
    474e:	b004      	add	sp, #16
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	40001800 	.word	0x40001800

00004758 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    4758:	b580      	push	{r7, lr}
    475a:	b084      	sub	sp, #16
    475c:	af00      	add	r7, sp, #0
    475e:	0002      	movs	r2, r0
    4760:	1dfb      	adds	r3, r7, #7
    4762:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    4764:	1dfb      	adds	r3, r7, #7
    4766:	781b      	ldrb	r3, [r3, #0]
    4768:	0018      	movs	r0, r3
    476a:	4b0b      	ldr	r3, [pc, #44]	; (4798 <extint_chan_is_detected+0x40>)
    476c:	4798      	blx	r3
    476e:	0003      	movs	r3, r0
    4770:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    4772:	1dfb      	adds	r3, r7, #7
    4774:	781b      	ldrb	r3, [r3, #0]
    4776:	221f      	movs	r2, #31
    4778:	4013      	ands	r3, r2
    477a:	2201      	movs	r2, #1
    477c:	409a      	lsls	r2, r3
    477e:	0013      	movs	r3, r2
    4780:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    4782:	68fb      	ldr	r3, [r7, #12]
    4784:	691b      	ldr	r3, [r3, #16]
    4786:	68ba      	ldr	r2, [r7, #8]
    4788:	4013      	ands	r3, r2
    478a:	1e5a      	subs	r2, r3, #1
    478c:	4193      	sbcs	r3, r2
    478e:	b2db      	uxtb	r3, r3
}
    4790:	0018      	movs	r0, r3
    4792:	46bd      	mov	sp, r7
    4794:	b004      	add	sp, #16
    4796:	bd80      	pop	{r7, pc}
    4798:	0000470d 	.word	0x0000470d

0000479c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    479c:	b580      	push	{r7, lr}
    479e:	b084      	sub	sp, #16
    47a0:	af00      	add	r7, sp, #0
    47a2:	0002      	movs	r2, r0
    47a4:	1dfb      	adds	r3, r7, #7
    47a6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    47a8:	1dfb      	adds	r3, r7, #7
    47aa:	781b      	ldrb	r3, [r3, #0]
    47ac:	0018      	movs	r0, r3
    47ae:	4b09      	ldr	r3, [pc, #36]	; (47d4 <extint_chan_clear_detected+0x38>)
    47b0:	4798      	blx	r3
    47b2:	0003      	movs	r3, r0
    47b4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    47b6:	1dfb      	adds	r3, r7, #7
    47b8:	781b      	ldrb	r3, [r3, #0]
    47ba:	221f      	movs	r2, #31
    47bc:	4013      	ands	r3, r2
    47be:	2201      	movs	r2, #1
    47c0:	409a      	lsls	r2, r3
    47c2:	0013      	movs	r3, r2
    47c4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    47c6:	68fb      	ldr	r3, [r7, #12]
    47c8:	68ba      	ldr	r2, [r7, #8]
    47ca:	611a      	str	r2, [r3, #16]
}
    47cc:	46c0      	nop			; (mov r8, r8)
    47ce:	46bd      	mov	sp, r7
    47d0:	b004      	add	sp, #16
    47d2:	bd80      	pop	{r7, pc}
    47d4:	0000470d 	.word	0x0000470d

000047d8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    47d8:	b580      	push	{r7, lr}
    47da:	b084      	sub	sp, #16
    47dc:	af00      	add	r7, sp, #0
    47de:	0002      	movs	r2, r0
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	701a      	strb	r2, [r3, #0]
    47e4:	1dbb      	adds	r3, r7, #6
    47e6:	1c0a      	adds	r2, r1, #0
    47e8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    47ea:	1dbb      	adds	r3, r7, #6
    47ec:	781b      	ldrb	r3, [r3, #0]
    47ee:	2b00      	cmp	r3, #0
    47f0:	d10e      	bne.n	4810 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    47f2:	1dfb      	adds	r3, r7, #7
    47f4:	781b      	ldrb	r3, [r3, #0]
    47f6:	0018      	movs	r0, r3
    47f8:	4b08      	ldr	r3, [pc, #32]	; (481c <extint_chan_enable_callback+0x44>)
    47fa:	4798      	blx	r3
    47fc:	0003      	movs	r3, r0
    47fe:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    4800:	1dfb      	adds	r3, r7, #7
    4802:	781b      	ldrb	r3, [r3, #0]
    4804:	2201      	movs	r2, #1
    4806:	409a      	lsls	r2, r3
    4808:	68fb      	ldr	r3, [r7, #12]
    480a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    480c:	2300      	movs	r3, #0
    480e:	e000      	b.n	4812 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4810:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    4812:	0018      	movs	r0, r3
    4814:	46bd      	mov	sp, r7
    4816:	b004      	add	sp, #16
    4818:	bd80      	pop	{r7, pc}
    481a:	46c0      	nop			; (mov r8, r8)
    481c:	0000470d 	.word	0x0000470d

00004820 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    4820:	b580      	push	{r7, lr}
    4822:	b084      	sub	sp, #16
    4824:	af00      	add	r7, sp, #0
    4826:	0002      	movs	r2, r0
    4828:	1dfb      	adds	r3, r7, #7
    482a:	701a      	strb	r2, [r3, #0]
    482c:	1dbb      	adds	r3, r7, #6
    482e:	1c0a      	adds	r2, r1, #0
    4830:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4832:	1dbb      	adds	r3, r7, #6
    4834:	781b      	ldrb	r3, [r3, #0]
    4836:	2b00      	cmp	r3, #0
    4838:	d10e      	bne.n	4858 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    483a:	1dfb      	adds	r3, r7, #7
    483c:	781b      	ldrb	r3, [r3, #0]
    483e:	0018      	movs	r0, r3
    4840:	4b08      	ldr	r3, [pc, #32]	; (4864 <extint_chan_disable_callback+0x44>)
    4842:	4798      	blx	r3
    4844:	0003      	movs	r3, r0
    4846:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    4848:	1dfb      	adds	r3, r7, #7
    484a:	781b      	ldrb	r3, [r3, #0]
    484c:	2201      	movs	r2, #1
    484e:	409a      	lsls	r2, r3
    4850:	68fb      	ldr	r3, [r7, #12]
    4852:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4854:	2300      	movs	r3, #0
    4856:	e000      	b.n	485a <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4858:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    485a:	0018      	movs	r0, r3
    485c:	46bd      	mov	sp, r7
    485e:	b004      	add	sp, #16
    4860:	bd80      	pop	{r7, pc}
    4862:	46c0      	nop			; (mov r8, r8)
    4864:	0000470d 	.word	0x0000470d

00004868 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4868:	b580      	push	{r7, lr}
    486a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    486c:	4b15      	ldr	r3, [pc, #84]	; (48c4 <EIC_Handler+0x5c>)
    486e:	2200      	movs	r2, #0
    4870:	701a      	strb	r2, [r3, #0]
    4872:	e020      	b.n	48b6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    4874:	4b13      	ldr	r3, [pc, #76]	; (48c4 <EIC_Handler+0x5c>)
    4876:	781b      	ldrb	r3, [r3, #0]
    4878:	0018      	movs	r0, r3
    487a:	4b13      	ldr	r3, [pc, #76]	; (48c8 <EIC_Handler+0x60>)
    487c:	4798      	blx	r3
    487e:	1e03      	subs	r3, r0, #0
    4880:	d013      	beq.n	48aa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    4882:	4b10      	ldr	r3, [pc, #64]	; (48c4 <EIC_Handler+0x5c>)
    4884:	781b      	ldrb	r3, [r3, #0]
    4886:	0018      	movs	r0, r3
    4888:	4b10      	ldr	r3, [pc, #64]	; (48cc <EIC_Handler+0x64>)
    488a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    488c:	4b0d      	ldr	r3, [pc, #52]	; (48c4 <EIC_Handler+0x5c>)
    488e:	781b      	ldrb	r3, [r3, #0]
    4890:	001a      	movs	r2, r3
    4892:	4b0f      	ldr	r3, [pc, #60]	; (48d0 <EIC_Handler+0x68>)
    4894:	0092      	lsls	r2, r2, #2
    4896:	58d3      	ldr	r3, [r2, r3]
    4898:	2b00      	cmp	r3, #0
    489a:	d006      	beq.n	48aa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    489c:	4b09      	ldr	r3, [pc, #36]	; (48c4 <EIC_Handler+0x5c>)
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	001a      	movs	r2, r3
    48a2:	4b0b      	ldr	r3, [pc, #44]	; (48d0 <EIC_Handler+0x68>)
    48a4:	0092      	lsls	r2, r2, #2
    48a6:	58d3      	ldr	r3, [r2, r3]
    48a8:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    48aa:	4b06      	ldr	r3, [pc, #24]	; (48c4 <EIC_Handler+0x5c>)
    48ac:	781b      	ldrb	r3, [r3, #0]
    48ae:	3301      	adds	r3, #1
    48b0:	b2da      	uxtb	r2, r3
    48b2:	4b04      	ldr	r3, [pc, #16]	; (48c4 <EIC_Handler+0x5c>)
    48b4:	701a      	strb	r2, [r3, #0]
    48b6:	4b03      	ldr	r3, [pc, #12]	; (48c4 <EIC_Handler+0x5c>)
    48b8:	781b      	ldrb	r3, [r3, #0]
    48ba:	2b0f      	cmp	r3, #15
    48bc:	d9da      	bls.n	4874 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    48be:	46c0      	nop			; (mov r8, r8)
    48c0:	46bd      	mov	sp, r7
    48c2:	bd80      	pop	{r7, pc}
    48c4:	200045ec 	.word	0x200045ec
    48c8:	00004759 	.word	0x00004759
    48cc:	0000479d 	.word	0x0000479d
    48d0:	200045f0 	.word	0x200045f0

000048d4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	af00      	add	r7, sp, #0
    48da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    48dc:	687b      	ldr	r3, [r7, #4]
    48de:	2200      	movs	r2, #0
    48e0:	701a      	strb	r2, [r3, #0]
}
    48e2:	46c0      	nop			; (mov r8, r8)
    48e4:	46bd      	mov	sp, r7
    48e6:	b002      	add	sp, #8
    48e8:	bd80      	pop	{r7, pc}
    48ea:	46c0      	nop			; (mov r8, r8)

000048ec <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    48ec:	b580      	push	{r7, lr}
    48ee:	b082      	sub	sp, #8
    48f0:	af00      	add	r7, sp, #0
    48f2:	0002      	movs	r2, r0
    48f4:	6039      	str	r1, [r7, #0]
    48f6:	1dfb      	adds	r3, r7, #7
    48f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    48fa:	1dfb      	adds	r3, r7, #7
    48fc:	781b      	ldrb	r3, [r3, #0]
    48fe:	2b01      	cmp	r3, #1
    4900:	d00a      	beq.n	4918 <system_apb_clock_set_mask+0x2c>
    4902:	2b02      	cmp	r3, #2
    4904:	d00f      	beq.n	4926 <system_apb_clock_set_mask+0x3a>
    4906:	2b00      	cmp	r3, #0
    4908:	d114      	bne.n	4934 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    490a:	4b0e      	ldr	r3, [pc, #56]	; (4944 <system_apb_clock_set_mask+0x58>)
    490c:	4a0d      	ldr	r2, [pc, #52]	; (4944 <system_apb_clock_set_mask+0x58>)
    490e:	6991      	ldr	r1, [r2, #24]
    4910:	683a      	ldr	r2, [r7, #0]
    4912:	430a      	orrs	r2, r1
    4914:	619a      	str	r2, [r3, #24]
			break;
    4916:	e00f      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4918:	4b0a      	ldr	r3, [pc, #40]	; (4944 <system_apb_clock_set_mask+0x58>)
    491a:	4a0a      	ldr	r2, [pc, #40]	; (4944 <system_apb_clock_set_mask+0x58>)
    491c:	69d1      	ldr	r1, [r2, #28]
    491e:	683a      	ldr	r2, [r7, #0]
    4920:	430a      	orrs	r2, r1
    4922:	61da      	str	r2, [r3, #28]
			break;
    4924:	e008      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4926:	4b07      	ldr	r3, [pc, #28]	; (4944 <system_apb_clock_set_mask+0x58>)
    4928:	4a06      	ldr	r2, [pc, #24]	; (4944 <system_apb_clock_set_mask+0x58>)
    492a:	6a11      	ldr	r1, [r2, #32]
    492c:	683a      	ldr	r2, [r7, #0]
    492e:	430a      	orrs	r2, r1
    4930:	621a      	str	r2, [r3, #32]
			break;
    4932:	e001      	b.n	4938 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4934:	2317      	movs	r3, #23
    4936:	e000      	b.n	493a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4938:	2300      	movs	r3, #0
}
    493a:	0018      	movs	r0, r3
    493c:	46bd      	mov	sp, r7
    493e:	b002      	add	sp, #8
    4940:	bd80      	pop	{r7, pc}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	40000400 	.word	0x40000400

00004948 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    4948:	b580      	push	{r7, lr}
    494a:	b082      	sub	sp, #8
    494c:	af00      	add	r7, sp, #0
    494e:	0002      	movs	r2, r0
    4950:	1dfb      	adds	r3, r7, #7
    4952:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4954:	4b06      	ldr	r3, [pc, #24]	; (4970 <system_interrupt_enable+0x28>)
    4956:	1dfa      	adds	r2, r7, #7
    4958:	7812      	ldrb	r2, [r2, #0]
    495a:	0011      	movs	r1, r2
    495c:	221f      	movs	r2, #31
    495e:	400a      	ands	r2, r1
    4960:	2101      	movs	r1, #1
    4962:	4091      	lsls	r1, r2
    4964:	000a      	movs	r2, r1
    4966:	601a      	str	r2, [r3, #0]
}
    4968:	46c0      	nop			; (mov r8, r8)
    496a:	46bd      	mov	sp, r7
    496c:	b002      	add	sp, #8
    496e:	bd80      	pop	{r7, pc}
    4970:	e000e100 	.word	0xe000e100

00004974 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    4974:	b580      	push	{r7, lr}
    4976:	b082      	sub	sp, #8
    4978:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    497a:	4b0f      	ldr	r3, [pc, #60]	; (49b8 <extint_is_syncing+0x44>)
    497c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    497e:	2300      	movs	r3, #0
    4980:	607b      	str	r3, [r7, #4]
    4982:	e011      	b.n	49a8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	009b      	lsls	r3, r3, #2
    4988:	2208      	movs	r2, #8
    498a:	4694      	mov	ip, r2
    498c:	44bc      	add	ip, r7
    498e:	4463      	add	r3, ip
    4990:	3b08      	subs	r3, #8
    4992:	681b      	ldr	r3, [r3, #0]
    4994:	785b      	ldrb	r3, [r3, #1]
    4996:	b2db      	uxtb	r3, r3
    4998:	b25b      	sxtb	r3, r3
    499a:	2b00      	cmp	r3, #0
    499c:	da01      	bge.n	49a2 <extint_is_syncing+0x2e>
			return true;
    499e:	2301      	movs	r3, #1
    49a0:	e006      	b.n	49b0 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49a2:	687b      	ldr	r3, [r7, #4]
    49a4:	3301      	adds	r3, #1
    49a6:	607b      	str	r3, [r7, #4]
    49a8:	687b      	ldr	r3, [r7, #4]
    49aa:	2b00      	cmp	r3, #0
    49ac:	d0ea      	beq.n	4984 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    49ae:	2300      	movs	r3, #0
}
    49b0:	0018      	movs	r0, r3
    49b2:	46bd      	mov	sp, r7
    49b4:	b002      	add	sp, #8
    49b6:	bd80      	pop	{r7, pc}
    49b8:	40001800 	.word	0x40001800

000049bc <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    49bc:	b580      	push	{r7, lr}
    49be:	b084      	sub	sp, #16
    49c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    49c2:	4b2d      	ldr	r3, [pc, #180]	; (4a78 <_system_extint_init+0xbc>)
    49c4:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    49c6:	2140      	movs	r1, #64	; 0x40
    49c8:	2000      	movs	r0, #0
    49ca:	4b2c      	ldr	r3, [pc, #176]	; (4a7c <_system_extint_init+0xc0>)
    49cc:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    49ce:	003b      	movs	r3, r7
    49d0:	0018      	movs	r0, r3
    49d2:	4b2b      	ldr	r3, [pc, #172]	; (4a80 <_system_extint_init+0xc4>)
    49d4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    49d6:	003b      	movs	r3, r7
    49d8:	2200      	movs	r2, #0
    49da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    49dc:	003b      	movs	r3, r7
    49de:	0019      	movs	r1, r3
    49e0:	2005      	movs	r0, #5
    49e2:	4b28      	ldr	r3, [pc, #160]	; (4a84 <_system_extint_init+0xc8>)
    49e4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    49e6:	2005      	movs	r0, #5
    49e8:	4b27      	ldr	r3, [pc, #156]	; (4a88 <_system_extint_init+0xcc>)
    49ea:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    49ec:	2300      	movs	r3, #0
    49ee:	60fb      	str	r3, [r7, #12]
    49f0:	e018      	b.n	4a24 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    49f2:	68fb      	ldr	r3, [r7, #12]
    49f4:	009b      	lsls	r3, r3, #2
    49f6:	2210      	movs	r2, #16
    49f8:	4694      	mov	ip, r2
    49fa:	44bc      	add	ip, r7
    49fc:	4463      	add	r3, ip
    49fe:	3b0c      	subs	r3, #12
    4a00:	681a      	ldr	r2, [r3, #0]
    4a02:	68fb      	ldr	r3, [r7, #12]
    4a04:	009b      	lsls	r3, r3, #2
    4a06:	2110      	movs	r1, #16
    4a08:	468c      	mov	ip, r1
    4a0a:	44bc      	add	ip, r7
    4a0c:	4463      	add	r3, ip
    4a0e:	3b0c      	subs	r3, #12
    4a10:	681b      	ldr	r3, [r3, #0]
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	b2db      	uxtb	r3, r3
    4a16:	2101      	movs	r1, #1
    4a18:	430b      	orrs	r3, r1
    4a1a:	b2db      	uxtb	r3, r3
    4a1c:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4a1e:	68fb      	ldr	r3, [r7, #12]
    4a20:	3301      	adds	r3, #1
    4a22:	60fb      	str	r3, [r7, #12]
    4a24:	68fb      	ldr	r3, [r7, #12]
    4a26:	2b00      	cmp	r3, #0
    4a28:	d0e3      	beq.n	49f2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	4b17      	ldr	r3, [pc, #92]	; (4a8c <_system_extint_init+0xd0>)
    4a2e:	4798      	blx	r3
    4a30:	1e03      	subs	r3, r0, #0
    4a32:	d1fb      	bne.n	4a2c <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a34:	230b      	movs	r3, #11
    4a36:	18fb      	adds	r3, r7, r3
    4a38:	2200      	movs	r2, #0
    4a3a:	701a      	strb	r2, [r3, #0]
    4a3c:	e00d      	b.n	4a5a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    4a3e:	230b      	movs	r3, #11
    4a40:	18fb      	adds	r3, r7, r3
    4a42:	781a      	ldrb	r2, [r3, #0]
    4a44:	4b12      	ldr	r3, [pc, #72]	; (4a90 <_system_extint_init+0xd4>)
    4a46:	0092      	lsls	r2, r2, #2
    4a48:	2100      	movs	r1, #0
    4a4a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a4c:	230b      	movs	r3, #11
    4a4e:	18fb      	adds	r3, r7, r3
    4a50:	781a      	ldrb	r2, [r3, #0]
    4a52:	230b      	movs	r3, #11
    4a54:	18fb      	adds	r3, r7, r3
    4a56:	3201      	adds	r2, #1
    4a58:	701a      	strb	r2, [r3, #0]
    4a5a:	230b      	movs	r3, #11
    4a5c:	18fb      	adds	r3, r7, r3
    4a5e:	781b      	ldrb	r3, [r3, #0]
    4a60:	2b0f      	cmp	r3, #15
    4a62:	d9ec      	bls.n	4a3e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4a64:	2004      	movs	r0, #4
    4a66:	4b0b      	ldr	r3, [pc, #44]	; (4a94 <_system_extint_init+0xd8>)
    4a68:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4a6a:	4b0b      	ldr	r3, [pc, #44]	; (4a98 <_system_extint_init+0xdc>)
    4a6c:	4798      	blx	r3
}
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	46bd      	mov	sp, r7
    4a72:	b004      	add	sp, #16
    4a74:	bd80      	pop	{r7, pc}
    4a76:	46c0      	nop			; (mov r8, r8)
    4a78:	40001800 	.word	0x40001800
    4a7c:	000048ed 	.word	0x000048ed
    4a80:	000048d5 	.word	0x000048d5
    4a84:	000078ad 	.word	0x000078ad
    4a88:	000078f1 	.word	0x000078f1
    4a8c:	00004975 	.word	0x00004975
    4a90:	200045f0 	.word	0x200045f0
    4a94:	00004949 	.word	0x00004949
    4a98:	00004a9d 	.word	0x00004a9d

00004a9c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4a9c:	b580      	push	{r7, lr}
    4a9e:	b082      	sub	sp, #8
    4aa0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4aa2:	4b15      	ldr	r3, [pc, #84]	; (4af8 <_extint_enable+0x5c>)
    4aa4:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4aa6:	2300      	movs	r3, #0
    4aa8:	607b      	str	r3, [r7, #4]
    4aaa:	e018      	b.n	4ade <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	009b      	lsls	r3, r3, #2
    4ab0:	2208      	movs	r2, #8
    4ab2:	4694      	mov	ip, r2
    4ab4:	44bc      	add	ip, r7
    4ab6:	4463      	add	r3, ip
    4ab8:	3b08      	subs	r3, #8
    4aba:	681a      	ldr	r2, [r3, #0]
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	009b      	lsls	r3, r3, #2
    4ac0:	2108      	movs	r1, #8
    4ac2:	468c      	mov	ip, r1
    4ac4:	44bc      	add	ip, r7
    4ac6:	4463      	add	r3, ip
    4ac8:	3b08      	subs	r3, #8
    4aca:	681b      	ldr	r3, [r3, #0]
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	b2db      	uxtb	r3, r3
    4ad0:	2102      	movs	r1, #2
    4ad2:	430b      	orrs	r3, r1
    4ad4:	b2db      	uxtb	r3, r3
    4ad6:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	3301      	adds	r3, #1
    4adc:	607b      	str	r3, [r7, #4]
    4ade:	687b      	ldr	r3, [r7, #4]
    4ae0:	2b00      	cmp	r3, #0
    4ae2:	d0e3      	beq.n	4aac <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    4ae4:	46c0      	nop			; (mov r8, r8)
    4ae6:	4b05      	ldr	r3, [pc, #20]	; (4afc <_extint_enable+0x60>)
    4ae8:	4798      	blx	r3
    4aea:	1e03      	subs	r3, r0, #0
    4aec:	d1fb      	bne.n	4ae6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    4aee:	46c0      	nop			; (mov r8, r8)
    4af0:	46bd      	mov	sp, r7
    4af2:	b002      	add	sp, #8
    4af4:	bd80      	pop	{r7, pc}
    4af6:	46c0      	nop			; (mov r8, r8)
    4af8:	40001800 	.word	0x40001800
    4afc:	00004975 	.word	0x00004975

00004b00 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b082      	sub	sp, #8
    4b04:	af00      	add	r7, sp, #0
    4b06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2280      	movs	r2, #128	; 0x80
    4b0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	2200      	movs	r2, #0
    4b12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4b14:	687b      	ldr	r3, [r7, #4]
    4b16:	2201      	movs	r2, #1
    4b18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4b1a:	687b      	ldr	r3, [r7, #4]
    4b1c:	2200      	movs	r2, #0
    4b1e:	70da      	strb	r2, [r3, #3]
}
    4b20:	46c0      	nop			; (mov r8, r8)
    4b22:	46bd      	mov	sp, r7
    4b24:	b002      	add	sp, #8
    4b26:	bd80      	pop	{r7, pc}

00004b28 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b084      	sub	sp, #16
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	0002      	movs	r2, r0
    4b30:	6039      	str	r1, [r7, #0]
    4b32:	1dfb      	adds	r3, r7, #7
    4b34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    4b36:	230c      	movs	r3, #12
    4b38:	18fb      	adds	r3, r7, r3
    4b3a:	0018      	movs	r0, r3
    4b3c:	4b10      	ldr	r3, [pc, #64]	; (4b80 <port_pin_set_config+0x58>)
    4b3e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    4b40:	230c      	movs	r3, #12
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	2280      	movs	r2, #128	; 0x80
    4b46:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4b48:	683b      	ldr	r3, [r7, #0]
    4b4a:	781a      	ldrb	r2, [r3, #0]
    4b4c:	230c      	movs	r3, #12
    4b4e:	18fb      	adds	r3, r7, r3
    4b50:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4b52:	683b      	ldr	r3, [r7, #0]
    4b54:	785a      	ldrb	r2, [r3, #1]
    4b56:	230c      	movs	r3, #12
    4b58:	18fb      	adds	r3, r7, r3
    4b5a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4b5c:	683b      	ldr	r3, [r7, #0]
    4b5e:	789a      	ldrb	r2, [r3, #2]
    4b60:	230c      	movs	r3, #12
    4b62:	18fb      	adds	r3, r7, r3
    4b64:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4b66:	230c      	movs	r3, #12
    4b68:	18fa      	adds	r2, r7, r3
    4b6a:	1dfb      	adds	r3, r7, #7
    4b6c:	781b      	ldrb	r3, [r3, #0]
    4b6e:	0011      	movs	r1, r2
    4b70:	0018      	movs	r0, r3
    4b72:	4b04      	ldr	r3, [pc, #16]	; (4b84 <port_pin_set_config+0x5c>)
    4b74:	4798      	blx	r3
}
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	46bd      	mov	sp, r7
    4b7a:	b004      	add	sp, #16
    4b7c:	bd80      	pop	{r7, pc}
    4b7e:	46c0      	nop			; (mov r8, r8)
    4b80:	00004b01 	.word	0x00004b01
    4b84:	00007b99 	.word	0x00007b99

00004b88 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    4b88:	b580      	push	{r7, lr}
    4b8a:	b086      	sub	sp, #24
    4b8c:	af00      	add	r7, sp, #0
    4b8e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    4b90:	4b28      	ldr	r3, [pc, #160]	; (4c34 <_rtc_interrupt_handler+0xac>)
    4b92:	687a      	ldr	r2, [r7, #4]
    4b94:	0092      	lsls	r2, r2, #2
    4b96:	58d3      	ldr	r3, [r2, r3]
    4b98:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    4b9a:	697b      	ldr	r3, [r7, #20]
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    4ba0:	230e      	movs	r3, #14
    4ba2:	18fb      	adds	r3, r7, r3
    4ba4:	697a      	ldr	r2, [r7, #20]
    4ba6:	8a52      	ldrh	r2, [r2, #18]
    4ba8:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    4baa:	697b      	ldr	r3, [r7, #20]
    4bac:	8a1b      	ldrh	r3, [r3, #16]
    4bae:	b29a      	uxth	r2, r3
    4bb0:	230e      	movs	r3, #14
    4bb2:	18fb      	adds	r3, r7, r3
    4bb4:	210e      	movs	r1, #14
    4bb6:	1879      	adds	r1, r7, r1
    4bb8:	8809      	ldrh	r1, [r1, #0]
    4bba:	400a      	ands	r2, r1
    4bbc:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4bbe:	693b      	ldr	r3, [r7, #16]
    4bc0:	7a1b      	ldrb	r3, [r3, #8]
    4bc2:	b2da      	uxtb	r2, r3
    4bc4:	230c      	movs	r3, #12
    4bc6:	18fb      	adds	r3, r7, r3
    4bc8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    4bca:	693b      	ldr	r3, [r7, #16]
    4bcc:	79db      	ldrb	r3, [r3, #7]
    4bce:	b2db      	uxtb	r3, r3
    4bd0:	b29a      	uxth	r2, r3
    4bd2:	230c      	movs	r3, #12
    4bd4:	18fb      	adds	r3, r7, r3
    4bd6:	210c      	movs	r1, #12
    4bd8:	1879      	adds	r1, r7, r1
    4bda:	8809      	ldrh	r1, [r1, #0]
    4bdc:	400a      	ands	r2, r1
    4bde:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    4be0:	230c      	movs	r3, #12
    4be2:	18fb      	adds	r3, r7, r3
    4be4:	881b      	ldrh	r3, [r3, #0]
    4be6:	2280      	movs	r2, #128	; 0x80
    4be8:	4013      	ands	r3, r2
    4bea:	d00c      	beq.n	4c06 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    4bec:	230e      	movs	r3, #14
    4bee:	18fb      	adds	r3, r7, r3
    4bf0:	881b      	ldrh	r3, [r3, #0]
    4bf2:	2202      	movs	r2, #2
    4bf4:	4013      	ands	r3, r2
    4bf6:	d002      	beq.n	4bfe <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    4bf8:	697b      	ldr	r3, [r7, #20]
    4bfa:	68db      	ldr	r3, [r3, #12]
    4bfc:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4bfe:	693b      	ldr	r3, [r7, #16]
    4c00:	2280      	movs	r2, #128	; 0x80
    4c02:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    4c04:	e011      	b.n	4c2a <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    4c06:	230c      	movs	r3, #12
    4c08:	18fb      	adds	r3, r7, r3
    4c0a:	881b      	ldrh	r3, [r3, #0]
    4c0c:	2201      	movs	r2, #1
    4c0e:	4013      	ands	r3, r2
    4c10:	d00b      	beq.n	4c2a <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4c12:	230e      	movs	r3, #14
    4c14:	18fb      	adds	r3, r7, r3
    4c16:	881b      	ldrh	r3, [r3, #0]
    4c18:	2201      	movs	r2, #1
    4c1a:	4013      	ands	r3, r2
    4c1c:	d002      	beq.n	4c24 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    4c1e:	697b      	ldr	r3, [r7, #20]
    4c20:	689b      	ldr	r3, [r3, #8]
    4c22:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    4c24:	693b      	ldr	r3, [r7, #16]
    4c26:	2201      	movs	r2, #1
    4c28:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    4c2a:	46c0      	nop			; (mov r8, r8)
    4c2c:	46bd      	mov	sp, r7
    4c2e:	b006      	add	sp, #24
    4c30:	bd80      	pop	{r7, pc}
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	20004630 	.word	0x20004630

00004c38 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4c38:	b580      	push	{r7, lr}
    4c3a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    4c3c:	2000      	movs	r0, #0
    4c3e:	4b02      	ldr	r3, [pc, #8]	; (4c48 <RTC_Handler+0x10>)
    4c40:	4798      	blx	r3
}
    4c42:	46c0      	nop			; (mov r8, r8)
    4c44:	46bd      	mov	sp, r7
    4c46:	bd80      	pop	{r7, pc}
    4c48:	00004b89 	.word	0x00004b89

00004c4c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4c4c:	b580      	push	{r7, lr}
    4c4e:	b082      	sub	sp, #8
    4c50:	af00      	add	r7, sp, #0
    4c52:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	2200      	movs	r2, #0
    4c58:	701a      	strb	r2, [r3, #0]
}
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	46bd      	mov	sp, r7
    4c5e:	b002      	add	sp, #8
    4c60:	bd80      	pop	{r7, pc}
    4c62:	46c0      	nop			; (mov r8, r8)

00004c64 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    4c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c66:	b08d      	sub	sp, #52	; 0x34
    4c68:	af00      	add	r7, sp, #0
    4c6a:	60b8      	str	r0, [r7, #8]
    4c6c:	60f9      	str	r1, [r7, #12]
    4c6e:	603a      	str	r2, [r7, #0]
    4c70:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    4c72:	2300      	movs	r3, #0
    4c74:	2400      	movs	r4, #0
    4c76:	623b      	str	r3, [r7, #32]
    4c78:	627c      	str	r4, [r7, #36]	; 0x24
    4c7a:	2300      	movs	r3, #0
    4c7c:	2400      	movs	r4, #0
    4c7e:	61bb      	str	r3, [r7, #24]
    4c80:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    4c82:	233f      	movs	r3, #63	; 0x3f
    4c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    4c86:	e053      	b.n	4d30 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    4c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c8a:	3b20      	subs	r3, #32
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	db04      	blt.n	4c9a <long_division+0x36>
    4c90:	2201      	movs	r2, #1
    4c92:	409a      	lsls	r2, r3
    4c94:	0013      	movs	r3, r2
    4c96:	617b      	str	r3, [r7, #20]
    4c98:	e00b      	b.n	4cb2 <long_division+0x4e>
    4c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c9c:	2220      	movs	r2, #32
    4c9e:	1ad3      	subs	r3, r2, r3
    4ca0:	2201      	movs	r2, #1
    4ca2:	40da      	lsrs	r2, r3
    4ca4:	0013      	movs	r3, r2
    4ca6:	2100      	movs	r1, #0
    4ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4caa:	4091      	lsls	r1, r2
    4cac:	000a      	movs	r2, r1
    4cae:	4313      	orrs	r3, r2
    4cb0:	617b      	str	r3, [r7, #20]
    4cb2:	2201      	movs	r2, #1
    4cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4cb6:	409a      	lsls	r2, r3
    4cb8:	0013      	movs	r3, r2
    4cba:	613b      	str	r3, [r7, #16]

		r = r << 1;
    4cbc:	69bb      	ldr	r3, [r7, #24]
    4cbe:	69fc      	ldr	r4, [r7, #28]
    4cc0:	18db      	adds	r3, r3, r3
    4cc2:	4164      	adcs	r4, r4
    4cc4:	61bb      	str	r3, [r7, #24]
    4cc6:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    4cc8:	68bb      	ldr	r3, [r7, #8]
    4cca:	693a      	ldr	r2, [r7, #16]
    4ccc:	401a      	ands	r2, r3
    4cce:	0015      	movs	r5, r2
    4cd0:	68fb      	ldr	r3, [r7, #12]
    4cd2:	697a      	ldr	r2, [r7, #20]
    4cd4:	401a      	ands	r2, r3
    4cd6:	0016      	movs	r6, r2
    4cd8:	002b      	movs	r3, r5
    4cda:	4333      	orrs	r3, r6
    4cdc:	d007      	beq.n	4cee <long_division+0x8a>
			r |= 0x01;
    4cde:	69bb      	ldr	r3, [r7, #24]
    4ce0:	2201      	movs	r2, #1
    4ce2:	4313      	orrs	r3, r2
    4ce4:	61bb      	str	r3, [r7, #24]
    4ce6:	69fb      	ldr	r3, [r7, #28]
    4ce8:	2200      	movs	r2, #0
    4cea:	4313      	orrs	r3, r2
    4cec:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    4cee:	687a      	ldr	r2, [r7, #4]
    4cf0:	69fb      	ldr	r3, [r7, #28]
    4cf2:	429a      	cmp	r2, r3
    4cf4:	d819      	bhi.n	4d2a <long_division+0xc6>
    4cf6:	687a      	ldr	r2, [r7, #4]
    4cf8:	69fb      	ldr	r3, [r7, #28]
    4cfa:	429a      	cmp	r2, r3
    4cfc:	d103      	bne.n	4d06 <long_division+0xa2>
    4cfe:	683a      	ldr	r2, [r7, #0]
    4d00:	69bb      	ldr	r3, [r7, #24]
    4d02:	429a      	cmp	r2, r3
    4d04:	d811      	bhi.n	4d2a <long_division+0xc6>
			r = r - d;
    4d06:	69b9      	ldr	r1, [r7, #24]
    4d08:	69fa      	ldr	r2, [r7, #28]
    4d0a:	683b      	ldr	r3, [r7, #0]
    4d0c:	687c      	ldr	r4, [r7, #4]
    4d0e:	1ac9      	subs	r1, r1, r3
    4d10:	41a2      	sbcs	r2, r4
    4d12:	000b      	movs	r3, r1
    4d14:	0014      	movs	r4, r2
    4d16:	61bb      	str	r3, [r7, #24]
    4d18:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    4d1a:	6a3a      	ldr	r2, [r7, #32]
    4d1c:	693b      	ldr	r3, [r7, #16]
    4d1e:	4313      	orrs	r3, r2
    4d20:	623b      	str	r3, [r7, #32]
    4d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d24:	697b      	ldr	r3, [r7, #20]
    4d26:	4313      	orrs	r3, r2
    4d28:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    4d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d2c:	3b01      	subs	r3, #1
    4d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    4d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4d32:	2b00      	cmp	r3, #0
    4d34:	daa8      	bge.n	4c88 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    4d36:	6a3b      	ldr	r3, [r7, #32]
    4d38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    4d3a:	0018      	movs	r0, r3
    4d3c:	0021      	movs	r1, r4
    4d3e:	46bd      	mov	sp, r7
    4d40:	b00d      	add	sp, #52	; 0x34
    4d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d44 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b086      	sub	sp, #24
    4d48:	af00      	add	r7, sp, #0
    4d4a:	60f8      	str	r0, [r7, #12]
    4d4c:	60b9      	str	r1, [r7, #8]
    4d4e:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4d50:	2316      	movs	r3, #22
    4d52:	18fb      	adds	r3, r7, r3
    4d54:	2200      	movs	r2, #0
    4d56:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4d5c:	68bb      	ldr	r3, [r7, #8]
    4d5e:	085a      	lsrs	r2, r3, #1
    4d60:	68fb      	ldr	r3, [r7, #12]
    4d62:	429a      	cmp	r2, r3
    4d64:	d201      	bcs.n	4d6a <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4d66:	2340      	movs	r3, #64	; 0x40
    4d68:	e026      	b.n	4db8 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    4d6a:	68bb      	ldr	r3, [r7, #8]
    4d6c:	085b      	lsrs	r3, r3, #1
    4d6e:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4d70:	e00a      	b.n	4d88 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4d72:	693a      	ldr	r2, [r7, #16]
    4d74:	68fb      	ldr	r3, [r7, #12]
    4d76:	1ad3      	subs	r3, r2, r3
    4d78:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    4d7a:	2316      	movs	r3, #22
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	881a      	ldrh	r2, [r3, #0]
    4d80:	2316      	movs	r3, #22
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	3201      	adds	r2, #1
    4d86:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    4d88:	693a      	ldr	r2, [r7, #16]
    4d8a:	68fb      	ldr	r3, [r7, #12]
    4d8c:	429a      	cmp	r2, r3
    4d8e:	d2f0      	bcs.n	4d72 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    4d90:	2316      	movs	r3, #22
    4d92:	18fb      	adds	r3, r7, r3
    4d94:	2216      	movs	r2, #22
    4d96:	18ba      	adds	r2, r7, r2
    4d98:	8812      	ldrh	r2, [r2, #0]
    4d9a:	3a01      	subs	r2, #1
    4d9c:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4d9e:	2316      	movs	r3, #22
    4da0:	18fb      	adds	r3, r7, r3
    4da2:	881b      	ldrh	r3, [r3, #0]
    4da4:	2bff      	cmp	r3, #255	; 0xff
    4da6:	d901      	bls.n	4dac <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4da8:	2340      	movs	r3, #64	; 0x40
    4daa:	e005      	b.n	4db8 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	2216      	movs	r2, #22
    4db0:	18ba      	adds	r2, r7, r2
    4db2:	8812      	ldrh	r2, [r2, #0]
    4db4:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4db6:	2300      	movs	r3, #0
	}
}
    4db8:	0018      	movs	r0, r3
    4dba:	46bd      	mov	sp, r7
    4dbc:	b006      	add	sp, #24
    4dbe:	bd80      	pop	{r7, pc}

00004dc0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dc2:	b09d      	sub	sp, #116	; 0x74
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    4dc8:	63b9      	str	r1, [r7, #56]	; 0x38
    4dca:	637a      	str	r2, [r7, #52]	; 0x34
    4dcc:	2233      	movs	r2, #51	; 0x33
    4dce:	18ba      	adds	r2, r7, r2
    4dd0:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    4dd2:	2300      	movs	r3, #0
    4dd4:	2400      	movs	r4, #0
    4dd6:	65bb      	str	r3, [r7, #88]	; 0x58
    4dd8:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    4dda:	2300      	movs	r3, #0
    4ddc:	2400      	movs	r4, #0
    4dde:	653b      	str	r3, [r7, #80]	; 0x50
    4de0:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    4de2:	2300      	movs	r3, #0
    4de4:	2400      	movs	r4, #0
    4de6:	66bb      	str	r3, [r7, #104]	; 0x68
    4de8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    4dea:	2300      	movs	r3, #0
    4dec:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4dee:	2358      	movs	r3, #88	; 0x58
    4df0:	2230      	movs	r2, #48	; 0x30
    4df2:	4694      	mov	ip, r2
    4df4:	44bc      	add	ip, r7
    4df6:	4463      	add	r3, ip
    4df8:	781a      	ldrb	r2, [r3, #0]
    4dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4dfc:	435a      	muls	r2, r3
    4dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e00:	429a      	cmp	r2, r3
    4e02:	d901      	bls.n	4e08 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4e04:	2340      	movs	r3, #64	; 0x40
    4e06:	e0c6      	b.n	4f96 <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    4e08:	2333      	movs	r3, #51	; 0x33
    4e0a:	18fb      	adds	r3, r7, r3
    4e0c:	781b      	ldrb	r3, [r3, #0]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	d13d      	bne.n	4e8e <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4e12:	2358      	movs	r3, #88	; 0x58
    4e14:	2230      	movs	r2, #48	; 0x30
    4e16:	4694      	mov	ip, r2
    4e18:	44bc      	add	ip, r7
    4e1a:	4463      	add	r3, ip
    4e1c:	781b      	ldrb	r3, [r3, #0]
    4e1e:	b2db      	uxtb	r3, r3
    4e20:	613b      	str	r3, [r7, #16]
    4e22:	2300      	movs	r3, #0
    4e24:	617b      	str	r3, [r7, #20]
    4e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4e28:	60bb      	str	r3, [r7, #8]
    4e2a:	2300      	movs	r3, #0
    4e2c:	60fb      	str	r3, [r7, #12]
    4e2e:	4c5c      	ldr	r4, [pc, #368]	; (4fa0 <_sercom_get_async_baud_val+0x1e0>)
    4e30:	68ba      	ldr	r2, [r7, #8]
    4e32:	68fb      	ldr	r3, [r7, #12]
    4e34:	6938      	ldr	r0, [r7, #16]
    4e36:	6979      	ldr	r1, [r7, #20]
    4e38:	47a0      	blx	r4
    4e3a:	0003      	movs	r3, r0
    4e3c:	000c      	movs	r4, r1
    4e3e:	001b      	movs	r3, r3
    4e40:	64fb      	str	r3, [r7, #76]	; 0x4c
    4e42:	2300      	movs	r3, #0
    4e44:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    4e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4e48:	603b      	str	r3, [r7, #0]
    4e4a:	2300      	movs	r3, #0
    4e4c:	607b      	str	r3, [r7, #4]
    4e4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4e50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4e52:	683a      	ldr	r2, [r7, #0]
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	4c53      	ldr	r4, [pc, #332]	; (4fa4 <_sercom_get_async_baud_val+0x1e4>)
    4e58:	47a0      	blx	r4
    4e5a:	0003      	movs	r3, r0
    4e5c:	000c      	movs	r4, r1
    4e5e:	65bb      	str	r3, [r7, #88]	; 0x58
    4e60:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4e62:	2100      	movs	r1, #0
    4e64:	2201      	movs	r2, #1
    4e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4e68:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    4e6a:	1ac9      	subs	r1, r1, r3
    4e6c:	41a2      	sbcs	r2, r4
    4e6e:	000b      	movs	r3, r1
    4e70:	0014      	movs	r4, r2
    4e72:	653b      	str	r3, [r7, #80]	; 0x50
    4e74:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    4e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e78:	0c1b      	lsrs	r3, r3, #16
    4e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    4e7c:	0416      	lsls	r6, r2, #16
    4e7e:	431e      	orrs	r6, r3
    4e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4e82:	041d      	lsls	r5, r3, #16
    4e84:	0033      	movs	r3, r6
    4e86:	66bb      	str	r3, [r7, #104]	; 0x68
    4e88:	2300      	movs	r3, #0
    4e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    4e8c:	e07d      	b.n	4f8a <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4e8e:	2333      	movs	r3, #51	; 0x33
    4e90:	18fb      	adds	r3, r7, r3
    4e92:	781b      	ldrb	r3, [r3, #0]
    4e94:	2b01      	cmp	r3, #1
    4e96:	d000      	beq.n	4e9a <_sercom_get_async_baud_val+0xda>
    4e98:	e077      	b.n	4f8a <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4e9a:	2337      	movs	r3, #55	; 0x37
    4e9c:	2230      	movs	r2, #48	; 0x30
    4e9e:	4694      	mov	ip, r2
    4ea0:	44bc      	add	ip, r7
    4ea2:	4463      	add	r3, ip
    4ea4:	2200      	movs	r2, #0
    4ea6:	701a      	strb	r2, [r3, #0]
    4ea8:	e04e      	b.n	4f48 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    4eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4eac:	62bb      	str	r3, [r7, #40]	; 0x28
    4eae:	2300      	movs	r3, #0
    4eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    4eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    4eb6:	0003      	movs	r3, r0
    4eb8:	0f5b      	lsrs	r3, r3, #29
    4eba:	000a      	movs	r2, r1
    4ebc:	00d2      	lsls	r2, r2, #3
    4ebe:	4313      	orrs	r3, r2
    4ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
    4ec2:	0003      	movs	r3, r0
    4ec4:	00db      	lsls	r3, r3, #3
    4ec6:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    4ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4eca:	623b      	str	r3, [r7, #32]
    4ecc:	2300      	movs	r3, #0
    4ece:	627b      	str	r3, [r7, #36]	; 0x24
    4ed0:	2358      	movs	r3, #88	; 0x58
    4ed2:	2230      	movs	r2, #48	; 0x30
    4ed4:	4694      	mov	ip, r2
    4ed6:	44bc      	add	ip, r7
    4ed8:	4463      	add	r3, ip
    4eda:	781b      	ldrb	r3, [r3, #0]
    4edc:	b2db      	uxtb	r3, r3
    4ede:	61bb      	str	r3, [r7, #24]
    4ee0:	2300      	movs	r3, #0
    4ee2:	61fb      	str	r3, [r7, #28]
    4ee4:	4c2e      	ldr	r4, [pc, #184]	; (4fa0 <_sercom_get_async_baud_val+0x1e0>)
    4ee6:	69ba      	ldr	r2, [r7, #24]
    4ee8:	69fb      	ldr	r3, [r7, #28]
    4eea:	6a38      	ldr	r0, [r7, #32]
    4eec:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4eee:	47a0      	blx	r4
    4ef0:	0003      	movs	r3, r0
    4ef2:	000c      	movs	r4, r1
    4ef4:	643b      	str	r3, [r7, #64]	; 0x40
    4ef6:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    4ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4efa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    4efc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    4efe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4f00:	001a      	movs	r2, r3
    4f02:	0023      	movs	r3, r4
    4f04:	4c27      	ldr	r4, [pc, #156]	; (4fa4 <_sercom_get_async_baud_val+0x1e4>)
    4f06:	47a0      	blx	r4
    4f08:	0003      	movs	r3, r0
    4f0a:	000c      	movs	r4, r1
    4f0c:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    4f0e:	2337      	movs	r3, #55	; 0x37
    4f10:	2230      	movs	r2, #48	; 0x30
    4f12:	4694      	mov	ip, r2
    4f14:	44bc      	add	ip, r7
    4f16:	4463      	add	r3, ip
    4f18:	781b      	ldrb	r3, [r3, #0]
    4f1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4f1c:	1ad3      	subs	r3, r2, r3
    4f1e:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    4f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f22:	08db      	lsrs	r3, r3, #3
    4f24:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    4f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f28:	4a1f      	ldr	r2, [pc, #124]	; (4fa8 <_sercom_get_async_baud_val+0x1e8>)
    4f2a:	4293      	cmp	r3, r2
    4f2c:	d915      	bls.n	4f5a <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    4f2e:	2337      	movs	r3, #55	; 0x37
    4f30:	2230      	movs	r2, #48	; 0x30
    4f32:	4694      	mov	ip, r2
    4f34:	44bc      	add	ip, r7
    4f36:	4463      	add	r3, ip
    4f38:	781a      	ldrb	r2, [r3, #0]
    4f3a:	2337      	movs	r3, #55	; 0x37
    4f3c:	2130      	movs	r1, #48	; 0x30
    4f3e:	468c      	mov	ip, r1
    4f40:	44bc      	add	ip, r7
    4f42:	4463      	add	r3, ip
    4f44:	3201      	adds	r2, #1
    4f46:	701a      	strb	r2, [r3, #0]
    4f48:	2337      	movs	r3, #55	; 0x37
    4f4a:	2230      	movs	r2, #48	; 0x30
    4f4c:	4694      	mov	ip, r2
    4f4e:	44bc      	add	ip, r7
    4f50:	4463      	add	r3, ip
    4f52:	781b      	ldrb	r3, [r3, #0]
    4f54:	2b07      	cmp	r3, #7
    4f56:	d9a8      	bls.n	4eaa <_sercom_get_async_baud_val+0xea>
    4f58:	e000      	b.n	4f5c <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    4f5a:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    4f5c:	2337      	movs	r3, #55	; 0x37
    4f5e:	2230      	movs	r2, #48	; 0x30
    4f60:	4694      	mov	ip, r2
    4f62:	44bc      	add	ip, r7
    4f64:	4463      	add	r3, ip
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	2b08      	cmp	r3, #8
    4f6a:	d101      	bne.n	4f70 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4f6c:	2340      	movs	r3, #64	; 0x40
    4f6e:	e012      	b.n	4f96 <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    4f70:	2337      	movs	r3, #55	; 0x37
    4f72:	2230      	movs	r2, #48	; 0x30
    4f74:	4694      	mov	ip, r2
    4f76:	44bc      	add	ip, r7
    4f78:	4463      	add	r3, ip
    4f7a:	781b      	ldrb	r3, [r3, #0]
    4f7c:	035b      	lsls	r3, r3, #13
    4f7e:	001a      	movs	r2, r3
    4f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f82:	4313      	orrs	r3, r2
    4f84:	66bb      	str	r3, [r7, #104]	; 0x68
    4f86:	2300      	movs	r3, #0
    4f88:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    4f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4f8c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    4f8e:	b29a      	uxth	r2, r3
    4f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4f92:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    4f94:	2300      	movs	r3, #0
}
    4f96:	0018      	movs	r0, r3
    4f98:	46bd      	mov	sp, r7
    4f9a:	b01d      	add	sp, #116	; 0x74
    4f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f9e:	46c0      	nop			; (mov r8, r8)
    4fa0:	0000b971 	.word	0x0000b971
    4fa4:	00004c65 	.word	0x00004c65
    4fa8:	00001fff 	.word	0x00001fff

00004fac <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4fac:	b580      	push	{r7, lr}
    4fae:	b084      	sub	sp, #16
    4fb0:	af00      	add	r7, sp, #0
    4fb2:	0002      	movs	r2, r0
    4fb4:	1dfb      	adds	r3, r7, #7
    4fb6:	701a      	strb	r2, [r3, #0]
    4fb8:	1dbb      	adds	r3, r7, #6
    4fba:	1c0a      	adds	r2, r1, #0
    4fbc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4fbe:	4b1a      	ldr	r3, [pc, #104]	; (5028 <sercom_set_gclk_generator+0x7c>)
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	2201      	movs	r2, #1
    4fc4:	4053      	eors	r3, r2
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d103      	bne.n	4fd4 <sercom_set_gclk_generator+0x28>
    4fcc:	1dbb      	adds	r3, r7, #6
    4fce:	781b      	ldrb	r3, [r3, #0]
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d01b      	beq.n	500c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4fd4:	230c      	movs	r3, #12
    4fd6:	18fb      	adds	r3, r7, r3
    4fd8:	0018      	movs	r0, r3
    4fda:	4b14      	ldr	r3, [pc, #80]	; (502c <sercom_set_gclk_generator+0x80>)
    4fdc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4fde:	230c      	movs	r3, #12
    4fe0:	18fb      	adds	r3, r7, r3
    4fe2:	1dfa      	adds	r2, r7, #7
    4fe4:	7812      	ldrb	r2, [r2, #0]
    4fe6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4fe8:	230c      	movs	r3, #12
    4fea:	18fb      	adds	r3, r7, r3
    4fec:	0019      	movs	r1, r3
    4fee:	2013      	movs	r0, #19
    4ff0:	4b0f      	ldr	r3, [pc, #60]	; (5030 <sercom_set_gclk_generator+0x84>)
    4ff2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4ff4:	2013      	movs	r0, #19
    4ff6:	4b0f      	ldr	r3, [pc, #60]	; (5034 <sercom_set_gclk_generator+0x88>)
    4ff8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    4ffa:	4b0b      	ldr	r3, [pc, #44]	; (5028 <sercom_set_gclk_generator+0x7c>)
    4ffc:	1dfa      	adds	r2, r7, #7
    4ffe:	7812      	ldrb	r2, [r2, #0]
    5000:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    5002:	4b09      	ldr	r3, [pc, #36]	; (5028 <sercom_set_gclk_generator+0x7c>)
    5004:	2201      	movs	r2, #1
    5006:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    5008:	2300      	movs	r3, #0
    500a:	e008      	b.n	501e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    500c:	4b06      	ldr	r3, [pc, #24]	; (5028 <sercom_set_gclk_generator+0x7c>)
    500e:	785b      	ldrb	r3, [r3, #1]
    5010:	1dfa      	adds	r2, r7, #7
    5012:	7812      	ldrb	r2, [r2, #0]
    5014:	429a      	cmp	r2, r3
    5016:	d101      	bne.n	501c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    5018:	2300      	movs	r3, #0
    501a:	e000      	b.n	501e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    501c:	231d      	movs	r3, #29
}
    501e:	0018      	movs	r0, r3
    5020:	46bd      	mov	sp, r7
    5022:	b004      	add	sp, #16
    5024:	bd80      	pop	{r7, pc}
    5026:	46c0      	nop			; (mov r8, r8)
    5028:	200000f4 	.word	0x200000f4
    502c:	00004c4d 	.word	0x00004c4d
    5030:	000078ad 	.word	0x000078ad
    5034:	000078f1 	.word	0x000078f1

00005038 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    5038:	b580      	push	{r7, lr}
    503a:	b082      	sub	sp, #8
    503c:	af00      	add	r7, sp, #0
    503e:	6078      	str	r0, [r7, #4]
    5040:	000a      	movs	r2, r1
    5042:	1cfb      	adds	r3, r7, #3
    5044:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    5046:	687b      	ldr	r3, [r7, #4]
    5048:	4a4d      	ldr	r2, [pc, #308]	; (5180 <_sercom_get_default_pad+0x148>)
    504a:	4293      	cmp	r3, r2
    504c:	d03f      	beq.n	50ce <_sercom_get_default_pad+0x96>
    504e:	4a4c      	ldr	r2, [pc, #304]	; (5180 <_sercom_get_default_pad+0x148>)
    5050:	4293      	cmp	r3, r2
    5052:	d806      	bhi.n	5062 <_sercom_get_default_pad+0x2a>
    5054:	4a4b      	ldr	r2, [pc, #300]	; (5184 <_sercom_get_default_pad+0x14c>)
    5056:	4293      	cmp	r3, r2
    5058:	d00f      	beq.n	507a <_sercom_get_default_pad+0x42>
    505a:	4a4b      	ldr	r2, [pc, #300]	; (5188 <_sercom_get_default_pad+0x150>)
    505c:	4293      	cmp	r3, r2
    505e:	d021      	beq.n	50a4 <_sercom_get_default_pad+0x6c>
    5060:	e089      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5062:	4a4a      	ldr	r2, [pc, #296]	; (518c <_sercom_get_default_pad+0x154>)
    5064:	4293      	cmp	r3, r2
    5066:	d100      	bne.n	506a <_sercom_get_default_pad+0x32>
    5068:	e05b      	b.n	5122 <_sercom_get_default_pad+0xea>
    506a:	4a49      	ldr	r2, [pc, #292]	; (5190 <_sercom_get_default_pad+0x158>)
    506c:	4293      	cmp	r3, r2
    506e:	d100      	bne.n	5072 <_sercom_get_default_pad+0x3a>
    5070:	e06c      	b.n	514c <_sercom_get_default_pad+0x114>
    5072:	4a48      	ldr	r2, [pc, #288]	; (5194 <_sercom_get_default_pad+0x15c>)
    5074:	4293      	cmp	r3, r2
    5076:	d03f      	beq.n	50f8 <_sercom_get_default_pad+0xc0>
    5078:	e07d      	b.n	5176 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    507a:	1cfb      	adds	r3, r7, #3
    507c:	781b      	ldrb	r3, [r3, #0]
    507e:	2b01      	cmp	r3, #1
    5080:	d00a      	beq.n	5098 <_sercom_get_default_pad+0x60>
    5082:	dc02      	bgt.n	508a <_sercom_get_default_pad+0x52>
    5084:	2b00      	cmp	r3, #0
    5086:	d005      	beq.n	5094 <_sercom_get_default_pad+0x5c>
    5088:	e075      	b.n	5176 <_sercom_get_default_pad+0x13e>
    508a:	2b02      	cmp	r3, #2
    508c:	d006      	beq.n	509c <_sercom_get_default_pad+0x64>
    508e:	2b03      	cmp	r3, #3
    5090:	d006      	beq.n	50a0 <_sercom_get_default_pad+0x68>
    5092:	e070      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5094:	4b40      	ldr	r3, [pc, #256]	; (5198 <_sercom_get_default_pad+0x160>)
    5096:	e06f      	b.n	5178 <_sercom_get_default_pad+0x140>
    5098:	4b40      	ldr	r3, [pc, #256]	; (519c <_sercom_get_default_pad+0x164>)
    509a:	e06d      	b.n	5178 <_sercom_get_default_pad+0x140>
    509c:	4b40      	ldr	r3, [pc, #256]	; (51a0 <_sercom_get_default_pad+0x168>)
    509e:	e06b      	b.n	5178 <_sercom_get_default_pad+0x140>
    50a0:	4b40      	ldr	r3, [pc, #256]	; (51a4 <_sercom_get_default_pad+0x16c>)
    50a2:	e069      	b.n	5178 <_sercom_get_default_pad+0x140>
    50a4:	1cfb      	adds	r3, r7, #3
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	2b01      	cmp	r3, #1
    50aa:	d00a      	beq.n	50c2 <_sercom_get_default_pad+0x8a>
    50ac:	dc02      	bgt.n	50b4 <_sercom_get_default_pad+0x7c>
    50ae:	2b00      	cmp	r3, #0
    50b0:	d005      	beq.n	50be <_sercom_get_default_pad+0x86>
    50b2:	e060      	b.n	5176 <_sercom_get_default_pad+0x13e>
    50b4:	2b02      	cmp	r3, #2
    50b6:	d006      	beq.n	50c6 <_sercom_get_default_pad+0x8e>
    50b8:	2b03      	cmp	r3, #3
    50ba:	d006      	beq.n	50ca <_sercom_get_default_pad+0x92>
    50bc:	e05b      	b.n	5176 <_sercom_get_default_pad+0x13e>
    50be:	2303      	movs	r3, #3
    50c0:	e05a      	b.n	5178 <_sercom_get_default_pad+0x140>
    50c2:	4b39      	ldr	r3, [pc, #228]	; (51a8 <_sercom_get_default_pad+0x170>)
    50c4:	e058      	b.n	5178 <_sercom_get_default_pad+0x140>
    50c6:	4b39      	ldr	r3, [pc, #228]	; (51ac <_sercom_get_default_pad+0x174>)
    50c8:	e056      	b.n	5178 <_sercom_get_default_pad+0x140>
    50ca:	4b39      	ldr	r3, [pc, #228]	; (51b0 <_sercom_get_default_pad+0x178>)
    50cc:	e054      	b.n	5178 <_sercom_get_default_pad+0x140>
    50ce:	1cfb      	adds	r3, r7, #3
    50d0:	781b      	ldrb	r3, [r3, #0]
    50d2:	2b01      	cmp	r3, #1
    50d4:	d00a      	beq.n	50ec <_sercom_get_default_pad+0xb4>
    50d6:	dc02      	bgt.n	50de <_sercom_get_default_pad+0xa6>
    50d8:	2b00      	cmp	r3, #0
    50da:	d005      	beq.n	50e8 <_sercom_get_default_pad+0xb0>
    50dc:	e04b      	b.n	5176 <_sercom_get_default_pad+0x13e>
    50de:	2b02      	cmp	r3, #2
    50e0:	d006      	beq.n	50f0 <_sercom_get_default_pad+0xb8>
    50e2:	2b03      	cmp	r3, #3
    50e4:	d006      	beq.n	50f4 <_sercom_get_default_pad+0xbc>
    50e6:	e046      	b.n	5176 <_sercom_get_default_pad+0x13e>
    50e8:	4b32      	ldr	r3, [pc, #200]	; (51b4 <_sercom_get_default_pad+0x17c>)
    50ea:	e045      	b.n	5178 <_sercom_get_default_pad+0x140>
    50ec:	4b32      	ldr	r3, [pc, #200]	; (51b8 <_sercom_get_default_pad+0x180>)
    50ee:	e043      	b.n	5178 <_sercom_get_default_pad+0x140>
    50f0:	4b32      	ldr	r3, [pc, #200]	; (51bc <_sercom_get_default_pad+0x184>)
    50f2:	e041      	b.n	5178 <_sercom_get_default_pad+0x140>
    50f4:	4b32      	ldr	r3, [pc, #200]	; (51c0 <_sercom_get_default_pad+0x188>)
    50f6:	e03f      	b.n	5178 <_sercom_get_default_pad+0x140>
    50f8:	1cfb      	adds	r3, r7, #3
    50fa:	781b      	ldrb	r3, [r3, #0]
    50fc:	2b01      	cmp	r3, #1
    50fe:	d00a      	beq.n	5116 <_sercom_get_default_pad+0xde>
    5100:	dc02      	bgt.n	5108 <_sercom_get_default_pad+0xd0>
    5102:	2b00      	cmp	r3, #0
    5104:	d005      	beq.n	5112 <_sercom_get_default_pad+0xda>
    5106:	e036      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5108:	2b02      	cmp	r3, #2
    510a:	d006      	beq.n	511a <_sercom_get_default_pad+0xe2>
    510c:	2b03      	cmp	r3, #3
    510e:	d006      	beq.n	511e <_sercom_get_default_pad+0xe6>
    5110:	e031      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5112:	4b2c      	ldr	r3, [pc, #176]	; (51c4 <_sercom_get_default_pad+0x18c>)
    5114:	e030      	b.n	5178 <_sercom_get_default_pad+0x140>
    5116:	4b2c      	ldr	r3, [pc, #176]	; (51c8 <_sercom_get_default_pad+0x190>)
    5118:	e02e      	b.n	5178 <_sercom_get_default_pad+0x140>
    511a:	4b2c      	ldr	r3, [pc, #176]	; (51cc <_sercom_get_default_pad+0x194>)
    511c:	e02c      	b.n	5178 <_sercom_get_default_pad+0x140>
    511e:	4b2c      	ldr	r3, [pc, #176]	; (51d0 <_sercom_get_default_pad+0x198>)
    5120:	e02a      	b.n	5178 <_sercom_get_default_pad+0x140>
    5122:	1cfb      	adds	r3, r7, #3
    5124:	781b      	ldrb	r3, [r3, #0]
    5126:	2b01      	cmp	r3, #1
    5128:	d00a      	beq.n	5140 <_sercom_get_default_pad+0x108>
    512a:	dc02      	bgt.n	5132 <_sercom_get_default_pad+0xfa>
    512c:	2b00      	cmp	r3, #0
    512e:	d005      	beq.n	513c <_sercom_get_default_pad+0x104>
    5130:	e021      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5132:	2b02      	cmp	r3, #2
    5134:	d006      	beq.n	5144 <_sercom_get_default_pad+0x10c>
    5136:	2b03      	cmp	r3, #3
    5138:	d006      	beq.n	5148 <_sercom_get_default_pad+0x110>
    513a:	e01c      	b.n	5176 <_sercom_get_default_pad+0x13e>
    513c:	4b25      	ldr	r3, [pc, #148]	; (51d4 <_sercom_get_default_pad+0x19c>)
    513e:	e01b      	b.n	5178 <_sercom_get_default_pad+0x140>
    5140:	4b25      	ldr	r3, [pc, #148]	; (51d8 <_sercom_get_default_pad+0x1a0>)
    5142:	e019      	b.n	5178 <_sercom_get_default_pad+0x140>
    5144:	4b25      	ldr	r3, [pc, #148]	; (51dc <_sercom_get_default_pad+0x1a4>)
    5146:	e017      	b.n	5178 <_sercom_get_default_pad+0x140>
    5148:	4b25      	ldr	r3, [pc, #148]	; (51e0 <_sercom_get_default_pad+0x1a8>)
    514a:	e015      	b.n	5178 <_sercom_get_default_pad+0x140>
    514c:	1cfb      	adds	r3, r7, #3
    514e:	781b      	ldrb	r3, [r3, #0]
    5150:	2b01      	cmp	r3, #1
    5152:	d00a      	beq.n	516a <_sercom_get_default_pad+0x132>
    5154:	dc02      	bgt.n	515c <_sercom_get_default_pad+0x124>
    5156:	2b00      	cmp	r3, #0
    5158:	d005      	beq.n	5166 <_sercom_get_default_pad+0x12e>
    515a:	e00c      	b.n	5176 <_sercom_get_default_pad+0x13e>
    515c:	2b02      	cmp	r3, #2
    515e:	d006      	beq.n	516e <_sercom_get_default_pad+0x136>
    5160:	2b03      	cmp	r3, #3
    5162:	d006      	beq.n	5172 <_sercom_get_default_pad+0x13a>
    5164:	e007      	b.n	5176 <_sercom_get_default_pad+0x13e>
    5166:	4b1f      	ldr	r3, [pc, #124]	; (51e4 <_sercom_get_default_pad+0x1ac>)
    5168:	e006      	b.n	5178 <_sercom_get_default_pad+0x140>
    516a:	4b1f      	ldr	r3, [pc, #124]	; (51e8 <_sercom_get_default_pad+0x1b0>)
    516c:	e004      	b.n	5178 <_sercom_get_default_pad+0x140>
    516e:	4b1f      	ldr	r3, [pc, #124]	; (51ec <_sercom_get_default_pad+0x1b4>)
    5170:	e002      	b.n	5178 <_sercom_get_default_pad+0x140>
    5172:	4b1f      	ldr	r3, [pc, #124]	; (51f0 <_sercom_get_default_pad+0x1b8>)
    5174:	e000      	b.n	5178 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    5176:	2300      	movs	r3, #0
}
    5178:	0018      	movs	r0, r3
    517a:	46bd      	mov	sp, r7
    517c:	b002      	add	sp, #8
    517e:	bd80      	pop	{r7, pc}
    5180:	42001000 	.word	0x42001000
    5184:	42000800 	.word	0x42000800
    5188:	42000c00 	.word	0x42000c00
    518c:	42001800 	.word	0x42001800
    5190:	42001c00 	.word	0x42001c00
    5194:	42001400 	.word	0x42001400
    5198:	00040003 	.word	0x00040003
    519c:	00050003 	.word	0x00050003
    51a0:	00060003 	.word	0x00060003
    51a4:	00070003 	.word	0x00070003
    51a8:	00010003 	.word	0x00010003
    51ac:	001e0003 	.word	0x001e0003
    51b0:	001f0003 	.word	0x001f0003
    51b4:	00080003 	.word	0x00080003
    51b8:	00090003 	.word	0x00090003
    51bc:	000a0003 	.word	0x000a0003
    51c0:	000b0003 	.word	0x000b0003
    51c4:	00100003 	.word	0x00100003
    51c8:	00110003 	.word	0x00110003
    51cc:	00120003 	.word	0x00120003
    51d0:	00130003 	.word	0x00130003
    51d4:	000c0003 	.word	0x000c0003
    51d8:	000d0003 	.word	0x000d0003
    51dc:	000e0003 	.word	0x000e0003
    51e0:	000f0003 	.word	0x000f0003
    51e4:	00160003 	.word	0x00160003
    51e8:	00170003 	.word	0x00170003
    51ec:	00180003 	.word	0x00180003
    51f0:	00190003 	.word	0x00190003

000051f4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    51f4:	b590      	push	{r4, r7, lr}
    51f6:	b08b      	sub	sp, #44	; 0x2c
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    51fc:	230c      	movs	r3, #12
    51fe:	18fb      	adds	r3, r7, r3
    5200:	4a0f      	ldr	r2, [pc, #60]	; (5240 <_sercom_get_sercom_inst_index+0x4c>)
    5202:	ca13      	ldmia	r2!, {r0, r1, r4}
    5204:	c313      	stmia	r3!, {r0, r1, r4}
    5206:	ca13      	ldmia	r2!, {r0, r1, r4}
    5208:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    520a:	2300      	movs	r3, #0
    520c:	627b      	str	r3, [r7, #36]	; 0x24
    520e:	e00e      	b.n	522e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5210:	230c      	movs	r3, #12
    5212:	18fb      	adds	r3, r7, r3
    5214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5216:	0092      	lsls	r2, r2, #2
    5218:	58d3      	ldr	r3, [r2, r3]
    521a:	1e1a      	subs	r2, r3, #0
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	429a      	cmp	r2, r3
    5220:	d102      	bne.n	5228 <_sercom_get_sercom_inst_index+0x34>
			return i;
    5222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5224:	b2db      	uxtb	r3, r3
    5226:	e006      	b.n	5236 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    522a:	3301      	adds	r3, #1
    522c:	627b      	str	r3, [r7, #36]	; 0x24
    522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5230:	2b05      	cmp	r3, #5
    5232:	d9ed      	bls.n	5210 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5234:	2300      	movs	r3, #0
}
    5236:	0018      	movs	r0, r3
    5238:	46bd      	mov	sp, r7
    523a:	b00b      	add	sp, #44	; 0x2c
    523c:	bd90      	pop	{r4, r7, pc}
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	0000e464 	.word	0x0000e464

00005244 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    5244:	b580      	push	{r7, lr}
    5246:	b082      	sub	sp, #8
    5248:	af00      	add	r7, sp, #0
    524a:	0002      	movs	r2, r0
    524c:	1dfb      	adds	r3, r7, #7
    524e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    5250:	46c0      	nop			; (mov r8, r8)
    5252:	46bd      	mov	sp, r7
    5254:	b002      	add	sp, #8
    5256:	bd80      	pop	{r7, pc}

00005258 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5258:	b580      	push	{r7, lr}
    525a:	b084      	sub	sp, #16
    525c:	af00      	add	r7, sp, #0
    525e:	0002      	movs	r2, r0
    5260:	6039      	str	r1, [r7, #0]
    5262:	1dfb      	adds	r3, r7, #7
    5264:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5266:	4b13      	ldr	r3, [pc, #76]	; (52b4 <_sercom_set_handler+0x5c>)
    5268:	781b      	ldrb	r3, [r3, #0]
    526a:	2201      	movs	r2, #1
    526c:	4053      	eors	r3, r2
    526e:	b2db      	uxtb	r3, r3
    5270:	2b00      	cmp	r3, #0
    5272:	d015      	beq.n	52a0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5274:	2300      	movs	r3, #0
    5276:	60fb      	str	r3, [r7, #12]
    5278:	e00c      	b.n	5294 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    527a:	4b0f      	ldr	r3, [pc, #60]	; (52b8 <_sercom_set_handler+0x60>)
    527c:	68fa      	ldr	r2, [r7, #12]
    527e:	0092      	lsls	r2, r2, #2
    5280:	490e      	ldr	r1, [pc, #56]	; (52bc <_sercom_set_handler+0x64>)
    5282:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    5284:	4b0e      	ldr	r3, [pc, #56]	; (52c0 <_sercom_set_handler+0x68>)
    5286:	68fa      	ldr	r2, [r7, #12]
    5288:	0092      	lsls	r2, r2, #2
    528a:	2100      	movs	r1, #0
    528c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    528e:	68fb      	ldr	r3, [r7, #12]
    5290:	3301      	adds	r3, #1
    5292:	60fb      	str	r3, [r7, #12]
    5294:	68fb      	ldr	r3, [r7, #12]
    5296:	2b05      	cmp	r3, #5
    5298:	d9ef      	bls.n	527a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    529a:	4b06      	ldr	r3, [pc, #24]	; (52b4 <_sercom_set_handler+0x5c>)
    529c:	2201      	movs	r2, #1
    529e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    52a0:	1dfb      	adds	r3, r7, #7
    52a2:	781a      	ldrb	r2, [r3, #0]
    52a4:	4b04      	ldr	r3, [pc, #16]	; (52b8 <_sercom_set_handler+0x60>)
    52a6:	0092      	lsls	r2, r2, #2
    52a8:	6839      	ldr	r1, [r7, #0]
    52aa:	50d1      	str	r1, [r2, r3]
}
    52ac:	46c0      	nop			; (mov r8, r8)
    52ae:	46bd      	mov	sp, r7
    52b0:	b004      	add	sp, #16
    52b2:	bd80      	pop	{r7, pc}
    52b4:	200000f6 	.word	0x200000f6
    52b8:	200000f8 	.word	0x200000f8
    52bc:	00005245 	.word	0x00005245
    52c0:	20004634 	.word	0x20004634

000052c4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    52c4:	b590      	push	{r4, r7, lr}
    52c6:	b085      	sub	sp, #20
    52c8:	af00      	add	r7, sp, #0
    52ca:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    52cc:	2308      	movs	r3, #8
    52ce:	18fa      	adds	r2, r7, r3
    52d0:	4b0c      	ldr	r3, [pc, #48]	; (5304 <_sercom_get_interrupt_vector+0x40>)
    52d2:	0010      	movs	r0, r2
    52d4:	0019      	movs	r1, r3
    52d6:	2306      	movs	r3, #6
    52d8:	001a      	movs	r2, r3
    52da:	4b0b      	ldr	r3, [pc, #44]	; (5308 <_sercom_get_interrupt_vector+0x44>)
    52dc:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    52de:	230f      	movs	r3, #15
    52e0:	18fc      	adds	r4, r7, r3
    52e2:	687b      	ldr	r3, [r7, #4]
    52e4:	0018      	movs	r0, r3
    52e6:	4b09      	ldr	r3, [pc, #36]	; (530c <_sercom_get_interrupt_vector+0x48>)
    52e8:	4798      	blx	r3
    52ea:	0003      	movs	r3, r0
    52ec:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    52ee:	230f      	movs	r3, #15
    52f0:	18fb      	adds	r3, r7, r3
    52f2:	781b      	ldrb	r3, [r3, #0]
    52f4:	2208      	movs	r2, #8
    52f6:	18ba      	adds	r2, r7, r2
    52f8:	5cd3      	ldrb	r3, [r2, r3]
    52fa:	b25b      	sxtb	r3, r3
}
    52fc:	0018      	movs	r0, r3
    52fe:	46bd      	mov	sp, r7
    5300:	b005      	add	sp, #20
    5302:	bd90      	pop	{r4, r7, pc}
    5304:	0000e47c 	.word	0x0000e47c
    5308:	0000c011 	.word	0x0000c011
    530c:	000051f5 	.word	0x000051f5

00005310 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5310:	b580      	push	{r7, lr}
    5312:	af00      	add	r7, sp, #0
    5314:	4b03      	ldr	r3, [pc, #12]	; (5324 <SERCOM0_Handler+0x14>)
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	2000      	movs	r0, #0
    531a:	4798      	blx	r3
    531c:	46c0      	nop			; (mov r8, r8)
    531e:	46bd      	mov	sp, r7
    5320:	bd80      	pop	{r7, pc}
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	200000f8 	.word	0x200000f8

00005328 <SERCOM1_Handler>:
    5328:	b580      	push	{r7, lr}
    532a:	af00      	add	r7, sp, #0
    532c:	4b03      	ldr	r3, [pc, #12]	; (533c <SERCOM1_Handler+0x14>)
    532e:	685b      	ldr	r3, [r3, #4]
    5330:	2001      	movs	r0, #1
    5332:	4798      	blx	r3
    5334:	46c0      	nop			; (mov r8, r8)
    5336:	46bd      	mov	sp, r7
    5338:	bd80      	pop	{r7, pc}
    533a:	46c0      	nop			; (mov r8, r8)
    533c:	200000f8 	.word	0x200000f8

00005340 <SERCOM2_Handler>:
    5340:	b580      	push	{r7, lr}
    5342:	af00      	add	r7, sp, #0
    5344:	4b03      	ldr	r3, [pc, #12]	; (5354 <SERCOM2_Handler+0x14>)
    5346:	689b      	ldr	r3, [r3, #8]
    5348:	2002      	movs	r0, #2
    534a:	4798      	blx	r3
    534c:	46c0      	nop			; (mov r8, r8)
    534e:	46bd      	mov	sp, r7
    5350:	bd80      	pop	{r7, pc}
    5352:	46c0      	nop			; (mov r8, r8)
    5354:	200000f8 	.word	0x200000f8

00005358 <SERCOM3_Handler>:
    5358:	b580      	push	{r7, lr}
    535a:	af00      	add	r7, sp, #0
    535c:	4b03      	ldr	r3, [pc, #12]	; (536c <SERCOM3_Handler+0x14>)
    535e:	68db      	ldr	r3, [r3, #12]
    5360:	2003      	movs	r0, #3
    5362:	4798      	blx	r3
    5364:	46c0      	nop			; (mov r8, r8)
    5366:	46bd      	mov	sp, r7
    5368:	bd80      	pop	{r7, pc}
    536a:	46c0      	nop			; (mov r8, r8)
    536c:	200000f8 	.word	0x200000f8

00005370 <SERCOM4_Handler>:
    5370:	b580      	push	{r7, lr}
    5372:	af00      	add	r7, sp, #0
    5374:	4b03      	ldr	r3, [pc, #12]	; (5384 <SERCOM4_Handler+0x14>)
    5376:	691b      	ldr	r3, [r3, #16]
    5378:	2004      	movs	r0, #4
    537a:	4798      	blx	r3
    537c:	46c0      	nop			; (mov r8, r8)
    537e:	46bd      	mov	sp, r7
    5380:	bd80      	pop	{r7, pc}
    5382:	46c0      	nop			; (mov r8, r8)
    5384:	200000f8 	.word	0x200000f8

00005388 <SERCOM5_Handler>:
    5388:	b580      	push	{r7, lr}
    538a:	af00      	add	r7, sp, #0
    538c:	4b03      	ldr	r3, [pc, #12]	; (539c <SERCOM5_Handler+0x14>)
    538e:	695b      	ldr	r3, [r3, #20]
    5390:	2005      	movs	r0, #5
    5392:	4798      	blx	r3
    5394:	46c0      	nop			; (mov r8, r8)
    5396:	46bd      	mov	sp, r7
    5398:	bd80      	pop	{r7, pc}
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	200000f8 	.word	0x200000f8

000053a0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    53a8:	687b      	ldr	r3, [r7, #4]
    53aa:	2280      	movs	r2, #128	; 0x80
    53ac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    53ae:	687b      	ldr	r3, [r7, #4]
    53b0:	2200      	movs	r2, #0
    53b2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	2201      	movs	r2, #1
    53b8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    53ba:	687b      	ldr	r3, [r7, #4]
    53bc:	2200      	movs	r2, #0
    53be:	70da      	strb	r2, [r3, #3]
}
    53c0:	46c0      	nop			; (mov r8, r8)
    53c2:	46bd      	mov	sp, r7
    53c4:	b002      	add	sp, #8
    53c6:	bd80      	pop	{r7, pc}

000053c8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    53c8:	b580      	push	{r7, lr}
    53ca:	b084      	sub	sp, #16
    53cc:	af00      	add	r7, sp, #0
    53ce:	0002      	movs	r2, r0
    53d0:	1dfb      	adds	r3, r7, #7
    53d2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    53d4:	230f      	movs	r3, #15
    53d6:	18fb      	adds	r3, r7, r3
    53d8:	1dfa      	adds	r2, r7, #7
    53da:	7812      	ldrb	r2, [r2, #0]
    53dc:	09d2      	lsrs	r2, r2, #7
    53de:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    53e0:	230e      	movs	r3, #14
    53e2:	18fb      	adds	r3, r7, r3
    53e4:	1dfa      	adds	r2, r7, #7
    53e6:	7812      	ldrb	r2, [r2, #0]
    53e8:	0952      	lsrs	r2, r2, #5
    53ea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    53ec:	4b0d      	ldr	r3, [pc, #52]	; (5424 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    53ee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    53f0:	230f      	movs	r3, #15
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2b00      	cmp	r3, #0
    53f8:	d10f      	bne.n	541a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    53fa:	230f      	movs	r3, #15
    53fc:	18fb      	adds	r3, r7, r3
    53fe:	781b      	ldrb	r3, [r3, #0]
    5400:	009b      	lsls	r3, r3, #2
    5402:	2210      	movs	r2, #16
    5404:	4694      	mov	ip, r2
    5406:	44bc      	add	ip, r7
    5408:	4463      	add	r3, ip
    540a:	3b08      	subs	r3, #8
    540c:	681a      	ldr	r2, [r3, #0]
    540e:	230e      	movs	r3, #14
    5410:	18fb      	adds	r3, r7, r3
    5412:	781b      	ldrb	r3, [r3, #0]
    5414:	01db      	lsls	r3, r3, #7
    5416:	18d3      	adds	r3, r2, r3
    5418:	e000      	b.n	541c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    541a:	2300      	movs	r3, #0
	}
}
    541c:	0018      	movs	r0, r3
    541e:	46bd      	mov	sp, r7
    5420:	b004      	add	sp, #16
    5422:	bd80      	pop	{r7, pc}
    5424:	41004400 	.word	0x41004400

00005428 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5428:	b580      	push	{r7, lr}
    542a:	b082      	sub	sp, #8
    542c:	af00      	add	r7, sp, #0
    542e:	0002      	movs	r2, r0
    5430:	1dfb      	adds	r3, r7, #7
    5432:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5434:	1dfb      	adds	r3, r7, #7
    5436:	781b      	ldrb	r3, [r3, #0]
    5438:	0018      	movs	r0, r3
    543a:	4b03      	ldr	r3, [pc, #12]	; (5448 <port_get_group_from_gpio_pin+0x20>)
    543c:	4798      	blx	r3
    543e:	0003      	movs	r3, r0
}
    5440:	0018      	movs	r0, r3
    5442:	46bd      	mov	sp, r7
    5444:	b002      	add	sp, #8
    5446:	bd80      	pop	{r7, pc}
    5448:	000053c9 	.word	0x000053c9

0000544c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    544c:	b580      	push	{r7, lr}
    544e:	b084      	sub	sp, #16
    5450:	af00      	add	r7, sp, #0
    5452:	0002      	movs	r2, r0
    5454:	1dfb      	adds	r3, r7, #7
    5456:	701a      	strb	r2, [r3, #0]
    5458:	1dbb      	adds	r3, r7, #6
    545a:	1c0a      	adds	r2, r1, #0
    545c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    545e:	1dfb      	adds	r3, r7, #7
    5460:	781b      	ldrb	r3, [r3, #0]
    5462:	0018      	movs	r0, r3
    5464:	4b0d      	ldr	r3, [pc, #52]	; (549c <port_pin_set_output_level+0x50>)
    5466:	4798      	blx	r3
    5468:	0003      	movs	r3, r0
    546a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    546c:	1dfb      	adds	r3, r7, #7
    546e:	781b      	ldrb	r3, [r3, #0]
    5470:	221f      	movs	r2, #31
    5472:	4013      	ands	r3, r2
    5474:	2201      	movs	r2, #1
    5476:	409a      	lsls	r2, r3
    5478:	0013      	movs	r3, r2
    547a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    547c:	1dbb      	adds	r3, r7, #6
    547e:	781b      	ldrb	r3, [r3, #0]
    5480:	2b00      	cmp	r3, #0
    5482:	d003      	beq.n	548c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5484:	68fb      	ldr	r3, [r7, #12]
    5486:	68ba      	ldr	r2, [r7, #8]
    5488:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    548a:	e002      	b.n	5492 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	68ba      	ldr	r2, [r7, #8]
    5490:	615a      	str	r2, [r3, #20]
	}
}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	46bd      	mov	sp, r7
    5496:	b004      	add	sp, #16
    5498:	bd80      	pop	{r7, pc}
    549a:	46c0      	nop			; (mov r8, r8)
    549c:	00005429 	.word	0x00005429

000054a0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    54a0:	b580      	push	{r7, lr}
    54a2:	b082      	sub	sp, #8
    54a4:	af00      	add	r7, sp, #0
    54a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    54a8:	687b      	ldr	r3, [r7, #4]
    54aa:	2200      	movs	r2, #0
    54ac:	701a      	strb	r2, [r3, #0]
}
    54ae:	46c0      	nop			; (mov r8, r8)
    54b0:	46bd      	mov	sp, r7
    54b2:	b002      	add	sp, #8
    54b4:	bd80      	pop	{r7, pc}
    54b6:	46c0      	nop			; (mov r8, r8)

000054b8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    54b8:	b580      	push	{r7, lr}
    54ba:	b082      	sub	sp, #8
    54bc:	af00      	add	r7, sp, #0
    54be:	0002      	movs	r2, r0
    54c0:	6039      	str	r1, [r7, #0]
    54c2:	1dfb      	adds	r3, r7, #7
    54c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    54c6:	1dfb      	adds	r3, r7, #7
    54c8:	781b      	ldrb	r3, [r3, #0]
    54ca:	2b01      	cmp	r3, #1
    54cc:	d00a      	beq.n	54e4 <system_apb_clock_set_mask+0x2c>
    54ce:	2b02      	cmp	r3, #2
    54d0:	d00f      	beq.n	54f2 <system_apb_clock_set_mask+0x3a>
    54d2:	2b00      	cmp	r3, #0
    54d4:	d114      	bne.n	5500 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    54d6:	4b0e      	ldr	r3, [pc, #56]	; (5510 <system_apb_clock_set_mask+0x58>)
    54d8:	4a0d      	ldr	r2, [pc, #52]	; (5510 <system_apb_clock_set_mask+0x58>)
    54da:	6991      	ldr	r1, [r2, #24]
    54dc:	683a      	ldr	r2, [r7, #0]
    54de:	430a      	orrs	r2, r1
    54e0:	619a      	str	r2, [r3, #24]
			break;
    54e2:	e00f      	b.n	5504 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    54e4:	4b0a      	ldr	r3, [pc, #40]	; (5510 <system_apb_clock_set_mask+0x58>)
    54e6:	4a0a      	ldr	r2, [pc, #40]	; (5510 <system_apb_clock_set_mask+0x58>)
    54e8:	69d1      	ldr	r1, [r2, #28]
    54ea:	683a      	ldr	r2, [r7, #0]
    54ec:	430a      	orrs	r2, r1
    54ee:	61da      	str	r2, [r3, #28]
			break;
    54f0:	e008      	b.n	5504 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    54f2:	4b07      	ldr	r3, [pc, #28]	; (5510 <system_apb_clock_set_mask+0x58>)
    54f4:	4a06      	ldr	r2, [pc, #24]	; (5510 <system_apb_clock_set_mask+0x58>)
    54f6:	6a11      	ldr	r1, [r2, #32]
    54f8:	683a      	ldr	r2, [r7, #0]
    54fa:	430a      	orrs	r2, r1
    54fc:	621a      	str	r2, [r3, #32]
			break;
    54fe:	e001      	b.n	5504 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5500:	2317      	movs	r3, #23
    5502:	e000      	b.n	5506 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5504:	2300      	movs	r3, #0
}
    5506:	0018      	movs	r0, r3
    5508:	46bd      	mov	sp, r7
    550a:	b002      	add	sp, #8
    550c:	bd80      	pop	{r7, pc}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	40000400 	.word	0x40000400

00005514 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5514:	b580      	push	{r7, lr}
    5516:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5518:	4b05      	ldr	r3, [pc, #20]	; (5530 <system_is_debugger_present+0x1c>)
    551a:	789b      	ldrb	r3, [r3, #2]
    551c:	b2db      	uxtb	r3, r3
    551e:	001a      	movs	r2, r3
    5520:	2302      	movs	r3, #2
    5522:	4013      	ands	r3, r2
    5524:	1e5a      	subs	r2, r3, #1
    5526:	4193      	sbcs	r3, r2
    5528:	b2db      	uxtb	r3, r3
}
    552a:	0018      	movs	r0, r3
    552c:	46bd      	mov	sp, r7
    552e:	bd80      	pop	{r7, pc}
    5530:	41002000 	.word	0x41002000

00005534 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    5534:	b580      	push	{r7, lr}
    5536:	b084      	sub	sp, #16
    5538:	af00      	add	r7, sp, #0
    553a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	681b      	ldr	r3, [r3, #0]
    5540:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5542:	68fb      	ldr	r3, [r7, #12]
    5544:	7e1b      	ldrb	r3, [r3, #24]
    5546:	b2db      	uxtb	r3, r3
    5548:	001a      	movs	r2, r3
    554a:	2301      	movs	r3, #1
    554c:	4013      	ands	r3, r2
    554e:	1e5a      	subs	r2, r3, #1
    5550:	4193      	sbcs	r3, r2
    5552:	b2db      	uxtb	r3, r3
}
    5554:	0018      	movs	r0, r3
    5556:	46bd      	mov	sp, r7
    5558:	b004      	add	sp, #16
    555a:	bd80      	pop	{r7, pc}

0000555c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    555c:	b580      	push	{r7, lr}
    555e:	b084      	sub	sp, #16
    5560:	af00      	add	r7, sp, #0
    5562:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5564:	687b      	ldr	r3, [r7, #4]
    5566:	681b      	ldr	r3, [r3, #0]
    5568:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    556a:	68fb      	ldr	r3, [r7, #12]
    556c:	7e1b      	ldrb	r3, [r3, #24]
    556e:	b2db      	uxtb	r3, r3
    5570:	001a      	movs	r2, r3
    5572:	2304      	movs	r3, #4
    5574:	4013      	ands	r3, r2
    5576:	1e5a      	subs	r2, r3, #1
    5578:	4193      	sbcs	r3, r2
    557a:	b2db      	uxtb	r3, r3
}
    557c:	0018      	movs	r0, r3
    557e:	46bd      	mov	sp, r7
    5580:	b004      	add	sp, #16
    5582:	bd80      	pop	{r7, pc}

00005584 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    5584:	b580      	push	{r7, lr}
    5586:	b084      	sub	sp, #16
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
    558c:	000a      	movs	r2, r1
    558e:	1cbb      	adds	r3, r7, #2
    5590:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5598:	687b      	ldr	r3, [r7, #4]
    559a:	0018      	movs	r0, r3
    559c:	4b0a      	ldr	r3, [pc, #40]	; (55c8 <spi_write+0x44>)
    559e:	4798      	blx	r3
    55a0:	0003      	movs	r3, r0
    55a2:	001a      	movs	r2, r3
    55a4:	2301      	movs	r3, #1
    55a6:	4053      	eors	r3, r2
    55a8:	b2db      	uxtb	r3, r3
    55aa:	2b00      	cmp	r3, #0
    55ac:	d001      	beq.n	55b2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    55ae:	2305      	movs	r3, #5
    55b0:	e006      	b.n	55c0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    55b2:	1cbb      	adds	r3, r7, #2
    55b4:	881b      	ldrh	r3, [r3, #0]
    55b6:	05db      	lsls	r3, r3, #23
    55b8:	0dda      	lsrs	r2, r3, #23
    55ba:	68fb      	ldr	r3, [r7, #12]
    55bc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    55be:	2300      	movs	r3, #0
}
    55c0:	0018      	movs	r0, r3
    55c2:	46bd      	mov	sp, r7
    55c4:	b004      	add	sp, #16
    55c6:	bd80      	pop	{r7, pc}
    55c8:	00005535 	.word	0x00005535

000055cc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b084      	sub	sp, #16
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
    55d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    55d6:	687b      	ldr	r3, [r7, #4]
    55d8:	681b      	ldr	r3, [r3, #0]
    55da:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	0018      	movs	r0, r3
    55e0:	4b1b      	ldr	r3, [pc, #108]	; (5650 <spi_read+0x84>)
    55e2:	4798      	blx	r3
    55e4:	0003      	movs	r3, r0
    55e6:	001a      	movs	r2, r3
    55e8:	2301      	movs	r3, #1
    55ea:	4053      	eors	r3, r2
    55ec:	b2db      	uxtb	r3, r3
    55ee:	2b00      	cmp	r3, #0
    55f0:	d001      	beq.n	55f6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    55f2:	2310      	movs	r3, #16
    55f4:	e027      	b.n	5646 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    55f6:	230f      	movs	r3, #15
    55f8:	18fb      	adds	r3, r7, r3
    55fa:	2200      	movs	r2, #0
    55fc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    55fe:	68bb      	ldr	r3, [r7, #8]
    5600:	8b5b      	ldrh	r3, [r3, #26]
    5602:	b29b      	uxth	r3, r3
    5604:	001a      	movs	r2, r3
    5606:	2304      	movs	r3, #4
    5608:	4013      	ands	r3, r2
    560a:	d006      	beq.n	561a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    560c:	230f      	movs	r3, #15
    560e:	18fb      	adds	r3, r7, r3
    5610:	221e      	movs	r2, #30
    5612:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5614:	68bb      	ldr	r3, [r7, #8]
    5616:	2204      	movs	r2, #4
    5618:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    561a:	687b      	ldr	r3, [r7, #4]
    561c:	799b      	ldrb	r3, [r3, #6]
    561e:	2b01      	cmp	r3, #1
    5620:	d108      	bne.n	5634 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5622:	68bb      	ldr	r3, [r7, #8]
    5624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5626:	b29b      	uxth	r3, r3
    5628:	05db      	lsls	r3, r3, #23
    562a:	0ddb      	lsrs	r3, r3, #23
    562c:	b29a      	uxth	r2, r3
    562e:	683b      	ldr	r3, [r7, #0]
    5630:	801a      	strh	r2, [r3, #0]
    5632:	e005      	b.n	5640 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5634:	68bb      	ldr	r3, [r7, #8]
    5636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5638:	b2db      	uxtb	r3, r3
    563a:	b29a      	uxth	r2, r3
    563c:	683b      	ldr	r3, [r7, #0]
    563e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    5640:	230f      	movs	r3, #15
    5642:	18fb      	adds	r3, r7, r3
    5644:	781b      	ldrb	r3, [r3, #0]
}
    5646:	0018      	movs	r0, r3
    5648:	46bd      	mov	sp, r7
    564a:	b004      	add	sp, #16
    564c:	bd80      	pop	{r7, pc}
    564e:	46c0      	nop			; (mov r8, r8)
    5650:	0000555d 	.word	0x0000555d

00005654 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    5654:	b590      	push	{r4, r7, lr}
    5656:	b093      	sub	sp, #76	; 0x4c
    5658:	af00      	add	r7, sp, #0
    565a:	6078      	str	r0, [r7, #4]
    565c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    565e:	687b      	ldr	r3, [r7, #4]
    5660:	681b      	ldr	r3, [r3, #0]
    5662:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    5664:	687b      	ldr	r3, [r7, #4]
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    566a:	231c      	movs	r3, #28
    566c:	18fb      	adds	r3, r7, r3
    566e:	0018      	movs	r0, r3
    5670:	4b75      	ldr	r3, [pc, #468]	; (5848 <_spi_set_config+0x1f4>)
    5672:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5674:	231c      	movs	r3, #28
    5676:	18fb      	adds	r3, r7, r3
    5678:	2200      	movs	r2, #0
    567a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    567c:	683b      	ldr	r3, [r7, #0]
    567e:	781b      	ldrb	r3, [r3, #0]
    5680:	2b00      	cmp	r3, #0
    5682:	d103      	bne.n	568c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5684:	231c      	movs	r3, #28
    5686:	18fb      	adds	r3, r7, r3
    5688:	2200      	movs	r2, #0
    568a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    568c:	683b      	ldr	r3, [r7, #0]
    568e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    5690:	230c      	movs	r3, #12
    5692:	18fb      	adds	r3, r7, r3
    5694:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5696:	683b      	ldr	r3, [r7, #0]
    5698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    569a:	230c      	movs	r3, #12
    569c:	18fb      	adds	r3, r7, r3
    569e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    56a0:	683b      	ldr	r3, [r7, #0]
    56a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    56a4:	230c      	movs	r3, #12
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    56aa:	683b      	ldr	r3, [r7, #0]
    56ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    56ae:	230c      	movs	r3, #12
    56b0:	18fb      	adds	r3, r7, r3
    56b2:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    56b4:	2347      	movs	r3, #71	; 0x47
    56b6:	18fb      	adds	r3, r7, r3
    56b8:	2200      	movs	r2, #0
    56ba:	701a      	strb	r2, [r3, #0]
    56bc:	e02c      	b.n	5718 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    56be:	2347      	movs	r3, #71	; 0x47
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	781a      	ldrb	r2, [r3, #0]
    56c4:	230c      	movs	r3, #12
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	0092      	lsls	r2, r2, #2
    56ca:	58d3      	ldr	r3, [r2, r3]
    56cc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    56ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56d0:	2b00      	cmp	r3, #0
    56d2:	d109      	bne.n	56e8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    56d4:	2347      	movs	r3, #71	; 0x47
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	781a      	ldrb	r2, [r3, #0]
    56da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    56dc:	0011      	movs	r1, r2
    56de:	0018      	movs	r0, r3
    56e0:	4b5a      	ldr	r3, [pc, #360]	; (584c <_spi_set_config+0x1f8>)
    56e2:	4798      	blx	r3
    56e4:	0003      	movs	r3, r0
    56e6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    56e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56ea:	3301      	adds	r3, #1
    56ec:	d00d      	beq.n	570a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    56ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56f0:	b2da      	uxtb	r2, r3
    56f2:	231c      	movs	r3, #28
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    56f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56fa:	0c1b      	lsrs	r3, r3, #16
    56fc:	b2db      	uxtb	r3, r3
    56fe:	221c      	movs	r2, #28
    5700:	18ba      	adds	r2, r7, r2
    5702:	0011      	movs	r1, r2
    5704:	0018      	movs	r0, r3
    5706:	4b52      	ldr	r3, [pc, #328]	; (5850 <_spi_set_config+0x1fc>)
    5708:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    570a:	2347      	movs	r3, #71	; 0x47
    570c:	18fb      	adds	r3, r7, r3
    570e:	781a      	ldrb	r2, [r3, #0]
    5710:	2347      	movs	r3, #71	; 0x47
    5712:	18fb      	adds	r3, r7, r3
    5714:	3201      	adds	r2, #1
    5716:	701a      	strb	r2, [r3, #0]
    5718:	2347      	movs	r3, #71	; 0x47
    571a:	18fb      	adds	r3, r7, r3
    571c:	781b      	ldrb	r3, [r3, #0]
    571e:	2b03      	cmp	r3, #3
    5720:	d9cd      	bls.n	56be <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    5722:	683b      	ldr	r3, [r7, #0]
    5724:	781a      	ldrb	r2, [r3, #0]
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    572a:	683b      	ldr	r3, [r7, #0]
    572c:	7c1a      	ldrb	r2, [r3, #16]
    572e:	687b      	ldr	r3, [r7, #4]
    5730:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    5732:	683b      	ldr	r3, [r7, #0]
    5734:	7c9a      	ldrb	r2, [r3, #18]
    5736:	687b      	ldr	r3, [r7, #4]
    5738:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    573a:	683b      	ldr	r3, [r7, #0]
    573c:	7d1a      	ldrb	r2, [r3, #20]
    573e:	687b      	ldr	r3, [r7, #4]
    5740:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5742:	230a      	movs	r3, #10
    5744:	18fb      	adds	r3, r7, r3
    5746:	2200      	movs	r2, #0
    5748:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    574a:	2300      	movs	r3, #0
    574c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    574e:	2300      	movs	r3, #0
    5750:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    5752:	683b      	ldr	r3, [r7, #0]
    5754:	781b      	ldrb	r3, [r3, #0]
    5756:	2b01      	cmp	r3, #1
    5758:	d129      	bne.n	57ae <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    575a:	687b      	ldr	r3, [r7, #4]
    575c:	681b      	ldr	r3, [r3, #0]
    575e:	0018      	movs	r0, r3
    5760:	4b3c      	ldr	r3, [pc, #240]	; (5854 <_spi_set_config+0x200>)
    5762:	4798      	blx	r3
    5764:	0003      	movs	r3, r0
    5766:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    576a:	3314      	adds	r3, #20
    576c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5770:	b2db      	uxtb	r3, r3
    5772:	0018      	movs	r0, r3
    5774:	4b38      	ldr	r3, [pc, #224]	; (5858 <_spi_set_config+0x204>)
    5776:	4798      	blx	r3
    5778:	0003      	movs	r3, r0
    577a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    577c:	683b      	ldr	r3, [r7, #0]
    577e:	699b      	ldr	r3, [r3, #24]
    5780:	2223      	movs	r2, #35	; 0x23
    5782:	18bc      	adds	r4, r7, r2
    5784:	220a      	movs	r2, #10
    5786:	18ba      	adds	r2, r7, r2
    5788:	6a79      	ldr	r1, [r7, #36]	; 0x24
    578a:	0018      	movs	r0, r3
    578c:	4b33      	ldr	r3, [pc, #204]	; (585c <_spi_set_config+0x208>)
    578e:	4798      	blx	r3
    5790:	0003      	movs	r3, r0
    5792:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    5794:	2323      	movs	r3, #35	; 0x23
    5796:	18fb      	adds	r3, r7, r3
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	2b00      	cmp	r3, #0
    579c:	d001      	beq.n	57a2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    579e:	2317      	movs	r3, #23
    57a0:	e04e      	b.n	5840 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    57a2:	230a      	movs	r3, #10
    57a4:	18fb      	adds	r3, r7, r3
    57a6:	881b      	ldrh	r3, [r3, #0]
    57a8:	b2da      	uxtb	r2, r3
    57aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    57ac:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    57ae:	683b      	ldr	r3, [r7, #0]
    57b0:	685b      	ldr	r3, [r3, #4]
    57b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    57b4:	4313      	orrs	r3, r2
    57b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    57b8:	683b      	ldr	r3, [r7, #0]
    57ba:	689b      	ldr	r3, [r3, #8]
    57bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    57be:	4313      	orrs	r3, r2
    57c0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    57c2:	683b      	ldr	r3, [r7, #0]
    57c4:	68db      	ldr	r3, [r3, #12]
    57c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    57c8:	4313      	orrs	r3, r2
    57ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    57cc:	683b      	ldr	r3, [r7, #0]
    57ce:	7c1b      	ldrb	r3, [r3, #16]
    57d0:	001a      	movs	r2, r3
    57d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    57d4:	4313      	orrs	r3, r2
    57d6:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    57d8:	683b      	ldr	r3, [r7, #0]
    57da:	7c5b      	ldrb	r3, [r3, #17]
    57dc:	2b00      	cmp	r3, #0
    57de:	d103      	bne.n	57e8 <_spi_set_config+0x194>
    57e0:	4b1f      	ldr	r3, [pc, #124]	; (5860 <_spi_set_config+0x20c>)
    57e2:	4798      	blx	r3
    57e4:	1e03      	subs	r3, r0, #0
    57e6:	d003      	beq.n	57f0 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    57e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    57ea:	2280      	movs	r2, #128	; 0x80
    57ec:	4313      	orrs	r3, r2
    57ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    57f0:	683b      	ldr	r3, [r7, #0]
    57f2:	7c9b      	ldrb	r3, [r3, #18]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d004      	beq.n	5802 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    57f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    57fa:	2280      	movs	r2, #128	; 0x80
    57fc:	0292      	lsls	r2, r2, #10
    57fe:	4313      	orrs	r3, r2
    5800:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    5802:	683b      	ldr	r3, [r7, #0]
    5804:	7cdb      	ldrb	r3, [r3, #19]
    5806:	2b00      	cmp	r3, #0
    5808:	d004      	beq.n	5814 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    580c:	2280      	movs	r2, #128	; 0x80
    580e:	0092      	lsls	r2, r2, #2
    5810:	4313      	orrs	r3, r2
    5812:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    5814:	683b      	ldr	r3, [r7, #0]
    5816:	7d1b      	ldrb	r3, [r3, #20]
    5818:	2b00      	cmp	r3, #0
    581a:	d004      	beq.n	5826 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    581e:	2280      	movs	r2, #128	; 0x80
    5820:	0192      	lsls	r2, r2, #6
    5822:	4313      	orrs	r3, r2
    5824:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    5826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5828:	681a      	ldr	r2, [r3, #0]
    582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    582c:	431a      	orrs	r2, r3
    582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5830:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    5832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5834:	685a      	ldr	r2, [r3, #4]
    5836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5838:	431a      	orrs	r2, r3
    583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    583c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    583e:	2300      	movs	r3, #0
}
    5840:	0018      	movs	r0, r3
    5842:	46bd      	mov	sp, r7
    5844:	b013      	add	sp, #76	; 0x4c
    5846:	bd90      	pop	{r4, r7, pc}
    5848:	000053a1 	.word	0x000053a1
    584c:	00005039 	.word	0x00005039
    5850:	00007b99 	.word	0x00007b99
    5854:	000051f5 	.word	0x000051f5
    5858:	000079d1 	.word	0x000079d1
    585c:	00004d45 	.word	0x00004d45
    5860:	00005515 	.word	0x00005515

00005864 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5864:	b590      	push	{r4, r7, lr}
    5866:	b08b      	sub	sp, #44	; 0x2c
    5868:	af00      	add	r7, sp, #0
    586a:	60f8      	str	r0, [r7, #12]
    586c:	60b9      	str	r1, [r7, #8]
    586e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5870:	68fb      	ldr	r3, [r7, #12]
    5872:	68ba      	ldr	r2, [r7, #8]
    5874:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    5876:	68fb      	ldr	r3, [r7, #12]
    5878:	681b      	ldr	r3, [r3, #0]
    587a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    587c:	6a3b      	ldr	r3, [r7, #32]
    587e:	681b      	ldr	r3, [r3, #0]
    5880:	2202      	movs	r2, #2
    5882:	4013      	ands	r3, r2
    5884:	d001      	beq.n	588a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    5886:	231c      	movs	r3, #28
    5888:	e09c      	b.n	59c4 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    588a:	6a3b      	ldr	r3, [r7, #32]
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	2201      	movs	r2, #1
    5890:	4013      	ands	r3, r2
    5892:	d001      	beq.n	5898 <spi_init+0x34>
		return STATUS_BUSY;
    5894:	2305      	movs	r3, #5
    5896:	e095      	b.n	59c4 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5898:	68fb      	ldr	r3, [r7, #12]
    589a:	681b      	ldr	r3, [r3, #0]
    589c:	0018      	movs	r0, r3
    589e:	4b4b      	ldr	r3, [pc, #300]	; (59cc <spi_init+0x168>)
    58a0:	4798      	blx	r3
    58a2:	0003      	movs	r3, r0
    58a4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    58a6:	69fb      	ldr	r3, [r7, #28]
    58a8:	3302      	adds	r3, #2
    58aa:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    58ac:	69fb      	ldr	r3, [r7, #28]
    58ae:	3314      	adds	r3, #20
    58b0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    58b2:	2201      	movs	r2, #1
    58b4:	69bb      	ldr	r3, [r7, #24]
    58b6:	409a      	lsls	r2, r3
    58b8:	0013      	movs	r3, r2
    58ba:	0019      	movs	r1, r3
    58bc:	2002      	movs	r0, #2
    58be:	4b44      	ldr	r3, [pc, #272]	; (59d0 <spi_init+0x16c>)
    58c0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    58c2:	2310      	movs	r3, #16
    58c4:	18fb      	adds	r3, r7, r3
    58c6:	0018      	movs	r0, r3
    58c8:	4b42      	ldr	r3, [pc, #264]	; (59d4 <spi_init+0x170>)
    58ca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    58cc:	687b      	ldr	r3, [r7, #4]
    58ce:	2224      	movs	r2, #36	; 0x24
    58d0:	5c9a      	ldrb	r2, [r3, r2]
    58d2:	2310      	movs	r3, #16
    58d4:	18fb      	adds	r3, r7, r3
    58d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    58d8:	697b      	ldr	r3, [r7, #20]
    58da:	b2db      	uxtb	r3, r3
    58dc:	2210      	movs	r2, #16
    58de:	18ba      	adds	r2, r7, r2
    58e0:	0011      	movs	r1, r2
    58e2:	0018      	movs	r0, r3
    58e4:	4b3c      	ldr	r3, [pc, #240]	; (59d8 <spi_init+0x174>)
    58e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    58e8:	697b      	ldr	r3, [r7, #20]
    58ea:	b2db      	uxtb	r3, r3
    58ec:	0018      	movs	r0, r3
    58ee:	4b3b      	ldr	r3, [pc, #236]	; (59dc <spi_init+0x178>)
    58f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    58f2:	687b      	ldr	r3, [r7, #4]
    58f4:	2224      	movs	r2, #36	; 0x24
    58f6:	5c9b      	ldrb	r3, [r3, r2]
    58f8:	2100      	movs	r1, #0
    58fa:	0018      	movs	r0, r3
    58fc:	4b38      	ldr	r3, [pc, #224]	; (59e0 <spi_init+0x17c>)
    58fe:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	781b      	ldrb	r3, [r3, #0]
    5904:	2b01      	cmp	r3, #1
    5906:	d105      	bne.n	5914 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5908:	6a3b      	ldr	r3, [r7, #32]
    590a:	681b      	ldr	r3, [r3, #0]
    590c:	220c      	movs	r2, #12
    590e:	431a      	orrs	r2, r3
    5910:	6a3b      	ldr	r3, [r7, #32]
    5912:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5914:	2327      	movs	r3, #39	; 0x27
    5916:	18fb      	adds	r3, r7, r3
    5918:	2200      	movs	r2, #0
    591a:	701a      	strb	r2, [r3, #0]
    591c:	e010      	b.n	5940 <spi_init+0xdc>
		module->callback[i]        = NULL;
    591e:	2327      	movs	r3, #39	; 0x27
    5920:	18fb      	adds	r3, r7, r3
    5922:	781b      	ldrb	r3, [r3, #0]
    5924:	68fa      	ldr	r2, [r7, #12]
    5926:	3302      	adds	r3, #2
    5928:	009b      	lsls	r3, r3, #2
    592a:	18d3      	adds	r3, r2, r3
    592c:	3304      	adds	r3, #4
    592e:	2200      	movs	r2, #0
    5930:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5932:	2327      	movs	r3, #39	; 0x27
    5934:	18fb      	adds	r3, r7, r3
    5936:	781a      	ldrb	r2, [r3, #0]
    5938:	2327      	movs	r3, #39	; 0x27
    593a:	18fb      	adds	r3, r7, r3
    593c:	3201      	adds	r2, #1
    593e:	701a      	strb	r2, [r3, #0]
    5940:	2327      	movs	r3, #39	; 0x27
    5942:	18fb      	adds	r3, r7, r3
    5944:	781b      	ldrb	r3, [r3, #0]
    5946:	2b06      	cmp	r3, #6
    5948:	d9e9      	bls.n	591e <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    594a:	68fb      	ldr	r3, [r7, #12]
    594c:	2200      	movs	r2, #0
    594e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    5950:	68fb      	ldr	r3, [r7, #12]
    5952:	2200      	movs	r2, #0
    5954:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    5956:	68fb      	ldr	r3, [r7, #12]
    5958:	2200      	movs	r2, #0
    595a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    595c:	68fb      	ldr	r3, [r7, #12]
    595e:	2200      	movs	r2, #0
    5960:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    5962:	68fb      	ldr	r3, [r7, #12]
    5964:	2236      	movs	r2, #54	; 0x36
    5966:	2100      	movs	r1, #0
    5968:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    596a:	68fb      	ldr	r3, [r7, #12]
    596c:	2237      	movs	r2, #55	; 0x37
    596e:	2100      	movs	r1, #0
    5970:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    5972:	68fb      	ldr	r3, [r7, #12]
    5974:	2238      	movs	r2, #56	; 0x38
    5976:	2100      	movs	r1, #0
    5978:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    597a:	68fb      	ldr	r3, [r7, #12]
    597c:	2203      	movs	r2, #3
    597e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    5980:	68fb      	ldr	r3, [r7, #12]
    5982:	2200      	movs	r2, #0
    5984:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    5986:	68fb      	ldr	r3, [r7, #12]
    5988:	681b      	ldr	r3, [r3, #0]
    598a:	2213      	movs	r2, #19
    598c:	18bc      	adds	r4, r7, r2
    598e:	0018      	movs	r0, r3
    5990:	4b0e      	ldr	r3, [pc, #56]	; (59cc <spi_init+0x168>)
    5992:	4798      	blx	r3
    5994:	0003      	movs	r3, r0
    5996:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    5998:	4a12      	ldr	r2, [pc, #72]	; (59e4 <spi_init+0x180>)
    599a:	2313      	movs	r3, #19
    599c:	18fb      	adds	r3, r7, r3
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	0011      	movs	r1, r2
    59a2:	0018      	movs	r0, r3
    59a4:	4b10      	ldr	r3, [pc, #64]	; (59e8 <spi_init+0x184>)
    59a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    59a8:	2313      	movs	r3, #19
    59aa:	18fb      	adds	r3, r7, r3
    59ac:	781a      	ldrb	r2, [r3, #0]
    59ae:	4b0f      	ldr	r3, [pc, #60]	; (59ec <spi_init+0x188>)
    59b0:	0092      	lsls	r2, r2, #2
    59b2:	68f9      	ldr	r1, [r7, #12]
    59b4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    59b6:	687a      	ldr	r2, [r7, #4]
    59b8:	68fb      	ldr	r3, [r7, #12]
    59ba:	0011      	movs	r1, r2
    59bc:	0018      	movs	r0, r3
    59be:	4b0c      	ldr	r3, [pc, #48]	; (59f0 <spi_init+0x18c>)
    59c0:	4798      	blx	r3
    59c2:	0003      	movs	r3, r0
}
    59c4:	0018      	movs	r0, r3
    59c6:	46bd      	mov	sp, r7
    59c8:	b00b      	add	sp, #44	; 0x2c
    59ca:	bd90      	pop	{r4, r7, pc}
    59cc:	000051f5 	.word	0x000051f5
    59d0:	000054b9 	.word	0x000054b9
    59d4:	000054a1 	.word	0x000054a1
    59d8:	000078ad 	.word	0x000078ad
    59dc:	000078f1 	.word	0x000078f1
    59e0:	00004fad 	.word	0x00004fad
    59e4:	00005e59 	.word	0x00005e59
    59e8:	00005259 	.word	0x00005259
    59ec:	20004634 	.word	0x20004634
    59f0:	00005655 	.word	0x00005655

000059f4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    59f4:	b590      	push	{r4, r7, lr}
    59f6:	b087      	sub	sp, #28
    59f8:	af00      	add	r7, sp, #0
    59fa:	60f8      	str	r0, [r7, #12]
    59fc:	60b9      	str	r1, [r7, #8]
    59fe:	0019      	movs	r1, r3
    5a00:	1dbb      	adds	r3, r7, #6
    5a02:	801a      	strh	r2, [r3, #0]
    5a04:	1d3b      	adds	r3, r7, #4
    5a06:	1c0a      	adds	r2, r1, #0
    5a08:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5a0a:	68fb      	ldr	r3, [r7, #12]
    5a0c:	2238      	movs	r2, #56	; 0x38
    5a0e:	5c9b      	ldrb	r3, [r3, r2]
    5a10:	b2db      	uxtb	r3, r3
    5a12:	2b05      	cmp	r3, #5
    5a14:	d101      	bne.n	5a1a <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5a16:	2305      	movs	r3, #5
    5a18:	e07a      	b.n	5b10 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    5a1a:	1dbb      	adds	r3, r7, #6
    5a1c:	881b      	ldrh	r3, [r3, #0]
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d101      	bne.n	5a26 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    5a22:	2317      	movs	r3, #23
    5a24:	e074      	b.n	5b10 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    5a26:	68fb      	ldr	r3, [r7, #12]
    5a28:	79db      	ldrb	r3, [r3, #7]
    5a2a:	2201      	movs	r2, #1
    5a2c:	4053      	eors	r3, r2
    5a2e:	b2db      	uxtb	r3, r3
    5a30:	2b00      	cmp	r3, #0
    5a32:	d001      	beq.n	5a38 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    5a34:	231c      	movs	r3, #28
    5a36:	e06b      	b.n	5b10 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    5a38:	2316      	movs	r3, #22
    5a3a:	18fb      	adds	r3, r7, r3
    5a3c:	2200      	movs	r2, #0
    5a3e:	801a      	strh	r2, [r3, #0]

	while (length--) {
    5a40:	e05e      	b.n	5b00 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    5a42:	68fb      	ldr	r3, [r7, #12]
    5a44:	795b      	ldrb	r3, [r3, #5]
    5a46:	2b01      	cmp	r3, #1
    5a48:	d112      	bne.n	5a70 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    5a4a:	46c0      	nop			; (mov r8, r8)
    5a4c:	68fb      	ldr	r3, [r7, #12]
    5a4e:	0018      	movs	r0, r3
    5a50:	4b31      	ldr	r3, [pc, #196]	; (5b18 <spi_read_buffer_wait+0x124>)
    5a52:	4798      	blx	r3
    5a54:	0003      	movs	r3, r0
    5a56:	001a      	movs	r2, r3
    5a58:	2301      	movs	r3, #1
    5a5a:	4053      	eors	r3, r2
    5a5c:	b2db      	uxtb	r3, r3
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d1f4      	bne.n	5a4c <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    5a62:	1d3b      	adds	r3, r7, #4
    5a64:	881a      	ldrh	r2, [r3, #0]
    5a66:	68fb      	ldr	r3, [r7, #12]
    5a68:	0011      	movs	r1, r2
    5a6a:	0018      	movs	r0, r3
    5a6c:	4b2b      	ldr	r3, [pc, #172]	; (5b1c <spi_read_buffer_wait+0x128>)
    5a6e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    5a70:	46c0      	nop			; (mov r8, r8)
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	0018      	movs	r0, r3
    5a76:	4b2a      	ldr	r3, [pc, #168]	; (5b20 <spi_read_buffer_wait+0x12c>)
    5a78:	4798      	blx	r3
    5a7a:	0003      	movs	r3, r0
    5a7c:	001a      	movs	r2, r3
    5a7e:	2301      	movs	r3, #1
    5a80:	4053      	eors	r3, r2
    5a82:	b2db      	uxtb	r3, r3
    5a84:	2b00      	cmp	r3, #0
    5a86:	d1f4      	bne.n	5a72 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    5a88:	2312      	movs	r3, #18
    5a8a:	18fb      	adds	r3, r7, r3
    5a8c:	2200      	movs	r2, #0
    5a8e:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    5a90:	2315      	movs	r3, #21
    5a92:	18fc      	adds	r4, r7, r3
    5a94:	2312      	movs	r3, #18
    5a96:	18fa      	adds	r2, r7, r3
    5a98:	68fb      	ldr	r3, [r7, #12]
    5a9a:	0011      	movs	r1, r2
    5a9c:	0018      	movs	r0, r3
    5a9e:	4b21      	ldr	r3, [pc, #132]	; (5b24 <spi_read_buffer_wait+0x130>)
    5aa0:	4798      	blx	r3
    5aa2:	0003      	movs	r3, r0
    5aa4:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    5aa6:	2315      	movs	r3, #21
    5aa8:	18fb      	adds	r3, r7, r3
    5aaa:	781b      	ldrb	r3, [r3, #0]
    5aac:	2b00      	cmp	r3, #0
    5aae:	d003      	beq.n	5ab8 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    5ab0:	2315      	movs	r3, #21
    5ab2:	18fb      	adds	r3, r7, r3
    5ab4:	781b      	ldrb	r3, [r3, #0]
    5ab6:	e02b      	b.n	5b10 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    5ab8:	2316      	movs	r3, #22
    5aba:	18fb      	adds	r3, r7, r3
    5abc:	881b      	ldrh	r3, [r3, #0]
    5abe:	2216      	movs	r2, #22
    5ac0:	18ba      	adds	r2, r7, r2
    5ac2:	1c59      	adds	r1, r3, #1
    5ac4:	8011      	strh	r1, [r2, #0]
    5ac6:	001a      	movs	r2, r3
    5ac8:	68bb      	ldr	r3, [r7, #8]
    5aca:	189b      	adds	r3, r3, r2
    5acc:	2212      	movs	r2, #18
    5ace:	18ba      	adds	r2, r7, r2
    5ad0:	8812      	ldrh	r2, [r2, #0]
    5ad2:	b2d2      	uxtb	r2, r2
    5ad4:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5ad6:	68fb      	ldr	r3, [r7, #12]
    5ad8:	799b      	ldrb	r3, [r3, #6]
    5ada:	2b01      	cmp	r3, #1
    5adc:	d110      	bne.n	5b00 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    5ade:	2316      	movs	r3, #22
    5ae0:	18fb      	adds	r3, r7, r3
    5ae2:	881b      	ldrh	r3, [r3, #0]
    5ae4:	2216      	movs	r2, #22
    5ae6:	18ba      	adds	r2, r7, r2
    5ae8:	1c59      	adds	r1, r3, #1
    5aea:	8011      	strh	r1, [r2, #0]
    5aec:	001a      	movs	r2, r3
    5aee:	68bb      	ldr	r3, [r7, #8]
    5af0:	189b      	adds	r3, r3, r2
    5af2:	2212      	movs	r2, #18
    5af4:	18ba      	adds	r2, r7, r2
    5af6:	8812      	ldrh	r2, [r2, #0]
    5af8:	0a12      	lsrs	r2, r2, #8
    5afa:	b292      	uxth	r2, r2
    5afc:	b2d2      	uxtb	r2, r2
    5afe:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    5b00:	1dbb      	adds	r3, r7, #6
    5b02:	881b      	ldrh	r3, [r3, #0]
    5b04:	1dba      	adds	r2, r7, #6
    5b06:	1e59      	subs	r1, r3, #1
    5b08:	8011      	strh	r1, [r2, #0]
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d199      	bne.n	5a42 <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    5b0e:	2300      	movs	r3, #0
}
    5b10:	0018      	movs	r0, r3
    5b12:	46bd      	mov	sp, r7
    5b14:	b007      	add	sp, #28
    5b16:	bd90      	pop	{r4, r7, pc}
    5b18:	00005535 	.word	0x00005535
    5b1c:	00005585 	.word	0x00005585
    5b20:	0000555d 	.word	0x0000555d
    5b24:	000055cd 	.word	0x000055cd

00005b28 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5b28:	b580      	push	{r7, lr}
    5b2a:	b086      	sub	sp, #24
    5b2c:	af00      	add	r7, sp, #0
    5b2e:	60f8      	str	r0, [r7, #12]
    5b30:	60b9      	str	r1, [r7, #8]
    5b32:	1dfb      	adds	r3, r7, #7
    5b34:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5b36:	68fb      	ldr	r3, [r7, #12]
    5b38:	795b      	ldrb	r3, [r3, #5]
    5b3a:	2b01      	cmp	r3, #1
    5b3c:	d001      	beq.n	5b42 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    5b3e:	2315      	movs	r3, #21
    5b40:	e05c      	b.n	5bfc <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    5b42:	68fb      	ldr	r3, [r7, #12]
    5b44:	7a1b      	ldrb	r3, [r3, #8]
    5b46:	2201      	movs	r2, #1
    5b48:	4053      	eors	r3, r2
    5b4a:	b2db      	uxtb	r3, r3
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d054      	beq.n	5bfa <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    5b50:	1dfb      	adds	r3, r7, #7
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	2b00      	cmp	r3, #0
    5b56:	d04a      	beq.n	5bee <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    5b58:	68bb      	ldr	r3, [r7, #8]
    5b5a:	785b      	ldrb	r3, [r3, #1]
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	d03f      	beq.n	5be0 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    5b60:	68fb      	ldr	r3, [r7, #12]
    5b62:	0018      	movs	r0, r3
    5b64:	4b27      	ldr	r3, [pc, #156]	; (5c04 <spi_select_slave+0xdc>)
    5b66:	4798      	blx	r3
    5b68:	0003      	movs	r3, r0
    5b6a:	001a      	movs	r2, r3
    5b6c:	2301      	movs	r3, #1
    5b6e:	4053      	eors	r3, r2
    5b70:	b2db      	uxtb	r3, r3
    5b72:	2b00      	cmp	r3, #0
    5b74:	d007      	beq.n	5b86 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    5b76:	68bb      	ldr	r3, [r7, #8]
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	2101      	movs	r1, #1
    5b7c:	0018      	movs	r0, r3
    5b7e:	4b22      	ldr	r3, [pc, #136]	; (5c08 <spi_select_slave+0xe0>)
    5b80:	4798      	blx	r3
					return STATUS_BUSY;
    5b82:	2305      	movs	r3, #5
    5b84:	e03a      	b.n	5bfc <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    5b86:	68bb      	ldr	r3, [r7, #8]
    5b88:	781b      	ldrb	r3, [r3, #0]
    5b8a:	2100      	movs	r1, #0
    5b8c:	0018      	movs	r0, r3
    5b8e:	4b1e      	ldr	r3, [pc, #120]	; (5c08 <spi_select_slave+0xe0>)
    5b90:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    5b92:	68bb      	ldr	r3, [r7, #8]
    5b94:	789b      	ldrb	r3, [r3, #2]
    5b96:	b29a      	uxth	r2, r3
    5b98:	68fb      	ldr	r3, [r7, #12]
    5b9a:	0011      	movs	r1, r2
    5b9c:	0018      	movs	r0, r3
    5b9e:	4b1b      	ldr	r3, [pc, #108]	; (5c0c <spi_select_slave+0xe4>)
    5ba0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    5ba2:	68fb      	ldr	r3, [r7, #12]
    5ba4:	79db      	ldrb	r3, [r3, #7]
    5ba6:	2201      	movs	r2, #1
    5ba8:	4053      	eors	r3, r2
    5baa:	b2db      	uxtb	r3, r3
    5bac:	2b00      	cmp	r3, #0
    5bae:	d024      	beq.n	5bfa <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    5bb0:	46c0      	nop			; (mov r8, r8)
    5bb2:	68fb      	ldr	r3, [r7, #12]
    5bb4:	0018      	movs	r0, r3
    5bb6:	4b16      	ldr	r3, [pc, #88]	; (5c10 <spi_select_slave+0xe8>)
    5bb8:	4798      	blx	r3
    5bba:	0003      	movs	r3, r0
    5bbc:	001a      	movs	r2, r3
    5bbe:	2301      	movs	r3, #1
    5bc0:	4053      	eors	r3, r2
    5bc2:	b2db      	uxtb	r3, r3
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d1f4      	bne.n	5bb2 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    5bc8:	2316      	movs	r3, #22
    5bca:	18fb      	adds	r3, r7, r3
    5bcc:	2200      	movs	r2, #0
    5bce:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    5bd0:	2316      	movs	r3, #22
    5bd2:	18fa      	adds	r2, r7, r3
    5bd4:	68fb      	ldr	r3, [r7, #12]
    5bd6:	0011      	movs	r1, r2
    5bd8:	0018      	movs	r0, r3
    5bda:	4b0e      	ldr	r3, [pc, #56]	; (5c14 <spi_select_slave+0xec>)
    5bdc:	4798      	blx	r3
    5bde:	e00c      	b.n	5bfa <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    5be0:	68bb      	ldr	r3, [r7, #8]
    5be2:	781b      	ldrb	r3, [r3, #0]
    5be4:	2100      	movs	r1, #0
    5be6:	0018      	movs	r0, r3
    5be8:	4b07      	ldr	r3, [pc, #28]	; (5c08 <spi_select_slave+0xe0>)
    5bea:	4798      	blx	r3
    5bec:	e005      	b.n	5bfa <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    5bee:	68bb      	ldr	r3, [r7, #8]
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	2101      	movs	r1, #1
    5bf4:	0018      	movs	r0, r3
    5bf6:	4b04      	ldr	r3, [pc, #16]	; (5c08 <spi_select_slave+0xe0>)
    5bf8:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    5bfa:	2300      	movs	r3, #0
}
    5bfc:	0018      	movs	r0, r3
    5bfe:	46bd      	mov	sp, r7
    5c00:	b006      	add	sp, #24
    5c02:	bd80      	pop	{r7, pc}
    5c04:	00005535 	.word	0x00005535
    5c08:	0000544d 	.word	0x0000544d
    5c0c:	00005585 	.word	0x00005585
    5c10:	0000555d 	.word	0x0000555d
    5c14:	000055cd 	.word	0x000055cd

00005c18 <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5c18:	b580      	push	{r7, lr}
    5c1a:	b086      	sub	sp, #24
    5c1c:	af00      	add	r7, sp, #0
    5c1e:	60f8      	str	r0, [r7, #12]
    5c20:	60b9      	str	r1, [r7, #8]
    5c22:	1dbb      	adds	r3, r7, #6
    5c24:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5c26:	68fb      	ldr	r3, [r7, #12]
    5c28:	1dba      	adds	r2, r7, #6
    5c2a:	8812      	ldrh	r2, [r2, #0]
    5c2c:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    5c2e:	68fb      	ldr	r3, [r7, #12]
    5c30:	1dba      	adds	r2, r7, #6
    5c32:	8812      	ldrh	r2, [r2, #0]
    5c34:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    5c36:	68fb      	ldr	r3, [r7, #12]
    5c38:	68ba      	ldr	r2, [r7, #8]
    5c3a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    5c3c:	68fb      	ldr	r3, [r7, #12]
    5c3e:	2238      	movs	r2, #56	; 0x38
    5c40:	2105      	movs	r1, #5
    5c42:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    5c44:	68fb      	ldr	r3, [r7, #12]
    5c46:	2201      	movs	r2, #1
    5c48:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    5c4a:	68fb      	ldr	r3, [r7, #12]
    5c4c:	681b      	ldr	r3, [r3, #0]
    5c4e:	617b      	str	r3, [r7, #20]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
	}
#  endif

	if (module->receiver_enabled) {
    5c50:	68fb      	ldr	r3, [r7, #12]
    5c52:	79db      	ldrb	r3, [r3, #7]
    5c54:	2b00      	cmp	r3, #0
    5c56:	d003      	beq.n	5c60 <_spi_write_buffer+0x48>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    5c58:	697b      	ldr	r3, [r7, #20]
    5c5a:	2205      	movs	r2, #5
    5c5c:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    5c5e:	e002      	b.n	5c66 <_spi_write_buffer+0x4e>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5c60:	697b      	ldr	r3, [r7, #20]
    5c62:	2201      	movs	r2, #1
    5c64:	759a      	strb	r2, [r3, #22]
	}
}
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	46bd      	mov	sp, r7
    5c6a:	b006      	add	sp, #24
    5c6c:	bd80      	pop	{r7, pc}
    5c6e:	46c0      	nop			; (mov r8, r8)

00005c70 <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b084      	sub	sp, #16
    5c74:	af00      	add	r7, sp, #0
    5c76:	60f8      	str	r0, [r7, #12]
    5c78:	60b9      	str	r1, [r7, #8]
    5c7a:	1dfb      	adds	r3, r7, #7
    5c7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5c7e:	1dfb      	adds	r3, r7, #7
    5c80:	781b      	ldrb	r3, [r3, #0]
    5c82:	68fa      	ldr	r2, [r7, #12]
    5c84:	3302      	adds	r3, #2
    5c86:	009b      	lsls	r3, r3, #2
    5c88:	18d3      	adds	r3, r2, r3
    5c8a:	3304      	adds	r3, #4
    5c8c:	68ba      	ldr	r2, [r7, #8]
    5c8e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	2236      	movs	r2, #54	; 0x36
    5c94:	5c9b      	ldrb	r3, [r3, r2]
    5c96:	b25a      	sxtb	r2, r3
    5c98:	1dfb      	adds	r3, r7, #7
    5c9a:	781b      	ldrb	r3, [r3, #0]
    5c9c:	2101      	movs	r1, #1
    5c9e:	4099      	lsls	r1, r3
    5ca0:	000b      	movs	r3, r1
    5ca2:	b25b      	sxtb	r3, r3
    5ca4:	4313      	orrs	r3, r2
    5ca6:	b25b      	sxtb	r3, r3
    5ca8:	b2d9      	uxtb	r1, r3
    5caa:	68fb      	ldr	r3, [r7, #12]
    5cac:	2236      	movs	r2, #54	; 0x36
    5cae:	5499      	strb	r1, [r3, r2]
}
    5cb0:	46c0      	nop			; (mov r8, r8)
    5cb2:	46bd      	mov	sp, r7
    5cb4:	b004      	add	sp, #16
    5cb6:	bd80      	pop	{r7, pc}

00005cb8 <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	60f8      	str	r0, [r7, #12]
    5cc0:	60b9      	str	r1, [r7, #8]
    5cc2:	1dbb      	adds	r3, r7, #6
    5cc4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5cc6:	1dbb      	adds	r3, r7, #6
    5cc8:	881b      	ldrh	r3, [r3, #0]
    5cca:	2b00      	cmp	r3, #0
    5ccc:	d101      	bne.n	5cd2 <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5cce:	2317      	movs	r3, #23
    5cd0:	e00f      	b.n	5cf2 <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    5cd2:	68fb      	ldr	r3, [r7, #12]
    5cd4:	2238      	movs	r2, #56	; 0x38
    5cd6:	5c9b      	ldrb	r3, [r3, r2]
    5cd8:	b2db      	uxtb	r3, r3
    5cda:	2b05      	cmp	r3, #5
    5cdc:	d101      	bne.n	5ce2 <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    5cde:	2305      	movs	r3, #5
    5ce0:	e007      	b.n	5cf2 <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    5ce2:	1dbb      	adds	r3, r7, #6
    5ce4:	881a      	ldrh	r2, [r3, #0]
    5ce6:	68b9      	ldr	r1, [r7, #8]
    5ce8:	68fb      	ldr	r3, [r7, #12]
    5cea:	0018      	movs	r0, r3
    5cec:	4b03      	ldr	r3, [pc, #12]	; (5cfc <spi_write_buffer_job+0x44>)
    5cee:	4798      	blx	r3

	return STATUS_OK;
    5cf0:	2300      	movs	r3, #0
}
    5cf2:	0018      	movs	r0, r3
    5cf4:	46bd      	mov	sp, r7
    5cf6:	b004      	add	sp, #16
    5cf8:	bd80      	pop	{r7, pc}
    5cfa:	46c0      	nop			; (mov r8, r8)
    5cfc:	00005c19 	.word	0x00005c19

00005d00 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b084      	sub	sp, #16
    5d04:	af00      	add	r7, sp, #0
    5d06:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5d08:	687b      	ldr	r3, [r7, #4]
    5d0a:	681b      	ldr	r3, [r3, #0]
    5d0c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    5d0e:	687b      	ldr	r3, [r7, #4]
    5d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5d12:	781b      	ldrb	r3, [r3, #0]
    5d14:	b2da      	uxtb	r2, r3
    5d16:	230e      	movs	r3, #14
    5d18:	18fb      	adds	r3, r7, r3
    5d1a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    5d1c:	687b      	ldr	r3, [r7, #4]
    5d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5d20:	1c5a      	adds	r2, r3, #1
    5d22:	687b      	ldr	r3, [r7, #4]
    5d24:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5d26:	687b      	ldr	r3, [r7, #4]
    5d28:	799b      	ldrb	r3, [r3, #6]
    5d2a:	2b01      	cmp	r3, #1
    5d2c:	d113      	bne.n	5d56 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5d32:	781b      	ldrb	r3, [r3, #0]
    5d34:	b2db      	uxtb	r3, r3
    5d36:	021b      	lsls	r3, r3, #8
    5d38:	b21a      	sxth	r2, r3
    5d3a:	230e      	movs	r3, #14
    5d3c:	18fb      	adds	r3, r7, r3
    5d3e:	2100      	movs	r1, #0
    5d40:	5e5b      	ldrsh	r3, [r3, r1]
    5d42:	4313      	orrs	r3, r2
    5d44:	b21a      	sxth	r2, r3
    5d46:	230e      	movs	r3, #14
    5d48:	18fb      	adds	r3, r7, r3
    5d4a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    5d4c:	687b      	ldr	r3, [r7, #4]
    5d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5d50:	1c5a      	adds	r2, r3, #1
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    5d56:	230e      	movs	r3, #14
    5d58:	18fb      	adds	r3, r7, r3
    5d5a:	881b      	ldrh	r3, [r3, #0]
    5d5c:	05db      	lsls	r3, r3, #23
    5d5e:	0dda      	lsrs	r2, r3, #23
    5d60:	68bb      	ldr	r3, [r7, #8]
    5d62:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    5d64:	687b      	ldr	r3, [r7, #4]
    5d66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5d68:	b29b      	uxth	r3, r3
    5d6a:	3b01      	subs	r3, #1
    5d6c:	b29a      	uxth	r2, r3
    5d6e:	687b      	ldr	r3, [r7, #4]
    5d70:	869a      	strh	r2, [r3, #52]	; 0x34
}
    5d72:	46c0      	nop			; (mov r8, r8)
    5d74:	46bd      	mov	sp, r7
    5d76:	b004      	add	sp, #16
    5d78:	bd80      	pop	{r7, pc}
    5d7a:	46c0      	nop			; (mov r8, r8)

00005d7c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    5d7c:	b580      	push	{r7, lr}
    5d7e:	b084      	sub	sp, #16
    5d80:	af00      	add	r7, sp, #0
    5d82:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5d84:	687b      	ldr	r3, [r7, #4]
    5d86:	681b      	ldr	r3, [r3, #0]
    5d88:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    5d8a:	4b08      	ldr	r3, [pc, #32]	; (5dac <_spi_write_dummy+0x30>)
    5d8c:	881b      	ldrh	r3, [r3, #0]
    5d8e:	001a      	movs	r2, r3
    5d90:	68fb      	ldr	r3, [r7, #12]
    5d92:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5d94:	687b      	ldr	r3, [r7, #4]
    5d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5d98:	b29b      	uxth	r3, r3
    5d9a:	3b01      	subs	r3, #1
    5d9c:	b29a      	uxth	r2, r3
    5d9e:	687b      	ldr	r3, [r7, #4]
    5da0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	46bd      	mov	sp, r7
    5da6:	b004      	add	sp, #16
    5da8:	bd80      	pop	{r7, pc}
    5daa:	46c0      	nop			; (mov r8, r8)
    5dac:	2000464c 	.word	0x2000464c

00005db0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    5db0:	b580      	push	{r7, lr}
    5db2:	b084      	sub	sp, #16
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5db8:	687b      	ldr	r3, [r7, #4]
    5dba:	681b      	ldr	r3, [r3, #0]
    5dbc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    5dbe:	230a      	movs	r3, #10
    5dc0:	18fb      	adds	r3, r7, r3
    5dc2:	2200      	movs	r2, #0
    5dc4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    5dc6:	68fb      	ldr	r3, [r7, #12]
    5dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5dca:	230a      	movs	r3, #10
    5dcc:	18fb      	adds	r3, r7, r3
    5dce:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5dd0:	687b      	ldr	r3, [r7, #4]
    5dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5dd4:	b29b      	uxth	r3, r3
    5dd6:	3b01      	subs	r3, #1
    5dd8:	b29a      	uxth	r2, r3
    5dda:	687b      	ldr	r3, [r7, #4]
    5ddc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    5dde:	46c0      	nop			; (mov r8, r8)
    5de0:	46bd      	mov	sp, r7
    5de2:	b004      	add	sp, #16
    5de4:	bd80      	pop	{r7, pc}
    5de6:	46c0      	nop			; (mov r8, r8)

00005de8 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	681b      	ldr	r3, [r3, #0]
    5df4:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5df6:	68fb      	ldr	r3, [r7, #12]
    5df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dfa:	b29a      	uxth	r2, r3
    5dfc:	230a      	movs	r3, #10
    5dfe:	18fb      	adds	r3, r7, r3
    5e00:	05d2      	lsls	r2, r2, #23
    5e02:	0dd2      	lsrs	r2, r2, #23
    5e04:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    5e06:	687b      	ldr	r3, [r7, #4]
    5e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e0a:	220a      	movs	r2, #10
    5e0c:	18ba      	adds	r2, r7, r2
    5e0e:	8812      	ldrh	r2, [r2, #0]
    5e10:	b2d2      	uxtb	r2, r2
    5e12:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    5e14:	687b      	ldr	r3, [r7, #4]
    5e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e18:	1c5a      	adds	r2, r3, #1
    5e1a:	687b      	ldr	r3, [r7, #4]
    5e1c:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	799b      	ldrb	r3, [r3, #6]
    5e22:	2b01      	cmp	r3, #1
    5e24:	d10d      	bne.n	5e42 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    5e26:	687b      	ldr	r3, [r7, #4]
    5e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e2a:	220a      	movs	r2, #10
    5e2c:	18ba      	adds	r2, r7, r2
    5e2e:	8812      	ldrh	r2, [r2, #0]
    5e30:	0a12      	lsrs	r2, r2, #8
    5e32:	b292      	uxth	r2, r2
    5e34:	b2d2      	uxtb	r2, r2
    5e36:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    5e38:	687b      	ldr	r3, [r7, #4]
    5e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e3c:	1c5a      	adds	r2, r3, #1
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    5e42:	687b      	ldr	r3, [r7, #4]
    5e44:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5e46:	b29b      	uxth	r3, r3
    5e48:	3b01      	subs	r3, #1
    5e4a:	b29a      	uxth	r2, r3
    5e4c:	687b      	ldr	r3, [r7, #4]
    5e4e:	861a      	strh	r2, [r3, #48]	; 0x30
}
    5e50:	46c0      	nop			; (mov r8, r8)
    5e52:	46bd      	mov	sp, r7
    5e54:	b004      	add	sp, #16
    5e56:	bd80      	pop	{r7, pc}

00005e58 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b086      	sub	sp, #24
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	0002      	movs	r2, r0
    5e60:	1dfb      	adds	r3, r7, #7
    5e62:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    5e64:	1dfb      	adds	r3, r7, #7
    5e66:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    5e68:	4b96      	ldr	r3, [pc, #600]	; (60c4 <_spi_interrupt_handler+0x26c>)
    5e6a:	0092      	lsls	r2, r2, #2
    5e6c:	58d3      	ldr	r3, [r2, r3]
    5e6e:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5e70:	697b      	ldr	r3, [r7, #20]
    5e72:	681b      	ldr	r3, [r3, #0]
    5e74:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    5e76:	697b      	ldr	r3, [r7, #20]
    5e78:	2237      	movs	r2, #55	; 0x37
    5e7a:	5c9a      	ldrb	r2, [r3, r2]
    5e7c:	697b      	ldr	r3, [r7, #20]
    5e7e:	2136      	movs	r1, #54	; 0x36
    5e80:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    5e82:	230f      	movs	r3, #15
    5e84:	18fb      	adds	r3, r7, r3
    5e86:	400a      	ands	r2, r1
    5e88:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5e8a:	693b      	ldr	r3, [r7, #16]
    5e8c:	7e1b      	ldrb	r3, [r3, #24]
    5e8e:	b2da      	uxtb	r2, r3
    5e90:	230c      	movs	r3, #12
    5e92:	18fb      	adds	r3, r7, r3
    5e94:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    5e96:	693b      	ldr	r3, [r7, #16]
    5e98:	7d9b      	ldrb	r3, [r3, #22]
    5e9a:	b2db      	uxtb	r3, r3
    5e9c:	b29a      	uxth	r2, r3
    5e9e:	230c      	movs	r3, #12
    5ea0:	18fb      	adds	r3, r7, r3
    5ea2:	210c      	movs	r1, #12
    5ea4:	1879      	adds	r1, r7, r1
    5ea6:	8809      	ldrh	r1, [r1, #0]
    5ea8:	400a      	ands	r2, r1
    5eaa:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5eac:	230c      	movs	r3, #12
    5eae:	18fb      	adds	r3, r7, r3
    5eb0:	881b      	ldrh	r3, [r3, #0]
    5eb2:	2201      	movs	r2, #1
    5eb4:	4013      	ands	r3, r2
    5eb6:	d038      	beq.n	5f2a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5eb8:	697b      	ldr	r3, [r7, #20]
    5eba:	795b      	ldrb	r3, [r3, #5]
    5ebc:	2b01      	cmp	r3, #1
    5ebe:	d110      	bne.n	5ee2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    5ec0:	697b      	ldr	r3, [r7, #20]
    5ec2:	7a5b      	ldrb	r3, [r3, #9]
    5ec4:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d10b      	bne.n	5ee2 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    5eca:	697b      	ldr	r3, [r7, #20]
    5ecc:	0018      	movs	r0, r3
    5ece:	4b7e      	ldr	r3, [pc, #504]	; (60c8 <_spi_interrupt_handler+0x270>)
    5ed0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    5ed2:	697b      	ldr	r3, [r7, #20]
    5ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5ed6:	b29b      	uxth	r3, r3
    5ed8:	2b00      	cmp	r3, #0
    5eda:	d102      	bne.n	5ee2 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5edc:	693b      	ldr	r3, [r7, #16]
    5ede:	2201      	movs	r2, #1
    5ee0:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5ee2:	697b      	ldr	r3, [r7, #20]
    5ee4:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    5ee6:	2b01      	cmp	r3, #1
    5ee8:	d11f      	bne.n	5f2a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    5eea:	697b      	ldr	r3, [r7, #20]
    5eec:	7a5b      	ldrb	r3, [r3, #9]
    5eee:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d01a      	beq.n	5f2a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    5ef4:	697b      	ldr	r3, [r7, #20]
    5ef6:	0018      	movs	r0, r3
    5ef8:	4b74      	ldr	r3, [pc, #464]	; (60cc <_spi_interrupt_handler+0x274>)
    5efa:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    5efc:	697b      	ldr	r3, [r7, #20]
    5efe:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5f00:	b29b      	uxth	r3, r3
    5f02:	2b00      	cmp	r3, #0
    5f04:	d111      	bne.n	5f2a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5f06:	693b      	ldr	r3, [r7, #16]
    5f08:	2201      	movs	r2, #1
    5f0a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    5f0c:	697b      	ldr	r3, [r7, #20]
    5f0e:	7a5b      	ldrb	r3, [r3, #9]
    5f10:	b2db      	uxtb	r3, r3
    5f12:	2b01      	cmp	r3, #1
    5f14:	d109      	bne.n	5f2a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    5f16:	697b      	ldr	r3, [r7, #20]
    5f18:	79db      	ldrb	r3, [r3, #7]
    5f1a:	2201      	movs	r2, #1
    5f1c:	4053      	eors	r3, r2
    5f1e:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    5f20:	2b00      	cmp	r3, #0
    5f22:	d002      	beq.n	5f2a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5f24:	693b      	ldr	r3, [r7, #16]
    5f26:	2202      	movs	r2, #2
    5f28:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5f2a:	230c      	movs	r3, #12
    5f2c:	18fb      	adds	r3, r7, r3
    5f2e:	881b      	ldrh	r3, [r3, #0]
    5f30:	2204      	movs	r2, #4
    5f32:	4013      	ands	r3, r2
    5f34:	d100      	bne.n	5f38 <_spi_interrupt_handler+0xe0>
    5f36:	e07e      	b.n	6036 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5f38:	693b      	ldr	r3, [r7, #16]
    5f3a:	8b5b      	ldrh	r3, [r3, #26]
    5f3c:	b29b      	uxth	r3, r3
    5f3e:	001a      	movs	r2, r3
    5f40:	2304      	movs	r3, #4
    5f42:	4013      	ands	r3, r2
    5f44:	d022      	beq.n	5f8c <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    5f46:	697b      	ldr	r3, [r7, #20]
    5f48:	7a5b      	ldrb	r3, [r3, #9]
    5f4a:	b2db      	uxtb	r3, r3
    5f4c:	2b01      	cmp	r3, #1
    5f4e:	d014      	beq.n	5f7a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5f50:	697b      	ldr	r3, [r7, #20]
    5f52:	2238      	movs	r2, #56	; 0x38
    5f54:	211e      	movs	r1, #30
    5f56:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5f58:	697b      	ldr	r3, [r7, #20]
    5f5a:	2203      	movs	r2, #3
    5f5c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    5f5e:	693b      	ldr	r3, [r7, #16]
    5f60:	2205      	movs	r2, #5
    5f62:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5f64:	230f      	movs	r3, #15
    5f66:	18fb      	adds	r3, r7, r3
    5f68:	781b      	ldrb	r3, [r3, #0]
    5f6a:	2208      	movs	r2, #8
    5f6c:	4013      	ands	r3, r2
    5f6e:	d004      	beq.n	5f7a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5f70:	697b      	ldr	r3, [r7, #20]
    5f72:	699b      	ldr	r3, [r3, #24]
    5f74:	697a      	ldr	r2, [r7, #20]
    5f76:	0010      	movs	r0, r2
    5f78:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5f7a:	693b      	ldr	r3, [r7, #16]
    5f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5f7e:	230a      	movs	r3, #10
    5f80:	18fb      	adds	r3, r7, r3
    5f82:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5f84:	693b      	ldr	r3, [r7, #16]
    5f86:	2204      	movs	r2, #4
    5f88:	835a      	strh	r2, [r3, #26]
    5f8a:	e054      	b.n	6036 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5f8c:	697b      	ldr	r3, [r7, #20]
    5f8e:	7a5b      	ldrb	r3, [r3, #9]
    5f90:	b2db      	uxtb	r3, r3
    5f92:	2b01      	cmp	r3, #1
    5f94:	d11e      	bne.n	5fd4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    5f96:	697b      	ldr	r3, [r7, #20]
    5f98:	0018      	movs	r0, r3
    5f9a:	4b4d      	ldr	r3, [pc, #308]	; (60d0 <_spi_interrupt_handler+0x278>)
    5f9c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    5f9e:	697b      	ldr	r3, [r7, #20]
    5fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5fa2:	b29b      	uxth	r3, r3
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d146      	bne.n	6036 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5fa8:	693b      	ldr	r3, [r7, #16]
    5faa:	2204      	movs	r2, #4
    5fac:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    5fae:	697b      	ldr	r3, [r7, #20]
    5fb0:	2238      	movs	r2, #56	; 0x38
    5fb2:	2100      	movs	r1, #0
    5fb4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    5fb6:	697b      	ldr	r3, [r7, #20]
    5fb8:	2203      	movs	r2, #3
    5fba:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5fbc:	230f      	movs	r3, #15
    5fbe:	18fb      	adds	r3, r7, r3
    5fc0:	781b      	ldrb	r3, [r3, #0]
    5fc2:	2201      	movs	r2, #1
    5fc4:	4013      	ands	r3, r2
    5fc6:	d036      	beq.n	6036 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5fc8:	697b      	ldr	r3, [r7, #20]
    5fca:	68db      	ldr	r3, [r3, #12]
    5fcc:	697a      	ldr	r2, [r7, #20]
    5fce:	0010      	movs	r0, r2
    5fd0:	4798      	blx	r3
    5fd2:	e030      	b.n	6036 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5fd4:	697b      	ldr	r3, [r7, #20]
    5fd6:	0018      	movs	r0, r3
    5fd8:	4b3e      	ldr	r3, [pc, #248]	; (60d4 <_spi_interrupt_handler+0x27c>)
    5fda:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5fdc:	697b      	ldr	r3, [r7, #20]
    5fde:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5fe0:	b29b      	uxth	r3, r3
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d127      	bne.n	6036 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    5fe6:	697b      	ldr	r3, [r7, #20]
    5fe8:	2238      	movs	r2, #56	; 0x38
    5fea:	2100      	movs	r1, #0
    5fec:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5fee:	693b      	ldr	r3, [r7, #16]
    5ff0:	2204      	movs	r2, #4
    5ff2:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5ff4:	697b      	ldr	r3, [r7, #20]
    5ff6:	7a5b      	ldrb	r3, [r3, #9]
    5ff8:	b2db      	uxtb	r3, r3
    5ffa:	2b02      	cmp	r3, #2
    5ffc:	d10b      	bne.n	6016 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    5ffe:	230f      	movs	r3, #15
    6000:	18fb      	adds	r3, r7, r3
    6002:	781b      	ldrb	r3, [r3, #0]
    6004:	2204      	movs	r2, #4
    6006:	4013      	ands	r3, r2
    6008:	d015      	beq.n	6036 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    600a:	697b      	ldr	r3, [r7, #20]
    600c:	695b      	ldr	r3, [r3, #20]
    600e:	697a      	ldr	r2, [r7, #20]
    6010:	0010      	movs	r0, r2
    6012:	4798      	blx	r3
    6014:	e00f      	b.n	6036 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    6016:	697b      	ldr	r3, [r7, #20]
    6018:	7a5b      	ldrb	r3, [r3, #9]
    601a:	b2db      	uxtb	r3, r3
    601c:	2b00      	cmp	r3, #0
    601e:	d10a      	bne.n	6036 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    6020:	230f      	movs	r3, #15
    6022:	18fb      	adds	r3, r7, r3
    6024:	781b      	ldrb	r3, [r3, #0]
    6026:	2202      	movs	r2, #2
    6028:	4013      	ands	r3, r2
    602a:	d004      	beq.n	6036 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    602c:	697b      	ldr	r3, [r7, #20]
    602e:	691b      	ldr	r3, [r3, #16]
    6030:	697a      	ldr	r2, [r7, #20]
    6032:	0010      	movs	r0, r2
    6034:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    6036:	230c      	movs	r3, #12
    6038:	18fb      	adds	r3, r7, r3
    603a:	881b      	ldrh	r3, [r3, #0]
    603c:	2202      	movs	r2, #2
    603e:	4013      	ands	r3, r2
    6040:	d024      	beq.n	608c <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6042:	697b      	ldr	r3, [r7, #20]
    6044:	795b      	ldrb	r3, [r3, #5]
    6046:	2b01      	cmp	r3, #1
    6048:	d120      	bne.n	608c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    604a:	697b      	ldr	r3, [r7, #20]
    604c:	7a5b      	ldrb	r3, [r3, #9]
    604e:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6050:	2b01      	cmp	r3, #1
    6052:	d11b      	bne.n	608c <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6054:	697b      	ldr	r3, [r7, #20]
    6056:	79db      	ldrb	r3, [r3, #7]
    6058:	2201      	movs	r2, #1
    605a:	4053      	eors	r3, r2
    605c:	b2db      	uxtb	r3, r3
    605e:	2b00      	cmp	r3, #0
    6060:	d014      	beq.n	608c <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6062:	693b      	ldr	r3, [r7, #16]
    6064:	2202      	movs	r2, #2
    6066:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    6068:	697b      	ldr	r3, [r7, #20]
    606a:	2203      	movs	r2, #3
    606c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    606e:	697b      	ldr	r3, [r7, #20]
    6070:	2238      	movs	r2, #56	; 0x38
    6072:	2100      	movs	r1, #0
    6074:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    6076:	230f      	movs	r3, #15
    6078:	18fb      	adds	r3, r7, r3
    607a:	781b      	ldrb	r3, [r3, #0]
    607c:	2201      	movs	r2, #1
    607e:	4013      	ands	r3, r2
    6080:	d004      	beq.n	608c <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    6082:	697b      	ldr	r3, [r7, #20]
    6084:	68db      	ldr	r3, [r3, #12]
    6086:	697a      	ldr	r2, [r7, #20]
    6088:	0010      	movs	r0, r2
    608a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    608c:	230c      	movs	r3, #12
    608e:	18fb      	adds	r3, r7, r3
    6090:	881b      	ldrh	r3, [r3, #0]
    6092:	2280      	movs	r2, #128	; 0x80
    6094:	4013      	ands	r3, r2
    6096:	d010      	beq.n	60ba <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6098:	693b      	ldr	r3, [r7, #16]
    609a:	2280      	movs	r2, #128	; 0x80
    609c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    609e:	693b      	ldr	r3, [r7, #16]
    60a0:	2280      	movs	r2, #128	; 0x80
    60a2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    60a4:	230f      	movs	r3, #15
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	781b      	ldrb	r3, [r3, #0]
    60aa:	2240      	movs	r2, #64	; 0x40
    60ac:	4013      	ands	r3, r2
    60ae:	d004      	beq.n	60ba <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    60b0:	697b      	ldr	r3, [r7, #20]
    60b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    60b4:	697a      	ldr	r2, [r7, #20]
    60b6:	0010      	movs	r0, r2
    60b8:	4798      	blx	r3
		}
	}
#  endif
}
    60ba:	46c0      	nop			; (mov r8, r8)
    60bc:	46bd      	mov	sp, r7
    60be:	b006      	add	sp, #24
    60c0:	bd80      	pop	{r7, pc}
    60c2:	46c0      	nop			; (mov r8, r8)
    60c4:	20004634 	.word	0x20004634
    60c8:	00005d7d 	.word	0x00005d7d
    60cc:	00005d01 	.word	0x00005d01
    60d0:	00005db1 	.word	0x00005db1
    60d4:	00005de9 	.word	0x00005de9

000060d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    60d8:	b580      	push	{r7, lr}
    60da:	b082      	sub	sp, #8
    60dc:	af00      	add	r7, sp, #0
    60de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    60e0:	687b      	ldr	r3, [r7, #4]
    60e2:	2200      	movs	r2, #0
    60e4:	701a      	strb	r2, [r3, #0]
}
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	46bd      	mov	sp, r7
    60ea:	b002      	add	sp, #8
    60ec:	bd80      	pop	{r7, pc}
    60ee:	46c0      	nop			; (mov r8, r8)

000060f0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    60f0:	b580      	push	{r7, lr}
    60f2:	b082      	sub	sp, #8
    60f4:	af00      	add	r7, sp, #0
    60f6:	0002      	movs	r2, r0
    60f8:	6039      	str	r1, [r7, #0]
    60fa:	1dfb      	adds	r3, r7, #7
    60fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    60fe:	1dfb      	adds	r3, r7, #7
    6100:	781b      	ldrb	r3, [r3, #0]
    6102:	2b01      	cmp	r3, #1
    6104:	d00a      	beq.n	611c <system_apb_clock_set_mask+0x2c>
    6106:	2b02      	cmp	r3, #2
    6108:	d00f      	beq.n	612a <system_apb_clock_set_mask+0x3a>
    610a:	2b00      	cmp	r3, #0
    610c:	d114      	bne.n	6138 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    610e:	4b0e      	ldr	r3, [pc, #56]	; (6148 <system_apb_clock_set_mask+0x58>)
    6110:	4a0d      	ldr	r2, [pc, #52]	; (6148 <system_apb_clock_set_mask+0x58>)
    6112:	6991      	ldr	r1, [r2, #24]
    6114:	683a      	ldr	r2, [r7, #0]
    6116:	430a      	orrs	r2, r1
    6118:	619a      	str	r2, [r3, #24]
			break;
    611a:	e00f      	b.n	613c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    611c:	4b0a      	ldr	r3, [pc, #40]	; (6148 <system_apb_clock_set_mask+0x58>)
    611e:	4a0a      	ldr	r2, [pc, #40]	; (6148 <system_apb_clock_set_mask+0x58>)
    6120:	69d1      	ldr	r1, [r2, #28]
    6122:	683a      	ldr	r2, [r7, #0]
    6124:	430a      	orrs	r2, r1
    6126:	61da      	str	r2, [r3, #28]
			break;
    6128:	e008      	b.n	613c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    612a:	4b07      	ldr	r3, [pc, #28]	; (6148 <system_apb_clock_set_mask+0x58>)
    612c:	4a06      	ldr	r2, [pc, #24]	; (6148 <system_apb_clock_set_mask+0x58>)
    612e:	6a11      	ldr	r1, [r2, #32]
    6130:	683a      	ldr	r2, [r7, #0]
    6132:	430a      	orrs	r2, r1
    6134:	621a      	str	r2, [r3, #32]
			break;
    6136:	e001      	b.n	613c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6138:	2317      	movs	r3, #23
    613a:	e000      	b.n	613e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    613c:	2300      	movs	r3, #0
}
    613e:	0018      	movs	r0, r3
    6140:	46bd      	mov	sp, r7
    6142:	b002      	add	sp, #8
    6144:	bd80      	pop	{r7, pc}
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	40000400 	.word	0x40000400

0000614c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    614c:	b580      	push	{r7, lr}
    614e:	b082      	sub	sp, #8
    6150:	af00      	add	r7, sp, #0
    6152:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	2280      	movs	r2, #128	; 0x80
    6158:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    615a:	687b      	ldr	r3, [r7, #4]
    615c:	2200      	movs	r2, #0
    615e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6160:	687b      	ldr	r3, [r7, #4]
    6162:	2201      	movs	r2, #1
    6164:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6166:	687b      	ldr	r3, [r7, #4]
    6168:	2200      	movs	r2, #0
    616a:	70da      	strb	r2, [r3, #3]
}
    616c:	46c0      	nop			; (mov r8, r8)
    616e:	46bd      	mov	sp, r7
    6170:	b002      	add	sp, #8
    6172:	bd80      	pop	{r7, pc}

00006174 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6174:	b580      	push	{r7, lr}
    6176:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6178:	4b05      	ldr	r3, [pc, #20]	; (6190 <system_is_debugger_present+0x1c>)
    617a:	789b      	ldrb	r3, [r3, #2]
    617c:	b2db      	uxtb	r3, r3
    617e:	001a      	movs	r2, r3
    6180:	2302      	movs	r3, #2
    6182:	4013      	ands	r3, r2
    6184:	1e5a      	subs	r2, r3, #1
    6186:	4193      	sbcs	r3, r2
    6188:	b2db      	uxtb	r3, r3
}
    618a:	0018      	movs	r0, r3
    618c:	46bd      	mov	sp, r7
    618e:	bd80      	pop	{r7, pc}
    6190:	41002000 	.word	0x41002000

00006194 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    6194:	b580      	push	{r7, lr}
    6196:	b084      	sub	sp, #16
    6198:	af00      	add	r7, sp, #0
    619a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	681b      	ldr	r3, [r3, #0]
    61a0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    61a2:	68fb      	ldr	r3, [r7, #12]
    61a4:	69db      	ldr	r3, [r3, #28]
    61a6:	1e5a      	subs	r2, r3, #1
    61a8:	4193      	sbcs	r3, r2
    61aa:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    61ac:	0018      	movs	r0, r3
    61ae:	46bd      	mov	sp, r7
    61b0:	b004      	add	sp, #16
    61b2:	bd80      	pop	{r7, pc}

000061b4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b082      	sub	sp, #8
    61b8:	af00      	add	r7, sp, #0
    61ba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    61bc:	46c0      	nop			; (mov r8, r8)
    61be:	687b      	ldr	r3, [r7, #4]
    61c0:	0018      	movs	r0, r3
    61c2:	4b04      	ldr	r3, [pc, #16]	; (61d4 <_usart_wait_for_sync+0x20>)
    61c4:	4798      	blx	r3
    61c6:	1e03      	subs	r3, r0, #0
    61c8:	d1f9      	bne.n	61be <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    61ca:	46c0      	nop			; (mov r8, r8)
    61cc:	46bd      	mov	sp, r7
    61ce:	b002      	add	sp, #8
    61d0:	bd80      	pop	{r7, pc}
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	00006195 	.word	0x00006195

000061d8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    61d8:	b5b0      	push	{r4, r5, r7, lr}
    61da:	b08c      	sub	sp, #48	; 0x30
    61dc:	af02      	add	r7, sp, #8
    61de:	6078      	str	r0, [r7, #4]
    61e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	681b      	ldr	r3, [r3, #0]
    61e6:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	681b      	ldr	r3, [r3, #0]
    61ec:	0018      	movs	r0, r3
    61ee:	4ba8      	ldr	r3, [pc, #672]	; (6490 <_usart_set_config+0x2b8>)
    61f0:	4798      	blx	r3
    61f2:	0003      	movs	r3, r0
    61f4:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    61f6:	697b      	ldr	r3, [r7, #20]
    61f8:	3314      	adds	r3, #20
    61fa:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    61fc:	2300      	movs	r3, #0
    61fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    6200:	2300      	movs	r3, #0
    6202:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    6204:	230a      	movs	r3, #10
    6206:	18fb      	adds	r3, r7, r3
    6208:	2200      	movs	r2, #0
    620a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    620c:	231f      	movs	r3, #31
    620e:	18fb      	adds	r3, r7, r3
    6210:	2200      	movs	r2, #0
    6212:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6214:	231e      	movs	r3, #30
    6216:	18fb      	adds	r3, r7, r3
    6218:	2210      	movs	r2, #16
    621a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    621c:	683b      	ldr	r3, [r7, #0]
    621e:	8a1b      	ldrh	r3, [r3, #16]
    6220:	2280      	movs	r2, #128	; 0x80
    6222:	01d2      	lsls	r2, r2, #7
    6224:	4293      	cmp	r3, r2
    6226:	d01c      	beq.n	6262 <_usart_set_config+0x8a>
    6228:	2280      	movs	r2, #128	; 0x80
    622a:	01d2      	lsls	r2, r2, #7
    622c:	4293      	cmp	r3, r2
    622e:	dc06      	bgt.n	623e <_usart_set_config+0x66>
    6230:	2b00      	cmp	r3, #0
    6232:	d00d      	beq.n	6250 <_usart_set_config+0x78>
    6234:	2280      	movs	r2, #128	; 0x80
    6236:	0192      	lsls	r2, r2, #6
    6238:	4293      	cmp	r3, r2
    623a:	d024      	beq.n	6286 <_usart_set_config+0xae>
    623c:	e035      	b.n	62aa <_usart_set_config+0xd2>
    623e:	22c0      	movs	r2, #192	; 0xc0
    6240:	01d2      	lsls	r2, r2, #7
    6242:	4293      	cmp	r3, r2
    6244:	d028      	beq.n	6298 <_usart_set_config+0xc0>
    6246:	2280      	movs	r2, #128	; 0x80
    6248:	0212      	lsls	r2, r2, #8
    624a:	4293      	cmp	r3, r2
    624c:	d012      	beq.n	6274 <_usart_set_config+0x9c>
    624e:	e02c      	b.n	62aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6250:	231f      	movs	r3, #31
    6252:	18fb      	adds	r3, r7, r3
    6254:	2200      	movs	r2, #0
    6256:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    6258:	231e      	movs	r3, #30
    625a:	18fb      	adds	r3, r7, r3
    625c:	2210      	movs	r2, #16
    625e:	701a      	strb	r2, [r3, #0]
			break;
    6260:	e023      	b.n	62aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6262:	231f      	movs	r3, #31
    6264:	18fb      	adds	r3, r7, r3
    6266:	2200      	movs	r2, #0
    6268:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    626a:	231e      	movs	r3, #30
    626c:	18fb      	adds	r3, r7, r3
    626e:	2208      	movs	r2, #8
    6270:	701a      	strb	r2, [r3, #0]
			break;
    6272:	e01a      	b.n	62aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6274:	231f      	movs	r3, #31
    6276:	18fb      	adds	r3, r7, r3
    6278:	2200      	movs	r2, #0
    627a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    627c:	231e      	movs	r3, #30
    627e:	18fb      	adds	r3, r7, r3
    6280:	2203      	movs	r2, #3
    6282:	701a      	strb	r2, [r3, #0]
			break;
    6284:	e011      	b.n	62aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6286:	231f      	movs	r3, #31
    6288:	18fb      	adds	r3, r7, r3
    628a:	2201      	movs	r2, #1
    628c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    628e:	231e      	movs	r3, #30
    6290:	18fb      	adds	r3, r7, r3
    6292:	2210      	movs	r2, #16
    6294:	701a      	strb	r2, [r3, #0]
			break;
    6296:	e008      	b.n	62aa <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6298:	231f      	movs	r3, #31
    629a:	18fb      	adds	r3, r7, r3
    629c:	2201      	movs	r2, #1
    629e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    62a0:	231e      	movs	r3, #30
    62a2:	18fb      	adds	r3, r7, r3
    62a4:	2208      	movs	r2, #8
    62a6:	701a      	strb	r2, [r3, #0]
			break;
    62a8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    62aa:	683b      	ldr	r3, [r7, #0]
    62ac:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    62ae:	683b      	ldr	r3, [r7, #0]
    62b0:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    62b2:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    62b4:	683b      	ldr	r3, [r7, #0]
    62b6:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    62b8:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    62ba:	683a      	ldr	r2, [r7, #0]
    62bc:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    62be:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    62c0:	683a      	ldr	r2, [r7, #0]
    62c2:	7e12      	ldrb	r2, [r2, #24]
    62c4:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    62c6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    62c8:	683a      	ldr	r2, [r7, #0]
    62ca:	2126      	movs	r1, #38	; 0x26
    62cc:	5c52      	ldrb	r2, [r2, r1]
    62ce:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    62d0:	4313      	orrs	r3, r2
    62d2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    62d4:	231d      	movs	r3, #29
    62d6:	18fb      	adds	r3, r7, r3
    62d8:	2200      	movs	r2, #0
    62da:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    62dc:	683b      	ldr	r3, [r7, #0]
    62de:	685b      	ldr	r3, [r3, #4]
    62e0:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    62e2:	68fb      	ldr	r3, [r7, #12]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d01e      	beq.n	6326 <_usart_set_config+0x14e>
    62e8:	2280      	movs	r2, #128	; 0x80
    62ea:	0552      	lsls	r2, r2, #21
    62ec:	4293      	cmp	r3, r2
    62ee:	d14f      	bne.n	6390 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    62f0:	683b      	ldr	r3, [r7, #0]
    62f2:	2227      	movs	r2, #39	; 0x27
    62f4:	5c9b      	ldrb	r3, [r3, r2]
    62f6:	2201      	movs	r2, #1
    62f8:	4053      	eors	r3, r2
    62fa:	b2db      	uxtb	r3, r3
    62fc:	2b00      	cmp	r3, #0
    62fe:	d046      	beq.n	638e <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6300:	683b      	ldr	r3, [r7, #0]
    6302:	6a1d      	ldr	r5, [r3, #32]
    6304:	693b      	ldr	r3, [r7, #16]
    6306:	b2db      	uxtb	r3, r3
    6308:	0018      	movs	r0, r3
    630a:	4b62      	ldr	r3, [pc, #392]	; (6494 <_usart_set_config+0x2bc>)
    630c:	4798      	blx	r3
    630e:	0001      	movs	r1, r0
    6310:	231d      	movs	r3, #29
    6312:	18fc      	adds	r4, r7, r3
    6314:	230a      	movs	r3, #10
    6316:	18fb      	adds	r3, r7, r3
    6318:	001a      	movs	r2, r3
    631a:	0028      	movs	r0, r5
    631c:	4b5e      	ldr	r3, [pc, #376]	; (6498 <_usart_set_config+0x2c0>)
    631e:	4798      	blx	r3
    6320:	0003      	movs	r3, r0
    6322:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    6324:	e033      	b.n	638e <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    6326:	683b      	ldr	r3, [r7, #0]
    6328:	2227      	movs	r2, #39	; 0x27
    632a:	5c9b      	ldrb	r3, [r3, r2]
    632c:	2b00      	cmp	r3, #0
    632e:	d014      	beq.n	635a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    6330:	683b      	ldr	r3, [r7, #0]
    6332:	6a18      	ldr	r0, [r3, #32]
    6334:	683b      	ldr	r3, [r7, #0]
    6336:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    6338:	231d      	movs	r3, #29
    633a:	18fc      	adds	r4, r7, r3
    633c:	231f      	movs	r3, #31
    633e:	18fb      	adds	r3, r7, r3
    6340:	781d      	ldrb	r5, [r3, #0]
    6342:	230a      	movs	r3, #10
    6344:	18fa      	adds	r2, r7, r3
    6346:	231e      	movs	r3, #30
    6348:	18fb      	adds	r3, r7, r3
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	9300      	str	r3, [sp, #0]
    634e:	002b      	movs	r3, r5
    6350:	4d52      	ldr	r5, [pc, #328]	; (649c <_usart_set_config+0x2c4>)
    6352:	47a8      	blx	r5
    6354:	0003      	movs	r3, r0
    6356:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    6358:	e01a      	b.n	6390 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    635a:	683b      	ldr	r3, [r7, #0]
    635c:	6a1d      	ldr	r5, [r3, #32]
    635e:	693b      	ldr	r3, [r7, #16]
    6360:	b2db      	uxtb	r3, r3
    6362:	0018      	movs	r0, r3
    6364:	4b4b      	ldr	r3, [pc, #300]	; (6494 <_usart_set_config+0x2bc>)
    6366:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    6368:	231d      	movs	r3, #29
    636a:	18fc      	adds	r4, r7, r3
    636c:	231f      	movs	r3, #31
    636e:	18fb      	adds	r3, r7, r3
    6370:	7819      	ldrb	r1, [r3, #0]
    6372:	230a      	movs	r3, #10
    6374:	18fa      	adds	r2, r7, r3
    6376:	231e      	movs	r3, #30
    6378:	18fb      	adds	r3, r7, r3
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	9300      	str	r3, [sp, #0]
    637e:	000b      	movs	r3, r1
    6380:	0001      	movs	r1, r0
    6382:	0028      	movs	r0, r5
    6384:	4d45      	ldr	r5, [pc, #276]	; (649c <_usart_set_config+0x2c4>)
    6386:	47a8      	blx	r5
    6388:	0003      	movs	r3, r0
    638a:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    638c:	e000      	b.n	6390 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    638e:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    6390:	231d      	movs	r3, #29
    6392:	18fb      	adds	r3, r7, r3
    6394:	781b      	ldrb	r3, [r3, #0]
    6396:	2b00      	cmp	r3, #0
    6398:	d003      	beq.n	63a2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    639a:	231d      	movs	r3, #29
    639c:	18fb      	adds	r3, r7, r3
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	e071      	b.n	6486 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    63a2:	683b      	ldr	r3, [r7, #0]
    63a4:	7e5b      	ldrb	r3, [r3, #25]
    63a6:	2b00      	cmp	r3, #0
    63a8:	d003      	beq.n	63b2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    63aa:	683b      	ldr	r3, [r7, #0]
    63ac:	7e9a      	ldrb	r2, [r3, #26]
    63ae:	69bb      	ldr	r3, [r7, #24]
    63b0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    63b2:	687b      	ldr	r3, [r7, #4]
    63b4:	0018      	movs	r0, r3
    63b6:	4b3a      	ldr	r3, [pc, #232]	; (64a0 <_usart_set_config+0x2c8>)
    63b8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    63ba:	230a      	movs	r3, #10
    63bc:	18fb      	adds	r3, r7, r3
    63be:	881a      	ldrh	r2, [r3, #0]
    63c0:	69bb      	ldr	r3, [r7, #24]
    63c2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    63c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    63c6:	68fb      	ldr	r3, [r7, #12]
    63c8:	4313      	orrs	r3, r2
    63ca:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    63cc:	683b      	ldr	r3, [r7, #0]
    63ce:	2227      	movs	r2, #39	; 0x27
    63d0:	5c9b      	ldrb	r3, [r3, r2]
    63d2:	2201      	movs	r2, #1
    63d4:	4053      	eors	r3, r2
    63d6:	b2db      	uxtb	r3, r3
    63d8:	2b00      	cmp	r3, #0
    63da:	d003      	beq.n	63e4 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    63dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    63de:	2204      	movs	r2, #4
    63e0:	4313      	orrs	r3, r2
    63e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    63e4:	683b      	ldr	r3, [r7, #0]
    63e6:	7e5b      	ldrb	r3, [r3, #25]
    63e8:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    63ea:	683b      	ldr	r3, [r7, #0]
    63ec:	7f1b      	ldrb	r3, [r3, #28]
    63ee:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    63f0:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    63f2:	683b      	ldr	r3, [r7, #0]
    63f4:	7f5b      	ldrb	r3, [r3, #29]
    63f6:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    63f8:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    63fa:	683b      	ldr	r3, [r7, #0]
    63fc:	2124      	movs	r1, #36	; 0x24
    63fe:	5c5b      	ldrb	r3, [r3, r1]
    6400:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    6402:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    6404:	683b      	ldr	r3, [r7, #0]
    6406:	2125      	movs	r1, #37	; 0x25
    6408:	5c5b      	ldrb	r3, [r3, r1]
    640a:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    640c:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    640e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    6410:	683b      	ldr	r3, [r7, #0]
    6412:	7adb      	ldrb	r3, [r3, #11]
    6414:	001a      	movs	r2, r3
    6416:	6a3b      	ldr	r3, [r7, #32]
    6418:	4313      	orrs	r3, r2
    641a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    641c:	683b      	ldr	r3, [r7, #0]
    641e:	891b      	ldrh	r3, [r3, #8]
    6420:	2bff      	cmp	r3, #255	; 0xff
    6422:	d00b      	beq.n	643c <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    6424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6426:	2280      	movs	r2, #128	; 0x80
    6428:	0452      	lsls	r2, r2, #17
    642a:	4313      	orrs	r3, r2
    642c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    642e:	683b      	ldr	r3, [r7, #0]
    6430:	891b      	ldrh	r3, [r3, #8]
    6432:	001a      	movs	r2, r3
    6434:	6a3b      	ldr	r3, [r7, #32]
    6436:	4313      	orrs	r3, r2
    6438:	623b      	str	r3, [r7, #32]
    643a:	e008      	b.n	644e <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    643c:	683b      	ldr	r3, [r7, #0]
    643e:	7edb      	ldrb	r3, [r3, #27]
    6440:	2b00      	cmp	r3, #0
    6442:	d004      	beq.n	644e <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    6444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6446:	2280      	movs	r2, #128	; 0x80
    6448:	04d2      	lsls	r2, r2, #19
    644a:	4313      	orrs	r3, r2
    644c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    644e:	683b      	ldr	r3, [r7, #0]
    6450:	222c      	movs	r2, #44	; 0x2c
    6452:	5c9b      	ldrb	r3, [r3, r2]
    6454:	2b00      	cmp	r3, #0
    6456:	d103      	bne.n	6460 <_usart_set_config+0x288>
    6458:	4b12      	ldr	r3, [pc, #72]	; (64a4 <_usart_set_config+0x2cc>)
    645a:	4798      	blx	r3
    645c:	1e03      	subs	r3, r0, #0
    645e:	d003      	beq.n	6468 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    6460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6462:	2280      	movs	r2, #128	; 0x80
    6464:	4313      	orrs	r3, r2
    6466:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6468:	687b      	ldr	r3, [r7, #4]
    646a:	0018      	movs	r0, r3
    646c:	4b0c      	ldr	r3, [pc, #48]	; (64a0 <_usart_set_config+0x2c8>)
    646e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    6470:	69bb      	ldr	r3, [r7, #24]
    6472:	6a3a      	ldr	r2, [r7, #32]
    6474:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6476:	687b      	ldr	r3, [r7, #4]
    6478:	0018      	movs	r0, r3
    647a:	4b09      	ldr	r3, [pc, #36]	; (64a0 <_usart_set_config+0x2c8>)
    647c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    647e:	69bb      	ldr	r3, [r7, #24]
    6480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    6482:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    6484:	2300      	movs	r3, #0
}
    6486:	0018      	movs	r0, r3
    6488:	46bd      	mov	sp, r7
    648a:	b00a      	add	sp, #40	; 0x28
    648c:	bdb0      	pop	{r4, r5, r7, pc}
    648e:	46c0      	nop			; (mov r8, r8)
    6490:	000051f5 	.word	0x000051f5
    6494:	000079d1 	.word	0x000079d1
    6498:	00004d45 	.word	0x00004d45
    649c:	00004dc1 	.word	0x00004dc1
    64a0:	000061b5 	.word	0x000061b5
    64a4:	00006175 	.word	0x00006175

000064a8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    64a8:	b590      	push	{r4, r7, lr}
    64aa:	b093      	sub	sp, #76	; 0x4c
    64ac:	af00      	add	r7, sp, #0
    64ae:	60f8      	str	r0, [r7, #12]
    64b0:	60b9      	str	r1, [r7, #8]
    64b2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    64b4:	233b      	movs	r3, #59	; 0x3b
    64b6:	18fb      	adds	r3, r7, r3
    64b8:	2200      	movs	r2, #0
    64ba:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    64bc:	68fb      	ldr	r3, [r7, #12]
    64be:	68ba      	ldr	r2, [r7, #8]
    64c0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    64c2:	68fb      	ldr	r3, [r7, #12]
    64c4:	681b      	ldr	r3, [r3, #0]
    64c6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    64c8:	68fb      	ldr	r3, [r7, #12]
    64ca:	681b      	ldr	r3, [r3, #0]
    64cc:	0018      	movs	r0, r3
    64ce:	4b86      	ldr	r3, [pc, #536]	; (66e8 <usart_init+0x240>)
    64d0:	4798      	blx	r3
    64d2:	0003      	movs	r3, r0
    64d4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    64d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    64d8:	3302      	adds	r3, #2
    64da:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    64dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    64de:	3314      	adds	r3, #20
    64e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    64e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	2201      	movs	r2, #1
    64e8:	4013      	ands	r3, r2
    64ea:	d001      	beq.n	64f0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    64ec:	2305      	movs	r3, #5
    64ee:	e0f6      	b.n	66de <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    64f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    64f2:	681b      	ldr	r3, [r3, #0]
    64f4:	2202      	movs	r2, #2
    64f6:	4013      	ands	r3, r2
    64f8:	d001      	beq.n	64fe <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    64fa:	231c      	movs	r3, #28
    64fc:	e0ef      	b.n	66de <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    64fe:	2201      	movs	r2, #1
    6500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6502:	409a      	lsls	r2, r3
    6504:	0013      	movs	r3, r2
    6506:	0019      	movs	r1, r3
    6508:	2002      	movs	r0, #2
    650a:	4b78      	ldr	r3, [pc, #480]	; (66ec <usart_init+0x244>)
    650c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    650e:	2324      	movs	r3, #36	; 0x24
    6510:	18fb      	adds	r3, r7, r3
    6512:	0018      	movs	r0, r3
    6514:	4b76      	ldr	r3, [pc, #472]	; (66f0 <usart_init+0x248>)
    6516:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6518:	687b      	ldr	r3, [r7, #4]
    651a:	222d      	movs	r2, #45	; 0x2d
    651c:	5c9a      	ldrb	r2, [r3, r2]
    651e:	2324      	movs	r3, #36	; 0x24
    6520:	18fb      	adds	r3, r7, r3
    6522:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6524:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6526:	b2db      	uxtb	r3, r3
    6528:	2224      	movs	r2, #36	; 0x24
    652a:	18ba      	adds	r2, r7, r2
    652c:	0011      	movs	r1, r2
    652e:	0018      	movs	r0, r3
    6530:	4b70      	ldr	r3, [pc, #448]	; (66f4 <usart_init+0x24c>)
    6532:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6534:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6536:	b2db      	uxtb	r3, r3
    6538:	0018      	movs	r0, r3
    653a:	4b6f      	ldr	r3, [pc, #444]	; (66f8 <usart_init+0x250>)
    653c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    653e:	687b      	ldr	r3, [r7, #4]
    6540:	222d      	movs	r2, #45	; 0x2d
    6542:	5c9b      	ldrb	r3, [r3, r2]
    6544:	2100      	movs	r1, #0
    6546:	0018      	movs	r0, r3
    6548:	4b6c      	ldr	r3, [pc, #432]	; (66fc <usart_init+0x254>)
    654a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    654c:	687b      	ldr	r3, [r7, #4]
    654e:	7ada      	ldrb	r2, [r3, #11]
    6550:	68fb      	ldr	r3, [r7, #12]
    6552:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    6554:	687b      	ldr	r3, [r7, #4]
    6556:	2224      	movs	r2, #36	; 0x24
    6558:	5c9a      	ldrb	r2, [r3, r2]
    655a:	68fb      	ldr	r3, [r7, #12]
    655c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    655e:	687b      	ldr	r3, [r7, #4]
    6560:	2225      	movs	r2, #37	; 0x25
    6562:	5c9a      	ldrb	r2, [r3, r2]
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    6568:	687b      	ldr	r3, [r7, #4]
    656a:	7eda      	ldrb	r2, [r3, #27]
    656c:	68fb      	ldr	r3, [r7, #12]
    656e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    6570:	687b      	ldr	r3, [r7, #4]
    6572:	7f1a      	ldrb	r2, [r3, #28]
    6574:	68fb      	ldr	r3, [r7, #12]
    6576:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    6578:	233b      	movs	r3, #59	; 0x3b
    657a:	18fc      	adds	r4, r7, r3
    657c:	687a      	ldr	r2, [r7, #4]
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	0011      	movs	r1, r2
    6582:	0018      	movs	r0, r3
    6584:	4b5e      	ldr	r3, [pc, #376]	; (6700 <usart_init+0x258>)
    6586:	4798      	blx	r3
    6588:	0003      	movs	r3, r0
    658a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    658c:	233b      	movs	r3, #59	; 0x3b
    658e:	18fb      	adds	r3, r7, r3
    6590:	781b      	ldrb	r3, [r3, #0]
    6592:	2b00      	cmp	r3, #0
    6594:	d003      	beq.n	659e <usart_init+0xf6>
		return status_code;
    6596:	233b      	movs	r3, #59	; 0x3b
    6598:	18fb      	adds	r3, r7, r3
    659a:	781b      	ldrb	r3, [r3, #0]
    659c:	e09f      	b.n	66de <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    659e:	2320      	movs	r3, #32
    65a0:	18fb      	adds	r3, r7, r3
    65a2:	0018      	movs	r0, r3
    65a4:	4b57      	ldr	r3, [pc, #348]	; (6704 <usart_init+0x25c>)
    65a6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    65a8:	2320      	movs	r3, #32
    65aa:	18fb      	adds	r3, r7, r3
    65ac:	2200      	movs	r2, #0
    65ae:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    65b0:	2320      	movs	r3, #32
    65b2:	18fb      	adds	r3, r7, r3
    65b4:	2200      	movs	r2, #0
    65b6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    65b8:	687b      	ldr	r3, [r7, #4]
    65ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    65bc:	2310      	movs	r3, #16
    65be:	18fb      	adds	r3, r7, r3
    65c0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    65c2:	687b      	ldr	r3, [r7, #4]
    65c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    65c6:	2310      	movs	r3, #16
    65c8:	18fb      	adds	r3, r7, r3
    65ca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    65cc:	687b      	ldr	r3, [r7, #4]
    65ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    65d0:	2310      	movs	r3, #16
    65d2:	18fb      	adds	r3, r7, r3
    65d4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    65d6:	687b      	ldr	r3, [r7, #4]
    65d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    65da:	2310      	movs	r3, #16
    65dc:	18fb      	adds	r3, r7, r3
    65de:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    65e0:	2347      	movs	r3, #71	; 0x47
    65e2:	18fb      	adds	r3, r7, r3
    65e4:	2200      	movs	r2, #0
    65e6:	701a      	strb	r2, [r3, #0]
    65e8:	e02c      	b.n	6644 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    65ea:	2347      	movs	r3, #71	; 0x47
    65ec:	18fb      	adds	r3, r7, r3
    65ee:	781a      	ldrb	r2, [r3, #0]
    65f0:	2310      	movs	r3, #16
    65f2:	18fb      	adds	r3, r7, r3
    65f4:	0092      	lsls	r2, r2, #2
    65f6:	58d3      	ldr	r3, [r2, r3]
    65f8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    65fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    65fc:	2b00      	cmp	r3, #0
    65fe:	d109      	bne.n	6614 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6600:	2347      	movs	r3, #71	; 0x47
    6602:	18fb      	adds	r3, r7, r3
    6604:	781a      	ldrb	r2, [r3, #0]
    6606:	68bb      	ldr	r3, [r7, #8]
    6608:	0011      	movs	r1, r2
    660a:	0018      	movs	r0, r3
    660c:	4b3e      	ldr	r3, [pc, #248]	; (6708 <usart_init+0x260>)
    660e:	4798      	blx	r3
    6610:	0003      	movs	r3, r0
    6612:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6616:	3301      	adds	r3, #1
    6618:	d00d      	beq.n	6636 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    661c:	b2da      	uxtb	r2, r3
    661e:	2320      	movs	r3, #32
    6620:	18fb      	adds	r3, r7, r3
    6622:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6626:	0c1b      	lsrs	r3, r3, #16
    6628:	b2db      	uxtb	r3, r3
    662a:	2220      	movs	r2, #32
    662c:	18ba      	adds	r2, r7, r2
    662e:	0011      	movs	r1, r2
    6630:	0018      	movs	r0, r3
    6632:	4b36      	ldr	r3, [pc, #216]	; (670c <usart_init+0x264>)
    6634:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    6636:	2347      	movs	r3, #71	; 0x47
    6638:	18fb      	adds	r3, r7, r3
    663a:	781a      	ldrb	r2, [r3, #0]
    663c:	2347      	movs	r3, #71	; 0x47
    663e:	18fb      	adds	r3, r7, r3
    6640:	3201      	adds	r2, #1
    6642:	701a      	strb	r2, [r3, #0]
    6644:	2347      	movs	r3, #71	; 0x47
    6646:	18fb      	adds	r3, r7, r3
    6648:	781b      	ldrb	r3, [r3, #0]
    664a:	2b03      	cmp	r3, #3
    664c:	d9cd      	bls.n	65ea <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    664e:	2300      	movs	r3, #0
    6650:	63fb      	str	r3, [r7, #60]	; 0x3c
    6652:	e00a      	b.n	666a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    6654:	68fa      	ldr	r2, [r7, #12]
    6656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6658:	3302      	adds	r3, #2
    665a:	009b      	lsls	r3, r3, #2
    665c:	18d3      	adds	r3, r2, r3
    665e:	3304      	adds	r3, #4
    6660:	2200      	movs	r2, #0
    6662:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    6664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6666:	3301      	adds	r3, #1
    6668:	63fb      	str	r3, [r7, #60]	; 0x3c
    666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    666c:	2b05      	cmp	r3, #5
    666e:	d9f1      	bls.n	6654 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    6670:	68fb      	ldr	r3, [r7, #12]
    6672:	2200      	movs	r2, #0
    6674:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    6676:	68fb      	ldr	r3, [r7, #12]
    6678:	2200      	movs	r2, #0
    667a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	2200      	movs	r2, #0
    6680:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6682:	68fb      	ldr	r3, [r7, #12]
    6684:	2200      	movs	r2, #0
    6686:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	2230      	movs	r2, #48	; 0x30
    668c:	2100      	movs	r1, #0
    668e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    6690:	68fb      	ldr	r3, [r7, #12]
    6692:	2231      	movs	r2, #49	; 0x31
    6694:	2100      	movs	r1, #0
    6696:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    6698:	68fb      	ldr	r3, [r7, #12]
    669a:	2232      	movs	r2, #50	; 0x32
    669c:	2100      	movs	r1, #0
    669e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    66a0:	68fb      	ldr	r3, [r7, #12]
    66a2:	2233      	movs	r2, #51	; 0x33
    66a4:	2100      	movs	r1, #0
    66a6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    66a8:	68fb      	ldr	r3, [r7, #12]
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	2227      	movs	r2, #39	; 0x27
    66ae:	18bc      	adds	r4, r7, r2
    66b0:	0018      	movs	r0, r3
    66b2:	4b0d      	ldr	r3, [pc, #52]	; (66e8 <usart_init+0x240>)
    66b4:	4798      	blx	r3
    66b6:	0003      	movs	r3, r0
    66b8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    66ba:	4a15      	ldr	r2, [pc, #84]	; (6710 <usart_init+0x268>)
    66bc:	2327      	movs	r3, #39	; 0x27
    66be:	18fb      	adds	r3, r7, r3
    66c0:	781b      	ldrb	r3, [r3, #0]
    66c2:	0011      	movs	r1, r2
    66c4:	0018      	movs	r0, r3
    66c6:	4b13      	ldr	r3, [pc, #76]	; (6714 <usart_init+0x26c>)
    66c8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    66ca:	2327      	movs	r3, #39	; 0x27
    66cc:	18fb      	adds	r3, r7, r3
    66ce:	781a      	ldrb	r2, [r3, #0]
    66d0:	4b11      	ldr	r3, [pc, #68]	; (6718 <usart_init+0x270>)
    66d2:	0092      	lsls	r2, r2, #2
    66d4:	68f9      	ldr	r1, [r7, #12]
    66d6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    66d8:	233b      	movs	r3, #59	; 0x3b
    66da:	18fb      	adds	r3, r7, r3
    66dc:	781b      	ldrb	r3, [r3, #0]
}
    66de:	0018      	movs	r0, r3
    66e0:	46bd      	mov	sp, r7
    66e2:	b013      	add	sp, #76	; 0x4c
    66e4:	bd90      	pop	{r4, r7, pc}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	000051f5 	.word	0x000051f5
    66ec:	000060f1 	.word	0x000060f1
    66f0:	000060d9 	.word	0x000060d9
    66f4:	000078ad 	.word	0x000078ad
    66f8:	000078f1 	.word	0x000078f1
    66fc:	00004fad 	.word	0x00004fad
    6700:	000061d9 	.word	0x000061d9
    6704:	0000614d 	.word	0x0000614d
    6708:	00005039 	.word	0x00005039
    670c:	00007b99 	.word	0x00007b99
    6710:	000068b1 	.word	0x000068b1
    6714:	00005259 	.word	0x00005259
    6718:	20004634 	.word	0x20004634

0000671c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    671c:	b580      	push	{r7, lr}
    671e:	b084      	sub	sp, #16
    6720:	af00      	add	r7, sp, #0
    6722:	6078      	str	r0, [r7, #4]
    6724:	000a      	movs	r2, r1
    6726:	1cbb      	adds	r3, r7, #2
    6728:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    672a:	687b      	ldr	r3, [r7, #4]
    672c:	681b      	ldr	r3, [r3, #0]
    672e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	79db      	ldrb	r3, [r3, #7]
    6734:	2201      	movs	r2, #1
    6736:	4053      	eors	r3, r2
    6738:	b2db      	uxtb	r3, r3
    673a:	2b00      	cmp	r3, #0
    673c:	d001      	beq.n	6742 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    673e:	231c      	movs	r3, #28
    6740:	e017      	b.n	6772 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6746:	b29b      	uxth	r3, r3
    6748:	2b00      	cmp	r3, #0
    674a:	d001      	beq.n	6750 <usart_write_wait+0x34>
		return STATUS_BUSY;
    674c:	2305      	movs	r3, #5
    674e:	e010      	b.n	6772 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    6750:	687b      	ldr	r3, [r7, #4]
    6752:	0018      	movs	r0, r3
    6754:	4b09      	ldr	r3, [pc, #36]	; (677c <usart_write_wait+0x60>)
    6756:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    6758:	68fb      	ldr	r3, [r7, #12]
    675a:	1cba      	adds	r2, r7, #2
    675c:	8812      	ldrh	r2, [r2, #0]
    675e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6760:	46c0      	nop			; (mov r8, r8)
    6762:	68fb      	ldr	r3, [r7, #12]
    6764:	7e1b      	ldrb	r3, [r3, #24]
    6766:	b2db      	uxtb	r3, r3
    6768:	001a      	movs	r2, r3
    676a:	2302      	movs	r3, #2
    676c:	4013      	ands	r3, r2
    676e:	d0f8      	beq.n	6762 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    6770:	2300      	movs	r3, #0
}
    6772:	0018      	movs	r0, r3
    6774:	46bd      	mov	sp, r7
    6776:	b004      	add	sp, #16
    6778:	bd80      	pop	{r7, pc}
    677a:	46c0      	nop			; (mov r8, r8)
    677c:	000061b5 	.word	0x000061b5

00006780 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    6780:	b580      	push	{r7, lr}
    6782:	b084      	sub	sp, #16
    6784:	af00      	add	r7, sp, #0
    6786:	6078      	str	r0, [r7, #4]
    6788:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	681b      	ldr	r3, [r3, #0]
    678e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    6790:	687b      	ldr	r3, [r7, #4]
    6792:	799b      	ldrb	r3, [r3, #6]
    6794:	2201      	movs	r2, #1
    6796:	4053      	eors	r3, r2
    6798:	b2db      	uxtb	r3, r3
    679a:	2b00      	cmp	r3, #0
    679c:	d001      	beq.n	67a2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    679e:	231c      	movs	r3, #28
    67a0:	e05e      	b.n	6860 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    67a6:	b29b      	uxth	r3, r3
    67a8:	2b00      	cmp	r3, #0
    67aa:	d001      	beq.n	67b0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    67ac:	2305      	movs	r3, #5
    67ae:	e057      	b.n	6860 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    67b0:	68fb      	ldr	r3, [r7, #12]
    67b2:	7e1b      	ldrb	r3, [r3, #24]
    67b4:	b2db      	uxtb	r3, r3
    67b6:	001a      	movs	r2, r3
    67b8:	2304      	movs	r3, #4
    67ba:	4013      	ands	r3, r2
    67bc:	d101      	bne.n	67c2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    67be:	2305      	movs	r3, #5
    67c0:	e04e      	b.n	6860 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	0018      	movs	r0, r3
    67c6:	4b28      	ldr	r3, [pc, #160]	; (6868 <usart_read_wait+0xe8>)
    67c8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    67ca:	68fb      	ldr	r3, [r7, #12]
    67cc:	8b5b      	ldrh	r3, [r3, #26]
    67ce:	b29b      	uxth	r3, r3
    67d0:	b2da      	uxtb	r2, r3
    67d2:	230b      	movs	r3, #11
    67d4:	18fb      	adds	r3, r7, r3
    67d6:	213f      	movs	r1, #63	; 0x3f
    67d8:	400a      	ands	r2, r1
    67da:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    67dc:	230b      	movs	r3, #11
    67de:	18fb      	adds	r3, r7, r3
    67e0:	781b      	ldrb	r3, [r3, #0]
    67e2:	2b00      	cmp	r3, #0
    67e4:	d036      	beq.n	6854 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    67e6:	230b      	movs	r3, #11
    67e8:	18fb      	adds	r3, r7, r3
    67ea:	781b      	ldrb	r3, [r3, #0]
    67ec:	2202      	movs	r2, #2
    67ee:	4013      	ands	r3, r2
    67f0:	d004      	beq.n	67fc <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67f2:	68fb      	ldr	r3, [r7, #12]
    67f4:	2202      	movs	r2, #2
    67f6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    67f8:	231a      	movs	r3, #26
    67fa:	e031      	b.n	6860 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67fc:	230b      	movs	r3, #11
    67fe:	18fb      	adds	r3, r7, r3
    6800:	781b      	ldrb	r3, [r3, #0]
    6802:	2204      	movs	r2, #4
    6804:	4013      	ands	r3, r2
    6806:	d004      	beq.n	6812 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6808:	68fb      	ldr	r3, [r7, #12]
    680a:	2204      	movs	r2, #4
    680c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    680e:	231e      	movs	r3, #30
    6810:	e026      	b.n	6860 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6812:	230b      	movs	r3, #11
    6814:	18fb      	adds	r3, r7, r3
    6816:	781b      	ldrb	r3, [r3, #0]
    6818:	2201      	movs	r2, #1
    681a:	4013      	ands	r3, r2
    681c:	d004      	beq.n	6828 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    681e:	68fb      	ldr	r3, [r7, #12]
    6820:	2201      	movs	r2, #1
    6822:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    6824:	2313      	movs	r3, #19
    6826:	e01b      	b.n	6860 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    6828:	230b      	movs	r3, #11
    682a:	18fb      	adds	r3, r7, r3
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	2210      	movs	r2, #16
    6830:	4013      	ands	r3, r2
    6832:	d004      	beq.n	683e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6834:	68fb      	ldr	r3, [r7, #12]
    6836:	2210      	movs	r2, #16
    6838:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    683a:	2342      	movs	r3, #66	; 0x42
    683c:	e010      	b.n	6860 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    683e:	230b      	movs	r3, #11
    6840:	18fb      	adds	r3, r7, r3
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	2220      	movs	r2, #32
    6846:	4013      	ands	r3, r2
    6848:	d004      	beq.n	6854 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    684a:	68fb      	ldr	r3, [r7, #12]
    684c:	2220      	movs	r2, #32
    684e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    6850:	2341      	movs	r3, #65	; 0x41
    6852:	e005      	b.n	6860 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    6854:	68fb      	ldr	r3, [r7, #12]
    6856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6858:	b29a      	uxth	r2, r3
    685a:	683b      	ldr	r3, [r7, #0]
    685c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    685e:	2300      	movs	r3, #0
}
    6860:	0018      	movs	r0, r3
    6862:	46bd      	mov	sp, r7
    6864:	b004      	add	sp, #16
    6866:	bd80      	pop	{r7, pc}
    6868:	000061b5 	.word	0x000061b5

0000686c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    686c:	b580      	push	{r7, lr}
    686e:	b084      	sub	sp, #16
    6870:	af00      	add	r7, sp, #0
    6872:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    6874:	687b      	ldr	r3, [r7, #4]
    6876:	681b      	ldr	r3, [r3, #0]
    6878:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    687a:	68fb      	ldr	r3, [r7, #12]
    687c:	69db      	ldr	r3, [r3, #28]
    687e:	1e5a      	subs	r2, r3, #1
    6880:	4193      	sbcs	r3, r2
    6882:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    6884:	0018      	movs	r0, r3
    6886:	46bd      	mov	sp, r7
    6888:	b004      	add	sp, #16
    688a:	bd80      	pop	{r7, pc}

0000688c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    688c:	b580      	push	{r7, lr}
    688e:	b082      	sub	sp, #8
    6890:	af00      	add	r7, sp, #0
    6892:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    6894:	46c0      	nop			; (mov r8, r8)
    6896:	687b      	ldr	r3, [r7, #4]
    6898:	0018      	movs	r0, r3
    689a:	4b04      	ldr	r3, [pc, #16]	; (68ac <_usart_wait_for_sync+0x20>)
    689c:	4798      	blx	r3
    689e:	1e03      	subs	r3, r0, #0
    68a0:	d1f9      	bne.n	6896 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	46bd      	mov	sp, r7
    68a6:	b002      	add	sp, #8
    68a8:	bd80      	pop	{r7, pc}
    68aa:	46c0      	nop			; (mov r8, r8)
    68ac:	0000686d 	.word	0x0000686d

000068b0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    68b0:	b580      	push	{r7, lr}
    68b2:	b088      	sub	sp, #32
    68b4:	af00      	add	r7, sp, #0
    68b6:	0002      	movs	r2, r0
    68b8:	1dfb      	adds	r3, r7, #7
    68ba:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    68bc:	1dfb      	adds	r3, r7, #7
    68be:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    68c0:	4ba3      	ldr	r3, [pc, #652]	; (6b50 <_usart_interrupt_handler+0x2a0>)
    68c2:	0092      	lsls	r2, r2, #2
    68c4:	58d3      	ldr	r3, [r2, r3]
    68c6:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    68c8:	69bb      	ldr	r3, [r7, #24]
    68ca:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    68cc:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    68ce:	69bb      	ldr	r3, [r7, #24]
    68d0:	0018      	movs	r0, r3
    68d2:	4ba0      	ldr	r3, [pc, #640]	; (6b54 <_usart_interrupt_handler+0x2a4>)
    68d4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    68d6:	697b      	ldr	r3, [r7, #20]
    68d8:	7e1b      	ldrb	r3, [r3, #24]
    68da:	b2da      	uxtb	r2, r3
    68dc:	2312      	movs	r3, #18
    68de:	18fb      	adds	r3, r7, r3
    68e0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    68e2:	697b      	ldr	r3, [r7, #20]
    68e4:	7d9b      	ldrb	r3, [r3, #22]
    68e6:	b2db      	uxtb	r3, r3
    68e8:	b29a      	uxth	r2, r3
    68ea:	2312      	movs	r3, #18
    68ec:	18fb      	adds	r3, r7, r3
    68ee:	2112      	movs	r1, #18
    68f0:	1879      	adds	r1, r7, r1
    68f2:	8809      	ldrh	r1, [r1, #0]
    68f4:	400a      	ands	r2, r1
    68f6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    68f8:	69bb      	ldr	r3, [r7, #24]
    68fa:	2230      	movs	r2, #48	; 0x30
    68fc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    68fe:	69ba      	ldr	r2, [r7, #24]
    6900:	2131      	movs	r1, #49	; 0x31
    6902:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    6904:	4013      	ands	r3, r2
    6906:	b2da      	uxtb	r2, r3
    6908:	2310      	movs	r3, #16
    690a:	18fb      	adds	r3, r7, r3
    690c:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    690e:	2312      	movs	r3, #18
    6910:	18fb      	adds	r3, r7, r3
    6912:	881b      	ldrh	r3, [r3, #0]
    6914:	2201      	movs	r2, #1
    6916:	4013      	ands	r3, r2
    6918:	d044      	beq.n	69a4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    691a:	69bb      	ldr	r3, [r7, #24]
    691c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    691e:	b29b      	uxth	r3, r3
    6920:	2b00      	cmp	r3, #0
    6922:	d03c      	beq.n	699e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    6924:	69bb      	ldr	r3, [r7, #24]
    6926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	b2da      	uxtb	r2, r3
    692c:	231c      	movs	r3, #28
    692e:	18fb      	adds	r3, r7, r3
    6930:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6932:	69bb      	ldr	r3, [r7, #24]
    6934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6936:	1c5a      	adds	r2, r3, #1
    6938:	69bb      	ldr	r3, [r7, #24]
    693a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    693c:	69bb      	ldr	r3, [r7, #24]
    693e:	795b      	ldrb	r3, [r3, #5]
    6940:	2b01      	cmp	r3, #1
    6942:	d113      	bne.n	696c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    6944:	69bb      	ldr	r3, [r7, #24]
    6946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6948:	781b      	ldrb	r3, [r3, #0]
    694a:	b2db      	uxtb	r3, r3
    694c:	021b      	lsls	r3, r3, #8
    694e:	b21a      	sxth	r2, r3
    6950:	231c      	movs	r3, #28
    6952:	18fb      	adds	r3, r7, r3
    6954:	2100      	movs	r1, #0
    6956:	5e5b      	ldrsh	r3, [r3, r1]
    6958:	4313      	orrs	r3, r2
    695a:	b21a      	sxth	r2, r3
    695c:	231c      	movs	r3, #28
    695e:	18fb      	adds	r3, r7, r3
    6960:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    6962:	69bb      	ldr	r3, [r7, #24]
    6964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6966:	1c5a      	adds	r2, r3, #1
    6968:	69bb      	ldr	r3, [r7, #24]
    696a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    696c:	231c      	movs	r3, #28
    696e:	18fb      	adds	r3, r7, r3
    6970:	881b      	ldrh	r3, [r3, #0]
    6972:	05db      	lsls	r3, r3, #23
    6974:	0ddb      	lsrs	r3, r3, #23
    6976:	b29a      	uxth	r2, r3
    6978:	697b      	ldr	r3, [r7, #20]
    697a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    697c:	69bb      	ldr	r3, [r7, #24]
    697e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6980:	b29b      	uxth	r3, r3
    6982:	3b01      	subs	r3, #1
    6984:	b29b      	uxth	r3, r3
    6986:	69ba      	ldr	r2, [r7, #24]
    6988:	1c19      	adds	r1, r3, #0
    698a:	85d1      	strh	r1, [r2, #46]	; 0x2e
    698c:	2b00      	cmp	r3, #0
    698e:	d109      	bne.n	69a4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    6990:	697b      	ldr	r3, [r7, #20]
    6992:	2201      	movs	r2, #1
    6994:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    6996:	697b      	ldr	r3, [r7, #20]
    6998:	2202      	movs	r2, #2
    699a:	759a      	strb	r2, [r3, #22]
    699c:	e002      	b.n	69a4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    699e:	697b      	ldr	r3, [r7, #20]
    69a0:	2201      	movs	r2, #1
    69a2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    69a4:	2312      	movs	r3, #18
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	881b      	ldrh	r3, [r3, #0]
    69aa:	2202      	movs	r2, #2
    69ac:	4013      	ands	r3, r2
    69ae:	d011      	beq.n	69d4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    69b0:	697b      	ldr	r3, [r7, #20]
    69b2:	2202      	movs	r2, #2
    69b4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    69b6:	69bb      	ldr	r3, [r7, #24]
    69b8:	2233      	movs	r2, #51	; 0x33
    69ba:	2100      	movs	r1, #0
    69bc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    69be:	2310      	movs	r3, #16
    69c0:	18fb      	adds	r3, r7, r3
    69c2:	881b      	ldrh	r3, [r3, #0]
    69c4:	2201      	movs	r2, #1
    69c6:	4013      	ands	r3, r2
    69c8:	d004      	beq.n	69d4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    69ca:	69bb      	ldr	r3, [r7, #24]
    69cc:	68db      	ldr	r3, [r3, #12]
    69ce:	69ba      	ldr	r2, [r7, #24]
    69d0:	0010      	movs	r0, r2
    69d2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    69d4:	2312      	movs	r3, #18
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	881b      	ldrh	r3, [r3, #0]
    69da:	2204      	movs	r2, #4
    69dc:	4013      	ands	r3, r2
    69de:	d100      	bne.n	69e2 <_usart_interrupt_handler+0x132>
    69e0:	e0bd      	b.n	6b5e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    69e2:	69bb      	ldr	r3, [r7, #24]
    69e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    69e6:	b29b      	uxth	r3, r3
    69e8:	2b00      	cmp	r3, #0
    69ea:	d100      	bne.n	69ee <_usart_interrupt_handler+0x13e>
    69ec:	e0b4      	b.n	6b58 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    69ee:	697b      	ldr	r3, [r7, #20]
    69f0:	8b5b      	ldrh	r3, [r3, #26]
    69f2:	b29b      	uxth	r3, r3
    69f4:	b2da      	uxtb	r2, r3
    69f6:	231f      	movs	r3, #31
    69f8:	18fb      	adds	r3, r7, r3
    69fa:	213f      	movs	r1, #63	; 0x3f
    69fc:	400a      	ands	r2, r1
    69fe:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    6a00:	231f      	movs	r3, #31
    6a02:	18fb      	adds	r3, r7, r3
    6a04:	781b      	ldrb	r3, [r3, #0]
    6a06:	2208      	movs	r2, #8
    6a08:	4013      	ands	r3, r2
    6a0a:	d007      	beq.n	6a1c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6a0c:	231f      	movs	r3, #31
    6a0e:	18fb      	adds	r3, r7, r3
    6a10:	221f      	movs	r2, #31
    6a12:	18ba      	adds	r2, r7, r2
    6a14:	7812      	ldrb	r2, [r2, #0]
    6a16:	2108      	movs	r1, #8
    6a18:	438a      	bics	r2, r1
    6a1a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    6a1c:	231f      	movs	r3, #31
    6a1e:	18fb      	adds	r3, r7, r3
    6a20:	781b      	ldrb	r3, [r3, #0]
    6a22:	2b00      	cmp	r3, #0
    6a24:	d050      	beq.n	6ac8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    6a26:	231f      	movs	r3, #31
    6a28:	18fb      	adds	r3, r7, r3
    6a2a:	781b      	ldrb	r3, [r3, #0]
    6a2c:	2202      	movs	r2, #2
    6a2e:	4013      	ands	r3, r2
    6a30:	d007      	beq.n	6a42 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    6a32:	69bb      	ldr	r3, [r7, #24]
    6a34:	2232      	movs	r2, #50	; 0x32
    6a36:	211a      	movs	r1, #26
    6a38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6a3a:	697b      	ldr	r3, [r7, #20]
    6a3c:	2202      	movs	r2, #2
    6a3e:	835a      	strh	r2, [r3, #26]
    6a40:	e036      	b.n	6ab0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6a42:	231f      	movs	r3, #31
    6a44:	18fb      	adds	r3, r7, r3
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	2204      	movs	r2, #4
    6a4a:	4013      	ands	r3, r2
    6a4c:	d007      	beq.n	6a5e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    6a4e:	69bb      	ldr	r3, [r7, #24]
    6a50:	2232      	movs	r2, #50	; 0x32
    6a52:	211e      	movs	r1, #30
    6a54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6a56:	697b      	ldr	r3, [r7, #20]
    6a58:	2204      	movs	r2, #4
    6a5a:	835a      	strh	r2, [r3, #26]
    6a5c:	e028      	b.n	6ab0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6a5e:	231f      	movs	r3, #31
    6a60:	18fb      	adds	r3, r7, r3
    6a62:	781b      	ldrb	r3, [r3, #0]
    6a64:	2201      	movs	r2, #1
    6a66:	4013      	ands	r3, r2
    6a68:	d007      	beq.n	6a7a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    6a6a:	69bb      	ldr	r3, [r7, #24]
    6a6c:	2232      	movs	r2, #50	; 0x32
    6a6e:	2113      	movs	r1, #19
    6a70:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6a72:	697b      	ldr	r3, [r7, #20]
    6a74:	2201      	movs	r2, #1
    6a76:	835a      	strh	r2, [r3, #26]
    6a78:	e01a      	b.n	6ab0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6a7a:	231f      	movs	r3, #31
    6a7c:	18fb      	adds	r3, r7, r3
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	2210      	movs	r2, #16
    6a82:	4013      	ands	r3, r2
    6a84:	d007      	beq.n	6a96 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    6a86:	69bb      	ldr	r3, [r7, #24]
    6a88:	2232      	movs	r2, #50	; 0x32
    6a8a:	2142      	movs	r1, #66	; 0x42
    6a8c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6a8e:	697b      	ldr	r3, [r7, #20]
    6a90:	2210      	movs	r2, #16
    6a92:	835a      	strh	r2, [r3, #26]
    6a94:	e00c      	b.n	6ab0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6a96:	231f      	movs	r3, #31
    6a98:	18fb      	adds	r3, r7, r3
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	2220      	movs	r2, #32
    6a9e:	4013      	ands	r3, r2
    6aa0:	d006      	beq.n	6ab0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6aa2:	69bb      	ldr	r3, [r7, #24]
    6aa4:	2232      	movs	r2, #50	; 0x32
    6aa6:	2141      	movs	r1, #65	; 0x41
    6aa8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6aaa:	697b      	ldr	r3, [r7, #20]
    6aac:	2220      	movs	r2, #32
    6aae:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    6ab0:	2310      	movs	r3, #16
    6ab2:	18fb      	adds	r3, r7, r3
    6ab4:	881b      	ldrh	r3, [r3, #0]
    6ab6:	2204      	movs	r2, #4
    6ab8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6aba:	d050      	beq.n	6b5e <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6abc:	69bb      	ldr	r3, [r7, #24]
    6abe:	695b      	ldr	r3, [r3, #20]
    6ac0:	69ba      	ldr	r2, [r7, #24]
    6ac2:	0010      	movs	r0, r2
    6ac4:	4798      	blx	r3
    6ac6:	e04a      	b.n	6b5e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6ac8:	697b      	ldr	r3, [r7, #20]
    6aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    6acc:	b29a      	uxth	r2, r3
    6ace:	230e      	movs	r3, #14
    6ad0:	18fb      	adds	r3, r7, r3
    6ad2:	05d2      	lsls	r2, r2, #23
    6ad4:	0dd2      	lsrs	r2, r2, #23
    6ad6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6ad8:	69bb      	ldr	r3, [r7, #24]
    6ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6adc:	220e      	movs	r2, #14
    6ade:	18ba      	adds	r2, r7, r2
    6ae0:	8812      	ldrh	r2, [r2, #0]
    6ae2:	b2d2      	uxtb	r2, r2
    6ae4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6ae6:	69bb      	ldr	r3, [r7, #24]
    6ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6aea:	1c5a      	adds	r2, r3, #1
    6aec:	69bb      	ldr	r3, [r7, #24]
    6aee:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6af0:	69bb      	ldr	r3, [r7, #24]
    6af2:	795b      	ldrb	r3, [r3, #5]
    6af4:	2b01      	cmp	r3, #1
    6af6:	d10d      	bne.n	6b14 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6af8:	69bb      	ldr	r3, [r7, #24]
    6afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6afc:	220e      	movs	r2, #14
    6afe:	18ba      	adds	r2, r7, r2
    6b00:	8812      	ldrh	r2, [r2, #0]
    6b02:	0a12      	lsrs	r2, r2, #8
    6b04:	b292      	uxth	r2, r2
    6b06:	b2d2      	uxtb	r2, r2
    6b08:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    6b0a:	69bb      	ldr	r3, [r7, #24]
    6b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b0e:	1c5a      	adds	r2, r3, #1
    6b10:	69bb      	ldr	r3, [r7, #24]
    6b12:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6b14:	69bb      	ldr	r3, [r7, #24]
    6b16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6b18:	b29b      	uxth	r3, r3
    6b1a:	3b01      	subs	r3, #1
    6b1c:	b29b      	uxth	r3, r3
    6b1e:	69ba      	ldr	r2, [r7, #24]
    6b20:	1c19      	adds	r1, r3, #0
    6b22:	8591      	strh	r1, [r2, #44]	; 0x2c
    6b24:	2b00      	cmp	r3, #0
    6b26:	d11a      	bne.n	6b5e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6b28:	697b      	ldr	r3, [r7, #20]
    6b2a:	2204      	movs	r2, #4
    6b2c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    6b2e:	69bb      	ldr	r3, [r7, #24]
    6b30:	2232      	movs	r2, #50	; 0x32
    6b32:	2100      	movs	r1, #0
    6b34:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    6b36:	2310      	movs	r3, #16
    6b38:	18fb      	adds	r3, r7, r3
    6b3a:	881b      	ldrh	r3, [r3, #0]
    6b3c:	2202      	movs	r2, #2
    6b3e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    6b40:	d00d      	beq.n	6b5e <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6b42:	69bb      	ldr	r3, [r7, #24]
    6b44:	691b      	ldr	r3, [r3, #16]
    6b46:	69ba      	ldr	r2, [r7, #24]
    6b48:	0010      	movs	r0, r2
    6b4a:	4798      	blx	r3
    6b4c:	e007      	b.n	6b5e <_usart_interrupt_handler+0x2ae>
    6b4e:	46c0      	nop			; (mov r8, r8)
    6b50:	20004634 	.word	0x20004634
    6b54:	0000688d 	.word	0x0000688d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6b58:	697b      	ldr	r3, [r7, #20]
    6b5a:	2204      	movs	r2, #4
    6b5c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6b5e:	2312      	movs	r3, #18
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	881b      	ldrh	r3, [r3, #0]
    6b64:	2210      	movs	r2, #16
    6b66:	4013      	ands	r3, r2
    6b68:	d010      	beq.n	6b8c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6b6a:	697b      	ldr	r3, [r7, #20]
    6b6c:	2210      	movs	r2, #16
    6b6e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6b70:	697b      	ldr	r3, [r7, #20]
    6b72:	2210      	movs	r2, #16
    6b74:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6b76:	2310      	movs	r3, #16
    6b78:	18fb      	adds	r3, r7, r3
    6b7a:	881b      	ldrh	r3, [r3, #0]
    6b7c:	2210      	movs	r2, #16
    6b7e:	4013      	ands	r3, r2
    6b80:	d004      	beq.n	6b8c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6b82:	69bb      	ldr	r3, [r7, #24]
    6b84:	69db      	ldr	r3, [r3, #28]
    6b86:	69ba      	ldr	r2, [r7, #24]
    6b88:	0010      	movs	r0, r2
    6b8a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6b8c:	2312      	movs	r3, #18
    6b8e:	18fb      	adds	r3, r7, r3
    6b90:	881b      	ldrh	r3, [r3, #0]
    6b92:	2220      	movs	r2, #32
    6b94:	4013      	ands	r3, r2
    6b96:	d010      	beq.n	6bba <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6b98:	697b      	ldr	r3, [r7, #20]
    6b9a:	2220      	movs	r2, #32
    6b9c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6b9e:	697b      	ldr	r3, [r7, #20]
    6ba0:	2220      	movs	r2, #32
    6ba2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6ba4:	2310      	movs	r3, #16
    6ba6:	18fb      	adds	r3, r7, r3
    6ba8:	881b      	ldrh	r3, [r3, #0]
    6baa:	2208      	movs	r2, #8
    6bac:	4013      	ands	r3, r2
    6bae:	d004      	beq.n	6bba <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6bb0:	69bb      	ldr	r3, [r7, #24]
    6bb2:	699b      	ldr	r3, [r3, #24]
    6bb4:	69ba      	ldr	r2, [r7, #24]
    6bb6:	0010      	movs	r0, r2
    6bb8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6bba:	2312      	movs	r3, #18
    6bbc:	18fb      	adds	r3, r7, r3
    6bbe:	881b      	ldrh	r3, [r3, #0]
    6bc0:	2208      	movs	r2, #8
    6bc2:	4013      	ands	r3, r2
    6bc4:	d010      	beq.n	6be8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6bc6:	697b      	ldr	r3, [r7, #20]
    6bc8:	2208      	movs	r2, #8
    6bca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6bcc:	697b      	ldr	r3, [r7, #20]
    6bce:	2208      	movs	r2, #8
    6bd0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6bd2:	2310      	movs	r3, #16
    6bd4:	18fb      	adds	r3, r7, r3
    6bd6:	881b      	ldrh	r3, [r3, #0]
    6bd8:	2220      	movs	r2, #32
    6bda:	4013      	ands	r3, r2
    6bdc:	d004      	beq.n	6be8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6bde:	69bb      	ldr	r3, [r7, #24]
    6be0:	6a1b      	ldr	r3, [r3, #32]
    6be2:	69ba      	ldr	r2, [r7, #24]
    6be4:	0010      	movs	r0, r2
    6be6:	4798      	blx	r3
		}
	}
#endif
}
    6be8:	46c0      	nop			; (mov r8, r8)
    6bea:	46bd      	mov	sp, r7
    6bec:	b008      	add	sp, #32
    6bee:	bd80      	pop	{r7, pc}

00006bf0 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    6bf0:	b580      	push	{r7, lr}
    6bf2:	b082      	sub	sp, #8
    6bf4:	af00      	add	r7, sp, #0
    6bf6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6bf8:	687b      	ldr	r3, [r7, #4]
    6bfa:	2201      	movs	r2, #1
    6bfc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    6bfe:	687b      	ldr	r3, [r7, #4]
    6c00:	2200      	movs	r2, #0
    6c02:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    6c04:	687b      	ldr	r3, [r7, #4]
    6c06:	2206      	movs	r2, #6
    6c08:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    6c0a:	687b      	ldr	r3, [r7, #4]
    6c0c:	2200      	movs	r2, #0
    6c0e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    6c10:	687b      	ldr	r3, [r7, #4]
    6c12:	2200      	movs	r2, #0
    6c14:	725a      	strb	r2, [r3, #9]
}
    6c16:	46c0      	nop			; (mov r8, r8)
    6c18:	46bd      	mov	sp, r7
    6c1a:	b002      	add	sp, #8
    6c1c:	bd80      	pop	{r7, pc}
    6c1e:	46c0      	nop			; (mov r8, r8)

00006c20 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6c20:	b580      	push	{r7, lr}
    6c22:	b082      	sub	sp, #8
    6c24:	af00      	add	r7, sp, #0
    6c26:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6c28:	687b      	ldr	r3, [r7, #4]
    6c2a:	2200      	movs	r2, #0
    6c2c:	701a      	strb	r2, [r3, #0]
}
    6c2e:	46c0      	nop			; (mov r8, r8)
    6c30:	46bd      	mov	sp, r7
    6c32:	b002      	add	sp, #8
    6c34:	bd80      	pop	{r7, pc}
    6c36:	46c0      	nop			; (mov r8, r8)

00006c38 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    6c38:	b580      	push	{r7, lr}
    6c3a:	b082      	sub	sp, #8
    6c3c:	af00      	add	r7, sp, #0
    6c3e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6c40:	687b      	ldr	r3, [r7, #4]
    6c42:	2200      	movs	r2, #0
    6c44:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	2204      	movs	r2, #4
    6c4a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    6c4c:	687b      	ldr	r3, [r7, #4]
    6c4e:	2200      	movs	r2, #0
    6c50:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    6c52:	687b      	ldr	r3, [r7, #4]
    6c54:	2280      	movs	r2, #128	; 0x80
    6c56:	0212      	lsls	r2, r2, #8
    6c58:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    6c5a:	687b      	ldr	r3, [r7, #4]
    6c5c:	2200      	movs	r2, #0
    6c5e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    6c60:	687b      	ldr	r3, [r7, #4]
    6c62:	2201      	movs	r2, #1
    6c64:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    6c66:	687b      	ldr	r3, [r7, #4]
    6c68:	2200      	movs	r2, #0
    6c6a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    6c6c:	687b      	ldr	r3, [r7, #4]
    6c6e:	2201      	movs	r2, #1
    6c70:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    6c72:	687b      	ldr	r3, [r7, #4]
    6c74:	2200      	movs	r2, #0
    6c76:	739a      	strb	r2, [r3, #14]
}
    6c78:	46c0      	nop			; (mov r8, r8)
    6c7a:	46bd      	mov	sp, r7
    6c7c:	b002      	add	sp, #8
    6c7e:	bd80      	pop	{r7, pc}

00006c80 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    6c80:	b580      	push	{r7, lr}
    6c82:	b082      	sub	sp, #8
    6c84:	af00      	add	r7, sp, #0
    6c86:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    6c88:	687b      	ldr	r3, [r7, #4]
    6c8a:	2203      	movs	r2, #3
    6c8c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    6c8e:	687b      	ldr	r3, [r7, #4]
    6c90:	2200      	movs	r2, #0
    6c92:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    6c94:	687b      	ldr	r3, [r7, #4]
    6c96:	2201      	movs	r2, #1
    6c98:	709a      	strb	r2, [r3, #2]
}
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	46bd      	mov	sp, r7
    6c9e:	b002      	add	sp, #8
    6ca0:	bd80      	pop	{r7, pc}
    6ca2:	46c0      	nop			; (mov r8, r8)

00006ca4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    6ca4:	b580      	push	{r7, lr}
    6ca6:	b082      	sub	sp, #8
    6ca8:	af00      	add	r7, sp, #0
    6caa:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	2200      	movs	r2, #0
    6cb0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	2200      	movs	r2, #0
    6cb6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	2200      	movs	r2, #0
    6cbc:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	2200      	movs	r2, #0
    6cc2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6cc4:	687b      	ldr	r3, [r7, #4]
    6cc6:	2200      	movs	r2, #0
    6cc8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    6cca:	687b      	ldr	r3, [r7, #4]
    6ccc:	2201      	movs	r2, #1
    6cce:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    6cd0:	687b      	ldr	r3, [r7, #4]
    6cd2:	2207      	movs	r2, #7
    6cd4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	223f      	movs	r2, #63	; 0x3f
    6cda:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	2201      	movs	r2, #1
    6ce0:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    6ce2:	687b      	ldr	r3, [r7, #4]
    6ce4:	2201      	movs	r2, #1
    6ce6:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	2206      	movs	r2, #6
    6cec:	821a      	strh	r2, [r3, #16]
}
    6cee:	46c0      	nop			; (mov r8, r8)
    6cf0:	46bd      	mov	sp, r7
    6cf2:	b002      	add	sp, #8
    6cf4:	bd80      	pop	{r7, pc}
    6cf6:	46c0      	nop			; (mov r8, r8)

00006cf8 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	0002      	movs	r2, r0
    6d00:	1dfb      	adds	r3, r7, #7
    6d02:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    6d04:	4a03      	ldr	r2, [pc, #12]	; (6d14 <system_cpu_clock_set_divider+0x1c>)
    6d06:	1dfb      	adds	r3, r7, #7
    6d08:	781b      	ldrb	r3, [r3, #0]
    6d0a:	7213      	strb	r3, [r2, #8]
}
    6d0c:	46c0      	nop			; (mov r8, r8)
    6d0e:	46bd      	mov	sp, r7
    6d10:	b002      	add	sp, #8
    6d12:	bd80      	pop	{r7, pc}
    6d14:	40000400 	.word	0x40000400

00006d18 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    6d18:	b580      	push	{r7, lr}
    6d1a:	b082      	sub	sp, #8
    6d1c:	af00      	add	r7, sp, #0
    6d1e:	0002      	movs	r2, r0
    6d20:	1dfb      	adds	r3, r7, #7
    6d22:	701a      	strb	r2, [r3, #0]
    6d24:	1dbb      	adds	r3, r7, #6
    6d26:	1c0a      	adds	r2, r1, #0
    6d28:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6d2a:	1dfb      	adds	r3, r7, #7
    6d2c:	781b      	ldrb	r3, [r3, #0]
    6d2e:	2b01      	cmp	r3, #1
    6d30:	d008      	beq.n	6d44 <system_apb_clock_set_divider+0x2c>
    6d32:	2b02      	cmp	r3, #2
    6d34:	d00b      	beq.n	6d4e <system_apb_clock_set_divider+0x36>
    6d36:	2b00      	cmp	r3, #0
    6d38:	d10e      	bne.n	6d58 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    6d3a:	4a0b      	ldr	r2, [pc, #44]	; (6d68 <system_apb_clock_set_divider+0x50>)
    6d3c:	1dbb      	adds	r3, r7, #6
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	7253      	strb	r3, [r2, #9]
			break;
    6d42:	e00b      	b.n	6d5c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    6d44:	4a08      	ldr	r2, [pc, #32]	; (6d68 <system_apb_clock_set_divider+0x50>)
    6d46:	1dbb      	adds	r3, r7, #6
    6d48:	781b      	ldrb	r3, [r3, #0]
    6d4a:	7293      	strb	r3, [r2, #10]
			break;
    6d4c:	e006      	b.n	6d5c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    6d4e:	4a06      	ldr	r2, [pc, #24]	; (6d68 <system_apb_clock_set_divider+0x50>)
    6d50:	1dbb      	adds	r3, r7, #6
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	72d3      	strb	r3, [r2, #11]
			break;
    6d56:	e001      	b.n	6d5c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6d58:	2317      	movs	r3, #23
    6d5a:	e000      	b.n	6d5e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    6d5c:	2300      	movs	r3, #0
}
    6d5e:	0018      	movs	r0, r3
    6d60:	46bd      	mov	sp, r7
    6d62:	b002      	add	sp, #8
    6d64:	bd80      	pop	{r7, pc}
    6d66:	46c0      	nop			; (mov r8, r8)
    6d68:	40000400 	.word	0x40000400

00006d6c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6d6c:	b580      	push	{r7, lr}
    6d6e:	b082      	sub	sp, #8
    6d70:	af00      	add	r7, sp, #0
    6d72:	0002      	movs	r2, r0
    6d74:	1dfb      	adds	r3, r7, #7
    6d76:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6d78:	4a08      	ldr	r2, [pc, #32]	; (6d9c <system_flash_set_waitstates+0x30>)
    6d7a:	1dfb      	adds	r3, r7, #7
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	210f      	movs	r1, #15
    6d80:	400b      	ands	r3, r1
    6d82:	b2d9      	uxtb	r1, r3
    6d84:	6853      	ldr	r3, [r2, #4]
    6d86:	200f      	movs	r0, #15
    6d88:	4001      	ands	r1, r0
    6d8a:	0049      	lsls	r1, r1, #1
    6d8c:	201e      	movs	r0, #30
    6d8e:	4383      	bics	r3, r0
    6d90:	430b      	orrs	r3, r1
    6d92:	6053      	str	r3, [r2, #4]
}
    6d94:	46c0      	nop			; (mov r8, r8)
    6d96:	46bd      	mov	sp, r7
    6d98:	b002      	add	sp, #8
    6d9a:	bd80      	pop	{r7, pc}
    6d9c:	41004000 	.word	0x41004000

00006da0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6da4:	46c0      	nop			; (mov r8, r8)
    6da6:	4b04      	ldr	r3, [pc, #16]	; (6db8 <_system_dfll_wait_for_sync+0x18>)
    6da8:	68db      	ldr	r3, [r3, #12]
    6daa:	2210      	movs	r2, #16
    6dac:	4013      	ands	r3, r2
    6dae:	d0fa      	beq.n	6da6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6db0:	46c0      	nop			; (mov r8, r8)
    6db2:	46bd      	mov	sp, r7
    6db4:	bd80      	pop	{r7, pc}
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	40000800 	.word	0x40000800

00006dbc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6dbc:	b580      	push	{r7, lr}
    6dbe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6dc0:	4b0c      	ldr	r3, [pc, #48]	; (6df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6dc2:	2202      	movs	r2, #2
    6dc4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6dc6:	4b0c      	ldr	r3, [pc, #48]	; (6df8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6dc8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6dca:	4a0a      	ldr	r2, [pc, #40]	; (6df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6dcc:	4b0b      	ldr	r3, [pc, #44]	; (6dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6dce:	689b      	ldr	r3, [r3, #8]
    6dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6dd2:	4a08      	ldr	r2, [pc, #32]	; (6df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6dd4:	4b09      	ldr	r3, [pc, #36]	; (6dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6dd6:	685b      	ldr	r3, [r3, #4]
    6dd8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    6dda:	4b06      	ldr	r3, [pc, #24]	; (6df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6ddc:	2200      	movs	r2, #0
    6dde:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6de0:	4b05      	ldr	r3, [pc, #20]	; (6df8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6de2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6de4:	4a03      	ldr	r2, [pc, #12]	; (6df4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6de6:	4b05      	ldr	r3, [pc, #20]	; (6dfc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6de8:	681b      	ldr	r3, [r3, #0]
    6dea:	b29b      	uxth	r3, r3
    6dec:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	46bd      	mov	sp, r7
    6df2:	bd80      	pop	{r7, pc}
    6df4:	40000800 	.word	0x40000800
    6df8:	00006da1 	.word	0x00006da1
    6dfc:	20000110 	.word	0x20000110

00006e00 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6e00:	b580      	push	{r7, lr}
    6e02:	b082      	sub	sp, #8
    6e04:	af00      	add	r7, sp, #0
    6e06:	0002      	movs	r2, r0
    6e08:	1dfb      	adds	r3, r7, #7
    6e0a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    6e0c:	1dfb      	adds	r3, r7, #7
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	2b08      	cmp	r3, #8
    6e12:	d840      	bhi.n	6e96 <system_clock_source_get_hz+0x96>
    6e14:	009a      	lsls	r2, r3, #2
    6e16:	4b22      	ldr	r3, [pc, #136]	; (6ea0 <system_clock_source_get_hz+0xa0>)
    6e18:	18d3      	adds	r3, r2, r3
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    6e1e:	4b21      	ldr	r3, [pc, #132]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e20:	691b      	ldr	r3, [r3, #16]
    6e22:	e039      	b.n	6e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    6e24:	4b20      	ldr	r3, [pc, #128]	; (6ea8 <system_clock_source_get_hz+0xa8>)
    6e26:	6a1b      	ldr	r3, [r3, #32]
    6e28:	059b      	lsls	r3, r3, #22
    6e2a:	0f9b      	lsrs	r3, r3, #30
    6e2c:	b2db      	uxtb	r3, r3
    6e2e:	001a      	movs	r2, r3
    6e30:	4b1e      	ldr	r3, [pc, #120]	; (6eac <system_clock_source_get_hz+0xac>)
    6e32:	40d3      	lsrs	r3, r2
    6e34:	e030      	b.n	6e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    6e36:	2380      	movs	r3, #128	; 0x80
    6e38:	021b      	lsls	r3, r3, #8
    6e3a:	e02d      	b.n	6e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    6e3c:	2380      	movs	r3, #128	; 0x80
    6e3e:	021b      	lsls	r3, r3, #8
    6e40:	e02a      	b.n	6e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    6e42:	4b18      	ldr	r3, [pc, #96]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e44:	695b      	ldr	r3, [r3, #20]
    6e46:	e027      	b.n	6e98 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    6e48:	4b16      	ldr	r3, [pc, #88]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e4a:	681b      	ldr	r3, [r3, #0]
    6e4c:	2202      	movs	r2, #2
    6e4e:	4013      	ands	r3, r2
    6e50:	d101      	bne.n	6e56 <system_clock_source_get_hz+0x56>
			return 0;
    6e52:	2300      	movs	r3, #0
    6e54:	e020      	b.n	6e98 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    6e56:	4b16      	ldr	r3, [pc, #88]	; (6eb0 <system_clock_source_get_hz+0xb0>)
    6e58:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    6e5a:	4b12      	ldr	r3, [pc, #72]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e5c:	681b      	ldr	r3, [r3, #0]
    6e5e:	2204      	movs	r2, #4
    6e60:	4013      	ands	r3, r2
    6e62:	d009      	beq.n	6e78 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6e64:	2000      	movs	r0, #0
    6e66:	4b13      	ldr	r3, [pc, #76]	; (6eb4 <system_clock_source_get_hz+0xb4>)
    6e68:	4798      	blx	r3
    6e6a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    6e6c:	4b0d      	ldr	r3, [pc, #52]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e6e:	689b      	ldr	r3, [r3, #8]
    6e70:	041b      	lsls	r3, r3, #16
    6e72:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    6e74:	4353      	muls	r3, r2
    6e76:	e00f      	b.n	6e98 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    6e78:	4b0f      	ldr	r3, [pc, #60]	; (6eb8 <system_clock_source_get_hz+0xb8>)
    6e7a:	e00d      	b.n	6e98 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6e7c:	4a0a      	ldr	r2, [pc, #40]	; (6ea8 <system_clock_source_get_hz+0xa8>)
    6e7e:	2350      	movs	r3, #80	; 0x50
    6e80:	5cd3      	ldrb	r3, [r2, r3]
    6e82:	b2db      	uxtb	r3, r3
    6e84:	001a      	movs	r2, r3
    6e86:	2304      	movs	r3, #4
    6e88:	4013      	ands	r3, r2
    6e8a:	d101      	bne.n	6e90 <system_clock_source_get_hz+0x90>
			return 0;
    6e8c:	2300      	movs	r3, #0
    6e8e:	e003      	b.n	6e98 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    6e90:	4b04      	ldr	r3, [pc, #16]	; (6ea4 <system_clock_source_get_hz+0xa4>)
    6e92:	68db      	ldr	r3, [r3, #12]
    6e94:	e000      	b.n	6e98 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    6e96:	2300      	movs	r3, #0
	}
}
    6e98:	0018      	movs	r0, r3
    6e9a:	46bd      	mov	sp, r7
    6e9c:	b002      	add	sp, #8
    6e9e:	bd80      	pop	{r7, pc}
    6ea0:	0000e484 	.word	0x0000e484
    6ea4:	20000110 	.word	0x20000110
    6ea8:	40000800 	.word	0x40000800
    6eac:	007a1200 	.word	0x007a1200
    6eb0:	00006da1 	.word	0x00006da1
    6eb4:	000079d1 	.word	0x000079d1
    6eb8:	02dc6c00 	.word	0x02dc6c00

00006ebc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6ebc:	b580      	push	{r7, lr}
    6ebe:	b084      	sub	sp, #16
    6ec0:	af00      	add	r7, sp, #0
    6ec2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    6ec4:	4b1a      	ldr	r3, [pc, #104]	; (6f30 <system_clock_source_osc8m_set_config+0x74>)
    6ec6:	6a1b      	ldr	r3, [r3, #32]
    6ec8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    6eca:	687b      	ldr	r3, [r7, #4]
    6ecc:	781b      	ldrb	r3, [r3, #0]
    6ece:	1c1a      	adds	r2, r3, #0
    6ed0:	2303      	movs	r3, #3
    6ed2:	4013      	ands	r3, r2
    6ed4:	b2da      	uxtb	r2, r3
    6ed6:	230d      	movs	r3, #13
    6ed8:	18fb      	adds	r3, r7, r3
    6eda:	2103      	movs	r1, #3
    6edc:	400a      	ands	r2, r1
    6ede:	0010      	movs	r0, r2
    6ee0:	781a      	ldrb	r2, [r3, #0]
    6ee2:	2103      	movs	r1, #3
    6ee4:	438a      	bics	r2, r1
    6ee6:	1c11      	adds	r1, r2, #0
    6ee8:	1c02      	adds	r2, r0, #0
    6eea:	430a      	orrs	r2, r1
    6eec:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	789a      	ldrb	r2, [r3, #2]
    6ef2:	230c      	movs	r3, #12
    6ef4:	18fb      	adds	r3, r7, r3
    6ef6:	01d0      	lsls	r0, r2, #7
    6ef8:	781a      	ldrb	r2, [r3, #0]
    6efa:	217f      	movs	r1, #127	; 0x7f
    6efc:	400a      	ands	r2, r1
    6efe:	1c11      	adds	r1, r2, #0
    6f00:	1c02      	adds	r2, r0, #0
    6f02:	430a      	orrs	r2, r1
    6f04:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6f06:	687b      	ldr	r3, [r7, #4]
    6f08:	785a      	ldrb	r2, [r3, #1]
    6f0a:	230c      	movs	r3, #12
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	2101      	movs	r1, #1
    6f10:	400a      	ands	r2, r1
    6f12:	0190      	lsls	r0, r2, #6
    6f14:	781a      	ldrb	r2, [r3, #0]
    6f16:	2140      	movs	r1, #64	; 0x40
    6f18:	438a      	bics	r2, r1
    6f1a:	1c11      	adds	r1, r2, #0
    6f1c:	1c02      	adds	r2, r0, #0
    6f1e:	430a      	orrs	r2, r1
    6f20:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    6f22:	4b03      	ldr	r3, [pc, #12]	; (6f30 <system_clock_source_osc8m_set_config+0x74>)
    6f24:	68fa      	ldr	r2, [r7, #12]
    6f26:	621a      	str	r2, [r3, #32]
}
    6f28:	46c0      	nop			; (mov r8, r8)
    6f2a:	46bd      	mov	sp, r7
    6f2c:	b004      	add	sp, #16
    6f2e:	bd80      	pop	{r7, pc}
    6f30:	40000800 	.word	0x40000800

00006f34 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6f34:	b580      	push	{r7, lr}
    6f36:	b084      	sub	sp, #16
    6f38:	af00      	add	r7, sp, #0
    6f3a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    6f3c:	4a43      	ldr	r2, [pc, #268]	; (704c <system_clock_source_xosc32k_set_config+0x118>)
    6f3e:	230c      	movs	r3, #12
    6f40:	18fb      	adds	r3, r7, r3
    6f42:	8a92      	ldrh	r2, [r2, #20]
    6f44:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    6f46:	687b      	ldr	r3, [r7, #4]
    6f48:	785b      	ldrb	r3, [r3, #1]
    6f4a:	1c1a      	adds	r2, r3, #0
    6f4c:	2307      	movs	r3, #7
    6f4e:	4013      	ands	r3, r2
    6f50:	b2da      	uxtb	r2, r3
    6f52:	230c      	movs	r3, #12
    6f54:	18fb      	adds	r3, r7, r3
    6f56:	2107      	movs	r1, #7
    6f58:	400a      	ands	r2, r1
    6f5a:	0010      	movs	r0, r2
    6f5c:	785a      	ldrb	r2, [r3, #1]
    6f5e:	2107      	movs	r1, #7
    6f60:	438a      	bics	r2, r1
    6f62:	1c11      	adds	r1, r2, #0
    6f64:	1c02      	adds	r2, r0, #0
    6f66:	430a      	orrs	r2, r1
    6f68:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	781b      	ldrb	r3, [r3, #0]
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d106      	bne.n	6f80 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    6f72:	230c      	movs	r3, #12
    6f74:	18fb      	adds	r3, r7, r3
    6f76:	781a      	ldrb	r2, [r3, #0]
    6f78:	2104      	movs	r1, #4
    6f7a:	430a      	orrs	r2, r1
    6f7c:	701a      	strb	r2, [r3, #0]
    6f7e:	e005      	b.n	6f8c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    6f80:	230c      	movs	r3, #12
    6f82:	18fb      	adds	r3, r7, r3
    6f84:	781a      	ldrb	r2, [r3, #0]
    6f86:	2104      	movs	r1, #4
    6f88:	438a      	bics	r2, r1
    6f8a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    6f8c:	687b      	ldr	r3, [r7, #4]
    6f8e:	789a      	ldrb	r2, [r3, #2]
    6f90:	230c      	movs	r3, #12
    6f92:	18fb      	adds	r3, r7, r3
    6f94:	2101      	movs	r1, #1
    6f96:	400a      	ands	r2, r1
    6f98:	0150      	lsls	r0, r2, #5
    6f9a:	781a      	ldrb	r2, [r3, #0]
    6f9c:	2120      	movs	r1, #32
    6f9e:	438a      	bics	r2, r1
    6fa0:	1c11      	adds	r1, r2, #0
    6fa2:	1c02      	adds	r2, r0, #0
    6fa4:	430a      	orrs	r2, r1
    6fa6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	78da      	ldrb	r2, [r3, #3]
    6fac:	230c      	movs	r3, #12
    6fae:	18fb      	adds	r3, r7, r3
    6fb0:	2101      	movs	r1, #1
    6fb2:	400a      	ands	r2, r1
    6fb4:	0110      	lsls	r0, r2, #4
    6fb6:	781a      	ldrb	r2, [r3, #0]
    6fb8:	2110      	movs	r1, #16
    6fba:	438a      	bics	r2, r1
    6fbc:	1c11      	adds	r1, r2, #0
    6fbe:	1c02      	adds	r2, r0, #0
    6fc0:	430a      	orrs	r2, r1
    6fc2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    6fc4:	687b      	ldr	r3, [r7, #4]
    6fc6:	791a      	ldrb	r2, [r3, #4]
    6fc8:	230c      	movs	r3, #12
    6fca:	18fb      	adds	r3, r7, r3
    6fcc:	2101      	movs	r1, #1
    6fce:	400a      	ands	r2, r1
    6fd0:	00d0      	lsls	r0, r2, #3
    6fd2:	781a      	ldrb	r2, [r3, #0]
    6fd4:	2108      	movs	r1, #8
    6fd6:	438a      	bics	r2, r1
    6fd8:	1c11      	adds	r1, r2, #0
    6fda:	1c02      	adds	r2, r0, #0
    6fdc:	430a      	orrs	r2, r1
    6fde:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	7b5a      	ldrb	r2, [r3, #13]
    6fe4:	230c      	movs	r3, #12
    6fe6:	18fb      	adds	r3, r7, r3
    6fe8:	01d0      	lsls	r0, r2, #7
    6fea:	781a      	ldrb	r2, [r3, #0]
    6fec:	217f      	movs	r1, #127	; 0x7f
    6fee:	400a      	ands	r2, r1
    6ff0:	1c11      	adds	r1, r2, #0
    6ff2:	1c02      	adds	r2, r0, #0
    6ff4:	430a      	orrs	r2, r1
    6ff6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6ff8:	687b      	ldr	r3, [r7, #4]
    6ffa:	7b1a      	ldrb	r2, [r3, #12]
    6ffc:	230c      	movs	r3, #12
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	2101      	movs	r1, #1
    7002:	400a      	ands	r2, r1
    7004:	0190      	lsls	r0, r2, #6
    7006:	781a      	ldrb	r2, [r3, #0]
    7008:	2140      	movs	r1, #64	; 0x40
    700a:	438a      	bics	r2, r1
    700c:	1c11      	adds	r1, r2, #0
    700e:	1c02      	adds	r2, r0, #0
    7010:	430a      	orrs	r2, r1
    7012:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    7014:	687b      	ldr	r3, [r7, #4]
    7016:	7b9a      	ldrb	r2, [r3, #14]
    7018:	230c      	movs	r3, #12
    701a:	18fb      	adds	r3, r7, r3
    701c:	2101      	movs	r1, #1
    701e:	400a      	ands	r2, r1
    7020:	0110      	lsls	r0, r2, #4
    7022:	785a      	ldrb	r2, [r3, #1]
    7024:	2110      	movs	r1, #16
    7026:	438a      	bics	r2, r1
    7028:	1c11      	adds	r1, r2, #0
    702a:	1c02      	adds	r2, r0, #0
    702c:	430a      	orrs	r2, r1
    702e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	689a      	ldr	r2, [r3, #8]
    7034:	4b06      	ldr	r3, [pc, #24]	; (7050 <system_clock_source_xosc32k_set_config+0x11c>)
    7036:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    7038:	4a04      	ldr	r2, [pc, #16]	; (704c <system_clock_source_xosc32k_set_config+0x118>)
    703a:	230c      	movs	r3, #12
    703c:	18fb      	adds	r3, r7, r3
    703e:	881b      	ldrh	r3, [r3, #0]
    7040:	8293      	strh	r3, [r2, #20]
}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	46bd      	mov	sp, r7
    7046:	b004      	add	sp, #16
    7048:	bd80      	pop	{r7, pc}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	40000800 	.word	0x40000800
    7050:	20000110 	.word	0x20000110

00007054 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    7054:	b580      	push	{r7, lr}
    7056:	b082      	sub	sp, #8
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    705c:	687b      	ldr	r3, [r7, #4]
    705e:	7a1b      	ldrb	r3, [r3, #8]
    7060:	029b      	lsls	r3, r3, #10
    7062:	041b      	lsls	r3, r3, #16
    7064:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	895b      	ldrh	r3, [r3, #10]
    706a:	059b      	lsls	r3, r3, #22
    706c:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    706e:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    7070:	4b2a      	ldr	r3, [pc, #168]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    7072:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    7078:	687b      	ldr	r3, [r7, #4]
    707a:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    707c:	4313      	orrs	r3, r2
    707e:	b2db      	uxtb	r3, r3
    7080:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    7082:	687b      	ldr	r3, [r7, #4]
    7084:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    7086:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    7088:	687a      	ldr	r2, [r7, #4]
    708a:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    708c:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	785b      	ldrb	r3, [r3, #1]
    7092:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    7094:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    7096:	4b21      	ldr	r3, [pc, #132]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    7098:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	781b      	ldrb	r3, [r3, #0]
    709e:	2b04      	cmp	r3, #4
    70a0:	d116      	bne.n	70d0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	7b1b      	ldrb	r3, [r3, #12]
    70a6:	069b      	lsls	r3, r3, #26
    70a8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	89db      	ldrh	r3, [r3, #14]
    70ae:	041b      	lsls	r3, r3, #16
    70b0:	0019      	movs	r1, r3
    70b2:	4b1b      	ldr	r3, [pc, #108]	; (7120 <system_clock_source_dfll_set_config+0xcc>)
    70b4:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    70b6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    70b8:	687a      	ldr	r2, [r7, #4]
    70ba:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    70bc:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    70be:	4b17      	ldr	r3, [pc, #92]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    70c0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    70c2:	4b16      	ldr	r3, [pc, #88]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    70c4:	681b      	ldr	r3, [r3, #0]
    70c6:	687a      	ldr	r2, [r7, #4]
    70c8:	7812      	ldrb	r2, [r2, #0]
    70ca:	431a      	orrs	r2, r3
    70cc:	4b13      	ldr	r3, [pc, #76]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    70ce:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	2b20      	cmp	r3, #32
    70d6:	d11c      	bne.n	7112 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    70d8:	687b      	ldr	r3, [r7, #4]
    70da:	7b1b      	ldrb	r3, [r3, #12]
    70dc:	069b      	lsls	r3, r3, #26
    70de:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    70e0:	687b      	ldr	r3, [r7, #4]
    70e2:	89db      	ldrh	r3, [r3, #14]
    70e4:	041b      	lsls	r3, r3, #16
    70e6:	0019      	movs	r1, r3
    70e8:	4b0d      	ldr	r3, [pc, #52]	; (7120 <system_clock_source_dfll_set_config+0xcc>)
    70ea:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    70ec:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    70ee:	687a      	ldr	r2, [r7, #4]
    70f0:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    70f2:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    70f4:	4b09      	ldr	r3, [pc, #36]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    70f6:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    70f8:	4b08      	ldr	r3, [pc, #32]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    70fa:	681b      	ldr	r3, [r3, #0]
    70fc:	687a      	ldr	r2, [r7, #4]
    70fe:	7812      	ldrb	r2, [r2, #0]
    7100:	2104      	movs	r1, #4
    7102:	430a      	orrs	r2, r1
    7104:	b2d2      	uxtb	r2, r2
    7106:	4313      	orrs	r3, r2
    7108:	2280      	movs	r2, #128	; 0x80
    710a:	00d2      	lsls	r2, r2, #3
    710c:	431a      	orrs	r2, r3
    710e:	4b03      	ldr	r3, [pc, #12]	; (711c <system_clock_source_dfll_set_config+0xc8>)
    7110:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    7112:	46c0      	nop			; (mov r8, r8)
    7114:	46bd      	mov	sp, r7
    7116:	b002      	add	sp, #8
    7118:	bd80      	pop	{r7, pc}
    711a:	46c0      	nop			; (mov r8, r8)
    711c:	20000110 	.word	0x20000110
    7120:	03ff0000 	.word	0x03ff0000

00007124 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    7124:	b580      	push	{r7, lr}
    7126:	b082      	sub	sp, #8
    7128:	af00      	add	r7, sp, #0
    712a:	0002      	movs	r2, r0
    712c:	1dfb      	adds	r3, r7, #7
    712e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    7130:	1dfb      	adds	r3, r7, #7
    7132:	781b      	ldrb	r3, [r3, #0]
    7134:	2b08      	cmp	r3, #8
    7136:	d83b      	bhi.n	71b0 <system_clock_source_enable+0x8c>
    7138:	009a      	lsls	r2, r3, #2
    713a:	4b21      	ldr	r3, [pc, #132]	; (71c0 <system_clock_source_enable+0x9c>)
    713c:	18d3      	adds	r3, r2, r3
    713e:	681b      	ldr	r3, [r3, #0]
    7140:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    7142:	4b20      	ldr	r3, [pc, #128]	; (71c4 <system_clock_source_enable+0xa0>)
    7144:	4a1f      	ldr	r2, [pc, #124]	; (71c4 <system_clock_source_enable+0xa0>)
    7146:	6a12      	ldr	r2, [r2, #32]
    7148:	2102      	movs	r1, #2
    714a:	430a      	orrs	r2, r1
    714c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    714e:	2300      	movs	r3, #0
    7150:	e031      	b.n	71b6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    7152:	4b1c      	ldr	r3, [pc, #112]	; (71c4 <system_clock_source_enable+0xa0>)
    7154:	4a1b      	ldr	r2, [pc, #108]	; (71c4 <system_clock_source_enable+0xa0>)
    7156:	6992      	ldr	r2, [r2, #24]
    7158:	2102      	movs	r1, #2
    715a:	430a      	orrs	r2, r1
    715c:	619a      	str	r2, [r3, #24]
		break;
    715e:	e029      	b.n	71b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    7160:	4a18      	ldr	r2, [pc, #96]	; (71c4 <system_clock_source_enable+0xa0>)
    7162:	4b18      	ldr	r3, [pc, #96]	; (71c4 <system_clock_source_enable+0xa0>)
    7164:	8a1b      	ldrh	r3, [r3, #16]
    7166:	b29b      	uxth	r3, r3
    7168:	2102      	movs	r1, #2
    716a:	430b      	orrs	r3, r1
    716c:	b29b      	uxth	r3, r3
    716e:	8213      	strh	r3, [r2, #16]
		break;
    7170:	e020      	b.n	71b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    7172:	4a14      	ldr	r2, [pc, #80]	; (71c4 <system_clock_source_enable+0xa0>)
    7174:	4b13      	ldr	r3, [pc, #76]	; (71c4 <system_clock_source_enable+0xa0>)
    7176:	8a9b      	ldrh	r3, [r3, #20]
    7178:	b29b      	uxth	r3, r3
    717a:	2102      	movs	r1, #2
    717c:	430b      	orrs	r3, r1
    717e:	b29b      	uxth	r3, r3
    7180:	8293      	strh	r3, [r2, #20]
		break;
    7182:	e017      	b.n	71b4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    7184:	4b10      	ldr	r3, [pc, #64]	; (71c8 <system_clock_source_enable+0xa4>)
    7186:	681b      	ldr	r3, [r3, #0]
    7188:	2202      	movs	r2, #2
    718a:	431a      	orrs	r2, r3
    718c:	4b0e      	ldr	r3, [pc, #56]	; (71c8 <system_clock_source_enable+0xa4>)
    718e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    7190:	4b0e      	ldr	r3, [pc, #56]	; (71cc <system_clock_source_enable+0xa8>)
    7192:	4798      	blx	r3
		break;
    7194:	e00e      	b.n	71b4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    7196:	4a0b      	ldr	r2, [pc, #44]	; (71c4 <system_clock_source_enable+0xa0>)
    7198:	490a      	ldr	r1, [pc, #40]	; (71c4 <system_clock_source_enable+0xa0>)
    719a:	2344      	movs	r3, #68	; 0x44
    719c:	5ccb      	ldrb	r3, [r1, r3]
    719e:	b2db      	uxtb	r3, r3
    71a0:	2102      	movs	r1, #2
    71a2:	430b      	orrs	r3, r1
    71a4:	b2d9      	uxtb	r1, r3
    71a6:	2344      	movs	r3, #68	; 0x44
    71a8:	54d1      	strb	r1, [r2, r3]
		break;
    71aa:	e003      	b.n	71b4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    71ac:	2300      	movs	r3, #0
    71ae:	e002      	b.n	71b6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    71b0:	2317      	movs	r3, #23
    71b2:	e000      	b.n	71b6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    71b4:	2300      	movs	r3, #0
}
    71b6:	0018      	movs	r0, r3
    71b8:	46bd      	mov	sp, r7
    71ba:	b002      	add	sp, #8
    71bc:	bd80      	pop	{r7, pc}
    71be:	46c0      	nop			; (mov r8, r8)
    71c0:	0000e4a8 	.word	0x0000e4a8
    71c4:	40000800 	.word	0x40000800
    71c8:	20000110 	.word	0x20000110
    71cc:	00006dbd 	.word	0x00006dbd

000071d0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    71d0:	b580      	push	{r7, lr}
    71d2:	b084      	sub	sp, #16
    71d4:	af00      	add	r7, sp, #0
    71d6:	0002      	movs	r2, r0
    71d8:	1dfb      	adds	r3, r7, #7
    71da:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    71dc:	2300      	movs	r3, #0
    71de:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    71e0:	1dfb      	adds	r3, r7, #7
    71e2:	781b      	ldrb	r3, [r3, #0]
    71e4:	2b08      	cmp	r3, #8
    71e6:	d821      	bhi.n	722c <system_clock_source_is_ready+0x5c>
    71e8:	009a      	lsls	r2, r3, #2
    71ea:	4b18      	ldr	r3, [pc, #96]	; (724c <system_clock_source_is_ready+0x7c>)
    71ec:	18d3      	adds	r3, r2, r3
    71ee:	681b      	ldr	r3, [r3, #0]
    71f0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    71f2:	2308      	movs	r3, #8
    71f4:	60fb      	str	r3, [r7, #12]
		break;
    71f6:	e01b      	b.n	7230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    71f8:	2304      	movs	r3, #4
    71fa:	60fb      	str	r3, [r7, #12]
		break;
    71fc:	e018      	b.n	7230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    71fe:	2301      	movs	r3, #1
    7200:	60fb      	str	r3, [r7, #12]
		break;
    7202:	e015      	b.n	7230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    7204:	2302      	movs	r3, #2
    7206:	60fb      	str	r3, [r7, #12]
		break;
    7208:	e012      	b.n	7230 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    720a:	23d0      	movs	r3, #208	; 0xd0
    720c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    720e:	e00f      	b.n	7230 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    7210:	4a0f      	ldr	r2, [pc, #60]	; (7250 <system_clock_source_is_ready+0x80>)
    7212:	2350      	movs	r3, #80	; 0x50
    7214:	5cd3      	ldrb	r3, [r2, r3]
    7216:	b2db      	uxtb	r3, r3
    7218:	001a      	movs	r2, r3
    721a:	2303      	movs	r3, #3
    721c:	4013      	ands	r3, r2
    721e:	3b03      	subs	r3, #3
    7220:	425a      	negs	r2, r3
    7222:	4153      	adcs	r3, r2
    7224:	b2db      	uxtb	r3, r3
    7226:	e00c      	b.n	7242 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    7228:	2301      	movs	r3, #1
    722a:	e00a      	b.n	7242 <system_clock_source_is_ready+0x72>

	default:
		return false;
    722c:	2300      	movs	r3, #0
    722e:	e008      	b.n	7242 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    7230:	4b07      	ldr	r3, [pc, #28]	; (7250 <system_clock_source_is_ready+0x80>)
    7232:	68db      	ldr	r3, [r3, #12]
    7234:	68fa      	ldr	r2, [r7, #12]
    7236:	401a      	ands	r2, r3
    7238:	68fb      	ldr	r3, [r7, #12]
    723a:	1ad3      	subs	r3, r2, r3
    723c:	425a      	negs	r2, r3
    723e:	4153      	adcs	r3, r2
    7240:	b2db      	uxtb	r3, r3
}
    7242:	0018      	movs	r0, r3
    7244:	46bd      	mov	sp, r7
    7246:	b004      	add	sp, #16
    7248:	bd80      	pop	{r7, pc}
    724a:	46c0      	nop			; (mov r8, r8)
    724c:	0000e4cc 	.word	0x0000e4cc
    7250:	40000800 	.word	0x40000800

00007254 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    7254:	b580      	push	{r7, lr}
    7256:	b082      	sub	sp, #8
    7258:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    725a:	003b      	movs	r3, r7
    725c:	2202      	movs	r2, #2
    725e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7260:	2300      	movs	r3, #0
    7262:	607b      	str	r3, [r7, #4]
    7264:	e009      	b.n	727a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    7266:	687b      	ldr	r3, [r7, #4]
    7268:	b2db      	uxtb	r3, r3
    726a:	003a      	movs	r2, r7
    726c:	0011      	movs	r1, r2
    726e:	0018      	movs	r0, r3
    7270:	4b05      	ldr	r3, [pc, #20]	; (7288 <_switch_peripheral_gclk+0x34>)
    7272:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    7274:	687b      	ldr	r3, [r7, #4]
    7276:	3301      	adds	r3, #1
    7278:	607b      	str	r3, [r7, #4]
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	2b24      	cmp	r3, #36	; 0x24
    727e:	d9f2      	bls.n	7266 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    7280:	46c0      	nop			; (mov r8, r8)
    7282:	46bd      	mov	sp, r7
    7284:	b002      	add	sp, #8
    7286:	bd80      	pop	{r7, pc}
    7288:	000078ad 	.word	0x000078ad

0000728c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    728c:	b580      	push	{r7, lr}
    728e:	b0aa      	sub	sp, #168	; 0xa8
    7290:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    7292:	4ba5      	ldr	r3, [pc, #660]	; (7528 <system_clock_init+0x29c>)
    7294:	22c2      	movs	r2, #194	; 0xc2
    7296:	00d2      	lsls	r2, r2, #3
    7298:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    729a:	2002      	movs	r0, #2
    729c:	4ba3      	ldr	r3, [pc, #652]	; (752c <system_clock_init+0x2a0>)
    729e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    72a0:	4ba3      	ldr	r3, [pc, #652]	; (7530 <system_clock_init+0x2a4>)
    72a2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    72a4:	2394      	movs	r3, #148	; 0x94
    72a6:	18fb      	adds	r3, r7, r3
    72a8:	0018      	movs	r0, r3
    72aa:	4ba2      	ldr	r3, [pc, #648]	; (7534 <system_clock_init+0x2a8>)
    72ac:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    72ae:	2394      	movs	r3, #148	; 0x94
    72b0:	18fb      	adds	r3, r7, r3
    72b2:	2280      	movs	r2, #128	; 0x80
    72b4:	0212      	lsls	r2, r2, #8
    72b6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    72b8:	2394      	movs	r3, #148	; 0x94
    72ba:	18fb      	adds	r3, r7, r3
    72bc:	2200      	movs	r2, #0
    72be:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    72c0:	2394      	movs	r3, #148	; 0x94
    72c2:	18fb      	adds	r3, r7, r3
    72c4:	2203      	movs	r2, #3
    72c6:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    72c8:	2394      	movs	r3, #148	; 0x94
    72ca:	18fb      	adds	r3, r7, r3
    72cc:	2200      	movs	r2, #0
    72ce:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    72d0:	2394      	movs	r3, #148	; 0x94
    72d2:	18fb      	adds	r3, r7, r3
    72d4:	2200      	movs	r2, #0
    72d6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    72d8:	2394      	movs	r3, #148	; 0x94
    72da:	18fb      	adds	r3, r7, r3
    72dc:	2201      	movs	r2, #1
    72de:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    72e0:	2394      	movs	r3, #148	; 0x94
    72e2:	18fb      	adds	r3, r7, r3
    72e4:	2200      	movs	r2, #0
    72e6:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    72e8:	2394      	movs	r3, #148	; 0x94
    72ea:	18fb      	adds	r3, r7, r3
    72ec:	2200      	movs	r2, #0
    72ee:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    72f0:	2394      	movs	r3, #148	; 0x94
    72f2:	18fb      	adds	r3, r7, r3
    72f4:	0018      	movs	r0, r3
    72f6:	4b90      	ldr	r3, [pc, #576]	; (7538 <system_clock_init+0x2ac>)
    72f8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    72fa:	2005      	movs	r0, #5
    72fc:	4b8f      	ldr	r3, [pc, #572]	; (753c <system_clock_init+0x2b0>)
    72fe:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    7300:	46c0      	nop			; (mov r8, r8)
    7302:	2005      	movs	r0, #5
    7304:	4b8e      	ldr	r3, [pc, #568]	; (7540 <system_clock_init+0x2b4>)
    7306:	4798      	blx	r3
    7308:	0003      	movs	r3, r0
    730a:	001a      	movs	r2, r3
    730c:	2301      	movs	r3, #1
    730e:	4053      	eors	r3, r2
    7310:	b2db      	uxtb	r3, r3
    7312:	2b00      	cmp	r3, #0
    7314:	d1f5      	bne.n	7302 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    7316:	4a84      	ldr	r2, [pc, #528]	; (7528 <system_clock_init+0x29c>)
    7318:	8a93      	ldrh	r3, [r2, #20]
    731a:	2180      	movs	r1, #128	; 0x80
    731c:	430b      	orrs	r3, r1
    731e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    7320:	2380      	movs	r3, #128	; 0x80
    7322:	18fb      	adds	r3, r7, r3
    7324:	0018      	movs	r0, r3
    7326:	4b87      	ldr	r3, [pc, #540]	; (7544 <system_clock_init+0x2b8>)
    7328:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    732a:	2380      	movs	r3, #128	; 0x80
    732c:	18fb      	adds	r3, r7, r3
    732e:	2204      	movs	r2, #4
    7330:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    7332:	2380      	movs	r3, #128	; 0x80
    7334:	18fb      	adds	r3, r7, r3
    7336:	2200      	movs	r2, #0
    7338:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    733a:	4b83      	ldr	r3, [pc, #524]	; (7548 <system_clock_init+0x2bc>)
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	0e9b      	lsrs	r3, r3, #26
    7340:	22a4      	movs	r2, #164	; 0xa4
    7342:	18ba      	adds	r2, r7, r2
    7344:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    7346:	23a4      	movs	r3, #164	; 0xa4
    7348:	18fb      	adds	r3, r7, r3
    734a:	681b      	ldr	r3, [r3, #0]
    734c:	2b3f      	cmp	r3, #63	; 0x3f
    734e:	d103      	bne.n	7358 <system_clock_init+0xcc>
		coarse = 0x1f;
    7350:	231f      	movs	r3, #31
    7352:	22a4      	movs	r2, #164	; 0xa4
    7354:	18ba      	adds	r2, r7, r2
    7356:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    7358:	23a4      	movs	r3, #164	; 0xa4
    735a:	18fb      	adds	r3, r7, r3
    735c:	681b      	ldr	r3, [r3, #0]
    735e:	b2da      	uxtb	r2, r3
    7360:	2380      	movs	r3, #128	; 0x80
    7362:	18fb      	adds	r3, r7, r3
    7364:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    7366:	2380      	movs	r3, #128	; 0x80
    7368:	18fb      	adds	r3, r7, r3
    736a:	2200      	movs	r2, #0
    736c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    736e:	2380      	movs	r3, #128	; 0x80
    7370:	18fb      	adds	r3, r7, r3
    7372:	2200      	movs	r2, #0
    7374:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    7376:	2380      	movs	r3, #128	; 0x80
    7378:	18fb      	adds	r3, r7, r3
    737a:	2200      	movs	r2, #0
    737c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    737e:	2380      	movs	r3, #128	; 0x80
    7380:	18fb      	adds	r3, r7, r3
    7382:	2200      	movs	r2, #0
    7384:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    7386:	2380      	movs	r3, #128	; 0x80
    7388:	18fb      	adds	r3, r7, r3
    738a:	4a70      	ldr	r2, [pc, #448]	; (754c <system_clock_init+0x2c0>)
    738c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    738e:	2380      	movs	r3, #128	; 0x80
    7390:	18fb      	adds	r3, r7, r3
    7392:	2207      	movs	r2, #7
    7394:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    7396:	2380      	movs	r3, #128	; 0x80
    7398:	18fb      	adds	r3, r7, r3
    739a:	223f      	movs	r2, #63	; 0x3f
    739c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    739e:	2380      	movs	r3, #128	; 0x80
    73a0:	18fb      	adds	r3, r7, r3
    73a2:	0018      	movs	r0, r3
    73a4:	4b6a      	ldr	r3, [pc, #424]	; (7550 <system_clock_init+0x2c4>)
    73a6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    73a8:	237c      	movs	r3, #124	; 0x7c
    73aa:	18fb      	adds	r3, r7, r3
    73ac:	0018      	movs	r0, r3
    73ae:	4b69      	ldr	r3, [pc, #420]	; (7554 <system_clock_init+0x2c8>)
    73b0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    73b2:	237c      	movs	r3, #124	; 0x7c
    73b4:	18fb      	adds	r3, r7, r3
    73b6:	2200      	movs	r2, #0
    73b8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    73ba:	237c      	movs	r3, #124	; 0x7c
    73bc:	18fb      	adds	r3, r7, r3
    73be:	2201      	movs	r2, #1
    73c0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    73c2:	237c      	movs	r3, #124	; 0x7c
    73c4:	18fb      	adds	r3, r7, r3
    73c6:	2200      	movs	r2, #0
    73c8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    73ca:	237c      	movs	r3, #124	; 0x7c
    73cc:	18fb      	adds	r3, r7, r3
    73ce:	0018      	movs	r0, r3
    73d0:	4b61      	ldr	r3, [pc, #388]	; (7558 <system_clock_init+0x2cc>)
    73d2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    73d4:	2006      	movs	r0, #6
    73d6:	4b59      	ldr	r3, [pc, #356]	; (753c <system_clock_init+0x2b0>)
    73d8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    73da:	4b60      	ldr	r3, [pc, #384]	; (755c <system_clock_init+0x2d0>)
    73dc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    73de:	2364      	movs	r3, #100	; 0x64
    73e0:	18fb      	adds	r3, r7, r3
    73e2:	0018      	movs	r0, r3
    73e4:	4b5e      	ldr	r3, [pc, #376]	; (7560 <system_clock_init+0x2d4>)
    73e6:	4798      	blx	r3
    73e8:	2364      	movs	r3, #100	; 0x64
    73ea:	18fb      	adds	r3, r7, r3
    73ec:	2205      	movs	r2, #5
    73ee:	701a      	strb	r2, [r3, #0]
    73f0:	2364      	movs	r3, #100	; 0x64
    73f2:	18fb      	adds	r3, r7, r3
    73f4:	2201      	movs	r2, #1
    73f6:	605a      	str	r2, [r3, #4]
    73f8:	2364      	movs	r3, #100	; 0x64
    73fa:	18fb      	adds	r3, r7, r3
    73fc:	2200      	movs	r2, #0
    73fe:	721a      	strb	r2, [r3, #8]
    7400:	2364      	movs	r3, #100	; 0x64
    7402:	18fb      	adds	r3, r7, r3
    7404:	2200      	movs	r2, #0
    7406:	725a      	strb	r2, [r3, #9]
    7408:	2364      	movs	r3, #100	; 0x64
    740a:	18fb      	adds	r3, r7, r3
    740c:	0019      	movs	r1, r3
    740e:	2001      	movs	r0, #1
    7410:	4b54      	ldr	r3, [pc, #336]	; (7564 <system_clock_init+0x2d8>)
    7412:	4798      	blx	r3
    7414:	2001      	movs	r0, #1
    7416:	4b54      	ldr	r3, [pc, #336]	; (7568 <system_clock_init+0x2dc>)
    7418:	4798      	blx	r3
    741a:	2340      	movs	r3, #64	; 0x40
    741c:	18fb      	adds	r3, r7, r3
    741e:	0018      	movs	r0, r3
    7420:	4b4f      	ldr	r3, [pc, #316]	; (7560 <system_clock_init+0x2d4>)
    7422:	4798      	blx	r3
    7424:	2340      	movs	r3, #64	; 0x40
    7426:	18fb      	adds	r3, r7, r3
    7428:	2206      	movs	r2, #6
    742a:	701a      	strb	r2, [r3, #0]
    742c:	2340      	movs	r3, #64	; 0x40
    742e:	18fb      	adds	r3, r7, r3
    7430:	2202      	movs	r2, #2
    7432:	605a      	str	r2, [r3, #4]
    7434:	2340      	movs	r3, #64	; 0x40
    7436:	18fb      	adds	r3, r7, r3
    7438:	2200      	movs	r2, #0
    743a:	721a      	strb	r2, [r3, #8]
    743c:	2340      	movs	r3, #64	; 0x40
    743e:	18fb      	adds	r3, r7, r3
    7440:	2201      	movs	r2, #1
    7442:	725a      	strb	r2, [r3, #9]
    7444:	2340      	movs	r3, #64	; 0x40
    7446:	18fb      	adds	r3, r7, r3
    7448:	0019      	movs	r1, r3
    744a:	2004      	movs	r0, #4
    744c:	4b45      	ldr	r3, [pc, #276]	; (7564 <system_clock_init+0x2d8>)
    744e:	4798      	blx	r3
    7450:	2004      	movs	r0, #4
    7452:	4b45      	ldr	r3, [pc, #276]	; (7568 <system_clock_init+0x2dc>)
    7454:	4798      	blx	r3
    7456:	2334      	movs	r3, #52	; 0x34
    7458:	18fb      	adds	r3, r7, r3
    745a:	0018      	movs	r0, r3
    745c:	4b40      	ldr	r3, [pc, #256]	; (7560 <system_clock_init+0x2d4>)
    745e:	4798      	blx	r3
    7460:	2334      	movs	r3, #52	; 0x34
    7462:	18fb      	adds	r3, r7, r3
    7464:	2206      	movs	r2, #6
    7466:	701a      	strb	r2, [r3, #0]
    7468:	2334      	movs	r3, #52	; 0x34
    746a:	18fb      	adds	r3, r7, r3
    746c:	2210      	movs	r2, #16
    746e:	605a      	str	r2, [r3, #4]
    7470:	2334      	movs	r3, #52	; 0x34
    7472:	18fb      	adds	r3, r7, r3
    7474:	2200      	movs	r2, #0
    7476:	721a      	strb	r2, [r3, #8]
    7478:	2334      	movs	r3, #52	; 0x34
    747a:	18fb      	adds	r3, r7, r3
    747c:	2201      	movs	r2, #1
    747e:	725a      	strb	r2, [r3, #9]
    7480:	2334      	movs	r3, #52	; 0x34
    7482:	18fb      	adds	r3, r7, r3
    7484:	0019      	movs	r1, r3
    7486:	2005      	movs	r0, #5
    7488:	4b36      	ldr	r3, [pc, #216]	; (7564 <system_clock_init+0x2d8>)
    748a:	4798      	blx	r3
    748c:	2005      	movs	r0, #5
    748e:	4b36      	ldr	r3, [pc, #216]	; (7568 <system_clock_init+0x2dc>)
    7490:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    7492:	230c      	movs	r3, #12
    7494:	18fb      	adds	r3, r7, r3
    7496:	0018      	movs	r0, r3
    7498:	4b34      	ldr	r3, [pc, #208]	; (756c <system_clock_init+0x2e0>)
    749a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    749c:	230c      	movs	r3, #12
    749e:	18fb      	adds	r3, r7, r3
    74a0:	2201      	movs	r2, #1
    74a2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    74a4:	230c      	movs	r3, #12
    74a6:	18fb      	adds	r3, r7, r3
    74a8:	0019      	movs	r1, r3
    74aa:	2000      	movs	r0, #0
    74ac:	4b30      	ldr	r3, [pc, #192]	; (7570 <system_clock_init+0x2e4>)
    74ae:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    74b0:	2000      	movs	r0, #0
    74b2:	4b30      	ldr	r3, [pc, #192]	; (7574 <system_clock_init+0x2e8>)
    74b4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    74b6:	2007      	movs	r0, #7
    74b8:	4b20      	ldr	r3, [pc, #128]	; (753c <system_clock_init+0x2b0>)
    74ba:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    74bc:	46c0      	nop			; (mov r8, r8)
    74be:	2007      	movs	r0, #7
    74c0:	4b1f      	ldr	r3, [pc, #124]	; (7540 <system_clock_init+0x2b4>)
    74c2:	4798      	blx	r3
    74c4:	0003      	movs	r3, r0
    74c6:	001a      	movs	r2, r3
    74c8:	2301      	movs	r3, #1
    74ca:	4053      	eors	r3, r2
    74cc:	b2db      	uxtb	r3, r3
    74ce:	2b00      	cmp	r3, #0
    74d0:	d1f5      	bne.n	74be <system_clock_init+0x232>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    74d2:	2000      	movs	r0, #0
    74d4:	4b28      	ldr	r3, [pc, #160]	; (7578 <system_clock_init+0x2ec>)
    74d6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    74d8:	2100      	movs	r1, #0
    74da:	2000      	movs	r0, #0
    74dc:	4b27      	ldr	r3, [pc, #156]	; (757c <system_clock_init+0x2f0>)
    74de:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    74e0:	2100      	movs	r1, #0
    74e2:	2001      	movs	r0, #1
    74e4:	4b25      	ldr	r3, [pc, #148]	; (757c <system_clock_init+0x2f0>)
    74e6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    74e8:	2100      	movs	r1, #0
    74ea:	2002      	movs	r0, #2
    74ec:	4b23      	ldr	r3, [pc, #140]	; (757c <system_clock_init+0x2f0>)
    74ee:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    74f0:	003b      	movs	r3, r7
    74f2:	0018      	movs	r0, r3
    74f4:	4b1a      	ldr	r3, [pc, #104]	; (7560 <system_clock_init+0x2d4>)
    74f6:	4798      	blx	r3
    74f8:	003b      	movs	r3, r7
    74fa:	2207      	movs	r2, #7
    74fc:	701a      	strb	r2, [r3, #0]
    74fe:	003b      	movs	r3, r7
    7500:	2201      	movs	r2, #1
    7502:	605a      	str	r2, [r3, #4]
    7504:	003b      	movs	r3, r7
    7506:	2200      	movs	r2, #0
    7508:	721a      	strb	r2, [r3, #8]
    750a:	003b      	movs	r3, r7
    750c:	2200      	movs	r2, #0
    750e:	725a      	strb	r2, [r3, #9]
    7510:	003b      	movs	r3, r7
    7512:	0019      	movs	r1, r3
    7514:	2000      	movs	r0, #0
    7516:	4b13      	ldr	r3, [pc, #76]	; (7564 <system_clock_init+0x2d8>)
    7518:	4798      	blx	r3
    751a:	2000      	movs	r0, #0
    751c:	4b12      	ldr	r3, [pc, #72]	; (7568 <system_clock_init+0x2dc>)
    751e:	4798      	blx	r3
#endif
}
    7520:	46c0      	nop			; (mov r8, r8)
    7522:	46bd      	mov	sp, r7
    7524:	b02a      	add	sp, #168	; 0xa8
    7526:	bd80      	pop	{r7, pc}
    7528:	40000800 	.word	0x40000800
    752c:	00006d6d 	.word	0x00006d6d
    7530:	00007255 	.word	0x00007255
    7534:	00006c39 	.word	0x00006c39
    7538:	00006f35 	.word	0x00006f35
    753c:	00007125 	.word	0x00007125
    7540:	000071d1 	.word	0x000071d1
    7544:	00006ca5 	.word	0x00006ca5
    7548:	00806024 	.word	0x00806024
    754c:	000005b9 	.word	0x000005b9
    7550:	00007055 	.word	0x00007055
    7554:	00006c81 	.word	0x00006c81
    7558:	00006ebd 	.word	0x00006ebd
    755c:	00007625 	.word	0x00007625
    7560:	00006bf1 	.word	0x00006bf1
    7564:	00007655 	.word	0x00007655
    7568:	00007779 	.word	0x00007779
    756c:	00006c21 	.word	0x00006c21
    7570:	000078ad 	.word	0x000078ad
    7574:	000078f1 	.word	0x000078f1
    7578:	00006cf9 	.word	0x00006cf9
    757c:	00006d19 	.word	0x00006d19

00007580 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    7580:	b580      	push	{r7, lr}
    7582:	b082      	sub	sp, #8
    7584:	af00      	add	r7, sp, #0
    7586:	0002      	movs	r2, r0
    7588:	6039      	str	r1, [r7, #0]
    758a:	1dfb      	adds	r3, r7, #7
    758c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    758e:	1dfb      	adds	r3, r7, #7
    7590:	781b      	ldrb	r3, [r3, #0]
    7592:	2b01      	cmp	r3, #1
    7594:	d00a      	beq.n	75ac <system_apb_clock_set_mask+0x2c>
    7596:	2b02      	cmp	r3, #2
    7598:	d00f      	beq.n	75ba <system_apb_clock_set_mask+0x3a>
    759a:	2b00      	cmp	r3, #0
    759c:	d114      	bne.n	75c8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    759e:	4b0e      	ldr	r3, [pc, #56]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75a0:	4a0d      	ldr	r2, [pc, #52]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75a2:	6991      	ldr	r1, [r2, #24]
    75a4:	683a      	ldr	r2, [r7, #0]
    75a6:	430a      	orrs	r2, r1
    75a8:	619a      	str	r2, [r3, #24]
			break;
    75aa:	e00f      	b.n	75cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    75ac:	4b0a      	ldr	r3, [pc, #40]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75ae:	4a0a      	ldr	r2, [pc, #40]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75b0:	69d1      	ldr	r1, [r2, #28]
    75b2:	683a      	ldr	r2, [r7, #0]
    75b4:	430a      	orrs	r2, r1
    75b6:	61da      	str	r2, [r3, #28]
			break;
    75b8:	e008      	b.n	75cc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    75ba:	4b07      	ldr	r3, [pc, #28]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75bc:	4a06      	ldr	r2, [pc, #24]	; (75d8 <system_apb_clock_set_mask+0x58>)
    75be:	6a11      	ldr	r1, [r2, #32]
    75c0:	683a      	ldr	r2, [r7, #0]
    75c2:	430a      	orrs	r2, r1
    75c4:	621a      	str	r2, [r3, #32]
			break;
    75c6:	e001      	b.n	75cc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    75c8:	2317      	movs	r3, #23
    75ca:	e000      	b.n	75ce <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    75cc:	2300      	movs	r3, #0
}
    75ce:	0018      	movs	r0, r3
    75d0:	46bd      	mov	sp, r7
    75d2:	b002      	add	sp, #8
    75d4:	bd80      	pop	{r7, pc}
    75d6:	46c0      	nop			; (mov r8, r8)
    75d8:	40000400 	.word	0x40000400

000075dc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    75dc:	b580      	push	{r7, lr}
    75de:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    75e0:	4b02      	ldr	r3, [pc, #8]	; (75ec <system_interrupt_enter_critical_section+0x10>)
    75e2:	4798      	blx	r3
}
    75e4:	46c0      	nop			; (mov r8, r8)
    75e6:	46bd      	mov	sp, r7
    75e8:	bd80      	pop	{r7, pc}
    75ea:	46c0      	nop			; (mov r8, r8)
    75ec:	00004351 	.word	0x00004351

000075f0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    75f0:	b580      	push	{r7, lr}
    75f2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    75f4:	4b02      	ldr	r3, [pc, #8]	; (7600 <system_interrupt_leave_critical_section+0x10>)
    75f6:	4798      	blx	r3
}
    75f8:	46c0      	nop			; (mov r8, r8)
    75fa:	46bd      	mov	sp, r7
    75fc:	bd80      	pop	{r7, pc}
    75fe:	46c0      	nop			; (mov r8, r8)
    7600:	000043a5 	.word	0x000043a5

00007604 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    7604:	b580      	push	{r7, lr}
    7606:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    7608:	4b05      	ldr	r3, [pc, #20]	; (7620 <system_gclk_is_syncing+0x1c>)
    760a:	785b      	ldrb	r3, [r3, #1]
    760c:	b2db      	uxtb	r3, r3
    760e:	b25b      	sxtb	r3, r3
    7610:	2b00      	cmp	r3, #0
    7612:	da01      	bge.n	7618 <system_gclk_is_syncing+0x14>
		return true;
    7614:	2301      	movs	r3, #1
    7616:	e000      	b.n	761a <system_gclk_is_syncing+0x16>
	}

	return false;
    7618:	2300      	movs	r3, #0
}
    761a:	0018      	movs	r0, r3
    761c:	46bd      	mov	sp, r7
    761e:	bd80      	pop	{r7, pc}
    7620:	40000c00 	.word	0x40000c00

00007624 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    7624:	b580      	push	{r7, lr}
    7626:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    7628:	2108      	movs	r1, #8
    762a:	2000      	movs	r0, #0
    762c:	4b07      	ldr	r3, [pc, #28]	; (764c <system_gclk_init+0x28>)
    762e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    7630:	4b07      	ldr	r3, [pc, #28]	; (7650 <system_gclk_init+0x2c>)
    7632:	2201      	movs	r2, #1
    7634:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    7636:	46c0      	nop			; (mov r8, r8)
    7638:	4b05      	ldr	r3, [pc, #20]	; (7650 <system_gclk_init+0x2c>)
    763a:	781b      	ldrb	r3, [r3, #0]
    763c:	b2db      	uxtb	r3, r3
    763e:	001a      	movs	r2, r3
    7640:	2301      	movs	r3, #1
    7642:	4013      	ands	r3, r2
    7644:	d1f8      	bne.n	7638 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    7646:	46c0      	nop			; (mov r8, r8)
    7648:	46bd      	mov	sp, r7
    764a:	bd80      	pop	{r7, pc}
    764c:	00007581 	.word	0x00007581
    7650:	40000c00 	.word	0x40000c00

00007654 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7654:	b580      	push	{r7, lr}
    7656:	b086      	sub	sp, #24
    7658:	af00      	add	r7, sp, #0
    765a:	0002      	movs	r2, r0
    765c:	6039      	str	r1, [r7, #0]
    765e:	1dfb      	adds	r3, r7, #7
    7660:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    7662:	1dfb      	adds	r3, r7, #7
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    7668:	1dfb      	adds	r3, r7, #7
    766a:	781b      	ldrb	r3, [r3, #0]
    766c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    766e:	683b      	ldr	r3, [r7, #0]
    7670:	781b      	ldrb	r3, [r3, #0]
    7672:	021b      	lsls	r3, r3, #8
    7674:	001a      	movs	r2, r3
    7676:	697b      	ldr	r3, [r7, #20]
    7678:	4313      	orrs	r3, r2
    767a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    767c:	683b      	ldr	r3, [r7, #0]
    767e:	785b      	ldrb	r3, [r3, #1]
    7680:	2b00      	cmp	r3, #0
    7682:	d004      	beq.n	768e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7684:	697b      	ldr	r3, [r7, #20]
    7686:	2280      	movs	r2, #128	; 0x80
    7688:	02d2      	lsls	r2, r2, #11
    768a:	4313      	orrs	r3, r2
    768c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    768e:	683b      	ldr	r3, [r7, #0]
    7690:	7a5b      	ldrb	r3, [r3, #9]
    7692:	2b00      	cmp	r3, #0
    7694:	d004      	beq.n	76a0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7696:	697b      	ldr	r3, [r7, #20]
    7698:	2280      	movs	r2, #128	; 0x80
    769a:	0312      	lsls	r2, r2, #12
    769c:	4313      	orrs	r3, r2
    769e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    76a0:	683b      	ldr	r3, [r7, #0]
    76a2:	685b      	ldr	r3, [r3, #4]
    76a4:	2b01      	cmp	r3, #1
    76a6:	d92c      	bls.n	7702 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    76a8:	683b      	ldr	r3, [r7, #0]
    76aa:	685a      	ldr	r2, [r3, #4]
    76ac:	683b      	ldr	r3, [r7, #0]
    76ae:	685b      	ldr	r3, [r3, #4]
    76b0:	3b01      	subs	r3, #1
    76b2:	4013      	ands	r3, r2
    76b4:	d11a      	bne.n	76ec <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    76b6:	2300      	movs	r3, #0
    76b8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    76ba:	2302      	movs	r3, #2
    76bc:	60bb      	str	r3, [r7, #8]
    76be:	e005      	b.n	76cc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	3301      	adds	r3, #1
    76c4:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    76c6:	68bb      	ldr	r3, [r7, #8]
    76c8:	005b      	lsls	r3, r3, #1
    76ca:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    76cc:	683b      	ldr	r3, [r7, #0]
    76ce:	685a      	ldr	r2, [r3, #4]
    76d0:	68bb      	ldr	r3, [r7, #8]
    76d2:	429a      	cmp	r2, r3
    76d4:	d8f4      	bhi.n	76c0 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    76d6:	68fb      	ldr	r3, [r7, #12]
    76d8:	021b      	lsls	r3, r3, #8
    76da:	693a      	ldr	r2, [r7, #16]
    76dc:	4313      	orrs	r3, r2
    76de:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    76e0:	697b      	ldr	r3, [r7, #20]
    76e2:	2280      	movs	r2, #128	; 0x80
    76e4:	0352      	lsls	r2, r2, #13
    76e6:	4313      	orrs	r3, r2
    76e8:	617b      	str	r3, [r7, #20]
    76ea:	e00a      	b.n	7702 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    76ec:	683b      	ldr	r3, [r7, #0]
    76ee:	685b      	ldr	r3, [r3, #4]
    76f0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    76f2:	693a      	ldr	r2, [r7, #16]
    76f4:	4313      	orrs	r3, r2
    76f6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    76f8:	697b      	ldr	r3, [r7, #20]
    76fa:	2280      	movs	r2, #128	; 0x80
    76fc:	0292      	lsls	r2, r2, #10
    76fe:	4313      	orrs	r3, r2
    7700:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7702:	683b      	ldr	r3, [r7, #0]
    7704:	7a1b      	ldrb	r3, [r3, #8]
    7706:	2b00      	cmp	r3, #0
    7708:	d004      	beq.n	7714 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    770a:	697b      	ldr	r3, [r7, #20]
    770c:	2280      	movs	r2, #128	; 0x80
    770e:	0392      	lsls	r2, r2, #14
    7710:	4313      	orrs	r3, r2
    7712:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    7714:	46c0      	nop			; (mov r8, r8)
    7716:	4b13      	ldr	r3, [pc, #76]	; (7764 <system_gclk_gen_set_config+0x110>)
    7718:	4798      	blx	r3
    771a:	1e03      	subs	r3, r0, #0
    771c:	d1fb      	bne.n	7716 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    771e:	4b12      	ldr	r3, [pc, #72]	; (7768 <system_gclk_gen_set_config+0x114>)
    7720:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    7722:	4a12      	ldr	r2, [pc, #72]	; (776c <system_gclk_gen_set_config+0x118>)
    7724:	1dfb      	adds	r3, r7, #7
    7726:	781b      	ldrb	r3, [r3, #0]
    7728:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    772a:	46c0      	nop			; (mov r8, r8)
    772c:	4b0d      	ldr	r3, [pc, #52]	; (7764 <system_gclk_gen_set_config+0x110>)
    772e:	4798      	blx	r3
    7730:	1e03      	subs	r3, r0, #0
    7732:	d1fb      	bne.n	772c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    7734:	4b0e      	ldr	r3, [pc, #56]	; (7770 <system_gclk_gen_set_config+0x11c>)
    7736:	693a      	ldr	r2, [r7, #16]
    7738:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    773a:	46c0      	nop			; (mov r8, r8)
    773c:	4b09      	ldr	r3, [pc, #36]	; (7764 <system_gclk_gen_set_config+0x110>)
    773e:	4798      	blx	r3
    7740:	1e03      	subs	r3, r0, #0
    7742:	d1fb      	bne.n	773c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    7744:	4b0a      	ldr	r3, [pc, #40]	; (7770 <system_gclk_gen_set_config+0x11c>)
    7746:	4a0a      	ldr	r2, [pc, #40]	; (7770 <system_gclk_gen_set_config+0x11c>)
    7748:	6851      	ldr	r1, [r2, #4]
    774a:	2280      	movs	r2, #128	; 0x80
    774c:	0252      	lsls	r2, r2, #9
    774e:	4011      	ands	r1, r2
    7750:	697a      	ldr	r2, [r7, #20]
    7752:	430a      	orrs	r2, r1
    7754:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    7756:	4b07      	ldr	r3, [pc, #28]	; (7774 <system_gclk_gen_set_config+0x120>)
    7758:	4798      	blx	r3
}
    775a:	46c0      	nop			; (mov r8, r8)
    775c:	46bd      	mov	sp, r7
    775e:	b006      	add	sp, #24
    7760:	bd80      	pop	{r7, pc}
    7762:	46c0      	nop			; (mov r8, r8)
    7764:	00007605 	.word	0x00007605
    7768:	000075dd 	.word	0x000075dd
    776c:	40000c08 	.word	0x40000c08
    7770:	40000c00 	.word	0x40000c00
    7774:	000075f1 	.word	0x000075f1

00007778 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7778:	b580      	push	{r7, lr}
    777a:	b082      	sub	sp, #8
    777c:	af00      	add	r7, sp, #0
    777e:	0002      	movs	r2, r0
    7780:	1dfb      	adds	r3, r7, #7
    7782:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    7784:	46c0      	nop			; (mov r8, r8)
    7786:	4b0e      	ldr	r3, [pc, #56]	; (77c0 <system_gclk_gen_enable+0x48>)
    7788:	4798      	blx	r3
    778a:	1e03      	subs	r3, r0, #0
    778c:	d1fb      	bne.n	7786 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    778e:	4b0d      	ldr	r3, [pc, #52]	; (77c4 <system_gclk_gen_enable+0x4c>)
    7790:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7792:	4a0d      	ldr	r2, [pc, #52]	; (77c8 <system_gclk_gen_enable+0x50>)
    7794:	1dfb      	adds	r3, r7, #7
    7796:	781b      	ldrb	r3, [r3, #0]
    7798:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    779a:	46c0      	nop			; (mov r8, r8)
    779c:	4b08      	ldr	r3, [pc, #32]	; (77c0 <system_gclk_gen_enable+0x48>)
    779e:	4798      	blx	r3
    77a0:	1e03      	subs	r3, r0, #0
    77a2:	d1fb      	bne.n	779c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    77a4:	4b09      	ldr	r3, [pc, #36]	; (77cc <system_gclk_gen_enable+0x54>)
    77a6:	4a09      	ldr	r2, [pc, #36]	; (77cc <system_gclk_gen_enable+0x54>)
    77a8:	6852      	ldr	r2, [r2, #4]
    77aa:	2180      	movs	r1, #128	; 0x80
    77ac:	0249      	lsls	r1, r1, #9
    77ae:	430a      	orrs	r2, r1
    77b0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    77b2:	4b07      	ldr	r3, [pc, #28]	; (77d0 <system_gclk_gen_enable+0x58>)
    77b4:	4798      	blx	r3
}
    77b6:	46c0      	nop			; (mov r8, r8)
    77b8:	46bd      	mov	sp, r7
    77ba:	b002      	add	sp, #8
    77bc:	bd80      	pop	{r7, pc}
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	00007605 	.word	0x00007605
    77c4:	000075dd 	.word	0x000075dd
    77c8:	40000c04 	.word	0x40000c04
    77cc:	40000c00 	.word	0x40000c00
    77d0:	000075f1 	.word	0x000075f1

000077d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    77d4:	b580      	push	{r7, lr}
    77d6:	b086      	sub	sp, #24
    77d8:	af00      	add	r7, sp, #0
    77da:	0002      	movs	r2, r0
    77dc:	1dfb      	adds	r3, r7, #7
    77de:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    77e0:	46c0      	nop			; (mov r8, r8)
    77e2:	4b2a      	ldr	r3, [pc, #168]	; (788c <system_gclk_gen_get_hz+0xb8>)
    77e4:	4798      	blx	r3
    77e6:	1e03      	subs	r3, r0, #0
    77e8:	d1fb      	bne.n	77e2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    77ea:	4b29      	ldr	r3, [pc, #164]	; (7890 <system_gclk_gen_get_hz+0xbc>)
    77ec:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    77ee:	4a29      	ldr	r2, [pc, #164]	; (7894 <system_gclk_gen_get_hz+0xc0>)
    77f0:	1dfb      	adds	r3, r7, #7
    77f2:	781b      	ldrb	r3, [r3, #0]
    77f4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    77f6:	46c0      	nop			; (mov r8, r8)
    77f8:	4b24      	ldr	r3, [pc, #144]	; (788c <system_gclk_gen_get_hz+0xb8>)
    77fa:	4798      	blx	r3
    77fc:	1e03      	subs	r3, r0, #0
    77fe:	d1fb      	bne.n	77f8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    7800:	4b25      	ldr	r3, [pc, #148]	; (7898 <system_gclk_gen_get_hz+0xc4>)
    7802:	685b      	ldr	r3, [r3, #4]
    7804:	04db      	lsls	r3, r3, #19
    7806:	0edb      	lsrs	r3, r3, #27
    7808:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    780a:	0018      	movs	r0, r3
    780c:	4b23      	ldr	r3, [pc, #140]	; (789c <system_gclk_gen_get_hz+0xc8>)
    780e:	4798      	blx	r3
    7810:	0003      	movs	r3, r0
    7812:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    7814:	4a1f      	ldr	r2, [pc, #124]	; (7894 <system_gclk_gen_get_hz+0xc0>)
    7816:	1dfb      	adds	r3, r7, #7
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    781c:	4b1e      	ldr	r3, [pc, #120]	; (7898 <system_gclk_gen_get_hz+0xc4>)
    781e:	685b      	ldr	r3, [r3, #4]
    7820:	02db      	lsls	r3, r3, #11
    7822:	0fdb      	lsrs	r3, r3, #31
    7824:	b2da      	uxtb	r2, r3
    7826:	2313      	movs	r3, #19
    7828:	18fb      	adds	r3, r7, r3
    782a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    782c:	4a1c      	ldr	r2, [pc, #112]	; (78a0 <system_gclk_gen_get_hz+0xcc>)
    782e:	1dfb      	adds	r3, r7, #7
    7830:	781b      	ldrb	r3, [r3, #0]
    7832:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    7834:	46c0      	nop			; (mov r8, r8)
    7836:	4b15      	ldr	r3, [pc, #84]	; (788c <system_gclk_gen_get_hz+0xb8>)
    7838:	4798      	blx	r3
    783a:	1e03      	subs	r3, r0, #0
    783c:	d1fb      	bne.n	7836 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    783e:	4b16      	ldr	r3, [pc, #88]	; (7898 <system_gclk_gen_get_hz+0xc4>)
    7840:	689b      	ldr	r3, [r3, #8]
    7842:	021b      	lsls	r3, r3, #8
    7844:	0c1b      	lsrs	r3, r3, #16
    7846:	b29b      	uxth	r3, r3
    7848:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    784a:	4b16      	ldr	r3, [pc, #88]	; (78a4 <system_gclk_gen_get_hz+0xd0>)
    784c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    784e:	2313      	movs	r3, #19
    7850:	18fb      	adds	r3, r7, r3
    7852:	781b      	ldrb	r3, [r3, #0]
    7854:	2b00      	cmp	r3, #0
    7856:	d109      	bne.n	786c <system_gclk_gen_get_hz+0x98>
    7858:	68fb      	ldr	r3, [r7, #12]
    785a:	2b01      	cmp	r3, #1
    785c:	d906      	bls.n	786c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    785e:	4b12      	ldr	r3, [pc, #72]	; (78a8 <system_gclk_gen_get_hz+0xd4>)
    7860:	68f9      	ldr	r1, [r7, #12]
    7862:	6978      	ldr	r0, [r7, #20]
    7864:	4798      	blx	r3
    7866:	0003      	movs	r3, r0
    7868:	617b      	str	r3, [r7, #20]
    786a:	e00a      	b.n	7882 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    786c:	2313      	movs	r3, #19
    786e:	18fb      	adds	r3, r7, r3
    7870:	781b      	ldrb	r3, [r3, #0]
    7872:	2b00      	cmp	r3, #0
    7874:	d005      	beq.n	7882 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    7876:	68fb      	ldr	r3, [r7, #12]
    7878:	3301      	adds	r3, #1
    787a:	697a      	ldr	r2, [r7, #20]
    787c:	40da      	lsrs	r2, r3
    787e:	0013      	movs	r3, r2
    7880:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    7882:	697b      	ldr	r3, [r7, #20]
}
    7884:	0018      	movs	r0, r3
    7886:	46bd      	mov	sp, r7
    7888:	b006      	add	sp, #24
    788a:	bd80      	pop	{r7, pc}
    788c:	00007605 	.word	0x00007605
    7890:	000075dd 	.word	0x000075dd
    7894:	40000c04 	.word	0x40000c04
    7898:	40000c00 	.word	0x40000c00
    789c:	00006e01 	.word	0x00006e01
    78a0:	40000c08 	.word	0x40000c08
    78a4:	000075f1 	.word	0x000075f1
    78a8:	0000b685 	.word	0x0000b685

000078ac <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    78ac:	b580      	push	{r7, lr}
    78ae:	b084      	sub	sp, #16
    78b0:	af00      	add	r7, sp, #0
    78b2:	0002      	movs	r2, r0
    78b4:	6039      	str	r1, [r7, #0]
    78b6:	1dfb      	adds	r3, r7, #7
    78b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    78ba:	1dfb      	adds	r3, r7, #7
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    78c0:	683b      	ldr	r3, [r7, #0]
    78c2:	781b      	ldrb	r3, [r3, #0]
    78c4:	021b      	lsls	r3, r3, #8
    78c6:	001a      	movs	r2, r3
    78c8:	68fb      	ldr	r3, [r7, #12]
    78ca:	4313      	orrs	r3, r2
    78cc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    78ce:	1dfb      	adds	r3, r7, #7
    78d0:	781b      	ldrb	r3, [r3, #0]
    78d2:	0018      	movs	r0, r3
    78d4:	4b04      	ldr	r3, [pc, #16]	; (78e8 <system_gclk_chan_set_config+0x3c>)
    78d6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    78d8:	4b04      	ldr	r3, [pc, #16]	; (78ec <system_gclk_chan_set_config+0x40>)
    78da:	68fa      	ldr	r2, [r7, #12]
    78dc:	b292      	uxth	r2, r2
    78de:	805a      	strh	r2, [r3, #2]
}
    78e0:	46c0      	nop			; (mov r8, r8)
    78e2:	46bd      	mov	sp, r7
    78e4:	b004      	add	sp, #16
    78e6:	bd80      	pop	{r7, pc}
    78e8:	00007939 	.word	0x00007939
    78ec:	40000c00 	.word	0x40000c00

000078f0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    78f0:	b580      	push	{r7, lr}
    78f2:	b082      	sub	sp, #8
    78f4:	af00      	add	r7, sp, #0
    78f6:	0002      	movs	r2, r0
    78f8:	1dfb      	adds	r3, r7, #7
    78fa:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    78fc:	4b0a      	ldr	r3, [pc, #40]	; (7928 <system_gclk_chan_enable+0x38>)
    78fe:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7900:	4a0a      	ldr	r2, [pc, #40]	; (792c <system_gclk_chan_enable+0x3c>)
    7902:	1dfb      	adds	r3, r7, #7
    7904:	781b      	ldrb	r3, [r3, #0]
    7906:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    7908:	4909      	ldr	r1, [pc, #36]	; (7930 <system_gclk_chan_enable+0x40>)
    790a:	4b09      	ldr	r3, [pc, #36]	; (7930 <system_gclk_chan_enable+0x40>)
    790c:	885b      	ldrh	r3, [r3, #2]
    790e:	b29b      	uxth	r3, r3
    7910:	2280      	movs	r2, #128	; 0x80
    7912:	01d2      	lsls	r2, r2, #7
    7914:	4313      	orrs	r3, r2
    7916:	b29b      	uxth	r3, r3
    7918:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    791a:	4b06      	ldr	r3, [pc, #24]	; (7934 <system_gclk_chan_enable+0x44>)
    791c:	4798      	blx	r3
}
    791e:	46c0      	nop			; (mov r8, r8)
    7920:	46bd      	mov	sp, r7
    7922:	b002      	add	sp, #8
    7924:	bd80      	pop	{r7, pc}
    7926:	46c0      	nop			; (mov r8, r8)
    7928:	000075dd 	.word	0x000075dd
    792c:	40000c02 	.word	0x40000c02
    7930:	40000c00 	.word	0x40000c00
    7934:	000075f1 	.word	0x000075f1

00007938 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7938:	b580      	push	{r7, lr}
    793a:	b084      	sub	sp, #16
    793c:	af00      	add	r7, sp, #0
    793e:	0002      	movs	r2, r0
    7940:	1dfb      	adds	r3, r7, #7
    7942:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    7944:	4b1c      	ldr	r3, [pc, #112]	; (79b8 <system_gclk_chan_disable+0x80>)
    7946:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    7948:	4a1c      	ldr	r2, [pc, #112]	; (79bc <system_gclk_chan_disable+0x84>)
    794a:	1dfb      	adds	r3, r7, #7
    794c:	781b      	ldrb	r3, [r3, #0]
    794e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    7950:	4b1b      	ldr	r3, [pc, #108]	; (79c0 <system_gclk_chan_disable+0x88>)
    7952:	885b      	ldrh	r3, [r3, #2]
    7954:	051b      	lsls	r3, r3, #20
    7956:	0f1b      	lsrs	r3, r3, #28
    7958:	b2db      	uxtb	r3, r3
    795a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    795c:	4a18      	ldr	r2, [pc, #96]	; (79c0 <system_gclk_chan_disable+0x88>)
    795e:	8853      	ldrh	r3, [r2, #2]
    7960:	4918      	ldr	r1, [pc, #96]	; (79c4 <system_gclk_chan_disable+0x8c>)
    7962:	400b      	ands	r3, r1
    7964:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    7966:	4a16      	ldr	r2, [pc, #88]	; (79c0 <system_gclk_chan_disable+0x88>)
    7968:	4b15      	ldr	r3, [pc, #84]	; (79c0 <system_gclk_chan_disable+0x88>)
    796a:	885b      	ldrh	r3, [r3, #2]
    796c:	b29b      	uxth	r3, r3
    796e:	4916      	ldr	r1, [pc, #88]	; (79c8 <system_gclk_chan_disable+0x90>)
    7970:	400b      	ands	r3, r1
    7972:	b29b      	uxth	r3, r3
    7974:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    7976:	46c0      	nop			; (mov r8, r8)
    7978:	4b11      	ldr	r3, [pc, #68]	; (79c0 <system_gclk_chan_disable+0x88>)
    797a:	885b      	ldrh	r3, [r3, #2]
    797c:	b29b      	uxth	r3, r3
    797e:	001a      	movs	r2, r3
    7980:	2380      	movs	r3, #128	; 0x80
    7982:	01db      	lsls	r3, r3, #7
    7984:	4013      	ands	r3, r2
    7986:	d1f7      	bne.n	7978 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    7988:	4a0d      	ldr	r2, [pc, #52]	; (79c0 <system_gclk_chan_disable+0x88>)
    798a:	68fb      	ldr	r3, [r7, #12]
    798c:	b2db      	uxtb	r3, r3
    798e:	1c19      	adds	r1, r3, #0
    7990:	230f      	movs	r3, #15
    7992:	400b      	ands	r3, r1
    7994:	b2d9      	uxtb	r1, r3
    7996:	8853      	ldrh	r3, [r2, #2]
    7998:	1c08      	adds	r0, r1, #0
    799a:	210f      	movs	r1, #15
    799c:	4001      	ands	r1, r0
    799e:	0208      	lsls	r0, r1, #8
    79a0:	4908      	ldr	r1, [pc, #32]	; (79c4 <system_gclk_chan_disable+0x8c>)
    79a2:	400b      	ands	r3, r1
    79a4:	1c19      	adds	r1, r3, #0
    79a6:	1c03      	adds	r3, r0, #0
    79a8:	430b      	orrs	r3, r1
    79aa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    79ac:	4b07      	ldr	r3, [pc, #28]	; (79cc <system_gclk_chan_disable+0x94>)
    79ae:	4798      	blx	r3
}
    79b0:	46c0      	nop			; (mov r8, r8)
    79b2:	46bd      	mov	sp, r7
    79b4:	b004      	add	sp, #16
    79b6:	bd80      	pop	{r7, pc}
    79b8:	000075dd 	.word	0x000075dd
    79bc:	40000c02 	.word	0x40000c02
    79c0:	40000c00 	.word	0x40000c00
    79c4:	fffff0ff 	.word	0xfffff0ff
    79c8:	ffffbfff 	.word	0xffffbfff
    79cc:	000075f1 	.word	0x000075f1

000079d0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    79d0:	b580      	push	{r7, lr}
    79d2:	b084      	sub	sp, #16
    79d4:	af00      	add	r7, sp, #0
    79d6:	0002      	movs	r2, r0
    79d8:	1dfb      	adds	r3, r7, #7
    79da:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    79dc:	4b0d      	ldr	r3, [pc, #52]	; (7a14 <system_gclk_chan_get_hz+0x44>)
    79de:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    79e0:	4a0d      	ldr	r2, [pc, #52]	; (7a18 <system_gclk_chan_get_hz+0x48>)
    79e2:	1dfb      	adds	r3, r7, #7
    79e4:	781b      	ldrb	r3, [r3, #0]
    79e6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    79e8:	4b0c      	ldr	r3, [pc, #48]	; (7a1c <system_gclk_chan_get_hz+0x4c>)
    79ea:	885b      	ldrh	r3, [r3, #2]
    79ec:	051b      	lsls	r3, r3, #20
    79ee:	0f1b      	lsrs	r3, r3, #28
    79f0:	b2da      	uxtb	r2, r3
    79f2:	230f      	movs	r3, #15
    79f4:	18fb      	adds	r3, r7, r3
    79f6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    79f8:	4b09      	ldr	r3, [pc, #36]	; (7a20 <system_gclk_chan_get_hz+0x50>)
    79fa:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    79fc:	230f      	movs	r3, #15
    79fe:	18fb      	adds	r3, r7, r3
    7a00:	781b      	ldrb	r3, [r3, #0]
    7a02:	0018      	movs	r0, r3
    7a04:	4b07      	ldr	r3, [pc, #28]	; (7a24 <system_gclk_chan_get_hz+0x54>)
    7a06:	4798      	blx	r3
    7a08:	0003      	movs	r3, r0
}
    7a0a:	0018      	movs	r0, r3
    7a0c:	46bd      	mov	sp, r7
    7a0e:	b004      	add	sp, #16
    7a10:	bd80      	pop	{r7, pc}
    7a12:	46c0      	nop			; (mov r8, r8)
    7a14:	000075dd 	.word	0x000075dd
    7a18:	40000c02 	.word	0x40000c02
    7a1c:	40000c00 	.word	0x40000c00
    7a20:	000075f1 	.word	0x000075f1
    7a24:	000077d5 	.word	0x000077d5

00007a28 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7a28:	b580      	push	{r7, lr}
    7a2a:	b084      	sub	sp, #16
    7a2c:	af00      	add	r7, sp, #0
    7a2e:	0002      	movs	r2, r0
    7a30:	1dfb      	adds	r3, r7, #7
    7a32:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7a34:	230f      	movs	r3, #15
    7a36:	18fb      	adds	r3, r7, r3
    7a38:	1dfa      	adds	r2, r7, #7
    7a3a:	7812      	ldrb	r2, [r2, #0]
    7a3c:	09d2      	lsrs	r2, r2, #7
    7a3e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7a40:	230e      	movs	r3, #14
    7a42:	18fb      	adds	r3, r7, r3
    7a44:	1dfa      	adds	r2, r7, #7
    7a46:	7812      	ldrb	r2, [r2, #0]
    7a48:	0952      	lsrs	r2, r2, #5
    7a4a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7a4c:	4b0d      	ldr	r3, [pc, #52]	; (7a84 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7a4e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    7a50:	230f      	movs	r3, #15
    7a52:	18fb      	adds	r3, r7, r3
    7a54:	781b      	ldrb	r3, [r3, #0]
    7a56:	2b00      	cmp	r3, #0
    7a58:	d10f      	bne.n	7a7a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7a5a:	230f      	movs	r3, #15
    7a5c:	18fb      	adds	r3, r7, r3
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	009b      	lsls	r3, r3, #2
    7a62:	2210      	movs	r2, #16
    7a64:	4694      	mov	ip, r2
    7a66:	44bc      	add	ip, r7
    7a68:	4463      	add	r3, ip
    7a6a:	3b08      	subs	r3, #8
    7a6c:	681a      	ldr	r2, [r3, #0]
    7a6e:	230e      	movs	r3, #14
    7a70:	18fb      	adds	r3, r7, r3
    7a72:	781b      	ldrb	r3, [r3, #0]
    7a74:	01db      	lsls	r3, r3, #7
    7a76:	18d3      	adds	r3, r2, r3
    7a78:	e000      	b.n	7a7c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7a7a:	2300      	movs	r3, #0
	}
}
    7a7c:	0018      	movs	r0, r3
    7a7e:	46bd      	mov	sp, r7
    7a80:	b004      	add	sp, #16
    7a82:	bd80      	pop	{r7, pc}
    7a84:	41004400 	.word	0x41004400

00007a88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7a88:	b580      	push	{r7, lr}
    7a8a:	b088      	sub	sp, #32
    7a8c:	af00      	add	r7, sp, #0
    7a8e:	60f8      	str	r0, [r7, #12]
    7a90:	60b9      	str	r1, [r7, #8]
    7a92:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    7a94:	2300      	movs	r3, #0
    7a96:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7a98:	687b      	ldr	r3, [r7, #4]
    7a9a:	78db      	ldrb	r3, [r3, #3]
    7a9c:	2201      	movs	r2, #1
    7a9e:	4053      	eors	r3, r2
    7aa0:	b2db      	uxtb	r3, r3
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d035      	beq.n	7b12 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7aa6:	687b      	ldr	r3, [r7, #4]
    7aa8:	781b      	ldrb	r3, [r3, #0]
    7aaa:	2b80      	cmp	r3, #128	; 0x80
    7aac:	d00b      	beq.n	7ac6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    7aae:	69fb      	ldr	r3, [r7, #28]
    7ab0:	2280      	movs	r2, #128	; 0x80
    7ab2:	0252      	lsls	r2, r2, #9
    7ab4:	4313      	orrs	r3, r2
    7ab6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7ab8:	687b      	ldr	r3, [r7, #4]
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	061b      	lsls	r3, r3, #24
    7abe:	001a      	movs	r2, r3
    7ac0:	69fb      	ldr	r3, [r7, #28]
    7ac2:	4313      	orrs	r3, r2
    7ac4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7ac6:	687b      	ldr	r3, [r7, #4]
    7ac8:	785b      	ldrb	r3, [r3, #1]
    7aca:	2b00      	cmp	r3, #0
    7acc:	d003      	beq.n	7ad6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7ad2:	2b02      	cmp	r3, #2
    7ad4:	d110      	bne.n	7af8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    7ad6:	69fb      	ldr	r3, [r7, #28]
    7ad8:	2280      	movs	r2, #128	; 0x80
    7ada:	0292      	lsls	r2, r2, #10
    7adc:	4313      	orrs	r3, r2
    7ade:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7ae0:	687b      	ldr	r3, [r7, #4]
    7ae2:	789b      	ldrb	r3, [r3, #2]
    7ae4:	2b00      	cmp	r3, #0
    7ae6:	d004      	beq.n	7af2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7ae8:	69fb      	ldr	r3, [r7, #28]
    7aea:	2280      	movs	r2, #128	; 0x80
    7aec:	02d2      	lsls	r2, r2, #11
    7aee:	4313      	orrs	r3, r2
    7af0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7af2:	68fb      	ldr	r3, [r7, #12]
    7af4:	68ba      	ldr	r2, [r7, #8]
    7af6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7af8:	687b      	ldr	r3, [r7, #4]
    7afa:	785b      	ldrb	r3, [r3, #1]
    7afc:	2b01      	cmp	r3, #1
    7afe:	d003      	beq.n	7b08 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7b00:	687b      	ldr	r3, [r7, #4]
    7b02:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7b04:	2b02      	cmp	r3, #2
    7b06:	d107      	bne.n	7b18 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7b08:	69fb      	ldr	r3, [r7, #28]
    7b0a:	4a22      	ldr	r2, [pc, #136]	; (7b94 <_system_pinmux_config+0x10c>)
    7b0c:	4013      	ands	r3, r2
    7b0e:	61fb      	str	r3, [r7, #28]
    7b10:	e002      	b.n	7b18 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    7b12:	68fb      	ldr	r3, [r7, #12]
    7b14:	68ba      	ldr	r2, [r7, #8]
    7b16:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7b18:	68bb      	ldr	r3, [r7, #8]
    7b1a:	041b      	lsls	r3, r3, #16
    7b1c:	0c1b      	lsrs	r3, r3, #16
    7b1e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7b20:	68bb      	ldr	r3, [r7, #8]
    7b22:	0c1b      	lsrs	r3, r3, #16
    7b24:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7b26:	69ba      	ldr	r2, [r7, #24]
    7b28:	69fb      	ldr	r3, [r7, #28]
    7b2a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7b2c:	22a0      	movs	r2, #160	; 0xa0
    7b2e:	05d2      	lsls	r2, r2, #23
    7b30:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7b32:	68fb      	ldr	r3, [r7, #12]
    7b34:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7b36:	697a      	ldr	r2, [r7, #20]
    7b38:	69fb      	ldr	r3, [r7, #28]
    7b3a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7b3c:	22d0      	movs	r2, #208	; 0xd0
    7b3e:	0612      	lsls	r2, r2, #24
    7b40:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7b42:	68fb      	ldr	r3, [r7, #12]
    7b44:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7b46:	687b      	ldr	r3, [r7, #4]
    7b48:	78db      	ldrb	r3, [r3, #3]
    7b4a:	2201      	movs	r2, #1
    7b4c:	4053      	eors	r3, r2
    7b4e:	b2db      	uxtb	r3, r3
    7b50:	2b00      	cmp	r3, #0
    7b52:	d01a      	beq.n	7b8a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7b54:	69fa      	ldr	r2, [r7, #28]
    7b56:	2380      	movs	r3, #128	; 0x80
    7b58:	02db      	lsls	r3, r3, #11
    7b5a:	4013      	ands	r3, r2
    7b5c:	d00a      	beq.n	7b74 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7b5e:	687b      	ldr	r3, [r7, #4]
    7b60:	789b      	ldrb	r3, [r3, #2]
    7b62:	2b01      	cmp	r3, #1
    7b64:	d103      	bne.n	7b6e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    7b66:	68fb      	ldr	r3, [r7, #12]
    7b68:	68ba      	ldr	r2, [r7, #8]
    7b6a:	619a      	str	r2, [r3, #24]
    7b6c:	e002      	b.n	7b74 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    7b6e:	68fb      	ldr	r3, [r7, #12]
    7b70:	68ba      	ldr	r2, [r7, #8]
    7b72:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7b74:	687b      	ldr	r3, [r7, #4]
    7b76:	785b      	ldrb	r3, [r3, #1]
    7b78:	2b01      	cmp	r3, #1
    7b7a:	d003      	beq.n	7b84 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    7b7c:	687b      	ldr	r3, [r7, #4]
    7b7e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7b80:	2b02      	cmp	r3, #2
    7b82:	d102      	bne.n	7b8a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    7b84:	68fb      	ldr	r3, [r7, #12]
    7b86:	68ba      	ldr	r2, [r7, #8]
    7b88:	609a      	str	r2, [r3, #8]
		}
	}
}
    7b8a:	46c0      	nop			; (mov r8, r8)
    7b8c:	46bd      	mov	sp, r7
    7b8e:	b008      	add	sp, #32
    7b90:	bd80      	pop	{r7, pc}
    7b92:	46c0      	nop			; (mov r8, r8)
    7b94:	fffbffff 	.word	0xfffbffff

00007b98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7b98:	b580      	push	{r7, lr}
    7b9a:	b084      	sub	sp, #16
    7b9c:	af00      	add	r7, sp, #0
    7b9e:	0002      	movs	r2, r0
    7ba0:	6039      	str	r1, [r7, #0]
    7ba2:	1dfb      	adds	r3, r7, #7
    7ba4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7ba6:	1dfb      	adds	r3, r7, #7
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	0018      	movs	r0, r3
    7bac:	4b0a      	ldr	r3, [pc, #40]	; (7bd8 <system_pinmux_pin_set_config+0x40>)
    7bae:	4798      	blx	r3
    7bb0:	0003      	movs	r3, r0
    7bb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7bb4:	1dfb      	adds	r3, r7, #7
    7bb6:	781b      	ldrb	r3, [r3, #0]
    7bb8:	221f      	movs	r2, #31
    7bba:	4013      	ands	r3, r2
    7bbc:	2201      	movs	r2, #1
    7bbe:	409a      	lsls	r2, r3
    7bc0:	0013      	movs	r3, r2
    7bc2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    7bc4:	683a      	ldr	r2, [r7, #0]
    7bc6:	68b9      	ldr	r1, [r7, #8]
    7bc8:	68fb      	ldr	r3, [r7, #12]
    7bca:	0018      	movs	r0, r3
    7bcc:	4b03      	ldr	r3, [pc, #12]	; (7bdc <system_pinmux_pin_set_config+0x44>)
    7bce:	4798      	blx	r3
}
    7bd0:	46c0      	nop			; (mov r8, r8)
    7bd2:	46bd      	mov	sp, r7
    7bd4:	b004      	add	sp, #16
    7bd6:	bd80      	pop	{r7, pc}
    7bd8:	00007a29 	.word	0x00007a29
    7bdc:	00007a89 	.word	0x00007a89

00007be0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    7be0:	b580      	push	{r7, lr}
    7be2:	af00      	add	r7, sp, #0
	return;
    7be4:	46c0      	nop			; (mov r8, r8)
}
    7be6:	46bd      	mov	sp, r7
    7be8:	bd80      	pop	{r7, pc}
    7bea:	46c0      	nop			; (mov r8, r8)

00007bec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7bec:	b580      	push	{r7, lr}
    7bee:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7bf0:	4b06      	ldr	r3, [pc, #24]	; (7c0c <system_init+0x20>)
    7bf2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7bf4:	4b06      	ldr	r3, [pc, #24]	; (7c10 <system_init+0x24>)
    7bf6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7bf8:	4b06      	ldr	r3, [pc, #24]	; (7c14 <system_init+0x28>)
    7bfa:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7bfc:	4b06      	ldr	r3, [pc, #24]	; (7c18 <system_init+0x2c>)
    7bfe:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7c00:	4b06      	ldr	r3, [pc, #24]	; (7c1c <system_init+0x30>)
    7c02:	4798      	blx	r3
}
    7c04:	46c0      	nop			; (mov r8, r8)
    7c06:	46bd      	mov	sp, r7
    7c08:	bd80      	pop	{r7, pc}
    7c0a:	46c0      	nop			; (mov r8, r8)
    7c0c:	0000728d 	.word	0x0000728d
    7c10:	000044e1 	.word	0x000044e1
    7c14:	00007be1 	.word	0x00007be1
    7c18:	000049bd 	.word	0x000049bd
    7c1c:	00007be1 	.word	0x00007be1

00007c20 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    7c20:	b580      	push	{r7, lr}
    7c22:	af00      	add	r7, sp, #0
    7c24:	2000      	movs	r0, #0
    7c26:	4b02      	ldr	r3, [pc, #8]	; (7c30 <TCC0_Handler+0x10>)
    7c28:	4798      	blx	r3
    7c2a:	46c0      	nop			; (mov r8, r8)
    7c2c:	46bd      	mov	sp, r7
    7c2e:	bd80      	pop	{r7, pc}
    7c30:	00007c5d 	.word	0x00007c5d

00007c34 <TCC1_Handler>:
    7c34:	b580      	push	{r7, lr}
    7c36:	af00      	add	r7, sp, #0
    7c38:	2001      	movs	r0, #1
    7c3a:	4b02      	ldr	r3, [pc, #8]	; (7c44 <TCC1_Handler+0x10>)
    7c3c:	4798      	blx	r3
    7c3e:	46c0      	nop			; (mov r8, r8)
    7c40:	46bd      	mov	sp, r7
    7c42:	bd80      	pop	{r7, pc}
    7c44:	00007c5d 	.word	0x00007c5d

00007c48 <TCC2_Handler>:
    7c48:	b580      	push	{r7, lr}
    7c4a:	af00      	add	r7, sp, #0
    7c4c:	2002      	movs	r0, #2
    7c4e:	4b02      	ldr	r3, [pc, #8]	; (7c58 <TCC2_Handler+0x10>)
    7c50:	4798      	blx	r3
    7c52:	46c0      	nop			; (mov r8, r8)
    7c54:	46bd      	mov	sp, r7
    7c56:	bd80      	pop	{r7, pc}
    7c58:	00007c5d 	.word	0x00007c5d

00007c5c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    7c5c:	b580      	push	{r7, lr}
    7c5e:	b086      	sub	sp, #24
    7c60:	af00      	add	r7, sp, #0
    7c62:	0002      	movs	r2, r0
    7c64:	1dfb      	adds	r3, r7, #7
    7c66:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    7c68:	1dfb      	adds	r3, r7, #7
    7c6a:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    7c6c:	4b18      	ldr	r3, [pc, #96]	; (7cd0 <_tcc_interrupt_handler+0x74>)
    7c6e:	0092      	lsls	r2, r2, #2
    7c70:	58d3      	ldr	r3, [r2, r3]
    7c72:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7c74:	693b      	ldr	r3, [r7, #16]
    7c76:	681b      	ldr	r3, [r3, #0]
    7c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    7c7a:	693b      	ldr	r3, [r7, #16]
    7c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7c7e:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    7c80:	693b      	ldr	r3, [r7, #16]
    7c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    7c84:	4013      	ands	r3, r2
    7c86:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7c88:	2300      	movs	r3, #0
    7c8a:	617b      	str	r3, [r7, #20]
    7c8c:	e019      	b.n	7cc2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    7c8e:	4b11      	ldr	r3, [pc, #68]	; (7cd4 <_tcc_interrupt_handler+0x78>)
    7c90:	697a      	ldr	r2, [r7, #20]
    7c92:	0092      	lsls	r2, r2, #2
    7c94:	58d3      	ldr	r3, [r2, r3]
    7c96:	68fa      	ldr	r2, [r7, #12]
    7c98:	4013      	ands	r3, r2
    7c9a:	d00f      	beq.n	7cbc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    7c9c:	693a      	ldr	r2, [r7, #16]
    7c9e:	697b      	ldr	r3, [r7, #20]
    7ca0:	009b      	lsls	r3, r3, #2
    7ca2:	18d3      	adds	r3, r2, r3
    7ca4:	3304      	adds	r3, #4
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	693a      	ldr	r2, [r7, #16]
    7caa:	0010      	movs	r0, r2
    7cac:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    7cae:	693b      	ldr	r3, [r7, #16]
    7cb0:	681b      	ldr	r3, [r3, #0]
    7cb2:	4a08      	ldr	r2, [pc, #32]	; (7cd4 <_tcc_interrupt_handler+0x78>)
    7cb4:	6979      	ldr	r1, [r7, #20]
    7cb6:	0089      	lsls	r1, r1, #2
    7cb8:	588a      	ldr	r2, [r1, r2]
    7cba:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    7cbc:	697b      	ldr	r3, [r7, #20]
    7cbe:	3301      	adds	r3, #1
    7cc0:	617b      	str	r3, [r7, #20]
    7cc2:	697b      	ldr	r3, [r7, #20]
    7cc4:	2b0b      	cmp	r3, #11
    7cc6:	dde2      	ble.n	7c8e <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    7cc8:	46c0      	nop			; (mov r8, r8)
    7cca:	46bd      	mov	sp, r7
    7ccc:	b006      	add	sp, #24
    7cce:	bd80      	pop	{r7, pc}
    7cd0:	20004650 	.word	0x20004650
    7cd4:	0000e4f0 	.word	0x0000e4f0

00007cd8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    7cd8:	b580      	push	{r7, lr}
    7cda:	b082      	sub	sp, #8
    7cdc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    7cde:	4b2f      	ldr	r3, [pc, #188]	; (7d9c <Reset_Handler+0xc4>)
    7ce0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    7ce2:	4b2f      	ldr	r3, [pc, #188]	; (7da0 <Reset_Handler+0xc8>)
    7ce4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    7ce6:	687a      	ldr	r2, [r7, #4]
    7ce8:	683b      	ldr	r3, [r7, #0]
    7cea:	429a      	cmp	r2, r3
    7cec:	d00c      	beq.n	7d08 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    7cee:	e007      	b.n	7d00 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    7cf0:	683b      	ldr	r3, [r7, #0]
    7cf2:	1d1a      	adds	r2, r3, #4
    7cf4:	603a      	str	r2, [r7, #0]
    7cf6:	687a      	ldr	r2, [r7, #4]
    7cf8:	1d11      	adds	r1, r2, #4
    7cfa:	6079      	str	r1, [r7, #4]
    7cfc:	6812      	ldr	r2, [r2, #0]
    7cfe:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    7d00:	683a      	ldr	r2, [r7, #0]
    7d02:	4b28      	ldr	r3, [pc, #160]	; (7da4 <Reset_Handler+0xcc>)
    7d04:	429a      	cmp	r2, r3
    7d06:	d3f3      	bcc.n	7cf0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7d08:	4b27      	ldr	r3, [pc, #156]	; (7da8 <Reset_Handler+0xd0>)
    7d0a:	603b      	str	r3, [r7, #0]
    7d0c:	e004      	b.n	7d18 <Reset_Handler+0x40>
                *pDest++ = 0;
    7d0e:	683b      	ldr	r3, [r7, #0]
    7d10:	1d1a      	adds	r2, r3, #4
    7d12:	603a      	str	r2, [r7, #0]
    7d14:	2200      	movs	r2, #0
    7d16:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    7d18:	683a      	ldr	r2, [r7, #0]
    7d1a:	4b24      	ldr	r3, [pc, #144]	; (7dac <Reset_Handler+0xd4>)
    7d1c:	429a      	cmp	r2, r3
    7d1e:	d3f6      	bcc.n	7d0e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    7d20:	4b23      	ldr	r3, [pc, #140]	; (7db0 <Reset_Handler+0xd8>)
    7d22:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    7d24:	4b23      	ldr	r3, [pc, #140]	; (7db4 <Reset_Handler+0xdc>)
    7d26:	687a      	ldr	r2, [r7, #4]
    7d28:	21ff      	movs	r1, #255	; 0xff
    7d2a:	438a      	bics	r2, r1
    7d2c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    7d2e:	4a22      	ldr	r2, [pc, #136]	; (7db8 <Reset_Handler+0xe0>)
    7d30:	2390      	movs	r3, #144	; 0x90
    7d32:	005b      	lsls	r3, r3, #1
    7d34:	2102      	movs	r1, #2
    7d36:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    7d38:	4a20      	ldr	r2, [pc, #128]	; (7dbc <Reset_Handler+0xe4>)
    7d3a:	78d3      	ldrb	r3, [r2, #3]
    7d3c:	2103      	movs	r1, #3
    7d3e:	438b      	bics	r3, r1
    7d40:	1c19      	adds	r1, r3, #0
    7d42:	2302      	movs	r3, #2
    7d44:	430b      	orrs	r3, r1
    7d46:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    7d48:	4a1c      	ldr	r2, [pc, #112]	; (7dbc <Reset_Handler+0xe4>)
    7d4a:	78d3      	ldrb	r3, [r2, #3]
    7d4c:	210c      	movs	r1, #12
    7d4e:	438b      	bics	r3, r1
    7d50:	1c19      	adds	r1, r3, #0
    7d52:	2308      	movs	r3, #8
    7d54:	430b      	orrs	r3, r1
    7d56:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    7d58:	4a19      	ldr	r2, [pc, #100]	; (7dc0 <Reset_Handler+0xe8>)
    7d5a:	7b93      	ldrb	r3, [r2, #14]
    7d5c:	2130      	movs	r1, #48	; 0x30
    7d5e:	438b      	bics	r3, r1
    7d60:	1c19      	adds	r1, r3, #0
    7d62:	2320      	movs	r3, #32
    7d64:	430b      	orrs	r3, r1
    7d66:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    7d68:	4a15      	ldr	r2, [pc, #84]	; (7dc0 <Reset_Handler+0xe8>)
    7d6a:	7b93      	ldrb	r3, [r2, #14]
    7d6c:	210c      	movs	r1, #12
    7d6e:	438b      	bics	r3, r1
    7d70:	1c19      	adds	r1, r3, #0
    7d72:	2308      	movs	r3, #8
    7d74:	430b      	orrs	r3, r1
    7d76:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    7d78:	4a11      	ldr	r2, [pc, #68]	; (7dc0 <Reset_Handler+0xe8>)
    7d7a:	7b93      	ldrb	r3, [r2, #14]
    7d7c:	2103      	movs	r1, #3
    7d7e:	438b      	bics	r3, r1
    7d80:	1c19      	adds	r1, r3, #0
    7d82:	2302      	movs	r3, #2
    7d84:	430b      	orrs	r3, r1
    7d86:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    7d88:	4a0e      	ldr	r2, [pc, #56]	; (7dc4 <Reset_Handler+0xec>)
    7d8a:	6853      	ldr	r3, [r2, #4]
    7d8c:	2180      	movs	r1, #128	; 0x80
    7d8e:	430b      	orrs	r3, r1
    7d90:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    7d92:	4b0d      	ldr	r3, [pc, #52]	; (7dc8 <Reset_Handler+0xf0>)
    7d94:	4798      	blx	r3

        /* Branch to main function */
        main();
    7d96:	4b0d      	ldr	r3, [pc, #52]	; (7dcc <Reset_Handler+0xf4>)
    7d98:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    7d9a:	e7fe      	b.n	7d9a <Reset_Handler+0xc2>
    7d9c:	0000eb48 	.word	0x0000eb48
    7da0:	20000000 	.word	0x20000000
    7da4:	20000094 	.word	0x20000094
    7da8:	20000094 	.word	0x20000094
    7dac:	200046c4 	.word	0x200046c4
    7db0:	00000000 	.word	0x00000000
    7db4:	e000ed00 	.word	0xe000ed00
    7db8:	41007000 	.word	0x41007000
    7dbc:	41005000 	.word	0x41005000
    7dc0:	41004800 	.word	0x41004800
    7dc4:	41004000 	.word	0x41004000
    7dc8:	0000bfc5 	.word	0x0000bfc5
    7dcc:	0000af81 	.word	0x0000af81

00007dd0 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b082      	sub	sp, #8
    7dd4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7dd6:	f3ef 8305 	mrs	r3, IPSR
    7dda:	607b      	str	r3, [r7, #4]
  return(result);
    7ddc:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    7dde:	4b01      	ldr	r3, [pc, #4]	; (7de4 <Dummy_Handler+0x14>)
    7de0:	601a      	str	r2, [r3, #0]
        }
    7de2:	e7f8      	b.n	7dd6 <Dummy_Handler+0x6>
    7de4:	20000018 	.word	0x20000018

00007de8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7de8:	b580      	push	{r7, lr}
    7dea:	b086      	sub	sp, #24
    7dec:	af00      	add	r7, sp, #0
    7dee:	60f8      	str	r0, [r7, #12]
    7df0:	60b9      	str	r1, [r7, #8]
    7df2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7df4:	2300      	movs	r3, #0
    7df6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    7df8:	68fb      	ldr	r3, [r7, #12]
    7dfa:	2b00      	cmp	r3, #0
    7dfc:	d012      	beq.n	7e24 <_read+0x3c>
		return -1;
    7dfe:	2301      	movs	r3, #1
    7e00:	425b      	negs	r3, r3
    7e02:	e013      	b.n	7e2c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    7e04:	4b0b      	ldr	r3, [pc, #44]	; (7e34 <_read+0x4c>)
    7e06:	681a      	ldr	r2, [r3, #0]
    7e08:	4b0b      	ldr	r3, [pc, #44]	; (7e38 <_read+0x50>)
    7e0a:	681b      	ldr	r3, [r3, #0]
    7e0c:	68b9      	ldr	r1, [r7, #8]
    7e0e:	0018      	movs	r0, r3
    7e10:	4790      	blx	r2
		ptr++;
    7e12:	68bb      	ldr	r3, [r7, #8]
    7e14:	3301      	adds	r3, #1
    7e16:	60bb      	str	r3, [r7, #8]
		nChars++;
    7e18:	697b      	ldr	r3, [r7, #20]
    7e1a:	3301      	adds	r3, #1
    7e1c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    7e1e:	687b      	ldr	r3, [r7, #4]
    7e20:	3b01      	subs	r3, #1
    7e22:	607b      	str	r3, [r7, #4]
    7e24:	687b      	ldr	r3, [r7, #4]
    7e26:	2b00      	cmp	r3, #0
    7e28:	dcec      	bgt.n	7e04 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    7e2a:	697b      	ldr	r3, [r7, #20]
}
    7e2c:	0018      	movs	r0, r3
    7e2e:	46bd      	mov	sp, r7
    7e30:	b006      	add	sp, #24
    7e32:	bd80      	pop	{r7, pc}
    7e34:	2000465c 	.word	0x2000465c
    7e38:	20004664 	.word	0x20004664

00007e3c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7e3c:	b580      	push	{r7, lr}
    7e3e:	b086      	sub	sp, #24
    7e40:	af00      	add	r7, sp, #0
    7e42:	60f8      	str	r0, [r7, #12]
    7e44:	60b9      	str	r1, [r7, #8]
    7e46:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    7e48:	2300      	movs	r3, #0
    7e4a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    7e4c:	68fb      	ldr	r3, [r7, #12]
    7e4e:	2b01      	cmp	r3, #1
    7e50:	d01d      	beq.n	7e8e <_write+0x52>
    7e52:	68fb      	ldr	r3, [r7, #12]
    7e54:	2b02      	cmp	r3, #2
    7e56:	d01a      	beq.n	7e8e <_write+0x52>
    7e58:	68fb      	ldr	r3, [r7, #12]
    7e5a:	2b03      	cmp	r3, #3
    7e5c:	d017      	beq.n	7e8e <_write+0x52>
		return -1;
    7e5e:	2301      	movs	r3, #1
    7e60:	425b      	negs	r3, r3
    7e62:	e018      	b.n	7e96 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    7e64:	4b0e      	ldr	r3, [pc, #56]	; (7ea0 <_write+0x64>)
    7e66:	681a      	ldr	r2, [r3, #0]
    7e68:	4b0e      	ldr	r3, [pc, #56]	; (7ea4 <_write+0x68>)
    7e6a:	6818      	ldr	r0, [r3, #0]
    7e6c:	68bb      	ldr	r3, [r7, #8]
    7e6e:	1c59      	adds	r1, r3, #1
    7e70:	60b9      	str	r1, [r7, #8]
    7e72:	781b      	ldrb	r3, [r3, #0]
    7e74:	0019      	movs	r1, r3
    7e76:	4790      	blx	r2
    7e78:	1e03      	subs	r3, r0, #0
    7e7a:	da02      	bge.n	7e82 <_write+0x46>
			return -1;
    7e7c:	2301      	movs	r3, #1
    7e7e:	425b      	negs	r3, r3
    7e80:	e009      	b.n	7e96 <_write+0x5a>
		}
		++nChars;
    7e82:	697b      	ldr	r3, [r7, #20]
    7e84:	3301      	adds	r3, #1
    7e86:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	3b01      	subs	r3, #1
    7e8c:	607b      	str	r3, [r7, #4]
    7e8e:	687b      	ldr	r3, [r7, #4]
    7e90:	2b00      	cmp	r3, #0
    7e92:	d1e7      	bne.n	7e64 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    7e94:	697b      	ldr	r3, [r7, #20]
}
    7e96:	0018      	movs	r0, r3
    7e98:	46bd      	mov	sp, r7
    7e9a:	b006      	add	sp, #24
    7e9c:	bd80      	pop	{r7, pc}
    7e9e:	46c0      	nop			; (mov r8, r8)
    7ea0:	20004660 	.word	0x20004660
    7ea4:	20004664 	.word	0x20004664

00007ea8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7ea8:	b580      	push	{r7, lr}
    7eaa:	b084      	sub	sp, #16
    7eac:	af00      	add	r7, sp, #0
    7eae:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    7eb0:	4b0a      	ldr	r3, [pc, #40]	; (7edc <_sbrk+0x34>)
    7eb2:	681b      	ldr	r3, [r3, #0]
    7eb4:	2b00      	cmp	r3, #0
    7eb6:	d102      	bne.n	7ebe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    7eb8:	4b08      	ldr	r3, [pc, #32]	; (7edc <_sbrk+0x34>)
    7eba:	4a09      	ldr	r2, [pc, #36]	; (7ee0 <_sbrk+0x38>)
    7ebc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    7ebe:	4b07      	ldr	r3, [pc, #28]	; (7edc <_sbrk+0x34>)
    7ec0:	681b      	ldr	r3, [r3, #0]
    7ec2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    7ec4:	4b05      	ldr	r3, [pc, #20]	; (7edc <_sbrk+0x34>)
    7ec6:	681a      	ldr	r2, [r3, #0]
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	18d2      	adds	r2, r2, r3
    7ecc:	4b03      	ldr	r3, [pc, #12]	; (7edc <_sbrk+0x34>)
    7ece:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    7ed0:	68fb      	ldr	r3, [r7, #12]
}
    7ed2:	0018      	movs	r0, r3
    7ed4:	46bd      	mov	sp, r7
    7ed6:	b004      	add	sp, #16
    7ed8:	bd80      	pop	{r7, pc}
    7eda:	46c0      	nop			; (mov r8, r8)
    7edc:	20000128 	.word	0x20000128
    7ee0:	200066c8 	.word	0x200066c8

00007ee4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    7ee4:	b580      	push	{r7, lr}
    7ee6:	b082      	sub	sp, #8
    7ee8:	af00      	add	r7, sp, #0
    7eea:	6078      	str	r0, [r7, #4]
	return -1;
    7eec:	2301      	movs	r3, #1
    7eee:	425b      	negs	r3, r3
}
    7ef0:	0018      	movs	r0, r3
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b002      	add	sp, #8
    7ef6:	bd80      	pop	{r7, pc}

00007ef8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b082      	sub	sp, #8
    7efc:	af00      	add	r7, sp, #0
    7efe:	6078      	str	r0, [r7, #4]
    7f00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    7f02:	683b      	ldr	r3, [r7, #0]
    7f04:	2280      	movs	r2, #128	; 0x80
    7f06:	0192      	lsls	r2, r2, #6
    7f08:	605a      	str	r2, [r3, #4]

	return 0;
    7f0a:	2300      	movs	r3, #0
}
    7f0c:	0018      	movs	r0, r3
    7f0e:	46bd      	mov	sp, r7
    7f10:	b002      	add	sp, #8
    7f12:	bd80      	pop	{r7, pc}

00007f14 <_isatty>:

extern int _isatty(int file)
{
    7f14:	b580      	push	{r7, lr}
    7f16:	b082      	sub	sp, #8
    7f18:	af00      	add	r7, sp, #0
    7f1a:	6078      	str	r0, [r7, #4]
	return 1;
    7f1c:	2301      	movs	r3, #1
}
    7f1e:	0018      	movs	r0, r3
    7f20:	46bd      	mov	sp, r7
    7f22:	b002      	add	sp, #8
    7f24:	bd80      	pop	{r7, pc}
    7f26:	46c0      	nop			; (mov r8, r8)

00007f28 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    7f28:	b580      	push	{r7, lr}
    7f2a:	b084      	sub	sp, #16
    7f2c:	af00      	add	r7, sp, #0
    7f2e:	60f8      	str	r0, [r7, #12]
    7f30:	60b9      	str	r1, [r7, #8]
    7f32:	607a      	str	r2, [r7, #4]
	return 0;
    7f34:	2300      	movs	r3, #0
}
    7f36:	0018      	movs	r0, r3
    7f38:	46bd      	mov	sp, r7
    7f3a:	b004      	add	sp, #16
    7f3c:	bd80      	pop	{r7, pc}
    7f3e:	46c0      	nop			; (mov r8, r8)

00007f40 <_exit>:

extern void _exit(int status)
{
    7f40:	b580      	push	{r7, lr}
    7f42:	b082      	sub	sp, #8
    7f44:	af00      	add	r7, sp, #0
    7f46:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    7f48:	be00      	bkpt	0x0000
}
    7f4a:	46c0      	nop			; (mov r8, r8)
    7f4c:	46bd      	mov	sp, r7
    7f4e:	b002      	add	sp, #8
    7f50:	bd80      	pop	{r7, pc}
    7f52:	46c0      	nop			; (mov r8, r8)

00007f54 <_kill>:

extern void _kill(int pid, int sig)
{
    7f54:	b580      	push	{r7, lr}
    7f56:	b082      	sub	sp, #8
    7f58:	af00      	add	r7, sp, #0
    7f5a:	6078      	str	r0, [r7, #4]
    7f5c:	6039      	str	r1, [r7, #0]
	return;
    7f5e:	46c0      	nop			; (mov r8, r8)
}
    7f60:	46bd      	mov	sp, r7
    7f62:	b002      	add	sp, #8
    7f64:	bd80      	pop	{r7, pc}
    7f66:	46c0      	nop			; (mov r8, r8)

00007f68 <_getpid>:

extern int _getpid(void)
{
    7f68:	b580      	push	{r7, lr}
    7f6a:	af00      	add	r7, sp, #0
	return -1;
    7f6c:	2301      	movs	r3, #1
    7f6e:	425b      	negs	r3, r3
}
    7f70:	0018      	movs	r0, r3
    7f72:	46bd      	mov	sp, r7
    7f74:	bd80      	pop	{r7, pc}
    7f76:	46c0      	nop			; (mov r8, r8)

00007f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    7f78:	b580      	push	{r7, lr}
    7f7a:	b082      	sub	sp, #8
    7f7c:	af00      	add	r7, sp, #0
    7f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7f80:	687b      	ldr	r3, [r7, #4]
    7f82:	3308      	adds	r3, #8
    7f84:	001a      	movs	r2, r3
    7f86:	687b      	ldr	r3, [r7, #4]
    7f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    7f8a:	687b      	ldr	r3, [r7, #4]
    7f8c:	2201      	movs	r2, #1
    7f8e:	4252      	negs	r2, r2
    7f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7f92:	687b      	ldr	r3, [r7, #4]
    7f94:	3308      	adds	r3, #8
    7f96:	001a      	movs	r2, r3
    7f98:	687b      	ldr	r3, [r7, #4]
    7f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7f9c:	687b      	ldr	r3, [r7, #4]
    7f9e:	3308      	adds	r3, #8
    7fa0:	001a      	movs	r2, r3
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    7fa6:	687b      	ldr	r3, [r7, #4]
    7fa8:	2200      	movs	r2, #0
    7faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    7fac:	46c0      	nop			; (mov r8, r8)
    7fae:	46bd      	mov	sp, r7
    7fb0:	b002      	add	sp, #8
    7fb2:	bd80      	pop	{r7, pc}

00007fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    7fb4:	b580      	push	{r7, lr}
    7fb6:	b082      	sub	sp, #8
    7fb8:	af00      	add	r7, sp, #0
    7fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    7fbc:	687b      	ldr	r3, [r7, #4]
    7fbe:	2200      	movs	r2, #0
    7fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	46bd      	mov	sp, r7
    7fc6:	b002      	add	sp, #8
    7fc8:	bd80      	pop	{r7, pc}
    7fca:	46c0      	nop			; (mov r8, r8)

00007fcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    7fcc:	b580      	push	{r7, lr}
    7fce:	b084      	sub	sp, #16
    7fd0:	af00      	add	r7, sp, #0
    7fd2:	6078      	str	r0, [r7, #4]
    7fd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    7fd6:	687b      	ldr	r3, [r7, #4]
    7fd8:	685b      	ldr	r3, [r3, #4]
    7fda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    7fdc:	683b      	ldr	r3, [r7, #0]
    7fde:	68fa      	ldr	r2, [r7, #12]
    7fe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    7fe2:	68fb      	ldr	r3, [r7, #12]
    7fe4:	689a      	ldr	r2, [r3, #8]
    7fe6:	683b      	ldr	r3, [r7, #0]
    7fe8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    7fea:	68fb      	ldr	r3, [r7, #12]
    7fec:	689b      	ldr	r3, [r3, #8]
    7fee:	683a      	ldr	r2, [r7, #0]
    7ff0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    7ff2:	68fb      	ldr	r3, [r7, #12]
    7ff4:	683a      	ldr	r2, [r7, #0]
    7ff6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7ff8:	683b      	ldr	r3, [r7, #0]
    7ffa:	687a      	ldr	r2, [r7, #4]
    7ffc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    7ffe:	687b      	ldr	r3, [r7, #4]
    8000:	681b      	ldr	r3, [r3, #0]
    8002:	1c5a      	adds	r2, r3, #1
    8004:	687b      	ldr	r3, [r7, #4]
    8006:	601a      	str	r2, [r3, #0]
}
    8008:	46c0      	nop			; (mov r8, r8)
    800a:	46bd      	mov	sp, r7
    800c:	b004      	add	sp, #16
    800e:	bd80      	pop	{r7, pc}

00008010 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    8010:	b580      	push	{r7, lr}
    8012:	b084      	sub	sp, #16
    8014:	af00      	add	r7, sp, #0
    8016:	6078      	str	r0, [r7, #4]
    8018:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    801a:	683b      	ldr	r3, [r7, #0]
    801c:	681b      	ldr	r3, [r3, #0]
    801e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    8020:	68bb      	ldr	r3, [r7, #8]
    8022:	3301      	adds	r3, #1
    8024:	d103      	bne.n	802e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    8026:	687b      	ldr	r3, [r7, #4]
    8028:	691b      	ldr	r3, [r3, #16]
    802a:	60fb      	str	r3, [r7, #12]
    802c:	e00c      	b.n	8048 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	3308      	adds	r3, #8
    8032:	60fb      	str	r3, [r7, #12]
    8034:	e002      	b.n	803c <vListInsert+0x2c>
    8036:	68fb      	ldr	r3, [r7, #12]
    8038:	685b      	ldr	r3, [r3, #4]
    803a:	60fb      	str	r3, [r7, #12]
    803c:	68fb      	ldr	r3, [r7, #12]
    803e:	685b      	ldr	r3, [r3, #4]
    8040:	681a      	ldr	r2, [r3, #0]
    8042:	68bb      	ldr	r3, [r7, #8]
    8044:	429a      	cmp	r2, r3
    8046:	d9f6      	bls.n	8036 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    8048:	68fb      	ldr	r3, [r7, #12]
    804a:	685a      	ldr	r2, [r3, #4]
    804c:	683b      	ldr	r3, [r7, #0]
    804e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    8050:	683b      	ldr	r3, [r7, #0]
    8052:	685b      	ldr	r3, [r3, #4]
    8054:	683a      	ldr	r2, [r7, #0]
    8056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    8058:	683b      	ldr	r3, [r7, #0]
    805a:	68fa      	ldr	r2, [r7, #12]
    805c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    805e:	68fb      	ldr	r3, [r7, #12]
    8060:	683a      	ldr	r2, [r7, #0]
    8062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    8064:	683b      	ldr	r3, [r7, #0]
    8066:	687a      	ldr	r2, [r7, #4]
    8068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    806a:	687b      	ldr	r3, [r7, #4]
    806c:	681b      	ldr	r3, [r3, #0]
    806e:	1c5a      	adds	r2, r3, #1
    8070:	687b      	ldr	r3, [r7, #4]
    8072:	601a      	str	r2, [r3, #0]
}
    8074:	46c0      	nop			; (mov r8, r8)
    8076:	46bd      	mov	sp, r7
    8078:	b004      	add	sp, #16
    807a:	bd80      	pop	{r7, pc}

0000807c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    807c:	b580      	push	{r7, lr}
    807e:	b084      	sub	sp, #16
    8080:	af00      	add	r7, sp, #0
    8082:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    8084:	687b      	ldr	r3, [r7, #4]
    8086:	691b      	ldr	r3, [r3, #16]
    8088:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	685b      	ldr	r3, [r3, #4]
    808e:	687a      	ldr	r2, [r7, #4]
    8090:	6892      	ldr	r2, [r2, #8]
    8092:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    8094:	687b      	ldr	r3, [r7, #4]
    8096:	689b      	ldr	r3, [r3, #8]
    8098:	687a      	ldr	r2, [r7, #4]
    809a:	6852      	ldr	r2, [r2, #4]
    809c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    809e:	68fb      	ldr	r3, [r7, #12]
    80a0:	685a      	ldr	r2, [r3, #4]
    80a2:	687b      	ldr	r3, [r7, #4]
    80a4:	429a      	cmp	r2, r3
    80a6:	d103      	bne.n	80b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    80a8:	687b      	ldr	r3, [r7, #4]
    80aa:	689a      	ldr	r2, [r3, #8]
    80ac:	68fb      	ldr	r3, [r7, #12]
    80ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	2200      	movs	r2, #0
    80b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    80b6:	68fb      	ldr	r3, [r7, #12]
    80b8:	681b      	ldr	r3, [r3, #0]
    80ba:	1e5a      	subs	r2, r3, #1
    80bc:	68fb      	ldr	r3, [r7, #12]
    80be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    80c0:	68fb      	ldr	r3, [r7, #12]
    80c2:	681b      	ldr	r3, [r3, #0]
}
    80c4:	0018      	movs	r0, r3
    80c6:	46bd      	mov	sp, r7
    80c8:	b004      	add	sp, #16
    80ca:	bd80      	pop	{r7, pc}

000080cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    80cc:	b580      	push	{r7, lr}
    80ce:	b084      	sub	sp, #16
    80d0:	af00      	add	r7, sp, #0
    80d2:	60f8      	str	r0, [r7, #12]
    80d4:	60b9      	str	r1, [r7, #8]
    80d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    80d8:	68fb      	ldr	r3, [r7, #12]
    80da:	3b04      	subs	r3, #4
    80dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    80de:	68fb      	ldr	r3, [r7, #12]
    80e0:	2280      	movs	r2, #128	; 0x80
    80e2:	0452      	lsls	r2, r2, #17
    80e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    80e6:	68fb      	ldr	r3, [r7, #12]
    80e8:	3b04      	subs	r3, #4
    80ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    80ec:	68ba      	ldr	r2, [r7, #8]
    80ee:	68fb      	ldr	r3, [r7, #12]
    80f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    80f2:	68fb      	ldr	r3, [r7, #12]
    80f4:	3b04      	subs	r3, #4
    80f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    80f8:	4a08      	ldr	r2, [pc, #32]	; (811c <pxPortInitialiseStack+0x50>)
    80fa:	68fb      	ldr	r3, [r7, #12]
    80fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    80fe:	68fb      	ldr	r3, [r7, #12]
    8100:	3b14      	subs	r3, #20
    8102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    8104:	687a      	ldr	r2, [r7, #4]
    8106:	68fb      	ldr	r3, [r7, #12]
    8108:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    810a:	68fb      	ldr	r3, [r7, #12]
    810c:	3b20      	subs	r3, #32
    810e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    8110:	68fb      	ldr	r3, [r7, #12]
}
    8112:	0018      	movs	r0, r3
    8114:	46bd      	mov	sp, r7
    8116:	b004      	add	sp, #16
    8118:	bd80      	pop	{r7, pc}
    811a:	46c0      	nop			; (mov r8, r8)
    811c:	00008121 	.word	0x00008121

00008120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    8120:	b580      	push	{r7, lr}
    8122:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    8124:	4b03      	ldr	r3, [pc, #12]	; (8134 <prvTaskExitError+0x14>)
    8126:	681b      	ldr	r3, [r3, #0]
    8128:	3301      	adds	r3, #1
    812a:	d001      	beq.n	8130 <prvTaskExitError+0x10>
    812c:	b672      	cpsid	i
    812e:	e7fe      	b.n	812e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    8130:	b672      	cpsid	i
	for( ;; );
    8132:	e7fe      	b.n	8132 <prvTaskExitError+0x12>
    8134:	2000001c 	.word	0x2000001c

00008138 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    8138:	b580      	push	{r7, lr}
    813a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    813c:	46c0      	nop			; (mov r8, r8)
    813e:	46bd      	mov	sp, r7
    8140:	bd80      	pop	{r7, pc}
    8142:	46c0      	nop			; (mov r8, r8)
	...

00008150 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    8150:	4a0b      	ldr	r2, [pc, #44]	; (8180 <pxCurrentTCBConst2>)
    8152:	6813      	ldr	r3, [r2, #0]
    8154:	6818      	ldr	r0, [r3, #0]
    8156:	3020      	adds	r0, #32
    8158:	f380 8809 	msr	PSP, r0
    815c:	2002      	movs	r0, #2
    815e:	f380 8814 	msr	CONTROL, r0
    8162:	f3bf 8f6f 	isb	sy
    8166:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    8168:	46ae      	mov	lr, r5
    816a:	bc08      	pop	{r3}
    816c:	bc04      	pop	{r2}
    816e:	b662      	cpsie	i
    8170:	4718      	bx	r3
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	46c0      	nop			; (mov r8, r8)
    8176:	46c0      	nop			; (mov r8, r8)
    8178:	46c0      	nop			; (mov r8, r8)
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	46c0      	nop			; (mov r8, r8)
    817e:	46c0      	nop			; (mov r8, r8)

00008180 <pxCurrentTCBConst2>:
    8180:	20003bcc 	.word	0x20003bcc
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    8184:	46c0      	nop			; (mov r8, r8)
    8186:	46c0      	nop			; (mov r8, r8)

00008188 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    8188:	b580      	push	{r7, lr}
    818a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    818c:	4b0d      	ldr	r3, [pc, #52]	; (81c4 <xPortStartScheduler+0x3c>)
    818e:	4a0d      	ldr	r2, [pc, #52]	; (81c4 <xPortStartScheduler+0x3c>)
    8190:	6812      	ldr	r2, [r2, #0]
    8192:	21ff      	movs	r1, #255	; 0xff
    8194:	0409      	lsls	r1, r1, #16
    8196:	430a      	orrs	r2, r1
    8198:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    819a:	4b0a      	ldr	r3, [pc, #40]	; (81c4 <xPortStartScheduler+0x3c>)
    819c:	4a09      	ldr	r2, [pc, #36]	; (81c4 <xPortStartScheduler+0x3c>)
    819e:	6812      	ldr	r2, [r2, #0]
    81a0:	21ff      	movs	r1, #255	; 0xff
    81a2:	0609      	lsls	r1, r1, #24
    81a4:	430a      	orrs	r2, r1
    81a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    81a8:	4b07      	ldr	r3, [pc, #28]	; (81c8 <xPortStartScheduler+0x40>)
    81aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    81ac:	4b07      	ldr	r3, [pc, #28]	; (81cc <xPortStartScheduler+0x44>)
    81ae:	2200      	movs	r2, #0
    81b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    81b2:	4b07      	ldr	r3, [pc, #28]	; (81d0 <xPortStartScheduler+0x48>)
    81b4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    81b6:	4b07      	ldr	r3, [pc, #28]	; (81d4 <xPortStartScheduler+0x4c>)
    81b8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    81ba:	2300      	movs	r3, #0
}
    81bc:	0018      	movs	r0, r3
    81be:	46bd      	mov	sp, r7
    81c0:	bd80      	pop	{r7, pc}
    81c2:	46c0      	nop			; (mov r8, r8)
    81c4:	e000ed20 	.word	0xe000ed20
    81c8:	000082e9 	.word	0x000082e9
    81cc:	2000001c 	.word	0x2000001c
    81d0:	00008151 	.word	0x00008151
    81d4:	00008121 	.word	0x00008121

000081d8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    81d8:	b580      	push	{r7, lr}
    81da:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    81dc:	4b05      	ldr	r3, [pc, #20]	; (81f4 <vPortYield+0x1c>)
    81de:	2280      	movs	r2, #128	; 0x80
    81e0:	0552      	lsls	r2, r2, #21
    81e2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    81e4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    81e8:	f3bf 8f6f 	isb	sy
}
    81ec:	46c0      	nop			; (mov r8, r8)
    81ee:	46bd      	mov	sp, r7
    81f0:	bd80      	pop	{r7, pc}
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	e000ed04 	.word	0xe000ed04

000081f8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    81f8:	b580      	push	{r7, lr}
    81fa:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    81fc:	b672      	cpsid	i
    uxCriticalNesting++;
    81fe:	4b06      	ldr	r3, [pc, #24]	; (8218 <vPortEnterCritical+0x20>)
    8200:	681b      	ldr	r3, [r3, #0]
    8202:	1c5a      	adds	r2, r3, #1
    8204:	4b04      	ldr	r3, [pc, #16]	; (8218 <vPortEnterCritical+0x20>)
    8206:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    8208:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    820c:	f3bf 8f6f 	isb	sy
}
    8210:	46c0      	nop			; (mov r8, r8)
    8212:	46bd      	mov	sp, r7
    8214:	bd80      	pop	{r7, pc}
    8216:	46c0      	nop			; (mov r8, r8)
    8218:	2000001c 	.word	0x2000001c

0000821c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    821c:	b580      	push	{r7, lr}
    821e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    8220:	4b09      	ldr	r3, [pc, #36]	; (8248 <vPortExitCritical+0x2c>)
    8222:	681b      	ldr	r3, [r3, #0]
    8224:	2b00      	cmp	r3, #0
    8226:	d101      	bne.n	822c <vPortExitCritical+0x10>
    8228:	b672      	cpsid	i
    822a:	e7fe      	b.n	822a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    822c:	4b06      	ldr	r3, [pc, #24]	; (8248 <vPortExitCritical+0x2c>)
    822e:	681b      	ldr	r3, [r3, #0]
    8230:	1e5a      	subs	r2, r3, #1
    8232:	4b05      	ldr	r3, [pc, #20]	; (8248 <vPortExitCritical+0x2c>)
    8234:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    8236:	4b04      	ldr	r3, [pc, #16]	; (8248 <vPortExitCritical+0x2c>)
    8238:	681b      	ldr	r3, [r3, #0]
    823a:	2b00      	cmp	r3, #0
    823c:	d100      	bne.n	8240 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    823e:	b662      	cpsie	i
    }
}
    8240:	46c0      	nop			; (mov r8, r8)
    8242:	46bd      	mov	sp, r7
    8244:	bd80      	pop	{r7, pc}
    8246:	46c0      	nop			; (mov r8, r8)
    8248:	2000001c 	.word	0x2000001c

0000824c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    824c:	f3ef 8010 	mrs	r0, PRIMASK
    8250:	b672      	cpsid	i
    8252:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    8254:	46c0      	nop			; (mov r8, r8)
    8256:	0018      	movs	r0, r3

00008258 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    8258:	f380 8810 	msr	PRIMASK, r0
    825c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    825e:	46c0      	nop			; (mov r8, r8)

00008260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    8260:	f3ef 8009 	mrs	r0, PSP
    8264:	4b0e      	ldr	r3, [pc, #56]	; (82a0 <pxCurrentTCBConst>)
    8266:	681a      	ldr	r2, [r3, #0]
    8268:	3820      	subs	r0, #32
    826a:	6010      	str	r0, [r2, #0]
    826c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    826e:	4644      	mov	r4, r8
    8270:	464d      	mov	r5, r9
    8272:	4656      	mov	r6, sl
    8274:	465f      	mov	r7, fp
    8276:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    8278:	b508      	push	{r3, lr}
    827a:	b672      	cpsid	i
    827c:	f001 f9d8 	bl	9630 <vTaskSwitchContext>
    8280:	b662      	cpsie	i
    8282:	bc0c      	pop	{r2, r3}
    8284:	6811      	ldr	r1, [r2, #0]
    8286:	6808      	ldr	r0, [r1, #0]
    8288:	3010      	adds	r0, #16
    828a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    828c:	46a0      	mov	r8, r4
    828e:	46a9      	mov	r9, r5
    8290:	46b2      	mov	sl, r6
    8292:	46bb      	mov	fp, r7
    8294:	f380 8809 	msr	PSP, r0
    8298:	3820      	subs	r0, #32
    829a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    829c:	4718      	bx	r3
    829e:	46c0      	nop			; (mov r8, r8)

000082a0 <pxCurrentTCBConst>:
    82a0:	20003bcc 	.word	0x20003bcc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    82a4:	46c0      	nop			; (mov r8, r8)
    82a6:	46c0      	nop			; (mov r8, r8)

000082a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    82a8:	b580      	push	{r7, lr}
    82aa:	b082      	sub	sp, #8
    82ac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    82ae:	4b0a      	ldr	r3, [pc, #40]	; (82d8 <SysTick_Handler+0x30>)
    82b0:	4798      	blx	r3
    82b2:	0003      	movs	r3, r0
    82b4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    82b6:	4b09      	ldr	r3, [pc, #36]	; (82dc <SysTick_Handler+0x34>)
    82b8:	4798      	blx	r3
    82ba:	1e03      	subs	r3, r0, #0
    82bc:	d003      	beq.n	82c6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    82be:	4b08      	ldr	r3, [pc, #32]	; (82e0 <SysTick_Handler+0x38>)
    82c0:	2280      	movs	r2, #128	; 0x80
    82c2:	0552      	lsls	r2, r2, #21
    82c4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	0018      	movs	r0, r3
    82ca:	4b06      	ldr	r3, [pc, #24]	; (82e4 <SysTick_Handler+0x3c>)
    82cc:	4798      	blx	r3
}
    82ce:	46c0      	nop			; (mov r8, r8)
    82d0:	46bd      	mov	sp, r7
    82d2:	b002      	add	sp, #8
    82d4:	bd80      	pop	{r7, pc}
    82d6:	46c0      	nop			; (mov r8, r8)
    82d8:	0000824d 	.word	0x0000824d
    82dc:	000094d9 	.word	0x000094d9
    82e0:	e000ed04 	.word	0xe000ed04
    82e4:	00008259 	.word	0x00008259

000082e8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    82e8:	b580      	push	{r7, lr}
    82ea:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    82ec:	4b04      	ldr	r3, [pc, #16]	; (8300 <prvSetupTimerInterrupt+0x18>)
    82ee:	4a05      	ldr	r2, [pc, #20]	; (8304 <prvSetupTimerInterrupt+0x1c>)
    82f0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    82f2:	4b05      	ldr	r3, [pc, #20]	; (8308 <prvSetupTimerInterrupt+0x20>)
    82f4:	2207      	movs	r2, #7
    82f6:	601a      	str	r2, [r3, #0]
}
    82f8:	46c0      	nop			; (mov r8, r8)
    82fa:	46bd      	mov	sp, r7
    82fc:	bd80      	pop	{r7, pc}
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	e000e014 	.word	0xe000e014
    8304:	0000bb7f 	.word	0x0000bb7f
    8308:	e000e010 	.word	0xe000e010

0000830c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    830c:	b580      	push	{r7, lr}
    830e:	b084      	sub	sp, #16
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    8314:	2300      	movs	r3, #0
    8316:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    8318:	687b      	ldr	r3, [r7, #4]
    831a:	2207      	movs	r2, #7
    831c:	4013      	ands	r3, r2
    831e:	d004      	beq.n	832a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    8320:	687b      	ldr	r3, [r7, #4]
    8322:	2207      	movs	r2, #7
    8324:	4393      	bics	r3, r2
    8326:	3308      	adds	r3, #8
    8328:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    832a:	4b17      	ldr	r3, [pc, #92]	; (8388 <pvPortMalloc+0x7c>)
    832c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    832e:	4b17      	ldr	r3, [pc, #92]	; (838c <pvPortMalloc+0x80>)
    8330:	681b      	ldr	r3, [r3, #0]
    8332:	2b00      	cmp	r3, #0
    8334:	d105      	bne.n	8342 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    8336:	4b16      	ldr	r3, [pc, #88]	; (8390 <pvPortMalloc+0x84>)
    8338:	2207      	movs	r2, #7
    833a:	4393      	bics	r3, r2
    833c:	001a      	movs	r2, r3
    833e:	4b13      	ldr	r3, [pc, #76]	; (838c <pvPortMalloc+0x80>)
    8340:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    8342:	4b14      	ldr	r3, [pc, #80]	; (8394 <pvPortMalloc+0x88>)
    8344:	681a      	ldr	r2, [r3, #0]
    8346:	687b      	ldr	r3, [r7, #4]
    8348:	18d3      	adds	r3, r2, r3
    834a:	4a13      	ldr	r2, [pc, #76]	; (8398 <pvPortMalloc+0x8c>)
    834c:	4293      	cmp	r3, r2
    834e:	d813      	bhi.n	8378 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    8350:	4b10      	ldr	r3, [pc, #64]	; (8394 <pvPortMalloc+0x88>)
    8352:	681a      	ldr	r2, [r3, #0]
    8354:	687b      	ldr	r3, [r7, #4]
    8356:	18d2      	adds	r2, r2, r3
    8358:	4b0e      	ldr	r3, [pc, #56]	; (8394 <pvPortMalloc+0x88>)
    835a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    835c:	429a      	cmp	r2, r3
    835e:	d90b      	bls.n	8378 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    8360:	4b0a      	ldr	r3, [pc, #40]	; (838c <pvPortMalloc+0x80>)
    8362:	681a      	ldr	r2, [r3, #0]
    8364:	4b0b      	ldr	r3, [pc, #44]	; (8394 <pvPortMalloc+0x88>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	18d3      	adds	r3, r2, r3
    836a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    836c:	4b09      	ldr	r3, [pc, #36]	; (8394 <pvPortMalloc+0x88>)
    836e:	681a      	ldr	r2, [r3, #0]
    8370:	687b      	ldr	r3, [r7, #4]
    8372:	18d2      	adds	r2, r2, r3
    8374:	4b07      	ldr	r3, [pc, #28]	; (8394 <pvPortMalloc+0x88>)
    8376:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    8378:	4b08      	ldr	r3, [pc, #32]	; (839c <pvPortMalloc+0x90>)
    837a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    837c:	68fb      	ldr	r3, [r7, #12]
}
    837e:	0018      	movs	r0, r3
    8380:	46bd      	mov	sp, r7
    8382:	b004      	add	sp, #16
    8384:	bd80      	pop	{r7, pc}
    8386:	46c0      	nop			; (mov r8, r8)
    8388:	00009371 	.word	0x00009371
    838c:	20003bc8 	.word	0x20003bc8
    8390:	20000134 	.word	0x20000134
    8394:	20003bc4 	.word	0x20003bc4
    8398:	00003a8f 	.word	0x00003a8f
    839c:	00009389 	.word	0x00009389

000083a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    83a0:	b580      	push	{r7, lr}
    83a2:	b082      	sub	sp, #8
    83a4:	af00      	add	r7, sp, #0
    83a6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    83a8:	687b      	ldr	r3, [r7, #4]
    83aa:	2b00      	cmp	r3, #0
    83ac:	d001      	beq.n	83b2 <vPortFree+0x12>
    83ae:	b672      	cpsid	i
    83b0:	e7fe      	b.n	83b0 <vPortFree+0x10>
}
    83b2:	46c0      	nop			; (mov r8, r8)
    83b4:	46bd      	mov	sp, r7
    83b6:	b002      	add	sp, #8
    83b8:	bd80      	pop	{r7, pc}
    83ba:	46c0      	nop			; (mov r8, r8)

000083bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
    83c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    83ca:	68fb      	ldr	r3, [r7, #12]
    83cc:	2b00      	cmp	r3, #0
    83ce:	d101      	bne.n	83d4 <xQueueGenericReset+0x18>
    83d0:	b672      	cpsid	i
    83d2:	e7fe      	b.n	83d2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    83d4:	4b23      	ldr	r3, [pc, #140]	; (8464 <xQueueGenericReset+0xa8>)
    83d6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    83d8:	68fb      	ldr	r3, [r7, #12]
    83da:	681a      	ldr	r2, [r3, #0]
    83dc:	68fb      	ldr	r3, [r7, #12]
    83de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    83e0:	68fb      	ldr	r3, [r7, #12]
    83e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    83e4:	434b      	muls	r3, r1
    83e6:	18d2      	adds	r2, r2, r3
    83e8:	68fb      	ldr	r3, [r7, #12]
    83ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    83ec:	68fb      	ldr	r3, [r7, #12]
    83ee:	2200      	movs	r2, #0
    83f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    83f2:	68fb      	ldr	r3, [r7, #12]
    83f4:	681a      	ldr	r2, [r3, #0]
    83f6:	68fb      	ldr	r3, [r7, #12]
    83f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    83fa:	68fb      	ldr	r3, [r7, #12]
    83fc:	681a      	ldr	r2, [r3, #0]
    83fe:	68fb      	ldr	r3, [r7, #12]
    8400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8402:	1e59      	subs	r1, r3, #1
    8404:	68fb      	ldr	r3, [r7, #12]
    8406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8408:	434b      	muls	r3, r1
    840a:	18d2      	adds	r2, r2, r3
    840c:	68fb      	ldr	r3, [r7, #12]
    840e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    8410:	68fb      	ldr	r3, [r7, #12]
    8412:	2244      	movs	r2, #68	; 0x44
    8414:	21ff      	movs	r1, #255	; 0xff
    8416:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    8418:	68fb      	ldr	r3, [r7, #12]
    841a:	2245      	movs	r2, #69	; 0x45
    841c:	21ff      	movs	r1, #255	; 0xff
    841e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    8420:	683b      	ldr	r3, [r7, #0]
    8422:	2b00      	cmp	r3, #0
    8424:	d10d      	bne.n	8442 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    8426:	68fb      	ldr	r3, [r7, #12]
    8428:	691b      	ldr	r3, [r3, #16]
    842a:	2b00      	cmp	r3, #0
    842c:	d013      	beq.n	8456 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    842e:	68fb      	ldr	r3, [r7, #12]
    8430:	3310      	adds	r3, #16
    8432:	0018      	movs	r0, r3
    8434:	4b0c      	ldr	r3, [pc, #48]	; (8468 <xQueueGenericReset+0xac>)
    8436:	4798      	blx	r3
    8438:	1e03      	subs	r3, r0, #0
    843a:	d00c      	beq.n	8456 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    843c:	4b0b      	ldr	r3, [pc, #44]	; (846c <xQueueGenericReset+0xb0>)
    843e:	4798      	blx	r3
    8440:	e009      	b.n	8456 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    8442:	68fb      	ldr	r3, [r7, #12]
    8444:	3310      	adds	r3, #16
    8446:	0018      	movs	r0, r3
    8448:	4b09      	ldr	r3, [pc, #36]	; (8470 <xQueueGenericReset+0xb4>)
    844a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    844c:	68fb      	ldr	r3, [r7, #12]
    844e:	3324      	adds	r3, #36	; 0x24
    8450:	0018      	movs	r0, r3
    8452:	4b07      	ldr	r3, [pc, #28]	; (8470 <xQueueGenericReset+0xb4>)
    8454:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    8456:	4b07      	ldr	r3, [pc, #28]	; (8474 <xQueueGenericReset+0xb8>)
    8458:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    845a:	2301      	movs	r3, #1
}
    845c:	0018      	movs	r0, r3
    845e:	46bd      	mov	sp, r7
    8460:	b004      	add	sp, #16
    8462:	bd80      	pop	{r7, pc}
    8464:	000081f9 	.word	0x000081f9
    8468:	00009791 	.word	0x00009791
    846c:	000081d9 	.word	0x000081d9
    8470:	00007f79 	.word	0x00007f79
    8474:	0000821d 	.word	0x0000821d

00008478 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    8478:	b590      	push	{r4, r7, lr}
    847a:	b08b      	sub	sp, #44	; 0x2c
    847c:	af02      	add	r7, sp, #8
    847e:	60f8      	str	r0, [r7, #12]
    8480:	60b9      	str	r1, [r7, #8]
    8482:	1dfb      	adds	r3, r7, #7
    8484:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    8486:	68fb      	ldr	r3, [r7, #12]
    8488:	2b00      	cmp	r3, #0
    848a:	d101      	bne.n	8490 <xQueueGenericCreate+0x18>
    848c:	b672      	cpsid	i
    848e:	e7fe      	b.n	848e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    8490:	68bb      	ldr	r3, [r7, #8]
    8492:	2b00      	cmp	r3, #0
    8494:	d102      	bne.n	849c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    8496:	2300      	movs	r3, #0
    8498:	61fb      	str	r3, [r7, #28]
    849a:	e003      	b.n	84a4 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    849c:	68fb      	ldr	r3, [r7, #12]
    849e:	68ba      	ldr	r2, [r7, #8]
    84a0:	4353      	muls	r3, r2
    84a2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    84a4:	69fb      	ldr	r3, [r7, #28]
    84a6:	334c      	adds	r3, #76	; 0x4c
    84a8:	0018      	movs	r0, r3
    84aa:	4b0c      	ldr	r3, [pc, #48]	; (84dc <xQueueGenericCreate+0x64>)
    84ac:	4798      	blx	r3
    84ae:	0003      	movs	r3, r0
    84b0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    84b2:	69bb      	ldr	r3, [r7, #24]
    84b4:	2b00      	cmp	r3, #0
    84b6:	d00c      	beq.n	84d2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    84b8:	69bb      	ldr	r3, [r7, #24]
    84ba:	334c      	adds	r3, #76	; 0x4c
    84bc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    84be:	1dfb      	adds	r3, r7, #7
    84c0:	781c      	ldrb	r4, [r3, #0]
    84c2:	697a      	ldr	r2, [r7, #20]
    84c4:	68b9      	ldr	r1, [r7, #8]
    84c6:	68f8      	ldr	r0, [r7, #12]
    84c8:	69bb      	ldr	r3, [r7, #24]
    84ca:	9300      	str	r3, [sp, #0]
    84cc:	0023      	movs	r3, r4
    84ce:	4c04      	ldr	r4, [pc, #16]	; (84e0 <xQueueGenericCreate+0x68>)
    84d0:	47a0      	blx	r4
		}

		return pxNewQueue;
    84d2:	69bb      	ldr	r3, [r7, #24]
	}
    84d4:	0018      	movs	r0, r3
    84d6:	46bd      	mov	sp, r7
    84d8:	b009      	add	sp, #36	; 0x24
    84da:	bd90      	pop	{r4, r7, pc}
    84dc:	0000830d 	.word	0x0000830d
    84e0:	000084e5 	.word	0x000084e5

000084e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    84e4:	b580      	push	{r7, lr}
    84e6:	b084      	sub	sp, #16
    84e8:	af00      	add	r7, sp, #0
    84ea:	60f8      	str	r0, [r7, #12]
    84ec:	60b9      	str	r1, [r7, #8]
    84ee:	607a      	str	r2, [r7, #4]
    84f0:	001a      	movs	r2, r3
    84f2:	1cfb      	adds	r3, r7, #3
    84f4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    84f6:	68bb      	ldr	r3, [r7, #8]
    84f8:	2b00      	cmp	r3, #0
    84fa:	d103      	bne.n	8504 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    84fc:	69bb      	ldr	r3, [r7, #24]
    84fe:	69ba      	ldr	r2, [r7, #24]
    8500:	601a      	str	r2, [r3, #0]
    8502:	e002      	b.n	850a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    8504:	69bb      	ldr	r3, [r7, #24]
    8506:	687a      	ldr	r2, [r7, #4]
    8508:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    850a:	69bb      	ldr	r3, [r7, #24]
    850c:	68fa      	ldr	r2, [r7, #12]
    850e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    8510:	69bb      	ldr	r3, [r7, #24]
    8512:	68ba      	ldr	r2, [r7, #8]
    8514:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    8516:	69bb      	ldr	r3, [r7, #24]
    8518:	2101      	movs	r1, #1
    851a:	0018      	movs	r0, r3
    851c:	4b04      	ldr	r3, [pc, #16]	; (8530 <prvInitialiseNewQueue+0x4c>)
    851e:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    8520:	69bb      	ldr	r3, [r7, #24]
    8522:	2200      	movs	r2, #0
    8524:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    8526:	46c0      	nop			; (mov r8, r8)
    8528:	46bd      	mov	sp, r7
    852a:	b004      	add	sp, #16
    852c:	bd80      	pop	{r7, pc}
    852e:	46c0      	nop			; (mov r8, r8)
    8530:	000083bd 	.word	0x000083bd

00008534 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    8534:	b590      	push	{r4, r7, lr}
    8536:	b083      	sub	sp, #12
    8538:	af00      	add	r7, sp, #0
    853a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    853c:	687b      	ldr	r3, [r7, #4]
    853e:	2b00      	cmp	r3, #0
    8540:	d00e      	beq.n	8560 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    8542:	687b      	ldr	r3, [r7, #4]
    8544:	2200      	movs	r2, #0
    8546:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    8548:	687b      	ldr	r3, [r7, #4]
    854a:	2200      	movs	r2, #0
    854c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    854e:	687b      	ldr	r3, [r7, #4]
    8550:	2200      	movs	r2, #0
    8552:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    8554:	6878      	ldr	r0, [r7, #4]
    8556:	2300      	movs	r3, #0
    8558:	2200      	movs	r2, #0
    855a:	2100      	movs	r1, #0
    855c:	4c02      	ldr	r4, [pc, #8]	; (8568 <prvInitialiseMutex+0x34>)
    855e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    8560:	46c0      	nop			; (mov r8, r8)
    8562:	46bd      	mov	sp, r7
    8564:	b003      	add	sp, #12
    8566:	bd90      	pop	{r4, r7, pc}
    8568:	000085ad 	.word	0x000085ad

0000856c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    856c:	b580      	push	{r7, lr}
    856e:	b086      	sub	sp, #24
    8570:	af00      	add	r7, sp, #0
    8572:	0002      	movs	r2, r0
    8574:	1dfb      	adds	r3, r7, #7
    8576:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    8578:	2301      	movs	r3, #1
    857a:	617b      	str	r3, [r7, #20]
    857c:	2300      	movs	r3, #0
    857e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    8580:	1dfb      	adds	r3, r7, #7
    8582:	781a      	ldrb	r2, [r3, #0]
    8584:	6939      	ldr	r1, [r7, #16]
    8586:	697b      	ldr	r3, [r7, #20]
    8588:	0018      	movs	r0, r3
    858a:	4b06      	ldr	r3, [pc, #24]	; (85a4 <xQueueCreateMutex+0x38>)
    858c:	4798      	blx	r3
    858e:	0003      	movs	r3, r0
    8590:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    8592:	68fb      	ldr	r3, [r7, #12]
    8594:	0018      	movs	r0, r3
    8596:	4b04      	ldr	r3, [pc, #16]	; (85a8 <xQueueCreateMutex+0x3c>)
    8598:	4798      	blx	r3

		return pxNewQueue;
    859a:	68fb      	ldr	r3, [r7, #12]
	}
    859c:	0018      	movs	r0, r3
    859e:	46bd      	mov	sp, r7
    85a0:	b006      	add	sp, #24
    85a2:	bd80      	pop	{r7, pc}
    85a4:	00008479 	.word	0x00008479
    85a8:	00008535 	.word	0x00008535

000085ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    85ac:	b580      	push	{r7, lr}
    85ae:	b08a      	sub	sp, #40	; 0x28
    85b0:	af00      	add	r7, sp, #0
    85b2:	60f8      	str	r0, [r7, #12]
    85b4:	60b9      	str	r1, [r7, #8]
    85b6:	607a      	str	r2, [r7, #4]
    85b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    85ba:	2300      	movs	r3, #0
    85bc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    85be:	68fb      	ldr	r3, [r7, #12]
    85c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    85c2:	6a3b      	ldr	r3, [r7, #32]
    85c4:	2b00      	cmp	r3, #0
    85c6:	d101      	bne.n	85cc <xQueueGenericSend+0x20>
    85c8:	b672      	cpsid	i
    85ca:	e7fe      	b.n	85ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    85cc:	68bb      	ldr	r3, [r7, #8]
    85ce:	2b00      	cmp	r3, #0
    85d0:	d103      	bne.n	85da <xQueueGenericSend+0x2e>
    85d2:	6a3b      	ldr	r3, [r7, #32]
    85d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    85d6:	2b00      	cmp	r3, #0
    85d8:	d101      	bne.n	85de <xQueueGenericSend+0x32>
    85da:	2301      	movs	r3, #1
    85dc:	e000      	b.n	85e0 <xQueueGenericSend+0x34>
    85de:	2300      	movs	r3, #0
    85e0:	2b00      	cmp	r3, #0
    85e2:	d101      	bne.n	85e8 <xQueueGenericSend+0x3c>
    85e4:	b672      	cpsid	i
    85e6:	e7fe      	b.n	85e6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    85e8:	683b      	ldr	r3, [r7, #0]
    85ea:	2b02      	cmp	r3, #2
    85ec:	d103      	bne.n	85f6 <xQueueGenericSend+0x4a>
    85ee:	6a3b      	ldr	r3, [r7, #32]
    85f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    85f2:	2b01      	cmp	r3, #1
    85f4:	d101      	bne.n	85fa <xQueueGenericSend+0x4e>
    85f6:	2301      	movs	r3, #1
    85f8:	e000      	b.n	85fc <xQueueGenericSend+0x50>
    85fa:	2300      	movs	r3, #0
    85fc:	2b00      	cmp	r3, #0
    85fe:	d101      	bne.n	8604 <xQueueGenericSend+0x58>
    8600:	b672      	cpsid	i
    8602:	e7fe      	b.n	8602 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8604:	4b53      	ldr	r3, [pc, #332]	; (8754 <xQueueGenericSend+0x1a8>)
    8606:	4798      	blx	r3
    8608:	1e03      	subs	r3, r0, #0
    860a:	d102      	bne.n	8612 <xQueueGenericSend+0x66>
    860c:	687b      	ldr	r3, [r7, #4]
    860e:	2b00      	cmp	r3, #0
    8610:	d101      	bne.n	8616 <xQueueGenericSend+0x6a>
    8612:	2301      	movs	r3, #1
    8614:	e000      	b.n	8618 <xQueueGenericSend+0x6c>
    8616:	2300      	movs	r3, #0
    8618:	2b00      	cmp	r3, #0
    861a:	d101      	bne.n	8620 <xQueueGenericSend+0x74>
    861c:	b672      	cpsid	i
    861e:	e7fe      	b.n	861e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    8620:	4b4d      	ldr	r3, [pc, #308]	; (8758 <xQueueGenericSend+0x1ac>)
    8622:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    8624:	6a3b      	ldr	r3, [r7, #32]
    8626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8628:	6a3b      	ldr	r3, [r7, #32]
    862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    862c:	429a      	cmp	r2, r3
    862e:	d302      	bcc.n	8636 <xQueueGenericSend+0x8a>
    8630:	683b      	ldr	r3, [r7, #0]
    8632:	2b02      	cmp	r3, #2
    8634:	d12d      	bne.n	8692 <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    8636:	683a      	ldr	r2, [r7, #0]
    8638:	68b9      	ldr	r1, [r7, #8]
    863a:	6a3b      	ldr	r3, [r7, #32]
    863c:	0018      	movs	r0, r3
    863e:	4b47      	ldr	r3, [pc, #284]	; (875c <xQueueGenericSend+0x1b0>)
    8640:	4798      	blx	r3
    8642:	0003      	movs	r3, r0
    8644:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    8646:	6a3b      	ldr	r3, [r7, #32]
    8648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    864a:	2b00      	cmp	r3, #0
    864c:	d00a      	beq.n	8664 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    864e:	683a      	ldr	r2, [r7, #0]
    8650:	6a3b      	ldr	r3, [r7, #32]
    8652:	0011      	movs	r1, r2
    8654:	0018      	movs	r0, r3
    8656:	4b42      	ldr	r3, [pc, #264]	; (8760 <xQueueGenericSend+0x1b4>)
    8658:	4798      	blx	r3
    865a:	1e03      	subs	r3, r0, #0
    865c:	d015      	beq.n	868a <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    865e:	4b41      	ldr	r3, [pc, #260]	; (8764 <xQueueGenericSend+0x1b8>)
    8660:	4798      	blx	r3
    8662:	e012      	b.n	868a <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8664:	6a3b      	ldr	r3, [r7, #32]
    8666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8668:	2b00      	cmp	r3, #0
    866a:	d009      	beq.n	8680 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    866c:	6a3b      	ldr	r3, [r7, #32]
    866e:	3324      	adds	r3, #36	; 0x24
    8670:	0018      	movs	r0, r3
    8672:	4b3d      	ldr	r3, [pc, #244]	; (8768 <xQueueGenericSend+0x1bc>)
    8674:	4798      	blx	r3
    8676:	1e03      	subs	r3, r0, #0
    8678:	d007      	beq.n	868a <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    867a:	4b3a      	ldr	r3, [pc, #232]	; (8764 <xQueueGenericSend+0x1b8>)
    867c:	4798      	blx	r3
    867e:	e004      	b.n	868a <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    8680:	69fb      	ldr	r3, [r7, #28]
    8682:	2b00      	cmp	r3, #0
    8684:	d001      	beq.n	868a <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    8686:	4b37      	ldr	r3, [pc, #220]	; (8764 <xQueueGenericSend+0x1b8>)
    8688:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    868a:	4b38      	ldr	r3, [pc, #224]	; (876c <xQueueGenericSend+0x1c0>)
    868c:	4798      	blx	r3
				return pdPASS;
    868e:	2301      	movs	r3, #1
    8690:	e05c      	b.n	874c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    8692:	687b      	ldr	r3, [r7, #4]
    8694:	2b00      	cmp	r3, #0
    8696:	d103      	bne.n	86a0 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    8698:	4b34      	ldr	r3, [pc, #208]	; (876c <xQueueGenericSend+0x1c0>)
    869a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    869c:	2300      	movs	r3, #0
    869e:	e055      	b.n	874c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    86a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86a2:	2b00      	cmp	r3, #0
    86a4:	d106      	bne.n	86b4 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    86a6:	2314      	movs	r3, #20
    86a8:	18fb      	adds	r3, r7, r3
    86aa:	0018      	movs	r0, r3
    86ac:	4b30      	ldr	r3, [pc, #192]	; (8770 <xQueueGenericSend+0x1c4>)
    86ae:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    86b0:	2301      	movs	r3, #1
    86b2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    86b4:	4b2d      	ldr	r3, [pc, #180]	; (876c <xQueueGenericSend+0x1c0>)
    86b6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    86b8:	4b2e      	ldr	r3, [pc, #184]	; (8774 <xQueueGenericSend+0x1c8>)
    86ba:	4798      	blx	r3
		prvLockQueue( pxQueue );
    86bc:	4b26      	ldr	r3, [pc, #152]	; (8758 <xQueueGenericSend+0x1ac>)
    86be:	4798      	blx	r3
    86c0:	6a3b      	ldr	r3, [r7, #32]
    86c2:	2244      	movs	r2, #68	; 0x44
    86c4:	5c9b      	ldrb	r3, [r3, r2]
    86c6:	b25b      	sxtb	r3, r3
    86c8:	3301      	adds	r3, #1
    86ca:	d103      	bne.n	86d4 <xQueueGenericSend+0x128>
    86cc:	6a3b      	ldr	r3, [r7, #32]
    86ce:	2244      	movs	r2, #68	; 0x44
    86d0:	2100      	movs	r1, #0
    86d2:	5499      	strb	r1, [r3, r2]
    86d4:	6a3b      	ldr	r3, [r7, #32]
    86d6:	2245      	movs	r2, #69	; 0x45
    86d8:	5c9b      	ldrb	r3, [r3, r2]
    86da:	b25b      	sxtb	r3, r3
    86dc:	3301      	adds	r3, #1
    86de:	d103      	bne.n	86e8 <xQueueGenericSend+0x13c>
    86e0:	6a3b      	ldr	r3, [r7, #32]
    86e2:	2245      	movs	r2, #69	; 0x45
    86e4:	2100      	movs	r1, #0
    86e6:	5499      	strb	r1, [r3, r2]
    86e8:	4b20      	ldr	r3, [pc, #128]	; (876c <xQueueGenericSend+0x1c0>)
    86ea:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    86ec:	1d3a      	adds	r2, r7, #4
    86ee:	2314      	movs	r3, #20
    86f0:	18fb      	adds	r3, r7, r3
    86f2:	0011      	movs	r1, r2
    86f4:	0018      	movs	r0, r3
    86f6:	4b20      	ldr	r3, [pc, #128]	; (8778 <xQueueGenericSend+0x1cc>)
    86f8:	4798      	blx	r3
    86fa:	1e03      	subs	r3, r0, #0
    86fc:	d11f      	bne.n	873e <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    86fe:	6a3b      	ldr	r3, [r7, #32]
    8700:	0018      	movs	r0, r3
    8702:	4b1e      	ldr	r3, [pc, #120]	; (877c <xQueueGenericSend+0x1d0>)
    8704:	4798      	blx	r3
    8706:	1e03      	subs	r3, r0, #0
    8708:	d012      	beq.n	8730 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    870a:	6a3b      	ldr	r3, [r7, #32]
    870c:	3310      	adds	r3, #16
    870e:	687a      	ldr	r2, [r7, #4]
    8710:	0011      	movs	r1, r2
    8712:	0018      	movs	r0, r3
    8714:	4b1a      	ldr	r3, [pc, #104]	; (8780 <xQueueGenericSend+0x1d4>)
    8716:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    8718:	6a3b      	ldr	r3, [r7, #32]
    871a:	0018      	movs	r0, r3
    871c:	4b19      	ldr	r3, [pc, #100]	; (8784 <xQueueGenericSend+0x1d8>)
    871e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    8720:	4b19      	ldr	r3, [pc, #100]	; (8788 <xQueueGenericSend+0x1dc>)
    8722:	4798      	blx	r3
    8724:	1e03      	subs	r3, r0, #0
    8726:	d000      	beq.n	872a <xQueueGenericSend+0x17e>
    8728:	e77a      	b.n	8620 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    872a:	4b0e      	ldr	r3, [pc, #56]	; (8764 <xQueueGenericSend+0x1b8>)
    872c:	4798      	blx	r3
    872e:	e777      	b.n	8620 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    8730:	6a3b      	ldr	r3, [r7, #32]
    8732:	0018      	movs	r0, r3
    8734:	4b13      	ldr	r3, [pc, #76]	; (8784 <xQueueGenericSend+0x1d8>)
    8736:	4798      	blx	r3
				( void ) xTaskResumeAll();
    8738:	4b13      	ldr	r3, [pc, #76]	; (8788 <xQueueGenericSend+0x1dc>)
    873a:	4798      	blx	r3
    873c:	e770      	b.n	8620 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    873e:	6a3b      	ldr	r3, [r7, #32]
    8740:	0018      	movs	r0, r3
    8742:	4b10      	ldr	r3, [pc, #64]	; (8784 <xQueueGenericSend+0x1d8>)
    8744:	4798      	blx	r3
			( void ) xTaskResumeAll();
    8746:	4b10      	ldr	r3, [pc, #64]	; (8788 <xQueueGenericSend+0x1dc>)
    8748:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    874a:	2300      	movs	r3, #0
		}
	}
}
    874c:	0018      	movs	r0, r3
    874e:	46bd      	mov	sp, r7
    8750:	b00a      	add	sp, #40	; 0x28
    8752:	bd80      	pop	{r7, pc}
    8754:	00009ae5 	.word	0x00009ae5
    8758:	000081f9 	.word	0x000081f9
    875c:	00008bb1 	.word	0x00008bb1
    8760:	00008f05 	.word	0x00008f05
    8764:	000081d9 	.word	0x000081d9
    8768:	00009791 	.word	0x00009791
    876c:	0000821d 	.word	0x0000821d
    8770:	00009851 	.word	0x00009851
    8774:	00009371 	.word	0x00009371
    8778:	00009885 	.word	0x00009885
    877c:	00008e05 	.word	0x00008e05
    8780:	000096f9 	.word	0x000096f9
    8784:	00008ce1 	.word	0x00008ce1
    8788:	00009389 	.word	0x00009389

0000878c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    878c:	b580      	push	{r7, lr}
    878e:	b088      	sub	sp, #32
    8790:	af00      	add	r7, sp, #0
    8792:	60f8      	str	r0, [r7, #12]
    8794:	60b9      	str	r1, [r7, #8]
    8796:	607a      	str	r2, [r7, #4]
    8798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    879a:	68fb      	ldr	r3, [r7, #12]
    879c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    879e:	69bb      	ldr	r3, [r7, #24]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d101      	bne.n	87a8 <xQueueGenericSendFromISR+0x1c>
    87a4:	b672      	cpsid	i
    87a6:	e7fe      	b.n	87a6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    87a8:	68bb      	ldr	r3, [r7, #8]
    87aa:	2b00      	cmp	r3, #0
    87ac:	d103      	bne.n	87b6 <xQueueGenericSendFromISR+0x2a>
    87ae:	69bb      	ldr	r3, [r7, #24]
    87b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    87b2:	2b00      	cmp	r3, #0
    87b4:	d101      	bne.n	87ba <xQueueGenericSendFromISR+0x2e>
    87b6:	2301      	movs	r3, #1
    87b8:	e000      	b.n	87bc <xQueueGenericSendFromISR+0x30>
    87ba:	2300      	movs	r3, #0
    87bc:	2b00      	cmp	r3, #0
    87be:	d101      	bne.n	87c4 <xQueueGenericSendFromISR+0x38>
    87c0:	b672      	cpsid	i
    87c2:	e7fe      	b.n	87c2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    87c4:	683b      	ldr	r3, [r7, #0]
    87c6:	2b02      	cmp	r3, #2
    87c8:	d103      	bne.n	87d2 <xQueueGenericSendFromISR+0x46>
    87ca:	69bb      	ldr	r3, [r7, #24]
    87cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    87ce:	2b01      	cmp	r3, #1
    87d0:	d101      	bne.n	87d6 <xQueueGenericSendFromISR+0x4a>
    87d2:	2301      	movs	r3, #1
    87d4:	e000      	b.n	87d8 <xQueueGenericSendFromISR+0x4c>
    87d6:	2300      	movs	r3, #0
    87d8:	2b00      	cmp	r3, #0
    87da:	d101      	bne.n	87e0 <xQueueGenericSendFromISR+0x54>
    87dc:	b672      	cpsid	i
    87de:	e7fe      	b.n	87de <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    87e0:	4b2d      	ldr	r3, [pc, #180]	; (8898 <xQueueGenericSendFromISR+0x10c>)
    87e2:	4798      	blx	r3
    87e4:	0003      	movs	r3, r0
    87e6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    87e8:	69bb      	ldr	r3, [r7, #24]
    87ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    87ec:	69bb      	ldr	r3, [r7, #24]
    87ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    87f0:	429a      	cmp	r2, r3
    87f2:	d302      	bcc.n	87fa <xQueueGenericSendFromISR+0x6e>
    87f4:	683b      	ldr	r3, [r7, #0]
    87f6:	2b02      	cmp	r3, #2
    87f8:	d142      	bne.n	8880 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    87fa:	2313      	movs	r3, #19
    87fc:	18fb      	adds	r3, r7, r3
    87fe:	69ba      	ldr	r2, [r7, #24]
    8800:	2145      	movs	r1, #69	; 0x45
    8802:	5c52      	ldrb	r2, [r2, r1]
    8804:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    8806:	683a      	ldr	r2, [r7, #0]
    8808:	68b9      	ldr	r1, [r7, #8]
    880a:	69bb      	ldr	r3, [r7, #24]
    880c:	0018      	movs	r0, r3
    880e:	4b23      	ldr	r3, [pc, #140]	; (889c <xQueueGenericSendFromISR+0x110>)
    8810:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    8812:	2313      	movs	r3, #19
    8814:	18fb      	adds	r3, r7, r3
    8816:	781b      	ldrb	r3, [r3, #0]
    8818:	b25b      	sxtb	r3, r3
    881a:	3301      	adds	r3, #1
    881c:	d124      	bne.n	8868 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    881e:	69bb      	ldr	r3, [r7, #24]
    8820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8822:	2b00      	cmp	r3, #0
    8824:	d00e      	beq.n	8844 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    8826:	683a      	ldr	r2, [r7, #0]
    8828:	69bb      	ldr	r3, [r7, #24]
    882a:	0011      	movs	r1, r2
    882c:	0018      	movs	r0, r3
    882e:	4b1c      	ldr	r3, [pc, #112]	; (88a0 <xQueueGenericSendFromISR+0x114>)
    8830:	4798      	blx	r3
    8832:	1e03      	subs	r3, r0, #0
    8834:	d021      	beq.n	887a <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    8836:	687b      	ldr	r3, [r7, #4]
    8838:	2b00      	cmp	r3, #0
    883a:	d01e      	beq.n	887a <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    883c:	687b      	ldr	r3, [r7, #4]
    883e:	2201      	movs	r2, #1
    8840:	601a      	str	r2, [r3, #0]
    8842:	e01a      	b.n	887a <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8844:	69bb      	ldr	r3, [r7, #24]
    8846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8848:	2b00      	cmp	r3, #0
    884a:	d016      	beq.n	887a <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    884c:	69bb      	ldr	r3, [r7, #24]
    884e:	3324      	adds	r3, #36	; 0x24
    8850:	0018      	movs	r0, r3
    8852:	4b14      	ldr	r3, [pc, #80]	; (88a4 <xQueueGenericSendFromISR+0x118>)
    8854:	4798      	blx	r3
    8856:	1e03      	subs	r3, r0, #0
    8858:	d00f      	beq.n	887a <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	2b00      	cmp	r3, #0
    885e:	d00c      	beq.n	887a <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    8860:	687b      	ldr	r3, [r7, #4]
    8862:	2201      	movs	r2, #1
    8864:	601a      	str	r2, [r3, #0]
    8866:	e008      	b.n	887a <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    8868:	2313      	movs	r3, #19
    886a:	18fb      	adds	r3, r7, r3
    886c:	781b      	ldrb	r3, [r3, #0]
    886e:	3301      	adds	r3, #1
    8870:	b2db      	uxtb	r3, r3
    8872:	b259      	sxtb	r1, r3
    8874:	69bb      	ldr	r3, [r7, #24]
    8876:	2245      	movs	r2, #69	; 0x45
    8878:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    887a:	2301      	movs	r3, #1
    887c:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    887e:	e001      	b.n	8884 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    8880:	2300      	movs	r3, #0
    8882:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    8884:	697b      	ldr	r3, [r7, #20]
    8886:	0018      	movs	r0, r3
    8888:	4b07      	ldr	r3, [pc, #28]	; (88a8 <xQueueGenericSendFromISR+0x11c>)
    888a:	4798      	blx	r3

	return xReturn;
    888c:	69fb      	ldr	r3, [r7, #28]
}
    888e:	0018      	movs	r0, r3
    8890:	46bd      	mov	sp, r7
    8892:	b008      	add	sp, #32
    8894:	bd80      	pop	{r7, pc}
    8896:	46c0      	nop			; (mov r8, r8)
    8898:	0000824d 	.word	0x0000824d
    889c:	00008bb1 	.word	0x00008bb1
    88a0:	00008f05 	.word	0x00008f05
    88a4:	00009791 	.word	0x00009791
    88a8:	00008259 	.word	0x00008259

000088ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    88ac:	b580      	push	{r7, lr}
    88ae:	b088      	sub	sp, #32
    88b0:	af00      	add	r7, sp, #0
    88b2:	6078      	str	r0, [r7, #4]
    88b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    88ba:	69bb      	ldr	r3, [r7, #24]
    88bc:	2b00      	cmp	r3, #0
    88be:	d101      	bne.n	88c4 <xQueueGiveFromISR+0x18>
    88c0:	b672      	cpsid	i
    88c2:	e7fe      	b.n	88c2 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    88c4:	69bb      	ldr	r3, [r7, #24]
    88c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88c8:	2b00      	cmp	r3, #0
    88ca:	d001      	beq.n	88d0 <xQueueGiveFromISR+0x24>
    88cc:	b672      	cpsid	i
    88ce:	e7fe      	b.n	88ce <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    88d0:	69bb      	ldr	r3, [r7, #24]
    88d2:	681b      	ldr	r3, [r3, #0]
    88d4:	2b00      	cmp	r3, #0
    88d6:	d103      	bne.n	88e0 <xQueueGiveFromISR+0x34>
    88d8:	69bb      	ldr	r3, [r7, #24]
    88da:	685b      	ldr	r3, [r3, #4]
    88dc:	2b00      	cmp	r3, #0
    88de:	d101      	bne.n	88e4 <xQueueGiveFromISR+0x38>
    88e0:	2301      	movs	r3, #1
    88e2:	e000      	b.n	88e6 <xQueueGiveFromISR+0x3a>
    88e4:	2300      	movs	r3, #0
    88e6:	2b00      	cmp	r3, #0
    88e8:	d101      	bne.n	88ee <xQueueGiveFromISR+0x42>
    88ea:	b672      	cpsid	i
    88ec:	e7fe      	b.n	88ec <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    88ee:	4b2b      	ldr	r3, [pc, #172]	; (899c <xQueueGiveFromISR+0xf0>)
    88f0:	4798      	blx	r3
    88f2:	0003      	movs	r3, r0
    88f4:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    88f6:	69bb      	ldr	r3, [r7, #24]
    88f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    88fa:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    88fc:	69bb      	ldr	r3, [r7, #24]
    88fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    8900:	693b      	ldr	r3, [r7, #16]
    8902:	429a      	cmp	r2, r3
    8904:	d93f      	bls.n	8986 <xQueueGiveFromISR+0xda>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    8906:	230f      	movs	r3, #15
    8908:	18fb      	adds	r3, r7, r3
    890a:	69ba      	ldr	r2, [r7, #24]
    890c:	2145      	movs	r1, #69	; 0x45
    890e:	5c52      	ldrb	r2, [r2, r1]
    8910:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    8912:	693b      	ldr	r3, [r7, #16]
    8914:	1c5a      	adds	r2, r3, #1
    8916:	69bb      	ldr	r3, [r7, #24]
    8918:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    891a:	230f      	movs	r3, #15
    891c:	18fb      	adds	r3, r7, r3
    891e:	781b      	ldrb	r3, [r3, #0]
    8920:	b25b      	sxtb	r3, r3
    8922:	3301      	adds	r3, #1
    8924:	d123      	bne.n	896e <xQueueGiveFromISR+0xc2>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    8926:	69bb      	ldr	r3, [r7, #24]
    8928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    892a:	2b00      	cmp	r3, #0
    892c:	d00d      	beq.n	894a <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    892e:	69bb      	ldr	r3, [r7, #24]
    8930:	2100      	movs	r1, #0
    8932:	0018      	movs	r0, r3
    8934:	4b1a      	ldr	r3, [pc, #104]	; (89a0 <xQueueGiveFromISR+0xf4>)
    8936:	4798      	blx	r3
    8938:	1e03      	subs	r3, r0, #0
    893a:	d021      	beq.n	8980 <xQueueGiveFromISR+0xd4>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    893c:	683b      	ldr	r3, [r7, #0]
    893e:	2b00      	cmp	r3, #0
    8940:	d01e      	beq.n	8980 <xQueueGiveFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    8942:	683b      	ldr	r3, [r7, #0]
    8944:	2201      	movs	r2, #1
    8946:	601a      	str	r2, [r3, #0]
    8948:	e01a      	b.n	8980 <xQueueGiveFromISR+0xd4>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    894a:	69bb      	ldr	r3, [r7, #24]
    894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    894e:	2b00      	cmp	r3, #0
    8950:	d016      	beq.n	8980 <xQueueGiveFromISR+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8952:	69bb      	ldr	r3, [r7, #24]
    8954:	3324      	adds	r3, #36	; 0x24
    8956:	0018      	movs	r0, r3
    8958:	4b12      	ldr	r3, [pc, #72]	; (89a4 <xQueueGiveFromISR+0xf8>)
    895a:	4798      	blx	r3
    895c:	1e03      	subs	r3, r0, #0
    895e:	d00f      	beq.n	8980 <xQueueGiveFromISR+0xd4>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    8960:	683b      	ldr	r3, [r7, #0]
    8962:	2b00      	cmp	r3, #0
    8964:	d00c      	beq.n	8980 <xQueueGiveFromISR+0xd4>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    8966:	683b      	ldr	r3, [r7, #0]
    8968:	2201      	movs	r2, #1
    896a:	601a      	str	r2, [r3, #0]
    896c:	e008      	b.n	8980 <xQueueGiveFromISR+0xd4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    896e:	230f      	movs	r3, #15
    8970:	18fb      	adds	r3, r7, r3
    8972:	781b      	ldrb	r3, [r3, #0]
    8974:	3301      	adds	r3, #1
    8976:	b2db      	uxtb	r3, r3
    8978:	b259      	sxtb	r1, r3
    897a:	69bb      	ldr	r3, [r7, #24]
    897c:	2245      	movs	r2, #69	; 0x45
    897e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    8980:	2301      	movs	r3, #1
    8982:	61fb      	str	r3, [r7, #28]
    8984:	e001      	b.n	898a <xQueueGiveFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    8986:	2300      	movs	r3, #0
    8988:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    898a:	697b      	ldr	r3, [r7, #20]
    898c:	0018      	movs	r0, r3
    898e:	4b06      	ldr	r3, [pc, #24]	; (89a8 <xQueueGiveFromISR+0xfc>)
    8990:	4798      	blx	r3

	return xReturn;
    8992:	69fb      	ldr	r3, [r7, #28]
}
    8994:	0018      	movs	r0, r3
    8996:	46bd      	mov	sp, r7
    8998:	b008      	add	sp, #32
    899a:	bd80      	pop	{r7, pc}
    899c:	0000824d 	.word	0x0000824d
    89a0:	00008f05 	.word	0x00008f05
    89a4:	00009791 	.word	0x00009791
    89a8:	00008259 	.word	0x00008259

000089ac <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    89ac:	b580      	push	{r7, lr}
    89ae:	b08a      	sub	sp, #40	; 0x28
    89b0:	af00      	add	r7, sp, #0
    89b2:	60f8      	str	r0, [r7, #12]
    89b4:	60b9      	str	r1, [r7, #8]
    89b6:	607a      	str	r2, [r7, #4]
    89b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    89ba:	2300      	movs	r3, #0
    89bc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    89be:	68fb      	ldr	r3, [r7, #12]
    89c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    89c2:	6a3b      	ldr	r3, [r7, #32]
    89c4:	2b00      	cmp	r3, #0
    89c6:	d101      	bne.n	89cc <xQueueGenericReceive+0x20>
    89c8:	b672      	cpsid	i
    89ca:	e7fe      	b.n	89ca <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    89cc:	68bb      	ldr	r3, [r7, #8]
    89ce:	2b00      	cmp	r3, #0
    89d0:	d103      	bne.n	89da <xQueueGenericReceive+0x2e>
    89d2:	6a3b      	ldr	r3, [r7, #32]
    89d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    89d6:	2b00      	cmp	r3, #0
    89d8:	d101      	bne.n	89de <xQueueGenericReceive+0x32>
    89da:	2301      	movs	r3, #1
    89dc:	e000      	b.n	89e0 <xQueueGenericReceive+0x34>
    89de:	2300      	movs	r3, #0
    89e0:	2b00      	cmp	r3, #0
    89e2:	d101      	bne.n	89e8 <xQueueGenericReceive+0x3c>
    89e4:	b672      	cpsid	i
    89e6:	e7fe      	b.n	89e6 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    89e8:	4b62      	ldr	r3, [pc, #392]	; (8b74 <xQueueGenericReceive+0x1c8>)
    89ea:	4798      	blx	r3
    89ec:	1e03      	subs	r3, r0, #0
    89ee:	d102      	bne.n	89f6 <xQueueGenericReceive+0x4a>
    89f0:	687b      	ldr	r3, [r7, #4]
    89f2:	2b00      	cmp	r3, #0
    89f4:	d101      	bne.n	89fa <xQueueGenericReceive+0x4e>
    89f6:	2301      	movs	r3, #1
    89f8:	e000      	b.n	89fc <xQueueGenericReceive+0x50>
    89fa:	2300      	movs	r3, #0
    89fc:	2b00      	cmp	r3, #0
    89fe:	d101      	bne.n	8a04 <xQueueGenericReceive+0x58>
    8a00:	b672      	cpsid	i
    8a02:	e7fe      	b.n	8a02 <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    8a04:	4b5c      	ldr	r3, [pc, #368]	; (8b78 <xQueueGenericReceive+0x1cc>)
    8a06:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8a08:	6a3b      	ldr	r3, [r7, #32]
    8a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8a0c:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    8a0e:	69fb      	ldr	r3, [r7, #28]
    8a10:	2b00      	cmp	r3, #0
    8a12:	d03a      	beq.n	8a8a <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    8a14:	6a3b      	ldr	r3, [r7, #32]
    8a16:	68db      	ldr	r3, [r3, #12]
    8a18:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    8a1a:	68ba      	ldr	r2, [r7, #8]
    8a1c:	6a3b      	ldr	r3, [r7, #32]
    8a1e:	0011      	movs	r1, r2
    8a20:	0018      	movs	r0, r3
    8a22:	4b56      	ldr	r3, [pc, #344]	; (8b7c <xQueueGenericReceive+0x1d0>)
    8a24:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    8a26:	683b      	ldr	r3, [r7, #0]
    8a28:	2b00      	cmp	r3, #0
    8a2a:	d11a      	bne.n	8a62 <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    8a2c:	69fb      	ldr	r3, [r7, #28]
    8a2e:	1e5a      	subs	r2, r3, #1
    8a30:	6a3b      	ldr	r3, [r7, #32]
    8a32:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8a34:	6a3b      	ldr	r3, [r7, #32]
    8a36:	681b      	ldr	r3, [r3, #0]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d104      	bne.n	8a46 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    8a3c:	4b50      	ldr	r3, [pc, #320]	; (8b80 <xQueueGenericReceive+0x1d4>)
    8a3e:	4798      	blx	r3
    8a40:	0002      	movs	r2, r0
    8a42:	6a3b      	ldr	r3, [r7, #32]
    8a44:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    8a46:	6a3b      	ldr	r3, [r7, #32]
    8a48:	691b      	ldr	r3, [r3, #16]
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d019      	beq.n	8a82 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    8a4e:	6a3b      	ldr	r3, [r7, #32]
    8a50:	3310      	adds	r3, #16
    8a52:	0018      	movs	r0, r3
    8a54:	4b4b      	ldr	r3, [pc, #300]	; (8b84 <xQueueGenericReceive+0x1d8>)
    8a56:	4798      	blx	r3
    8a58:	1e03      	subs	r3, r0, #0
    8a5a:	d012      	beq.n	8a82 <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    8a5c:	4b4a      	ldr	r3, [pc, #296]	; (8b88 <xQueueGenericReceive+0x1dc>)
    8a5e:	4798      	blx	r3
    8a60:	e00f      	b.n	8a82 <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    8a62:	6a3b      	ldr	r3, [r7, #32]
    8a64:	69ba      	ldr	r2, [r7, #24]
    8a66:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8a68:	6a3b      	ldr	r3, [r7, #32]
    8a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8a6c:	2b00      	cmp	r3, #0
    8a6e:	d008      	beq.n	8a82 <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8a70:	6a3b      	ldr	r3, [r7, #32]
    8a72:	3324      	adds	r3, #36	; 0x24
    8a74:	0018      	movs	r0, r3
    8a76:	4b43      	ldr	r3, [pc, #268]	; (8b84 <xQueueGenericReceive+0x1d8>)
    8a78:	4798      	blx	r3
    8a7a:	1e03      	subs	r3, r0, #0
    8a7c:	d001      	beq.n	8a82 <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    8a7e:	4b42      	ldr	r3, [pc, #264]	; (8b88 <xQueueGenericReceive+0x1dc>)
    8a80:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    8a82:	4b42      	ldr	r3, [pc, #264]	; (8b8c <xQueueGenericReceive+0x1e0>)
    8a84:	4798      	blx	r3
				return pdPASS;
    8a86:	2301      	movs	r3, #1
    8a88:	e070      	b.n	8b6c <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    8a8a:	687b      	ldr	r3, [r7, #4]
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d103      	bne.n	8a98 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    8a90:	4b3e      	ldr	r3, [pc, #248]	; (8b8c <xQueueGenericReceive+0x1e0>)
    8a92:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    8a94:	2300      	movs	r3, #0
    8a96:	e069      	b.n	8b6c <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    8a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d106      	bne.n	8aac <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    8a9e:	2310      	movs	r3, #16
    8aa0:	18fb      	adds	r3, r7, r3
    8aa2:	0018      	movs	r0, r3
    8aa4:	4b3a      	ldr	r3, [pc, #232]	; (8b90 <xQueueGenericReceive+0x1e4>)
    8aa6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    8aa8:	2301      	movs	r3, #1
    8aaa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    8aac:	4b37      	ldr	r3, [pc, #220]	; (8b8c <xQueueGenericReceive+0x1e0>)
    8aae:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    8ab0:	4b38      	ldr	r3, [pc, #224]	; (8b94 <xQueueGenericReceive+0x1e8>)
    8ab2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    8ab4:	4b30      	ldr	r3, [pc, #192]	; (8b78 <xQueueGenericReceive+0x1cc>)
    8ab6:	4798      	blx	r3
    8ab8:	6a3b      	ldr	r3, [r7, #32]
    8aba:	2244      	movs	r2, #68	; 0x44
    8abc:	5c9b      	ldrb	r3, [r3, r2]
    8abe:	b25b      	sxtb	r3, r3
    8ac0:	3301      	adds	r3, #1
    8ac2:	d103      	bne.n	8acc <xQueueGenericReceive+0x120>
    8ac4:	6a3b      	ldr	r3, [r7, #32]
    8ac6:	2244      	movs	r2, #68	; 0x44
    8ac8:	2100      	movs	r1, #0
    8aca:	5499      	strb	r1, [r3, r2]
    8acc:	6a3b      	ldr	r3, [r7, #32]
    8ace:	2245      	movs	r2, #69	; 0x45
    8ad0:	5c9b      	ldrb	r3, [r3, r2]
    8ad2:	b25b      	sxtb	r3, r3
    8ad4:	3301      	adds	r3, #1
    8ad6:	d103      	bne.n	8ae0 <xQueueGenericReceive+0x134>
    8ad8:	6a3b      	ldr	r3, [r7, #32]
    8ada:	2245      	movs	r2, #69	; 0x45
    8adc:	2100      	movs	r1, #0
    8ade:	5499      	strb	r1, [r3, r2]
    8ae0:	4b2a      	ldr	r3, [pc, #168]	; (8b8c <xQueueGenericReceive+0x1e0>)
    8ae2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    8ae4:	1d3a      	adds	r2, r7, #4
    8ae6:	2310      	movs	r3, #16
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	0011      	movs	r1, r2
    8aec:	0018      	movs	r0, r3
    8aee:	4b2a      	ldr	r3, [pc, #168]	; (8b98 <xQueueGenericReceive+0x1ec>)
    8af0:	4798      	blx	r3
    8af2:	1e03      	subs	r3, r0, #0
    8af4:	d12c      	bne.n	8b50 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8af6:	6a3b      	ldr	r3, [r7, #32]
    8af8:	0018      	movs	r0, r3
    8afa:	4b28      	ldr	r3, [pc, #160]	; (8b9c <xQueueGenericReceive+0x1f0>)
    8afc:	4798      	blx	r3
    8afe:	1e03      	subs	r3, r0, #0
    8b00:	d01f      	beq.n	8b42 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8b02:	6a3b      	ldr	r3, [r7, #32]
    8b04:	681b      	ldr	r3, [r3, #0]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d108      	bne.n	8b1c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    8b0a:	4b1b      	ldr	r3, [pc, #108]	; (8b78 <xQueueGenericReceive+0x1cc>)
    8b0c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    8b0e:	6a3b      	ldr	r3, [r7, #32]
    8b10:	685b      	ldr	r3, [r3, #4]
    8b12:	0018      	movs	r0, r3
    8b14:	4b22      	ldr	r3, [pc, #136]	; (8ba0 <xQueueGenericReceive+0x1f4>)
    8b16:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    8b18:	4b1c      	ldr	r3, [pc, #112]	; (8b8c <xQueueGenericReceive+0x1e0>)
    8b1a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    8b1c:	6a3b      	ldr	r3, [r7, #32]
    8b1e:	3324      	adds	r3, #36	; 0x24
    8b20:	687a      	ldr	r2, [r7, #4]
    8b22:	0011      	movs	r1, r2
    8b24:	0018      	movs	r0, r3
    8b26:	4b1f      	ldr	r3, [pc, #124]	; (8ba4 <xQueueGenericReceive+0x1f8>)
    8b28:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    8b2a:	6a3b      	ldr	r3, [r7, #32]
    8b2c:	0018      	movs	r0, r3
    8b2e:	4b1e      	ldr	r3, [pc, #120]	; (8ba8 <xQueueGenericReceive+0x1fc>)
    8b30:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8b32:	4b1e      	ldr	r3, [pc, #120]	; (8bac <xQueueGenericReceive+0x200>)
    8b34:	4798      	blx	r3
    8b36:	1e03      	subs	r3, r0, #0
    8b38:	d000      	beq.n	8b3c <xQueueGenericReceive+0x190>
    8b3a:	e763      	b.n	8a04 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    8b3c:	4b12      	ldr	r3, [pc, #72]	; (8b88 <xQueueGenericReceive+0x1dc>)
    8b3e:	4798      	blx	r3
    8b40:	e760      	b.n	8a04 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    8b42:	6a3b      	ldr	r3, [r7, #32]
    8b44:	0018      	movs	r0, r3
    8b46:	4b18      	ldr	r3, [pc, #96]	; (8ba8 <xQueueGenericReceive+0x1fc>)
    8b48:	4798      	blx	r3
				( void ) xTaskResumeAll();
    8b4a:	4b18      	ldr	r3, [pc, #96]	; (8bac <xQueueGenericReceive+0x200>)
    8b4c:	4798      	blx	r3
    8b4e:	e759      	b.n	8a04 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    8b50:	6a3b      	ldr	r3, [r7, #32]
    8b52:	0018      	movs	r0, r3
    8b54:	4b14      	ldr	r3, [pc, #80]	; (8ba8 <xQueueGenericReceive+0x1fc>)
    8b56:	4798      	blx	r3
			( void ) xTaskResumeAll();
    8b58:	4b14      	ldr	r3, [pc, #80]	; (8bac <xQueueGenericReceive+0x200>)
    8b5a:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    8b5c:	6a3b      	ldr	r3, [r7, #32]
    8b5e:	0018      	movs	r0, r3
    8b60:	4b0e      	ldr	r3, [pc, #56]	; (8b9c <xQueueGenericReceive+0x1f0>)
    8b62:	4798      	blx	r3
    8b64:	1e03      	subs	r3, r0, #0
    8b66:	d100      	bne.n	8b6a <xQueueGenericReceive+0x1be>
    8b68:	e74c      	b.n	8a04 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    8b6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    8b6c:	0018      	movs	r0, r3
    8b6e:	46bd      	mov	sp, r7
    8b70:	b00a      	add	sp, #40	; 0x28
    8b72:	bd80      	pop	{r7, pc}
    8b74:	00009ae5 	.word	0x00009ae5
    8b78:	000081f9 	.word	0x000081f9
    8b7c:	00008c91 	.word	0x00008c91
    8b80:	00009ca1 	.word	0x00009ca1
    8b84:	00009791 	.word	0x00009791
    8b88:	000081d9 	.word	0x000081d9
    8b8c:	0000821d 	.word	0x0000821d
    8b90:	00009851 	.word	0x00009851
    8b94:	00009371 	.word	0x00009371
    8b98:	00009885 	.word	0x00009885
    8b9c:	00008dd1 	.word	0x00008dd1
    8ba0:	00009b1d 	.word	0x00009b1d
    8ba4:	000096f9 	.word	0x000096f9
    8ba8:	00008ce1 	.word	0x00008ce1
    8bac:	00009389 	.word	0x00009389

00008bb0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b086      	sub	sp, #24
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	60f8      	str	r0, [r7, #12]
    8bb8:	60b9      	str	r1, [r7, #8]
    8bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    8bbc:	2300      	movs	r3, #0
    8bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    8bc0:	68fb      	ldr	r3, [r7, #12]
    8bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    8bc6:	68fb      	ldr	r3, [r7, #12]
    8bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8bca:	2b00      	cmp	r3, #0
    8bcc:	d10e      	bne.n	8bec <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    8bce:	68fb      	ldr	r3, [r7, #12]
    8bd0:	681b      	ldr	r3, [r3, #0]
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d14e      	bne.n	8c74 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    8bd6:	68fb      	ldr	r3, [r7, #12]
    8bd8:	685b      	ldr	r3, [r3, #4]
    8bda:	0018      	movs	r0, r3
    8bdc:	4b2a      	ldr	r3, [pc, #168]	; (8c88 <prvCopyDataToQueue+0xd8>)
    8bde:	4798      	blx	r3
    8be0:	0003      	movs	r3, r0
    8be2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    8be4:	68fb      	ldr	r3, [r7, #12]
    8be6:	2200      	movs	r2, #0
    8be8:	605a      	str	r2, [r3, #4]
    8bea:	e043      	b.n	8c74 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    8bec:	687b      	ldr	r3, [r7, #4]
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d119      	bne.n	8c26 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    8bf2:	68fb      	ldr	r3, [r7, #12]
    8bf4:	6898      	ldr	r0, [r3, #8]
    8bf6:	68fb      	ldr	r3, [r7, #12]
    8bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8bfa:	68bb      	ldr	r3, [r7, #8]
    8bfc:	0019      	movs	r1, r3
    8bfe:	4b23      	ldr	r3, [pc, #140]	; (8c8c <prvCopyDataToQueue+0xdc>)
    8c00:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    8c02:	68fb      	ldr	r3, [r7, #12]
    8c04:	689a      	ldr	r2, [r3, #8]
    8c06:	68fb      	ldr	r3, [r7, #12]
    8c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c0a:	18d2      	adds	r2, r2, r3
    8c0c:	68fb      	ldr	r3, [r7, #12]
    8c0e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    8c10:	68fb      	ldr	r3, [r7, #12]
    8c12:	689a      	ldr	r2, [r3, #8]
    8c14:	68fb      	ldr	r3, [r7, #12]
    8c16:	685b      	ldr	r3, [r3, #4]
    8c18:	429a      	cmp	r2, r3
    8c1a:	d32b      	bcc.n	8c74 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    8c1c:	68fb      	ldr	r3, [r7, #12]
    8c1e:	681a      	ldr	r2, [r3, #0]
    8c20:	68fb      	ldr	r3, [r7, #12]
    8c22:	609a      	str	r2, [r3, #8]
    8c24:	e026      	b.n	8c74 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8c26:	68fb      	ldr	r3, [r7, #12]
    8c28:	68d8      	ldr	r0, [r3, #12]
    8c2a:	68fb      	ldr	r3, [r7, #12]
    8c2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8c2e:	68bb      	ldr	r3, [r7, #8]
    8c30:	0019      	movs	r1, r3
    8c32:	4b16      	ldr	r3, [pc, #88]	; (8c8c <prvCopyDataToQueue+0xdc>)
    8c34:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    8c36:	68fb      	ldr	r3, [r7, #12]
    8c38:	68da      	ldr	r2, [r3, #12]
    8c3a:	68fb      	ldr	r3, [r7, #12]
    8c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c3e:	425b      	negs	r3, r3
    8c40:	18d2      	adds	r2, r2, r3
    8c42:	68fb      	ldr	r3, [r7, #12]
    8c44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    8c46:	68fb      	ldr	r3, [r7, #12]
    8c48:	68da      	ldr	r2, [r3, #12]
    8c4a:	68fb      	ldr	r3, [r7, #12]
    8c4c:	681b      	ldr	r3, [r3, #0]
    8c4e:	429a      	cmp	r2, r3
    8c50:	d207      	bcs.n	8c62 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    8c52:	68fb      	ldr	r3, [r7, #12]
    8c54:	685a      	ldr	r2, [r3, #4]
    8c56:	68fb      	ldr	r3, [r7, #12]
    8c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c5a:	425b      	negs	r3, r3
    8c5c:	18d2      	adds	r2, r2, r3
    8c5e:	68fb      	ldr	r3, [r7, #12]
    8c60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    8c62:	687b      	ldr	r3, [r7, #4]
    8c64:	2b02      	cmp	r3, #2
    8c66:	d105      	bne.n	8c74 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    8c68:	693b      	ldr	r3, [r7, #16]
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d002      	beq.n	8c74 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    8c6e:	693b      	ldr	r3, [r7, #16]
    8c70:	3b01      	subs	r3, #1
    8c72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    8c74:	693b      	ldr	r3, [r7, #16]
    8c76:	1c5a      	adds	r2, r3, #1
    8c78:	68fb      	ldr	r3, [r7, #12]
    8c7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    8c7c:	697b      	ldr	r3, [r7, #20]
}
    8c7e:	0018      	movs	r0, r3
    8c80:	46bd      	mov	sp, r7
    8c82:	b006      	add	sp, #24
    8c84:	bd80      	pop	{r7, pc}
    8c86:	46c0      	nop			; (mov r8, r8)
    8c88:	00009be1 	.word	0x00009be1
    8c8c:	0000c011 	.word	0x0000c011

00008c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    8c90:	b580      	push	{r7, lr}
    8c92:	b082      	sub	sp, #8
    8c94:	af00      	add	r7, sp, #0
    8c96:	6078      	str	r0, [r7, #4]
    8c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d018      	beq.n	8cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    8ca2:	687b      	ldr	r3, [r7, #4]
    8ca4:	68da      	ldr	r2, [r3, #12]
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8caa:	18d2      	adds	r2, r2, r3
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    8cb0:	687b      	ldr	r3, [r7, #4]
    8cb2:	68da      	ldr	r2, [r3, #12]
    8cb4:	687b      	ldr	r3, [r7, #4]
    8cb6:	685b      	ldr	r3, [r3, #4]
    8cb8:	429a      	cmp	r2, r3
    8cba:	d303      	bcc.n	8cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    8cbc:	687b      	ldr	r3, [r7, #4]
    8cbe:	681a      	ldr	r2, [r3, #0]
    8cc0:	687b      	ldr	r3, [r7, #4]
    8cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    8cc4:	687b      	ldr	r3, [r7, #4]
    8cc6:	68d9      	ldr	r1, [r3, #12]
    8cc8:	687b      	ldr	r3, [r7, #4]
    8cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8ccc:	683b      	ldr	r3, [r7, #0]
    8cce:	0018      	movs	r0, r3
    8cd0:	4b02      	ldr	r3, [pc, #8]	; (8cdc <prvCopyDataFromQueue+0x4c>)
    8cd2:	4798      	blx	r3
	}
}
    8cd4:	46c0      	nop			; (mov r8, r8)
    8cd6:	46bd      	mov	sp, r7
    8cd8:	b002      	add	sp, #8
    8cda:	bd80      	pop	{r7, pc}
    8cdc:	0000c011 	.word	0x0000c011

00008ce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    8ce0:	b580      	push	{r7, lr}
    8ce2:	b084      	sub	sp, #16
    8ce4:	af00      	add	r7, sp, #0
    8ce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    8ce8:	4b34      	ldr	r3, [pc, #208]	; (8dbc <prvUnlockQueue+0xdc>)
    8cea:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    8cec:	230f      	movs	r3, #15
    8cee:	18fb      	adds	r3, r7, r3
    8cf0:	687a      	ldr	r2, [r7, #4]
    8cf2:	2145      	movs	r1, #69	; 0x45
    8cf4:	5c52      	ldrb	r2, [r2, r1]
    8cf6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8cf8:	e022      	b.n	8d40 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    8cfa:	687b      	ldr	r3, [r7, #4]
    8cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8cfe:	2b00      	cmp	r3, #0
    8d00:	d009      	beq.n	8d16 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    8d02:	687b      	ldr	r3, [r7, #4]
    8d04:	2100      	movs	r1, #0
    8d06:	0018      	movs	r0, r3
    8d08:	4b2d      	ldr	r3, [pc, #180]	; (8dc0 <prvUnlockQueue+0xe0>)
    8d0a:	4798      	blx	r3
    8d0c:	1e03      	subs	r3, r0, #0
    8d0e:	d00f      	beq.n	8d30 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    8d10:	4b2c      	ldr	r3, [pc, #176]	; (8dc4 <prvUnlockQueue+0xe4>)
    8d12:	4798      	blx	r3
    8d14:	e00c      	b.n	8d30 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    8d16:	687b      	ldr	r3, [r7, #4]
    8d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d017      	beq.n	8d4e <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	3324      	adds	r3, #36	; 0x24
    8d22:	0018      	movs	r0, r3
    8d24:	4b28      	ldr	r3, [pc, #160]	; (8dc8 <prvUnlockQueue+0xe8>)
    8d26:	4798      	blx	r3
    8d28:	1e03      	subs	r3, r0, #0
    8d2a:	d001      	beq.n	8d30 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    8d2c:	4b25      	ldr	r3, [pc, #148]	; (8dc4 <prvUnlockQueue+0xe4>)
    8d2e:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    8d30:	230f      	movs	r3, #15
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	781b      	ldrb	r3, [r3, #0]
    8d36:	3b01      	subs	r3, #1
    8d38:	b2da      	uxtb	r2, r3
    8d3a:	230f      	movs	r3, #15
    8d3c:	18fb      	adds	r3, r7, r3
    8d3e:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    8d40:	230f      	movs	r3, #15
    8d42:	18fb      	adds	r3, r7, r3
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	b25b      	sxtb	r3, r3
    8d48:	2b00      	cmp	r3, #0
    8d4a:	dcd6      	bgt.n	8cfa <prvUnlockQueue+0x1a>
    8d4c:	e000      	b.n	8d50 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    8d4e:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	2245      	movs	r2, #69	; 0x45
    8d54:	21ff      	movs	r1, #255	; 0xff
    8d56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8d58:	4b1c      	ldr	r3, [pc, #112]	; (8dcc <prvUnlockQueue+0xec>)
    8d5a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    8d5c:	4b17      	ldr	r3, [pc, #92]	; (8dbc <prvUnlockQueue+0xdc>)
    8d5e:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    8d60:	230e      	movs	r3, #14
    8d62:	18fb      	adds	r3, r7, r3
    8d64:	687a      	ldr	r2, [r7, #4]
    8d66:	2144      	movs	r1, #68	; 0x44
    8d68:	5c52      	ldrb	r2, [r2, r1]
    8d6a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    8d6c:	e014      	b.n	8d98 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	691b      	ldr	r3, [r3, #16]
    8d72:	2b00      	cmp	r3, #0
    8d74:	d017      	beq.n	8da6 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	3310      	adds	r3, #16
    8d7a:	0018      	movs	r0, r3
    8d7c:	4b12      	ldr	r3, [pc, #72]	; (8dc8 <prvUnlockQueue+0xe8>)
    8d7e:	4798      	blx	r3
    8d80:	1e03      	subs	r3, r0, #0
    8d82:	d001      	beq.n	8d88 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    8d84:	4b0f      	ldr	r3, [pc, #60]	; (8dc4 <prvUnlockQueue+0xe4>)
    8d86:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    8d88:	230e      	movs	r3, #14
    8d8a:	18fb      	adds	r3, r7, r3
    8d8c:	781b      	ldrb	r3, [r3, #0]
    8d8e:	3b01      	subs	r3, #1
    8d90:	b2da      	uxtb	r2, r3
    8d92:	230e      	movs	r3, #14
    8d94:	18fb      	adds	r3, r7, r3
    8d96:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    8d98:	230e      	movs	r3, #14
    8d9a:	18fb      	adds	r3, r7, r3
    8d9c:	781b      	ldrb	r3, [r3, #0]
    8d9e:	b25b      	sxtb	r3, r3
    8da0:	2b00      	cmp	r3, #0
    8da2:	dce4      	bgt.n	8d6e <prvUnlockQueue+0x8e>
    8da4:	e000      	b.n	8da8 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    8da6:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    8da8:	687b      	ldr	r3, [r7, #4]
    8daa:	2244      	movs	r2, #68	; 0x44
    8dac:	21ff      	movs	r1, #255	; 0xff
    8dae:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    8db0:	4b06      	ldr	r3, [pc, #24]	; (8dcc <prvUnlockQueue+0xec>)
    8db2:	4798      	blx	r3
}
    8db4:	46c0      	nop			; (mov r8, r8)
    8db6:	46bd      	mov	sp, r7
    8db8:	b004      	add	sp, #16
    8dba:	bd80      	pop	{r7, pc}
    8dbc:	000081f9 	.word	0x000081f9
    8dc0:	00008f05 	.word	0x00008f05
    8dc4:	0000992d 	.word	0x0000992d
    8dc8:	00009791 	.word	0x00009791
    8dcc:	0000821d 	.word	0x0000821d

00008dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    8dd0:	b580      	push	{r7, lr}
    8dd2:	b084      	sub	sp, #16
    8dd4:	af00      	add	r7, sp, #0
    8dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8dd8:	4b08      	ldr	r3, [pc, #32]	; (8dfc <prvIsQueueEmpty+0x2c>)
    8dda:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    8ddc:	687b      	ldr	r3, [r7, #4]
    8dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8de0:	2b00      	cmp	r3, #0
    8de2:	d102      	bne.n	8dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    8de4:	2301      	movs	r3, #1
    8de6:	60fb      	str	r3, [r7, #12]
    8de8:	e001      	b.n	8dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    8dea:	2300      	movs	r3, #0
    8dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8dee:	4b04      	ldr	r3, [pc, #16]	; (8e00 <prvIsQueueEmpty+0x30>)
    8df0:	4798      	blx	r3

	return xReturn;
    8df2:	68fb      	ldr	r3, [r7, #12]
}
    8df4:	0018      	movs	r0, r3
    8df6:	46bd      	mov	sp, r7
    8df8:	b004      	add	sp, #16
    8dfa:	bd80      	pop	{r7, pc}
    8dfc:	000081f9 	.word	0x000081f9
    8e00:	0000821d 	.word	0x0000821d

00008e04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    8e04:	b580      	push	{r7, lr}
    8e06:	b084      	sub	sp, #16
    8e08:	af00      	add	r7, sp, #0
    8e0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    8e0c:	4b09      	ldr	r3, [pc, #36]	; (8e34 <prvIsQueueFull+0x30>)
    8e0e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    8e10:	687b      	ldr	r3, [r7, #4]
    8e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8e14:	687b      	ldr	r3, [r7, #4]
    8e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8e18:	429a      	cmp	r2, r3
    8e1a:	d102      	bne.n	8e22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    8e1c:	2301      	movs	r3, #1
    8e1e:	60fb      	str	r3, [r7, #12]
    8e20:	e001      	b.n	8e26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    8e22:	2300      	movs	r3, #0
    8e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    8e26:	4b04      	ldr	r3, [pc, #16]	; (8e38 <prvIsQueueFull+0x34>)
    8e28:	4798      	blx	r3

	return xReturn;
    8e2a:	68fb      	ldr	r3, [r7, #12]
}
    8e2c:	0018      	movs	r0, r3
    8e2e:	46bd      	mov	sp, r7
    8e30:	b004      	add	sp, #16
    8e32:	bd80      	pop	{r7, pc}
    8e34:	000081f9 	.word	0x000081f9
    8e38:	0000821d 	.word	0x0000821d

00008e3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b084      	sub	sp, #16
    8e40:	af00      	add	r7, sp, #0
    8e42:	6078      	str	r0, [r7, #4]
    8e44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    8e46:	2300      	movs	r3, #0
    8e48:	60fb      	str	r3, [r7, #12]
    8e4a:	e015      	b.n	8e78 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    8e4c:	4b0e      	ldr	r3, [pc, #56]	; (8e88 <vQueueAddToRegistry+0x4c>)
    8e4e:	68fa      	ldr	r2, [r7, #12]
    8e50:	00d2      	lsls	r2, r2, #3
    8e52:	58d3      	ldr	r3, [r2, r3]
    8e54:	2b00      	cmp	r3, #0
    8e56:	d10c      	bne.n	8e72 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    8e58:	4b0b      	ldr	r3, [pc, #44]	; (8e88 <vQueueAddToRegistry+0x4c>)
    8e5a:	68fa      	ldr	r2, [r7, #12]
    8e5c:	00d2      	lsls	r2, r2, #3
    8e5e:	6839      	ldr	r1, [r7, #0]
    8e60:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    8e62:	4a09      	ldr	r2, [pc, #36]	; (8e88 <vQueueAddToRegistry+0x4c>)
    8e64:	68fb      	ldr	r3, [r7, #12]
    8e66:	00db      	lsls	r3, r3, #3
    8e68:	18d3      	adds	r3, r2, r3
    8e6a:	3304      	adds	r3, #4
    8e6c:	687a      	ldr	r2, [r7, #4]
    8e6e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    8e70:	e005      	b.n	8e7e <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    8e72:	68fb      	ldr	r3, [r7, #12]
    8e74:	3301      	adds	r3, #1
    8e76:	60fb      	str	r3, [r7, #12]
    8e78:	68fb      	ldr	r3, [r7, #12]
    8e7a:	2b04      	cmp	r3, #4
    8e7c:	d9e6      	bls.n	8e4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    8e7e:	46c0      	nop			; (mov r8, r8)
    8e80:	46bd      	mov	sp, r7
    8e82:	b004      	add	sp, #16
    8e84:	bd80      	pop	{r7, pc}
    8e86:	46c0      	nop			; (mov r8, r8)
    8e88:	20004668 	.word	0x20004668

00008e8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8e8c:	b580      	push	{r7, lr}
    8e8e:	b086      	sub	sp, #24
    8e90:	af00      	add	r7, sp, #0
    8e92:	60f8      	str	r0, [r7, #12]
    8e94:	60b9      	str	r1, [r7, #8]
    8e96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    8e98:	68fb      	ldr	r3, [r7, #12]
    8e9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    8e9c:	4b15      	ldr	r3, [pc, #84]	; (8ef4 <vQueueWaitForMessageRestricted+0x68>)
    8e9e:	4798      	blx	r3
    8ea0:	697b      	ldr	r3, [r7, #20]
    8ea2:	2244      	movs	r2, #68	; 0x44
    8ea4:	5c9b      	ldrb	r3, [r3, r2]
    8ea6:	b25b      	sxtb	r3, r3
    8ea8:	3301      	adds	r3, #1
    8eaa:	d103      	bne.n	8eb4 <vQueueWaitForMessageRestricted+0x28>
    8eac:	697b      	ldr	r3, [r7, #20]
    8eae:	2244      	movs	r2, #68	; 0x44
    8eb0:	2100      	movs	r1, #0
    8eb2:	5499      	strb	r1, [r3, r2]
    8eb4:	697b      	ldr	r3, [r7, #20]
    8eb6:	2245      	movs	r2, #69	; 0x45
    8eb8:	5c9b      	ldrb	r3, [r3, r2]
    8eba:	b25b      	sxtb	r3, r3
    8ebc:	3301      	adds	r3, #1
    8ebe:	d103      	bne.n	8ec8 <vQueueWaitForMessageRestricted+0x3c>
    8ec0:	697b      	ldr	r3, [r7, #20]
    8ec2:	2245      	movs	r2, #69	; 0x45
    8ec4:	2100      	movs	r1, #0
    8ec6:	5499      	strb	r1, [r3, r2]
    8ec8:	4b0b      	ldr	r3, [pc, #44]	; (8ef8 <vQueueWaitForMessageRestricted+0x6c>)
    8eca:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    8ecc:	697b      	ldr	r3, [r7, #20]
    8ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d106      	bne.n	8ee2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    8ed4:	697b      	ldr	r3, [r7, #20]
    8ed6:	3324      	adds	r3, #36	; 0x24
    8ed8:	687a      	ldr	r2, [r7, #4]
    8eda:	68b9      	ldr	r1, [r7, #8]
    8edc:	0018      	movs	r0, r3
    8ede:	4b07      	ldr	r3, [pc, #28]	; (8efc <vQueueWaitForMessageRestricted+0x70>)
    8ee0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    8ee2:	697b      	ldr	r3, [r7, #20]
    8ee4:	0018      	movs	r0, r3
    8ee6:	4b06      	ldr	r3, [pc, #24]	; (8f00 <vQueueWaitForMessageRestricted+0x74>)
    8ee8:	4798      	blx	r3
	}
    8eea:	46c0      	nop			; (mov r8, r8)
    8eec:	46bd      	mov	sp, r7
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	000081f9 	.word	0x000081f9
    8ef8:	0000821d 	.word	0x0000821d
    8efc:	0000973d 	.word	0x0000973d
    8f00:	00008ce1 	.word	0x00008ce1

00008f04 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    8f04:	b580      	push	{r7, lr}
    8f06:	b086      	sub	sp, #24
    8f08:	af00      	add	r7, sp, #0
    8f0a:	6078      	str	r0, [r7, #4]
    8f0c:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    8f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    8f14:	2300      	movs	r3, #0
    8f16:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    8f18:	693b      	ldr	r3, [r7, #16]
    8f1a:	2b00      	cmp	r3, #0
    8f1c:	d101      	bne.n	8f22 <prvNotifyQueueSetContainer+0x1e>
    8f1e:	b672      	cpsid	i
    8f20:	e7fe      	b.n	8f20 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    8f22:	693b      	ldr	r3, [r7, #16]
    8f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8f26:	693b      	ldr	r3, [r7, #16]
    8f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8f2a:	429a      	cmp	r2, r3
    8f2c:	d301      	bcc.n	8f32 <prvNotifyQueueSetContainer+0x2e>
    8f2e:	b672      	cpsid	i
    8f30:	e7fe      	b.n	8f30 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    8f32:	693b      	ldr	r3, [r7, #16]
    8f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    8f36:	693b      	ldr	r3, [r7, #16]
    8f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8f3a:	429a      	cmp	r2, r3
    8f3c:	d22a      	bcs.n	8f94 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    8f3e:	230f      	movs	r3, #15
    8f40:	18fb      	adds	r3, r7, r3
    8f42:	693a      	ldr	r2, [r7, #16]
    8f44:	2145      	movs	r1, #69	; 0x45
    8f46:	5c52      	ldrb	r2, [r2, r1]
    8f48:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    8f4a:	683a      	ldr	r2, [r7, #0]
    8f4c:	1d39      	adds	r1, r7, #4
    8f4e:	693b      	ldr	r3, [r7, #16]
    8f50:	0018      	movs	r0, r3
    8f52:	4b13      	ldr	r3, [pc, #76]	; (8fa0 <prvNotifyQueueSetContainer+0x9c>)
    8f54:	4798      	blx	r3
    8f56:	0003      	movs	r3, r0
    8f58:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    8f5a:	230f      	movs	r3, #15
    8f5c:	18fb      	adds	r3, r7, r3
    8f5e:	781b      	ldrb	r3, [r3, #0]
    8f60:	b25b      	sxtb	r3, r3
    8f62:	3301      	adds	r3, #1
    8f64:	d10d      	bne.n	8f82 <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    8f66:	693b      	ldr	r3, [r7, #16]
    8f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d012      	beq.n	8f94 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    8f6e:	693b      	ldr	r3, [r7, #16]
    8f70:	3324      	adds	r3, #36	; 0x24
    8f72:	0018      	movs	r0, r3
    8f74:	4b0b      	ldr	r3, [pc, #44]	; (8fa4 <prvNotifyQueueSetContainer+0xa0>)
    8f76:	4798      	blx	r3
    8f78:	1e03      	subs	r3, r0, #0
    8f7a:	d00b      	beq.n	8f94 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    8f7c:	2301      	movs	r3, #1
    8f7e:	617b      	str	r3, [r7, #20]
    8f80:	e008      	b.n	8f94 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    8f82:	230f      	movs	r3, #15
    8f84:	18fb      	adds	r3, r7, r3
    8f86:	781b      	ldrb	r3, [r3, #0]
    8f88:	3301      	adds	r3, #1
    8f8a:	b2db      	uxtb	r3, r3
    8f8c:	b259      	sxtb	r1, r3
    8f8e:	693b      	ldr	r3, [r7, #16]
    8f90:	2245      	movs	r2, #69	; 0x45
    8f92:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8f94:	697b      	ldr	r3, [r7, #20]
	}
    8f96:	0018      	movs	r0, r3
    8f98:	46bd      	mov	sp, r7
    8f9a:	b006      	add	sp, #24
    8f9c:	bd80      	pop	{r7, pc}
    8f9e:	46c0      	nop			; (mov r8, r8)
    8fa0:	00008bb1 	.word	0x00008bb1
    8fa4:	00009791 	.word	0x00009791

00008fa8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    8fa8:	b590      	push	{r4, r7, lr}
    8faa:	b08d      	sub	sp, #52	; 0x34
    8fac:	af04      	add	r7, sp, #16
    8fae:	60f8      	str	r0, [r7, #12]
    8fb0:	60b9      	str	r1, [r7, #8]
    8fb2:	603b      	str	r3, [r7, #0]
    8fb4:	1dbb      	adds	r3, r7, #6
    8fb6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8fb8:	1dbb      	adds	r3, r7, #6
    8fba:	881b      	ldrh	r3, [r3, #0]
    8fbc:	009b      	lsls	r3, r3, #2
    8fbe:	0018      	movs	r0, r3
    8fc0:	4b1d      	ldr	r3, [pc, #116]	; (9038 <xTaskCreate+0x90>)
    8fc2:	4798      	blx	r3
    8fc4:	0003      	movs	r3, r0
    8fc6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    8fc8:	697b      	ldr	r3, [r7, #20]
    8fca:	2b00      	cmp	r3, #0
    8fcc:	d010      	beq.n	8ff0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    8fce:	2050      	movs	r0, #80	; 0x50
    8fd0:	4b19      	ldr	r3, [pc, #100]	; (9038 <xTaskCreate+0x90>)
    8fd2:	4798      	blx	r3
    8fd4:	0003      	movs	r3, r0
    8fd6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    8fd8:	69fb      	ldr	r3, [r7, #28]
    8fda:	2b00      	cmp	r3, #0
    8fdc:	d003      	beq.n	8fe6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    8fde:	69fb      	ldr	r3, [r7, #28]
    8fe0:	697a      	ldr	r2, [r7, #20]
    8fe2:	631a      	str	r2, [r3, #48]	; 0x30
    8fe4:	e006      	b.n	8ff4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    8fe6:	697b      	ldr	r3, [r7, #20]
    8fe8:	0018      	movs	r0, r3
    8fea:	4b14      	ldr	r3, [pc, #80]	; (903c <xTaskCreate+0x94>)
    8fec:	4798      	blx	r3
    8fee:	e001      	b.n	8ff4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    8ff0:	2300      	movs	r3, #0
    8ff2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    8ff4:	69fb      	ldr	r3, [r7, #28]
    8ff6:	2b00      	cmp	r3, #0
    8ff8:	d016      	beq.n	9028 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    8ffa:	1dbb      	adds	r3, r7, #6
    8ffc:	881a      	ldrh	r2, [r3, #0]
    8ffe:	683c      	ldr	r4, [r7, #0]
    9000:	68b9      	ldr	r1, [r7, #8]
    9002:	68f8      	ldr	r0, [r7, #12]
    9004:	2300      	movs	r3, #0
    9006:	9303      	str	r3, [sp, #12]
    9008:	69fb      	ldr	r3, [r7, #28]
    900a:	9302      	str	r3, [sp, #8]
    900c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    900e:	9301      	str	r3, [sp, #4]
    9010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9012:	9300      	str	r3, [sp, #0]
    9014:	0023      	movs	r3, r4
    9016:	4c0a      	ldr	r4, [pc, #40]	; (9040 <xTaskCreate+0x98>)
    9018:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    901a:	69fb      	ldr	r3, [r7, #28]
    901c:	0018      	movs	r0, r3
    901e:	4b09      	ldr	r3, [pc, #36]	; (9044 <xTaskCreate+0x9c>)
    9020:	4798      	blx	r3
			xReturn = pdPASS;
    9022:	2301      	movs	r3, #1
    9024:	61bb      	str	r3, [r7, #24]
    9026:	e002      	b.n	902e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    9028:	2301      	movs	r3, #1
    902a:	425b      	negs	r3, r3
    902c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    902e:	69bb      	ldr	r3, [r7, #24]
	}
    9030:	0018      	movs	r0, r3
    9032:	46bd      	mov	sp, r7
    9034:	b009      	add	sp, #36	; 0x24
    9036:	bd90      	pop	{r4, r7, pc}
    9038:	0000830d 	.word	0x0000830d
    903c:	000083a1 	.word	0x000083a1
    9040:	00009049 	.word	0x00009049
    9044:	00009145 	.word	0x00009145

00009048 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    9048:	b580      	push	{r7, lr}
    904a:	b086      	sub	sp, #24
    904c:	af00      	add	r7, sp, #0
    904e:	60f8      	str	r0, [r7, #12]
    9050:	60b9      	str	r1, [r7, #8]
    9052:	607a      	str	r2, [r7, #4]
    9054:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    9056:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    905a:	687b      	ldr	r3, [r7, #4]
    905c:	4936      	ldr	r1, [pc, #216]	; (9138 <prvInitialiseNewTask+0xf0>)
    905e:	468c      	mov	ip, r1
    9060:	4463      	add	r3, ip
    9062:	009b      	lsls	r3, r3, #2
    9064:	18d3      	adds	r3, r2, r3
    9066:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    9068:	693b      	ldr	r3, [r7, #16]
    906a:	2207      	movs	r2, #7
    906c:	4393      	bics	r3, r2
    906e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    9070:	693b      	ldr	r3, [r7, #16]
    9072:	2207      	movs	r2, #7
    9074:	4013      	ands	r3, r2
    9076:	d001      	beq.n	907c <prvInitialiseNewTask+0x34>
    9078:	b672      	cpsid	i
    907a:	e7fe      	b.n	907a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    907c:	2300      	movs	r3, #0
    907e:	617b      	str	r3, [r7, #20]
    9080:	e013      	b.n	90aa <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    9082:	68ba      	ldr	r2, [r7, #8]
    9084:	697b      	ldr	r3, [r7, #20]
    9086:	18d3      	adds	r3, r2, r3
    9088:	7818      	ldrb	r0, [r3, #0]
    908a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    908c:	2134      	movs	r1, #52	; 0x34
    908e:	697b      	ldr	r3, [r7, #20]
    9090:	18d3      	adds	r3, r2, r3
    9092:	185b      	adds	r3, r3, r1
    9094:	1c02      	adds	r2, r0, #0
    9096:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    9098:	68ba      	ldr	r2, [r7, #8]
    909a:	697b      	ldr	r3, [r7, #20]
    909c:	18d3      	adds	r3, r2, r3
    909e:	781b      	ldrb	r3, [r3, #0]
    90a0:	2b00      	cmp	r3, #0
    90a2:	d006      	beq.n	90b2 <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    90a4:	697b      	ldr	r3, [r7, #20]
    90a6:	3301      	adds	r3, #1
    90a8:	617b      	str	r3, [r7, #20]
    90aa:	697b      	ldr	r3, [r7, #20]
    90ac:	2b0b      	cmp	r3, #11
    90ae:	d9e8      	bls.n	9082 <prvInitialiseNewTask+0x3a>
    90b0:	e000      	b.n	90b4 <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    90b2:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    90b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90b6:	223f      	movs	r2, #63	; 0x3f
    90b8:	2100      	movs	r1, #0
    90ba:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    90bc:	6a3b      	ldr	r3, [r7, #32]
    90be:	2b04      	cmp	r3, #4
    90c0:	d901      	bls.n	90c6 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    90c2:	2304      	movs	r3, #4
    90c4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    90c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90c8:	6a3a      	ldr	r2, [r7, #32]
    90ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    90cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90ce:	6a3a      	ldr	r2, [r7, #32]
    90d0:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    90d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90d4:	2200      	movs	r2, #0
    90d6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    90d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90da:	3304      	adds	r3, #4
    90dc:	0018      	movs	r0, r3
    90de:	4b17      	ldr	r3, [pc, #92]	; (913c <prvInitialiseNewTask+0xf4>)
    90e0:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    90e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90e4:	3318      	adds	r3, #24
    90e6:	0018      	movs	r0, r3
    90e8:	4b14      	ldr	r3, [pc, #80]	; (913c <prvInitialiseNewTask+0xf4>)
    90ea:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    90ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    90f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    90f2:	6a3b      	ldr	r3, [r7, #32]
    90f4:	2205      	movs	r2, #5
    90f6:	1ad2      	subs	r2, r2, r3
    90f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    90fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9100:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    9102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9104:	2200      	movs	r2, #0
    9106:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    9108:	6abb      	ldr	r3, [r7, #40]	; 0x28
    910a:	224c      	movs	r2, #76	; 0x4c
    910c:	2100      	movs	r1, #0
    910e:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    9110:	683a      	ldr	r2, [r7, #0]
    9112:	68f9      	ldr	r1, [r7, #12]
    9114:	693b      	ldr	r3, [r7, #16]
    9116:	0018      	movs	r0, r3
    9118:	4b09      	ldr	r3, [pc, #36]	; (9140 <prvInitialiseNewTask+0xf8>)
    911a:	4798      	blx	r3
    911c:	0002      	movs	r2, r0
    911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9120:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    9122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9124:	2b00      	cmp	r3, #0
    9126:	d002      	beq.n	912e <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    9128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    912a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    912c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	46bd      	mov	sp, r7
    9132:	b006      	add	sp, #24
    9134:	bd80      	pop	{r7, pc}
    9136:	46c0      	nop			; (mov r8, r8)
    9138:	3fffffff 	.word	0x3fffffff
    913c:	00007fb5 	.word	0x00007fb5
    9140:	000080cd 	.word	0x000080cd

00009144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    9144:	b580      	push	{r7, lr}
    9146:	b082      	sub	sp, #8
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    914c:	4b29      	ldr	r3, [pc, #164]	; (91f4 <prvAddNewTaskToReadyList+0xb0>)
    914e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    9150:	4b29      	ldr	r3, [pc, #164]	; (91f8 <prvAddNewTaskToReadyList+0xb4>)
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	1c5a      	adds	r2, r3, #1
    9156:	4b28      	ldr	r3, [pc, #160]	; (91f8 <prvAddNewTaskToReadyList+0xb4>)
    9158:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    915a:	4b28      	ldr	r3, [pc, #160]	; (91fc <prvAddNewTaskToReadyList+0xb8>)
    915c:	681b      	ldr	r3, [r3, #0]
    915e:	2b00      	cmp	r3, #0
    9160:	d109      	bne.n	9176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    9162:	4b26      	ldr	r3, [pc, #152]	; (91fc <prvAddNewTaskToReadyList+0xb8>)
    9164:	687a      	ldr	r2, [r7, #4]
    9166:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    9168:	4b23      	ldr	r3, [pc, #140]	; (91f8 <prvAddNewTaskToReadyList+0xb4>)
    916a:	681b      	ldr	r3, [r3, #0]
    916c:	2b01      	cmp	r3, #1
    916e:	d110      	bne.n	9192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    9170:	4b23      	ldr	r3, [pc, #140]	; (9200 <prvAddNewTaskToReadyList+0xbc>)
    9172:	4798      	blx	r3
    9174:	e00d      	b.n	9192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    9176:	4b23      	ldr	r3, [pc, #140]	; (9204 <prvAddNewTaskToReadyList+0xc0>)
    9178:	681b      	ldr	r3, [r3, #0]
    917a:	2b00      	cmp	r3, #0
    917c:	d109      	bne.n	9192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    917e:	4b1f      	ldr	r3, [pc, #124]	; (91fc <prvAddNewTaskToReadyList+0xb8>)
    9180:	681b      	ldr	r3, [r3, #0]
    9182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9188:	429a      	cmp	r2, r3
    918a:	d802      	bhi.n	9192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    918c:	4b1b      	ldr	r3, [pc, #108]	; (91fc <prvAddNewTaskToReadyList+0xb8>)
    918e:	687a      	ldr	r2, [r7, #4]
    9190:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    9192:	4b1d      	ldr	r3, [pc, #116]	; (9208 <prvAddNewTaskToReadyList+0xc4>)
    9194:	681b      	ldr	r3, [r3, #0]
    9196:	1c5a      	adds	r2, r3, #1
    9198:	4b1b      	ldr	r3, [pc, #108]	; (9208 <prvAddNewTaskToReadyList+0xc4>)
    919a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    919c:	687b      	ldr	r3, [r7, #4]
    919e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    91a0:	4b1a      	ldr	r3, [pc, #104]	; (920c <prvAddNewTaskToReadyList+0xc8>)
    91a2:	681b      	ldr	r3, [r3, #0]
    91a4:	429a      	cmp	r2, r3
    91a6:	d903      	bls.n	91b0 <prvAddNewTaskToReadyList+0x6c>
    91a8:	687b      	ldr	r3, [r7, #4]
    91aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    91ac:	4b17      	ldr	r3, [pc, #92]	; (920c <prvAddNewTaskToReadyList+0xc8>)
    91ae:	601a      	str	r2, [r3, #0]
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    91b4:	0013      	movs	r3, r2
    91b6:	009b      	lsls	r3, r3, #2
    91b8:	189b      	adds	r3, r3, r2
    91ba:	009b      	lsls	r3, r3, #2
    91bc:	4a14      	ldr	r2, [pc, #80]	; (9210 <prvAddNewTaskToReadyList+0xcc>)
    91be:	189a      	adds	r2, r3, r2
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	3304      	adds	r3, #4
    91c4:	0019      	movs	r1, r3
    91c6:	0010      	movs	r0, r2
    91c8:	4b12      	ldr	r3, [pc, #72]	; (9214 <prvAddNewTaskToReadyList+0xd0>)
    91ca:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    91cc:	4b12      	ldr	r3, [pc, #72]	; (9218 <prvAddNewTaskToReadyList+0xd4>)
    91ce:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    91d0:	4b0c      	ldr	r3, [pc, #48]	; (9204 <prvAddNewTaskToReadyList+0xc0>)
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	2b00      	cmp	r3, #0
    91d6:	d008      	beq.n	91ea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    91d8:	4b08      	ldr	r3, [pc, #32]	; (91fc <prvAddNewTaskToReadyList+0xb8>)
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    91e2:	429a      	cmp	r2, r3
    91e4:	d201      	bcs.n	91ea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    91e6:	4b0d      	ldr	r3, [pc, #52]	; (921c <prvAddNewTaskToReadyList+0xd8>)
    91e8:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    91ea:	46c0      	nop			; (mov r8, r8)
    91ec:	46bd      	mov	sp, r7
    91ee:	b002      	add	sp, #8
    91f0:	bd80      	pop	{r7, pc}
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	000081f9 	.word	0x000081f9
    91f8:	20003ca4 	.word	0x20003ca4
    91fc:	20003bcc 	.word	0x20003bcc
    9200:	0000995d 	.word	0x0000995d
    9204:	20003cb0 	.word	0x20003cb0
    9208:	20003cc0 	.word	0x20003cc0
    920c:	20003cac 	.word	0x20003cac
    9210:	20003bd0 	.word	0x20003bd0
    9214:	00007fcd 	.word	0x00007fcd
    9218:	0000821d 	.word	0x0000821d
    921c:	000081d9 	.word	0x000081d9

00009220 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    9220:	b580      	push	{r7, lr}
    9222:	b086      	sub	sp, #24
    9224:	af00      	add	r7, sp, #0
    9226:	6078      	str	r0, [r7, #4]
    9228:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    922a:	2300      	movs	r3, #0
    922c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	2b00      	cmp	r3, #0
    9232:	d101      	bne.n	9238 <vTaskDelayUntil+0x18>
    9234:	b672      	cpsid	i
    9236:	e7fe      	b.n	9236 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    9238:	683b      	ldr	r3, [r7, #0]
    923a:	2b00      	cmp	r3, #0
    923c:	d101      	bne.n	9242 <vTaskDelayUntil+0x22>
    923e:	b672      	cpsid	i
    9240:	e7fe      	b.n	9240 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    9242:	4b23      	ldr	r3, [pc, #140]	; (92d0 <vTaskDelayUntil+0xb0>)
    9244:	681b      	ldr	r3, [r3, #0]
    9246:	2b00      	cmp	r3, #0
    9248:	d001      	beq.n	924e <vTaskDelayUntil+0x2e>
    924a:	b672      	cpsid	i
    924c:	e7fe      	b.n	924c <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    924e:	4b21      	ldr	r3, [pc, #132]	; (92d4 <vTaskDelayUntil+0xb4>)
    9250:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    9252:	4b21      	ldr	r3, [pc, #132]	; (92d8 <vTaskDelayUntil+0xb8>)
    9254:	681b      	ldr	r3, [r3, #0]
    9256:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    9258:	687b      	ldr	r3, [r7, #4]
    925a:	681a      	ldr	r2, [r3, #0]
    925c:	683b      	ldr	r3, [r7, #0]
    925e:	18d3      	adds	r3, r2, r3
    9260:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    9262:	687b      	ldr	r3, [r7, #4]
    9264:	681a      	ldr	r2, [r3, #0]
    9266:	693b      	ldr	r3, [r7, #16]
    9268:	429a      	cmp	r2, r3
    926a:	d90b      	bls.n	9284 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	681a      	ldr	r2, [r3, #0]
    9270:	68fb      	ldr	r3, [r7, #12]
    9272:	429a      	cmp	r2, r3
    9274:	d911      	bls.n	929a <vTaskDelayUntil+0x7a>
    9276:	68fa      	ldr	r2, [r7, #12]
    9278:	693b      	ldr	r3, [r7, #16]
    927a:	429a      	cmp	r2, r3
    927c:	d90d      	bls.n	929a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    927e:	2301      	movs	r3, #1
    9280:	617b      	str	r3, [r7, #20]
    9282:	e00a      	b.n	929a <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    9284:	687b      	ldr	r3, [r7, #4]
    9286:	681a      	ldr	r2, [r3, #0]
    9288:	68fb      	ldr	r3, [r7, #12]
    928a:	429a      	cmp	r2, r3
    928c:	d803      	bhi.n	9296 <vTaskDelayUntil+0x76>
    928e:	68fa      	ldr	r2, [r7, #12]
    9290:	693b      	ldr	r3, [r7, #16]
    9292:	429a      	cmp	r2, r3
    9294:	d901      	bls.n	929a <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    9296:	2301      	movs	r3, #1
    9298:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    929a:	687b      	ldr	r3, [r7, #4]
    929c:	68fa      	ldr	r2, [r7, #12]
    929e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    92a0:	697b      	ldr	r3, [r7, #20]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d006      	beq.n	92b4 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    92a6:	68fa      	ldr	r2, [r7, #12]
    92a8:	693b      	ldr	r3, [r7, #16]
    92aa:	1ad3      	subs	r3, r2, r3
    92ac:	2100      	movs	r1, #0
    92ae:	0018      	movs	r0, r3
    92b0:	4b0a      	ldr	r3, [pc, #40]	; (92dc <vTaskDelayUntil+0xbc>)
    92b2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    92b4:	4b0a      	ldr	r3, [pc, #40]	; (92e0 <vTaskDelayUntil+0xc0>)
    92b6:	4798      	blx	r3
    92b8:	0003      	movs	r3, r0
    92ba:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    92bc:	68bb      	ldr	r3, [r7, #8]
    92be:	2b00      	cmp	r3, #0
    92c0:	d101      	bne.n	92c6 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    92c2:	4b08      	ldr	r3, [pc, #32]	; (92e4 <vTaskDelayUntil+0xc4>)
    92c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    92c6:	46c0      	nop			; (mov r8, r8)
    92c8:	46bd      	mov	sp, r7
    92ca:	b006      	add	sp, #24
    92cc:	bd80      	pop	{r7, pc}
    92ce:	46c0      	nop			; (mov r8, r8)
    92d0:	20003ccc 	.word	0x20003ccc
    92d4:	00009371 	.word	0x00009371
    92d8:	20003ca8 	.word	0x20003ca8
    92dc:	00009cc5 	.word	0x00009cc5
    92e0:	00009389 	.word	0x00009389
    92e4:	000081d9 	.word	0x000081d9

000092e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    92e8:	b590      	push	{r4, r7, lr}
    92ea:	b085      	sub	sp, #20
    92ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    92ee:	2380      	movs	r3, #128	; 0x80
    92f0:	005a      	lsls	r2, r3, #1
    92f2:	4916      	ldr	r1, [pc, #88]	; (934c <vTaskStartScheduler+0x64>)
    92f4:	4816      	ldr	r0, [pc, #88]	; (9350 <vTaskStartScheduler+0x68>)
    92f6:	4b17      	ldr	r3, [pc, #92]	; (9354 <vTaskStartScheduler+0x6c>)
    92f8:	9301      	str	r3, [sp, #4]
    92fa:	2300      	movs	r3, #0
    92fc:	9300      	str	r3, [sp, #0]
    92fe:	2300      	movs	r3, #0
    9300:	4c15      	ldr	r4, [pc, #84]	; (9358 <vTaskStartScheduler+0x70>)
    9302:	47a0      	blx	r4
    9304:	0003      	movs	r3, r0
    9306:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	2b01      	cmp	r3, #1
    930c:	d103      	bne.n	9316 <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    930e:	4b13      	ldr	r3, [pc, #76]	; (935c <vTaskStartScheduler+0x74>)
    9310:	4798      	blx	r3
    9312:	0003      	movs	r3, r0
    9314:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    9316:	687b      	ldr	r3, [r7, #4]
    9318:	2b01      	cmp	r3, #1
    931a:	d10d      	bne.n	9338 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    931c:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    931e:	4b10      	ldr	r3, [pc, #64]	; (9360 <vTaskStartScheduler+0x78>)
    9320:	2201      	movs	r2, #1
    9322:	4252      	negs	r2, r2
    9324:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    9326:	4b0f      	ldr	r3, [pc, #60]	; (9364 <vTaskStartScheduler+0x7c>)
    9328:	2201      	movs	r2, #1
    932a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    932c:	4b0e      	ldr	r3, [pc, #56]	; (9368 <vTaskStartScheduler+0x80>)
    932e:	2200      	movs	r2, #0
    9330:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    9332:	4b0e      	ldr	r3, [pc, #56]	; (936c <vTaskStartScheduler+0x84>)
    9334:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    9336:	e004      	b.n	9342 <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	3301      	adds	r3, #1
    933c:	d101      	bne.n	9342 <vTaskStartScheduler+0x5a>
    933e:	b672      	cpsid	i
    9340:	e7fe      	b.n	9340 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    9342:	46c0      	nop			; (mov r8, r8)
    9344:	46bd      	mov	sp, r7
    9346:	b003      	add	sp, #12
    9348:	bd90      	pop	{r4, r7, pc}
    934a:	46c0      	nop			; (mov r8, r8)
    934c:	0000e520 	.word	0x0000e520
    9350:	00009941 	.word	0x00009941
    9354:	20003cc8 	.word	0x20003cc8
    9358:	00008fa9 	.word	0x00008fa9
    935c:	00009d79 	.word	0x00009d79
    9360:	20003cc4 	.word	0x20003cc4
    9364:	20003cb0 	.word	0x20003cb0
    9368:	20003ca8 	.word	0x20003ca8
    936c:	00008189 	.word	0x00008189

00009370 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    9370:	b580      	push	{r7, lr}
    9372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    9374:	4b03      	ldr	r3, [pc, #12]	; (9384 <vTaskSuspendAll+0x14>)
    9376:	681b      	ldr	r3, [r3, #0]
    9378:	1c5a      	adds	r2, r3, #1
    937a:	4b02      	ldr	r3, [pc, #8]	; (9384 <vTaskSuspendAll+0x14>)
    937c:	601a      	str	r2, [r3, #0]
}
    937e:	46c0      	nop			; (mov r8, r8)
    9380:	46bd      	mov	sp, r7
    9382:	bd80      	pop	{r7, pc}
    9384:	20003ccc 	.word	0x20003ccc

00009388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    9388:	b580      	push	{r7, lr}
    938a:	b084      	sub	sp, #16
    938c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    938e:	2300      	movs	r3, #0
    9390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    9392:	2300      	movs	r3, #0
    9394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    9396:	4b3a      	ldr	r3, [pc, #232]	; (9480 <xTaskResumeAll+0xf8>)
    9398:	681b      	ldr	r3, [r3, #0]
    939a:	2b00      	cmp	r3, #0
    939c:	d101      	bne.n	93a2 <xTaskResumeAll+0x1a>
    939e:	b672      	cpsid	i
    93a0:	e7fe      	b.n	93a0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    93a2:	4b38      	ldr	r3, [pc, #224]	; (9484 <xTaskResumeAll+0xfc>)
    93a4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    93a6:	4b36      	ldr	r3, [pc, #216]	; (9480 <xTaskResumeAll+0xf8>)
    93a8:	681b      	ldr	r3, [r3, #0]
    93aa:	1e5a      	subs	r2, r3, #1
    93ac:	4b34      	ldr	r3, [pc, #208]	; (9480 <xTaskResumeAll+0xf8>)
    93ae:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    93b0:	4b33      	ldr	r3, [pc, #204]	; (9480 <xTaskResumeAll+0xf8>)
    93b2:	681b      	ldr	r3, [r3, #0]
    93b4:	2b00      	cmp	r3, #0
    93b6:	d15b      	bne.n	9470 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    93b8:	4b33      	ldr	r3, [pc, #204]	; (9488 <xTaskResumeAll+0x100>)
    93ba:	681b      	ldr	r3, [r3, #0]
    93bc:	2b00      	cmp	r3, #0
    93be:	d057      	beq.n	9470 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    93c0:	e02f      	b.n	9422 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    93c2:	4b32      	ldr	r3, [pc, #200]	; (948c <xTaskResumeAll+0x104>)
    93c4:	68db      	ldr	r3, [r3, #12]
    93c6:	68db      	ldr	r3, [r3, #12]
    93c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    93ca:	68fb      	ldr	r3, [r7, #12]
    93cc:	3318      	adds	r3, #24
    93ce:	0018      	movs	r0, r3
    93d0:	4b2f      	ldr	r3, [pc, #188]	; (9490 <xTaskResumeAll+0x108>)
    93d2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    93d4:	68fb      	ldr	r3, [r7, #12]
    93d6:	3304      	adds	r3, #4
    93d8:	0018      	movs	r0, r3
    93da:	4b2d      	ldr	r3, [pc, #180]	; (9490 <xTaskResumeAll+0x108>)
    93dc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    93de:	68fb      	ldr	r3, [r7, #12]
    93e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93e2:	4b2c      	ldr	r3, [pc, #176]	; (9494 <xTaskResumeAll+0x10c>)
    93e4:	681b      	ldr	r3, [r3, #0]
    93e6:	429a      	cmp	r2, r3
    93e8:	d903      	bls.n	93f2 <xTaskResumeAll+0x6a>
    93ea:	68fb      	ldr	r3, [r7, #12]
    93ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93ee:	4b29      	ldr	r3, [pc, #164]	; (9494 <xTaskResumeAll+0x10c>)
    93f0:	601a      	str	r2, [r3, #0]
    93f2:	68fb      	ldr	r3, [r7, #12]
    93f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    93f6:	0013      	movs	r3, r2
    93f8:	009b      	lsls	r3, r3, #2
    93fa:	189b      	adds	r3, r3, r2
    93fc:	009b      	lsls	r3, r3, #2
    93fe:	4a26      	ldr	r2, [pc, #152]	; (9498 <xTaskResumeAll+0x110>)
    9400:	189a      	adds	r2, r3, r2
    9402:	68fb      	ldr	r3, [r7, #12]
    9404:	3304      	adds	r3, #4
    9406:	0019      	movs	r1, r3
    9408:	0010      	movs	r0, r2
    940a:	4b24      	ldr	r3, [pc, #144]	; (949c <xTaskResumeAll+0x114>)
    940c:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    940e:	68fb      	ldr	r3, [r7, #12]
    9410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9412:	4b23      	ldr	r3, [pc, #140]	; (94a0 <xTaskResumeAll+0x118>)
    9414:	681b      	ldr	r3, [r3, #0]
    9416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9418:	429a      	cmp	r2, r3
    941a:	d302      	bcc.n	9422 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    941c:	4b21      	ldr	r3, [pc, #132]	; (94a4 <xTaskResumeAll+0x11c>)
    941e:	2201      	movs	r2, #1
    9420:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    9422:	4b1a      	ldr	r3, [pc, #104]	; (948c <xTaskResumeAll+0x104>)
    9424:	681b      	ldr	r3, [r3, #0]
    9426:	2b00      	cmp	r3, #0
    9428:	d1cb      	bne.n	93c2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    942a:	68fb      	ldr	r3, [r7, #12]
    942c:	2b00      	cmp	r3, #0
    942e:	d001      	beq.n	9434 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    9430:	4b1d      	ldr	r3, [pc, #116]	; (94a8 <xTaskResumeAll+0x120>)
    9432:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    9434:	4b1d      	ldr	r3, [pc, #116]	; (94ac <xTaskResumeAll+0x124>)
    9436:	681b      	ldr	r3, [r3, #0]
    9438:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    943a:	687b      	ldr	r3, [r7, #4]
    943c:	2b00      	cmp	r3, #0
    943e:	d00f      	beq.n	9460 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    9440:	4b1b      	ldr	r3, [pc, #108]	; (94b0 <xTaskResumeAll+0x128>)
    9442:	4798      	blx	r3
    9444:	1e03      	subs	r3, r0, #0
    9446:	d002      	beq.n	944e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    9448:	4b16      	ldr	r3, [pc, #88]	; (94a4 <xTaskResumeAll+0x11c>)
    944a:	2201      	movs	r2, #1
    944c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    944e:	687b      	ldr	r3, [r7, #4]
    9450:	3b01      	subs	r3, #1
    9452:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    9454:	687b      	ldr	r3, [r7, #4]
    9456:	2b00      	cmp	r3, #0
    9458:	d1f2      	bne.n	9440 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    945a:	4b14      	ldr	r3, [pc, #80]	; (94ac <xTaskResumeAll+0x124>)
    945c:	2200      	movs	r2, #0
    945e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    9460:	4b10      	ldr	r3, [pc, #64]	; (94a4 <xTaskResumeAll+0x11c>)
    9462:	681b      	ldr	r3, [r3, #0]
    9464:	2b00      	cmp	r3, #0
    9466:	d003      	beq.n	9470 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    9468:	2301      	movs	r3, #1
    946a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    946c:	4b11      	ldr	r3, [pc, #68]	; (94b4 <xTaskResumeAll+0x12c>)
    946e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    9470:	4b11      	ldr	r3, [pc, #68]	; (94b8 <xTaskResumeAll+0x130>)
    9472:	4798      	blx	r3

	return xAlreadyYielded;
    9474:	68bb      	ldr	r3, [r7, #8]
}
    9476:	0018      	movs	r0, r3
    9478:	46bd      	mov	sp, r7
    947a:	b004      	add	sp, #16
    947c:	bd80      	pop	{r7, pc}
    947e:	46c0      	nop			; (mov r8, r8)
    9480:	20003ccc 	.word	0x20003ccc
    9484:	000081f9 	.word	0x000081f9
    9488:	20003ca4 	.word	0x20003ca4
    948c:	20003c64 	.word	0x20003c64
    9490:	0000807d 	.word	0x0000807d
    9494:	20003cac 	.word	0x20003cac
    9498:	20003bd0 	.word	0x20003bd0
    949c:	00007fcd 	.word	0x00007fcd
    94a0:	20003bcc 	.word	0x20003bcc
    94a4:	20003cb8 	.word	0x20003cb8
    94a8:	00009a9d 	.word	0x00009a9d
    94ac:	20003cb4 	.word	0x20003cb4
    94b0:	000094d9 	.word	0x000094d9
    94b4:	000081d9 	.word	0x000081d9
    94b8:	0000821d 	.word	0x0000821d

000094bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    94bc:	b580      	push	{r7, lr}
    94be:	b082      	sub	sp, #8
    94c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    94c2:	4b04      	ldr	r3, [pc, #16]	; (94d4 <xTaskGetTickCount+0x18>)
    94c4:	681b      	ldr	r3, [r3, #0]
    94c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    94c8:	687b      	ldr	r3, [r7, #4]
}
    94ca:	0018      	movs	r0, r3
    94cc:	46bd      	mov	sp, r7
    94ce:	b002      	add	sp, #8
    94d0:	bd80      	pop	{r7, pc}
    94d2:	46c0      	nop			; (mov r8, r8)
    94d4:	20003ca8 	.word	0x20003ca8

000094d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    94d8:	b580      	push	{r7, lr}
    94da:	b086      	sub	sp, #24
    94dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    94de:	2300      	movs	r3, #0
    94e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    94e2:	4b45      	ldr	r3, [pc, #276]	; (95f8 <xTaskIncrementTick+0x120>)
    94e4:	681b      	ldr	r3, [r3, #0]
    94e6:	2b00      	cmp	r3, #0
    94e8:	d000      	beq.n	94ec <xTaskIncrementTick+0x14>
    94ea:	e075      	b.n	95d8 <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    94ec:	4b43      	ldr	r3, [pc, #268]	; (95fc <xTaskIncrementTick+0x124>)
    94ee:	681b      	ldr	r3, [r3, #0]
    94f0:	3301      	adds	r3, #1
    94f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    94f4:	4b41      	ldr	r3, [pc, #260]	; (95fc <xTaskIncrementTick+0x124>)
    94f6:	693a      	ldr	r2, [r7, #16]
    94f8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    94fa:	693b      	ldr	r3, [r7, #16]
    94fc:	2b00      	cmp	r3, #0
    94fe:	d117      	bne.n	9530 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    9500:	4b3f      	ldr	r3, [pc, #252]	; (9600 <xTaskIncrementTick+0x128>)
    9502:	681b      	ldr	r3, [r3, #0]
    9504:	681b      	ldr	r3, [r3, #0]
    9506:	2b00      	cmp	r3, #0
    9508:	d001      	beq.n	950e <xTaskIncrementTick+0x36>
    950a:	b672      	cpsid	i
    950c:	e7fe      	b.n	950c <xTaskIncrementTick+0x34>
    950e:	4b3c      	ldr	r3, [pc, #240]	; (9600 <xTaskIncrementTick+0x128>)
    9510:	681b      	ldr	r3, [r3, #0]
    9512:	60fb      	str	r3, [r7, #12]
    9514:	4b3b      	ldr	r3, [pc, #236]	; (9604 <xTaskIncrementTick+0x12c>)
    9516:	681a      	ldr	r2, [r3, #0]
    9518:	4b39      	ldr	r3, [pc, #228]	; (9600 <xTaskIncrementTick+0x128>)
    951a:	601a      	str	r2, [r3, #0]
    951c:	4b39      	ldr	r3, [pc, #228]	; (9604 <xTaskIncrementTick+0x12c>)
    951e:	68fa      	ldr	r2, [r7, #12]
    9520:	601a      	str	r2, [r3, #0]
    9522:	4b39      	ldr	r3, [pc, #228]	; (9608 <xTaskIncrementTick+0x130>)
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	1c5a      	adds	r2, r3, #1
    9528:	4b37      	ldr	r3, [pc, #220]	; (9608 <xTaskIncrementTick+0x130>)
    952a:	601a      	str	r2, [r3, #0]
    952c:	4b37      	ldr	r3, [pc, #220]	; (960c <xTaskIncrementTick+0x134>)
    952e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    9530:	4b37      	ldr	r3, [pc, #220]	; (9610 <xTaskIncrementTick+0x138>)
    9532:	681b      	ldr	r3, [r3, #0]
    9534:	693a      	ldr	r2, [r7, #16]
    9536:	429a      	cmp	r2, r3
    9538:	d353      	bcc.n	95e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    953a:	4b31      	ldr	r3, [pc, #196]	; (9600 <xTaskIncrementTick+0x128>)
    953c:	681b      	ldr	r3, [r3, #0]
    953e:	681b      	ldr	r3, [r3, #0]
    9540:	2b00      	cmp	r3, #0
    9542:	d101      	bne.n	9548 <xTaskIncrementTick+0x70>
    9544:	2301      	movs	r3, #1
    9546:	e000      	b.n	954a <xTaskIncrementTick+0x72>
    9548:	2300      	movs	r3, #0
    954a:	2b00      	cmp	r3, #0
    954c:	d004      	beq.n	9558 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    954e:	4b30      	ldr	r3, [pc, #192]	; (9610 <xTaskIncrementTick+0x138>)
    9550:	2201      	movs	r2, #1
    9552:	4252      	negs	r2, r2
    9554:	601a      	str	r2, [r3, #0]
					break;
    9556:	e044      	b.n	95e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    9558:	4b29      	ldr	r3, [pc, #164]	; (9600 <xTaskIncrementTick+0x128>)
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	68db      	ldr	r3, [r3, #12]
    955e:	68db      	ldr	r3, [r3, #12]
    9560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    9562:	68bb      	ldr	r3, [r7, #8]
    9564:	685b      	ldr	r3, [r3, #4]
    9566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    9568:	693a      	ldr	r2, [r7, #16]
    956a:	687b      	ldr	r3, [r7, #4]
    956c:	429a      	cmp	r2, r3
    956e:	d203      	bcs.n	9578 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    9570:	4b27      	ldr	r3, [pc, #156]	; (9610 <xTaskIncrementTick+0x138>)
    9572:	687a      	ldr	r2, [r7, #4]
    9574:	601a      	str	r2, [r3, #0]
						break;
    9576:	e034      	b.n	95e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9578:	68bb      	ldr	r3, [r7, #8]
    957a:	3304      	adds	r3, #4
    957c:	0018      	movs	r0, r3
    957e:	4b25      	ldr	r3, [pc, #148]	; (9614 <xTaskIncrementTick+0x13c>)
    9580:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    9582:	68bb      	ldr	r3, [r7, #8]
    9584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9586:	2b00      	cmp	r3, #0
    9588:	d004      	beq.n	9594 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    958a:	68bb      	ldr	r3, [r7, #8]
    958c:	3318      	adds	r3, #24
    958e:	0018      	movs	r0, r3
    9590:	4b20      	ldr	r3, [pc, #128]	; (9614 <xTaskIncrementTick+0x13c>)
    9592:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    9594:	68bb      	ldr	r3, [r7, #8]
    9596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9598:	4b1f      	ldr	r3, [pc, #124]	; (9618 <xTaskIncrementTick+0x140>)
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	429a      	cmp	r2, r3
    959e:	d903      	bls.n	95a8 <xTaskIncrementTick+0xd0>
    95a0:	68bb      	ldr	r3, [r7, #8]
    95a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95a4:	4b1c      	ldr	r3, [pc, #112]	; (9618 <xTaskIncrementTick+0x140>)
    95a6:	601a      	str	r2, [r3, #0]
    95a8:	68bb      	ldr	r3, [r7, #8]
    95aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95ac:	0013      	movs	r3, r2
    95ae:	009b      	lsls	r3, r3, #2
    95b0:	189b      	adds	r3, r3, r2
    95b2:	009b      	lsls	r3, r3, #2
    95b4:	4a19      	ldr	r2, [pc, #100]	; (961c <xTaskIncrementTick+0x144>)
    95b6:	189a      	adds	r2, r3, r2
    95b8:	68bb      	ldr	r3, [r7, #8]
    95ba:	3304      	adds	r3, #4
    95bc:	0019      	movs	r1, r3
    95be:	0010      	movs	r0, r2
    95c0:	4b17      	ldr	r3, [pc, #92]	; (9620 <xTaskIncrementTick+0x148>)
    95c2:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    95c4:	68bb      	ldr	r3, [r7, #8]
    95c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    95c8:	4b16      	ldr	r3, [pc, #88]	; (9624 <xTaskIncrementTick+0x14c>)
    95ca:	681b      	ldr	r3, [r3, #0]
    95cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    95ce:	429a      	cmp	r2, r3
    95d0:	d3b3      	bcc.n	953a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    95d2:	2301      	movs	r3, #1
    95d4:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    95d6:	e7b0      	b.n	953a <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    95d8:	4b13      	ldr	r3, [pc, #76]	; (9628 <xTaskIncrementTick+0x150>)
    95da:	681b      	ldr	r3, [r3, #0]
    95dc:	1c5a      	adds	r2, r3, #1
    95de:	4b12      	ldr	r3, [pc, #72]	; (9628 <xTaskIncrementTick+0x150>)
    95e0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    95e2:	4b12      	ldr	r3, [pc, #72]	; (962c <xTaskIncrementTick+0x154>)
    95e4:	681b      	ldr	r3, [r3, #0]
    95e6:	2b00      	cmp	r3, #0
    95e8:	d001      	beq.n	95ee <xTaskIncrementTick+0x116>
		{
			xSwitchRequired = pdTRUE;
    95ea:	2301      	movs	r3, #1
    95ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    95ee:	697b      	ldr	r3, [r7, #20]
}
    95f0:	0018      	movs	r0, r3
    95f2:	46bd      	mov	sp, r7
    95f4:	b006      	add	sp, #24
    95f6:	bd80      	pop	{r7, pc}
    95f8:	20003ccc 	.word	0x20003ccc
    95fc:	20003ca8 	.word	0x20003ca8
    9600:	20003c5c 	.word	0x20003c5c
    9604:	20003c60 	.word	0x20003c60
    9608:	20003cbc 	.word	0x20003cbc
    960c:	00009a9d 	.word	0x00009a9d
    9610:	20003cc4 	.word	0x20003cc4
    9614:	0000807d 	.word	0x0000807d
    9618:	20003cac 	.word	0x20003cac
    961c:	20003bd0 	.word	0x20003bd0
    9620:	00007fcd 	.word	0x00007fcd
    9624:	20003bcc 	.word	0x20003bcc
    9628:	20003cb4 	.word	0x20003cb4
    962c:	20003cb8 	.word	0x20003cb8

00009630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    9630:	b580      	push	{r7, lr}
    9632:	b082      	sub	sp, #8
    9634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    9636:	4b2a      	ldr	r3, [pc, #168]	; (96e0 <vTaskSwitchContext+0xb0>)
    9638:	681b      	ldr	r3, [r3, #0]
    963a:	2b00      	cmp	r3, #0
    963c:	d003      	beq.n	9646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    963e:	4b29      	ldr	r3, [pc, #164]	; (96e4 <vTaskSwitchContext+0xb4>)
    9640:	2201      	movs	r2, #1
    9642:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    9644:	e048      	b.n	96d8 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    9646:	4b27      	ldr	r3, [pc, #156]	; (96e4 <vTaskSwitchContext+0xb4>)
    9648:	2200      	movs	r2, #0
    964a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    964c:	4b26      	ldr	r3, [pc, #152]	; (96e8 <vTaskSwitchContext+0xb8>)
    964e:	681b      	ldr	r3, [r3, #0]
    9650:	681a      	ldr	r2, [r3, #0]
    9652:	4b25      	ldr	r3, [pc, #148]	; (96e8 <vTaskSwitchContext+0xb8>)
    9654:	681b      	ldr	r3, [r3, #0]
    9656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9658:	429a      	cmp	r2, r3
    965a:	d808      	bhi.n	966e <vTaskSwitchContext+0x3e>
    965c:	4b22      	ldr	r3, [pc, #136]	; (96e8 <vTaskSwitchContext+0xb8>)
    965e:	681a      	ldr	r2, [r3, #0]
    9660:	4b21      	ldr	r3, [pc, #132]	; (96e8 <vTaskSwitchContext+0xb8>)
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	3334      	adds	r3, #52	; 0x34
    9666:	0019      	movs	r1, r3
    9668:	0010      	movs	r0, r2
    966a:	4b20      	ldr	r3, [pc, #128]	; (96ec <vTaskSwitchContext+0xbc>)
    966c:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    966e:	4b20      	ldr	r3, [pc, #128]	; (96f0 <vTaskSwitchContext+0xc0>)
    9670:	681b      	ldr	r3, [r3, #0]
    9672:	607b      	str	r3, [r7, #4]
    9674:	e007      	b.n	9686 <vTaskSwitchContext+0x56>
    9676:	687b      	ldr	r3, [r7, #4]
    9678:	2b00      	cmp	r3, #0
    967a:	d101      	bne.n	9680 <vTaskSwitchContext+0x50>
    967c:	b672      	cpsid	i
    967e:	e7fe      	b.n	967e <vTaskSwitchContext+0x4e>
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	3b01      	subs	r3, #1
    9684:	607b      	str	r3, [r7, #4]
    9686:	491b      	ldr	r1, [pc, #108]	; (96f4 <vTaskSwitchContext+0xc4>)
    9688:	687a      	ldr	r2, [r7, #4]
    968a:	0013      	movs	r3, r2
    968c:	009b      	lsls	r3, r3, #2
    968e:	189b      	adds	r3, r3, r2
    9690:	009b      	lsls	r3, r3, #2
    9692:	585b      	ldr	r3, [r3, r1]
    9694:	2b00      	cmp	r3, #0
    9696:	d0ee      	beq.n	9676 <vTaskSwitchContext+0x46>
    9698:	687a      	ldr	r2, [r7, #4]
    969a:	0013      	movs	r3, r2
    969c:	009b      	lsls	r3, r3, #2
    969e:	189b      	adds	r3, r3, r2
    96a0:	009b      	lsls	r3, r3, #2
    96a2:	4a14      	ldr	r2, [pc, #80]	; (96f4 <vTaskSwitchContext+0xc4>)
    96a4:	189b      	adds	r3, r3, r2
    96a6:	603b      	str	r3, [r7, #0]
    96a8:	683b      	ldr	r3, [r7, #0]
    96aa:	685b      	ldr	r3, [r3, #4]
    96ac:	685a      	ldr	r2, [r3, #4]
    96ae:	683b      	ldr	r3, [r7, #0]
    96b0:	605a      	str	r2, [r3, #4]
    96b2:	683b      	ldr	r3, [r7, #0]
    96b4:	685a      	ldr	r2, [r3, #4]
    96b6:	683b      	ldr	r3, [r7, #0]
    96b8:	3308      	adds	r3, #8
    96ba:	429a      	cmp	r2, r3
    96bc:	d104      	bne.n	96c8 <vTaskSwitchContext+0x98>
    96be:	683b      	ldr	r3, [r7, #0]
    96c0:	685b      	ldr	r3, [r3, #4]
    96c2:	685a      	ldr	r2, [r3, #4]
    96c4:	683b      	ldr	r3, [r7, #0]
    96c6:	605a      	str	r2, [r3, #4]
    96c8:	683b      	ldr	r3, [r7, #0]
    96ca:	685b      	ldr	r3, [r3, #4]
    96cc:	68da      	ldr	r2, [r3, #12]
    96ce:	4b06      	ldr	r3, [pc, #24]	; (96e8 <vTaskSwitchContext+0xb8>)
    96d0:	601a      	str	r2, [r3, #0]
    96d2:	4b07      	ldr	r3, [pc, #28]	; (96f0 <vTaskSwitchContext+0xc0>)
    96d4:	687a      	ldr	r2, [r7, #4]
    96d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    96d8:	46c0      	nop			; (mov r8, r8)
    96da:	46bd      	mov	sp, r7
    96dc:	b002      	add	sp, #8
    96de:	bd80      	pop	{r7, pc}
    96e0:	20003ccc 	.word	0x20003ccc
    96e4:	20003cb8 	.word	0x20003cb8
    96e8:	20003bcc 	.word	0x20003bcc
    96ec:	0000af61 	.word	0x0000af61
    96f0:	20003cac 	.word	0x20003cac
    96f4:	20003bd0 	.word	0x20003bd0

000096f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    96f8:	b580      	push	{r7, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	af00      	add	r7, sp, #0
    96fe:	6078      	str	r0, [r7, #4]
    9700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    9702:	687b      	ldr	r3, [r7, #4]
    9704:	2b00      	cmp	r3, #0
    9706:	d101      	bne.n	970c <vTaskPlaceOnEventList+0x14>
    9708:	b672      	cpsid	i
    970a:	e7fe      	b.n	970a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    970c:	4b08      	ldr	r3, [pc, #32]	; (9730 <vTaskPlaceOnEventList+0x38>)
    970e:	681b      	ldr	r3, [r3, #0]
    9710:	3318      	adds	r3, #24
    9712:	001a      	movs	r2, r3
    9714:	687b      	ldr	r3, [r7, #4]
    9716:	0011      	movs	r1, r2
    9718:	0018      	movs	r0, r3
    971a:	4b06      	ldr	r3, [pc, #24]	; (9734 <vTaskPlaceOnEventList+0x3c>)
    971c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    971e:	683b      	ldr	r3, [r7, #0]
    9720:	2101      	movs	r1, #1
    9722:	0018      	movs	r0, r3
    9724:	4b04      	ldr	r3, [pc, #16]	; (9738 <vTaskPlaceOnEventList+0x40>)
    9726:	4798      	blx	r3
}
    9728:	46c0      	nop			; (mov r8, r8)
    972a:	46bd      	mov	sp, r7
    972c:	b002      	add	sp, #8
    972e:	bd80      	pop	{r7, pc}
    9730:	20003bcc 	.word	0x20003bcc
    9734:	00008011 	.word	0x00008011
    9738:	00009cc5 	.word	0x00009cc5

0000973c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    973c:	b580      	push	{r7, lr}
    973e:	b084      	sub	sp, #16
    9740:	af00      	add	r7, sp, #0
    9742:	60f8      	str	r0, [r7, #12]
    9744:	60b9      	str	r1, [r7, #8]
    9746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	2b00      	cmp	r3, #0
    974c:	d101      	bne.n	9752 <vTaskPlaceOnEventListRestricted+0x16>
    974e:	b672      	cpsid	i
    9750:	e7fe      	b.n	9750 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    9752:	4b0c      	ldr	r3, [pc, #48]	; (9784 <vTaskPlaceOnEventListRestricted+0x48>)
    9754:	681b      	ldr	r3, [r3, #0]
    9756:	3318      	adds	r3, #24
    9758:	001a      	movs	r2, r3
    975a:	68fb      	ldr	r3, [r7, #12]
    975c:	0011      	movs	r1, r2
    975e:	0018      	movs	r0, r3
    9760:	4b09      	ldr	r3, [pc, #36]	; (9788 <vTaskPlaceOnEventListRestricted+0x4c>)
    9762:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    9764:	687b      	ldr	r3, [r7, #4]
    9766:	2b00      	cmp	r3, #0
    9768:	d002      	beq.n	9770 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    976a:	2301      	movs	r3, #1
    976c:	425b      	negs	r3, r3
    976e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    9770:	687a      	ldr	r2, [r7, #4]
    9772:	68bb      	ldr	r3, [r7, #8]
    9774:	0011      	movs	r1, r2
    9776:	0018      	movs	r0, r3
    9778:	4b04      	ldr	r3, [pc, #16]	; (978c <vTaskPlaceOnEventListRestricted+0x50>)
    977a:	4798      	blx	r3
	}
    977c:	46c0      	nop			; (mov r8, r8)
    977e:	46bd      	mov	sp, r7
    9780:	b004      	add	sp, #16
    9782:	bd80      	pop	{r7, pc}
    9784:	20003bcc 	.word	0x20003bcc
    9788:	00007fcd 	.word	0x00007fcd
    978c:	00009cc5 	.word	0x00009cc5

00009790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    9790:	b580      	push	{r7, lr}
    9792:	b084      	sub	sp, #16
    9794:	af00      	add	r7, sp, #0
    9796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    9798:	687b      	ldr	r3, [r7, #4]
    979a:	68db      	ldr	r3, [r3, #12]
    979c:	68db      	ldr	r3, [r3, #12]
    979e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    97a0:	68bb      	ldr	r3, [r7, #8]
    97a2:	2b00      	cmp	r3, #0
    97a4:	d101      	bne.n	97aa <xTaskRemoveFromEventList+0x1a>
    97a6:	b672      	cpsid	i
    97a8:	e7fe      	b.n	97a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    97aa:	68bb      	ldr	r3, [r7, #8]
    97ac:	3318      	adds	r3, #24
    97ae:	0018      	movs	r0, r3
    97b0:	4b1f      	ldr	r3, [pc, #124]	; (9830 <xTaskRemoveFromEventList+0xa0>)
    97b2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    97b4:	4b1f      	ldr	r3, [pc, #124]	; (9834 <xTaskRemoveFromEventList+0xa4>)
    97b6:	681b      	ldr	r3, [r3, #0]
    97b8:	2b00      	cmp	r3, #0
    97ba:	d11d      	bne.n	97f8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    97bc:	68bb      	ldr	r3, [r7, #8]
    97be:	3304      	adds	r3, #4
    97c0:	0018      	movs	r0, r3
    97c2:	4b1b      	ldr	r3, [pc, #108]	; (9830 <xTaskRemoveFromEventList+0xa0>)
    97c4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    97c6:	68bb      	ldr	r3, [r7, #8]
    97c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97ca:	4b1b      	ldr	r3, [pc, #108]	; (9838 <xTaskRemoveFromEventList+0xa8>)
    97cc:	681b      	ldr	r3, [r3, #0]
    97ce:	429a      	cmp	r2, r3
    97d0:	d903      	bls.n	97da <xTaskRemoveFromEventList+0x4a>
    97d2:	68bb      	ldr	r3, [r7, #8]
    97d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97d6:	4b18      	ldr	r3, [pc, #96]	; (9838 <xTaskRemoveFromEventList+0xa8>)
    97d8:	601a      	str	r2, [r3, #0]
    97da:	68bb      	ldr	r3, [r7, #8]
    97dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    97de:	0013      	movs	r3, r2
    97e0:	009b      	lsls	r3, r3, #2
    97e2:	189b      	adds	r3, r3, r2
    97e4:	009b      	lsls	r3, r3, #2
    97e6:	4a15      	ldr	r2, [pc, #84]	; (983c <xTaskRemoveFromEventList+0xac>)
    97e8:	189a      	adds	r2, r3, r2
    97ea:	68bb      	ldr	r3, [r7, #8]
    97ec:	3304      	adds	r3, #4
    97ee:	0019      	movs	r1, r3
    97f0:	0010      	movs	r0, r2
    97f2:	4b13      	ldr	r3, [pc, #76]	; (9840 <xTaskRemoveFromEventList+0xb0>)
    97f4:	4798      	blx	r3
    97f6:	e007      	b.n	9808 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    97f8:	68bb      	ldr	r3, [r7, #8]
    97fa:	3318      	adds	r3, #24
    97fc:	001a      	movs	r2, r3
    97fe:	4b11      	ldr	r3, [pc, #68]	; (9844 <xTaskRemoveFromEventList+0xb4>)
    9800:	0011      	movs	r1, r2
    9802:	0018      	movs	r0, r3
    9804:	4b0e      	ldr	r3, [pc, #56]	; (9840 <xTaskRemoveFromEventList+0xb0>)
    9806:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    9808:	68bb      	ldr	r3, [r7, #8]
    980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    980c:	4b0e      	ldr	r3, [pc, #56]	; (9848 <xTaskRemoveFromEventList+0xb8>)
    980e:	681b      	ldr	r3, [r3, #0]
    9810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9812:	429a      	cmp	r2, r3
    9814:	d905      	bls.n	9822 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    9816:	2301      	movs	r3, #1
    9818:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    981a:	4b0c      	ldr	r3, [pc, #48]	; (984c <xTaskRemoveFromEventList+0xbc>)
    981c:	2201      	movs	r2, #1
    981e:	601a      	str	r2, [r3, #0]
    9820:	e001      	b.n	9826 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    9822:	2300      	movs	r3, #0
    9824:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    9826:	68fb      	ldr	r3, [r7, #12]
}
    9828:	0018      	movs	r0, r3
    982a:	46bd      	mov	sp, r7
    982c:	b004      	add	sp, #16
    982e:	bd80      	pop	{r7, pc}
    9830:	0000807d 	.word	0x0000807d
    9834:	20003ccc 	.word	0x20003ccc
    9838:	20003cac 	.word	0x20003cac
    983c:	20003bd0 	.word	0x20003bd0
    9840:	00007fcd 	.word	0x00007fcd
    9844:	20003c64 	.word	0x20003c64
    9848:	20003bcc 	.word	0x20003bcc
    984c:	20003cb8 	.word	0x20003cb8

00009850 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    9850:	b580      	push	{r7, lr}
    9852:	b082      	sub	sp, #8
    9854:	af00      	add	r7, sp, #0
    9856:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    9858:	687b      	ldr	r3, [r7, #4]
    985a:	2b00      	cmp	r3, #0
    985c:	d101      	bne.n	9862 <vTaskSetTimeOutState+0x12>
    985e:	b672      	cpsid	i
    9860:	e7fe      	b.n	9860 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    9862:	4b06      	ldr	r3, [pc, #24]	; (987c <vTaskSetTimeOutState+0x2c>)
    9864:	681a      	ldr	r2, [r3, #0]
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    986a:	4b05      	ldr	r3, [pc, #20]	; (9880 <vTaskSetTimeOutState+0x30>)
    986c:	681a      	ldr	r2, [r3, #0]
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	605a      	str	r2, [r3, #4]
}
    9872:	46c0      	nop			; (mov r8, r8)
    9874:	46bd      	mov	sp, r7
    9876:	b002      	add	sp, #8
    9878:	bd80      	pop	{r7, pc}
    987a:	46c0      	nop			; (mov r8, r8)
    987c:	20003cbc 	.word	0x20003cbc
    9880:	20003ca8 	.word	0x20003ca8

00009884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    9884:	b580      	push	{r7, lr}
    9886:	b084      	sub	sp, #16
    9888:	af00      	add	r7, sp, #0
    988a:	6078      	str	r0, [r7, #4]
    988c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    988e:	687b      	ldr	r3, [r7, #4]
    9890:	2b00      	cmp	r3, #0
    9892:	d101      	bne.n	9898 <xTaskCheckForTimeOut+0x14>
    9894:	b672      	cpsid	i
    9896:	e7fe      	b.n	9896 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    9898:	683b      	ldr	r3, [r7, #0]
    989a:	2b00      	cmp	r3, #0
    989c:	d101      	bne.n	98a2 <xTaskCheckForTimeOut+0x1e>
    989e:	b672      	cpsid	i
    98a0:	e7fe      	b.n	98a0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    98a2:	4b1d      	ldr	r3, [pc, #116]	; (9918 <xTaskCheckForTimeOut+0x94>)
    98a4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    98a6:	4b1d      	ldr	r3, [pc, #116]	; (991c <xTaskCheckForTimeOut+0x98>)
    98a8:	681b      	ldr	r3, [r3, #0]
    98aa:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    98ac:	683b      	ldr	r3, [r7, #0]
    98ae:	681b      	ldr	r3, [r3, #0]
    98b0:	3301      	adds	r3, #1
    98b2:	d102      	bne.n	98ba <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    98b4:	2300      	movs	r3, #0
    98b6:	60fb      	str	r3, [r7, #12]
    98b8:	e027      	b.n	990a <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    98ba:	687b      	ldr	r3, [r7, #4]
    98bc:	681a      	ldr	r2, [r3, #0]
    98be:	4b18      	ldr	r3, [pc, #96]	; (9920 <xTaskCheckForTimeOut+0x9c>)
    98c0:	681b      	ldr	r3, [r3, #0]
    98c2:	429a      	cmp	r2, r3
    98c4:	d007      	beq.n	98d6 <xTaskCheckForTimeOut+0x52>
    98c6:	687b      	ldr	r3, [r7, #4]
    98c8:	685a      	ldr	r2, [r3, #4]
    98ca:	68bb      	ldr	r3, [r7, #8]
    98cc:	429a      	cmp	r2, r3
    98ce:	d802      	bhi.n	98d6 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    98d0:	2301      	movs	r3, #1
    98d2:	60fb      	str	r3, [r7, #12]
    98d4:	e019      	b.n	990a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    98d6:	687b      	ldr	r3, [r7, #4]
    98d8:	685b      	ldr	r3, [r3, #4]
    98da:	68ba      	ldr	r2, [r7, #8]
    98dc:	1ad2      	subs	r2, r2, r3
    98de:	683b      	ldr	r3, [r7, #0]
    98e0:	681b      	ldr	r3, [r3, #0]
    98e2:	429a      	cmp	r2, r3
    98e4:	d20f      	bcs.n	9906 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    98e6:	683b      	ldr	r3, [r7, #0]
    98e8:	681a      	ldr	r2, [r3, #0]
    98ea:	687b      	ldr	r3, [r7, #4]
    98ec:	6859      	ldr	r1, [r3, #4]
    98ee:	68bb      	ldr	r3, [r7, #8]
    98f0:	1acb      	subs	r3, r1, r3
    98f2:	18d2      	adds	r2, r2, r3
    98f4:	683b      	ldr	r3, [r7, #0]
    98f6:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    98f8:	687b      	ldr	r3, [r7, #4]
    98fa:	0018      	movs	r0, r3
    98fc:	4b09      	ldr	r3, [pc, #36]	; (9924 <xTaskCheckForTimeOut+0xa0>)
    98fe:	4798      	blx	r3
			xReturn = pdFALSE;
    9900:	2300      	movs	r3, #0
    9902:	60fb      	str	r3, [r7, #12]
    9904:	e001      	b.n	990a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    9906:	2301      	movs	r3, #1
    9908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    990a:	4b07      	ldr	r3, [pc, #28]	; (9928 <xTaskCheckForTimeOut+0xa4>)
    990c:	4798      	blx	r3

	return xReturn;
    990e:	68fb      	ldr	r3, [r7, #12]
}
    9910:	0018      	movs	r0, r3
    9912:	46bd      	mov	sp, r7
    9914:	b004      	add	sp, #16
    9916:	bd80      	pop	{r7, pc}
    9918:	000081f9 	.word	0x000081f9
    991c:	20003ca8 	.word	0x20003ca8
    9920:	20003cbc 	.word	0x20003cbc
    9924:	00009851 	.word	0x00009851
    9928:	0000821d 	.word	0x0000821d

0000992c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    992c:	b580      	push	{r7, lr}
    992e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    9930:	4b02      	ldr	r3, [pc, #8]	; (993c <vTaskMissedYield+0x10>)
    9932:	2201      	movs	r2, #1
    9934:	601a      	str	r2, [r3, #0]
}
    9936:	46c0      	nop			; (mov r8, r8)
    9938:	46bd      	mov	sp, r7
    993a:	bd80      	pop	{r7, pc}
    993c:	20003cb8 	.word	0x20003cb8

00009940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    9940:	b580      	push	{r7, lr}
    9942:	b082      	sub	sp, #8
    9944:	af00      	add	r7, sp, #0
    9946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    9948:	4b02      	ldr	r3, [pc, #8]	; (9954 <prvIdleTask+0x14>)
    994a:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    994c:	4b02      	ldr	r3, [pc, #8]	; (9958 <prvIdleTask+0x18>)
    994e:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    9950:	e7fa      	b.n	9948 <prvIdleTask+0x8>
    9952:	46c0      	nop			; (mov r8, r8)
    9954:	000099e9 	.word	0x000099e9
    9958:	0000af4d 	.word	0x0000af4d

0000995c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    995c:	b580      	push	{r7, lr}
    995e:	b082      	sub	sp, #8
    9960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    9962:	2300      	movs	r3, #0
    9964:	607b      	str	r3, [r7, #4]
    9966:	e00c      	b.n	9982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    9968:	687a      	ldr	r2, [r7, #4]
    996a:	0013      	movs	r3, r2
    996c:	009b      	lsls	r3, r3, #2
    996e:	189b      	adds	r3, r3, r2
    9970:	009b      	lsls	r3, r3, #2
    9972:	4a14      	ldr	r2, [pc, #80]	; (99c4 <prvInitialiseTaskLists+0x68>)
    9974:	189b      	adds	r3, r3, r2
    9976:	0018      	movs	r0, r3
    9978:	4b13      	ldr	r3, [pc, #76]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    997a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    997c:	687b      	ldr	r3, [r7, #4]
    997e:	3301      	adds	r3, #1
    9980:	607b      	str	r3, [r7, #4]
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	2b04      	cmp	r3, #4
    9986:	d9ef      	bls.n	9968 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    9988:	4b10      	ldr	r3, [pc, #64]	; (99cc <prvInitialiseTaskLists+0x70>)
    998a:	0018      	movs	r0, r3
    998c:	4b0e      	ldr	r3, [pc, #56]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    998e:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    9990:	4b0f      	ldr	r3, [pc, #60]	; (99d0 <prvInitialiseTaskLists+0x74>)
    9992:	0018      	movs	r0, r3
    9994:	4b0c      	ldr	r3, [pc, #48]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    9996:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    9998:	4b0e      	ldr	r3, [pc, #56]	; (99d4 <prvInitialiseTaskLists+0x78>)
    999a:	0018      	movs	r0, r3
    999c:	4b0a      	ldr	r3, [pc, #40]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    999e:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    99a0:	4b0d      	ldr	r3, [pc, #52]	; (99d8 <prvInitialiseTaskLists+0x7c>)
    99a2:	0018      	movs	r0, r3
    99a4:	4b08      	ldr	r3, [pc, #32]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    99a6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    99a8:	4b0c      	ldr	r3, [pc, #48]	; (99dc <prvInitialiseTaskLists+0x80>)
    99aa:	0018      	movs	r0, r3
    99ac:	4b06      	ldr	r3, [pc, #24]	; (99c8 <prvInitialiseTaskLists+0x6c>)
    99ae:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    99b0:	4b0b      	ldr	r3, [pc, #44]	; (99e0 <prvInitialiseTaskLists+0x84>)
    99b2:	4a06      	ldr	r2, [pc, #24]	; (99cc <prvInitialiseTaskLists+0x70>)
    99b4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    99b6:	4b0b      	ldr	r3, [pc, #44]	; (99e4 <prvInitialiseTaskLists+0x88>)
    99b8:	4a05      	ldr	r2, [pc, #20]	; (99d0 <prvInitialiseTaskLists+0x74>)
    99ba:	601a      	str	r2, [r3, #0]
}
    99bc:	46c0      	nop			; (mov r8, r8)
    99be:	46bd      	mov	sp, r7
    99c0:	b002      	add	sp, #8
    99c2:	bd80      	pop	{r7, pc}
    99c4:	20003bd0 	.word	0x20003bd0
    99c8:	00007f79 	.word	0x00007f79
    99cc:	20003c34 	.word	0x20003c34
    99d0:	20003c48 	.word	0x20003c48
    99d4:	20003c64 	.word	0x20003c64
    99d8:	20003c78 	.word	0x20003c78
    99dc:	20003c90 	.word	0x20003c90
    99e0:	20003c5c 	.word	0x20003c5c
    99e4:	20003c60 	.word	0x20003c60

000099e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    99e8:	b580      	push	{r7, lr}
    99ea:	b082      	sub	sp, #8
    99ec:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    99ee:	e027      	b.n	9a40 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    99f0:	4b17      	ldr	r3, [pc, #92]	; (9a50 <prvCheckTasksWaitingTermination+0x68>)
    99f2:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    99f4:	4b17      	ldr	r3, [pc, #92]	; (9a54 <prvCheckTasksWaitingTermination+0x6c>)
    99f6:	681b      	ldr	r3, [r3, #0]
    99f8:	425a      	negs	r2, r3
    99fa:	4153      	adcs	r3, r2
    99fc:	b2db      	uxtb	r3, r3
    99fe:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    9a00:	4b15      	ldr	r3, [pc, #84]	; (9a58 <prvCheckTasksWaitingTermination+0x70>)
    9a02:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    9a04:	687b      	ldr	r3, [r7, #4]
    9a06:	2b00      	cmp	r3, #0
    9a08:	d11a      	bne.n	9a40 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    9a0a:	4b14      	ldr	r3, [pc, #80]	; (9a5c <prvCheckTasksWaitingTermination+0x74>)
    9a0c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    9a0e:	4b11      	ldr	r3, [pc, #68]	; (9a54 <prvCheckTasksWaitingTermination+0x6c>)
    9a10:	68db      	ldr	r3, [r3, #12]
    9a12:	68db      	ldr	r3, [r3, #12]
    9a14:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    9a16:	683b      	ldr	r3, [r7, #0]
    9a18:	3304      	adds	r3, #4
    9a1a:	0018      	movs	r0, r3
    9a1c:	4b10      	ldr	r3, [pc, #64]	; (9a60 <prvCheckTasksWaitingTermination+0x78>)
    9a1e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    9a20:	4b10      	ldr	r3, [pc, #64]	; (9a64 <prvCheckTasksWaitingTermination+0x7c>)
    9a22:	681b      	ldr	r3, [r3, #0]
    9a24:	1e5a      	subs	r2, r3, #1
    9a26:	4b0f      	ldr	r3, [pc, #60]	; (9a64 <prvCheckTasksWaitingTermination+0x7c>)
    9a28:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    9a2a:	4b0f      	ldr	r3, [pc, #60]	; (9a68 <prvCheckTasksWaitingTermination+0x80>)
    9a2c:	681b      	ldr	r3, [r3, #0]
    9a2e:	1e5a      	subs	r2, r3, #1
    9a30:	4b0d      	ldr	r3, [pc, #52]	; (9a68 <prvCheckTasksWaitingTermination+0x80>)
    9a32:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    9a34:	4b0d      	ldr	r3, [pc, #52]	; (9a6c <prvCheckTasksWaitingTermination+0x84>)
    9a36:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    9a38:	683b      	ldr	r3, [r7, #0]
    9a3a:	0018      	movs	r0, r3
    9a3c:	4b0c      	ldr	r3, [pc, #48]	; (9a70 <prvCheckTasksWaitingTermination+0x88>)
    9a3e:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    9a40:	4b09      	ldr	r3, [pc, #36]	; (9a68 <prvCheckTasksWaitingTermination+0x80>)
    9a42:	681b      	ldr	r3, [r3, #0]
    9a44:	2b00      	cmp	r3, #0
    9a46:	d1d3      	bne.n	99f0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    9a48:	46c0      	nop			; (mov r8, r8)
    9a4a:	46bd      	mov	sp, r7
    9a4c:	b002      	add	sp, #8
    9a4e:	bd80      	pop	{r7, pc}
    9a50:	00009371 	.word	0x00009371
    9a54:	20003c78 	.word	0x20003c78
    9a58:	00009389 	.word	0x00009389
    9a5c:	000081f9 	.word	0x000081f9
    9a60:	0000807d 	.word	0x0000807d
    9a64:	20003ca4 	.word	0x20003ca4
    9a68:	20003c8c 	.word	0x20003c8c
    9a6c:	0000821d 	.word	0x0000821d
    9a70:	00009a75 	.word	0x00009a75

00009a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    9a74:	b580      	push	{r7, lr}
    9a76:	b082      	sub	sp, #8
    9a78:	af00      	add	r7, sp, #0
    9a7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    9a7c:	687b      	ldr	r3, [r7, #4]
    9a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9a80:	0018      	movs	r0, r3
    9a82:	4b05      	ldr	r3, [pc, #20]	; (9a98 <prvDeleteTCB+0x24>)
    9a84:	4798      	blx	r3
			vPortFree( pxTCB );
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	0018      	movs	r0, r3
    9a8a:	4b03      	ldr	r3, [pc, #12]	; (9a98 <prvDeleteTCB+0x24>)
    9a8c:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    9a8e:	46c0      	nop			; (mov r8, r8)
    9a90:	46bd      	mov	sp, r7
    9a92:	b002      	add	sp, #8
    9a94:	bd80      	pop	{r7, pc}
    9a96:	46c0      	nop			; (mov r8, r8)
    9a98:	000083a1 	.word	0x000083a1

00009a9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    9a9c:	b580      	push	{r7, lr}
    9a9e:	b082      	sub	sp, #8
    9aa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    9aa2:	4b0e      	ldr	r3, [pc, #56]	; (9adc <prvResetNextTaskUnblockTime+0x40>)
    9aa4:	681b      	ldr	r3, [r3, #0]
    9aa6:	681b      	ldr	r3, [r3, #0]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d101      	bne.n	9ab0 <prvResetNextTaskUnblockTime+0x14>
    9aac:	2301      	movs	r3, #1
    9aae:	e000      	b.n	9ab2 <prvResetNextTaskUnblockTime+0x16>
    9ab0:	2300      	movs	r3, #0
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d004      	beq.n	9ac0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    9ab6:	4b0a      	ldr	r3, [pc, #40]	; (9ae0 <prvResetNextTaskUnblockTime+0x44>)
    9ab8:	2201      	movs	r2, #1
    9aba:	4252      	negs	r2, r2
    9abc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    9abe:	e008      	b.n	9ad2 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    9ac0:	4b06      	ldr	r3, [pc, #24]	; (9adc <prvResetNextTaskUnblockTime+0x40>)
    9ac2:	681b      	ldr	r3, [r3, #0]
    9ac4:	68db      	ldr	r3, [r3, #12]
    9ac6:	68db      	ldr	r3, [r3, #12]
    9ac8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	685a      	ldr	r2, [r3, #4]
    9ace:	4b04      	ldr	r3, [pc, #16]	; (9ae0 <prvResetNextTaskUnblockTime+0x44>)
    9ad0:	601a      	str	r2, [r3, #0]
	}
}
    9ad2:	46c0      	nop			; (mov r8, r8)
    9ad4:	46bd      	mov	sp, r7
    9ad6:	b002      	add	sp, #8
    9ad8:	bd80      	pop	{r7, pc}
    9ada:	46c0      	nop			; (mov r8, r8)
    9adc:	20003c5c 	.word	0x20003c5c
    9ae0:	20003cc4 	.word	0x20003cc4

00009ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b082      	sub	sp, #8
    9ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    9aea:	4b0a      	ldr	r3, [pc, #40]	; (9b14 <xTaskGetSchedulerState+0x30>)
    9aec:	681b      	ldr	r3, [r3, #0]
    9aee:	2b00      	cmp	r3, #0
    9af0:	d102      	bne.n	9af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    9af2:	2301      	movs	r3, #1
    9af4:	607b      	str	r3, [r7, #4]
    9af6:	e008      	b.n	9b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    9af8:	4b07      	ldr	r3, [pc, #28]	; (9b18 <xTaskGetSchedulerState+0x34>)
    9afa:	681b      	ldr	r3, [r3, #0]
    9afc:	2b00      	cmp	r3, #0
    9afe:	d102      	bne.n	9b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    9b00:	2302      	movs	r3, #2
    9b02:	607b      	str	r3, [r7, #4]
    9b04:	e001      	b.n	9b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    9b06:	2300      	movs	r3, #0
    9b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    9b0a:	687b      	ldr	r3, [r7, #4]
	}
    9b0c:	0018      	movs	r0, r3
    9b0e:	46bd      	mov	sp, r7
    9b10:	b002      	add	sp, #8
    9b12:	bd80      	pop	{r7, pc}
    9b14:	20003cb0 	.word	0x20003cb0
    9b18:	20003ccc 	.word	0x20003ccc

00009b1c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    9b1c:	b580      	push	{r7, lr}
    9b1e:	b084      	sub	sp, #16
    9b20:	af00      	add	r7, sp, #0
    9b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9b24:	687b      	ldr	r3, [r7, #4]
    9b26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    9b28:	687b      	ldr	r3, [r7, #4]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d04a      	beq.n	9bc4 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    9b2e:	68fb      	ldr	r3, [r7, #12]
    9b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b32:	4b26      	ldr	r3, [pc, #152]	; (9bcc <vTaskPriorityInherit+0xb0>)
    9b34:	681b      	ldr	r3, [r3, #0]
    9b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b38:	429a      	cmp	r2, r3
    9b3a:	d243      	bcs.n	9bc4 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    9b3c:	68fb      	ldr	r3, [r7, #12]
    9b3e:	699b      	ldr	r3, [r3, #24]
    9b40:	2b00      	cmp	r3, #0
    9b42:	db06      	blt.n	9b52 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9b44:	4b21      	ldr	r3, [pc, #132]	; (9bcc <vTaskPriorityInherit+0xb0>)
    9b46:	681b      	ldr	r3, [r3, #0]
    9b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9b4a:	2205      	movs	r2, #5
    9b4c:	1ad2      	subs	r2, r2, r3
    9b4e:	68fb      	ldr	r3, [r7, #12]
    9b50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    9b52:	68fb      	ldr	r3, [r7, #12]
    9b54:	6959      	ldr	r1, [r3, #20]
    9b56:	68fb      	ldr	r3, [r7, #12]
    9b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b5a:	0013      	movs	r3, r2
    9b5c:	009b      	lsls	r3, r3, #2
    9b5e:	189b      	adds	r3, r3, r2
    9b60:	009b      	lsls	r3, r3, #2
    9b62:	4a1b      	ldr	r2, [pc, #108]	; (9bd0 <vTaskPriorityInherit+0xb4>)
    9b64:	189b      	adds	r3, r3, r2
    9b66:	4299      	cmp	r1, r3
    9b68:	d101      	bne.n	9b6e <vTaskPriorityInherit+0x52>
    9b6a:	2301      	movs	r3, #1
    9b6c:	e000      	b.n	9b70 <vTaskPriorityInherit+0x54>
    9b6e:	2300      	movs	r3, #0
    9b70:	2b00      	cmp	r3, #0
    9b72:	d022      	beq.n	9bba <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9b74:	68fb      	ldr	r3, [r7, #12]
    9b76:	3304      	adds	r3, #4
    9b78:	0018      	movs	r0, r3
    9b7a:	4b16      	ldr	r3, [pc, #88]	; (9bd4 <vTaskPriorityInherit+0xb8>)
    9b7c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    9b7e:	4b13      	ldr	r3, [pc, #76]	; (9bcc <vTaskPriorityInherit+0xb0>)
    9b80:	681b      	ldr	r3, [r3, #0]
    9b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b84:	68fb      	ldr	r3, [r7, #12]
    9b86:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    9b88:	68fb      	ldr	r3, [r7, #12]
    9b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b8c:	4b12      	ldr	r3, [pc, #72]	; (9bd8 <vTaskPriorityInherit+0xbc>)
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	429a      	cmp	r2, r3
    9b92:	d903      	bls.n	9b9c <vTaskPriorityInherit+0x80>
    9b94:	68fb      	ldr	r3, [r7, #12]
    9b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9b98:	4b0f      	ldr	r3, [pc, #60]	; (9bd8 <vTaskPriorityInherit+0xbc>)
    9b9a:	601a      	str	r2, [r3, #0]
    9b9c:	68fb      	ldr	r3, [r7, #12]
    9b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9ba0:	0013      	movs	r3, r2
    9ba2:	009b      	lsls	r3, r3, #2
    9ba4:	189b      	adds	r3, r3, r2
    9ba6:	009b      	lsls	r3, r3, #2
    9ba8:	4a09      	ldr	r2, [pc, #36]	; (9bd0 <vTaskPriorityInherit+0xb4>)
    9baa:	189a      	adds	r2, r3, r2
    9bac:	68fb      	ldr	r3, [r7, #12]
    9bae:	3304      	adds	r3, #4
    9bb0:	0019      	movs	r1, r3
    9bb2:	0010      	movs	r0, r2
    9bb4:	4b09      	ldr	r3, [pc, #36]	; (9bdc <vTaskPriorityInherit+0xc0>)
    9bb6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9bb8:	e004      	b.n	9bc4 <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    9bba:	4b04      	ldr	r3, [pc, #16]	; (9bcc <vTaskPriorityInherit+0xb0>)
    9bbc:	681b      	ldr	r3, [r3, #0]
    9bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9bc0:	68fb      	ldr	r3, [r7, #12]
    9bc2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    9bc4:	46c0      	nop			; (mov r8, r8)
    9bc6:	46bd      	mov	sp, r7
    9bc8:	b004      	add	sp, #16
    9bca:	bd80      	pop	{r7, pc}
    9bcc:	20003bcc 	.word	0x20003bcc
    9bd0:	20003bd0 	.word	0x20003bd0
    9bd4:	0000807d 	.word	0x0000807d
    9bd8:	20003cac 	.word	0x20003cac
    9bdc:	00007fcd 	.word	0x00007fcd

00009be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    9be0:	b580      	push	{r7, lr}
    9be2:	b084      	sub	sp, #16
    9be4:	af00      	add	r7, sp, #0
    9be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    9be8:	687b      	ldr	r3, [r7, #4]
    9bea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    9bec:	2300      	movs	r3, #0
    9bee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    9bf0:	687b      	ldr	r3, [r7, #4]
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	d044      	beq.n	9c80 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    9bf6:	4b25      	ldr	r3, [pc, #148]	; (9c8c <xTaskPriorityDisinherit+0xac>)
    9bf8:	681b      	ldr	r3, [r3, #0]
    9bfa:	68ba      	ldr	r2, [r7, #8]
    9bfc:	429a      	cmp	r2, r3
    9bfe:	d001      	beq.n	9c04 <xTaskPriorityDisinherit+0x24>
    9c00:	b672      	cpsid	i
    9c02:	e7fe      	b.n	9c02 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    9c04:	68bb      	ldr	r3, [r7, #8]
    9c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9c08:	2b00      	cmp	r3, #0
    9c0a:	d101      	bne.n	9c10 <xTaskPriorityDisinherit+0x30>
    9c0c:	b672      	cpsid	i
    9c0e:	e7fe      	b.n	9c0e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    9c10:	68bb      	ldr	r3, [r7, #8]
    9c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9c14:	1e5a      	subs	r2, r3, #1
    9c16:	68bb      	ldr	r3, [r7, #8]
    9c18:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    9c1a:	68bb      	ldr	r3, [r7, #8]
    9c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9c1e:	68bb      	ldr	r3, [r7, #8]
    9c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9c22:	429a      	cmp	r2, r3
    9c24:	d02c      	beq.n	9c80 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    9c26:	68bb      	ldr	r3, [r7, #8]
    9c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    9c2a:	2b00      	cmp	r3, #0
    9c2c:	d128      	bne.n	9c80 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9c2e:	68bb      	ldr	r3, [r7, #8]
    9c30:	3304      	adds	r3, #4
    9c32:	0018      	movs	r0, r3
    9c34:	4b16      	ldr	r3, [pc, #88]	; (9c90 <xTaskPriorityDisinherit+0xb0>)
    9c36:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    9c38:	68bb      	ldr	r3, [r7, #8]
    9c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    9c3c:	68bb      	ldr	r3, [r7, #8]
    9c3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    9c40:	68bb      	ldr	r3, [r7, #8]
    9c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9c44:	2205      	movs	r2, #5
    9c46:	1ad2      	subs	r2, r2, r3
    9c48:	68bb      	ldr	r3, [r7, #8]
    9c4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    9c4c:	68bb      	ldr	r3, [r7, #8]
    9c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9c50:	4b10      	ldr	r3, [pc, #64]	; (9c94 <xTaskPriorityDisinherit+0xb4>)
    9c52:	681b      	ldr	r3, [r3, #0]
    9c54:	429a      	cmp	r2, r3
    9c56:	d903      	bls.n	9c60 <xTaskPriorityDisinherit+0x80>
    9c58:	68bb      	ldr	r3, [r7, #8]
    9c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9c5c:	4b0d      	ldr	r3, [pc, #52]	; (9c94 <xTaskPriorityDisinherit+0xb4>)
    9c5e:	601a      	str	r2, [r3, #0]
    9c60:	68bb      	ldr	r3, [r7, #8]
    9c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9c64:	0013      	movs	r3, r2
    9c66:	009b      	lsls	r3, r3, #2
    9c68:	189b      	adds	r3, r3, r2
    9c6a:	009b      	lsls	r3, r3, #2
    9c6c:	4a0a      	ldr	r2, [pc, #40]	; (9c98 <xTaskPriorityDisinherit+0xb8>)
    9c6e:	189a      	adds	r2, r3, r2
    9c70:	68bb      	ldr	r3, [r7, #8]
    9c72:	3304      	adds	r3, #4
    9c74:	0019      	movs	r1, r3
    9c76:	0010      	movs	r0, r2
    9c78:	4b08      	ldr	r3, [pc, #32]	; (9c9c <xTaskPriorityDisinherit+0xbc>)
    9c7a:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    9c7c:	2301      	movs	r3, #1
    9c7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    9c80:	68fb      	ldr	r3, [r7, #12]
	}
    9c82:	0018      	movs	r0, r3
    9c84:	46bd      	mov	sp, r7
    9c86:	b004      	add	sp, #16
    9c88:	bd80      	pop	{r7, pc}
    9c8a:	46c0      	nop			; (mov r8, r8)
    9c8c:	20003bcc 	.word	0x20003bcc
    9c90:	0000807d 	.word	0x0000807d
    9c94:	20003cac 	.word	0x20003cac
    9c98:	20003bd0 	.word	0x20003bd0
    9c9c:	00007fcd 	.word	0x00007fcd

00009ca0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    9ca0:	b580      	push	{r7, lr}
    9ca2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    9ca4:	4b06      	ldr	r3, [pc, #24]	; (9cc0 <pvTaskIncrementMutexHeldCount+0x20>)
    9ca6:	681b      	ldr	r3, [r3, #0]
    9ca8:	2b00      	cmp	r3, #0
    9caa:	d004      	beq.n	9cb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    9cac:	4b04      	ldr	r3, [pc, #16]	; (9cc0 <pvTaskIncrementMutexHeldCount+0x20>)
    9cae:	681b      	ldr	r3, [r3, #0]
    9cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    9cb2:	3201      	adds	r2, #1
    9cb4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    9cb6:	4b02      	ldr	r3, [pc, #8]	; (9cc0 <pvTaskIncrementMutexHeldCount+0x20>)
    9cb8:	681b      	ldr	r3, [r3, #0]
	}
    9cba:	0018      	movs	r0, r3
    9cbc:	46bd      	mov	sp, r7
    9cbe:	bd80      	pop	{r7, pc}
    9cc0:	20003bcc 	.word	0x20003bcc

00009cc4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    9cc4:	b580      	push	{r7, lr}
    9cc6:	b084      	sub	sp, #16
    9cc8:	af00      	add	r7, sp, #0
    9cca:	6078      	str	r0, [r7, #4]
    9ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    9cce:	4b21      	ldr	r3, [pc, #132]	; (9d54 <prvAddCurrentTaskToDelayedList+0x90>)
    9cd0:	681b      	ldr	r3, [r3, #0]
    9cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    9cd4:	4b20      	ldr	r3, [pc, #128]	; (9d58 <prvAddCurrentTaskToDelayedList+0x94>)
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	3304      	adds	r3, #4
    9cda:	0018      	movs	r0, r3
    9cdc:	4b1f      	ldr	r3, [pc, #124]	; (9d5c <prvAddCurrentTaskToDelayedList+0x98>)
    9cde:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	3301      	adds	r3, #1
    9ce4:	d10b      	bne.n	9cfe <prvAddCurrentTaskToDelayedList+0x3a>
    9ce6:	683b      	ldr	r3, [r7, #0]
    9ce8:	2b00      	cmp	r3, #0
    9cea:	d008      	beq.n	9cfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9cec:	4b1a      	ldr	r3, [pc, #104]	; (9d58 <prvAddCurrentTaskToDelayedList+0x94>)
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	1d1a      	adds	r2, r3, #4
    9cf2:	4b1b      	ldr	r3, [pc, #108]	; (9d60 <prvAddCurrentTaskToDelayedList+0x9c>)
    9cf4:	0011      	movs	r1, r2
    9cf6:	0018      	movs	r0, r3
    9cf8:	4b1a      	ldr	r3, [pc, #104]	; (9d64 <prvAddCurrentTaskToDelayedList+0xa0>)
    9cfa:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9cfc:	e026      	b.n	9d4c <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    9cfe:	68fa      	ldr	r2, [r7, #12]
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	18d3      	adds	r3, r2, r3
    9d04:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    9d06:	4b14      	ldr	r3, [pc, #80]	; (9d58 <prvAddCurrentTaskToDelayedList+0x94>)
    9d08:	681b      	ldr	r3, [r3, #0]
    9d0a:	68ba      	ldr	r2, [r7, #8]
    9d0c:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    9d0e:	68ba      	ldr	r2, [r7, #8]
    9d10:	68fb      	ldr	r3, [r7, #12]
    9d12:	429a      	cmp	r2, r3
    9d14:	d209      	bcs.n	9d2a <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9d16:	4b14      	ldr	r3, [pc, #80]	; (9d68 <prvAddCurrentTaskToDelayedList+0xa4>)
    9d18:	681a      	ldr	r2, [r3, #0]
    9d1a:	4b0f      	ldr	r3, [pc, #60]	; (9d58 <prvAddCurrentTaskToDelayedList+0x94>)
    9d1c:	681b      	ldr	r3, [r3, #0]
    9d1e:	3304      	adds	r3, #4
    9d20:	0019      	movs	r1, r3
    9d22:	0010      	movs	r0, r2
    9d24:	4b11      	ldr	r3, [pc, #68]	; (9d6c <prvAddCurrentTaskToDelayedList+0xa8>)
    9d26:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9d28:	e010      	b.n	9d4c <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    9d2a:	4b11      	ldr	r3, [pc, #68]	; (9d70 <prvAddCurrentTaskToDelayedList+0xac>)
    9d2c:	681a      	ldr	r2, [r3, #0]
    9d2e:	4b0a      	ldr	r3, [pc, #40]	; (9d58 <prvAddCurrentTaskToDelayedList+0x94>)
    9d30:	681b      	ldr	r3, [r3, #0]
    9d32:	3304      	adds	r3, #4
    9d34:	0019      	movs	r1, r3
    9d36:	0010      	movs	r0, r2
    9d38:	4b0c      	ldr	r3, [pc, #48]	; (9d6c <prvAddCurrentTaskToDelayedList+0xa8>)
    9d3a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    9d3c:	4b0d      	ldr	r3, [pc, #52]	; (9d74 <prvAddCurrentTaskToDelayedList+0xb0>)
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	68ba      	ldr	r2, [r7, #8]
    9d42:	429a      	cmp	r2, r3
    9d44:	d202      	bcs.n	9d4c <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    9d46:	4b0b      	ldr	r3, [pc, #44]	; (9d74 <prvAddCurrentTaskToDelayedList+0xb0>)
    9d48:	68ba      	ldr	r2, [r7, #8]
    9d4a:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    9d4c:	46c0      	nop			; (mov r8, r8)
    9d4e:	46bd      	mov	sp, r7
    9d50:	b004      	add	sp, #16
    9d52:	bd80      	pop	{r7, pc}
    9d54:	20003ca8 	.word	0x20003ca8
    9d58:	20003bcc 	.word	0x20003bcc
    9d5c:	0000807d 	.word	0x0000807d
    9d60:	20003c90 	.word	0x20003c90
    9d64:	00007fcd 	.word	0x00007fcd
    9d68:	20003c60 	.word	0x20003c60
    9d6c:	00008011 	.word	0x00008011
    9d70:	20003c5c 	.word	0x20003c5c
    9d74:	20003cc4 	.word	0x20003cc4

00009d78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    9d78:	b590      	push	{r4, r7, lr}
    9d7a:	b085      	sub	sp, #20
    9d7c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    9d7e:	2300      	movs	r3, #0
    9d80:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    9d82:	4b0e      	ldr	r3, [pc, #56]	; (9dbc <xTimerCreateTimerTask+0x44>)
    9d84:	4798      	blx	r3

	if( xTimerQueue != NULL )
    9d86:	4b0e      	ldr	r3, [pc, #56]	; (9dc0 <xTimerCreateTimerTask+0x48>)
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d00b      	beq.n	9da6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    9d8e:	490d      	ldr	r1, [pc, #52]	; (9dc4 <xTimerCreateTimerTask+0x4c>)
    9d90:	480d      	ldr	r0, [pc, #52]	; (9dc8 <xTimerCreateTimerTask+0x50>)
    9d92:	4b0e      	ldr	r3, [pc, #56]	; (9dcc <xTimerCreateTimerTask+0x54>)
    9d94:	9301      	str	r3, [sp, #4]
    9d96:	2302      	movs	r3, #2
    9d98:	9300      	str	r3, [sp, #0]
    9d9a:	2300      	movs	r3, #0
    9d9c:	2250      	movs	r2, #80	; 0x50
    9d9e:	4c0c      	ldr	r4, [pc, #48]	; (9dd0 <xTimerCreateTimerTask+0x58>)
    9da0:	47a0      	blx	r4
    9da2:	0003      	movs	r3, r0
    9da4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    9da6:	687b      	ldr	r3, [r7, #4]
    9da8:	2b00      	cmp	r3, #0
    9daa:	d101      	bne.n	9db0 <xTimerCreateTimerTask+0x38>
    9dac:	b672      	cpsid	i
    9dae:	e7fe      	b.n	9dae <xTimerCreateTimerTask+0x36>
	return xReturn;
    9db0:	687b      	ldr	r3, [r7, #4]
}
    9db2:	0018      	movs	r0, r3
    9db4:	46bd      	mov	sp, r7
    9db6:	b003      	add	sp, #12
    9db8:	bd90      	pop	{r4, r7, pc}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	0000a2b9 	.word	0x0000a2b9
    9dc0:	20003d00 	.word	0x20003d00
    9dc4:	0000e528 	.word	0x0000e528
    9dc8:	00009ef9 	.word	0x00009ef9
    9dcc:	20003d04 	.word	0x20003d04
    9dd0:	00008fa9 	.word	0x00008fa9

00009dd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    9dd4:	b590      	push	{r4, r7, lr}
    9dd6:	b089      	sub	sp, #36	; 0x24
    9dd8:	af00      	add	r7, sp, #0
    9dda:	60f8      	str	r0, [r7, #12]
    9ddc:	60b9      	str	r1, [r7, #8]
    9dde:	607a      	str	r2, [r7, #4]
    9de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    9de2:	2300      	movs	r3, #0
    9de4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    9de6:	68fb      	ldr	r3, [r7, #12]
    9de8:	2b00      	cmp	r3, #0
    9dea:	d101      	bne.n	9df0 <xTimerGenericCommand+0x1c>
    9dec:	b672      	cpsid	i
    9dee:	e7fe      	b.n	9dee <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    9df0:	4b1e      	ldr	r3, [pc, #120]	; (9e6c <xTimerGenericCommand+0x98>)
    9df2:	681b      	ldr	r3, [r3, #0]
    9df4:	2b00      	cmp	r3, #0
    9df6:	d033      	beq.n	9e60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    9df8:	2310      	movs	r3, #16
    9dfa:	18fb      	adds	r3, r7, r3
    9dfc:	68ba      	ldr	r2, [r7, #8]
    9dfe:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    9e00:	2310      	movs	r3, #16
    9e02:	18fb      	adds	r3, r7, r3
    9e04:	687a      	ldr	r2, [r7, #4]
    9e06:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    9e08:	2310      	movs	r3, #16
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	68fa      	ldr	r2, [r7, #12]
    9e0e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    9e10:	68bb      	ldr	r3, [r7, #8]
    9e12:	2b05      	cmp	r3, #5
    9e14:	dc1a      	bgt.n	9e4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    9e16:	4b16      	ldr	r3, [pc, #88]	; (9e70 <xTimerGenericCommand+0x9c>)
    9e18:	4798      	blx	r3
    9e1a:	1e03      	subs	r3, r0, #0
    9e1c:	2b02      	cmp	r3, #2
    9e1e:	d10a      	bne.n	9e36 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    9e20:	4b12      	ldr	r3, [pc, #72]	; (9e6c <xTimerGenericCommand+0x98>)
    9e22:	6818      	ldr	r0, [r3, #0]
    9e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9e26:	2310      	movs	r3, #16
    9e28:	18f9      	adds	r1, r7, r3
    9e2a:	2300      	movs	r3, #0
    9e2c:	4c11      	ldr	r4, [pc, #68]	; (9e74 <xTimerGenericCommand+0xa0>)
    9e2e:	47a0      	blx	r4
    9e30:	0003      	movs	r3, r0
    9e32:	61fb      	str	r3, [r7, #28]
    9e34:	e014      	b.n	9e60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    9e36:	4b0d      	ldr	r3, [pc, #52]	; (9e6c <xTimerGenericCommand+0x98>)
    9e38:	6818      	ldr	r0, [r3, #0]
    9e3a:	2310      	movs	r3, #16
    9e3c:	18f9      	adds	r1, r7, r3
    9e3e:	2300      	movs	r3, #0
    9e40:	2200      	movs	r2, #0
    9e42:	4c0c      	ldr	r4, [pc, #48]	; (9e74 <xTimerGenericCommand+0xa0>)
    9e44:	47a0      	blx	r4
    9e46:	0003      	movs	r3, r0
    9e48:	61fb      	str	r3, [r7, #28]
    9e4a:	e009      	b.n	9e60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    9e4c:	4b07      	ldr	r3, [pc, #28]	; (9e6c <xTimerGenericCommand+0x98>)
    9e4e:	6818      	ldr	r0, [r3, #0]
    9e50:	683a      	ldr	r2, [r7, #0]
    9e52:	2310      	movs	r3, #16
    9e54:	18f9      	adds	r1, r7, r3
    9e56:	2300      	movs	r3, #0
    9e58:	4c07      	ldr	r4, [pc, #28]	; (9e78 <xTimerGenericCommand+0xa4>)
    9e5a:	47a0      	blx	r4
    9e5c:	0003      	movs	r3, r0
    9e5e:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    9e60:	69fb      	ldr	r3, [r7, #28]
}
    9e62:	0018      	movs	r0, r3
    9e64:	46bd      	mov	sp, r7
    9e66:	b009      	add	sp, #36	; 0x24
    9e68:	bd90      	pop	{r4, r7, pc}
    9e6a:	46c0      	nop			; (mov r8, r8)
    9e6c:	20003d00 	.word	0x20003d00
    9e70:	00009ae5 	.word	0x00009ae5
    9e74:	000085ad 	.word	0x000085ad
    9e78:	0000878d 	.word	0x0000878d

00009e7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    9e7c:	b590      	push	{r4, r7, lr}
    9e7e:	b087      	sub	sp, #28
    9e80:	af02      	add	r7, sp, #8
    9e82:	6078      	str	r0, [r7, #4]
    9e84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    9e86:	4b18      	ldr	r3, [pc, #96]	; (9ee8 <prvProcessExpiredTimer+0x6c>)
    9e88:	681b      	ldr	r3, [r3, #0]
    9e8a:	68db      	ldr	r3, [r3, #12]
    9e8c:	68db      	ldr	r3, [r3, #12]
    9e8e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    9e90:	68fb      	ldr	r3, [r7, #12]
    9e92:	3304      	adds	r3, #4
    9e94:	0018      	movs	r0, r3
    9e96:	4b15      	ldr	r3, [pc, #84]	; (9eec <prvProcessExpiredTimer+0x70>)
    9e98:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    9e9a:	68fb      	ldr	r3, [r7, #12]
    9e9c:	69db      	ldr	r3, [r3, #28]
    9e9e:	2b01      	cmp	r3, #1
    9ea0:	d119      	bne.n	9ed6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    9ea2:	68fb      	ldr	r3, [r7, #12]
    9ea4:	699a      	ldr	r2, [r3, #24]
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	18d1      	adds	r1, r2, r3
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	683a      	ldr	r2, [r7, #0]
    9eae:	68f8      	ldr	r0, [r7, #12]
    9eb0:	4c0f      	ldr	r4, [pc, #60]	; (9ef0 <prvProcessExpiredTimer+0x74>)
    9eb2:	47a0      	blx	r4
    9eb4:	1e03      	subs	r3, r0, #0
    9eb6:	d00e      	beq.n	9ed6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    9eb8:	687a      	ldr	r2, [r7, #4]
    9eba:	68f8      	ldr	r0, [r7, #12]
    9ebc:	2300      	movs	r3, #0
    9ebe:	9300      	str	r3, [sp, #0]
    9ec0:	2300      	movs	r3, #0
    9ec2:	2100      	movs	r1, #0
    9ec4:	4c0b      	ldr	r4, [pc, #44]	; (9ef4 <prvProcessExpiredTimer+0x78>)
    9ec6:	47a0      	blx	r4
    9ec8:	0003      	movs	r3, r0
    9eca:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    9ecc:	68bb      	ldr	r3, [r7, #8]
    9ece:	2b00      	cmp	r3, #0
    9ed0:	d101      	bne.n	9ed6 <prvProcessExpiredTimer+0x5a>
    9ed2:	b672      	cpsid	i
    9ed4:	e7fe      	b.n	9ed4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    9ed6:	68fb      	ldr	r3, [r7, #12]
    9ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9eda:	68fa      	ldr	r2, [r7, #12]
    9edc:	0010      	movs	r0, r2
    9ede:	4798      	blx	r3
}
    9ee0:	46c0      	nop			; (mov r8, r8)
    9ee2:	46bd      	mov	sp, r7
    9ee4:	b005      	add	sp, #20
    9ee6:	bd90      	pop	{r4, r7, pc}
    9ee8:	20003cf8 	.word	0x20003cf8
    9eec:	0000807d 	.word	0x0000807d
    9ef0:	0000a059 	.word	0x0000a059
    9ef4:	00009dd5 	.word	0x00009dd5

00009ef8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    9ef8:	b580      	push	{r7, lr}
    9efa:	b084      	sub	sp, #16
    9efc:	af00      	add	r7, sp, #0
    9efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    9f00:	2308      	movs	r3, #8
    9f02:	18fb      	adds	r3, r7, r3
    9f04:	0018      	movs	r0, r3
    9f06:	4b06      	ldr	r3, [pc, #24]	; (9f20 <prvTimerTask+0x28>)
    9f08:	4798      	blx	r3
    9f0a:	0003      	movs	r3, r0
    9f0c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    9f0e:	68ba      	ldr	r2, [r7, #8]
    9f10:	68fb      	ldr	r3, [r7, #12]
    9f12:	0011      	movs	r1, r2
    9f14:	0018      	movs	r0, r3
    9f16:	4b03      	ldr	r3, [pc, #12]	; (9f24 <prvTimerTask+0x2c>)
    9f18:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    9f1a:	4b03      	ldr	r3, [pc, #12]	; (9f28 <prvTimerTask+0x30>)
    9f1c:	4798      	blx	r3
	}
    9f1e:	e7ef      	b.n	9f00 <prvTimerTask+0x8>
    9f20:	00009fd1 	.word	0x00009fd1
    9f24:	00009f2d 	.word	0x00009f2d
    9f28:	0000a0e1 	.word	0x0000a0e1

00009f2c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    9f2c:	b580      	push	{r7, lr}
    9f2e:	b084      	sub	sp, #16
    9f30:	af00      	add	r7, sp, #0
    9f32:	6078      	str	r0, [r7, #4]
    9f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    9f36:	4b1e      	ldr	r3, [pc, #120]	; (9fb0 <prvProcessTimerOrBlockTask+0x84>)
    9f38:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    9f3a:	2308      	movs	r3, #8
    9f3c:	18fb      	adds	r3, r7, r3
    9f3e:	0018      	movs	r0, r3
    9f40:	4b1c      	ldr	r3, [pc, #112]	; (9fb4 <prvProcessTimerOrBlockTask+0x88>)
    9f42:	4798      	blx	r3
    9f44:	0003      	movs	r3, r0
    9f46:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    9f48:	68bb      	ldr	r3, [r7, #8]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d129      	bne.n	9fa2 <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    9f4e:	683b      	ldr	r3, [r7, #0]
    9f50:	2b00      	cmp	r3, #0
    9f52:	d10c      	bne.n	9f6e <prvProcessTimerOrBlockTask+0x42>
    9f54:	687a      	ldr	r2, [r7, #4]
    9f56:	68fb      	ldr	r3, [r7, #12]
    9f58:	429a      	cmp	r2, r3
    9f5a:	d808      	bhi.n	9f6e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    9f5c:	4b16      	ldr	r3, [pc, #88]	; (9fb8 <prvProcessTimerOrBlockTask+0x8c>)
    9f5e:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    9f60:	68fa      	ldr	r2, [r7, #12]
    9f62:	687b      	ldr	r3, [r7, #4]
    9f64:	0011      	movs	r1, r2
    9f66:	0018      	movs	r0, r3
    9f68:	4b14      	ldr	r3, [pc, #80]	; (9fbc <prvProcessTimerOrBlockTask+0x90>)
    9f6a:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    9f6c:	e01b      	b.n	9fa6 <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    9f6e:	683b      	ldr	r3, [r7, #0]
    9f70:	2b00      	cmp	r3, #0
    9f72:	d006      	beq.n	9f82 <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    9f74:	4b12      	ldr	r3, [pc, #72]	; (9fc0 <prvProcessTimerOrBlockTask+0x94>)
    9f76:	681b      	ldr	r3, [r3, #0]
    9f78:	681b      	ldr	r3, [r3, #0]
    9f7a:	425a      	negs	r2, r3
    9f7c:	4153      	adcs	r3, r2
    9f7e:	b2db      	uxtb	r3, r3
    9f80:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    9f82:	4b10      	ldr	r3, [pc, #64]	; (9fc4 <prvProcessTimerOrBlockTask+0x98>)
    9f84:	6818      	ldr	r0, [r3, #0]
    9f86:	687a      	ldr	r2, [r7, #4]
    9f88:	68fb      	ldr	r3, [r7, #12]
    9f8a:	1ad3      	subs	r3, r2, r3
    9f8c:	683a      	ldr	r2, [r7, #0]
    9f8e:	0019      	movs	r1, r3
    9f90:	4b0d      	ldr	r3, [pc, #52]	; (9fc8 <prvProcessTimerOrBlockTask+0x9c>)
    9f92:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    9f94:	4b08      	ldr	r3, [pc, #32]	; (9fb8 <prvProcessTimerOrBlockTask+0x8c>)
    9f96:	4798      	blx	r3
    9f98:	1e03      	subs	r3, r0, #0
    9f9a:	d104      	bne.n	9fa6 <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    9f9c:	4b0b      	ldr	r3, [pc, #44]	; (9fcc <prvProcessTimerOrBlockTask+0xa0>)
    9f9e:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    9fa0:	e001      	b.n	9fa6 <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    9fa2:	4b05      	ldr	r3, [pc, #20]	; (9fb8 <prvProcessTimerOrBlockTask+0x8c>)
    9fa4:	4798      	blx	r3
		}
	}
}
    9fa6:	46c0      	nop			; (mov r8, r8)
    9fa8:	46bd      	mov	sp, r7
    9faa:	b004      	add	sp, #16
    9fac:	bd80      	pop	{r7, pc}
    9fae:	46c0      	nop			; (mov r8, r8)
    9fb0:	00009371 	.word	0x00009371
    9fb4:	0000a011 	.word	0x0000a011
    9fb8:	00009389 	.word	0x00009389
    9fbc:	00009e7d 	.word	0x00009e7d
    9fc0:	20003cfc 	.word	0x20003cfc
    9fc4:	20003d00 	.word	0x20003d00
    9fc8:	00008e8d 	.word	0x00008e8d
    9fcc:	000081d9 	.word	0x000081d9

00009fd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    9fd0:	b580      	push	{r7, lr}
    9fd2:	b084      	sub	sp, #16
    9fd4:	af00      	add	r7, sp, #0
    9fd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    9fd8:	4b0c      	ldr	r3, [pc, #48]	; (a00c <prvGetNextExpireTime+0x3c>)
    9fda:	681b      	ldr	r3, [r3, #0]
    9fdc:	681b      	ldr	r3, [r3, #0]
    9fde:	425a      	negs	r2, r3
    9fe0:	4153      	adcs	r3, r2
    9fe2:	b2db      	uxtb	r3, r3
    9fe4:	001a      	movs	r2, r3
    9fe6:	687b      	ldr	r3, [r7, #4]
    9fe8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    9fea:	687b      	ldr	r3, [r7, #4]
    9fec:	681b      	ldr	r3, [r3, #0]
    9fee:	2b00      	cmp	r3, #0
    9ff0:	d105      	bne.n	9ffe <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    9ff2:	4b06      	ldr	r3, [pc, #24]	; (a00c <prvGetNextExpireTime+0x3c>)
    9ff4:	681b      	ldr	r3, [r3, #0]
    9ff6:	68db      	ldr	r3, [r3, #12]
    9ff8:	681b      	ldr	r3, [r3, #0]
    9ffa:	60fb      	str	r3, [r7, #12]
    9ffc:	e001      	b.n	a002 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    9ffe:	2300      	movs	r3, #0
    a000:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    a002:	68fb      	ldr	r3, [r7, #12]
}
    a004:	0018      	movs	r0, r3
    a006:	46bd      	mov	sp, r7
    a008:	b004      	add	sp, #16
    a00a:	bd80      	pop	{r7, pc}
    a00c:	20003cf8 	.word	0x20003cf8

0000a010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    a010:	b580      	push	{r7, lr}
    a012:	b084      	sub	sp, #16
    a014:	af00      	add	r7, sp, #0
    a016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    a018:	4b0c      	ldr	r3, [pc, #48]	; (a04c <prvSampleTimeNow+0x3c>)
    a01a:	4798      	blx	r3
    a01c:	0003      	movs	r3, r0
    a01e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    a020:	4b0b      	ldr	r3, [pc, #44]	; (a050 <prvSampleTimeNow+0x40>)
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	68fa      	ldr	r2, [r7, #12]
    a026:	429a      	cmp	r2, r3
    a028:	d205      	bcs.n	a036 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    a02a:	4b0a      	ldr	r3, [pc, #40]	; (a054 <prvSampleTimeNow+0x44>)
    a02c:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    a02e:	687b      	ldr	r3, [r7, #4]
    a030:	2201      	movs	r2, #1
    a032:	601a      	str	r2, [r3, #0]
    a034:	e002      	b.n	a03c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    a036:	687b      	ldr	r3, [r7, #4]
    a038:	2200      	movs	r2, #0
    a03a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    a03c:	4b04      	ldr	r3, [pc, #16]	; (a050 <prvSampleTimeNow+0x40>)
    a03e:	68fa      	ldr	r2, [r7, #12]
    a040:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    a042:	68fb      	ldr	r3, [r7, #12]
}
    a044:	0018      	movs	r0, r3
    a046:	46bd      	mov	sp, r7
    a048:	b004      	add	sp, #16
    a04a:	bd80      	pop	{r7, pc}
    a04c:	000094bd 	.word	0x000094bd
    a050:	20003d08 	.word	0x20003d08
    a054:	0000a1f9 	.word	0x0000a1f9

0000a058 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    a058:	b580      	push	{r7, lr}
    a05a:	b086      	sub	sp, #24
    a05c:	af00      	add	r7, sp, #0
    a05e:	60f8      	str	r0, [r7, #12]
    a060:	60b9      	str	r1, [r7, #8]
    a062:	607a      	str	r2, [r7, #4]
    a064:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    a066:	2300      	movs	r3, #0
    a068:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    a06a:	68fb      	ldr	r3, [r7, #12]
    a06c:	68ba      	ldr	r2, [r7, #8]
    a06e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a070:	68fb      	ldr	r3, [r7, #12]
    a072:	68fa      	ldr	r2, [r7, #12]
    a074:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    a076:	68ba      	ldr	r2, [r7, #8]
    a078:	687b      	ldr	r3, [r7, #4]
    a07a:	429a      	cmp	r2, r3
    a07c:	d812      	bhi.n	a0a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a07e:	687a      	ldr	r2, [r7, #4]
    a080:	683b      	ldr	r3, [r7, #0]
    a082:	1ad2      	subs	r2, r2, r3
    a084:	68fb      	ldr	r3, [r7, #12]
    a086:	699b      	ldr	r3, [r3, #24]
    a088:	429a      	cmp	r2, r3
    a08a:	d302      	bcc.n	a092 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    a08c:	2301      	movs	r3, #1
    a08e:	617b      	str	r3, [r7, #20]
    a090:	e01b      	b.n	a0ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    a092:	4b10      	ldr	r3, [pc, #64]	; (a0d4 <prvInsertTimerInActiveList+0x7c>)
    a094:	681a      	ldr	r2, [r3, #0]
    a096:	68fb      	ldr	r3, [r7, #12]
    a098:	3304      	adds	r3, #4
    a09a:	0019      	movs	r1, r3
    a09c:	0010      	movs	r0, r2
    a09e:	4b0e      	ldr	r3, [pc, #56]	; (a0d8 <prvInsertTimerInActiveList+0x80>)
    a0a0:	4798      	blx	r3
    a0a2:	e012      	b.n	a0ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    a0a4:	687a      	ldr	r2, [r7, #4]
    a0a6:	683b      	ldr	r3, [r7, #0]
    a0a8:	429a      	cmp	r2, r3
    a0aa:	d206      	bcs.n	a0ba <prvInsertTimerInActiveList+0x62>
    a0ac:	68ba      	ldr	r2, [r7, #8]
    a0ae:	683b      	ldr	r3, [r7, #0]
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d302      	bcc.n	a0ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    a0b4:	2301      	movs	r3, #1
    a0b6:	617b      	str	r3, [r7, #20]
    a0b8:	e007      	b.n	a0ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a0ba:	4b08      	ldr	r3, [pc, #32]	; (a0dc <prvInsertTimerInActiveList+0x84>)
    a0bc:	681a      	ldr	r2, [r3, #0]
    a0be:	68fb      	ldr	r3, [r7, #12]
    a0c0:	3304      	adds	r3, #4
    a0c2:	0019      	movs	r1, r3
    a0c4:	0010      	movs	r0, r2
    a0c6:	4b04      	ldr	r3, [pc, #16]	; (a0d8 <prvInsertTimerInActiveList+0x80>)
    a0c8:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    a0ca:	697b      	ldr	r3, [r7, #20]
}
    a0cc:	0018      	movs	r0, r3
    a0ce:	46bd      	mov	sp, r7
    a0d0:	b006      	add	sp, #24
    a0d2:	bd80      	pop	{r7, pc}
    a0d4:	20003cfc 	.word	0x20003cfc
    a0d8:	00008011 	.word	0x00008011
    a0dc:	20003cf8 	.word	0x20003cf8

0000a0e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    a0e0:	b590      	push	{r4, r7, lr}
    a0e2:	b08b      	sub	sp, #44	; 0x2c
    a0e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a0e6:	e068      	b.n	a1ba <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    a0e8:	2308      	movs	r3, #8
    a0ea:	18fb      	adds	r3, r7, r3
    a0ec:	681b      	ldr	r3, [r3, #0]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	db63      	blt.n	a1ba <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    a0f2:	2308      	movs	r3, #8
    a0f4:	18fb      	adds	r3, r7, r3
    a0f6:	689b      	ldr	r3, [r3, #8]
    a0f8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    a0fa:	69fb      	ldr	r3, [r7, #28]
    a0fc:	695b      	ldr	r3, [r3, #20]
    a0fe:	2b00      	cmp	r3, #0
    a100:	d004      	beq.n	a10c <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a102:	69fb      	ldr	r3, [r7, #28]
    a104:	3304      	adds	r3, #4
    a106:	0018      	movs	r0, r3
    a108:	4b33      	ldr	r3, [pc, #204]	; (a1d8 <prvProcessReceivedCommands+0xf8>)
    a10a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    a10c:	1d3b      	adds	r3, r7, #4
    a10e:	0018      	movs	r0, r3
    a110:	4b32      	ldr	r3, [pc, #200]	; (a1dc <prvProcessReceivedCommands+0xfc>)
    a112:	4798      	blx	r3
    a114:	0003      	movs	r3, r0
    a116:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    a118:	2308      	movs	r3, #8
    a11a:	18fb      	adds	r3, r7, r3
    a11c:	681b      	ldr	r3, [r3, #0]
    a11e:	2b09      	cmp	r3, #9
    a120:	d84a      	bhi.n	a1b8 <prvProcessReceivedCommands+0xd8>
    a122:	009a      	lsls	r2, r3, #2
    a124:	4b2e      	ldr	r3, [pc, #184]	; (a1e0 <prvProcessReceivedCommands+0x100>)
    a126:	18d3      	adds	r3, r2, r3
    a128:	681b      	ldr	r3, [r3, #0]
    a12a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    a12c:	2308      	movs	r3, #8
    a12e:	18fb      	adds	r3, r7, r3
    a130:	685a      	ldr	r2, [r3, #4]
    a132:	69fb      	ldr	r3, [r7, #28]
    a134:	699b      	ldr	r3, [r3, #24]
    a136:	18d1      	adds	r1, r2, r3
    a138:	2308      	movs	r3, #8
    a13a:	18fb      	adds	r3, r7, r3
    a13c:	685b      	ldr	r3, [r3, #4]
    a13e:	69ba      	ldr	r2, [r7, #24]
    a140:	69f8      	ldr	r0, [r7, #28]
    a142:	4c28      	ldr	r4, [pc, #160]	; (a1e4 <prvProcessReceivedCommands+0x104>)
    a144:	47a0      	blx	r4
    a146:	1e03      	subs	r3, r0, #0
    a148:	d037      	beq.n	a1ba <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a14a:	69fb      	ldr	r3, [r7, #28]
    a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a14e:	69fa      	ldr	r2, [r7, #28]
    a150:	0010      	movs	r0, r2
    a152:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    a154:	69fb      	ldr	r3, [r7, #28]
    a156:	69db      	ldr	r3, [r3, #28]
    a158:	2b01      	cmp	r3, #1
    a15a:	d12e      	bne.n	a1ba <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    a15c:	2308      	movs	r3, #8
    a15e:	18fb      	adds	r3, r7, r3
    a160:	685a      	ldr	r2, [r3, #4]
    a162:	69fb      	ldr	r3, [r7, #28]
    a164:	699b      	ldr	r3, [r3, #24]
    a166:	18d2      	adds	r2, r2, r3
    a168:	69f8      	ldr	r0, [r7, #28]
    a16a:	2300      	movs	r3, #0
    a16c:	9300      	str	r3, [sp, #0]
    a16e:	2300      	movs	r3, #0
    a170:	2100      	movs	r1, #0
    a172:	4c1d      	ldr	r4, [pc, #116]	; (a1e8 <prvProcessReceivedCommands+0x108>)
    a174:	47a0      	blx	r4
    a176:	0003      	movs	r3, r0
    a178:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    a17a:	697b      	ldr	r3, [r7, #20]
    a17c:	2b00      	cmp	r3, #0
    a17e:	d11c      	bne.n	a1ba <prvProcessReceivedCommands+0xda>
    a180:	b672      	cpsid	i
    a182:	e7fe      	b.n	a182 <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    a184:	2308      	movs	r3, #8
    a186:	18fb      	adds	r3, r7, r3
    a188:	685a      	ldr	r2, [r3, #4]
    a18a:	69fb      	ldr	r3, [r7, #28]
    a18c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    a18e:	69fb      	ldr	r3, [r7, #28]
    a190:	699b      	ldr	r3, [r3, #24]
    a192:	2b00      	cmp	r3, #0
    a194:	d101      	bne.n	a19a <prvProcessReceivedCommands+0xba>
    a196:	b672      	cpsid	i
    a198:	e7fe      	b.n	a198 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    a19a:	69fb      	ldr	r3, [r7, #28]
    a19c:	699a      	ldr	r2, [r3, #24]
    a19e:	69bb      	ldr	r3, [r7, #24]
    a1a0:	18d1      	adds	r1, r2, r3
    a1a2:	69bb      	ldr	r3, [r7, #24]
    a1a4:	69ba      	ldr	r2, [r7, #24]
    a1a6:	69f8      	ldr	r0, [r7, #28]
    a1a8:	4c0e      	ldr	r4, [pc, #56]	; (a1e4 <prvProcessReceivedCommands+0x104>)
    a1aa:	47a0      	blx	r4
					break;
    a1ac:	e005      	b.n	a1ba <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    a1ae:	69fb      	ldr	r3, [r7, #28]
    a1b0:	0018      	movs	r0, r3
    a1b2:	4b0e      	ldr	r3, [pc, #56]	; (a1ec <prvProcessReceivedCommands+0x10c>)
    a1b4:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    a1b6:	e000      	b.n	a1ba <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    a1b8:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    a1ba:	4b0d      	ldr	r3, [pc, #52]	; (a1f0 <prvProcessReceivedCommands+0x110>)
    a1bc:	6818      	ldr	r0, [r3, #0]
    a1be:	2308      	movs	r3, #8
    a1c0:	18f9      	adds	r1, r7, r3
    a1c2:	2300      	movs	r3, #0
    a1c4:	2200      	movs	r2, #0
    a1c6:	4c0b      	ldr	r4, [pc, #44]	; (a1f4 <prvProcessReceivedCommands+0x114>)
    a1c8:	47a0      	blx	r4
    a1ca:	1e03      	subs	r3, r0, #0
    a1cc:	d18c      	bne.n	a0e8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    a1ce:	46c0      	nop			; (mov r8, r8)
    a1d0:	46bd      	mov	sp, r7
    a1d2:	b009      	add	sp, #36	; 0x24
    a1d4:	bd90      	pop	{r4, r7, pc}
    a1d6:	46c0      	nop			; (mov r8, r8)
    a1d8:	0000807d 	.word	0x0000807d
    a1dc:	0000a011 	.word	0x0000a011
    a1e0:	0000e538 	.word	0x0000e538
    a1e4:	0000a059 	.word	0x0000a059
    a1e8:	00009dd5 	.word	0x00009dd5
    a1ec:	000083a1 	.word	0x000083a1
    a1f0:	20003d00 	.word	0x20003d00
    a1f4:	000089ad 	.word	0x000089ad

0000a1f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    a1f8:	b590      	push	{r4, r7, lr}
    a1fa:	b089      	sub	sp, #36	; 0x24
    a1fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    a1fe:	e03e      	b.n	a27e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    a200:	4b28      	ldr	r3, [pc, #160]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a202:	681b      	ldr	r3, [r3, #0]
    a204:	68db      	ldr	r3, [r3, #12]
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    a20a:	4b26      	ldr	r3, [pc, #152]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a20c:	681b      	ldr	r3, [r3, #0]
    a20e:	68db      	ldr	r3, [r3, #12]
    a210:	68db      	ldr	r3, [r3, #12]
    a212:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    a214:	693b      	ldr	r3, [r7, #16]
    a216:	3304      	adds	r3, #4
    a218:	0018      	movs	r0, r3
    a21a:	4b23      	ldr	r3, [pc, #140]	; (a2a8 <prvSwitchTimerLists+0xb0>)
    a21c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    a21e:	693b      	ldr	r3, [r7, #16]
    a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a222:	693a      	ldr	r2, [r7, #16]
    a224:	0010      	movs	r0, r2
    a226:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    a228:	693b      	ldr	r3, [r7, #16]
    a22a:	69db      	ldr	r3, [r3, #28]
    a22c:	2b01      	cmp	r3, #1
    a22e:	d126      	bne.n	a27e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    a230:	693b      	ldr	r3, [r7, #16]
    a232:	699a      	ldr	r2, [r3, #24]
    a234:	697b      	ldr	r3, [r7, #20]
    a236:	18d3      	adds	r3, r2, r3
    a238:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    a23a:	68fa      	ldr	r2, [r7, #12]
    a23c:	697b      	ldr	r3, [r7, #20]
    a23e:	429a      	cmp	r2, r3
    a240:	d90e      	bls.n	a260 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    a242:	693b      	ldr	r3, [r7, #16]
    a244:	68fa      	ldr	r2, [r7, #12]
    a246:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    a248:	693b      	ldr	r3, [r7, #16]
    a24a:	693a      	ldr	r2, [r7, #16]
    a24c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    a24e:	4b15      	ldr	r3, [pc, #84]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a250:	681a      	ldr	r2, [r3, #0]
    a252:	693b      	ldr	r3, [r7, #16]
    a254:	3304      	adds	r3, #4
    a256:	0019      	movs	r1, r3
    a258:	0010      	movs	r0, r2
    a25a:	4b14      	ldr	r3, [pc, #80]	; (a2ac <prvSwitchTimerLists+0xb4>)
    a25c:	4798      	blx	r3
    a25e:	e00e      	b.n	a27e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    a260:	697a      	ldr	r2, [r7, #20]
    a262:	6938      	ldr	r0, [r7, #16]
    a264:	2300      	movs	r3, #0
    a266:	9300      	str	r3, [sp, #0]
    a268:	2300      	movs	r3, #0
    a26a:	2100      	movs	r1, #0
    a26c:	4c10      	ldr	r4, [pc, #64]	; (a2b0 <prvSwitchTimerLists+0xb8>)
    a26e:	47a0      	blx	r4
    a270:	0003      	movs	r3, r0
    a272:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    a274:	68bb      	ldr	r3, [r7, #8]
    a276:	2b00      	cmp	r3, #0
    a278:	d101      	bne.n	a27e <prvSwitchTimerLists+0x86>
    a27a:	b672      	cpsid	i
    a27c:	e7fe      	b.n	a27c <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    a27e:	4b09      	ldr	r3, [pc, #36]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a280:	681b      	ldr	r3, [r3, #0]
    a282:	681b      	ldr	r3, [r3, #0]
    a284:	2b00      	cmp	r3, #0
    a286:	d1bb      	bne.n	a200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    a288:	4b06      	ldr	r3, [pc, #24]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a28a:	681b      	ldr	r3, [r3, #0]
    a28c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    a28e:	4b09      	ldr	r3, [pc, #36]	; (a2b4 <prvSwitchTimerLists+0xbc>)
    a290:	681a      	ldr	r2, [r3, #0]
    a292:	4b04      	ldr	r3, [pc, #16]	; (a2a4 <prvSwitchTimerLists+0xac>)
    a294:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    a296:	4b07      	ldr	r3, [pc, #28]	; (a2b4 <prvSwitchTimerLists+0xbc>)
    a298:	687a      	ldr	r2, [r7, #4]
    a29a:	601a      	str	r2, [r3, #0]
}
    a29c:	46c0      	nop			; (mov r8, r8)
    a29e:	46bd      	mov	sp, r7
    a2a0:	b007      	add	sp, #28
    a2a2:	bd90      	pop	{r4, r7, pc}
    a2a4:	20003cf8 	.word	0x20003cf8
    a2a8:	0000807d 	.word	0x0000807d
    a2ac:	00008011 	.word	0x00008011
    a2b0:	00009dd5 	.word	0x00009dd5
    a2b4:	20003cfc 	.word	0x20003cfc

0000a2b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    a2b8:	b580      	push	{r7, lr}
    a2ba:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    a2bc:	4b15      	ldr	r3, [pc, #84]	; (a314 <prvCheckForValidListAndQueue+0x5c>)
    a2be:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    a2c0:	4b15      	ldr	r3, [pc, #84]	; (a318 <prvCheckForValidListAndQueue+0x60>)
    a2c2:	681b      	ldr	r3, [r3, #0]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d120      	bne.n	a30a <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    a2c8:	4b14      	ldr	r3, [pc, #80]	; (a31c <prvCheckForValidListAndQueue+0x64>)
    a2ca:	0018      	movs	r0, r3
    a2cc:	4b14      	ldr	r3, [pc, #80]	; (a320 <prvCheckForValidListAndQueue+0x68>)
    a2ce:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    a2d0:	4b14      	ldr	r3, [pc, #80]	; (a324 <prvCheckForValidListAndQueue+0x6c>)
    a2d2:	0018      	movs	r0, r3
    a2d4:	4b12      	ldr	r3, [pc, #72]	; (a320 <prvCheckForValidListAndQueue+0x68>)
    a2d6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    a2d8:	4b13      	ldr	r3, [pc, #76]	; (a328 <prvCheckForValidListAndQueue+0x70>)
    a2da:	4a10      	ldr	r2, [pc, #64]	; (a31c <prvCheckForValidListAndQueue+0x64>)
    a2dc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    a2de:	4b13      	ldr	r3, [pc, #76]	; (a32c <prvCheckForValidListAndQueue+0x74>)
    a2e0:	4a10      	ldr	r2, [pc, #64]	; (a324 <prvCheckForValidListAndQueue+0x6c>)
    a2e2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    a2e4:	2200      	movs	r2, #0
    a2e6:	210c      	movs	r1, #12
    a2e8:	2002      	movs	r0, #2
    a2ea:	4b11      	ldr	r3, [pc, #68]	; (a330 <prvCheckForValidListAndQueue+0x78>)
    a2ec:	4798      	blx	r3
    a2ee:	0002      	movs	r2, r0
    a2f0:	4b09      	ldr	r3, [pc, #36]	; (a318 <prvCheckForValidListAndQueue+0x60>)
    a2f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    a2f4:	4b08      	ldr	r3, [pc, #32]	; (a318 <prvCheckForValidListAndQueue+0x60>)
    a2f6:	681b      	ldr	r3, [r3, #0]
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d006      	beq.n	a30a <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    a2fc:	4b06      	ldr	r3, [pc, #24]	; (a318 <prvCheckForValidListAndQueue+0x60>)
    a2fe:	681b      	ldr	r3, [r3, #0]
    a300:	4a0c      	ldr	r2, [pc, #48]	; (a334 <prvCheckForValidListAndQueue+0x7c>)
    a302:	0011      	movs	r1, r2
    a304:	0018      	movs	r0, r3
    a306:	4b0c      	ldr	r3, [pc, #48]	; (a338 <prvCheckForValidListAndQueue+0x80>)
    a308:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    a30a:	4b0c      	ldr	r3, [pc, #48]	; (a33c <prvCheckForValidListAndQueue+0x84>)
    a30c:	4798      	blx	r3
}
    a30e:	46c0      	nop			; (mov r8, r8)
    a310:	46bd      	mov	sp, r7
    a312:	bd80      	pop	{r7, pc}
    a314:	000081f9 	.word	0x000081f9
    a318:	20003d00 	.word	0x20003d00
    a31c:	20003cd0 	.word	0x20003cd0
    a320:	00007f79 	.word	0x00007f79
    a324:	20003ce4 	.word	0x20003ce4
    a328:	20003cf8 	.word	0x20003cf8
    a32c:	20003cfc 	.word	0x20003cfc
    a330:	00008479 	.word	0x00008479
    a334:	0000e530 	.word	0x0000e530
    a338:	00008e3d 	.word	0x00008e3d
    a33c:	0000821d 	.word	0x0000821d

0000a340 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a340:	b580      	push	{r7, lr}
    a342:	b084      	sub	sp, #16
    a344:	af00      	add	r7, sp, #0
    a346:	0002      	movs	r2, r0
    a348:	1dfb      	adds	r3, r7, #7
    a34a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a34c:	230f      	movs	r3, #15
    a34e:	18fb      	adds	r3, r7, r3
    a350:	1dfa      	adds	r2, r7, #7
    a352:	7812      	ldrb	r2, [r2, #0]
    a354:	09d2      	lsrs	r2, r2, #7
    a356:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a358:	230e      	movs	r3, #14
    a35a:	18fb      	adds	r3, r7, r3
    a35c:	1dfa      	adds	r2, r7, #7
    a35e:	7812      	ldrb	r2, [r2, #0]
    a360:	0952      	lsrs	r2, r2, #5
    a362:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a364:	4b0d      	ldr	r3, [pc, #52]	; (a39c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a366:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a368:	230f      	movs	r3, #15
    a36a:	18fb      	adds	r3, r7, r3
    a36c:	781b      	ldrb	r3, [r3, #0]
    a36e:	2b00      	cmp	r3, #0
    a370:	d10f      	bne.n	a392 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a372:	230f      	movs	r3, #15
    a374:	18fb      	adds	r3, r7, r3
    a376:	781b      	ldrb	r3, [r3, #0]
    a378:	009b      	lsls	r3, r3, #2
    a37a:	2210      	movs	r2, #16
    a37c:	4694      	mov	ip, r2
    a37e:	44bc      	add	ip, r7
    a380:	4463      	add	r3, ip
    a382:	3b08      	subs	r3, #8
    a384:	681a      	ldr	r2, [r3, #0]
    a386:	230e      	movs	r3, #14
    a388:	18fb      	adds	r3, r7, r3
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	01db      	lsls	r3, r3, #7
    a38e:	18d3      	adds	r3, r2, r3
    a390:	e000      	b.n	a394 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a392:	2300      	movs	r3, #0
	}
}
    a394:	0018      	movs	r0, r3
    a396:	46bd      	mov	sp, r7
    a398:	b004      	add	sp, #16
    a39a:	bd80      	pop	{r7, pc}
    a39c:	41004400 	.word	0x41004400

0000a3a0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b082      	sub	sp, #8
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	0002      	movs	r2, r0
    a3a8:	1dfb      	adds	r3, r7, #7
    a3aa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a3ac:	4b06      	ldr	r3, [pc, #24]	; (a3c8 <system_interrupt_enable+0x28>)
    a3ae:	1dfa      	adds	r2, r7, #7
    a3b0:	7812      	ldrb	r2, [r2, #0]
    a3b2:	0011      	movs	r1, r2
    a3b4:	221f      	movs	r2, #31
    a3b6:	400a      	ands	r2, r1
    a3b8:	2101      	movs	r1, #1
    a3ba:	4091      	lsls	r1, r2
    a3bc:	000a      	movs	r2, r1
    a3be:	601a      	str	r2, [r3, #0]
}
    a3c0:	46c0      	nop			; (mov r8, r8)
    a3c2:	46bd      	mov	sp, r7
    a3c4:	b002      	add	sp, #8
    a3c6:	bd80      	pop	{r7, pc}
    a3c8:	e000e100 	.word	0xe000e100

0000a3cc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	b084      	sub	sp, #16
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	681b      	ldr	r3, [r3, #0]
    a3d8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    a3da:	68fb      	ldr	r3, [r7, #12]
    a3dc:	7e5b      	ldrb	r3, [r3, #25]
    a3de:	b2db      	uxtb	r3, r3
    a3e0:	b25b      	sxtb	r3, r3
    a3e2:	2b00      	cmp	r3, #0
    a3e4:	da01      	bge.n	a3ea <adc_is_syncing+0x1e>
		return true;
    a3e6:	2301      	movs	r3, #1
    a3e8:	e000      	b.n	a3ec <adc_is_syncing+0x20>
	}

	return false;
    a3ea:	2300      	movs	r3, #0
}
    a3ec:	0018      	movs	r0, r3
    a3ee:	46bd      	mov	sp, r7
    a3f0:	b004      	add	sp, #16
    a3f2:	bd80      	pop	{r7, pc}

0000a3f4 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    a3f4:	b580      	push	{r7, lr}
    a3f6:	b086      	sub	sp, #24
    a3f8:	af00      	add	r7, sp, #0
    a3fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	681b      	ldr	r3, [r3, #0]
    a400:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    a402:	693b      	ldr	r3, [r7, #16]
    a404:	7e1b      	ldrb	r3, [r3, #24]
    a406:	b2db      	uxtb	r3, r3
    a408:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    a40a:	2300      	movs	r3, #0
    a40c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    a40e:	68fb      	ldr	r3, [r7, #12]
    a410:	2201      	movs	r2, #1
    a412:	4013      	ands	r3, r2
    a414:	d003      	beq.n	a41e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    a416:	697b      	ldr	r3, [r7, #20]
    a418:	2201      	movs	r2, #1
    a41a:	4313      	orrs	r3, r2
    a41c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    a41e:	68fb      	ldr	r3, [r7, #12]
    a420:	2204      	movs	r2, #4
    a422:	4013      	ands	r3, r2
    a424:	d003      	beq.n	a42e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    a426:	697b      	ldr	r3, [r7, #20]
    a428:	2202      	movs	r2, #2
    a42a:	4313      	orrs	r3, r2
    a42c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    a42e:	68fb      	ldr	r3, [r7, #12]
    a430:	2202      	movs	r2, #2
    a432:	4013      	ands	r3, r2
    a434:	d003      	beq.n	a43e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    a436:	697b      	ldr	r3, [r7, #20]
    a438:	2204      	movs	r2, #4
    a43a:	4313      	orrs	r3, r2
    a43c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    a43e:	697b      	ldr	r3, [r7, #20]
}
    a440:	0018      	movs	r0, r3
    a442:	46bd      	mov	sp, r7
    a444:	b006      	add	sp, #24
    a446:	bd80      	pop	{r7, pc}

0000a448 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    a448:	b580      	push	{r7, lr}
    a44a:	b084      	sub	sp, #16
    a44c:	af00      	add	r7, sp, #0
    a44e:	6078      	str	r0, [r7, #4]
    a450:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a452:	687b      	ldr	r3, [r7, #4]
    a454:	681b      	ldr	r3, [r3, #0]
    a456:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    a458:	2300      	movs	r3, #0
    a45a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    a45c:	683b      	ldr	r3, [r7, #0]
    a45e:	2201      	movs	r2, #1
    a460:	4013      	ands	r3, r2
    a462:	d003      	beq.n	a46c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    a464:	68fb      	ldr	r3, [r7, #12]
    a466:	2201      	movs	r2, #1
    a468:	4313      	orrs	r3, r2
    a46a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    a46c:	683b      	ldr	r3, [r7, #0]
    a46e:	2202      	movs	r2, #2
    a470:	4013      	ands	r3, r2
    a472:	d003      	beq.n	a47c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    a474:	68fb      	ldr	r3, [r7, #12]
    a476:	2204      	movs	r2, #4
    a478:	4313      	orrs	r3, r2
    a47a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    a47c:	683b      	ldr	r3, [r7, #0]
    a47e:	2204      	movs	r2, #4
    a480:	4013      	ands	r3, r2
    a482:	d003      	beq.n	a48c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    a484:	68fb      	ldr	r3, [r7, #12]
    a486:	2202      	movs	r2, #2
    a488:	4313      	orrs	r3, r2
    a48a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    a48c:	68fb      	ldr	r3, [r7, #12]
    a48e:	b2da      	uxtb	r2, r3
    a490:	68bb      	ldr	r3, [r7, #8]
    a492:	761a      	strb	r2, [r3, #24]
}
    a494:	46c0      	nop			; (mov r8, r8)
    a496:	46bd      	mov	sp, r7
    a498:	b004      	add	sp, #16
    a49a:	bd80      	pop	{r7, pc}

0000a49c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b084      	sub	sp, #16
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    a4a4:	687b      	ldr	r3, [r7, #4]
    a4a6:	681b      	ldr	r3, [r3, #0]
    a4a8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    a4aa:	46c0      	nop			; (mov r8, r8)
    a4ac:	687b      	ldr	r3, [r7, #4]
    a4ae:	0018      	movs	r0, r3
    a4b0:	4b0b      	ldr	r3, [pc, #44]	; (a4e0 <adc_start_conversion+0x44>)
    a4b2:	4798      	blx	r3
    a4b4:	1e03      	subs	r3, r0, #0
    a4b6:	d1f9      	bne.n	a4ac <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    a4b8:	68fb      	ldr	r3, [r7, #12]
    a4ba:	7b1b      	ldrb	r3, [r3, #12]
    a4bc:	b2db      	uxtb	r3, r3
    a4be:	2202      	movs	r2, #2
    a4c0:	4313      	orrs	r3, r2
    a4c2:	b2da      	uxtb	r2, r3
    a4c4:	68fb      	ldr	r3, [r7, #12]
    a4c6:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    a4c8:	46c0      	nop			; (mov r8, r8)
    a4ca:	687b      	ldr	r3, [r7, #4]
    a4cc:	0018      	movs	r0, r3
    a4ce:	4b04      	ldr	r3, [pc, #16]	; (a4e0 <adc_start_conversion+0x44>)
    a4d0:	4798      	blx	r3
    a4d2:	1e03      	subs	r3, r0, #0
    a4d4:	d1f9      	bne.n	a4ca <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    a4d6:	46c0      	nop			; (mov r8, r8)
    a4d8:	46bd      	mov	sp, r7
    a4da:	b004      	add	sp, #16
    a4dc:	bd80      	pop	{r7, pc}
    a4de:	46c0      	nop			; (mov r8, r8)
    a4e0:	0000a3cd 	.word	0x0000a3cd

0000a4e4 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    a4e4:	b580      	push	{r7, lr}
    a4e6:	b084      	sub	sp, #16
    a4e8:	af00      	add	r7, sp, #0
    a4ea:	6078      	str	r0, [r7, #4]
    a4ec:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	0018      	movs	r0, r3
    a4f2:	4b18      	ldr	r3, [pc, #96]	; (a554 <adc_read+0x70>)
    a4f4:	4798      	blx	r3
    a4f6:	0002      	movs	r2, r0
    a4f8:	2301      	movs	r3, #1
    a4fa:	4013      	ands	r3, r2
    a4fc:	d101      	bne.n	a502 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    a4fe:	2305      	movs	r3, #5
    a500:	e023      	b.n	a54a <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    a502:	687b      	ldr	r3, [r7, #4]
    a504:	681b      	ldr	r3, [r3, #0]
    a506:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    a508:	46c0      	nop			; (mov r8, r8)
    a50a:	687b      	ldr	r3, [r7, #4]
    a50c:	0018      	movs	r0, r3
    a50e:	4b12      	ldr	r3, [pc, #72]	; (a558 <adc_read+0x74>)
    a510:	4798      	blx	r3
    a512:	1e03      	subs	r3, r0, #0
    a514:	d1f9      	bne.n	a50a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    a516:	68fb      	ldr	r3, [r7, #12]
    a518:	8b5b      	ldrh	r3, [r3, #26]
    a51a:	b29a      	uxth	r2, r3
    a51c:	683b      	ldr	r3, [r7, #0]
    a51e:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    a520:	687b      	ldr	r3, [r7, #4]
    a522:	2101      	movs	r1, #1
    a524:	0018      	movs	r0, r3
    a526:	4b0d      	ldr	r3, [pc, #52]	; (a55c <adc_read+0x78>)
    a528:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    a52a:	687b      	ldr	r3, [r7, #4]
    a52c:	0018      	movs	r0, r3
    a52e:	4b09      	ldr	r3, [pc, #36]	; (a554 <adc_read+0x70>)
    a530:	4798      	blx	r3
    a532:	0002      	movs	r2, r0
    a534:	2304      	movs	r3, #4
    a536:	4013      	ands	r3, r2
    a538:	d006      	beq.n	a548 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    a53a:	687b      	ldr	r3, [r7, #4]
    a53c:	2104      	movs	r1, #4
    a53e:	0018      	movs	r0, r3
    a540:	4b06      	ldr	r3, [pc, #24]	; (a55c <adc_read+0x78>)
    a542:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    a544:	231e      	movs	r3, #30
    a546:	e000      	b.n	a54a <adc_read+0x66>
	}

	return STATUS_OK;
    a548:	2300      	movs	r3, #0
}
    a54a:	0018      	movs	r0, r3
    a54c:	46bd      	mov	sp, r7
    a54e:	b004      	add	sp, #16
    a550:	bd80      	pop	{r7, pc}
    a552:	46c0      	nop			; (mov r8, r8)
    a554:	0000a3f5 	.word	0x0000a3f5
    a558:	0000a3cd 	.word	0x0000a3cd
    a55c:	0000a449 	.word	0x0000a449

0000a560 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a560:	b580      	push	{r7, lr}
    a562:	b082      	sub	sp, #8
    a564:	af00      	add	r7, sp, #0
    a566:	0002      	movs	r2, r0
    a568:	1dfb      	adds	r3, r7, #7
    a56a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a56c:	1dfb      	adds	r3, r7, #7
    a56e:	781b      	ldrb	r3, [r3, #0]
    a570:	0018      	movs	r0, r3
    a572:	4b03      	ldr	r3, [pc, #12]	; (a580 <port_get_group_from_gpio_pin+0x20>)
    a574:	4798      	blx	r3
    a576:	0003      	movs	r3, r0
}
    a578:	0018      	movs	r0, r3
    a57a:	46bd      	mov	sp, r7
    a57c:	b002      	add	sp, #8
    a57e:	bd80      	pop	{r7, pc}
    a580:	0000a341 	.word	0x0000a341

0000a584 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    a584:	b580      	push	{r7, lr}
    a586:	b084      	sub	sp, #16
    a588:	af00      	add	r7, sp, #0
    a58a:	0002      	movs	r2, r0
    a58c:	1dfb      	adds	r3, r7, #7
    a58e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a590:	1dfb      	adds	r3, r7, #7
    a592:	781b      	ldrb	r3, [r3, #0]
    a594:	0018      	movs	r0, r3
    a596:	4b0b      	ldr	r3, [pc, #44]	; (a5c4 <port_pin_get_output_level+0x40>)
    a598:	4798      	blx	r3
    a59a:	0003      	movs	r3, r0
    a59c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a59e:	1dfb      	adds	r3, r7, #7
    a5a0:	781b      	ldrb	r3, [r3, #0]
    a5a2:	221f      	movs	r2, #31
    a5a4:	4013      	ands	r3, r2
    a5a6:	2201      	movs	r2, #1
    a5a8:	409a      	lsls	r2, r3
    a5aa:	0013      	movs	r3, r2
    a5ac:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    a5ae:	68fb      	ldr	r3, [r7, #12]
    a5b0:	691b      	ldr	r3, [r3, #16]
    a5b2:	68ba      	ldr	r2, [r7, #8]
    a5b4:	4013      	ands	r3, r2
    a5b6:	1e5a      	subs	r2, r3, #1
    a5b8:	4193      	sbcs	r3, r2
    a5ba:	b2db      	uxtb	r3, r3
}
    a5bc:	0018      	movs	r0, r3
    a5be:	46bd      	mov	sp, r7
    a5c0:	b004      	add	sp, #16
    a5c2:	bd80      	pop	{r7, pc}
    a5c4:	0000a561 	.word	0x0000a561

0000a5c8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    a5c8:	b580      	push	{r7, lr}
    a5ca:	b084      	sub	sp, #16
    a5cc:	af00      	add	r7, sp, #0
    a5ce:	0002      	movs	r2, r0
    a5d0:	1dfb      	adds	r3, r7, #7
    a5d2:	701a      	strb	r2, [r3, #0]
    a5d4:	1dbb      	adds	r3, r7, #6
    a5d6:	1c0a      	adds	r2, r1, #0
    a5d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    a5da:	1dfb      	adds	r3, r7, #7
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	0018      	movs	r0, r3
    a5e0:	4b0d      	ldr	r3, [pc, #52]	; (a618 <port_pin_set_output_level+0x50>)
    a5e2:	4798      	blx	r3
    a5e4:	0003      	movs	r3, r0
    a5e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a5e8:	1dfb      	adds	r3, r7, #7
    a5ea:	781b      	ldrb	r3, [r3, #0]
    a5ec:	221f      	movs	r2, #31
    a5ee:	4013      	ands	r3, r2
    a5f0:	2201      	movs	r2, #1
    a5f2:	409a      	lsls	r2, r3
    a5f4:	0013      	movs	r3, r2
    a5f6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    a5f8:	1dbb      	adds	r3, r7, #6
    a5fa:	781b      	ldrb	r3, [r3, #0]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d003      	beq.n	a608 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    a600:	68fb      	ldr	r3, [r7, #12]
    a602:	68ba      	ldr	r2, [r7, #8]
    a604:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    a606:	e002      	b.n	a60e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    a608:	68fb      	ldr	r3, [r7, #12]
    a60a:	68ba      	ldr	r2, [r7, #8]
    a60c:	615a      	str	r2, [r3, #20]
	}
}
    a60e:	46c0      	nop			; (mov r8, r8)
    a610:	46bd      	mov	sp, r7
    a612:	b004      	add	sp, #16
    a614:	bd80      	pop	{r7, pc}
    a616:	46c0      	nop			; (mov r8, r8)
    a618:	0000a561 	.word	0x0000a561

0000a61c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    a61c:	b580      	push	{r7, lr}
    a61e:	b084      	sub	sp, #16
    a620:	af00      	add	r7, sp, #0
    a622:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a624:	687b      	ldr	r3, [r7, #4]
    a626:	681b      	ldr	r3, [r3, #0]
    a628:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a62a:	68fb      	ldr	r3, [r7, #12]
    a62c:	69db      	ldr	r3, [r3, #28]
    a62e:	1e5a      	subs	r2, r3, #1
    a630:	4193      	sbcs	r3, r2
    a632:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    a634:	0018      	movs	r0, r3
    a636:	46bd      	mov	sp, r7
    a638:	b004      	add	sp, #16
    a63a:	bd80      	pop	{r7, pc}

0000a63c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    a63c:	b580      	push	{r7, lr}
    a63e:	b082      	sub	sp, #8
    a640:	af00      	add	r7, sp, #0
    a642:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a644:	46c0      	nop			; (mov r8, r8)
    a646:	687b      	ldr	r3, [r7, #4]
    a648:	0018      	movs	r0, r3
    a64a:	4b04      	ldr	r3, [pc, #16]	; (a65c <_usart_wait_for_sync+0x20>)
    a64c:	4798      	blx	r3
    a64e:	1e03      	subs	r3, r0, #0
    a650:	d1f9      	bne.n	a646 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    a652:	46c0      	nop			; (mov r8, r8)
    a654:	46bd      	mov	sp, r7
    a656:	b002      	add	sp, #8
    a658:	bd80      	pop	{r7, pc}
    a65a:	46c0      	nop			; (mov r8, r8)
    a65c:	0000a61d 	.word	0x0000a61d

0000a660 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    a660:	b580      	push	{r7, lr}
    a662:	b082      	sub	sp, #8
    a664:	af00      	add	r7, sp, #0
    a666:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    a668:	687b      	ldr	r3, [r7, #4]
    a66a:	2280      	movs	r2, #128	; 0x80
    a66c:	05d2      	lsls	r2, r2, #23
    a66e:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    a670:	687b      	ldr	r3, [r7, #4]
    a672:	2200      	movs	r2, #0
    a674:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    a676:	687b      	ldr	r3, [r7, #4]
    a678:	22ff      	movs	r2, #255	; 0xff
    a67a:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    a67c:	687b      	ldr	r3, [r7, #4]
    a67e:	2200      	movs	r2, #0
    a680:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	2200      	movs	r2, #0
    a686:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    a688:	687b      	ldr	r3, [r7, #4]
    a68a:	2296      	movs	r2, #150	; 0x96
    a68c:	0192      	lsls	r2, r2, #6
    a68e:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    a690:	687b      	ldr	r3, [r7, #4]
    a692:	2224      	movs	r2, #36	; 0x24
    a694:	2101      	movs	r1, #1
    a696:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    a698:	687b      	ldr	r3, [r7, #4]
    a69a:	2225      	movs	r2, #37	; 0x25
    a69c:	2101      	movs	r1, #1
    a69e:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    a6a0:	687b      	ldr	r3, [r7, #4]
    a6a2:	2226      	movs	r2, #38	; 0x26
    a6a4:	2100      	movs	r1, #0
    a6a6:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	2227      	movs	r2, #39	; 0x27
    a6ac:	2100      	movs	r1, #0
    a6ae:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    a6b0:	687b      	ldr	r3, [r7, #4]
    a6b2:	2200      	movs	r2, #0
    a6b4:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	2288      	movs	r2, #136	; 0x88
    a6ba:	0352      	lsls	r2, r2, #13
    a6bc:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	222c      	movs	r2, #44	; 0x2c
    a6c2:	2100      	movs	r1, #0
    a6c4:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    a6c6:	687b      	ldr	r3, [r7, #4]
    a6c8:	222d      	movs	r2, #45	; 0x2d
    a6ca:	2100      	movs	r1, #0
    a6cc:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    a6ce:	687b      	ldr	r3, [r7, #4]
    a6d0:	2200      	movs	r2, #0
    a6d2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    a6d4:	687b      	ldr	r3, [r7, #4]
    a6d6:	2200      	movs	r2, #0
    a6d8:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	2200      	movs	r2, #0
    a6de:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    a6e0:	687b      	ldr	r3, [r7, #4]
    a6e2:	2200      	movs	r2, #0
    a6e4:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    a6e6:	687b      	ldr	r3, [r7, #4]
    a6e8:	2200      	movs	r2, #0
    a6ea:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	2200      	movs	r2, #0
    a6f0:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	2200      	movs	r2, #0
    a6f6:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    a6f8:	687b      	ldr	r3, [r7, #4]
    a6fa:	2200      	movs	r2, #0
    a6fc:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    a6fe:	687b      	ldr	r3, [r7, #4]
    a700:	2200      	movs	r2, #0
    a702:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    a704:	687b      	ldr	r3, [r7, #4]
    a706:	2200      	movs	r2, #0
    a708:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    a70a:	687b      	ldr	r3, [r7, #4]
    a70c:	2213      	movs	r2, #19
    a70e:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    a710:	687b      	ldr	r3, [r7, #4]
    a712:	2200      	movs	r2, #0
    a714:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    a716:	46c0      	nop			; (mov r8, r8)
    a718:	46bd      	mov	sp, r7
    a71a:	b002      	add	sp, #8
    a71c:	bd80      	pop	{r7, pc}
    a71e:	46c0      	nop			; (mov r8, r8)

0000a720 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    a720:	b580      	push	{r7, lr}
    a722:	b084      	sub	sp, #16
    a724:	af00      	add	r7, sp, #0
    a726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a728:	687b      	ldr	r3, [r7, #4]
    a72a:	681b      	ldr	r3, [r3, #0]
    a72c:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a72e:	687b      	ldr	r3, [r7, #4]
    a730:	681b      	ldr	r3, [r3, #0]
    a732:	0018      	movs	r0, r3
    a734:	4b09      	ldr	r3, [pc, #36]	; (a75c <usart_enable+0x3c>)
    a736:	4798      	blx	r3
    a738:	0003      	movs	r3, r0
    a73a:	0018      	movs	r0, r3
    a73c:	4b08      	ldr	r3, [pc, #32]	; (a760 <usart_enable+0x40>)
    a73e:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    a740:	687b      	ldr	r3, [r7, #4]
    a742:	0018      	movs	r0, r3
    a744:	4b07      	ldr	r3, [pc, #28]	; (a764 <usart_enable+0x44>)
    a746:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    a748:	68fb      	ldr	r3, [r7, #12]
    a74a:	681b      	ldr	r3, [r3, #0]
    a74c:	2202      	movs	r2, #2
    a74e:	431a      	orrs	r2, r3
    a750:	68fb      	ldr	r3, [r7, #12]
    a752:	601a      	str	r2, [r3, #0]
}
    a754:	46c0      	nop			; (mov r8, r8)
    a756:	46bd      	mov	sp, r7
    a758:	b004      	add	sp, #16
    a75a:	bd80      	pop	{r7, pc}
    a75c:	000052c5 	.word	0x000052c5
    a760:	0000a3a1 	.word	0x0000a3a1
    a764:	0000a63d 	.word	0x0000a63d

0000a768 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a768:	b580      	push	{r7, lr}
    a76a:	b084      	sub	sp, #16
    a76c:	af00      	add	r7, sp, #0
    a76e:	60f8      	str	r0, [r7, #12]
    a770:	60b9      	str	r1, [r7, #8]
    a772:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    a774:	687a      	ldr	r2, [r7, #4]
    a776:	68b9      	ldr	r1, [r7, #8]
    a778:	68fb      	ldr	r3, [r7, #12]
    a77a:	0018      	movs	r0, r3
    a77c:	4b05      	ldr	r3, [pc, #20]	; (a794 <usart_serial_init+0x2c>)
    a77e:	4798      	blx	r3
    a780:	1e03      	subs	r3, r0, #0
    a782:	d101      	bne.n	a788 <usart_serial_init+0x20>
		return true;
    a784:	2301      	movs	r3, #1
    a786:	e000      	b.n	a78a <usart_serial_init+0x22>
	}
	else {
		return false;
    a788:	2300      	movs	r3, #0
	}
}
    a78a:	0018      	movs	r0, r3
    a78c:	46bd      	mov	sp, r7
    a78e:	b004      	add	sp, #16
    a790:	bd80      	pop	{r7, pc}
    a792:	46c0      	nop			; (mov r8, r8)
    a794:	000064a9 	.word	0x000064a9

0000a798 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    a798:	b580      	push	{r7, lr}
    a79a:	b082      	sub	sp, #8
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
    a7a0:	000a      	movs	r2, r1
    a7a2:	1cfb      	adds	r3, r7, #3
    a7a4:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    a7a6:	46c0      	nop			; (mov r8, r8)
    a7a8:	1cfb      	adds	r3, r7, #3
    a7aa:	781b      	ldrb	r3, [r3, #0]
    a7ac:	b29a      	uxth	r2, r3
    a7ae:	687b      	ldr	r3, [r7, #4]
    a7b0:	0011      	movs	r1, r2
    a7b2:	0018      	movs	r0, r3
    a7b4:	4b04      	ldr	r3, [pc, #16]	; (a7c8 <usart_serial_putchar+0x30>)
    a7b6:	4798      	blx	r3
    a7b8:	1e03      	subs	r3, r0, #0
    a7ba:	d1f5      	bne.n	a7a8 <usart_serial_putchar+0x10>

	return STATUS_OK;
    a7bc:	2300      	movs	r3, #0
}
    a7be:	0018      	movs	r0, r3
    a7c0:	46bd      	mov	sp, r7
    a7c2:	b002      	add	sp, #8
    a7c4:	bd80      	pop	{r7, pc}
    a7c6:	46c0      	nop			; (mov r8, r8)
    a7c8:	0000671d 	.word	0x0000671d

0000a7cc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a7cc:	b580      	push	{r7, lr}
    a7ce:	b084      	sub	sp, #16
    a7d0:	af00      	add	r7, sp, #0
    a7d2:	6078      	str	r0, [r7, #4]
    a7d4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    a7d6:	230e      	movs	r3, #14
    a7d8:	18fb      	adds	r3, r7, r3
    a7da:	2200      	movs	r2, #0
    a7dc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a7de:	46c0      	nop			; (mov r8, r8)
    a7e0:	230e      	movs	r3, #14
    a7e2:	18fa      	adds	r2, r7, r3
    a7e4:	687b      	ldr	r3, [r7, #4]
    a7e6:	0011      	movs	r1, r2
    a7e8:	0018      	movs	r0, r3
    a7ea:	4b07      	ldr	r3, [pc, #28]	; (a808 <usart_serial_getchar+0x3c>)
    a7ec:	4798      	blx	r3
    a7ee:	1e03      	subs	r3, r0, #0
    a7f0:	d1f6      	bne.n	a7e0 <usart_serial_getchar+0x14>

	*c = temp;
    a7f2:	230e      	movs	r3, #14
    a7f4:	18fb      	adds	r3, r7, r3
    a7f6:	881b      	ldrh	r3, [r3, #0]
    a7f8:	b2da      	uxtb	r2, r3
    a7fa:	683b      	ldr	r3, [r7, #0]
    a7fc:	701a      	strb	r2, [r3, #0]
}
    a7fe:	46c0      	nop			; (mov r8, r8)
    a800:	46bd      	mov	sp, r7
    a802:	b004      	add	sp, #16
    a804:	bd80      	pop	{r7, pc}
    a806:	46c0      	nop			; (mov r8, r8)
    a808:	00006781 	.word	0x00006781

0000a80c <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    a80c:	b580      	push	{r7, lr}
    a80e:	b084      	sub	sp, #16
    a810:	af00      	add	r7, sp, #0
    a812:	60f8      	str	r0, [r7, #12]
    a814:	60b9      	str	r1, [r7, #8]
    a816:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    a818:	4b10      	ldr	r3, [pc, #64]	; (a85c <stdio_serial_init+0x50>)
    a81a:	68fa      	ldr	r2, [r7, #12]
    a81c:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    a81e:	4b10      	ldr	r3, [pc, #64]	; (a860 <stdio_serial_init+0x54>)
    a820:	4a10      	ldr	r2, [pc, #64]	; (a864 <stdio_serial_init+0x58>)
    a822:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    a824:	4b10      	ldr	r3, [pc, #64]	; (a868 <stdio_serial_init+0x5c>)
    a826:	4a11      	ldr	r2, [pc, #68]	; (a86c <stdio_serial_init+0x60>)
    a828:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    a82a:	687a      	ldr	r2, [r7, #4]
    a82c:	68b9      	ldr	r1, [r7, #8]
    a82e:	68fb      	ldr	r3, [r7, #12]
    a830:	0018      	movs	r0, r3
    a832:	4b0f      	ldr	r3, [pc, #60]	; (a870 <stdio_serial_init+0x64>)
    a834:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    a836:	4b0f      	ldr	r3, [pc, #60]	; (a874 <stdio_serial_init+0x68>)
    a838:	681b      	ldr	r3, [r3, #0]
    a83a:	689b      	ldr	r3, [r3, #8]
    a83c:	2100      	movs	r1, #0
    a83e:	0018      	movs	r0, r3
    a840:	4b0d      	ldr	r3, [pc, #52]	; (a878 <stdio_serial_init+0x6c>)
    a842:	4798      	blx	r3
	setbuf(stdin, NULL);
    a844:	4b0b      	ldr	r3, [pc, #44]	; (a874 <stdio_serial_init+0x68>)
    a846:	681b      	ldr	r3, [r3, #0]
    a848:	685b      	ldr	r3, [r3, #4]
    a84a:	2100      	movs	r1, #0
    a84c:	0018      	movs	r0, r3
    a84e:	4b0a      	ldr	r3, [pc, #40]	; (a878 <stdio_serial_init+0x6c>)
    a850:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    a852:	46c0      	nop			; (mov r8, r8)
    a854:	46bd      	mov	sp, r7
    a856:	b004      	add	sp, #16
    a858:	bd80      	pop	{r7, pc}
    a85a:	46c0      	nop			; (mov r8, r8)
    a85c:	20004664 	.word	0x20004664
    a860:	20004660 	.word	0x20004660
    a864:	0000a799 	.word	0x0000a799
    a868:	2000465c 	.word	0x2000465c
    a86c:	0000a7cd 	.word	0x0000a7cd
    a870:	0000a769 	.word	0x0000a769
    a874:	20000090 	.word	0x20000090
    a878:	0000c70d 	.word	0x0000c70d

0000a87c <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    a87c:	b580      	push	{r7, lr}
    a87e:	b084      	sub	sp, #16
    a880:	af00      	add	r7, sp, #0
    a882:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a884:	687b      	ldr	r3, [r7, #4]
    a886:	681b      	ldr	r3, [r3, #0]
    a888:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    a88a:	68fb      	ldr	r3, [r7, #12]
    a88c:	7bdb      	ldrb	r3, [r3, #15]
    a88e:	b2db      	uxtb	r3, r3
    a890:	001a      	movs	r2, r3
    a892:	2380      	movs	r3, #128	; 0x80
    a894:	4013      	ands	r3, r2
    a896:	1e5a      	subs	r2, r3, #1
    a898:	4193      	sbcs	r3, r2
    a89a:	b2db      	uxtb	r3, r3
#endif
}
    a89c:	0018      	movs	r0, r3
    a89e:	46bd      	mov	sp, r7
    a8a0:	b004      	add	sp, #16
    a8a2:	bd80      	pop	{r7, pc}

0000a8a4 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    a8a4:	b580      	push	{r7, lr}
    a8a6:	b082      	sub	sp, #8
    a8a8:	af00      	add	r7, sp, #0
    a8aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    a8ac:	687b      	ldr	r3, [r7, #4]
    a8ae:	2200      	movs	r2, #0
    a8b0:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    a8b2:	687b      	ldr	r3, [r7, #4]
    a8b4:	2200      	movs	r2, #0
    a8b6:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2200      	movs	r2, #0
    a8bc:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    a8be:	687b      	ldr	r3, [r7, #4]
    a8c0:	2200      	movs	r2, #0
    a8c2:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    a8c4:	687b      	ldr	r3, [r7, #4]
    a8c6:	2200      	movs	r2, #0
    a8c8:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	2200      	movs	r2, #0
    a8ce:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    a8d0:	687b      	ldr	r3, [r7, #4]
    a8d2:	2200      	movs	r2, #0
    a8d4:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    a8d6:	687b      	ldr	r3, [r7, #4]
    a8d8:	2200      	movs	r2, #0
    a8da:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    a8dc:	687b      	ldr	r3, [r7, #4]
    a8de:	2200      	movs	r2, #0
    a8e0:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	2200      	movs	r2, #0
    a8e6:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    a8e8:	687b      	ldr	r3, [r7, #4]
    a8ea:	2200      	movs	r2, #0
    a8ec:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    a8ee:	687b      	ldr	r3, [r7, #4]
    a8f0:	2200      	movs	r2, #0
    a8f2:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	2200      	movs	r2, #0
    a8f8:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    a8fa:	687b      	ldr	r3, [r7, #4]
    a8fc:	2200      	movs	r2, #0
    a8fe:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    a900:	687b      	ldr	r3, [r7, #4]
    a902:	2200      	movs	r2, #0
    a904:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	2200      	movs	r2, #0
    a90a:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    a90c:	687b      	ldr	r3, [r7, #4]
    a90e:	2200      	movs	r2, #0
    a910:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    a912:	687b      	ldr	r3, [r7, #4]
    a914:	2200      	movs	r2, #0
    a916:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	2200      	movs	r2, #0
    a91c:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    a91e:	687b      	ldr	r3, [r7, #4]
    a920:	2200      	movs	r2, #0
    a922:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    a924:	46c0      	nop			; (mov r8, r8)
    a926:	46bd      	mov	sp, r7
    a928:	b002      	add	sp, #8
    a92a:	bd80      	pop	{r7, pc}

0000a92c <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    a92c:	b580      	push	{r7, lr}
    a92e:	b084      	sub	sp, #16
    a930:	af00      	add	r7, sp, #0
    a932:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a934:	687b      	ldr	r3, [r7, #4]
    a936:	681b      	ldr	r3, [r3, #0]
    a938:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    a93a:	46c0      	nop			; (mov r8, r8)
    a93c:	687b      	ldr	r3, [r7, #4]
    a93e:	0018      	movs	r0, r3
    a940:	4b07      	ldr	r3, [pc, #28]	; (a960 <tc_enable+0x34>)
    a942:	4798      	blx	r3
    a944:	1e03      	subs	r3, r0, #0
    a946:	d1f9      	bne.n	a93c <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    a948:	68fb      	ldr	r3, [r7, #12]
    a94a:	881b      	ldrh	r3, [r3, #0]
    a94c:	b29b      	uxth	r3, r3
    a94e:	2202      	movs	r2, #2
    a950:	4313      	orrs	r3, r2
    a952:	b29a      	uxth	r2, r3
    a954:	68fb      	ldr	r3, [r7, #12]
    a956:	801a      	strh	r2, [r3, #0]
}
    a958:	46c0      	nop			; (mov r8, r8)
    a95a:	46bd      	mov	sp, r7
    a95c:	b004      	add	sp, #16
    a95e:	bd80      	pop	{r7, pc}
    a960:	0000a87d 	.word	0x0000a87d

0000a964 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    a964:	b580      	push	{r7, lr}
    a966:	b084      	sub	sp, #16
    a968:	af00      	add	r7, sp, #0
    a96a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    a96c:	687b      	ldr	r3, [r7, #4]
    a96e:	681b      	ldr	r3, [r3, #0]
    a970:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    a972:	46c0      	nop			; (mov r8, r8)
    a974:	687b      	ldr	r3, [r7, #4]
    a976:	0018      	movs	r0, r3
    a978:	4b0a      	ldr	r3, [pc, #40]	; (a9a4 <tc_disable+0x40>)
    a97a:	4798      	blx	r3
    a97c:	1e03      	subs	r3, r0, #0
    a97e:	d1f9      	bne.n	a974 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    a980:	68fb      	ldr	r3, [r7, #12]
    a982:	223b      	movs	r2, #59	; 0x3b
    a984:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    a986:	68fb      	ldr	r3, [r7, #12]
    a988:	223b      	movs	r2, #59	; 0x3b
    a98a:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    a98c:	68fb      	ldr	r3, [r7, #12]
    a98e:	881b      	ldrh	r3, [r3, #0]
    a990:	b29b      	uxth	r3, r3
    a992:	2202      	movs	r2, #2
    a994:	4393      	bics	r3, r2
    a996:	b29a      	uxth	r2, r3
    a998:	68fb      	ldr	r3, [r7, #12]
    a99a:	801a      	strh	r2, [r3, #0]
}
    a99c:	46c0      	nop			; (mov r8, r8)
    a99e:	46bd      	mov	sp, r7
    a9a0:	b004      	add	sp, #16
    a9a2:	bd80      	pop	{r7, pc}
    a9a4:	0000a87d 	.word	0x0000a87d

0000a9a8 <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    a9a8:	b590      	push	{r4, r7, lr}
    a9aa:	b087      	sub	sp, #28
    a9ac:	af02      	add	r7, sp, #8
    a9ae:	0002      	movs	r2, r0
    a9b0:	6039      	str	r1, [r7, #0]
    a9b2:	1dfb      	adds	r3, r7, #7
    a9b4:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    a9b6:	1dfb      	adds	r3, r7, #7
    a9b8:	781b      	ldrb	r3, [r3, #0]
    a9ba:	2b2c      	cmp	r3, #44	; 0x2c
    a9bc:	d002      	beq.n	a9c4 <m2m_wifi_state+0x1c>
    a9be:	2b32      	cmp	r3, #50	; 0x32
    a9c0:	d025      	beq.n	aa0e <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    a9c2:	e042      	b.n	aa4a <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    a9c4:	683b      	ldr	r3, [r7, #0]
    a9c6:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    a9c8:	68fb      	ldr	r3, [r7, #12]
    a9ca:	781b      	ldrb	r3, [r3, #0]
    a9cc:	2b01      	cmp	r3, #1
    a9ce:	d104      	bne.n	a9da <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    a9d0:	4b20      	ldr	r3, [pc, #128]	; (aa54 <m2m_wifi_state+0xac>)
    a9d2:	0018      	movs	r0, r3
    a9d4:	4b20      	ldr	r3, [pc, #128]	; (aa58 <m2m_wifi_state+0xb0>)
    a9d6:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    a9d8:	e036      	b.n	aa48 <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a9da:	68fb      	ldr	r3, [r7, #12]
    a9dc:	781b      	ldrb	r3, [r3, #0]
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d132      	bne.n	aa48 <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    a9e2:	4b1e      	ldr	r3, [pc, #120]	; (aa5c <m2m_wifi_state+0xb4>)
    a9e4:	0018      	movs	r0, r3
    a9e6:	4b1c      	ldr	r3, [pc, #112]	; (aa58 <m2m_wifi_state+0xb0>)
    a9e8:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    a9ea:	4b1d      	ldr	r3, [pc, #116]	; (aa60 <m2m_wifi_state+0xb8>)
    a9ec:	781b      	ldrb	r3, [r3, #0]
    a9ee:	b2db      	uxtb	r3, r3
    a9f0:	2b03      	cmp	r3, #3
    a9f2:	d129      	bne.n	aa48 <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    a9f4:	4b1a      	ldr	r3, [pc, #104]	; (aa60 <m2m_wifi_state+0xb8>)
    a9f6:	2204      	movs	r2, #4
    a9f8:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    a9fa:	4a1a      	ldr	r2, [pc, #104]	; (aa64 <m2m_wifi_state+0xbc>)
    a9fc:	481a      	ldr	r0, [pc, #104]	; (aa68 <m2m_wifi_state+0xc0>)
    a9fe:	23ff      	movs	r3, #255	; 0xff
    aa00:	9300      	str	r3, [sp, #0]
    aa02:	0013      	movs	r3, r2
    aa04:	2202      	movs	r2, #2
    aa06:	211b      	movs	r1, #27
    aa08:	4c18      	ldr	r4, [pc, #96]	; (aa6c <m2m_wifi_state+0xc4>)
    aa0a:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    aa0c:	e01c      	b.n	aa48 <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    aa0e:	683b      	ldr	r3, [r7, #0]
    aa10:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    aa12:	4b17      	ldr	r3, [pc, #92]	; (aa70 <m2m_wifi_state+0xc8>)
    aa14:	681a      	ldr	r2, [r3, #0]
    aa16:	4b17      	ldr	r3, [pc, #92]	; (aa74 <m2m_wifi_state+0xcc>)
    aa18:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aa1a:	68bb      	ldr	r3, [r7, #8]
    aa1c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    aa1e:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aa20:	68bb      	ldr	r3, [r7, #8]
    aa22:	3301      	adds	r3, #1
    aa24:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    aa26:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aa28:	68bb      	ldr	r3, [r7, #8]
    aa2a:	3302      	adds	r3, #2
    aa2c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    aa2e:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    aa30:	68bb      	ldr	r3, [r7, #8]
    aa32:	3303      	adds	r3, #3
    aa34:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    aa36:	4810      	ldr	r0, [pc, #64]	; (aa78 <m2m_wifi_state+0xd0>)
    aa38:	9300      	str	r3, [sp, #0]
    aa3a:	0023      	movs	r3, r4
    aa3c:	4c0f      	ldr	r4, [pc, #60]	; (aa7c <m2m_wifi_state+0xd4>)
    aa3e:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    aa40:	4b07      	ldr	r3, [pc, #28]	; (aa60 <m2m_wifi_state+0xb8>)
    aa42:	2203      	movs	r2, #3
    aa44:	701a      	strb	r2, [r3, #0]

		break;
    aa46:	e000      	b.n	aa4a <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    aa48:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    aa4a:	46c0      	nop			; (mov r8, r8)
    aa4c:	46bd      	mov	sp, r7
    aa4e:	b005      	add	sp, #20
    aa50:	bd90      	pop	{r4, r7, pc}
    aa52:	46c0      	nop			; (mov r8, r8)
    aa54:	0000e598 	.word	0x0000e598
    aa58:	0000c6f9 	.word	0x0000c6f9
    aa5c:	0000e5d4 	.word	0x0000e5d4
    aa60:	20003d0c 	.word	0x20003d0c
    aa64:	0000e614 	.word	0x0000e614
    aa68:	0000e620 	.word	0x0000e620
    aa6c:	0000239d 	.word	0x0000239d
    aa70:	20003d10 	.word	0x20003d10
    aa74:	20003d1c 	.word	0x20003d1c
    aa78:	0000e63c 	.word	0x0000e63c
    aa7c:	0000c5d9 	.word	0x0000c5d9

0000aa80 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b090      	sub	sp, #64	; 0x40
    aa84:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    aa86:	003b      	movs	r3, r7
    aa88:	0018      	movs	r0, r3
    aa8a:	4b13      	ldr	r3, [pc, #76]	; (aad8 <configure_console+0x58>)
    aa8c:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    aa8e:	003b      	movs	r3, r7
    aa90:	2280      	movs	r2, #128	; 0x80
    aa92:	0352      	lsls	r2, r2, #13
    aa94:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    aa96:	003b      	movs	r3, r7
    aa98:	4a10      	ldr	r2, [pc, #64]	; (aadc <configure_console+0x5c>)
    aa9a:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    aa9c:	003b      	movs	r3, r7
    aa9e:	4a10      	ldr	r2, [pc, #64]	; (aae0 <configure_console+0x60>)
    aaa0:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    aaa2:	003b      	movs	r3, r7
    aaa4:	2201      	movs	r2, #1
    aaa6:	4252      	negs	r2, r2
    aaa8:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    aaaa:	003b      	movs	r3, r7
    aaac:	2201      	movs	r2, #1
    aaae:	4252      	negs	r2, r2
    aab0:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    aab2:	003b      	movs	r3, r7
    aab4:	22e1      	movs	r2, #225	; 0xe1
    aab6:	0252      	lsls	r2, r2, #9
    aab8:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    aaba:	003a      	movs	r2, r7
    aabc:	4909      	ldr	r1, [pc, #36]	; (aae4 <configure_console+0x64>)
    aabe:	4b0a      	ldr	r3, [pc, #40]	; (aae8 <configure_console+0x68>)
    aac0:	0018      	movs	r0, r3
    aac2:	4b0a      	ldr	r3, [pc, #40]	; (aaec <configure_console+0x6c>)
    aac4:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    aac6:	4b08      	ldr	r3, [pc, #32]	; (aae8 <configure_console+0x68>)
    aac8:	0018      	movs	r0, r3
    aaca:	4b09      	ldr	r3, [pc, #36]	; (aaf0 <configure_console+0x70>)
    aacc:	4798      	blx	r3
}
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	46bd      	mov	sp, r7
    aad2:	b010      	add	sp, #64	; 0x40
    aad4:	bd80      	pop	{r7, pc}
    aad6:	46c0      	nop			; (mov r8, r8)
    aad8:	0000a661 	.word	0x0000a661
    aadc:	00100002 	.word	0x00100002
    aae0:	00110002 	.word	0x00110002
    aae4:	42000c00 	.word	0x42000c00
    aae8:	20003d24 	.word	0x20003d24
    aaec:	0000a80d 	.word	0x0000a80d
    aaf0:	0000a721 	.word	0x0000a721

0000aaf4 <task_3s>:
	adc_enable(&adc_instance);
}


static void task_3s(void *args)
{
    aaf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaf6:	b0cd      	sub	sp, #308	; 0x134
    aaf8:	af04      	add	r7, sp, #16
    aafa:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    aafc:	2300      	movs	r3, #0
    aafe:	2400      	movs	r4, #0
    ab00:	228c      	movs	r2, #140	; 0x8c
    ab02:	0052      	lsls	r2, r2, #1
    ab04:	18ba      	adds	r2, r7, r2
    ab06:	6013      	str	r3, [r2, #0]
    ab08:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    ab0a:	2389      	movs	r3, #137	; 0x89
    ab0c:	005b      	lsls	r3, r3, #1
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	2200      	movs	r2, #0
    ab12:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    ab14:	4b4f      	ldr	r3, [pc, #316]	; (ac54 <task_3s+0x160>)
    ab16:	2290      	movs	r2, #144	; 0x90
    ab18:	0052      	lsls	r2, r2, #1
    ab1a:	4694      	mov	ip, r2
    ab1c:	44bc      	add	ip, r7
    ab1e:	4463      	add	r3, ip
    ab20:	0018      	movs	r0, r3
    ab22:	2380      	movs	r3, #128	; 0x80
    ab24:	005b      	lsls	r3, r3, #1
    ab26:	001a      	movs	r2, r3
    ab28:	2100      	movs	r1, #0
    ab2a:	4b4b      	ldr	r3, [pc, #300]	; (ac58 <task_3s+0x164>)
    ab2c:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    ab2e:	4b4b      	ldr	r3, [pc, #300]	; (ac5c <task_3s+0x168>)
    ab30:	228a      	movs	r2, #138	; 0x8a
    ab32:	0052      	lsls	r2, r2, #1
    ab34:	18ba      	adds	r2, r7, r2
    ab36:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    ab38:	4b49      	ldr	r3, [pc, #292]	; (ac60 <task_3s+0x16c>)
    ab3a:	4798      	blx	r3
    ab3c:	0003      	movs	r3, r0
    ab3e:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);        
    ab40:	238a      	movs	r3, #138	; 0x8a
    ab42:	005b      	lsls	r3, r3, #1
    ab44:	18fb      	adds	r3, r7, r3
    ab46:	681a      	ldr	r2, [r3, #0]
    ab48:	230c      	movs	r3, #12
    ab4a:	18fb      	adds	r3, r7, r3
    ab4c:	0011      	movs	r1, r2
    ab4e:	0018      	movs	r0, r3
    ab50:	4b44      	ldr	r3, [pc, #272]	; (ac64 <task_3s+0x170>)
    ab52:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    ab54:	4b44      	ldr	r3, [pc, #272]	; (ac68 <task_3s+0x174>)
    ab56:	781b      	ldrb	r3, [r3, #0]
    ab58:	b2db      	uxtb	r3, r3
    ab5a:	2b03      	cmp	r3, #3
    ab5c:	d1f0      	bne.n	ab40 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    ab5e:	4b43      	ldr	r3, [pc, #268]	; (ac6c <task_3s+0x178>)
    ab60:	681a      	ldr	r2, [r3, #0]
    ab62:	4b43      	ldr	r3, [pc, #268]	; (ac70 <task_3s+0x17c>)
    ab64:	601a      	str	r2, [r3, #0]
            adc_start_conversion(&adc_instance);            
    ab66:	4b43      	ldr	r3, [pc, #268]	; (ac74 <task_3s+0x180>)
    ab68:	0018      	movs	r0, r3
    ab6a:	4b43      	ldr	r3, [pc, #268]	; (ac78 <task_3s+0x184>)
    ab6c:	4798      	blx	r3
            temperature = 0;
    ab6e:	2300      	movs	r3, #0
    ab70:	2400      	movs	r4, #0
    ab72:	228c      	movs	r2, #140	; 0x8c
    ab74:	0052      	lsls	r2, r2, #1
    ab76:	18ba      	adds	r2, r7, r2
    ab78:	6013      	str	r3, [r2, #0]
    ab7a:	6054      	str	r4, [r2, #4]
            adc_read(&adc_instance, &light);
    ab7c:	2389      	movs	r3, #137	; 0x89
    ab7e:	005b      	lsls	r3, r3, #1
    ab80:	18fa      	adds	r2, r7, r3
    ab82:	4b3c      	ldr	r3, [pc, #240]	; (ac74 <task_3s+0x180>)
    ab84:	0011      	movs	r1, r2
    ab86:	0018      	movs	r0, r3
    ab88:	4b3c      	ldr	r3, [pc, #240]	; (ac7c <task_3s+0x188>)
    ab8a:	4798      	blx	r3
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    ab8c:	4b3c      	ldr	r3, [pc, #240]	; (ac80 <task_3s+0x18c>)
    ab8e:	228c      	movs	r2, #140	; 0x8c
    ab90:	0052      	lsls	r2, r2, #1
    ab92:	18ba      	adds	r2, r7, r2
    ab94:	6810      	ldr	r0, [r2, #0]
    ab96:	6851      	ldr	r1, [r2, #4]
    ab98:	4798      	blx	r3
    ab9a:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    ab9c:	4c39      	ldr	r4, [pc, #228]	; (ac84 <task_3s+0x190>)
    ab9e:	2200      	movs	r2, #0
    aba0:	4b39      	ldr	r3, [pc, #228]	; (ac88 <task_3s+0x194>)
    aba2:	218c      	movs	r1, #140	; 0x8c
    aba4:	0049      	lsls	r1, r1, #1
    aba6:	1879      	adds	r1, r7, r1
    aba8:	6808      	ldr	r0, [r1, #0]
    abaa:	6849      	ldr	r1, [r1, #4]
    abac:	47a0      	blx	r4
    abae:	0003      	movs	r3, r0
    abb0:	000c      	movs	r4, r1
    abb2:	0019      	movs	r1, r3
    abb4:	0022      	movs	r2, r4
    abb6:	4b32      	ldr	r3, [pc, #200]	; (ac80 <task_3s+0x18c>)
    abb8:	0008      	movs	r0, r1
    abba:	0011      	movs	r1, r2
    abbc:	4798      	blx	r3
    abbe:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    abc0:	4b32      	ldr	r3, [pc, #200]	; (ac8c <task_3s+0x198>)
    abc2:	2164      	movs	r1, #100	; 0x64
    abc4:	0010      	movs	r0, r2
    abc6:	4798      	blx	r3
    abc8:	000b      	movs	r3, r1
    abca:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    abcc:	2389      	movs	r3, #137	; 0x89
    abce:	005b      	lsls	r3, r3, #1
    abd0:	18fb      	adds	r3, r7, r3
    abd2:	881b      	ldrh	r3, [r3, #0]
    abd4:	001a      	movs	r2, r3
    abd6:	2380      	movs	r3, #128	; 0x80
    abd8:	015b      	lsls	r3, r3, #5
    abda:	1a9b      	subs	r3, r3, r2
    abdc:	2264      	movs	r2, #100	; 0x64
    abde:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    abe0:	2b00      	cmp	r3, #0
    abe2:	da02      	bge.n	abea <task_3s+0xf6>
    abe4:	4a2a      	ldr	r2, [pc, #168]	; (ac90 <task_3s+0x19c>)
    abe6:	4694      	mov	ip, r2
    abe8:	4463      	add	r3, ip
    abea:	131b      	asrs	r3, r3, #12
    abec:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    abee:	2017      	movs	r0, #23
    abf0:	4b28      	ldr	r3, [pc, #160]	; (ac94 <task_3s+0x1a0>)
    abf2:	4798      	blx	r3
    abf4:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    abf6:	d001      	beq.n	abfc <task_3s+0x108>
    abf8:	4b27      	ldr	r3, [pc, #156]	; (ac98 <task_3s+0x1a4>)
    abfa:	e000      	b.n	abfe <task_3s+0x10a>
    abfc:	4b27      	ldr	r3, [pc, #156]	; (ac9c <task_3s+0x1a8>)
    abfe:	4a28      	ldr	r2, [pc, #160]	; (aca0 <task_3s+0x1ac>)
    ac00:	4928      	ldr	r1, [pc, #160]	; (aca4 <task_3s+0x1b0>)
    ac02:	2010      	movs	r0, #16
    ac04:	1838      	adds	r0, r7, r0
    ac06:	9302      	str	r3, [sp, #8]
    ac08:	9501      	str	r5, [sp, #4]
    ac0a:	9400      	str	r4, [sp, #0]
    ac0c:	0033      	movs	r3, r6
    ac0e:	4c26      	ldr	r4, [pc, #152]	; (aca8 <task_3s+0x1b4>)
    ac10:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    ac12:	2310      	movs	r3, #16
    ac14:	18fa      	adds	r2, r7, r3
    ac16:	4b25      	ldr	r3, [pc, #148]	; (acac <task_3s+0x1b8>)
    ac18:	0011      	movs	r1, r2
    ac1a:	0018      	movs	r0, r3
    ac1c:	4b24      	ldr	r3, [pc, #144]	; (acb0 <task_3s+0x1bc>)
    ac1e:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    ac20:	4b24      	ldr	r3, [pc, #144]	; (acb4 <task_3s+0x1c0>)
    ac22:	681b      	ldr	r3, [r3, #0]
    ac24:	2253      	movs	r2, #83	; 0x53
    ac26:	569b      	ldrsb	r3, [r3, r2]
    ac28:	0018      	movs	r0, r3
    ac2a:	4b23      	ldr	r3, [pc, #140]	; (acb8 <task_3s+0x1c4>)
    ac2c:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    ac2e:	4b21      	ldr	r3, [pc, #132]	; (acb4 <task_3s+0x1c0>)
    ac30:	681b      	ldr	r3, [r3, #0]
    ac32:	2252      	movs	r2, #82	; 0x52
    ac34:	2100      	movs	r1, #0
    ac36:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    ac38:	4b1e      	ldr	r3, [pc, #120]	; (acb4 <task_3s+0x1c0>)
    ac3a:	681b      	ldr	r3, [r3, #0]
    ac3c:	2250      	movs	r2, #80	; 0x50
    ac3e:	2102      	movs	r1, #2
    ac40:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    ac42:	4b1c      	ldr	r3, [pc, #112]	; (acb4 <task_3s+0x1c0>)
    ac44:	681b      	ldr	r3, [r3, #0]
    ac46:	2210      	movs	r2, #16
    ac48:	18ba      	adds	r2, r7, r2
    ac4a:	4915      	ldr	r1, [pc, #84]	; (aca0 <task_3s+0x1ac>)
    ac4c:	0018      	movs	r0, r3
    ac4e:	4b1b      	ldr	r3, [pc, #108]	; (acbc <task_3s+0x1c8>)
    ac50:	4798      	blx	r3
        }        
    }
    ac52:	e775      	b.n	ab40 <task_3s+0x4c>
    ac54:	fffffef0 	.word	0xfffffef0
    ac58:	0000c023 	.word	0x0000c023
    ac5c:	00000bb8 	.word	0x00000bb8
    ac60:	000094bd 	.word	0x000094bd
    ac64:	00009221 	.word	0x00009221
    ac68:	20003d0c 	.word	0x20003d0c
    ac6c:	20003d10 	.word	0x20003d10
    ac70:	20003d14 	.word	0x20003d14
    ac74:	20004690 	.word	0x20004690
    ac78:	0000a49d 	.word	0x0000a49d
    ac7c:	0000a4e5 	.word	0x0000a4e5
    ac80:	0000bebd 	.word	0x0000bebd
    ac84:	0000b9c9 	.word	0x0000b9c9
    ac88:	40590000 	.word	0x40590000
    ac8c:	0000b965 	.word	0x0000b965
    ac90:	00000fff 	.word	0x00000fff
    ac94:	0000a585 	.word	0x0000a585
    ac98:	0000e678 	.word	0x0000e678
    ac9c:	0000e67c 	.word	0x0000e67c
    aca0:	20000020 	.word	0x20000020
    aca4:	0000e680 	.word	0x0000e680
    aca8:	0000c8e5 	.word	0x0000c8e5
    acac:	0000e6c4 	.word	0x0000e6c4
    acb0:	0000c5d9 	.word	0x0000c5d9
    acb4:	20003d20 	.word	0x20003d20
    acb8:	000041bd 	.word	0x000041bd
    acbc:	0000b265 	.word	0x0000b265

0000acc0 <task_1s>:
}

static void task_1s(void *args)
{
    acc0:	b580      	push	{r7, lr}
    acc2:	b086      	sub	sp, #24
    acc4:	af00      	add	r7, sp, #0
    acc6:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    acc8:	4b47      	ldr	r3, [pc, #284]	; (ade8 <task_1s+0x128>)
    acca:	4798      	blx	r3
    accc:	0003      	movs	r3, r0
    acce:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    acd0:	23fa      	movs	r3, #250	; 0xfa
    acd2:	009b      	lsls	r3, r3, #2
    acd4:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    acd6:	697a      	ldr	r2, [r7, #20]
    acd8:	230c      	movs	r3, #12
    acda:	18fb      	adds	r3, r7, r3
    acdc:	0011      	movs	r1, r2
    acde:	0018      	movs	r0, r3
    ace0:	4b42      	ldr	r3, [pc, #264]	; (adec <task_1s+0x12c>)
    ace2:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    ace4:	4b42      	ldr	r3, [pc, #264]	; (adf0 <task_1s+0x130>)
    ace6:	781b      	ldrb	r3, [r3, #0]
    ace8:	b2db      	uxtb	r3, r3
    acea:	2b03      	cmp	r3, #3
    acec:	d000      	beq.n	acf0 <task_1s+0x30>
    acee:	e078      	b.n	ade2 <task_1s+0x122>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    acf0:	4b40      	ldr	r3, [pc, #256]	; (adf4 <task_1s+0x134>)
    acf2:	681b      	ldr	r3, [r3, #0]
    acf4:	2252      	movs	r2, #82	; 0x52
    acf6:	5c9b      	ldrb	r3, [r3, r2]
    acf8:	2b00      	cmp	r3, #0
    acfa:	d000      	beq.n	acfe <task_1s+0x3e>
    acfc:	e071      	b.n	ade2 <task_1s+0x122>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    acfe:	4b3d      	ldr	r3, [pc, #244]	; (adf4 <task_1s+0x134>)
    ad00:	681b      	ldr	r3, [r3, #0]
    ad02:	2251      	movs	r2, #81	; 0x51
    ad04:	5c9b      	ldrb	r3, [r3, r2]
    ad06:	2b00      	cmp	r3, #0
    ad08:	d00b      	beq.n	ad22 <task_1s+0x62>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    ad0a:	4b3a      	ldr	r3, [pc, #232]	; (adf4 <task_1s+0x134>)
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	2251      	movs	r2, #81	; 0x51
    ad10:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    ad12:	2b02      	cmp	r3, #2
    ad14:	d110      	bne.n	ad38 <task_1s+0x78>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    ad16:	4b37      	ldr	r3, [pc, #220]	; (adf4 <task_1s+0x134>)
    ad18:	681b      	ldr	r3, [r3, #0]
    ad1a:	2250      	movs	r2, #80	; 0x50
    ad1c:	5c9b      	ldrb	r3, [r3, r2]
    ad1e:	2b00      	cmp	r3, #0
    ad20:	d10a      	bne.n	ad38 <task_1s+0x78>
                    printf("main: subscribe event, PNR_OK\r\n");
    ad22:	4b35      	ldr	r3, [pc, #212]	; (adf8 <task_1s+0x138>)
    ad24:	0018      	movs	r0, r3
    ad26:	4b35      	ldr	r3, [pc, #212]	; (adfc <task_1s+0x13c>)
    ad28:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    ad2a:	4b32      	ldr	r3, [pc, #200]	; (adf4 <task_1s+0x134>)
    ad2c:	681b      	ldr	r3, [r3, #0]
    ad2e:	4a34      	ldr	r2, [pc, #208]	; (ae00 <task_1s+0x140>)
    ad30:	0011      	movs	r1, r2
    ad32:	0018      	movs	r0, r3
    ad34:	4b33      	ldr	r3, [pc, #204]	; (ae04 <task_1s+0x144>)
    ad36:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    ad38:	4b2e      	ldr	r3, [pc, #184]	; (adf4 <task_1s+0x134>)
    ad3a:	681b      	ldr	r3, [r3, #0]
    ad3c:	0018      	movs	r0, r3
    ad3e:	4b32      	ldr	r3, [pc, #200]	; (ae08 <task_1s+0x148>)
    ad40:	4798      	blx	r3
    ad42:	0003      	movs	r3, r0
    ad44:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    ad46:	693b      	ldr	r3, [r7, #16]
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d031      	beq.n	adb0 <task_1s+0xf0>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    ad4c:	693b      	ldr	r3, [r7, #16]
    ad4e:	3302      	adds	r3, #2
    ad50:	492e      	ldr	r1, [pc, #184]	; (ae0c <task_1s+0x14c>)
    ad52:	2203      	movs	r2, #3
    ad54:	0018      	movs	r0, r3
    ad56:	4b2e      	ldr	r3, [pc, #184]	; (ae10 <task_1s+0x150>)
    ad58:	4798      	blx	r3
    ad5a:	1e03      	subs	r3, r0, #0
    ad5c:	d121      	bne.n	ada2 <task_1s+0xe2>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    ad5e:	693a      	ldr	r2, [r7, #16]
    ad60:	4b2c      	ldr	r3, [pc, #176]	; (ae14 <task_1s+0x154>)
    ad62:	0011      	movs	r1, r2
    ad64:	0018      	movs	r0, r3
    ad66:	4b2c      	ldr	r3, [pc, #176]	; (ae18 <task_1s+0x158>)
    ad68:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    ad6a:	693b      	ldr	r3, [r7, #16]
    ad6c:	3308      	adds	r3, #8
    ad6e:	492b      	ldr	r1, [pc, #172]	; (ae1c <task_1s+0x15c>)
    ad70:	2202      	movs	r2, #2
    ad72:	0018      	movs	r0, r3
    ad74:	4b26      	ldr	r3, [pc, #152]	; (ae10 <task_1s+0x150>)
    ad76:	4798      	blx	r3
    ad78:	1e03      	subs	r3, r0, #0
    ad7a:	d104      	bne.n	ad86 <task_1s+0xc6>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    ad7c:	2100      	movs	r1, #0
    ad7e:	2017      	movs	r0, #23
    ad80:	4b27      	ldr	r3, [pc, #156]	; (ae20 <task_1s+0x160>)
    ad82:	4798      	blx	r3
    ad84:	e7d8      	b.n	ad38 <task_1s+0x78>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    ad86:	693b      	ldr	r3, [r7, #16]
    ad88:	3308      	adds	r3, #8
    ad8a:	4926      	ldr	r1, [pc, #152]	; (ae24 <task_1s+0x164>)
    ad8c:	2203      	movs	r2, #3
    ad8e:	0018      	movs	r0, r3
    ad90:	4b1f      	ldr	r3, [pc, #124]	; (ae10 <task_1s+0x150>)
    ad92:	4798      	blx	r3
    ad94:	1e03      	subs	r3, r0, #0
    ad96:	d1cf      	bne.n	ad38 <task_1s+0x78>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    ad98:	2101      	movs	r1, #1
    ad9a:	2017      	movs	r0, #23
    ad9c:	4b20      	ldr	r3, [pc, #128]	; (ae20 <task_1s+0x160>)
    ad9e:	4798      	blx	r3
    ada0:	e7ca      	b.n	ad38 <task_1s+0x78>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    ada2:	693a      	ldr	r2, [r7, #16]
    ada4:	4b20      	ldr	r3, [pc, #128]	; (ae28 <task_1s+0x168>)
    ada6:	0011      	movs	r1, r2
    ada8:	0018      	movs	r0, r3
    adaa:	4b1b      	ldr	r3, [pc, #108]	; (ae18 <task_1s+0x158>)
    adac:	4798      	blx	r3
                    }
                }
    adae:	e7c3      	b.n	ad38 <task_1s+0x78>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    adb0:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    adb2:	4b1e      	ldr	r3, [pc, #120]	; (ae2c <task_1s+0x16c>)
    adb4:	681a      	ldr	r2, [r3, #0]
    adb6:	4b1e      	ldr	r3, [pc, #120]	; (ae30 <task_1s+0x170>)
    adb8:	681b      	ldr	r3, [r3, #0]
    adba:	1ad2      	subs	r2, r2, r3
    adbc:	23fa      	movs	r3, #250	; 0xfa
    adbe:	009b      	lsls	r3, r3, #2
    adc0:	429a      	cmp	r2, r3
    adc2:	d90e      	bls.n	ade2 <task_1s+0x122>
                    gu32subscribeDelay = gu32MsTicks;
    adc4:	4b19      	ldr	r3, [pc, #100]	; (ae2c <task_1s+0x16c>)
    adc6:	681a      	ldr	r2, [r3, #0]
    adc8:	4b19      	ldr	r3, [pc, #100]	; (ae30 <task_1s+0x170>)
    adca:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    adcc:	4b19      	ldr	r3, [pc, #100]	; (ae34 <task_1s+0x174>)
    adce:	0018      	movs	r0, r3
    add0:	4b0a      	ldr	r3, [pc, #40]	; (adfc <task_1s+0x13c>)
    add2:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    add4:	4b07      	ldr	r3, [pc, #28]	; (adf4 <task_1s+0x134>)
    add6:	681b      	ldr	r3, [r3, #0]
    add8:	4a09      	ldr	r2, [pc, #36]	; (ae00 <task_1s+0x140>)
    adda:	0011      	movs	r1, r2
    addc:	0018      	movs	r0, r3
    adde:	4b09      	ldr	r3, [pc, #36]	; (ae04 <task_1s+0x144>)
    ade0:	4798      	blx	r3
                }
            }
        }    
        
       display_led_test_1Hz();
    ade2:	4b15      	ldr	r3, [pc, #84]	; (ae38 <task_1s+0x178>)
    ade4:	4798      	blx	r3
    }
    ade6:	e776      	b.n	acd6 <task_1s+0x16>
    ade8:	000094bd 	.word	0x000094bd
    adec:	00009221 	.word	0x00009221
    adf0:	20003d0c 	.word	0x20003d0c
    adf4:	20003d20 	.word	0x20003d20
    adf8:	0000e6e0 	.word	0x0000e6e0
    adfc:	0000c6f9 	.word	0x0000c6f9
    ae00:	20000020 	.word	0x20000020
    ae04:	0000b45d 	.word	0x0000b45d
    ae08:	0000b5d9 	.word	0x0000b5d9
    ae0c:	0000e700 	.word	0x0000e700
    ae10:	0000c937 	.word	0x0000c937
    ae14:	0000e704 	.word	0x0000e704
    ae18:	0000c5d9 	.word	0x0000c5d9
    ae1c:	0000e730 	.word	0x0000e730
    ae20:	0000a5c9 	.word	0x0000a5c9
    ae24:	0000e734 	.word	0x0000e734
    ae28:	0000e738 	.word	0x0000e738
    ae2c:	20003d10 	.word	0x20003d10
    ae30:	20003d18 	.word	0x20003d18
    ae34:	0000e758 	.word	0x0000e758
    ae38:	0000082d 	.word	0x0000082d

0000ae3c <task_50Hz>:

}

static void task_50Hz(void *args)
{
    ae3c:	b580      	push	{r7, lr}
    ae3e:	b084      	sub	sp, #16
    ae40:	af00      	add	r7, sp, #0
    ae42:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    ae44:	4b07      	ldr	r3, [pc, #28]	; (ae64 <task_50Hz+0x28>)
    ae46:	4798      	blx	r3
    ae48:	0003      	movs	r3, r0
    ae4a:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(30);    
    ae4c:	231e      	movs	r3, #30
    ae4e:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    ae50:	68fa      	ldr	r2, [r7, #12]
    ae52:	2308      	movs	r3, #8
    ae54:	18fb      	adds	r3, r7, r3
    ae56:	0011      	movs	r1, r2
    ae58:	0018      	movs	r0, r3
    ae5a:	4b03      	ldr	r3, [pc, #12]	; (ae68 <task_50Hz+0x2c>)
    ae5c:	4798      	blx	r3

        display_update_50Hz();
    ae5e:	4b03      	ldr	r3, [pc, #12]	; (ae6c <task_50Hz+0x30>)
    ae60:	4798      	blx	r3

    }
    ae62:	e7f5      	b.n	ae50 <task_50Hz+0x14>
    ae64:	000094bd 	.word	0x000094bd
    ae68:	00009221 	.word	0x00009221
    ae6c:	000007ed 	.word	0x000007ed

0000ae70 <task_Buzzer>:
}

static void task_Buzzer(void *args)
{
    ae70:	b590      	push	{r4, r7, lr}
    ae72:	b099      	sub	sp, #100	; 0x64
    ae74:	af00      	add	r7, sp, #0
    ae76:	6078      	str	r0, [r7, #4]
    struct tc_module buzz_module;
    struct tc_config buzz_config;

    TickType_t lastTimer;

    tc_get_config_defaults(&buzz_config);
    ae78:	2310      	movs	r3, #16
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	0018      	movs	r0, r3
    ae7e:	4b28      	ldr	r3, [pc, #160]	; (af20 <task_Buzzer+0xb0>)
    ae80:	4798      	blx	r3
    buzz_config.clock_source = GCLK_GENERATOR_5; // ~500kHz
    ae82:	2310      	movs	r3, #16
    ae84:	18fb      	adds	r3, r7, r3
    ae86:	2205      	movs	r2, #5
    ae88:	701a      	strb	r2, [r3, #0]
    buzz_config.run_in_standby = true;
    ae8a:	2310      	movs	r3, #16
    ae8c:	18fb      	adds	r3, r7, r3
    ae8e:	2201      	movs	r2, #1
    ae90:	705a      	strb	r2, [r3, #1]
    buzz_config.counter_size = TC_COUNTER_SIZE_8BIT;
    ae92:	2310      	movs	r3, #16
    ae94:	18fb      	adds	r3, r7, r3
    ae96:	2204      	movs	r2, #4
    ae98:	709a      	strb	r2, [r3, #2]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = true;
    ae9a:	2310      	movs	r3, #16
    ae9c:	18fb      	adds	r3, r7, r3
    ae9e:	2201      	movs	r2, #1
    aea0:	771a      	strb	r2, [r3, #28]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = (PINMUX_PB11E_TC5_WO1) >> 16;
    aea2:	2310      	movs	r3, #16
    aea4:	18fb      	adds	r3, r7, r3
    aea6:	222b      	movs	r2, #43	; 0x2b
    aea8:	621a      	str	r2, [r3, #32]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = PINMUX_PB11E_TC5_WO1;
    aeaa:	2310      	movs	r3, #16
    aeac:	18fb      	adds	r3, r7, r3
    aeae:	4a1d      	ldr	r2, [pc, #116]	; (af24 <task_Buzzer+0xb4>)
    aeb0:	625a      	str	r2, [r3, #36]	; 0x24
    buzz_config.counter_8_bit.period = (500000 / BUZZER_FREQUENCY) / 2;
    aeb2:	2310      	movs	r3, #16
    aeb4:	18fb      	adds	r3, r7, r3
    aeb6:	2229      	movs	r2, #41	; 0x29
    aeb8:	213e      	movs	r1, #62	; 0x3e
    aeba:	5499      	strb	r1, [r3, r2]
    buzz_config.counter_8_bit.value = 0;
    aebc:	2310      	movs	r3, #16
    aebe:	18fb      	adds	r3, r7, r3
    aec0:	2228      	movs	r2, #40	; 0x28
    aec2:	2100      	movs	r1, #0
    aec4:	5499      	strb	r1, [r3, r2]

    tc_init(&buzz_module, TC5, &buzz_config);    
    aec6:	2310      	movs	r3, #16
    aec8:	18fa      	adds	r2, r7, r3
    aeca:	4917      	ldr	r1, [pc, #92]	; (af28 <task_Buzzer+0xb8>)
    aecc:	2344      	movs	r3, #68	; 0x44
    aece:	18fb      	adds	r3, r7, r3
    aed0:	0018      	movs	r0, r3
    aed2:	4b16      	ldr	r3, [pc, #88]	; (af2c <task_Buzzer+0xbc>)
    aed4:	4798      	blx	r3

    while(1) {
        xSemaphoreTake(buzzer_sem, portMAX_DELAY);
    aed6:	4b16      	ldr	r3, [pc, #88]	; (af30 <task_Buzzer+0xc0>)
    aed8:	6818      	ldr	r0, [r3, #0]
    aeda:	2301      	movs	r3, #1
    aedc:	425a      	negs	r2, r3
    aede:	2300      	movs	r3, #0
    aee0:	2100      	movs	r1, #0
    aee2:	4c14      	ldr	r4, [pc, #80]	; (af34 <task_Buzzer+0xc4>)
    aee4:	47a0      	blx	r4

        // When another task gives up the semaphore, the buzzer will run 
        // for the set delay time.
        tc_set_count_value(&buzz_module, 0);
    aee6:	2344      	movs	r3, #68	; 0x44
    aee8:	18fb      	adds	r3, r7, r3
    aeea:	2100      	movs	r1, #0
    aeec:	0018      	movs	r0, r3
    aeee:	4b12      	ldr	r3, [pc, #72]	; (af38 <task_Buzzer+0xc8>)
    aef0:	4798      	blx	r3
        tc_enable(&buzz_module);
    aef2:	2344      	movs	r3, #68	; 0x44
    aef4:	18fb      	adds	r3, r7, r3
    aef6:	0018      	movs	r0, r3
    aef8:	4b10      	ldr	r3, [pc, #64]	; (af3c <task_Buzzer+0xcc>)
    aefa:	4798      	blx	r3
        lastTimer = xTaskGetTickCount();
    aefc:	4b10      	ldr	r3, [pc, #64]	; (af40 <task_Buzzer+0xd0>)
    aefe:	4798      	blx	r3
    af00:	0003      	movs	r3, r0
    af02:	60fb      	str	r3, [r7, #12]
        vTaskDelayUntil(&lastTimer, pdMS_TO_TICKS(BUZZER_ON_TIME));
    af04:	23fa      	movs	r3, #250	; 0xfa
    af06:	005a      	lsls	r2, r3, #1
    af08:	230c      	movs	r3, #12
    af0a:	18fb      	adds	r3, r7, r3
    af0c:	0011      	movs	r1, r2
    af0e:	0018      	movs	r0, r3
    af10:	4b0c      	ldr	r3, [pc, #48]	; (af44 <task_Buzzer+0xd4>)
    af12:	4798      	blx	r3
        tc_disable(&buzz_module);
    af14:	2344      	movs	r3, #68	; 0x44
    af16:	18fb      	adds	r3, r7, r3
    af18:	0018      	movs	r0, r3
    af1a:	4b0b      	ldr	r3, [pc, #44]	; (af48 <task_Buzzer+0xd8>)
    af1c:	4798      	blx	r3
    }
    af1e:	e7da      	b.n	aed6 <task_Buzzer+0x66>
    af20:	0000a8a5 	.word	0x0000a8a5
    af24:	002b0004 	.word	0x002b0004
    af28:	42003400 	.word	0x42003400
    af2c:	00000315 	.word	0x00000315
    af30:	200044e4 	.word	0x200044e4
    af34:	000089ad 	.word	0x000089ad
    af38:	00000771 	.word	0x00000771
    af3c:	0000a92d 	.word	0x0000a92d
    af40:	000094bd 	.word	0x000094bd
    af44:	00009221 	.word	0x00009221
    af48:	0000a965 	.word	0x0000a965

0000af4c <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{   
    af4c:	b580      	push	{r7, lr}
    af4e:	af00      	add	r7, sp, #0
   // NOTE: NO BLOCKING FUNCTIONS MAY GO IN THE IDLE HOOK
   m2m_wifi_handle_events(NULL);   
    af50:	2000      	movs	r0, #0
    af52:	4b02      	ldr	r3, [pc, #8]	; (af5c <vApplicationIdleHook+0x10>)
    af54:	4798      	blx	r3
}
    af56:	46c0      	nop			; (mov r8, r8)
    af58:	46bd      	mov	sp, r7
    af5a:	bd80      	pop	{r7, pc}
    af5c:	00002381 	.word	0x00002381

0000af60 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    af60:	b580      	push	{r7, lr}
    af62:	b082      	sub	sp, #8
    af64:	af00      	add	r7, sp, #0
    af66:	6078      	str	r0, [r7, #4]
    af68:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    af6a:	683a      	ldr	r2, [r7, #0]
    af6c:	4b02      	ldr	r3, [pc, #8]	; (af78 <vApplicationStackOverflowHook+0x18>)
    af6e:	0011      	movs	r1, r2
    af70:	0018      	movs	r0, r3
    af72:	4b02      	ldr	r3, [pc, #8]	; (af7c <vApplicationStackOverflowHook+0x1c>)
    af74:	4798      	blx	r3
    while (1) {}
    af76:	e7fe      	b.n	af76 <vApplicationStackOverflowHook+0x16>
    af78:	0000e77c 	.word	0x0000e77c
    af7c:	0000c5d9 	.word	0x0000c5d9

0000af80 <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    af80:	b590      	push	{r4, r7, lr}
    af82:	b08b      	sub	sp, #44	; 0x2c
    af84:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    af86:	4b28      	ldr	r3, [pc, #160]	; (b028 <main+0xa8>)
    af88:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    af8a:	4b28      	ldr	r3, [pc, #160]	; (b02c <main+0xac>)
    af8c:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();	
    af8e:	4b28      	ldr	r3, [pc, #160]	; (b030 <main+0xb0>)
    af90:	4798      	blx	r3

    /* Initialize the display */
    display_init();
    af92:	4b28      	ldr	r3, [pc, #160]	; (b034 <main+0xb4>)
    af94:	4798      	blx	r3

	/* Initialize the Button/LED. */
	//configure_button_led();

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    af96:	4b28      	ldr	r3, [pc, #160]	; (b038 <main+0xb8>)
    af98:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    af9a:	2308      	movs	r3, #8
    af9c:	18fb      	adds	r3, r7, r3
    af9e:	2218      	movs	r2, #24
    afa0:	2100      	movs	r1, #0
    afa2:	0018      	movs	r0, r3
    afa4:	4b25      	ldr	r3, [pc, #148]	; (b03c <main+0xbc>)
    afa6:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    afa8:	2308      	movs	r3, #8
    afaa:	18fb      	adds	r3, r7, r3
    afac:	4a24      	ldr	r2, [pc, #144]	; (b040 <main+0xc0>)
    afae:	601a      	str	r2, [r3, #0]
	///* Connect to AP using Wi-Fi settings from main.h. */
	//printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
	//m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			//MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);    

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE + 256, 0, TASK_3S_PRIORITY, NULL);
    afb0:	2380      	movs	r3, #128	; 0x80
    afb2:	009a      	lsls	r2, r3, #2
    afb4:	4923      	ldr	r1, [pc, #140]	; (b044 <main+0xc4>)
    afb6:	4824      	ldr	r0, [pc, #144]	; (b048 <main+0xc8>)
    afb8:	2300      	movs	r3, #0
    afba:	9301      	str	r3, [sp, #4]
    afbc:	2301      	movs	r3, #1
    afbe:	9300      	str	r3, [sp, #0]
    afc0:	2300      	movs	r3, #0
    afc2:	4c22      	ldr	r4, [pc, #136]	; (b04c <main+0xcc>)
    afc4:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE + 256, 0, TASK_1S_PRIORITY, NULL);    
    afc6:	2380      	movs	r3, #128	; 0x80
    afc8:	009a      	lsls	r2, r3, #2
    afca:	4921      	ldr	r1, [pc, #132]	; (b050 <main+0xd0>)
    afcc:	4821      	ldr	r0, [pc, #132]	; (b054 <main+0xd4>)
    afce:	2300      	movs	r3, #0
    afd0:	9301      	str	r3, [sp, #4]
    afd2:	2301      	movs	r3, #1
    afd4:	9300      	str	r3, [sp, #0]
    afd6:	2300      	movs	r3, #0
    afd8:	4c1c      	ldr	r4, [pc, #112]	; (b04c <main+0xcc>)
    afda:	47a0      	blx	r4
    xTaskCreate(task_50Hz, "task_50Hz", configMINIMAL_STACK_SIZE + 256, 0, TASK_50HZ_PRIORITY, NULL); 
    afdc:	2380      	movs	r3, #128	; 0x80
    afde:	009a      	lsls	r2, r3, #2
    afe0:	491d      	ldr	r1, [pc, #116]	; (b058 <main+0xd8>)
    afe2:	481e      	ldr	r0, [pc, #120]	; (b05c <main+0xdc>)
    afe4:	2300      	movs	r3, #0
    afe6:	9301      	str	r3, [sp, #4]
    afe8:	2301      	movs	r3, #1
    afea:	9300      	str	r3, [sp, #0]
    afec:	2300      	movs	r3, #0
    afee:	4c17      	ldr	r4, [pc, #92]	; (b04c <main+0xcc>)
    aff0:	47a0      	blx	r4
    xTaskCreate(task_Buzzer, "task_Buzzer", 100, 0, tskIDLE_PRIORITY, NULL);
    aff2:	491b      	ldr	r1, [pc, #108]	; (b060 <main+0xe0>)
    aff4:	481b      	ldr	r0, [pc, #108]	; (b064 <main+0xe4>)
    aff6:	2300      	movs	r3, #0
    aff8:	9301      	str	r3, [sp, #4]
    affa:	2300      	movs	r3, #0
    affc:	9300      	str	r3, [sp, #0]
    affe:	2300      	movs	r3, #0
    b000:	2264      	movs	r2, #100	; 0x64
    b002:	4c12      	ldr	r4, [pc, #72]	; (b04c <main+0xcc>)
    b004:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    b006:	2001      	movs	r0, #1
    b008:	4b17      	ldr	r3, [pc, #92]	; (b068 <main+0xe8>)
    b00a:	4798      	blx	r3
    b00c:	0002      	movs	r2, r0
    b00e:	4b17      	ldr	r3, [pc, #92]	; (b06c <main+0xec>)
    b010:	601a      	str	r2, [r3, #0]
    buzzer_sem = xSemaphoreCreateBinary();
    b012:	2203      	movs	r2, #3
    b014:	2100      	movs	r1, #0
    b016:	2001      	movs	r0, #1
    b018:	4b15      	ldr	r3, [pc, #84]	; (b070 <main+0xf0>)
    b01a:	4798      	blx	r3
    b01c:	0002      	movs	r2, r0
    b01e:	4b15      	ldr	r3, [pc, #84]	; (b074 <main+0xf4>)
    b020:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    b022:	4b15      	ldr	r3, [pc, #84]	; (b078 <main+0xf8>)
    b024:	4798      	blx	r3

    while(1) {}
    b026:	e7fe      	b.n	b026 <main+0xa6>
    b028:	00007bed 	.word	0x00007bed
    b02c:	0000aa81 	.word	0x0000aa81
    b030:	00001301 	.word	0x00001301
    b034:	000007d1 	.word	0x000007d1
    b038:	000014e5 	.word	0x000014e5
    b03c:	0000c023 	.word	0x0000c023
    b040:	0000a9a9 	.word	0x0000a9a9
    b044:	0000e794 	.word	0x0000e794
    b048:	0000aaf5 	.word	0x0000aaf5
    b04c:	00008fa9 	.word	0x00008fa9
    b050:	0000e79c 	.word	0x0000e79c
    b054:	0000acc1 	.word	0x0000acc1
    b058:	0000e7a4 	.word	0x0000e7a4
    b05c:	0000ae3d 	.word	0x0000ae3d
    b060:	0000e7b0 	.word	0x0000e7b0
    b064:	0000ae71 	.word	0x0000ae71
    b068:	0000856d 	.word	0x0000856d
    b06c:	200044dc 	.word	0x200044dc
    b070:	00008479 	.word	0x00008479
    b074:	200044e4 	.word	0x200044e4
    b078:	000092e9 	.word	0x000092e9

0000b07c <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    b07c:	b590      	push	{r4, r7, lr}
    b07e:	b0dd      	sub	sp, #372	; 0x174
    b080:	af00      	add	r7, sp, #0
    b082:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    b084:	687b      	ldr	r3, [r7, #4]
    b086:	2252      	movs	r2, #82	; 0x52
    b088:	5c9b      	ldrb	r3, [r3, r2]
    b08a:	2b03      	cmp	r3, #3
    b08c:	d126      	bne.n	b0dc <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    b08e:	4b1e      	ldr	r3, [pc, #120]	; (b108 <handle_transaction+0x8c>)
    b090:	22b8      	movs	r2, #184	; 0xb8
    b092:	0052      	lsls	r2, r2, #1
    b094:	4694      	mov	ip, r2
    b096:	44bc      	add	ip, r7
    b098:	4463      	add	r3, ip
    b09a:	0018      	movs	r0, r3
    b09c:	2366      	movs	r3, #102	; 0x66
    b09e:	33ff      	adds	r3, #255	; 0xff
    b0a0:	001a      	movs	r2, r3
    b0a2:	2100      	movs	r1, #0
    b0a4:	4b19      	ldr	r3, [pc, #100]	; (b10c <handle_transaction+0x90>)
    b0a6:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    b0a8:	687b      	ldr	r3, [r7, #4]
    b0aa:	3354      	adds	r3, #84	; 0x54
    b0ac:	001a      	movs	r2, r3
    b0ae:	4b18      	ldr	r3, [pc, #96]	; (b110 <handle_transaction+0x94>)
    b0b0:	4918      	ldr	r1, [pc, #96]	; (b114 <handle_transaction+0x98>)
    b0b2:	2008      	movs	r0, #8
    b0b4:	1838      	adds	r0, r7, r0
    b0b6:	4c18      	ldr	r4, [pc, #96]	; (b118 <handle_transaction+0x9c>)
    b0b8:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    b0ba:	687b      	ldr	r3, [r7, #4]
    b0bc:	2253      	movs	r2, #83	; 0x53
    b0be:	569c      	ldrsb	r4, [r3, r2]
    b0c0:	2308      	movs	r3, #8
    b0c2:	18fb      	adds	r3, r7, r3
    b0c4:	0018      	movs	r0, r3
    b0c6:	4b15      	ldr	r3, [pc, #84]	; (b11c <handle_transaction+0xa0>)
    b0c8:	4798      	blx	r3
    b0ca:	0003      	movs	r3, r0
    b0cc:	b29a      	uxth	r2, r3
    b0ce:	2308      	movs	r3, #8
    b0d0:	18f9      	adds	r1, r7, r3
    b0d2:	2300      	movs	r3, #0
    b0d4:	0020      	movs	r0, r4
    b0d6:	4c12      	ldr	r4, [pc, #72]	; (b120 <handle_transaction+0xa4>)
    b0d8:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    b0da:	e010      	b.n	b0fe <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    b0dc:	687b      	ldr	r3, [r7, #4]
    b0de:	2252      	movs	r2, #82	; 0x52
    b0e0:	5c9b      	ldrb	r3, [r3, r2]
    b0e2:	2b04      	cmp	r3, #4
    b0e4:	d10b      	bne.n	b0fe <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    b0e6:	687b      	ldr	r3, [r7, #4]
    b0e8:	2253      	movs	r2, #83	; 0x53
    b0ea:	5698      	ldrsb	r0, [r3, r2]
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	3354      	adds	r3, #84	; 0x54
    b0f0:	0019      	movs	r1, r3
    b0f2:	4c0c      	ldr	r4, [pc, #48]	; (b124 <handle_transaction+0xa8>)
    b0f4:	2380      	movs	r3, #128	; 0x80
    b0f6:	005a      	lsls	r2, r3, #1
    b0f8:	0023      	movs	r3, r4
    b0fa:	4c0b      	ldr	r4, [pc, #44]	; (b128 <handle_transaction+0xac>)
    b0fc:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    b0fe:	46c0      	nop			; (mov r8, r8)
    b100:	46bd      	mov	sp, r7
    b102:	b05d      	add	sp, #372	; 0x174
    b104:	bd90      	pop	{r4, r7, pc}
    b106:	46c0      	nop			; (mov r8, r8)
    b108:	fffffe98 	.word	0xfffffe98
    b10c:	0000c023 	.word	0x0000c023
    b110:	0000e7bc 	.word	0x0000e7bc
    b114:	0000e7d0 	.word	0x0000e7d0
    b118:	0000c8e5 	.word	0x0000c8e5
    b11c:	0000c929 	.word	0x0000c929
    b120:	00003ed9 	.word	0x00003ed9
    b124:	00007530 	.word	0x00007530
    b128:	0000403d 	.word	0x0000403d

0000b12c <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    b134:	687a      	ldr	r2, [r7, #4]
    b136:	4b09      	ldr	r3, [pc, #36]	; (b15c <valid_ctx_prt+0x30>)
    b138:	429a      	cmp	r2, r3
    b13a:	d305      	bcc.n	b148 <valid_ctx_prt+0x1c>
    b13c:	4b08      	ldr	r3, [pc, #32]	; (b160 <valid_ctx_prt+0x34>)
    b13e:	687a      	ldr	r2, [r7, #4]
    b140:	429a      	cmp	r2, r3
    b142:	d201      	bcs.n	b148 <valid_ctx_prt+0x1c>
    b144:	2301      	movs	r3, #1
    b146:	e000      	b.n	b14a <valid_ctx_prt+0x1e>
    b148:	2300      	movs	r3, #0
    b14a:	1c1a      	adds	r2, r3, #0
    b14c:	2301      	movs	r3, #1
    b14e:	4013      	ands	r3, r2
    b150:	b2db      	uxtb	r3, r3
}
    b152:	0018      	movs	r0, r3
    b154:	46bd      	mov	sp, r7
    b156:	b002      	add	sp, #8
    b158:	bd80      	pop	{r7, pc}
    b15a:	46c0      	nop			; (mov r8, r8)
    b15c:	20003d58 	.word	0x20003d58
    b160:	20004438 	.word	0x20004438

0000b164 <handle_start_connect>:
	return NULL;
}

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    b164:	b590      	push	{r4, r7, lr}
    b166:	b083      	sub	sp, #12
    b168:	af00      	add	r7, sp, #0
    b16a:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    b16c:	687b      	ldr	r3, [r7, #4]
    b16e:	0018      	movs	r0, r3
    b170:	4b2f      	ldr	r3, [pc, #188]	; (b230 <handle_start_connect+0xcc>)
    b172:	4798      	blx	r3
    b174:	1e03      	subs	r3, r0, #0
    b176:	d105      	bne.n	b184 <handle_start_connect+0x20>
    b178:	4b2e      	ldr	r3, [pc, #184]	; (b234 <handle_start_connect+0xd0>)
    b17a:	4a2f      	ldr	r2, [pc, #188]	; (b238 <handle_start_connect+0xd4>)
    b17c:	482f      	ldr	r0, [pc, #188]	; (b23c <handle_start_connect+0xd8>)
    b17e:	2154      	movs	r1, #84	; 0x54
    b180:	4c2f      	ldr	r4, [pc, #188]	; (b240 <handle_start_connect+0xdc>)
    b182:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    b184:	687b      	ldr	r3, [r7, #4]
    b186:	2252      	movs	r2, #82	; 0x52
    b188:	5c9b      	ldrb	r3, [r3, r2]
    b18a:	2b00      	cmp	r3, #0
    b18c:	d00f      	beq.n	b1ae <handle_start_connect+0x4a>
    b18e:	687b      	ldr	r3, [r7, #4]
    b190:	2252      	movs	r2, #82	; 0x52
    b192:	5c9b      	ldrb	r3, [r3, r2]
    b194:	2b01      	cmp	r3, #1
    b196:	d00a      	beq.n	b1ae <handle_start_connect+0x4a>
    b198:	687b      	ldr	r3, [r7, #4]
    b19a:	2252      	movs	r2, #82	; 0x52
    b19c:	5c9b      	ldrb	r3, [r3, r2]
    b19e:	2b02      	cmp	r3, #2
    b1a0:	d005      	beq.n	b1ae <handle_start_connect+0x4a>
    b1a2:	4b28      	ldr	r3, [pc, #160]	; (b244 <handle_start_connect+0xe0>)
    b1a4:	4a24      	ldr	r2, [pc, #144]	; (b238 <handle_start_connect+0xd4>)
    b1a6:	4825      	ldr	r0, [pc, #148]	; (b23c <handle_start_connect+0xd8>)
    b1a8:	2155      	movs	r1, #85	; 0x55
    b1aa:	4c25      	ldr	r4, [pc, #148]	; (b240 <handle_start_connect+0xdc>)
    b1ac:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    b1ae:	687b      	ldr	r3, [r7, #4]
    b1b0:	2252      	movs	r2, #82	; 0x52
    b1b2:	5c9b      	ldrb	r3, [r3, r2]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d12c      	bne.n	b212 <handle_start_connect+0xae>
    b1b8:	687b      	ldr	r3, [r7, #4]
    b1ba:	2253      	movs	r2, #83	; 0x53
    b1bc:	569b      	ldrsb	r3, [r3, r2]
    b1be:	2b00      	cmp	r3, #0
    b1c0:	dc27      	bgt.n	b212 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    b1c2:	2200      	movs	r2, #0
    b1c4:	2101      	movs	r1, #1
    b1c6:	2002      	movs	r0, #2
    b1c8:	4b1f      	ldr	r3, [pc, #124]	; (b248 <handle_start_connect+0xe4>)
    b1ca:	4798      	blx	r3
    b1cc:	0003      	movs	r3, r0
    b1ce:	0019      	movs	r1, r3
    b1d0:	687b      	ldr	r3, [r7, #4]
    b1d2:	2253      	movs	r2, #83	; 0x53
    b1d4:	5499      	strb	r1, [r3, r2]
    b1d6:	687b      	ldr	r3, [r7, #4]
    b1d8:	2253      	movs	r2, #83	; 0x53
    b1da:	569b      	ldrsb	r3, [r3, r2]
    b1dc:	2b00      	cmp	r3, #0
    b1de:	da04      	bge.n	b1ea <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    b1e0:	4b1a      	ldr	r3, [pc, #104]	; (b24c <handle_start_connect+0xe8>)
    b1e2:	0018      	movs	r0, r3
    b1e4:	4b1a      	ldr	r3, [pc, #104]	; (b250 <handle_start_connect+0xec>)
    b1e6:	4798      	blx	r3
			return;
    b1e8:	e01f      	b.n	b22a <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    b1ea:	4b1a      	ldr	r3, [pc, #104]	; (b254 <handle_start_connect+0xf0>)
    b1ec:	685b      	ldr	r3, [r3, #4]
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	d10f      	bne.n	b212 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    b1f2:	4b18      	ldr	r3, [pc, #96]	; (b254 <handle_start_connect+0xf0>)
    b1f4:	2202      	movs	r2, #2
    b1f6:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    b1f8:	4b16      	ldr	r3, [pc, #88]	; (b254 <handle_start_connect+0xf0>)
    b1fa:	22a0      	movs	r2, #160	; 0xa0
    b1fc:	01d2      	lsls	r2, r2, #7
    b1fe:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    b200:	687b      	ldr	r3, [r7, #4]
    b202:	2252      	movs	r2, #82	; 0x52
    b204:	2101      	movs	r1, #1
    b206:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    b208:	4b13      	ldr	r3, [pc, #76]	; (b258 <handle_start_connect+0xf4>)
    b20a:	0018      	movs	r0, r3
    b20c:	4b13      	ldr	r3, [pc, #76]	; (b25c <handle_start_connect+0xf8>)
    b20e:	4798      	blx	r3
			return;
    b210:	e00b      	b.n	b22a <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    b212:	687b      	ldr	r3, [r7, #4]
    b214:	2253      	movs	r2, #83	; 0x53
    b216:	569b      	ldrsb	r3, [r3, r2]
    b218:	490e      	ldr	r1, [pc, #56]	; (b254 <handle_start_connect+0xf0>)
    b21a:	2210      	movs	r2, #16
    b21c:	0018      	movs	r0, r3
    b21e:	4b10      	ldr	r3, [pc, #64]	; (b260 <handle_start_connect+0xfc>)
    b220:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    b222:	687b      	ldr	r3, [r7, #4]
    b224:	2252      	movs	r2, #82	; 0x52
    b226:	2102      	movs	r1, #2
    b228:	5499      	strb	r1, [r3, r2]
}
    b22a:	46bd      	mov	sp, r7
    b22c:	b003      	add	sp, #12
    b22e:	bd90      	pop	{r4, r7, pc}
    b230:	0000b12d 	.word	0x0000b12d
    b234:	0000e824 	.word	0x0000e824
    b238:	0000e9c8 	.word	0x0000e9c8
    b23c:	0000e838 	.word	0x0000e838
    b240:	0000bf65 	.word	0x0000bf65
    b244:	0000e848 	.word	0x0000e848
    b248:	00003c6d 	.word	0x00003c6d
    b24c:	0000e8a0 	.word	0x0000e8a0
    b250:	0000c6f9 	.word	0x0000c6f9
    b254:	200046b0 	.word	0x200046b0
    b258:	0000e7bc 	.word	0x0000e7bc
    b25c:	000042cd 	.word	0x000042cd
    b260:	00003dc5 	.word	0x00003dc5

0000b264 <pubnub_publish>:
	pb->state = PS_IDLE;
	pb->last_result = PNR_IO_ERROR;
}

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    b264:	b5b0      	push	{r4, r5, r7, lr}
    b266:	b08a      	sub	sp, #40	; 0x28
    b268:	af02      	add	r7, sp, #8
    b26a:	60f8      	str	r0, [r7, #12]
    b26c:	60b9      	str	r1, [r7, #8]
    b26e:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    b270:	68fb      	ldr	r3, [r7, #12]
    b272:	0018      	movs	r0, r3
    b274:	4b6c      	ldr	r3, [pc, #432]	; (b428 <pubnub_publish+0x1c4>)
    b276:	4798      	blx	r3
    b278:	1e03      	subs	r3, r0, #0
    b27a:	d108      	bne.n	b28e <pubnub_publish+0x2a>
    b27c:	4c6b      	ldr	r4, [pc, #428]	; (b42c <pubnub_publish+0x1c8>)
    b27e:	4a6c      	ldr	r2, [pc, #432]	; (b430 <pubnub_publish+0x1cc>)
    b280:	238a      	movs	r3, #138	; 0x8a
    b282:	33ff      	adds	r3, #255	; 0xff
    b284:	0019      	movs	r1, r3
    b286:	486b      	ldr	r0, [pc, #428]	; (b434 <pubnub_publish+0x1d0>)
    b288:	0023      	movs	r3, r4
    b28a:	4c6b      	ldr	r4, [pc, #428]	; (b438 <pubnub_publish+0x1d4>)
    b28c:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    b28e:	68fb      	ldr	r3, [r7, #12]
    b290:	2252      	movs	r2, #82	; 0x52
    b292:	5c9b      	ldrb	r3, [r3, r2]
    b294:	2b00      	cmp	r3, #0
    b296:	d001      	beq.n	b29c <pubnub_publish+0x38>
		return false;
    b298:	2300      	movs	r3, #0
    b29a:	e0c0      	b.n	b41e <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    b29c:	68fb      	ldr	r3, [r7, #12]
    b29e:	2251      	movs	r2, #81	; 0x51
    b2a0:	2102      	movs	r1, #2
    b2a2:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    b2a4:	68fb      	ldr	r3, [r7, #12]
    b2a6:	3354      	adds	r3, #84	; 0x54
    b2a8:	0018      	movs	r0, r3
    b2aa:	68fb      	ldr	r3, [r7, #12]
    b2ac:	681d      	ldr	r5, [r3, #0]
    b2ae:	68fb      	ldr	r3, [r7, #12]
    b2b0:	685b      	ldr	r3, [r3, #4]
    b2b2:	4c62      	ldr	r4, [pc, #392]	; (b43c <pubnub_publish+0x1d8>)
    b2b4:	2280      	movs	r2, #128	; 0x80
    b2b6:	0051      	lsls	r1, r2, #1
    b2b8:	68ba      	ldr	r2, [r7, #8]
    b2ba:	9201      	str	r2, [sp, #4]
    b2bc:	9300      	str	r3, [sp, #0]
    b2be:	002b      	movs	r3, r5
    b2c0:	0022      	movs	r2, r4
    b2c2:	4c5f      	ldr	r4, [pc, #380]	; (b440 <pubnub_publish+0x1dc>)
    b2c4:	47a0      	blx	r4
    b2c6:	0003      	movs	r3, r0
    b2c8:	0019      	movs	r1, r3
    b2ca:	68fa      	ldr	r2, [r7, #12]
    b2cc:	23ac      	movs	r3, #172	; 0xac
    b2ce:	005b      	lsls	r3, r3, #1
    b2d0:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    b2d2:	687b      	ldr	r3, [r7, #4]
    b2d4:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    b2d6:	e08a      	b.n	b3ee <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    b2d8:	4a5a      	ldr	r2, [pc, #360]	; (b444 <pubnub_publish+0x1e0>)
    b2da:	69fb      	ldr	r3, [r7, #28]
    b2dc:	0011      	movs	r1, r2
    b2de:	0018      	movs	r0, r3
    b2e0:	4b59      	ldr	r3, [pc, #356]	; (b448 <pubnub_publish+0x1e4>)
    b2e2:	4798      	blx	r3
    b2e4:	0003      	movs	r3, r0
    b2e6:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    b2e8:	69bb      	ldr	r3, [r7, #24]
    b2ea:	2b00      	cmp	r3, #0
    b2ec:	d034      	beq.n	b358 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    b2ee:	68fa      	ldr	r2, [r7, #12]
    b2f0:	23ac      	movs	r3, #172	; 0xac
    b2f2:	005b      	lsls	r3, r3, #1
    b2f4:	58d3      	ldr	r3, [r2, r3]
    b2f6:	22ff      	movs	r2, #255	; 0xff
    b2f8:	1ad2      	subs	r2, r2, r3
    b2fa:	69bb      	ldr	r3, [r7, #24]
    b2fc:	429a      	cmp	r2, r3
    b2fe:	d206      	bcs.n	b30e <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    b300:	68fa      	ldr	r2, [r7, #12]
    b302:	23ac      	movs	r3, #172	; 0xac
    b304:	005b      	lsls	r3, r3, #1
    b306:	2100      	movs	r1, #0
    b308:	50d1      	str	r1, [r2, r3]
				return false;
    b30a:	2300      	movs	r3, #0
    b30c:	e087      	b.n	b41e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    b30e:	68fb      	ldr	r3, [r7, #12]
    b310:	3354      	adds	r3, #84	; 0x54
    b312:	001a      	movs	r2, r3
    b314:	68f9      	ldr	r1, [r7, #12]
    b316:	23ac      	movs	r3, #172	; 0xac
    b318:	005b      	lsls	r3, r3, #1
    b31a:	58cb      	ldr	r3, [r1, r3]
    b31c:	18d3      	adds	r3, r2, r3
    b31e:	69ba      	ldr	r2, [r7, #24]
    b320:	69f9      	ldr	r1, [r7, #28]
    b322:	0018      	movs	r0, r3
    b324:	4b49      	ldr	r3, [pc, #292]	; (b44c <pubnub_publish+0x1e8>)
    b326:	4798      	blx	r3
			pb->http_buf_len += okspan;
    b328:	68fa      	ldr	r2, [r7, #12]
    b32a:	23ac      	movs	r3, #172	; 0xac
    b32c:	005b      	lsls	r3, r3, #1
    b32e:	58d2      	ldr	r2, [r2, r3]
    b330:	69bb      	ldr	r3, [r7, #24]
    b332:	18d1      	adds	r1, r2, r3
    b334:	68fa      	ldr	r2, [r7, #12]
    b336:	23ac      	movs	r3, #172	; 0xac
    b338:	005b      	lsls	r3, r3, #1
    b33a:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    b33c:	68fa      	ldr	r2, [r7, #12]
    b33e:	23ac      	movs	r3, #172	; 0xac
    b340:	005b      	lsls	r3, r3, #1
    b342:	58d3      	ldr	r3, [r2, r3]
    b344:	68fa      	ldr	r2, [r7, #12]
    b346:	2154      	movs	r1, #84	; 0x54
    b348:	18d3      	adds	r3, r2, r3
    b34a:	185b      	adds	r3, r3, r1
    b34c:	2200      	movs	r2, #0
    b34e:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    b350:	69fa      	ldr	r2, [r7, #28]
    b352:	69bb      	ldr	r3, [r7, #24]
    b354:	18d3      	adds	r3, r2, r3
    b356:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    b358:	69fb      	ldr	r3, [r7, #28]
    b35a:	781b      	ldrb	r3, [r3, #0]
    b35c:	2b00      	cmp	r3, #0
    b35e:	d046      	beq.n	b3ee <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    b360:	2314      	movs	r3, #20
    b362:	18fb      	adds	r3, r7, r3
    b364:	2200      	movs	r2, #0
    b366:	601a      	str	r2, [r3, #0]
    b368:	2314      	movs	r3, #20
    b36a:	18fb      	adds	r3, r7, r3
    b36c:	2225      	movs	r2, #37	; 0x25
    b36e:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    b370:	69fb      	ldr	r3, [r7, #28]
    b372:	781b      	ldrb	r3, [r3, #0]
    b374:	091b      	lsrs	r3, r3, #4
    b376:	b2db      	uxtb	r3, r3
    b378:	001a      	movs	r2, r3
    b37a:	4b35      	ldr	r3, [pc, #212]	; (b450 <pubnub_publish+0x1ec>)
    b37c:	5c9a      	ldrb	r2, [r3, r2]
    b37e:	2314      	movs	r3, #20
    b380:	18fb      	adds	r3, r7, r3
    b382:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    b384:	69fb      	ldr	r3, [r7, #28]
    b386:	781b      	ldrb	r3, [r3, #0]
    b388:	001a      	movs	r2, r3
    b38a:	230f      	movs	r3, #15
    b38c:	4013      	ands	r3, r2
    b38e:	4a30      	ldr	r2, [pc, #192]	; (b450 <pubnub_publish+0x1ec>)
    b390:	5cd2      	ldrb	r2, [r2, r3]
    b392:	2314      	movs	r3, #20
    b394:	18fb      	adds	r3, r7, r3
    b396:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    b398:	68fa      	ldr	r2, [r7, #12]
    b39a:	23ac      	movs	r3, #172	; 0xac
    b39c:	005b      	lsls	r3, r3, #1
    b39e:	58d3      	ldr	r3, [r2, r3]
    b3a0:	22ff      	movs	r2, #255	; 0xff
    b3a2:	1ad3      	subs	r3, r2, r3
    b3a4:	2b02      	cmp	r3, #2
    b3a6:	d806      	bhi.n	b3b6 <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    b3a8:	68fa      	ldr	r2, [r7, #12]
    b3aa:	23ac      	movs	r3, #172	; 0xac
    b3ac:	005b      	lsls	r3, r3, #1
    b3ae:	2100      	movs	r1, #0
    b3b0:	50d1      	str	r1, [r2, r3]
				return false;
    b3b2:	2300      	movs	r3, #0
    b3b4:	e033      	b.n	b41e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    b3b6:	68fb      	ldr	r3, [r7, #12]
    b3b8:	3354      	adds	r3, #84	; 0x54
    b3ba:	001a      	movs	r2, r3
    b3bc:	68f9      	ldr	r1, [r7, #12]
    b3be:	23ac      	movs	r3, #172	; 0xac
    b3c0:	005b      	lsls	r3, r3, #1
    b3c2:	58cb      	ldr	r3, [r1, r3]
    b3c4:	18d2      	adds	r2, r2, r3
    b3c6:	2314      	movs	r3, #20
    b3c8:	18fb      	adds	r3, r7, r3
    b3ca:	0010      	movs	r0, r2
    b3cc:	0019      	movs	r1, r3
    b3ce:	2304      	movs	r3, #4
    b3d0:	001a      	movs	r2, r3
    b3d2:	4b1e      	ldr	r3, [pc, #120]	; (b44c <pubnub_publish+0x1e8>)
    b3d4:	4798      	blx	r3
			pb->http_buf_len += 3;
    b3d6:	68fa      	ldr	r2, [r7, #12]
    b3d8:	23ac      	movs	r3, #172	; 0xac
    b3da:	005b      	lsls	r3, r3, #1
    b3dc:	58d3      	ldr	r3, [r2, r3]
    b3de:	1cd9      	adds	r1, r3, #3
    b3e0:	68fa      	ldr	r2, [r7, #12]
    b3e2:	23ac      	movs	r3, #172	; 0xac
    b3e4:	005b      	lsls	r3, r3, #1
    b3e6:	50d1      	str	r1, [r2, r3]
			++pmessage;
    b3e8:	69fb      	ldr	r3, [r7, #28]
    b3ea:	3301      	adds	r3, #1
    b3ec:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    b3ee:	69fb      	ldr	r3, [r7, #28]
    b3f0:	781b      	ldrb	r3, [r3, #0]
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d000      	beq.n	b3f8 <pubnub_publish+0x194>
    b3f6:	e76f      	b.n	b2d8 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    b3f8:	68fb      	ldr	r3, [r7, #12]
    b3fa:	2250      	movs	r2, #80	; 0x50
    b3fc:	5c9b      	ldrb	r3, [r3, r2]
    b3fe:	2b00      	cmp	r3, #0
    b400:	d108      	bne.n	b414 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    b402:	68fb      	ldr	r3, [r7, #12]
    b404:	2252      	movs	r2, #82	; 0x52
    b406:	2103      	movs	r1, #3
    b408:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    b40a:	68fb      	ldr	r3, [r7, #12]
    b40c:	0018      	movs	r0, r3
    b40e:	4b11      	ldr	r3, [pc, #68]	; (b454 <pubnub_publish+0x1f0>)
    b410:	4798      	blx	r3
    b412:	e003      	b.n	b41c <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    b414:	68fb      	ldr	r3, [r7, #12]
    b416:	0018      	movs	r0, r3
    b418:	4b0f      	ldr	r3, [pc, #60]	; (b458 <pubnub_publish+0x1f4>)
    b41a:	4798      	blx	r3
	}

	return true;
    b41c:	2301      	movs	r3, #1
}
    b41e:	0018      	movs	r0, r3
    b420:	46bd      	mov	sp, r7
    b422:	b008      	add	sp, #32
    b424:	bdb0      	pop	{r4, r5, r7, pc}
    b426:	46c0      	nop			; (mov r8, r8)
    b428:	0000b12d 	.word	0x0000b12d
    b42c:	0000e824 	.word	0x0000e824
    b430:	0000e9e0 	.word	0x0000e9e0
    b434:	0000e838 	.word	0x0000e838
    b438:	0000bf65 	.word	0x0000bf65
    b43c:	0000e8fc 	.word	0x0000e8fc
    b440:	0000c881 	.word	0x0000c881
    b444:	0000e914 	.word	0x0000e914
    b448:	0000c95b 	.word	0x0000c95b
    b44c:	0000c011 	.word	0x0000c011
    b450:	0000e960 	.word	0x0000e960
    b454:	0000b07d 	.word	0x0000b07d
    b458:	0000b165 	.word	0x0000b165

0000b45c <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b45e:	4657      	mov	r7, sl
    b460:	464e      	mov	r6, r9
    b462:	4645      	mov	r5, r8
    b464:	b4e0      	push	{r5, r6, r7}
    b466:	b08c      	sub	sp, #48	; 0x30
    b468:	af0a      	add	r7, sp, #40	; 0x28
    b46a:	6078      	str	r0, [r7, #4]
    b46c:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    b46e:	687b      	ldr	r3, [r7, #4]
    b470:	0018      	movs	r0, r3
    b472:	4b4a      	ldr	r3, [pc, #296]	; (b59c <pubnub_subscribe+0x140>)
    b474:	4798      	blx	r3
    b476:	1e03      	subs	r3, r0, #0
    b478:	d108      	bne.n	b48c <pubnub_subscribe+0x30>
    b47a:	4c49      	ldr	r4, [pc, #292]	; (b5a0 <pubnub_subscribe+0x144>)
    b47c:	4a49      	ldr	r2, [pc, #292]	; (b5a4 <pubnub_subscribe+0x148>)
    b47e:	23c2      	movs	r3, #194	; 0xc2
    b480:	33ff      	adds	r3, #255	; 0xff
    b482:	0019      	movs	r1, r3
    b484:	4848      	ldr	r0, [pc, #288]	; (b5a8 <pubnub_subscribe+0x14c>)
    b486:	0023      	movs	r3, r4
    b488:	4c48      	ldr	r4, [pc, #288]	; (b5ac <pubnub_subscribe+0x150>)
    b48a:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    b48c:	687b      	ldr	r3, [r7, #4]
    b48e:	2252      	movs	r2, #82	; 0x52
    b490:	5c9b      	ldrb	r3, [r3, r2]
    b492:	2b00      	cmp	r3, #0
    b494:	d001      	beq.n	b49a <pubnub_subscribe+0x3e>
		return false;
    b496:	2300      	movs	r3, #0
    b498:	e078      	b.n	b58c <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    b49a:	687b      	ldr	r3, [r7, #4]
    b49c:	2251      	movs	r2, #81	; 0x51
    b49e:	2101      	movs	r1, #1
    b4a0:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    b4a2:	687b      	ldr	r3, [r7, #4]
    b4a4:	3366      	adds	r3, #102	; 0x66
    b4a6:	33ff      	adds	r3, #255	; 0xff
    b4a8:	0018      	movs	r0, r3
    b4aa:	2380      	movs	r3, #128	; 0x80
    b4ac:	009b      	lsls	r3, r3, #2
    b4ae:	001a      	movs	r2, r3
    b4b0:	2100      	movs	r1, #0
    b4b2:	4b3f      	ldr	r3, [pc, #252]	; (b5b0 <pubnub_subscribe+0x154>)
    b4b4:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b4b6:	687b      	ldr	r3, [r7, #4]
    b4b8:	2254      	movs	r2, #84	; 0x54
    b4ba:	4694      	mov	ip, r2
    b4bc:	449c      	add	ip, r3
    b4be:	687b      	ldr	r3, [r7, #4]
    b4c0:	685b      	ldr	r3, [r3, #4]
    b4c2:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    b4c4:	687b      	ldr	r3, [r7, #4]
    b4c6:	3310      	adds	r3, #16
    b4c8:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    b4ca:	687b      	ldr	r3, [r7, #4]
    b4cc:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d001      	beq.n	b4d6 <pubnub_subscribe+0x7a>
    b4d2:	4b38      	ldr	r3, [pc, #224]	; (b5b4 <pubnub_subscribe+0x158>)
    b4d4:	e000      	b.n	b4d8 <pubnub_subscribe+0x7c>
    b4d6:	4b38      	ldr	r3, [pc, #224]	; (b5b8 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    b4d8:	687a      	ldr	r2, [r7, #4]
    b4da:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b4dc:	2a00      	cmp	r2, #0
    b4de:	d002      	beq.n	b4e6 <pubnub_subscribe+0x8a>
    b4e0:	687a      	ldr	r2, [r7, #4]
    b4e2:	6892      	ldr	r2, [r2, #8]
    b4e4:	e000      	b.n	b4e8 <pubnub_subscribe+0x8c>
    b4e6:	4a34      	ldr	r2, [pc, #208]	; (b5b8 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    b4e8:	6879      	ldr	r1, [r7, #4]
    b4ea:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b4ec:	2900      	cmp	r1, #0
    b4ee:	d005      	beq.n	b4fc <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    b4f0:	6879      	ldr	r1, [r7, #4]
    b4f2:	68c9      	ldr	r1, [r1, #12]
    b4f4:	2900      	cmp	r1, #0
    b4f6:	d001      	beq.n	b4fc <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b4f8:	4930      	ldr	r1, [pc, #192]	; (b5bc <pubnub_subscribe+0x160>)
    b4fa:	e000      	b.n	b4fe <pubnub_subscribe+0xa2>
    b4fc:	492e      	ldr	r1, [pc, #184]	; (b5b8 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    b4fe:	6878      	ldr	r0, [r7, #4]
    b500:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b502:	2800      	cmp	r0, #0
    b504:	d005      	beq.n	b512 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    b506:	6878      	ldr	r0, [r7, #4]
    b508:	68c0      	ldr	r0, [r0, #12]
    b50a:	2800      	cmp	r0, #0
    b50c:	d001      	beq.n	b512 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b50e:	482c      	ldr	r0, [pc, #176]	; (b5c0 <pubnub_subscribe+0x164>)
    b510:	e000      	b.n	b514 <pubnub_subscribe+0xb8>
    b512:	4829      	ldr	r0, [pc, #164]	; (b5b8 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    b514:	687c      	ldr	r4, [r7, #4]
    b516:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b518:	2c00      	cmp	r4, #0
    b51a:	d006      	beq.n	b52a <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    b51c:	687c      	ldr	r4, [r7, #4]
    b51e:	68e4      	ldr	r4, [r4, #12]
    b520:	2c00      	cmp	r4, #0
    b522:	d002      	beq.n	b52a <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    b524:	687c      	ldr	r4, [r7, #4]
    b526:	68e4      	ldr	r4, [r4, #12]
    b528:	e000      	b.n	b52c <pubnub_subscribe+0xd0>
    b52a:	4c23      	ldr	r4, [pc, #140]	; (b5b8 <pubnub_subscribe+0x15c>)
    b52c:	4e25      	ldr	r6, [pc, #148]	; (b5c4 <pubnub_subscribe+0x168>)
    b52e:	46b1      	mov	r9, r6
    b530:	2680      	movs	r6, #128	; 0x80
    b532:	0076      	lsls	r6, r6, #1
    b534:	46b0      	mov	r8, r6
    b536:	4e24      	ldr	r6, [pc, #144]	; (b5c8 <pubnub_subscribe+0x16c>)
    b538:	9608      	str	r6, [sp, #32]
    b53a:	4e1f      	ldr	r6, [pc, #124]	; (b5b8 <pubnub_subscribe+0x15c>)
    b53c:	9607      	str	r6, [sp, #28]
    b53e:	9406      	str	r4, [sp, #24]
    b540:	9005      	str	r0, [sp, #20]
    b542:	9104      	str	r1, [sp, #16]
    b544:	9203      	str	r2, [sp, #12]
    b546:	9302      	str	r3, [sp, #8]
    b548:	9501      	str	r5, [sp, #4]
    b54a:	683b      	ldr	r3, [r7, #0]
    b54c:	9300      	str	r3, [sp, #0]
    b54e:	4653      	mov	r3, sl
    b550:	464a      	mov	r2, r9
    b552:	4641      	mov	r1, r8
    b554:	4660      	mov	r0, ip
    b556:	4c1d      	ldr	r4, [pc, #116]	; (b5cc <pubnub_subscribe+0x170>)
    b558:	47a0      	blx	r4
    b55a:	0003      	movs	r3, r0
    b55c:	0019      	movs	r1, r3
    b55e:	687a      	ldr	r2, [r7, #4]
    b560:	23ac      	movs	r3, #172	; 0xac
    b562:	005b      	lsls	r3, r3, #1
    b564:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	2250      	movs	r2, #80	; 0x50
    b56a:	5c9b      	ldrb	r3, [r3, r2]
    b56c:	2b00      	cmp	r3, #0
    b56e:	d108      	bne.n	b582 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	2252      	movs	r2, #82	; 0x52
    b574:	2103      	movs	r1, #3
    b576:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	0018      	movs	r0, r3
    b57c:	4b14      	ldr	r3, [pc, #80]	; (b5d0 <pubnub_subscribe+0x174>)
    b57e:	4798      	blx	r3
    b580:	e003      	b.n	b58a <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	0018      	movs	r0, r3
    b586:	4b13      	ldr	r3, [pc, #76]	; (b5d4 <pubnub_subscribe+0x178>)
    b588:	4798      	blx	r3
	}

	return true;
    b58a:	2301      	movs	r3, #1
}
    b58c:	0018      	movs	r0, r3
    b58e:	46bd      	mov	sp, r7
    b590:	b002      	add	sp, #8
    b592:	bc1c      	pop	{r2, r3, r4}
    b594:	4690      	mov	r8, r2
    b596:	4699      	mov	r9, r3
    b598:	46a2      	mov	sl, r4
    b59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b59c:	0000b12d 	.word	0x0000b12d
    b5a0:	0000e824 	.word	0x0000e824
    b5a4:	0000e9f0 	.word	0x0000e9f0
    b5a8:	0000e838 	.word	0x0000e838
    b5ac:	0000bf65 	.word	0x0000bf65
    b5b0:	0000c023 	.word	0x0000c023
    b5b4:	0000e974 	.word	0x0000e974
    b5b8:	0000e97c 	.word	0x0000e97c
    b5bc:	0000e980 	.word	0x0000e980
    b5c0:	0000e984 	.word	0x0000e984
    b5c4:	0000e98c 	.word	0x0000e98c
    b5c8:	0000e9c4 	.word	0x0000e9c4
    b5cc:	0000c881 	.word	0x0000c881
    b5d0:	0000b07d 	.word	0x0000b07d
    b5d4:	0000b165 	.word	0x0000b165

0000b5d8 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    b5d8:	b590      	push	{r4, r7, lr}
    b5da:	b085      	sub	sp, #20
    b5dc:	af00      	add	r7, sp, #0
    b5de:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    b5e0:	687b      	ldr	r3, [r7, #4]
    b5e2:	0018      	movs	r0, r3
    b5e4:	4b20      	ldr	r3, [pc, #128]	; (b668 <pubnub_get+0x90>)
    b5e6:	4798      	blx	r3
    b5e8:	1e03      	subs	r3, r0, #0
    b5ea:	d108      	bne.n	b5fe <pubnub_get+0x26>
    b5ec:	4c1f      	ldr	r4, [pc, #124]	; (b66c <pubnub_get+0x94>)
    b5ee:	4a20      	ldr	r2, [pc, #128]	; (b670 <pubnub_get+0x98>)
    b5f0:	23e0      	movs	r3, #224	; 0xe0
    b5f2:	33ff      	adds	r3, #255	; 0xff
    b5f4:	0019      	movs	r1, r3
    b5f6:	481f      	ldr	r0, [pc, #124]	; (b674 <pubnub_get+0x9c>)
    b5f8:	0023      	movs	r3, r4
    b5fa:	4c1f      	ldr	r4, [pc, #124]	; (b678 <pubnub_get+0xa0>)
    b5fc:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    b5fe:	687b      	ldr	r3, [r7, #4]
    b600:	4a1e      	ldr	r2, [pc, #120]	; (b67c <pubnub_get+0xa4>)
    b602:	5a9a      	ldrh	r2, [r3, r2]
    b604:	6879      	ldr	r1, [r7, #4]
    b606:	23da      	movs	r3, #218	; 0xda
    b608:	009b      	lsls	r3, r3, #2
    b60a:	5acb      	ldrh	r3, [r1, r3]
    b60c:	429a      	cmp	r2, r3
    b60e:	d225      	bcs.n	b65c <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    b610:	687b      	ldr	r3, [r7, #4]
    b612:	3366      	adds	r3, #102	; 0x66
    b614:	33ff      	adds	r3, #255	; 0xff
    b616:	687a      	ldr	r2, [r7, #4]
    b618:	4918      	ldr	r1, [pc, #96]	; (b67c <pubnub_get+0xa4>)
    b61a:	5a52      	ldrh	r2, [r2, r1]
    b61c:	189b      	adds	r3, r3, r2
    b61e:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	4a16      	ldr	r2, [pc, #88]	; (b67c <pubnub_get+0xa4>)
    b624:	5a9c      	ldrh	r4, [r3, r2]
    b626:	68fb      	ldr	r3, [r7, #12]
    b628:	0018      	movs	r0, r3
    b62a:	4b15      	ldr	r3, [pc, #84]	; (b680 <pubnub_get+0xa8>)
    b62c:	4798      	blx	r3
    b62e:	0003      	movs	r3, r0
    b630:	b29b      	uxth	r3, r3
    b632:	18e3      	adds	r3, r4, r3
    b634:	b299      	uxth	r1, r3
    b636:	687b      	ldr	r3, [r7, #4]
    b638:	4a10      	ldr	r2, [pc, #64]	; (b67c <pubnub_get+0xa4>)
    b63a:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    b63c:	687b      	ldr	r3, [r7, #4]
    b63e:	4a0f      	ldr	r2, [pc, #60]	; (b67c <pubnub_get+0xa4>)
    b640:	5a9b      	ldrh	r3, [r3, r2]
    b642:	1c5a      	adds	r2, r3, #1
    b644:	b290      	uxth	r0, r2
    b646:	687a      	ldr	r2, [r7, #4]
    b648:	490c      	ldr	r1, [pc, #48]	; (b67c <pubnub_get+0xa4>)
    b64a:	5250      	strh	r0, [r2, r1]
    b64c:	6879      	ldr	r1, [r7, #4]
    b64e:	22da      	movs	r2, #218	; 0xda
    b650:	0092      	lsls	r2, r2, #2
    b652:	5a8a      	ldrh	r2, [r1, r2]
    b654:	4293      	cmp	r3, r2
    b656:	d801      	bhi.n	b65c <pubnub_get+0x84>
			return rslt;
    b658:	68fb      	ldr	r3, [r7, #12]
    b65a:	e000      	b.n	b65e <pubnub_get+0x86>
		}
	}

	return NULL;
    b65c:	2300      	movs	r3, #0
}
    b65e:	0018      	movs	r0, r3
    b660:	46bd      	mov	sp, r7
    b662:	b005      	add	sp, #20
    b664:	bd90      	pop	{r4, r7, pc}
    b666:	46c0      	nop			; (mov r8, r8)
    b668:	0000b12d 	.word	0x0000b12d
    b66c:	0000e824 	.word	0x0000e824
    b670:	0000ea04 	.word	0x0000ea04
    b674:	0000e838 	.word	0x0000e838
    b678:	0000bf65 	.word	0x0000bf65
    b67c:	00000366 	.word	0x00000366
    b680:	0000c929 	.word	0x0000c929

0000b684 <__aeabi_uidiv>:
    b684:	2200      	movs	r2, #0
    b686:	0843      	lsrs	r3, r0, #1
    b688:	428b      	cmp	r3, r1
    b68a:	d374      	bcc.n	b776 <__aeabi_uidiv+0xf2>
    b68c:	0903      	lsrs	r3, r0, #4
    b68e:	428b      	cmp	r3, r1
    b690:	d35f      	bcc.n	b752 <__aeabi_uidiv+0xce>
    b692:	0a03      	lsrs	r3, r0, #8
    b694:	428b      	cmp	r3, r1
    b696:	d344      	bcc.n	b722 <__aeabi_uidiv+0x9e>
    b698:	0b03      	lsrs	r3, r0, #12
    b69a:	428b      	cmp	r3, r1
    b69c:	d328      	bcc.n	b6f0 <__aeabi_uidiv+0x6c>
    b69e:	0c03      	lsrs	r3, r0, #16
    b6a0:	428b      	cmp	r3, r1
    b6a2:	d30d      	bcc.n	b6c0 <__aeabi_uidiv+0x3c>
    b6a4:	22ff      	movs	r2, #255	; 0xff
    b6a6:	0209      	lsls	r1, r1, #8
    b6a8:	ba12      	rev	r2, r2
    b6aa:	0c03      	lsrs	r3, r0, #16
    b6ac:	428b      	cmp	r3, r1
    b6ae:	d302      	bcc.n	b6b6 <__aeabi_uidiv+0x32>
    b6b0:	1212      	asrs	r2, r2, #8
    b6b2:	0209      	lsls	r1, r1, #8
    b6b4:	d065      	beq.n	b782 <__aeabi_uidiv+0xfe>
    b6b6:	0b03      	lsrs	r3, r0, #12
    b6b8:	428b      	cmp	r3, r1
    b6ba:	d319      	bcc.n	b6f0 <__aeabi_uidiv+0x6c>
    b6bc:	e000      	b.n	b6c0 <__aeabi_uidiv+0x3c>
    b6be:	0a09      	lsrs	r1, r1, #8
    b6c0:	0bc3      	lsrs	r3, r0, #15
    b6c2:	428b      	cmp	r3, r1
    b6c4:	d301      	bcc.n	b6ca <__aeabi_uidiv+0x46>
    b6c6:	03cb      	lsls	r3, r1, #15
    b6c8:	1ac0      	subs	r0, r0, r3
    b6ca:	4152      	adcs	r2, r2
    b6cc:	0b83      	lsrs	r3, r0, #14
    b6ce:	428b      	cmp	r3, r1
    b6d0:	d301      	bcc.n	b6d6 <__aeabi_uidiv+0x52>
    b6d2:	038b      	lsls	r3, r1, #14
    b6d4:	1ac0      	subs	r0, r0, r3
    b6d6:	4152      	adcs	r2, r2
    b6d8:	0b43      	lsrs	r3, r0, #13
    b6da:	428b      	cmp	r3, r1
    b6dc:	d301      	bcc.n	b6e2 <__aeabi_uidiv+0x5e>
    b6de:	034b      	lsls	r3, r1, #13
    b6e0:	1ac0      	subs	r0, r0, r3
    b6e2:	4152      	adcs	r2, r2
    b6e4:	0b03      	lsrs	r3, r0, #12
    b6e6:	428b      	cmp	r3, r1
    b6e8:	d301      	bcc.n	b6ee <__aeabi_uidiv+0x6a>
    b6ea:	030b      	lsls	r3, r1, #12
    b6ec:	1ac0      	subs	r0, r0, r3
    b6ee:	4152      	adcs	r2, r2
    b6f0:	0ac3      	lsrs	r3, r0, #11
    b6f2:	428b      	cmp	r3, r1
    b6f4:	d301      	bcc.n	b6fa <__aeabi_uidiv+0x76>
    b6f6:	02cb      	lsls	r3, r1, #11
    b6f8:	1ac0      	subs	r0, r0, r3
    b6fa:	4152      	adcs	r2, r2
    b6fc:	0a83      	lsrs	r3, r0, #10
    b6fe:	428b      	cmp	r3, r1
    b700:	d301      	bcc.n	b706 <__aeabi_uidiv+0x82>
    b702:	028b      	lsls	r3, r1, #10
    b704:	1ac0      	subs	r0, r0, r3
    b706:	4152      	adcs	r2, r2
    b708:	0a43      	lsrs	r3, r0, #9
    b70a:	428b      	cmp	r3, r1
    b70c:	d301      	bcc.n	b712 <__aeabi_uidiv+0x8e>
    b70e:	024b      	lsls	r3, r1, #9
    b710:	1ac0      	subs	r0, r0, r3
    b712:	4152      	adcs	r2, r2
    b714:	0a03      	lsrs	r3, r0, #8
    b716:	428b      	cmp	r3, r1
    b718:	d301      	bcc.n	b71e <__aeabi_uidiv+0x9a>
    b71a:	020b      	lsls	r3, r1, #8
    b71c:	1ac0      	subs	r0, r0, r3
    b71e:	4152      	adcs	r2, r2
    b720:	d2cd      	bcs.n	b6be <__aeabi_uidiv+0x3a>
    b722:	09c3      	lsrs	r3, r0, #7
    b724:	428b      	cmp	r3, r1
    b726:	d301      	bcc.n	b72c <__aeabi_uidiv+0xa8>
    b728:	01cb      	lsls	r3, r1, #7
    b72a:	1ac0      	subs	r0, r0, r3
    b72c:	4152      	adcs	r2, r2
    b72e:	0983      	lsrs	r3, r0, #6
    b730:	428b      	cmp	r3, r1
    b732:	d301      	bcc.n	b738 <__aeabi_uidiv+0xb4>
    b734:	018b      	lsls	r3, r1, #6
    b736:	1ac0      	subs	r0, r0, r3
    b738:	4152      	adcs	r2, r2
    b73a:	0943      	lsrs	r3, r0, #5
    b73c:	428b      	cmp	r3, r1
    b73e:	d301      	bcc.n	b744 <__aeabi_uidiv+0xc0>
    b740:	014b      	lsls	r3, r1, #5
    b742:	1ac0      	subs	r0, r0, r3
    b744:	4152      	adcs	r2, r2
    b746:	0903      	lsrs	r3, r0, #4
    b748:	428b      	cmp	r3, r1
    b74a:	d301      	bcc.n	b750 <__aeabi_uidiv+0xcc>
    b74c:	010b      	lsls	r3, r1, #4
    b74e:	1ac0      	subs	r0, r0, r3
    b750:	4152      	adcs	r2, r2
    b752:	08c3      	lsrs	r3, r0, #3
    b754:	428b      	cmp	r3, r1
    b756:	d301      	bcc.n	b75c <__aeabi_uidiv+0xd8>
    b758:	00cb      	lsls	r3, r1, #3
    b75a:	1ac0      	subs	r0, r0, r3
    b75c:	4152      	adcs	r2, r2
    b75e:	0883      	lsrs	r3, r0, #2
    b760:	428b      	cmp	r3, r1
    b762:	d301      	bcc.n	b768 <__aeabi_uidiv+0xe4>
    b764:	008b      	lsls	r3, r1, #2
    b766:	1ac0      	subs	r0, r0, r3
    b768:	4152      	adcs	r2, r2
    b76a:	0843      	lsrs	r3, r0, #1
    b76c:	428b      	cmp	r3, r1
    b76e:	d301      	bcc.n	b774 <__aeabi_uidiv+0xf0>
    b770:	004b      	lsls	r3, r1, #1
    b772:	1ac0      	subs	r0, r0, r3
    b774:	4152      	adcs	r2, r2
    b776:	1a41      	subs	r1, r0, r1
    b778:	d200      	bcs.n	b77c <__aeabi_uidiv+0xf8>
    b77a:	4601      	mov	r1, r0
    b77c:	4152      	adcs	r2, r2
    b77e:	4610      	mov	r0, r2
    b780:	4770      	bx	lr
    b782:	e7ff      	b.n	b784 <__aeabi_uidiv+0x100>
    b784:	b501      	push	{r0, lr}
    b786:	2000      	movs	r0, #0
    b788:	f000 f8f0 	bl	b96c <__aeabi_idiv0>
    b78c:	bd02      	pop	{r1, pc}
    b78e:	46c0      	nop			; (mov r8, r8)

0000b790 <__aeabi_uidivmod>:
    b790:	2900      	cmp	r1, #0
    b792:	d0f7      	beq.n	b784 <__aeabi_uidiv+0x100>
    b794:	e776      	b.n	b684 <__aeabi_uidiv>
    b796:	4770      	bx	lr

0000b798 <__aeabi_idiv>:
    b798:	4603      	mov	r3, r0
    b79a:	430b      	orrs	r3, r1
    b79c:	d47f      	bmi.n	b89e <__aeabi_idiv+0x106>
    b79e:	2200      	movs	r2, #0
    b7a0:	0843      	lsrs	r3, r0, #1
    b7a2:	428b      	cmp	r3, r1
    b7a4:	d374      	bcc.n	b890 <__aeabi_idiv+0xf8>
    b7a6:	0903      	lsrs	r3, r0, #4
    b7a8:	428b      	cmp	r3, r1
    b7aa:	d35f      	bcc.n	b86c <__aeabi_idiv+0xd4>
    b7ac:	0a03      	lsrs	r3, r0, #8
    b7ae:	428b      	cmp	r3, r1
    b7b0:	d344      	bcc.n	b83c <__aeabi_idiv+0xa4>
    b7b2:	0b03      	lsrs	r3, r0, #12
    b7b4:	428b      	cmp	r3, r1
    b7b6:	d328      	bcc.n	b80a <__aeabi_idiv+0x72>
    b7b8:	0c03      	lsrs	r3, r0, #16
    b7ba:	428b      	cmp	r3, r1
    b7bc:	d30d      	bcc.n	b7da <__aeabi_idiv+0x42>
    b7be:	22ff      	movs	r2, #255	; 0xff
    b7c0:	0209      	lsls	r1, r1, #8
    b7c2:	ba12      	rev	r2, r2
    b7c4:	0c03      	lsrs	r3, r0, #16
    b7c6:	428b      	cmp	r3, r1
    b7c8:	d302      	bcc.n	b7d0 <__aeabi_idiv+0x38>
    b7ca:	1212      	asrs	r2, r2, #8
    b7cc:	0209      	lsls	r1, r1, #8
    b7ce:	d065      	beq.n	b89c <__aeabi_idiv+0x104>
    b7d0:	0b03      	lsrs	r3, r0, #12
    b7d2:	428b      	cmp	r3, r1
    b7d4:	d319      	bcc.n	b80a <__aeabi_idiv+0x72>
    b7d6:	e000      	b.n	b7da <__aeabi_idiv+0x42>
    b7d8:	0a09      	lsrs	r1, r1, #8
    b7da:	0bc3      	lsrs	r3, r0, #15
    b7dc:	428b      	cmp	r3, r1
    b7de:	d301      	bcc.n	b7e4 <__aeabi_idiv+0x4c>
    b7e0:	03cb      	lsls	r3, r1, #15
    b7e2:	1ac0      	subs	r0, r0, r3
    b7e4:	4152      	adcs	r2, r2
    b7e6:	0b83      	lsrs	r3, r0, #14
    b7e8:	428b      	cmp	r3, r1
    b7ea:	d301      	bcc.n	b7f0 <__aeabi_idiv+0x58>
    b7ec:	038b      	lsls	r3, r1, #14
    b7ee:	1ac0      	subs	r0, r0, r3
    b7f0:	4152      	adcs	r2, r2
    b7f2:	0b43      	lsrs	r3, r0, #13
    b7f4:	428b      	cmp	r3, r1
    b7f6:	d301      	bcc.n	b7fc <__aeabi_idiv+0x64>
    b7f8:	034b      	lsls	r3, r1, #13
    b7fa:	1ac0      	subs	r0, r0, r3
    b7fc:	4152      	adcs	r2, r2
    b7fe:	0b03      	lsrs	r3, r0, #12
    b800:	428b      	cmp	r3, r1
    b802:	d301      	bcc.n	b808 <__aeabi_idiv+0x70>
    b804:	030b      	lsls	r3, r1, #12
    b806:	1ac0      	subs	r0, r0, r3
    b808:	4152      	adcs	r2, r2
    b80a:	0ac3      	lsrs	r3, r0, #11
    b80c:	428b      	cmp	r3, r1
    b80e:	d301      	bcc.n	b814 <__aeabi_idiv+0x7c>
    b810:	02cb      	lsls	r3, r1, #11
    b812:	1ac0      	subs	r0, r0, r3
    b814:	4152      	adcs	r2, r2
    b816:	0a83      	lsrs	r3, r0, #10
    b818:	428b      	cmp	r3, r1
    b81a:	d301      	bcc.n	b820 <__aeabi_idiv+0x88>
    b81c:	028b      	lsls	r3, r1, #10
    b81e:	1ac0      	subs	r0, r0, r3
    b820:	4152      	adcs	r2, r2
    b822:	0a43      	lsrs	r3, r0, #9
    b824:	428b      	cmp	r3, r1
    b826:	d301      	bcc.n	b82c <__aeabi_idiv+0x94>
    b828:	024b      	lsls	r3, r1, #9
    b82a:	1ac0      	subs	r0, r0, r3
    b82c:	4152      	adcs	r2, r2
    b82e:	0a03      	lsrs	r3, r0, #8
    b830:	428b      	cmp	r3, r1
    b832:	d301      	bcc.n	b838 <__aeabi_idiv+0xa0>
    b834:	020b      	lsls	r3, r1, #8
    b836:	1ac0      	subs	r0, r0, r3
    b838:	4152      	adcs	r2, r2
    b83a:	d2cd      	bcs.n	b7d8 <__aeabi_idiv+0x40>
    b83c:	09c3      	lsrs	r3, r0, #7
    b83e:	428b      	cmp	r3, r1
    b840:	d301      	bcc.n	b846 <__aeabi_idiv+0xae>
    b842:	01cb      	lsls	r3, r1, #7
    b844:	1ac0      	subs	r0, r0, r3
    b846:	4152      	adcs	r2, r2
    b848:	0983      	lsrs	r3, r0, #6
    b84a:	428b      	cmp	r3, r1
    b84c:	d301      	bcc.n	b852 <__aeabi_idiv+0xba>
    b84e:	018b      	lsls	r3, r1, #6
    b850:	1ac0      	subs	r0, r0, r3
    b852:	4152      	adcs	r2, r2
    b854:	0943      	lsrs	r3, r0, #5
    b856:	428b      	cmp	r3, r1
    b858:	d301      	bcc.n	b85e <__aeabi_idiv+0xc6>
    b85a:	014b      	lsls	r3, r1, #5
    b85c:	1ac0      	subs	r0, r0, r3
    b85e:	4152      	adcs	r2, r2
    b860:	0903      	lsrs	r3, r0, #4
    b862:	428b      	cmp	r3, r1
    b864:	d301      	bcc.n	b86a <__aeabi_idiv+0xd2>
    b866:	010b      	lsls	r3, r1, #4
    b868:	1ac0      	subs	r0, r0, r3
    b86a:	4152      	adcs	r2, r2
    b86c:	08c3      	lsrs	r3, r0, #3
    b86e:	428b      	cmp	r3, r1
    b870:	d301      	bcc.n	b876 <__aeabi_idiv+0xde>
    b872:	00cb      	lsls	r3, r1, #3
    b874:	1ac0      	subs	r0, r0, r3
    b876:	4152      	adcs	r2, r2
    b878:	0883      	lsrs	r3, r0, #2
    b87a:	428b      	cmp	r3, r1
    b87c:	d301      	bcc.n	b882 <__aeabi_idiv+0xea>
    b87e:	008b      	lsls	r3, r1, #2
    b880:	1ac0      	subs	r0, r0, r3
    b882:	4152      	adcs	r2, r2
    b884:	0843      	lsrs	r3, r0, #1
    b886:	428b      	cmp	r3, r1
    b888:	d301      	bcc.n	b88e <__aeabi_idiv+0xf6>
    b88a:	004b      	lsls	r3, r1, #1
    b88c:	1ac0      	subs	r0, r0, r3
    b88e:	4152      	adcs	r2, r2
    b890:	1a41      	subs	r1, r0, r1
    b892:	d200      	bcs.n	b896 <__aeabi_idiv+0xfe>
    b894:	4601      	mov	r1, r0
    b896:	4152      	adcs	r2, r2
    b898:	4610      	mov	r0, r2
    b89a:	4770      	bx	lr
    b89c:	e05d      	b.n	b95a <__aeabi_idiv+0x1c2>
    b89e:	0fca      	lsrs	r2, r1, #31
    b8a0:	d000      	beq.n	b8a4 <__aeabi_idiv+0x10c>
    b8a2:	4249      	negs	r1, r1
    b8a4:	1003      	asrs	r3, r0, #32
    b8a6:	d300      	bcc.n	b8aa <__aeabi_idiv+0x112>
    b8a8:	4240      	negs	r0, r0
    b8aa:	4053      	eors	r3, r2
    b8ac:	2200      	movs	r2, #0
    b8ae:	469c      	mov	ip, r3
    b8b0:	0903      	lsrs	r3, r0, #4
    b8b2:	428b      	cmp	r3, r1
    b8b4:	d32d      	bcc.n	b912 <__aeabi_idiv+0x17a>
    b8b6:	0a03      	lsrs	r3, r0, #8
    b8b8:	428b      	cmp	r3, r1
    b8ba:	d312      	bcc.n	b8e2 <__aeabi_idiv+0x14a>
    b8bc:	22fc      	movs	r2, #252	; 0xfc
    b8be:	0189      	lsls	r1, r1, #6
    b8c0:	ba12      	rev	r2, r2
    b8c2:	0a03      	lsrs	r3, r0, #8
    b8c4:	428b      	cmp	r3, r1
    b8c6:	d30c      	bcc.n	b8e2 <__aeabi_idiv+0x14a>
    b8c8:	0189      	lsls	r1, r1, #6
    b8ca:	1192      	asrs	r2, r2, #6
    b8cc:	428b      	cmp	r3, r1
    b8ce:	d308      	bcc.n	b8e2 <__aeabi_idiv+0x14a>
    b8d0:	0189      	lsls	r1, r1, #6
    b8d2:	1192      	asrs	r2, r2, #6
    b8d4:	428b      	cmp	r3, r1
    b8d6:	d304      	bcc.n	b8e2 <__aeabi_idiv+0x14a>
    b8d8:	0189      	lsls	r1, r1, #6
    b8da:	d03a      	beq.n	b952 <__aeabi_idiv+0x1ba>
    b8dc:	1192      	asrs	r2, r2, #6
    b8de:	e000      	b.n	b8e2 <__aeabi_idiv+0x14a>
    b8e0:	0989      	lsrs	r1, r1, #6
    b8e2:	09c3      	lsrs	r3, r0, #7
    b8e4:	428b      	cmp	r3, r1
    b8e6:	d301      	bcc.n	b8ec <__aeabi_idiv+0x154>
    b8e8:	01cb      	lsls	r3, r1, #7
    b8ea:	1ac0      	subs	r0, r0, r3
    b8ec:	4152      	adcs	r2, r2
    b8ee:	0983      	lsrs	r3, r0, #6
    b8f0:	428b      	cmp	r3, r1
    b8f2:	d301      	bcc.n	b8f8 <__aeabi_idiv+0x160>
    b8f4:	018b      	lsls	r3, r1, #6
    b8f6:	1ac0      	subs	r0, r0, r3
    b8f8:	4152      	adcs	r2, r2
    b8fa:	0943      	lsrs	r3, r0, #5
    b8fc:	428b      	cmp	r3, r1
    b8fe:	d301      	bcc.n	b904 <__aeabi_idiv+0x16c>
    b900:	014b      	lsls	r3, r1, #5
    b902:	1ac0      	subs	r0, r0, r3
    b904:	4152      	adcs	r2, r2
    b906:	0903      	lsrs	r3, r0, #4
    b908:	428b      	cmp	r3, r1
    b90a:	d301      	bcc.n	b910 <__aeabi_idiv+0x178>
    b90c:	010b      	lsls	r3, r1, #4
    b90e:	1ac0      	subs	r0, r0, r3
    b910:	4152      	adcs	r2, r2
    b912:	08c3      	lsrs	r3, r0, #3
    b914:	428b      	cmp	r3, r1
    b916:	d301      	bcc.n	b91c <__aeabi_idiv+0x184>
    b918:	00cb      	lsls	r3, r1, #3
    b91a:	1ac0      	subs	r0, r0, r3
    b91c:	4152      	adcs	r2, r2
    b91e:	0883      	lsrs	r3, r0, #2
    b920:	428b      	cmp	r3, r1
    b922:	d301      	bcc.n	b928 <__aeabi_idiv+0x190>
    b924:	008b      	lsls	r3, r1, #2
    b926:	1ac0      	subs	r0, r0, r3
    b928:	4152      	adcs	r2, r2
    b92a:	d2d9      	bcs.n	b8e0 <__aeabi_idiv+0x148>
    b92c:	0843      	lsrs	r3, r0, #1
    b92e:	428b      	cmp	r3, r1
    b930:	d301      	bcc.n	b936 <__aeabi_idiv+0x19e>
    b932:	004b      	lsls	r3, r1, #1
    b934:	1ac0      	subs	r0, r0, r3
    b936:	4152      	adcs	r2, r2
    b938:	1a41      	subs	r1, r0, r1
    b93a:	d200      	bcs.n	b93e <__aeabi_idiv+0x1a6>
    b93c:	4601      	mov	r1, r0
    b93e:	4663      	mov	r3, ip
    b940:	4152      	adcs	r2, r2
    b942:	105b      	asrs	r3, r3, #1
    b944:	4610      	mov	r0, r2
    b946:	d301      	bcc.n	b94c <__aeabi_idiv+0x1b4>
    b948:	4240      	negs	r0, r0
    b94a:	2b00      	cmp	r3, #0
    b94c:	d500      	bpl.n	b950 <__aeabi_idiv+0x1b8>
    b94e:	4249      	negs	r1, r1
    b950:	4770      	bx	lr
    b952:	4663      	mov	r3, ip
    b954:	105b      	asrs	r3, r3, #1
    b956:	d300      	bcc.n	b95a <__aeabi_idiv+0x1c2>
    b958:	4240      	negs	r0, r0
    b95a:	b501      	push	{r0, lr}
    b95c:	2000      	movs	r0, #0
    b95e:	f000 f805 	bl	b96c <__aeabi_idiv0>
    b962:	bd02      	pop	{r1, pc}

0000b964 <__aeabi_idivmod>:
    b964:	2900      	cmp	r1, #0
    b966:	d0f8      	beq.n	b95a <__aeabi_idiv+0x1c2>
    b968:	e716      	b.n	b798 <__aeabi_idiv>
    b96a:	4770      	bx	lr

0000b96c <__aeabi_idiv0>:
    b96c:	4770      	bx	lr
    b96e:	46c0      	nop			; (mov r8, r8)

0000b970 <__aeabi_lmul>:
    b970:	b5f0      	push	{r4, r5, r6, r7, lr}
    b972:	464f      	mov	r7, r9
    b974:	4646      	mov	r6, r8
    b976:	b4c0      	push	{r6, r7}
    b978:	0416      	lsls	r6, r2, #16
    b97a:	0c36      	lsrs	r6, r6, #16
    b97c:	4699      	mov	r9, r3
    b97e:	0033      	movs	r3, r6
    b980:	0405      	lsls	r5, r0, #16
    b982:	0c2c      	lsrs	r4, r5, #16
    b984:	0c07      	lsrs	r7, r0, #16
    b986:	0c15      	lsrs	r5, r2, #16
    b988:	4363      	muls	r3, r4
    b98a:	437e      	muls	r6, r7
    b98c:	436f      	muls	r7, r5
    b98e:	4365      	muls	r5, r4
    b990:	0c1c      	lsrs	r4, r3, #16
    b992:	19ad      	adds	r5, r5, r6
    b994:	1964      	adds	r4, r4, r5
    b996:	469c      	mov	ip, r3
    b998:	42a6      	cmp	r6, r4
    b99a:	d903      	bls.n	b9a4 <__aeabi_lmul+0x34>
    b99c:	2380      	movs	r3, #128	; 0x80
    b99e:	025b      	lsls	r3, r3, #9
    b9a0:	4698      	mov	r8, r3
    b9a2:	4447      	add	r7, r8
    b9a4:	4663      	mov	r3, ip
    b9a6:	0c25      	lsrs	r5, r4, #16
    b9a8:	19ef      	adds	r7, r5, r7
    b9aa:	041d      	lsls	r5, r3, #16
    b9ac:	464b      	mov	r3, r9
    b9ae:	434a      	muls	r2, r1
    b9b0:	4343      	muls	r3, r0
    b9b2:	0c2d      	lsrs	r5, r5, #16
    b9b4:	0424      	lsls	r4, r4, #16
    b9b6:	1964      	adds	r4, r4, r5
    b9b8:	1899      	adds	r1, r3, r2
    b9ba:	19c9      	adds	r1, r1, r7
    b9bc:	0020      	movs	r0, r4
    b9be:	bc0c      	pop	{r2, r3}
    b9c0:	4690      	mov	r8, r2
    b9c2:	4699      	mov	r9, r3
    b9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9c6:	46c0      	nop			; (mov r8, r8)

0000b9c8 <__aeabi_dmul>:
    b9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9ca:	465f      	mov	r7, fp
    b9cc:	4656      	mov	r6, sl
    b9ce:	464d      	mov	r5, r9
    b9d0:	4644      	mov	r4, r8
    b9d2:	b4f0      	push	{r4, r5, r6, r7}
    b9d4:	030d      	lsls	r5, r1, #12
    b9d6:	4699      	mov	r9, r3
    b9d8:	004e      	lsls	r6, r1, #1
    b9da:	0b2b      	lsrs	r3, r5, #12
    b9dc:	b087      	sub	sp, #28
    b9de:	0007      	movs	r7, r0
    b9e0:	4692      	mov	sl, r2
    b9e2:	4680      	mov	r8, r0
    b9e4:	469b      	mov	fp, r3
    b9e6:	0d76      	lsrs	r6, r6, #21
    b9e8:	0fcc      	lsrs	r4, r1, #31
    b9ea:	2e00      	cmp	r6, #0
    b9ec:	d069      	beq.n	bac2 <__aeabi_dmul+0xfa>
    b9ee:	4b6d      	ldr	r3, [pc, #436]	; (bba4 <__aeabi_dmul+0x1dc>)
    b9f0:	429e      	cmp	r6, r3
    b9f2:	d035      	beq.n	ba60 <__aeabi_dmul+0x98>
    b9f4:	465b      	mov	r3, fp
    b9f6:	2280      	movs	r2, #128	; 0x80
    b9f8:	00dd      	lsls	r5, r3, #3
    b9fa:	0412      	lsls	r2, r2, #16
    b9fc:	0f43      	lsrs	r3, r0, #29
    b9fe:	4313      	orrs	r3, r2
    ba00:	432b      	orrs	r3, r5
    ba02:	469b      	mov	fp, r3
    ba04:	00c3      	lsls	r3, r0, #3
    ba06:	4698      	mov	r8, r3
    ba08:	4b67      	ldr	r3, [pc, #412]	; (bba8 <__aeabi_dmul+0x1e0>)
    ba0a:	2700      	movs	r7, #0
    ba0c:	469c      	mov	ip, r3
    ba0e:	2300      	movs	r3, #0
    ba10:	4466      	add	r6, ip
    ba12:	9301      	str	r3, [sp, #4]
    ba14:	464a      	mov	r2, r9
    ba16:	0315      	lsls	r5, r2, #12
    ba18:	0050      	lsls	r0, r2, #1
    ba1a:	0fd2      	lsrs	r2, r2, #31
    ba1c:	4653      	mov	r3, sl
    ba1e:	0b2d      	lsrs	r5, r5, #12
    ba20:	0d40      	lsrs	r0, r0, #21
    ba22:	4691      	mov	r9, r2
    ba24:	d100      	bne.n	ba28 <__aeabi_dmul+0x60>
    ba26:	e076      	b.n	bb16 <__aeabi_dmul+0x14e>
    ba28:	4a5e      	ldr	r2, [pc, #376]	; (bba4 <__aeabi_dmul+0x1dc>)
    ba2a:	4290      	cmp	r0, r2
    ba2c:	d06c      	beq.n	bb08 <__aeabi_dmul+0x140>
    ba2e:	2280      	movs	r2, #128	; 0x80
    ba30:	0f5b      	lsrs	r3, r3, #29
    ba32:	0412      	lsls	r2, r2, #16
    ba34:	4313      	orrs	r3, r2
    ba36:	4a5c      	ldr	r2, [pc, #368]	; (bba8 <__aeabi_dmul+0x1e0>)
    ba38:	00ed      	lsls	r5, r5, #3
    ba3a:	4694      	mov	ip, r2
    ba3c:	431d      	orrs	r5, r3
    ba3e:	4653      	mov	r3, sl
    ba40:	2200      	movs	r2, #0
    ba42:	00db      	lsls	r3, r3, #3
    ba44:	4460      	add	r0, ip
    ba46:	4649      	mov	r1, r9
    ba48:	1836      	adds	r6, r6, r0
    ba4a:	1c70      	adds	r0, r6, #1
    ba4c:	4061      	eors	r1, r4
    ba4e:	9002      	str	r0, [sp, #8]
    ba50:	4317      	orrs	r7, r2
    ba52:	2f0f      	cmp	r7, #15
    ba54:	d900      	bls.n	ba58 <__aeabi_dmul+0x90>
    ba56:	e0af      	b.n	bbb8 <__aeabi_dmul+0x1f0>
    ba58:	4854      	ldr	r0, [pc, #336]	; (bbac <__aeabi_dmul+0x1e4>)
    ba5a:	00bf      	lsls	r7, r7, #2
    ba5c:	59c7      	ldr	r7, [r0, r7]
    ba5e:	46bf      	mov	pc, r7
    ba60:	465b      	mov	r3, fp
    ba62:	431f      	orrs	r7, r3
    ba64:	d000      	beq.n	ba68 <__aeabi_dmul+0xa0>
    ba66:	e088      	b.n	bb7a <__aeabi_dmul+0x1b2>
    ba68:	2300      	movs	r3, #0
    ba6a:	469b      	mov	fp, r3
    ba6c:	4698      	mov	r8, r3
    ba6e:	3302      	adds	r3, #2
    ba70:	2708      	movs	r7, #8
    ba72:	9301      	str	r3, [sp, #4]
    ba74:	e7ce      	b.n	ba14 <__aeabi_dmul+0x4c>
    ba76:	4649      	mov	r1, r9
    ba78:	2a02      	cmp	r2, #2
    ba7a:	d06a      	beq.n	bb52 <__aeabi_dmul+0x18a>
    ba7c:	2a03      	cmp	r2, #3
    ba7e:	d100      	bne.n	ba82 <__aeabi_dmul+0xba>
    ba80:	e209      	b.n	be96 <__aeabi_dmul+0x4ce>
    ba82:	2a01      	cmp	r2, #1
    ba84:	d000      	beq.n	ba88 <__aeabi_dmul+0xc0>
    ba86:	e1bb      	b.n	be00 <__aeabi_dmul+0x438>
    ba88:	4011      	ands	r1, r2
    ba8a:	2200      	movs	r2, #0
    ba8c:	2300      	movs	r3, #0
    ba8e:	2500      	movs	r5, #0
    ba90:	4690      	mov	r8, r2
    ba92:	b2cc      	uxtb	r4, r1
    ba94:	2100      	movs	r1, #0
    ba96:	032d      	lsls	r5, r5, #12
    ba98:	0d0a      	lsrs	r2, r1, #20
    ba9a:	0512      	lsls	r2, r2, #20
    ba9c:	0b2d      	lsrs	r5, r5, #12
    ba9e:	4315      	orrs	r5, r2
    baa0:	4a43      	ldr	r2, [pc, #268]	; (bbb0 <__aeabi_dmul+0x1e8>)
    baa2:	051b      	lsls	r3, r3, #20
    baa4:	4015      	ands	r5, r2
    baa6:	431d      	orrs	r5, r3
    baa8:	006d      	lsls	r5, r5, #1
    baaa:	07e4      	lsls	r4, r4, #31
    baac:	086d      	lsrs	r5, r5, #1
    baae:	4325      	orrs	r5, r4
    bab0:	4640      	mov	r0, r8
    bab2:	0029      	movs	r1, r5
    bab4:	b007      	add	sp, #28
    bab6:	bc3c      	pop	{r2, r3, r4, r5}
    bab8:	4690      	mov	r8, r2
    baba:	4699      	mov	r9, r3
    babc:	46a2      	mov	sl, r4
    babe:	46ab      	mov	fp, r5
    bac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bac2:	4303      	orrs	r3, r0
    bac4:	d052      	beq.n	bb6c <__aeabi_dmul+0x1a4>
    bac6:	465b      	mov	r3, fp
    bac8:	2b00      	cmp	r3, #0
    baca:	d100      	bne.n	bace <__aeabi_dmul+0x106>
    bacc:	e18a      	b.n	bde4 <__aeabi_dmul+0x41c>
    bace:	4658      	mov	r0, fp
    bad0:	f000 fa2a 	bl	bf28 <__clzsi2>
    bad4:	0003      	movs	r3, r0
    bad6:	3b0b      	subs	r3, #11
    bad8:	2b1c      	cmp	r3, #28
    bada:	dd00      	ble.n	bade <__aeabi_dmul+0x116>
    badc:	e17b      	b.n	bdd6 <__aeabi_dmul+0x40e>
    bade:	221d      	movs	r2, #29
    bae0:	1ad3      	subs	r3, r2, r3
    bae2:	003a      	movs	r2, r7
    bae4:	0001      	movs	r1, r0
    bae6:	465d      	mov	r5, fp
    bae8:	40da      	lsrs	r2, r3
    baea:	3908      	subs	r1, #8
    baec:	408d      	lsls	r5, r1
    baee:	0013      	movs	r3, r2
    baf0:	408f      	lsls	r7, r1
    baf2:	432b      	orrs	r3, r5
    baf4:	469b      	mov	fp, r3
    baf6:	46b8      	mov	r8, r7
    baf8:	4b2e      	ldr	r3, [pc, #184]	; (bbb4 <__aeabi_dmul+0x1ec>)
    bafa:	2700      	movs	r7, #0
    bafc:	469c      	mov	ip, r3
    bafe:	2300      	movs	r3, #0
    bb00:	4460      	add	r0, ip
    bb02:	4246      	negs	r6, r0
    bb04:	9301      	str	r3, [sp, #4]
    bb06:	e785      	b.n	ba14 <__aeabi_dmul+0x4c>
    bb08:	4652      	mov	r2, sl
    bb0a:	432a      	orrs	r2, r5
    bb0c:	d12c      	bne.n	bb68 <__aeabi_dmul+0x1a0>
    bb0e:	2500      	movs	r5, #0
    bb10:	2300      	movs	r3, #0
    bb12:	2202      	movs	r2, #2
    bb14:	e797      	b.n	ba46 <__aeabi_dmul+0x7e>
    bb16:	4652      	mov	r2, sl
    bb18:	432a      	orrs	r2, r5
    bb1a:	d021      	beq.n	bb60 <__aeabi_dmul+0x198>
    bb1c:	2d00      	cmp	r5, #0
    bb1e:	d100      	bne.n	bb22 <__aeabi_dmul+0x15a>
    bb20:	e154      	b.n	bdcc <__aeabi_dmul+0x404>
    bb22:	0028      	movs	r0, r5
    bb24:	f000 fa00 	bl	bf28 <__clzsi2>
    bb28:	0003      	movs	r3, r0
    bb2a:	3b0b      	subs	r3, #11
    bb2c:	2b1c      	cmp	r3, #28
    bb2e:	dd00      	ble.n	bb32 <__aeabi_dmul+0x16a>
    bb30:	e146      	b.n	bdc0 <__aeabi_dmul+0x3f8>
    bb32:	211d      	movs	r1, #29
    bb34:	1acb      	subs	r3, r1, r3
    bb36:	4651      	mov	r1, sl
    bb38:	0002      	movs	r2, r0
    bb3a:	40d9      	lsrs	r1, r3
    bb3c:	4653      	mov	r3, sl
    bb3e:	3a08      	subs	r2, #8
    bb40:	4095      	lsls	r5, r2
    bb42:	4093      	lsls	r3, r2
    bb44:	430d      	orrs	r5, r1
    bb46:	4a1b      	ldr	r2, [pc, #108]	; (bbb4 <__aeabi_dmul+0x1ec>)
    bb48:	4694      	mov	ip, r2
    bb4a:	4460      	add	r0, ip
    bb4c:	4240      	negs	r0, r0
    bb4e:	2200      	movs	r2, #0
    bb50:	e779      	b.n	ba46 <__aeabi_dmul+0x7e>
    bb52:	2401      	movs	r4, #1
    bb54:	2200      	movs	r2, #0
    bb56:	400c      	ands	r4, r1
    bb58:	4b12      	ldr	r3, [pc, #72]	; (bba4 <__aeabi_dmul+0x1dc>)
    bb5a:	2500      	movs	r5, #0
    bb5c:	4690      	mov	r8, r2
    bb5e:	e799      	b.n	ba94 <__aeabi_dmul+0xcc>
    bb60:	2500      	movs	r5, #0
    bb62:	2300      	movs	r3, #0
    bb64:	2201      	movs	r2, #1
    bb66:	e76e      	b.n	ba46 <__aeabi_dmul+0x7e>
    bb68:	2203      	movs	r2, #3
    bb6a:	e76c      	b.n	ba46 <__aeabi_dmul+0x7e>
    bb6c:	2300      	movs	r3, #0
    bb6e:	469b      	mov	fp, r3
    bb70:	4698      	mov	r8, r3
    bb72:	3301      	adds	r3, #1
    bb74:	2704      	movs	r7, #4
    bb76:	9301      	str	r3, [sp, #4]
    bb78:	e74c      	b.n	ba14 <__aeabi_dmul+0x4c>
    bb7a:	2303      	movs	r3, #3
    bb7c:	270c      	movs	r7, #12
    bb7e:	9301      	str	r3, [sp, #4]
    bb80:	e748      	b.n	ba14 <__aeabi_dmul+0x4c>
    bb82:	2300      	movs	r3, #0
    bb84:	2580      	movs	r5, #128	; 0x80
    bb86:	4698      	mov	r8, r3
    bb88:	2400      	movs	r4, #0
    bb8a:	032d      	lsls	r5, r5, #12
    bb8c:	4b05      	ldr	r3, [pc, #20]	; (bba4 <__aeabi_dmul+0x1dc>)
    bb8e:	e781      	b.n	ba94 <__aeabi_dmul+0xcc>
    bb90:	465d      	mov	r5, fp
    bb92:	4643      	mov	r3, r8
    bb94:	9a01      	ldr	r2, [sp, #4]
    bb96:	e76f      	b.n	ba78 <__aeabi_dmul+0xb0>
    bb98:	465d      	mov	r5, fp
    bb9a:	4643      	mov	r3, r8
    bb9c:	0021      	movs	r1, r4
    bb9e:	9a01      	ldr	r2, [sp, #4]
    bba0:	e76a      	b.n	ba78 <__aeabi_dmul+0xb0>
    bba2:	46c0      	nop			; (mov r8, r8)
    bba4:	000007ff 	.word	0x000007ff
    bba8:	fffffc01 	.word	0xfffffc01
    bbac:	0000ea10 	.word	0x0000ea10
    bbb0:	800fffff 	.word	0x800fffff
    bbb4:	000003f3 	.word	0x000003f3
    bbb8:	4642      	mov	r2, r8
    bbba:	0c12      	lsrs	r2, r2, #16
    bbbc:	4691      	mov	r9, r2
    bbbe:	0c1a      	lsrs	r2, r3, #16
    bbc0:	4694      	mov	ip, r2
    bbc2:	4642      	mov	r2, r8
    bbc4:	0417      	lsls	r7, r2, #16
    bbc6:	464a      	mov	r2, r9
    bbc8:	041b      	lsls	r3, r3, #16
    bbca:	0c1b      	lsrs	r3, r3, #16
    bbcc:	435a      	muls	r2, r3
    bbce:	4660      	mov	r0, ip
    bbd0:	4690      	mov	r8, r2
    bbd2:	464a      	mov	r2, r9
    bbd4:	4342      	muls	r2, r0
    bbd6:	0010      	movs	r0, r2
    bbd8:	9203      	str	r2, [sp, #12]
    bbda:	4662      	mov	r2, ip
    bbdc:	001c      	movs	r4, r3
    bbde:	0c3f      	lsrs	r7, r7, #16
    bbe0:	437a      	muls	r2, r7
    bbe2:	437c      	muls	r4, r7
    bbe4:	4442      	add	r2, r8
    bbe6:	9201      	str	r2, [sp, #4]
    bbe8:	0c22      	lsrs	r2, r4, #16
    bbea:	4692      	mov	sl, r2
    bbec:	9a01      	ldr	r2, [sp, #4]
    bbee:	4452      	add	r2, sl
    bbf0:	4590      	cmp	r8, r2
    bbf2:	d906      	bls.n	bc02 <__aeabi_dmul+0x23a>
    bbf4:	4682      	mov	sl, r0
    bbf6:	2080      	movs	r0, #128	; 0x80
    bbf8:	0240      	lsls	r0, r0, #9
    bbfa:	4680      	mov	r8, r0
    bbfc:	44c2      	add	sl, r8
    bbfe:	4650      	mov	r0, sl
    bc00:	9003      	str	r0, [sp, #12]
    bc02:	0c10      	lsrs	r0, r2, #16
    bc04:	9004      	str	r0, [sp, #16]
    bc06:	4648      	mov	r0, r9
    bc08:	0424      	lsls	r4, r4, #16
    bc0a:	0c24      	lsrs	r4, r4, #16
    bc0c:	0412      	lsls	r2, r2, #16
    bc0e:	1912      	adds	r2, r2, r4
    bc10:	9205      	str	r2, [sp, #20]
    bc12:	0c2a      	lsrs	r2, r5, #16
    bc14:	042d      	lsls	r5, r5, #16
    bc16:	0c2d      	lsrs	r5, r5, #16
    bc18:	4368      	muls	r0, r5
    bc1a:	002c      	movs	r4, r5
    bc1c:	4682      	mov	sl, r0
    bc1e:	4648      	mov	r0, r9
    bc20:	437c      	muls	r4, r7
    bc22:	4350      	muls	r0, r2
    bc24:	4681      	mov	r9, r0
    bc26:	0c20      	lsrs	r0, r4, #16
    bc28:	4680      	mov	r8, r0
    bc2a:	4357      	muls	r7, r2
    bc2c:	4457      	add	r7, sl
    bc2e:	4447      	add	r7, r8
    bc30:	45ba      	cmp	sl, r7
    bc32:	d903      	bls.n	bc3c <__aeabi_dmul+0x274>
    bc34:	2080      	movs	r0, #128	; 0x80
    bc36:	0240      	lsls	r0, r0, #9
    bc38:	4680      	mov	r8, r0
    bc3a:	44c1      	add	r9, r8
    bc3c:	0c38      	lsrs	r0, r7, #16
    bc3e:	043f      	lsls	r7, r7, #16
    bc40:	46b8      	mov	r8, r7
    bc42:	4448      	add	r0, r9
    bc44:	0424      	lsls	r4, r4, #16
    bc46:	0c24      	lsrs	r4, r4, #16
    bc48:	9001      	str	r0, [sp, #4]
    bc4a:	9804      	ldr	r0, [sp, #16]
    bc4c:	44a0      	add	r8, r4
    bc4e:	4440      	add	r0, r8
    bc50:	9004      	str	r0, [sp, #16]
    bc52:	4658      	mov	r0, fp
    bc54:	0c00      	lsrs	r0, r0, #16
    bc56:	4681      	mov	r9, r0
    bc58:	4658      	mov	r0, fp
    bc5a:	0404      	lsls	r4, r0, #16
    bc5c:	0c20      	lsrs	r0, r4, #16
    bc5e:	4682      	mov	sl, r0
    bc60:	0007      	movs	r7, r0
    bc62:	4648      	mov	r0, r9
    bc64:	435f      	muls	r7, r3
    bc66:	464c      	mov	r4, r9
    bc68:	4343      	muls	r3, r0
    bc6a:	4660      	mov	r0, ip
    bc6c:	4360      	muls	r0, r4
    bc6e:	4664      	mov	r4, ip
    bc70:	4683      	mov	fp, r0
    bc72:	4650      	mov	r0, sl
    bc74:	4344      	muls	r4, r0
    bc76:	0c38      	lsrs	r0, r7, #16
    bc78:	4684      	mov	ip, r0
    bc7a:	18e4      	adds	r4, r4, r3
    bc7c:	4464      	add	r4, ip
    bc7e:	42a3      	cmp	r3, r4
    bc80:	d903      	bls.n	bc8a <__aeabi_dmul+0x2c2>
    bc82:	2380      	movs	r3, #128	; 0x80
    bc84:	025b      	lsls	r3, r3, #9
    bc86:	469c      	mov	ip, r3
    bc88:	44e3      	add	fp, ip
    bc8a:	4648      	mov	r0, r9
    bc8c:	043f      	lsls	r7, r7, #16
    bc8e:	0c23      	lsrs	r3, r4, #16
    bc90:	0c3f      	lsrs	r7, r7, #16
    bc92:	0424      	lsls	r4, r4, #16
    bc94:	19e4      	adds	r4, r4, r7
    bc96:	4657      	mov	r7, sl
    bc98:	4368      	muls	r0, r5
    bc9a:	436f      	muls	r7, r5
    bc9c:	4684      	mov	ip, r0
    bc9e:	464d      	mov	r5, r9
    bca0:	4650      	mov	r0, sl
    bca2:	4355      	muls	r5, r2
    bca4:	4342      	muls	r2, r0
    bca6:	0c38      	lsrs	r0, r7, #16
    bca8:	4681      	mov	r9, r0
    bcaa:	4462      	add	r2, ip
    bcac:	444a      	add	r2, r9
    bcae:	445b      	add	r3, fp
    bcb0:	4594      	cmp	ip, r2
    bcb2:	d903      	bls.n	bcbc <__aeabi_dmul+0x2f4>
    bcb4:	2080      	movs	r0, #128	; 0x80
    bcb6:	0240      	lsls	r0, r0, #9
    bcb8:	4684      	mov	ip, r0
    bcba:	4465      	add	r5, ip
    bcbc:	9803      	ldr	r0, [sp, #12]
    bcbe:	043f      	lsls	r7, r7, #16
    bcc0:	4683      	mov	fp, r0
    bcc2:	9804      	ldr	r0, [sp, #16]
    bcc4:	0c3f      	lsrs	r7, r7, #16
    bcc6:	4684      	mov	ip, r0
    bcc8:	44e3      	add	fp, ip
    bcca:	45c3      	cmp	fp, r8
    bccc:	4180      	sbcs	r0, r0
    bcce:	4240      	negs	r0, r0
    bcd0:	4682      	mov	sl, r0
    bcd2:	0410      	lsls	r0, r2, #16
    bcd4:	4684      	mov	ip, r0
    bcd6:	9801      	ldr	r0, [sp, #4]
    bcd8:	4467      	add	r7, ip
    bcda:	4684      	mov	ip, r0
    bcdc:	4467      	add	r7, ip
    bcde:	44a3      	add	fp, r4
    bce0:	46bc      	mov	ip, r7
    bce2:	45a3      	cmp	fp, r4
    bce4:	41a4      	sbcs	r4, r4
    bce6:	4699      	mov	r9, r3
    bce8:	44d4      	add	ip, sl
    bcea:	4264      	negs	r4, r4
    bcec:	4287      	cmp	r7, r0
    bcee:	41bf      	sbcs	r7, r7
    bcf0:	45d4      	cmp	ip, sl
    bcf2:	4180      	sbcs	r0, r0
    bcf4:	44e1      	add	r9, ip
    bcf6:	46a0      	mov	r8, r4
    bcf8:	4599      	cmp	r9, r3
    bcfa:	419b      	sbcs	r3, r3
    bcfc:	427f      	negs	r7, r7
    bcfe:	4240      	negs	r0, r0
    bd00:	44c8      	add	r8, r9
    bd02:	4307      	orrs	r7, r0
    bd04:	0c12      	lsrs	r2, r2, #16
    bd06:	18ba      	adds	r2, r7, r2
    bd08:	45a0      	cmp	r8, r4
    bd0a:	41a4      	sbcs	r4, r4
    bd0c:	425f      	negs	r7, r3
    bd0e:	003b      	movs	r3, r7
    bd10:	4264      	negs	r4, r4
    bd12:	4323      	orrs	r3, r4
    bd14:	18d7      	adds	r7, r2, r3
    bd16:	4643      	mov	r3, r8
    bd18:	197d      	adds	r5, r7, r5
    bd1a:	0ddb      	lsrs	r3, r3, #23
    bd1c:	026d      	lsls	r5, r5, #9
    bd1e:	431d      	orrs	r5, r3
    bd20:	465b      	mov	r3, fp
    bd22:	025a      	lsls	r2, r3, #9
    bd24:	9b05      	ldr	r3, [sp, #20]
    bd26:	431a      	orrs	r2, r3
    bd28:	1e53      	subs	r3, r2, #1
    bd2a:	419a      	sbcs	r2, r3
    bd2c:	465b      	mov	r3, fp
    bd2e:	0ddb      	lsrs	r3, r3, #23
    bd30:	431a      	orrs	r2, r3
    bd32:	4643      	mov	r3, r8
    bd34:	025b      	lsls	r3, r3, #9
    bd36:	4313      	orrs	r3, r2
    bd38:	01ea      	lsls	r2, r5, #7
    bd3a:	d507      	bpl.n	bd4c <__aeabi_dmul+0x384>
    bd3c:	2201      	movs	r2, #1
    bd3e:	085c      	lsrs	r4, r3, #1
    bd40:	4013      	ands	r3, r2
    bd42:	4323      	orrs	r3, r4
    bd44:	07ea      	lsls	r2, r5, #31
    bd46:	9e02      	ldr	r6, [sp, #8]
    bd48:	4313      	orrs	r3, r2
    bd4a:	086d      	lsrs	r5, r5, #1
    bd4c:	4a57      	ldr	r2, [pc, #348]	; (beac <__aeabi_dmul+0x4e4>)
    bd4e:	18b2      	adds	r2, r6, r2
    bd50:	2a00      	cmp	r2, #0
    bd52:	dd4b      	ble.n	bdec <__aeabi_dmul+0x424>
    bd54:	0758      	lsls	r0, r3, #29
    bd56:	d009      	beq.n	bd6c <__aeabi_dmul+0x3a4>
    bd58:	200f      	movs	r0, #15
    bd5a:	4018      	ands	r0, r3
    bd5c:	2804      	cmp	r0, #4
    bd5e:	d005      	beq.n	bd6c <__aeabi_dmul+0x3a4>
    bd60:	1d18      	adds	r0, r3, #4
    bd62:	4298      	cmp	r0, r3
    bd64:	419b      	sbcs	r3, r3
    bd66:	425b      	negs	r3, r3
    bd68:	18ed      	adds	r5, r5, r3
    bd6a:	0003      	movs	r3, r0
    bd6c:	01e8      	lsls	r0, r5, #7
    bd6e:	d504      	bpl.n	bd7a <__aeabi_dmul+0x3b2>
    bd70:	4a4f      	ldr	r2, [pc, #316]	; (beb0 <__aeabi_dmul+0x4e8>)
    bd72:	4015      	ands	r5, r2
    bd74:	2280      	movs	r2, #128	; 0x80
    bd76:	00d2      	lsls	r2, r2, #3
    bd78:	18b2      	adds	r2, r6, r2
    bd7a:	484e      	ldr	r0, [pc, #312]	; (beb4 <__aeabi_dmul+0x4ec>)
    bd7c:	4282      	cmp	r2, r0
    bd7e:	dd00      	ble.n	bd82 <__aeabi_dmul+0x3ba>
    bd80:	e6e7      	b.n	bb52 <__aeabi_dmul+0x18a>
    bd82:	2401      	movs	r4, #1
    bd84:	08db      	lsrs	r3, r3, #3
    bd86:	0768      	lsls	r0, r5, #29
    bd88:	4318      	orrs	r0, r3
    bd8a:	026d      	lsls	r5, r5, #9
    bd8c:	0553      	lsls	r3, r2, #21
    bd8e:	4680      	mov	r8, r0
    bd90:	0b2d      	lsrs	r5, r5, #12
    bd92:	0d5b      	lsrs	r3, r3, #21
    bd94:	400c      	ands	r4, r1
    bd96:	e67d      	b.n	ba94 <__aeabi_dmul+0xcc>
    bd98:	2280      	movs	r2, #128	; 0x80
    bd9a:	4659      	mov	r1, fp
    bd9c:	0312      	lsls	r2, r2, #12
    bd9e:	4211      	tst	r1, r2
    bda0:	d008      	beq.n	bdb4 <__aeabi_dmul+0x3ec>
    bda2:	4215      	tst	r5, r2
    bda4:	d106      	bne.n	bdb4 <__aeabi_dmul+0x3ec>
    bda6:	4315      	orrs	r5, r2
    bda8:	032d      	lsls	r5, r5, #12
    bdaa:	4698      	mov	r8, r3
    bdac:	0b2d      	lsrs	r5, r5, #12
    bdae:	464c      	mov	r4, r9
    bdb0:	4b41      	ldr	r3, [pc, #260]	; (beb8 <__aeabi_dmul+0x4f0>)
    bdb2:	e66f      	b.n	ba94 <__aeabi_dmul+0xcc>
    bdb4:	465d      	mov	r5, fp
    bdb6:	4315      	orrs	r5, r2
    bdb8:	032d      	lsls	r5, r5, #12
    bdba:	0b2d      	lsrs	r5, r5, #12
    bdbc:	4b3e      	ldr	r3, [pc, #248]	; (beb8 <__aeabi_dmul+0x4f0>)
    bdbe:	e669      	b.n	ba94 <__aeabi_dmul+0xcc>
    bdc0:	0003      	movs	r3, r0
    bdc2:	4655      	mov	r5, sl
    bdc4:	3b28      	subs	r3, #40	; 0x28
    bdc6:	409d      	lsls	r5, r3
    bdc8:	2300      	movs	r3, #0
    bdca:	e6bc      	b.n	bb46 <__aeabi_dmul+0x17e>
    bdcc:	4650      	mov	r0, sl
    bdce:	f000 f8ab 	bl	bf28 <__clzsi2>
    bdd2:	3020      	adds	r0, #32
    bdd4:	e6a8      	b.n	bb28 <__aeabi_dmul+0x160>
    bdd6:	0003      	movs	r3, r0
    bdd8:	3b28      	subs	r3, #40	; 0x28
    bdda:	409f      	lsls	r7, r3
    bddc:	2300      	movs	r3, #0
    bdde:	46bb      	mov	fp, r7
    bde0:	4698      	mov	r8, r3
    bde2:	e689      	b.n	baf8 <__aeabi_dmul+0x130>
    bde4:	f000 f8a0 	bl	bf28 <__clzsi2>
    bde8:	3020      	adds	r0, #32
    bdea:	e673      	b.n	bad4 <__aeabi_dmul+0x10c>
    bdec:	2401      	movs	r4, #1
    bdee:	1aa6      	subs	r6, r4, r2
    bdf0:	2e38      	cmp	r6, #56	; 0x38
    bdf2:	dd07      	ble.n	be04 <__aeabi_dmul+0x43c>
    bdf4:	2200      	movs	r2, #0
    bdf6:	400c      	ands	r4, r1
    bdf8:	2300      	movs	r3, #0
    bdfa:	2500      	movs	r5, #0
    bdfc:	4690      	mov	r8, r2
    bdfe:	e649      	b.n	ba94 <__aeabi_dmul+0xcc>
    be00:	9e02      	ldr	r6, [sp, #8]
    be02:	e7a3      	b.n	bd4c <__aeabi_dmul+0x384>
    be04:	2e1f      	cmp	r6, #31
    be06:	dc20      	bgt.n	be4a <__aeabi_dmul+0x482>
    be08:	2220      	movs	r2, #32
    be0a:	002c      	movs	r4, r5
    be0c:	0018      	movs	r0, r3
    be0e:	1b92      	subs	r2, r2, r6
    be10:	40f0      	lsrs	r0, r6
    be12:	4094      	lsls	r4, r2
    be14:	4093      	lsls	r3, r2
    be16:	4304      	orrs	r4, r0
    be18:	1e58      	subs	r0, r3, #1
    be1a:	4183      	sbcs	r3, r0
    be1c:	431c      	orrs	r4, r3
    be1e:	40f5      	lsrs	r5, r6
    be20:	0763      	lsls	r3, r4, #29
    be22:	d009      	beq.n	be38 <__aeabi_dmul+0x470>
    be24:	230f      	movs	r3, #15
    be26:	4023      	ands	r3, r4
    be28:	2b04      	cmp	r3, #4
    be2a:	d005      	beq.n	be38 <__aeabi_dmul+0x470>
    be2c:	0023      	movs	r3, r4
    be2e:	1d1c      	adds	r4, r3, #4
    be30:	429c      	cmp	r4, r3
    be32:	4192      	sbcs	r2, r2
    be34:	4252      	negs	r2, r2
    be36:	18ad      	adds	r5, r5, r2
    be38:	022b      	lsls	r3, r5, #8
    be3a:	d51f      	bpl.n	be7c <__aeabi_dmul+0x4b4>
    be3c:	2401      	movs	r4, #1
    be3e:	2200      	movs	r2, #0
    be40:	400c      	ands	r4, r1
    be42:	2301      	movs	r3, #1
    be44:	2500      	movs	r5, #0
    be46:	4690      	mov	r8, r2
    be48:	e624      	b.n	ba94 <__aeabi_dmul+0xcc>
    be4a:	201f      	movs	r0, #31
    be4c:	002c      	movs	r4, r5
    be4e:	4240      	negs	r0, r0
    be50:	1a82      	subs	r2, r0, r2
    be52:	40d4      	lsrs	r4, r2
    be54:	2e20      	cmp	r6, #32
    be56:	d01c      	beq.n	be92 <__aeabi_dmul+0x4ca>
    be58:	2240      	movs	r2, #64	; 0x40
    be5a:	1b96      	subs	r6, r2, r6
    be5c:	40b5      	lsls	r5, r6
    be5e:	432b      	orrs	r3, r5
    be60:	1e58      	subs	r0, r3, #1
    be62:	4183      	sbcs	r3, r0
    be64:	2007      	movs	r0, #7
    be66:	4323      	orrs	r3, r4
    be68:	4018      	ands	r0, r3
    be6a:	2500      	movs	r5, #0
    be6c:	2800      	cmp	r0, #0
    be6e:	d009      	beq.n	be84 <__aeabi_dmul+0x4bc>
    be70:	220f      	movs	r2, #15
    be72:	2500      	movs	r5, #0
    be74:	401a      	ands	r2, r3
    be76:	001c      	movs	r4, r3
    be78:	2a04      	cmp	r2, #4
    be7a:	d1d8      	bne.n	be2e <__aeabi_dmul+0x466>
    be7c:	0023      	movs	r3, r4
    be7e:	0768      	lsls	r0, r5, #29
    be80:	026d      	lsls	r5, r5, #9
    be82:	0b2d      	lsrs	r5, r5, #12
    be84:	2401      	movs	r4, #1
    be86:	08db      	lsrs	r3, r3, #3
    be88:	4303      	orrs	r3, r0
    be8a:	4698      	mov	r8, r3
    be8c:	400c      	ands	r4, r1
    be8e:	2300      	movs	r3, #0
    be90:	e600      	b.n	ba94 <__aeabi_dmul+0xcc>
    be92:	2500      	movs	r5, #0
    be94:	e7e3      	b.n	be5e <__aeabi_dmul+0x496>
    be96:	2280      	movs	r2, #128	; 0x80
    be98:	2401      	movs	r4, #1
    be9a:	0312      	lsls	r2, r2, #12
    be9c:	4315      	orrs	r5, r2
    be9e:	032d      	lsls	r5, r5, #12
    bea0:	4698      	mov	r8, r3
    bea2:	0b2d      	lsrs	r5, r5, #12
    bea4:	400c      	ands	r4, r1
    bea6:	4b04      	ldr	r3, [pc, #16]	; (beb8 <__aeabi_dmul+0x4f0>)
    bea8:	e5f4      	b.n	ba94 <__aeabi_dmul+0xcc>
    beaa:	46c0      	nop			; (mov r8, r8)
    beac:	000003ff 	.word	0x000003ff
    beb0:	feffffff 	.word	0xfeffffff
    beb4:	000007fe 	.word	0x000007fe
    beb8:	000007ff 	.word	0x000007ff

0000bebc <__aeabi_d2iz>:
    bebc:	030b      	lsls	r3, r1, #12
    bebe:	b530      	push	{r4, r5, lr}
    bec0:	4d13      	ldr	r5, [pc, #76]	; (bf10 <__aeabi_d2iz+0x54>)
    bec2:	0b1a      	lsrs	r2, r3, #12
    bec4:	004b      	lsls	r3, r1, #1
    bec6:	0d5b      	lsrs	r3, r3, #21
    bec8:	0fc9      	lsrs	r1, r1, #31
    beca:	2400      	movs	r4, #0
    becc:	42ab      	cmp	r3, r5
    bece:	dd11      	ble.n	bef4 <__aeabi_d2iz+0x38>
    bed0:	4c10      	ldr	r4, [pc, #64]	; (bf14 <__aeabi_d2iz+0x58>)
    bed2:	42a3      	cmp	r3, r4
    bed4:	dc10      	bgt.n	bef8 <__aeabi_d2iz+0x3c>
    bed6:	2480      	movs	r4, #128	; 0x80
    bed8:	0364      	lsls	r4, r4, #13
    beda:	4322      	orrs	r2, r4
    bedc:	4c0e      	ldr	r4, [pc, #56]	; (bf18 <__aeabi_d2iz+0x5c>)
    bede:	1ae4      	subs	r4, r4, r3
    bee0:	2c1f      	cmp	r4, #31
    bee2:	dd0c      	ble.n	befe <__aeabi_d2iz+0x42>
    bee4:	480d      	ldr	r0, [pc, #52]	; (bf1c <__aeabi_d2iz+0x60>)
    bee6:	1ac3      	subs	r3, r0, r3
    bee8:	40da      	lsrs	r2, r3
    beea:	0013      	movs	r3, r2
    beec:	425c      	negs	r4, r3
    beee:	2900      	cmp	r1, #0
    bef0:	d100      	bne.n	bef4 <__aeabi_d2iz+0x38>
    bef2:	001c      	movs	r4, r3
    bef4:	0020      	movs	r0, r4
    bef6:	bd30      	pop	{r4, r5, pc}
    bef8:	4b09      	ldr	r3, [pc, #36]	; (bf20 <__aeabi_d2iz+0x64>)
    befa:	18cc      	adds	r4, r1, r3
    befc:	e7fa      	b.n	bef4 <__aeabi_d2iz+0x38>
    befe:	40e0      	lsrs	r0, r4
    bf00:	4c08      	ldr	r4, [pc, #32]	; (bf24 <__aeabi_d2iz+0x68>)
    bf02:	46a4      	mov	ip, r4
    bf04:	4463      	add	r3, ip
    bf06:	409a      	lsls	r2, r3
    bf08:	0013      	movs	r3, r2
    bf0a:	4303      	orrs	r3, r0
    bf0c:	e7ee      	b.n	beec <__aeabi_d2iz+0x30>
    bf0e:	46c0      	nop			; (mov r8, r8)
    bf10:	000003fe 	.word	0x000003fe
    bf14:	0000041d 	.word	0x0000041d
    bf18:	00000433 	.word	0x00000433
    bf1c:	00000413 	.word	0x00000413
    bf20:	7fffffff 	.word	0x7fffffff
    bf24:	fffffbed 	.word	0xfffffbed

0000bf28 <__clzsi2>:
    bf28:	211c      	movs	r1, #28
    bf2a:	2301      	movs	r3, #1
    bf2c:	041b      	lsls	r3, r3, #16
    bf2e:	4298      	cmp	r0, r3
    bf30:	d301      	bcc.n	bf36 <__clzsi2+0xe>
    bf32:	0c00      	lsrs	r0, r0, #16
    bf34:	3910      	subs	r1, #16
    bf36:	0a1b      	lsrs	r3, r3, #8
    bf38:	4298      	cmp	r0, r3
    bf3a:	d301      	bcc.n	bf40 <__clzsi2+0x18>
    bf3c:	0a00      	lsrs	r0, r0, #8
    bf3e:	3908      	subs	r1, #8
    bf40:	091b      	lsrs	r3, r3, #4
    bf42:	4298      	cmp	r0, r3
    bf44:	d301      	bcc.n	bf4a <__clzsi2+0x22>
    bf46:	0900      	lsrs	r0, r0, #4
    bf48:	3904      	subs	r1, #4
    bf4a:	a202      	add	r2, pc, #8	; (adr r2, bf54 <__clzsi2+0x2c>)
    bf4c:	5c10      	ldrb	r0, [r2, r0]
    bf4e:	1840      	adds	r0, r0, r1
    bf50:	4770      	bx	lr
    bf52:	46c0      	nop			; (mov r8, r8)
    bf54:	02020304 	.word	0x02020304
    bf58:	01010101 	.word	0x01010101
	...

0000bf64 <__assert_func>:
    bf64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    bf66:	001d      	movs	r5, r3
    bf68:	4b0a      	ldr	r3, [pc, #40]	; (bf94 <__assert_func+0x30>)
    bf6a:	0006      	movs	r6, r0
    bf6c:	681b      	ldr	r3, [r3, #0]
    bf6e:	68d8      	ldr	r0, [r3, #12]
    bf70:	2a00      	cmp	r2, #0
    bf72:	d102      	bne.n	bf7a <__assert_func+0x16>
    bf74:	4c08      	ldr	r4, [pc, #32]	; (bf98 <__assert_func+0x34>)
    bf76:	0023      	movs	r3, r4
    bf78:	e001      	b.n	bf7e <__assert_func+0x1a>
    bf7a:	0013      	movs	r3, r2
    bf7c:	4c07      	ldr	r4, [pc, #28]	; (bf9c <__assert_func+0x38>)
    bf7e:	9302      	str	r3, [sp, #8]
    bf80:	9100      	str	r1, [sp, #0]
    bf82:	0033      	movs	r3, r6
    bf84:	002a      	movs	r2, r5
    bf86:	4906      	ldr	r1, [pc, #24]	; (bfa0 <__assert_func+0x3c>)
    bf88:	9401      	str	r4, [sp, #4]
    bf8a:	f000 f80b 	bl	bfa4 <fiprintf>
    bf8e:	f000 fdc3 	bl	cb18 <abort>
    bf92:	46c0      	nop			; (mov r8, r8)
    bf94:	20000090 	.word	0x20000090
    bf98:	0000ea8b 	.word	0x0000ea8b
    bf9c:	0000ea50 	.word	0x0000ea50
    bfa0:	0000ea5d 	.word	0x0000ea5d

0000bfa4 <fiprintf>:
    bfa4:	b40e      	push	{r1, r2, r3}
    bfa6:	b503      	push	{r0, r1, lr}
    bfa8:	0001      	movs	r1, r0
    bfaa:	ab03      	add	r3, sp, #12
    bfac:	4804      	ldr	r0, [pc, #16]	; (bfc0 <fiprintf+0x1c>)
    bfae:	cb04      	ldmia	r3!, {r2}
    bfb0:	6800      	ldr	r0, [r0, #0]
    bfb2:	9301      	str	r3, [sp, #4]
    bfb4:	f000 f864 	bl	c080 <_vfiprintf_r>
    bfb8:	b002      	add	sp, #8
    bfba:	bc08      	pop	{r3}
    bfbc:	b003      	add	sp, #12
    bfbe:	4718      	bx	r3
    bfc0:	20000090 	.word	0x20000090

0000bfc4 <__libc_init_array>:
    bfc4:	4b0e      	ldr	r3, [pc, #56]	; (c000 <__libc_init_array+0x3c>)
    bfc6:	b570      	push	{r4, r5, r6, lr}
    bfc8:	2500      	movs	r5, #0
    bfca:	001e      	movs	r6, r3
    bfcc:	4c0d      	ldr	r4, [pc, #52]	; (c004 <__libc_init_array+0x40>)
    bfce:	1ae4      	subs	r4, r4, r3
    bfd0:	10a4      	asrs	r4, r4, #2
    bfd2:	42a5      	cmp	r5, r4
    bfd4:	d004      	beq.n	bfe0 <__libc_init_array+0x1c>
    bfd6:	00ab      	lsls	r3, r5, #2
    bfd8:	58f3      	ldr	r3, [r6, r3]
    bfda:	4798      	blx	r3
    bfdc:	3501      	adds	r5, #1
    bfde:	e7f8      	b.n	bfd2 <__libc_init_array+0xe>
    bfe0:	f002 fda2 	bl	eb28 <_init>
    bfe4:	4b08      	ldr	r3, [pc, #32]	; (c008 <__libc_init_array+0x44>)
    bfe6:	2500      	movs	r5, #0
    bfe8:	001e      	movs	r6, r3
    bfea:	4c08      	ldr	r4, [pc, #32]	; (c00c <__libc_init_array+0x48>)
    bfec:	1ae4      	subs	r4, r4, r3
    bfee:	10a4      	asrs	r4, r4, #2
    bff0:	42a5      	cmp	r5, r4
    bff2:	d004      	beq.n	bffe <__libc_init_array+0x3a>
    bff4:	00ab      	lsls	r3, r5, #2
    bff6:	58f3      	ldr	r3, [r6, r3]
    bff8:	4798      	blx	r3
    bffa:	3501      	adds	r5, #1
    bffc:	e7f8      	b.n	bff0 <__libc_init_array+0x2c>
    bffe:	bd70      	pop	{r4, r5, r6, pc}
    c000:	0000eb34 	.word	0x0000eb34
    c004:	0000eb34 	.word	0x0000eb34
    c008:	0000eb34 	.word	0x0000eb34
    c00c:	0000eb38 	.word	0x0000eb38

0000c010 <memcpy>:
    c010:	2300      	movs	r3, #0
    c012:	b510      	push	{r4, lr}
    c014:	429a      	cmp	r2, r3
    c016:	d003      	beq.n	c020 <memcpy+0x10>
    c018:	5ccc      	ldrb	r4, [r1, r3]
    c01a:	54c4      	strb	r4, [r0, r3]
    c01c:	3301      	adds	r3, #1
    c01e:	e7f9      	b.n	c014 <memcpy+0x4>
    c020:	bd10      	pop	{r4, pc}

0000c022 <memset>:
    c022:	0003      	movs	r3, r0
    c024:	1882      	adds	r2, r0, r2
    c026:	4293      	cmp	r3, r2
    c028:	d002      	beq.n	c030 <memset+0xe>
    c02a:	7019      	strb	r1, [r3, #0]
    c02c:	3301      	adds	r3, #1
    c02e:	e7fa      	b.n	c026 <memset+0x4>
    c030:	4770      	bx	lr

0000c032 <__sfputc_r>:
    c032:	6893      	ldr	r3, [r2, #8]
    c034:	b510      	push	{r4, lr}
    c036:	3b01      	subs	r3, #1
    c038:	6093      	str	r3, [r2, #8]
    c03a:	2b00      	cmp	r3, #0
    c03c:	da05      	bge.n	c04a <__sfputc_r+0x18>
    c03e:	6994      	ldr	r4, [r2, #24]
    c040:	42a3      	cmp	r3, r4
    c042:	db08      	blt.n	c056 <__sfputc_r+0x24>
    c044:	b2cb      	uxtb	r3, r1
    c046:	2b0a      	cmp	r3, #10
    c048:	d005      	beq.n	c056 <__sfputc_r+0x24>
    c04a:	6813      	ldr	r3, [r2, #0]
    c04c:	1c58      	adds	r0, r3, #1
    c04e:	6010      	str	r0, [r2, #0]
    c050:	7019      	strb	r1, [r3, #0]
    c052:	b2c8      	uxtb	r0, r1
    c054:	e001      	b.n	c05a <__sfputc_r+0x28>
    c056:	f000 fc91 	bl	c97c <__swbuf_r>
    c05a:	bd10      	pop	{r4, pc}

0000c05c <__sfputs_r>:
    c05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c05e:	0006      	movs	r6, r0
    c060:	000f      	movs	r7, r1
    c062:	0014      	movs	r4, r2
    c064:	18d5      	adds	r5, r2, r3
    c066:	42ac      	cmp	r4, r5
    c068:	d008      	beq.n	c07c <__sfputs_r+0x20>
    c06a:	7821      	ldrb	r1, [r4, #0]
    c06c:	003a      	movs	r2, r7
    c06e:	0030      	movs	r0, r6
    c070:	f7ff ffdf 	bl	c032 <__sfputc_r>
    c074:	3401      	adds	r4, #1
    c076:	1c43      	adds	r3, r0, #1
    c078:	d1f5      	bne.n	c066 <__sfputs_r+0xa>
    c07a:	e000      	b.n	c07e <__sfputs_r+0x22>
    c07c:	2000      	movs	r0, #0
    c07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c080 <_vfiprintf_r>:
    c080:	b5f0      	push	{r4, r5, r6, r7, lr}
    c082:	b09f      	sub	sp, #124	; 0x7c
    c084:	0006      	movs	r6, r0
    c086:	000f      	movs	r7, r1
    c088:	9202      	str	r2, [sp, #8]
    c08a:	9305      	str	r3, [sp, #20]
    c08c:	2800      	cmp	r0, #0
    c08e:	d004      	beq.n	c09a <_vfiprintf_r+0x1a>
    c090:	6983      	ldr	r3, [r0, #24]
    c092:	2b00      	cmp	r3, #0
    c094:	d101      	bne.n	c09a <_vfiprintf_r+0x1a>
    c096:	f000 fe3b 	bl	cd10 <__sinit>
    c09a:	4b7f      	ldr	r3, [pc, #508]	; (c298 <_vfiprintf_r+0x218>)
    c09c:	429f      	cmp	r7, r3
    c09e:	d101      	bne.n	c0a4 <_vfiprintf_r+0x24>
    c0a0:	6877      	ldr	r7, [r6, #4]
    c0a2:	e008      	b.n	c0b6 <_vfiprintf_r+0x36>
    c0a4:	4b7d      	ldr	r3, [pc, #500]	; (c29c <_vfiprintf_r+0x21c>)
    c0a6:	429f      	cmp	r7, r3
    c0a8:	d101      	bne.n	c0ae <_vfiprintf_r+0x2e>
    c0aa:	68b7      	ldr	r7, [r6, #8]
    c0ac:	e003      	b.n	c0b6 <_vfiprintf_r+0x36>
    c0ae:	4b7c      	ldr	r3, [pc, #496]	; (c2a0 <_vfiprintf_r+0x220>)
    c0b0:	429f      	cmp	r7, r3
    c0b2:	d100      	bne.n	c0b6 <_vfiprintf_r+0x36>
    c0b4:	68f7      	ldr	r7, [r6, #12]
    c0b6:	89bb      	ldrh	r3, [r7, #12]
    c0b8:	071b      	lsls	r3, r3, #28
    c0ba:	d50a      	bpl.n	c0d2 <_vfiprintf_r+0x52>
    c0bc:	693b      	ldr	r3, [r7, #16]
    c0be:	2b00      	cmp	r3, #0
    c0c0:	d007      	beq.n	c0d2 <_vfiprintf_r+0x52>
    c0c2:	2300      	movs	r3, #0
    c0c4:	ad06      	add	r5, sp, #24
    c0c6:	616b      	str	r3, [r5, #20]
    c0c8:	3320      	adds	r3, #32
    c0ca:	766b      	strb	r3, [r5, #25]
    c0cc:	3310      	adds	r3, #16
    c0ce:	76ab      	strb	r3, [r5, #26]
    c0d0:	e03d      	b.n	c14e <_vfiprintf_r+0xce>
    c0d2:	0039      	movs	r1, r7
    c0d4:	0030      	movs	r0, r6
    c0d6:	f000 fca9 	bl	ca2c <__swsetup_r>
    c0da:	2800      	cmp	r0, #0
    c0dc:	d0f1      	beq.n	c0c2 <_vfiprintf_r+0x42>
    c0de:	2001      	movs	r0, #1
    c0e0:	4240      	negs	r0, r0
    c0e2:	e0d6      	b.n	c292 <_vfiprintf_r+0x212>
    c0e4:	9a05      	ldr	r2, [sp, #20]
    c0e6:	1d11      	adds	r1, r2, #4
    c0e8:	6812      	ldr	r2, [r2, #0]
    c0ea:	9105      	str	r1, [sp, #20]
    c0ec:	2a00      	cmp	r2, #0
    c0ee:	da00      	bge.n	c0f2 <_vfiprintf_r+0x72>
    c0f0:	e07f      	b.n	c1f2 <_vfiprintf_r+0x172>
    c0f2:	9209      	str	r2, [sp, #36]	; 0x24
    c0f4:	3401      	adds	r4, #1
    c0f6:	7823      	ldrb	r3, [r4, #0]
    c0f8:	2b2e      	cmp	r3, #46	; 0x2e
    c0fa:	d100      	bne.n	c0fe <_vfiprintf_r+0x7e>
    c0fc:	e08d      	b.n	c21a <_vfiprintf_r+0x19a>
    c0fe:	7821      	ldrb	r1, [r4, #0]
    c100:	2203      	movs	r2, #3
    c102:	4868      	ldr	r0, [pc, #416]	; (c2a4 <_vfiprintf_r+0x224>)
    c104:	f000 ff06 	bl	cf14 <memchr>
    c108:	2800      	cmp	r0, #0
    c10a:	d007      	beq.n	c11c <_vfiprintf_r+0x9c>
    c10c:	4b65      	ldr	r3, [pc, #404]	; (c2a4 <_vfiprintf_r+0x224>)
    c10e:	682a      	ldr	r2, [r5, #0]
    c110:	1ac0      	subs	r0, r0, r3
    c112:	2340      	movs	r3, #64	; 0x40
    c114:	4083      	lsls	r3, r0
    c116:	4313      	orrs	r3, r2
    c118:	602b      	str	r3, [r5, #0]
    c11a:	3401      	adds	r4, #1
    c11c:	7821      	ldrb	r1, [r4, #0]
    c11e:	1c63      	adds	r3, r4, #1
    c120:	2206      	movs	r2, #6
    c122:	4861      	ldr	r0, [pc, #388]	; (c2a8 <_vfiprintf_r+0x228>)
    c124:	9302      	str	r3, [sp, #8]
    c126:	7629      	strb	r1, [r5, #24]
    c128:	f000 fef4 	bl	cf14 <memchr>
    c12c:	2800      	cmp	r0, #0
    c12e:	d100      	bne.n	c132 <_vfiprintf_r+0xb2>
    c130:	e09d      	b.n	c26e <_vfiprintf_r+0x1ee>
    c132:	4b5e      	ldr	r3, [pc, #376]	; (c2ac <_vfiprintf_r+0x22c>)
    c134:	2b00      	cmp	r3, #0
    c136:	d000      	beq.n	c13a <_vfiprintf_r+0xba>
    c138:	e090      	b.n	c25c <_vfiprintf_r+0x1dc>
    c13a:	2207      	movs	r2, #7
    c13c:	9b05      	ldr	r3, [sp, #20]
    c13e:	3307      	adds	r3, #7
    c140:	4393      	bics	r3, r2
    c142:	3308      	adds	r3, #8
    c144:	9305      	str	r3, [sp, #20]
    c146:	696b      	ldr	r3, [r5, #20]
    c148:	9a03      	ldr	r2, [sp, #12]
    c14a:	189b      	adds	r3, r3, r2
    c14c:	616b      	str	r3, [r5, #20]
    c14e:	9c02      	ldr	r4, [sp, #8]
    c150:	7823      	ldrb	r3, [r4, #0]
    c152:	2b00      	cmp	r3, #0
    c154:	d104      	bne.n	c160 <_vfiprintf_r+0xe0>
    c156:	9b02      	ldr	r3, [sp, #8]
    c158:	1ae3      	subs	r3, r4, r3
    c15a:	9304      	str	r3, [sp, #16]
    c15c:	d012      	beq.n	c184 <_vfiprintf_r+0x104>
    c15e:	e003      	b.n	c168 <_vfiprintf_r+0xe8>
    c160:	2b25      	cmp	r3, #37	; 0x25
    c162:	d0f8      	beq.n	c156 <_vfiprintf_r+0xd6>
    c164:	3401      	adds	r4, #1
    c166:	e7f3      	b.n	c150 <_vfiprintf_r+0xd0>
    c168:	9b04      	ldr	r3, [sp, #16]
    c16a:	9a02      	ldr	r2, [sp, #8]
    c16c:	0039      	movs	r1, r7
    c16e:	0030      	movs	r0, r6
    c170:	f7ff ff74 	bl	c05c <__sfputs_r>
    c174:	1c43      	adds	r3, r0, #1
    c176:	d100      	bne.n	c17a <_vfiprintf_r+0xfa>
    c178:	e086      	b.n	c288 <_vfiprintf_r+0x208>
    c17a:	696a      	ldr	r2, [r5, #20]
    c17c:	9b04      	ldr	r3, [sp, #16]
    c17e:	4694      	mov	ip, r2
    c180:	4463      	add	r3, ip
    c182:	616b      	str	r3, [r5, #20]
    c184:	7823      	ldrb	r3, [r4, #0]
    c186:	2b00      	cmp	r3, #0
    c188:	d07e      	beq.n	c288 <_vfiprintf_r+0x208>
    c18a:	2201      	movs	r2, #1
    c18c:	2300      	movs	r3, #0
    c18e:	4252      	negs	r2, r2
    c190:	606a      	str	r2, [r5, #4]
    c192:	a902      	add	r1, sp, #8
    c194:	3254      	adds	r2, #84	; 0x54
    c196:	1852      	adds	r2, r2, r1
    c198:	3401      	adds	r4, #1
    c19a:	602b      	str	r3, [r5, #0]
    c19c:	60eb      	str	r3, [r5, #12]
    c19e:	60ab      	str	r3, [r5, #8]
    c1a0:	7013      	strb	r3, [r2, #0]
    c1a2:	65ab      	str	r3, [r5, #88]	; 0x58
    c1a4:	7821      	ldrb	r1, [r4, #0]
    c1a6:	2205      	movs	r2, #5
    c1a8:	4841      	ldr	r0, [pc, #260]	; (c2b0 <_vfiprintf_r+0x230>)
    c1aa:	f000 feb3 	bl	cf14 <memchr>
    c1ae:	2800      	cmp	r0, #0
    c1b0:	d008      	beq.n	c1c4 <_vfiprintf_r+0x144>
    c1b2:	4b3f      	ldr	r3, [pc, #252]	; (c2b0 <_vfiprintf_r+0x230>)
    c1b4:	682a      	ldr	r2, [r5, #0]
    c1b6:	1ac0      	subs	r0, r0, r3
    c1b8:	2301      	movs	r3, #1
    c1ba:	4083      	lsls	r3, r0
    c1bc:	4313      	orrs	r3, r2
    c1be:	602b      	str	r3, [r5, #0]
    c1c0:	3401      	adds	r4, #1
    c1c2:	e7ef      	b.n	c1a4 <_vfiprintf_r+0x124>
    c1c4:	682b      	ldr	r3, [r5, #0]
    c1c6:	06da      	lsls	r2, r3, #27
    c1c8:	d504      	bpl.n	c1d4 <_vfiprintf_r+0x154>
    c1ca:	2253      	movs	r2, #83	; 0x53
    c1cc:	2120      	movs	r1, #32
    c1ce:	a802      	add	r0, sp, #8
    c1d0:	1812      	adds	r2, r2, r0
    c1d2:	7011      	strb	r1, [r2, #0]
    c1d4:	071a      	lsls	r2, r3, #28
    c1d6:	d504      	bpl.n	c1e2 <_vfiprintf_r+0x162>
    c1d8:	2253      	movs	r2, #83	; 0x53
    c1da:	212b      	movs	r1, #43	; 0x2b
    c1dc:	a802      	add	r0, sp, #8
    c1de:	1812      	adds	r2, r2, r0
    c1e0:	7011      	strb	r1, [r2, #0]
    c1e2:	7822      	ldrb	r2, [r4, #0]
    c1e4:	2a2a      	cmp	r2, #42	; 0x2a
    c1e6:	d100      	bne.n	c1ea <_vfiprintf_r+0x16a>
    c1e8:	e77c      	b.n	c0e4 <_vfiprintf_r+0x64>
    c1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1ec:	2000      	movs	r0, #0
    c1ee:	210a      	movs	r1, #10
    c1f0:	e005      	b.n	c1fe <_vfiprintf_r+0x17e>
    c1f2:	4252      	negs	r2, r2
    c1f4:	60ea      	str	r2, [r5, #12]
    c1f6:	2202      	movs	r2, #2
    c1f8:	4313      	orrs	r3, r2
    c1fa:	602b      	str	r3, [r5, #0]
    c1fc:	e77a      	b.n	c0f4 <_vfiprintf_r+0x74>
    c1fe:	7822      	ldrb	r2, [r4, #0]
    c200:	3a30      	subs	r2, #48	; 0x30
    c202:	2a09      	cmp	r2, #9
    c204:	d804      	bhi.n	c210 <_vfiprintf_r+0x190>
    c206:	434b      	muls	r3, r1
    c208:	3401      	adds	r4, #1
    c20a:	189b      	adds	r3, r3, r2
    c20c:	2001      	movs	r0, #1
    c20e:	e7f6      	b.n	c1fe <_vfiprintf_r+0x17e>
    c210:	2800      	cmp	r0, #0
    c212:	d100      	bne.n	c216 <_vfiprintf_r+0x196>
    c214:	e76f      	b.n	c0f6 <_vfiprintf_r+0x76>
    c216:	9309      	str	r3, [sp, #36]	; 0x24
    c218:	e76d      	b.n	c0f6 <_vfiprintf_r+0x76>
    c21a:	7863      	ldrb	r3, [r4, #1]
    c21c:	2b2a      	cmp	r3, #42	; 0x2a
    c21e:	d10a      	bne.n	c236 <_vfiprintf_r+0x1b6>
    c220:	9b05      	ldr	r3, [sp, #20]
    c222:	3402      	adds	r4, #2
    c224:	1d1a      	adds	r2, r3, #4
    c226:	681b      	ldr	r3, [r3, #0]
    c228:	9205      	str	r2, [sp, #20]
    c22a:	2b00      	cmp	r3, #0
    c22c:	da01      	bge.n	c232 <_vfiprintf_r+0x1b2>
    c22e:	2301      	movs	r3, #1
    c230:	425b      	negs	r3, r3
    c232:	9307      	str	r3, [sp, #28]
    c234:	e763      	b.n	c0fe <_vfiprintf_r+0x7e>
    c236:	2300      	movs	r3, #0
    c238:	200a      	movs	r0, #10
    c23a:	001a      	movs	r2, r3
    c23c:	3401      	adds	r4, #1
    c23e:	606b      	str	r3, [r5, #4]
    c240:	7821      	ldrb	r1, [r4, #0]
    c242:	3930      	subs	r1, #48	; 0x30
    c244:	2909      	cmp	r1, #9
    c246:	d804      	bhi.n	c252 <_vfiprintf_r+0x1d2>
    c248:	4342      	muls	r2, r0
    c24a:	3401      	adds	r4, #1
    c24c:	1852      	adds	r2, r2, r1
    c24e:	2301      	movs	r3, #1
    c250:	e7f6      	b.n	c240 <_vfiprintf_r+0x1c0>
    c252:	2b00      	cmp	r3, #0
    c254:	d100      	bne.n	c258 <_vfiprintf_r+0x1d8>
    c256:	e752      	b.n	c0fe <_vfiprintf_r+0x7e>
    c258:	9207      	str	r2, [sp, #28]
    c25a:	e750      	b.n	c0fe <_vfiprintf_r+0x7e>
    c25c:	ab05      	add	r3, sp, #20
    c25e:	9300      	str	r3, [sp, #0]
    c260:	003a      	movs	r2, r7
    c262:	4b14      	ldr	r3, [pc, #80]	; (c2b4 <_vfiprintf_r+0x234>)
    c264:	0029      	movs	r1, r5
    c266:	0030      	movs	r0, r6
    c268:	e000      	b.n	c26c <_vfiprintf_r+0x1ec>
    c26a:	bf00      	nop
    c26c:	e007      	b.n	c27e <_vfiprintf_r+0x1fe>
    c26e:	ab05      	add	r3, sp, #20
    c270:	9300      	str	r3, [sp, #0]
    c272:	003a      	movs	r2, r7
    c274:	4b0f      	ldr	r3, [pc, #60]	; (c2b4 <_vfiprintf_r+0x234>)
    c276:	0029      	movs	r1, r5
    c278:	0030      	movs	r0, r6
    c27a:	f000 f88b 	bl	c394 <_printf_i>
    c27e:	9003      	str	r0, [sp, #12]
    c280:	9b03      	ldr	r3, [sp, #12]
    c282:	3301      	adds	r3, #1
    c284:	d000      	beq.n	c288 <_vfiprintf_r+0x208>
    c286:	e75e      	b.n	c146 <_vfiprintf_r+0xc6>
    c288:	89bb      	ldrh	r3, [r7, #12]
    c28a:	065b      	lsls	r3, r3, #25
    c28c:	d500      	bpl.n	c290 <_vfiprintf_r+0x210>
    c28e:	e726      	b.n	c0de <_vfiprintf_r+0x5e>
    c290:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c292:	b01f      	add	sp, #124	; 0x7c
    c294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c296:	46c0      	nop			; (mov r8, r8)
    c298:	0000eac8 	.word	0x0000eac8
    c29c:	0000eae8 	.word	0x0000eae8
    c2a0:	0000eb08 	.word	0x0000eb08
    c2a4:	0000ea9a 	.word	0x0000ea9a
    c2a8:	0000ea9e 	.word	0x0000ea9e
    c2ac:	00000000 	.word	0x00000000
    c2b0:	0000ea94 	.word	0x0000ea94
    c2b4:	0000c05d 	.word	0x0000c05d

0000c2b8 <_printf_common>:
    c2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c2ba:	0017      	movs	r7, r2
    c2bc:	9301      	str	r3, [sp, #4]
    c2be:	688a      	ldr	r2, [r1, #8]
    c2c0:	690b      	ldr	r3, [r1, #16]
    c2c2:	9000      	str	r0, [sp, #0]
    c2c4:	000c      	movs	r4, r1
    c2c6:	4293      	cmp	r3, r2
    c2c8:	da00      	bge.n	c2cc <_printf_common+0x14>
    c2ca:	0013      	movs	r3, r2
    c2cc:	0022      	movs	r2, r4
    c2ce:	603b      	str	r3, [r7, #0]
    c2d0:	3243      	adds	r2, #67	; 0x43
    c2d2:	7812      	ldrb	r2, [r2, #0]
    c2d4:	2a00      	cmp	r2, #0
    c2d6:	d001      	beq.n	c2dc <_printf_common+0x24>
    c2d8:	3301      	adds	r3, #1
    c2da:	603b      	str	r3, [r7, #0]
    c2dc:	6823      	ldr	r3, [r4, #0]
    c2de:	069b      	lsls	r3, r3, #26
    c2e0:	d502      	bpl.n	c2e8 <_printf_common+0x30>
    c2e2:	683b      	ldr	r3, [r7, #0]
    c2e4:	3302      	adds	r3, #2
    c2e6:	603b      	str	r3, [r7, #0]
    c2e8:	2506      	movs	r5, #6
    c2ea:	6823      	ldr	r3, [r4, #0]
    c2ec:	401d      	ands	r5, r3
    c2ee:	d01e      	beq.n	c32e <_printf_common+0x76>
    c2f0:	0023      	movs	r3, r4
    c2f2:	3343      	adds	r3, #67	; 0x43
    c2f4:	781b      	ldrb	r3, [r3, #0]
    c2f6:	1e5a      	subs	r2, r3, #1
    c2f8:	4193      	sbcs	r3, r2
    c2fa:	6822      	ldr	r2, [r4, #0]
    c2fc:	0692      	lsls	r2, r2, #26
    c2fe:	d51c      	bpl.n	c33a <_printf_common+0x82>
    c300:	2030      	movs	r0, #48	; 0x30
    c302:	18e1      	adds	r1, r4, r3
    c304:	3143      	adds	r1, #67	; 0x43
    c306:	7008      	strb	r0, [r1, #0]
    c308:	0021      	movs	r1, r4
    c30a:	1c5a      	adds	r2, r3, #1
    c30c:	3145      	adds	r1, #69	; 0x45
    c30e:	7809      	ldrb	r1, [r1, #0]
    c310:	18a2      	adds	r2, r4, r2
    c312:	3243      	adds	r2, #67	; 0x43
    c314:	3302      	adds	r3, #2
    c316:	7011      	strb	r1, [r2, #0]
    c318:	e00f      	b.n	c33a <_printf_common+0x82>
    c31a:	0022      	movs	r2, r4
    c31c:	2301      	movs	r3, #1
    c31e:	3219      	adds	r2, #25
    c320:	9901      	ldr	r1, [sp, #4]
    c322:	9800      	ldr	r0, [sp, #0]
    c324:	9e08      	ldr	r6, [sp, #32]
    c326:	47b0      	blx	r6
    c328:	1c43      	adds	r3, r0, #1
    c32a:	d00e      	beq.n	c34a <_printf_common+0x92>
    c32c:	3501      	adds	r5, #1
    c32e:	68e3      	ldr	r3, [r4, #12]
    c330:	683a      	ldr	r2, [r7, #0]
    c332:	1a9b      	subs	r3, r3, r2
    c334:	429d      	cmp	r5, r3
    c336:	dbf0      	blt.n	c31a <_printf_common+0x62>
    c338:	e7da      	b.n	c2f0 <_printf_common+0x38>
    c33a:	0022      	movs	r2, r4
    c33c:	9901      	ldr	r1, [sp, #4]
    c33e:	3243      	adds	r2, #67	; 0x43
    c340:	9800      	ldr	r0, [sp, #0]
    c342:	9d08      	ldr	r5, [sp, #32]
    c344:	47a8      	blx	r5
    c346:	1c43      	adds	r3, r0, #1
    c348:	d102      	bne.n	c350 <_printf_common+0x98>
    c34a:	2001      	movs	r0, #1
    c34c:	4240      	negs	r0, r0
    c34e:	e020      	b.n	c392 <_printf_common+0xda>
    c350:	2306      	movs	r3, #6
    c352:	6820      	ldr	r0, [r4, #0]
    c354:	68e1      	ldr	r1, [r4, #12]
    c356:	683a      	ldr	r2, [r7, #0]
    c358:	4003      	ands	r3, r0
    c35a:	2500      	movs	r5, #0
    c35c:	2b04      	cmp	r3, #4
    c35e:	d103      	bne.n	c368 <_printf_common+0xb0>
    c360:	1a8d      	subs	r5, r1, r2
    c362:	43eb      	mvns	r3, r5
    c364:	17db      	asrs	r3, r3, #31
    c366:	401d      	ands	r5, r3
    c368:	68a3      	ldr	r3, [r4, #8]
    c36a:	6922      	ldr	r2, [r4, #16]
    c36c:	4293      	cmp	r3, r2
    c36e:	dd01      	ble.n	c374 <_printf_common+0xbc>
    c370:	1a9b      	subs	r3, r3, r2
    c372:	18ed      	adds	r5, r5, r3
    c374:	2700      	movs	r7, #0
    c376:	42bd      	cmp	r5, r7
    c378:	d00a      	beq.n	c390 <_printf_common+0xd8>
    c37a:	0022      	movs	r2, r4
    c37c:	2301      	movs	r3, #1
    c37e:	321a      	adds	r2, #26
    c380:	9901      	ldr	r1, [sp, #4]
    c382:	9800      	ldr	r0, [sp, #0]
    c384:	9e08      	ldr	r6, [sp, #32]
    c386:	47b0      	blx	r6
    c388:	1c43      	adds	r3, r0, #1
    c38a:	d0de      	beq.n	c34a <_printf_common+0x92>
    c38c:	3701      	adds	r7, #1
    c38e:	e7f2      	b.n	c376 <_printf_common+0xbe>
    c390:	2000      	movs	r0, #0
    c392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000c394 <_printf_i>:
    c394:	b5f0      	push	{r4, r5, r6, r7, lr}
    c396:	b08b      	sub	sp, #44	; 0x2c
    c398:	9206      	str	r2, [sp, #24]
    c39a:	000a      	movs	r2, r1
    c39c:	3243      	adds	r2, #67	; 0x43
    c39e:	9307      	str	r3, [sp, #28]
    c3a0:	9005      	str	r0, [sp, #20]
    c3a2:	9204      	str	r2, [sp, #16]
    c3a4:	7e0a      	ldrb	r2, [r1, #24]
    c3a6:	000c      	movs	r4, r1
    c3a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3aa:	2a6e      	cmp	r2, #110	; 0x6e
    c3ac:	d100      	bne.n	c3b0 <_printf_i+0x1c>
    c3ae:	e0ab      	b.n	c508 <_printf_i+0x174>
    c3b0:	d811      	bhi.n	c3d6 <_printf_i+0x42>
    c3b2:	2a63      	cmp	r2, #99	; 0x63
    c3b4:	d022      	beq.n	c3fc <_printf_i+0x68>
    c3b6:	d809      	bhi.n	c3cc <_printf_i+0x38>
    c3b8:	2a00      	cmp	r2, #0
    c3ba:	d100      	bne.n	c3be <_printf_i+0x2a>
    c3bc:	e0b5      	b.n	c52a <_printf_i+0x196>
    c3be:	2a58      	cmp	r2, #88	; 0x58
    c3c0:	d000      	beq.n	c3c4 <_printf_i+0x30>
    c3c2:	e0c5      	b.n	c550 <_printf_i+0x1bc>
    c3c4:	3145      	adds	r1, #69	; 0x45
    c3c6:	700a      	strb	r2, [r1, #0]
    c3c8:	4a81      	ldr	r2, [pc, #516]	; (c5d0 <_printf_i+0x23c>)
    c3ca:	e04f      	b.n	c46c <_printf_i+0xd8>
    c3cc:	2a64      	cmp	r2, #100	; 0x64
    c3ce:	d01d      	beq.n	c40c <_printf_i+0x78>
    c3d0:	2a69      	cmp	r2, #105	; 0x69
    c3d2:	d01b      	beq.n	c40c <_printf_i+0x78>
    c3d4:	e0bc      	b.n	c550 <_printf_i+0x1bc>
    c3d6:	2a73      	cmp	r2, #115	; 0x73
    c3d8:	d100      	bne.n	c3dc <_printf_i+0x48>
    c3da:	e0aa      	b.n	c532 <_printf_i+0x19e>
    c3dc:	d809      	bhi.n	c3f2 <_printf_i+0x5e>
    c3de:	2a6f      	cmp	r2, #111	; 0x6f
    c3e0:	d029      	beq.n	c436 <_printf_i+0xa2>
    c3e2:	2a70      	cmp	r2, #112	; 0x70
    c3e4:	d000      	beq.n	c3e8 <_printf_i+0x54>
    c3e6:	e0b3      	b.n	c550 <_printf_i+0x1bc>
    c3e8:	2220      	movs	r2, #32
    c3ea:	6809      	ldr	r1, [r1, #0]
    c3ec:	430a      	orrs	r2, r1
    c3ee:	6022      	str	r2, [r4, #0]
    c3f0:	e037      	b.n	c462 <_printf_i+0xce>
    c3f2:	2a75      	cmp	r2, #117	; 0x75
    c3f4:	d01f      	beq.n	c436 <_printf_i+0xa2>
    c3f6:	2a78      	cmp	r2, #120	; 0x78
    c3f8:	d033      	beq.n	c462 <_printf_i+0xce>
    c3fa:	e0a9      	b.n	c550 <_printf_i+0x1bc>
    c3fc:	000e      	movs	r6, r1
    c3fe:	681a      	ldr	r2, [r3, #0]
    c400:	3642      	adds	r6, #66	; 0x42
    c402:	1d11      	adds	r1, r2, #4
    c404:	6019      	str	r1, [r3, #0]
    c406:	6813      	ldr	r3, [r2, #0]
    c408:	7033      	strb	r3, [r6, #0]
    c40a:	e0a4      	b.n	c556 <_printf_i+0x1c2>
    c40c:	6821      	ldr	r1, [r4, #0]
    c40e:	681a      	ldr	r2, [r3, #0]
    c410:	0608      	lsls	r0, r1, #24
    c412:	d406      	bmi.n	c422 <_printf_i+0x8e>
    c414:	0649      	lsls	r1, r1, #25
    c416:	d504      	bpl.n	c422 <_printf_i+0x8e>
    c418:	1d11      	adds	r1, r2, #4
    c41a:	6019      	str	r1, [r3, #0]
    c41c:	2300      	movs	r3, #0
    c41e:	5ed5      	ldrsh	r5, [r2, r3]
    c420:	e002      	b.n	c428 <_printf_i+0x94>
    c422:	1d11      	adds	r1, r2, #4
    c424:	6019      	str	r1, [r3, #0]
    c426:	6815      	ldr	r5, [r2, #0]
    c428:	2d00      	cmp	r5, #0
    c42a:	da3b      	bge.n	c4a4 <_printf_i+0x110>
    c42c:	232d      	movs	r3, #45	; 0x2d
    c42e:	9a04      	ldr	r2, [sp, #16]
    c430:	426d      	negs	r5, r5
    c432:	7013      	strb	r3, [r2, #0]
    c434:	e036      	b.n	c4a4 <_printf_i+0x110>
    c436:	6821      	ldr	r1, [r4, #0]
    c438:	681a      	ldr	r2, [r3, #0]
    c43a:	0608      	lsls	r0, r1, #24
    c43c:	d406      	bmi.n	c44c <_printf_i+0xb8>
    c43e:	0649      	lsls	r1, r1, #25
    c440:	d504      	bpl.n	c44c <_printf_i+0xb8>
    c442:	6815      	ldr	r5, [r2, #0]
    c444:	1d11      	adds	r1, r2, #4
    c446:	6019      	str	r1, [r3, #0]
    c448:	b2ad      	uxth	r5, r5
    c44a:	e002      	b.n	c452 <_printf_i+0xbe>
    c44c:	1d11      	adds	r1, r2, #4
    c44e:	6019      	str	r1, [r3, #0]
    c450:	6815      	ldr	r5, [r2, #0]
    c452:	4b5f      	ldr	r3, [pc, #380]	; (c5d0 <_printf_i+0x23c>)
    c454:	7e22      	ldrb	r2, [r4, #24]
    c456:	9303      	str	r3, [sp, #12]
    c458:	2708      	movs	r7, #8
    c45a:	2a6f      	cmp	r2, #111	; 0x6f
    c45c:	d01d      	beq.n	c49a <_printf_i+0x106>
    c45e:	270a      	movs	r7, #10
    c460:	e01b      	b.n	c49a <_printf_i+0x106>
    c462:	0022      	movs	r2, r4
    c464:	2178      	movs	r1, #120	; 0x78
    c466:	3245      	adds	r2, #69	; 0x45
    c468:	7011      	strb	r1, [r2, #0]
    c46a:	4a5a      	ldr	r2, [pc, #360]	; (c5d4 <_printf_i+0x240>)
    c46c:	6819      	ldr	r1, [r3, #0]
    c46e:	9203      	str	r2, [sp, #12]
    c470:	1d08      	adds	r0, r1, #4
    c472:	6822      	ldr	r2, [r4, #0]
    c474:	6018      	str	r0, [r3, #0]
    c476:	680d      	ldr	r5, [r1, #0]
    c478:	0610      	lsls	r0, r2, #24
    c47a:	d402      	bmi.n	c482 <_printf_i+0xee>
    c47c:	0650      	lsls	r0, r2, #25
    c47e:	d500      	bpl.n	c482 <_printf_i+0xee>
    c480:	b2ad      	uxth	r5, r5
    c482:	07d3      	lsls	r3, r2, #31
    c484:	d502      	bpl.n	c48c <_printf_i+0xf8>
    c486:	2320      	movs	r3, #32
    c488:	431a      	orrs	r2, r3
    c48a:	6022      	str	r2, [r4, #0]
    c48c:	2710      	movs	r7, #16
    c48e:	2d00      	cmp	r5, #0
    c490:	d103      	bne.n	c49a <_printf_i+0x106>
    c492:	2320      	movs	r3, #32
    c494:	6822      	ldr	r2, [r4, #0]
    c496:	439a      	bics	r2, r3
    c498:	6022      	str	r2, [r4, #0]
    c49a:	0023      	movs	r3, r4
    c49c:	2200      	movs	r2, #0
    c49e:	3343      	adds	r3, #67	; 0x43
    c4a0:	701a      	strb	r2, [r3, #0]
    c4a2:	e002      	b.n	c4aa <_printf_i+0x116>
    c4a4:	270a      	movs	r7, #10
    c4a6:	4b4a      	ldr	r3, [pc, #296]	; (c5d0 <_printf_i+0x23c>)
    c4a8:	9303      	str	r3, [sp, #12]
    c4aa:	6863      	ldr	r3, [r4, #4]
    c4ac:	60a3      	str	r3, [r4, #8]
    c4ae:	2b00      	cmp	r3, #0
    c4b0:	db09      	blt.n	c4c6 <_printf_i+0x132>
    c4b2:	2204      	movs	r2, #4
    c4b4:	6821      	ldr	r1, [r4, #0]
    c4b6:	4391      	bics	r1, r2
    c4b8:	6021      	str	r1, [r4, #0]
    c4ba:	2d00      	cmp	r5, #0
    c4bc:	d105      	bne.n	c4ca <_printf_i+0x136>
    c4be:	9e04      	ldr	r6, [sp, #16]
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	d011      	beq.n	c4e8 <_printf_i+0x154>
    c4c4:	e07b      	b.n	c5be <_printf_i+0x22a>
    c4c6:	2d00      	cmp	r5, #0
    c4c8:	d079      	beq.n	c5be <_printf_i+0x22a>
    c4ca:	9e04      	ldr	r6, [sp, #16]
    c4cc:	0028      	movs	r0, r5
    c4ce:	0039      	movs	r1, r7
    c4d0:	f7ff f95e 	bl	b790 <__aeabi_uidivmod>
    c4d4:	9b03      	ldr	r3, [sp, #12]
    c4d6:	3e01      	subs	r6, #1
    c4d8:	5c5b      	ldrb	r3, [r3, r1]
    c4da:	0028      	movs	r0, r5
    c4dc:	7033      	strb	r3, [r6, #0]
    c4de:	0039      	movs	r1, r7
    c4e0:	f7ff f8d0 	bl	b684 <__aeabi_uidiv>
    c4e4:	1e05      	subs	r5, r0, #0
    c4e6:	d1f1      	bne.n	c4cc <_printf_i+0x138>
    c4e8:	2f08      	cmp	r7, #8
    c4ea:	d109      	bne.n	c500 <_printf_i+0x16c>
    c4ec:	6823      	ldr	r3, [r4, #0]
    c4ee:	07db      	lsls	r3, r3, #31
    c4f0:	d506      	bpl.n	c500 <_printf_i+0x16c>
    c4f2:	6863      	ldr	r3, [r4, #4]
    c4f4:	6922      	ldr	r2, [r4, #16]
    c4f6:	4293      	cmp	r3, r2
    c4f8:	dc02      	bgt.n	c500 <_printf_i+0x16c>
    c4fa:	2330      	movs	r3, #48	; 0x30
    c4fc:	3e01      	subs	r6, #1
    c4fe:	7033      	strb	r3, [r6, #0]
    c500:	9b04      	ldr	r3, [sp, #16]
    c502:	1b9b      	subs	r3, r3, r6
    c504:	6123      	str	r3, [r4, #16]
    c506:	e02b      	b.n	c560 <_printf_i+0x1cc>
    c508:	6809      	ldr	r1, [r1, #0]
    c50a:	681a      	ldr	r2, [r3, #0]
    c50c:	0608      	lsls	r0, r1, #24
    c50e:	d407      	bmi.n	c520 <_printf_i+0x18c>
    c510:	0649      	lsls	r1, r1, #25
    c512:	d505      	bpl.n	c520 <_printf_i+0x18c>
    c514:	1d11      	adds	r1, r2, #4
    c516:	6019      	str	r1, [r3, #0]
    c518:	6813      	ldr	r3, [r2, #0]
    c51a:	8aa2      	ldrh	r2, [r4, #20]
    c51c:	801a      	strh	r2, [r3, #0]
    c51e:	e004      	b.n	c52a <_printf_i+0x196>
    c520:	1d11      	adds	r1, r2, #4
    c522:	6019      	str	r1, [r3, #0]
    c524:	6813      	ldr	r3, [r2, #0]
    c526:	6962      	ldr	r2, [r4, #20]
    c528:	601a      	str	r2, [r3, #0]
    c52a:	2300      	movs	r3, #0
    c52c:	9e04      	ldr	r6, [sp, #16]
    c52e:	6123      	str	r3, [r4, #16]
    c530:	e016      	b.n	c560 <_printf_i+0x1cc>
    c532:	681a      	ldr	r2, [r3, #0]
    c534:	1d11      	adds	r1, r2, #4
    c536:	6019      	str	r1, [r3, #0]
    c538:	6816      	ldr	r6, [r2, #0]
    c53a:	2100      	movs	r1, #0
    c53c:	6862      	ldr	r2, [r4, #4]
    c53e:	0030      	movs	r0, r6
    c540:	f000 fce8 	bl	cf14 <memchr>
    c544:	2800      	cmp	r0, #0
    c546:	d001      	beq.n	c54c <_printf_i+0x1b8>
    c548:	1b80      	subs	r0, r0, r6
    c54a:	6060      	str	r0, [r4, #4]
    c54c:	6863      	ldr	r3, [r4, #4]
    c54e:	e003      	b.n	c558 <_printf_i+0x1c4>
    c550:	0026      	movs	r6, r4
    c552:	3642      	adds	r6, #66	; 0x42
    c554:	7032      	strb	r2, [r6, #0]
    c556:	2301      	movs	r3, #1
    c558:	6123      	str	r3, [r4, #16]
    c55a:	2300      	movs	r3, #0
    c55c:	9a04      	ldr	r2, [sp, #16]
    c55e:	7013      	strb	r3, [r2, #0]
    c560:	9b07      	ldr	r3, [sp, #28]
    c562:	aa09      	add	r2, sp, #36	; 0x24
    c564:	9300      	str	r3, [sp, #0]
    c566:	0021      	movs	r1, r4
    c568:	9b06      	ldr	r3, [sp, #24]
    c56a:	9805      	ldr	r0, [sp, #20]
    c56c:	f7ff fea4 	bl	c2b8 <_printf_common>
    c570:	1c43      	adds	r3, r0, #1
    c572:	d102      	bne.n	c57a <_printf_i+0x1e6>
    c574:	2001      	movs	r0, #1
    c576:	4240      	negs	r0, r0
    c578:	e027      	b.n	c5ca <_printf_i+0x236>
    c57a:	6923      	ldr	r3, [r4, #16]
    c57c:	0032      	movs	r2, r6
    c57e:	9906      	ldr	r1, [sp, #24]
    c580:	9805      	ldr	r0, [sp, #20]
    c582:	9d07      	ldr	r5, [sp, #28]
    c584:	47a8      	blx	r5
    c586:	1c43      	adds	r3, r0, #1
    c588:	d0f4      	beq.n	c574 <_printf_i+0x1e0>
    c58a:	6823      	ldr	r3, [r4, #0]
    c58c:	2500      	movs	r5, #0
    c58e:	079b      	lsls	r3, r3, #30
    c590:	d40f      	bmi.n	c5b2 <_printf_i+0x21e>
    c592:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c594:	68e0      	ldr	r0, [r4, #12]
    c596:	4298      	cmp	r0, r3
    c598:	da17      	bge.n	c5ca <_printf_i+0x236>
    c59a:	0018      	movs	r0, r3
    c59c:	e015      	b.n	c5ca <_printf_i+0x236>
    c59e:	0022      	movs	r2, r4
    c5a0:	2301      	movs	r3, #1
    c5a2:	3219      	adds	r2, #25
    c5a4:	9906      	ldr	r1, [sp, #24]
    c5a6:	9805      	ldr	r0, [sp, #20]
    c5a8:	9e07      	ldr	r6, [sp, #28]
    c5aa:	47b0      	blx	r6
    c5ac:	1c43      	adds	r3, r0, #1
    c5ae:	d0e1      	beq.n	c574 <_printf_i+0x1e0>
    c5b0:	3501      	adds	r5, #1
    c5b2:	68e3      	ldr	r3, [r4, #12]
    c5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c5b6:	1a9b      	subs	r3, r3, r2
    c5b8:	429d      	cmp	r5, r3
    c5ba:	dbf0      	blt.n	c59e <_printf_i+0x20a>
    c5bc:	e7e9      	b.n	c592 <_printf_i+0x1fe>
    c5be:	0026      	movs	r6, r4
    c5c0:	9b03      	ldr	r3, [sp, #12]
    c5c2:	3642      	adds	r6, #66	; 0x42
    c5c4:	781b      	ldrb	r3, [r3, #0]
    c5c6:	7033      	strb	r3, [r6, #0]
    c5c8:	e78e      	b.n	c4e8 <_printf_i+0x154>
    c5ca:	b00b      	add	sp, #44	; 0x2c
    c5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c5ce:	46c0      	nop			; (mov r8, r8)
    c5d0:	0000eaa5 	.word	0x0000eaa5
    c5d4:	0000eab6 	.word	0x0000eab6

0000c5d8 <iprintf>:
    c5d8:	b40f      	push	{r0, r1, r2, r3}
    c5da:	4b0b      	ldr	r3, [pc, #44]	; (c608 <iprintf+0x30>)
    c5dc:	b513      	push	{r0, r1, r4, lr}
    c5de:	681c      	ldr	r4, [r3, #0]
    c5e0:	2c00      	cmp	r4, #0
    c5e2:	d005      	beq.n	c5f0 <iprintf+0x18>
    c5e4:	69a3      	ldr	r3, [r4, #24]
    c5e6:	2b00      	cmp	r3, #0
    c5e8:	d102      	bne.n	c5f0 <iprintf+0x18>
    c5ea:	0020      	movs	r0, r4
    c5ec:	f000 fb90 	bl	cd10 <__sinit>
    c5f0:	ab05      	add	r3, sp, #20
    c5f2:	9a04      	ldr	r2, [sp, #16]
    c5f4:	68a1      	ldr	r1, [r4, #8]
    c5f6:	0020      	movs	r0, r4
    c5f8:	9301      	str	r3, [sp, #4]
    c5fa:	f7ff fd41 	bl	c080 <_vfiprintf_r>
    c5fe:	bc16      	pop	{r1, r2, r4}
    c600:	bc08      	pop	{r3}
    c602:	b004      	add	sp, #16
    c604:	4718      	bx	r3
    c606:	46c0      	nop			; (mov r8, r8)
    c608:	20000090 	.word	0x20000090

0000c60c <putchar>:
    c60c:	4b08      	ldr	r3, [pc, #32]	; (c630 <putchar+0x24>)
    c60e:	b570      	push	{r4, r5, r6, lr}
    c610:	681c      	ldr	r4, [r3, #0]
    c612:	0005      	movs	r5, r0
    c614:	2c00      	cmp	r4, #0
    c616:	d005      	beq.n	c624 <putchar+0x18>
    c618:	69a3      	ldr	r3, [r4, #24]
    c61a:	2b00      	cmp	r3, #0
    c61c:	d102      	bne.n	c624 <putchar+0x18>
    c61e:	0020      	movs	r0, r4
    c620:	f000 fb76 	bl	cd10 <__sinit>
    c624:	0029      	movs	r1, r5
    c626:	68a2      	ldr	r2, [r4, #8]
    c628:	0020      	movs	r0, r4
    c62a:	f000 feb5 	bl	d398 <_putc_r>
    c62e:	bd70      	pop	{r4, r5, r6, pc}
    c630:	20000090 	.word	0x20000090

0000c634 <_puts_r>:
    c634:	b570      	push	{r4, r5, r6, lr}
    c636:	0005      	movs	r5, r0
    c638:	000e      	movs	r6, r1
    c63a:	2800      	cmp	r0, #0
    c63c:	d004      	beq.n	c648 <_puts_r+0x14>
    c63e:	6983      	ldr	r3, [r0, #24]
    c640:	2b00      	cmp	r3, #0
    c642:	d101      	bne.n	c648 <_puts_r+0x14>
    c644:	f000 fb64 	bl	cd10 <__sinit>
    c648:	69ab      	ldr	r3, [r5, #24]
    c64a:	68ac      	ldr	r4, [r5, #8]
    c64c:	2b00      	cmp	r3, #0
    c64e:	d102      	bne.n	c656 <_puts_r+0x22>
    c650:	0028      	movs	r0, r5
    c652:	f000 fb5d 	bl	cd10 <__sinit>
    c656:	4b25      	ldr	r3, [pc, #148]	; (c6ec <_puts_r+0xb8>)
    c658:	429c      	cmp	r4, r3
    c65a:	d101      	bne.n	c660 <_puts_r+0x2c>
    c65c:	686c      	ldr	r4, [r5, #4]
    c65e:	e008      	b.n	c672 <_puts_r+0x3e>
    c660:	4b23      	ldr	r3, [pc, #140]	; (c6f0 <_puts_r+0xbc>)
    c662:	429c      	cmp	r4, r3
    c664:	d101      	bne.n	c66a <_puts_r+0x36>
    c666:	68ac      	ldr	r4, [r5, #8]
    c668:	e003      	b.n	c672 <_puts_r+0x3e>
    c66a:	4b22      	ldr	r3, [pc, #136]	; (c6f4 <_puts_r+0xc0>)
    c66c:	429c      	cmp	r4, r3
    c66e:	d100      	bne.n	c672 <_puts_r+0x3e>
    c670:	68ec      	ldr	r4, [r5, #12]
    c672:	89a3      	ldrh	r3, [r4, #12]
    c674:	071b      	lsls	r3, r3, #28
    c676:	d502      	bpl.n	c67e <_puts_r+0x4a>
    c678:	6923      	ldr	r3, [r4, #16]
    c67a:	2b00      	cmp	r3, #0
    c67c:	d111      	bne.n	c6a2 <_puts_r+0x6e>
    c67e:	0021      	movs	r1, r4
    c680:	0028      	movs	r0, r5
    c682:	f000 f9d3 	bl	ca2c <__swsetup_r>
    c686:	2800      	cmp	r0, #0
    c688:	d00b      	beq.n	c6a2 <_puts_r+0x6e>
    c68a:	2001      	movs	r0, #1
    c68c:	4240      	negs	r0, r0
    c68e:	e02b      	b.n	c6e8 <_puts_r+0xb4>
    c690:	3b01      	subs	r3, #1
    c692:	3601      	adds	r6, #1
    c694:	60a3      	str	r3, [r4, #8]
    c696:	2b00      	cmp	r3, #0
    c698:	db08      	blt.n	c6ac <_puts_r+0x78>
    c69a:	6823      	ldr	r3, [r4, #0]
    c69c:	1c5a      	adds	r2, r3, #1
    c69e:	6022      	str	r2, [r4, #0]
    c6a0:	7019      	strb	r1, [r3, #0]
    c6a2:	7831      	ldrb	r1, [r6, #0]
    c6a4:	68a3      	ldr	r3, [r4, #8]
    c6a6:	2900      	cmp	r1, #0
    c6a8:	d1f2      	bne.n	c690 <_puts_r+0x5c>
    c6aa:	e00b      	b.n	c6c4 <_puts_r+0x90>
    c6ac:	69a2      	ldr	r2, [r4, #24]
    c6ae:	4293      	cmp	r3, r2
    c6b0:	db01      	blt.n	c6b6 <_puts_r+0x82>
    c6b2:	290a      	cmp	r1, #10
    c6b4:	d1f1      	bne.n	c69a <_puts_r+0x66>
    c6b6:	0022      	movs	r2, r4
    c6b8:	0028      	movs	r0, r5
    c6ba:	f000 f95f 	bl	c97c <__swbuf_r>
    c6be:	1c43      	adds	r3, r0, #1
    c6c0:	d1ef      	bne.n	c6a2 <_puts_r+0x6e>
    c6c2:	e7e2      	b.n	c68a <_puts_r+0x56>
    c6c4:	3b01      	subs	r3, #1
    c6c6:	60a3      	str	r3, [r4, #8]
    c6c8:	2b00      	cmp	r3, #0
    c6ca:	da08      	bge.n	c6de <_puts_r+0xaa>
    c6cc:	0022      	movs	r2, r4
    c6ce:	310a      	adds	r1, #10
    c6d0:	0028      	movs	r0, r5
    c6d2:	f000 f953 	bl	c97c <__swbuf_r>
    c6d6:	1c43      	adds	r3, r0, #1
    c6d8:	d0d7      	beq.n	c68a <_puts_r+0x56>
    c6da:	200a      	movs	r0, #10
    c6dc:	e004      	b.n	c6e8 <_puts_r+0xb4>
    c6de:	200a      	movs	r0, #10
    c6e0:	6823      	ldr	r3, [r4, #0]
    c6e2:	1c5a      	adds	r2, r3, #1
    c6e4:	6022      	str	r2, [r4, #0]
    c6e6:	7018      	strb	r0, [r3, #0]
    c6e8:	bd70      	pop	{r4, r5, r6, pc}
    c6ea:	46c0      	nop			; (mov r8, r8)
    c6ec:	0000eac8 	.word	0x0000eac8
    c6f0:	0000eae8 	.word	0x0000eae8
    c6f4:	0000eb08 	.word	0x0000eb08

0000c6f8 <puts>:
    c6f8:	b510      	push	{r4, lr}
    c6fa:	4b03      	ldr	r3, [pc, #12]	; (c708 <puts+0x10>)
    c6fc:	0001      	movs	r1, r0
    c6fe:	6818      	ldr	r0, [r3, #0]
    c700:	f7ff ff98 	bl	c634 <_puts_r>
    c704:	bd10      	pop	{r4, pc}
    c706:	46c0      	nop			; (mov r8, r8)
    c708:	20000090 	.word	0x20000090

0000c70c <setbuf>:
    c70c:	424a      	negs	r2, r1
    c70e:	414a      	adcs	r2, r1
    c710:	2380      	movs	r3, #128	; 0x80
    c712:	b510      	push	{r4, lr}
    c714:	0052      	lsls	r2, r2, #1
    c716:	00db      	lsls	r3, r3, #3
    c718:	f000 f802 	bl	c720 <setvbuf>
    c71c:	bd10      	pop	{r4, pc}
	...

0000c720 <setvbuf>:
    c720:	b5f0      	push	{r4, r5, r6, r7, lr}
    c722:	001d      	movs	r5, r3
    c724:	4b51      	ldr	r3, [pc, #324]	; (c86c <setvbuf+0x14c>)
    c726:	b085      	sub	sp, #20
    c728:	681e      	ldr	r6, [r3, #0]
    c72a:	0004      	movs	r4, r0
    c72c:	000f      	movs	r7, r1
    c72e:	9200      	str	r2, [sp, #0]
    c730:	2e00      	cmp	r6, #0
    c732:	d005      	beq.n	c740 <setvbuf+0x20>
    c734:	69b3      	ldr	r3, [r6, #24]
    c736:	2b00      	cmp	r3, #0
    c738:	d102      	bne.n	c740 <setvbuf+0x20>
    c73a:	0030      	movs	r0, r6
    c73c:	f000 fae8 	bl	cd10 <__sinit>
    c740:	4b4b      	ldr	r3, [pc, #300]	; (c870 <setvbuf+0x150>)
    c742:	429c      	cmp	r4, r3
    c744:	d101      	bne.n	c74a <setvbuf+0x2a>
    c746:	6874      	ldr	r4, [r6, #4]
    c748:	e008      	b.n	c75c <setvbuf+0x3c>
    c74a:	4b4a      	ldr	r3, [pc, #296]	; (c874 <setvbuf+0x154>)
    c74c:	429c      	cmp	r4, r3
    c74e:	d101      	bne.n	c754 <setvbuf+0x34>
    c750:	68b4      	ldr	r4, [r6, #8]
    c752:	e003      	b.n	c75c <setvbuf+0x3c>
    c754:	4b48      	ldr	r3, [pc, #288]	; (c878 <setvbuf+0x158>)
    c756:	429c      	cmp	r4, r3
    c758:	d100      	bne.n	c75c <setvbuf+0x3c>
    c75a:	68f4      	ldr	r4, [r6, #12]
    c75c:	9b00      	ldr	r3, [sp, #0]
    c75e:	2b02      	cmp	r3, #2
    c760:	d005      	beq.n	c76e <setvbuf+0x4e>
    c762:	2b01      	cmp	r3, #1
    c764:	d900      	bls.n	c768 <setvbuf+0x48>
    c766:	e07c      	b.n	c862 <setvbuf+0x142>
    c768:	2d00      	cmp	r5, #0
    c76a:	da00      	bge.n	c76e <setvbuf+0x4e>
    c76c:	e079      	b.n	c862 <setvbuf+0x142>
    c76e:	0021      	movs	r1, r4
    c770:	0030      	movs	r0, r6
    c772:	f000 fa5f 	bl	cc34 <_fflush_r>
    c776:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c778:	2900      	cmp	r1, #0
    c77a:	d008      	beq.n	c78e <setvbuf+0x6e>
    c77c:	0023      	movs	r3, r4
    c77e:	3344      	adds	r3, #68	; 0x44
    c780:	4299      	cmp	r1, r3
    c782:	d002      	beq.n	c78a <setvbuf+0x6a>
    c784:	0030      	movs	r0, r6
    c786:	f000 fbe5 	bl	cf54 <_free_r>
    c78a:	2300      	movs	r3, #0
    c78c:	6363      	str	r3, [r4, #52]	; 0x34
    c78e:	2300      	movs	r3, #0
    c790:	61a3      	str	r3, [r4, #24]
    c792:	6063      	str	r3, [r4, #4]
    c794:	89a3      	ldrh	r3, [r4, #12]
    c796:	061b      	lsls	r3, r3, #24
    c798:	d503      	bpl.n	c7a2 <setvbuf+0x82>
    c79a:	6921      	ldr	r1, [r4, #16]
    c79c:	0030      	movs	r0, r6
    c79e:	f000 fbd9 	bl	cf54 <_free_r>
    c7a2:	89a2      	ldrh	r2, [r4, #12]
    c7a4:	4b35      	ldr	r3, [pc, #212]	; (c87c <setvbuf+0x15c>)
    c7a6:	4013      	ands	r3, r2
    c7a8:	81a3      	strh	r3, [r4, #12]
    c7aa:	9b00      	ldr	r3, [sp, #0]
    c7ac:	2b02      	cmp	r3, #2
    c7ae:	d021      	beq.n	c7f4 <setvbuf+0xd4>
    c7b0:	ab03      	add	r3, sp, #12
    c7b2:	aa02      	add	r2, sp, #8
    c7b4:	0021      	movs	r1, r4
    c7b6:	0030      	movs	r0, r6
    c7b8:	f000 fb3e 	bl	ce38 <__swhatbuf_r>
    c7bc:	89a3      	ldrh	r3, [r4, #12]
    c7be:	4318      	orrs	r0, r3
    c7c0:	81a0      	strh	r0, [r4, #12]
    c7c2:	2d00      	cmp	r5, #0
    c7c4:	d101      	bne.n	c7ca <setvbuf+0xaa>
    c7c6:	9d02      	ldr	r5, [sp, #8]
    c7c8:	e001      	b.n	c7ce <setvbuf+0xae>
    c7ca:	2f00      	cmp	r7, #0
    c7cc:	d125      	bne.n	c81a <setvbuf+0xfa>
    c7ce:	0028      	movs	r0, r5
    c7d0:	f000 fb96 	bl	cf00 <malloc>
    c7d4:	9501      	str	r5, [sp, #4]
    c7d6:	1e07      	subs	r7, r0, #0
    c7d8:	d11a      	bne.n	c810 <setvbuf+0xf0>
    c7da:	9b02      	ldr	r3, [sp, #8]
    c7dc:	9301      	str	r3, [sp, #4]
    c7de:	42ab      	cmp	r3, r5
    c7e0:	d102      	bne.n	c7e8 <setvbuf+0xc8>
    c7e2:	2001      	movs	r0, #1
    c7e4:	4240      	negs	r0, r0
    c7e6:	e006      	b.n	c7f6 <setvbuf+0xd6>
    c7e8:	9801      	ldr	r0, [sp, #4]
    c7ea:	f000 fb89 	bl	cf00 <malloc>
    c7ee:	1e07      	subs	r7, r0, #0
    c7f0:	d10e      	bne.n	c810 <setvbuf+0xf0>
    c7f2:	e7f6      	b.n	c7e2 <setvbuf+0xc2>
    c7f4:	2000      	movs	r0, #0
    c7f6:	2202      	movs	r2, #2
    c7f8:	89a3      	ldrh	r3, [r4, #12]
    c7fa:	4313      	orrs	r3, r2
    c7fc:	81a3      	strh	r3, [r4, #12]
    c7fe:	2300      	movs	r3, #0
    c800:	60a3      	str	r3, [r4, #8]
    c802:	0023      	movs	r3, r4
    c804:	3347      	adds	r3, #71	; 0x47
    c806:	6023      	str	r3, [r4, #0]
    c808:	6123      	str	r3, [r4, #16]
    c80a:	2301      	movs	r3, #1
    c80c:	6163      	str	r3, [r4, #20]
    c80e:	e02a      	b.n	c866 <setvbuf+0x146>
    c810:	2280      	movs	r2, #128	; 0x80
    c812:	89a3      	ldrh	r3, [r4, #12]
    c814:	9d01      	ldr	r5, [sp, #4]
    c816:	4313      	orrs	r3, r2
    c818:	81a3      	strh	r3, [r4, #12]
    c81a:	69b3      	ldr	r3, [r6, #24]
    c81c:	2b00      	cmp	r3, #0
    c81e:	d102      	bne.n	c826 <setvbuf+0x106>
    c820:	0030      	movs	r0, r6
    c822:	f000 fa75 	bl	cd10 <__sinit>
    c826:	9b00      	ldr	r3, [sp, #0]
    c828:	2b01      	cmp	r3, #1
    c82a:	d103      	bne.n	c834 <setvbuf+0x114>
    c82c:	89a3      	ldrh	r3, [r4, #12]
    c82e:	9a00      	ldr	r2, [sp, #0]
    c830:	431a      	orrs	r2, r3
    c832:	81a2      	strh	r2, [r4, #12]
    c834:	2308      	movs	r3, #8
    c836:	89a2      	ldrh	r2, [r4, #12]
    c838:	6027      	str	r7, [r4, #0]
    c83a:	4013      	ands	r3, r2
    c83c:	6127      	str	r7, [r4, #16]
    c83e:	6165      	str	r5, [r4, #20]
    c840:	1e18      	subs	r0, r3, #0
    c842:	d00c      	beq.n	c85e <setvbuf+0x13e>
    c844:	2301      	movs	r3, #1
    c846:	401a      	ands	r2, r3
    c848:	2300      	movs	r3, #0
    c84a:	1e10      	subs	r0, r2, #0
    c84c:	4298      	cmp	r0, r3
    c84e:	d004      	beq.n	c85a <setvbuf+0x13a>
    c850:	426d      	negs	r5, r5
    c852:	60a3      	str	r3, [r4, #8]
    c854:	61a5      	str	r5, [r4, #24]
    c856:	0018      	movs	r0, r3
    c858:	e005      	b.n	c866 <setvbuf+0x146>
    c85a:	60a5      	str	r5, [r4, #8]
    c85c:	e003      	b.n	c866 <setvbuf+0x146>
    c85e:	60a3      	str	r3, [r4, #8]
    c860:	e001      	b.n	c866 <setvbuf+0x146>
    c862:	2001      	movs	r0, #1
    c864:	4240      	negs	r0, r0
    c866:	b005      	add	sp, #20
    c868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	20000090 	.word	0x20000090
    c870:	0000eac8 	.word	0x0000eac8
    c874:	0000eae8 	.word	0x0000eae8
    c878:	0000eb08 	.word	0x0000eb08
    c87c:	fffff35c 	.word	0xfffff35c

0000c880 <sniprintf>:
    c880:	b40c      	push	{r2, r3}
    c882:	b530      	push	{r4, r5, lr}
    c884:	4b16      	ldr	r3, [pc, #88]	; (c8e0 <sniprintf+0x60>)
    c886:	b09d      	sub	sp, #116	; 0x74
    c888:	1e0c      	subs	r4, r1, #0
    c88a:	681d      	ldr	r5, [r3, #0]
    c88c:	da04      	bge.n	c898 <sniprintf+0x18>
    c88e:	238b      	movs	r3, #139	; 0x8b
    c890:	2001      	movs	r0, #1
    c892:	602b      	str	r3, [r5, #0]
    c894:	4240      	negs	r0, r0
    c896:	e01d      	b.n	c8d4 <sniprintf+0x54>
    c898:	2382      	movs	r3, #130	; 0x82
    c89a:	a902      	add	r1, sp, #8
    c89c:	009b      	lsls	r3, r3, #2
    c89e:	818b      	strh	r3, [r1, #12]
    c8a0:	2300      	movs	r3, #0
    c8a2:	9002      	str	r0, [sp, #8]
    c8a4:	6108      	str	r0, [r1, #16]
    c8a6:	429c      	cmp	r4, r3
    c8a8:	d000      	beq.n	c8ac <sniprintf+0x2c>
    c8aa:	1e63      	subs	r3, r4, #1
    c8ac:	608b      	str	r3, [r1, #8]
    c8ae:	614b      	str	r3, [r1, #20]
    c8b0:	2301      	movs	r3, #1
    c8b2:	425b      	negs	r3, r3
    c8b4:	81cb      	strh	r3, [r1, #14]
    c8b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c8b8:	ab21      	add	r3, sp, #132	; 0x84
    c8ba:	0028      	movs	r0, r5
    c8bc:	9301      	str	r3, [sp, #4]
    c8be:	f000 fc6d 	bl	d19c <_svfiprintf_r>
    c8c2:	1c43      	adds	r3, r0, #1
    c8c4:	da01      	bge.n	c8ca <sniprintf+0x4a>
    c8c6:	238b      	movs	r3, #139	; 0x8b
    c8c8:	602b      	str	r3, [r5, #0]
    c8ca:	2c00      	cmp	r4, #0
    c8cc:	d002      	beq.n	c8d4 <sniprintf+0x54>
    c8ce:	2300      	movs	r3, #0
    c8d0:	9a02      	ldr	r2, [sp, #8]
    c8d2:	7013      	strb	r3, [r2, #0]
    c8d4:	b01d      	add	sp, #116	; 0x74
    c8d6:	bc30      	pop	{r4, r5}
    c8d8:	bc08      	pop	{r3}
    c8da:	b002      	add	sp, #8
    c8dc:	4718      	bx	r3
    c8de:	46c0      	nop			; (mov r8, r8)
    c8e0:	20000090 	.word	0x20000090

0000c8e4 <siprintf>:
    c8e4:	b40e      	push	{r1, r2, r3}
    c8e6:	b510      	push	{r4, lr}
    c8e8:	b09d      	sub	sp, #116	; 0x74
    c8ea:	a902      	add	r1, sp, #8
    c8ec:	9002      	str	r0, [sp, #8]
    c8ee:	6108      	str	r0, [r1, #16]
    c8f0:	480b      	ldr	r0, [pc, #44]	; (c920 <siprintf+0x3c>)
    c8f2:	2482      	movs	r4, #130	; 0x82
    c8f4:	6088      	str	r0, [r1, #8]
    c8f6:	6148      	str	r0, [r1, #20]
    c8f8:	2001      	movs	r0, #1
    c8fa:	4240      	negs	r0, r0
    c8fc:	ab1f      	add	r3, sp, #124	; 0x7c
    c8fe:	81c8      	strh	r0, [r1, #14]
    c900:	4808      	ldr	r0, [pc, #32]	; (c924 <siprintf+0x40>)
    c902:	cb04      	ldmia	r3!, {r2}
    c904:	00a4      	lsls	r4, r4, #2
    c906:	6800      	ldr	r0, [r0, #0]
    c908:	9301      	str	r3, [sp, #4]
    c90a:	818c      	strh	r4, [r1, #12]
    c90c:	f000 fc46 	bl	d19c <_svfiprintf_r>
    c910:	2300      	movs	r3, #0
    c912:	9a02      	ldr	r2, [sp, #8]
    c914:	7013      	strb	r3, [r2, #0]
    c916:	b01d      	add	sp, #116	; 0x74
    c918:	bc10      	pop	{r4}
    c91a:	bc08      	pop	{r3}
    c91c:	b003      	add	sp, #12
    c91e:	4718      	bx	r3
    c920:	7fffffff 	.word	0x7fffffff
    c924:	20000090 	.word	0x20000090

0000c928 <strlen>:
    c928:	2300      	movs	r3, #0
    c92a:	5cc2      	ldrb	r2, [r0, r3]
    c92c:	3301      	adds	r3, #1
    c92e:	2a00      	cmp	r2, #0
    c930:	d1fb      	bne.n	c92a <strlen+0x2>
    c932:	1e58      	subs	r0, r3, #1
    c934:	4770      	bx	lr

0000c936 <strncmp>:
    c936:	2300      	movs	r3, #0
    c938:	b530      	push	{r4, r5, lr}
    c93a:	429a      	cmp	r2, r3
    c93c:	d00b      	beq.n	c956 <strncmp+0x20>
    c93e:	3a01      	subs	r2, #1
    c940:	5cc4      	ldrb	r4, [r0, r3]
    c942:	5ccd      	ldrb	r5, [r1, r3]
    c944:	42ac      	cmp	r4, r5
    c946:	d105      	bne.n	c954 <strncmp+0x1e>
    c948:	429a      	cmp	r2, r3
    c94a:	d002      	beq.n	c952 <strncmp+0x1c>
    c94c:	3301      	adds	r3, #1
    c94e:	2c00      	cmp	r4, #0
    c950:	d1f6      	bne.n	c940 <strncmp+0xa>
    c952:	0025      	movs	r5, r4
    c954:	1b63      	subs	r3, r4, r5
    c956:	0018      	movs	r0, r3
    c958:	bd30      	pop	{r4, r5, pc}

0000c95a <strspn>:
    c95a:	0003      	movs	r3, r0
    c95c:	b530      	push	{r4, r5, lr}
    c95e:	781c      	ldrb	r4, [r3, #0]
    c960:	2c00      	cmp	r4, #0
    c962:	d009      	beq.n	c978 <strspn+0x1e>
    c964:	000a      	movs	r2, r1
    c966:	7815      	ldrb	r5, [r2, #0]
    c968:	2d00      	cmp	r5, #0
    c96a:	d005      	beq.n	c978 <strspn+0x1e>
    c96c:	42ac      	cmp	r4, r5
    c96e:	d001      	beq.n	c974 <strspn+0x1a>
    c970:	3201      	adds	r2, #1
    c972:	e7f8      	b.n	c966 <strspn+0xc>
    c974:	3301      	adds	r3, #1
    c976:	e7f2      	b.n	c95e <strspn+0x4>
    c978:	1a18      	subs	r0, r3, r0
    c97a:	bd30      	pop	{r4, r5, pc}

0000c97c <__swbuf_r>:
    c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c97e:	0005      	movs	r5, r0
    c980:	000f      	movs	r7, r1
    c982:	0014      	movs	r4, r2
    c984:	2800      	cmp	r0, #0
    c986:	d004      	beq.n	c992 <__swbuf_r+0x16>
    c988:	6983      	ldr	r3, [r0, #24]
    c98a:	2b00      	cmp	r3, #0
    c98c:	d101      	bne.n	c992 <__swbuf_r+0x16>
    c98e:	f000 f9bf 	bl	cd10 <__sinit>
    c992:	4b23      	ldr	r3, [pc, #140]	; (ca20 <__swbuf_r+0xa4>)
    c994:	429c      	cmp	r4, r3
    c996:	d101      	bne.n	c99c <__swbuf_r+0x20>
    c998:	686c      	ldr	r4, [r5, #4]
    c99a:	e008      	b.n	c9ae <__swbuf_r+0x32>
    c99c:	4b21      	ldr	r3, [pc, #132]	; (ca24 <__swbuf_r+0xa8>)
    c99e:	429c      	cmp	r4, r3
    c9a0:	d101      	bne.n	c9a6 <__swbuf_r+0x2a>
    c9a2:	68ac      	ldr	r4, [r5, #8]
    c9a4:	e003      	b.n	c9ae <__swbuf_r+0x32>
    c9a6:	4b20      	ldr	r3, [pc, #128]	; (ca28 <__swbuf_r+0xac>)
    c9a8:	429c      	cmp	r4, r3
    c9aa:	d100      	bne.n	c9ae <__swbuf_r+0x32>
    c9ac:	68ec      	ldr	r4, [r5, #12]
    c9ae:	69a3      	ldr	r3, [r4, #24]
    c9b0:	60a3      	str	r3, [r4, #8]
    c9b2:	89a3      	ldrh	r3, [r4, #12]
    c9b4:	071b      	lsls	r3, r3, #28
    c9b6:	d50a      	bpl.n	c9ce <__swbuf_r+0x52>
    c9b8:	6923      	ldr	r3, [r4, #16]
    c9ba:	2b00      	cmp	r3, #0
    c9bc:	d007      	beq.n	c9ce <__swbuf_r+0x52>
    c9be:	6823      	ldr	r3, [r4, #0]
    c9c0:	6922      	ldr	r2, [r4, #16]
    c9c2:	b2fe      	uxtb	r6, r7
    c9c4:	1a98      	subs	r0, r3, r2
    c9c6:	6963      	ldr	r3, [r4, #20]
    c9c8:	4298      	cmp	r0, r3
    c9ca:	db0f      	blt.n	c9ec <__swbuf_r+0x70>
    c9cc:	e008      	b.n	c9e0 <__swbuf_r+0x64>
    c9ce:	0021      	movs	r1, r4
    c9d0:	0028      	movs	r0, r5
    c9d2:	f000 f82b 	bl	ca2c <__swsetup_r>
    c9d6:	2800      	cmp	r0, #0
    c9d8:	d0f1      	beq.n	c9be <__swbuf_r+0x42>
    c9da:	2001      	movs	r0, #1
    c9dc:	4240      	negs	r0, r0
    c9de:	e01d      	b.n	ca1c <__swbuf_r+0xa0>
    c9e0:	0021      	movs	r1, r4
    c9e2:	0028      	movs	r0, r5
    c9e4:	f000 f926 	bl	cc34 <_fflush_r>
    c9e8:	2800      	cmp	r0, #0
    c9ea:	d1f6      	bne.n	c9da <__swbuf_r+0x5e>
    c9ec:	68a3      	ldr	r3, [r4, #8]
    c9ee:	3001      	adds	r0, #1
    c9f0:	3b01      	subs	r3, #1
    c9f2:	60a3      	str	r3, [r4, #8]
    c9f4:	6823      	ldr	r3, [r4, #0]
    c9f6:	1c5a      	adds	r2, r3, #1
    c9f8:	6022      	str	r2, [r4, #0]
    c9fa:	701f      	strb	r7, [r3, #0]
    c9fc:	6963      	ldr	r3, [r4, #20]
    c9fe:	4298      	cmp	r0, r3
    ca00:	d005      	beq.n	ca0e <__swbuf_r+0x92>
    ca02:	89a3      	ldrh	r3, [r4, #12]
    ca04:	0030      	movs	r0, r6
    ca06:	07db      	lsls	r3, r3, #31
    ca08:	d508      	bpl.n	ca1c <__swbuf_r+0xa0>
    ca0a:	2e0a      	cmp	r6, #10
    ca0c:	d106      	bne.n	ca1c <__swbuf_r+0xa0>
    ca0e:	0021      	movs	r1, r4
    ca10:	0028      	movs	r0, r5
    ca12:	f000 f90f 	bl	cc34 <_fflush_r>
    ca16:	2800      	cmp	r0, #0
    ca18:	d1df      	bne.n	c9da <__swbuf_r+0x5e>
    ca1a:	0030      	movs	r0, r6
    ca1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	0000eac8 	.word	0x0000eac8
    ca24:	0000eae8 	.word	0x0000eae8
    ca28:	0000eb08 	.word	0x0000eb08

0000ca2c <__swsetup_r>:
    ca2c:	4b36      	ldr	r3, [pc, #216]	; (cb08 <__swsetup_r+0xdc>)
    ca2e:	b570      	push	{r4, r5, r6, lr}
    ca30:	681d      	ldr	r5, [r3, #0]
    ca32:	0006      	movs	r6, r0
    ca34:	000c      	movs	r4, r1
    ca36:	2d00      	cmp	r5, #0
    ca38:	d005      	beq.n	ca46 <__swsetup_r+0x1a>
    ca3a:	69ab      	ldr	r3, [r5, #24]
    ca3c:	2b00      	cmp	r3, #0
    ca3e:	d102      	bne.n	ca46 <__swsetup_r+0x1a>
    ca40:	0028      	movs	r0, r5
    ca42:	f000 f965 	bl	cd10 <__sinit>
    ca46:	4b31      	ldr	r3, [pc, #196]	; (cb0c <__swsetup_r+0xe0>)
    ca48:	429c      	cmp	r4, r3
    ca4a:	d101      	bne.n	ca50 <__swsetup_r+0x24>
    ca4c:	686c      	ldr	r4, [r5, #4]
    ca4e:	e008      	b.n	ca62 <__swsetup_r+0x36>
    ca50:	4b2f      	ldr	r3, [pc, #188]	; (cb10 <__swsetup_r+0xe4>)
    ca52:	429c      	cmp	r4, r3
    ca54:	d101      	bne.n	ca5a <__swsetup_r+0x2e>
    ca56:	68ac      	ldr	r4, [r5, #8]
    ca58:	e003      	b.n	ca62 <__swsetup_r+0x36>
    ca5a:	4b2e      	ldr	r3, [pc, #184]	; (cb14 <__swsetup_r+0xe8>)
    ca5c:	429c      	cmp	r4, r3
    ca5e:	d100      	bne.n	ca62 <__swsetup_r+0x36>
    ca60:	68ec      	ldr	r4, [r5, #12]
    ca62:	220c      	movs	r2, #12
    ca64:	5ea3      	ldrsh	r3, [r4, r2]
    ca66:	b29a      	uxth	r2, r3
    ca68:	0711      	lsls	r1, r2, #28
    ca6a:	d423      	bmi.n	cab4 <__swsetup_r+0x88>
    ca6c:	06d1      	lsls	r1, r2, #27
    ca6e:	d407      	bmi.n	ca80 <__swsetup_r+0x54>
    ca70:	2209      	movs	r2, #9
    ca72:	2001      	movs	r0, #1
    ca74:	6032      	str	r2, [r6, #0]
    ca76:	3237      	adds	r2, #55	; 0x37
    ca78:	4313      	orrs	r3, r2
    ca7a:	81a3      	strh	r3, [r4, #12]
    ca7c:	4240      	negs	r0, r0
    ca7e:	e042      	b.n	cb06 <__swsetup_r+0xda>
    ca80:	0753      	lsls	r3, r2, #29
    ca82:	d513      	bpl.n	caac <__swsetup_r+0x80>
    ca84:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ca86:	2900      	cmp	r1, #0
    ca88:	d008      	beq.n	ca9c <__swsetup_r+0x70>
    ca8a:	0023      	movs	r3, r4
    ca8c:	3344      	adds	r3, #68	; 0x44
    ca8e:	4299      	cmp	r1, r3
    ca90:	d002      	beq.n	ca98 <__swsetup_r+0x6c>
    ca92:	0030      	movs	r0, r6
    ca94:	f000 fa5e 	bl	cf54 <_free_r>
    ca98:	2300      	movs	r3, #0
    ca9a:	6363      	str	r3, [r4, #52]	; 0x34
    ca9c:	2224      	movs	r2, #36	; 0x24
    ca9e:	89a3      	ldrh	r3, [r4, #12]
    caa0:	4393      	bics	r3, r2
    caa2:	81a3      	strh	r3, [r4, #12]
    caa4:	2300      	movs	r3, #0
    caa6:	6063      	str	r3, [r4, #4]
    caa8:	6923      	ldr	r3, [r4, #16]
    caaa:	6023      	str	r3, [r4, #0]
    caac:	2208      	movs	r2, #8
    caae:	89a3      	ldrh	r3, [r4, #12]
    cab0:	4313      	orrs	r3, r2
    cab2:	81a3      	strh	r3, [r4, #12]
    cab4:	6923      	ldr	r3, [r4, #16]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d10b      	bne.n	cad2 <__swsetup_r+0xa6>
    caba:	23a0      	movs	r3, #160	; 0xa0
    cabc:	89a2      	ldrh	r2, [r4, #12]
    cabe:	009b      	lsls	r3, r3, #2
    cac0:	4013      	ands	r3, r2
    cac2:	2280      	movs	r2, #128	; 0x80
    cac4:	0092      	lsls	r2, r2, #2
    cac6:	4293      	cmp	r3, r2
    cac8:	d003      	beq.n	cad2 <__swsetup_r+0xa6>
    caca:	0021      	movs	r1, r4
    cacc:	0030      	movs	r0, r6
    cace:	f000 f9d9 	bl	ce84 <__smakebuf_r>
    cad2:	2301      	movs	r3, #1
    cad4:	89a2      	ldrh	r2, [r4, #12]
    cad6:	4013      	ands	r3, r2
    cad8:	d005      	beq.n	cae6 <__swsetup_r+0xba>
    cada:	2300      	movs	r3, #0
    cadc:	60a3      	str	r3, [r4, #8]
    cade:	6963      	ldr	r3, [r4, #20]
    cae0:	425b      	negs	r3, r3
    cae2:	61a3      	str	r3, [r4, #24]
    cae4:	e003      	b.n	caee <__swsetup_r+0xc2>
    cae6:	0792      	lsls	r2, r2, #30
    cae8:	d400      	bmi.n	caec <__swsetup_r+0xc0>
    caea:	6963      	ldr	r3, [r4, #20]
    caec:	60a3      	str	r3, [r4, #8]
    caee:	2000      	movs	r0, #0
    caf0:	6923      	ldr	r3, [r4, #16]
    caf2:	4283      	cmp	r3, r0
    caf4:	d107      	bne.n	cb06 <__swsetup_r+0xda>
    caf6:	220c      	movs	r2, #12
    caf8:	5ea3      	ldrsh	r3, [r4, r2]
    cafa:	061a      	lsls	r2, r3, #24
    cafc:	d503      	bpl.n	cb06 <__swsetup_r+0xda>
    cafe:	2240      	movs	r2, #64	; 0x40
    cb00:	4313      	orrs	r3, r2
    cb02:	81a3      	strh	r3, [r4, #12]
    cb04:	3801      	subs	r0, #1
    cb06:	bd70      	pop	{r4, r5, r6, pc}
    cb08:	20000090 	.word	0x20000090
    cb0c:	0000eac8 	.word	0x0000eac8
    cb10:	0000eae8 	.word	0x0000eae8
    cb14:	0000eb08 	.word	0x0000eb08

0000cb18 <abort>:
    cb18:	b510      	push	{r4, lr}
    cb1a:	2006      	movs	r0, #6
    cb1c:	f000 fcae 	bl	d47c <raise>
    cb20:	2001      	movs	r0, #1
    cb22:	f7fb fa0d 	bl	7f40 <_exit>
	...

0000cb28 <__sflush_r>:
    cb28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cb2a:	898a      	ldrh	r2, [r1, #12]
    cb2c:	0005      	movs	r5, r0
    cb2e:	000c      	movs	r4, r1
    cb30:	0713      	lsls	r3, r2, #28
    cb32:	d45a      	bmi.n	cbea <__sflush_r+0xc2>
    cb34:	684b      	ldr	r3, [r1, #4]
    cb36:	2b00      	cmp	r3, #0
    cb38:	dc02      	bgt.n	cb40 <__sflush_r+0x18>
    cb3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    cb3c:	2b00      	cmp	r3, #0
    cb3e:	dd19      	ble.n	cb74 <__sflush_r+0x4c>
    cb40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    cb42:	2f00      	cmp	r7, #0
    cb44:	d016      	beq.n	cb74 <__sflush_r+0x4c>
    cb46:	2300      	movs	r3, #0
    cb48:	682e      	ldr	r6, [r5, #0]
    cb4a:	602b      	str	r3, [r5, #0]
    cb4c:	2380      	movs	r3, #128	; 0x80
    cb4e:	015b      	lsls	r3, r3, #5
    cb50:	401a      	ands	r2, r3
    cb52:	d001      	beq.n	cb58 <__sflush_r+0x30>
    cb54:	6d60      	ldr	r0, [r4, #84]	; 0x54
    cb56:	e014      	b.n	cb82 <__sflush_r+0x5a>
    cb58:	2301      	movs	r3, #1
    cb5a:	6a21      	ldr	r1, [r4, #32]
    cb5c:	0028      	movs	r0, r5
    cb5e:	47b8      	blx	r7
    cb60:	1c43      	adds	r3, r0, #1
    cb62:	d10e      	bne.n	cb82 <__sflush_r+0x5a>
    cb64:	682b      	ldr	r3, [r5, #0]
    cb66:	2b00      	cmp	r3, #0
    cb68:	d00b      	beq.n	cb82 <__sflush_r+0x5a>
    cb6a:	2b1d      	cmp	r3, #29
    cb6c:	d001      	beq.n	cb72 <__sflush_r+0x4a>
    cb6e:	2b16      	cmp	r3, #22
    cb70:	d102      	bne.n	cb78 <__sflush_r+0x50>
    cb72:	602e      	str	r6, [r5, #0]
    cb74:	2000      	movs	r0, #0
    cb76:	e05a      	b.n	cc2e <__sflush_r+0x106>
    cb78:	2240      	movs	r2, #64	; 0x40
    cb7a:	89a3      	ldrh	r3, [r4, #12]
    cb7c:	4313      	orrs	r3, r2
    cb7e:	81a3      	strh	r3, [r4, #12]
    cb80:	e055      	b.n	cc2e <__sflush_r+0x106>
    cb82:	89a3      	ldrh	r3, [r4, #12]
    cb84:	075b      	lsls	r3, r3, #29
    cb86:	d506      	bpl.n	cb96 <__sflush_r+0x6e>
    cb88:	6863      	ldr	r3, [r4, #4]
    cb8a:	1ac0      	subs	r0, r0, r3
    cb8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cb8e:	2b00      	cmp	r3, #0
    cb90:	d001      	beq.n	cb96 <__sflush_r+0x6e>
    cb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
    cb94:	1ac0      	subs	r0, r0, r3
    cb96:	2300      	movs	r3, #0
    cb98:	0002      	movs	r2, r0
    cb9a:	6a21      	ldr	r1, [r4, #32]
    cb9c:	0028      	movs	r0, r5
    cb9e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    cba0:	47b8      	blx	r7
    cba2:	89a3      	ldrh	r3, [r4, #12]
    cba4:	1c42      	adds	r2, r0, #1
    cba6:	d106      	bne.n	cbb6 <__sflush_r+0x8e>
    cba8:	6829      	ldr	r1, [r5, #0]
    cbaa:	291d      	cmp	r1, #29
    cbac:	d83a      	bhi.n	cc24 <__sflush_r+0xfc>
    cbae:	4a20      	ldr	r2, [pc, #128]	; (cc30 <__sflush_r+0x108>)
    cbb0:	40ca      	lsrs	r2, r1
    cbb2:	07d2      	lsls	r2, r2, #31
    cbb4:	d536      	bpl.n	cc24 <__sflush_r+0xfc>
    cbb6:	2200      	movs	r2, #0
    cbb8:	6062      	str	r2, [r4, #4]
    cbba:	6922      	ldr	r2, [r4, #16]
    cbbc:	6022      	str	r2, [r4, #0]
    cbbe:	04db      	lsls	r3, r3, #19
    cbc0:	d505      	bpl.n	cbce <__sflush_r+0xa6>
    cbc2:	1c43      	adds	r3, r0, #1
    cbc4:	d102      	bne.n	cbcc <__sflush_r+0xa4>
    cbc6:	682b      	ldr	r3, [r5, #0]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d100      	bne.n	cbce <__sflush_r+0xa6>
    cbcc:	6560      	str	r0, [r4, #84]	; 0x54
    cbce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cbd0:	602e      	str	r6, [r5, #0]
    cbd2:	2900      	cmp	r1, #0
    cbd4:	d0ce      	beq.n	cb74 <__sflush_r+0x4c>
    cbd6:	0023      	movs	r3, r4
    cbd8:	3344      	adds	r3, #68	; 0x44
    cbda:	4299      	cmp	r1, r3
    cbdc:	d002      	beq.n	cbe4 <__sflush_r+0xbc>
    cbde:	0028      	movs	r0, r5
    cbe0:	f000 f9b8 	bl	cf54 <_free_r>
    cbe4:	2000      	movs	r0, #0
    cbe6:	6360      	str	r0, [r4, #52]	; 0x34
    cbe8:	e021      	b.n	cc2e <__sflush_r+0x106>
    cbea:	690f      	ldr	r7, [r1, #16]
    cbec:	2f00      	cmp	r7, #0
    cbee:	d0c1      	beq.n	cb74 <__sflush_r+0x4c>
    cbf0:	680b      	ldr	r3, [r1, #0]
    cbf2:	600f      	str	r7, [r1, #0]
    cbf4:	1bdb      	subs	r3, r3, r7
    cbf6:	9301      	str	r3, [sp, #4]
    cbf8:	2300      	movs	r3, #0
    cbfa:	0792      	lsls	r2, r2, #30
    cbfc:	d100      	bne.n	cc00 <__sflush_r+0xd8>
    cbfe:	694b      	ldr	r3, [r1, #20]
    cc00:	60a3      	str	r3, [r4, #8]
    cc02:	e003      	b.n	cc0c <__sflush_r+0xe4>
    cc04:	9b01      	ldr	r3, [sp, #4]
    cc06:	183f      	adds	r7, r7, r0
    cc08:	1a1b      	subs	r3, r3, r0
    cc0a:	9301      	str	r3, [sp, #4]
    cc0c:	9b01      	ldr	r3, [sp, #4]
    cc0e:	2b00      	cmp	r3, #0
    cc10:	ddb0      	ble.n	cb74 <__sflush_r+0x4c>
    cc12:	9b01      	ldr	r3, [sp, #4]
    cc14:	003a      	movs	r2, r7
    cc16:	6a21      	ldr	r1, [r4, #32]
    cc18:	0028      	movs	r0, r5
    cc1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    cc1c:	47b0      	blx	r6
    cc1e:	2800      	cmp	r0, #0
    cc20:	dcf0      	bgt.n	cc04 <__sflush_r+0xdc>
    cc22:	89a3      	ldrh	r3, [r4, #12]
    cc24:	2240      	movs	r2, #64	; 0x40
    cc26:	2001      	movs	r0, #1
    cc28:	4313      	orrs	r3, r2
    cc2a:	81a3      	strh	r3, [r4, #12]
    cc2c:	4240      	negs	r0, r0
    cc2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cc30:	20400001 	.word	0x20400001

0000cc34 <_fflush_r>:
    cc34:	690b      	ldr	r3, [r1, #16]
    cc36:	b570      	push	{r4, r5, r6, lr}
    cc38:	0005      	movs	r5, r0
    cc3a:	000c      	movs	r4, r1
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	d101      	bne.n	cc44 <_fflush_r+0x10>
    cc40:	2000      	movs	r0, #0
    cc42:	e01c      	b.n	cc7e <_fflush_r+0x4a>
    cc44:	2800      	cmp	r0, #0
    cc46:	d004      	beq.n	cc52 <_fflush_r+0x1e>
    cc48:	6983      	ldr	r3, [r0, #24]
    cc4a:	2b00      	cmp	r3, #0
    cc4c:	d101      	bne.n	cc52 <_fflush_r+0x1e>
    cc4e:	f000 f85f 	bl	cd10 <__sinit>
    cc52:	4b0b      	ldr	r3, [pc, #44]	; (cc80 <_fflush_r+0x4c>)
    cc54:	429c      	cmp	r4, r3
    cc56:	d101      	bne.n	cc5c <_fflush_r+0x28>
    cc58:	686c      	ldr	r4, [r5, #4]
    cc5a:	e008      	b.n	cc6e <_fflush_r+0x3a>
    cc5c:	4b09      	ldr	r3, [pc, #36]	; (cc84 <_fflush_r+0x50>)
    cc5e:	429c      	cmp	r4, r3
    cc60:	d101      	bne.n	cc66 <_fflush_r+0x32>
    cc62:	68ac      	ldr	r4, [r5, #8]
    cc64:	e003      	b.n	cc6e <_fflush_r+0x3a>
    cc66:	4b08      	ldr	r3, [pc, #32]	; (cc88 <_fflush_r+0x54>)
    cc68:	429c      	cmp	r4, r3
    cc6a:	d100      	bne.n	cc6e <_fflush_r+0x3a>
    cc6c:	68ec      	ldr	r4, [r5, #12]
    cc6e:	220c      	movs	r2, #12
    cc70:	5ea3      	ldrsh	r3, [r4, r2]
    cc72:	2b00      	cmp	r3, #0
    cc74:	d0e4      	beq.n	cc40 <_fflush_r+0xc>
    cc76:	0021      	movs	r1, r4
    cc78:	0028      	movs	r0, r5
    cc7a:	f7ff ff55 	bl	cb28 <__sflush_r>
    cc7e:	bd70      	pop	{r4, r5, r6, pc}
    cc80:	0000eac8 	.word	0x0000eac8
    cc84:	0000eae8 	.word	0x0000eae8
    cc88:	0000eb08 	.word	0x0000eb08

0000cc8c <_cleanup_r>:
    cc8c:	b510      	push	{r4, lr}
    cc8e:	4902      	ldr	r1, [pc, #8]	; (cc98 <_cleanup_r+0xc>)
    cc90:	f000 f8b0 	bl	cdf4 <_fwalk_reent>
    cc94:	bd10      	pop	{r4, pc}
    cc96:	46c0      	nop			; (mov r8, r8)
    cc98:	0000cc35 	.word	0x0000cc35

0000cc9c <std.isra.0>:
    cc9c:	2300      	movs	r3, #0
    cc9e:	b510      	push	{r4, lr}
    cca0:	0004      	movs	r4, r0
    cca2:	6003      	str	r3, [r0, #0]
    cca4:	6043      	str	r3, [r0, #4]
    cca6:	6083      	str	r3, [r0, #8]
    cca8:	8181      	strh	r1, [r0, #12]
    ccaa:	6643      	str	r3, [r0, #100]	; 0x64
    ccac:	81c2      	strh	r2, [r0, #14]
    ccae:	6103      	str	r3, [r0, #16]
    ccb0:	6143      	str	r3, [r0, #20]
    ccb2:	6183      	str	r3, [r0, #24]
    ccb4:	0019      	movs	r1, r3
    ccb6:	2208      	movs	r2, #8
    ccb8:	305c      	adds	r0, #92	; 0x5c
    ccba:	f7ff f9b2 	bl	c022 <memset>
    ccbe:	4b05      	ldr	r3, [pc, #20]	; (ccd4 <std.isra.0+0x38>)
    ccc0:	6224      	str	r4, [r4, #32]
    ccc2:	6263      	str	r3, [r4, #36]	; 0x24
    ccc4:	4b04      	ldr	r3, [pc, #16]	; (ccd8 <std.isra.0+0x3c>)
    ccc6:	62a3      	str	r3, [r4, #40]	; 0x28
    ccc8:	4b04      	ldr	r3, [pc, #16]	; (ccdc <std.isra.0+0x40>)
    ccca:	62e3      	str	r3, [r4, #44]	; 0x2c
    cccc:	4b04      	ldr	r3, [pc, #16]	; (cce0 <std.isra.0+0x44>)
    ccce:	6323      	str	r3, [r4, #48]	; 0x30
    ccd0:	bd10      	pop	{r4, pc}
    ccd2:	46c0      	nop			; (mov r8, r8)
    ccd4:	0000d4bd 	.word	0x0000d4bd
    ccd8:	0000d4e5 	.word	0x0000d4e5
    ccdc:	0000d51d 	.word	0x0000d51d
    cce0:	0000d549 	.word	0x0000d549

0000cce4 <__sfmoreglue>:
    cce4:	b570      	push	{r4, r5, r6, lr}
    cce6:	2568      	movs	r5, #104	; 0x68
    cce8:	1e4b      	subs	r3, r1, #1
    ccea:	435d      	muls	r5, r3
    ccec:	000e      	movs	r6, r1
    ccee:	0029      	movs	r1, r5
    ccf0:	3174      	adds	r1, #116	; 0x74
    ccf2:	f000 f975 	bl	cfe0 <_malloc_r>
    ccf6:	1e04      	subs	r4, r0, #0
    ccf8:	d008      	beq.n	cd0c <__sfmoreglue+0x28>
    ccfa:	2100      	movs	r1, #0
    ccfc:	002a      	movs	r2, r5
    ccfe:	6001      	str	r1, [r0, #0]
    cd00:	6046      	str	r6, [r0, #4]
    cd02:	300c      	adds	r0, #12
    cd04:	60a0      	str	r0, [r4, #8]
    cd06:	3268      	adds	r2, #104	; 0x68
    cd08:	f7ff f98b 	bl	c022 <memset>
    cd0c:	0020      	movs	r0, r4
    cd0e:	bd70      	pop	{r4, r5, r6, pc}

0000cd10 <__sinit>:
    cd10:	6983      	ldr	r3, [r0, #24]
    cd12:	b513      	push	{r0, r1, r4, lr}
    cd14:	0004      	movs	r4, r0
    cd16:	2b00      	cmp	r3, #0
    cd18:	d128      	bne.n	cd6c <__sinit+0x5c>
    cd1a:	6483      	str	r3, [r0, #72]	; 0x48
    cd1c:	64c3      	str	r3, [r0, #76]	; 0x4c
    cd1e:	6503      	str	r3, [r0, #80]	; 0x50
    cd20:	4b13      	ldr	r3, [pc, #76]	; (cd70 <__sinit+0x60>)
    cd22:	4a14      	ldr	r2, [pc, #80]	; (cd74 <__sinit+0x64>)
    cd24:	681b      	ldr	r3, [r3, #0]
    cd26:	6282      	str	r2, [r0, #40]	; 0x28
    cd28:	9301      	str	r3, [sp, #4]
    cd2a:	4298      	cmp	r0, r3
    cd2c:	d101      	bne.n	cd32 <__sinit+0x22>
    cd2e:	2301      	movs	r3, #1
    cd30:	6183      	str	r3, [r0, #24]
    cd32:	0020      	movs	r0, r4
    cd34:	f000 f820 	bl	cd78 <__sfp>
    cd38:	6060      	str	r0, [r4, #4]
    cd3a:	0020      	movs	r0, r4
    cd3c:	f000 f81c 	bl	cd78 <__sfp>
    cd40:	60a0      	str	r0, [r4, #8]
    cd42:	0020      	movs	r0, r4
    cd44:	f000 f818 	bl	cd78 <__sfp>
    cd48:	2200      	movs	r2, #0
    cd4a:	60e0      	str	r0, [r4, #12]
    cd4c:	2104      	movs	r1, #4
    cd4e:	6860      	ldr	r0, [r4, #4]
    cd50:	f7ff ffa4 	bl	cc9c <std.isra.0>
    cd54:	2201      	movs	r2, #1
    cd56:	2109      	movs	r1, #9
    cd58:	68a0      	ldr	r0, [r4, #8]
    cd5a:	f7ff ff9f 	bl	cc9c <std.isra.0>
    cd5e:	2202      	movs	r2, #2
    cd60:	2112      	movs	r1, #18
    cd62:	68e0      	ldr	r0, [r4, #12]
    cd64:	f7ff ff9a 	bl	cc9c <std.isra.0>
    cd68:	2301      	movs	r3, #1
    cd6a:	61a3      	str	r3, [r4, #24]
    cd6c:	bd13      	pop	{r0, r1, r4, pc}
    cd6e:	46c0      	nop			; (mov r8, r8)
    cd70:	0000ea90 	.word	0x0000ea90
    cd74:	0000cc8d 	.word	0x0000cc8d

0000cd78 <__sfp>:
    cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd7a:	4b1d      	ldr	r3, [pc, #116]	; (cdf0 <__sfp+0x78>)
    cd7c:	0006      	movs	r6, r0
    cd7e:	681d      	ldr	r5, [r3, #0]
    cd80:	69ab      	ldr	r3, [r5, #24]
    cd82:	2b00      	cmp	r3, #0
    cd84:	d102      	bne.n	cd8c <__sfp+0x14>
    cd86:	0028      	movs	r0, r5
    cd88:	f7ff ffc2 	bl	cd10 <__sinit>
    cd8c:	3548      	adds	r5, #72	; 0x48
    cd8e:	68ac      	ldr	r4, [r5, #8]
    cd90:	686b      	ldr	r3, [r5, #4]
    cd92:	3b01      	subs	r3, #1
    cd94:	d405      	bmi.n	cda2 <__sfp+0x2a>
    cd96:	220c      	movs	r2, #12
    cd98:	5ea7      	ldrsh	r7, [r4, r2]
    cd9a:	2f00      	cmp	r7, #0
    cd9c:	d010      	beq.n	cdc0 <__sfp+0x48>
    cd9e:	3468      	adds	r4, #104	; 0x68
    cda0:	e7f7      	b.n	cd92 <__sfp+0x1a>
    cda2:	682b      	ldr	r3, [r5, #0]
    cda4:	2b00      	cmp	r3, #0
    cda6:	d001      	beq.n	cdac <__sfp+0x34>
    cda8:	682d      	ldr	r5, [r5, #0]
    cdaa:	e7f0      	b.n	cd8e <__sfp+0x16>
    cdac:	2104      	movs	r1, #4
    cdae:	0030      	movs	r0, r6
    cdb0:	f7ff ff98 	bl	cce4 <__sfmoreglue>
    cdb4:	6028      	str	r0, [r5, #0]
    cdb6:	2800      	cmp	r0, #0
    cdb8:	d1f6      	bne.n	cda8 <__sfp+0x30>
    cdba:	230c      	movs	r3, #12
    cdbc:	6033      	str	r3, [r6, #0]
    cdbe:	e016      	b.n	cdee <__sfp+0x76>
    cdc0:	2301      	movs	r3, #1
    cdc2:	0020      	movs	r0, r4
    cdc4:	425b      	negs	r3, r3
    cdc6:	81e3      	strh	r3, [r4, #14]
    cdc8:	3302      	adds	r3, #2
    cdca:	81a3      	strh	r3, [r4, #12]
    cdcc:	6667      	str	r7, [r4, #100]	; 0x64
    cdce:	6027      	str	r7, [r4, #0]
    cdd0:	60a7      	str	r7, [r4, #8]
    cdd2:	6067      	str	r7, [r4, #4]
    cdd4:	6127      	str	r7, [r4, #16]
    cdd6:	6167      	str	r7, [r4, #20]
    cdd8:	61a7      	str	r7, [r4, #24]
    cdda:	305c      	adds	r0, #92	; 0x5c
    cddc:	2208      	movs	r2, #8
    cdde:	0039      	movs	r1, r7
    cde0:	f7ff f91f 	bl	c022 <memset>
    cde4:	0020      	movs	r0, r4
    cde6:	6367      	str	r7, [r4, #52]	; 0x34
    cde8:	63a7      	str	r7, [r4, #56]	; 0x38
    cdea:	64a7      	str	r7, [r4, #72]	; 0x48
    cdec:	64e7      	str	r7, [r4, #76]	; 0x4c
    cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdf0:	0000ea90 	.word	0x0000ea90

0000cdf4 <_fwalk_reent>:
    cdf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cdf6:	0004      	movs	r4, r0
    cdf8:	0007      	movs	r7, r0
    cdfa:	2600      	movs	r6, #0
    cdfc:	9101      	str	r1, [sp, #4]
    cdfe:	3448      	adds	r4, #72	; 0x48
    ce00:	2c00      	cmp	r4, #0
    ce02:	d016      	beq.n	ce32 <_fwalk_reent+0x3e>
    ce04:	6863      	ldr	r3, [r4, #4]
    ce06:	68a5      	ldr	r5, [r4, #8]
    ce08:	9300      	str	r3, [sp, #0]
    ce0a:	9b00      	ldr	r3, [sp, #0]
    ce0c:	3b01      	subs	r3, #1
    ce0e:	9300      	str	r3, [sp, #0]
    ce10:	d40d      	bmi.n	ce2e <_fwalk_reent+0x3a>
    ce12:	89ab      	ldrh	r3, [r5, #12]
    ce14:	2b01      	cmp	r3, #1
    ce16:	d908      	bls.n	ce2a <_fwalk_reent+0x36>
    ce18:	220e      	movs	r2, #14
    ce1a:	5eab      	ldrsh	r3, [r5, r2]
    ce1c:	3301      	adds	r3, #1
    ce1e:	d004      	beq.n	ce2a <_fwalk_reent+0x36>
    ce20:	0029      	movs	r1, r5
    ce22:	0038      	movs	r0, r7
    ce24:	9b01      	ldr	r3, [sp, #4]
    ce26:	4798      	blx	r3
    ce28:	4306      	orrs	r6, r0
    ce2a:	3568      	adds	r5, #104	; 0x68
    ce2c:	e7ed      	b.n	ce0a <_fwalk_reent+0x16>
    ce2e:	6824      	ldr	r4, [r4, #0]
    ce30:	e7e6      	b.n	ce00 <_fwalk_reent+0xc>
    ce32:	0030      	movs	r0, r6
    ce34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000ce38 <__swhatbuf_r>:
    ce38:	b570      	push	{r4, r5, r6, lr}
    ce3a:	000e      	movs	r6, r1
    ce3c:	001d      	movs	r5, r3
    ce3e:	230e      	movs	r3, #14
    ce40:	5ec9      	ldrsh	r1, [r1, r3]
    ce42:	b090      	sub	sp, #64	; 0x40
    ce44:	0014      	movs	r4, r2
    ce46:	2900      	cmp	r1, #0
    ce48:	da06      	bge.n	ce58 <__swhatbuf_r+0x20>
    ce4a:	2300      	movs	r3, #0
    ce4c:	602b      	str	r3, [r5, #0]
    ce4e:	89b3      	ldrh	r3, [r6, #12]
    ce50:	061b      	lsls	r3, r3, #24
    ce52:	d50f      	bpl.n	ce74 <__swhatbuf_r+0x3c>
    ce54:	2340      	movs	r3, #64	; 0x40
    ce56:	e00f      	b.n	ce78 <__swhatbuf_r+0x40>
    ce58:	aa01      	add	r2, sp, #4
    ce5a:	f000 fba1 	bl	d5a0 <_fstat_r>
    ce5e:	2800      	cmp	r0, #0
    ce60:	dbf3      	blt.n	ce4a <__swhatbuf_r+0x12>
    ce62:	23f0      	movs	r3, #240	; 0xf0
    ce64:	9a02      	ldr	r2, [sp, #8]
    ce66:	021b      	lsls	r3, r3, #8
    ce68:	4013      	ands	r3, r2
    ce6a:	4a05      	ldr	r2, [pc, #20]	; (ce80 <__swhatbuf_r+0x48>)
    ce6c:	189b      	adds	r3, r3, r2
    ce6e:	425a      	negs	r2, r3
    ce70:	4153      	adcs	r3, r2
    ce72:	602b      	str	r3, [r5, #0]
    ce74:	2380      	movs	r3, #128	; 0x80
    ce76:	00db      	lsls	r3, r3, #3
    ce78:	2000      	movs	r0, #0
    ce7a:	6023      	str	r3, [r4, #0]
    ce7c:	b010      	add	sp, #64	; 0x40
    ce7e:	bd70      	pop	{r4, r5, r6, pc}
    ce80:	ffffe000 	.word	0xffffe000

0000ce84 <__smakebuf_r>:
    ce84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ce86:	2602      	movs	r6, #2
    ce88:	898b      	ldrh	r3, [r1, #12]
    ce8a:	0005      	movs	r5, r0
    ce8c:	000c      	movs	r4, r1
    ce8e:	4233      	tst	r3, r6
    ce90:	d110      	bne.n	ceb4 <__smakebuf_r+0x30>
    ce92:	ab01      	add	r3, sp, #4
    ce94:	466a      	mov	r2, sp
    ce96:	f7ff ffcf 	bl	ce38 <__swhatbuf_r>
    ce9a:	9900      	ldr	r1, [sp, #0]
    ce9c:	0007      	movs	r7, r0
    ce9e:	0028      	movs	r0, r5
    cea0:	f000 f89e 	bl	cfe0 <_malloc_r>
    cea4:	2800      	cmp	r0, #0
    cea6:	d10c      	bne.n	cec2 <__smakebuf_r+0x3e>
    cea8:	220c      	movs	r2, #12
    ceaa:	5ea3      	ldrsh	r3, [r4, r2]
    ceac:	059a      	lsls	r2, r3, #22
    ceae:	d423      	bmi.n	cef8 <__smakebuf_r+0x74>
    ceb0:	4333      	orrs	r3, r6
    ceb2:	81a3      	strh	r3, [r4, #12]
    ceb4:	0023      	movs	r3, r4
    ceb6:	3347      	adds	r3, #71	; 0x47
    ceb8:	6023      	str	r3, [r4, #0]
    ceba:	6123      	str	r3, [r4, #16]
    cebc:	2301      	movs	r3, #1
    cebe:	6163      	str	r3, [r4, #20]
    cec0:	e01a      	b.n	cef8 <__smakebuf_r+0x74>
    cec2:	2280      	movs	r2, #128	; 0x80
    cec4:	4b0d      	ldr	r3, [pc, #52]	; (cefc <__smakebuf_r+0x78>)
    cec6:	62ab      	str	r3, [r5, #40]	; 0x28
    cec8:	89a3      	ldrh	r3, [r4, #12]
    ceca:	6020      	str	r0, [r4, #0]
    cecc:	4313      	orrs	r3, r2
    cece:	81a3      	strh	r3, [r4, #12]
    ced0:	9b00      	ldr	r3, [sp, #0]
    ced2:	6120      	str	r0, [r4, #16]
    ced4:	6163      	str	r3, [r4, #20]
    ced6:	9b01      	ldr	r3, [sp, #4]
    ced8:	2b00      	cmp	r3, #0
    ceda:	d00a      	beq.n	cef2 <__smakebuf_r+0x6e>
    cedc:	230e      	movs	r3, #14
    cede:	5ee1      	ldrsh	r1, [r4, r3]
    cee0:	0028      	movs	r0, r5
    cee2:	f000 fb6f 	bl	d5c4 <_isatty_r>
    cee6:	2800      	cmp	r0, #0
    cee8:	d003      	beq.n	cef2 <__smakebuf_r+0x6e>
    ceea:	2201      	movs	r2, #1
    ceec:	89a3      	ldrh	r3, [r4, #12]
    ceee:	4313      	orrs	r3, r2
    cef0:	81a3      	strh	r3, [r4, #12]
    cef2:	89a3      	ldrh	r3, [r4, #12]
    cef4:	431f      	orrs	r7, r3
    cef6:	81a7      	strh	r7, [r4, #12]
    cef8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cefa:	46c0      	nop			; (mov r8, r8)
    cefc:	0000cc8d 	.word	0x0000cc8d

0000cf00 <malloc>:
    cf00:	b510      	push	{r4, lr}
    cf02:	4b03      	ldr	r3, [pc, #12]	; (cf10 <malloc+0x10>)
    cf04:	0001      	movs	r1, r0
    cf06:	6818      	ldr	r0, [r3, #0]
    cf08:	f000 f86a 	bl	cfe0 <_malloc_r>
    cf0c:	bd10      	pop	{r4, pc}
    cf0e:	46c0      	nop			; (mov r8, r8)
    cf10:	20000090 	.word	0x20000090

0000cf14 <memchr>:
    cf14:	b2c9      	uxtb	r1, r1
    cf16:	1882      	adds	r2, r0, r2
    cf18:	4290      	cmp	r0, r2
    cf1a:	d004      	beq.n	cf26 <memchr+0x12>
    cf1c:	7803      	ldrb	r3, [r0, #0]
    cf1e:	428b      	cmp	r3, r1
    cf20:	d002      	beq.n	cf28 <memchr+0x14>
    cf22:	3001      	adds	r0, #1
    cf24:	e7f8      	b.n	cf18 <memchr+0x4>
    cf26:	2000      	movs	r0, #0
    cf28:	4770      	bx	lr

0000cf2a <memmove>:
    cf2a:	b510      	push	{r4, lr}
    cf2c:	4288      	cmp	r0, r1
    cf2e:	d902      	bls.n	cf36 <memmove+0xc>
    cf30:	188b      	adds	r3, r1, r2
    cf32:	4298      	cmp	r0, r3
    cf34:	d301      	bcc.n	cf3a <memmove+0x10>
    cf36:	2300      	movs	r3, #0
    cf38:	e005      	b.n	cf46 <memmove+0x1c>
    cf3a:	1a9b      	subs	r3, r3, r2
    cf3c:	3a01      	subs	r2, #1
    cf3e:	d308      	bcc.n	cf52 <memmove+0x28>
    cf40:	5c99      	ldrb	r1, [r3, r2]
    cf42:	5481      	strb	r1, [r0, r2]
    cf44:	e7fa      	b.n	cf3c <memmove+0x12>
    cf46:	4293      	cmp	r3, r2
    cf48:	d003      	beq.n	cf52 <memmove+0x28>
    cf4a:	5ccc      	ldrb	r4, [r1, r3]
    cf4c:	54c4      	strb	r4, [r0, r3]
    cf4e:	3301      	adds	r3, #1
    cf50:	e7f9      	b.n	cf46 <memmove+0x1c>
    cf52:	bd10      	pop	{r4, pc}

0000cf54 <_free_r>:
    cf54:	b530      	push	{r4, r5, lr}
    cf56:	2900      	cmp	r1, #0
    cf58:	d03e      	beq.n	cfd8 <_free_r+0x84>
    cf5a:	3904      	subs	r1, #4
    cf5c:	680b      	ldr	r3, [r1, #0]
    cf5e:	2b00      	cmp	r3, #0
    cf60:	da00      	bge.n	cf64 <_free_r+0x10>
    cf62:	18c9      	adds	r1, r1, r3
    cf64:	4a1d      	ldr	r2, [pc, #116]	; (cfdc <_free_r+0x88>)
    cf66:	6813      	ldr	r3, [r2, #0]
    cf68:	0014      	movs	r4, r2
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d102      	bne.n	cf74 <_free_r+0x20>
    cf6e:	604b      	str	r3, [r1, #4]
    cf70:	6011      	str	r1, [r2, #0]
    cf72:	e031      	b.n	cfd8 <_free_r+0x84>
    cf74:	428b      	cmp	r3, r1
    cf76:	d90d      	bls.n	cf94 <_free_r+0x40>
    cf78:	680a      	ldr	r2, [r1, #0]
    cf7a:	1888      	adds	r0, r1, r2
    cf7c:	4283      	cmp	r3, r0
    cf7e:	d103      	bne.n	cf88 <_free_r+0x34>
    cf80:	6818      	ldr	r0, [r3, #0]
    cf82:	685b      	ldr	r3, [r3, #4]
    cf84:	1882      	adds	r2, r0, r2
    cf86:	600a      	str	r2, [r1, #0]
    cf88:	604b      	str	r3, [r1, #4]
    cf8a:	6021      	str	r1, [r4, #0]
    cf8c:	e024      	b.n	cfd8 <_free_r+0x84>
    cf8e:	428a      	cmp	r2, r1
    cf90:	d803      	bhi.n	cf9a <_free_r+0x46>
    cf92:	0013      	movs	r3, r2
    cf94:	685a      	ldr	r2, [r3, #4]
    cf96:	2a00      	cmp	r2, #0
    cf98:	d1f9      	bne.n	cf8e <_free_r+0x3a>
    cf9a:	681d      	ldr	r5, [r3, #0]
    cf9c:	195c      	adds	r4, r3, r5
    cf9e:	428c      	cmp	r4, r1
    cfa0:	d10b      	bne.n	cfba <_free_r+0x66>
    cfa2:	6809      	ldr	r1, [r1, #0]
    cfa4:	1869      	adds	r1, r5, r1
    cfa6:	1858      	adds	r0, r3, r1
    cfa8:	6019      	str	r1, [r3, #0]
    cfaa:	4282      	cmp	r2, r0
    cfac:	d114      	bne.n	cfd8 <_free_r+0x84>
    cfae:	6810      	ldr	r0, [r2, #0]
    cfb0:	6852      	ldr	r2, [r2, #4]
    cfb2:	1841      	adds	r1, r0, r1
    cfb4:	6019      	str	r1, [r3, #0]
    cfb6:	605a      	str	r2, [r3, #4]
    cfb8:	e00e      	b.n	cfd8 <_free_r+0x84>
    cfba:	428c      	cmp	r4, r1
    cfbc:	d902      	bls.n	cfc4 <_free_r+0x70>
    cfbe:	230c      	movs	r3, #12
    cfc0:	6003      	str	r3, [r0, #0]
    cfc2:	e009      	b.n	cfd8 <_free_r+0x84>
    cfc4:	6808      	ldr	r0, [r1, #0]
    cfc6:	180c      	adds	r4, r1, r0
    cfc8:	42a2      	cmp	r2, r4
    cfca:	d103      	bne.n	cfd4 <_free_r+0x80>
    cfcc:	6814      	ldr	r4, [r2, #0]
    cfce:	6852      	ldr	r2, [r2, #4]
    cfd0:	1820      	adds	r0, r4, r0
    cfd2:	6008      	str	r0, [r1, #0]
    cfd4:	604a      	str	r2, [r1, #4]
    cfd6:	6059      	str	r1, [r3, #4]
    cfd8:	bd30      	pop	{r4, r5, pc}
    cfda:	46c0      	nop			; (mov r8, r8)
    cfdc:	2000443c 	.word	0x2000443c

0000cfe0 <_malloc_r>:
    cfe0:	2303      	movs	r3, #3
    cfe2:	b570      	push	{r4, r5, r6, lr}
    cfe4:	1ccd      	adds	r5, r1, #3
    cfe6:	439d      	bics	r5, r3
    cfe8:	3508      	adds	r5, #8
    cfea:	0006      	movs	r6, r0
    cfec:	2d0c      	cmp	r5, #12
    cfee:	d201      	bcs.n	cff4 <_malloc_r+0x14>
    cff0:	250c      	movs	r5, #12
    cff2:	e005      	b.n	d000 <_malloc_r+0x20>
    cff4:	2d00      	cmp	r5, #0
    cff6:	da03      	bge.n	d000 <_malloc_r+0x20>
    cff8:	230c      	movs	r3, #12
    cffa:	2000      	movs	r0, #0
    cffc:	6033      	str	r3, [r6, #0]
    cffe:	e040      	b.n	d082 <_malloc_r+0xa2>
    d000:	42a9      	cmp	r1, r5
    d002:	d8f9      	bhi.n	cff8 <_malloc_r+0x18>
    d004:	4b1f      	ldr	r3, [pc, #124]	; (d084 <_malloc_r+0xa4>)
    d006:	681c      	ldr	r4, [r3, #0]
    d008:	001a      	movs	r2, r3
    d00a:	0021      	movs	r1, r4
    d00c:	2900      	cmp	r1, #0
    d00e:	d013      	beq.n	d038 <_malloc_r+0x58>
    d010:	680b      	ldr	r3, [r1, #0]
    d012:	1b5b      	subs	r3, r3, r5
    d014:	d40d      	bmi.n	d032 <_malloc_r+0x52>
    d016:	2b0b      	cmp	r3, #11
    d018:	d902      	bls.n	d020 <_malloc_r+0x40>
    d01a:	600b      	str	r3, [r1, #0]
    d01c:	18cc      	adds	r4, r1, r3
    d01e:	e01e      	b.n	d05e <_malloc_r+0x7e>
    d020:	428c      	cmp	r4, r1
    d022:	d102      	bne.n	d02a <_malloc_r+0x4a>
    d024:	6863      	ldr	r3, [r4, #4]
    d026:	6013      	str	r3, [r2, #0]
    d028:	e01a      	b.n	d060 <_malloc_r+0x80>
    d02a:	684b      	ldr	r3, [r1, #4]
    d02c:	6063      	str	r3, [r4, #4]
    d02e:	000c      	movs	r4, r1
    d030:	e016      	b.n	d060 <_malloc_r+0x80>
    d032:	000c      	movs	r4, r1
    d034:	6849      	ldr	r1, [r1, #4]
    d036:	e7e9      	b.n	d00c <_malloc_r+0x2c>
    d038:	4c13      	ldr	r4, [pc, #76]	; (d088 <_malloc_r+0xa8>)
    d03a:	6823      	ldr	r3, [r4, #0]
    d03c:	2b00      	cmp	r3, #0
    d03e:	d103      	bne.n	d048 <_malloc_r+0x68>
    d040:	0030      	movs	r0, r6
    d042:	f000 f9df 	bl	d404 <_sbrk_r>
    d046:	6020      	str	r0, [r4, #0]
    d048:	0029      	movs	r1, r5
    d04a:	0030      	movs	r0, r6
    d04c:	f000 f9da 	bl	d404 <_sbrk_r>
    d050:	1c43      	adds	r3, r0, #1
    d052:	d0d1      	beq.n	cff8 <_malloc_r+0x18>
    d054:	2303      	movs	r3, #3
    d056:	1cc4      	adds	r4, r0, #3
    d058:	439c      	bics	r4, r3
    d05a:	42a0      	cmp	r0, r4
    d05c:	d10a      	bne.n	d074 <_malloc_r+0x94>
    d05e:	6025      	str	r5, [r4, #0]
    d060:	0020      	movs	r0, r4
    d062:	2207      	movs	r2, #7
    d064:	300b      	adds	r0, #11
    d066:	1d23      	adds	r3, r4, #4
    d068:	4390      	bics	r0, r2
    d06a:	1ac3      	subs	r3, r0, r3
    d06c:	d009      	beq.n	d082 <_malloc_r+0xa2>
    d06e:	425a      	negs	r2, r3
    d070:	50e2      	str	r2, [r4, r3]
    d072:	e006      	b.n	d082 <_malloc_r+0xa2>
    d074:	1a21      	subs	r1, r4, r0
    d076:	0030      	movs	r0, r6
    d078:	f000 f9c4 	bl	d404 <_sbrk_r>
    d07c:	1c43      	adds	r3, r0, #1
    d07e:	d1ee      	bne.n	d05e <_malloc_r+0x7e>
    d080:	e7ba      	b.n	cff8 <_malloc_r+0x18>
    d082:	bd70      	pop	{r4, r5, r6, pc}
    d084:	2000443c 	.word	0x2000443c
    d088:	20004438 	.word	0x20004438

0000d08c <_realloc_r>:
    d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d08e:	0006      	movs	r6, r0
    d090:	000c      	movs	r4, r1
    d092:	0015      	movs	r5, r2
    d094:	2900      	cmp	r1, #0
    d096:	d104      	bne.n	d0a2 <_realloc_r+0x16>
    d098:	0011      	movs	r1, r2
    d09a:	f7ff ffa1 	bl	cfe0 <_malloc_r>
    d09e:	0004      	movs	r4, r0
    d0a0:	e018      	b.n	d0d4 <_realloc_r+0x48>
    d0a2:	2a00      	cmp	r2, #0
    d0a4:	d103      	bne.n	d0ae <_realloc_r+0x22>
    d0a6:	f7ff ff55 	bl	cf54 <_free_r>
    d0aa:	002c      	movs	r4, r5
    d0ac:	e012      	b.n	d0d4 <_realloc_r+0x48>
    d0ae:	f000 faaf 	bl	d610 <_malloc_usable_size_r>
    d0b2:	4285      	cmp	r5, r0
    d0b4:	d90e      	bls.n	d0d4 <_realloc_r+0x48>
    d0b6:	0029      	movs	r1, r5
    d0b8:	0030      	movs	r0, r6
    d0ba:	f7ff ff91 	bl	cfe0 <_malloc_r>
    d0be:	1e07      	subs	r7, r0, #0
    d0c0:	d007      	beq.n	d0d2 <_realloc_r+0x46>
    d0c2:	0021      	movs	r1, r4
    d0c4:	002a      	movs	r2, r5
    d0c6:	f7fe ffa3 	bl	c010 <memcpy>
    d0ca:	0021      	movs	r1, r4
    d0cc:	0030      	movs	r0, r6
    d0ce:	f7ff ff41 	bl	cf54 <_free_r>
    d0d2:	003c      	movs	r4, r7
    d0d4:	0020      	movs	r0, r4
    d0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d0d8 <__ssputs_r>:
    d0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0da:	688e      	ldr	r6, [r1, #8]
    d0dc:	b085      	sub	sp, #20
    d0de:	0007      	movs	r7, r0
    d0e0:	000c      	movs	r4, r1
    d0e2:	9203      	str	r2, [sp, #12]
    d0e4:	9301      	str	r3, [sp, #4]
    d0e6:	429e      	cmp	r6, r3
    d0e8:	d843      	bhi.n	d172 <__ssputs_r+0x9a>
    d0ea:	2390      	movs	r3, #144	; 0x90
    d0ec:	898a      	ldrh	r2, [r1, #12]
    d0ee:	00db      	lsls	r3, r3, #3
    d0f0:	421a      	tst	r2, r3
    d0f2:	d03e      	beq.n	d172 <__ssputs_r+0x9a>
    d0f4:	2503      	movs	r5, #3
    d0f6:	6909      	ldr	r1, [r1, #16]
    d0f8:	6823      	ldr	r3, [r4, #0]
    d0fa:	9801      	ldr	r0, [sp, #4]
    d0fc:	1a5b      	subs	r3, r3, r1
    d0fe:	9302      	str	r3, [sp, #8]
    d100:	6963      	ldr	r3, [r4, #20]
    d102:	435d      	muls	r5, r3
    d104:	0feb      	lsrs	r3, r5, #31
    d106:	195d      	adds	r5, r3, r5
    d108:	9b02      	ldr	r3, [sp, #8]
    d10a:	106d      	asrs	r5, r5, #1
    d10c:	3301      	adds	r3, #1
    d10e:	181b      	adds	r3, r3, r0
    d110:	42ab      	cmp	r3, r5
    d112:	d900      	bls.n	d116 <__ssputs_r+0x3e>
    d114:	001d      	movs	r5, r3
    d116:	0553      	lsls	r3, r2, #21
    d118:	d510      	bpl.n	d13c <__ssputs_r+0x64>
    d11a:	0029      	movs	r1, r5
    d11c:	0038      	movs	r0, r7
    d11e:	f7ff ff5f 	bl	cfe0 <_malloc_r>
    d122:	1e06      	subs	r6, r0, #0
    d124:	d014      	beq.n	d150 <__ssputs_r+0x78>
    d126:	9a02      	ldr	r2, [sp, #8]
    d128:	6921      	ldr	r1, [r4, #16]
    d12a:	f7fe ff71 	bl	c010 <memcpy>
    d12e:	89a2      	ldrh	r2, [r4, #12]
    d130:	4b19      	ldr	r3, [pc, #100]	; (d198 <__ssputs_r+0xc0>)
    d132:	4013      	ands	r3, r2
    d134:	2280      	movs	r2, #128	; 0x80
    d136:	4313      	orrs	r3, r2
    d138:	81a3      	strh	r3, [r4, #12]
    d13a:	e012      	b.n	d162 <__ssputs_r+0x8a>
    d13c:	002a      	movs	r2, r5
    d13e:	0038      	movs	r0, r7
    d140:	f7ff ffa4 	bl	d08c <_realloc_r>
    d144:	1e06      	subs	r6, r0, #0
    d146:	d10c      	bne.n	d162 <__ssputs_r+0x8a>
    d148:	6921      	ldr	r1, [r4, #16]
    d14a:	0038      	movs	r0, r7
    d14c:	f7ff ff02 	bl	cf54 <_free_r>
    d150:	230c      	movs	r3, #12
    d152:	2240      	movs	r2, #64	; 0x40
    d154:	2001      	movs	r0, #1
    d156:	603b      	str	r3, [r7, #0]
    d158:	89a3      	ldrh	r3, [r4, #12]
    d15a:	4240      	negs	r0, r0
    d15c:	4313      	orrs	r3, r2
    d15e:	81a3      	strh	r3, [r4, #12]
    d160:	e017      	b.n	d192 <__ssputs_r+0xba>
    d162:	9b02      	ldr	r3, [sp, #8]
    d164:	6126      	str	r6, [r4, #16]
    d166:	18f6      	adds	r6, r6, r3
    d168:	6026      	str	r6, [r4, #0]
    d16a:	6165      	str	r5, [r4, #20]
    d16c:	9e01      	ldr	r6, [sp, #4]
    d16e:	1aed      	subs	r5, r5, r3
    d170:	60a5      	str	r5, [r4, #8]
    d172:	9b01      	ldr	r3, [sp, #4]
    d174:	42b3      	cmp	r3, r6
    d176:	d200      	bcs.n	d17a <__ssputs_r+0xa2>
    d178:	001e      	movs	r6, r3
    d17a:	0032      	movs	r2, r6
    d17c:	9903      	ldr	r1, [sp, #12]
    d17e:	6820      	ldr	r0, [r4, #0]
    d180:	f7ff fed3 	bl	cf2a <memmove>
    d184:	2000      	movs	r0, #0
    d186:	68a3      	ldr	r3, [r4, #8]
    d188:	1b9b      	subs	r3, r3, r6
    d18a:	60a3      	str	r3, [r4, #8]
    d18c:	6823      	ldr	r3, [r4, #0]
    d18e:	199e      	adds	r6, r3, r6
    d190:	6026      	str	r6, [r4, #0]
    d192:	b005      	add	sp, #20
    d194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d196:	46c0      	nop			; (mov r8, r8)
    d198:	fffffb7f 	.word	0xfffffb7f

0000d19c <_svfiprintf_r>:
    d19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d19e:	b09f      	sub	sp, #124	; 0x7c
    d1a0:	9002      	str	r0, [sp, #8]
    d1a2:	9305      	str	r3, [sp, #20]
    d1a4:	898b      	ldrh	r3, [r1, #12]
    d1a6:	000f      	movs	r7, r1
    d1a8:	0016      	movs	r6, r2
    d1aa:	061b      	lsls	r3, r3, #24
    d1ac:	d510      	bpl.n	d1d0 <_svfiprintf_r+0x34>
    d1ae:	690b      	ldr	r3, [r1, #16]
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d10d      	bne.n	d1d0 <_svfiprintf_r+0x34>
    d1b4:	2140      	movs	r1, #64	; 0x40
    d1b6:	f7ff ff13 	bl	cfe0 <_malloc_r>
    d1ba:	6038      	str	r0, [r7, #0]
    d1bc:	6138      	str	r0, [r7, #16]
    d1be:	2800      	cmp	r0, #0
    d1c0:	d104      	bne.n	d1cc <_svfiprintf_r+0x30>
    d1c2:	230c      	movs	r3, #12
    d1c4:	9a02      	ldr	r2, [sp, #8]
    d1c6:	3801      	subs	r0, #1
    d1c8:	6013      	str	r3, [r2, #0]
    d1ca:	e0d8      	b.n	d37e <_svfiprintf_r+0x1e2>
    d1cc:	2340      	movs	r3, #64	; 0x40
    d1ce:	617b      	str	r3, [r7, #20]
    d1d0:	2300      	movs	r3, #0
    d1d2:	ad06      	add	r5, sp, #24
    d1d4:	616b      	str	r3, [r5, #20]
    d1d6:	3320      	adds	r3, #32
    d1d8:	766b      	strb	r3, [r5, #25]
    d1da:	3310      	adds	r3, #16
    d1dc:	76ab      	strb	r3, [r5, #26]
    d1de:	0034      	movs	r4, r6
    d1e0:	7823      	ldrb	r3, [r4, #0]
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d103      	bne.n	d1ee <_svfiprintf_r+0x52>
    d1e6:	1ba3      	subs	r3, r4, r6
    d1e8:	9304      	str	r3, [sp, #16]
    d1ea:	d012      	beq.n	d212 <_svfiprintf_r+0x76>
    d1ec:	e003      	b.n	d1f6 <_svfiprintf_r+0x5a>
    d1ee:	2b25      	cmp	r3, #37	; 0x25
    d1f0:	d0f9      	beq.n	d1e6 <_svfiprintf_r+0x4a>
    d1f2:	3401      	adds	r4, #1
    d1f4:	e7f4      	b.n	d1e0 <_svfiprintf_r+0x44>
    d1f6:	1ba3      	subs	r3, r4, r6
    d1f8:	0032      	movs	r2, r6
    d1fa:	0039      	movs	r1, r7
    d1fc:	9802      	ldr	r0, [sp, #8]
    d1fe:	f7ff ff6b 	bl	d0d8 <__ssputs_r>
    d202:	1c43      	adds	r3, r0, #1
    d204:	d100      	bne.n	d208 <_svfiprintf_r+0x6c>
    d206:	e0b4      	b.n	d372 <_svfiprintf_r+0x1d6>
    d208:	696a      	ldr	r2, [r5, #20]
    d20a:	9b04      	ldr	r3, [sp, #16]
    d20c:	4694      	mov	ip, r2
    d20e:	4463      	add	r3, ip
    d210:	616b      	str	r3, [r5, #20]
    d212:	7823      	ldrb	r3, [r4, #0]
    d214:	2b00      	cmp	r3, #0
    d216:	d100      	bne.n	d21a <_svfiprintf_r+0x7e>
    d218:	e0ab      	b.n	d372 <_svfiprintf_r+0x1d6>
    d21a:	2201      	movs	r2, #1
    d21c:	2300      	movs	r3, #0
    d21e:	4252      	negs	r2, r2
    d220:	606a      	str	r2, [r5, #4]
    d222:	a902      	add	r1, sp, #8
    d224:	3254      	adds	r2, #84	; 0x54
    d226:	1852      	adds	r2, r2, r1
    d228:	3401      	adds	r4, #1
    d22a:	602b      	str	r3, [r5, #0]
    d22c:	60eb      	str	r3, [r5, #12]
    d22e:	60ab      	str	r3, [r5, #8]
    d230:	7013      	strb	r3, [r2, #0]
    d232:	65ab      	str	r3, [r5, #88]	; 0x58
    d234:	4e53      	ldr	r6, [pc, #332]	; (d384 <_svfiprintf_r+0x1e8>)
    d236:	7821      	ldrb	r1, [r4, #0]
    d238:	2205      	movs	r2, #5
    d23a:	0030      	movs	r0, r6
    d23c:	f7ff fe6a 	bl	cf14 <memchr>
    d240:	2800      	cmp	r0, #0
    d242:	d007      	beq.n	d254 <_svfiprintf_r+0xb8>
    d244:	2301      	movs	r3, #1
    d246:	1b80      	subs	r0, r0, r6
    d248:	4083      	lsls	r3, r0
    d24a:	682a      	ldr	r2, [r5, #0]
    d24c:	3401      	adds	r4, #1
    d24e:	4313      	orrs	r3, r2
    d250:	602b      	str	r3, [r5, #0]
    d252:	e7ef      	b.n	d234 <_svfiprintf_r+0x98>
    d254:	682b      	ldr	r3, [r5, #0]
    d256:	06da      	lsls	r2, r3, #27
    d258:	d504      	bpl.n	d264 <_svfiprintf_r+0xc8>
    d25a:	2253      	movs	r2, #83	; 0x53
    d25c:	2120      	movs	r1, #32
    d25e:	a802      	add	r0, sp, #8
    d260:	1812      	adds	r2, r2, r0
    d262:	7011      	strb	r1, [r2, #0]
    d264:	071a      	lsls	r2, r3, #28
    d266:	d504      	bpl.n	d272 <_svfiprintf_r+0xd6>
    d268:	2253      	movs	r2, #83	; 0x53
    d26a:	212b      	movs	r1, #43	; 0x2b
    d26c:	a802      	add	r0, sp, #8
    d26e:	1812      	adds	r2, r2, r0
    d270:	7011      	strb	r1, [r2, #0]
    d272:	7822      	ldrb	r2, [r4, #0]
    d274:	2a2a      	cmp	r2, #42	; 0x2a
    d276:	d003      	beq.n	d280 <_svfiprintf_r+0xe4>
    d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d27a:	2000      	movs	r0, #0
    d27c:	210a      	movs	r1, #10
    d27e:	e00e      	b.n	d29e <_svfiprintf_r+0x102>
    d280:	9a05      	ldr	r2, [sp, #20]
    d282:	1d11      	adds	r1, r2, #4
    d284:	6812      	ldr	r2, [r2, #0]
    d286:	9105      	str	r1, [sp, #20]
    d288:	2a00      	cmp	r2, #0
    d28a:	db01      	blt.n	d290 <_svfiprintf_r+0xf4>
    d28c:	9209      	str	r2, [sp, #36]	; 0x24
    d28e:	e004      	b.n	d29a <_svfiprintf_r+0xfe>
    d290:	4252      	negs	r2, r2
    d292:	60ea      	str	r2, [r5, #12]
    d294:	2202      	movs	r2, #2
    d296:	4313      	orrs	r3, r2
    d298:	602b      	str	r3, [r5, #0]
    d29a:	3401      	adds	r4, #1
    d29c:	e00b      	b.n	d2b6 <_svfiprintf_r+0x11a>
    d29e:	7822      	ldrb	r2, [r4, #0]
    d2a0:	3a30      	subs	r2, #48	; 0x30
    d2a2:	2a09      	cmp	r2, #9
    d2a4:	d804      	bhi.n	d2b0 <_svfiprintf_r+0x114>
    d2a6:	434b      	muls	r3, r1
    d2a8:	3401      	adds	r4, #1
    d2aa:	189b      	adds	r3, r3, r2
    d2ac:	2001      	movs	r0, #1
    d2ae:	e7f6      	b.n	d29e <_svfiprintf_r+0x102>
    d2b0:	2800      	cmp	r0, #0
    d2b2:	d000      	beq.n	d2b6 <_svfiprintf_r+0x11a>
    d2b4:	9309      	str	r3, [sp, #36]	; 0x24
    d2b6:	7823      	ldrb	r3, [r4, #0]
    d2b8:	2b2e      	cmp	r3, #46	; 0x2e
    d2ba:	d11e      	bne.n	d2fa <_svfiprintf_r+0x15e>
    d2bc:	7863      	ldrb	r3, [r4, #1]
    d2be:	2b2a      	cmp	r3, #42	; 0x2a
    d2c0:	d10a      	bne.n	d2d8 <_svfiprintf_r+0x13c>
    d2c2:	9b05      	ldr	r3, [sp, #20]
    d2c4:	3402      	adds	r4, #2
    d2c6:	1d1a      	adds	r2, r3, #4
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	9205      	str	r2, [sp, #20]
    d2cc:	2b00      	cmp	r3, #0
    d2ce:	da01      	bge.n	d2d4 <_svfiprintf_r+0x138>
    d2d0:	2301      	movs	r3, #1
    d2d2:	425b      	negs	r3, r3
    d2d4:	9307      	str	r3, [sp, #28]
    d2d6:	e010      	b.n	d2fa <_svfiprintf_r+0x15e>
    d2d8:	2300      	movs	r3, #0
    d2da:	200a      	movs	r0, #10
    d2dc:	001a      	movs	r2, r3
    d2de:	3401      	adds	r4, #1
    d2e0:	606b      	str	r3, [r5, #4]
    d2e2:	7821      	ldrb	r1, [r4, #0]
    d2e4:	3930      	subs	r1, #48	; 0x30
    d2e6:	2909      	cmp	r1, #9
    d2e8:	d804      	bhi.n	d2f4 <_svfiprintf_r+0x158>
    d2ea:	4342      	muls	r2, r0
    d2ec:	3401      	adds	r4, #1
    d2ee:	1852      	adds	r2, r2, r1
    d2f0:	2301      	movs	r3, #1
    d2f2:	e7f6      	b.n	d2e2 <_svfiprintf_r+0x146>
    d2f4:	2b00      	cmp	r3, #0
    d2f6:	d000      	beq.n	d2fa <_svfiprintf_r+0x15e>
    d2f8:	9207      	str	r2, [sp, #28]
    d2fa:	4e23      	ldr	r6, [pc, #140]	; (d388 <_svfiprintf_r+0x1ec>)
    d2fc:	7821      	ldrb	r1, [r4, #0]
    d2fe:	2203      	movs	r2, #3
    d300:	0030      	movs	r0, r6
    d302:	f7ff fe07 	bl	cf14 <memchr>
    d306:	2800      	cmp	r0, #0
    d308:	d006      	beq.n	d318 <_svfiprintf_r+0x17c>
    d30a:	2340      	movs	r3, #64	; 0x40
    d30c:	1b80      	subs	r0, r0, r6
    d30e:	4083      	lsls	r3, r0
    d310:	682a      	ldr	r2, [r5, #0]
    d312:	3401      	adds	r4, #1
    d314:	4313      	orrs	r3, r2
    d316:	602b      	str	r3, [r5, #0]
    d318:	7821      	ldrb	r1, [r4, #0]
    d31a:	2206      	movs	r2, #6
    d31c:	481b      	ldr	r0, [pc, #108]	; (d38c <_svfiprintf_r+0x1f0>)
    d31e:	1c66      	adds	r6, r4, #1
    d320:	7629      	strb	r1, [r5, #24]
    d322:	f7ff fdf7 	bl	cf14 <memchr>
    d326:	2800      	cmp	r0, #0
    d328:	d012      	beq.n	d350 <_svfiprintf_r+0x1b4>
    d32a:	4b19      	ldr	r3, [pc, #100]	; (d390 <_svfiprintf_r+0x1f4>)
    d32c:	2b00      	cmp	r3, #0
    d32e:	d106      	bne.n	d33e <_svfiprintf_r+0x1a2>
    d330:	2207      	movs	r2, #7
    d332:	9b05      	ldr	r3, [sp, #20]
    d334:	3307      	adds	r3, #7
    d336:	4393      	bics	r3, r2
    d338:	3308      	adds	r3, #8
    d33a:	9305      	str	r3, [sp, #20]
    d33c:	e014      	b.n	d368 <_svfiprintf_r+0x1cc>
    d33e:	ab05      	add	r3, sp, #20
    d340:	9300      	str	r3, [sp, #0]
    d342:	003a      	movs	r2, r7
    d344:	4b13      	ldr	r3, [pc, #76]	; (d394 <_svfiprintf_r+0x1f8>)
    d346:	0029      	movs	r1, r5
    d348:	9802      	ldr	r0, [sp, #8]
    d34a:	e000      	b.n	d34e <_svfiprintf_r+0x1b2>
    d34c:	bf00      	nop
    d34e:	e007      	b.n	d360 <_svfiprintf_r+0x1c4>
    d350:	ab05      	add	r3, sp, #20
    d352:	9300      	str	r3, [sp, #0]
    d354:	003a      	movs	r2, r7
    d356:	4b0f      	ldr	r3, [pc, #60]	; (d394 <_svfiprintf_r+0x1f8>)
    d358:	0029      	movs	r1, r5
    d35a:	9802      	ldr	r0, [sp, #8]
    d35c:	f7ff f81a 	bl	c394 <_printf_i>
    d360:	9003      	str	r0, [sp, #12]
    d362:	9b03      	ldr	r3, [sp, #12]
    d364:	3301      	adds	r3, #1
    d366:	d004      	beq.n	d372 <_svfiprintf_r+0x1d6>
    d368:	696b      	ldr	r3, [r5, #20]
    d36a:	9a03      	ldr	r2, [sp, #12]
    d36c:	189b      	adds	r3, r3, r2
    d36e:	616b      	str	r3, [r5, #20]
    d370:	e735      	b.n	d1de <_svfiprintf_r+0x42>
    d372:	89bb      	ldrh	r3, [r7, #12]
    d374:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d376:	065b      	lsls	r3, r3, #25
    d378:	d501      	bpl.n	d37e <_svfiprintf_r+0x1e2>
    d37a:	2001      	movs	r0, #1
    d37c:	4240      	negs	r0, r0
    d37e:	b01f      	add	sp, #124	; 0x7c
    d380:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d382:	46c0      	nop			; (mov r8, r8)
    d384:	0000ea94 	.word	0x0000ea94
    d388:	0000ea9a 	.word	0x0000ea9a
    d38c:	0000ea9e 	.word	0x0000ea9e
    d390:	00000000 	.word	0x00000000
    d394:	0000d0d9 	.word	0x0000d0d9

0000d398 <_putc_r>:
    d398:	b570      	push	{r4, r5, r6, lr}
    d39a:	0006      	movs	r6, r0
    d39c:	000d      	movs	r5, r1
    d39e:	0014      	movs	r4, r2
    d3a0:	2800      	cmp	r0, #0
    d3a2:	d004      	beq.n	d3ae <_putc_r+0x16>
    d3a4:	6983      	ldr	r3, [r0, #24]
    d3a6:	2b00      	cmp	r3, #0
    d3a8:	d101      	bne.n	d3ae <_putc_r+0x16>
    d3aa:	f7ff fcb1 	bl	cd10 <__sinit>
    d3ae:	4b12      	ldr	r3, [pc, #72]	; (d3f8 <_putc_r+0x60>)
    d3b0:	429c      	cmp	r4, r3
    d3b2:	d101      	bne.n	d3b8 <_putc_r+0x20>
    d3b4:	6874      	ldr	r4, [r6, #4]
    d3b6:	e008      	b.n	d3ca <_putc_r+0x32>
    d3b8:	4b10      	ldr	r3, [pc, #64]	; (d3fc <_putc_r+0x64>)
    d3ba:	429c      	cmp	r4, r3
    d3bc:	d101      	bne.n	d3c2 <_putc_r+0x2a>
    d3be:	68b4      	ldr	r4, [r6, #8]
    d3c0:	e003      	b.n	d3ca <_putc_r+0x32>
    d3c2:	4b0f      	ldr	r3, [pc, #60]	; (d400 <_putc_r+0x68>)
    d3c4:	429c      	cmp	r4, r3
    d3c6:	d100      	bne.n	d3ca <_putc_r+0x32>
    d3c8:	68f4      	ldr	r4, [r6, #12]
    d3ca:	68a3      	ldr	r3, [r4, #8]
    d3cc:	3b01      	subs	r3, #1
    d3ce:	60a3      	str	r3, [r4, #8]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	da05      	bge.n	d3e0 <_putc_r+0x48>
    d3d4:	69a2      	ldr	r2, [r4, #24]
    d3d6:	4293      	cmp	r3, r2
    d3d8:	db08      	blt.n	d3ec <_putc_r+0x54>
    d3da:	b2eb      	uxtb	r3, r5
    d3dc:	2b0a      	cmp	r3, #10
    d3de:	d005      	beq.n	d3ec <_putc_r+0x54>
    d3e0:	6823      	ldr	r3, [r4, #0]
    d3e2:	b2e8      	uxtb	r0, r5
    d3e4:	1c5a      	adds	r2, r3, #1
    d3e6:	6022      	str	r2, [r4, #0]
    d3e8:	701d      	strb	r5, [r3, #0]
    d3ea:	e004      	b.n	d3f6 <_putc_r+0x5e>
    d3ec:	0022      	movs	r2, r4
    d3ee:	0029      	movs	r1, r5
    d3f0:	0030      	movs	r0, r6
    d3f2:	f7ff fac3 	bl	c97c <__swbuf_r>
    d3f6:	bd70      	pop	{r4, r5, r6, pc}
    d3f8:	0000eac8 	.word	0x0000eac8
    d3fc:	0000eae8 	.word	0x0000eae8
    d400:	0000eb08 	.word	0x0000eb08

0000d404 <_sbrk_r>:
    d404:	2300      	movs	r3, #0
    d406:	b570      	push	{r4, r5, r6, lr}
    d408:	4c06      	ldr	r4, [pc, #24]	; (d424 <_sbrk_r+0x20>)
    d40a:	0005      	movs	r5, r0
    d40c:	0008      	movs	r0, r1
    d40e:	6023      	str	r3, [r4, #0]
    d410:	f7fa fd4a 	bl	7ea8 <_sbrk>
    d414:	1c43      	adds	r3, r0, #1
    d416:	d103      	bne.n	d420 <_sbrk_r+0x1c>
    d418:	6823      	ldr	r3, [r4, #0]
    d41a:	2b00      	cmp	r3, #0
    d41c:	d000      	beq.n	d420 <_sbrk_r+0x1c>
    d41e:	602b      	str	r3, [r5, #0]
    d420:	bd70      	pop	{r4, r5, r6, pc}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	200046c0 	.word	0x200046c0

0000d428 <_raise_r>:
    d428:	b570      	push	{r4, r5, r6, lr}
    d42a:	0004      	movs	r4, r0
    d42c:	1e0d      	subs	r5, r1, #0
    d42e:	2d1f      	cmp	r5, #31
    d430:	d904      	bls.n	d43c <_raise_r+0x14>
    d432:	2316      	movs	r3, #22
    d434:	6003      	str	r3, [r0, #0]
    d436:	2001      	movs	r0, #1
    d438:	4240      	negs	r0, r0
    d43a:	e01e      	b.n	d47a <_raise_r+0x52>
    d43c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d43e:	2a00      	cmp	r2, #0
    d440:	d004      	beq.n	d44c <_raise_r+0x24>
    d442:	008b      	lsls	r3, r1, #2
    d444:	18d2      	adds	r2, r2, r3
    d446:	6813      	ldr	r3, [r2, #0]
    d448:	2b00      	cmp	r3, #0
    d44a:	d108      	bne.n	d45e <_raise_r+0x36>
    d44c:	0020      	movs	r0, r4
    d44e:	f000 f831 	bl	d4b4 <_getpid_r>
    d452:	002a      	movs	r2, r5
    d454:	0001      	movs	r1, r0
    d456:	0020      	movs	r0, r4
    d458:	f000 f81a 	bl	d490 <_kill_r>
    d45c:	e00d      	b.n	d47a <_raise_r+0x52>
    d45e:	2000      	movs	r0, #0
    d460:	2b01      	cmp	r3, #1
    d462:	d00a      	beq.n	d47a <_raise_r+0x52>
    d464:	1c59      	adds	r1, r3, #1
    d466:	d103      	bne.n	d470 <_raise_r+0x48>
    d468:	3317      	adds	r3, #23
    d46a:	6023      	str	r3, [r4, #0]
    d46c:	3001      	adds	r0, #1
    d46e:	e004      	b.n	d47a <_raise_r+0x52>
    d470:	2400      	movs	r4, #0
    d472:	0028      	movs	r0, r5
    d474:	6014      	str	r4, [r2, #0]
    d476:	4798      	blx	r3
    d478:	0020      	movs	r0, r4
    d47a:	bd70      	pop	{r4, r5, r6, pc}

0000d47c <raise>:
    d47c:	b510      	push	{r4, lr}
    d47e:	4b03      	ldr	r3, [pc, #12]	; (d48c <raise+0x10>)
    d480:	0001      	movs	r1, r0
    d482:	6818      	ldr	r0, [r3, #0]
    d484:	f7ff ffd0 	bl	d428 <_raise_r>
    d488:	bd10      	pop	{r4, pc}
    d48a:	46c0      	nop			; (mov r8, r8)
    d48c:	20000090 	.word	0x20000090

0000d490 <_kill_r>:
    d490:	2300      	movs	r3, #0
    d492:	b570      	push	{r4, r5, r6, lr}
    d494:	4c06      	ldr	r4, [pc, #24]	; (d4b0 <_kill_r+0x20>)
    d496:	0005      	movs	r5, r0
    d498:	0008      	movs	r0, r1
    d49a:	0011      	movs	r1, r2
    d49c:	6023      	str	r3, [r4, #0]
    d49e:	f7fa fd59 	bl	7f54 <_kill>
    d4a2:	1c43      	adds	r3, r0, #1
    d4a4:	d103      	bne.n	d4ae <_kill_r+0x1e>
    d4a6:	6823      	ldr	r3, [r4, #0]
    d4a8:	2b00      	cmp	r3, #0
    d4aa:	d000      	beq.n	d4ae <_kill_r+0x1e>
    d4ac:	602b      	str	r3, [r5, #0]
    d4ae:	bd70      	pop	{r4, r5, r6, pc}
    d4b0:	200046c0 	.word	0x200046c0

0000d4b4 <_getpid_r>:
    d4b4:	b510      	push	{r4, lr}
    d4b6:	f7fa fd57 	bl	7f68 <_getpid>
    d4ba:	bd10      	pop	{r4, pc}

0000d4bc <__sread>:
    d4bc:	b570      	push	{r4, r5, r6, lr}
    d4be:	000c      	movs	r4, r1
    d4c0:	250e      	movs	r5, #14
    d4c2:	5f49      	ldrsh	r1, [r1, r5]
    d4c4:	f000 f8b0 	bl	d628 <_read_r>
    d4c8:	2800      	cmp	r0, #0
    d4ca:	db03      	blt.n	d4d4 <__sread+0x18>
    d4cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d4ce:	181b      	adds	r3, r3, r0
    d4d0:	6563      	str	r3, [r4, #84]	; 0x54
    d4d2:	e003      	b.n	d4dc <__sread+0x20>
    d4d4:	89a2      	ldrh	r2, [r4, #12]
    d4d6:	4b02      	ldr	r3, [pc, #8]	; (d4e0 <__sread+0x24>)
    d4d8:	4013      	ands	r3, r2
    d4da:	81a3      	strh	r3, [r4, #12]
    d4dc:	bd70      	pop	{r4, r5, r6, pc}
    d4de:	46c0      	nop			; (mov r8, r8)
    d4e0:	ffffefff 	.word	0xffffefff

0000d4e4 <__swrite>:
    d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d4e6:	001f      	movs	r7, r3
    d4e8:	898b      	ldrh	r3, [r1, #12]
    d4ea:	0005      	movs	r5, r0
    d4ec:	000c      	movs	r4, r1
    d4ee:	0016      	movs	r6, r2
    d4f0:	05db      	lsls	r3, r3, #23
    d4f2:	d505      	bpl.n	d500 <__swrite+0x1c>
    d4f4:	230e      	movs	r3, #14
    d4f6:	5ec9      	ldrsh	r1, [r1, r3]
    d4f8:	2200      	movs	r2, #0
    d4fa:	2302      	movs	r3, #2
    d4fc:	f000 f874 	bl	d5e8 <_lseek_r>
    d500:	89a2      	ldrh	r2, [r4, #12]
    d502:	4b05      	ldr	r3, [pc, #20]	; (d518 <__swrite+0x34>)
    d504:	0028      	movs	r0, r5
    d506:	4013      	ands	r3, r2
    d508:	81a3      	strh	r3, [r4, #12]
    d50a:	0032      	movs	r2, r6
    d50c:	230e      	movs	r3, #14
    d50e:	5ee1      	ldrsh	r1, [r4, r3]
    d510:	003b      	movs	r3, r7
    d512:	f000 f81f 	bl	d554 <_write_r>
    d516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d518:	ffffefff 	.word	0xffffefff

0000d51c <__sseek>:
    d51c:	b570      	push	{r4, r5, r6, lr}
    d51e:	000c      	movs	r4, r1
    d520:	250e      	movs	r5, #14
    d522:	5f49      	ldrsh	r1, [r1, r5]
    d524:	f000 f860 	bl	d5e8 <_lseek_r>
    d528:	89a3      	ldrh	r3, [r4, #12]
    d52a:	1c42      	adds	r2, r0, #1
    d52c:	d103      	bne.n	d536 <__sseek+0x1a>
    d52e:	4a05      	ldr	r2, [pc, #20]	; (d544 <__sseek+0x28>)
    d530:	4013      	ands	r3, r2
    d532:	81a3      	strh	r3, [r4, #12]
    d534:	e004      	b.n	d540 <__sseek+0x24>
    d536:	2280      	movs	r2, #128	; 0x80
    d538:	0152      	lsls	r2, r2, #5
    d53a:	4313      	orrs	r3, r2
    d53c:	81a3      	strh	r3, [r4, #12]
    d53e:	6560      	str	r0, [r4, #84]	; 0x54
    d540:	bd70      	pop	{r4, r5, r6, pc}
    d542:	46c0      	nop			; (mov r8, r8)
    d544:	ffffefff 	.word	0xffffefff

0000d548 <__sclose>:
    d548:	b510      	push	{r4, lr}
    d54a:	230e      	movs	r3, #14
    d54c:	5ec9      	ldrsh	r1, [r1, r3]
    d54e:	f000 f815 	bl	d57c <_close_r>
    d552:	bd10      	pop	{r4, pc}

0000d554 <_write_r>:
    d554:	b570      	push	{r4, r5, r6, lr}
    d556:	0005      	movs	r5, r0
    d558:	0008      	movs	r0, r1
    d55a:	0011      	movs	r1, r2
    d55c:	2200      	movs	r2, #0
    d55e:	4c06      	ldr	r4, [pc, #24]	; (d578 <_write_r+0x24>)
    d560:	6022      	str	r2, [r4, #0]
    d562:	001a      	movs	r2, r3
    d564:	f7fa fc6a 	bl	7e3c <_write>
    d568:	1c43      	adds	r3, r0, #1
    d56a:	d103      	bne.n	d574 <_write_r+0x20>
    d56c:	6823      	ldr	r3, [r4, #0]
    d56e:	2b00      	cmp	r3, #0
    d570:	d000      	beq.n	d574 <_write_r+0x20>
    d572:	602b      	str	r3, [r5, #0]
    d574:	bd70      	pop	{r4, r5, r6, pc}
    d576:	46c0      	nop			; (mov r8, r8)
    d578:	200046c0 	.word	0x200046c0

0000d57c <_close_r>:
    d57c:	2300      	movs	r3, #0
    d57e:	b570      	push	{r4, r5, r6, lr}
    d580:	4c06      	ldr	r4, [pc, #24]	; (d59c <_close_r+0x20>)
    d582:	0005      	movs	r5, r0
    d584:	0008      	movs	r0, r1
    d586:	6023      	str	r3, [r4, #0]
    d588:	f7fa fcac 	bl	7ee4 <_close>
    d58c:	1c43      	adds	r3, r0, #1
    d58e:	d103      	bne.n	d598 <_close_r+0x1c>
    d590:	6823      	ldr	r3, [r4, #0]
    d592:	2b00      	cmp	r3, #0
    d594:	d000      	beq.n	d598 <_close_r+0x1c>
    d596:	602b      	str	r3, [r5, #0]
    d598:	bd70      	pop	{r4, r5, r6, pc}
    d59a:	46c0      	nop			; (mov r8, r8)
    d59c:	200046c0 	.word	0x200046c0

0000d5a0 <_fstat_r>:
    d5a0:	2300      	movs	r3, #0
    d5a2:	b570      	push	{r4, r5, r6, lr}
    d5a4:	4c06      	ldr	r4, [pc, #24]	; (d5c0 <_fstat_r+0x20>)
    d5a6:	0005      	movs	r5, r0
    d5a8:	0008      	movs	r0, r1
    d5aa:	0011      	movs	r1, r2
    d5ac:	6023      	str	r3, [r4, #0]
    d5ae:	f7fa fca3 	bl	7ef8 <_fstat>
    d5b2:	1c43      	adds	r3, r0, #1
    d5b4:	d103      	bne.n	d5be <_fstat_r+0x1e>
    d5b6:	6823      	ldr	r3, [r4, #0]
    d5b8:	2b00      	cmp	r3, #0
    d5ba:	d000      	beq.n	d5be <_fstat_r+0x1e>
    d5bc:	602b      	str	r3, [r5, #0]
    d5be:	bd70      	pop	{r4, r5, r6, pc}
    d5c0:	200046c0 	.word	0x200046c0

0000d5c4 <_isatty_r>:
    d5c4:	2300      	movs	r3, #0
    d5c6:	b570      	push	{r4, r5, r6, lr}
    d5c8:	4c06      	ldr	r4, [pc, #24]	; (d5e4 <_isatty_r+0x20>)
    d5ca:	0005      	movs	r5, r0
    d5cc:	0008      	movs	r0, r1
    d5ce:	6023      	str	r3, [r4, #0]
    d5d0:	f7fa fca0 	bl	7f14 <_isatty>
    d5d4:	1c43      	adds	r3, r0, #1
    d5d6:	d103      	bne.n	d5e0 <_isatty_r+0x1c>
    d5d8:	6823      	ldr	r3, [r4, #0]
    d5da:	2b00      	cmp	r3, #0
    d5dc:	d000      	beq.n	d5e0 <_isatty_r+0x1c>
    d5de:	602b      	str	r3, [r5, #0]
    d5e0:	bd70      	pop	{r4, r5, r6, pc}
    d5e2:	46c0      	nop			; (mov r8, r8)
    d5e4:	200046c0 	.word	0x200046c0

0000d5e8 <_lseek_r>:
    d5e8:	b570      	push	{r4, r5, r6, lr}
    d5ea:	0005      	movs	r5, r0
    d5ec:	0008      	movs	r0, r1
    d5ee:	0011      	movs	r1, r2
    d5f0:	2200      	movs	r2, #0
    d5f2:	4c06      	ldr	r4, [pc, #24]	; (d60c <_lseek_r+0x24>)
    d5f4:	6022      	str	r2, [r4, #0]
    d5f6:	001a      	movs	r2, r3
    d5f8:	f7fa fc96 	bl	7f28 <_lseek>
    d5fc:	1c43      	adds	r3, r0, #1
    d5fe:	d103      	bne.n	d608 <_lseek_r+0x20>
    d600:	6823      	ldr	r3, [r4, #0]
    d602:	2b00      	cmp	r3, #0
    d604:	d000      	beq.n	d608 <_lseek_r+0x20>
    d606:	602b      	str	r3, [r5, #0]
    d608:	bd70      	pop	{r4, r5, r6, pc}
    d60a:	46c0      	nop			; (mov r8, r8)
    d60c:	200046c0 	.word	0x200046c0

0000d610 <_malloc_usable_size_r>:
    d610:	1f0b      	subs	r3, r1, #4
    d612:	681a      	ldr	r2, [r3, #0]
    d614:	1f10      	subs	r0, r2, #4
    d616:	2a00      	cmp	r2, #0
    d618:	da04      	bge.n	d624 <_malloc_usable_size_r+0x14>
    d61a:	1889      	adds	r1, r1, r2
    d61c:	3904      	subs	r1, #4
    d61e:	680b      	ldr	r3, [r1, #0]
    d620:	18d0      	adds	r0, r2, r3
    d622:	3804      	subs	r0, #4
    d624:	4770      	bx	lr
	...

0000d628 <_read_r>:
    d628:	b570      	push	{r4, r5, r6, lr}
    d62a:	0005      	movs	r5, r0
    d62c:	0008      	movs	r0, r1
    d62e:	0011      	movs	r1, r2
    d630:	2200      	movs	r2, #0
    d632:	4c06      	ldr	r4, [pc, #24]	; (d64c <_read_r+0x24>)
    d634:	6022      	str	r2, [r4, #0]
    d636:	001a      	movs	r2, r3
    d638:	f7fa fbd6 	bl	7de8 <_read>
    d63c:	1c43      	adds	r3, r0, #1
    d63e:	d103      	bne.n	d648 <_read_r+0x20>
    d640:	6823      	ldr	r3, [r4, #0]
    d642:	2b00      	cmp	r3, #0
    d644:	d000      	beq.n	d648 <_read_r+0x20>
    d646:	602b      	str	r3, [r5, #0]
    d648:	bd70      	pop	{r4, r5, r6, pc}
    d64a:	46c0      	nop			; (mov r8, r8)
    d64c:	200046c0 	.word	0x200046c0
    d650:	42002c00 	.word	0x42002c00
    d654:	42003000 	.word	0x42003000
    d658:	42003400 	.word	0x42003400
    d65c:	001c1c1b 	.word	0x001c1c1b
    d660:	10000800 	.word	0x10000800
    d664:	00002000 	.word	0x00002000
    d668:	6f727245 	.word	0x6f727245
    d66c:	55202172 	.word	0x55202172
    d670:	6c62616e 	.word	0x6c62616e
    d674:	6f742065 	.word	0x6f742065
    d678:	61657220 	.word	0x61657220
    d67c:	75622064 	.word	0x75622064
    d680:	6e6f7474 	.word	0x6e6f7474
    d684:	61747320 	.word	0x61747320
    d688:	00737574 	.word	0x00737574

0000d68c <tm1640_segments>:
    d68c:	04020100 40201008 4f5b061f 077d6d66     ...... @..[Ofm}.
    d69c:	71396f7f 00747679 20697053 6f727265     .o9qyvt.Spi erro
    d6ac:	00002172 6c696146 74206465 6e69206f     r!..Failed to in
    d6bc:	61697469 657a696c 314d5420 5f303436     itialize TM1640_
    d6cc:	43524553 00214d4f 6c696166 74206465     SERCOM!.failed t
    d6dc:	6e69206f 61697469 657a696c 43545720     o initialize WTC
    d6ec:	38303536 00000021 50504128 52452829     6508!...(APP)(ER
    d6fc:	255b2952 255b5d73 00005d64 61766e69     R)[%s][%d]..inva
    d70c:	6564696c 636f6920 6320746c 0000646d     lide ioclt cmd..

0000d71c <__FUNCTION__.14913>:
    d71c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    d72c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d73c:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
    d74c:	6b617720 74207075 63206568 00706968      wakup the chip.
    d75c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    d76c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    d77c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    d78c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    d79c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    d7ac:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    d7bc:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    d7cc:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    d7dc:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    d7ec:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    d7fc:	64207070 276e6469 65732074 58522074     pp didn't set RX
    d80c:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    d81c:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    d82c:	61462029 2065736c 65746e69 70757272     ) False interrup
    d83c:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    d84c:	74206c69 6552206f 69206461 7265746e     il to Read inter
    d85c:	74707572 67657220 00000000 66696828     rupt reg....(hif
    d86c:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    d87c:	65687420 69686320 00000070 46494828      the chip...(HIF
    d88c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    d89c:	746e6920 75727265 25207470 72742064      interrupt %d tr
    d8ac:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    d8bc:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    d8cc:	72612064 656d7567 0000746e 20505041     d argument..APP 
    d8dc:	75716552 65747365 69532064 6920657a     Requested Size i
    d8ec:	616c2073 72656772 61687420 6874206e     s larger than th
    d8fc:	65722065 65766963 75622064 72656666     e recived buffer
    d90c:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    d91c:	20505041 75716552 65747365 64412064     APP Requested Ad
    d92c:	73657264 65622073 646e6f79 65687420     dress beyond the
    d93c:	63657220 64657669 66756220 20726566      recived buffer 
    d94c:	72646461 20737365 20646e61 676e656c     address and leng
    d95c:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

0000d96c <__FUNCTION__.12480>:
    d96c:	5f666968 646e6573 00000000              hif_send....

0000d978 <__FUNCTION__.12490>:
    d978:	5f666968 00727369                       hif_isr.

0000d980 <__FUNCTION__.12496>:
    d980:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
    d990:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    d9a0:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    d9b0:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    d9c0:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    d9d0:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    d9e0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    d9f0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    da00:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    da10:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    da20:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    da30:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    da40:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    da50:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    da60:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    da70:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    da80:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    da90:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    daa0:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    dab0:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    dac0:	2065626f 75716572 73747365 72657020     obe requests per
    dad0:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    dae0:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    daf0:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
    db00:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    db10:	00000a75 206e694d 76697264 76207265     u...Min driver v
    db20:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    db30:	72727543 69726420 20726576 3a726576     Curr driver ver:
    db40:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    db50:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    db60:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    db70:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    db80:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    db90:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    dba0:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    dbb0:	20706557 2079656b 65646e69 64252078     Wep key index %d
    dbc0:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    dbd0:	2079656b 676e656c 25206874 00000a64     key length %d...
    dbe0:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    dbf0:	656c2079 6874676e 00000000 65646e75     y length....unde
    dc00:	656e6966 65732064 79742063 00006570     fined sec type..
    dc10:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
    dc20:	6420746f 6e696665 00006465 7473694c     ot defined..List
    dc30:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
    dc40:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
    dc50:	31312072 00000000 45574f50 41532052     r 11....POWER SA
    dc60:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    dc70:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    dc80:	66754220 20726566 65637865 64656465      Buffer exceeded
    dc90:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    dca0:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    dcb0:	00000000                                ....

0000dcb4 <__FUNCTION__.12505>:
    dcb4:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    dcc4:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    dcd4:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    dce4:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
    dcf4:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
    dd04:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
    dd14:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
    dd24:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
    dd34:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
    dd44:	61747320 3a5d7472 69616620 6572206c      start]: fail re
    dd54:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
    dd64:	0000002e 6c696166 74206465 6564206f     ....failed to de
    dd74:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
    dd84:	68772072 20656c69 74697277 20676e69     r while writing 
    dd94:	00676572 6f727245 68772072 20656c69     reg.Error while 
    dda4:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
    ddb4:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    ddc4:	6f742064 61657220 00000064 6c75705b     d to read...[pul
    ddd4:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    dde4:	6f742064 69727720 00006574              d to write..

0000ddf0 <__FUNCTION__.12290>:
    ddf0:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0000de00 <crc7_syndrome_table>:
    de00:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    de10:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    de20:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    de30:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    de40:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    de50:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    de60:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    de70:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    de80:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    de90:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    dea0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    deb0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    dec0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    ded0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    dee0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    def0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    df00:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    df10:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    df20:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    df30:	73756220 72726520 2e2e726f 0000002e      bus error......
    df40:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    df50:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    df60:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    df70:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    df80:	656c6961 61642064 72206174 6f707365     ailed data respo
    df90:	2065736e 64616572 7562202c 72652073     nse read, bus er
    dfa0:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    dfb0:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    dfc0:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    dfd0:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    dfe0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    dff0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    e000:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    e010:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e020:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    e030:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    e040:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    e050:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    e060:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    e070:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e080:	656c6961 61642064 62206174 6b636f6c     ailed data block
    e090:	69727720 202c6574 20737562 6f727265      write, bus erro
    e0a0:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    e0b0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    e0c0:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    e0d0:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    e0e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e0f0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    e100:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e110:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    e120:	65722064 6e6f7073 202c6573 74697277     d response, writ
    e130:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    e140:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e150:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    e160:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    e170:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    e180:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    e190:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    e1a0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    e1b0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    e1c0:	206b636f 61746164 69727720 2e2e6574     ock data write..
    e1d0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e1e0:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    e1f0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    e200:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e210:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    e220:	64616572 67657220 30252820 2e297838     read reg (%08x).
    e230:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e240:	656c6961 61642064 72206174 2e646165     ailed data read.
    e250:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e260:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    e270:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    e280:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e290:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    e2a0:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    e2b0:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    e2c0:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    e2d0:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    e2e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e2f0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e300:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    e310:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    e320:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    e330:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e340:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    e350:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    e360:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    e370:	6e692064 6e726574 77206c61 65746972     d internal write
    e380:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    e390:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    e3a0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    e3b0:	64692070 002e2e2e 00002e94 00002e94     p id............
    e3c0:	00002f24 00002de8 00002e2e 00002e50     $/...-......P...
    e3d0:	00002ed6 00002ed6 00002f90 00002dbc     ........./...-..
    e3e0:	00002fea 00002fea 00002fea 00002fea     ./.../.../.../..
    e3f0:	00002e72                                r...

0000e3f4 <__FUNCTION__.11755>:
    e3f4:	5f697073 00646d63                       spi_cmd.

0000e3fc <__FUNCTION__.11763>:
    e3fc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000e408 <__FUNCTION__.11779>:
    e408:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000e418 <__FUNCTION__.11794>:
    e418:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000e428 <__FUNCTION__.11804>:
    e428:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000e438 <__FUNCTION__.11812>:
    e438:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000e448 <__FUNCTION__.11821>:
    e448:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000e458 <__FUNCTION__.11829>:
    e458:	735f6d6e 725f6970 00646165 42000800     nm_spi_read....B
    e468:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    e478:	42001c00 0c0b0a09 00000e0d 00006e1e     ...B.........n..
    e488:	00006e96 00006e96 00006e3c 00006e36     .n...n..<n..6n..
    e498:	00006e42 00006e24 00006e48 00006e7c     Bn..$n..Hn..|n..
    e4a8:	00007160 000071b0 000071b0 000071ac     `q...q...q...q..
    e4b8:	00007152 00007172 00007142 00007184     Rq..rq..Bq...q..
    e4c8:	00007196 000071fe 0000722c 0000722c     .q...q..,r..,r..
    e4d8:	00007228 000071f8 00007204 000071f2     (r...q...r...q..
    e4e8:	0000720a 00007210                       .r...r..

0000e4f0 <_tcc_intflag>:
    e4f0:	00000001 00000002 00000004 00000008     ................
    e500:	00001000 00002000 00004000 00008000     ..... ...@......
    e510:	00010000 00020000 00040000 00080000     ................
    e520:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    e530:	51726d54 00000000 0000a12c 0000a12c     TmrQ....,...,...
    e540:	0000a12c 0000a1ba 0000a184 0000a1ae     ,...............
    e550:	0000a12c 0000a12c 0000a1ba 0000a184     ,...,...........
    e560:	6b636f73 725f7465 6c6f7365 635f6576     socket_resolve_c
    e570:	25203a62 65722073 766c6f73 77206465     b: %s resolved w
    e580:	20687469 25205049 64252e64 2e64252e     ith IP %d.%d.%d.
    e590:	0a0d6425 00000000 5f6d326d 69666977     %d......m2m_wifi
    e5a0:	6174735f 203a6574 5f4d324d 49464957     _state: M2M_WIFI
    e5b0:	5345525f 4f435f50 54535f4e 5f455441     _RESP_CON_STATE_
    e5c0:	4e414843 3a444547 4e4f4320 5443454e     CHANGED: CONNECT
    e5d0:	000d4445 5f6d326d 69666977 6174735f     ED..m2m_wifi_sta
    e5e0:	203a6574 5f4d324d 49464957 5345525f     te: M2M_WIFI_RES
    e5f0:	4f435f50 54535f4e 5f455441 4e414843     P_CON_STATE_CHAN
    e600:	3a444547 53494420 4e4e4f43 45544345     GED: DISCONNECTE
    e610:	00000d44 74616869 6d696b65 00000000     D...ihatekim....
    e620:	73696f4d 206e6574 72756f59 72684320     Moisten Your Chr
    e630:	75626d69 75422073 00006873 5f6d326d     imbus Bush..m2m_
    e640:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    e650:	49464957 5145525f 4348445f 4f435f50     WIFI_REQ_DHCP_CO
    e660:	203a464e 69205049 75252073 2e75252e     NF: IP is %u.%u.
    e670:	252e7525 000a0d75 00000030 00000031     %u.%u...0...1...
    e680:	6564227b 65636976 25223a22 202c2273     {"device":"%s", 
    e690:	6d657422 61726570 65727574 25223a22     "temperature":"%
    e6a0:	64252e64 22202c22 6867696c 223a2274     d.%d", "light":"
    e6b0:	2c226425 656c2220 223a2264 7d227325     %d", "led":"%s"}
    e6c0:	00000000 6e69616d 7570203a 73696c62     ....main: publis
    e6d0:	76652068 3a746e65 73257b20 000a0d7d     h event: {%s}...
    e6e0:	6e69616d 7573203a 72637362 20656269     main: subscribe 
    e6f0:	6e657665 50202c74 4f5f524e 00000d4b     event, PNR_OK...
    e700:	0064656c 6e69616d 6572203a 76696563     led.main: receiv
    e710:	4c206465 63204445 72746e6f 6d206c6f     ed LED control m
    e720:	61737365 203a6567 0a0d7325 00000000     essage: %s......
    e730:	00006e6f 0066666f 6e69616d 6572203a     on..off.main: re
    e740:	76696563 6d206465 61737365 203a6567     ceived message: 
    e750:	0a0d7325 00000000 6e69616d 7573203a     %s......main: su
    e760:	72637362 20656269 6e657665 69202c74     bscribe event, i
    e770:	7265746e 2e6c6176 0000000d 63617453     nterval.....Stac
    e780:	766f206b 6c667265 3a21776f 0a732520     k overflow!: %s.
    e790:	0000000d 6b736174 0073335f 6b736174     ....task_3s.task
    e7a0:	0073315f 6b736174 4830355f 0000007a     _1s.task_50Hz...
    e7b0:	6b736174 7a75425f 0072657a 73627570     task_Buzzer.pubs
    e7c0:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
    e7d0:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
    e7e0:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
    e7f0:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
    e800:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
    e810:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
    e820:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
    e830:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
    e840:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
    e850:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
    e860:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
    e870:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
    e880:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
    e890:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
    e8a0:	6c696166 74206465 7263206f 65746165     failed to create
    e8b0:	50435420 696c6320 20746e65 6b636f73      TCP client sock
    e8c0:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
    e8d0:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
    e8e0:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
    e8f0:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
    e900:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
    e910:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
    e920:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
    e930:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
    e940:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
    e950:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
    e960:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    e970:	00000000 64697575 0000003d 00000000     ....uuid=.......
    e980:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
    e990:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
    e9a0:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
    e9b0:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
    e9c0:	00732546 00312e30                       F%s.0.1.

0000e9c8 <__func__.12046>:
    e9c8:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
    e9d8:	7463656e 00000000                       nect....

0000e9e0 <__func__.12136>:
    e9e0:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

0000e9f0 <__func__.12147>:
    e9f0:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
    ea00:	00000000                                ....

0000ea04 <__func__.12151>:
    ea04:	6e627570 675f6275 00007465 0000bbb8     pubnub_get......
    ea14:	0000ba78 0000ba78 0000ba76 0000bb90     x...x...v.......
    ea24:	0000bb90 0000bb82 0000ba76 0000bb90     ........v.......
    ea34:	0000bb82 0000bb90 0000ba76 0000bb98     ........v.......
    ea44:	0000bb98 0000bb98 0000bd98 7566202c     ............, fu
    ea54:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
    ea64:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
    ea74:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
    ea84:	73256425 000a7325 00000043              %d%s%s..C...

0000ea90 <_global_impure_ptr>:
    ea90:	20000030 2b302d23 6c680020 6665004c     0.. #-0+ .hlL.ef
    eaa0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    eab0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    eac0:	64636261 00006665                       abcdef..

0000eac8 <__sf_fake_stdin>:
	...

0000eae8 <__sf_fake_stdout>:
	...

0000eb08 <__sf_fake_stderr>:
	...

0000eb28 <_init>:
    eb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb2a:	46c0      	nop			; (mov r8, r8)
    eb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    eb2e:	bc08      	pop	{r3}
    eb30:	469e      	mov	lr, r3
    eb32:	4770      	bx	lr

0000eb34 <__init_array_start>:
    eb34:	000000dd 	.word	0x000000dd

0000eb38 <_fini>:
    eb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb3a:	46c0      	nop			; (mov r8, r8)
    eb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    eb3e:	bc08      	pop	{r3}
    eb40:	469e      	mov	lr, r3
    eb42:	4770      	bx	lr

0000eb44 <__fini_array_start>:
    eb44:	000000b5 	.word	0x000000b5
