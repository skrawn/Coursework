
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001399c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0001399c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00004584  20000094  00013a30  00030094  2**2
                  ALLOC
  3 .stack        00002000  20004618  00017fb4  00030094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b0ef  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000665d  00000000  00000000  0007b204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000090e3  00000000  00000000  00081861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000019a0  00000000  00000000  0008a944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000017b0  00000000  00000000  0008c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000246c0  00000000  00000000  0008da94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00021f90  00000000  00000000  000b2154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009ba3e  00000000  00000000  000d40e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006634  00000000  00000000  0016fb24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006618 	.word	0x20006618
       4:	0000a8c9 	.word	0x0000a8c9
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	0000a9c1 	.word	0x0000a9c1
       c:	0000a9c1 	.word	0x0000a9c1
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000ad29 	.word	0x0000ad29
	...
      38:	0000ae51 	.word	0x0000ae51
      3c:	0000ae99 	.word	0x0000ae99
      40:	0000a9c1 	.word	0x0000a9c1

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	0000a9c1 	.word	0x0000a9c1
      48:	0000a9c1 	.word	0x0000a9c1
      4c:	00006a2d 	.word	0x00006a2d
      50:	000064b9 	.word	0x000064b9
      54:	0000a9c1 	.word	0x0000a9c1
      58:	0000a9c1 	.word	0x0000a9c1
		if (time.hour == 0) {
      5c:	0000a9c1 	.word	0x0000a9c1
      60:	0000a9c1 	.word	0x0000a9c1
			time.hour = 12;
      64:	00008195 	.word	0x00008195
      68:	000081ad 	.word	0x000081ad
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	000081c5 	.word	0x000081c5
      70:	000081dd 	.word	0x000081dd
      74:	000081f5 	.word	0x000081f5
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	0000820d 	.word	0x0000820d
      7c:	0000a811 	.word	0x0000a811
      80:	0000a825 	.word	0x0000a825
      84:	0000a839 	.word	0x0000a839
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	0000a9c1 	.word	0x0000a9c1
      8c:	0000a9c1 	.word	0x0000a9c1
      90:	0000a9c1 	.word	0x0000a9c1
	...
      9c:	000062e5 	.word	0x000062e5
      a0:	0000a9c1 	.word	0x0000a9c1
      a4:	0000a9c1 	.word	0x0000a9c1
			alarm.time.hour = alarm.time.hour % 12;
      a8:	0000a9c1 	.word	0x0000a9c1
      ac:	0000a9c1 	.word	0x0000a9c1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0001399c 	.word	0x0001399c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0001399c 	.word	0x0001399c
     10c:	0001399c 	.word	0x0001399c
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	0000a3c5 	.word	0x0000a3c5
     190:	20000000 	.word	0x20000000
     194:	0000e9f5 	.word	0x0000e9f5
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	1dfb      	adds	r3, r7, #7
     1da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1dc:	230f      	movs	r3, #15
     1de:	18fb      	adds	r3, r7, r3
     1e0:	1dfa      	adds	r2, r7, #7
     1e2:	7812      	ldrb	r2, [r2, #0]
     1e4:	09d2      	lsrs	r2, r2, #7
     1e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     1e8:	230e      	movs	r3, #14
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	1dfa      	adds	r2, r7, #7
     1ee:	7812      	ldrb	r2, [r2, #0]
     1f0:	0952      	lsrs	r2, r2, #5
     1f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     1f4:	4b0d      	ldr	r3, [pc, #52]	; (22c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     1f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     1f8:	230f      	movs	r3, #15
     1fa:	18fb      	adds	r3, r7, r3
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d10f      	bne.n	222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     202:	230f      	movs	r3, #15
     204:	18fb      	adds	r3, r7, r3
     206:	781b      	ldrb	r3, [r3, #0]
     208:	009b      	lsls	r3, r3, #2
     20a:	2210      	movs	r2, #16
     20c:	4694      	mov	ip, r2
     20e:	44bc      	add	ip, r7
     210:	4463      	add	r3, ip
     212:	3b08      	subs	r3, #8
     214:	681a      	ldr	r2, [r3, #0]
     216:	230e      	movs	r3, #14
     218:	18fb      	adds	r3, r7, r3
     21a:	781b      	ldrb	r3, [r3, #0]
     21c:	01db      	lsls	r3, r3, #7
     21e:	18d3      	adds	r3, r2, r3
     220:	e000      	b.n	224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     222:	2300      	movs	r3, #0
	}
}
     224:	0018      	movs	r0, r3
     226:	46bd      	mov	sp, r7
     228:	b004      	add	sp, #16
     22a:	bd80      	pop	{r7, pc}
     22c:	41004400 	.word	0x41004400

00000230 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     230:	b580      	push	{r7, lr}
     232:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     234:	4b04      	ldr	r3, [pc, #16]	; (248 <system_interrupt_enable_global+0x18>)
     236:	2201      	movs	r2, #1
     238:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     23a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     23e:	b662      	cpsie	i
}
     240:	46c0      	nop			; (mov r8, r8)
     242:	46bd      	mov	sp, r7
     244:	bd80      	pop	{r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	20000010 	.word	0x20000010

0000024c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     24c:	b580      	push	{r7, lr}
     24e:	b082      	sub	sp, #8
     250:	af00      	add	r7, sp, #0
     252:	0002      	movs	r2, r0
     254:	1dfb      	adds	r3, r7, #7
     256:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     258:	1dfb      	adds	r3, r7, #7
     25a:	781b      	ldrb	r3, [r3, #0]
     25c:	0018      	movs	r0, r3
     25e:	4b03      	ldr	r3, [pc, #12]	; (26c <port_get_group_from_gpio_pin+0x20>)
     260:	4798      	blx	r3
     262:	0003      	movs	r3, r0
}
     264:	0018      	movs	r0, r3
     266:	46bd      	mov	sp, r7
     268:	b002      	add	sp, #8
     26a:	bd80      	pop	{r7, pc}
     26c:	000001d1 	.word	0x000001d1

00000270 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     270:	b580      	push	{r7, lr}
     272:	b082      	sub	sp, #8
     274:	af00      	add	r7, sp, #0
     276:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     278:	687b      	ldr	r3, [r7, #4]
     27a:	2200      	movs	r2, #0
     27c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     27e:	687b      	ldr	r3, [r7, #4]
     280:	2201      	movs	r2, #1
     282:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     284:	687b      	ldr	r3, [r7, #4]
     286:	2200      	movs	r2, #0
     288:	709a      	strb	r2, [r3, #2]
}
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	46bd      	mov	sp, r7
     28e:	b002      	add	sp, #8
     290:	bd80      	pop	{r7, pc}
     292:	46c0      	nop			; (mov r8, r8)

00000294 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     294:	b580      	push	{r7, lr}
     296:	b084      	sub	sp, #16
     298:	af00      	add	r7, sp, #0
     29a:	0002      	movs	r2, r0
     29c:	1dfb      	adds	r3, r7, #7
     29e:	701a      	strb	r2, [r3, #0]
     2a0:	1dbb      	adds	r3, r7, #6
     2a2:	1c0a      	adds	r2, r1, #0
     2a4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2a6:	1dfb      	adds	r3, r7, #7
     2a8:	781b      	ldrb	r3, [r3, #0]
     2aa:	0018      	movs	r0, r3
     2ac:	4b0d      	ldr	r3, [pc, #52]	; (2e4 <port_pin_set_output_level+0x50>)
     2ae:	4798      	blx	r3
     2b0:	0003      	movs	r3, r0
     2b2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b4:	1dfb      	adds	r3, r7, #7
     2b6:	781b      	ldrb	r3, [r3, #0]
     2b8:	221f      	movs	r2, #31
     2ba:	4013      	ands	r3, r2
     2bc:	2201      	movs	r2, #1
     2be:	409a      	lsls	r2, r3
     2c0:	0013      	movs	r3, r2
     2c2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2c4:	1dbb      	adds	r3, r7, #6
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	2b00      	cmp	r3, #0
     2ca:	d003      	beq.n	2d4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2cc:	68fb      	ldr	r3, [r7, #12]
     2ce:	68ba      	ldr	r2, [r7, #8]
     2d0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2d2:	e002      	b.n	2da <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     2d4:	68fb      	ldr	r3, [r7, #12]
     2d6:	68ba      	ldr	r2, [r7, #8]
     2d8:	615a      	str	r2, [r3, #20]
	}
}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	46bd      	mov	sp, r7
     2de:	b004      	add	sp, #16
     2e0:	bd80      	pop	{r7, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	0000024d 	.word	0x0000024d

000002e8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     2e8:	b580      	push	{r7, lr}
     2ea:	af00      	add	r7, sp, #0
	if (gpfIsr) {
     2ec:	4b04      	ldr	r3, [pc, #16]	; (300 <chip_isr+0x18>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	2b00      	cmp	r3, #0
     2f2:	d002      	beq.n	2fa <chip_isr+0x12>
		gpfIsr();
     2f4:	4b02      	ldr	r3, [pc, #8]	; (300 <chip_isr+0x18>)
     2f6:	681b      	ldr	r3, [r3, #0]
     2f8:	4798      	blx	r3
	}
}
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	46bd      	mov	sp, r7
     2fe:	bd80      	pop	{r7, pc}
     300:	200000b0 	.word	0x200000b0

00000304 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
     304:	b580      	push	{r7, lr}
     306:	b082      	sub	sp, #8
     308:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
     30a:	1d3b      	adds	r3, r7, #4
     30c:	0018      	movs	r0, r3
     30e:	4b0c      	ldr	r3, [pc, #48]	; (340 <init_chip_pins+0x3c>)
     310:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     312:	1d3b      	adds	r3, r7, #4
     314:	2201      	movs	r2, #1
     316:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     318:	1d3b      	adds	r3, r7, #4
     31a:	0019      	movs	r1, r3
     31c:	201b      	movs	r0, #27
     31e:	4b09      	ldr	r3, [pc, #36]	; (344 <init_chip_pins+0x40>)
     320:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     322:	1d3b      	adds	r3, r7, #4
     324:	0019      	movs	r1, r3
     326:	201c      	movs	r0, #28
     328:	4b06      	ldr	r3, [pc, #24]	; (344 <init_chip_pins+0x40>)
     32a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     32c:	1d3b      	adds	r3, r7, #4
     32e:	0019      	movs	r1, r3
     330:	2028      	movs	r0, #40	; 0x28
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <init_chip_pins+0x40>)
     334:	4798      	blx	r3
}
     336:	46c0      	nop			; (mov r8, r8)
     338:	46bd      	mov	sp, r7
     33a:	b002      	add	sp, #8
     33c:	bd80      	pop	{r7, pc}
     33e:	46c0      	nop			; (mov r8, r8)
     340:	00000271 	.word	0x00000271
     344:	0000691d 	.word	0x0000691d

00000348 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
     34c:	4b0c      	ldr	r3, [pc, #48]	; (380 <nm_bsp_init+0x38>)
     34e:	2200      	movs	r2, #0
     350:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
     352:	4b0c      	ldr	r3, [pc, #48]	; (384 <nm_bsp_init+0x3c>)
     354:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     356:	4b0c      	ldr	r3, [pc, #48]	; (388 <nm_bsp_init+0x40>)
     358:	681b      	ldr	r3, [r3, #0]
     35a:	2201      	movs	r2, #1
     35c:	4013      	ands	r3, r2
     35e:	d004      	beq.n	36a <nm_bsp_init+0x22>
     360:	4b09      	ldr	r3, [pc, #36]	; (388 <nm_bsp_init+0x40>)
     362:	681b      	ldr	r3, [r3, #0]
     364:	2202      	movs	r2, #2
     366:	4013      	ands	r3, r2
     368:	d101      	bne.n	36e <nm_bsp_init+0x26>
	    delay_init();
     36a:	4b08      	ldr	r3, [pc, #32]	; (38c <nm_bsp_init+0x44>)
     36c:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     36e:	4b08      	ldr	r3, [pc, #32]	; (390 <nm_bsp_init+0x48>)
     370:	4798      	blx	r3

	system_interrupt_enable_global();
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <nm_bsp_init+0x4c>)
     374:	4798      	blx	r3

	return M2M_SUCCESS;
     376:	2300      	movs	r3, #0
}
     378:	0018      	movs	r0, r3
     37a:	46bd      	mov	sp, r7
     37c:	bd80      	pop	{r7, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	200000b0 	.word	0x200000b0
     384:	00000305 	.word	0x00000305
     388:	e000e010 	.word	0xe000e010
     38c:	00000149 	.word	0x00000149
     390:	00000399 	.word	0x00000399
     394:	00000231 	.word	0x00000231

00000398 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     398:	b580      	push	{r7, lr}
     39a:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
     39c:	2100      	movs	r1, #0
     39e:	201c      	movs	r0, #28
     3a0:	4b0c      	ldr	r3, [pc, #48]	; (3d4 <nm_bsp_reset+0x3c>)
     3a2:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
     3a4:	2100      	movs	r1, #0
     3a6:	201b      	movs	r0, #27
     3a8:	4b0a      	ldr	r3, [pc, #40]	; (3d4 <nm_bsp_reset+0x3c>)
     3aa:	4798      	blx	r3
	nm_bsp_sleep(100);
     3ac:	2064      	movs	r0, #100	; 0x64
     3ae:	4b0a      	ldr	r3, [pc, #40]	; (3d8 <nm_bsp_reset+0x40>)
     3b0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
     3b2:	2101      	movs	r1, #1
     3b4:	201c      	movs	r0, #28
     3b6:	4b07      	ldr	r3, [pc, #28]	; (3d4 <nm_bsp_reset+0x3c>)
     3b8:	4798      	blx	r3
	nm_bsp_sleep(10);
     3ba:	200a      	movs	r0, #10
     3bc:	4b06      	ldr	r3, [pc, #24]	; (3d8 <nm_bsp_reset+0x40>)
     3be:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
     3c0:	2101      	movs	r1, #1
     3c2:	201b      	movs	r0, #27
     3c4:	4b03      	ldr	r3, [pc, #12]	; (3d4 <nm_bsp_reset+0x3c>)
     3c6:	4798      	blx	r3
	nm_bsp_sleep(10);
     3c8:	200a      	movs	r0, #10
     3ca:	4b03      	ldr	r3, [pc, #12]	; (3d8 <nm_bsp_reset+0x40>)
     3cc:	4798      	blx	r3
}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	46bd      	mov	sp, r7
     3d2:	bd80      	pop	{r7, pc}
     3d4:	00000295 	.word	0x00000295
     3d8:	000003dd 	.word	0x000003dd

000003dc <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     3dc:	b580      	push	{r7, lr}
     3de:	b082      	sub	sp, #8
     3e0:	af00      	add	r7, sp, #0
     3e2:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     3e4:	e002      	b.n	3ec <nm_bsp_sleep+0x10>
		delay_ms(1);
     3e6:	2001      	movs	r0, #1
     3e8:	4b05      	ldr	r3, [pc, #20]	; (400 <nm_bsp_sleep+0x24>)
     3ea:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     3ec:	687b      	ldr	r3, [r7, #4]
     3ee:	1e5a      	subs	r2, r3, #1
     3f0:	607a      	str	r2, [r7, #4]
     3f2:	2b00      	cmp	r3, #0
     3f4:	d1f7      	bne.n	3e6 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	46bd      	mov	sp, r7
     3fa:	b002      	add	sp, #8
     3fc:	bd80      	pop	{r7, pc}
     3fe:	46c0      	nop			; (mov r8, r8)
     400:	000001a1 	.word	0x000001a1

00000404 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     404:	b580      	push	{r7, lr}
     406:	b086      	sub	sp, #24
     408:	af00      	add	r7, sp, #0
     40a:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     40c:	4b15      	ldr	r3, [pc, #84]	; (464 <nm_bsp_register_isr+0x60>)
     40e:	687a      	ldr	r2, [r7, #4]
     410:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     412:	230c      	movs	r3, #12
     414:	18fb      	adds	r3, r7, r3
     416:	0018      	movs	r0, r3
     418:	4b13      	ldr	r3, [pc, #76]	; (468 <nm_bsp_register_isr+0x64>)
     41a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     41c:	230c      	movs	r3, #12
     41e:	18fb      	adds	r3, r7, r3
     420:	2229      	movs	r2, #41	; 0x29
     422:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     424:	230c      	movs	r3, #12
     426:	18fb      	adds	r3, r7, r3
     428:	2200      	movs	r2, #0
     42a:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     42c:	230c      	movs	r3, #12
     42e:	18fb      	adds	r3, r7, r3
     430:	2201      	movs	r2, #1
     432:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     434:	230c      	movs	r3, #12
     436:	18fb      	adds	r3, r7, r3
     438:	2202      	movs	r2, #2
     43a:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     43c:	230c      	movs	r3, #12
     43e:	18fb      	adds	r3, r7, r3
     440:	0019      	movs	r1, r3
     442:	2009      	movs	r0, #9
     444:	4b09      	ldr	r3, [pc, #36]	; (46c <nm_bsp_register_isr+0x68>)
     446:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     448:	4b09      	ldr	r3, [pc, #36]	; (470 <nm_bsp_register_isr+0x6c>)
     44a:	2200      	movs	r2, #0
     44c:	2109      	movs	r1, #9
     44e:	0018      	movs	r0, r3
     450:	4b08      	ldr	r3, [pc, #32]	; (474 <nm_bsp_register_isr+0x70>)
     452:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     454:	2100      	movs	r1, #0
     456:	2009      	movs	r0, #9
     458:	4b07      	ldr	r3, [pc, #28]	; (478 <nm_bsp_register_isr+0x74>)
     45a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     45c:	46c0      	nop			; (mov r8, r8)
     45e:	46bd      	mov	sp, r7
     460:	b006      	add	sp, #24
     462:	bd80      	pop	{r7, pc}
     464:	200000b0 	.word	0x200000b0
     468:	000067c5 	.word	0x000067c5
     46c:	000067f9 	.word	0x000067f9
     470:	000002e9 	.word	0x000002e9
     474:	000063c5 	.word	0x000063c5
     478:	00006429 	.word	0x00006429

0000047c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     47c:	b580      	push	{r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af00      	add	r7, sp, #0
     482:	0002      	movs	r2, r0
     484:	1dfb      	adds	r3, r7, #7
     486:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     488:	1dfb      	adds	r3, r7, #7
     48a:	781b      	ldrb	r3, [r3, #0]
     48c:	2b00      	cmp	r3, #0
     48e:	d004      	beq.n	49a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     490:	2100      	movs	r1, #0
     492:	2009      	movs	r0, #9
     494:	4b05      	ldr	r3, [pc, #20]	; (4ac <nm_bsp_interrupt_ctrl+0x30>)
     496:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     498:	e003      	b.n	4a2 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     49a:	2100      	movs	r1, #0
     49c:	2009      	movs	r0, #9
     49e:	4b04      	ldr	r3, [pc, #16]	; (4b0 <nm_bsp_interrupt_ctrl+0x34>)
     4a0:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	46bd      	mov	sp, r7
     4a6:	b002      	add	sp, #8
     4a8:	bd80      	pop	{r7, pc}
     4aa:	46c0      	nop			; (mov r8, r8)
     4ac:	00006429 	.word	0x00006429
     4b0:	00006471 	.word	0x00006471

000004b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     4b4:	b580      	push	{r7, lr}
     4b6:	b084      	sub	sp, #16
     4b8:	af00      	add	r7, sp, #0
     4ba:	0002      	movs	r2, r0
     4bc:	1dfb      	adds	r3, r7, #7
     4be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4c0:	230f      	movs	r3, #15
     4c2:	18fb      	adds	r3, r7, r3
     4c4:	1dfa      	adds	r2, r7, #7
     4c6:	7812      	ldrb	r2, [r2, #0]
     4c8:	09d2      	lsrs	r2, r2, #7
     4ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4cc:	230e      	movs	r3, #14
     4ce:	18fb      	adds	r3, r7, r3
     4d0:	1dfa      	adds	r2, r7, #7
     4d2:	7812      	ldrb	r2, [r2, #0]
     4d4:	0952      	lsrs	r2, r2, #5
     4d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     4d8:	4b0d      	ldr	r3, [pc, #52]	; (510 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     4da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     4dc:	230f      	movs	r3, #15
     4de:	18fb      	adds	r3, r7, r3
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	2b00      	cmp	r3, #0
     4e4:	d10f      	bne.n	506 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     4e6:	230f      	movs	r3, #15
     4e8:	18fb      	adds	r3, r7, r3
     4ea:	781b      	ldrb	r3, [r3, #0]
     4ec:	009b      	lsls	r3, r3, #2
     4ee:	2210      	movs	r2, #16
     4f0:	4694      	mov	ip, r2
     4f2:	44bc      	add	ip, r7
     4f4:	4463      	add	r3, ip
     4f6:	3b08      	subs	r3, #8
     4f8:	681a      	ldr	r2, [r3, #0]
     4fa:	230e      	movs	r3, #14
     4fc:	18fb      	adds	r3, r7, r3
     4fe:	781b      	ldrb	r3, [r3, #0]
     500:	01db      	lsls	r3, r3, #7
     502:	18d3      	adds	r3, r2, r3
     504:	e000      	b.n	508 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     506:	2300      	movs	r3, #0
	}
}
     508:	0018      	movs	r0, r3
     50a:	46bd      	mov	sp, r7
     50c:	b004      	add	sp, #16
     50e:	bd80      	pop	{r7, pc}
     510:	41004400 	.word	0x41004400

00000514 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     514:	b580      	push	{r7, lr}
     516:	b082      	sub	sp, #8
     518:	af00      	add	r7, sp, #0
     51a:	0002      	movs	r2, r0
     51c:	1dfb      	adds	r3, r7, #7
     51e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     520:	4b06      	ldr	r3, [pc, #24]	; (53c <system_interrupt_enable+0x28>)
     522:	1dfa      	adds	r2, r7, #7
     524:	7812      	ldrb	r2, [r2, #0]
     526:	0011      	movs	r1, r2
     528:	221f      	movs	r2, #31
     52a:	400a      	ands	r2, r1
     52c:	2101      	movs	r1, #1
     52e:	4091      	lsls	r1, r2
     530:	000a      	movs	r2, r1
     532:	601a      	str	r2, [r3, #0]
}
     534:	46c0      	nop			; (mov r8, r8)
     536:	46bd      	mov	sp, r7
     538:	b002      	add	sp, #8
     53a:	bd80      	pop	{r7, pc}
     53c:	e000e100 	.word	0xe000e100

00000540 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     540:	b580      	push	{r7, lr}
     542:	b082      	sub	sp, #8
     544:	af00      	add	r7, sp, #0
     546:	0002      	movs	r2, r0
     548:	1dfb      	adds	r3, r7, #7
     54a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     54c:	4a07      	ldr	r2, [pc, #28]	; (56c <system_interrupt_disable+0x2c>)
     54e:	1dfb      	adds	r3, r7, #7
     550:	781b      	ldrb	r3, [r3, #0]
     552:	0019      	movs	r1, r3
     554:	231f      	movs	r3, #31
     556:	400b      	ands	r3, r1
     558:	2101      	movs	r1, #1
     55a:	4099      	lsls	r1, r3
     55c:	000b      	movs	r3, r1
     55e:	0019      	movs	r1, r3
     560:	2380      	movs	r3, #128	; 0x80
     562:	50d1      	str	r1, [r2, r3]
}
     564:	46c0      	nop			; (mov r8, r8)
     566:	46bd      	mov	sp, r7
     568:	b002      	add	sp, #8
     56a:	bd80      	pop	{r7, pc}
     56c:	e000e100 	.word	0xe000e100

00000570 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     570:	b580      	push	{r7, lr}
     572:	b082      	sub	sp, #8
     574:	af00      	add	r7, sp, #0
     576:	0002      	movs	r2, r0
     578:	1dfb      	adds	r3, r7, #7
     57a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     57c:	1dfb      	adds	r3, r7, #7
     57e:	781b      	ldrb	r3, [r3, #0]
     580:	0018      	movs	r0, r3
     582:	4b03      	ldr	r3, [pc, #12]	; (590 <port_get_group_from_gpio_pin+0x20>)
     584:	4798      	blx	r3
     586:	0003      	movs	r3, r0
}
     588:	0018      	movs	r0, r3
     58a:	46bd      	mov	sp, r7
     58c:	b002      	add	sp, #8
     58e:	bd80      	pop	{r7, pc}
     590:	000004b5 	.word	0x000004b5

00000594 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     594:	b580      	push	{r7, lr}
     596:	b082      	sub	sp, #8
     598:	af00      	add	r7, sp, #0
     59a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     59c:	687b      	ldr	r3, [r7, #4]
     59e:	2200      	movs	r2, #0
     5a0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2201      	movs	r2, #1
     5a6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	709a      	strb	r2, [r3, #2]
}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	46bd      	mov	sp, r7
     5b2:	b002      	add	sp, #8
     5b4:	bd80      	pop	{r7, pc}
     5b6:	46c0      	nop			; (mov r8, r8)

000005b8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     5b8:	b580      	push	{r7, lr}
     5ba:	b084      	sub	sp, #16
     5bc:	af00      	add	r7, sp, #0
     5be:	0002      	movs	r2, r0
     5c0:	1dfb      	adds	r3, r7, #7
     5c2:	701a      	strb	r2, [r3, #0]
     5c4:	1dbb      	adds	r3, r7, #6
     5c6:	1c0a      	adds	r2, r1, #0
     5c8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     5ca:	1dfb      	adds	r3, r7, #7
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	0018      	movs	r0, r3
     5d0:	4b0d      	ldr	r3, [pc, #52]	; (608 <port_pin_set_output_level+0x50>)
     5d2:	4798      	blx	r3
     5d4:	0003      	movs	r3, r0
     5d6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5d8:	1dfb      	adds	r3, r7, #7
     5da:	781b      	ldrb	r3, [r3, #0]
     5dc:	221f      	movs	r2, #31
     5de:	4013      	ands	r3, r2
     5e0:	2201      	movs	r2, #1
     5e2:	409a      	lsls	r2, r3
     5e4:	0013      	movs	r3, r2
     5e6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     5e8:	1dbb      	adds	r3, r7, #6
     5ea:	781b      	ldrb	r3, [r3, #0]
     5ec:	2b00      	cmp	r3, #0
     5ee:	d003      	beq.n	5f8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     5f0:	68fb      	ldr	r3, [r7, #12]
     5f2:	68ba      	ldr	r2, [r7, #8]
     5f4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     5f6:	e002      	b.n	5fe <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     5f8:	68fb      	ldr	r3, [r7, #12]
     5fa:	68ba      	ldr	r2, [r7, #8]
     5fc:	615a      	str	r2, [r3, #20]
	}
}
     5fe:	46c0      	nop			; (mov r8, r8)
     600:	46bd      	mov	sp, r7
     602:	b004      	add	sp, #16
     604:	bd80      	pop	{r7, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000571 	.word	0x00000571

0000060c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     60c:	b580      	push	{r7, lr}
     60e:	b084      	sub	sp, #16
     610:	af00      	add	r7, sp, #0
     612:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     614:	687b      	ldr	r3, [r7, #4]
     616:	681b      	ldr	r3, [r3, #0]
     618:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     61a:	68fb      	ldr	r3, [r7, #12]
     61c:	69db      	ldr	r3, [r3, #28]
     61e:	1e5a      	subs	r2, r3, #1
     620:	4193      	sbcs	r3, r2
     622:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     624:	0018      	movs	r0, r3
     626:	46bd      	mov	sp, r7
     628:	b004      	add	sp, #16
     62a:	bd80      	pop	{r7, pc}

0000062c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     62c:	b580      	push	{r7, lr}
     62e:	b082      	sub	sp, #8
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     634:	687b      	ldr	r3, [r7, #4]
     636:	2201      	movs	r2, #1
     638:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     63a:	687b      	ldr	r3, [r7, #4]
     63c:	2200      	movs	r2, #0
     63e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     640:	687b      	ldr	r3, [r7, #4]
     642:	2200      	movs	r2, #0
     644:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     646:	687b      	ldr	r3, [r7, #4]
     648:	22c0      	movs	r2, #192	; 0xc0
     64a:	0392      	lsls	r2, r2, #14
     64c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     64e:	687b      	ldr	r3, [r7, #4]
     650:	2200      	movs	r2, #0
     652:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     654:	687b      	ldr	r3, [r7, #4]
     656:	2200      	movs	r2, #0
     658:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     65a:	687b      	ldr	r3, [r7, #4]
     65c:	2201      	movs	r2, #1
     65e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     660:	687b      	ldr	r3, [r7, #4]
     662:	2201      	movs	r2, #1
     664:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     666:	687b      	ldr	r3, [r7, #4]
     668:	2200      	movs	r2, #0
     66a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	2224      	movs	r2, #36	; 0x24
     670:	2100      	movs	r1, #0
     672:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     674:	687b      	ldr	r3, [r7, #4]
     676:	3318      	adds	r3, #24
     678:	220c      	movs	r2, #12
     67a:	2100      	movs	r1, #0
     67c:	0018      	movs	r0, r3
     67e:	4b0a      	ldr	r3, [pc, #40]	; (6a8 <spi_get_config_defaults+0x7c>)
     680:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     682:	687b      	ldr	r3, [r7, #4]
     684:	4a09      	ldr	r2, [pc, #36]	; (6ac <spi_get_config_defaults+0x80>)
     686:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     688:	687b      	ldr	r3, [r7, #4]
     68a:	2200      	movs	r2, #0
     68c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     68e:	687b      	ldr	r3, [r7, #4]
     690:	2200      	movs	r2, #0
     692:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     694:	687b      	ldr	r3, [r7, #4]
     696:	2200      	movs	r2, #0
     698:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	2200      	movs	r2, #0
     69e:	635a      	str	r2, [r3, #52]	; 0x34

};
     6a0:	46c0      	nop			; (mov r8, r8)
     6a2:	46bd      	mov	sp, r7
     6a4:	b002      	add	sp, #8
     6a6:	bd80      	pop	{r7, pc}
     6a8:	000107bf 	.word	0x000107bf
     6ac:	000186a0 	.word	0x000186a0

000006b0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     6b8:	687b      	ldr	r3, [r7, #4]
     6ba:	220a      	movs	r2, #10
     6bc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     6be:	687b      	ldr	r3, [r7, #4]
     6c0:	2200      	movs	r2, #0
     6c2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     6c4:	687b      	ldr	r3, [r7, #4]
     6c6:	2200      	movs	r2, #0
     6c8:	709a      	strb	r2, [r3, #2]
}
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	46bd      	mov	sp, r7
     6ce:	b002      	add	sp, #8
     6d0:	bd80      	pop	{r7, pc}
     6d2:	46c0      	nop			; (mov r8, r8)

000006d4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     6d4:	b580      	push	{r7, lr}
     6d6:	b084      	sub	sp, #16
     6d8:	af00      	add	r7, sp, #0
     6da:	6078      	str	r0, [r7, #4]
     6dc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     6de:	683b      	ldr	r3, [r7, #0]
     6e0:	781a      	ldrb	r2, [r3, #0]
     6e2:	687b      	ldr	r3, [r7, #4]
     6e4:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     6e6:	683b      	ldr	r3, [r7, #0]
     6e8:	785a      	ldrb	r2, [r3, #1]
     6ea:	687b      	ldr	r3, [r7, #4]
     6ec:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     6ee:	683b      	ldr	r3, [r7, #0]
     6f0:	789a      	ldrb	r2, [r3, #2]
     6f2:	687b      	ldr	r3, [r7, #4]
     6f4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     6f6:	230c      	movs	r3, #12
     6f8:	18fb      	adds	r3, r7, r3
     6fa:	0018      	movs	r0, r3
     6fc:	4b0b      	ldr	r3, [pc, #44]	; (72c <spi_attach_slave+0x58>)
     6fe:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     700:	230c      	movs	r3, #12
     702:	18fb      	adds	r3, r7, r3
     704:	2201      	movs	r2, #1
     706:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     708:	687b      	ldr	r3, [r7, #4]
     70a:	781b      	ldrb	r3, [r3, #0]
     70c:	220c      	movs	r2, #12
     70e:	18ba      	adds	r2, r7, r2
     710:	0011      	movs	r1, r2
     712:	0018      	movs	r0, r3
     714:	4b06      	ldr	r3, [pc, #24]	; (730 <spi_attach_slave+0x5c>)
     716:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     718:	687b      	ldr	r3, [r7, #4]
     71a:	781b      	ldrb	r3, [r3, #0]
     71c:	2101      	movs	r1, #1
     71e:	0018      	movs	r0, r3
     720:	4b04      	ldr	r3, [pc, #16]	; (734 <spi_attach_slave+0x60>)
     722:	4798      	blx	r3
}
     724:	46c0      	nop			; (mov r8, r8)
     726:	46bd      	mov	sp, r7
     728:	b004      	add	sp, #16
     72a:	bd80      	pop	{r7, pc}
     72c:	00000595 	.word	0x00000595
     730:	0000691d 	.word	0x0000691d
     734:	000005b9 	.word	0x000005b9

00000738 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     738:	b580      	push	{r7, lr}
     73a:	b084      	sub	sp, #16
     73c:	af00      	add	r7, sp, #0
     73e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     740:	687b      	ldr	r3, [r7, #4]
     742:	681b      	ldr	r3, [r3, #0]
     744:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     746:	687b      	ldr	r3, [r7, #4]
     748:	681b      	ldr	r3, [r3, #0]
     74a:	0018      	movs	r0, r3
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <spi_enable+0x44>)
     74e:	4798      	blx	r3
     750:	0003      	movs	r3, r0
     752:	0018      	movs	r0, r3
     754:	4b0a      	ldr	r3, [pc, #40]	; (780 <spi_enable+0x48>)
     756:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     758:	46c0      	nop			; (mov r8, r8)
     75a:	687b      	ldr	r3, [r7, #4]
     75c:	0018      	movs	r0, r3
     75e:	4b09      	ldr	r3, [pc, #36]	; (784 <spi_enable+0x4c>)
     760:	4798      	blx	r3
     762:	1e03      	subs	r3, r0, #0
     764:	d1f9      	bne.n	75a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     766:	68fb      	ldr	r3, [r7, #12]
     768:	681b      	ldr	r3, [r3, #0]
     76a:	2202      	movs	r2, #2
     76c:	431a      	orrs	r2, r3
     76e:	68fb      	ldr	r3, [r7, #12]
     770:	601a      	str	r2, [r3, #0]
}
     772:	46c0      	nop			; (mov r8, r8)
     774:	46bd      	mov	sp, r7
     776:	b004      	add	sp, #16
     778:	bd80      	pop	{r7, pc}
     77a:	46c0      	nop			; (mov r8, r8)
     77c:	00008149 	.word	0x00008149
     780:	00000515 	.word	0x00000515
     784:	0000060d 	.word	0x0000060d

00000788 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
     788:	b580      	push	{r7, lr}
     78a:	b084      	sub	sp, #16
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     790:	687b      	ldr	r3, [r7, #4]
     792:	681b      	ldr	r3, [r3, #0]
     794:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     796:	687b      	ldr	r3, [r7, #4]
     798:	681b      	ldr	r3, [r3, #0]
     79a:	0018      	movs	r0, r3
     79c:	4b0e      	ldr	r3, [pc, #56]	; (7d8 <spi_disable+0x50>)
     79e:	4798      	blx	r3
     7a0:	0003      	movs	r3, r0
     7a2:	0018      	movs	r0, r3
     7a4:	4b0d      	ldr	r3, [pc, #52]	; (7dc <spi_disable+0x54>)
     7a6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     7a8:	46c0      	nop			; (mov r8, r8)
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	0018      	movs	r0, r3
     7ae:	4b0c      	ldr	r3, [pc, #48]	; (7e0 <spi_disable+0x58>)
     7b0:	4798      	blx	r3
     7b2:	1e03      	subs	r3, r0, #0
     7b4:	d1f9      	bne.n	7aa <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     7b6:	68fb      	ldr	r3, [r7, #12]
     7b8:	228f      	movs	r2, #143	; 0x8f
     7ba:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	228f      	movs	r2, #143	; 0x8f
     7c0:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     7c2:	68fb      	ldr	r3, [r7, #12]
     7c4:	681b      	ldr	r3, [r3, #0]
     7c6:	2202      	movs	r2, #2
     7c8:	4393      	bics	r3, r2
     7ca:	001a      	movs	r2, r3
     7cc:	68fb      	ldr	r3, [r7, #12]
     7ce:	601a      	str	r2, [r3, #0]
}
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	b004      	add	sp, #16
     7d6:	bd80      	pop	{r7, pc}
     7d8:	00008149 	.word	0x00008149
     7dc:	00000541 	.word	0x00000541
     7e0:	0000060d 	.word	0x0000060d

000007e4 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     7e4:	b580      	push	{r7, lr}
     7e6:	b084      	sub	sp, #16
     7e8:	af00      	add	r7, sp, #0
     7ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7ec:	687b      	ldr	r3, [r7, #4]
     7ee:	681b      	ldr	r3, [r3, #0]
     7f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	7e1b      	ldrb	r3, [r3, #24]
     7f6:	b2db      	uxtb	r3, r3
     7f8:	001a      	movs	r2, r3
     7fa:	2302      	movs	r3, #2
     7fc:	4013      	ands	r3, r2
     7fe:	1e5a      	subs	r2, r3, #1
     800:	4193      	sbcs	r3, r2
     802:	b2db      	uxtb	r3, r3
}
     804:	0018      	movs	r0, r3
     806:	46bd      	mov	sp, r7
     808:	b004      	add	sp, #16
     80a:	bd80      	pop	{r7, pc}

0000080c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     80c:	b580      	push	{r7, lr}
     80e:	b084      	sub	sp, #16
     810:	af00      	add	r7, sp, #0
     812:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     814:	687b      	ldr	r3, [r7, #4]
     816:	681b      	ldr	r3, [r3, #0]
     818:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	7e1b      	ldrb	r3, [r3, #24]
     81e:	b2db      	uxtb	r3, r3
     820:	001a      	movs	r2, r3
     822:	2301      	movs	r3, #1
     824:	4013      	ands	r3, r2
     826:	1e5a      	subs	r2, r3, #1
     828:	4193      	sbcs	r3, r2
     82a:	b2db      	uxtb	r3, r3
}
     82c:	0018      	movs	r0, r3
     82e:	46bd      	mov	sp, r7
     830:	b004      	add	sp, #16
     832:	bd80      	pop	{r7, pc}

00000834 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     834:	b580      	push	{r7, lr}
     836:	b084      	sub	sp, #16
     838:	af00      	add	r7, sp, #0
     83a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     83c:	687b      	ldr	r3, [r7, #4]
     83e:	681b      	ldr	r3, [r3, #0]
     840:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     842:	68fb      	ldr	r3, [r7, #12]
     844:	7e1b      	ldrb	r3, [r3, #24]
     846:	b2db      	uxtb	r3, r3
     848:	001a      	movs	r2, r3
     84a:	2304      	movs	r3, #4
     84c:	4013      	ands	r3, r2
     84e:	1e5a      	subs	r2, r3, #1
     850:	4193      	sbcs	r3, r2
     852:	b2db      	uxtb	r3, r3
}
     854:	0018      	movs	r0, r3
     856:	46bd      	mov	sp, r7
     858:	b004      	add	sp, #16
     85a:	bd80      	pop	{r7, pc}

0000085c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     85c:	b580      	push	{r7, lr}
     85e:	b084      	sub	sp, #16
     860:	af00      	add	r7, sp, #0
     862:	6078      	str	r0, [r7, #4]
     864:	000a      	movs	r2, r1
     866:	1cbb      	adds	r3, r7, #2
     868:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     86a:	687b      	ldr	r3, [r7, #4]
     86c:	681b      	ldr	r3, [r3, #0]
     86e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     870:	687b      	ldr	r3, [r7, #4]
     872:	0018      	movs	r0, r3
     874:	4b0a      	ldr	r3, [pc, #40]	; (8a0 <spi_write+0x44>)
     876:	4798      	blx	r3
     878:	0003      	movs	r3, r0
     87a:	001a      	movs	r2, r3
     87c:	2301      	movs	r3, #1
     87e:	4053      	eors	r3, r2
     880:	b2db      	uxtb	r3, r3
     882:	2b00      	cmp	r3, #0
     884:	d001      	beq.n	88a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     886:	2305      	movs	r3, #5
     888:	e006      	b.n	898 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     88a:	1cbb      	adds	r3, r7, #2
     88c:	881b      	ldrh	r3, [r3, #0]
     88e:	05db      	lsls	r3, r3, #23
     890:	0dda      	lsrs	r2, r3, #23
     892:	68fb      	ldr	r3, [r7, #12]
     894:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     896:	2300      	movs	r3, #0
}
     898:	0018      	movs	r0, r3
     89a:	46bd      	mov	sp, r7
     89c:	b004      	add	sp, #16
     89e:	bd80      	pop	{r7, pc}
     8a0:	0000080d 	.word	0x0000080d

000008a4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b084      	sub	sp, #16
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8ae:	687b      	ldr	r3, [r7, #4]
     8b0:	681b      	ldr	r3, [r3, #0]
     8b2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	0018      	movs	r0, r3
     8b8:	4b1b      	ldr	r3, [pc, #108]	; (928 <spi_read+0x84>)
     8ba:	4798      	blx	r3
     8bc:	0003      	movs	r3, r0
     8be:	001a      	movs	r2, r3
     8c0:	2301      	movs	r3, #1
     8c2:	4053      	eors	r3, r2
     8c4:	b2db      	uxtb	r3, r3
     8c6:	2b00      	cmp	r3, #0
     8c8:	d001      	beq.n	8ce <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     8ca:	2310      	movs	r3, #16
     8cc:	e027      	b.n	91e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     8ce:	230f      	movs	r3, #15
     8d0:	18fb      	adds	r3, r7, r3
     8d2:	2200      	movs	r2, #0
     8d4:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     8d6:	68bb      	ldr	r3, [r7, #8]
     8d8:	8b5b      	ldrh	r3, [r3, #26]
     8da:	b29b      	uxth	r3, r3
     8dc:	001a      	movs	r2, r3
     8de:	2304      	movs	r3, #4
     8e0:	4013      	ands	r3, r2
     8e2:	d006      	beq.n	8f2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     8e4:	230f      	movs	r3, #15
     8e6:	18fb      	adds	r3, r7, r3
     8e8:	221e      	movs	r2, #30
     8ea:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8ec:	68bb      	ldr	r3, [r7, #8]
     8ee:	2204      	movs	r2, #4
     8f0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8f2:	687b      	ldr	r3, [r7, #4]
     8f4:	799b      	ldrb	r3, [r3, #6]
     8f6:	2b01      	cmp	r3, #1
     8f8:	d108      	bne.n	90c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8fa:	68bb      	ldr	r3, [r7, #8]
     8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     8fe:	b29b      	uxth	r3, r3
     900:	05db      	lsls	r3, r3, #23
     902:	0ddb      	lsrs	r3, r3, #23
     904:	b29a      	uxth	r2, r3
     906:	683b      	ldr	r3, [r7, #0]
     908:	801a      	strh	r2, [r3, #0]
     90a:	e005      	b.n	918 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     90c:	68bb      	ldr	r3, [r7, #8]
     90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     910:	b2db      	uxtb	r3, r3
     912:	b29a      	uxth	r2, r3
     914:	683b      	ldr	r3, [r7, #0]
     916:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     918:	230f      	movs	r3, #15
     91a:	18fb      	adds	r3, r7, r3
     91c:	781b      	ldrb	r3, [r3, #0]
}
     91e:	0018      	movs	r0, r3
     920:	46bd      	mov	sp, r7
     922:	b004      	add	sp, #16
     924:	bd80      	pop	{r7, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	00000835 	.word	0x00000835

0000092c <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     92c:	b580      	push	{r7, lr}
     92e:	b086      	sub	sp, #24
     930:	af00      	add	r7, sp, #0
     932:	60f8      	str	r0, [r7, #12]
     934:	60b9      	str	r1, [r7, #8]
     936:	1dbb      	adds	r3, r7, #6
     938:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     93a:	2313      	movs	r3, #19
     93c:	18fb      	adds	r3, r7, r3
     93e:	2200      	movs	r2, #0
     940:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     942:	2317      	movs	r3, #23
     944:	18fb      	adds	r3, r7, r3
     946:	2200      	movs	r2, #0
     948:	701a      	strb	r2, [r3, #0]
     94a:	2316      	movs	r3, #22
     94c:	18fb      	adds	r3, r7, r3
     94e:	2200      	movs	r2, #0
     950:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     952:	2314      	movs	r3, #20
     954:	18fb      	adds	r3, r7, r3
     956:	2200      	movs	r2, #0
     958:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     95a:	2310      	movs	r3, #16
     95c:	18fb      	adds	r3, r7, r3
     95e:	2200      	movs	r2, #0
     960:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     962:	68fb      	ldr	r3, [r7, #12]
     964:	2b00      	cmp	r3, #0
     966:	d107      	bne.n	978 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     968:	2313      	movs	r3, #19
     96a:	18fb      	adds	r3, r7, r3
     96c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     96e:	2317      	movs	r3, #23
     970:	18fb      	adds	r3, r7, r3
     972:	2201      	movs	r2, #1
     974:	701a      	strb	r2, [r3, #0]
     976:	e00d      	b.n	994 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     978:	68bb      	ldr	r3, [r7, #8]
     97a:	2b00      	cmp	r3, #0
     97c:	d107      	bne.n	98e <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     97e:	2313      	movs	r3, #19
     980:	18fb      	adds	r3, r7, r3
     982:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     984:	2316      	movs	r3, #22
     986:	18fb      	adds	r3, r7, r3
     988:	2201      	movs	r2, #1
     98a:	701a      	strb	r2, [r3, #0]
     98c:	e002      	b.n	994 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     98e:	2306      	movs	r3, #6
     990:	425b      	negs	r3, r3
     992:	e06a      	b.n	a6a <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
     994:	4937      	ldr	r1, [pc, #220]	; (a74 <spi_rw+0x148>)
     996:	4b38      	ldr	r3, [pc, #224]	; (a78 <spi_rw+0x14c>)
     998:	2201      	movs	r2, #1
     99a:	0018      	movs	r0, r3
     99c:	4b37      	ldr	r3, [pc, #220]	; (a7c <spi_rw+0x150>)
     99e:	4798      	blx	r3

	while (u16Sz) {
     9a0:	e04c      	b.n	a3c <spi_rw+0x110>
		txd_data = *pu8Mosi;
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	781a      	ldrb	r2, [r3, #0]
     9a6:	2314      	movs	r3, #20
     9a8:	18fb      	adds	r3, r7, r3
     9aa:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     9ac:	46c0      	nop			; (mov r8, r8)
     9ae:	4b32      	ldr	r3, [pc, #200]	; (a78 <spi_rw+0x14c>)
     9b0:	0018      	movs	r0, r3
     9b2:	4b33      	ldr	r3, [pc, #204]	; (a80 <spi_rw+0x154>)
     9b4:	4798      	blx	r3
     9b6:	0003      	movs	r3, r0
     9b8:	001a      	movs	r2, r3
     9ba:	2301      	movs	r3, #1
     9bc:	4053      	eors	r3, r2
     9be:	b2db      	uxtb	r3, r3
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1f4      	bne.n	9ae <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     9c4:	46c0      	nop			; (mov r8, r8)
     9c6:	2314      	movs	r3, #20
     9c8:	18fb      	adds	r3, r7, r3
     9ca:	881a      	ldrh	r2, [r3, #0]
     9cc:	4b2a      	ldr	r3, [pc, #168]	; (a78 <spi_rw+0x14c>)
     9ce:	0011      	movs	r1, r2
     9d0:	0018      	movs	r0, r3
     9d2:	4b2c      	ldr	r3, [pc, #176]	; (a84 <spi_rw+0x158>)
     9d4:	4798      	blx	r3
     9d6:	1e03      	subs	r3, r0, #0
     9d8:	d1f5      	bne.n	9c6 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	4b26      	ldr	r3, [pc, #152]	; (a78 <spi_rw+0x14c>)
     9de:	0018      	movs	r0, r3
     9e0:	4b29      	ldr	r3, [pc, #164]	; (a88 <spi_rw+0x15c>)
     9e2:	4798      	blx	r3
     9e4:	0003      	movs	r3, r0
     9e6:	001a      	movs	r2, r3
     9e8:	2301      	movs	r3, #1
     9ea:	4053      	eors	r3, r2
     9ec:	b2db      	uxtb	r3, r3
     9ee:	2b00      	cmp	r3, #0
     9f0:	d1f4      	bne.n	9dc <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     9f2:	46c0      	nop			; (mov r8, r8)
     9f4:	2310      	movs	r3, #16
     9f6:	18fa      	adds	r2, r7, r3
     9f8:	4b1f      	ldr	r3, [pc, #124]	; (a78 <spi_rw+0x14c>)
     9fa:	0011      	movs	r1, r2
     9fc:	0018      	movs	r0, r3
     9fe:	4b23      	ldr	r3, [pc, #140]	; (a8c <spi_rw+0x160>)
     a00:	4798      	blx	r3
     a02:	1e03      	subs	r3, r0, #0
     a04:	d1f6      	bne.n	9f4 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     a06:	2310      	movs	r3, #16
     a08:	18fb      	adds	r3, r7, r3
     a0a:	881b      	ldrh	r3, [r3, #0]
     a0c:	b2da      	uxtb	r2, r3
     a0e:	68bb      	ldr	r3, [r7, #8]
     a10:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     a12:	1dbb      	adds	r3, r7, #6
     a14:	881a      	ldrh	r2, [r3, #0]
     a16:	1dbb      	adds	r3, r7, #6
     a18:	3a01      	subs	r2, #1
     a1a:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     a1c:	2316      	movs	r3, #22
     a1e:	18fb      	adds	r3, r7, r3
     a20:	781b      	ldrb	r3, [r3, #0]
     a22:	2b00      	cmp	r3, #0
     a24:	d102      	bne.n	a2c <spi_rw+0x100>
			pu8Miso++;
     a26:	68bb      	ldr	r3, [r7, #8]
     a28:	3301      	adds	r3, #1
     a2a:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     a2c:	2317      	movs	r3, #23
     a2e:	18fb      	adds	r3, r7, r3
     a30:	781b      	ldrb	r3, [r3, #0]
     a32:	2b00      	cmp	r3, #0
     a34:	d102      	bne.n	a3c <spi_rw+0x110>
			pu8Mosi++;
     a36:	68fb      	ldr	r3, [r7, #12]
     a38:	3301      	adds	r3, #1
     a3a:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     a3c:	1dbb      	adds	r3, r7, #6
     a3e:	881b      	ldrh	r3, [r3, #0]
     a40:	2b00      	cmp	r3, #0
     a42:	d1ae      	bne.n	9a2 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     a44:	46c0      	nop			; (mov r8, r8)
     a46:	4b0c      	ldr	r3, [pc, #48]	; (a78 <spi_rw+0x14c>)
     a48:	0018      	movs	r0, r3
     a4a:	4b11      	ldr	r3, [pc, #68]	; (a90 <spi_rw+0x164>)
     a4c:	4798      	blx	r3
     a4e:	0003      	movs	r3, r0
     a50:	001a      	movs	r2, r3
     a52:	2301      	movs	r3, #1
     a54:	4053      	eors	r3, r2
     a56:	b2db      	uxtb	r3, r3
     a58:	2b00      	cmp	r3, #0
     a5a:	d1f4      	bne.n	a46 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
     a5c:	4905      	ldr	r1, [pc, #20]	; (a74 <spi_rw+0x148>)
     a5e:	4b06      	ldr	r3, [pc, #24]	; (a78 <spi_rw+0x14c>)
     a60:	2200      	movs	r2, #0
     a62:	0018      	movs	r0, r3
     a64:	4b05      	ldr	r3, [pc, #20]	; (a7c <spi_rw+0x150>)
     a66:	4798      	blx	r3

	return M2M_SUCCESS;
     a68:	2300      	movs	r3, #0
}
     a6a:	0018      	movs	r0, r3
     a6c:	46bd      	mov	sp, r7
     a6e:	b006      	add	sp, #24
     a70:	bd80      	pop	{r7, pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	2000443c 	.word	0x2000443c
     a78:	20004440 	.word	0x20004440
     a7c:	00008879 	.word	0x00008879
     a80:	0000080d 	.word	0x0000080d
     a84:	0000085d 	.word	0x0000085d
     a88:	00000835 	.word	0x00000835
     a8c:	000008a5 	.word	0x000008a5
     a90:	000007e5 	.word	0x000007e5

00000a94 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     a94:	b580      	push	{r7, lr}
     a96:	b092      	sub	sp, #72	; 0x48
     a98:	af00      	add	r7, sp, #0
     a9a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
     a9c:	2347      	movs	r3, #71	; 0x47
     a9e:	18fb      	adds	r3, r7, r3
     aa0:	2200      	movs	r2, #0
     aa2:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
     aa4:	2308      	movs	r3, #8
     aa6:	18fb      	adds	r3, r7, r3
     aa8:	0018      	movs	r0, r3
     aaa:	4b26      	ldr	r3, [pc, #152]	; (b44 <nm_bus_init+0xb0>)
     aac:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
     aae:	2308      	movs	r3, #8
     ab0:	18fb      	adds	r3, r7, r3
     ab2:	220e      	movs	r2, #14
     ab4:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
     ab6:	2308      	movs	r3, #8
     ab8:	18fa      	adds	r2, r7, r3
     aba:	4b23      	ldr	r3, [pc, #140]	; (b48 <nm_bus_init+0xb4>)
     abc:	0011      	movs	r1, r2
     abe:	0018      	movs	r0, r3
     ac0:	4b22      	ldr	r3, [pc, #136]	; (b4c <nm_bus_init+0xb8>)
     ac2:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
     ac4:	230c      	movs	r3, #12
     ac6:	18fb      	adds	r3, r7, r3
     ac8:	0018      	movs	r0, r3
     aca:	4b21      	ldr	r3, [pc, #132]	; (b50 <nm_bus_init+0xbc>)
     acc:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     ace:	230c      	movs	r3, #12
     ad0:	18fb      	adds	r3, r7, r3
     ad2:	22c0      	movs	r2, #192	; 0xc0
     ad4:	0392      	lsls	r2, r2, #14
     ad6:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     ad8:	230c      	movs	r3, #12
     ada:	18fb      	adds	r3, r7, r3
     adc:	4a1d      	ldr	r2, [pc, #116]	; (b54 <nm_bus_init+0xc0>)
     ade:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     ae0:	230c      	movs	r3, #12
     ae2:	18fb      	adds	r3, r7, r3
     ae4:	4a1c      	ldr	r2, [pc, #112]	; (b58 <nm_bus_init+0xc4>)
     ae6:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     ae8:	230c      	movs	r3, #12
     aea:	18fb      	adds	r3, r7, r3
     aec:	2201      	movs	r2, #1
     aee:	4252      	negs	r2, r2
     af0:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     af2:	230c      	movs	r3, #12
     af4:	18fb      	adds	r3, r7, r3
     af6:	4a19      	ldr	r2, [pc, #100]	; (b5c <nm_bus_init+0xc8>)
     af8:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
     afa:	230c      	movs	r3, #12
     afc:	18fb      	adds	r3, r7, r3
     afe:	2200      	movs	r2, #0
     b00:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     b02:	230c      	movs	r3, #12
     b04:	18fb      	adds	r3, r7, r3
     b06:	4a16      	ldr	r2, [pc, #88]	; (b60 <nm_bus_init+0xcc>)
     b08:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     b0a:	230c      	movs	r3, #12
     b0c:	18fa      	adds	r2, r7, r3
     b0e:	4915      	ldr	r1, [pc, #84]	; (b64 <nm_bus_init+0xd0>)
     b10:	4b15      	ldr	r3, [pc, #84]	; (b68 <nm_bus_init+0xd4>)
     b12:	0018      	movs	r0, r3
     b14:	4b15      	ldr	r3, [pc, #84]	; (b6c <nm_bus_init+0xd8>)
     b16:	4798      	blx	r3
     b18:	1e03      	subs	r3, r0, #0
     b1a:	d002      	beq.n	b22 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
     b1c:	2306      	movs	r3, #6
     b1e:	425b      	negs	r3, r3
     b20:	e00c      	b.n	b3c <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
     b22:	4b11      	ldr	r3, [pc, #68]	; (b68 <nm_bus_init+0xd4>)
     b24:	0018      	movs	r0, r3
     b26:	4b12      	ldr	r3, [pc, #72]	; (b70 <nm_bus_init+0xdc>)
     b28:	4798      	blx	r3

	nm_bsp_reset();
     b2a:	4b12      	ldr	r3, [pc, #72]	; (b74 <nm_bus_init+0xe0>)
     b2c:	4798      	blx	r3
	nm_bsp_sleep(1);
     b2e:	2001      	movs	r0, #1
     b30:	4b11      	ldr	r3, [pc, #68]	; (b78 <nm_bus_init+0xe4>)
     b32:	4798      	blx	r3
#endif
	return result;
     b34:	2347      	movs	r3, #71	; 0x47
     b36:	18fb      	adds	r3, r7, r3
     b38:	781b      	ldrb	r3, [r3, #0]
     b3a:	b25b      	sxtb	r3, r3
}
     b3c:	0018      	movs	r0, r3
     b3e:	46bd      	mov	sp, r7
     b40:	b012      	add	sp, #72	; 0x48
     b42:	bd80      	pop	{r7, pc}
     b44:	000006b1 	.word	0x000006b1
     b48:	2000443c 	.word	0x2000443c
     b4c:	000006d5 	.word	0x000006d5
     b50:	0000062d 	.word	0x0000062d
     b54:	000c0002 	.word	0x000c0002
     b58:	000d0002 	.word	0x000d0002
     b5c:	000f0002 	.word	0x000f0002
     b60:	00b71b00 	.word	0x00b71b00
     b64:	42001000 	.word	0x42001000
     b68:	20004440 	.word	0x20004440
     b6c:	000086e9 	.word	0x000086e9
     b70:	00000739 	.word	0x00000739
     b74:	00000399 	.word	0x00000399
     b78:	000003dd 	.word	0x000003dd

00000b7c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     b7c:	b590      	push	{r4, r7, lr}
     b7e:	b085      	sub	sp, #20
     b80:	af00      	add	r7, sp, #0
     b82:	0002      	movs	r2, r0
     b84:	6039      	str	r1, [r7, #0]
     b86:	1dfb      	adds	r3, r7, #7
     b88:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     b8a:	230f      	movs	r3, #15
     b8c:	18fb      	adds	r3, r7, r3
     b8e:	2200      	movs	r2, #0
     b90:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     b92:	1dfb      	adds	r3, r7, #7
     b94:	781b      	ldrb	r3, [r3, #0]
     b96:	2b03      	cmp	r3, #3
     b98:	d10f      	bne.n	bba <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     b9e:	68bb      	ldr	r3, [r7, #8]
     ba0:	6818      	ldr	r0, [r3, #0]
     ba2:	68bb      	ldr	r3, [r7, #8]
     ba4:	6859      	ldr	r1, [r3, #4]
     ba6:	68bb      	ldr	r3, [r7, #8]
     ba8:	891b      	ldrh	r3, [r3, #8]
     baa:	220f      	movs	r2, #15
     bac:	18bc      	adds	r4, r7, r2
     bae:	001a      	movs	r2, r3
     bb0:	4b0f      	ldr	r3, [pc, #60]	; (bf0 <nm_bus_ioctl+0x74>)
     bb2:	4798      	blx	r3
     bb4:	0003      	movs	r3, r0
     bb6:	7023      	strb	r3, [r4, #0]
		}
		break;
     bb8:	e012      	b.n	be0 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
     bba:	230f      	movs	r3, #15
     bbc:	18fb      	adds	r3, r7, r3
     bbe:	22ff      	movs	r2, #255	; 0xff
     bc0:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     bc2:	2386      	movs	r3, #134	; 0x86
     bc4:	005a      	lsls	r2, r3, #1
     bc6:	490b      	ldr	r1, [pc, #44]	; (bf4 <nm_bus_ioctl+0x78>)
     bc8:	4b0b      	ldr	r3, [pc, #44]	; (bf8 <nm_bus_ioctl+0x7c>)
     bca:	0018      	movs	r0, r3
     bcc:	4b0b      	ldr	r3, [pc, #44]	; (bfc <nm_bus_ioctl+0x80>)
     bce:	4798      	blx	r3
     bd0:	4b0b      	ldr	r3, [pc, #44]	; (c00 <nm_bus_ioctl+0x84>)
     bd2:	0018      	movs	r0, r3
     bd4:	4b0b      	ldr	r3, [pc, #44]	; (c04 <nm_bus_ioctl+0x88>)
     bd6:	4798      	blx	r3
     bd8:	200d      	movs	r0, #13
     bda:	4b0b      	ldr	r3, [pc, #44]	; (c08 <nm_bus_ioctl+0x8c>)
     bdc:	4798      	blx	r3
			break;
     bde:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     be0:	230f      	movs	r3, #15
     be2:	18fb      	adds	r3, r7, r3
     be4:	781b      	ldrb	r3, [r3, #0]
     be6:	b25b      	sxtb	r3, r3
}
     be8:	0018      	movs	r0, r3
     bea:	46bd      	mov	sp, r7
     bec:	b005      	add	sp, #20
     bee:	bd90      	pop	{r4, r7, pc}
     bf0:	0000092d 	.word	0x0000092d
     bf4:	00011f74 	.word	0x00011f74
     bf8:	00011f4c 	.word	0x00011f4c
     bfc:	00010d75 	.word	0x00010d75
     c00:	00011f60 	.word	0x00011f60
     c04:	00010e95 	.word	0x00010e95
     c08:	00010da9 	.word	0x00010da9

00000c0c <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     c0c:	b580      	push	{r7, lr}
     c0e:	b082      	sub	sp, #8
     c10:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
     c12:	1dfb      	adds	r3, r7, #7
     c14:	2200      	movs	r2, #0
     c16:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
     c18:	1d3b      	adds	r3, r7, #4
     c1a:	0018      	movs	r0, r3
     c1c:	4b09      	ldr	r3, [pc, #36]	; (c44 <nm_bus_deinit+0x38>)
     c1e:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c20:	1d3b      	adds	r3, r7, #4
     c22:	2200      	movs	r2, #0
     c24:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     c26:	1d3b      	adds	r3, r7, #4
     c28:	2200      	movs	r2, #0
     c2a:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
     c2c:	4b06      	ldr	r3, [pc, #24]	; (c48 <nm_bus_deinit+0x3c>)
     c2e:	0018      	movs	r0, r3
     c30:	4b06      	ldr	r3, [pc, #24]	; (c4c <nm_bus_deinit+0x40>)
     c32:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
     c34:	1dfb      	adds	r3, r7, #7
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	b25b      	sxtb	r3, r3
}
     c3a:	0018      	movs	r0, r3
     c3c:	46bd      	mov	sp, r7
     c3e:	b002      	add	sp, #8
     c40:	bd80      	pop	{r7, pc}
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00000595 	.word	0x00000595
     c48:	20004440 	.word	0x20004440
     c4c:	00000789 	.word	0x00000789

00000c50 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     c50:	b580      	push	{r7, lr}
     c52:	b084      	sub	sp, #16
     c54:	af00      	add	r7, sp, #0
     c56:	60f8      	str	r0, [r7, #12]
     c58:	60b9      	str	r1, [r7, #8]
     c5a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     c5c:	687b      	ldr	r3, [r7, #4]
     c5e:	2b00      	cmp	r3, #0
     c60:	d010      	beq.n	c84 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     c62:	68bb      	ldr	r3, [r7, #8]
     c64:	781a      	ldrb	r2, [r3, #0]
     c66:	68fb      	ldr	r3, [r7, #12]
     c68:	701a      	strb	r2, [r3, #0]
		pDst++;
     c6a:	68fb      	ldr	r3, [r7, #12]
     c6c:	3301      	adds	r3, #1
     c6e:	60fb      	str	r3, [r7, #12]
		pSrc++;
     c70:	68bb      	ldr	r3, [r7, #8]
     c72:	3301      	adds	r3, #1
     c74:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     c76:	687b      	ldr	r3, [r7, #4]
     c78:	3b01      	subs	r3, #1
     c7a:	607b      	str	r3, [r7, #4]
     c7c:	687b      	ldr	r3, [r7, #4]
     c7e:	2b00      	cmp	r3, #0
     c80:	d1ef      	bne.n	c62 <m2m_memcpy+0x12>
     c82:	e000      	b.n	c86 <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     c84:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
     c86:	46bd      	mov	sp, r7
     c88:	b004      	add	sp, #16
     c8a:	bd80      	pop	{r7, pc}

00000c8c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     c8c:	b580      	push	{r7, lr}
     c8e:	b084      	sub	sp, #16
     c90:	af00      	add	r7, sp, #0
     c92:	60f8      	str	r0, [r7, #12]
     c94:	607a      	str	r2, [r7, #4]
     c96:	230b      	movs	r3, #11
     c98:	18fb      	adds	r3, r7, r3
     c9a:	1c0a      	adds	r2, r1, #0
     c9c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d00e      	beq.n	cc2 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     ca4:	68fb      	ldr	r3, [r7, #12]
     ca6:	220b      	movs	r2, #11
     ca8:	18ba      	adds	r2, r7, r2
     caa:	7812      	ldrb	r2, [r2, #0]
     cac:	701a      	strb	r2, [r3, #0]
		pBuf++;
     cae:	68fb      	ldr	r3, [r7, #12]
     cb0:	3301      	adds	r3, #1
     cb2:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	3b01      	subs	r3, #1
     cb8:	607b      	str	r3, [r7, #4]
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	2b00      	cmp	r3, #0
     cbe:	d1f1      	bne.n	ca4 <m2m_memset+0x18>
     cc0:	e000      	b.n	cc4 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     cc2:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
     cc4:	46bd      	mov	sp, r7
     cc6:	b004      	add	sp, #16
     cc8:	bd80      	pop	{r7, pc}
     cca:	46c0      	nop			; (mov r8, r8)

00000ccc <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     ccc:	b580      	push	{r7, lr}
     cce:	b084      	sub	sp, #16
     cd0:	af00      	add	r7, sp, #0
     cd2:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     cd4:	230e      	movs	r3, #14
     cd6:	18fb      	adds	r3, r7, r3
     cd8:	2200      	movs	r2, #0
     cda:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     cdc:	e009      	b.n	cf2 <m2m_strlen+0x26>
	{
		u16StrLen ++;
     cde:	230e      	movs	r3, #14
     ce0:	18fb      	adds	r3, r7, r3
     ce2:	881a      	ldrh	r2, [r3, #0]
     ce4:	230e      	movs	r3, #14
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	3201      	adds	r2, #1
     cea:	801a      	strh	r2, [r3, #0]
		pcStr++;
     cec:	687b      	ldr	r3, [r7, #4]
     cee:	3301      	adds	r3, #1
     cf0:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	781b      	ldrb	r3, [r3, #0]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d1f1      	bne.n	cde <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
     cfa:	230e      	movs	r3, #14
     cfc:	18fb      	adds	r3, r7, r3
     cfe:	881b      	ldrh	r3, [r3, #0]
}
     d00:	0018      	movs	r0, r3
     d02:	46bd      	mov	sp, r7
     d04:	b004      	add	sp, #16
     d06:	bd80      	pop	{r7, pc}

00000d08 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
     d08:	b580      	push	{r7, lr}
     d0a:	b084      	sub	sp, #16
     d0c:	af00      	add	r7, sp, #0
     d0e:	60f8      	str	r0, [r7, #12]
     d10:	60b9      	str	r1, [r7, #8]
     d12:	1dbb      	adds	r3, r7, #6
     d14:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     d16:	e020      	b.n	d5a <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
     d18:	68fb      	ldr	r3, [r7, #12]
     d1a:	781a      	ldrb	r2, [r3, #0]
     d1c:	68bb      	ldr	r3, [r7, #8]
     d1e:	781b      	ldrb	r3, [r3, #0]
     d20:	429a      	cmp	r2, r3
     d22:	d009      	beq.n	d38 <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
     d24:	68fb      	ldr	r3, [r7, #12]
     d26:	781a      	ldrb	r2, [r3, #0]
     d28:	68bb      	ldr	r3, [r7, #8]
     d2a:	781b      	ldrb	r3, [r3, #0]
     d2c:	429a      	cmp	r2, r3
     d2e:	d201      	bcs.n	d34 <m2m_strncmp+0x2c>
     d30:	23ff      	movs	r3, #255	; 0xff
     d32:	e017      	b.n	d64 <m2m_strncmp+0x5c>
     d34:	2301      	movs	r3, #1
     d36:	e015      	b.n	d64 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
     d38:	68fb      	ldr	r3, [r7, #12]
     d3a:	781b      	ldrb	r3, [r3, #0]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d101      	bne.n	d44 <m2m_strncmp+0x3c>
	    return 0;
     d40:	2300      	movs	r3, #0
     d42:	e00f      	b.n	d64 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
     d44:	68fb      	ldr	r3, [r7, #12]
     d46:	3301      	adds	r3, #1
     d48:	60fb      	str	r3, [r7, #12]
     d4a:	68bb      	ldr	r3, [r7, #8]
     d4c:	3301      	adds	r3, #1
     d4e:	60bb      	str	r3, [r7, #8]
     d50:	1dbb      	adds	r3, r7, #6
     d52:	1dba      	adds	r2, r7, #6
     d54:	8812      	ldrh	r2, [r2, #0]
     d56:	3a01      	subs	r2, #1
     d58:	801a      	strh	r2, [r3, #0]
     d5a:	1dbb      	adds	r3, r7, #6
     d5c:	881b      	ldrh	r3, [r3, #0]
     d5e:	2b00      	cmp	r3, #0
     d60:	d1da      	bne.n	d18 <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
     d62:	2300      	movs	r3, #0
}
     d64:	0018      	movs	r0, r3
     d66:	46bd      	mov	sp, r7
     d68:	b004      	add	sp, #16
     d6a:	bd80      	pop	{r7, pc}

00000d6c <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
     d6c:	b590      	push	{r4, r7, lr}
     d6e:	b085      	sub	sp, #20
     d70:	af00      	add	r7, sp, #0
     d72:	6078      	str	r0, [r7, #4]
     d74:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
     d76:	683b      	ldr	r3, [r7, #0]
     d78:	1c5a      	adds	r2, r3, #1
     d7a:	603a      	str	r2, [r7, #0]
     d7c:	220f      	movs	r2, #15
     d7e:	18ba      	adds	r2, r7, r2
     d80:	781b      	ldrb	r3, [r3, #0]
     d82:	7013      	strb	r3, [r2, #0]
    if (!u8c)
     d84:	230f      	movs	r3, #15
     d86:	18fb      	adds	r3, r7, r3
     d88:	781b      	ldrb	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d101      	bne.n	d92 <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
     d8e:	687b      	ldr	r3, [r7, #4]
     d90:	e029      	b.n	de6 <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
     d92:	230c      	movs	r3, #12
     d94:	18fc      	adds	r4, r7, r3
     d96:	683b      	ldr	r3, [r7, #0]
     d98:	0018      	movs	r0, r3
     d9a:	4b15      	ldr	r3, [pc, #84]	; (df0 <m2m_strstr+0x84>)
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
     da2:	687b      	ldr	r3, [r7, #4]
     da4:	1c5a      	adds	r2, r3, #1
     da6:	607a      	str	r2, [r7, #4]
     da8:	220b      	movs	r2, #11
     daa:	18ba      	adds	r2, r7, r2
     dac:	781b      	ldrb	r3, [r3, #0]
     dae:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
     db0:	230b      	movs	r3, #11
     db2:	18fb      	adds	r3, r7, r3
     db4:	781b      	ldrb	r3, [r3, #0]
     db6:	2b00      	cmp	r3, #0
     db8:	d101      	bne.n	dbe <m2m_strstr+0x52>
                return (uint8 *) 0;
     dba:	2300      	movs	r3, #0
     dbc:	e013      	b.n	de6 <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
     dbe:	230b      	movs	r3, #11
     dc0:	18fa      	adds	r2, r7, r3
     dc2:	230f      	movs	r3, #15
     dc4:	18fb      	adds	r3, r7, r3
     dc6:	7812      	ldrb	r2, [r2, #0]
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	429a      	cmp	r2, r3
     dcc:	d1e9      	bne.n	da2 <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
     dce:	230c      	movs	r3, #12
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	881a      	ldrh	r2, [r3, #0]
     dd4:	6839      	ldr	r1, [r7, #0]
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	0018      	movs	r0, r3
     dda:	4b06      	ldr	r3, [pc, #24]	; (df4 <m2m_strstr+0x88>)
     ddc:	4798      	blx	r3
     dde:	1e03      	subs	r3, r0, #0
     de0:	d1df      	bne.n	da2 <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	3b01      	subs	r3, #1
}
     de6:	0018      	movs	r0, r3
     de8:	46bd      	mov	sp, r7
     dea:	b005      	add	sp, #20
     dec:	bd90      	pop	{r4, r7, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00000ccd 	.word	0x00000ccd
     df4:	00000d09 	.word	0x00000d09

00000df8 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
     df8:	b580      	push	{r7, lr}
     dfa:	af00      	add	r7, sp, #0
	gu8Interrupt++;
     dfc:	4b04      	ldr	r3, [pc, #16]	; (e10 <isr+0x18>)
     dfe:	781b      	ldrb	r3, [r3, #0]
     e00:	b2db      	uxtb	r3, r3
     e02:	3301      	adds	r3, #1
     e04:	b2da      	uxtb	r2, r3
     e06:	4b02      	ldr	r3, [pc, #8]	; (e10 <isr+0x18>)
     e08:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	46bd      	mov	sp, r7
     e0e:	bd80      	pop	{r7, pc}
     e10:	200000b7 	.word	0x200000b7

00000e14 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
     e14:	b590      	push	{r4, r7, lr}
     e16:	b083      	sub	sp, #12
     e18:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     e1a:	1dfb      	adds	r3, r7, #7
     e1c:	2200      	movs	r2, #0
     e1e:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     e20:	2001      	movs	r0, #1
     e22:	4b13      	ldr	r3, [pc, #76]	; (e70 <hif_set_rx_done+0x5c>)
     e24:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     e26:	1dfc      	adds	r4, r7, #7
     e28:	003b      	movs	r3, r7
     e2a:	4a12      	ldr	r2, [pc, #72]	; (e74 <hif_set_rx_done+0x60>)
     e2c:	0019      	movs	r1, r3
     e2e:	0010      	movs	r0, r2
     e30:	4b11      	ldr	r3, [pc, #68]	; (e78 <hif_set_rx_done+0x64>)
     e32:	4798      	blx	r3
     e34:	0003      	movs	r3, r0
     e36:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     e38:	1dfb      	adds	r3, r7, #7
     e3a:	781b      	ldrb	r3, [r3, #0]
     e3c:	b25b      	sxtb	r3, r3
     e3e:	2b00      	cmp	r3, #0
     e40:	d10d      	bne.n	e5e <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     e42:	683b      	ldr	r3, [r7, #0]
     e44:	2202      	movs	r2, #2
     e46:	4313      	orrs	r3, r2
     e48:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     e4a:	683b      	ldr	r3, [r7, #0]
     e4c:	1dfc      	adds	r4, r7, #7
     e4e:	4a09      	ldr	r2, [pc, #36]	; (e74 <hif_set_rx_done+0x60>)
     e50:	0019      	movs	r1, r3
     e52:	0010      	movs	r0, r2
     e54:	4b09      	ldr	r3, [pc, #36]	; (e7c <hif_set_rx_done+0x68>)
     e56:	4798      	blx	r3
     e58:	0003      	movs	r3, r0
     e5a:	7023      	strb	r3, [r4, #0]
     e5c:	e000      	b.n	e60 <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
     e5e:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     e60:	1dfb      	adds	r3, r7, #7
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	b25b      	sxtb	r3, r3

}
     e66:	0018      	movs	r0, r3
     e68:	46bd      	mov	sp, r7
     e6a:	b003      	add	sp, #12
     e6c:	bd90      	pop	{r4, r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	0000047d 	.word	0x0000047d
     e74:	00001070 	.word	0x00001070
     e78:	00002ae9 	.word	0x00002ae9
     e7c:	00002b0d 	.word	0x00002b0d

00000e80 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     e80:	b580      	push	{r7, lr}
     e82:	b082      	sub	sp, #8
     e84:	af00      	add	r7, sp, #0
     e86:	603a      	str	r2, [r7, #0]
     e88:	1dfb      	adds	r3, r7, #7
     e8a:	1c02      	adds	r2, r0, #0
     e8c:	701a      	strb	r2, [r3, #0]
     e8e:	1d3b      	adds	r3, r7, #4
     e90:	1c0a      	adds	r2, r1, #0
     e92:	801a      	strh	r2, [r3, #0]


}
     e94:	46c0      	nop			; (mov r8, r8)
     e96:	46bd      	mov	sp, r7
     e98:	b002      	add	sp, #8
     e9a:	bd80      	pop	{r7, pc}

00000e9c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     e9c:	b590      	push	{r4, r7, lr}
     e9e:	b083      	sub	sp, #12
     ea0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     ea2:	1dfb      	adds	r3, r7, #7
     ea4:	2200      	movs	r2, #0
     ea6:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
     ea8:	4b1c      	ldr	r3, [pc, #112]	; (f1c <hif_chip_wake+0x80>)
     eaa:	781b      	ldrb	r3, [r3, #0]
     eac:	b2db      	uxtb	r3, r3
     eae:	2b00      	cmp	r3, #0
     eb0:	d121      	bne.n	ef6 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     eb2:	4b1b      	ldr	r3, [pc, #108]	; (f20 <hif_chip_wake+0x84>)
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	b2db      	uxtb	r3, r3
     eb8:	2b03      	cmp	r3, #3
     eba:	d004      	beq.n	ec6 <hif_chip_wake+0x2a>
     ebc:	4b18      	ldr	r3, [pc, #96]	; (f20 <hif_chip_wake+0x84>)
     ebe:	781b      	ldrb	r3, [r3, #0]
     ec0:	b2db      	uxtb	r3, r3
     ec2:	2b04      	cmp	r3, #4
     ec4:	d117      	bne.n	ef6 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
     ec6:	1dfc      	adds	r4, r7, #7
     ec8:	4b16      	ldr	r3, [pc, #88]	; (f24 <hif_chip_wake+0x88>)
     eca:	4798      	blx	r3
     ecc:	0003      	movs	r3, r0
     ece:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     ed0:	1dfb      	adds	r3, r7, #7
     ed2:	781b      	ldrb	r3, [r3, #0]
     ed4:	b25b      	sxtb	r3, r3
     ed6:	2b00      	cmp	r3, #0
     ed8:	d115      	bne.n	f06 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     eda:	1dfc      	adds	r4, r7, #7
     edc:	4a12      	ldr	r2, [pc, #72]	; (f28 <hif_chip_wake+0x8c>)
     ede:	4b13      	ldr	r3, [pc, #76]	; (f2c <hif_chip_wake+0x90>)
     ee0:	0011      	movs	r1, r2
     ee2:	0018      	movs	r0, r3
     ee4:	4b12      	ldr	r3, [pc, #72]	; (f30 <hif_chip_wake+0x94>)
     ee6:	4798      	blx	r3
     ee8:	0003      	movs	r3, r0
     eea:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     eec:	1dfb      	adds	r3, r7, #7
     eee:	781b      	ldrb	r3, [r3, #0]
     ef0:	b25b      	sxtb	r3, r3
     ef2:	2b00      	cmp	r3, #0
     ef4:	d109      	bne.n	f0a <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     ef6:	4b09      	ldr	r3, [pc, #36]	; (f1c <hif_chip_wake+0x80>)
     ef8:	781b      	ldrb	r3, [r3, #0]
     efa:	b2db      	uxtb	r3, r3
     efc:	3301      	adds	r3, #1
     efe:	b2da      	uxtb	r2, r3
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <hif_chip_wake+0x80>)
     f02:	701a      	strb	r2, [r3, #0]
     f04:	e002      	b.n	f0c <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	e000      	b.n	f0c <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     f0a:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
     f0c:	1dfb      	adds	r3, r7, #7
     f0e:	781b      	ldrb	r3, [r3, #0]
     f10:	b25b      	sxtb	r3, r3
}
     f12:	0018      	movs	r0, r3
     f14:	46bd      	mov	sp, r7
     f16:	b003      	add	sp, #12
     f18:	bd90      	pop	{r4, r7, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	200000b5 	.word	0x200000b5
     f20:	200000b4 	.word	0x200000b4
     f24:	000021bd 	.word	0x000021bd
     f28:	00005678 	.word	0x00005678
     f2c:	00001074 	.word	0x00001074
     f30:	00002b0d 	.word	0x00002b0d

00000f34 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     f34:	b590      	push	{r4, r7, lr}
     f36:	b083      	sub	sp, #12
     f38:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     f3a:	1dfb      	adds	r3, r7, #7
     f3c:	2200      	movs	r2, #0
     f3e:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
     f40:	4b29      	ldr	r3, [pc, #164]	; (fe8 <hif_chip_sleep+0xb4>)
     f42:	781b      	ldrb	r3, [r3, #0]
     f44:	b2db      	uxtb	r3, r3
     f46:	2b00      	cmp	r3, #0
     f48:	d006      	beq.n	f58 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
     f4a:	4b27      	ldr	r3, [pc, #156]	; (fe8 <hif_chip_sleep+0xb4>)
     f4c:	781b      	ldrb	r3, [r3, #0]
     f4e:	b2db      	uxtb	r3, r3
     f50:	3b01      	subs	r3, #1
     f52:	b2da      	uxtb	r2, r3
     f54:	4b24      	ldr	r3, [pc, #144]	; (fe8 <hif_chip_sleep+0xb4>)
     f56:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
     f58:	4b23      	ldr	r3, [pc, #140]	; (fe8 <hif_chip_sleep+0xb4>)
     f5a:	781b      	ldrb	r3, [r3, #0]
     f5c:	b2db      	uxtb	r3, r3
     f5e:	2b00      	cmp	r3, #0
     f60:	d13a      	bne.n	fd8 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     f62:	4b22      	ldr	r3, [pc, #136]	; (fec <hif_chip_sleep+0xb8>)
     f64:	781b      	ldrb	r3, [r3, #0]
     f66:	b2db      	uxtb	r3, r3
     f68:	2b03      	cmp	r3, #3
     f6a:	d004      	beq.n	f76 <hif_chip_sleep+0x42>
     f6c:	4b1f      	ldr	r3, [pc, #124]	; (fec <hif_chip_sleep+0xb8>)
     f6e:	781b      	ldrb	r3, [r3, #0]
     f70:	b2db      	uxtb	r3, r3
     f72:	2b04      	cmp	r3, #4
     f74:	d130      	bne.n	fd8 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
     f76:	2300      	movs	r3, #0
     f78:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     f7a:	1dfc      	adds	r4, r7, #7
     f7c:	4a1c      	ldr	r2, [pc, #112]	; (ff0 <hif_chip_sleep+0xbc>)
     f7e:	4b1d      	ldr	r3, [pc, #116]	; (ff4 <hif_chip_sleep+0xc0>)
     f80:	0011      	movs	r1, r2
     f82:	0018      	movs	r0, r3
     f84:	4b1c      	ldr	r3, [pc, #112]	; (ff8 <hif_chip_sleep+0xc4>)
     f86:	4798      	blx	r3
     f88:	0003      	movs	r3, r0
     f8a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     f8c:	1dfb      	adds	r3, r7, #7
     f8e:	781b      	ldrb	r3, [r3, #0]
     f90:	b25b      	sxtb	r3, r3
     f92:	2b00      	cmp	r3, #0
     f94:	d11d      	bne.n	fd2 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     f96:	1dfc      	adds	r4, r7, #7
     f98:	003b      	movs	r3, r7
     f9a:	0019      	movs	r1, r3
     f9c:	2001      	movs	r0, #1
     f9e:	4b17      	ldr	r3, [pc, #92]	; (ffc <hif_chip_sleep+0xc8>)
     fa0:	4798      	blx	r3
     fa2:	0003      	movs	r3, r0
     fa4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     fa6:	1dfb      	adds	r3, r7, #7
     fa8:	781b      	ldrb	r3, [r3, #0]
     faa:	b25b      	sxtb	r3, r3
     fac:	2b00      	cmp	r3, #0
     fae:	d112      	bne.n	fd6 <hif_chip_sleep+0xa2>
			if(reg&0x2)
     fb0:	683b      	ldr	r3, [r7, #0]
     fb2:	2202      	movs	r2, #2
     fb4:	4013      	ands	r3, r2
     fb6:	d00f      	beq.n	fd8 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
     fb8:	683b      	ldr	r3, [r7, #0]
     fba:	2202      	movs	r2, #2
     fbc:	4393      	bics	r3, r2
     fbe:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
     fc0:	683b      	ldr	r3, [r7, #0]
     fc2:	1dfc      	adds	r4, r7, #7
     fc4:	0019      	movs	r1, r3
     fc6:	2001      	movs	r0, #1
     fc8:	4b0b      	ldr	r3, [pc, #44]	; (ff8 <hif_chip_sleep+0xc4>)
     fca:	4798      	blx	r3
     fcc:	0003      	movs	r3, r0
     fce:	7023      	strb	r3, [r4, #0]
     fd0:	e002      	b.n	fd8 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	e000      	b.n	fd8 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
     fd6:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
     fd8:	1dfb      	adds	r3, r7, #7
     fda:	781b      	ldrb	r3, [r3, #0]
     fdc:	b25b      	sxtb	r3, r3
}
     fde:	0018      	movs	r0, r3
     fe0:	46bd      	mov	sp, r7
     fe2:	b003      	add	sp, #12
     fe4:	bd90      	pop	{r4, r7, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	200000b5 	.word	0x200000b5
     fec:	200000b4 	.word	0x200000b4
     ff0:	00004321 	.word	0x00004321
     ff4:	00001074 	.word	0x00001074
     ff8:	00002b0d 	.word	0x00002b0d
     ffc:	00002ae9 	.word	0x00002ae9

00001000 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    1000:	b580      	push	{r7, lr}
    1002:	b082      	sub	sp, #8
    1004:	af00      	add	r7, sp, #0
    1006:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    1008:	4b0e      	ldr	r3, [pc, #56]	; (1044 <hif_init+0x44>)
    100a:	2200      	movs	r2, #0
    100c:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    100e:	4b0e      	ldr	r3, [pc, #56]	; (1048 <hif_init+0x48>)
    1010:	2200      	movs	r2, #0
    1012:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    1014:	4b0d      	ldr	r3, [pc, #52]	; (104c <hif_init+0x4c>)
    1016:	2200      	movs	r2, #0
    1018:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    101a:	4b0d      	ldr	r3, [pc, #52]	; (1050 <hif_init+0x50>)
    101c:	2200      	movs	r2, #0
    101e:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    1020:	4b0c      	ldr	r3, [pc, #48]	; (1054 <hif_init+0x54>)
    1022:	2200      	movs	r2, #0
    1024:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    1026:	4b0c      	ldr	r3, [pc, #48]	; (1058 <hif_init+0x58>)
    1028:	0018      	movs	r0, r3
    102a:	4b0c      	ldr	r3, [pc, #48]	; (105c <hif_init+0x5c>)
    102c:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    102e:	4b0c      	ldr	r3, [pc, #48]	; (1060 <hif_init+0x60>)
    1030:	0019      	movs	r1, r3
    1032:	2003      	movs	r0, #3
    1034:	4b0b      	ldr	r3, [pc, #44]	; (1064 <hif_init+0x64>)
    1036:	4798      	blx	r3

	return M2M_SUCCESS;
    1038:	2300      	movs	r3, #0
}
    103a:	0018      	movs	r0, r3
    103c:	46bd      	mov	sp, r7
    103e:	b002      	add	sp, #8
    1040:	bd80      	pop	{r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	200000b8 	.word	0x200000b8
    1048:	200000bc 	.word	0x200000bc
    104c:	200000b5 	.word	0x200000b5
    1050:	200000b4 	.word	0x200000b4
    1054:	200000b7 	.word	0x200000b7
    1058:	00000df9 	.word	0x00000df9
    105c:	00000405 	.word	0x00000405
    1060:	00000e81 	.word	0x00000e81
    1064:	0000159d 	.word	0x0000159d

00001068 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1068:	b590      	push	{r4, r7, lr}
    106a:	b089      	sub	sp, #36	; 0x24
    106c:	af00      	add	r7, sp, #0
    106e:	0004      	movs	r4, r0
    1070:	0008      	movs	r0, r1
    1072:	603a      	str	r2, [r7, #0]
    1074:	0019      	movs	r1, r3
    1076:	1dfb      	adds	r3, r7, #7
    1078:	1c22      	adds	r2, r4, #0
    107a:	701a      	strb	r2, [r3, #0]
    107c:	1dbb      	adds	r3, r7, #6
    107e:	1c02      	adds	r2, r0, #0
    1080:	701a      	strb	r2, [r3, #0]
    1082:	1d3b      	adds	r3, r7, #4
    1084:	1c0a      	adds	r2, r1, #0
    1086:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    1088:	231f      	movs	r3, #31
    108a:	18fb      	adds	r3, r7, r3
    108c:	22ff      	movs	r2, #255	; 0xff
    108e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1090:	1dbb      	adds	r3, r7, #6
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	227f      	movs	r2, #127	; 0x7f
    1096:	4013      	ands	r3, r2
    1098:	b2da      	uxtb	r2, r3
    109a:	2318      	movs	r3, #24
    109c:	18fb      	adds	r3, r7, r3
    109e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    10a0:	2318      	movs	r3, #24
    10a2:	18fb      	adds	r3, r7, r3
    10a4:	1dfa      	adds	r2, r7, #7
    10a6:	7812      	ldrb	r2, [r2, #0]
    10a8:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    10aa:	2318      	movs	r3, #24
    10ac:	18fb      	adds	r3, r7, r3
    10ae:	2208      	movs	r2, #8
    10b0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    10b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    10b4:	2b00      	cmp	r3, #0
    10b6:	d011      	beq.n	10dc <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    10b8:	2318      	movs	r3, #24
    10ba:	18fb      	adds	r3, r7, r3
    10bc:	885b      	ldrh	r3, [r3, #2]
    10be:	b29a      	uxth	r2, r3
    10c0:	2338      	movs	r3, #56	; 0x38
    10c2:	18f9      	adds	r1, r7, r3
    10c4:	2334      	movs	r3, #52	; 0x34
    10c6:	18fb      	adds	r3, r7, r3
    10c8:	8809      	ldrh	r1, [r1, #0]
    10ca:	881b      	ldrh	r3, [r3, #0]
    10cc:	18cb      	adds	r3, r1, r3
    10ce:	b29b      	uxth	r3, r3
    10d0:	18d3      	adds	r3, r2, r3
    10d2:	b29a      	uxth	r2, r3
    10d4:	2318      	movs	r3, #24
    10d6:	18fb      	adds	r3, r7, r3
    10d8:	805a      	strh	r2, [r3, #2]
    10da:	e00a      	b.n	10f2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    10dc:	2318      	movs	r3, #24
    10de:	18fb      	adds	r3, r7, r3
    10e0:	885b      	ldrh	r3, [r3, #2]
    10e2:	b29a      	uxth	r2, r3
    10e4:	1d3b      	adds	r3, r7, #4
    10e6:	881b      	ldrh	r3, [r3, #0]
    10e8:	18d3      	adds	r3, r2, r3
    10ea:	b29a      	uxth	r2, r3
    10ec:	2318      	movs	r3, #24
    10ee:	18fb      	adds	r3, r7, r3
    10f0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    10f2:	231f      	movs	r3, #31
    10f4:	18fc      	adds	r4, r7, r3
    10f6:	4b9b      	ldr	r3, [pc, #620]	; (1364 <hif_send+0x2fc>)
    10f8:	4798      	blx	r3
    10fa:	0003      	movs	r3, r0
    10fc:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    10fe:	231f      	movs	r3, #31
    1100:	18fb      	adds	r3, r7, r3
    1102:	781b      	ldrb	r3, [r3, #0]
    1104:	b25b      	sxtb	r3, r3
    1106:	2b00      	cmp	r3, #0
    1108:	d000      	beq.n	110c <hif_send+0xa4>
    110a:	e103      	b.n	1314 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    110c:	2300      	movs	r3, #0
    110e:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    1110:	230e      	movs	r3, #14
    1112:	18fb      	adds	r3, r7, r3
    1114:	2200      	movs	r2, #0
    1116:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    1118:	2300      	movs	r3, #0
    111a:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    111c:	1dfb      	adds	r3, r7, #7
    111e:	781a      	ldrb	r2, [r3, #0]
    1120:	697b      	ldr	r3, [r7, #20]
    1122:	4313      	orrs	r3, r2
    1124:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    1126:	1dbb      	adds	r3, r7, #6
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	021a      	lsls	r2, r3, #8
    112c:	697b      	ldr	r3, [r7, #20]
    112e:	4313      	orrs	r3, r2
    1130:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    1132:	2318      	movs	r3, #24
    1134:	18fb      	adds	r3, r7, r3
    1136:	885b      	ldrh	r3, [r3, #2]
    1138:	b29b      	uxth	r3, r3
    113a:	041a      	lsls	r2, r3, #16
    113c:	697b      	ldr	r3, [r7, #20]
    113e:	4313      	orrs	r3, r2
    1140:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1142:	697b      	ldr	r3, [r7, #20]
    1144:	221f      	movs	r2, #31
    1146:	18bc      	adds	r4, r7, r2
    1148:	4a87      	ldr	r2, [pc, #540]	; (1368 <hif_send+0x300>)
    114a:	0019      	movs	r1, r3
    114c:	0010      	movs	r0, r2
    114e:	4b87      	ldr	r3, [pc, #540]	; (136c <hif_send+0x304>)
    1150:	4798      	blx	r3
    1152:	0003      	movs	r3, r0
    1154:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1156:	231f      	movs	r3, #31
    1158:	18fb      	adds	r3, r7, r3
    115a:	781b      	ldrb	r3, [r3, #0]
    115c:	b25b      	sxtb	r3, r3
    115e:	2b00      	cmp	r3, #0
    1160:	d000      	beq.n	1164 <hif_send+0xfc>
    1162:	e0ee      	b.n	1342 <hif_send+0x2da>


		reg = 0;
    1164:	2300      	movs	r3, #0
    1166:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    1168:	697b      	ldr	r3, [r7, #20]
    116a:	2202      	movs	r2, #2
    116c:	4313      	orrs	r3, r2
    116e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    1170:	697b      	ldr	r3, [r7, #20]
    1172:	221f      	movs	r2, #31
    1174:	18bc      	adds	r4, r7, r2
    1176:	4a7e      	ldr	r2, [pc, #504]	; (1370 <hif_send+0x308>)
    1178:	0019      	movs	r1, r3
    117a:	0010      	movs	r0, r2
    117c:	4b7b      	ldr	r3, [pc, #492]	; (136c <hif_send+0x304>)
    117e:	4798      	blx	r3
    1180:	0003      	movs	r3, r0
    1182:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    1184:	231f      	movs	r3, #31
    1186:	18fb      	adds	r3, r7, r3
    1188:	781b      	ldrb	r3, [r3, #0]
    118a:	b25b      	sxtb	r3, r3
    118c:	2b00      	cmp	r3, #0
    118e:	d000      	beq.n	1192 <hif_send+0x12a>
    1190:	e0d9      	b.n	1346 <hif_send+0x2de>
		dma_addr = 0;
    1192:	2300      	movs	r3, #0
    1194:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    1196:	230e      	movs	r3, #14
    1198:	18fb      	adds	r3, r7, r3
    119a:	2200      	movs	r2, #0
    119c:	801a      	strh	r2, [r3, #0]
    119e:	e031      	b.n	1204 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    11a0:	231f      	movs	r3, #31
    11a2:	18fc      	adds	r4, r7, r3
    11a4:	2314      	movs	r3, #20
    11a6:	18fb      	adds	r3, r7, r3
    11a8:	4a71      	ldr	r2, [pc, #452]	; (1370 <hif_send+0x308>)
    11aa:	0019      	movs	r1, r3
    11ac:	0010      	movs	r0, r2
    11ae:	4b71      	ldr	r3, [pc, #452]	; (1374 <hif_send+0x30c>)
    11b0:	4798      	blx	r3
    11b2:	0003      	movs	r3, r0
    11b4:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    11b6:	231f      	movs	r3, #31
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	781b      	ldrb	r3, [r3, #0]
    11bc:	b25b      	sxtb	r3, r3
    11be:	2b00      	cmp	r3, #0
    11c0:	d128      	bne.n	1214 <hif_send+0x1ac>
			if (!(reg & 0x2))
    11c2:	697b      	ldr	r3, [r7, #20]
    11c4:	2202      	movs	r2, #2
    11c6:	4013      	ands	r3, r2
    11c8:	d113      	bne.n	11f2 <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    11ca:	231f      	movs	r3, #31
    11cc:	18fc      	adds	r4, r7, r3
    11ce:	2310      	movs	r3, #16
    11d0:	18fb      	adds	r3, r7, r3
    11d2:	4a69      	ldr	r2, [pc, #420]	; (1378 <hif_send+0x310>)
    11d4:	0019      	movs	r1, r3
    11d6:	0010      	movs	r0, r2
    11d8:	4b66      	ldr	r3, [pc, #408]	; (1374 <hif_send+0x30c>)
    11da:	4798      	blx	r3
    11dc:	0003      	movs	r3, r0
    11de:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    11e0:	231f      	movs	r3, #31
    11e2:	18fb      	adds	r3, r7, r3
    11e4:	781b      	ldrb	r3, [r3, #0]
    11e6:	b25b      	sxtb	r3, r3
    11e8:	2b00      	cmp	r3, #0
    11ea:	d015      	beq.n	1218 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    11ec:	2300      	movs	r3, #0
    11ee:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    11f0:	e012      	b.n	1218 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    11f2:	230e      	movs	r3, #14
    11f4:	18fb      	adds	r3, r7, r3
    11f6:	881b      	ldrh	r3, [r3, #0]
    11f8:	b29b      	uxth	r3, r3
    11fa:	3301      	adds	r3, #1
    11fc:	b29a      	uxth	r2, r3
    11fe:	230e      	movs	r3, #14
    1200:	18fb      	adds	r3, r7, r3
    1202:	801a      	strh	r2, [r3, #0]
    1204:	230e      	movs	r3, #14
    1206:	18fb      	adds	r3, r7, r3
    1208:	881b      	ldrh	r3, [r3, #0]
    120a:	b29b      	uxth	r3, r3
    120c:	4a5b      	ldr	r2, [pc, #364]	; (137c <hif_send+0x314>)
    120e:	4293      	cmp	r3, r2
    1210:	d9c6      	bls.n	11a0 <hif_send+0x138>
    1212:	e002      	b.n	121a <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    1214:	46c0      	nop			; (mov r8, r8)
    1216:	e000      	b.n	121a <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    1218:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    121a:	693b      	ldr	r3, [r7, #16]
    121c:	2b00      	cmp	r3, #0
    121e:	d100      	bne.n	1222 <hif_send+0x1ba>
    1220:	e073      	b.n	130a <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    1222:	693b      	ldr	r3, [r7, #16]
    1224:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    1226:	2318      	movs	r3, #24
    1228:	18fb      	adds	r3, r7, r3
    122a:	885b      	ldrh	r3, [r3, #2]
    122c:	b29a      	uxth	r2, r3
    122e:	2318      	movs	r3, #24
    1230:	18fb      	adds	r3, r7, r3
    1232:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    1234:	68bb      	ldr	r3, [r7, #8]
    1236:	221f      	movs	r2, #31
    1238:	18bc      	adds	r4, r7, r2
    123a:	2218      	movs	r2, #24
    123c:	18b9      	adds	r1, r7, r2
    123e:	2208      	movs	r2, #8
    1240:	0018      	movs	r0, r3
    1242:	4b4f      	ldr	r3, [pc, #316]	; (1380 <hif_send+0x318>)
    1244:	4798      	blx	r3
    1246:	0003      	movs	r3, r0
    1248:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    124a:	231f      	movs	r3, #31
    124c:	18fb      	adds	r3, r7, r3
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	b25b      	sxtb	r3, r3
    1252:	2b00      	cmp	r3, #0
    1254:	d000      	beq.n	1258 <hif_send+0x1f0>
    1256:	e078      	b.n	134a <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    1258:	68bb      	ldr	r3, [r7, #8]
    125a:	3308      	adds	r3, #8
    125c:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    125e:	683b      	ldr	r3, [r7, #0]
    1260:	2b00      	cmp	r3, #0
    1262:	d015      	beq.n	1290 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1264:	68b8      	ldr	r0, [r7, #8]
    1266:	1d3b      	adds	r3, r7, #4
    1268:	881a      	ldrh	r2, [r3, #0]
    126a:	231f      	movs	r3, #31
    126c:	18fc      	adds	r4, r7, r3
    126e:	683b      	ldr	r3, [r7, #0]
    1270:	0019      	movs	r1, r3
    1272:	4b43      	ldr	r3, [pc, #268]	; (1380 <hif_send+0x318>)
    1274:	4798      	blx	r3
    1276:	0003      	movs	r3, r0
    1278:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    127a:	231f      	movs	r3, #31
    127c:	18fb      	adds	r3, r7, r3
    127e:	781b      	ldrb	r3, [r3, #0]
    1280:	b25b      	sxtb	r3, r3
    1282:	2b00      	cmp	r3, #0
    1284:	d163      	bne.n	134e <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    1286:	1d3b      	adds	r3, r7, #4
    1288:	881a      	ldrh	r2, [r3, #0]
    128a:	68bb      	ldr	r3, [r7, #8]
    128c:	18d3      	adds	r3, r2, r3
    128e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    1290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1292:	2b00      	cmp	r3, #0
    1294:	d021      	beq.n	12da <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1296:	2338      	movs	r3, #56	; 0x38
    1298:	18fb      	adds	r3, r7, r3
    129a:	881a      	ldrh	r2, [r3, #0]
    129c:	1d3b      	adds	r3, r7, #4
    129e:	881b      	ldrh	r3, [r3, #0]
    12a0:	1ad3      	subs	r3, r2, r3
    12a2:	001a      	movs	r2, r3
    12a4:	68bb      	ldr	r3, [r7, #8]
    12a6:	18d3      	adds	r3, r2, r3
    12a8:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    12aa:	68b8      	ldr	r0, [r7, #8]
    12ac:	2334      	movs	r3, #52	; 0x34
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	881a      	ldrh	r2, [r3, #0]
    12b2:	231f      	movs	r3, #31
    12b4:	18fc      	adds	r4, r7, r3
    12b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    12b8:	0019      	movs	r1, r3
    12ba:	4b31      	ldr	r3, [pc, #196]	; (1380 <hif_send+0x318>)
    12bc:	4798      	blx	r3
    12be:	0003      	movs	r3, r0
    12c0:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    12c2:	231f      	movs	r3, #31
    12c4:	18fb      	adds	r3, r7, r3
    12c6:	781b      	ldrb	r3, [r3, #0]
    12c8:	b25b      	sxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	d141      	bne.n	1352 <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    12ce:	2334      	movs	r3, #52	; 0x34
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	881a      	ldrh	r2, [r3, #0]
    12d4:	68bb      	ldr	r3, [r7, #8]
    12d6:	18d3      	adds	r3, r2, r3
    12d8:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    12da:	693b      	ldr	r3, [r7, #16]
    12dc:	009b      	lsls	r3, r3, #2
    12de:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    12e0:	697b      	ldr	r3, [r7, #20]
    12e2:	2202      	movs	r2, #2
    12e4:	4313      	orrs	r3, r2
    12e6:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    12e8:	697b      	ldr	r3, [r7, #20]
    12ea:	221f      	movs	r2, #31
    12ec:	18bc      	adds	r4, r7, r2
    12ee:	4a25      	ldr	r2, [pc, #148]	; (1384 <hif_send+0x31c>)
    12f0:	0019      	movs	r1, r3
    12f2:	0010      	movs	r0, r2
    12f4:	4b1d      	ldr	r3, [pc, #116]	; (136c <hif_send+0x304>)
    12f6:	4798      	blx	r3
    12f8:	0003      	movs	r3, r0
    12fa:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    12fc:	231f      	movs	r3, #31
    12fe:	18fb      	adds	r3, r7, r3
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	b25b      	sxtb	r3, r3
    1304:	2b00      	cmp	r3, #0
    1306:	d015      	beq.n	1334 <hif_send+0x2cc>
    1308:	e024      	b.n	1354 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    130a:	231f      	movs	r3, #31
    130c:	18fb      	adds	r3, r7, r3
    130e:	22fd      	movs	r2, #253	; 0xfd
    1310:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1312:	e01f      	b.n	1354 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    1314:	23a0      	movs	r3, #160	; 0xa0
    1316:	33ff      	adds	r3, #255	; 0xff
    1318:	001a      	movs	r2, r3
    131a:	491b      	ldr	r1, [pc, #108]	; (1388 <hif_send+0x320>)
    131c:	4b1b      	ldr	r3, [pc, #108]	; (138c <hif_send+0x324>)
    131e:	0018      	movs	r0, r3
    1320:	4b1b      	ldr	r3, [pc, #108]	; (1390 <hif_send+0x328>)
    1322:	4798      	blx	r3
    1324:	4b1b      	ldr	r3, [pc, #108]	; (1394 <hif_send+0x32c>)
    1326:	0018      	movs	r0, r3
    1328:	4b1b      	ldr	r3, [pc, #108]	; (1398 <hif_send+0x330>)
    132a:	4798      	blx	r3
    132c:	200d      	movs	r0, #13
    132e:	4b1b      	ldr	r3, [pc, #108]	; (139c <hif_send+0x334>)
    1330:	4798      	blx	r3
		goto ERR1;
    1332:	e00f      	b.n	1354 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    1334:	231f      	movs	r3, #31
    1336:	18fc      	adds	r4, r7, r3
    1338:	4b19      	ldr	r3, [pc, #100]	; (13a0 <hif_send+0x338>)
    133a:	4798      	blx	r3
    133c:	0003      	movs	r3, r0
    133e:	7023      	strb	r3, [r4, #0]
    1340:	e008      	b.n	1354 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	e006      	b.n	1354 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	e004      	b.n	1354 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	e002      	b.n	1354 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	e000      	b.n	1354 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1352:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    1354:	231f      	movs	r3, #31
    1356:	18fb      	adds	r3, r7, r3
    1358:	781b      	ldrb	r3, [r3, #0]
    135a:	b25b      	sxtb	r3, r3
}
    135c:	0018      	movs	r0, r3
    135e:	46bd      	mov	sp, r7
    1360:	b009      	add	sp, #36	; 0x24
    1362:	bd90      	pop	{r4, r7, pc}
    1364:	00000e9d 	.word	0x00000e9d
    1368:	0000108c 	.word	0x0000108c
    136c:	00002b0d 	.word	0x00002b0d
    1370:	00001078 	.word	0x00001078
    1374:	00002ae9 	.word	0x00002ae9
    1378:	00150400 	.word	0x00150400
    137c:	000003e7 	.word	0x000003e7
    1380:	00002c55 	.word	0x00002c55
    1384:	0000106c 	.word	0x0000106c
    1388:	000121e4 	.word	0x000121e4
    138c:	00011f84 	.word	0x00011f84
    1390:	00010d75 	.word	0x00010d75
    1394:	00011f98 	.word	0x00011f98
    1398:	00010e95 	.word	0x00010e95
    139c:	00010da9 	.word	0x00010da9
    13a0:	00000f35 	.word	0x00000f35

000013a4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    13a4:	b590      	push	{r4, r7, lr}
    13a6:	b089      	sub	sp, #36	; 0x24
    13a8:	af00      	add	r7, sp, #0
    13aa:	60f8      	str	r0, [r7, #12]
    13ac:	60b9      	str	r1, [r7, #8]
    13ae:	0019      	movs	r1, r3
    13b0:	1dbb      	adds	r3, r7, #6
    13b2:	801a      	strh	r2, [r3, #0]
    13b4:	1d7b      	adds	r3, r7, #5
    13b6:	1c0a      	adds	r2, r1, #0
    13b8:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    13ba:	231f      	movs	r3, #31
    13bc:	18fb      	adds	r3, r7, r3
    13be:	2200      	movs	r2, #0
    13c0:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	2b00      	cmp	r3, #0
    13c6:	d006      	beq.n	13d6 <hif_receive+0x32>
    13c8:	68bb      	ldr	r3, [r7, #8]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d003      	beq.n	13d6 <hif_receive+0x32>
    13ce:	1dbb      	adds	r3, r7, #6
    13d0:	881b      	ldrh	r3, [r3, #0]
    13d2:	2b00      	cmp	r3, #0
    13d4:	d11f      	bne.n	1416 <hif_receive+0x72>
	{
		if(isDone)
    13d6:	1d7b      	adds	r3, r7, #5
    13d8:	781b      	ldrb	r3, [r3, #0]
    13da:	2b00      	cmp	r3, #0
    13dc:	d009      	beq.n	13f2 <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    13de:	4b5f      	ldr	r3, [pc, #380]	; (155c <hif_receive+0x1b8>)
    13e0:	2201      	movs	r2, #1
    13e2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    13e4:	231f      	movs	r3, #31
    13e6:	18fc      	adds	r4, r7, r3
    13e8:	4b5d      	ldr	r3, [pc, #372]	; (1560 <hif_receive+0x1bc>)
    13ea:	4798      	blx	r3
    13ec:	0003      	movs	r3, r0
    13ee:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    13f0:	e0ac      	b.n	154c <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    13f2:	231f      	movs	r3, #31
    13f4:	18fb      	adds	r3, r7, r3
    13f6:	22f4      	movs	r2, #244	; 0xf4
    13f8:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    13fa:	4a5a      	ldr	r2, [pc, #360]	; (1564 <hif_receive+0x1c0>)
    13fc:	495a      	ldr	r1, [pc, #360]	; (1568 <hif_receive+0x1c4>)
    13fe:	4b5b      	ldr	r3, [pc, #364]	; (156c <hif_receive+0x1c8>)
    1400:	0018      	movs	r0, r3
    1402:	4b5b      	ldr	r3, [pc, #364]	; (1570 <hif_receive+0x1cc>)
    1404:	4798      	blx	r3
    1406:	4b5b      	ldr	r3, [pc, #364]	; (1574 <hif_receive+0x1d0>)
    1408:	0018      	movs	r0, r3
    140a:	4b5b      	ldr	r3, [pc, #364]	; (1578 <hif_receive+0x1d4>)
    140c:	4798      	blx	r3
    140e:	200d      	movs	r0, #13
    1410:	4b5a      	ldr	r3, [pc, #360]	; (157c <hif_receive+0x1d8>)
    1412:	4798      	blx	r3
		}
		goto ERR1;
    1414:	e09a      	b.n	154c <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    1416:	231f      	movs	r3, #31
    1418:	18fc      	adds	r4, r7, r3
    141a:	2314      	movs	r3, #20
    141c:	18fb      	adds	r3, r7, r3
    141e:	4a58      	ldr	r2, [pc, #352]	; (1580 <hif_receive+0x1dc>)
    1420:	0019      	movs	r1, r3
    1422:	0010      	movs	r0, r2
    1424:	4b57      	ldr	r3, [pc, #348]	; (1584 <hif_receive+0x1e0>)
    1426:	4798      	blx	r3
    1428:	0003      	movs	r3, r0
    142a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    142c:	231f      	movs	r3, #31
    142e:	18fb      	adds	r3, r7, r3
    1430:	781b      	ldrb	r3, [r3, #0]
    1432:	b25b      	sxtb	r3, r3
    1434:	2b00      	cmp	r3, #0
    1436:	d000      	beq.n	143a <hif_receive+0x96>
    1438:	e083      	b.n	1542 <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    143a:	697b      	ldr	r3, [r7, #20]
    143c:	089b      	lsrs	r3, r3, #2
    143e:	b29a      	uxth	r2, r3
    1440:	231c      	movs	r3, #28
    1442:	18fb      	adds	r3, r7, r3
    1444:	0512      	lsls	r2, r2, #20
    1446:	0d12      	lsrs	r2, r2, #20
    1448:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    144a:	231f      	movs	r3, #31
    144c:	18fc      	adds	r4, r7, r3
    144e:	2318      	movs	r3, #24
    1450:	18fb      	adds	r3, r7, r3
    1452:	4a4d      	ldr	r2, [pc, #308]	; (1588 <hif_receive+0x1e4>)
    1454:	0019      	movs	r1, r3
    1456:	0010      	movs	r0, r2
    1458:	4b4a      	ldr	r3, [pc, #296]	; (1584 <hif_receive+0x1e0>)
    145a:	4798      	blx	r3
    145c:	0003      	movs	r3, r0
    145e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1460:	231f      	movs	r3, #31
    1462:	18fb      	adds	r3, r7, r3
    1464:	781b      	ldrb	r3, [r3, #0]
    1466:	b25b      	sxtb	r3, r3
    1468:	2b00      	cmp	r3, #0
    146a:	d000      	beq.n	146e <hif_receive+0xca>
    146c:	e06b      	b.n	1546 <hif_receive+0x1a2>


	if(u16Sz > size)
    146e:	1dba      	adds	r2, r7, #6
    1470:	231c      	movs	r3, #28
    1472:	18fb      	adds	r3, r7, r3
    1474:	8812      	ldrh	r2, [r2, #0]
    1476:	881b      	ldrh	r3, [r3, #0]
    1478:	429a      	cmp	r2, r3
    147a:	d916      	bls.n	14aa <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    147c:	231f      	movs	r3, #31
    147e:	18fb      	adds	r3, r7, r3
    1480:	22f4      	movs	r2, #244	; 0xf4
    1482:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    1484:	4a41      	ldr	r2, [pc, #260]	; (158c <hif_receive+0x1e8>)
    1486:	4938      	ldr	r1, [pc, #224]	; (1568 <hif_receive+0x1c4>)
    1488:	4b38      	ldr	r3, [pc, #224]	; (156c <hif_receive+0x1c8>)
    148a:	0018      	movs	r0, r3
    148c:	4b38      	ldr	r3, [pc, #224]	; (1570 <hif_receive+0x1cc>)
    148e:	4798      	blx	r3
    1490:	1dbb      	adds	r3, r7, #6
    1492:	8819      	ldrh	r1, [r3, #0]
    1494:	231c      	movs	r3, #28
    1496:	18fb      	adds	r3, r7, r3
    1498:	881a      	ldrh	r2, [r3, #0]
    149a:	4b3d      	ldr	r3, [pc, #244]	; (1590 <hif_receive+0x1ec>)
    149c:	0018      	movs	r0, r3
    149e:	4b34      	ldr	r3, [pc, #208]	; (1570 <hif_receive+0x1cc>)
    14a0:	4798      	blx	r3
    14a2:	200d      	movs	r0, #13
    14a4:	4b35      	ldr	r3, [pc, #212]	; (157c <hif_receive+0x1d8>)
    14a6:	4798      	blx	r3
		goto ERR1;
    14a8:	e050      	b.n	154c <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    14aa:	69bb      	ldr	r3, [r7, #24]
    14ac:	68fa      	ldr	r2, [r7, #12]
    14ae:	429a      	cmp	r2, r3
    14b0:	d30a      	bcc.n	14c8 <hif_receive+0x124>
    14b2:	1dbb      	adds	r3, r7, #6
    14b4:	881a      	ldrh	r2, [r3, #0]
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	18d2      	adds	r2, r2, r3
    14ba:	231c      	movs	r3, #28
    14bc:	18fb      	adds	r3, r7, r3
    14be:	8819      	ldrh	r1, [r3, #0]
    14c0:	69bb      	ldr	r3, [r7, #24]
    14c2:	18cb      	adds	r3, r1, r3
    14c4:	429a      	cmp	r2, r3
    14c6:	d912      	bls.n	14ee <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    14c8:	231f      	movs	r3, #31
    14ca:	18fb      	adds	r3, r7, r3
    14cc:	22f4      	movs	r2, #244	; 0xf4
    14ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    14d0:	23a0      	movs	r3, #160	; 0xa0
    14d2:	009a      	lsls	r2, r3, #2
    14d4:	4924      	ldr	r1, [pc, #144]	; (1568 <hif_receive+0x1c4>)
    14d6:	4b25      	ldr	r3, [pc, #148]	; (156c <hif_receive+0x1c8>)
    14d8:	0018      	movs	r0, r3
    14da:	4b25      	ldr	r3, [pc, #148]	; (1570 <hif_receive+0x1cc>)
    14dc:	4798      	blx	r3
    14de:	4b2d      	ldr	r3, [pc, #180]	; (1594 <hif_receive+0x1f0>)
    14e0:	0018      	movs	r0, r3
    14e2:	4b25      	ldr	r3, [pc, #148]	; (1578 <hif_receive+0x1d4>)
    14e4:	4798      	blx	r3
    14e6:	200d      	movs	r0, #13
    14e8:	4b24      	ldr	r3, [pc, #144]	; (157c <hif_receive+0x1d8>)
    14ea:	4798      	blx	r3
		goto ERR1;
    14ec:	e02e      	b.n	154c <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    14ee:	1dbb      	adds	r3, r7, #6
    14f0:	881a      	ldrh	r2, [r3, #0]
    14f2:	231f      	movs	r3, #31
    14f4:	18fc      	adds	r4, r7, r3
    14f6:	68b9      	ldr	r1, [r7, #8]
    14f8:	68fb      	ldr	r3, [r7, #12]
    14fa:	0018      	movs	r0, r3
    14fc:	4b26      	ldr	r3, [pc, #152]	; (1598 <hif_receive+0x1f4>)
    14fe:	4798      	blx	r3
    1500:	0003      	movs	r3, r0
    1502:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    1504:	231f      	movs	r3, #31
    1506:	18fb      	adds	r3, r7, r3
    1508:	781b      	ldrb	r3, [r3, #0]
    150a:	b25b      	sxtb	r3, r3
    150c:	2b00      	cmp	r3, #0
    150e:	d11c      	bne.n	154a <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    1510:	231c      	movs	r3, #28
    1512:	18fb      	adds	r3, r7, r3
    1514:	881a      	ldrh	r2, [r3, #0]
    1516:	69bb      	ldr	r3, [r7, #24]
    1518:	18d2      	adds	r2, r2, r3
    151a:	1dbb      	adds	r3, r7, #6
    151c:	8819      	ldrh	r1, [r3, #0]
    151e:	68fb      	ldr	r3, [r7, #12]
    1520:	18cb      	adds	r3, r1, r3
    1522:	429a      	cmp	r2, r3
    1524:	d003      	beq.n	152e <hif_receive+0x18a>
    1526:	1d7b      	adds	r3, r7, #5
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b00      	cmp	r3, #0
    152c:	d00e      	beq.n	154c <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    152e:	4b0b      	ldr	r3, [pc, #44]	; (155c <hif_receive+0x1b8>)
    1530:	2201      	movs	r2, #1
    1532:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    1534:	231f      	movs	r3, #31
    1536:	18fc      	adds	r4, r7, r3
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <hif_receive+0x1bc>)
    153a:	4798      	blx	r3
    153c:	0003      	movs	r3, r0
    153e:	7023      	strb	r3, [r4, #0]
    1540:	e004      	b.n	154c <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	e002      	b.n	154c <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	e000      	b.n	154c <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    154a:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    154c:	231f      	movs	r3, #31
    154e:	18fb      	adds	r3, r7, r3
    1550:	781b      	ldrb	r3, [r3, #0]
    1552:	b25b      	sxtb	r3, r3
}
    1554:	0018      	movs	r0, r3
    1556:	46bd      	mov	sp, r7
    1558:	b009      	add	sp, #36	; 0x24
    155a:	bd90      	pop	{r4, r7, pc}
    155c:	200000b6 	.word	0x200000b6
    1560:	00000e15 	.word	0x00000e15
    1564:	00000269 	.word	0x00000269
    1568:	000121f0 	.word	0x000121f0
    156c:	00011f84 	.word	0x00011f84
    1570:	00010d75 	.word	0x00010d75
    1574:	00012110 	.word	0x00012110
    1578:	00010e95 	.word	0x00010e95
    157c:	00010da9 	.word	0x00010da9
    1580:	00001070 	.word	0x00001070
    1584:	00002ae9 	.word	0x00002ae9
    1588:	00001084 	.word	0x00001084
    158c:	0000027a 	.word	0x0000027a
    1590:	00012130 	.word	0x00012130
    1594:	00012174 	.word	0x00012174
    1598:	00002b5d 	.word	0x00002b5d

0000159c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    159c:	b580      	push	{r7, lr}
    159e:	b084      	sub	sp, #16
    15a0:	af00      	add	r7, sp, #0
    15a2:	0002      	movs	r2, r0
    15a4:	6039      	str	r1, [r7, #0]
    15a6:	1dfb      	adds	r3, r7, #7
    15a8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    15aa:	230f      	movs	r3, #15
    15ac:	18fb      	adds	r3, r7, r3
    15ae:	2200      	movs	r2, #0
    15b0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    15b2:	1dfb      	adds	r3, r7, #7
    15b4:	781b      	ldrb	r3, [r3, #0]
    15b6:	2b07      	cmp	r3, #7
    15b8:	d81c      	bhi.n	15f4 <hif_register_cb+0x58>
    15ba:	009a      	lsls	r2, r3, #2
    15bc:	4b1c      	ldr	r3, [pc, #112]	; (1630 <hif_register_cb+0x94>)
    15be:	18d3      	adds	r3, r2, r3
    15c0:	681b      	ldr	r3, [r3, #0]
    15c2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    15c4:	4b1b      	ldr	r3, [pc, #108]	; (1634 <hif_register_cb+0x98>)
    15c6:	683a      	ldr	r2, [r7, #0]
    15c8:	601a      	str	r2, [r3, #0]
			break;
    15ca:	e028      	b.n	161e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    15cc:	4b1a      	ldr	r3, [pc, #104]	; (1638 <hif_register_cb+0x9c>)
    15ce:	683a      	ldr	r2, [r7, #0]
    15d0:	601a      	str	r2, [r3, #0]
			break;
    15d2:	e024      	b.n	161e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    15d4:	4b19      	ldr	r3, [pc, #100]	; (163c <hif_register_cb+0xa0>)
    15d6:	683a      	ldr	r2, [r7, #0]
    15d8:	601a      	str	r2, [r3, #0]
			break;
    15da:	e020      	b.n	161e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    15dc:	4b18      	ldr	r3, [pc, #96]	; (1640 <hif_register_cb+0xa4>)
    15de:	683a      	ldr	r2, [r7, #0]
    15e0:	601a      	str	r2, [r3, #0]
			break;
    15e2:	e01c      	b.n	161e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    15e4:	4b17      	ldr	r3, [pc, #92]	; (1644 <hif_register_cb+0xa8>)
    15e6:	683a      	ldr	r2, [r7, #0]
    15e8:	601a      	str	r2, [r3, #0]
			break;
    15ea:	e018      	b.n	161e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    15ec:	4b16      	ldr	r3, [pc, #88]	; (1648 <hif_register_cb+0xac>)
    15ee:	683a      	ldr	r2, [r7, #0]
    15f0:	601a      	str	r2, [r3, #0]
			break;
    15f2:	e014      	b.n	161e <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    15f4:	4a15      	ldr	r2, [pc, #84]	; (164c <hif_register_cb+0xb0>)
    15f6:	4916      	ldr	r1, [pc, #88]	; (1650 <hif_register_cb+0xb4>)
    15f8:	4b16      	ldr	r3, [pc, #88]	; (1654 <hif_register_cb+0xb8>)
    15fa:	0018      	movs	r0, r3
    15fc:	4b16      	ldr	r3, [pc, #88]	; (1658 <hif_register_cb+0xbc>)
    15fe:	4798      	blx	r3
    1600:	1dfb      	adds	r3, r7, #7
    1602:	781a      	ldrb	r2, [r3, #0]
    1604:	4b15      	ldr	r3, [pc, #84]	; (165c <hif_register_cb+0xc0>)
    1606:	0011      	movs	r1, r2
    1608:	0018      	movs	r0, r3
    160a:	4b13      	ldr	r3, [pc, #76]	; (1658 <hif_register_cb+0xbc>)
    160c:	4798      	blx	r3
    160e:	200d      	movs	r0, #13
    1610:	4b13      	ldr	r3, [pc, #76]	; (1660 <hif_register_cb+0xc4>)
    1612:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1614:	230f      	movs	r3, #15
    1616:	18fb      	adds	r3, r7, r3
    1618:	22f4      	movs	r2, #244	; 0xf4
    161a:	701a      	strb	r2, [r3, #0]
			break;
    161c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    161e:	230f      	movs	r3, #15
    1620:	18fb      	adds	r3, r7, r3
    1622:	781b      	ldrb	r3, [r3, #0]
    1624:	b25b      	sxtb	r3, r3
}
    1626:	0018      	movs	r0, r3
    1628:	46bd      	mov	sp, r7
    162a:	b004      	add	sp, #16
    162c:	bd80      	pop	{r7, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	000121c4 	.word	0x000121c4
    1634:	200000bc 	.word	0x200000bc
    1638:	200000b8 	.word	0x200000b8
    163c:	200000c0 	.word	0x200000c0
    1640:	200000c8 	.word	0x200000c8
    1644:	200000cc 	.word	0x200000cc
    1648:	200000c4 	.word	0x200000c4
    164c:	000002b9 	.word	0x000002b9
    1650:	000121fc 	.word	0x000121fc
    1654:	00011f84 	.word	0x00011f84
    1658:	00010d75 	.word	0x00010d75
    165c:	000121b8 	.word	0x000121b8
    1660:	00010da9 	.word	0x00010da9

00001664 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1664:	b590      	push	{r4, r7, lr}
    1666:	b0ad      	sub	sp, #180	; 0xb4
    1668:	af02      	add	r7, sp, #8
    166a:	603a      	str	r2, [r7, #0]
    166c:	1dfb      	adds	r3, r7, #7
    166e:	1c02      	adds	r2, r0, #0
    1670:	701a      	strb	r2, [r3, #0]
    1672:	1d3b      	adds	r3, r7, #4
    1674:	1c0a      	adds	r2, r1, #0
    1676:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1678:	1dfb      	adds	r3, r7, #7
    167a:	781b      	ldrb	r3, [r3, #0]
    167c:	2b2c      	cmp	r3, #44	; 0x2c
    167e:	d116      	bne.n	16ae <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1680:	239c      	movs	r3, #156	; 0x9c
    1682:	18f9      	adds	r1, r7, r3
    1684:	6838      	ldr	r0, [r7, #0]
    1686:	2300      	movs	r3, #0
    1688:	2204      	movs	r2, #4
    168a:	4ccc      	ldr	r4, [pc, #816]	; (19bc <m2m_wifi_cb+0x358>)
    168c:	47a0      	blx	r4
    168e:	1e03      	subs	r3, r0, #0
    1690:	d000      	beq.n	1694 <m2m_wifi_cb+0x30>
    1692:	e1b6      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    1694:	4bca      	ldr	r3, [pc, #808]	; (19c0 <m2m_wifi_cb+0x35c>)
    1696:	681b      	ldr	r3, [r3, #0]
    1698:	2b00      	cmp	r3, #0
    169a:	d100      	bne.n	169e <m2m_wifi_cb+0x3a>
    169c:	e1b1      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    169e:	4bc8      	ldr	r3, [pc, #800]	; (19c0 <m2m_wifi_cb+0x35c>)
    16a0:	681b      	ldr	r3, [r3, #0]
    16a2:	229c      	movs	r2, #156	; 0x9c
    16a4:	18ba      	adds	r2, r7, r2
    16a6:	0011      	movs	r1, r2
    16a8:	202c      	movs	r0, #44	; 0x2c
    16aa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    16ac:	e1a9      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    16ae:	1dfb      	adds	r3, r7, #7
    16b0:	781b      	ldrb	r3, [r3, #0]
    16b2:	2b1b      	cmp	r3, #27
    16b4:	d116      	bne.n	16e4 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    16b6:	2394      	movs	r3, #148	; 0x94
    16b8:	18f9      	adds	r1, r7, r3
    16ba:	6838      	ldr	r0, [r7, #0]
    16bc:	2300      	movs	r3, #0
    16be:	2208      	movs	r2, #8
    16c0:	4cbe      	ldr	r4, [pc, #760]	; (19bc <m2m_wifi_cb+0x358>)
    16c2:	47a0      	blx	r4
    16c4:	1e03      	subs	r3, r0, #0
    16c6:	d000      	beq.n	16ca <m2m_wifi_cb+0x66>
    16c8:	e19b      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    16ca:	4bbd      	ldr	r3, [pc, #756]	; (19c0 <m2m_wifi_cb+0x35c>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d100      	bne.n	16d4 <m2m_wifi_cb+0x70>
    16d2:	e196      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    16d4:	4bba      	ldr	r3, [pc, #744]	; (19c0 <m2m_wifi_cb+0x35c>)
    16d6:	681b      	ldr	r3, [r3, #0]
    16d8:	2294      	movs	r2, #148	; 0x94
    16da:	18ba      	adds	r2, r7, r2
    16dc:	0011      	movs	r1, r2
    16de:	201b      	movs	r0, #27
    16e0:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    16e2:	e18e      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    16e4:	1dfb      	adds	r3, r7, #7
    16e6:	781b      	ldrb	r3, [r3, #0]
    16e8:	2b06      	cmp	r3, #6
    16ea:	d116      	bne.n	171a <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    16ec:	230c      	movs	r3, #12
    16ee:	18f9      	adds	r1, r7, r3
    16f0:	6838      	ldr	r0, [r7, #0]
    16f2:	2301      	movs	r3, #1
    16f4:	2230      	movs	r2, #48	; 0x30
    16f6:	4cb1      	ldr	r4, [pc, #708]	; (19bc <m2m_wifi_cb+0x358>)
    16f8:	47a0      	blx	r4
    16fa:	1e03      	subs	r3, r0, #0
    16fc:	d000      	beq.n	1700 <m2m_wifi_cb+0x9c>
    16fe:	e180      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    1700:	4baf      	ldr	r3, [pc, #700]	; (19c0 <m2m_wifi_cb+0x35c>)
    1702:	681b      	ldr	r3, [r3, #0]
    1704:	2b00      	cmp	r3, #0
    1706:	d100      	bne.n	170a <m2m_wifi_cb+0xa6>
    1708:	e17b      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    170a:	4bad      	ldr	r3, [pc, #692]	; (19c0 <m2m_wifi_cb+0x35c>)
    170c:	681b      	ldr	r3, [r3, #0]
    170e:	220c      	movs	r2, #12
    1710:	18ba      	adds	r2, r7, r2
    1712:	0011      	movs	r1, r2
    1714:	2006      	movs	r0, #6
    1716:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1718:	e173      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    171a:	1dfb      	adds	r3, r7, #7
    171c:	781b      	ldrb	r3, [r3, #0]
    171e:	2b0e      	cmp	r3, #14
    1720:	d100      	bne.n	1724 <m2m_wifi_cb+0xc0>
    1722:	e16e      	b.n	1a02 <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1724:	1dfb      	adds	r3, r7, #7
    1726:	781b      	ldrb	r3, [r3, #0]
    1728:	2b32      	cmp	r3, #50	; 0x32
    172a:	d116      	bne.n	175a <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    172c:	2384      	movs	r3, #132	; 0x84
    172e:	18f9      	adds	r1, r7, r3
    1730:	6838      	ldr	r0, [r7, #0]
    1732:	2300      	movs	r3, #0
    1734:	2210      	movs	r2, #16
    1736:	4ca1      	ldr	r4, [pc, #644]	; (19bc <m2m_wifi_cb+0x358>)
    1738:	47a0      	blx	r4
    173a:	1e03      	subs	r3, r0, #0
    173c:	d000      	beq.n	1740 <m2m_wifi_cb+0xdc>
    173e:	e160      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    1740:	4b9f      	ldr	r3, [pc, #636]	; (19c0 <m2m_wifi_cb+0x35c>)
    1742:	681b      	ldr	r3, [r3, #0]
    1744:	2b00      	cmp	r3, #0
    1746:	d100      	bne.n	174a <m2m_wifi_cb+0xe6>
    1748:	e15b      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    174a:	4b9d      	ldr	r3, [pc, #628]	; (19c0 <m2m_wifi_cb+0x35c>)
    174c:	681b      	ldr	r3, [r3, #0]
    174e:	2284      	movs	r2, #132	; 0x84
    1750:	18ba      	adds	r2, r7, r2
    1752:	0011      	movs	r1, r2
    1754:	2032      	movs	r0, #50	; 0x32
    1756:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1758:	e153      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    175a:	1dfb      	adds	r3, r7, #7
    175c:	781b      	ldrb	r3, [r3, #0]
    175e:	2b2f      	cmp	r3, #47	; 0x2f
    1760:	d11d      	bne.n	179e <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    1762:	230c      	movs	r3, #12
    1764:	18fb      	adds	r3, r7, r3
    1766:	2264      	movs	r2, #100	; 0x64
    1768:	2100      	movs	r1, #0
    176a:	0018      	movs	r0, r3
    176c:	4b95      	ldr	r3, [pc, #596]	; (19c4 <m2m_wifi_cb+0x360>)
    176e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    1770:	230c      	movs	r3, #12
    1772:	18f9      	adds	r1, r7, r3
    1774:	6838      	ldr	r0, [r7, #0]
    1776:	2300      	movs	r3, #0
    1778:	2264      	movs	r2, #100	; 0x64
    177a:	4c90      	ldr	r4, [pc, #576]	; (19bc <m2m_wifi_cb+0x358>)
    177c:	47a0      	blx	r4
    177e:	1e03      	subs	r3, r0, #0
    1780:	d000      	beq.n	1784 <m2m_wifi_cb+0x120>
    1782:	e13e      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    1784:	4b8e      	ldr	r3, [pc, #568]	; (19c0 <m2m_wifi_cb+0x35c>)
    1786:	681b      	ldr	r3, [r3, #0]
    1788:	2b00      	cmp	r3, #0
    178a:	d100      	bne.n	178e <m2m_wifi_cb+0x12a>
    178c:	e139      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    178e:	4b8c      	ldr	r3, [pc, #560]	; (19c0 <m2m_wifi_cb+0x35c>)
    1790:	681b      	ldr	r3, [r3, #0]
    1792:	220c      	movs	r2, #12
    1794:	18ba      	adds	r2, r7, r2
    1796:	0011      	movs	r1, r2
    1798:	202f      	movs	r0, #47	; 0x2f
    179a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    179c:	e131      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    179e:	1dfb      	adds	r3, r7, #7
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	2b34      	cmp	r3, #52	; 0x34
    17a4:	d13a      	bne.n	181c <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    17a6:	2380      	movs	r3, #128	; 0x80
    17a8:	18f9      	adds	r1, r7, r3
    17aa:	6838      	ldr	r0, [r7, #0]
    17ac:	2300      	movs	r3, #0
    17ae:	2204      	movs	r2, #4
    17b0:	4c82      	ldr	r4, [pc, #520]	; (19bc <m2m_wifi_cb+0x358>)
    17b2:	47a0      	blx	r4
    17b4:	1e03      	subs	r3, r0, #0
    17b6:	d000      	beq.n	17ba <m2m_wifi_cb+0x156>
    17b8:	e123      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    17ba:	4b83      	ldr	r3, [pc, #524]	; (19c8 <m2m_wifi_cb+0x364>)
    17bc:	0018      	movs	r0, r3
    17be:	4b83      	ldr	r3, [pc, #524]	; (19cc <m2m_wifi_cb+0x368>)
    17c0:	4798      	blx	r3
    17c2:	2380      	movs	r3, #128	; 0x80
    17c4:	18fb      	adds	r3, r7, r3
    17c6:	681b      	ldr	r3, [r3, #0]
    17c8:	001a      	movs	r2, r3
    17ca:	23ff      	movs	r3, #255	; 0xff
    17cc:	401a      	ands	r2, r3
    17ce:	0011      	movs	r1, r2
    17d0:	2380      	movs	r3, #128	; 0x80
    17d2:	18fb      	adds	r3, r7, r3
    17d4:	681b      	ldr	r3, [r3, #0]
    17d6:	0a1b      	lsrs	r3, r3, #8
    17d8:	001a      	movs	r2, r3
    17da:	23ff      	movs	r3, #255	; 0xff
    17dc:	401a      	ands	r2, r3
    17de:	2380      	movs	r3, #128	; 0x80
    17e0:	18fb      	adds	r3, r7, r3
    17e2:	681b      	ldr	r3, [r3, #0]
    17e4:	0c1b      	lsrs	r3, r3, #16
    17e6:	0018      	movs	r0, r3
    17e8:	23ff      	movs	r3, #255	; 0xff
    17ea:	4018      	ands	r0, r3
    17ec:	0004      	movs	r4, r0
    17ee:	2380      	movs	r3, #128	; 0x80
    17f0:	18fb      	adds	r3, r7, r3
    17f2:	681b      	ldr	r3, [r3, #0]
    17f4:	0e1b      	lsrs	r3, r3, #24
    17f6:	4876      	ldr	r0, [pc, #472]	; (19d0 <m2m_wifi_cb+0x36c>)
    17f8:	9300      	str	r3, [sp, #0]
    17fa:	0023      	movs	r3, r4
    17fc:	4c73      	ldr	r4, [pc, #460]	; (19cc <m2m_wifi_cb+0x368>)
    17fe:	47a0      	blx	r4
    1800:	200d      	movs	r0, #13
    1802:	4b74      	ldr	r3, [pc, #464]	; (19d4 <m2m_wifi_cb+0x370>)
    1804:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    1806:	4b6e      	ldr	r3, [pc, #440]	; (19c0 <m2m_wifi_cb+0x35c>)
    1808:	681b      	ldr	r3, [r3, #0]
    180a:	2b00      	cmp	r3, #0
    180c:	d100      	bne.n	1810 <m2m_wifi_cb+0x1ac>
    180e:	e0f8      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    1810:	4b6b      	ldr	r3, [pc, #428]	; (19c0 <m2m_wifi_cb+0x35c>)
    1812:	681b      	ldr	r3, [r3, #0]
    1814:	2100      	movs	r1, #0
    1816:	2034      	movs	r0, #52	; 0x34
    1818:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    181a:	e0f2      	b.n	1a02 <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    181c:	1dfb      	adds	r3, r7, #7
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	2b11      	cmp	r3, #17
    1822:	d11e      	bne.n	1862 <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    1824:	4b6c      	ldr	r3, [pc, #432]	; (19d8 <m2m_wifi_cb+0x374>)
    1826:	2200      	movs	r2, #0
    1828:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    182a:	237c      	movs	r3, #124	; 0x7c
    182c:	18f9      	adds	r1, r7, r3
    182e:	6838      	ldr	r0, [r7, #0]
    1830:	2300      	movs	r3, #0
    1832:	2204      	movs	r2, #4
    1834:	4c61      	ldr	r4, [pc, #388]	; (19bc <m2m_wifi_cb+0x358>)
    1836:	47a0      	blx	r4
    1838:	1e03      	subs	r3, r0, #0
    183a:	d000      	beq.n	183e <m2m_wifi_cb+0x1da>
    183c:	e0e1      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    183e:	237c      	movs	r3, #124	; 0x7c
    1840:	18fb      	adds	r3, r7, r3
    1842:	781a      	ldrb	r2, [r3, #0]
    1844:	4b65      	ldr	r3, [pc, #404]	; (19dc <m2m_wifi_cb+0x378>)
    1846:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    1848:	4b5d      	ldr	r3, [pc, #372]	; (19c0 <m2m_wifi_cb+0x35c>)
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	d100      	bne.n	1852 <m2m_wifi_cb+0x1ee>
    1850:	e0d7      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    1852:	4b5b      	ldr	r3, [pc, #364]	; (19c0 <m2m_wifi_cb+0x35c>)
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	227c      	movs	r2, #124	; 0x7c
    1858:	18ba      	adds	r2, r7, r2
    185a:	0011      	movs	r1, r2
    185c:	2011      	movs	r0, #17
    185e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1860:	e0cf      	b.n	1a02 <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1862:	1dfb      	adds	r3, r7, #7
    1864:	781b      	ldrb	r3, [r3, #0]
    1866:	2b13      	cmp	r3, #19
    1868:	d116      	bne.n	1898 <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    186a:	230c      	movs	r3, #12
    186c:	18f9      	adds	r1, r7, r3
    186e:	6838      	ldr	r0, [r7, #0]
    1870:	2300      	movs	r3, #0
    1872:	222c      	movs	r2, #44	; 0x2c
    1874:	4c51      	ldr	r4, [pc, #324]	; (19bc <m2m_wifi_cb+0x358>)
    1876:	47a0      	blx	r4
    1878:	1e03      	subs	r3, r0, #0
    187a:	d000      	beq.n	187e <m2m_wifi_cb+0x21a>
    187c:	e0c1      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    187e:	4b50      	ldr	r3, [pc, #320]	; (19c0 <m2m_wifi_cb+0x35c>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d100      	bne.n	1888 <m2m_wifi_cb+0x224>
    1886:	e0bc      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1888:	4b4d      	ldr	r3, [pc, #308]	; (19c0 <m2m_wifi_cb+0x35c>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	220c      	movs	r2, #12
    188e:	18ba      	adds	r2, r7, r2
    1890:	0011      	movs	r1, r2
    1892:	2013      	movs	r0, #19
    1894:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1896:	e0b4      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1898:	1dfb      	adds	r3, r7, #7
    189a:	781b      	ldrb	r3, [r3, #0]
    189c:	2b04      	cmp	r3, #4
    189e:	d116      	bne.n	18ce <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    18a0:	23a0      	movs	r3, #160	; 0xa0
    18a2:	18f9      	adds	r1, r7, r3
    18a4:	6838      	ldr	r0, [r7, #0]
    18a6:	2300      	movs	r3, #0
    18a8:	2204      	movs	r2, #4
    18aa:	4c44      	ldr	r4, [pc, #272]	; (19bc <m2m_wifi_cb+0x358>)
    18ac:	47a0      	blx	r4
    18ae:	1e03      	subs	r3, r0, #0
    18b0:	d000      	beq.n	18b4 <m2m_wifi_cb+0x250>
    18b2:	e0a6      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    18b4:	4b42      	ldr	r3, [pc, #264]	; (19c0 <m2m_wifi_cb+0x35c>)
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	2b00      	cmp	r3, #0
    18ba:	d100      	bne.n	18be <m2m_wifi_cb+0x25a>
    18bc:	e0a1      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    18be:	4b40      	ldr	r3, [pc, #256]	; (19c0 <m2m_wifi_cb+0x35c>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	22a0      	movs	r2, #160	; 0xa0
    18c4:	18ba      	adds	r2, r7, r2
    18c6:	0011      	movs	r1, r2
    18c8:	2004      	movs	r0, #4
    18ca:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    18cc:	e099      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    18ce:	1dfb      	adds	r3, r7, #7
    18d0:	781b      	ldrb	r3, [r3, #0]
    18d2:	2b65      	cmp	r3, #101	; 0x65
    18d4:	d116      	bne.n	1904 <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    18d6:	23a0      	movs	r3, #160	; 0xa0
    18d8:	18f9      	adds	r1, r7, r3
    18da:	6838      	ldr	r0, [r7, #0]
    18dc:	2300      	movs	r3, #0
    18de:	2204      	movs	r2, #4
    18e0:	4c36      	ldr	r4, [pc, #216]	; (19bc <m2m_wifi_cb+0x358>)
    18e2:	47a0      	blx	r4
    18e4:	1e03      	subs	r3, r0, #0
    18e6:	d000      	beq.n	18ea <m2m_wifi_cb+0x286>
    18e8:	e08b      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    18ea:	4b35      	ldr	r3, [pc, #212]	; (19c0 <m2m_wifi_cb+0x35c>)
    18ec:	681b      	ldr	r3, [r3, #0]
    18ee:	2b00      	cmp	r3, #0
    18f0:	d100      	bne.n	18f4 <m2m_wifi_cb+0x290>
    18f2:	e086      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    18f4:	4b32      	ldr	r3, [pc, #200]	; (19c0 <m2m_wifi_cb+0x35c>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	22a0      	movs	r2, #160	; 0xa0
    18fa:	18ba      	adds	r2, r7, r2
    18fc:	0011      	movs	r1, r2
    18fe:	2065      	movs	r0, #101	; 0x65
    1900:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1902:	e07e      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1904:	1dfb      	adds	r3, r7, #7
    1906:	781b      	ldrb	r3, [r3, #0]
    1908:	2b09      	cmp	r3, #9
    190a:	d116      	bne.n	193a <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    190c:	230c      	movs	r3, #12
    190e:	18f9      	adds	r1, r7, r3
    1910:	6838      	ldr	r0, [r7, #0]
    1912:	2301      	movs	r3, #1
    1914:	2264      	movs	r2, #100	; 0x64
    1916:	4c29      	ldr	r4, [pc, #164]	; (19bc <m2m_wifi_cb+0x358>)
    1918:	47a0      	blx	r4
    191a:	1e03      	subs	r3, r0, #0
    191c:	d000      	beq.n	1920 <m2m_wifi_cb+0x2bc>
    191e:	e070      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    1920:	4b27      	ldr	r3, [pc, #156]	; (19c0 <m2m_wifi_cb+0x35c>)
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	2b00      	cmp	r3, #0
    1926:	d100      	bne.n	192a <m2m_wifi_cb+0x2c6>
    1928:	e06b      	b.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    192a:	4b25      	ldr	r3, [pc, #148]	; (19c0 <m2m_wifi_cb+0x35c>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	220c      	movs	r2, #12
    1930:	18ba      	adds	r2, r7, r2
    1932:	0011      	movs	r1, r2
    1934:	2009      	movs	r0, #9
    1936:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    1938:	e063      	b.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    193a:	1dfb      	adds	r3, r7, #7
    193c:	781b      	ldrb	r3, [r3, #0]
    193e:	2b2a      	cmp	r3, #42	; 0x2a
    1940:	d114      	bne.n	196c <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1942:	2378      	movs	r3, #120	; 0x78
    1944:	18f9      	adds	r1, r7, r3
    1946:	6838      	ldr	r0, [r7, #0]
    1948:	2301      	movs	r3, #1
    194a:	2204      	movs	r2, #4
    194c:	4c1b      	ldr	r4, [pc, #108]	; (19bc <m2m_wifi_cb+0x358>)
    194e:	47a0      	blx	r4
    1950:	1e03      	subs	r3, r0, #0
    1952:	d156      	bne.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    1954:	4b1a      	ldr	r3, [pc, #104]	; (19c0 <m2m_wifi_cb+0x35c>)
    1956:	681b      	ldr	r3, [r3, #0]
    1958:	2b00      	cmp	r3, #0
    195a:	d052      	beq.n	1a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    195c:	4b18      	ldr	r3, [pc, #96]	; (19c0 <m2m_wifi_cb+0x35c>)
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	2278      	movs	r2, #120	; 0x78
    1962:	18ba      	adds	r2, r7, r2
    1964:	0011      	movs	r1, r2
    1966:	202a      	movs	r0, #42	; 0x2a
    1968:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    196a:	e04a      	b.n	1a02 <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    196c:	1dfb      	adds	r3, r7, #7
    196e:	781b      	ldrb	r3, [r3, #0]
    1970:	2b20      	cmp	r3, #32
    1972:	d135      	bne.n	19e0 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    1974:	2370      	movs	r3, #112	; 0x70
    1976:	18f9      	adds	r1, r7, r3
    1978:	6838      	ldr	r0, [r7, #0]
    197a:	2300      	movs	r3, #0
    197c:	2208      	movs	r2, #8
    197e:	4c0f      	ldr	r4, [pc, #60]	; (19bc <m2m_wifi_cb+0x358>)
    1980:	47a0      	blx	r4
    1982:	1e03      	subs	r3, r0, #0
    1984:	d13d      	bne.n	1a02 <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    1986:	683b      	ldr	r3, [r7, #0]
    1988:	3308      	adds	r3, #8
    198a:	0018      	movs	r0, r3
    198c:	2370      	movs	r3, #112	; 0x70
    198e:	18fb      	adds	r3, r7, r3
    1990:	6819      	ldr	r1, [r3, #0]
    1992:	2370      	movs	r3, #112	; 0x70
    1994:	18fb      	adds	r3, r7, r3
    1996:	889a      	ldrh	r2, [r3, #4]
    1998:	2301      	movs	r3, #1
    199a:	4c08      	ldr	r4, [pc, #32]	; (19bc <m2m_wifi_cb+0x358>)
    199c:	47a0      	blx	r4
    199e:	1e03      	subs	r3, r0, #0
    19a0:	d12f      	bne.n	1a02 <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    19a2:	4b07      	ldr	r3, [pc, #28]	; (19c0 <m2m_wifi_cb+0x35c>)
    19a4:	681b      	ldr	r3, [r3, #0]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d02b      	beq.n	1a02 <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    19aa:	4b05      	ldr	r3, [pc, #20]	; (19c0 <m2m_wifi_cb+0x35c>)
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	2270      	movs	r2, #112	; 0x70
    19b0:	18ba      	adds	r2, r7, r2
    19b2:	0011      	movs	r1, r2
    19b4:	2020      	movs	r0, #32
    19b6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    19b8:	e023      	b.n	1a02 <m2m_wifi_cb+0x39e>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	000013a5 	.word	0x000013a5
    19c0:	200000d4 	.word	0x200000d4
    19c4:	00000c8d 	.word	0x00000c8d
    19c8:	0001220c 	.word	0x0001220c
    19cc:	00010d75 	.word	0x00010d75
    19d0:	00012218 	.word	0x00012218
    19d4:	00010da9 	.word	0x00010da9
    19d8:	200000d1 	.word	0x200000d1
    19dc:	200000d0 	.word	0x200000d0
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    19e0:	2395      	movs	r3, #149	; 0x95
    19e2:	005a      	lsls	r2, r3, #1
    19e4:	4909      	ldr	r1, [pc, #36]	; (1a0c <m2m_wifi_cb+0x3a8>)
    19e6:	4b0a      	ldr	r3, [pc, #40]	; (1a10 <m2m_wifi_cb+0x3ac>)
    19e8:	0018      	movs	r0, r3
    19ea:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <m2m_wifi_cb+0x3b0>)
    19ec:	4798      	blx	r3
    19ee:	1dfb      	adds	r3, r7, #7
    19f0:	781a      	ldrb	r2, [r3, #0]
    19f2:	4b09      	ldr	r3, [pc, #36]	; (1a18 <m2m_wifi_cb+0x3b4>)
    19f4:	0011      	movs	r1, r2
    19f6:	0018      	movs	r0, r3
    19f8:	4b06      	ldr	r3, [pc, #24]	; (1a14 <m2m_wifi_cb+0x3b0>)
    19fa:	4798      	blx	r3
    19fc:	200d      	movs	r0, #13
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <m2m_wifi_cb+0x3b8>)
    1a00:	4798      	blx	r3
	}
}
    1a02:	46c0      	nop			; (mov r8, r8)
    1a04:	46bd      	mov	sp, r7
    1a06:	b02b      	add	sp, #172	; 0xac
    1a08:	bd90      	pop	{r4, r7, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	00012530 	.word	0x00012530
    1a10:	00012238 	.word	0x00012238
    1a14:	00010d75 	.word	0x00010d75
    1a18:	0001224c 	.word	0x0001224c
    1a1c:	00010da9 	.word	0x00010da9

00001a20 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1a20:	b590      	push	{r4, r7, lr}
    1a22:	b08d      	sub	sp, #52	; 0x34
    1a24:	af00      	add	r7, sp, #0
    1a26:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    1a28:	232f      	movs	r3, #47	; 0x2f
    1a2a:	18fb      	adds	r3, r7, r3
    1a2c:	2200      	movs	r2, #0
    1a2e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1a30:	230b      	movs	r3, #11
    1a32:	18fb      	adds	r3, r7, r3
    1a34:	2201      	movs	r2, #1
    1a36:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1a38:	687b      	ldr	r3, [r7, #4]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d104      	bne.n	1a48 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    1a3e:	232f      	movs	r3, #47	; 0x2f
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	22f4      	movs	r2, #244	; 0xf4
    1a44:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    1a46:	e085      	b.n	1b54 <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1a48:	687b      	ldr	r3, [r7, #4]
    1a4a:	681a      	ldr	r2, [r3, #0]
    1a4c:	4b45      	ldr	r3, [pc, #276]	; (1b64 <m2m_wifi_init+0x144>)
    1a4e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    1a50:	4b45      	ldr	r3, [pc, #276]	; (1b68 <m2m_wifi_init+0x148>)
    1a52:	2200      	movs	r2, #0
    1a54:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1a56:	232f      	movs	r3, #47	; 0x2f
    1a58:	18fc      	adds	r4, r7, r3
    1a5a:	230b      	movs	r3, #11
    1a5c:	18fb      	adds	r3, r7, r3
    1a5e:	0018      	movs	r0, r3
    1a60:	4b42      	ldr	r3, [pc, #264]	; (1b6c <m2m_wifi_init+0x14c>)
    1a62:	4798      	blx	r3
    1a64:	0003      	movs	r3, r0
    1a66:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1a68:	232f      	movs	r3, #47	; 0x2f
    1a6a:	18fb      	adds	r3, r7, r3
    1a6c:	781b      	ldrb	r3, [r3, #0]
    1a6e:	b25b      	sxtb	r3, r3
    1a70:	2b00      	cmp	r3, #0
    1a72:	d16c      	bne.n	1b4e <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1a74:	232f      	movs	r3, #47	; 0x2f
    1a76:	18fc      	adds	r4, r7, r3
    1a78:	2000      	movs	r0, #0
    1a7a:	4b3d      	ldr	r3, [pc, #244]	; (1b70 <m2m_wifi_init+0x150>)
    1a7c:	4798      	blx	r3
    1a7e:	0003      	movs	r3, r0
    1a80:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1a82:	232f      	movs	r3, #47	; 0x2f
    1a84:	18fb      	adds	r3, r7, r3
    1a86:	781b      	ldrb	r3, [r3, #0]
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d15a      	bne.n	1b44 <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1a8e:	4b39      	ldr	r3, [pc, #228]	; (1b74 <m2m_wifi_init+0x154>)
    1a90:	0019      	movs	r1, r3
    1a92:	2001      	movs	r0, #1
    1a94:	4b38      	ldr	r3, [pc, #224]	; (1b78 <m2m_wifi_init+0x158>)
    1a96:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    1a98:	232f      	movs	r3, #47	; 0x2f
    1a9a:	18fc      	adds	r4, r7, r3
    1a9c:	230c      	movs	r3, #12
    1a9e:	18fb      	adds	r3, r7, r3
    1aa0:	0018      	movs	r0, r3
    1aa2:	4b36      	ldr	r3, [pc, #216]	; (1b7c <m2m_wifi_init+0x15c>)
    1aa4:	4798      	blx	r3
    1aa6:	0003      	movs	r3, r0
    1aa8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    1aaa:	4b35      	ldr	r3, [pc, #212]	; (1b80 <m2m_wifi_init+0x160>)
    1aac:	0018      	movs	r0, r3
    1aae:	4b35      	ldr	r3, [pc, #212]	; (1b84 <m2m_wifi_init+0x164>)
    1ab0:	4798      	blx	r3
    1ab2:	230c      	movs	r3, #12
    1ab4:	18fb      	adds	r3, r7, r3
    1ab6:	791b      	ldrb	r3, [r3, #4]
    1ab8:	0019      	movs	r1, r3
    1aba:	230c      	movs	r3, #12
    1abc:	18fb      	adds	r3, r7, r3
    1abe:	795b      	ldrb	r3, [r3, #5]
    1ac0:	001a      	movs	r2, r3
    1ac2:	230c      	movs	r3, #12
    1ac4:	18fb      	adds	r3, r7, r3
    1ac6:	799b      	ldrb	r3, [r3, #6]
    1ac8:	482f      	ldr	r0, [pc, #188]	; (1b88 <m2m_wifi_init+0x168>)
    1aca:	4c2e      	ldr	r4, [pc, #184]	; (1b84 <m2m_wifi_init+0x164>)
    1acc:	47a0      	blx	r4
    1ace:	200d      	movs	r0, #13
    1ad0:	4b2e      	ldr	r3, [pc, #184]	; (1b8c <m2m_wifi_init+0x16c>)
    1ad2:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1ad4:	4b2a      	ldr	r3, [pc, #168]	; (1b80 <m2m_wifi_init+0x160>)
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b2a      	ldr	r3, [pc, #168]	; (1b84 <m2m_wifi_init+0x164>)
    1ada:	4798      	blx	r3
    1adc:	230c      	movs	r3, #12
    1ade:	18fb      	adds	r3, r7, r3
    1ae0:	79db      	ldrb	r3, [r3, #7]
    1ae2:	0019      	movs	r1, r3
    1ae4:	230c      	movs	r3, #12
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	7a1b      	ldrb	r3, [r3, #8]
    1aea:	001a      	movs	r2, r3
    1aec:	230c      	movs	r3, #12
    1aee:	18fb      	adds	r3, r7, r3
    1af0:	7a5b      	ldrb	r3, [r3, #9]
    1af2:	4827      	ldr	r0, [pc, #156]	; (1b90 <m2m_wifi_init+0x170>)
    1af4:	4c23      	ldr	r4, [pc, #140]	; (1b84 <m2m_wifi_init+0x164>)
    1af6:	47a0      	blx	r4
    1af8:	200d      	movs	r0, #13
    1afa:	4b24      	ldr	r3, [pc, #144]	; (1b8c <m2m_wifi_init+0x16c>)
    1afc:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    1afe:	4b20      	ldr	r3, [pc, #128]	; (1b80 <m2m_wifi_init+0x160>)
    1b00:	0018      	movs	r0, r3
    1b02:	4b20      	ldr	r3, [pc, #128]	; (1b84 <m2m_wifi_init+0x164>)
    1b04:	4798      	blx	r3
    1b06:	4823      	ldr	r0, [pc, #140]	; (1b94 <m2m_wifi_init+0x174>)
    1b08:	2300      	movs	r3, #0
    1b0a:	2203      	movs	r2, #3
    1b0c:	2113      	movs	r1, #19
    1b0e:	4c1d      	ldr	r4, [pc, #116]	; (1b84 <m2m_wifi_init+0x164>)
    1b10:	47a0      	blx	r4
    1b12:	200d      	movs	r0, #13
    1b14:	4b1d      	ldr	r3, [pc, #116]	; (1b8c <m2m_wifi_init+0x16c>)
    1b16:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    1b18:	232f      	movs	r3, #47	; 0x2f
    1b1a:	18fb      	adds	r3, r7, r3
    1b1c:	781b      	ldrb	r3, [r3, #0]
    1b1e:	b25b      	sxtb	r3, r3
    1b20:	330d      	adds	r3, #13
    1b22:	d116      	bne.n	1b52 <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    1b24:	23d6      	movs	r3, #214	; 0xd6
    1b26:	33ff      	adds	r3, #255	; 0xff
    1b28:	001a      	movs	r2, r3
    1b2a:	491b      	ldr	r1, [pc, #108]	; (1b98 <m2m_wifi_init+0x178>)
    1b2c:	4b1b      	ldr	r3, [pc, #108]	; (1b9c <m2m_wifi_init+0x17c>)
    1b2e:	0018      	movs	r0, r3
    1b30:	4b14      	ldr	r3, [pc, #80]	; (1b84 <m2m_wifi_init+0x164>)
    1b32:	4798      	blx	r3
    1b34:	4b1a      	ldr	r3, [pc, #104]	; (1ba0 <m2m_wifi_init+0x180>)
    1b36:	0018      	movs	r0, r3
    1b38:	4b1a      	ldr	r3, [pc, #104]	; (1ba4 <m2m_wifi_init+0x184>)
    1b3a:	4798      	blx	r3
    1b3c:	200d      	movs	r0, #13
    1b3e:	4b13      	ldr	r3, [pc, #76]	; (1b8c <m2m_wifi_init+0x16c>)
    1b40:	4798      	blx	r3
	}

	goto _EXIT0;
    1b42:	e006      	b.n	1b52 <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1b44:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    1b46:	2000      	movs	r0, #0
    1b48:	4b17      	ldr	r3, [pc, #92]	; (1ba8 <m2m_wifi_init+0x188>)
    1b4a:	4798      	blx	r3
    1b4c:	e002      	b.n	1b54 <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    1b4e:	46c0      	nop			; (mov r8, r8)
    1b50:	e000      	b.n	1b54 <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    1b52:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    1b54:	232f      	movs	r3, #47	; 0x2f
    1b56:	18fb      	adds	r3, r7, r3
    1b58:	781b      	ldrb	r3, [r3, #0]
    1b5a:	b25b      	sxtb	r3, r3
}
    1b5c:	0018      	movs	r0, r3
    1b5e:	46bd      	mov	sp, r7
    1b60:	b00d      	add	sp, #52	; 0x34
    1b62:	bd90      	pop	{r4, r7, pc}
    1b64:	200000d4 	.word	0x200000d4
    1b68:	200000d1 	.word	0x200000d1
    1b6c:	00002e89 	.word	0x00002e89
    1b70:	00001001 	.word	0x00001001
    1b74:	00001665 	.word	0x00001665
    1b78:	0000159d 	.word	0x0000159d
    1b7c:	00002d21 	.word	0x00002d21
    1b80:	0001220c 	.word	0x0001220c
    1b84:	00010d75 	.word	0x00010d75
    1b88:	00012374 	.word	0x00012374
    1b8c:	00010da9 	.word	0x00010da9
    1b90:	00012390 	.word	0x00012390
    1b94:	000123ac 	.word	0x000123ac
    1b98:	0001253c 	.word	0x0001253c
    1b9c:	00012238 	.word	0x00012238
    1ba0:	000123c8 	.word	0x000123c8
    1ba4:	00010e95 	.word	0x00010e95
    1ba8:	00003019 	.word	0x00003019

00001bac <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    1bac:	b590      	push	{r4, r7, lr}
    1bae:	b087      	sub	sp, #28
    1bb0:	af02      	add	r7, sp, #8
    1bb2:	60f8      	str	r0, [r7, #12]
    1bb4:	0008      	movs	r0, r1
    1bb6:	0011      	movs	r1, r2
    1bb8:	607b      	str	r3, [r7, #4]
    1bba:	230b      	movs	r3, #11
    1bbc:	18fb      	adds	r3, r7, r3
    1bbe:	1c02      	adds	r2, r0, #0
    1bc0:	701a      	strb	r2, [r3, #0]
    1bc2:	230a      	movs	r3, #10
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	1c0a      	adds	r2, r1, #0
    1bc8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1bca:	687c      	ldr	r4, [r7, #4]
    1bcc:	230a      	movs	r3, #10
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781a      	ldrb	r2, [r3, #0]
    1bd2:	230b      	movs	r3, #11
    1bd4:	18fb      	adds	r3, r7, r3
    1bd6:	7819      	ldrb	r1, [r3, #0]
    1bd8:	68f8      	ldr	r0, [r7, #12]
    1bda:	2300      	movs	r3, #0
    1bdc:	9301      	str	r3, [sp, #4]
    1bde:	2320      	movs	r3, #32
    1be0:	18fb      	adds	r3, r7, r3
    1be2:	881b      	ldrh	r3, [r3, #0]
    1be4:	9300      	str	r3, [sp, #0]
    1be6:	0023      	movs	r3, r4
    1be8:	4c03      	ldr	r4, [pc, #12]	; (1bf8 <m2m_wifi_connect+0x4c>)
    1bea:	47a0      	blx	r4
    1bec:	0003      	movs	r3, r0
}
    1bee:	0018      	movs	r0, r3
    1bf0:	46bd      	mov	sp, r7
    1bf2:	b005      	add	sp, #20
    1bf4:	bd90      	pop	{r4, r7, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	00001bfd 	.word	0x00001bfd

00001bfc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1bfc:	b5b0      	push	{r4, r5, r7, lr}
    1bfe:	b0aa      	sub	sp, #168	; 0xa8
    1c00:	af04      	add	r7, sp, #16
    1c02:	60f8      	str	r0, [r7, #12]
    1c04:	0008      	movs	r0, r1
    1c06:	0011      	movs	r1, r2
    1c08:	607b      	str	r3, [r7, #4]
    1c0a:	230b      	movs	r3, #11
    1c0c:	18fb      	adds	r3, r7, r3
    1c0e:	1c02      	adds	r2, r0, #0
    1c10:	701a      	strb	r2, [r3, #0]
    1c12:	230a      	movs	r3, #10
    1c14:	18fb      	adds	r3, r7, r3
    1c16:	1c0a      	adds	r2, r1, #0
    1c18:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    1c1a:	2397      	movs	r3, #151	; 0x97
    1c1c:	18fb      	adds	r3, r7, r3
    1c1e:	2200      	movs	r2, #0
    1c20:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1c22:	230a      	movs	r3, #10
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	781b      	ldrb	r3, [r3, #0]
    1c28:	2b01      	cmp	r3, #1
    1c2a:	d100      	bne.n	1c2e <m2m_wifi_connect_sc+0x32>
    1c2c:	e083      	b.n	1d36 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    1c2e:	687b      	ldr	r3, [r7, #4]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d111      	bne.n	1c58 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    1c34:	4ad8      	ldr	r2, [pc, #864]	; (1f98 <m2m_wifi_connect_sc+0x39c>)
    1c36:	49d9      	ldr	r1, [pc, #868]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1c38:	4bd9      	ldr	r3, [pc, #868]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1c3a:	0018      	movs	r0, r3
    1c3c:	4bd9      	ldr	r3, [pc, #868]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1c3e:	4798      	blx	r3
    1c40:	4bd9      	ldr	r3, [pc, #868]	; (1fa8 <m2m_wifi_connect_sc+0x3ac>)
    1c42:	0018      	movs	r0, r3
    1c44:	4bd9      	ldr	r3, [pc, #868]	; (1fac <m2m_wifi_connect_sc+0x3b0>)
    1c46:	4798      	blx	r3
    1c48:	200d      	movs	r0, #13
    1c4a:	4bd9      	ldr	r3, [pc, #868]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1c4c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c4e:	2397      	movs	r3, #151	; 0x97
    1c50:	18fb      	adds	r3, r7, r3
    1c52:	22f4      	movs	r2, #244	; 0xf4
    1c54:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1c56:	e1ef      	b.n	2038 <STACK_SIZE+0x38>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1c58:	230a      	movs	r3, #10
    1c5a:	18fb      	adds	r3, r7, r3
    1c5c:	781b      	ldrb	r3, [r3, #0]
    1c5e:	2b02      	cmp	r3, #2
    1c60:	d169      	bne.n	1d36 <m2m_wifi_connect_sc+0x13a>
    1c62:	687b      	ldr	r3, [r7, #4]
    1c64:	0018      	movs	r0, r3
    1c66:	4bd3      	ldr	r3, [pc, #844]	; (1fb4 <m2m_wifi_connect_sc+0x3b8>)
    1c68:	4798      	blx	r3
    1c6a:	1e03      	subs	r3, r0, #0
    1c6c:	2b40      	cmp	r3, #64	; 0x40
    1c6e:	d162      	bne.n	1d36 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    1c70:	2396      	movs	r3, #150	; 0x96
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	2200      	movs	r2, #0
    1c76:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	2290      	movs	r2, #144	; 0x90
    1c7c:	18ba      	adds	r2, r7, r2
    1c7e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    1c80:	e054      	b.n	1d2c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1c82:	2396      	movs	r3, #150	; 0x96
    1c84:	18fb      	adds	r3, r7, r3
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	2290      	movs	r2, #144	; 0x90
    1c8a:	18ba      	adds	r2, r7, r2
    1c8c:	6812      	ldr	r2, [r2, #0]
    1c8e:	18d3      	adds	r3, r2, r3
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b2f      	cmp	r3, #47	; 0x2f
    1c94:	d931      	bls.n	1cfa <m2m_wifi_connect_sc+0xfe>
    1c96:	2396      	movs	r3, #150	; 0x96
    1c98:	18fb      	adds	r3, r7, r3
    1c9a:	781b      	ldrb	r3, [r3, #0]
    1c9c:	2290      	movs	r2, #144	; 0x90
    1c9e:	18ba      	adds	r2, r7, r2
    1ca0:	6812      	ldr	r2, [r2, #0]
    1ca2:	18d3      	adds	r3, r2, r3
    1ca4:	781b      	ldrb	r3, [r3, #0]
    1ca6:	2b39      	cmp	r3, #57	; 0x39
    1ca8:	d909      	bls.n	1cbe <m2m_wifi_connect_sc+0xc2>
    1caa:	2396      	movs	r3, #150	; 0x96
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	2290      	movs	r2, #144	; 0x90
    1cb2:	18ba      	adds	r2, r7, r2
    1cb4:	6812      	ldr	r2, [r2, #0]
    1cb6:	18d3      	adds	r3, r2, r3
    1cb8:	781b      	ldrb	r3, [r3, #0]
    1cba:	2b40      	cmp	r3, #64	; 0x40
    1cbc:	d91d      	bls.n	1cfa <m2m_wifi_connect_sc+0xfe>
    1cbe:	2396      	movs	r3, #150	; 0x96
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	2290      	movs	r2, #144	; 0x90
    1cc6:	18ba      	adds	r2, r7, r2
    1cc8:	6812      	ldr	r2, [r2, #0]
    1cca:	18d3      	adds	r3, r2, r3
    1ccc:	781b      	ldrb	r3, [r3, #0]
    1cce:	2b46      	cmp	r3, #70	; 0x46
    1cd0:	d909      	bls.n	1ce6 <m2m_wifi_connect_sc+0xea>
    1cd2:	2396      	movs	r3, #150	; 0x96
    1cd4:	18fb      	adds	r3, r7, r3
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	2290      	movs	r2, #144	; 0x90
    1cda:	18ba      	adds	r2, r7, r2
    1cdc:	6812      	ldr	r2, [r2, #0]
    1cde:	18d3      	adds	r3, r2, r3
    1ce0:	781b      	ldrb	r3, [r3, #0]
    1ce2:	2b60      	cmp	r3, #96	; 0x60
    1ce4:	d909      	bls.n	1cfa <m2m_wifi_connect_sc+0xfe>
    1ce6:	2396      	movs	r3, #150	; 0x96
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	2290      	movs	r2, #144	; 0x90
    1cee:	18ba      	adds	r2, r7, r2
    1cf0:	6812      	ldr	r2, [r2, #0]
    1cf2:	18d3      	adds	r3, r2, r3
    1cf4:	781b      	ldrb	r3, [r3, #0]
    1cf6:	2b66      	cmp	r3, #102	; 0x66
    1cf8:	d911      	bls.n	1d1e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    1cfa:	4aaf      	ldr	r2, [pc, #700]	; (1fb8 <m2m_wifi_connect_sc+0x3bc>)
    1cfc:	49a7      	ldr	r1, [pc, #668]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1cfe:	4ba8      	ldr	r3, [pc, #672]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1d00:	0018      	movs	r0, r3
    1d02:	4ba8      	ldr	r3, [pc, #672]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1d04:	4798      	blx	r3
    1d06:	4bad      	ldr	r3, [pc, #692]	; (1fbc <m2m_wifi_connect_sc+0x3c0>)
    1d08:	0018      	movs	r0, r3
    1d0a:	4ba8      	ldr	r3, [pc, #672]	; (1fac <m2m_wifi_connect_sc+0x3b0>)
    1d0c:	4798      	blx	r3
    1d0e:	200d      	movs	r0, #13
    1d10:	4ba7      	ldr	r3, [pc, #668]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1d12:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1d14:	2397      	movs	r3, #151	; 0x97
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	22f4      	movs	r2, #244	; 0xf4
    1d1a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    1d1c:	e18c      	b.n	2038 <STACK_SIZE+0x38>
				}
				i++;
    1d1e:	2396      	movs	r3, #150	; 0x96
    1d20:	18fb      	adds	r3, r7, r3
    1d22:	781a      	ldrb	r2, [r3, #0]
    1d24:	2396      	movs	r3, #150	; 0x96
    1d26:	18fb      	adds	r3, r7, r3
    1d28:	3201      	adds	r2, #1
    1d2a:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    1d2c:	2396      	movs	r3, #150	; 0x96
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	2b3f      	cmp	r3, #63	; 0x3f
    1d34:	d9a5      	bls.n	1c82 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    1d36:	230b      	movs	r3, #11
    1d38:	18fb      	adds	r3, r7, r3
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d004      	beq.n	1d4a <m2m_wifi_connect_sc+0x14e>
    1d40:	230b      	movs	r3, #11
    1d42:	18fb      	adds	r3, r7, r3
    1d44:	781b      	ldrb	r3, [r3, #0]
    1d46:	2b20      	cmp	r3, #32
    1d48:	d911      	bls.n	1d6e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    1d4a:	4a9d      	ldr	r2, [pc, #628]	; (1fc0 <m2m_wifi_connect_sc+0x3c4>)
    1d4c:	4993      	ldr	r1, [pc, #588]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1d4e:	4b94      	ldr	r3, [pc, #592]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1d50:	0018      	movs	r0, r3
    1d52:	4b94      	ldr	r3, [pc, #592]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1d54:	4798      	blx	r3
    1d56:	4b9b      	ldr	r3, [pc, #620]	; (1fc4 <m2m_wifi_connect_sc+0x3c8>)
    1d58:	0018      	movs	r0, r3
    1d5a:	4b94      	ldr	r3, [pc, #592]	; (1fac <m2m_wifi_connect_sc+0x3b0>)
    1d5c:	4798      	blx	r3
    1d5e:	200d      	movs	r0, #13
    1d60:	4b93      	ldr	r3, [pc, #588]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1d62:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1d64:	2397      	movs	r3, #151	; 0x97
    1d66:	18fb      	adds	r3, r7, r3
    1d68:	22f4      	movs	r2, #244	; 0xf4
    1d6a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    1d6c:	e164      	b.n	2038 <STACK_SIZE+0x38>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    1d6e:	23a8      	movs	r3, #168	; 0xa8
    1d70:	18fb      	adds	r3, r7, r3
    1d72:	881b      	ldrh	r3, [r3, #0]
    1d74:	2b0d      	cmp	r3, #13
    1d76:	d916      	bls.n	1da6 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1d78:	23a8      	movs	r3, #168	; 0xa8
    1d7a:	18fb      	adds	r3, r7, r3
    1d7c:	881b      	ldrh	r3, [r3, #0]
    1d7e:	2bff      	cmp	r3, #255	; 0xff
    1d80:	d011      	beq.n	1da6 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    1d82:	4a91      	ldr	r2, [pc, #580]	; (1fc8 <m2m_wifi_connect_sc+0x3cc>)
    1d84:	4985      	ldr	r1, [pc, #532]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1d86:	4b86      	ldr	r3, [pc, #536]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1d88:	0018      	movs	r0, r3
    1d8a:	4b86      	ldr	r3, [pc, #536]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1d8c:	4798      	blx	r3
    1d8e:	4b8f      	ldr	r3, [pc, #572]	; (1fcc <m2m_wifi_connect_sc+0x3d0>)
    1d90:	0018      	movs	r0, r3
    1d92:	4b86      	ldr	r3, [pc, #536]	; (1fac <m2m_wifi_connect_sc+0x3b0>)
    1d94:	4798      	blx	r3
    1d96:	200d      	movs	r0, #13
    1d98:	4b85      	ldr	r3, [pc, #532]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1d9a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1d9c:	2397      	movs	r3, #151	; 0x97
    1d9e:	18fb      	adds	r3, r7, r3
    1da0:	22f4      	movs	r2, #244	; 0xf4
    1da2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1da4:	e148      	b.n	2038 <STACK_SIZE+0x38>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1da6:	230b      	movs	r3, #11
    1da8:	18fb      	adds	r3, r7, r3
    1daa:	781a      	ldrb	r2, [r3, #0]
    1dac:	68f9      	ldr	r1, [r7, #12]
    1dae:	2314      	movs	r3, #20
    1db0:	18fb      	adds	r3, r7, r3
    1db2:	3346      	adds	r3, #70	; 0x46
    1db4:	0018      	movs	r0, r3
    1db6:	4b86      	ldr	r3, [pc, #536]	; (1fd0 <m2m_wifi_connect_sc+0x3d4>)
    1db8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1dba:	230b      	movs	r3, #11
    1dbc:	18fb      	adds	r3, r7, r3
    1dbe:	781b      	ldrb	r3, [r3, #0]
    1dc0:	2214      	movs	r2, #20
    1dc2:	18ba      	adds	r2, r7, r2
    1dc4:	2146      	movs	r1, #70	; 0x46
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	185b      	adds	r3, r3, r1
    1dca:	2200      	movs	r2, #0
    1dcc:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1dce:	2314      	movs	r3, #20
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	22a8      	movs	r2, #168	; 0xa8
    1dd4:	18ba      	adds	r2, r7, r2
    1dd6:	2144      	movs	r1, #68	; 0x44
    1dd8:	8812      	ldrh	r2, [r2, #0]
    1dda:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1ddc:	23ac      	movs	r3, #172	; 0xac
    1dde:	18fb      	adds	r3, r7, r3
    1de0:	781b      	ldrb	r3, [r3, #0]
    1de2:	1e5a      	subs	r2, r3, #1
    1de4:	4193      	sbcs	r3, r2
    1de6:	b2db      	uxtb	r3, r3
    1de8:	0019      	movs	r1, r3
    1dea:	2314      	movs	r3, #20
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	2267      	movs	r2, #103	; 0x67
    1df0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    1df2:	2314      	movs	r3, #20
    1df4:	18fb      	adds	r3, r7, r3
    1df6:	228c      	movs	r2, #140	; 0x8c
    1df8:	18ba      	adds	r2, r7, r2
    1dfa:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    1dfc:	238c      	movs	r3, #140	; 0x8c
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	681b      	ldr	r3, [r3, #0]
    1e02:	220a      	movs	r2, #10
    1e04:	18ba      	adds	r2, r7, r2
    1e06:	2141      	movs	r1, #65	; 0x41
    1e08:	7812      	ldrb	r2, [r2, #0]
    1e0a:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1e0c:	230a      	movs	r3, #10
    1e0e:	18fb      	adds	r3, r7, r3
    1e10:	781b      	ldrb	r3, [r3, #0]
    1e12:	2b03      	cmp	r3, #3
    1e14:	d000      	beq.n	1e18 <m2m_wifi_connect_sc+0x21c>
    1e16:	e07b      	b.n	1f10 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    1e18:	687b      	ldr	r3, [r7, #4]
    1e1a:	2288      	movs	r2, #136	; 0x88
    1e1c:	18ba      	adds	r2, r7, r2
    1e1e:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    1e20:	238c      	movs	r3, #140	; 0x8c
    1e22:	18fb      	adds	r3, r7, r3
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	2284      	movs	r2, #132	; 0x84
    1e28:	18ba      	adds	r2, r7, r2
    1e2a:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1e2c:	2388      	movs	r3, #136	; 0x88
    1e2e:	18fb      	adds	r3, r7, r3
    1e30:	681b      	ldr	r3, [r3, #0]
    1e32:	781b      	ldrb	r3, [r3, #0]
    1e34:	3b01      	subs	r3, #1
    1e36:	b2da      	uxtb	r2, r3
    1e38:	2384      	movs	r3, #132	; 0x84
    1e3a:	18fb      	adds	r3, r7, r3
    1e3c:	681b      	ldr	r3, [r3, #0]
    1e3e:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1e40:	2384      	movs	r3, #132	; 0x84
    1e42:	18fb      	adds	r3, r7, r3
    1e44:	681b      	ldr	r3, [r3, #0]
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	2b03      	cmp	r3, #3
    1e4a:	d917      	bls.n	1e7c <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1e4c:	4a61      	ldr	r2, [pc, #388]	; (1fd4 <m2m_wifi_connect_sc+0x3d8>)
    1e4e:	4953      	ldr	r1, [pc, #332]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1e50:	4b53      	ldr	r3, [pc, #332]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1e52:	0018      	movs	r0, r3
    1e54:	4b53      	ldr	r3, [pc, #332]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1e56:	4798      	blx	r3
    1e58:	2384      	movs	r3, #132	; 0x84
    1e5a:	18fb      	adds	r3, r7, r3
    1e5c:	681b      	ldr	r3, [r3, #0]
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	001a      	movs	r2, r3
    1e62:	4b5d      	ldr	r3, [pc, #372]	; (1fd8 <m2m_wifi_connect_sc+0x3dc>)
    1e64:	0011      	movs	r1, r2
    1e66:	0018      	movs	r0, r3
    1e68:	4b4e      	ldr	r3, [pc, #312]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1e6a:	4798      	blx	r3
    1e6c:	200d      	movs	r0, #13
    1e6e:	4b50      	ldr	r3, [pc, #320]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1e70:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1e72:	2397      	movs	r3, #151	; 0x97
    1e74:	18fb      	adds	r3, r7, r3
    1e76:	22f4      	movs	r2, #244	; 0xf4
    1e78:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1e7a:	e0dd      	b.n	2038 <STACK_SIZE+0x38>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1e7c:	2388      	movs	r3, #136	; 0x88
    1e7e:	18fb      	adds	r3, r7, r3
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	785b      	ldrb	r3, [r3, #1]
    1e84:	3b01      	subs	r3, #1
    1e86:	b2da      	uxtb	r2, r3
    1e88:	2384      	movs	r3, #132	; 0x84
    1e8a:	18fb      	adds	r3, r7, r3
    1e8c:	681b      	ldr	r3, [r3, #0]
    1e8e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1e90:	2384      	movs	r3, #132	; 0x84
    1e92:	18fb      	adds	r3, r7, r3
    1e94:	681b      	ldr	r3, [r3, #0]
    1e96:	785b      	ldrb	r3, [r3, #1]
    1e98:	2b0a      	cmp	r3, #10
    1e9a:	d01e      	beq.n	1eda <m2m_wifi_connect_sc+0x2de>
    1e9c:	2384      	movs	r3, #132	; 0x84
    1e9e:	18fb      	adds	r3, r7, r3
    1ea0:	681b      	ldr	r3, [r3, #0]
    1ea2:	785b      	ldrb	r3, [r3, #1]
    1ea4:	2b1a      	cmp	r3, #26
    1ea6:	d018      	beq.n	1eda <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1ea8:	2390      	movs	r3, #144	; 0x90
    1eaa:	009a      	lsls	r2, r3, #2
    1eac:	493b      	ldr	r1, [pc, #236]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1eae:	4b3c      	ldr	r3, [pc, #240]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1eb0:	0018      	movs	r0, r3
    1eb2:	4b3c      	ldr	r3, [pc, #240]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1eb4:	4798      	blx	r3
    1eb6:	2384      	movs	r3, #132	; 0x84
    1eb8:	18fb      	adds	r3, r7, r3
    1eba:	681b      	ldr	r3, [r3, #0]
    1ebc:	785b      	ldrb	r3, [r3, #1]
    1ebe:	001a      	movs	r2, r3
    1ec0:	4b46      	ldr	r3, [pc, #280]	; (1fdc <m2m_wifi_connect_sc+0x3e0>)
    1ec2:	0011      	movs	r1, r2
    1ec4:	0018      	movs	r0, r3
    1ec6:	4b37      	ldr	r3, [pc, #220]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1ec8:	4798      	blx	r3
    1eca:	200d      	movs	r0, #13
    1ecc:	4b38      	ldr	r3, [pc, #224]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1ece:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ed0:	2397      	movs	r3, #151	; 0x97
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	22f4      	movs	r2, #244	; 0xf4
    1ed6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1ed8:	e0ae      	b.n	2038 <STACK_SIZE+0x38>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1eda:	2384      	movs	r3, #132	; 0x84
    1edc:	18fb      	adds	r3, r7, r3
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	1c98      	adds	r0, r3, #2
    1ee2:	2388      	movs	r3, #136	; 0x88
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	1c99      	adds	r1, r3, #2
    1eea:	2388      	movs	r3, #136	; 0x88
    1eec:	18fb      	adds	r3, r7, r3
    1eee:	681b      	ldr	r3, [r3, #0]
    1ef0:	785b      	ldrb	r3, [r3, #1]
    1ef2:	001a      	movs	r2, r3
    1ef4:	4b36      	ldr	r3, [pc, #216]	; (1fd0 <m2m_wifi_connect_sc+0x3d4>)
    1ef6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    1ef8:	2388      	movs	r3, #136	; 0x88
    1efa:	18fb      	adds	r3, r7, r3
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	785b      	ldrb	r3, [r3, #1]
    1f00:	001a      	movs	r2, r3
    1f02:	2384      	movs	r3, #132	; 0x84
    1f04:	18fb      	adds	r3, r7, r3
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	189b      	adds	r3, r3, r2
    1f0a:	2200      	movs	r2, #0
    1f0c:	709a      	strb	r2, [r3, #2]
    1f0e:	e082      	b.n	2016 <STACK_SIZE+0x16>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    1f10:	230a      	movs	r3, #10
    1f12:	18fb      	adds	r3, r7, r3
    1f14:	781b      	ldrb	r3, [r3, #0]
    1f16:	2b02      	cmp	r3, #2
    1f18:	d130      	bne.n	1f7c <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    1f1a:	2382      	movs	r3, #130	; 0x82
    1f1c:	18fc      	adds	r4, r7, r3
    1f1e:	687b      	ldr	r3, [r7, #4]
    1f20:	0018      	movs	r0, r3
    1f22:	4b24      	ldr	r3, [pc, #144]	; (1fb4 <m2m_wifi_connect_sc+0x3b8>)
    1f24:	4798      	blx	r3
    1f26:	0003      	movs	r3, r0
    1f28:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1f2a:	2382      	movs	r3, #130	; 0x82
    1f2c:	18fb      	adds	r3, r7, r3
    1f2e:	881b      	ldrh	r3, [r3, #0]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d004      	beq.n	1f3e <m2m_wifi_connect_sc+0x342>
    1f34:	2382      	movs	r3, #130	; 0x82
    1f36:	18fb      	adds	r3, r7, r3
    1f38:	881b      	ldrh	r3, [r3, #0]
    1f3a:	2b40      	cmp	r3, #64	; 0x40
    1f3c:	d911      	bls.n	1f62 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    1f3e:	4a28      	ldr	r2, [pc, #160]	; (1fe0 <m2m_wifi_connect_sc+0x3e4>)
    1f40:	4916      	ldr	r1, [pc, #88]	; (1f9c <m2m_wifi_connect_sc+0x3a0>)
    1f42:	4b17      	ldr	r3, [pc, #92]	; (1fa0 <m2m_wifi_connect_sc+0x3a4>)
    1f44:	0018      	movs	r0, r3
    1f46:	4b17      	ldr	r3, [pc, #92]	; (1fa4 <m2m_wifi_connect_sc+0x3a8>)
    1f48:	4798      	blx	r3
    1f4a:	4b26      	ldr	r3, [pc, #152]	; (1fe4 <m2m_wifi_connect_sc+0x3e8>)
    1f4c:	0018      	movs	r0, r3
    1f4e:	4b17      	ldr	r3, [pc, #92]	; (1fac <m2m_wifi_connect_sc+0x3b0>)
    1f50:	4798      	blx	r3
    1f52:	200d      	movs	r0, #13
    1f54:	4b16      	ldr	r3, [pc, #88]	; (1fb0 <m2m_wifi_connect_sc+0x3b4>)
    1f56:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f58:	2397      	movs	r3, #151	; 0x97
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	22f4      	movs	r2, #244	; 0xf4
    1f5e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1f60:	e06a      	b.n	2038 <STACK_SIZE+0x38>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1f62:	238c      	movs	r3, #140	; 0x8c
    1f64:	18fb      	adds	r3, r7, r3
    1f66:	6818      	ldr	r0, [r3, #0]
    1f68:	2382      	movs	r3, #130	; 0x82
    1f6a:	18fb      	adds	r3, r7, r3
    1f6c:	881b      	ldrh	r3, [r3, #0]
    1f6e:	3301      	adds	r3, #1
    1f70:	001a      	movs	r2, r3
    1f72:	687b      	ldr	r3, [r7, #4]
    1f74:	0019      	movs	r1, r3
    1f76:	4b16      	ldr	r3, [pc, #88]	; (1fd0 <m2m_wifi_connect_sc+0x3d4>)
    1f78:	4798      	blx	r3
    1f7a:	e04c      	b.n	2016 <STACK_SIZE+0x16>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    1f7c:	230a      	movs	r3, #10
    1f7e:	18fb      	adds	r3, r7, r3
    1f80:	781b      	ldrb	r3, [r3, #0]
    1f82:	2b04      	cmp	r3, #4
    1f84:	d130      	bne.n	1fe8 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1f86:	238c      	movs	r3, #140	; 0x8c
    1f88:	18fb      	adds	r3, r7, r3
    1f8a:	681b      	ldr	r3, [r3, #0]
    1f8c:	6879      	ldr	r1, [r7, #4]
    1f8e:	223e      	movs	r2, #62	; 0x3e
    1f90:	0018      	movs	r0, r3
    1f92:	4b0f      	ldr	r3, [pc, #60]	; (1fd0 <m2m_wifi_connect_sc+0x3d4>)
    1f94:	4798      	blx	r3
    1f96:	e03e      	b.n	2016 <STACK_SIZE+0x16>
    1f98:	00000203 	.word	0x00000203
    1f9c:	0001254c 	.word	0x0001254c
    1fa0:	00012238 	.word	0x00012238
    1fa4:	00010d75 	.word	0x00010d75
    1fa8:	000123e4 	.word	0x000123e4
    1fac:	00010e95 	.word	0x00010e95
    1fb0:	00010da9 	.word	0x00010da9
    1fb4:	00000ccd 	.word	0x00000ccd
    1fb8:	0000020f 	.word	0x0000020f
    1fbc:	000123f8 	.word	0x000123f8
    1fc0:	00000219 	.word	0x00000219
    1fc4:	00012404 	.word	0x00012404
    1fc8:	00000222 	.word	0x00000222
    1fcc:	00012418 	.word	0x00012418
    1fd0:	00000c51 	.word	0x00000c51
    1fd4:	00000239 	.word	0x00000239
    1fd8:	00012424 	.word	0x00012424
    1fdc:	00012440 	.word	0x00012440
    1fe0:	0000024f 	.word	0x0000024f
    1fe4:	0001245c 	.word	0x0001245c
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    1fe8:	230a      	movs	r3, #10
    1fea:	18fb      	adds	r3, r7, r3
    1fec:	781b      	ldrb	r3, [r3, #0]
    1fee:	2b01      	cmp	r3, #1
    1ff0:	d011      	beq.n	2016 <STACK_SIZE+0x16>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    1ff2:	4a15      	ldr	r2, [pc, #84]	; (2048 <STACK_SIZE+0x48>)
    1ff4:	4915      	ldr	r1, [pc, #84]	; (204c <STACK_SIZE+0x4c>)
    1ff6:	4b16      	ldr	r3, [pc, #88]	; (2050 <STACK_SIZE+0x50>)
    1ff8:	0018      	movs	r0, r3
    1ffa:	4b16      	ldr	r3, [pc, #88]	; (2054 <STACK_SIZE+0x54>)
    1ffc:	4798      	blx	r3
    1ffe:	4b16      	ldr	r3, [pc, #88]	; (2058 <STACK_SIZE+0x58>)
    2000:	0018      	movs	r0, r3
    2002:	4b16      	ldr	r3, [pc, #88]	; (205c <STACK_SIZE+0x5c>)
    2004:	4798      	blx	r3
    2006:	200d      	movs	r0, #13
    2008:	4b15      	ldr	r3, [pc, #84]	; (2060 <STACK_SIZE+0x60>)
    200a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    200c:	2397      	movs	r3, #151	; 0x97
    200e:	18fb      	adds	r3, r7, r3
    2010:	22f4      	movs	r2, #244	; 0xf4
    2012:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    2014:	e010      	b.n	2038 <STACK_SIZE+0x38>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2016:	2397      	movs	r3, #151	; 0x97
    2018:	18fc      	adds	r4, r7, r3
    201a:	2314      	movs	r3, #20
    201c:	18fa      	adds	r2, r7, r3
    201e:	2300      	movs	r3, #0
    2020:	9302      	str	r3, [sp, #8]
    2022:	2300      	movs	r3, #0
    2024:	9301      	str	r3, [sp, #4]
    2026:	2300      	movs	r3, #0
    2028:	9300      	str	r3, [sp, #0]
    202a:	236c      	movs	r3, #108	; 0x6c
    202c:	2128      	movs	r1, #40	; 0x28
    202e:	2001      	movs	r0, #1
    2030:	4d0c      	ldr	r5, [pc, #48]	; (2064 <STACK_SIZE+0x64>)
    2032:	47a8      	blx	r5
    2034:	0003      	movs	r3, r0
    2036:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    2038:	2397      	movs	r3, #151	; 0x97
    203a:	18fb      	adds	r3, r7, r3
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	b25b      	sxtb	r3, r3
}
    2040:	0018      	movs	r0, r3
    2042:	46bd      	mov	sp, r7
    2044:	b026      	add	sp, #152	; 0x98
    2046:	bdb0      	pop	{r4, r5, r7, pc}
    2048:	0000025f 	.word	0x0000025f
    204c:	0001254c 	.word	0x0001254c
    2050:	00012238 	.word	0x00012238
    2054:	00010d75 	.word	0x00010d75
    2058:	00012478 	.word	0x00012478
    205c:	00010e95 	.word	0x00010e95
    2060:	00010da9 	.word	0x00010da9
    2064:	00001069 	.word	0x00001069

00002068 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    2068:	b590      	push	{r4, r7, lr}
    206a:	b085      	sub	sp, #20
    206c:	af00      	add	r7, sp, #0
    206e:	6078      	str	r0, [r7, #4]
    2070:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    2072:	230f      	movs	r3, #15
    2074:	18fb      	adds	r3, r7, r3
    2076:	2200      	movs	r2, #0
    2078:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    207a:	230f      	movs	r3, #15
    207c:	18fc      	adds	r4, r7, r3
    207e:	4b14      	ldr	r3, [pc, #80]	; (20d0 <m2m_wifi_get_otp_mac_address+0x68>)
    2080:	4798      	blx	r3
    2082:	0003      	movs	r3, r0
    2084:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2086:	230f      	movs	r3, #15
    2088:	18fb      	adds	r3, r7, r3
    208a:	781b      	ldrb	r3, [r3, #0]
    208c:	b25b      	sxtb	r3, r3
    208e:	2b00      	cmp	r3, #0
    2090:	d115      	bne.n	20be <m2m_wifi_get_otp_mac_address+0x56>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    2092:	230f      	movs	r3, #15
    2094:	18fc      	adds	r4, r7, r3
    2096:	683a      	ldr	r2, [r7, #0]
    2098:	687b      	ldr	r3, [r7, #4]
    209a:	0011      	movs	r1, r2
    209c:	0018      	movs	r0, r3
    209e:	4b0d      	ldr	r3, [pc, #52]	; (20d4 <m2m_wifi_get_otp_mac_address+0x6c>)
    20a0:	4798      	blx	r3
    20a2:	0003      	movs	r3, r0
    20a4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    20a6:	230f      	movs	r3, #15
    20a8:	18fb      	adds	r3, r7, r3
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	b25b      	sxtb	r3, r3
    20ae:	2b00      	cmp	r3, #0
    20b0:	d105      	bne.n	20be <m2m_wifi_get_otp_mac_address+0x56>
		{
			ret = hif_chip_sleep();
    20b2:	230f      	movs	r3, #15
    20b4:	18fc      	adds	r4, r7, r3
    20b6:	4b08      	ldr	r3, [pc, #32]	; (20d8 <m2m_wifi_get_otp_mac_address+0x70>)
    20b8:	4798      	blx	r3
    20ba:	0003      	movs	r3, r0
    20bc:	7023      	strb	r3, [r4, #0]
		}
	}
	return ret;
    20be:	230f      	movs	r3, #15
    20c0:	18fb      	adds	r3, r7, r3
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	b25b      	sxtb	r3, r3
}
    20c6:	0018      	movs	r0, r3
    20c8:	46bd      	mov	sp, r7
    20ca:	b005      	add	sp, #20
    20cc:	bd90      	pop	{r4, r7, pc}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	00000e9d 	.word	0x00000e9d
    20d4:	00002899 	.word	0x00002899
    20d8:	00000f35 	.word	0x00000f35

000020dc <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    20dc:	b590      	push	{r4, r7, lr}
    20de:	b085      	sub	sp, #20
    20e0:	af00      	add	r7, sp, #0
    20e2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    20e4:	230f      	movs	r3, #15
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	2200      	movs	r2, #0
    20ea:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    20ec:	230f      	movs	r3, #15
    20ee:	18fc      	adds	r4, r7, r3
    20f0:	4b12      	ldr	r3, [pc, #72]	; (213c <m2m_wifi_get_mac_address+0x60>)
    20f2:	4798      	blx	r3
    20f4:	0003      	movs	r3, r0
    20f6:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    20f8:	230f      	movs	r3, #15
    20fa:	18fb      	adds	r3, r7, r3
    20fc:	781b      	ldrb	r3, [r3, #0]
    20fe:	b25b      	sxtb	r3, r3
    2100:	2b00      	cmp	r3, #0
    2102:	d113      	bne.n	212c <m2m_wifi_get_mac_address+0x50>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    2104:	230f      	movs	r3, #15
    2106:	18fc      	adds	r4, r7, r3
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	0018      	movs	r0, r3
    210c:	4b0c      	ldr	r3, [pc, #48]	; (2140 <m2m_wifi_get_mac_address+0x64>)
    210e:	4798      	blx	r3
    2110:	0003      	movs	r3, r0
    2112:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    2114:	230f      	movs	r3, #15
    2116:	18fb      	adds	r3, r7, r3
    2118:	781b      	ldrb	r3, [r3, #0]
    211a:	b25b      	sxtb	r3, r3
    211c:	2b00      	cmp	r3, #0
    211e:	d105      	bne.n	212c <m2m_wifi_get_mac_address+0x50>
		{
			ret = hif_chip_sleep();
    2120:	230f      	movs	r3, #15
    2122:	18fc      	adds	r4, r7, r3
    2124:	4b07      	ldr	r3, [pc, #28]	; (2144 <m2m_wifi_get_mac_address+0x68>)
    2126:	4798      	blx	r3
    2128:	0003      	movs	r3, r0
    212a:	7023      	strb	r3, [r4, #0]
		}
	}

	return ret;
    212c:	230f      	movs	r3, #15
    212e:	18fb      	adds	r3, r7, r3
    2130:	781b      	ldrb	r3, [r3, #0]
    2132:	b25b      	sxtb	r3, r3
}
    2134:	0018      	movs	r0, r3
    2136:	46bd      	mov	sp, r7
    2138:	b005      	add	sp, #20
    213a:	bd90      	pop	{r4, r7, pc}
    213c:	00000e9d 	.word	0x00000e9d
    2140:	0000299d 	.word	0x0000299d
    2144:	00000f35 	.word	0x00000f35

00002148 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    2148:	b590      	push	{r4, r7, lr}
    214a:	b087      	sub	sp, #28
    214c:	af00      	add	r7, sp, #0
    214e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2150:	2317      	movs	r3, #23
    2152:	18fb      	adds	r3, r7, r3
    2154:	2200      	movs	r2, #0
    2156:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    2158:	687b      	ldr	r3, [r7, #4]
    215a:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    215c:	693a      	ldr	r2, [r7, #16]
    215e:	23a5      	movs	r3, #165	; 0xa5
    2160:	015b      	lsls	r3, r3, #5
    2162:	0011      	movs	r1, r2
    2164:	0018      	movs	r0, r3
    2166:	4b13      	ldr	r3, [pc, #76]	; (21b4 <chip_apply_conf+0x6c>)
    2168:	4798      	blx	r3
		if(val32 != 0) {		
    216a:	693b      	ldr	r3, [r7, #16]
    216c:	2b00      	cmp	r3, #0
    216e:	d018      	beq.n	21a2 <chip_apply_conf+0x5a>
			uint32 reg = 0;
    2170:	2300      	movs	r3, #0
    2172:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2174:	2317      	movs	r3, #23
    2176:	18fc      	adds	r4, r7, r3
    2178:	230c      	movs	r3, #12
    217a:	18fa      	adds	r2, r7, r3
    217c:	23a5      	movs	r3, #165	; 0xa5
    217e:	015b      	lsls	r3, r3, #5
    2180:	0011      	movs	r1, r2
    2182:	0018      	movs	r0, r3
    2184:	4b0c      	ldr	r3, [pc, #48]	; (21b8 <chip_apply_conf+0x70>)
    2186:	4798      	blx	r3
    2188:	0003      	movs	r3, r0
    218a:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    218c:	2317      	movs	r3, #23
    218e:	18fb      	adds	r3, r7, r3
    2190:	781b      	ldrb	r3, [r3, #0]
    2192:	b25b      	sxtb	r3, r3
    2194:	2b00      	cmp	r3, #0
    2196:	d1e1      	bne.n	215c <chip_apply_conf+0x14>
				if(reg == val32)
    2198:	68fa      	ldr	r2, [r7, #12]
    219a:	693b      	ldr	r3, [r7, #16]
    219c:	429a      	cmp	r2, r3
    219e:	d002      	beq.n	21a6 <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    21a0:	e7dc      	b.n	215c <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	e000      	b.n	21a8 <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    21a6:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    21a8:	2300      	movs	r3, #0
}
    21aa:	0018      	movs	r0, r3
    21ac:	46bd      	mov	sp, r7
    21ae:	b007      	add	sp, #28
    21b0:	bd90      	pop	{r4, r7, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	00002b0d 	.word	0x00002b0d
    21b8:	00002ae9 	.word	0x00002ae9

000021bc <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    21bc:	b590      	push	{r4, r7, lr}
    21be:	b085      	sub	sp, #20
    21c0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    21c2:	230f      	movs	r3, #15
    21c4:	18fb      	adds	r3, r7, r3
    21c6:	2200      	movs	r2, #0
    21c8:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    21ca:	2300      	movs	r3, #0
    21cc:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    21ce:	2001      	movs	r0, #1
    21d0:	4b64      	ldr	r3, [pc, #400]	; (2364 <nm_clkless_wake+0x1a8>)
    21d2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    21d4:	230f      	movs	r3, #15
    21d6:	18fc      	adds	r4, r7, r3
    21d8:	1d3b      	adds	r3, r7, #4
    21da:	0019      	movs	r1, r3
    21dc:	2001      	movs	r0, #1
    21de:	4b62      	ldr	r3, [pc, #392]	; (2368 <nm_clkless_wake+0x1ac>)
    21e0:	4798      	blx	r3
    21e2:	0003      	movs	r3, r0
    21e4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    21e6:	230f      	movs	r3, #15
    21e8:	18fb      	adds	r3, r7, r3
    21ea:	781b      	ldrb	r3, [r3, #0]
    21ec:	b25b      	sxtb	r3, r3
    21ee:	2b00      	cmp	r3, #0
    21f0:	d00d      	beq.n	220e <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    21f2:	495e      	ldr	r1, [pc, #376]	; (236c <nm_clkless_wake+0x1b0>)
    21f4:	4b5e      	ldr	r3, [pc, #376]	; (2370 <nm_clkless_wake+0x1b4>)
    21f6:	2272      	movs	r2, #114	; 0x72
    21f8:	0018      	movs	r0, r3
    21fa:	4b5e      	ldr	r3, [pc, #376]	; (2374 <nm_clkless_wake+0x1b8>)
    21fc:	4798      	blx	r3
    21fe:	4b5e      	ldr	r3, [pc, #376]	; (2378 <nm_clkless_wake+0x1bc>)
    2200:	0018      	movs	r0, r3
    2202:	4b5e      	ldr	r3, [pc, #376]	; (237c <nm_clkless_wake+0x1c0>)
    2204:	4798      	blx	r3
    2206:	200d      	movs	r0, #13
    2208:	4b5d      	ldr	r3, [pc, #372]	; (2380 <nm_clkless_wake+0x1c4>)
    220a:	4798      	blx	r3
		goto _WAKE_EXIT;
    220c:	e0a1      	b.n	2352 <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	2202      	movs	r2, #2
    2212:	4313      	orrs	r3, r2
    2214:	0019      	movs	r1, r3
    2216:	2001      	movs	r0, #1
    2218:	4b5a      	ldr	r3, [pc, #360]	; (2384 <nm_clkless_wake+0x1c8>)
    221a:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    221c:	2001      	movs	r0, #1
    221e:	4b51      	ldr	r3, [pc, #324]	; (2364 <nm_clkless_wake+0x1a8>)
    2220:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2222:	4b59      	ldr	r3, [pc, #356]	; (2388 <nm_clkless_wake+0x1cc>)
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	220f      	movs	r2, #15
    2228:	18bc      	adds	r4, r7, r2
    222a:	003a      	movs	r2, r7
    222c:	0011      	movs	r1, r2
    222e:	0018      	movs	r0, r3
    2230:	4b4d      	ldr	r3, [pc, #308]	; (2368 <nm_clkless_wake+0x1ac>)
    2232:	4798      	blx	r3
    2234:	0003      	movs	r3, r0
    2236:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    2238:	230f      	movs	r3, #15
    223a:	18fb      	adds	r3, r7, r3
    223c:	781b      	ldrb	r3, [r3, #0]
    223e:	b25b      	sxtb	r3, r3
    2240:	2b00      	cmp	r3, #0
    2242:	d108      	bne.n	2256 <nm_clkless_wake+0x9a>
    2244:	230f      	movs	r3, #15
    2246:	18fb      	adds	r3, r7, r3
    2248:	781b      	ldrb	r3, [r3, #0]
    224a:	b25b      	sxtb	r3, r3
    224c:	2b00      	cmp	r3, #0
    224e:	d162      	bne.n	2316 <nm_clkless_wake+0x15a>
    2250:	683b      	ldr	r3, [r7, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d15f      	bne.n	2316 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    2256:	4b4c      	ldr	r3, [pc, #304]	; (2388 <nm_clkless_wake+0x1cc>)
    2258:	220e      	movs	r2, #14
    225a:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    225c:	2001      	movs	r0, #1
    225e:	4b41      	ldr	r3, [pc, #260]	; (2364 <nm_clkless_wake+0x1a8>)
    2260:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    2262:	4b49      	ldr	r3, [pc, #292]	; (2388 <nm_clkless_wake+0x1cc>)
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	220f      	movs	r2, #15
    2268:	18bc      	adds	r4, r7, r2
    226a:	003a      	movs	r2, r7
    226c:	0011      	movs	r1, r2
    226e:	0018      	movs	r0, r3
    2270:	4b3d      	ldr	r3, [pc, #244]	; (2368 <nm_clkless_wake+0x1ac>)
    2272:	4798      	blx	r3
    2274:	0003      	movs	r3, r0
    2276:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    2278:	230f      	movs	r3, #15
    227a:	18fb      	adds	r3, r7, r3
    227c:	781b      	ldrb	r3, [r3, #0]
    227e:	b25b      	sxtb	r3, r3
    2280:	2b00      	cmp	r3, #0
    2282:	d108      	bne.n	2296 <nm_clkless_wake+0xda>
    2284:	230f      	movs	r3, #15
    2286:	18fb      	adds	r3, r7, r3
    2288:	781b      	ldrb	r3, [r3, #0]
    228a:	b25b      	sxtb	r3, r3
    228c:	2b00      	cmp	r3, #0
    228e:	d142      	bne.n	2316 <nm_clkless_wake+0x15a>
    2290:	683b      	ldr	r3, [r7, #0]
    2292:	2b00      	cmp	r3, #0
    2294:	d13f      	bne.n	2316 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    2296:	4b3c      	ldr	r3, [pc, #240]	; (2388 <nm_clkless_wake+0x1cc>)
    2298:	2213      	movs	r2, #19
    229a:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    229c:	2001      	movs	r0, #1
    229e:	4b31      	ldr	r3, [pc, #196]	; (2364 <nm_clkless_wake+0x1a8>)
    22a0:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    22a2:	4b39      	ldr	r3, [pc, #228]	; (2388 <nm_clkless_wake+0x1cc>)
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	220f      	movs	r2, #15
    22a8:	18bc      	adds	r4, r7, r2
    22aa:	003a      	movs	r2, r7
    22ac:	0011      	movs	r1, r2
    22ae:	0018      	movs	r0, r3
    22b0:	4b2d      	ldr	r3, [pc, #180]	; (2368 <nm_clkless_wake+0x1ac>)
    22b2:	4798      	blx	r3
    22b4:	0003      	movs	r3, r0
    22b6:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    22b8:	230f      	movs	r3, #15
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	b25b      	sxtb	r3, r3
    22c0:	2b00      	cmp	r3, #0
    22c2:	d028      	beq.n	2316 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    22c4:	4929      	ldr	r1, [pc, #164]	; (236c <nm_clkless_wake+0x1b0>)
    22c6:	4b2a      	ldr	r3, [pc, #168]	; (2370 <nm_clkless_wake+0x1b4>)
    22c8:	2296      	movs	r2, #150	; 0x96
    22ca:	0018      	movs	r0, r3
    22cc:	4b29      	ldr	r3, [pc, #164]	; (2374 <nm_clkless_wake+0x1b8>)
    22ce:	4798      	blx	r3
    22d0:	4b2e      	ldr	r3, [pc, #184]	; (238c <nm_clkless_wake+0x1d0>)
    22d2:	0018      	movs	r0, r3
    22d4:	4b29      	ldr	r3, [pc, #164]	; (237c <nm_clkless_wake+0x1c0>)
    22d6:	4798      	blx	r3
    22d8:	200d      	movs	r0, #13
    22da:	4b29      	ldr	r3, [pc, #164]	; (2380 <nm_clkless_wake+0x1c4>)
    22dc:	4798      	blx	r3
					goto _WAKE_EXIT;
    22de:	e038      	b.n	2352 <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    22e0:	2002      	movs	r0, #2
    22e2:	4b20      	ldr	r3, [pc, #128]	; (2364 <nm_clkless_wake+0x1a8>)
    22e4:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    22e6:	4b28      	ldr	r3, [pc, #160]	; (2388 <nm_clkless_wake+0x1cc>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	003a      	movs	r2, r7
    22ec:	0011      	movs	r1, r2
    22ee:	0018      	movs	r0, r3
    22f0:	4b1d      	ldr	r3, [pc, #116]	; (2368 <nm_clkless_wake+0x1ac>)
    22f2:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    22f4:	683b      	ldr	r3, [r7, #0]
    22f6:	2204      	movs	r2, #4
    22f8:	4013      	ands	r3, r2
    22fa:	d10c      	bne.n	2316 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    22fc:	491b      	ldr	r1, [pc, #108]	; (236c <nm_clkless_wake+0x1b0>)
    22fe:	4b1c      	ldr	r3, [pc, #112]	; (2370 <nm_clkless_wake+0x1b4>)
    2300:	22aa      	movs	r2, #170	; 0xaa
    2302:	0018      	movs	r0, r3
    2304:	4b1b      	ldr	r3, [pc, #108]	; (2374 <nm_clkless_wake+0x1b8>)
    2306:	4798      	blx	r3
    2308:	4b21      	ldr	r3, [pc, #132]	; (2390 <nm_clkless_wake+0x1d4>)
    230a:	0018      	movs	r0, r3
    230c:	4b1b      	ldr	r3, [pc, #108]	; (237c <nm_clkless_wake+0x1c0>)
    230e:	4798      	blx	r3
    2310:	200d      	movs	r0, #13
    2312:	4b1b      	ldr	r3, [pc, #108]	; (2380 <nm_clkless_wake+0x1c4>)
    2314:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    2316:	683b      	ldr	r3, [r7, #0]
    2318:	2204      	movs	r2, #4
    231a:	4013      	ands	r3, r2
    231c:	d109      	bne.n	2332 <nm_clkless_wake+0x176>
    231e:	68bb      	ldr	r3, [r7, #8]
    2320:	3301      	adds	r3, #1
    2322:	60bb      	str	r3, [r7, #8]
    2324:	68ba      	ldr	r2, [r7, #8]
    2326:	4b1b      	ldr	r3, [pc, #108]	; (2394 <nm_clkless_wake+0x1d8>)
    2328:	2103      	movs	r1, #3
    232a:	0010      	movs	r0, r2
    232c:	4798      	blx	r3
    232e:	1e0b      	subs	r3, r1, #0
    2330:	d0d6      	beq.n	22e0 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    2332:	683b      	ldr	r3, [r7, #0]
    2334:	2204      	movs	r2, #4
    2336:	4013      	ands	r3, r2
    2338:	d106      	bne.n	2348 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2202      	movs	r2, #2
    233e:	4313      	orrs	r3, r2
    2340:	0019      	movs	r1, r3
    2342:	2001      	movs	r0, #1
    2344:	4b0f      	ldr	r3, [pc, #60]	; (2384 <nm_clkless_wake+0x1c8>)
    2346:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    2348:	683b      	ldr	r3, [r7, #0]
    234a:	2204      	movs	r2, #4
    234c:	4013      	ands	r3, r2
    234e:	d100      	bne.n	2352 <nm_clkless_wake+0x196>
    2350:	e75d      	b.n	220e <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    2352:	230f      	movs	r3, #15
    2354:	18fb      	adds	r3, r7, r3
    2356:	781b      	ldrb	r3, [r3, #0]
    2358:	b25b      	sxtb	r3, r3
}
    235a:	0018      	movs	r0, r3
    235c:	46bd      	mov	sp, r7
    235e:	b005      	add	sp, #20
    2360:	bd90      	pop	{r4, r7, pc}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	000003dd 	.word	0x000003dd
    2368:	00002ae9 	.word	0x00002ae9
    236c:	00012688 	.word	0x00012688
    2370:	00012560 	.word	0x00012560
    2374:	00010d75 	.word	0x00010d75
    2378:	00012574 	.word	0x00012574
    237c:	00010e95 	.word	0x00010e95
    2380:	00010da9 	.word	0x00010da9
    2384:	00002b0d 	.word	0x00002b0d
    2388:	2000000c 	.word	0x2000000c
    238c:	00012594 	.word	0x00012594
    2390:	000125b4 	.word	0x000125b4
    2394:	0000eb01 	.word	0x0000eb01

00002398 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    2398:	b590      	push	{r4, r7, lr}
    239a:	b083      	sub	sp, #12
    239c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    239e:	1dfc      	adds	r4, r7, #7
    23a0:	003b      	movs	r3, r7
    23a2:	4a29      	ldr	r2, [pc, #164]	; (2448 <enable_interrupts+0xb0>)
    23a4:	0019      	movs	r1, r3
    23a6:	0010      	movs	r0, r2
    23a8:	4b28      	ldr	r3, [pc, #160]	; (244c <enable_interrupts+0xb4>)
    23aa:	4798      	blx	r3
    23ac:	0003      	movs	r3, r0
    23ae:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    23b0:	1dfb      	adds	r3, r7, #7
    23b2:	781b      	ldrb	r3, [r3, #0]
    23b4:	b25b      	sxtb	r3, r3
    23b6:	2b00      	cmp	r3, #0
    23b8:	d002      	beq.n	23c0 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    23ba:	2306      	movs	r3, #6
    23bc:	425b      	negs	r3, r3
    23be:	e03f      	b.n	2440 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    23c0:	683b      	ldr	r3, [r7, #0]
    23c2:	2280      	movs	r2, #128	; 0x80
    23c4:	0052      	lsls	r2, r2, #1
    23c6:	4313      	orrs	r3, r2
    23c8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    23ca:	683b      	ldr	r3, [r7, #0]
    23cc:	1dfc      	adds	r4, r7, #7
    23ce:	4a1e      	ldr	r2, [pc, #120]	; (2448 <enable_interrupts+0xb0>)
    23d0:	0019      	movs	r1, r3
    23d2:	0010      	movs	r0, r2
    23d4:	4b1e      	ldr	r3, [pc, #120]	; (2450 <enable_interrupts+0xb8>)
    23d6:	4798      	blx	r3
    23d8:	0003      	movs	r3, r0
    23da:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    23dc:	1dfb      	adds	r3, r7, #7
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	b25b      	sxtb	r3, r3
    23e2:	2b00      	cmp	r3, #0
    23e4:	d002      	beq.n	23ec <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    23e6:	2306      	movs	r3, #6
    23e8:	425b      	negs	r3, r3
    23ea:	e029      	b.n	2440 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    23ec:	1dfc      	adds	r4, r7, #7
    23ee:	003a      	movs	r2, r7
    23f0:	23d0      	movs	r3, #208	; 0xd0
    23f2:	015b      	lsls	r3, r3, #5
    23f4:	0011      	movs	r1, r2
    23f6:	0018      	movs	r0, r3
    23f8:	4b14      	ldr	r3, [pc, #80]	; (244c <enable_interrupts+0xb4>)
    23fa:	4798      	blx	r3
    23fc:	0003      	movs	r3, r0
    23fe:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    2400:	1dfb      	adds	r3, r7, #7
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	b25b      	sxtb	r3, r3
    2406:	2b00      	cmp	r3, #0
    2408:	d002      	beq.n	2410 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    240a:	2306      	movs	r3, #6
    240c:	425b      	negs	r3, r3
    240e:	e017      	b.n	2440 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    2410:	683b      	ldr	r3, [r7, #0]
    2412:	2280      	movs	r2, #128	; 0x80
    2414:	0252      	lsls	r2, r2, #9
    2416:	4313      	orrs	r3, r2
    2418:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    241a:	683a      	ldr	r2, [r7, #0]
    241c:	1dfc      	adds	r4, r7, #7
    241e:	23d0      	movs	r3, #208	; 0xd0
    2420:	015b      	lsls	r3, r3, #5
    2422:	0011      	movs	r1, r2
    2424:	0018      	movs	r0, r3
    2426:	4b0a      	ldr	r3, [pc, #40]	; (2450 <enable_interrupts+0xb8>)
    2428:	4798      	blx	r3
    242a:	0003      	movs	r3, r0
    242c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    242e:	1dfb      	adds	r3, r7, #7
    2430:	781b      	ldrb	r3, [r3, #0]
    2432:	b25b      	sxtb	r3, r3
    2434:	2b00      	cmp	r3, #0
    2436:	d002      	beq.n	243e <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    2438:	2306      	movs	r3, #6
    243a:	425b      	negs	r3, r3
    243c:	e000      	b.n	2440 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    243e:	2300      	movs	r3, #0
}
    2440:	0018      	movs	r0, r3
    2442:	46bd      	mov	sp, r7
    2444:	b003      	add	sp, #12
    2446:	bd90      	pop	{r4, r7, pc}
    2448:	00001408 	.word	0x00001408
    244c:	00002ae9 	.word	0x00002ae9
    2450:	00002b0d 	.word	0x00002b0d

00002454 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2454:	b580      	push	{r7, lr}
    2456:	b082      	sub	sp, #8
    2458:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    245a:	4b32      	ldr	r3, [pc, #200]	; (2524 <nmi_get_chipid+0xd0>)
    245c:	681b      	ldr	r3, [r3, #0]
    245e:	2b00      	cmp	r3, #0
    2460:	d159      	bne.n	2516 <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2462:	4a30      	ldr	r2, [pc, #192]	; (2524 <nmi_get_chipid+0xd0>)
    2464:	2380      	movs	r3, #128	; 0x80
    2466:	015b      	lsls	r3, r3, #5
    2468:	0011      	movs	r1, r2
    246a:	0018      	movs	r0, r3
    246c:	4b2e      	ldr	r3, [pc, #184]	; (2528 <nmi_get_chipid+0xd4>)
    246e:	4798      	blx	r3
    2470:	1e03      	subs	r3, r0, #0
    2472:	d004      	beq.n	247e <nmi_get_chipid+0x2a>
			chipid = 0;
    2474:	4b2b      	ldr	r3, [pc, #172]	; (2524 <nmi_get_chipid+0xd0>)
    2476:	2200      	movs	r2, #0
    2478:	601a      	str	r2, [r3, #0]
			return 0;
    247a:	2300      	movs	r3, #0
    247c:	e04d      	b.n	251a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    247e:	1d3b      	adds	r3, r7, #4
    2480:	4a2a      	ldr	r2, [pc, #168]	; (252c <nmi_get_chipid+0xd8>)
    2482:	0019      	movs	r1, r3
    2484:	0010      	movs	r0, r2
    2486:	4b28      	ldr	r3, [pc, #160]	; (2528 <nmi_get_chipid+0xd4>)
    2488:	4798      	blx	r3
    248a:	1e03      	subs	r3, r0, #0
    248c:	d004      	beq.n	2498 <nmi_get_chipid+0x44>
			chipid = 0;
    248e:	4b25      	ldr	r3, [pc, #148]	; (2524 <nmi_get_chipid+0xd0>)
    2490:	2200      	movs	r2, #0
    2492:	601a      	str	r2, [r3, #0]
			return 0;
    2494:	2300      	movs	r3, #0
    2496:	e040      	b.n	251a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    2498:	4b22      	ldr	r3, [pc, #136]	; (2524 <nmi_get_chipid+0xd0>)
    249a:	681b      	ldr	r3, [r3, #0]
    249c:	4a24      	ldr	r2, [pc, #144]	; (2530 <nmi_get_chipid+0xdc>)
    249e:	4293      	cmp	r3, r2
    24a0:	d106      	bne.n	24b0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	2b01      	cmp	r3, #1
    24a6:	d029      	beq.n	24fc <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    24a8:	4b1e      	ldr	r3, [pc, #120]	; (2524 <nmi_get_chipid+0xd0>)
    24aa:	4a22      	ldr	r2, [pc, #136]	; (2534 <nmi_get_chipid+0xe0>)
    24ac:	601a      	str	r2, [r3, #0]
    24ae:	e025      	b.n	24fc <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    24b0:	4b1c      	ldr	r3, [pc, #112]	; (2524 <nmi_get_chipid+0xd0>)
    24b2:	681b      	ldr	r3, [r3, #0]
    24b4:	4a20      	ldr	r2, [pc, #128]	; (2538 <nmi_get_chipid+0xe4>)
    24b6:	4293      	cmp	r3, r2
    24b8:	d10d      	bne.n	24d6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    24ba:	687b      	ldr	r3, [r7, #4]
    24bc:	2b03      	cmp	r3, #3
    24be:	d01d      	beq.n	24fc <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	2b04      	cmp	r3, #4
    24c4:	d103      	bne.n	24ce <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    24c6:	4b17      	ldr	r3, [pc, #92]	; (2524 <nmi_get_chipid+0xd0>)
    24c8:	4a1c      	ldr	r2, [pc, #112]	; (253c <nmi_get_chipid+0xe8>)
    24ca:	601a      	str	r2, [r3, #0]
    24cc:	e016      	b.n	24fc <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    24ce:	4b15      	ldr	r3, [pc, #84]	; (2524 <nmi_get_chipid+0xd0>)
    24d0:	4a1b      	ldr	r2, [pc, #108]	; (2540 <nmi_get_chipid+0xec>)
    24d2:	601a      	str	r2, [r3, #0]
    24d4:	e012      	b.n	24fc <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    24d6:	4b13      	ldr	r3, [pc, #76]	; (2524 <nmi_get_chipid+0xd0>)
    24d8:	681b      	ldr	r3, [r3, #0]
    24da:	4a1a      	ldr	r2, [pc, #104]	; (2544 <nmi_get_chipid+0xf0>)
    24dc:	4293      	cmp	r3, r2
    24de:	d10d      	bne.n	24fc <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    24e0:	4a10      	ldr	r2, [pc, #64]	; (2524 <nmi_get_chipid+0xd0>)
    24e2:	23ec      	movs	r3, #236	; 0xec
    24e4:	039b      	lsls	r3, r3, #14
    24e6:	0011      	movs	r1, r2
    24e8:	0018      	movs	r0, r3
    24ea:	4b0f      	ldr	r3, [pc, #60]	; (2528 <nmi_get_chipid+0xd4>)
    24ec:	4798      	blx	r3
    24ee:	1e03      	subs	r3, r0, #0
    24f0:	d004      	beq.n	24fc <nmi_get_chipid+0xa8>
			chipid = 0;
    24f2:	4b0c      	ldr	r3, [pc, #48]	; (2524 <nmi_get_chipid+0xd0>)
    24f4:	2200      	movs	r2, #0
    24f6:	601a      	str	r2, [r3, #0]
			return 0;
    24f8:	2300      	movs	r3, #0
    24fa:	e00e      	b.n	251a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    24fc:	4b09      	ldr	r3, [pc, #36]	; (2524 <nmi_get_chipid+0xd0>)
    24fe:	681b      	ldr	r3, [r3, #0]
    2500:	4a11      	ldr	r2, [pc, #68]	; (2548 <nmi_get_chipid+0xf4>)
    2502:	401a      	ands	r2, r3
    2504:	4b07      	ldr	r3, [pc, #28]	; (2524 <nmi_get_chipid+0xd0>)
    2506:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    2508:	4b06      	ldr	r3, [pc, #24]	; (2524 <nmi_get_chipid+0xd0>)
    250a:	681b      	ldr	r3, [r3, #0]
    250c:	22a0      	movs	r2, #160	; 0xa0
    250e:	02d2      	lsls	r2, r2, #11
    2510:	431a      	orrs	r2, r3
    2512:	4b04      	ldr	r3, [pc, #16]	; (2524 <nmi_get_chipid+0xd0>)
    2514:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    2516:	4b03      	ldr	r3, [pc, #12]	; (2524 <nmi_get_chipid+0xd0>)
    2518:	681b      	ldr	r3, [r3, #0]
}
    251a:	0018      	movs	r0, r3
    251c:	46bd      	mov	sp, r7
    251e:	b002      	add	sp, #8
    2520:	bd80      	pop	{r7, pc}
    2522:	46c0      	nop			; (mov r8, r8)
    2524:	200000d8 	.word	0x200000d8
    2528:	00002ae9 	.word	0x00002ae9
    252c:	000013f4 	.word	0x000013f4
    2530:	001002a0 	.word	0x001002a0
    2534:	001002a1 	.word	0x001002a1
    2538:	001002b0 	.word	0x001002b0
    253c:	001002b1 	.word	0x001002b1
    2540:	001002b2 	.word	0x001002b2
    2544:	001000f0 	.word	0x001000f0
    2548:	fff0ffff 	.word	0xfff0ffff

0000254c <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    254c:	b580      	push	{r7, lr}
    254e:	b086      	sub	sp, #24
    2550:	af00      	add	r7, sp, #0
    2552:	0002      	movs	r2, r0
    2554:	1dfb      	adds	r3, r7, #7
    2556:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    2558:	230b      	movs	r3, #11
    255a:	18fb      	adds	r3, r7, r3
    255c:	2200      	movs	r2, #0
    255e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    2560:	2300      	movs	r3, #0
    2562:	617b      	str	r3, [r7, #20]
    2564:	2300      	movs	r3, #0
    2566:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    2568:	2300      	movs	r3, #0
    256a:	60fb      	str	r3, [r7, #12]

	reg = 0;
    256c:	2300      	movs	r3, #0
    256e:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2570:	4b3b      	ldr	r3, [pc, #236]	; (2660 <wait_for_bootrom+0x114>)
    2572:	0018      	movs	r0, r3
    2574:	4b3b      	ldr	r3, [pc, #236]	; (2664 <wait_for_bootrom+0x118>)
    2576:	4798      	blx	r3
    2578:	0003      	movs	r3, r0
    257a:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    257c:	697b      	ldr	r3, [r7, #20]
    257e:	2b00      	cmp	r3, #0
    2580:	db03      	blt.n	258a <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2582:	2001      	movs	r0, #1
    2584:	4b38      	ldr	r3, [pc, #224]	; (2668 <wait_for_bootrom+0x11c>)
    2586:	4798      	blx	r3
	}
    2588:	e7f2      	b.n	2570 <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    258a:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    258c:	4b37      	ldr	r3, [pc, #220]	; (266c <wait_for_bootrom+0x120>)
    258e:	0018      	movs	r0, r3
    2590:	4b34      	ldr	r3, [pc, #208]	; (2664 <wait_for_bootrom+0x118>)
    2592:	4798      	blx	r3
    2594:	0003      	movs	r3, r0
    2596:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    2598:	697b      	ldr	r3, [r7, #20]
    259a:	2201      	movs	r2, #1
    259c:	4013      	ands	r3, r2
    259e:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    25a0:	697b      	ldr	r3, [r7, #20]
    25a2:	2b00      	cmp	r3, #0
    25a4:	d112      	bne.n	25cc <wait_for_bootrom+0x80>
	{
		reg = 0;
    25a6:	2300      	movs	r3, #0
    25a8:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    25aa:	e00b      	b.n	25c4 <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    25ac:	2001      	movs	r0, #1
    25ae:	4b2e      	ldr	r3, [pc, #184]	; (2668 <wait_for_bootrom+0x11c>)
    25b0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    25b2:	4b2f      	ldr	r3, [pc, #188]	; (2670 <wait_for_bootrom+0x124>)
    25b4:	0018      	movs	r0, r3
    25b6:	4b2b      	ldr	r3, [pc, #172]	; (2664 <wait_for_bootrom+0x118>)
    25b8:	4798      	blx	r3
    25ba:	0003      	movs	r3, r0
    25bc:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    25be:	693b      	ldr	r3, [r7, #16]
    25c0:	3301      	adds	r3, #1
    25c2:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    25c4:	697b      	ldr	r3, [r7, #20]
    25c6:	4a2b      	ldr	r2, [pc, #172]	; (2674 <wait_for_bootrom+0x128>)
    25c8:	4293      	cmp	r3, r2
    25ca:	d1ef      	bne.n	25ac <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    25cc:	1dfb      	adds	r3, r7, #7
    25ce:	781b      	ldrb	r3, [r3, #0]
    25d0:	2b02      	cmp	r3, #2
    25d2:	d10d      	bne.n	25f0 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    25d4:	4a28      	ldr	r2, [pc, #160]	; (2678 <wait_for_bootrom+0x12c>)
    25d6:	4b29      	ldr	r3, [pc, #164]	; (267c <wait_for_bootrom+0x130>)
    25d8:	0011      	movs	r1, r2
    25da:	0018      	movs	r0, r3
    25dc:	4b28      	ldr	r3, [pc, #160]	; (2680 <wait_for_bootrom+0x134>)
    25de:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    25e0:	2380      	movs	r3, #128	; 0x80
    25e2:	035b      	lsls	r3, r3, #13
    25e4:	4a27      	ldr	r2, [pc, #156]	; (2684 <wait_for_bootrom+0x138>)
    25e6:	0019      	movs	r1, r3
    25e8:	0010      	movs	r0, r2
    25ea:	4b25      	ldr	r3, [pc, #148]	; (2680 <wait_for_bootrom+0x134>)
    25ec:	4798      	blx	r3
    25ee:	e015      	b.n	261c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    25f0:	1dfb      	adds	r3, r7, #7
    25f2:	781b      	ldrb	r3, [r3, #0]
    25f4:	2b03      	cmp	r3, #3
    25f6:	d10b      	bne.n	2610 <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    25f8:	4a1f      	ldr	r2, [pc, #124]	; (2678 <wait_for_bootrom+0x12c>)
    25fa:	4b20      	ldr	r3, [pc, #128]	; (267c <wait_for_bootrom+0x130>)
    25fc:	0011      	movs	r1, r2
    25fe:	0018      	movs	r0, r3
    2600:	4b1f      	ldr	r3, [pc, #124]	; (2680 <wait_for_bootrom+0x134>)
    2602:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    2604:	4b1f      	ldr	r3, [pc, #124]	; (2684 <wait_for_bootrom+0x138>)
    2606:	2100      	movs	r1, #0
    2608:	0018      	movs	r0, r3
    260a:	4b1d      	ldr	r3, [pc, #116]	; (2680 <wait_for_bootrom+0x134>)
    260c:	4798      	blx	r3
    260e:	e005      	b.n	261c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    2610:	1dfb      	adds	r3, r7, #7
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	2b04      	cmp	r3, #4
    2616:	d101      	bne.n	261c <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2618:	2380      	movs	r3, #128	; 0x80
    261a:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    261c:	4b1a      	ldr	r3, [pc, #104]	; (2688 <wait_for_bootrom+0x13c>)
    261e:	4798      	blx	r3
    2620:	0003      	movs	r3, r0
    2622:	051b      	lsls	r3, r3, #20
    2624:	0d1a      	lsrs	r2, r3, #20
    2626:	23e8      	movs	r3, #232	; 0xe8
    2628:	009b      	lsls	r3, r3, #2
    262a:	429a      	cmp	r2, r3
    262c:	d106      	bne.n	263c <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    262e:	68fb      	ldr	r3, [r7, #12]
    2630:	2202      	movs	r2, #2
    2632:	4313      	orrs	r3, r2
    2634:	0018      	movs	r0, r3
    2636:	4b15      	ldr	r3, [pc, #84]	; (268c <wait_for_bootrom+0x140>)
    2638:	4798      	blx	r3
    263a:	e003      	b.n	2644 <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    263c:	68fb      	ldr	r3, [r7, #12]
    263e:	0018      	movs	r0, r3
    2640:	4b12      	ldr	r3, [pc, #72]	; (268c <wait_for_bootrom+0x140>)
    2642:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    2644:	4a12      	ldr	r2, [pc, #72]	; (2690 <wait_for_bootrom+0x144>)
    2646:	4b0a      	ldr	r3, [pc, #40]	; (2670 <wait_for_bootrom+0x124>)
    2648:	0011      	movs	r1, r2
    264a:	0018      	movs	r0, r3
    264c:	4b0c      	ldr	r3, [pc, #48]	; (2680 <wait_for_bootrom+0x134>)
    264e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    2650:	230b      	movs	r3, #11
    2652:	18fb      	adds	r3, r7, r3
    2654:	781b      	ldrb	r3, [r3, #0]
    2656:	b25b      	sxtb	r3, r3
}
    2658:	0018      	movs	r0, r3
    265a:	46bd      	mov	sp, r7
    265c:	b006      	add	sp, #24
    265e:	bd80      	pop	{r7, pc}
    2660:	00001014 	.word	0x00001014
    2664:	00002ac9 	.word	0x00002ac9
    2668:	000003dd 	.word	0x000003dd
    266c:	000207bc 	.word	0x000207bc
    2670:	000c000c 	.word	0x000c000c
    2674:	10add09e 	.word	0x10add09e
    2678:	3c1cd57d 	.word	0x3c1cd57d
    267c:	000207ac 	.word	0x000207ac
    2680:	00002b0d 	.word	0x00002b0d
    2684:	0000108c 	.word	0x0000108c
    2688:	00002455 	.word	0x00002455
    268c:	00002149 	.word	0x00002149
    2690:	ef522f61 	.word	0xef522f61

00002694 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2694:	b580      	push	{r7, lr}
    2696:	b088      	sub	sp, #32
    2698:	af00      	add	r7, sp, #0
    269a:	0002      	movs	r2, r0
    269c:	1dfb      	adds	r3, r7, #7
    269e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    26a0:	231f      	movs	r3, #31
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	2200      	movs	r2, #0
    26a6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    26a8:	2300      	movs	r3, #0
    26aa:	61bb      	str	r3, [r7, #24]
    26ac:	2300      	movs	r3, #0
    26ae:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    26b0:	2301      	movs	r3, #1
    26b2:	425b      	negs	r3, r3
    26b4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    26b6:	4b1d      	ldr	r3, [pc, #116]	; (272c <wait_for_firmware_start+0x98>)
    26b8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    26ba:	4b1d      	ldr	r3, [pc, #116]	; (2730 <wait_for_firmware_start+0x9c>)
    26bc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    26be:	1dfb      	adds	r3, r7, #7
    26c0:	781b      	ldrb	r3, [r3, #0]
    26c2:	2b02      	cmp	r3, #2
    26c4:	d003      	beq.n	26ce <wait_for_firmware_start+0x3a>
    26c6:	1dfb      	adds	r3, r7, #7
    26c8:	781b      	ldrb	r3, [r3, #0]
    26ca:	2b03      	cmp	r3, #3
    26cc:	d119      	bne.n	2702 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    26ce:	4b19      	ldr	r3, [pc, #100]	; (2734 <wait_for_firmware_start+0xa0>)
    26d0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    26d2:	4b19      	ldr	r3, [pc, #100]	; (2738 <wait_for_firmware_start+0xa4>)
    26d4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    26d6:	e014      	b.n	2702 <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    26d8:	2002      	movs	r0, #2
    26da:	4b18      	ldr	r3, [pc, #96]	; (273c <wait_for_firmware_start+0xa8>)
    26dc:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    26de:	68fb      	ldr	r3, [r7, #12]
    26e0:	0018      	movs	r0, r3
    26e2:	4b17      	ldr	r3, [pc, #92]	; (2740 <wait_for_firmware_start+0xac>)
    26e4:	4798      	blx	r3
    26e6:	0003      	movs	r3, r0
    26e8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    26ea:	697b      	ldr	r3, [r7, #20]
    26ec:	3301      	adds	r3, #1
    26ee:	617b      	str	r3, [r7, #20]
    26f0:	697a      	ldr	r2, [r7, #20]
    26f2:	693b      	ldr	r3, [r7, #16]
    26f4:	429a      	cmp	r2, r3
    26f6:	d304      	bcc.n	2702 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    26f8:	231f      	movs	r3, #31
    26fa:	18fb      	adds	r3, r7, r3
    26fc:	22fb      	movs	r2, #251	; 0xfb
    26fe:	701a      	strb	r2, [r3, #0]
			goto ERR;
    2700:	e00c      	b.n	271c <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    2702:	68ba      	ldr	r2, [r7, #8]
    2704:	69bb      	ldr	r3, [r7, #24]
    2706:	429a      	cmp	r2, r3
    2708:	d1e6      	bne.n	26d8 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    270a:	68bb      	ldr	r3, [r7, #8]
    270c:	4a08      	ldr	r2, [pc, #32]	; (2730 <wait_for_firmware_start+0x9c>)
    270e:	4293      	cmp	r3, r2
    2710:	d104      	bne.n	271c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    2712:	4b06      	ldr	r3, [pc, #24]	; (272c <wait_for_firmware_start+0x98>)
    2714:	2100      	movs	r1, #0
    2716:	0018      	movs	r0, r3
    2718:	4b0a      	ldr	r3, [pc, #40]	; (2744 <wait_for_firmware_start+0xb0>)
    271a:	4798      	blx	r3
	}
ERR:
	return ret;
    271c:	231f      	movs	r3, #31
    271e:	18fb      	adds	r3, r7, r3
    2720:	781b      	ldrb	r3, [r3, #0]
    2722:	b25b      	sxtb	r3, r3
}
    2724:	0018      	movs	r0, r3
    2726:	46bd      	mov	sp, r7
    2728:	b008      	add	sp, #32
    272a:	bd80      	pop	{r7, pc}
    272c:	0000108c 	.word	0x0000108c
    2730:	02532636 	.word	0x02532636
    2734:	000207ac 	.word	0x000207ac
    2738:	d75dc1c3 	.word	0xd75dc1c3
    273c:	000003dd 	.word	0x000003dd
    2740:	00002ac9 	.word	0x00002ac9
    2744:	00002b0d 	.word	0x00002b0d

00002748 <chip_deinit>:

sint8 chip_deinit(void)
{
    2748:	b590      	push	{r4, r7, lr}
    274a:	b083      	sub	sp, #12
    274c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    274e:	2300      	movs	r3, #0
    2750:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    2752:	1dbb      	adds	r3, r7, #6
    2754:	220a      	movs	r2, #10
    2756:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2758:	1dfc      	adds	r4, r7, #7
    275a:	003a      	movs	r2, r7
    275c:	23a0      	movs	r3, #160	; 0xa0
    275e:	015b      	lsls	r3, r3, #5
    2760:	0011      	movs	r1, r2
    2762:	0018      	movs	r0, r3
    2764:	4b3f      	ldr	r3, [pc, #252]	; (2864 <chip_deinit+0x11c>)
    2766:	4798      	blx	r3
    2768:	0003      	movs	r3, r0
    276a:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    276c:	1dfb      	adds	r3, r7, #7
    276e:	781b      	ldrb	r3, [r3, #0]
    2770:	b25b      	sxtb	r3, r3
    2772:	2b00      	cmp	r3, #0
    2774:	d00c      	beq.n	2790 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    2776:	4a3c      	ldr	r2, [pc, #240]	; (2868 <chip_deinit+0x120>)
    2778:	493c      	ldr	r1, [pc, #240]	; (286c <chip_deinit+0x124>)
    277a:	4b3d      	ldr	r3, [pc, #244]	; (2870 <chip_deinit+0x128>)
    277c:	0018      	movs	r0, r3
    277e:	4b3d      	ldr	r3, [pc, #244]	; (2874 <chip_deinit+0x12c>)
    2780:	4798      	blx	r3
    2782:	4b3d      	ldr	r3, [pc, #244]	; (2878 <chip_deinit+0x130>)
    2784:	0018      	movs	r0, r3
    2786:	4b3d      	ldr	r3, [pc, #244]	; (287c <chip_deinit+0x134>)
    2788:	4798      	blx	r3
    278a:	200d      	movs	r0, #13
    278c:	4b3c      	ldr	r3, [pc, #240]	; (2880 <chip_deinit+0x138>)
    278e:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    2790:	683b      	ldr	r3, [r7, #0]
    2792:	4a3c      	ldr	r2, [pc, #240]	; (2884 <chip_deinit+0x13c>)
    2794:	4013      	ands	r3, r2
    2796:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2798:	683a      	ldr	r2, [r7, #0]
    279a:	1dfc      	adds	r4, r7, #7
    279c:	23a0      	movs	r3, #160	; 0xa0
    279e:	015b      	lsls	r3, r3, #5
    27a0:	0011      	movs	r1, r2
    27a2:	0018      	movs	r0, r3
    27a4:	4b38      	ldr	r3, [pc, #224]	; (2888 <chip_deinit+0x140>)
    27a6:	4798      	blx	r3
    27a8:	0003      	movs	r3, r0
    27aa:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    27ac:	1dfb      	adds	r3, r7, #7
    27ae:	781b      	ldrb	r3, [r3, #0]
    27b0:	b25b      	sxtb	r3, r3
    27b2:	2b00      	cmp	r3, #0
    27b4:	d010      	beq.n	27d8 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    27b6:	4a35      	ldr	r2, [pc, #212]	; (288c <chip_deinit+0x144>)
    27b8:	492c      	ldr	r1, [pc, #176]	; (286c <chip_deinit+0x124>)
    27ba:	4b2d      	ldr	r3, [pc, #180]	; (2870 <chip_deinit+0x128>)
    27bc:	0018      	movs	r0, r3
    27be:	4b2d      	ldr	r3, [pc, #180]	; (2874 <chip_deinit+0x12c>)
    27c0:	4798      	blx	r3
    27c2:	4b33      	ldr	r3, [pc, #204]	; (2890 <chip_deinit+0x148>)
    27c4:	0018      	movs	r0, r3
    27c6:	4b2d      	ldr	r3, [pc, #180]	; (287c <chip_deinit+0x134>)
    27c8:	4798      	blx	r3
    27ca:	200d      	movs	r0, #13
    27cc:	4b2c      	ldr	r3, [pc, #176]	; (2880 <chip_deinit+0x138>)
    27ce:	4798      	blx	r3
		return ret;
    27d0:	1dfb      	adds	r3, r7, #7
    27d2:	781b      	ldrb	r3, [r3, #0]
    27d4:	b25b      	sxtb	r3, r3
    27d6:	e041      	b.n	285c <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    27d8:	1dfc      	adds	r4, r7, #7
    27da:	003a      	movs	r2, r7
    27dc:	23a0      	movs	r3, #160	; 0xa0
    27de:	015b      	lsls	r3, r3, #5
    27e0:	0011      	movs	r1, r2
    27e2:	0018      	movs	r0, r3
    27e4:	4b1f      	ldr	r3, [pc, #124]	; (2864 <chip_deinit+0x11c>)
    27e6:	4798      	blx	r3
    27e8:	0003      	movs	r3, r0
    27ea:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    27ec:	1dfb      	adds	r3, r7, #7
    27ee:	781b      	ldrb	r3, [r3, #0]
    27f0:	b25b      	sxtb	r3, r3
    27f2:	2b00      	cmp	r3, #0
    27f4:	d011      	beq.n	281a <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    27f6:	238f      	movs	r3, #143	; 0x8f
    27f8:	009a      	lsls	r2, r3, #2
    27fa:	491c      	ldr	r1, [pc, #112]	; (286c <chip_deinit+0x124>)
    27fc:	4b1c      	ldr	r3, [pc, #112]	; (2870 <chip_deinit+0x128>)
    27fe:	0018      	movs	r0, r3
    2800:	4b1c      	ldr	r3, [pc, #112]	; (2874 <chip_deinit+0x12c>)
    2802:	4798      	blx	r3
    2804:	4b23      	ldr	r3, [pc, #140]	; (2894 <chip_deinit+0x14c>)
    2806:	0018      	movs	r0, r3
    2808:	4b1c      	ldr	r3, [pc, #112]	; (287c <chip_deinit+0x134>)
    280a:	4798      	blx	r3
    280c:	200d      	movs	r0, #13
    280e:	4b1c      	ldr	r3, [pc, #112]	; (2880 <chip_deinit+0x138>)
    2810:	4798      	blx	r3
			return ret;
    2812:	1dfb      	adds	r3, r7, #7
    2814:	781b      	ldrb	r3, [r3, #0]
    2816:	b25b      	sxtb	r3, r3
    2818:	e020      	b.n	285c <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    281a:	683a      	ldr	r2, [r7, #0]
    281c:	2380      	movs	r3, #128	; 0x80
    281e:	00db      	lsls	r3, r3, #3
    2820:	4013      	ands	r3, r2
    2822:	d017      	beq.n	2854 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    2824:	683b      	ldr	r3, [r7, #0]
    2826:	4a17      	ldr	r2, [pc, #92]	; (2884 <chip_deinit+0x13c>)
    2828:	4013      	ands	r3, r2
    282a:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    282c:	683a      	ldr	r2, [r7, #0]
    282e:	1dfc      	adds	r4, r7, #7
    2830:	23a0      	movs	r3, #160	; 0xa0
    2832:	015b      	lsls	r3, r3, #5
    2834:	0011      	movs	r1, r2
    2836:	0018      	movs	r0, r3
    2838:	4b13      	ldr	r3, [pc, #76]	; (2888 <chip_deinit+0x140>)
    283a:	4798      	blx	r3
    283c:	0003      	movs	r3, r0
    283e:	7023      	strb	r3, [r4, #0]
			timeout--;
    2840:	1dbb      	adds	r3, r7, #6
    2842:	781a      	ldrb	r2, [r3, #0]
    2844:	1dbb      	adds	r3, r7, #6
    2846:	3a01      	subs	r2, #1
    2848:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    284a:	1dbb      	adds	r3, r7, #6
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	2b00      	cmp	r3, #0
    2850:	d1c2      	bne.n	27d8 <chip_deinit+0x90>
    2852:	e000      	b.n	2856 <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    2854:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    2856:	1dfb      	adds	r3, r7, #7
    2858:	781b      	ldrb	r3, [r3, #0]
    285a:	b25b      	sxtb	r3, r3
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b003      	add	sp, #12
    2862:	bd90      	pop	{r4, r7, pc}
    2864:	00002ae9 	.word	0x00002ae9
    2868:	0000022f 	.word	0x0000022f
    286c:	00012698 	.word	0x00012698
    2870:	00012560 	.word	0x00012560
    2874:	00010d75 	.word	0x00010d75
    2878:	00012600 	.word	0x00012600
    287c:	00010e95 	.word	0x00010e95
    2880:	00010da9 	.word	0x00010da9
    2884:	fffffbff 	.word	0xfffffbff
    2888:	00002b0d 	.word	0x00002b0d
    288c:	00000235 	.word	0x00000235
    2890:	00012618 	.word	0x00012618
    2894:	00012630 	.word	0x00012630

00002898 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    2898:	b590      	push	{r4, r7, lr}
    289a:	b089      	sub	sp, #36	; 0x24
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    28a2:	2308      	movs	r3, #8
    28a4:	18fb      	adds	r3, r7, r3
    28a6:	0018      	movs	r0, r3
    28a8:	2308      	movs	r3, #8
    28aa:	001a      	movs	r2, r3
    28ac:	2100      	movs	r1, #0
    28ae:	4b35      	ldr	r3, [pc, #212]	; (2984 <nmi_get_otp_mac_address+0xec>)
    28b0:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    28b2:	231f      	movs	r3, #31
    28b4:	18fc      	adds	r4, r7, r3
    28b6:	2318      	movs	r3, #24
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	4a33      	ldr	r2, [pc, #204]	; (2988 <nmi_get_otp_mac_address+0xf0>)
    28bc:	0019      	movs	r1, r3
    28be:	0010      	movs	r0, r2
    28c0:	4b32      	ldr	r3, [pc, #200]	; (298c <nmi_get_otp_mac_address+0xf4>)
    28c2:	4798      	blx	r3
    28c4:	0003      	movs	r3, r0
    28c6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    28c8:	231f      	movs	r3, #31
    28ca:	18fb      	adds	r3, r7, r3
    28cc:	781b      	ldrb	r3, [r3, #0]
    28ce:	b25b      	sxtb	r3, r3
    28d0:	2b00      	cmp	r3, #0
    28d2:	d145      	bne.n	2960 <nmi_get_otp_mac_address+0xc8>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    28d4:	69bb      	ldr	r3, [r7, #24]
    28d6:	22c0      	movs	r2, #192	; 0xc0
    28d8:	0292      	lsls	r2, r2, #10
    28da:	4313      	orrs	r3, r2
    28dc:	221f      	movs	r2, #31
    28de:	18bc      	adds	r4, r7, r2
    28e0:	2208      	movs	r2, #8
    28e2:	18b9      	adds	r1, r7, r2
    28e4:	2208      	movs	r2, #8
    28e6:	0018      	movs	r0, r3
    28e8:	4b29      	ldr	r3, [pc, #164]	; (2990 <nmi_get_otp_mac_address+0xf8>)
    28ea:	4798      	blx	r3
    28ec:	0003      	movs	r3, r0
    28ee:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    28f0:	231f      	movs	r3, #31
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	781b      	ldrb	r3, [r3, #0]
    28f6:	b25b      	sxtb	r3, r3
    28f8:	2b00      	cmp	r3, #0
    28fa:	d133      	bne.n	2964 <nmi_get_otp_mac_address+0xcc>
	u32RegValue = strgp.u32Mac_efuse_mib;
    28fc:	2308      	movs	r3, #8
    28fe:	18fb      	adds	r3, r7, r3
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
    2904:	69bb      	ldr	r3, [r7, #24]
    2906:	0c1b      	lsrs	r3, r3, #16
    2908:	041b      	lsls	r3, r3, #16
    290a:	d106      	bne.n	291a <nmi_get_otp_mac_address+0x82>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    290c:	687b      	ldr	r3, [r7, #4]
    290e:	2206      	movs	r2, #6
    2910:	2100      	movs	r1, #0
    2912:	0018      	movs	r0, r3
    2914:	4b1f      	ldr	r3, [pc, #124]	; (2994 <nmi_get_otp_mac_address+0xfc>)
    2916:	4798      	blx	r3
		goto _EXIT_ERR;
    2918:	e025      	b.n	2966 <nmi_get_otp_mac_address+0xce>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    291a:	69bb      	ldr	r3, [r7, #24]
    291c:	0c1b      	lsrs	r3, r3, #16
    291e:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    2920:	69bb      	ldr	r3, [r7, #24]
    2922:	22c0      	movs	r2, #192	; 0xc0
    2924:	0292      	lsls	r2, r2, #10
    2926:	4313      	orrs	r3, r2
    2928:	221f      	movs	r2, #31
    292a:	18bc      	adds	r4, r7, r2
    292c:	2210      	movs	r2, #16
    292e:	18b9      	adds	r1, r7, r2
    2930:	2206      	movs	r2, #6
    2932:	0018      	movs	r0, r3
    2934:	4b16      	ldr	r3, [pc, #88]	; (2990 <nmi_get_otp_mac_address+0xf8>)
    2936:	4798      	blx	r3
    2938:	0003      	movs	r3, r0
    293a:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr,mac,6);
    293c:	2310      	movs	r3, #16
    293e:	18f9      	adds	r1, r7, r3
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	2206      	movs	r2, #6
    2944:	0018      	movs	r0, r3
    2946:	4b14      	ldr	r3, [pc, #80]	; (2998 <nmi_get_otp_mac_address+0x100>)
    2948:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    294a:	683b      	ldr	r3, [r7, #0]
    294c:	2b00      	cmp	r3, #0
    294e:	d002      	beq.n	2956 <nmi_get_otp_mac_address+0xbe>
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	2201      	movs	r2, #1
    2954:	701a      	strb	r2, [r3, #0]
	return ret;
    2956:	231f      	movs	r3, #31
    2958:	18fb      	adds	r3, r7, r3
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	b25b      	sxtb	r3, r3
    295e:	e00c      	b.n	297a <nmi_get_otp_mac_address+0xe2>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2960:	46c0      	nop			; (mov r8, r8)
    2962:	e000      	b.n	2966 <nmi_get_otp_mac_address+0xce>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2964:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    2966:	683b      	ldr	r3, [r7, #0]
    2968:	2b00      	cmp	r3, #0
    296a:	d002      	beq.n	2972 <nmi_get_otp_mac_address+0xda>
    296c:	683b      	ldr	r3, [r7, #0]
    296e:	2200      	movs	r2, #0
    2970:	701a      	strb	r2, [r3, #0]
	return ret;
    2972:	231f      	movs	r3, #31
    2974:	18fb      	adds	r3, r7, r3
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	b25b      	sxtb	r3, r3
}
    297a:	0018      	movs	r0, r3
    297c:	46bd      	mov	sp, r7
    297e:	b009      	add	sp, #36	; 0x24
    2980:	bd90      	pop	{r4, r7, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	000107bf 	.word	0x000107bf
    2988:	000c0008 	.word	0x000c0008
    298c:	00002ae9 	.word	0x00002ae9
    2990:	00002b5d 	.word	0x00002b5d
    2994:	00000c8d 	.word	0x00000c8d
    2998:	00000c51 	.word	0x00000c51

0000299c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    299c:	b590      	push	{r4, r7, lr}
    299e:	b089      	sub	sp, #36	; 0x24
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    29a4:	2308      	movs	r3, #8
    29a6:	18fb      	adds	r3, r7, r3
    29a8:	0018      	movs	r0, r3
    29aa:	2308      	movs	r3, #8
    29ac:	001a      	movs	r2, r3
    29ae:	2100      	movs	r1, #0
    29b0:	4b29      	ldr	r3, [pc, #164]	; (2a58 <nmi_get_mac_address+0xbc>)
    29b2:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    29b4:	231f      	movs	r3, #31
    29b6:	18fc      	adds	r4, r7, r3
    29b8:	2318      	movs	r3, #24
    29ba:	18fb      	adds	r3, r7, r3
    29bc:	4a27      	ldr	r2, [pc, #156]	; (2a5c <nmi_get_mac_address+0xc0>)
    29be:	0019      	movs	r1, r3
    29c0:	0010      	movs	r0, r2
    29c2:	4b27      	ldr	r3, [pc, #156]	; (2a60 <nmi_get_mac_address+0xc4>)
    29c4:	4798      	blx	r3
    29c6:	0003      	movs	r3, r0
    29c8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    29ca:	231f      	movs	r3, #31
    29cc:	18fb      	adds	r3, r7, r3
    29ce:	781b      	ldrb	r3, [r3, #0]
    29d0:	b25b      	sxtb	r3, r3
    29d2:	2b00      	cmp	r3, #0
    29d4:	d135      	bne.n	2a42 <nmi_get_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    29d6:	69bb      	ldr	r3, [r7, #24]
    29d8:	22c0      	movs	r2, #192	; 0xc0
    29da:	0292      	lsls	r2, r2, #10
    29dc:	4313      	orrs	r3, r2
    29de:	221f      	movs	r2, #31
    29e0:	18bc      	adds	r4, r7, r2
    29e2:	2208      	movs	r2, #8
    29e4:	18b9      	adds	r1, r7, r2
    29e6:	2208      	movs	r2, #8
    29e8:	0018      	movs	r0, r3
    29ea:	4b1e      	ldr	r3, [pc, #120]	; (2a64 <nmi_get_mac_address+0xc8>)
    29ec:	4798      	blx	r3
    29ee:	0003      	movs	r3, r0
    29f0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    29f2:	231f      	movs	r3, #31
    29f4:	18fb      	adds	r3, r7, r3
    29f6:	781b      	ldrb	r3, [r3, #0]
    29f8:	b25b      	sxtb	r3, r3
    29fa:	2b00      	cmp	r3, #0
    29fc:	d123      	bne.n	2a46 <nmi_get_mac_address+0xaa>
	u32RegValue = strgp.u32Mac_efuse_mib;
    29fe:	2308      	movs	r3, #8
    2a00:	18fb      	adds	r3, r7, r3
    2a02:	681b      	ldr	r3, [r3, #0]
    2a04:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
    2a06:	69bb      	ldr	r3, [r7, #24]
    2a08:	041b      	lsls	r3, r3, #16
    2a0a:	0c1b      	lsrs	r3, r3, #16
    2a0c:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    2a0e:	69bb      	ldr	r3, [r7, #24]
    2a10:	22c0      	movs	r2, #192	; 0xc0
    2a12:	0292      	lsls	r2, r2, #10
    2a14:	4313      	orrs	r3, r2
    2a16:	221f      	movs	r2, #31
    2a18:	18bc      	adds	r4, r7, r2
    2a1a:	2210      	movs	r2, #16
    2a1c:	18b9      	adds	r1, r7, r2
    2a1e:	2206      	movs	r2, #6
    2a20:	0018      	movs	r0, r3
    2a22:	4b10      	ldr	r3, [pc, #64]	; (2a64 <nmi_get_mac_address+0xc8>)
    2a24:	4798      	blx	r3
    2a26:	0003      	movs	r3, r0
    2a28:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr, mac, 6);
    2a2a:	2310      	movs	r3, #16
    2a2c:	18f9      	adds	r1, r7, r3
    2a2e:	687b      	ldr	r3, [r7, #4]
    2a30:	2206      	movs	r2, #6
    2a32:	0018      	movs	r0, r3
    2a34:	4b0c      	ldr	r3, [pc, #48]	; (2a68 <nmi_get_mac_address+0xcc>)
    2a36:	4798      	blx	r3

	return ret;
    2a38:	231f      	movs	r3, #31
    2a3a:	18fb      	adds	r3, r7, r3
    2a3c:	781b      	ldrb	r3, [r3, #0]
    2a3e:	b25b      	sxtb	r3, r3
    2a40:	e006      	b.n	2a50 <nmi_get_mac_address+0xb4>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	e000      	b.n	2a48 <nmi_get_mac_address+0xac>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    2a46:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
    2a48:	231f      	movs	r3, #31
    2a4a:	18fb      	adds	r3, r7, r3
    2a4c:	781b      	ldrb	r3, [r3, #0]
    2a4e:	b25b      	sxtb	r3, r3
    2a50:	0018      	movs	r0, r3
    2a52:	46bd      	mov	sp, r7
    2a54:	b009      	add	sp, #36	; 0x24
    2a56:	bd90      	pop	{r4, r7, pc}
    2a58:	000107bf 	.word	0x000107bf
    2a5c:	000c0008 	.word	0x000c0008
    2a60:	00002ae9 	.word	0x00002ae9
    2a64:	00002b5d 	.word	0x00002b5d
    2a68:	00000c51 	.word	0x00000c51

00002a6c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2a6c:	b590      	push	{r4, r7, lr}
    2a6e:	b085      	sub	sp, #20
    2a70:	af00      	add	r7, sp, #0
    2a72:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2a74:	230f      	movs	r3, #15
    2a76:	18fb      	adds	r3, r7, r3
    2a78:	2200      	movs	r2, #0
    2a7a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    2a7c:	230f      	movs	r3, #15
    2a7e:	18fc      	adds	r4, r7, r3
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	0018      	movs	r0, r3
    2a84:	4b05      	ldr	r3, [pc, #20]	; (2a9c <nm_bus_iface_init+0x30>)
    2a86:	4798      	blx	r3
    2a88:	0003      	movs	r3, r0
    2a8a:	7023      	strb	r3, [r4, #0]

	return ret;
    2a8c:	230f      	movs	r3, #15
    2a8e:	18fb      	adds	r3, r7, r3
    2a90:	781b      	ldrb	r3, [r3, #0]
    2a92:	b25b      	sxtb	r3, r3
}
    2a94:	0018      	movs	r0, r3
    2a96:	46bd      	mov	sp, r7
    2a98:	b005      	add	sp, #20
    2a9a:	bd90      	pop	{r4, r7, pc}
    2a9c:	00000a95 	.word	0x00000a95

00002aa0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2aa0:	b590      	push	{r4, r7, lr}
    2aa2:	b083      	sub	sp, #12
    2aa4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2aa6:	1dfb      	adds	r3, r7, #7
    2aa8:	2200      	movs	r2, #0
    2aaa:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    2aac:	1dfc      	adds	r4, r7, #7
    2aae:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <nm_bus_iface_deinit+0x24>)
    2ab0:	4798      	blx	r3
    2ab2:	0003      	movs	r3, r0
    2ab4:	7023      	strb	r3, [r4, #0]

	return ret;
    2ab6:	1dfb      	adds	r3, r7, #7
    2ab8:	781b      	ldrb	r3, [r3, #0]
    2aba:	b25b      	sxtb	r3, r3
}
    2abc:	0018      	movs	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	b003      	add	sp, #12
    2ac2:	bd90      	pop	{r4, r7, pc}
    2ac4:	00000c0d 	.word	0x00000c0d

00002ac8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b082      	sub	sp, #8
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	0018      	movs	r0, r3
    2ad4:	4b03      	ldr	r3, [pc, #12]	; (2ae4 <nm_read_reg+0x1c>)
    2ad6:	4798      	blx	r3
    2ad8:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2ada:	0018      	movs	r0, r3
    2adc:	46bd      	mov	sp, r7
    2ade:	b002      	add	sp, #8
    2ae0:	bd80      	pop	{r7, pc}
    2ae2:	46c0      	nop			; (mov r8, r8)
    2ae4:	00004161 	.word	0x00004161

00002ae8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b082      	sub	sp, #8
    2aec:	af00      	add	r7, sp, #0
    2aee:	6078      	str	r0, [r7, #4]
    2af0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2af2:	683a      	ldr	r2, [r7, #0]
    2af4:	687b      	ldr	r3, [r7, #4]
    2af6:	0011      	movs	r1, r2
    2af8:	0018      	movs	r0, r3
    2afa:	4b03      	ldr	r3, [pc, #12]	; (2b08 <nm_read_reg_with_ret+0x20>)
    2afc:	4798      	blx	r3
    2afe:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2b00:	0018      	movs	r0, r3
    2b02:	46bd      	mov	sp, r7
    2b04:	b002      	add	sp, #8
    2b06:	bd80      	pop	{r7, pc}
    2b08:	00004185 	.word	0x00004185

00002b0c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2b0c:	b580      	push	{r7, lr}
    2b0e:	b082      	sub	sp, #8
    2b10:	af00      	add	r7, sp, #0
    2b12:	6078      	str	r0, [r7, #4]
    2b14:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2b16:	683a      	ldr	r2, [r7, #0]
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	0011      	movs	r1, r2
    2b1c:	0018      	movs	r0, r3
    2b1e:	4b03      	ldr	r3, [pc, #12]	; (2b2c <nm_write_reg+0x20>)
    2b20:	4798      	blx	r3
    2b22:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2b24:	0018      	movs	r0, r3
    2b26:	46bd      	mov	sp, r7
    2b28:	b002      	add	sp, #8
    2b2a:	bd80      	pop	{r7, pc}
    2b2c:	000041d5 	.word	0x000041d5

00002b30 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	b084      	sub	sp, #16
    2b34:	af00      	add	r7, sp, #0
    2b36:	60f8      	str	r0, [r7, #12]
    2b38:	60b9      	str	r1, [r7, #8]
    2b3a:	1dbb      	adds	r3, r7, #6
    2b3c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b3e:	1dbb      	adds	r3, r7, #6
    2b40:	881a      	ldrh	r2, [r3, #0]
    2b42:	68b9      	ldr	r1, [r7, #8]
    2b44:	68fb      	ldr	r3, [r7, #12]
    2b46:	0018      	movs	r0, r3
    2b48:	4b03      	ldr	r3, [pc, #12]	; (2b58 <p_nm_read_block+0x28>)
    2b4a:	4798      	blx	r3
    2b4c:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2b4e:	0018      	movs	r0, r3
    2b50:	46bd      	mov	sp, r7
    2b52:	b004      	add	sp, #16
    2b54:	bd80      	pop	{r7, pc}
    2b56:	46c0      	nop			; (mov r8, r8)
    2b58:	00004225 	.word	0x00004225

00002b5c <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b086      	sub	sp, #24
    2b60:	af00      	add	r7, sp, #0
    2b62:	60f8      	str	r0, [r7, #12]
    2b64:	60b9      	str	r1, [r7, #8]
    2b66:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b68:	4b2d      	ldr	r3, [pc, #180]	; (2c20 <nm_read_block+0xc4>)
    2b6a:	881a      	ldrh	r2, [r3, #0]
    2b6c:	2310      	movs	r3, #16
    2b6e:	18fb      	adds	r3, r7, r3
    2b70:	3a08      	subs	r2, #8
    2b72:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2b74:	2300      	movs	r3, #0
    2b76:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2b78:	2313      	movs	r3, #19
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	2200      	movs	r2, #0
    2b7e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2b80:	2310      	movs	r3, #16
    2b82:	18fb      	adds	r3, r7, r3
    2b84:	881a      	ldrh	r2, [r3, #0]
    2b86:	687b      	ldr	r3, [r7, #4]
    2b88:	429a      	cmp	r2, r3
    2b8a:	d313      	bcc.n	2bb4 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2b8c:	68ba      	ldr	r2, [r7, #8]
    2b8e:	697b      	ldr	r3, [r7, #20]
    2b90:	18d1      	adds	r1, r2, r3
    2b92:	687b      	ldr	r3, [r7, #4]
    2b94:	b29a      	uxth	r2, r3
    2b96:	68fb      	ldr	r3, [r7, #12]
    2b98:	0018      	movs	r0, r3
    2b9a:	4b22      	ldr	r3, [pc, #136]	; (2c24 <nm_read_block+0xc8>)
    2b9c:	4798      	blx	r3
    2b9e:	0003      	movs	r3, r0
    2ba0:	b2da      	uxtb	r2, r3
    2ba2:	2313      	movs	r3, #19
    2ba4:	18fb      	adds	r3, r7, r3
    2ba6:	781b      	ldrb	r3, [r3, #0]
    2ba8:	18d3      	adds	r3, r2, r3
    2baa:	b2da      	uxtb	r2, r3
    2bac:	2313      	movs	r3, #19
    2bae:	18fb      	adds	r3, r7, r3
    2bb0:	701a      	strb	r2, [r3, #0]
			break;
    2bb2:	e02d      	b.n	2c10 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2bb4:	68ba      	ldr	r2, [r7, #8]
    2bb6:	697b      	ldr	r3, [r7, #20]
    2bb8:	18d1      	adds	r1, r2, r3
    2bba:	2310      	movs	r3, #16
    2bbc:	18fb      	adds	r3, r7, r3
    2bbe:	881a      	ldrh	r2, [r3, #0]
    2bc0:	68fb      	ldr	r3, [r7, #12]
    2bc2:	0018      	movs	r0, r3
    2bc4:	4b17      	ldr	r3, [pc, #92]	; (2c24 <nm_read_block+0xc8>)
    2bc6:	4798      	blx	r3
    2bc8:	0003      	movs	r3, r0
    2bca:	b2da      	uxtb	r2, r3
    2bcc:	2313      	movs	r3, #19
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	781b      	ldrb	r3, [r3, #0]
    2bd2:	18d3      	adds	r3, r2, r3
    2bd4:	b2da      	uxtb	r2, r3
    2bd6:	2313      	movs	r3, #19
    2bd8:	18fb      	adds	r3, r7, r3
    2bda:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2bdc:	2313      	movs	r3, #19
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	b25b      	sxtb	r3, r3
    2be4:	2b00      	cmp	r3, #0
    2be6:	d112      	bne.n	2c0e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2be8:	2310      	movs	r3, #16
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	881b      	ldrh	r3, [r3, #0]
    2bee:	687a      	ldr	r2, [r7, #4]
    2bf0:	1ad3      	subs	r3, r2, r3
    2bf2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2bf4:	2310      	movs	r3, #16
    2bf6:	18fb      	adds	r3, r7, r3
    2bf8:	881b      	ldrh	r3, [r3, #0]
    2bfa:	697a      	ldr	r2, [r7, #20]
    2bfc:	18d3      	adds	r3, r2, r3
    2bfe:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2c00:	2310      	movs	r3, #16
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	881b      	ldrh	r3, [r3, #0]
    2c06:	68fa      	ldr	r2, [r7, #12]
    2c08:	18d3      	adds	r3, r2, r3
    2c0a:	60fb      	str	r3, [r7, #12]
		}
	}
    2c0c:	e7b8      	b.n	2b80 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2c0e:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2c10:	2313      	movs	r3, #19
    2c12:	18fb      	adds	r3, r7, r3
    2c14:	781b      	ldrb	r3, [r3, #0]
    2c16:	b25b      	sxtb	r3, r3
}
    2c18:	0018      	movs	r0, r3
    2c1a:	46bd      	mov	sp, r7
    2c1c:	b006      	add	sp, #24
    2c1e:	bd80      	pop	{r7, pc}
    2c20:	20000008 	.word	0x20000008
    2c24:	00002b31 	.word	0x00002b31

00002c28 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2c28:	b580      	push	{r7, lr}
    2c2a:	b084      	sub	sp, #16
    2c2c:	af00      	add	r7, sp, #0
    2c2e:	60f8      	str	r0, [r7, #12]
    2c30:	60b9      	str	r1, [r7, #8]
    2c32:	1dbb      	adds	r3, r7, #6
    2c34:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2c36:	1dbb      	adds	r3, r7, #6
    2c38:	881a      	ldrh	r2, [r3, #0]
    2c3a:	68b9      	ldr	r1, [r7, #8]
    2c3c:	68fb      	ldr	r3, [r7, #12]
    2c3e:	0018      	movs	r0, r3
    2c40:	4b03      	ldr	r3, [pc, #12]	; (2c50 <p_nm_write_block+0x28>)
    2c42:	4798      	blx	r3
    2c44:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    2c46:	0018      	movs	r0, r3
    2c48:	46bd      	mov	sp, r7
    2c4a:	b004      	add	sp, #16
    2c4c:	bd80      	pop	{r7, pc}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	0000427d 	.word	0x0000427d

00002c54 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2c54:	b580      	push	{r7, lr}
    2c56:	b086      	sub	sp, #24
    2c58:	af00      	add	r7, sp, #0
    2c5a:	60f8      	str	r0, [r7, #12]
    2c5c:	60b9      	str	r1, [r7, #8]
    2c5e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2c60:	4b2d      	ldr	r3, [pc, #180]	; (2d18 <nm_write_block+0xc4>)
    2c62:	881a      	ldrh	r2, [r3, #0]
    2c64:	2310      	movs	r3, #16
    2c66:	18fb      	adds	r3, r7, r3
    2c68:	3a08      	subs	r2, #8
    2c6a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    2c6c:	2300      	movs	r3, #0
    2c6e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    2c70:	2313      	movs	r3, #19
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	2200      	movs	r2, #0
    2c76:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2c78:	2310      	movs	r3, #16
    2c7a:	18fb      	adds	r3, r7, r3
    2c7c:	881a      	ldrh	r2, [r3, #0]
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	429a      	cmp	r2, r3
    2c82:	d313      	bcc.n	2cac <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    2c84:	68ba      	ldr	r2, [r7, #8]
    2c86:	697b      	ldr	r3, [r7, #20]
    2c88:	18d1      	adds	r1, r2, r3
    2c8a:	687b      	ldr	r3, [r7, #4]
    2c8c:	b29a      	uxth	r2, r3
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	0018      	movs	r0, r3
    2c92:	4b22      	ldr	r3, [pc, #136]	; (2d1c <nm_write_block+0xc8>)
    2c94:	4798      	blx	r3
    2c96:	0003      	movs	r3, r0
    2c98:	b2da      	uxtb	r2, r3
    2c9a:	2313      	movs	r3, #19
    2c9c:	18fb      	adds	r3, r7, r3
    2c9e:	781b      	ldrb	r3, [r3, #0]
    2ca0:	18d3      	adds	r3, r2, r3
    2ca2:	b2da      	uxtb	r2, r3
    2ca4:	2313      	movs	r3, #19
    2ca6:	18fb      	adds	r3, r7, r3
    2ca8:	701a      	strb	r2, [r3, #0]
			break;
    2caa:	e02d      	b.n	2d08 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    2cac:	68ba      	ldr	r2, [r7, #8]
    2cae:	697b      	ldr	r3, [r7, #20]
    2cb0:	18d1      	adds	r1, r2, r3
    2cb2:	2310      	movs	r3, #16
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	881a      	ldrh	r2, [r3, #0]
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	0018      	movs	r0, r3
    2cbc:	4b17      	ldr	r3, [pc, #92]	; (2d1c <nm_write_block+0xc8>)
    2cbe:	4798      	blx	r3
    2cc0:	0003      	movs	r3, r0
    2cc2:	b2da      	uxtb	r2, r3
    2cc4:	2313      	movs	r3, #19
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	781b      	ldrb	r3, [r3, #0]
    2cca:	18d3      	adds	r3, r2, r3
    2ccc:	b2da      	uxtb	r2, r3
    2cce:	2313      	movs	r3, #19
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    2cd4:	2313      	movs	r3, #19
    2cd6:	18fb      	adds	r3, r7, r3
    2cd8:	781b      	ldrb	r3, [r3, #0]
    2cda:	b25b      	sxtb	r3, r3
    2cdc:	2b00      	cmp	r3, #0
    2cde:	d112      	bne.n	2d06 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    2ce0:	2310      	movs	r3, #16
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	881b      	ldrh	r3, [r3, #0]
    2ce6:	687a      	ldr	r2, [r7, #4]
    2ce8:	1ad3      	subs	r3, r2, r3
    2cea:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    2cec:	2310      	movs	r3, #16
    2cee:	18fb      	adds	r3, r7, r3
    2cf0:	881b      	ldrh	r3, [r3, #0]
    2cf2:	697a      	ldr	r2, [r7, #20]
    2cf4:	18d3      	adds	r3, r2, r3
    2cf6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    2cf8:	2310      	movs	r3, #16
    2cfa:	18fb      	adds	r3, r7, r3
    2cfc:	881b      	ldrh	r3, [r3, #0]
    2cfe:	68fa      	ldr	r2, [r7, #12]
    2d00:	18d3      	adds	r3, r2, r3
    2d02:	60fb      	str	r3, [r7, #12]
		}
	}
    2d04:	e7b8      	b.n	2c78 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2d06:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    2d08:	2313      	movs	r3, #19
    2d0a:	18fb      	adds	r3, r7, r3
    2d0c:	781b      	ldrb	r3, [r3, #0]
    2d0e:	b25b      	sxtb	r3, r3
}
    2d10:	0018      	movs	r0, r3
    2d12:	46bd      	mov	sp, r7
    2d14:	b006      	add	sp, #24
    2d16:	bd80      	pop	{r7, pc}
    2d18:	20000008 	.word	0x20000008
    2d1c:	00002c29 	.word	0x00002c29

00002d20 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    2d20:	b590      	push	{r4, r7, lr}
    2d22:	b087      	sub	sp, #28
    2d24:	af00      	add	r7, sp, #0
    2d26:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2d28:	2300      	movs	r3, #0
    2d2a:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    2d2c:	2317      	movs	r3, #23
    2d2e:	18fb      	adds	r3, r7, r3
    2d30:	2200      	movs	r2, #0
    2d32:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    2d34:	2317      	movs	r3, #23
    2d36:	18fc      	adds	r4, r7, r3
    2d38:	230c      	movs	r3, #12
    2d3a:	18fb      	adds	r3, r7, r3
    2d3c:	4a4c      	ldr	r2, [pc, #304]	; (2e70 <nm_get_firmware_info+0x150>)
    2d3e:	0019      	movs	r1, r3
    2d40:	0010      	movs	r0, r2
    2d42:	4b4c      	ldr	r3, [pc, #304]	; (2e74 <nm_get_firmware_info+0x154>)
    2d44:	4798      	blx	r3
    2d46:	0003      	movs	r3, r0
    2d48:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    2d4a:	68fb      	ldr	r3, [r7, #12]
    2d4c:	4a4a      	ldr	r2, [pc, #296]	; (2e78 <nm_get_firmware_info+0x158>)
    2d4e:	4293      	cmp	r3, r2
    2d50:	d10a      	bne.n	2d68 <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    2d52:	2317      	movs	r3, #23
    2d54:	18fc      	adds	r4, r7, r3
    2d56:	230c      	movs	r3, #12
    2d58:	18fb      	adds	r3, r7, r3
    2d5a:	4a48      	ldr	r2, [pc, #288]	; (2e7c <nm_get_firmware_info+0x15c>)
    2d5c:	0019      	movs	r1, r3
    2d5e:	0010      	movs	r0, r2
    2d60:	4b44      	ldr	r3, [pc, #272]	; (2e74 <nm_get_firmware_info+0x154>)
    2d62:	4798      	blx	r3
    2d64:	0003      	movs	r3, r0
    2d66:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    2d68:	68fb      	ldr	r3, [r7, #12]
    2d6a:	0c1b      	lsrs	r3, r3, #16
    2d6c:	121b      	asrs	r3, r3, #8
    2d6e:	b2da      	uxtb	r2, r3
    2d70:	687b      	ldr	r3, [r7, #4]
    2d72:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    2d74:	68fb      	ldr	r3, [r7, #12]
    2d76:	0c1b      	lsrs	r3, r3, #16
    2d78:	111b      	asrs	r3, r3, #4
    2d7a:	b2db      	uxtb	r3, r3
    2d7c:	220f      	movs	r2, #15
    2d7e:	4013      	ands	r3, r2
    2d80:	b2da      	uxtb	r2, r3
    2d82:	687b      	ldr	r3, [r7, #4]
    2d84:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    2d86:	68fb      	ldr	r3, [r7, #12]
    2d88:	0c1b      	lsrs	r3, r3, #16
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	220f      	movs	r2, #15
    2d8e:	4013      	ands	r3, r2
    2d90:	b2da      	uxtb	r2, r3
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    2d96:	68fb      	ldr	r3, [r7, #12]
    2d98:	121b      	asrs	r3, r3, #8
    2d9a:	b2da      	uxtb	r2, r3
    2d9c:	687b      	ldr	r3, [r7, #4]
    2d9e:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    2da0:	68fb      	ldr	r3, [r7, #12]
    2da2:	111b      	asrs	r3, r3, #4
    2da4:	b2db      	uxtb	r3, r3
    2da6:	220f      	movs	r2, #15
    2da8:	4013      	ands	r3, r2
    2daa:	b2da      	uxtb	r2, r3
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    2db0:	68fb      	ldr	r3, [r7, #12]
    2db2:	b2db      	uxtb	r3, r3
    2db4:	220f      	movs	r2, #15
    2db6:	4013      	ands	r3, r2
    2db8:	b2da      	uxtb	r2, r3
    2dba:	687b      	ldr	r3, [r7, #4]
    2dbc:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    2dbe:	4b30      	ldr	r3, [pc, #192]	; (2e80 <nm_get_firmware_info+0x160>)
    2dc0:	4798      	blx	r3
    2dc2:	0002      	movs	r2, r0
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    2dc8:	687b      	ldr	r3, [r7, #4]
    2dca:	791b      	ldrb	r3, [r3, #4]
    2dcc:	021b      	lsls	r3, r3, #8
    2dce:	b21a      	sxth	r2, r3
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	795b      	ldrb	r3, [r3, #5]
    2dd4:	011b      	lsls	r3, r3, #4
    2dd6:	b21b      	sxth	r3, r3
    2dd8:	21ff      	movs	r1, #255	; 0xff
    2dda:	400b      	ands	r3, r1
    2ddc:	b21b      	sxth	r3, r3
    2dde:	4313      	orrs	r3, r2
    2de0:	b21a      	sxth	r2, r3
    2de2:	687b      	ldr	r3, [r7, #4]
    2de4:	799b      	ldrb	r3, [r3, #6]
    2de6:	b21b      	sxth	r3, r3
    2de8:	210f      	movs	r1, #15
    2dea:	400b      	ands	r3, r1
    2dec:	b21b      	sxth	r3, r3
    2dee:	4313      	orrs	r3, r2
    2df0:	b21a      	sxth	r2, r3
    2df2:	2314      	movs	r3, #20
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    2df8:	2312      	movs	r3, #18
    2dfa:	18fb      	adds	r3, r7, r3
    2dfc:	4a21      	ldr	r2, [pc, #132]	; (2e84 <nm_get_firmware_info+0x164>)
    2dfe:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	79db      	ldrb	r3, [r3, #7]
    2e04:	021b      	lsls	r3, r3, #8
    2e06:	b21a      	sxth	r2, r3
    2e08:	687b      	ldr	r3, [r7, #4]
    2e0a:	7a1b      	ldrb	r3, [r3, #8]
    2e0c:	011b      	lsls	r3, r3, #4
    2e0e:	b21b      	sxth	r3, r3
    2e10:	21ff      	movs	r1, #255	; 0xff
    2e12:	400b      	ands	r3, r1
    2e14:	b21b      	sxth	r3, r3
    2e16:	4313      	orrs	r3, r2
    2e18:	b21a      	sxth	r2, r3
    2e1a:	687b      	ldr	r3, [r7, #4]
    2e1c:	7a5b      	ldrb	r3, [r3, #9]
    2e1e:	b21b      	sxth	r3, r3
    2e20:	210f      	movs	r1, #15
    2e22:	400b      	ands	r3, r1
    2e24:	b21b      	sxth	r3, r3
    2e26:	4313      	orrs	r3, r2
    2e28:	b21a      	sxth	r2, r3
    2e2a:	2310      	movs	r3, #16
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    2e30:	2312      	movs	r3, #18
    2e32:	18fa      	adds	r2, r7, r3
    2e34:	2310      	movs	r3, #16
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	8812      	ldrh	r2, [r2, #0]
    2e3a:	881b      	ldrh	r3, [r3, #0]
    2e3c:	429a      	cmp	r2, r3
    2e3e:	d203      	bcs.n	2e48 <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    2e40:	2317      	movs	r3, #23
    2e42:	18fb      	adds	r3, r7, r3
    2e44:	22f3      	movs	r2, #243	; 0xf3
    2e46:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    2e48:	2312      	movs	r3, #18
    2e4a:	18fa      	adds	r2, r7, r3
    2e4c:	2314      	movs	r3, #20
    2e4e:	18fb      	adds	r3, r7, r3
    2e50:	8812      	ldrh	r2, [r2, #0]
    2e52:	881b      	ldrh	r3, [r3, #0]
    2e54:	429a      	cmp	r2, r3
    2e56:	d903      	bls.n	2e60 <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    2e58:	2317      	movs	r3, #23
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	22f3      	movs	r2, #243	; 0xf3
    2e5e:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    2e60:	2317      	movs	r3, #23
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	781b      	ldrb	r3, [r3, #0]
    2e66:	b25b      	sxtb	r3, r3
}
    2e68:	0018      	movs	r0, r3
    2e6a:	46bd      	mov	sp, r7
    2e6c:	b007      	add	sp, #28
    2e6e:	bd90      	pop	{r4, r7, pc}
    2e70:	000207ac 	.word	0x000207ac
    2e74:	00002ae9 	.word	0x00002ae9
    2e78:	d75dc1c3 	.word	0xd75dc1c3
    2e7c:	00001048 	.word	0x00001048
    2e80:	00002455 	.word	0x00002455
    2e84:	00001330 	.word	0x00001330

00002e88 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2e88:	b590      	push	{r4, r7, lr}
    2e8a:	b085      	sub	sp, #20
    2e8c:	af00      	add	r7, sp, #0
    2e8e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    2e90:	230f      	movs	r3, #15
    2e92:	18fb      	adds	r3, r7, r3
    2e94:	2200      	movs	r2, #0
    2e96:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d013      	beq.n	2ec6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    2e9e:	230e      	movs	r3, #14
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	687a      	ldr	r2, [r7, #4]
    2ea4:	7812      	ldrb	r2, [r2, #0]
    2ea6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2ea8:	230e      	movs	r3, #14
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	781b      	ldrb	r3, [r3, #0]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d004      	beq.n	2ebc <nm_drv_init+0x34>
    2eb2:	230e      	movs	r3, #14
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	2b04      	cmp	r3, #4
    2eba:	d908      	bls.n	2ece <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2ebc:	230e      	movs	r3, #14
    2ebe:	18fb      	adds	r3, r7, r3
    2ec0:	2201      	movs	r2, #1
    2ec2:	701a      	strb	r2, [r3, #0]
    2ec4:	e003      	b.n	2ece <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2ec6:	230e      	movs	r3, #14
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	2201      	movs	r2, #1
    2ecc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    2ece:	230f      	movs	r3, #15
    2ed0:	18fc      	adds	r4, r7, r3
    2ed2:	2000      	movs	r0, #0
    2ed4:	4b40      	ldr	r3, [pc, #256]	; (2fd8 <nm_drv_init+0x150>)
    2ed6:	4798      	blx	r3
    2ed8:	0003      	movs	r3, r0
    2eda:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    2edc:	230f      	movs	r3, #15
    2ede:	18fb      	adds	r3, r7, r3
    2ee0:	781b      	ldrb	r3, [r3, #0]
    2ee2:	b25b      	sxtb	r3, r3
    2ee4:	2b00      	cmp	r3, #0
    2ee6:	d00e      	beq.n	2f06 <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    2ee8:	2392      	movs	r3, #146	; 0x92
    2eea:	005a      	lsls	r2, r3, #1
    2eec:	493b      	ldr	r1, [pc, #236]	; (2fdc <nm_drv_init+0x154>)
    2eee:	4b3c      	ldr	r3, [pc, #240]	; (2fe0 <nm_drv_init+0x158>)
    2ef0:	0018      	movs	r0, r3
    2ef2:	4b3c      	ldr	r3, [pc, #240]	; (2fe4 <nm_drv_init+0x15c>)
    2ef4:	4798      	blx	r3
    2ef6:	4b3c      	ldr	r3, [pc, #240]	; (2fe8 <nm_drv_init+0x160>)
    2ef8:	0018      	movs	r0, r3
    2efa:	4b3c      	ldr	r3, [pc, #240]	; (2fec <nm_drv_init+0x164>)
    2efc:	4798      	blx	r3
    2efe:	200d      	movs	r0, #13
    2f00:	4b3b      	ldr	r3, [pc, #236]	; (2ff0 <nm_drv_init+0x168>)
    2f02:	4798      	blx	r3
		goto ERR1;
    2f04:	e05f      	b.n	2fc6 <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2f06:	4b3b      	ldr	r3, [pc, #236]	; (2ff4 <nm_drv_init+0x16c>)
    2f08:	0018      	movs	r0, r3
    2f0a:	4b36      	ldr	r3, [pc, #216]	; (2fe4 <nm_drv_init+0x15c>)
    2f0c:	4798      	blx	r3
    2f0e:	4b3a      	ldr	r3, [pc, #232]	; (2ff8 <nm_drv_init+0x170>)
    2f10:	4798      	blx	r3
    2f12:	0002      	movs	r2, r0
    2f14:	4b39      	ldr	r3, [pc, #228]	; (2ffc <nm_drv_init+0x174>)
    2f16:	0011      	movs	r1, r2
    2f18:	0018      	movs	r0, r3
    2f1a:	4b32      	ldr	r3, [pc, #200]	; (2fe4 <nm_drv_init+0x15c>)
    2f1c:	4798      	blx	r3
    2f1e:	200d      	movs	r0, #13
    2f20:	4b33      	ldr	r3, [pc, #204]	; (2ff0 <nm_drv_init+0x168>)
    2f22:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2f24:	4b36      	ldr	r3, [pc, #216]	; (3000 <nm_drv_init+0x178>)
    2f26:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    2f28:	230f      	movs	r3, #15
    2f2a:	18fc      	adds	r4, r7, r3
    2f2c:	230e      	movs	r3, #14
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	0018      	movs	r0, r3
    2f34:	4b33      	ldr	r3, [pc, #204]	; (3004 <nm_drv_init+0x17c>)
    2f36:	4798      	blx	r3
    2f38:	0003      	movs	r3, r0
    2f3a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    2f3c:	230f      	movs	r3, #15
    2f3e:	18fb      	adds	r3, r7, r3
    2f40:	781b      	ldrb	r3, [r3, #0]
    2f42:	b25b      	sxtb	r3, r3
    2f44:	2b00      	cmp	r3, #0
    2f46:	d139      	bne.n	2fbc <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2f48:	230f      	movs	r3, #15
    2f4a:	18fc      	adds	r4, r7, r3
    2f4c:	230e      	movs	r3, #14
    2f4e:	18fb      	adds	r3, r7, r3
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	0018      	movs	r0, r3
    2f54:	4b2c      	ldr	r3, [pc, #176]	; (3008 <nm_drv_init+0x180>)
    2f56:	4798      	blx	r3
    2f58:	0003      	movs	r3, r0
    2f5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    2f5c:	230f      	movs	r3, #15
    2f5e:	18fb      	adds	r3, r7, r3
    2f60:	781b      	ldrb	r3, [r3, #0]
    2f62:	b25b      	sxtb	r3, r3
    2f64:	2b00      	cmp	r3, #0
    2f66:	d12b      	bne.n	2fc0 <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2f68:	230e      	movs	r3, #14
    2f6a:	18fb      	adds	r3, r7, r3
    2f6c:	781b      	ldrb	r3, [r3, #0]
    2f6e:	2b02      	cmp	r3, #2
    2f70:	d029      	beq.n	2fc6 <nm_drv_init+0x13e>
    2f72:	230e      	movs	r3, #14
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	2b03      	cmp	r3, #3
    2f7a:	d024      	beq.n	2fc6 <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2f7c:	230f      	movs	r3, #15
    2f7e:	18fc      	adds	r4, r7, r3
    2f80:	4b22      	ldr	r3, [pc, #136]	; (300c <nm_drv_init+0x184>)
    2f82:	4798      	blx	r3
    2f84:	0003      	movs	r3, r0
    2f86:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    2f88:	230f      	movs	r3, #15
    2f8a:	18fb      	adds	r3, r7, r3
    2f8c:	781b      	ldrb	r3, [r3, #0]
    2f8e:	b25b      	sxtb	r3, r3
    2f90:	2b00      	cmp	r3, #0
    2f92:	d00e      	beq.n	2fb2 <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    2f94:	23ae      	movs	r3, #174	; 0xae
    2f96:	005a      	lsls	r2, r3, #1
    2f98:	4910      	ldr	r1, [pc, #64]	; (2fdc <nm_drv_init+0x154>)
    2f9a:	4b11      	ldr	r3, [pc, #68]	; (2fe0 <nm_drv_init+0x158>)
    2f9c:	0018      	movs	r0, r3
    2f9e:	4b11      	ldr	r3, [pc, #68]	; (2fe4 <nm_drv_init+0x15c>)
    2fa0:	4798      	blx	r3
    2fa2:	4b1b      	ldr	r3, [pc, #108]	; (3010 <nm_drv_init+0x188>)
    2fa4:	0018      	movs	r0, r3
    2fa6:	4b11      	ldr	r3, [pc, #68]	; (2fec <nm_drv_init+0x164>)
    2fa8:	4798      	blx	r3
    2faa:	200d      	movs	r0, #13
    2fac:	4b10      	ldr	r3, [pc, #64]	; (2ff0 <nm_drv_init+0x168>)
    2fae:	4798      	blx	r3
		goto ERR2;
    2fb0:	e007      	b.n	2fc2 <nm_drv_init+0x13a>
	}
	
	return ret;
    2fb2:	230f      	movs	r3, #15
    2fb4:	18fb      	adds	r3, r7, r3
    2fb6:	781b      	ldrb	r3, [r3, #0]
    2fb8:	b25b      	sxtb	r3, r3
    2fba:	e008      	b.n	2fce <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    2fbc:	46c0      	nop			; (mov r8, r8)
    2fbe:	e000      	b.n	2fc2 <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    2fc0:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2fc2:	4b14      	ldr	r3, [pc, #80]	; (3014 <nm_drv_init+0x18c>)
    2fc4:	4798      	blx	r3
ERR1:
	return ret;
    2fc6:	230f      	movs	r3, #15
    2fc8:	18fb      	adds	r3, r7, r3
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	b25b      	sxtb	r3, r3
}
    2fce:	0018      	movs	r0, r3
    2fd0:	46bd      	mov	sp, r7
    2fd2:	b005      	add	sp, #20
    2fd4:	bd90      	pop	{r4, r7, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	00002a6d 	.word	0x00002a6d
    2fdc:	00012770 	.word	0x00012770
    2fe0:	000126a4 	.word	0x000126a4
    2fe4:	00010d75 	.word	0x00010d75
    2fe8:	000126b8 	.word	0x000126b8
    2fec:	00010e95 	.word	0x00010e95
    2ff0:	00010da9 	.word	0x00010da9
    2ff4:	000126d4 	.word	0x000126d4
    2ff8:	00002455 	.word	0x00002455
    2ffc:	000126e0 	.word	0x000126e0
    3000:	00004001 	.word	0x00004001
    3004:	0000254d 	.word	0x0000254d
    3008:	00002695 	.word	0x00002695
    300c:	00002399 	.word	0x00002399
    3010:	000126f0 	.word	0x000126f0
    3014:	00002aa1 	.word	0x00002aa1

00003018 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    3018:	b590      	push	{r4, r7, lr}
    301a:	b085      	sub	sp, #20
    301c:	af00      	add	r7, sp, #0
    301e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    3020:	230f      	movs	r3, #15
    3022:	18fc      	adds	r4, r7, r3
    3024:	4b2d      	ldr	r3, [pc, #180]	; (30dc <nm_drv_deinit+0xc4>)
    3026:	4798      	blx	r3
    3028:	0003      	movs	r3, r0
    302a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    302c:	230f      	movs	r3, #15
    302e:	18fb      	adds	r3, r7, r3
    3030:	781b      	ldrb	r3, [r3, #0]
    3032:	b25b      	sxtb	r3, r3
    3034:	2b00      	cmp	r3, #0
    3036:	d00e      	beq.n	3056 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    3038:	23ba      	movs	r3, #186	; 0xba
    303a:	005a      	lsls	r2, r3, #1
    303c:	4928      	ldr	r1, [pc, #160]	; (30e0 <nm_drv_deinit+0xc8>)
    303e:	4b29      	ldr	r3, [pc, #164]	; (30e4 <nm_drv_deinit+0xcc>)
    3040:	0018      	movs	r0, r3
    3042:	4b29      	ldr	r3, [pc, #164]	; (30e8 <nm_drv_deinit+0xd0>)
    3044:	4798      	blx	r3
    3046:	4b29      	ldr	r3, [pc, #164]	; (30ec <nm_drv_deinit+0xd4>)
    3048:	0018      	movs	r0, r3
    304a:	4b29      	ldr	r3, [pc, #164]	; (30f0 <nm_drv_deinit+0xd8>)
    304c:	4798      	blx	r3
    304e:	200d      	movs	r0, #13
    3050:	4b28      	ldr	r3, [pc, #160]	; (30f4 <nm_drv_deinit+0xdc>)
    3052:	4798      	blx	r3
		goto ERR1;
    3054:	e03a      	b.n	30cc <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    3056:	230f      	movs	r3, #15
    3058:	18fc      	adds	r4, r7, r3
    305a:	2000      	movs	r0, #0
    305c:	4b26      	ldr	r3, [pc, #152]	; (30f8 <nm_drv_deinit+0xe0>)
    305e:	4798      	blx	r3
    3060:	0003      	movs	r3, r0
    3062:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    3064:	230f      	movs	r3, #15
    3066:	18fb      	adds	r3, r7, r3
    3068:	781b      	ldrb	r3, [r3, #0]
    306a:	b25b      	sxtb	r3, r3
    306c:	2b00      	cmp	r3, #0
    306e:	d00f      	beq.n	3090 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    3070:	237c      	movs	r3, #124	; 0x7c
    3072:	33ff      	adds	r3, #255	; 0xff
    3074:	001a      	movs	r2, r3
    3076:	491a      	ldr	r1, [pc, #104]	; (30e0 <nm_drv_deinit+0xc8>)
    3078:	4b1a      	ldr	r3, [pc, #104]	; (30e4 <nm_drv_deinit+0xcc>)
    307a:	0018      	movs	r0, r3
    307c:	4b1a      	ldr	r3, [pc, #104]	; (30e8 <nm_drv_deinit+0xd0>)
    307e:	4798      	blx	r3
    3080:	4b1e      	ldr	r3, [pc, #120]	; (30fc <nm_drv_deinit+0xe4>)
    3082:	0018      	movs	r0, r3
    3084:	4b1a      	ldr	r3, [pc, #104]	; (30f0 <nm_drv_deinit+0xd8>)
    3086:	4798      	blx	r3
    3088:	200d      	movs	r0, #13
    308a:	4b1a      	ldr	r3, [pc, #104]	; (30f4 <nm_drv_deinit+0xdc>)
    308c:	4798      	blx	r3
		goto ERR1;
    308e:	e01d      	b.n	30cc <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    3090:	230f      	movs	r3, #15
    3092:	18fc      	adds	r4, r7, r3
    3094:	4b1a      	ldr	r3, [pc, #104]	; (3100 <nm_drv_deinit+0xe8>)
    3096:	4798      	blx	r3
    3098:	0003      	movs	r3, r0
    309a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    309c:	230f      	movs	r3, #15
    309e:	18fb      	adds	r3, r7, r3
    30a0:	781b      	ldrb	r3, [r3, #0]
    30a2:	b25b      	sxtb	r3, r3
    30a4:	2b00      	cmp	r3, #0
    30a6:	d00f      	beq.n	30c8 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    30a8:	2382      	movs	r3, #130	; 0x82
    30aa:	33ff      	adds	r3, #255	; 0xff
    30ac:	001a      	movs	r2, r3
    30ae:	490c      	ldr	r1, [pc, #48]	; (30e0 <nm_drv_deinit+0xc8>)
    30b0:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <nm_drv_deinit+0xcc>)
    30b2:	0018      	movs	r0, r3
    30b4:	4b0c      	ldr	r3, [pc, #48]	; (30e8 <nm_drv_deinit+0xd0>)
    30b6:	4798      	blx	r3
    30b8:	4b12      	ldr	r3, [pc, #72]	; (3104 <nm_drv_deinit+0xec>)
    30ba:	0018      	movs	r0, r3
    30bc:	4b0c      	ldr	r3, [pc, #48]	; (30f0 <nm_drv_deinit+0xd8>)
    30be:	4798      	blx	r3
    30c0:	200d      	movs	r0, #13
    30c2:	4b0c      	ldr	r3, [pc, #48]	; (30f4 <nm_drv_deinit+0xdc>)
    30c4:	4798      	blx	r3
		goto ERR1;
    30c6:	e001      	b.n	30cc <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    30c8:	4b0f      	ldr	r3, [pc, #60]	; (3108 <nm_drv_deinit+0xf0>)
    30ca:	4798      	blx	r3
#endif

ERR1:
	return ret;
    30cc:	230f      	movs	r3, #15
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	781b      	ldrb	r3, [r3, #0]
    30d2:	b25b      	sxtb	r3, r3
}
    30d4:	0018      	movs	r0, r3
    30d6:	46bd      	mov	sp, r7
    30d8:	b005      	add	sp, #20
    30da:	bd90      	pop	{r4, r7, pc}
    30dc:	00002749 	.word	0x00002749
    30e0:	0001277c 	.word	0x0001277c
    30e4:	000126a4 	.word	0x000126a4
    30e8:	00010d75 	.word	0x00010d75
    30ec:	00012710 	.word	0x00012710
    30f0:	00010e95 	.word	0x00010e95
    30f4:	00010da9 	.word	0x00010da9
    30f8:	00005215 	.word	0x00005215
    30fc:	00012730 	.word	0x00012730
    3100:	00002aa1 	.word	0x00002aa1
    3104:	00012754 	.word	0x00012754
    3108:	00004149 	.word	0x00004149

0000310c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    310c:	b580      	push	{r7, lr}
    310e:	b086      	sub	sp, #24
    3110:	af00      	add	r7, sp, #0
    3112:	6078      	str	r0, [r7, #4]
    3114:	000a      	movs	r2, r1
    3116:	1cbb      	adds	r3, r7, #2
    3118:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    311a:	230c      	movs	r3, #12
    311c:	18fb      	adds	r3, r7, r3
    311e:	2200      	movs	r2, #0
    3120:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    3122:	230c      	movs	r3, #12
    3124:	18fb      	adds	r3, r7, r3
    3126:	687a      	ldr	r2, [r7, #4]
    3128:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    312a:	230c      	movs	r3, #12
    312c:	18fb      	adds	r3, r7, r3
    312e:	1cba      	adds	r2, r7, #2
    3130:	8812      	ldrh	r2, [r2, #0]
    3132:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3134:	230c      	movs	r3, #12
    3136:	18fb      	adds	r3, r7, r3
    3138:	0019      	movs	r1, r3
    313a:	2003      	movs	r0, #3
    313c:	4b03      	ldr	r3, [pc, #12]	; (314c <nmi_spi_read+0x40>)
    313e:	4798      	blx	r3
    3140:	0003      	movs	r3, r0
}
    3142:	0018      	movs	r0, r3
    3144:	46bd      	mov	sp, r7
    3146:	b006      	add	sp, #24
    3148:	bd80      	pop	{r7, pc}
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	00000b7d 	.word	0x00000b7d

00003150 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    3150:	b580      	push	{r7, lr}
    3152:	b086      	sub	sp, #24
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
    3158:	000a      	movs	r2, r1
    315a:	1cbb      	adds	r3, r7, #2
    315c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    315e:	230c      	movs	r3, #12
    3160:	18fb      	adds	r3, r7, r3
    3162:	687a      	ldr	r2, [r7, #4]
    3164:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    3166:	230c      	movs	r3, #12
    3168:	18fb      	adds	r3, r7, r3
    316a:	2200      	movs	r2, #0
    316c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    316e:	230c      	movs	r3, #12
    3170:	18fb      	adds	r3, r7, r3
    3172:	1cba      	adds	r2, r7, #2
    3174:	8812      	ldrh	r2, [r2, #0]
    3176:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    3178:	230c      	movs	r3, #12
    317a:	18fb      	adds	r3, r7, r3
    317c:	0019      	movs	r1, r3
    317e:	2003      	movs	r0, #3
    3180:	4b03      	ldr	r3, [pc, #12]	; (3190 <nmi_spi_write+0x40>)
    3182:	4798      	blx	r3
    3184:	0003      	movs	r3, r0
}
    3186:	0018      	movs	r0, r3
    3188:	46bd      	mov	sp, r7
    318a:	b006      	add	sp, #24
    318c:	bd80      	pop	{r7, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	00000b7d 	.word	0x00000b7d

00003194 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    3194:	b580      	push	{r7, lr}
    3196:	b082      	sub	sp, #8
    3198:	af00      	add	r7, sp, #0
    319a:	0002      	movs	r2, r0
    319c:	1dfb      	adds	r3, r7, #7
    319e:	701a      	strb	r2, [r3, #0]
    31a0:	1dbb      	adds	r3, r7, #6
    31a2:	1c0a      	adds	r2, r1, #0
    31a4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    31a6:	1dfb      	adds	r3, r7, #7
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	005a      	lsls	r2, r3, #1
    31ac:	1dbb      	adds	r3, r7, #6
    31ae:	781b      	ldrb	r3, [r3, #0]
    31b0:	4053      	eors	r3, r2
    31b2:	4a03      	ldr	r2, [pc, #12]	; (31c0 <crc7_byte+0x2c>)
    31b4:	5cd3      	ldrb	r3, [r2, r3]
}
    31b6:	0018      	movs	r0, r3
    31b8:	46bd      	mov	sp, r7
    31ba:	b002      	add	sp, #8
    31bc:	bd80      	pop	{r7, pc}
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	0001278c 	.word	0x0001278c

000031c4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    31c4:	b590      	push	{r4, r7, lr}
    31c6:	b085      	sub	sp, #20
    31c8:	af00      	add	r7, sp, #0
    31ca:	60b9      	str	r1, [r7, #8]
    31cc:	607a      	str	r2, [r7, #4]
    31ce:	230f      	movs	r3, #15
    31d0:	18fb      	adds	r3, r7, r3
    31d2:	1c02      	adds	r2, r0, #0
    31d4:	701a      	strb	r2, [r3, #0]
	while (len--)
    31d6:	e00e      	b.n	31f6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    31d8:	68bb      	ldr	r3, [r7, #8]
    31da:	1c5a      	adds	r2, r3, #1
    31dc:	60ba      	str	r2, [r7, #8]
    31de:	781a      	ldrb	r2, [r3, #0]
    31e0:	230f      	movs	r3, #15
    31e2:	18fc      	adds	r4, r7, r3
    31e4:	230f      	movs	r3, #15
    31e6:	18fb      	adds	r3, r7, r3
    31e8:	781b      	ldrb	r3, [r3, #0]
    31ea:	0011      	movs	r1, r2
    31ec:	0018      	movs	r0, r3
    31ee:	4b08      	ldr	r3, [pc, #32]	; (3210 <crc7+0x4c>)
    31f0:	4798      	blx	r3
    31f2:	0003      	movs	r3, r0
    31f4:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	1e5a      	subs	r2, r3, #1
    31fa:	607a      	str	r2, [r7, #4]
    31fc:	2b00      	cmp	r3, #0
    31fe:	d1eb      	bne.n	31d8 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    3200:	230f      	movs	r3, #15
    3202:	18fb      	adds	r3, r7, r3
    3204:	781b      	ldrb	r3, [r3, #0]
}
    3206:	0018      	movs	r0, r3
    3208:	46bd      	mov	sp, r7
    320a:	b005      	add	sp, #20
    320c:	bd90      	pop	{r4, r7, pc}
    320e:	46c0      	nop			; (mov r8, r8)
    3210:	00003195 	.word	0x00003195

00003214 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    3214:	b590      	push	{r4, r7, lr}
    3216:	b089      	sub	sp, #36	; 0x24
    3218:	af00      	add	r7, sp, #0
    321a:	60b9      	str	r1, [r7, #8]
    321c:	607a      	str	r2, [r7, #4]
    321e:	603b      	str	r3, [r7, #0]
    3220:	230f      	movs	r3, #15
    3222:	18fb      	adds	r3, r7, r3
    3224:	1c02      	adds	r2, r0, #0
    3226:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    3228:	231f      	movs	r3, #31
    322a:	18fb      	adds	r3, r7, r3
    322c:	2205      	movs	r2, #5
    322e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    3230:	231e      	movs	r3, #30
    3232:	18fb      	adds	r3, r7, r3
    3234:	2201      	movs	r2, #1
    3236:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    3238:	2314      	movs	r3, #20
    323a:	18fb      	adds	r3, r7, r3
    323c:	220f      	movs	r2, #15
    323e:	18ba      	adds	r2, r7, r2
    3240:	7812      	ldrb	r2, [r2, #0]
    3242:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    3244:	230f      	movs	r3, #15
    3246:	18fb      	adds	r3, r7, r3
    3248:	781b      	ldrb	r3, [r3, #0]
    324a:	3bc1      	subs	r3, #193	; 0xc1
    324c:	2b0e      	cmp	r3, #14
    324e:	d900      	bls.n	3252 <spi_cmd+0x3e>
    3250:	e11b      	b.n	348a <spi_cmd+0x276>
    3252:	009a      	lsls	r2, r3, #2
    3254:	4bb6      	ldr	r3, [pc, #728]	; (3530 <spi_cmd+0x31c>)
    3256:	18d3      	adds	r3, r2, r3
    3258:	681b      	ldr	r3, [r3, #0]
    325a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    325c:	68bb      	ldr	r3, [r7, #8]
    325e:	0c1b      	lsrs	r3, r3, #16
    3260:	b2da      	uxtb	r2, r3
    3262:	2314      	movs	r3, #20
    3264:	18fb      	adds	r3, r7, r3
    3266:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3268:	68bb      	ldr	r3, [r7, #8]
    326a:	0a1b      	lsrs	r3, r3, #8
    326c:	b2da      	uxtb	r2, r3
    326e:	2314      	movs	r3, #20
    3270:	18fb      	adds	r3, r7, r3
    3272:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    3274:	68bb      	ldr	r3, [r7, #8]
    3276:	b2da      	uxtb	r2, r3
    3278:	2314      	movs	r3, #20
    327a:	18fb      	adds	r3, r7, r3
    327c:	70da      	strb	r2, [r3, #3]
		len = 5;
    327e:	231f      	movs	r3, #31
    3280:	18fb      	adds	r3, r7, r3
    3282:	2205      	movs	r2, #5
    3284:	701a      	strb	r2, [r3, #0]
		break;
    3286:	e105      	b.n	3494 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    3288:	68bb      	ldr	r3, [r7, #8]
    328a:	0a1b      	lsrs	r3, r3, #8
    328c:	b2da      	uxtb	r2, r3
    328e:	2314      	movs	r3, #20
    3290:	18fb      	adds	r3, r7, r3
    3292:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    3294:	2330      	movs	r3, #48	; 0x30
    3296:	18fb      	adds	r3, r7, r3
    3298:	781b      	ldrb	r3, [r3, #0]
    329a:	2b00      	cmp	r3, #0
    329c:	d009      	beq.n	32b2 <spi_cmd+0x9e>
    329e:	2314      	movs	r3, #20
    32a0:	18fb      	adds	r3, r7, r3
    32a2:	785b      	ldrb	r3, [r3, #1]
    32a4:	2280      	movs	r2, #128	; 0x80
    32a6:	4252      	negs	r2, r2
    32a8:	4313      	orrs	r3, r2
    32aa:	b2da      	uxtb	r2, r3
    32ac:	2314      	movs	r3, #20
    32ae:	18fb      	adds	r3, r7, r3
    32b0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    32b2:	68bb      	ldr	r3, [r7, #8]
    32b4:	b2da      	uxtb	r2, r3
    32b6:	2314      	movs	r3, #20
    32b8:	18fb      	adds	r3, r7, r3
    32ba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    32bc:	2314      	movs	r3, #20
    32be:	18fb      	adds	r3, r7, r3
    32c0:	2200      	movs	r2, #0
    32c2:	70da      	strb	r2, [r3, #3]
		len = 5;
    32c4:	231f      	movs	r3, #31
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	2205      	movs	r2, #5
    32ca:	701a      	strb	r2, [r3, #0]
		break;
    32cc:	e0e2      	b.n	3494 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    32ce:	2314      	movs	r3, #20
    32d0:	18fb      	adds	r3, r7, r3
    32d2:	2200      	movs	r2, #0
    32d4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    32d6:	2314      	movs	r3, #20
    32d8:	18fb      	adds	r3, r7, r3
    32da:	2200      	movs	r2, #0
    32dc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    32de:	2314      	movs	r3, #20
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	2200      	movs	r2, #0
    32e4:	70da      	strb	r2, [r3, #3]
		len = 5;
    32e6:	231f      	movs	r3, #31
    32e8:	18fb      	adds	r3, r7, r3
    32ea:	2205      	movs	r2, #5
    32ec:	701a      	strb	r2, [r3, #0]
		break;
    32ee:	e0d1      	b.n	3494 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    32f0:	2314      	movs	r3, #20
    32f2:	18fb      	adds	r3, r7, r3
    32f4:	2200      	movs	r2, #0
    32f6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    32f8:	2314      	movs	r3, #20
    32fa:	18fb      	adds	r3, r7, r3
    32fc:	2200      	movs	r2, #0
    32fe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    3300:	2314      	movs	r3, #20
    3302:	18fb      	adds	r3, r7, r3
    3304:	2200      	movs	r2, #0
    3306:	70da      	strb	r2, [r3, #3]
		len = 5;
    3308:	231f      	movs	r3, #31
    330a:	18fb      	adds	r3, r7, r3
    330c:	2205      	movs	r2, #5
    330e:	701a      	strb	r2, [r3, #0]
		break;
    3310:	e0c0      	b.n	3494 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    3312:	2314      	movs	r3, #20
    3314:	18fb      	adds	r3, r7, r3
    3316:	22ff      	movs	r2, #255	; 0xff
    3318:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    331a:	2314      	movs	r3, #20
    331c:	18fb      	adds	r3, r7, r3
    331e:	22ff      	movs	r2, #255	; 0xff
    3320:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    3322:	2314      	movs	r3, #20
    3324:	18fb      	adds	r3, r7, r3
    3326:	22ff      	movs	r2, #255	; 0xff
    3328:	70da      	strb	r2, [r3, #3]
		len = 5;
    332a:	231f      	movs	r3, #31
    332c:	18fb      	adds	r3, r7, r3
    332e:	2205      	movs	r2, #5
    3330:	701a      	strb	r2, [r3, #0]
		break;
    3332:	e0af      	b.n	3494 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    3334:	68bb      	ldr	r3, [r7, #8]
    3336:	0c1b      	lsrs	r3, r3, #16
    3338:	b2da      	uxtb	r2, r3
    333a:	2314      	movs	r3, #20
    333c:	18fb      	adds	r3, r7, r3
    333e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3340:	68bb      	ldr	r3, [r7, #8]
    3342:	0a1b      	lsrs	r3, r3, #8
    3344:	b2da      	uxtb	r2, r3
    3346:	2314      	movs	r3, #20
    3348:	18fb      	adds	r3, r7, r3
    334a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    334c:	68bb      	ldr	r3, [r7, #8]
    334e:	b2da      	uxtb	r2, r3
    3350:	2314      	movs	r3, #20
    3352:	18fb      	adds	r3, r7, r3
    3354:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    3356:	683b      	ldr	r3, [r7, #0]
    3358:	0a1b      	lsrs	r3, r3, #8
    335a:	b2da      	uxtb	r2, r3
    335c:	2314      	movs	r3, #20
    335e:	18fb      	adds	r3, r7, r3
    3360:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    3362:	683b      	ldr	r3, [r7, #0]
    3364:	b2da      	uxtb	r2, r3
    3366:	2314      	movs	r3, #20
    3368:	18fb      	adds	r3, r7, r3
    336a:	715a      	strb	r2, [r3, #5]
		len = 7;
    336c:	231f      	movs	r3, #31
    336e:	18fb      	adds	r3, r7, r3
    3370:	2207      	movs	r2, #7
    3372:	701a      	strb	r2, [r3, #0]
		break;
    3374:	e08e      	b.n	3494 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    3376:	68bb      	ldr	r3, [r7, #8]
    3378:	0c1b      	lsrs	r3, r3, #16
    337a:	b2da      	uxtb	r2, r3
    337c:	2314      	movs	r3, #20
    337e:	18fb      	adds	r3, r7, r3
    3380:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    3382:	68bb      	ldr	r3, [r7, #8]
    3384:	0a1b      	lsrs	r3, r3, #8
    3386:	b2da      	uxtb	r2, r3
    3388:	2314      	movs	r3, #20
    338a:	18fb      	adds	r3, r7, r3
    338c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    338e:	68bb      	ldr	r3, [r7, #8]
    3390:	b2da      	uxtb	r2, r3
    3392:	2314      	movs	r3, #20
    3394:	18fb      	adds	r3, r7, r3
    3396:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    3398:	683b      	ldr	r3, [r7, #0]
    339a:	0c1b      	lsrs	r3, r3, #16
    339c:	b2da      	uxtb	r2, r3
    339e:	2314      	movs	r3, #20
    33a0:	18fb      	adds	r3, r7, r3
    33a2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    33a4:	683b      	ldr	r3, [r7, #0]
    33a6:	0a1b      	lsrs	r3, r3, #8
    33a8:	b2da      	uxtb	r2, r3
    33aa:	2314      	movs	r3, #20
    33ac:	18fb      	adds	r3, r7, r3
    33ae:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    33b0:	683b      	ldr	r3, [r7, #0]
    33b2:	b2da      	uxtb	r2, r3
    33b4:	2314      	movs	r3, #20
    33b6:	18fb      	adds	r3, r7, r3
    33b8:	719a      	strb	r2, [r3, #6]
		len = 8;
    33ba:	231f      	movs	r3, #31
    33bc:	18fb      	adds	r3, r7, r3
    33be:	2208      	movs	r2, #8
    33c0:	701a      	strb	r2, [r3, #0]
		break;
    33c2:	e067      	b.n	3494 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    33c4:	68bb      	ldr	r3, [r7, #8]
    33c6:	0a1b      	lsrs	r3, r3, #8
    33c8:	b2da      	uxtb	r2, r3
    33ca:	2314      	movs	r3, #20
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    33d0:	2330      	movs	r3, #48	; 0x30
    33d2:	18fb      	adds	r3, r7, r3
    33d4:	781b      	ldrb	r3, [r3, #0]
    33d6:	2b00      	cmp	r3, #0
    33d8:	d009      	beq.n	33ee <spi_cmd+0x1da>
    33da:	2314      	movs	r3, #20
    33dc:	18fb      	adds	r3, r7, r3
    33de:	785b      	ldrb	r3, [r3, #1]
    33e0:	2280      	movs	r2, #128	; 0x80
    33e2:	4252      	negs	r2, r2
    33e4:	4313      	orrs	r3, r2
    33e6:	b2da      	uxtb	r2, r3
    33e8:	2314      	movs	r3, #20
    33ea:	18fb      	adds	r3, r7, r3
    33ec:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    33ee:	68bb      	ldr	r3, [r7, #8]
    33f0:	b2da      	uxtb	r2, r3
    33f2:	2314      	movs	r3, #20
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    33f8:	687b      	ldr	r3, [r7, #4]
    33fa:	0e1b      	lsrs	r3, r3, #24
    33fc:	b2da      	uxtb	r2, r3
    33fe:	2314      	movs	r3, #20
    3400:	18fb      	adds	r3, r7, r3
    3402:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    3404:	687b      	ldr	r3, [r7, #4]
    3406:	0c1b      	lsrs	r3, r3, #16
    3408:	b2da      	uxtb	r2, r3
    340a:	2314      	movs	r3, #20
    340c:	18fb      	adds	r3, r7, r3
    340e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    3410:	687b      	ldr	r3, [r7, #4]
    3412:	0a1b      	lsrs	r3, r3, #8
    3414:	b2da      	uxtb	r2, r3
    3416:	2314      	movs	r3, #20
    3418:	18fb      	adds	r3, r7, r3
    341a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	b2da      	uxtb	r2, r3
    3420:	2314      	movs	r3, #20
    3422:	18fb      	adds	r3, r7, r3
    3424:	719a      	strb	r2, [r3, #6]
		len = 8;
    3426:	231f      	movs	r3, #31
    3428:	18fb      	adds	r3, r7, r3
    342a:	2208      	movs	r2, #8
    342c:	701a      	strb	r2, [r3, #0]
		break;
    342e:	e031      	b.n	3494 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    3430:	68bb      	ldr	r3, [r7, #8]
    3432:	0c1b      	lsrs	r3, r3, #16
    3434:	b2da      	uxtb	r2, r3
    3436:	2314      	movs	r3, #20
    3438:	18fb      	adds	r3, r7, r3
    343a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    343c:	68bb      	ldr	r3, [r7, #8]
    343e:	0a1b      	lsrs	r3, r3, #8
    3440:	b2da      	uxtb	r2, r3
    3442:	2314      	movs	r3, #20
    3444:	18fb      	adds	r3, r7, r3
    3446:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    3448:	68bb      	ldr	r3, [r7, #8]
    344a:	b2da      	uxtb	r2, r3
    344c:	2314      	movs	r3, #20
    344e:	18fb      	adds	r3, r7, r3
    3450:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    3452:	687b      	ldr	r3, [r7, #4]
    3454:	0e1b      	lsrs	r3, r3, #24
    3456:	b2da      	uxtb	r2, r3
    3458:	2314      	movs	r3, #20
    345a:	18fb      	adds	r3, r7, r3
    345c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    345e:	687b      	ldr	r3, [r7, #4]
    3460:	0c1b      	lsrs	r3, r3, #16
    3462:	b2da      	uxtb	r2, r3
    3464:	2314      	movs	r3, #20
    3466:	18fb      	adds	r3, r7, r3
    3468:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    346a:	687b      	ldr	r3, [r7, #4]
    346c:	0a1b      	lsrs	r3, r3, #8
    346e:	b2da      	uxtb	r2, r3
    3470:	2314      	movs	r3, #20
    3472:	18fb      	adds	r3, r7, r3
    3474:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    3476:	687b      	ldr	r3, [r7, #4]
    3478:	b2da      	uxtb	r2, r3
    347a:	2314      	movs	r3, #20
    347c:	18fb      	adds	r3, r7, r3
    347e:	71da      	strb	r2, [r3, #7]
		len = 9;
    3480:	231f      	movs	r3, #31
    3482:	18fb      	adds	r3, r7, r3
    3484:	2209      	movs	r2, #9
    3486:	701a      	strb	r2, [r3, #0]
		break;
    3488:	e004      	b.n	3494 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    348a:	231e      	movs	r3, #30
    348c:	18fb      	adds	r3, r7, r3
    348e:	2200      	movs	r2, #0
    3490:	701a      	strb	r2, [r3, #0]
		break;
    3492:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    3494:	231e      	movs	r3, #30
    3496:	18fb      	adds	r3, r7, r3
    3498:	781b      	ldrb	r3, [r3, #0]
    349a:	b25b      	sxtb	r3, r3
    349c:	2b00      	cmp	r3, #0
    349e:	d03e      	beq.n	351e <spi_cmd+0x30a>
		if (!gu8Crc_off)
    34a0:	4b24      	ldr	r3, [pc, #144]	; (3534 <spi_cmd+0x320>)
    34a2:	781b      	ldrb	r3, [r3, #0]
    34a4:	2b00      	cmp	r3, #0
    34a6:	d115      	bne.n	34d4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    34a8:	231f      	movs	r3, #31
    34aa:	18fb      	adds	r3, r7, r3
    34ac:	781b      	ldrb	r3, [r3, #0]
    34ae:	1e5c      	subs	r4, r3, #1
    34b0:	231f      	movs	r3, #31
    34b2:	18fb      	adds	r3, r7, r3
    34b4:	781b      	ldrb	r3, [r3, #0]
    34b6:	3b01      	subs	r3, #1
    34b8:	001a      	movs	r2, r3
    34ba:	2314      	movs	r3, #20
    34bc:	18fb      	adds	r3, r7, r3
    34be:	0019      	movs	r1, r3
    34c0:	207f      	movs	r0, #127	; 0x7f
    34c2:	4b1d      	ldr	r3, [pc, #116]	; (3538 <spi_cmd+0x324>)
    34c4:	4798      	blx	r3
    34c6:	0003      	movs	r3, r0
    34c8:	18db      	adds	r3, r3, r3
    34ca:	b2da      	uxtb	r2, r3
    34cc:	2314      	movs	r3, #20
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	551a      	strb	r2, [r3, r4]
    34d2:	e006      	b.n	34e2 <spi_cmd+0x2ce>
		else
			len-=1;
    34d4:	231f      	movs	r3, #31
    34d6:	18fb      	adds	r3, r7, r3
    34d8:	221f      	movs	r2, #31
    34da:	18ba      	adds	r2, r7, r2
    34dc:	7812      	ldrb	r2, [r2, #0]
    34de:	3a01      	subs	r2, #1
    34e0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    34e2:	231f      	movs	r3, #31
    34e4:	18fb      	adds	r3, r7, r3
    34e6:	781b      	ldrb	r3, [r3, #0]
    34e8:	b29a      	uxth	r2, r3
    34ea:	2314      	movs	r3, #20
    34ec:	18fb      	adds	r3, r7, r3
    34ee:	0011      	movs	r1, r2
    34f0:	0018      	movs	r0, r3
    34f2:	4b12      	ldr	r3, [pc, #72]	; (353c <spi_cmd+0x328>)
    34f4:	4798      	blx	r3
    34f6:	1e03      	subs	r3, r0, #0
    34f8:	d011      	beq.n	351e <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    34fa:	2384      	movs	r3, #132	; 0x84
    34fc:	005a      	lsls	r2, r3, #1
    34fe:	4910      	ldr	r1, [pc, #64]	; (3540 <spi_cmd+0x32c>)
    3500:	4b10      	ldr	r3, [pc, #64]	; (3544 <spi_cmd+0x330>)
    3502:	0018      	movs	r0, r3
    3504:	4b10      	ldr	r3, [pc, #64]	; (3548 <spi_cmd+0x334>)
    3506:	4798      	blx	r3
    3508:	4b10      	ldr	r3, [pc, #64]	; (354c <spi_cmd+0x338>)
    350a:	0018      	movs	r0, r3
    350c:	4b10      	ldr	r3, [pc, #64]	; (3550 <spi_cmd+0x33c>)
    350e:	4798      	blx	r3
    3510:	200d      	movs	r0, #13
    3512:	4b10      	ldr	r3, [pc, #64]	; (3554 <spi_cmd+0x340>)
    3514:	4798      	blx	r3
			result = N_FAIL;
    3516:	231e      	movs	r3, #30
    3518:	18fb      	adds	r3, r7, r3
    351a:	2200      	movs	r2, #0
    351c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    351e:	231e      	movs	r3, #30
    3520:	18fb      	adds	r3, r7, r3
    3522:	781b      	ldrb	r3, [r3, #0]
    3524:	b25b      	sxtb	r3, r3
}
    3526:	0018      	movs	r0, r3
    3528:	46bd      	mov	sp, r7
    352a:	b009      	add	sp, #36	; 0x24
    352c:	bd90      	pop	{r4, r7, pc}
    352e:	46c0      	nop			; (mov r8, r8)
    3530:	00012d44 	.word	0x00012d44
    3534:	200000dc 	.word	0x200000dc
    3538:	000031c5 	.word	0x000031c5
    353c:	00003151 	.word	0x00003151
    3540:	00012d80 	.word	0x00012d80
    3544:	0001288c 	.word	0x0001288c
    3548:	00010d75 	.word	0x00010d75
    354c:	000128a0 	.word	0x000128a0
    3550:	00010e95 	.word	0x00010e95
    3554:	00010da9 	.word	0x00010da9

00003558 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    3558:	b580      	push	{r7, lr}
    355a:	b084      	sub	sp, #16
    355c:	af00      	add	r7, sp, #0
    355e:	0002      	movs	r2, r0
    3560:	1dfb      	adds	r3, r7, #7
    3562:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    3564:	230f      	movs	r3, #15
    3566:	18fb      	adds	r3, r7, r3
    3568:	2201      	movs	r2, #1
    356a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    356c:	1dfb      	adds	r3, r7, #7
    356e:	781b      	ldrb	r3, [r3, #0]
    3570:	2bcf      	cmp	r3, #207	; 0xcf
    3572:	d007      	beq.n	3584 <spi_cmd_rsp+0x2c>
    3574:	1dfb      	adds	r3, r7, #7
    3576:	781b      	ldrb	r3, [r3, #0]
    3578:	2bc5      	cmp	r3, #197	; 0xc5
    357a:	d003      	beq.n	3584 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    357c:	1dfb      	adds	r3, r7, #7
    357e:	781b      	ldrb	r3, [r3, #0]
    3580:	2bc6      	cmp	r3, #198	; 0xc6
    3582:	d10c      	bne.n	359e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3584:	230d      	movs	r3, #13
    3586:	18fb      	adds	r3, r7, r3
    3588:	2101      	movs	r1, #1
    358a:	0018      	movs	r0, r3
    358c:	4b3a      	ldr	r3, [pc, #232]	; (3678 <spi_cmd_rsp+0x120>)
    358e:	4798      	blx	r3
    3590:	1e03      	subs	r3, r0, #0
    3592:	d004      	beq.n	359e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    3594:	230f      	movs	r3, #15
    3596:	18fb      	adds	r3, r7, r3
    3598:	2200      	movs	r2, #0
    359a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    359c:	e063      	b.n	3666 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    359e:	230e      	movs	r3, #14
    35a0:	18fb      	adds	r3, r7, r3
    35a2:	220a      	movs	r2, #10
    35a4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    35a6:	230d      	movs	r3, #13
    35a8:	18fb      	adds	r3, r7, r3
    35aa:	2101      	movs	r1, #1
    35ac:	0018      	movs	r0, r3
    35ae:	4b32      	ldr	r3, [pc, #200]	; (3678 <spi_cmd_rsp+0x120>)
    35b0:	4798      	blx	r3
    35b2:	1e03      	subs	r3, r0, #0
    35b4:	d013      	beq.n	35de <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    35b6:	2328      	movs	r3, #40	; 0x28
    35b8:	33ff      	adds	r3, #255	; 0xff
    35ba:	001a      	movs	r2, r3
    35bc:	492f      	ldr	r1, [pc, #188]	; (367c <spi_cmd_rsp+0x124>)
    35be:	4b30      	ldr	r3, [pc, #192]	; (3680 <spi_cmd_rsp+0x128>)
    35c0:	0018      	movs	r0, r3
    35c2:	4b30      	ldr	r3, [pc, #192]	; (3684 <spi_cmd_rsp+0x12c>)
    35c4:	4798      	blx	r3
    35c6:	4b30      	ldr	r3, [pc, #192]	; (3688 <spi_cmd_rsp+0x130>)
    35c8:	0018      	movs	r0, r3
    35ca:	4b30      	ldr	r3, [pc, #192]	; (368c <spi_cmd_rsp+0x134>)
    35cc:	4798      	blx	r3
    35ce:	200d      	movs	r0, #13
    35d0:	4b2f      	ldr	r3, [pc, #188]	; (3690 <spi_cmd_rsp+0x138>)
    35d2:	4798      	blx	r3
			result = N_FAIL;
    35d4:	230f      	movs	r3, #15
    35d6:	18fb      	adds	r3, r7, r3
    35d8:	2200      	movs	r2, #0
    35da:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    35dc:	e043      	b.n	3666 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    35de:	230d      	movs	r3, #13
    35e0:	18fb      	adds	r3, r7, r3
    35e2:	781b      	ldrb	r3, [r3, #0]
    35e4:	1dfa      	adds	r2, r7, #7
    35e6:	7812      	ldrb	r2, [r2, #0]
    35e8:	429a      	cmp	r2, r3
    35ea:	d00b      	beq.n	3604 <spi_cmd_rsp+0xac>
    35ec:	230e      	movs	r3, #14
    35ee:	18fb      	adds	r3, r7, r3
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	b25b      	sxtb	r3, r3
    35f4:	b2da      	uxtb	r2, r3
    35f6:	3a01      	subs	r2, #1
    35f8:	b2d1      	uxtb	r1, r2
    35fa:	220e      	movs	r2, #14
    35fc:	18ba      	adds	r2, r7, r2
    35fe:	7011      	strb	r1, [r2, #0]
    3600:	2b00      	cmp	r3, #0
    3602:	dcd0      	bgt.n	35a6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    3604:	230e      	movs	r3, #14
    3606:	18fb      	adds	r3, r7, r3
    3608:	220a      	movs	r2, #10
    360a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    360c:	230d      	movs	r3, #13
    360e:	18fb      	adds	r3, r7, r3
    3610:	2101      	movs	r1, #1
    3612:	0018      	movs	r0, r3
    3614:	4b18      	ldr	r3, [pc, #96]	; (3678 <spi_cmd_rsp+0x120>)
    3616:	4798      	blx	r3
    3618:	1e03      	subs	r3, r0, #0
    361a:	d013      	beq.n	3644 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    361c:	2336      	movs	r3, #54	; 0x36
    361e:	33ff      	adds	r3, #255	; 0xff
    3620:	001a      	movs	r2, r3
    3622:	4916      	ldr	r1, [pc, #88]	; (367c <spi_cmd_rsp+0x124>)
    3624:	4b16      	ldr	r3, [pc, #88]	; (3680 <spi_cmd_rsp+0x128>)
    3626:	0018      	movs	r0, r3
    3628:	4b16      	ldr	r3, [pc, #88]	; (3684 <spi_cmd_rsp+0x12c>)
    362a:	4798      	blx	r3
    362c:	4b16      	ldr	r3, [pc, #88]	; (3688 <spi_cmd_rsp+0x130>)
    362e:	0018      	movs	r0, r3
    3630:	4b16      	ldr	r3, [pc, #88]	; (368c <spi_cmd_rsp+0x134>)
    3632:	4798      	blx	r3
    3634:	200d      	movs	r0, #13
    3636:	4b16      	ldr	r3, [pc, #88]	; (3690 <spi_cmd_rsp+0x138>)
    3638:	4798      	blx	r3
			result = N_FAIL;
    363a:	230f      	movs	r3, #15
    363c:	18fb      	adds	r3, r7, r3
    363e:	2200      	movs	r2, #0
    3640:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    3642:	e010      	b.n	3666 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3644:	230d      	movs	r3, #13
    3646:	18fb      	adds	r3, r7, r3
    3648:	781b      	ldrb	r3, [r3, #0]
    364a:	2b00      	cmp	r3, #0
    364c:	d00b      	beq.n	3666 <spi_cmd_rsp+0x10e>
    364e:	230e      	movs	r3, #14
    3650:	18fb      	adds	r3, r7, r3
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	b25b      	sxtb	r3, r3
    3656:	b2da      	uxtb	r2, r3
    3658:	3a01      	subs	r2, #1
    365a:	b2d1      	uxtb	r1, r2
    365c:	220e      	movs	r2, #14
    365e:	18ba      	adds	r2, r7, r2
    3660:	7011      	strb	r1, [r2, #0]
    3662:	2b00      	cmp	r3, #0
    3664:	dcd2      	bgt.n	360c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    3666:	230f      	movs	r3, #15
    3668:	18fb      	adds	r3, r7, r3
    366a:	781b      	ldrb	r3, [r3, #0]
    366c:	b25b      	sxtb	r3, r3
}
    366e:	0018      	movs	r0, r3
    3670:	46bd      	mov	sp, r7
    3672:	b004      	add	sp, #16
    3674:	bd80      	pop	{r7, pc}
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	0000310d 	.word	0x0000310d
    367c:	00012d88 	.word	0x00012d88
    3680:	0001288c 	.word	0x0001288c
    3684:	00010d75 	.word	0x00010d75
    3688:	000128cc 	.word	0x000128cc
    368c:	00010e95 	.word	0x00010e95
    3690:	00010da9 	.word	0x00010da9

00003694 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3694:	b580      	push	{r7, lr}
    3696:	b086      	sub	sp, #24
    3698:	af00      	add	r7, sp, #0
    369a:	6078      	str	r0, [r7, #4]
    369c:	0008      	movs	r0, r1
    369e:	0011      	movs	r1, r2
    36a0:	1cbb      	adds	r3, r7, #2
    36a2:	1c02      	adds	r2, r0, #0
    36a4:	801a      	strh	r2, [r3, #0]
    36a6:	1c7b      	adds	r3, r7, #1
    36a8:	1c0a      	adds	r2, r1, #0
    36aa:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    36ac:	2311      	movs	r3, #17
    36ae:	18fb      	adds	r3, r7, r3
    36b0:	2201      	movs	r2, #1
    36b2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    36b4:	2314      	movs	r3, #20
    36b6:	18fb      	adds	r3, r7, r3
    36b8:	2200      	movs	r2, #0
    36ba:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    36bc:	1cbb      	adds	r3, r7, #2
    36be:	881a      	ldrh	r2, [r3, #0]
    36c0:	2380      	movs	r3, #128	; 0x80
    36c2:	019b      	lsls	r3, r3, #6
    36c4:	429a      	cmp	r2, r3
    36c6:	d805      	bhi.n	36d4 <spi_data_read+0x40>
			nbytes = sz;
    36c8:	2312      	movs	r3, #18
    36ca:	18fb      	adds	r3, r7, r3
    36cc:	1cba      	adds	r2, r7, #2
    36ce:	8812      	ldrh	r2, [r2, #0]
    36d0:	801a      	strh	r2, [r3, #0]
    36d2:	e004      	b.n	36de <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    36d4:	2312      	movs	r3, #18
    36d6:	18fb      	adds	r3, r7, r3
    36d8:	2280      	movs	r2, #128	; 0x80
    36da:	0192      	lsls	r2, r2, #6
    36dc:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    36de:	2316      	movs	r3, #22
    36e0:	18fb      	adds	r3, r7, r3
    36e2:	220a      	movs	r2, #10
    36e4:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    36e6:	230b      	movs	r3, #11
    36e8:	18fb      	adds	r3, r7, r3
    36ea:	2101      	movs	r1, #1
    36ec:	0018      	movs	r0, r3
    36ee:	4b5f      	ldr	r3, [pc, #380]	; (386c <spi_data_read+0x1d8>)
    36f0:	4798      	blx	r3
    36f2:	1e03      	subs	r3, r0, #0
    36f4:	d013      	beq.n	371e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    36f6:	2358      	movs	r3, #88	; 0x58
    36f8:	33ff      	adds	r3, #255	; 0xff
    36fa:	001a      	movs	r2, r3
    36fc:	495c      	ldr	r1, [pc, #368]	; (3870 <spi_data_read+0x1dc>)
    36fe:	4b5d      	ldr	r3, [pc, #372]	; (3874 <spi_data_read+0x1e0>)
    3700:	0018      	movs	r0, r3
    3702:	4b5d      	ldr	r3, [pc, #372]	; (3878 <spi_data_read+0x1e4>)
    3704:	4798      	blx	r3
    3706:	4b5d      	ldr	r3, [pc, #372]	; (387c <spi_data_read+0x1e8>)
    3708:	0018      	movs	r0, r3
    370a:	4b5d      	ldr	r3, [pc, #372]	; (3880 <spi_data_read+0x1ec>)
    370c:	4798      	blx	r3
    370e:	200d      	movs	r0, #13
    3710:	4b5c      	ldr	r3, [pc, #368]	; (3884 <spi_data_read+0x1f0>)
    3712:	4798      	blx	r3
				result = N_FAIL;
    3714:	2311      	movs	r3, #17
    3716:	18fb      	adds	r3, r7, r3
    3718:	2200      	movs	r2, #0
    371a:	701a      	strb	r2, [r3, #0]
				break;
    371c:	e017      	b.n	374e <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    371e:	230b      	movs	r3, #11
    3720:	18fb      	adds	r3, r7, r3
    3722:	781b      	ldrb	r3, [r3, #0]
    3724:	091b      	lsrs	r3, r3, #4
    3726:	b2db      	uxtb	r3, r3
    3728:	001a      	movs	r2, r3
    372a:	230f      	movs	r3, #15
    372c:	4013      	ands	r3, r2
    372e:	2b0f      	cmp	r3, #15
    3730:	d00c      	beq.n	374c <spi_data_read+0xb8>
				break;
		} while (retry--);
    3732:	2316      	movs	r3, #22
    3734:	18fb      	adds	r3, r7, r3
    3736:	2200      	movs	r2, #0
    3738:	5e9b      	ldrsh	r3, [r3, r2]
    373a:	b29a      	uxth	r2, r3
    373c:	3a01      	subs	r2, #1
    373e:	b291      	uxth	r1, r2
    3740:	2216      	movs	r2, #22
    3742:	18ba      	adds	r2, r7, r2
    3744:	8011      	strh	r1, [r2, #0]
    3746:	2b00      	cmp	r3, #0
    3748:	d1cd      	bne.n	36e6 <spi_data_read+0x52>
    374a:	e000      	b.n	374e <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    374c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    374e:	2311      	movs	r3, #17
    3750:	18fb      	adds	r3, r7, r3
    3752:	781b      	ldrb	r3, [r3, #0]
    3754:	b25b      	sxtb	r3, r3
    3756:	2b00      	cmp	r3, #0
    3758:	d100      	bne.n	375c <spi_data_read+0xc8>
    375a:	e07d      	b.n	3858 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    375c:	2316      	movs	r3, #22
    375e:	18fb      	adds	r3, r7, r3
    3760:	2200      	movs	r2, #0
    3762:	5e9b      	ldrsh	r3, [r3, r2]
    3764:	2b00      	cmp	r3, #0
    3766:	dc18      	bgt.n	379a <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3768:	2364      	movs	r3, #100	; 0x64
    376a:	33ff      	adds	r3, #255	; 0xff
    376c:	001a      	movs	r2, r3
    376e:	4940      	ldr	r1, [pc, #256]	; (3870 <spi_data_read+0x1dc>)
    3770:	4b40      	ldr	r3, [pc, #256]	; (3874 <spi_data_read+0x1e0>)
    3772:	0018      	movs	r0, r3
    3774:	4b40      	ldr	r3, [pc, #256]	; (3878 <spi_data_read+0x1e4>)
    3776:	4798      	blx	r3
    3778:	230b      	movs	r3, #11
    377a:	18fb      	adds	r3, r7, r3
    377c:	781b      	ldrb	r3, [r3, #0]
    377e:	001a      	movs	r2, r3
    3780:	4b41      	ldr	r3, [pc, #260]	; (3888 <spi_data_read+0x1f4>)
    3782:	0011      	movs	r1, r2
    3784:	0018      	movs	r0, r3
    3786:	4b3c      	ldr	r3, [pc, #240]	; (3878 <spi_data_read+0x1e4>)
    3788:	4798      	blx	r3
    378a:	200d      	movs	r0, #13
    378c:	4b3d      	ldr	r3, [pc, #244]	; (3884 <spi_data_read+0x1f0>)
    378e:	4798      	blx	r3
			result = N_FAIL;
    3790:	2311      	movs	r3, #17
    3792:	18fb      	adds	r3, r7, r3
    3794:	2200      	movs	r2, #0
    3796:	701a      	strb	r2, [r3, #0]
			break;
    3798:	e05f      	b.n	385a <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    379a:	2314      	movs	r3, #20
    379c:	18fb      	adds	r3, r7, r3
    379e:	2200      	movs	r2, #0
    37a0:	5e9b      	ldrsh	r3, [r3, r2]
    37a2:	687a      	ldr	r2, [r7, #4]
    37a4:	18d2      	adds	r2, r2, r3
    37a6:	2312      	movs	r3, #18
    37a8:	18fb      	adds	r3, r7, r3
    37aa:	881b      	ldrh	r3, [r3, #0]
    37ac:	0019      	movs	r1, r3
    37ae:	0010      	movs	r0, r2
    37b0:	4b2e      	ldr	r3, [pc, #184]	; (386c <spi_data_read+0x1d8>)
    37b2:	4798      	blx	r3
    37b4:	1e03      	subs	r3, r0, #0
    37b6:	d012      	beq.n	37de <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    37b8:	23b6      	movs	r3, #182	; 0xb6
    37ba:	005a      	lsls	r2, r3, #1
    37bc:	492c      	ldr	r1, [pc, #176]	; (3870 <spi_data_read+0x1dc>)
    37be:	4b2d      	ldr	r3, [pc, #180]	; (3874 <spi_data_read+0x1e0>)
    37c0:	0018      	movs	r0, r3
    37c2:	4b2d      	ldr	r3, [pc, #180]	; (3878 <spi_data_read+0x1e4>)
    37c4:	4798      	blx	r3
    37c6:	4b31      	ldr	r3, [pc, #196]	; (388c <spi_data_read+0x1f8>)
    37c8:	0018      	movs	r0, r3
    37ca:	4b2d      	ldr	r3, [pc, #180]	; (3880 <spi_data_read+0x1ec>)
    37cc:	4798      	blx	r3
    37ce:	200d      	movs	r0, #13
    37d0:	4b2c      	ldr	r3, [pc, #176]	; (3884 <spi_data_read+0x1f0>)
    37d2:	4798      	blx	r3
			result = N_FAIL;
    37d4:	2311      	movs	r3, #17
    37d6:	18fb      	adds	r3, r7, r3
    37d8:	2200      	movs	r2, #0
    37da:	701a      	strb	r2, [r3, #0]
			break;
    37dc:	e03d      	b.n	385a <spi_data_read+0x1c6>
		}
		if(!clockless)
    37de:	1c7b      	adds	r3, r7, #1
    37e0:	781b      	ldrb	r3, [r3, #0]
    37e2:	2b00      	cmp	r3, #0
    37e4:	d11f      	bne.n	3826 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    37e6:	4b2a      	ldr	r3, [pc, #168]	; (3890 <spi_data_read+0x1fc>)
    37e8:	781b      	ldrb	r3, [r3, #0]
    37ea:	2b00      	cmp	r3, #0
    37ec:	d11b      	bne.n	3826 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    37ee:	230c      	movs	r3, #12
    37f0:	18fb      	adds	r3, r7, r3
    37f2:	2102      	movs	r1, #2
    37f4:	0018      	movs	r0, r3
    37f6:	4b1d      	ldr	r3, [pc, #116]	; (386c <spi_data_read+0x1d8>)
    37f8:	4798      	blx	r3
    37fa:	1e03      	subs	r3, r0, #0
    37fc:	d013      	beq.n	3826 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    37fe:	2378      	movs	r3, #120	; 0x78
    3800:	33ff      	adds	r3, #255	; 0xff
    3802:	001a      	movs	r2, r3
    3804:	491a      	ldr	r1, [pc, #104]	; (3870 <spi_data_read+0x1dc>)
    3806:	4b1b      	ldr	r3, [pc, #108]	; (3874 <spi_data_read+0x1e0>)
    3808:	0018      	movs	r0, r3
    380a:	4b1b      	ldr	r3, [pc, #108]	; (3878 <spi_data_read+0x1e4>)
    380c:	4798      	blx	r3
    380e:	4b21      	ldr	r3, [pc, #132]	; (3894 <spi_data_read+0x200>)
    3810:	0018      	movs	r0, r3
    3812:	4b1b      	ldr	r3, [pc, #108]	; (3880 <spi_data_read+0x1ec>)
    3814:	4798      	blx	r3
    3816:	200d      	movs	r0, #13
    3818:	4b1a      	ldr	r3, [pc, #104]	; (3884 <spi_data_read+0x1f0>)
    381a:	4798      	blx	r3
					result = N_FAIL;
    381c:	2311      	movs	r3, #17
    381e:	18fb      	adds	r3, r7, r3
    3820:	2200      	movs	r2, #0
    3822:	701a      	strb	r2, [r3, #0]
					break;
    3824:	e019      	b.n	385a <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    3826:	2314      	movs	r3, #20
    3828:	18fb      	adds	r3, r7, r3
    382a:	881a      	ldrh	r2, [r3, #0]
    382c:	2312      	movs	r3, #18
    382e:	18fb      	adds	r3, r7, r3
    3830:	881b      	ldrh	r3, [r3, #0]
    3832:	18d3      	adds	r3, r2, r3
    3834:	b29a      	uxth	r2, r3
    3836:	2314      	movs	r3, #20
    3838:	18fb      	adds	r3, r7, r3
    383a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    383c:	2312      	movs	r3, #18
    383e:	18fb      	adds	r3, r7, r3
    3840:	881a      	ldrh	r2, [r3, #0]
    3842:	1cbb      	adds	r3, r7, #2
    3844:	1cb9      	adds	r1, r7, #2
    3846:	8809      	ldrh	r1, [r1, #0]
    3848:	1a8a      	subs	r2, r1, r2
    384a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    384c:	1cbb      	adds	r3, r7, #2
    384e:	881b      	ldrh	r3, [r3, #0]
    3850:	2b00      	cmp	r3, #0
    3852:	d000      	beq.n	3856 <spi_data_read+0x1c2>
    3854:	e732      	b.n	36bc <spi_data_read+0x28>
    3856:	e000      	b.n	385a <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    3858:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    385a:	2311      	movs	r3, #17
    385c:	18fb      	adds	r3, r7, r3
    385e:	781b      	ldrb	r3, [r3, #0]
    3860:	b25b      	sxtb	r3, r3
}
    3862:	0018      	movs	r0, r3
    3864:	46bd      	mov	sp, r7
    3866:	b006      	add	sp, #24
    3868:	bd80      	pop	{r7, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	0000310d 	.word	0x0000310d
    3870:	00012d94 	.word	0x00012d94
    3874:	0001288c 	.word	0x0001288c
    3878:	00010d75 	.word	0x00010d75
    387c:	00012900 	.word	0x00012900
    3880:	00010e95 	.word	0x00010e95
    3884:	00010da9 	.word	0x00010da9
    3888:	00012934 	.word	0x00012934
    388c:	00012964 	.word	0x00012964
    3890:	200000dc 	.word	0x200000dc
    3894:	00012994 	.word	0x00012994

00003898 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    3898:	b580      	push	{r7, lr}
    389a:	b086      	sub	sp, #24
    389c:	af00      	add	r7, sp, #0
    389e:	6078      	str	r0, [r7, #4]
    38a0:	000a      	movs	r2, r1
    38a2:	1cbb      	adds	r3, r7, #2
    38a4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    38a6:	2313      	movs	r3, #19
    38a8:	18fb      	adds	r3, r7, r3
    38aa:	2201      	movs	r2, #1
    38ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    38ae:	230c      	movs	r3, #12
    38b0:	18fb      	adds	r3, r7, r3
    38b2:	2200      	movs	r2, #0
    38b4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    38b6:	2316      	movs	r3, #22
    38b8:	18fb      	adds	r3, r7, r3
    38ba:	2200      	movs	r2, #0
    38bc:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    38be:	1cbb      	adds	r3, r7, #2
    38c0:	881a      	ldrh	r2, [r3, #0]
    38c2:	2380      	movs	r3, #128	; 0x80
    38c4:	019b      	lsls	r3, r3, #6
    38c6:	429a      	cmp	r2, r3
    38c8:	d805      	bhi.n	38d6 <spi_data_write+0x3e>
			nbytes = sz;
    38ca:	2314      	movs	r3, #20
    38cc:	18fb      	adds	r3, r7, r3
    38ce:	1cba      	adds	r2, r7, #2
    38d0:	8812      	ldrh	r2, [r2, #0]
    38d2:	801a      	strh	r2, [r3, #0]
    38d4:	e004      	b.n	38e0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    38d6:	2314      	movs	r3, #20
    38d8:	18fb      	adds	r3, r7, r3
    38da:	2280      	movs	r2, #128	; 0x80
    38dc:	0192      	lsls	r2, r2, #6
    38de:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    38e0:	2311      	movs	r3, #17
    38e2:	18fb      	adds	r3, r7, r3
    38e4:	22f0      	movs	r2, #240	; 0xf0
    38e6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    38e8:	2316      	movs	r3, #22
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	2200      	movs	r2, #0
    38ee:	5e9b      	ldrsh	r3, [r3, r2]
    38f0:	2b00      	cmp	r3, #0
    38f2:	d10f      	bne.n	3914 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    38f4:	1cbb      	adds	r3, r7, #2
    38f6:	881a      	ldrh	r2, [r3, #0]
    38f8:	2380      	movs	r3, #128	; 0x80
    38fa:	019b      	lsls	r3, r3, #6
    38fc:	429a      	cmp	r2, r3
    38fe:	d804      	bhi.n	390a <spi_data_write+0x72>
				order = 0x3;
    3900:	2312      	movs	r3, #18
    3902:	18fb      	adds	r3, r7, r3
    3904:	2203      	movs	r2, #3
    3906:	701a      	strb	r2, [r3, #0]
    3908:	e013      	b.n	3932 <spi_data_write+0x9a>
			else
				order = 0x1;
    390a:	2312      	movs	r3, #18
    390c:	18fb      	adds	r3, r7, r3
    390e:	2201      	movs	r2, #1
    3910:	701a      	strb	r2, [r3, #0]
    3912:	e00e      	b.n	3932 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    3914:	1cbb      	adds	r3, r7, #2
    3916:	881a      	ldrh	r2, [r3, #0]
    3918:	2380      	movs	r3, #128	; 0x80
    391a:	019b      	lsls	r3, r3, #6
    391c:	429a      	cmp	r2, r3
    391e:	d804      	bhi.n	392a <spi_data_write+0x92>
				order = 0x3;
    3920:	2312      	movs	r3, #18
    3922:	18fb      	adds	r3, r7, r3
    3924:	2203      	movs	r2, #3
    3926:	701a      	strb	r2, [r3, #0]
    3928:	e003      	b.n	3932 <spi_data_write+0x9a>
			else
				order = 0x2;
    392a:	2312      	movs	r3, #18
    392c:	18fb      	adds	r3, r7, r3
    392e:	2202      	movs	r2, #2
    3930:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    3932:	2311      	movs	r3, #17
    3934:	18fb      	adds	r3, r7, r3
    3936:	781a      	ldrb	r2, [r3, #0]
    3938:	2312      	movs	r3, #18
    393a:	18fb      	adds	r3, r7, r3
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	4313      	orrs	r3, r2
    3940:	b2da      	uxtb	r2, r3
    3942:	2311      	movs	r3, #17
    3944:	18fb      	adds	r3, r7, r3
    3946:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3948:	2311      	movs	r3, #17
    394a:	18fb      	adds	r3, r7, r3
    394c:	2101      	movs	r1, #1
    394e:	0018      	movs	r0, r3
    3950:	4b3c      	ldr	r3, [pc, #240]	; (3a44 <spi_data_write+0x1ac>)
    3952:	4798      	blx	r3
    3954:	1e03      	subs	r3, r0, #0
    3956:	d012      	beq.n	397e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    3958:	23d4      	movs	r3, #212	; 0xd4
    395a:	005a      	lsls	r2, r3, #1
    395c:	493a      	ldr	r1, [pc, #232]	; (3a48 <spi_data_write+0x1b0>)
    395e:	4b3b      	ldr	r3, [pc, #236]	; (3a4c <spi_data_write+0x1b4>)
    3960:	0018      	movs	r0, r3
    3962:	4b3b      	ldr	r3, [pc, #236]	; (3a50 <spi_data_write+0x1b8>)
    3964:	4798      	blx	r3
    3966:	4b3b      	ldr	r3, [pc, #236]	; (3a54 <spi_data_write+0x1bc>)
    3968:	0018      	movs	r0, r3
    396a:	4b3b      	ldr	r3, [pc, #236]	; (3a58 <spi_data_write+0x1c0>)
    396c:	4798      	blx	r3
    396e:	200d      	movs	r0, #13
    3970:	4b3a      	ldr	r3, [pc, #232]	; (3a5c <spi_data_write+0x1c4>)
    3972:	4798      	blx	r3
			result = N_FAIL;
    3974:	2313      	movs	r3, #19
    3976:	18fb      	adds	r3, r7, r3
    3978:	2200      	movs	r2, #0
    397a:	701a      	strb	r2, [r3, #0]
			break;
    397c:	e05a      	b.n	3a34 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    397e:	2316      	movs	r3, #22
    3980:	18fb      	adds	r3, r7, r3
    3982:	2200      	movs	r2, #0
    3984:	5e9b      	ldrsh	r3, [r3, r2]
    3986:	687a      	ldr	r2, [r7, #4]
    3988:	18d2      	adds	r2, r2, r3
    398a:	2314      	movs	r3, #20
    398c:	18fb      	adds	r3, r7, r3
    398e:	881b      	ldrh	r3, [r3, #0]
    3990:	0019      	movs	r1, r3
    3992:	0010      	movs	r0, r2
    3994:	4b2b      	ldr	r3, [pc, #172]	; (3a44 <spi_data_write+0x1ac>)
    3996:	4798      	blx	r3
    3998:	1e03      	subs	r3, r0, #0
    399a:	d013      	beq.n	39c4 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    399c:	23b2      	movs	r3, #178	; 0xb2
    399e:	33ff      	adds	r3, #255	; 0xff
    39a0:	001a      	movs	r2, r3
    39a2:	4929      	ldr	r1, [pc, #164]	; (3a48 <spi_data_write+0x1b0>)
    39a4:	4b29      	ldr	r3, [pc, #164]	; (3a4c <spi_data_write+0x1b4>)
    39a6:	0018      	movs	r0, r3
    39a8:	4b29      	ldr	r3, [pc, #164]	; (3a50 <spi_data_write+0x1b8>)
    39aa:	4798      	blx	r3
    39ac:	4b2c      	ldr	r3, [pc, #176]	; (3a60 <spi_data_write+0x1c8>)
    39ae:	0018      	movs	r0, r3
    39b0:	4b29      	ldr	r3, [pc, #164]	; (3a58 <spi_data_write+0x1c0>)
    39b2:	4798      	blx	r3
    39b4:	200d      	movs	r0, #13
    39b6:	4b29      	ldr	r3, [pc, #164]	; (3a5c <spi_data_write+0x1c4>)
    39b8:	4798      	blx	r3
			result = N_FAIL;
    39ba:	2313      	movs	r3, #19
    39bc:	18fb      	adds	r3, r7, r3
    39be:	2200      	movs	r2, #0
    39c0:	701a      	strb	r2, [r3, #0]
			break;
    39c2:	e037      	b.n	3a34 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    39c4:	4b27      	ldr	r3, [pc, #156]	; (3a64 <spi_data_write+0x1cc>)
    39c6:	781b      	ldrb	r3, [r3, #0]
    39c8:	2b00      	cmp	r3, #0
    39ca:	d11b      	bne.n	3a04 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    39cc:	230c      	movs	r3, #12
    39ce:	18fb      	adds	r3, r7, r3
    39d0:	2102      	movs	r1, #2
    39d2:	0018      	movs	r0, r3
    39d4:	4b1b      	ldr	r3, [pc, #108]	; (3a44 <spi_data_write+0x1ac>)
    39d6:	4798      	blx	r3
    39d8:	1e03      	subs	r3, r0, #0
    39da:	d013      	beq.n	3a04 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    39dc:	23bc      	movs	r3, #188	; 0xbc
    39de:	33ff      	adds	r3, #255	; 0xff
    39e0:	001a      	movs	r2, r3
    39e2:	4919      	ldr	r1, [pc, #100]	; (3a48 <spi_data_write+0x1b0>)
    39e4:	4b19      	ldr	r3, [pc, #100]	; (3a4c <spi_data_write+0x1b4>)
    39e6:	0018      	movs	r0, r3
    39e8:	4b19      	ldr	r3, [pc, #100]	; (3a50 <spi_data_write+0x1b8>)
    39ea:	4798      	blx	r3
    39ec:	4b1e      	ldr	r3, [pc, #120]	; (3a68 <spi_data_write+0x1d0>)
    39ee:	0018      	movs	r0, r3
    39f0:	4b19      	ldr	r3, [pc, #100]	; (3a58 <spi_data_write+0x1c0>)
    39f2:	4798      	blx	r3
    39f4:	200d      	movs	r0, #13
    39f6:	4b19      	ldr	r3, [pc, #100]	; (3a5c <spi_data_write+0x1c4>)
    39f8:	4798      	blx	r3
				result = N_FAIL;
    39fa:	2313      	movs	r3, #19
    39fc:	18fb      	adds	r3, r7, r3
    39fe:	2200      	movs	r2, #0
    3a00:	701a      	strb	r2, [r3, #0]
				break;
    3a02:	e017      	b.n	3a34 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    3a04:	2316      	movs	r3, #22
    3a06:	18fb      	adds	r3, r7, r3
    3a08:	881a      	ldrh	r2, [r3, #0]
    3a0a:	2314      	movs	r3, #20
    3a0c:	18fb      	adds	r3, r7, r3
    3a0e:	881b      	ldrh	r3, [r3, #0]
    3a10:	18d3      	adds	r3, r2, r3
    3a12:	b29a      	uxth	r2, r3
    3a14:	2316      	movs	r3, #22
    3a16:	18fb      	adds	r3, r7, r3
    3a18:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    3a1a:	1cbb      	adds	r3, r7, #2
    3a1c:	1cb9      	adds	r1, r7, #2
    3a1e:	2214      	movs	r2, #20
    3a20:	18ba      	adds	r2, r7, r2
    3a22:	8809      	ldrh	r1, [r1, #0]
    3a24:	8812      	ldrh	r2, [r2, #0]
    3a26:	1a8a      	subs	r2, r1, r2
    3a28:	801a      	strh	r2, [r3, #0]
	} while (sz);
    3a2a:	1cbb      	adds	r3, r7, #2
    3a2c:	881b      	ldrh	r3, [r3, #0]
    3a2e:	2b00      	cmp	r3, #0
    3a30:	d000      	beq.n	3a34 <spi_data_write+0x19c>
    3a32:	e744      	b.n	38be <spi_data_write+0x26>


	return result;
    3a34:	2313      	movs	r3, #19
    3a36:	18fb      	adds	r3, r7, r3
    3a38:	781b      	ldrb	r3, [r3, #0]
    3a3a:	b25b      	sxtb	r3, r3
}
    3a3c:	0018      	movs	r0, r3
    3a3e:	46bd      	mov	sp, r7
    3a40:	b006      	add	sp, #24
    3a42:	bd80      	pop	{r7, pc}
    3a44:	00003151 	.word	0x00003151
    3a48:	00012da4 	.word	0x00012da4
    3a4c:	0001288c 	.word	0x0001288c
    3a50:	00010d75 	.word	0x00010d75
    3a54:	000129c8 	.word	0x000129c8
    3a58:	00010e95 	.word	0x00010e95
    3a5c:	00010da9 	.word	0x00010da9
    3a60:	00012a00 	.word	0x00012a00
    3a64:	200000dc 	.word	0x200000dc
    3a68:	00012a34 	.word	0x00012a34

00003a6c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3a6c:	b5b0      	push	{r4, r5, r7, lr}
    3a6e:	b086      	sub	sp, #24
    3a70:	af02      	add	r7, sp, #8
    3a72:	6078      	str	r0, [r7, #4]
    3a74:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    3a76:	230d      	movs	r3, #13
    3a78:	18fb      	adds	r3, r7, r3
    3a7a:	2201      	movs	r2, #1
    3a7c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    3a7e:	230f      	movs	r3, #15
    3a80:	18fb      	adds	r3, r7, r3
    3a82:	22c9      	movs	r2, #201	; 0xc9
    3a84:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    3a86:	230e      	movs	r3, #14
    3a88:	18fb      	adds	r3, r7, r3
    3a8a:	2200      	movs	r2, #0
    3a8c:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    3a8e:	687b      	ldr	r3, [r7, #4]
    3a90:	2b30      	cmp	r3, #48	; 0x30
    3a92:	d808      	bhi.n	3aa6 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    3a94:	230f      	movs	r3, #15
    3a96:	18fb      	adds	r3, r7, r3
    3a98:	22c3      	movs	r2, #195	; 0xc3
    3a9a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3a9c:	230e      	movs	r3, #14
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	2201      	movs	r2, #1
    3aa2:	701a      	strb	r2, [r3, #0]
    3aa4:	e007      	b.n	3ab6 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    3aa6:	230f      	movs	r3, #15
    3aa8:	18fb      	adds	r3, r7, r3
    3aaa:	22c9      	movs	r2, #201	; 0xc9
    3aac:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3aae:	230e      	movs	r3, #14
    3ab0:	18fb      	adds	r3, r7, r3
    3ab2:	2200      	movs	r2, #0
    3ab4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3ab6:	230d      	movs	r3, #13
    3ab8:	18fc      	adds	r4, r7, r3
    3aba:	683a      	ldr	r2, [r7, #0]
    3abc:	6879      	ldr	r1, [r7, #4]
    3abe:	230f      	movs	r3, #15
    3ac0:	18fb      	adds	r3, r7, r3
    3ac2:	7818      	ldrb	r0, [r3, #0]
    3ac4:	230e      	movs	r3, #14
    3ac6:	18fb      	adds	r3, r7, r3
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	9300      	str	r3, [sp, #0]
    3acc:	2304      	movs	r3, #4
    3ace:	4d26      	ldr	r5, [pc, #152]	; (3b68 <spi_write_reg+0xfc>)
    3ad0:	47a8      	blx	r5
    3ad2:	0003      	movs	r3, r0
    3ad4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3ad6:	230d      	movs	r3, #13
    3ad8:	18fb      	adds	r3, r7, r3
    3ada:	781b      	ldrb	r3, [r3, #0]
    3adc:	b25b      	sxtb	r3, r3
    3ade:	2b01      	cmp	r3, #1
    3ae0:	d012      	beq.n	3b08 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3ae2:	23ec      	movs	r3, #236	; 0xec
    3ae4:	33ff      	adds	r3, #255	; 0xff
    3ae6:	001a      	movs	r2, r3
    3ae8:	4920      	ldr	r1, [pc, #128]	; (3b6c <spi_write_reg+0x100>)
    3aea:	4b21      	ldr	r3, [pc, #132]	; (3b70 <spi_write_reg+0x104>)
    3aec:	0018      	movs	r0, r3
    3aee:	4b21      	ldr	r3, [pc, #132]	; (3b74 <spi_write_reg+0x108>)
    3af0:	4798      	blx	r3
    3af2:	687a      	ldr	r2, [r7, #4]
    3af4:	4b20      	ldr	r3, [pc, #128]	; (3b78 <spi_write_reg+0x10c>)
    3af6:	0011      	movs	r1, r2
    3af8:	0018      	movs	r0, r3
    3afa:	4b1e      	ldr	r3, [pc, #120]	; (3b74 <spi_write_reg+0x108>)
    3afc:	4798      	blx	r3
    3afe:	200d      	movs	r0, #13
    3b00:	4b1e      	ldr	r3, [pc, #120]	; (3b7c <spi_write_reg+0x110>)
    3b02:	4798      	blx	r3
		return N_FAIL;
    3b04:	2300      	movs	r3, #0
    3b06:	e02b      	b.n	3b60 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    3b08:	230d      	movs	r3, #13
    3b0a:	18fc      	adds	r4, r7, r3
    3b0c:	230f      	movs	r3, #15
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	781b      	ldrb	r3, [r3, #0]
    3b12:	0018      	movs	r0, r3
    3b14:	4b1a      	ldr	r3, [pc, #104]	; (3b80 <spi_write_reg+0x114>)
    3b16:	4798      	blx	r3
    3b18:	0003      	movs	r3, r0
    3b1a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3b1c:	230d      	movs	r3, #13
    3b1e:	18fb      	adds	r3, r7, r3
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	b25b      	sxtb	r3, r3
    3b24:	2b01      	cmp	r3, #1
    3b26:	d01a      	beq.n	3b5e <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3b28:	23f2      	movs	r3, #242	; 0xf2
    3b2a:	33ff      	adds	r3, #255	; 0xff
    3b2c:	001a      	movs	r2, r3
    3b2e:	490f      	ldr	r1, [pc, #60]	; (3b6c <spi_write_reg+0x100>)
    3b30:	4b0f      	ldr	r3, [pc, #60]	; (3b70 <spi_write_reg+0x104>)
    3b32:	0018      	movs	r0, r3
    3b34:	4b0f      	ldr	r3, [pc, #60]	; (3b74 <spi_write_reg+0x108>)
    3b36:	4798      	blx	r3
    3b38:	687a      	ldr	r2, [r7, #4]
    3b3a:	4b12      	ldr	r3, [pc, #72]	; (3b84 <spi_write_reg+0x118>)
    3b3c:	0011      	movs	r1, r2
    3b3e:	0018      	movs	r0, r3
    3b40:	4b0c      	ldr	r3, [pc, #48]	; (3b74 <spi_write_reg+0x108>)
    3b42:	4798      	blx	r3
    3b44:	200d      	movs	r0, #13
    3b46:	4b0d      	ldr	r3, [pc, #52]	; (3b7c <spi_write_reg+0x110>)
    3b48:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3b4a:	2300      	movs	r3, #0
    3b4c:	9300      	str	r3, [sp, #0]
    3b4e:	2300      	movs	r3, #0
    3b50:	2200      	movs	r2, #0
    3b52:	2100      	movs	r1, #0
    3b54:	20cf      	movs	r0, #207	; 0xcf
    3b56:	4c04      	ldr	r4, [pc, #16]	; (3b68 <spi_write_reg+0xfc>)
    3b58:	47a0      	blx	r4
		return N_FAIL;
    3b5a:	2300      	movs	r3, #0
    3b5c:	e000      	b.n	3b60 <spi_write_reg+0xf4>
	}

	return N_OK;
    3b5e:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    3b60:	0018      	movs	r0, r3
    3b62:	46bd      	mov	sp, r7
    3b64:	b004      	add	sp, #16
    3b66:	bdb0      	pop	{r4, r5, r7, pc}
    3b68:	00003215 	.word	0x00003215
    3b6c:	00012db4 	.word	0x00012db4
    3b70:	0001288c 	.word	0x0001288c
    3b74:	00010d75 	.word	0x00010d75
    3b78:	00012a6c 	.word	0x00012a6c
    3b7c:	00010da9 	.word	0x00010da9
    3b80:	00003559 	.word	0x00003559
    3b84:	00012a98 	.word	0x00012a98

00003b88 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    3b88:	b5b0      	push	{r4, r5, r7, lr}
    3b8a:	b088      	sub	sp, #32
    3b8c:	af02      	add	r7, sp, #8
    3b8e:	60f8      	str	r0, [r7, #12]
    3b90:	60b9      	str	r1, [r7, #8]
    3b92:	1dbb      	adds	r3, r7, #6
    3b94:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    3b96:	2317      	movs	r3, #23
    3b98:	18fb      	adds	r3, r7, r3
    3b9a:	22c7      	movs	r2, #199	; 0xc7
    3b9c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    3b9e:	1dbb      	adds	r3, r7, #6
    3ba0:	881a      	ldrh	r2, [r3, #0]
    3ba2:	2316      	movs	r3, #22
    3ba4:	18fc      	adds	r4, r7, r3
    3ba6:	68f9      	ldr	r1, [r7, #12]
    3ba8:	2317      	movs	r3, #23
    3baa:	18fb      	adds	r3, r7, r3
    3bac:	7818      	ldrb	r0, [r3, #0]
    3bae:	2300      	movs	r3, #0
    3bb0:	9300      	str	r3, [sp, #0]
    3bb2:	0013      	movs	r3, r2
    3bb4:	2200      	movs	r2, #0
    3bb6:	4d37      	ldr	r5, [pc, #220]	; (3c94 <nm_spi_write+0x10c>)
    3bb8:	47a8      	blx	r5
    3bba:	0003      	movs	r3, r0
    3bbc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3bbe:	2316      	movs	r3, #22
    3bc0:	18fb      	adds	r3, r7, r3
    3bc2:	781b      	ldrb	r3, [r3, #0]
    3bc4:	b25b      	sxtb	r3, r3
    3bc6:	2b01      	cmp	r3, #1
    3bc8:	d010      	beq.n	3bec <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3bca:	4a33      	ldr	r2, [pc, #204]	; (3c98 <nm_spi_write+0x110>)
    3bcc:	4933      	ldr	r1, [pc, #204]	; (3c9c <nm_spi_write+0x114>)
    3bce:	4b34      	ldr	r3, [pc, #208]	; (3ca0 <nm_spi_write+0x118>)
    3bd0:	0018      	movs	r0, r3
    3bd2:	4b34      	ldr	r3, [pc, #208]	; (3ca4 <nm_spi_write+0x11c>)
    3bd4:	4798      	blx	r3
    3bd6:	68fa      	ldr	r2, [r7, #12]
    3bd8:	4b33      	ldr	r3, [pc, #204]	; (3ca8 <nm_spi_write+0x120>)
    3bda:	0011      	movs	r1, r2
    3bdc:	0018      	movs	r0, r3
    3bde:	4b31      	ldr	r3, [pc, #196]	; (3ca4 <nm_spi_write+0x11c>)
    3be0:	4798      	blx	r3
    3be2:	200d      	movs	r0, #13
    3be4:	4b31      	ldr	r3, [pc, #196]	; (3cac <nm_spi_write+0x124>)
    3be6:	4798      	blx	r3
		return N_FAIL;
    3be8:	2300      	movs	r3, #0
    3bea:	e04f      	b.n	3c8c <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    3bec:	2316      	movs	r3, #22
    3bee:	18fc      	adds	r4, r7, r3
    3bf0:	2317      	movs	r3, #23
    3bf2:	18fb      	adds	r3, r7, r3
    3bf4:	781b      	ldrb	r3, [r3, #0]
    3bf6:	0018      	movs	r0, r3
    3bf8:	4b2d      	ldr	r3, [pc, #180]	; (3cb0 <nm_spi_write+0x128>)
    3bfa:	4798      	blx	r3
    3bfc:	0003      	movs	r3, r0
    3bfe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3c00:	2316      	movs	r3, #22
    3c02:	18fb      	adds	r3, r7, r3
    3c04:	781b      	ldrb	r3, [r3, #0]
    3c06:	b25b      	sxtb	r3, r3
    3c08:	2b01      	cmp	r3, #1
    3c0a:	d018      	beq.n	3c3e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3c0c:	4a29      	ldr	r2, [pc, #164]	; (3cb4 <nm_spi_write+0x12c>)
    3c0e:	4923      	ldr	r1, [pc, #140]	; (3c9c <nm_spi_write+0x114>)
    3c10:	4b23      	ldr	r3, [pc, #140]	; (3ca0 <nm_spi_write+0x118>)
    3c12:	0018      	movs	r0, r3
    3c14:	4b23      	ldr	r3, [pc, #140]	; (3ca4 <nm_spi_write+0x11c>)
    3c16:	4798      	blx	r3
    3c18:	68fa      	ldr	r2, [r7, #12]
    3c1a:	4b27      	ldr	r3, [pc, #156]	; (3cb8 <nm_spi_write+0x130>)
    3c1c:	0011      	movs	r1, r2
    3c1e:	0018      	movs	r0, r3
    3c20:	4b20      	ldr	r3, [pc, #128]	; (3ca4 <nm_spi_write+0x11c>)
    3c22:	4798      	blx	r3
    3c24:	200d      	movs	r0, #13
    3c26:	4b21      	ldr	r3, [pc, #132]	; (3cac <nm_spi_write+0x124>)
    3c28:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3c2a:	2300      	movs	r3, #0
    3c2c:	9300      	str	r3, [sp, #0]
    3c2e:	2300      	movs	r3, #0
    3c30:	2200      	movs	r2, #0
    3c32:	2100      	movs	r1, #0
    3c34:	20cf      	movs	r0, #207	; 0xcf
    3c36:	4c17      	ldr	r4, [pc, #92]	; (3c94 <nm_spi_write+0x10c>)
    3c38:	47a0      	blx	r4
		return N_FAIL;
    3c3a:	2300      	movs	r3, #0
    3c3c:	e026      	b.n	3c8c <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    3c3e:	2316      	movs	r3, #22
    3c40:	18fc      	adds	r4, r7, r3
    3c42:	1dbb      	adds	r3, r7, #6
    3c44:	881a      	ldrh	r2, [r3, #0]
    3c46:	68bb      	ldr	r3, [r7, #8]
    3c48:	0011      	movs	r1, r2
    3c4a:	0018      	movs	r0, r3
    3c4c:	4b1b      	ldr	r3, [pc, #108]	; (3cbc <nm_spi_write+0x134>)
    3c4e:	4798      	blx	r3
    3c50:	0003      	movs	r3, r0
    3c52:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3c54:	2316      	movs	r3, #22
    3c56:	18fb      	adds	r3, r7, r3
    3c58:	781b      	ldrb	r3, [r3, #0]
    3c5a:	b25b      	sxtb	r3, r3
    3c5c:	2b01      	cmp	r3, #1
    3c5e:	d014      	beq.n	3c8a <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3c60:	4a17      	ldr	r2, [pc, #92]	; (3cc0 <nm_spi_write+0x138>)
    3c62:	490e      	ldr	r1, [pc, #56]	; (3c9c <nm_spi_write+0x114>)
    3c64:	4b0e      	ldr	r3, [pc, #56]	; (3ca0 <nm_spi_write+0x118>)
    3c66:	0018      	movs	r0, r3
    3c68:	4b0e      	ldr	r3, [pc, #56]	; (3ca4 <nm_spi_write+0x11c>)
    3c6a:	4798      	blx	r3
    3c6c:	4b15      	ldr	r3, [pc, #84]	; (3cc4 <nm_spi_write+0x13c>)
    3c6e:	0018      	movs	r0, r3
    3c70:	4b15      	ldr	r3, [pc, #84]	; (3cc8 <nm_spi_write+0x140>)
    3c72:	4798      	blx	r3
    3c74:	200d      	movs	r0, #13
    3c76:	4b0d      	ldr	r3, [pc, #52]	; (3cac <nm_spi_write+0x124>)
    3c78:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3c7a:	2300      	movs	r3, #0
    3c7c:	9300      	str	r3, [sp, #0]
    3c7e:	2300      	movs	r3, #0
    3c80:	2200      	movs	r2, #0
    3c82:	2100      	movs	r1, #0
    3c84:	20cf      	movs	r0, #207	; 0xcf
    3c86:	4c03      	ldr	r4, [pc, #12]	; (3c94 <nm_spi_write+0x10c>)
    3c88:	47a0      	blx	r4
	}

	return N_OK;
    3c8a:	2301      	movs	r3, #1
}
    3c8c:	0018      	movs	r0, r3
    3c8e:	46bd      	mov	sp, r7
    3c90:	b006      	add	sp, #24
    3c92:	bdb0      	pop	{r4, r5, r7, pc}
    3c94:	00003215 	.word	0x00003215
    3c98:	0000020f 	.word	0x0000020f
    3c9c:	00012dc4 	.word	0x00012dc4
    3ca0:	0001288c 	.word	0x0001288c
    3ca4:	00010d75 	.word	0x00010d75
    3ca8:	00012ad0 	.word	0x00012ad0
    3cac:	00010da9 	.word	0x00010da9
    3cb0:	00003559 	.word	0x00003559
    3cb4:	00000215 	.word	0x00000215
    3cb8:	00012b00 	.word	0x00012b00
    3cbc:	00003899 	.word	0x00003899
    3cc0:	00000226 	.word	0x00000226
    3cc4:	00012b38 	.word	0x00012b38
    3cc8:	00010e95 	.word	0x00010e95

00003ccc <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3ccc:	b5b0      	push	{r4, r5, r7, lr}
    3cce:	b086      	sub	sp, #24
    3cd0:	af02      	add	r7, sp, #8
    3cd2:	6078      	str	r0, [r7, #4]
    3cd4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    3cd6:	230d      	movs	r3, #13
    3cd8:	18fb      	adds	r3, r7, r3
    3cda:	2201      	movs	r2, #1
    3cdc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    3cde:	230f      	movs	r3, #15
    3ce0:	18fb      	adds	r3, r7, r3
    3ce2:	22ca      	movs	r2, #202	; 0xca
    3ce4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    3ce6:	230e      	movs	r3, #14
    3ce8:	18fb      	adds	r3, r7, r3
    3cea:	2200      	movs	r2, #0
    3cec:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	2bff      	cmp	r3, #255	; 0xff
    3cf2:	d808      	bhi.n	3d06 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    3cf4:	230f      	movs	r3, #15
    3cf6:	18fb      	adds	r3, r7, r3
    3cf8:	22c4      	movs	r2, #196	; 0xc4
    3cfa:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    3cfc:	230e      	movs	r3, #14
    3cfe:	18fb      	adds	r3, r7, r3
    3d00:	2201      	movs	r2, #1
    3d02:	701a      	strb	r2, [r3, #0]
    3d04:	e007      	b.n	3d16 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    3d06:	230f      	movs	r3, #15
    3d08:	18fb      	adds	r3, r7, r3
    3d0a:	22ca      	movs	r2, #202	; 0xca
    3d0c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    3d0e:	230e      	movs	r3, #14
    3d10:	18fb      	adds	r3, r7, r3
    3d12:	2200      	movs	r2, #0
    3d14:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3d16:	230d      	movs	r3, #13
    3d18:	18fc      	adds	r4, r7, r3
    3d1a:	6879      	ldr	r1, [r7, #4]
    3d1c:	230f      	movs	r3, #15
    3d1e:	18fb      	adds	r3, r7, r3
    3d20:	7818      	ldrb	r0, [r3, #0]
    3d22:	230e      	movs	r3, #14
    3d24:	18fb      	adds	r3, r7, r3
    3d26:	781b      	ldrb	r3, [r3, #0]
    3d28:	9300      	str	r3, [sp, #0]
    3d2a:	2304      	movs	r3, #4
    3d2c:	2200      	movs	r2, #0
    3d2e:	4d44      	ldr	r5, [pc, #272]	; (3e40 <spi_read_reg+0x174>)
    3d30:	47a8      	blx	r5
    3d32:	0003      	movs	r3, r0
    3d34:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3d36:	230d      	movs	r3, #13
    3d38:	18fb      	adds	r3, r7, r3
    3d3a:	781b      	ldrb	r3, [r3, #0]
    3d3c:	b25b      	sxtb	r3, r3
    3d3e:	2b01      	cmp	r3, #1
    3d40:	d010      	beq.n	3d64 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3d42:	4a40      	ldr	r2, [pc, #256]	; (3e44 <spi_read_reg+0x178>)
    3d44:	4940      	ldr	r1, [pc, #256]	; (3e48 <spi_read_reg+0x17c>)
    3d46:	4b41      	ldr	r3, [pc, #260]	; (3e4c <spi_read_reg+0x180>)
    3d48:	0018      	movs	r0, r3
    3d4a:	4b41      	ldr	r3, [pc, #260]	; (3e50 <spi_read_reg+0x184>)
    3d4c:	4798      	blx	r3
    3d4e:	687a      	ldr	r2, [r7, #4]
    3d50:	4b40      	ldr	r3, [pc, #256]	; (3e54 <spi_read_reg+0x188>)
    3d52:	0011      	movs	r1, r2
    3d54:	0018      	movs	r0, r3
    3d56:	4b3e      	ldr	r3, [pc, #248]	; (3e50 <spi_read_reg+0x184>)
    3d58:	4798      	blx	r3
    3d5a:	200d      	movs	r0, #13
    3d5c:	4b3e      	ldr	r3, [pc, #248]	; (3e58 <spi_read_reg+0x18c>)
    3d5e:	4798      	blx	r3
		return N_FAIL;
    3d60:	2300      	movs	r3, #0
    3d62:	e068      	b.n	3e36 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    3d64:	230d      	movs	r3, #13
    3d66:	18fc      	adds	r4, r7, r3
    3d68:	230f      	movs	r3, #15
    3d6a:	18fb      	adds	r3, r7, r3
    3d6c:	781b      	ldrb	r3, [r3, #0]
    3d6e:	0018      	movs	r0, r3
    3d70:	4b3a      	ldr	r3, [pc, #232]	; (3e5c <spi_read_reg+0x190>)
    3d72:	4798      	blx	r3
    3d74:	0003      	movs	r3, r0
    3d76:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3d78:	230d      	movs	r3, #13
    3d7a:	18fb      	adds	r3, r7, r3
    3d7c:	781b      	ldrb	r3, [r3, #0]
    3d7e:	b25b      	sxtb	r3, r3
    3d80:	2b01      	cmp	r3, #1
    3d82:	d018      	beq.n	3db6 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    3d84:	4a36      	ldr	r2, [pc, #216]	; (3e60 <spi_read_reg+0x194>)
    3d86:	4930      	ldr	r1, [pc, #192]	; (3e48 <spi_read_reg+0x17c>)
    3d88:	4b30      	ldr	r3, [pc, #192]	; (3e4c <spi_read_reg+0x180>)
    3d8a:	0018      	movs	r0, r3
    3d8c:	4b30      	ldr	r3, [pc, #192]	; (3e50 <spi_read_reg+0x184>)
    3d8e:	4798      	blx	r3
    3d90:	687a      	ldr	r2, [r7, #4]
    3d92:	4b34      	ldr	r3, [pc, #208]	; (3e64 <spi_read_reg+0x198>)
    3d94:	0011      	movs	r1, r2
    3d96:	0018      	movs	r0, r3
    3d98:	4b2d      	ldr	r3, [pc, #180]	; (3e50 <spi_read_reg+0x184>)
    3d9a:	4798      	blx	r3
    3d9c:	200d      	movs	r0, #13
    3d9e:	4b2e      	ldr	r3, [pc, #184]	; (3e58 <spi_read_reg+0x18c>)
    3da0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3da2:	2300      	movs	r3, #0
    3da4:	9300      	str	r3, [sp, #0]
    3da6:	2300      	movs	r3, #0
    3da8:	2200      	movs	r2, #0
    3daa:	2100      	movs	r1, #0
    3dac:	20cf      	movs	r0, #207	; 0xcf
    3dae:	4c24      	ldr	r4, [pc, #144]	; (3e40 <spi_read_reg+0x174>)
    3db0:	47a0      	blx	r4
		return N_FAIL;
    3db2:	2300      	movs	r3, #0
    3db4:	e03f      	b.n	3e36 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3db6:	230d      	movs	r3, #13
    3db8:	18fc      	adds	r4, r7, r3
    3dba:	230e      	movs	r3, #14
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	781a      	ldrb	r2, [r3, #0]
    3dc0:	2308      	movs	r3, #8
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	2104      	movs	r1, #4
    3dc6:	0018      	movs	r0, r3
    3dc8:	4b27      	ldr	r3, [pc, #156]	; (3e68 <spi_read_reg+0x19c>)
    3dca:	4798      	blx	r3
    3dcc:	0003      	movs	r3, r0
    3dce:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3dd0:	230d      	movs	r3, #13
    3dd2:	18fb      	adds	r3, r7, r3
    3dd4:	781b      	ldrb	r3, [r3, #0]
    3dd6:	b25b      	sxtb	r3, r3
    3dd8:	2b01      	cmp	r3, #1
    3dda:	d016      	beq.n	3e0a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    3ddc:	4a23      	ldr	r2, [pc, #140]	; (3e6c <spi_read_reg+0x1a0>)
    3dde:	491a      	ldr	r1, [pc, #104]	; (3e48 <spi_read_reg+0x17c>)
    3de0:	4b1a      	ldr	r3, [pc, #104]	; (3e4c <spi_read_reg+0x180>)
    3de2:	0018      	movs	r0, r3
    3de4:	4b1a      	ldr	r3, [pc, #104]	; (3e50 <spi_read_reg+0x184>)
    3de6:	4798      	blx	r3
    3de8:	4b21      	ldr	r3, [pc, #132]	; (3e70 <spi_read_reg+0x1a4>)
    3dea:	0018      	movs	r0, r3
    3dec:	4b21      	ldr	r3, [pc, #132]	; (3e74 <spi_read_reg+0x1a8>)
    3dee:	4798      	blx	r3
    3df0:	200d      	movs	r0, #13
    3df2:	4b19      	ldr	r3, [pc, #100]	; (3e58 <spi_read_reg+0x18c>)
    3df4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3df6:	2300      	movs	r3, #0
    3df8:	9300      	str	r3, [sp, #0]
    3dfa:	2300      	movs	r3, #0
    3dfc:	2200      	movs	r2, #0
    3dfe:	2100      	movs	r1, #0
    3e00:	20cf      	movs	r0, #207	; 0xcf
    3e02:	4c0f      	ldr	r4, [pc, #60]	; (3e40 <spi_read_reg+0x174>)
    3e04:	47a0      	blx	r4
		return N_FAIL;
    3e06:	2300      	movs	r3, #0
    3e08:	e015      	b.n	3e36 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    3e0a:	2308      	movs	r3, #8
    3e0c:	18fb      	adds	r3, r7, r3
    3e0e:	781b      	ldrb	r3, [r3, #0]
    3e10:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    3e12:	2308      	movs	r3, #8
    3e14:	18fb      	adds	r3, r7, r3
    3e16:	785b      	ldrb	r3, [r3, #1]
    3e18:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    3e1a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    3e1c:	2308      	movs	r3, #8
    3e1e:	18fb      	adds	r3, r7, r3
    3e20:	789b      	ldrb	r3, [r3, #2]
    3e22:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    3e24:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    3e26:	2308      	movs	r3, #8
    3e28:	18fb      	adds	r3, r7, r3
    3e2a:	78db      	ldrb	r3, [r3, #3]
    3e2c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    3e2e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    3e30:	683b      	ldr	r3, [r7, #0]
    3e32:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    3e34:	2301      	movs	r3, #1
}
    3e36:	0018      	movs	r0, r3
    3e38:	46bd      	mov	sp, r7
    3e3a:	b004      	add	sp, #16
    3e3c:	bdb0      	pop	{r4, r5, r7, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	00003215 	.word	0x00003215
    3e44:	00000245 	.word	0x00000245
    3e48:	00012dd4 	.word	0x00012dd4
    3e4c:	0001288c 	.word	0x0001288c
    3e50:	00010d75 	.word	0x00010d75
    3e54:	00012b60 	.word	0x00012b60
    3e58:	00010da9 	.word	0x00010da9
    3e5c:	00003559 	.word	0x00003559
    3e60:	0000024b 	.word	0x0000024b
    3e64:	00012b8c 	.word	0x00012b8c
    3e68:	00003695 	.word	0x00003695
    3e6c:	00000253 	.word	0x00000253
    3e70:	00012bc0 	.word	0x00012bc0
    3e74:	00010e95 	.word	0x00010e95

00003e78 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    3e78:	b5b0      	push	{r4, r5, r7, lr}
    3e7a:	b088      	sub	sp, #32
    3e7c:	af02      	add	r7, sp, #8
    3e7e:	60f8      	str	r0, [r7, #12]
    3e80:	60b9      	str	r1, [r7, #8]
    3e82:	1dbb      	adds	r3, r7, #6
    3e84:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    3e86:	2317      	movs	r3, #23
    3e88:	18fb      	adds	r3, r7, r3
    3e8a:	22c8      	movs	r2, #200	; 0xc8
    3e8c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    3e8e:	1dbb      	adds	r3, r7, #6
    3e90:	881a      	ldrh	r2, [r3, #0]
    3e92:	2316      	movs	r3, #22
    3e94:	18fc      	adds	r4, r7, r3
    3e96:	68f9      	ldr	r1, [r7, #12]
    3e98:	2317      	movs	r3, #23
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	7818      	ldrb	r0, [r3, #0]
    3e9e:	2300      	movs	r3, #0
    3ea0:	9300      	str	r3, [sp, #0]
    3ea2:	0013      	movs	r3, r2
    3ea4:	2200      	movs	r2, #0
    3ea6:	4d39      	ldr	r5, [pc, #228]	; (3f8c <nm_spi_read+0x114>)
    3ea8:	47a8      	blx	r5
    3eaa:	0003      	movs	r3, r0
    3eac:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3eae:	2316      	movs	r3, #22
    3eb0:	18fb      	adds	r3, r7, r3
    3eb2:	781b      	ldrb	r3, [r3, #0]
    3eb4:	b25b      	sxtb	r3, r3
    3eb6:	2b01      	cmp	r3, #1
    3eb8:	d011      	beq.n	3ede <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    3eba:	239d      	movs	r3, #157	; 0x9d
    3ebc:	009a      	lsls	r2, r3, #2
    3ebe:	4934      	ldr	r1, [pc, #208]	; (3f90 <nm_spi_read+0x118>)
    3ec0:	4b34      	ldr	r3, [pc, #208]	; (3f94 <nm_spi_read+0x11c>)
    3ec2:	0018      	movs	r0, r3
    3ec4:	4b34      	ldr	r3, [pc, #208]	; (3f98 <nm_spi_read+0x120>)
    3ec6:	4798      	blx	r3
    3ec8:	68fa      	ldr	r2, [r7, #12]
    3eca:	4b34      	ldr	r3, [pc, #208]	; (3f9c <nm_spi_read+0x124>)
    3ecc:	0011      	movs	r1, r2
    3ece:	0018      	movs	r0, r3
    3ed0:	4b31      	ldr	r3, [pc, #196]	; (3f98 <nm_spi_read+0x120>)
    3ed2:	4798      	blx	r3
    3ed4:	200d      	movs	r0, #13
    3ed6:	4b32      	ldr	r3, [pc, #200]	; (3fa0 <nm_spi_read+0x128>)
    3ed8:	4798      	blx	r3
		return N_FAIL;
    3eda:	2300      	movs	r3, #0
    3edc:	e052      	b.n	3f84 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    3ede:	2316      	movs	r3, #22
    3ee0:	18fc      	adds	r4, r7, r3
    3ee2:	2317      	movs	r3, #23
    3ee4:	18fb      	adds	r3, r7, r3
    3ee6:	781b      	ldrb	r3, [r3, #0]
    3ee8:	0018      	movs	r0, r3
    3eea:	4b2e      	ldr	r3, [pc, #184]	; (3fa4 <nm_spi_read+0x12c>)
    3eec:	4798      	blx	r3
    3eee:	0003      	movs	r3, r0
    3ef0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3ef2:	2316      	movs	r3, #22
    3ef4:	18fb      	adds	r3, r7, r3
    3ef6:	781b      	ldrb	r3, [r3, #0]
    3ef8:	b25b      	sxtb	r3, r3
    3efa:	2b01      	cmp	r3, #1
    3efc:	d018      	beq.n	3f30 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    3efe:	4a2a      	ldr	r2, [pc, #168]	; (3fa8 <nm_spi_read+0x130>)
    3f00:	4923      	ldr	r1, [pc, #140]	; (3f90 <nm_spi_read+0x118>)
    3f02:	4b24      	ldr	r3, [pc, #144]	; (3f94 <nm_spi_read+0x11c>)
    3f04:	0018      	movs	r0, r3
    3f06:	4b24      	ldr	r3, [pc, #144]	; (3f98 <nm_spi_read+0x120>)
    3f08:	4798      	blx	r3
    3f0a:	68fa      	ldr	r2, [r7, #12]
    3f0c:	4b27      	ldr	r3, [pc, #156]	; (3fac <nm_spi_read+0x134>)
    3f0e:	0011      	movs	r1, r2
    3f10:	0018      	movs	r0, r3
    3f12:	4b21      	ldr	r3, [pc, #132]	; (3f98 <nm_spi_read+0x120>)
    3f14:	4798      	blx	r3
    3f16:	200d      	movs	r0, #13
    3f18:	4b21      	ldr	r3, [pc, #132]	; (3fa0 <nm_spi_read+0x128>)
    3f1a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3f1c:	2300      	movs	r3, #0
    3f1e:	9300      	str	r3, [sp, #0]
    3f20:	2300      	movs	r3, #0
    3f22:	2200      	movs	r2, #0
    3f24:	2100      	movs	r1, #0
    3f26:	20cf      	movs	r0, #207	; 0xcf
    3f28:	4c18      	ldr	r4, [pc, #96]	; (3f8c <nm_spi_read+0x114>)
    3f2a:	47a0      	blx	r4
		return N_FAIL;
    3f2c:	2300      	movs	r3, #0
    3f2e:	e029      	b.n	3f84 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    3f30:	2316      	movs	r3, #22
    3f32:	18fc      	adds	r4, r7, r3
    3f34:	1dbb      	adds	r3, r7, #6
    3f36:	8819      	ldrh	r1, [r3, #0]
    3f38:	68bb      	ldr	r3, [r7, #8]
    3f3a:	2200      	movs	r2, #0
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b1c      	ldr	r3, [pc, #112]	; (3fb0 <nm_spi_read+0x138>)
    3f40:	4798      	blx	r3
    3f42:	0003      	movs	r3, r0
    3f44:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    3f46:	2316      	movs	r3, #22
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	781b      	ldrb	r3, [r3, #0]
    3f4c:	b25b      	sxtb	r3, r3
    3f4e:	2b01      	cmp	r3, #1
    3f50:	d017      	beq.n	3f82 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    3f52:	23a1      	movs	r3, #161	; 0xa1
    3f54:	009a      	lsls	r2, r3, #2
    3f56:	490e      	ldr	r1, [pc, #56]	; (3f90 <nm_spi_read+0x118>)
    3f58:	4b0e      	ldr	r3, [pc, #56]	; (3f94 <nm_spi_read+0x11c>)
    3f5a:	0018      	movs	r0, r3
    3f5c:	4b0e      	ldr	r3, [pc, #56]	; (3f98 <nm_spi_read+0x120>)
    3f5e:	4798      	blx	r3
    3f60:	4b14      	ldr	r3, [pc, #80]	; (3fb4 <nm_spi_read+0x13c>)
    3f62:	0018      	movs	r0, r3
    3f64:	4b14      	ldr	r3, [pc, #80]	; (3fb8 <nm_spi_read+0x140>)
    3f66:	4798      	blx	r3
    3f68:	200d      	movs	r0, #13
    3f6a:	4b0d      	ldr	r3, [pc, #52]	; (3fa0 <nm_spi_read+0x128>)
    3f6c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3f6e:	2300      	movs	r3, #0
    3f70:	9300      	str	r3, [sp, #0]
    3f72:	2300      	movs	r3, #0
    3f74:	2200      	movs	r2, #0
    3f76:	2100      	movs	r1, #0
    3f78:	20cf      	movs	r0, #207	; 0xcf
    3f7a:	4c04      	ldr	r4, [pc, #16]	; (3f8c <nm_spi_read+0x114>)
    3f7c:	47a0      	blx	r4
		return N_FAIL;
    3f7e:	2300      	movs	r3, #0
    3f80:	e000      	b.n	3f84 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    3f82:	2301      	movs	r3, #1
}
    3f84:	0018      	movs	r0, r3
    3f86:	46bd      	mov	sp, r7
    3f88:	b006      	add	sp, #24
    3f8a:	bdb0      	pop	{r4, r5, r7, pc}
    3f8c:	00003215 	.word	0x00003215
    3f90:	00012de4 	.word	0x00012de4
    3f94:	0001288c 	.word	0x0001288c
    3f98:	00010d75 	.word	0x00010d75
    3f9c:	00012be0 	.word	0x00012be0
    3fa0:	00010da9 	.word	0x00010da9
    3fa4:	00003559 	.word	0x00003559
    3fa8:	0000027a 	.word	0x0000027a
    3fac:	00012c10 	.word	0x00012c10
    3fb0:	00003695 	.word	0x00003695
    3fb4:	00012c48 	.word	0x00012c48
    3fb8:	00010e95 	.word	0x00010e95

00003fbc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    3fbc:	b580      	push	{r7, lr}
    3fbe:	b082      	sub	sp, #8
    3fc0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    3fc2:	4b0c      	ldr	r3, [pc, #48]	; (3ff4 <spi_init_pkt_sz+0x38>)
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b0c      	ldr	r3, [pc, #48]	; (3ff8 <spi_init_pkt_sz+0x3c>)
    3fc8:	4798      	blx	r3
    3fca:	0003      	movs	r3, r0
    3fcc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	2270      	movs	r2, #112	; 0x70
    3fd2:	4393      	bics	r3, r2
    3fd4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    3fd6:	687b      	ldr	r3, [r7, #4]
    3fd8:	2250      	movs	r2, #80	; 0x50
    3fda:	4313      	orrs	r3, r2
    3fdc:	607b      	str	r3, [r7, #4]
    3fde:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3fe0:	687b      	ldr	r3, [r7, #4]
    3fe2:	4a04      	ldr	r2, [pc, #16]	; (3ff4 <spi_init_pkt_sz+0x38>)
    3fe4:	0019      	movs	r1, r3
    3fe6:	0010      	movs	r0, r2
    3fe8:	4b04      	ldr	r3, [pc, #16]	; (3ffc <spi_init_pkt_sz+0x40>)
    3fea:	4798      	blx	r3
}
    3fec:	46c0      	nop			; (mov r8, r8)
    3fee:	46bd      	mov	sp, r7
    3ff0:	b002      	add	sp, #8
    3ff2:	bd80      	pop	{r7, pc}
    3ff4:	0000e824 	.word	0x0000e824
    3ff8:	00004161 	.word	0x00004161
    3ffc:	000041d5 	.word	0x000041d5

00004000 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    4000:	b580      	push	{r7, lr}
    4002:	b082      	sub	sp, #8
    4004:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    4006:	2300      	movs	r3, #0
    4008:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    400a:	4b3f      	ldr	r3, [pc, #252]	; (4108 <nm_spi_init+0x108>)
    400c:	2200      	movs	r2, #0
    400e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    4010:	003b      	movs	r3, r7
    4012:	4a3e      	ldr	r2, [pc, #248]	; (410c <nm_spi_init+0x10c>)
    4014:	0019      	movs	r1, r3
    4016:	0010      	movs	r0, r2
    4018:	4b3d      	ldr	r3, [pc, #244]	; (4110 <nm_spi_init+0x110>)
    401a:	4798      	blx	r3
    401c:	1e03      	subs	r3, r0, #0
    401e:	d127      	bne.n	4070 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    4020:	4b39      	ldr	r3, [pc, #228]	; (4108 <nm_spi_init+0x108>)
    4022:	2201      	movs	r2, #1
    4024:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    4026:	4a3b      	ldr	r2, [pc, #236]	; (4114 <nm_spi_init+0x114>)
    4028:	493b      	ldr	r1, [pc, #236]	; (4118 <nm_spi_init+0x118>)
    402a:	4b3c      	ldr	r3, [pc, #240]	; (411c <nm_spi_init+0x11c>)
    402c:	0018      	movs	r0, r3
    402e:	4b3c      	ldr	r3, [pc, #240]	; (4120 <nm_spi_init+0x120>)
    4030:	4798      	blx	r3
    4032:	4b3c      	ldr	r3, [pc, #240]	; (4124 <nm_spi_init+0x124>)
    4034:	0018      	movs	r0, r3
    4036:	4b3c      	ldr	r3, [pc, #240]	; (4128 <nm_spi_init+0x128>)
    4038:	4798      	blx	r3
    403a:	200d      	movs	r0, #13
    403c:	4b3b      	ldr	r3, [pc, #236]	; (412c <nm_spi_init+0x12c>)
    403e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    4040:	003b      	movs	r3, r7
    4042:	4a32      	ldr	r2, [pc, #200]	; (410c <nm_spi_init+0x10c>)
    4044:	0019      	movs	r1, r3
    4046:	0010      	movs	r0, r2
    4048:	4b31      	ldr	r3, [pc, #196]	; (4110 <nm_spi_init+0x110>)
    404a:	4798      	blx	r3
    404c:	1e03      	subs	r3, r0, #0
    404e:	d10f      	bne.n	4070 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    4050:	23b2      	movs	r3, #178	; 0xb2
    4052:	009a      	lsls	r2, r3, #2
    4054:	4930      	ldr	r1, [pc, #192]	; (4118 <nm_spi_init+0x118>)
    4056:	4b31      	ldr	r3, [pc, #196]	; (411c <nm_spi_init+0x11c>)
    4058:	0018      	movs	r0, r3
    405a:	4b31      	ldr	r3, [pc, #196]	; (4120 <nm_spi_init+0x120>)
    405c:	4798      	blx	r3
    405e:	4b34      	ldr	r3, [pc, #208]	; (4130 <nm_spi_init+0x130>)
    4060:	0018      	movs	r0, r3
    4062:	4b31      	ldr	r3, [pc, #196]	; (4128 <nm_spi_init+0x128>)
    4064:	4798      	blx	r3
    4066:	200d      	movs	r0, #13
    4068:	4b30      	ldr	r3, [pc, #192]	; (412c <nm_spi_init+0x12c>)
    406a:	4798      	blx	r3
			return 0;
    406c:	2300      	movs	r3, #0
    406e:	e046      	b.n	40fe <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    4070:	4b25      	ldr	r3, [pc, #148]	; (4108 <nm_spi_init+0x108>)
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	2b00      	cmp	r3, #0
    4076:	d125      	bne.n	40c4 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    4078:	683b      	ldr	r3, [r7, #0]
    407a:	220c      	movs	r2, #12
    407c:	4393      	bics	r3, r2
    407e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	2270      	movs	r2, #112	; 0x70
    4084:	4393      	bics	r3, r2
    4086:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    4088:	683b      	ldr	r3, [r7, #0]
    408a:	2250      	movs	r2, #80	; 0x50
    408c:	4313      	orrs	r3, r2
    408e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    4090:	683b      	ldr	r3, [r7, #0]
    4092:	4a1e      	ldr	r2, [pc, #120]	; (410c <nm_spi_init+0x10c>)
    4094:	0019      	movs	r1, r3
    4096:	0010      	movs	r0, r2
    4098:	4b26      	ldr	r3, [pc, #152]	; (4134 <nm_spi_init+0x134>)
    409a:	4798      	blx	r3
    409c:	1e03      	subs	r3, r0, #0
    409e:	d10e      	bne.n	40be <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    40a0:	4a25      	ldr	r2, [pc, #148]	; (4138 <nm_spi_init+0x138>)
    40a2:	491d      	ldr	r1, [pc, #116]	; (4118 <nm_spi_init+0x118>)
    40a4:	4b1d      	ldr	r3, [pc, #116]	; (411c <nm_spi_init+0x11c>)
    40a6:	0018      	movs	r0, r3
    40a8:	4b1d      	ldr	r3, [pc, #116]	; (4120 <nm_spi_init+0x120>)
    40aa:	4798      	blx	r3
    40ac:	4b23      	ldr	r3, [pc, #140]	; (413c <nm_spi_init+0x13c>)
    40ae:	0018      	movs	r0, r3
    40b0:	4b1d      	ldr	r3, [pc, #116]	; (4128 <nm_spi_init+0x128>)
    40b2:	4798      	blx	r3
    40b4:	200d      	movs	r0, #13
    40b6:	4b1d      	ldr	r3, [pc, #116]	; (412c <nm_spi_init+0x12c>)
    40b8:	4798      	blx	r3
			return 0;
    40ba:	2300      	movs	r3, #0
    40bc:	e01f      	b.n	40fe <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    40be:	4b12      	ldr	r3, [pc, #72]	; (4108 <nm_spi_init+0x108>)
    40c0:	2201      	movs	r2, #1
    40c2:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    40c4:	1d3a      	adds	r2, r7, #4
    40c6:	2380      	movs	r3, #128	; 0x80
    40c8:	015b      	lsls	r3, r3, #5
    40ca:	0011      	movs	r1, r2
    40cc:	0018      	movs	r0, r3
    40ce:	4b10      	ldr	r3, [pc, #64]	; (4110 <nm_spi_init+0x110>)
    40d0:	4798      	blx	r3
    40d2:	1e03      	subs	r3, r0, #0
    40d4:	d110      	bne.n	40f8 <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    40d6:	23b7      	movs	r3, #183	; 0xb7
    40d8:	009a      	lsls	r2, r3, #2
    40da:	490f      	ldr	r1, [pc, #60]	; (4118 <nm_spi_init+0x118>)
    40dc:	4b0f      	ldr	r3, [pc, #60]	; (411c <nm_spi_init+0x11c>)
    40de:	0018      	movs	r0, r3
    40e0:	4b0f      	ldr	r3, [pc, #60]	; (4120 <nm_spi_init+0x120>)
    40e2:	4798      	blx	r3
    40e4:	4b16      	ldr	r3, [pc, #88]	; (4140 <nm_spi_init+0x140>)
    40e6:	0018      	movs	r0, r3
    40e8:	4b0f      	ldr	r3, [pc, #60]	; (4128 <nm_spi_init+0x128>)
    40ea:	4798      	blx	r3
    40ec:	200d      	movs	r0, #13
    40ee:	4b0f      	ldr	r3, [pc, #60]	; (412c <nm_spi_init+0x12c>)
    40f0:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    40f2:	2306      	movs	r3, #6
    40f4:	425b      	negs	r3, r3
    40f6:	e002      	b.n	40fe <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    40f8:	4b12      	ldr	r3, [pc, #72]	; (4144 <nm_spi_init+0x144>)
    40fa:	4798      	blx	r3


	return M2M_SUCCESS;
    40fc:	2300      	movs	r3, #0
}
    40fe:	0018      	movs	r0, r3
    4100:	46bd      	mov	sp, r7
    4102:	b002      	add	sp, #8
    4104:	bd80      	pop	{r7, pc}
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	200000dc 	.word	0x200000dc
    410c:	0000e824 	.word	0x0000e824
    4110:	00003ccd 	.word	0x00003ccd
    4114:	000002c5 	.word	0x000002c5
    4118:	00012df0 	.word	0x00012df0
    411c:	0001288c 	.word	0x0001288c
    4120:	00010d75 	.word	0x00010d75
    4124:	00012c70 	.word	0x00012c70
    4128:	00010e95 	.word	0x00010e95
    412c:	00010da9 	.word	0x00010da9
    4130:	00012cc0 	.word	0x00012cc0
    4134:	00003a6d 	.word	0x00003a6d
    4138:	000002d2 	.word	0x000002d2
    413c:	00012cec 	.word	0x00012cec
    4140:	00012d20 	.word	0x00012d20
    4144:	00003fbd 	.word	0x00003fbd

00004148 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    4148:	b580      	push	{r7, lr}
    414a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    414c:	4b03      	ldr	r3, [pc, #12]	; (415c <nm_spi_deinit+0x14>)
    414e:	2200      	movs	r2, #0
    4150:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    4152:	2300      	movs	r3, #0
}
    4154:	0018      	movs	r0, r3
    4156:	46bd      	mov	sp, r7
    4158:	bd80      	pop	{r7, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	200000dc 	.word	0x200000dc

00004160 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    4160:	b580      	push	{r7, lr}
    4162:	b084      	sub	sp, #16
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    4168:	230c      	movs	r3, #12
    416a:	18fa      	adds	r2, r7, r3
    416c:	687b      	ldr	r3, [r7, #4]
    416e:	0011      	movs	r1, r2
    4170:	0018      	movs	r0, r3
    4172:	4b03      	ldr	r3, [pc, #12]	; (4180 <nm_spi_read_reg+0x20>)
    4174:	4798      	blx	r3

	return u32Val;
    4176:	68fb      	ldr	r3, [r7, #12]
}
    4178:	0018      	movs	r0, r3
    417a:	46bd      	mov	sp, r7
    417c:	b004      	add	sp, #16
    417e:	bd80      	pop	{r7, pc}
    4180:	00003ccd 	.word	0x00003ccd

00004184 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4184:	b590      	push	{r4, r7, lr}
    4186:	b085      	sub	sp, #20
    4188:	af00      	add	r7, sp, #0
    418a:	6078      	str	r0, [r7, #4]
    418c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    418e:	230f      	movs	r3, #15
    4190:	18fc      	adds	r4, r7, r3
    4192:	683a      	ldr	r2, [r7, #0]
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	0011      	movs	r1, r2
    4198:	0018      	movs	r0, r3
    419a:	4b0d      	ldr	r3, [pc, #52]	; (41d0 <nm_spi_read_reg_with_ret+0x4c>)
    419c:	4798      	blx	r3
    419e:	0003      	movs	r3, r0
    41a0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    41a2:	230f      	movs	r3, #15
    41a4:	18fb      	adds	r3, r7, r3
    41a6:	781b      	ldrb	r3, [r3, #0]
    41a8:	b25b      	sxtb	r3, r3
    41aa:	2b01      	cmp	r3, #1
    41ac:	d104      	bne.n	41b8 <nm_spi_read_reg_with_ret+0x34>
    41ae:	230f      	movs	r3, #15
    41b0:	18fb      	adds	r3, r7, r3
    41b2:	2200      	movs	r2, #0
    41b4:	701a      	strb	r2, [r3, #0]
    41b6:	e003      	b.n	41c0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    41b8:	230f      	movs	r3, #15
    41ba:	18fb      	adds	r3, r7, r3
    41bc:	22fa      	movs	r2, #250	; 0xfa
    41be:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    41c0:	230f      	movs	r3, #15
    41c2:	18fb      	adds	r3, r7, r3
    41c4:	781b      	ldrb	r3, [r3, #0]
    41c6:	b25b      	sxtb	r3, r3
}
    41c8:	0018      	movs	r0, r3
    41ca:	46bd      	mov	sp, r7
    41cc:	b005      	add	sp, #20
    41ce:	bd90      	pop	{r4, r7, pc}
    41d0:	00003ccd 	.word	0x00003ccd

000041d4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    41d4:	b590      	push	{r4, r7, lr}
    41d6:	b085      	sub	sp, #20
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
    41dc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    41de:	230f      	movs	r3, #15
    41e0:	18fc      	adds	r4, r7, r3
    41e2:	683a      	ldr	r2, [r7, #0]
    41e4:	687b      	ldr	r3, [r7, #4]
    41e6:	0011      	movs	r1, r2
    41e8:	0018      	movs	r0, r3
    41ea:	4b0d      	ldr	r3, [pc, #52]	; (4220 <nm_spi_write_reg+0x4c>)
    41ec:	4798      	blx	r3
    41ee:	0003      	movs	r3, r0
    41f0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    41f2:	230f      	movs	r3, #15
    41f4:	18fb      	adds	r3, r7, r3
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	b25b      	sxtb	r3, r3
    41fa:	2b01      	cmp	r3, #1
    41fc:	d104      	bne.n	4208 <nm_spi_write_reg+0x34>
    41fe:	230f      	movs	r3, #15
    4200:	18fb      	adds	r3, r7, r3
    4202:	2200      	movs	r2, #0
    4204:	701a      	strb	r2, [r3, #0]
    4206:	e003      	b.n	4210 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    4208:	230f      	movs	r3, #15
    420a:	18fb      	adds	r3, r7, r3
    420c:	22fa      	movs	r2, #250	; 0xfa
    420e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4210:	230f      	movs	r3, #15
    4212:	18fb      	adds	r3, r7, r3
    4214:	781b      	ldrb	r3, [r3, #0]
    4216:	b25b      	sxtb	r3, r3
}
    4218:	0018      	movs	r0, r3
    421a:	46bd      	mov	sp, r7
    421c:	b005      	add	sp, #20
    421e:	bd90      	pop	{r4, r7, pc}
    4220:	00003a6d 	.word	0x00003a6d

00004224 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4224:	b590      	push	{r4, r7, lr}
    4226:	b087      	sub	sp, #28
    4228:	af00      	add	r7, sp, #0
    422a:	60f8      	str	r0, [r7, #12]
    422c:	60b9      	str	r1, [r7, #8]
    422e:	1dbb      	adds	r3, r7, #6
    4230:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    4232:	2317      	movs	r3, #23
    4234:	18fc      	adds	r4, r7, r3
    4236:	1dbb      	adds	r3, r7, #6
    4238:	881a      	ldrh	r2, [r3, #0]
    423a:	68b9      	ldr	r1, [r7, #8]
    423c:	68fb      	ldr	r3, [r7, #12]
    423e:	0018      	movs	r0, r3
    4240:	4b0d      	ldr	r3, [pc, #52]	; (4278 <nm_spi_read_block+0x54>)
    4242:	4798      	blx	r3
    4244:	0003      	movs	r3, r0
    4246:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    4248:	2317      	movs	r3, #23
    424a:	18fb      	adds	r3, r7, r3
    424c:	781b      	ldrb	r3, [r3, #0]
    424e:	b25b      	sxtb	r3, r3
    4250:	2b01      	cmp	r3, #1
    4252:	d104      	bne.n	425e <nm_spi_read_block+0x3a>
    4254:	2317      	movs	r3, #23
    4256:	18fb      	adds	r3, r7, r3
    4258:	2200      	movs	r2, #0
    425a:	701a      	strb	r2, [r3, #0]
    425c:	e003      	b.n	4266 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    425e:	2317      	movs	r3, #23
    4260:	18fb      	adds	r3, r7, r3
    4262:	22fa      	movs	r2, #250	; 0xfa
    4264:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    4266:	2317      	movs	r3, #23
    4268:	18fb      	adds	r3, r7, r3
    426a:	781b      	ldrb	r3, [r3, #0]
    426c:	b25b      	sxtb	r3, r3
}
    426e:	0018      	movs	r0, r3
    4270:	46bd      	mov	sp, r7
    4272:	b007      	add	sp, #28
    4274:	bd90      	pop	{r4, r7, pc}
    4276:	46c0      	nop			; (mov r8, r8)
    4278:	00003e79 	.word	0x00003e79

0000427c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    427c:	b590      	push	{r4, r7, lr}
    427e:	b087      	sub	sp, #28
    4280:	af00      	add	r7, sp, #0
    4282:	60f8      	str	r0, [r7, #12]
    4284:	60b9      	str	r1, [r7, #8]
    4286:	1dbb      	adds	r3, r7, #6
    4288:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    428a:	2317      	movs	r3, #23
    428c:	18fc      	adds	r4, r7, r3
    428e:	1dbb      	adds	r3, r7, #6
    4290:	881a      	ldrh	r2, [r3, #0]
    4292:	68b9      	ldr	r1, [r7, #8]
    4294:	68fb      	ldr	r3, [r7, #12]
    4296:	0018      	movs	r0, r3
    4298:	4b0d      	ldr	r3, [pc, #52]	; (42d0 <nm_spi_write_block+0x54>)
    429a:	4798      	blx	r3
    429c:	0003      	movs	r3, r0
    429e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    42a0:	2317      	movs	r3, #23
    42a2:	18fb      	adds	r3, r7, r3
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	b25b      	sxtb	r3, r3
    42a8:	2b01      	cmp	r3, #1
    42aa:	d104      	bne.n	42b6 <nm_spi_write_block+0x3a>
    42ac:	2317      	movs	r3, #23
    42ae:	18fb      	adds	r3, r7, r3
    42b0:	2200      	movs	r2, #0
    42b2:	701a      	strb	r2, [r3, #0]
    42b4:	e003      	b.n	42be <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    42b6:	2317      	movs	r3, #23
    42b8:	18fb      	adds	r3, r7, r3
    42ba:	22fa      	movs	r2, #250	; 0xfa
    42bc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    42be:	2317      	movs	r3, #23
    42c0:	18fb      	adds	r3, r7, r3
    42c2:	781b      	ldrb	r3, [r3, #0]
    42c4:	b25b      	sxtb	r3, r3
}
    42c6:	0018      	movs	r0, r3
    42c8:	46bd      	mov	sp, r7
    42ca:	b007      	add	sp, #28
    42cc:	bd90      	pop	{r4, r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	00003b89 	.word	0x00003b89

000042d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    42d4:	b590      	push	{r4, r7, lr}
    42d6:	b089      	sub	sp, #36	; 0x24
    42d8:	af00      	add	r7, sp, #0
    42da:	60b9      	str	r1, [r7, #8]
    42dc:	0011      	movs	r1, r2
    42de:	607b      	str	r3, [r7, #4]
    42e0:	230f      	movs	r3, #15
    42e2:	18fb      	adds	r3, r7, r3
    42e4:	1c02      	adds	r2, r0, #0
    42e6:	701a      	strb	r2, [r3, #0]
    42e8:	230e      	movs	r3, #14
    42ea:	18fb      	adds	r3, r7, r3
    42ec:	1c0a      	adds	r2, r1, #0
    42ee:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    42f0:	2330      	movs	r3, #48	; 0x30
    42f2:	18fb      	adds	r3, r7, r3
    42f4:	881b      	ldrh	r3, [r3, #0]
    42f6:	2b00      	cmp	r3, #0
    42f8:	d100      	bne.n	42fc <Socket_ReadSocketData+0x28>
    42fa:	e0bf      	b.n	447c <Socket_ReadSocketData+0x1a8>
    42fc:	230f      	movs	r3, #15
    42fe:	18fb      	adds	r3, r7, r3
    4300:	2200      	movs	r2, #0
    4302:	569a      	ldrsb	r2, [r3, r2]
    4304:	4b5f      	ldr	r3, [pc, #380]	; (4484 <Socket_ReadSocketData+0x1b0>)
    4306:	0112      	lsls	r2, r2, #4
    4308:	58d3      	ldr	r3, [r2, r3]
    430a:	2b00      	cmp	r3, #0
    430c:	d100      	bne.n	4310 <Socket_ReadSocketData+0x3c>
    430e:	e0b5      	b.n	447c <Socket_ReadSocketData+0x1a8>
    4310:	230f      	movs	r3, #15
    4312:	18fb      	adds	r3, r7, r3
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	b25b      	sxtb	r3, r3
    4318:	4a5a      	ldr	r2, [pc, #360]	; (4484 <Socket_ReadSocketData+0x1b0>)
    431a:	011b      	lsls	r3, r3, #4
    431c:	18d3      	adds	r3, r2, r3
    431e:	3304      	adds	r3, #4
    4320:	881b      	ldrh	r3, [r3, #0]
    4322:	b29b      	uxth	r3, r3
    4324:	2b00      	cmp	r3, #0
    4326:	d100      	bne.n	432a <Socket_ReadSocketData+0x56>
    4328:	e0a8      	b.n	447c <Socket_ReadSocketData+0x1a8>
    432a:	230f      	movs	r3, #15
    432c:	18fb      	adds	r3, r7, r3
    432e:	781b      	ldrb	r3, [r3, #0]
    4330:	b25b      	sxtb	r3, r3
    4332:	4a54      	ldr	r2, [pc, #336]	; (4484 <Socket_ReadSocketData+0x1b0>)
    4334:	011b      	lsls	r3, r3, #4
    4336:	18d3      	adds	r3, r2, r3
    4338:	330a      	adds	r3, #10
    433a:	781b      	ldrb	r3, [r3, #0]
    433c:	b2db      	uxtb	r3, r3
    433e:	2b01      	cmp	r3, #1
    4340:	d000      	beq.n	4344 <Socket_ReadSocketData+0x70>
    4342:	e09b      	b.n	447c <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    4344:	687b      	ldr	r3, [r7, #4]
    4346:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    4348:	68bb      	ldr	r3, [r7, #8]
    434a:	2230      	movs	r2, #48	; 0x30
    434c:	18ba      	adds	r2, r7, r2
    434e:	8812      	ldrh	r2, [r2, #0]
    4350:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    4352:	2319      	movs	r3, #25
    4354:	18fb      	adds	r3, r7, r3
    4356:	2201      	movs	r2, #1
    4358:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    435a:	231a      	movs	r3, #26
    435c:	18fb      	adds	r3, r7, r3
    435e:	2230      	movs	r2, #48	; 0x30
    4360:	18ba      	adds	r2, r7, r2
    4362:	8812      	ldrh	r2, [r2, #0]
    4364:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    4366:	230f      	movs	r3, #15
    4368:	18fb      	adds	r3, r7, r3
    436a:	781b      	ldrb	r3, [r3, #0]
    436c:	b25b      	sxtb	r3, r3
    436e:	4a45      	ldr	r2, [pc, #276]	; (4484 <Socket_ReadSocketData+0x1b0>)
    4370:	011b      	lsls	r3, r3, #4
    4372:	18d3      	adds	r3, r2, r3
    4374:	3304      	adds	r3, #4
    4376:	881b      	ldrh	r3, [r3, #0]
    4378:	b29b      	uxth	r3, r3
    437a:	221a      	movs	r2, #26
    437c:	18ba      	adds	r2, r7, r2
    437e:	8812      	ldrh	r2, [r2, #0]
    4380:	1ad3      	subs	r3, r2, r3
    4382:	b29a      	uxth	r2, r3
    4384:	2316      	movs	r3, #22
    4386:	18fb      	adds	r3, r7, r3
    4388:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    438a:	2316      	movs	r3, #22
    438c:	18fb      	adds	r3, r7, r3
    438e:	2200      	movs	r2, #0
    4390:	5e9b      	ldrsh	r3, [r3, r2]
    4392:	2b00      	cmp	r3, #0
    4394:	dd0f      	ble.n	43b6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    4396:	2319      	movs	r3, #25
    4398:	18fb      	adds	r3, r7, r3
    439a:	2200      	movs	r2, #0
    439c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    439e:	230f      	movs	r3, #15
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	2200      	movs	r2, #0
    43a4:	569a      	ldrsb	r2, [r3, r2]
    43a6:	231a      	movs	r3, #26
    43a8:	18fb      	adds	r3, r7, r3
    43aa:	4936      	ldr	r1, [pc, #216]	; (4484 <Socket_ReadSocketData+0x1b0>)
    43ac:	0112      	lsls	r2, r2, #4
    43ae:	188a      	adds	r2, r1, r2
    43b0:	3204      	adds	r2, #4
    43b2:	8812      	ldrh	r2, [r2, #0]
    43b4:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    43b6:	230f      	movs	r3, #15
    43b8:	18fb      	adds	r3, r7, r3
    43ba:	2200      	movs	r2, #0
    43bc:	569a      	ldrsb	r2, [r3, r2]
    43be:	4b31      	ldr	r3, [pc, #196]	; (4484 <Socket_ReadSocketData+0x1b0>)
    43c0:	0112      	lsls	r2, r2, #4
    43c2:	58d1      	ldr	r1, [r2, r3]
    43c4:	2319      	movs	r3, #25
    43c6:	18fb      	adds	r3, r7, r3
    43c8:	781c      	ldrb	r4, [r3, #0]
    43ca:	231a      	movs	r3, #26
    43cc:	18fb      	adds	r3, r7, r3
    43ce:	881a      	ldrh	r2, [r3, #0]
    43d0:	69f8      	ldr	r0, [r7, #28]
    43d2:	0023      	movs	r3, r4
    43d4:	4c2c      	ldr	r4, [pc, #176]	; (4488 <Socket_ReadSocketData+0x1b4>)
    43d6:	47a0      	blx	r4
    43d8:	1e03      	subs	r3, r0, #0
    43da:	d138      	bne.n	444e <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    43dc:	230f      	movs	r3, #15
    43de:	18fb      	adds	r3, r7, r3
    43e0:	2200      	movs	r2, #0
    43e2:	569a      	ldrsb	r2, [r3, r2]
    43e4:	4b27      	ldr	r3, [pc, #156]	; (4484 <Socket_ReadSocketData+0x1b0>)
    43e6:	0112      	lsls	r2, r2, #4
    43e8:	58d2      	ldr	r2, [r2, r3]
    43ea:	68bb      	ldr	r3, [r7, #8]
    43ec:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    43ee:	231a      	movs	r3, #26
    43f0:	18fb      	adds	r3, r7, r3
    43f2:	2200      	movs	r2, #0
    43f4:	5e9a      	ldrsh	r2, [r3, r2]
    43f6:	68bb      	ldr	r3, [r7, #8]
    43f8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    43fa:	68bb      	ldr	r3, [r7, #8]
    43fc:	88da      	ldrh	r2, [r3, #6]
    43fe:	231a      	movs	r3, #26
    4400:	18fb      	adds	r3, r7, r3
    4402:	881b      	ldrh	r3, [r3, #0]
    4404:	1ad3      	subs	r3, r2, r3
    4406:	b29a      	uxth	r2, r3
    4408:	68bb      	ldr	r3, [r7, #8]
    440a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    440c:	4b1f      	ldr	r3, [pc, #124]	; (448c <Socket_ReadSocketData+0x1b8>)
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	2b00      	cmp	r3, #0
    4412:	d00b      	beq.n	442c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    4414:	4b1d      	ldr	r3, [pc, #116]	; (448c <Socket_ReadSocketData+0x1b8>)
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	68bc      	ldr	r4, [r7, #8]
    441a:	220e      	movs	r2, #14
    441c:	18ba      	adds	r2, r7, r2
    441e:	7811      	ldrb	r1, [r2, #0]
    4420:	220f      	movs	r2, #15
    4422:	18ba      	adds	r2, r7, r2
    4424:	2000      	movs	r0, #0
    4426:	5610      	ldrsb	r0, [r2, r0]
    4428:	0022      	movs	r2, r4
    442a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    442c:	2330      	movs	r3, #48	; 0x30
    442e:	18f9      	adds	r1, r7, r3
    4430:	2330      	movs	r3, #48	; 0x30
    4432:	18fa      	adds	r2, r7, r3
    4434:	231a      	movs	r3, #26
    4436:	18fb      	adds	r3, r7, r3
    4438:	8812      	ldrh	r2, [r2, #0]
    443a:	881b      	ldrh	r3, [r3, #0]
    443c:	1ad3      	subs	r3, r2, r3
    443e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    4440:	231a      	movs	r3, #26
    4442:	18fb      	adds	r3, r7, r3
    4444:	881b      	ldrh	r3, [r3, #0]
    4446:	69fa      	ldr	r2, [r7, #28]
    4448:	18d3      	adds	r3, r2, r3
    444a:	61fb      	str	r3, [r7, #28]
    444c:	e010      	b.n	4470 <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    444e:	4b10      	ldr	r3, [pc, #64]	; (4490 <Socket_ReadSocketData+0x1bc>)
    4450:	0018      	movs	r0, r3
    4452:	4b10      	ldr	r3, [pc, #64]	; (4494 <Socket_ReadSocketData+0x1c0>)
    4454:	4798      	blx	r3
    4456:	2330      	movs	r3, #48	; 0x30
    4458:	18fb      	adds	r3, r7, r3
    445a:	881a      	ldrh	r2, [r3, #0]
    445c:	4b0e      	ldr	r3, [pc, #56]	; (4498 <Socket_ReadSocketData+0x1c4>)
    445e:	0011      	movs	r1, r2
    4460:	0018      	movs	r0, r3
    4462:	4b0c      	ldr	r3, [pc, #48]	; (4494 <Socket_ReadSocketData+0x1c0>)
    4464:	4798      	blx	r3
    4466:	200d      	movs	r0, #13
    4468:	4b0c      	ldr	r3, [pc, #48]	; (449c <Socket_ReadSocketData+0x1c8>)
    446a:	4798      	blx	r3
				break;
    446c:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    446e:	e005      	b.n	447c <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    4470:	2330      	movs	r3, #48	; 0x30
    4472:	18fb      	adds	r3, r7, r3
    4474:	881b      	ldrh	r3, [r3, #0]
    4476:	2b00      	cmp	r3, #0
    4478:	d000      	beq.n	447c <Socket_ReadSocketData+0x1a8>
    447a:	e76a      	b.n	4352 <Socket_ReadSocketData+0x7e>
	}
}
    447c:	46c0      	nop			; (mov r8, r8)
    447e:	46bd      	mov	sp, r7
    4480:	b009      	add	sp, #36	; 0x24
    4482:	bd90      	pop	{r4, r7, pc}
    4484:	20004480 	.word	0x20004480
    4488:	000013a5 	.word	0x000013a5
    448c:	20004530 	.word	0x20004530
    4490:	00012dfc 	.word	0x00012dfc
    4494:	00010d75 	.word	0x00010d75
    4498:	00012e08 	.word	0x00012e08
    449c:	00010da9 	.word	0x00010da9

000044a0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    44a0:	b590      	push	{r4, r7, lr}
    44a2:	b0bb      	sub	sp, #236	; 0xec
    44a4:	af02      	add	r7, sp, #8
    44a6:	603a      	str	r2, [r7, #0]
    44a8:	1dfb      	adds	r3, r7, #7
    44aa:	1c02      	adds	r2, r0, #0
    44ac:	701a      	strb	r2, [r3, #0]
    44ae:	1d3b      	adds	r3, r7, #4
    44b0:	1c0a      	adds	r2, r1, #0
    44b2:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    44b4:	1dfb      	adds	r3, r7, #7
    44b6:	781b      	ldrb	r3, [r3, #0]
    44b8:	2b41      	cmp	r3, #65	; 0x41
    44ba:	d120      	bne.n	44fe <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    44bc:	23cc      	movs	r3, #204	; 0xcc
    44be:	18f9      	adds	r1, r7, r3
    44c0:	6838      	ldr	r0, [r7, #0]
    44c2:	2300      	movs	r3, #0
    44c4:	2204      	movs	r2, #4
    44c6:	4c8d      	ldr	r4, [pc, #564]	; (46fc <m2m_ip_cb+0x25c>)
    44c8:	47a0      	blx	r4
    44ca:	1e03      	subs	r3, r0, #0
    44cc:	d000      	beq.n	44d0 <m2m_ip_cb+0x30>
    44ce:	e264      	b.n	499a <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    44d0:	23cc      	movs	r3, #204	; 0xcc
    44d2:	18fb      	adds	r3, r7, r3
    44d4:	2201      	movs	r2, #1
    44d6:	569a      	ldrsb	r2, [r3, r2]
    44d8:	23c8      	movs	r3, #200	; 0xc8
    44da:	18fb      	adds	r3, r7, r3
    44dc:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    44de:	4b88      	ldr	r3, [pc, #544]	; (4700 <m2m_ip_cb+0x260>)
    44e0:	681b      	ldr	r3, [r3, #0]
    44e2:	2b00      	cmp	r3, #0
    44e4:	d100      	bne.n	44e8 <m2m_ip_cb+0x48>
    44e6:	e258      	b.n	499a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    44e8:	4b85      	ldr	r3, [pc, #532]	; (4700 <m2m_ip_cb+0x260>)
    44ea:	681b      	ldr	r3, [r3, #0]
    44ec:	22cc      	movs	r2, #204	; 0xcc
    44ee:	18ba      	adds	r2, r7, r2
    44f0:	2000      	movs	r0, #0
    44f2:	5610      	ldrsb	r0, [r2, r0]
    44f4:	22c8      	movs	r2, #200	; 0xc8
    44f6:	18ba      	adds	r2, r7, r2
    44f8:	2101      	movs	r1, #1
    44fa:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    44fc:	e24d      	b.n	499a <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    44fe:	1dfb      	adds	r3, r7, #7
    4500:	781b      	ldrb	r3, [r3, #0]
    4502:	2b42      	cmp	r3, #66	; 0x42
    4504:	d120      	bne.n	4548 <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    4506:	23c4      	movs	r3, #196	; 0xc4
    4508:	18f9      	adds	r1, r7, r3
    450a:	6838      	ldr	r0, [r7, #0]
    450c:	2300      	movs	r3, #0
    450e:	2204      	movs	r2, #4
    4510:	4c7a      	ldr	r4, [pc, #488]	; (46fc <m2m_ip_cb+0x25c>)
    4512:	47a0      	blx	r4
    4514:	1e03      	subs	r3, r0, #0
    4516:	d000      	beq.n	451a <m2m_ip_cb+0x7a>
    4518:	e23f      	b.n	499a <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    451a:	23c4      	movs	r3, #196	; 0xc4
    451c:	18fb      	adds	r3, r7, r3
    451e:	2201      	movs	r2, #1
    4520:	569a      	ldrsb	r2, [r3, r2]
    4522:	23c0      	movs	r3, #192	; 0xc0
    4524:	18fb      	adds	r3, r7, r3
    4526:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    4528:	4b75      	ldr	r3, [pc, #468]	; (4700 <m2m_ip_cb+0x260>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	2b00      	cmp	r3, #0
    452e:	d100      	bne.n	4532 <m2m_ip_cb+0x92>
    4530:	e233      	b.n	499a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    4532:	4b73      	ldr	r3, [pc, #460]	; (4700 <m2m_ip_cb+0x260>)
    4534:	681b      	ldr	r3, [r3, #0]
    4536:	22c4      	movs	r2, #196	; 0xc4
    4538:	18ba      	adds	r2, r7, r2
    453a:	2000      	movs	r0, #0
    453c:	5610      	ldrsb	r0, [r2, r0]
    453e:	22c0      	movs	r2, #192	; 0xc0
    4540:	18ba      	adds	r2, r7, r2
    4542:	2102      	movs	r1, #2
    4544:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4546:	e228      	b.n	499a <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    4548:	1dfb      	adds	r3, r7, #7
    454a:	781b      	ldrb	r3, [r3, #0]
    454c:	2b43      	cmp	r3, #67	; 0x43
    454e:	d16b      	bne.n	4628 <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    4550:	23b4      	movs	r3, #180	; 0xb4
    4552:	18f9      	adds	r1, r7, r3
    4554:	6838      	ldr	r0, [r7, #0]
    4556:	2300      	movs	r3, #0
    4558:	220c      	movs	r2, #12
    455a:	4c68      	ldr	r4, [pc, #416]	; (46fc <m2m_ip_cb+0x25c>)
    455c:	47a0      	blx	r4
    455e:	1e03      	subs	r3, r0, #0
    4560:	d000      	beq.n	4564 <m2m_ip_cb+0xc4>
    4562:	e21a      	b.n	499a <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    4564:	23b4      	movs	r3, #180	; 0xb4
    4566:	18fb      	adds	r3, r7, r3
    4568:	7a5b      	ldrb	r3, [r3, #9]
    456a:	b25b      	sxtb	r3, r3
    456c:	2b00      	cmp	r3, #0
    456e:	db34      	blt.n	45da <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    4570:	23b4      	movs	r3, #180	; 0xb4
    4572:	18fb      	adds	r3, r7, r3
    4574:	7a5b      	ldrb	r3, [r3, #9]
    4576:	b25b      	sxtb	r3, r3
    4578:	4a62      	ldr	r2, [pc, #392]	; (4704 <m2m_ip_cb+0x264>)
    457a:	011b      	lsls	r3, r3, #4
    457c:	18d3      	adds	r3, r2, r3
    457e:	330b      	adds	r3, #11
    4580:	2200      	movs	r2, #0
    4582:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    4584:	23b4      	movs	r3, #180	; 0xb4
    4586:	18fb      	adds	r3, r7, r3
    4588:	7a5b      	ldrb	r3, [r3, #9]
    458a:	b25b      	sxtb	r3, r3
    458c:	4a5d      	ldr	r2, [pc, #372]	; (4704 <m2m_ip_cb+0x264>)
    458e:	011b      	lsls	r3, r3, #4
    4590:	18d3      	adds	r3, r2, r3
    4592:	330a      	adds	r3, #10
    4594:	2201      	movs	r2, #1
    4596:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    4598:	4b5b      	ldr	r3, [pc, #364]	; (4708 <m2m_ip_cb+0x268>)
    459a:	881b      	ldrh	r3, [r3, #0]
    459c:	b29b      	uxth	r3, r3
    459e:	3301      	adds	r3, #1
    45a0:	b29a      	uxth	r2, r3
    45a2:	4b59      	ldr	r3, [pc, #356]	; (4708 <m2m_ip_cb+0x268>)
    45a4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    45a6:	4b58      	ldr	r3, [pc, #352]	; (4708 <m2m_ip_cb+0x268>)
    45a8:	881b      	ldrh	r3, [r3, #0]
    45aa:	b29b      	uxth	r3, r3
    45ac:	2b00      	cmp	r3, #0
    45ae:	d106      	bne.n	45be <m2m_ip_cb+0x11e>
					++gu16SessionID;
    45b0:	4b55      	ldr	r3, [pc, #340]	; (4708 <m2m_ip_cb+0x268>)
    45b2:	881b      	ldrh	r3, [r3, #0]
    45b4:	b29b      	uxth	r3, r3
    45b6:	3301      	adds	r3, #1
    45b8:	b29a      	uxth	r2, r3
    45ba:	4b53      	ldr	r3, [pc, #332]	; (4708 <m2m_ip_cb+0x268>)
    45bc:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    45be:	23b4      	movs	r3, #180	; 0xb4
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	7a5b      	ldrb	r3, [r3, #9]
    45c4:	b25b      	sxtb	r3, r3
    45c6:	0018      	movs	r0, r3
    45c8:	4b4f      	ldr	r3, [pc, #316]	; (4708 <m2m_ip_cb+0x268>)
    45ca:	881b      	ldrh	r3, [r3, #0]
    45cc:	b299      	uxth	r1, r3
    45ce:	4a4d      	ldr	r2, [pc, #308]	; (4704 <m2m_ip_cb+0x264>)
    45d0:	0103      	lsls	r3, r0, #4
    45d2:	18d3      	adds	r3, r2, r3
    45d4:	3306      	adds	r3, #6
    45d6:	1c0a      	adds	r2, r1, #0
    45d8:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    45da:	23b4      	movs	r3, #180	; 0xb4
    45dc:	18fb      	adds	r3, r7, r3
    45de:	2209      	movs	r2, #9
    45e0:	569a      	ldrsb	r2, [r3, r2]
    45e2:	23a0      	movs	r3, #160	; 0xa0
    45e4:	18fb      	adds	r3, r7, r3
    45e6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    45e8:	23a0      	movs	r3, #160	; 0xa0
    45ea:	18fb      	adds	r3, r7, r3
    45ec:	2202      	movs	r2, #2
    45ee:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    45f0:	23b4      	movs	r3, #180	; 0xb4
    45f2:	18fb      	adds	r3, r7, r3
    45f4:	885a      	ldrh	r2, [r3, #2]
    45f6:	23a0      	movs	r3, #160	; 0xa0
    45f8:	18fb      	adds	r3, r7, r3
    45fa:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    45fc:	23b4      	movs	r3, #180	; 0xb4
    45fe:	18fb      	adds	r3, r7, r3
    4600:	685a      	ldr	r2, [r3, #4]
    4602:	23a0      	movs	r3, #160	; 0xa0
    4604:	18fb      	adds	r3, r7, r3
    4606:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    4608:	4b3d      	ldr	r3, [pc, #244]	; (4700 <m2m_ip_cb+0x260>)
    460a:	681b      	ldr	r3, [r3, #0]
    460c:	2b00      	cmp	r3, #0
    460e:	d100      	bne.n	4612 <m2m_ip_cb+0x172>
    4610:	e1c3      	b.n	499a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    4612:	4b3b      	ldr	r3, [pc, #236]	; (4700 <m2m_ip_cb+0x260>)
    4614:	681b      	ldr	r3, [r3, #0]
    4616:	22b4      	movs	r2, #180	; 0xb4
    4618:	18ba      	adds	r2, r7, r2
    461a:	2008      	movs	r0, #8
    461c:	5610      	ldrsb	r0, [r2, r0]
    461e:	22a0      	movs	r2, #160	; 0xa0
    4620:	18ba      	adds	r2, r7, r2
    4622:	2104      	movs	r1, #4
    4624:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    4626:	e1b8      	b.n	499a <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    4628:	1dfb      	adds	r3, r7, #7
    462a:	781b      	ldrb	r3, [r3, #0]
    462c:	2b44      	cmp	r3, #68	; 0x44
    462e:	d003      	beq.n	4638 <m2m_ip_cb+0x198>
    4630:	1dfb      	adds	r3, r7, #7
    4632:	781b      	ldrb	r3, [r3, #0]
    4634:	2b4b      	cmp	r3, #75	; 0x4b
    4636:	d13d      	bne.n	46b4 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    4638:	239c      	movs	r3, #156	; 0x9c
    463a:	18f9      	adds	r1, r7, r3
    463c:	6838      	ldr	r0, [r7, #0]
    463e:	2300      	movs	r3, #0
    4640:	2204      	movs	r2, #4
    4642:	4c2e      	ldr	r4, [pc, #184]	; (46fc <m2m_ip_cb+0x25c>)
    4644:	47a0      	blx	r4
    4646:	1e03      	subs	r3, r0, #0
    4648:	d000      	beq.n	464c <m2m_ip_cb+0x1ac>
    464a:	e1a1      	b.n	4990 <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    464c:	239c      	movs	r3, #156	; 0x9c
    464e:	18fb      	adds	r3, r7, r3
    4650:	2200      	movs	r2, #0
    4652:	569a      	ldrsb	r2, [r3, r2]
    4654:	2398      	movs	r3, #152	; 0x98
    4656:	18fb      	adds	r3, r7, r3
    4658:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    465a:	239c      	movs	r3, #156	; 0x9c
    465c:	18fb      	adds	r3, r7, r3
    465e:	2201      	movs	r2, #1
    4660:	569a      	ldrsb	r2, [r3, r2]
    4662:	2398      	movs	r3, #152	; 0x98
    4664:	18fb      	adds	r3, r7, r3
    4666:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    4668:	239c      	movs	r3, #156	; 0x9c
    466a:	18fb      	adds	r3, r7, r3
    466c:	785b      	ldrb	r3, [r3, #1]
    466e:	b25b      	sxtb	r3, r3
    4670:	2b00      	cmp	r3, #0
    4672:	d10f      	bne.n	4694 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    4674:	239c      	movs	r3, #156	; 0x9c
    4676:	18fb      	adds	r3, r7, r3
    4678:	781b      	ldrb	r3, [r3, #0]
    467a:	b25b      	sxtb	r3, r3
    467c:	0018      	movs	r0, r3
    467e:	239c      	movs	r3, #156	; 0x9c
    4680:	18fb      	adds	r3, r7, r3
    4682:	885b      	ldrh	r3, [r3, #2]
    4684:	3b08      	subs	r3, #8
    4686:	b299      	uxth	r1, r3
    4688:	4a1e      	ldr	r2, [pc, #120]	; (4704 <m2m_ip_cb+0x264>)
    468a:	0103      	lsls	r3, r0, #4
    468c:	18d3      	adds	r3, r2, r3
    468e:	3308      	adds	r3, #8
    4690:	1c0a      	adds	r2, r1, #0
    4692:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    4694:	4b1a      	ldr	r3, [pc, #104]	; (4700 <m2m_ip_cb+0x260>)
    4696:	681b      	ldr	r3, [r3, #0]
    4698:	2b00      	cmp	r3, #0
    469a:	d100      	bne.n	469e <m2m_ip_cb+0x1fe>
    469c:	e178      	b.n	4990 <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    469e:	4b18      	ldr	r3, [pc, #96]	; (4700 <m2m_ip_cb+0x260>)
    46a0:	681b      	ldr	r3, [r3, #0]
    46a2:	229c      	movs	r2, #156	; 0x9c
    46a4:	18ba      	adds	r2, r7, r2
    46a6:	2000      	movs	r0, #0
    46a8:	5610      	ldrsb	r0, [r2, r0]
    46aa:	2298      	movs	r2, #152	; 0x98
    46ac:	18ba      	adds	r2, r7, r2
    46ae:	2105      	movs	r1, #5
    46b0:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    46b2:	e16d      	b.n	4990 <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    46b4:	1dfb      	adds	r3, r7, #7
    46b6:	781b      	ldrb	r3, [r3, #0]
    46b8:	2b4a      	cmp	r3, #74	; 0x4a
    46ba:	d129      	bne.n	4710 <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    46bc:	230c      	movs	r3, #12
    46be:	18f9      	adds	r1, r7, r3
    46c0:	6838      	ldr	r0, [r7, #0]
    46c2:	2300      	movs	r3, #0
    46c4:	2244      	movs	r2, #68	; 0x44
    46c6:	4c0d      	ldr	r4, [pc, #52]	; (46fc <m2m_ip_cb+0x25c>)
    46c8:	47a0      	blx	r4
    46ca:	1e03      	subs	r3, r0, #0
    46cc:	d000      	beq.n	46d0 <m2m_ip_cb+0x230>
    46ce:	e164      	b.n	499a <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    46d0:	230c      	movs	r3, #12
    46d2:	18fb      	adds	r3, r7, r3
    46d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    46d6:	230c      	movs	r3, #12
    46d8:	18fb      	adds	r3, r7, r3
    46da:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    46dc:	4b0b      	ldr	r3, [pc, #44]	; (470c <m2m_ip_cb+0x26c>)
    46de:	681b      	ldr	r3, [r3, #0]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d100      	bne.n	46e6 <m2m_ip_cb+0x246>
    46e4:	e159      	b.n	499a <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    46e6:	4b09      	ldr	r3, [pc, #36]	; (470c <m2m_ip_cb+0x26c>)
    46e8:	681a      	ldr	r2, [r3, #0]
    46ea:	230c      	movs	r3, #12
    46ec:	18fb      	adds	r3, r7, r3
    46ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
    46f0:	230c      	movs	r3, #12
    46f2:	18fb      	adds	r3, r7, r3
    46f4:	0018      	movs	r0, r3
    46f6:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    46f8:	e14f      	b.n	499a <m2m_ip_cb+0x4fa>
    46fa:	46c0      	nop			; (mov r8, r8)
    46fc:	000013a5 	.word	0x000013a5
    4700:	20004530 	.word	0x20004530
    4704:	20004480 	.word	0x20004480
    4708:	200000de 	.word	0x200000de
    470c:	20004538 	.word	0x20004538
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    4710:	1dfb      	adds	r3, r7, #7
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	2b46      	cmp	r3, #70	; 0x46
    4716:	d008      	beq.n	472a <m2m_ip_cb+0x28a>
    4718:	1dfb      	adds	r3, r7, #7
    471a:	781b      	ldrb	r3, [r3, #0]
    471c:	2b48      	cmp	r3, #72	; 0x48
    471e:	d004      	beq.n	472a <m2m_ip_cb+0x28a>
    4720:	1dfb      	adds	r3, r7, #7
    4722:	781b      	ldrb	r3, [r3, #0]
    4724:	2b4d      	cmp	r3, #77	; 0x4d
    4726:	d000      	beq.n	472a <m2m_ip_cb+0x28a>
    4728:	e0b4      	b.n	4894 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    472a:	23df      	movs	r3, #223	; 0xdf
    472c:	18fb      	adds	r3, r7, r3
    472e:	2206      	movs	r2, #6
    4730:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    4732:	1dfb      	adds	r3, r7, #7
    4734:	781b      	ldrb	r3, [r3, #0]
    4736:	2b48      	cmp	r3, #72	; 0x48
    4738:	d103      	bne.n	4742 <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    473a:	23df      	movs	r3, #223	; 0xdf
    473c:	18fb      	adds	r3, r7, r3
    473e:	2209      	movs	r2, #9
    4740:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    4742:	23d8      	movs	r3, #216	; 0xd8
    4744:	18fb      	adds	r3, r7, r3
    4746:	2210      	movs	r2, #16
    4748:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    474a:	23d8      	movs	r3, #216	; 0xd8
    474c:	18fb      	adds	r3, r7, r3
    474e:	881a      	ldrh	r2, [r3, #0]
    4750:	2388      	movs	r3, #136	; 0x88
    4752:	18f9      	adds	r1, r7, r3
    4754:	6838      	ldr	r0, [r7, #0]
    4756:	2300      	movs	r3, #0
    4758:	4c92      	ldr	r4, [pc, #584]	; (49a4 <m2m_ip_cb+0x504>)
    475a:	47a0      	blx	r4
    475c:	1e03      	subs	r3, r0, #0
    475e:	d000      	beq.n	4762 <m2m_ip_cb+0x2c2>
    4760:	e118      	b.n	4994 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    4762:	23d6      	movs	r3, #214	; 0xd6
    4764:	18fb      	adds	r3, r7, r3
    4766:	2200      	movs	r2, #0
    4768:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    476a:	23d5      	movs	r3, #213	; 0xd5
    476c:	18fb      	adds	r3, r7, r3
    476e:	2288      	movs	r2, #136	; 0x88
    4770:	18ba      	adds	r2, r7, r2
    4772:	7b12      	ldrb	r2, [r2, #12]
    4774:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    4776:	23d6      	movs	r3, #214	; 0xd6
    4778:	18fb      	adds	r3, r7, r3
    477a:	2288      	movs	r2, #136	; 0x88
    477c:	18ba      	adds	r2, r7, r2
    477e:	89d2      	ldrh	r2, [r2, #14]
    4780:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    4782:	23d5      	movs	r3, #213	; 0xd5
    4784:	18fb      	adds	r3, r7, r3
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	b25b      	sxtb	r3, r3
    478a:	4a87      	ldr	r2, [pc, #540]	; (49a8 <m2m_ip_cb+0x508>)
    478c:	011b      	lsls	r3, r3, #4
    478e:	18d3      	adds	r3, r2, r3
    4790:	330c      	adds	r3, #12
    4792:	2200      	movs	r2, #0
    4794:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    4796:	23d2      	movs	r3, #210	; 0xd2
    4798:	18fb      	adds	r3, r7, r3
    479a:	2288      	movs	r2, #136	; 0x88
    479c:	18ba      	adds	r2, r7, r2
    479e:	8912      	ldrh	r2, [r2, #8]
    47a0:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    47a2:	23d0      	movs	r3, #208	; 0xd0
    47a4:	18fb      	adds	r3, r7, r3
    47a6:	2288      	movs	r2, #136	; 0x88
    47a8:	18ba      	adds	r2, r7, r2
    47aa:	8952      	ldrh	r2, [r2, #10]
    47ac:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    47ae:	2388      	movs	r3, #136	; 0x88
    47b0:	18fb      	adds	r3, r7, r3
    47b2:	885a      	ldrh	r2, [r3, #2]
    47b4:	2370      	movs	r3, #112	; 0x70
    47b6:	18fb      	adds	r3, r7, r3
    47b8:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    47ba:	2388      	movs	r3, #136	; 0x88
    47bc:	18fb      	adds	r3, r7, r3
    47be:	685a      	ldr	r2, [r3, #4]
    47c0:	2370      	movs	r3, #112	; 0x70
    47c2:	18fb      	adds	r3, r7, r3
    47c4:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    47c6:	23d5      	movs	r3, #213	; 0xd5
    47c8:	18fb      	adds	r3, r7, r3
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b25b      	sxtb	r3, r3
    47ce:	4a76      	ldr	r2, [pc, #472]	; (49a8 <m2m_ip_cb+0x508>)
    47d0:	011b      	lsls	r3, r3, #4
    47d2:	18d3      	adds	r3, r2, r3
    47d4:	3306      	adds	r3, #6
    47d6:	881b      	ldrh	r3, [r3, #0]
    47d8:	b29b      	uxth	r3, r3
    47da:	22d6      	movs	r2, #214	; 0xd6
    47dc:	18ba      	adds	r2, r7, r2
    47de:	8812      	ldrh	r2, [r2, #0]
    47e0:	429a      	cmp	r2, r3
    47e2:	d148      	bne.n	4876 <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    47e4:	23d2      	movs	r3, #210	; 0xd2
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	2200      	movs	r2, #0
    47ea:	5e9b      	ldrsh	r3, [r3, r2]
    47ec:	2b00      	cmp	r3, #0
    47ee:	dd25      	ble.n	483c <m2m_ip_cb+0x39c>
    47f0:	23d2      	movs	r3, #210	; 0xd2
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	2200      	movs	r2, #0
    47f6:	5e9a      	ldrsh	r2, [r3, r2]
    47f8:	1d3b      	adds	r3, r7, #4
    47fa:	881b      	ldrh	r3, [r3, #0]
    47fc:	429a      	cmp	r2, r3
    47fe:	da1d      	bge.n	483c <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    4800:	23d0      	movs	r3, #208	; 0xd0
    4802:	18fb      	adds	r3, r7, r3
    4804:	881b      	ldrh	r3, [r3, #0]
    4806:	683a      	ldr	r2, [r7, #0]
    4808:	18d3      	adds	r3, r2, r3
    480a:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    480c:	23d8      	movs	r3, #216	; 0xd8
    480e:	18fb      	adds	r3, r7, r3
    4810:	22d2      	movs	r2, #210	; 0xd2
    4812:	18ba      	adds	r2, r7, r2
    4814:	8812      	ldrh	r2, [r2, #0]
    4816:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    4818:	683c      	ldr	r4, [r7, #0]
    481a:	23df      	movs	r3, #223	; 0xdf
    481c:	18fb      	adds	r3, r7, r3
    481e:	781a      	ldrb	r2, [r3, #0]
    4820:	2370      	movs	r3, #112	; 0x70
    4822:	18f9      	adds	r1, r7, r3
    4824:	23d5      	movs	r3, #213	; 0xd5
    4826:	18fb      	adds	r3, r7, r3
    4828:	2000      	movs	r0, #0
    482a:	5618      	ldrsb	r0, [r3, r0]
    482c:	23d8      	movs	r3, #216	; 0xd8
    482e:	18fb      	adds	r3, r7, r3
    4830:	881b      	ldrh	r3, [r3, #0]
    4832:	9300      	str	r3, [sp, #0]
    4834:	0023      	movs	r3, r4
    4836:	4c5d      	ldr	r4, [pc, #372]	; (49ac <m2m_ip_cb+0x50c>)
    4838:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    483a:	e0ab      	b.n	4994 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    483c:	2370      	movs	r3, #112	; 0x70
    483e:	18fb      	adds	r3, r7, r3
    4840:	22d2      	movs	r2, #210	; 0xd2
    4842:	18ba      	adds	r2, r7, r2
    4844:	8812      	ldrh	r2, [r2, #0]
    4846:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    4848:	2370      	movs	r3, #112	; 0x70
    484a:	18fb      	adds	r3, r7, r3
    484c:	2200      	movs	r2, #0
    484e:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    4850:	4b57      	ldr	r3, [pc, #348]	; (49b0 <m2m_ip_cb+0x510>)
    4852:	681b      	ldr	r3, [r3, #0]
    4854:	2b00      	cmp	r3, #0
    4856:	d100      	bne.n	485a <m2m_ip_cb+0x3ba>
    4858:	e09c      	b.n	4994 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    485a:	4b55      	ldr	r3, [pc, #340]	; (49b0 <m2m_ip_cb+0x510>)
    485c:	681b      	ldr	r3, [r3, #0]
    485e:	2270      	movs	r2, #112	; 0x70
    4860:	18bc      	adds	r4, r7, r2
    4862:	22df      	movs	r2, #223	; 0xdf
    4864:	18ba      	adds	r2, r7, r2
    4866:	7811      	ldrb	r1, [r2, #0]
    4868:	22d5      	movs	r2, #213	; 0xd5
    486a:	18ba      	adds	r2, r7, r2
    486c:	2000      	movs	r0, #0
    486e:	5610      	ldrsb	r0, [r2, r0]
    4870:	0022      	movs	r2, r4
    4872:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4874:	e08e      	b.n	4994 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    4876:	23d8      	movs	r3, #216	; 0xd8
    4878:	18fa      	adds	r2, r7, r3
    487a:	1d3b      	adds	r3, r7, #4
    487c:	8812      	ldrh	r2, [r2, #0]
    487e:	881b      	ldrh	r3, [r3, #0]
    4880:	429a      	cmp	r2, r3
    4882:	d300      	bcc.n	4886 <m2m_ip_cb+0x3e6>
    4884:	e086      	b.n	4994 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    4886:	2301      	movs	r3, #1
    4888:	2200      	movs	r2, #0
    488a:	2100      	movs	r1, #0
    488c:	2000      	movs	r0, #0
    488e:	4c45      	ldr	r4, [pc, #276]	; (49a4 <m2m_ip_cb+0x504>)
    4890:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4892:	e07f      	b.n	4994 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    4894:	1dfb      	adds	r3, r7, #7
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	2b45      	cmp	r3, #69	; 0x45
    489a:	d007      	beq.n	48ac <m2m_ip_cb+0x40c>
    489c:	1dfb      	adds	r3, r7, #7
    489e:	781b      	ldrb	r3, [r3, #0]
    48a0:	2b47      	cmp	r3, #71	; 0x47
    48a2:	d003      	beq.n	48ac <m2m_ip_cb+0x40c>
    48a4:	1dfb      	adds	r3, r7, #7
    48a6:	781b      	ldrb	r3, [r3, #0]
    48a8:	2b4c      	cmp	r3, #76	; 0x4c
    48aa:	d14c      	bne.n	4946 <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    48ac:	23de      	movs	r3, #222	; 0xde
    48ae:	18fb      	adds	r3, r7, r3
    48b0:	2207      	movs	r2, #7
    48b2:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    48b4:	1dfb      	adds	r3, r7, #7
    48b6:	781b      	ldrb	r3, [r3, #0]
    48b8:	2b47      	cmp	r3, #71	; 0x47
    48ba:	d103      	bne.n	48c4 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    48bc:	23de      	movs	r3, #222	; 0xde
    48be:	18fb      	adds	r3, r7, r3
    48c0:	2208      	movs	r2, #8
    48c2:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    48c4:	2364      	movs	r3, #100	; 0x64
    48c6:	18f9      	adds	r1, r7, r3
    48c8:	6838      	ldr	r0, [r7, #0]
    48ca:	2300      	movs	r3, #0
    48cc:	2208      	movs	r2, #8
    48ce:	4c35      	ldr	r4, [pc, #212]	; (49a4 <m2m_ip_cb+0x504>)
    48d0:	47a0      	blx	r4
    48d2:	1e03      	subs	r3, r0, #0
    48d4:	d160      	bne.n	4998 <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    48d6:	23dc      	movs	r3, #220	; 0xdc
    48d8:	18fb      	adds	r3, r7, r3
    48da:	2200      	movs	r2, #0
    48dc:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    48de:	23db      	movs	r3, #219	; 0xdb
    48e0:	18fb      	adds	r3, r7, r3
    48e2:	2264      	movs	r2, #100	; 0x64
    48e4:	18ba      	adds	r2, r7, r2
    48e6:	7812      	ldrb	r2, [r2, #0]
    48e8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    48ea:	23dc      	movs	r3, #220	; 0xdc
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	2264      	movs	r2, #100	; 0x64
    48f0:	18ba      	adds	r2, r7, r2
    48f2:	8892      	ldrh	r2, [r2, #4]
    48f4:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    48f6:	2364      	movs	r3, #100	; 0x64
    48f8:	18fb      	adds	r3, r7, r3
    48fa:	2202      	movs	r2, #2
    48fc:	5e9a      	ldrsh	r2, [r3, r2]
    48fe:	236e      	movs	r3, #110	; 0x6e
    4900:	18fb      	adds	r3, r7, r3
    4902:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    4904:	23db      	movs	r3, #219	; 0xdb
    4906:	18fb      	adds	r3, r7, r3
    4908:	781b      	ldrb	r3, [r3, #0]
    490a:	b25b      	sxtb	r3, r3
    490c:	4a26      	ldr	r2, [pc, #152]	; (49a8 <m2m_ip_cb+0x508>)
    490e:	011b      	lsls	r3, r3, #4
    4910:	18d3      	adds	r3, r2, r3
    4912:	3306      	adds	r3, #6
    4914:	881b      	ldrh	r3, [r3, #0]
    4916:	b29b      	uxth	r3, r3
    4918:	22dc      	movs	r2, #220	; 0xdc
    491a:	18ba      	adds	r2, r7, r2
    491c:	8812      	ldrh	r2, [r2, #0]
    491e:	429a      	cmp	r2, r3
    4920:	d13a      	bne.n	4998 <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    4922:	4b23      	ldr	r3, [pc, #140]	; (49b0 <m2m_ip_cb+0x510>)
    4924:	681b      	ldr	r3, [r3, #0]
    4926:	2b00      	cmp	r3, #0
    4928:	d036      	beq.n	4998 <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    492a:	4b21      	ldr	r3, [pc, #132]	; (49b0 <m2m_ip_cb+0x510>)
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	226e      	movs	r2, #110	; 0x6e
    4930:	18bc      	adds	r4, r7, r2
    4932:	22de      	movs	r2, #222	; 0xde
    4934:	18ba      	adds	r2, r7, r2
    4936:	7811      	ldrb	r1, [r2, #0]
    4938:	22db      	movs	r2, #219	; 0xdb
    493a:	18ba      	adds	r2, r7, r2
    493c:	2000      	movs	r0, #0
    493e:	5610      	ldrsb	r0, [r2, r0]
    4940:	0022      	movs	r2, r4
    4942:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    4944:	e028      	b.n	4998 <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    4946:	1dfb      	adds	r3, r7, #7
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	2b52      	cmp	r3, #82	; 0x52
    494c:	d125      	bne.n	499a <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    494e:	2350      	movs	r3, #80	; 0x50
    4950:	18f9      	adds	r1, r7, r3
    4952:	6838      	ldr	r0, [r7, #0]
    4954:	2301      	movs	r3, #1
    4956:	2214      	movs	r2, #20
    4958:	4c12      	ldr	r4, [pc, #72]	; (49a4 <m2m_ip_cb+0x504>)
    495a:	47a0      	blx	r4
    495c:	1e03      	subs	r3, r0, #0
    495e:	d11c      	bne.n	499a <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    4960:	2350      	movs	r3, #80	; 0x50
    4962:	18fb      	adds	r3, r7, r3
    4964:	685b      	ldr	r3, [r3, #4]
    4966:	001a      	movs	r2, r3
    4968:	4b12      	ldr	r3, [pc, #72]	; (49b4 <m2m_ip_cb+0x514>)
    496a:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    496c:	4b11      	ldr	r3, [pc, #68]	; (49b4 <m2m_ip_cb+0x514>)
    496e:	681b      	ldr	r3, [r3, #0]
    4970:	2b00      	cmp	r3, #0
    4972:	d012      	beq.n	499a <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    4974:	4b0f      	ldr	r3, [pc, #60]	; (49b4 <m2m_ip_cb+0x514>)
    4976:	681c      	ldr	r4, [r3, #0]
    4978:	2350      	movs	r3, #80	; 0x50
    497a:	18fb      	adds	r3, r7, r3
    497c:	6818      	ldr	r0, [r3, #0]
    497e:	2350      	movs	r3, #80	; 0x50
    4980:	18fb      	adds	r3, r7, r3
    4982:	6899      	ldr	r1, [r3, #8]
    4984:	2350      	movs	r3, #80	; 0x50
    4986:	18fb      	adds	r3, r7, r3
    4988:	7c1b      	ldrb	r3, [r3, #16]
    498a:	001a      	movs	r2, r3
    498c:	47a0      	blx	r4
			}
		}
	}
}
    498e:	e004      	b.n	499a <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    4990:	46c0      	nop			; (mov r8, r8)
    4992:	e002      	b.n	499a <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    4994:	46c0      	nop			; (mov r8, r8)
    4996:	e000      	b.n	499a <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    4998:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    499a:	46c0      	nop			; (mov r8, r8)
    499c:	46bd      	mov	sp, r7
    499e:	b039      	add	sp, #228	; 0xe4
    49a0:	bd90      	pop	{r4, r7, pc}
    49a2:	46c0      	nop			; (mov r8, r8)
    49a4:	000013a5 	.word	0x000013a5
    49a8:	20004480 	.word	0x20004480
    49ac:	000042d5 	.word	0x000042d5
    49b0:	20004530 	.word	0x20004530
    49b4:	20004534 	.word	0x20004534

000049b8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    49bc:	4b0c      	ldr	r3, [pc, #48]	; (49f0 <socketInit+0x38>)
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	b2db      	uxtb	r3, r3
    49c2:	2b00      	cmp	r3, #0
    49c4:	d110      	bne.n	49e8 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    49c6:	4b0b      	ldr	r3, [pc, #44]	; (49f4 <socketInit+0x3c>)
    49c8:	22b0      	movs	r2, #176	; 0xb0
    49ca:	2100      	movs	r1, #0
    49cc:	0018      	movs	r0, r3
    49ce:	4b0a      	ldr	r3, [pc, #40]	; (49f8 <socketInit+0x40>)
    49d0:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    49d2:	4b0a      	ldr	r3, [pc, #40]	; (49fc <socketInit+0x44>)
    49d4:	0019      	movs	r1, r3
    49d6:	2002      	movs	r0, #2
    49d8:	4b09      	ldr	r3, [pc, #36]	; (4a00 <socketInit+0x48>)
    49da:	4798      	blx	r3
		gbSocketInit=1;
    49dc:	4b04      	ldr	r3, [pc, #16]	; (49f0 <socketInit+0x38>)
    49de:	2201      	movs	r2, #1
    49e0:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    49e2:	4b08      	ldr	r3, [pc, #32]	; (4a04 <socketInit+0x4c>)
    49e4:	2200      	movs	r2, #0
    49e6:	801a      	strh	r2, [r3, #0]
	}
}
    49e8:	46c0      	nop			; (mov r8, r8)
    49ea:	46bd      	mov	sp, r7
    49ec:	bd80      	pop	{r7, pc}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	200000e0 	.word	0x200000e0
    49f4:	20004480 	.word	0x20004480
    49f8:	00000c8d 	.word	0x00000c8d
    49fc:	000044a1 	.word	0x000044a1
    4a00:	0000159d 	.word	0x0000159d
    4a04:	200000de 	.word	0x200000de

00004a08 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    4a08:	b580      	push	{r7, lr}
    4a0a:	b082      	sub	sp, #8
    4a0c:	af00      	add	r7, sp, #0
    4a0e:	6078      	str	r0, [r7, #4]
    4a10:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    4a12:	4b05      	ldr	r3, [pc, #20]	; (4a28 <registerSocketCallback+0x20>)
    4a14:	687a      	ldr	r2, [r7, #4]
    4a16:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    4a18:	4b04      	ldr	r3, [pc, #16]	; (4a2c <registerSocketCallback+0x24>)
    4a1a:	683a      	ldr	r2, [r7, #0]
    4a1c:	601a      	str	r2, [r3, #0]
}
    4a1e:	46c0      	nop			; (mov r8, r8)
    4a20:	46bd      	mov	sp, r7
    4a22:	b002      	add	sp, #8
    4a24:	bd80      	pop	{r7, pc}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	20004530 	.word	0x20004530
    4a2c:	20004538 	.word	0x20004538

00004a30 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    4a30:	b590      	push	{r4, r7, lr}
    4a32:	b08b      	sub	sp, #44	; 0x2c
    4a34:	af04      	add	r7, sp, #16
    4a36:	0004      	movs	r4, r0
    4a38:	0008      	movs	r0, r1
    4a3a:	0011      	movs	r1, r2
    4a3c:	1dbb      	adds	r3, r7, #6
    4a3e:	1c22      	adds	r2, r4, #0
    4a40:	801a      	strh	r2, [r3, #0]
    4a42:	1d7b      	adds	r3, r7, #5
    4a44:	1c02      	adds	r2, r0, #0
    4a46:	701a      	strb	r2, [r3, #0]
    4a48:	1d3b      	adds	r3, r7, #4
    4a4a:	1c0a      	adds	r2, r1, #0
    4a4c:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    4a4e:	2317      	movs	r3, #23
    4a50:	18fb      	adds	r3, r7, r3
    4a52:	22ff      	movs	r2, #255	; 0xff
    4a54:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    4a56:	2315      	movs	r3, #21
    4a58:	18fb      	adds	r3, r7, r3
    4a5a:	220b      	movs	r2, #11
    4a5c:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    4a5e:	1dbb      	adds	r3, r7, #6
    4a60:	881b      	ldrh	r3, [r3, #0]
    4a62:	2b02      	cmp	r3, #2
    4a64:	d000      	beq.n	4a68 <socket+0x38>
    4a66:	e07e      	b.n	4b66 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    4a68:	1d7b      	adds	r3, r7, #5
    4a6a:	781b      	ldrb	r3, [r3, #0]
    4a6c:	2b01      	cmp	r3, #1
    4a6e:	d108      	bne.n	4a82 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    4a70:	2315      	movs	r3, #21
    4a72:	18fb      	adds	r3, r7, r3
    4a74:	2207      	movs	r2, #7
    4a76:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    4a78:	2316      	movs	r3, #22
    4a7a:	18fb      	adds	r3, r7, r3
    4a7c:	2200      	movs	r2, #0
    4a7e:	701a      	strb	r2, [r3, #0]
    4a80:	e067      	b.n	4b52 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    4a82:	1d7b      	adds	r3, r7, #5
    4a84:	781b      	ldrb	r3, [r3, #0]
    4a86:	2b02      	cmp	r3, #2
    4a88:	d108      	bne.n	4a9c <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    4a8a:	2315      	movs	r3, #21
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	220b      	movs	r2, #11
    4a90:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    4a92:	2316      	movs	r3, #22
    4a94:	18fb      	adds	r3, r7, r3
    4a96:	2207      	movs	r2, #7
    4a98:	701a      	strb	r2, [r3, #0]
    4a9a:	e05a      	b.n	4b52 <socket+0x122>
		}
		else
			return sock;
    4a9c:	2317      	movs	r3, #23
    4a9e:	18fb      	adds	r3, r7, r3
    4aa0:	781b      	ldrb	r3, [r3, #0]
    4aa2:	b25b      	sxtb	r3, r3
    4aa4:	e063      	b.n	4b6e <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    4aa6:	2316      	movs	r3, #22
    4aa8:	18fb      	adds	r3, r7, r3
    4aaa:	781b      	ldrb	r3, [r3, #0]
    4aac:	011a      	lsls	r2, r3, #4
    4aae:	4b32      	ldr	r3, [pc, #200]	; (4b78 <socket+0x148>)
    4ab0:	18d3      	adds	r3, r2, r3
    4ab2:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    4ab4:	693b      	ldr	r3, [r7, #16]
    4ab6:	7a9b      	ldrb	r3, [r3, #10]
    4ab8:	b2db      	uxtb	r3, r3
    4aba:	2b00      	cmp	r3, #0
    4abc:	d142      	bne.n	4b44 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    4abe:	693b      	ldr	r3, [r7, #16]
    4ac0:	2210      	movs	r2, #16
    4ac2:	2100      	movs	r1, #0
    4ac4:	0018      	movs	r0, r3
    4ac6:	4b2d      	ldr	r3, [pc, #180]	; (4b7c <socket+0x14c>)
    4ac8:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    4aca:	693b      	ldr	r3, [r7, #16]
    4acc:	2201      	movs	r2, #1
    4ace:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    4ad0:	4b2b      	ldr	r3, [pc, #172]	; (4b80 <socket+0x150>)
    4ad2:	881b      	ldrh	r3, [r3, #0]
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	3301      	adds	r3, #1
    4ad8:	b29a      	uxth	r2, r3
    4ada:	4b29      	ldr	r3, [pc, #164]	; (4b80 <socket+0x150>)
    4adc:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    4ade:	4b28      	ldr	r3, [pc, #160]	; (4b80 <socket+0x150>)
    4ae0:	881b      	ldrh	r3, [r3, #0]
    4ae2:	b29b      	uxth	r3, r3
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	d106      	bne.n	4af6 <socket+0xc6>
					++gu16SessionID;
    4ae8:	4b25      	ldr	r3, [pc, #148]	; (4b80 <socket+0x150>)
    4aea:	881b      	ldrh	r3, [r3, #0]
    4aec:	b29b      	uxth	r3, r3
    4aee:	3301      	adds	r3, #1
    4af0:	b29a      	uxth	r2, r3
    4af2:	4b23      	ldr	r3, [pc, #140]	; (4b80 <socket+0x150>)
    4af4:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    4af6:	4b22      	ldr	r3, [pc, #136]	; (4b80 <socket+0x150>)
    4af8:	881b      	ldrh	r3, [r3, #0]
    4afa:	b29a      	uxth	r2, r3
    4afc:	693b      	ldr	r3, [r7, #16]
    4afe:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    4b00:	2317      	movs	r3, #23
    4b02:	18fb      	adds	r3, r7, r3
    4b04:	2216      	movs	r2, #22
    4b06:	18ba      	adds	r2, r7, r2
    4b08:	7812      	ldrb	r2, [r2, #0]
    4b0a:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    4b0c:	1d3b      	adds	r3, r7, #4
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	2201      	movs	r2, #1
    4b12:	4013      	ands	r3, r2
    4b14:	d026      	beq.n	4b64 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    4b16:	230c      	movs	r3, #12
    4b18:	18fb      	adds	r3, r7, r3
    4b1a:	2217      	movs	r2, #23
    4b1c:	18ba      	adds	r2, r7, r2
    4b1e:	7812      	ldrb	r2, [r2, #0]
    4b20:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    4b22:	693b      	ldr	r3, [r7, #16]
    4b24:	2221      	movs	r2, #33	; 0x21
    4b26:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    4b28:	230c      	movs	r3, #12
    4b2a:	18fa      	adds	r2, r7, r3
    4b2c:	2300      	movs	r3, #0
    4b2e:	9302      	str	r3, [sp, #8]
    4b30:	2300      	movs	r3, #0
    4b32:	9301      	str	r3, [sp, #4]
    4b34:	2300      	movs	r3, #0
    4b36:	9300      	str	r3, [sp, #0]
    4b38:	2304      	movs	r3, #4
    4b3a:	2150      	movs	r1, #80	; 0x50
    4b3c:	2002      	movs	r0, #2
    4b3e:	4c11      	ldr	r4, [pc, #68]	; (4b84 <socket+0x154>)
    4b40:	47a0      	blx	r4
				}
				break;
    4b42:	e00f      	b.n	4b64 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    4b44:	2316      	movs	r3, #22
    4b46:	18fb      	adds	r3, r7, r3
    4b48:	781a      	ldrb	r2, [r3, #0]
    4b4a:	2316      	movs	r3, #22
    4b4c:	18fb      	adds	r3, r7, r3
    4b4e:	3201      	adds	r2, #1
    4b50:	701a      	strb	r2, [r3, #0]
    4b52:	2316      	movs	r3, #22
    4b54:	18fa      	adds	r2, r7, r3
    4b56:	2315      	movs	r3, #21
    4b58:	18fb      	adds	r3, r7, r3
    4b5a:	7812      	ldrb	r2, [r2, #0]
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	429a      	cmp	r2, r3
    4b60:	d3a1      	bcc.n	4aa6 <socket+0x76>
    4b62:	e000      	b.n	4b66 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    4b64:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    4b66:	2317      	movs	r3, #23
    4b68:	18fb      	adds	r3, r7, r3
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	b25b      	sxtb	r3, r3
}
    4b6e:	0018      	movs	r0, r3
    4b70:	46bd      	mov	sp, r7
    4b72:	b007      	add	sp, #28
    4b74:	bd90      	pop	{r4, r7, pc}
    4b76:	46c0      	nop			; (mov r8, r8)
    4b78:	20004480 	.word	0x20004480
    4b7c:	00000c8d 	.word	0x00000c8d
    4b80:	200000de 	.word	0x200000de
    4b84:	00001069 	.word	0x00001069

00004b88 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    4b88:	b5b0      	push	{r4, r5, r7, lr}
    4b8a:	b08a      	sub	sp, #40	; 0x28
    4b8c:	af04      	add	r7, sp, #16
    4b8e:	6039      	str	r1, [r7, #0]
    4b90:	0011      	movs	r1, r2
    4b92:	1dfb      	adds	r3, r7, #7
    4b94:	1c02      	adds	r2, r0, #0
    4b96:	701a      	strb	r2, [r3, #0]
    4b98:	1dbb      	adds	r3, r7, #6
    4b9a:	1c0a      	adds	r2, r1, #0
    4b9c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4b9e:	2317      	movs	r3, #23
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	22fa      	movs	r2, #250	; 0xfa
    4ba4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    4ba6:	1dfb      	adds	r3, r7, #7
    4ba8:	781b      	ldrb	r3, [r3, #0]
    4baa:	2b7f      	cmp	r3, #127	; 0x7f
    4bac:	d867      	bhi.n	4c7e <connect+0xf6>
    4bae:	683b      	ldr	r3, [r7, #0]
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d064      	beq.n	4c7e <connect+0xf6>
    4bb4:	1dfb      	adds	r3, r7, #7
    4bb6:	781b      	ldrb	r3, [r3, #0]
    4bb8:	b25b      	sxtb	r3, r3
    4bba:	4a35      	ldr	r2, [pc, #212]	; (4c90 <connect+0x108>)
    4bbc:	011b      	lsls	r3, r3, #4
    4bbe:	18d3      	adds	r3, r2, r3
    4bc0:	330a      	adds	r3, #10
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	2b01      	cmp	r3, #1
    4bc8:	d159      	bne.n	4c7e <connect+0xf6>
    4bca:	1dbb      	adds	r3, r7, #6
    4bcc:	781b      	ldrb	r3, [r3, #0]
    4bce:	2b00      	cmp	r3, #0
    4bd0:	d055      	beq.n	4c7e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    4bd2:	2316      	movs	r3, #22
    4bd4:	18fb      	adds	r3, r7, r3
    4bd6:	2244      	movs	r2, #68	; 0x44
    4bd8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4bda:	1dfb      	adds	r3, r7, #7
    4bdc:	781b      	ldrb	r3, [r3, #0]
    4bde:	b25b      	sxtb	r3, r3
    4be0:	4a2b      	ldr	r2, [pc, #172]	; (4c90 <connect+0x108>)
    4be2:	011b      	lsls	r3, r3, #4
    4be4:	18d3      	adds	r3, r2, r3
    4be6:	330b      	adds	r3, #11
    4be8:	781b      	ldrb	r3, [r3, #0]
    4bea:	b2db      	uxtb	r3, r3
    4bec:	001a      	movs	r2, r3
    4bee:	2301      	movs	r3, #1
    4bf0:	4013      	ands	r3, r2
    4bf2:	d00f      	beq.n	4c14 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    4bf4:	2316      	movs	r3, #22
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	224b      	movs	r2, #75	; 0x4b
    4bfa:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    4bfc:	1dfb      	adds	r3, r7, #7
    4bfe:	781b      	ldrb	r3, [r3, #0]
    4c00:	b25b      	sxtb	r3, r3
    4c02:	4a23      	ldr	r2, [pc, #140]	; (4c90 <connect+0x108>)
    4c04:	011b      	lsls	r3, r3, #4
    4c06:	18d3      	adds	r3, r2, r3
    4c08:	330b      	adds	r3, #11
    4c0a:	781b      	ldrb	r3, [r3, #0]
    4c0c:	b2da      	uxtb	r2, r3
    4c0e:	2308      	movs	r3, #8
    4c10:	18fb      	adds	r3, r7, r3
    4c12:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    4c14:	2308      	movs	r3, #8
    4c16:	18fb      	adds	r3, r7, r3
    4c18:	1dfa      	adds	r2, r7, #7
    4c1a:	7812      	ldrb	r2, [r2, #0]
    4c1c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4c1e:	6839      	ldr	r1, [r7, #0]
    4c20:	2308      	movs	r3, #8
    4c22:	18fb      	adds	r3, r7, r3
    4c24:	2208      	movs	r2, #8
    4c26:	0018      	movs	r0, r3
    4c28:	4b1a      	ldr	r3, [pc, #104]	; (4c94 <connect+0x10c>)
    4c2a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    4c2c:	1dfb      	adds	r3, r7, #7
    4c2e:	781b      	ldrb	r3, [r3, #0]
    4c30:	b25b      	sxtb	r3, r3
    4c32:	4a17      	ldr	r2, [pc, #92]	; (4c90 <connect+0x108>)
    4c34:	011b      	lsls	r3, r3, #4
    4c36:	18d3      	adds	r3, r2, r3
    4c38:	3306      	adds	r3, #6
    4c3a:	881b      	ldrh	r3, [r3, #0]
    4c3c:	b29a      	uxth	r2, r3
    4c3e:	2308      	movs	r3, #8
    4c40:	18fb      	adds	r3, r7, r3
    4c42:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    4c44:	2317      	movs	r3, #23
    4c46:	18fc      	adds	r4, r7, r3
    4c48:	2308      	movs	r3, #8
    4c4a:	18fa      	adds	r2, r7, r3
    4c4c:	2316      	movs	r3, #22
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	7819      	ldrb	r1, [r3, #0]
    4c52:	2300      	movs	r3, #0
    4c54:	9302      	str	r3, [sp, #8]
    4c56:	2300      	movs	r3, #0
    4c58:	9301      	str	r3, [sp, #4]
    4c5a:	2300      	movs	r3, #0
    4c5c:	9300      	str	r3, [sp, #0]
    4c5e:	230c      	movs	r3, #12
    4c60:	2002      	movs	r0, #2
    4c62:	4d0d      	ldr	r5, [pc, #52]	; (4c98 <connect+0x110>)
    4c64:	47a8      	blx	r5
    4c66:	0003      	movs	r3, r0
    4c68:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4c6a:	2317      	movs	r3, #23
    4c6c:	18fb      	adds	r3, r7, r3
    4c6e:	781b      	ldrb	r3, [r3, #0]
    4c70:	b25b      	sxtb	r3, r3
    4c72:	2b00      	cmp	r3, #0
    4c74:	d003      	beq.n	4c7e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    4c76:	2317      	movs	r3, #23
    4c78:	18fb      	adds	r3, r7, r3
    4c7a:	22f7      	movs	r2, #247	; 0xf7
    4c7c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    4c7e:	2317      	movs	r3, #23
    4c80:	18fb      	adds	r3, r7, r3
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	b25b      	sxtb	r3, r3
}
    4c86:	0018      	movs	r0, r3
    4c88:	46bd      	mov	sp, r7
    4c8a:	b006      	add	sp, #24
    4c8c:	bdb0      	pop	{r4, r5, r7, pc}
    4c8e:	46c0      	nop			; (mov r8, r8)
    4c90:	20004480 	.word	0x20004480
    4c94:	00000c51 	.word	0x00000c51
    4c98:	00001069 	.word	0x00001069

00004c9c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    4c9c:	b590      	push	{r4, r7, lr}
    4c9e:	b08f      	sub	sp, #60	; 0x3c
    4ca0:	af04      	add	r7, sp, #16
    4ca2:	0004      	movs	r4, r0
    4ca4:	60b9      	str	r1, [r7, #8]
    4ca6:	0010      	movs	r0, r2
    4ca8:	0019      	movs	r1, r3
    4caa:	230f      	movs	r3, #15
    4cac:	18fb      	adds	r3, r7, r3
    4cae:	1c22      	adds	r2, r4, #0
    4cb0:	701a      	strb	r2, [r3, #0]
    4cb2:	230c      	movs	r3, #12
    4cb4:	18fb      	adds	r3, r7, r3
    4cb6:	1c02      	adds	r2, r0, #0
    4cb8:	801a      	strh	r2, [r3, #0]
    4cba:	1dbb      	adds	r3, r7, #6
    4cbc:	1c0a      	adds	r2, r1, #0
    4cbe:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4cc0:	2326      	movs	r3, #38	; 0x26
    4cc2:	18fb      	adds	r3, r7, r3
    4cc4:	2206      	movs	r2, #6
    4cc6:	4252      	negs	r2, r2
    4cc8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    4cca:	230f      	movs	r3, #15
    4ccc:	18fb      	adds	r3, r7, r3
    4cce:	781b      	ldrb	r3, [r3, #0]
    4cd0:	2b7f      	cmp	r3, #127	; 0x7f
    4cd2:	d900      	bls.n	4cd6 <send+0x3a>
    4cd4:	e087      	b.n	4de6 <send+0x14a>
    4cd6:	68bb      	ldr	r3, [r7, #8]
    4cd8:	2b00      	cmp	r3, #0
    4cda:	d100      	bne.n	4cde <send+0x42>
    4cdc:	e083      	b.n	4de6 <send+0x14a>
    4cde:	230c      	movs	r3, #12
    4ce0:	18fb      	adds	r3, r7, r3
    4ce2:	881a      	ldrh	r2, [r3, #0]
    4ce4:	23af      	movs	r3, #175	; 0xaf
    4ce6:	00db      	lsls	r3, r3, #3
    4ce8:	429a      	cmp	r2, r3
    4cea:	d900      	bls.n	4cee <send+0x52>
    4cec:	e07b      	b.n	4de6 <send+0x14a>
    4cee:	230f      	movs	r3, #15
    4cf0:	18fb      	adds	r3, r7, r3
    4cf2:	781b      	ldrb	r3, [r3, #0]
    4cf4:	b25b      	sxtb	r3, r3
    4cf6:	4a40      	ldr	r2, [pc, #256]	; (4df8 <send+0x15c>)
    4cf8:	011b      	lsls	r3, r3, #4
    4cfa:	18d3      	adds	r3, r2, r3
    4cfc:	330a      	adds	r3, #10
    4cfe:	781b      	ldrb	r3, [r3, #0]
    4d00:	b2db      	uxtb	r3, r3
    4d02:	2b01      	cmp	r3, #1
    4d04:	d16f      	bne.n	4de6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    4d06:	2323      	movs	r3, #35	; 0x23
    4d08:	18fb      	adds	r3, r7, r3
    4d0a:	2245      	movs	r2, #69	; 0x45
    4d0c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    4d0e:	2324      	movs	r3, #36	; 0x24
    4d10:	18fb      	adds	r3, r7, r3
    4d12:	2250      	movs	r2, #80	; 0x50
    4d14:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    4d16:	2310      	movs	r3, #16
    4d18:	18fb      	adds	r3, r7, r3
    4d1a:	220f      	movs	r2, #15
    4d1c:	18ba      	adds	r2, r7, r2
    4d1e:	7812      	ldrb	r2, [r2, #0]
    4d20:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    4d22:	2310      	movs	r3, #16
    4d24:	18fb      	adds	r3, r7, r3
    4d26:	220c      	movs	r2, #12
    4d28:	18ba      	adds	r2, r7, r2
    4d2a:	8812      	ldrh	r2, [r2, #0]
    4d2c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    4d2e:	230f      	movs	r3, #15
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	b25b      	sxtb	r3, r3
    4d36:	4a30      	ldr	r2, [pc, #192]	; (4df8 <send+0x15c>)
    4d38:	011b      	lsls	r3, r3, #4
    4d3a:	18d3      	adds	r3, r2, r3
    4d3c:	3306      	adds	r3, #6
    4d3e:	881b      	ldrh	r3, [r3, #0]
    4d40:	b29a      	uxth	r2, r3
    4d42:	2310      	movs	r3, #16
    4d44:	18fb      	adds	r3, r7, r3
    4d46:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    4d48:	230f      	movs	r3, #15
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	b25b      	sxtb	r3, r3
    4d50:	2b06      	cmp	r3, #6
    4d52:	dd03      	ble.n	4d5c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    4d54:	2324      	movs	r3, #36	; 0x24
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	2244      	movs	r2, #68	; 0x44
    4d5a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4d5c:	230f      	movs	r3, #15
    4d5e:	18fb      	adds	r3, r7, r3
    4d60:	781b      	ldrb	r3, [r3, #0]
    4d62:	b25b      	sxtb	r3, r3
    4d64:	4a24      	ldr	r2, [pc, #144]	; (4df8 <send+0x15c>)
    4d66:	011b      	lsls	r3, r3, #4
    4d68:	18d3      	adds	r3, r2, r3
    4d6a:	330b      	adds	r3, #11
    4d6c:	781b      	ldrb	r3, [r3, #0]
    4d6e:	b2db      	uxtb	r3, r3
    4d70:	001a      	movs	r2, r3
    4d72:	2301      	movs	r3, #1
    4d74:	4013      	ands	r3, r2
    4d76:	d00f      	beq.n	4d98 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    4d78:	2323      	movs	r3, #35	; 0x23
    4d7a:	18fb      	adds	r3, r7, r3
    4d7c:	224c      	movs	r2, #76	; 0x4c
    4d7e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    4d80:	230f      	movs	r3, #15
    4d82:	18fb      	adds	r3, r7, r3
    4d84:	2200      	movs	r2, #0
    4d86:	569a      	ldrsb	r2, [r3, r2]
    4d88:	2324      	movs	r3, #36	; 0x24
    4d8a:	18fb      	adds	r3, r7, r3
    4d8c:	491a      	ldr	r1, [pc, #104]	; (4df8 <send+0x15c>)
    4d8e:	0112      	lsls	r2, r2, #4
    4d90:	188a      	adds	r2, r1, r2
    4d92:	3208      	adds	r2, #8
    4d94:	8812      	ldrh	r2, [r2, #0]
    4d96:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    4d98:	2323      	movs	r3, #35	; 0x23
    4d9a:	18fb      	adds	r3, r7, r3
    4d9c:	781b      	ldrb	r3, [r3, #0]
    4d9e:	2280      	movs	r2, #128	; 0x80
    4da0:	4252      	negs	r2, r2
    4da2:	4313      	orrs	r3, r2
    4da4:	b2d9      	uxtb	r1, r3
    4da6:	2310      	movs	r3, #16
    4da8:	18fa      	adds	r2, r7, r3
    4daa:	2324      	movs	r3, #36	; 0x24
    4dac:	18fb      	adds	r3, r7, r3
    4dae:	881b      	ldrh	r3, [r3, #0]
    4db0:	9302      	str	r3, [sp, #8]
    4db2:	230c      	movs	r3, #12
    4db4:	18fb      	adds	r3, r7, r3
    4db6:	881b      	ldrh	r3, [r3, #0]
    4db8:	9301      	str	r3, [sp, #4]
    4dba:	68bb      	ldr	r3, [r7, #8]
    4dbc:	9300      	str	r3, [sp, #0]
    4dbe:	2310      	movs	r3, #16
    4dc0:	2002      	movs	r0, #2
    4dc2:	4c0e      	ldr	r4, [pc, #56]	; (4dfc <send+0x160>)
    4dc4:	47a0      	blx	r4
    4dc6:	0003      	movs	r3, r0
    4dc8:	001a      	movs	r2, r3
    4dca:	2326      	movs	r3, #38	; 0x26
    4dcc:	18fb      	adds	r3, r7, r3
    4dce:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    4dd0:	2326      	movs	r3, #38	; 0x26
    4dd2:	18fb      	adds	r3, r7, r3
    4dd4:	2200      	movs	r2, #0
    4dd6:	5e9b      	ldrsh	r3, [r3, r2]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d004      	beq.n	4de6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    4ddc:	2326      	movs	r3, #38	; 0x26
    4dde:	18fb      	adds	r3, r7, r3
    4de0:	220e      	movs	r2, #14
    4de2:	4252      	negs	r2, r2
    4de4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    4de6:	2326      	movs	r3, #38	; 0x26
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	2200      	movs	r2, #0
    4dec:	5e9b      	ldrsh	r3, [r3, r2]
}
    4dee:	0018      	movs	r0, r3
    4df0:	46bd      	mov	sp, r7
    4df2:	b00b      	add	sp, #44	; 0x2c
    4df4:	bd90      	pop	{r4, r7, pc}
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	20004480 	.word	0x20004480
    4dfc:	00001069 	.word	0x00001069

00004e00 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4e00:	b590      	push	{r4, r7, lr}
    4e02:	b08d      	sub	sp, #52	; 0x34
    4e04:	af04      	add	r7, sp, #16
    4e06:	60b9      	str	r1, [r7, #8]
    4e08:	0011      	movs	r1, r2
    4e0a:	607b      	str	r3, [r7, #4]
    4e0c:	230f      	movs	r3, #15
    4e0e:	18fb      	adds	r3, r7, r3
    4e10:	1c02      	adds	r2, r0, #0
    4e12:	701a      	strb	r2, [r3, #0]
    4e14:	230c      	movs	r3, #12
    4e16:	18fb      	adds	r3, r7, r3
    4e18:	1c0a      	adds	r2, r1, #0
    4e1a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4e1c:	231e      	movs	r3, #30
    4e1e:	18fb      	adds	r3, r7, r3
    4e20:	2206      	movs	r2, #6
    4e22:	4252      	negs	r2, r2
    4e24:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4e26:	230f      	movs	r3, #15
    4e28:	18fb      	adds	r3, r7, r3
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	2b7f      	cmp	r3, #127	; 0x7f
    4e2e:	d900      	bls.n	4e32 <recv+0x32>
    4e30:	e099      	b.n	4f66 <recv+0x166>
    4e32:	68bb      	ldr	r3, [r7, #8]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d100      	bne.n	4e3a <recv+0x3a>
    4e38:	e095      	b.n	4f66 <recv+0x166>
    4e3a:	230c      	movs	r3, #12
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	881b      	ldrh	r3, [r3, #0]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d100      	bne.n	4e46 <recv+0x46>
    4e44:	e08f      	b.n	4f66 <recv+0x166>
    4e46:	230f      	movs	r3, #15
    4e48:	18fb      	adds	r3, r7, r3
    4e4a:	781b      	ldrb	r3, [r3, #0]
    4e4c:	b25b      	sxtb	r3, r3
    4e4e:	4a4a      	ldr	r2, [pc, #296]	; (4f78 <recv+0x178>)
    4e50:	011b      	lsls	r3, r3, #4
    4e52:	18d3      	adds	r3, r2, r3
    4e54:	330a      	adds	r3, #10
    4e56:	781b      	ldrb	r3, [r3, #0]
    4e58:	b2db      	uxtb	r3, r3
    4e5a:	2b01      	cmp	r3, #1
    4e5c:	d000      	beq.n	4e60 <recv+0x60>
    4e5e:	e082      	b.n	4f66 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    4e60:	231e      	movs	r3, #30
    4e62:	18fb      	adds	r3, r7, r3
    4e64:	2200      	movs	r2, #0
    4e66:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    4e68:	230f      	movs	r3, #15
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	2200      	movs	r2, #0
    4e6e:	569a      	ldrsb	r2, [r3, r2]
    4e70:	4b41      	ldr	r3, [pc, #260]	; (4f78 <recv+0x178>)
    4e72:	0112      	lsls	r2, r2, #4
    4e74:	68b9      	ldr	r1, [r7, #8]
    4e76:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4e78:	230f      	movs	r3, #15
    4e7a:	18fb      	adds	r3, r7, r3
    4e7c:	781b      	ldrb	r3, [r3, #0]
    4e7e:	b25b      	sxtb	r3, r3
    4e80:	4a3d      	ldr	r2, [pc, #244]	; (4f78 <recv+0x178>)
    4e82:	011b      	lsls	r3, r3, #4
    4e84:	18d3      	adds	r3, r2, r3
    4e86:	3304      	adds	r3, #4
    4e88:	220c      	movs	r2, #12
    4e8a:	18ba      	adds	r2, r7, r2
    4e8c:	8812      	ldrh	r2, [r2, #0]
    4e8e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    4e90:	230f      	movs	r3, #15
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	b25b      	sxtb	r3, r3
    4e98:	4a37      	ldr	r2, [pc, #220]	; (4f78 <recv+0x178>)
    4e9a:	011b      	lsls	r3, r3, #4
    4e9c:	18d3      	adds	r3, r2, r3
    4e9e:	330c      	adds	r3, #12
    4ea0:	781b      	ldrb	r3, [r3, #0]
    4ea2:	b2db      	uxtb	r3, r3
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d15e      	bne.n	4f66 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    4ea8:	231d      	movs	r3, #29
    4eaa:	18fb      	adds	r3, r7, r3
    4eac:	2246      	movs	r2, #70	; 0x46
    4eae:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    4eb0:	230f      	movs	r3, #15
    4eb2:	18fb      	adds	r3, r7, r3
    4eb4:	781b      	ldrb	r3, [r3, #0]
    4eb6:	b25b      	sxtb	r3, r3
    4eb8:	4a2f      	ldr	r2, [pc, #188]	; (4f78 <recv+0x178>)
    4eba:	011b      	lsls	r3, r3, #4
    4ebc:	18d3      	adds	r3, r2, r3
    4ebe:	330c      	adds	r3, #12
    4ec0:	2201      	movs	r2, #1
    4ec2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4ec4:	230f      	movs	r3, #15
    4ec6:	18fb      	adds	r3, r7, r3
    4ec8:	781b      	ldrb	r3, [r3, #0]
    4eca:	b25b      	sxtb	r3, r3
    4ecc:	4a2a      	ldr	r2, [pc, #168]	; (4f78 <recv+0x178>)
    4ece:	011b      	lsls	r3, r3, #4
    4ed0:	18d3      	adds	r3, r2, r3
    4ed2:	330b      	adds	r3, #11
    4ed4:	781b      	ldrb	r3, [r3, #0]
    4ed6:	b2db      	uxtb	r3, r3
    4ed8:	001a      	movs	r2, r3
    4eda:	2301      	movs	r3, #1
    4edc:	4013      	ands	r3, r2
    4ede:	d003      	beq.n	4ee8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    4ee0:	231d      	movs	r3, #29
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	224d      	movs	r2, #77	; 0x4d
    4ee6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	2b00      	cmp	r3, #0
    4eec:	d105      	bne.n	4efa <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    4eee:	2314      	movs	r3, #20
    4ef0:	18fb      	adds	r3, r7, r3
    4ef2:	2201      	movs	r2, #1
    4ef4:	4252      	negs	r2, r2
    4ef6:	601a      	str	r2, [r3, #0]
    4ef8:	e003      	b.n	4f02 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    4efa:	2314      	movs	r3, #20
    4efc:	18fb      	adds	r3, r7, r3
    4efe:	687a      	ldr	r2, [r7, #4]
    4f00:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    4f02:	2314      	movs	r3, #20
    4f04:	18fb      	adds	r3, r7, r3
    4f06:	220f      	movs	r2, #15
    4f08:	18ba      	adds	r2, r7, r2
    4f0a:	7812      	ldrb	r2, [r2, #0]
    4f0c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    4f0e:	230f      	movs	r3, #15
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	b25b      	sxtb	r3, r3
    4f16:	4a18      	ldr	r2, [pc, #96]	; (4f78 <recv+0x178>)
    4f18:	011b      	lsls	r3, r3, #4
    4f1a:	18d3      	adds	r3, r2, r3
    4f1c:	3306      	adds	r3, #6
    4f1e:	881b      	ldrh	r3, [r3, #0]
    4f20:	b29a      	uxth	r2, r3
    4f22:	2314      	movs	r3, #20
    4f24:	18fb      	adds	r3, r7, r3
    4f26:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4f28:	2314      	movs	r3, #20
    4f2a:	18fa      	adds	r2, r7, r3
    4f2c:	231d      	movs	r3, #29
    4f2e:	18fb      	adds	r3, r7, r3
    4f30:	7819      	ldrb	r1, [r3, #0]
    4f32:	2300      	movs	r3, #0
    4f34:	9302      	str	r3, [sp, #8]
    4f36:	2300      	movs	r3, #0
    4f38:	9301      	str	r3, [sp, #4]
    4f3a:	2300      	movs	r3, #0
    4f3c:	9300      	str	r3, [sp, #0]
    4f3e:	2308      	movs	r3, #8
    4f40:	2002      	movs	r0, #2
    4f42:	4c0e      	ldr	r4, [pc, #56]	; (4f7c <recv+0x17c>)
    4f44:	47a0      	blx	r4
    4f46:	0003      	movs	r3, r0
    4f48:	001a      	movs	r2, r3
    4f4a:	231e      	movs	r3, #30
    4f4c:	18fb      	adds	r3, r7, r3
    4f4e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4f50:	231e      	movs	r3, #30
    4f52:	18fb      	adds	r3, r7, r3
    4f54:	2200      	movs	r2, #0
    4f56:	5e9b      	ldrsh	r3, [r3, r2]
    4f58:	2b00      	cmp	r3, #0
    4f5a:	d004      	beq.n	4f66 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    4f5c:	231e      	movs	r3, #30
    4f5e:	18fb      	adds	r3, r7, r3
    4f60:	220e      	movs	r2, #14
    4f62:	4252      	negs	r2, r2
    4f64:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    4f66:	231e      	movs	r3, #30
    4f68:	18fb      	adds	r3, r7, r3
    4f6a:	2200      	movs	r2, #0
    4f6c:	5e9b      	ldrsh	r3, [r3, r2]
}
    4f6e:	0018      	movs	r0, r3
    4f70:	46bd      	mov	sp, r7
    4f72:	b009      	add	sp, #36	; 0x24
    4f74:	bd90      	pop	{r4, r7, pc}
    4f76:	46c0      	nop			; (mov r8, r8)
    4f78:	20004480 	.word	0x20004480
    4f7c:	00001069 	.word	0x00001069

00004f80 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    4f80:	b5b0      	push	{r4, r5, r7, lr}
    4f82:	b088      	sub	sp, #32
    4f84:	af04      	add	r7, sp, #16
    4f86:	0002      	movs	r2, r0
    4f88:	1dfb      	adds	r3, r7, #7
    4f8a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4f8c:	230f      	movs	r3, #15
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	22fa      	movs	r2, #250	; 0xfa
    4f92:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    4f94:	1dfb      	adds	r3, r7, #7
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	2b7f      	cmp	r3, #127	; 0x7f
    4f9a:	d86a      	bhi.n	5072 <close+0xf2>
    4f9c:	1dfb      	adds	r3, r7, #7
    4f9e:	781b      	ldrb	r3, [r3, #0]
    4fa0:	b25b      	sxtb	r3, r3
    4fa2:	4a38      	ldr	r2, [pc, #224]	; (5084 <close+0x104>)
    4fa4:	011b      	lsls	r3, r3, #4
    4fa6:	18d3      	adds	r3, r2, r3
    4fa8:	330a      	adds	r3, #10
    4faa:	781b      	ldrb	r3, [r3, #0]
    4fac:	b2db      	uxtb	r3, r3
    4fae:	2b01      	cmp	r3, #1
    4fb0:	d15f      	bne.n	5072 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    4fb2:	230e      	movs	r3, #14
    4fb4:	18fb      	adds	r3, r7, r3
    4fb6:	2249      	movs	r2, #73	; 0x49
    4fb8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    4fba:	2308      	movs	r3, #8
    4fbc:	18fb      	adds	r3, r7, r3
    4fbe:	1dfa      	adds	r2, r7, #7
    4fc0:	7812      	ldrb	r2, [r2, #0]
    4fc2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    4fc4:	1dfb      	adds	r3, r7, #7
    4fc6:	781b      	ldrb	r3, [r3, #0]
    4fc8:	b25b      	sxtb	r3, r3
    4fca:	4a2e      	ldr	r2, [pc, #184]	; (5084 <close+0x104>)
    4fcc:	011b      	lsls	r3, r3, #4
    4fce:	18d3      	adds	r3, r2, r3
    4fd0:	3306      	adds	r3, #6
    4fd2:	881b      	ldrh	r3, [r3, #0]
    4fd4:	b29a      	uxth	r2, r3
    4fd6:	2308      	movs	r3, #8
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    4fdc:	1dfb      	adds	r3, r7, #7
    4fde:	781b      	ldrb	r3, [r3, #0]
    4fe0:	b25b      	sxtb	r3, r3
    4fe2:	4a28      	ldr	r2, [pc, #160]	; (5084 <close+0x104>)
    4fe4:	011b      	lsls	r3, r3, #4
    4fe6:	18d3      	adds	r3, r2, r3
    4fe8:	330a      	adds	r3, #10
    4fea:	2200      	movs	r2, #0
    4fec:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    4fee:	1dfb      	adds	r3, r7, #7
    4ff0:	781b      	ldrb	r3, [r3, #0]
    4ff2:	b25b      	sxtb	r3, r3
    4ff4:	4a23      	ldr	r2, [pc, #140]	; (5084 <close+0x104>)
    4ff6:	011b      	lsls	r3, r3, #4
    4ff8:	18d3      	adds	r3, r2, r3
    4ffa:	3306      	adds	r3, #6
    4ffc:	2200      	movs	r2, #0
    4ffe:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    5000:	1dfb      	adds	r3, r7, #7
    5002:	781b      	ldrb	r3, [r3, #0]
    5004:	b25b      	sxtb	r3, r3
    5006:	4a1f      	ldr	r2, [pc, #124]	; (5084 <close+0x104>)
    5008:	011b      	lsls	r3, r3, #4
    500a:	18d3      	adds	r3, r2, r3
    500c:	330b      	adds	r3, #11
    500e:	781b      	ldrb	r3, [r3, #0]
    5010:	b2db      	uxtb	r3, r3
    5012:	001a      	movs	r2, r3
    5014:	2301      	movs	r3, #1
    5016:	4013      	ands	r3, r2
    5018:	d003      	beq.n	5022 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    501a:	230e      	movs	r3, #14
    501c:	18fb      	adds	r3, r7, r3
    501e:	224e      	movs	r2, #78	; 0x4e
    5020:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    5022:	230f      	movs	r3, #15
    5024:	18fc      	adds	r4, r7, r3
    5026:	2308      	movs	r3, #8
    5028:	18fa      	adds	r2, r7, r3
    502a:	230e      	movs	r3, #14
    502c:	18fb      	adds	r3, r7, r3
    502e:	7819      	ldrb	r1, [r3, #0]
    5030:	2300      	movs	r3, #0
    5032:	9302      	str	r3, [sp, #8]
    5034:	2300      	movs	r3, #0
    5036:	9301      	str	r3, [sp, #4]
    5038:	2300      	movs	r3, #0
    503a:	9300      	str	r3, [sp, #0]
    503c:	2304      	movs	r3, #4
    503e:	2002      	movs	r0, #2
    5040:	4d11      	ldr	r5, [pc, #68]	; (5088 <close+0x108>)
    5042:	47a8      	blx	r5
    5044:	0003      	movs	r3, r0
    5046:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    5048:	230f      	movs	r3, #15
    504a:	18fb      	adds	r3, r7, r3
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	b25b      	sxtb	r3, r3
    5050:	2b00      	cmp	r3, #0
    5052:	d003      	beq.n	505c <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    5054:	230f      	movs	r3, #15
    5056:	18fb      	adds	r3, r7, r3
    5058:	22f7      	movs	r2, #247	; 0xf7
    505a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    505c:	1dfb      	adds	r3, r7, #7
    505e:	781b      	ldrb	r3, [r3, #0]
    5060:	b25b      	sxtb	r3, r3
    5062:	011a      	lsls	r2, r3, #4
    5064:	4b07      	ldr	r3, [pc, #28]	; (5084 <close+0x104>)
    5066:	18d3      	adds	r3, r2, r3
    5068:	2210      	movs	r2, #16
    506a:	2100      	movs	r1, #0
    506c:	0018      	movs	r0, r3
    506e:	4b07      	ldr	r3, [pc, #28]	; (508c <close+0x10c>)
    5070:	4798      	blx	r3
	}
	return s8Ret;
    5072:	230f      	movs	r3, #15
    5074:	18fb      	adds	r3, r7, r3
    5076:	781b      	ldrb	r3, [r3, #0]
    5078:	b25b      	sxtb	r3, r3
}
    507a:	0018      	movs	r0, r3
    507c:	46bd      	mov	sp, r7
    507e:	b004      	add	sp, #16
    5080:	bdb0      	pop	{r4, r5, r7, pc}
    5082:	46c0      	nop			; (mov r8, r8)
    5084:	20004480 	.word	0x20004480
    5088:	00001069 	.word	0x00001069
    508c:	00000c8d 	.word	0x00000c8d

00005090 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    5090:	b5b0      	push	{r4, r5, r7, lr}
    5092:	b088      	sub	sp, #32
    5094:	af04      	add	r7, sp, #16
    5096:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    5098:	230f      	movs	r3, #15
    509a:	18fb      	adds	r3, r7, r3
    509c:	22fa      	movs	r2, #250	; 0xfa
    509e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	0018      	movs	r0, r3
    50a4:	4b19      	ldr	r3, [pc, #100]	; (510c <gethostbyname+0x7c>)
    50a6:	4798      	blx	r3
    50a8:	0003      	movs	r3, r0
    50aa:	001a      	movs	r2, r3
    50ac:	230e      	movs	r3, #14
    50ae:	18fb      	adds	r3, r7, r3
    50b0:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    50b2:	230e      	movs	r3, #14
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	781b      	ldrb	r3, [r3, #0]
    50b8:	2b40      	cmp	r3, #64	; 0x40
    50ba:	d81f      	bhi.n	50fc <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    50bc:	230e      	movs	r3, #14
    50be:	18fb      	adds	r3, r7, r3
    50c0:	781b      	ldrb	r3, [r3, #0]
    50c2:	b29b      	uxth	r3, r3
    50c4:	3301      	adds	r3, #1
    50c6:	b299      	uxth	r1, r3
    50c8:	230f      	movs	r3, #15
    50ca:	18fc      	adds	r4, r7, r3
    50cc:	687a      	ldr	r2, [r7, #4]
    50ce:	2300      	movs	r3, #0
    50d0:	9302      	str	r3, [sp, #8]
    50d2:	2300      	movs	r3, #0
    50d4:	9301      	str	r3, [sp, #4]
    50d6:	2300      	movs	r3, #0
    50d8:	9300      	str	r3, [sp, #0]
    50da:	000b      	movs	r3, r1
    50dc:	21ca      	movs	r1, #202	; 0xca
    50de:	2002      	movs	r0, #2
    50e0:	4d0b      	ldr	r5, [pc, #44]	; (5110 <gethostbyname+0x80>)
    50e2:	47a8      	blx	r5
    50e4:	0003      	movs	r3, r0
    50e6:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    50e8:	230f      	movs	r3, #15
    50ea:	18fb      	adds	r3, r7, r3
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	b25b      	sxtb	r3, r3
    50f0:	2b00      	cmp	r3, #0
    50f2:	d003      	beq.n	50fc <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    50f4:	230f      	movs	r3, #15
    50f6:	18fb      	adds	r3, r7, r3
    50f8:	22f7      	movs	r2, #247	; 0xf7
    50fa:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    50fc:	230f      	movs	r3, #15
    50fe:	18fb      	adds	r3, r7, r3
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	b25b      	sxtb	r3, r3
}
    5104:	0018      	movs	r0, r3
    5106:	46bd      	mov	sp, r7
    5108:	b004      	add	sp, #16
    510a:	bdb0      	pop	{r4, r5, r7, pc}
    510c:	00000ccd 	.word	0x00000ccd
    5110:	00001069 	.word	0x00001069

00005114 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    5114:	b580      	push	{r7, lr}
    5116:	b082      	sub	sp, #8
    5118:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    511a:	003b      	movs	r3, r7
    511c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    511e:	687b      	ldr	r3, [r7, #4]
    5120:	22b9      	movs	r2, #185	; 0xb9
    5122:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    5124:	4b13      	ldr	r3, [pc, #76]	; (5174 <spi_flash_enter_low_power_mode+0x60>)
    5126:	2100      	movs	r1, #0
    5128:	0018      	movs	r0, r3
    512a:	4b13      	ldr	r3, [pc, #76]	; (5178 <spi_flash_enter_low_power_mode+0x64>)
    512c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	781b      	ldrb	r3, [r3, #0]
    5132:	001a      	movs	r2, r3
    5134:	4b11      	ldr	r3, [pc, #68]	; (517c <spi_flash_enter_low_power_mode+0x68>)
    5136:	0011      	movs	r1, r2
    5138:	0018      	movs	r0, r3
    513a:	4b0f      	ldr	r3, [pc, #60]	; (5178 <spi_flash_enter_low_power_mode+0x64>)
    513c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    513e:	4b10      	ldr	r3, [pc, #64]	; (5180 <spi_flash_enter_low_power_mode+0x6c>)
    5140:	2101      	movs	r1, #1
    5142:	0018      	movs	r0, r3
    5144:	4b0c      	ldr	r3, [pc, #48]	; (5178 <spi_flash_enter_low_power_mode+0x64>)
    5146:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    5148:	4b0e      	ldr	r3, [pc, #56]	; (5184 <spi_flash_enter_low_power_mode+0x70>)
    514a:	2100      	movs	r1, #0
    514c:	0018      	movs	r0, r3
    514e:	4b0a      	ldr	r3, [pc, #40]	; (5178 <spi_flash_enter_low_power_mode+0x64>)
    5150:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    5152:	4b0d      	ldr	r3, [pc, #52]	; (5188 <spi_flash_enter_low_power_mode+0x74>)
    5154:	2181      	movs	r1, #129	; 0x81
    5156:	0018      	movs	r0, r3
    5158:	4b07      	ldr	r3, [pc, #28]	; (5178 <spi_flash_enter_low_power_mode+0x64>)
    515a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    515c:	46c0      	nop			; (mov r8, r8)
    515e:	4b0b      	ldr	r3, [pc, #44]	; (518c <spi_flash_enter_low_power_mode+0x78>)
    5160:	0018      	movs	r0, r3
    5162:	4b0b      	ldr	r3, [pc, #44]	; (5190 <spi_flash_enter_low_power_mode+0x7c>)
    5164:	4798      	blx	r3
    5166:	1e03      	subs	r3, r0, #0
    5168:	2b01      	cmp	r3, #1
    516a:	d1f8      	bne.n	515e <spi_flash_enter_low_power_mode+0x4a>
}
    516c:	46c0      	nop			; (mov r8, r8)
    516e:	46bd      	mov	sp, r7
    5170:	b002      	add	sp, #8
    5172:	bd80      	pop	{r7, pc}
    5174:	00010208 	.word	0x00010208
    5178:	00002b0d 	.word	0x00002b0d
    517c:	0001020c 	.word	0x0001020c
    5180:	00010214 	.word	0x00010214
    5184:	0001021c 	.word	0x0001021c
    5188:	00010204 	.word	0x00010204
    518c:	00010218 	.word	0x00010218
    5190:	00002ac9 	.word	0x00002ac9

00005194 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    5194:	b580      	push	{r7, lr}
    5196:	b082      	sub	sp, #8
    5198:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    519a:	003b      	movs	r3, r7
    519c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	22ab      	movs	r2, #171	; 0xab
    51a2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    51a4:	4b13      	ldr	r3, [pc, #76]	; (51f4 <spi_flash_leave_low_power_mode+0x60>)
    51a6:	2100      	movs	r1, #0
    51a8:	0018      	movs	r0, r3
    51aa:	4b13      	ldr	r3, [pc, #76]	; (51f8 <spi_flash_leave_low_power_mode+0x64>)
    51ac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	001a      	movs	r2, r3
    51b4:	4b11      	ldr	r3, [pc, #68]	; (51fc <spi_flash_leave_low_power_mode+0x68>)
    51b6:	0011      	movs	r1, r2
    51b8:	0018      	movs	r0, r3
    51ba:	4b0f      	ldr	r3, [pc, #60]	; (51f8 <spi_flash_leave_low_power_mode+0x64>)
    51bc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    51be:	4b10      	ldr	r3, [pc, #64]	; (5200 <spi_flash_leave_low_power_mode+0x6c>)
    51c0:	2101      	movs	r1, #1
    51c2:	0018      	movs	r0, r3
    51c4:	4b0c      	ldr	r3, [pc, #48]	; (51f8 <spi_flash_leave_low_power_mode+0x64>)
    51c6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    51c8:	4b0e      	ldr	r3, [pc, #56]	; (5204 <spi_flash_leave_low_power_mode+0x70>)
    51ca:	2100      	movs	r1, #0
    51cc:	0018      	movs	r0, r3
    51ce:	4b0a      	ldr	r3, [pc, #40]	; (51f8 <spi_flash_leave_low_power_mode+0x64>)
    51d0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    51d2:	4b0d      	ldr	r3, [pc, #52]	; (5208 <spi_flash_leave_low_power_mode+0x74>)
    51d4:	2181      	movs	r1, #129	; 0x81
    51d6:	0018      	movs	r0, r3
    51d8:	4b07      	ldr	r3, [pc, #28]	; (51f8 <spi_flash_leave_low_power_mode+0x64>)
    51da:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    51dc:	46c0      	nop			; (mov r8, r8)
    51de:	4b0b      	ldr	r3, [pc, #44]	; (520c <spi_flash_leave_low_power_mode+0x78>)
    51e0:	0018      	movs	r0, r3
    51e2:	4b0b      	ldr	r3, [pc, #44]	; (5210 <spi_flash_leave_low_power_mode+0x7c>)
    51e4:	4798      	blx	r3
    51e6:	1e03      	subs	r3, r0, #0
    51e8:	2b01      	cmp	r3, #1
    51ea:	d1f8      	bne.n	51de <spi_flash_leave_low_power_mode+0x4a>
}
    51ec:	46c0      	nop			; (mov r8, r8)
    51ee:	46bd      	mov	sp, r7
    51f0:	b002      	add	sp, #8
    51f2:	bd80      	pop	{r7, pc}
    51f4:	00010208 	.word	0x00010208
    51f8:	00002b0d 	.word	0x00002b0d
    51fc:	0001020c 	.word	0x0001020c
    5200:	00010214 	.word	0x00010214
    5204:	0001021c 	.word	0x0001021c
    5208:	00010204 	.word	0x00010204
    520c:	00010218 	.word	0x00010218
    5210:	00002ac9 	.word	0x00002ac9

00005214 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    5214:	b590      	push	{r4, r7, lr}
    5216:	b085      	sub	sp, #20
    5218:	af00      	add	r7, sp, #0
    521a:	0002      	movs	r2, r0
    521c:	1dfb      	adds	r3, r7, #7
    521e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    5220:	230f      	movs	r3, #15
    5222:	18fb      	adds	r3, r7, r3
    5224:	2200      	movs	r2, #0
    5226:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    5228:	4b24      	ldr	r3, [pc, #144]	; (52bc <spi_flash_enable+0xa8>)
    522a:	4798      	blx	r3
    522c:	0003      	movs	r3, r0
    522e:	051b      	lsls	r3, r3, #20
    5230:	0d1b      	lsrs	r3, r3, #20
    5232:	4a23      	ldr	r2, [pc, #140]	; (52c0 <spi_flash_enable+0xac>)
    5234:	4293      	cmp	r3, r2
    5236:	d938      	bls.n	52aa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    5238:	230f      	movs	r3, #15
    523a:	18fc      	adds	r4, r7, r3
    523c:	2308      	movs	r3, #8
    523e:	18fb      	adds	r3, r7, r3
    5240:	4a20      	ldr	r2, [pc, #128]	; (52c4 <spi_flash_enable+0xb0>)
    5242:	0019      	movs	r1, r3
    5244:	0010      	movs	r0, r2
    5246:	4b20      	ldr	r3, [pc, #128]	; (52c8 <spi_flash_enable+0xb4>)
    5248:	4798      	blx	r3
    524a:	0003      	movs	r3, r0
    524c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    524e:	230f      	movs	r3, #15
    5250:	18fb      	adds	r3, r7, r3
    5252:	781b      	ldrb	r3, [r3, #0]
    5254:	b25b      	sxtb	r3, r3
    5256:	2b00      	cmp	r3, #0
    5258:	d126      	bne.n	52a8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    525a:	68bb      	ldr	r3, [r7, #8]
    525c:	4a1b      	ldr	r2, [pc, #108]	; (52cc <spi_flash_enable+0xb8>)
    525e:	4013      	ands	r3, r2
    5260:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    5262:	68bb      	ldr	r3, [r7, #8]
    5264:	4a1a      	ldr	r2, [pc, #104]	; (52d0 <spi_flash_enable+0xbc>)
    5266:	4313      	orrs	r3, r2
    5268:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    526a:	68bb      	ldr	r3, [r7, #8]
    526c:	4a15      	ldr	r2, [pc, #84]	; (52c4 <spi_flash_enable+0xb0>)
    526e:	0019      	movs	r1, r3
    5270:	0010      	movs	r0, r2
    5272:	4b18      	ldr	r3, [pc, #96]	; (52d4 <spi_flash_enable+0xc0>)
    5274:	4798      	blx	r3
		if(enable) {
    5276:	1dfb      	adds	r3, r7, #7
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	2b00      	cmp	r3, #0
    527c:	d002      	beq.n	5284 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    527e:	4b16      	ldr	r3, [pc, #88]	; (52d8 <spi_flash_enable+0xc4>)
    5280:	4798      	blx	r3
    5282:	e001      	b.n	5288 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    5284:	4b15      	ldr	r3, [pc, #84]	; (52dc <spi_flash_enable+0xc8>)
    5286:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    5288:	68bb      	ldr	r3, [r7, #8]
    528a:	4a10      	ldr	r2, [pc, #64]	; (52cc <spi_flash_enable+0xb8>)
    528c:	4013      	ands	r3, r2
    528e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    5290:	68bb      	ldr	r3, [r7, #8]
    5292:	2280      	movs	r2, #128	; 0x80
    5294:	0252      	lsls	r2, r2, #9
    5296:	4313      	orrs	r3, r2
    5298:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    529a:	68bb      	ldr	r3, [r7, #8]
    529c:	4a09      	ldr	r2, [pc, #36]	; (52c4 <spi_flash_enable+0xb0>)
    529e:	0019      	movs	r1, r3
    52a0:	0010      	movs	r0, r2
    52a2:	4b0c      	ldr	r3, [pc, #48]	; (52d4 <spi_flash_enable+0xc0>)
    52a4:	4798      	blx	r3
    52a6:	e000      	b.n	52aa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    52a8:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    52aa:	230f      	movs	r3, #15
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	781b      	ldrb	r3, [r3, #0]
    52b0:	b25b      	sxtb	r3, r3
}
    52b2:	0018      	movs	r0, r3
    52b4:	46bd      	mov	sp, r7
    52b6:	b005      	add	sp, #20
    52b8:	bd90      	pop	{r4, r7, pc}
    52ba:	46c0      	nop			; (mov r8, r8)
    52bc:	00002455 	.word	0x00002455
    52c0:	0000039f 	.word	0x0000039f
    52c4:	00001410 	.word	0x00001410
    52c8:	00002ae9 	.word	0x00002ae9
    52cc:	f8888fff 	.word	0xf8888fff
    52d0:	01111000 	.word	0x01111000
    52d4:	00002b0d 	.word	0x00002b0d
    52d8:	00005195 	.word	0x00005195
    52dc:	00005115 	.word	0x00005115

000052e0 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    52e0:	b580      	push	{r7, lr}
    52e2:	b082      	sub	sp, #8
    52e4:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    52e6:	4b10      	ldr	r3, [pc, #64]	; (5328 <cpu_irq_enter_critical+0x48>)
    52e8:	681b      	ldr	r3, [r3, #0]
    52ea:	2b00      	cmp	r3, #0
    52ec:	d112      	bne.n	5314 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    52ee:	f3ef 8310 	mrs	r3, PRIMASK
    52f2:	607b      	str	r3, [r7, #4]
  return(result);
    52f4:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    52f6:	2b00      	cmp	r3, #0
    52f8:	d109      	bne.n	530e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    52fa:	b672      	cpsid	i
    52fc:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5300:	4b0a      	ldr	r3, [pc, #40]	; (532c <cpu_irq_enter_critical+0x4c>)
    5302:	2200      	movs	r2, #0
    5304:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    5306:	4b0a      	ldr	r3, [pc, #40]	; (5330 <cpu_irq_enter_critical+0x50>)
    5308:	2201      	movs	r2, #1
    530a:	701a      	strb	r2, [r3, #0]
    530c:	e002      	b.n	5314 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    530e:	4b08      	ldr	r3, [pc, #32]	; (5330 <cpu_irq_enter_critical+0x50>)
    5310:	2200      	movs	r2, #0
    5312:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5314:	4b04      	ldr	r3, [pc, #16]	; (5328 <cpu_irq_enter_critical+0x48>)
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	1c5a      	adds	r2, r3, #1
    531a:	4b03      	ldr	r3, [pc, #12]	; (5328 <cpu_irq_enter_critical+0x48>)
    531c:	601a      	str	r2, [r3, #0]
}
    531e:	46c0      	nop			; (mov r8, r8)
    5320:	46bd      	mov	sp, r7
    5322:	b002      	add	sp, #8
    5324:	bd80      	pop	{r7, pc}
    5326:	46c0      	nop			; (mov r8, r8)
    5328:	200000e4 	.word	0x200000e4
    532c:	20000010 	.word	0x20000010
    5330:	200000e8 	.word	0x200000e8

00005334 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5334:	b580      	push	{r7, lr}
    5336:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5338:	4b0b      	ldr	r3, [pc, #44]	; (5368 <cpu_irq_leave_critical+0x34>)
    533a:	681b      	ldr	r3, [r3, #0]
    533c:	1e5a      	subs	r2, r3, #1
    533e:	4b0a      	ldr	r3, [pc, #40]	; (5368 <cpu_irq_leave_critical+0x34>)
    5340:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5342:	4b09      	ldr	r3, [pc, #36]	; (5368 <cpu_irq_leave_critical+0x34>)
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	2b00      	cmp	r3, #0
    5348:	d10a      	bne.n	5360 <cpu_irq_leave_critical+0x2c>
    534a:	4b08      	ldr	r3, [pc, #32]	; (536c <cpu_irq_leave_critical+0x38>)
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	b2db      	uxtb	r3, r3
    5350:	2b00      	cmp	r3, #0
    5352:	d005      	beq.n	5360 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5354:	4b06      	ldr	r3, [pc, #24]	; (5370 <cpu_irq_leave_critical+0x3c>)
    5356:	2201      	movs	r2, #1
    5358:	701a      	strb	r2, [r3, #0]
    535a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    535e:	b662      	cpsie	i
	}
}
    5360:	46c0      	nop			; (mov r8, r8)
    5362:	46bd      	mov	sp, r7
    5364:	bd80      	pop	{r7, pc}
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	200000e4 	.word	0x200000e4
    536c:	200000e8 	.word	0x200000e8
    5370:	20000010 	.word	0x20000010

00005374 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    5374:	b580      	push	{r7, lr}
    5376:	b084      	sub	sp, #16
    5378:	af00      	add	r7, sp, #0
    537a:	0002      	movs	r2, r0
    537c:	1dfb      	adds	r3, r7, #7
    537e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5380:	230f      	movs	r3, #15
    5382:	18fb      	adds	r3, r7, r3
    5384:	1dfa      	adds	r2, r7, #7
    5386:	7812      	ldrb	r2, [r2, #0]
    5388:	09d2      	lsrs	r2, r2, #7
    538a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    538c:	230e      	movs	r3, #14
    538e:	18fb      	adds	r3, r7, r3
    5390:	1dfa      	adds	r2, r7, #7
    5392:	7812      	ldrb	r2, [r2, #0]
    5394:	0952      	lsrs	r2, r2, #5
    5396:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5398:	4b0d      	ldr	r3, [pc, #52]	; (53d0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    539a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    539c:	230f      	movs	r3, #15
    539e:	18fb      	adds	r3, r7, r3
    53a0:	781b      	ldrb	r3, [r3, #0]
    53a2:	2b00      	cmp	r3, #0
    53a4:	d10f      	bne.n	53c6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    53a6:	230f      	movs	r3, #15
    53a8:	18fb      	adds	r3, r7, r3
    53aa:	781b      	ldrb	r3, [r3, #0]
    53ac:	009b      	lsls	r3, r3, #2
    53ae:	2210      	movs	r2, #16
    53b0:	4694      	mov	ip, r2
    53b2:	44bc      	add	ip, r7
    53b4:	4463      	add	r3, ip
    53b6:	3b08      	subs	r3, #8
    53b8:	681a      	ldr	r2, [r3, #0]
    53ba:	230e      	movs	r3, #14
    53bc:	18fb      	adds	r3, r7, r3
    53be:	781b      	ldrb	r3, [r3, #0]
    53c0:	01db      	lsls	r3, r3, #7
    53c2:	18d3      	adds	r3, r2, r3
    53c4:	e000      	b.n	53c8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    53c6:	2300      	movs	r3, #0
	}
}
    53c8:	0018      	movs	r0, r3
    53ca:	46bd      	mov	sp, r7
    53cc:	b004      	add	sp, #16
    53ce:	bd80      	pop	{r7, pc}
    53d0:	41004400 	.word	0x41004400

000053d4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    53d4:	b580      	push	{r7, lr}
    53d6:	b082      	sub	sp, #8
    53d8:	af00      	add	r7, sp, #0
    53da:	0002      	movs	r2, r0
    53dc:	1dfb      	adds	r3, r7, #7
    53de:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    53e0:	1dfb      	adds	r3, r7, #7
    53e2:	781b      	ldrb	r3, [r3, #0]
    53e4:	0018      	movs	r0, r3
    53e6:	4b03      	ldr	r3, [pc, #12]	; (53f4 <port_get_group_from_gpio_pin+0x20>)
    53e8:	4798      	blx	r3
    53ea:	0003      	movs	r3, r0
}
    53ec:	0018      	movs	r0, r3
    53ee:	46bd      	mov	sp, r7
    53f0:	b002      	add	sp, #8
    53f2:	bd80      	pop	{r7, pc}
    53f4:	00005375 	.word	0x00005375

000053f8 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b082      	sub	sp, #8
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	2200      	movs	r2, #0
    5404:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5406:	687b      	ldr	r3, [r7, #4]
    5408:	2201      	movs	r2, #1
    540a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    540c:	687b      	ldr	r3, [r7, #4]
    540e:	2200      	movs	r2, #0
    5410:	709a      	strb	r2, [r3, #2]
}
    5412:	46c0      	nop			; (mov r8, r8)
    5414:	46bd      	mov	sp, r7
    5416:	b002      	add	sp, #8
    5418:	bd80      	pop	{r7, pc}
    541a:	46c0      	nop			; (mov r8, r8)

0000541c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    541c:	b580      	push	{r7, lr}
    541e:	b084      	sub	sp, #16
    5420:	af00      	add	r7, sp, #0
    5422:	0002      	movs	r2, r0
    5424:	1dfb      	adds	r3, r7, #7
    5426:	701a      	strb	r2, [r3, #0]
    5428:	1dbb      	adds	r3, r7, #6
    542a:	1c0a      	adds	r2, r1, #0
    542c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    542e:	1dfb      	adds	r3, r7, #7
    5430:	781b      	ldrb	r3, [r3, #0]
    5432:	0018      	movs	r0, r3
    5434:	4b0d      	ldr	r3, [pc, #52]	; (546c <port_pin_set_output_level+0x50>)
    5436:	4798      	blx	r3
    5438:	0003      	movs	r3, r0
    543a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    543c:	1dfb      	adds	r3, r7, #7
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	221f      	movs	r2, #31
    5442:	4013      	ands	r3, r2
    5444:	2201      	movs	r2, #1
    5446:	409a      	lsls	r2, r3
    5448:	0013      	movs	r3, r2
    544a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    544c:	1dbb      	adds	r3, r7, #6
    544e:	781b      	ldrb	r3, [r3, #0]
    5450:	2b00      	cmp	r3, #0
    5452:	d003      	beq.n	545c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    5454:	68fb      	ldr	r3, [r7, #12]
    5456:	68ba      	ldr	r2, [r7, #8]
    5458:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    545a:	e002      	b.n	5462 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	68ba      	ldr	r2, [r7, #8]
    5460:	615a      	str	r2, [r3, #20]
	}
}
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	46bd      	mov	sp, r7
    5466:	b004      	add	sp, #16
    5468:	bd80      	pop	{r7, pc}
    546a:	46c0      	nop			; (mov r8, r8)
    546c:	000053d5 	.word	0x000053d5

00005470 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    5470:	b580      	push	{r7, lr}
    5472:	b082      	sub	sp, #8
    5474:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    5476:	1d3b      	adds	r3, r7, #4
    5478:	0018      	movs	r0, r3
    547a:	4b0e      	ldr	r3, [pc, #56]	; (54b4 <system_board_init+0x44>)
    547c:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    547e:	1d3b      	adds	r3, r7, #4
    5480:	2201      	movs	r2, #1
    5482:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    5484:	1d3b      	adds	r3, r7, #4
    5486:	0019      	movs	r1, r3
    5488:	2017      	movs	r0, #23
    548a:	4b0b      	ldr	r3, [pc, #44]	; (54b8 <system_board_init+0x48>)
    548c:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    548e:	2101      	movs	r1, #1
    5490:	2017      	movs	r0, #23
    5492:	4b0a      	ldr	r3, [pc, #40]	; (54bc <system_board_init+0x4c>)
    5494:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    5496:	1d3b      	adds	r3, r7, #4
    5498:	2200      	movs	r2, #0
    549a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    549c:	1d3b      	adds	r3, r7, #4
    549e:	2201      	movs	r2, #1
    54a0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    54a2:	1d3b      	adds	r3, r7, #4
    54a4:	0019      	movs	r1, r3
    54a6:	2037      	movs	r0, #55	; 0x37
    54a8:	4b03      	ldr	r3, [pc, #12]	; (54b8 <system_board_init+0x48>)
    54aa:	4798      	blx	r3
}
    54ac:	46c0      	nop			; (mov r8, r8)
    54ae:	46bd      	mov	sp, r7
    54b0:	b002      	add	sp, #8
    54b2:	bd80      	pop	{r7, pc}
    54b4:	000053f9 	.word	0x000053f9
    54b8:	0000691d 	.word	0x0000691d
    54bc:	0000541d 	.word	0x0000541d

000054c0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    54c0:	b580      	push	{r7, lr}
    54c2:	b082      	sub	sp, #8
    54c4:	af00      	add	r7, sp, #0
    54c6:	0002      	movs	r2, r0
    54c8:	1dfb      	adds	r3, r7, #7
    54ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    54cc:	4b06      	ldr	r3, [pc, #24]	; (54e8 <system_interrupt_enable+0x28>)
    54ce:	1dfa      	adds	r2, r7, #7
    54d0:	7812      	ldrb	r2, [r2, #0]
    54d2:	0011      	movs	r1, r2
    54d4:	221f      	movs	r2, #31
    54d6:	400a      	ands	r2, r1
    54d8:	2101      	movs	r1, #1
    54da:	4091      	lsls	r1, r2
    54dc:	000a      	movs	r2, r1
    54de:	601a      	str	r2, [r3, #0]
}
    54e0:	46c0      	nop			; (mov r8, r8)
    54e2:	46bd      	mov	sp, r7
    54e4:	b002      	add	sp, #8
    54e6:	bd80      	pop	{r7, pc}
    54e8:	e000e100 	.word	0xe000e100

000054ec <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    54ec:	b580      	push	{r7, lr}
    54ee:	b084      	sub	sp, #16
    54f0:	af00      	add	r7, sp, #0
    54f2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    54fa:	68fb      	ldr	r3, [r7, #12]
    54fc:	69db      	ldr	r3, [r3, #28]
    54fe:	2207      	movs	r2, #7
    5500:	4013      	ands	r3, r2
    5502:	1e5a      	subs	r2, r3, #1
    5504:	4193      	sbcs	r3, r2
    5506:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5508:	0018      	movs	r0, r3
    550a:	46bd      	mov	sp, r7
    550c:	b004      	add	sp, #16
    550e:	bd80      	pop	{r7, pc}

00005510 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5510:	b580      	push	{r7, lr}
    5512:	b082      	sub	sp, #8
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5518:	46c0      	nop			; (mov r8, r8)
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	0018      	movs	r0, r3
    551e:	4b04      	ldr	r3, [pc, #16]	; (5530 <_i2c_master_wait_for_sync+0x20>)
    5520:	4798      	blx	r3
    5522:	1e03      	subs	r3, r0, #0
    5524:	d1f9      	bne.n	551a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    5526:	46c0      	nop			; (mov r8, r8)
    5528:	46bd      	mov	sp, r7
    552a:	b002      	add	sp, #8
    552c:	bd80      	pop	{r7, pc}
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	000054ed 	.word	0x000054ed

00005534 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
    5534:	b580      	push	{r7, lr}
    5536:	b082      	sub	sp, #8
    5538:	af00      	add	r7, sp, #0
    553a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    553c:	687b      	ldr	r3, [r7, #4]
    553e:	2264      	movs	r2, #100	; 0x64
    5540:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    5542:	687b      	ldr	r3, [r7, #4]
    5544:	4a1b      	ldr	r2, [pc, #108]	; (55b4 <i2c_master_get_config_defaults+0x80>)
    5546:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	2200      	movs	r2, #0
    554c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	2200      	movs	r2, #0
    5552:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	2200      	movs	r2, #0
    5558:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    555a:	687b      	ldr	r3, [r7, #4]
    555c:	2280      	movs	r2, #128	; 0x80
    555e:	0392      	lsls	r2, r2, #14
    5560:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
    5562:	687b      	ldr	r3, [r7, #4]
    5564:	2201      	movs	r2, #1
    5566:	4252      	negs	r2, r2
    5568:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    556a:	687b      	ldr	r3, [r7, #4]
    556c:	2201      	movs	r2, #1
    556e:	4252      	negs	r2, r2
    5570:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    5572:	687b      	ldr	r3, [r7, #4]
    5574:	2200      	movs	r2, #0
    5576:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	2200      	movs	r2, #0
    557c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	2224      	movs	r2, #36	; 0x24
    5582:	2100      	movs	r1, #0
    5584:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    5586:	687b      	ldr	r3, [r7, #4]
    5588:	2200      	movs	r2, #0
    558a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	222c      	movs	r2, #44	; 0x2c
    5590:	2100      	movs	r1, #0
    5592:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	222d      	movs	r2, #45	; 0x2d
    5598:	2100      	movs	r1, #0
    559a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
    559c:	687b      	ldr	r3, [r7, #4]
    559e:	222e      	movs	r2, #46	; 0x2e
    55a0:	2100      	movs	r1, #0
    55a2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	22d7      	movs	r2, #215	; 0xd7
    55a8:	861a      	strh	r2, [r3, #48]	; 0x30
}
    55aa:	46c0      	nop			; (mov r8, r8)
    55ac:	46bd      	mov	sp, r7
    55ae:	b002      	add	sp, #8
    55b0:	bd80      	pop	{r7, pc}
    55b2:	46c0      	nop			; (mov r8, r8)
    55b4:	00000d48 	.word	0x00000d48

000055b8 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
    55b8:	b580      	push	{r7, lr}
    55ba:	b084      	sub	sp, #16
    55bc:	af00      	add	r7, sp, #0
    55be:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55c0:	687b      	ldr	r3, [r7, #4]
    55c2:	681b      	ldr	r3, [r3, #0]
    55c4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
    55c6:	2300      	movs	r3, #0
    55c8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    55ca:	687b      	ldr	r3, [r7, #4]
    55cc:	0018      	movs	r0, r3
    55ce:	4b14      	ldr	r3, [pc, #80]	; (5620 <i2c_master_enable+0x68>)
    55d0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    55d2:	68bb      	ldr	r3, [r7, #8]
    55d4:	681b      	ldr	r3, [r3, #0]
    55d6:	2202      	movs	r2, #2
    55d8:	431a      	orrs	r2, r3
    55da:	68bb      	ldr	r3, [r7, #8]
    55dc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    55de:	687b      	ldr	r3, [r7, #4]
    55e0:	681b      	ldr	r3, [r3, #0]
    55e2:	0018      	movs	r0, r3
    55e4:	4b0f      	ldr	r3, [pc, #60]	; (5624 <i2c_master_enable+0x6c>)
    55e6:	4798      	blx	r3
    55e8:	0003      	movs	r3, r0
    55ea:	0018      	movs	r0, r3
    55ec:	4b0e      	ldr	r3, [pc, #56]	; (5628 <i2c_master_enable+0x70>)
    55ee:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    55f0:	e00c      	b.n	560c <i2c_master_enable+0x54>
		timeout_counter++;
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	3301      	adds	r3, #1
    55f6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	88db      	ldrh	r3, [r3, #6]
    55fc:	1e1a      	subs	r2, r3, #0
    55fe:	68fb      	ldr	r3, [r7, #12]
    5600:	429a      	cmp	r2, r3
    5602:	d803      	bhi.n	560c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    5604:	68bb      	ldr	r3, [r7, #8]
    5606:	2210      	movs	r2, #16
    5608:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
    560a:	e006      	b.n	561a <i2c_master_enable+0x62>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    560c:	68bb      	ldr	r3, [r7, #8]
    560e:	8b5b      	ldrh	r3, [r3, #26]
    5610:	b29b      	uxth	r3, r3
    5612:	001a      	movs	r2, r3
    5614:	2310      	movs	r3, #16
    5616:	4013      	ands	r3, r2
    5618:	d0eb      	beq.n	55f2 <i2c_master_enable+0x3a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
			/* Workaround #1 */
			return;
		}
	}
}
    561a:	46bd      	mov	sp, r7
    561c:	b004      	add	sp, #16
    561e:	bd80      	pop	{r7, pc}
    5620:	00005511 	.word	0x00005511
    5624:	00008149 	.word	0x00008149
    5628:	000054c1 	.word	0x000054c1

0000562c <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
    562c:	b580      	push	{r7, lr}
    562e:	b08e      	sub	sp, #56	; 0x38
    5630:	af00      	add	r7, sp, #0
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);
    5632:	1d3b      	adds	r3, r7, #4
    5634:	0018      	movs	r0, r3
    5636:	4b0c      	ldr	r3, [pc, #48]	; (5668 <at30tse_init+0x3c>)
    5638:	4798      	blx	r3

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
    563a:	1d3b      	adds	r3, r7, #4
    563c:	4a0b      	ldr	r2, [pc, #44]	; (566c <at30tse_init+0x40>)
    563e:	82da      	strh	r2, [r3, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
    5640:	1d3b      	adds	r3, r7, #4
    5642:	4a0b      	ldr	r2, [pc, #44]	; (5670 <at30tse_init+0x44>)
    5644:	61da      	str	r2, [r3, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
    5646:	1d3b      	adds	r3, r7, #4
    5648:	4a0a      	ldr	r2, [pc, #40]	; (5674 <at30tse_init+0x48>)
    564a:	621a      	str	r2, [r3, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
    564c:	1d3a      	adds	r2, r7, #4
    564e:	490a      	ldr	r1, [pc, #40]	; (5678 <at30tse_init+0x4c>)
    5650:	4b0a      	ldr	r3, [pc, #40]	; (567c <at30tse_init+0x50>)
    5652:	0018      	movs	r0, r3
    5654:	4b0a      	ldr	r3, [pc, #40]	; (5680 <at30tse_init+0x54>)
    5656:	4798      	blx	r3
	i2c_master_enable(&dev_inst_at30tse75x);
    5658:	4b08      	ldr	r3, [pc, #32]	; (567c <at30tse_init+0x50>)
    565a:	0018      	movs	r0, r3
    565c:	4b09      	ldr	r3, [pc, #36]	; (5684 <at30tse_init+0x58>)
    565e:	4798      	blx	r3
}
    5660:	46c0      	nop			; (mov r8, r8)
    5662:	46bd      	mov	sp, r7
    5664:	b00e      	add	sp, #56	; 0x38
    5666:	bd80      	pop	{r7, pc}
    5668:	00005535 	.word	0x00005535
    566c:	00002710 	.word	0x00002710
    5670:	00080002 	.word	0x00080002
    5674:	00090002 	.word	0x00090002
    5678:	42000800 	.word	0x42000800
    567c:	2000453c 	.word	0x2000453c
    5680:	00006f39 	.word	0x00006f39
    5684:	000055b9 	.word	0x000055b9

00005688 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
    5688:	b590      	push	{r4, r7, lr}
    568a:	b08b      	sub	sp, #44	; 0x2c
    568c:	af00      	add	r7, sp, #0
    568e:	0004      	movs	r4, r0
    5690:	0008      	movs	r0, r1
    5692:	0011      	movs	r1, r2
    5694:	1dfb      	adds	r3, r7, #7
    5696:	1c22      	adds	r2, r4, #0
    5698:	701a      	strb	r2, [r3, #0]
    569a:	1dbb      	adds	r3, r7, #6
    569c:	1c02      	adds	r2, r0, #0
    569e:	701a      	strb	r2, [r3, #0]
    56a0:	1d7b      	adds	r3, r7, #5
    56a2:	1c0a      	adds	r2, r1, #0
    56a4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
    56a6:	1dfa      	adds	r2, r7, #7
    56a8:	1dbb      	adds	r3, r7, #6
    56aa:	7812      	ldrb	r2, [r2, #0]
    56ac:	781b      	ldrb	r3, [r3, #0]
    56ae:	4313      	orrs	r3, r2
    56b0:	b2da      	uxtb	r2, r3
    56b2:	2324      	movs	r3, #36	; 0x24
    56b4:	18fb      	adds	r3, r7, r3
    56b6:	701a      	strb	r2, [r3, #0]
	buffer[1] = 0;
    56b8:	2324      	movs	r3, #36	; 0x24
    56ba:	18fb      	adds	r3, r7, r3
    56bc:	2200      	movs	r2, #0
    56be:	705a      	strb	r2, [r3, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
    56c0:	2318      	movs	r3, #24
    56c2:	18fb      	adds	r3, r7, r3
    56c4:	224f      	movs	r2, #79	; 0x4f
    56c6:	801a      	strh	r2, [r3, #0]
    56c8:	2318      	movs	r3, #24
    56ca:	18fb      	adds	r3, r7, r3
    56cc:	2201      	movs	r2, #1
    56ce:	805a      	strh	r2, [r3, #2]
    56d0:	2318      	movs	r3, #24
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	2224      	movs	r2, #36	; 0x24
    56d6:	18ba      	adds	r2, r7, r2
    56d8:	605a      	str	r2, [r3, #4]
    56da:	2318      	movs	r3, #24
    56dc:	18fb      	adds	r3, r7, r3
    56de:	2200      	movs	r2, #0
    56e0:	721a      	strb	r2, [r3, #8]
    56e2:	2318      	movs	r3, #24
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	2200      	movs	r2, #0
    56e8:	725a      	strb	r2, [r3, #9]
    56ea:	2318      	movs	r3, #24
    56ec:	18fb      	adds	r3, r7, r3
    56ee:	2200      	movs	r2, #0
    56f0:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
    56f2:	230c      	movs	r3, #12
    56f4:	18fb      	adds	r3, r7, r3
    56f6:	224f      	movs	r2, #79	; 0x4f
    56f8:	801a      	strh	r2, [r3, #0]
    56fa:	1d7b      	adds	r3, r7, #5
    56fc:	781b      	ldrb	r3, [r3, #0]
    56fe:	b29a      	uxth	r2, r3
    5700:	230c      	movs	r3, #12
    5702:	18fb      	adds	r3, r7, r3
    5704:	805a      	strh	r2, [r3, #2]
    5706:	230c      	movs	r3, #12
    5708:	18fb      	adds	r3, r7, r3
    570a:	2224      	movs	r2, #36	; 0x24
    570c:	18ba      	adds	r2, r7, r2
    570e:	605a      	str	r2, [r3, #4]
    5710:	230c      	movs	r3, #12
    5712:	18fb      	adds	r3, r7, r3
    5714:	2200      	movs	r2, #0
    5716:	721a      	strb	r2, [r3, #8]
    5718:	230c      	movs	r3, #12
    571a:	18fb      	adds	r3, r7, r3
    571c:	2200      	movs	r2, #0
    571e:	725a      	strb	r2, [r3, #9]
    5720:	230c      	movs	r3, #12
    5722:	18fb      	adds	r3, r7, r3
    5724:	2200      	movs	r2, #0
    5726:	729a      	strb	r2, [r3, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
    5728:	2318      	movs	r3, #24
    572a:	18fa      	adds	r2, r7, r3
    572c:	4b0d      	ldr	r3, [pc, #52]	; (5764 <at30tse_read_register+0xdc>)
    572e:	0011      	movs	r1, r2
    5730:	0018      	movs	r0, r3
    5732:	4b0d      	ldr	r3, [pc, #52]	; (5768 <at30tse_read_register+0xe0>)
    5734:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
    5736:	230c      	movs	r3, #12
    5738:	18fa      	adds	r2, r7, r3
    573a:	4b0a      	ldr	r3, [pc, #40]	; (5764 <at30tse_read_register+0xdc>)
    573c:	0011      	movs	r1, r2
    573e:	0018      	movs	r0, r3
    5740:	4b0a      	ldr	r3, [pc, #40]	; (576c <at30tse_read_register+0xe4>)
    5742:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
    5744:	2324      	movs	r3, #36	; 0x24
    5746:	18fb      	adds	r3, r7, r3
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	021b      	lsls	r3, r3, #8
    574c:	b21a      	sxth	r2, r3
    574e:	2324      	movs	r3, #36	; 0x24
    5750:	18fb      	adds	r3, r7, r3
    5752:	785b      	ldrb	r3, [r3, #1]
    5754:	b21b      	sxth	r3, r3
    5756:	4313      	orrs	r3, r2
    5758:	b21b      	sxth	r3, r3
    575a:	b29b      	uxth	r3, r3
}
    575c:	0018      	movs	r0, r3
    575e:	46bd      	mov	sp, r7
    5760:	b00b      	add	sp, #44	; 0x2c
    5762:	bd90      	pop	{r4, r7, pc}
    5764:	2000453c 	.word	0x2000453c
    5768:	000075ad 	.word	0x000075ad
    576c:	000073f5 	.word	0x000073f5

00005770 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
    5770:	b590      	push	{r4, r7, lr}
    5772:	b087      	sub	sp, #28
    5774:	af00      	add	r7, sp, #0
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
    5776:	2316      	movs	r3, #22
    5778:	18fc      	adds	r4, r7, r3
    577a:	2202      	movs	r2, #2
    577c:	2100      	movs	r1, #0
    577e:	2000      	movs	r0, #0
    5780:	4b4d      	ldr	r3, [pc, #308]	; (58b8 <at30tse_read_temperature+0x148>)
    5782:	4798      	blx	r3
    5784:	0003      	movs	r3, r0
    5786:	8023      	strh	r3, [r4, #0]
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
    5788:	2300      	movs	r3, #0
    578a:	2400      	movs	r4, #0
    578c:	60bb      	str	r3, [r7, #8]
    578e:	60fc      	str	r4, [r7, #12]
	int8_t sign = 1;
    5790:	1dfb      	adds	r3, r7, #7
    5792:	2201      	movs	r2, #1
    5794:	701a      	strb	r2, [r3, #0]

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
    5796:	2316      	movs	r3, #22
    5798:	18fb      	adds	r3, r7, r3
    579a:	2200      	movs	r2, #0
    579c:	5e9b      	ldrsh	r3, [r3, r2]
    579e:	2b00      	cmp	r3, #0
    57a0:	da0d      	bge.n	57be <at30tse_read_temperature+0x4e>
		sign *= -1;
    57a2:	1dfb      	adds	r3, r7, #7
    57a4:	781b      	ldrb	r3, [r3, #0]
    57a6:	425b      	negs	r3, r3
    57a8:	b2da      	uxtb	r2, r3
    57aa:	1dfb      	adds	r3, r7, #7
    57ac:	701a      	strb	r2, [r3, #0]
		data &= ~(1 << 15);
    57ae:	2316      	movs	r3, #22
    57b0:	18fb      	adds	r3, r7, r3
    57b2:	2216      	movs	r2, #22
    57b4:	18ba      	adds	r2, r7, r2
    57b6:	8812      	ldrh	r2, [r2, #0]
    57b8:	0452      	lsls	r2, r2, #17
    57ba:	0c52      	lsrs	r2, r2, #17
    57bc:	801a      	strh	r2, [r3, #0]
	}

	/* Convert to temperature  */
	switch (resolution){
    57be:	4b3f      	ldr	r3, [pc, #252]	; (58bc <at30tse_read_temperature+0x14c>)
    57c0:	781b      	ldrb	r3, [r3, #0]
    57c2:	2b01      	cmp	r3, #1
    57c4:	d022      	beq.n	580c <at30tse_read_temperature+0x9c>
    57c6:	dc02      	bgt.n	57ce <at30tse_read_temperature+0x5e>
    57c8:	2b00      	cmp	r3, #0
    57ca:	d005      	beq.n	57d8 <at30tse_read_temperature+0x68>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
    57cc:	e06d      	b.n	58aa <at30tse_read_temperature+0x13a>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
    57ce:	2b02      	cmp	r3, #2
    57d0:	d036      	beq.n	5840 <at30tse_read_temperature+0xd0>
    57d2:	2b03      	cmp	r3, #3
    57d4:	d04f      	beq.n	5876 <at30tse_read_temperature+0x106>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
    57d6:	e068      	b.n	58aa <at30tse_read_temperature+0x13a>
	}

	/* Convert to temperature  */
	switch (resolution){
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
    57d8:	2316      	movs	r3, #22
    57da:	18fb      	adds	r3, r7, r3
    57dc:	2216      	movs	r2, #22
    57de:	18ba      	adds	r2, r7, r2
    57e0:	8812      	ldrh	r2, [r2, #0]
    57e2:	09d2      	lsrs	r2, r2, #7
    57e4:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.5;
    57e6:	2316      	movs	r3, #22
    57e8:	18fb      	adds	r3, r7, r3
    57ea:	881b      	ldrh	r3, [r3, #0]
    57ec:	1dfa      	adds	r2, r7, #7
    57ee:	7812      	ldrb	r2, [r2, #0]
    57f0:	b252      	sxtb	r2, r2
    57f2:	435a      	muls	r2, r3
    57f4:	4b32      	ldr	r3, [pc, #200]	; (58c0 <at30tse_read_temperature+0x150>)
    57f6:	0010      	movs	r0, r2
    57f8:	4798      	blx	r3
    57fa:	4c32      	ldr	r4, [pc, #200]	; (58c4 <at30tse_read_temperature+0x154>)
    57fc:	2200      	movs	r2, #0
    57fe:	4b32      	ldr	r3, [pc, #200]	; (58c8 <at30tse_read_temperature+0x158>)
    5800:	47a0      	blx	r4
    5802:	0003      	movs	r3, r0
    5804:	000c      	movs	r4, r1
    5806:	60bb      	str	r3, [r7, #8]
    5808:	60fc      	str	r4, [r7, #12]
			break;
    580a:	e04e      	b.n	58aa <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
    580c:	2316      	movs	r3, #22
    580e:	18fb      	adds	r3, r7, r3
    5810:	2216      	movs	r2, #22
    5812:	18ba      	adds	r2, r7, r2
    5814:	8812      	ldrh	r2, [r2, #0]
    5816:	0992      	lsrs	r2, r2, #6
    5818:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.25;
    581a:	2316      	movs	r3, #22
    581c:	18fb      	adds	r3, r7, r3
    581e:	881b      	ldrh	r3, [r3, #0]
    5820:	1dfa      	adds	r2, r7, #7
    5822:	7812      	ldrb	r2, [r2, #0]
    5824:	b252      	sxtb	r2, r2
    5826:	435a      	muls	r2, r3
    5828:	4b25      	ldr	r3, [pc, #148]	; (58c0 <at30tse_read_temperature+0x150>)
    582a:	0010      	movs	r0, r2
    582c:	4798      	blx	r3
    582e:	4c25      	ldr	r4, [pc, #148]	; (58c4 <at30tse_read_temperature+0x154>)
    5830:	2200      	movs	r2, #0
    5832:	4b26      	ldr	r3, [pc, #152]	; (58cc <at30tse_read_temperature+0x15c>)
    5834:	47a0      	blx	r4
    5836:	0003      	movs	r3, r0
    5838:	000c      	movs	r4, r1
    583a:	60bb      	str	r3, [r7, #8]
    583c:	60fc      	str	r4, [r7, #12]
			break;
    583e:	e034      	b.n	58aa <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
    5840:	2316      	movs	r3, #22
    5842:	18fb      	adds	r3, r7, r3
    5844:	2216      	movs	r2, #22
    5846:	18ba      	adds	r2, r7, r2
    5848:	8812      	ldrh	r2, [r2, #0]
    584a:	0952      	lsrs	r2, r2, #5
    584c:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.125;
    584e:	2316      	movs	r3, #22
    5850:	18fb      	adds	r3, r7, r3
    5852:	881b      	ldrh	r3, [r3, #0]
    5854:	1dfa      	adds	r2, r7, #7
    5856:	7812      	ldrb	r2, [r2, #0]
    5858:	b252      	sxtb	r2, r2
    585a:	435a      	muls	r2, r3
    585c:	4b18      	ldr	r3, [pc, #96]	; (58c0 <at30tse_read_temperature+0x150>)
    585e:	0010      	movs	r0, r2
    5860:	4798      	blx	r3
    5862:	4c18      	ldr	r4, [pc, #96]	; (58c4 <at30tse_read_temperature+0x154>)
    5864:	2200      	movs	r2, #0
    5866:	23ff      	movs	r3, #255	; 0xff
    5868:	059b      	lsls	r3, r3, #22
    586a:	47a0      	blx	r4
    586c:	0003      	movs	r3, r0
    586e:	000c      	movs	r4, r1
    5870:	60bb      	str	r3, [r7, #8]
    5872:	60fc      	str	r4, [r7, #12]
			break;
    5874:	e019      	b.n	58aa <at30tse_read_temperature+0x13a>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
    5876:	2316      	movs	r3, #22
    5878:	18fb      	adds	r3, r7, r3
    587a:	2216      	movs	r2, #22
    587c:	18ba      	adds	r2, r7, r2
    587e:	8812      	ldrh	r2, [r2, #0]
    5880:	0912      	lsrs	r2, r2, #4
    5882:	801a      	strh	r2, [r3, #0]
			temperature = data * sign * 0.0625;
    5884:	2316      	movs	r3, #22
    5886:	18fb      	adds	r3, r7, r3
    5888:	881b      	ldrh	r3, [r3, #0]
    588a:	1dfa      	adds	r2, r7, #7
    588c:	7812      	ldrb	r2, [r2, #0]
    588e:	b252      	sxtb	r2, r2
    5890:	435a      	muls	r2, r3
    5892:	4b0b      	ldr	r3, [pc, #44]	; (58c0 <at30tse_read_temperature+0x150>)
    5894:	0010      	movs	r0, r2
    5896:	4798      	blx	r3
    5898:	4c0a      	ldr	r4, [pc, #40]	; (58c4 <at30tse_read_temperature+0x154>)
    589a:	2200      	movs	r2, #0
    589c:	4b0c      	ldr	r3, [pc, #48]	; (58d0 <at30tse_read_temperature+0x160>)
    589e:	47a0      	blx	r4
    58a0:	0003      	movs	r3, r0
    58a2:	000c      	movs	r4, r1
    58a4:	60bb      	str	r3, [r7, #8]
    58a6:	60fc      	str	r4, [r7, #12]
			break;
    58a8:	46c0      	nop			; (mov r8, r8)
		default:
			break;
	}
	return temperature;
    58aa:	68bb      	ldr	r3, [r7, #8]
    58ac:	68fc      	ldr	r4, [r7, #12]
}
    58ae:	0018      	movs	r0, r3
    58b0:	0021      	movs	r1, r4
    58b2:	46bd      	mov	sp, r7
    58b4:	b007      	add	sp, #28
    58b6:	bd90      	pop	{r4, r7, pc}
    58b8:	00005689 	.word	0x00005689
    58bc:	200000e9 	.word	0x200000e9
    58c0:	000105c5 	.word	0x000105c5
    58c4:	0000f9bd 	.word	0x0000f9bd
    58c8:	3fe00000 	.word	0x3fe00000
    58cc:	3fd00000 	.word	0x3fd00000
    58d0:	3fb00000 	.word	0x3fb00000

000058d4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b082      	sub	sp, #8
    58d8:	af00      	add	r7, sp, #0
    58da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    58dc:	687b      	ldr	r3, [r7, #4]
    58de:	2200      	movs	r2, #0
    58e0:	701a      	strb	r2, [r3, #0]
}
    58e2:	46c0      	nop			; (mov r8, r8)
    58e4:	46bd      	mov	sp, r7
    58e6:	b002      	add	sp, #8
    58e8:	bd80      	pop	{r7, pc}
    58ea:	46c0      	nop			; (mov r8, r8)

000058ec <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    58ec:	b580      	push	{r7, lr}
    58ee:	b082      	sub	sp, #8
    58f0:	af00      	add	r7, sp, #0
    58f2:	0002      	movs	r2, r0
    58f4:	6039      	str	r1, [r7, #0]
    58f6:	1dfb      	adds	r3, r7, #7
    58f8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    58fa:	1dfb      	adds	r3, r7, #7
    58fc:	781b      	ldrb	r3, [r3, #0]
    58fe:	2b01      	cmp	r3, #1
    5900:	d00a      	beq.n	5918 <system_apb_clock_set_mask+0x2c>
    5902:	2b02      	cmp	r3, #2
    5904:	d00f      	beq.n	5926 <system_apb_clock_set_mask+0x3a>
    5906:	2b00      	cmp	r3, #0
    5908:	d114      	bne.n	5934 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    590a:	4b0e      	ldr	r3, [pc, #56]	; (5944 <system_apb_clock_set_mask+0x58>)
    590c:	4a0d      	ldr	r2, [pc, #52]	; (5944 <system_apb_clock_set_mask+0x58>)
    590e:	6991      	ldr	r1, [r2, #24]
    5910:	683a      	ldr	r2, [r7, #0]
    5912:	430a      	orrs	r2, r1
    5914:	619a      	str	r2, [r3, #24]
			break;
    5916:	e00f      	b.n	5938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5918:	4b0a      	ldr	r3, [pc, #40]	; (5944 <system_apb_clock_set_mask+0x58>)
    591a:	4a0a      	ldr	r2, [pc, #40]	; (5944 <system_apb_clock_set_mask+0x58>)
    591c:	69d1      	ldr	r1, [r2, #28]
    591e:	683a      	ldr	r2, [r7, #0]
    5920:	430a      	orrs	r2, r1
    5922:	61da      	str	r2, [r3, #28]
			break;
    5924:	e008      	b.n	5938 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5926:	4b07      	ldr	r3, [pc, #28]	; (5944 <system_apb_clock_set_mask+0x58>)
    5928:	4a06      	ldr	r2, [pc, #24]	; (5944 <system_apb_clock_set_mask+0x58>)
    592a:	6a11      	ldr	r1, [r2, #32]
    592c:	683a      	ldr	r2, [r7, #0]
    592e:	430a      	orrs	r2, r1
    5930:	621a      	str	r2, [r3, #32]
			break;
    5932:	e001      	b.n	5938 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5934:	2317      	movs	r3, #23
    5936:	e000      	b.n	593a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5938:	2300      	movs	r3, #0
}
    593a:	0018      	movs	r0, r3
    593c:	46bd      	mov	sp, r7
    593e:	b002      	add	sp, #8
    5940:	bd80      	pop	{r7, pc}
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	40000400 	.word	0x40000400

00005948 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    5948:	b580      	push	{r7, lr}
    594a:	b082      	sub	sp, #8
    594c:	af00      	add	r7, sp, #0
    594e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5950:	687b      	ldr	r3, [r7, #4]
    5952:	2280      	movs	r2, #128	; 0x80
    5954:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5956:	687b      	ldr	r3, [r7, #4]
    5958:	2200      	movs	r2, #0
    595a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	2201      	movs	r2, #1
    5960:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5962:	687b      	ldr	r3, [r7, #4]
    5964:	2200      	movs	r2, #0
    5966:	70da      	strb	r2, [r3, #3]
}
    5968:	46c0      	nop			; (mov r8, r8)
    596a:	46bd      	mov	sp, r7
    596c:	b002      	add	sp, #8
    596e:	bd80      	pop	{r7, pc}

00005970 <system_voltage_reference_enable>:
 *
 * \param[in] vref  Voltage reference to enable
 */
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
    5970:	b580      	push	{r7, lr}
    5972:	b082      	sub	sp, #8
    5974:	af00      	add	r7, sp, #0
    5976:	0002      	movs	r2, r0
    5978:	1dfb      	adds	r3, r7, #7
    597a:	701a      	strb	r2, [r3, #0]
	switch (vref) {
    597c:	1dfb      	adds	r3, r7, #7
    597e:	781b      	ldrb	r3, [r3, #0]
    5980:	2b00      	cmp	r3, #0
    5982:	d002      	beq.n	598a <system_voltage_reference_enable+0x1a>
    5984:	2b01      	cmp	r3, #1
    5986:	d007      	beq.n	5998 <system_voltage_reference_enable+0x28>
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
			break;

		default:
			Assert(false);
			return;
    5988:	e00d      	b.n	59a6 <system_voltage_reference_enable+0x36>
static inline void system_voltage_reference_enable(
		const enum system_voltage_reference vref)
{
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
    598a:	4b08      	ldr	r3, [pc, #32]	; (59ac <system_voltage_reference_enable+0x3c>)
    598c:	4a07      	ldr	r2, [pc, #28]	; (59ac <system_voltage_reference_enable+0x3c>)
    598e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    5990:	2102      	movs	r1, #2
    5992:	430a      	orrs	r2, r1
    5994:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    5996:	e006      	b.n	59a6 <system_voltage_reference_enable+0x36>

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    5998:	4b04      	ldr	r3, [pc, #16]	; (59ac <system_voltage_reference_enable+0x3c>)
    599a:	4a04      	ldr	r2, [pc, #16]	; (59ac <system_voltage_reference_enable+0x3c>)
    599c:	6c12      	ldr	r2, [r2, #64]	; 0x40
    599e:	2104      	movs	r1, #4
    59a0:	430a      	orrs	r2, r1
    59a2:	641a      	str	r2, [r3, #64]	; 0x40
			break;
    59a4:	46c0      	nop			; (mov r8, r8)

		default:
			Assert(false);
			return;
	}
}
    59a6:	46bd      	mov	sp, r7
    59a8:	b002      	add	sp, #8
    59aa:	bd80      	pop	{r7, pc}
    59ac:	40000800 	.word	0x40000800

000059b0 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    59b0:	b580      	push	{r7, lr}
    59b2:	b084      	sub	sp, #16
    59b4:	af00      	add	r7, sp, #0
    59b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    59be:	68fb      	ldr	r3, [r7, #12]
    59c0:	7e5b      	ldrb	r3, [r3, #25]
    59c2:	b2db      	uxtb	r3, r3
    59c4:	b25b      	sxtb	r3, r3
    59c6:	2b00      	cmp	r3, #0
    59c8:	da01      	bge.n	59ce <adc_is_syncing+0x1e>
		return true;
    59ca:	2301      	movs	r3, #1
    59cc:	e000      	b.n	59d0 <adc_is_syncing+0x20>
	}

	return false;
    59ce:	2300      	movs	r3, #0
}
    59d0:	0018      	movs	r0, r3
    59d2:	46bd      	mov	sp, r7
    59d4:	b004      	add	sp, #16
    59d6:	bd80      	pop	{r7, pc}

000059d8 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    59d8:	b580      	push	{r7, lr}
    59da:	b082      	sub	sp, #8
    59dc:	af00      	add	r7, sp, #0
    59de:	6078      	str	r0, [r7, #4]
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    59e0:	687b      	ldr	r3, [r7, #4]
    59e2:	2200      	movs	r2, #0
    59e4:	701a      	strb	r2, [r3, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    59e6:	687b      	ldr	r3, [r7, #4]
    59e8:	2200      	movs	r2, #0
    59ea:	705a      	strb	r2, [r3, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    59ec:	687b      	ldr	r3, [r7, #4]
    59ee:	2200      	movs	r2, #0
    59f0:	805a      	strh	r2, [r3, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	2200      	movs	r2, #0
    59f6:	711a      	strb	r2, [r3, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	2200      	movs	r2, #0
    59fc:	761a      	strb	r2, [r3, #24]
	config->window.window_upper_value     = 0;
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	2200      	movs	r2, #0
    5a02:	621a      	str	r2, [r3, #32]
	config->window.window_lower_value     = 0;
    5a04:	687b      	ldr	r3, [r7, #4]
    5a06:	2200      	movs	r2, #0
    5a08:	61da      	str	r2, [r3, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    5a0a:	687b      	ldr	r3, [r7, #4]
    5a0c:	2200      	movs	r2, #0
    5a0e:	609a      	str	r2, [r3, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	2200      	movs	r2, #0
    5a14:	731a      	strb	r2, [r3, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	22c0      	movs	r2, #192	; 0xc0
    5a1a:	0152      	lsls	r2, r2, #5
    5a1c:	81da      	strh	r2, [r3, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    5a1e:	687b      	ldr	r3, [r7, #4]
    5a20:	2200      	movs	r2, #0
    5a22:	741a      	strb	r2, [r3, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	2200      	movs	r2, #0
    5a28:	745a      	strb	r2, [r3, #17]
	config->left_adjust                   = false;
    5a2a:	687b      	ldr	r3, [r7, #4]
    5a2c:	2200      	movs	r2, #0
    5a2e:	749a      	strb	r2, [r3, #18]
	config->differential_mode             = false;
    5a30:	687b      	ldr	r3, [r7, #4]
    5a32:	2200      	movs	r2, #0
    5a34:	74da      	strb	r2, [r3, #19]
	config->freerunning                   = false;
    5a36:	687b      	ldr	r3, [r7, #4]
    5a38:	2200      	movs	r2, #0
    5a3a:	751a      	strb	r2, [r3, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    5a3c:	687b      	ldr	r3, [r7, #4]
    5a3e:	222a      	movs	r2, #42	; 0x2a
    5a40:	2100      	movs	r1, #0
    5a42:	5499      	strb	r1, [r3, r2]
	config->run_in_standby                = false;
    5a44:	687b      	ldr	r3, [r7, #4]
    5a46:	2200      	movs	r2, #0
    5a48:	755a      	strb	r2, [r3, #21]
	config->reference_compensation_enable = false;
    5a4a:	687b      	ldr	r3, [r7, #4]
    5a4c:	2200      	movs	r2, #0
    5a4e:	759a      	strb	r2, [r3, #22]
	config->correction.correction_enable  = false;
    5a50:	687b      	ldr	r3, [r7, #4]
    5a52:	2224      	movs	r2, #36	; 0x24
    5a54:	2100      	movs	r1, #0
    5a56:	5499      	strb	r1, [r3, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    5a58:	687b      	ldr	r3, [r7, #4]
    5a5a:	2200      	movs	r2, #0
    5a5c:	84da      	strh	r2, [r3, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    5a5e:	687b      	ldr	r3, [r7, #4]
    5a60:	2200      	movs	r2, #0
    5a62:	851a      	strh	r2, [r3, #40]	; 0x28
	config->sample_length                 = 0;
    5a64:	687b      	ldr	r3, [r7, #4]
    5a66:	2200      	movs	r2, #0
    5a68:	75da      	strb	r2, [r3, #23]
	config->pin_scan.offset_start_scan    = 0;
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	222b      	movs	r2, #43	; 0x2b
    5a6e:	2100      	movs	r1, #0
    5a70:	5499      	strb	r1, [r3, r2]
	config->pin_scan.inputs_to_scan       = 0;
    5a72:	687b      	ldr	r3, [r7, #4]
    5a74:	222c      	movs	r2, #44	; 0x2c
    5a76:	2100      	movs	r1, #0
    5a78:	5499      	strb	r1, [r3, r2]
}
    5a7a:	46c0      	nop			; (mov r8, r8)
    5a7c:	46bd      	mov	sp, r7
    5a7e:	b002      	add	sp, #8
    5a80:	bd80      	pop	{r7, pc}
    5a82:	46c0      	nop			; (mov r8, r8)

00005a84 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    5a84:	b580      	push	{r7, lr}
    5a86:	b098      	sub	sp, #96	; 0x60
    5a88:	af00      	add	r7, sp, #0
    5a8a:	6078      	str	r0, [r7, #4]
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    5a8c:	230c      	movs	r3, #12
    5a8e:	18fa      	adds	r2, r7, r3
    5a90:	4b15      	ldr	r3, [pc, #84]	; (5ae8 <_adc_configure_ain_pin+0x64>)
    5a92:	0010      	movs	r0, r2
    5a94:	0019      	movs	r1, r3
    5a96:	2350      	movs	r3, #80	; 0x50
    5a98:	001a      	movs	r2, r3
    5a9a:	4b14      	ldr	r3, [pc, #80]	; (5aec <_adc_configure_ain_pin+0x68>)
    5a9c:	4798      	blx	r3
#else
#  error ADC pin mappings are not defined for this device.
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;
    5a9e:	4b14      	ldr	r3, [pc, #80]	; (5af0 <_adc_configure_ain_pin+0x6c>)
    5aa0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (pin <= ADC_EXTCHANNEL_MSB) {
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	2b13      	cmp	r3, #19
    5aa6:	d81a      	bhi.n	5ade <_adc_configure_ain_pin+0x5a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    5aa8:	230c      	movs	r3, #12
    5aaa:	18fb      	adds	r3, r7, r3
    5aac:	687a      	ldr	r2, [r7, #4]
    5aae:	0092      	lsls	r2, r2, #2
    5ab0:	58d3      	ldr	r3, [r2, r3]
    5ab2:	65fb      	str	r3, [r7, #92]	; 0x5c

		Assert(pin_map_result != PIN_INVALID_ADC_AIN);

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);
    5ab4:	2308      	movs	r3, #8
    5ab6:	18fb      	adds	r3, r7, r3
    5ab8:	0018      	movs	r0, r3
    5aba:	4b0e      	ldr	r3, [pc, #56]	; (5af4 <_adc_configure_ain_pin+0x70>)
    5abc:	4798      	blx	r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    5abe:	2308      	movs	r3, #8
    5ac0:	18fb      	adds	r3, r7, r3
    5ac2:	2200      	movs	r2, #0
    5ac4:	709a      	strb	r2, [r3, #2]
		config.mux_position = 1;
    5ac6:	2308      	movs	r3, #8
    5ac8:	18fb      	adds	r3, r7, r3
    5aca:	2201      	movs	r2, #1
    5acc:	701a      	strb	r2, [r3, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    5ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    5ad0:	b2db      	uxtb	r3, r3
    5ad2:	2208      	movs	r2, #8
    5ad4:	18ba      	adds	r2, r7, r2
    5ad6:	0011      	movs	r1, r2
    5ad8:	0018      	movs	r0, r3
    5ada:	4b07      	ldr	r3, [pc, #28]	; (5af8 <_adc_configure_ain_pin+0x74>)
    5adc:	4798      	blx	r3
	}
}
    5ade:	46c0      	nop			; (mov r8, r8)
    5ae0:	46bd      	mov	sp, r7
    5ae2:	b018      	add	sp, #96	; 0x60
    5ae4:	bd80      	pop	{r7, pc}
    5ae6:	46c0      	nop			; (mov r8, r8)
    5ae8:	00012e78 	.word	0x00012e78
    5aec:	000107ad 	.word	0x000107ad
    5af0:	0000ffff 	.word	0x0000ffff
    5af4:	00005949 	.word	0x00005949
    5af8:	0000a789 	.word	0x0000a789

00005afc <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
    5afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5afe:	b089      	sub	sp, #36	; 0x24
    5b00:	af00      	add	r7, sp, #0
    5b02:	6078      	str	r0, [r7, #4]
    5b04:	6039      	str	r1, [r7, #0]
	uint8_t adjres = 0;
    5b06:	231f      	movs	r3, #31
    5b08:	18fb      	adds	r3, r7, r3
    5b0a:	2200      	movs	r2, #0
    5b0c:	701a      	strb	r2, [r3, #0]
	uint32_t resolution = ADC_RESOLUTION_16BIT;
    5b0e:	2310      	movs	r3, #16
    5b10:	61bb      	str	r3, [r7, #24]
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    5b12:	2317      	movs	r3, #23
    5b14:	18fb      	adds	r3, r7, r3
    5b16:	2200      	movs	r2, #0
    5b18:	701a      	strb	r2, [r3, #0]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	681b      	ldr	r3, [r3, #0]
    5b1e:	613b      	str	r3, [r7, #16]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5b20:	230c      	movs	r3, #12
    5b22:	18fb      	adds	r3, r7, r3
    5b24:	0018      	movs	r0, r3
    5b26:	4bce      	ldr	r3, [pc, #824]	; (5e60 <_adc_set_config+0x364>)
    5b28:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->clock_source;
    5b2a:	683b      	ldr	r3, [r7, #0]
    5b2c:	781a      	ldrb	r2, [r3, #0]
    5b2e:	230c      	movs	r3, #12
    5b30:	18fb      	adds	r3, r7, r3
    5b32:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    5b34:	230c      	movs	r3, #12
    5b36:	18fb      	adds	r3, r7, r3
    5b38:	0019      	movs	r1, r3
    5b3a:	201e      	movs	r0, #30
    5b3c:	4bc9      	ldr	r3, [pc, #804]	; (5e64 <_adc_set_config+0x368>)
    5b3e:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    5b40:	201e      	movs	r0, #30
    5b42:	4bc9      	ldr	r3, [pc, #804]	; (5e68 <_adc_set_config+0x36c>)
    5b44:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
    5b46:	683b      	ldr	r3, [r7, #0]
    5b48:	222c      	movs	r2, #44	; 0x2c
    5b4a:	5c9b      	ldrb	r3, [r3, r2]
    5b4c:	2b00      	cmp	r3, #0
    5b4e:	d040      	beq.n	5bd2 <_adc_set_config+0xd6>
		uint8_t offset = config->pin_scan.offset_start_scan;
    5b50:	2316      	movs	r3, #22
    5b52:	18fb      	adds	r3, r7, r3
    5b54:	683a      	ldr	r2, [r7, #0]
    5b56:	212b      	movs	r1, #43	; 0x2b
    5b58:	5c52      	ldrb	r2, [r2, r1]
    5b5a:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
    5b5c:	683b      	ldr	r3, [r7, #0]
    5b5e:	7b19      	ldrb	r1, [r3, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
    5b60:	2315      	movs	r3, #21
    5b62:	18fb      	adds	r3, r7, r3
    5b64:	2216      	movs	r2, #22
    5b66:	18ba      	adds	r2, r7, r2
    5b68:	7812      	ldrb	r2, [r2, #0]
    5b6a:	188a      	adds	r2, r1, r2
    5b6c:	701a      	strb	r2, [r3, #0]
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;
    5b6e:	683b      	ldr	r3, [r7, #0]
    5b70:	222c      	movs	r2, #44	; 0x2c
    5b72:	5c99      	ldrb	r1, [r3, r2]
	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
    5b74:	230f      	movs	r3, #15
    5b76:	18fb      	adds	r3, r7, r3
    5b78:	2215      	movs	r2, #21
    5b7a:	18ba      	adds	r2, r7, r2
    5b7c:	7812      	ldrb	r2, [r2, #0]
    5b7e:	188a      	adds	r2, r1, r2
    5b80:	701a      	strb	r2, [r3, #0]
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    5b82:	e018      	b.n	5bb6 <_adc_set_config+0xba>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    5b84:	2316      	movs	r3, #22
    5b86:	18fb      	adds	r3, r7, r3
    5b88:	781b      	ldrb	r3, [r3, #0]
    5b8a:	220f      	movs	r2, #15
    5b8c:	4013      	ands	r3, r2
    5b8e:	683a      	ldr	r2, [r7, #0]
    5b90:	7b12      	ldrb	r2, [r2, #12]
    5b92:	189b      	adds	r3, r3, r2
    5b94:	0018      	movs	r0, r3
    5b96:	4bb5      	ldr	r3, [pc, #724]	; (5e6c <_adc_set_config+0x370>)
    5b98:	4798      	blx	r3
			start_pin++;
    5b9a:	2315      	movs	r3, #21
    5b9c:	18fb      	adds	r3, r7, r3
    5b9e:	781a      	ldrb	r2, [r3, #0]
    5ba0:	2315      	movs	r3, #21
    5ba2:	18fb      	adds	r3, r7, r3
    5ba4:	3201      	adds	r2, #1
    5ba6:	701a      	strb	r2, [r3, #0]
			offset++;
    5ba8:	2316      	movs	r3, #22
    5baa:	18fb      	adds	r3, r7, r3
    5bac:	781a      	ldrb	r2, [r3, #0]
    5bae:	2316      	movs	r3, #22
    5bb0:	18fb      	adds	r3, r7, r3
    5bb2:	3201      	adds	r2, #1
    5bb4:	701a      	strb	r2, [r3, #0]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
    5bb6:	2315      	movs	r3, #21
    5bb8:	18fa      	adds	r2, r7, r3
    5bba:	230f      	movs	r3, #15
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	7812      	ldrb	r2, [r2, #0]
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	429a      	cmp	r2, r3
    5bc4:	d3de      	bcc.n	5b84 <_adc_set_config+0x88>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
    5bc6:	683b      	ldr	r3, [r7, #0]
    5bc8:	89db      	ldrh	r3, [r3, #14]
    5bca:	0018      	movs	r0, r3
    5bcc:	4ba7      	ldr	r3, [pc, #668]	; (5e6c <_adc_set_config+0x370>)
    5bce:	4798      	blx	r3
    5bd0:	e009      	b.n	5be6 <_adc_set_config+0xea>
	} else {
		_adc_configure_ain_pin(config->positive_input);
    5bd2:	683b      	ldr	r3, [r7, #0]
    5bd4:	7b1b      	ldrb	r3, [r3, #12]
    5bd6:	0018      	movs	r0, r3
    5bd8:	4ba4      	ldr	r3, [pc, #656]	; (5e6c <_adc_set_config+0x370>)
    5bda:	4798      	blx	r3
		_adc_configure_ain_pin(config->negative_input);
    5bdc:	683b      	ldr	r3, [r7, #0]
    5bde:	89db      	ldrh	r3, [r3, #14]
    5be0:	0018      	movs	r0, r3
    5be2:	4ba2      	ldr	r3, [pc, #648]	; (5e6c <_adc_set_config+0x370>)
    5be4:	4798      	blx	r3
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    5be6:	683b      	ldr	r3, [r7, #0]
    5be8:	7d5b      	ldrb	r3, [r3, #21]
    5bea:	009b      	lsls	r3, r3, #2
    5bec:	b2da      	uxtb	r2, r3
    5bee:	693b      	ldr	r3, [r7, #16]
    5bf0:	701a      	strb	r2, [r3, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    5bf2:	683b      	ldr	r3, [r7, #0]
    5bf4:	7d9b      	ldrb	r3, [r3, #22]
    5bf6:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    5bf8:	b25a      	sxtb	r2, r3
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);
    5bfa:	683b      	ldr	r3, [r7, #0]
    5bfc:	785b      	ldrb	r3, [r3, #1]

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
    5bfe:	b25b      	sxtb	r3, r3
    5c00:	4313      	orrs	r3, r2
    5c02:	b25b      	sxtb	r3, r3
    5c04:	b2da      	uxtb	r2, r3
    5c06:	693b      	ldr	r3, [r7, #16]
    5c08:	705a      	strb	r2, [r3, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
    5c0a:	683b      	ldr	r3, [r7, #0]
    5c0c:	791b      	ldrb	r3, [r3, #4]
    5c0e:	2b34      	cmp	r3, #52	; 0x34
    5c10:	d846      	bhi.n	5ca0 <_adc_set_config+0x1a4>
    5c12:	009a      	lsls	r2, r3, #2
    5c14:	4b96      	ldr	r3, [pc, #600]	; (5e70 <_adc_set_config+0x374>)
    5c16:	18d3      	adds	r3, r2, r3
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	469f      	mov	pc, r3

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
    5c1c:	231f      	movs	r3, #31
    5c1e:	18fb      	adds	r3, r7, r3
    5c20:	683a      	ldr	r2, [r7, #0]
    5c22:	7c52      	ldrb	r2, [r2, #17]
    5c24:	701a      	strb	r2, [r3, #0]
		accumulate = config->accumulate_samples;
    5c26:	2317      	movs	r3, #23
    5c28:	18fb      	adds	r3, r7, r3
    5c2a:	683a      	ldr	r2, [r7, #0]
    5c2c:	7c12      	ldrb	r2, [r2, #16]
    5c2e:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    5c30:	2310      	movs	r3, #16
    5c32:	61bb      	str	r3, [r7, #24]
		break;
    5c34:	e036      	b.n	5ca4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    5c36:	231f      	movs	r3, #31
    5c38:	18fb      	adds	r3, r7, r3
    5c3a:	2201      	movs	r2, #1
    5c3c:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    5c3e:	2317      	movs	r3, #23
    5c40:	18fb      	adds	r3, r7, r3
    5c42:	2202      	movs	r2, #2
    5c44:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    5c46:	2310      	movs	r3, #16
    5c48:	61bb      	str	r3, [r7, #24]
		break;
    5c4a:	e02b      	b.n	5ca4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
    5c4c:	231f      	movs	r3, #31
    5c4e:	18fb      	adds	r3, r7, r3
    5c50:	2202      	movs	r2, #2
    5c52:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    5c54:	2317      	movs	r3, #23
    5c56:	18fb      	adds	r3, r7, r3
    5c58:	2204      	movs	r2, #4
    5c5a:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    5c5c:	2310      	movs	r3, #16
    5c5e:	61bb      	str	r3, [r7, #24]
		break;
    5c60:	e020      	b.n	5ca4 <_adc_set_config+0x1a8>
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
    5c62:	231f      	movs	r3, #31
    5c64:	18fb      	adds	r3, r7, r3
    5c66:	2201      	movs	r2, #1
    5c68:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    5c6a:	2317      	movs	r3, #23
    5c6c:	18fb      	adds	r3, r7, r3
    5c6e:	2206      	movs	r2, #6
    5c70:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    5c72:	2310      	movs	r3, #16
    5c74:	61bb      	str	r3, [r7, #24]
		break;
    5c76:	e015      	b.n	5ca4 <_adc_set_config+0x1a8>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    5c78:	231f      	movs	r3, #31
    5c7a:	18fb      	adds	r3, r7, r3
    5c7c:	2200      	movs	r2, #0
    5c7e:	701a      	strb	r2, [r3, #0]
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    5c80:	2317      	movs	r3, #23
    5c82:	18fb      	adds	r3, r7, r3
    5c84:	2208      	movs	r2, #8
    5c86:	701a      	strb	r2, [r3, #0]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
    5c88:	2310      	movs	r3, #16
    5c8a:	61bb      	str	r3, [r7, #24]
		break;
    5c8c:	e00a      	b.n	5ca4 <_adc_set_config+0x1a8>
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
    5c8e:	2330      	movs	r3, #48	; 0x30
    5c90:	61bb      	str	r3, [r7, #24]
		break;
    5c92:	e007      	b.n	5ca4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
    5c94:	2320      	movs	r3, #32
    5c96:	61bb      	str	r3, [r7, #24]
		break;
    5c98:	e004      	b.n	5ca4 <_adc_set_config+0x1a8>
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
    5c9a:	2300      	movs	r3, #0
    5c9c:	61bb      	str	r3, [r7, #24]
		break;
    5c9e:	e001      	b.n	5ca4 <_adc_set_config+0x1a8>

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
    5ca0:	2317      	movs	r3, #23
    5ca2:	e1ae      	b.n	6002 <_adc_set_config+0x506>
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    5ca4:	231f      	movs	r3, #31
    5ca6:	18fb      	adds	r3, r7, r3
    5ca8:	781b      	ldrb	r3, [r3, #0]
    5caa:	011b      	lsls	r3, r3, #4
    5cac:	b2db      	uxtb	r3, r3
    5cae:	2270      	movs	r2, #112	; 0x70
    5cb0:	4013      	ands	r3, r2
    5cb2:	b2da      	uxtb	r2, r3
    5cb4:	2317      	movs	r3, #23
    5cb6:	18fb      	adds	r3, r7, r3
    5cb8:	781b      	ldrb	r3, [r3, #0]
    5cba:	4313      	orrs	r3, r2
    5cbc:	b2da      	uxtb	r2, r3
    5cbe:	693b      	ldr	r3, [r7, #16]
    5cc0:	709a      	strb	r2, [r3, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	7ddb      	ldrb	r3, [r3, #23]
    5cc6:	2b3f      	cmp	r3, #63	; 0x3f
    5cc8:	d901      	bls.n	5cce <_adc_set_config+0x1d2>
		return STATUS_ERR_INVALID_ARG;
    5cca:	2317      	movs	r3, #23
    5ccc:	e199      	b.n	6002 <_adc_set_config+0x506>
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
    5cce:	683b      	ldr	r3, [r7, #0]
    5cd0:	7dda      	ldrb	r2, [r3, #23]
	/* Check validity of sample length value */
	if (config->sample_length > 63) {
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
    5cd2:	693b      	ldr	r3, [r7, #16]
    5cd4:	70da      	strb	r2, [r3, #3]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
    5cd6:	46c0      	nop			; (mov r8, r8)
    5cd8:	687b      	ldr	r3, [r7, #4]
    5cda:	0018      	movs	r0, r3
    5cdc:	4b65      	ldr	r3, [pc, #404]	; (5e74 <_adc_set_config+0x378>)
    5cde:	4798      	blx	r3
    5ce0:	1e03      	subs	r3, r0, #0
    5ce2:	d1f9      	bne.n	5cd8 <_adc_set_config+0x1dc>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
			config->clock_prescaler |
    5ce4:	683b      	ldr	r3, [r7, #0]
    5ce6:	885a      	ldrh	r2, [r3, #2]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    5ce8:	69bb      	ldr	r3, [r7, #24]
    5cea:	b29b      	uxth	r3, r3
    5cec:	4313      	orrs	r3, r2
    5cee:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    5cf0:	683b      	ldr	r3, [r7, #0]
    5cf2:	2124      	movs	r1, #36	; 0x24
    5cf4:	5c5b      	ldrb	r3, [r3, r1]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    5cf6:	b29b      	uxth	r3, r3
    5cf8:	00db      	lsls	r3, r3, #3
    5cfa:	b29b      	uxth	r3, r3
    5cfc:	4313      	orrs	r3, r2
    5cfe:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    5d00:	683b      	ldr	r3, [r7, #0]
    5d02:	7d1b      	ldrb	r3, [r3, #20]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    5d04:	b29b      	uxth	r3, r3
    5d06:	009b      	lsls	r3, r3, #2
    5d08:	b29b      	uxth	r3, r3
    5d0a:	4313      	orrs	r3, r2
    5d0c:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    5d0e:	683b      	ldr	r3, [r7, #0]
    5d10:	7c9b      	ldrb	r3, [r3, #18]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    5d12:	b29b      	uxth	r3, r3
    5d14:	18db      	adds	r3, r3, r3
    5d16:	b29b      	uxth	r3, r3
    5d18:	4313      	orrs	r3, r2
    5d1a:	b29a      	uxth	r2, r3
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    5d1c:	683b      	ldr	r3, [r7, #0]
    5d1e:	7cdb      	ldrb	r3, [r3, #19]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
    5d20:	b29b      	uxth	r3, r3
    5d22:	4313      	orrs	r3, r2
    5d24:	b29a      	uxth	r2, r3
    5d26:	693b      	ldr	r3, [r7, #16]
    5d28:	809a      	strh	r2, [r3, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    5d2a:	683b      	ldr	r3, [r7, #0]
    5d2c:	7e1b      	ldrb	r3, [r3, #24]
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d100      	bne.n	5d34 <_adc_set_config+0x238>
    5d32:	e0c4      	b.n	5ebe <_adc_set_config+0x3c2>
		switch (resolution) {
    5d34:	69bb      	ldr	r3, [r7, #24]
    5d36:	2b10      	cmp	r3, #16
    5d38:	d100      	bne.n	5d3c <_adc_set_config+0x240>
    5d3a:	e076      	b.n	5e2a <_adc_set_config+0x32e>
    5d3c:	d802      	bhi.n	5d44 <_adc_set_config+0x248>
    5d3e:	2b00      	cmp	r3, #0
    5d40:	d04d      	beq.n	5dde <_adc_set_config+0x2e2>
    5d42:	e0bc      	b.n	5ebe <_adc_set_config+0x3c2>
    5d44:	2b20      	cmp	r3, #32
    5d46:	d023      	beq.n	5d90 <_adc_set_config+0x294>
    5d48:	2b30      	cmp	r3, #48	; 0x30
    5d4a:	d000      	beq.n	5d4e <_adc_set_config+0x252>
    5d4c:	e0b7      	b.n	5ebe <_adc_set_config+0x3c2>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    5d4e:	683b      	ldr	r3, [r7, #0]
    5d50:	7cdb      	ldrb	r3, [r3, #19]
    5d52:	2b00      	cmp	r3, #0
    5d54:	d011      	beq.n	5d7a <_adc_set_config+0x27e>
					(config->window.window_lower_value > 127 ||
    5d56:	683b      	ldr	r3, [r7, #0]
    5d58:	69db      	ldr	r3, [r3, #28]

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
    5d5a:	2b7f      	cmp	r3, #127	; 0x7f
    5d5c:	dc0b      	bgt.n	5d76 <_adc_set_config+0x27a>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    5d5e:	683b      	ldr	r3, [r7, #0]
    5d60:	69db      	ldr	r3, [r3, #28]
	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
    5d62:	3380      	adds	r3, #128	; 0x80
    5d64:	db07      	blt.n	5d76 <_adc_set_config+0x27a>
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    5d66:	683b      	ldr	r3, [r7, #0]
    5d68:	6a1b      	ldr	r3, [r3, #32]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
    5d6a:	2b7f      	cmp	r3, #127	; 0x7f
    5d6c:	dc03      	bgt.n	5d76 <_adc_set_config+0x27a>
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
    5d6e:	683b      	ldr	r3, [r7, #0]
    5d70:	6a1b      	ldr	r3, [r3, #32]
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
    5d72:	3380      	adds	r3, #128	; 0x80
    5d74:	da01      	bge.n	5d7a <_adc_set_config+0x27e>
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5d76:	2317      	movs	r3, #23
    5d78:	e143      	b.n	6002 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	69db      	ldr	r3, [r3, #28]
    5d7e:	2bff      	cmp	r3, #255	; 0xff
    5d80:	dc04      	bgt.n	5d8c <_adc_set_config+0x290>
					config->window.window_upper_value > 255){
    5d82:	683b      	ldr	r3, [r7, #0]
    5d84:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
    5d86:	2bff      	cmp	r3, #255	; 0xff
    5d88:	dc00      	bgt.n	5d8c <_adc_set_config+0x290>
    5d8a:	e091      	b.n	5eb0 <_adc_set_config+0x3b4>
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5d8c:	2317      	movs	r3, #23
    5d8e:	e138      	b.n	6002 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    5d90:	683b      	ldr	r3, [r7, #0]
    5d92:	7cdb      	ldrb	r3, [r3, #19]
    5d94:	2b00      	cmp	r3, #0
    5d96:	d015      	beq.n	5dc4 <_adc_set_config+0x2c8>
					(config->window.window_lower_value > 511 ||
    5d98:	683b      	ldr	r3, [r7, #0]
    5d9a:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
    5d9c:	4a36      	ldr	r2, [pc, #216]	; (5e78 <_adc_set_config+0x37c>)
    5d9e:	4293      	cmp	r3, r2
    5da0:	dc0e      	bgt.n	5dc0 <_adc_set_config+0x2c4>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    5da2:	683b      	ldr	r3, [r7, #0]
    5da4:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
    5da6:	4a35      	ldr	r2, [pc, #212]	; (5e7c <_adc_set_config+0x380>)
    5da8:	4293      	cmp	r3, r2
    5daa:	db09      	blt.n	5dc0 <_adc_set_config+0x2c4>
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    5dac:	683b      	ldr	r3, [r7, #0]
    5dae:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
    5db0:	4a31      	ldr	r2, [pc, #196]	; (5e78 <_adc_set_config+0x37c>)
    5db2:	4293      	cmp	r3, r2
    5db4:	dc04      	bgt.n	5dc0 <_adc_set_config+0x2c4>
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
    5db6:	683b      	ldr	r3, [r7, #0]
    5db8:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
    5dba:	4a30      	ldr	r2, [pc, #192]	; (5e7c <_adc_set_config+0x380>)
    5dbc:	4293      	cmp	r3, r2
    5dbe:	da01      	bge.n	5dc4 <_adc_set_config+0x2c8>
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5dc0:	2317      	movs	r3, #23
    5dc2:	e11e      	b.n	6002 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 1023 ||
    5dc4:	683b      	ldr	r3, [r7, #0]
    5dc6:	69db      	ldr	r3, [r3, #28]
    5dc8:	4a2d      	ldr	r2, [pc, #180]	; (5e80 <_adc_set_config+0x384>)
    5dca:	4293      	cmp	r3, r2
    5dcc:	dc05      	bgt.n	5dda <_adc_set_config+0x2de>
					config->window.window_upper_value > 1023){
    5dce:	683b      	ldr	r3, [r7, #0]
    5dd0:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value < -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
    5dd2:	4a2b      	ldr	r2, [pc, #172]	; (5e80 <_adc_set_config+0x384>)
    5dd4:	4293      	cmp	r3, r2
    5dd6:	dc00      	bgt.n	5dda <_adc_set_config+0x2de>
    5dd8:	e06c      	b.n	5eb4 <_adc_set_config+0x3b8>
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5dda:	2317      	movs	r3, #23
    5ddc:	e111      	b.n	6002 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	7cdb      	ldrb	r3, [r3, #19]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d015      	beq.n	5e12 <_adc_set_config+0x316>
					(config->window.window_lower_value > 2047 ||
    5de6:	683b      	ldr	r3, [r7, #0]
    5de8:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
    5dea:	4a26      	ldr	r2, [pc, #152]	; (5e84 <_adc_set_config+0x388>)
    5dec:	4293      	cmp	r3, r2
    5dee:	dc0e      	bgt.n	5e0e <_adc_set_config+0x312>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    5df0:	683b      	ldr	r3, [r7, #0]
    5df2:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
    5df4:	4a24      	ldr	r2, [pc, #144]	; (5e88 <_adc_set_config+0x38c>)
    5df6:	4293      	cmp	r3, r2
    5df8:	db09      	blt.n	5e0e <_adc_set_config+0x312>
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    5dfa:	683b      	ldr	r3, [r7, #0]
    5dfc:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
    5dfe:	4a21      	ldr	r2, [pc, #132]	; (5e84 <_adc_set_config+0x388>)
    5e00:	4293      	cmp	r3, r2
    5e02:	dc04      	bgt.n	5e0e <_adc_set_config+0x312>
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
    5e04:	683b      	ldr	r3, [r7, #0]
    5e06:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
    5e08:	4a1f      	ldr	r2, [pc, #124]	; (5e88 <_adc_set_config+0x38c>)
    5e0a:	4293      	cmp	r3, r2
    5e0c:	da01      	bge.n	5e12 <_adc_set_config+0x316>
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5e0e:	2317      	movs	r3, #23
    5e10:	e0f7      	b.n	6002 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 4095 ||
    5e12:	683b      	ldr	r3, [r7, #0]
    5e14:	69db      	ldr	r3, [r3, #28]
    5e16:	4a1d      	ldr	r2, [pc, #116]	; (5e8c <_adc_set_config+0x390>)
    5e18:	4293      	cmp	r3, r2
    5e1a:	dc04      	bgt.n	5e26 <_adc_set_config+0x32a>
					config->window.window_upper_value > 4095){
    5e1c:	683b      	ldr	r3, [r7, #0]
    5e1e:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
    5e20:	4a1a      	ldr	r2, [pc, #104]	; (5e8c <_adc_set_config+0x390>)
    5e22:	4293      	cmp	r3, r2
    5e24:	dd48      	ble.n	5eb8 <_adc_set_config+0x3bc>
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5e26:	2317      	movs	r3, #23
    5e28:	e0eb      	b.n	6002 <_adc_set_config+0x506>
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    5e2a:	683b      	ldr	r3, [r7, #0]
    5e2c:	7cdb      	ldrb	r3, [r3, #19]
    5e2e:	2b00      	cmp	r3, #0
    5e30:	d032      	beq.n	5e98 <_adc_set_config+0x39c>
					(config->window.window_lower_value > 32767 ||
    5e32:	683b      	ldr	r3, [r7, #0]
    5e34:	69db      	ldr	r3, [r3, #28]
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
    5e36:	4a16      	ldr	r2, [pc, #88]	; (5e90 <_adc_set_config+0x394>)
    5e38:	4293      	cmp	r3, r2
    5e3a:	dc0e      	bgt.n	5e5a <_adc_set_config+0x35e>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	69db      	ldr	r3, [r3, #28]
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
    5e40:	4a14      	ldr	r2, [pc, #80]	; (5e94 <_adc_set_config+0x398>)
    5e42:	4293      	cmp	r3, r2
    5e44:	db09      	blt.n	5e5a <_adc_set_config+0x35e>
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    5e46:	683b      	ldr	r3, [r7, #0]
    5e48:	6a1b      	ldr	r3, [r3, #32]
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
    5e4a:	4a11      	ldr	r2, [pc, #68]	; (5e90 <_adc_set_config+0x394>)
    5e4c:	4293      	cmp	r3, r2
    5e4e:	dc04      	bgt.n	5e5a <_adc_set_config+0x35e>
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
    5e50:	683b      	ldr	r3, [r7, #0]
    5e52:	6a1b      	ldr	r3, [r3, #32]
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
    5e54:	4a0f      	ldr	r2, [pc, #60]	; (5e94 <_adc_set_config+0x398>)
    5e56:	4293      	cmp	r3, r2
    5e58:	da1e      	bge.n	5e98 <_adc_set_config+0x39c>
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5e5a:	2317      	movs	r3, #23
    5e5c:	e0d1      	b.n	6002 <_adc_set_config+0x506>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	000058d5 	.word	0x000058d5
    5e64:	0000a49d 	.word	0x0000a49d
    5e68:	0000a4e1 	.word	0x0000a4e1
    5e6c:	00005a85 	.word	0x00005a85
    5e70:	00012ec8 	.word	0x00012ec8
    5e74:	000059b1 	.word	0x000059b1
    5e78:	000001ff 	.word	0x000001ff
    5e7c:	fffffe00 	.word	0xfffffe00
    5e80:	000003ff 	.word	0x000003ff
    5e84:	000007ff 	.word	0x000007ff
    5e88:	fffff800 	.word	0xfffff800
    5e8c:	00000fff 	.word	0x00000fff
    5e90:	00007fff 	.word	0x00007fff
    5e94:	ffff8000 	.word	0xffff8000
			} else if (config->window.window_lower_value > 65535 ||
    5e98:	683b      	ldr	r3, [r7, #0]
    5e9a:	69db      	ldr	r3, [r3, #28]
    5e9c:	4a5b      	ldr	r2, [pc, #364]	; (600c <_adc_set_config+0x510>)
    5e9e:	4293      	cmp	r3, r2
    5ea0:	dc04      	bgt.n	5eac <_adc_set_config+0x3b0>
					config->window.window_upper_value > 65535){
    5ea2:	683b      	ldr	r3, [r7, #0]
    5ea4:	6a1b      	ldr	r3, [r3, #32]
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
    5ea6:	4a59      	ldr	r2, [pc, #356]	; (600c <_adc_set_config+0x510>)
    5ea8:	4293      	cmp	r3, r2
    5eaa:	dd07      	ble.n	5ebc <_adc_set_config+0x3c0>
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
    5eac:	2317      	movs	r3, #23
    5eae:	e0a8      	b.n	6002 <_adc_set_config+0x506>
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    5eb0:	46c0      	nop			; (mov r8, r8)
    5eb2:	e004      	b.n	5ebe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    5eb4:	46c0      	nop			; (mov r8, r8)
    5eb6:	e002      	b.n	5ebe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    5eb8:	46c0      	nop			; (mov r8, r8)
    5eba:	e000      	b.n	5ebe <_adc_set_config+0x3c2>
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
    5ebc:	46c0      	nop			; (mov r8, r8)
		}
	}

	while (adc_is_syncing(module_inst)) {
    5ebe:	46c0      	nop			; (mov r8, r8)
    5ec0:	687b      	ldr	r3, [r7, #4]
    5ec2:	0018      	movs	r0, r3
    5ec4:	4b52      	ldr	r3, [pc, #328]	; (6010 <_adc_set_config+0x514>)
    5ec6:	4798      	blx	r3
    5ec8:	1e03      	subs	r3, r0, #0
    5eca:	d1f9      	bne.n	5ec0 <_adc_set_config+0x3c4>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
    5ecc:	683b      	ldr	r3, [r7, #0]
    5ece:	7e1a      	ldrb	r2, [r3, #24]
    5ed0:	693b      	ldr	r3, [r7, #16]
    5ed2:	721a      	strb	r2, [r3, #8]

	while (adc_is_syncing(module_inst)) {
    5ed4:	46c0      	nop			; (mov r8, r8)
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	0018      	movs	r0, r3
    5eda:	4b4d      	ldr	r3, [pc, #308]	; (6010 <_adc_set_config+0x514>)
    5edc:	4798      	blx	r3
    5ede:	1e03      	subs	r3, r0, #0
    5ee0:	d1f9      	bne.n	5ed6 <_adc_set_config+0x3da>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;
    5ee2:	683b      	ldr	r3, [r7, #0]
    5ee4:	69db      	ldr	r3, [r3, #28]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
    5ee6:	b29a      	uxth	r2, r3
    5ee8:	693b      	ldr	r3, [r7, #16]
    5eea:	839a      	strh	r2, [r3, #28]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
    5eec:	46c0      	nop			; (mov r8, r8)
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	0018      	movs	r0, r3
    5ef2:	4b47      	ldr	r3, [pc, #284]	; (6010 <_adc_set_config+0x514>)
    5ef4:	4798      	blx	r3
    5ef6:	1e03      	subs	r3, r0, #0
    5ef8:	d1f9      	bne.n	5eee <_adc_set_config+0x3f2>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
    5efa:	683b      	ldr	r3, [r7, #0]
    5efc:	6a1b      	ldr	r3, [r3, #32]
    5efe:	b29a      	uxth	r2, r3
    5f00:	693b      	ldr	r3, [r7, #16]
    5f02:	841a      	strh	r2, [r3, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    5f04:	2314      	movs	r3, #20
    5f06:	18fb      	adds	r3, r7, r3
    5f08:	683a      	ldr	r2, [r7, #0]
    5f0a:	212c      	movs	r1, #44	; 0x2c
    5f0c:	5c52      	ldrb	r2, [r2, r1]
    5f0e:	701a      	strb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
    5f10:	2314      	movs	r3, #20
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	2b00      	cmp	r3, #0
    5f18:	d006      	beq.n	5f28 <_adc_set_config+0x42c>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
    5f1a:	2314      	movs	r3, #20
    5f1c:	18fb      	adds	r3, r7, r3
    5f1e:	781a      	ldrb	r2, [r3, #0]
    5f20:	2314      	movs	r3, #20
    5f22:	18fb      	adds	r3, r7, r3
    5f24:	3a01      	subs	r2, #1
    5f26:	701a      	strb	r2, [r3, #0]
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    5f28:	2314      	movs	r3, #20
    5f2a:	18fb      	adds	r3, r7, r3
    5f2c:	781b      	ldrb	r3, [r3, #0]
    5f2e:	2b0f      	cmp	r3, #15
    5f30:	d804      	bhi.n	5f3c <_adc_set_config+0x440>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    5f32:	683b      	ldr	r3, [r7, #0]
    5f34:	222b      	movs	r2, #43	; 0x2b
    5f36:	5c9b      	ldrb	r3, [r3, r2]
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    5f38:	2b0f      	cmp	r3, #15
    5f3a:	d901      	bls.n	5f40 <_adc_set_config+0x444>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
    5f3c:	2317      	movs	r3, #23
    5f3e:	e060      	b.n	6002 <_adc_set_config+0x506>
	}

	while (adc_is_syncing(module_inst)) {
    5f40:	46c0      	nop			; (mov r8, r8)
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	0018      	movs	r0, r3
    5f46:	4b32      	ldr	r3, [pc, #200]	; (6010 <_adc_set_config+0x514>)
    5f48:	4798      	blx	r3
    5f4a:	1e03      	subs	r3, r0, #0
    5f4c:	d1f9      	bne.n	5f42 <_adc_set_config+0x446>
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    5f4e:	683b      	ldr	r3, [r7, #0]
    5f50:	689b      	ldr	r3, [r3, #8]
			(config->pin_scan.offset_start_scan <<
    5f52:	683a      	ldr	r2, [r7, #0]
    5f54:	212b      	movs	r1, #43	; 0x2b
    5f56:	5c52      	ldrb	r2, [r2, r1]
    5f58:	0512      	lsls	r2, r2, #20
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
    5f5a:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    5f5c:	2214      	movs	r2, #20
    5f5e:	18ba      	adds	r2, r7, r2
    5f60:	7812      	ldrb	r2, [r2, #0]
    5f62:	0412      	lsls	r2, r2, #16

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
    5f64:	4313      	orrs	r3, r2
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    5f66:	683a      	ldr	r2, [r7, #0]
    5f68:	89d2      	ldrh	r2, [r2, #14]
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    5f6a:	4313      	orrs	r3, r2
			config->negative_input |
			config->positive_input;
    5f6c:	683a      	ldr	r2, [r7, #0]
    5f6e:	7b12      	ldrb	r2, [r2, #12]
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
    5f70:	431a      	orrs	r2, r3
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
    5f72:	693b      	ldr	r3, [r7, #16]
    5f74:	611a      	str	r2, [r3, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
    5f76:	683b      	ldr	r3, [r7, #0]
    5f78:	222a      	movs	r2, #42	; 0x2a
    5f7a:	5c9a      	ldrb	r2, [r3, r2]
    5f7c:	693b      	ldr	r3, [r7, #16]
    5f7e:	751a      	strb	r2, [r3, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
    5f80:	693b      	ldr	r3, [r7, #16]
    5f82:	220f      	movs	r2, #15
    5f84:	759a      	strb	r2, [r3, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
    5f86:	683b      	ldr	r3, [r7, #0]
    5f88:	2224      	movs	r2, #36	; 0x24
    5f8a:	5c9b      	ldrb	r3, [r3, r2]
    5f8c:	2b00      	cmp	r3, #0
    5f8e:	d01e      	beq.n	5fce <_adc_set_config+0x4d2>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    5f90:	683b      	ldr	r3, [r7, #0]
    5f92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    5f94:	4a1f      	ldr	r2, [pc, #124]	; (6014 <_adc_set_config+0x518>)
    5f96:	4293      	cmp	r3, r2
    5f98:	d901      	bls.n	5f9e <_adc_set_config+0x4a2>
			return STATUS_ERR_INVALID_ARG;
    5f9a:	2317      	movs	r3, #23
    5f9c:	e031      	b.n	6002 <_adc_set_config+0x506>
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    5f9e:	683b      	ldr	r3, [r7, #0]
    5fa0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
    5fa2:	693b      	ldr	r3, [r7, #16]
    5fa4:	849a      	strh	r2, [r3, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    5fa6:	683b      	ldr	r3, [r7, #0]
    5fa8:	2228      	movs	r2, #40	; 0x28
    5faa:	5e9b      	ldrsh	r3, [r3, r2]
    5fac:	4a1a      	ldr	r2, [pc, #104]	; (6018 <_adc_set_config+0x51c>)
    5fae:	4293      	cmp	r3, r2
    5fb0:	dc05      	bgt.n	5fbe <_adc_set_config+0x4c2>
				config->correction.offset_correction < -2048) {
    5fb2:	683b      	ldr	r3, [r7, #0]
    5fb4:	2228      	movs	r2, #40	; 0x28
    5fb6:	5e9b      	ldrsh	r3, [r3, r2]
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
    5fb8:	4a18      	ldr	r2, [pc, #96]	; (601c <_adc_set_config+0x520>)
    5fba:	4293      	cmp	r3, r2
    5fbc:	da01      	bge.n	5fc2 <_adc_set_config+0x4c6>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
    5fbe:	2317      	movs	r3, #23
    5fc0:	e01f      	b.n	6002 <_adc_set_config+0x506>
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    5fc2:	683b      	ldr	r3, [r7, #0]
    5fc4:	2228      	movs	r2, #40	; 0x28
    5fc6:	5e9b      	ldrsh	r3, [r3, r2]
    5fc8:	b29a      	uxth	r2, r3
    5fca:	693b      	ldr	r3, [r7, #16]
    5fcc:	84da      	strh	r2, [r3, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
    5fce:	4b14      	ldr	r3, [pc, #80]	; (6020 <_adc_set_config+0x524>)
    5fd0:	681b      	ldr	r3, [r3, #0]
    5fd2:	08db      	lsrs	r3, r3, #3
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    5fd4:	b29b      	uxth	r3, r3
    5fd6:	021b      	lsls	r3, r3, #8
    5fd8:	b29a      	uxth	r2, r3
    5fda:	23e0      	movs	r3, #224	; 0xe0
    5fdc:	00db      	lsls	r3, r3, #3
    5fde:	4013      	ands	r3, r2
    5fe0:	b29a      	uxth	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
    5fe2:	4b10      	ldr	r3, [pc, #64]	; (6024 <_adc_set_config+0x528>)
    5fe4:	685c      	ldr	r4, [r3, #4]
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	0161      	lsls	r1, r4, #5
    5fea:	0edd      	lsrs	r5, r3, #27
    5fec:	430d      	orrs	r5, r1
    5fee:	0ee6      	lsrs	r6, r4, #27
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
    5ff0:	b2ab      	uxth	r3, r5
    5ff2:	21ff      	movs	r1, #255	; 0xff
    5ff4:	400b      	ands	r3, r1
    5ff6:	b29b      	uxth	r3, r3
    5ff8:	4313      	orrs	r3, r2
    5ffa:	b29a      	uxth	r2, r3
    5ffc:	693b      	ldr	r3, [r7, #16]
    5ffe:	851a      	strh	r2, [r3, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
    6000:	2300      	movs	r3, #0
}
    6002:	0018      	movs	r0, r3
    6004:	46bd      	mov	sp, r7
    6006:	b009      	add	sp, #36	; 0x24
    6008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    600a:	46c0      	nop			; (mov r8, r8)
    600c:	0000ffff 	.word	0x0000ffff
    6010:	000059b1 	.word	0x000059b1
    6014:	00000fff 	.word	0x00000fff
    6018:	000007ff 	.word	0x000007ff
    601c:	fffff800 	.word	0xfffff800
    6020:	00806024 	.word	0x00806024
    6024:	00806020 	.word	0x00806020

00006028 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    6028:	b580      	push	{r7, lr}
    602a:	b086      	sub	sp, #24
    602c:	af00      	add	r7, sp, #0
    602e:	60f8      	str	r0, [r7, #12]
    6030:	60b9      	str	r1, [r7, #8]
    6032:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6034:	68fb      	ldr	r3, [r7, #12]
    6036:	68ba      	ldr	r2, [r7, #8]
    6038:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);
    603a:	2380      	movs	r3, #128	; 0x80
    603c:	025b      	lsls	r3, r3, #9
    603e:	0019      	movs	r1, r3
    6040:	2002      	movs	r0, #2
    6042:	4b32      	ldr	r3, [pc, #200]	; (610c <adc_init+0xe4>)
    6044:	4798      	blx	r3

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    6046:	68bb      	ldr	r3, [r7, #8]
    6048:	781b      	ldrb	r3, [r3, #0]
    604a:	b2db      	uxtb	r3, r3
    604c:	001a      	movs	r2, r3
    604e:	2301      	movs	r3, #1
    6050:	4013      	ands	r3, r2
    6052:	d001      	beq.n	6058 <adc_init+0x30>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6054:	2305      	movs	r3, #5
    6056:	e055      	b.n	6104 <adc_init+0xdc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    6058:	68bb      	ldr	r3, [r7, #8]
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	b2db      	uxtb	r3, r3
    605e:	001a      	movs	r2, r3
    6060:	2302      	movs	r3, #2
    6062:	4013      	ands	r3, r2
    6064:	d001      	beq.n	606a <adc_init+0x42>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    6066:	231c      	movs	r3, #28
    6068:	e04c      	b.n	6104 <adc_init+0xdc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	785a      	ldrb	r2, [r3, #1]
    606e:	68fb      	ldr	r3, [r7, #12]
    6070:	711a      	strb	r2, [r3, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    6072:	68fb      	ldr	r3, [r7, #12]
    6074:	791b      	ldrb	r3, [r3, #4]
    6076:	2b00      	cmp	r3, #0
    6078:	d102      	bne.n	6080 <adc_init+0x58>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
    607a:	2001      	movs	r0, #1
    607c:	4b24      	ldr	r3, [pc, #144]	; (6110 <adc_init+0xe8>)
    607e:	4798      	blx	r3
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    6080:	2317      	movs	r3, #23
    6082:	18fb      	adds	r3, r7, r3
    6084:	2200      	movs	r2, #0
    6086:	701a      	strb	r2, [r3, #0]
    6088:	e00e      	b.n	60a8 <adc_init+0x80>
		module_inst->callback[i] = NULL;
    608a:	2317      	movs	r3, #23
    608c:	18fb      	adds	r3, r7, r3
    608e:	781a      	ldrb	r2, [r3, #0]
    6090:	68fb      	ldr	r3, [r7, #12]
    6092:	3202      	adds	r2, #2
    6094:	0092      	lsls	r2, r2, #2
    6096:	2100      	movs	r1, #0
    6098:	50d1      	str	r1, [r2, r3]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
    609a:	2317      	movs	r3, #23
    609c:	18fb      	adds	r3, r7, r3
    609e:	781a      	ldrb	r2, [r3, #0]
    60a0:	2317      	movs	r3, #23
    60a2:	18fb      	adds	r3, r7, r3
    60a4:	3201      	adds	r2, #1
    60a6:	701a      	strb	r2, [r3, #0]
    60a8:	2317      	movs	r3, #23
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	2b02      	cmp	r3, #2
    60b0:	d9eb      	bls.n	608a <adc_init+0x62>
		module_inst->callback[i] = NULL;
	};

	module_inst->registered_callback_mask = 0;
    60b2:	68fb      	ldr	r3, [r7, #12]
    60b4:	2200      	movs	r2, #0
    60b6:	769a      	strb	r2, [r3, #26]
	module_inst->enabled_callback_mask = 0;
    60b8:	68fb      	ldr	r3, [r7, #12]
    60ba:	2200      	movs	r2, #0
    60bc:	76da      	strb	r2, [r3, #27]
	module_inst->remaining_conversions = 0;
    60be:	68fb      	ldr	r3, [r7, #12]
    60c0:	2200      	movs	r2, #0
    60c2:	831a      	strh	r2, [r3, #24]
	module_inst->job_status = STATUS_OK;
    60c4:	68fb      	ldr	r3, [r7, #12]
    60c6:	2200      	movs	r2, #0
    60c8:	771a      	strb	r2, [r3, #28]

	_adc_instances[0] = module_inst;
    60ca:	4b12      	ldr	r3, [pc, #72]	; (6114 <adc_init+0xec>)
    60cc:	68fa      	ldr	r2, [r7, #12]
    60ce:	601a      	str	r2, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    60d0:	687b      	ldr	r3, [r7, #4]
    60d2:	222a      	movs	r2, #42	; 0x2a
    60d4:	5c9b      	ldrb	r3, [r3, r2]
    60d6:	2b00      	cmp	r3, #0
    60d8:	d10a      	bne.n	60f0 <adc_init+0xc8>
			!config->freerunning) {
    60da:	687b      	ldr	r3, [r7, #4]
    60dc:	7d1b      	ldrb	r3, [r3, #20]
    60de:	2201      	movs	r2, #1
    60e0:	4053      	eors	r3, r2
    60e2:	b2db      	uxtb	r3, r3
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    60e4:	2b00      	cmp	r3, #0
    60e6:	d003      	beq.n	60f0 <adc_init+0xc8>
			!config->freerunning) {
		module_inst->software_trigger = true;
    60e8:	68fb      	ldr	r3, [r7, #12]
    60ea:	2201      	movs	r2, #1
    60ec:	775a      	strb	r2, [r3, #29]
    60ee:	e002      	b.n	60f6 <adc_init+0xce>
	} else {
		module_inst->software_trigger = false;
    60f0:	68fb      	ldr	r3, [r7, #12]
    60f2:	2200      	movs	r2, #0
    60f4:	775a      	strb	r2, [r3, #29]
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    60f6:	687a      	ldr	r2, [r7, #4]
    60f8:	68fb      	ldr	r3, [r7, #12]
    60fa:	0011      	movs	r1, r2
    60fc:	0018      	movs	r0, r3
    60fe:	4b06      	ldr	r3, [pc, #24]	; (6118 <adc_init+0xf0>)
    6100:	4798      	blx	r3
    6102:	0003      	movs	r3, r0
}
    6104:	0018      	movs	r0, r3
    6106:	46bd      	mov	sp, r7
    6108:	b006      	add	sp, #24
    610a:	bd80      	pop	{r7, pc}
    610c:	000058ed 	.word	0x000058ed
    6110:	00005971 	.word	0x00005971
    6114:	20004564 	.word	0x20004564
    6118:	00005afd 	.word	0x00005afd

0000611c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    611c:	b580      	push	{r7, lr}
    611e:	b084      	sub	sp, #16
    6120:	af00      	add	r7, sp, #0
    6122:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    612a:	68fb      	ldr	r3, [r7, #12]
    612c:	7e5b      	ldrb	r3, [r3, #25]
    612e:	b2db      	uxtb	r3, r3
    6130:	b25b      	sxtb	r3, r3
    6132:	2b00      	cmp	r3, #0
    6134:	da01      	bge.n	613a <adc_is_syncing+0x1e>
		return true;
    6136:	2301      	movs	r3, #1
    6138:	e000      	b.n	613c <adc_is_syncing+0x20>
	}

	return false;
    613a:	2300      	movs	r3, #0
}
    613c:	0018      	movs	r0, r3
    613e:	46bd      	mov	sp, r7
    6140:	b004      	add	sp, #16
    6142:	bd80      	pop	{r7, pc}

00006144 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    6144:	b580      	push	{r7, lr}
    6146:	b084      	sub	sp, #16
    6148:	af00      	add	r7, sp, #0
    614a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    614c:	687b      	ldr	r3, [r7, #4]
    614e:	681b      	ldr	r3, [r3, #0]
    6150:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    6152:	46c0      	nop			; (mov r8, r8)
    6154:	687b      	ldr	r3, [r7, #4]
    6156:	0018      	movs	r0, r3
    6158:	4b0b      	ldr	r3, [pc, #44]	; (6188 <adc_start_conversion+0x44>)
    615a:	4798      	blx	r3
    615c:	1e03      	subs	r3, r0, #0
    615e:	d1f9      	bne.n	6154 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6160:	68fb      	ldr	r3, [r7, #12]
    6162:	7b1b      	ldrb	r3, [r3, #12]
    6164:	b2db      	uxtb	r3, r3
    6166:	2202      	movs	r2, #2
    6168:	4313      	orrs	r3, r2
    616a:	b2da      	uxtb	r2, r3
    616c:	68fb      	ldr	r3, [r7, #12]
    616e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    6170:	46c0      	nop			; (mov r8, r8)
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	0018      	movs	r0, r3
    6176:	4b04      	ldr	r3, [pc, #16]	; (6188 <adc_start_conversion+0x44>)
    6178:	4798      	blx	r3
    617a:	1e03      	subs	r3, r0, #0
    617c:	d1f9      	bne.n	6172 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	46bd      	mov	sp, r7
    6182:	b004      	add	sp, #16
    6184:	bd80      	pop	{r7, pc}
    6186:	46c0      	nop			; (mov r8, r8)
    6188:	0000611d 	.word	0x0000611d

0000618c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    618c:	b580      	push	{r7, lr}
    618e:	b084      	sub	sp, #16
    6190:	af00      	add	r7, sp, #0
    6192:	6078      	str	r0, [r7, #4]
    6194:	000a      	movs	r2, r1
    6196:	1cfb      	adds	r3, r7, #3
    6198:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    619a:	687b      	ldr	r3, [r7, #4]
    619c:	681b      	ldr	r3, [r3, #0]
    619e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    61a0:	68fb      	ldr	r3, [r7, #12]
    61a2:	1cfa      	adds	r2, r7, #3
    61a4:	7812      	ldrb	r2, [r2, #0]
    61a6:	759a      	strb	r2, [r3, #22]
}
    61a8:	46c0      	nop			; (mov r8, r8)
    61aa:	46bd      	mov	sp, r7
    61ac:	b004      	add	sp, #16
    61ae:	bd80      	pop	{r7, pc}

000061b0 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    61b0:	b580      	push	{r7, lr}
    61b2:	b084      	sub	sp, #16
    61b4:	af00      	add	r7, sp, #0
    61b6:	0002      	movs	r2, r0
    61b8:	1dfb      	adds	r3, r7, #7
    61ba:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    61bc:	1dfb      	adds	r3, r7, #7
    61be:	781a      	ldrb	r2, [r3, #0]
    61c0:	4b44      	ldr	r3, [pc, #272]	; (62d4 <_adc_interrupt_handler+0x124>)
    61c2:	0092      	lsls	r2, r2, #2
    61c4:	58d3      	ldr	r3, [r2, r3]
    61c6:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    61c8:	68fb      	ldr	r3, [r7, #12]
    61ca:	681b      	ldr	r3, [r3, #0]
    61cc:	7e1b      	ldrb	r3, [r3, #24]
    61ce:	b2db      	uxtb	r3, r3
    61d0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    61d2:	68bb      	ldr	r3, [r7, #8]
    61d4:	2201      	movs	r2, #1
    61d6:	4013      	ands	r3, r2
    61d8:	d045      	beq.n	6266 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    61da:	68fb      	ldr	r3, [r7, #12]
    61dc:	7edb      	ldrb	r3, [r3, #27]
    61de:	001a      	movs	r2, r3
    61e0:	2301      	movs	r3, #1
    61e2:	4013      	ands	r3, r2
    61e4:	d03f      	beq.n	6266 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    61e6:	68fb      	ldr	r3, [r7, #12]
    61e8:	7e9b      	ldrb	r3, [r3, #26]
    61ea:	001a      	movs	r2, r3
    61ec:	2301      	movs	r3, #1
    61ee:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    61f0:	d039      	beq.n	6266 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    61f2:	68fb      	ldr	r3, [r7, #12]
    61f4:	681b      	ldr	r3, [r3, #0]
    61f6:	2201      	movs	r2, #1
    61f8:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    61fa:	46c0      	nop			; (mov r8, r8)
    61fc:	68fb      	ldr	r3, [r7, #12]
    61fe:	0018      	movs	r0, r3
    6200:	4b35      	ldr	r3, [pc, #212]	; (62d8 <_adc_interrupt_handler+0x128>)
    6202:	4798      	blx	r3
    6204:	1e03      	subs	r3, r0, #0
    6206:	d1f9      	bne.n	61fc <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    6208:	68fb      	ldr	r3, [r7, #12]
    620a:	695b      	ldr	r3, [r3, #20]
    620c:	1c99      	adds	r1, r3, #2
    620e:	68fa      	ldr	r2, [r7, #12]
    6210:	6151      	str	r1, [r2, #20]
    6212:	68fa      	ldr	r2, [r7, #12]
    6214:	6812      	ldr	r2, [r2, #0]
    6216:	8b52      	ldrh	r2, [r2, #26]
    6218:	b292      	uxth	r2, r2
    621a:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    621c:	68fb      	ldr	r3, [r7, #12]
    621e:	8b1b      	ldrh	r3, [r3, #24]
    6220:	b29b      	uxth	r3, r3
    6222:	3b01      	subs	r3, #1
    6224:	b29b      	uxth	r3, r3
    6226:	68fa      	ldr	r2, [r7, #12]
    6228:	1c19      	adds	r1, r3, #0
    622a:	8311      	strh	r1, [r2, #24]
    622c:	2b00      	cmp	r3, #0
    622e:	d008      	beq.n	6242 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    6230:	68fb      	ldr	r3, [r7, #12]
    6232:	7f5b      	ldrb	r3, [r3, #29]
    6234:	2b00      	cmp	r3, #0
    6236:	d016      	beq.n	6266 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    6238:	68fb      	ldr	r3, [r7, #12]
    623a:	0018      	movs	r0, r3
    623c:	4b27      	ldr	r3, [pc, #156]	; (62dc <_adc_interrupt_handler+0x12c>)
    623e:	4798      	blx	r3
    6240:	e011      	b.n	6266 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    6242:	68fb      	ldr	r3, [r7, #12]
    6244:	7f1b      	ldrb	r3, [r3, #28]
    6246:	b2db      	uxtb	r3, r3
    6248:	2b05      	cmp	r3, #5
    624a:	d10c      	bne.n	6266 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    624c:	68fb      	ldr	r3, [r7, #12]
    624e:	2200      	movs	r2, #0
    6250:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    6252:	68fb      	ldr	r3, [r7, #12]
    6254:	2101      	movs	r1, #1
    6256:	0018      	movs	r0, r3
    6258:	4b21      	ldr	r3, [pc, #132]	; (62e0 <_adc_interrupt_handler+0x130>)
    625a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    625c:	68fb      	ldr	r3, [r7, #12]
    625e:	689b      	ldr	r3, [r3, #8]
    6260:	68fa      	ldr	r2, [r7, #12]
    6262:	0010      	movs	r0, r2
    6264:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    6266:	68bb      	ldr	r3, [r7, #8]
    6268:	2204      	movs	r2, #4
    626a:	4013      	ands	r3, r2
    626c:	d014      	beq.n	6298 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    626e:	68fb      	ldr	r3, [r7, #12]
    6270:	681b      	ldr	r3, [r3, #0]
    6272:	2204      	movs	r2, #4
    6274:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    6276:	68fb      	ldr	r3, [r7, #12]
    6278:	7edb      	ldrb	r3, [r3, #27]
    627a:	001a      	movs	r2, r3
    627c:	2302      	movs	r3, #2
    627e:	4013      	ands	r3, r2
    6280:	d00a      	beq.n	6298 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    6282:	68fb      	ldr	r3, [r7, #12]
    6284:	7e9b      	ldrb	r3, [r3, #26]
    6286:	001a      	movs	r2, r3
    6288:	2302      	movs	r3, #2
    628a:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    628c:	d004      	beq.n	6298 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    628e:	68fb      	ldr	r3, [r7, #12]
    6290:	68db      	ldr	r3, [r3, #12]
    6292:	68fa      	ldr	r2, [r7, #12]
    6294:	0010      	movs	r0, r2
    6296:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    6298:	68bb      	ldr	r3, [r7, #8]
    629a:	2202      	movs	r2, #2
    629c:	4013      	ands	r3, r2
    629e:	d014      	beq.n	62ca <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    62a0:	68fb      	ldr	r3, [r7, #12]
    62a2:	681b      	ldr	r3, [r3, #0]
    62a4:	2202      	movs	r2, #2
    62a6:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    62a8:	68fb      	ldr	r3, [r7, #12]
    62aa:	7edb      	ldrb	r3, [r3, #27]
    62ac:	001a      	movs	r2, r3
    62ae:	2304      	movs	r3, #4
    62b0:	4013      	ands	r3, r2
    62b2:	d00a      	beq.n	62ca <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    62b4:	68fb      	ldr	r3, [r7, #12]
    62b6:	7e9b      	ldrb	r3, [r3, #26]
    62b8:	001a      	movs	r2, r3
    62ba:	2304      	movs	r3, #4
    62bc:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    62be:	d004      	beq.n	62ca <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    62c0:	68fb      	ldr	r3, [r7, #12]
    62c2:	691b      	ldr	r3, [r3, #16]
    62c4:	68fa      	ldr	r2, [r7, #12]
    62c6:	0010      	movs	r0, r2
    62c8:	4798      	blx	r3
		}
	}
}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	46bd      	mov	sp, r7
    62ce:	b004      	add	sp, #16
    62d0:	bd80      	pop	{r7, pc}
    62d2:	46c0      	nop			; (mov r8, r8)
    62d4:	20004564 	.word	0x20004564
    62d8:	0000611d 	.word	0x0000611d
    62dc:	00006145 	.word	0x00006145
    62e0:	0000618d 	.word	0x0000618d

000062e4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    62e4:	b580      	push	{r7, lr}
    62e6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    62e8:	2000      	movs	r0, #0
    62ea:	4b02      	ldr	r3, [pc, #8]	; (62f4 <ADC_Handler+0x10>)
    62ec:	4798      	blx	r3
}
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	46bd      	mov	sp, r7
    62f2:	bd80      	pop	{r7, pc}
    62f4:	000061b1 	.word	0x000061b1

000062f8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    62f8:	b580      	push	{r7, lr}
    62fa:	b084      	sub	sp, #16
    62fc:	af00      	add	r7, sp, #0
    62fe:	0002      	movs	r2, r0
    6300:	1dfb      	adds	r3, r7, #7
    6302:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6304:	230f      	movs	r3, #15
    6306:	18fb      	adds	r3, r7, r3
    6308:	1dfa      	adds	r2, r7, #7
    630a:	7812      	ldrb	r2, [r2, #0]
    630c:	0952      	lsrs	r2, r2, #5
    630e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    6310:	230f      	movs	r3, #15
    6312:	18fb      	adds	r3, r7, r3
    6314:	781b      	ldrb	r3, [r3, #0]
    6316:	2b00      	cmp	r3, #0
    6318:	d10c      	bne.n	6334 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    631a:	4b09      	ldr	r3, [pc, #36]	; (6340 <_extint_get_eic_from_channel+0x48>)
    631c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    631e:	230f      	movs	r3, #15
    6320:	18fb      	adds	r3, r7, r3
    6322:	781b      	ldrb	r3, [r3, #0]
    6324:	009b      	lsls	r3, r3, #2
    6326:	2210      	movs	r2, #16
    6328:	4694      	mov	ip, r2
    632a:	44bc      	add	ip, r7
    632c:	4463      	add	r3, ip
    632e:	3b08      	subs	r3, #8
    6330:	681b      	ldr	r3, [r3, #0]
    6332:	e000      	b.n	6336 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6334:	2300      	movs	r3, #0
	}
}
    6336:	0018      	movs	r0, r3
    6338:	46bd      	mov	sp, r7
    633a:	b004      	add	sp, #16
    633c:	bd80      	pop	{r7, pc}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	40001800 	.word	0x40001800

00006344 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6344:	b580      	push	{r7, lr}
    6346:	b084      	sub	sp, #16
    6348:	af00      	add	r7, sp, #0
    634a:	0002      	movs	r2, r0
    634c:	1dfb      	adds	r3, r7, #7
    634e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6350:	1dfb      	adds	r3, r7, #7
    6352:	781b      	ldrb	r3, [r3, #0]
    6354:	0018      	movs	r0, r3
    6356:	4b0b      	ldr	r3, [pc, #44]	; (6384 <extint_chan_is_detected+0x40>)
    6358:	4798      	blx	r3
    635a:	0003      	movs	r3, r0
    635c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    635e:	1dfb      	adds	r3, r7, #7
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	221f      	movs	r2, #31
    6364:	4013      	ands	r3, r2
    6366:	2201      	movs	r2, #1
    6368:	409a      	lsls	r2, r3
    636a:	0013      	movs	r3, r2
    636c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    636e:	68fb      	ldr	r3, [r7, #12]
    6370:	691b      	ldr	r3, [r3, #16]
    6372:	68ba      	ldr	r2, [r7, #8]
    6374:	4013      	ands	r3, r2
    6376:	1e5a      	subs	r2, r3, #1
    6378:	4193      	sbcs	r3, r2
    637a:	b2db      	uxtb	r3, r3
}
    637c:	0018      	movs	r0, r3
    637e:	46bd      	mov	sp, r7
    6380:	b004      	add	sp, #16
    6382:	bd80      	pop	{r7, pc}
    6384:	000062f9 	.word	0x000062f9

00006388 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6388:	b580      	push	{r7, lr}
    638a:	b084      	sub	sp, #16
    638c:	af00      	add	r7, sp, #0
    638e:	0002      	movs	r2, r0
    6390:	1dfb      	adds	r3, r7, #7
    6392:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6394:	1dfb      	adds	r3, r7, #7
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	0018      	movs	r0, r3
    639a:	4b09      	ldr	r3, [pc, #36]	; (63c0 <extint_chan_clear_detected+0x38>)
    639c:	4798      	blx	r3
    639e:	0003      	movs	r3, r0
    63a0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    63a2:	1dfb      	adds	r3, r7, #7
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	221f      	movs	r2, #31
    63a8:	4013      	ands	r3, r2
    63aa:	2201      	movs	r2, #1
    63ac:	409a      	lsls	r2, r3
    63ae:	0013      	movs	r3, r2
    63b0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    63b2:	68fb      	ldr	r3, [r7, #12]
    63b4:	68ba      	ldr	r2, [r7, #8]
    63b6:	611a      	str	r2, [r3, #16]
}
    63b8:	46c0      	nop			; (mov r8, r8)
    63ba:	46bd      	mov	sp, r7
    63bc:	b004      	add	sp, #16
    63be:	bd80      	pop	{r7, pc}
    63c0:	000062f9 	.word	0x000062f9

000063c4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    63c4:	b580      	push	{r7, lr}
    63c6:	b082      	sub	sp, #8
    63c8:	af00      	add	r7, sp, #0
    63ca:	6078      	str	r0, [r7, #4]
    63cc:	0008      	movs	r0, r1
    63ce:	0011      	movs	r1, r2
    63d0:	1cfb      	adds	r3, r7, #3
    63d2:	1c02      	adds	r2, r0, #0
    63d4:	701a      	strb	r2, [r3, #0]
    63d6:	1cbb      	adds	r3, r7, #2
    63d8:	1c0a      	adds	r2, r1, #0
    63da:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    63dc:	1cbb      	adds	r3, r7, #2
    63de:	781b      	ldrb	r3, [r3, #0]
    63e0:	2b00      	cmp	r3, #0
    63e2:	d001      	beq.n	63e8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63e4:	2317      	movs	r3, #23
    63e6:	e019      	b.n	641c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    63e8:	1cfb      	adds	r3, r7, #3
    63ea:	781a      	ldrb	r2, [r3, #0]
    63ec:	4b0d      	ldr	r3, [pc, #52]	; (6424 <extint_register_callback+0x60>)
    63ee:	0092      	lsls	r2, r2, #2
    63f0:	58d3      	ldr	r3, [r2, r3]
    63f2:	2b00      	cmp	r3, #0
    63f4:	d107      	bne.n	6406 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    63f6:	1cfb      	adds	r3, r7, #3
    63f8:	781a      	ldrb	r2, [r3, #0]
    63fa:	4b0a      	ldr	r3, [pc, #40]	; (6424 <extint_register_callback+0x60>)
    63fc:	0092      	lsls	r2, r2, #2
    63fe:	6879      	ldr	r1, [r7, #4]
    6400:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    6402:	2300      	movs	r3, #0
    6404:	e00a      	b.n	641c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    6406:	1cfb      	adds	r3, r7, #3
    6408:	781a      	ldrb	r2, [r3, #0]
    640a:	4b06      	ldr	r3, [pc, #24]	; (6424 <extint_register_callback+0x60>)
    640c:	0092      	lsls	r2, r2, #2
    640e:	58d2      	ldr	r2, [r2, r3]
    6410:	687b      	ldr	r3, [r7, #4]
    6412:	429a      	cmp	r2, r3
    6414:	d101      	bne.n	641a <extint_register_callback+0x56>
		return STATUS_OK;
    6416:	2300      	movs	r3, #0
    6418:	e000      	b.n	641c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    641a:	231d      	movs	r3, #29
}
    641c:	0018      	movs	r0, r3
    641e:	46bd      	mov	sp, r7
    6420:	b002      	add	sp, #8
    6422:	bd80      	pop	{r7, pc}
    6424:	2000456c 	.word	0x2000456c

00006428 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6428:	b580      	push	{r7, lr}
    642a:	b084      	sub	sp, #16
    642c:	af00      	add	r7, sp, #0
    642e:	0002      	movs	r2, r0
    6430:	1dfb      	adds	r3, r7, #7
    6432:	701a      	strb	r2, [r3, #0]
    6434:	1dbb      	adds	r3, r7, #6
    6436:	1c0a      	adds	r2, r1, #0
    6438:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    643a:	1dbb      	adds	r3, r7, #6
    643c:	781b      	ldrb	r3, [r3, #0]
    643e:	2b00      	cmp	r3, #0
    6440:	d10e      	bne.n	6460 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    6442:	1dfb      	adds	r3, r7, #7
    6444:	781b      	ldrb	r3, [r3, #0]
    6446:	0018      	movs	r0, r3
    6448:	4b08      	ldr	r3, [pc, #32]	; (646c <extint_chan_enable_callback+0x44>)
    644a:	4798      	blx	r3
    644c:	0003      	movs	r3, r0
    644e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    6450:	1dfb      	adds	r3, r7, #7
    6452:	781b      	ldrb	r3, [r3, #0]
    6454:	2201      	movs	r2, #1
    6456:	409a      	lsls	r2, r3
    6458:	68fb      	ldr	r3, [r7, #12]
    645a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    645c:	2300      	movs	r3, #0
    645e:	e000      	b.n	6462 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6460:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    6462:	0018      	movs	r0, r3
    6464:	46bd      	mov	sp, r7
    6466:	b004      	add	sp, #16
    6468:	bd80      	pop	{r7, pc}
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	000062f9 	.word	0x000062f9

00006470 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6470:	b580      	push	{r7, lr}
    6472:	b084      	sub	sp, #16
    6474:	af00      	add	r7, sp, #0
    6476:	0002      	movs	r2, r0
    6478:	1dfb      	adds	r3, r7, #7
    647a:	701a      	strb	r2, [r3, #0]
    647c:	1dbb      	adds	r3, r7, #6
    647e:	1c0a      	adds	r2, r1, #0
    6480:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6482:	1dbb      	adds	r3, r7, #6
    6484:	781b      	ldrb	r3, [r3, #0]
    6486:	2b00      	cmp	r3, #0
    6488:	d10e      	bne.n	64a8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    648a:	1dfb      	adds	r3, r7, #7
    648c:	781b      	ldrb	r3, [r3, #0]
    648e:	0018      	movs	r0, r3
    6490:	4b08      	ldr	r3, [pc, #32]	; (64b4 <extint_chan_disable_callback+0x44>)
    6492:	4798      	blx	r3
    6494:	0003      	movs	r3, r0
    6496:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    6498:	1dfb      	adds	r3, r7, #7
    649a:	781b      	ldrb	r3, [r3, #0]
    649c:	2201      	movs	r2, #1
    649e:	409a      	lsls	r2, r3
    64a0:	68fb      	ldr	r3, [r7, #12]
    64a2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    64a4:	2300      	movs	r3, #0
    64a6:	e000      	b.n	64aa <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    64a8:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    64aa:	0018      	movs	r0, r3
    64ac:	46bd      	mov	sp, r7
    64ae:	b004      	add	sp, #16
    64b0:	bd80      	pop	{r7, pc}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	000062f9 	.word	0x000062f9

000064b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    64b8:	b580      	push	{r7, lr}
    64ba:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    64bc:	4b15      	ldr	r3, [pc, #84]	; (6514 <EIC_Handler+0x5c>)
    64be:	2200      	movs	r2, #0
    64c0:	701a      	strb	r2, [r3, #0]
    64c2:	e020      	b.n	6506 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    64c4:	4b13      	ldr	r3, [pc, #76]	; (6514 <EIC_Handler+0x5c>)
    64c6:	781b      	ldrb	r3, [r3, #0]
    64c8:	0018      	movs	r0, r3
    64ca:	4b13      	ldr	r3, [pc, #76]	; (6518 <EIC_Handler+0x60>)
    64cc:	4798      	blx	r3
    64ce:	1e03      	subs	r3, r0, #0
    64d0:	d013      	beq.n	64fa <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    64d2:	4b10      	ldr	r3, [pc, #64]	; (6514 <EIC_Handler+0x5c>)
    64d4:	781b      	ldrb	r3, [r3, #0]
    64d6:	0018      	movs	r0, r3
    64d8:	4b10      	ldr	r3, [pc, #64]	; (651c <EIC_Handler+0x64>)
    64da:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    64dc:	4b0d      	ldr	r3, [pc, #52]	; (6514 <EIC_Handler+0x5c>)
    64de:	781b      	ldrb	r3, [r3, #0]
    64e0:	001a      	movs	r2, r3
    64e2:	4b0f      	ldr	r3, [pc, #60]	; (6520 <EIC_Handler+0x68>)
    64e4:	0092      	lsls	r2, r2, #2
    64e6:	58d3      	ldr	r3, [r2, r3]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d006      	beq.n	64fa <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    64ec:	4b09      	ldr	r3, [pc, #36]	; (6514 <EIC_Handler+0x5c>)
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	001a      	movs	r2, r3
    64f2:	4b0b      	ldr	r3, [pc, #44]	; (6520 <EIC_Handler+0x68>)
    64f4:	0092      	lsls	r2, r2, #2
    64f6:	58d3      	ldr	r3, [r2, r3]
    64f8:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    64fa:	4b06      	ldr	r3, [pc, #24]	; (6514 <EIC_Handler+0x5c>)
    64fc:	781b      	ldrb	r3, [r3, #0]
    64fe:	3301      	adds	r3, #1
    6500:	b2da      	uxtb	r2, r3
    6502:	4b04      	ldr	r3, [pc, #16]	; (6514 <EIC_Handler+0x5c>)
    6504:	701a      	strb	r2, [r3, #0]
    6506:	4b03      	ldr	r3, [pc, #12]	; (6514 <EIC_Handler+0x5c>)
    6508:	781b      	ldrb	r3, [r3, #0]
    650a:	2b0f      	cmp	r3, #15
    650c:	d9da      	bls.n	64c4 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	46bd      	mov	sp, r7
    6512:	bd80      	pop	{r7, pc}
    6514:	20004568 	.word	0x20004568
    6518:	00006345 	.word	0x00006345
    651c:	00006389 	.word	0x00006389
    6520:	2000456c 	.word	0x2000456c

00006524 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6524:	b580      	push	{r7, lr}
    6526:	b082      	sub	sp, #8
    6528:	af00      	add	r7, sp, #0
    652a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    652c:	687b      	ldr	r3, [r7, #4]
    652e:	2200      	movs	r2, #0
    6530:	701a      	strb	r2, [r3, #0]
}
    6532:	46c0      	nop			; (mov r8, r8)
    6534:	46bd      	mov	sp, r7
    6536:	b002      	add	sp, #8
    6538:	bd80      	pop	{r7, pc}
    653a:	46c0      	nop			; (mov r8, r8)

0000653c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    653c:	b580      	push	{r7, lr}
    653e:	b082      	sub	sp, #8
    6540:	af00      	add	r7, sp, #0
    6542:	0002      	movs	r2, r0
    6544:	6039      	str	r1, [r7, #0]
    6546:	1dfb      	adds	r3, r7, #7
    6548:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    654a:	1dfb      	adds	r3, r7, #7
    654c:	781b      	ldrb	r3, [r3, #0]
    654e:	2b01      	cmp	r3, #1
    6550:	d00a      	beq.n	6568 <system_apb_clock_set_mask+0x2c>
    6552:	2b02      	cmp	r3, #2
    6554:	d00f      	beq.n	6576 <system_apb_clock_set_mask+0x3a>
    6556:	2b00      	cmp	r3, #0
    6558:	d114      	bne.n	6584 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    655a:	4b0e      	ldr	r3, [pc, #56]	; (6594 <system_apb_clock_set_mask+0x58>)
    655c:	4a0d      	ldr	r2, [pc, #52]	; (6594 <system_apb_clock_set_mask+0x58>)
    655e:	6991      	ldr	r1, [r2, #24]
    6560:	683a      	ldr	r2, [r7, #0]
    6562:	430a      	orrs	r2, r1
    6564:	619a      	str	r2, [r3, #24]
			break;
    6566:	e00f      	b.n	6588 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6568:	4b0a      	ldr	r3, [pc, #40]	; (6594 <system_apb_clock_set_mask+0x58>)
    656a:	4a0a      	ldr	r2, [pc, #40]	; (6594 <system_apb_clock_set_mask+0x58>)
    656c:	69d1      	ldr	r1, [r2, #28]
    656e:	683a      	ldr	r2, [r7, #0]
    6570:	430a      	orrs	r2, r1
    6572:	61da      	str	r2, [r3, #28]
			break;
    6574:	e008      	b.n	6588 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6576:	4b07      	ldr	r3, [pc, #28]	; (6594 <system_apb_clock_set_mask+0x58>)
    6578:	4a06      	ldr	r2, [pc, #24]	; (6594 <system_apb_clock_set_mask+0x58>)
    657a:	6a11      	ldr	r1, [r2, #32]
    657c:	683a      	ldr	r2, [r7, #0]
    657e:	430a      	orrs	r2, r1
    6580:	621a      	str	r2, [r3, #32]
			break;
    6582:	e001      	b.n	6588 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6584:	2317      	movs	r3, #23
    6586:	e000      	b.n	658a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6588:	2300      	movs	r3, #0
}
    658a:	0018      	movs	r0, r3
    658c:	46bd      	mov	sp, r7
    658e:	b002      	add	sp, #8
    6590:	bd80      	pop	{r7, pc}
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	40000400 	.word	0x40000400

00006598 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6598:	b580      	push	{r7, lr}
    659a:	b082      	sub	sp, #8
    659c:	af00      	add	r7, sp, #0
    659e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    65a0:	687b      	ldr	r3, [r7, #4]
    65a2:	2280      	movs	r2, #128	; 0x80
    65a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    65a6:	687b      	ldr	r3, [r7, #4]
    65a8:	2200      	movs	r2, #0
    65aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    65ac:	687b      	ldr	r3, [r7, #4]
    65ae:	2201      	movs	r2, #1
    65b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    65b2:	687b      	ldr	r3, [r7, #4]
    65b4:	2200      	movs	r2, #0
    65b6:	70da      	strb	r2, [r3, #3]
}
    65b8:	46c0      	nop			; (mov r8, r8)
    65ba:	46bd      	mov	sp, r7
    65bc:	b002      	add	sp, #8
    65be:	bd80      	pop	{r7, pc}

000065c0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    65c0:	b580      	push	{r7, lr}
    65c2:	b082      	sub	sp, #8
    65c4:	af00      	add	r7, sp, #0
    65c6:	0002      	movs	r2, r0
    65c8:	1dfb      	adds	r3, r7, #7
    65ca:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    65cc:	4b06      	ldr	r3, [pc, #24]	; (65e8 <system_interrupt_enable+0x28>)
    65ce:	1dfa      	adds	r2, r7, #7
    65d0:	7812      	ldrb	r2, [r2, #0]
    65d2:	0011      	movs	r1, r2
    65d4:	221f      	movs	r2, #31
    65d6:	400a      	ands	r2, r1
    65d8:	2101      	movs	r1, #1
    65da:	4091      	lsls	r1, r2
    65dc:	000a      	movs	r2, r1
    65de:	601a      	str	r2, [r3, #0]
}
    65e0:	46c0      	nop			; (mov r8, r8)
    65e2:	46bd      	mov	sp, r7
    65e4:	b002      	add	sp, #8
    65e6:	bd80      	pop	{r7, pc}
    65e8:	e000e100 	.word	0xe000e100

000065ec <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	b084      	sub	sp, #16
    65f0:	af00      	add	r7, sp, #0
    65f2:	0002      	movs	r2, r0
    65f4:	1dfb      	adds	r3, r7, #7
    65f6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    65f8:	230f      	movs	r3, #15
    65fa:	18fb      	adds	r3, r7, r3
    65fc:	1dfa      	adds	r2, r7, #7
    65fe:	7812      	ldrb	r2, [r2, #0]
    6600:	0952      	lsrs	r2, r2, #5
    6602:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    6604:	230f      	movs	r3, #15
    6606:	18fb      	adds	r3, r7, r3
    6608:	781b      	ldrb	r3, [r3, #0]
    660a:	2b00      	cmp	r3, #0
    660c:	d10c      	bne.n	6628 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    660e:	4b09      	ldr	r3, [pc, #36]	; (6634 <_extint_get_eic_from_channel+0x48>)
    6610:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    6612:	230f      	movs	r3, #15
    6614:	18fb      	adds	r3, r7, r3
    6616:	781b      	ldrb	r3, [r3, #0]
    6618:	009b      	lsls	r3, r3, #2
    661a:	2210      	movs	r2, #16
    661c:	4694      	mov	ip, r2
    661e:	44bc      	add	ip, r7
    6620:	4463      	add	r3, ip
    6622:	3b08      	subs	r3, #8
    6624:	681b      	ldr	r3, [r3, #0]
    6626:	e000      	b.n	662a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6628:	2300      	movs	r3, #0
	}
}
    662a:	0018      	movs	r0, r3
    662c:	46bd      	mov	sp, r7
    662e:	b004      	add	sp, #16
    6630:	bd80      	pop	{r7, pc}
    6632:	46c0      	nop			; (mov r8, r8)
    6634:	40001800 	.word	0x40001800

00006638 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    6638:	b580      	push	{r7, lr}
    663a:	b082      	sub	sp, #8
    663c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    663e:	4b0f      	ldr	r3, [pc, #60]	; (667c <extint_is_syncing+0x44>)
    6640:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6642:	2300      	movs	r3, #0
    6644:	607b      	str	r3, [r7, #4]
    6646:	e011      	b.n	666c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6648:	687b      	ldr	r3, [r7, #4]
    664a:	009b      	lsls	r3, r3, #2
    664c:	2208      	movs	r2, #8
    664e:	4694      	mov	ip, r2
    6650:	44bc      	add	ip, r7
    6652:	4463      	add	r3, ip
    6654:	3b08      	subs	r3, #8
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	785b      	ldrb	r3, [r3, #1]
    665a:	b2db      	uxtb	r3, r3
    665c:	b25b      	sxtb	r3, r3
    665e:	2b00      	cmp	r3, #0
    6660:	da01      	bge.n	6666 <extint_is_syncing+0x2e>
			return true;
    6662:	2301      	movs	r3, #1
    6664:	e006      	b.n	6674 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6666:	687b      	ldr	r3, [r7, #4]
    6668:	3301      	adds	r3, #1
    666a:	607b      	str	r3, [r7, #4]
    666c:	687b      	ldr	r3, [r7, #4]
    666e:	2b00      	cmp	r3, #0
    6670:	d0ea      	beq.n	6648 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    6672:	2300      	movs	r3, #0
}
    6674:	0018      	movs	r0, r3
    6676:	46bd      	mov	sp, r7
    6678:	b002      	add	sp, #8
    667a:	bd80      	pop	{r7, pc}
    667c:	40001800 	.word	0x40001800

00006680 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    6680:	b580      	push	{r7, lr}
    6682:	b084      	sub	sp, #16
    6684:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6686:	4b2d      	ldr	r3, [pc, #180]	; (673c <_system_extint_init+0xbc>)
    6688:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    668a:	2140      	movs	r1, #64	; 0x40
    668c:	2000      	movs	r0, #0
    668e:	4b2c      	ldr	r3, [pc, #176]	; (6740 <_system_extint_init+0xc0>)
    6690:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6692:	003b      	movs	r3, r7
    6694:	0018      	movs	r0, r3
    6696:	4b2b      	ldr	r3, [pc, #172]	; (6744 <_system_extint_init+0xc4>)
    6698:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    669a:	003b      	movs	r3, r7
    669c:	2200      	movs	r2, #0
    669e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    66a0:	003b      	movs	r3, r7
    66a2:	0019      	movs	r1, r3
    66a4:	2005      	movs	r0, #5
    66a6:	4b28      	ldr	r3, [pc, #160]	; (6748 <_system_extint_init+0xc8>)
    66a8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    66aa:	2005      	movs	r0, #5
    66ac:	4b27      	ldr	r3, [pc, #156]	; (674c <_system_extint_init+0xcc>)
    66ae:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    66b0:	2300      	movs	r3, #0
    66b2:	60fb      	str	r3, [r7, #12]
    66b4:	e018      	b.n	66e8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    66b6:	68fb      	ldr	r3, [r7, #12]
    66b8:	009b      	lsls	r3, r3, #2
    66ba:	2210      	movs	r2, #16
    66bc:	4694      	mov	ip, r2
    66be:	44bc      	add	ip, r7
    66c0:	4463      	add	r3, ip
    66c2:	3b0c      	subs	r3, #12
    66c4:	681a      	ldr	r2, [r3, #0]
    66c6:	68fb      	ldr	r3, [r7, #12]
    66c8:	009b      	lsls	r3, r3, #2
    66ca:	2110      	movs	r1, #16
    66cc:	468c      	mov	ip, r1
    66ce:	44bc      	add	ip, r7
    66d0:	4463      	add	r3, ip
    66d2:	3b0c      	subs	r3, #12
    66d4:	681b      	ldr	r3, [r3, #0]
    66d6:	781b      	ldrb	r3, [r3, #0]
    66d8:	b2db      	uxtb	r3, r3
    66da:	2101      	movs	r1, #1
    66dc:	430b      	orrs	r3, r1
    66de:	b2db      	uxtb	r3, r3
    66e0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    66e2:	68fb      	ldr	r3, [r7, #12]
    66e4:	3301      	adds	r3, #1
    66e6:	60fb      	str	r3, [r7, #12]
    66e8:	68fb      	ldr	r3, [r7, #12]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d0e3      	beq.n	66b6 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    66ee:	46c0      	nop			; (mov r8, r8)
    66f0:	4b17      	ldr	r3, [pc, #92]	; (6750 <_system_extint_init+0xd0>)
    66f2:	4798      	blx	r3
    66f4:	1e03      	subs	r3, r0, #0
    66f6:	d1fb      	bne.n	66f0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    66f8:	230b      	movs	r3, #11
    66fa:	18fb      	adds	r3, r7, r3
    66fc:	2200      	movs	r2, #0
    66fe:	701a      	strb	r2, [r3, #0]
    6700:	e00d      	b.n	671e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    6702:	230b      	movs	r3, #11
    6704:	18fb      	adds	r3, r7, r3
    6706:	781a      	ldrb	r2, [r3, #0]
    6708:	4b12      	ldr	r3, [pc, #72]	; (6754 <_system_extint_init+0xd4>)
    670a:	0092      	lsls	r2, r2, #2
    670c:	2100      	movs	r1, #0
    670e:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6710:	230b      	movs	r3, #11
    6712:	18fb      	adds	r3, r7, r3
    6714:	781a      	ldrb	r2, [r3, #0]
    6716:	230b      	movs	r3, #11
    6718:	18fb      	adds	r3, r7, r3
    671a:	3201      	adds	r2, #1
    671c:	701a      	strb	r2, [r3, #0]
    671e:	230b      	movs	r3, #11
    6720:	18fb      	adds	r3, r7, r3
    6722:	781b      	ldrb	r3, [r3, #0]
    6724:	2b0f      	cmp	r3, #15
    6726:	d9ec      	bls.n	6702 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6728:	2004      	movs	r0, #4
    672a:	4b0b      	ldr	r3, [pc, #44]	; (6758 <_system_extint_init+0xd8>)
    672c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    672e:	4b0b      	ldr	r3, [pc, #44]	; (675c <_system_extint_init+0xdc>)
    6730:	4798      	blx	r3
}
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	46bd      	mov	sp, r7
    6736:	b004      	add	sp, #16
    6738:	bd80      	pop	{r7, pc}
    673a:	46c0      	nop			; (mov r8, r8)
    673c:	40001800 	.word	0x40001800
    6740:	0000653d 	.word	0x0000653d
    6744:	00006525 	.word	0x00006525
    6748:	0000a49d 	.word	0x0000a49d
    674c:	0000a4e1 	.word	0x0000a4e1
    6750:	00006639 	.word	0x00006639
    6754:	2000456c 	.word	0x2000456c
    6758:	000065c1 	.word	0x000065c1
    675c:	00006761 	.word	0x00006761

00006760 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    6760:	b580      	push	{r7, lr}
    6762:	b082      	sub	sp, #8
    6764:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6766:	4b15      	ldr	r3, [pc, #84]	; (67bc <_extint_enable+0x5c>)
    6768:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    676a:	2300      	movs	r3, #0
    676c:	607b      	str	r3, [r7, #4]
    676e:	e018      	b.n	67a2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6770:	687b      	ldr	r3, [r7, #4]
    6772:	009b      	lsls	r3, r3, #2
    6774:	2208      	movs	r2, #8
    6776:	4694      	mov	ip, r2
    6778:	44bc      	add	ip, r7
    677a:	4463      	add	r3, ip
    677c:	3b08      	subs	r3, #8
    677e:	681a      	ldr	r2, [r3, #0]
    6780:	687b      	ldr	r3, [r7, #4]
    6782:	009b      	lsls	r3, r3, #2
    6784:	2108      	movs	r1, #8
    6786:	468c      	mov	ip, r1
    6788:	44bc      	add	ip, r7
    678a:	4463      	add	r3, ip
    678c:	3b08      	subs	r3, #8
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	781b      	ldrb	r3, [r3, #0]
    6792:	b2db      	uxtb	r3, r3
    6794:	2102      	movs	r1, #2
    6796:	430b      	orrs	r3, r1
    6798:	b2db      	uxtb	r3, r3
    679a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	3301      	adds	r3, #1
    67a0:	607b      	str	r3, [r7, #4]
    67a2:	687b      	ldr	r3, [r7, #4]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d0e3      	beq.n	6770 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    67a8:	46c0      	nop			; (mov r8, r8)
    67aa:	4b05      	ldr	r3, [pc, #20]	; (67c0 <_extint_enable+0x60>)
    67ac:	4798      	blx	r3
    67ae:	1e03      	subs	r3, r0, #0
    67b0:	d1fb      	bne.n	67aa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    67b2:	46c0      	nop			; (mov r8, r8)
    67b4:	46bd      	mov	sp, r7
    67b6:	b002      	add	sp, #8
    67b8:	bd80      	pop	{r7, pc}
    67ba:	46c0      	nop			; (mov r8, r8)
    67bc:	40001800 	.word	0x40001800
    67c0:	00006639 	.word	0x00006639

000067c4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    67c4:	b580      	push	{r7, lr}
    67c6:	b082      	sub	sp, #8
    67c8:	af00      	add	r7, sp, #0
    67ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    67cc:	687b      	ldr	r3, [r7, #4]
    67ce:	2200      	movs	r2, #0
    67d0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    67d2:	687b      	ldr	r3, [r7, #4]
    67d4:	2200      	movs	r2, #0
    67d6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	2201      	movs	r2, #1
    67dc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    67de:	687b      	ldr	r3, [r7, #4]
    67e0:	2201      	movs	r2, #1
    67e2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	2200      	movs	r2, #0
    67e8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    67ea:	687b      	ldr	r3, [r7, #4]
    67ec:	2202      	movs	r2, #2
    67ee:	72da      	strb	r2, [r3, #11]
}
    67f0:	46c0      	nop			; (mov r8, r8)
    67f2:	46bd      	mov	sp, r7
    67f4:	b002      	add	sp, #8
    67f6:	bd80      	pop	{r7, pc}

000067f8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    67f8:	b580      	push	{r7, lr}
    67fa:	b086      	sub	sp, #24
    67fc:	af00      	add	r7, sp, #0
    67fe:	0002      	movs	r2, r0
    6800:	6039      	str	r1, [r7, #0]
    6802:	1dfb      	adds	r3, r7, #7
    6804:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6806:	2308      	movs	r3, #8
    6808:	18fb      	adds	r3, r7, r3
    680a:	0018      	movs	r0, r3
    680c:	4b36      	ldr	r3, [pc, #216]	; (68e8 <extint_chan_set_config+0xf0>)
    680e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6810:	683b      	ldr	r3, [r7, #0]
    6812:	685b      	ldr	r3, [r3, #4]
    6814:	b2da      	uxtb	r2, r3
    6816:	2308      	movs	r3, #8
    6818:	18fb      	adds	r3, r7, r3
    681a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    681c:	2308      	movs	r3, #8
    681e:	18fb      	adds	r3, r7, r3
    6820:	2200      	movs	r2, #0
    6822:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6824:	683b      	ldr	r3, [r7, #0]
    6826:	7a1a      	ldrb	r2, [r3, #8]
    6828:	2308      	movs	r3, #8
    682a:	18fb      	adds	r3, r7, r3
    682c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    682e:	683b      	ldr	r3, [r7, #0]
    6830:	681b      	ldr	r3, [r3, #0]
    6832:	b2db      	uxtb	r3, r3
    6834:	2208      	movs	r2, #8
    6836:	18ba      	adds	r2, r7, r2
    6838:	0011      	movs	r1, r2
    683a:	0018      	movs	r0, r3
    683c:	4b2b      	ldr	r3, [pc, #172]	; (68ec <extint_chan_set_config+0xf4>)
    683e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6840:	1dfb      	adds	r3, r7, #7
    6842:	781b      	ldrb	r3, [r3, #0]
    6844:	0018      	movs	r0, r3
    6846:	4b2a      	ldr	r3, [pc, #168]	; (68f0 <extint_chan_set_config+0xf8>)
    6848:	4798      	blx	r3
    684a:	0003      	movs	r3, r0
    684c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    684e:	1dfb      	adds	r3, r7, #7
    6850:	781b      	ldrb	r3, [r3, #0]
    6852:	2207      	movs	r2, #7
    6854:	4013      	ands	r3, r2
    6856:	009b      	lsls	r3, r3, #2
    6858:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    685a:	683b      	ldr	r3, [r7, #0]
    685c:	7adb      	ldrb	r3, [r3, #11]
    685e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6860:	683b      	ldr	r3, [r7, #0]
    6862:	7a9b      	ldrb	r3, [r3, #10]
    6864:	2b00      	cmp	r3, #0
    6866:	d003      	beq.n	6870 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    6868:	697b      	ldr	r3, [r7, #20]
    686a:	2208      	movs	r2, #8
    686c:	4313      	orrs	r3, r2
    686e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6870:	1dfb      	adds	r3, r7, #7
    6872:	781b      	ldrb	r3, [r3, #0]
    6874:	08db      	lsrs	r3, r3, #3
    6876:	b2db      	uxtb	r3, r3
    6878:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    687a:	1dfb      	adds	r3, r7, #7
    687c:	781b      	ldrb	r3, [r3, #0]
    687e:	08db      	lsrs	r3, r3, #3
    6880:	b2db      	uxtb	r3, r3
    6882:	001a      	movs	r2, r3
    6884:	693b      	ldr	r3, [r7, #16]
    6886:	3206      	adds	r2, #6
    6888:	0092      	lsls	r2, r2, #2
    688a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    688c:	210f      	movs	r1, #15
    688e:	68fa      	ldr	r2, [r7, #12]
    6890:	4091      	lsls	r1, r2
    6892:	000a      	movs	r2, r1
    6894:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6896:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    6898:	6979      	ldr	r1, [r7, #20]
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	4099      	lsls	r1, r3
    689e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    68a0:	431a      	orrs	r2, r3
    68a2:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    68a4:	693b      	ldr	r3, [r7, #16]
    68a6:	1d82      	adds	r2, r0, #6
    68a8:	0092      	lsls	r2, r2, #2
    68aa:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    68ac:	683b      	ldr	r3, [r7, #0]
    68ae:	7a5b      	ldrb	r3, [r3, #9]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d00a      	beq.n	68ca <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    68b4:	693b      	ldr	r3, [r7, #16]
    68b6:	695a      	ldr	r2, [r3, #20]
    68b8:	1dfb      	adds	r3, r7, #7
    68ba:	781b      	ldrb	r3, [r3, #0]
    68bc:	2101      	movs	r1, #1
    68be:	4099      	lsls	r1, r3
    68c0:	000b      	movs	r3, r1
    68c2:	431a      	orrs	r2, r3
    68c4:	693b      	ldr	r3, [r7, #16]
    68c6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    68c8:	e00a      	b.n	68e0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    68ca:	693b      	ldr	r3, [r7, #16]
    68cc:	695b      	ldr	r3, [r3, #20]
    68ce:	1dfa      	adds	r2, r7, #7
    68d0:	7812      	ldrb	r2, [r2, #0]
    68d2:	2101      	movs	r1, #1
    68d4:	4091      	lsls	r1, r2
    68d6:	000a      	movs	r2, r1
    68d8:	43d2      	mvns	r2, r2
    68da:	401a      	ands	r2, r3
    68dc:	693b      	ldr	r3, [r7, #16]
    68de:	615a      	str	r2, [r3, #20]
	}
}
    68e0:	46c0      	nop			; (mov r8, r8)
    68e2:	46bd      	mov	sp, r7
    68e4:	b006      	add	sp, #24
    68e6:	bd80      	pop	{r7, pc}
    68e8:	00006599 	.word	0x00006599
    68ec:	0000a789 	.word	0x0000a789
    68f0:	000065ed 	.word	0x000065ed

000068f4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    68f4:	b580      	push	{r7, lr}
    68f6:	b082      	sub	sp, #8
    68f8:	af00      	add	r7, sp, #0
    68fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    68fc:	687b      	ldr	r3, [r7, #4]
    68fe:	2280      	movs	r2, #128	; 0x80
    6900:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6902:	687b      	ldr	r3, [r7, #4]
    6904:	2200      	movs	r2, #0
    6906:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6908:	687b      	ldr	r3, [r7, #4]
    690a:	2201      	movs	r2, #1
    690c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    690e:	687b      	ldr	r3, [r7, #4]
    6910:	2200      	movs	r2, #0
    6912:	70da      	strb	r2, [r3, #3]
}
    6914:	46c0      	nop			; (mov r8, r8)
    6916:	46bd      	mov	sp, r7
    6918:	b002      	add	sp, #8
    691a:	bd80      	pop	{r7, pc}

0000691c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    691c:	b580      	push	{r7, lr}
    691e:	b084      	sub	sp, #16
    6920:	af00      	add	r7, sp, #0
    6922:	0002      	movs	r2, r0
    6924:	6039      	str	r1, [r7, #0]
    6926:	1dfb      	adds	r3, r7, #7
    6928:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    692a:	230c      	movs	r3, #12
    692c:	18fb      	adds	r3, r7, r3
    692e:	0018      	movs	r0, r3
    6930:	4b10      	ldr	r3, [pc, #64]	; (6974 <port_pin_set_config+0x58>)
    6932:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    6934:	230c      	movs	r3, #12
    6936:	18fb      	adds	r3, r7, r3
    6938:	2280      	movs	r2, #128	; 0x80
    693a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    693c:	683b      	ldr	r3, [r7, #0]
    693e:	781a      	ldrb	r2, [r3, #0]
    6940:	230c      	movs	r3, #12
    6942:	18fb      	adds	r3, r7, r3
    6944:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6946:	683b      	ldr	r3, [r7, #0]
    6948:	785a      	ldrb	r2, [r3, #1]
    694a:	230c      	movs	r3, #12
    694c:	18fb      	adds	r3, r7, r3
    694e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6950:	683b      	ldr	r3, [r7, #0]
    6952:	789a      	ldrb	r2, [r3, #2]
    6954:	230c      	movs	r3, #12
    6956:	18fb      	adds	r3, r7, r3
    6958:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    695a:	230c      	movs	r3, #12
    695c:	18fa      	adds	r2, r7, r3
    695e:	1dfb      	adds	r3, r7, #7
    6960:	781b      	ldrb	r3, [r3, #0]
    6962:	0011      	movs	r1, r2
    6964:	0018      	movs	r0, r3
    6966:	4b04      	ldr	r3, [pc, #16]	; (6978 <port_pin_set_config+0x5c>)
    6968:	4798      	blx	r3
}
    696a:	46c0      	nop			; (mov r8, r8)
    696c:	46bd      	mov	sp, r7
    696e:	b004      	add	sp, #16
    6970:	bd80      	pop	{r7, pc}
    6972:	46c0      	nop			; (mov r8, r8)
    6974:	000068f5 	.word	0x000068f5
    6978:	0000a789 	.word	0x0000a789

0000697c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    697c:	b580      	push	{r7, lr}
    697e:	b086      	sub	sp, #24
    6980:	af00      	add	r7, sp, #0
    6982:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    6984:	4b28      	ldr	r3, [pc, #160]	; (6a28 <_rtc_interrupt_handler+0xac>)
    6986:	687a      	ldr	r2, [r7, #4]
    6988:	0092      	lsls	r2, r2, #2
    698a:	58d3      	ldr	r3, [r2, r3]
    698c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    698e:	697b      	ldr	r3, [r7, #20]
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    6994:	230e      	movs	r3, #14
    6996:	18fb      	adds	r3, r7, r3
    6998:	697a      	ldr	r2, [r7, #20]
    699a:	8a52      	ldrh	r2, [r2, #18]
    699c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    699e:	697b      	ldr	r3, [r7, #20]
    69a0:	8a1b      	ldrh	r3, [r3, #16]
    69a2:	b29a      	uxth	r2, r3
    69a4:	230e      	movs	r3, #14
    69a6:	18fb      	adds	r3, r7, r3
    69a8:	210e      	movs	r1, #14
    69aa:	1879      	adds	r1, r7, r1
    69ac:	8809      	ldrh	r1, [r1, #0]
    69ae:	400a      	ands	r2, r1
    69b0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    69b2:	693b      	ldr	r3, [r7, #16]
    69b4:	7a1b      	ldrb	r3, [r3, #8]
    69b6:	b2da      	uxtb	r2, r3
    69b8:	230c      	movs	r3, #12
    69ba:	18fb      	adds	r3, r7, r3
    69bc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    69be:	693b      	ldr	r3, [r7, #16]
    69c0:	79db      	ldrb	r3, [r3, #7]
    69c2:	b2db      	uxtb	r3, r3
    69c4:	b29a      	uxth	r2, r3
    69c6:	230c      	movs	r3, #12
    69c8:	18fb      	adds	r3, r7, r3
    69ca:	210c      	movs	r1, #12
    69cc:	1879      	adds	r1, r7, r1
    69ce:	8809      	ldrh	r1, [r1, #0]
    69d0:	400a      	ands	r2, r1
    69d2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    69d4:	230c      	movs	r3, #12
    69d6:	18fb      	adds	r3, r7, r3
    69d8:	881b      	ldrh	r3, [r3, #0]
    69da:	2280      	movs	r2, #128	; 0x80
    69dc:	4013      	ands	r3, r2
    69de:	d00c      	beq.n	69fa <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    69e0:	230e      	movs	r3, #14
    69e2:	18fb      	adds	r3, r7, r3
    69e4:	881b      	ldrh	r3, [r3, #0]
    69e6:	2202      	movs	r2, #2
    69e8:	4013      	ands	r3, r2
    69ea:	d002      	beq.n	69f2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    69ec:	697b      	ldr	r3, [r7, #20]
    69ee:	68db      	ldr	r3, [r3, #12]
    69f0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    69f2:	693b      	ldr	r3, [r7, #16]
    69f4:	2280      	movs	r2, #128	; 0x80
    69f6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    69f8:	e011      	b.n	6a1e <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    69fa:	230c      	movs	r3, #12
    69fc:	18fb      	adds	r3, r7, r3
    69fe:	881b      	ldrh	r3, [r3, #0]
    6a00:	2201      	movs	r2, #1
    6a02:	4013      	ands	r3, r2
    6a04:	d00b      	beq.n	6a1e <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    6a06:	230e      	movs	r3, #14
    6a08:	18fb      	adds	r3, r7, r3
    6a0a:	881b      	ldrh	r3, [r3, #0]
    6a0c:	2201      	movs	r2, #1
    6a0e:	4013      	ands	r3, r2
    6a10:	d002      	beq.n	6a18 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    6a12:	697b      	ldr	r3, [r7, #20]
    6a14:	689b      	ldr	r3, [r3, #8]
    6a16:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    6a18:	693b      	ldr	r3, [r7, #16]
    6a1a:	2201      	movs	r2, #1
    6a1c:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    6a1e:	46c0      	nop			; (mov r8, r8)
    6a20:	46bd      	mov	sp, r7
    6a22:	b006      	add	sp, #24
    6a24:	bd80      	pop	{r7, pc}
    6a26:	46c0      	nop			; (mov r8, r8)
    6a28:	200045ac 	.word	0x200045ac

00006a2c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6a2c:	b580      	push	{r7, lr}
    6a2e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    6a30:	2000      	movs	r0, #0
    6a32:	4b02      	ldr	r3, [pc, #8]	; (6a3c <RTC_Handler+0x10>)
    6a34:	4798      	blx	r3
}
    6a36:	46c0      	nop			; (mov r8, r8)
    6a38:	46bd      	mov	sp, r7
    6a3a:	bd80      	pop	{r7, pc}
    6a3c:	0000697d 	.word	0x0000697d

00006a40 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    6a40:	b580      	push	{r7, lr}
    6a42:	b082      	sub	sp, #8
    6a44:	af00      	add	r7, sp, #0
    6a46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6a48:	687b      	ldr	r3, [r7, #4]
    6a4a:	2200      	movs	r2, #0
    6a4c:	701a      	strb	r2, [r3, #0]
}
    6a4e:	46c0      	nop			; (mov r8, r8)
    6a50:	46bd      	mov	sp, r7
    6a52:	b002      	add	sp, #8
    6a54:	bd80      	pop	{r7, pc}
    6a56:	46c0      	nop			; (mov r8, r8)

00006a58 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	b082      	sub	sp, #8
    6a5c:	af00      	add	r7, sp, #0
    6a5e:	0002      	movs	r2, r0
    6a60:	6039      	str	r1, [r7, #0]
    6a62:	1dfb      	adds	r3, r7, #7
    6a64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6a66:	1dfb      	adds	r3, r7, #7
    6a68:	781b      	ldrb	r3, [r3, #0]
    6a6a:	2b01      	cmp	r3, #1
    6a6c:	d00a      	beq.n	6a84 <system_apb_clock_set_mask+0x2c>
    6a6e:	2b02      	cmp	r3, #2
    6a70:	d00f      	beq.n	6a92 <system_apb_clock_set_mask+0x3a>
    6a72:	2b00      	cmp	r3, #0
    6a74:	d114      	bne.n	6aa0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6a76:	4b0e      	ldr	r3, [pc, #56]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a78:	4a0d      	ldr	r2, [pc, #52]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a7a:	6991      	ldr	r1, [r2, #24]
    6a7c:	683a      	ldr	r2, [r7, #0]
    6a7e:	430a      	orrs	r2, r1
    6a80:	619a      	str	r2, [r3, #24]
			break;
    6a82:	e00f      	b.n	6aa4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6a84:	4b0a      	ldr	r3, [pc, #40]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a86:	4a0a      	ldr	r2, [pc, #40]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a88:	69d1      	ldr	r1, [r2, #28]
    6a8a:	683a      	ldr	r2, [r7, #0]
    6a8c:	430a      	orrs	r2, r1
    6a8e:	61da      	str	r2, [r3, #28]
			break;
    6a90:	e008      	b.n	6aa4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6a92:	4b07      	ldr	r3, [pc, #28]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a94:	4a06      	ldr	r2, [pc, #24]	; (6ab0 <system_apb_clock_set_mask+0x58>)
    6a96:	6a11      	ldr	r1, [r2, #32]
    6a98:	683a      	ldr	r2, [r7, #0]
    6a9a:	430a      	orrs	r2, r1
    6a9c:	621a      	str	r2, [r3, #32]
			break;
    6a9e:	e001      	b.n	6aa4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6aa0:	2317      	movs	r3, #23
    6aa2:	e000      	b.n	6aa6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6aa4:	2300      	movs	r3, #0
}
    6aa6:	0018      	movs	r0, r3
    6aa8:	46bd      	mov	sp, r7
    6aaa:	b002      	add	sp, #8
    6aac:	bd80      	pop	{r7, pc}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	40000400 	.word	0x40000400

00006ab4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    6ab4:	b580      	push	{r7, lr}
    6ab6:	b082      	sub	sp, #8
    6ab8:	af00      	add	r7, sp, #0
    6aba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6abc:	687b      	ldr	r3, [r7, #4]
    6abe:	2280      	movs	r2, #128	; 0x80
    6ac0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6ac2:	687b      	ldr	r3, [r7, #4]
    6ac4:	2200      	movs	r2, #0
    6ac6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ac8:	687b      	ldr	r3, [r7, #4]
    6aca:	2201      	movs	r2, #1
    6acc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6ace:	687b      	ldr	r3, [r7, #4]
    6ad0:	2200      	movs	r2, #0
    6ad2:	70da      	strb	r2, [r3, #3]
}
    6ad4:	46c0      	nop			; (mov r8, r8)
    6ad6:	46bd      	mov	sp, r7
    6ad8:	b002      	add	sp, #8
    6ada:	bd80      	pop	{r7, pc}

00006adc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    6adc:	b580      	push	{r7, lr}
    6ade:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6ae0:	4b05      	ldr	r3, [pc, #20]	; (6af8 <system_is_debugger_present+0x1c>)
    6ae2:	789b      	ldrb	r3, [r3, #2]
    6ae4:	b2db      	uxtb	r3, r3
    6ae6:	001a      	movs	r2, r3
    6ae8:	2302      	movs	r3, #2
    6aea:	4013      	ands	r3, r2
    6aec:	1e5a      	subs	r2, r3, #1
    6aee:	4193      	sbcs	r3, r2
    6af0:	b2db      	uxtb	r3, r3
}
    6af2:	0018      	movs	r0, r3
    6af4:	46bd      	mov	sp, r7
    6af6:	bd80      	pop	{r7, pc}
    6af8:	41002000 	.word	0x41002000

00006afc <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    6afc:	b580      	push	{r7, lr}
    6afe:	b084      	sub	sp, #16
    6b00:	af00      	add	r7, sp, #0
    6b02:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6b04:	687b      	ldr	r3, [r7, #4]
    6b06:	681b      	ldr	r3, [r3, #0]
    6b08:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6b0a:	68fb      	ldr	r3, [r7, #12]
    6b0c:	69db      	ldr	r3, [r3, #28]
    6b0e:	2207      	movs	r2, #7
    6b10:	4013      	ands	r3, r2
    6b12:	1e5a      	subs	r2, r3, #1
    6b14:	4193      	sbcs	r3, r2
    6b16:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    6b18:	0018      	movs	r0, r3
    6b1a:	46bd      	mov	sp, r7
    6b1c:	b004      	add	sp, #16
    6b1e:	bd80      	pop	{r7, pc}

00006b20 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    6b20:	b580      	push	{r7, lr}
    6b22:	b082      	sub	sp, #8
    6b24:	af00      	add	r7, sp, #0
    6b26:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    6b28:	46c0      	nop			; (mov r8, r8)
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	0018      	movs	r0, r3
    6b2e:	4b04      	ldr	r3, [pc, #16]	; (6b40 <_i2c_master_wait_for_sync+0x20>)
    6b30:	4798      	blx	r3
    6b32:	1e03      	subs	r3, r0, #0
    6b34:	d1f9      	bne.n	6b2a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	46bd      	mov	sp, r7
    6b3a:	b002      	add	sp, #8
    6b3c:	bd80      	pop	{r7, pc}
    6b3e:	46c0      	nop			; (mov r8, r8)
    6b40:	00006afd 	.word	0x00006afd

00006b44 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    6b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b46:	b095      	sub	sp, #84	; 0x54
    6b48:	af00      	add	r7, sp, #0
    6b4a:	60f8      	str	r0, [r7, #12]
    6b4c:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    6b4e:	2300      	movs	r3, #0
    6b50:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    6b52:	2300      	movs	r3, #0
    6b54:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    6b56:	2300      	movs	r3, #0
    6b58:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    6b5a:	233b      	movs	r3, #59	; 0x3b
    6b5c:	2208      	movs	r2, #8
    6b5e:	4694      	mov	ip, r2
    6b60:	44bc      	add	ip, r7
    6b62:	4463      	add	r3, ip
    6b64:	2200      	movs	r2, #0
    6b66:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6b68:	68fb      	ldr	r3, [r7, #12]
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    6b6e:	68fb      	ldr	r3, [r7, #12]
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    6b74:	2323      	movs	r3, #35	; 0x23
    6b76:	2208      	movs	r2, #8
    6b78:	18ba      	adds	r2, r7, r2
    6b7a:	18d4      	adds	r4, r2, r3
    6b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b7e:	0018      	movs	r0, r3
    6b80:	4bdb      	ldr	r3, [pc, #876]	; (6ef0 <_i2c_master_set_config+0x3ac>)
    6b82:	4798      	blx	r3
    6b84:	0003      	movs	r3, r0
    6b86:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6b88:	230c      	movs	r3, #12
    6b8a:	2208      	movs	r2, #8
    6b8c:	4694      	mov	ip, r2
    6b8e:	44bc      	add	ip, r7
    6b90:	4463      	add	r3, ip
    6b92:	0018      	movs	r0, r3
    6b94:	4bd7      	ldr	r3, [pc, #860]	; (6ef4 <_i2c_master_set_config+0x3b0>)
    6b96:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    6b98:	68bb      	ldr	r3, [r7, #8]
    6b9a:	69db      	ldr	r3, [r3, #28]
    6b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    6b9e:	68bb      	ldr	r3, [r7, #8]
    6ba0:	6a1b      	ldr	r3, [r3, #32]
    6ba2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    6ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	d106      	bne.n	6bb8 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bac:	2100      	movs	r1, #0
    6bae:	0018      	movs	r0, r3
    6bb0:	4bd1      	ldr	r3, [pc, #836]	; (6ef8 <_i2c_master_set_config+0x3b4>)
    6bb2:	4798      	blx	r3
    6bb4:	0003      	movs	r3, r0
    6bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    6bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6bba:	b2da      	uxtb	r2, r3
    6bbc:	230c      	movs	r3, #12
    6bbe:	2108      	movs	r1, #8
    6bc0:	468c      	mov	ip, r1
    6bc2:	44bc      	add	ip, r7
    6bc4:	4463      	add	r3, ip
    6bc6:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6bc8:	230c      	movs	r3, #12
    6bca:	2208      	movs	r2, #8
    6bcc:	4694      	mov	ip, r2
    6bce:	44bc      	add	ip, r7
    6bd0:	4463      	add	r3, ip
    6bd2:	2202      	movs	r2, #2
    6bd4:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    6bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6bd8:	0c1b      	lsrs	r3, r3, #16
    6bda:	b2db      	uxtb	r3, r3
    6bdc:	220c      	movs	r2, #12
    6bde:	2108      	movs	r1, #8
    6be0:	468c      	mov	ip, r1
    6be2:	44bc      	add	ip, r7
    6be4:	4462      	add	r2, ip
    6be6:	0011      	movs	r1, r2
    6be8:	0018      	movs	r0, r3
    6bea:	4bc4      	ldr	r3, [pc, #784]	; (6efc <_i2c_master_set_config+0x3b8>)
    6bec:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    6bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d106      	bne.n	6c02 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bf6:	2101      	movs	r1, #1
    6bf8:	0018      	movs	r0, r3
    6bfa:	4bbf      	ldr	r3, [pc, #764]	; (6ef8 <_i2c_master_set_config+0x3b4>)
    6bfc:	4798      	blx	r3
    6bfe:	0003      	movs	r3, r0
    6c00:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    6c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6c04:	b2da      	uxtb	r2, r3
    6c06:	230c      	movs	r3, #12
    6c08:	2108      	movs	r1, #8
    6c0a:	468c      	mov	ip, r1
    6c0c:	44bc      	add	ip, r7
    6c0e:	4463      	add	r3, ip
    6c10:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6c12:	230c      	movs	r3, #12
    6c14:	2208      	movs	r2, #8
    6c16:	4694      	mov	ip, r2
    6c18:	44bc      	add	ip, r7
    6c1a:	4463      	add	r3, ip
    6c1c:	2202      	movs	r2, #2
    6c1e:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    6c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6c22:	0c1b      	lsrs	r3, r3, #16
    6c24:	b2db      	uxtb	r3, r3
    6c26:	220c      	movs	r2, #12
    6c28:	2108      	movs	r1, #8
    6c2a:	468c      	mov	ip, r1
    6c2c:	44bc      	add	ip, r7
    6c2e:	4462      	add	r2, ip
    6c30:	0011      	movs	r1, r2
    6c32:	0018      	movs	r0, r3
    6c34:	4bb1      	ldr	r3, [pc, #708]	; (6efc <_i2c_master_set_config+0x3b8>)
    6c36:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    6c38:	68bb      	ldr	r3, [r7, #8]
    6c3a:	8a9a      	ldrh	r2, [r3, #20]
    6c3c:	68fb      	ldr	r3, [r7, #12]
    6c3e:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    6c40:	68bb      	ldr	r3, [r7, #8]
    6c42:	8ada      	ldrh	r2, [r3, #22]
    6c44:	68fb      	ldr	r3, [r7, #12]
    6c46:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    6c48:	68bb      	ldr	r3, [r7, #8]
    6c4a:	7e1b      	ldrb	r3, [r3, #24]
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d103      	bne.n	6c58 <_i2c_master_set_config+0x114>
    6c50:	4bab      	ldr	r3, [pc, #684]	; (6f00 <_i2c_master_set_config+0x3bc>)
    6c52:	4798      	blx	r3
    6c54:	1e03      	subs	r3, r0, #0
    6c56:	d002      	beq.n	6c5e <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6c58:	2380      	movs	r3, #128	; 0x80
    6c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    6c5c:	e001      	b.n	6c62 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    6c5e:	2300      	movs	r3, #0
    6c60:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    6c62:	68bb      	ldr	r3, [r7, #8]
    6c64:	691b      	ldr	r3, [r3, #16]
    6c66:	2b00      	cmp	r3, #0
    6c68:	d004      	beq.n	6c74 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    6c6a:	68bb      	ldr	r3, [r7, #8]
    6c6c:	691b      	ldr	r3, [r3, #16]
    6c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6c70:	4313      	orrs	r3, r2
    6c72:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    6c74:	68bb      	ldr	r3, [r7, #8]
    6c76:	689b      	ldr	r3, [r3, #8]
    6c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6c7a:	4313      	orrs	r3, r2
    6c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    6c7e:	68bb      	ldr	r3, [r7, #8]
    6c80:	2224      	movs	r2, #36	; 0x24
    6c82:	5c9b      	ldrb	r3, [r3, r2]
    6c84:	2b00      	cmp	r3, #0
    6c86:	d004      	beq.n	6c92 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6c8a:	2280      	movs	r2, #128	; 0x80
    6c8c:	05d2      	lsls	r2, r2, #23
    6c8e:	4313      	orrs	r3, r2
    6c90:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    6c92:	68bb      	ldr	r3, [r7, #8]
    6c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c96:	2b00      	cmp	r3, #0
    6c98:	d004      	beq.n	6ca4 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    6c9a:	68bb      	ldr	r3, [r7, #8]
    6c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    6ca0:	4313      	orrs	r3, r2
    6ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6ca4:	68bb      	ldr	r3, [r7, #8]
    6ca6:	222c      	movs	r2, #44	; 0x2c
    6ca8:	5c9b      	ldrb	r3, [r3, r2]
    6caa:	2b00      	cmp	r3, #0
    6cac:	d105      	bne.n	6cba <_i2c_master_set_config+0x176>
    6cae:	68bb      	ldr	r3, [r7, #8]
    6cb0:	689a      	ldr	r2, [r3, #8]
    6cb2:	2380      	movs	r3, #128	; 0x80
    6cb4:	049b      	lsls	r3, r3, #18
    6cb6:	429a      	cmp	r2, r3
    6cb8:	d104      	bne.n	6cc4 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6cbc:	2280      	movs	r2, #128	; 0x80
    6cbe:	0512      	lsls	r2, r2, #20
    6cc0:	4313      	orrs	r3, r2
    6cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    6cc4:	68bb      	ldr	r3, [r7, #8]
    6cc6:	222d      	movs	r2, #45	; 0x2d
    6cc8:	5c9b      	ldrb	r3, [r3, r2]
    6cca:	2b00      	cmp	r3, #0
    6ccc:	d004      	beq.n	6cd8 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6cd0:	2280      	movs	r2, #128	; 0x80
    6cd2:	0412      	lsls	r2, r2, #16
    6cd4:	4313      	orrs	r3, r2
    6cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    6cd8:	68bb      	ldr	r3, [r7, #8]
    6cda:	222e      	movs	r2, #46	; 0x2e
    6cdc:	5c9b      	ldrb	r3, [r3, r2]
    6cde:	2b00      	cmp	r3, #0
    6ce0:	d004      	beq.n	6cec <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6ce4:	2280      	movs	r2, #128	; 0x80
    6ce6:	03d2      	lsls	r2, r2, #15
    6ce8:	4313      	orrs	r3, r2
    6cea:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6cee:	681a      	ldr	r2, [r3, #0]
    6cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6cf2:	431a      	orrs	r2, r3
    6cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6cf6:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6cfa:	2280      	movs	r2, #128	; 0x80
    6cfc:	0052      	lsls	r2, r2, #1
    6cfe:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6d00:	2323      	movs	r3, #35	; 0x23
    6d02:	2208      	movs	r2, #8
    6d04:	4694      	mov	ip, r2
    6d06:	44bc      	add	ip, r7
    6d08:	4463      	add	r3, ip
    6d0a:	781b      	ldrb	r3, [r3, #0]
    6d0c:	3314      	adds	r3, #20
    6d0e:	b2db      	uxtb	r3, r3
    6d10:	0018      	movs	r0, r3
    6d12:	4b7c      	ldr	r3, [pc, #496]	; (6f04 <_i2c_master_set_config+0x3c0>)
    6d14:	4798      	blx	r3
    6d16:	0003      	movs	r3, r0
    6d18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    6d1a:	68bb      	ldr	r3, [r7, #8]
    6d1c:	681b      	ldr	r3, [r3, #0]
    6d1e:	22fa      	movs	r2, #250	; 0xfa
    6d20:	0092      	lsls	r2, r2, #2
    6d22:	4353      	muls	r3, r2
    6d24:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6d26:	68bb      	ldr	r3, [r7, #8]
    6d28:	685b      	ldr	r3, [r3, #4]
    6d2a:	22fa      	movs	r2, #250	; 0xfa
    6d2c:	0092      	lsls	r2, r2, #2
    6d2e:	4353      	muls	r3, r2
    6d30:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    6d32:	68bb      	ldr	r3, [r7, #8]
    6d34:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6d36:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    6d38:	4b73      	ldr	r3, [pc, #460]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6d3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    6d3c:	4798      	blx	r3
    6d3e:	0005      	movs	r5, r0
    6d40:	000e      	movs	r6, r1
    6d42:	4b71      	ldr	r3, [pc, #452]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6d44:	6a38      	ldr	r0, [r7, #32]
    6d46:	4798      	blx	r3
    6d48:	6038      	str	r0, [r7, #0]
    6d4a:	6079      	str	r1, [r7, #4]
    6d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6d4e:	69ba      	ldr	r2, [r7, #24]
    6d50:	435a      	muls	r2, r3
    6d52:	4b6d      	ldr	r3, [pc, #436]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6d54:	0010      	movs	r0, r2
    6d56:	4798      	blx	r3
    6d58:	4c6c      	ldr	r4, [pc, #432]	; (6f0c <_i2c_master_set_config+0x3c8>)
    6d5a:	4a6d      	ldr	r2, [pc, #436]	; (6f10 <_i2c_master_set_config+0x3cc>)
    6d5c:	4b6d      	ldr	r3, [pc, #436]	; (6f14 <_i2c_master_set_config+0x3d0>)
    6d5e:	47a0      	blx	r4
    6d60:	0003      	movs	r3, r0
    6d62:	000c      	movs	r4, r1
    6d64:	0018      	movs	r0, r3
    6d66:	0021      	movs	r1, r4
    6d68:	4c6b      	ldr	r4, [pc, #428]	; (6f18 <_i2c_master_set_config+0x3d4>)
    6d6a:	2200      	movs	r2, #0
    6d6c:	4b6b      	ldr	r3, [pc, #428]	; (6f1c <_i2c_master_set_config+0x3d8>)
    6d6e:	47a0      	blx	r4
    6d70:	0003      	movs	r3, r0
    6d72:	000c      	movs	r4, r1
    6d74:	001a      	movs	r2, r3
    6d76:	0023      	movs	r3, r4
    6d78:	4c64      	ldr	r4, [pc, #400]	; (6f0c <_i2c_master_set_config+0x3c8>)
    6d7a:	6838      	ldr	r0, [r7, #0]
    6d7c:	6879      	ldr	r1, [r7, #4]
    6d7e:	47a0      	blx	r4
    6d80:	0003      	movs	r3, r0
    6d82:	000c      	movs	r4, r1
    6d84:	001a      	movs	r2, r3
    6d86:	0023      	movs	r3, r4
    6d88:	4c65      	ldr	r4, [pc, #404]	; (6f20 <_i2c_master_set_config+0x3dc>)
    6d8a:	0028      	movs	r0, r5
    6d8c:	0031      	movs	r1, r6
    6d8e:	47a0      	blx	r4
    6d90:	0003      	movs	r3, r0
    6d92:	000c      	movs	r4, r1
    6d94:	001d      	movs	r5, r3
    6d96:	0026      	movs	r6, r4
    6d98:	6a3b      	ldr	r3, [r7, #32]
    6d9a:	005a      	lsls	r2, r3, #1
    6d9c:	4b5a      	ldr	r3, [pc, #360]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6d9e:	0010      	movs	r0, r2
    6da0:	4798      	blx	r3
    6da2:	0002      	movs	r2, r0
    6da4:	000b      	movs	r3, r1
    6da6:	4c5c      	ldr	r4, [pc, #368]	; (6f18 <_i2c_master_set_config+0x3d4>)
    6da8:	0028      	movs	r0, r5
    6daa:	0031      	movs	r1, r6
    6dac:	47a0      	blx	r4
    6dae:	0003      	movs	r3, r0
    6db0:	000c      	movs	r4, r1
    6db2:	0018      	movs	r0, r3
    6db4:	0021      	movs	r1, r4
    6db6:	4c5a      	ldr	r4, [pc, #360]	; (6f20 <_i2c_master_set_config+0x3dc>)
    6db8:	2200      	movs	r2, #0
    6dba:	4b5a      	ldr	r3, [pc, #360]	; (6f24 <_i2c_master_set_config+0x3e0>)
    6dbc:	47a0      	blx	r4
    6dbe:	0003      	movs	r3, r0
    6dc0:	000c      	movs	r4, r1
    6dc2:	001d      	movs	r5, r3
    6dc4:	0026      	movs	r6, r4
    6dc6:	6a3b      	ldr	r3, [r7, #32]
    6dc8:	005a      	lsls	r2, r3, #1
    6dca:	4b4f      	ldr	r3, [pc, #316]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6dcc:	0010      	movs	r0, r2
    6dce:	4798      	blx	r3
    6dd0:	0002      	movs	r2, r0
    6dd2:	000b      	movs	r3, r1
    6dd4:	4c54      	ldr	r4, [pc, #336]	; (6f28 <_i2c_master_set_config+0x3e4>)
    6dd6:	0028      	movs	r0, r5
    6dd8:	0031      	movs	r1, r6
    6dda:	47a0      	blx	r4
    6ddc:	0003      	movs	r3, r0
    6dde:	000c      	movs	r4, r1
    6de0:	0019      	movs	r1, r3
    6de2:	0022      	movs	r2, r4
    6de4:	4b51      	ldr	r3, [pc, #324]	; (6f2c <_i2c_master_set_config+0x3e8>)
    6de6:	0008      	movs	r0, r1
    6de8:	0011      	movs	r1, r2
    6dea:	4798      	blx	r3
    6dec:	0003      	movs	r3, r0
    6dee:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    6df0:	68bb      	ldr	r3, [r7, #8]
    6df2:	689a      	ldr	r2, [r3, #8]
    6df4:	2380      	movs	r3, #128	; 0x80
    6df6:	049b      	lsls	r3, r3, #18
    6df8:	429a      	cmp	r2, r3
    6dfa:	d145      	bne.n	6e88 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6dfc:	4b42      	ldr	r3, [pc, #264]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    6e00:	4798      	blx	r3
    6e02:	4c45      	ldr	r4, [pc, #276]	; (6f18 <_i2c_master_set_config+0x3d4>)
    6e04:	0002      	movs	r2, r0
    6e06:	000b      	movs	r3, r1
    6e08:	47a0      	blx	r4
    6e0a:	0003      	movs	r3, r0
    6e0c:	000c      	movs	r4, r1
    6e0e:	001d      	movs	r5, r3
    6e10:	0026      	movs	r6, r4
    6e12:	4b3d      	ldr	r3, [pc, #244]	; (6f08 <_i2c_master_set_config+0x3c4>)
    6e14:	69f8      	ldr	r0, [r7, #28]
    6e16:	4798      	blx	r3
    6e18:	4c3c      	ldr	r4, [pc, #240]	; (6f0c <_i2c_master_set_config+0x3c8>)
    6e1a:	2200      	movs	r2, #0
    6e1c:	4b44      	ldr	r3, [pc, #272]	; (6f30 <_i2c_master_set_config+0x3ec>)
    6e1e:	47a0      	blx	r4
    6e20:	0003      	movs	r3, r0
    6e22:	000c      	movs	r4, r1
    6e24:	001a      	movs	r2, r3
    6e26:	0023      	movs	r3, r4
    6e28:	4c3f      	ldr	r4, [pc, #252]	; (6f28 <_i2c_master_set_config+0x3e4>)
    6e2a:	0028      	movs	r0, r5
    6e2c:	0031      	movs	r1, r6
    6e2e:	47a0      	blx	r4
    6e30:	0003      	movs	r3, r0
    6e32:	000c      	movs	r4, r1
    6e34:	0018      	movs	r0, r3
    6e36:	0021      	movs	r1, r4
    6e38:	4c39      	ldr	r4, [pc, #228]	; (6f20 <_i2c_master_set_config+0x3dc>)
    6e3a:	2200      	movs	r2, #0
    6e3c:	4b39      	ldr	r3, [pc, #228]	; (6f24 <_i2c_master_set_config+0x3e0>)
    6e3e:	47a0      	blx	r4
    6e40:	0003      	movs	r3, r0
    6e42:	000c      	movs	r4, r1
    6e44:	0019      	movs	r1, r3
    6e46:	0022      	movs	r2, r4
    6e48:	4b38      	ldr	r3, [pc, #224]	; (6f2c <_i2c_master_set_config+0x3e8>)
    6e4a:	0008      	movs	r0, r1
    6e4c:	0011      	movs	r1, r2
    6e4e:	4798      	blx	r3
    6e50:	0003      	movs	r3, r0
    6e52:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    6e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6e56:	2b00      	cmp	r3, #0
    6e58:	d009      	beq.n	6e6e <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6e5a:	4b36      	ldr	r3, [pc, #216]	; (6f34 <_i2c_master_set_config+0x3f0>)
    6e5c:	69f9      	ldr	r1, [r7, #28]
    6e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    6e60:	4798      	blx	r3
    6e62:	0003      	movs	r3, r0
    6e64:	1e9a      	subs	r2, r3, #2
    6e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6e68:	1ad3      	subs	r3, r2, r3
    6e6a:	64bb      	str	r3, [r7, #72]	; 0x48
    6e6c:	e00c      	b.n	6e88 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6e6e:	69fb      	ldr	r3, [r7, #28]
    6e70:	005a      	lsls	r2, r3, #1
    6e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e74:	18d3      	adds	r3, r2, r3
    6e76:	1e5a      	subs	r2, r3, #1
    6e78:	69fb      	ldr	r3, [r7, #28]
    6e7a:	0059      	lsls	r1, r3, #1
    6e7c:	4b2d      	ldr	r3, [pc, #180]	; (6f34 <_i2c_master_set_config+0x3f0>)
    6e7e:	0010      	movs	r0, r2
    6e80:	4798      	blx	r3
    6e82:	0003      	movs	r3, r0
    6e84:	3b01      	subs	r3, #1
    6e86:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e8a:	2bff      	cmp	r3, #255	; 0xff
    6e8c:	dc08      	bgt.n	6ea0 <_i2c_master_set_config+0x35c>
    6e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6e90:	2b00      	cmp	r3, #0
    6e92:	db05      	blt.n	6ea0 <_i2c_master_set_config+0x35c>
    6e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6e96:	2bff      	cmp	r3, #255	; 0xff
    6e98:	dc02      	bgt.n	6ea0 <_i2c_master_set_config+0x35c>
    6e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6e9c:	2b00      	cmp	r3, #0
    6e9e:	da06      	bge.n	6eae <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ea0:	233b      	movs	r3, #59	; 0x3b
    6ea2:	2208      	movs	r2, #8
    6ea4:	4694      	mov	ip, r2
    6ea6:	44bc      	add	ip, r7
    6ea8:	4463      	add	r3, ip
    6eaa:	2240      	movs	r2, #64	; 0x40
    6eac:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    6eae:	233b      	movs	r3, #59	; 0x3b
    6eb0:	2208      	movs	r2, #8
    6eb2:	4694      	mov	ip, r2
    6eb4:	44bc      	add	ip, r7
    6eb6:	4463      	add	r3, ip
    6eb8:	781b      	ldrb	r3, [r3, #0]
    6eba:	2b40      	cmp	r3, #64	; 0x40
    6ebc:	d00e      	beq.n	6edc <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6ec0:	22ff      	movs	r2, #255	; 0xff
    6ec2:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    6ec6:	041b      	lsls	r3, r3, #16
    6ec8:	0019      	movs	r1, r3
    6eca:	23ff      	movs	r3, #255	; 0xff
    6ecc:	041b      	lsls	r3, r3, #16
    6ece:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6ed0:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6ed4:	0612      	lsls	r2, r2, #24
    6ed6:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6eda:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    6edc:	233b      	movs	r3, #59	; 0x3b
    6ede:	2208      	movs	r2, #8
    6ee0:	4694      	mov	ip, r2
    6ee2:	44bc      	add	ip, r7
    6ee4:	4463      	add	r3, ip
    6ee6:	781b      	ldrb	r3, [r3, #0]
}
    6ee8:	0018      	movs	r0, r3
    6eea:	46bd      	mov	sp, r7
    6eec:	b015      	add	sp, #84	; 0x54
    6eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ef0:	00008079 	.word	0x00008079
    6ef4:	00006ab5 	.word	0x00006ab5
    6ef8:	00007ebd 	.word	0x00007ebd
    6efc:	0000a789 	.word	0x0000a789
    6f00:	00006add 	.word	0x00006add
    6f04:	0000a5c1 	.word	0x0000a5c1
    6f08:	00010649 	.word	0x00010649
    6f0c:	0000f9bd 	.word	0x0000f9bd
    6f10:	e826d695 	.word	0xe826d695
    6f14:	3e112e0b 	.word	0x3e112e0b
    6f18:	0000ed39 	.word	0x0000ed39
    6f1c:	40240000 	.word	0x40240000
    6f20:	0000feb1 	.word	0x0000feb1
    6f24:	3ff00000 	.word	0x3ff00000
    6f28:	0000f391 	.word	0x0000f391
    6f2c:	00010559 	.word	0x00010559
    6f30:	40080000 	.word	0x40080000
    6f34:	0000e9f5 	.word	0x0000e9f5

00006f38 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6f38:	b590      	push	{r4, r7, lr}
    6f3a:	b08b      	sub	sp, #44	; 0x2c
    6f3c:	af00      	add	r7, sp, #0
    6f3e:	60f8      	str	r0, [r7, #12]
    6f40:	60b9      	str	r1, [r7, #8]
    6f42:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6f44:	68fb      	ldr	r3, [r7, #12]
    6f46:	68ba      	ldr	r2, [r7, #8]
    6f48:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6f4a:	68fb      	ldr	r3, [r7, #12]
    6f4c:	681b      	ldr	r3, [r3, #0]
    6f4e:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6f50:	68fb      	ldr	r3, [r7, #12]
    6f52:	681b      	ldr	r3, [r3, #0]
    6f54:	0018      	movs	r0, r3
    6f56:	4b3b      	ldr	r3, [pc, #236]	; (7044 <i2c_master_init+0x10c>)
    6f58:	4798      	blx	r3
    6f5a:	0003      	movs	r3, r0
    6f5c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6f5e:	6a3b      	ldr	r3, [r7, #32]
    6f60:	3302      	adds	r3, #2
    6f62:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6f64:	6a3b      	ldr	r3, [r7, #32]
    6f66:	3314      	adds	r3, #20
    6f68:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6f6a:	2201      	movs	r2, #1
    6f6c:	69fb      	ldr	r3, [r7, #28]
    6f6e:	409a      	lsls	r2, r3
    6f70:	0013      	movs	r3, r2
    6f72:	0019      	movs	r1, r3
    6f74:	2002      	movs	r0, #2
    6f76:	4b34      	ldr	r3, [pc, #208]	; (7048 <i2c_master_init+0x110>)
    6f78:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6f7a:	2314      	movs	r3, #20
    6f7c:	18fb      	adds	r3, r7, r3
    6f7e:	0018      	movs	r0, r3
    6f80:	4b32      	ldr	r3, [pc, #200]	; (704c <i2c_master_init+0x114>)
    6f82:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6f84:	687b      	ldr	r3, [r7, #4]
    6f86:	7b1a      	ldrb	r2, [r3, #12]
    6f88:	2314      	movs	r3, #20
    6f8a:	18fb      	adds	r3, r7, r3
    6f8c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6f8e:	69bb      	ldr	r3, [r7, #24]
    6f90:	b2db      	uxtb	r3, r3
    6f92:	2214      	movs	r2, #20
    6f94:	18ba      	adds	r2, r7, r2
    6f96:	0011      	movs	r1, r2
    6f98:	0018      	movs	r0, r3
    6f9a:	4b2d      	ldr	r3, [pc, #180]	; (7050 <i2c_master_init+0x118>)
    6f9c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6f9e:	69bb      	ldr	r3, [r7, #24]
    6fa0:	b2db      	uxtb	r3, r3
    6fa2:	0018      	movs	r0, r3
    6fa4:	4b2b      	ldr	r3, [pc, #172]	; (7054 <i2c_master_init+0x11c>)
    6fa6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	7b1b      	ldrb	r3, [r3, #12]
    6fac:	2100      	movs	r1, #0
    6fae:	0018      	movs	r0, r3
    6fb0:	4b29      	ldr	r3, [pc, #164]	; (7058 <i2c_master_init+0x120>)
    6fb2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6fb6:	681b      	ldr	r3, [r3, #0]
    6fb8:	2202      	movs	r2, #2
    6fba:	4013      	ands	r3, r2
    6fbc:	d001      	beq.n	6fc2 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    6fbe:	231c      	movs	r3, #28
    6fc0:	e03b      	b.n	703a <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	2201      	movs	r2, #1
    6fc8:	4013      	ands	r3, r2
    6fca:	d001      	beq.n	6fd0 <i2c_master_init+0x98>
		return STATUS_BUSY;
    6fcc:	2305      	movs	r3, #5
    6fce:	e034      	b.n	703a <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6fd0:	68fb      	ldr	r3, [r7, #12]
    6fd2:	681b      	ldr	r3, [r3, #0]
    6fd4:	2217      	movs	r2, #23
    6fd6:	18bc      	adds	r4, r7, r2
    6fd8:	0018      	movs	r0, r3
    6fda:	4b1a      	ldr	r3, [pc, #104]	; (7044 <i2c_master_init+0x10c>)
    6fdc:	4798      	blx	r3
    6fde:	0003      	movs	r3, r0
    6fe0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    6fe2:	4a1e      	ldr	r2, [pc, #120]	; (705c <i2c_master_init+0x124>)
    6fe4:	2317      	movs	r3, #23
    6fe6:	18fb      	adds	r3, r7, r3
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	0011      	movs	r1, r2
    6fec:	0018      	movs	r0, r3
    6fee:	4b1c      	ldr	r3, [pc, #112]	; (7060 <i2c_master_init+0x128>)
    6ff0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6ff2:	2317      	movs	r3, #23
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	781a      	ldrb	r2, [r3, #0]
    6ff8:	4b1a      	ldr	r3, [pc, #104]	; (7064 <i2c_master_init+0x12c>)
    6ffa:	0092      	lsls	r2, r2, #2
    6ffc:	68f9      	ldr	r1, [r7, #12]
    6ffe:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    7000:	68fb      	ldr	r3, [r7, #12]
    7002:	2200      	movs	r2, #0
    7004:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    7006:	68fb      	ldr	r3, [r7, #12]
    7008:	2200      	movs	r2, #0
    700a:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    700c:	68fb      	ldr	r3, [r7, #12]
    700e:	2200      	movs	r2, #0
    7010:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    7012:	68fb      	ldr	r3, [r7, #12]
    7014:	2200      	movs	r2, #0
    7016:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    7018:	68fb      	ldr	r3, [r7, #12]
    701a:	2225      	movs	r2, #37	; 0x25
    701c:	2100      	movs	r1, #0
    701e:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    7020:	68fb      	ldr	r3, [r7, #12]
    7022:	2200      	movs	r2, #0
    7024:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    7026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7028:	2214      	movs	r2, #20
    702a:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    702c:	687a      	ldr	r2, [r7, #4]
    702e:	68fb      	ldr	r3, [r7, #12]
    7030:	0011      	movs	r1, r2
    7032:	0018      	movs	r0, r3
    7034:	4b0c      	ldr	r3, [pc, #48]	; (7068 <i2c_master_init+0x130>)
    7036:	4798      	blx	r3
    7038:	0003      	movs	r3, r0
}
    703a:	0018      	movs	r0, r3
    703c:	46bd      	mov	sp, r7
    703e:	b00b      	add	sp, #44	; 0x2c
    7040:	bd90      	pop	{r4, r7, pc}
    7042:	46c0      	nop			; (mov r8, r8)
    7044:	00008079 	.word	0x00008079
    7048:	00006a59 	.word	0x00006a59
    704c:	00006a41 	.word	0x00006a41
    7050:	0000a49d 	.word	0x0000a49d
    7054:	0000a4e1 	.word	0x0000a4e1
    7058:	00007e31 	.word	0x00007e31
    705c:	0000785d 	.word	0x0000785d
    7060:	000080dd 	.word	0x000080dd
    7064:	200045b0 	.word	0x200045b0
    7068:	00006b45 	.word	0x00006b45

0000706c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    706c:	b580      	push	{r7, lr}
    706e:	b084      	sub	sp, #16
    7070:	af00      	add	r7, sp, #0
    7072:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	681b      	ldr	r3, [r3, #0]
    7078:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    707a:	68fb      	ldr	r3, [r7, #12]
    707c:	7e1b      	ldrb	r3, [r3, #24]
    707e:	b2db      	uxtb	r3, r3
    7080:	001a      	movs	r2, r3
    7082:	2302      	movs	r3, #2
    7084:	4013      	ands	r3, r2
    7086:	d00b      	beq.n	70a0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    7088:	68fb      	ldr	r3, [r7, #12]
    708a:	2202      	movs	r2, #2
    708c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    708e:	68fb      	ldr	r3, [r7, #12]
    7090:	8b5b      	ldrh	r3, [r3, #26]
    7092:	b29b      	uxth	r3, r3
    7094:	001a      	movs	r2, r3
    7096:	2302      	movs	r3, #2
    7098:	4013      	ands	r3, r2
    709a:	d011      	beq.n	70c0 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    709c:	2341      	movs	r3, #65	; 0x41
    709e:	e010      	b.n	70c2 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    70a0:	68fb      	ldr	r3, [r7, #12]
    70a2:	8b5b      	ldrh	r3, [r3, #26]
    70a4:	b29b      	uxth	r3, r3
    70a6:	001a      	movs	r2, r3
    70a8:	2304      	movs	r3, #4
    70aa:	4013      	ands	r3, r2
    70ac:	d008      	beq.n	70c0 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    70ae:	68fb      	ldr	r3, [r7, #12]
    70b0:	685b      	ldr	r3, [r3, #4]
    70b2:	22c0      	movs	r2, #192	; 0xc0
    70b4:	0292      	lsls	r2, r2, #10
    70b6:	431a      	orrs	r2, r3
    70b8:	68fb      	ldr	r3, [r7, #12]
    70ba:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    70bc:	2318      	movs	r3, #24
    70be:	e000      	b.n	70c2 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    70c0:	2300      	movs	r3, #0
}
    70c2:	0018      	movs	r0, r3
    70c4:	46bd      	mov	sp, r7
    70c6:	b004      	add	sp, #16
    70c8:	bd80      	pop	{r7, pc}
    70ca:	46c0      	nop			; (mov r8, r8)

000070cc <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    70cc:	b580      	push	{r7, lr}
    70ce:	b084      	sub	sp, #16
    70d0:	af00      	add	r7, sp, #0
    70d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    70d4:	687b      	ldr	r3, [r7, #4]
    70d6:	681b      	ldr	r3, [r3, #0]
    70d8:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    70da:	230e      	movs	r3, #14
    70dc:	18fb      	adds	r3, r7, r3
    70de:	2200      	movs	r2, #0
    70e0:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    70e2:	e00f      	b.n	7104 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    70e4:	230e      	movs	r3, #14
    70e6:	18fb      	adds	r3, r7, r3
    70e8:	220e      	movs	r2, #14
    70ea:	18ba      	adds	r2, r7, r2
    70ec:	8812      	ldrh	r2, [r2, #0]
    70ee:	3201      	adds	r2, #1
    70f0:	801a      	strh	r2, [r3, #0]
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	891b      	ldrh	r3, [r3, #8]
    70f6:	220e      	movs	r2, #14
    70f8:	18ba      	adds	r2, r7, r2
    70fa:	8812      	ldrh	r2, [r2, #0]
    70fc:	429a      	cmp	r2, r3
    70fe:	d301      	bcc.n	7104 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    7100:	2312      	movs	r3, #18
    7102:	e00e      	b.n	7122 <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    7104:	68bb      	ldr	r3, [r7, #8]
    7106:	7e1b      	ldrb	r3, [r3, #24]
    7108:	b2db      	uxtb	r3, r3
    710a:	001a      	movs	r2, r3
    710c:	2301      	movs	r3, #1
    710e:	4013      	ands	r3, r2
    7110:	d106      	bne.n	7120 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    7112:	68bb      	ldr	r3, [r7, #8]
    7114:	7e1b      	ldrb	r3, [r3, #24]
    7116:	b2db      	uxtb	r3, r3
    7118:	001a      	movs	r2, r3
    711a:	2302      	movs	r3, #2
    711c:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    711e:	d0e1      	beq.n	70e4 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    7120:	2300      	movs	r3, #0
}
    7122:	0018      	movs	r0, r3
    7124:	46bd      	mov	sp, r7
    7126:	b004      	add	sp, #16
    7128:	bd80      	pop	{r7, pc}
    712a:	46c0      	nop			; (mov r8, r8)

0000712c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    712c:	b590      	push	{r4, r7, lr}
    712e:	b085      	sub	sp, #20
    7130:	af00      	add	r7, sp, #0
    7132:	6078      	str	r0, [r7, #4]
    7134:	000a      	movs	r2, r1
    7136:	1cfb      	adds	r3, r7, #3
    7138:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    713a:	687b      	ldr	r3, [r7, #4]
    713c:	681b      	ldr	r3, [r3, #0]
    713e:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7140:	68fb      	ldr	r3, [r7, #12]
    7142:	685b      	ldr	r3, [r3, #4]
    7144:	2280      	movs	r2, #128	; 0x80
    7146:	02d2      	lsls	r2, r2, #11
    7148:	431a      	orrs	r2, r3
    714a:	68fb      	ldr	r3, [r7, #12]
    714c:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    714e:	1cfb      	adds	r3, r7, #3
    7150:	781a      	ldrb	r2, [r3, #0]
    7152:	68fb      	ldr	r3, [r7, #12]
    7154:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    7156:	230b      	movs	r3, #11
    7158:	18fc      	adds	r4, r7, r3
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	0018      	movs	r0, r3
    715e:	4b07      	ldr	r3, [pc, #28]	; (717c <_i2c_master_send_hs_master_code+0x50>)
    7160:	4798      	blx	r3
    7162:	0003      	movs	r3, r0
    7164:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    7166:	68fb      	ldr	r3, [r7, #12]
    7168:	2201      	movs	r2, #1
    716a:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    716c:	230b      	movs	r3, #11
    716e:	18fb      	adds	r3, r7, r3
    7170:	781b      	ldrb	r3, [r3, #0]
}
    7172:	0018      	movs	r0, r3
    7174:	46bd      	mov	sp, r7
    7176:	b005      	add	sp, #20
    7178:	bd90      	pop	{r4, r7, pc}
    717a:	46c0      	nop			; (mov r8, r8)
    717c:	000070cd 	.word	0x000070cd

00007180 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7180:	b590      	push	{r4, r7, lr}
    7182:	b087      	sub	sp, #28
    7184:	af00      	add	r7, sp, #0
    7186:	6078      	str	r0, [r7, #4]
    7188:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	681b      	ldr	r3, [r3, #0]
    718e:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    7190:	2314      	movs	r3, #20
    7192:	18fb      	adds	r3, r7, r3
    7194:	683a      	ldr	r2, [r7, #0]
    7196:	8852      	ldrh	r2, [r2, #2]
    7198:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    719a:	2312      	movs	r3, #18
    719c:	18fb      	adds	r3, r7, r3
    719e:	2200      	movs	r2, #0
    71a0:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    71a2:	68fb      	ldr	r3, [r7, #12]
    71a4:	681b      	ldr	r3, [r3, #0]
    71a6:	011b      	lsls	r3, r3, #4
    71a8:	0fdb      	lsrs	r3, r3, #31
    71aa:	b2db      	uxtb	r3, r3
    71ac:	001a      	movs	r2, r3
    71ae:	230b      	movs	r3, #11
    71b0:	18fb      	adds	r3, r7, r3
    71b2:	1e51      	subs	r1, r2, #1
    71b4:	418a      	sbcs	r2, r1
    71b6:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    71b8:	683b      	ldr	r3, [r7, #0]
    71ba:	7a5b      	ldrb	r3, [r3, #9]
    71bc:	2b00      	cmp	r3, #0
    71be:	d006      	beq.n	71ce <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    71c0:	683b      	ldr	r3, [r7, #0]
    71c2:	7a9a      	ldrb	r2, [r3, #10]
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	0011      	movs	r1, r2
    71c8:	0018      	movs	r0, r3
    71ca:	4b85      	ldr	r3, [pc, #532]	; (73e0 <_i2c_master_read_packet+0x260>)
    71cc:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    71ce:	68fb      	ldr	r3, [r7, #12]
    71d0:	685b      	ldr	r3, [r3, #4]
    71d2:	4a84      	ldr	r2, [pc, #528]	; (73e4 <_i2c_master_read_packet+0x264>)
    71d4:	401a      	ands	r2, r3
    71d6:	68fb      	ldr	r3, [r7, #12]
    71d8:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    71da:	683b      	ldr	r3, [r7, #0]
    71dc:	7a1b      	ldrb	r3, [r3, #8]
    71de:	2b00      	cmp	r3, #0
    71e0:	d042      	beq.n	7268 <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    71e2:	683b      	ldr	r3, [r7, #0]
    71e4:	881b      	ldrh	r3, [r3, #0]
    71e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    71e8:	683b      	ldr	r3, [r7, #0]
    71ea:	7a5b      	ldrb	r3, [r3, #9]
    71ec:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    71ee:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    71f0:	001a      	movs	r2, r3
    71f2:	2380      	movs	r3, #128	; 0x80
    71f4:	021b      	lsls	r3, r3, #8
    71f6:	431a      	orrs	r2, r3
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    71f8:	68fb      	ldr	r3, [r7, #12]
    71fa:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    71fc:	2317      	movs	r3, #23
    71fe:	18fc      	adds	r4, r7, r3
    7200:	687b      	ldr	r3, [r7, #4]
    7202:	0018      	movs	r0, r3
    7204:	4b78      	ldr	r3, [pc, #480]	; (73e8 <_i2c_master_read_packet+0x268>)
    7206:	4798      	blx	r3
    7208:	0003      	movs	r3, r0
    720a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    720c:	68fb      	ldr	r3, [r7, #12]
    720e:	685b      	ldr	r3, [r3, #4]
    7210:	4a74      	ldr	r2, [pc, #464]	; (73e4 <_i2c_master_read_packet+0x264>)
    7212:	401a      	ands	r2, r3
    7214:	68fb      	ldr	r3, [r7, #12]
    7216:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    7218:	2317      	movs	r3, #23
    721a:	18fb      	adds	r3, r7, r3
    721c:	781b      	ldrb	r3, [r3, #0]
    721e:	2b00      	cmp	r3, #0
    7220:	d107      	bne.n	7232 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    7222:	2317      	movs	r3, #23
    7224:	18fc      	adds	r4, r7, r3
    7226:	687b      	ldr	r3, [r7, #4]
    7228:	0018      	movs	r0, r3
    722a:	4b70      	ldr	r3, [pc, #448]	; (73ec <_i2c_master_read_packet+0x26c>)
    722c:	4798      	blx	r3
    722e:	0003      	movs	r3, r0
    7230:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    7232:	2317      	movs	r3, #23
    7234:	18fb      	adds	r3, r7, r3
    7236:	781b      	ldrb	r3, [r3, #0]
    7238:	2b00      	cmp	r3, #0
    723a:	d111      	bne.n	7260 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    723c:	683b      	ldr	r3, [r7, #0]
    723e:	881b      	ldrh	r3, [r3, #0]
    7240:	0a1b      	lsrs	r3, r3, #8
    7242:	b29b      	uxth	r3, r3
    7244:	2278      	movs	r2, #120	; 0x78
    7246:	4313      	orrs	r3, r2
    7248:	b29b      	uxth	r3, r3
    724a:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    724c:	683b      	ldr	r3, [r7, #0]
    724e:	7a5b      	ldrb	r3, [r3, #9]
    7250:	039b      	lsls	r3, r3, #14
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    7252:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7254:	2201      	movs	r2, #1
    7256:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    7258:	001a      	movs	r2, r3
    725a:	68fb      	ldr	r3, [r7, #12]
    725c:	625a      	str	r2, [r3, #36]	; 0x24
    725e:	e00f      	b.n	7280 <_i2c_master_read_packet+0x100>
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    7260:	2317      	movs	r3, #23
    7262:	18fb      	adds	r3, r7, r3
    7264:	781b      	ldrb	r3, [r3, #0]
    7266:	e0b6      	b.n	73d6 <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    7268:	683b      	ldr	r3, [r7, #0]
    726a:	881b      	ldrh	r3, [r3, #0]
    726c:	005b      	lsls	r3, r3, #1
    726e:	2201      	movs	r2, #1
    7270:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    7272:	683b      	ldr	r3, [r7, #0]
    7274:	7a5b      	ldrb	r3, [r3, #9]
    7276:	039b      	lsls	r3, r3, #14
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    7278:	4313      	orrs	r3, r2
    727a:	001a      	movs	r2, r3
    727c:	68fb      	ldr	r3, [r7, #12]
    727e:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    7280:	2317      	movs	r3, #23
    7282:	18fc      	adds	r4, r7, r3
    7284:	687b      	ldr	r3, [r7, #4]
    7286:	0018      	movs	r0, r3
    7288:	4b57      	ldr	r3, [pc, #348]	; (73e8 <_i2c_master_read_packet+0x268>)
    728a:	4798      	blx	r3
    728c:	0003      	movs	r3, r0
    728e:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    7290:	230b      	movs	r3, #11
    7292:	18fb      	adds	r3, r7, r3
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	2b00      	cmp	r3, #0
    7298:	d00b      	beq.n	72b2 <_i2c_master_read_packet+0x132>
    729a:	683b      	ldr	r3, [r7, #0]
    729c:	885b      	ldrh	r3, [r3, #2]
    729e:	2b01      	cmp	r3, #1
    72a0:	d107      	bne.n	72b2 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    72a2:	68fb      	ldr	r3, [r7, #12]
    72a4:	685b      	ldr	r3, [r3, #4]
    72a6:	2280      	movs	r2, #128	; 0x80
    72a8:	02d2      	lsls	r2, r2, #11
    72aa:	431a      	orrs	r2, r3
    72ac:	68fb      	ldr	r3, [r7, #12]
    72ae:	605a      	str	r2, [r3, #4]
    72b0:	e005      	b.n	72be <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    72b2:	68fb      	ldr	r3, [r7, #12]
    72b4:	685b      	ldr	r3, [r3, #4]
    72b6:	4a4b      	ldr	r2, [pc, #300]	; (73e4 <_i2c_master_read_packet+0x264>)
    72b8:	401a      	ands	r2, r3
    72ba:	68fb      	ldr	r3, [r7, #12]
    72bc:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    72be:	2317      	movs	r3, #23
    72c0:	18fb      	adds	r3, r7, r3
    72c2:	781b      	ldrb	r3, [r3, #0]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d107      	bne.n	72d8 <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    72c8:	2317      	movs	r3, #23
    72ca:	18fc      	adds	r4, r7, r3
    72cc:	687b      	ldr	r3, [r7, #4]
    72ce:	0018      	movs	r0, r3
    72d0:	4b46      	ldr	r3, [pc, #280]	; (73ec <_i2c_master_read_packet+0x26c>)
    72d2:	4798      	blx	r3
    72d4:	0003      	movs	r3, r0
    72d6:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    72d8:	2317      	movs	r3, #23
    72da:	18fb      	adds	r3, r7, r3
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	2b00      	cmp	r3, #0
    72e0:	d000      	beq.n	72e4 <_i2c_master_read_packet+0x164>
    72e2:	e075      	b.n	73d0 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    72e4:	e04b      	b.n	737e <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	8b5b      	ldrh	r3, [r3, #26]
    72ea:	b29b      	uxth	r3, r3
    72ec:	001a      	movs	r2, r3
    72ee:	2320      	movs	r3, #32
    72f0:	4013      	ands	r3, r2
    72f2:	d101      	bne.n	72f8 <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    72f4:	2341      	movs	r3, #65	; 0x41
    72f6:	e06e      	b.n	73d6 <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	7adb      	ldrb	r3, [r3, #11]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d01e      	beq.n	733e <_i2c_master_read_packet+0x1be>
    7300:	230b      	movs	r3, #11
    7302:	18fb      	adds	r3, r7, r3
    7304:	781b      	ldrb	r3, [r3, #0]
    7306:	2201      	movs	r2, #1
    7308:	4053      	eors	r3, r2
    730a:	b2db      	uxtb	r3, r3
    730c:	2b00      	cmp	r3, #0
    730e:	d004      	beq.n	731a <_i2c_master_read_packet+0x19a>
    7310:	2314      	movs	r3, #20
    7312:	18fb      	adds	r3, r7, r3
    7314:	881b      	ldrh	r3, [r3, #0]
    7316:	2b00      	cmp	r3, #0
    7318:	d009      	beq.n	732e <_i2c_master_read_packet+0x1ae>
    731a:	230b      	movs	r3, #11
    731c:	18fb      	adds	r3, r7, r3
    731e:	781b      	ldrb	r3, [r3, #0]
    7320:	2b00      	cmp	r3, #0
    7322:	d00c      	beq.n	733e <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    7324:	2314      	movs	r3, #20
    7326:	18fb      	adds	r3, r7, r3
    7328:	881b      	ldrh	r3, [r3, #0]
    732a:	2b01      	cmp	r3, #1
    732c:	d107      	bne.n	733e <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    732e:	68fb      	ldr	r3, [r7, #12]
    7330:	685b      	ldr	r3, [r3, #4]
    7332:	2280      	movs	r2, #128	; 0x80
    7334:	02d2      	lsls	r2, r2, #11
    7336:	431a      	orrs	r2, r3
    7338:	68fb      	ldr	r3, [r7, #12]
    733a:	605a      	str	r2, [r3, #4]
    733c:	e01a      	b.n	7374 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	0018      	movs	r0, r3
    7342:	4b2b      	ldr	r3, [pc, #172]	; (73f0 <_i2c_master_read_packet+0x270>)
    7344:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    7346:	683b      	ldr	r3, [r7, #0]
    7348:	685a      	ldr	r2, [r3, #4]
    734a:	2312      	movs	r3, #18
    734c:	18fb      	adds	r3, r7, r3
    734e:	881b      	ldrh	r3, [r3, #0]
    7350:	2112      	movs	r1, #18
    7352:	1879      	adds	r1, r7, r1
    7354:	1c58      	adds	r0, r3, #1
    7356:	8008      	strh	r0, [r1, #0]
    7358:	18d3      	adds	r3, r2, r3
    735a:	68fa      	ldr	r2, [r7, #12]
    735c:	2128      	movs	r1, #40	; 0x28
    735e:	5c52      	ldrb	r2, [r2, r1]
    7360:	b2d2      	uxtb	r2, r2
    7362:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    7364:	2317      	movs	r3, #23
    7366:	18fc      	adds	r4, r7, r3
    7368:	687b      	ldr	r3, [r7, #4]
    736a:	0018      	movs	r0, r3
    736c:	4b1e      	ldr	r3, [pc, #120]	; (73e8 <_i2c_master_read_packet+0x268>)
    736e:	4798      	blx	r3
    7370:	0003      	movs	r3, r0
    7372:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    7374:	2317      	movs	r3, #23
    7376:	18fb      	adds	r3, r7, r3
    7378:	781b      	ldrb	r3, [r3, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	d109      	bne.n	7392 <_i2c_master_read_packet+0x212>
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    737e:	2314      	movs	r3, #20
    7380:	18fb      	adds	r3, r7, r3
    7382:	881b      	ldrh	r3, [r3, #0]
    7384:	2214      	movs	r2, #20
    7386:	18ba      	adds	r2, r7, r2
    7388:	1e59      	subs	r1, r3, #1
    738a:	8011      	strh	r1, [r2, #0]
    738c:	2b00      	cmp	r3, #0
    738e:	d1aa      	bne.n	72e6 <_i2c_master_read_packet+0x166>
    7390:	e000      	b.n	7394 <_i2c_master_read_packet+0x214>
				tmp_status = _i2c_master_wait_for_bus(module);
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    7392:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	7a9b      	ldrb	r3, [r3, #10]
    7398:	2b00      	cmp	r3, #0
    739a:	d00a      	beq.n	73b2 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	0018      	movs	r0, r3
    73a0:	4b13      	ldr	r3, [pc, #76]	; (73f0 <_i2c_master_read_packet+0x270>)
    73a2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    73a4:	68fb      	ldr	r3, [r7, #12]
    73a6:	685b      	ldr	r3, [r3, #4]
    73a8:	22c0      	movs	r2, #192	; 0xc0
    73aa:	0292      	lsls	r2, r2, #10
    73ac:	431a      	orrs	r2, r3
    73ae:	68fb      	ldr	r3, [r7, #12]
    73b0:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    73b2:	687b      	ldr	r3, [r7, #4]
    73b4:	0018      	movs	r0, r3
    73b6:	4b0e      	ldr	r3, [pc, #56]	; (73f0 <_i2c_master_read_packet+0x270>)
    73b8:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    73ba:	683b      	ldr	r3, [r7, #0]
    73bc:	685a      	ldr	r2, [r3, #4]
    73be:	2312      	movs	r3, #18
    73c0:	18fb      	adds	r3, r7, r3
    73c2:	881b      	ldrh	r3, [r3, #0]
    73c4:	18d3      	adds	r3, r2, r3
    73c6:	68fa      	ldr	r2, [r7, #12]
    73c8:	2128      	movs	r1, #40	; 0x28
    73ca:	5c52      	ldrb	r2, [r2, r1]
    73cc:	b2d2      	uxtb	r2, r2
    73ce:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    73d0:	2317      	movs	r3, #23
    73d2:	18fb      	adds	r3, r7, r3
    73d4:	781b      	ldrb	r3, [r3, #0]
}
    73d6:	0018      	movs	r0, r3
    73d8:	46bd      	mov	sp, r7
    73da:	b007      	add	sp, #28
    73dc:	bd90      	pop	{r4, r7, pc}
    73de:	46c0      	nop			; (mov r8, r8)
    73e0:	0000712d 	.word	0x0000712d
    73e4:	fffbffff 	.word	0xfffbffff
    73e8:	000070cd 	.word	0x000070cd
    73ec:	0000706d 	.word	0x0000706d
    73f0:	00006b21 	.word	0x00006b21

000073f4 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    73f4:	b580      	push	{r7, lr}
    73f6:	b082      	sub	sp, #8
    73f8:	af00      	add	r7, sp, #0
    73fa:	6078      	str	r0, [r7, #4]
    73fc:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    73fe:	687b      	ldr	r3, [r7, #4]
    7400:	8b9b      	ldrh	r3, [r3, #28]
    7402:	b29b      	uxth	r3, r3
    7404:	2b00      	cmp	r3, #0
    7406:	d001      	beq.n	740c <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
    7408:	2305      	movs	r3, #5
    740a:	e00c      	b.n	7426 <i2c_master_read_packet_wait+0x32>
	}
#endif

	module->send_stop = true;
    740c:	687b      	ldr	r3, [r7, #4]
    740e:	2201      	movs	r2, #1
    7410:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    7412:	687b      	ldr	r3, [r7, #4]
    7414:	2201      	movs	r2, #1
    7416:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    7418:	683a      	ldr	r2, [r7, #0]
    741a:	687b      	ldr	r3, [r7, #4]
    741c:	0011      	movs	r1, r2
    741e:	0018      	movs	r0, r3
    7420:	4b03      	ldr	r3, [pc, #12]	; (7430 <i2c_master_read_packet_wait+0x3c>)
    7422:	4798      	blx	r3
    7424:	0003      	movs	r3, r0
}
    7426:	0018      	movs	r0, r3
    7428:	46bd      	mov	sp, r7
    742a:	b002      	add	sp, #8
    742c:	bd80      	pop	{r7, pc}
    742e:	46c0      	nop			; (mov r8, r8)
    7430:	00007181 	.word	0x00007181

00007434 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7434:	b590      	push	{r4, r7, lr}
    7436:	b087      	sub	sp, #28
    7438:	af00      	add	r7, sp, #0
    743a:	6078      	str	r0, [r7, #4]
    743c:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    7444:	2314      	movs	r3, #20
    7446:	18fb      	adds	r3, r7, r3
    7448:	683a      	ldr	r2, [r7, #0]
    744a:	8852      	ldrh	r2, [r2, #2]
    744c:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	0018      	movs	r0, r3
    7452:	4b51      	ldr	r3, [pc, #324]	; (7598 <_i2c_master_write_packet+0x164>)
    7454:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	7a5b      	ldrb	r3, [r3, #9]
    745a:	2b00      	cmp	r3, #0
    745c:	d006      	beq.n	746c <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    745e:	683b      	ldr	r3, [r7, #0]
    7460:	7a9a      	ldrb	r2, [r3, #10]
    7462:	687b      	ldr	r3, [r7, #4]
    7464:	0011      	movs	r1, r2
    7466:	0018      	movs	r0, r3
    7468:	4b4c      	ldr	r3, [pc, #304]	; (759c <_i2c_master_write_packet+0x168>)
    746a:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    746c:	68fb      	ldr	r3, [r7, #12]
    746e:	685b      	ldr	r3, [r3, #4]
    7470:	4a4b      	ldr	r2, [pc, #300]	; (75a0 <_i2c_master_write_packet+0x16c>)
    7472:	401a      	ands	r2, r3
    7474:	68fb      	ldr	r3, [r7, #12]
    7476:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    7478:	683b      	ldr	r3, [r7, #0]
    747a:	7a1b      	ldrb	r3, [r3, #8]
    747c:	2b00      	cmp	r3, #0
    747e:	d00d      	beq.n	749c <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7480:	683b      	ldr	r3, [r7, #0]
    7482:	881b      	ldrh	r3, [r3, #0]
    7484:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    7486:	683b      	ldr	r3, [r7, #0]
    7488:	7a5b      	ldrb	r3, [r3, #9]
    748a:	039b      	lsls	r3, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    748c:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    748e:	001a      	movs	r2, r3
    7490:	2380      	movs	r3, #128	; 0x80
    7492:	021b      	lsls	r3, r3, #8
    7494:	431a      	orrs	r2, r3
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    7496:	68fb      	ldr	r3, [r7, #12]
    7498:	625a      	str	r2, [r3, #36]	; 0x24
    749a:	e009      	b.n	74b0 <_i2c_master_write_packet+0x7c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    749c:	683b      	ldr	r3, [r7, #0]
    749e:	881b      	ldrh	r3, [r3, #0]
    74a0:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    74a2:	683b      	ldr	r3, [r7, #0]
    74a4:	7a5b      	ldrb	r3, [r3, #9]
    74a6:	039b      	lsls	r3, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    74a8:	4313      	orrs	r3, r2
    74aa:	001a      	movs	r2, r3
    74ac:	68fb      	ldr	r3, [r7, #12]
    74ae:	625a      	str	r2, [r3, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    74b0:	2317      	movs	r3, #23
    74b2:	18fc      	adds	r4, r7, r3
    74b4:	687b      	ldr	r3, [r7, #4]
    74b6:	0018      	movs	r0, r3
    74b8:	4b3a      	ldr	r3, [pc, #232]	; (75a4 <_i2c_master_write_packet+0x170>)
    74ba:	4798      	blx	r3
    74bc:	0003      	movs	r3, r0
    74be:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    74c0:	2317      	movs	r3, #23
    74c2:	18fb      	adds	r3, r7, r3
    74c4:	781b      	ldrb	r3, [r3, #0]
    74c6:	2b00      	cmp	r3, #0
    74c8:	d107      	bne.n	74da <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    74ca:	2317      	movs	r3, #23
    74cc:	18fc      	adds	r4, r7, r3
    74ce:	687b      	ldr	r3, [r7, #4]
    74d0:	0018      	movs	r0, r3
    74d2:	4b35      	ldr	r3, [pc, #212]	; (75a8 <_i2c_master_write_packet+0x174>)
    74d4:	4798      	blx	r3
    74d6:	0003      	movs	r3, r0
    74d8:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    74da:	2317      	movs	r3, #23
    74dc:	18fb      	adds	r3, r7, r3
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	2b00      	cmp	r3, #0
    74e2:	d152      	bne.n	758a <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    74e4:	2312      	movs	r3, #18
    74e6:	18fb      	adds	r3, r7, r3
    74e8:	2200      	movs	r2, #0
    74ea:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    74ec:	e033      	b.n	7556 <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    74ee:	68fb      	ldr	r3, [r7, #12]
    74f0:	8b5b      	ldrh	r3, [r3, #26]
    74f2:	b29b      	uxth	r3, r3
    74f4:	001a      	movs	r2, r3
    74f6:	2320      	movs	r3, #32
    74f8:	4013      	ands	r3, r2
    74fa:	d101      	bne.n	7500 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    74fc:	2341      	movs	r3, #65	; 0x41
    74fe:	e047      	b.n	7590 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	0018      	movs	r0, r3
    7504:	4b24      	ldr	r3, [pc, #144]	; (7598 <_i2c_master_write_packet+0x164>)
    7506:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    7508:	683b      	ldr	r3, [r7, #0]
    750a:	685a      	ldr	r2, [r3, #4]
    750c:	2312      	movs	r3, #18
    750e:	18fb      	adds	r3, r7, r3
    7510:	881b      	ldrh	r3, [r3, #0]
    7512:	2112      	movs	r1, #18
    7514:	1879      	adds	r1, r7, r1
    7516:	1c58      	adds	r0, r3, #1
    7518:	8008      	strh	r0, [r1, #0]
    751a:	18d3      	adds	r3, r2, r3
    751c:	7819      	ldrb	r1, [r3, #0]
    751e:	68fb      	ldr	r3, [r7, #12]
    7520:	2228      	movs	r2, #40	; 0x28
    7522:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    7524:	2317      	movs	r3, #23
    7526:	18fc      	adds	r4, r7, r3
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	0018      	movs	r0, r3
    752c:	4b1d      	ldr	r3, [pc, #116]	; (75a4 <_i2c_master_write_packet+0x170>)
    752e:	4798      	blx	r3
    7530:	0003      	movs	r3, r0
    7532:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    7534:	2317      	movs	r3, #23
    7536:	18fb      	adds	r3, r7, r3
    7538:	781b      	ldrb	r3, [r3, #0]
    753a:	2b00      	cmp	r3, #0
    753c:	d115      	bne.n	756a <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    753e:	68fb      	ldr	r3, [r7, #12]
    7540:	8b5b      	ldrh	r3, [r3, #26]
    7542:	b29b      	uxth	r3, r3
    7544:	001a      	movs	r2, r3
    7546:	2304      	movs	r3, #4
    7548:	4013      	ands	r3, r2
    754a:	d004      	beq.n	7556 <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    754c:	2317      	movs	r3, #23
    754e:	18fb      	adds	r3, r7, r3
    7550:	221e      	movs	r2, #30
    7552:	701a      	strb	r2, [r3, #0]
				break;
    7554:	e00a      	b.n	756c <_i2c_master_write_packet+0x138>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    7556:	2314      	movs	r3, #20
    7558:	18fb      	adds	r3, r7, r3
    755a:	881b      	ldrh	r3, [r3, #0]
    755c:	2214      	movs	r2, #20
    755e:	18ba      	adds	r2, r7, r2
    7560:	1e59      	subs	r1, r3, #1
    7562:	8011      	strh	r1, [r2, #0]
    7564:	2b00      	cmp	r3, #0
    7566:	d1c2      	bne.n	74ee <_i2c_master_write_packet+0xba>
    7568:	e000      	b.n	756c <_i2c_master_write_packet+0x138>
			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
				break;
    756a:	46c0      	nop			; (mov r8, r8)
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    756c:	687b      	ldr	r3, [r7, #4]
    756e:	7a9b      	ldrb	r3, [r3, #10]
    7570:	2b00      	cmp	r3, #0
    7572:	d00a      	beq.n	758a <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    7574:	687b      	ldr	r3, [r7, #4]
    7576:	0018      	movs	r0, r3
    7578:	4b07      	ldr	r3, [pc, #28]	; (7598 <_i2c_master_write_packet+0x164>)
    757a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    757c:	68fb      	ldr	r3, [r7, #12]
    757e:	685b      	ldr	r3, [r3, #4]
    7580:	22c0      	movs	r2, #192	; 0xc0
    7582:	0292      	lsls	r2, r2, #10
    7584:	431a      	orrs	r2, r3
    7586:	68fb      	ldr	r3, [r7, #12]
    7588:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    758a:	2317      	movs	r3, #23
    758c:	18fb      	adds	r3, r7, r3
    758e:	781b      	ldrb	r3, [r3, #0]
}
    7590:	0018      	movs	r0, r3
    7592:	46bd      	mov	sp, r7
    7594:	b007      	add	sp, #28
    7596:	bd90      	pop	{r4, r7, pc}
    7598:	00006b21 	.word	0x00006b21
    759c:	0000712d 	.word	0x0000712d
    75a0:	fffbffff 	.word	0xfffbffff
    75a4:	000070cd 	.word	0x000070cd
    75a8:	0000706d 	.word	0x0000706d

000075ac <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    75ac:	b580      	push	{r7, lr}
    75ae:	b082      	sub	sp, #8
    75b0:	af00      	add	r7, sp, #0
    75b2:	6078      	str	r0, [r7, #4]
    75b4:	6039      	str	r1, [r7, #0]
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    75b6:	687b      	ldr	r3, [r7, #4]
    75b8:	8b9b      	ldrh	r3, [r3, #28]
    75ba:	b29b      	uxth	r3, r3
    75bc:	2b00      	cmp	r3, #0
    75be:	d001      	beq.n	75c4 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
    75c0:	2305      	movs	r3, #5
    75c2:	e00c      	b.n	75de <i2c_master_write_packet_wait_no_stop+0x32>
	}
#endif

	module->send_stop = false;
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	2200      	movs	r2, #0
    75c8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    75ca:	687b      	ldr	r3, [r7, #4]
    75cc:	2201      	movs	r2, #1
    75ce:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    75d0:	683a      	ldr	r2, [r7, #0]
    75d2:	687b      	ldr	r3, [r7, #4]
    75d4:	0011      	movs	r1, r2
    75d6:	0018      	movs	r0, r3
    75d8:	4b03      	ldr	r3, [pc, #12]	; (75e8 <i2c_master_write_packet_wait_no_stop+0x3c>)
    75da:	4798      	blx	r3
    75dc:	0003      	movs	r3, r0
}
    75de:	0018      	movs	r0, r3
    75e0:	46bd      	mov	sp, r7
    75e2:	b002      	add	sp, #8
    75e4:	bd80      	pop	{r7, pc}
    75e6:	46c0      	nop			; (mov r8, r8)
    75e8:	00007435 	.word	0x00007435

000075ec <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    75ec:	b580      	push	{r7, lr}
    75ee:	b084      	sub	sp, #16
    75f0:	af00      	add	r7, sp, #0
    75f2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    75f4:	687b      	ldr	r3, [r7, #4]
    75f6:	681b      	ldr	r3, [r3, #0]
    75f8:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    75fa:	68fb      	ldr	r3, [r7, #12]
    75fc:	69db      	ldr	r3, [r3, #28]
    75fe:	2207      	movs	r2, #7
    7600:	4013      	ands	r3, r2
    7602:	1e5a      	subs	r2, r3, #1
    7604:	4193      	sbcs	r3, r2
    7606:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    7608:	0018      	movs	r0, r3
    760a:	46bd      	mov	sp, r7
    760c:	b004      	add	sp, #16
    760e:	bd80      	pop	{r7, pc}

00007610 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    7610:	b580      	push	{r7, lr}
    7612:	b082      	sub	sp, #8
    7614:	af00      	add	r7, sp, #0
    7616:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    7618:	46c0      	nop			; (mov r8, r8)
    761a:	687b      	ldr	r3, [r7, #4]
    761c:	0018      	movs	r0, r3
    761e:	4b04      	ldr	r3, [pc, #16]	; (7630 <_i2c_master_wait_for_sync+0x20>)
    7620:	4798      	blx	r3
    7622:	1e03      	subs	r3, r0, #0
    7624:	d1f9      	bne.n	761a <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    7626:	46c0      	nop			; (mov r8, r8)
    7628:	46bd      	mov	sp, r7
    762a:	b002      	add	sp, #8
    762c:	bd80      	pop	{r7, pc}
    762e:	46c0      	nop			; (mov r8, r8)
    7630:	000075ed 	.word	0x000075ed

00007634 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    7634:	b580      	push	{r7, lr}
    7636:	b084      	sub	sp, #16
    7638:	af00      	add	r7, sp, #0
    763a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    763c:	687b      	ldr	r3, [r7, #4]
    763e:	681b      	ldr	r3, [r3, #0]
    7640:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    7642:	68fb      	ldr	r3, [r7, #12]
    7644:	681b      	ldr	r3, [r3, #0]
    7646:	011b      	lsls	r3, r3, #4
    7648:	0fdb      	lsrs	r3, r3, #31
    764a:	b2db      	uxtb	r3, r3
    764c:	001a      	movs	r2, r3
    764e:	230b      	movs	r3, #11
    7650:	18fb      	adds	r3, r7, r3
    7652:	1e51      	subs	r1, r2, #1
    7654:	418a      	sbcs	r2, r1
    7656:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    7658:	2308      	movs	r3, #8
    765a:	18fb      	adds	r3, r7, r3
    765c:	687a      	ldr	r2, [r7, #4]
    765e:	8b52      	ldrh	r2, [r2, #26]
    7660:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    7662:	687b      	ldr	r3, [r7, #4]
    7664:	8b9b      	ldrh	r3, [r3, #28]
    7666:	b29a      	uxth	r2, r3
    7668:	2308      	movs	r3, #8
    766a:	18fb      	adds	r3, r7, r3
    766c:	2108      	movs	r1, #8
    766e:	1879      	adds	r1, r7, r1
    7670:	8809      	ldrh	r1, [r1, #0]
    7672:	1a8a      	subs	r2, r1, r2
    7674:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    7676:	687b      	ldr	r3, [r7, #4]
    7678:	8b9b      	ldrh	r3, [r3, #28]
    767a:	b29b      	uxth	r3, r3
    767c:	3b01      	subs	r3, #1
    767e:	b29a      	uxth	r2, r3
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    7684:	230b      	movs	r3, #11
    7686:	18fb      	adds	r3, r7, r3
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	2b00      	cmp	r3, #0
    768c:	d010      	beq.n	76b0 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    768e:	687b      	ldr	r3, [r7, #4]
    7690:	7adb      	ldrb	r3, [r3, #11]
    7692:	2b00      	cmp	r3, #0
    7694:	d01c      	beq.n	76d0 <_i2c_master_read+0x9c>
    7696:	687b      	ldr	r3, [r7, #4]
    7698:	8b9b      	ldrh	r3, [r3, #28]
    769a:	b29b      	uxth	r3, r3
    769c:	2b01      	cmp	r3, #1
    769e:	d117      	bne.n	76d0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    76a0:	68fb      	ldr	r3, [r7, #12]
    76a2:	685b      	ldr	r3, [r3, #4]
    76a4:	2280      	movs	r2, #128	; 0x80
    76a6:	02d2      	lsls	r2, r2, #11
    76a8:	431a      	orrs	r2, r3
    76aa:	68fb      	ldr	r3, [r7, #12]
    76ac:	605a      	str	r2, [r3, #4]
    76ae:	e00f      	b.n	76d0 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    76b0:	687b      	ldr	r3, [r7, #4]
    76b2:	7adb      	ldrb	r3, [r3, #11]
    76b4:	2b00      	cmp	r3, #0
    76b6:	d00b      	beq.n	76d0 <_i2c_master_read+0x9c>
    76b8:	687b      	ldr	r3, [r7, #4]
    76ba:	8b9b      	ldrh	r3, [r3, #28]
    76bc:	b29b      	uxth	r3, r3
    76be:	2b00      	cmp	r3, #0
    76c0:	d106      	bne.n	76d0 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    76c2:	68fb      	ldr	r3, [r7, #12]
    76c4:	685b      	ldr	r3, [r3, #4]
    76c6:	2280      	movs	r2, #128	; 0x80
    76c8:	02d2      	lsls	r2, r2, #11
    76ca:	431a      	orrs	r2, r3
    76cc:	68fb      	ldr	r3, [r7, #12]
    76ce:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    76d0:	687b      	ldr	r3, [r7, #4]
    76d2:	8b9b      	ldrh	r3, [r3, #28]
    76d4:	b29b      	uxth	r3, r3
    76d6:	2b00      	cmp	r3, #0
    76d8:	d10e      	bne.n	76f8 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    76da:	687b      	ldr	r3, [r7, #4]
    76dc:	7a9b      	ldrb	r3, [r3, #10]
    76de:	2b00      	cmp	r3, #0
    76e0:	d00a      	beq.n	76f8 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    76e2:	687b      	ldr	r3, [r7, #4]
    76e4:	0018      	movs	r0, r3
    76e6:	4b0e      	ldr	r3, [pc, #56]	; (7720 <_i2c_master_read+0xec>)
    76e8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    76ea:	68fb      	ldr	r3, [r7, #12]
    76ec:	685b      	ldr	r3, [r3, #4]
    76ee:	22c0      	movs	r2, #192	; 0xc0
    76f0:	0292      	lsls	r2, r2, #10
    76f2:	431a      	orrs	r2, r3
    76f4:	68fb      	ldr	r3, [r7, #12]
    76f6:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	0018      	movs	r0, r3
    76fc:	4b08      	ldr	r3, [pc, #32]	; (7720 <_i2c_master_read+0xec>)
    76fe:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	6a1a      	ldr	r2, [r3, #32]
    7704:	2308      	movs	r3, #8
    7706:	18fb      	adds	r3, r7, r3
    7708:	881b      	ldrh	r3, [r3, #0]
    770a:	18d3      	adds	r3, r2, r3
    770c:	68fa      	ldr	r2, [r7, #12]
    770e:	2128      	movs	r1, #40	; 0x28
    7710:	5c52      	ldrb	r2, [r2, r1]
    7712:	b2d2      	uxtb	r2, r2
    7714:	701a      	strb	r2, [r3, #0]
}
    7716:	46c0      	nop			; (mov r8, r8)
    7718:	46bd      	mov	sp, r7
    771a:	b004      	add	sp, #16
    771c:	bd80      	pop	{r7, pc}
    771e:	46c0      	nop			; (mov r8, r8)
    7720:	00007611 	.word	0x00007611

00007724 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    7724:	b580      	push	{r7, lr}
    7726:	b084      	sub	sp, #16
    7728:	af00      	add	r7, sp, #0
    772a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    772c:	687b      	ldr	r3, [r7, #4]
    772e:	681b      	ldr	r3, [r3, #0]
    7730:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    7732:	68fb      	ldr	r3, [r7, #12]
    7734:	8b5b      	ldrh	r3, [r3, #26]
    7736:	b29b      	uxth	r3, r3
    7738:	001a      	movs	r2, r3
    773a:	2304      	movs	r3, #4
    773c:	4013      	ands	r3, r2
    773e:	d004      	beq.n	774a <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	2225      	movs	r2, #37	; 0x25
    7744:	211e      	movs	r1, #30
    7746:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    7748:	e024      	b.n	7794 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    774a:	230a      	movs	r3, #10
    774c:	18fb      	adds	r3, r7, r3
    774e:	687a      	ldr	r2, [r7, #4]
    7750:	8b52      	ldrh	r2, [r2, #26]
    7752:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	8b9b      	ldrh	r3, [r3, #28]
    7758:	b29a      	uxth	r2, r3
    775a:	230a      	movs	r3, #10
    775c:	18fb      	adds	r3, r7, r3
    775e:	210a      	movs	r1, #10
    7760:	1879      	adds	r1, r7, r1
    7762:	8809      	ldrh	r1, [r1, #0]
    7764:	1a8a      	subs	r2, r1, r2
    7766:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	8b9b      	ldrh	r3, [r3, #28]
    776c:	b29b      	uxth	r3, r3
    776e:	3b01      	subs	r3, #1
    7770:	b29a      	uxth	r2, r3
    7772:	687b      	ldr	r3, [r7, #4]
    7774:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    7776:	687b      	ldr	r3, [r7, #4]
    7778:	0018      	movs	r0, r3
    777a:	4b08      	ldr	r3, [pc, #32]	; (779c <_i2c_master_write+0x78>)
    777c:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	6a1a      	ldr	r2, [r3, #32]
    7782:	230a      	movs	r3, #10
    7784:	18fb      	adds	r3, r7, r3
    7786:	881b      	ldrh	r3, [r3, #0]
    7788:	18d3      	adds	r3, r2, r3
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	b2d9      	uxtb	r1, r3
    778e:	68fb      	ldr	r3, [r7, #12]
    7790:	2228      	movs	r2, #40	; 0x28
    7792:	5499      	strb	r1, [r3, r2]
}
    7794:	46bd      	mov	sp, r7
    7796:	b004      	add	sp, #16
    7798:	bd80      	pop	{r7, pc}
    779a:	46c0      	nop			; (mov r8, r8)
    779c:	00007611 	.word	0x00007611

000077a0 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    77a0:	b580      	push	{r7, lr}
    77a2:	b084      	sub	sp, #16
    77a4:	af00      	add	r7, sp, #0
    77a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    77a8:	687b      	ldr	r3, [r7, #4]
    77aa:	681b      	ldr	r3, [r3, #0]
    77ac:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    77ae:	68fb      	ldr	r3, [r7, #12]
    77b0:	7e1b      	ldrb	r3, [r3, #24]
    77b2:	b2db      	uxtb	r3, r3
    77b4:	001a      	movs	r2, r3
    77b6:	2301      	movs	r3, #1
    77b8:	4013      	ands	r3, r2
    77ba:	d02b      	beq.n	7814 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    77bc:	68fb      	ldr	r3, [r7, #12]
    77be:	2201      	movs	r2, #1
    77c0:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    77c2:	68fb      	ldr	r3, [r7, #12]
    77c4:	8b5b      	ldrh	r3, [r3, #26]
    77c6:	b29b      	uxth	r3, r3
    77c8:	001a      	movs	r2, r3
    77ca:	2302      	movs	r3, #2
    77cc:	4013      	ands	r3, r2
    77ce:	d004      	beq.n	77da <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	2225      	movs	r2, #37	; 0x25
    77d4:	2141      	movs	r1, #65	; 0x41
    77d6:	5499      	strb	r1, [r3, r2]
    77d8:	e01c      	b.n	7814 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    77da:	68fb      	ldr	r3, [r7, #12]
    77dc:	8b5b      	ldrh	r3, [r3, #26]
    77de:	b29b      	uxth	r3, r3
    77e0:	001a      	movs	r2, r3
    77e2:	2304      	movs	r3, #4
    77e4:	4013      	ands	r3, r2
    77e6:	d015      	beq.n	7814 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    77e8:	687b      	ldr	r3, [r7, #4]
    77ea:	2225      	movs	r2, #37	; 0x25
    77ec:	2118      	movs	r1, #24
    77ee:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    77f0:	687b      	ldr	r3, [r7, #4]
    77f2:	2200      	movs	r2, #0
    77f4:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	7a9b      	ldrb	r3, [r3, #10]
    77fa:	2b00      	cmp	r3, #0
    77fc:	d00a      	beq.n	7814 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	0018      	movs	r0, r3
    7802:	4b13      	ldr	r3, [pc, #76]	; (7850 <_i2c_master_async_address_response+0xb0>)
    7804:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7806:	68fb      	ldr	r3, [r7, #12]
    7808:	685b      	ldr	r3, [r3, #4]
    780a:	22c0      	movs	r2, #192	; 0xc0
    780c:	0292      	lsls	r2, r2, #10
    780e:	431a      	orrs	r2, r3
    7810:	68fb      	ldr	r3, [r7, #12]
    7812:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	8b9b      	ldrh	r3, [r3, #28]
    7818:	b29a      	uxth	r2, r3
    781a:	687b      	ldr	r3, [r7, #4]
    781c:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	2225      	movs	r2, #37	; 0x25
    7822:	5c9b      	ldrb	r3, [r3, r2]
    7824:	b2db      	uxtb	r3, r3
    7826:	2b05      	cmp	r3, #5
    7828:	d10e      	bne.n	7848 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    782a:	687b      	ldr	r3, [r7, #4]
    782c:	2224      	movs	r2, #36	; 0x24
    782e:	5c9b      	ldrb	r3, [r3, r2]
    7830:	b2db      	uxtb	r3, r3
    7832:	2b00      	cmp	r3, #0
    7834:	d104      	bne.n	7840 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	0018      	movs	r0, r3
    783a:	4b06      	ldr	r3, [pc, #24]	; (7854 <_i2c_master_async_address_response+0xb4>)
    783c:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    783e:	e003      	b.n	7848 <_i2c_master_async_address_response+0xa8>
	if (module->status == STATUS_BUSY) {
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	0018      	movs	r0, r3
    7844:	4b04      	ldr	r3, [pc, #16]	; (7858 <_i2c_master_async_address_response+0xb8>)
    7846:	4798      	blx	r3
		}
	}
}
    7848:	46c0      	nop			; (mov r8, r8)
    784a:	46bd      	mov	sp, r7
    784c:	b004      	add	sp, #16
    784e:	bd80      	pop	{r7, pc}
    7850:	00007611 	.word	0x00007611
    7854:	00007725 	.word	0x00007725
    7858:	00007635 	.word	0x00007635

0000785c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    785c:	b580      	push	{r7, lr}
    785e:	b086      	sub	sp, #24
    7860:	af00      	add	r7, sp, #0
    7862:	0002      	movs	r2, r0
    7864:	1dfb      	adds	r3, r7, #7
    7866:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    7868:	1dfb      	adds	r3, r7, #7
    786a:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    786c:	4b93      	ldr	r3, [pc, #588]	; (7abc <_i2c_master_interrupt_handler+0x260>)
    786e:	0092      	lsls	r2, r2, #2
    7870:	58d3      	ldr	r3, [r2, r3]
    7872:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7874:	697b      	ldr	r3, [r7, #20]
    7876:	681b      	ldr	r3, [r3, #0]
    7878:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    787a:	693b      	ldr	r3, [r7, #16]
    787c:	681b      	ldr	r3, [r3, #0]
    787e:	011b      	lsls	r3, r3, #4
    7880:	0fdb      	lsrs	r3, r3, #31
    7882:	b2db      	uxtb	r3, r3
    7884:	001a      	movs	r2, r3
    7886:	230f      	movs	r3, #15
    7888:	18fb      	adds	r3, r7, r3
    788a:	1e51      	subs	r1, r2, #1
    788c:	418a      	sbcs	r2, r1
    788e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    7890:	230e      	movs	r3, #14
    7892:	18fb      	adds	r3, r7, r3
    7894:	697a      	ldr	r2, [r7, #20]
    7896:	7e52      	ldrb	r2, [r2, #25]
    7898:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    789a:	697b      	ldr	r3, [r7, #20]
    789c:	7e1b      	ldrb	r3, [r3, #24]
    789e:	b2da      	uxtb	r2, r3
    78a0:	230e      	movs	r3, #14
    78a2:	18fb      	adds	r3, r7, r3
    78a4:	210e      	movs	r1, #14
    78a6:	1879      	adds	r1, r7, r1
    78a8:	7809      	ldrb	r1, [r1, #0]
    78aa:	400a      	ands	r2, r1
    78ac:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    78ae:	697b      	ldr	r3, [r7, #20]
    78b0:	8b5b      	ldrh	r3, [r3, #26]
    78b2:	b29b      	uxth	r3, r3
    78b4:	2b00      	cmp	r3, #0
    78b6:	d109      	bne.n	78cc <_i2c_master_interrupt_handler+0x70>
    78b8:	697b      	ldr	r3, [r7, #20]
    78ba:	8b9b      	ldrh	r3, [r3, #28]
    78bc:	b29b      	uxth	r3, r3
    78be:	2b00      	cmp	r3, #0
    78c0:	d004      	beq.n	78cc <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    78c2:	697b      	ldr	r3, [r7, #20]
    78c4:	0018      	movs	r0, r3
    78c6:	4b7e      	ldr	r3, [pc, #504]	; (7ac0 <_i2c_master_interrupt_handler+0x264>)
    78c8:	4798      	blx	r3
    78ca:	e070      	b.n	79ae <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    78cc:	697b      	ldr	r3, [r7, #20]
    78ce:	8b5b      	ldrh	r3, [r3, #26]
    78d0:	b29b      	uxth	r3, r3
    78d2:	2b00      	cmp	r3, #0
    78d4:	d039      	beq.n	794a <_i2c_master_interrupt_handler+0xee>
    78d6:	697b      	ldr	r3, [r7, #20]
    78d8:	8b9b      	ldrh	r3, [r3, #28]
    78da:	b29b      	uxth	r3, r3
    78dc:	2b00      	cmp	r3, #0
    78de:	d134      	bne.n	794a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    78e0:	697b      	ldr	r3, [r7, #20]
    78e2:	2225      	movs	r2, #37	; 0x25
    78e4:	5c9b      	ldrb	r3, [r3, r2]
    78e6:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    78e8:	2b05      	cmp	r3, #5
    78ea:	d12e      	bne.n	794a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    78ec:	697b      	ldr	r3, [r7, #20]
    78ee:	2224      	movs	r2, #36	; 0x24
    78f0:	5c9b      	ldrb	r3, [r3, r2]
    78f2:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    78f4:	2b00      	cmp	r3, #0
    78f6:	d128      	bne.n	794a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    78f8:	693b      	ldr	r3, [r7, #16]
    78fa:	2203      	movs	r2, #3
    78fc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    78fe:	697b      	ldr	r3, [r7, #20]
    7900:	2200      	movs	r2, #0
    7902:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    7904:	697b      	ldr	r3, [r7, #20]
    7906:	2225      	movs	r2, #37	; 0x25
    7908:	2100      	movs	r1, #0
    790a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    790c:	697b      	ldr	r3, [r7, #20]
    790e:	7a9b      	ldrb	r3, [r3, #10]
    7910:	2b00      	cmp	r3, #0
    7912:	d00b      	beq.n	792c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    7914:	697b      	ldr	r3, [r7, #20]
    7916:	0018      	movs	r0, r3
    7918:	4b6a      	ldr	r3, [pc, #424]	; (7ac4 <_i2c_master_interrupt_handler+0x268>)
    791a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    791c:	693b      	ldr	r3, [r7, #16]
    791e:	685b      	ldr	r3, [r3, #4]
    7920:	22c0      	movs	r2, #192	; 0xc0
    7922:	0292      	lsls	r2, r2, #10
    7924:	431a      	orrs	r2, r3
    7926:	693b      	ldr	r3, [r7, #16]
    7928:	605a      	str	r2, [r3, #4]
    792a:	e002      	b.n	7932 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    792c:	693b      	ldr	r3, [r7, #16]
    792e:	2201      	movs	r2, #1
    7930:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    7932:	230e      	movs	r3, #14
    7934:	18fb      	adds	r3, r7, r3
    7936:	781b      	ldrb	r3, [r3, #0]
    7938:	2201      	movs	r2, #1
    793a:	4013      	ands	r3, r2
    793c:	d037      	beq.n	79ae <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    793e:	697b      	ldr	r3, [r7, #20]
    7940:	68db      	ldr	r3, [r3, #12]
    7942:	697a      	ldr	r2, [r7, #20]
    7944:	0010      	movs	r0, r2
    7946:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    7948:	e031      	b.n	79ae <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    794a:	697b      	ldr	r3, [r7, #20]
    794c:	8b5b      	ldrh	r3, [r3, #26]
    794e:	b29b      	uxth	r3, r3
    7950:	2b00      	cmp	r3, #0
    7952:	d02c      	beq.n	79ae <_i2c_master_interrupt_handler+0x152>
    7954:	697b      	ldr	r3, [r7, #20]
    7956:	8b9b      	ldrh	r3, [r3, #28]
    7958:	b29b      	uxth	r3, r3
    795a:	2b00      	cmp	r3, #0
    795c:	d027      	beq.n	79ae <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    795e:	693b      	ldr	r3, [r7, #16]
    7960:	8b5b      	ldrh	r3, [r3, #26]
    7962:	b29b      	uxth	r3, r3
    7964:	001a      	movs	r2, r3
    7966:	2320      	movs	r3, #32
    7968:	4013      	ands	r3, r2
    796a:	d111      	bne.n	7990 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    796c:	230f      	movs	r3, #15
    796e:	18fb      	adds	r3, r7, r3
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	2201      	movs	r2, #1
    7974:	4053      	eors	r3, r2
    7976:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    7978:	2b00      	cmp	r3, #0
    797a:	d104      	bne.n	7986 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    797c:	697b      	ldr	r3, [r7, #20]
    797e:	8b9b      	ldrh	r3, [r3, #28]
    7980:	b29b      	uxth	r3, r3
    7982:	2b01      	cmp	r3, #1
    7984:	d004      	beq.n	7990 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    7986:	697b      	ldr	r3, [r7, #20]
    7988:	2225      	movs	r2, #37	; 0x25
    798a:	2141      	movs	r1, #65	; 0x41
    798c:	5499      	strb	r1, [r3, r2]
    798e:	e00e      	b.n	79ae <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    7990:	697b      	ldr	r3, [r7, #20]
    7992:	2224      	movs	r2, #36	; 0x24
    7994:	5c9b      	ldrb	r3, [r3, r2]
    7996:	b2db      	uxtb	r3, r3
    7998:	2b00      	cmp	r3, #0
    799a:	d104      	bne.n	79a6 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    799c:	697b      	ldr	r3, [r7, #20]
    799e:	0018      	movs	r0, r3
    79a0:	4b49      	ldr	r3, [pc, #292]	; (7ac8 <_i2c_master_interrupt_handler+0x26c>)
    79a2:	4798      	blx	r3
    79a4:	e003      	b.n	79ae <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    79a6:	697b      	ldr	r3, [r7, #20]
    79a8:	0018      	movs	r0, r3
    79aa:	4b48      	ldr	r3, [pc, #288]	; (7acc <_i2c_master_interrupt_handler+0x270>)
    79ac:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    79ae:	697b      	ldr	r3, [r7, #20]
    79b0:	8b5b      	ldrh	r3, [r3, #26]
    79b2:	b29b      	uxth	r3, r3
    79b4:	2b00      	cmp	r3, #0
    79b6:	d047      	beq.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
    79b8:	697b      	ldr	r3, [r7, #20]
    79ba:	8b9b      	ldrh	r3, [r3, #28]
    79bc:	b29b      	uxth	r3, r3
    79be:	2b00      	cmp	r3, #0
    79c0:	d142      	bne.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    79c2:	697b      	ldr	r3, [r7, #20]
    79c4:	2225      	movs	r2, #37	; 0x25
    79c6:	5c9b      	ldrb	r3, [r3, r2]
    79c8:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    79ca:	2b05      	cmp	r3, #5
    79cc:	d13c      	bne.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    79ce:	697b      	ldr	r3, [r7, #20]
    79d0:	2224      	movs	r2, #36	; 0x24
    79d2:	5c9b      	ldrb	r3, [r3, r2]
    79d4:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    79d6:	2b01      	cmp	r3, #1
    79d8:	d136      	bne.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    79da:	693b      	ldr	r3, [r7, #16]
    79dc:	7e1b      	ldrb	r3, [r3, #24]
    79de:	b2db      	uxtb	r3, r3
    79e0:	001a      	movs	r2, r3
    79e2:	2302      	movs	r3, #2
    79e4:	4013      	ands	r3, r2
    79e6:	d002      	beq.n	79ee <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    79e8:	693b      	ldr	r3, [r7, #16]
    79ea:	2202      	movs	r2, #2
    79ec:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    79ee:	693b      	ldr	r3, [r7, #16]
    79f0:	2203      	movs	r2, #3
    79f2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    79f4:	697b      	ldr	r3, [r7, #20]
    79f6:	2200      	movs	r2, #0
    79f8:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    79fa:	697b      	ldr	r3, [r7, #20]
    79fc:	2225      	movs	r2, #37	; 0x25
    79fe:	2100      	movs	r1, #0
    7a00:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    7a02:	230e      	movs	r3, #14
    7a04:	18fb      	adds	r3, r7, r3
    7a06:	781b      	ldrb	r3, [r3, #0]
    7a08:	2202      	movs	r2, #2
    7a0a:	4013      	ands	r3, r2
    7a0c:	d00b      	beq.n	7a26 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    7a0e:	697b      	ldr	r3, [r7, #20]
    7a10:	2224      	movs	r2, #36	; 0x24
    7a12:	5c9b      	ldrb	r3, [r3, r2]
    7a14:	b2db      	uxtb	r3, r3
    7a16:	2b01      	cmp	r3, #1
    7a18:	d105      	bne.n	7a26 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    7a1a:	697b      	ldr	r3, [r7, #20]
    7a1c:	691b      	ldr	r3, [r3, #16]
    7a1e:	697a      	ldr	r2, [r7, #20]
    7a20:	0010      	movs	r0, r2
    7a22:	4798      	blx	r3
    7a24:	e010      	b.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    7a26:	230e      	movs	r3, #14
    7a28:	18fb      	adds	r3, r7, r3
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	2201      	movs	r2, #1
    7a2e:	4013      	ands	r3, r2
    7a30:	d00a      	beq.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    7a32:	697b      	ldr	r3, [r7, #20]
    7a34:	2224      	movs	r2, #36	; 0x24
    7a36:	5c9b      	ldrb	r3, [r3, r2]
    7a38:	b2db      	uxtb	r3, r3
    7a3a:	2b00      	cmp	r3, #0
    7a3c:	d104      	bne.n	7a48 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    7a3e:	697b      	ldr	r3, [r7, #20]
    7a40:	68db      	ldr	r3, [r3, #12]
    7a42:	697a      	ldr	r2, [r7, #20]
    7a44:	0010      	movs	r0, r2
    7a46:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    7a48:	697b      	ldr	r3, [r7, #20]
    7a4a:	2225      	movs	r2, #37	; 0x25
    7a4c:	5c9b      	ldrb	r3, [r3, r2]
    7a4e:	b2db      	uxtb	r3, r3
    7a50:	2b05      	cmp	r3, #5
    7a52:	d02e      	beq.n	7ab2 <_i2c_master_interrupt_handler+0x256>
    7a54:	697b      	ldr	r3, [r7, #20]
    7a56:	2225      	movs	r2, #37	; 0x25
    7a58:	5c9b      	ldrb	r3, [r3, r2]
    7a5a:	b2db      	uxtb	r3, r3
    7a5c:	2b00      	cmp	r3, #0
    7a5e:	d028      	beq.n	7ab2 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    7a60:	693b      	ldr	r3, [r7, #16]
    7a62:	2203      	movs	r2, #3
    7a64:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    7a66:	697b      	ldr	r3, [r7, #20]
    7a68:	2200      	movs	r2, #0
    7a6a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    7a6c:	697b      	ldr	r3, [r7, #20]
    7a6e:	2200      	movs	r2, #0
    7a70:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    7a72:	697b      	ldr	r3, [r7, #20]
    7a74:	2225      	movs	r2, #37	; 0x25
    7a76:	5c9b      	ldrb	r3, [r3, r2]
    7a78:	b2db      	uxtb	r3, r3
    7a7a:	2b41      	cmp	r3, #65	; 0x41
    7a7c:	d00e      	beq.n	7a9c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    7a7e:	697b      	ldr	r3, [r7, #20]
    7a80:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    7a82:	2b00      	cmp	r3, #0
    7a84:	d00a      	beq.n	7a9c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    7a86:	697b      	ldr	r3, [r7, #20]
    7a88:	0018      	movs	r0, r3
    7a8a:	4b0e      	ldr	r3, [pc, #56]	; (7ac4 <_i2c_master_interrupt_handler+0x268>)
    7a8c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    7a8e:	693b      	ldr	r3, [r7, #16]
    7a90:	685b      	ldr	r3, [r3, #4]
    7a92:	22e0      	movs	r2, #224	; 0xe0
    7a94:	02d2      	lsls	r2, r2, #11
    7a96:	431a      	orrs	r2, r3
    7a98:	693b      	ldr	r3, [r7, #16]
    7a9a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    7a9c:	230e      	movs	r3, #14
    7a9e:	18fb      	adds	r3, r7, r3
    7aa0:	781b      	ldrb	r3, [r3, #0]
    7aa2:	2204      	movs	r2, #4
    7aa4:	4013      	ands	r3, r2
    7aa6:	d004      	beq.n	7ab2 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    7aa8:	697b      	ldr	r3, [r7, #20]
    7aaa:	695b      	ldr	r3, [r3, #20]
    7aac:	697a      	ldr	r2, [r7, #20]
    7aae:	0010      	movs	r0, r2
    7ab0:	4798      	blx	r3
		}
	}
}
    7ab2:	46c0      	nop			; (mov r8, r8)
    7ab4:	46bd      	mov	sp, r7
    7ab6:	b006      	add	sp, #24
    7ab8:	bd80      	pop	{r7, pc}
    7aba:	46c0      	nop			; (mov r8, r8)
    7abc:	200045b0 	.word	0x200045b0
    7ac0:	000077a1 	.word	0x000077a1
    7ac4:	00007611 	.word	0x00007611
    7ac8:	00007725 	.word	0x00007725
    7acc:	00007635 	.word	0x00007635

00007ad0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7ad0:	b580      	push	{r7, lr}
    7ad2:	b082      	sub	sp, #8
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	2200      	movs	r2, #0
    7adc:	701a      	strb	r2, [r3, #0]
}
    7ade:	46c0      	nop			; (mov r8, r8)
    7ae0:	46bd      	mov	sp, r7
    7ae2:	b002      	add	sp, #8
    7ae4:	bd80      	pop	{r7, pc}
    7ae6:	46c0      	nop			; (mov r8, r8)

00007ae8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aea:	b08d      	sub	sp, #52	; 0x34
    7aec:	af00      	add	r7, sp, #0
    7aee:	60b8      	str	r0, [r7, #8]
    7af0:	60f9      	str	r1, [r7, #12]
    7af2:	603a      	str	r2, [r7, #0]
    7af4:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7af6:	2300      	movs	r3, #0
    7af8:	2400      	movs	r4, #0
    7afa:	623b      	str	r3, [r7, #32]
    7afc:	627c      	str	r4, [r7, #36]	; 0x24
    7afe:	2300      	movs	r3, #0
    7b00:	2400      	movs	r4, #0
    7b02:	61bb      	str	r3, [r7, #24]
    7b04:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    7b06:	233f      	movs	r3, #63	; 0x3f
    7b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b0a:	e053      	b.n	7bb4 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    7b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b0e:	3b20      	subs	r3, #32
    7b10:	2b00      	cmp	r3, #0
    7b12:	db04      	blt.n	7b1e <long_division+0x36>
    7b14:	2201      	movs	r2, #1
    7b16:	409a      	lsls	r2, r3
    7b18:	0013      	movs	r3, r2
    7b1a:	617b      	str	r3, [r7, #20]
    7b1c:	e00b      	b.n	7b36 <long_division+0x4e>
    7b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b20:	2220      	movs	r2, #32
    7b22:	1ad3      	subs	r3, r2, r3
    7b24:	2201      	movs	r2, #1
    7b26:	40da      	lsrs	r2, r3
    7b28:	0013      	movs	r3, r2
    7b2a:	2100      	movs	r1, #0
    7b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7b2e:	4091      	lsls	r1, r2
    7b30:	000a      	movs	r2, r1
    7b32:	4313      	orrs	r3, r2
    7b34:	617b      	str	r3, [r7, #20]
    7b36:	2201      	movs	r2, #1
    7b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b3a:	409a      	lsls	r2, r3
    7b3c:	0013      	movs	r3, r2
    7b3e:	613b      	str	r3, [r7, #16]

		r = r << 1;
    7b40:	69bb      	ldr	r3, [r7, #24]
    7b42:	69fc      	ldr	r4, [r7, #28]
    7b44:	18db      	adds	r3, r3, r3
    7b46:	4164      	adcs	r4, r4
    7b48:	61bb      	str	r3, [r7, #24]
    7b4a:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    7b4c:	68bb      	ldr	r3, [r7, #8]
    7b4e:	693a      	ldr	r2, [r7, #16]
    7b50:	401a      	ands	r2, r3
    7b52:	0015      	movs	r5, r2
    7b54:	68fb      	ldr	r3, [r7, #12]
    7b56:	697a      	ldr	r2, [r7, #20]
    7b58:	401a      	ands	r2, r3
    7b5a:	0016      	movs	r6, r2
    7b5c:	002b      	movs	r3, r5
    7b5e:	4333      	orrs	r3, r6
    7b60:	d007      	beq.n	7b72 <long_division+0x8a>
			r |= 0x01;
    7b62:	69bb      	ldr	r3, [r7, #24]
    7b64:	2201      	movs	r2, #1
    7b66:	4313      	orrs	r3, r2
    7b68:	61bb      	str	r3, [r7, #24]
    7b6a:	69fb      	ldr	r3, [r7, #28]
    7b6c:	2200      	movs	r2, #0
    7b6e:	4313      	orrs	r3, r2
    7b70:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    7b72:	687a      	ldr	r2, [r7, #4]
    7b74:	69fb      	ldr	r3, [r7, #28]
    7b76:	429a      	cmp	r2, r3
    7b78:	d819      	bhi.n	7bae <long_division+0xc6>
    7b7a:	687a      	ldr	r2, [r7, #4]
    7b7c:	69fb      	ldr	r3, [r7, #28]
    7b7e:	429a      	cmp	r2, r3
    7b80:	d103      	bne.n	7b8a <long_division+0xa2>
    7b82:	683a      	ldr	r2, [r7, #0]
    7b84:	69bb      	ldr	r3, [r7, #24]
    7b86:	429a      	cmp	r2, r3
    7b88:	d811      	bhi.n	7bae <long_division+0xc6>
			r = r - d;
    7b8a:	69b9      	ldr	r1, [r7, #24]
    7b8c:	69fa      	ldr	r2, [r7, #28]
    7b8e:	683b      	ldr	r3, [r7, #0]
    7b90:	687c      	ldr	r4, [r7, #4]
    7b92:	1ac9      	subs	r1, r1, r3
    7b94:	41a2      	sbcs	r2, r4
    7b96:	000b      	movs	r3, r1
    7b98:	0014      	movs	r4, r2
    7b9a:	61bb      	str	r3, [r7, #24]
    7b9c:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    7b9e:	6a3a      	ldr	r2, [r7, #32]
    7ba0:	693b      	ldr	r3, [r7, #16]
    7ba2:	4313      	orrs	r3, r2
    7ba4:	623b      	str	r3, [r7, #32]
    7ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7ba8:	697b      	ldr	r3, [r7, #20]
    7baa:	4313      	orrs	r3, r2
    7bac:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    7bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bb0:	3b01      	subs	r3, #1
    7bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	daa8      	bge.n	7b0c <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    7bba:	6a3b      	ldr	r3, [r7, #32]
    7bbc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    7bbe:	0018      	movs	r0, r3
    7bc0:	0021      	movs	r1, r4
    7bc2:	46bd      	mov	sp, r7
    7bc4:	b00d      	add	sp, #52	; 0x34
    7bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007bc8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7bc8:	b580      	push	{r7, lr}
    7bca:	b086      	sub	sp, #24
    7bcc:	af00      	add	r7, sp, #0
    7bce:	60f8      	str	r0, [r7, #12]
    7bd0:	60b9      	str	r1, [r7, #8]
    7bd2:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7bd4:	2316      	movs	r3, #22
    7bd6:	18fb      	adds	r3, r7, r3
    7bd8:	2200      	movs	r2, #0
    7bda:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    7bdc:	68bb      	ldr	r3, [r7, #8]
    7bde:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7be0:	68bb      	ldr	r3, [r7, #8]
    7be2:	085a      	lsrs	r2, r3, #1
    7be4:	68fb      	ldr	r3, [r7, #12]
    7be6:	429a      	cmp	r2, r3
    7be8:	d201      	bcs.n	7bee <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7bea:	2340      	movs	r3, #64	; 0x40
    7bec:	e026      	b.n	7c3c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7bee:	68bb      	ldr	r3, [r7, #8]
    7bf0:	085b      	lsrs	r3, r3, #1
    7bf2:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7bf4:	e00a      	b.n	7c0c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7bf6:	693a      	ldr	r2, [r7, #16]
    7bf8:	68fb      	ldr	r3, [r7, #12]
    7bfa:	1ad3      	subs	r3, r2, r3
    7bfc:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7bfe:	2316      	movs	r3, #22
    7c00:	18fb      	adds	r3, r7, r3
    7c02:	881a      	ldrh	r2, [r3, #0]
    7c04:	2316      	movs	r3, #22
    7c06:	18fb      	adds	r3, r7, r3
    7c08:	3201      	adds	r2, #1
    7c0a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    7c0c:	693a      	ldr	r2, [r7, #16]
    7c0e:	68fb      	ldr	r3, [r7, #12]
    7c10:	429a      	cmp	r2, r3
    7c12:	d2f0      	bcs.n	7bf6 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    7c14:	2316      	movs	r3, #22
    7c16:	18fb      	adds	r3, r7, r3
    7c18:	2216      	movs	r2, #22
    7c1a:	18ba      	adds	r2, r7, r2
    7c1c:	8812      	ldrh	r2, [r2, #0]
    7c1e:	3a01      	subs	r2, #1
    7c20:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7c22:	2316      	movs	r3, #22
    7c24:	18fb      	adds	r3, r7, r3
    7c26:	881b      	ldrh	r3, [r3, #0]
    7c28:	2bff      	cmp	r3, #255	; 0xff
    7c2a:	d901      	bls.n	7c30 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7c2c:	2340      	movs	r3, #64	; 0x40
    7c2e:	e005      	b.n	7c3c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	2216      	movs	r2, #22
    7c34:	18ba      	adds	r2, r7, r2
    7c36:	8812      	ldrh	r2, [r2, #0]
    7c38:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    7c3a:	2300      	movs	r3, #0
	}
}
    7c3c:	0018      	movs	r0, r3
    7c3e:	46bd      	mov	sp, r7
    7c40:	b006      	add	sp, #24
    7c42:	bd80      	pop	{r7, pc}

00007c44 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c46:	b09d      	sub	sp, #116	; 0x74
    7c48:	af00      	add	r7, sp, #0
    7c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    7c4c:	63b9      	str	r1, [r7, #56]	; 0x38
    7c4e:	637a      	str	r2, [r7, #52]	; 0x34
    7c50:	2233      	movs	r2, #51	; 0x33
    7c52:	18ba      	adds	r2, r7, r2
    7c54:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    7c56:	2300      	movs	r3, #0
    7c58:	2400      	movs	r4, #0
    7c5a:	65bb      	str	r3, [r7, #88]	; 0x58
    7c5c:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    7c5e:	2300      	movs	r3, #0
    7c60:	2400      	movs	r4, #0
    7c62:	653b      	str	r3, [r7, #80]	; 0x50
    7c64:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    7c66:	2300      	movs	r3, #0
    7c68:	2400      	movs	r4, #0
    7c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    7c6c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    7c6e:	2300      	movs	r3, #0
    7c70:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7c72:	2358      	movs	r3, #88	; 0x58
    7c74:	2230      	movs	r2, #48	; 0x30
    7c76:	4694      	mov	ip, r2
    7c78:	44bc      	add	ip, r7
    7c7a:	4463      	add	r3, ip
    7c7c:	781a      	ldrb	r2, [r3, #0]
    7c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c80:	435a      	muls	r2, r3
    7c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c84:	429a      	cmp	r2, r3
    7c86:	d901      	bls.n	7c8c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7c88:	2340      	movs	r3, #64	; 0x40
    7c8a:	e0c6      	b.n	7e1a <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7c8c:	2333      	movs	r3, #51	; 0x33
    7c8e:	18fb      	adds	r3, r7, r3
    7c90:	781b      	ldrb	r3, [r3, #0]
    7c92:	2b00      	cmp	r3, #0
    7c94:	d13d      	bne.n	7d12 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7c96:	2358      	movs	r3, #88	; 0x58
    7c98:	2230      	movs	r2, #48	; 0x30
    7c9a:	4694      	mov	ip, r2
    7c9c:	44bc      	add	ip, r7
    7c9e:	4463      	add	r3, ip
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	b2db      	uxtb	r3, r3
    7ca4:	613b      	str	r3, [r7, #16]
    7ca6:	2300      	movs	r3, #0
    7ca8:	617b      	str	r3, [r7, #20]
    7caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7cac:	60bb      	str	r3, [r7, #8]
    7cae:	2300      	movs	r3, #0
    7cb0:	60fb      	str	r3, [r7, #12]
    7cb2:	4c5c      	ldr	r4, [pc, #368]	; (7e24 <_sercom_get_async_baud_val+0x1e0>)
    7cb4:	68ba      	ldr	r2, [r7, #8]
    7cb6:	68fb      	ldr	r3, [r7, #12]
    7cb8:	6938      	ldr	r0, [r7, #16]
    7cba:	6979      	ldr	r1, [r7, #20]
    7cbc:	47a0      	blx	r4
    7cbe:	0003      	movs	r3, r0
    7cc0:	000c      	movs	r4, r1
    7cc2:	001b      	movs	r3, r3
    7cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    7cc6:	2300      	movs	r3, #0
    7cc8:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    7cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7ccc:	603b      	str	r3, [r7, #0]
    7cce:	2300      	movs	r3, #0
    7cd0:	607b      	str	r3, [r7, #4]
    7cd2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7cd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    7cd6:	683a      	ldr	r2, [r7, #0]
    7cd8:	687b      	ldr	r3, [r7, #4]
    7cda:	4c53      	ldr	r4, [pc, #332]	; (7e28 <_sercom_get_async_baud_val+0x1e4>)
    7cdc:	47a0      	blx	r4
    7cde:	0003      	movs	r3, r0
    7ce0:	000c      	movs	r4, r1
    7ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    7ce4:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7ce6:	2100      	movs	r1, #0
    7ce8:	2201      	movs	r2, #1
    7cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7cec:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7cee:	1ac9      	subs	r1, r1, r3
    7cf0:	41a2      	sbcs	r2, r4
    7cf2:	000b      	movs	r3, r1
    7cf4:	0014      	movs	r4, r2
    7cf6:	653b      	str	r3, [r7, #80]	; 0x50
    7cf8:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    7cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7cfc:	0c1b      	lsrs	r3, r3, #16
    7cfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7d00:	0416      	lsls	r6, r2, #16
    7d02:	431e      	orrs	r6, r3
    7d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7d06:	041d      	lsls	r5, r3, #16
    7d08:	0033      	movs	r3, r6
    7d0a:	66bb      	str	r3, [r7, #104]	; 0x68
    7d0c:	2300      	movs	r3, #0
    7d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    7d10:	e07d      	b.n	7e0e <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7d12:	2333      	movs	r3, #51	; 0x33
    7d14:	18fb      	adds	r3, r7, r3
    7d16:	781b      	ldrb	r3, [r3, #0]
    7d18:	2b01      	cmp	r3, #1
    7d1a:	d000      	beq.n	7d1e <_sercom_get_async_baud_val+0xda>
    7d1c:	e077      	b.n	7e0e <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    7d1e:	2337      	movs	r3, #55	; 0x37
    7d20:	2230      	movs	r2, #48	; 0x30
    7d22:	4694      	mov	ip, r2
    7d24:	44bc      	add	ip, r7
    7d26:	4463      	add	r3, ip
    7d28:	2200      	movs	r2, #0
    7d2a:	701a      	strb	r2, [r3, #0]
    7d2c:	e04e      	b.n	7dcc <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    7d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7d30:	62bb      	str	r3, [r7, #40]	; 0x28
    7d32:	2300      	movs	r3, #0
    7d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    7d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7d38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7d3a:	0003      	movs	r3, r0
    7d3c:	0f5b      	lsrs	r3, r3, #29
    7d3e:	000a      	movs	r2, r1
    7d40:	00d2      	lsls	r2, r2, #3
    7d42:	4313      	orrs	r3, r2
    7d44:	64fb      	str	r3, [r7, #76]	; 0x4c
    7d46:	0003      	movs	r3, r0
    7d48:	00db      	lsls	r3, r3, #3
    7d4a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    7d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7d4e:	623b      	str	r3, [r7, #32]
    7d50:	2300      	movs	r3, #0
    7d52:	627b      	str	r3, [r7, #36]	; 0x24
    7d54:	2358      	movs	r3, #88	; 0x58
    7d56:	2230      	movs	r2, #48	; 0x30
    7d58:	4694      	mov	ip, r2
    7d5a:	44bc      	add	ip, r7
    7d5c:	4463      	add	r3, ip
    7d5e:	781b      	ldrb	r3, [r3, #0]
    7d60:	b2db      	uxtb	r3, r3
    7d62:	61bb      	str	r3, [r7, #24]
    7d64:	2300      	movs	r3, #0
    7d66:	61fb      	str	r3, [r7, #28]
    7d68:	4c2e      	ldr	r4, [pc, #184]	; (7e24 <_sercom_get_async_baud_val+0x1e0>)
    7d6a:	69ba      	ldr	r2, [r7, #24]
    7d6c:	69fb      	ldr	r3, [r7, #28]
    7d6e:	6a38      	ldr	r0, [r7, #32]
    7d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7d72:	47a0      	blx	r4
    7d74:	0003      	movs	r3, r0
    7d76:	000c      	movs	r4, r1
    7d78:	643b      	str	r3, [r7, #64]	; 0x40
    7d7a:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    7d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7d7e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    7d80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7d82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    7d84:	001a      	movs	r2, r3
    7d86:	0023      	movs	r3, r4
    7d88:	4c27      	ldr	r4, [pc, #156]	; (7e28 <_sercom_get_async_baud_val+0x1e4>)
    7d8a:	47a0      	blx	r4
    7d8c:	0003      	movs	r3, r0
    7d8e:	000c      	movs	r4, r1
    7d90:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    7d92:	2337      	movs	r3, #55	; 0x37
    7d94:	2230      	movs	r2, #48	; 0x30
    7d96:	4694      	mov	ip, r2
    7d98:	44bc      	add	ip, r7
    7d9a:	4463      	add	r3, ip
    7d9c:	781b      	ldrb	r3, [r3, #0]
    7d9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7da0:	1ad3      	subs	r3, r2, r3
    7da2:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    7da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7da6:	08db      	lsrs	r3, r3, #3
    7da8:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    7daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7dac:	4a1f      	ldr	r2, [pc, #124]	; (7e2c <_sercom_get_async_baud_val+0x1e8>)
    7dae:	4293      	cmp	r3, r2
    7db0:	d915      	bls.n	7dde <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    7db2:	2337      	movs	r3, #55	; 0x37
    7db4:	2230      	movs	r2, #48	; 0x30
    7db6:	4694      	mov	ip, r2
    7db8:	44bc      	add	ip, r7
    7dba:	4463      	add	r3, ip
    7dbc:	781a      	ldrb	r2, [r3, #0]
    7dbe:	2337      	movs	r3, #55	; 0x37
    7dc0:	2130      	movs	r1, #48	; 0x30
    7dc2:	468c      	mov	ip, r1
    7dc4:	44bc      	add	ip, r7
    7dc6:	4463      	add	r3, ip
    7dc8:	3201      	adds	r2, #1
    7dca:	701a      	strb	r2, [r3, #0]
    7dcc:	2337      	movs	r3, #55	; 0x37
    7dce:	2230      	movs	r2, #48	; 0x30
    7dd0:	4694      	mov	ip, r2
    7dd2:	44bc      	add	ip, r7
    7dd4:	4463      	add	r3, ip
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	2b07      	cmp	r3, #7
    7dda:	d9a8      	bls.n	7d2e <_sercom_get_async_baud_val+0xea>
    7ddc:	e000      	b.n	7de0 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    7dde:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    7de0:	2337      	movs	r3, #55	; 0x37
    7de2:	2230      	movs	r2, #48	; 0x30
    7de4:	4694      	mov	ip, r2
    7de6:	44bc      	add	ip, r7
    7de8:	4463      	add	r3, ip
    7dea:	781b      	ldrb	r3, [r3, #0]
    7dec:	2b08      	cmp	r3, #8
    7dee:	d101      	bne.n	7df4 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7df0:	2340      	movs	r3, #64	; 0x40
    7df2:	e012      	b.n	7e1a <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    7df4:	2337      	movs	r3, #55	; 0x37
    7df6:	2230      	movs	r2, #48	; 0x30
    7df8:	4694      	mov	ip, r2
    7dfa:	44bc      	add	ip, r7
    7dfc:	4463      	add	r3, ip
    7dfe:	781b      	ldrb	r3, [r3, #0]
    7e00:	035b      	lsls	r3, r3, #13
    7e02:	001a      	movs	r2, r3
    7e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7e06:	4313      	orrs	r3, r2
    7e08:	66bb      	str	r3, [r7, #104]	; 0x68
    7e0a:	2300      	movs	r3, #0
    7e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    7e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7e10:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7e12:	b29a      	uxth	r2, r3
    7e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7e16:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    7e18:	2300      	movs	r3, #0
}
    7e1a:	0018      	movs	r0, r3
    7e1c:	46bd      	mov	sp, r7
    7e1e:	b01d      	add	sp, #116	; 0x74
    7e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e22:	46c0      	nop			; (mov r8, r8)
    7e24:	0000ece1 	.word	0x0000ece1
    7e28:	00007ae9 	.word	0x00007ae9
    7e2c:	00001fff 	.word	0x00001fff

00007e30 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7e30:	b580      	push	{r7, lr}
    7e32:	b084      	sub	sp, #16
    7e34:	af00      	add	r7, sp, #0
    7e36:	0002      	movs	r2, r0
    7e38:	1dfb      	adds	r3, r7, #7
    7e3a:	701a      	strb	r2, [r3, #0]
    7e3c:	1dbb      	adds	r3, r7, #6
    7e3e:	1c0a      	adds	r2, r1, #0
    7e40:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7e42:	4b1a      	ldr	r3, [pc, #104]	; (7eac <sercom_set_gclk_generator+0x7c>)
    7e44:	781b      	ldrb	r3, [r3, #0]
    7e46:	2201      	movs	r2, #1
    7e48:	4053      	eors	r3, r2
    7e4a:	b2db      	uxtb	r3, r3
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d103      	bne.n	7e58 <sercom_set_gclk_generator+0x28>
    7e50:	1dbb      	adds	r3, r7, #6
    7e52:	781b      	ldrb	r3, [r3, #0]
    7e54:	2b00      	cmp	r3, #0
    7e56:	d01b      	beq.n	7e90 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7e58:	230c      	movs	r3, #12
    7e5a:	18fb      	adds	r3, r7, r3
    7e5c:	0018      	movs	r0, r3
    7e5e:	4b14      	ldr	r3, [pc, #80]	; (7eb0 <sercom_set_gclk_generator+0x80>)
    7e60:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    7e62:	230c      	movs	r3, #12
    7e64:	18fb      	adds	r3, r7, r3
    7e66:	1dfa      	adds	r2, r7, #7
    7e68:	7812      	ldrb	r2, [r2, #0]
    7e6a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7e6c:	230c      	movs	r3, #12
    7e6e:	18fb      	adds	r3, r7, r3
    7e70:	0019      	movs	r1, r3
    7e72:	2013      	movs	r0, #19
    7e74:	4b0f      	ldr	r3, [pc, #60]	; (7eb4 <sercom_set_gclk_generator+0x84>)
    7e76:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7e78:	2013      	movs	r0, #19
    7e7a:	4b0f      	ldr	r3, [pc, #60]	; (7eb8 <sercom_set_gclk_generator+0x88>)
    7e7c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    7e7e:	4b0b      	ldr	r3, [pc, #44]	; (7eac <sercom_set_gclk_generator+0x7c>)
    7e80:	1dfa      	adds	r2, r7, #7
    7e82:	7812      	ldrb	r2, [r2, #0]
    7e84:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    7e86:	4b09      	ldr	r3, [pc, #36]	; (7eac <sercom_set_gclk_generator+0x7c>)
    7e88:	2201      	movs	r2, #1
    7e8a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7e8c:	2300      	movs	r3, #0
    7e8e:	e008      	b.n	7ea2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    7e90:	4b06      	ldr	r3, [pc, #24]	; (7eac <sercom_set_gclk_generator+0x7c>)
    7e92:	785b      	ldrb	r3, [r3, #1]
    7e94:	1dfa      	adds	r2, r7, #7
    7e96:	7812      	ldrb	r2, [r2, #0]
    7e98:	429a      	cmp	r2, r3
    7e9a:	d101      	bne.n	7ea0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    7e9c:	2300      	movs	r3, #0
    7e9e:	e000      	b.n	7ea2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7ea0:	231d      	movs	r3, #29
}
    7ea2:	0018      	movs	r0, r3
    7ea4:	46bd      	mov	sp, r7
    7ea6:	b004      	add	sp, #16
    7ea8:	bd80      	pop	{r7, pc}
    7eaa:	46c0      	nop			; (mov r8, r8)
    7eac:	200000ec 	.word	0x200000ec
    7eb0:	00007ad1 	.word	0x00007ad1
    7eb4:	0000a49d 	.word	0x0000a49d
    7eb8:	0000a4e1 	.word	0x0000a4e1

00007ebc <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    7ebc:	b580      	push	{r7, lr}
    7ebe:	b082      	sub	sp, #8
    7ec0:	af00      	add	r7, sp, #0
    7ec2:	6078      	str	r0, [r7, #4]
    7ec4:	000a      	movs	r2, r1
    7ec6:	1cfb      	adds	r3, r7, #3
    7ec8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	4a4d      	ldr	r2, [pc, #308]	; (8004 <_sercom_get_default_pad+0x148>)
    7ece:	4293      	cmp	r3, r2
    7ed0:	d03f      	beq.n	7f52 <_sercom_get_default_pad+0x96>
    7ed2:	4a4c      	ldr	r2, [pc, #304]	; (8004 <_sercom_get_default_pad+0x148>)
    7ed4:	4293      	cmp	r3, r2
    7ed6:	d806      	bhi.n	7ee6 <_sercom_get_default_pad+0x2a>
    7ed8:	4a4b      	ldr	r2, [pc, #300]	; (8008 <_sercom_get_default_pad+0x14c>)
    7eda:	4293      	cmp	r3, r2
    7edc:	d00f      	beq.n	7efe <_sercom_get_default_pad+0x42>
    7ede:	4a4b      	ldr	r2, [pc, #300]	; (800c <_sercom_get_default_pad+0x150>)
    7ee0:	4293      	cmp	r3, r2
    7ee2:	d021      	beq.n	7f28 <_sercom_get_default_pad+0x6c>
    7ee4:	e089      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7ee6:	4a4a      	ldr	r2, [pc, #296]	; (8010 <_sercom_get_default_pad+0x154>)
    7ee8:	4293      	cmp	r3, r2
    7eea:	d100      	bne.n	7eee <_sercom_get_default_pad+0x32>
    7eec:	e05b      	b.n	7fa6 <_sercom_get_default_pad+0xea>
    7eee:	4a49      	ldr	r2, [pc, #292]	; (8014 <_sercom_get_default_pad+0x158>)
    7ef0:	4293      	cmp	r3, r2
    7ef2:	d100      	bne.n	7ef6 <_sercom_get_default_pad+0x3a>
    7ef4:	e06c      	b.n	7fd0 <_sercom_get_default_pad+0x114>
    7ef6:	4a48      	ldr	r2, [pc, #288]	; (8018 <_sercom_get_default_pad+0x15c>)
    7ef8:	4293      	cmp	r3, r2
    7efa:	d03f      	beq.n	7f7c <_sercom_get_default_pad+0xc0>
    7efc:	e07d      	b.n	7ffa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7efe:	1cfb      	adds	r3, r7, #3
    7f00:	781b      	ldrb	r3, [r3, #0]
    7f02:	2b01      	cmp	r3, #1
    7f04:	d00a      	beq.n	7f1c <_sercom_get_default_pad+0x60>
    7f06:	dc02      	bgt.n	7f0e <_sercom_get_default_pad+0x52>
    7f08:	2b00      	cmp	r3, #0
    7f0a:	d005      	beq.n	7f18 <_sercom_get_default_pad+0x5c>
    7f0c:	e075      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f0e:	2b02      	cmp	r3, #2
    7f10:	d006      	beq.n	7f20 <_sercom_get_default_pad+0x64>
    7f12:	2b03      	cmp	r3, #3
    7f14:	d006      	beq.n	7f24 <_sercom_get_default_pad+0x68>
    7f16:	e070      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f18:	4b40      	ldr	r3, [pc, #256]	; (801c <_sercom_get_default_pad+0x160>)
    7f1a:	e06f      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f1c:	4b40      	ldr	r3, [pc, #256]	; (8020 <_sercom_get_default_pad+0x164>)
    7f1e:	e06d      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f20:	4b40      	ldr	r3, [pc, #256]	; (8024 <_sercom_get_default_pad+0x168>)
    7f22:	e06b      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f24:	4b40      	ldr	r3, [pc, #256]	; (8028 <_sercom_get_default_pad+0x16c>)
    7f26:	e069      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f28:	1cfb      	adds	r3, r7, #3
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	2b01      	cmp	r3, #1
    7f2e:	d00a      	beq.n	7f46 <_sercom_get_default_pad+0x8a>
    7f30:	dc02      	bgt.n	7f38 <_sercom_get_default_pad+0x7c>
    7f32:	2b00      	cmp	r3, #0
    7f34:	d005      	beq.n	7f42 <_sercom_get_default_pad+0x86>
    7f36:	e060      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f38:	2b02      	cmp	r3, #2
    7f3a:	d006      	beq.n	7f4a <_sercom_get_default_pad+0x8e>
    7f3c:	2b03      	cmp	r3, #3
    7f3e:	d006      	beq.n	7f4e <_sercom_get_default_pad+0x92>
    7f40:	e05b      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f42:	2303      	movs	r3, #3
    7f44:	e05a      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f46:	4b39      	ldr	r3, [pc, #228]	; (802c <_sercom_get_default_pad+0x170>)
    7f48:	e058      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f4a:	4b39      	ldr	r3, [pc, #228]	; (8030 <_sercom_get_default_pad+0x174>)
    7f4c:	e056      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f4e:	4b39      	ldr	r3, [pc, #228]	; (8034 <_sercom_get_default_pad+0x178>)
    7f50:	e054      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f52:	1cfb      	adds	r3, r7, #3
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	2b01      	cmp	r3, #1
    7f58:	d00a      	beq.n	7f70 <_sercom_get_default_pad+0xb4>
    7f5a:	dc02      	bgt.n	7f62 <_sercom_get_default_pad+0xa6>
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d005      	beq.n	7f6c <_sercom_get_default_pad+0xb0>
    7f60:	e04b      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f62:	2b02      	cmp	r3, #2
    7f64:	d006      	beq.n	7f74 <_sercom_get_default_pad+0xb8>
    7f66:	2b03      	cmp	r3, #3
    7f68:	d006      	beq.n	7f78 <_sercom_get_default_pad+0xbc>
    7f6a:	e046      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f6c:	4b32      	ldr	r3, [pc, #200]	; (8038 <_sercom_get_default_pad+0x17c>)
    7f6e:	e045      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f70:	4b32      	ldr	r3, [pc, #200]	; (803c <_sercom_get_default_pad+0x180>)
    7f72:	e043      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f74:	4b32      	ldr	r3, [pc, #200]	; (8040 <_sercom_get_default_pad+0x184>)
    7f76:	e041      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f78:	4b32      	ldr	r3, [pc, #200]	; (8044 <_sercom_get_default_pad+0x188>)
    7f7a:	e03f      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f7c:	1cfb      	adds	r3, r7, #3
    7f7e:	781b      	ldrb	r3, [r3, #0]
    7f80:	2b01      	cmp	r3, #1
    7f82:	d00a      	beq.n	7f9a <_sercom_get_default_pad+0xde>
    7f84:	dc02      	bgt.n	7f8c <_sercom_get_default_pad+0xd0>
    7f86:	2b00      	cmp	r3, #0
    7f88:	d005      	beq.n	7f96 <_sercom_get_default_pad+0xda>
    7f8a:	e036      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f8c:	2b02      	cmp	r3, #2
    7f8e:	d006      	beq.n	7f9e <_sercom_get_default_pad+0xe2>
    7f90:	2b03      	cmp	r3, #3
    7f92:	d006      	beq.n	7fa2 <_sercom_get_default_pad+0xe6>
    7f94:	e031      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7f96:	4b2c      	ldr	r3, [pc, #176]	; (8048 <_sercom_get_default_pad+0x18c>)
    7f98:	e030      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f9a:	4b2c      	ldr	r3, [pc, #176]	; (804c <_sercom_get_default_pad+0x190>)
    7f9c:	e02e      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7f9e:	4b2c      	ldr	r3, [pc, #176]	; (8050 <_sercom_get_default_pad+0x194>)
    7fa0:	e02c      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fa2:	4b2c      	ldr	r3, [pc, #176]	; (8054 <_sercom_get_default_pad+0x198>)
    7fa4:	e02a      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fa6:	1cfb      	adds	r3, r7, #3
    7fa8:	781b      	ldrb	r3, [r3, #0]
    7faa:	2b01      	cmp	r3, #1
    7fac:	d00a      	beq.n	7fc4 <_sercom_get_default_pad+0x108>
    7fae:	dc02      	bgt.n	7fb6 <_sercom_get_default_pad+0xfa>
    7fb0:	2b00      	cmp	r3, #0
    7fb2:	d005      	beq.n	7fc0 <_sercom_get_default_pad+0x104>
    7fb4:	e021      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7fb6:	2b02      	cmp	r3, #2
    7fb8:	d006      	beq.n	7fc8 <_sercom_get_default_pad+0x10c>
    7fba:	2b03      	cmp	r3, #3
    7fbc:	d006      	beq.n	7fcc <_sercom_get_default_pad+0x110>
    7fbe:	e01c      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7fc0:	4b25      	ldr	r3, [pc, #148]	; (8058 <_sercom_get_default_pad+0x19c>)
    7fc2:	e01b      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fc4:	4b25      	ldr	r3, [pc, #148]	; (805c <_sercom_get_default_pad+0x1a0>)
    7fc6:	e019      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fc8:	4b25      	ldr	r3, [pc, #148]	; (8060 <_sercom_get_default_pad+0x1a4>)
    7fca:	e017      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fcc:	4b25      	ldr	r3, [pc, #148]	; (8064 <_sercom_get_default_pad+0x1a8>)
    7fce:	e015      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fd0:	1cfb      	adds	r3, r7, #3
    7fd2:	781b      	ldrb	r3, [r3, #0]
    7fd4:	2b01      	cmp	r3, #1
    7fd6:	d00a      	beq.n	7fee <_sercom_get_default_pad+0x132>
    7fd8:	dc02      	bgt.n	7fe0 <_sercom_get_default_pad+0x124>
    7fda:	2b00      	cmp	r3, #0
    7fdc:	d005      	beq.n	7fea <_sercom_get_default_pad+0x12e>
    7fde:	e00c      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7fe0:	2b02      	cmp	r3, #2
    7fe2:	d006      	beq.n	7ff2 <_sercom_get_default_pad+0x136>
    7fe4:	2b03      	cmp	r3, #3
    7fe6:	d006      	beq.n	7ff6 <_sercom_get_default_pad+0x13a>
    7fe8:	e007      	b.n	7ffa <_sercom_get_default_pad+0x13e>
    7fea:	4b1f      	ldr	r3, [pc, #124]	; (8068 <_sercom_get_default_pad+0x1ac>)
    7fec:	e006      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7fee:	4b1f      	ldr	r3, [pc, #124]	; (806c <_sercom_get_default_pad+0x1b0>)
    7ff0:	e004      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7ff2:	4b1f      	ldr	r3, [pc, #124]	; (8070 <_sercom_get_default_pad+0x1b4>)
    7ff4:	e002      	b.n	7ffc <_sercom_get_default_pad+0x140>
    7ff6:	4b1f      	ldr	r3, [pc, #124]	; (8074 <_sercom_get_default_pad+0x1b8>)
    7ff8:	e000      	b.n	7ffc <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    7ffa:	2300      	movs	r3, #0
}
    7ffc:	0018      	movs	r0, r3
    7ffe:	46bd      	mov	sp, r7
    8000:	b002      	add	sp, #8
    8002:	bd80      	pop	{r7, pc}
    8004:	42001000 	.word	0x42001000
    8008:	42000800 	.word	0x42000800
    800c:	42000c00 	.word	0x42000c00
    8010:	42001800 	.word	0x42001800
    8014:	42001c00 	.word	0x42001c00
    8018:	42001400 	.word	0x42001400
    801c:	00040003 	.word	0x00040003
    8020:	00050003 	.word	0x00050003
    8024:	00060003 	.word	0x00060003
    8028:	00070003 	.word	0x00070003
    802c:	00010003 	.word	0x00010003
    8030:	001e0003 	.word	0x001e0003
    8034:	001f0003 	.word	0x001f0003
    8038:	00080003 	.word	0x00080003
    803c:	00090003 	.word	0x00090003
    8040:	000a0003 	.word	0x000a0003
    8044:	000b0003 	.word	0x000b0003
    8048:	00100003 	.word	0x00100003
    804c:	00110003 	.word	0x00110003
    8050:	00120003 	.word	0x00120003
    8054:	00130003 	.word	0x00130003
    8058:	000c0003 	.word	0x000c0003
    805c:	000d0003 	.word	0x000d0003
    8060:	000e0003 	.word	0x000e0003
    8064:	000f0003 	.word	0x000f0003
    8068:	00160003 	.word	0x00160003
    806c:	00170003 	.word	0x00170003
    8070:	00180003 	.word	0x00180003
    8074:	00190003 	.word	0x00190003

00008078 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    8078:	b590      	push	{r4, r7, lr}
    807a:	b08b      	sub	sp, #44	; 0x2c
    807c:	af00      	add	r7, sp, #0
    807e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    8080:	230c      	movs	r3, #12
    8082:	18fb      	adds	r3, r7, r3
    8084:	4a0f      	ldr	r2, [pc, #60]	; (80c4 <_sercom_get_sercom_inst_index+0x4c>)
    8086:	ca13      	ldmia	r2!, {r0, r1, r4}
    8088:	c313      	stmia	r3!, {r0, r1, r4}
    808a:	ca13      	ldmia	r2!, {r0, r1, r4}
    808c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    808e:	2300      	movs	r3, #0
    8090:	627b      	str	r3, [r7, #36]	; 0x24
    8092:	e00e      	b.n	80b2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    8094:	230c      	movs	r3, #12
    8096:	18fb      	adds	r3, r7, r3
    8098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    809a:	0092      	lsls	r2, r2, #2
    809c:	58d3      	ldr	r3, [r2, r3]
    809e:	1e1a      	subs	r2, r3, #0
    80a0:	687b      	ldr	r3, [r7, #4]
    80a2:	429a      	cmp	r2, r3
    80a4:	d102      	bne.n	80ac <_sercom_get_sercom_inst_index+0x34>
			return i;
    80a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80a8:	b2db      	uxtb	r3, r3
    80aa:	e006      	b.n	80ba <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    80ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80ae:	3301      	adds	r3, #1
    80b0:	627b      	str	r3, [r7, #36]	; 0x24
    80b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80b4:	2b05      	cmp	r3, #5
    80b6:	d9ed      	bls.n	8094 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    80b8:	2300      	movs	r3, #0
}
    80ba:	0018      	movs	r0, r3
    80bc:	46bd      	mov	sp, r7
    80be:	b00b      	add	sp, #44	; 0x2c
    80c0:	bd90      	pop	{r4, r7, pc}
    80c2:	46c0      	nop			; (mov r8, r8)
    80c4:	00012f9c 	.word	0x00012f9c

000080c8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    80c8:	b580      	push	{r7, lr}
    80ca:	b082      	sub	sp, #8
    80cc:	af00      	add	r7, sp, #0
    80ce:	0002      	movs	r2, r0
    80d0:	1dfb      	adds	r3, r7, #7
    80d2:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    80d4:	46c0      	nop			; (mov r8, r8)
    80d6:	46bd      	mov	sp, r7
    80d8:	b002      	add	sp, #8
    80da:	bd80      	pop	{r7, pc}

000080dc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    80dc:	b580      	push	{r7, lr}
    80de:	b084      	sub	sp, #16
    80e0:	af00      	add	r7, sp, #0
    80e2:	0002      	movs	r2, r0
    80e4:	6039      	str	r1, [r7, #0]
    80e6:	1dfb      	adds	r3, r7, #7
    80e8:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    80ea:	4b13      	ldr	r3, [pc, #76]	; (8138 <_sercom_set_handler+0x5c>)
    80ec:	781b      	ldrb	r3, [r3, #0]
    80ee:	2201      	movs	r2, #1
    80f0:	4053      	eors	r3, r2
    80f2:	b2db      	uxtb	r3, r3
    80f4:	2b00      	cmp	r3, #0
    80f6:	d015      	beq.n	8124 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    80f8:	2300      	movs	r3, #0
    80fa:	60fb      	str	r3, [r7, #12]
    80fc:	e00c      	b.n	8118 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    80fe:	4b0f      	ldr	r3, [pc, #60]	; (813c <_sercom_set_handler+0x60>)
    8100:	68fa      	ldr	r2, [r7, #12]
    8102:	0092      	lsls	r2, r2, #2
    8104:	490e      	ldr	r1, [pc, #56]	; (8140 <_sercom_set_handler+0x64>)
    8106:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    8108:	4b0e      	ldr	r3, [pc, #56]	; (8144 <_sercom_set_handler+0x68>)
    810a:	68fa      	ldr	r2, [r7, #12]
    810c:	0092      	lsls	r2, r2, #2
    810e:	2100      	movs	r1, #0
    8110:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8112:	68fb      	ldr	r3, [r7, #12]
    8114:	3301      	adds	r3, #1
    8116:	60fb      	str	r3, [r7, #12]
    8118:	68fb      	ldr	r3, [r7, #12]
    811a:	2b05      	cmp	r3, #5
    811c:	d9ef      	bls.n	80fe <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    811e:	4b06      	ldr	r3, [pc, #24]	; (8138 <_sercom_set_handler+0x5c>)
    8120:	2201      	movs	r2, #1
    8122:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    8124:	1dfb      	adds	r3, r7, #7
    8126:	781a      	ldrb	r2, [r3, #0]
    8128:	4b04      	ldr	r3, [pc, #16]	; (813c <_sercom_set_handler+0x60>)
    812a:	0092      	lsls	r2, r2, #2
    812c:	6839      	ldr	r1, [r7, #0]
    812e:	50d1      	str	r1, [r2, r3]
}
    8130:	46c0      	nop			; (mov r8, r8)
    8132:	46bd      	mov	sp, r7
    8134:	b004      	add	sp, #16
    8136:	bd80      	pop	{r7, pc}
    8138:	200000ee 	.word	0x200000ee
    813c:	200000f0 	.word	0x200000f0
    8140:	000080c9 	.word	0x000080c9
    8144:	200045b0 	.word	0x200045b0

00008148 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    8148:	b590      	push	{r4, r7, lr}
    814a:	b085      	sub	sp, #20
    814c:	af00      	add	r7, sp, #0
    814e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    8150:	2308      	movs	r3, #8
    8152:	18fa      	adds	r2, r7, r3
    8154:	4b0c      	ldr	r3, [pc, #48]	; (8188 <_sercom_get_interrupt_vector+0x40>)
    8156:	0010      	movs	r0, r2
    8158:	0019      	movs	r1, r3
    815a:	2306      	movs	r3, #6
    815c:	001a      	movs	r2, r3
    815e:	4b0b      	ldr	r3, [pc, #44]	; (818c <_sercom_get_interrupt_vector+0x44>)
    8160:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    8162:	230f      	movs	r3, #15
    8164:	18fc      	adds	r4, r7, r3
    8166:	687b      	ldr	r3, [r7, #4]
    8168:	0018      	movs	r0, r3
    816a:	4b09      	ldr	r3, [pc, #36]	; (8190 <_sercom_get_interrupt_vector+0x48>)
    816c:	4798      	blx	r3
    816e:	0003      	movs	r3, r0
    8170:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    8172:	230f      	movs	r3, #15
    8174:	18fb      	adds	r3, r7, r3
    8176:	781b      	ldrb	r3, [r3, #0]
    8178:	2208      	movs	r2, #8
    817a:	18ba      	adds	r2, r7, r2
    817c:	5cd3      	ldrb	r3, [r2, r3]
    817e:	b25b      	sxtb	r3, r3
}
    8180:	0018      	movs	r0, r3
    8182:	46bd      	mov	sp, r7
    8184:	b005      	add	sp, #20
    8186:	bd90      	pop	{r4, r7, pc}
    8188:	00012fb4 	.word	0x00012fb4
    818c:	000107ad 	.word	0x000107ad
    8190:	00008079 	.word	0x00008079

00008194 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    8194:	b580      	push	{r7, lr}
    8196:	af00      	add	r7, sp, #0
    8198:	4b03      	ldr	r3, [pc, #12]	; (81a8 <SERCOM0_Handler+0x14>)
    819a:	681b      	ldr	r3, [r3, #0]
    819c:	2000      	movs	r0, #0
    819e:	4798      	blx	r3
    81a0:	46c0      	nop			; (mov r8, r8)
    81a2:	46bd      	mov	sp, r7
    81a4:	bd80      	pop	{r7, pc}
    81a6:	46c0      	nop			; (mov r8, r8)
    81a8:	200000f0 	.word	0x200000f0

000081ac <SERCOM1_Handler>:
    81ac:	b580      	push	{r7, lr}
    81ae:	af00      	add	r7, sp, #0
    81b0:	4b03      	ldr	r3, [pc, #12]	; (81c0 <SERCOM1_Handler+0x14>)
    81b2:	685b      	ldr	r3, [r3, #4]
    81b4:	2001      	movs	r0, #1
    81b6:	4798      	blx	r3
    81b8:	46c0      	nop			; (mov r8, r8)
    81ba:	46bd      	mov	sp, r7
    81bc:	bd80      	pop	{r7, pc}
    81be:	46c0      	nop			; (mov r8, r8)
    81c0:	200000f0 	.word	0x200000f0

000081c4 <SERCOM2_Handler>:
    81c4:	b580      	push	{r7, lr}
    81c6:	af00      	add	r7, sp, #0
    81c8:	4b03      	ldr	r3, [pc, #12]	; (81d8 <SERCOM2_Handler+0x14>)
    81ca:	689b      	ldr	r3, [r3, #8]
    81cc:	2002      	movs	r0, #2
    81ce:	4798      	blx	r3
    81d0:	46c0      	nop			; (mov r8, r8)
    81d2:	46bd      	mov	sp, r7
    81d4:	bd80      	pop	{r7, pc}
    81d6:	46c0      	nop			; (mov r8, r8)
    81d8:	200000f0 	.word	0x200000f0

000081dc <SERCOM3_Handler>:
    81dc:	b580      	push	{r7, lr}
    81de:	af00      	add	r7, sp, #0
    81e0:	4b03      	ldr	r3, [pc, #12]	; (81f0 <SERCOM3_Handler+0x14>)
    81e2:	68db      	ldr	r3, [r3, #12]
    81e4:	2003      	movs	r0, #3
    81e6:	4798      	blx	r3
    81e8:	46c0      	nop			; (mov r8, r8)
    81ea:	46bd      	mov	sp, r7
    81ec:	bd80      	pop	{r7, pc}
    81ee:	46c0      	nop			; (mov r8, r8)
    81f0:	200000f0 	.word	0x200000f0

000081f4 <SERCOM4_Handler>:
    81f4:	b580      	push	{r7, lr}
    81f6:	af00      	add	r7, sp, #0
    81f8:	4b03      	ldr	r3, [pc, #12]	; (8208 <SERCOM4_Handler+0x14>)
    81fa:	691b      	ldr	r3, [r3, #16]
    81fc:	2004      	movs	r0, #4
    81fe:	4798      	blx	r3
    8200:	46c0      	nop			; (mov r8, r8)
    8202:	46bd      	mov	sp, r7
    8204:	bd80      	pop	{r7, pc}
    8206:	46c0      	nop			; (mov r8, r8)
    8208:	200000f0 	.word	0x200000f0

0000820c <SERCOM5_Handler>:
    820c:	b580      	push	{r7, lr}
    820e:	af00      	add	r7, sp, #0
    8210:	4b03      	ldr	r3, [pc, #12]	; (8220 <SERCOM5_Handler+0x14>)
    8212:	695b      	ldr	r3, [r3, #20]
    8214:	2005      	movs	r0, #5
    8216:	4798      	blx	r3
    8218:	46c0      	nop			; (mov r8, r8)
    821a:	46bd      	mov	sp, r7
    821c:	bd80      	pop	{r7, pc}
    821e:	46c0      	nop			; (mov r8, r8)
    8220:	200000f0 	.word	0x200000f0

00008224 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8224:	b580      	push	{r7, lr}
    8226:	b082      	sub	sp, #8
    8228:	af00      	add	r7, sp, #0
    822a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    822c:	687b      	ldr	r3, [r7, #4]
    822e:	2280      	movs	r2, #128	; 0x80
    8230:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8232:	687b      	ldr	r3, [r7, #4]
    8234:	2200      	movs	r2, #0
    8236:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8238:	687b      	ldr	r3, [r7, #4]
    823a:	2201      	movs	r2, #1
    823c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	2200      	movs	r2, #0
    8242:	70da      	strb	r2, [r3, #3]
}
    8244:	46c0      	nop			; (mov r8, r8)
    8246:	46bd      	mov	sp, r7
    8248:	b002      	add	sp, #8
    824a:	bd80      	pop	{r7, pc}

0000824c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    824c:	b580      	push	{r7, lr}
    824e:	b084      	sub	sp, #16
    8250:	af00      	add	r7, sp, #0
    8252:	0002      	movs	r2, r0
    8254:	1dfb      	adds	r3, r7, #7
    8256:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8258:	230f      	movs	r3, #15
    825a:	18fb      	adds	r3, r7, r3
    825c:	1dfa      	adds	r2, r7, #7
    825e:	7812      	ldrb	r2, [r2, #0]
    8260:	09d2      	lsrs	r2, r2, #7
    8262:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8264:	230e      	movs	r3, #14
    8266:	18fb      	adds	r3, r7, r3
    8268:	1dfa      	adds	r2, r7, #7
    826a:	7812      	ldrb	r2, [r2, #0]
    826c:	0952      	lsrs	r2, r2, #5
    826e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    8270:	4b0d      	ldr	r3, [pc, #52]	; (82a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    8272:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    8274:	230f      	movs	r3, #15
    8276:	18fb      	adds	r3, r7, r3
    8278:	781b      	ldrb	r3, [r3, #0]
    827a:	2b00      	cmp	r3, #0
    827c:	d10f      	bne.n	829e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    827e:	230f      	movs	r3, #15
    8280:	18fb      	adds	r3, r7, r3
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	009b      	lsls	r3, r3, #2
    8286:	2210      	movs	r2, #16
    8288:	4694      	mov	ip, r2
    828a:	44bc      	add	ip, r7
    828c:	4463      	add	r3, ip
    828e:	3b08      	subs	r3, #8
    8290:	681a      	ldr	r2, [r3, #0]
    8292:	230e      	movs	r3, #14
    8294:	18fb      	adds	r3, r7, r3
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	01db      	lsls	r3, r3, #7
    829a:	18d3      	adds	r3, r2, r3
    829c:	e000      	b.n	82a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    829e:	2300      	movs	r3, #0
	}
}
    82a0:	0018      	movs	r0, r3
    82a2:	46bd      	mov	sp, r7
    82a4:	b004      	add	sp, #16
    82a6:	bd80      	pop	{r7, pc}
    82a8:	41004400 	.word	0x41004400

000082ac <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    82ac:	b580      	push	{r7, lr}
    82ae:	b082      	sub	sp, #8
    82b0:	af00      	add	r7, sp, #0
    82b2:	0002      	movs	r2, r0
    82b4:	1dfb      	adds	r3, r7, #7
    82b6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    82b8:	1dfb      	adds	r3, r7, #7
    82ba:	781b      	ldrb	r3, [r3, #0]
    82bc:	0018      	movs	r0, r3
    82be:	4b03      	ldr	r3, [pc, #12]	; (82cc <port_get_group_from_gpio_pin+0x20>)
    82c0:	4798      	blx	r3
    82c2:	0003      	movs	r3, r0
}
    82c4:	0018      	movs	r0, r3
    82c6:	46bd      	mov	sp, r7
    82c8:	b002      	add	sp, #8
    82ca:	bd80      	pop	{r7, pc}
    82cc:	0000824d 	.word	0x0000824d

000082d0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    82d0:	b580      	push	{r7, lr}
    82d2:	b084      	sub	sp, #16
    82d4:	af00      	add	r7, sp, #0
    82d6:	0002      	movs	r2, r0
    82d8:	1dfb      	adds	r3, r7, #7
    82da:	701a      	strb	r2, [r3, #0]
    82dc:	1dbb      	adds	r3, r7, #6
    82de:	1c0a      	adds	r2, r1, #0
    82e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    82e2:	1dfb      	adds	r3, r7, #7
    82e4:	781b      	ldrb	r3, [r3, #0]
    82e6:	0018      	movs	r0, r3
    82e8:	4b0d      	ldr	r3, [pc, #52]	; (8320 <port_pin_set_output_level+0x50>)
    82ea:	4798      	blx	r3
    82ec:	0003      	movs	r3, r0
    82ee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    82f0:	1dfb      	adds	r3, r7, #7
    82f2:	781b      	ldrb	r3, [r3, #0]
    82f4:	221f      	movs	r2, #31
    82f6:	4013      	ands	r3, r2
    82f8:	2201      	movs	r2, #1
    82fa:	409a      	lsls	r2, r3
    82fc:	0013      	movs	r3, r2
    82fe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8300:	1dbb      	adds	r3, r7, #6
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	2b00      	cmp	r3, #0
    8306:	d003      	beq.n	8310 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8308:	68fb      	ldr	r3, [r7, #12]
    830a:	68ba      	ldr	r2, [r7, #8]
    830c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    830e:	e002      	b.n	8316 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8310:	68fb      	ldr	r3, [r7, #12]
    8312:	68ba      	ldr	r2, [r7, #8]
    8314:	615a      	str	r2, [r3, #20]
	}
}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	46bd      	mov	sp, r7
    831a:	b004      	add	sp, #16
    831c:	bd80      	pop	{r7, pc}
    831e:	46c0      	nop			; (mov r8, r8)
    8320:	000082ad 	.word	0x000082ad

00008324 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8324:	b580      	push	{r7, lr}
    8326:	b082      	sub	sp, #8
    8328:	af00      	add	r7, sp, #0
    832a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    832c:	687b      	ldr	r3, [r7, #4]
    832e:	2200      	movs	r2, #0
    8330:	701a      	strb	r2, [r3, #0]
}
    8332:	46c0      	nop			; (mov r8, r8)
    8334:	46bd      	mov	sp, r7
    8336:	b002      	add	sp, #8
    8338:	bd80      	pop	{r7, pc}
    833a:	46c0      	nop			; (mov r8, r8)

0000833c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    833c:	b580      	push	{r7, lr}
    833e:	b082      	sub	sp, #8
    8340:	af00      	add	r7, sp, #0
    8342:	0002      	movs	r2, r0
    8344:	6039      	str	r1, [r7, #0]
    8346:	1dfb      	adds	r3, r7, #7
    8348:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    834a:	1dfb      	adds	r3, r7, #7
    834c:	781b      	ldrb	r3, [r3, #0]
    834e:	2b01      	cmp	r3, #1
    8350:	d00a      	beq.n	8368 <system_apb_clock_set_mask+0x2c>
    8352:	2b02      	cmp	r3, #2
    8354:	d00f      	beq.n	8376 <system_apb_clock_set_mask+0x3a>
    8356:	2b00      	cmp	r3, #0
    8358:	d114      	bne.n	8384 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    835a:	4b0e      	ldr	r3, [pc, #56]	; (8394 <system_apb_clock_set_mask+0x58>)
    835c:	4a0d      	ldr	r2, [pc, #52]	; (8394 <system_apb_clock_set_mask+0x58>)
    835e:	6991      	ldr	r1, [r2, #24]
    8360:	683a      	ldr	r2, [r7, #0]
    8362:	430a      	orrs	r2, r1
    8364:	619a      	str	r2, [r3, #24]
			break;
    8366:	e00f      	b.n	8388 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8368:	4b0a      	ldr	r3, [pc, #40]	; (8394 <system_apb_clock_set_mask+0x58>)
    836a:	4a0a      	ldr	r2, [pc, #40]	; (8394 <system_apb_clock_set_mask+0x58>)
    836c:	69d1      	ldr	r1, [r2, #28]
    836e:	683a      	ldr	r2, [r7, #0]
    8370:	430a      	orrs	r2, r1
    8372:	61da      	str	r2, [r3, #28]
			break;
    8374:	e008      	b.n	8388 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8376:	4b07      	ldr	r3, [pc, #28]	; (8394 <system_apb_clock_set_mask+0x58>)
    8378:	4a06      	ldr	r2, [pc, #24]	; (8394 <system_apb_clock_set_mask+0x58>)
    837a:	6a11      	ldr	r1, [r2, #32]
    837c:	683a      	ldr	r2, [r7, #0]
    837e:	430a      	orrs	r2, r1
    8380:	621a      	str	r2, [r3, #32]
			break;
    8382:	e001      	b.n	8388 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8384:	2317      	movs	r3, #23
    8386:	e000      	b.n	838a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8388:	2300      	movs	r3, #0
}
    838a:	0018      	movs	r0, r3
    838c:	46bd      	mov	sp, r7
    838e:	b002      	add	sp, #8
    8390:	bd80      	pop	{r7, pc}
    8392:	46c0      	nop			; (mov r8, r8)
    8394:	40000400 	.word	0x40000400

00008398 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    8398:	b580      	push	{r7, lr}
    839a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    839c:	4b05      	ldr	r3, [pc, #20]	; (83b4 <system_is_debugger_present+0x1c>)
    839e:	789b      	ldrb	r3, [r3, #2]
    83a0:	b2db      	uxtb	r3, r3
    83a2:	001a      	movs	r2, r3
    83a4:	2302      	movs	r3, #2
    83a6:	4013      	ands	r3, r2
    83a8:	1e5a      	subs	r2, r3, #1
    83aa:	4193      	sbcs	r3, r2
    83ac:	b2db      	uxtb	r3, r3
}
    83ae:	0018      	movs	r0, r3
    83b0:	46bd      	mov	sp, r7
    83b2:	bd80      	pop	{r7, pc}
    83b4:	41002000 	.word	0x41002000

000083b8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    83b8:	b580      	push	{r7, lr}
    83ba:	b084      	sub	sp, #16
    83bc:	af00      	add	r7, sp, #0
    83be:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83c0:	687b      	ldr	r3, [r7, #4]
    83c2:	681b      	ldr	r3, [r3, #0]
    83c4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    83c6:	68fb      	ldr	r3, [r7, #12]
    83c8:	7e1b      	ldrb	r3, [r3, #24]
    83ca:	b2db      	uxtb	r3, r3
    83cc:	001a      	movs	r2, r3
    83ce:	2301      	movs	r3, #1
    83d0:	4013      	ands	r3, r2
    83d2:	1e5a      	subs	r2, r3, #1
    83d4:	4193      	sbcs	r3, r2
    83d6:	b2db      	uxtb	r3, r3
}
    83d8:	0018      	movs	r0, r3
    83da:	46bd      	mov	sp, r7
    83dc:	b004      	add	sp, #16
    83de:	bd80      	pop	{r7, pc}

000083e0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    83e0:	b580      	push	{r7, lr}
    83e2:	b084      	sub	sp, #16
    83e4:	af00      	add	r7, sp, #0
    83e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	681b      	ldr	r3, [r3, #0]
    83ec:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    83ee:	68fb      	ldr	r3, [r7, #12]
    83f0:	7e1b      	ldrb	r3, [r3, #24]
    83f2:	b2db      	uxtb	r3, r3
    83f4:	001a      	movs	r2, r3
    83f6:	2304      	movs	r3, #4
    83f8:	4013      	ands	r3, r2
    83fa:	1e5a      	subs	r2, r3, #1
    83fc:	4193      	sbcs	r3, r2
    83fe:	b2db      	uxtb	r3, r3
}
    8400:	0018      	movs	r0, r3
    8402:	46bd      	mov	sp, r7
    8404:	b004      	add	sp, #16
    8406:	bd80      	pop	{r7, pc}

00008408 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    8408:	b580      	push	{r7, lr}
    840a:	b084      	sub	sp, #16
    840c:	af00      	add	r7, sp, #0
    840e:	6078      	str	r0, [r7, #4]
    8410:	000a      	movs	r2, r1
    8412:	1cbb      	adds	r3, r7, #2
    8414:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8416:	687b      	ldr	r3, [r7, #4]
    8418:	681b      	ldr	r3, [r3, #0]
    841a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    841c:	687b      	ldr	r3, [r7, #4]
    841e:	0018      	movs	r0, r3
    8420:	4b0a      	ldr	r3, [pc, #40]	; (844c <spi_write+0x44>)
    8422:	4798      	blx	r3
    8424:	0003      	movs	r3, r0
    8426:	001a      	movs	r2, r3
    8428:	2301      	movs	r3, #1
    842a:	4053      	eors	r3, r2
    842c:	b2db      	uxtb	r3, r3
    842e:	2b00      	cmp	r3, #0
    8430:	d001      	beq.n	8436 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    8432:	2305      	movs	r3, #5
    8434:	e006      	b.n	8444 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8436:	1cbb      	adds	r3, r7, #2
    8438:	881b      	ldrh	r3, [r3, #0]
    843a:	05db      	lsls	r3, r3, #23
    843c:	0dda      	lsrs	r2, r3, #23
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    8442:	2300      	movs	r3, #0
}
    8444:	0018      	movs	r0, r3
    8446:	46bd      	mov	sp, r7
    8448:	b004      	add	sp, #16
    844a:	bd80      	pop	{r7, pc}
    844c:	000083b9 	.word	0x000083b9

00008450 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    8450:	b580      	push	{r7, lr}
    8452:	b084      	sub	sp, #16
    8454:	af00      	add	r7, sp, #0
    8456:	6078      	str	r0, [r7, #4]
    8458:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    845a:	687b      	ldr	r3, [r7, #4]
    845c:	681b      	ldr	r3, [r3, #0]
    845e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    8460:	687b      	ldr	r3, [r7, #4]
    8462:	0018      	movs	r0, r3
    8464:	4b1b      	ldr	r3, [pc, #108]	; (84d4 <spi_read+0x84>)
    8466:	4798      	blx	r3
    8468:	0003      	movs	r3, r0
    846a:	001a      	movs	r2, r3
    846c:	2301      	movs	r3, #1
    846e:	4053      	eors	r3, r2
    8470:	b2db      	uxtb	r3, r3
    8472:	2b00      	cmp	r3, #0
    8474:	d001      	beq.n	847a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    8476:	2310      	movs	r3, #16
    8478:	e027      	b.n	84ca <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    847a:	230f      	movs	r3, #15
    847c:	18fb      	adds	r3, r7, r3
    847e:	2200      	movs	r2, #0
    8480:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8482:	68bb      	ldr	r3, [r7, #8]
    8484:	8b5b      	ldrh	r3, [r3, #26]
    8486:	b29b      	uxth	r3, r3
    8488:	001a      	movs	r2, r3
    848a:	2304      	movs	r3, #4
    848c:	4013      	ands	r3, r2
    848e:	d006      	beq.n	849e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    8490:	230f      	movs	r3, #15
    8492:	18fb      	adds	r3, r7, r3
    8494:	221e      	movs	r2, #30
    8496:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8498:	68bb      	ldr	r3, [r7, #8]
    849a:	2204      	movs	r2, #4
    849c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    849e:	687b      	ldr	r3, [r7, #4]
    84a0:	799b      	ldrb	r3, [r3, #6]
    84a2:	2b01      	cmp	r3, #1
    84a4:	d108      	bne.n	84b8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    84a6:	68bb      	ldr	r3, [r7, #8]
    84a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84aa:	b29b      	uxth	r3, r3
    84ac:	05db      	lsls	r3, r3, #23
    84ae:	0ddb      	lsrs	r3, r3, #23
    84b0:	b29a      	uxth	r2, r3
    84b2:	683b      	ldr	r3, [r7, #0]
    84b4:	801a      	strh	r2, [r3, #0]
    84b6:	e005      	b.n	84c4 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    84b8:	68bb      	ldr	r3, [r7, #8]
    84ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84bc:	b2db      	uxtb	r3, r3
    84be:	b29a      	uxth	r2, r3
    84c0:	683b      	ldr	r3, [r7, #0]
    84c2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    84c4:	230f      	movs	r3, #15
    84c6:	18fb      	adds	r3, r7, r3
    84c8:	781b      	ldrb	r3, [r3, #0]
}
    84ca:	0018      	movs	r0, r3
    84cc:	46bd      	mov	sp, r7
    84ce:	b004      	add	sp, #16
    84d0:	bd80      	pop	{r7, pc}
    84d2:	46c0      	nop			; (mov r8, r8)
    84d4:	000083e1 	.word	0x000083e1

000084d8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    84d8:	b590      	push	{r4, r7, lr}
    84da:	b093      	sub	sp, #76	; 0x4c
    84dc:	af00      	add	r7, sp, #0
    84de:	6078      	str	r0, [r7, #4]
    84e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    84e2:	687b      	ldr	r3, [r7, #4]
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    84e8:	687b      	ldr	r3, [r7, #4]
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    84ee:	231c      	movs	r3, #28
    84f0:	18fb      	adds	r3, r7, r3
    84f2:	0018      	movs	r0, r3
    84f4:	4b75      	ldr	r3, [pc, #468]	; (86cc <_spi_set_config+0x1f4>)
    84f6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    84f8:	231c      	movs	r3, #28
    84fa:	18fb      	adds	r3, r7, r3
    84fc:	2200      	movs	r2, #0
    84fe:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    8500:	683b      	ldr	r3, [r7, #0]
    8502:	781b      	ldrb	r3, [r3, #0]
    8504:	2b00      	cmp	r3, #0
    8506:	d103      	bne.n	8510 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8508:	231c      	movs	r3, #28
    850a:	18fb      	adds	r3, r7, r3
    850c:	2200      	movs	r2, #0
    850e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    8510:	683b      	ldr	r3, [r7, #0]
    8512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8514:	230c      	movs	r3, #12
    8516:	18fb      	adds	r3, r7, r3
    8518:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    851a:	683b      	ldr	r3, [r7, #0]
    851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    851e:	230c      	movs	r3, #12
    8520:	18fb      	adds	r3, r7, r3
    8522:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    8524:	683b      	ldr	r3, [r7, #0]
    8526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8528:	230c      	movs	r3, #12
    852a:	18fb      	adds	r3, r7, r3
    852c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    852e:	683b      	ldr	r3, [r7, #0]
    8530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8532:	230c      	movs	r3, #12
    8534:	18fb      	adds	r3, r7, r3
    8536:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    8538:	2347      	movs	r3, #71	; 0x47
    853a:	18fb      	adds	r3, r7, r3
    853c:	2200      	movs	r2, #0
    853e:	701a      	strb	r2, [r3, #0]
    8540:	e02c      	b.n	859c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8542:	2347      	movs	r3, #71	; 0x47
    8544:	18fb      	adds	r3, r7, r3
    8546:	781a      	ldrb	r2, [r3, #0]
    8548:	230c      	movs	r3, #12
    854a:	18fb      	adds	r3, r7, r3
    854c:	0092      	lsls	r2, r2, #2
    854e:	58d3      	ldr	r3, [r2, r3]
    8550:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    8552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8554:	2b00      	cmp	r3, #0
    8556:	d109      	bne.n	856c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8558:	2347      	movs	r3, #71	; 0x47
    855a:	18fb      	adds	r3, r7, r3
    855c:	781a      	ldrb	r2, [r3, #0]
    855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8560:	0011      	movs	r1, r2
    8562:	0018      	movs	r0, r3
    8564:	4b5a      	ldr	r3, [pc, #360]	; (86d0 <_spi_set_config+0x1f8>)
    8566:	4798      	blx	r3
    8568:	0003      	movs	r3, r0
    856a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    856c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    856e:	3301      	adds	r3, #1
    8570:	d00d      	beq.n	858e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8574:	b2da      	uxtb	r2, r3
    8576:	231c      	movs	r3, #28
    8578:	18fb      	adds	r3, r7, r3
    857a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    857c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    857e:	0c1b      	lsrs	r3, r3, #16
    8580:	b2db      	uxtb	r3, r3
    8582:	221c      	movs	r2, #28
    8584:	18ba      	adds	r2, r7, r2
    8586:	0011      	movs	r1, r2
    8588:	0018      	movs	r0, r3
    858a:	4b52      	ldr	r3, [pc, #328]	; (86d4 <_spi_set_config+0x1fc>)
    858c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    858e:	2347      	movs	r3, #71	; 0x47
    8590:	18fb      	adds	r3, r7, r3
    8592:	781a      	ldrb	r2, [r3, #0]
    8594:	2347      	movs	r3, #71	; 0x47
    8596:	18fb      	adds	r3, r7, r3
    8598:	3201      	adds	r2, #1
    859a:	701a      	strb	r2, [r3, #0]
    859c:	2347      	movs	r3, #71	; 0x47
    859e:	18fb      	adds	r3, r7, r3
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	2b03      	cmp	r3, #3
    85a4:	d9cd      	bls.n	8542 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    85a6:	683b      	ldr	r3, [r7, #0]
    85a8:	781a      	ldrb	r2, [r3, #0]
    85aa:	687b      	ldr	r3, [r7, #4]
    85ac:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    85ae:	683b      	ldr	r3, [r7, #0]
    85b0:	7c1a      	ldrb	r2, [r3, #16]
    85b2:	687b      	ldr	r3, [r7, #4]
    85b4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    85b6:	683b      	ldr	r3, [r7, #0]
    85b8:	7c9a      	ldrb	r2, [r3, #18]
    85ba:	687b      	ldr	r3, [r7, #4]
    85bc:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    85be:	683b      	ldr	r3, [r7, #0]
    85c0:	7d1a      	ldrb	r2, [r3, #20]
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    85c6:	230a      	movs	r3, #10
    85c8:	18fb      	adds	r3, r7, r3
    85ca:	2200      	movs	r2, #0
    85cc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    85ce:	2300      	movs	r3, #0
    85d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    85d2:	2300      	movs	r3, #0
    85d4:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    85d6:	683b      	ldr	r3, [r7, #0]
    85d8:	781b      	ldrb	r3, [r3, #0]
    85da:	2b01      	cmp	r3, #1
    85dc:	d129      	bne.n	8632 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    85de:	687b      	ldr	r3, [r7, #4]
    85e0:	681b      	ldr	r3, [r3, #0]
    85e2:	0018      	movs	r0, r3
    85e4:	4b3c      	ldr	r3, [pc, #240]	; (86d8 <_spi_set_config+0x200>)
    85e6:	4798      	blx	r3
    85e8:	0003      	movs	r3, r0
    85ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    85ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85ee:	3314      	adds	r3, #20
    85f0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    85f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    85f4:	b2db      	uxtb	r3, r3
    85f6:	0018      	movs	r0, r3
    85f8:	4b38      	ldr	r3, [pc, #224]	; (86dc <_spi_set_config+0x204>)
    85fa:	4798      	blx	r3
    85fc:	0003      	movs	r3, r0
    85fe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    8600:	683b      	ldr	r3, [r7, #0]
    8602:	699b      	ldr	r3, [r3, #24]
    8604:	2223      	movs	r2, #35	; 0x23
    8606:	18bc      	adds	r4, r7, r2
    8608:	220a      	movs	r2, #10
    860a:	18ba      	adds	r2, r7, r2
    860c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    860e:	0018      	movs	r0, r3
    8610:	4b33      	ldr	r3, [pc, #204]	; (86e0 <_spi_set_config+0x208>)
    8612:	4798      	blx	r3
    8614:	0003      	movs	r3, r0
    8616:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    8618:	2323      	movs	r3, #35	; 0x23
    861a:	18fb      	adds	r3, r7, r3
    861c:	781b      	ldrb	r3, [r3, #0]
    861e:	2b00      	cmp	r3, #0
    8620:	d001      	beq.n	8626 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    8622:	2317      	movs	r3, #23
    8624:	e04e      	b.n	86c4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    8626:	230a      	movs	r3, #10
    8628:	18fb      	adds	r3, r7, r3
    862a:	881b      	ldrh	r3, [r3, #0]
    862c:	b2da      	uxtb	r2, r3
    862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8630:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    8632:	683b      	ldr	r3, [r7, #0]
    8634:	685b      	ldr	r3, [r3, #4]
    8636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8638:	4313      	orrs	r3, r2
    863a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    863c:	683b      	ldr	r3, [r7, #0]
    863e:	689b      	ldr	r3, [r3, #8]
    8640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8642:	4313      	orrs	r3, r2
    8644:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	68db      	ldr	r3, [r3, #12]
    864a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    864c:	4313      	orrs	r3, r2
    864e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    8650:	683b      	ldr	r3, [r7, #0]
    8652:	7c1b      	ldrb	r3, [r3, #16]
    8654:	001a      	movs	r2, r3
    8656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8658:	4313      	orrs	r3, r2
    865a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    865c:	683b      	ldr	r3, [r7, #0]
    865e:	7c5b      	ldrb	r3, [r3, #17]
    8660:	2b00      	cmp	r3, #0
    8662:	d103      	bne.n	866c <_spi_set_config+0x194>
    8664:	4b1f      	ldr	r3, [pc, #124]	; (86e4 <_spi_set_config+0x20c>)
    8666:	4798      	blx	r3
    8668:	1e03      	subs	r3, r0, #0
    866a:	d003      	beq.n	8674 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    866c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    866e:	2280      	movs	r2, #128	; 0x80
    8670:	4313      	orrs	r3, r2
    8672:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    8674:	683b      	ldr	r3, [r7, #0]
    8676:	7c9b      	ldrb	r3, [r3, #18]
    8678:	2b00      	cmp	r3, #0
    867a:	d004      	beq.n	8686 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    867e:	2280      	movs	r2, #128	; 0x80
    8680:	0292      	lsls	r2, r2, #10
    8682:	4313      	orrs	r3, r2
    8684:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    8686:	683b      	ldr	r3, [r7, #0]
    8688:	7cdb      	ldrb	r3, [r3, #19]
    868a:	2b00      	cmp	r3, #0
    868c:	d004      	beq.n	8698 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8690:	2280      	movs	r2, #128	; 0x80
    8692:	0092      	lsls	r2, r2, #2
    8694:	4313      	orrs	r3, r2
    8696:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    8698:	683b      	ldr	r3, [r7, #0]
    869a:	7d1b      	ldrb	r3, [r3, #20]
    869c:	2b00      	cmp	r3, #0
    869e:	d004      	beq.n	86aa <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    86a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86a2:	2280      	movs	r2, #128	; 0x80
    86a4:	0192      	lsls	r2, r2, #6
    86a6:	4313      	orrs	r3, r2
    86a8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    86aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    86ac:	681a      	ldr	r2, [r3, #0]
    86ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    86b0:	431a      	orrs	r2, r3
    86b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    86b4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    86b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    86b8:	685a      	ldr	r2, [r3, #4]
    86ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86bc:	431a      	orrs	r2, r3
    86be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    86c0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    86c2:	2300      	movs	r3, #0
}
    86c4:	0018      	movs	r0, r3
    86c6:	46bd      	mov	sp, r7
    86c8:	b013      	add	sp, #76	; 0x4c
    86ca:	bd90      	pop	{r4, r7, pc}
    86cc:	00008225 	.word	0x00008225
    86d0:	00007ebd 	.word	0x00007ebd
    86d4:	0000a789 	.word	0x0000a789
    86d8:	00008079 	.word	0x00008079
    86dc:	0000a5c1 	.word	0x0000a5c1
    86e0:	00007bc9 	.word	0x00007bc9
    86e4:	00008399 	.word	0x00008399

000086e8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    86e8:	b590      	push	{r4, r7, lr}
    86ea:	b08b      	sub	sp, #44	; 0x2c
    86ec:	af00      	add	r7, sp, #0
    86ee:	60f8      	str	r0, [r7, #12]
    86f0:	60b9      	str	r1, [r7, #8]
    86f2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    86f4:	68fb      	ldr	r3, [r7, #12]
    86f6:	68ba      	ldr	r2, [r7, #8]
    86f8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    86fa:	68fb      	ldr	r3, [r7, #12]
    86fc:	681b      	ldr	r3, [r3, #0]
    86fe:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8700:	6a3b      	ldr	r3, [r7, #32]
    8702:	681b      	ldr	r3, [r3, #0]
    8704:	2202      	movs	r2, #2
    8706:	4013      	ands	r3, r2
    8708:	d001      	beq.n	870e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    870a:	231c      	movs	r3, #28
    870c:	e09c      	b.n	8848 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    870e:	6a3b      	ldr	r3, [r7, #32]
    8710:	681b      	ldr	r3, [r3, #0]
    8712:	2201      	movs	r2, #1
    8714:	4013      	ands	r3, r2
    8716:	d001      	beq.n	871c <spi_init+0x34>
		return STATUS_BUSY;
    8718:	2305      	movs	r3, #5
    871a:	e095      	b.n	8848 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    871c:	68fb      	ldr	r3, [r7, #12]
    871e:	681b      	ldr	r3, [r3, #0]
    8720:	0018      	movs	r0, r3
    8722:	4b4b      	ldr	r3, [pc, #300]	; (8850 <spi_init+0x168>)
    8724:	4798      	blx	r3
    8726:	0003      	movs	r3, r0
    8728:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    872a:	69fb      	ldr	r3, [r7, #28]
    872c:	3302      	adds	r3, #2
    872e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8730:	69fb      	ldr	r3, [r7, #28]
    8732:	3314      	adds	r3, #20
    8734:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8736:	2201      	movs	r2, #1
    8738:	69bb      	ldr	r3, [r7, #24]
    873a:	409a      	lsls	r2, r3
    873c:	0013      	movs	r3, r2
    873e:	0019      	movs	r1, r3
    8740:	2002      	movs	r0, #2
    8742:	4b44      	ldr	r3, [pc, #272]	; (8854 <spi_init+0x16c>)
    8744:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8746:	2310      	movs	r3, #16
    8748:	18fb      	adds	r3, r7, r3
    874a:	0018      	movs	r0, r3
    874c:	4b42      	ldr	r3, [pc, #264]	; (8858 <spi_init+0x170>)
    874e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    8750:	687b      	ldr	r3, [r7, #4]
    8752:	2224      	movs	r2, #36	; 0x24
    8754:	5c9a      	ldrb	r2, [r3, r2]
    8756:	2310      	movs	r3, #16
    8758:	18fb      	adds	r3, r7, r3
    875a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    875c:	697b      	ldr	r3, [r7, #20]
    875e:	b2db      	uxtb	r3, r3
    8760:	2210      	movs	r2, #16
    8762:	18ba      	adds	r2, r7, r2
    8764:	0011      	movs	r1, r2
    8766:	0018      	movs	r0, r3
    8768:	4b3c      	ldr	r3, [pc, #240]	; (885c <spi_init+0x174>)
    876a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    876c:	697b      	ldr	r3, [r7, #20]
    876e:	b2db      	uxtb	r3, r3
    8770:	0018      	movs	r0, r3
    8772:	4b3b      	ldr	r3, [pc, #236]	; (8860 <spi_init+0x178>)
    8774:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8776:	687b      	ldr	r3, [r7, #4]
    8778:	2224      	movs	r2, #36	; 0x24
    877a:	5c9b      	ldrb	r3, [r3, r2]
    877c:	2100      	movs	r1, #0
    877e:	0018      	movs	r0, r3
    8780:	4b38      	ldr	r3, [pc, #224]	; (8864 <spi_init+0x17c>)
    8782:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    8784:	687b      	ldr	r3, [r7, #4]
    8786:	781b      	ldrb	r3, [r3, #0]
    8788:	2b01      	cmp	r3, #1
    878a:	d105      	bne.n	8798 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    878c:	6a3b      	ldr	r3, [r7, #32]
    878e:	681b      	ldr	r3, [r3, #0]
    8790:	220c      	movs	r2, #12
    8792:	431a      	orrs	r2, r3
    8794:	6a3b      	ldr	r3, [r7, #32]
    8796:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8798:	2327      	movs	r3, #39	; 0x27
    879a:	18fb      	adds	r3, r7, r3
    879c:	2200      	movs	r2, #0
    879e:	701a      	strb	r2, [r3, #0]
    87a0:	e010      	b.n	87c4 <spi_init+0xdc>
		module->callback[i]        = NULL;
    87a2:	2327      	movs	r3, #39	; 0x27
    87a4:	18fb      	adds	r3, r7, r3
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	68fa      	ldr	r2, [r7, #12]
    87aa:	3302      	adds	r3, #2
    87ac:	009b      	lsls	r3, r3, #2
    87ae:	18d3      	adds	r3, r2, r3
    87b0:	3304      	adds	r3, #4
    87b2:	2200      	movs	r2, #0
    87b4:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    87b6:	2327      	movs	r3, #39	; 0x27
    87b8:	18fb      	adds	r3, r7, r3
    87ba:	781a      	ldrb	r2, [r3, #0]
    87bc:	2327      	movs	r3, #39	; 0x27
    87be:	18fb      	adds	r3, r7, r3
    87c0:	3201      	adds	r2, #1
    87c2:	701a      	strb	r2, [r3, #0]
    87c4:	2327      	movs	r3, #39	; 0x27
    87c6:	18fb      	adds	r3, r7, r3
    87c8:	781b      	ldrb	r3, [r3, #0]
    87ca:	2b06      	cmp	r3, #6
    87cc:	d9e9      	bls.n	87a2 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    87ce:	68fb      	ldr	r3, [r7, #12]
    87d0:	2200      	movs	r2, #0
    87d2:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    87d4:	68fb      	ldr	r3, [r7, #12]
    87d6:	2200      	movs	r2, #0
    87d8:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    87da:	68fb      	ldr	r3, [r7, #12]
    87dc:	2200      	movs	r2, #0
    87de:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    87e0:	68fb      	ldr	r3, [r7, #12]
    87e2:	2200      	movs	r2, #0
    87e4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    87e6:	68fb      	ldr	r3, [r7, #12]
    87e8:	2236      	movs	r2, #54	; 0x36
    87ea:	2100      	movs	r1, #0
    87ec:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	2237      	movs	r2, #55	; 0x37
    87f2:	2100      	movs	r1, #0
    87f4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    87f6:	68fb      	ldr	r3, [r7, #12]
    87f8:	2238      	movs	r2, #56	; 0x38
    87fa:	2100      	movs	r1, #0
    87fc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    87fe:	68fb      	ldr	r3, [r7, #12]
    8800:	2203      	movs	r2, #3
    8802:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    8804:	68fb      	ldr	r3, [r7, #12]
    8806:	2200      	movs	r2, #0
    8808:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    880a:	68fb      	ldr	r3, [r7, #12]
    880c:	681b      	ldr	r3, [r3, #0]
    880e:	2213      	movs	r2, #19
    8810:	18bc      	adds	r4, r7, r2
    8812:	0018      	movs	r0, r3
    8814:	4b0e      	ldr	r3, [pc, #56]	; (8850 <spi_init+0x168>)
    8816:	4798      	blx	r3
    8818:	0003      	movs	r3, r0
    881a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    881c:	4a12      	ldr	r2, [pc, #72]	; (8868 <spi_init+0x180>)
    881e:	2313      	movs	r3, #19
    8820:	18fb      	adds	r3, r7, r3
    8822:	781b      	ldrb	r3, [r3, #0]
    8824:	0011      	movs	r1, r2
    8826:	0018      	movs	r0, r3
    8828:	4b10      	ldr	r3, [pc, #64]	; (886c <spi_init+0x184>)
    882a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    882c:	2313      	movs	r3, #19
    882e:	18fb      	adds	r3, r7, r3
    8830:	781a      	ldrb	r2, [r3, #0]
    8832:	4b0f      	ldr	r3, [pc, #60]	; (8870 <spi_init+0x188>)
    8834:	0092      	lsls	r2, r2, #2
    8836:	68f9      	ldr	r1, [r7, #12]
    8838:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    883a:	687a      	ldr	r2, [r7, #4]
    883c:	68fb      	ldr	r3, [r7, #12]
    883e:	0011      	movs	r1, r2
    8840:	0018      	movs	r0, r3
    8842:	4b0c      	ldr	r3, [pc, #48]	; (8874 <spi_init+0x18c>)
    8844:	4798      	blx	r3
    8846:	0003      	movs	r3, r0
}
    8848:	0018      	movs	r0, r3
    884a:	46bd      	mov	sp, r7
    884c:	b00b      	add	sp, #44	; 0x2c
    884e:	bd90      	pop	{r4, r7, pc}
    8850:	00008079 	.word	0x00008079
    8854:	0000833d 	.word	0x0000833d
    8858:	00008325 	.word	0x00008325
    885c:	0000a49d 	.word	0x0000a49d
    8860:	0000a4e1 	.word	0x0000a4e1
    8864:	00007e31 	.word	0x00007e31
    8868:	00008ac1 	.word	0x00008ac1
    886c:	000080dd 	.word	0x000080dd
    8870:	200045b0 	.word	0x200045b0
    8874:	000084d9 	.word	0x000084d9

00008878 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8878:	b580      	push	{r7, lr}
    887a:	b086      	sub	sp, #24
    887c:	af00      	add	r7, sp, #0
    887e:	60f8      	str	r0, [r7, #12]
    8880:	60b9      	str	r1, [r7, #8]
    8882:	1dfb      	adds	r3, r7, #7
    8884:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    8886:	68fb      	ldr	r3, [r7, #12]
    8888:	795b      	ldrb	r3, [r3, #5]
    888a:	2b01      	cmp	r3, #1
    888c:	d001      	beq.n	8892 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    888e:	2315      	movs	r3, #21
    8890:	e05c      	b.n	894c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    8892:	68fb      	ldr	r3, [r7, #12]
    8894:	7a1b      	ldrb	r3, [r3, #8]
    8896:	2201      	movs	r2, #1
    8898:	4053      	eors	r3, r2
    889a:	b2db      	uxtb	r3, r3
    889c:	2b00      	cmp	r3, #0
    889e:	d054      	beq.n	894a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    88a0:	1dfb      	adds	r3, r7, #7
    88a2:	781b      	ldrb	r3, [r3, #0]
    88a4:	2b00      	cmp	r3, #0
    88a6:	d04a      	beq.n	893e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    88a8:	68bb      	ldr	r3, [r7, #8]
    88aa:	785b      	ldrb	r3, [r3, #1]
    88ac:	2b00      	cmp	r3, #0
    88ae:	d03f      	beq.n	8930 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    88b0:	68fb      	ldr	r3, [r7, #12]
    88b2:	0018      	movs	r0, r3
    88b4:	4b27      	ldr	r3, [pc, #156]	; (8954 <spi_select_slave+0xdc>)
    88b6:	4798      	blx	r3
    88b8:	0003      	movs	r3, r0
    88ba:	001a      	movs	r2, r3
    88bc:	2301      	movs	r3, #1
    88be:	4053      	eors	r3, r2
    88c0:	b2db      	uxtb	r3, r3
    88c2:	2b00      	cmp	r3, #0
    88c4:	d007      	beq.n	88d6 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    88c6:	68bb      	ldr	r3, [r7, #8]
    88c8:	781b      	ldrb	r3, [r3, #0]
    88ca:	2101      	movs	r1, #1
    88cc:	0018      	movs	r0, r3
    88ce:	4b22      	ldr	r3, [pc, #136]	; (8958 <spi_select_slave+0xe0>)
    88d0:	4798      	blx	r3
					return STATUS_BUSY;
    88d2:	2305      	movs	r3, #5
    88d4:	e03a      	b.n	894c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    88d6:	68bb      	ldr	r3, [r7, #8]
    88d8:	781b      	ldrb	r3, [r3, #0]
    88da:	2100      	movs	r1, #0
    88dc:	0018      	movs	r0, r3
    88de:	4b1e      	ldr	r3, [pc, #120]	; (8958 <spi_select_slave+0xe0>)
    88e0:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    88e2:	68bb      	ldr	r3, [r7, #8]
    88e4:	789b      	ldrb	r3, [r3, #2]
    88e6:	b29a      	uxth	r2, r3
    88e8:	68fb      	ldr	r3, [r7, #12]
    88ea:	0011      	movs	r1, r2
    88ec:	0018      	movs	r0, r3
    88ee:	4b1b      	ldr	r3, [pc, #108]	; (895c <spi_select_slave+0xe4>)
    88f0:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    88f2:	68fb      	ldr	r3, [r7, #12]
    88f4:	79db      	ldrb	r3, [r3, #7]
    88f6:	2201      	movs	r2, #1
    88f8:	4053      	eors	r3, r2
    88fa:	b2db      	uxtb	r3, r3
    88fc:	2b00      	cmp	r3, #0
    88fe:	d024      	beq.n	894a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    8900:	46c0      	nop			; (mov r8, r8)
    8902:	68fb      	ldr	r3, [r7, #12]
    8904:	0018      	movs	r0, r3
    8906:	4b16      	ldr	r3, [pc, #88]	; (8960 <spi_select_slave+0xe8>)
    8908:	4798      	blx	r3
    890a:	0003      	movs	r3, r0
    890c:	001a      	movs	r2, r3
    890e:	2301      	movs	r3, #1
    8910:	4053      	eors	r3, r2
    8912:	b2db      	uxtb	r3, r3
    8914:	2b00      	cmp	r3, #0
    8916:	d1f4      	bne.n	8902 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    8918:	2316      	movs	r3, #22
    891a:	18fb      	adds	r3, r7, r3
    891c:	2200      	movs	r2, #0
    891e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    8920:	2316      	movs	r3, #22
    8922:	18fa      	adds	r2, r7, r3
    8924:	68fb      	ldr	r3, [r7, #12]
    8926:	0011      	movs	r1, r2
    8928:	0018      	movs	r0, r3
    892a:	4b0e      	ldr	r3, [pc, #56]	; (8964 <spi_select_slave+0xec>)
    892c:	4798      	blx	r3
    892e:	e00c      	b.n	894a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	781b      	ldrb	r3, [r3, #0]
    8934:	2100      	movs	r1, #0
    8936:	0018      	movs	r0, r3
    8938:	4b07      	ldr	r3, [pc, #28]	; (8958 <spi_select_slave+0xe0>)
    893a:	4798      	blx	r3
    893c:	e005      	b.n	894a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    893e:	68bb      	ldr	r3, [r7, #8]
    8940:	781b      	ldrb	r3, [r3, #0]
    8942:	2101      	movs	r1, #1
    8944:	0018      	movs	r0, r3
    8946:	4b04      	ldr	r3, [pc, #16]	; (8958 <spi_select_slave+0xe0>)
    8948:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    894a:	2300      	movs	r3, #0
}
    894c:	0018      	movs	r0, r3
    894e:	46bd      	mov	sp, r7
    8950:	b006      	add	sp, #24
    8952:	bd80      	pop	{r7, pc}
    8954:	000083b9 	.word	0x000083b9
    8958:	000082d1 	.word	0x000082d1
    895c:	00008409 	.word	0x00008409
    8960:	000083e1 	.word	0x000083e1
    8964:	00008451 	.word	0x00008451

00008968 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    8968:	b580      	push	{r7, lr}
    896a:	b084      	sub	sp, #16
    896c:	af00      	add	r7, sp, #0
    896e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8970:	687b      	ldr	r3, [r7, #4]
    8972:	681b      	ldr	r3, [r3, #0]
    8974:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8976:	687b      	ldr	r3, [r7, #4]
    8978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    897a:	781b      	ldrb	r3, [r3, #0]
    897c:	b2da      	uxtb	r2, r3
    897e:	230e      	movs	r3, #14
    8980:	18fb      	adds	r3, r7, r3
    8982:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    8984:	687b      	ldr	r3, [r7, #4]
    8986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8988:	1c5a      	adds	r2, r3, #1
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    898e:	687b      	ldr	r3, [r7, #4]
    8990:	799b      	ldrb	r3, [r3, #6]
    8992:	2b01      	cmp	r3, #1
    8994:	d113      	bne.n	89be <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8996:	687b      	ldr	r3, [r7, #4]
    8998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    899a:	781b      	ldrb	r3, [r3, #0]
    899c:	b2db      	uxtb	r3, r3
    899e:	021b      	lsls	r3, r3, #8
    89a0:	b21a      	sxth	r2, r3
    89a2:	230e      	movs	r3, #14
    89a4:	18fb      	adds	r3, r7, r3
    89a6:	2100      	movs	r1, #0
    89a8:	5e5b      	ldrsh	r3, [r3, r1]
    89aa:	4313      	orrs	r3, r2
    89ac:	b21a      	sxth	r2, r3
    89ae:	230e      	movs	r3, #14
    89b0:	18fb      	adds	r3, r7, r3
    89b2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    89b8:	1c5a      	adds	r2, r3, #1
    89ba:	687b      	ldr	r3, [r7, #4]
    89bc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    89be:	230e      	movs	r3, #14
    89c0:	18fb      	adds	r3, r7, r3
    89c2:	881b      	ldrh	r3, [r3, #0]
    89c4:	05db      	lsls	r3, r3, #23
    89c6:	0dda      	lsrs	r2, r3, #23
    89c8:	68bb      	ldr	r3, [r7, #8]
    89ca:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    89d0:	b29b      	uxth	r3, r3
    89d2:	3b01      	subs	r3, #1
    89d4:	b29a      	uxth	r2, r3
    89d6:	687b      	ldr	r3, [r7, #4]
    89d8:	869a      	strh	r2, [r3, #52]	; 0x34
}
    89da:	46c0      	nop			; (mov r8, r8)
    89dc:	46bd      	mov	sp, r7
    89de:	b004      	add	sp, #16
    89e0:	bd80      	pop	{r7, pc}
    89e2:	46c0      	nop			; (mov r8, r8)

000089e4 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    89e4:	b580      	push	{r7, lr}
    89e6:	b084      	sub	sp, #16
    89e8:	af00      	add	r7, sp, #0
    89ea:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	681b      	ldr	r3, [r3, #0]
    89f0:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    89f2:	4b08      	ldr	r3, [pc, #32]	; (8a14 <_spi_write_dummy+0x30>)
    89f4:	881b      	ldrh	r3, [r3, #0]
    89f6:	001a      	movs	r2, r3
    89f8:	68fb      	ldr	r3, [r7, #12]
    89fa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    89fc:	687b      	ldr	r3, [r7, #4]
    89fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8a00:	b29b      	uxth	r3, r3
    8a02:	3b01      	subs	r3, #1
    8a04:	b29a      	uxth	r2, r3
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8a0a:	46c0      	nop			; (mov r8, r8)
    8a0c:	46bd      	mov	sp, r7
    8a0e:	b004      	add	sp, #16
    8a10:	bd80      	pop	{r7, pc}
    8a12:	46c0      	nop			; (mov r8, r8)
    8a14:	200045c8 	.word	0x200045c8

00008a18 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    8a18:	b580      	push	{r7, lr}
    8a1a:	b084      	sub	sp, #16
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8a20:	687b      	ldr	r3, [r7, #4]
    8a22:	681b      	ldr	r3, [r3, #0]
    8a24:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8a26:	230a      	movs	r3, #10
    8a28:	18fb      	adds	r3, r7, r3
    8a2a:	2200      	movs	r2, #0
    8a2c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    8a2e:	68fb      	ldr	r3, [r7, #12]
    8a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8a32:	230a      	movs	r3, #10
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8a38:	687b      	ldr	r3, [r7, #4]
    8a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8a3c:	b29b      	uxth	r3, r3
    8a3e:	3b01      	subs	r3, #1
    8a40:	b29a      	uxth	r2, r3
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8a46:	46c0      	nop			; (mov r8, r8)
    8a48:	46bd      	mov	sp, r7
    8a4a:	b004      	add	sp, #16
    8a4c:	bd80      	pop	{r7, pc}
    8a4e:	46c0      	nop			; (mov r8, r8)

00008a50 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    8a50:	b580      	push	{r7, lr}
    8a52:	b084      	sub	sp, #16
    8a54:	af00      	add	r7, sp, #0
    8a56:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8a58:	687b      	ldr	r3, [r7, #4]
    8a5a:	681b      	ldr	r3, [r3, #0]
    8a5c:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    8a5e:	68fb      	ldr	r3, [r7, #12]
    8a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a62:	b29a      	uxth	r2, r3
    8a64:	230a      	movs	r3, #10
    8a66:	18fb      	adds	r3, r7, r3
    8a68:	05d2      	lsls	r2, r2, #23
    8a6a:	0dd2      	lsrs	r2, r2, #23
    8a6c:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a72:	220a      	movs	r2, #10
    8a74:	18ba      	adds	r2, r7, r2
    8a76:	8812      	ldrh	r2, [r2, #0]
    8a78:	b2d2      	uxtb	r2, r2
    8a7a:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    8a7c:	687b      	ldr	r3, [r7, #4]
    8a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a80:	1c5a      	adds	r2, r3, #1
    8a82:	687b      	ldr	r3, [r7, #4]
    8a84:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8a86:	687b      	ldr	r3, [r7, #4]
    8a88:	799b      	ldrb	r3, [r3, #6]
    8a8a:	2b01      	cmp	r3, #1
    8a8c:	d10d      	bne.n	8aaa <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8a92:	220a      	movs	r2, #10
    8a94:	18ba      	adds	r2, r7, r2
    8a96:	8812      	ldrh	r2, [r2, #0]
    8a98:	0a12      	lsrs	r2, r2, #8
    8a9a:	b292      	uxth	r2, r2
    8a9c:	b2d2      	uxtb	r2, r2
    8a9e:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8aa4:	1c5a      	adds	r2, r3, #1
    8aa6:	687b      	ldr	r3, [r7, #4]
    8aa8:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    8aaa:	687b      	ldr	r3, [r7, #4]
    8aac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8aae:	b29b      	uxth	r3, r3
    8ab0:	3b01      	subs	r3, #1
    8ab2:	b29a      	uxth	r2, r3
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8ab8:	46c0      	nop			; (mov r8, r8)
    8aba:	46bd      	mov	sp, r7
    8abc:	b004      	add	sp, #16
    8abe:	bd80      	pop	{r7, pc}

00008ac0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    8ac0:	b580      	push	{r7, lr}
    8ac2:	b086      	sub	sp, #24
    8ac4:	af00      	add	r7, sp, #0
    8ac6:	0002      	movs	r2, r0
    8ac8:	1dfb      	adds	r3, r7, #7
    8aca:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    8acc:	1dfb      	adds	r3, r7, #7
    8ace:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    8ad0:	4b96      	ldr	r3, [pc, #600]	; (8d2c <_spi_interrupt_handler+0x26c>)
    8ad2:	0092      	lsls	r2, r2, #2
    8ad4:	58d3      	ldr	r3, [r2, r3]
    8ad6:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8ad8:	697b      	ldr	r3, [r7, #20]
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    8ade:	697b      	ldr	r3, [r7, #20]
    8ae0:	2237      	movs	r2, #55	; 0x37
    8ae2:	5c9a      	ldrb	r2, [r3, r2]
    8ae4:	697b      	ldr	r3, [r7, #20]
    8ae6:	2136      	movs	r1, #54	; 0x36
    8ae8:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    8aea:	230f      	movs	r3, #15
    8aec:	18fb      	adds	r3, r7, r3
    8aee:	400a      	ands	r2, r1
    8af0:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8af2:	693b      	ldr	r3, [r7, #16]
    8af4:	7e1b      	ldrb	r3, [r3, #24]
    8af6:	b2da      	uxtb	r2, r3
    8af8:	230c      	movs	r3, #12
    8afa:	18fb      	adds	r3, r7, r3
    8afc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    8afe:	693b      	ldr	r3, [r7, #16]
    8b00:	7d9b      	ldrb	r3, [r3, #22]
    8b02:	b2db      	uxtb	r3, r3
    8b04:	b29a      	uxth	r2, r3
    8b06:	230c      	movs	r3, #12
    8b08:	18fb      	adds	r3, r7, r3
    8b0a:	210c      	movs	r1, #12
    8b0c:	1879      	adds	r1, r7, r1
    8b0e:	8809      	ldrh	r1, [r1, #0]
    8b10:	400a      	ands	r2, r1
    8b12:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    8b14:	230c      	movs	r3, #12
    8b16:	18fb      	adds	r3, r7, r3
    8b18:	881b      	ldrh	r3, [r3, #0]
    8b1a:	2201      	movs	r2, #1
    8b1c:	4013      	ands	r3, r2
    8b1e:	d038      	beq.n	8b92 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8b20:	697b      	ldr	r3, [r7, #20]
    8b22:	795b      	ldrb	r3, [r3, #5]
    8b24:	2b01      	cmp	r3, #1
    8b26:	d110      	bne.n	8b4a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    8b28:	697b      	ldr	r3, [r7, #20]
    8b2a:	7a5b      	ldrb	r3, [r3, #9]
    8b2c:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d10b      	bne.n	8b4a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    8b32:	697b      	ldr	r3, [r7, #20]
    8b34:	0018      	movs	r0, r3
    8b36:	4b7e      	ldr	r3, [pc, #504]	; (8d30 <_spi_interrupt_handler+0x270>)
    8b38:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    8b3a:	697b      	ldr	r3, [r7, #20]
    8b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8b3e:	b29b      	uxth	r3, r3
    8b40:	2b00      	cmp	r3, #0
    8b42:	d102      	bne.n	8b4a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8b44:	693b      	ldr	r3, [r7, #16]
    8b46:	2201      	movs	r2, #1
    8b48:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8b4a:	697b      	ldr	r3, [r7, #20]
    8b4c:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    8b4e:	2b01      	cmp	r3, #1
    8b50:	d11f      	bne.n	8b92 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    8b52:	697b      	ldr	r3, [r7, #20]
    8b54:	7a5b      	ldrb	r3, [r3, #9]
    8b56:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8b58:	2b00      	cmp	r3, #0
    8b5a:	d01a      	beq.n	8b92 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    8b5c:	697b      	ldr	r3, [r7, #20]
    8b5e:	0018      	movs	r0, r3
    8b60:	4b74      	ldr	r3, [pc, #464]	; (8d34 <_spi_interrupt_handler+0x274>)
    8b62:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8b64:	697b      	ldr	r3, [r7, #20]
    8b66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8b68:	b29b      	uxth	r3, r3
    8b6a:	2b00      	cmp	r3, #0
    8b6c:	d111      	bne.n	8b92 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8b6e:	693b      	ldr	r3, [r7, #16]
    8b70:	2201      	movs	r2, #1
    8b72:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8b74:	697b      	ldr	r3, [r7, #20]
    8b76:	7a5b      	ldrb	r3, [r3, #9]
    8b78:	b2db      	uxtb	r3, r3
    8b7a:	2b01      	cmp	r3, #1
    8b7c:	d109      	bne.n	8b92 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    8b7e:	697b      	ldr	r3, [r7, #20]
    8b80:	79db      	ldrb	r3, [r3, #7]
    8b82:	2201      	movs	r2, #1
    8b84:	4053      	eors	r3, r2
    8b86:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    8b88:	2b00      	cmp	r3, #0
    8b8a:	d002      	beq.n	8b92 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8b8c:	693b      	ldr	r3, [r7, #16]
    8b8e:	2202      	movs	r2, #2
    8b90:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8b92:	230c      	movs	r3, #12
    8b94:	18fb      	adds	r3, r7, r3
    8b96:	881b      	ldrh	r3, [r3, #0]
    8b98:	2204      	movs	r2, #4
    8b9a:	4013      	ands	r3, r2
    8b9c:	d100      	bne.n	8ba0 <_spi_interrupt_handler+0xe0>
    8b9e:	e07e      	b.n	8c9e <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8ba0:	693b      	ldr	r3, [r7, #16]
    8ba2:	8b5b      	ldrh	r3, [r3, #26]
    8ba4:	b29b      	uxth	r3, r3
    8ba6:	001a      	movs	r2, r3
    8ba8:	2304      	movs	r3, #4
    8baa:	4013      	ands	r3, r2
    8bac:	d022      	beq.n	8bf4 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    8bae:	697b      	ldr	r3, [r7, #20]
    8bb0:	7a5b      	ldrb	r3, [r3, #9]
    8bb2:	b2db      	uxtb	r3, r3
    8bb4:	2b01      	cmp	r3, #1
    8bb6:	d014      	beq.n	8be2 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    8bb8:	697b      	ldr	r3, [r7, #20]
    8bba:	2238      	movs	r2, #56	; 0x38
    8bbc:	211e      	movs	r1, #30
    8bbe:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    8bc0:	697b      	ldr	r3, [r7, #20]
    8bc2:	2203      	movs	r2, #3
    8bc4:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    8bc6:	693b      	ldr	r3, [r7, #16]
    8bc8:	2205      	movs	r2, #5
    8bca:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    8bcc:	230f      	movs	r3, #15
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	781b      	ldrb	r3, [r3, #0]
    8bd2:	2208      	movs	r2, #8
    8bd4:	4013      	ands	r3, r2
    8bd6:	d004      	beq.n	8be2 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    8bd8:	697b      	ldr	r3, [r7, #20]
    8bda:	699b      	ldr	r3, [r3, #24]
    8bdc:	697a      	ldr	r2, [r7, #20]
    8bde:	0010      	movs	r0, r2
    8be0:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    8be2:	693b      	ldr	r3, [r7, #16]
    8be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8be6:	230a      	movs	r3, #10
    8be8:	18fb      	adds	r3, r7, r3
    8bea:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8bec:	693b      	ldr	r3, [r7, #16]
    8bee:	2204      	movs	r2, #4
    8bf0:	835a      	strh	r2, [r3, #26]
    8bf2:	e054      	b.n	8c9e <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    8bf4:	697b      	ldr	r3, [r7, #20]
    8bf6:	7a5b      	ldrb	r3, [r3, #9]
    8bf8:	b2db      	uxtb	r3, r3
    8bfa:	2b01      	cmp	r3, #1
    8bfc:	d11e      	bne.n	8c3c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    8bfe:	697b      	ldr	r3, [r7, #20]
    8c00:	0018      	movs	r0, r3
    8c02:	4b4d      	ldr	r3, [pc, #308]	; (8d38 <_spi_interrupt_handler+0x278>)
    8c04:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    8c06:	697b      	ldr	r3, [r7, #20]
    8c08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8c0a:	b29b      	uxth	r3, r3
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d146      	bne.n	8c9e <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8c10:	693b      	ldr	r3, [r7, #16]
    8c12:	2204      	movs	r2, #4
    8c14:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    8c16:	697b      	ldr	r3, [r7, #20]
    8c18:	2238      	movs	r2, #56	; 0x38
    8c1a:	2100      	movs	r1, #0
    8c1c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    8c1e:	697b      	ldr	r3, [r7, #20]
    8c20:	2203      	movs	r2, #3
    8c22:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    8c24:	230f      	movs	r3, #15
    8c26:	18fb      	adds	r3, r7, r3
    8c28:	781b      	ldrb	r3, [r3, #0]
    8c2a:	2201      	movs	r2, #1
    8c2c:	4013      	ands	r3, r2
    8c2e:	d036      	beq.n	8c9e <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8c30:	697b      	ldr	r3, [r7, #20]
    8c32:	68db      	ldr	r3, [r3, #12]
    8c34:	697a      	ldr	r2, [r7, #20]
    8c36:	0010      	movs	r0, r2
    8c38:	4798      	blx	r3
    8c3a:	e030      	b.n	8c9e <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    8c3c:	697b      	ldr	r3, [r7, #20]
    8c3e:	0018      	movs	r0, r3
    8c40:	4b3e      	ldr	r3, [pc, #248]	; (8d3c <_spi_interrupt_handler+0x27c>)
    8c42:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    8c44:	697b      	ldr	r3, [r7, #20]
    8c46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8c48:	b29b      	uxth	r3, r3
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d127      	bne.n	8c9e <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    8c4e:	697b      	ldr	r3, [r7, #20]
    8c50:	2238      	movs	r2, #56	; 0x38
    8c52:	2100      	movs	r1, #0
    8c54:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8c56:	693b      	ldr	r3, [r7, #16]
    8c58:	2204      	movs	r2, #4
    8c5a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    8c5c:	697b      	ldr	r3, [r7, #20]
    8c5e:	7a5b      	ldrb	r3, [r3, #9]
    8c60:	b2db      	uxtb	r3, r3
    8c62:	2b02      	cmp	r3, #2
    8c64:	d10b      	bne.n	8c7e <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8c66:	230f      	movs	r3, #15
    8c68:	18fb      	adds	r3, r7, r3
    8c6a:	781b      	ldrb	r3, [r3, #0]
    8c6c:	2204      	movs	r2, #4
    8c6e:	4013      	ands	r3, r2
    8c70:	d015      	beq.n	8c9e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    8c72:	697b      	ldr	r3, [r7, #20]
    8c74:	695b      	ldr	r3, [r3, #20]
    8c76:	697a      	ldr	r2, [r7, #20]
    8c78:	0010      	movs	r0, r2
    8c7a:	4798      	blx	r3
    8c7c:	e00f      	b.n	8c9e <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    8c7e:	697b      	ldr	r3, [r7, #20]
    8c80:	7a5b      	ldrb	r3, [r3, #9]
    8c82:	b2db      	uxtb	r3, r3
    8c84:	2b00      	cmp	r3, #0
    8c86:	d10a      	bne.n	8c9e <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    8c88:	230f      	movs	r3, #15
    8c8a:	18fb      	adds	r3, r7, r3
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	2202      	movs	r2, #2
    8c90:	4013      	ands	r3, r2
    8c92:	d004      	beq.n	8c9e <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8c94:	697b      	ldr	r3, [r7, #20]
    8c96:	691b      	ldr	r3, [r3, #16]
    8c98:	697a      	ldr	r2, [r7, #20]
    8c9a:	0010      	movs	r0, r2
    8c9c:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    8c9e:	230c      	movs	r3, #12
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	881b      	ldrh	r3, [r3, #0]
    8ca4:	2202      	movs	r2, #2
    8ca6:	4013      	ands	r3, r2
    8ca8:	d024      	beq.n	8cf4 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8caa:	697b      	ldr	r3, [r7, #20]
    8cac:	795b      	ldrb	r3, [r3, #5]
    8cae:	2b01      	cmp	r3, #1
    8cb0:	d120      	bne.n	8cf4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    8cb2:	697b      	ldr	r3, [r7, #20]
    8cb4:	7a5b      	ldrb	r3, [r3, #9]
    8cb6:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8cb8:	2b01      	cmp	r3, #1
    8cba:	d11b      	bne.n	8cf4 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    8cbc:	697b      	ldr	r3, [r7, #20]
    8cbe:	79db      	ldrb	r3, [r3, #7]
    8cc0:	2201      	movs	r2, #1
    8cc2:	4053      	eors	r3, r2
    8cc4:	b2db      	uxtb	r3, r3
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d014      	beq.n	8cf4 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8cca:	693b      	ldr	r3, [r7, #16]
    8ccc:	2202      	movs	r2, #2
    8cce:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    8cd0:	697b      	ldr	r3, [r7, #20]
    8cd2:	2203      	movs	r2, #3
    8cd4:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    8cd6:	697b      	ldr	r3, [r7, #20]
    8cd8:	2238      	movs	r2, #56	; 0x38
    8cda:	2100      	movs	r1, #0
    8cdc:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    8cde:	230f      	movs	r3, #15
    8ce0:	18fb      	adds	r3, r7, r3
    8ce2:	781b      	ldrb	r3, [r3, #0]
    8ce4:	2201      	movs	r2, #1
    8ce6:	4013      	ands	r3, r2
    8ce8:	d004      	beq.n	8cf4 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    8cea:	697b      	ldr	r3, [r7, #20]
    8cec:	68db      	ldr	r3, [r3, #12]
    8cee:	697a      	ldr	r2, [r7, #20]
    8cf0:	0010      	movs	r0, r2
    8cf2:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8cf4:	230c      	movs	r3, #12
    8cf6:	18fb      	adds	r3, r7, r3
    8cf8:	881b      	ldrh	r3, [r3, #0]
    8cfa:	2280      	movs	r2, #128	; 0x80
    8cfc:	4013      	ands	r3, r2
    8cfe:	d010      	beq.n	8d22 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8d00:	693b      	ldr	r3, [r7, #16]
    8d02:	2280      	movs	r2, #128	; 0x80
    8d04:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8d06:	693b      	ldr	r3, [r7, #16]
    8d08:	2280      	movs	r2, #128	; 0x80
    8d0a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    8d0c:	230f      	movs	r3, #15
    8d0e:	18fb      	adds	r3, r7, r3
    8d10:	781b      	ldrb	r3, [r3, #0]
    8d12:	2240      	movs	r2, #64	; 0x40
    8d14:	4013      	ands	r3, r2
    8d16:	d004      	beq.n	8d22 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8d18:	697b      	ldr	r3, [r7, #20]
    8d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d1c:	697a      	ldr	r2, [r7, #20]
    8d1e:	0010      	movs	r0, r2
    8d20:	4798      	blx	r3
		}
	}
#  endif
}
    8d22:	46c0      	nop			; (mov r8, r8)
    8d24:	46bd      	mov	sp, r7
    8d26:	b006      	add	sp, #24
    8d28:	bd80      	pop	{r7, pc}
    8d2a:	46c0      	nop			; (mov r8, r8)
    8d2c:	200045b0 	.word	0x200045b0
    8d30:	000089e5 	.word	0x000089e5
    8d34:	00008969 	.word	0x00008969
    8d38:	00008a19 	.word	0x00008a19
    8d3c:	00008a51 	.word	0x00008a51

00008d40 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8d40:	b580      	push	{r7, lr}
    8d42:	b082      	sub	sp, #8
    8d44:	af00      	add	r7, sp, #0
    8d46:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8d48:	687b      	ldr	r3, [r7, #4]
    8d4a:	2200      	movs	r2, #0
    8d4c:	701a      	strb	r2, [r3, #0]
}
    8d4e:	46c0      	nop			; (mov r8, r8)
    8d50:	46bd      	mov	sp, r7
    8d52:	b002      	add	sp, #8
    8d54:	bd80      	pop	{r7, pc}
    8d56:	46c0      	nop			; (mov r8, r8)

00008d58 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8d58:	b580      	push	{r7, lr}
    8d5a:	b082      	sub	sp, #8
    8d5c:	af00      	add	r7, sp, #0
    8d5e:	0002      	movs	r2, r0
    8d60:	6039      	str	r1, [r7, #0]
    8d62:	1dfb      	adds	r3, r7, #7
    8d64:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8d66:	1dfb      	adds	r3, r7, #7
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	2b01      	cmp	r3, #1
    8d6c:	d00a      	beq.n	8d84 <system_apb_clock_set_mask+0x2c>
    8d6e:	2b02      	cmp	r3, #2
    8d70:	d00f      	beq.n	8d92 <system_apb_clock_set_mask+0x3a>
    8d72:	2b00      	cmp	r3, #0
    8d74:	d114      	bne.n	8da0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8d76:	4b0e      	ldr	r3, [pc, #56]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d78:	4a0d      	ldr	r2, [pc, #52]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d7a:	6991      	ldr	r1, [r2, #24]
    8d7c:	683a      	ldr	r2, [r7, #0]
    8d7e:	430a      	orrs	r2, r1
    8d80:	619a      	str	r2, [r3, #24]
			break;
    8d82:	e00f      	b.n	8da4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8d84:	4b0a      	ldr	r3, [pc, #40]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d86:	4a0a      	ldr	r2, [pc, #40]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d88:	69d1      	ldr	r1, [r2, #28]
    8d8a:	683a      	ldr	r2, [r7, #0]
    8d8c:	430a      	orrs	r2, r1
    8d8e:	61da      	str	r2, [r3, #28]
			break;
    8d90:	e008      	b.n	8da4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8d92:	4b07      	ldr	r3, [pc, #28]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d94:	4a06      	ldr	r2, [pc, #24]	; (8db0 <system_apb_clock_set_mask+0x58>)
    8d96:	6a11      	ldr	r1, [r2, #32]
    8d98:	683a      	ldr	r2, [r7, #0]
    8d9a:	430a      	orrs	r2, r1
    8d9c:	621a      	str	r2, [r3, #32]
			break;
    8d9e:	e001      	b.n	8da4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8da0:	2317      	movs	r3, #23
    8da2:	e000      	b.n	8da6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8da4:	2300      	movs	r3, #0
}
    8da6:	0018      	movs	r0, r3
    8da8:	46bd      	mov	sp, r7
    8daa:	b002      	add	sp, #8
    8dac:	bd80      	pop	{r7, pc}
    8dae:	46c0      	nop			; (mov r8, r8)
    8db0:	40000400 	.word	0x40000400

00008db4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8db4:	b580      	push	{r7, lr}
    8db6:	b082      	sub	sp, #8
    8db8:	af00      	add	r7, sp, #0
    8dba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	2280      	movs	r2, #128	; 0x80
    8dc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8dc2:	687b      	ldr	r3, [r7, #4]
    8dc4:	2200      	movs	r2, #0
    8dc6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8dc8:	687b      	ldr	r3, [r7, #4]
    8dca:	2201      	movs	r2, #1
    8dcc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8dce:	687b      	ldr	r3, [r7, #4]
    8dd0:	2200      	movs	r2, #0
    8dd2:	70da      	strb	r2, [r3, #3]
}
    8dd4:	46c0      	nop			; (mov r8, r8)
    8dd6:	46bd      	mov	sp, r7
    8dd8:	b002      	add	sp, #8
    8dda:	bd80      	pop	{r7, pc}

00008ddc <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    8ddc:	b580      	push	{r7, lr}
    8dde:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    8de0:	4b05      	ldr	r3, [pc, #20]	; (8df8 <system_is_debugger_present+0x1c>)
    8de2:	789b      	ldrb	r3, [r3, #2]
    8de4:	b2db      	uxtb	r3, r3
    8de6:	001a      	movs	r2, r3
    8de8:	2302      	movs	r3, #2
    8dea:	4013      	ands	r3, r2
    8dec:	1e5a      	subs	r2, r3, #1
    8dee:	4193      	sbcs	r3, r2
    8df0:	b2db      	uxtb	r3, r3
}
    8df2:	0018      	movs	r0, r3
    8df4:	46bd      	mov	sp, r7
    8df6:	bd80      	pop	{r7, pc}
    8df8:	41002000 	.word	0x41002000

00008dfc <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    8dfc:	b580      	push	{r7, lr}
    8dfe:	b084      	sub	sp, #16
    8e00:	af00      	add	r7, sp, #0
    8e02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8e04:	687b      	ldr	r3, [r7, #4]
    8e06:	681b      	ldr	r3, [r3, #0]
    8e08:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    8e0a:	68fb      	ldr	r3, [r7, #12]
    8e0c:	69db      	ldr	r3, [r3, #28]
    8e0e:	1e5a      	subs	r2, r3, #1
    8e10:	4193      	sbcs	r3, r2
    8e12:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    8e14:	0018      	movs	r0, r3
    8e16:	46bd      	mov	sp, r7
    8e18:	b004      	add	sp, #16
    8e1a:	bd80      	pop	{r7, pc}

00008e1c <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b082      	sub	sp, #8
    8e20:	af00      	add	r7, sp, #0
    8e22:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    8e24:	46c0      	nop			; (mov r8, r8)
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	0018      	movs	r0, r3
    8e2a:	4b04      	ldr	r3, [pc, #16]	; (8e3c <_usart_wait_for_sync+0x20>)
    8e2c:	4798      	blx	r3
    8e2e:	1e03      	subs	r3, r0, #0
    8e30:	d1f9      	bne.n	8e26 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    8e32:	46c0      	nop			; (mov r8, r8)
    8e34:	46bd      	mov	sp, r7
    8e36:	b002      	add	sp, #8
    8e38:	bd80      	pop	{r7, pc}
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	00008dfd 	.word	0x00008dfd

00008e40 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    8e40:	b5b0      	push	{r4, r5, r7, lr}
    8e42:	b08c      	sub	sp, #48	; 0x30
    8e44:	af02      	add	r7, sp, #8
    8e46:	6078      	str	r0, [r7, #4]
    8e48:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	681b      	ldr	r3, [r3, #0]
    8e4e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	681b      	ldr	r3, [r3, #0]
    8e54:	0018      	movs	r0, r3
    8e56:	4ba8      	ldr	r3, [pc, #672]	; (90f8 <_usart_set_config+0x2b8>)
    8e58:	4798      	blx	r3
    8e5a:	0003      	movs	r3, r0
    8e5c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8e5e:	697b      	ldr	r3, [r7, #20]
    8e60:	3314      	adds	r3, #20
    8e62:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    8e64:	2300      	movs	r3, #0
    8e66:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    8e68:	2300      	movs	r3, #0
    8e6a:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    8e6c:	230a      	movs	r3, #10
    8e6e:	18fb      	adds	r3, r7, r3
    8e70:	2200      	movs	r2, #0
    8e72:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8e74:	231f      	movs	r3, #31
    8e76:	18fb      	adds	r3, r7, r3
    8e78:	2200      	movs	r2, #0
    8e7a:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8e7c:	231e      	movs	r3, #30
    8e7e:	18fb      	adds	r3, r7, r3
    8e80:	2210      	movs	r2, #16
    8e82:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    8e84:	683b      	ldr	r3, [r7, #0]
    8e86:	8a1b      	ldrh	r3, [r3, #16]
    8e88:	2280      	movs	r2, #128	; 0x80
    8e8a:	01d2      	lsls	r2, r2, #7
    8e8c:	4293      	cmp	r3, r2
    8e8e:	d01c      	beq.n	8eca <_usart_set_config+0x8a>
    8e90:	2280      	movs	r2, #128	; 0x80
    8e92:	01d2      	lsls	r2, r2, #7
    8e94:	4293      	cmp	r3, r2
    8e96:	dc06      	bgt.n	8ea6 <_usart_set_config+0x66>
    8e98:	2b00      	cmp	r3, #0
    8e9a:	d00d      	beq.n	8eb8 <_usart_set_config+0x78>
    8e9c:	2280      	movs	r2, #128	; 0x80
    8e9e:	0192      	lsls	r2, r2, #6
    8ea0:	4293      	cmp	r3, r2
    8ea2:	d024      	beq.n	8eee <_usart_set_config+0xae>
    8ea4:	e035      	b.n	8f12 <_usart_set_config+0xd2>
    8ea6:	22c0      	movs	r2, #192	; 0xc0
    8ea8:	01d2      	lsls	r2, r2, #7
    8eaa:	4293      	cmp	r3, r2
    8eac:	d028      	beq.n	8f00 <_usart_set_config+0xc0>
    8eae:	2280      	movs	r2, #128	; 0x80
    8eb0:	0212      	lsls	r2, r2, #8
    8eb2:	4293      	cmp	r3, r2
    8eb4:	d012      	beq.n	8edc <_usart_set_config+0x9c>
    8eb6:	e02c      	b.n	8f12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8eb8:	231f      	movs	r3, #31
    8eba:	18fb      	adds	r3, r7, r3
    8ebc:	2200      	movs	r2, #0
    8ebe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8ec0:	231e      	movs	r3, #30
    8ec2:	18fb      	adds	r3, r7, r3
    8ec4:	2210      	movs	r2, #16
    8ec6:	701a      	strb	r2, [r3, #0]
			break;
    8ec8:	e023      	b.n	8f12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8eca:	231f      	movs	r3, #31
    8ecc:	18fb      	adds	r3, r7, r3
    8ece:	2200      	movs	r2, #0
    8ed0:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8ed2:	231e      	movs	r3, #30
    8ed4:	18fb      	adds	r3, r7, r3
    8ed6:	2208      	movs	r2, #8
    8ed8:	701a      	strb	r2, [r3, #0]
			break;
    8eda:	e01a      	b.n	8f12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8edc:	231f      	movs	r3, #31
    8ede:	18fb      	adds	r3, r7, r3
    8ee0:	2200      	movs	r2, #0
    8ee2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    8ee4:	231e      	movs	r3, #30
    8ee6:	18fb      	adds	r3, r7, r3
    8ee8:	2203      	movs	r2, #3
    8eea:	701a      	strb	r2, [r3, #0]
			break;
    8eec:	e011      	b.n	8f12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8eee:	231f      	movs	r3, #31
    8ef0:	18fb      	adds	r3, r7, r3
    8ef2:	2201      	movs	r2, #1
    8ef4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8ef6:	231e      	movs	r3, #30
    8ef8:	18fb      	adds	r3, r7, r3
    8efa:	2210      	movs	r2, #16
    8efc:	701a      	strb	r2, [r3, #0]
			break;
    8efe:	e008      	b.n	8f12 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8f00:	231f      	movs	r3, #31
    8f02:	18fb      	adds	r3, r7, r3
    8f04:	2201      	movs	r2, #1
    8f06:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8f08:	231e      	movs	r3, #30
    8f0a:	18fb      	adds	r3, r7, r3
    8f0c:	2208      	movs	r2, #8
    8f0e:	701a      	strb	r2, [r3, #0]
			break;
    8f10:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8f12:	683b      	ldr	r3, [r7, #0]
    8f14:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    8f16:	683b      	ldr	r3, [r7, #0]
    8f18:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8f1a:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    8f1c:	683b      	ldr	r3, [r7, #0]
    8f1e:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    8f20:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    8f22:	683a      	ldr	r2, [r7, #0]
    8f24:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    8f26:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    8f28:	683a      	ldr	r2, [r7, #0]
    8f2a:	7e12      	ldrb	r2, [r2, #24]
    8f2c:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    8f2e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8f30:	683a      	ldr	r2, [r7, #0]
    8f32:	2126      	movs	r1, #38	; 0x26
    8f34:	5c52      	ldrb	r2, [r2, r1]
    8f36:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8f38:	4313      	orrs	r3, r2
    8f3a:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    8f3c:	231d      	movs	r3, #29
    8f3e:	18fb      	adds	r3, r7, r3
    8f40:	2200      	movs	r2, #0
    8f42:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    8f44:	683b      	ldr	r3, [r7, #0]
    8f46:	685b      	ldr	r3, [r3, #4]
    8f48:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    8f4a:	68fb      	ldr	r3, [r7, #12]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d01e      	beq.n	8f8e <_usart_set_config+0x14e>
    8f50:	2280      	movs	r2, #128	; 0x80
    8f52:	0552      	lsls	r2, r2, #21
    8f54:	4293      	cmp	r3, r2
    8f56:	d14f      	bne.n	8ff8 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    8f58:	683b      	ldr	r3, [r7, #0]
    8f5a:	2227      	movs	r2, #39	; 0x27
    8f5c:	5c9b      	ldrb	r3, [r3, r2]
    8f5e:	2201      	movs	r2, #1
    8f60:	4053      	eors	r3, r2
    8f62:	b2db      	uxtb	r3, r3
    8f64:	2b00      	cmp	r3, #0
    8f66:	d046      	beq.n	8ff6 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    8f68:	683b      	ldr	r3, [r7, #0]
    8f6a:	6a1d      	ldr	r5, [r3, #32]
    8f6c:	693b      	ldr	r3, [r7, #16]
    8f6e:	b2db      	uxtb	r3, r3
    8f70:	0018      	movs	r0, r3
    8f72:	4b62      	ldr	r3, [pc, #392]	; (90fc <_usart_set_config+0x2bc>)
    8f74:	4798      	blx	r3
    8f76:	0001      	movs	r1, r0
    8f78:	231d      	movs	r3, #29
    8f7a:	18fc      	adds	r4, r7, r3
    8f7c:	230a      	movs	r3, #10
    8f7e:	18fb      	adds	r3, r7, r3
    8f80:	001a      	movs	r2, r3
    8f82:	0028      	movs	r0, r5
    8f84:	4b5e      	ldr	r3, [pc, #376]	; (9100 <_usart_set_config+0x2c0>)
    8f86:	4798      	blx	r3
    8f88:	0003      	movs	r3, r0
    8f8a:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    8f8c:	e033      	b.n	8ff6 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    8f8e:	683b      	ldr	r3, [r7, #0]
    8f90:	2227      	movs	r2, #39	; 0x27
    8f92:	5c9b      	ldrb	r3, [r3, r2]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d014      	beq.n	8fc2 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    8f98:	683b      	ldr	r3, [r7, #0]
    8f9a:	6a18      	ldr	r0, [r3, #32]
    8f9c:	683b      	ldr	r3, [r7, #0]
    8f9e:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    8fa0:	231d      	movs	r3, #29
    8fa2:	18fc      	adds	r4, r7, r3
    8fa4:	231f      	movs	r3, #31
    8fa6:	18fb      	adds	r3, r7, r3
    8fa8:	781d      	ldrb	r5, [r3, #0]
    8faa:	230a      	movs	r3, #10
    8fac:	18fa      	adds	r2, r7, r3
    8fae:	231e      	movs	r3, #30
    8fb0:	18fb      	adds	r3, r7, r3
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	9300      	str	r3, [sp, #0]
    8fb6:	002b      	movs	r3, r5
    8fb8:	4d52      	ldr	r5, [pc, #328]	; (9104 <_usart_set_config+0x2c4>)
    8fba:	47a8      	blx	r5
    8fbc:	0003      	movs	r3, r0
    8fbe:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    8fc0:	e01a      	b.n	8ff8 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    8fc2:	683b      	ldr	r3, [r7, #0]
    8fc4:	6a1d      	ldr	r5, [r3, #32]
    8fc6:	693b      	ldr	r3, [r7, #16]
    8fc8:	b2db      	uxtb	r3, r3
    8fca:	0018      	movs	r0, r3
    8fcc:	4b4b      	ldr	r3, [pc, #300]	; (90fc <_usart_set_config+0x2bc>)
    8fce:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    8fd0:	231d      	movs	r3, #29
    8fd2:	18fc      	adds	r4, r7, r3
    8fd4:	231f      	movs	r3, #31
    8fd6:	18fb      	adds	r3, r7, r3
    8fd8:	7819      	ldrb	r1, [r3, #0]
    8fda:	230a      	movs	r3, #10
    8fdc:	18fa      	adds	r2, r7, r3
    8fde:	231e      	movs	r3, #30
    8fe0:	18fb      	adds	r3, r7, r3
    8fe2:	781b      	ldrb	r3, [r3, #0]
    8fe4:	9300      	str	r3, [sp, #0]
    8fe6:	000b      	movs	r3, r1
    8fe8:	0001      	movs	r1, r0
    8fea:	0028      	movs	r0, r5
    8fec:	4d45      	ldr	r5, [pc, #276]	; (9104 <_usart_set_config+0x2c4>)
    8fee:	47a8      	blx	r5
    8ff0:	0003      	movs	r3, r0
    8ff2:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    8ff4:	e000      	b.n	8ff8 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    8ff6:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    8ff8:	231d      	movs	r3, #29
    8ffa:	18fb      	adds	r3, r7, r3
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	2b00      	cmp	r3, #0
    9000:	d003      	beq.n	900a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    9002:	231d      	movs	r3, #29
    9004:	18fb      	adds	r3, r7, r3
    9006:	781b      	ldrb	r3, [r3, #0]
    9008:	e071      	b.n	90ee <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    900a:	683b      	ldr	r3, [r7, #0]
    900c:	7e5b      	ldrb	r3, [r3, #25]
    900e:	2b00      	cmp	r3, #0
    9010:	d003      	beq.n	901a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    9012:	683b      	ldr	r3, [r7, #0]
    9014:	7e9a      	ldrb	r2, [r3, #26]
    9016:	69bb      	ldr	r3, [r7, #24]
    9018:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    901a:	687b      	ldr	r3, [r7, #4]
    901c:	0018      	movs	r0, r3
    901e:	4b3a      	ldr	r3, [pc, #232]	; (9108 <_usart_set_config+0x2c8>)
    9020:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    9022:	230a      	movs	r3, #10
    9024:	18fb      	adds	r3, r7, r3
    9026:	881a      	ldrh	r2, [r3, #0]
    9028:	69bb      	ldr	r3, [r7, #24]
    902a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    902c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    902e:	68fb      	ldr	r3, [r7, #12]
    9030:	4313      	orrs	r3, r2
    9032:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    9034:	683b      	ldr	r3, [r7, #0]
    9036:	2227      	movs	r2, #39	; 0x27
    9038:	5c9b      	ldrb	r3, [r3, r2]
    903a:	2201      	movs	r2, #1
    903c:	4053      	eors	r3, r2
    903e:	b2db      	uxtb	r3, r3
    9040:	2b00      	cmp	r3, #0
    9042:	d003      	beq.n	904c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    9044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9046:	2204      	movs	r2, #4
    9048:	4313      	orrs	r3, r2
    904a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    904c:	683b      	ldr	r3, [r7, #0]
    904e:	7e5b      	ldrb	r3, [r3, #25]
    9050:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    9052:	683b      	ldr	r3, [r7, #0]
    9054:	7f1b      	ldrb	r3, [r3, #28]
    9056:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    9058:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    905a:	683b      	ldr	r3, [r7, #0]
    905c:	7f5b      	ldrb	r3, [r3, #29]
    905e:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    9060:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    9062:	683b      	ldr	r3, [r7, #0]
    9064:	2124      	movs	r1, #36	; 0x24
    9066:	5c5b      	ldrb	r3, [r3, r1]
    9068:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    906a:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    906c:	683b      	ldr	r3, [r7, #0]
    906e:	2125      	movs	r1, #37	; 0x25
    9070:	5c5b      	ldrb	r3, [r3, r1]
    9072:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    9074:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    9076:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    9078:	683b      	ldr	r3, [r7, #0]
    907a:	7adb      	ldrb	r3, [r3, #11]
    907c:	001a      	movs	r2, r3
    907e:	6a3b      	ldr	r3, [r7, #32]
    9080:	4313      	orrs	r3, r2
    9082:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    9084:	683b      	ldr	r3, [r7, #0]
    9086:	891b      	ldrh	r3, [r3, #8]
    9088:	2bff      	cmp	r3, #255	; 0xff
    908a:	d00b      	beq.n	90a4 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    908e:	2280      	movs	r2, #128	; 0x80
    9090:	0452      	lsls	r2, r2, #17
    9092:	4313      	orrs	r3, r2
    9094:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    9096:	683b      	ldr	r3, [r7, #0]
    9098:	891b      	ldrh	r3, [r3, #8]
    909a:	001a      	movs	r2, r3
    909c:	6a3b      	ldr	r3, [r7, #32]
    909e:	4313      	orrs	r3, r2
    90a0:	623b      	str	r3, [r7, #32]
    90a2:	e008      	b.n	90b6 <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    90a4:	683b      	ldr	r3, [r7, #0]
    90a6:	7edb      	ldrb	r3, [r3, #27]
    90a8:	2b00      	cmp	r3, #0
    90aa:	d004      	beq.n	90b6 <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    90ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90ae:	2280      	movs	r2, #128	; 0x80
    90b0:	04d2      	lsls	r2, r2, #19
    90b2:	4313      	orrs	r3, r2
    90b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    90b6:	683b      	ldr	r3, [r7, #0]
    90b8:	222c      	movs	r2, #44	; 0x2c
    90ba:	5c9b      	ldrb	r3, [r3, r2]
    90bc:	2b00      	cmp	r3, #0
    90be:	d103      	bne.n	90c8 <_usart_set_config+0x288>
    90c0:	4b12      	ldr	r3, [pc, #72]	; (910c <_usart_set_config+0x2cc>)
    90c2:	4798      	blx	r3
    90c4:	1e03      	subs	r3, r0, #0
    90c6:	d003      	beq.n	90d0 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    90c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90ca:	2280      	movs	r2, #128	; 0x80
    90cc:	4313      	orrs	r3, r2
    90ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    90d0:	687b      	ldr	r3, [r7, #4]
    90d2:	0018      	movs	r0, r3
    90d4:	4b0c      	ldr	r3, [pc, #48]	; (9108 <_usart_set_config+0x2c8>)
    90d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    90d8:	69bb      	ldr	r3, [r7, #24]
    90da:	6a3a      	ldr	r2, [r7, #32]
    90dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    90de:	687b      	ldr	r3, [r7, #4]
    90e0:	0018      	movs	r0, r3
    90e2:	4b09      	ldr	r3, [pc, #36]	; (9108 <_usart_set_config+0x2c8>)
    90e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    90e6:	69bb      	ldr	r3, [r7, #24]
    90e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    90ea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    90ec:	2300      	movs	r3, #0
}
    90ee:	0018      	movs	r0, r3
    90f0:	46bd      	mov	sp, r7
    90f2:	b00a      	add	sp, #40	; 0x28
    90f4:	bdb0      	pop	{r4, r5, r7, pc}
    90f6:	46c0      	nop			; (mov r8, r8)
    90f8:	00008079 	.word	0x00008079
    90fc:	0000a5c1 	.word	0x0000a5c1
    9100:	00007bc9 	.word	0x00007bc9
    9104:	00007c45 	.word	0x00007c45
    9108:	00008e1d 	.word	0x00008e1d
    910c:	00008ddd 	.word	0x00008ddd

00009110 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    9110:	b590      	push	{r4, r7, lr}
    9112:	b093      	sub	sp, #76	; 0x4c
    9114:	af00      	add	r7, sp, #0
    9116:	60f8      	str	r0, [r7, #12]
    9118:	60b9      	str	r1, [r7, #8]
    911a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    911c:	233b      	movs	r3, #59	; 0x3b
    911e:	18fb      	adds	r3, r7, r3
    9120:	2200      	movs	r2, #0
    9122:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    9124:	68fb      	ldr	r3, [r7, #12]
    9126:	68ba      	ldr	r2, [r7, #8]
    9128:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    912a:	68fb      	ldr	r3, [r7, #12]
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9130:	68fb      	ldr	r3, [r7, #12]
    9132:	681b      	ldr	r3, [r3, #0]
    9134:	0018      	movs	r0, r3
    9136:	4b86      	ldr	r3, [pc, #536]	; (9350 <usart_init+0x240>)
    9138:	4798      	blx	r3
    913a:	0003      	movs	r3, r0
    913c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    913e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9140:	3302      	adds	r3, #2
    9142:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9146:	3314      	adds	r3, #20
    9148:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    914a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    914c:	681b      	ldr	r3, [r3, #0]
    914e:	2201      	movs	r2, #1
    9150:	4013      	ands	r3, r2
    9152:	d001      	beq.n	9158 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    9154:	2305      	movs	r3, #5
    9156:	e0f6      	b.n	9346 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    9158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    915a:	681b      	ldr	r3, [r3, #0]
    915c:	2202      	movs	r2, #2
    915e:	4013      	ands	r3, r2
    9160:	d001      	beq.n	9166 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    9162:	231c      	movs	r3, #28
    9164:	e0ef      	b.n	9346 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9166:	2201      	movs	r2, #1
    9168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    916a:	409a      	lsls	r2, r3
    916c:	0013      	movs	r3, r2
    916e:	0019      	movs	r1, r3
    9170:	2002      	movs	r0, #2
    9172:	4b78      	ldr	r3, [pc, #480]	; (9354 <usart_init+0x244>)
    9174:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    9176:	2324      	movs	r3, #36	; 0x24
    9178:	18fb      	adds	r3, r7, r3
    917a:	0018      	movs	r0, r3
    917c:	4b76      	ldr	r3, [pc, #472]	; (9358 <usart_init+0x248>)
    917e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9180:	687b      	ldr	r3, [r7, #4]
    9182:	222d      	movs	r2, #45	; 0x2d
    9184:	5c9a      	ldrb	r2, [r3, r2]
    9186:	2324      	movs	r3, #36	; 0x24
    9188:	18fb      	adds	r3, r7, r3
    918a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    918e:	b2db      	uxtb	r3, r3
    9190:	2224      	movs	r2, #36	; 0x24
    9192:	18ba      	adds	r2, r7, r2
    9194:	0011      	movs	r1, r2
    9196:	0018      	movs	r0, r3
    9198:	4b70      	ldr	r3, [pc, #448]	; (935c <usart_init+0x24c>)
    919a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    919e:	b2db      	uxtb	r3, r3
    91a0:	0018      	movs	r0, r3
    91a2:	4b6f      	ldr	r3, [pc, #444]	; (9360 <usart_init+0x250>)
    91a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    91a6:	687b      	ldr	r3, [r7, #4]
    91a8:	222d      	movs	r2, #45	; 0x2d
    91aa:	5c9b      	ldrb	r3, [r3, r2]
    91ac:	2100      	movs	r1, #0
    91ae:	0018      	movs	r0, r3
    91b0:	4b6c      	ldr	r3, [pc, #432]	; (9364 <usart_init+0x254>)
    91b2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	7ada      	ldrb	r2, [r3, #11]
    91b8:	68fb      	ldr	r3, [r7, #12]
    91ba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    91bc:	687b      	ldr	r3, [r7, #4]
    91be:	2224      	movs	r2, #36	; 0x24
    91c0:	5c9a      	ldrb	r2, [r3, r2]
    91c2:	68fb      	ldr	r3, [r7, #12]
    91c4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    91c6:	687b      	ldr	r3, [r7, #4]
    91c8:	2225      	movs	r2, #37	; 0x25
    91ca:	5c9a      	ldrb	r2, [r3, r2]
    91cc:	68fb      	ldr	r3, [r7, #12]
    91ce:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    91d0:	687b      	ldr	r3, [r7, #4]
    91d2:	7eda      	ldrb	r2, [r3, #27]
    91d4:	68fb      	ldr	r3, [r7, #12]
    91d6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    91d8:	687b      	ldr	r3, [r7, #4]
    91da:	7f1a      	ldrb	r2, [r3, #28]
    91dc:	68fb      	ldr	r3, [r7, #12]
    91de:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    91e0:	233b      	movs	r3, #59	; 0x3b
    91e2:	18fc      	adds	r4, r7, r3
    91e4:	687a      	ldr	r2, [r7, #4]
    91e6:	68fb      	ldr	r3, [r7, #12]
    91e8:	0011      	movs	r1, r2
    91ea:	0018      	movs	r0, r3
    91ec:	4b5e      	ldr	r3, [pc, #376]	; (9368 <usart_init+0x258>)
    91ee:	4798      	blx	r3
    91f0:	0003      	movs	r3, r0
    91f2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    91f4:	233b      	movs	r3, #59	; 0x3b
    91f6:	18fb      	adds	r3, r7, r3
    91f8:	781b      	ldrb	r3, [r3, #0]
    91fa:	2b00      	cmp	r3, #0
    91fc:	d003      	beq.n	9206 <usart_init+0xf6>
		return status_code;
    91fe:	233b      	movs	r3, #59	; 0x3b
    9200:	18fb      	adds	r3, r7, r3
    9202:	781b      	ldrb	r3, [r3, #0]
    9204:	e09f      	b.n	9346 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    9206:	2320      	movs	r3, #32
    9208:	18fb      	adds	r3, r7, r3
    920a:	0018      	movs	r0, r3
    920c:	4b57      	ldr	r3, [pc, #348]	; (936c <usart_init+0x25c>)
    920e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9210:	2320      	movs	r3, #32
    9212:	18fb      	adds	r3, r7, r3
    9214:	2200      	movs	r2, #0
    9216:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    9218:	2320      	movs	r3, #32
    921a:	18fb      	adds	r3, r7, r3
    921c:	2200      	movs	r2, #0
    921e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    9224:	2310      	movs	r3, #16
    9226:	18fb      	adds	r3, r7, r3
    9228:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    922a:	687b      	ldr	r3, [r7, #4]
    922c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    922e:	2310      	movs	r3, #16
    9230:	18fb      	adds	r3, r7, r3
    9232:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    9238:	2310      	movs	r3, #16
    923a:	18fb      	adds	r3, r7, r3
    923c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    923e:	687b      	ldr	r3, [r7, #4]
    9240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    9242:	2310      	movs	r3, #16
    9244:	18fb      	adds	r3, r7, r3
    9246:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9248:	2347      	movs	r3, #71	; 0x47
    924a:	18fb      	adds	r3, r7, r3
    924c:	2200      	movs	r2, #0
    924e:	701a      	strb	r2, [r3, #0]
    9250:	e02c      	b.n	92ac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    9252:	2347      	movs	r3, #71	; 0x47
    9254:	18fb      	adds	r3, r7, r3
    9256:	781a      	ldrb	r2, [r3, #0]
    9258:	2310      	movs	r3, #16
    925a:	18fb      	adds	r3, r7, r3
    925c:	0092      	lsls	r2, r2, #2
    925e:	58d3      	ldr	r3, [r2, r3]
    9260:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    9262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9264:	2b00      	cmp	r3, #0
    9266:	d109      	bne.n	927c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9268:	2347      	movs	r3, #71	; 0x47
    926a:	18fb      	adds	r3, r7, r3
    926c:	781a      	ldrb	r2, [r3, #0]
    926e:	68bb      	ldr	r3, [r7, #8]
    9270:	0011      	movs	r1, r2
    9272:	0018      	movs	r0, r3
    9274:	4b3e      	ldr	r3, [pc, #248]	; (9370 <usart_init+0x260>)
    9276:	4798      	blx	r3
    9278:	0003      	movs	r3, r0
    927a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    927c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    927e:	3301      	adds	r3, #1
    9280:	d00d      	beq.n	929e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    9282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9284:	b2da      	uxtb	r2, r3
    9286:	2320      	movs	r3, #32
    9288:	18fb      	adds	r3, r7, r3
    928a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    928c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    928e:	0c1b      	lsrs	r3, r3, #16
    9290:	b2db      	uxtb	r3, r3
    9292:	2220      	movs	r2, #32
    9294:	18ba      	adds	r2, r7, r2
    9296:	0011      	movs	r1, r2
    9298:	0018      	movs	r0, r3
    929a:	4b36      	ldr	r3, [pc, #216]	; (9374 <usart_init+0x264>)
    929c:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    929e:	2347      	movs	r3, #71	; 0x47
    92a0:	18fb      	adds	r3, r7, r3
    92a2:	781a      	ldrb	r2, [r3, #0]
    92a4:	2347      	movs	r3, #71	; 0x47
    92a6:	18fb      	adds	r3, r7, r3
    92a8:	3201      	adds	r2, #1
    92aa:	701a      	strb	r2, [r3, #0]
    92ac:	2347      	movs	r3, #71	; 0x47
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2b03      	cmp	r3, #3
    92b4:	d9cd      	bls.n	9252 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    92b6:	2300      	movs	r3, #0
    92b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    92ba:	e00a      	b.n	92d2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    92bc:	68fa      	ldr	r2, [r7, #12]
    92be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    92c0:	3302      	adds	r3, #2
    92c2:	009b      	lsls	r3, r3, #2
    92c4:	18d3      	adds	r3, r2, r3
    92c6:	3304      	adds	r3, #4
    92c8:	2200      	movs	r2, #0
    92ca:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    92cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    92ce:	3301      	adds	r3, #1
    92d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    92d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    92d4:	2b05      	cmp	r3, #5
    92d6:	d9f1      	bls.n	92bc <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    92d8:	68fb      	ldr	r3, [r7, #12]
    92da:	2200      	movs	r2, #0
    92dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    92de:	68fb      	ldr	r3, [r7, #12]
    92e0:	2200      	movs	r2, #0
    92e2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    92e4:	68fb      	ldr	r3, [r7, #12]
    92e6:	2200      	movs	r2, #0
    92e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    92ea:	68fb      	ldr	r3, [r7, #12]
    92ec:	2200      	movs	r2, #0
    92ee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    92f0:	68fb      	ldr	r3, [r7, #12]
    92f2:	2230      	movs	r2, #48	; 0x30
    92f4:	2100      	movs	r1, #0
    92f6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    92f8:	68fb      	ldr	r3, [r7, #12]
    92fa:	2231      	movs	r2, #49	; 0x31
    92fc:	2100      	movs	r1, #0
    92fe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    9300:	68fb      	ldr	r3, [r7, #12]
    9302:	2232      	movs	r2, #50	; 0x32
    9304:	2100      	movs	r1, #0
    9306:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    9308:	68fb      	ldr	r3, [r7, #12]
    930a:	2233      	movs	r2, #51	; 0x33
    930c:	2100      	movs	r1, #0
    930e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9310:	68fb      	ldr	r3, [r7, #12]
    9312:	681b      	ldr	r3, [r3, #0]
    9314:	2227      	movs	r2, #39	; 0x27
    9316:	18bc      	adds	r4, r7, r2
    9318:	0018      	movs	r0, r3
    931a:	4b0d      	ldr	r3, [pc, #52]	; (9350 <usart_init+0x240>)
    931c:	4798      	blx	r3
    931e:	0003      	movs	r3, r0
    9320:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    9322:	4a15      	ldr	r2, [pc, #84]	; (9378 <usart_init+0x268>)
    9324:	2327      	movs	r3, #39	; 0x27
    9326:	18fb      	adds	r3, r7, r3
    9328:	781b      	ldrb	r3, [r3, #0]
    932a:	0011      	movs	r1, r2
    932c:	0018      	movs	r0, r3
    932e:	4b13      	ldr	r3, [pc, #76]	; (937c <usart_init+0x26c>)
    9330:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9332:	2327      	movs	r3, #39	; 0x27
    9334:	18fb      	adds	r3, r7, r3
    9336:	781a      	ldrb	r2, [r3, #0]
    9338:	4b11      	ldr	r3, [pc, #68]	; (9380 <usart_init+0x270>)
    933a:	0092      	lsls	r2, r2, #2
    933c:	68f9      	ldr	r1, [r7, #12]
    933e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    9340:	233b      	movs	r3, #59	; 0x3b
    9342:	18fb      	adds	r3, r7, r3
    9344:	781b      	ldrb	r3, [r3, #0]
}
    9346:	0018      	movs	r0, r3
    9348:	46bd      	mov	sp, r7
    934a:	b013      	add	sp, #76	; 0x4c
    934c:	bd90      	pop	{r4, r7, pc}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	00008079 	.word	0x00008079
    9354:	00008d59 	.word	0x00008d59
    9358:	00008d41 	.word	0x00008d41
    935c:	0000a49d 	.word	0x0000a49d
    9360:	0000a4e1 	.word	0x0000a4e1
    9364:	00007e31 	.word	0x00007e31
    9368:	00008e41 	.word	0x00008e41
    936c:	00008db5 	.word	0x00008db5
    9370:	00007ebd 	.word	0x00007ebd
    9374:	0000a789 	.word	0x0000a789
    9378:	00009519 	.word	0x00009519
    937c:	000080dd 	.word	0x000080dd
    9380:	200045b0 	.word	0x200045b0

00009384 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    9384:	b580      	push	{r7, lr}
    9386:	b084      	sub	sp, #16
    9388:	af00      	add	r7, sp, #0
    938a:	6078      	str	r0, [r7, #4]
    938c:	000a      	movs	r2, r1
    938e:	1cbb      	adds	r3, r7, #2
    9390:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9392:	687b      	ldr	r3, [r7, #4]
    9394:	681b      	ldr	r3, [r3, #0]
    9396:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    9398:	687b      	ldr	r3, [r7, #4]
    939a:	79db      	ldrb	r3, [r3, #7]
    939c:	2201      	movs	r2, #1
    939e:	4053      	eors	r3, r2
    93a0:	b2db      	uxtb	r3, r3
    93a2:	2b00      	cmp	r3, #0
    93a4:	d001      	beq.n	93aa <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    93a6:	231c      	movs	r3, #28
    93a8:	e017      	b.n	93da <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    93aa:	687b      	ldr	r3, [r7, #4]
    93ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    93ae:	b29b      	uxth	r3, r3
    93b0:	2b00      	cmp	r3, #0
    93b2:	d001      	beq.n	93b8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    93b4:	2305      	movs	r3, #5
    93b6:	e010      	b.n	93da <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	0018      	movs	r0, r3
    93bc:	4b09      	ldr	r3, [pc, #36]	; (93e4 <usart_write_wait+0x60>)
    93be:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    93c0:	68fb      	ldr	r3, [r7, #12]
    93c2:	1cba      	adds	r2, r7, #2
    93c4:	8812      	ldrh	r2, [r2, #0]
    93c6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    93c8:	46c0      	nop			; (mov r8, r8)
    93ca:	68fb      	ldr	r3, [r7, #12]
    93cc:	7e1b      	ldrb	r3, [r3, #24]
    93ce:	b2db      	uxtb	r3, r3
    93d0:	001a      	movs	r2, r3
    93d2:	2302      	movs	r3, #2
    93d4:	4013      	ands	r3, r2
    93d6:	d0f8      	beq.n	93ca <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    93d8:	2300      	movs	r3, #0
}
    93da:	0018      	movs	r0, r3
    93dc:	46bd      	mov	sp, r7
    93de:	b004      	add	sp, #16
    93e0:	bd80      	pop	{r7, pc}
    93e2:	46c0      	nop			; (mov r8, r8)
    93e4:	00008e1d 	.word	0x00008e1d

000093e8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    93e8:	b580      	push	{r7, lr}
    93ea:	b084      	sub	sp, #16
    93ec:	af00      	add	r7, sp, #0
    93ee:	6078      	str	r0, [r7, #4]
    93f0:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    93f2:	687b      	ldr	r3, [r7, #4]
    93f4:	681b      	ldr	r3, [r3, #0]
    93f6:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    93f8:	687b      	ldr	r3, [r7, #4]
    93fa:	799b      	ldrb	r3, [r3, #6]
    93fc:	2201      	movs	r2, #1
    93fe:	4053      	eors	r3, r2
    9400:	b2db      	uxtb	r3, r3
    9402:	2b00      	cmp	r3, #0
    9404:	d001      	beq.n	940a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    9406:	231c      	movs	r3, #28
    9408:	e05e      	b.n	94c8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    940e:	b29b      	uxth	r3, r3
    9410:	2b00      	cmp	r3, #0
    9412:	d001      	beq.n	9418 <usart_read_wait+0x30>
		return STATUS_BUSY;
    9414:	2305      	movs	r3, #5
    9416:	e057      	b.n	94c8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    9418:	68fb      	ldr	r3, [r7, #12]
    941a:	7e1b      	ldrb	r3, [r3, #24]
    941c:	b2db      	uxtb	r3, r3
    941e:	001a      	movs	r2, r3
    9420:	2304      	movs	r3, #4
    9422:	4013      	ands	r3, r2
    9424:	d101      	bne.n	942a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    9426:	2305      	movs	r3, #5
    9428:	e04e      	b.n	94c8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    942a:	687b      	ldr	r3, [r7, #4]
    942c:	0018      	movs	r0, r3
    942e:	4b28      	ldr	r3, [pc, #160]	; (94d0 <usart_read_wait+0xe8>)
    9430:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9432:	68fb      	ldr	r3, [r7, #12]
    9434:	8b5b      	ldrh	r3, [r3, #26]
    9436:	b29b      	uxth	r3, r3
    9438:	b2da      	uxtb	r2, r3
    943a:	230b      	movs	r3, #11
    943c:	18fb      	adds	r3, r7, r3
    943e:	213f      	movs	r1, #63	; 0x3f
    9440:	400a      	ands	r2, r1
    9442:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    9444:	230b      	movs	r3, #11
    9446:	18fb      	adds	r3, r7, r3
    9448:	781b      	ldrb	r3, [r3, #0]
    944a:	2b00      	cmp	r3, #0
    944c:	d036      	beq.n	94bc <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    944e:	230b      	movs	r3, #11
    9450:	18fb      	adds	r3, r7, r3
    9452:	781b      	ldrb	r3, [r3, #0]
    9454:	2202      	movs	r2, #2
    9456:	4013      	ands	r3, r2
    9458:	d004      	beq.n	9464 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    945a:	68fb      	ldr	r3, [r7, #12]
    945c:	2202      	movs	r2, #2
    945e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    9460:	231a      	movs	r3, #26
    9462:	e031      	b.n	94c8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9464:	230b      	movs	r3, #11
    9466:	18fb      	adds	r3, r7, r3
    9468:	781b      	ldrb	r3, [r3, #0]
    946a:	2204      	movs	r2, #4
    946c:	4013      	ands	r3, r2
    946e:	d004      	beq.n	947a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9470:	68fb      	ldr	r3, [r7, #12]
    9472:	2204      	movs	r2, #4
    9474:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    9476:	231e      	movs	r3, #30
    9478:	e026      	b.n	94c8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    947a:	230b      	movs	r3, #11
    947c:	18fb      	adds	r3, r7, r3
    947e:	781b      	ldrb	r3, [r3, #0]
    9480:	2201      	movs	r2, #1
    9482:	4013      	ands	r3, r2
    9484:	d004      	beq.n	9490 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9486:	68fb      	ldr	r3, [r7, #12]
    9488:	2201      	movs	r2, #1
    948a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    948c:	2313      	movs	r3, #19
    948e:	e01b      	b.n	94c8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    9490:	230b      	movs	r3, #11
    9492:	18fb      	adds	r3, r7, r3
    9494:	781b      	ldrb	r3, [r3, #0]
    9496:	2210      	movs	r2, #16
    9498:	4013      	ands	r3, r2
    949a:	d004      	beq.n	94a6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    949c:	68fb      	ldr	r3, [r7, #12]
    949e:	2210      	movs	r2, #16
    94a0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    94a2:	2342      	movs	r3, #66	; 0x42
    94a4:	e010      	b.n	94c8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    94a6:	230b      	movs	r3, #11
    94a8:	18fb      	adds	r3, r7, r3
    94aa:	781b      	ldrb	r3, [r3, #0]
    94ac:	2220      	movs	r2, #32
    94ae:	4013      	ands	r3, r2
    94b0:	d004      	beq.n	94bc <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    94b2:	68fb      	ldr	r3, [r7, #12]
    94b4:	2220      	movs	r2, #32
    94b6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    94b8:	2341      	movs	r3, #65	; 0x41
    94ba:	e005      	b.n	94c8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    94bc:	68fb      	ldr	r3, [r7, #12]
    94be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    94c0:	b29a      	uxth	r2, r3
    94c2:	683b      	ldr	r3, [r7, #0]
    94c4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    94c6:	2300      	movs	r3, #0
}
    94c8:	0018      	movs	r0, r3
    94ca:	46bd      	mov	sp, r7
    94cc:	b004      	add	sp, #16
    94ce:	bd80      	pop	{r7, pc}
    94d0:	00008e1d 	.word	0x00008e1d

000094d4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    94d4:	b580      	push	{r7, lr}
    94d6:	b084      	sub	sp, #16
    94d8:	af00      	add	r7, sp, #0
    94da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    94dc:	687b      	ldr	r3, [r7, #4]
    94de:	681b      	ldr	r3, [r3, #0]
    94e0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    94e2:	68fb      	ldr	r3, [r7, #12]
    94e4:	69db      	ldr	r3, [r3, #28]
    94e6:	1e5a      	subs	r2, r3, #1
    94e8:	4193      	sbcs	r3, r2
    94ea:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    94ec:	0018      	movs	r0, r3
    94ee:	46bd      	mov	sp, r7
    94f0:	b004      	add	sp, #16
    94f2:	bd80      	pop	{r7, pc}

000094f4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    94f4:	b580      	push	{r7, lr}
    94f6:	b082      	sub	sp, #8
    94f8:	af00      	add	r7, sp, #0
    94fa:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    94fc:	46c0      	nop			; (mov r8, r8)
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	0018      	movs	r0, r3
    9502:	4b04      	ldr	r3, [pc, #16]	; (9514 <_usart_wait_for_sync+0x20>)
    9504:	4798      	blx	r3
    9506:	1e03      	subs	r3, r0, #0
    9508:	d1f9      	bne.n	94fe <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    950a:	46c0      	nop			; (mov r8, r8)
    950c:	46bd      	mov	sp, r7
    950e:	b002      	add	sp, #8
    9510:	bd80      	pop	{r7, pc}
    9512:	46c0      	nop			; (mov r8, r8)
    9514:	000094d5 	.word	0x000094d5

00009518 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    9518:	b580      	push	{r7, lr}
    951a:	b088      	sub	sp, #32
    951c:	af00      	add	r7, sp, #0
    951e:	0002      	movs	r2, r0
    9520:	1dfb      	adds	r3, r7, #7
    9522:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    9524:	1dfb      	adds	r3, r7, #7
    9526:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    9528:	4ba3      	ldr	r3, [pc, #652]	; (97b8 <_usart_interrupt_handler+0x2a0>)
    952a:	0092      	lsls	r2, r2, #2
    952c:	58d3      	ldr	r3, [r2, r3]
    952e:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    9530:	69bb      	ldr	r3, [r7, #24]
    9532:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    9534:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    9536:	69bb      	ldr	r3, [r7, #24]
    9538:	0018      	movs	r0, r3
    953a:	4ba0      	ldr	r3, [pc, #640]	; (97bc <_usart_interrupt_handler+0x2a4>)
    953c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    953e:	697b      	ldr	r3, [r7, #20]
    9540:	7e1b      	ldrb	r3, [r3, #24]
    9542:	b2da      	uxtb	r2, r3
    9544:	2312      	movs	r3, #18
    9546:	18fb      	adds	r3, r7, r3
    9548:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    954a:	697b      	ldr	r3, [r7, #20]
    954c:	7d9b      	ldrb	r3, [r3, #22]
    954e:	b2db      	uxtb	r3, r3
    9550:	b29a      	uxth	r2, r3
    9552:	2312      	movs	r3, #18
    9554:	18fb      	adds	r3, r7, r3
    9556:	2112      	movs	r1, #18
    9558:	1879      	adds	r1, r7, r1
    955a:	8809      	ldrh	r1, [r1, #0]
    955c:	400a      	ands	r2, r1
    955e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    9560:	69bb      	ldr	r3, [r7, #24]
    9562:	2230      	movs	r2, #48	; 0x30
    9564:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    9566:	69ba      	ldr	r2, [r7, #24]
    9568:	2131      	movs	r1, #49	; 0x31
    956a:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    956c:	4013      	ands	r3, r2
    956e:	b2da      	uxtb	r2, r3
    9570:	2310      	movs	r3, #16
    9572:	18fb      	adds	r3, r7, r3
    9574:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    9576:	2312      	movs	r3, #18
    9578:	18fb      	adds	r3, r7, r3
    957a:	881b      	ldrh	r3, [r3, #0]
    957c:	2201      	movs	r2, #1
    957e:	4013      	ands	r3, r2
    9580:	d044      	beq.n	960c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    9582:	69bb      	ldr	r3, [r7, #24]
    9584:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9586:	b29b      	uxth	r3, r3
    9588:	2b00      	cmp	r3, #0
    958a:	d03c      	beq.n	9606 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    958c:	69bb      	ldr	r3, [r7, #24]
    958e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	b2da      	uxtb	r2, r3
    9594:	231c      	movs	r3, #28
    9596:	18fb      	adds	r3, r7, r3
    9598:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    959a:	69bb      	ldr	r3, [r7, #24]
    959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    959e:	1c5a      	adds	r2, r3, #1
    95a0:	69bb      	ldr	r3, [r7, #24]
    95a2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    95a4:	69bb      	ldr	r3, [r7, #24]
    95a6:	795b      	ldrb	r3, [r3, #5]
    95a8:	2b01      	cmp	r3, #1
    95aa:	d113      	bne.n	95d4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    95ac:	69bb      	ldr	r3, [r7, #24]
    95ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95b0:	781b      	ldrb	r3, [r3, #0]
    95b2:	b2db      	uxtb	r3, r3
    95b4:	021b      	lsls	r3, r3, #8
    95b6:	b21a      	sxth	r2, r3
    95b8:	231c      	movs	r3, #28
    95ba:	18fb      	adds	r3, r7, r3
    95bc:	2100      	movs	r1, #0
    95be:	5e5b      	ldrsh	r3, [r3, r1]
    95c0:	4313      	orrs	r3, r2
    95c2:	b21a      	sxth	r2, r3
    95c4:	231c      	movs	r3, #28
    95c6:	18fb      	adds	r3, r7, r3
    95c8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    95ca:	69bb      	ldr	r3, [r7, #24]
    95cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    95ce:	1c5a      	adds	r2, r3, #1
    95d0:	69bb      	ldr	r3, [r7, #24]
    95d2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    95d4:	231c      	movs	r3, #28
    95d6:	18fb      	adds	r3, r7, r3
    95d8:	881b      	ldrh	r3, [r3, #0]
    95da:	05db      	lsls	r3, r3, #23
    95dc:	0ddb      	lsrs	r3, r3, #23
    95de:	b29a      	uxth	r2, r3
    95e0:	697b      	ldr	r3, [r7, #20]
    95e2:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    95e4:	69bb      	ldr	r3, [r7, #24]
    95e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    95e8:	b29b      	uxth	r3, r3
    95ea:	3b01      	subs	r3, #1
    95ec:	b29b      	uxth	r3, r3
    95ee:	69ba      	ldr	r2, [r7, #24]
    95f0:	1c19      	adds	r1, r3, #0
    95f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
    95f4:	2b00      	cmp	r3, #0
    95f6:	d109      	bne.n	960c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    95f8:	697b      	ldr	r3, [r7, #20]
    95fa:	2201      	movs	r2, #1
    95fc:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    95fe:	697b      	ldr	r3, [r7, #20]
    9600:	2202      	movs	r2, #2
    9602:	759a      	strb	r2, [r3, #22]
    9604:	e002      	b.n	960c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9606:	697b      	ldr	r3, [r7, #20]
    9608:	2201      	movs	r2, #1
    960a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    960c:	2312      	movs	r3, #18
    960e:	18fb      	adds	r3, r7, r3
    9610:	881b      	ldrh	r3, [r3, #0]
    9612:	2202      	movs	r2, #2
    9614:	4013      	ands	r3, r2
    9616:	d011      	beq.n	963c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    9618:	697b      	ldr	r3, [r7, #20]
    961a:	2202      	movs	r2, #2
    961c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    961e:	69bb      	ldr	r3, [r7, #24]
    9620:	2233      	movs	r2, #51	; 0x33
    9622:	2100      	movs	r1, #0
    9624:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    9626:	2310      	movs	r3, #16
    9628:	18fb      	adds	r3, r7, r3
    962a:	881b      	ldrh	r3, [r3, #0]
    962c:	2201      	movs	r2, #1
    962e:	4013      	ands	r3, r2
    9630:	d004      	beq.n	963c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    9632:	69bb      	ldr	r3, [r7, #24]
    9634:	68db      	ldr	r3, [r3, #12]
    9636:	69ba      	ldr	r2, [r7, #24]
    9638:	0010      	movs	r0, r2
    963a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    963c:	2312      	movs	r3, #18
    963e:	18fb      	adds	r3, r7, r3
    9640:	881b      	ldrh	r3, [r3, #0]
    9642:	2204      	movs	r2, #4
    9644:	4013      	ands	r3, r2
    9646:	d100      	bne.n	964a <_usart_interrupt_handler+0x132>
    9648:	e0bd      	b.n	97c6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    964a:	69bb      	ldr	r3, [r7, #24]
    964c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    964e:	b29b      	uxth	r3, r3
    9650:	2b00      	cmp	r3, #0
    9652:	d100      	bne.n	9656 <_usart_interrupt_handler+0x13e>
    9654:	e0b4      	b.n	97c0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9656:	697b      	ldr	r3, [r7, #20]
    9658:	8b5b      	ldrh	r3, [r3, #26]
    965a:	b29b      	uxth	r3, r3
    965c:	b2da      	uxtb	r2, r3
    965e:	231f      	movs	r3, #31
    9660:	18fb      	adds	r3, r7, r3
    9662:	213f      	movs	r1, #63	; 0x3f
    9664:	400a      	ands	r2, r1
    9666:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    9668:	231f      	movs	r3, #31
    966a:	18fb      	adds	r3, r7, r3
    966c:	781b      	ldrb	r3, [r3, #0]
    966e:	2208      	movs	r2, #8
    9670:	4013      	ands	r3, r2
    9672:	d007      	beq.n	9684 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    9674:	231f      	movs	r3, #31
    9676:	18fb      	adds	r3, r7, r3
    9678:	221f      	movs	r2, #31
    967a:	18ba      	adds	r2, r7, r2
    967c:	7812      	ldrb	r2, [r2, #0]
    967e:	2108      	movs	r1, #8
    9680:	438a      	bics	r2, r1
    9682:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    9684:	231f      	movs	r3, #31
    9686:	18fb      	adds	r3, r7, r3
    9688:	781b      	ldrb	r3, [r3, #0]
    968a:	2b00      	cmp	r3, #0
    968c:	d050      	beq.n	9730 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    968e:	231f      	movs	r3, #31
    9690:	18fb      	adds	r3, r7, r3
    9692:	781b      	ldrb	r3, [r3, #0]
    9694:	2202      	movs	r2, #2
    9696:	4013      	ands	r3, r2
    9698:	d007      	beq.n	96aa <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    969a:	69bb      	ldr	r3, [r7, #24]
    969c:	2232      	movs	r2, #50	; 0x32
    969e:	211a      	movs	r1, #26
    96a0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    96a2:	697b      	ldr	r3, [r7, #20]
    96a4:	2202      	movs	r2, #2
    96a6:	835a      	strh	r2, [r3, #26]
    96a8:	e036      	b.n	9718 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    96aa:	231f      	movs	r3, #31
    96ac:	18fb      	adds	r3, r7, r3
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	2204      	movs	r2, #4
    96b2:	4013      	ands	r3, r2
    96b4:	d007      	beq.n	96c6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    96b6:	69bb      	ldr	r3, [r7, #24]
    96b8:	2232      	movs	r2, #50	; 0x32
    96ba:	211e      	movs	r1, #30
    96bc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    96be:	697b      	ldr	r3, [r7, #20]
    96c0:	2204      	movs	r2, #4
    96c2:	835a      	strh	r2, [r3, #26]
    96c4:	e028      	b.n	9718 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    96c6:	231f      	movs	r3, #31
    96c8:	18fb      	adds	r3, r7, r3
    96ca:	781b      	ldrb	r3, [r3, #0]
    96cc:	2201      	movs	r2, #1
    96ce:	4013      	ands	r3, r2
    96d0:	d007      	beq.n	96e2 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    96d2:	69bb      	ldr	r3, [r7, #24]
    96d4:	2232      	movs	r2, #50	; 0x32
    96d6:	2113      	movs	r1, #19
    96d8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    96da:	697b      	ldr	r3, [r7, #20]
    96dc:	2201      	movs	r2, #1
    96de:	835a      	strh	r2, [r3, #26]
    96e0:	e01a      	b.n	9718 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    96e2:	231f      	movs	r3, #31
    96e4:	18fb      	adds	r3, r7, r3
    96e6:	781b      	ldrb	r3, [r3, #0]
    96e8:	2210      	movs	r2, #16
    96ea:	4013      	ands	r3, r2
    96ec:	d007      	beq.n	96fe <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    96ee:	69bb      	ldr	r3, [r7, #24]
    96f0:	2232      	movs	r2, #50	; 0x32
    96f2:	2142      	movs	r1, #66	; 0x42
    96f4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    96f6:	697b      	ldr	r3, [r7, #20]
    96f8:	2210      	movs	r2, #16
    96fa:	835a      	strh	r2, [r3, #26]
    96fc:	e00c      	b.n	9718 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    96fe:	231f      	movs	r3, #31
    9700:	18fb      	adds	r3, r7, r3
    9702:	781b      	ldrb	r3, [r3, #0]
    9704:	2220      	movs	r2, #32
    9706:	4013      	ands	r3, r2
    9708:	d006      	beq.n	9718 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    970a:	69bb      	ldr	r3, [r7, #24]
    970c:	2232      	movs	r2, #50	; 0x32
    970e:	2141      	movs	r1, #65	; 0x41
    9710:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9712:	697b      	ldr	r3, [r7, #20]
    9714:	2220      	movs	r2, #32
    9716:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    9718:	2310      	movs	r3, #16
    971a:	18fb      	adds	r3, r7, r3
    971c:	881b      	ldrh	r3, [r3, #0]
    971e:	2204      	movs	r2, #4
    9720:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    9722:	d050      	beq.n	97c6 <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    9724:	69bb      	ldr	r3, [r7, #24]
    9726:	695b      	ldr	r3, [r3, #20]
    9728:	69ba      	ldr	r2, [r7, #24]
    972a:	0010      	movs	r0, r2
    972c:	4798      	blx	r3
    972e:	e04a      	b.n	97c6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    9730:	697b      	ldr	r3, [r7, #20]
    9732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9734:	b29a      	uxth	r2, r3
    9736:	230e      	movs	r3, #14
    9738:	18fb      	adds	r3, r7, r3
    973a:	05d2      	lsls	r2, r2, #23
    973c:	0dd2      	lsrs	r2, r2, #23
    973e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    9740:	69bb      	ldr	r3, [r7, #24]
    9742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9744:	220e      	movs	r2, #14
    9746:	18ba      	adds	r2, r7, r2
    9748:	8812      	ldrh	r2, [r2, #0]
    974a:	b2d2      	uxtb	r2, r2
    974c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    974e:	69bb      	ldr	r3, [r7, #24]
    9750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9752:	1c5a      	adds	r2, r3, #1
    9754:	69bb      	ldr	r3, [r7, #24]
    9756:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9758:	69bb      	ldr	r3, [r7, #24]
    975a:	795b      	ldrb	r3, [r3, #5]
    975c:	2b01      	cmp	r3, #1
    975e:	d10d      	bne.n	977c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    9760:	69bb      	ldr	r3, [r7, #24]
    9762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9764:	220e      	movs	r2, #14
    9766:	18ba      	adds	r2, r7, r2
    9768:	8812      	ldrh	r2, [r2, #0]
    976a:	0a12      	lsrs	r2, r2, #8
    976c:	b292      	uxth	r2, r2
    976e:	b2d2      	uxtb	r2, r2
    9770:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    9772:	69bb      	ldr	r3, [r7, #24]
    9774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9776:	1c5a      	adds	r2, r3, #1
    9778:	69bb      	ldr	r3, [r7, #24]
    977a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    977c:	69bb      	ldr	r3, [r7, #24]
    977e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9780:	b29b      	uxth	r3, r3
    9782:	3b01      	subs	r3, #1
    9784:	b29b      	uxth	r3, r3
    9786:	69ba      	ldr	r2, [r7, #24]
    9788:	1c19      	adds	r1, r3, #0
    978a:	8591      	strh	r1, [r2, #44]	; 0x2c
    978c:	2b00      	cmp	r3, #0
    978e:	d11a      	bne.n	97c6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9790:	697b      	ldr	r3, [r7, #20]
    9792:	2204      	movs	r2, #4
    9794:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    9796:	69bb      	ldr	r3, [r7, #24]
    9798:	2232      	movs	r2, #50	; 0x32
    979a:	2100      	movs	r1, #0
    979c:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    979e:	2310      	movs	r3, #16
    97a0:	18fb      	adds	r3, r7, r3
    97a2:	881b      	ldrh	r3, [r3, #0]
    97a4:	2202      	movs	r2, #2
    97a6:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    97a8:	d00d      	beq.n	97c6 <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    97aa:	69bb      	ldr	r3, [r7, #24]
    97ac:	691b      	ldr	r3, [r3, #16]
    97ae:	69ba      	ldr	r2, [r7, #24]
    97b0:	0010      	movs	r0, r2
    97b2:	4798      	blx	r3
    97b4:	e007      	b.n	97c6 <_usart_interrupt_handler+0x2ae>
    97b6:	46c0      	nop			; (mov r8, r8)
    97b8:	200045b0 	.word	0x200045b0
    97bc:	000094f5 	.word	0x000094f5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    97c0:	697b      	ldr	r3, [r7, #20]
    97c2:	2204      	movs	r2, #4
    97c4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    97c6:	2312      	movs	r3, #18
    97c8:	18fb      	adds	r3, r7, r3
    97ca:	881b      	ldrh	r3, [r3, #0]
    97cc:	2210      	movs	r2, #16
    97ce:	4013      	ands	r3, r2
    97d0:	d010      	beq.n	97f4 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    97d2:	697b      	ldr	r3, [r7, #20]
    97d4:	2210      	movs	r2, #16
    97d6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    97d8:	697b      	ldr	r3, [r7, #20]
    97da:	2210      	movs	r2, #16
    97dc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    97de:	2310      	movs	r3, #16
    97e0:	18fb      	adds	r3, r7, r3
    97e2:	881b      	ldrh	r3, [r3, #0]
    97e4:	2210      	movs	r2, #16
    97e6:	4013      	ands	r3, r2
    97e8:	d004      	beq.n	97f4 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    97ea:	69bb      	ldr	r3, [r7, #24]
    97ec:	69db      	ldr	r3, [r3, #28]
    97ee:	69ba      	ldr	r2, [r7, #24]
    97f0:	0010      	movs	r0, r2
    97f2:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    97f4:	2312      	movs	r3, #18
    97f6:	18fb      	adds	r3, r7, r3
    97f8:	881b      	ldrh	r3, [r3, #0]
    97fa:	2220      	movs	r2, #32
    97fc:	4013      	ands	r3, r2
    97fe:	d010      	beq.n	9822 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    9800:	697b      	ldr	r3, [r7, #20]
    9802:	2220      	movs	r2, #32
    9804:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    9806:	697b      	ldr	r3, [r7, #20]
    9808:	2220      	movs	r2, #32
    980a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    980c:	2310      	movs	r3, #16
    980e:	18fb      	adds	r3, r7, r3
    9810:	881b      	ldrh	r3, [r3, #0]
    9812:	2208      	movs	r2, #8
    9814:	4013      	ands	r3, r2
    9816:	d004      	beq.n	9822 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    9818:	69bb      	ldr	r3, [r7, #24]
    981a:	699b      	ldr	r3, [r3, #24]
    981c:	69ba      	ldr	r2, [r7, #24]
    981e:	0010      	movs	r0, r2
    9820:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    9822:	2312      	movs	r3, #18
    9824:	18fb      	adds	r3, r7, r3
    9826:	881b      	ldrh	r3, [r3, #0]
    9828:	2208      	movs	r2, #8
    982a:	4013      	ands	r3, r2
    982c:	d010      	beq.n	9850 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    982e:	697b      	ldr	r3, [r7, #20]
    9830:	2208      	movs	r2, #8
    9832:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    9834:	697b      	ldr	r3, [r7, #20]
    9836:	2208      	movs	r2, #8
    9838:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    983a:	2310      	movs	r3, #16
    983c:	18fb      	adds	r3, r7, r3
    983e:	881b      	ldrh	r3, [r3, #0]
    9840:	2220      	movs	r2, #32
    9842:	4013      	ands	r3, r2
    9844:	d004      	beq.n	9850 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    9846:	69bb      	ldr	r3, [r7, #24]
    9848:	6a1b      	ldr	r3, [r3, #32]
    984a:	69ba      	ldr	r2, [r7, #24]
    984c:	0010      	movs	r0, r2
    984e:	4798      	blx	r3
		}
	}
#endif
}
    9850:	46c0      	nop			; (mov r8, r8)
    9852:	46bd      	mov	sp, r7
    9854:	b008      	add	sp, #32
    9856:	bd80      	pop	{r7, pc}

00009858 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    9858:	b580      	push	{r7, lr}
    985a:	b082      	sub	sp, #8
    985c:	af00      	add	r7, sp, #0
    985e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    9860:	687b      	ldr	r3, [r7, #4]
    9862:	2201      	movs	r2, #1
    9864:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    9866:	687b      	ldr	r3, [r7, #4]
    9868:	2200      	movs	r2, #0
    986a:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    986c:	687b      	ldr	r3, [r7, #4]
    986e:	2206      	movs	r2, #6
    9870:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    9872:	687b      	ldr	r3, [r7, #4]
    9874:	2200      	movs	r2, #0
    9876:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    9878:	687b      	ldr	r3, [r7, #4]
    987a:	2200      	movs	r2, #0
    987c:	725a      	strb	r2, [r3, #9]
}
    987e:	46c0      	nop			; (mov r8, r8)
    9880:	46bd      	mov	sp, r7
    9882:	b002      	add	sp, #8
    9884:	bd80      	pop	{r7, pc}
    9886:	46c0      	nop			; (mov r8, r8)

00009888 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9888:	b580      	push	{r7, lr}
    988a:	b082      	sub	sp, #8
    988c:	af00      	add	r7, sp, #0
    988e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9890:	687b      	ldr	r3, [r7, #4]
    9892:	2200      	movs	r2, #0
    9894:	701a      	strb	r2, [r3, #0]
}
    9896:	46c0      	nop			; (mov r8, r8)
    9898:	46bd      	mov	sp, r7
    989a:	b002      	add	sp, #8
    989c:	bd80      	pop	{r7, pc}
    989e:	46c0      	nop			; (mov r8, r8)

000098a0 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    98a0:	b580      	push	{r7, lr}
    98a2:	b082      	sub	sp, #8
    98a4:	af00      	add	r7, sp, #0
    98a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    98a8:	687b      	ldr	r3, [r7, #4]
    98aa:	2200      	movs	r2, #0
    98ac:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    98ae:	687b      	ldr	r3, [r7, #4]
    98b0:	2204      	movs	r2, #4
    98b2:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    98b4:	687b      	ldr	r3, [r7, #4]
    98b6:	2200      	movs	r2, #0
    98b8:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    98ba:	687b      	ldr	r3, [r7, #4]
    98bc:	2280      	movs	r2, #128	; 0x80
    98be:	0212      	lsls	r2, r2, #8
    98c0:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	2200      	movs	r2, #0
    98c6:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	2201      	movs	r2, #1
    98cc:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    98ce:	687b      	ldr	r3, [r7, #4]
    98d0:	2200      	movs	r2, #0
    98d2:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	2201      	movs	r2, #1
    98d8:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    98da:	687b      	ldr	r3, [r7, #4]
    98dc:	2200      	movs	r2, #0
    98de:	739a      	strb	r2, [r3, #14]
}
    98e0:	46c0      	nop			; (mov r8, r8)
    98e2:	46bd      	mov	sp, r7
    98e4:	b002      	add	sp, #8
    98e6:	bd80      	pop	{r7, pc}

000098e8 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    98e8:	b580      	push	{r7, lr}
    98ea:	b082      	sub	sp, #8
    98ec:	af00      	add	r7, sp, #0
    98ee:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    98f0:	687b      	ldr	r3, [r7, #4]
    98f2:	2203      	movs	r2, #3
    98f4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    98f6:	687b      	ldr	r3, [r7, #4]
    98f8:	2200      	movs	r2, #0
    98fa:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	2201      	movs	r2, #1
    9900:	709a      	strb	r2, [r3, #2]
}
    9902:	46c0      	nop			; (mov r8, r8)
    9904:	46bd      	mov	sp, r7
    9906:	b002      	add	sp, #8
    9908:	bd80      	pop	{r7, pc}
    990a:	46c0      	nop			; (mov r8, r8)

0000990c <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    990c:	b580      	push	{r7, lr}
    990e:	b082      	sub	sp, #8
    9910:	af00      	add	r7, sp, #0
    9912:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    9914:	687b      	ldr	r3, [r7, #4]
    9916:	2200      	movs	r2, #0
    9918:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    991a:	687b      	ldr	r3, [r7, #4]
    991c:	2200      	movs	r2, #0
    991e:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	2200      	movs	r2, #0
    9924:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    9926:	687b      	ldr	r3, [r7, #4]
    9928:	2200      	movs	r2, #0
    992a:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    992c:	687b      	ldr	r3, [r7, #4]
    992e:	2200      	movs	r2, #0
    9930:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    9932:	687b      	ldr	r3, [r7, #4]
    9934:	2201      	movs	r2, #1
    9936:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	2207      	movs	r2, #7
    993c:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	223f      	movs	r2, #63	; 0x3f
    9942:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    9944:	687b      	ldr	r3, [r7, #4]
    9946:	2201      	movs	r2, #1
    9948:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    994a:	687b      	ldr	r3, [r7, #4]
    994c:	2201      	movs	r2, #1
    994e:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    9950:	687b      	ldr	r3, [r7, #4]
    9952:	2206      	movs	r2, #6
    9954:	821a      	strh	r2, [r3, #16]
}
    9956:	46c0      	nop			; (mov r8, r8)
    9958:	46bd      	mov	sp, r7
    995a:	b002      	add	sp, #8
    995c:	bd80      	pop	{r7, pc}
    995e:	46c0      	nop			; (mov r8, r8)

00009960 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    9960:	b580      	push	{r7, lr}
    9962:	b082      	sub	sp, #8
    9964:	af00      	add	r7, sp, #0
    9966:	0002      	movs	r2, r0
    9968:	1dfb      	adds	r3, r7, #7
    996a:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    996c:	4a03      	ldr	r2, [pc, #12]	; (997c <system_cpu_clock_set_divider+0x1c>)
    996e:	1dfb      	adds	r3, r7, #7
    9970:	781b      	ldrb	r3, [r3, #0]
    9972:	7213      	strb	r3, [r2, #8]
}
    9974:	46c0      	nop			; (mov r8, r8)
    9976:	46bd      	mov	sp, r7
    9978:	b002      	add	sp, #8
    997a:	bd80      	pop	{r7, pc}
    997c:	40000400 	.word	0x40000400

00009980 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    9980:	b580      	push	{r7, lr}
    9982:	b082      	sub	sp, #8
    9984:	af00      	add	r7, sp, #0
    9986:	0002      	movs	r2, r0
    9988:	1dfb      	adds	r3, r7, #7
    998a:	701a      	strb	r2, [r3, #0]
    998c:	1dbb      	adds	r3, r7, #6
    998e:	1c0a      	adds	r2, r1, #0
    9990:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9992:	1dfb      	adds	r3, r7, #7
    9994:	781b      	ldrb	r3, [r3, #0]
    9996:	2b01      	cmp	r3, #1
    9998:	d008      	beq.n	99ac <system_apb_clock_set_divider+0x2c>
    999a:	2b02      	cmp	r3, #2
    999c:	d00b      	beq.n	99b6 <system_apb_clock_set_divider+0x36>
    999e:	2b00      	cmp	r3, #0
    99a0:	d10e      	bne.n	99c0 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    99a2:	4a0b      	ldr	r2, [pc, #44]	; (99d0 <system_apb_clock_set_divider+0x50>)
    99a4:	1dbb      	adds	r3, r7, #6
    99a6:	781b      	ldrb	r3, [r3, #0]
    99a8:	7253      	strb	r3, [r2, #9]
			break;
    99aa:	e00b      	b.n	99c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    99ac:	4a08      	ldr	r2, [pc, #32]	; (99d0 <system_apb_clock_set_divider+0x50>)
    99ae:	1dbb      	adds	r3, r7, #6
    99b0:	781b      	ldrb	r3, [r3, #0]
    99b2:	7293      	strb	r3, [r2, #10]
			break;
    99b4:	e006      	b.n	99c4 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    99b6:	4a06      	ldr	r2, [pc, #24]	; (99d0 <system_apb_clock_set_divider+0x50>)
    99b8:	1dbb      	adds	r3, r7, #6
    99ba:	781b      	ldrb	r3, [r3, #0]
    99bc:	72d3      	strb	r3, [r2, #11]
			break;
    99be:	e001      	b.n	99c4 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    99c0:	2317      	movs	r3, #23
    99c2:	e000      	b.n	99c6 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    99c4:	2300      	movs	r3, #0
}
    99c6:	0018      	movs	r0, r3
    99c8:	46bd      	mov	sp, r7
    99ca:	b002      	add	sp, #8
    99cc:	bd80      	pop	{r7, pc}
    99ce:	46c0      	nop			; (mov r8, r8)
    99d0:	40000400 	.word	0x40000400

000099d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b082      	sub	sp, #8
    99d8:	af00      	add	r7, sp, #0
    99da:	0002      	movs	r2, r0
    99dc:	1dfb      	adds	r3, r7, #7
    99de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    99e0:	4a08      	ldr	r2, [pc, #32]	; (9a04 <system_flash_set_waitstates+0x30>)
    99e2:	1dfb      	adds	r3, r7, #7
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	210f      	movs	r1, #15
    99e8:	400b      	ands	r3, r1
    99ea:	b2d9      	uxtb	r1, r3
    99ec:	6853      	ldr	r3, [r2, #4]
    99ee:	200f      	movs	r0, #15
    99f0:	4001      	ands	r1, r0
    99f2:	0049      	lsls	r1, r1, #1
    99f4:	201e      	movs	r0, #30
    99f6:	4383      	bics	r3, r0
    99f8:	430b      	orrs	r3, r1
    99fa:	6053      	str	r3, [r2, #4]
}
    99fc:	46c0      	nop			; (mov r8, r8)
    99fe:	46bd      	mov	sp, r7
    9a00:	b002      	add	sp, #8
    9a02:	bd80      	pop	{r7, pc}
    9a04:	41004000 	.word	0x41004000

00009a08 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    9a08:	b580      	push	{r7, lr}
    9a0a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9a0c:	46c0      	nop			; (mov r8, r8)
    9a0e:	4b04      	ldr	r3, [pc, #16]	; (9a20 <_system_dfll_wait_for_sync+0x18>)
    9a10:	68db      	ldr	r3, [r3, #12]
    9a12:	2210      	movs	r2, #16
    9a14:	4013      	ands	r3, r2
    9a16:	d0fa      	beq.n	9a0e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    9a18:	46c0      	nop			; (mov r8, r8)
    9a1a:	46bd      	mov	sp, r7
    9a1c:	bd80      	pop	{r7, pc}
    9a1e:	46c0      	nop			; (mov r8, r8)
    9a20:	40000800 	.word	0x40000800

00009a24 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    9a24:	b580      	push	{r7, lr}
    9a26:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9a28:	4b0c      	ldr	r3, [pc, #48]	; (9a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9a2a:	2202      	movs	r2, #2
    9a2c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9a2e:	4b0c      	ldr	r3, [pc, #48]	; (9a60 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9a30:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9a32:	4a0a      	ldr	r2, [pc, #40]	; (9a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9a34:	4b0b      	ldr	r3, [pc, #44]	; (9a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9a36:	689b      	ldr	r3, [r3, #8]
    9a38:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    9a3a:	4a08      	ldr	r2, [pc, #32]	; (9a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9a3c:	4b09      	ldr	r3, [pc, #36]	; (9a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9a3e:	685b      	ldr	r3, [r3, #4]
    9a40:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    9a42:	4b06      	ldr	r3, [pc, #24]	; (9a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9a44:	2200      	movs	r2, #0
    9a46:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9a48:	4b05      	ldr	r3, [pc, #20]	; (9a60 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9a4a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    9a4c:	4a03      	ldr	r2, [pc, #12]	; (9a5c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9a4e:	4b05      	ldr	r3, [pc, #20]	; (9a64 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9a50:	681b      	ldr	r3, [r3, #0]
    9a52:	b29b      	uxth	r3, r3
    9a54:	8493      	strh	r3, [r2, #36]	; 0x24
}
    9a56:	46c0      	nop			; (mov r8, r8)
    9a58:	46bd      	mov	sp, r7
    9a5a:	bd80      	pop	{r7, pc}
    9a5c:	40000800 	.word	0x40000800
    9a60:	00009a09 	.word	0x00009a09
    9a64:	20000108 	.word	0x20000108

00009a68 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    9a68:	b580      	push	{r7, lr}
    9a6a:	b082      	sub	sp, #8
    9a6c:	af00      	add	r7, sp, #0
    9a6e:	0002      	movs	r2, r0
    9a70:	1dfb      	adds	r3, r7, #7
    9a72:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9a74:	1dfb      	adds	r3, r7, #7
    9a76:	781b      	ldrb	r3, [r3, #0]
    9a78:	2b08      	cmp	r3, #8
    9a7a:	d840      	bhi.n	9afe <system_clock_source_get_hz+0x96>
    9a7c:	009a      	lsls	r2, r3, #2
    9a7e:	4b22      	ldr	r3, [pc, #136]	; (9b08 <system_clock_source_get_hz+0xa0>)
    9a80:	18d3      	adds	r3, r2, r3
    9a82:	681b      	ldr	r3, [r3, #0]
    9a84:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    9a86:	4b21      	ldr	r3, [pc, #132]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9a88:	691b      	ldr	r3, [r3, #16]
    9a8a:	e039      	b.n	9b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    9a8c:	4b20      	ldr	r3, [pc, #128]	; (9b10 <system_clock_source_get_hz+0xa8>)
    9a8e:	6a1b      	ldr	r3, [r3, #32]
    9a90:	059b      	lsls	r3, r3, #22
    9a92:	0f9b      	lsrs	r3, r3, #30
    9a94:	b2db      	uxtb	r3, r3
    9a96:	001a      	movs	r2, r3
    9a98:	4b1e      	ldr	r3, [pc, #120]	; (9b14 <system_clock_source_get_hz+0xac>)
    9a9a:	40d3      	lsrs	r3, r2
    9a9c:	e030      	b.n	9b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    9a9e:	2380      	movs	r3, #128	; 0x80
    9aa0:	021b      	lsls	r3, r3, #8
    9aa2:	e02d      	b.n	9b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    9aa4:	2380      	movs	r3, #128	; 0x80
    9aa6:	021b      	lsls	r3, r3, #8
    9aa8:	e02a      	b.n	9b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    9aaa:	4b18      	ldr	r3, [pc, #96]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9aac:	695b      	ldr	r3, [r3, #20]
    9aae:	e027      	b.n	9b00 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9ab0:	4b16      	ldr	r3, [pc, #88]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9ab2:	681b      	ldr	r3, [r3, #0]
    9ab4:	2202      	movs	r2, #2
    9ab6:	4013      	ands	r3, r2
    9ab8:	d101      	bne.n	9abe <system_clock_source_get_hz+0x56>
			return 0;
    9aba:	2300      	movs	r3, #0
    9abc:	e020      	b.n	9b00 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    9abe:	4b16      	ldr	r3, [pc, #88]	; (9b18 <system_clock_source_get_hz+0xb0>)
    9ac0:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    9ac2:	4b12      	ldr	r3, [pc, #72]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9ac4:	681b      	ldr	r3, [r3, #0]
    9ac6:	2204      	movs	r2, #4
    9ac8:	4013      	ands	r3, r2
    9aca:	d009      	beq.n	9ae0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9acc:	2000      	movs	r0, #0
    9ace:	4b13      	ldr	r3, [pc, #76]	; (9b1c <system_clock_source_get_hz+0xb4>)
    9ad0:	4798      	blx	r3
    9ad2:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    9ad4:	4b0d      	ldr	r3, [pc, #52]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9ad6:	689b      	ldr	r3, [r3, #8]
    9ad8:	041b      	lsls	r3, r3, #16
    9ada:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9adc:	4353      	muls	r3, r2
    9ade:	e00f      	b.n	9b00 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    9ae0:	4b0f      	ldr	r3, [pc, #60]	; (9b20 <system_clock_source_get_hz+0xb8>)
    9ae2:	e00d      	b.n	9b00 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9ae4:	4a0a      	ldr	r2, [pc, #40]	; (9b10 <system_clock_source_get_hz+0xa8>)
    9ae6:	2350      	movs	r3, #80	; 0x50
    9ae8:	5cd3      	ldrb	r3, [r2, r3]
    9aea:	b2db      	uxtb	r3, r3
    9aec:	001a      	movs	r2, r3
    9aee:	2304      	movs	r3, #4
    9af0:	4013      	ands	r3, r2
    9af2:	d101      	bne.n	9af8 <system_clock_source_get_hz+0x90>
			return 0;
    9af4:	2300      	movs	r3, #0
    9af6:	e003      	b.n	9b00 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    9af8:	4b04      	ldr	r3, [pc, #16]	; (9b0c <system_clock_source_get_hz+0xa4>)
    9afa:	68db      	ldr	r3, [r3, #12]
    9afc:	e000      	b.n	9b00 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    9afe:	2300      	movs	r3, #0
	}
}
    9b00:	0018      	movs	r0, r3
    9b02:	46bd      	mov	sp, r7
    9b04:	b002      	add	sp, #8
    9b06:	bd80      	pop	{r7, pc}
    9b08:	00012fbc 	.word	0x00012fbc
    9b0c:	20000108 	.word	0x20000108
    9b10:	40000800 	.word	0x40000800
    9b14:	007a1200 	.word	0x007a1200
    9b18:	00009a09 	.word	0x00009a09
    9b1c:	0000a5c1 	.word	0x0000a5c1
    9b20:	02dc6c00 	.word	0x02dc6c00

00009b24 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    9b24:	b580      	push	{r7, lr}
    9b26:	b084      	sub	sp, #16
    9b28:	af00      	add	r7, sp, #0
    9b2a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    9b2c:	4b1a      	ldr	r3, [pc, #104]	; (9b98 <system_clock_source_osc8m_set_config+0x74>)
    9b2e:	6a1b      	ldr	r3, [r3, #32]
    9b30:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9b32:	687b      	ldr	r3, [r7, #4]
    9b34:	781b      	ldrb	r3, [r3, #0]
    9b36:	1c1a      	adds	r2, r3, #0
    9b38:	2303      	movs	r3, #3
    9b3a:	4013      	ands	r3, r2
    9b3c:	b2da      	uxtb	r2, r3
    9b3e:	230d      	movs	r3, #13
    9b40:	18fb      	adds	r3, r7, r3
    9b42:	2103      	movs	r1, #3
    9b44:	400a      	ands	r2, r1
    9b46:	0010      	movs	r0, r2
    9b48:	781a      	ldrb	r2, [r3, #0]
    9b4a:	2103      	movs	r1, #3
    9b4c:	438a      	bics	r2, r1
    9b4e:	1c11      	adds	r1, r2, #0
    9b50:	1c02      	adds	r2, r0, #0
    9b52:	430a      	orrs	r2, r1
    9b54:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	789a      	ldrb	r2, [r3, #2]
    9b5a:	230c      	movs	r3, #12
    9b5c:	18fb      	adds	r3, r7, r3
    9b5e:	01d0      	lsls	r0, r2, #7
    9b60:	781a      	ldrb	r2, [r3, #0]
    9b62:	217f      	movs	r1, #127	; 0x7f
    9b64:	400a      	ands	r2, r1
    9b66:	1c11      	adds	r1, r2, #0
    9b68:	1c02      	adds	r2, r0, #0
    9b6a:	430a      	orrs	r2, r1
    9b6c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9b6e:	687b      	ldr	r3, [r7, #4]
    9b70:	785a      	ldrb	r2, [r3, #1]
    9b72:	230c      	movs	r3, #12
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	2101      	movs	r1, #1
    9b78:	400a      	ands	r2, r1
    9b7a:	0190      	lsls	r0, r2, #6
    9b7c:	781a      	ldrb	r2, [r3, #0]
    9b7e:	2140      	movs	r1, #64	; 0x40
    9b80:	438a      	bics	r2, r1
    9b82:	1c11      	adds	r1, r2, #0
    9b84:	1c02      	adds	r2, r0, #0
    9b86:	430a      	orrs	r2, r1
    9b88:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    9b8a:	4b03      	ldr	r3, [pc, #12]	; (9b98 <system_clock_source_osc8m_set_config+0x74>)
    9b8c:	68fa      	ldr	r2, [r7, #12]
    9b8e:	621a      	str	r2, [r3, #32]
}
    9b90:	46c0      	nop			; (mov r8, r8)
    9b92:	46bd      	mov	sp, r7
    9b94:	b004      	add	sp, #16
    9b96:	bd80      	pop	{r7, pc}
    9b98:	40000800 	.word	0x40000800

00009b9c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    9b9c:	b580      	push	{r7, lr}
    9b9e:	b084      	sub	sp, #16
    9ba0:	af00      	add	r7, sp, #0
    9ba2:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    9ba4:	4a43      	ldr	r2, [pc, #268]	; (9cb4 <system_clock_source_xosc32k_set_config+0x118>)
    9ba6:	230c      	movs	r3, #12
    9ba8:	18fb      	adds	r3, r7, r3
    9baa:	8a92      	ldrh	r2, [r2, #20]
    9bac:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    9bae:	687b      	ldr	r3, [r7, #4]
    9bb0:	785b      	ldrb	r3, [r3, #1]
    9bb2:	1c1a      	adds	r2, r3, #0
    9bb4:	2307      	movs	r3, #7
    9bb6:	4013      	ands	r3, r2
    9bb8:	b2da      	uxtb	r2, r3
    9bba:	230c      	movs	r3, #12
    9bbc:	18fb      	adds	r3, r7, r3
    9bbe:	2107      	movs	r1, #7
    9bc0:	400a      	ands	r2, r1
    9bc2:	0010      	movs	r0, r2
    9bc4:	785a      	ldrb	r2, [r3, #1]
    9bc6:	2107      	movs	r1, #7
    9bc8:	438a      	bics	r2, r1
    9bca:	1c11      	adds	r1, r2, #0
    9bcc:	1c02      	adds	r2, r0, #0
    9bce:	430a      	orrs	r2, r1
    9bd0:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    9bd2:	687b      	ldr	r3, [r7, #4]
    9bd4:	781b      	ldrb	r3, [r3, #0]
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d106      	bne.n	9be8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    9bda:	230c      	movs	r3, #12
    9bdc:	18fb      	adds	r3, r7, r3
    9bde:	781a      	ldrb	r2, [r3, #0]
    9be0:	2104      	movs	r1, #4
    9be2:	430a      	orrs	r2, r1
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	e005      	b.n	9bf4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    9be8:	230c      	movs	r3, #12
    9bea:	18fb      	adds	r3, r7, r3
    9bec:	781a      	ldrb	r2, [r3, #0]
    9bee:	2104      	movs	r1, #4
    9bf0:	438a      	bics	r2, r1
    9bf2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    9bf4:	687b      	ldr	r3, [r7, #4]
    9bf6:	789a      	ldrb	r2, [r3, #2]
    9bf8:	230c      	movs	r3, #12
    9bfa:	18fb      	adds	r3, r7, r3
    9bfc:	2101      	movs	r1, #1
    9bfe:	400a      	ands	r2, r1
    9c00:	0150      	lsls	r0, r2, #5
    9c02:	781a      	ldrb	r2, [r3, #0]
    9c04:	2120      	movs	r1, #32
    9c06:	438a      	bics	r2, r1
    9c08:	1c11      	adds	r1, r2, #0
    9c0a:	1c02      	adds	r2, r0, #0
    9c0c:	430a      	orrs	r2, r1
    9c0e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    9c10:	687b      	ldr	r3, [r7, #4]
    9c12:	78da      	ldrb	r2, [r3, #3]
    9c14:	230c      	movs	r3, #12
    9c16:	18fb      	adds	r3, r7, r3
    9c18:	2101      	movs	r1, #1
    9c1a:	400a      	ands	r2, r1
    9c1c:	0110      	lsls	r0, r2, #4
    9c1e:	781a      	ldrb	r2, [r3, #0]
    9c20:	2110      	movs	r1, #16
    9c22:	438a      	bics	r2, r1
    9c24:	1c11      	adds	r1, r2, #0
    9c26:	1c02      	adds	r2, r0, #0
    9c28:	430a      	orrs	r2, r1
    9c2a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    9c2c:	687b      	ldr	r3, [r7, #4]
    9c2e:	791a      	ldrb	r2, [r3, #4]
    9c30:	230c      	movs	r3, #12
    9c32:	18fb      	adds	r3, r7, r3
    9c34:	2101      	movs	r1, #1
    9c36:	400a      	ands	r2, r1
    9c38:	00d0      	lsls	r0, r2, #3
    9c3a:	781a      	ldrb	r2, [r3, #0]
    9c3c:	2108      	movs	r1, #8
    9c3e:	438a      	bics	r2, r1
    9c40:	1c11      	adds	r1, r2, #0
    9c42:	1c02      	adds	r2, r0, #0
    9c44:	430a      	orrs	r2, r1
    9c46:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    9c48:	687b      	ldr	r3, [r7, #4]
    9c4a:	7b5a      	ldrb	r2, [r3, #13]
    9c4c:	230c      	movs	r3, #12
    9c4e:	18fb      	adds	r3, r7, r3
    9c50:	01d0      	lsls	r0, r2, #7
    9c52:	781a      	ldrb	r2, [r3, #0]
    9c54:	217f      	movs	r1, #127	; 0x7f
    9c56:	400a      	ands	r2, r1
    9c58:	1c11      	adds	r1, r2, #0
    9c5a:	1c02      	adds	r2, r0, #0
    9c5c:	430a      	orrs	r2, r1
    9c5e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9c60:	687b      	ldr	r3, [r7, #4]
    9c62:	7b1a      	ldrb	r2, [r3, #12]
    9c64:	230c      	movs	r3, #12
    9c66:	18fb      	adds	r3, r7, r3
    9c68:	2101      	movs	r1, #1
    9c6a:	400a      	ands	r2, r1
    9c6c:	0190      	lsls	r0, r2, #6
    9c6e:	781a      	ldrb	r2, [r3, #0]
    9c70:	2140      	movs	r1, #64	; 0x40
    9c72:	438a      	bics	r2, r1
    9c74:	1c11      	adds	r1, r2, #0
    9c76:	1c02      	adds	r2, r0, #0
    9c78:	430a      	orrs	r2, r1
    9c7a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    9c7c:	687b      	ldr	r3, [r7, #4]
    9c7e:	7b9a      	ldrb	r2, [r3, #14]
    9c80:	230c      	movs	r3, #12
    9c82:	18fb      	adds	r3, r7, r3
    9c84:	2101      	movs	r1, #1
    9c86:	400a      	ands	r2, r1
    9c88:	0110      	lsls	r0, r2, #4
    9c8a:	785a      	ldrb	r2, [r3, #1]
    9c8c:	2110      	movs	r1, #16
    9c8e:	438a      	bics	r2, r1
    9c90:	1c11      	adds	r1, r2, #0
    9c92:	1c02      	adds	r2, r0, #0
    9c94:	430a      	orrs	r2, r1
    9c96:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    9c98:	687b      	ldr	r3, [r7, #4]
    9c9a:	689a      	ldr	r2, [r3, #8]
    9c9c:	4b06      	ldr	r3, [pc, #24]	; (9cb8 <system_clock_source_xosc32k_set_config+0x11c>)
    9c9e:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    9ca0:	4a04      	ldr	r2, [pc, #16]	; (9cb4 <system_clock_source_xosc32k_set_config+0x118>)
    9ca2:	230c      	movs	r3, #12
    9ca4:	18fb      	adds	r3, r7, r3
    9ca6:	881b      	ldrh	r3, [r3, #0]
    9ca8:	8293      	strh	r3, [r2, #20]
}
    9caa:	46c0      	nop			; (mov r8, r8)
    9cac:	46bd      	mov	sp, r7
    9cae:	b004      	add	sp, #16
    9cb0:	bd80      	pop	{r7, pc}
    9cb2:	46c0      	nop			; (mov r8, r8)
    9cb4:	40000800 	.word	0x40000800
    9cb8:	20000108 	.word	0x20000108

00009cbc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    9cbc:	b580      	push	{r7, lr}
    9cbe:	b082      	sub	sp, #8
    9cc0:	af00      	add	r7, sp, #0
    9cc2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	7a1b      	ldrb	r3, [r3, #8]
    9cc8:	029b      	lsls	r3, r3, #10
    9cca:	041b      	lsls	r3, r3, #16
    9ccc:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9cce:	687b      	ldr	r3, [r7, #4]
    9cd0:	895b      	ldrh	r3, [r3, #10]
    9cd2:	059b      	lsls	r3, r3, #22
    9cd4:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9cd6:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    9cd8:	4b2a      	ldr	r3, [pc, #168]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9cda:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9cdc:	687b      	ldr	r3, [r7, #4]
    9cde:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    9ce0:	687b      	ldr	r3, [r7, #4]
    9ce2:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9ce4:	4313      	orrs	r3, r2
    9ce6:	b2db      	uxtb	r3, r3
    9ce8:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    9cea:	687b      	ldr	r3, [r7, #4]
    9cec:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    9cee:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    9cf0:	687a      	ldr	r2, [r7, #4]
    9cf2:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    9cf4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9cf6:	687b      	ldr	r3, [r7, #4]
    9cf8:	785b      	ldrb	r3, [r3, #1]
    9cfa:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    9cfc:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    9cfe:	4b21      	ldr	r3, [pc, #132]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d00:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	781b      	ldrb	r3, [r3, #0]
    9d06:	2b04      	cmp	r3, #4
    9d08:	d116      	bne.n	9d38 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9d0a:	687b      	ldr	r3, [r7, #4]
    9d0c:	7b1b      	ldrb	r3, [r3, #12]
    9d0e:	069b      	lsls	r3, r3, #26
    9d10:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9d12:	687b      	ldr	r3, [r7, #4]
    9d14:	89db      	ldrh	r3, [r3, #14]
    9d16:	041b      	lsls	r3, r3, #16
    9d18:	0019      	movs	r1, r3
    9d1a:	4b1b      	ldr	r3, [pc, #108]	; (9d88 <system_clock_source_dfll_set_config+0xcc>)
    9d1c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9d1e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9d20:	687a      	ldr	r2, [r7, #4]
    9d22:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9d24:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    9d26:	4b17      	ldr	r3, [pc, #92]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d28:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    9d2a:	4b16      	ldr	r3, [pc, #88]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d2c:	681b      	ldr	r3, [r3, #0]
    9d2e:	687a      	ldr	r2, [r7, #4]
    9d30:	7812      	ldrb	r2, [r2, #0]
    9d32:	431a      	orrs	r2, r3
    9d34:	4b13      	ldr	r3, [pc, #76]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d36:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	781b      	ldrb	r3, [r3, #0]
    9d3c:	2b20      	cmp	r3, #32
    9d3e:	d11c      	bne.n	9d7a <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9d40:	687b      	ldr	r3, [r7, #4]
    9d42:	7b1b      	ldrb	r3, [r3, #12]
    9d44:	069b      	lsls	r3, r3, #26
    9d46:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9d48:	687b      	ldr	r3, [r7, #4]
    9d4a:	89db      	ldrh	r3, [r3, #14]
    9d4c:	041b      	lsls	r3, r3, #16
    9d4e:	0019      	movs	r1, r3
    9d50:	4b0d      	ldr	r3, [pc, #52]	; (9d88 <system_clock_source_dfll_set_config+0xcc>)
    9d52:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9d54:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9d56:	687a      	ldr	r2, [r7, #4]
    9d58:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9d5a:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    9d5c:	4b09      	ldr	r3, [pc, #36]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d5e:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    9d60:	4b08      	ldr	r3, [pc, #32]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d62:	681b      	ldr	r3, [r3, #0]
    9d64:	687a      	ldr	r2, [r7, #4]
    9d66:	7812      	ldrb	r2, [r2, #0]
    9d68:	2104      	movs	r1, #4
    9d6a:	430a      	orrs	r2, r1
    9d6c:	b2d2      	uxtb	r2, r2
    9d6e:	4313      	orrs	r3, r2
    9d70:	2280      	movs	r2, #128	; 0x80
    9d72:	00d2      	lsls	r2, r2, #3
    9d74:	431a      	orrs	r2, r3
    9d76:	4b03      	ldr	r3, [pc, #12]	; (9d84 <system_clock_source_dfll_set_config+0xc8>)
    9d78:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    9d7a:	46c0      	nop			; (mov r8, r8)
    9d7c:	46bd      	mov	sp, r7
    9d7e:	b002      	add	sp, #8
    9d80:	bd80      	pop	{r7, pc}
    9d82:	46c0      	nop			; (mov r8, r8)
    9d84:	20000108 	.word	0x20000108
    9d88:	03ff0000 	.word	0x03ff0000

00009d8c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    9d8c:	b580      	push	{r7, lr}
    9d8e:	b082      	sub	sp, #8
    9d90:	af00      	add	r7, sp, #0
    9d92:	0002      	movs	r2, r0
    9d94:	1dfb      	adds	r3, r7, #7
    9d96:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9d98:	1dfb      	adds	r3, r7, #7
    9d9a:	781b      	ldrb	r3, [r3, #0]
    9d9c:	2b08      	cmp	r3, #8
    9d9e:	d83b      	bhi.n	9e18 <system_clock_source_enable+0x8c>
    9da0:	009a      	lsls	r2, r3, #2
    9da2:	4b21      	ldr	r3, [pc, #132]	; (9e28 <system_clock_source_enable+0x9c>)
    9da4:	18d3      	adds	r3, r2, r3
    9da6:	681b      	ldr	r3, [r3, #0]
    9da8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    9daa:	4b20      	ldr	r3, [pc, #128]	; (9e2c <system_clock_source_enable+0xa0>)
    9dac:	4a1f      	ldr	r2, [pc, #124]	; (9e2c <system_clock_source_enable+0xa0>)
    9dae:	6a12      	ldr	r2, [r2, #32]
    9db0:	2102      	movs	r1, #2
    9db2:	430a      	orrs	r2, r1
    9db4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    9db6:	2300      	movs	r3, #0
    9db8:	e031      	b.n	9e1e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    9dba:	4b1c      	ldr	r3, [pc, #112]	; (9e2c <system_clock_source_enable+0xa0>)
    9dbc:	4a1b      	ldr	r2, [pc, #108]	; (9e2c <system_clock_source_enable+0xa0>)
    9dbe:	6992      	ldr	r2, [r2, #24]
    9dc0:	2102      	movs	r1, #2
    9dc2:	430a      	orrs	r2, r1
    9dc4:	619a      	str	r2, [r3, #24]
		break;
    9dc6:	e029      	b.n	9e1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    9dc8:	4a18      	ldr	r2, [pc, #96]	; (9e2c <system_clock_source_enable+0xa0>)
    9dca:	4b18      	ldr	r3, [pc, #96]	; (9e2c <system_clock_source_enable+0xa0>)
    9dcc:	8a1b      	ldrh	r3, [r3, #16]
    9dce:	b29b      	uxth	r3, r3
    9dd0:	2102      	movs	r1, #2
    9dd2:	430b      	orrs	r3, r1
    9dd4:	b29b      	uxth	r3, r3
    9dd6:	8213      	strh	r3, [r2, #16]
		break;
    9dd8:	e020      	b.n	9e1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    9dda:	4a14      	ldr	r2, [pc, #80]	; (9e2c <system_clock_source_enable+0xa0>)
    9ddc:	4b13      	ldr	r3, [pc, #76]	; (9e2c <system_clock_source_enable+0xa0>)
    9dde:	8a9b      	ldrh	r3, [r3, #20]
    9de0:	b29b      	uxth	r3, r3
    9de2:	2102      	movs	r1, #2
    9de4:	430b      	orrs	r3, r1
    9de6:	b29b      	uxth	r3, r3
    9de8:	8293      	strh	r3, [r2, #20]
		break;
    9dea:	e017      	b.n	9e1c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    9dec:	4b10      	ldr	r3, [pc, #64]	; (9e30 <system_clock_source_enable+0xa4>)
    9dee:	681b      	ldr	r3, [r3, #0]
    9df0:	2202      	movs	r2, #2
    9df2:	431a      	orrs	r2, r3
    9df4:	4b0e      	ldr	r3, [pc, #56]	; (9e30 <system_clock_source_enable+0xa4>)
    9df6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    9df8:	4b0e      	ldr	r3, [pc, #56]	; (9e34 <system_clock_source_enable+0xa8>)
    9dfa:	4798      	blx	r3
		break;
    9dfc:	e00e      	b.n	9e1c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    9dfe:	4a0b      	ldr	r2, [pc, #44]	; (9e2c <system_clock_source_enable+0xa0>)
    9e00:	490a      	ldr	r1, [pc, #40]	; (9e2c <system_clock_source_enable+0xa0>)
    9e02:	2344      	movs	r3, #68	; 0x44
    9e04:	5ccb      	ldrb	r3, [r1, r3]
    9e06:	b2db      	uxtb	r3, r3
    9e08:	2102      	movs	r1, #2
    9e0a:	430b      	orrs	r3, r1
    9e0c:	b2d9      	uxtb	r1, r3
    9e0e:	2344      	movs	r3, #68	; 0x44
    9e10:	54d1      	strb	r1, [r2, r3]
		break;
    9e12:	e003      	b.n	9e1c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    9e14:	2300      	movs	r3, #0
    9e16:	e002      	b.n	9e1e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9e18:	2317      	movs	r3, #23
    9e1a:	e000      	b.n	9e1e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    9e1c:	2300      	movs	r3, #0
}
    9e1e:	0018      	movs	r0, r3
    9e20:	46bd      	mov	sp, r7
    9e22:	b002      	add	sp, #8
    9e24:	bd80      	pop	{r7, pc}
    9e26:	46c0      	nop			; (mov r8, r8)
    9e28:	00012fe0 	.word	0x00012fe0
    9e2c:	40000800 	.word	0x40000800
    9e30:	20000108 	.word	0x20000108
    9e34:	00009a25 	.word	0x00009a25

00009e38 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b084      	sub	sp, #16
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	0002      	movs	r2, r0
    9e40:	1dfb      	adds	r3, r7, #7
    9e42:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    9e44:	2300      	movs	r3, #0
    9e46:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    9e48:	1dfb      	adds	r3, r7, #7
    9e4a:	781b      	ldrb	r3, [r3, #0]
    9e4c:	2b08      	cmp	r3, #8
    9e4e:	d821      	bhi.n	9e94 <system_clock_source_is_ready+0x5c>
    9e50:	009a      	lsls	r2, r3, #2
    9e52:	4b18      	ldr	r3, [pc, #96]	; (9eb4 <system_clock_source_is_ready+0x7c>)
    9e54:	18d3      	adds	r3, r2, r3
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    9e5a:	2308      	movs	r3, #8
    9e5c:	60fb      	str	r3, [r7, #12]
		break;
    9e5e:	e01b      	b.n	9e98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    9e60:	2304      	movs	r3, #4
    9e62:	60fb      	str	r3, [r7, #12]
		break;
    9e64:	e018      	b.n	9e98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    9e66:	2301      	movs	r3, #1
    9e68:	60fb      	str	r3, [r7, #12]
		break;
    9e6a:	e015      	b.n	9e98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    9e6c:	2302      	movs	r3, #2
    9e6e:	60fb      	str	r3, [r7, #12]
		break;
    9e70:	e012      	b.n	9e98 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    9e72:	23d0      	movs	r3, #208	; 0xd0
    9e74:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    9e76:	e00f      	b.n	9e98 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    9e78:	4a0f      	ldr	r2, [pc, #60]	; (9eb8 <system_clock_source_is_ready+0x80>)
    9e7a:	2350      	movs	r3, #80	; 0x50
    9e7c:	5cd3      	ldrb	r3, [r2, r3]
    9e7e:	b2db      	uxtb	r3, r3
    9e80:	001a      	movs	r2, r3
    9e82:	2303      	movs	r3, #3
    9e84:	4013      	ands	r3, r2
    9e86:	3b03      	subs	r3, #3
    9e88:	425a      	negs	r2, r3
    9e8a:	4153      	adcs	r3, r2
    9e8c:	b2db      	uxtb	r3, r3
    9e8e:	e00c      	b.n	9eaa <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    9e90:	2301      	movs	r3, #1
    9e92:	e00a      	b.n	9eaa <system_clock_source_is_ready+0x72>

	default:
		return false;
    9e94:	2300      	movs	r3, #0
    9e96:	e008      	b.n	9eaa <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9e98:	4b07      	ldr	r3, [pc, #28]	; (9eb8 <system_clock_source_is_ready+0x80>)
    9e9a:	68db      	ldr	r3, [r3, #12]
    9e9c:	68fa      	ldr	r2, [r7, #12]
    9e9e:	401a      	ands	r2, r3
    9ea0:	68fb      	ldr	r3, [r7, #12]
    9ea2:	1ad3      	subs	r3, r2, r3
    9ea4:	425a      	negs	r2, r3
    9ea6:	4153      	adcs	r3, r2
    9ea8:	b2db      	uxtb	r3, r3
}
    9eaa:	0018      	movs	r0, r3
    9eac:	46bd      	mov	sp, r7
    9eae:	b004      	add	sp, #16
    9eb0:	bd80      	pop	{r7, pc}
    9eb2:	46c0      	nop			; (mov r8, r8)
    9eb4:	00013004 	.word	0x00013004
    9eb8:	40000800 	.word	0x40000800

00009ebc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    9ebc:	b580      	push	{r7, lr}
    9ebe:	b082      	sub	sp, #8
    9ec0:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9ec2:	003b      	movs	r3, r7
    9ec4:	2202      	movs	r2, #2
    9ec6:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9ec8:	2300      	movs	r3, #0
    9eca:	607b      	str	r3, [r7, #4]
    9ecc:	e009      	b.n	9ee2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	b2db      	uxtb	r3, r3
    9ed2:	003a      	movs	r2, r7
    9ed4:	0011      	movs	r1, r2
    9ed6:	0018      	movs	r0, r3
    9ed8:	4b05      	ldr	r3, [pc, #20]	; (9ef0 <_switch_peripheral_gclk+0x34>)
    9eda:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9edc:	687b      	ldr	r3, [r7, #4]
    9ede:	3301      	adds	r3, #1
    9ee0:	607b      	str	r3, [r7, #4]
    9ee2:	687b      	ldr	r3, [r7, #4]
    9ee4:	2b24      	cmp	r3, #36	; 0x24
    9ee6:	d9f2      	bls.n	9ece <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    9ee8:	46c0      	nop			; (mov r8, r8)
    9eea:	46bd      	mov	sp, r7
    9eec:	b002      	add	sp, #8
    9eee:	bd80      	pop	{r7, pc}
    9ef0:	0000a49d 	.word	0x0000a49d

00009ef4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    9ef4:	b580      	push	{r7, lr}
    9ef6:	b0aa      	sub	sp, #168	; 0xa8
    9ef8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    9efa:	4b87      	ldr	r3, [pc, #540]	; (a118 <system_clock_init+0x224>)
    9efc:	22c2      	movs	r2, #194	; 0xc2
    9efe:	00d2      	lsls	r2, r2, #3
    9f00:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    9f02:	2002      	movs	r0, #2
    9f04:	4b85      	ldr	r3, [pc, #532]	; (a11c <system_clock_init+0x228>)
    9f06:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    9f08:	4b85      	ldr	r3, [pc, #532]	; (a120 <system_clock_init+0x22c>)
    9f0a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    9f0c:	2394      	movs	r3, #148	; 0x94
    9f0e:	18fb      	adds	r3, r7, r3
    9f10:	0018      	movs	r0, r3
    9f12:	4b84      	ldr	r3, [pc, #528]	; (a124 <system_clock_init+0x230>)
    9f14:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    9f16:	2394      	movs	r3, #148	; 0x94
    9f18:	18fb      	adds	r3, r7, r3
    9f1a:	2280      	movs	r2, #128	; 0x80
    9f1c:	0212      	lsls	r2, r2, #8
    9f1e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    9f20:	2394      	movs	r3, #148	; 0x94
    9f22:	18fb      	adds	r3, r7, r3
    9f24:	2200      	movs	r2, #0
    9f26:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9f28:	2394      	movs	r3, #148	; 0x94
    9f2a:	18fb      	adds	r3, r7, r3
    9f2c:	2203      	movs	r2, #3
    9f2e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    9f30:	2394      	movs	r3, #148	; 0x94
    9f32:	18fb      	adds	r3, r7, r3
    9f34:	2200      	movs	r2, #0
    9f36:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    9f38:	2394      	movs	r3, #148	; 0x94
    9f3a:	18fb      	adds	r3, r7, r3
    9f3c:	2200      	movs	r2, #0
    9f3e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    9f40:	2394      	movs	r3, #148	; 0x94
    9f42:	18fb      	adds	r3, r7, r3
    9f44:	2201      	movs	r2, #1
    9f46:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    9f48:	2394      	movs	r3, #148	; 0x94
    9f4a:	18fb      	adds	r3, r7, r3
    9f4c:	2200      	movs	r2, #0
    9f4e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    9f50:	2394      	movs	r3, #148	; 0x94
    9f52:	18fb      	adds	r3, r7, r3
    9f54:	2200      	movs	r2, #0
    9f56:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    9f58:	2394      	movs	r3, #148	; 0x94
    9f5a:	18fb      	adds	r3, r7, r3
    9f5c:	0018      	movs	r0, r3
    9f5e:	4b72      	ldr	r3, [pc, #456]	; (a128 <system_clock_init+0x234>)
    9f60:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    9f62:	2005      	movs	r0, #5
    9f64:	4b71      	ldr	r3, [pc, #452]	; (a12c <system_clock_init+0x238>)
    9f66:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    9f68:	46c0      	nop			; (mov r8, r8)
    9f6a:	2005      	movs	r0, #5
    9f6c:	4b70      	ldr	r3, [pc, #448]	; (a130 <system_clock_init+0x23c>)
    9f6e:	4798      	blx	r3
    9f70:	0003      	movs	r3, r0
    9f72:	001a      	movs	r2, r3
    9f74:	2301      	movs	r3, #1
    9f76:	4053      	eors	r3, r2
    9f78:	b2db      	uxtb	r3, r3
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d1f5      	bne.n	9f6a <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    9f7e:	4a66      	ldr	r2, [pc, #408]	; (a118 <system_clock_init+0x224>)
    9f80:	8a93      	ldrh	r3, [r2, #20]
    9f82:	2180      	movs	r1, #128	; 0x80
    9f84:	430b      	orrs	r3, r1
    9f86:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    9f88:	2380      	movs	r3, #128	; 0x80
    9f8a:	18fb      	adds	r3, r7, r3
    9f8c:	0018      	movs	r0, r3
    9f8e:	4b69      	ldr	r3, [pc, #420]	; (a134 <system_clock_init+0x240>)
    9f90:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9f92:	2380      	movs	r3, #128	; 0x80
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	2204      	movs	r2, #4
    9f98:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    9f9a:	2380      	movs	r3, #128	; 0x80
    9f9c:	18fb      	adds	r3, r7, r3
    9f9e:	2200      	movs	r2, #0
    9fa0:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    9fa2:	4b65      	ldr	r3, [pc, #404]	; (a138 <system_clock_init+0x244>)
    9fa4:	681b      	ldr	r3, [r3, #0]
    9fa6:	0e9b      	lsrs	r3, r3, #26
    9fa8:	22a4      	movs	r2, #164	; 0xa4
    9faa:	18ba      	adds	r2, r7, r2
    9fac:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    9fae:	23a4      	movs	r3, #164	; 0xa4
    9fb0:	18fb      	adds	r3, r7, r3
    9fb2:	681b      	ldr	r3, [r3, #0]
    9fb4:	2b3f      	cmp	r3, #63	; 0x3f
    9fb6:	d103      	bne.n	9fc0 <system_clock_init+0xcc>
		coarse = 0x1f;
    9fb8:	231f      	movs	r3, #31
    9fba:	22a4      	movs	r2, #164	; 0xa4
    9fbc:	18ba      	adds	r2, r7, r2
    9fbe:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    9fc0:	23a4      	movs	r3, #164	; 0xa4
    9fc2:	18fb      	adds	r3, r7, r3
    9fc4:	681b      	ldr	r3, [r3, #0]
    9fc6:	b2da      	uxtb	r2, r3
    9fc8:	2380      	movs	r3, #128	; 0x80
    9fca:	18fb      	adds	r3, r7, r3
    9fcc:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    9fce:	2380      	movs	r3, #128	; 0x80
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	2200      	movs	r2, #0
    9fd4:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    9fd6:	2380      	movs	r3, #128	; 0x80
    9fd8:	18fb      	adds	r3, r7, r3
    9fda:	2200      	movs	r2, #0
    9fdc:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    9fde:	2380      	movs	r3, #128	; 0x80
    9fe0:	18fb      	adds	r3, r7, r3
    9fe2:	2200      	movs	r2, #0
    9fe4:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    9fe6:	2380      	movs	r3, #128	; 0x80
    9fe8:	18fb      	adds	r3, r7, r3
    9fea:	2200      	movs	r2, #0
    9fec:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    9fee:	2380      	movs	r3, #128	; 0x80
    9ff0:	18fb      	adds	r3, r7, r3
    9ff2:	4a52      	ldr	r2, [pc, #328]	; (a13c <system_clock_init+0x248>)
    9ff4:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    9ff6:	2380      	movs	r3, #128	; 0x80
    9ff8:	18fb      	adds	r3, r7, r3
    9ffa:	2207      	movs	r2, #7
    9ffc:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    9ffe:	2380      	movs	r3, #128	; 0x80
    a000:	18fb      	adds	r3, r7, r3
    a002:	223f      	movs	r2, #63	; 0x3f
    a004:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a006:	2380      	movs	r3, #128	; 0x80
    a008:	18fb      	adds	r3, r7, r3
    a00a:	0018      	movs	r0, r3
    a00c:	4b4c      	ldr	r3, [pc, #304]	; (a140 <system_clock_init+0x24c>)
    a00e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    a010:	237c      	movs	r3, #124	; 0x7c
    a012:	18fb      	adds	r3, r7, r3
    a014:	0018      	movs	r0, r3
    a016:	4b4b      	ldr	r3, [pc, #300]	; (a144 <system_clock_init+0x250>)
    a018:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a01a:	237c      	movs	r3, #124	; 0x7c
    a01c:	18fb      	adds	r3, r7, r3
    a01e:	2200      	movs	r2, #0
    a020:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    a022:	237c      	movs	r3, #124	; 0x7c
    a024:	18fb      	adds	r3, r7, r3
    a026:	2201      	movs	r2, #1
    a028:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    a02a:	237c      	movs	r3, #124	; 0x7c
    a02c:	18fb      	adds	r3, r7, r3
    a02e:	2200      	movs	r2, #0
    a030:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a032:	237c      	movs	r3, #124	; 0x7c
    a034:	18fb      	adds	r3, r7, r3
    a036:	0018      	movs	r0, r3
    a038:	4b43      	ldr	r3, [pc, #268]	; (a148 <system_clock_init+0x254>)
    a03a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a03c:	2006      	movs	r0, #6
    a03e:	4b3b      	ldr	r3, [pc, #236]	; (a12c <system_clock_init+0x238>)
    a040:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a042:	4b42      	ldr	r3, [pc, #264]	; (a14c <system_clock_init+0x258>)
    a044:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a046:	2364      	movs	r3, #100	; 0x64
    a048:	18fb      	adds	r3, r7, r3
    a04a:	0018      	movs	r0, r3
    a04c:	4b40      	ldr	r3, [pc, #256]	; (a150 <system_clock_init+0x25c>)
    a04e:	4798      	blx	r3
    a050:	2364      	movs	r3, #100	; 0x64
    a052:	18fb      	adds	r3, r7, r3
    a054:	2205      	movs	r2, #5
    a056:	701a      	strb	r2, [r3, #0]
    a058:	2364      	movs	r3, #100	; 0x64
    a05a:	18fb      	adds	r3, r7, r3
    a05c:	2201      	movs	r2, #1
    a05e:	605a      	str	r2, [r3, #4]
    a060:	2364      	movs	r3, #100	; 0x64
    a062:	18fb      	adds	r3, r7, r3
    a064:	2200      	movs	r2, #0
    a066:	721a      	strb	r2, [r3, #8]
    a068:	2364      	movs	r3, #100	; 0x64
    a06a:	18fb      	adds	r3, r7, r3
    a06c:	2200      	movs	r2, #0
    a06e:	725a      	strb	r2, [r3, #9]
    a070:	2364      	movs	r3, #100	; 0x64
    a072:	18fb      	adds	r3, r7, r3
    a074:	0019      	movs	r1, r3
    a076:	2001      	movs	r0, #1
    a078:	4b36      	ldr	r3, [pc, #216]	; (a154 <system_clock_init+0x260>)
    a07a:	4798      	blx	r3
    a07c:	2001      	movs	r0, #1
    a07e:	4b36      	ldr	r3, [pc, #216]	; (a158 <system_clock_init+0x264>)
    a080:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    a082:	230c      	movs	r3, #12
    a084:	18fb      	adds	r3, r7, r3
    a086:	0018      	movs	r0, r3
    a088:	4b34      	ldr	r3, [pc, #208]	; (a15c <system_clock_init+0x268>)
    a08a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    a08c:	230c      	movs	r3, #12
    a08e:	18fb      	adds	r3, r7, r3
    a090:	2201      	movs	r2, #1
    a092:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    a094:	230c      	movs	r3, #12
    a096:	18fb      	adds	r3, r7, r3
    a098:	0019      	movs	r1, r3
    a09a:	2000      	movs	r0, #0
    a09c:	4b30      	ldr	r3, [pc, #192]	; (a160 <system_clock_init+0x26c>)
    a09e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    a0a0:	2000      	movs	r0, #0
    a0a2:	4b30      	ldr	r3, [pc, #192]	; (a164 <system_clock_init+0x270>)
    a0a4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    a0a6:	2007      	movs	r0, #7
    a0a8:	4b20      	ldr	r3, [pc, #128]	; (a12c <system_clock_init+0x238>)
    a0aa:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    a0ac:	46c0      	nop			; (mov r8, r8)
    a0ae:	2007      	movs	r0, #7
    a0b0:	4b1f      	ldr	r3, [pc, #124]	; (a130 <system_clock_init+0x23c>)
    a0b2:	4798      	blx	r3
    a0b4:	0003      	movs	r3, r0
    a0b6:	001a      	movs	r2, r3
    a0b8:	2301      	movs	r3, #1
    a0ba:	4053      	eors	r3, r2
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	2b00      	cmp	r3, #0
    a0c0:	d1f5      	bne.n	a0ae <system_clock_init+0x1ba>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    a0c2:	2000      	movs	r0, #0
    a0c4:	4b28      	ldr	r3, [pc, #160]	; (a168 <system_clock_init+0x274>)
    a0c6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    a0c8:	2100      	movs	r1, #0
    a0ca:	2000      	movs	r0, #0
    a0cc:	4b27      	ldr	r3, [pc, #156]	; (a16c <system_clock_init+0x278>)
    a0ce:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    a0d0:	2100      	movs	r1, #0
    a0d2:	2001      	movs	r0, #1
    a0d4:	4b25      	ldr	r3, [pc, #148]	; (a16c <system_clock_init+0x278>)
    a0d6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    a0d8:	2100      	movs	r1, #0
    a0da:	2002      	movs	r0, #2
    a0dc:	4b23      	ldr	r3, [pc, #140]	; (a16c <system_clock_init+0x278>)
    a0de:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    a0e0:	003b      	movs	r3, r7
    a0e2:	0018      	movs	r0, r3
    a0e4:	4b1a      	ldr	r3, [pc, #104]	; (a150 <system_clock_init+0x25c>)
    a0e6:	4798      	blx	r3
    a0e8:	003b      	movs	r3, r7
    a0ea:	2207      	movs	r2, #7
    a0ec:	701a      	strb	r2, [r3, #0]
    a0ee:	003b      	movs	r3, r7
    a0f0:	2201      	movs	r2, #1
    a0f2:	605a      	str	r2, [r3, #4]
    a0f4:	003b      	movs	r3, r7
    a0f6:	2200      	movs	r2, #0
    a0f8:	721a      	strb	r2, [r3, #8]
    a0fa:	003b      	movs	r3, r7
    a0fc:	2200      	movs	r2, #0
    a0fe:	725a      	strb	r2, [r3, #9]
    a100:	003b      	movs	r3, r7
    a102:	0019      	movs	r1, r3
    a104:	2000      	movs	r0, #0
    a106:	4b13      	ldr	r3, [pc, #76]	; (a154 <system_clock_init+0x260>)
    a108:	4798      	blx	r3
    a10a:	2000      	movs	r0, #0
    a10c:	4b12      	ldr	r3, [pc, #72]	; (a158 <system_clock_init+0x264>)
    a10e:	4798      	blx	r3
#endif
}
    a110:	46c0      	nop			; (mov r8, r8)
    a112:	46bd      	mov	sp, r7
    a114:	b02a      	add	sp, #168	; 0xa8
    a116:	bd80      	pop	{r7, pc}
    a118:	40000800 	.word	0x40000800
    a11c:	000099d5 	.word	0x000099d5
    a120:	00009ebd 	.word	0x00009ebd
    a124:	000098a1 	.word	0x000098a1
    a128:	00009b9d 	.word	0x00009b9d
    a12c:	00009d8d 	.word	0x00009d8d
    a130:	00009e39 	.word	0x00009e39
    a134:	0000990d 	.word	0x0000990d
    a138:	00806024 	.word	0x00806024
    a13c:	000005b9 	.word	0x000005b9
    a140:	00009cbd 	.word	0x00009cbd
    a144:	000098e9 	.word	0x000098e9
    a148:	00009b25 	.word	0x00009b25
    a14c:	0000a215 	.word	0x0000a215
    a150:	00009859 	.word	0x00009859
    a154:	0000a245 	.word	0x0000a245
    a158:	0000a369 	.word	0x0000a369
    a15c:	00009889 	.word	0x00009889
    a160:	0000a49d 	.word	0x0000a49d
    a164:	0000a4e1 	.word	0x0000a4e1
    a168:	00009961 	.word	0x00009961
    a16c:	00009981 	.word	0x00009981

0000a170 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a170:	b580      	push	{r7, lr}
    a172:	b082      	sub	sp, #8
    a174:	af00      	add	r7, sp, #0
    a176:	0002      	movs	r2, r0
    a178:	6039      	str	r1, [r7, #0]
    a17a:	1dfb      	adds	r3, r7, #7
    a17c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a17e:	1dfb      	adds	r3, r7, #7
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	2b01      	cmp	r3, #1
    a184:	d00a      	beq.n	a19c <system_apb_clock_set_mask+0x2c>
    a186:	2b02      	cmp	r3, #2
    a188:	d00f      	beq.n	a1aa <system_apb_clock_set_mask+0x3a>
    a18a:	2b00      	cmp	r3, #0
    a18c:	d114      	bne.n	a1b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a18e:	4b0e      	ldr	r3, [pc, #56]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a190:	4a0d      	ldr	r2, [pc, #52]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a192:	6991      	ldr	r1, [r2, #24]
    a194:	683a      	ldr	r2, [r7, #0]
    a196:	430a      	orrs	r2, r1
    a198:	619a      	str	r2, [r3, #24]
			break;
    a19a:	e00f      	b.n	a1bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a19c:	4b0a      	ldr	r3, [pc, #40]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a19e:	4a0a      	ldr	r2, [pc, #40]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a1a0:	69d1      	ldr	r1, [r2, #28]
    a1a2:	683a      	ldr	r2, [r7, #0]
    a1a4:	430a      	orrs	r2, r1
    a1a6:	61da      	str	r2, [r3, #28]
			break;
    a1a8:	e008      	b.n	a1bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a1aa:	4b07      	ldr	r3, [pc, #28]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a1ac:	4a06      	ldr	r2, [pc, #24]	; (a1c8 <system_apb_clock_set_mask+0x58>)
    a1ae:	6a11      	ldr	r1, [r2, #32]
    a1b0:	683a      	ldr	r2, [r7, #0]
    a1b2:	430a      	orrs	r2, r1
    a1b4:	621a      	str	r2, [r3, #32]
			break;
    a1b6:	e001      	b.n	a1bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a1b8:	2317      	movs	r3, #23
    a1ba:	e000      	b.n	a1be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a1bc:	2300      	movs	r3, #0
}
    a1be:	0018      	movs	r0, r3
    a1c0:	46bd      	mov	sp, r7
    a1c2:	b002      	add	sp, #8
    a1c4:	bd80      	pop	{r7, pc}
    a1c6:	46c0      	nop			; (mov r8, r8)
    a1c8:	40000400 	.word	0x40000400

0000a1cc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    a1cc:	b580      	push	{r7, lr}
    a1ce:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    a1d0:	4b02      	ldr	r3, [pc, #8]	; (a1dc <system_interrupt_enter_critical_section+0x10>)
    a1d2:	4798      	blx	r3
}
    a1d4:	46c0      	nop			; (mov r8, r8)
    a1d6:	46bd      	mov	sp, r7
    a1d8:	bd80      	pop	{r7, pc}
    a1da:	46c0      	nop			; (mov r8, r8)
    a1dc:	000052e1 	.word	0x000052e1

0000a1e0 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    a1e0:	b580      	push	{r7, lr}
    a1e2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    a1e4:	4b02      	ldr	r3, [pc, #8]	; (a1f0 <system_interrupt_leave_critical_section+0x10>)
    a1e6:	4798      	blx	r3
}
    a1e8:	46c0      	nop			; (mov r8, r8)
    a1ea:	46bd      	mov	sp, r7
    a1ec:	bd80      	pop	{r7, pc}
    a1ee:	46c0      	nop			; (mov r8, r8)
    a1f0:	00005335 	.word	0x00005335

0000a1f4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    a1f4:	b580      	push	{r7, lr}
    a1f6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a1f8:	4b05      	ldr	r3, [pc, #20]	; (a210 <system_gclk_is_syncing+0x1c>)
    a1fa:	785b      	ldrb	r3, [r3, #1]
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	b25b      	sxtb	r3, r3
    a200:	2b00      	cmp	r3, #0
    a202:	da01      	bge.n	a208 <system_gclk_is_syncing+0x14>
		return true;
    a204:	2301      	movs	r3, #1
    a206:	e000      	b.n	a20a <system_gclk_is_syncing+0x16>
	}

	return false;
    a208:	2300      	movs	r3, #0
}
    a20a:	0018      	movs	r0, r3
    a20c:	46bd      	mov	sp, r7
    a20e:	bd80      	pop	{r7, pc}
    a210:	40000c00 	.word	0x40000c00

0000a214 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    a214:	b580      	push	{r7, lr}
    a216:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    a218:	2108      	movs	r1, #8
    a21a:	2000      	movs	r0, #0
    a21c:	4b07      	ldr	r3, [pc, #28]	; (a23c <system_gclk_init+0x28>)
    a21e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    a220:	4b07      	ldr	r3, [pc, #28]	; (a240 <system_gclk_init+0x2c>)
    a222:	2201      	movs	r2, #1
    a224:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    a226:	46c0      	nop			; (mov r8, r8)
    a228:	4b05      	ldr	r3, [pc, #20]	; (a240 <system_gclk_init+0x2c>)
    a22a:	781b      	ldrb	r3, [r3, #0]
    a22c:	b2db      	uxtb	r3, r3
    a22e:	001a      	movs	r2, r3
    a230:	2301      	movs	r3, #1
    a232:	4013      	ands	r3, r2
    a234:	d1f8      	bne.n	a228 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    a236:	46c0      	nop			; (mov r8, r8)
    a238:	46bd      	mov	sp, r7
    a23a:	bd80      	pop	{r7, pc}
    a23c:	0000a171 	.word	0x0000a171
    a240:	40000c00 	.word	0x40000c00

0000a244 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    a244:	b580      	push	{r7, lr}
    a246:	b086      	sub	sp, #24
    a248:	af00      	add	r7, sp, #0
    a24a:	0002      	movs	r2, r0
    a24c:	6039      	str	r1, [r7, #0]
    a24e:	1dfb      	adds	r3, r7, #7
    a250:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    a252:	1dfb      	adds	r3, r7, #7
    a254:	781b      	ldrb	r3, [r3, #0]
    a256:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    a258:	1dfb      	adds	r3, r7, #7
    a25a:	781b      	ldrb	r3, [r3, #0]
    a25c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    a25e:	683b      	ldr	r3, [r7, #0]
    a260:	781b      	ldrb	r3, [r3, #0]
    a262:	021b      	lsls	r3, r3, #8
    a264:	001a      	movs	r2, r3
    a266:	697b      	ldr	r3, [r7, #20]
    a268:	4313      	orrs	r3, r2
    a26a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    a26c:	683b      	ldr	r3, [r7, #0]
    a26e:	785b      	ldrb	r3, [r3, #1]
    a270:	2b00      	cmp	r3, #0
    a272:	d004      	beq.n	a27e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    a274:	697b      	ldr	r3, [r7, #20]
    a276:	2280      	movs	r2, #128	; 0x80
    a278:	02d2      	lsls	r2, r2, #11
    a27a:	4313      	orrs	r3, r2
    a27c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    a27e:	683b      	ldr	r3, [r7, #0]
    a280:	7a5b      	ldrb	r3, [r3, #9]
    a282:	2b00      	cmp	r3, #0
    a284:	d004      	beq.n	a290 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    a286:	697b      	ldr	r3, [r7, #20]
    a288:	2280      	movs	r2, #128	; 0x80
    a28a:	0312      	lsls	r2, r2, #12
    a28c:	4313      	orrs	r3, r2
    a28e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    a290:	683b      	ldr	r3, [r7, #0]
    a292:	685b      	ldr	r3, [r3, #4]
    a294:	2b01      	cmp	r3, #1
    a296:	d92c      	bls.n	a2f2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    a298:	683b      	ldr	r3, [r7, #0]
    a29a:	685a      	ldr	r2, [r3, #4]
    a29c:	683b      	ldr	r3, [r7, #0]
    a29e:	685b      	ldr	r3, [r3, #4]
    a2a0:	3b01      	subs	r3, #1
    a2a2:	4013      	ands	r3, r2
    a2a4:	d11a      	bne.n	a2dc <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    a2a6:	2300      	movs	r3, #0
    a2a8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a2aa:	2302      	movs	r3, #2
    a2ac:	60bb      	str	r3, [r7, #8]
    a2ae:	e005      	b.n	a2bc <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    a2b0:	68fb      	ldr	r3, [r7, #12]
    a2b2:	3301      	adds	r3, #1
    a2b4:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    a2b6:	68bb      	ldr	r3, [r7, #8]
    a2b8:	005b      	lsls	r3, r3, #1
    a2ba:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a2bc:	683b      	ldr	r3, [r7, #0]
    a2be:	685a      	ldr	r2, [r3, #4]
    a2c0:	68bb      	ldr	r3, [r7, #8]
    a2c2:	429a      	cmp	r2, r3
    a2c4:	d8f4      	bhi.n	a2b0 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    a2c6:	68fb      	ldr	r3, [r7, #12]
    a2c8:	021b      	lsls	r3, r3, #8
    a2ca:	693a      	ldr	r2, [r7, #16]
    a2cc:	4313      	orrs	r3, r2
    a2ce:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    a2d0:	697b      	ldr	r3, [r7, #20]
    a2d2:	2280      	movs	r2, #128	; 0x80
    a2d4:	0352      	lsls	r2, r2, #13
    a2d6:	4313      	orrs	r3, r2
    a2d8:	617b      	str	r3, [r7, #20]
    a2da:	e00a      	b.n	a2f2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    a2dc:	683b      	ldr	r3, [r7, #0]
    a2de:	685b      	ldr	r3, [r3, #4]
    a2e0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    a2e2:	693a      	ldr	r2, [r7, #16]
    a2e4:	4313      	orrs	r3, r2
    a2e6:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    a2e8:	697b      	ldr	r3, [r7, #20]
    a2ea:	2280      	movs	r2, #128	; 0x80
    a2ec:	0292      	lsls	r2, r2, #10
    a2ee:	4313      	orrs	r3, r2
    a2f0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    a2f2:	683b      	ldr	r3, [r7, #0]
    a2f4:	7a1b      	ldrb	r3, [r3, #8]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d004      	beq.n	a304 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    a2fa:	697b      	ldr	r3, [r7, #20]
    a2fc:	2280      	movs	r2, #128	; 0x80
    a2fe:	0392      	lsls	r2, r2, #14
    a300:	4313      	orrs	r3, r2
    a302:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    a304:	46c0      	nop			; (mov r8, r8)
    a306:	4b13      	ldr	r3, [pc, #76]	; (a354 <system_gclk_gen_set_config+0x110>)
    a308:	4798      	blx	r3
    a30a:	1e03      	subs	r3, r0, #0
    a30c:	d1fb      	bne.n	a306 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a30e:	4b12      	ldr	r3, [pc, #72]	; (a358 <system_gclk_gen_set_config+0x114>)
    a310:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a312:	4a12      	ldr	r2, [pc, #72]	; (a35c <system_gclk_gen_set_config+0x118>)
    a314:	1dfb      	adds	r3, r7, #7
    a316:	781b      	ldrb	r3, [r3, #0]
    a318:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    a31a:	46c0      	nop			; (mov r8, r8)
    a31c:	4b0d      	ldr	r3, [pc, #52]	; (a354 <system_gclk_gen_set_config+0x110>)
    a31e:	4798      	blx	r3
    a320:	1e03      	subs	r3, r0, #0
    a322:	d1fb      	bne.n	a31c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    a324:	4b0e      	ldr	r3, [pc, #56]	; (a360 <system_gclk_gen_set_config+0x11c>)
    a326:	693a      	ldr	r2, [r7, #16]
    a328:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	4b09      	ldr	r3, [pc, #36]	; (a354 <system_gclk_gen_set_config+0x110>)
    a32e:	4798      	blx	r3
    a330:	1e03      	subs	r3, r0, #0
    a332:	d1fb      	bne.n	a32c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    a334:	4b0a      	ldr	r3, [pc, #40]	; (a360 <system_gclk_gen_set_config+0x11c>)
    a336:	4a0a      	ldr	r2, [pc, #40]	; (a360 <system_gclk_gen_set_config+0x11c>)
    a338:	6851      	ldr	r1, [r2, #4]
    a33a:	2280      	movs	r2, #128	; 0x80
    a33c:	0252      	lsls	r2, r2, #9
    a33e:	4011      	ands	r1, r2
    a340:	697a      	ldr	r2, [r7, #20]
    a342:	430a      	orrs	r2, r1
    a344:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a346:	4b07      	ldr	r3, [pc, #28]	; (a364 <system_gclk_gen_set_config+0x120>)
    a348:	4798      	blx	r3
}
    a34a:	46c0      	nop			; (mov r8, r8)
    a34c:	46bd      	mov	sp, r7
    a34e:	b006      	add	sp, #24
    a350:	bd80      	pop	{r7, pc}
    a352:	46c0      	nop			; (mov r8, r8)
    a354:	0000a1f5 	.word	0x0000a1f5
    a358:	0000a1cd 	.word	0x0000a1cd
    a35c:	40000c08 	.word	0x40000c08
    a360:	40000c00 	.word	0x40000c00
    a364:	0000a1e1 	.word	0x0000a1e1

0000a368 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    a368:	b580      	push	{r7, lr}
    a36a:	b082      	sub	sp, #8
    a36c:	af00      	add	r7, sp, #0
    a36e:	0002      	movs	r2, r0
    a370:	1dfb      	adds	r3, r7, #7
    a372:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a374:	46c0      	nop			; (mov r8, r8)
    a376:	4b0e      	ldr	r3, [pc, #56]	; (a3b0 <system_gclk_gen_enable+0x48>)
    a378:	4798      	blx	r3
    a37a:	1e03      	subs	r3, r0, #0
    a37c:	d1fb      	bne.n	a376 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a37e:	4b0d      	ldr	r3, [pc, #52]	; (a3b4 <system_gclk_gen_enable+0x4c>)
    a380:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a382:	4a0d      	ldr	r2, [pc, #52]	; (a3b8 <system_gclk_gen_enable+0x50>)
    a384:	1dfb      	adds	r3, r7, #7
    a386:	781b      	ldrb	r3, [r3, #0]
    a388:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a38a:	46c0      	nop			; (mov r8, r8)
    a38c:	4b08      	ldr	r3, [pc, #32]	; (a3b0 <system_gclk_gen_enable+0x48>)
    a38e:	4798      	blx	r3
    a390:	1e03      	subs	r3, r0, #0
    a392:	d1fb      	bne.n	a38c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    a394:	4b09      	ldr	r3, [pc, #36]	; (a3bc <system_gclk_gen_enable+0x54>)
    a396:	4a09      	ldr	r2, [pc, #36]	; (a3bc <system_gclk_gen_enable+0x54>)
    a398:	6852      	ldr	r2, [r2, #4]
    a39a:	2180      	movs	r1, #128	; 0x80
    a39c:	0249      	lsls	r1, r1, #9
    a39e:	430a      	orrs	r2, r1
    a3a0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a3a2:	4b07      	ldr	r3, [pc, #28]	; (a3c0 <system_gclk_gen_enable+0x58>)
    a3a4:	4798      	blx	r3
}
    a3a6:	46c0      	nop			; (mov r8, r8)
    a3a8:	46bd      	mov	sp, r7
    a3aa:	b002      	add	sp, #8
    a3ac:	bd80      	pop	{r7, pc}
    a3ae:	46c0      	nop			; (mov r8, r8)
    a3b0:	0000a1f5 	.word	0x0000a1f5
    a3b4:	0000a1cd 	.word	0x0000a1cd
    a3b8:	40000c04 	.word	0x40000c04
    a3bc:	40000c00 	.word	0x40000c00
    a3c0:	0000a1e1 	.word	0x0000a1e1

0000a3c4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    a3c4:	b580      	push	{r7, lr}
    a3c6:	b086      	sub	sp, #24
    a3c8:	af00      	add	r7, sp, #0
    a3ca:	0002      	movs	r2, r0
    a3cc:	1dfb      	adds	r3, r7, #7
    a3ce:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a3d0:	46c0      	nop			; (mov r8, r8)
    a3d2:	4b2a      	ldr	r3, [pc, #168]	; (a47c <system_gclk_gen_get_hz+0xb8>)
    a3d4:	4798      	blx	r3
    a3d6:	1e03      	subs	r3, r0, #0
    a3d8:	d1fb      	bne.n	a3d2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a3da:	4b29      	ldr	r3, [pc, #164]	; (a480 <system_gclk_gen_get_hz+0xbc>)
    a3dc:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a3de:	4a29      	ldr	r2, [pc, #164]	; (a484 <system_gclk_gen_get_hz+0xc0>)
    a3e0:	1dfb      	adds	r3, r7, #7
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a3e6:	46c0      	nop			; (mov r8, r8)
    a3e8:	4b24      	ldr	r3, [pc, #144]	; (a47c <system_gclk_gen_get_hz+0xb8>)
    a3ea:	4798      	blx	r3
    a3ec:	1e03      	subs	r3, r0, #0
    a3ee:	d1fb      	bne.n	a3e8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    a3f0:	4b25      	ldr	r3, [pc, #148]	; (a488 <system_gclk_gen_get_hz+0xc4>)
    a3f2:	685b      	ldr	r3, [r3, #4]
    a3f4:	04db      	lsls	r3, r3, #19
    a3f6:	0edb      	lsrs	r3, r3, #27
    a3f8:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    a3fa:	0018      	movs	r0, r3
    a3fc:	4b23      	ldr	r3, [pc, #140]	; (a48c <system_gclk_gen_get_hz+0xc8>)
    a3fe:	4798      	blx	r3
    a400:	0003      	movs	r3, r0
    a402:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a404:	4a1f      	ldr	r2, [pc, #124]	; (a484 <system_gclk_gen_get_hz+0xc0>)
    a406:	1dfb      	adds	r3, r7, #7
    a408:	781b      	ldrb	r3, [r3, #0]
    a40a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    a40c:	4b1e      	ldr	r3, [pc, #120]	; (a488 <system_gclk_gen_get_hz+0xc4>)
    a40e:	685b      	ldr	r3, [r3, #4]
    a410:	02db      	lsls	r3, r3, #11
    a412:	0fdb      	lsrs	r3, r3, #31
    a414:	b2da      	uxtb	r2, r3
    a416:	2313      	movs	r3, #19
    a418:	18fb      	adds	r3, r7, r3
    a41a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a41c:	4a1c      	ldr	r2, [pc, #112]	; (a490 <system_gclk_gen_get_hz+0xcc>)
    a41e:	1dfb      	adds	r3, r7, #7
    a420:	781b      	ldrb	r3, [r3, #0]
    a422:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a424:	46c0      	nop			; (mov r8, r8)
    a426:	4b15      	ldr	r3, [pc, #84]	; (a47c <system_gclk_gen_get_hz+0xb8>)
    a428:	4798      	blx	r3
    a42a:	1e03      	subs	r3, r0, #0
    a42c:	d1fb      	bne.n	a426 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    a42e:	4b16      	ldr	r3, [pc, #88]	; (a488 <system_gclk_gen_get_hz+0xc4>)
    a430:	689b      	ldr	r3, [r3, #8]
    a432:	021b      	lsls	r3, r3, #8
    a434:	0c1b      	lsrs	r3, r3, #16
    a436:	b29b      	uxth	r3, r3
    a438:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    a43a:	4b16      	ldr	r3, [pc, #88]	; (a494 <system_gclk_gen_get_hz+0xd0>)
    a43c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    a43e:	2313      	movs	r3, #19
    a440:	18fb      	adds	r3, r7, r3
    a442:	781b      	ldrb	r3, [r3, #0]
    a444:	2b00      	cmp	r3, #0
    a446:	d109      	bne.n	a45c <system_gclk_gen_get_hz+0x98>
    a448:	68fb      	ldr	r3, [r7, #12]
    a44a:	2b01      	cmp	r3, #1
    a44c:	d906      	bls.n	a45c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    a44e:	4b12      	ldr	r3, [pc, #72]	; (a498 <system_gclk_gen_get_hz+0xd4>)
    a450:	68f9      	ldr	r1, [r7, #12]
    a452:	6978      	ldr	r0, [r7, #20]
    a454:	4798      	blx	r3
    a456:	0003      	movs	r3, r0
    a458:	617b      	str	r3, [r7, #20]
    a45a:	e00a      	b.n	a472 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    a45c:	2313      	movs	r3, #19
    a45e:	18fb      	adds	r3, r7, r3
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	2b00      	cmp	r3, #0
    a464:	d005      	beq.n	a472 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    a466:	68fb      	ldr	r3, [r7, #12]
    a468:	3301      	adds	r3, #1
    a46a:	697a      	ldr	r2, [r7, #20]
    a46c:	40da      	lsrs	r2, r3
    a46e:	0013      	movs	r3, r2
    a470:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    a472:	697b      	ldr	r3, [r7, #20]
}
    a474:	0018      	movs	r0, r3
    a476:	46bd      	mov	sp, r7
    a478:	b006      	add	sp, #24
    a47a:	bd80      	pop	{r7, pc}
    a47c:	0000a1f5 	.word	0x0000a1f5
    a480:	0000a1cd 	.word	0x0000a1cd
    a484:	40000c04 	.word	0x40000c04
    a488:	40000c00 	.word	0x40000c00
    a48c:	00009a69 	.word	0x00009a69
    a490:	40000c08 	.word	0x40000c08
    a494:	0000a1e1 	.word	0x0000a1e1
    a498:	0000e9f5 	.word	0x0000e9f5

0000a49c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    a49c:	b580      	push	{r7, lr}
    a49e:	b084      	sub	sp, #16
    a4a0:	af00      	add	r7, sp, #0
    a4a2:	0002      	movs	r2, r0
    a4a4:	6039      	str	r1, [r7, #0]
    a4a6:	1dfb      	adds	r3, r7, #7
    a4a8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    a4aa:	1dfb      	adds	r3, r7, #7
    a4ac:	781b      	ldrb	r3, [r3, #0]
    a4ae:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    a4b0:	683b      	ldr	r3, [r7, #0]
    a4b2:	781b      	ldrb	r3, [r3, #0]
    a4b4:	021b      	lsls	r3, r3, #8
    a4b6:	001a      	movs	r2, r3
    a4b8:	68fb      	ldr	r3, [r7, #12]
    a4ba:	4313      	orrs	r3, r2
    a4bc:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    a4be:	1dfb      	adds	r3, r7, #7
    a4c0:	781b      	ldrb	r3, [r3, #0]
    a4c2:	0018      	movs	r0, r3
    a4c4:	4b04      	ldr	r3, [pc, #16]	; (a4d8 <system_gclk_chan_set_config+0x3c>)
    a4c6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    a4c8:	4b04      	ldr	r3, [pc, #16]	; (a4dc <system_gclk_chan_set_config+0x40>)
    a4ca:	68fa      	ldr	r2, [r7, #12]
    a4cc:	b292      	uxth	r2, r2
    a4ce:	805a      	strh	r2, [r3, #2]
}
    a4d0:	46c0      	nop			; (mov r8, r8)
    a4d2:	46bd      	mov	sp, r7
    a4d4:	b004      	add	sp, #16
    a4d6:	bd80      	pop	{r7, pc}
    a4d8:	0000a529 	.word	0x0000a529
    a4dc:	40000c00 	.word	0x40000c00

0000a4e0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    a4e0:	b580      	push	{r7, lr}
    a4e2:	b082      	sub	sp, #8
    a4e4:	af00      	add	r7, sp, #0
    a4e6:	0002      	movs	r2, r0
    a4e8:	1dfb      	adds	r3, r7, #7
    a4ea:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    a4ec:	4b0a      	ldr	r3, [pc, #40]	; (a518 <system_gclk_chan_enable+0x38>)
    a4ee:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a4f0:	4a0a      	ldr	r2, [pc, #40]	; (a51c <system_gclk_chan_enable+0x3c>)
    a4f2:	1dfb      	adds	r3, r7, #7
    a4f4:	781b      	ldrb	r3, [r3, #0]
    a4f6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    a4f8:	4909      	ldr	r1, [pc, #36]	; (a520 <system_gclk_chan_enable+0x40>)
    a4fa:	4b09      	ldr	r3, [pc, #36]	; (a520 <system_gclk_chan_enable+0x40>)
    a4fc:	885b      	ldrh	r3, [r3, #2]
    a4fe:	b29b      	uxth	r3, r3
    a500:	2280      	movs	r2, #128	; 0x80
    a502:	01d2      	lsls	r2, r2, #7
    a504:	4313      	orrs	r3, r2
    a506:	b29b      	uxth	r3, r3
    a508:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    a50a:	4b06      	ldr	r3, [pc, #24]	; (a524 <system_gclk_chan_enable+0x44>)
    a50c:	4798      	blx	r3
}
    a50e:	46c0      	nop			; (mov r8, r8)
    a510:	46bd      	mov	sp, r7
    a512:	b002      	add	sp, #8
    a514:	bd80      	pop	{r7, pc}
    a516:	46c0      	nop			; (mov r8, r8)
    a518:	0000a1cd 	.word	0x0000a1cd
    a51c:	40000c02 	.word	0x40000c02
    a520:	40000c00 	.word	0x40000c00
    a524:	0000a1e1 	.word	0x0000a1e1

0000a528 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    a528:	b580      	push	{r7, lr}
    a52a:	b084      	sub	sp, #16
    a52c:	af00      	add	r7, sp, #0
    a52e:	0002      	movs	r2, r0
    a530:	1dfb      	adds	r3, r7, #7
    a532:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    a534:	4b1c      	ldr	r3, [pc, #112]	; (a5a8 <system_gclk_chan_disable+0x80>)
    a536:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a538:	4a1c      	ldr	r2, [pc, #112]	; (a5ac <system_gclk_chan_disable+0x84>)
    a53a:	1dfb      	adds	r3, r7, #7
    a53c:	781b      	ldrb	r3, [r3, #0]
    a53e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    a540:	4b1b      	ldr	r3, [pc, #108]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a542:	885b      	ldrh	r3, [r3, #2]
    a544:	051b      	lsls	r3, r3, #20
    a546:	0f1b      	lsrs	r3, r3, #28
    a548:	b2db      	uxtb	r3, r3
    a54a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    a54c:	4a18      	ldr	r2, [pc, #96]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a54e:	8853      	ldrh	r3, [r2, #2]
    a550:	4918      	ldr	r1, [pc, #96]	; (a5b4 <system_gclk_chan_disable+0x8c>)
    a552:	400b      	ands	r3, r1
    a554:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    a556:	4a16      	ldr	r2, [pc, #88]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a558:	4b15      	ldr	r3, [pc, #84]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a55a:	885b      	ldrh	r3, [r3, #2]
    a55c:	b29b      	uxth	r3, r3
    a55e:	4916      	ldr	r1, [pc, #88]	; (a5b8 <system_gclk_chan_disable+0x90>)
    a560:	400b      	ands	r3, r1
    a562:	b29b      	uxth	r3, r3
    a564:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    a566:	46c0      	nop			; (mov r8, r8)
    a568:	4b11      	ldr	r3, [pc, #68]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a56a:	885b      	ldrh	r3, [r3, #2]
    a56c:	b29b      	uxth	r3, r3
    a56e:	001a      	movs	r2, r3
    a570:	2380      	movs	r3, #128	; 0x80
    a572:	01db      	lsls	r3, r3, #7
    a574:	4013      	ands	r3, r2
    a576:	d1f7      	bne.n	a568 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    a578:	4a0d      	ldr	r2, [pc, #52]	; (a5b0 <system_gclk_chan_disable+0x88>)
    a57a:	68fb      	ldr	r3, [r7, #12]
    a57c:	b2db      	uxtb	r3, r3
    a57e:	1c19      	adds	r1, r3, #0
    a580:	230f      	movs	r3, #15
    a582:	400b      	ands	r3, r1
    a584:	b2d9      	uxtb	r1, r3
    a586:	8853      	ldrh	r3, [r2, #2]
    a588:	1c08      	adds	r0, r1, #0
    a58a:	210f      	movs	r1, #15
    a58c:	4001      	ands	r1, r0
    a58e:	0208      	lsls	r0, r1, #8
    a590:	4908      	ldr	r1, [pc, #32]	; (a5b4 <system_gclk_chan_disable+0x8c>)
    a592:	400b      	ands	r3, r1
    a594:	1c19      	adds	r1, r3, #0
    a596:	1c03      	adds	r3, r0, #0
    a598:	430b      	orrs	r3, r1
    a59a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    a59c:	4b07      	ldr	r3, [pc, #28]	; (a5bc <system_gclk_chan_disable+0x94>)
    a59e:	4798      	blx	r3
}
    a5a0:	46c0      	nop			; (mov r8, r8)
    a5a2:	46bd      	mov	sp, r7
    a5a4:	b004      	add	sp, #16
    a5a6:	bd80      	pop	{r7, pc}
    a5a8:	0000a1cd 	.word	0x0000a1cd
    a5ac:	40000c02 	.word	0x40000c02
    a5b0:	40000c00 	.word	0x40000c00
    a5b4:	fffff0ff 	.word	0xfffff0ff
    a5b8:	ffffbfff 	.word	0xffffbfff
    a5bc:	0000a1e1 	.word	0x0000a1e1

0000a5c0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    a5c0:	b580      	push	{r7, lr}
    a5c2:	b084      	sub	sp, #16
    a5c4:	af00      	add	r7, sp, #0
    a5c6:	0002      	movs	r2, r0
    a5c8:	1dfb      	adds	r3, r7, #7
    a5ca:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    a5cc:	4b0d      	ldr	r3, [pc, #52]	; (a604 <system_gclk_chan_get_hz+0x44>)
    a5ce:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a5d0:	4a0d      	ldr	r2, [pc, #52]	; (a608 <system_gclk_chan_get_hz+0x48>)
    a5d2:	1dfb      	adds	r3, r7, #7
    a5d4:	781b      	ldrb	r3, [r3, #0]
    a5d6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    a5d8:	4b0c      	ldr	r3, [pc, #48]	; (a60c <system_gclk_chan_get_hz+0x4c>)
    a5da:	885b      	ldrh	r3, [r3, #2]
    a5dc:	051b      	lsls	r3, r3, #20
    a5de:	0f1b      	lsrs	r3, r3, #28
    a5e0:	b2da      	uxtb	r2, r3
    a5e2:	230f      	movs	r3, #15
    a5e4:	18fb      	adds	r3, r7, r3
    a5e6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    a5e8:	4b09      	ldr	r3, [pc, #36]	; (a610 <system_gclk_chan_get_hz+0x50>)
    a5ea:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    a5ec:	230f      	movs	r3, #15
    a5ee:	18fb      	adds	r3, r7, r3
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	0018      	movs	r0, r3
    a5f4:	4b07      	ldr	r3, [pc, #28]	; (a614 <system_gclk_chan_get_hz+0x54>)
    a5f6:	4798      	blx	r3
    a5f8:	0003      	movs	r3, r0
}
    a5fa:	0018      	movs	r0, r3
    a5fc:	46bd      	mov	sp, r7
    a5fe:	b004      	add	sp, #16
    a600:	bd80      	pop	{r7, pc}
    a602:	46c0      	nop			; (mov r8, r8)
    a604:	0000a1cd 	.word	0x0000a1cd
    a608:	40000c02 	.word	0x40000c02
    a60c:	40000c00 	.word	0x40000c00
    a610:	0000a1e1 	.word	0x0000a1e1
    a614:	0000a3c5 	.word	0x0000a3c5

0000a618 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a618:	b580      	push	{r7, lr}
    a61a:	b084      	sub	sp, #16
    a61c:	af00      	add	r7, sp, #0
    a61e:	0002      	movs	r2, r0
    a620:	1dfb      	adds	r3, r7, #7
    a622:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a624:	230f      	movs	r3, #15
    a626:	18fb      	adds	r3, r7, r3
    a628:	1dfa      	adds	r2, r7, #7
    a62a:	7812      	ldrb	r2, [r2, #0]
    a62c:	09d2      	lsrs	r2, r2, #7
    a62e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a630:	230e      	movs	r3, #14
    a632:	18fb      	adds	r3, r7, r3
    a634:	1dfa      	adds	r2, r7, #7
    a636:	7812      	ldrb	r2, [r2, #0]
    a638:	0952      	lsrs	r2, r2, #5
    a63a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a63c:	4b0d      	ldr	r3, [pc, #52]	; (a674 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a63e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a640:	230f      	movs	r3, #15
    a642:	18fb      	adds	r3, r7, r3
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	2b00      	cmp	r3, #0
    a648:	d10f      	bne.n	a66a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a64a:	230f      	movs	r3, #15
    a64c:	18fb      	adds	r3, r7, r3
    a64e:	781b      	ldrb	r3, [r3, #0]
    a650:	009b      	lsls	r3, r3, #2
    a652:	2210      	movs	r2, #16
    a654:	4694      	mov	ip, r2
    a656:	44bc      	add	ip, r7
    a658:	4463      	add	r3, ip
    a65a:	3b08      	subs	r3, #8
    a65c:	681a      	ldr	r2, [r3, #0]
    a65e:	230e      	movs	r3, #14
    a660:	18fb      	adds	r3, r7, r3
    a662:	781b      	ldrb	r3, [r3, #0]
    a664:	01db      	lsls	r3, r3, #7
    a666:	18d3      	adds	r3, r2, r3
    a668:	e000      	b.n	a66c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a66a:	2300      	movs	r3, #0
	}
}
    a66c:	0018      	movs	r0, r3
    a66e:	46bd      	mov	sp, r7
    a670:	b004      	add	sp, #16
    a672:	bd80      	pop	{r7, pc}
    a674:	41004400 	.word	0x41004400

0000a678 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    a678:	b580      	push	{r7, lr}
    a67a:	b088      	sub	sp, #32
    a67c:	af00      	add	r7, sp, #0
    a67e:	60f8      	str	r0, [r7, #12]
    a680:	60b9      	str	r1, [r7, #8]
    a682:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    a684:	2300      	movs	r3, #0
    a686:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    a688:	687b      	ldr	r3, [r7, #4]
    a68a:	78db      	ldrb	r3, [r3, #3]
    a68c:	2201      	movs	r2, #1
    a68e:	4053      	eors	r3, r2
    a690:	b2db      	uxtb	r3, r3
    a692:	2b00      	cmp	r3, #0
    a694:	d035      	beq.n	a702 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    a696:	687b      	ldr	r3, [r7, #4]
    a698:	781b      	ldrb	r3, [r3, #0]
    a69a:	2b80      	cmp	r3, #128	; 0x80
    a69c:	d00b      	beq.n	a6b6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    a69e:	69fb      	ldr	r3, [r7, #28]
    a6a0:	2280      	movs	r2, #128	; 0x80
    a6a2:	0252      	lsls	r2, r2, #9
    a6a4:	4313      	orrs	r3, r2
    a6a6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    a6a8:	687b      	ldr	r3, [r7, #4]
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	061b      	lsls	r3, r3, #24
    a6ae:	001a      	movs	r2, r3
    a6b0:	69fb      	ldr	r3, [r7, #28]
    a6b2:	4313      	orrs	r3, r2
    a6b4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    a6b6:	687b      	ldr	r3, [r7, #4]
    a6b8:	785b      	ldrb	r3, [r3, #1]
    a6ba:	2b00      	cmp	r3, #0
    a6bc:	d003      	beq.n	a6c6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    a6c2:	2b02      	cmp	r3, #2
    a6c4:	d110      	bne.n	a6e8 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    a6c6:	69fb      	ldr	r3, [r7, #28]
    a6c8:	2280      	movs	r2, #128	; 0x80
    a6ca:	0292      	lsls	r2, r2, #10
    a6cc:	4313      	orrs	r3, r2
    a6ce:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    a6d0:	687b      	ldr	r3, [r7, #4]
    a6d2:	789b      	ldrb	r3, [r3, #2]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d004      	beq.n	a6e2 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    a6d8:	69fb      	ldr	r3, [r7, #28]
    a6da:	2280      	movs	r2, #128	; 0x80
    a6dc:	02d2      	lsls	r2, r2, #11
    a6de:	4313      	orrs	r3, r2
    a6e0:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    a6e2:	68fb      	ldr	r3, [r7, #12]
    a6e4:	68ba      	ldr	r2, [r7, #8]
    a6e6:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a6e8:	687b      	ldr	r3, [r7, #4]
    a6ea:	785b      	ldrb	r3, [r3, #1]
    a6ec:	2b01      	cmp	r3, #1
    a6ee:	d003      	beq.n	a6f8 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a6f0:	687b      	ldr	r3, [r7, #4]
    a6f2:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a6f4:	2b02      	cmp	r3, #2
    a6f6:	d107      	bne.n	a708 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    a6f8:	69fb      	ldr	r3, [r7, #28]
    a6fa:	4a22      	ldr	r2, [pc, #136]	; (a784 <_system_pinmux_config+0x10c>)
    a6fc:	4013      	ands	r3, r2
    a6fe:	61fb      	str	r3, [r7, #28]
    a700:	e002      	b.n	a708 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    a702:	68fb      	ldr	r3, [r7, #12]
    a704:	68ba      	ldr	r2, [r7, #8]
    a706:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    a708:	68bb      	ldr	r3, [r7, #8]
    a70a:	041b      	lsls	r3, r3, #16
    a70c:	0c1b      	lsrs	r3, r3, #16
    a70e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    a710:	68bb      	ldr	r3, [r7, #8]
    a712:	0c1b      	lsrs	r3, r3, #16
    a714:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a716:	69ba      	ldr	r2, [r7, #24]
    a718:	69fb      	ldr	r3, [r7, #28]
    a71a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    a71c:	22a0      	movs	r2, #160	; 0xa0
    a71e:	05d2      	lsls	r2, r2, #23
    a720:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a722:	68fb      	ldr	r3, [r7, #12]
    a724:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a726:	697a      	ldr	r2, [r7, #20]
    a728:	69fb      	ldr	r3, [r7, #28]
    a72a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    a72c:	22d0      	movs	r2, #208	; 0xd0
    a72e:	0612      	lsls	r2, r2, #24
    a730:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a732:	68fb      	ldr	r3, [r7, #12]
    a734:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    a736:	687b      	ldr	r3, [r7, #4]
    a738:	78db      	ldrb	r3, [r3, #3]
    a73a:	2201      	movs	r2, #1
    a73c:	4053      	eors	r3, r2
    a73e:	b2db      	uxtb	r3, r3
    a740:	2b00      	cmp	r3, #0
    a742:	d01a      	beq.n	a77a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    a744:	69fa      	ldr	r2, [r7, #28]
    a746:	2380      	movs	r3, #128	; 0x80
    a748:	02db      	lsls	r3, r3, #11
    a74a:	4013      	ands	r3, r2
    a74c:	d00a      	beq.n	a764 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    a74e:	687b      	ldr	r3, [r7, #4]
    a750:	789b      	ldrb	r3, [r3, #2]
    a752:	2b01      	cmp	r3, #1
    a754:	d103      	bne.n	a75e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    a756:	68fb      	ldr	r3, [r7, #12]
    a758:	68ba      	ldr	r2, [r7, #8]
    a75a:	619a      	str	r2, [r3, #24]
    a75c:	e002      	b.n	a764 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    a75e:	68fb      	ldr	r3, [r7, #12]
    a760:	68ba      	ldr	r2, [r7, #8]
    a762:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a764:	687b      	ldr	r3, [r7, #4]
    a766:	785b      	ldrb	r3, [r3, #1]
    a768:	2b01      	cmp	r3, #1
    a76a:	d003      	beq.n	a774 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a76c:	687b      	ldr	r3, [r7, #4]
    a76e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a770:	2b02      	cmp	r3, #2
    a772:	d102      	bne.n	a77a <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    a774:	68fb      	ldr	r3, [r7, #12]
    a776:	68ba      	ldr	r2, [r7, #8]
    a778:	609a      	str	r2, [r3, #8]
		}
	}
}
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	46bd      	mov	sp, r7
    a77e:	b008      	add	sp, #32
    a780:	bd80      	pop	{r7, pc}
    a782:	46c0      	nop			; (mov r8, r8)
    a784:	fffbffff 	.word	0xfffbffff

0000a788 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    a788:	b580      	push	{r7, lr}
    a78a:	b084      	sub	sp, #16
    a78c:	af00      	add	r7, sp, #0
    a78e:	0002      	movs	r2, r0
    a790:	6039      	str	r1, [r7, #0]
    a792:	1dfb      	adds	r3, r7, #7
    a794:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a796:	1dfb      	adds	r3, r7, #7
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	0018      	movs	r0, r3
    a79c:	4b0a      	ldr	r3, [pc, #40]	; (a7c8 <system_pinmux_pin_set_config+0x40>)
    a79e:	4798      	blx	r3
    a7a0:	0003      	movs	r3, r0
    a7a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    a7a4:	1dfb      	adds	r3, r7, #7
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	221f      	movs	r2, #31
    a7aa:	4013      	ands	r3, r2
    a7ac:	2201      	movs	r2, #1
    a7ae:	409a      	lsls	r2, r3
    a7b0:	0013      	movs	r3, r2
    a7b2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    a7b4:	683a      	ldr	r2, [r7, #0]
    a7b6:	68b9      	ldr	r1, [r7, #8]
    a7b8:	68fb      	ldr	r3, [r7, #12]
    a7ba:	0018      	movs	r0, r3
    a7bc:	4b03      	ldr	r3, [pc, #12]	; (a7cc <system_pinmux_pin_set_config+0x44>)
    a7be:	4798      	blx	r3
}
    a7c0:	46c0      	nop			; (mov r8, r8)
    a7c2:	46bd      	mov	sp, r7
    a7c4:	b004      	add	sp, #16
    a7c6:	bd80      	pop	{r7, pc}
    a7c8:	0000a619 	.word	0x0000a619
    a7cc:	0000a679 	.word	0x0000a679

0000a7d0 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    a7d0:	b580      	push	{r7, lr}
    a7d2:	af00      	add	r7, sp, #0
	return;
    a7d4:	46c0      	nop			; (mov r8, r8)
}
    a7d6:	46bd      	mov	sp, r7
    a7d8:	bd80      	pop	{r7, pc}
    a7da:	46c0      	nop			; (mov r8, r8)

0000a7dc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    a7dc:	b580      	push	{r7, lr}
    a7de:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    a7e0:	4b06      	ldr	r3, [pc, #24]	; (a7fc <system_init+0x20>)
    a7e2:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    a7e4:	4b06      	ldr	r3, [pc, #24]	; (a800 <system_init+0x24>)
    a7e6:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    a7e8:	4b06      	ldr	r3, [pc, #24]	; (a804 <system_init+0x28>)
    a7ea:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    a7ec:	4b06      	ldr	r3, [pc, #24]	; (a808 <system_init+0x2c>)
    a7ee:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    a7f0:	4b06      	ldr	r3, [pc, #24]	; (a80c <system_init+0x30>)
    a7f2:	4798      	blx	r3
}
    a7f4:	46c0      	nop			; (mov r8, r8)
    a7f6:	46bd      	mov	sp, r7
    a7f8:	bd80      	pop	{r7, pc}
    a7fa:	46c0      	nop			; (mov r8, r8)
    a7fc:	00009ef5 	.word	0x00009ef5
    a800:	00005471 	.word	0x00005471
    a804:	0000a7d1 	.word	0x0000a7d1
    a808:	00006681 	.word	0x00006681
    a80c:	0000a7d1 	.word	0x0000a7d1

0000a810 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    a810:	b580      	push	{r7, lr}
    a812:	af00      	add	r7, sp, #0
    a814:	2000      	movs	r0, #0
    a816:	4b02      	ldr	r3, [pc, #8]	; (a820 <TCC0_Handler+0x10>)
    a818:	4798      	blx	r3
    a81a:	46c0      	nop			; (mov r8, r8)
    a81c:	46bd      	mov	sp, r7
    a81e:	bd80      	pop	{r7, pc}
    a820:	0000a84d 	.word	0x0000a84d

0000a824 <TCC1_Handler>:
    a824:	b580      	push	{r7, lr}
    a826:	af00      	add	r7, sp, #0
    a828:	2001      	movs	r0, #1
    a82a:	4b02      	ldr	r3, [pc, #8]	; (a834 <TCC1_Handler+0x10>)
    a82c:	4798      	blx	r3
    a82e:	46c0      	nop			; (mov r8, r8)
    a830:	46bd      	mov	sp, r7
    a832:	bd80      	pop	{r7, pc}
    a834:	0000a84d 	.word	0x0000a84d

0000a838 <TCC2_Handler>:
    a838:	b580      	push	{r7, lr}
    a83a:	af00      	add	r7, sp, #0
    a83c:	2002      	movs	r0, #2
    a83e:	4b02      	ldr	r3, [pc, #8]	; (a848 <TCC2_Handler+0x10>)
    a840:	4798      	blx	r3
    a842:	46c0      	nop			; (mov r8, r8)
    a844:	46bd      	mov	sp, r7
    a846:	bd80      	pop	{r7, pc}
    a848:	0000a84d 	.word	0x0000a84d

0000a84c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    a84c:	b580      	push	{r7, lr}
    a84e:	b086      	sub	sp, #24
    a850:	af00      	add	r7, sp, #0
    a852:	0002      	movs	r2, r0
    a854:	1dfb      	adds	r3, r7, #7
    a856:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    a858:	1dfb      	adds	r3, r7, #7
    a85a:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    a85c:	4b18      	ldr	r3, [pc, #96]	; (a8c0 <_tcc_interrupt_handler+0x74>)
    a85e:	0092      	lsls	r2, r2, #2
    a860:	58d3      	ldr	r3, [r2, r3]
    a862:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a864:	693b      	ldr	r3, [r7, #16]
    a866:	681b      	ldr	r3, [r3, #0]
    a868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    a86a:	693b      	ldr	r3, [r7, #16]
    a86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a86e:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    a870:	693b      	ldr	r3, [r7, #16]
    a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a874:	4013      	ands	r3, r2
    a876:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    a878:	2300      	movs	r3, #0
    a87a:	617b      	str	r3, [r7, #20]
    a87c:	e019      	b.n	a8b2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    a87e:	4b11      	ldr	r3, [pc, #68]	; (a8c4 <_tcc_interrupt_handler+0x78>)
    a880:	697a      	ldr	r2, [r7, #20]
    a882:	0092      	lsls	r2, r2, #2
    a884:	58d3      	ldr	r3, [r2, r3]
    a886:	68fa      	ldr	r2, [r7, #12]
    a888:	4013      	ands	r3, r2
    a88a:	d00f      	beq.n	a8ac <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    a88c:	693a      	ldr	r2, [r7, #16]
    a88e:	697b      	ldr	r3, [r7, #20]
    a890:	009b      	lsls	r3, r3, #2
    a892:	18d3      	adds	r3, r2, r3
    a894:	3304      	adds	r3, #4
    a896:	681b      	ldr	r3, [r3, #0]
    a898:	693a      	ldr	r2, [r7, #16]
    a89a:	0010      	movs	r0, r2
    a89c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    a89e:	693b      	ldr	r3, [r7, #16]
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	4a08      	ldr	r2, [pc, #32]	; (a8c4 <_tcc_interrupt_handler+0x78>)
    a8a4:	6979      	ldr	r1, [r7, #20]
    a8a6:	0089      	lsls	r1, r1, #2
    a8a8:	588a      	ldr	r2, [r1, r2]
    a8aa:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    a8ac:	697b      	ldr	r3, [r7, #20]
    a8ae:	3301      	adds	r3, #1
    a8b0:	617b      	str	r3, [r7, #20]
    a8b2:	697b      	ldr	r3, [r7, #20]
    a8b4:	2b0b      	cmp	r3, #11
    a8b6:	dde2      	ble.n	a87e <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    a8b8:	46c0      	nop			; (mov r8, r8)
    a8ba:	46bd      	mov	sp, r7
    a8bc:	b006      	add	sp, #24
    a8be:	bd80      	pop	{r7, pc}
    a8c0:	200045cc 	.word	0x200045cc
    a8c4:	00013028 	.word	0x00013028

0000a8c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    a8c8:	b580      	push	{r7, lr}
    a8ca:	b082      	sub	sp, #8
    a8cc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    a8ce:	4b2f      	ldr	r3, [pc, #188]	; (a98c <Reset_Handler+0xc4>)
    a8d0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    a8d2:	4b2f      	ldr	r3, [pc, #188]	; (a990 <Reset_Handler+0xc8>)
    a8d4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    a8d6:	687a      	ldr	r2, [r7, #4]
    a8d8:	683b      	ldr	r3, [r7, #0]
    a8da:	429a      	cmp	r2, r3
    a8dc:	d00c      	beq.n	a8f8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    a8de:	e007      	b.n	a8f0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    a8e0:	683b      	ldr	r3, [r7, #0]
    a8e2:	1d1a      	adds	r2, r3, #4
    a8e4:	603a      	str	r2, [r7, #0]
    a8e6:	687a      	ldr	r2, [r7, #4]
    a8e8:	1d11      	adds	r1, r2, #4
    a8ea:	6079      	str	r1, [r7, #4]
    a8ec:	6812      	ldr	r2, [r2, #0]
    a8ee:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    a8f0:	683a      	ldr	r2, [r7, #0]
    a8f2:	4b28      	ldr	r3, [pc, #160]	; (a994 <Reset_Handler+0xcc>)
    a8f4:	429a      	cmp	r2, r3
    a8f6:	d3f3      	bcc.n	a8e0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a8f8:	4b27      	ldr	r3, [pc, #156]	; (a998 <Reset_Handler+0xd0>)
    a8fa:	603b      	str	r3, [r7, #0]
    a8fc:	e004      	b.n	a908 <Reset_Handler+0x40>
                *pDest++ = 0;
    a8fe:	683b      	ldr	r3, [r7, #0]
    a900:	1d1a      	adds	r2, r3, #4
    a902:	603a      	str	r2, [r7, #0]
    a904:	2200      	movs	r2, #0
    a906:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    a908:	683a      	ldr	r2, [r7, #0]
    a90a:	4b24      	ldr	r3, [pc, #144]	; (a99c <Reset_Handler+0xd4>)
    a90c:	429a      	cmp	r2, r3
    a90e:	d3f6      	bcc.n	a8fe <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    a910:	4b23      	ldr	r3, [pc, #140]	; (a9a0 <Reset_Handler+0xd8>)
    a912:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    a914:	4b23      	ldr	r3, [pc, #140]	; (a9a4 <Reset_Handler+0xdc>)
    a916:	687a      	ldr	r2, [r7, #4]
    a918:	21ff      	movs	r1, #255	; 0xff
    a91a:	438a      	bics	r2, r1
    a91c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a91e:	4a22      	ldr	r2, [pc, #136]	; (a9a8 <Reset_Handler+0xe0>)
    a920:	2390      	movs	r3, #144	; 0x90
    a922:	005b      	lsls	r3, r3, #1
    a924:	2102      	movs	r1, #2
    a926:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a928:	4a20      	ldr	r2, [pc, #128]	; (a9ac <Reset_Handler+0xe4>)
    a92a:	78d3      	ldrb	r3, [r2, #3]
    a92c:	2103      	movs	r1, #3
    a92e:	438b      	bics	r3, r1
    a930:	1c19      	adds	r1, r3, #0
    a932:	2302      	movs	r3, #2
    a934:	430b      	orrs	r3, r1
    a936:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a938:	4a1c      	ldr	r2, [pc, #112]	; (a9ac <Reset_Handler+0xe4>)
    a93a:	78d3      	ldrb	r3, [r2, #3]
    a93c:	210c      	movs	r1, #12
    a93e:	438b      	bics	r3, r1
    a940:	1c19      	adds	r1, r3, #0
    a942:	2308      	movs	r3, #8
    a944:	430b      	orrs	r3, r1
    a946:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    a948:	4a19      	ldr	r2, [pc, #100]	; (a9b0 <Reset_Handler+0xe8>)
    a94a:	7b93      	ldrb	r3, [r2, #14]
    a94c:	2130      	movs	r1, #48	; 0x30
    a94e:	438b      	bics	r3, r1
    a950:	1c19      	adds	r1, r3, #0
    a952:	2320      	movs	r3, #32
    a954:	430b      	orrs	r3, r1
    a956:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    a958:	4a15      	ldr	r2, [pc, #84]	; (a9b0 <Reset_Handler+0xe8>)
    a95a:	7b93      	ldrb	r3, [r2, #14]
    a95c:	210c      	movs	r1, #12
    a95e:	438b      	bics	r3, r1
    a960:	1c19      	adds	r1, r3, #0
    a962:	2308      	movs	r3, #8
    a964:	430b      	orrs	r3, r1
    a966:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a968:	4a11      	ldr	r2, [pc, #68]	; (a9b0 <Reset_Handler+0xe8>)
    a96a:	7b93      	ldrb	r3, [r2, #14]
    a96c:	2103      	movs	r1, #3
    a96e:	438b      	bics	r3, r1
    a970:	1c19      	adds	r1, r3, #0
    a972:	2302      	movs	r3, #2
    a974:	430b      	orrs	r3, r1
    a976:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    a978:	4a0e      	ldr	r2, [pc, #56]	; (a9b4 <Reset_Handler+0xec>)
    a97a:	6853      	ldr	r3, [r2, #4]
    a97c:	2180      	movs	r1, #128	; 0x80
    a97e:	430b      	orrs	r3, r1
    a980:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    a982:	4b0d      	ldr	r3, [pc, #52]	; (a9b8 <Reset_Handler+0xf0>)
    a984:	4798      	blx	r3

        /* Branch to main function */
        main();
    a986:	4b0d      	ldr	r3, [pc, #52]	; (a9bc <Reset_Handler+0xf4>)
    a988:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    a98a:	e7fe      	b.n	a98a <Reset_Handler+0xc2>
    a98c:	0001399c 	.word	0x0001399c
    a990:	20000000 	.word	0x20000000
    a994:	20000094 	.word	0x20000094
    a998:	20000094 	.word	0x20000094
    a99c:	20004618 	.word	0x20004618
    a9a0:	00000000 	.word	0x00000000
    a9a4:	e000ed00 	.word	0xe000ed00
    a9a8:	41007000 	.word	0x41007000
    a9ac:	41005000 	.word	0x41005000
    a9b0:	41004800 	.word	0x41004800
    a9b4:	41004000 	.word	0x41004000
    a9b8:	00010761 	.word	0x00010761
    a9bc:	0000da75 	.word	0x0000da75

0000a9c0 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    a9c0:	b580      	push	{r7, lr}
    a9c2:	b082      	sub	sp, #8
    a9c4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a9c6:	f3ef 8305 	mrs	r3, IPSR
    a9ca:	607b      	str	r3, [r7, #4]
  return(result);
    a9cc:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    a9ce:	4b01      	ldr	r3, [pc, #4]	; (a9d4 <Dummy_Handler+0x14>)
    a9d0:	601a      	str	r2, [r3, #0]
        }
    a9d2:	e7f8      	b.n	a9c6 <Dummy_Handler+0x6>
    a9d4:	20000014 	.word	0x20000014

0000a9d8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    a9d8:	b580      	push	{r7, lr}
    a9da:	b086      	sub	sp, #24
    a9dc:	af00      	add	r7, sp, #0
    a9de:	60f8      	str	r0, [r7, #12]
    a9e0:	60b9      	str	r1, [r7, #8]
    a9e2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    a9e4:	2300      	movs	r3, #0
    a9e6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    a9e8:	68fb      	ldr	r3, [r7, #12]
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	d012      	beq.n	aa14 <_read+0x3c>
		return -1;
    a9ee:	2301      	movs	r3, #1
    a9f0:	425b      	negs	r3, r3
    a9f2:	e013      	b.n	aa1c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    a9f4:	4b0b      	ldr	r3, [pc, #44]	; (aa24 <_read+0x4c>)
    a9f6:	681a      	ldr	r2, [r3, #0]
    a9f8:	4b0b      	ldr	r3, [pc, #44]	; (aa28 <_read+0x50>)
    a9fa:	681b      	ldr	r3, [r3, #0]
    a9fc:	68b9      	ldr	r1, [r7, #8]
    a9fe:	0018      	movs	r0, r3
    aa00:	4790      	blx	r2
		ptr++;
    aa02:	68bb      	ldr	r3, [r7, #8]
    aa04:	3301      	adds	r3, #1
    aa06:	60bb      	str	r3, [r7, #8]
		nChars++;
    aa08:	697b      	ldr	r3, [r7, #20]
    aa0a:	3301      	adds	r3, #1
    aa0c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    aa0e:	687b      	ldr	r3, [r7, #4]
    aa10:	3b01      	subs	r3, #1
    aa12:	607b      	str	r3, [r7, #4]
    aa14:	687b      	ldr	r3, [r7, #4]
    aa16:	2b00      	cmp	r3, #0
    aa18:	dcec      	bgt.n	a9f4 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    aa1a:	697b      	ldr	r3, [r7, #20]
}
    aa1c:	0018      	movs	r0, r3
    aa1e:	46bd      	mov	sp, r7
    aa20:	b006      	add	sp, #24
    aa22:	bd80      	pop	{r7, pc}
    aa24:	200045d8 	.word	0x200045d8
    aa28:	200045e0 	.word	0x200045e0

0000aa2c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    aa2c:	b580      	push	{r7, lr}
    aa2e:	b086      	sub	sp, #24
    aa30:	af00      	add	r7, sp, #0
    aa32:	60f8      	str	r0, [r7, #12]
    aa34:	60b9      	str	r1, [r7, #8]
    aa36:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    aa38:	2300      	movs	r3, #0
    aa3a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    aa3c:	68fb      	ldr	r3, [r7, #12]
    aa3e:	2b01      	cmp	r3, #1
    aa40:	d01d      	beq.n	aa7e <_write+0x52>
    aa42:	68fb      	ldr	r3, [r7, #12]
    aa44:	2b02      	cmp	r3, #2
    aa46:	d01a      	beq.n	aa7e <_write+0x52>
    aa48:	68fb      	ldr	r3, [r7, #12]
    aa4a:	2b03      	cmp	r3, #3
    aa4c:	d017      	beq.n	aa7e <_write+0x52>
		return -1;
    aa4e:	2301      	movs	r3, #1
    aa50:	425b      	negs	r3, r3
    aa52:	e018      	b.n	aa86 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    aa54:	4b0e      	ldr	r3, [pc, #56]	; (aa90 <_write+0x64>)
    aa56:	681a      	ldr	r2, [r3, #0]
    aa58:	4b0e      	ldr	r3, [pc, #56]	; (aa94 <_write+0x68>)
    aa5a:	6818      	ldr	r0, [r3, #0]
    aa5c:	68bb      	ldr	r3, [r7, #8]
    aa5e:	1c59      	adds	r1, r3, #1
    aa60:	60b9      	str	r1, [r7, #8]
    aa62:	781b      	ldrb	r3, [r3, #0]
    aa64:	0019      	movs	r1, r3
    aa66:	4790      	blx	r2
    aa68:	1e03      	subs	r3, r0, #0
    aa6a:	da02      	bge.n	aa72 <_write+0x46>
			return -1;
    aa6c:	2301      	movs	r3, #1
    aa6e:	425b      	negs	r3, r3
    aa70:	e009      	b.n	aa86 <_write+0x5a>
		}
		++nChars;
    aa72:	697b      	ldr	r3, [r7, #20]
    aa74:	3301      	adds	r3, #1
    aa76:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	3b01      	subs	r3, #1
    aa7c:	607b      	str	r3, [r7, #4]
    aa7e:	687b      	ldr	r3, [r7, #4]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d1e7      	bne.n	aa54 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    aa84:	697b      	ldr	r3, [r7, #20]
}
    aa86:	0018      	movs	r0, r3
    aa88:	46bd      	mov	sp, r7
    aa8a:	b006      	add	sp, #24
    aa8c:	bd80      	pop	{r7, pc}
    aa8e:	46c0      	nop			; (mov r8, r8)
    aa90:	200045dc 	.word	0x200045dc
    aa94:	200045e0 	.word	0x200045e0

0000aa98 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    aa98:	b580      	push	{r7, lr}
    aa9a:	b084      	sub	sp, #16
    aa9c:	af00      	add	r7, sp, #0
    aa9e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    aaa0:	4b0a      	ldr	r3, [pc, #40]	; (aacc <_sbrk+0x34>)
    aaa2:	681b      	ldr	r3, [r3, #0]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	d102      	bne.n	aaae <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    aaa8:	4b08      	ldr	r3, [pc, #32]	; (aacc <_sbrk+0x34>)
    aaaa:	4a09      	ldr	r2, [pc, #36]	; (aad0 <_sbrk+0x38>)
    aaac:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    aaae:	4b07      	ldr	r3, [pc, #28]	; (aacc <_sbrk+0x34>)
    aab0:	681b      	ldr	r3, [r3, #0]
    aab2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    aab4:	4b05      	ldr	r3, [pc, #20]	; (aacc <_sbrk+0x34>)
    aab6:	681a      	ldr	r2, [r3, #0]
    aab8:	687b      	ldr	r3, [r7, #4]
    aaba:	18d2      	adds	r2, r2, r3
    aabc:	4b03      	ldr	r3, [pc, #12]	; (aacc <_sbrk+0x34>)
    aabe:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    aac0:	68fb      	ldr	r3, [r7, #12]
}
    aac2:	0018      	movs	r0, r3
    aac4:	46bd      	mov	sp, r7
    aac6:	b004      	add	sp, #16
    aac8:	bd80      	pop	{r7, pc}
    aaca:	46c0      	nop			; (mov r8, r8)
    aacc:	20000120 	.word	0x20000120
    aad0:	20006618 	.word	0x20006618

0000aad4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    aad4:	b580      	push	{r7, lr}
    aad6:	b082      	sub	sp, #8
    aad8:	af00      	add	r7, sp, #0
    aada:	6078      	str	r0, [r7, #4]
	return -1;
    aadc:	2301      	movs	r3, #1
    aade:	425b      	negs	r3, r3
}
    aae0:	0018      	movs	r0, r3
    aae2:	46bd      	mov	sp, r7
    aae4:	b002      	add	sp, #8
    aae6:	bd80      	pop	{r7, pc}

0000aae8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    aae8:	b580      	push	{r7, lr}
    aaea:	b082      	sub	sp, #8
    aaec:	af00      	add	r7, sp, #0
    aaee:	6078      	str	r0, [r7, #4]
    aaf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    aaf2:	683b      	ldr	r3, [r7, #0]
    aaf4:	2280      	movs	r2, #128	; 0x80
    aaf6:	0192      	lsls	r2, r2, #6
    aaf8:	605a      	str	r2, [r3, #4]

	return 0;
    aafa:	2300      	movs	r3, #0
}
    aafc:	0018      	movs	r0, r3
    aafe:	46bd      	mov	sp, r7
    ab00:	b002      	add	sp, #8
    ab02:	bd80      	pop	{r7, pc}

0000ab04 <_isatty>:

extern int _isatty(int file)
{
    ab04:	b580      	push	{r7, lr}
    ab06:	b082      	sub	sp, #8
    ab08:	af00      	add	r7, sp, #0
    ab0a:	6078      	str	r0, [r7, #4]
	return 1;
    ab0c:	2301      	movs	r3, #1
}
    ab0e:	0018      	movs	r0, r3
    ab10:	46bd      	mov	sp, r7
    ab12:	b002      	add	sp, #8
    ab14:	bd80      	pop	{r7, pc}
    ab16:	46c0      	nop			; (mov r8, r8)

0000ab18 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    ab18:	b580      	push	{r7, lr}
    ab1a:	b084      	sub	sp, #16
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	60f8      	str	r0, [r7, #12]
    ab20:	60b9      	str	r1, [r7, #8]
    ab22:	607a      	str	r2, [r7, #4]
	return 0;
    ab24:	2300      	movs	r3, #0
}
    ab26:	0018      	movs	r0, r3
    ab28:	46bd      	mov	sp, r7
    ab2a:	b004      	add	sp, #16
    ab2c:	bd80      	pop	{r7, pc}
    ab2e:	46c0      	nop			; (mov r8, r8)

0000ab30 <_exit>:

extern void _exit(int status)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b082      	sub	sp, #8
    ab34:	af00      	add	r7, sp, #0
    ab36:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    ab38:	be00      	bkpt	0x0000
}
    ab3a:	46c0      	nop			; (mov r8, r8)
    ab3c:	46bd      	mov	sp, r7
    ab3e:	b002      	add	sp, #8
    ab40:	bd80      	pop	{r7, pc}
    ab42:	46c0      	nop			; (mov r8, r8)

0000ab44 <_kill>:

extern void _kill(int pid, int sig)
{
    ab44:	b580      	push	{r7, lr}
    ab46:	b082      	sub	sp, #8
    ab48:	af00      	add	r7, sp, #0
    ab4a:	6078      	str	r0, [r7, #4]
    ab4c:	6039      	str	r1, [r7, #0]
	return;
    ab4e:	46c0      	nop			; (mov r8, r8)
}
    ab50:	46bd      	mov	sp, r7
    ab52:	b002      	add	sp, #8
    ab54:	bd80      	pop	{r7, pc}
    ab56:	46c0      	nop			; (mov r8, r8)

0000ab58 <_getpid>:

extern int _getpid(void)
{
    ab58:	b580      	push	{r7, lr}
    ab5a:	af00      	add	r7, sp, #0
	return -1;
    ab5c:	2301      	movs	r3, #1
    ab5e:	425b      	negs	r3, r3
}
    ab60:	0018      	movs	r0, r3
    ab62:	46bd      	mov	sp, r7
    ab64:	bd80      	pop	{r7, pc}
    ab66:	46c0      	nop			; (mov r8, r8)

0000ab68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    ab68:	b580      	push	{r7, lr}
    ab6a:	b082      	sub	sp, #8
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	3308      	adds	r3, #8
    ab74:	001a      	movs	r2, r3
    ab76:	687b      	ldr	r3, [r7, #4]
    ab78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    ab7a:	687b      	ldr	r3, [r7, #4]
    ab7c:	2201      	movs	r2, #1
    ab7e:	4252      	negs	r2, r2
    ab80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ab82:	687b      	ldr	r3, [r7, #4]
    ab84:	3308      	adds	r3, #8
    ab86:	001a      	movs	r2, r3
    ab88:	687b      	ldr	r3, [r7, #4]
    ab8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ab8c:	687b      	ldr	r3, [r7, #4]
    ab8e:	3308      	adds	r3, #8
    ab90:	001a      	movs	r2, r3
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    ab96:	687b      	ldr	r3, [r7, #4]
    ab98:	2200      	movs	r2, #0
    ab9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    ab9c:	46c0      	nop			; (mov r8, r8)
    ab9e:	46bd      	mov	sp, r7
    aba0:	b002      	add	sp, #8
    aba2:	bd80      	pop	{r7, pc}

0000aba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    aba4:	b580      	push	{r7, lr}
    aba6:	b082      	sub	sp, #8
    aba8:	af00      	add	r7, sp, #0
    abaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	2200      	movs	r2, #0
    abb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    abb2:	46c0      	nop			; (mov r8, r8)
    abb4:	46bd      	mov	sp, r7
    abb6:	b002      	add	sp, #8
    abb8:	bd80      	pop	{r7, pc}
    abba:	46c0      	nop			; (mov r8, r8)

0000abbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    abbc:	b580      	push	{r7, lr}
    abbe:	b084      	sub	sp, #16
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
    abc4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    abc6:	687b      	ldr	r3, [r7, #4]
    abc8:	685b      	ldr	r3, [r3, #4]
    abca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    abcc:	683b      	ldr	r3, [r7, #0]
    abce:	68fa      	ldr	r2, [r7, #12]
    abd0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    abd2:	68fb      	ldr	r3, [r7, #12]
    abd4:	689a      	ldr	r2, [r3, #8]
    abd6:	683b      	ldr	r3, [r7, #0]
    abd8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    abda:	68fb      	ldr	r3, [r7, #12]
    abdc:	689b      	ldr	r3, [r3, #8]
    abde:	683a      	ldr	r2, [r7, #0]
    abe0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    abe2:	68fb      	ldr	r3, [r7, #12]
    abe4:	683a      	ldr	r2, [r7, #0]
    abe6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    abe8:	683b      	ldr	r3, [r7, #0]
    abea:	687a      	ldr	r2, [r7, #4]
    abec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    abee:	687b      	ldr	r3, [r7, #4]
    abf0:	681b      	ldr	r3, [r3, #0]
    abf2:	1c5a      	adds	r2, r3, #1
    abf4:	687b      	ldr	r3, [r7, #4]
    abf6:	601a      	str	r2, [r3, #0]
}
    abf8:	46c0      	nop			; (mov r8, r8)
    abfa:	46bd      	mov	sp, r7
    abfc:	b004      	add	sp, #16
    abfe:	bd80      	pop	{r7, pc}

0000ac00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    ac00:	b580      	push	{r7, lr}
    ac02:	b084      	sub	sp, #16
    ac04:	af00      	add	r7, sp, #0
    ac06:	6078      	str	r0, [r7, #4]
    ac08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    ac0a:	683b      	ldr	r3, [r7, #0]
    ac0c:	681b      	ldr	r3, [r3, #0]
    ac0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    ac10:	68bb      	ldr	r3, [r7, #8]
    ac12:	3301      	adds	r3, #1
    ac14:	d103      	bne.n	ac1e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    ac16:	687b      	ldr	r3, [r7, #4]
    ac18:	691b      	ldr	r3, [r3, #16]
    ac1a:	60fb      	str	r3, [r7, #12]
    ac1c:	e00c      	b.n	ac38 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ac1e:	687b      	ldr	r3, [r7, #4]
    ac20:	3308      	adds	r3, #8
    ac22:	60fb      	str	r3, [r7, #12]
    ac24:	e002      	b.n	ac2c <vListInsert+0x2c>
    ac26:	68fb      	ldr	r3, [r7, #12]
    ac28:	685b      	ldr	r3, [r3, #4]
    ac2a:	60fb      	str	r3, [r7, #12]
    ac2c:	68fb      	ldr	r3, [r7, #12]
    ac2e:	685b      	ldr	r3, [r3, #4]
    ac30:	681a      	ldr	r2, [r3, #0]
    ac32:	68bb      	ldr	r3, [r7, #8]
    ac34:	429a      	cmp	r2, r3
    ac36:	d9f6      	bls.n	ac26 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    ac38:	68fb      	ldr	r3, [r7, #12]
    ac3a:	685a      	ldr	r2, [r3, #4]
    ac3c:	683b      	ldr	r3, [r7, #0]
    ac3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    ac40:	683b      	ldr	r3, [r7, #0]
    ac42:	685b      	ldr	r3, [r3, #4]
    ac44:	683a      	ldr	r2, [r7, #0]
    ac46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    ac48:	683b      	ldr	r3, [r7, #0]
    ac4a:	68fa      	ldr	r2, [r7, #12]
    ac4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    ac4e:	68fb      	ldr	r3, [r7, #12]
    ac50:	683a      	ldr	r2, [r7, #0]
    ac52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    ac54:	683b      	ldr	r3, [r7, #0]
    ac56:	687a      	ldr	r2, [r7, #4]
    ac58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    ac5a:	687b      	ldr	r3, [r7, #4]
    ac5c:	681b      	ldr	r3, [r3, #0]
    ac5e:	1c5a      	adds	r2, r3, #1
    ac60:	687b      	ldr	r3, [r7, #4]
    ac62:	601a      	str	r2, [r3, #0]
}
    ac64:	46c0      	nop			; (mov r8, r8)
    ac66:	46bd      	mov	sp, r7
    ac68:	b004      	add	sp, #16
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    ac6c:	b580      	push	{r7, lr}
    ac6e:	b084      	sub	sp, #16
    ac70:	af00      	add	r7, sp, #0
    ac72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    ac74:	687b      	ldr	r3, [r7, #4]
    ac76:	691b      	ldr	r3, [r3, #16]
    ac78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    ac7a:	687b      	ldr	r3, [r7, #4]
    ac7c:	685b      	ldr	r3, [r3, #4]
    ac7e:	687a      	ldr	r2, [r7, #4]
    ac80:	6892      	ldr	r2, [r2, #8]
    ac82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	689b      	ldr	r3, [r3, #8]
    ac88:	687a      	ldr	r2, [r7, #4]
    ac8a:	6852      	ldr	r2, [r2, #4]
    ac8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    ac8e:	68fb      	ldr	r3, [r7, #12]
    ac90:	685a      	ldr	r2, [r3, #4]
    ac92:	687b      	ldr	r3, [r7, #4]
    ac94:	429a      	cmp	r2, r3
    ac96:	d103      	bne.n	aca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    ac98:	687b      	ldr	r3, [r7, #4]
    ac9a:	689a      	ldr	r2, [r3, #8]
    ac9c:	68fb      	ldr	r3, [r7, #12]
    ac9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	2200      	movs	r2, #0
    aca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    aca6:	68fb      	ldr	r3, [r7, #12]
    aca8:	681b      	ldr	r3, [r3, #0]
    acaa:	1e5a      	subs	r2, r3, #1
    acac:	68fb      	ldr	r3, [r7, #12]
    acae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    acb0:	68fb      	ldr	r3, [r7, #12]
    acb2:	681b      	ldr	r3, [r3, #0]
}
    acb4:	0018      	movs	r0, r3
    acb6:	46bd      	mov	sp, r7
    acb8:	b004      	add	sp, #16
    acba:	bd80      	pop	{r7, pc}

0000acbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    acbc:	b580      	push	{r7, lr}
    acbe:	b084      	sub	sp, #16
    acc0:	af00      	add	r7, sp, #0
    acc2:	60f8      	str	r0, [r7, #12]
    acc4:	60b9      	str	r1, [r7, #8]
    acc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    acc8:	68fb      	ldr	r3, [r7, #12]
    acca:	3b04      	subs	r3, #4
    accc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    acce:	68fb      	ldr	r3, [r7, #12]
    acd0:	2280      	movs	r2, #128	; 0x80
    acd2:	0452      	lsls	r2, r2, #17
    acd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    acd6:	68fb      	ldr	r3, [r7, #12]
    acd8:	3b04      	subs	r3, #4
    acda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    acdc:	68ba      	ldr	r2, [r7, #8]
    acde:	68fb      	ldr	r3, [r7, #12]
    ace0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    ace2:	68fb      	ldr	r3, [r7, #12]
    ace4:	3b04      	subs	r3, #4
    ace6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    ace8:	4a08      	ldr	r2, [pc, #32]	; (ad0c <pxPortInitialiseStack+0x50>)
    acea:	68fb      	ldr	r3, [r7, #12]
    acec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    acee:	68fb      	ldr	r3, [r7, #12]
    acf0:	3b14      	subs	r3, #20
    acf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    acf4:	687a      	ldr	r2, [r7, #4]
    acf6:	68fb      	ldr	r3, [r7, #12]
    acf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    acfa:	68fb      	ldr	r3, [r7, #12]
    acfc:	3b20      	subs	r3, #32
    acfe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    ad00:	68fb      	ldr	r3, [r7, #12]
}
    ad02:	0018      	movs	r0, r3
    ad04:	46bd      	mov	sp, r7
    ad06:	b004      	add	sp, #16
    ad08:	bd80      	pop	{r7, pc}
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	0000ad11 	.word	0x0000ad11

0000ad10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    ad10:	b580      	push	{r7, lr}
    ad12:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    ad14:	4b03      	ldr	r3, [pc, #12]	; (ad24 <prvTaskExitError+0x14>)
    ad16:	681b      	ldr	r3, [r3, #0]
    ad18:	3301      	adds	r3, #1
    ad1a:	d001      	beq.n	ad20 <prvTaskExitError+0x10>
    ad1c:	b672      	cpsid	i
    ad1e:	e7fe      	b.n	ad1e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    ad20:	b672      	cpsid	i
	for( ;; );
    ad22:	e7fe      	b.n	ad22 <prvTaskExitError+0x12>
    ad24:	20000018 	.word	0x20000018

0000ad28 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    ad2c:	46c0      	nop			; (mov r8, r8)
    ad2e:	46bd      	mov	sp, r7
    ad30:	bd80      	pop	{r7, pc}
    ad32:	46c0      	nop			; (mov r8, r8)
	...

0000ad40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    ad40:	4a0b      	ldr	r2, [pc, #44]	; (ad70 <pxCurrentTCBConst2>)
    ad42:	6813      	ldr	r3, [r2, #0]
    ad44:	6818      	ldr	r0, [r3, #0]
    ad46:	3020      	adds	r0, #32
    ad48:	f380 8809 	msr	PSP, r0
    ad4c:	2002      	movs	r0, #2
    ad4e:	f380 8814 	msr	CONTROL, r0
    ad52:	f3bf 8f6f 	isb	sy
    ad56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    ad58:	46ae      	mov	lr, r5
    ad5a:	bc08      	pop	{r3}
    ad5c:	bc04      	pop	{r2}
    ad5e:	b662      	cpsie	i
    ad60:	4718      	bx	r3
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	46c0      	nop			; (mov r8, r8)
    ad66:	46c0      	nop			; (mov r8, r8)
    ad68:	46c0      	nop			; (mov r8, r8)
    ad6a:	46c0      	nop			; (mov r8, r8)
    ad6c:	46c0      	nop			; (mov r8, r8)
    ad6e:	46c0      	nop			; (mov r8, r8)

0000ad70 <pxCurrentTCBConst2>:
    ad70:	20003bc4 	.word	0x20003bc4
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    ad74:	46c0      	nop			; (mov r8, r8)
    ad76:	46c0      	nop			; (mov r8, r8)

0000ad78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    ad78:	b580      	push	{r7, lr}
    ad7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    ad7c:	4b0d      	ldr	r3, [pc, #52]	; (adb4 <xPortStartScheduler+0x3c>)
    ad7e:	4a0d      	ldr	r2, [pc, #52]	; (adb4 <xPortStartScheduler+0x3c>)
    ad80:	6812      	ldr	r2, [r2, #0]
    ad82:	21ff      	movs	r1, #255	; 0xff
    ad84:	0409      	lsls	r1, r1, #16
    ad86:	430a      	orrs	r2, r1
    ad88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    ad8a:	4b0a      	ldr	r3, [pc, #40]	; (adb4 <xPortStartScheduler+0x3c>)
    ad8c:	4a09      	ldr	r2, [pc, #36]	; (adb4 <xPortStartScheduler+0x3c>)
    ad8e:	6812      	ldr	r2, [r2, #0]
    ad90:	21ff      	movs	r1, #255	; 0xff
    ad92:	0609      	lsls	r1, r1, #24
    ad94:	430a      	orrs	r2, r1
    ad96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    ad98:	4b07      	ldr	r3, [pc, #28]	; (adb8 <xPortStartScheduler+0x40>)
    ad9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    ad9c:	4b07      	ldr	r3, [pc, #28]	; (adbc <xPortStartScheduler+0x44>)
    ad9e:	2200      	movs	r2, #0
    ada0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    ada2:	4b07      	ldr	r3, [pc, #28]	; (adc0 <xPortStartScheduler+0x48>)
    ada4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    ada6:	4b07      	ldr	r3, [pc, #28]	; (adc4 <xPortStartScheduler+0x4c>)
    ada8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    adaa:	2300      	movs	r3, #0
}
    adac:	0018      	movs	r0, r3
    adae:	46bd      	mov	sp, r7
    adb0:	bd80      	pop	{r7, pc}
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	e000ed20 	.word	0xe000ed20
    adb8:	0000aed9 	.word	0x0000aed9
    adbc:	20000018 	.word	0x20000018
    adc0:	0000ad41 	.word	0x0000ad41
    adc4:	0000ad11 	.word	0x0000ad11

0000adc8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    adc8:	b580      	push	{r7, lr}
    adca:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    adcc:	4b05      	ldr	r3, [pc, #20]	; (ade4 <vPortYield+0x1c>)
    adce:	2280      	movs	r2, #128	; 0x80
    add0:	0552      	lsls	r2, r2, #21
    add2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    add4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    add8:	f3bf 8f6f 	isb	sy
}
    addc:	46c0      	nop			; (mov r8, r8)
    adde:	46bd      	mov	sp, r7
    ade0:	bd80      	pop	{r7, pc}
    ade2:	46c0      	nop			; (mov r8, r8)
    ade4:	e000ed04 	.word	0xe000ed04

0000ade8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    ade8:	b580      	push	{r7, lr}
    adea:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    adec:	b672      	cpsid	i
    uxCriticalNesting++;
    adee:	4b06      	ldr	r3, [pc, #24]	; (ae08 <vPortEnterCritical+0x20>)
    adf0:	681b      	ldr	r3, [r3, #0]
    adf2:	1c5a      	adds	r2, r3, #1
    adf4:	4b04      	ldr	r3, [pc, #16]	; (ae08 <vPortEnterCritical+0x20>)
    adf6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    adf8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    adfc:	f3bf 8f6f 	isb	sy
}
    ae00:	46c0      	nop			; (mov r8, r8)
    ae02:	46bd      	mov	sp, r7
    ae04:	bd80      	pop	{r7, pc}
    ae06:	46c0      	nop			; (mov r8, r8)
    ae08:	20000018 	.word	0x20000018

0000ae0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    ae0c:	b580      	push	{r7, lr}
    ae0e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    ae10:	4b09      	ldr	r3, [pc, #36]	; (ae38 <vPortExitCritical+0x2c>)
    ae12:	681b      	ldr	r3, [r3, #0]
    ae14:	2b00      	cmp	r3, #0
    ae16:	d101      	bne.n	ae1c <vPortExitCritical+0x10>
    ae18:	b672      	cpsid	i
    ae1a:	e7fe      	b.n	ae1a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    ae1c:	4b06      	ldr	r3, [pc, #24]	; (ae38 <vPortExitCritical+0x2c>)
    ae1e:	681b      	ldr	r3, [r3, #0]
    ae20:	1e5a      	subs	r2, r3, #1
    ae22:	4b05      	ldr	r3, [pc, #20]	; (ae38 <vPortExitCritical+0x2c>)
    ae24:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    ae26:	4b04      	ldr	r3, [pc, #16]	; (ae38 <vPortExitCritical+0x2c>)
    ae28:	681b      	ldr	r3, [r3, #0]
    ae2a:	2b00      	cmp	r3, #0
    ae2c:	d100      	bne.n	ae30 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    ae2e:	b662      	cpsie	i
    }
}
    ae30:	46c0      	nop			; (mov r8, r8)
    ae32:	46bd      	mov	sp, r7
    ae34:	bd80      	pop	{r7, pc}
    ae36:	46c0      	nop			; (mov r8, r8)
    ae38:	20000018 	.word	0x20000018

0000ae3c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    ae3c:	f3ef 8010 	mrs	r0, PRIMASK
    ae40:	b672      	cpsid	i
    ae42:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    ae44:	2300      	movs	r3, #0
}
    ae46:	0018      	movs	r0, r3

0000ae48 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    ae48:	f380 8810 	msr	PRIMASK, r0
    ae4c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
    ae4e:	46c0      	nop			; (mov r8, r8)

0000ae50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    ae50:	f3ef 8009 	mrs	r0, PSP
    ae54:	4b0e      	ldr	r3, [pc, #56]	; (ae90 <pxCurrentTCBConst>)
    ae56:	681a      	ldr	r2, [r3, #0]
    ae58:	3820      	subs	r0, #32
    ae5a:	6010      	str	r0, [r2, #0]
    ae5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    ae5e:	4644      	mov	r4, r8
    ae60:	464d      	mov	r5, r9
    ae62:	4656      	mov	r6, sl
    ae64:	465f      	mov	r7, fp
    ae66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    ae68:	b508      	push	{r3, lr}
    ae6a:	b672      	cpsid	i
    ae6c:	f001 f900 	bl	c070 <vTaskSwitchContext>
    ae70:	b662      	cpsie	i
    ae72:	bc0c      	pop	{r2, r3}
    ae74:	6811      	ldr	r1, [r2, #0]
    ae76:	6808      	ldr	r0, [r1, #0]
    ae78:	3010      	adds	r0, #16
    ae7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ae7c:	46a0      	mov	r8, r4
    ae7e:	46a9      	mov	r9, r5
    ae80:	46b2      	mov	sl, r6
    ae82:	46bb      	mov	fp, r7
    ae84:	f380 8809 	msr	PSP, r0
    ae88:	3820      	subs	r0, #32
    ae8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    ae8c:	4718      	bx	r3
    ae8e:	46c0      	nop			; (mov r8, r8)

0000ae90 <pxCurrentTCBConst>:
    ae90:	20003bc4 	.word	0x20003bc4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    ae94:	46c0      	nop			; (mov r8, r8)
    ae96:	46c0      	nop			; (mov r8, r8)

0000ae98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    ae98:	b580      	push	{r7, lr}
    ae9a:	b082      	sub	sp, #8
    ae9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    ae9e:	4b0a      	ldr	r3, [pc, #40]	; (aec8 <SysTick_Handler+0x30>)
    aea0:	4798      	blx	r3
    aea2:	0003      	movs	r3, r0
    aea4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    aea6:	4b09      	ldr	r3, [pc, #36]	; (aecc <SysTick_Handler+0x34>)
    aea8:	4798      	blx	r3
    aeaa:	1e03      	subs	r3, r0, #0
    aeac:	d003      	beq.n	aeb6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    aeae:	4b08      	ldr	r3, [pc, #32]	; (aed0 <SysTick_Handler+0x38>)
    aeb0:	2280      	movs	r2, #128	; 0x80
    aeb2:	0552      	lsls	r2, r2, #21
    aeb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    aeb6:	687b      	ldr	r3, [r7, #4]
    aeb8:	0018      	movs	r0, r3
    aeba:	4b06      	ldr	r3, [pc, #24]	; (aed4 <SysTick_Handler+0x3c>)
    aebc:	4798      	blx	r3
}
    aebe:	46c0      	nop			; (mov r8, r8)
    aec0:	46bd      	mov	sp, r7
    aec2:	b002      	add	sp, #8
    aec4:	bd80      	pop	{r7, pc}
    aec6:	46c0      	nop			; (mov r8, r8)
    aec8:	0000ae3d 	.word	0x0000ae3d
    aecc:	0000befd 	.word	0x0000befd
    aed0:	e000ed04 	.word	0xe000ed04
    aed4:	0000ae49 	.word	0x0000ae49

0000aed8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    aed8:	b580      	push	{r7, lr}
    aeda:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    aedc:	4b04      	ldr	r3, [pc, #16]	; (aef0 <prvSetupTimerInterrupt+0x18>)
    aede:	4a05      	ldr	r2, [pc, #20]	; (aef4 <prvSetupTimerInterrupt+0x1c>)
    aee0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    aee2:	4b05      	ldr	r3, [pc, #20]	; (aef8 <prvSetupTimerInterrupt+0x20>)
    aee4:	2207      	movs	r2, #7
    aee6:	601a      	str	r2, [r3, #0]
}
    aee8:	46c0      	nop			; (mov r8, r8)
    aeea:	46bd      	mov	sp, r7
    aeec:	bd80      	pop	{r7, pc}
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	e000e014 	.word	0xe000e014
    aef4:	0000bb7f 	.word	0x0000bb7f
    aef8:	e000e010 	.word	0xe000e010

0000aefc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    aefc:	b580      	push	{r7, lr}
    aefe:	b084      	sub	sp, #16
    af00:	af00      	add	r7, sp, #0
    af02:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    af04:	2300      	movs	r3, #0
    af06:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    af08:	687b      	ldr	r3, [r7, #4]
    af0a:	2207      	movs	r2, #7
    af0c:	4013      	ands	r3, r2
    af0e:	d004      	beq.n	af1a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    af10:	687b      	ldr	r3, [r7, #4]
    af12:	2207      	movs	r2, #7
    af14:	4393      	bics	r3, r2
    af16:	3308      	adds	r3, #8
    af18:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    af1a:	4b17      	ldr	r3, [pc, #92]	; (af78 <pvPortMalloc+0x7c>)
    af1c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    af1e:	4b17      	ldr	r3, [pc, #92]	; (af7c <pvPortMalloc+0x80>)
    af20:	681b      	ldr	r3, [r3, #0]
    af22:	2b00      	cmp	r3, #0
    af24:	d105      	bne.n	af32 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    af26:	4b16      	ldr	r3, [pc, #88]	; (af80 <pvPortMalloc+0x84>)
    af28:	2207      	movs	r2, #7
    af2a:	4393      	bics	r3, r2
    af2c:	001a      	movs	r2, r3
    af2e:	4b13      	ldr	r3, [pc, #76]	; (af7c <pvPortMalloc+0x80>)
    af30:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    af32:	4b14      	ldr	r3, [pc, #80]	; (af84 <pvPortMalloc+0x88>)
    af34:	681a      	ldr	r2, [r3, #0]
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	18d3      	adds	r3, r2, r3
    af3a:	4a13      	ldr	r2, [pc, #76]	; (af88 <pvPortMalloc+0x8c>)
    af3c:	4293      	cmp	r3, r2
    af3e:	d813      	bhi.n	af68 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    af40:	4b10      	ldr	r3, [pc, #64]	; (af84 <pvPortMalloc+0x88>)
    af42:	681a      	ldr	r2, [r3, #0]
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	18d2      	adds	r2, r2, r3
    af48:	4b0e      	ldr	r3, [pc, #56]	; (af84 <pvPortMalloc+0x88>)
    af4a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    af4c:	429a      	cmp	r2, r3
    af4e:	d90b      	bls.n	af68 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    af50:	4b0a      	ldr	r3, [pc, #40]	; (af7c <pvPortMalloc+0x80>)
    af52:	681a      	ldr	r2, [r3, #0]
    af54:	4b0b      	ldr	r3, [pc, #44]	; (af84 <pvPortMalloc+0x88>)
    af56:	681b      	ldr	r3, [r3, #0]
    af58:	18d3      	adds	r3, r2, r3
    af5a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    af5c:	4b09      	ldr	r3, [pc, #36]	; (af84 <pvPortMalloc+0x88>)
    af5e:	681a      	ldr	r2, [r3, #0]
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	18d2      	adds	r2, r2, r3
    af64:	4b07      	ldr	r3, [pc, #28]	; (af84 <pvPortMalloc+0x88>)
    af66:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    af68:	4b08      	ldr	r3, [pc, #32]	; (af8c <pvPortMalloc+0x90>)
    af6a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    af6c:	68fb      	ldr	r3, [r7, #12]
}
    af6e:	0018      	movs	r0, r3
    af70:	46bd      	mov	sp, r7
    af72:	b004      	add	sp, #16
    af74:	bd80      	pop	{r7, pc}
    af76:	46c0      	nop			; (mov r8, r8)
    af78:	0000bd95 	.word	0x0000bd95
    af7c:	20003bc0 	.word	0x20003bc0
    af80:	2000012c 	.word	0x2000012c
    af84:	20003bbc 	.word	0x20003bbc
    af88:	00003a8f 	.word	0x00003a8f
    af8c:	0000bdad 	.word	0x0000bdad

0000af90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    af90:	b580      	push	{r7, lr}
    af92:	b082      	sub	sp, #8
    af94:	af00      	add	r7, sp, #0
    af96:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    af98:	687b      	ldr	r3, [r7, #4]
    af9a:	2b00      	cmp	r3, #0
    af9c:	d001      	beq.n	afa2 <vPortFree+0x12>
    af9e:	b672      	cpsid	i
    afa0:	e7fe      	b.n	afa0 <vPortFree+0x10>
}
    afa2:	46c0      	nop			; (mov r8, r8)
    afa4:	46bd      	mov	sp, r7
    afa6:	b002      	add	sp, #8
    afa8:	bd80      	pop	{r7, pc}
    afaa:	46c0      	nop			; (mov r8, r8)

0000afac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    afac:	b580      	push	{r7, lr}
    afae:	b084      	sub	sp, #16
    afb0:	af00      	add	r7, sp, #0
    afb2:	6078      	str	r0, [r7, #4]
    afb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    afb6:	687b      	ldr	r3, [r7, #4]
    afb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    afba:	68fb      	ldr	r3, [r7, #12]
    afbc:	2b00      	cmp	r3, #0
    afbe:	d101      	bne.n	afc4 <xQueueGenericReset+0x18>
    afc0:	b672      	cpsid	i
    afc2:	e7fe      	b.n	afc2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    afc4:	4b23      	ldr	r3, [pc, #140]	; (b054 <xQueueGenericReset+0xa8>)
    afc6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    afc8:	68fb      	ldr	r3, [r7, #12]
    afca:	681a      	ldr	r2, [r3, #0]
    afcc:	68fb      	ldr	r3, [r7, #12]
    afce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    afd0:	68fb      	ldr	r3, [r7, #12]
    afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    afd4:	434b      	muls	r3, r1
    afd6:	18d2      	adds	r2, r2, r3
    afd8:	68fb      	ldr	r3, [r7, #12]
    afda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    afdc:	68fb      	ldr	r3, [r7, #12]
    afde:	2200      	movs	r2, #0
    afe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    afe2:	68fb      	ldr	r3, [r7, #12]
    afe4:	681a      	ldr	r2, [r3, #0]
    afe6:	68fb      	ldr	r3, [r7, #12]
    afe8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    afea:	68fb      	ldr	r3, [r7, #12]
    afec:	681a      	ldr	r2, [r3, #0]
    afee:	68fb      	ldr	r3, [r7, #12]
    aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    aff2:	1e59      	subs	r1, r3, #1
    aff4:	68fb      	ldr	r3, [r7, #12]
    aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    aff8:	434b      	muls	r3, r1
    affa:	18d2      	adds	r2, r2, r3
    affc:	68fb      	ldr	r3, [r7, #12]
    affe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    b000:	68fb      	ldr	r3, [r7, #12]
    b002:	2244      	movs	r2, #68	; 0x44
    b004:	21ff      	movs	r1, #255	; 0xff
    b006:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    b008:	68fb      	ldr	r3, [r7, #12]
    b00a:	2245      	movs	r2, #69	; 0x45
    b00c:	21ff      	movs	r1, #255	; 0xff
    b00e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    b010:	683b      	ldr	r3, [r7, #0]
    b012:	2b00      	cmp	r3, #0
    b014:	d10d      	bne.n	b032 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b016:	68fb      	ldr	r3, [r7, #12]
    b018:	691b      	ldr	r3, [r3, #16]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d013      	beq.n	b046 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b01e:	68fb      	ldr	r3, [r7, #12]
    b020:	3310      	adds	r3, #16
    b022:	0018      	movs	r0, r3
    b024:	4b0c      	ldr	r3, [pc, #48]	; (b058 <xQueueGenericReset+0xac>)
    b026:	4798      	blx	r3
    b028:	1e03      	subs	r3, r0, #0
    b02a:	d00c      	beq.n	b046 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    b02c:	4b0b      	ldr	r3, [pc, #44]	; (b05c <xQueueGenericReset+0xb0>)
    b02e:	4798      	blx	r3
    b030:	e009      	b.n	b046 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    b032:	68fb      	ldr	r3, [r7, #12]
    b034:	3310      	adds	r3, #16
    b036:	0018      	movs	r0, r3
    b038:	4b09      	ldr	r3, [pc, #36]	; (b060 <xQueueGenericReset+0xb4>)
    b03a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    b03c:	68fb      	ldr	r3, [r7, #12]
    b03e:	3324      	adds	r3, #36	; 0x24
    b040:	0018      	movs	r0, r3
    b042:	4b07      	ldr	r3, [pc, #28]	; (b060 <xQueueGenericReset+0xb4>)
    b044:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    b046:	4b07      	ldr	r3, [pc, #28]	; (b064 <xQueueGenericReset+0xb8>)
    b048:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    b04a:	2301      	movs	r3, #1
}
    b04c:	0018      	movs	r0, r3
    b04e:	46bd      	mov	sp, r7
    b050:	b004      	add	sp, #16
    b052:	bd80      	pop	{r7, pc}
    b054:	0000ade9 	.word	0x0000ade9
    b058:	0000c1d1 	.word	0x0000c1d1
    b05c:	0000adc9 	.word	0x0000adc9
    b060:	0000ab69 	.word	0x0000ab69
    b064:	0000ae0d 	.word	0x0000ae0d

0000b068 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    b068:	b590      	push	{r4, r7, lr}
    b06a:	b08b      	sub	sp, #44	; 0x2c
    b06c:	af02      	add	r7, sp, #8
    b06e:	60f8      	str	r0, [r7, #12]
    b070:	60b9      	str	r1, [r7, #8]
    b072:	1dfb      	adds	r3, r7, #7
    b074:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    b076:	68fb      	ldr	r3, [r7, #12]
    b078:	2b00      	cmp	r3, #0
    b07a:	d101      	bne.n	b080 <xQueueGenericCreate+0x18>
    b07c:	b672      	cpsid	i
    b07e:	e7fe      	b.n	b07e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    b080:	68bb      	ldr	r3, [r7, #8]
    b082:	2b00      	cmp	r3, #0
    b084:	d102      	bne.n	b08c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    b086:	2300      	movs	r3, #0
    b088:	61fb      	str	r3, [r7, #28]
    b08a:	e003      	b.n	b094 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b08c:	68fb      	ldr	r3, [r7, #12]
    b08e:	68ba      	ldr	r2, [r7, #8]
    b090:	4353      	muls	r3, r2
    b092:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    b094:	69fb      	ldr	r3, [r7, #28]
    b096:	334c      	adds	r3, #76	; 0x4c
    b098:	0018      	movs	r0, r3
    b09a:	4b0c      	ldr	r3, [pc, #48]	; (b0cc <xQueueGenericCreate+0x64>)
    b09c:	4798      	blx	r3
    b09e:	0003      	movs	r3, r0
    b0a0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    b0a2:	69bb      	ldr	r3, [r7, #24]
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	d00c      	beq.n	b0c2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    b0a8:	69bb      	ldr	r3, [r7, #24]
    b0aa:	334c      	adds	r3, #76	; 0x4c
    b0ac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    b0ae:	1dfb      	adds	r3, r7, #7
    b0b0:	781c      	ldrb	r4, [r3, #0]
    b0b2:	697a      	ldr	r2, [r7, #20]
    b0b4:	68b9      	ldr	r1, [r7, #8]
    b0b6:	68f8      	ldr	r0, [r7, #12]
    b0b8:	69bb      	ldr	r3, [r7, #24]
    b0ba:	9300      	str	r3, [sp, #0]
    b0bc:	0023      	movs	r3, r4
    b0be:	4c04      	ldr	r4, [pc, #16]	; (b0d0 <xQueueGenericCreate+0x68>)
    b0c0:	47a0      	blx	r4
		}

		return pxNewQueue;
    b0c2:	69bb      	ldr	r3, [r7, #24]
	}
    b0c4:	0018      	movs	r0, r3
    b0c6:	46bd      	mov	sp, r7
    b0c8:	b009      	add	sp, #36	; 0x24
    b0ca:	bd90      	pop	{r4, r7, pc}
    b0cc:	0000aefd 	.word	0x0000aefd
    b0d0:	0000b0d5 	.word	0x0000b0d5

0000b0d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    b0d4:	b580      	push	{r7, lr}
    b0d6:	b084      	sub	sp, #16
    b0d8:	af00      	add	r7, sp, #0
    b0da:	60f8      	str	r0, [r7, #12]
    b0dc:	60b9      	str	r1, [r7, #8]
    b0de:	607a      	str	r2, [r7, #4]
    b0e0:	001a      	movs	r2, r3
    b0e2:	1cfb      	adds	r3, r7, #3
    b0e4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    b0e6:	68bb      	ldr	r3, [r7, #8]
    b0e8:	2b00      	cmp	r3, #0
    b0ea:	d103      	bne.n	b0f4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    b0ec:	69bb      	ldr	r3, [r7, #24]
    b0ee:	69ba      	ldr	r2, [r7, #24]
    b0f0:	601a      	str	r2, [r3, #0]
    b0f2:	e002      	b.n	b0fa <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    b0f4:	69bb      	ldr	r3, [r7, #24]
    b0f6:	687a      	ldr	r2, [r7, #4]
    b0f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    b0fa:	69bb      	ldr	r3, [r7, #24]
    b0fc:	68fa      	ldr	r2, [r7, #12]
    b0fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    b100:	69bb      	ldr	r3, [r7, #24]
    b102:	68ba      	ldr	r2, [r7, #8]
    b104:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    b106:	69bb      	ldr	r3, [r7, #24]
    b108:	2101      	movs	r1, #1
    b10a:	0018      	movs	r0, r3
    b10c:	4b04      	ldr	r3, [pc, #16]	; (b120 <prvInitialiseNewQueue+0x4c>)
    b10e:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    b110:	69bb      	ldr	r3, [r7, #24]
    b112:	2200      	movs	r2, #0
    b114:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    b116:	46c0      	nop			; (mov r8, r8)
    b118:	46bd      	mov	sp, r7
    b11a:	b004      	add	sp, #16
    b11c:	bd80      	pop	{r7, pc}
    b11e:	46c0      	nop			; (mov r8, r8)
    b120:	0000afad 	.word	0x0000afad

0000b124 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    b124:	b580      	push	{r7, lr}
    b126:	b08a      	sub	sp, #40	; 0x28
    b128:	af00      	add	r7, sp, #0
    b12a:	60f8      	str	r0, [r7, #12]
    b12c:	60b9      	str	r1, [r7, #8]
    b12e:	607a      	str	r2, [r7, #4]
    b130:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    b132:	2300      	movs	r3, #0
    b134:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b136:	68fb      	ldr	r3, [r7, #12]
    b138:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b13a:	6a3b      	ldr	r3, [r7, #32]
    b13c:	2b00      	cmp	r3, #0
    b13e:	d101      	bne.n	b144 <xQueueGenericSend+0x20>
    b140:	b672      	cpsid	i
    b142:	e7fe      	b.n	b142 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b144:	68bb      	ldr	r3, [r7, #8]
    b146:	2b00      	cmp	r3, #0
    b148:	d103      	bne.n	b152 <xQueueGenericSend+0x2e>
    b14a:	6a3b      	ldr	r3, [r7, #32]
    b14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b14e:	2b00      	cmp	r3, #0
    b150:	d101      	bne.n	b156 <xQueueGenericSend+0x32>
    b152:	2301      	movs	r3, #1
    b154:	e000      	b.n	b158 <xQueueGenericSend+0x34>
    b156:	2300      	movs	r3, #0
    b158:	2b00      	cmp	r3, #0
    b15a:	d101      	bne.n	b160 <xQueueGenericSend+0x3c>
    b15c:	b672      	cpsid	i
    b15e:	e7fe      	b.n	b15e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b160:	683b      	ldr	r3, [r7, #0]
    b162:	2b02      	cmp	r3, #2
    b164:	d103      	bne.n	b16e <xQueueGenericSend+0x4a>
    b166:	6a3b      	ldr	r3, [r7, #32]
    b168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b16a:	2b01      	cmp	r3, #1
    b16c:	d101      	bne.n	b172 <xQueueGenericSend+0x4e>
    b16e:	2301      	movs	r3, #1
    b170:	e000      	b.n	b174 <xQueueGenericSend+0x50>
    b172:	2300      	movs	r3, #0
    b174:	2b00      	cmp	r3, #0
    b176:	d101      	bne.n	b17c <xQueueGenericSend+0x58>
    b178:	b672      	cpsid	i
    b17a:	e7fe      	b.n	b17a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b17c:	4b53      	ldr	r3, [pc, #332]	; (b2cc <xQueueGenericSend+0x1a8>)
    b17e:	4798      	blx	r3
    b180:	1e03      	subs	r3, r0, #0
    b182:	d102      	bne.n	b18a <xQueueGenericSend+0x66>
    b184:	687b      	ldr	r3, [r7, #4]
    b186:	2b00      	cmp	r3, #0
    b188:	d101      	bne.n	b18e <xQueueGenericSend+0x6a>
    b18a:	2301      	movs	r3, #1
    b18c:	e000      	b.n	b190 <xQueueGenericSend+0x6c>
    b18e:	2300      	movs	r3, #0
    b190:	2b00      	cmp	r3, #0
    b192:	d101      	bne.n	b198 <xQueueGenericSend+0x74>
    b194:	b672      	cpsid	i
    b196:	e7fe      	b.n	b196 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    b198:	4b4d      	ldr	r3, [pc, #308]	; (b2d0 <xQueueGenericSend+0x1ac>)
    b19a:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b19c:	6a3b      	ldr	r3, [r7, #32]
    b19e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b1a0:	6a3b      	ldr	r3, [r7, #32]
    b1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b1a4:	429a      	cmp	r2, r3
    b1a6:	d302      	bcc.n	b1ae <xQueueGenericSend+0x8a>
    b1a8:	683b      	ldr	r3, [r7, #0]
    b1aa:	2b02      	cmp	r3, #2
    b1ac:	d12d      	bne.n	b20a <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b1ae:	683a      	ldr	r2, [r7, #0]
    b1b0:	68b9      	ldr	r1, [r7, #8]
    b1b2:	6a3b      	ldr	r3, [r7, #32]
    b1b4:	0018      	movs	r0, r3
    b1b6:	4b47      	ldr	r3, [pc, #284]	; (b2d4 <xQueueGenericSend+0x1b0>)
    b1b8:	4798      	blx	r3
    b1ba:	0003      	movs	r3, r0
    b1bc:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b1be:	6a3b      	ldr	r3, [r7, #32]
    b1c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b1c2:	2b00      	cmp	r3, #0
    b1c4:	d00a      	beq.n	b1dc <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b1c6:	683a      	ldr	r2, [r7, #0]
    b1c8:	6a3b      	ldr	r3, [r7, #32]
    b1ca:	0011      	movs	r1, r2
    b1cc:	0018      	movs	r0, r3
    b1ce:	4b42      	ldr	r3, [pc, #264]	; (b2d8 <xQueueGenericSend+0x1b4>)
    b1d0:	4798      	blx	r3
    b1d2:	1e03      	subs	r3, r0, #0
    b1d4:	d015      	beq.n	b202 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    b1d6:	4b41      	ldr	r3, [pc, #260]	; (b2dc <xQueueGenericSend+0x1b8>)
    b1d8:	4798      	blx	r3
    b1da:	e012      	b.n	b202 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b1dc:	6a3b      	ldr	r3, [r7, #32]
    b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d009      	beq.n	b1f8 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b1e4:	6a3b      	ldr	r3, [r7, #32]
    b1e6:	3324      	adds	r3, #36	; 0x24
    b1e8:	0018      	movs	r0, r3
    b1ea:	4b3d      	ldr	r3, [pc, #244]	; (b2e0 <xQueueGenericSend+0x1bc>)
    b1ec:	4798      	blx	r3
    b1ee:	1e03      	subs	r3, r0, #0
    b1f0:	d007      	beq.n	b202 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    b1f2:	4b3a      	ldr	r3, [pc, #232]	; (b2dc <xQueueGenericSend+0x1b8>)
    b1f4:	4798      	blx	r3
    b1f6:	e004      	b.n	b202 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    b1f8:	69fb      	ldr	r3, [r7, #28]
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d001      	beq.n	b202 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    b1fe:	4b37      	ldr	r3, [pc, #220]	; (b2dc <xQueueGenericSend+0x1b8>)
    b200:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    b202:	4b38      	ldr	r3, [pc, #224]	; (b2e4 <xQueueGenericSend+0x1c0>)
    b204:	4798      	blx	r3
				return pdPASS;
    b206:	2301      	movs	r3, #1
    b208:	e05c      	b.n	b2c4 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b20a:	687b      	ldr	r3, [r7, #4]
    b20c:	2b00      	cmp	r3, #0
    b20e:	d103      	bne.n	b218 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b210:	4b34      	ldr	r3, [pc, #208]	; (b2e4 <xQueueGenericSend+0x1c0>)
    b212:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    b214:	2300      	movs	r3, #0
    b216:	e055      	b.n	b2c4 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b21a:	2b00      	cmp	r3, #0
    b21c:	d106      	bne.n	b22c <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    b21e:	2314      	movs	r3, #20
    b220:	18fb      	adds	r3, r7, r3
    b222:	0018      	movs	r0, r3
    b224:	4b30      	ldr	r3, [pc, #192]	; (b2e8 <xQueueGenericSend+0x1c4>)
    b226:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b228:	2301      	movs	r3, #1
    b22a:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b22c:	4b2d      	ldr	r3, [pc, #180]	; (b2e4 <xQueueGenericSend+0x1c0>)
    b22e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b230:	4b2e      	ldr	r3, [pc, #184]	; (b2ec <xQueueGenericSend+0x1c8>)
    b232:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b234:	4b26      	ldr	r3, [pc, #152]	; (b2d0 <xQueueGenericSend+0x1ac>)
    b236:	4798      	blx	r3
    b238:	6a3b      	ldr	r3, [r7, #32]
    b23a:	2244      	movs	r2, #68	; 0x44
    b23c:	5c9b      	ldrb	r3, [r3, r2]
    b23e:	b25b      	sxtb	r3, r3
    b240:	3301      	adds	r3, #1
    b242:	d103      	bne.n	b24c <xQueueGenericSend+0x128>
    b244:	6a3b      	ldr	r3, [r7, #32]
    b246:	2244      	movs	r2, #68	; 0x44
    b248:	2100      	movs	r1, #0
    b24a:	5499      	strb	r1, [r3, r2]
    b24c:	6a3b      	ldr	r3, [r7, #32]
    b24e:	2245      	movs	r2, #69	; 0x45
    b250:	5c9b      	ldrb	r3, [r3, r2]
    b252:	b25b      	sxtb	r3, r3
    b254:	3301      	adds	r3, #1
    b256:	d103      	bne.n	b260 <xQueueGenericSend+0x13c>
    b258:	6a3b      	ldr	r3, [r7, #32]
    b25a:	2245      	movs	r2, #69	; 0x45
    b25c:	2100      	movs	r1, #0
    b25e:	5499      	strb	r1, [r3, r2]
    b260:	4b20      	ldr	r3, [pc, #128]	; (b2e4 <xQueueGenericSend+0x1c0>)
    b262:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b264:	1d3a      	adds	r2, r7, #4
    b266:	2314      	movs	r3, #20
    b268:	18fb      	adds	r3, r7, r3
    b26a:	0011      	movs	r1, r2
    b26c:	0018      	movs	r0, r3
    b26e:	4b20      	ldr	r3, [pc, #128]	; (b2f0 <xQueueGenericSend+0x1cc>)
    b270:	4798      	blx	r3
    b272:	1e03      	subs	r3, r0, #0
    b274:	d11f      	bne.n	b2b6 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    b276:	6a3b      	ldr	r3, [r7, #32]
    b278:	0018      	movs	r0, r3
    b27a:	4b1e      	ldr	r3, [pc, #120]	; (b2f4 <xQueueGenericSend+0x1d0>)
    b27c:	4798      	blx	r3
    b27e:	1e03      	subs	r3, r0, #0
    b280:	d012      	beq.n	b2a8 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    b282:	6a3b      	ldr	r3, [r7, #32]
    b284:	3310      	adds	r3, #16
    b286:	687a      	ldr	r2, [r7, #4]
    b288:	0011      	movs	r1, r2
    b28a:	0018      	movs	r0, r3
    b28c:	4b1a      	ldr	r3, [pc, #104]	; (b2f8 <xQueueGenericSend+0x1d4>)
    b28e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    b290:	6a3b      	ldr	r3, [r7, #32]
    b292:	0018      	movs	r0, r3
    b294:	4b19      	ldr	r3, [pc, #100]	; (b2fc <xQueueGenericSend+0x1d8>)
    b296:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    b298:	4b19      	ldr	r3, [pc, #100]	; (b300 <xQueueGenericSend+0x1dc>)
    b29a:	4798      	blx	r3
    b29c:	1e03      	subs	r3, r0, #0
    b29e:	d000      	beq.n	b2a2 <xQueueGenericSend+0x17e>
    b2a0:	e77a      	b.n	b198 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    b2a2:	4b0e      	ldr	r3, [pc, #56]	; (b2dc <xQueueGenericSend+0x1b8>)
    b2a4:	4798      	blx	r3
    b2a6:	e777      	b.n	b198 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b2a8:	6a3b      	ldr	r3, [r7, #32]
    b2aa:	0018      	movs	r0, r3
    b2ac:	4b13      	ldr	r3, [pc, #76]	; (b2fc <xQueueGenericSend+0x1d8>)
    b2ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b2b0:	4b13      	ldr	r3, [pc, #76]	; (b300 <xQueueGenericSend+0x1dc>)
    b2b2:	4798      	blx	r3
    b2b4:	e770      	b.n	b198 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    b2b6:	6a3b      	ldr	r3, [r7, #32]
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b10      	ldr	r3, [pc, #64]	; (b2fc <xQueueGenericSend+0x1d8>)
    b2bc:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b2be:	4b10      	ldr	r3, [pc, #64]	; (b300 <xQueueGenericSend+0x1dc>)
    b2c0:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    b2c2:	2300      	movs	r3, #0
		}
	}
}
    b2c4:	0018      	movs	r0, r3
    b2c6:	46bd      	mov	sp, r7
    b2c8:	b00a      	add	sp, #40	; 0x28
    b2ca:	bd80      	pop	{r7, pc}
    b2cc:	0000c531 	.word	0x0000c531
    b2d0:	0000ade9 	.word	0x0000ade9
    b2d4:	0000b629 	.word	0x0000b629
    b2d8:	0000b92d 	.word	0x0000b92d
    b2dc:	0000adc9 	.word	0x0000adc9
    b2e0:	0000c1d1 	.word	0x0000c1d1
    b2e4:	0000ae0d 	.word	0x0000ae0d
    b2e8:	0000c291 	.word	0x0000c291
    b2ec:	0000bd95 	.word	0x0000bd95
    b2f0:	0000c2c5 	.word	0x0000c2c5
    b2f4:	0000b87d 	.word	0x0000b87d
    b2f8:	0000c139 	.word	0x0000c139
    b2fc:	0000b759 	.word	0x0000b759
    b300:	0000bdad 	.word	0x0000bdad

0000b304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    b304:	b580      	push	{r7, lr}
    b306:	b088      	sub	sp, #32
    b308:	af00      	add	r7, sp, #0
    b30a:	60f8      	str	r0, [r7, #12]
    b30c:	60b9      	str	r1, [r7, #8]
    b30e:	607a      	str	r2, [r7, #4]
    b310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b312:	68fb      	ldr	r3, [r7, #12]
    b314:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    b316:	69bb      	ldr	r3, [r7, #24]
    b318:	2b00      	cmp	r3, #0
    b31a:	d101      	bne.n	b320 <xQueueGenericSendFromISR+0x1c>
    b31c:	b672      	cpsid	i
    b31e:	e7fe      	b.n	b31e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b320:	68bb      	ldr	r3, [r7, #8]
    b322:	2b00      	cmp	r3, #0
    b324:	d103      	bne.n	b32e <xQueueGenericSendFromISR+0x2a>
    b326:	69bb      	ldr	r3, [r7, #24]
    b328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b32a:	2b00      	cmp	r3, #0
    b32c:	d101      	bne.n	b332 <xQueueGenericSendFromISR+0x2e>
    b32e:	2301      	movs	r3, #1
    b330:	e000      	b.n	b334 <xQueueGenericSendFromISR+0x30>
    b332:	2300      	movs	r3, #0
    b334:	2b00      	cmp	r3, #0
    b336:	d101      	bne.n	b33c <xQueueGenericSendFromISR+0x38>
    b338:	b672      	cpsid	i
    b33a:	e7fe      	b.n	b33a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b33c:	683b      	ldr	r3, [r7, #0]
    b33e:	2b02      	cmp	r3, #2
    b340:	d103      	bne.n	b34a <xQueueGenericSendFromISR+0x46>
    b342:	69bb      	ldr	r3, [r7, #24]
    b344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b346:	2b01      	cmp	r3, #1
    b348:	d101      	bne.n	b34e <xQueueGenericSendFromISR+0x4a>
    b34a:	2301      	movs	r3, #1
    b34c:	e000      	b.n	b350 <xQueueGenericSendFromISR+0x4c>
    b34e:	2300      	movs	r3, #0
    b350:	2b00      	cmp	r3, #0
    b352:	d101      	bne.n	b358 <xQueueGenericSendFromISR+0x54>
    b354:	b672      	cpsid	i
    b356:	e7fe      	b.n	b356 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    b358:	4b2d      	ldr	r3, [pc, #180]	; (b410 <xQueueGenericSendFromISR+0x10c>)
    b35a:	4798      	blx	r3
    b35c:	0003      	movs	r3, r0
    b35e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b360:	69bb      	ldr	r3, [r7, #24]
    b362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b364:	69bb      	ldr	r3, [r7, #24]
    b366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b368:	429a      	cmp	r2, r3
    b36a:	d302      	bcc.n	b372 <xQueueGenericSendFromISR+0x6e>
    b36c:	683b      	ldr	r3, [r7, #0]
    b36e:	2b02      	cmp	r3, #2
    b370:	d142      	bne.n	b3f8 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    b372:	2313      	movs	r3, #19
    b374:	18fb      	adds	r3, r7, r3
    b376:	69ba      	ldr	r2, [r7, #24]
    b378:	2145      	movs	r1, #69	; 0x45
    b37a:	5c52      	ldrb	r2, [r2, r1]
    b37c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b37e:	683a      	ldr	r2, [r7, #0]
    b380:	68b9      	ldr	r1, [r7, #8]
    b382:	69bb      	ldr	r3, [r7, #24]
    b384:	0018      	movs	r0, r3
    b386:	4b23      	ldr	r3, [pc, #140]	; (b414 <xQueueGenericSendFromISR+0x110>)
    b388:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    b38a:	2313      	movs	r3, #19
    b38c:	18fb      	adds	r3, r7, r3
    b38e:	781b      	ldrb	r3, [r3, #0]
    b390:	b25b      	sxtb	r3, r3
    b392:	3301      	adds	r3, #1
    b394:	d124      	bne.n	b3e0 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b396:	69bb      	ldr	r3, [r7, #24]
    b398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b39a:	2b00      	cmp	r3, #0
    b39c:	d00e      	beq.n	b3bc <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b39e:	683a      	ldr	r2, [r7, #0]
    b3a0:	69bb      	ldr	r3, [r7, #24]
    b3a2:	0011      	movs	r1, r2
    b3a4:	0018      	movs	r0, r3
    b3a6:	4b1c      	ldr	r3, [pc, #112]	; (b418 <xQueueGenericSendFromISR+0x114>)
    b3a8:	4798      	blx	r3
    b3aa:	1e03      	subs	r3, r0, #0
    b3ac:	d021      	beq.n	b3f2 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    b3ae:	687b      	ldr	r3, [r7, #4]
    b3b0:	2b00      	cmp	r3, #0
    b3b2:	d01e      	beq.n	b3f2 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    b3b4:	687b      	ldr	r3, [r7, #4]
    b3b6:	2201      	movs	r2, #1
    b3b8:	601a      	str	r2, [r3, #0]
    b3ba:	e01a      	b.n	b3f2 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b3bc:	69bb      	ldr	r3, [r7, #24]
    b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d016      	beq.n	b3f2 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b3c4:	69bb      	ldr	r3, [r7, #24]
    b3c6:	3324      	adds	r3, #36	; 0x24
    b3c8:	0018      	movs	r0, r3
    b3ca:	4b14      	ldr	r3, [pc, #80]	; (b41c <xQueueGenericSendFromISR+0x118>)
    b3cc:	4798      	blx	r3
    b3ce:	1e03      	subs	r3, r0, #0
    b3d0:	d00f      	beq.n	b3f2 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    b3d2:	687b      	ldr	r3, [r7, #4]
    b3d4:	2b00      	cmp	r3, #0
    b3d6:	d00c      	beq.n	b3f2 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    b3d8:	687b      	ldr	r3, [r7, #4]
    b3da:	2201      	movs	r2, #1
    b3dc:	601a      	str	r2, [r3, #0]
    b3de:	e008      	b.n	b3f2 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b3e0:	2313      	movs	r3, #19
    b3e2:	18fb      	adds	r3, r7, r3
    b3e4:	781b      	ldrb	r3, [r3, #0]
    b3e6:	3301      	adds	r3, #1
    b3e8:	b2db      	uxtb	r3, r3
    b3ea:	b259      	sxtb	r1, r3
    b3ec:	69bb      	ldr	r3, [r7, #24]
    b3ee:	2245      	movs	r2, #69	; 0x45
    b3f0:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    b3f2:	2301      	movs	r3, #1
    b3f4:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    b3f6:	e001      	b.n	b3fc <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    b3f8:	2300      	movs	r3, #0
    b3fa:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b3fc:	697b      	ldr	r3, [r7, #20]
    b3fe:	0018      	movs	r0, r3
    b400:	4b07      	ldr	r3, [pc, #28]	; (b420 <xQueueGenericSendFromISR+0x11c>)
    b402:	4798      	blx	r3

	return xReturn;
    b404:	69fb      	ldr	r3, [r7, #28]
}
    b406:	0018      	movs	r0, r3
    b408:	46bd      	mov	sp, r7
    b40a:	b008      	add	sp, #32
    b40c:	bd80      	pop	{r7, pc}
    b40e:	46c0      	nop			; (mov r8, r8)
    b410:	0000ae3d 	.word	0x0000ae3d
    b414:	0000b629 	.word	0x0000b629
    b418:	0000b92d 	.word	0x0000b92d
    b41c:	0000c1d1 	.word	0x0000c1d1
    b420:	0000ae49 	.word	0x0000ae49

0000b424 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    b424:	b580      	push	{r7, lr}
    b426:	b08a      	sub	sp, #40	; 0x28
    b428:	af00      	add	r7, sp, #0
    b42a:	60f8      	str	r0, [r7, #12]
    b42c:	60b9      	str	r1, [r7, #8]
    b42e:	607a      	str	r2, [r7, #4]
    b430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    b432:	2300      	movs	r3, #0
    b434:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b436:	68fb      	ldr	r3, [r7, #12]
    b438:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b43a:	6a3b      	ldr	r3, [r7, #32]
    b43c:	2b00      	cmp	r3, #0
    b43e:	d101      	bne.n	b444 <xQueueGenericReceive+0x20>
    b440:	b672      	cpsid	i
    b442:	e7fe      	b.n	b442 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b444:	68bb      	ldr	r3, [r7, #8]
    b446:	2b00      	cmp	r3, #0
    b448:	d103      	bne.n	b452 <xQueueGenericReceive+0x2e>
    b44a:	6a3b      	ldr	r3, [r7, #32]
    b44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b44e:	2b00      	cmp	r3, #0
    b450:	d101      	bne.n	b456 <xQueueGenericReceive+0x32>
    b452:	2301      	movs	r3, #1
    b454:	e000      	b.n	b458 <xQueueGenericReceive+0x34>
    b456:	2300      	movs	r3, #0
    b458:	2b00      	cmp	r3, #0
    b45a:	d101      	bne.n	b460 <xQueueGenericReceive+0x3c>
    b45c:	b672      	cpsid	i
    b45e:	e7fe      	b.n	b45e <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b460:	4b62      	ldr	r3, [pc, #392]	; (b5ec <xQueueGenericReceive+0x1c8>)
    b462:	4798      	blx	r3
    b464:	1e03      	subs	r3, r0, #0
    b466:	d102      	bne.n	b46e <xQueueGenericReceive+0x4a>
    b468:	687b      	ldr	r3, [r7, #4]
    b46a:	2b00      	cmp	r3, #0
    b46c:	d101      	bne.n	b472 <xQueueGenericReceive+0x4e>
    b46e:	2301      	movs	r3, #1
    b470:	e000      	b.n	b474 <xQueueGenericReceive+0x50>
    b472:	2300      	movs	r3, #0
    b474:	2b00      	cmp	r3, #0
    b476:	d101      	bne.n	b47c <xQueueGenericReceive+0x58>
    b478:	b672      	cpsid	i
    b47a:	e7fe      	b.n	b47a <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    b47c:	4b5c      	ldr	r3, [pc, #368]	; (b5f0 <xQueueGenericReceive+0x1cc>)
    b47e:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b480:	6a3b      	ldr	r3, [r7, #32]
    b482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b484:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b486:	69fb      	ldr	r3, [r7, #28]
    b488:	2b00      	cmp	r3, #0
    b48a:	d03a      	beq.n	b502 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    b48c:	6a3b      	ldr	r3, [r7, #32]
    b48e:	68db      	ldr	r3, [r3, #12]
    b490:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    b492:	68ba      	ldr	r2, [r7, #8]
    b494:	6a3b      	ldr	r3, [r7, #32]
    b496:	0011      	movs	r1, r2
    b498:	0018      	movs	r0, r3
    b49a:	4b56      	ldr	r3, [pc, #344]	; (b5f4 <xQueueGenericReceive+0x1d0>)
    b49c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    b49e:	683b      	ldr	r3, [r7, #0]
    b4a0:	2b00      	cmp	r3, #0
    b4a2:	d11a      	bne.n	b4da <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    b4a4:	69fb      	ldr	r3, [r7, #28]
    b4a6:	1e5a      	subs	r2, r3, #1
    b4a8:	6a3b      	ldr	r3, [r7, #32]
    b4aa:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b4ac:	6a3b      	ldr	r3, [r7, #32]
    b4ae:	681b      	ldr	r3, [r3, #0]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d104      	bne.n	b4be <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    b4b4:	4b50      	ldr	r3, [pc, #320]	; (b5f8 <xQueueGenericReceive+0x1d4>)
    b4b6:	4798      	blx	r3
    b4b8:	0002      	movs	r2, r0
    b4ba:	6a3b      	ldr	r3, [r7, #32]
    b4bc:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b4be:	6a3b      	ldr	r3, [r7, #32]
    b4c0:	691b      	ldr	r3, [r3, #16]
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d019      	beq.n	b4fa <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b4c6:	6a3b      	ldr	r3, [r7, #32]
    b4c8:	3310      	adds	r3, #16
    b4ca:	0018      	movs	r0, r3
    b4cc:	4b4b      	ldr	r3, [pc, #300]	; (b5fc <xQueueGenericReceive+0x1d8>)
    b4ce:	4798      	blx	r3
    b4d0:	1e03      	subs	r3, r0, #0
    b4d2:	d012      	beq.n	b4fa <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    b4d4:	4b4a      	ldr	r3, [pc, #296]	; (b600 <xQueueGenericReceive+0x1dc>)
    b4d6:	4798      	blx	r3
    b4d8:	e00f      	b.n	b4fa <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    b4da:	6a3b      	ldr	r3, [r7, #32]
    b4dc:	69ba      	ldr	r2, [r7, #24]
    b4de:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b4e0:	6a3b      	ldr	r3, [r7, #32]
    b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b4e4:	2b00      	cmp	r3, #0
    b4e6:	d008      	beq.n	b4fa <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b4e8:	6a3b      	ldr	r3, [r7, #32]
    b4ea:	3324      	adds	r3, #36	; 0x24
    b4ec:	0018      	movs	r0, r3
    b4ee:	4b43      	ldr	r3, [pc, #268]	; (b5fc <xQueueGenericReceive+0x1d8>)
    b4f0:	4798      	blx	r3
    b4f2:	1e03      	subs	r3, r0, #0
    b4f4:	d001      	beq.n	b4fa <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    b4f6:	4b42      	ldr	r3, [pc, #264]	; (b600 <xQueueGenericReceive+0x1dc>)
    b4f8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    b4fa:	4b42      	ldr	r3, [pc, #264]	; (b604 <xQueueGenericReceive+0x1e0>)
    b4fc:	4798      	blx	r3
				return pdPASS;
    b4fe:	2301      	movs	r3, #1
    b500:	e070      	b.n	b5e4 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b502:	687b      	ldr	r3, [r7, #4]
    b504:	2b00      	cmp	r3, #0
    b506:	d103      	bne.n	b510 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b508:	4b3e      	ldr	r3, [pc, #248]	; (b604 <xQueueGenericReceive+0x1e0>)
    b50a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    b50c:	2300      	movs	r3, #0
    b50e:	e069      	b.n	b5e4 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b512:	2b00      	cmp	r3, #0
    b514:	d106      	bne.n	b524 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    b516:	2310      	movs	r3, #16
    b518:	18fb      	adds	r3, r7, r3
    b51a:	0018      	movs	r0, r3
    b51c:	4b3a      	ldr	r3, [pc, #232]	; (b608 <xQueueGenericReceive+0x1e4>)
    b51e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b520:	2301      	movs	r3, #1
    b522:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b524:	4b37      	ldr	r3, [pc, #220]	; (b604 <xQueueGenericReceive+0x1e0>)
    b526:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b528:	4b38      	ldr	r3, [pc, #224]	; (b60c <xQueueGenericReceive+0x1e8>)
    b52a:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b52c:	4b30      	ldr	r3, [pc, #192]	; (b5f0 <xQueueGenericReceive+0x1cc>)
    b52e:	4798      	blx	r3
    b530:	6a3b      	ldr	r3, [r7, #32]
    b532:	2244      	movs	r2, #68	; 0x44
    b534:	5c9b      	ldrb	r3, [r3, r2]
    b536:	b25b      	sxtb	r3, r3
    b538:	3301      	adds	r3, #1
    b53a:	d103      	bne.n	b544 <xQueueGenericReceive+0x120>
    b53c:	6a3b      	ldr	r3, [r7, #32]
    b53e:	2244      	movs	r2, #68	; 0x44
    b540:	2100      	movs	r1, #0
    b542:	5499      	strb	r1, [r3, r2]
    b544:	6a3b      	ldr	r3, [r7, #32]
    b546:	2245      	movs	r2, #69	; 0x45
    b548:	5c9b      	ldrb	r3, [r3, r2]
    b54a:	b25b      	sxtb	r3, r3
    b54c:	3301      	adds	r3, #1
    b54e:	d103      	bne.n	b558 <xQueueGenericReceive+0x134>
    b550:	6a3b      	ldr	r3, [r7, #32]
    b552:	2245      	movs	r2, #69	; 0x45
    b554:	2100      	movs	r1, #0
    b556:	5499      	strb	r1, [r3, r2]
    b558:	4b2a      	ldr	r3, [pc, #168]	; (b604 <xQueueGenericReceive+0x1e0>)
    b55a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b55c:	1d3a      	adds	r2, r7, #4
    b55e:	2310      	movs	r3, #16
    b560:	18fb      	adds	r3, r7, r3
    b562:	0011      	movs	r1, r2
    b564:	0018      	movs	r0, r3
    b566:	4b2a      	ldr	r3, [pc, #168]	; (b610 <xQueueGenericReceive+0x1ec>)
    b568:	4798      	blx	r3
    b56a:	1e03      	subs	r3, r0, #0
    b56c:	d12c      	bne.n	b5c8 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b56e:	6a3b      	ldr	r3, [r7, #32]
    b570:	0018      	movs	r0, r3
    b572:	4b28      	ldr	r3, [pc, #160]	; (b614 <xQueueGenericReceive+0x1f0>)
    b574:	4798      	blx	r3
    b576:	1e03      	subs	r3, r0, #0
    b578:	d01f      	beq.n	b5ba <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b57a:	6a3b      	ldr	r3, [r7, #32]
    b57c:	681b      	ldr	r3, [r3, #0]
    b57e:	2b00      	cmp	r3, #0
    b580:	d108      	bne.n	b594 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    b582:	4b1b      	ldr	r3, [pc, #108]	; (b5f0 <xQueueGenericReceive+0x1cc>)
    b584:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    b586:	6a3b      	ldr	r3, [r7, #32]
    b588:	685b      	ldr	r3, [r3, #4]
    b58a:	0018      	movs	r0, r3
    b58c:	4b22      	ldr	r3, [pc, #136]	; (b618 <xQueueGenericReceive+0x1f4>)
    b58e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    b590:	4b1c      	ldr	r3, [pc, #112]	; (b604 <xQueueGenericReceive+0x1e0>)
    b592:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b594:	6a3b      	ldr	r3, [r7, #32]
    b596:	3324      	adds	r3, #36	; 0x24
    b598:	687a      	ldr	r2, [r7, #4]
    b59a:	0011      	movs	r1, r2
    b59c:	0018      	movs	r0, r3
    b59e:	4b1f      	ldr	r3, [pc, #124]	; (b61c <xQueueGenericReceive+0x1f8>)
    b5a0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    b5a2:	6a3b      	ldr	r3, [r7, #32]
    b5a4:	0018      	movs	r0, r3
    b5a6:	4b1e      	ldr	r3, [pc, #120]	; (b620 <xQueueGenericReceive+0x1fc>)
    b5a8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    b5aa:	4b1e      	ldr	r3, [pc, #120]	; (b624 <xQueueGenericReceive+0x200>)
    b5ac:	4798      	blx	r3
    b5ae:	1e03      	subs	r3, r0, #0
    b5b0:	d000      	beq.n	b5b4 <xQueueGenericReceive+0x190>
    b5b2:	e763      	b.n	b47c <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    b5b4:	4b12      	ldr	r3, [pc, #72]	; (b600 <xQueueGenericReceive+0x1dc>)
    b5b6:	4798      	blx	r3
    b5b8:	e760      	b.n	b47c <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b5ba:	6a3b      	ldr	r3, [r7, #32]
    b5bc:	0018      	movs	r0, r3
    b5be:	4b18      	ldr	r3, [pc, #96]	; (b620 <xQueueGenericReceive+0x1fc>)
    b5c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b5c2:	4b18      	ldr	r3, [pc, #96]	; (b624 <xQueueGenericReceive+0x200>)
    b5c4:	4798      	blx	r3
    b5c6:	e759      	b.n	b47c <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    b5c8:	6a3b      	ldr	r3, [r7, #32]
    b5ca:	0018      	movs	r0, r3
    b5cc:	4b14      	ldr	r3, [pc, #80]	; (b620 <xQueueGenericReceive+0x1fc>)
    b5ce:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b5d0:	4b14      	ldr	r3, [pc, #80]	; (b624 <xQueueGenericReceive+0x200>)
    b5d2:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b5d4:	6a3b      	ldr	r3, [r7, #32]
    b5d6:	0018      	movs	r0, r3
    b5d8:	4b0e      	ldr	r3, [pc, #56]	; (b614 <xQueueGenericReceive+0x1f0>)
    b5da:	4798      	blx	r3
    b5dc:	1e03      	subs	r3, r0, #0
    b5de:	d100      	bne.n	b5e2 <xQueueGenericReceive+0x1be>
    b5e0:	e74c      	b.n	b47c <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    b5e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    b5e4:	0018      	movs	r0, r3
    b5e6:	46bd      	mov	sp, r7
    b5e8:	b00a      	add	sp, #40	; 0x28
    b5ea:	bd80      	pop	{r7, pc}
    b5ec:	0000c531 	.word	0x0000c531
    b5f0:	0000ade9 	.word	0x0000ade9
    b5f4:	0000b709 	.word	0x0000b709
    b5f8:	0000c6ed 	.word	0x0000c6ed
    b5fc:	0000c1d1 	.word	0x0000c1d1
    b600:	0000adc9 	.word	0x0000adc9
    b604:	0000ae0d 	.word	0x0000ae0d
    b608:	0000c291 	.word	0x0000c291
    b60c:	0000bd95 	.word	0x0000bd95
    b610:	0000c2c5 	.word	0x0000c2c5
    b614:	0000b849 	.word	0x0000b849
    b618:	0000c569 	.word	0x0000c569
    b61c:	0000c139 	.word	0x0000c139
    b620:	0000b759 	.word	0x0000b759
    b624:	0000bdad 	.word	0x0000bdad

0000b628 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    b628:	b580      	push	{r7, lr}
    b62a:	b086      	sub	sp, #24
    b62c:	af00      	add	r7, sp, #0
    b62e:	60f8      	str	r0, [r7, #12]
    b630:	60b9      	str	r1, [r7, #8]
    b632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    b634:	2300      	movs	r3, #0
    b636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b638:	68fb      	ldr	r3, [r7, #12]
    b63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b63c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    b63e:	68fb      	ldr	r3, [r7, #12]
    b640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b642:	2b00      	cmp	r3, #0
    b644:	d10e      	bne.n	b664 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b646:	68fb      	ldr	r3, [r7, #12]
    b648:	681b      	ldr	r3, [r3, #0]
    b64a:	2b00      	cmp	r3, #0
    b64c:	d14e      	bne.n	b6ec <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    b64e:	68fb      	ldr	r3, [r7, #12]
    b650:	685b      	ldr	r3, [r3, #4]
    b652:	0018      	movs	r0, r3
    b654:	4b2a      	ldr	r3, [pc, #168]	; (b700 <prvCopyDataToQueue+0xd8>)
    b656:	4798      	blx	r3
    b658:	0003      	movs	r3, r0
    b65a:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    b65c:	68fb      	ldr	r3, [r7, #12]
    b65e:	2200      	movs	r2, #0
    b660:	605a      	str	r2, [r3, #4]
    b662:	e043      	b.n	b6ec <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    b664:	687b      	ldr	r3, [r7, #4]
    b666:	2b00      	cmp	r3, #0
    b668:	d119      	bne.n	b69e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    b66a:	68fb      	ldr	r3, [r7, #12]
    b66c:	6898      	ldr	r0, [r3, #8]
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b672:	68bb      	ldr	r3, [r7, #8]
    b674:	0019      	movs	r1, r3
    b676:	4b23      	ldr	r3, [pc, #140]	; (b704 <prvCopyDataToQueue+0xdc>)
    b678:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    b67a:	68fb      	ldr	r3, [r7, #12]
    b67c:	689a      	ldr	r2, [r3, #8]
    b67e:	68fb      	ldr	r3, [r7, #12]
    b680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b682:	18d2      	adds	r2, r2, r3
    b684:	68fb      	ldr	r3, [r7, #12]
    b686:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b688:	68fb      	ldr	r3, [r7, #12]
    b68a:	689a      	ldr	r2, [r3, #8]
    b68c:	68fb      	ldr	r3, [r7, #12]
    b68e:	685b      	ldr	r3, [r3, #4]
    b690:	429a      	cmp	r2, r3
    b692:	d32b      	bcc.n	b6ec <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    b694:	68fb      	ldr	r3, [r7, #12]
    b696:	681a      	ldr	r2, [r3, #0]
    b698:	68fb      	ldr	r3, [r7, #12]
    b69a:	609a      	str	r2, [r3, #8]
    b69c:	e026      	b.n	b6ec <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b69e:	68fb      	ldr	r3, [r7, #12]
    b6a0:	68d8      	ldr	r0, [r3, #12]
    b6a2:	68fb      	ldr	r3, [r7, #12]
    b6a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b6a6:	68bb      	ldr	r3, [r7, #8]
    b6a8:	0019      	movs	r1, r3
    b6aa:	4b16      	ldr	r3, [pc, #88]	; (b704 <prvCopyDataToQueue+0xdc>)
    b6ac:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    b6ae:	68fb      	ldr	r3, [r7, #12]
    b6b0:	68da      	ldr	r2, [r3, #12]
    b6b2:	68fb      	ldr	r3, [r7, #12]
    b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b6b6:	425b      	negs	r3, r3
    b6b8:	18d2      	adds	r2, r2, r3
    b6ba:	68fb      	ldr	r3, [r7, #12]
    b6bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b6be:	68fb      	ldr	r3, [r7, #12]
    b6c0:	68da      	ldr	r2, [r3, #12]
    b6c2:	68fb      	ldr	r3, [r7, #12]
    b6c4:	681b      	ldr	r3, [r3, #0]
    b6c6:	429a      	cmp	r2, r3
    b6c8:	d207      	bcs.n	b6da <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    b6ca:	68fb      	ldr	r3, [r7, #12]
    b6cc:	685a      	ldr	r2, [r3, #4]
    b6ce:	68fb      	ldr	r3, [r7, #12]
    b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b6d2:	425b      	negs	r3, r3
    b6d4:	18d2      	adds	r2, r2, r3
    b6d6:	68fb      	ldr	r3, [r7, #12]
    b6d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    b6da:	687b      	ldr	r3, [r7, #4]
    b6dc:	2b02      	cmp	r3, #2
    b6de:	d105      	bne.n	b6ec <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b6e0:	693b      	ldr	r3, [r7, #16]
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d002      	beq.n	b6ec <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    b6e6:	693b      	ldr	r3, [r7, #16]
    b6e8:	3b01      	subs	r3, #1
    b6ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    b6ec:	693b      	ldr	r3, [r7, #16]
    b6ee:	1c5a      	adds	r2, r3, #1
    b6f0:	68fb      	ldr	r3, [r7, #12]
    b6f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    b6f4:	697b      	ldr	r3, [r7, #20]
}
    b6f6:	0018      	movs	r0, r3
    b6f8:	46bd      	mov	sp, r7
    b6fa:	b006      	add	sp, #24
    b6fc:	bd80      	pop	{r7, pc}
    b6fe:	46c0      	nop			; (mov r8, r8)
    b700:	0000c62d 	.word	0x0000c62d
    b704:	000107ad 	.word	0x000107ad

0000b708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    b708:	b580      	push	{r7, lr}
    b70a:	b082      	sub	sp, #8
    b70c:	af00      	add	r7, sp, #0
    b70e:	6078      	str	r0, [r7, #4]
    b710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    b712:	687b      	ldr	r3, [r7, #4]
    b714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b716:	2b00      	cmp	r3, #0
    b718:	d018      	beq.n	b74c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    b71a:	687b      	ldr	r3, [r7, #4]
    b71c:	68da      	ldr	r2, [r3, #12]
    b71e:	687b      	ldr	r3, [r7, #4]
    b720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b722:	18d2      	adds	r2, r2, r3
    b724:	687b      	ldr	r3, [r7, #4]
    b726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    b728:	687b      	ldr	r3, [r7, #4]
    b72a:	68da      	ldr	r2, [r3, #12]
    b72c:	687b      	ldr	r3, [r7, #4]
    b72e:	685b      	ldr	r3, [r3, #4]
    b730:	429a      	cmp	r2, r3
    b732:	d303      	bcc.n	b73c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    b734:	687b      	ldr	r3, [r7, #4]
    b736:	681a      	ldr	r2, [r3, #0]
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    b73c:	687b      	ldr	r3, [r7, #4]
    b73e:	68d9      	ldr	r1, [r3, #12]
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b744:	683b      	ldr	r3, [r7, #0]
    b746:	0018      	movs	r0, r3
    b748:	4b02      	ldr	r3, [pc, #8]	; (b754 <prvCopyDataFromQueue+0x4c>)
    b74a:	4798      	blx	r3
	}
}
    b74c:	46c0      	nop			; (mov r8, r8)
    b74e:	46bd      	mov	sp, r7
    b750:	b002      	add	sp, #8
    b752:	bd80      	pop	{r7, pc}
    b754:	000107ad 	.word	0x000107ad

0000b758 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    b758:	b580      	push	{r7, lr}
    b75a:	b084      	sub	sp, #16
    b75c:	af00      	add	r7, sp, #0
    b75e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    b760:	4b34      	ldr	r3, [pc, #208]	; (b834 <prvUnlockQueue+0xdc>)
    b762:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    b764:	230f      	movs	r3, #15
    b766:	18fb      	adds	r3, r7, r3
    b768:	687a      	ldr	r2, [r7, #4]
    b76a:	2145      	movs	r1, #69	; 0x45
    b76c:	5c52      	ldrb	r2, [r2, r1]
    b76e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b770:	e022      	b.n	b7b8 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    b772:	687b      	ldr	r3, [r7, #4]
    b774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b776:	2b00      	cmp	r3, #0
    b778:	d009      	beq.n	b78e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    b77a:	687b      	ldr	r3, [r7, #4]
    b77c:	2100      	movs	r1, #0
    b77e:	0018      	movs	r0, r3
    b780:	4b2d      	ldr	r3, [pc, #180]	; (b838 <prvUnlockQueue+0xe0>)
    b782:	4798      	blx	r3
    b784:	1e03      	subs	r3, r0, #0
    b786:	d00f      	beq.n	b7a8 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    b788:	4b2c      	ldr	r3, [pc, #176]	; (b83c <prvUnlockQueue+0xe4>)
    b78a:	4798      	blx	r3
    b78c:	e00c      	b.n	b7a8 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b78e:	687b      	ldr	r3, [r7, #4]
    b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b792:	2b00      	cmp	r3, #0
    b794:	d017      	beq.n	b7c6 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b796:	687b      	ldr	r3, [r7, #4]
    b798:	3324      	adds	r3, #36	; 0x24
    b79a:	0018      	movs	r0, r3
    b79c:	4b28      	ldr	r3, [pc, #160]	; (b840 <prvUnlockQueue+0xe8>)
    b79e:	4798      	blx	r3
    b7a0:	1e03      	subs	r3, r0, #0
    b7a2:	d001      	beq.n	b7a8 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    b7a4:	4b25      	ldr	r3, [pc, #148]	; (b83c <prvUnlockQueue+0xe4>)
    b7a6:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    b7a8:	230f      	movs	r3, #15
    b7aa:	18fb      	adds	r3, r7, r3
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	3b01      	subs	r3, #1
    b7b0:	b2da      	uxtb	r2, r3
    b7b2:	230f      	movs	r3, #15
    b7b4:	18fb      	adds	r3, r7, r3
    b7b6:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b7b8:	230f      	movs	r3, #15
    b7ba:	18fb      	adds	r3, r7, r3
    b7bc:	781b      	ldrb	r3, [r3, #0]
    b7be:	b25b      	sxtb	r3, r3
    b7c0:	2b00      	cmp	r3, #0
    b7c2:	dcd6      	bgt.n	b772 <prvUnlockQueue+0x1a>
    b7c4:	e000      	b.n	b7c8 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    b7c6:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    b7c8:	687b      	ldr	r3, [r7, #4]
    b7ca:	2245      	movs	r2, #69	; 0x45
    b7cc:	21ff      	movs	r1, #255	; 0xff
    b7ce:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b7d0:	4b1c      	ldr	r3, [pc, #112]	; (b844 <prvUnlockQueue+0xec>)
    b7d2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    b7d4:	4b17      	ldr	r3, [pc, #92]	; (b834 <prvUnlockQueue+0xdc>)
    b7d6:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    b7d8:	230e      	movs	r3, #14
    b7da:	18fb      	adds	r3, r7, r3
    b7dc:	687a      	ldr	r2, [r7, #4]
    b7de:	2144      	movs	r1, #68	; 0x44
    b7e0:	5c52      	ldrb	r2, [r2, r1]
    b7e2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b7e4:	e014      	b.n	b810 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b7e6:	687b      	ldr	r3, [r7, #4]
    b7e8:	691b      	ldr	r3, [r3, #16]
    b7ea:	2b00      	cmp	r3, #0
    b7ec:	d017      	beq.n	b81e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b7ee:	687b      	ldr	r3, [r7, #4]
    b7f0:	3310      	adds	r3, #16
    b7f2:	0018      	movs	r0, r3
    b7f4:	4b12      	ldr	r3, [pc, #72]	; (b840 <prvUnlockQueue+0xe8>)
    b7f6:	4798      	blx	r3
    b7f8:	1e03      	subs	r3, r0, #0
    b7fa:	d001      	beq.n	b800 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    b7fc:	4b0f      	ldr	r3, [pc, #60]	; (b83c <prvUnlockQueue+0xe4>)
    b7fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    b800:	230e      	movs	r3, #14
    b802:	18fb      	adds	r3, r7, r3
    b804:	781b      	ldrb	r3, [r3, #0]
    b806:	3b01      	subs	r3, #1
    b808:	b2da      	uxtb	r2, r3
    b80a:	230e      	movs	r3, #14
    b80c:	18fb      	adds	r3, r7, r3
    b80e:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b810:	230e      	movs	r3, #14
    b812:	18fb      	adds	r3, r7, r3
    b814:	781b      	ldrb	r3, [r3, #0]
    b816:	b25b      	sxtb	r3, r3
    b818:	2b00      	cmp	r3, #0
    b81a:	dce4      	bgt.n	b7e6 <prvUnlockQueue+0x8e>
    b81c:	e000      	b.n	b820 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    b81e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    b820:	687b      	ldr	r3, [r7, #4]
    b822:	2244      	movs	r2, #68	; 0x44
    b824:	21ff      	movs	r1, #255	; 0xff
    b826:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b828:	4b06      	ldr	r3, [pc, #24]	; (b844 <prvUnlockQueue+0xec>)
    b82a:	4798      	blx	r3
}
    b82c:	46c0      	nop			; (mov r8, r8)
    b82e:	46bd      	mov	sp, r7
    b830:	b004      	add	sp, #16
    b832:	bd80      	pop	{r7, pc}
    b834:	0000ade9 	.word	0x0000ade9
    b838:	0000b92d 	.word	0x0000b92d
    b83c:	0000c36d 	.word	0x0000c36d
    b840:	0000c1d1 	.word	0x0000c1d1
    b844:	0000ae0d 	.word	0x0000ae0d

0000b848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    b848:	b580      	push	{r7, lr}
    b84a:	b084      	sub	sp, #16
    b84c:	af00      	add	r7, sp, #0
    b84e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b850:	4b08      	ldr	r3, [pc, #32]	; (b874 <prvIsQueueEmpty+0x2c>)
    b852:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    b854:	687b      	ldr	r3, [r7, #4]
    b856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b858:	2b00      	cmp	r3, #0
    b85a:	d102      	bne.n	b862 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    b85c:	2301      	movs	r3, #1
    b85e:	60fb      	str	r3, [r7, #12]
    b860:	e001      	b.n	b866 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    b862:	2300      	movs	r3, #0
    b864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b866:	4b04      	ldr	r3, [pc, #16]	; (b878 <prvIsQueueEmpty+0x30>)
    b868:	4798      	blx	r3

	return xReturn;
    b86a:	68fb      	ldr	r3, [r7, #12]
}
    b86c:	0018      	movs	r0, r3
    b86e:	46bd      	mov	sp, r7
    b870:	b004      	add	sp, #16
    b872:	bd80      	pop	{r7, pc}
    b874:	0000ade9 	.word	0x0000ade9
    b878:	0000ae0d 	.word	0x0000ae0d

0000b87c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    b87c:	b580      	push	{r7, lr}
    b87e:	b084      	sub	sp, #16
    b880:	af00      	add	r7, sp, #0
    b882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    b884:	4b09      	ldr	r3, [pc, #36]	; (b8ac <prvIsQueueFull+0x30>)
    b886:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    b888:	687b      	ldr	r3, [r7, #4]
    b88a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b88c:	687b      	ldr	r3, [r7, #4]
    b88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b890:	429a      	cmp	r2, r3
    b892:	d102      	bne.n	b89a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    b894:	2301      	movs	r3, #1
    b896:	60fb      	str	r3, [r7, #12]
    b898:	e001      	b.n	b89e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    b89a:	2300      	movs	r3, #0
    b89c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    b89e:	4b04      	ldr	r3, [pc, #16]	; (b8b0 <prvIsQueueFull+0x34>)
    b8a0:	4798      	blx	r3

	return xReturn;
    b8a2:	68fb      	ldr	r3, [r7, #12]
}
    b8a4:	0018      	movs	r0, r3
    b8a6:	46bd      	mov	sp, r7
    b8a8:	b004      	add	sp, #16
    b8aa:	bd80      	pop	{r7, pc}
    b8ac:	0000ade9 	.word	0x0000ade9
    b8b0:	0000ae0d 	.word	0x0000ae0d

0000b8b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    b8b4:	b580      	push	{r7, lr}
    b8b6:	b086      	sub	sp, #24
    b8b8:	af00      	add	r7, sp, #0
    b8ba:	60f8      	str	r0, [r7, #12]
    b8bc:	60b9      	str	r1, [r7, #8]
    b8be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b8c0:	68fb      	ldr	r3, [r7, #12]
    b8c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    b8c4:	4b15      	ldr	r3, [pc, #84]	; (b91c <vQueueWaitForMessageRestricted+0x68>)
    b8c6:	4798      	blx	r3
    b8c8:	697b      	ldr	r3, [r7, #20]
    b8ca:	2244      	movs	r2, #68	; 0x44
    b8cc:	5c9b      	ldrb	r3, [r3, r2]
    b8ce:	b25b      	sxtb	r3, r3
    b8d0:	3301      	adds	r3, #1
    b8d2:	d103      	bne.n	b8dc <vQueueWaitForMessageRestricted+0x28>
    b8d4:	697b      	ldr	r3, [r7, #20]
    b8d6:	2244      	movs	r2, #68	; 0x44
    b8d8:	2100      	movs	r1, #0
    b8da:	5499      	strb	r1, [r3, r2]
    b8dc:	697b      	ldr	r3, [r7, #20]
    b8de:	2245      	movs	r2, #69	; 0x45
    b8e0:	5c9b      	ldrb	r3, [r3, r2]
    b8e2:	b25b      	sxtb	r3, r3
    b8e4:	3301      	adds	r3, #1
    b8e6:	d103      	bne.n	b8f0 <vQueueWaitForMessageRestricted+0x3c>
    b8e8:	697b      	ldr	r3, [r7, #20]
    b8ea:	2245      	movs	r2, #69	; 0x45
    b8ec:	2100      	movs	r1, #0
    b8ee:	5499      	strb	r1, [r3, r2]
    b8f0:	4b0b      	ldr	r3, [pc, #44]	; (b920 <vQueueWaitForMessageRestricted+0x6c>)
    b8f2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    b8f4:	697b      	ldr	r3, [r7, #20]
    b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	d106      	bne.n	b90a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    b8fc:	697b      	ldr	r3, [r7, #20]
    b8fe:	3324      	adds	r3, #36	; 0x24
    b900:	687a      	ldr	r2, [r7, #4]
    b902:	68b9      	ldr	r1, [r7, #8]
    b904:	0018      	movs	r0, r3
    b906:	4b07      	ldr	r3, [pc, #28]	; (b924 <vQueueWaitForMessageRestricted+0x70>)
    b908:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    b90a:	697b      	ldr	r3, [r7, #20]
    b90c:	0018      	movs	r0, r3
    b90e:	4b06      	ldr	r3, [pc, #24]	; (b928 <vQueueWaitForMessageRestricted+0x74>)
    b910:	4798      	blx	r3
	}
    b912:	46c0      	nop			; (mov r8, r8)
    b914:	46bd      	mov	sp, r7
    b916:	b006      	add	sp, #24
    b918:	bd80      	pop	{r7, pc}
    b91a:	46c0      	nop			; (mov r8, r8)
    b91c:	0000ade9 	.word	0x0000ade9
    b920:	0000ae0d 	.word	0x0000ae0d
    b924:	0000c17d 	.word	0x0000c17d
    b928:	0000b759 	.word	0x0000b759

0000b92c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    b92c:	b580      	push	{r7, lr}
    b92e:	b086      	sub	sp, #24
    b930:	af00      	add	r7, sp, #0
    b932:	6078      	str	r0, [r7, #4]
    b934:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    b936:	687b      	ldr	r3, [r7, #4]
    b938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b93a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    b93c:	2300      	movs	r3, #0
    b93e:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    b940:	693b      	ldr	r3, [r7, #16]
    b942:	2b00      	cmp	r3, #0
    b944:	d101      	bne.n	b94a <prvNotifyQueueSetContainer+0x1e>
    b946:	b672      	cpsid	i
    b948:	e7fe      	b.n	b948 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    b94a:	693b      	ldr	r3, [r7, #16]
    b94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b94e:	693b      	ldr	r3, [r7, #16]
    b950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b952:	429a      	cmp	r2, r3
    b954:	d301      	bcc.n	b95a <prvNotifyQueueSetContainer+0x2e>
    b956:	b672      	cpsid	i
    b958:	e7fe      	b.n	b958 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    b95a:	693b      	ldr	r3, [r7, #16]
    b95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b95e:	693b      	ldr	r3, [r7, #16]
    b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b962:	429a      	cmp	r2, r3
    b964:	d22a      	bcs.n	b9bc <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    b966:	230f      	movs	r3, #15
    b968:	18fb      	adds	r3, r7, r3
    b96a:	693a      	ldr	r2, [r7, #16]
    b96c:	2145      	movs	r1, #69	; 0x45
    b96e:	5c52      	ldrb	r2, [r2, r1]
    b970:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    b972:	683a      	ldr	r2, [r7, #0]
    b974:	1d39      	adds	r1, r7, #4
    b976:	693b      	ldr	r3, [r7, #16]
    b978:	0018      	movs	r0, r3
    b97a:	4b13      	ldr	r3, [pc, #76]	; (b9c8 <prvNotifyQueueSetContainer+0x9c>)
    b97c:	4798      	blx	r3
    b97e:	0003      	movs	r3, r0
    b980:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    b982:	230f      	movs	r3, #15
    b984:	18fb      	adds	r3, r7, r3
    b986:	781b      	ldrb	r3, [r3, #0]
    b988:	b25b      	sxtb	r3, r3
    b98a:	3301      	adds	r3, #1
    b98c:	d10d      	bne.n	b9aa <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    b98e:	693b      	ldr	r3, [r7, #16]
    b990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b992:	2b00      	cmp	r3, #0
    b994:	d012      	beq.n	b9bc <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    b996:	693b      	ldr	r3, [r7, #16]
    b998:	3324      	adds	r3, #36	; 0x24
    b99a:	0018      	movs	r0, r3
    b99c:	4b0b      	ldr	r3, [pc, #44]	; (b9cc <prvNotifyQueueSetContainer+0xa0>)
    b99e:	4798      	blx	r3
    b9a0:	1e03      	subs	r3, r0, #0
    b9a2:	d00b      	beq.n	b9bc <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    b9a4:	2301      	movs	r3, #1
    b9a6:	617b      	str	r3, [r7, #20]
    b9a8:	e008      	b.n	b9bc <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b9aa:	230f      	movs	r3, #15
    b9ac:	18fb      	adds	r3, r7, r3
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	3301      	adds	r3, #1
    b9b2:	b2db      	uxtb	r3, r3
    b9b4:	b259      	sxtb	r1, r3
    b9b6:	693b      	ldr	r3, [r7, #16]
    b9b8:	2245      	movs	r2, #69	; 0x45
    b9ba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    b9bc:	697b      	ldr	r3, [r7, #20]
	}
    b9be:	0018      	movs	r0, r3
    b9c0:	46bd      	mov	sp, r7
    b9c2:	b006      	add	sp, #24
    b9c4:	bd80      	pop	{r7, pc}
    b9c6:	46c0      	nop			; (mov r8, r8)
    b9c8:	0000b629 	.word	0x0000b629
    b9cc:	0000c1d1 	.word	0x0000c1d1

0000b9d0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    b9d0:	b590      	push	{r4, r7, lr}
    b9d2:	b08d      	sub	sp, #52	; 0x34
    b9d4:	af04      	add	r7, sp, #16
    b9d6:	60f8      	str	r0, [r7, #12]
    b9d8:	60b9      	str	r1, [r7, #8]
    b9da:	603b      	str	r3, [r7, #0]
    b9dc:	1dbb      	adds	r3, r7, #6
    b9de:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b9e0:	1dbb      	adds	r3, r7, #6
    b9e2:	881b      	ldrh	r3, [r3, #0]
    b9e4:	009b      	lsls	r3, r3, #2
    b9e6:	0018      	movs	r0, r3
    b9e8:	4b1d      	ldr	r3, [pc, #116]	; (ba60 <xTaskCreate+0x90>)
    b9ea:	4798      	blx	r3
    b9ec:	0003      	movs	r3, r0
    b9ee:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    b9f0:	697b      	ldr	r3, [r7, #20]
    b9f2:	2b00      	cmp	r3, #0
    b9f4:	d010      	beq.n	ba18 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    b9f6:	2050      	movs	r0, #80	; 0x50
    b9f8:	4b19      	ldr	r3, [pc, #100]	; (ba60 <xTaskCreate+0x90>)
    b9fa:	4798      	blx	r3
    b9fc:	0003      	movs	r3, r0
    b9fe:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    ba00:	69fb      	ldr	r3, [r7, #28]
    ba02:	2b00      	cmp	r3, #0
    ba04:	d003      	beq.n	ba0e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    ba06:	69fb      	ldr	r3, [r7, #28]
    ba08:	697a      	ldr	r2, [r7, #20]
    ba0a:	631a      	str	r2, [r3, #48]	; 0x30
    ba0c:	e006      	b.n	ba1c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    ba0e:	697b      	ldr	r3, [r7, #20]
    ba10:	0018      	movs	r0, r3
    ba12:	4b14      	ldr	r3, [pc, #80]	; (ba64 <xTaskCreate+0x94>)
    ba14:	4798      	blx	r3
    ba16:	e001      	b.n	ba1c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    ba18:	2300      	movs	r3, #0
    ba1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    ba1c:	69fb      	ldr	r3, [r7, #28]
    ba1e:	2b00      	cmp	r3, #0
    ba20:	d016      	beq.n	ba50 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    ba22:	1dbb      	adds	r3, r7, #6
    ba24:	881a      	ldrh	r2, [r3, #0]
    ba26:	683c      	ldr	r4, [r7, #0]
    ba28:	68b9      	ldr	r1, [r7, #8]
    ba2a:	68f8      	ldr	r0, [r7, #12]
    ba2c:	2300      	movs	r3, #0
    ba2e:	9303      	str	r3, [sp, #12]
    ba30:	69fb      	ldr	r3, [r7, #28]
    ba32:	9302      	str	r3, [sp, #8]
    ba34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ba36:	9301      	str	r3, [sp, #4]
    ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba3a:	9300      	str	r3, [sp, #0]
    ba3c:	0023      	movs	r3, r4
    ba3e:	4c0a      	ldr	r4, [pc, #40]	; (ba68 <xTaskCreate+0x98>)
    ba40:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    ba42:	69fb      	ldr	r3, [r7, #28]
    ba44:	0018      	movs	r0, r3
    ba46:	4b09      	ldr	r3, [pc, #36]	; (ba6c <xTaskCreate+0x9c>)
    ba48:	4798      	blx	r3
			xReturn = pdPASS;
    ba4a:	2301      	movs	r3, #1
    ba4c:	61bb      	str	r3, [r7, #24]
    ba4e:	e002      	b.n	ba56 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    ba50:	2301      	movs	r3, #1
    ba52:	425b      	negs	r3, r3
    ba54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    ba56:	69bb      	ldr	r3, [r7, #24]
	}
    ba58:	0018      	movs	r0, r3
    ba5a:	46bd      	mov	sp, r7
    ba5c:	b009      	add	sp, #36	; 0x24
    ba5e:	bd90      	pop	{r4, r7, pc}
    ba60:	0000aefd 	.word	0x0000aefd
    ba64:	0000af91 	.word	0x0000af91
    ba68:	0000ba71 	.word	0x0000ba71
    ba6c:	0000bb6d 	.word	0x0000bb6d

0000ba70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    ba70:	b580      	push	{r7, lr}
    ba72:	b086      	sub	sp, #24
    ba74:	af00      	add	r7, sp, #0
    ba76:	60f8      	str	r0, [r7, #12]
    ba78:	60b9      	str	r1, [r7, #8]
    ba7a:	607a      	str	r2, [r7, #4]
    ba7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ba82:	687b      	ldr	r3, [r7, #4]
    ba84:	4936      	ldr	r1, [pc, #216]	; (bb60 <prvInitialiseNewTask+0xf0>)
    ba86:	468c      	mov	ip, r1
    ba88:	4463      	add	r3, ip
    ba8a:	009b      	lsls	r3, r3, #2
    ba8c:	18d3      	adds	r3, r2, r3
    ba8e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    ba90:	693b      	ldr	r3, [r7, #16]
    ba92:	2207      	movs	r2, #7
    ba94:	4393      	bics	r3, r2
    ba96:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    ba98:	693b      	ldr	r3, [r7, #16]
    ba9a:	2207      	movs	r2, #7
    ba9c:	4013      	ands	r3, r2
    ba9e:	d001      	beq.n	baa4 <prvInitialiseNewTask+0x34>
    baa0:	b672      	cpsid	i
    baa2:	e7fe      	b.n	baa2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    baa4:	2300      	movs	r3, #0
    baa6:	617b      	str	r3, [r7, #20]
    baa8:	e013      	b.n	bad2 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    baaa:	68ba      	ldr	r2, [r7, #8]
    baac:	697b      	ldr	r3, [r7, #20]
    baae:	18d3      	adds	r3, r2, r3
    bab0:	7818      	ldrb	r0, [r3, #0]
    bab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bab4:	2134      	movs	r1, #52	; 0x34
    bab6:	697b      	ldr	r3, [r7, #20]
    bab8:	18d3      	adds	r3, r2, r3
    baba:	185b      	adds	r3, r3, r1
    babc:	1c02      	adds	r2, r0, #0
    babe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    bac0:	68ba      	ldr	r2, [r7, #8]
    bac2:	697b      	ldr	r3, [r7, #20]
    bac4:	18d3      	adds	r3, r2, r3
    bac6:	781b      	ldrb	r3, [r3, #0]
    bac8:	2b00      	cmp	r3, #0
    baca:	d006      	beq.n	bada <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    bacc:	697b      	ldr	r3, [r7, #20]
    bace:	3301      	adds	r3, #1
    bad0:	617b      	str	r3, [r7, #20]
    bad2:	697b      	ldr	r3, [r7, #20]
    bad4:	2b0b      	cmp	r3, #11
    bad6:	d9e8      	bls.n	baaa <prvInitialiseNewTask+0x3a>
    bad8:	e000      	b.n	badc <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    bada:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    badc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bade:	223f      	movs	r2, #63	; 0x3f
    bae0:	2100      	movs	r1, #0
    bae2:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    bae4:	6a3b      	ldr	r3, [r7, #32]
    bae6:	2b04      	cmp	r3, #4
    bae8:	d901      	bls.n	baee <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    baea:	2304      	movs	r3, #4
    baec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    baf0:	6a3a      	ldr	r2, [r7, #32]
    baf2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    baf6:	6a3a      	ldr	r2, [r7, #32]
    baf8:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bafc:	2200      	movs	r2, #0
    bafe:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb02:	3304      	adds	r3, #4
    bb04:	0018      	movs	r0, r3
    bb06:	4b17      	ldr	r3, [pc, #92]	; (bb64 <prvInitialiseNewTask+0xf4>)
    bb08:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    bb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb0c:	3318      	adds	r3, #24
    bb0e:	0018      	movs	r0, r3
    bb10:	4b14      	ldr	r3, [pc, #80]	; (bb64 <prvInitialiseNewTask+0xf4>)
    bb12:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    bb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb16:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bb1a:	6a3b      	ldr	r3, [r7, #32]
    bb1c:	2205      	movs	r2, #5
    bb1e:	1ad2      	subs	r2, r2, r3
    bb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb26:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb2c:	2200      	movs	r2, #0
    bb2e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb32:	224c      	movs	r2, #76	; 0x4c
    bb34:	2100      	movs	r1, #0
    bb36:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    bb38:	683a      	ldr	r2, [r7, #0]
    bb3a:	68f9      	ldr	r1, [r7, #12]
    bb3c:	693b      	ldr	r3, [r7, #16]
    bb3e:	0018      	movs	r0, r3
    bb40:	4b09      	ldr	r3, [pc, #36]	; (bb68 <prvInitialiseNewTask+0xf8>)
    bb42:	4798      	blx	r3
    bb44:	0002      	movs	r2, r0
    bb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bb48:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d002      	beq.n	bb56 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    bb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bb52:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    bb56:	46c0      	nop			; (mov r8, r8)
    bb58:	46bd      	mov	sp, r7
    bb5a:	b006      	add	sp, #24
    bb5c:	bd80      	pop	{r7, pc}
    bb5e:	46c0      	nop			; (mov r8, r8)
    bb60:	3fffffff 	.word	0x3fffffff
    bb64:	0000aba5 	.word	0x0000aba5
    bb68:	0000acbd 	.word	0x0000acbd

0000bb6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    bb6c:	b580      	push	{r7, lr}
    bb6e:	b082      	sub	sp, #8
    bb70:	af00      	add	r7, sp, #0
    bb72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    bb74:	4b29      	ldr	r3, [pc, #164]	; (bc1c <prvAddNewTaskToReadyList+0xb0>)
    bb76:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    bb78:	4b29      	ldr	r3, [pc, #164]	; (bc20 <prvAddNewTaskToReadyList+0xb4>)
    bb7a:	681b      	ldr	r3, [r3, #0]
    bb7c:	1c5a      	adds	r2, r3, #1
    bb7e:	4b28      	ldr	r3, [pc, #160]	; (bc20 <prvAddNewTaskToReadyList+0xb4>)
    bb80:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    bb82:	4b28      	ldr	r3, [pc, #160]	; (bc24 <prvAddNewTaskToReadyList+0xb8>)
    bb84:	681b      	ldr	r3, [r3, #0]
    bb86:	2b00      	cmp	r3, #0
    bb88:	d109      	bne.n	bb9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    bb8a:	4b26      	ldr	r3, [pc, #152]	; (bc24 <prvAddNewTaskToReadyList+0xb8>)
    bb8c:	687a      	ldr	r2, [r7, #4]
    bb8e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    bb90:	4b23      	ldr	r3, [pc, #140]	; (bc20 <prvAddNewTaskToReadyList+0xb4>)
    bb92:	681b      	ldr	r3, [r3, #0]
    bb94:	2b01      	cmp	r3, #1
    bb96:	d110      	bne.n	bbba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    bb98:	4b23      	ldr	r3, [pc, #140]	; (bc28 <prvAddNewTaskToReadyList+0xbc>)
    bb9a:	4798      	blx	r3
    bb9c:	e00d      	b.n	bbba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    bb9e:	4b23      	ldr	r3, [pc, #140]	; (bc2c <prvAddNewTaskToReadyList+0xc0>)
    bba0:	681b      	ldr	r3, [r3, #0]
    bba2:	2b00      	cmp	r3, #0
    bba4:	d109      	bne.n	bbba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    bba6:	4b1f      	ldr	r3, [pc, #124]	; (bc24 <prvAddNewTaskToReadyList+0xb8>)
    bba8:	681b      	ldr	r3, [r3, #0]
    bbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bbac:	687b      	ldr	r3, [r7, #4]
    bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bbb0:	429a      	cmp	r2, r3
    bbb2:	d802      	bhi.n	bbba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    bbb4:	4b1b      	ldr	r3, [pc, #108]	; (bc24 <prvAddNewTaskToReadyList+0xb8>)
    bbb6:	687a      	ldr	r2, [r7, #4]
    bbb8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    bbba:	4b1d      	ldr	r3, [pc, #116]	; (bc30 <prvAddNewTaskToReadyList+0xc4>)
    bbbc:	681b      	ldr	r3, [r3, #0]
    bbbe:	1c5a      	adds	r2, r3, #1
    bbc0:	4b1b      	ldr	r3, [pc, #108]	; (bc30 <prvAddNewTaskToReadyList+0xc4>)
    bbc2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    bbc4:	687b      	ldr	r3, [r7, #4]
    bbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bbc8:	4b1a      	ldr	r3, [pc, #104]	; (bc34 <prvAddNewTaskToReadyList+0xc8>)
    bbca:	681b      	ldr	r3, [r3, #0]
    bbcc:	429a      	cmp	r2, r3
    bbce:	d903      	bls.n	bbd8 <prvAddNewTaskToReadyList+0x6c>
    bbd0:	687b      	ldr	r3, [r7, #4]
    bbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bbd4:	4b17      	ldr	r3, [pc, #92]	; (bc34 <prvAddNewTaskToReadyList+0xc8>)
    bbd6:	601a      	str	r2, [r3, #0]
    bbd8:	687b      	ldr	r3, [r7, #4]
    bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bbdc:	0013      	movs	r3, r2
    bbde:	009b      	lsls	r3, r3, #2
    bbe0:	189b      	adds	r3, r3, r2
    bbe2:	009b      	lsls	r3, r3, #2
    bbe4:	4a14      	ldr	r2, [pc, #80]	; (bc38 <prvAddNewTaskToReadyList+0xcc>)
    bbe6:	189a      	adds	r2, r3, r2
    bbe8:	687b      	ldr	r3, [r7, #4]
    bbea:	3304      	adds	r3, #4
    bbec:	0019      	movs	r1, r3
    bbee:	0010      	movs	r0, r2
    bbf0:	4b12      	ldr	r3, [pc, #72]	; (bc3c <prvAddNewTaskToReadyList+0xd0>)
    bbf2:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    bbf4:	4b12      	ldr	r3, [pc, #72]	; (bc40 <prvAddNewTaskToReadyList+0xd4>)
    bbf6:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    bbf8:	4b0c      	ldr	r3, [pc, #48]	; (bc2c <prvAddNewTaskToReadyList+0xc0>)
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	2b00      	cmp	r3, #0
    bbfe:	d008      	beq.n	bc12 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    bc00:	4b08      	ldr	r3, [pc, #32]	; (bc24 <prvAddNewTaskToReadyList+0xb8>)
    bc02:	681b      	ldr	r3, [r3, #0]
    bc04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bc06:	687b      	ldr	r3, [r7, #4]
    bc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bc0a:	429a      	cmp	r2, r3
    bc0c:	d201      	bcs.n	bc12 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    bc0e:	4b0d      	ldr	r3, [pc, #52]	; (bc44 <prvAddNewTaskToReadyList+0xd8>)
    bc10:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    bc12:	46c0      	nop			; (mov r8, r8)
    bc14:	46bd      	mov	sp, r7
    bc16:	b002      	add	sp, #8
    bc18:	bd80      	pop	{r7, pc}
    bc1a:	46c0      	nop			; (mov r8, r8)
    bc1c:	0000ade9 	.word	0x0000ade9
    bc20:	20003c9c 	.word	0x20003c9c
    bc24:	20003bc4 	.word	0x20003bc4
    bc28:	0000c3a9 	.word	0x0000c3a9
    bc2c:	20003ca8 	.word	0x20003ca8
    bc30:	20003cb8 	.word	0x20003cb8
    bc34:	20003ca4 	.word	0x20003ca4
    bc38:	20003bc8 	.word	0x20003bc8
    bc3c:	0000abbd 	.word	0x0000abbd
    bc40:	0000ae0d 	.word	0x0000ae0d
    bc44:	0000adc9 	.word	0x0000adc9

0000bc48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    bc48:	b580      	push	{r7, lr}
    bc4a:	b086      	sub	sp, #24
    bc4c:	af00      	add	r7, sp, #0
    bc4e:	6078      	str	r0, [r7, #4]
    bc50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    bc52:	2300      	movs	r3, #0
    bc54:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    bc56:	687b      	ldr	r3, [r7, #4]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d101      	bne.n	bc60 <vTaskDelayUntil+0x18>
    bc5c:	b672      	cpsid	i
    bc5e:	e7fe      	b.n	bc5e <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    bc60:	683b      	ldr	r3, [r7, #0]
    bc62:	2b00      	cmp	r3, #0
    bc64:	d101      	bne.n	bc6a <vTaskDelayUntil+0x22>
    bc66:	b672      	cpsid	i
    bc68:	e7fe      	b.n	bc68 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    bc6a:	4b23      	ldr	r3, [pc, #140]	; (bcf8 <vTaskDelayUntil+0xb0>)
    bc6c:	681b      	ldr	r3, [r3, #0]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d001      	beq.n	bc76 <vTaskDelayUntil+0x2e>
    bc72:	b672      	cpsid	i
    bc74:	e7fe      	b.n	bc74 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    bc76:	4b21      	ldr	r3, [pc, #132]	; (bcfc <vTaskDelayUntil+0xb4>)
    bc78:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    bc7a:	4b21      	ldr	r3, [pc, #132]	; (bd00 <vTaskDelayUntil+0xb8>)
    bc7c:	681b      	ldr	r3, [r3, #0]
    bc7e:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    bc80:	687b      	ldr	r3, [r7, #4]
    bc82:	681a      	ldr	r2, [r3, #0]
    bc84:	683b      	ldr	r3, [r7, #0]
    bc86:	18d3      	adds	r3, r2, r3
    bc88:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    bc8a:	687b      	ldr	r3, [r7, #4]
    bc8c:	681a      	ldr	r2, [r3, #0]
    bc8e:	693b      	ldr	r3, [r7, #16]
    bc90:	429a      	cmp	r2, r3
    bc92:	d90b      	bls.n	bcac <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    bc94:	687b      	ldr	r3, [r7, #4]
    bc96:	681a      	ldr	r2, [r3, #0]
    bc98:	68fb      	ldr	r3, [r7, #12]
    bc9a:	429a      	cmp	r2, r3
    bc9c:	d911      	bls.n	bcc2 <vTaskDelayUntil+0x7a>
    bc9e:	68fa      	ldr	r2, [r7, #12]
    bca0:	693b      	ldr	r3, [r7, #16]
    bca2:	429a      	cmp	r2, r3
    bca4:	d90d      	bls.n	bcc2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    bca6:	2301      	movs	r3, #1
    bca8:	617b      	str	r3, [r7, #20]
    bcaa:	e00a      	b.n	bcc2 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    bcac:	687b      	ldr	r3, [r7, #4]
    bcae:	681a      	ldr	r2, [r3, #0]
    bcb0:	68fb      	ldr	r3, [r7, #12]
    bcb2:	429a      	cmp	r2, r3
    bcb4:	d803      	bhi.n	bcbe <vTaskDelayUntil+0x76>
    bcb6:	68fa      	ldr	r2, [r7, #12]
    bcb8:	693b      	ldr	r3, [r7, #16]
    bcba:	429a      	cmp	r2, r3
    bcbc:	d901      	bls.n	bcc2 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    bcbe:	2301      	movs	r3, #1
    bcc0:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    bcc2:	687b      	ldr	r3, [r7, #4]
    bcc4:	68fa      	ldr	r2, [r7, #12]
    bcc6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    bcc8:	697b      	ldr	r3, [r7, #20]
    bcca:	2b00      	cmp	r3, #0
    bccc:	d006      	beq.n	bcdc <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    bcce:	68fa      	ldr	r2, [r7, #12]
    bcd0:	693b      	ldr	r3, [r7, #16]
    bcd2:	1ad3      	subs	r3, r2, r3
    bcd4:	2100      	movs	r1, #0
    bcd6:	0018      	movs	r0, r3
    bcd8:	4b0a      	ldr	r3, [pc, #40]	; (bd04 <vTaskDelayUntil+0xbc>)
    bcda:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    bcdc:	4b0a      	ldr	r3, [pc, #40]	; (bd08 <vTaskDelayUntil+0xc0>)
    bcde:	4798      	blx	r3
    bce0:	0003      	movs	r3, r0
    bce2:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    bce4:	68bb      	ldr	r3, [r7, #8]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d101      	bne.n	bcee <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    bcea:	4b08      	ldr	r3, [pc, #32]	; (bd0c <vTaskDelayUntil+0xc4>)
    bcec:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bcee:	46c0      	nop			; (mov r8, r8)
    bcf0:	46bd      	mov	sp, r7
    bcf2:	b006      	add	sp, #24
    bcf4:	bd80      	pop	{r7, pc}
    bcf6:	46c0      	nop			; (mov r8, r8)
    bcf8:	20003cc4 	.word	0x20003cc4
    bcfc:	0000bd95 	.word	0x0000bd95
    bd00:	20003ca0 	.word	0x20003ca0
    bd04:	0000c711 	.word	0x0000c711
    bd08:	0000bdad 	.word	0x0000bdad
    bd0c:	0000adc9 	.word	0x0000adc9

0000bd10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    bd10:	b590      	push	{r4, r7, lr}
    bd12:	b085      	sub	sp, #20
    bd14:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    bd16:	4916      	ldr	r1, [pc, #88]	; (bd70 <vTaskStartScheduler+0x60>)
    bd18:	4816      	ldr	r0, [pc, #88]	; (bd74 <vTaskStartScheduler+0x64>)
    bd1a:	4b17      	ldr	r3, [pc, #92]	; (bd78 <vTaskStartScheduler+0x68>)
    bd1c:	9301      	str	r3, [sp, #4]
    bd1e:	2300      	movs	r3, #0
    bd20:	9300      	str	r3, [sp, #0]
    bd22:	2300      	movs	r3, #0
    bd24:	2264      	movs	r2, #100	; 0x64
    bd26:	4c15      	ldr	r4, [pc, #84]	; (bd7c <vTaskStartScheduler+0x6c>)
    bd28:	47a0      	blx	r4
    bd2a:	0003      	movs	r3, r0
    bd2c:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    bd2e:	687b      	ldr	r3, [r7, #4]
    bd30:	2b01      	cmp	r3, #1
    bd32:	d103      	bne.n	bd3c <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
    bd34:	4b12      	ldr	r3, [pc, #72]	; (bd80 <vTaskStartScheduler+0x70>)
    bd36:	4798      	blx	r3
    bd38:	0003      	movs	r3, r0
    bd3a:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    bd3c:	687b      	ldr	r3, [r7, #4]
    bd3e:	2b01      	cmp	r3, #1
    bd40:	d10d      	bne.n	bd5e <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    bd42:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    bd44:	4b0f      	ldr	r3, [pc, #60]	; (bd84 <vTaskStartScheduler+0x74>)
    bd46:	2201      	movs	r2, #1
    bd48:	4252      	negs	r2, r2
    bd4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    bd4c:	4b0e      	ldr	r3, [pc, #56]	; (bd88 <vTaskStartScheduler+0x78>)
    bd4e:	2201      	movs	r2, #1
    bd50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    bd52:	4b0e      	ldr	r3, [pc, #56]	; (bd8c <vTaskStartScheduler+0x7c>)
    bd54:	2200      	movs	r2, #0
    bd56:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    bd58:	4b0d      	ldr	r3, [pc, #52]	; (bd90 <vTaskStartScheduler+0x80>)
    bd5a:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    bd5c:	e004      	b.n	bd68 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    bd5e:	687b      	ldr	r3, [r7, #4]
    bd60:	3301      	adds	r3, #1
    bd62:	d101      	bne.n	bd68 <vTaskStartScheduler+0x58>
    bd64:	b672      	cpsid	i
    bd66:	e7fe      	b.n	bd66 <vTaskStartScheduler+0x56>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    bd68:	46c0      	nop			; (mov r8, r8)
    bd6a:	46bd      	mov	sp, r7
    bd6c:	b003      	add	sp, #12
    bd6e:	bd90      	pop	{r4, r7, pc}
    bd70:	00013058 	.word	0x00013058
    bd74:	0000c381 	.word	0x0000c381
    bd78:	20003cc0 	.word	0x20003cc0
    bd7c:	0000b9d1 	.word	0x0000b9d1
    bd80:	0000c7c5 	.word	0x0000c7c5
    bd84:	20003cbc 	.word	0x20003cbc
    bd88:	20003ca8 	.word	0x20003ca8
    bd8c:	20003ca0 	.word	0x20003ca0
    bd90:	0000ad79 	.word	0x0000ad79

0000bd94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    bd94:	b580      	push	{r7, lr}
    bd96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    bd98:	4b03      	ldr	r3, [pc, #12]	; (bda8 <vTaskSuspendAll+0x14>)
    bd9a:	681b      	ldr	r3, [r3, #0]
    bd9c:	1c5a      	adds	r2, r3, #1
    bd9e:	4b02      	ldr	r3, [pc, #8]	; (bda8 <vTaskSuspendAll+0x14>)
    bda0:	601a      	str	r2, [r3, #0]
}
    bda2:	46c0      	nop			; (mov r8, r8)
    bda4:	46bd      	mov	sp, r7
    bda6:	bd80      	pop	{r7, pc}
    bda8:	20003cc4 	.word	0x20003cc4

0000bdac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    bdac:	b580      	push	{r7, lr}
    bdae:	b084      	sub	sp, #16
    bdb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    bdb2:	2300      	movs	r3, #0
    bdb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    bdb6:	2300      	movs	r3, #0
    bdb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    bdba:	4b3a      	ldr	r3, [pc, #232]	; (bea4 <xTaskResumeAll+0xf8>)
    bdbc:	681b      	ldr	r3, [r3, #0]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d101      	bne.n	bdc6 <xTaskResumeAll+0x1a>
    bdc2:	b672      	cpsid	i
    bdc4:	e7fe      	b.n	bdc4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    bdc6:	4b38      	ldr	r3, [pc, #224]	; (bea8 <xTaskResumeAll+0xfc>)
    bdc8:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    bdca:	4b36      	ldr	r3, [pc, #216]	; (bea4 <xTaskResumeAll+0xf8>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	1e5a      	subs	r2, r3, #1
    bdd0:	4b34      	ldr	r3, [pc, #208]	; (bea4 <xTaskResumeAll+0xf8>)
    bdd2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bdd4:	4b33      	ldr	r3, [pc, #204]	; (bea4 <xTaskResumeAll+0xf8>)
    bdd6:	681b      	ldr	r3, [r3, #0]
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d15b      	bne.n	be94 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    bddc:	4b33      	ldr	r3, [pc, #204]	; (beac <xTaskResumeAll+0x100>)
    bdde:	681b      	ldr	r3, [r3, #0]
    bde0:	2b00      	cmp	r3, #0
    bde2:	d057      	beq.n	be94 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    bde4:	e02f      	b.n	be46 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    bde6:	4b32      	ldr	r3, [pc, #200]	; (beb0 <xTaskResumeAll+0x104>)
    bde8:	68db      	ldr	r3, [r3, #12]
    bdea:	68db      	ldr	r3, [r3, #12]
    bdec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    bdee:	68fb      	ldr	r3, [r7, #12]
    bdf0:	3318      	adds	r3, #24
    bdf2:	0018      	movs	r0, r3
    bdf4:	4b2f      	ldr	r3, [pc, #188]	; (beb4 <xTaskResumeAll+0x108>)
    bdf6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bdf8:	68fb      	ldr	r3, [r7, #12]
    bdfa:	3304      	adds	r3, #4
    bdfc:	0018      	movs	r0, r3
    bdfe:	4b2d      	ldr	r3, [pc, #180]	; (beb4 <xTaskResumeAll+0x108>)
    be00:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    be02:	68fb      	ldr	r3, [r7, #12]
    be04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be06:	4b2c      	ldr	r3, [pc, #176]	; (beb8 <xTaskResumeAll+0x10c>)
    be08:	681b      	ldr	r3, [r3, #0]
    be0a:	429a      	cmp	r2, r3
    be0c:	d903      	bls.n	be16 <xTaskResumeAll+0x6a>
    be0e:	68fb      	ldr	r3, [r7, #12]
    be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be12:	4b29      	ldr	r3, [pc, #164]	; (beb8 <xTaskResumeAll+0x10c>)
    be14:	601a      	str	r2, [r3, #0]
    be16:	68fb      	ldr	r3, [r7, #12]
    be18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be1a:	0013      	movs	r3, r2
    be1c:	009b      	lsls	r3, r3, #2
    be1e:	189b      	adds	r3, r3, r2
    be20:	009b      	lsls	r3, r3, #2
    be22:	4a26      	ldr	r2, [pc, #152]	; (bebc <xTaskResumeAll+0x110>)
    be24:	189a      	adds	r2, r3, r2
    be26:	68fb      	ldr	r3, [r7, #12]
    be28:	3304      	adds	r3, #4
    be2a:	0019      	movs	r1, r3
    be2c:	0010      	movs	r0, r2
    be2e:	4b24      	ldr	r3, [pc, #144]	; (bec0 <xTaskResumeAll+0x114>)
    be30:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    be32:	68fb      	ldr	r3, [r7, #12]
    be34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be36:	4b23      	ldr	r3, [pc, #140]	; (bec4 <xTaskResumeAll+0x118>)
    be38:	681b      	ldr	r3, [r3, #0]
    be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    be3c:	429a      	cmp	r2, r3
    be3e:	d302      	bcc.n	be46 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    be40:	4b21      	ldr	r3, [pc, #132]	; (bec8 <xTaskResumeAll+0x11c>)
    be42:	2201      	movs	r2, #1
    be44:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    be46:	4b1a      	ldr	r3, [pc, #104]	; (beb0 <xTaskResumeAll+0x104>)
    be48:	681b      	ldr	r3, [r3, #0]
    be4a:	2b00      	cmp	r3, #0
    be4c:	d1cb      	bne.n	bde6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    be4e:	68fb      	ldr	r3, [r7, #12]
    be50:	2b00      	cmp	r3, #0
    be52:	d001      	beq.n	be58 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    be54:	4b1d      	ldr	r3, [pc, #116]	; (becc <xTaskResumeAll+0x120>)
    be56:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    be58:	4b1d      	ldr	r3, [pc, #116]	; (bed0 <xTaskResumeAll+0x124>)
    be5a:	681b      	ldr	r3, [r3, #0]
    be5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    be5e:	687b      	ldr	r3, [r7, #4]
    be60:	2b00      	cmp	r3, #0
    be62:	d00f      	beq.n	be84 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    be64:	4b1b      	ldr	r3, [pc, #108]	; (bed4 <xTaskResumeAll+0x128>)
    be66:	4798      	blx	r3
    be68:	1e03      	subs	r3, r0, #0
    be6a:	d002      	beq.n	be72 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    be6c:	4b16      	ldr	r3, [pc, #88]	; (bec8 <xTaskResumeAll+0x11c>)
    be6e:	2201      	movs	r2, #1
    be70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    be72:	687b      	ldr	r3, [r7, #4]
    be74:	3b01      	subs	r3, #1
    be76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    be78:	687b      	ldr	r3, [r7, #4]
    be7a:	2b00      	cmp	r3, #0
    be7c:	d1f2      	bne.n	be64 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    be7e:	4b14      	ldr	r3, [pc, #80]	; (bed0 <xTaskResumeAll+0x124>)
    be80:	2200      	movs	r2, #0
    be82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    be84:	4b10      	ldr	r3, [pc, #64]	; (bec8 <xTaskResumeAll+0x11c>)
    be86:	681b      	ldr	r3, [r3, #0]
    be88:	2b00      	cmp	r3, #0
    be8a:	d003      	beq.n	be94 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    be8c:	2301      	movs	r3, #1
    be8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    be90:	4b11      	ldr	r3, [pc, #68]	; (bed8 <xTaskResumeAll+0x12c>)
    be92:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    be94:	4b11      	ldr	r3, [pc, #68]	; (bedc <xTaskResumeAll+0x130>)
    be96:	4798      	blx	r3

	return xAlreadyYielded;
    be98:	68bb      	ldr	r3, [r7, #8]
}
    be9a:	0018      	movs	r0, r3
    be9c:	46bd      	mov	sp, r7
    be9e:	b004      	add	sp, #16
    bea0:	bd80      	pop	{r7, pc}
    bea2:	46c0      	nop			; (mov r8, r8)
    bea4:	20003cc4 	.word	0x20003cc4
    bea8:	0000ade9 	.word	0x0000ade9
    beac:	20003c9c 	.word	0x20003c9c
    beb0:	20003c5c 	.word	0x20003c5c
    beb4:	0000ac6d 	.word	0x0000ac6d
    beb8:	20003ca4 	.word	0x20003ca4
    bebc:	20003bc8 	.word	0x20003bc8
    bec0:	0000abbd 	.word	0x0000abbd
    bec4:	20003bc4 	.word	0x20003bc4
    bec8:	20003cb0 	.word	0x20003cb0
    becc:	0000c4e9 	.word	0x0000c4e9
    bed0:	20003cac 	.word	0x20003cac
    bed4:	0000befd 	.word	0x0000befd
    bed8:	0000adc9 	.word	0x0000adc9
    bedc:	0000ae0d 	.word	0x0000ae0d

0000bee0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    bee0:	b580      	push	{r7, lr}
    bee2:	b082      	sub	sp, #8
    bee4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    bee6:	4b04      	ldr	r3, [pc, #16]	; (bef8 <xTaskGetTickCount+0x18>)
    bee8:	681b      	ldr	r3, [r3, #0]
    beea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    beec:	687b      	ldr	r3, [r7, #4]
}
    beee:	0018      	movs	r0, r3
    bef0:	46bd      	mov	sp, r7
    bef2:	b002      	add	sp, #8
    bef4:	bd80      	pop	{r7, pc}
    bef6:	46c0      	nop			; (mov r8, r8)
    bef8:	20003ca0 	.word	0x20003ca0

0000befc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    befc:	b580      	push	{r7, lr}
    befe:	b086      	sub	sp, #24
    bf00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    bf02:	2300      	movs	r3, #0
    bf04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    bf06:	4b4c      	ldr	r3, [pc, #304]	; (c038 <xTaskIncrementTick+0x13c>)
    bf08:	681b      	ldr	r3, [r3, #0]
    bf0a:	2b00      	cmp	r3, #0
    bf0c:	d000      	beq.n	bf10 <xTaskIncrementTick+0x14>
    bf0e:	e083      	b.n	c018 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    bf10:	4b4a      	ldr	r3, [pc, #296]	; (c03c <xTaskIncrementTick+0x140>)
    bf12:	681b      	ldr	r3, [r3, #0]
    bf14:	3301      	adds	r3, #1
    bf16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    bf18:	4b48      	ldr	r3, [pc, #288]	; (c03c <xTaskIncrementTick+0x140>)
    bf1a:	693a      	ldr	r2, [r7, #16]
    bf1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    bf1e:	693b      	ldr	r3, [r7, #16]
    bf20:	2b00      	cmp	r3, #0
    bf22:	d117      	bne.n	bf54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    bf24:	4b46      	ldr	r3, [pc, #280]	; (c040 <xTaskIncrementTick+0x144>)
    bf26:	681b      	ldr	r3, [r3, #0]
    bf28:	681b      	ldr	r3, [r3, #0]
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d001      	beq.n	bf32 <xTaskIncrementTick+0x36>
    bf2e:	b672      	cpsid	i
    bf30:	e7fe      	b.n	bf30 <xTaskIncrementTick+0x34>
    bf32:	4b43      	ldr	r3, [pc, #268]	; (c040 <xTaskIncrementTick+0x144>)
    bf34:	681b      	ldr	r3, [r3, #0]
    bf36:	60fb      	str	r3, [r7, #12]
    bf38:	4b42      	ldr	r3, [pc, #264]	; (c044 <xTaskIncrementTick+0x148>)
    bf3a:	681a      	ldr	r2, [r3, #0]
    bf3c:	4b40      	ldr	r3, [pc, #256]	; (c040 <xTaskIncrementTick+0x144>)
    bf3e:	601a      	str	r2, [r3, #0]
    bf40:	4b40      	ldr	r3, [pc, #256]	; (c044 <xTaskIncrementTick+0x148>)
    bf42:	68fa      	ldr	r2, [r7, #12]
    bf44:	601a      	str	r2, [r3, #0]
    bf46:	4b40      	ldr	r3, [pc, #256]	; (c048 <xTaskIncrementTick+0x14c>)
    bf48:	681b      	ldr	r3, [r3, #0]
    bf4a:	1c5a      	adds	r2, r3, #1
    bf4c:	4b3e      	ldr	r3, [pc, #248]	; (c048 <xTaskIncrementTick+0x14c>)
    bf4e:	601a      	str	r2, [r3, #0]
    bf50:	4b3e      	ldr	r3, [pc, #248]	; (c04c <xTaskIncrementTick+0x150>)
    bf52:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    bf54:	4b3e      	ldr	r3, [pc, #248]	; (c050 <xTaskIncrementTick+0x154>)
    bf56:	681b      	ldr	r3, [r3, #0]
    bf58:	693a      	ldr	r2, [r7, #16]
    bf5a:	429a      	cmp	r2, r3
    bf5c:	d34e      	bcc.n	bffc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    bf5e:	4b38      	ldr	r3, [pc, #224]	; (c040 <xTaskIncrementTick+0x144>)
    bf60:	681b      	ldr	r3, [r3, #0]
    bf62:	681b      	ldr	r3, [r3, #0]
    bf64:	2b00      	cmp	r3, #0
    bf66:	d101      	bne.n	bf6c <xTaskIncrementTick+0x70>
    bf68:	2301      	movs	r3, #1
    bf6a:	e000      	b.n	bf6e <xTaskIncrementTick+0x72>
    bf6c:	2300      	movs	r3, #0
    bf6e:	2b00      	cmp	r3, #0
    bf70:	d004      	beq.n	bf7c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bf72:	4b37      	ldr	r3, [pc, #220]	; (c050 <xTaskIncrementTick+0x154>)
    bf74:	2201      	movs	r2, #1
    bf76:	4252      	negs	r2, r2
    bf78:	601a      	str	r2, [r3, #0]
					break;
    bf7a:	e03f      	b.n	bffc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    bf7c:	4b30      	ldr	r3, [pc, #192]	; (c040 <xTaskIncrementTick+0x144>)
    bf7e:	681b      	ldr	r3, [r3, #0]
    bf80:	68db      	ldr	r3, [r3, #12]
    bf82:	68db      	ldr	r3, [r3, #12]
    bf84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    bf86:	68bb      	ldr	r3, [r7, #8]
    bf88:	685b      	ldr	r3, [r3, #4]
    bf8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    bf8c:	693a      	ldr	r2, [r7, #16]
    bf8e:	687b      	ldr	r3, [r7, #4]
    bf90:	429a      	cmp	r2, r3
    bf92:	d203      	bcs.n	bf9c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    bf94:	4b2e      	ldr	r3, [pc, #184]	; (c050 <xTaskIncrementTick+0x154>)
    bf96:	687a      	ldr	r2, [r7, #4]
    bf98:	601a      	str	r2, [r3, #0]
						break;
    bf9a:	e02f      	b.n	bffc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    bf9c:	68bb      	ldr	r3, [r7, #8]
    bf9e:	3304      	adds	r3, #4
    bfa0:	0018      	movs	r0, r3
    bfa2:	4b2c      	ldr	r3, [pc, #176]	; (c054 <xTaskIncrementTick+0x158>)
    bfa4:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    bfa6:	68bb      	ldr	r3, [r7, #8]
    bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bfaa:	2b00      	cmp	r3, #0
    bfac:	d004      	beq.n	bfb8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    bfae:	68bb      	ldr	r3, [r7, #8]
    bfb0:	3318      	adds	r3, #24
    bfb2:	0018      	movs	r0, r3
    bfb4:	4b27      	ldr	r3, [pc, #156]	; (c054 <xTaskIncrementTick+0x158>)
    bfb6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    bfb8:	68bb      	ldr	r3, [r7, #8]
    bfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bfbc:	4b26      	ldr	r3, [pc, #152]	; (c058 <xTaskIncrementTick+0x15c>)
    bfbe:	681b      	ldr	r3, [r3, #0]
    bfc0:	429a      	cmp	r2, r3
    bfc2:	d903      	bls.n	bfcc <xTaskIncrementTick+0xd0>
    bfc4:	68bb      	ldr	r3, [r7, #8]
    bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bfc8:	4b23      	ldr	r3, [pc, #140]	; (c058 <xTaskIncrementTick+0x15c>)
    bfca:	601a      	str	r2, [r3, #0]
    bfcc:	68bb      	ldr	r3, [r7, #8]
    bfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bfd0:	0013      	movs	r3, r2
    bfd2:	009b      	lsls	r3, r3, #2
    bfd4:	189b      	adds	r3, r3, r2
    bfd6:	009b      	lsls	r3, r3, #2
    bfd8:	4a20      	ldr	r2, [pc, #128]	; (c05c <xTaskIncrementTick+0x160>)
    bfda:	189a      	adds	r2, r3, r2
    bfdc:	68bb      	ldr	r3, [r7, #8]
    bfde:	3304      	adds	r3, #4
    bfe0:	0019      	movs	r1, r3
    bfe2:	0010      	movs	r0, r2
    bfe4:	4b1e      	ldr	r3, [pc, #120]	; (c060 <xTaskIncrementTick+0x164>)
    bfe6:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    bfe8:	68bb      	ldr	r3, [r7, #8]
    bfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bfec:	4b1d      	ldr	r3, [pc, #116]	; (c064 <xTaskIncrementTick+0x168>)
    bfee:	681b      	ldr	r3, [r3, #0]
    bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bff2:	429a      	cmp	r2, r3
    bff4:	d3b3      	bcc.n	bf5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    bff6:	2301      	movs	r3, #1
    bff8:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    bffa:	e7b0      	b.n	bf5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    bffc:	4b19      	ldr	r3, [pc, #100]	; (c064 <xTaskIncrementTick+0x168>)
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c002:	4916      	ldr	r1, [pc, #88]	; (c05c <xTaskIncrementTick+0x160>)
    c004:	0013      	movs	r3, r2
    c006:	009b      	lsls	r3, r3, #2
    c008:	189b      	adds	r3, r3, r2
    c00a:	009b      	lsls	r3, r3, #2
    c00c:	585b      	ldr	r3, [r3, r1]
    c00e:	2b01      	cmp	r3, #1
    c010:	d907      	bls.n	c022 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    c012:	2301      	movs	r3, #1
    c014:	617b      	str	r3, [r7, #20]
    c016:	e004      	b.n	c022 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    c018:	4b13      	ldr	r3, [pc, #76]	; (c068 <xTaskIncrementTick+0x16c>)
    c01a:	681b      	ldr	r3, [r3, #0]
    c01c:	1c5a      	adds	r2, r3, #1
    c01e:	4b12      	ldr	r3, [pc, #72]	; (c068 <xTaskIncrementTick+0x16c>)
    c020:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    c022:	4b12      	ldr	r3, [pc, #72]	; (c06c <xTaskIncrementTick+0x170>)
    c024:	681b      	ldr	r3, [r3, #0]
    c026:	2b00      	cmp	r3, #0
    c028:	d001      	beq.n	c02e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    c02a:	2301      	movs	r3, #1
    c02c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    c02e:	697b      	ldr	r3, [r7, #20]
}
    c030:	0018      	movs	r0, r3
    c032:	46bd      	mov	sp, r7
    c034:	b006      	add	sp, #24
    c036:	bd80      	pop	{r7, pc}
    c038:	20003cc4 	.word	0x20003cc4
    c03c:	20003ca0 	.word	0x20003ca0
    c040:	20003c54 	.word	0x20003c54
    c044:	20003c58 	.word	0x20003c58
    c048:	20003cb4 	.word	0x20003cb4
    c04c:	0000c4e9 	.word	0x0000c4e9
    c050:	20003cbc 	.word	0x20003cbc
    c054:	0000ac6d 	.word	0x0000ac6d
    c058:	20003ca4 	.word	0x20003ca4
    c05c:	20003bc8 	.word	0x20003bc8
    c060:	0000abbd 	.word	0x0000abbd
    c064:	20003bc4 	.word	0x20003bc4
    c068:	20003cac 	.word	0x20003cac
    c06c:	20003cb0 	.word	0x20003cb0

0000c070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    c070:	b580      	push	{r7, lr}
    c072:	b082      	sub	sp, #8
    c074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    c076:	4b2a      	ldr	r3, [pc, #168]	; (c120 <vTaskSwitchContext+0xb0>)
    c078:	681b      	ldr	r3, [r3, #0]
    c07a:	2b00      	cmp	r3, #0
    c07c:	d003      	beq.n	c086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    c07e:	4b29      	ldr	r3, [pc, #164]	; (c124 <vTaskSwitchContext+0xb4>)
    c080:	2201      	movs	r2, #1
    c082:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c084:	e048      	b.n	c118 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    c086:	4b27      	ldr	r3, [pc, #156]	; (c124 <vTaskSwitchContext+0xb4>)
    c088:	2200      	movs	r2, #0
    c08a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    c08c:	4b26      	ldr	r3, [pc, #152]	; (c128 <vTaskSwitchContext+0xb8>)
    c08e:	681b      	ldr	r3, [r3, #0]
    c090:	681a      	ldr	r2, [r3, #0]
    c092:	4b25      	ldr	r3, [pc, #148]	; (c128 <vTaskSwitchContext+0xb8>)
    c094:	681b      	ldr	r3, [r3, #0]
    c096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c098:	429a      	cmp	r2, r3
    c09a:	d808      	bhi.n	c0ae <vTaskSwitchContext+0x3e>
    c09c:	4b22      	ldr	r3, [pc, #136]	; (c128 <vTaskSwitchContext+0xb8>)
    c09e:	681a      	ldr	r2, [r3, #0]
    c0a0:	4b21      	ldr	r3, [pc, #132]	; (c128 <vTaskSwitchContext+0xb8>)
    c0a2:	681b      	ldr	r3, [r3, #0]
    c0a4:	3334      	adds	r3, #52	; 0x34
    c0a6:	0019      	movs	r1, r3
    c0a8:	0010      	movs	r0, r2
    c0aa:	4b20      	ldr	r3, [pc, #128]	; (c12c <vTaskSwitchContext+0xbc>)
    c0ac:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    c0ae:	4b20      	ldr	r3, [pc, #128]	; (c130 <vTaskSwitchContext+0xc0>)
    c0b0:	681b      	ldr	r3, [r3, #0]
    c0b2:	607b      	str	r3, [r7, #4]
    c0b4:	e007      	b.n	c0c6 <vTaskSwitchContext+0x56>
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d101      	bne.n	c0c0 <vTaskSwitchContext+0x50>
    c0bc:	b672      	cpsid	i
    c0be:	e7fe      	b.n	c0be <vTaskSwitchContext+0x4e>
    c0c0:	687b      	ldr	r3, [r7, #4]
    c0c2:	3b01      	subs	r3, #1
    c0c4:	607b      	str	r3, [r7, #4]
    c0c6:	491b      	ldr	r1, [pc, #108]	; (c134 <vTaskSwitchContext+0xc4>)
    c0c8:	687a      	ldr	r2, [r7, #4]
    c0ca:	0013      	movs	r3, r2
    c0cc:	009b      	lsls	r3, r3, #2
    c0ce:	189b      	adds	r3, r3, r2
    c0d0:	009b      	lsls	r3, r3, #2
    c0d2:	585b      	ldr	r3, [r3, r1]
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d0ee      	beq.n	c0b6 <vTaskSwitchContext+0x46>
    c0d8:	687a      	ldr	r2, [r7, #4]
    c0da:	0013      	movs	r3, r2
    c0dc:	009b      	lsls	r3, r3, #2
    c0de:	189b      	adds	r3, r3, r2
    c0e0:	009b      	lsls	r3, r3, #2
    c0e2:	4a14      	ldr	r2, [pc, #80]	; (c134 <vTaskSwitchContext+0xc4>)
    c0e4:	189b      	adds	r3, r3, r2
    c0e6:	603b      	str	r3, [r7, #0]
    c0e8:	683b      	ldr	r3, [r7, #0]
    c0ea:	685b      	ldr	r3, [r3, #4]
    c0ec:	685a      	ldr	r2, [r3, #4]
    c0ee:	683b      	ldr	r3, [r7, #0]
    c0f0:	605a      	str	r2, [r3, #4]
    c0f2:	683b      	ldr	r3, [r7, #0]
    c0f4:	685a      	ldr	r2, [r3, #4]
    c0f6:	683b      	ldr	r3, [r7, #0]
    c0f8:	3308      	adds	r3, #8
    c0fa:	429a      	cmp	r2, r3
    c0fc:	d104      	bne.n	c108 <vTaskSwitchContext+0x98>
    c0fe:	683b      	ldr	r3, [r7, #0]
    c100:	685b      	ldr	r3, [r3, #4]
    c102:	685a      	ldr	r2, [r3, #4]
    c104:	683b      	ldr	r3, [r7, #0]
    c106:	605a      	str	r2, [r3, #4]
    c108:	683b      	ldr	r3, [r7, #0]
    c10a:	685b      	ldr	r3, [r3, #4]
    c10c:	68da      	ldr	r2, [r3, #12]
    c10e:	4b06      	ldr	r3, [pc, #24]	; (c128 <vTaskSwitchContext+0xb8>)
    c110:	601a      	str	r2, [r3, #0]
    c112:	4b07      	ldr	r3, [pc, #28]	; (c130 <vTaskSwitchContext+0xc0>)
    c114:	687a      	ldr	r2, [r7, #4]
    c116:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c118:	46c0      	nop			; (mov r8, r8)
    c11a:	46bd      	mov	sp, r7
    c11c:	b002      	add	sp, #8
    c11e:	bd80      	pop	{r7, pc}
    c120:	20003cc4 	.word	0x20003cc4
    c124:	20003cb0 	.word	0x20003cb0
    c128:	20003bc4 	.word	0x20003bc4
    c12c:	0000da55 	.word	0x0000da55
    c130:	20003ca4 	.word	0x20003ca4
    c134:	20003bc8 	.word	0x20003bc8

0000c138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    c138:	b580      	push	{r7, lr}
    c13a:	b082      	sub	sp, #8
    c13c:	af00      	add	r7, sp, #0
    c13e:	6078      	str	r0, [r7, #4]
    c140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    c142:	687b      	ldr	r3, [r7, #4]
    c144:	2b00      	cmp	r3, #0
    c146:	d101      	bne.n	c14c <vTaskPlaceOnEventList+0x14>
    c148:	b672      	cpsid	i
    c14a:	e7fe      	b.n	c14a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c14c:	4b08      	ldr	r3, [pc, #32]	; (c170 <vTaskPlaceOnEventList+0x38>)
    c14e:	681b      	ldr	r3, [r3, #0]
    c150:	3318      	adds	r3, #24
    c152:	001a      	movs	r2, r3
    c154:	687b      	ldr	r3, [r7, #4]
    c156:	0011      	movs	r1, r2
    c158:	0018      	movs	r0, r3
    c15a:	4b06      	ldr	r3, [pc, #24]	; (c174 <vTaskPlaceOnEventList+0x3c>)
    c15c:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c15e:	683b      	ldr	r3, [r7, #0]
    c160:	2101      	movs	r1, #1
    c162:	0018      	movs	r0, r3
    c164:	4b04      	ldr	r3, [pc, #16]	; (c178 <vTaskPlaceOnEventList+0x40>)
    c166:	4798      	blx	r3
}
    c168:	46c0      	nop			; (mov r8, r8)
    c16a:	46bd      	mov	sp, r7
    c16c:	b002      	add	sp, #8
    c16e:	bd80      	pop	{r7, pc}
    c170:	20003bc4 	.word	0x20003bc4
    c174:	0000ac01 	.word	0x0000ac01
    c178:	0000c711 	.word	0x0000c711

0000c17c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    c17c:	b580      	push	{r7, lr}
    c17e:	b084      	sub	sp, #16
    c180:	af00      	add	r7, sp, #0
    c182:	60f8      	str	r0, [r7, #12]
    c184:	60b9      	str	r1, [r7, #8]
    c186:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    c188:	68fb      	ldr	r3, [r7, #12]
    c18a:	2b00      	cmp	r3, #0
    c18c:	d101      	bne.n	c192 <vTaskPlaceOnEventListRestricted+0x16>
    c18e:	b672      	cpsid	i
    c190:	e7fe      	b.n	c190 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c192:	4b0c      	ldr	r3, [pc, #48]	; (c1c4 <vTaskPlaceOnEventListRestricted+0x48>)
    c194:	681b      	ldr	r3, [r3, #0]
    c196:	3318      	adds	r3, #24
    c198:	001a      	movs	r2, r3
    c19a:	68fb      	ldr	r3, [r7, #12]
    c19c:	0011      	movs	r1, r2
    c19e:	0018      	movs	r0, r3
    c1a0:	4b09      	ldr	r3, [pc, #36]	; (c1c8 <vTaskPlaceOnEventListRestricted+0x4c>)
    c1a2:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    c1a4:	687b      	ldr	r3, [r7, #4]
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d002      	beq.n	c1b0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    c1aa:	2301      	movs	r3, #1
    c1ac:	425b      	negs	r3, r3
    c1ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    c1b0:	687a      	ldr	r2, [r7, #4]
    c1b2:	68bb      	ldr	r3, [r7, #8]
    c1b4:	0011      	movs	r1, r2
    c1b6:	0018      	movs	r0, r3
    c1b8:	4b04      	ldr	r3, [pc, #16]	; (c1cc <vTaskPlaceOnEventListRestricted+0x50>)
    c1ba:	4798      	blx	r3
	}
    c1bc:	46c0      	nop			; (mov r8, r8)
    c1be:	46bd      	mov	sp, r7
    c1c0:	b004      	add	sp, #16
    c1c2:	bd80      	pop	{r7, pc}
    c1c4:	20003bc4 	.word	0x20003bc4
    c1c8:	0000abbd 	.word	0x0000abbd
    c1cc:	0000c711 	.word	0x0000c711

0000c1d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    c1d0:	b580      	push	{r7, lr}
    c1d2:	b084      	sub	sp, #16
    c1d4:	af00      	add	r7, sp, #0
    c1d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    c1d8:	687b      	ldr	r3, [r7, #4]
    c1da:	68db      	ldr	r3, [r3, #12]
    c1dc:	68db      	ldr	r3, [r3, #12]
    c1de:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    c1e0:	68bb      	ldr	r3, [r7, #8]
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d101      	bne.n	c1ea <xTaskRemoveFromEventList+0x1a>
    c1e6:	b672      	cpsid	i
    c1e8:	e7fe      	b.n	c1e8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    c1ea:	68bb      	ldr	r3, [r7, #8]
    c1ec:	3318      	adds	r3, #24
    c1ee:	0018      	movs	r0, r3
    c1f0:	4b1f      	ldr	r3, [pc, #124]	; (c270 <xTaskRemoveFromEventList+0xa0>)
    c1f2:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c1f4:	4b1f      	ldr	r3, [pc, #124]	; (c274 <xTaskRemoveFromEventList+0xa4>)
    c1f6:	681b      	ldr	r3, [r3, #0]
    c1f8:	2b00      	cmp	r3, #0
    c1fa:	d11d      	bne.n	c238 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    c1fc:	68bb      	ldr	r3, [r7, #8]
    c1fe:	3304      	adds	r3, #4
    c200:	0018      	movs	r0, r3
    c202:	4b1b      	ldr	r3, [pc, #108]	; (c270 <xTaskRemoveFromEventList+0xa0>)
    c204:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    c206:	68bb      	ldr	r3, [r7, #8]
    c208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c20a:	4b1b      	ldr	r3, [pc, #108]	; (c278 <xTaskRemoveFromEventList+0xa8>)
    c20c:	681b      	ldr	r3, [r3, #0]
    c20e:	429a      	cmp	r2, r3
    c210:	d903      	bls.n	c21a <xTaskRemoveFromEventList+0x4a>
    c212:	68bb      	ldr	r3, [r7, #8]
    c214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c216:	4b18      	ldr	r3, [pc, #96]	; (c278 <xTaskRemoveFromEventList+0xa8>)
    c218:	601a      	str	r2, [r3, #0]
    c21a:	68bb      	ldr	r3, [r7, #8]
    c21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c21e:	0013      	movs	r3, r2
    c220:	009b      	lsls	r3, r3, #2
    c222:	189b      	adds	r3, r3, r2
    c224:	009b      	lsls	r3, r3, #2
    c226:	4a15      	ldr	r2, [pc, #84]	; (c27c <xTaskRemoveFromEventList+0xac>)
    c228:	189a      	adds	r2, r3, r2
    c22a:	68bb      	ldr	r3, [r7, #8]
    c22c:	3304      	adds	r3, #4
    c22e:	0019      	movs	r1, r3
    c230:	0010      	movs	r0, r2
    c232:	4b13      	ldr	r3, [pc, #76]	; (c280 <xTaskRemoveFromEventList+0xb0>)
    c234:	4798      	blx	r3
    c236:	e007      	b.n	c248 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    c238:	68bb      	ldr	r3, [r7, #8]
    c23a:	3318      	adds	r3, #24
    c23c:	001a      	movs	r2, r3
    c23e:	4b11      	ldr	r3, [pc, #68]	; (c284 <xTaskRemoveFromEventList+0xb4>)
    c240:	0011      	movs	r1, r2
    c242:	0018      	movs	r0, r3
    c244:	4b0e      	ldr	r3, [pc, #56]	; (c280 <xTaskRemoveFromEventList+0xb0>)
    c246:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    c248:	68bb      	ldr	r3, [r7, #8]
    c24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c24c:	4b0e      	ldr	r3, [pc, #56]	; (c288 <xTaskRemoveFromEventList+0xb8>)
    c24e:	681b      	ldr	r3, [r3, #0]
    c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c252:	429a      	cmp	r2, r3
    c254:	d905      	bls.n	c262 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    c256:	2301      	movs	r3, #1
    c258:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    c25a:	4b0c      	ldr	r3, [pc, #48]	; (c28c <xTaskRemoveFromEventList+0xbc>)
    c25c:	2201      	movs	r2, #1
    c25e:	601a      	str	r2, [r3, #0]
    c260:	e001      	b.n	c266 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    c262:	2300      	movs	r3, #0
    c264:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    c266:	68fb      	ldr	r3, [r7, #12]
}
    c268:	0018      	movs	r0, r3
    c26a:	46bd      	mov	sp, r7
    c26c:	b004      	add	sp, #16
    c26e:	bd80      	pop	{r7, pc}
    c270:	0000ac6d 	.word	0x0000ac6d
    c274:	20003cc4 	.word	0x20003cc4
    c278:	20003ca4 	.word	0x20003ca4
    c27c:	20003bc8 	.word	0x20003bc8
    c280:	0000abbd 	.word	0x0000abbd
    c284:	20003c5c 	.word	0x20003c5c
    c288:	20003bc4 	.word	0x20003bc4
    c28c:	20003cb0 	.word	0x20003cb0

0000c290 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    c290:	b580      	push	{r7, lr}
    c292:	b082      	sub	sp, #8
    c294:	af00      	add	r7, sp, #0
    c296:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    c298:	687b      	ldr	r3, [r7, #4]
    c29a:	2b00      	cmp	r3, #0
    c29c:	d101      	bne.n	c2a2 <vTaskSetTimeOutState+0x12>
    c29e:	b672      	cpsid	i
    c2a0:	e7fe      	b.n	c2a0 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    c2a2:	4b06      	ldr	r3, [pc, #24]	; (c2bc <vTaskSetTimeOutState+0x2c>)
    c2a4:	681a      	ldr	r2, [r3, #0]
    c2a6:	687b      	ldr	r3, [r7, #4]
    c2a8:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    c2aa:	4b05      	ldr	r3, [pc, #20]	; (c2c0 <vTaskSetTimeOutState+0x30>)
    c2ac:	681a      	ldr	r2, [r3, #0]
    c2ae:	687b      	ldr	r3, [r7, #4]
    c2b0:	605a      	str	r2, [r3, #4]
}
    c2b2:	46c0      	nop			; (mov r8, r8)
    c2b4:	46bd      	mov	sp, r7
    c2b6:	b002      	add	sp, #8
    c2b8:	bd80      	pop	{r7, pc}
    c2ba:	46c0      	nop			; (mov r8, r8)
    c2bc:	20003cb4 	.word	0x20003cb4
    c2c0:	20003ca0 	.word	0x20003ca0

0000c2c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    c2c4:	b580      	push	{r7, lr}
    c2c6:	b084      	sub	sp, #16
    c2c8:	af00      	add	r7, sp, #0
    c2ca:	6078      	str	r0, [r7, #4]
    c2cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    c2ce:	687b      	ldr	r3, [r7, #4]
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d101      	bne.n	c2d8 <xTaskCheckForTimeOut+0x14>
    c2d4:	b672      	cpsid	i
    c2d6:	e7fe      	b.n	c2d6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    c2d8:	683b      	ldr	r3, [r7, #0]
    c2da:	2b00      	cmp	r3, #0
    c2dc:	d101      	bne.n	c2e2 <xTaskCheckForTimeOut+0x1e>
    c2de:	b672      	cpsid	i
    c2e0:	e7fe      	b.n	c2e0 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    c2e2:	4b1d      	ldr	r3, [pc, #116]	; (c358 <xTaskCheckForTimeOut+0x94>)
    c2e4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    c2e6:	4b1d      	ldr	r3, [pc, #116]	; (c35c <xTaskCheckForTimeOut+0x98>)
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    c2ec:	683b      	ldr	r3, [r7, #0]
    c2ee:	681b      	ldr	r3, [r3, #0]
    c2f0:	3301      	adds	r3, #1
    c2f2:	d102      	bne.n	c2fa <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    c2f4:	2300      	movs	r3, #0
    c2f6:	60fb      	str	r3, [r7, #12]
    c2f8:	e027      	b.n	c34a <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    c2fa:	687b      	ldr	r3, [r7, #4]
    c2fc:	681a      	ldr	r2, [r3, #0]
    c2fe:	4b18      	ldr	r3, [pc, #96]	; (c360 <xTaskCheckForTimeOut+0x9c>)
    c300:	681b      	ldr	r3, [r3, #0]
    c302:	429a      	cmp	r2, r3
    c304:	d007      	beq.n	c316 <xTaskCheckForTimeOut+0x52>
    c306:	687b      	ldr	r3, [r7, #4]
    c308:	685a      	ldr	r2, [r3, #4]
    c30a:	68bb      	ldr	r3, [r7, #8]
    c30c:	429a      	cmp	r2, r3
    c30e:	d802      	bhi.n	c316 <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    c310:	2301      	movs	r3, #1
    c312:	60fb      	str	r3, [r7, #12]
    c314:	e019      	b.n	c34a <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	685b      	ldr	r3, [r3, #4]
    c31a:	68ba      	ldr	r2, [r7, #8]
    c31c:	1ad2      	subs	r2, r2, r3
    c31e:	683b      	ldr	r3, [r7, #0]
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	429a      	cmp	r2, r3
    c324:	d20f      	bcs.n	c346 <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    c326:	683b      	ldr	r3, [r7, #0]
    c328:	681a      	ldr	r2, [r3, #0]
    c32a:	687b      	ldr	r3, [r7, #4]
    c32c:	6859      	ldr	r1, [r3, #4]
    c32e:	68bb      	ldr	r3, [r7, #8]
    c330:	1acb      	subs	r3, r1, r3
    c332:	18d2      	adds	r2, r2, r3
    c334:	683b      	ldr	r3, [r7, #0]
    c336:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    c338:	687b      	ldr	r3, [r7, #4]
    c33a:	0018      	movs	r0, r3
    c33c:	4b09      	ldr	r3, [pc, #36]	; (c364 <xTaskCheckForTimeOut+0xa0>)
    c33e:	4798      	blx	r3
			xReturn = pdFALSE;
    c340:	2300      	movs	r3, #0
    c342:	60fb      	str	r3, [r7, #12]
    c344:	e001      	b.n	c34a <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    c346:	2301      	movs	r3, #1
    c348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    c34a:	4b07      	ldr	r3, [pc, #28]	; (c368 <xTaskCheckForTimeOut+0xa4>)
    c34c:	4798      	blx	r3

	return xReturn;
    c34e:	68fb      	ldr	r3, [r7, #12]
}
    c350:	0018      	movs	r0, r3
    c352:	46bd      	mov	sp, r7
    c354:	b004      	add	sp, #16
    c356:	bd80      	pop	{r7, pc}
    c358:	0000ade9 	.word	0x0000ade9
    c35c:	20003ca0 	.word	0x20003ca0
    c360:	20003cb4 	.word	0x20003cb4
    c364:	0000c291 	.word	0x0000c291
    c368:	0000ae0d 	.word	0x0000ae0d

0000c36c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    c36c:	b580      	push	{r7, lr}
    c36e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    c370:	4b02      	ldr	r3, [pc, #8]	; (c37c <vTaskMissedYield+0x10>)
    c372:	2201      	movs	r2, #1
    c374:	601a      	str	r2, [r3, #0]
}
    c376:	46c0      	nop			; (mov r8, r8)
    c378:	46bd      	mov	sp, r7
    c37a:	bd80      	pop	{r7, pc}
    c37c:	20003cb0 	.word	0x20003cb0

0000c380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    c380:	b580      	push	{r7, lr}
    c382:	b082      	sub	sp, #8
    c384:	af00      	add	r7, sp, #0
    c386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    c388:	4b04      	ldr	r3, [pc, #16]	; (c39c <prvIdleTask+0x1c>)
    c38a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    c38c:	4b04      	ldr	r3, [pc, #16]	; (c3a0 <prvIdleTask+0x20>)
    c38e:	681b      	ldr	r3, [r3, #0]
    c390:	2b01      	cmp	r3, #1
    c392:	d9f9      	bls.n	c388 <prvIdleTask+0x8>
			{
				taskYIELD();
    c394:	4b03      	ldr	r3, [pc, #12]	; (c3a4 <prvIdleTask+0x24>)
    c396:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    c398:	e7f6      	b.n	c388 <prvIdleTask+0x8>
    c39a:	46c0      	nop			; (mov r8, r8)
    c39c:	0000c435 	.word	0x0000c435
    c3a0:	20003bc8 	.word	0x20003bc8
    c3a4:	0000adc9 	.word	0x0000adc9

0000c3a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    c3a8:	b580      	push	{r7, lr}
    c3aa:	b082      	sub	sp, #8
    c3ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c3ae:	2300      	movs	r3, #0
    c3b0:	607b      	str	r3, [r7, #4]
    c3b2:	e00c      	b.n	c3ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    c3b4:	687a      	ldr	r2, [r7, #4]
    c3b6:	0013      	movs	r3, r2
    c3b8:	009b      	lsls	r3, r3, #2
    c3ba:	189b      	adds	r3, r3, r2
    c3bc:	009b      	lsls	r3, r3, #2
    c3be:	4a14      	ldr	r2, [pc, #80]	; (c410 <prvInitialiseTaskLists+0x68>)
    c3c0:	189b      	adds	r3, r3, r2
    c3c2:	0018      	movs	r0, r3
    c3c4:	4b13      	ldr	r3, [pc, #76]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3c6:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c3c8:	687b      	ldr	r3, [r7, #4]
    c3ca:	3301      	adds	r3, #1
    c3cc:	607b      	str	r3, [r7, #4]
    c3ce:	687b      	ldr	r3, [r7, #4]
    c3d0:	2b04      	cmp	r3, #4
    c3d2:	d9ef      	bls.n	c3b4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    c3d4:	4b10      	ldr	r3, [pc, #64]	; (c418 <prvInitialiseTaskLists+0x70>)
    c3d6:	0018      	movs	r0, r3
    c3d8:	4b0e      	ldr	r3, [pc, #56]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3da:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    c3dc:	4b0f      	ldr	r3, [pc, #60]	; (c41c <prvInitialiseTaskLists+0x74>)
    c3de:	0018      	movs	r0, r3
    c3e0:	4b0c      	ldr	r3, [pc, #48]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3e2:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    c3e4:	4b0e      	ldr	r3, [pc, #56]	; (c420 <prvInitialiseTaskLists+0x78>)
    c3e6:	0018      	movs	r0, r3
    c3e8:	4b0a      	ldr	r3, [pc, #40]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3ea:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    c3ec:	4b0d      	ldr	r3, [pc, #52]	; (c424 <prvInitialiseTaskLists+0x7c>)
    c3ee:	0018      	movs	r0, r3
    c3f0:	4b08      	ldr	r3, [pc, #32]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3f2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    c3f4:	4b0c      	ldr	r3, [pc, #48]	; (c428 <prvInitialiseTaskLists+0x80>)
    c3f6:	0018      	movs	r0, r3
    c3f8:	4b06      	ldr	r3, [pc, #24]	; (c414 <prvInitialiseTaskLists+0x6c>)
    c3fa:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    c3fc:	4b0b      	ldr	r3, [pc, #44]	; (c42c <prvInitialiseTaskLists+0x84>)
    c3fe:	4a06      	ldr	r2, [pc, #24]	; (c418 <prvInitialiseTaskLists+0x70>)
    c400:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    c402:	4b0b      	ldr	r3, [pc, #44]	; (c430 <prvInitialiseTaskLists+0x88>)
    c404:	4a05      	ldr	r2, [pc, #20]	; (c41c <prvInitialiseTaskLists+0x74>)
    c406:	601a      	str	r2, [r3, #0]
}
    c408:	46c0      	nop			; (mov r8, r8)
    c40a:	46bd      	mov	sp, r7
    c40c:	b002      	add	sp, #8
    c40e:	bd80      	pop	{r7, pc}
    c410:	20003bc8 	.word	0x20003bc8
    c414:	0000ab69 	.word	0x0000ab69
    c418:	20003c2c 	.word	0x20003c2c
    c41c:	20003c40 	.word	0x20003c40
    c420:	20003c5c 	.word	0x20003c5c
    c424:	20003c70 	.word	0x20003c70
    c428:	20003c88 	.word	0x20003c88
    c42c:	20003c54 	.word	0x20003c54
    c430:	20003c58 	.word	0x20003c58

0000c434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    c434:	b580      	push	{r7, lr}
    c436:	b082      	sub	sp, #8
    c438:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c43a:	e027      	b.n	c48c <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    c43c:	4b17      	ldr	r3, [pc, #92]	; (c49c <prvCheckTasksWaitingTermination+0x68>)
    c43e:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    c440:	4b17      	ldr	r3, [pc, #92]	; (c4a0 <prvCheckTasksWaitingTermination+0x6c>)
    c442:	681b      	ldr	r3, [r3, #0]
    c444:	425a      	negs	r2, r3
    c446:	4153      	adcs	r3, r2
    c448:	b2db      	uxtb	r3, r3
    c44a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    c44c:	4b15      	ldr	r3, [pc, #84]	; (c4a4 <prvCheckTasksWaitingTermination+0x70>)
    c44e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	2b00      	cmp	r3, #0
    c454:	d11a      	bne.n	c48c <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    c456:	4b14      	ldr	r3, [pc, #80]	; (c4a8 <prvCheckTasksWaitingTermination+0x74>)
    c458:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    c45a:	4b11      	ldr	r3, [pc, #68]	; (c4a0 <prvCheckTasksWaitingTermination+0x6c>)
    c45c:	68db      	ldr	r3, [r3, #12]
    c45e:	68db      	ldr	r3, [r3, #12]
    c460:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c462:	683b      	ldr	r3, [r7, #0]
    c464:	3304      	adds	r3, #4
    c466:	0018      	movs	r0, r3
    c468:	4b10      	ldr	r3, [pc, #64]	; (c4ac <prvCheckTasksWaitingTermination+0x78>)
    c46a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    c46c:	4b10      	ldr	r3, [pc, #64]	; (c4b0 <prvCheckTasksWaitingTermination+0x7c>)
    c46e:	681b      	ldr	r3, [r3, #0]
    c470:	1e5a      	subs	r2, r3, #1
    c472:	4b0f      	ldr	r3, [pc, #60]	; (c4b0 <prvCheckTasksWaitingTermination+0x7c>)
    c474:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    c476:	4b0f      	ldr	r3, [pc, #60]	; (c4b4 <prvCheckTasksWaitingTermination+0x80>)
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	1e5a      	subs	r2, r3, #1
    c47c:	4b0d      	ldr	r3, [pc, #52]	; (c4b4 <prvCheckTasksWaitingTermination+0x80>)
    c47e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    c480:	4b0d      	ldr	r3, [pc, #52]	; (c4b8 <prvCheckTasksWaitingTermination+0x84>)
    c482:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    c484:	683b      	ldr	r3, [r7, #0]
    c486:	0018      	movs	r0, r3
    c488:	4b0c      	ldr	r3, [pc, #48]	; (c4bc <prvCheckTasksWaitingTermination+0x88>)
    c48a:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c48c:	4b09      	ldr	r3, [pc, #36]	; (c4b4 <prvCheckTasksWaitingTermination+0x80>)
    c48e:	681b      	ldr	r3, [r3, #0]
    c490:	2b00      	cmp	r3, #0
    c492:	d1d3      	bne.n	c43c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    c494:	46c0      	nop			; (mov r8, r8)
    c496:	46bd      	mov	sp, r7
    c498:	b002      	add	sp, #8
    c49a:	bd80      	pop	{r7, pc}
    c49c:	0000bd95 	.word	0x0000bd95
    c4a0:	20003c70 	.word	0x20003c70
    c4a4:	0000bdad 	.word	0x0000bdad
    c4a8:	0000ade9 	.word	0x0000ade9
    c4ac:	0000ac6d 	.word	0x0000ac6d
    c4b0:	20003c9c 	.word	0x20003c9c
    c4b4:	20003c84 	.word	0x20003c84
    c4b8:	0000ae0d 	.word	0x0000ae0d
    c4bc:	0000c4c1 	.word	0x0000c4c1

0000c4c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    c4c0:	b580      	push	{r7, lr}
    c4c2:	b082      	sub	sp, #8
    c4c4:	af00      	add	r7, sp, #0
    c4c6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    c4c8:	687b      	ldr	r3, [r7, #4]
    c4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c4cc:	0018      	movs	r0, r3
    c4ce:	4b05      	ldr	r3, [pc, #20]	; (c4e4 <prvDeleteTCB+0x24>)
    c4d0:	4798      	blx	r3
			vPortFree( pxTCB );
    c4d2:	687b      	ldr	r3, [r7, #4]
    c4d4:	0018      	movs	r0, r3
    c4d6:	4b03      	ldr	r3, [pc, #12]	; (c4e4 <prvDeleteTCB+0x24>)
    c4d8:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    c4da:	46c0      	nop			; (mov r8, r8)
    c4dc:	46bd      	mov	sp, r7
    c4de:	b002      	add	sp, #8
    c4e0:	bd80      	pop	{r7, pc}
    c4e2:	46c0      	nop			; (mov r8, r8)
    c4e4:	0000af91 	.word	0x0000af91

0000c4e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    c4e8:	b580      	push	{r7, lr}
    c4ea:	b082      	sub	sp, #8
    c4ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c4ee:	4b0e      	ldr	r3, [pc, #56]	; (c528 <prvResetNextTaskUnblockTime+0x40>)
    c4f0:	681b      	ldr	r3, [r3, #0]
    c4f2:	681b      	ldr	r3, [r3, #0]
    c4f4:	2b00      	cmp	r3, #0
    c4f6:	d101      	bne.n	c4fc <prvResetNextTaskUnblockTime+0x14>
    c4f8:	2301      	movs	r3, #1
    c4fa:	e000      	b.n	c4fe <prvResetNextTaskUnblockTime+0x16>
    c4fc:	2300      	movs	r3, #0
    c4fe:	2b00      	cmp	r3, #0
    c500:	d004      	beq.n	c50c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    c502:	4b0a      	ldr	r3, [pc, #40]	; (c52c <prvResetNextTaskUnblockTime+0x44>)
    c504:	2201      	movs	r2, #1
    c506:	4252      	negs	r2, r2
    c508:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    c50a:	e008      	b.n	c51e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c50c:	4b06      	ldr	r3, [pc, #24]	; (c528 <prvResetNextTaskUnblockTime+0x40>)
    c50e:	681b      	ldr	r3, [r3, #0]
    c510:	68db      	ldr	r3, [r3, #12]
    c512:	68db      	ldr	r3, [r3, #12]
    c514:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    c516:	687b      	ldr	r3, [r7, #4]
    c518:	685a      	ldr	r2, [r3, #4]
    c51a:	4b04      	ldr	r3, [pc, #16]	; (c52c <prvResetNextTaskUnblockTime+0x44>)
    c51c:	601a      	str	r2, [r3, #0]
	}
}
    c51e:	46c0      	nop			; (mov r8, r8)
    c520:	46bd      	mov	sp, r7
    c522:	b002      	add	sp, #8
    c524:	bd80      	pop	{r7, pc}
    c526:	46c0      	nop			; (mov r8, r8)
    c528:	20003c54 	.word	0x20003c54
    c52c:	20003cbc 	.word	0x20003cbc

0000c530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    c530:	b580      	push	{r7, lr}
    c532:	b082      	sub	sp, #8
    c534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    c536:	4b0a      	ldr	r3, [pc, #40]	; (c560 <xTaskGetSchedulerState+0x30>)
    c538:	681b      	ldr	r3, [r3, #0]
    c53a:	2b00      	cmp	r3, #0
    c53c:	d102      	bne.n	c544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    c53e:	2301      	movs	r3, #1
    c540:	607b      	str	r3, [r7, #4]
    c542:	e008      	b.n	c556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c544:	4b07      	ldr	r3, [pc, #28]	; (c564 <xTaskGetSchedulerState+0x34>)
    c546:	681b      	ldr	r3, [r3, #0]
    c548:	2b00      	cmp	r3, #0
    c54a:	d102      	bne.n	c552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    c54c:	2302      	movs	r3, #2
    c54e:	607b      	str	r3, [r7, #4]
    c550:	e001      	b.n	c556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    c552:	2300      	movs	r3, #0
    c554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    c556:	687b      	ldr	r3, [r7, #4]
	}
    c558:	0018      	movs	r0, r3
    c55a:	46bd      	mov	sp, r7
    c55c:	b002      	add	sp, #8
    c55e:	bd80      	pop	{r7, pc}
    c560:	20003ca8 	.word	0x20003ca8
    c564:	20003cc4 	.word	0x20003cc4

0000c568 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    c568:	b580      	push	{r7, lr}
    c56a:	b084      	sub	sp, #16
    c56c:	af00      	add	r7, sp, #0
    c56e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c570:	687b      	ldr	r3, [r7, #4]
    c572:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    c574:	687b      	ldr	r3, [r7, #4]
    c576:	2b00      	cmp	r3, #0
    c578:	d04a      	beq.n	c610 <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    c57a:	68fb      	ldr	r3, [r7, #12]
    c57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c57e:	4b26      	ldr	r3, [pc, #152]	; (c618 <vTaskPriorityInherit+0xb0>)
    c580:	681b      	ldr	r3, [r3, #0]
    c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c584:	429a      	cmp	r2, r3
    c586:	d243      	bcs.n	c610 <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    c588:	68fb      	ldr	r3, [r7, #12]
    c58a:	699b      	ldr	r3, [r3, #24]
    c58c:	2b00      	cmp	r3, #0
    c58e:	db06      	blt.n	c59e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c590:	4b21      	ldr	r3, [pc, #132]	; (c618 <vTaskPriorityInherit+0xb0>)
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c596:	2205      	movs	r2, #5
    c598:	1ad2      	subs	r2, r2, r3
    c59a:	68fb      	ldr	r3, [r7, #12]
    c59c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    c59e:	68fb      	ldr	r3, [r7, #12]
    c5a0:	6959      	ldr	r1, [r3, #20]
    c5a2:	68fb      	ldr	r3, [r7, #12]
    c5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5a6:	0013      	movs	r3, r2
    c5a8:	009b      	lsls	r3, r3, #2
    c5aa:	189b      	adds	r3, r3, r2
    c5ac:	009b      	lsls	r3, r3, #2
    c5ae:	4a1b      	ldr	r2, [pc, #108]	; (c61c <vTaskPriorityInherit+0xb4>)
    c5b0:	189b      	adds	r3, r3, r2
    c5b2:	4299      	cmp	r1, r3
    c5b4:	d101      	bne.n	c5ba <vTaskPriorityInherit+0x52>
    c5b6:	2301      	movs	r3, #1
    c5b8:	e000      	b.n	c5bc <vTaskPriorityInherit+0x54>
    c5ba:	2300      	movs	r3, #0
    c5bc:	2b00      	cmp	r3, #0
    c5be:	d022      	beq.n	c606 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c5c0:	68fb      	ldr	r3, [r7, #12]
    c5c2:	3304      	adds	r3, #4
    c5c4:	0018      	movs	r0, r3
    c5c6:	4b16      	ldr	r3, [pc, #88]	; (c620 <vTaskPriorityInherit+0xb8>)
    c5c8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    c5ca:	4b13      	ldr	r3, [pc, #76]	; (c618 <vTaskPriorityInherit+0xb0>)
    c5cc:	681b      	ldr	r3, [r3, #0]
    c5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5d0:	68fb      	ldr	r3, [r7, #12]
    c5d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    c5d4:	68fb      	ldr	r3, [r7, #12]
    c5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5d8:	4b12      	ldr	r3, [pc, #72]	; (c624 <vTaskPriorityInherit+0xbc>)
    c5da:	681b      	ldr	r3, [r3, #0]
    c5dc:	429a      	cmp	r2, r3
    c5de:	d903      	bls.n	c5e8 <vTaskPriorityInherit+0x80>
    c5e0:	68fb      	ldr	r3, [r7, #12]
    c5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5e4:	4b0f      	ldr	r3, [pc, #60]	; (c624 <vTaskPriorityInherit+0xbc>)
    c5e6:	601a      	str	r2, [r3, #0]
    c5e8:	68fb      	ldr	r3, [r7, #12]
    c5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5ec:	0013      	movs	r3, r2
    c5ee:	009b      	lsls	r3, r3, #2
    c5f0:	189b      	adds	r3, r3, r2
    c5f2:	009b      	lsls	r3, r3, #2
    c5f4:	4a09      	ldr	r2, [pc, #36]	; (c61c <vTaskPriorityInherit+0xb4>)
    c5f6:	189a      	adds	r2, r3, r2
    c5f8:	68fb      	ldr	r3, [r7, #12]
    c5fa:	3304      	adds	r3, #4
    c5fc:	0019      	movs	r1, r3
    c5fe:	0010      	movs	r0, r2
    c600:	4b09      	ldr	r3, [pc, #36]	; (c628 <vTaskPriorityInherit+0xc0>)
    c602:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c604:	e004      	b.n	c610 <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    c606:	4b04      	ldr	r3, [pc, #16]	; (c618 <vTaskPriorityInherit+0xb0>)
    c608:	681b      	ldr	r3, [r3, #0]
    c60a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c60c:	68fb      	ldr	r3, [r7, #12]
    c60e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c610:	46c0      	nop			; (mov r8, r8)
    c612:	46bd      	mov	sp, r7
    c614:	b004      	add	sp, #16
    c616:	bd80      	pop	{r7, pc}
    c618:	20003bc4 	.word	0x20003bc4
    c61c:	20003bc8 	.word	0x20003bc8
    c620:	0000ac6d 	.word	0x0000ac6d
    c624:	20003ca4 	.word	0x20003ca4
    c628:	0000abbd 	.word	0x0000abbd

0000c62c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    c62c:	b580      	push	{r7, lr}
    c62e:	b084      	sub	sp, #16
    c630:	af00      	add	r7, sp, #0
    c632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c634:	687b      	ldr	r3, [r7, #4]
    c636:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    c638:	2300      	movs	r3, #0
    c63a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    c63c:	687b      	ldr	r3, [r7, #4]
    c63e:	2b00      	cmp	r3, #0
    c640:	d044      	beq.n	c6cc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    c642:	4b25      	ldr	r3, [pc, #148]	; (c6d8 <xTaskPriorityDisinherit+0xac>)
    c644:	681b      	ldr	r3, [r3, #0]
    c646:	68ba      	ldr	r2, [r7, #8]
    c648:	429a      	cmp	r2, r3
    c64a:	d001      	beq.n	c650 <xTaskPriorityDisinherit+0x24>
    c64c:	b672      	cpsid	i
    c64e:	e7fe      	b.n	c64e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    c650:	68bb      	ldr	r3, [r7, #8]
    c652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c654:	2b00      	cmp	r3, #0
    c656:	d101      	bne.n	c65c <xTaskPriorityDisinherit+0x30>
    c658:	b672      	cpsid	i
    c65a:	e7fe      	b.n	c65a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    c65c:	68bb      	ldr	r3, [r7, #8]
    c65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c660:	1e5a      	subs	r2, r3, #1
    c662:	68bb      	ldr	r3, [r7, #8]
    c664:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    c666:	68bb      	ldr	r3, [r7, #8]
    c668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c66a:	68bb      	ldr	r3, [r7, #8]
    c66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c66e:	429a      	cmp	r2, r3
    c670:	d02c      	beq.n	c6cc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c672:	68bb      	ldr	r3, [r7, #8]
    c674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c676:	2b00      	cmp	r3, #0
    c678:	d128      	bne.n	c6cc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c67a:	68bb      	ldr	r3, [r7, #8]
    c67c:	3304      	adds	r3, #4
    c67e:	0018      	movs	r0, r3
    c680:	4b16      	ldr	r3, [pc, #88]	; (c6dc <xTaskPriorityDisinherit+0xb0>)
    c682:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c684:	68bb      	ldr	r3, [r7, #8]
    c686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    c688:	68bb      	ldr	r3, [r7, #8]
    c68a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c68c:	68bb      	ldr	r3, [r7, #8]
    c68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c690:	2205      	movs	r2, #5
    c692:	1ad2      	subs	r2, r2, r3
    c694:	68bb      	ldr	r3, [r7, #8]
    c696:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    c698:	68bb      	ldr	r3, [r7, #8]
    c69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c69c:	4b10      	ldr	r3, [pc, #64]	; (c6e0 <xTaskPriorityDisinherit+0xb4>)
    c69e:	681b      	ldr	r3, [r3, #0]
    c6a0:	429a      	cmp	r2, r3
    c6a2:	d903      	bls.n	c6ac <xTaskPriorityDisinherit+0x80>
    c6a4:	68bb      	ldr	r3, [r7, #8]
    c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c6a8:	4b0d      	ldr	r3, [pc, #52]	; (c6e0 <xTaskPriorityDisinherit+0xb4>)
    c6aa:	601a      	str	r2, [r3, #0]
    c6ac:	68bb      	ldr	r3, [r7, #8]
    c6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c6b0:	0013      	movs	r3, r2
    c6b2:	009b      	lsls	r3, r3, #2
    c6b4:	189b      	adds	r3, r3, r2
    c6b6:	009b      	lsls	r3, r3, #2
    c6b8:	4a0a      	ldr	r2, [pc, #40]	; (c6e4 <xTaskPriorityDisinherit+0xb8>)
    c6ba:	189a      	adds	r2, r3, r2
    c6bc:	68bb      	ldr	r3, [r7, #8]
    c6be:	3304      	adds	r3, #4
    c6c0:	0019      	movs	r1, r3
    c6c2:	0010      	movs	r0, r2
    c6c4:	4b08      	ldr	r3, [pc, #32]	; (c6e8 <xTaskPriorityDisinherit+0xbc>)
    c6c6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c6c8:	2301      	movs	r3, #1
    c6ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c6cc:	68fb      	ldr	r3, [r7, #12]
	}
    c6ce:	0018      	movs	r0, r3
    c6d0:	46bd      	mov	sp, r7
    c6d2:	b004      	add	sp, #16
    c6d4:	bd80      	pop	{r7, pc}
    c6d6:	46c0      	nop			; (mov r8, r8)
    c6d8:	20003bc4 	.word	0x20003bc4
    c6dc:	0000ac6d 	.word	0x0000ac6d
    c6e0:	20003ca4 	.word	0x20003ca4
    c6e4:	20003bc8 	.word	0x20003bc8
    c6e8:	0000abbd 	.word	0x0000abbd

0000c6ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    c6ec:	b580      	push	{r7, lr}
    c6ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    c6f0:	4b06      	ldr	r3, [pc, #24]	; (c70c <pvTaskIncrementMutexHeldCount+0x20>)
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	2b00      	cmp	r3, #0
    c6f6:	d004      	beq.n	c702 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    c6f8:	4b04      	ldr	r3, [pc, #16]	; (c70c <pvTaskIncrementMutexHeldCount+0x20>)
    c6fa:	681b      	ldr	r3, [r3, #0]
    c6fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c6fe:	3201      	adds	r2, #1
    c700:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    c702:	4b02      	ldr	r3, [pc, #8]	; (c70c <pvTaskIncrementMutexHeldCount+0x20>)
    c704:	681b      	ldr	r3, [r3, #0]
	}
    c706:	0018      	movs	r0, r3
    c708:	46bd      	mov	sp, r7
    c70a:	bd80      	pop	{r7, pc}
    c70c:	20003bc4 	.word	0x20003bc4

0000c710 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c710:	b580      	push	{r7, lr}
    c712:	b084      	sub	sp, #16
    c714:	af00      	add	r7, sp, #0
    c716:	6078      	str	r0, [r7, #4]
    c718:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c71a:	4b21      	ldr	r3, [pc, #132]	; (c7a0 <prvAddCurrentTaskToDelayedList+0x90>)
    c71c:	681b      	ldr	r3, [r3, #0]
    c71e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c720:	4b20      	ldr	r3, [pc, #128]	; (c7a4 <prvAddCurrentTaskToDelayedList+0x94>)
    c722:	681b      	ldr	r3, [r3, #0]
    c724:	3304      	adds	r3, #4
    c726:	0018      	movs	r0, r3
    c728:	4b1f      	ldr	r3, [pc, #124]	; (c7a8 <prvAddCurrentTaskToDelayedList+0x98>)
    c72a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c72c:	687b      	ldr	r3, [r7, #4]
    c72e:	3301      	adds	r3, #1
    c730:	d10b      	bne.n	c74a <prvAddCurrentTaskToDelayedList+0x3a>
    c732:	683b      	ldr	r3, [r7, #0]
    c734:	2b00      	cmp	r3, #0
    c736:	d008      	beq.n	c74a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c738:	4b1a      	ldr	r3, [pc, #104]	; (c7a4 <prvAddCurrentTaskToDelayedList+0x94>)
    c73a:	681b      	ldr	r3, [r3, #0]
    c73c:	1d1a      	adds	r2, r3, #4
    c73e:	4b1b      	ldr	r3, [pc, #108]	; (c7ac <prvAddCurrentTaskToDelayedList+0x9c>)
    c740:	0011      	movs	r1, r2
    c742:	0018      	movs	r0, r3
    c744:	4b1a      	ldr	r3, [pc, #104]	; (c7b0 <prvAddCurrentTaskToDelayedList+0xa0>)
    c746:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c748:	e026      	b.n	c798 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    c74a:	68fa      	ldr	r2, [r7, #12]
    c74c:	687b      	ldr	r3, [r7, #4]
    c74e:	18d3      	adds	r3, r2, r3
    c750:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c752:	4b14      	ldr	r3, [pc, #80]	; (c7a4 <prvAddCurrentTaskToDelayedList+0x94>)
    c754:	681b      	ldr	r3, [r3, #0]
    c756:	68ba      	ldr	r2, [r7, #8]
    c758:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    c75a:	68ba      	ldr	r2, [r7, #8]
    c75c:	68fb      	ldr	r3, [r7, #12]
    c75e:	429a      	cmp	r2, r3
    c760:	d209      	bcs.n	c776 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c762:	4b14      	ldr	r3, [pc, #80]	; (c7b4 <prvAddCurrentTaskToDelayedList+0xa4>)
    c764:	681a      	ldr	r2, [r3, #0]
    c766:	4b0f      	ldr	r3, [pc, #60]	; (c7a4 <prvAddCurrentTaskToDelayedList+0x94>)
    c768:	681b      	ldr	r3, [r3, #0]
    c76a:	3304      	adds	r3, #4
    c76c:	0019      	movs	r1, r3
    c76e:	0010      	movs	r0, r2
    c770:	4b11      	ldr	r3, [pc, #68]	; (c7b8 <prvAddCurrentTaskToDelayedList+0xa8>)
    c772:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c774:	e010      	b.n	c798 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c776:	4b11      	ldr	r3, [pc, #68]	; (c7bc <prvAddCurrentTaskToDelayedList+0xac>)
    c778:	681a      	ldr	r2, [r3, #0]
    c77a:	4b0a      	ldr	r3, [pc, #40]	; (c7a4 <prvAddCurrentTaskToDelayedList+0x94>)
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	3304      	adds	r3, #4
    c780:	0019      	movs	r1, r3
    c782:	0010      	movs	r0, r2
    c784:	4b0c      	ldr	r3, [pc, #48]	; (c7b8 <prvAddCurrentTaskToDelayedList+0xa8>)
    c786:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    c788:	4b0d      	ldr	r3, [pc, #52]	; (c7c0 <prvAddCurrentTaskToDelayedList+0xb0>)
    c78a:	681b      	ldr	r3, [r3, #0]
    c78c:	68ba      	ldr	r2, [r7, #8]
    c78e:	429a      	cmp	r2, r3
    c790:	d202      	bcs.n	c798 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    c792:	4b0b      	ldr	r3, [pc, #44]	; (c7c0 <prvAddCurrentTaskToDelayedList+0xb0>)
    c794:	68ba      	ldr	r2, [r7, #8]
    c796:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c798:	46c0      	nop			; (mov r8, r8)
    c79a:	46bd      	mov	sp, r7
    c79c:	b004      	add	sp, #16
    c79e:	bd80      	pop	{r7, pc}
    c7a0:	20003ca0 	.word	0x20003ca0
    c7a4:	20003bc4 	.word	0x20003bc4
    c7a8:	0000ac6d 	.word	0x0000ac6d
    c7ac:	20003c88 	.word	0x20003c88
    c7b0:	0000abbd 	.word	0x0000abbd
    c7b4:	20003c58 	.word	0x20003c58
    c7b8:	0000ac01 	.word	0x0000ac01
    c7bc:	20003c54 	.word	0x20003c54
    c7c0:	20003cbc 	.word	0x20003cbc

0000c7c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    c7c4:	b590      	push	{r4, r7, lr}
    c7c6:	b085      	sub	sp, #20
    c7c8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    c7ca:	2300      	movs	r3, #0
    c7cc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    c7ce:	4b0e      	ldr	r3, [pc, #56]	; (c808 <xTimerCreateTimerTask+0x44>)
    c7d0:	4798      	blx	r3

	if( xTimerQueue != NULL )
    c7d2:	4b0e      	ldr	r3, [pc, #56]	; (c80c <xTimerCreateTimerTask+0x48>)
    c7d4:	681b      	ldr	r3, [r3, #0]
    c7d6:	2b00      	cmp	r3, #0
    c7d8:	d00b      	beq.n	c7f2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    c7da:	490d      	ldr	r1, [pc, #52]	; (c810 <xTimerCreateTimerTask+0x4c>)
    c7dc:	480d      	ldr	r0, [pc, #52]	; (c814 <xTimerCreateTimerTask+0x50>)
    c7de:	4b0e      	ldr	r3, [pc, #56]	; (c818 <xTimerCreateTimerTask+0x54>)
    c7e0:	9301      	str	r3, [sp, #4]
    c7e2:	2302      	movs	r3, #2
    c7e4:	9300      	str	r3, [sp, #0]
    c7e6:	2300      	movs	r3, #0
    c7e8:	2250      	movs	r2, #80	; 0x50
    c7ea:	4c0c      	ldr	r4, [pc, #48]	; (c81c <xTimerCreateTimerTask+0x58>)
    c7ec:	47a0      	blx	r4
    c7ee:	0003      	movs	r3, r0
    c7f0:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    c7f2:	687b      	ldr	r3, [r7, #4]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d101      	bne.n	c7fc <xTimerCreateTimerTask+0x38>
    c7f8:	b672      	cpsid	i
    c7fa:	e7fe      	b.n	c7fa <xTimerCreateTimerTask+0x36>
	return xReturn;
    c7fc:	687b      	ldr	r3, [r7, #4]
}
    c7fe:	0018      	movs	r0, r3
    c800:	46bd      	mov	sp, r7
    c802:	b003      	add	sp, #12
    c804:	bd90      	pop	{r4, r7, pc}
    c806:	46c0      	nop			; (mov r8, r8)
    c808:	0000cd05 	.word	0x0000cd05
    c80c:	20003cf8 	.word	0x20003cf8
    c810:	00013060 	.word	0x00013060
    c814:	0000c945 	.word	0x0000c945
    c818:	20003cfc 	.word	0x20003cfc
    c81c:	0000b9d1 	.word	0x0000b9d1

0000c820 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    c820:	b590      	push	{r4, r7, lr}
    c822:	b089      	sub	sp, #36	; 0x24
    c824:	af00      	add	r7, sp, #0
    c826:	60f8      	str	r0, [r7, #12]
    c828:	60b9      	str	r1, [r7, #8]
    c82a:	607a      	str	r2, [r7, #4]
    c82c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    c82e:	2300      	movs	r3, #0
    c830:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    c832:	68fb      	ldr	r3, [r7, #12]
    c834:	2b00      	cmp	r3, #0
    c836:	d101      	bne.n	c83c <xTimerGenericCommand+0x1c>
    c838:	b672      	cpsid	i
    c83a:	e7fe      	b.n	c83a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    c83c:	4b1e      	ldr	r3, [pc, #120]	; (c8b8 <xTimerGenericCommand+0x98>)
    c83e:	681b      	ldr	r3, [r3, #0]
    c840:	2b00      	cmp	r3, #0
    c842:	d033      	beq.n	c8ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    c844:	2310      	movs	r3, #16
    c846:	18fb      	adds	r3, r7, r3
    c848:	68ba      	ldr	r2, [r7, #8]
    c84a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    c84c:	2310      	movs	r3, #16
    c84e:	18fb      	adds	r3, r7, r3
    c850:	687a      	ldr	r2, [r7, #4]
    c852:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    c854:	2310      	movs	r3, #16
    c856:	18fb      	adds	r3, r7, r3
    c858:	68fa      	ldr	r2, [r7, #12]
    c85a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    c85c:	68bb      	ldr	r3, [r7, #8]
    c85e:	2b05      	cmp	r3, #5
    c860:	dc1a      	bgt.n	c898 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    c862:	4b16      	ldr	r3, [pc, #88]	; (c8bc <xTimerGenericCommand+0x9c>)
    c864:	4798      	blx	r3
    c866:	1e03      	subs	r3, r0, #0
    c868:	2b02      	cmp	r3, #2
    c86a:	d10a      	bne.n	c882 <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    c86c:	4b12      	ldr	r3, [pc, #72]	; (c8b8 <xTimerGenericCommand+0x98>)
    c86e:	6818      	ldr	r0, [r3, #0]
    c870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    c872:	2310      	movs	r3, #16
    c874:	18f9      	adds	r1, r7, r3
    c876:	2300      	movs	r3, #0
    c878:	4c11      	ldr	r4, [pc, #68]	; (c8c0 <xTimerGenericCommand+0xa0>)
    c87a:	47a0      	blx	r4
    c87c:	0003      	movs	r3, r0
    c87e:	61fb      	str	r3, [r7, #28]
    c880:	e014      	b.n	c8ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    c882:	4b0d      	ldr	r3, [pc, #52]	; (c8b8 <xTimerGenericCommand+0x98>)
    c884:	6818      	ldr	r0, [r3, #0]
    c886:	2310      	movs	r3, #16
    c888:	18f9      	adds	r1, r7, r3
    c88a:	2300      	movs	r3, #0
    c88c:	2200      	movs	r2, #0
    c88e:	4c0c      	ldr	r4, [pc, #48]	; (c8c0 <xTimerGenericCommand+0xa0>)
    c890:	47a0      	blx	r4
    c892:	0003      	movs	r3, r0
    c894:	61fb      	str	r3, [r7, #28]
    c896:	e009      	b.n	c8ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    c898:	4b07      	ldr	r3, [pc, #28]	; (c8b8 <xTimerGenericCommand+0x98>)
    c89a:	6818      	ldr	r0, [r3, #0]
    c89c:	683a      	ldr	r2, [r7, #0]
    c89e:	2310      	movs	r3, #16
    c8a0:	18f9      	adds	r1, r7, r3
    c8a2:	2300      	movs	r3, #0
    c8a4:	4c07      	ldr	r4, [pc, #28]	; (c8c4 <xTimerGenericCommand+0xa4>)
    c8a6:	47a0      	blx	r4
    c8a8:	0003      	movs	r3, r0
    c8aa:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    c8ac:	69fb      	ldr	r3, [r7, #28]
}
    c8ae:	0018      	movs	r0, r3
    c8b0:	46bd      	mov	sp, r7
    c8b2:	b009      	add	sp, #36	; 0x24
    c8b4:	bd90      	pop	{r4, r7, pc}
    c8b6:	46c0      	nop			; (mov r8, r8)
    c8b8:	20003cf8 	.word	0x20003cf8
    c8bc:	0000c531 	.word	0x0000c531
    c8c0:	0000b125 	.word	0x0000b125
    c8c4:	0000b305 	.word	0x0000b305

0000c8c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    c8c8:	b590      	push	{r4, r7, lr}
    c8ca:	b087      	sub	sp, #28
    c8cc:	af02      	add	r7, sp, #8
    c8ce:	6078      	str	r0, [r7, #4]
    c8d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    c8d2:	4b18      	ldr	r3, [pc, #96]	; (c934 <prvProcessExpiredTimer+0x6c>)
    c8d4:	681b      	ldr	r3, [r3, #0]
    c8d6:	68db      	ldr	r3, [r3, #12]
    c8d8:	68db      	ldr	r3, [r3, #12]
    c8da:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    c8dc:	68fb      	ldr	r3, [r7, #12]
    c8de:	3304      	adds	r3, #4
    c8e0:	0018      	movs	r0, r3
    c8e2:	4b15      	ldr	r3, [pc, #84]	; (c938 <prvProcessExpiredTimer+0x70>)
    c8e4:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    c8e6:	68fb      	ldr	r3, [r7, #12]
    c8e8:	69db      	ldr	r3, [r3, #28]
    c8ea:	2b01      	cmp	r3, #1
    c8ec:	d119      	bne.n	c922 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    c8ee:	68fb      	ldr	r3, [r7, #12]
    c8f0:	699a      	ldr	r2, [r3, #24]
    c8f2:	687b      	ldr	r3, [r7, #4]
    c8f4:	18d1      	adds	r1, r2, r3
    c8f6:	687b      	ldr	r3, [r7, #4]
    c8f8:	683a      	ldr	r2, [r7, #0]
    c8fa:	68f8      	ldr	r0, [r7, #12]
    c8fc:	4c0f      	ldr	r4, [pc, #60]	; (c93c <prvProcessExpiredTimer+0x74>)
    c8fe:	47a0      	blx	r4
    c900:	1e03      	subs	r3, r0, #0
    c902:	d00e      	beq.n	c922 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    c904:	687a      	ldr	r2, [r7, #4]
    c906:	68f8      	ldr	r0, [r7, #12]
    c908:	2300      	movs	r3, #0
    c90a:	9300      	str	r3, [sp, #0]
    c90c:	2300      	movs	r3, #0
    c90e:	2100      	movs	r1, #0
    c910:	4c0b      	ldr	r4, [pc, #44]	; (c940 <prvProcessExpiredTimer+0x78>)
    c912:	47a0      	blx	r4
    c914:	0003      	movs	r3, r0
    c916:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    c918:	68bb      	ldr	r3, [r7, #8]
    c91a:	2b00      	cmp	r3, #0
    c91c:	d101      	bne.n	c922 <prvProcessExpiredTimer+0x5a>
    c91e:	b672      	cpsid	i
    c920:	e7fe      	b.n	c920 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    c922:	68fb      	ldr	r3, [r7, #12]
    c924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c926:	68fa      	ldr	r2, [r7, #12]
    c928:	0010      	movs	r0, r2
    c92a:	4798      	blx	r3
}
    c92c:	46c0      	nop			; (mov r8, r8)
    c92e:	46bd      	mov	sp, r7
    c930:	b005      	add	sp, #20
    c932:	bd90      	pop	{r4, r7, pc}
    c934:	20003cf0 	.word	0x20003cf0
    c938:	0000ac6d 	.word	0x0000ac6d
    c93c:	0000caa5 	.word	0x0000caa5
    c940:	0000c821 	.word	0x0000c821

0000c944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    c944:	b580      	push	{r7, lr}
    c946:	b084      	sub	sp, #16
    c948:	af00      	add	r7, sp, #0
    c94a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    c94c:	2308      	movs	r3, #8
    c94e:	18fb      	adds	r3, r7, r3
    c950:	0018      	movs	r0, r3
    c952:	4b06      	ldr	r3, [pc, #24]	; (c96c <prvTimerTask+0x28>)
    c954:	4798      	blx	r3
    c956:	0003      	movs	r3, r0
    c958:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    c95a:	68ba      	ldr	r2, [r7, #8]
    c95c:	68fb      	ldr	r3, [r7, #12]
    c95e:	0011      	movs	r1, r2
    c960:	0018      	movs	r0, r3
    c962:	4b03      	ldr	r3, [pc, #12]	; (c970 <prvTimerTask+0x2c>)
    c964:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    c966:	4b03      	ldr	r3, [pc, #12]	; (c974 <prvTimerTask+0x30>)
    c968:	4798      	blx	r3
	}
    c96a:	e7ef      	b.n	c94c <prvTimerTask+0x8>
    c96c:	0000ca1d 	.word	0x0000ca1d
    c970:	0000c979 	.word	0x0000c979
    c974:	0000cb2d 	.word	0x0000cb2d

0000c978 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    c978:	b580      	push	{r7, lr}
    c97a:	b084      	sub	sp, #16
    c97c:	af00      	add	r7, sp, #0
    c97e:	6078      	str	r0, [r7, #4]
    c980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    c982:	4b1e      	ldr	r3, [pc, #120]	; (c9fc <prvProcessTimerOrBlockTask+0x84>)
    c984:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    c986:	2308      	movs	r3, #8
    c988:	18fb      	adds	r3, r7, r3
    c98a:	0018      	movs	r0, r3
    c98c:	4b1c      	ldr	r3, [pc, #112]	; (ca00 <prvProcessTimerOrBlockTask+0x88>)
    c98e:	4798      	blx	r3
    c990:	0003      	movs	r3, r0
    c992:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    c994:	68bb      	ldr	r3, [r7, #8]
    c996:	2b00      	cmp	r3, #0
    c998:	d129      	bne.n	c9ee <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    c99a:	683b      	ldr	r3, [r7, #0]
    c99c:	2b00      	cmp	r3, #0
    c99e:	d10c      	bne.n	c9ba <prvProcessTimerOrBlockTask+0x42>
    c9a0:	687a      	ldr	r2, [r7, #4]
    c9a2:	68fb      	ldr	r3, [r7, #12]
    c9a4:	429a      	cmp	r2, r3
    c9a6:	d808      	bhi.n	c9ba <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    c9a8:	4b16      	ldr	r3, [pc, #88]	; (ca04 <prvProcessTimerOrBlockTask+0x8c>)
    c9aa:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    c9ac:	68fa      	ldr	r2, [r7, #12]
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	0011      	movs	r1, r2
    c9b2:	0018      	movs	r0, r3
    c9b4:	4b14      	ldr	r3, [pc, #80]	; (ca08 <prvProcessTimerOrBlockTask+0x90>)
    c9b6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    c9b8:	e01b      	b.n	c9f2 <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    c9ba:	683b      	ldr	r3, [r7, #0]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d006      	beq.n	c9ce <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    c9c0:	4b12      	ldr	r3, [pc, #72]	; (ca0c <prvProcessTimerOrBlockTask+0x94>)
    c9c2:	681b      	ldr	r3, [r3, #0]
    c9c4:	681b      	ldr	r3, [r3, #0]
    c9c6:	425a      	negs	r2, r3
    c9c8:	4153      	adcs	r3, r2
    c9ca:	b2db      	uxtb	r3, r3
    c9cc:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    c9ce:	4b10      	ldr	r3, [pc, #64]	; (ca10 <prvProcessTimerOrBlockTask+0x98>)
    c9d0:	6818      	ldr	r0, [r3, #0]
    c9d2:	687a      	ldr	r2, [r7, #4]
    c9d4:	68fb      	ldr	r3, [r7, #12]
    c9d6:	1ad3      	subs	r3, r2, r3
    c9d8:	683a      	ldr	r2, [r7, #0]
    c9da:	0019      	movs	r1, r3
    c9dc:	4b0d      	ldr	r3, [pc, #52]	; (ca14 <prvProcessTimerOrBlockTask+0x9c>)
    c9de:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    c9e0:	4b08      	ldr	r3, [pc, #32]	; (ca04 <prvProcessTimerOrBlockTask+0x8c>)
    c9e2:	4798      	blx	r3
    c9e4:	1e03      	subs	r3, r0, #0
    c9e6:	d104      	bne.n	c9f2 <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    c9e8:	4b0b      	ldr	r3, [pc, #44]	; (ca18 <prvProcessTimerOrBlockTask+0xa0>)
    c9ea:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    c9ec:	e001      	b.n	c9f2 <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    c9ee:	4b05      	ldr	r3, [pc, #20]	; (ca04 <prvProcessTimerOrBlockTask+0x8c>)
    c9f0:	4798      	blx	r3
		}
	}
}
    c9f2:	46c0      	nop			; (mov r8, r8)
    c9f4:	46bd      	mov	sp, r7
    c9f6:	b004      	add	sp, #16
    c9f8:	bd80      	pop	{r7, pc}
    c9fa:	46c0      	nop			; (mov r8, r8)
    c9fc:	0000bd95 	.word	0x0000bd95
    ca00:	0000ca5d 	.word	0x0000ca5d
    ca04:	0000bdad 	.word	0x0000bdad
    ca08:	0000c8c9 	.word	0x0000c8c9
    ca0c:	20003cf4 	.word	0x20003cf4
    ca10:	20003cf8 	.word	0x20003cf8
    ca14:	0000b8b5 	.word	0x0000b8b5
    ca18:	0000adc9 	.word	0x0000adc9

0000ca1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    ca1c:	b580      	push	{r7, lr}
    ca1e:	b084      	sub	sp, #16
    ca20:	af00      	add	r7, sp, #0
    ca22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    ca24:	4b0c      	ldr	r3, [pc, #48]	; (ca58 <prvGetNextExpireTime+0x3c>)
    ca26:	681b      	ldr	r3, [r3, #0]
    ca28:	681b      	ldr	r3, [r3, #0]
    ca2a:	425a      	negs	r2, r3
    ca2c:	4153      	adcs	r3, r2
    ca2e:	b2db      	uxtb	r3, r3
    ca30:	001a      	movs	r2, r3
    ca32:	687b      	ldr	r3, [r7, #4]
    ca34:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    ca36:	687b      	ldr	r3, [r7, #4]
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d105      	bne.n	ca4a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    ca3e:	4b06      	ldr	r3, [pc, #24]	; (ca58 <prvGetNextExpireTime+0x3c>)
    ca40:	681b      	ldr	r3, [r3, #0]
    ca42:	68db      	ldr	r3, [r3, #12]
    ca44:	681b      	ldr	r3, [r3, #0]
    ca46:	60fb      	str	r3, [r7, #12]
    ca48:	e001      	b.n	ca4e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    ca4a:	2300      	movs	r3, #0
    ca4c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    ca4e:	68fb      	ldr	r3, [r7, #12]
}
    ca50:	0018      	movs	r0, r3
    ca52:	46bd      	mov	sp, r7
    ca54:	b004      	add	sp, #16
    ca56:	bd80      	pop	{r7, pc}
    ca58:	20003cf0 	.word	0x20003cf0

0000ca5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    ca5c:	b580      	push	{r7, lr}
    ca5e:	b084      	sub	sp, #16
    ca60:	af00      	add	r7, sp, #0
    ca62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    ca64:	4b0c      	ldr	r3, [pc, #48]	; (ca98 <prvSampleTimeNow+0x3c>)
    ca66:	4798      	blx	r3
    ca68:	0003      	movs	r3, r0
    ca6a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    ca6c:	4b0b      	ldr	r3, [pc, #44]	; (ca9c <prvSampleTimeNow+0x40>)
    ca6e:	681b      	ldr	r3, [r3, #0]
    ca70:	68fa      	ldr	r2, [r7, #12]
    ca72:	429a      	cmp	r2, r3
    ca74:	d205      	bcs.n	ca82 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    ca76:	4b0a      	ldr	r3, [pc, #40]	; (caa0 <prvSampleTimeNow+0x44>)
    ca78:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    ca7a:	687b      	ldr	r3, [r7, #4]
    ca7c:	2201      	movs	r2, #1
    ca7e:	601a      	str	r2, [r3, #0]
    ca80:	e002      	b.n	ca88 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    ca82:	687b      	ldr	r3, [r7, #4]
    ca84:	2200      	movs	r2, #0
    ca86:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    ca88:	4b04      	ldr	r3, [pc, #16]	; (ca9c <prvSampleTimeNow+0x40>)
    ca8a:	68fa      	ldr	r2, [r7, #12]
    ca8c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    ca8e:	68fb      	ldr	r3, [r7, #12]
}
    ca90:	0018      	movs	r0, r3
    ca92:	46bd      	mov	sp, r7
    ca94:	b004      	add	sp, #16
    ca96:	bd80      	pop	{r7, pc}
    ca98:	0000bee1 	.word	0x0000bee1
    ca9c:	20003d00 	.word	0x20003d00
    caa0:	0000cc45 	.word	0x0000cc45

0000caa4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    caa4:	b580      	push	{r7, lr}
    caa6:	b086      	sub	sp, #24
    caa8:	af00      	add	r7, sp, #0
    caaa:	60f8      	str	r0, [r7, #12]
    caac:	60b9      	str	r1, [r7, #8]
    caae:	607a      	str	r2, [r7, #4]
    cab0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    cab2:	2300      	movs	r3, #0
    cab4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    cab6:	68fb      	ldr	r3, [r7, #12]
    cab8:	68ba      	ldr	r2, [r7, #8]
    caba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    cabc:	68fb      	ldr	r3, [r7, #12]
    cabe:	68fa      	ldr	r2, [r7, #12]
    cac0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    cac2:	68ba      	ldr	r2, [r7, #8]
    cac4:	687b      	ldr	r3, [r7, #4]
    cac6:	429a      	cmp	r2, r3
    cac8:	d812      	bhi.n	caf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    caca:	687a      	ldr	r2, [r7, #4]
    cacc:	683b      	ldr	r3, [r7, #0]
    cace:	1ad2      	subs	r2, r2, r3
    cad0:	68fb      	ldr	r3, [r7, #12]
    cad2:	699b      	ldr	r3, [r3, #24]
    cad4:	429a      	cmp	r2, r3
    cad6:	d302      	bcc.n	cade <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    cad8:	2301      	movs	r3, #1
    cada:	617b      	str	r3, [r7, #20]
    cadc:	e01b      	b.n	cb16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    cade:	4b10      	ldr	r3, [pc, #64]	; (cb20 <prvInsertTimerInActiveList+0x7c>)
    cae0:	681a      	ldr	r2, [r3, #0]
    cae2:	68fb      	ldr	r3, [r7, #12]
    cae4:	3304      	adds	r3, #4
    cae6:	0019      	movs	r1, r3
    cae8:	0010      	movs	r0, r2
    caea:	4b0e      	ldr	r3, [pc, #56]	; (cb24 <prvInsertTimerInActiveList+0x80>)
    caec:	4798      	blx	r3
    caee:	e012      	b.n	cb16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    caf0:	687a      	ldr	r2, [r7, #4]
    caf2:	683b      	ldr	r3, [r7, #0]
    caf4:	429a      	cmp	r2, r3
    caf6:	d206      	bcs.n	cb06 <prvInsertTimerInActiveList+0x62>
    caf8:	68ba      	ldr	r2, [r7, #8]
    cafa:	683b      	ldr	r3, [r7, #0]
    cafc:	429a      	cmp	r2, r3
    cafe:	d302      	bcc.n	cb06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    cb00:	2301      	movs	r3, #1
    cb02:	617b      	str	r3, [r7, #20]
    cb04:	e007      	b.n	cb16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cb06:	4b08      	ldr	r3, [pc, #32]	; (cb28 <prvInsertTimerInActiveList+0x84>)
    cb08:	681a      	ldr	r2, [r3, #0]
    cb0a:	68fb      	ldr	r3, [r7, #12]
    cb0c:	3304      	adds	r3, #4
    cb0e:	0019      	movs	r1, r3
    cb10:	0010      	movs	r0, r2
    cb12:	4b04      	ldr	r3, [pc, #16]	; (cb24 <prvInsertTimerInActiveList+0x80>)
    cb14:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    cb16:	697b      	ldr	r3, [r7, #20]
}
    cb18:	0018      	movs	r0, r3
    cb1a:	46bd      	mov	sp, r7
    cb1c:	b006      	add	sp, #24
    cb1e:	bd80      	pop	{r7, pc}
    cb20:	20003cf4 	.word	0x20003cf4
    cb24:	0000ac01 	.word	0x0000ac01
    cb28:	20003cf0 	.word	0x20003cf0

0000cb2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    cb2c:	b590      	push	{r4, r7, lr}
    cb2e:	b08b      	sub	sp, #44	; 0x2c
    cb30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    cb32:	e068      	b.n	cc06 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    cb34:	2308      	movs	r3, #8
    cb36:	18fb      	adds	r3, r7, r3
    cb38:	681b      	ldr	r3, [r3, #0]
    cb3a:	2b00      	cmp	r3, #0
    cb3c:	db63      	blt.n	cc06 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    cb3e:	2308      	movs	r3, #8
    cb40:	18fb      	adds	r3, r7, r3
    cb42:	689b      	ldr	r3, [r3, #8]
    cb44:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    cb46:	69fb      	ldr	r3, [r7, #28]
    cb48:	695b      	ldr	r3, [r3, #20]
    cb4a:	2b00      	cmp	r3, #0
    cb4c:	d004      	beq.n	cb58 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cb4e:	69fb      	ldr	r3, [r7, #28]
    cb50:	3304      	adds	r3, #4
    cb52:	0018      	movs	r0, r3
    cb54:	4b33      	ldr	r3, [pc, #204]	; (cc24 <prvProcessReceivedCommands+0xf8>)
    cb56:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    cb58:	1d3b      	adds	r3, r7, #4
    cb5a:	0018      	movs	r0, r3
    cb5c:	4b32      	ldr	r3, [pc, #200]	; (cc28 <prvProcessReceivedCommands+0xfc>)
    cb5e:	4798      	blx	r3
    cb60:	0003      	movs	r3, r0
    cb62:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    cb64:	2308      	movs	r3, #8
    cb66:	18fb      	adds	r3, r7, r3
    cb68:	681b      	ldr	r3, [r3, #0]
    cb6a:	2b09      	cmp	r3, #9
    cb6c:	d84a      	bhi.n	cc04 <prvProcessReceivedCommands+0xd8>
    cb6e:	009a      	lsls	r2, r3, #2
    cb70:	4b2e      	ldr	r3, [pc, #184]	; (cc2c <prvProcessReceivedCommands+0x100>)
    cb72:	18d3      	adds	r3, r2, r3
    cb74:	681b      	ldr	r3, [r3, #0]
    cb76:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    cb78:	2308      	movs	r3, #8
    cb7a:	18fb      	adds	r3, r7, r3
    cb7c:	685a      	ldr	r2, [r3, #4]
    cb7e:	69fb      	ldr	r3, [r7, #28]
    cb80:	699b      	ldr	r3, [r3, #24]
    cb82:	18d1      	adds	r1, r2, r3
    cb84:	2308      	movs	r3, #8
    cb86:	18fb      	adds	r3, r7, r3
    cb88:	685b      	ldr	r3, [r3, #4]
    cb8a:	69ba      	ldr	r2, [r7, #24]
    cb8c:	69f8      	ldr	r0, [r7, #28]
    cb8e:	4c28      	ldr	r4, [pc, #160]	; (cc30 <prvProcessReceivedCommands+0x104>)
    cb90:	47a0      	blx	r4
    cb92:	1e03      	subs	r3, r0, #0
    cb94:	d037      	beq.n	cc06 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cb96:	69fb      	ldr	r3, [r7, #28]
    cb98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb9a:	69fa      	ldr	r2, [r7, #28]
    cb9c:	0010      	movs	r0, r2
    cb9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cba0:	69fb      	ldr	r3, [r7, #28]
    cba2:	69db      	ldr	r3, [r3, #28]
    cba4:	2b01      	cmp	r3, #1
    cba6:	d12e      	bne.n	cc06 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    cba8:	2308      	movs	r3, #8
    cbaa:	18fb      	adds	r3, r7, r3
    cbac:	685a      	ldr	r2, [r3, #4]
    cbae:	69fb      	ldr	r3, [r7, #28]
    cbb0:	699b      	ldr	r3, [r3, #24]
    cbb2:	18d2      	adds	r2, r2, r3
    cbb4:	69f8      	ldr	r0, [r7, #28]
    cbb6:	2300      	movs	r3, #0
    cbb8:	9300      	str	r3, [sp, #0]
    cbba:	2300      	movs	r3, #0
    cbbc:	2100      	movs	r1, #0
    cbbe:	4c1d      	ldr	r4, [pc, #116]	; (cc34 <prvProcessReceivedCommands+0x108>)
    cbc0:	47a0      	blx	r4
    cbc2:	0003      	movs	r3, r0
    cbc4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    cbc6:	697b      	ldr	r3, [r7, #20]
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d11c      	bne.n	cc06 <prvProcessReceivedCommands+0xda>
    cbcc:	b672      	cpsid	i
    cbce:	e7fe      	b.n	cbce <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    cbd0:	2308      	movs	r3, #8
    cbd2:	18fb      	adds	r3, r7, r3
    cbd4:	685a      	ldr	r2, [r3, #4]
    cbd6:	69fb      	ldr	r3, [r7, #28]
    cbd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    cbda:	69fb      	ldr	r3, [r7, #28]
    cbdc:	699b      	ldr	r3, [r3, #24]
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d101      	bne.n	cbe6 <prvProcessReceivedCommands+0xba>
    cbe2:	b672      	cpsid	i
    cbe4:	e7fe      	b.n	cbe4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    cbe6:	69fb      	ldr	r3, [r7, #28]
    cbe8:	699a      	ldr	r2, [r3, #24]
    cbea:	69bb      	ldr	r3, [r7, #24]
    cbec:	18d1      	adds	r1, r2, r3
    cbee:	69bb      	ldr	r3, [r7, #24]
    cbf0:	69ba      	ldr	r2, [r7, #24]
    cbf2:	69f8      	ldr	r0, [r7, #28]
    cbf4:	4c0e      	ldr	r4, [pc, #56]	; (cc30 <prvProcessReceivedCommands+0x104>)
    cbf6:	47a0      	blx	r4
					break;
    cbf8:	e005      	b.n	cc06 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    cbfa:	69fb      	ldr	r3, [r7, #28]
    cbfc:	0018      	movs	r0, r3
    cbfe:	4b0e      	ldr	r3, [pc, #56]	; (cc38 <prvProcessReceivedCommands+0x10c>)
    cc00:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    cc02:	e000      	b.n	cc06 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    cc04:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    cc06:	4b0d      	ldr	r3, [pc, #52]	; (cc3c <prvProcessReceivedCommands+0x110>)
    cc08:	6818      	ldr	r0, [r3, #0]
    cc0a:	2308      	movs	r3, #8
    cc0c:	18f9      	adds	r1, r7, r3
    cc0e:	2300      	movs	r3, #0
    cc10:	2200      	movs	r2, #0
    cc12:	4c0b      	ldr	r4, [pc, #44]	; (cc40 <prvProcessReceivedCommands+0x114>)
    cc14:	47a0      	blx	r4
    cc16:	1e03      	subs	r3, r0, #0
    cc18:	d18c      	bne.n	cb34 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    cc1a:	46c0      	nop			; (mov r8, r8)
    cc1c:	46bd      	mov	sp, r7
    cc1e:	b009      	add	sp, #36	; 0x24
    cc20:	bd90      	pop	{r4, r7, pc}
    cc22:	46c0      	nop			; (mov r8, r8)
    cc24:	0000ac6d 	.word	0x0000ac6d
    cc28:	0000ca5d 	.word	0x0000ca5d
    cc2c:	00013068 	.word	0x00013068
    cc30:	0000caa5 	.word	0x0000caa5
    cc34:	0000c821 	.word	0x0000c821
    cc38:	0000af91 	.word	0x0000af91
    cc3c:	20003cf8 	.word	0x20003cf8
    cc40:	0000b425 	.word	0x0000b425

0000cc44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    cc44:	b590      	push	{r4, r7, lr}
    cc46:	b089      	sub	sp, #36	; 0x24
    cc48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    cc4a:	e03e      	b.n	ccca <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    cc4c:	4b28      	ldr	r3, [pc, #160]	; (ccf0 <prvSwitchTimerLists+0xac>)
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	68db      	ldr	r3, [r3, #12]
    cc52:	681b      	ldr	r3, [r3, #0]
    cc54:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    cc56:	4b26      	ldr	r3, [pc, #152]	; (ccf0 <prvSwitchTimerLists+0xac>)
    cc58:	681b      	ldr	r3, [r3, #0]
    cc5a:	68db      	ldr	r3, [r3, #12]
    cc5c:	68db      	ldr	r3, [r3, #12]
    cc5e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cc60:	693b      	ldr	r3, [r7, #16]
    cc62:	3304      	adds	r3, #4
    cc64:	0018      	movs	r0, r3
    cc66:	4b23      	ldr	r3, [pc, #140]	; (ccf4 <prvSwitchTimerLists+0xb0>)
    cc68:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cc6a:	693b      	ldr	r3, [r7, #16]
    cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cc6e:	693a      	ldr	r2, [r7, #16]
    cc70:	0010      	movs	r0, r2
    cc72:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cc74:	693b      	ldr	r3, [r7, #16]
    cc76:	69db      	ldr	r3, [r3, #28]
    cc78:	2b01      	cmp	r3, #1
    cc7a:	d126      	bne.n	ccca <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    cc7c:	693b      	ldr	r3, [r7, #16]
    cc7e:	699a      	ldr	r2, [r3, #24]
    cc80:	697b      	ldr	r3, [r7, #20]
    cc82:	18d3      	adds	r3, r2, r3
    cc84:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    cc86:	68fa      	ldr	r2, [r7, #12]
    cc88:	697b      	ldr	r3, [r7, #20]
    cc8a:	429a      	cmp	r2, r3
    cc8c:	d90e      	bls.n	ccac <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    cc8e:	693b      	ldr	r3, [r7, #16]
    cc90:	68fa      	ldr	r2, [r7, #12]
    cc92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    cc94:	693b      	ldr	r3, [r7, #16]
    cc96:	693a      	ldr	r2, [r7, #16]
    cc98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cc9a:	4b15      	ldr	r3, [pc, #84]	; (ccf0 <prvSwitchTimerLists+0xac>)
    cc9c:	681a      	ldr	r2, [r3, #0]
    cc9e:	693b      	ldr	r3, [r7, #16]
    cca0:	3304      	adds	r3, #4
    cca2:	0019      	movs	r1, r3
    cca4:	0010      	movs	r0, r2
    cca6:	4b14      	ldr	r3, [pc, #80]	; (ccf8 <prvSwitchTimerLists+0xb4>)
    cca8:	4798      	blx	r3
    ccaa:	e00e      	b.n	ccca <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    ccac:	697a      	ldr	r2, [r7, #20]
    ccae:	6938      	ldr	r0, [r7, #16]
    ccb0:	2300      	movs	r3, #0
    ccb2:	9300      	str	r3, [sp, #0]
    ccb4:	2300      	movs	r3, #0
    ccb6:	2100      	movs	r1, #0
    ccb8:	4c10      	ldr	r4, [pc, #64]	; (ccfc <prvSwitchTimerLists+0xb8>)
    ccba:	47a0      	blx	r4
    ccbc:	0003      	movs	r3, r0
    ccbe:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    ccc0:	68bb      	ldr	r3, [r7, #8]
    ccc2:	2b00      	cmp	r3, #0
    ccc4:	d101      	bne.n	ccca <prvSwitchTimerLists+0x86>
    ccc6:	b672      	cpsid	i
    ccc8:	e7fe      	b.n	ccc8 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ccca:	4b09      	ldr	r3, [pc, #36]	; (ccf0 <prvSwitchTimerLists+0xac>)
    cccc:	681b      	ldr	r3, [r3, #0]
    ccce:	681b      	ldr	r3, [r3, #0]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d1bb      	bne.n	cc4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    ccd4:	4b06      	ldr	r3, [pc, #24]	; (ccf0 <prvSwitchTimerLists+0xac>)
    ccd6:	681b      	ldr	r3, [r3, #0]
    ccd8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    ccda:	4b09      	ldr	r3, [pc, #36]	; (cd00 <prvSwitchTimerLists+0xbc>)
    ccdc:	681a      	ldr	r2, [r3, #0]
    ccde:	4b04      	ldr	r3, [pc, #16]	; (ccf0 <prvSwitchTimerLists+0xac>)
    cce0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    cce2:	4b07      	ldr	r3, [pc, #28]	; (cd00 <prvSwitchTimerLists+0xbc>)
    cce4:	687a      	ldr	r2, [r7, #4]
    cce6:	601a      	str	r2, [r3, #0]
}
    cce8:	46c0      	nop			; (mov r8, r8)
    ccea:	46bd      	mov	sp, r7
    ccec:	b007      	add	sp, #28
    ccee:	bd90      	pop	{r4, r7, pc}
    ccf0:	20003cf0 	.word	0x20003cf0
    ccf4:	0000ac6d 	.word	0x0000ac6d
    ccf8:	0000ac01 	.word	0x0000ac01
    ccfc:	0000c821 	.word	0x0000c821
    cd00:	20003cf4 	.word	0x20003cf4

0000cd04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    cd04:	b580      	push	{r7, lr}
    cd06:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    cd08:	4b10      	ldr	r3, [pc, #64]	; (cd4c <prvCheckForValidListAndQueue+0x48>)
    cd0a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    cd0c:	4b10      	ldr	r3, [pc, #64]	; (cd50 <prvCheckForValidListAndQueue+0x4c>)
    cd0e:	681b      	ldr	r3, [r3, #0]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d115      	bne.n	cd40 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    cd14:	4b0f      	ldr	r3, [pc, #60]	; (cd54 <prvCheckForValidListAndQueue+0x50>)
    cd16:	0018      	movs	r0, r3
    cd18:	4b0f      	ldr	r3, [pc, #60]	; (cd58 <prvCheckForValidListAndQueue+0x54>)
    cd1a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    cd1c:	4b0f      	ldr	r3, [pc, #60]	; (cd5c <prvCheckForValidListAndQueue+0x58>)
    cd1e:	0018      	movs	r0, r3
    cd20:	4b0d      	ldr	r3, [pc, #52]	; (cd58 <prvCheckForValidListAndQueue+0x54>)
    cd22:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    cd24:	4b0e      	ldr	r3, [pc, #56]	; (cd60 <prvCheckForValidListAndQueue+0x5c>)
    cd26:	4a0b      	ldr	r2, [pc, #44]	; (cd54 <prvCheckForValidListAndQueue+0x50>)
    cd28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    cd2a:	4b0e      	ldr	r3, [pc, #56]	; (cd64 <prvCheckForValidListAndQueue+0x60>)
    cd2c:	4a0b      	ldr	r2, [pc, #44]	; (cd5c <prvCheckForValidListAndQueue+0x58>)
    cd2e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    cd30:	2200      	movs	r2, #0
    cd32:	210c      	movs	r1, #12
    cd34:	2002      	movs	r0, #2
    cd36:	4b0c      	ldr	r3, [pc, #48]	; (cd68 <prvCheckForValidListAndQueue+0x64>)
    cd38:	4798      	blx	r3
    cd3a:	0002      	movs	r2, r0
    cd3c:	4b04      	ldr	r3, [pc, #16]	; (cd50 <prvCheckForValidListAndQueue+0x4c>)
    cd3e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    cd40:	4b0a      	ldr	r3, [pc, #40]	; (cd6c <prvCheckForValidListAndQueue+0x68>)
    cd42:	4798      	blx	r3
}
    cd44:	46c0      	nop			; (mov r8, r8)
    cd46:	46bd      	mov	sp, r7
    cd48:	bd80      	pop	{r7, pc}
    cd4a:	46c0      	nop			; (mov r8, r8)
    cd4c:	0000ade9 	.word	0x0000ade9
    cd50:	20003cf8 	.word	0x20003cf8
    cd54:	20003cc8 	.word	0x20003cc8
    cd58:	0000ab69 	.word	0x0000ab69
    cd5c:	20003cdc 	.word	0x20003cdc
    cd60:	20003cf0 	.word	0x20003cf0
    cd64:	20003cf4 	.word	0x20003cf4
    cd68:	0000b069 	.word	0x0000b069
    cd6c:	0000ae0d 	.word	0x0000ae0d

0000cd70 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    cd70:	b580      	push	{r7, lr}
    cd72:	b084      	sub	sp, #16
    cd74:	af00      	add	r7, sp, #0
    cd76:	0002      	movs	r2, r0
    cd78:	1dfb      	adds	r3, r7, #7
    cd7a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cd7c:	230f      	movs	r3, #15
    cd7e:	18fb      	adds	r3, r7, r3
    cd80:	1dfa      	adds	r2, r7, #7
    cd82:	7812      	ldrb	r2, [r2, #0]
    cd84:	09d2      	lsrs	r2, r2, #7
    cd86:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cd88:	230e      	movs	r3, #14
    cd8a:	18fb      	adds	r3, r7, r3
    cd8c:	1dfa      	adds	r2, r7, #7
    cd8e:	7812      	ldrb	r2, [r2, #0]
    cd90:	0952      	lsrs	r2, r2, #5
    cd92:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cd94:	4b0d      	ldr	r3, [pc, #52]	; (cdcc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cd96:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    cd98:	230f      	movs	r3, #15
    cd9a:	18fb      	adds	r3, r7, r3
    cd9c:	781b      	ldrb	r3, [r3, #0]
    cd9e:	2b00      	cmp	r3, #0
    cda0:	d10f      	bne.n	cdc2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cda2:	230f      	movs	r3, #15
    cda4:	18fb      	adds	r3, r7, r3
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	009b      	lsls	r3, r3, #2
    cdaa:	2210      	movs	r2, #16
    cdac:	4694      	mov	ip, r2
    cdae:	44bc      	add	ip, r7
    cdb0:	4463      	add	r3, ip
    cdb2:	3b08      	subs	r3, #8
    cdb4:	681a      	ldr	r2, [r3, #0]
    cdb6:	230e      	movs	r3, #14
    cdb8:	18fb      	adds	r3, r7, r3
    cdba:	781b      	ldrb	r3, [r3, #0]
    cdbc:	01db      	lsls	r3, r3, #7
    cdbe:	18d3      	adds	r3, r2, r3
    cdc0:	e000      	b.n	cdc4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    cdc2:	2300      	movs	r3, #0
	}
}
    cdc4:	0018      	movs	r0, r3
    cdc6:	46bd      	mov	sp, r7
    cdc8:	b004      	add	sp, #16
    cdca:	bd80      	pop	{r7, pc}
    cdcc:	41004400 	.word	0x41004400

0000cdd0 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    cdd0:	b580      	push	{r7, lr}
    cdd2:	b082      	sub	sp, #8
    cdd4:	af00      	add	r7, sp, #0
    cdd6:	0002      	movs	r2, r0
    cdd8:	1dfb      	adds	r3, r7, #7
    cdda:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cddc:	4b06      	ldr	r3, [pc, #24]	; (cdf8 <system_interrupt_enable+0x28>)
    cdde:	1dfa      	adds	r2, r7, #7
    cde0:	7812      	ldrb	r2, [r2, #0]
    cde2:	0011      	movs	r1, r2
    cde4:	221f      	movs	r2, #31
    cde6:	400a      	ands	r2, r1
    cde8:	2101      	movs	r1, #1
    cdea:	4091      	lsls	r1, r2
    cdec:	000a      	movs	r2, r1
    cdee:	601a      	str	r2, [r3, #0]
}
    cdf0:	46c0      	nop			; (mov r8, r8)
    cdf2:	46bd      	mov	sp, r7
    cdf4:	b002      	add	sp, #8
    cdf6:	bd80      	pop	{r7, pc}
    cdf8:	e000e100 	.word	0xe000e100

0000cdfc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    cdfc:	b580      	push	{r7, lr}
    cdfe:	b084      	sub	sp, #16
    ce00:	af00      	add	r7, sp, #0
    ce02:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    ce04:	687b      	ldr	r3, [r7, #4]
    ce06:	681b      	ldr	r3, [r3, #0]
    ce08:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    ce0a:	68fb      	ldr	r3, [r7, #12]
    ce0c:	7e5b      	ldrb	r3, [r3, #25]
    ce0e:	b2db      	uxtb	r3, r3
    ce10:	b25b      	sxtb	r3, r3
    ce12:	2b00      	cmp	r3, #0
    ce14:	da01      	bge.n	ce1a <adc_is_syncing+0x1e>
		return true;
    ce16:	2301      	movs	r3, #1
    ce18:	e000      	b.n	ce1c <adc_is_syncing+0x20>
	}

	return false;
    ce1a:	2300      	movs	r3, #0
}
    ce1c:	0018      	movs	r0, r3
    ce1e:	46bd      	mov	sp, r7
    ce20:	b004      	add	sp, #16
    ce22:	bd80      	pop	{r7, pc}

0000ce24 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    ce24:	b580      	push	{r7, lr}
    ce26:	b086      	sub	sp, #24
    ce28:	af00      	add	r7, sp, #0
    ce2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ce2c:	687b      	ldr	r3, [r7, #4]
    ce2e:	681b      	ldr	r3, [r3, #0]
    ce30:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    ce32:	693b      	ldr	r3, [r7, #16]
    ce34:	7e1b      	ldrb	r3, [r3, #24]
    ce36:	b2db      	uxtb	r3, r3
    ce38:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    ce3a:	2300      	movs	r3, #0
    ce3c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    ce3e:	68fb      	ldr	r3, [r7, #12]
    ce40:	2201      	movs	r2, #1
    ce42:	4013      	ands	r3, r2
    ce44:	d003      	beq.n	ce4e <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    ce46:	697b      	ldr	r3, [r7, #20]
    ce48:	2201      	movs	r2, #1
    ce4a:	4313      	orrs	r3, r2
    ce4c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    ce4e:	68fb      	ldr	r3, [r7, #12]
    ce50:	2204      	movs	r2, #4
    ce52:	4013      	ands	r3, r2
    ce54:	d003      	beq.n	ce5e <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    ce56:	697b      	ldr	r3, [r7, #20]
    ce58:	2202      	movs	r2, #2
    ce5a:	4313      	orrs	r3, r2
    ce5c:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    ce5e:	68fb      	ldr	r3, [r7, #12]
    ce60:	2202      	movs	r2, #2
    ce62:	4013      	ands	r3, r2
    ce64:	d003      	beq.n	ce6e <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    ce66:	697b      	ldr	r3, [r7, #20]
    ce68:	2204      	movs	r2, #4
    ce6a:	4313      	orrs	r3, r2
    ce6c:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    ce6e:	697b      	ldr	r3, [r7, #20]
}
    ce70:	0018      	movs	r0, r3
    ce72:	46bd      	mov	sp, r7
    ce74:	b006      	add	sp, #24
    ce76:	bd80      	pop	{r7, pc}

0000ce78 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    ce78:	b580      	push	{r7, lr}
    ce7a:	b084      	sub	sp, #16
    ce7c:	af00      	add	r7, sp, #0
    ce7e:	6078      	str	r0, [r7, #4]
    ce80:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ce82:	687b      	ldr	r3, [r7, #4]
    ce84:	681b      	ldr	r3, [r3, #0]
    ce86:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    ce88:	2300      	movs	r3, #0
    ce8a:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    ce8c:	683b      	ldr	r3, [r7, #0]
    ce8e:	2201      	movs	r2, #1
    ce90:	4013      	ands	r3, r2
    ce92:	d003      	beq.n	ce9c <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    ce94:	68fb      	ldr	r3, [r7, #12]
    ce96:	2201      	movs	r2, #1
    ce98:	4313      	orrs	r3, r2
    ce9a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    ce9c:	683b      	ldr	r3, [r7, #0]
    ce9e:	2202      	movs	r2, #2
    cea0:	4013      	ands	r3, r2
    cea2:	d003      	beq.n	ceac <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    cea4:	68fb      	ldr	r3, [r7, #12]
    cea6:	2204      	movs	r2, #4
    cea8:	4313      	orrs	r3, r2
    ceaa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    ceac:	683b      	ldr	r3, [r7, #0]
    ceae:	2204      	movs	r2, #4
    ceb0:	4013      	ands	r3, r2
    ceb2:	d003      	beq.n	cebc <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    ceb4:	68fb      	ldr	r3, [r7, #12]
    ceb6:	2202      	movs	r2, #2
    ceb8:	4313      	orrs	r3, r2
    ceba:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    cebc:	68fb      	ldr	r3, [r7, #12]
    cebe:	b2da      	uxtb	r2, r3
    cec0:	68bb      	ldr	r3, [r7, #8]
    cec2:	761a      	strb	r2, [r3, #24]
}
    cec4:	46c0      	nop			; (mov r8, r8)
    cec6:	46bd      	mov	sp, r7
    cec8:	b004      	add	sp, #16
    ceca:	bd80      	pop	{r7, pc}

0000cecc <adc_enable>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline enum status_code adc_enable(
		struct adc_module *const module_inst)
{
    cecc:	b580      	push	{r7, lr}
    cece:	b084      	sub	sp, #16
    ced0:	af00      	add	r7, sp, #0
    ced2:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    ced4:	687b      	ldr	r3, [r7, #4]
    ced6:	681b      	ldr	r3, [r3, #0]
    ced8:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    ceda:	46c0      	nop			; (mov r8, r8)
    cedc:	687b      	ldr	r3, [r7, #4]
    cede:	0018      	movs	r0, r3
    cee0:	4b10      	ldr	r3, [pc, #64]	; (cf24 <adc_enable+0x58>)
    cee2:	4798      	blx	r3
    cee4:	1e03      	subs	r3, r0, #0
    cee6:	d1f9      	bne.n	cedc <adc_enable+0x10>
	system_interrupt_enable(_adc_interrupt_get_interrupt_vector(
			_adc_get_inst_index(adc_module)));
#   elif (SAMC20)
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC0);
#	else
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
    cee8:	2017      	movs	r0, #23
    ceea:	4b0f      	ldr	r3, [pc, #60]	; (cf28 <adc_enable+0x5c>)
    ceec:	4798      	blx	r3
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    ceee:	68fb      	ldr	r3, [r7, #12]
    cef0:	220f      	movs	r2, #15
    cef2:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    cef4:	68fb      	ldr	r3, [r7, #12]
    cef6:	220f      	movs	r2, #15
    cef8:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    cefa:	68fb      	ldr	r3, [r7, #12]
    cefc:	781b      	ldrb	r3, [r3, #0]
    cefe:	b2db      	uxtb	r3, r3
    cf00:	2202      	movs	r2, #2
    cf02:	4313      	orrs	r3, r2
    cf04:	b2da      	uxtb	r2, r3
    cf06:	68fb      	ldr	r3, [r7, #12]
    cf08:	701a      	strb	r2, [r3, #0]

	while (adc_is_syncing(module_inst)) {
    cf0a:	46c0      	nop			; (mov r8, r8)
    cf0c:	687b      	ldr	r3, [r7, #4]
    cf0e:	0018      	movs	r0, r3
    cf10:	4b04      	ldr	r3, [pc, #16]	; (cf24 <adc_enable+0x58>)
    cf12:	4798      	blx	r3
    cf14:	1e03      	subs	r3, r0, #0
    cf16:	d1f9      	bne.n	cf0c <adc_enable+0x40>
		/* Wait for synchronization */
	}
	return STATUS_OK;
    cf18:	2300      	movs	r3, #0
}
    cf1a:	0018      	movs	r0, r3
    cf1c:	46bd      	mov	sp, r7
    cf1e:	b004      	add	sp, #16
    cf20:	bd80      	pop	{r7, pc}
    cf22:	46c0      	nop			; (mov r8, r8)
    cf24:	0000cdfd 	.word	0x0000cdfd
    cf28:	0000cdd1 	.word	0x0000cdd1

0000cf2c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    cf2c:	b580      	push	{r7, lr}
    cf2e:	b084      	sub	sp, #16
    cf30:	af00      	add	r7, sp, #0
    cf32:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    cf34:	687b      	ldr	r3, [r7, #4]
    cf36:	681b      	ldr	r3, [r3, #0]
    cf38:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    cf3a:	46c0      	nop			; (mov r8, r8)
    cf3c:	687b      	ldr	r3, [r7, #4]
    cf3e:	0018      	movs	r0, r3
    cf40:	4b0b      	ldr	r3, [pc, #44]	; (cf70 <adc_start_conversion+0x44>)
    cf42:	4798      	blx	r3
    cf44:	1e03      	subs	r3, r0, #0
    cf46:	d1f9      	bne.n	cf3c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    cf48:	68fb      	ldr	r3, [r7, #12]
    cf4a:	7b1b      	ldrb	r3, [r3, #12]
    cf4c:	b2db      	uxtb	r3, r3
    cf4e:	2202      	movs	r2, #2
    cf50:	4313      	orrs	r3, r2
    cf52:	b2da      	uxtb	r2, r3
    cf54:	68fb      	ldr	r3, [r7, #12]
    cf56:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    cf58:	46c0      	nop			; (mov r8, r8)
    cf5a:	687b      	ldr	r3, [r7, #4]
    cf5c:	0018      	movs	r0, r3
    cf5e:	4b04      	ldr	r3, [pc, #16]	; (cf70 <adc_start_conversion+0x44>)
    cf60:	4798      	blx	r3
    cf62:	1e03      	subs	r3, r0, #0
    cf64:	d1f9      	bne.n	cf5a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    cf66:	46c0      	nop			; (mov r8, r8)
    cf68:	46bd      	mov	sp, r7
    cf6a:	b004      	add	sp, #16
    cf6c:	bd80      	pop	{r7, pc}
    cf6e:	46c0      	nop			; (mov r8, r8)
    cf70:	0000cdfd 	.word	0x0000cdfd

0000cf74 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    cf74:	b580      	push	{r7, lr}
    cf76:	b084      	sub	sp, #16
    cf78:	af00      	add	r7, sp, #0
    cf7a:	6078      	str	r0, [r7, #4]
    cf7c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    cf7e:	687b      	ldr	r3, [r7, #4]
    cf80:	0018      	movs	r0, r3
    cf82:	4b18      	ldr	r3, [pc, #96]	; (cfe4 <adc_read+0x70>)
    cf84:	4798      	blx	r3
    cf86:	0002      	movs	r2, r0
    cf88:	2301      	movs	r3, #1
    cf8a:	4013      	ands	r3, r2
    cf8c:	d101      	bne.n	cf92 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    cf8e:	2305      	movs	r3, #5
    cf90:	e023      	b.n	cfda <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    cf92:	687b      	ldr	r3, [r7, #4]
    cf94:	681b      	ldr	r3, [r3, #0]
    cf96:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    cf98:	46c0      	nop			; (mov r8, r8)
    cf9a:	687b      	ldr	r3, [r7, #4]
    cf9c:	0018      	movs	r0, r3
    cf9e:	4b12      	ldr	r3, [pc, #72]	; (cfe8 <adc_read+0x74>)
    cfa0:	4798      	blx	r3
    cfa2:	1e03      	subs	r3, r0, #0
    cfa4:	d1f9      	bne.n	cf9a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    cfa6:	68fb      	ldr	r3, [r7, #12]
    cfa8:	8b5b      	ldrh	r3, [r3, #26]
    cfaa:	b29a      	uxth	r2, r3
    cfac:	683b      	ldr	r3, [r7, #0]
    cfae:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    cfb0:	687b      	ldr	r3, [r7, #4]
    cfb2:	2101      	movs	r1, #1
    cfb4:	0018      	movs	r0, r3
    cfb6:	4b0d      	ldr	r3, [pc, #52]	; (cfec <adc_read+0x78>)
    cfb8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    cfba:	687b      	ldr	r3, [r7, #4]
    cfbc:	0018      	movs	r0, r3
    cfbe:	4b09      	ldr	r3, [pc, #36]	; (cfe4 <adc_read+0x70>)
    cfc0:	4798      	blx	r3
    cfc2:	0002      	movs	r2, r0
    cfc4:	2304      	movs	r3, #4
    cfc6:	4013      	ands	r3, r2
    cfc8:	d006      	beq.n	cfd8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    cfca:	687b      	ldr	r3, [r7, #4]
    cfcc:	2104      	movs	r1, #4
    cfce:	0018      	movs	r0, r3
    cfd0:	4b06      	ldr	r3, [pc, #24]	; (cfec <adc_read+0x78>)
    cfd2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    cfd4:	231e      	movs	r3, #30
    cfd6:	e000      	b.n	cfda <adc_read+0x66>
	}

	return STATUS_OK;
    cfd8:	2300      	movs	r3, #0
}
    cfda:	0018      	movs	r0, r3
    cfdc:	46bd      	mov	sp, r7
    cfde:	b004      	add	sp, #16
    cfe0:	bd80      	pop	{r7, pc}
    cfe2:	46c0      	nop			; (mov r8, r8)
    cfe4:	0000ce25 	.word	0x0000ce25
    cfe8:	0000cdfd 	.word	0x0000cdfd
    cfec:	0000ce79 	.word	0x0000ce79

0000cff0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    cff0:	b580      	push	{r7, lr}
    cff2:	b082      	sub	sp, #8
    cff4:	af00      	add	r7, sp, #0
    cff6:	0002      	movs	r2, r0
    cff8:	1dfb      	adds	r3, r7, #7
    cffa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    cffc:	1dfb      	adds	r3, r7, #7
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	0018      	movs	r0, r3
    d002:	4b03      	ldr	r3, [pc, #12]	; (d010 <port_get_group_from_gpio_pin+0x20>)
    d004:	4798      	blx	r3
    d006:	0003      	movs	r3, r0
}
    d008:	0018      	movs	r0, r3
    d00a:	46bd      	mov	sp, r7
    d00c:	b002      	add	sp, #8
    d00e:	bd80      	pop	{r7, pc}
    d010:	0000cd71 	.word	0x0000cd71

0000d014 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    d014:	b580      	push	{r7, lr}
    d016:	b082      	sub	sp, #8
    d018:	af00      	add	r7, sp, #0
    d01a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    d01c:	687b      	ldr	r3, [r7, #4]
    d01e:	2200      	movs	r2, #0
    d020:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    d022:	687b      	ldr	r3, [r7, #4]
    d024:	2201      	movs	r2, #1
    d026:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    d028:	687b      	ldr	r3, [r7, #4]
    d02a:	2200      	movs	r2, #0
    d02c:	709a      	strb	r2, [r3, #2]
}
    d02e:	46c0      	nop			; (mov r8, r8)
    d030:	46bd      	mov	sp, r7
    d032:	b002      	add	sp, #8
    d034:	bd80      	pop	{r7, pc}
    d036:	46c0      	nop			; (mov r8, r8)

0000d038 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    d038:	b580      	push	{r7, lr}
    d03a:	b084      	sub	sp, #16
    d03c:	af00      	add	r7, sp, #0
    d03e:	0002      	movs	r2, r0
    d040:	1dfb      	adds	r3, r7, #7
    d042:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d044:	1dfb      	adds	r3, r7, #7
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	0018      	movs	r0, r3
    d04a:	4b0b      	ldr	r3, [pc, #44]	; (d078 <port_pin_get_output_level+0x40>)
    d04c:	4798      	blx	r3
    d04e:	0003      	movs	r3, r0
    d050:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d052:	1dfb      	adds	r3, r7, #7
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	221f      	movs	r2, #31
    d058:	4013      	ands	r3, r2
    d05a:	2201      	movs	r2, #1
    d05c:	409a      	lsls	r2, r3
    d05e:	0013      	movs	r3, r2
    d060:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    d062:	68fb      	ldr	r3, [r7, #12]
    d064:	691b      	ldr	r3, [r3, #16]
    d066:	68ba      	ldr	r2, [r7, #8]
    d068:	4013      	ands	r3, r2
    d06a:	1e5a      	subs	r2, r3, #1
    d06c:	4193      	sbcs	r3, r2
    d06e:	b2db      	uxtb	r3, r3
}
    d070:	0018      	movs	r0, r3
    d072:	46bd      	mov	sp, r7
    d074:	b004      	add	sp, #16
    d076:	bd80      	pop	{r7, pc}
    d078:	0000cff1 	.word	0x0000cff1

0000d07c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d07c:	b580      	push	{r7, lr}
    d07e:	b084      	sub	sp, #16
    d080:	af00      	add	r7, sp, #0
    d082:	0002      	movs	r2, r0
    d084:	1dfb      	adds	r3, r7, #7
    d086:	701a      	strb	r2, [r3, #0]
    d088:	1dbb      	adds	r3, r7, #6
    d08a:	1c0a      	adds	r2, r1, #0
    d08c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d08e:	1dfb      	adds	r3, r7, #7
    d090:	781b      	ldrb	r3, [r3, #0]
    d092:	0018      	movs	r0, r3
    d094:	4b0d      	ldr	r3, [pc, #52]	; (d0cc <port_pin_set_output_level+0x50>)
    d096:	4798      	blx	r3
    d098:	0003      	movs	r3, r0
    d09a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d09c:	1dfb      	adds	r3, r7, #7
    d09e:	781b      	ldrb	r3, [r3, #0]
    d0a0:	221f      	movs	r2, #31
    d0a2:	4013      	ands	r3, r2
    d0a4:	2201      	movs	r2, #1
    d0a6:	409a      	lsls	r2, r3
    d0a8:	0013      	movs	r3, r2
    d0aa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d0ac:	1dbb      	adds	r3, r7, #6
    d0ae:	781b      	ldrb	r3, [r3, #0]
    d0b0:	2b00      	cmp	r3, #0
    d0b2:	d003      	beq.n	d0bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d0b4:	68fb      	ldr	r3, [r7, #12]
    d0b6:	68ba      	ldr	r2, [r7, #8]
    d0b8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    d0ba:	e002      	b.n	d0c2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d0bc:	68fb      	ldr	r3, [r7, #12]
    d0be:	68ba      	ldr	r2, [r7, #8]
    d0c0:	615a      	str	r2, [r3, #20]
	}
}
    d0c2:	46c0      	nop			; (mov r8, r8)
    d0c4:	46bd      	mov	sp, r7
    d0c6:	b004      	add	sp, #16
    d0c8:	bd80      	pop	{r7, pc}
    d0ca:	46c0      	nop			; (mov r8, r8)
    d0cc:	0000cff1 	.word	0x0000cff1

0000d0d0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    d0d0:	b580      	push	{r7, lr}
    d0d2:	b084      	sub	sp, #16
    d0d4:	af00      	add	r7, sp, #0
    d0d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    d0d8:	687b      	ldr	r3, [r7, #4]
    d0da:	681b      	ldr	r3, [r3, #0]
    d0dc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d0de:	68fb      	ldr	r3, [r7, #12]
    d0e0:	69db      	ldr	r3, [r3, #28]
    d0e2:	1e5a      	subs	r2, r3, #1
    d0e4:	4193      	sbcs	r3, r2
    d0e6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    d0e8:	0018      	movs	r0, r3
    d0ea:	46bd      	mov	sp, r7
    d0ec:	b004      	add	sp, #16
    d0ee:	bd80      	pop	{r7, pc}

0000d0f0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    d0f0:	b580      	push	{r7, lr}
    d0f2:	b082      	sub	sp, #8
    d0f4:	af00      	add	r7, sp, #0
    d0f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d0f8:	46c0      	nop			; (mov r8, r8)
    d0fa:	687b      	ldr	r3, [r7, #4]
    d0fc:	0018      	movs	r0, r3
    d0fe:	4b04      	ldr	r3, [pc, #16]	; (d110 <_usart_wait_for_sync+0x20>)
    d100:	4798      	blx	r3
    d102:	1e03      	subs	r3, r0, #0
    d104:	d1f9      	bne.n	d0fa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    d106:	46c0      	nop			; (mov r8, r8)
    d108:	46bd      	mov	sp, r7
    d10a:	b002      	add	sp, #8
    d10c:	bd80      	pop	{r7, pc}
    d10e:	46c0      	nop			; (mov r8, r8)
    d110:	0000d0d1 	.word	0x0000d0d1

0000d114 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    d114:	b580      	push	{r7, lr}
    d116:	b082      	sub	sp, #8
    d118:	af00      	add	r7, sp, #0
    d11a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d11c:	687b      	ldr	r3, [r7, #4]
    d11e:	2280      	movs	r2, #128	; 0x80
    d120:	05d2      	lsls	r2, r2, #23
    d122:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d124:	687b      	ldr	r3, [r7, #4]
    d126:	2200      	movs	r2, #0
    d128:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    d12a:	687b      	ldr	r3, [r7, #4]
    d12c:	22ff      	movs	r2, #255	; 0xff
    d12e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    d130:	687b      	ldr	r3, [r7, #4]
    d132:	2200      	movs	r2, #0
    d134:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d136:	687b      	ldr	r3, [r7, #4]
    d138:	2200      	movs	r2, #0
    d13a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    d13c:	687b      	ldr	r3, [r7, #4]
    d13e:	2296      	movs	r2, #150	; 0x96
    d140:	0192      	lsls	r2, r2, #6
    d142:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    d144:	687b      	ldr	r3, [r7, #4]
    d146:	2224      	movs	r2, #36	; 0x24
    d148:	2101      	movs	r1, #1
    d14a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    d14c:	687b      	ldr	r3, [r7, #4]
    d14e:	2225      	movs	r2, #37	; 0x25
    d150:	2101      	movs	r1, #1
    d152:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    d154:	687b      	ldr	r3, [r7, #4]
    d156:	2226      	movs	r2, #38	; 0x26
    d158:	2100      	movs	r1, #0
    d15a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	2227      	movs	r2, #39	; 0x27
    d160:	2100      	movs	r1, #0
    d162:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    d164:	687b      	ldr	r3, [r7, #4]
    d166:	2200      	movs	r2, #0
    d168:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	2288      	movs	r2, #136	; 0x88
    d16e:	0352      	lsls	r2, r2, #13
    d170:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    d172:	687b      	ldr	r3, [r7, #4]
    d174:	222c      	movs	r2, #44	; 0x2c
    d176:	2100      	movs	r1, #0
    d178:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    d17a:	687b      	ldr	r3, [r7, #4]
    d17c:	222d      	movs	r2, #45	; 0x2d
    d17e:	2100      	movs	r1, #0
    d180:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d182:	687b      	ldr	r3, [r7, #4]
    d184:	2200      	movs	r2, #0
    d186:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d188:	687b      	ldr	r3, [r7, #4]
    d18a:	2200      	movs	r2, #0
    d18c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    d18e:	687b      	ldr	r3, [r7, #4]
    d190:	2200      	movs	r2, #0
    d192:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    d194:	687b      	ldr	r3, [r7, #4]
    d196:	2200      	movs	r2, #0
    d198:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d19a:	687b      	ldr	r3, [r7, #4]
    d19c:	2200      	movs	r2, #0
    d19e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d1a0:	687b      	ldr	r3, [r7, #4]
    d1a2:	2200      	movs	r2, #0
    d1a4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    d1a6:	687b      	ldr	r3, [r7, #4]
    d1a8:	2200      	movs	r2, #0
    d1aa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    d1ac:	687b      	ldr	r3, [r7, #4]
    d1ae:	2200      	movs	r2, #0
    d1b0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    d1b2:	687b      	ldr	r3, [r7, #4]
    d1b4:	2200      	movs	r2, #0
    d1b6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    d1b8:	687b      	ldr	r3, [r7, #4]
    d1ba:	2200      	movs	r2, #0
    d1bc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    d1be:	687b      	ldr	r3, [r7, #4]
    d1c0:	2213      	movs	r2, #19
    d1c2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    d1c4:	687b      	ldr	r3, [r7, #4]
    d1c6:	2200      	movs	r2, #0
    d1c8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    d1ca:	46c0      	nop			; (mov r8, r8)
    d1cc:	46bd      	mov	sp, r7
    d1ce:	b002      	add	sp, #8
    d1d0:	bd80      	pop	{r7, pc}
    d1d2:	46c0      	nop			; (mov r8, r8)

0000d1d4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    d1d4:	b580      	push	{r7, lr}
    d1d6:	b084      	sub	sp, #16
    d1d8:	af00      	add	r7, sp, #0
    d1da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d1dc:	687b      	ldr	r3, [r7, #4]
    d1de:	681b      	ldr	r3, [r3, #0]
    d1e0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d1e2:	687b      	ldr	r3, [r7, #4]
    d1e4:	681b      	ldr	r3, [r3, #0]
    d1e6:	0018      	movs	r0, r3
    d1e8:	4b09      	ldr	r3, [pc, #36]	; (d210 <usart_enable+0x3c>)
    d1ea:	4798      	blx	r3
    d1ec:	0003      	movs	r3, r0
    d1ee:	0018      	movs	r0, r3
    d1f0:	4b08      	ldr	r3, [pc, #32]	; (d214 <usart_enable+0x40>)
    d1f2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d1f4:	687b      	ldr	r3, [r7, #4]
    d1f6:	0018      	movs	r0, r3
    d1f8:	4b07      	ldr	r3, [pc, #28]	; (d218 <usart_enable+0x44>)
    d1fa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d1fc:	68fb      	ldr	r3, [r7, #12]
    d1fe:	681b      	ldr	r3, [r3, #0]
    d200:	2202      	movs	r2, #2
    d202:	431a      	orrs	r2, r3
    d204:	68fb      	ldr	r3, [r7, #12]
    d206:	601a      	str	r2, [r3, #0]
}
    d208:	46c0      	nop			; (mov r8, r8)
    d20a:	46bd      	mov	sp, r7
    d20c:	b004      	add	sp, #16
    d20e:	bd80      	pop	{r7, pc}
    d210:	00008149 	.word	0x00008149
    d214:	0000cdd1 	.word	0x0000cdd1
    d218:	0000d0f1 	.word	0x0000d0f1

0000d21c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d21c:	b580      	push	{r7, lr}
    d21e:	b084      	sub	sp, #16
    d220:	af00      	add	r7, sp, #0
    d222:	60f8      	str	r0, [r7, #12]
    d224:	60b9      	str	r1, [r7, #8]
    d226:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    d228:	687a      	ldr	r2, [r7, #4]
    d22a:	68b9      	ldr	r1, [r7, #8]
    d22c:	68fb      	ldr	r3, [r7, #12]
    d22e:	0018      	movs	r0, r3
    d230:	4b05      	ldr	r3, [pc, #20]	; (d248 <usart_serial_init+0x2c>)
    d232:	4798      	blx	r3
    d234:	1e03      	subs	r3, r0, #0
    d236:	d101      	bne.n	d23c <usart_serial_init+0x20>
		return true;
    d238:	2301      	movs	r3, #1
    d23a:	e000      	b.n	d23e <usart_serial_init+0x22>
	}
	else {
		return false;
    d23c:	2300      	movs	r3, #0
	}
}
    d23e:	0018      	movs	r0, r3
    d240:	46bd      	mov	sp, r7
    d242:	b004      	add	sp, #16
    d244:	bd80      	pop	{r7, pc}
    d246:	46c0      	nop			; (mov r8, r8)
    d248:	00009111 	.word	0x00009111

0000d24c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    d24c:	b580      	push	{r7, lr}
    d24e:	b082      	sub	sp, #8
    d250:	af00      	add	r7, sp, #0
    d252:	6078      	str	r0, [r7, #4]
    d254:	000a      	movs	r2, r1
    d256:	1cfb      	adds	r3, r7, #3
    d258:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    d25a:	46c0      	nop			; (mov r8, r8)
    d25c:	1cfb      	adds	r3, r7, #3
    d25e:	781b      	ldrb	r3, [r3, #0]
    d260:	b29a      	uxth	r2, r3
    d262:	687b      	ldr	r3, [r7, #4]
    d264:	0011      	movs	r1, r2
    d266:	0018      	movs	r0, r3
    d268:	4b04      	ldr	r3, [pc, #16]	; (d27c <usart_serial_putchar+0x30>)
    d26a:	4798      	blx	r3
    d26c:	1e03      	subs	r3, r0, #0
    d26e:	d1f5      	bne.n	d25c <usart_serial_putchar+0x10>

	return STATUS_OK;
    d270:	2300      	movs	r3, #0
}
    d272:	0018      	movs	r0, r3
    d274:	46bd      	mov	sp, r7
    d276:	b002      	add	sp, #8
    d278:	bd80      	pop	{r7, pc}
    d27a:	46c0      	nop			; (mov r8, r8)
    d27c:	00009385 	.word	0x00009385

0000d280 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    d280:	b580      	push	{r7, lr}
    d282:	b084      	sub	sp, #16
    d284:	af00      	add	r7, sp, #0
    d286:	6078      	str	r0, [r7, #4]
    d288:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    d28a:	230e      	movs	r3, #14
    d28c:	18fb      	adds	r3, r7, r3
    d28e:	2200      	movs	r2, #0
    d290:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    d292:	46c0      	nop			; (mov r8, r8)
    d294:	230e      	movs	r3, #14
    d296:	18fa      	adds	r2, r7, r3
    d298:	687b      	ldr	r3, [r7, #4]
    d29a:	0011      	movs	r1, r2
    d29c:	0018      	movs	r0, r3
    d29e:	4b07      	ldr	r3, [pc, #28]	; (d2bc <usart_serial_getchar+0x3c>)
    d2a0:	4798      	blx	r3
    d2a2:	1e03      	subs	r3, r0, #0
    d2a4:	d1f6      	bne.n	d294 <usart_serial_getchar+0x14>

	*c = temp;
    d2a6:	230e      	movs	r3, #14
    d2a8:	18fb      	adds	r3, r7, r3
    d2aa:	881b      	ldrh	r3, [r3, #0]
    d2ac:	b2da      	uxtb	r2, r3
    d2ae:	683b      	ldr	r3, [r7, #0]
    d2b0:	701a      	strb	r2, [r3, #0]
}
    d2b2:	46c0      	nop			; (mov r8, r8)
    d2b4:	46bd      	mov	sp, r7
    d2b6:	b004      	add	sp, #16
    d2b8:	bd80      	pop	{r7, pc}
    d2ba:	46c0      	nop			; (mov r8, r8)
    d2bc:	000093e9 	.word	0x000093e9

0000d2c0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b084      	sub	sp, #16
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	60f8      	str	r0, [r7, #12]
    d2c8:	60b9      	str	r1, [r7, #8]
    d2ca:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    d2cc:	4b10      	ldr	r3, [pc, #64]	; (d310 <stdio_serial_init+0x50>)
    d2ce:	68fa      	ldr	r2, [r7, #12]
    d2d0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    d2d2:	4b10      	ldr	r3, [pc, #64]	; (d314 <stdio_serial_init+0x54>)
    d2d4:	4a10      	ldr	r2, [pc, #64]	; (d318 <stdio_serial_init+0x58>)
    d2d6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    d2d8:	4b10      	ldr	r3, [pc, #64]	; (d31c <stdio_serial_init+0x5c>)
    d2da:	4a11      	ldr	r2, [pc, #68]	; (d320 <stdio_serial_init+0x60>)
    d2dc:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    d2de:	687a      	ldr	r2, [r7, #4]
    d2e0:	68b9      	ldr	r1, [r7, #8]
    d2e2:	68fb      	ldr	r3, [r7, #12]
    d2e4:	0018      	movs	r0, r3
    d2e6:	4b0f      	ldr	r3, [pc, #60]	; (d324 <stdio_serial_init+0x64>)
    d2e8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    d2ea:	4b0f      	ldr	r3, [pc, #60]	; (d328 <stdio_serial_init+0x68>)
    d2ec:	681b      	ldr	r3, [r3, #0]
    d2ee:	689b      	ldr	r3, [r3, #8]
    d2f0:	2100      	movs	r1, #0
    d2f2:	0018      	movs	r0, r3
    d2f4:	4b0d      	ldr	r3, [pc, #52]	; (d32c <stdio_serial_init+0x6c>)
    d2f6:	4798      	blx	r3
	setbuf(stdin, NULL);
    d2f8:	4b0b      	ldr	r3, [pc, #44]	; (d328 <stdio_serial_init+0x68>)
    d2fa:	681b      	ldr	r3, [r3, #0]
    d2fc:	685b      	ldr	r3, [r3, #4]
    d2fe:	2100      	movs	r1, #0
    d300:	0018      	movs	r0, r3
    d302:	4b0a      	ldr	r3, [pc, #40]	; (d32c <stdio_serial_init+0x6c>)
    d304:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	46bd      	mov	sp, r7
    d30a:	b004      	add	sp, #16
    d30c:	bd80      	pop	{r7, pc}
    d30e:	46c0      	nop			; (mov r8, r8)
    d310:	200045e0 	.word	0x200045e0
    d314:	200045dc 	.word	0x200045dc
    d318:	0000d24d 	.word	0x0000d24d
    d31c:	200045d8 	.word	0x200045d8
    d320:	0000d281 	.word	0x0000d281
    d324:	0000d21d 	.word	0x0000d21d
    d328:	2000008c 	.word	0x2000008c
    d32c:	00010ea9 	.word	0x00010ea9

0000d330 <m2m_tcp_socket_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    d330:	b580      	push	{r7, lr}
    d332:	b082      	sub	sp, #8
    d334:	af00      	add	r7, sp, #0
    d336:	603a      	str	r2, [r7, #0]
    d338:	1dfb      	adds	r3, r7, #7
    d33a:	1c02      	adds	r2, r0, #0
    d33c:	701a      	strb	r2, [r3, #0]
    d33e:	1dbb      	adds	r3, r7, #6
    d340:	1c0a      	adds	r2, r1, #0
    d342:	701a      	strb	r2, [r3, #0]
	handle_tcpip(sock, u8Msg, pvMsg);
    d344:	683a      	ldr	r2, [r7, #0]
    d346:	1dbb      	adds	r3, r7, #6
    d348:	7819      	ldrb	r1, [r3, #0]
    d34a:	1dfb      	adds	r3, r7, #7
    d34c:	781b      	ldrb	r3, [r3, #0]
    d34e:	b25b      	sxtb	r3, r3
    d350:	0018      	movs	r0, r3
    d352:	4b03      	ldr	r3, [pc, #12]	; (d360 <m2m_tcp_socket_handler+0x30>)
    d354:	4798      	blx	r3
}
    d356:	46c0      	nop			; (mov r8, r8)
    d358:	46bd      	mov	sp, r7
    d35a:	b002      	add	sp, #8
    d35c:	bd80      	pop	{r7, pc}
    d35e:	46c0      	nop			; (mov r8, r8)
    d360:	0000e459 	.word	0x0000e459

0000d364 <socket_resolve_cb>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    d364:	b5b0      	push	{r4, r5, r7, lr}
    d366:	b084      	sub	sp, #16
    d368:	af02      	add	r7, sp, #8
    d36a:	6078      	str	r0, [r7, #4]
    d36c:	6039      	str	r1, [r7, #0]
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d36e:	683b      	ldr	r3, [r7, #0]
    d370:	22ff      	movs	r2, #255	; 0xff
    d372:	4013      	ands	r3, r2
    d374:	001c      	movs	r4, r3
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    d376:	683b      	ldr	r3, [r7, #0]
    d378:	0a1b      	lsrs	r3, r3, #8
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d37a:	001a      	movs	r2, r3
    d37c:	23ff      	movs	r3, #255	; 0xff
    d37e:	401a      	ands	r2, r3
    d380:	0015      	movs	r5, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d382:	683b      	ldr	r3, [r7, #0]
    d384:	0c1b      	lsrs	r3, r3, #16
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d386:	001a      	movs	r2, r3
    d388:	23ff      	movs	r3, #255	; 0xff
    d38a:	4013      	ands	r3, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d38c:	683a      	ldr	r2, [r7, #0]
    d38e:	0e12      	lsrs	r2, r2, #24
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d390:	6879      	ldr	r1, [r7, #4]
    d392:	4808      	ldr	r0, [pc, #32]	; (d3b4 <socket_resolve_cb+0x50>)
    d394:	9201      	str	r2, [sp, #4]
    d396:	9300      	str	r3, [sp, #0]
    d398:	002b      	movs	r3, r5
    d39a:	0022      	movs	r2, r4
    d39c:	4c06      	ldr	r4, [pc, #24]	; (d3b8 <socket_resolve_cb+0x54>)
    d39e:	47a0      	blx	r4
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
	handle_dns_found((char *)hostName, hostIp);
    d3a0:	683a      	ldr	r2, [r7, #0]
    d3a2:	687b      	ldr	r3, [r7, #4]
    d3a4:	0011      	movs	r1, r2
    d3a6:	0018      	movs	r0, r3
    d3a8:	4b04      	ldr	r3, [pc, #16]	; (d3bc <socket_resolve_cb+0x58>)
    d3aa:	4798      	blx	r3
}
    d3ac:	46c0      	nop			; (mov r8, r8)
    d3ae:	46bd      	mov	sp, r7
    d3b0:	b002      	add	sp, #8
    d3b2:	bdb0      	pop	{r4, r5, r7, pc}
    d3b4:	000130a0 	.word	0x000130a0
    d3b8:	00010d75 	.word	0x00010d75
    d3bc:	0000e3e9 	.word	0x0000e3e9

0000d3c0 <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    d3c0:	b590      	push	{r4, r7, lr}
    d3c2:	b087      	sub	sp, #28
    d3c4:	af02      	add	r7, sp, #8
    d3c6:	0002      	movs	r2, r0
    d3c8:	6039      	str	r1, [r7, #0]
    d3ca:	1dfb      	adds	r3, r7, #7
    d3cc:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    d3ce:	1dfb      	adds	r3, r7, #7
    d3d0:	781b      	ldrb	r3, [r3, #0]
    d3d2:	2b2c      	cmp	r3, #44	; 0x2c
    d3d4:	d002      	beq.n	d3dc <m2m_wifi_state+0x1c>
    d3d6:	2b32      	cmp	r3, #50	; 0x32
    d3d8:	d025      	beq.n	d426 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    d3da:	e042      	b.n	d462 <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    d3dc:	683b      	ldr	r3, [r7, #0]
    d3de:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    d3e0:	68fb      	ldr	r3, [r7, #12]
    d3e2:	781b      	ldrb	r3, [r3, #0]
    d3e4:	2b01      	cmp	r3, #1
    d3e6:	d104      	bne.n	d3f2 <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    d3e8:	4b20      	ldr	r3, [pc, #128]	; (d46c <m2m_wifi_state+0xac>)
    d3ea:	0018      	movs	r0, r3
    d3ec:	4b20      	ldr	r3, [pc, #128]	; (d470 <m2m_wifi_state+0xb0>)
    d3ee:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d3f0:	e036      	b.n	d460 <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d3f2:	68fb      	ldr	r3, [r7, #12]
    d3f4:	781b      	ldrb	r3, [r3, #0]
    d3f6:	2b00      	cmp	r3, #0
    d3f8:	d132      	bne.n	d460 <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    d3fa:	4b1e      	ldr	r3, [pc, #120]	; (d474 <m2m_wifi_state+0xb4>)
    d3fc:	0018      	movs	r0, r3
    d3fe:	4b1c      	ldr	r3, [pc, #112]	; (d470 <m2m_wifi_state+0xb0>)
    d400:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    d402:	4b1d      	ldr	r3, [pc, #116]	; (d478 <m2m_wifi_state+0xb8>)
    d404:	781b      	ldrb	r3, [r3, #0]
    d406:	b2db      	uxtb	r3, r3
    d408:	2b03      	cmp	r3, #3
    d40a:	d129      	bne.n	d460 <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    d40c:	4b1a      	ldr	r3, [pc, #104]	; (d478 <m2m_wifi_state+0xb8>)
    d40e:	2204      	movs	r2, #4
    d410:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d412:	4a1a      	ldr	r2, [pc, #104]	; (d47c <m2m_wifi_state+0xbc>)
    d414:	481a      	ldr	r0, [pc, #104]	; (d480 <m2m_wifi_state+0xc0>)
    d416:	23ff      	movs	r3, #255	; 0xff
    d418:	9300      	str	r3, [sp, #0]
    d41a:	0013      	movs	r3, r2
    d41c:	2202      	movs	r2, #2
    d41e:	211b      	movs	r1, #27
    d420:	4c18      	ldr	r4, [pc, #96]	; (d484 <m2m_wifi_state+0xc4>)
    d422:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d424:	e01c      	b.n	d460 <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    d426:	683b      	ldr	r3, [r7, #0]
    d428:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    d42a:	4b17      	ldr	r3, [pc, #92]	; (d488 <m2m_wifi_state+0xc8>)
    d42c:	681a      	ldr	r2, [r3, #0]
    d42e:	4b17      	ldr	r3, [pc, #92]	; (d48c <m2m_wifi_state+0xcc>)
    d430:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d432:	68bb      	ldr	r3, [r7, #8]
    d434:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d436:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d438:	68bb      	ldr	r3, [r7, #8]
    d43a:	3301      	adds	r3, #1
    d43c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d43e:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d440:	68bb      	ldr	r3, [r7, #8]
    d442:	3302      	adds	r3, #2
    d444:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d446:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d448:	68bb      	ldr	r3, [r7, #8]
    d44a:	3303      	adds	r3, #3
    d44c:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d44e:	4810      	ldr	r0, [pc, #64]	; (d490 <m2m_wifi_state+0xd0>)
    d450:	9300      	str	r3, [sp, #0]
    d452:	0023      	movs	r3, r4
    d454:	4c0f      	ldr	r4, [pc, #60]	; (d494 <m2m_wifi_state+0xd4>)
    d456:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    d458:	4b07      	ldr	r3, [pc, #28]	; (d478 <m2m_wifi_state+0xb8>)
    d45a:	2203      	movs	r2, #3
    d45c:	701a      	strb	r2, [r3, #0]

		break;
    d45e:	e000      	b.n	d462 <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d460:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    d462:	46c0      	nop			; (mov r8, r8)
    d464:	46bd      	mov	sp, r7
    d466:	b005      	add	sp, #20
    d468:	bd90      	pop	{r4, r7, pc}
    d46a:	46c0      	nop			; (mov r8, r8)
    d46c:	000130d8 	.word	0x000130d8
    d470:	00010e95 	.word	0x00010e95
    d474:	00013114 	.word	0x00013114
    d478:	20003d04 	.word	0x20003d04
    d47c:	00013154 	.word	0x00013154
    d480:	00013160 	.word	0x00013160
    d484:	00001bad 	.word	0x00001bad
    d488:	20003d08 	.word	0x20003d08
    d48c:	20003d18 	.word	0x20003d18
    d490:	0001317c 	.word	0x0001317c
    d494:	00010d75 	.word	0x00010d75

0000d498 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    d498:	b580      	push	{r7, lr}
    d49a:	b090      	sub	sp, #64	; 0x40
    d49c:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    d49e:	003b      	movs	r3, r7
    d4a0:	0018      	movs	r0, r3
    d4a2:	4b13      	ldr	r3, [pc, #76]	; (d4f0 <configure_console+0x58>)
    d4a4:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d4a6:	003b      	movs	r3, r7
    d4a8:	22c4      	movs	r2, #196	; 0xc4
    d4aa:	0392      	lsls	r2, r2, #14
    d4ac:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d4ae:	003b      	movs	r3, r7
    d4b0:	2201      	movs	r2, #1
    d4b2:	4252      	negs	r2, r2
    d4b4:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d4b6:	003b      	movs	r3, r7
    d4b8:	2201      	movs	r2, #1
    d4ba:	4252      	negs	r2, r2
    d4bc:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d4be:	003b      	movs	r3, r7
    d4c0:	4a0c      	ldr	r2, [pc, #48]	; (d4f4 <configure_console+0x5c>)
    d4c2:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d4c4:	003b      	movs	r3, r7
    d4c6:	4a0c      	ldr	r2, [pc, #48]	; (d4f8 <configure_console+0x60>)
    d4c8:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    d4ca:	003b      	movs	r3, r7
    d4cc:	22e1      	movs	r2, #225	; 0xe1
    d4ce:	0252      	lsls	r2, r2, #9
    d4d0:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    d4d2:	003a      	movs	r2, r7
    d4d4:	4909      	ldr	r1, [pc, #36]	; (d4fc <configure_console+0x64>)
    d4d6:	4b0a      	ldr	r3, [pc, #40]	; (d500 <configure_console+0x68>)
    d4d8:	0018      	movs	r0, r3
    d4da:	4b0a      	ldr	r3, [pc, #40]	; (d504 <configure_console+0x6c>)
    d4dc:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    d4de:	4b08      	ldr	r3, [pc, #32]	; (d500 <configure_console+0x68>)
    d4e0:	0018      	movs	r0, r3
    d4e2:	4b09      	ldr	r3, [pc, #36]	; (d508 <configure_console+0x70>)
    d4e4:	4798      	blx	r3
}
    d4e6:	46c0      	nop			; (mov r8, r8)
    d4e8:	46bd      	mov	sp, r7
    d4ea:	b010      	add	sp, #64	; 0x40
    d4ec:	bd80      	pop	{r7, pc}
    d4ee:	46c0      	nop			; (mov r8, r8)
    d4f0:	0000d115 	.word	0x0000d115
    d4f4:	002a0003 	.word	0x002a0003
    d4f8:	002b0003 	.word	0x002b0003
    d4fc:	42001800 	.word	0x42001800
    d500:	20003d20 	.word	0x20003d20
    d504:	0000d2c1 	.word	0x0000d2c1
    d508:	0000d1d5 	.word	0x0000d1d5

0000d50c <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
    d50c:	b590      	push	{r4, r7, lr}
    d50e:	b085      	sub	sp, #20
    d510:	af00      	add	r7, sp, #0
    d512:	6078      	str	r0, [r7, #4]
    d514:	6039      	str	r1, [r7, #0]
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    d516:	230e      	movs	r3, #14
    d518:	18fc      	adds	r4, r7, r3
    d51a:	687b      	ldr	r3, [r7, #4]
    d51c:	0018      	movs	r0, r3
    d51e:	4b47      	ldr	r3, [pc, #284]	; (d63c <set_dev_name_to_mac+0x130>)
    d520:	4798      	blx	r3
    d522:	0003      	movs	r3, r0
    d524:	8023      	strh	r3, [r4, #0]
	if (len >= 5) {
    d526:	230e      	movs	r3, #14
    d528:	18fb      	adds	r3, r7, r3
    d52a:	881b      	ldrh	r3, [r3, #0]
    d52c:	2b04      	cmp	r3, #4
    d52e:	d800      	bhi.n	d532 <set_dev_name_to_mac+0x26>
    d530:	e07f      	b.n	d632 <set_dev_name_to_mac+0x126>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    d532:	230e      	movs	r3, #14
    d534:	18fb      	adds	r3, r7, r3
    d536:	881b      	ldrh	r3, [r3, #0]
    d538:	3b01      	subs	r3, #1
    d53a:	687a      	ldr	r2, [r7, #4]
    d53c:	18d2      	adds	r2, r2, r3
    d53e:	683b      	ldr	r3, [r7, #0]
    d540:	3305      	adds	r3, #5
    d542:	781b      	ldrb	r3, [r3, #0]
    d544:	0019      	movs	r1, r3
    d546:	230f      	movs	r3, #15
    d548:	400b      	ands	r3, r1
    d54a:	2b09      	cmp	r3, #9
    d54c:	dd08      	ble.n	d560 <set_dev_name_to_mac+0x54>
    d54e:	683b      	ldr	r3, [r7, #0]
    d550:	3305      	adds	r3, #5
    d552:	781b      	ldrb	r3, [r3, #0]
    d554:	210f      	movs	r1, #15
    d556:	400b      	ands	r3, r1
    d558:	b2db      	uxtb	r3, r3
    d55a:	3337      	adds	r3, #55	; 0x37
    d55c:	b2db      	uxtb	r3, r3
    d55e:	e007      	b.n	d570 <set_dev_name_to_mac+0x64>
    d560:	683b      	ldr	r3, [r7, #0]
    d562:	3305      	adds	r3, #5
    d564:	781b      	ldrb	r3, [r3, #0]
    d566:	210f      	movs	r1, #15
    d568:	400b      	ands	r3, r1
    d56a:	b2db      	uxtb	r3, r3
    d56c:	3330      	adds	r3, #48	; 0x30
    d56e:	b2db      	uxtb	r3, r3
    d570:	7013      	strb	r3, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    d572:	230e      	movs	r3, #14
    d574:	18fb      	adds	r3, r7, r3
    d576:	881b      	ldrh	r3, [r3, #0]
    d578:	3b02      	subs	r3, #2
    d57a:	687a      	ldr	r2, [r7, #4]
    d57c:	18d2      	adds	r2, r2, r3
    d57e:	683b      	ldr	r3, [r7, #0]
    d580:	3305      	adds	r3, #5
    d582:	781b      	ldrb	r3, [r3, #0]
    d584:	091b      	lsrs	r3, r3, #4
    d586:	b2db      	uxtb	r3, r3
    d588:	0019      	movs	r1, r3
    d58a:	230f      	movs	r3, #15
    d58c:	400b      	ands	r3, r1
    d58e:	2b09      	cmp	r3, #9
    d590:	dd07      	ble.n	d5a2 <set_dev_name_to_mac+0x96>
    d592:	683b      	ldr	r3, [r7, #0]
    d594:	3305      	adds	r3, #5
    d596:	781b      	ldrb	r3, [r3, #0]
    d598:	091b      	lsrs	r3, r3, #4
    d59a:	b2db      	uxtb	r3, r3
    d59c:	3337      	adds	r3, #55	; 0x37
    d59e:	b2db      	uxtb	r3, r3
    d5a0:	e006      	b.n	d5b0 <set_dev_name_to_mac+0xa4>
    d5a2:	683b      	ldr	r3, [r7, #0]
    d5a4:	3305      	adds	r3, #5
    d5a6:	781b      	ldrb	r3, [r3, #0]
    d5a8:	091b      	lsrs	r3, r3, #4
    d5aa:	b2db      	uxtb	r3, r3
    d5ac:	3330      	adds	r3, #48	; 0x30
    d5ae:	b2db      	uxtb	r3, r3
    d5b0:	7013      	strb	r3, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    d5b2:	230e      	movs	r3, #14
    d5b4:	18fb      	adds	r3, r7, r3
    d5b6:	881b      	ldrh	r3, [r3, #0]
    d5b8:	3b04      	subs	r3, #4
    d5ba:	687a      	ldr	r2, [r7, #4]
    d5bc:	18d2      	adds	r2, r2, r3
    d5be:	683b      	ldr	r3, [r7, #0]
    d5c0:	3304      	adds	r3, #4
    d5c2:	781b      	ldrb	r3, [r3, #0]
    d5c4:	0019      	movs	r1, r3
    d5c6:	230f      	movs	r3, #15
    d5c8:	400b      	ands	r3, r1
    d5ca:	2b09      	cmp	r3, #9
    d5cc:	dd08      	ble.n	d5e0 <set_dev_name_to_mac+0xd4>
    d5ce:	683b      	ldr	r3, [r7, #0]
    d5d0:	3304      	adds	r3, #4
    d5d2:	781b      	ldrb	r3, [r3, #0]
    d5d4:	210f      	movs	r1, #15
    d5d6:	400b      	ands	r3, r1
    d5d8:	b2db      	uxtb	r3, r3
    d5da:	3337      	adds	r3, #55	; 0x37
    d5dc:	b2db      	uxtb	r3, r3
    d5de:	e007      	b.n	d5f0 <set_dev_name_to_mac+0xe4>
    d5e0:	683b      	ldr	r3, [r7, #0]
    d5e2:	3304      	adds	r3, #4
    d5e4:	781b      	ldrb	r3, [r3, #0]
    d5e6:	210f      	movs	r1, #15
    d5e8:	400b      	ands	r3, r1
    d5ea:	b2db      	uxtb	r3, r3
    d5ec:	3330      	adds	r3, #48	; 0x30
    d5ee:	b2db      	uxtb	r3, r3
    d5f0:	7013      	strb	r3, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    d5f2:	230e      	movs	r3, #14
    d5f4:	18fb      	adds	r3, r7, r3
    d5f6:	881b      	ldrh	r3, [r3, #0]
    d5f8:	3b05      	subs	r3, #5
    d5fa:	687a      	ldr	r2, [r7, #4]
    d5fc:	18d2      	adds	r2, r2, r3
    d5fe:	683b      	ldr	r3, [r7, #0]
    d600:	3304      	adds	r3, #4
    d602:	781b      	ldrb	r3, [r3, #0]
    d604:	091b      	lsrs	r3, r3, #4
    d606:	b2db      	uxtb	r3, r3
    d608:	0019      	movs	r1, r3
    d60a:	230f      	movs	r3, #15
    d60c:	400b      	ands	r3, r1
    d60e:	2b09      	cmp	r3, #9
    d610:	dd07      	ble.n	d622 <set_dev_name_to_mac+0x116>
    d612:	683b      	ldr	r3, [r7, #0]
    d614:	3304      	adds	r3, #4
    d616:	781b      	ldrb	r3, [r3, #0]
    d618:	091b      	lsrs	r3, r3, #4
    d61a:	b2db      	uxtb	r3, r3
    d61c:	3337      	adds	r3, #55	; 0x37
    d61e:	b2db      	uxtb	r3, r3
    d620:	e006      	b.n	d630 <set_dev_name_to_mac+0x124>
    d622:	683b      	ldr	r3, [r7, #0]
    d624:	3304      	adds	r3, #4
    d626:	781b      	ldrb	r3, [r3, #0]
    d628:	091b      	lsrs	r3, r3, #4
    d62a:	b2db      	uxtb	r3, r3
    d62c:	3330      	adds	r3, #48	; 0x30
    d62e:	b2db      	uxtb	r3, r3
    d630:	7013      	strb	r3, [r2, #0]
	}
}
    d632:	46c0      	nop			; (mov r8, r8)
    d634:	46bd      	mov	sp, r7
    d636:	b005      	add	sp, #20
    d638:	bd90      	pop	{r4, r7, pc}
    d63a:	46c0      	nop			; (mov r8, r8)
    d63c:	00000ccd 	.word	0x00000ccd

0000d640 <configure_button_led>:

static void configure_button_led(void)
{
    d640:	b580      	push	{r7, lr}
    d642:	b082      	sub	sp, #8
    d644:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    d646:	1d3b      	adds	r3, r7, #4
    d648:	0018      	movs	r0, r3
    d64a:	4b09      	ldr	r3, [pc, #36]	; (d670 <configure_button_led+0x30>)
    d64c:	4798      	blx	r3
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    d64e:	1d3b      	adds	r3, r7, #4
    d650:	2201      	movs	r2, #1
    d652:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED0_PIN, &pin_conf);
    d654:	1d3b      	adds	r3, r7, #4
    d656:	0019      	movs	r1, r3
    d658:	2017      	movs	r0, #23
    d65a:	4b06      	ldr	r3, [pc, #24]	; (d674 <configure_button_led+0x34>)
    d65c:	4798      	blx	r3
	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    d65e:	2101      	movs	r1, #1
    d660:	2017      	movs	r0, #23
    d662:	4b05      	ldr	r3, [pc, #20]	; (d678 <configure_button_led+0x38>)
    d664:	4798      	blx	r3
}
    d666:	46c0      	nop			; (mov r8, r8)
    d668:	46bd      	mov	sp, r7
    d66a:	b002      	add	sp, #8
    d66c:	bd80      	pop	{r7, pc}
    d66e:	46c0      	nop			; (mov r8, r8)
    d670:	0000d015 	.word	0x0000d015
    d674:	0000691d 	.word	0x0000691d
    d678:	0000d07d 	.word	0x0000d07d

0000d67c <configure_light_sensor>:

static void configure_light_sensor(void)
{
    d67c:	b580      	push	{r7, lr}
    d67e:	b08c      	sub	sp, #48	; 0x30
    d680:	af00      	add	r7, sp, #0
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
    d682:	003b      	movs	r3, r7
    d684:	0018      	movs	r0, r3
    d686:	4b12      	ldr	r3, [pc, #72]	; (d6d0 <configure_light_sensor+0x54>)
    d688:	4798      	blx	r3

	config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
    d68a:	003b      	movs	r3, r7
    d68c:	22f0      	movs	r2, #240	; 0xf0
    d68e:	0512      	lsls	r2, r2, #20
    d690:	609a      	str	r2, [r3, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV512;
    d692:	003b      	movs	r3, r7
    d694:	22e0      	movs	r2, #224	; 0xe0
    d696:	00d2      	lsls	r2, r2, #3
    d698:	805a      	strh	r2, [r3, #2]
	config_adc.reference = ADC_REFERENCE_INTVCC1;
    d69a:	003b      	movs	r3, r7
    d69c:	2202      	movs	r2, #2
    d69e:	705a      	strb	r2, [r3, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
    d6a0:	003b      	movs	r3, r7
    d6a2:	2200      	movs	r2, #0
    d6a4:	731a      	strb	r2, [r3, #12]
	config_adc.resolution = ADC_RESOLUTION_12BIT;
    d6a6:	003b      	movs	r3, r7
    d6a8:	2200      	movs	r2, #0
    d6aa:	711a      	strb	r2, [r3, #4]
	config_adc.clock_source = GCLK_GENERATOR_0;
    d6ac:	003b      	movs	r3, r7
    d6ae:	2200      	movs	r2, #0
    d6b0:	701a      	strb	r2, [r3, #0]
	adc_init(&adc_instance, ADC, &config_adc);
    d6b2:	003a      	movs	r2, r7
    d6b4:	4907      	ldr	r1, [pc, #28]	; (d6d4 <configure_light_sensor+0x58>)
    d6b6:	4b08      	ldr	r3, [pc, #32]	; (d6d8 <configure_light_sensor+0x5c>)
    d6b8:	0018      	movs	r0, r3
    d6ba:	4b08      	ldr	r3, [pc, #32]	; (d6dc <configure_light_sensor+0x60>)
    d6bc:	4798      	blx	r3
	adc_enable(&adc_instance);
    d6be:	4b06      	ldr	r3, [pc, #24]	; (d6d8 <configure_light_sensor+0x5c>)
    d6c0:	0018      	movs	r0, r3
    d6c2:	4b07      	ldr	r3, [pc, #28]	; (d6e0 <configure_light_sensor+0x64>)
    d6c4:	4798      	blx	r3
}
    d6c6:	46c0      	nop			; (mov r8, r8)
    d6c8:	46bd      	mov	sp, r7
    d6ca:	b00c      	add	sp, #48	; 0x30
    d6cc:	bd80      	pop	{r7, pc}
    d6ce:	46c0      	nop			; (mov r8, r8)
    d6d0:	000059d9 	.word	0x000059d9
    d6d4:	42004000 	.word	0x42004000
    d6d8:	200045e4 	.word	0x200045e4
    d6dc:	00006029 	.word	0x00006029
    d6e0:	0000cecd 	.word	0x0000cecd

0000d6e4 <task_3s>:


static void task_3s(void *args)
{
    d6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6e6:	b0cd      	sub	sp, #308	; 0x134
    d6e8:	af04      	add	r7, sp, #16
    d6ea:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    d6ec:	2300      	movs	r3, #0
    d6ee:	2400      	movs	r4, #0
    d6f0:	228c      	movs	r2, #140	; 0x8c
    d6f2:	0052      	lsls	r2, r2, #1
    d6f4:	18ba      	adds	r2, r7, r2
    d6f6:	6013      	str	r3, [r2, #0]
    d6f8:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    d6fa:	2389      	movs	r3, #137	; 0x89
    d6fc:	005b      	lsls	r3, r3, #1
    d6fe:	18fb      	adds	r3, r7, r3
    d700:	2200      	movs	r2, #0
    d702:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    d704:	4b50      	ldr	r3, [pc, #320]	; (d848 <task_3s+0x164>)
    d706:	2290      	movs	r2, #144	; 0x90
    d708:	0052      	lsls	r2, r2, #1
    d70a:	4694      	mov	ip, r2
    d70c:	44bc      	add	ip, r7
    d70e:	4463      	add	r3, ip
    d710:	0018      	movs	r0, r3
    d712:	2380      	movs	r3, #128	; 0x80
    d714:	005b      	lsls	r3, r3, #1
    d716:	001a      	movs	r2, r3
    d718:	2100      	movs	r1, #0
    d71a:	4b4c      	ldr	r3, [pc, #304]	; (d84c <task_3s+0x168>)
    d71c:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    d71e:	4b4c      	ldr	r3, [pc, #304]	; (d850 <task_3s+0x16c>)
    d720:	228a      	movs	r2, #138	; 0x8a
    d722:	0052      	lsls	r2, r2, #1
    d724:	18ba      	adds	r2, r7, r2
    d726:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    d728:	4b4a      	ldr	r3, [pc, #296]	; (d854 <task_3s+0x170>)
    d72a:	4798      	blx	r3
    d72c:	0003      	movs	r3, r0
    d72e:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);
    d730:	238a      	movs	r3, #138	; 0x8a
    d732:	005b      	lsls	r3, r3, #1
    d734:	18fb      	adds	r3, r7, r3
    d736:	681a      	ldr	r2, [r3, #0]
    d738:	230c      	movs	r3, #12
    d73a:	18fb      	adds	r3, r7, r3
    d73c:	0011      	movs	r1, r2
    d73e:	0018      	movs	r0, r3
    d740:	4b45      	ldr	r3, [pc, #276]	; (d858 <task_3s+0x174>)
    d742:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    d744:	4b45      	ldr	r3, [pc, #276]	; (d85c <task_3s+0x178>)
    d746:	781b      	ldrb	r3, [r3, #0]
    d748:	b2db      	uxtb	r3, r3
    d74a:	2b03      	cmp	r3, #3
    d74c:	d1f0      	bne.n	d730 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    d74e:	4b44      	ldr	r3, [pc, #272]	; (d860 <task_3s+0x17c>)
    d750:	681a      	ldr	r2, [r3, #0]
    d752:	4b44      	ldr	r3, [pc, #272]	; (d864 <task_3s+0x180>)
    d754:	601a      	str	r2, [r3, #0]
            adc_start_conversion(&adc_instance);
    d756:	4b44      	ldr	r3, [pc, #272]	; (d868 <task_3s+0x184>)
    d758:	0018      	movs	r0, r3
    d75a:	4b44      	ldr	r3, [pc, #272]	; (d86c <task_3s+0x188>)
    d75c:	4798      	blx	r3
            temperature = at30tse_read_temperature();
    d75e:	4b44      	ldr	r3, [pc, #272]	; (d870 <task_3s+0x18c>)
    d760:	4798      	blx	r3
    d762:	0003      	movs	r3, r0
    d764:	000c      	movs	r4, r1
    d766:	228c      	movs	r2, #140	; 0x8c
    d768:	0052      	lsls	r2, r2, #1
    d76a:	18ba      	adds	r2, r7, r2
    d76c:	6013      	str	r3, [r2, #0]
    d76e:	6054      	str	r4, [r2, #4]
            //temperature = 0;
            adc_read(&adc_instance, &light);
    d770:	2389      	movs	r3, #137	; 0x89
    d772:	005b      	lsls	r3, r3, #1
    d774:	18fa      	adds	r2, r7, r3
    d776:	4b3c      	ldr	r3, [pc, #240]	; (d868 <task_3s+0x184>)
    d778:	0011      	movs	r1, r2
    d77a:	0018      	movs	r0, r3
    d77c:	4b3d      	ldr	r3, [pc, #244]	; (d874 <task_3s+0x190>)
    d77e:	4798      	blx	r3
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d780:	4b3d      	ldr	r3, [pc, #244]	; (d878 <task_3s+0x194>)
    d782:	228c      	movs	r2, #140	; 0x8c
    d784:	0052      	lsls	r2, r2, #1
    d786:	18ba      	adds	r2, r7, r2
    d788:	6810      	ldr	r0, [r2, #0]
    d78a:	6851      	ldr	r1, [r2, #4]
    d78c:	4798      	blx	r3
    d78e:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    d790:	4c3a      	ldr	r4, [pc, #232]	; (d87c <task_3s+0x198>)
    d792:	2200      	movs	r2, #0
    d794:	4b3a      	ldr	r3, [pc, #232]	; (d880 <task_3s+0x19c>)
    d796:	218c      	movs	r1, #140	; 0x8c
    d798:	0049      	lsls	r1, r1, #1
    d79a:	1879      	adds	r1, r7, r1
    d79c:	6808      	ldr	r0, [r1, #0]
    d79e:	6849      	ldr	r1, [r1, #4]
    d7a0:	47a0      	blx	r4
    d7a2:	0003      	movs	r3, r0
    d7a4:	000c      	movs	r4, r1
    d7a6:	0019      	movs	r1, r3
    d7a8:	0022      	movs	r2, r4
    d7aa:	4b33      	ldr	r3, [pc, #204]	; (d878 <task_3s+0x194>)
    d7ac:	0008      	movs	r0, r1
    d7ae:	0011      	movs	r1, r2
    d7b0:	4798      	blx	r3
    d7b2:	0002      	movs	r2, r0
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d7b4:	4b33      	ldr	r3, [pc, #204]	; (d884 <task_3s+0x1a0>)
    d7b6:	2164      	movs	r1, #100	; 0x64
    d7b8:	0010      	movs	r0, r2
    d7ba:	4798      	blx	r3
    d7bc:	000b      	movs	r3, r1
    d7be:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    d7c0:	2389      	movs	r3, #137	; 0x89
    d7c2:	005b      	lsls	r3, r3, #1
    d7c4:	18fb      	adds	r3, r7, r3
    d7c6:	881b      	ldrh	r3, [r3, #0]
    d7c8:	001a      	movs	r2, r3
    d7ca:	2380      	movs	r3, #128	; 0x80
    d7cc:	015b      	lsls	r3, r3, #5
    d7ce:	1a9b      	subs	r3, r3, r2
    d7d0:	2264      	movs	r2, #100	; 0x64
    d7d2:	4353      	muls	r3, r2
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	da02      	bge.n	d7de <task_3s+0xfa>
    d7d8:	4a2b      	ldr	r2, [pc, #172]	; (d888 <task_3s+0x1a4>)
    d7da:	4694      	mov	ip, r2
    d7dc:	4463      	add	r3, ip
    d7de:	131b      	asrs	r3, r3, #12
    d7e0:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    d7e2:	2017      	movs	r0, #23
    d7e4:	4b29      	ldr	r3, [pc, #164]	; (d88c <task_3s+0x1a8>)
    d7e6:	4798      	blx	r3
    d7e8:	1e03      	subs	r3, r0, #0
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);
            temperature = at30tse_read_temperature();
            //temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d7ea:	d001      	beq.n	d7f0 <task_3s+0x10c>
    d7ec:	4b28      	ldr	r3, [pc, #160]	; (d890 <task_3s+0x1ac>)
    d7ee:	e000      	b.n	d7f2 <task_3s+0x10e>
    d7f0:	4b28      	ldr	r3, [pc, #160]	; (d894 <task_3s+0x1b0>)
    d7f2:	4a29      	ldr	r2, [pc, #164]	; (d898 <task_3s+0x1b4>)
    d7f4:	4929      	ldr	r1, [pc, #164]	; (d89c <task_3s+0x1b8>)
    d7f6:	2010      	movs	r0, #16
    d7f8:	1838      	adds	r0, r7, r0
    d7fa:	9302      	str	r3, [sp, #8]
    d7fc:	9501      	str	r5, [sp, #4]
    d7fe:	9400      	str	r4, [sp, #0]
    d800:	0033      	movs	r3, r6
    d802:	4c27      	ldr	r4, [pc, #156]	; (d8a0 <task_3s+0x1bc>)
    d804:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    d806:	2310      	movs	r3, #16
    d808:	18fa      	adds	r2, r7, r3
    d80a:	4b26      	ldr	r3, [pc, #152]	; (d8a4 <task_3s+0x1c0>)
    d80c:	0011      	movs	r1, r2
    d80e:	0018      	movs	r0, r3
    d810:	4b25      	ldr	r3, [pc, #148]	; (d8a8 <task_3s+0x1c4>)
    d812:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    d814:	4b25      	ldr	r3, [pc, #148]	; (d8ac <task_3s+0x1c8>)
    d816:	681b      	ldr	r3, [r3, #0]
    d818:	2253      	movs	r2, #83	; 0x53
    d81a:	569b      	ldrsb	r3, [r3, r2]
    d81c:	0018      	movs	r0, r3
    d81e:	4b24      	ldr	r3, [pc, #144]	; (d8b0 <task_3s+0x1cc>)
    d820:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    d822:	4b22      	ldr	r3, [pc, #136]	; (d8ac <task_3s+0x1c8>)
    d824:	681b      	ldr	r3, [r3, #0]
    d826:	2252      	movs	r2, #82	; 0x52
    d828:	2100      	movs	r1, #0
    d82a:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    d82c:	4b1f      	ldr	r3, [pc, #124]	; (d8ac <task_3s+0x1c8>)
    d82e:	681b      	ldr	r3, [r3, #0]
    d830:	2250      	movs	r2, #80	; 0x50
    d832:	2102      	movs	r1, #2
    d834:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    d836:	4b1d      	ldr	r3, [pc, #116]	; (d8ac <task_3s+0x1c8>)
    d838:	681b      	ldr	r3, [r3, #0]
    d83a:	2210      	movs	r2, #16
    d83c:	18ba      	adds	r2, r7, r2
    d83e:	4916      	ldr	r1, [pc, #88]	; (d898 <task_3s+0x1b4>)
    d840:	0018      	movs	r0, r3
    d842:	4b1c      	ldr	r3, [pc, #112]	; (d8b4 <task_3s+0x1d0>)
    d844:	4798      	blx	r3
        }        
    }
    d846:	e773      	b.n	d730 <task_3s+0x4c>
    d848:	fffffef0 	.word	0xfffffef0
    d84c:	000107bf 	.word	0x000107bf
    d850:	00000bb8 	.word	0x00000bb8
    d854:	0000bee1 	.word	0x0000bee1
    d858:	0000bc49 	.word	0x0000bc49
    d85c:	20003d04 	.word	0x20003d04
    d860:	20003d08 	.word	0x20003d08
    d864:	20003d0c 	.word	0x20003d0c
    d868:	200045e4 	.word	0x200045e4
    d86c:	0000cf2d 	.word	0x0000cf2d
    d870:	00005771 	.word	0x00005771
    d874:	0000cf75 	.word	0x0000cf75
    d878:	00010559 	.word	0x00010559
    d87c:	0000f9bd 	.word	0x0000f9bd
    d880:	40590000 	.word	0x40590000
    d884:	0000ecd5 	.word	0x0000ecd5
    d888:	00000fff 	.word	0x00000fff
    d88c:	0000d039 	.word	0x0000d039
    d890:	000131b8 	.word	0x000131b8
    d894:	000131bc 	.word	0x000131bc
    d898:	2000001c 	.word	0x2000001c
    d89c:	000131c0 	.word	0x000131c0
    d8a0:	00011081 	.word	0x00011081
    d8a4:	00013204 	.word	0x00013204
    d8a8:	00010d75 	.word	0x00010d75
    d8ac:	20003d1c 	.word	0x20003d1c
    d8b0:	00004f81 	.word	0x00004f81
    d8b4:	0000e5d5 	.word	0x0000e5d5

0000d8b8 <task_1s>:
}

static void task_1s(void *args)
{
    d8b8:	b580      	push	{r7, lr}
    d8ba:	b086      	sub	sp, #24
    d8bc:	af00      	add	r7, sp, #0
    d8be:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    d8c0:	4b45      	ldr	r3, [pc, #276]	; (d9d8 <task_1s+0x120>)
    d8c2:	4798      	blx	r3
    d8c4:	0003      	movs	r3, r0
    d8c6:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    d8c8:	23fa      	movs	r3, #250	; 0xfa
    d8ca:	009b      	lsls	r3, r3, #2
    d8cc:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    d8ce:	697a      	ldr	r2, [r7, #20]
    d8d0:	230c      	movs	r3, #12
    d8d2:	18fb      	adds	r3, r7, r3
    d8d4:	0011      	movs	r1, r2
    d8d6:	0018      	movs	r0, r3
    d8d8:	4b40      	ldr	r3, [pc, #256]	; (d9dc <task_1s+0x124>)
    d8da:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    d8dc:	4b40      	ldr	r3, [pc, #256]	; (d9e0 <task_1s+0x128>)
    d8de:	781b      	ldrb	r3, [r3, #0]
    d8e0:	b2db      	uxtb	r3, r3
    d8e2:	2b03      	cmp	r3, #3
    d8e4:	d1f3      	bne.n	d8ce <task_1s+0x16>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    d8e6:	4b3f      	ldr	r3, [pc, #252]	; (d9e4 <task_1s+0x12c>)
    d8e8:	681b      	ldr	r3, [r3, #0]
    d8ea:	2252      	movs	r2, #82	; 0x52
    d8ec:	5c9b      	ldrb	r3, [r3, r2]
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d1ed      	bne.n	d8ce <task_1s+0x16>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    d8f2:	4b3c      	ldr	r3, [pc, #240]	; (d9e4 <task_1s+0x12c>)
    d8f4:	681b      	ldr	r3, [r3, #0]
    d8f6:	2251      	movs	r2, #81	; 0x51
    d8f8:	5c9b      	ldrb	r3, [r3, r2]
    d8fa:	2b00      	cmp	r3, #0
    d8fc:	d00b      	beq.n	d916 <task_1s+0x5e>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    d8fe:	4b39      	ldr	r3, [pc, #228]	; (d9e4 <task_1s+0x12c>)
    d900:	681b      	ldr	r3, [r3, #0]
    d902:	2251      	movs	r2, #81	; 0x51
    d904:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    d906:	2b02      	cmp	r3, #2
    d908:	d110      	bne.n	d92c <task_1s+0x74>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    d90a:	4b36      	ldr	r3, [pc, #216]	; (d9e4 <task_1s+0x12c>)
    d90c:	681b      	ldr	r3, [r3, #0]
    d90e:	2250      	movs	r2, #80	; 0x50
    d910:	5c9b      	ldrb	r3, [r3, r2]
    d912:	2b00      	cmp	r3, #0
    d914:	d10a      	bne.n	d92c <task_1s+0x74>
                    printf("main: subscribe event, PNR_OK\r\n");
    d916:	4b34      	ldr	r3, [pc, #208]	; (d9e8 <task_1s+0x130>)
    d918:	0018      	movs	r0, r3
    d91a:	4b34      	ldr	r3, [pc, #208]	; (d9ec <task_1s+0x134>)
    d91c:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    d91e:	4b31      	ldr	r3, [pc, #196]	; (d9e4 <task_1s+0x12c>)
    d920:	681b      	ldr	r3, [r3, #0]
    d922:	4a33      	ldr	r2, [pc, #204]	; (d9f0 <task_1s+0x138>)
    d924:	0011      	movs	r1, r2
    d926:	0018      	movs	r0, r3
    d928:	4b32      	ldr	r3, [pc, #200]	; (d9f4 <task_1s+0x13c>)
    d92a:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    d92c:	4b2d      	ldr	r3, [pc, #180]	; (d9e4 <task_1s+0x12c>)
    d92e:	681b      	ldr	r3, [r3, #0]
    d930:	0018      	movs	r0, r3
    d932:	4b31      	ldr	r3, [pc, #196]	; (d9f8 <task_1s+0x140>)
    d934:	4798      	blx	r3
    d936:	0003      	movs	r3, r0
    d938:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    d93a:	693b      	ldr	r3, [r7, #16]
    d93c:	2b00      	cmp	r3, #0
    d93e:	d031      	beq.n	d9a4 <task_1s+0xec>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    d940:	693b      	ldr	r3, [r7, #16]
    d942:	3302      	adds	r3, #2
    d944:	492d      	ldr	r1, [pc, #180]	; (d9fc <task_1s+0x144>)
    d946:	2203      	movs	r2, #3
    d948:	0018      	movs	r0, r3
    d94a:	4b2d      	ldr	r3, [pc, #180]	; (da00 <task_1s+0x148>)
    d94c:	4798      	blx	r3
    d94e:	1e03      	subs	r3, r0, #0
    d950:	d121      	bne.n	d996 <task_1s+0xde>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    d952:	693a      	ldr	r2, [r7, #16]
    d954:	4b2b      	ldr	r3, [pc, #172]	; (da04 <task_1s+0x14c>)
    d956:	0011      	movs	r1, r2
    d958:	0018      	movs	r0, r3
    d95a:	4b2b      	ldr	r3, [pc, #172]	; (da08 <task_1s+0x150>)
    d95c:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    d95e:	693b      	ldr	r3, [r7, #16]
    d960:	3308      	adds	r3, #8
    d962:	492a      	ldr	r1, [pc, #168]	; (da0c <task_1s+0x154>)
    d964:	2202      	movs	r2, #2
    d966:	0018      	movs	r0, r3
    d968:	4b25      	ldr	r3, [pc, #148]	; (da00 <task_1s+0x148>)
    d96a:	4798      	blx	r3
    d96c:	1e03      	subs	r3, r0, #0
    d96e:	d104      	bne.n	d97a <task_1s+0xc2>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    d970:	2100      	movs	r1, #0
    d972:	2017      	movs	r0, #23
    d974:	4b26      	ldr	r3, [pc, #152]	; (da10 <task_1s+0x158>)
    d976:	4798      	blx	r3
    d978:	e7d8      	b.n	d92c <task_1s+0x74>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    d97a:	693b      	ldr	r3, [r7, #16]
    d97c:	3308      	adds	r3, #8
    d97e:	4925      	ldr	r1, [pc, #148]	; (da14 <task_1s+0x15c>)
    d980:	2203      	movs	r2, #3
    d982:	0018      	movs	r0, r3
    d984:	4b1e      	ldr	r3, [pc, #120]	; (da00 <task_1s+0x148>)
    d986:	4798      	blx	r3
    d988:	1e03      	subs	r3, r0, #0
    d98a:	d1cf      	bne.n	d92c <task_1s+0x74>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    d98c:	2101      	movs	r1, #1
    d98e:	2017      	movs	r0, #23
    d990:	4b1f      	ldr	r3, [pc, #124]	; (da10 <task_1s+0x158>)
    d992:	4798      	blx	r3
    d994:	e7ca      	b.n	d92c <task_1s+0x74>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    d996:	693a      	ldr	r2, [r7, #16]
    d998:	4b1f      	ldr	r3, [pc, #124]	; (da18 <task_1s+0x160>)
    d99a:	0011      	movs	r1, r2
    d99c:	0018      	movs	r0, r3
    d99e:	4b1a      	ldr	r3, [pc, #104]	; (da08 <task_1s+0x150>)
    d9a0:	4798      	blx	r3
                    }
                }
    d9a2:	e7c3      	b.n	d92c <task_1s+0x74>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    d9a4:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    d9a6:	4b1d      	ldr	r3, [pc, #116]	; (da1c <task_1s+0x164>)
    d9a8:	681a      	ldr	r2, [r3, #0]
    d9aa:	4b1d      	ldr	r3, [pc, #116]	; (da20 <task_1s+0x168>)
    d9ac:	681b      	ldr	r3, [r3, #0]
    d9ae:	1ad2      	subs	r2, r2, r3
    d9b0:	23fa      	movs	r3, #250	; 0xfa
    d9b2:	009b      	lsls	r3, r3, #2
    d9b4:	429a      	cmp	r2, r3
    d9b6:	d98a      	bls.n	d8ce <task_1s+0x16>
                    gu32subscribeDelay = gu32MsTicks;
    d9b8:	4b18      	ldr	r3, [pc, #96]	; (da1c <task_1s+0x164>)
    d9ba:	681a      	ldr	r2, [r3, #0]
    d9bc:	4b18      	ldr	r3, [pc, #96]	; (da20 <task_1s+0x168>)
    d9be:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    d9c0:	4b18      	ldr	r3, [pc, #96]	; (da24 <task_1s+0x16c>)
    d9c2:	0018      	movs	r0, r3
    d9c4:	4b09      	ldr	r3, [pc, #36]	; (d9ec <task_1s+0x134>)
    d9c6:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    d9c8:	4b06      	ldr	r3, [pc, #24]	; (d9e4 <task_1s+0x12c>)
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	4a08      	ldr	r2, [pc, #32]	; (d9f0 <task_1s+0x138>)
    d9ce:	0011      	movs	r1, r2
    d9d0:	0018      	movs	r0, r3
    d9d2:	4b08      	ldr	r3, [pc, #32]	; (d9f4 <task_1s+0x13c>)
    d9d4:	4798      	blx	r3
                }
            }
        }        
    }
    d9d6:	e77a      	b.n	d8ce <task_1s+0x16>
    d9d8:	0000bee1 	.word	0x0000bee1
    d9dc:	0000bc49 	.word	0x0000bc49
    d9e0:	20003d04 	.word	0x20003d04
    d9e4:	20003d1c 	.word	0x20003d1c
    d9e8:	00013220 	.word	0x00013220
    d9ec:	00010e95 	.word	0x00010e95
    d9f0:	2000001c 	.word	0x2000001c
    d9f4:	0000e7cd 	.word	0x0000e7cd
    d9f8:	0000e949 	.word	0x0000e949
    d9fc:	00013240 	.word	0x00013240
    da00:	000110f7 	.word	0x000110f7
    da04:	00013244 	.word	0x00013244
    da08:	00010d75 	.word	0x00010d75
    da0c:	00013270 	.word	0x00013270
    da10:	0000d07d 	.word	0x0000d07d
    da14:	00013274 	.word	0x00013274
    da18:	00013278 	.word	0x00013278
    da1c:	20003d08 	.word	0x20003d08
    da20:	20003d10 	.word	0x20003d10
    da24:	00013298 	.word	0x00013298

0000da28 <task_100Hz>:

}

static void task_100Hz(void *args)
{
    da28:	b580      	push	{r7, lr}
    da2a:	b084      	sub	sp, #16
    da2c:	af00      	add	r7, sp, #0
    da2e:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(100);
    da30:	2364      	movs	r3, #100	; 0x64
    da32:	60fb      	str	r3, [r7, #12]

    lastTimer = xTaskGetTickCount();
    da34:	4b05      	ldr	r3, [pc, #20]	; (da4c <task_100Hz+0x24>)
    da36:	4798      	blx	r3
    da38:	0003      	movs	r3, r0
    da3a:	60bb      	str	r3, [r7, #8]
    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    da3c:	68fa      	ldr	r2, [r7, #12]
    da3e:	2308      	movs	r3, #8
    da40:	18fb      	adds	r3, r7, r3
    da42:	0011      	movs	r1, r2
    da44:	0018      	movs	r0, r3
    da46:	4b02      	ldr	r3, [pc, #8]	; (da50 <task_100Hz+0x28>)
    da48:	4798      	blx	r3

       //m2m_wifi_handle_events(NULL);        
    }
    da4a:	e7f7      	b.n	da3c <task_100Hz+0x14>
    da4c:	0000bee1 	.word	0x0000bee1
    da50:	0000bc49 	.word	0x0000bc49

0000da54 <vApplicationStackOverflowHook>:

}*/

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    da54:	b580      	push	{r7, lr}
    da56:	b082      	sub	sp, #8
    da58:	af00      	add	r7, sp, #0
    da5a:	6078      	str	r0, [r7, #4]
    da5c:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    da5e:	683a      	ldr	r2, [r7, #0]
    da60:	4b02      	ldr	r3, [pc, #8]	; (da6c <vApplicationStackOverflowHook+0x18>)
    da62:	0011      	movs	r1, r2
    da64:	0018      	movs	r0, r3
    da66:	4b02      	ldr	r3, [pc, #8]	; (da70 <vApplicationStackOverflowHook+0x1c>)
    da68:	4798      	blx	r3
    while (1) {}
    da6a:	e7fe      	b.n	da6a <vApplicationStackOverflowHook+0x16>
    da6c:	000132bc 	.word	0x000132bc
    da70:	00010d75 	.word	0x00010d75

0000da74 <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    da74:	b590      	push	{r4, r7, lr}
    da76:	b08d      	sub	sp, #52	; 0x34
    da78:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    da7a:	4b52      	ldr	r3, [pc, #328]	; (dbc4 <main+0x150>)
    da7c:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    da7e:	4b52      	ldr	r3, [pc, #328]	; (dbc8 <main+0x154>)
    da80:	4798      	blx	r3

	/* Output example information. */
	printf(STRING_HEADER);
    da82:	4b52      	ldr	r3, [pc, #328]	; (dbcc <main+0x158>)
    da84:	0018      	movs	r0, r3
    da86:	4b52      	ldr	r3, [pc, #328]	; (dbd0 <main+0x15c>)
    da88:	4798      	blx	r3

	/* Initialize the delay driver. */
	delay_init();
    da8a:	4b52      	ldr	r3, [pc, #328]	; (dbd4 <main+0x160>)
    da8c:	4798      	blx	r3

	/* Initialize the Temperature Sensor. */
	at30tse_init();
    da8e:	4b52      	ldr	r3, [pc, #328]	; (dbd8 <main+0x164>)
    da90:	4798      	blx	r3

	/* Initialize the Light Sensor. */
	configure_light_sensor();
    da92:	4b52      	ldr	r3, [pc, #328]	; (dbdc <main+0x168>)
    da94:	4798      	blx	r3

	/* Initialize the Button/LED. */
	configure_button_led();
    da96:	4b52      	ldr	r3, [pc, #328]	; (dbe0 <main+0x16c>)
    da98:	4798      	blx	r3

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    da9a:	4b52      	ldr	r3, [pc, #328]	; (dbe4 <main+0x170>)
    da9c:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    da9e:	230c      	movs	r3, #12
    daa0:	18fb      	adds	r3, r7, r3
    daa2:	2218      	movs	r2, #24
    daa4:	2100      	movs	r1, #0
    daa6:	0018      	movs	r0, r3
    daa8:	4b4f      	ldr	r3, [pc, #316]	; (dbe8 <main+0x174>)
    daaa:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    daac:	230c      	movs	r3, #12
    daae:	18fb      	adds	r3, r7, r3
    dab0:	4a4e      	ldr	r2, [pc, #312]	; (dbec <main+0x178>)
    dab2:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    dab4:	4b4e      	ldr	r3, [pc, #312]	; (dbf0 <main+0x17c>)
    dab6:	681a      	ldr	r2, [r3, #0]
    dab8:	4b4e      	ldr	r3, [pc, #312]	; (dbf4 <main+0x180>)
    daba:	601a      	str	r2, [r3, #0]
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	s8InitStatus = m2m_wifi_init(&wifiInitParam);
    dabc:	2327      	movs	r3, #39	; 0x27
    dabe:	18fc      	adds	r4, r7, r3
    dac0:	230c      	movs	r3, #12
    dac2:	18fb      	adds	r3, r7, r3
    dac4:	0018      	movs	r0, r3
    dac6:	4b4c      	ldr	r3, [pc, #304]	; (dbf8 <main+0x184>)
    dac8:	4798      	blx	r3
    daca:	0003      	movs	r3, r0
    dacc:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != s8InitStatus) {
    dace:	2327      	movs	r3, #39	; 0x27
    dad0:	18fb      	adds	r3, r7, r3
    dad2:	781b      	ldrb	r3, [r3, #0]
    dad4:	b25b      	sxtb	r3, r3
    dad6:	2b00      	cmp	r3, #0
    dad8:	d004      	beq.n	dae4 <main+0x70>
		printf("main: m2m_wifi_init call error!\r\n");
    dada:	4b48      	ldr	r3, [pc, #288]	; (dbfc <main+0x188>)
    dadc:	0018      	movs	r0, r3
    dade:	4b3c      	ldr	r3, [pc, #240]	; (dbd0 <main+0x15c>)
    dae0:	4798      	blx	r3
		while (1) {
		}
    dae2:	e7fe      	b.n	dae2 <main+0x6e>
	}

	/* Initialize Socket API. */
	socketInit();
    dae4:	4b46      	ldr	r3, [pc, #280]	; (dc00 <main+0x18c>)
    dae6:	4798      	blx	r3
	registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
    dae8:	4a46      	ldr	r2, [pc, #280]	; (dc04 <main+0x190>)
    daea:	4b47      	ldr	r3, [pc, #284]	; (dc08 <main+0x194>)
    daec:	0011      	movs	r1, r2
    daee:	0018      	movs	r0, r3
    daf0:	4b46      	ldr	r3, [pc, #280]	; (dc0c <main+0x198>)
    daf2:	4798      	blx	r3

	/* Read MAC address to customize device name and AP name if enabled. */
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    daf4:	1cfa      	adds	r2, r7, #3
    daf6:	1d3b      	adds	r3, r7, #4
    daf8:	0011      	movs	r1, r2
    dafa:	0018      	movs	r0, r3
    dafc:	4b44      	ldr	r3, [pc, #272]	; (dc10 <main+0x19c>)
    dafe:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    db00:	1cfb      	adds	r3, r7, #3
    db02:	781b      	ldrb	r3, [r3, #0]
    db04:	2b00      	cmp	r3, #0
    db06:	d108      	bne.n	db1a <main+0xa6>
		printf("main: MAC address fuse bit has not been configured!\r\n");
    db08:	4b42      	ldr	r3, [pc, #264]	; (dc14 <main+0x1a0>)
    db0a:	0018      	movs	r0, r3
    db0c:	4b30      	ldr	r3, [pc, #192]	; (dbd0 <main+0x15c>)
    db0e:	4798      	blx	r3
		printf("main: Use m2m_wifi_set_mac_address() API to set MAC address via software.\r\n");
    db10:	4b41      	ldr	r3, [pc, #260]	; (dc18 <main+0x1a4>)
    db12:	0018      	movs	r0, r3
    db14:	4b2e      	ldr	r3, [pc, #184]	; (dbd0 <main+0x15c>)
    db16:	4798      	blx	r3
		while (1) {
		}
    db18:	e7fe      	b.n	db18 <main+0xa4>
	}
	m2m_wifi_get_mac_address(mac_addr);
    db1a:	1d3b      	adds	r3, r7, #4
    db1c:	0018      	movs	r0, r3
    db1e:	4b3f      	ldr	r3, [pc, #252]	; (dc1c <main+0x1a8>)
    db20:	4798      	blx	r3
	set_dev_name_to_mac((uint8 *)PubNubChannel, mac_addr);
    db22:	1d3a      	adds	r2, r7, #4
    db24:	4b3e      	ldr	r3, [pc, #248]	; (dc20 <main+0x1ac>)
    db26:	0011      	movs	r1, r2
    db28:	0018      	movs	r0, r3
    db2a:	4b3e      	ldr	r3, [pc, #248]	; (dc24 <main+0x1b0>)
    db2c:	4798      	blx	r3
	printf("\r\n");
    db2e:	4b3e      	ldr	r3, [pc, #248]	; (dc28 <main+0x1b4>)
    db30:	0018      	movs	r0, r3
    db32:	4b27      	ldr	r3, [pc, #156]	; (dbd0 <main+0x15c>)
    db34:	4798      	blx	r3

	/* Initialize PubNub API. */
	printf("main: PubNub configured with following settings:\r\n");
    db36:	4b3d      	ldr	r3, [pc, #244]	; (dc2c <main+0x1b8>)
    db38:	0018      	movs	r0, r3
    db3a:	4b25      	ldr	r3, [pc, #148]	; (dbd0 <main+0x15c>)
    db3c:	4798      	blx	r3
	printf("main:  - Publish key: \"%s\", Subscribe key: \"%s\", Channel: \"%s\".\r\n\r\n",
    db3e:	4b38      	ldr	r3, [pc, #224]	; (dc20 <main+0x1ac>)
    db40:	4a3b      	ldr	r2, [pc, #236]	; (dc30 <main+0x1bc>)
    db42:	493c      	ldr	r1, [pc, #240]	; (dc34 <main+0x1c0>)
    db44:	483c      	ldr	r0, [pc, #240]	; (dc38 <main+0x1c4>)
    db46:	4c3d      	ldr	r4, [pc, #244]	; (dc3c <main+0x1c8>)
    db48:	47a0      	blx	r4
	PubNubPublishKey, PubNubSubscribeKey, PubNubChannel);
	pPubNubCfg = pubnub_get_ctx(0);
    db4a:	2000      	movs	r0, #0
    db4c:	4b3c      	ldr	r3, [pc, #240]	; (dc40 <main+0x1cc>)
    db4e:	4798      	blx	r3
    db50:	0002      	movs	r2, r0
    db52:	4b3c      	ldr	r3, [pc, #240]	; (dc44 <main+0x1d0>)
    db54:	601a      	str	r2, [r3, #0]
	pubnub_init(pPubNubCfg, PubNubPublishKey, PubNubSubscribeKey);
    db56:	4b3b      	ldr	r3, [pc, #236]	; (dc44 <main+0x1d0>)
    db58:	681b      	ldr	r3, [r3, #0]
    db5a:	4a35      	ldr	r2, [pc, #212]	; (dc30 <main+0x1bc>)
    db5c:	4935      	ldr	r1, [pc, #212]	; (dc34 <main+0x1c0>)
    db5e:	0018      	movs	r0, r3
    db60:	4b39      	ldr	r3, [pc, #228]	; (dc48 <main+0x1d4>)
    db62:	4798      	blx	r3

	/* Connect to AP using Wi-Fi settings from main.h. */
	printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
    db64:	4b39      	ldr	r3, [pc, #228]	; (dc4c <main+0x1d8>)
    db66:	0018      	movs	r0, r3
    db68:	4b19      	ldr	r3, [pc, #100]	; (dbd0 <main+0x15c>)
    db6a:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    db6c:	4a38      	ldr	r2, [pc, #224]	; (dc50 <main+0x1dc>)
    db6e:	4839      	ldr	r0, [pc, #228]	; (dc54 <main+0x1e0>)
    db70:	23ff      	movs	r3, #255	; 0xff
    db72:	9300      	str	r3, [sp, #0]
    db74:	0013      	movs	r3, r2
    db76:	2202      	movs	r2, #2
    db78:	211b      	movs	r1, #27
    db7a:	4c37      	ldr	r4, [pc, #220]	; (dc58 <main+0x1e4>)
    db7c:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE + 412, 0, TASK_3S_PRIORITY, NULL);
    db7e:	2380      	movs	r3, #128	; 0x80
    db80:	009a      	lsls	r2, r3, #2
    db82:	4936      	ldr	r1, [pc, #216]	; (dc5c <main+0x1e8>)
    db84:	4836      	ldr	r0, [pc, #216]	; (dc60 <main+0x1ec>)
    db86:	2300      	movs	r3, #0
    db88:	9301      	str	r3, [sp, #4]
    db8a:	2301      	movs	r3, #1
    db8c:	9300      	str	r3, [sp, #0]
    db8e:	2300      	movs	r3, #0
    db90:	4c34      	ldr	r4, [pc, #208]	; (dc64 <main+0x1f0>)
    db92:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);
    db94:	4934      	ldr	r1, [pc, #208]	; (dc68 <main+0x1f4>)
    db96:	4835      	ldr	r0, [pc, #212]	; (dc6c <main+0x1f8>)
    db98:	2300      	movs	r3, #0
    db9a:	9301      	str	r3, [sp, #4]
    db9c:	2301      	movs	r3, #1
    db9e:	9300      	str	r3, [sp, #0]
    dba0:	2300      	movs	r3, #0
    dba2:	2264      	movs	r2, #100	; 0x64
    dba4:	4c2f      	ldr	r4, [pc, #188]	; (dc64 <main+0x1f0>)
    dba6:	47a0      	blx	r4
    xTaskCreate(task_100Hz, "task_100Hz", configMINIMAL_STACK_SIZE, 0, TASK_100HZ_PRIORITY, NULL);
    dba8:	4931      	ldr	r1, [pc, #196]	; (dc70 <main+0x1fc>)
    dbaa:	4832      	ldr	r0, [pc, #200]	; (dc74 <main+0x200>)
    dbac:	2300      	movs	r3, #0
    dbae:	9301      	str	r3, [sp, #4]
    dbb0:	2301      	movs	r3, #1
    dbb2:	9300      	str	r3, [sp, #0]
    dbb4:	2300      	movs	r3, #0
    dbb6:	2264      	movs	r2, #100	; 0x64
    dbb8:	4c2a      	ldr	r4, [pc, #168]	; (dc64 <main+0x1f0>)
    dbba:	47a0      	blx	r4

    vTaskStartScheduler();
    dbbc:	4b2e      	ldr	r3, [pc, #184]	; (dc78 <main+0x204>)
    dbbe:	4798      	blx	r3

    while(1) {}
    dbc0:	e7fe      	b.n	dbc0 <main+0x14c>
    dbc2:	46c0      	nop			; (mov r8, r8)
    dbc4:	0000a7dd 	.word	0x0000a7dd
    dbc8:	0000d499 	.word	0x0000d499
    dbcc:	000132d4 	.word	0x000132d4
    dbd0:	00010e95 	.word	0x00010e95
    dbd4:	00000149 	.word	0x00000149
    dbd8:	0000562d 	.word	0x0000562d
    dbdc:	0000d67d 	.word	0x0000d67d
    dbe0:	0000d641 	.word	0x0000d641
    dbe4:	00000349 	.word	0x00000349
    dbe8:	000107bf 	.word	0x000107bf
    dbec:	0000d3c1 	.word	0x0000d3c1
    dbf0:	20003d08 	.word	0x20003d08
    dbf4:	20003d14 	.word	0x20003d14
    dbf8:	00001a21 	.word	0x00001a21
    dbfc:	00013334 	.word	0x00013334
    dc00:	000049b9 	.word	0x000049b9
    dc04:	0000d365 	.word	0x0000d365
    dc08:	0000d331 	.word	0x0000d331
    dc0c:	00004a09 	.word	0x00004a09
    dc10:	00002069 	.word	0x00002069
    dc14:	00013358 	.word	0x00013358
    dc18:	00013390 	.word	0x00013390
    dc1c:	000020dd 	.word	0x000020dd
    dc20:	2000001c 	.word	0x2000001c
    dc24:	0000d50d 	.word	0x0000d50d
    dc28:	000133dc 	.word	0x000133dc
    dc2c:	000133e0 	.word	0x000133e0
    dc30:	00013098 	.word	0x00013098
    dc34:	00013090 	.word	0x00013090
    dc38:	00013414 	.word	0x00013414
    dc3c:	00010d75 	.word	0x00010d75
    dc40:	0000e501 	.word	0x0000e501
    dc44:	20003d1c 	.word	0x20003d1c
    dc48:	0000e551 	.word	0x0000e551
    dc4c:	00013458 	.word	0x00013458
    dc50:	00013154 	.word	0x00013154
    dc54:	00013160 	.word	0x00013160
    dc58:	00001bad 	.word	0x00001bad
    dc5c:	00013498 	.word	0x00013498
    dc60:	0000d6e5 	.word	0x0000d6e5
    dc64:	0000b9d1 	.word	0x0000b9d1
    dc68:	000134a0 	.word	0x000134a0
    dc6c:	0000d8b9 	.word	0x0000d8b9
    dc70:	000134a8 	.word	0x000134a8
    dc74:	0000da29 	.word	0x0000da29
    dc78:	0000bd11 	.word	0x0000bd11

0000dc7c <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    dc7c:	b590      	push	{r4, r7, lr}
    dc7e:	b0dd      	sub	sp, #372	; 0x174
    dc80:	af00      	add	r7, sp, #0
    dc82:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    dc84:	687b      	ldr	r3, [r7, #4]
    dc86:	2252      	movs	r2, #82	; 0x52
    dc88:	5c9b      	ldrb	r3, [r3, r2]
    dc8a:	2b03      	cmp	r3, #3
    dc8c:	d126      	bne.n	dcdc <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    dc8e:	4b1e      	ldr	r3, [pc, #120]	; (dd08 <handle_transaction+0x8c>)
    dc90:	22b8      	movs	r2, #184	; 0xb8
    dc92:	0052      	lsls	r2, r2, #1
    dc94:	4694      	mov	ip, r2
    dc96:	44bc      	add	ip, r7
    dc98:	4463      	add	r3, ip
    dc9a:	0018      	movs	r0, r3
    dc9c:	2366      	movs	r3, #102	; 0x66
    dc9e:	33ff      	adds	r3, #255	; 0xff
    dca0:	001a      	movs	r2, r3
    dca2:	2100      	movs	r1, #0
    dca4:	4b19      	ldr	r3, [pc, #100]	; (dd0c <handle_transaction+0x90>)
    dca6:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    dca8:	687b      	ldr	r3, [r7, #4]
    dcaa:	3354      	adds	r3, #84	; 0x54
    dcac:	001a      	movs	r2, r3
    dcae:	4b18      	ldr	r3, [pc, #96]	; (dd10 <handle_transaction+0x94>)
    dcb0:	4918      	ldr	r1, [pc, #96]	; (dd14 <handle_transaction+0x98>)
    dcb2:	2008      	movs	r0, #8
    dcb4:	1838      	adds	r0, r7, r0
    dcb6:	4c18      	ldr	r4, [pc, #96]	; (dd18 <handle_transaction+0x9c>)
    dcb8:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    dcba:	687b      	ldr	r3, [r7, #4]
    dcbc:	2253      	movs	r2, #83	; 0x53
    dcbe:	569c      	ldrsb	r4, [r3, r2]
    dcc0:	2308      	movs	r3, #8
    dcc2:	18fb      	adds	r3, r7, r3
    dcc4:	0018      	movs	r0, r3
    dcc6:	4b15      	ldr	r3, [pc, #84]	; (dd1c <handle_transaction+0xa0>)
    dcc8:	4798      	blx	r3
    dcca:	0003      	movs	r3, r0
    dccc:	b29a      	uxth	r2, r3
    dcce:	2308      	movs	r3, #8
    dcd0:	18f9      	adds	r1, r7, r3
    dcd2:	2300      	movs	r3, #0
    dcd4:	0020      	movs	r0, r4
    dcd6:	4c12      	ldr	r4, [pc, #72]	; (dd20 <handle_transaction+0xa4>)
    dcd8:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    dcda:	e010      	b.n	dcfe <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	2252      	movs	r2, #82	; 0x52
    dce0:	5c9b      	ldrb	r3, [r3, r2]
    dce2:	2b04      	cmp	r3, #4
    dce4:	d10b      	bne.n	dcfe <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    dce6:	687b      	ldr	r3, [r7, #4]
    dce8:	2253      	movs	r2, #83	; 0x53
    dcea:	5698      	ldrsb	r0, [r3, r2]
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	3354      	adds	r3, #84	; 0x54
    dcf0:	0019      	movs	r1, r3
    dcf2:	4c0c      	ldr	r4, [pc, #48]	; (dd24 <handle_transaction+0xa8>)
    dcf4:	2380      	movs	r3, #128	; 0x80
    dcf6:	005a      	lsls	r2, r3, #1
    dcf8:	0023      	movs	r3, r4
    dcfa:	4c0b      	ldr	r4, [pc, #44]	; (dd28 <handle_transaction+0xac>)
    dcfc:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    dcfe:	46c0      	nop			; (mov r8, r8)
    dd00:	46bd      	mov	sp, r7
    dd02:	b05d      	add	sp, #372	; 0x174
    dd04:	bd90      	pop	{r4, r7, pc}
    dd06:	46c0      	nop			; (mov r8, r8)
    dd08:	fffffe98 	.word	0xfffffe98
    dd0c:	000107bf 	.word	0x000107bf
    dd10:	000134b4 	.word	0x000134b4
    dd14:	000134c8 	.word	0x000134c8
    dd18:	00011081 	.word	0x00011081
    dd1c:	000110e9 	.word	0x000110e9
    dd20:	00004c9d 	.word	0x00004c9d
    dd24:	00007530 	.word	0x00007530
    dd28:	00004e01 	.word	0x00004e01

0000dd2c <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    dd2c:	b580      	push	{r7, lr}
    dd2e:	b082      	sub	sp, #8
    dd30:	af00      	add	r7, sp, #0
    dd32:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    dd34:	687a      	ldr	r2, [r7, #4]
    dd36:	4b09      	ldr	r3, [pc, #36]	; (dd5c <valid_ctx_prt+0x30>)
    dd38:	429a      	cmp	r2, r3
    dd3a:	d305      	bcc.n	dd48 <valid_ctx_prt+0x1c>
    dd3c:	4b08      	ldr	r3, [pc, #32]	; (dd60 <valid_ctx_prt+0x34>)
    dd3e:	687a      	ldr	r2, [r7, #4]
    dd40:	429a      	cmp	r2, r3
    dd42:	d201      	bcs.n	dd48 <valid_ctx_prt+0x1c>
    dd44:	2301      	movs	r3, #1
    dd46:	e000      	b.n	dd4a <valid_ctx_prt+0x1e>
    dd48:	2300      	movs	r3, #0
    dd4a:	1c1a      	adds	r2, r3, #0
    dd4c:	2301      	movs	r3, #1
    dd4e:	4013      	ands	r3, r2
    dd50:	b2db      	uxtb	r3, r3
}
    dd52:	0018      	movs	r0, r3
    dd54:	46bd      	mov	sp, r7
    dd56:	b002      	add	sp, #8
    dd58:	bd80      	pop	{r7, pc}
    dd5a:	46c0      	nop			; (mov r8, r8)
    dd5c:	20003d54 	.word	0x20003d54
    dd60:	20004434 	.word	0x20004434

0000dd64 <pubnub_find_ctx>:

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
    dd64:	b580      	push	{r7, lr}
    dd66:	b084      	sub	sp, #16
    dd68:	af00      	add	r7, sp, #0
    dd6a:	0002      	movs	r2, r0
    dd6c:	1dfb      	adds	r3, r7, #7
    dd6e:	701a      	strb	r2, [r3, #0]
    dd70:	1dbb      	adds	r3, r7, #6
    dd72:	1c0a      	adds	r2, r1, #0
    dd74:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    dd76:	4b11      	ldr	r3, [pc, #68]	; (ddbc <pubnub_find_ctx+0x58>)
    dd78:	60fb      	str	r3, [r7, #12]
    dd7a:	e016      	b.n	ddaa <pubnub_find_ctx+0x46>
		if (pb->state == state && pb->tcp_socket == sock) {
    dd7c:	68fb      	ldr	r3, [r7, #12]
    dd7e:	2252      	movs	r2, #82	; 0x52
    dd80:	5c9b      	ldrb	r3, [r3, r2]
    dd82:	1dba      	adds	r2, r7, #6
    dd84:	7812      	ldrb	r2, [r2, #0]
    dd86:	429a      	cmp	r2, r3
    dd88:	d109      	bne.n	dd9e <pubnub_find_ctx+0x3a>
    dd8a:	68fb      	ldr	r3, [r7, #12]
    dd8c:	2253      	movs	r2, #83	; 0x53
    dd8e:	569b      	ldrsb	r3, [r3, r2]
    dd90:	1dfa      	adds	r2, r7, #7
    dd92:	7812      	ldrb	r2, [r2, #0]
    dd94:	b252      	sxtb	r2, r2
    dd96:	429a      	cmp	r2, r3
    dd98:	d101      	bne.n	dd9e <pubnub_find_ctx+0x3a>
			return pb;
    dd9a:	68fb      	ldr	r3, [r7, #12]
    dd9c:	e00a      	b.n	ddb4 <pubnub_find_ctx+0x50>

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    dd9e:	68fb      	ldr	r3, [r7, #12]
    dda0:	22dc      	movs	r2, #220	; 0xdc
    dda2:	0092      	lsls	r2, r2, #2
    dda4:	4694      	mov	ip, r2
    dda6:	4463      	add	r3, ip
    dda8:	60fb      	str	r3, [r7, #12]
    ddaa:	4b05      	ldr	r3, [pc, #20]	; (ddc0 <pubnub_find_ctx+0x5c>)
    ddac:	68fa      	ldr	r2, [r7, #12]
    ddae:	429a      	cmp	r2, r3
    ddb0:	d1e4      	bne.n	dd7c <pubnub_find_ctx+0x18>
		if (pb->state == state && pb->tcp_socket == sock) {
			return pb;
		}
	}

	return NULL;
    ddb2:	2300      	movs	r3, #0
}
    ddb4:	0018      	movs	r0, r3
    ddb6:	46bd      	mov	sp, r7
    ddb8:	b004      	add	sp, #16
    ddba:	bd80      	pop	{r7, pc}
    ddbc:	20003d54 	.word	0x20003d54
    ddc0:	20004434 	.word	0x20004434

0000ddc4 <handle_start_connect>:

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    ddc4:	b590      	push	{r4, r7, lr}
    ddc6:	b083      	sub	sp, #12
    ddc8:	af00      	add	r7, sp, #0
    ddca:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    ddcc:	687b      	ldr	r3, [r7, #4]
    ddce:	0018      	movs	r0, r3
    ddd0:	4b2f      	ldr	r3, [pc, #188]	; (de90 <handle_start_connect+0xcc>)
    ddd2:	4798      	blx	r3
    ddd4:	1e03      	subs	r3, r0, #0
    ddd6:	d105      	bne.n	dde4 <handle_start_connect+0x20>
    ddd8:	4b2e      	ldr	r3, [pc, #184]	; (de94 <handle_start_connect+0xd0>)
    ddda:	4a2f      	ldr	r2, [pc, #188]	; (de98 <handle_start_connect+0xd4>)
    dddc:	482f      	ldr	r0, [pc, #188]	; (de9c <handle_start_connect+0xd8>)
    ddde:	2154      	movs	r1, #84	; 0x54
    dde0:	4c2f      	ldr	r4, [pc, #188]	; (dea0 <handle_start_connect+0xdc>)
    dde2:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    dde4:	687b      	ldr	r3, [r7, #4]
    dde6:	2252      	movs	r2, #82	; 0x52
    dde8:	5c9b      	ldrb	r3, [r3, r2]
    ddea:	2b00      	cmp	r3, #0
    ddec:	d00f      	beq.n	de0e <handle_start_connect+0x4a>
    ddee:	687b      	ldr	r3, [r7, #4]
    ddf0:	2252      	movs	r2, #82	; 0x52
    ddf2:	5c9b      	ldrb	r3, [r3, r2]
    ddf4:	2b01      	cmp	r3, #1
    ddf6:	d00a      	beq.n	de0e <handle_start_connect+0x4a>
    ddf8:	687b      	ldr	r3, [r7, #4]
    ddfa:	2252      	movs	r2, #82	; 0x52
    ddfc:	5c9b      	ldrb	r3, [r3, r2]
    ddfe:	2b02      	cmp	r3, #2
    de00:	d005      	beq.n	de0e <handle_start_connect+0x4a>
    de02:	4b28      	ldr	r3, [pc, #160]	; (dea4 <handle_start_connect+0xe0>)
    de04:	4a24      	ldr	r2, [pc, #144]	; (de98 <handle_start_connect+0xd4>)
    de06:	4825      	ldr	r0, [pc, #148]	; (de9c <handle_start_connect+0xd8>)
    de08:	2155      	movs	r1, #85	; 0x55
    de0a:	4c25      	ldr	r4, [pc, #148]	; (dea0 <handle_start_connect+0xdc>)
    de0c:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    de0e:	687b      	ldr	r3, [r7, #4]
    de10:	2252      	movs	r2, #82	; 0x52
    de12:	5c9b      	ldrb	r3, [r3, r2]
    de14:	2b00      	cmp	r3, #0
    de16:	d12c      	bne.n	de72 <handle_start_connect+0xae>
    de18:	687b      	ldr	r3, [r7, #4]
    de1a:	2253      	movs	r2, #83	; 0x53
    de1c:	569b      	ldrsb	r3, [r3, r2]
    de1e:	2b00      	cmp	r3, #0
    de20:	dc27      	bgt.n	de72 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    de22:	2200      	movs	r2, #0
    de24:	2101      	movs	r1, #1
    de26:	2002      	movs	r0, #2
    de28:	4b1f      	ldr	r3, [pc, #124]	; (dea8 <handle_start_connect+0xe4>)
    de2a:	4798      	blx	r3
    de2c:	0003      	movs	r3, r0
    de2e:	0019      	movs	r1, r3
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	2253      	movs	r2, #83	; 0x53
    de34:	5499      	strb	r1, [r3, r2]
    de36:	687b      	ldr	r3, [r7, #4]
    de38:	2253      	movs	r2, #83	; 0x53
    de3a:	569b      	ldrsb	r3, [r3, r2]
    de3c:	2b00      	cmp	r3, #0
    de3e:	da04      	bge.n	de4a <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    de40:	4b1a      	ldr	r3, [pc, #104]	; (deac <handle_start_connect+0xe8>)
    de42:	0018      	movs	r0, r3
    de44:	4b1a      	ldr	r3, [pc, #104]	; (deb0 <handle_start_connect+0xec>)
    de46:	4798      	blx	r3
			return;
    de48:	e01f      	b.n	de8a <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    de4a:	4b1a      	ldr	r3, [pc, #104]	; (deb4 <handle_start_connect+0xf0>)
    de4c:	685b      	ldr	r3, [r3, #4]
    de4e:	2b00      	cmp	r3, #0
    de50:	d10f      	bne.n	de72 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    de52:	4b18      	ldr	r3, [pc, #96]	; (deb4 <handle_start_connect+0xf0>)
    de54:	2202      	movs	r2, #2
    de56:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    de58:	4b16      	ldr	r3, [pc, #88]	; (deb4 <handle_start_connect+0xf0>)
    de5a:	22a0      	movs	r2, #160	; 0xa0
    de5c:	01d2      	lsls	r2, r2, #7
    de5e:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    de60:	687b      	ldr	r3, [r7, #4]
    de62:	2252      	movs	r2, #82	; 0x52
    de64:	2101      	movs	r1, #1
    de66:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    de68:	4b13      	ldr	r3, [pc, #76]	; (deb8 <handle_start_connect+0xf4>)
    de6a:	0018      	movs	r0, r3
    de6c:	4b13      	ldr	r3, [pc, #76]	; (debc <handle_start_connect+0xf8>)
    de6e:	4798      	blx	r3
			return;
    de70:	e00b      	b.n	de8a <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    de72:	687b      	ldr	r3, [r7, #4]
    de74:	2253      	movs	r2, #83	; 0x53
    de76:	569b      	ldrsb	r3, [r3, r2]
    de78:	490e      	ldr	r1, [pc, #56]	; (deb4 <handle_start_connect+0xf0>)
    de7a:	2210      	movs	r2, #16
    de7c:	0018      	movs	r0, r3
    de7e:	4b10      	ldr	r3, [pc, #64]	; (dec0 <handle_start_connect+0xfc>)
    de80:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    de82:	687b      	ldr	r3, [r7, #4]
    de84:	2252      	movs	r2, #82	; 0x52
    de86:	2102      	movs	r1, #2
    de88:	5499      	strb	r1, [r3, r2]
}
    de8a:	46bd      	mov	sp, r7
    de8c:	b003      	add	sp, #12
    de8e:	bd90      	pop	{r4, r7, pc}
    de90:	0000dd2d 	.word	0x0000dd2d
    de94:	0001351c 	.word	0x0001351c
    de98:	000136c0 	.word	0x000136c0
    de9c:	00013530 	.word	0x00013530
    dea0:	000106f5 	.word	0x000106f5
    dea4:	00013540 	.word	0x00013540
    dea8:	00004a31 	.word	0x00004a31
    deac:	00013598 	.word	0x00013598
    deb0:	00010e95 	.word	0x00010e95
    deb4:	20004604 	.word	0x20004604
    deb8:	000134b4 	.word	0x000134b4
    debc:	00005091 	.word	0x00005091
    dec0:	00004b89 	.word	0x00004b89

0000dec4 <find_string_start>:

/* Find the beginning of a JSON string that comes after comma and ends
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    dec4:	b580      	push	{r7, lr}
    dec6:	b084      	sub	sp, #16
    dec8:	af00      	add	r7, sp, #0
    deca:	6078      	str	r0, [r7, #4]
    decc:	6039      	str	r1, [r7, #0]
	int i;
	for (i = len - 1; i > 0; i--) {
    dece:	683b      	ldr	r3, [r7, #0]
    ded0:	3b01      	subs	r3, #1
    ded2:	60fb      	str	r3, [r7, #12]
    ded4:	e014      	b.n	df00 <find_string_start+0x3c>
		if (buf[i] == '"') {
    ded6:	68fb      	ldr	r3, [r7, #12]
    ded8:	687a      	ldr	r2, [r7, #4]
    deda:	18d3      	adds	r3, r2, r3
    dedc:	781b      	ldrb	r3, [r3, #0]
    dede:	2b22      	cmp	r3, #34	; 0x22
    dee0:	d10b      	bne.n	defa <find_string_start+0x36>
			return (buf[i - 1] == ',') ? i : -1;
    dee2:	68fb      	ldr	r3, [r7, #12]
    dee4:	3b01      	subs	r3, #1
    dee6:	687a      	ldr	r2, [r7, #4]
    dee8:	18d3      	adds	r3, r2, r3
    deea:	781b      	ldrb	r3, [r3, #0]
    deec:	2b2c      	cmp	r3, #44	; 0x2c
    deee:	d101      	bne.n	def4 <find_string_start+0x30>
    def0:	68fb      	ldr	r3, [r7, #12]
    def2:	e00a      	b.n	df0a <find_string_start+0x46>
    def4:	2301      	movs	r3, #1
    def6:	425b      	negs	r3, r3
    def8:	e007      	b.n	df0a <find_string_start+0x46>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
	int i;
	for (i = len - 1; i > 0; i--) {
    defa:	68fb      	ldr	r3, [r7, #12]
    defc:	3b01      	subs	r3, #1
    defe:	60fb      	str	r3, [r7, #12]
    df00:	68fb      	ldr	r3, [r7, #12]
    df02:	2b00      	cmp	r3, #0
    df04:	dce7      	bgt.n	ded6 <find_string_start+0x12>
		if (buf[i] == '"') {
			return (buf[i - 1] == ',') ? i : -1;
		}
	}
	return -1;
    df06:	2301      	movs	r3, #1
    df08:	425b      	negs	r3, r3
}
    df0a:	0018      	movs	r0, r3
    df0c:	46bd      	mov	sp, r7
    df0e:	b004      	add	sp, #16
    df10:	bd80      	pop	{r7, pc}
    df12:	46c0      	nop			; (mov r8, r8)

0000df14 <split_array>:

/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    df14:	b580      	push	{r7, lr}
    df16:	b084      	sub	sp, #16
    df18:	af00      	add	r7, sp, #0
    df1a:	6078      	str	r0, [r7, #4]
	bool escaped = false;
    df1c:	230f      	movs	r3, #15
    df1e:	18fb      	adds	r3, r7, r3
    df20:	2200      	movs	r2, #0
    df22:	701a      	strb	r2, [r3, #0]
	bool in_string = false;
    df24:	230e      	movs	r3, #14
    df26:	18fb      	adds	r3, r7, r3
    df28:	2200      	movs	r2, #0
    df2a:	701a      	strb	r2, [r3, #0]
	int bracket_level = 0;
    df2c:	2300      	movs	r3, #0
    df2e:	60bb      	str	r3, [r7, #8]

	for (; *buf != '\0'; ++buf) {
    df30:	e04e      	b.n	dfd0 <split_array+0xbc>
		if (escaped) {
    df32:	230f      	movs	r3, #15
    df34:	18fb      	adds	r3, r7, r3
    df36:	781b      	ldrb	r3, [r3, #0]
    df38:	2b00      	cmp	r3, #0
    df3a:	d004      	beq.n	df46 <split_array+0x32>
			escaped = false;
    df3c:	230f      	movs	r3, #15
    df3e:	18fb      	adds	r3, r7, r3
    df40:	2200      	movs	r2, #0
    df42:	701a      	strb	r2, [r3, #0]
    df44:	e041      	b.n	dfca <split_array+0xb6>
		} else if ('"' == *buf) {
    df46:	687b      	ldr	r3, [r7, #4]
    df48:	781b      	ldrb	r3, [r3, #0]
    df4a:	2b22      	cmp	r3, #34	; 0x22
    df4c:	d111      	bne.n	df72 <split_array+0x5e>
			in_string = !in_string;
    df4e:	230e      	movs	r3, #14
    df50:	18fb      	adds	r3, r7, r3
    df52:	781b      	ldrb	r3, [r3, #0]
    df54:	1e5a      	subs	r2, r3, #1
    df56:	4193      	sbcs	r3, r2
    df58:	b2db      	uxtb	r3, r3
    df5a:	2201      	movs	r2, #1
    df5c:	4053      	eors	r3, r2
    df5e:	b2db      	uxtb	r3, r3
    df60:	001a      	movs	r2, r3
    df62:	230e      	movs	r3, #14
    df64:	18fb      	adds	r3, r7, r3
    df66:	701a      	strb	r2, [r3, #0]
    df68:	781a      	ldrb	r2, [r3, #0]
    df6a:	2101      	movs	r1, #1
    df6c:	400a      	ands	r2, r1
    df6e:	701a      	strb	r2, [r3, #0]
    df70:	e02b      	b.n	dfca <split_array+0xb6>
		} else if (in_string) {
    df72:	230e      	movs	r3, #14
    df74:	18fb      	adds	r3, r7, r3
    df76:	781b      	ldrb	r3, [r3, #0]
    df78:	2b00      	cmp	r3, #0
    df7a:	d008      	beq.n	df8e <split_array+0x7a>
			escaped = ('\\' == *buf);
    df7c:	687b      	ldr	r3, [r7, #4]
    df7e:	781a      	ldrb	r2, [r3, #0]
    df80:	230f      	movs	r3, #15
    df82:	18fb      	adds	r3, r7, r3
    df84:	3a5c      	subs	r2, #92	; 0x5c
    df86:	4251      	negs	r1, r2
    df88:	414a      	adcs	r2, r1
    df8a:	701a      	strb	r2, [r3, #0]
    df8c:	e01d      	b.n	dfca <split_array+0xb6>
		} else {
			switch (*buf) {
    df8e:	687b      	ldr	r3, [r7, #4]
    df90:	781b      	ldrb	r3, [r3, #0]
    df92:	2b5d      	cmp	r3, #93	; 0x5d
    df94:	d00e      	beq.n	dfb4 <split_array+0xa0>
    df96:	dc04      	bgt.n	dfa2 <split_array+0x8e>
    df98:	2b2c      	cmp	r3, #44	; 0x2c
    df9a:	d00f      	beq.n	dfbc <split_array+0xa8>
    df9c:	2b5b      	cmp	r3, #91	; 0x5b
    df9e:	d005      	beq.n	dfac <split_array+0x98>
				}

				break;

			default:
				break;
    dfa0:	e013      	b.n	dfca <split_array+0xb6>
		} else if ('"' == *buf) {
			in_string = !in_string;
		} else if (in_string) {
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
    dfa2:	2b7b      	cmp	r3, #123	; 0x7b
    dfa4:	d002      	beq.n	dfac <split_array+0x98>
    dfa6:	2b7d      	cmp	r3, #125	; 0x7d
    dfa8:	d004      	beq.n	dfb4 <split_array+0xa0>
				}

				break;

			default:
				break;
    dfaa:	e00e      	b.n	dfca <split_array+0xb6>
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
			case '[':
			case '{':
				bracket_level++; break;
    dfac:	68bb      	ldr	r3, [r7, #8]
    dfae:	3301      	adds	r3, #1
    dfb0:	60bb      	str	r3, [r7, #8]
    dfb2:	e00a      	b.n	dfca <split_array+0xb6>

			case ']':
			case '}':
				bracket_level--; break;
    dfb4:	68bb      	ldr	r3, [r7, #8]
    dfb6:	3b01      	subs	r3, #1
    dfb8:	60bb      	str	r3, [r7, #8]
    dfba:	e006      	b.n	dfca <split_array+0xb6>

			/* if at root, split! */
			case ',':
				if (bracket_level == 0) {
    dfbc:	68bb      	ldr	r3, [r7, #8]
    dfbe:	2b00      	cmp	r3, #0
    dfc0:	d102      	bne.n	dfc8 <split_array+0xb4>
					*buf = '\0';
    dfc2:	687b      	ldr	r3, [r7, #4]
    dfc4:	2200      	movs	r2, #0
    dfc6:	701a      	strb	r2, [r3, #0]
				}

				break;
    dfc8:	46c0      	nop			; (mov r8, r8)
{
	bool escaped = false;
	bool in_string = false;
	int bracket_level = 0;

	for (; *buf != '\0'; ++buf) {
    dfca:	687b      	ldr	r3, [r7, #4]
    dfcc:	3301      	adds	r3, #1
    dfce:	607b      	str	r3, [r7, #4]
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	781b      	ldrb	r3, [r3, #0]
    dfd4:	2b00      	cmp	r3, #0
    dfd6:	d1ac      	bne.n	df32 <split_array+0x1e>
				break;
			}
		}
	}

	return !(escaped || in_string || (bracket_level > 0));
    dfd8:	230f      	movs	r3, #15
    dfda:	18fb      	adds	r3, r7, r3
    dfdc:	781b      	ldrb	r3, [r3, #0]
    dfde:	2201      	movs	r2, #1
    dfe0:	4053      	eors	r3, r2
    dfe2:	b2db      	uxtb	r3, r3
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d00c      	beq.n	e002 <split_array+0xee>
    dfe8:	230e      	movs	r3, #14
    dfea:	18fb      	adds	r3, r7, r3
    dfec:	781b      	ldrb	r3, [r3, #0]
    dfee:	2201      	movs	r2, #1
    dff0:	4053      	eors	r3, r2
    dff2:	b2db      	uxtb	r3, r3
    dff4:	2b00      	cmp	r3, #0
    dff6:	d004      	beq.n	e002 <split_array+0xee>
    dff8:	68bb      	ldr	r3, [r7, #8]
    dffa:	2b00      	cmp	r3, #0
    dffc:	dc01      	bgt.n	e002 <split_array+0xee>
    dffe:	2301      	movs	r3, #1
    e000:	e000      	b.n	e004 <split_array+0xf0>
    e002:	2300      	movs	r3, #0
    e004:	1c1a      	adds	r2, r3, #0
    e006:	2301      	movs	r3, #1
    e008:	4013      	ands	r3, r2
    e00a:	b2db      	uxtb	r3, r3
}
    e00c:	0018      	movs	r0, r3
    e00e:	46bd      	mov	sp, r7
    e010:	b004      	add	sp, #16
    e012:	bd80      	pop	{r7, pc}

0000e014 <parse_subscribe_response>:

static int parse_subscribe_response(pubnub_t *p)
{
    e014:	b580      	push	{r7, lr}
    e016:	b086      	sub	sp, #24
    e018:	af00      	add	r7, sp, #0
    e01a:	6078      	str	r0, [r7, #4]
	char *reply = p->http_reply;
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	3366      	adds	r3, #102	; 0x66
    e020:	33ff      	adds	r3, #255	; 0xff
    e022:	60bb      	str	r3, [r7, #8]
	unsigned int replylen = strlen(reply);
    e024:	68bb      	ldr	r3, [r7, #8]
    e026:	0018      	movs	r0, r3
    e028:	4b62      	ldr	r3, [pc, #392]	; (e1b4 <parse_subscribe_response+0x1a0>)
    e02a:	4798      	blx	r3
    e02c:	0003      	movs	r3, r0
    e02e:	617b      	str	r3, [r7, #20]
	if (reply[replylen - 1] != ']' && replylen > 2) {
    e030:	697b      	ldr	r3, [r7, #20]
    e032:	3b01      	subs	r3, #1
    e034:	68ba      	ldr	r2, [r7, #8]
    e036:	18d3      	adds	r3, r2, r3
    e038:	781b      	ldrb	r3, [r3, #0]
    e03a:	2b5d      	cmp	r3, #93	; 0x5d
    e03c:	d005      	beq.n	e04a <parse_subscribe_response+0x36>
    e03e:	697b      	ldr	r3, [r7, #20]
    e040:	2b02      	cmp	r3, #2
    e042:	d902      	bls.n	e04a <parse_subscribe_response+0x36>
		replylen -= 2; /* XXX: this seems required by Manxiang */
    e044:	697b      	ldr	r3, [r7, #20]
    e046:	3b02      	subs	r3, #2
    e048:	617b      	str	r3, [r7, #20]
	}

	if ((reply[0] != '[') || (reply[replylen - 1] != ']') || (reply[replylen - 2] != '"')) {
    e04a:	68bb      	ldr	r3, [r7, #8]
    e04c:	781b      	ldrb	r3, [r3, #0]
    e04e:	2b5b      	cmp	r3, #91	; 0x5b
    e050:	d10d      	bne.n	e06e <parse_subscribe_response+0x5a>
    e052:	697b      	ldr	r3, [r7, #20]
    e054:	3b01      	subs	r3, #1
    e056:	68ba      	ldr	r2, [r7, #8]
    e058:	18d3      	adds	r3, r2, r3
    e05a:	781b      	ldrb	r3, [r3, #0]
    e05c:	2b5d      	cmp	r3, #93	; 0x5d
    e05e:	d106      	bne.n	e06e <parse_subscribe_response+0x5a>
    e060:	697b      	ldr	r3, [r7, #20]
    e062:	3b02      	subs	r3, #2
    e064:	68ba      	ldr	r2, [r7, #8]
    e066:	18d3      	adds	r3, r2, r3
    e068:	781b      	ldrb	r3, [r3, #0]
    e06a:	2b22      	cmp	r3, #34	; 0x22
    e06c:	d002      	beq.n	e074 <parse_subscribe_response+0x60>
		return -1;
    e06e:	2301      	movs	r3, #1
    e070:	425b      	negs	r3, r3
    e072:	e09a      	b.n	e1aa <parse_subscribe_response+0x196>
	}

	/* Extract the last argument. */
	int i = find_string_start(reply, replylen - 2);
    e074:	697b      	ldr	r3, [r7, #20]
    e076:	3b02      	subs	r3, #2
    e078:	001a      	movs	r2, r3
    e07a:	68bb      	ldr	r3, [r7, #8]
    e07c:	0011      	movs	r1, r2
    e07e:	0018      	movs	r0, r3
    e080:	4b4d      	ldr	r3, [pc, #308]	; (e1b8 <parse_subscribe_response+0x1a4>)
    e082:	4798      	blx	r3
    e084:	0003      	movs	r3, r0
    e086:	613b      	str	r3, [r7, #16]
	if (i < 0) {
    e088:	693b      	ldr	r3, [r7, #16]
    e08a:	2b00      	cmp	r3, #0
    e08c:	da02      	bge.n	e094 <parse_subscribe_response+0x80>
		return -1;
    e08e:	2301      	movs	r3, #1
    e090:	425b      	negs	r3, r3
    e092:	e08a      	b.n	e1aa <parse_subscribe_response+0x196>
	}

	reply[replylen - 2] = 0;
    e094:	697b      	ldr	r3, [r7, #20]
    e096:	3b02      	subs	r3, #2
    e098:	68ba      	ldr	r2, [r7, #8]
    e09a:	18d3      	adds	r3, r2, r3
    e09c:	2200      	movs	r2, #0
    e09e:	701a      	strb	r2, [r3, #0]

	/* Now, the last argument may either be a timetoken or a channel list. */
	if (reply[i - 2] == '"') {
    e0a0:	693b      	ldr	r3, [r7, #16]
    e0a2:	3b02      	subs	r3, #2
    e0a4:	68ba      	ldr	r2, [r7, #8]
    e0a6:	18d3      	adds	r3, r2, r3
    e0a8:	781b      	ldrb	r3, [r3, #0]
    e0aa:	2b22      	cmp	r3, #34	; 0x22
    e0ac:	d13f      	bne.n	e12e <parse_subscribe_response+0x11a>
		int k;

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
    e0ae:	693b      	ldr	r3, [r7, #16]
    e0b0:	b29b      	uxth	r3, r3
    e0b2:	3301      	adds	r3, #1
    e0b4:	b299      	uxth	r1, r3
    e0b6:	687b      	ldr	r3, [r7, #4]
    e0b8:	4a40      	ldr	r2, [pc, #256]	; (e1bc <parse_subscribe_response+0x1a8>)
    e0ba:	5299      	strh	r1, [r3, r2]
		p->chan_end = replylen - 1;
    e0bc:	697b      	ldr	r3, [r7, #20]
    e0be:	b29b      	uxth	r3, r3
    e0c0:	3b01      	subs	r3, #1
    e0c2:	b299      	uxth	r1, r3
    e0c4:	687a      	ldr	r2, [r7, #4]
    e0c6:	23db      	movs	r3, #219	; 0xdb
    e0c8:	009b      	lsls	r3, r3, #2
    e0ca:	52d1      	strh	r1, [r2, r3]
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e0cc:	687a      	ldr	r2, [r7, #4]
    e0ce:	23db      	movs	r3, #219	; 0xdb
    e0d0:	009b      	lsls	r3, r3, #2
    e0d2:	5ad3      	ldrh	r3, [r2, r3]
    e0d4:	3b01      	subs	r3, #1
    e0d6:	60fb      	str	r3, [r7, #12]
    e0d8:	e00d      	b.n	e0f6 <parse_subscribe_response+0xe2>
			if (reply[k] == ',') {
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	68ba      	ldr	r2, [r7, #8]
    e0de:	18d3      	adds	r3, r2, r3
    e0e0:	781b      	ldrb	r3, [r3, #0]
    e0e2:	2b2c      	cmp	r3, #44	; 0x2c
    e0e4:	d104      	bne.n	e0f0 <parse_subscribe_response+0xdc>
				reply[k] = 0;
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	68ba      	ldr	r2, [r7, #8]
    e0ea:	18d3      	adds	r3, r2, r3
    e0ec:	2200      	movs	r2, #0
    e0ee:	701a      	strb	r2, [r3, #0]

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
		p->chan_end = replylen - 1;
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e0f0:	68fb      	ldr	r3, [r7, #12]
    e0f2:	3b01      	subs	r3, #1
    e0f4:	60fb      	str	r3, [r7, #12]
    e0f6:	687b      	ldr	r3, [r7, #4]
    e0f8:	4a30      	ldr	r2, [pc, #192]	; (e1bc <parse_subscribe_response+0x1a8>)
    e0fa:	5a9b      	ldrh	r3, [r3, r2]
    e0fc:	1e1a      	subs	r2, r3, #0
    e0fe:	68fb      	ldr	r3, [r7, #12]
    e100:	429a      	cmp	r2, r3
    e102:	dbea      	blt.n	e0da <parse_subscribe_response+0xc6>
				reply[k] = 0;
			}
		}

		/* ... and look for timetoken again. */
		reply[i - 2] = 0;
    e104:	693b      	ldr	r3, [r7, #16]
    e106:	3b02      	subs	r3, #2
    e108:	68ba      	ldr	r2, [r7, #8]
    e10a:	18d3      	adds	r3, r2, r3
    e10c:	2200      	movs	r2, #0
    e10e:	701a      	strb	r2, [r3, #0]
		i = find_string_start(reply, i - 2);
    e110:	693b      	ldr	r3, [r7, #16]
    e112:	1e9a      	subs	r2, r3, #2
    e114:	68bb      	ldr	r3, [r7, #8]
    e116:	0011      	movs	r1, r2
    e118:	0018      	movs	r0, r3
    e11a:	4b27      	ldr	r3, [pc, #156]	; (e1b8 <parse_subscribe_response+0x1a4>)
    e11c:	4798      	blx	r3
    e11e:	0003      	movs	r3, r0
    e120:	613b      	str	r3, [r7, #16]
		if (i < 0) {
    e122:	693b      	ldr	r3, [r7, #16]
    e124:	2b00      	cmp	r3, #0
    e126:	da0b      	bge.n	e140 <parse_subscribe_response+0x12c>
			return -1;
    e128:	2301      	movs	r3, #1
    e12a:	425b      	negs	r3, r3
    e12c:	e03d      	b.n	e1aa <parse_subscribe_response+0x196>
		}
	} else {
		p->chan_ofs = 0;
    e12e:	687b      	ldr	r3, [r7, #4]
    e130:	4a22      	ldr	r2, [pc, #136]	; (e1bc <parse_subscribe_response+0x1a8>)
    e132:	2100      	movs	r1, #0
    e134:	5299      	strh	r1, [r3, r2]
		p->chan_end = 0;
    e136:	687a      	ldr	r2, [r7, #4]
    e138:	23db      	movs	r3, #219	; 0xdb
    e13a:	009b      	lsls	r3, r3, #2
    e13c:	2100      	movs	r1, #0
    e13e:	52d1      	strh	r1, [r2, r3]
	 * [[1,2,3],"5678"]
	 * [[1,2,3],"5678","a,b,c"]
	 *          ^-- here */

	/* Setup timetoken. */
	if (replylen >= sizeof(p->timetoken) + 2 + (i + 1)) {
    e140:	693b      	ldr	r3, [r7, #16]
    e142:	3343      	adds	r3, #67	; 0x43
    e144:	1e1a      	subs	r2, r3, #0
    e146:	697b      	ldr	r3, [r7, #20]
    e148:	429a      	cmp	r2, r3
    e14a:	d802      	bhi.n	e152 <parse_subscribe_response+0x13e>
		return -1;
    e14c:	2301      	movs	r3, #1
    e14e:	425b      	negs	r3, r3
    e150:	e02b      	b.n	e1aa <parse_subscribe_response+0x196>
	}

	strcpy(p->timetoken, reply + i + 1);
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	3310      	adds	r3, #16
    e156:	0018      	movs	r0, r3
    e158:	693b      	ldr	r3, [r7, #16]
    e15a:	3301      	adds	r3, #1
    e15c:	68ba      	ldr	r2, [r7, #8]
    e15e:	18d3      	adds	r3, r2, r3
    e160:	0019      	movs	r1, r3
    e162:	4b17      	ldr	r3, [pc, #92]	; (e1c0 <parse_subscribe_response+0x1ac>)
    e164:	4798      	blx	r3
	reply[i - 2] = 0; /* terminate the [] message array (before the ]!) */
    e166:	693b      	ldr	r3, [r7, #16]
    e168:	3b02      	subs	r3, #2
    e16a:	68ba      	ldr	r2, [r7, #8]
    e16c:	18d3      	adds	r3, r2, r3
    e16e:	2200      	movs	r2, #0
    e170:	701a      	strb	r2, [r3, #0]

	/* Set up the message list - offset, length and NUL-characters splitting the messages. */
	p->msg_ofs = 2;
    e172:	687b      	ldr	r3, [r7, #4]
    e174:	4a13      	ldr	r2, [pc, #76]	; (e1c4 <parse_subscribe_response+0x1b0>)
    e176:	2102      	movs	r1, #2
    e178:	5299      	strh	r1, [r3, r2]
	p->msg_end = i - 2;
    e17a:	693b      	ldr	r3, [r7, #16]
    e17c:	b29b      	uxth	r3, r3
    e17e:	3b02      	subs	r3, #2
    e180:	b299      	uxth	r1, r3
    e182:	687a      	ldr	r2, [r7, #4]
    e184:	23da      	movs	r3, #218	; 0xda
    e186:	009b      	lsls	r3, r3, #2
    e188:	52d1      	strh	r1, [r2, r3]

	return split_array(reply + p->msg_ofs) ? 0 : -1;
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	4a0d      	ldr	r2, [pc, #52]	; (e1c4 <parse_subscribe_response+0x1b0>)
    e18e:	5a9b      	ldrh	r3, [r3, r2]
    e190:	001a      	movs	r2, r3
    e192:	68bb      	ldr	r3, [r7, #8]
    e194:	189b      	adds	r3, r3, r2
    e196:	0018      	movs	r0, r3
    e198:	4b0b      	ldr	r3, [pc, #44]	; (e1c8 <parse_subscribe_response+0x1b4>)
    e19a:	4798      	blx	r3
    e19c:	1e03      	subs	r3, r0, #0
    e19e:	d001      	beq.n	e1a4 <parse_subscribe_response+0x190>
    e1a0:	2300      	movs	r3, #0
    e1a2:	e001      	b.n	e1a8 <parse_subscribe_response+0x194>
    e1a4:	2301      	movs	r3, #1
    e1a6:	425b      	negs	r3, r3
    e1a8:	46c0      	nop			; (mov r8, r8)
}
    e1aa:	0018      	movs	r0, r3
    e1ac:	46bd      	mov	sp, r7
    e1ae:	b006      	add	sp, #24
    e1b0:	bd80      	pop	{r7, pc}
    e1b2:	46c0      	nop			; (mov r8, r8)
    e1b4:	000110e9 	.word	0x000110e9
    e1b8:	0000dec5 	.word	0x0000dec5
    e1bc:	0000036a 	.word	0x0000036a
    e1c0:	000110d9 	.word	0x000110d9
    e1c4:	00000366 	.word	0x00000366
    e1c8:	0000df15 	.word	0x0000df15

0000e1cc <handle_tcpip_connect>:

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e1cc:	b580      	push	{r7, lr}
    e1ce:	b084      	sub	sp, #16
    e1d0:	af00      	add	r7, sp, #0
    e1d2:	603a      	str	r2, [r7, #0]
    e1d4:	1dfb      	adds	r3, r7, #7
    e1d6:	1c02      	adds	r2, r0, #0
    e1d8:	701a      	strb	r2, [r3, #0]
    e1da:	1dbb      	adds	r3, r7, #6
    e1dc:	1c0a      	adds	r2, r1, #0
    e1de:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_CONNECT);
    e1e0:	1dfb      	adds	r3, r7, #7
    e1e2:	781b      	ldrb	r3, [r3, #0]
    e1e4:	b25b      	sxtb	r3, r3
    e1e6:	2102      	movs	r1, #2
    e1e8:	0018      	movs	r0, r3
    e1ea:	4b16      	ldr	r3, [pc, #88]	; (e244 <handle_tcpip_connect+0x78>)
    e1ec:	4798      	blx	r3
    e1ee:	0003      	movs	r3, r0
    e1f0:	60fb      	str	r3, [r7, #12]

	if (pb != NULL) {
    e1f2:	68fb      	ldr	r3, [r7, #12]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d020      	beq.n	e23a <handle_tcpip_connect+0x6e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    e1f8:	683b      	ldr	r3, [r7, #0]
    e1fa:	60bb      	str	r3, [r7, #8]
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    e1fc:	68bb      	ldr	r3, [r7, #8]
    e1fe:	2b00      	cmp	r3, #0
    e200:	d00d      	beq.n	e21e <handle_tcpip_connect+0x52>
    e202:	68bb      	ldr	r3, [r7, #8]
    e204:	785b      	ldrb	r3, [r3, #1]
    e206:	b25b      	sxtb	r3, r3
    e208:	2b00      	cmp	r3, #0
    e20a:	db08      	blt.n	e21e <handle_tcpip_connect+0x52>
			PUBNUB_PRINTF("handle_tcpip_connect : connect success!\r\n");
			pb->state = PS_WAIT_SEND;
    e20c:	68fb      	ldr	r3, [r7, #12]
    e20e:	2252      	movs	r2, #82	; 0x52
    e210:	2103      	movs	r1, #3
    e212:	5499      	strb	r1, [r3, r2]

			handle_transaction(pb);
    e214:	68fb      	ldr	r3, [r7, #12]
    e216:	0018      	movs	r0, r3
    e218:	4b0b      	ldr	r3, [pc, #44]	; (e248 <handle_tcpip_connect+0x7c>)
    e21a:	4798      	blx	r3

			pb->state = PS_IDLE;
			pb->last_result = PNR_IO_ERROR;
		}
	}
}
    e21c:	e00d      	b.n	e23a <handle_tcpip_connect+0x6e>
			pb->state = PS_WAIT_SEND;

			handle_transaction(pb);
		} else {
			PUBNUB_PRINTF("handle_tcpip_connect : connect error!\r\n");
			close(pb->tcp_socket);
    e21e:	68fb      	ldr	r3, [r7, #12]
    e220:	2253      	movs	r2, #83	; 0x53
    e222:	569b      	ldrsb	r3, [r3, r2]
    e224:	0018      	movs	r0, r3
    e226:	4b09      	ldr	r3, [pc, #36]	; (e24c <handle_tcpip_connect+0x80>)
    e228:	4798      	blx	r3

			pb->state = PS_IDLE;
    e22a:	68fb      	ldr	r3, [r7, #12]
    e22c:	2252      	movs	r2, #82	; 0x52
    e22e:	2100      	movs	r1, #0
    e230:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e232:	68fb      	ldr	r3, [r7, #12]
    e234:	2250      	movs	r2, #80	; 0x50
    e236:	2102      	movs	r1, #2
    e238:	5499      	strb	r1, [r3, r2]
		}
	}
}
    e23a:	46c0      	nop			; (mov r8, r8)
    e23c:	46bd      	mov	sp, r7
    e23e:	b004      	add	sp, #16
    e240:	bd80      	pop	{r7, pc}
    e242:	46c0      	nop			; (mov r8, r8)
    e244:	0000dd65 	.word	0x0000dd65
    e248:	0000dc7d 	.word	0x0000dc7d
    e24c:	00004f81 	.word	0x00004f81

0000e250 <handle_tcpip_recv>:

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e250:	b580      	push	{r7, lr}
    e252:	b086      	sub	sp, #24
    e254:	af00      	add	r7, sp, #0
    e256:	603a      	str	r2, [r7, #0]
    e258:	1dfb      	adds	r3, r7, #7
    e25a:	1c02      	adds	r2, r0, #0
    e25c:	701a      	strb	r2, [r3, #0]
    e25e:	1dbb      	adds	r3, r7, #6
    e260:	1c0a      	adds	r2, r1, #0
    e262:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e264:	4b57      	ldr	r3, [pc, #348]	; (e3c4 <handle_tcpip_recv+0x174>)
    e266:	617b      	str	r3, [r7, #20]
    e268:	e012      	b.n	e290 <handle_tcpip_recv+0x40>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
    e26a:	697b      	ldr	r3, [r7, #20]
    e26c:	2252      	movs	r2, #82	; 0x52
    e26e:	5c9b      	ldrb	r3, [r3, r2]
    e270:	2b04      	cmp	r3, #4
    e272:	d107      	bne.n	e284 <handle_tcpip_recv+0x34>
    e274:	697b      	ldr	r3, [r7, #20]
    e276:	2253      	movs	r2, #83	; 0x53
    e278:	569b      	ldrsb	r3, [r3, r2]
    e27a:	1dfa      	adds	r2, r7, #7
    e27c:	7812      	ldrb	r2, [r2, #0]
    e27e:	b252      	sxtb	r2, r2
    e280:	429a      	cmp	r2, r3
    e282:	d00a      	beq.n	e29a <handle_tcpip_recv+0x4a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e284:	697b      	ldr	r3, [r7, #20]
    e286:	22dc      	movs	r2, #220	; 0xdc
    e288:	0092      	lsls	r2, r2, #2
    e28a:	4694      	mov	ip, r2
    e28c:	4463      	add	r3, ip
    e28e:	617b      	str	r3, [r7, #20]
    e290:	4b4d      	ldr	r3, [pc, #308]	; (e3c8 <handle_tcpip_recv+0x178>)
    e292:	697a      	ldr	r2, [r7, #20]
    e294:	429a      	cmp	r2, r3
    e296:	d1e8      	bne.n	e26a <handle_tcpip_recv+0x1a>
    e298:	e000      	b.n	e29c <handle_tcpip_recv+0x4c>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
    e29a:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (pb != NULL) {
    e29c:	697b      	ldr	r3, [r7, #20]
    e29e:	2b00      	cmp	r3, #0
    e2a0:	d100      	bne.n	e2a4 <handle_tcpip_recv+0x54>
    e2a2:	e08b      	b.n	e3bc <handle_tcpip_recv+0x16c>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    e2a4:	683b      	ldr	r3, [r7, #0]
    e2a6:	613b      	str	r3, [r7, #16]

		if (pstrRecv->s16BufferSize <= 0) {
    e2a8:	693b      	ldr	r3, [r7, #16]
    e2aa:	2204      	movs	r2, #4
    e2ac:	5e9b      	ldrsh	r3, [r3, r2]
    e2ae:	2b00      	cmp	r3, #0
    e2b0:	dc0e      	bgt.n	e2d0 <handle_tcpip_recv+0x80>
			close(pb->tcp_socket);
    e2b2:	697b      	ldr	r3, [r7, #20]
    e2b4:	2253      	movs	r2, #83	; 0x53
    e2b6:	569b      	ldrsb	r3, [r3, r2]
    e2b8:	0018      	movs	r0, r3
    e2ba:	4b44      	ldr	r3, [pc, #272]	; (e3cc <handle_tcpip_recv+0x17c>)
    e2bc:	4798      	blx	r3

			pb->state = PS_IDLE;
    e2be:	697b      	ldr	r3, [r7, #20]
    e2c0:	2252      	movs	r2, #82	; 0x52
    e2c2:	2100      	movs	r1, #0
    e2c4:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e2c6:	697b      	ldr	r3, [r7, #20]
    e2c8:	2250      	movs	r2, #80	; 0x50
    e2ca:	2102      	movs	r1, #2
    e2cc:	5499      	strb	r1, [r3, r2]
			return;
    e2ce:	e075      	b.n	e3bc <handle_tcpip_recv+0x16c>
		}

		if (pb->trans == PBTT_PUBLISH) {
    e2d0:	697b      	ldr	r3, [r7, #20]
    e2d2:	2251      	movs	r2, #81	; 0x51
    e2d4:	5c9b      	ldrb	r3, [r3, r2]
    e2d6:	2b02      	cmp	r3, #2
    e2d8:	d10c      	bne.n	e2f4 <handle_tcpip_recv+0xa4>
			PUBNUB_PRINTF(("handle_tcpip_recv: PBTT_PUBLISH msg: %s\n", pstrRecv->pu8Buffer));

			if (pstrRecv->u16RemainingSize == 0) {
    e2da:	693b      	ldr	r3, [r7, #16]
    e2dc:	88db      	ldrh	r3, [r3, #6]
    e2de:	2b00      	cmp	r3, #0
    e2e0:	d16b      	bne.n	e3ba <handle_tcpip_recv+0x16a>
				pb->last_result = PNR_OK;
    e2e2:	697b      	ldr	r3, [r7, #20]
    e2e4:	2250      	movs	r2, #80	; 0x50
    e2e6:	2100      	movs	r1, #0
    e2e8:	5499      	strb	r1, [r3, r2]
				pb->state = PS_IDLE;
    e2ea:	697b      	ldr	r3, [r7, #20]
    e2ec:	2252      	movs	r2, #82	; 0x52
    e2ee:	2100      	movs	r1, #0
    e2f0:	5499      	strb	r1, [r3, r2]
			}

			return;
    e2f2:	e062      	b.n	e3ba <handle_tcpip_recv+0x16a>
		}

		if (pstrRecv->u16RemainingSize > 0) {
    e2f4:	693b      	ldr	r3, [r7, #16]
    e2f6:	88db      	ldrh	r3, [r3, #6]
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	d037      	beq.n	e36c <handle_tcpip_recv+0x11c>
			pb->state = PS_WAIT_RECV;
    e2fc:	697b      	ldr	r3, [r7, #20]
    e2fe:	2252      	movs	r2, #82	; 0x52
    e300:	2104      	movs	r1, #4
    e302:	5499      	strb	r1, [r3, r2]

			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"Content-Length: ") + 16;
    e304:	693b      	ldr	r3, [r7, #16]
    e306:	681b      	ldr	r3, [r3, #0]
    e308:	4a31      	ldr	r2, [pc, #196]	; (e3d0 <handle_tcpip_recv+0x180>)
    e30a:	0011      	movs	r1, r2
    e30c:	0018      	movs	r0, r3
    e30e:	4b31      	ldr	r3, [pc, #196]	; (e3d4 <handle_tcpip_recv+0x184>)
    e310:	4798      	blx	r3
    e312:	0003      	movs	r3, r0
    e314:	3310      	adds	r3, #16
    e316:	60fb      	str	r3, [r7, #12]
			pb->http_content_len = atoi((const char *)length);
    e318:	68fb      	ldr	r3, [r7, #12]
    e31a:	0018      	movs	r0, r3
    e31c:	4b2e      	ldr	r3, [pc, #184]	; (e3d8 <handle_tcpip_recv+0x188>)
    e31e:	4798      	blx	r3
    e320:	0003      	movs	r3, r0
    e322:	0019      	movs	r1, r3
    e324:	697a      	ldr	r2, [r7, #20]
    e326:	23ae      	movs	r3, #174	; 0xae
    e328:	005b      	lsls	r3, r3, #1
    e32a:	50d1      	str	r1, [r2, r3]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
    e32c:	693b      	ldr	r3, [r7, #16]
    e32e:	88db      	ldrh	r3, [r3, #6]
    e330:	0019      	movs	r1, r3
    e332:	697a      	ldr	r2, [r7, #20]
    e334:	23b0      	movs	r3, #176	; 0xb0
    e336:	005b      	lsls	r3, r3, #1
    e338:	50d1      	str	r1, [r2, r3]
			PUBNUB_PRINTF(("Content-Length = %d\r\n", (int)pb->http_content_len));

			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"[");
    e33a:	693b      	ldr	r3, [r7, #16]
    e33c:	681b      	ldr	r3, [r3, #0]
    e33e:	4a27      	ldr	r2, [pc, #156]	; (e3dc <handle_tcpip_recv+0x18c>)
    e340:	0011      	movs	r1, r2
    e342:	0018      	movs	r0, r3
    e344:	4b23      	ldr	r3, [pc, #140]	; (e3d4 <handle_tcpip_recv+0x184>)
    e346:	4798      	blx	r3
    e348:	0003      	movs	r3, r0
    e34a:	60bb      	str	r3, [r7, #8]
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
    e34c:	697b      	ldr	r3, [r7, #20]
    e34e:	3366      	adds	r3, #102	; 0x66
    e350:	33ff      	adds	r3, #255	; 0xff
    e352:	0018      	movs	r0, r3
    e354:	697a      	ldr	r2, [r7, #20]
    e356:	23ae      	movs	r3, #174	; 0xae
    e358:	005b      	lsls	r3, r3, #1
    e35a:	58d3      	ldr	r3, [r2, r3]
    e35c:	693a      	ldr	r2, [r7, #16]
    e35e:	88d2      	ldrh	r2, [r2, #6]
    e360:	1a9a      	subs	r2, r3, r2
    e362:	68bb      	ldr	r3, [r7, #8]
    e364:	0019      	movs	r1, r3
    e366:	4b1e      	ldr	r3, [pc, #120]	; (e3e0 <handle_tcpip_recv+0x190>)
    e368:	4798      	blx	r3
    e36a:	e027      	b.n	e3bc <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));
		} else if (pstrRecv->u16RemainingSize == 0) {
    e36c:	693b      	ldr	r3, [r7, #16]
    e36e:	88db      	ldrh	r3, [r3, #6]
    e370:	2b00      	cmp	r3, #0
    e372:	d123      	bne.n	e3bc <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_content_remaining_len = %d\r\n", (int)pb->http_content_remaining_len));

			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
    e374:	697b      	ldr	r3, [r7, #20]
    e376:	3366      	adds	r3, #102	; 0x66
    e378:	33ff      	adds	r3, #255	; 0xff
    e37a:	001a      	movs	r2, r3
    e37c:	6979      	ldr	r1, [r7, #20]
    e37e:	23ae      	movs	r3, #174	; 0xae
    e380:	005b      	lsls	r3, r3, #1
    e382:	58c9      	ldr	r1, [r1, r3]
    e384:	6978      	ldr	r0, [r7, #20]
    e386:	23b0      	movs	r3, #176	; 0xb0
    e388:	005b      	lsls	r3, r3, #1
    e38a:	58c3      	ldr	r3, [r0, r3]
    e38c:	1acb      	subs	r3, r1, r3
    e38e:	18d0      	adds	r0, r2, r3
    e390:	693b      	ldr	r3, [r7, #16]
    e392:	6819      	ldr	r1, [r3, #0]
    e394:	693b      	ldr	r3, [r7, #16]
    e396:	2204      	movs	r2, #4
    e398:	5e9b      	ldrsh	r3, [r3, r2]
    e39a:	001a      	movs	r2, r3
    e39c:	4b10      	ldr	r3, [pc, #64]	; (e3e0 <handle_tcpip_recv+0x190>)
    e39e:	4798      	blx	r3
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));

			parse_subscribe_response(pb);
    e3a0:	697b      	ldr	r3, [r7, #20]
    e3a2:	0018      	movs	r0, r3
    e3a4:	4b0f      	ldr	r3, [pc, #60]	; (e3e4 <handle_tcpip_recv+0x194>)
    e3a6:	4798      	blx	r3

			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
    e3a8:	697b      	ldr	r3, [r7, #20]
    e3aa:	2250      	movs	r2, #80	; 0x50
    e3ac:	2100      	movs	r1, #0
    e3ae:	5499      	strb	r1, [r3, r2]
			pb->state = PS_IDLE;
    e3b0:	697b      	ldr	r3, [r7, #20]
    e3b2:	2252      	movs	r2, #82	; 0x52
    e3b4:	2100      	movs	r1, #0
    e3b6:	5499      	strb	r1, [r3, r2]
    e3b8:	e000      	b.n	e3bc <handle_tcpip_recv+0x16c>
			if (pstrRecv->u16RemainingSize == 0) {
				pb->last_result = PNR_OK;
				pb->state = PS_IDLE;
			}

			return;
    e3ba:	46c0      	nop			; (mov r8, r8)
			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
			pb->state = PS_IDLE;
		}
	}
}
    e3bc:	46bd      	mov	sp, r7
    e3be:	b006      	add	sp, #24
    e3c0:	bd80      	pop	{r7, pc}
    e3c2:	46c0      	nop			; (mov r8, r8)
    e3c4:	20003d54 	.word	0x20003d54
    e3c8:	20004434 	.word	0x20004434
    e3cc:	00004f81 	.word	0x00004f81
    e3d0:	000135c4 	.word	0x000135c4
    e3d4:	00000d6d 	.word	0x00000d6d
    e3d8:	00010735 	.word	0x00010735
    e3dc:	000135d8 	.word	0x000135d8
    e3e0:	000107ad 	.word	0x000107ad
    e3e4:	0000e015 	.word	0x0000e015

0000e3e8 <handle_dns_found>:

void handle_dns_found(char const *name, uint32_t hostip)
{
    e3e8:	b580      	push	{r7, lr}
    e3ea:	b084      	sub	sp, #16
    e3ec:	af00      	add	r7, sp, #0
    e3ee:	6078      	str	r0, [r7, #4]
    e3f0:	6039      	str	r1, [r7, #0]
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
    e3f2:	4a13      	ldr	r2, [pc, #76]	; (e440 <handle_dns_found+0x58>)
    e3f4:	687b      	ldr	r3, [r7, #4]
    e3f6:	0011      	movs	r1, r2
    e3f8:	0018      	movs	r0, r3
    e3fa:	4b12      	ldr	r3, [pc, #72]	; (e444 <handle_dns_found+0x5c>)
    e3fc:	4798      	blx	r3
    e3fe:	1e03      	subs	r3, r0, #0
    e400:	d119      	bne.n	e436 <handle_dns_found+0x4e>
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;
    e402:	4b11      	ldr	r3, [pc, #68]	; (e448 <handle_dns_found+0x60>)
    e404:	683a      	ldr	r2, [r7, #0]
    e406:	605a      	str	r2, [r3, #4]

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e408:	4b10      	ldr	r3, [pc, #64]	; (e44c <handle_dns_found+0x64>)
    e40a:	60fb      	str	r3, [r7, #12]
    e40c:	e00e      	b.n	e42c <handle_dns_found+0x44>
		if (pb->state == PS_WAIT_DNS) {
    e40e:	68fb      	ldr	r3, [r7, #12]
    e410:	2252      	movs	r2, #82	; 0x52
    e412:	5c9b      	ldrb	r3, [r3, r2]
    e414:	2b01      	cmp	r3, #1
    e416:	d103      	bne.n	e420 <handle_dns_found+0x38>
			handle_start_connect(pb);
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	0018      	movs	r0, r3
    e41c:	4b0c      	ldr	r3, [pc, #48]	; (e450 <handle_dns_found+0x68>)
    e41e:	4798      	blx	r3
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e420:	68fb      	ldr	r3, [r7, #12]
    e422:	22dc      	movs	r2, #220	; 0xdc
    e424:	0092      	lsls	r2, r2, #2
    e426:	4694      	mov	ip, r2
    e428:	4463      	add	r3, ip
    e42a:	60fb      	str	r3, [r7, #12]
    e42c:	4b09      	ldr	r3, [pc, #36]	; (e454 <handle_dns_found+0x6c>)
    e42e:	68fa      	ldr	r2, [r7, #12]
    e430:	429a      	cmp	r2, r3
    e432:	d1ec      	bne.n	e40e <handle_dns_found+0x26>
    e434:	e000      	b.n	e438 <handle_dns_found+0x50>
void handle_dns_found(char const *name, uint32_t hostip)
{
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
		return;
    e436:	46c0      	nop			; (mov r8, r8)
	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
		if (pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
    e438:	46bd      	mov	sp, r7
    e43a:	b004      	add	sp, #16
    e43c:	bd80      	pop	{r7, pc}
    e43e:	46c0      	nop			; (mov r8, r8)
    e440:	000134b4 	.word	0x000134b4
    e444:	000110c5 	.word	0x000110c5
    e448:	20004604 	.word	0x20004604
    e44c:	20003d54 	.word	0x20003d54
    e450:	0000ddc5 	.word	0x0000ddc5
    e454:	20004434 	.word	0x20004434

0000e458 <handle_tcpip>:

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e458:	b580      	push	{r7, lr}
    e45a:	b086      	sub	sp, #24
    e45c:	af00      	add	r7, sp, #0
    e45e:	603a      	str	r2, [r7, #0]
    e460:	1dfb      	adds	r3, r7, #7
    e462:	1c02      	adds	r2, r0, #0
    e464:	701a      	strb	r2, [r3, #0]
    e466:	1dbb      	adds	r3, r7, #6
    e468:	1c0a      	adds	r2, r1, #0
    e46a:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
    e46c:	1dbb      	adds	r3, r7, #6
    e46e:	781b      	ldrb	r3, [r3, #0]
    e470:	2b06      	cmp	r3, #6
    e472:	d023      	beq.n	e4bc <handle_tcpip+0x64>
    e474:	2b07      	cmp	r3, #7
    e476:	d00c      	beq.n	e492 <handle_tcpip+0x3a>
    e478:	2b05      	cmp	r3, #5
    e47a:	d000      	beq.n	e47e <handle_tcpip+0x26>
		handle_tcpip_recv(sock, u8Msg, pvMsg);
	}
	break;

	default:
		break;
    e47c:	e034      	b.n	e4e8 <handle_tcpip+0x90>
void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	case SOCKET_MSG_CONNECT:
	{
		handle_tcpip_connect(sock, u8Msg, pvMsg);
    e47e:	683a      	ldr	r2, [r7, #0]
    e480:	1dbb      	adds	r3, r7, #6
    e482:	7819      	ldrb	r1, [r3, #0]
    e484:	1dfb      	adds	r3, r7, #7
    e486:	781b      	ldrb	r3, [r3, #0]
    e488:	b25b      	sxtb	r3, r3
    e48a:	0018      	movs	r0, r3
    e48c:	4b18      	ldr	r3, [pc, #96]	; (e4f0 <handle_tcpip+0x98>)
    e48e:	4798      	blx	r3
	}
	break;
    e490:	e02a      	b.n	e4e8 <handle_tcpip+0x90>

	case SOCKET_MSG_SEND:
	{
		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_SEND);
    e492:	1dfb      	adds	r3, r7, #7
    e494:	781b      	ldrb	r3, [r3, #0]
    e496:	b25b      	sxtb	r3, r3
    e498:	2103      	movs	r1, #3
    e49a:	0018      	movs	r0, r3
    e49c:	4b15      	ldr	r3, [pc, #84]	; (e4f4 <handle_tcpip+0x9c>)
    e49e:	4798      	blx	r3
    e4a0:	0003      	movs	r3, r0
    e4a2:	617b      	str	r3, [r7, #20]

		if (pb != NULL) {
    e4a4:	697b      	ldr	r3, [r7, #20]
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	d01d      	beq.n	e4e6 <handle_tcpip+0x8e>
			pb->state = PS_WAIT_RECV;
    e4aa:	697b      	ldr	r3, [r7, #20]
    e4ac:	2252      	movs	r2, #82	; 0x52
    e4ae:	2104      	movs	r1, #4
    e4b0:	5499      	strb	r1, [r3, r2]
			handle_transaction(pb);
    e4b2:	697b      	ldr	r3, [r7, #20]
    e4b4:	0018      	movs	r0, r3
    e4b6:	4b10      	ldr	r3, [pc, #64]	; (e4f8 <handle_tcpip+0xa0>)
    e4b8:	4798      	blx	r3
		}
	}
	break;
    e4ba:	e014      	b.n	e4e6 <handle_tcpip+0x8e>

	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    e4bc:	683b      	ldr	r3, [r7, #0]
    e4be:	613b      	str	r3, [r7, #16]
			PUBNUB_PRINTF(("handle_tcpip: msg: %s\r\n", pstrRecv->pu8Buffer));
		} else {
			PUBNUB_PRINTF(("handle_tcpip: recv error!\r\n"));
		}

		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_RECV);
    e4c0:	1dfb      	adds	r3, r7, #7
    e4c2:	781b      	ldrb	r3, [r3, #0]
    e4c4:	b25b      	sxtb	r3, r3
    e4c6:	2104      	movs	r1, #4
    e4c8:	0018      	movs	r0, r3
    e4ca:	4b0a      	ldr	r3, [pc, #40]	; (e4f4 <handle_tcpip+0x9c>)
    e4cc:	4798      	blx	r3
    e4ce:	0003      	movs	r3, r0
    e4d0:	60fb      	str	r3, [r7, #12]

		if (pb != NULL) {
		}

		handle_tcpip_recv(sock, u8Msg, pvMsg);
    e4d2:	683a      	ldr	r2, [r7, #0]
    e4d4:	1dbb      	adds	r3, r7, #6
    e4d6:	7819      	ldrb	r1, [r3, #0]
    e4d8:	1dfb      	adds	r3, r7, #7
    e4da:	781b      	ldrb	r3, [r3, #0]
    e4dc:	b25b      	sxtb	r3, r3
    e4de:	0018      	movs	r0, r3
    e4e0:	4b06      	ldr	r3, [pc, #24]	; (e4fc <handle_tcpip+0xa4>)
    e4e2:	4798      	blx	r3
	}
	break;
    e4e4:	e000      	b.n	e4e8 <handle_tcpip+0x90>
		if (pb != NULL) {
			pb->state = PS_WAIT_RECV;
			handle_transaction(pb);
		}
	}
	break;
    e4e6:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
    e4e8:	46c0      	nop			; (mov r8, r8)
    e4ea:	46bd      	mov	sp, r7
    e4ec:	b006      	add	sp, #24
    e4ee:	bd80      	pop	{r7, pc}
    e4f0:	0000e1cd 	.word	0x0000e1cd
    e4f4:	0000dd65 	.word	0x0000dd65
    e4f8:	0000dc7d 	.word	0x0000dc7d
    e4fc:	0000e251 	.word	0x0000e251

0000e500 <pubnub_get_ctx>:

pubnub_t *pubnub_get_ctx(uint8_t index)
{
    e500:	b590      	push	{r4, r7, lr}
    e502:	b083      	sub	sp, #12
    e504:	af00      	add	r7, sp, #0
    e506:	0002      	movs	r2, r0
    e508:	1dfb      	adds	r3, r7, #7
    e50a:	701a      	strb	r2, [r3, #0]
	assert(index < PUBNUB_CTX_MAX);
    e50c:	1dfb      	adds	r3, r7, #7
    e50e:	781b      	ldrb	r3, [r3, #0]
    e510:	2b01      	cmp	r3, #1
    e512:	d908      	bls.n	e526 <pubnub_get_ctx+0x26>
    e514:	4c09      	ldr	r4, [pc, #36]	; (e53c <pubnub_get_ctx+0x3c>)
    e516:	4a0a      	ldr	r2, [pc, #40]	; (e540 <pubnub_get_ctx+0x40>)
    e518:	2376      	movs	r3, #118	; 0x76
    e51a:	33ff      	adds	r3, #255	; 0xff
    e51c:	0019      	movs	r1, r3
    e51e:	4809      	ldr	r0, [pc, #36]	; (e544 <pubnub_get_ctx+0x44>)
    e520:	0023      	movs	r3, r4
    e522:	4c09      	ldr	r4, [pc, #36]	; (e548 <pubnub_get_ctx+0x48>)
    e524:	47a0      	blx	r4
	return m_aCtx + index;
    e526:	1dfb      	adds	r3, r7, #7
    e528:	781b      	ldrb	r3, [r3, #0]
    e52a:	22dc      	movs	r2, #220	; 0xdc
    e52c:	0092      	lsls	r2, r2, #2
    e52e:	435a      	muls	r2, r3
    e530:	4b06      	ldr	r3, [pc, #24]	; (e54c <pubnub_get_ctx+0x4c>)
    e532:	18d3      	adds	r3, r2, r3
}
    e534:	0018      	movs	r0, r3
    e536:	46bd      	mov	sp, r7
    e538:	b003      	add	sp, #12
    e53a:	bd90      	pop	{r4, r7, pc}
    e53c:	000135dc 	.word	0x000135dc
    e540:	000136d8 	.word	0x000136d8
    e544:	00013530 	.word	0x00013530
    e548:	000106f5 	.word	0x000106f5
    e54c:	20003d54 	.word	0x20003d54

0000e550 <pubnub_init>:

void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
    e550:	b590      	push	{r4, r7, lr}
    e552:	b085      	sub	sp, #20
    e554:	af00      	add	r7, sp, #0
    e556:	60f8      	str	r0, [r7, #12]
    e558:	60b9      	str	r1, [r7, #8]
    e55a:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    e55c:	68fb      	ldr	r3, [r7, #12]
    e55e:	0018      	movs	r0, r3
    e560:	4b17      	ldr	r3, [pc, #92]	; (e5c0 <pubnub_init+0x70>)
    e562:	4798      	blx	r3
    e564:	1e03      	subs	r3, r0, #0
    e566:	d108      	bne.n	e57a <pubnub_init+0x2a>
    e568:	4c16      	ldr	r4, [pc, #88]	; (e5c4 <pubnub_init+0x74>)
    e56a:	4a17      	ldr	r2, [pc, #92]	; (e5c8 <pubnub_init+0x78>)
    e56c:	237c      	movs	r3, #124	; 0x7c
    e56e:	33ff      	adds	r3, #255	; 0xff
    e570:	0019      	movs	r1, r3
    e572:	4816      	ldr	r0, [pc, #88]	; (e5cc <pubnub_init+0x7c>)
    e574:	0023      	movs	r3, r4
    e576:	4c16      	ldr	r4, [pc, #88]	; (e5d0 <pubnub_init+0x80>)
    e578:	47a0      	blx	r4

	pb->publish_key = publish_key;
    e57a:	68fb      	ldr	r3, [r7, #12]
    e57c:	68ba      	ldr	r2, [r7, #8]
    e57e:	601a      	str	r2, [r3, #0]
	pb->subscribe_key = subscribe_key;
    e580:	68fb      	ldr	r3, [r7, #12]
    e582:	687a      	ldr	r2, [r7, #4]
    e584:	605a      	str	r2, [r3, #4]
	pb->timetoken[0] = '0';
    e586:	68fb      	ldr	r3, [r7, #12]
    e588:	2230      	movs	r2, #48	; 0x30
    e58a:	741a      	strb	r2, [r3, #16]
	pb->timetoken[1] = '\0';
    e58c:	68fb      	ldr	r3, [r7, #12]
    e58e:	2200      	movs	r2, #0
    e590:	745a      	strb	r2, [r3, #17]
	pb->uuid = pb->auth = NULL;
    e592:	68fb      	ldr	r3, [r7, #12]
    e594:	2200      	movs	r2, #0
    e596:	60da      	str	r2, [r3, #12]
    e598:	68fb      	ldr	r3, [r7, #12]
    e59a:	68da      	ldr	r2, [r3, #12]
    e59c:	68fb      	ldr	r3, [r7, #12]
    e59e:	609a      	str	r2, [r3, #8]
	pb->tcp_socket = -1;
    e5a0:	68fb      	ldr	r3, [r7, #12]
    e5a2:	2253      	movs	r2, #83	; 0x53
    e5a4:	21ff      	movs	r1, #255	; 0xff
    e5a6:	5499      	strb	r1, [r3, r2]
	pb->state = PS_IDLE;
    e5a8:	68fb      	ldr	r3, [r7, #12]
    e5aa:	2252      	movs	r2, #82	; 0x52
    e5ac:	2100      	movs	r1, #0
    e5ae:	5499      	strb	r1, [r3, r2]
	pb->last_result = PNR_IO_ERROR;
    e5b0:	68fb      	ldr	r3, [r7, #12]
    e5b2:	2250      	movs	r2, #80	; 0x50
    e5b4:	2102      	movs	r1, #2
    e5b6:	5499      	strb	r1, [r3, r2]
}
    e5b8:	46c0      	nop			; (mov r8, r8)
    e5ba:	46bd      	mov	sp, r7
    e5bc:	b005      	add	sp, #20
    e5be:	bd90      	pop	{r4, r7, pc}
    e5c0:	0000dd2d 	.word	0x0000dd2d
    e5c4:	0001351c 	.word	0x0001351c
    e5c8:	000136e8 	.word	0x000136e8
    e5cc:	00013530 	.word	0x00013530
    e5d0:	000106f5 	.word	0x000106f5

0000e5d4 <pubnub_publish>:

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    e5d4:	b5b0      	push	{r4, r5, r7, lr}
    e5d6:	b08a      	sub	sp, #40	; 0x28
    e5d8:	af02      	add	r7, sp, #8
    e5da:	60f8      	str	r0, [r7, #12]
    e5dc:	60b9      	str	r1, [r7, #8]
    e5de:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    e5e0:	68fb      	ldr	r3, [r7, #12]
    e5e2:	0018      	movs	r0, r3
    e5e4:	4b6c      	ldr	r3, [pc, #432]	; (e798 <pubnub_publish+0x1c4>)
    e5e6:	4798      	blx	r3
    e5e8:	1e03      	subs	r3, r0, #0
    e5ea:	d108      	bne.n	e5fe <pubnub_publish+0x2a>
    e5ec:	4c6b      	ldr	r4, [pc, #428]	; (e79c <pubnub_publish+0x1c8>)
    e5ee:	4a6c      	ldr	r2, [pc, #432]	; (e7a0 <pubnub_publish+0x1cc>)
    e5f0:	238a      	movs	r3, #138	; 0x8a
    e5f2:	33ff      	adds	r3, #255	; 0xff
    e5f4:	0019      	movs	r1, r3
    e5f6:	486b      	ldr	r0, [pc, #428]	; (e7a4 <pubnub_publish+0x1d0>)
    e5f8:	0023      	movs	r3, r4
    e5fa:	4c6b      	ldr	r4, [pc, #428]	; (e7a8 <pubnub_publish+0x1d4>)
    e5fc:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    e5fe:	68fb      	ldr	r3, [r7, #12]
    e600:	2252      	movs	r2, #82	; 0x52
    e602:	5c9b      	ldrb	r3, [r3, r2]
    e604:	2b00      	cmp	r3, #0
    e606:	d001      	beq.n	e60c <pubnub_publish+0x38>
		return false;
    e608:	2300      	movs	r3, #0
    e60a:	e0c0      	b.n	e78e <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    e60c:	68fb      	ldr	r3, [r7, #12]
    e60e:	2251      	movs	r2, #81	; 0x51
    e610:	2102      	movs	r1, #2
    e612:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    e614:	68fb      	ldr	r3, [r7, #12]
    e616:	3354      	adds	r3, #84	; 0x54
    e618:	0018      	movs	r0, r3
    e61a:	68fb      	ldr	r3, [r7, #12]
    e61c:	681d      	ldr	r5, [r3, #0]
    e61e:	68fb      	ldr	r3, [r7, #12]
    e620:	685b      	ldr	r3, [r3, #4]
    e622:	4c62      	ldr	r4, [pc, #392]	; (e7ac <pubnub_publish+0x1d8>)
    e624:	2280      	movs	r2, #128	; 0x80
    e626:	0051      	lsls	r1, r2, #1
    e628:	68ba      	ldr	r2, [r7, #8]
    e62a:	9201      	str	r2, [sp, #4]
    e62c:	9300      	str	r3, [sp, #0]
    e62e:	002b      	movs	r3, r5
    e630:	0022      	movs	r2, r4
    e632:	4c5f      	ldr	r4, [pc, #380]	; (e7b0 <pubnub_publish+0x1dc>)
    e634:	47a0      	blx	r4
    e636:	0003      	movs	r3, r0
    e638:	0019      	movs	r1, r3
    e63a:	68fa      	ldr	r2, [r7, #12]
    e63c:	23ac      	movs	r3, #172	; 0xac
    e63e:	005b      	lsls	r3, r3, #1
    e640:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    e642:	687b      	ldr	r3, [r7, #4]
    e644:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    e646:	e08a      	b.n	e75e <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    e648:	4a5a      	ldr	r2, [pc, #360]	; (e7b4 <pubnub_publish+0x1e0>)
    e64a:	69fb      	ldr	r3, [r7, #28]
    e64c:	0011      	movs	r1, r2
    e64e:	0018      	movs	r0, r3
    e650:	4b59      	ldr	r3, [pc, #356]	; (e7b8 <pubnub_publish+0x1e4>)
    e652:	4798      	blx	r3
    e654:	0003      	movs	r3, r0
    e656:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    e658:	69bb      	ldr	r3, [r7, #24]
    e65a:	2b00      	cmp	r3, #0
    e65c:	d034      	beq.n	e6c8 <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    e65e:	68fa      	ldr	r2, [r7, #12]
    e660:	23ac      	movs	r3, #172	; 0xac
    e662:	005b      	lsls	r3, r3, #1
    e664:	58d3      	ldr	r3, [r2, r3]
    e666:	22ff      	movs	r2, #255	; 0xff
    e668:	1ad2      	subs	r2, r2, r3
    e66a:	69bb      	ldr	r3, [r7, #24]
    e66c:	429a      	cmp	r2, r3
    e66e:	d206      	bcs.n	e67e <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    e670:	68fa      	ldr	r2, [r7, #12]
    e672:	23ac      	movs	r3, #172	; 0xac
    e674:	005b      	lsls	r3, r3, #1
    e676:	2100      	movs	r1, #0
    e678:	50d1      	str	r1, [r2, r3]
				return false;
    e67a:	2300      	movs	r3, #0
    e67c:	e087      	b.n	e78e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    e67e:	68fb      	ldr	r3, [r7, #12]
    e680:	3354      	adds	r3, #84	; 0x54
    e682:	001a      	movs	r2, r3
    e684:	68f9      	ldr	r1, [r7, #12]
    e686:	23ac      	movs	r3, #172	; 0xac
    e688:	005b      	lsls	r3, r3, #1
    e68a:	58cb      	ldr	r3, [r1, r3]
    e68c:	18d3      	adds	r3, r2, r3
    e68e:	69ba      	ldr	r2, [r7, #24]
    e690:	69f9      	ldr	r1, [r7, #28]
    e692:	0018      	movs	r0, r3
    e694:	4b49      	ldr	r3, [pc, #292]	; (e7bc <pubnub_publish+0x1e8>)
    e696:	4798      	blx	r3
			pb->http_buf_len += okspan;
    e698:	68fa      	ldr	r2, [r7, #12]
    e69a:	23ac      	movs	r3, #172	; 0xac
    e69c:	005b      	lsls	r3, r3, #1
    e69e:	58d2      	ldr	r2, [r2, r3]
    e6a0:	69bb      	ldr	r3, [r7, #24]
    e6a2:	18d1      	adds	r1, r2, r3
    e6a4:	68fa      	ldr	r2, [r7, #12]
    e6a6:	23ac      	movs	r3, #172	; 0xac
    e6a8:	005b      	lsls	r3, r3, #1
    e6aa:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    e6ac:	68fa      	ldr	r2, [r7, #12]
    e6ae:	23ac      	movs	r3, #172	; 0xac
    e6b0:	005b      	lsls	r3, r3, #1
    e6b2:	58d3      	ldr	r3, [r2, r3]
    e6b4:	68fa      	ldr	r2, [r7, #12]
    e6b6:	2154      	movs	r1, #84	; 0x54
    e6b8:	18d3      	adds	r3, r2, r3
    e6ba:	185b      	adds	r3, r3, r1
    e6bc:	2200      	movs	r2, #0
    e6be:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    e6c0:	69fa      	ldr	r2, [r7, #28]
    e6c2:	69bb      	ldr	r3, [r7, #24]
    e6c4:	18d3      	adds	r3, r2, r3
    e6c6:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    e6c8:	69fb      	ldr	r3, [r7, #28]
    e6ca:	781b      	ldrb	r3, [r3, #0]
    e6cc:	2b00      	cmp	r3, #0
    e6ce:	d046      	beq.n	e75e <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    e6d0:	2314      	movs	r3, #20
    e6d2:	18fb      	adds	r3, r7, r3
    e6d4:	2200      	movs	r2, #0
    e6d6:	601a      	str	r2, [r3, #0]
    e6d8:	2314      	movs	r3, #20
    e6da:	18fb      	adds	r3, r7, r3
    e6dc:	2225      	movs	r2, #37	; 0x25
    e6de:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    e6e0:	69fb      	ldr	r3, [r7, #28]
    e6e2:	781b      	ldrb	r3, [r3, #0]
    e6e4:	091b      	lsrs	r3, r3, #4
    e6e6:	b2db      	uxtb	r3, r3
    e6e8:	001a      	movs	r2, r3
    e6ea:	4b35      	ldr	r3, [pc, #212]	; (e7c0 <pubnub_publish+0x1ec>)
    e6ec:	5c9a      	ldrb	r2, [r3, r2]
    e6ee:	2314      	movs	r3, #20
    e6f0:	18fb      	adds	r3, r7, r3
    e6f2:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    e6f4:	69fb      	ldr	r3, [r7, #28]
    e6f6:	781b      	ldrb	r3, [r3, #0]
    e6f8:	001a      	movs	r2, r3
    e6fa:	230f      	movs	r3, #15
    e6fc:	4013      	ands	r3, r2
    e6fe:	4a30      	ldr	r2, [pc, #192]	; (e7c0 <pubnub_publish+0x1ec>)
    e700:	5cd2      	ldrb	r2, [r2, r3]
    e702:	2314      	movs	r3, #20
    e704:	18fb      	adds	r3, r7, r3
    e706:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    e708:	68fa      	ldr	r2, [r7, #12]
    e70a:	23ac      	movs	r3, #172	; 0xac
    e70c:	005b      	lsls	r3, r3, #1
    e70e:	58d3      	ldr	r3, [r2, r3]
    e710:	22ff      	movs	r2, #255	; 0xff
    e712:	1ad3      	subs	r3, r2, r3
    e714:	2b02      	cmp	r3, #2
    e716:	d806      	bhi.n	e726 <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    e718:	68fa      	ldr	r2, [r7, #12]
    e71a:	23ac      	movs	r3, #172	; 0xac
    e71c:	005b      	lsls	r3, r3, #1
    e71e:	2100      	movs	r1, #0
    e720:	50d1      	str	r1, [r2, r3]
				return false;
    e722:	2300      	movs	r3, #0
    e724:	e033      	b.n	e78e <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    e726:	68fb      	ldr	r3, [r7, #12]
    e728:	3354      	adds	r3, #84	; 0x54
    e72a:	001a      	movs	r2, r3
    e72c:	68f9      	ldr	r1, [r7, #12]
    e72e:	23ac      	movs	r3, #172	; 0xac
    e730:	005b      	lsls	r3, r3, #1
    e732:	58cb      	ldr	r3, [r1, r3]
    e734:	18d2      	adds	r2, r2, r3
    e736:	2314      	movs	r3, #20
    e738:	18fb      	adds	r3, r7, r3
    e73a:	0010      	movs	r0, r2
    e73c:	0019      	movs	r1, r3
    e73e:	2304      	movs	r3, #4
    e740:	001a      	movs	r2, r3
    e742:	4b1e      	ldr	r3, [pc, #120]	; (e7bc <pubnub_publish+0x1e8>)
    e744:	4798      	blx	r3
			pb->http_buf_len += 3;
    e746:	68fa      	ldr	r2, [r7, #12]
    e748:	23ac      	movs	r3, #172	; 0xac
    e74a:	005b      	lsls	r3, r3, #1
    e74c:	58d3      	ldr	r3, [r2, r3]
    e74e:	1cd9      	adds	r1, r3, #3
    e750:	68fa      	ldr	r2, [r7, #12]
    e752:	23ac      	movs	r3, #172	; 0xac
    e754:	005b      	lsls	r3, r3, #1
    e756:	50d1      	str	r1, [r2, r3]
			++pmessage;
    e758:	69fb      	ldr	r3, [r7, #28]
    e75a:	3301      	adds	r3, #1
    e75c:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    e75e:	69fb      	ldr	r3, [r7, #28]
    e760:	781b      	ldrb	r3, [r3, #0]
    e762:	2b00      	cmp	r3, #0
    e764:	d000      	beq.n	e768 <pubnub_publish+0x194>
    e766:	e76f      	b.n	e648 <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    e768:	68fb      	ldr	r3, [r7, #12]
    e76a:	2250      	movs	r2, #80	; 0x50
    e76c:	5c9b      	ldrb	r3, [r3, r2]
    e76e:	2b00      	cmp	r3, #0
    e770:	d108      	bne.n	e784 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    e772:	68fb      	ldr	r3, [r7, #12]
    e774:	2252      	movs	r2, #82	; 0x52
    e776:	2103      	movs	r1, #3
    e778:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    e77a:	68fb      	ldr	r3, [r7, #12]
    e77c:	0018      	movs	r0, r3
    e77e:	4b11      	ldr	r3, [pc, #68]	; (e7c4 <pubnub_publish+0x1f0>)
    e780:	4798      	blx	r3
    e782:	e003      	b.n	e78c <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    e784:	68fb      	ldr	r3, [r7, #12]
    e786:	0018      	movs	r0, r3
    e788:	4b0f      	ldr	r3, [pc, #60]	; (e7c8 <pubnub_publish+0x1f4>)
    e78a:	4798      	blx	r3
	}

	return true;
    e78c:	2301      	movs	r3, #1
}
    e78e:	0018      	movs	r0, r3
    e790:	46bd      	mov	sp, r7
    e792:	b008      	add	sp, #32
    e794:	bdb0      	pop	{r4, r5, r7, pc}
    e796:	46c0      	nop			; (mov r8, r8)
    e798:	0000dd2d 	.word	0x0000dd2d
    e79c:	0001351c 	.word	0x0001351c
    e7a0:	000136f4 	.word	0x000136f4
    e7a4:	00013530 	.word	0x00013530
    e7a8:	000106f5 	.word	0x000106f5
    e7ac:	000135f4 	.word	0x000135f4
    e7b0:	0001101d 	.word	0x0001101d
    e7b4:	0001360c 	.word	0x0001360c
    e7b8:	0001111b 	.word	0x0001111b
    e7bc:	000107ad 	.word	0x000107ad
    e7c0:	00013658 	.word	0x00013658
    e7c4:	0000dc7d 	.word	0x0000dc7d
    e7c8:	0000ddc5 	.word	0x0000ddc5

0000e7cc <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    e7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ce:	4657      	mov	r7, sl
    e7d0:	464e      	mov	r6, r9
    e7d2:	4645      	mov	r5, r8
    e7d4:	b4e0      	push	{r5, r6, r7}
    e7d6:	b08c      	sub	sp, #48	; 0x30
    e7d8:	af0a      	add	r7, sp, #40	; 0x28
    e7da:	6078      	str	r0, [r7, #4]
    e7dc:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    e7de:	687b      	ldr	r3, [r7, #4]
    e7e0:	0018      	movs	r0, r3
    e7e2:	4b4a      	ldr	r3, [pc, #296]	; (e90c <pubnub_subscribe+0x140>)
    e7e4:	4798      	blx	r3
    e7e6:	1e03      	subs	r3, r0, #0
    e7e8:	d108      	bne.n	e7fc <pubnub_subscribe+0x30>
    e7ea:	4c49      	ldr	r4, [pc, #292]	; (e910 <pubnub_subscribe+0x144>)
    e7ec:	4a49      	ldr	r2, [pc, #292]	; (e914 <pubnub_subscribe+0x148>)
    e7ee:	23c2      	movs	r3, #194	; 0xc2
    e7f0:	33ff      	adds	r3, #255	; 0xff
    e7f2:	0019      	movs	r1, r3
    e7f4:	4848      	ldr	r0, [pc, #288]	; (e918 <pubnub_subscribe+0x14c>)
    e7f6:	0023      	movs	r3, r4
    e7f8:	4c48      	ldr	r4, [pc, #288]	; (e91c <pubnub_subscribe+0x150>)
    e7fa:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    e7fc:	687b      	ldr	r3, [r7, #4]
    e7fe:	2252      	movs	r2, #82	; 0x52
    e800:	5c9b      	ldrb	r3, [r3, r2]
    e802:	2b00      	cmp	r3, #0
    e804:	d001      	beq.n	e80a <pubnub_subscribe+0x3e>
		return false;
    e806:	2300      	movs	r3, #0
    e808:	e078      	b.n	e8fc <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    e80a:	687b      	ldr	r3, [r7, #4]
    e80c:	2251      	movs	r2, #81	; 0x51
    e80e:	2101      	movs	r1, #1
    e810:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    e812:	687b      	ldr	r3, [r7, #4]
    e814:	3366      	adds	r3, #102	; 0x66
    e816:	33ff      	adds	r3, #255	; 0xff
    e818:	0018      	movs	r0, r3
    e81a:	2380      	movs	r3, #128	; 0x80
    e81c:	009b      	lsls	r3, r3, #2
    e81e:	001a      	movs	r2, r3
    e820:	2100      	movs	r1, #0
    e822:	4b3f      	ldr	r3, [pc, #252]	; (e920 <pubnub_subscribe+0x154>)
    e824:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e826:	687b      	ldr	r3, [r7, #4]
    e828:	2254      	movs	r2, #84	; 0x54
    e82a:	4694      	mov	ip, r2
    e82c:	449c      	add	ip, r3
    e82e:	687b      	ldr	r3, [r7, #4]
    e830:	685b      	ldr	r3, [r3, #4]
    e832:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    e834:	687b      	ldr	r3, [r7, #4]
    e836:	3310      	adds	r3, #16
    e838:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    e83a:	687b      	ldr	r3, [r7, #4]
    e83c:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e83e:	2b00      	cmp	r3, #0
    e840:	d001      	beq.n	e846 <pubnub_subscribe+0x7a>
    e842:	4b38      	ldr	r3, [pc, #224]	; (e924 <pubnub_subscribe+0x158>)
    e844:	e000      	b.n	e848 <pubnub_subscribe+0x7c>
    e846:	4b38      	ldr	r3, [pc, #224]	; (e928 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    e848:	687a      	ldr	r2, [r7, #4]
    e84a:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e84c:	2a00      	cmp	r2, #0
    e84e:	d002      	beq.n	e856 <pubnub_subscribe+0x8a>
    e850:	687a      	ldr	r2, [r7, #4]
    e852:	6892      	ldr	r2, [r2, #8]
    e854:	e000      	b.n	e858 <pubnub_subscribe+0x8c>
    e856:	4a34      	ldr	r2, [pc, #208]	; (e928 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    e858:	6879      	ldr	r1, [r7, #4]
    e85a:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e85c:	2900      	cmp	r1, #0
    e85e:	d005      	beq.n	e86c <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    e860:	6879      	ldr	r1, [r7, #4]
    e862:	68c9      	ldr	r1, [r1, #12]
    e864:	2900      	cmp	r1, #0
    e866:	d001      	beq.n	e86c <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e868:	4930      	ldr	r1, [pc, #192]	; (e92c <pubnub_subscribe+0x160>)
    e86a:	e000      	b.n	e86e <pubnub_subscribe+0xa2>
    e86c:	492e      	ldr	r1, [pc, #184]	; (e928 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    e86e:	6878      	ldr	r0, [r7, #4]
    e870:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e872:	2800      	cmp	r0, #0
    e874:	d005      	beq.n	e882 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    e876:	6878      	ldr	r0, [r7, #4]
    e878:	68c0      	ldr	r0, [r0, #12]
    e87a:	2800      	cmp	r0, #0
    e87c:	d001      	beq.n	e882 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e87e:	482c      	ldr	r0, [pc, #176]	; (e930 <pubnub_subscribe+0x164>)
    e880:	e000      	b.n	e884 <pubnub_subscribe+0xb8>
    e882:	4829      	ldr	r0, [pc, #164]	; (e928 <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    e884:	687c      	ldr	r4, [r7, #4]
    e886:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e888:	2c00      	cmp	r4, #0
    e88a:	d006      	beq.n	e89a <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    e88c:	687c      	ldr	r4, [r7, #4]
    e88e:	68e4      	ldr	r4, [r4, #12]
    e890:	2c00      	cmp	r4, #0
    e892:	d002      	beq.n	e89a <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    e894:	687c      	ldr	r4, [r7, #4]
    e896:	68e4      	ldr	r4, [r4, #12]
    e898:	e000      	b.n	e89c <pubnub_subscribe+0xd0>
    e89a:	4c23      	ldr	r4, [pc, #140]	; (e928 <pubnub_subscribe+0x15c>)
    e89c:	4e25      	ldr	r6, [pc, #148]	; (e934 <pubnub_subscribe+0x168>)
    e89e:	46b1      	mov	r9, r6
    e8a0:	2680      	movs	r6, #128	; 0x80
    e8a2:	0076      	lsls	r6, r6, #1
    e8a4:	46b0      	mov	r8, r6
    e8a6:	4e24      	ldr	r6, [pc, #144]	; (e938 <pubnub_subscribe+0x16c>)
    e8a8:	9608      	str	r6, [sp, #32]
    e8aa:	4e1f      	ldr	r6, [pc, #124]	; (e928 <pubnub_subscribe+0x15c>)
    e8ac:	9607      	str	r6, [sp, #28]
    e8ae:	9406      	str	r4, [sp, #24]
    e8b0:	9005      	str	r0, [sp, #20]
    e8b2:	9104      	str	r1, [sp, #16]
    e8b4:	9203      	str	r2, [sp, #12]
    e8b6:	9302      	str	r3, [sp, #8]
    e8b8:	9501      	str	r5, [sp, #4]
    e8ba:	683b      	ldr	r3, [r7, #0]
    e8bc:	9300      	str	r3, [sp, #0]
    e8be:	4653      	mov	r3, sl
    e8c0:	464a      	mov	r2, r9
    e8c2:	4641      	mov	r1, r8
    e8c4:	4660      	mov	r0, ip
    e8c6:	4c1d      	ldr	r4, [pc, #116]	; (e93c <pubnub_subscribe+0x170>)
    e8c8:	47a0      	blx	r4
    e8ca:	0003      	movs	r3, r0
    e8cc:	0019      	movs	r1, r3
    e8ce:	687a      	ldr	r2, [r7, #4]
    e8d0:	23ac      	movs	r3, #172	; 0xac
    e8d2:	005b      	lsls	r3, r3, #1
    e8d4:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	2250      	movs	r2, #80	; 0x50
    e8da:	5c9b      	ldrb	r3, [r3, r2]
    e8dc:	2b00      	cmp	r3, #0
    e8de:	d108      	bne.n	e8f2 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    e8e0:	687b      	ldr	r3, [r7, #4]
    e8e2:	2252      	movs	r2, #82	; 0x52
    e8e4:	2103      	movs	r1, #3
    e8e6:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    e8e8:	687b      	ldr	r3, [r7, #4]
    e8ea:	0018      	movs	r0, r3
    e8ec:	4b14      	ldr	r3, [pc, #80]	; (e940 <pubnub_subscribe+0x174>)
    e8ee:	4798      	blx	r3
    e8f0:	e003      	b.n	e8fa <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    e8f2:	687b      	ldr	r3, [r7, #4]
    e8f4:	0018      	movs	r0, r3
    e8f6:	4b13      	ldr	r3, [pc, #76]	; (e944 <pubnub_subscribe+0x178>)
    e8f8:	4798      	blx	r3
	}

	return true;
    e8fa:	2301      	movs	r3, #1
}
    e8fc:	0018      	movs	r0, r3
    e8fe:	46bd      	mov	sp, r7
    e900:	b002      	add	sp, #8
    e902:	bc1c      	pop	{r2, r3, r4}
    e904:	4690      	mov	r8, r2
    e906:	4699      	mov	r9, r3
    e908:	46a2      	mov	sl, r4
    e90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e90c:	0000dd2d 	.word	0x0000dd2d
    e910:	0001351c 	.word	0x0001351c
    e914:	00013704 	.word	0x00013704
    e918:	00013530 	.word	0x00013530
    e91c:	000106f5 	.word	0x000106f5
    e920:	000107bf 	.word	0x000107bf
    e924:	0001366c 	.word	0x0001366c
    e928:	00013674 	.word	0x00013674
    e92c:	00013678 	.word	0x00013678
    e930:	0001367c 	.word	0x0001367c
    e934:	00013684 	.word	0x00013684
    e938:	000136bc 	.word	0x000136bc
    e93c:	0001101d 	.word	0x0001101d
    e940:	0000dc7d 	.word	0x0000dc7d
    e944:	0000ddc5 	.word	0x0000ddc5

0000e948 <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    e948:	b590      	push	{r4, r7, lr}
    e94a:	b085      	sub	sp, #20
    e94c:	af00      	add	r7, sp, #0
    e94e:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    e950:	687b      	ldr	r3, [r7, #4]
    e952:	0018      	movs	r0, r3
    e954:	4b20      	ldr	r3, [pc, #128]	; (e9d8 <pubnub_get+0x90>)
    e956:	4798      	blx	r3
    e958:	1e03      	subs	r3, r0, #0
    e95a:	d108      	bne.n	e96e <pubnub_get+0x26>
    e95c:	4c1f      	ldr	r4, [pc, #124]	; (e9dc <pubnub_get+0x94>)
    e95e:	4a20      	ldr	r2, [pc, #128]	; (e9e0 <pubnub_get+0x98>)
    e960:	23e0      	movs	r3, #224	; 0xe0
    e962:	33ff      	adds	r3, #255	; 0xff
    e964:	0019      	movs	r1, r3
    e966:	481f      	ldr	r0, [pc, #124]	; (e9e4 <pubnub_get+0x9c>)
    e968:	0023      	movs	r3, r4
    e96a:	4c1f      	ldr	r4, [pc, #124]	; (e9e8 <pubnub_get+0xa0>)
    e96c:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	4a1e      	ldr	r2, [pc, #120]	; (e9ec <pubnub_get+0xa4>)
    e972:	5a9a      	ldrh	r2, [r3, r2]
    e974:	6879      	ldr	r1, [r7, #4]
    e976:	23da      	movs	r3, #218	; 0xda
    e978:	009b      	lsls	r3, r3, #2
    e97a:	5acb      	ldrh	r3, [r1, r3]
    e97c:	429a      	cmp	r2, r3
    e97e:	d225      	bcs.n	e9cc <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    e980:	687b      	ldr	r3, [r7, #4]
    e982:	3366      	adds	r3, #102	; 0x66
    e984:	33ff      	adds	r3, #255	; 0xff
    e986:	687a      	ldr	r2, [r7, #4]
    e988:	4918      	ldr	r1, [pc, #96]	; (e9ec <pubnub_get+0xa4>)
    e98a:	5a52      	ldrh	r2, [r2, r1]
    e98c:	189b      	adds	r3, r3, r2
    e98e:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    e990:	687b      	ldr	r3, [r7, #4]
    e992:	4a16      	ldr	r2, [pc, #88]	; (e9ec <pubnub_get+0xa4>)
    e994:	5a9c      	ldrh	r4, [r3, r2]
    e996:	68fb      	ldr	r3, [r7, #12]
    e998:	0018      	movs	r0, r3
    e99a:	4b15      	ldr	r3, [pc, #84]	; (e9f0 <pubnub_get+0xa8>)
    e99c:	4798      	blx	r3
    e99e:	0003      	movs	r3, r0
    e9a0:	b29b      	uxth	r3, r3
    e9a2:	18e3      	adds	r3, r4, r3
    e9a4:	b299      	uxth	r1, r3
    e9a6:	687b      	ldr	r3, [r7, #4]
    e9a8:	4a10      	ldr	r2, [pc, #64]	; (e9ec <pubnub_get+0xa4>)
    e9aa:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    e9ac:	687b      	ldr	r3, [r7, #4]
    e9ae:	4a0f      	ldr	r2, [pc, #60]	; (e9ec <pubnub_get+0xa4>)
    e9b0:	5a9b      	ldrh	r3, [r3, r2]
    e9b2:	1c5a      	adds	r2, r3, #1
    e9b4:	b290      	uxth	r0, r2
    e9b6:	687a      	ldr	r2, [r7, #4]
    e9b8:	490c      	ldr	r1, [pc, #48]	; (e9ec <pubnub_get+0xa4>)
    e9ba:	5250      	strh	r0, [r2, r1]
    e9bc:	6879      	ldr	r1, [r7, #4]
    e9be:	22da      	movs	r2, #218	; 0xda
    e9c0:	0092      	lsls	r2, r2, #2
    e9c2:	5a8a      	ldrh	r2, [r1, r2]
    e9c4:	4293      	cmp	r3, r2
    e9c6:	d801      	bhi.n	e9cc <pubnub_get+0x84>
			return rslt;
    e9c8:	68fb      	ldr	r3, [r7, #12]
    e9ca:	e000      	b.n	e9ce <pubnub_get+0x86>
		}
	}

	return NULL;
    e9cc:	2300      	movs	r3, #0
}
    e9ce:	0018      	movs	r0, r3
    e9d0:	46bd      	mov	sp, r7
    e9d2:	b005      	add	sp, #20
    e9d4:	bd90      	pop	{r4, r7, pc}
    e9d6:	46c0      	nop			; (mov r8, r8)
    e9d8:	0000dd2d 	.word	0x0000dd2d
    e9dc:	0001351c 	.word	0x0001351c
    e9e0:	00013718 	.word	0x00013718
    e9e4:	00013530 	.word	0x00013530
    e9e8:	000106f5 	.word	0x000106f5
    e9ec:	00000366 	.word	0x00000366
    e9f0:	000110e9 	.word	0x000110e9

0000e9f4 <__aeabi_uidiv>:
    e9f4:	2200      	movs	r2, #0
    e9f6:	0843      	lsrs	r3, r0, #1
    e9f8:	428b      	cmp	r3, r1
    e9fa:	d374      	bcc.n	eae6 <__aeabi_uidiv+0xf2>
    e9fc:	0903      	lsrs	r3, r0, #4
    e9fe:	428b      	cmp	r3, r1
    ea00:	d35f      	bcc.n	eac2 <__aeabi_uidiv+0xce>
    ea02:	0a03      	lsrs	r3, r0, #8
    ea04:	428b      	cmp	r3, r1
    ea06:	d344      	bcc.n	ea92 <__aeabi_uidiv+0x9e>
    ea08:	0b03      	lsrs	r3, r0, #12
    ea0a:	428b      	cmp	r3, r1
    ea0c:	d328      	bcc.n	ea60 <__aeabi_uidiv+0x6c>
    ea0e:	0c03      	lsrs	r3, r0, #16
    ea10:	428b      	cmp	r3, r1
    ea12:	d30d      	bcc.n	ea30 <__aeabi_uidiv+0x3c>
    ea14:	22ff      	movs	r2, #255	; 0xff
    ea16:	0209      	lsls	r1, r1, #8
    ea18:	ba12      	rev	r2, r2
    ea1a:	0c03      	lsrs	r3, r0, #16
    ea1c:	428b      	cmp	r3, r1
    ea1e:	d302      	bcc.n	ea26 <__aeabi_uidiv+0x32>
    ea20:	1212      	asrs	r2, r2, #8
    ea22:	0209      	lsls	r1, r1, #8
    ea24:	d065      	beq.n	eaf2 <__aeabi_uidiv+0xfe>
    ea26:	0b03      	lsrs	r3, r0, #12
    ea28:	428b      	cmp	r3, r1
    ea2a:	d319      	bcc.n	ea60 <__aeabi_uidiv+0x6c>
    ea2c:	e000      	b.n	ea30 <__aeabi_uidiv+0x3c>
    ea2e:	0a09      	lsrs	r1, r1, #8
    ea30:	0bc3      	lsrs	r3, r0, #15
    ea32:	428b      	cmp	r3, r1
    ea34:	d301      	bcc.n	ea3a <__aeabi_uidiv+0x46>
    ea36:	03cb      	lsls	r3, r1, #15
    ea38:	1ac0      	subs	r0, r0, r3
    ea3a:	4152      	adcs	r2, r2
    ea3c:	0b83      	lsrs	r3, r0, #14
    ea3e:	428b      	cmp	r3, r1
    ea40:	d301      	bcc.n	ea46 <__aeabi_uidiv+0x52>
    ea42:	038b      	lsls	r3, r1, #14
    ea44:	1ac0      	subs	r0, r0, r3
    ea46:	4152      	adcs	r2, r2
    ea48:	0b43      	lsrs	r3, r0, #13
    ea4a:	428b      	cmp	r3, r1
    ea4c:	d301      	bcc.n	ea52 <__aeabi_uidiv+0x5e>
    ea4e:	034b      	lsls	r3, r1, #13
    ea50:	1ac0      	subs	r0, r0, r3
    ea52:	4152      	adcs	r2, r2
    ea54:	0b03      	lsrs	r3, r0, #12
    ea56:	428b      	cmp	r3, r1
    ea58:	d301      	bcc.n	ea5e <__aeabi_uidiv+0x6a>
    ea5a:	030b      	lsls	r3, r1, #12
    ea5c:	1ac0      	subs	r0, r0, r3
    ea5e:	4152      	adcs	r2, r2
    ea60:	0ac3      	lsrs	r3, r0, #11
    ea62:	428b      	cmp	r3, r1
    ea64:	d301      	bcc.n	ea6a <__aeabi_uidiv+0x76>
    ea66:	02cb      	lsls	r3, r1, #11
    ea68:	1ac0      	subs	r0, r0, r3
    ea6a:	4152      	adcs	r2, r2
    ea6c:	0a83      	lsrs	r3, r0, #10
    ea6e:	428b      	cmp	r3, r1
    ea70:	d301      	bcc.n	ea76 <__aeabi_uidiv+0x82>
    ea72:	028b      	lsls	r3, r1, #10
    ea74:	1ac0      	subs	r0, r0, r3
    ea76:	4152      	adcs	r2, r2
    ea78:	0a43      	lsrs	r3, r0, #9
    ea7a:	428b      	cmp	r3, r1
    ea7c:	d301      	bcc.n	ea82 <__aeabi_uidiv+0x8e>
    ea7e:	024b      	lsls	r3, r1, #9
    ea80:	1ac0      	subs	r0, r0, r3
    ea82:	4152      	adcs	r2, r2
    ea84:	0a03      	lsrs	r3, r0, #8
    ea86:	428b      	cmp	r3, r1
    ea88:	d301      	bcc.n	ea8e <__aeabi_uidiv+0x9a>
    ea8a:	020b      	lsls	r3, r1, #8
    ea8c:	1ac0      	subs	r0, r0, r3
    ea8e:	4152      	adcs	r2, r2
    ea90:	d2cd      	bcs.n	ea2e <__aeabi_uidiv+0x3a>
    ea92:	09c3      	lsrs	r3, r0, #7
    ea94:	428b      	cmp	r3, r1
    ea96:	d301      	bcc.n	ea9c <__aeabi_uidiv+0xa8>
    ea98:	01cb      	lsls	r3, r1, #7
    ea9a:	1ac0      	subs	r0, r0, r3
    ea9c:	4152      	adcs	r2, r2
    ea9e:	0983      	lsrs	r3, r0, #6
    eaa0:	428b      	cmp	r3, r1
    eaa2:	d301      	bcc.n	eaa8 <__aeabi_uidiv+0xb4>
    eaa4:	018b      	lsls	r3, r1, #6
    eaa6:	1ac0      	subs	r0, r0, r3
    eaa8:	4152      	adcs	r2, r2
    eaaa:	0943      	lsrs	r3, r0, #5
    eaac:	428b      	cmp	r3, r1
    eaae:	d301      	bcc.n	eab4 <__aeabi_uidiv+0xc0>
    eab0:	014b      	lsls	r3, r1, #5
    eab2:	1ac0      	subs	r0, r0, r3
    eab4:	4152      	adcs	r2, r2
    eab6:	0903      	lsrs	r3, r0, #4
    eab8:	428b      	cmp	r3, r1
    eaba:	d301      	bcc.n	eac0 <__aeabi_uidiv+0xcc>
    eabc:	010b      	lsls	r3, r1, #4
    eabe:	1ac0      	subs	r0, r0, r3
    eac0:	4152      	adcs	r2, r2
    eac2:	08c3      	lsrs	r3, r0, #3
    eac4:	428b      	cmp	r3, r1
    eac6:	d301      	bcc.n	eacc <__aeabi_uidiv+0xd8>
    eac8:	00cb      	lsls	r3, r1, #3
    eaca:	1ac0      	subs	r0, r0, r3
    eacc:	4152      	adcs	r2, r2
    eace:	0883      	lsrs	r3, r0, #2
    ead0:	428b      	cmp	r3, r1
    ead2:	d301      	bcc.n	ead8 <__aeabi_uidiv+0xe4>
    ead4:	008b      	lsls	r3, r1, #2
    ead6:	1ac0      	subs	r0, r0, r3
    ead8:	4152      	adcs	r2, r2
    eada:	0843      	lsrs	r3, r0, #1
    eadc:	428b      	cmp	r3, r1
    eade:	d301      	bcc.n	eae4 <__aeabi_uidiv+0xf0>
    eae0:	004b      	lsls	r3, r1, #1
    eae2:	1ac0      	subs	r0, r0, r3
    eae4:	4152      	adcs	r2, r2
    eae6:	1a41      	subs	r1, r0, r1
    eae8:	d200      	bcs.n	eaec <__aeabi_uidiv+0xf8>
    eaea:	4601      	mov	r1, r0
    eaec:	4152      	adcs	r2, r2
    eaee:	4610      	mov	r0, r2
    eaf0:	4770      	bx	lr
    eaf2:	e7ff      	b.n	eaf4 <__aeabi_uidiv+0x100>
    eaf4:	b501      	push	{r0, lr}
    eaf6:	2000      	movs	r0, #0
    eaf8:	f000 f8f0 	bl	ecdc <__aeabi_idiv0>
    eafc:	bd02      	pop	{r1, pc}
    eafe:	46c0      	nop			; (mov r8, r8)

0000eb00 <__aeabi_uidivmod>:
    eb00:	2900      	cmp	r1, #0
    eb02:	d0f7      	beq.n	eaf4 <__aeabi_uidiv+0x100>
    eb04:	e776      	b.n	e9f4 <__aeabi_uidiv>
    eb06:	4770      	bx	lr

0000eb08 <__aeabi_idiv>:
    eb08:	4603      	mov	r3, r0
    eb0a:	430b      	orrs	r3, r1
    eb0c:	d47f      	bmi.n	ec0e <__aeabi_idiv+0x106>
    eb0e:	2200      	movs	r2, #0
    eb10:	0843      	lsrs	r3, r0, #1
    eb12:	428b      	cmp	r3, r1
    eb14:	d374      	bcc.n	ec00 <__aeabi_idiv+0xf8>
    eb16:	0903      	lsrs	r3, r0, #4
    eb18:	428b      	cmp	r3, r1
    eb1a:	d35f      	bcc.n	ebdc <__aeabi_idiv+0xd4>
    eb1c:	0a03      	lsrs	r3, r0, #8
    eb1e:	428b      	cmp	r3, r1
    eb20:	d344      	bcc.n	ebac <__aeabi_idiv+0xa4>
    eb22:	0b03      	lsrs	r3, r0, #12
    eb24:	428b      	cmp	r3, r1
    eb26:	d328      	bcc.n	eb7a <__aeabi_idiv+0x72>
    eb28:	0c03      	lsrs	r3, r0, #16
    eb2a:	428b      	cmp	r3, r1
    eb2c:	d30d      	bcc.n	eb4a <__aeabi_idiv+0x42>
    eb2e:	22ff      	movs	r2, #255	; 0xff
    eb30:	0209      	lsls	r1, r1, #8
    eb32:	ba12      	rev	r2, r2
    eb34:	0c03      	lsrs	r3, r0, #16
    eb36:	428b      	cmp	r3, r1
    eb38:	d302      	bcc.n	eb40 <__aeabi_idiv+0x38>
    eb3a:	1212      	asrs	r2, r2, #8
    eb3c:	0209      	lsls	r1, r1, #8
    eb3e:	d065      	beq.n	ec0c <__aeabi_idiv+0x104>
    eb40:	0b03      	lsrs	r3, r0, #12
    eb42:	428b      	cmp	r3, r1
    eb44:	d319      	bcc.n	eb7a <__aeabi_idiv+0x72>
    eb46:	e000      	b.n	eb4a <__aeabi_idiv+0x42>
    eb48:	0a09      	lsrs	r1, r1, #8
    eb4a:	0bc3      	lsrs	r3, r0, #15
    eb4c:	428b      	cmp	r3, r1
    eb4e:	d301      	bcc.n	eb54 <__aeabi_idiv+0x4c>
    eb50:	03cb      	lsls	r3, r1, #15
    eb52:	1ac0      	subs	r0, r0, r3
    eb54:	4152      	adcs	r2, r2
    eb56:	0b83      	lsrs	r3, r0, #14
    eb58:	428b      	cmp	r3, r1
    eb5a:	d301      	bcc.n	eb60 <__aeabi_idiv+0x58>
    eb5c:	038b      	lsls	r3, r1, #14
    eb5e:	1ac0      	subs	r0, r0, r3
    eb60:	4152      	adcs	r2, r2
    eb62:	0b43      	lsrs	r3, r0, #13
    eb64:	428b      	cmp	r3, r1
    eb66:	d301      	bcc.n	eb6c <__aeabi_idiv+0x64>
    eb68:	034b      	lsls	r3, r1, #13
    eb6a:	1ac0      	subs	r0, r0, r3
    eb6c:	4152      	adcs	r2, r2
    eb6e:	0b03      	lsrs	r3, r0, #12
    eb70:	428b      	cmp	r3, r1
    eb72:	d301      	bcc.n	eb78 <__aeabi_idiv+0x70>
    eb74:	030b      	lsls	r3, r1, #12
    eb76:	1ac0      	subs	r0, r0, r3
    eb78:	4152      	adcs	r2, r2
    eb7a:	0ac3      	lsrs	r3, r0, #11
    eb7c:	428b      	cmp	r3, r1
    eb7e:	d301      	bcc.n	eb84 <__aeabi_idiv+0x7c>
    eb80:	02cb      	lsls	r3, r1, #11
    eb82:	1ac0      	subs	r0, r0, r3
    eb84:	4152      	adcs	r2, r2
    eb86:	0a83      	lsrs	r3, r0, #10
    eb88:	428b      	cmp	r3, r1
    eb8a:	d301      	bcc.n	eb90 <__aeabi_idiv+0x88>
    eb8c:	028b      	lsls	r3, r1, #10
    eb8e:	1ac0      	subs	r0, r0, r3
    eb90:	4152      	adcs	r2, r2
    eb92:	0a43      	lsrs	r3, r0, #9
    eb94:	428b      	cmp	r3, r1
    eb96:	d301      	bcc.n	eb9c <__aeabi_idiv+0x94>
    eb98:	024b      	lsls	r3, r1, #9
    eb9a:	1ac0      	subs	r0, r0, r3
    eb9c:	4152      	adcs	r2, r2
    eb9e:	0a03      	lsrs	r3, r0, #8
    eba0:	428b      	cmp	r3, r1
    eba2:	d301      	bcc.n	eba8 <__aeabi_idiv+0xa0>
    eba4:	020b      	lsls	r3, r1, #8
    eba6:	1ac0      	subs	r0, r0, r3
    eba8:	4152      	adcs	r2, r2
    ebaa:	d2cd      	bcs.n	eb48 <__aeabi_idiv+0x40>
    ebac:	09c3      	lsrs	r3, r0, #7
    ebae:	428b      	cmp	r3, r1
    ebb0:	d301      	bcc.n	ebb6 <__aeabi_idiv+0xae>
    ebb2:	01cb      	lsls	r3, r1, #7
    ebb4:	1ac0      	subs	r0, r0, r3
    ebb6:	4152      	adcs	r2, r2
    ebb8:	0983      	lsrs	r3, r0, #6
    ebba:	428b      	cmp	r3, r1
    ebbc:	d301      	bcc.n	ebc2 <__aeabi_idiv+0xba>
    ebbe:	018b      	lsls	r3, r1, #6
    ebc0:	1ac0      	subs	r0, r0, r3
    ebc2:	4152      	adcs	r2, r2
    ebc4:	0943      	lsrs	r3, r0, #5
    ebc6:	428b      	cmp	r3, r1
    ebc8:	d301      	bcc.n	ebce <__aeabi_idiv+0xc6>
    ebca:	014b      	lsls	r3, r1, #5
    ebcc:	1ac0      	subs	r0, r0, r3
    ebce:	4152      	adcs	r2, r2
    ebd0:	0903      	lsrs	r3, r0, #4
    ebd2:	428b      	cmp	r3, r1
    ebd4:	d301      	bcc.n	ebda <__aeabi_idiv+0xd2>
    ebd6:	010b      	lsls	r3, r1, #4
    ebd8:	1ac0      	subs	r0, r0, r3
    ebda:	4152      	adcs	r2, r2
    ebdc:	08c3      	lsrs	r3, r0, #3
    ebde:	428b      	cmp	r3, r1
    ebe0:	d301      	bcc.n	ebe6 <__aeabi_idiv+0xde>
    ebe2:	00cb      	lsls	r3, r1, #3
    ebe4:	1ac0      	subs	r0, r0, r3
    ebe6:	4152      	adcs	r2, r2
    ebe8:	0883      	lsrs	r3, r0, #2
    ebea:	428b      	cmp	r3, r1
    ebec:	d301      	bcc.n	ebf2 <__aeabi_idiv+0xea>
    ebee:	008b      	lsls	r3, r1, #2
    ebf0:	1ac0      	subs	r0, r0, r3
    ebf2:	4152      	adcs	r2, r2
    ebf4:	0843      	lsrs	r3, r0, #1
    ebf6:	428b      	cmp	r3, r1
    ebf8:	d301      	bcc.n	ebfe <__aeabi_idiv+0xf6>
    ebfa:	004b      	lsls	r3, r1, #1
    ebfc:	1ac0      	subs	r0, r0, r3
    ebfe:	4152      	adcs	r2, r2
    ec00:	1a41      	subs	r1, r0, r1
    ec02:	d200      	bcs.n	ec06 <__aeabi_idiv+0xfe>
    ec04:	4601      	mov	r1, r0
    ec06:	4152      	adcs	r2, r2
    ec08:	4610      	mov	r0, r2
    ec0a:	4770      	bx	lr
    ec0c:	e05d      	b.n	ecca <__aeabi_idiv+0x1c2>
    ec0e:	0fca      	lsrs	r2, r1, #31
    ec10:	d000      	beq.n	ec14 <__aeabi_idiv+0x10c>
    ec12:	4249      	negs	r1, r1
    ec14:	1003      	asrs	r3, r0, #32
    ec16:	d300      	bcc.n	ec1a <__aeabi_idiv+0x112>
    ec18:	4240      	negs	r0, r0
    ec1a:	4053      	eors	r3, r2
    ec1c:	2200      	movs	r2, #0
    ec1e:	469c      	mov	ip, r3
    ec20:	0903      	lsrs	r3, r0, #4
    ec22:	428b      	cmp	r3, r1
    ec24:	d32d      	bcc.n	ec82 <__aeabi_idiv+0x17a>
    ec26:	0a03      	lsrs	r3, r0, #8
    ec28:	428b      	cmp	r3, r1
    ec2a:	d312      	bcc.n	ec52 <__aeabi_idiv+0x14a>
    ec2c:	22fc      	movs	r2, #252	; 0xfc
    ec2e:	0189      	lsls	r1, r1, #6
    ec30:	ba12      	rev	r2, r2
    ec32:	0a03      	lsrs	r3, r0, #8
    ec34:	428b      	cmp	r3, r1
    ec36:	d30c      	bcc.n	ec52 <__aeabi_idiv+0x14a>
    ec38:	0189      	lsls	r1, r1, #6
    ec3a:	1192      	asrs	r2, r2, #6
    ec3c:	428b      	cmp	r3, r1
    ec3e:	d308      	bcc.n	ec52 <__aeabi_idiv+0x14a>
    ec40:	0189      	lsls	r1, r1, #6
    ec42:	1192      	asrs	r2, r2, #6
    ec44:	428b      	cmp	r3, r1
    ec46:	d304      	bcc.n	ec52 <__aeabi_idiv+0x14a>
    ec48:	0189      	lsls	r1, r1, #6
    ec4a:	d03a      	beq.n	ecc2 <__aeabi_idiv+0x1ba>
    ec4c:	1192      	asrs	r2, r2, #6
    ec4e:	e000      	b.n	ec52 <__aeabi_idiv+0x14a>
    ec50:	0989      	lsrs	r1, r1, #6
    ec52:	09c3      	lsrs	r3, r0, #7
    ec54:	428b      	cmp	r3, r1
    ec56:	d301      	bcc.n	ec5c <__aeabi_idiv+0x154>
    ec58:	01cb      	lsls	r3, r1, #7
    ec5a:	1ac0      	subs	r0, r0, r3
    ec5c:	4152      	adcs	r2, r2
    ec5e:	0983      	lsrs	r3, r0, #6
    ec60:	428b      	cmp	r3, r1
    ec62:	d301      	bcc.n	ec68 <__aeabi_idiv+0x160>
    ec64:	018b      	lsls	r3, r1, #6
    ec66:	1ac0      	subs	r0, r0, r3
    ec68:	4152      	adcs	r2, r2
    ec6a:	0943      	lsrs	r3, r0, #5
    ec6c:	428b      	cmp	r3, r1
    ec6e:	d301      	bcc.n	ec74 <__aeabi_idiv+0x16c>
    ec70:	014b      	lsls	r3, r1, #5
    ec72:	1ac0      	subs	r0, r0, r3
    ec74:	4152      	adcs	r2, r2
    ec76:	0903      	lsrs	r3, r0, #4
    ec78:	428b      	cmp	r3, r1
    ec7a:	d301      	bcc.n	ec80 <__aeabi_idiv+0x178>
    ec7c:	010b      	lsls	r3, r1, #4
    ec7e:	1ac0      	subs	r0, r0, r3
    ec80:	4152      	adcs	r2, r2
    ec82:	08c3      	lsrs	r3, r0, #3
    ec84:	428b      	cmp	r3, r1
    ec86:	d301      	bcc.n	ec8c <__aeabi_idiv+0x184>
    ec88:	00cb      	lsls	r3, r1, #3
    ec8a:	1ac0      	subs	r0, r0, r3
    ec8c:	4152      	adcs	r2, r2
    ec8e:	0883      	lsrs	r3, r0, #2
    ec90:	428b      	cmp	r3, r1
    ec92:	d301      	bcc.n	ec98 <__aeabi_idiv+0x190>
    ec94:	008b      	lsls	r3, r1, #2
    ec96:	1ac0      	subs	r0, r0, r3
    ec98:	4152      	adcs	r2, r2
    ec9a:	d2d9      	bcs.n	ec50 <__aeabi_idiv+0x148>
    ec9c:	0843      	lsrs	r3, r0, #1
    ec9e:	428b      	cmp	r3, r1
    eca0:	d301      	bcc.n	eca6 <__aeabi_idiv+0x19e>
    eca2:	004b      	lsls	r3, r1, #1
    eca4:	1ac0      	subs	r0, r0, r3
    eca6:	4152      	adcs	r2, r2
    eca8:	1a41      	subs	r1, r0, r1
    ecaa:	d200      	bcs.n	ecae <__aeabi_idiv+0x1a6>
    ecac:	4601      	mov	r1, r0
    ecae:	4663      	mov	r3, ip
    ecb0:	4152      	adcs	r2, r2
    ecb2:	105b      	asrs	r3, r3, #1
    ecb4:	4610      	mov	r0, r2
    ecb6:	d301      	bcc.n	ecbc <__aeabi_idiv+0x1b4>
    ecb8:	4240      	negs	r0, r0
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d500      	bpl.n	ecc0 <__aeabi_idiv+0x1b8>
    ecbe:	4249      	negs	r1, r1
    ecc0:	4770      	bx	lr
    ecc2:	4663      	mov	r3, ip
    ecc4:	105b      	asrs	r3, r3, #1
    ecc6:	d300      	bcc.n	ecca <__aeabi_idiv+0x1c2>
    ecc8:	4240      	negs	r0, r0
    ecca:	b501      	push	{r0, lr}
    eccc:	2000      	movs	r0, #0
    ecce:	f000 f805 	bl	ecdc <__aeabi_idiv0>
    ecd2:	bd02      	pop	{r1, pc}

0000ecd4 <__aeabi_idivmod>:
    ecd4:	2900      	cmp	r1, #0
    ecd6:	d0f8      	beq.n	ecca <__aeabi_idiv+0x1c2>
    ecd8:	e716      	b.n	eb08 <__aeabi_idiv>
    ecda:	4770      	bx	lr

0000ecdc <__aeabi_idiv0>:
    ecdc:	4770      	bx	lr
    ecde:	46c0      	nop			; (mov r8, r8)

0000ece0 <__aeabi_lmul>:
    ece0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ece2:	464f      	mov	r7, r9
    ece4:	4646      	mov	r6, r8
    ece6:	b4c0      	push	{r6, r7}
    ece8:	0416      	lsls	r6, r2, #16
    ecea:	0c36      	lsrs	r6, r6, #16
    ecec:	4699      	mov	r9, r3
    ecee:	0033      	movs	r3, r6
    ecf0:	0405      	lsls	r5, r0, #16
    ecf2:	0c2c      	lsrs	r4, r5, #16
    ecf4:	0c07      	lsrs	r7, r0, #16
    ecf6:	0c15      	lsrs	r5, r2, #16
    ecf8:	4363      	muls	r3, r4
    ecfa:	437e      	muls	r6, r7
    ecfc:	436f      	muls	r7, r5
    ecfe:	4365      	muls	r5, r4
    ed00:	0c1c      	lsrs	r4, r3, #16
    ed02:	19ad      	adds	r5, r5, r6
    ed04:	1964      	adds	r4, r4, r5
    ed06:	469c      	mov	ip, r3
    ed08:	42a6      	cmp	r6, r4
    ed0a:	d903      	bls.n	ed14 <__aeabi_lmul+0x34>
    ed0c:	2380      	movs	r3, #128	; 0x80
    ed0e:	025b      	lsls	r3, r3, #9
    ed10:	4698      	mov	r8, r3
    ed12:	4447      	add	r7, r8
    ed14:	4663      	mov	r3, ip
    ed16:	0c25      	lsrs	r5, r4, #16
    ed18:	19ef      	adds	r7, r5, r7
    ed1a:	041d      	lsls	r5, r3, #16
    ed1c:	464b      	mov	r3, r9
    ed1e:	434a      	muls	r2, r1
    ed20:	4343      	muls	r3, r0
    ed22:	0c2d      	lsrs	r5, r5, #16
    ed24:	0424      	lsls	r4, r4, #16
    ed26:	1964      	adds	r4, r4, r5
    ed28:	1899      	adds	r1, r3, r2
    ed2a:	19c9      	adds	r1, r1, r7
    ed2c:	0020      	movs	r0, r4
    ed2e:	bc0c      	pop	{r2, r3}
    ed30:	4690      	mov	r8, r2
    ed32:	4699      	mov	r9, r3
    ed34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed36:	46c0      	nop			; (mov r8, r8)

0000ed38 <__aeabi_dadd>:
    ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed3a:	4656      	mov	r6, sl
    ed3c:	465f      	mov	r7, fp
    ed3e:	464d      	mov	r5, r9
    ed40:	4644      	mov	r4, r8
    ed42:	b4f0      	push	{r4, r5, r6, r7}
    ed44:	000f      	movs	r7, r1
    ed46:	0ffd      	lsrs	r5, r7, #31
    ed48:	46aa      	mov	sl, r5
    ed4a:	0309      	lsls	r1, r1, #12
    ed4c:	007c      	lsls	r4, r7, #1
    ed4e:	002e      	movs	r6, r5
    ed50:	005f      	lsls	r7, r3, #1
    ed52:	0f45      	lsrs	r5, r0, #29
    ed54:	0a49      	lsrs	r1, r1, #9
    ed56:	0d7f      	lsrs	r7, r7, #21
    ed58:	4329      	orrs	r1, r5
    ed5a:	00c5      	lsls	r5, r0, #3
    ed5c:	0318      	lsls	r0, r3, #12
    ed5e:	46bc      	mov	ip, r7
    ed60:	0a40      	lsrs	r0, r0, #9
    ed62:	0f57      	lsrs	r7, r2, #29
    ed64:	0d64      	lsrs	r4, r4, #21
    ed66:	0fdb      	lsrs	r3, r3, #31
    ed68:	4338      	orrs	r0, r7
    ed6a:	00d2      	lsls	r2, r2, #3
    ed6c:	459a      	cmp	sl, r3
    ed6e:	d100      	bne.n	ed72 <__aeabi_dadd+0x3a>
    ed70:	e0aa      	b.n	eec8 <__aeabi_dadd+0x190>
    ed72:	4666      	mov	r6, ip
    ed74:	1ba6      	subs	r6, r4, r6
    ed76:	2e00      	cmp	r6, #0
    ed78:	dc00      	bgt.n	ed7c <__aeabi_dadd+0x44>
    ed7a:	e0ff      	b.n	ef7c <__aeabi_dadd+0x244>
    ed7c:	4663      	mov	r3, ip
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d139      	bne.n	edf6 <__aeabi_dadd+0xbe>
    ed82:	0003      	movs	r3, r0
    ed84:	4313      	orrs	r3, r2
    ed86:	d000      	beq.n	ed8a <__aeabi_dadd+0x52>
    ed88:	e0d9      	b.n	ef3e <__aeabi_dadd+0x206>
    ed8a:	076b      	lsls	r3, r5, #29
    ed8c:	d009      	beq.n	eda2 <__aeabi_dadd+0x6a>
    ed8e:	230f      	movs	r3, #15
    ed90:	402b      	ands	r3, r5
    ed92:	2b04      	cmp	r3, #4
    ed94:	d005      	beq.n	eda2 <__aeabi_dadd+0x6a>
    ed96:	1d2b      	adds	r3, r5, #4
    ed98:	42ab      	cmp	r3, r5
    ed9a:	41ad      	sbcs	r5, r5
    ed9c:	426d      	negs	r5, r5
    ed9e:	1949      	adds	r1, r1, r5
    eda0:	001d      	movs	r5, r3
    eda2:	020b      	lsls	r3, r1, #8
    eda4:	d400      	bmi.n	eda8 <__aeabi_dadd+0x70>
    eda6:	e082      	b.n	eeae <__aeabi_dadd+0x176>
    eda8:	4bca      	ldr	r3, [pc, #808]	; (f0d4 <__aeabi_dadd+0x39c>)
    edaa:	3401      	adds	r4, #1
    edac:	429c      	cmp	r4, r3
    edae:	d100      	bne.n	edb2 <__aeabi_dadd+0x7a>
    edb0:	e0fe      	b.n	efb0 <__aeabi_dadd+0x278>
    edb2:	000a      	movs	r2, r1
    edb4:	4656      	mov	r6, sl
    edb6:	4bc8      	ldr	r3, [pc, #800]	; (f0d8 <__aeabi_dadd+0x3a0>)
    edb8:	08ed      	lsrs	r5, r5, #3
    edba:	401a      	ands	r2, r3
    edbc:	0750      	lsls	r0, r2, #29
    edbe:	0564      	lsls	r4, r4, #21
    edc0:	0252      	lsls	r2, r2, #9
    edc2:	4305      	orrs	r5, r0
    edc4:	0b12      	lsrs	r2, r2, #12
    edc6:	0d64      	lsrs	r4, r4, #21
    edc8:	2100      	movs	r1, #0
    edca:	0312      	lsls	r2, r2, #12
    edcc:	0d0b      	lsrs	r3, r1, #20
    edce:	051b      	lsls	r3, r3, #20
    edd0:	0564      	lsls	r4, r4, #21
    edd2:	0b12      	lsrs	r2, r2, #12
    edd4:	431a      	orrs	r2, r3
    edd6:	0863      	lsrs	r3, r4, #1
    edd8:	4cc0      	ldr	r4, [pc, #768]	; (f0dc <__aeabi_dadd+0x3a4>)
    edda:	07f6      	lsls	r6, r6, #31
    eddc:	4014      	ands	r4, r2
    edde:	431c      	orrs	r4, r3
    ede0:	0064      	lsls	r4, r4, #1
    ede2:	0864      	lsrs	r4, r4, #1
    ede4:	4334      	orrs	r4, r6
    ede6:	0028      	movs	r0, r5
    ede8:	0021      	movs	r1, r4
    edea:	bc3c      	pop	{r2, r3, r4, r5}
    edec:	4690      	mov	r8, r2
    edee:	4699      	mov	r9, r3
    edf0:	46a2      	mov	sl, r4
    edf2:	46ab      	mov	fp, r5
    edf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edf6:	4bb7      	ldr	r3, [pc, #732]	; (f0d4 <__aeabi_dadd+0x39c>)
    edf8:	429c      	cmp	r4, r3
    edfa:	d0c6      	beq.n	ed8a <__aeabi_dadd+0x52>
    edfc:	2380      	movs	r3, #128	; 0x80
    edfe:	041b      	lsls	r3, r3, #16
    ee00:	4318      	orrs	r0, r3
    ee02:	2e38      	cmp	r6, #56	; 0x38
    ee04:	dd00      	ble.n	ee08 <__aeabi_dadd+0xd0>
    ee06:	e0eb      	b.n	efe0 <__aeabi_dadd+0x2a8>
    ee08:	2e1f      	cmp	r6, #31
    ee0a:	dd00      	ble.n	ee0e <__aeabi_dadd+0xd6>
    ee0c:	e11e      	b.n	f04c <__aeabi_dadd+0x314>
    ee0e:	2320      	movs	r3, #32
    ee10:	1b9b      	subs	r3, r3, r6
    ee12:	469c      	mov	ip, r3
    ee14:	0003      	movs	r3, r0
    ee16:	4667      	mov	r7, ip
    ee18:	40bb      	lsls	r3, r7
    ee1a:	4698      	mov	r8, r3
    ee1c:	0013      	movs	r3, r2
    ee1e:	4647      	mov	r7, r8
    ee20:	40f3      	lsrs	r3, r6
    ee22:	433b      	orrs	r3, r7
    ee24:	4667      	mov	r7, ip
    ee26:	40ba      	lsls	r2, r7
    ee28:	1e57      	subs	r7, r2, #1
    ee2a:	41ba      	sbcs	r2, r7
    ee2c:	4313      	orrs	r3, r2
    ee2e:	0002      	movs	r2, r0
    ee30:	40f2      	lsrs	r2, r6
    ee32:	1aeb      	subs	r3, r5, r3
    ee34:	429d      	cmp	r5, r3
    ee36:	41b6      	sbcs	r6, r6
    ee38:	001d      	movs	r5, r3
    ee3a:	1a8a      	subs	r2, r1, r2
    ee3c:	4276      	negs	r6, r6
    ee3e:	1b91      	subs	r1, r2, r6
    ee40:	020b      	lsls	r3, r1, #8
    ee42:	d531      	bpl.n	eea8 <__aeabi_dadd+0x170>
    ee44:	024a      	lsls	r2, r1, #9
    ee46:	0a56      	lsrs	r6, r2, #9
    ee48:	2e00      	cmp	r6, #0
    ee4a:	d100      	bne.n	ee4e <__aeabi_dadd+0x116>
    ee4c:	e0b4      	b.n	efb8 <__aeabi_dadd+0x280>
    ee4e:	0030      	movs	r0, r6
    ee50:	f001 fc32 	bl	106b8 <__clzsi2>
    ee54:	0003      	movs	r3, r0
    ee56:	3b08      	subs	r3, #8
    ee58:	2b1f      	cmp	r3, #31
    ee5a:	dd00      	ble.n	ee5e <__aeabi_dadd+0x126>
    ee5c:	e0b5      	b.n	efca <__aeabi_dadd+0x292>
    ee5e:	2220      	movs	r2, #32
    ee60:	0029      	movs	r1, r5
    ee62:	1ad2      	subs	r2, r2, r3
    ee64:	40d1      	lsrs	r1, r2
    ee66:	409e      	lsls	r6, r3
    ee68:	000a      	movs	r2, r1
    ee6a:	409d      	lsls	r5, r3
    ee6c:	4332      	orrs	r2, r6
    ee6e:	429c      	cmp	r4, r3
    ee70:	dd00      	ble.n	ee74 <__aeabi_dadd+0x13c>
    ee72:	e0b1      	b.n	efd8 <__aeabi_dadd+0x2a0>
    ee74:	1b1c      	subs	r4, r3, r4
    ee76:	1c63      	adds	r3, r4, #1
    ee78:	2b1f      	cmp	r3, #31
    ee7a:	dd00      	ble.n	ee7e <__aeabi_dadd+0x146>
    ee7c:	e0d5      	b.n	f02a <__aeabi_dadd+0x2f2>
    ee7e:	2120      	movs	r1, #32
    ee80:	0014      	movs	r4, r2
    ee82:	0028      	movs	r0, r5
    ee84:	1ac9      	subs	r1, r1, r3
    ee86:	408c      	lsls	r4, r1
    ee88:	40d8      	lsrs	r0, r3
    ee8a:	408d      	lsls	r5, r1
    ee8c:	4304      	orrs	r4, r0
    ee8e:	40da      	lsrs	r2, r3
    ee90:	1e68      	subs	r0, r5, #1
    ee92:	4185      	sbcs	r5, r0
    ee94:	0011      	movs	r1, r2
    ee96:	4325      	orrs	r5, r4
    ee98:	2400      	movs	r4, #0
    ee9a:	e776      	b.n	ed8a <__aeabi_dadd+0x52>
    ee9c:	4641      	mov	r1, r8
    ee9e:	4331      	orrs	r1, r6
    eea0:	d100      	bne.n	eea4 <__aeabi_dadd+0x16c>
    eea2:	e234      	b.n	f30e <__aeabi_dadd+0x5d6>
    eea4:	0031      	movs	r1, r6
    eea6:	4645      	mov	r5, r8
    eea8:	076b      	lsls	r3, r5, #29
    eeaa:	d000      	beq.n	eeae <__aeabi_dadd+0x176>
    eeac:	e76f      	b.n	ed8e <__aeabi_dadd+0x56>
    eeae:	4656      	mov	r6, sl
    eeb0:	0748      	lsls	r0, r1, #29
    eeb2:	08ed      	lsrs	r5, r5, #3
    eeb4:	08c9      	lsrs	r1, r1, #3
    eeb6:	4305      	orrs	r5, r0
    eeb8:	4b86      	ldr	r3, [pc, #536]	; (f0d4 <__aeabi_dadd+0x39c>)
    eeba:	429c      	cmp	r4, r3
    eebc:	d035      	beq.n	ef2a <__aeabi_dadd+0x1f2>
    eebe:	030a      	lsls	r2, r1, #12
    eec0:	0564      	lsls	r4, r4, #21
    eec2:	0b12      	lsrs	r2, r2, #12
    eec4:	0d64      	lsrs	r4, r4, #21
    eec6:	e77f      	b.n	edc8 <__aeabi_dadd+0x90>
    eec8:	4663      	mov	r3, ip
    eeca:	1ae3      	subs	r3, r4, r3
    eecc:	469b      	mov	fp, r3
    eece:	2b00      	cmp	r3, #0
    eed0:	dc00      	bgt.n	eed4 <__aeabi_dadd+0x19c>
    eed2:	e08b      	b.n	efec <__aeabi_dadd+0x2b4>
    eed4:	4667      	mov	r7, ip
    eed6:	2f00      	cmp	r7, #0
    eed8:	d03c      	beq.n	ef54 <__aeabi_dadd+0x21c>
    eeda:	4f7e      	ldr	r7, [pc, #504]	; (f0d4 <__aeabi_dadd+0x39c>)
    eedc:	42bc      	cmp	r4, r7
    eede:	d100      	bne.n	eee2 <__aeabi_dadd+0x1aa>
    eee0:	e753      	b.n	ed8a <__aeabi_dadd+0x52>
    eee2:	2780      	movs	r7, #128	; 0x80
    eee4:	043f      	lsls	r7, r7, #16
    eee6:	4338      	orrs	r0, r7
    eee8:	465b      	mov	r3, fp
    eeea:	2b38      	cmp	r3, #56	; 0x38
    eeec:	dc00      	bgt.n	eef0 <__aeabi_dadd+0x1b8>
    eeee:	e0f7      	b.n	f0e0 <__aeabi_dadd+0x3a8>
    eef0:	4302      	orrs	r2, r0
    eef2:	1e50      	subs	r0, r2, #1
    eef4:	4182      	sbcs	r2, r0
    eef6:	2000      	movs	r0, #0
    eef8:	b2d2      	uxtb	r2, r2
    eefa:	1953      	adds	r3, r2, r5
    eefc:	1842      	adds	r2, r0, r1
    eefe:	42ab      	cmp	r3, r5
    ef00:	4189      	sbcs	r1, r1
    ef02:	001d      	movs	r5, r3
    ef04:	4249      	negs	r1, r1
    ef06:	1889      	adds	r1, r1, r2
    ef08:	020b      	lsls	r3, r1, #8
    ef0a:	d5cd      	bpl.n	eea8 <__aeabi_dadd+0x170>
    ef0c:	4b71      	ldr	r3, [pc, #452]	; (f0d4 <__aeabi_dadd+0x39c>)
    ef0e:	3401      	adds	r4, #1
    ef10:	429c      	cmp	r4, r3
    ef12:	d100      	bne.n	ef16 <__aeabi_dadd+0x1de>
    ef14:	e13d      	b.n	f192 <__aeabi_dadd+0x45a>
    ef16:	2001      	movs	r0, #1
    ef18:	4a6f      	ldr	r2, [pc, #444]	; (f0d8 <__aeabi_dadd+0x3a0>)
    ef1a:	086b      	lsrs	r3, r5, #1
    ef1c:	400a      	ands	r2, r1
    ef1e:	4028      	ands	r0, r5
    ef20:	4318      	orrs	r0, r3
    ef22:	07d5      	lsls	r5, r2, #31
    ef24:	4305      	orrs	r5, r0
    ef26:	0851      	lsrs	r1, r2, #1
    ef28:	e72f      	b.n	ed8a <__aeabi_dadd+0x52>
    ef2a:	002b      	movs	r3, r5
    ef2c:	430b      	orrs	r3, r1
    ef2e:	d100      	bne.n	ef32 <__aeabi_dadd+0x1fa>
    ef30:	e1cb      	b.n	f2ca <__aeabi_dadd+0x592>
    ef32:	2380      	movs	r3, #128	; 0x80
    ef34:	031b      	lsls	r3, r3, #12
    ef36:	430b      	orrs	r3, r1
    ef38:	031a      	lsls	r2, r3, #12
    ef3a:	0b12      	lsrs	r2, r2, #12
    ef3c:	e744      	b.n	edc8 <__aeabi_dadd+0x90>
    ef3e:	3e01      	subs	r6, #1
    ef40:	2e00      	cmp	r6, #0
    ef42:	d16d      	bne.n	f020 <__aeabi_dadd+0x2e8>
    ef44:	1aae      	subs	r6, r5, r2
    ef46:	42b5      	cmp	r5, r6
    ef48:	419b      	sbcs	r3, r3
    ef4a:	1a09      	subs	r1, r1, r0
    ef4c:	425b      	negs	r3, r3
    ef4e:	1ac9      	subs	r1, r1, r3
    ef50:	0035      	movs	r5, r6
    ef52:	e775      	b.n	ee40 <__aeabi_dadd+0x108>
    ef54:	0007      	movs	r7, r0
    ef56:	4317      	orrs	r7, r2
    ef58:	d100      	bne.n	ef5c <__aeabi_dadd+0x224>
    ef5a:	e716      	b.n	ed8a <__aeabi_dadd+0x52>
    ef5c:	2301      	movs	r3, #1
    ef5e:	425b      	negs	r3, r3
    ef60:	469c      	mov	ip, r3
    ef62:	44e3      	add	fp, ip
    ef64:	465b      	mov	r3, fp
    ef66:	2b00      	cmp	r3, #0
    ef68:	d000      	beq.n	ef6c <__aeabi_dadd+0x234>
    ef6a:	e0e0      	b.n	f12e <__aeabi_dadd+0x3f6>
    ef6c:	18aa      	adds	r2, r5, r2
    ef6e:	42aa      	cmp	r2, r5
    ef70:	419b      	sbcs	r3, r3
    ef72:	1809      	adds	r1, r1, r0
    ef74:	425b      	negs	r3, r3
    ef76:	1859      	adds	r1, r3, r1
    ef78:	0015      	movs	r5, r2
    ef7a:	e7c5      	b.n	ef08 <__aeabi_dadd+0x1d0>
    ef7c:	2e00      	cmp	r6, #0
    ef7e:	d175      	bne.n	f06c <__aeabi_dadd+0x334>
    ef80:	1c66      	adds	r6, r4, #1
    ef82:	0576      	lsls	r6, r6, #21
    ef84:	0d76      	lsrs	r6, r6, #21
    ef86:	2e01      	cmp	r6, #1
    ef88:	dc00      	bgt.n	ef8c <__aeabi_dadd+0x254>
    ef8a:	e0f3      	b.n	f174 <__aeabi_dadd+0x43c>
    ef8c:	1aae      	subs	r6, r5, r2
    ef8e:	46b0      	mov	r8, r6
    ef90:	4545      	cmp	r5, r8
    ef92:	41bf      	sbcs	r7, r7
    ef94:	1a0e      	subs	r6, r1, r0
    ef96:	427f      	negs	r7, r7
    ef98:	1bf6      	subs	r6, r6, r7
    ef9a:	0237      	lsls	r7, r6, #8
    ef9c:	d400      	bmi.n	efa0 <__aeabi_dadd+0x268>
    ef9e:	e08f      	b.n	f0c0 <__aeabi_dadd+0x388>
    efa0:	1b55      	subs	r5, r2, r5
    efa2:	42aa      	cmp	r2, r5
    efa4:	41b6      	sbcs	r6, r6
    efa6:	1a41      	subs	r1, r0, r1
    efa8:	4276      	negs	r6, r6
    efaa:	1b8e      	subs	r6, r1, r6
    efac:	469a      	mov	sl, r3
    efae:	e74b      	b.n	ee48 <__aeabi_dadd+0x110>
    efb0:	4656      	mov	r6, sl
    efb2:	2200      	movs	r2, #0
    efb4:	2500      	movs	r5, #0
    efb6:	e707      	b.n	edc8 <__aeabi_dadd+0x90>
    efb8:	0028      	movs	r0, r5
    efba:	f001 fb7d 	bl	106b8 <__clzsi2>
    efbe:	3020      	adds	r0, #32
    efc0:	0003      	movs	r3, r0
    efc2:	3b08      	subs	r3, #8
    efc4:	2b1f      	cmp	r3, #31
    efc6:	dc00      	bgt.n	efca <__aeabi_dadd+0x292>
    efc8:	e749      	b.n	ee5e <__aeabi_dadd+0x126>
    efca:	002a      	movs	r2, r5
    efcc:	3828      	subs	r0, #40	; 0x28
    efce:	4082      	lsls	r2, r0
    efd0:	2500      	movs	r5, #0
    efd2:	429c      	cmp	r4, r3
    efd4:	dc00      	bgt.n	efd8 <__aeabi_dadd+0x2a0>
    efd6:	e74d      	b.n	ee74 <__aeabi_dadd+0x13c>
    efd8:	493f      	ldr	r1, [pc, #252]	; (f0d8 <__aeabi_dadd+0x3a0>)
    efda:	1ae4      	subs	r4, r4, r3
    efdc:	4011      	ands	r1, r2
    efde:	e6d4      	b.n	ed8a <__aeabi_dadd+0x52>
    efe0:	4302      	orrs	r2, r0
    efe2:	1e50      	subs	r0, r2, #1
    efe4:	4182      	sbcs	r2, r0
    efe6:	b2d3      	uxtb	r3, r2
    efe8:	2200      	movs	r2, #0
    efea:	e722      	b.n	ee32 <__aeabi_dadd+0xfa>
    efec:	2b00      	cmp	r3, #0
    efee:	d000      	beq.n	eff2 <__aeabi_dadd+0x2ba>
    eff0:	e0f3      	b.n	f1da <__aeabi_dadd+0x4a2>
    eff2:	1c63      	adds	r3, r4, #1
    eff4:	469c      	mov	ip, r3
    eff6:	055b      	lsls	r3, r3, #21
    eff8:	0d5b      	lsrs	r3, r3, #21
    effa:	2b01      	cmp	r3, #1
    effc:	dc00      	bgt.n	f000 <__aeabi_dadd+0x2c8>
    effe:	e09f      	b.n	f140 <__aeabi_dadd+0x408>
    f000:	4b34      	ldr	r3, [pc, #208]	; (f0d4 <__aeabi_dadd+0x39c>)
    f002:	459c      	cmp	ip, r3
    f004:	d100      	bne.n	f008 <__aeabi_dadd+0x2d0>
    f006:	e0c3      	b.n	f190 <__aeabi_dadd+0x458>
    f008:	18aa      	adds	r2, r5, r2
    f00a:	1809      	adds	r1, r1, r0
    f00c:	42aa      	cmp	r2, r5
    f00e:	4180      	sbcs	r0, r0
    f010:	4240      	negs	r0, r0
    f012:	1841      	adds	r1, r0, r1
    f014:	07cd      	lsls	r5, r1, #31
    f016:	0852      	lsrs	r2, r2, #1
    f018:	4315      	orrs	r5, r2
    f01a:	0849      	lsrs	r1, r1, #1
    f01c:	4664      	mov	r4, ip
    f01e:	e6b4      	b.n	ed8a <__aeabi_dadd+0x52>
    f020:	4b2c      	ldr	r3, [pc, #176]	; (f0d4 <__aeabi_dadd+0x39c>)
    f022:	429c      	cmp	r4, r3
    f024:	d000      	beq.n	f028 <__aeabi_dadd+0x2f0>
    f026:	e6ec      	b.n	ee02 <__aeabi_dadd+0xca>
    f028:	e6af      	b.n	ed8a <__aeabi_dadd+0x52>
    f02a:	0011      	movs	r1, r2
    f02c:	3c1f      	subs	r4, #31
    f02e:	40e1      	lsrs	r1, r4
    f030:	000c      	movs	r4, r1
    f032:	2b20      	cmp	r3, #32
    f034:	d100      	bne.n	f038 <__aeabi_dadd+0x300>
    f036:	e07f      	b.n	f138 <__aeabi_dadd+0x400>
    f038:	2140      	movs	r1, #64	; 0x40
    f03a:	1acb      	subs	r3, r1, r3
    f03c:	409a      	lsls	r2, r3
    f03e:	4315      	orrs	r5, r2
    f040:	1e6a      	subs	r2, r5, #1
    f042:	4195      	sbcs	r5, r2
    f044:	2100      	movs	r1, #0
    f046:	4325      	orrs	r5, r4
    f048:	2400      	movs	r4, #0
    f04a:	e72d      	b.n	eea8 <__aeabi_dadd+0x170>
    f04c:	0033      	movs	r3, r6
    f04e:	0007      	movs	r7, r0
    f050:	3b20      	subs	r3, #32
    f052:	40df      	lsrs	r7, r3
    f054:	003b      	movs	r3, r7
    f056:	2e20      	cmp	r6, #32
    f058:	d070      	beq.n	f13c <__aeabi_dadd+0x404>
    f05a:	2740      	movs	r7, #64	; 0x40
    f05c:	1bbe      	subs	r6, r7, r6
    f05e:	40b0      	lsls	r0, r6
    f060:	4302      	orrs	r2, r0
    f062:	1e50      	subs	r0, r2, #1
    f064:	4182      	sbcs	r2, r0
    f066:	4313      	orrs	r3, r2
    f068:	2200      	movs	r2, #0
    f06a:	e6e2      	b.n	ee32 <__aeabi_dadd+0xfa>
    f06c:	2c00      	cmp	r4, #0
    f06e:	d04f      	beq.n	f110 <__aeabi_dadd+0x3d8>
    f070:	4c18      	ldr	r4, [pc, #96]	; (f0d4 <__aeabi_dadd+0x39c>)
    f072:	45a4      	cmp	ip, r4
    f074:	d100      	bne.n	f078 <__aeabi_dadd+0x340>
    f076:	e0ab      	b.n	f1d0 <__aeabi_dadd+0x498>
    f078:	2480      	movs	r4, #128	; 0x80
    f07a:	0424      	lsls	r4, r4, #16
    f07c:	4276      	negs	r6, r6
    f07e:	4321      	orrs	r1, r4
    f080:	2e38      	cmp	r6, #56	; 0x38
    f082:	dd00      	ble.n	f086 <__aeabi_dadd+0x34e>
    f084:	e0df      	b.n	f246 <__aeabi_dadd+0x50e>
    f086:	2e1f      	cmp	r6, #31
    f088:	dd00      	ble.n	f08c <__aeabi_dadd+0x354>
    f08a:	e143      	b.n	f314 <__aeabi_dadd+0x5dc>
    f08c:	2720      	movs	r7, #32
    f08e:	1bbc      	subs	r4, r7, r6
    f090:	46a1      	mov	r9, r4
    f092:	000c      	movs	r4, r1
    f094:	464f      	mov	r7, r9
    f096:	40bc      	lsls	r4, r7
    f098:	46a0      	mov	r8, r4
    f09a:	002c      	movs	r4, r5
    f09c:	4647      	mov	r7, r8
    f09e:	40f4      	lsrs	r4, r6
    f0a0:	433c      	orrs	r4, r7
    f0a2:	464f      	mov	r7, r9
    f0a4:	40bd      	lsls	r5, r7
    f0a6:	1e6f      	subs	r7, r5, #1
    f0a8:	41bd      	sbcs	r5, r7
    f0aa:	40f1      	lsrs	r1, r6
    f0ac:	432c      	orrs	r4, r5
    f0ae:	1b15      	subs	r5, r2, r4
    f0b0:	42aa      	cmp	r2, r5
    f0b2:	4192      	sbcs	r2, r2
    f0b4:	1a41      	subs	r1, r0, r1
    f0b6:	4252      	negs	r2, r2
    f0b8:	1a89      	subs	r1, r1, r2
    f0ba:	4664      	mov	r4, ip
    f0bc:	469a      	mov	sl, r3
    f0be:	e6bf      	b.n	ee40 <__aeabi_dadd+0x108>
    f0c0:	4641      	mov	r1, r8
    f0c2:	4645      	mov	r5, r8
    f0c4:	4331      	orrs	r1, r6
    f0c6:	d000      	beq.n	f0ca <__aeabi_dadd+0x392>
    f0c8:	e6be      	b.n	ee48 <__aeabi_dadd+0x110>
    f0ca:	2600      	movs	r6, #0
    f0cc:	2400      	movs	r4, #0
    f0ce:	2500      	movs	r5, #0
    f0d0:	e6f2      	b.n	eeb8 <__aeabi_dadd+0x180>
    f0d2:	46c0      	nop			; (mov r8, r8)
    f0d4:	000007ff 	.word	0x000007ff
    f0d8:	ff7fffff 	.word	0xff7fffff
    f0dc:	800fffff 	.word	0x800fffff
    f0e0:	2b1f      	cmp	r3, #31
    f0e2:	dc59      	bgt.n	f198 <__aeabi_dadd+0x460>
    f0e4:	2720      	movs	r7, #32
    f0e6:	1aff      	subs	r7, r7, r3
    f0e8:	46bc      	mov	ip, r7
    f0ea:	0007      	movs	r7, r0
    f0ec:	4663      	mov	r3, ip
    f0ee:	409f      	lsls	r7, r3
    f0f0:	465b      	mov	r3, fp
    f0f2:	46b9      	mov	r9, r7
    f0f4:	0017      	movs	r7, r2
    f0f6:	40df      	lsrs	r7, r3
    f0f8:	46b8      	mov	r8, r7
    f0fa:	464f      	mov	r7, r9
    f0fc:	4643      	mov	r3, r8
    f0fe:	431f      	orrs	r7, r3
    f100:	4663      	mov	r3, ip
    f102:	409a      	lsls	r2, r3
    f104:	1e53      	subs	r3, r2, #1
    f106:	419a      	sbcs	r2, r3
    f108:	465b      	mov	r3, fp
    f10a:	433a      	orrs	r2, r7
    f10c:	40d8      	lsrs	r0, r3
    f10e:	e6f4      	b.n	eefa <__aeabi_dadd+0x1c2>
    f110:	000c      	movs	r4, r1
    f112:	432c      	orrs	r4, r5
    f114:	d05c      	beq.n	f1d0 <__aeabi_dadd+0x498>
    f116:	43f6      	mvns	r6, r6
    f118:	2e00      	cmp	r6, #0
    f11a:	d155      	bne.n	f1c8 <__aeabi_dadd+0x490>
    f11c:	1b55      	subs	r5, r2, r5
    f11e:	42aa      	cmp	r2, r5
    f120:	41a4      	sbcs	r4, r4
    f122:	1a41      	subs	r1, r0, r1
    f124:	4264      	negs	r4, r4
    f126:	1b09      	subs	r1, r1, r4
    f128:	469a      	mov	sl, r3
    f12a:	4664      	mov	r4, ip
    f12c:	e688      	b.n	ee40 <__aeabi_dadd+0x108>
    f12e:	4f96      	ldr	r7, [pc, #600]	; (f388 <__aeabi_dadd+0x650>)
    f130:	42bc      	cmp	r4, r7
    f132:	d000      	beq.n	f136 <__aeabi_dadd+0x3fe>
    f134:	e6d8      	b.n	eee8 <__aeabi_dadd+0x1b0>
    f136:	e628      	b.n	ed8a <__aeabi_dadd+0x52>
    f138:	2200      	movs	r2, #0
    f13a:	e780      	b.n	f03e <__aeabi_dadd+0x306>
    f13c:	2000      	movs	r0, #0
    f13e:	e78f      	b.n	f060 <__aeabi_dadd+0x328>
    f140:	000b      	movs	r3, r1
    f142:	432b      	orrs	r3, r5
    f144:	2c00      	cmp	r4, #0
    f146:	d000      	beq.n	f14a <__aeabi_dadd+0x412>
    f148:	e0c2      	b.n	f2d0 <__aeabi_dadd+0x598>
    f14a:	2b00      	cmp	r3, #0
    f14c:	d100      	bne.n	f150 <__aeabi_dadd+0x418>
    f14e:	e101      	b.n	f354 <__aeabi_dadd+0x61c>
    f150:	0003      	movs	r3, r0
    f152:	4313      	orrs	r3, r2
    f154:	d100      	bne.n	f158 <__aeabi_dadd+0x420>
    f156:	e618      	b.n	ed8a <__aeabi_dadd+0x52>
    f158:	18ab      	adds	r3, r5, r2
    f15a:	42ab      	cmp	r3, r5
    f15c:	41b6      	sbcs	r6, r6
    f15e:	1809      	adds	r1, r1, r0
    f160:	4276      	negs	r6, r6
    f162:	1871      	adds	r1, r6, r1
    f164:	020a      	lsls	r2, r1, #8
    f166:	d400      	bmi.n	f16a <__aeabi_dadd+0x432>
    f168:	e109      	b.n	f37e <__aeabi_dadd+0x646>
    f16a:	4a88      	ldr	r2, [pc, #544]	; (f38c <__aeabi_dadd+0x654>)
    f16c:	001d      	movs	r5, r3
    f16e:	4011      	ands	r1, r2
    f170:	4664      	mov	r4, ip
    f172:	e60a      	b.n	ed8a <__aeabi_dadd+0x52>
    f174:	2c00      	cmp	r4, #0
    f176:	d15b      	bne.n	f230 <__aeabi_dadd+0x4f8>
    f178:	000e      	movs	r6, r1
    f17a:	432e      	orrs	r6, r5
    f17c:	d000      	beq.n	f180 <__aeabi_dadd+0x448>
    f17e:	e08a      	b.n	f296 <__aeabi_dadd+0x55e>
    f180:	0001      	movs	r1, r0
    f182:	4311      	orrs	r1, r2
    f184:	d100      	bne.n	f188 <__aeabi_dadd+0x450>
    f186:	e0c2      	b.n	f30e <__aeabi_dadd+0x5d6>
    f188:	0001      	movs	r1, r0
    f18a:	0015      	movs	r5, r2
    f18c:	469a      	mov	sl, r3
    f18e:	e5fc      	b.n	ed8a <__aeabi_dadd+0x52>
    f190:	4664      	mov	r4, ip
    f192:	2100      	movs	r1, #0
    f194:	2500      	movs	r5, #0
    f196:	e68f      	b.n	eeb8 <__aeabi_dadd+0x180>
    f198:	2320      	movs	r3, #32
    f19a:	425b      	negs	r3, r3
    f19c:	469c      	mov	ip, r3
    f19e:	44dc      	add	ip, fp
    f1a0:	4663      	mov	r3, ip
    f1a2:	0007      	movs	r7, r0
    f1a4:	40df      	lsrs	r7, r3
    f1a6:	465b      	mov	r3, fp
    f1a8:	46bc      	mov	ip, r7
    f1aa:	2b20      	cmp	r3, #32
    f1ac:	d100      	bne.n	f1b0 <__aeabi_dadd+0x478>
    f1ae:	e0ac      	b.n	f30a <__aeabi_dadd+0x5d2>
    f1b0:	2340      	movs	r3, #64	; 0x40
    f1b2:	465f      	mov	r7, fp
    f1b4:	1bdb      	subs	r3, r3, r7
    f1b6:	4098      	lsls	r0, r3
    f1b8:	4302      	orrs	r2, r0
    f1ba:	1e50      	subs	r0, r2, #1
    f1bc:	4182      	sbcs	r2, r0
    f1be:	4663      	mov	r3, ip
    f1c0:	4313      	orrs	r3, r2
    f1c2:	001a      	movs	r2, r3
    f1c4:	2000      	movs	r0, #0
    f1c6:	e698      	b.n	eefa <__aeabi_dadd+0x1c2>
    f1c8:	4c6f      	ldr	r4, [pc, #444]	; (f388 <__aeabi_dadd+0x650>)
    f1ca:	45a4      	cmp	ip, r4
    f1cc:	d000      	beq.n	f1d0 <__aeabi_dadd+0x498>
    f1ce:	e757      	b.n	f080 <__aeabi_dadd+0x348>
    f1d0:	0001      	movs	r1, r0
    f1d2:	0015      	movs	r5, r2
    f1d4:	4664      	mov	r4, ip
    f1d6:	469a      	mov	sl, r3
    f1d8:	e5d7      	b.n	ed8a <__aeabi_dadd+0x52>
    f1da:	2c00      	cmp	r4, #0
    f1dc:	d139      	bne.n	f252 <__aeabi_dadd+0x51a>
    f1de:	000c      	movs	r4, r1
    f1e0:	432c      	orrs	r4, r5
    f1e2:	d06e      	beq.n	f2c2 <__aeabi_dadd+0x58a>
    f1e4:	43db      	mvns	r3, r3
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	d01a      	beq.n	f220 <__aeabi_dadd+0x4e8>
    f1ea:	4c67      	ldr	r4, [pc, #412]	; (f388 <__aeabi_dadd+0x650>)
    f1ec:	45a4      	cmp	ip, r4
    f1ee:	d068      	beq.n	f2c2 <__aeabi_dadd+0x58a>
    f1f0:	2b38      	cmp	r3, #56	; 0x38
    f1f2:	dd00      	ble.n	f1f6 <__aeabi_dadd+0x4be>
    f1f4:	e0a4      	b.n	f340 <__aeabi_dadd+0x608>
    f1f6:	2b1f      	cmp	r3, #31
    f1f8:	dd00      	ble.n	f1fc <__aeabi_dadd+0x4c4>
    f1fa:	e0ae      	b.n	f35a <__aeabi_dadd+0x622>
    f1fc:	2420      	movs	r4, #32
    f1fe:	000f      	movs	r7, r1
    f200:	1ae4      	subs	r4, r4, r3
    f202:	40a7      	lsls	r7, r4
    f204:	46b9      	mov	r9, r7
    f206:	002f      	movs	r7, r5
    f208:	40df      	lsrs	r7, r3
    f20a:	46b8      	mov	r8, r7
    f20c:	46a3      	mov	fp, r4
    f20e:	464f      	mov	r7, r9
    f210:	4644      	mov	r4, r8
    f212:	4327      	orrs	r7, r4
    f214:	465c      	mov	r4, fp
    f216:	40a5      	lsls	r5, r4
    f218:	1e6c      	subs	r4, r5, #1
    f21a:	41a5      	sbcs	r5, r4
    f21c:	40d9      	lsrs	r1, r3
    f21e:	433d      	orrs	r5, r7
    f220:	18ad      	adds	r5, r5, r2
    f222:	4295      	cmp	r5, r2
    f224:	419b      	sbcs	r3, r3
    f226:	1809      	adds	r1, r1, r0
    f228:	425b      	negs	r3, r3
    f22a:	1859      	adds	r1, r3, r1
    f22c:	4664      	mov	r4, ip
    f22e:	e66b      	b.n	ef08 <__aeabi_dadd+0x1d0>
    f230:	000c      	movs	r4, r1
    f232:	432c      	orrs	r4, r5
    f234:	d115      	bne.n	f262 <__aeabi_dadd+0x52a>
    f236:	0001      	movs	r1, r0
    f238:	4311      	orrs	r1, r2
    f23a:	d07b      	beq.n	f334 <__aeabi_dadd+0x5fc>
    f23c:	0001      	movs	r1, r0
    f23e:	0015      	movs	r5, r2
    f240:	469a      	mov	sl, r3
    f242:	4c51      	ldr	r4, [pc, #324]	; (f388 <__aeabi_dadd+0x650>)
    f244:	e5a1      	b.n	ed8a <__aeabi_dadd+0x52>
    f246:	430d      	orrs	r5, r1
    f248:	1e69      	subs	r1, r5, #1
    f24a:	418d      	sbcs	r5, r1
    f24c:	2100      	movs	r1, #0
    f24e:	b2ec      	uxtb	r4, r5
    f250:	e72d      	b.n	f0ae <__aeabi_dadd+0x376>
    f252:	4c4d      	ldr	r4, [pc, #308]	; (f388 <__aeabi_dadd+0x650>)
    f254:	45a4      	cmp	ip, r4
    f256:	d034      	beq.n	f2c2 <__aeabi_dadd+0x58a>
    f258:	2480      	movs	r4, #128	; 0x80
    f25a:	0424      	lsls	r4, r4, #16
    f25c:	425b      	negs	r3, r3
    f25e:	4321      	orrs	r1, r4
    f260:	e7c6      	b.n	f1f0 <__aeabi_dadd+0x4b8>
    f262:	0004      	movs	r4, r0
    f264:	4314      	orrs	r4, r2
    f266:	d04e      	beq.n	f306 <__aeabi_dadd+0x5ce>
    f268:	08ed      	lsrs	r5, r5, #3
    f26a:	074c      	lsls	r4, r1, #29
    f26c:	432c      	orrs	r4, r5
    f26e:	2580      	movs	r5, #128	; 0x80
    f270:	08c9      	lsrs	r1, r1, #3
    f272:	032d      	lsls	r5, r5, #12
    f274:	4229      	tst	r1, r5
    f276:	d008      	beq.n	f28a <__aeabi_dadd+0x552>
    f278:	08c6      	lsrs	r6, r0, #3
    f27a:	422e      	tst	r6, r5
    f27c:	d105      	bne.n	f28a <__aeabi_dadd+0x552>
    f27e:	08d2      	lsrs	r2, r2, #3
    f280:	0741      	lsls	r1, r0, #29
    f282:	4311      	orrs	r1, r2
    f284:	000c      	movs	r4, r1
    f286:	469a      	mov	sl, r3
    f288:	0031      	movs	r1, r6
    f28a:	0f62      	lsrs	r2, r4, #29
    f28c:	00c9      	lsls	r1, r1, #3
    f28e:	00e5      	lsls	r5, r4, #3
    f290:	4311      	orrs	r1, r2
    f292:	4c3d      	ldr	r4, [pc, #244]	; (f388 <__aeabi_dadd+0x650>)
    f294:	e579      	b.n	ed8a <__aeabi_dadd+0x52>
    f296:	0006      	movs	r6, r0
    f298:	4316      	orrs	r6, r2
    f29a:	d100      	bne.n	f29e <__aeabi_dadd+0x566>
    f29c:	e575      	b.n	ed8a <__aeabi_dadd+0x52>
    f29e:	1aae      	subs	r6, r5, r2
    f2a0:	46b0      	mov	r8, r6
    f2a2:	4545      	cmp	r5, r8
    f2a4:	41bf      	sbcs	r7, r7
    f2a6:	1a0e      	subs	r6, r1, r0
    f2a8:	427f      	negs	r7, r7
    f2aa:	1bf6      	subs	r6, r6, r7
    f2ac:	0237      	lsls	r7, r6, #8
    f2ae:	d400      	bmi.n	f2b2 <__aeabi_dadd+0x57a>
    f2b0:	e5f4      	b.n	ee9c <__aeabi_dadd+0x164>
    f2b2:	1b55      	subs	r5, r2, r5
    f2b4:	42aa      	cmp	r2, r5
    f2b6:	41b6      	sbcs	r6, r6
    f2b8:	1a41      	subs	r1, r0, r1
    f2ba:	4276      	negs	r6, r6
    f2bc:	1b89      	subs	r1, r1, r6
    f2be:	469a      	mov	sl, r3
    f2c0:	e563      	b.n	ed8a <__aeabi_dadd+0x52>
    f2c2:	0001      	movs	r1, r0
    f2c4:	0015      	movs	r5, r2
    f2c6:	4664      	mov	r4, ip
    f2c8:	e55f      	b.n	ed8a <__aeabi_dadd+0x52>
    f2ca:	2200      	movs	r2, #0
    f2cc:	2500      	movs	r5, #0
    f2ce:	e57b      	b.n	edc8 <__aeabi_dadd+0x90>
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d03b      	beq.n	f34c <__aeabi_dadd+0x614>
    f2d4:	0003      	movs	r3, r0
    f2d6:	4313      	orrs	r3, r2
    f2d8:	d015      	beq.n	f306 <__aeabi_dadd+0x5ce>
    f2da:	08ed      	lsrs	r5, r5, #3
    f2dc:	074b      	lsls	r3, r1, #29
    f2de:	432b      	orrs	r3, r5
    f2e0:	2580      	movs	r5, #128	; 0x80
    f2e2:	08c9      	lsrs	r1, r1, #3
    f2e4:	032d      	lsls	r5, r5, #12
    f2e6:	4229      	tst	r1, r5
    f2e8:	d007      	beq.n	f2fa <__aeabi_dadd+0x5c2>
    f2ea:	08c4      	lsrs	r4, r0, #3
    f2ec:	422c      	tst	r4, r5
    f2ee:	d104      	bne.n	f2fa <__aeabi_dadd+0x5c2>
    f2f0:	0741      	lsls	r1, r0, #29
    f2f2:	000b      	movs	r3, r1
    f2f4:	0021      	movs	r1, r4
    f2f6:	08d2      	lsrs	r2, r2, #3
    f2f8:	4313      	orrs	r3, r2
    f2fa:	00c9      	lsls	r1, r1, #3
    f2fc:	0f5a      	lsrs	r2, r3, #29
    f2fe:	4311      	orrs	r1, r2
    f300:	00dd      	lsls	r5, r3, #3
    f302:	4c21      	ldr	r4, [pc, #132]	; (f388 <__aeabi_dadd+0x650>)
    f304:	e541      	b.n	ed8a <__aeabi_dadd+0x52>
    f306:	4c20      	ldr	r4, [pc, #128]	; (f388 <__aeabi_dadd+0x650>)
    f308:	e53f      	b.n	ed8a <__aeabi_dadd+0x52>
    f30a:	2000      	movs	r0, #0
    f30c:	e754      	b.n	f1b8 <__aeabi_dadd+0x480>
    f30e:	2600      	movs	r6, #0
    f310:	2500      	movs	r5, #0
    f312:	e5d1      	b.n	eeb8 <__aeabi_dadd+0x180>
    f314:	0034      	movs	r4, r6
    f316:	000f      	movs	r7, r1
    f318:	3c20      	subs	r4, #32
    f31a:	40e7      	lsrs	r7, r4
    f31c:	003c      	movs	r4, r7
    f31e:	2e20      	cmp	r6, #32
    f320:	d02b      	beq.n	f37a <__aeabi_dadd+0x642>
    f322:	2740      	movs	r7, #64	; 0x40
    f324:	1bbe      	subs	r6, r7, r6
    f326:	40b1      	lsls	r1, r6
    f328:	430d      	orrs	r5, r1
    f32a:	1e69      	subs	r1, r5, #1
    f32c:	418d      	sbcs	r5, r1
    f32e:	2100      	movs	r1, #0
    f330:	432c      	orrs	r4, r5
    f332:	e6bc      	b.n	f0ae <__aeabi_dadd+0x376>
    f334:	2180      	movs	r1, #128	; 0x80
    f336:	2600      	movs	r6, #0
    f338:	0309      	lsls	r1, r1, #12
    f33a:	4c13      	ldr	r4, [pc, #76]	; (f388 <__aeabi_dadd+0x650>)
    f33c:	2500      	movs	r5, #0
    f33e:	e5bb      	b.n	eeb8 <__aeabi_dadd+0x180>
    f340:	430d      	orrs	r5, r1
    f342:	1e69      	subs	r1, r5, #1
    f344:	418d      	sbcs	r5, r1
    f346:	2100      	movs	r1, #0
    f348:	b2ed      	uxtb	r5, r5
    f34a:	e769      	b.n	f220 <__aeabi_dadd+0x4e8>
    f34c:	0001      	movs	r1, r0
    f34e:	0015      	movs	r5, r2
    f350:	4c0d      	ldr	r4, [pc, #52]	; (f388 <__aeabi_dadd+0x650>)
    f352:	e51a      	b.n	ed8a <__aeabi_dadd+0x52>
    f354:	0001      	movs	r1, r0
    f356:	0015      	movs	r5, r2
    f358:	e517      	b.n	ed8a <__aeabi_dadd+0x52>
    f35a:	001c      	movs	r4, r3
    f35c:	000f      	movs	r7, r1
    f35e:	3c20      	subs	r4, #32
    f360:	40e7      	lsrs	r7, r4
    f362:	003c      	movs	r4, r7
    f364:	2b20      	cmp	r3, #32
    f366:	d00c      	beq.n	f382 <__aeabi_dadd+0x64a>
    f368:	2740      	movs	r7, #64	; 0x40
    f36a:	1afb      	subs	r3, r7, r3
    f36c:	4099      	lsls	r1, r3
    f36e:	430d      	orrs	r5, r1
    f370:	1e69      	subs	r1, r5, #1
    f372:	418d      	sbcs	r5, r1
    f374:	2100      	movs	r1, #0
    f376:	4325      	orrs	r5, r4
    f378:	e752      	b.n	f220 <__aeabi_dadd+0x4e8>
    f37a:	2100      	movs	r1, #0
    f37c:	e7d4      	b.n	f328 <__aeabi_dadd+0x5f0>
    f37e:	001d      	movs	r5, r3
    f380:	e592      	b.n	eea8 <__aeabi_dadd+0x170>
    f382:	2100      	movs	r1, #0
    f384:	e7f3      	b.n	f36e <__aeabi_dadd+0x636>
    f386:	46c0      	nop			; (mov r8, r8)
    f388:	000007ff 	.word	0x000007ff
    f38c:	ff7fffff 	.word	0xff7fffff

0000f390 <__aeabi_ddiv>:
    f390:	b5f0      	push	{r4, r5, r6, r7, lr}
    f392:	4656      	mov	r6, sl
    f394:	464d      	mov	r5, r9
    f396:	4644      	mov	r4, r8
    f398:	465f      	mov	r7, fp
    f39a:	b4f0      	push	{r4, r5, r6, r7}
    f39c:	001d      	movs	r5, r3
    f39e:	030e      	lsls	r6, r1, #12
    f3a0:	004c      	lsls	r4, r1, #1
    f3a2:	0fcb      	lsrs	r3, r1, #31
    f3a4:	b087      	sub	sp, #28
    f3a6:	0007      	movs	r7, r0
    f3a8:	4692      	mov	sl, r2
    f3aa:	4681      	mov	r9, r0
    f3ac:	0b36      	lsrs	r6, r6, #12
    f3ae:	0d64      	lsrs	r4, r4, #21
    f3b0:	4698      	mov	r8, r3
    f3b2:	d06a      	beq.n	f48a <__aeabi_ddiv+0xfa>
    f3b4:	4b6d      	ldr	r3, [pc, #436]	; (f56c <__aeabi_ddiv+0x1dc>)
    f3b6:	429c      	cmp	r4, r3
    f3b8:	d035      	beq.n	f426 <__aeabi_ddiv+0x96>
    f3ba:	2280      	movs	r2, #128	; 0x80
    f3bc:	0f43      	lsrs	r3, r0, #29
    f3be:	0412      	lsls	r2, r2, #16
    f3c0:	4313      	orrs	r3, r2
    f3c2:	00f6      	lsls	r6, r6, #3
    f3c4:	431e      	orrs	r6, r3
    f3c6:	00c3      	lsls	r3, r0, #3
    f3c8:	4699      	mov	r9, r3
    f3ca:	4b69      	ldr	r3, [pc, #420]	; (f570 <__aeabi_ddiv+0x1e0>)
    f3cc:	2700      	movs	r7, #0
    f3ce:	469c      	mov	ip, r3
    f3d0:	2300      	movs	r3, #0
    f3d2:	4464      	add	r4, ip
    f3d4:	9302      	str	r3, [sp, #8]
    f3d6:	032b      	lsls	r3, r5, #12
    f3d8:	0068      	lsls	r0, r5, #1
    f3da:	0b1b      	lsrs	r3, r3, #12
    f3dc:	0fed      	lsrs	r5, r5, #31
    f3de:	4651      	mov	r1, sl
    f3e0:	469b      	mov	fp, r3
    f3e2:	0d40      	lsrs	r0, r0, #21
    f3e4:	9500      	str	r5, [sp, #0]
    f3e6:	d100      	bne.n	f3ea <__aeabi_ddiv+0x5a>
    f3e8:	e078      	b.n	f4dc <__aeabi_ddiv+0x14c>
    f3ea:	4b60      	ldr	r3, [pc, #384]	; (f56c <__aeabi_ddiv+0x1dc>)
    f3ec:	4298      	cmp	r0, r3
    f3ee:	d06c      	beq.n	f4ca <__aeabi_ddiv+0x13a>
    f3f0:	465b      	mov	r3, fp
    f3f2:	00da      	lsls	r2, r3, #3
    f3f4:	0f4b      	lsrs	r3, r1, #29
    f3f6:	2180      	movs	r1, #128	; 0x80
    f3f8:	0409      	lsls	r1, r1, #16
    f3fa:	430b      	orrs	r3, r1
    f3fc:	4313      	orrs	r3, r2
    f3fe:	469b      	mov	fp, r3
    f400:	4653      	mov	r3, sl
    f402:	00d9      	lsls	r1, r3, #3
    f404:	4b5a      	ldr	r3, [pc, #360]	; (f570 <__aeabi_ddiv+0x1e0>)
    f406:	469c      	mov	ip, r3
    f408:	2300      	movs	r3, #0
    f40a:	4460      	add	r0, ip
    f40c:	4642      	mov	r2, r8
    f40e:	1a20      	subs	r0, r4, r0
    f410:	406a      	eors	r2, r5
    f412:	4692      	mov	sl, r2
    f414:	9001      	str	r0, [sp, #4]
    f416:	431f      	orrs	r7, r3
    f418:	2f0f      	cmp	r7, #15
    f41a:	d900      	bls.n	f41e <__aeabi_ddiv+0x8e>
    f41c:	e0b0      	b.n	f580 <__aeabi_ddiv+0x1f0>
    f41e:	4855      	ldr	r0, [pc, #340]	; (f574 <__aeabi_ddiv+0x1e4>)
    f420:	00bf      	lsls	r7, r7, #2
    f422:	59c0      	ldr	r0, [r0, r7]
    f424:	4687      	mov	pc, r0
    f426:	4337      	orrs	r7, r6
    f428:	d000      	beq.n	f42c <__aeabi_ddiv+0x9c>
    f42a:	e088      	b.n	f53e <__aeabi_ddiv+0x1ae>
    f42c:	2300      	movs	r3, #0
    f42e:	4699      	mov	r9, r3
    f430:	3302      	adds	r3, #2
    f432:	2708      	movs	r7, #8
    f434:	2600      	movs	r6, #0
    f436:	9302      	str	r3, [sp, #8]
    f438:	e7cd      	b.n	f3d6 <__aeabi_ddiv+0x46>
    f43a:	4643      	mov	r3, r8
    f43c:	46b3      	mov	fp, r6
    f43e:	4649      	mov	r1, r9
    f440:	9300      	str	r3, [sp, #0]
    f442:	9b02      	ldr	r3, [sp, #8]
    f444:	9a00      	ldr	r2, [sp, #0]
    f446:	4692      	mov	sl, r2
    f448:	2b02      	cmp	r3, #2
    f44a:	d000      	beq.n	f44e <__aeabi_ddiv+0xbe>
    f44c:	e1bf      	b.n	f7ce <__aeabi_ddiv+0x43e>
    f44e:	2100      	movs	r1, #0
    f450:	4653      	mov	r3, sl
    f452:	2201      	movs	r2, #1
    f454:	2600      	movs	r6, #0
    f456:	4689      	mov	r9, r1
    f458:	401a      	ands	r2, r3
    f45a:	4b44      	ldr	r3, [pc, #272]	; (f56c <__aeabi_ddiv+0x1dc>)
    f45c:	2100      	movs	r1, #0
    f45e:	0336      	lsls	r6, r6, #12
    f460:	0d0c      	lsrs	r4, r1, #20
    f462:	0524      	lsls	r4, r4, #20
    f464:	0b36      	lsrs	r6, r6, #12
    f466:	4326      	orrs	r6, r4
    f468:	4c43      	ldr	r4, [pc, #268]	; (f578 <__aeabi_ddiv+0x1e8>)
    f46a:	051b      	lsls	r3, r3, #20
    f46c:	4026      	ands	r6, r4
    f46e:	431e      	orrs	r6, r3
    f470:	0076      	lsls	r6, r6, #1
    f472:	07d2      	lsls	r2, r2, #31
    f474:	0876      	lsrs	r6, r6, #1
    f476:	4316      	orrs	r6, r2
    f478:	4648      	mov	r0, r9
    f47a:	0031      	movs	r1, r6
    f47c:	b007      	add	sp, #28
    f47e:	bc3c      	pop	{r2, r3, r4, r5}
    f480:	4690      	mov	r8, r2
    f482:	4699      	mov	r9, r3
    f484:	46a2      	mov	sl, r4
    f486:	46ab      	mov	fp, r5
    f488:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f48a:	0033      	movs	r3, r6
    f48c:	4303      	orrs	r3, r0
    f48e:	d04f      	beq.n	f530 <__aeabi_ddiv+0x1a0>
    f490:	2e00      	cmp	r6, #0
    f492:	d100      	bne.n	f496 <__aeabi_ddiv+0x106>
    f494:	e1bc      	b.n	f810 <__aeabi_ddiv+0x480>
    f496:	0030      	movs	r0, r6
    f498:	f001 f90e 	bl	106b8 <__clzsi2>
    f49c:	0003      	movs	r3, r0
    f49e:	3b0b      	subs	r3, #11
    f4a0:	2b1c      	cmp	r3, #28
    f4a2:	dd00      	ble.n	f4a6 <__aeabi_ddiv+0x116>
    f4a4:	e1ad      	b.n	f802 <__aeabi_ddiv+0x472>
    f4a6:	221d      	movs	r2, #29
    f4a8:	0001      	movs	r1, r0
    f4aa:	1ad3      	subs	r3, r2, r3
    f4ac:	3908      	subs	r1, #8
    f4ae:	003a      	movs	r2, r7
    f4b0:	408f      	lsls	r7, r1
    f4b2:	408e      	lsls	r6, r1
    f4b4:	40da      	lsrs	r2, r3
    f4b6:	46b9      	mov	r9, r7
    f4b8:	4316      	orrs	r6, r2
    f4ba:	4b30      	ldr	r3, [pc, #192]	; (f57c <__aeabi_ddiv+0x1ec>)
    f4bc:	2700      	movs	r7, #0
    f4be:	469c      	mov	ip, r3
    f4c0:	2300      	movs	r3, #0
    f4c2:	4460      	add	r0, ip
    f4c4:	4244      	negs	r4, r0
    f4c6:	9302      	str	r3, [sp, #8]
    f4c8:	e785      	b.n	f3d6 <__aeabi_ddiv+0x46>
    f4ca:	4653      	mov	r3, sl
    f4cc:	465a      	mov	r2, fp
    f4ce:	4313      	orrs	r3, r2
    f4d0:	d12c      	bne.n	f52c <__aeabi_ddiv+0x19c>
    f4d2:	2300      	movs	r3, #0
    f4d4:	2100      	movs	r1, #0
    f4d6:	469b      	mov	fp, r3
    f4d8:	3302      	adds	r3, #2
    f4da:	e797      	b.n	f40c <__aeabi_ddiv+0x7c>
    f4dc:	430b      	orrs	r3, r1
    f4de:	d020      	beq.n	f522 <__aeabi_ddiv+0x192>
    f4e0:	465b      	mov	r3, fp
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	d100      	bne.n	f4e8 <__aeabi_ddiv+0x158>
    f4e6:	e19e      	b.n	f826 <__aeabi_ddiv+0x496>
    f4e8:	4658      	mov	r0, fp
    f4ea:	f001 f8e5 	bl	106b8 <__clzsi2>
    f4ee:	0003      	movs	r3, r0
    f4f0:	3b0b      	subs	r3, #11
    f4f2:	2b1c      	cmp	r3, #28
    f4f4:	dd00      	ble.n	f4f8 <__aeabi_ddiv+0x168>
    f4f6:	e18f      	b.n	f818 <__aeabi_ddiv+0x488>
    f4f8:	0002      	movs	r2, r0
    f4fa:	4659      	mov	r1, fp
    f4fc:	3a08      	subs	r2, #8
    f4fe:	4091      	lsls	r1, r2
    f500:	468b      	mov	fp, r1
    f502:	211d      	movs	r1, #29
    f504:	1acb      	subs	r3, r1, r3
    f506:	4651      	mov	r1, sl
    f508:	40d9      	lsrs	r1, r3
    f50a:	000b      	movs	r3, r1
    f50c:	4659      	mov	r1, fp
    f50e:	430b      	orrs	r3, r1
    f510:	4651      	mov	r1, sl
    f512:	469b      	mov	fp, r3
    f514:	4091      	lsls	r1, r2
    f516:	4b19      	ldr	r3, [pc, #100]	; (f57c <__aeabi_ddiv+0x1ec>)
    f518:	469c      	mov	ip, r3
    f51a:	4460      	add	r0, ip
    f51c:	4240      	negs	r0, r0
    f51e:	2300      	movs	r3, #0
    f520:	e774      	b.n	f40c <__aeabi_ddiv+0x7c>
    f522:	2300      	movs	r3, #0
    f524:	2100      	movs	r1, #0
    f526:	469b      	mov	fp, r3
    f528:	3301      	adds	r3, #1
    f52a:	e76f      	b.n	f40c <__aeabi_ddiv+0x7c>
    f52c:	2303      	movs	r3, #3
    f52e:	e76d      	b.n	f40c <__aeabi_ddiv+0x7c>
    f530:	2300      	movs	r3, #0
    f532:	4699      	mov	r9, r3
    f534:	3301      	adds	r3, #1
    f536:	2704      	movs	r7, #4
    f538:	2600      	movs	r6, #0
    f53a:	9302      	str	r3, [sp, #8]
    f53c:	e74b      	b.n	f3d6 <__aeabi_ddiv+0x46>
    f53e:	2303      	movs	r3, #3
    f540:	270c      	movs	r7, #12
    f542:	9302      	str	r3, [sp, #8]
    f544:	e747      	b.n	f3d6 <__aeabi_ddiv+0x46>
    f546:	2201      	movs	r2, #1
    f548:	1ad5      	subs	r5, r2, r3
    f54a:	2d38      	cmp	r5, #56	; 0x38
    f54c:	dc00      	bgt.n	f550 <__aeabi_ddiv+0x1c0>
    f54e:	e1b0      	b.n	f8b2 <__aeabi_ddiv+0x522>
    f550:	4653      	mov	r3, sl
    f552:	401a      	ands	r2, r3
    f554:	2100      	movs	r1, #0
    f556:	2300      	movs	r3, #0
    f558:	2600      	movs	r6, #0
    f55a:	4689      	mov	r9, r1
    f55c:	e77e      	b.n	f45c <__aeabi_ddiv+0xcc>
    f55e:	2300      	movs	r3, #0
    f560:	2680      	movs	r6, #128	; 0x80
    f562:	4699      	mov	r9, r3
    f564:	2200      	movs	r2, #0
    f566:	0336      	lsls	r6, r6, #12
    f568:	4b00      	ldr	r3, [pc, #0]	; (f56c <__aeabi_ddiv+0x1dc>)
    f56a:	e777      	b.n	f45c <__aeabi_ddiv+0xcc>
    f56c:	000007ff 	.word	0x000007ff
    f570:	fffffc01 	.word	0xfffffc01
    f574:	00013724 	.word	0x00013724
    f578:	800fffff 	.word	0x800fffff
    f57c:	000003f3 	.word	0x000003f3
    f580:	455e      	cmp	r6, fp
    f582:	d900      	bls.n	f586 <__aeabi_ddiv+0x1f6>
    f584:	e172      	b.n	f86c <__aeabi_ddiv+0x4dc>
    f586:	d100      	bne.n	f58a <__aeabi_ddiv+0x1fa>
    f588:	e16d      	b.n	f866 <__aeabi_ddiv+0x4d6>
    f58a:	9b01      	ldr	r3, [sp, #4]
    f58c:	464d      	mov	r5, r9
    f58e:	3b01      	subs	r3, #1
    f590:	9301      	str	r3, [sp, #4]
    f592:	2300      	movs	r3, #0
    f594:	0034      	movs	r4, r6
    f596:	9302      	str	r3, [sp, #8]
    f598:	465b      	mov	r3, fp
    f59a:	021e      	lsls	r6, r3, #8
    f59c:	0e0b      	lsrs	r3, r1, #24
    f59e:	431e      	orrs	r6, r3
    f5a0:	020b      	lsls	r3, r1, #8
    f5a2:	9303      	str	r3, [sp, #12]
    f5a4:	0c33      	lsrs	r3, r6, #16
    f5a6:	4699      	mov	r9, r3
    f5a8:	0433      	lsls	r3, r6, #16
    f5aa:	0c1b      	lsrs	r3, r3, #16
    f5ac:	4649      	mov	r1, r9
    f5ae:	0020      	movs	r0, r4
    f5b0:	9300      	str	r3, [sp, #0]
    f5b2:	f7ff fa1f 	bl	e9f4 <__aeabi_uidiv>
    f5b6:	9b00      	ldr	r3, [sp, #0]
    f5b8:	0037      	movs	r7, r6
    f5ba:	4343      	muls	r3, r0
    f5bc:	0006      	movs	r6, r0
    f5be:	4649      	mov	r1, r9
    f5c0:	0020      	movs	r0, r4
    f5c2:	4698      	mov	r8, r3
    f5c4:	f7ff fa9c 	bl	eb00 <__aeabi_uidivmod>
    f5c8:	0c2c      	lsrs	r4, r5, #16
    f5ca:	0409      	lsls	r1, r1, #16
    f5cc:	430c      	orrs	r4, r1
    f5ce:	45a0      	cmp	r8, r4
    f5d0:	d909      	bls.n	f5e6 <__aeabi_ddiv+0x256>
    f5d2:	19e4      	adds	r4, r4, r7
    f5d4:	1e73      	subs	r3, r6, #1
    f5d6:	42a7      	cmp	r7, r4
    f5d8:	d900      	bls.n	f5dc <__aeabi_ddiv+0x24c>
    f5da:	e15c      	b.n	f896 <__aeabi_ddiv+0x506>
    f5dc:	45a0      	cmp	r8, r4
    f5de:	d800      	bhi.n	f5e2 <__aeabi_ddiv+0x252>
    f5e0:	e159      	b.n	f896 <__aeabi_ddiv+0x506>
    f5e2:	3e02      	subs	r6, #2
    f5e4:	19e4      	adds	r4, r4, r7
    f5e6:	4643      	mov	r3, r8
    f5e8:	1ae4      	subs	r4, r4, r3
    f5ea:	4649      	mov	r1, r9
    f5ec:	0020      	movs	r0, r4
    f5ee:	f7ff fa01 	bl	e9f4 <__aeabi_uidiv>
    f5f2:	0003      	movs	r3, r0
    f5f4:	9a00      	ldr	r2, [sp, #0]
    f5f6:	4680      	mov	r8, r0
    f5f8:	4353      	muls	r3, r2
    f5fa:	4649      	mov	r1, r9
    f5fc:	0020      	movs	r0, r4
    f5fe:	469b      	mov	fp, r3
    f600:	f7ff fa7e 	bl	eb00 <__aeabi_uidivmod>
    f604:	042a      	lsls	r2, r5, #16
    f606:	0409      	lsls	r1, r1, #16
    f608:	0c12      	lsrs	r2, r2, #16
    f60a:	430a      	orrs	r2, r1
    f60c:	4593      	cmp	fp, r2
    f60e:	d90d      	bls.n	f62c <__aeabi_ddiv+0x29c>
    f610:	4643      	mov	r3, r8
    f612:	19d2      	adds	r2, r2, r7
    f614:	3b01      	subs	r3, #1
    f616:	4297      	cmp	r7, r2
    f618:	d900      	bls.n	f61c <__aeabi_ddiv+0x28c>
    f61a:	e13a      	b.n	f892 <__aeabi_ddiv+0x502>
    f61c:	4593      	cmp	fp, r2
    f61e:	d800      	bhi.n	f622 <__aeabi_ddiv+0x292>
    f620:	e137      	b.n	f892 <__aeabi_ddiv+0x502>
    f622:	2302      	movs	r3, #2
    f624:	425b      	negs	r3, r3
    f626:	469c      	mov	ip, r3
    f628:	19d2      	adds	r2, r2, r7
    f62a:	44e0      	add	r8, ip
    f62c:	465b      	mov	r3, fp
    f62e:	1ad2      	subs	r2, r2, r3
    f630:	4643      	mov	r3, r8
    f632:	0436      	lsls	r6, r6, #16
    f634:	4333      	orrs	r3, r6
    f636:	469b      	mov	fp, r3
    f638:	9903      	ldr	r1, [sp, #12]
    f63a:	0c18      	lsrs	r0, r3, #16
    f63c:	0c0b      	lsrs	r3, r1, #16
    f63e:	001d      	movs	r5, r3
    f640:	9305      	str	r3, [sp, #20]
    f642:	0409      	lsls	r1, r1, #16
    f644:	465b      	mov	r3, fp
    f646:	0c09      	lsrs	r1, r1, #16
    f648:	000c      	movs	r4, r1
    f64a:	041b      	lsls	r3, r3, #16
    f64c:	0c1b      	lsrs	r3, r3, #16
    f64e:	4344      	muls	r4, r0
    f650:	9104      	str	r1, [sp, #16]
    f652:	4359      	muls	r1, r3
    f654:	436b      	muls	r3, r5
    f656:	4368      	muls	r0, r5
    f658:	191b      	adds	r3, r3, r4
    f65a:	0c0d      	lsrs	r5, r1, #16
    f65c:	18eb      	adds	r3, r5, r3
    f65e:	429c      	cmp	r4, r3
    f660:	d903      	bls.n	f66a <__aeabi_ddiv+0x2da>
    f662:	2480      	movs	r4, #128	; 0x80
    f664:	0264      	lsls	r4, r4, #9
    f666:	46a4      	mov	ip, r4
    f668:	4460      	add	r0, ip
    f66a:	0c1c      	lsrs	r4, r3, #16
    f66c:	0409      	lsls	r1, r1, #16
    f66e:	041b      	lsls	r3, r3, #16
    f670:	0c09      	lsrs	r1, r1, #16
    f672:	1820      	adds	r0, r4, r0
    f674:	185d      	adds	r5, r3, r1
    f676:	4282      	cmp	r2, r0
    f678:	d200      	bcs.n	f67c <__aeabi_ddiv+0x2ec>
    f67a:	e0de      	b.n	f83a <__aeabi_ddiv+0x4aa>
    f67c:	d100      	bne.n	f680 <__aeabi_ddiv+0x2f0>
    f67e:	e0d7      	b.n	f830 <__aeabi_ddiv+0x4a0>
    f680:	1a16      	subs	r6, r2, r0
    f682:	9b02      	ldr	r3, [sp, #8]
    f684:	469c      	mov	ip, r3
    f686:	1b5d      	subs	r5, r3, r5
    f688:	45ac      	cmp	ip, r5
    f68a:	419b      	sbcs	r3, r3
    f68c:	425b      	negs	r3, r3
    f68e:	1af6      	subs	r6, r6, r3
    f690:	42b7      	cmp	r7, r6
    f692:	d100      	bne.n	f696 <__aeabi_ddiv+0x306>
    f694:	e106      	b.n	f8a4 <__aeabi_ddiv+0x514>
    f696:	4649      	mov	r1, r9
    f698:	0030      	movs	r0, r6
    f69a:	f7ff f9ab 	bl	e9f4 <__aeabi_uidiv>
    f69e:	9b00      	ldr	r3, [sp, #0]
    f6a0:	0004      	movs	r4, r0
    f6a2:	4343      	muls	r3, r0
    f6a4:	4649      	mov	r1, r9
    f6a6:	0030      	movs	r0, r6
    f6a8:	4698      	mov	r8, r3
    f6aa:	f7ff fa29 	bl	eb00 <__aeabi_uidivmod>
    f6ae:	0c2e      	lsrs	r6, r5, #16
    f6b0:	0409      	lsls	r1, r1, #16
    f6b2:	430e      	orrs	r6, r1
    f6b4:	45b0      	cmp	r8, r6
    f6b6:	d909      	bls.n	f6cc <__aeabi_ddiv+0x33c>
    f6b8:	19f6      	adds	r6, r6, r7
    f6ba:	1e63      	subs	r3, r4, #1
    f6bc:	42b7      	cmp	r7, r6
    f6be:	d900      	bls.n	f6c2 <__aeabi_ddiv+0x332>
    f6c0:	e0f3      	b.n	f8aa <__aeabi_ddiv+0x51a>
    f6c2:	45b0      	cmp	r8, r6
    f6c4:	d800      	bhi.n	f6c8 <__aeabi_ddiv+0x338>
    f6c6:	e0f0      	b.n	f8aa <__aeabi_ddiv+0x51a>
    f6c8:	3c02      	subs	r4, #2
    f6ca:	19f6      	adds	r6, r6, r7
    f6cc:	4643      	mov	r3, r8
    f6ce:	1af3      	subs	r3, r6, r3
    f6d0:	4649      	mov	r1, r9
    f6d2:	0018      	movs	r0, r3
    f6d4:	9302      	str	r3, [sp, #8]
    f6d6:	f7ff f98d 	bl	e9f4 <__aeabi_uidiv>
    f6da:	9b00      	ldr	r3, [sp, #0]
    f6dc:	0006      	movs	r6, r0
    f6de:	4343      	muls	r3, r0
    f6e0:	4649      	mov	r1, r9
    f6e2:	9802      	ldr	r0, [sp, #8]
    f6e4:	4698      	mov	r8, r3
    f6e6:	f7ff fa0b 	bl	eb00 <__aeabi_uidivmod>
    f6ea:	042d      	lsls	r5, r5, #16
    f6ec:	0409      	lsls	r1, r1, #16
    f6ee:	0c2d      	lsrs	r5, r5, #16
    f6f0:	430d      	orrs	r5, r1
    f6f2:	45a8      	cmp	r8, r5
    f6f4:	d909      	bls.n	f70a <__aeabi_ddiv+0x37a>
    f6f6:	19ed      	adds	r5, r5, r7
    f6f8:	1e73      	subs	r3, r6, #1
    f6fa:	42af      	cmp	r7, r5
    f6fc:	d900      	bls.n	f700 <__aeabi_ddiv+0x370>
    f6fe:	e0d6      	b.n	f8ae <__aeabi_ddiv+0x51e>
    f700:	45a8      	cmp	r8, r5
    f702:	d800      	bhi.n	f706 <__aeabi_ddiv+0x376>
    f704:	e0d3      	b.n	f8ae <__aeabi_ddiv+0x51e>
    f706:	3e02      	subs	r6, #2
    f708:	19ed      	adds	r5, r5, r7
    f70a:	0424      	lsls	r4, r4, #16
    f70c:	0021      	movs	r1, r4
    f70e:	4643      	mov	r3, r8
    f710:	4331      	orrs	r1, r6
    f712:	9e04      	ldr	r6, [sp, #16]
    f714:	9a05      	ldr	r2, [sp, #20]
    f716:	0030      	movs	r0, r6
    f718:	1aed      	subs	r5, r5, r3
    f71a:	040b      	lsls	r3, r1, #16
    f71c:	0c0c      	lsrs	r4, r1, #16
    f71e:	0c1b      	lsrs	r3, r3, #16
    f720:	4358      	muls	r0, r3
    f722:	4366      	muls	r6, r4
    f724:	4353      	muls	r3, r2
    f726:	4354      	muls	r4, r2
    f728:	199a      	adds	r2, r3, r6
    f72a:	0c03      	lsrs	r3, r0, #16
    f72c:	189b      	adds	r3, r3, r2
    f72e:	429e      	cmp	r6, r3
    f730:	d903      	bls.n	f73a <__aeabi_ddiv+0x3aa>
    f732:	2280      	movs	r2, #128	; 0x80
    f734:	0252      	lsls	r2, r2, #9
    f736:	4694      	mov	ip, r2
    f738:	4464      	add	r4, ip
    f73a:	0c1a      	lsrs	r2, r3, #16
    f73c:	0400      	lsls	r0, r0, #16
    f73e:	041b      	lsls	r3, r3, #16
    f740:	0c00      	lsrs	r0, r0, #16
    f742:	1914      	adds	r4, r2, r4
    f744:	181b      	adds	r3, r3, r0
    f746:	42a5      	cmp	r5, r4
    f748:	d350      	bcc.n	f7ec <__aeabi_ddiv+0x45c>
    f74a:	d04d      	beq.n	f7e8 <__aeabi_ddiv+0x458>
    f74c:	2301      	movs	r3, #1
    f74e:	4319      	orrs	r1, r3
    f750:	4a96      	ldr	r2, [pc, #600]	; (f9ac <__aeabi_ddiv+0x61c>)
    f752:	9b01      	ldr	r3, [sp, #4]
    f754:	4694      	mov	ip, r2
    f756:	4463      	add	r3, ip
    f758:	2b00      	cmp	r3, #0
    f75a:	dc00      	bgt.n	f75e <__aeabi_ddiv+0x3ce>
    f75c:	e6f3      	b.n	f546 <__aeabi_ddiv+0x1b6>
    f75e:	074a      	lsls	r2, r1, #29
    f760:	d009      	beq.n	f776 <__aeabi_ddiv+0x3e6>
    f762:	220f      	movs	r2, #15
    f764:	400a      	ands	r2, r1
    f766:	2a04      	cmp	r2, #4
    f768:	d005      	beq.n	f776 <__aeabi_ddiv+0x3e6>
    f76a:	1d0a      	adds	r2, r1, #4
    f76c:	428a      	cmp	r2, r1
    f76e:	4189      	sbcs	r1, r1
    f770:	4249      	negs	r1, r1
    f772:	448b      	add	fp, r1
    f774:	0011      	movs	r1, r2
    f776:	465a      	mov	r2, fp
    f778:	01d2      	lsls	r2, r2, #7
    f77a:	d508      	bpl.n	f78e <__aeabi_ddiv+0x3fe>
    f77c:	465a      	mov	r2, fp
    f77e:	4b8c      	ldr	r3, [pc, #560]	; (f9b0 <__aeabi_ddiv+0x620>)
    f780:	401a      	ands	r2, r3
    f782:	4693      	mov	fp, r2
    f784:	2280      	movs	r2, #128	; 0x80
    f786:	00d2      	lsls	r2, r2, #3
    f788:	4694      	mov	ip, r2
    f78a:	9b01      	ldr	r3, [sp, #4]
    f78c:	4463      	add	r3, ip
    f78e:	4a89      	ldr	r2, [pc, #548]	; (f9b4 <__aeabi_ddiv+0x624>)
    f790:	4293      	cmp	r3, r2
    f792:	dd00      	ble.n	f796 <__aeabi_ddiv+0x406>
    f794:	e65b      	b.n	f44e <__aeabi_ddiv+0xbe>
    f796:	465a      	mov	r2, fp
    f798:	08c9      	lsrs	r1, r1, #3
    f79a:	0750      	lsls	r0, r2, #29
    f79c:	4308      	orrs	r0, r1
    f79e:	0256      	lsls	r6, r2, #9
    f7a0:	4651      	mov	r1, sl
    f7a2:	2201      	movs	r2, #1
    f7a4:	055b      	lsls	r3, r3, #21
    f7a6:	4681      	mov	r9, r0
    f7a8:	0b36      	lsrs	r6, r6, #12
    f7aa:	0d5b      	lsrs	r3, r3, #21
    f7ac:	400a      	ands	r2, r1
    f7ae:	e655      	b.n	f45c <__aeabi_ddiv+0xcc>
    f7b0:	2380      	movs	r3, #128	; 0x80
    f7b2:	031b      	lsls	r3, r3, #12
    f7b4:	421e      	tst	r6, r3
    f7b6:	d011      	beq.n	f7dc <__aeabi_ddiv+0x44c>
    f7b8:	465a      	mov	r2, fp
    f7ba:	421a      	tst	r2, r3
    f7bc:	d10e      	bne.n	f7dc <__aeabi_ddiv+0x44c>
    f7be:	465e      	mov	r6, fp
    f7c0:	431e      	orrs	r6, r3
    f7c2:	0336      	lsls	r6, r6, #12
    f7c4:	0b36      	lsrs	r6, r6, #12
    f7c6:	002a      	movs	r2, r5
    f7c8:	4689      	mov	r9, r1
    f7ca:	4b7b      	ldr	r3, [pc, #492]	; (f9b8 <__aeabi_ddiv+0x628>)
    f7cc:	e646      	b.n	f45c <__aeabi_ddiv+0xcc>
    f7ce:	2b03      	cmp	r3, #3
    f7d0:	d100      	bne.n	f7d4 <__aeabi_ddiv+0x444>
    f7d2:	e0e1      	b.n	f998 <__aeabi_ddiv+0x608>
    f7d4:	2b01      	cmp	r3, #1
    f7d6:	d1bb      	bne.n	f750 <__aeabi_ddiv+0x3c0>
    f7d8:	401a      	ands	r2, r3
    f7da:	e6bb      	b.n	f554 <__aeabi_ddiv+0x1c4>
    f7dc:	431e      	orrs	r6, r3
    f7de:	0336      	lsls	r6, r6, #12
    f7e0:	0b36      	lsrs	r6, r6, #12
    f7e2:	4642      	mov	r2, r8
    f7e4:	4b74      	ldr	r3, [pc, #464]	; (f9b8 <__aeabi_ddiv+0x628>)
    f7e6:	e639      	b.n	f45c <__aeabi_ddiv+0xcc>
    f7e8:	2b00      	cmp	r3, #0
    f7ea:	d0b1      	beq.n	f750 <__aeabi_ddiv+0x3c0>
    f7ec:	197d      	adds	r5, r7, r5
    f7ee:	1e4a      	subs	r2, r1, #1
    f7f0:	42af      	cmp	r7, r5
    f7f2:	d952      	bls.n	f89a <__aeabi_ddiv+0x50a>
    f7f4:	0011      	movs	r1, r2
    f7f6:	42a5      	cmp	r5, r4
    f7f8:	d1a8      	bne.n	f74c <__aeabi_ddiv+0x3bc>
    f7fa:	9a03      	ldr	r2, [sp, #12]
    f7fc:	429a      	cmp	r2, r3
    f7fe:	d1a5      	bne.n	f74c <__aeabi_ddiv+0x3bc>
    f800:	e7a6      	b.n	f750 <__aeabi_ddiv+0x3c0>
    f802:	0003      	movs	r3, r0
    f804:	003e      	movs	r6, r7
    f806:	3b28      	subs	r3, #40	; 0x28
    f808:	409e      	lsls	r6, r3
    f80a:	2300      	movs	r3, #0
    f80c:	4699      	mov	r9, r3
    f80e:	e654      	b.n	f4ba <__aeabi_ddiv+0x12a>
    f810:	f000 ff52 	bl	106b8 <__clzsi2>
    f814:	3020      	adds	r0, #32
    f816:	e641      	b.n	f49c <__aeabi_ddiv+0x10c>
    f818:	0003      	movs	r3, r0
    f81a:	4652      	mov	r2, sl
    f81c:	3b28      	subs	r3, #40	; 0x28
    f81e:	409a      	lsls	r2, r3
    f820:	2100      	movs	r1, #0
    f822:	4693      	mov	fp, r2
    f824:	e677      	b.n	f516 <__aeabi_ddiv+0x186>
    f826:	4650      	mov	r0, sl
    f828:	f000 ff46 	bl	106b8 <__clzsi2>
    f82c:	3020      	adds	r0, #32
    f82e:	e65e      	b.n	f4ee <__aeabi_ddiv+0x15e>
    f830:	9b02      	ldr	r3, [sp, #8]
    f832:	2600      	movs	r6, #0
    f834:	42ab      	cmp	r3, r5
    f836:	d300      	bcc.n	f83a <__aeabi_ddiv+0x4aa>
    f838:	e723      	b.n	f682 <__aeabi_ddiv+0x2f2>
    f83a:	9e03      	ldr	r6, [sp, #12]
    f83c:	9902      	ldr	r1, [sp, #8]
    f83e:	46b4      	mov	ip, r6
    f840:	4461      	add	r1, ip
    f842:	4688      	mov	r8, r1
    f844:	45b0      	cmp	r8, r6
    f846:	41b6      	sbcs	r6, r6
    f848:	465b      	mov	r3, fp
    f84a:	4276      	negs	r6, r6
    f84c:	19f6      	adds	r6, r6, r7
    f84e:	18b2      	adds	r2, r6, r2
    f850:	3b01      	subs	r3, #1
    f852:	9102      	str	r1, [sp, #8]
    f854:	4297      	cmp	r7, r2
    f856:	d213      	bcs.n	f880 <__aeabi_ddiv+0x4f0>
    f858:	4290      	cmp	r0, r2
    f85a:	d84f      	bhi.n	f8fc <__aeabi_ddiv+0x56c>
    f85c:	d100      	bne.n	f860 <__aeabi_ddiv+0x4d0>
    f85e:	e08e      	b.n	f97e <__aeabi_ddiv+0x5ee>
    f860:	1a16      	subs	r6, r2, r0
    f862:	469b      	mov	fp, r3
    f864:	e70d      	b.n	f682 <__aeabi_ddiv+0x2f2>
    f866:	4589      	cmp	r9, r1
    f868:	d200      	bcs.n	f86c <__aeabi_ddiv+0x4dc>
    f86a:	e68e      	b.n	f58a <__aeabi_ddiv+0x1fa>
    f86c:	0874      	lsrs	r4, r6, #1
    f86e:	464b      	mov	r3, r9
    f870:	07f6      	lsls	r6, r6, #31
    f872:	0035      	movs	r5, r6
    f874:	085b      	lsrs	r3, r3, #1
    f876:	431d      	orrs	r5, r3
    f878:	464b      	mov	r3, r9
    f87a:	07db      	lsls	r3, r3, #31
    f87c:	9302      	str	r3, [sp, #8]
    f87e:	e68b      	b.n	f598 <__aeabi_ddiv+0x208>
    f880:	4297      	cmp	r7, r2
    f882:	d1ed      	bne.n	f860 <__aeabi_ddiv+0x4d0>
    f884:	9903      	ldr	r1, [sp, #12]
    f886:	9c02      	ldr	r4, [sp, #8]
    f888:	42a1      	cmp	r1, r4
    f88a:	d9e5      	bls.n	f858 <__aeabi_ddiv+0x4c8>
    f88c:	1a3e      	subs	r6, r7, r0
    f88e:	469b      	mov	fp, r3
    f890:	e6f7      	b.n	f682 <__aeabi_ddiv+0x2f2>
    f892:	4698      	mov	r8, r3
    f894:	e6ca      	b.n	f62c <__aeabi_ddiv+0x29c>
    f896:	001e      	movs	r6, r3
    f898:	e6a5      	b.n	f5e6 <__aeabi_ddiv+0x256>
    f89a:	42ac      	cmp	r4, r5
    f89c:	d83e      	bhi.n	f91c <__aeabi_ddiv+0x58c>
    f89e:	d074      	beq.n	f98a <__aeabi_ddiv+0x5fa>
    f8a0:	0011      	movs	r1, r2
    f8a2:	e753      	b.n	f74c <__aeabi_ddiv+0x3bc>
    f8a4:	2101      	movs	r1, #1
    f8a6:	4249      	negs	r1, r1
    f8a8:	e752      	b.n	f750 <__aeabi_ddiv+0x3c0>
    f8aa:	001c      	movs	r4, r3
    f8ac:	e70e      	b.n	f6cc <__aeabi_ddiv+0x33c>
    f8ae:	001e      	movs	r6, r3
    f8b0:	e72b      	b.n	f70a <__aeabi_ddiv+0x37a>
    f8b2:	2d1f      	cmp	r5, #31
    f8b4:	dc3c      	bgt.n	f930 <__aeabi_ddiv+0x5a0>
    f8b6:	2320      	movs	r3, #32
    f8b8:	000a      	movs	r2, r1
    f8ba:	4658      	mov	r0, fp
    f8bc:	1b5b      	subs	r3, r3, r5
    f8be:	4098      	lsls	r0, r3
    f8c0:	40ea      	lsrs	r2, r5
    f8c2:	4099      	lsls	r1, r3
    f8c4:	4302      	orrs	r2, r0
    f8c6:	1e48      	subs	r0, r1, #1
    f8c8:	4181      	sbcs	r1, r0
    f8ca:	465e      	mov	r6, fp
    f8cc:	4311      	orrs	r1, r2
    f8ce:	40ee      	lsrs	r6, r5
    f8d0:	074b      	lsls	r3, r1, #29
    f8d2:	d009      	beq.n	f8e8 <__aeabi_ddiv+0x558>
    f8d4:	230f      	movs	r3, #15
    f8d6:	400b      	ands	r3, r1
    f8d8:	2b04      	cmp	r3, #4
    f8da:	d005      	beq.n	f8e8 <__aeabi_ddiv+0x558>
    f8dc:	000b      	movs	r3, r1
    f8de:	1d19      	adds	r1, r3, #4
    f8e0:	4299      	cmp	r1, r3
    f8e2:	419b      	sbcs	r3, r3
    f8e4:	425b      	negs	r3, r3
    f8e6:	18f6      	adds	r6, r6, r3
    f8e8:	0233      	lsls	r3, r6, #8
    f8ea:	d53c      	bpl.n	f966 <__aeabi_ddiv+0x5d6>
    f8ec:	4653      	mov	r3, sl
    f8ee:	2201      	movs	r2, #1
    f8f0:	2100      	movs	r1, #0
    f8f2:	401a      	ands	r2, r3
    f8f4:	2600      	movs	r6, #0
    f8f6:	2301      	movs	r3, #1
    f8f8:	4689      	mov	r9, r1
    f8fa:	e5af      	b.n	f45c <__aeabi_ddiv+0xcc>
    f8fc:	2302      	movs	r3, #2
    f8fe:	425b      	negs	r3, r3
    f900:	469c      	mov	ip, r3
    f902:	9c03      	ldr	r4, [sp, #12]
    f904:	44e3      	add	fp, ip
    f906:	46a4      	mov	ip, r4
    f908:	9b02      	ldr	r3, [sp, #8]
    f90a:	4463      	add	r3, ip
    f90c:	4698      	mov	r8, r3
    f90e:	45a0      	cmp	r8, r4
    f910:	41b6      	sbcs	r6, r6
    f912:	4276      	negs	r6, r6
    f914:	19f6      	adds	r6, r6, r7
    f916:	9302      	str	r3, [sp, #8]
    f918:	18b2      	adds	r2, r6, r2
    f91a:	e6b1      	b.n	f680 <__aeabi_ddiv+0x2f0>
    f91c:	9803      	ldr	r0, [sp, #12]
    f91e:	1e8a      	subs	r2, r1, #2
    f920:	0041      	lsls	r1, r0, #1
    f922:	4281      	cmp	r1, r0
    f924:	41b6      	sbcs	r6, r6
    f926:	4276      	negs	r6, r6
    f928:	19f6      	adds	r6, r6, r7
    f92a:	19ad      	adds	r5, r5, r6
    f92c:	9103      	str	r1, [sp, #12]
    f92e:	e761      	b.n	f7f4 <__aeabi_ddiv+0x464>
    f930:	221f      	movs	r2, #31
    f932:	4252      	negs	r2, r2
    f934:	1ad3      	subs	r3, r2, r3
    f936:	465a      	mov	r2, fp
    f938:	40da      	lsrs	r2, r3
    f93a:	0013      	movs	r3, r2
    f93c:	2d20      	cmp	r5, #32
    f93e:	d029      	beq.n	f994 <__aeabi_ddiv+0x604>
    f940:	2240      	movs	r2, #64	; 0x40
    f942:	4658      	mov	r0, fp
    f944:	1b55      	subs	r5, r2, r5
    f946:	40a8      	lsls	r0, r5
    f948:	4301      	orrs	r1, r0
    f94a:	1e48      	subs	r0, r1, #1
    f94c:	4181      	sbcs	r1, r0
    f94e:	2007      	movs	r0, #7
    f950:	430b      	orrs	r3, r1
    f952:	4018      	ands	r0, r3
    f954:	2600      	movs	r6, #0
    f956:	2800      	cmp	r0, #0
    f958:	d009      	beq.n	f96e <__aeabi_ddiv+0x5de>
    f95a:	220f      	movs	r2, #15
    f95c:	2600      	movs	r6, #0
    f95e:	401a      	ands	r2, r3
    f960:	0019      	movs	r1, r3
    f962:	2a04      	cmp	r2, #4
    f964:	d1bb      	bne.n	f8de <__aeabi_ddiv+0x54e>
    f966:	000b      	movs	r3, r1
    f968:	0770      	lsls	r0, r6, #29
    f96a:	0276      	lsls	r6, r6, #9
    f96c:	0b36      	lsrs	r6, r6, #12
    f96e:	08db      	lsrs	r3, r3, #3
    f970:	4303      	orrs	r3, r0
    f972:	4699      	mov	r9, r3
    f974:	2201      	movs	r2, #1
    f976:	4653      	mov	r3, sl
    f978:	401a      	ands	r2, r3
    f97a:	2300      	movs	r3, #0
    f97c:	e56e      	b.n	f45c <__aeabi_ddiv+0xcc>
    f97e:	9902      	ldr	r1, [sp, #8]
    f980:	428d      	cmp	r5, r1
    f982:	d8bb      	bhi.n	f8fc <__aeabi_ddiv+0x56c>
    f984:	469b      	mov	fp, r3
    f986:	2600      	movs	r6, #0
    f988:	e67b      	b.n	f682 <__aeabi_ddiv+0x2f2>
    f98a:	9803      	ldr	r0, [sp, #12]
    f98c:	4298      	cmp	r0, r3
    f98e:	d3c5      	bcc.n	f91c <__aeabi_ddiv+0x58c>
    f990:	0011      	movs	r1, r2
    f992:	e732      	b.n	f7fa <__aeabi_ddiv+0x46a>
    f994:	2000      	movs	r0, #0
    f996:	e7d7      	b.n	f948 <__aeabi_ddiv+0x5b8>
    f998:	2680      	movs	r6, #128	; 0x80
    f99a:	465b      	mov	r3, fp
    f99c:	0336      	lsls	r6, r6, #12
    f99e:	431e      	orrs	r6, r3
    f9a0:	0336      	lsls	r6, r6, #12
    f9a2:	0b36      	lsrs	r6, r6, #12
    f9a4:	9a00      	ldr	r2, [sp, #0]
    f9a6:	4689      	mov	r9, r1
    f9a8:	4b03      	ldr	r3, [pc, #12]	; (f9b8 <__aeabi_ddiv+0x628>)
    f9aa:	e557      	b.n	f45c <__aeabi_ddiv+0xcc>
    f9ac:	000003ff 	.word	0x000003ff
    f9b0:	feffffff 	.word	0xfeffffff
    f9b4:	000007fe 	.word	0x000007fe
    f9b8:	000007ff 	.word	0x000007ff

0000f9bc <__aeabi_dmul>:
    f9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9be:	465f      	mov	r7, fp
    f9c0:	4656      	mov	r6, sl
    f9c2:	464d      	mov	r5, r9
    f9c4:	4644      	mov	r4, r8
    f9c6:	b4f0      	push	{r4, r5, r6, r7}
    f9c8:	030d      	lsls	r5, r1, #12
    f9ca:	4699      	mov	r9, r3
    f9cc:	004e      	lsls	r6, r1, #1
    f9ce:	0b2b      	lsrs	r3, r5, #12
    f9d0:	b087      	sub	sp, #28
    f9d2:	0007      	movs	r7, r0
    f9d4:	4692      	mov	sl, r2
    f9d6:	4680      	mov	r8, r0
    f9d8:	469b      	mov	fp, r3
    f9da:	0d76      	lsrs	r6, r6, #21
    f9dc:	0fcc      	lsrs	r4, r1, #31
    f9de:	2e00      	cmp	r6, #0
    f9e0:	d069      	beq.n	fab6 <__aeabi_dmul+0xfa>
    f9e2:	4b6d      	ldr	r3, [pc, #436]	; (fb98 <__aeabi_dmul+0x1dc>)
    f9e4:	429e      	cmp	r6, r3
    f9e6:	d035      	beq.n	fa54 <__aeabi_dmul+0x98>
    f9e8:	465b      	mov	r3, fp
    f9ea:	2280      	movs	r2, #128	; 0x80
    f9ec:	00dd      	lsls	r5, r3, #3
    f9ee:	0412      	lsls	r2, r2, #16
    f9f0:	0f43      	lsrs	r3, r0, #29
    f9f2:	4313      	orrs	r3, r2
    f9f4:	432b      	orrs	r3, r5
    f9f6:	469b      	mov	fp, r3
    f9f8:	00c3      	lsls	r3, r0, #3
    f9fa:	4698      	mov	r8, r3
    f9fc:	4b67      	ldr	r3, [pc, #412]	; (fb9c <__aeabi_dmul+0x1e0>)
    f9fe:	2700      	movs	r7, #0
    fa00:	469c      	mov	ip, r3
    fa02:	2300      	movs	r3, #0
    fa04:	4466      	add	r6, ip
    fa06:	9301      	str	r3, [sp, #4]
    fa08:	464a      	mov	r2, r9
    fa0a:	0315      	lsls	r5, r2, #12
    fa0c:	0050      	lsls	r0, r2, #1
    fa0e:	0fd2      	lsrs	r2, r2, #31
    fa10:	4653      	mov	r3, sl
    fa12:	0b2d      	lsrs	r5, r5, #12
    fa14:	0d40      	lsrs	r0, r0, #21
    fa16:	4691      	mov	r9, r2
    fa18:	d100      	bne.n	fa1c <__aeabi_dmul+0x60>
    fa1a:	e076      	b.n	fb0a <__aeabi_dmul+0x14e>
    fa1c:	4a5e      	ldr	r2, [pc, #376]	; (fb98 <__aeabi_dmul+0x1dc>)
    fa1e:	4290      	cmp	r0, r2
    fa20:	d06c      	beq.n	fafc <__aeabi_dmul+0x140>
    fa22:	2280      	movs	r2, #128	; 0x80
    fa24:	0f5b      	lsrs	r3, r3, #29
    fa26:	0412      	lsls	r2, r2, #16
    fa28:	4313      	orrs	r3, r2
    fa2a:	4a5c      	ldr	r2, [pc, #368]	; (fb9c <__aeabi_dmul+0x1e0>)
    fa2c:	00ed      	lsls	r5, r5, #3
    fa2e:	4694      	mov	ip, r2
    fa30:	431d      	orrs	r5, r3
    fa32:	4653      	mov	r3, sl
    fa34:	2200      	movs	r2, #0
    fa36:	00db      	lsls	r3, r3, #3
    fa38:	4460      	add	r0, ip
    fa3a:	4649      	mov	r1, r9
    fa3c:	1836      	adds	r6, r6, r0
    fa3e:	1c70      	adds	r0, r6, #1
    fa40:	4061      	eors	r1, r4
    fa42:	9002      	str	r0, [sp, #8]
    fa44:	4317      	orrs	r7, r2
    fa46:	2f0f      	cmp	r7, #15
    fa48:	d900      	bls.n	fa4c <__aeabi_dmul+0x90>
    fa4a:	e0af      	b.n	fbac <__aeabi_dmul+0x1f0>
    fa4c:	4854      	ldr	r0, [pc, #336]	; (fba0 <__aeabi_dmul+0x1e4>)
    fa4e:	00bf      	lsls	r7, r7, #2
    fa50:	59c7      	ldr	r7, [r0, r7]
    fa52:	46bf      	mov	pc, r7
    fa54:	465b      	mov	r3, fp
    fa56:	431f      	orrs	r7, r3
    fa58:	d000      	beq.n	fa5c <__aeabi_dmul+0xa0>
    fa5a:	e088      	b.n	fb6e <__aeabi_dmul+0x1b2>
    fa5c:	2300      	movs	r3, #0
    fa5e:	469b      	mov	fp, r3
    fa60:	4698      	mov	r8, r3
    fa62:	3302      	adds	r3, #2
    fa64:	2708      	movs	r7, #8
    fa66:	9301      	str	r3, [sp, #4]
    fa68:	e7ce      	b.n	fa08 <__aeabi_dmul+0x4c>
    fa6a:	4649      	mov	r1, r9
    fa6c:	2a02      	cmp	r2, #2
    fa6e:	d06a      	beq.n	fb46 <__aeabi_dmul+0x18a>
    fa70:	2a03      	cmp	r2, #3
    fa72:	d100      	bne.n	fa76 <__aeabi_dmul+0xba>
    fa74:	e209      	b.n	fe8a <__aeabi_dmul+0x4ce>
    fa76:	2a01      	cmp	r2, #1
    fa78:	d000      	beq.n	fa7c <__aeabi_dmul+0xc0>
    fa7a:	e1bb      	b.n	fdf4 <__aeabi_dmul+0x438>
    fa7c:	4011      	ands	r1, r2
    fa7e:	2200      	movs	r2, #0
    fa80:	2300      	movs	r3, #0
    fa82:	2500      	movs	r5, #0
    fa84:	4690      	mov	r8, r2
    fa86:	b2cc      	uxtb	r4, r1
    fa88:	2100      	movs	r1, #0
    fa8a:	032d      	lsls	r5, r5, #12
    fa8c:	0d0a      	lsrs	r2, r1, #20
    fa8e:	0512      	lsls	r2, r2, #20
    fa90:	0b2d      	lsrs	r5, r5, #12
    fa92:	4315      	orrs	r5, r2
    fa94:	4a43      	ldr	r2, [pc, #268]	; (fba4 <__aeabi_dmul+0x1e8>)
    fa96:	051b      	lsls	r3, r3, #20
    fa98:	4015      	ands	r5, r2
    fa9a:	431d      	orrs	r5, r3
    fa9c:	006d      	lsls	r5, r5, #1
    fa9e:	07e4      	lsls	r4, r4, #31
    faa0:	086d      	lsrs	r5, r5, #1
    faa2:	4325      	orrs	r5, r4
    faa4:	4640      	mov	r0, r8
    faa6:	0029      	movs	r1, r5
    faa8:	b007      	add	sp, #28
    faaa:	bc3c      	pop	{r2, r3, r4, r5}
    faac:	4690      	mov	r8, r2
    faae:	4699      	mov	r9, r3
    fab0:	46a2      	mov	sl, r4
    fab2:	46ab      	mov	fp, r5
    fab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fab6:	4303      	orrs	r3, r0
    fab8:	d052      	beq.n	fb60 <__aeabi_dmul+0x1a4>
    faba:	465b      	mov	r3, fp
    fabc:	2b00      	cmp	r3, #0
    fabe:	d100      	bne.n	fac2 <__aeabi_dmul+0x106>
    fac0:	e18a      	b.n	fdd8 <__aeabi_dmul+0x41c>
    fac2:	4658      	mov	r0, fp
    fac4:	f000 fdf8 	bl	106b8 <__clzsi2>
    fac8:	0003      	movs	r3, r0
    faca:	3b0b      	subs	r3, #11
    facc:	2b1c      	cmp	r3, #28
    face:	dd00      	ble.n	fad2 <__aeabi_dmul+0x116>
    fad0:	e17b      	b.n	fdca <__aeabi_dmul+0x40e>
    fad2:	221d      	movs	r2, #29
    fad4:	1ad3      	subs	r3, r2, r3
    fad6:	003a      	movs	r2, r7
    fad8:	0001      	movs	r1, r0
    fada:	465d      	mov	r5, fp
    fadc:	40da      	lsrs	r2, r3
    fade:	3908      	subs	r1, #8
    fae0:	408d      	lsls	r5, r1
    fae2:	0013      	movs	r3, r2
    fae4:	408f      	lsls	r7, r1
    fae6:	432b      	orrs	r3, r5
    fae8:	469b      	mov	fp, r3
    faea:	46b8      	mov	r8, r7
    faec:	4b2e      	ldr	r3, [pc, #184]	; (fba8 <__aeabi_dmul+0x1ec>)
    faee:	2700      	movs	r7, #0
    faf0:	469c      	mov	ip, r3
    faf2:	2300      	movs	r3, #0
    faf4:	4460      	add	r0, ip
    faf6:	4246      	negs	r6, r0
    faf8:	9301      	str	r3, [sp, #4]
    fafa:	e785      	b.n	fa08 <__aeabi_dmul+0x4c>
    fafc:	4652      	mov	r2, sl
    fafe:	432a      	orrs	r2, r5
    fb00:	d12c      	bne.n	fb5c <__aeabi_dmul+0x1a0>
    fb02:	2500      	movs	r5, #0
    fb04:	2300      	movs	r3, #0
    fb06:	2202      	movs	r2, #2
    fb08:	e797      	b.n	fa3a <__aeabi_dmul+0x7e>
    fb0a:	4652      	mov	r2, sl
    fb0c:	432a      	orrs	r2, r5
    fb0e:	d021      	beq.n	fb54 <__aeabi_dmul+0x198>
    fb10:	2d00      	cmp	r5, #0
    fb12:	d100      	bne.n	fb16 <__aeabi_dmul+0x15a>
    fb14:	e154      	b.n	fdc0 <__aeabi_dmul+0x404>
    fb16:	0028      	movs	r0, r5
    fb18:	f000 fdce 	bl	106b8 <__clzsi2>
    fb1c:	0003      	movs	r3, r0
    fb1e:	3b0b      	subs	r3, #11
    fb20:	2b1c      	cmp	r3, #28
    fb22:	dd00      	ble.n	fb26 <__aeabi_dmul+0x16a>
    fb24:	e146      	b.n	fdb4 <__aeabi_dmul+0x3f8>
    fb26:	211d      	movs	r1, #29
    fb28:	1acb      	subs	r3, r1, r3
    fb2a:	4651      	mov	r1, sl
    fb2c:	0002      	movs	r2, r0
    fb2e:	40d9      	lsrs	r1, r3
    fb30:	4653      	mov	r3, sl
    fb32:	3a08      	subs	r2, #8
    fb34:	4095      	lsls	r5, r2
    fb36:	4093      	lsls	r3, r2
    fb38:	430d      	orrs	r5, r1
    fb3a:	4a1b      	ldr	r2, [pc, #108]	; (fba8 <__aeabi_dmul+0x1ec>)
    fb3c:	4694      	mov	ip, r2
    fb3e:	4460      	add	r0, ip
    fb40:	4240      	negs	r0, r0
    fb42:	2200      	movs	r2, #0
    fb44:	e779      	b.n	fa3a <__aeabi_dmul+0x7e>
    fb46:	2401      	movs	r4, #1
    fb48:	2200      	movs	r2, #0
    fb4a:	400c      	ands	r4, r1
    fb4c:	4b12      	ldr	r3, [pc, #72]	; (fb98 <__aeabi_dmul+0x1dc>)
    fb4e:	2500      	movs	r5, #0
    fb50:	4690      	mov	r8, r2
    fb52:	e799      	b.n	fa88 <__aeabi_dmul+0xcc>
    fb54:	2500      	movs	r5, #0
    fb56:	2300      	movs	r3, #0
    fb58:	2201      	movs	r2, #1
    fb5a:	e76e      	b.n	fa3a <__aeabi_dmul+0x7e>
    fb5c:	2203      	movs	r2, #3
    fb5e:	e76c      	b.n	fa3a <__aeabi_dmul+0x7e>
    fb60:	2300      	movs	r3, #0
    fb62:	469b      	mov	fp, r3
    fb64:	4698      	mov	r8, r3
    fb66:	3301      	adds	r3, #1
    fb68:	2704      	movs	r7, #4
    fb6a:	9301      	str	r3, [sp, #4]
    fb6c:	e74c      	b.n	fa08 <__aeabi_dmul+0x4c>
    fb6e:	2303      	movs	r3, #3
    fb70:	270c      	movs	r7, #12
    fb72:	9301      	str	r3, [sp, #4]
    fb74:	e748      	b.n	fa08 <__aeabi_dmul+0x4c>
    fb76:	2300      	movs	r3, #0
    fb78:	2580      	movs	r5, #128	; 0x80
    fb7a:	4698      	mov	r8, r3
    fb7c:	2400      	movs	r4, #0
    fb7e:	032d      	lsls	r5, r5, #12
    fb80:	4b05      	ldr	r3, [pc, #20]	; (fb98 <__aeabi_dmul+0x1dc>)
    fb82:	e781      	b.n	fa88 <__aeabi_dmul+0xcc>
    fb84:	465d      	mov	r5, fp
    fb86:	4643      	mov	r3, r8
    fb88:	9a01      	ldr	r2, [sp, #4]
    fb8a:	e76f      	b.n	fa6c <__aeabi_dmul+0xb0>
    fb8c:	465d      	mov	r5, fp
    fb8e:	4643      	mov	r3, r8
    fb90:	0021      	movs	r1, r4
    fb92:	9a01      	ldr	r2, [sp, #4]
    fb94:	e76a      	b.n	fa6c <__aeabi_dmul+0xb0>
    fb96:	46c0      	nop			; (mov r8, r8)
    fb98:	000007ff 	.word	0x000007ff
    fb9c:	fffffc01 	.word	0xfffffc01
    fba0:	00013764 	.word	0x00013764
    fba4:	800fffff 	.word	0x800fffff
    fba8:	000003f3 	.word	0x000003f3
    fbac:	4642      	mov	r2, r8
    fbae:	0c12      	lsrs	r2, r2, #16
    fbb0:	4691      	mov	r9, r2
    fbb2:	0c1a      	lsrs	r2, r3, #16
    fbb4:	4694      	mov	ip, r2
    fbb6:	4642      	mov	r2, r8
    fbb8:	0417      	lsls	r7, r2, #16
    fbba:	464a      	mov	r2, r9
    fbbc:	041b      	lsls	r3, r3, #16
    fbbe:	0c1b      	lsrs	r3, r3, #16
    fbc0:	435a      	muls	r2, r3
    fbc2:	4660      	mov	r0, ip
    fbc4:	4690      	mov	r8, r2
    fbc6:	464a      	mov	r2, r9
    fbc8:	4342      	muls	r2, r0
    fbca:	0010      	movs	r0, r2
    fbcc:	9203      	str	r2, [sp, #12]
    fbce:	4662      	mov	r2, ip
    fbd0:	001c      	movs	r4, r3
    fbd2:	0c3f      	lsrs	r7, r7, #16
    fbd4:	437a      	muls	r2, r7
    fbd6:	437c      	muls	r4, r7
    fbd8:	4442      	add	r2, r8
    fbda:	9201      	str	r2, [sp, #4]
    fbdc:	0c22      	lsrs	r2, r4, #16
    fbde:	4692      	mov	sl, r2
    fbe0:	9a01      	ldr	r2, [sp, #4]
    fbe2:	4452      	add	r2, sl
    fbe4:	4590      	cmp	r8, r2
    fbe6:	d906      	bls.n	fbf6 <__aeabi_dmul+0x23a>
    fbe8:	4682      	mov	sl, r0
    fbea:	2080      	movs	r0, #128	; 0x80
    fbec:	0240      	lsls	r0, r0, #9
    fbee:	4680      	mov	r8, r0
    fbf0:	44c2      	add	sl, r8
    fbf2:	4650      	mov	r0, sl
    fbf4:	9003      	str	r0, [sp, #12]
    fbf6:	0c10      	lsrs	r0, r2, #16
    fbf8:	9004      	str	r0, [sp, #16]
    fbfa:	4648      	mov	r0, r9
    fbfc:	0424      	lsls	r4, r4, #16
    fbfe:	0c24      	lsrs	r4, r4, #16
    fc00:	0412      	lsls	r2, r2, #16
    fc02:	1912      	adds	r2, r2, r4
    fc04:	9205      	str	r2, [sp, #20]
    fc06:	0c2a      	lsrs	r2, r5, #16
    fc08:	042d      	lsls	r5, r5, #16
    fc0a:	0c2d      	lsrs	r5, r5, #16
    fc0c:	4368      	muls	r0, r5
    fc0e:	002c      	movs	r4, r5
    fc10:	4682      	mov	sl, r0
    fc12:	4648      	mov	r0, r9
    fc14:	437c      	muls	r4, r7
    fc16:	4350      	muls	r0, r2
    fc18:	4681      	mov	r9, r0
    fc1a:	0c20      	lsrs	r0, r4, #16
    fc1c:	4680      	mov	r8, r0
    fc1e:	4357      	muls	r7, r2
    fc20:	4457      	add	r7, sl
    fc22:	4447      	add	r7, r8
    fc24:	45ba      	cmp	sl, r7
    fc26:	d903      	bls.n	fc30 <__aeabi_dmul+0x274>
    fc28:	2080      	movs	r0, #128	; 0x80
    fc2a:	0240      	lsls	r0, r0, #9
    fc2c:	4680      	mov	r8, r0
    fc2e:	44c1      	add	r9, r8
    fc30:	0c38      	lsrs	r0, r7, #16
    fc32:	043f      	lsls	r7, r7, #16
    fc34:	46b8      	mov	r8, r7
    fc36:	4448      	add	r0, r9
    fc38:	0424      	lsls	r4, r4, #16
    fc3a:	0c24      	lsrs	r4, r4, #16
    fc3c:	9001      	str	r0, [sp, #4]
    fc3e:	9804      	ldr	r0, [sp, #16]
    fc40:	44a0      	add	r8, r4
    fc42:	4440      	add	r0, r8
    fc44:	9004      	str	r0, [sp, #16]
    fc46:	4658      	mov	r0, fp
    fc48:	0c00      	lsrs	r0, r0, #16
    fc4a:	4681      	mov	r9, r0
    fc4c:	4658      	mov	r0, fp
    fc4e:	0404      	lsls	r4, r0, #16
    fc50:	0c20      	lsrs	r0, r4, #16
    fc52:	4682      	mov	sl, r0
    fc54:	0007      	movs	r7, r0
    fc56:	4648      	mov	r0, r9
    fc58:	435f      	muls	r7, r3
    fc5a:	464c      	mov	r4, r9
    fc5c:	4343      	muls	r3, r0
    fc5e:	4660      	mov	r0, ip
    fc60:	4360      	muls	r0, r4
    fc62:	4664      	mov	r4, ip
    fc64:	4683      	mov	fp, r0
    fc66:	4650      	mov	r0, sl
    fc68:	4344      	muls	r4, r0
    fc6a:	0c38      	lsrs	r0, r7, #16
    fc6c:	4684      	mov	ip, r0
    fc6e:	18e4      	adds	r4, r4, r3
    fc70:	4464      	add	r4, ip
    fc72:	42a3      	cmp	r3, r4
    fc74:	d903      	bls.n	fc7e <__aeabi_dmul+0x2c2>
    fc76:	2380      	movs	r3, #128	; 0x80
    fc78:	025b      	lsls	r3, r3, #9
    fc7a:	469c      	mov	ip, r3
    fc7c:	44e3      	add	fp, ip
    fc7e:	4648      	mov	r0, r9
    fc80:	043f      	lsls	r7, r7, #16
    fc82:	0c23      	lsrs	r3, r4, #16
    fc84:	0c3f      	lsrs	r7, r7, #16
    fc86:	0424      	lsls	r4, r4, #16
    fc88:	19e4      	adds	r4, r4, r7
    fc8a:	4657      	mov	r7, sl
    fc8c:	4368      	muls	r0, r5
    fc8e:	436f      	muls	r7, r5
    fc90:	4684      	mov	ip, r0
    fc92:	464d      	mov	r5, r9
    fc94:	4650      	mov	r0, sl
    fc96:	4355      	muls	r5, r2
    fc98:	4342      	muls	r2, r0
    fc9a:	0c38      	lsrs	r0, r7, #16
    fc9c:	4681      	mov	r9, r0
    fc9e:	4462      	add	r2, ip
    fca0:	444a      	add	r2, r9
    fca2:	445b      	add	r3, fp
    fca4:	4594      	cmp	ip, r2
    fca6:	d903      	bls.n	fcb0 <__aeabi_dmul+0x2f4>
    fca8:	2080      	movs	r0, #128	; 0x80
    fcaa:	0240      	lsls	r0, r0, #9
    fcac:	4684      	mov	ip, r0
    fcae:	4465      	add	r5, ip
    fcb0:	9803      	ldr	r0, [sp, #12]
    fcb2:	043f      	lsls	r7, r7, #16
    fcb4:	4683      	mov	fp, r0
    fcb6:	9804      	ldr	r0, [sp, #16]
    fcb8:	0c3f      	lsrs	r7, r7, #16
    fcba:	4684      	mov	ip, r0
    fcbc:	44e3      	add	fp, ip
    fcbe:	45c3      	cmp	fp, r8
    fcc0:	4180      	sbcs	r0, r0
    fcc2:	4240      	negs	r0, r0
    fcc4:	4682      	mov	sl, r0
    fcc6:	0410      	lsls	r0, r2, #16
    fcc8:	4684      	mov	ip, r0
    fcca:	9801      	ldr	r0, [sp, #4]
    fccc:	4467      	add	r7, ip
    fcce:	4684      	mov	ip, r0
    fcd0:	4467      	add	r7, ip
    fcd2:	44a3      	add	fp, r4
    fcd4:	46bc      	mov	ip, r7
    fcd6:	45a3      	cmp	fp, r4
    fcd8:	41a4      	sbcs	r4, r4
    fcda:	4699      	mov	r9, r3
    fcdc:	44d4      	add	ip, sl
    fcde:	4264      	negs	r4, r4
    fce0:	4287      	cmp	r7, r0
    fce2:	41bf      	sbcs	r7, r7
    fce4:	45d4      	cmp	ip, sl
    fce6:	4180      	sbcs	r0, r0
    fce8:	44e1      	add	r9, ip
    fcea:	46a0      	mov	r8, r4
    fcec:	4599      	cmp	r9, r3
    fcee:	419b      	sbcs	r3, r3
    fcf0:	427f      	negs	r7, r7
    fcf2:	4240      	negs	r0, r0
    fcf4:	44c8      	add	r8, r9
    fcf6:	4307      	orrs	r7, r0
    fcf8:	0c12      	lsrs	r2, r2, #16
    fcfa:	18ba      	adds	r2, r7, r2
    fcfc:	45a0      	cmp	r8, r4
    fcfe:	41a4      	sbcs	r4, r4
    fd00:	425f      	negs	r7, r3
    fd02:	003b      	movs	r3, r7
    fd04:	4264      	negs	r4, r4
    fd06:	4323      	orrs	r3, r4
    fd08:	18d7      	adds	r7, r2, r3
    fd0a:	4643      	mov	r3, r8
    fd0c:	197d      	adds	r5, r7, r5
    fd0e:	0ddb      	lsrs	r3, r3, #23
    fd10:	026d      	lsls	r5, r5, #9
    fd12:	431d      	orrs	r5, r3
    fd14:	465b      	mov	r3, fp
    fd16:	025a      	lsls	r2, r3, #9
    fd18:	9b05      	ldr	r3, [sp, #20]
    fd1a:	431a      	orrs	r2, r3
    fd1c:	1e53      	subs	r3, r2, #1
    fd1e:	419a      	sbcs	r2, r3
    fd20:	465b      	mov	r3, fp
    fd22:	0ddb      	lsrs	r3, r3, #23
    fd24:	431a      	orrs	r2, r3
    fd26:	4643      	mov	r3, r8
    fd28:	025b      	lsls	r3, r3, #9
    fd2a:	4313      	orrs	r3, r2
    fd2c:	01ea      	lsls	r2, r5, #7
    fd2e:	d507      	bpl.n	fd40 <__aeabi_dmul+0x384>
    fd30:	2201      	movs	r2, #1
    fd32:	085c      	lsrs	r4, r3, #1
    fd34:	4013      	ands	r3, r2
    fd36:	4323      	orrs	r3, r4
    fd38:	07ea      	lsls	r2, r5, #31
    fd3a:	9e02      	ldr	r6, [sp, #8]
    fd3c:	4313      	orrs	r3, r2
    fd3e:	086d      	lsrs	r5, r5, #1
    fd40:	4a57      	ldr	r2, [pc, #348]	; (fea0 <__aeabi_dmul+0x4e4>)
    fd42:	18b2      	adds	r2, r6, r2
    fd44:	2a00      	cmp	r2, #0
    fd46:	dd4b      	ble.n	fde0 <__aeabi_dmul+0x424>
    fd48:	0758      	lsls	r0, r3, #29
    fd4a:	d009      	beq.n	fd60 <__aeabi_dmul+0x3a4>
    fd4c:	200f      	movs	r0, #15
    fd4e:	4018      	ands	r0, r3
    fd50:	2804      	cmp	r0, #4
    fd52:	d005      	beq.n	fd60 <__aeabi_dmul+0x3a4>
    fd54:	1d18      	adds	r0, r3, #4
    fd56:	4298      	cmp	r0, r3
    fd58:	419b      	sbcs	r3, r3
    fd5a:	425b      	negs	r3, r3
    fd5c:	18ed      	adds	r5, r5, r3
    fd5e:	0003      	movs	r3, r0
    fd60:	01e8      	lsls	r0, r5, #7
    fd62:	d504      	bpl.n	fd6e <__aeabi_dmul+0x3b2>
    fd64:	4a4f      	ldr	r2, [pc, #316]	; (fea4 <__aeabi_dmul+0x4e8>)
    fd66:	4015      	ands	r5, r2
    fd68:	2280      	movs	r2, #128	; 0x80
    fd6a:	00d2      	lsls	r2, r2, #3
    fd6c:	18b2      	adds	r2, r6, r2
    fd6e:	484e      	ldr	r0, [pc, #312]	; (fea8 <__aeabi_dmul+0x4ec>)
    fd70:	4282      	cmp	r2, r0
    fd72:	dd00      	ble.n	fd76 <__aeabi_dmul+0x3ba>
    fd74:	e6e7      	b.n	fb46 <__aeabi_dmul+0x18a>
    fd76:	2401      	movs	r4, #1
    fd78:	08db      	lsrs	r3, r3, #3
    fd7a:	0768      	lsls	r0, r5, #29
    fd7c:	4318      	orrs	r0, r3
    fd7e:	026d      	lsls	r5, r5, #9
    fd80:	0553      	lsls	r3, r2, #21
    fd82:	4680      	mov	r8, r0
    fd84:	0b2d      	lsrs	r5, r5, #12
    fd86:	0d5b      	lsrs	r3, r3, #21
    fd88:	400c      	ands	r4, r1
    fd8a:	e67d      	b.n	fa88 <__aeabi_dmul+0xcc>
    fd8c:	2280      	movs	r2, #128	; 0x80
    fd8e:	4659      	mov	r1, fp
    fd90:	0312      	lsls	r2, r2, #12
    fd92:	4211      	tst	r1, r2
    fd94:	d008      	beq.n	fda8 <__aeabi_dmul+0x3ec>
    fd96:	4215      	tst	r5, r2
    fd98:	d106      	bne.n	fda8 <__aeabi_dmul+0x3ec>
    fd9a:	4315      	orrs	r5, r2
    fd9c:	032d      	lsls	r5, r5, #12
    fd9e:	4698      	mov	r8, r3
    fda0:	0b2d      	lsrs	r5, r5, #12
    fda2:	464c      	mov	r4, r9
    fda4:	4b41      	ldr	r3, [pc, #260]	; (feac <__aeabi_dmul+0x4f0>)
    fda6:	e66f      	b.n	fa88 <__aeabi_dmul+0xcc>
    fda8:	465d      	mov	r5, fp
    fdaa:	4315      	orrs	r5, r2
    fdac:	032d      	lsls	r5, r5, #12
    fdae:	0b2d      	lsrs	r5, r5, #12
    fdb0:	4b3e      	ldr	r3, [pc, #248]	; (feac <__aeabi_dmul+0x4f0>)
    fdb2:	e669      	b.n	fa88 <__aeabi_dmul+0xcc>
    fdb4:	0003      	movs	r3, r0
    fdb6:	4655      	mov	r5, sl
    fdb8:	3b28      	subs	r3, #40	; 0x28
    fdba:	409d      	lsls	r5, r3
    fdbc:	2300      	movs	r3, #0
    fdbe:	e6bc      	b.n	fb3a <__aeabi_dmul+0x17e>
    fdc0:	4650      	mov	r0, sl
    fdc2:	f000 fc79 	bl	106b8 <__clzsi2>
    fdc6:	3020      	adds	r0, #32
    fdc8:	e6a8      	b.n	fb1c <__aeabi_dmul+0x160>
    fdca:	0003      	movs	r3, r0
    fdcc:	3b28      	subs	r3, #40	; 0x28
    fdce:	409f      	lsls	r7, r3
    fdd0:	2300      	movs	r3, #0
    fdd2:	46bb      	mov	fp, r7
    fdd4:	4698      	mov	r8, r3
    fdd6:	e689      	b.n	faec <__aeabi_dmul+0x130>
    fdd8:	f000 fc6e 	bl	106b8 <__clzsi2>
    fddc:	3020      	adds	r0, #32
    fdde:	e673      	b.n	fac8 <__aeabi_dmul+0x10c>
    fde0:	2401      	movs	r4, #1
    fde2:	1aa6      	subs	r6, r4, r2
    fde4:	2e38      	cmp	r6, #56	; 0x38
    fde6:	dd07      	ble.n	fdf8 <__aeabi_dmul+0x43c>
    fde8:	2200      	movs	r2, #0
    fdea:	400c      	ands	r4, r1
    fdec:	2300      	movs	r3, #0
    fdee:	2500      	movs	r5, #0
    fdf0:	4690      	mov	r8, r2
    fdf2:	e649      	b.n	fa88 <__aeabi_dmul+0xcc>
    fdf4:	9e02      	ldr	r6, [sp, #8]
    fdf6:	e7a3      	b.n	fd40 <__aeabi_dmul+0x384>
    fdf8:	2e1f      	cmp	r6, #31
    fdfa:	dc20      	bgt.n	fe3e <__aeabi_dmul+0x482>
    fdfc:	2220      	movs	r2, #32
    fdfe:	002c      	movs	r4, r5
    fe00:	0018      	movs	r0, r3
    fe02:	1b92      	subs	r2, r2, r6
    fe04:	40f0      	lsrs	r0, r6
    fe06:	4094      	lsls	r4, r2
    fe08:	4093      	lsls	r3, r2
    fe0a:	4304      	orrs	r4, r0
    fe0c:	1e58      	subs	r0, r3, #1
    fe0e:	4183      	sbcs	r3, r0
    fe10:	431c      	orrs	r4, r3
    fe12:	40f5      	lsrs	r5, r6
    fe14:	0763      	lsls	r3, r4, #29
    fe16:	d009      	beq.n	fe2c <__aeabi_dmul+0x470>
    fe18:	230f      	movs	r3, #15
    fe1a:	4023      	ands	r3, r4
    fe1c:	2b04      	cmp	r3, #4
    fe1e:	d005      	beq.n	fe2c <__aeabi_dmul+0x470>
    fe20:	0023      	movs	r3, r4
    fe22:	1d1c      	adds	r4, r3, #4
    fe24:	429c      	cmp	r4, r3
    fe26:	4192      	sbcs	r2, r2
    fe28:	4252      	negs	r2, r2
    fe2a:	18ad      	adds	r5, r5, r2
    fe2c:	022b      	lsls	r3, r5, #8
    fe2e:	d51f      	bpl.n	fe70 <__aeabi_dmul+0x4b4>
    fe30:	2401      	movs	r4, #1
    fe32:	2200      	movs	r2, #0
    fe34:	400c      	ands	r4, r1
    fe36:	2301      	movs	r3, #1
    fe38:	2500      	movs	r5, #0
    fe3a:	4690      	mov	r8, r2
    fe3c:	e624      	b.n	fa88 <__aeabi_dmul+0xcc>
    fe3e:	201f      	movs	r0, #31
    fe40:	002c      	movs	r4, r5
    fe42:	4240      	negs	r0, r0
    fe44:	1a82      	subs	r2, r0, r2
    fe46:	40d4      	lsrs	r4, r2
    fe48:	2e20      	cmp	r6, #32
    fe4a:	d01c      	beq.n	fe86 <__aeabi_dmul+0x4ca>
    fe4c:	2240      	movs	r2, #64	; 0x40
    fe4e:	1b96      	subs	r6, r2, r6
    fe50:	40b5      	lsls	r5, r6
    fe52:	432b      	orrs	r3, r5
    fe54:	1e58      	subs	r0, r3, #1
    fe56:	4183      	sbcs	r3, r0
    fe58:	2007      	movs	r0, #7
    fe5a:	4323      	orrs	r3, r4
    fe5c:	4018      	ands	r0, r3
    fe5e:	2500      	movs	r5, #0
    fe60:	2800      	cmp	r0, #0
    fe62:	d009      	beq.n	fe78 <__aeabi_dmul+0x4bc>
    fe64:	220f      	movs	r2, #15
    fe66:	2500      	movs	r5, #0
    fe68:	401a      	ands	r2, r3
    fe6a:	001c      	movs	r4, r3
    fe6c:	2a04      	cmp	r2, #4
    fe6e:	d1d8      	bne.n	fe22 <__aeabi_dmul+0x466>
    fe70:	0023      	movs	r3, r4
    fe72:	0768      	lsls	r0, r5, #29
    fe74:	026d      	lsls	r5, r5, #9
    fe76:	0b2d      	lsrs	r5, r5, #12
    fe78:	2401      	movs	r4, #1
    fe7a:	08db      	lsrs	r3, r3, #3
    fe7c:	4303      	orrs	r3, r0
    fe7e:	4698      	mov	r8, r3
    fe80:	400c      	ands	r4, r1
    fe82:	2300      	movs	r3, #0
    fe84:	e600      	b.n	fa88 <__aeabi_dmul+0xcc>
    fe86:	2500      	movs	r5, #0
    fe88:	e7e3      	b.n	fe52 <__aeabi_dmul+0x496>
    fe8a:	2280      	movs	r2, #128	; 0x80
    fe8c:	2401      	movs	r4, #1
    fe8e:	0312      	lsls	r2, r2, #12
    fe90:	4315      	orrs	r5, r2
    fe92:	032d      	lsls	r5, r5, #12
    fe94:	4698      	mov	r8, r3
    fe96:	0b2d      	lsrs	r5, r5, #12
    fe98:	400c      	ands	r4, r1
    fe9a:	4b04      	ldr	r3, [pc, #16]	; (feac <__aeabi_dmul+0x4f0>)
    fe9c:	e5f4      	b.n	fa88 <__aeabi_dmul+0xcc>
    fe9e:	46c0      	nop			; (mov r8, r8)
    fea0:	000003ff 	.word	0x000003ff
    fea4:	feffffff 	.word	0xfeffffff
    fea8:	000007fe 	.word	0x000007fe
    feac:	000007ff 	.word	0x000007ff

0000feb0 <__aeabi_dsub>:
    feb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    feb2:	4657      	mov	r7, sl
    feb4:	464e      	mov	r6, r9
    feb6:	4645      	mov	r5, r8
    feb8:	b4e0      	push	{r5, r6, r7}
    feba:	000e      	movs	r6, r1
    febc:	0011      	movs	r1, r2
    febe:	0ff2      	lsrs	r2, r6, #31
    fec0:	4692      	mov	sl, r2
    fec2:	00c5      	lsls	r5, r0, #3
    fec4:	0f42      	lsrs	r2, r0, #29
    fec6:	0318      	lsls	r0, r3, #12
    fec8:	0337      	lsls	r7, r6, #12
    feca:	0074      	lsls	r4, r6, #1
    fecc:	0a40      	lsrs	r0, r0, #9
    fece:	0f4e      	lsrs	r6, r1, #29
    fed0:	0a7f      	lsrs	r7, r7, #9
    fed2:	4330      	orrs	r0, r6
    fed4:	4ecf      	ldr	r6, [pc, #828]	; (10214 <__aeabi_dsub+0x364>)
    fed6:	4317      	orrs	r7, r2
    fed8:	005a      	lsls	r2, r3, #1
    feda:	0d64      	lsrs	r4, r4, #21
    fedc:	0d52      	lsrs	r2, r2, #21
    fede:	0fdb      	lsrs	r3, r3, #31
    fee0:	00c9      	lsls	r1, r1, #3
    fee2:	42b2      	cmp	r2, r6
    fee4:	d100      	bne.n	fee8 <__aeabi_dsub+0x38>
    fee6:	e0e5      	b.n	100b4 <__aeabi_dsub+0x204>
    fee8:	2601      	movs	r6, #1
    feea:	4073      	eors	r3, r6
    feec:	1aa6      	subs	r6, r4, r2
    feee:	46b4      	mov	ip, r6
    fef0:	4553      	cmp	r3, sl
    fef2:	d100      	bne.n	fef6 <__aeabi_dsub+0x46>
    fef4:	e0af      	b.n	10056 <__aeabi_dsub+0x1a6>
    fef6:	2e00      	cmp	r6, #0
    fef8:	dc00      	bgt.n	fefc <__aeabi_dsub+0x4c>
    fefa:	e10d      	b.n	10118 <__aeabi_dsub+0x268>
    fefc:	2a00      	cmp	r2, #0
    fefe:	d13a      	bne.n	ff76 <__aeabi_dsub+0xc6>
    ff00:	0003      	movs	r3, r0
    ff02:	430b      	orrs	r3, r1
    ff04:	d000      	beq.n	ff08 <__aeabi_dsub+0x58>
    ff06:	e0e4      	b.n	100d2 <__aeabi_dsub+0x222>
    ff08:	076b      	lsls	r3, r5, #29
    ff0a:	d009      	beq.n	ff20 <__aeabi_dsub+0x70>
    ff0c:	230f      	movs	r3, #15
    ff0e:	402b      	ands	r3, r5
    ff10:	2b04      	cmp	r3, #4
    ff12:	d005      	beq.n	ff20 <__aeabi_dsub+0x70>
    ff14:	1d2b      	adds	r3, r5, #4
    ff16:	42ab      	cmp	r3, r5
    ff18:	41ad      	sbcs	r5, r5
    ff1a:	426d      	negs	r5, r5
    ff1c:	197f      	adds	r7, r7, r5
    ff1e:	001d      	movs	r5, r3
    ff20:	023b      	lsls	r3, r7, #8
    ff22:	d400      	bmi.n	ff26 <__aeabi_dsub+0x76>
    ff24:	e088      	b.n	10038 <__aeabi_dsub+0x188>
    ff26:	4bbb      	ldr	r3, [pc, #748]	; (10214 <__aeabi_dsub+0x364>)
    ff28:	3401      	adds	r4, #1
    ff2a:	429c      	cmp	r4, r3
    ff2c:	d100      	bne.n	ff30 <__aeabi_dsub+0x80>
    ff2e:	e110      	b.n	10152 <__aeabi_dsub+0x2a2>
    ff30:	003a      	movs	r2, r7
    ff32:	4bb9      	ldr	r3, [pc, #740]	; (10218 <__aeabi_dsub+0x368>)
    ff34:	4651      	mov	r1, sl
    ff36:	401a      	ands	r2, r3
    ff38:	2301      	movs	r3, #1
    ff3a:	0750      	lsls	r0, r2, #29
    ff3c:	08ed      	lsrs	r5, r5, #3
    ff3e:	0252      	lsls	r2, r2, #9
    ff40:	0564      	lsls	r4, r4, #21
    ff42:	4305      	orrs	r5, r0
    ff44:	0b12      	lsrs	r2, r2, #12
    ff46:	0d64      	lsrs	r4, r4, #21
    ff48:	400b      	ands	r3, r1
    ff4a:	2100      	movs	r1, #0
    ff4c:	0028      	movs	r0, r5
    ff4e:	0312      	lsls	r2, r2, #12
    ff50:	0d0d      	lsrs	r5, r1, #20
    ff52:	0b12      	lsrs	r2, r2, #12
    ff54:	0564      	lsls	r4, r4, #21
    ff56:	052d      	lsls	r5, r5, #20
    ff58:	4315      	orrs	r5, r2
    ff5a:	0862      	lsrs	r2, r4, #1
    ff5c:	4caf      	ldr	r4, [pc, #700]	; (1021c <__aeabi_dsub+0x36c>)
    ff5e:	07db      	lsls	r3, r3, #31
    ff60:	402c      	ands	r4, r5
    ff62:	4314      	orrs	r4, r2
    ff64:	0064      	lsls	r4, r4, #1
    ff66:	0864      	lsrs	r4, r4, #1
    ff68:	431c      	orrs	r4, r3
    ff6a:	0021      	movs	r1, r4
    ff6c:	bc1c      	pop	{r2, r3, r4}
    ff6e:	4690      	mov	r8, r2
    ff70:	4699      	mov	r9, r3
    ff72:	46a2      	mov	sl, r4
    ff74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff76:	4ba7      	ldr	r3, [pc, #668]	; (10214 <__aeabi_dsub+0x364>)
    ff78:	429c      	cmp	r4, r3
    ff7a:	d0c5      	beq.n	ff08 <__aeabi_dsub+0x58>
    ff7c:	2380      	movs	r3, #128	; 0x80
    ff7e:	041b      	lsls	r3, r3, #16
    ff80:	4318      	orrs	r0, r3
    ff82:	4663      	mov	r3, ip
    ff84:	2b38      	cmp	r3, #56	; 0x38
    ff86:	dd00      	ble.n	ff8a <__aeabi_dsub+0xda>
    ff88:	e0fd      	b.n	10186 <__aeabi_dsub+0x2d6>
    ff8a:	2b1f      	cmp	r3, #31
    ff8c:	dd00      	ble.n	ff90 <__aeabi_dsub+0xe0>
    ff8e:	e130      	b.n	101f2 <__aeabi_dsub+0x342>
    ff90:	4662      	mov	r2, ip
    ff92:	2320      	movs	r3, #32
    ff94:	1a9b      	subs	r3, r3, r2
    ff96:	0002      	movs	r2, r0
    ff98:	409a      	lsls	r2, r3
    ff9a:	4666      	mov	r6, ip
    ff9c:	4690      	mov	r8, r2
    ff9e:	000a      	movs	r2, r1
    ffa0:	4099      	lsls	r1, r3
    ffa2:	40f2      	lsrs	r2, r6
    ffa4:	4646      	mov	r6, r8
    ffa6:	1e4b      	subs	r3, r1, #1
    ffa8:	4199      	sbcs	r1, r3
    ffaa:	4332      	orrs	r2, r6
    ffac:	4311      	orrs	r1, r2
    ffae:	4663      	mov	r3, ip
    ffb0:	0002      	movs	r2, r0
    ffb2:	40da      	lsrs	r2, r3
    ffb4:	1a69      	subs	r1, r5, r1
    ffb6:	428d      	cmp	r5, r1
    ffb8:	419b      	sbcs	r3, r3
    ffba:	000d      	movs	r5, r1
    ffbc:	1aba      	subs	r2, r7, r2
    ffbe:	425b      	negs	r3, r3
    ffc0:	1ad7      	subs	r7, r2, r3
    ffc2:	023b      	lsls	r3, r7, #8
    ffc4:	d535      	bpl.n	10032 <__aeabi_dsub+0x182>
    ffc6:	027a      	lsls	r2, r7, #9
    ffc8:	0a53      	lsrs	r3, r2, #9
    ffca:	4698      	mov	r8, r3
    ffcc:	4643      	mov	r3, r8
    ffce:	2b00      	cmp	r3, #0
    ffd0:	d100      	bne.n	ffd4 <__aeabi_dsub+0x124>
    ffd2:	e0c4      	b.n	1015e <__aeabi_dsub+0x2ae>
    ffd4:	4640      	mov	r0, r8
    ffd6:	f000 fb6f 	bl	106b8 <__clzsi2>
    ffda:	0003      	movs	r3, r0
    ffdc:	3b08      	subs	r3, #8
    ffde:	2b1f      	cmp	r3, #31
    ffe0:	dd00      	ble.n	ffe4 <__aeabi_dsub+0x134>
    ffe2:	e0c5      	b.n	10170 <__aeabi_dsub+0x2c0>
    ffe4:	2220      	movs	r2, #32
    ffe6:	0029      	movs	r1, r5
    ffe8:	1ad2      	subs	r2, r2, r3
    ffea:	4647      	mov	r7, r8
    ffec:	40d1      	lsrs	r1, r2
    ffee:	409f      	lsls	r7, r3
    fff0:	000a      	movs	r2, r1
    fff2:	409d      	lsls	r5, r3
    fff4:	433a      	orrs	r2, r7
    fff6:	429c      	cmp	r4, r3
    fff8:	dd00      	ble.n	fffc <__aeabi_dsub+0x14c>
    fffa:	e0c0      	b.n	1017e <__aeabi_dsub+0x2ce>
    fffc:	1b1c      	subs	r4, r3, r4
    fffe:	1c63      	adds	r3, r4, #1
   10000:	2b1f      	cmp	r3, #31
   10002:	dd00      	ble.n	10006 <__aeabi_dsub+0x156>
   10004:	e0e4      	b.n	101d0 <__aeabi_dsub+0x320>
   10006:	2120      	movs	r1, #32
   10008:	0014      	movs	r4, r2
   1000a:	0028      	movs	r0, r5
   1000c:	1ac9      	subs	r1, r1, r3
   1000e:	40d8      	lsrs	r0, r3
   10010:	408c      	lsls	r4, r1
   10012:	408d      	lsls	r5, r1
   10014:	4304      	orrs	r4, r0
   10016:	40da      	lsrs	r2, r3
   10018:	1e68      	subs	r0, r5, #1
   1001a:	4185      	sbcs	r5, r0
   1001c:	0017      	movs	r7, r2
   1001e:	4325      	orrs	r5, r4
   10020:	2400      	movs	r4, #0
   10022:	e771      	b.n	ff08 <__aeabi_dsub+0x58>
   10024:	4642      	mov	r2, r8
   10026:	4663      	mov	r3, ip
   10028:	431a      	orrs	r2, r3
   1002a:	d100      	bne.n	1002e <__aeabi_dsub+0x17e>
   1002c:	e24c      	b.n	104c8 <__aeabi_dsub+0x618>
   1002e:	4667      	mov	r7, ip
   10030:	4645      	mov	r5, r8
   10032:	076b      	lsls	r3, r5, #29
   10034:	d000      	beq.n	10038 <__aeabi_dsub+0x188>
   10036:	e769      	b.n	ff0c <__aeabi_dsub+0x5c>
   10038:	2301      	movs	r3, #1
   1003a:	4651      	mov	r1, sl
   1003c:	0778      	lsls	r0, r7, #29
   1003e:	08ed      	lsrs	r5, r5, #3
   10040:	08fa      	lsrs	r2, r7, #3
   10042:	400b      	ands	r3, r1
   10044:	4305      	orrs	r5, r0
   10046:	4973      	ldr	r1, [pc, #460]	; (10214 <__aeabi_dsub+0x364>)
   10048:	428c      	cmp	r4, r1
   1004a:	d038      	beq.n	100be <__aeabi_dsub+0x20e>
   1004c:	0312      	lsls	r2, r2, #12
   1004e:	0564      	lsls	r4, r4, #21
   10050:	0b12      	lsrs	r2, r2, #12
   10052:	0d64      	lsrs	r4, r4, #21
   10054:	e779      	b.n	ff4a <__aeabi_dsub+0x9a>
   10056:	2e00      	cmp	r6, #0
   10058:	dc00      	bgt.n	1005c <__aeabi_dsub+0x1ac>
   1005a:	e09a      	b.n	10192 <__aeabi_dsub+0x2e2>
   1005c:	2a00      	cmp	r2, #0
   1005e:	d047      	beq.n	100f0 <__aeabi_dsub+0x240>
   10060:	4a6c      	ldr	r2, [pc, #432]	; (10214 <__aeabi_dsub+0x364>)
   10062:	4294      	cmp	r4, r2
   10064:	d100      	bne.n	10068 <__aeabi_dsub+0x1b8>
   10066:	e74f      	b.n	ff08 <__aeabi_dsub+0x58>
   10068:	2280      	movs	r2, #128	; 0x80
   1006a:	0412      	lsls	r2, r2, #16
   1006c:	4310      	orrs	r0, r2
   1006e:	4662      	mov	r2, ip
   10070:	2a38      	cmp	r2, #56	; 0x38
   10072:	dc00      	bgt.n	10076 <__aeabi_dsub+0x1c6>
   10074:	e108      	b.n	10288 <__aeabi_dsub+0x3d8>
   10076:	4301      	orrs	r1, r0
   10078:	1e48      	subs	r0, r1, #1
   1007a:	4181      	sbcs	r1, r0
   1007c:	2200      	movs	r2, #0
   1007e:	b2c9      	uxtb	r1, r1
   10080:	1949      	adds	r1, r1, r5
   10082:	19d2      	adds	r2, r2, r7
   10084:	42a9      	cmp	r1, r5
   10086:	41bf      	sbcs	r7, r7
   10088:	000d      	movs	r5, r1
   1008a:	427f      	negs	r7, r7
   1008c:	18bf      	adds	r7, r7, r2
   1008e:	023a      	lsls	r2, r7, #8
   10090:	d400      	bmi.n	10094 <__aeabi_dsub+0x1e4>
   10092:	e142      	b.n	1031a <__aeabi_dsub+0x46a>
   10094:	4a5f      	ldr	r2, [pc, #380]	; (10214 <__aeabi_dsub+0x364>)
   10096:	3401      	adds	r4, #1
   10098:	4294      	cmp	r4, r2
   1009a:	d100      	bne.n	1009e <__aeabi_dsub+0x1ee>
   1009c:	e14e      	b.n	1033c <__aeabi_dsub+0x48c>
   1009e:	2001      	movs	r0, #1
   100a0:	4a5d      	ldr	r2, [pc, #372]	; (10218 <__aeabi_dsub+0x368>)
   100a2:	0869      	lsrs	r1, r5, #1
   100a4:	403a      	ands	r2, r7
   100a6:	4028      	ands	r0, r5
   100a8:	4308      	orrs	r0, r1
   100aa:	07d5      	lsls	r5, r2, #31
   100ac:	4305      	orrs	r5, r0
   100ae:	0857      	lsrs	r7, r2, #1
   100b0:	469a      	mov	sl, r3
   100b2:	e729      	b.n	ff08 <__aeabi_dsub+0x58>
   100b4:	0006      	movs	r6, r0
   100b6:	430e      	orrs	r6, r1
   100b8:	d000      	beq.n	100bc <__aeabi_dsub+0x20c>
   100ba:	e717      	b.n	feec <__aeabi_dsub+0x3c>
   100bc:	e714      	b.n	fee8 <__aeabi_dsub+0x38>
   100be:	0029      	movs	r1, r5
   100c0:	4311      	orrs	r1, r2
   100c2:	d100      	bne.n	100c6 <__aeabi_dsub+0x216>
   100c4:	e1f9      	b.n	104ba <__aeabi_dsub+0x60a>
   100c6:	2180      	movs	r1, #128	; 0x80
   100c8:	0309      	lsls	r1, r1, #12
   100ca:	430a      	orrs	r2, r1
   100cc:	0312      	lsls	r2, r2, #12
   100ce:	0b12      	lsrs	r2, r2, #12
   100d0:	e73b      	b.n	ff4a <__aeabi_dsub+0x9a>
   100d2:	2301      	movs	r3, #1
   100d4:	425b      	negs	r3, r3
   100d6:	4698      	mov	r8, r3
   100d8:	44c4      	add	ip, r8
   100da:	4663      	mov	r3, ip
   100dc:	2b00      	cmp	r3, #0
   100de:	d172      	bne.n	101c6 <__aeabi_dsub+0x316>
   100e0:	1a69      	subs	r1, r5, r1
   100e2:	428d      	cmp	r5, r1
   100e4:	419b      	sbcs	r3, r3
   100e6:	1a3f      	subs	r7, r7, r0
   100e8:	425b      	negs	r3, r3
   100ea:	1aff      	subs	r7, r7, r3
   100ec:	000d      	movs	r5, r1
   100ee:	e768      	b.n	ffc2 <__aeabi_dsub+0x112>
   100f0:	0002      	movs	r2, r0
   100f2:	430a      	orrs	r2, r1
   100f4:	d100      	bne.n	100f8 <__aeabi_dsub+0x248>
   100f6:	e707      	b.n	ff08 <__aeabi_dsub+0x58>
   100f8:	2201      	movs	r2, #1
   100fa:	4252      	negs	r2, r2
   100fc:	4690      	mov	r8, r2
   100fe:	44c4      	add	ip, r8
   10100:	4662      	mov	r2, ip
   10102:	2a00      	cmp	r2, #0
   10104:	d000      	beq.n	10108 <__aeabi_dsub+0x258>
   10106:	e0e6      	b.n	102d6 <__aeabi_dsub+0x426>
   10108:	1869      	adds	r1, r5, r1
   1010a:	42a9      	cmp	r1, r5
   1010c:	41b6      	sbcs	r6, r6
   1010e:	183f      	adds	r7, r7, r0
   10110:	4276      	negs	r6, r6
   10112:	19f7      	adds	r7, r6, r7
   10114:	000d      	movs	r5, r1
   10116:	e7ba      	b.n	1008e <__aeabi_dsub+0x1de>
   10118:	2e00      	cmp	r6, #0
   1011a:	d000      	beq.n	1011e <__aeabi_dsub+0x26e>
   1011c:	e080      	b.n	10220 <__aeabi_dsub+0x370>
   1011e:	1c62      	adds	r2, r4, #1
   10120:	0552      	lsls	r2, r2, #21
   10122:	0d52      	lsrs	r2, r2, #21
   10124:	2a01      	cmp	r2, #1
   10126:	dc00      	bgt.n	1012a <__aeabi_dsub+0x27a>
   10128:	e0f9      	b.n	1031e <__aeabi_dsub+0x46e>
   1012a:	1a6a      	subs	r2, r5, r1
   1012c:	4691      	mov	r9, r2
   1012e:	454d      	cmp	r5, r9
   10130:	41b6      	sbcs	r6, r6
   10132:	1a3a      	subs	r2, r7, r0
   10134:	4276      	negs	r6, r6
   10136:	1b92      	subs	r2, r2, r6
   10138:	4690      	mov	r8, r2
   1013a:	0212      	lsls	r2, r2, #8
   1013c:	d400      	bmi.n	10140 <__aeabi_dsub+0x290>
   1013e:	e099      	b.n	10274 <__aeabi_dsub+0x3c4>
   10140:	1b4d      	subs	r5, r1, r5
   10142:	42a9      	cmp	r1, r5
   10144:	4189      	sbcs	r1, r1
   10146:	1bc7      	subs	r7, r0, r7
   10148:	4249      	negs	r1, r1
   1014a:	1a7a      	subs	r2, r7, r1
   1014c:	4690      	mov	r8, r2
   1014e:	469a      	mov	sl, r3
   10150:	e73c      	b.n	ffcc <__aeabi_dsub+0x11c>
   10152:	4652      	mov	r2, sl
   10154:	2301      	movs	r3, #1
   10156:	2500      	movs	r5, #0
   10158:	4013      	ands	r3, r2
   1015a:	2200      	movs	r2, #0
   1015c:	e6f5      	b.n	ff4a <__aeabi_dsub+0x9a>
   1015e:	0028      	movs	r0, r5
   10160:	f000 faaa 	bl	106b8 <__clzsi2>
   10164:	3020      	adds	r0, #32
   10166:	0003      	movs	r3, r0
   10168:	3b08      	subs	r3, #8
   1016a:	2b1f      	cmp	r3, #31
   1016c:	dc00      	bgt.n	10170 <__aeabi_dsub+0x2c0>
   1016e:	e739      	b.n	ffe4 <__aeabi_dsub+0x134>
   10170:	002a      	movs	r2, r5
   10172:	3828      	subs	r0, #40	; 0x28
   10174:	4082      	lsls	r2, r0
   10176:	2500      	movs	r5, #0
   10178:	429c      	cmp	r4, r3
   1017a:	dc00      	bgt.n	1017e <__aeabi_dsub+0x2ce>
   1017c:	e73e      	b.n	fffc <__aeabi_dsub+0x14c>
   1017e:	4f26      	ldr	r7, [pc, #152]	; (10218 <__aeabi_dsub+0x368>)
   10180:	1ae4      	subs	r4, r4, r3
   10182:	4017      	ands	r7, r2
   10184:	e6c0      	b.n	ff08 <__aeabi_dsub+0x58>
   10186:	4301      	orrs	r1, r0
   10188:	1e48      	subs	r0, r1, #1
   1018a:	4181      	sbcs	r1, r0
   1018c:	2200      	movs	r2, #0
   1018e:	b2c9      	uxtb	r1, r1
   10190:	e710      	b.n	ffb4 <__aeabi_dsub+0x104>
   10192:	2e00      	cmp	r6, #0
   10194:	d000      	beq.n	10198 <__aeabi_dsub+0x2e8>
   10196:	e0f1      	b.n	1037c <__aeabi_dsub+0x4cc>
   10198:	1c62      	adds	r2, r4, #1
   1019a:	4694      	mov	ip, r2
   1019c:	0552      	lsls	r2, r2, #21
   1019e:	0d52      	lsrs	r2, r2, #21
   101a0:	2a01      	cmp	r2, #1
   101a2:	dc00      	bgt.n	101a6 <__aeabi_dsub+0x2f6>
   101a4:	e0a0      	b.n	102e8 <__aeabi_dsub+0x438>
   101a6:	4a1b      	ldr	r2, [pc, #108]	; (10214 <__aeabi_dsub+0x364>)
   101a8:	4594      	cmp	ip, r2
   101aa:	d100      	bne.n	101ae <__aeabi_dsub+0x2fe>
   101ac:	e0c5      	b.n	1033a <__aeabi_dsub+0x48a>
   101ae:	1869      	adds	r1, r5, r1
   101b0:	42a9      	cmp	r1, r5
   101b2:	4192      	sbcs	r2, r2
   101b4:	183f      	adds	r7, r7, r0
   101b6:	4252      	negs	r2, r2
   101b8:	19d2      	adds	r2, r2, r7
   101ba:	0849      	lsrs	r1, r1, #1
   101bc:	07d5      	lsls	r5, r2, #31
   101be:	430d      	orrs	r5, r1
   101c0:	0857      	lsrs	r7, r2, #1
   101c2:	4664      	mov	r4, ip
   101c4:	e6a0      	b.n	ff08 <__aeabi_dsub+0x58>
   101c6:	4b13      	ldr	r3, [pc, #76]	; (10214 <__aeabi_dsub+0x364>)
   101c8:	429c      	cmp	r4, r3
   101ca:	d000      	beq.n	101ce <__aeabi_dsub+0x31e>
   101cc:	e6d9      	b.n	ff82 <__aeabi_dsub+0xd2>
   101ce:	e69b      	b.n	ff08 <__aeabi_dsub+0x58>
   101d0:	0011      	movs	r1, r2
   101d2:	3c1f      	subs	r4, #31
   101d4:	40e1      	lsrs	r1, r4
   101d6:	000c      	movs	r4, r1
   101d8:	2b20      	cmp	r3, #32
   101da:	d100      	bne.n	101de <__aeabi_dsub+0x32e>
   101dc:	e080      	b.n	102e0 <__aeabi_dsub+0x430>
   101de:	2140      	movs	r1, #64	; 0x40
   101e0:	1acb      	subs	r3, r1, r3
   101e2:	409a      	lsls	r2, r3
   101e4:	4315      	orrs	r5, r2
   101e6:	1e6a      	subs	r2, r5, #1
   101e8:	4195      	sbcs	r5, r2
   101ea:	2700      	movs	r7, #0
   101ec:	4325      	orrs	r5, r4
   101ee:	2400      	movs	r4, #0
   101f0:	e71f      	b.n	10032 <__aeabi_dsub+0x182>
   101f2:	4663      	mov	r3, ip
   101f4:	0002      	movs	r2, r0
   101f6:	3b20      	subs	r3, #32
   101f8:	40da      	lsrs	r2, r3
   101fa:	4663      	mov	r3, ip
   101fc:	2b20      	cmp	r3, #32
   101fe:	d071      	beq.n	102e4 <__aeabi_dsub+0x434>
   10200:	2340      	movs	r3, #64	; 0x40
   10202:	4666      	mov	r6, ip
   10204:	1b9b      	subs	r3, r3, r6
   10206:	4098      	lsls	r0, r3
   10208:	4301      	orrs	r1, r0
   1020a:	1e48      	subs	r0, r1, #1
   1020c:	4181      	sbcs	r1, r0
   1020e:	4311      	orrs	r1, r2
   10210:	2200      	movs	r2, #0
   10212:	e6cf      	b.n	ffb4 <__aeabi_dsub+0x104>
   10214:	000007ff 	.word	0x000007ff
   10218:	ff7fffff 	.word	0xff7fffff
   1021c:	800fffff 	.word	0x800fffff
   10220:	2c00      	cmp	r4, #0
   10222:	d048      	beq.n	102b6 <__aeabi_dsub+0x406>
   10224:	4cca      	ldr	r4, [pc, #808]	; (10550 <__aeabi_dsub+0x6a0>)
   10226:	42a2      	cmp	r2, r4
   10228:	d100      	bne.n	1022c <__aeabi_dsub+0x37c>
   1022a:	e0a2      	b.n	10372 <__aeabi_dsub+0x4c2>
   1022c:	4274      	negs	r4, r6
   1022e:	46a1      	mov	r9, r4
   10230:	2480      	movs	r4, #128	; 0x80
   10232:	0424      	lsls	r4, r4, #16
   10234:	4327      	orrs	r7, r4
   10236:	464c      	mov	r4, r9
   10238:	2c38      	cmp	r4, #56	; 0x38
   1023a:	dd00      	ble.n	1023e <__aeabi_dsub+0x38e>
   1023c:	e0db      	b.n	103f6 <__aeabi_dsub+0x546>
   1023e:	2c1f      	cmp	r4, #31
   10240:	dd00      	ble.n	10244 <__aeabi_dsub+0x394>
   10242:	e144      	b.n	104ce <__aeabi_dsub+0x61e>
   10244:	464e      	mov	r6, r9
   10246:	2420      	movs	r4, #32
   10248:	1ba4      	subs	r4, r4, r6
   1024a:	003e      	movs	r6, r7
   1024c:	40a6      	lsls	r6, r4
   1024e:	46a2      	mov	sl, r4
   10250:	46b0      	mov	r8, r6
   10252:	464c      	mov	r4, r9
   10254:	002e      	movs	r6, r5
   10256:	40e6      	lsrs	r6, r4
   10258:	46b4      	mov	ip, r6
   1025a:	4646      	mov	r6, r8
   1025c:	4664      	mov	r4, ip
   1025e:	4326      	orrs	r6, r4
   10260:	4654      	mov	r4, sl
   10262:	40a5      	lsls	r5, r4
   10264:	1e6c      	subs	r4, r5, #1
   10266:	41a5      	sbcs	r5, r4
   10268:	0034      	movs	r4, r6
   1026a:	432c      	orrs	r4, r5
   1026c:	464d      	mov	r5, r9
   1026e:	40ef      	lsrs	r7, r5
   10270:	1b0d      	subs	r5, r1, r4
   10272:	e028      	b.n	102c6 <__aeabi_dsub+0x416>
   10274:	464a      	mov	r2, r9
   10276:	4643      	mov	r3, r8
   10278:	464d      	mov	r5, r9
   1027a:	431a      	orrs	r2, r3
   1027c:	d000      	beq.n	10280 <__aeabi_dsub+0x3d0>
   1027e:	e6a5      	b.n	ffcc <__aeabi_dsub+0x11c>
   10280:	2300      	movs	r3, #0
   10282:	2400      	movs	r4, #0
   10284:	2500      	movs	r5, #0
   10286:	e6de      	b.n	10046 <__aeabi_dsub+0x196>
   10288:	2a1f      	cmp	r2, #31
   1028a:	dc5a      	bgt.n	10342 <__aeabi_dsub+0x492>
   1028c:	4666      	mov	r6, ip
   1028e:	2220      	movs	r2, #32
   10290:	1b92      	subs	r2, r2, r6
   10292:	0006      	movs	r6, r0
   10294:	4096      	lsls	r6, r2
   10296:	4691      	mov	r9, r2
   10298:	46b0      	mov	r8, r6
   1029a:	4662      	mov	r2, ip
   1029c:	000e      	movs	r6, r1
   1029e:	40d6      	lsrs	r6, r2
   102a0:	4642      	mov	r2, r8
   102a2:	4316      	orrs	r6, r2
   102a4:	464a      	mov	r2, r9
   102a6:	4091      	lsls	r1, r2
   102a8:	1e4a      	subs	r2, r1, #1
   102aa:	4191      	sbcs	r1, r2
   102ac:	0002      	movs	r2, r0
   102ae:	4660      	mov	r0, ip
   102b0:	4331      	orrs	r1, r6
   102b2:	40c2      	lsrs	r2, r0
   102b4:	e6e4      	b.n	10080 <__aeabi_dsub+0x1d0>
   102b6:	003c      	movs	r4, r7
   102b8:	432c      	orrs	r4, r5
   102ba:	d05a      	beq.n	10372 <__aeabi_dsub+0x4c2>
   102bc:	43f4      	mvns	r4, r6
   102be:	46a1      	mov	r9, r4
   102c0:	2c00      	cmp	r4, #0
   102c2:	d152      	bne.n	1036a <__aeabi_dsub+0x4ba>
   102c4:	1b4d      	subs	r5, r1, r5
   102c6:	42a9      	cmp	r1, r5
   102c8:	4189      	sbcs	r1, r1
   102ca:	1bc7      	subs	r7, r0, r7
   102cc:	4249      	negs	r1, r1
   102ce:	1a7f      	subs	r7, r7, r1
   102d0:	0014      	movs	r4, r2
   102d2:	469a      	mov	sl, r3
   102d4:	e675      	b.n	ffc2 <__aeabi_dsub+0x112>
   102d6:	4a9e      	ldr	r2, [pc, #632]	; (10550 <__aeabi_dsub+0x6a0>)
   102d8:	4294      	cmp	r4, r2
   102da:	d000      	beq.n	102de <__aeabi_dsub+0x42e>
   102dc:	e6c7      	b.n	1006e <__aeabi_dsub+0x1be>
   102de:	e613      	b.n	ff08 <__aeabi_dsub+0x58>
   102e0:	2200      	movs	r2, #0
   102e2:	e77f      	b.n	101e4 <__aeabi_dsub+0x334>
   102e4:	2000      	movs	r0, #0
   102e6:	e78f      	b.n	10208 <__aeabi_dsub+0x358>
   102e8:	2c00      	cmp	r4, #0
   102ea:	d000      	beq.n	102ee <__aeabi_dsub+0x43e>
   102ec:	e0c8      	b.n	10480 <__aeabi_dsub+0x5d0>
   102ee:	003b      	movs	r3, r7
   102f0:	432b      	orrs	r3, r5
   102f2:	d100      	bne.n	102f6 <__aeabi_dsub+0x446>
   102f4:	e10f      	b.n	10516 <__aeabi_dsub+0x666>
   102f6:	0003      	movs	r3, r0
   102f8:	430b      	orrs	r3, r1
   102fa:	d100      	bne.n	102fe <__aeabi_dsub+0x44e>
   102fc:	e604      	b.n	ff08 <__aeabi_dsub+0x58>
   102fe:	1869      	adds	r1, r5, r1
   10300:	42a9      	cmp	r1, r5
   10302:	419b      	sbcs	r3, r3
   10304:	183f      	adds	r7, r7, r0
   10306:	425b      	negs	r3, r3
   10308:	19df      	adds	r7, r3, r7
   1030a:	023b      	lsls	r3, r7, #8
   1030c:	d400      	bmi.n	10310 <__aeabi_dsub+0x460>
   1030e:	e11a      	b.n	10546 <__aeabi_dsub+0x696>
   10310:	4b90      	ldr	r3, [pc, #576]	; (10554 <__aeabi_dsub+0x6a4>)
   10312:	000d      	movs	r5, r1
   10314:	401f      	ands	r7, r3
   10316:	4664      	mov	r4, ip
   10318:	e5f6      	b.n	ff08 <__aeabi_dsub+0x58>
   1031a:	469a      	mov	sl, r3
   1031c:	e689      	b.n	10032 <__aeabi_dsub+0x182>
   1031e:	003a      	movs	r2, r7
   10320:	432a      	orrs	r2, r5
   10322:	2c00      	cmp	r4, #0
   10324:	d15c      	bne.n	103e0 <__aeabi_dsub+0x530>
   10326:	2a00      	cmp	r2, #0
   10328:	d175      	bne.n	10416 <__aeabi_dsub+0x566>
   1032a:	0002      	movs	r2, r0
   1032c:	430a      	orrs	r2, r1
   1032e:	d100      	bne.n	10332 <__aeabi_dsub+0x482>
   10330:	e0ca      	b.n	104c8 <__aeabi_dsub+0x618>
   10332:	0007      	movs	r7, r0
   10334:	000d      	movs	r5, r1
   10336:	469a      	mov	sl, r3
   10338:	e5e6      	b.n	ff08 <__aeabi_dsub+0x58>
   1033a:	4664      	mov	r4, ip
   1033c:	2200      	movs	r2, #0
   1033e:	2500      	movs	r5, #0
   10340:	e681      	b.n	10046 <__aeabi_dsub+0x196>
   10342:	4662      	mov	r2, ip
   10344:	0006      	movs	r6, r0
   10346:	3a20      	subs	r2, #32
   10348:	40d6      	lsrs	r6, r2
   1034a:	4662      	mov	r2, ip
   1034c:	46b0      	mov	r8, r6
   1034e:	2a20      	cmp	r2, #32
   10350:	d100      	bne.n	10354 <__aeabi_dsub+0x4a4>
   10352:	e0b7      	b.n	104c4 <__aeabi_dsub+0x614>
   10354:	2240      	movs	r2, #64	; 0x40
   10356:	4666      	mov	r6, ip
   10358:	1b92      	subs	r2, r2, r6
   1035a:	4090      	lsls	r0, r2
   1035c:	4301      	orrs	r1, r0
   1035e:	4642      	mov	r2, r8
   10360:	1e48      	subs	r0, r1, #1
   10362:	4181      	sbcs	r1, r0
   10364:	4311      	orrs	r1, r2
   10366:	2200      	movs	r2, #0
   10368:	e68a      	b.n	10080 <__aeabi_dsub+0x1d0>
   1036a:	4c79      	ldr	r4, [pc, #484]	; (10550 <__aeabi_dsub+0x6a0>)
   1036c:	42a2      	cmp	r2, r4
   1036e:	d000      	beq.n	10372 <__aeabi_dsub+0x4c2>
   10370:	e761      	b.n	10236 <__aeabi_dsub+0x386>
   10372:	0007      	movs	r7, r0
   10374:	000d      	movs	r5, r1
   10376:	0014      	movs	r4, r2
   10378:	469a      	mov	sl, r3
   1037a:	e5c5      	b.n	ff08 <__aeabi_dsub+0x58>
   1037c:	2c00      	cmp	r4, #0
   1037e:	d141      	bne.n	10404 <__aeabi_dsub+0x554>
   10380:	003c      	movs	r4, r7
   10382:	432c      	orrs	r4, r5
   10384:	d078      	beq.n	10478 <__aeabi_dsub+0x5c8>
   10386:	43f4      	mvns	r4, r6
   10388:	46a1      	mov	r9, r4
   1038a:	2c00      	cmp	r4, #0
   1038c:	d020      	beq.n	103d0 <__aeabi_dsub+0x520>
   1038e:	4c70      	ldr	r4, [pc, #448]	; (10550 <__aeabi_dsub+0x6a0>)
   10390:	42a2      	cmp	r2, r4
   10392:	d071      	beq.n	10478 <__aeabi_dsub+0x5c8>
   10394:	464c      	mov	r4, r9
   10396:	2c38      	cmp	r4, #56	; 0x38
   10398:	dd00      	ble.n	1039c <__aeabi_dsub+0x4ec>
   1039a:	e0b2      	b.n	10502 <__aeabi_dsub+0x652>
   1039c:	2c1f      	cmp	r4, #31
   1039e:	dd00      	ble.n	103a2 <__aeabi_dsub+0x4f2>
   103a0:	e0bc      	b.n	1051c <__aeabi_dsub+0x66c>
   103a2:	2620      	movs	r6, #32
   103a4:	1b34      	subs	r4, r6, r4
   103a6:	46a2      	mov	sl, r4
   103a8:	003c      	movs	r4, r7
   103aa:	4656      	mov	r6, sl
   103ac:	40b4      	lsls	r4, r6
   103ae:	464e      	mov	r6, r9
   103b0:	46a0      	mov	r8, r4
   103b2:	002c      	movs	r4, r5
   103b4:	40f4      	lsrs	r4, r6
   103b6:	46a4      	mov	ip, r4
   103b8:	4644      	mov	r4, r8
   103ba:	4666      	mov	r6, ip
   103bc:	4334      	orrs	r4, r6
   103be:	46a4      	mov	ip, r4
   103c0:	4654      	mov	r4, sl
   103c2:	40a5      	lsls	r5, r4
   103c4:	4664      	mov	r4, ip
   103c6:	1e6e      	subs	r6, r5, #1
   103c8:	41b5      	sbcs	r5, r6
   103ca:	4325      	orrs	r5, r4
   103cc:	464c      	mov	r4, r9
   103ce:	40e7      	lsrs	r7, r4
   103d0:	186d      	adds	r5, r5, r1
   103d2:	428d      	cmp	r5, r1
   103d4:	4189      	sbcs	r1, r1
   103d6:	183f      	adds	r7, r7, r0
   103d8:	4249      	negs	r1, r1
   103da:	19cf      	adds	r7, r1, r7
   103dc:	0014      	movs	r4, r2
   103de:	e656      	b.n	1008e <__aeabi_dsub+0x1de>
   103e0:	2a00      	cmp	r2, #0
   103e2:	d12f      	bne.n	10444 <__aeabi_dsub+0x594>
   103e4:	0002      	movs	r2, r0
   103e6:	430a      	orrs	r2, r1
   103e8:	d100      	bne.n	103ec <__aeabi_dsub+0x53c>
   103ea:	e084      	b.n	104f6 <__aeabi_dsub+0x646>
   103ec:	0007      	movs	r7, r0
   103ee:	000d      	movs	r5, r1
   103f0:	469a      	mov	sl, r3
   103f2:	4c57      	ldr	r4, [pc, #348]	; (10550 <__aeabi_dsub+0x6a0>)
   103f4:	e588      	b.n	ff08 <__aeabi_dsub+0x58>
   103f6:	433d      	orrs	r5, r7
   103f8:	1e6f      	subs	r7, r5, #1
   103fa:	41bd      	sbcs	r5, r7
   103fc:	b2ec      	uxtb	r4, r5
   103fe:	2700      	movs	r7, #0
   10400:	1b0d      	subs	r5, r1, r4
   10402:	e760      	b.n	102c6 <__aeabi_dsub+0x416>
   10404:	4c52      	ldr	r4, [pc, #328]	; (10550 <__aeabi_dsub+0x6a0>)
   10406:	42a2      	cmp	r2, r4
   10408:	d036      	beq.n	10478 <__aeabi_dsub+0x5c8>
   1040a:	4274      	negs	r4, r6
   1040c:	2680      	movs	r6, #128	; 0x80
   1040e:	0436      	lsls	r6, r6, #16
   10410:	46a1      	mov	r9, r4
   10412:	4337      	orrs	r7, r6
   10414:	e7be      	b.n	10394 <__aeabi_dsub+0x4e4>
   10416:	0002      	movs	r2, r0
   10418:	430a      	orrs	r2, r1
   1041a:	d100      	bne.n	1041e <__aeabi_dsub+0x56e>
   1041c:	e574      	b.n	ff08 <__aeabi_dsub+0x58>
   1041e:	1a6a      	subs	r2, r5, r1
   10420:	4690      	mov	r8, r2
   10422:	4545      	cmp	r5, r8
   10424:	41b6      	sbcs	r6, r6
   10426:	1a3a      	subs	r2, r7, r0
   10428:	4276      	negs	r6, r6
   1042a:	1b92      	subs	r2, r2, r6
   1042c:	4694      	mov	ip, r2
   1042e:	0212      	lsls	r2, r2, #8
   10430:	d400      	bmi.n	10434 <__aeabi_dsub+0x584>
   10432:	e5f7      	b.n	10024 <__aeabi_dsub+0x174>
   10434:	1b4d      	subs	r5, r1, r5
   10436:	42a9      	cmp	r1, r5
   10438:	4189      	sbcs	r1, r1
   1043a:	1bc7      	subs	r7, r0, r7
   1043c:	4249      	negs	r1, r1
   1043e:	1a7f      	subs	r7, r7, r1
   10440:	469a      	mov	sl, r3
   10442:	e561      	b.n	ff08 <__aeabi_dsub+0x58>
   10444:	0002      	movs	r2, r0
   10446:	430a      	orrs	r2, r1
   10448:	d03a      	beq.n	104c0 <__aeabi_dsub+0x610>
   1044a:	08ed      	lsrs	r5, r5, #3
   1044c:	077c      	lsls	r4, r7, #29
   1044e:	432c      	orrs	r4, r5
   10450:	2580      	movs	r5, #128	; 0x80
   10452:	08fa      	lsrs	r2, r7, #3
   10454:	032d      	lsls	r5, r5, #12
   10456:	422a      	tst	r2, r5
   10458:	d008      	beq.n	1046c <__aeabi_dsub+0x5bc>
   1045a:	08c7      	lsrs	r7, r0, #3
   1045c:	422f      	tst	r7, r5
   1045e:	d105      	bne.n	1046c <__aeabi_dsub+0x5bc>
   10460:	0745      	lsls	r5, r0, #29
   10462:	002c      	movs	r4, r5
   10464:	003a      	movs	r2, r7
   10466:	469a      	mov	sl, r3
   10468:	08c9      	lsrs	r1, r1, #3
   1046a:	430c      	orrs	r4, r1
   1046c:	0f67      	lsrs	r7, r4, #29
   1046e:	00d2      	lsls	r2, r2, #3
   10470:	00e5      	lsls	r5, r4, #3
   10472:	4317      	orrs	r7, r2
   10474:	4c36      	ldr	r4, [pc, #216]	; (10550 <__aeabi_dsub+0x6a0>)
   10476:	e547      	b.n	ff08 <__aeabi_dsub+0x58>
   10478:	0007      	movs	r7, r0
   1047a:	000d      	movs	r5, r1
   1047c:	0014      	movs	r4, r2
   1047e:	e543      	b.n	ff08 <__aeabi_dsub+0x58>
   10480:	003a      	movs	r2, r7
   10482:	432a      	orrs	r2, r5
   10484:	d043      	beq.n	1050e <__aeabi_dsub+0x65e>
   10486:	0002      	movs	r2, r0
   10488:	430a      	orrs	r2, r1
   1048a:	d019      	beq.n	104c0 <__aeabi_dsub+0x610>
   1048c:	08ed      	lsrs	r5, r5, #3
   1048e:	077c      	lsls	r4, r7, #29
   10490:	432c      	orrs	r4, r5
   10492:	2580      	movs	r5, #128	; 0x80
   10494:	08fa      	lsrs	r2, r7, #3
   10496:	032d      	lsls	r5, r5, #12
   10498:	422a      	tst	r2, r5
   1049a:	d007      	beq.n	104ac <__aeabi_dsub+0x5fc>
   1049c:	08c6      	lsrs	r6, r0, #3
   1049e:	422e      	tst	r6, r5
   104a0:	d104      	bne.n	104ac <__aeabi_dsub+0x5fc>
   104a2:	0747      	lsls	r7, r0, #29
   104a4:	003c      	movs	r4, r7
   104a6:	0032      	movs	r2, r6
   104a8:	08c9      	lsrs	r1, r1, #3
   104aa:	430c      	orrs	r4, r1
   104ac:	00d7      	lsls	r7, r2, #3
   104ae:	0f62      	lsrs	r2, r4, #29
   104b0:	00e5      	lsls	r5, r4, #3
   104b2:	4317      	orrs	r7, r2
   104b4:	469a      	mov	sl, r3
   104b6:	4c26      	ldr	r4, [pc, #152]	; (10550 <__aeabi_dsub+0x6a0>)
   104b8:	e526      	b.n	ff08 <__aeabi_dsub+0x58>
   104ba:	2200      	movs	r2, #0
   104bc:	2500      	movs	r5, #0
   104be:	e544      	b.n	ff4a <__aeabi_dsub+0x9a>
   104c0:	4c23      	ldr	r4, [pc, #140]	; (10550 <__aeabi_dsub+0x6a0>)
   104c2:	e521      	b.n	ff08 <__aeabi_dsub+0x58>
   104c4:	2000      	movs	r0, #0
   104c6:	e749      	b.n	1035c <__aeabi_dsub+0x4ac>
   104c8:	2300      	movs	r3, #0
   104ca:	2500      	movs	r5, #0
   104cc:	e5bb      	b.n	10046 <__aeabi_dsub+0x196>
   104ce:	464c      	mov	r4, r9
   104d0:	003e      	movs	r6, r7
   104d2:	3c20      	subs	r4, #32
   104d4:	40e6      	lsrs	r6, r4
   104d6:	464c      	mov	r4, r9
   104d8:	46b4      	mov	ip, r6
   104da:	2c20      	cmp	r4, #32
   104dc:	d031      	beq.n	10542 <__aeabi_dsub+0x692>
   104de:	2440      	movs	r4, #64	; 0x40
   104e0:	464e      	mov	r6, r9
   104e2:	1ba6      	subs	r6, r4, r6
   104e4:	40b7      	lsls	r7, r6
   104e6:	433d      	orrs	r5, r7
   104e8:	1e6c      	subs	r4, r5, #1
   104ea:	41a5      	sbcs	r5, r4
   104ec:	4664      	mov	r4, ip
   104ee:	432c      	orrs	r4, r5
   104f0:	2700      	movs	r7, #0
   104f2:	1b0d      	subs	r5, r1, r4
   104f4:	e6e7      	b.n	102c6 <__aeabi_dsub+0x416>
   104f6:	2280      	movs	r2, #128	; 0x80
   104f8:	2300      	movs	r3, #0
   104fa:	0312      	lsls	r2, r2, #12
   104fc:	4c14      	ldr	r4, [pc, #80]	; (10550 <__aeabi_dsub+0x6a0>)
   104fe:	2500      	movs	r5, #0
   10500:	e5a1      	b.n	10046 <__aeabi_dsub+0x196>
   10502:	433d      	orrs	r5, r7
   10504:	1e6f      	subs	r7, r5, #1
   10506:	41bd      	sbcs	r5, r7
   10508:	2700      	movs	r7, #0
   1050a:	b2ed      	uxtb	r5, r5
   1050c:	e760      	b.n	103d0 <__aeabi_dsub+0x520>
   1050e:	0007      	movs	r7, r0
   10510:	000d      	movs	r5, r1
   10512:	4c0f      	ldr	r4, [pc, #60]	; (10550 <__aeabi_dsub+0x6a0>)
   10514:	e4f8      	b.n	ff08 <__aeabi_dsub+0x58>
   10516:	0007      	movs	r7, r0
   10518:	000d      	movs	r5, r1
   1051a:	e4f5      	b.n	ff08 <__aeabi_dsub+0x58>
   1051c:	464e      	mov	r6, r9
   1051e:	003c      	movs	r4, r7
   10520:	3e20      	subs	r6, #32
   10522:	40f4      	lsrs	r4, r6
   10524:	46a0      	mov	r8, r4
   10526:	464c      	mov	r4, r9
   10528:	2c20      	cmp	r4, #32
   1052a:	d00e      	beq.n	1054a <__aeabi_dsub+0x69a>
   1052c:	2440      	movs	r4, #64	; 0x40
   1052e:	464e      	mov	r6, r9
   10530:	1ba4      	subs	r4, r4, r6
   10532:	40a7      	lsls	r7, r4
   10534:	433d      	orrs	r5, r7
   10536:	1e6f      	subs	r7, r5, #1
   10538:	41bd      	sbcs	r5, r7
   1053a:	4644      	mov	r4, r8
   1053c:	2700      	movs	r7, #0
   1053e:	4325      	orrs	r5, r4
   10540:	e746      	b.n	103d0 <__aeabi_dsub+0x520>
   10542:	2700      	movs	r7, #0
   10544:	e7cf      	b.n	104e6 <__aeabi_dsub+0x636>
   10546:	000d      	movs	r5, r1
   10548:	e573      	b.n	10032 <__aeabi_dsub+0x182>
   1054a:	2700      	movs	r7, #0
   1054c:	e7f2      	b.n	10534 <__aeabi_dsub+0x684>
   1054e:	46c0      	nop			; (mov r8, r8)
   10550:	000007ff 	.word	0x000007ff
   10554:	ff7fffff 	.word	0xff7fffff

00010558 <__aeabi_d2iz>:
   10558:	030b      	lsls	r3, r1, #12
   1055a:	b530      	push	{r4, r5, lr}
   1055c:	4d13      	ldr	r5, [pc, #76]	; (105ac <__aeabi_d2iz+0x54>)
   1055e:	0b1a      	lsrs	r2, r3, #12
   10560:	004b      	lsls	r3, r1, #1
   10562:	0d5b      	lsrs	r3, r3, #21
   10564:	0fc9      	lsrs	r1, r1, #31
   10566:	2400      	movs	r4, #0
   10568:	42ab      	cmp	r3, r5
   1056a:	dd11      	ble.n	10590 <__aeabi_d2iz+0x38>
   1056c:	4c10      	ldr	r4, [pc, #64]	; (105b0 <__aeabi_d2iz+0x58>)
   1056e:	42a3      	cmp	r3, r4
   10570:	dc10      	bgt.n	10594 <__aeabi_d2iz+0x3c>
   10572:	2480      	movs	r4, #128	; 0x80
   10574:	0364      	lsls	r4, r4, #13
   10576:	4322      	orrs	r2, r4
   10578:	4c0e      	ldr	r4, [pc, #56]	; (105b4 <__aeabi_d2iz+0x5c>)
   1057a:	1ae4      	subs	r4, r4, r3
   1057c:	2c1f      	cmp	r4, #31
   1057e:	dd0c      	ble.n	1059a <__aeabi_d2iz+0x42>
   10580:	480d      	ldr	r0, [pc, #52]	; (105b8 <__aeabi_d2iz+0x60>)
   10582:	1ac3      	subs	r3, r0, r3
   10584:	40da      	lsrs	r2, r3
   10586:	0013      	movs	r3, r2
   10588:	425c      	negs	r4, r3
   1058a:	2900      	cmp	r1, #0
   1058c:	d100      	bne.n	10590 <__aeabi_d2iz+0x38>
   1058e:	001c      	movs	r4, r3
   10590:	0020      	movs	r0, r4
   10592:	bd30      	pop	{r4, r5, pc}
   10594:	4b09      	ldr	r3, [pc, #36]	; (105bc <__aeabi_d2iz+0x64>)
   10596:	18cc      	adds	r4, r1, r3
   10598:	e7fa      	b.n	10590 <__aeabi_d2iz+0x38>
   1059a:	40e0      	lsrs	r0, r4
   1059c:	4c08      	ldr	r4, [pc, #32]	; (105c0 <__aeabi_d2iz+0x68>)
   1059e:	46a4      	mov	ip, r4
   105a0:	4463      	add	r3, ip
   105a2:	409a      	lsls	r2, r3
   105a4:	0013      	movs	r3, r2
   105a6:	4303      	orrs	r3, r0
   105a8:	e7ee      	b.n	10588 <__aeabi_d2iz+0x30>
   105aa:	46c0      	nop			; (mov r8, r8)
   105ac:	000003fe 	.word	0x000003fe
   105b0:	0000041d 	.word	0x0000041d
   105b4:	00000433 	.word	0x00000433
   105b8:	00000413 	.word	0x00000413
   105bc:	7fffffff 	.word	0x7fffffff
   105c0:	fffffbed 	.word	0xfffffbed

000105c4 <__aeabi_i2d>:
   105c4:	b570      	push	{r4, r5, r6, lr}
   105c6:	2800      	cmp	r0, #0
   105c8:	d030      	beq.n	1062c <__aeabi_i2d+0x68>
   105ca:	17c3      	asrs	r3, r0, #31
   105cc:	18c4      	adds	r4, r0, r3
   105ce:	405c      	eors	r4, r3
   105d0:	0fc5      	lsrs	r5, r0, #31
   105d2:	0020      	movs	r0, r4
   105d4:	f000 f870 	bl	106b8 <__clzsi2>
   105d8:	4b17      	ldr	r3, [pc, #92]	; (10638 <__aeabi_i2d+0x74>)
   105da:	4a18      	ldr	r2, [pc, #96]	; (1063c <__aeabi_i2d+0x78>)
   105dc:	1a1b      	subs	r3, r3, r0
   105de:	1ad2      	subs	r2, r2, r3
   105e0:	2a1f      	cmp	r2, #31
   105e2:	dd18      	ble.n	10616 <__aeabi_i2d+0x52>
   105e4:	4a16      	ldr	r2, [pc, #88]	; (10640 <__aeabi_i2d+0x7c>)
   105e6:	1ad2      	subs	r2, r2, r3
   105e8:	4094      	lsls	r4, r2
   105ea:	2200      	movs	r2, #0
   105ec:	0324      	lsls	r4, r4, #12
   105ee:	055b      	lsls	r3, r3, #21
   105f0:	0b24      	lsrs	r4, r4, #12
   105f2:	0d5b      	lsrs	r3, r3, #21
   105f4:	2100      	movs	r1, #0
   105f6:	0010      	movs	r0, r2
   105f8:	0324      	lsls	r4, r4, #12
   105fa:	0d0a      	lsrs	r2, r1, #20
   105fc:	0512      	lsls	r2, r2, #20
   105fe:	0b24      	lsrs	r4, r4, #12
   10600:	4314      	orrs	r4, r2
   10602:	4a10      	ldr	r2, [pc, #64]	; (10644 <__aeabi_i2d+0x80>)
   10604:	051b      	lsls	r3, r3, #20
   10606:	4014      	ands	r4, r2
   10608:	431c      	orrs	r4, r3
   1060a:	0064      	lsls	r4, r4, #1
   1060c:	07ed      	lsls	r5, r5, #31
   1060e:	0864      	lsrs	r4, r4, #1
   10610:	432c      	orrs	r4, r5
   10612:	0021      	movs	r1, r4
   10614:	bd70      	pop	{r4, r5, r6, pc}
   10616:	0021      	movs	r1, r4
   10618:	4091      	lsls	r1, r2
   1061a:	000a      	movs	r2, r1
   1061c:	210b      	movs	r1, #11
   1061e:	1a08      	subs	r0, r1, r0
   10620:	40c4      	lsrs	r4, r0
   10622:	055b      	lsls	r3, r3, #21
   10624:	0324      	lsls	r4, r4, #12
   10626:	0b24      	lsrs	r4, r4, #12
   10628:	0d5b      	lsrs	r3, r3, #21
   1062a:	e7e3      	b.n	105f4 <__aeabi_i2d+0x30>
   1062c:	2500      	movs	r5, #0
   1062e:	2300      	movs	r3, #0
   10630:	2400      	movs	r4, #0
   10632:	2200      	movs	r2, #0
   10634:	e7de      	b.n	105f4 <__aeabi_i2d+0x30>
   10636:	46c0      	nop			; (mov r8, r8)
   10638:	0000041e 	.word	0x0000041e
   1063c:	00000433 	.word	0x00000433
   10640:	00000413 	.word	0x00000413
   10644:	800fffff 	.word	0x800fffff

00010648 <__aeabi_ui2d>:
   10648:	b570      	push	{r4, r5, r6, lr}
   1064a:	1e05      	subs	r5, r0, #0
   1064c:	d028      	beq.n	106a0 <__aeabi_ui2d+0x58>
   1064e:	f000 f833 	bl	106b8 <__clzsi2>
   10652:	4b15      	ldr	r3, [pc, #84]	; (106a8 <__aeabi_ui2d+0x60>)
   10654:	4a15      	ldr	r2, [pc, #84]	; (106ac <__aeabi_ui2d+0x64>)
   10656:	1a1b      	subs	r3, r3, r0
   10658:	1ad2      	subs	r2, r2, r3
   1065a:	2a1f      	cmp	r2, #31
   1065c:	dd16      	ble.n	1068c <__aeabi_ui2d+0x44>
   1065e:	002c      	movs	r4, r5
   10660:	4a13      	ldr	r2, [pc, #76]	; (106b0 <__aeabi_ui2d+0x68>)
   10662:	2500      	movs	r5, #0
   10664:	1ad2      	subs	r2, r2, r3
   10666:	4094      	lsls	r4, r2
   10668:	055a      	lsls	r2, r3, #21
   1066a:	0324      	lsls	r4, r4, #12
   1066c:	0b24      	lsrs	r4, r4, #12
   1066e:	0d52      	lsrs	r2, r2, #21
   10670:	2100      	movs	r1, #0
   10672:	0324      	lsls	r4, r4, #12
   10674:	0d0b      	lsrs	r3, r1, #20
   10676:	0b24      	lsrs	r4, r4, #12
   10678:	051b      	lsls	r3, r3, #20
   1067a:	4323      	orrs	r3, r4
   1067c:	4c0d      	ldr	r4, [pc, #52]	; (106b4 <__aeabi_ui2d+0x6c>)
   1067e:	0512      	lsls	r2, r2, #20
   10680:	4023      	ands	r3, r4
   10682:	4313      	orrs	r3, r2
   10684:	005b      	lsls	r3, r3, #1
   10686:	0028      	movs	r0, r5
   10688:	0859      	lsrs	r1, r3, #1
   1068a:	bd70      	pop	{r4, r5, r6, pc}
   1068c:	210b      	movs	r1, #11
   1068e:	002c      	movs	r4, r5
   10690:	1a08      	subs	r0, r1, r0
   10692:	40c4      	lsrs	r4, r0
   10694:	4095      	lsls	r5, r2
   10696:	0324      	lsls	r4, r4, #12
   10698:	055a      	lsls	r2, r3, #21
   1069a:	0b24      	lsrs	r4, r4, #12
   1069c:	0d52      	lsrs	r2, r2, #21
   1069e:	e7e7      	b.n	10670 <__aeabi_ui2d+0x28>
   106a0:	2200      	movs	r2, #0
   106a2:	2400      	movs	r4, #0
   106a4:	e7e4      	b.n	10670 <__aeabi_ui2d+0x28>
   106a6:	46c0      	nop			; (mov r8, r8)
   106a8:	0000041e 	.word	0x0000041e
   106ac:	00000433 	.word	0x00000433
   106b0:	00000413 	.word	0x00000413
   106b4:	800fffff 	.word	0x800fffff

000106b8 <__clzsi2>:
   106b8:	211c      	movs	r1, #28
   106ba:	2301      	movs	r3, #1
   106bc:	041b      	lsls	r3, r3, #16
   106be:	4298      	cmp	r0, r3
   106c0:	d301      	bcc.n	106c6 <__clzsi2+0xe>
   106c2:	0c00      	lsrs	r0, r0, #16
   106c4:	3910      	subs	r1, #16
   106c6:	0a1b      	lsrs	r3, r3, #8
   106c8:	4298      	cmp	r0, r3
   106ca:	d301      	bcc.n	106d0 <__clzsi2+0x18>
   106cc:	0a00      	lsrs	r0, r0, #8
   106ce:	3908      	subs	r1, #8
   106d0:	091b      	lsrs	r3, r3, #4
   106d2:	4298      	cmp	r0, r3
   106d4:	d301      	bcc.n	106da <__clzsi2+0x22>
   106d6:	0900      	lsrs	r0, r0, #4
   106d8:	3904      	subs	r1, #4
   106da:	a202      	add	r2, pc, #8	; (adr r2, 106e4 <__clzsi2+0x2c>)
   106dc:	5c10      	ldrb	r0, [r2, r0]
   106de:	1840      	adds	r0, r0, r1
   106e0:	4770      	bx	lr
   106e2:	46c0      	nop			; (mov r8, r8)
   106e4:	02020304 	.word	0x02020304
   106e8:	01010101 	.word	0x01010101
	...

000106f4 <__assert_func>:
   106f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   106f6:	001d      	movs	r5, r3
   106f8:	4b0a      	ldr	r3, [pc, #40]	; (10724 <__assert_func+0x30>)
   106fa:	0006      	movs	r6, r0
   106fc:	681b      	ldr	r3, [r3, #0]
   106fe:	68d8      	ldr	r0, [r3, #12]
   10700:	2a00      	cmp	r2, #0
   10702:	d102      	bne.n	1070a <__assert_func+0x16>
   10704:	4c08      	ldr	r4, [pc, #32]	; (10728 <__assert_func+0x34>)
   10706:	0023      	movs	r3, r4
   10708:	e001      	b.n	1070e <__assert_func+0x1a>
   1070a:	0013      	movs	r3, r2
   1070c:	4c07      	ldr	r4, [pc, #28]	; (1072c <__assert_func+0x38>)
   1070e:	9302      	str	r3, [sp, #8]
   10710:	9100      	str	r1, [sp, #0]
   10712:	0033      	movs	r3, r6
   10714:	002a      	movs	r2, r5
   10716:	4906      	ldr	r1, [pc, #24]	; (10730 <__assert_func+0x3c>)
   10718:	9401      	str	r4, [sp, #4]
   1071a:	f000 f811 	bl	10740 <fiprintf>
   1071e:	f000 fe79 	bl	11414 <abort>
   10722:	46c0      	nop			; (mov r8, r8)
   10724:	2000008c 	.word	0x2000008c
   10728:	000137df 	.word	0x000137df
   1072c:	000137a4 	.word	0x000137a4
   10730:	000137b1 	.word	0x000137b1

00010734 <atoi>:
   10734:	b510      	push	{r4, lr}
   10736:	220a      	movs	r2, #10
   10738:	2100      	movs	r1, #0
   1073a:	f000 fd91 	bl	11260 <strtol>
   1073e:	bd10      	pop	{r4, pc}

00010740 <fiprintf>:
   10740:	b40e      	push	{r1, r2, r3}
   10742:	b503      	push	{r0, r1, lr}
   10744:	0001      	movs	r1, r0
   10746:	ab03      	add	r3, sp, #12
   10748:	4804      	ldr	r0, [pc, #16]	; (1075c <fiprintf+0x1c>)
   1074a:	cb04      	ldmia	r3!, {r2}
   1074c:	6800      	ldr	r0, [r0, #0]
   1074e:	9301      	str	r3, [sp, #4]
   10750:	f000 f864 	bl	1081c <_vfiprintf_r>
   10754:	b002      	add	sp, #8
   10756:	bc08      	pop	{r3}
   10758:	b003      	add	sp, #12
   1075a:	4718      	bx	r3
   1075c:	2000008c 	.word	0x2000008c

00010760 <__libc_init_array>:
   10760:	4b0e      	ldr	r3, [pc, #56]	; (1079c <__libc_init_array+0x3c>)
   10762:	b570      	push	{r4, r5, r6, lr}
   10764:	2500      	movs	r5, #0
   10766:	001e      	movs	r6, r3
   10768:	4c0d      	ldr	r4, [pc, #52]	; (107a0 <__libc_init_array+0x40>)
   1076a:	1ae4      	subs	r4, r4, r3
   1076c:	10a4      	asrs	r4, r4, #2
   1076e:	42a5      	cmp	r5, r4
   10770:	d004      	beq.n	1077c <__libc_init_array+0x1c>
   10772:	00ab      	lsls	r3, r5, #2
   10774:	58f3      	ldr	r3, [r6, r3]
   10776:	4798      	blx	r3
   10778:	3501      	adds	r5, #1
   1077a:	e7f8      	b.n	1076e <__libc_init_array+0xe>
   1077c:	f003 f8fe 	bl	1397c <_init>
   10780:	4b08      	ldr	r3, [pc, #32]	; (107a4 <__libc_init_array+0x44>)
   10782:	2500      	movs	r5, #0
   10784:	001e      	movs	r6, r3
   10786:	4c08      	ldr	r4, [pc, #32]	; (107a8 <__libc_init_array+0x48>)
   10788:	1ae4      	subs	r4, r4, r3
   1078a:	10a4      	asrs	r4, r4, #2
   1078c:	42a5      	cmp	r5, r4
   1078e:	d004      	beq.n	1079a <__libc_init_array+0x3a>
   10790:	00ab      	lsls	r3, r5, #2
   10792:	58f3      	ldr	r3, [r6, r3]
   10794:	4798      	blx	r3
   10796:	3501      	adds	r5, #1
   10798:	e7f8      	b.n	1078c <__libc_init_array+0x2c>
   1079a:	bd70      	pop	{r4, r5, r6, pc}
   1079c:	00013988 	.word	0x00013988
   107a0:	00013988 	.word	0x00013988
   107a4:	00013988 	.word	0x00013988
   107a8:	0001398c 	.word	0x0001398c

000107ac <memcpy>:
   107ac:	2300      	movs	r3, #0
   107ae:	b510      	push	{r4, lr}
   107b0:	429a      	cmp	r2, r3
   107b2:	d003      	beq.n	107bc <memcpy+0x10>
   107b4:	5ccc      	ldrb	r4, [r1, r3]
   107b6:	54c4      	strb	r4, [r0, r3]
   107b8:	3301      	adds	r3, #1
   107ba:	e7f9      	b.n	107b0 <memcpy+0x4>
   107bc:	bd10      	pop	{r4, pc}

000107be <memset>:
   107be:	0003      	movs	r3, r0
   107c0:	1882      	adds	r2, r0, r2
   107c2:	4293      	cmp	r3, r2
   107c4:	d002      	beq.n	107cc <memset+0xe>
   107c6:	7019      	strb	r1, [r3, #0]
   107c8:	3301      	adds	r3, #1
   107ca:	e7fa      	b.n	107c2 <memset+0x4>
   107cc:	4770      	bx	lr

000107ce <__sfputc_r>:
   107ce:	6893      	ldr	r3, [r2, #8]
   107d0:	b510      	push	{r4, lr}
   107d2:	3b01      	subs	r3, #1
   107d4:	6093      	str	r3, [r2, #8]
   107d6:	2b00      	cmp	r3, #0
   107d8:	da05      	bge.n	107e6 <__sfputc_r+0x18>
   107da:	6994      	ldr	r4, [r2, #24]
   107dc:	42a3      	cmp	r3, r4
   107de:	db08      	blt.n	107f2 <__sfputc_r+0x24>
   107e0:	b2cb      	uxtb	r3, r1
   107e2:	2b0a      	cmp	r3, #10
   107e4:	d005      	beq.n	107f2 <__sfputc_r+0x24>
   107e6:	6813      	ldr	r3, [r2, #0]
   107e8:	1c58      	adds	r0, r3, #1
   107ea:	6010      	str	r0, [r2, #0]
   107ec:	7019      	strb	r1, [r3, #0]
   107ee:	b2c8      	uxtb	r0, r1
   107f0:	e001      	b.n	107f6 <__sfputc_r+0x28>
   107f2:	f000 fd41 	bl	11278 <__swbuf_r>
   107f6:	bd10      	pop	{r4, pc}

000107f8 <__sfputs_r>:
   107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107fa:	0006      	movs	r6, r0
   107fc:	000f      	movs	r7, r1
   107fe:	0014      	movs	r4, r2
   10800:	18d5      	adds	r5, r2, r3
   10802:	42ac      	cmp	r4, r5
   10804:	d008      	beq.n	10818 <__sfputs_r+0x20>
   10806:	7821      	ldrb	r1, [r4, #0]
   10808:	003a      	movs	r2, r7
   1080a:	0030      	movs	r0, r6
   1080c:	f7ff ffdf 	bl	107ce <__sfputc_r>
   10810:	3401      	adds	r4, #1
   10812:	1c43      	adds	r3, r0, #1
   10814:	d1f5      	bne.n	10802 <__sfputs_r+0xa>
   10816:	e000      	b.n	1081a <__sfputs_r+0x22>
   10818:	2000      	movs	r0, #0
   1081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001081c <_vfiprintf_r>:
   1081c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1081e:	b09f      	sub	sp, #124	; 0x7c
   10820:	0006      	movs	r6, r0
   10822:	000f      	movs	r7, r1
   10824:	9202      	str	r2, [sp, #8]
   10826:	9305      	str	r3, [sp, #20]
   10828:	2800      	cmp	r0, #0
   1082a:	d004      	beq.n	10836 <_vfiprintf_r+0x1a>
   1082c:	6983      	ldr	r3, [r0, #24]
   1082e:	2b00      	cmp	r3, #0
   10830:	d101      	bne.n	10836 <_vfiprintf_r+0x1a>
   10832:	f000 feeb 	bl	1160c <__sinit>
   10836:	4b7f      	ldr	r3, [pc, #508]	; (10a34 <_vfiprintf_r+0x218>)
   10838:	429f      	cmp	r7, r3
   1083a:	d101      	bne.n	10840 <_vfiprintf_r+0x24>
   1083c:	6877      	ldr	r7, [r6, #4]
   1083e:	e008      	b.n	10852 <_vfiprintf_r+0x36>
   10840:	4b7d      	ldr	r3, [pc, #500]	; (10a38 <_vfiprintf_r+0x21c>)
   10842:	429f      	cmp	r7, r3
   10844:	d101      	bne.n	1084a <_vfiprintf_r+0x2e>
   10846:	68b7      	ldr	r7, [r6, #8]
   10848:	e003      	b.n	10852 <_vfiprintf_r+0x36>
   1084a:	4b7c      	ldr	r3, [pc, #496]	; (10a3c <_vfiprintf_r+0x220>)
   1084c:	429f      	cmp	r7, r3
   1084e:	d100      	bne.n	10852 <_vfiprintf_r+0x36>
   10850:	68f7      	ldr	r7, [r6, #12]
   10852:	89bb      	ldrh	r3, [r7, #12]
   10854:	071b      	lsls	r3, r3, #28
   10856:	d50a      	bpl.n	1086e <_vfiprintf_r+0x52>
   10858:	693b      	ldr	r3, [r7, #16]
   1085a:	2b00      	cmp	r3, #0
   1085c:	d007      	beq.n	1086e <_vfiprintf_r+0x52>
   1085e:	2300      	movs	r3, #0
   10860:	ad06      	add	r5, sp, #24
   10862:	616b      	str	r3, [r5, #20]
   10864:	3320      	adds	r3, #32
   10866:	766b      	strb	r3, [r5, #25]
   10868:	3310      	adds	r3, #16
   1086a:	76ab      	strb	r3, [r5, #26]
   1086c:	e03d      	b.n	108ea <_vfiprintf_r+0xce>
   1086e:	0039      	movs	r1, r7
   10870:	0030      	movs	r0, r6
   10872:	f000 fd59 	bl	11328 <__swsetup_r>
   10876:	2800      	cmp	r0, #0
   10878:	d0f1      	beq.n	1085e <_vfiprintf_r+0x42>
   1087a:	2001      	movs	r0, #1
   1087c:	4240      	negs	r0, r0
   1087e:	e0d6      	b.n	10a2e <_vfiprintf_r+0x212>
   10880:	9a05      	ldr	r2, [sp, #20]
   10882:	1d11      	adds	r1, r2, #4
   10884:	6812      	ldr	r2, [r2, #0]
   10886:	9105      	str	r1, [sp, #20]
   10888:	2a00      	cmp	r2, #0
   1088a:	da00      	bge.n	1088e <_vfiprintf_r+0x72>
   1088c:	e07f      	b.n	1098e <_vfiprintf_r+0x172>
   1088e:	9209      	str	r2, [sp, #36]	; 0x24
   10890:	3401      	adds	r4, #1
   10892:	7823      	ldrb	r3, [r4, #0]
   10894:	2b2e      	cmp	r3, #46	; 0x2e
   10896:	d100      	bne.n	1089a <_vfiprintf_r+0x7e>
   10898:	e08d      	b.n	109b6 <_vfiprintf_r+0x19a>
   1089a:	7821      	ldrb	r1, [r4, #0]
   1089c:	2203      	movs	r2, #3
   1089e:	4868      	ldr	r0, [pc, #416]	; (10a40 <_vfiprintf_r+0x224>)
   108a0:	f000 ffb6 	bl	11810 <memchr>
   108a4:	2800      	cmp	r0, #0
   108a6:	d007      	beq.n	108b8 <_vfiprintf_r+0x9c>
   108a8:	4b65      	ldr	r3, [pc, #404]	; (10a40 <_vfiprintf_r+0x224>)
   108aa:	682a      	ldr	r2, [r5, #0]
   108ac:	1ac0      	subs	r0, r0, r3
   108ae:	2340      	movs	r3, #64	; 0x40
   108b0:	4083      	lsls	r3, r0
   108b2:	4313      	orrs	r3, r2
   108b4:	602b      	str	r3, [r5, #0]
   108b6:	3401      	adds	r4, #1
   108b8:	7821      	ldrb	r1, [r4, #0]
   108ba:	1c63      	adds	r3, r4, #1
   108bc:	2206      	movs	r2, #6
   108be:	4861      	ldr	r0, [pc, #388]	; (10a44 <_vfiprintf_r+0x228>)
   108c0:	9302      	str	r3, [sp, #8]
   108c2:	7629      	strb	r1, [r5, #24]
   108c4:	f000 ffa4 	bl	11810 <memchr>
   108c8:	2800      	cmp	r0, #0
   108ca:	d100      	bne.n	108ce <_vfiprintf_r+0xb2>
   108cc:	e09d      	b.n	10a0a <_vfiprintf_r+0x1ee>
   108ce:	4b5e      	ldr	r3, [pc, #376]	; (10a48 <_vfiprintf_r+0x22c>)
   108d0:	2b00      	cmp	r3, #0
   108d2:	d000      	beq.n	108d6 <_vfiprintf_r+0xba>
   108d4:	e090      	b.n	109f8 <_vfiprintf_r+0x1dc>
   108d6:	2207      	movs	r2, #7
   108d8:	9b05      	ldr	r3, [sp, #20]
   108da:	3307      	adds	r3, #7
   108dc:	4393      	bics	r3, r2
   108de:	3308      	adds	r3, #8
   108e0:	9305      	str	r3, [sp, #20]
   108e2:	696b      	ldr	r3, [r5, #20]
   108e4:	9a03      	ldr	r2, [sp, #12]
   108e6:	189b      	adds	r3, r3, r2
   108e8:	616b      	str	r3, [r5, #20]
   108ea:	9c02      	ldr	r4, [sp, #8]
   108ec:	7823      	ldrb	r3, [r4, #0]
   108ee:	2b00      	cmp	r3, #0
   108f0:	d104      	bne.n	108fc <_vfiprintf_r+0xe0>
   108f2:	9b02      	ldr	r3, [sp, #8]
   108f4:	1ae3      	subs	r3, r4, r3
   108f6:	9304      	str	r3, [sp, #16]
   108f8:	d012      	beq.n	10920 <_vfiprintf_r+0x104>
   108fa:	e003      	b.n	10904 <_vfiprintf_r+0xe8>
   108fc:	2b25      	cmp	r3, #37	; 0x25
   108fe:	d0f8      	beq.n	108f2 <_vfiprintf_r+0xd6>
   10900:	3401      	adds	r4, #1
   10902:	e7f3      	b.n	108ec <_vfiprintf_r+0xd0>
   10904:	9b04      	ldr	r3, [sp, #16]
   10906:	9a02      	ldr	r2, [sp, #8]
   10908:	0039      	movs	r1, r7
   1090a:	0030      	movs	r0, r6
   1090c:	f7ff ff74 	bl	107f8 <__sfputs_r>
   10910:	1c43      	adds	r3, r0, #1
   10912:	d100      	bne.n	10916 <_vfiprintf_r+0xfa>
   10914:	e086      	b.n	10a24 <_vfiprintf_r+0x208>
   10916:	696a      	ldr	r2, [r5, #20]
   10918:	9b04      	ldr	r3, [sp, #16]
   1091a:	4694      	mov	ip, r2
   1091c:	4463      	add	r3, ip
   1091e:	616b      	str	r3, [r5, #20]
   10920:	7823      	ldrb	r3, [r4, #0]
   10922:	2b00      	cmp	r3, #0
   10924:	d07e      	beq.n	10a24 <_vfiprintf_r+0x208>
   10926:	2201      	movs	r2, #1
   10928:	2300      	movs	r3, #0
   1092a:	4252      	negs	r2, r2
   1092c:	606a      	str	r2, [r5, #4]
   1092e:	a902      	add	r1, sp, #8
   10930:	3254      	adds	r2, #84	; 0x54
   10932:	1852      	adds	r2, r2, r1
   10934:	3401      	adds	r4, #1
   10936:	602b      	str	r3, [r5, #0]
   10938:	60eb      	str	r3, [r5, #12]
   1093a:	60ab      	str	r3, [r5, #8]
   1093c:	7013      	strb	r3, [r2, #0]
   1093e:	65ab      	str	r3, [r5, #88]	; 0x58
   10940:	7821      	ldrb	r1, [r4, #0]
   10942:	2205      	movs	r2, #5
   10944:	4841      	ldr	r0, [pc, #260]	; (10a4c <_vfiprintf_r+0x230>)
   10946:	f000 ff63 	bl	11810 <memchr>
   1094a:	2800      	cmp	r0, #0
   1094c:	d008      	beq.n	10960 <_vfiprintf_r+0x144>
   1094e:	4b3f      	ldr	r3, [pc, #252]	; (10a4c <_vfiprintf_r+0x230>)
   10950:	682a      	ldr	r2, [r5, #0]
   10952:	1ac0      	subs	r0, r0, r3
   10954:	2301      	movs	r3, #1
   10956:	4083      	lsls	r3, r0
   10958:	4313      	orrs	r3, r2
   1095a:	602b      	str	r3, [r5, #0]
   1095c:	3401      	adds	r4, #1
   1095e:	e7ef      	b.n	10940 <_vfiprintf_r+0x124>
   10960:	682b      	ldr	r3, [r5, #0]
   10962:	06da      	lsls	r2, r3, #27
   10964:	d504      	bpl.n	10970 <_vfiprintf_r+0x154>
   10966:	2253      	movs	r2, #83	; 0x53
   10968:	2120      	movs	r1, #32
   1096a:	a802      	add	r0, sp, #8
   1096c:	1812      	adds	r2, r2, r0
   1096e:	7011      	strb	r1, [r2, #0]
   10970:	071a      	lsls	r2, r3, #28
   10972:	d504      	bpl.n	1097e <_vfiprintf_r+0x162>
   10974:	2253      	movs	r2, #83	; 0x53
   10976:	212b      	movs	r1, #43	; 0x2b
   10978:	a802      	add	r0, sp, #8
   1097a:	1812      	adds	r2, r2, r0
   1097c:	7011      	strb	r1, [r2, #0]
   1097e:	7822      	ldrb	r2, [r4, #0]
   10980:	2a2a      	cmp	r2, #42	; 0x2a
   10982:	d100      	bne.n	10986 <_vfiprintf_r+0x16a>
   10984:	e77c      	b.n	10880 <_vfiprintf_r+0x64>
   10986:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10988:	2000      	movs	r0, #0
   1098a:	210a      	movs	r1, #10
   1098c:	e005      	b.n	1099a <_vfiprintf_r+0x17e>
   1098e:	4252      	negs	r2, r2
   10990:	60ea      	str	r2, [r5, #12]
   10992:	2202      	movs	r2, #2
   10994:	4313      	orrs	r3, r2
   10996:	602b      	str	r3, [r5, #0]
   10998:	e77a      	b.n	10890 <_vfiprintf_r+0x74>
   1099a:	7822      	ldrb	r2, [r4, #0]
   1099c:	3a30      	subs	r2, #48	; 0x30
   1099e:	2a09      	cmp	r2, #9
   109a0:	d804      	bhi.n	109ac <_vfiprintf_r+0x190>
   109a2:	434b      	muls	r3, r1
   109a4:	3401      	adds	r4, #1
   109a6:	189b      	adds	r3, r3, r2
   109a8:	2001      	movs	r0, #1
   109aa:	e7f6      	b.n	1099a <_vfiprintf_r+0x17e>
   109ac:	2800      	cmp	r0, #0
   109ae:	d100      	bne.n	109b2 <_vfiprintf_r+0x196>
   109b0:	e76f      	b.n	10892 <_vfiprintf_r+0x76>
   109b2:	9309      	str	r3, [sp, #36]	; 0x24
   109b4:	e76d      	b.n	10892 <_vfiprintf_r+0x76>
   109b6:	7863      	ldrb	r3, [r4, #1]
   109b8:	2b2a      	cmp	r3, #42	; 0x2a
   109ba:	d10a      	bne.n	109d2 <_vfiprintf_r+0x1b6>
   109bc:	9b05      	ldr	r3, [sp, #20]
   109be:	3402      	adds	r4, #2
   109c0:	1d1a      	adds	r2, r3, #4
   109c2:	681b      	ldr	r3, [r3, #0]
   109c4:	9205      	str	r2, [sp, #20]
   109c6:	2b00      	cmp	r3, #0
   109c8:	da01      	bge.n	109ce <_vfiprintf_r+0x1b2>
   109ca:	2301      	movs	r3, #1
   109cc:	425b      	negs	r3, r3
   109ce:	9307      	str	r3, [sp, #28]
   109d0:	e763      	b.n	1089a <_vfiprintf_r+0x7e>
   109d2:	2300      	movs	r3, #0
   109d4:	200a      	movs	r0, #10
   109d6:	001a      	movs	r2, r3
   109d8:	3401      	adds	r4, #1
   109da:	606b      	str	r3, [r5, #4]
   109dc:	7821      	ldrb	r1, [r4, #0]
   109de:	3930      	subs	r1, #48	; 0x30
   109e0:	2909      	cmp	r1, #9
   109e2:	d804      	bhi.n	109ee <_vfiprintf_r+0x1d2>
   109e4:	4342      	muls	r2, r0
   109e6:	3401      	adds	r4, #1
   109e8:	1852      	adds	r2, r2, r1
   109ea:	2301      	movs	r3, #1
   109ec:	e7f6      	b.n	109dc <_vfiprintf_r+0x1c0>
   109ee:	2b00      	cmp	r3, #0
   109f0:	d100      	bne.n	109f4 <_vfiprintf_r+0x1d8>
   109f2:	e752      	b.n	1089a <_vfiprintf_r+0x7e>
   109f4:	9207      	str	r2, [sp, #28]
   109f6:	e750      	b.n	1089a <_vfiprintf_r+0x7e>
   109f8:	ab05      	add	r3, sp, #20
   109fa:	9300      	str	r3, [sp, #0]
   109fc:	003a      	movs	r2, r7
   109fe:	4b14      	ldr	r3, [pc, #80]	; (10a50 <_vfiprintf_r+0x234>)
   10a00:	0029      	movs	r1, r5
   10a02:	0030      	movs	r0, r6
   10a04:	e000      	b.n	10a08 <_vfiprintf_r+0x1ec>
   10a06:	bf00      	nop
   10a08:	e007      	b.n	10a1a <_vfiprintf_r+0x1fe>
   10a0a:	ab05      	add	r3, sp, #20
   10a0c:	9300      	str	r3, [sp, #0]
   10a0e:	003a      	movs	r2, r7
   10a10:	4b0f      	ldr	r3, [pc, #60]	; (10a50 <_vfiprintf_r+0x234>)
   10a12:	0029      	movs	r1, r5
   10a14:	0030      	movs	r0, r6
   10a16:	f000 f88b 	bl	10b30 <_printf_i>
   10a1a:	9003      	str	r0, [sp, #12]
   10a1c:	9b03      	ldr	r3, [sp, #12]
   10a1e:	3301      	adds	r3, #1
   10a20:	d000      	beq.n	10a24 <_vfiprintf_r+0x208>
   10a22:	e75e      	b.n	108e2 <_vfiprintf_r+0xc6>
   10a24:	89bb      	ldrh	r3, [r7, #12]
   10a26:	065b      	lsls	r3, r3, #25
   10a28:	d500      	bpl.n	10a2c <_vfiprintf_r+0x210>
   10a2a:	e726      	b.n	1087a <_vfiprintf_r+0x5e>
   10a2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a2e:	b01f      	add	sp, #124	; 0x7c
   10a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a32:	46c0      	nop			; (mov r8, r8)
   10a34:	0001391c 	.word	0x0001391c
   10a38:	0001393c 	.word	0x0001393c
   10a3c:	0001395c 	.word	0x0001395c
   10a40:	000137ee 	.word	0x000137ee
   10a44:	000137f2 	.word	0x000137f2
   10a48:	00000000 	.word	0x00000000
   10a4c:	000137e8 	.word	0x000137e8
   10a50:	000107f9 	.word	0x000107f9

00010a54 <_printf_common>:
   10a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10a56:	0017      	movs	r7, r2
   10a58:	9301      	str	r3, [sp, #4]
   10a5a:	688a      	ldr	r2, [r1, #8]
   10a5c:	690b      	ldr	r3, [r1, #16]
   10a5e:	9000      	str	r0, [sp, #0]
   10a60:	000c      	movs	r4, r1
   10a62:	4293      	cmp	r3, r2
   10a64:	da00      	bge.n	10a68 <_printf_common+0x14>
   10a66:	0013      	movs	r3, r2
   10a68:	0022      	movs	r2, r4
   10a6a:	603b      	str	r3, [r7, #0]
   10a6c:	3243      	adds	r2, #67	; 0x43
   10a6e:	7812      	ldrb	r2, [r2, #0]
   10a70:	2a00      	cmp	r2, #0
   10a72:	d001      	beq.n	10a78 <_printf_common+0x24>
   10a74:	3301      	adds	r3, #1
   10a76:	603b      	str	r3, [r7, #0]
   10a78:	6823      	ldr	r3, [r4, #0]
   10a7a:	069b      	lsls	r3, r3, #26
   10a7c:	d502      	bpl.n	10a84 <_printf_common+0x30>
   10a7e:	683b      	ldr	r3, [r7, #0]
   10a80:	3302      	adds	r3, #2
   10a82:	603b      	str	r3, [r7, #0]
   10a84:	2506      	movs	r5, #6
   10a86:	6823      	ldr	r3, [r4, #0]
   10a88:	401d      	ands	r5, r3
   10a8a:	d01e      	beq.n	10aca <_printf_common+0x76>
   10a8c:	0023      	movs	r3, r4
   10a8e:	3343      	adds	r3, #67	; 0x43
   10a90:	781b      	ldrb	r3, [r3, #0]
   10a92:	1e5a      	subs	r2, r3, #1
   10a94:	4193      	sbcs	r3, r2
   10a96:	6822      	ldr	r2, [r4, #0]
   10a98:	0692      	lsls	r2, r2, #26
   10a9a:	d51c      	bpl.n	10ad6 <_printf_common+0x82>
   10a9c:	2030      	movs	r0, #48	; 0x30
   10a9e:	18e1      	adds	r1, r4, r3
   10aa0:	3143      	adds	r1, #67	; 0x43
   10aa2:	7008      	strb	r0, [r1, #0]
   10aa4:	0021      	movs	r1, r4
   10aa6:	1c5a      	adds	r2, r3, #1
   10aa8:	3145      	adds	r1, #69	; 0x45
   10aaa:	7809      	ldrb	r1, [r1, #0]
   10aac:	18a2      	adds	r2, r4, r2
   10aae:	3243      	adds	r2, #67	; 0x43
   10ab0:	3302      	adds	r3, #2
   10ab2:	7011      	strb	r1, [r2, #0]
   10ab4:	e00f      	b.n	10ad6 <_printf_common+0x82>
   10ab6:	0022      	movs	r2, r4
   10ab8:	2301      	movs	r3, #1
   10aba:	3219      	adds	r2, #25
   10abc:	9901      	ldr	r1, [sp, #4]
   10abe:	9800      	ldr	r0, [sp, #0]
   10ac0:	9e08      	ldr	r6, [sp, #32]
   10ac2:	47b0      	blx	r6
   10ac4:	1c43      	adds	r3, r0, #1
   10ac6:	d00e      	beq.n	10ae6 <_printf_common+0x92>
   10ac8:	3501      	adds	r5, #1
   10aca:	68e3      	ldr	r3, [r4, #12]
   10acc:	683a      	ldr	r2, [r7, #0]
   10ace:	1a9b      	subs	r3, r3, r2
   10ad0:	429d      	cmp	r5, r3
   10ad2:	dbf0      	blt.n	10ab6 <_printf_common+0x62>
   10ad4:	e7da      	b.n	10a8c <_printf_common+0x38>
   10ad6:	0022      	movs	r2, r4
   10ad8:	9901      	ldr	r1, [sp, #4]
   10ada:	3243      	adds	r2, #67	; 0x43
   10adc:	9800      	ldr	r0, [sp, #0]
   10ade:	9d08      	ldr	r5, [sp, #32]
   10ae0:	47a8      	blx	r5
   10ae2:	1c43      	adds	r3, r0, #1
   10ae4:	d102      	bne.n	10aec <_printf_common+0x98>
   10ae6:	2001      	movs	r0, #1
   10ae8:	4240      	negs	r0, r0
   10aea:	e020      	b.n	10b2e <_printf_common+0xda>
   10aec:	2306      	movs	r3, #6
   10aee:	6820      	ldr	r0, [r4, #0]
   10af0:	68e1      	ldr	r1, [r4, #12]
   10af2:	683a      	ldr	r2, [r7, #0]
   10af4:	4003      	ands	r3, r0
   10af6:	2500      	movs	r5, #0
   10af8:	2b04      	cmp	r3, #4
   10afa:	d103      	bne.n	10b04 <_printf_common+0xb0>
   10afc:	1a8d      	subs	r5, r1, r2
   10afe:	43eb      	mvns	r3, r5
   10b00:	17db      	asrs	r3, r3, #31
   10b02:	401d      	ands	r5, r3
   10b04:	68a3      	ldr	r3, [r4, #8]
   10b06:	6922      	ldr	r2, [r4, #16]
   10b08:	4293      	cmp	r3, r2
   10b0a:	dd01      	ble.n	10b10 <_printf_common+0xbc>
   10b0c:	1a9b      	subs	r3, r3, r2
   10b0e:	18ed      	adds	r5, r5, r3
   10b10:	2700      	movs	r7, #0
   10b12:	42bd      	cmp	r5, r7
   10b14:	d00a      	beq.n	10b2c <_printf_common+0xd8>
   10b16:	0022      	movs	r2, r4
   10b18:	2301      	movs	r3, #1
   10b1a:	321a      	adds	r2, #26
   10b1c:	9901      	ldr	r1, [sp, #4]
   10b1e:	9800      	ldr	r0, [sp, #0]
   10b20:	9e08      	ldr	r6, [sp, #32]
   10b22:	47b0      	blx	r6
   10b24:	1c43      	adds	r3, r0, #1
   10b26:	d0de      	beq.n	10ae6 <_printf_common+0x92>
   10b28:	3701      	adds	r7, #1
   10b2a:	e7f2      	b.n	10b12 <_printf_common+0xbe>
   10b2c:	2000      	movs	r0, #0
   10b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00010b30 <_printf_i>:
   10b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b32:	b08b      	sub	sp, #44	; 0x2c
   10b34:	9206      	str	r2, [sp, #24]
   10b36:	000a      	movs	r2, r1
   10b38:	3243      	adds	r2, #67	; 0x43
   10b3a:	9307      	str	r3, [sp, #28]
   10b3c:	9005      	str	r0, [sp, #20]
   10b3e:	9204      	str	r2, [sp, #16]
   10b40:	7e0a      	ldrb	r2, [r1, #24]
   10b42:	000c      	movs	r4, r1
   10b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10b46:	2a6e      	cmp	r2, #110	; 0x6e
   10b48:	d100      	bne.n	10b4c <_printf_i+0x1c>
   10b4a:	e0ab      	b.n	10ca4 <_printf_i+0x174>
   10b4c:	d811      	bhi.n	10b72 <_printf_i+0x42>
   10b4e:	2a63      	cmp	r2, #99	; 0x63
   10b50:	d022      	beq.n	10b98 <_printf_i+0x68>
   10b52:	d809      	bhi.n	10b68 <_printf_i+0x38>
   10b54:	2a00      	cmp	r2, #0
   10b56:	d100      	bne.n	10b5a <_printf_i+0x2a>
   10b58:	e0b5      	b.n	10cc6 <_printf_i+0x196>
   10b5a:	2a58      	cmp	r2, #88	; 0x58
   10b5c:	d000      	beq.n	10b60 <_printf_i+0x30>
   10b5e:	e0c5      	b.n	10cec <_printf_i+0x1bc>
   10b60:	3145      	adds	r1, #69	; 0x45
   10b62:	700a      	strb	r2, [r1, #0]
   10b64:	4a81      	ldr	r2, [pc, #516]	; (10d6c <_printf_i+0x23c>)
   10b66:	e04f      	b.n	10c08 <_printf_i+0xd8>
   10b68:	2a64      	cmp	r2, #100	; 0x64
   10b6a:	d01d      	beq.n	10ba8 <_printf_i+0x78>
   10b6c:	2a69      	cmp	r2, #105	; 0x69
   10b6e:	d01b      	beq.n	10ba8 <_printf_i+0x78>
   10b70:	e0bc      	b.n	10cec <_printf_i+0x1bc>
   10b72:	2a73      	cmp	r2, #115	; 0x73
   10b74:	d100      	bne.n	10b78 <_printf_i+0x48>
   10b76:	e0aa      	b.n	10cce <_printf_i+0x19e>
   10b78:	d809      	bhi.n	10b8e <_printf_i+0x5e>
   10b7a:	2a6f      	cmp	r2, #111	; 0x6f
   10b7c:	d029      	beq.n	10bd2 <_printf_i+0xa2>
   10b7e:	2a70      	cmp	r2, #112	; 0x70
   10b80:	d000      	beq.n	10b84 <_printf_i+0x54>
   10b82:	e0b3      	b.n	10cec <_printf_i+0x1bc>
   10b84:	2220      	movs	r2, #32
   10b86:	6809      	ldr	r1, [r1, #0]
   10b88:	430a      	orrs	r2, r1
   10b8a:	6022      	str	r2, [r4, #0]
   10b8c:	e037      	b.n	10bfe <_printf_i+0xce>
   10b8e:	2a75      	cmp	r2, #117	; 0x75
   10b90:	d01f      	beq.n	10bd2 <_printf_i+0xa2>
   10b92:	2a78      	cmp	r2, #120	; 0x78
   10b94:	d033      	beq.n	10bfe <_printf_i+0xce>
   10b96:	e0a9      	b.n	10cec <_printf_i+0x1bc>
   10b98:	000e      	movs	r6, r1
   10b9a:	681a      	ldr	r2, [r3, #0]
   10b9c:	3642      	adds	r6, #66	; 0x42
   10b9e:	1d11      	adds	r1, r2, #4
   10ba0:	6019      	str	r1, [r3, #0]
   10ba2:	6813      	ldr	r3, [r2, #0]
   10ba4:	7033      	strb	r3, [r6, #0]
   10ba6:	e0a4      	b.n	10cf2 <_printf_i+0x1c2>
   10ba8:	6821      	ldr	r1, [r4, #0]
   10baa:	681a      	ldr	r2, [r3, #0]
   10bac:	0608      	lsls	r0, r1, #24
   10bae:	d406      	bmi.n	10bbe <_printf_i+0x8e>
   10bb0:	0649      	lsls	r1, r1, #25
   10bb2:	d504      	bpl.n	10bbe <_printf_i+0x8e>
   10bb4:	1d11      	adds	r1, r2, #4
   10bb6:	6019      	str	r1, [r3, #0]
   10bb8:	2300      	movs	r3, #0
   10bba:	5ed5      	ldrsh	r5, [r2, r3]
   10bbc:	e002      	b.n	10bc4 <_printf_i+0x94>
   10bbe:	1d11      	adds	r1, r2, #4
   10bc0:	6019      	str	r1, [r3, #0]
   10bc2:	6815      	ldr	r5, [r2, #0]
   10bc4:	2d00      	cmp	r5, #0
   10bc6:	da3b      	bge.n	10c40 <_printf_i+0x110>
   10bc8:	232d      	movs	r3, #45	; 0x2d
   10bca:	9a04      	ldr	r2, [sp, #16]
   10bcc:	426d      	negs	r5, r5
   10bce:	7013      	strb	r3, [r2, #0]
   10bd0:	e036      	b.n	10c40 <_printf_i+0x110>
   10bd2:	6821      	ldr	r1, [r4, #0]
   10bd4:	681a      	ldr	r2, [r3, #0]
   10bd6:	0608      	lsls	r0, r1, #24
   10bd8:	d406      	bmi.n	10be8 <_printf_i+0xb8>
   10bda:	0649      	lsls	r1, r1, #25
   10bdc:	d504      	bpl.n	10be8 <_printf_i+0xb8>
   10bde:	6815      	ldr	r5, [r2, #0]
   10be0:	1d11      	adds	r1, r2, #4
   10be2:	6019      	str	r1, [r3, #0]
   10be4:	b2ad      	uxth	r5, r5
   10be6:	e002      	b.n	10bee <_printf_i+0xbe>
   10be8:	1d11      	adds	r1, r2, #4
   10bea:	6019      	str	r1, [r3, #0]
   10bec:	6815      	ldr	r5, [r2, #0]
   10bee:	4b5f      	ldr	r3, [pc, #380]	; (10d6c <_printf_i+0x23c>)
   10bf0:	7e22      	ldrb	r2, [r4, #24]
   10bf2:	9303      	str	r3, [sp, #12]
   10bf4:	2708      	movs	r7, #8
   10bf6:	2a6f      	cmp	r2, #111	; 0x6f
   10bf8:	d01d      	beq.n	10c36 <_printf_i+0x106>
   10bfa:	270a      	movs	r7, #10
   10bfc:	e01b      	b.n	10c36 <_printf_i+0x106>
   10bfe:	0022      	movs	r2, r4
   10c00:	2178      	movs	r1, #120	; 0x78
   10c02:	3245      	adds	r2, #69	; 0x45
   10c04:	7011      	strb	r1, [r2, #0]
   10c06:	4a5a      	ldr	r2, [pc, #360]	; (10d70 <_printf_i+0x240>)
   10c08:	6819      	ldr	r1, [r3, #0]
   10c0a:	9203      	str	r2, [sp, #12]
   10c0c:	1d08      	adds	r0, r1, #4
   10c0e:	6822      	ldr	r2, [r4, #0]
   10c10:	6018      	str	r0, [r3, #0]
   10c12:	680d      	ldr	r5, [r1, #0]
   10c14:	0610      	lsls	r0, r2, #24
   10c16:	d402      	bmi.n	10c1e <_printf_i+0xee>
   10c18:	0650      	lsls	r0, r2, #25
   10c1a:	d500      	bpl.n	10c1e <_printf_i+0xee>
   10c1c:	b2ad      	uxth	r5, r5
   10c1e:	07d3      	lsls	r3, r2, #31
   10c20:	d502      	bpl.n	10c28 <_printf_i+0xf8>
   10c22:	2320      	movs	r3, #32
   10c24:	431a      	orrs	r2, r3
   10c26:	6022      	str	r2, [r4, #0]
   10c28:	2710      	movs	r7, #16
   10c2a:	2d00      	cmp	r5, #0
   10c2c:	d103      	bne.n	10c36 <_printf_i+0x106>
   10c2e:	2320      	movs	r3, #32
   10c30:	6822      	ldr	r2, [r4, #0]
   10c32:	439a      	bics	r2, r3
   10c34:	6022      	str	r2, [r4, #0]
   10c36:	0023      	movs	r3, r4
   10c38:	2200      	movs	r2, #0
   10c3a:	3343      	adds	r3, #67	; 0x43
   10c3c:	701a      	strb	r2, [r3, #0]
   10c3e:	e002      	b.n	10c46 <_printf_i+0x116>
   10c40:	270a      	movs	r7, #10
   10c42:	4b4a      	ldr	r3, [pc, #296]	; (10d6c <_printf_i+0x23c>)
   10c44:	9303      	str	r3, [sp, #12]
   10c46:	6863      	ldr	r3, [r4, #4]
   10c48:	60a3      	str	r3, [r4, #8]
   10c4a:	2b00      	cmp	r3, #0
   10c4c:	db09      	blt.n	10c62 <_printf_i+0x132>
   10c4e:	2204      	movs	r2, #4
   10c50:	6821      	ldr	r1, [r4, #0]
   10c52:	4391      	bics	r1, r2
   10c54:	6021      	str	r1, [r4, #0]
   10c56:	2d00      	cmp	r5, #0
   10c58:	d105      	bne.n	10c66 <_printf_i+0x136>
   10c5a:	9e04      	ldr	r6, [sp, #16]
   10c5c:	2b00      	cmp	r3, #0
   10c5e:	d011      	beq.n	10c84 <_printf_i+0x154>
   10c60:	e07b      	b.n	10d5a <_printf_i+0x22a>
   10c62:	2d00      	cmp	r5, #0
   10c64:	d079      	beq.n	10d5a <_printf_i+0x22a>
   10c66:	9e04      	ldr	r6, [sp, #16]
   10c68:	0028      	movs	r0, r5
   10c6a:	0039      	movs	r1, r7
   10c6c:	f7fd ff48 	bl	eb00 <__aeabi_uidivmod>
   10c70:	9b03      	ldr	r3, [sp, #12]
   10c72:	3e01      	subs	r6, #1
   10c74:	5c5b      	ldrb	r3, [r3, r1]
   10c76:	0028      	movs	r0, r5
   10c78:	7033      	strb	r3, [r6, #0]
   10c7a:	0039      	movs	r1, r7
   10c7c:	f7fd feba 	bl	e9f4 <__aeabi_uidiv>
   10c80:	1e05      	subs	r5, r0, #0
   10c82:	d1f1      	bne.n	10c68 <_printf_i+0x138>
   10c84:	2f08      	cmp	r7, #8
   10c86:	d109      	bne.n	10c9c <_printf_i+0x16c>
   10c88:	6823      	ldr	r3, [r4, #0]
   10c8a:	07db      	lsls	r3, r3, #31
   10c8c:	d506      	bpl.n	10c9c <_printf_i+0x16c>
   10c8e:	6863      	ldr	r3, [r4, #4]
   10c90:	6922      	ldr	r2, [r4, #16]
   10c92:	4293      	cmp	r3, r2
   10c94:	dc02      	bgt.n	10c9c <_printf_i+0x16c>
   10c96:	2330      	movs	r3, #48	; 0x30
   10c98:	3e01      	subs	r6, #1
   10c9a:	7033      	strb	r3, [r6, #0]
   10c9c:	9b04      	ldr	r3, [sp, #16]
   10c9e:	1b9b      	subs	r3, r3, r6
   10ca0:	6123      	str	r3, [r4, #16]
   10ca2:	e02b      	b.n	10cfc <_printf_i+0x1cc>
   10ca4:	6809      	ldr	r1, [r1, #0]
   10ca6:	681a      	ldr	r2, [r3, #0]
   10ca8:	0608      	lsls	r0, r1, #24
   10caa:	d407      	bmi.n	10cbc <_printf_i+0x18c>
   10cac:	0649      	lsls	r1, r1, #25
   10cae:	d505      	bpl.n	10cbc <_printf_i+0x18c>
   10cb0:	1d11      	adds	r1, r2, #4
   10cb2:	6019      	str	r1, [r3, #0]
   10cb4:	6813      	ldr	r3, [r2, #0]
   10cb6:	8aa2      	ldrh	r2, [r4, #20]
   10cb8:	801a      	strh	r2, [r3, #0]
   10cba:	e004      	b.n	10cc6 <_printf_i+0x196>
   10cbc:	1d11      	adds	r1, r2, #4
   10cbe:	6019      	str	r1, [r3, #0]
   10cc0:	6813      	ldr	r3, [r2, #0]
   10cc2:	6962      	ldr	r2, [r4, #20]
   10cc4:	601a      	str	r2, [r3, #0]
   10cc6:	2300      	movs	r3, #0
   10cc8:	9e04      	ldr	r6, [sp, #16]
   10cca:	6123      	str	r3, [r4, #16]
   10ccc:	e016      	b.n	10cfc <_printf_i+0x1cc>
   10cce:	681a      	ldr	r2, [r3, #0]
   10cd0:	1d11      	adds	r1, r2, #4
   10cd2:	6019      	str	r1, [r3, #0]
   10cd4:	6816      	ldr	r6, [r2, #0]
   10cd6:	2100      	movs	r1, #0
   10cd8:	6862      	ldr	r2, [r4, #4]
   10cda:	0030      	movs	r0, r6
   10cdc:	f000 fd98 	bl	11810 <memchr>
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d001      	beq.n	10ce8 <_printf_i+0x1b8>
   10ce4:	1b80      	subs	r0, r0, r6
   10ce6:	6060      	str	r0, [r4, #4]
   10ce8:	6863      	ldr	r3, [r4, #4]
   10cea:	e003      	b.n	10cf4 <_printf_i+0x1c4>
   10cec:	0026      	movs	r6, r4
   10cee:	3642      	adds	r6, #66	; 0x42
   10cf0:	7032      	strb	r2, [r6, #0]
   10cf2:	2301      	movs	r3, #1
   10cf4:	6123      	str	r3, [r4, #16]
   10cf6:	2300      	movs	r3, #0
   10cf8:	9a04      	ldr	r2, [sp, #16]
   10cfa:	7013      	strb	r3, [r2, #0]
   10cfc:	9b07      	ldr	r3, [sp, #28]
   10cfe:	aa09      	add	r2, sp, #36	; 0x24
   10d00:	9300      	str	r3, [sp, #0]
   10d02:	0021      	movs	r1, r4
   10d04:	9b06      	ldr	r3, [sp, #24]
   10d06:	9805      	ldr	r0, [sp, #20]
   10d08:	f7ff fea4 	bl	10a54 <_printf_common>
   10d0c:	1c43      	adds	r3, r0, #1
   10d0e:	d102      	bne.n	10d16 <_printf_i+0x1e6>
   10d10:	2001      	movs	r0, #1
   10d12:	4240      	negs	r0, r0
   10d14:	e027      	b.n	10d66 <_printf_i+0x236>
   10d16:	6923      	ldr	r3, [r4, #16]
   10d18:	0032      	movs	r2, r6
   10d1a:	9906      	ldr	r1, [sp, #24]
   10d1c:	9805      	ldr	r0, [sp, #20]
   10d1e:	9d07      	ldr	r5, [sp, #28]
   10d20:	47a8      	blx	r5
   10d22:	1c43      	adds	r3, r0, #1
   10d24:	d0f4      	beq.n	10d10 <_printf_i+0x1e0>
   10d26:	6823      	ldr	r3, [r4, #0]
   10d28:	2500      	movs	r5, #0
   10d2a:	079b      	lsls	r3, r3, #30
   10d2c:	d40f      	bmi.n	10d4e <_printf_i+0x21e>
   10d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d30:	68e0      	ldr	r0, [r4, #12]
   10d32:	4298      	cmp	r0, r3
   10d34:	da17      	bge.n	10d66 <_printf_i+0x236>
   10d36:	0018      	movs	r0, r3
   10d38:	e015      	b.n	10d66 <_printf_i+0x236>
   10d3a:	0022      	movs	r2, r4
   10d3c:	2301      	movs	r3, #1
   10d3e:	3219      	adds	r2, #25
   10d40:	9906      	ldr	r1, [sp, #24]
   10d42:	9805      	ldr	r0, [sp, #20]
   10d44:	9e07      	ldr	r6, [sp, #28]
   10d46:	47b0      	blx	r6
   10d48:	1c43      	adds	r3, r0, #1
   10d4a:	d0e1      	beq.n	10d10 <_printf_i+0x1e0>
   10d4c:	3501      	adds	r5, #1
   10d4e:	68e3      	ldr	r3, [r4, #12]
   10d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10d52:	1a9b      	subs	r3, r3, r2
   10d54:	429d      	cmp	r5, r3
   10d56:	dbf0      	blt.n	10d3a <_printf_i+0x20a>
   10d58:	e7e9      	b.n	10d2e <_printf_i+0x1fe>
   10d5a:	0026      	movs	r6, r4
   10d5c:	9b03      	ldr	r3, [sp, #12]
   10d5e:	3642      	adds	r6, #66	; 0x42
   10d60:	781b      	ldrb	r3, [r3, #0]
   10d62:	7033      	strb	r3, [r6, #0]
   10d64:	e78e      	b.n	10c84 <_printf_i+0x154>
   10d66:	b00b      	add	sp, #44	; 0x2c
   10d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d6a:	46c0      	nop			; (mov r8, r8)
   10d6c:	000137f9 	.word	0x000137f9
   10d70:	0001380a 	.word	0x0001380a

00010d74 <iprintf>:
   10d74:	b40f      	push	{r0, r1, r2, r3}
   10d76:	4b0b      	ldr	r3, [pc, #44]	; (10da4 <iprintf+0x30>)
   10d78:	b513      	push	{r0, r1, r4, lr}
   10d7a:	681c      	ldr	r4, [r3, #0]
   10d7c:	2c00      	cmp	r4, #0
   10d7e:	d005      	beq.n	10d8c <iprintf+0x18>
   10d80:	69a3      	ldr	r3, [r4, #24]
   10d82:	2b00      	cmp	r3, #0
   10d84:	d102      	bne.n	10d8c <iprintf+0x18>
   10d86:	0020      	movs	r0, r4
   10d88:	f000 fc40 	bl	1160c <__sinit>
   10d8c:	ab05      	add	r3, sp, #20
   10d8e:	9a04      	ldr	r2, [sp, #16]
   10d90:	68a1      	ldr	r1, [r4, #8]
   10d92:	0020      	movs	r0, r4
   10d94:	9301      	str	r3, [sp, #4]
   10d96:	f7ff fd41 	bl	1081c <_vfiprintf_r>
   10d9a:	bc16      	pop	{r1, r2, r4}
   10d9c:	bc08      	pop	{r3}
   10d9e:	b004      	add	sp, #16
   10da0:	4718      	bx	r3
   10da2:	46c0      	nop			; (mov r8, r8)
   10da4:	2000008c 	.word	0x2000008c

00010da8 <putchar>:
   10da8:	4b08      	ldr	r3, [pc, #32]	; (10dcc <putchar+0x24>)
   10daa:	b570      	push	{r4, r5, r6, lr}
   10dac:	681c      	ldr	r4, [r3, #0]
   10dae:	0005      	movs	r5, r0
   10db0:	2c00      	cmp	r4, #0
   10db2:	d005      	beq.n	10dc0 <putchar+0x18>
   10db4:	69a3      	ldr	r3, [r4, #24]
   10db6:	2b00      	cmp	r3, #0
   10db8:	d102      	bne.n	10dc0 <putchar+0x18>
   10dba:	0020      	movs	r0, r4
   10dbc:	f000 fc26 	bl	1160c <__sinit>
   10dc0:	0029      	movs	r1, r5
   10dc2:	68a2      	ldr	r2, [r4, #8]
   10dc4:	0020      	movs	r0, r4
   10dc6:	f000 ff65 	bl	11c94 <_putc_r>
   10dca:	bd70      	pop	{r4, r5, r6, pc}
   10dcc:	2000008c 	.word	0x2000008c

00010dd0 <_puts_r>:
   10dd0:	b570      	push	{r4, r5, r6, lr}
   10dd2:	0005      	movs	r5, r0
   10dd4:	000e      	movs	r6, r1
   10dd6:	2800      	cmp	r0, #0
   10dd8:	d004      	beq.n	10de4 <_puts_r+0x14>
   10dda:	6983      	ldr	r3, [r0, #24]
   10ddc:	2b00      	cmp	r3, #0
   10dde:	d101      	bne.n	10de4 <_puts_r+0x14>
   10de0:	f000 fc14 	bl	1160c <__sinit>
   10de4:	69ab      	ldr	r3, [r5, #24]
   10de6:	68ac      	ldr	r4, [r5, #8]
   10de8:	2b00      	cmp	r3, #0
   10dea:	d102      	bne.n	10df2 <_puts_r+0x22>
   10dec:	0028      	movs	r0, r5
   10dee:	f000 fc0d 	bl	1160c <__sinit>
   10df2:	4b25      	ldr	r3, [pc, #148]	; (10e88 <_puts_r+0xb8>)
   10df4:	429c      	cmp	r4, r3
   10df6:	d101      	bne.n	10dfc <_puts_r+0x2c>
   10df8:	686c      	ldr	r4, [r5, #4]
   10dfa:	e008      	b.n	10e0e <_puts_r+0x3e>
   10dfc:	4b23      	ldr	r3, [pc, #140]	; (10e8c <_puts_r+0xbc>)
   10dfe:	429c      	cmp	r4, r3
   10e00:	d101      	bne.n	10e06 <_puts_r+0x36>
   10e02:	68ac      	ldr	r4, [r5, #8]
   10e04:	e003      	b.n	10e0e <_puts_r+0x3e>
   10e06:	4b22      	ldr	r3, [pc, #136]	; (10e90 <_puts_r+0xc0>)
   10e08:	429c      	cmp	r4, r3
   10e0a:	d100      	bne.n	10e0e <_puts_r+0x3e>
   10e0c:	68ec      	ldr	r4, [r5, #12]
   10e0e:	89a3      	ldrh	r3, [r4, #12]
   10e10:	071b      	lsls	r3, r3, #28
   10e12:	d502      	bpl.n	10e1a <_puts_r+0x4a>
   10e14:	6923      	ldr	r3, [r4, #16]
   10e16:	2b00      	cmp	r3, #0
   10e18:	d111      	bne.n	10e3e <_puts_r+0x6e>
   10e1a:	0021      	movs	r1, r4
   10e1c:	0028      	movs	r0, r5
   10e1e:	f000 fa83 	bl	11328 <__swsetup_r>
   10e22:	2800      	cmp	r0, #0
   10e24:	d00b      	beq.n	10e3e <_puts_r+0x6e>
   10e26:	2001      	movs	r0, #1
   10e28:	4240      	negs	r0, r0
   10e2a:	e02b      	b.n	10e84 <_puts_r+0xb4>
   10e2c:	3b01      	subs	r3, #1
   10e2e:	3601      	adds	r6, #1
   10e30:	60a3      	str	r3, [r4, #8]
   10e32:	2b00      	cmp	r3, #0
   10e34:	db08      	blt.n	10e48 <_puts_r+0x78>
   10e36:	6823      	ldr	r3, [r4, #0]
   10e38:	1c5a      	adds	r2, r3, #1
   10e3a:	6022      	str	r2, [r4, #0]
   10e3c:	7019      	strb	r1, [r3, #0]
   10e3e:	7831      	ldrb	r1, [r6, #0]
   10e40:	68a3      	ldr	r3, [r4, #8]
   10e42:	2900      	cmp	r1, #0
   10e44:	d1f2      	bne.n	10e2c <_puts_r+0x5c>
   10e46:	e00b      	b.n	10e60 <_puts_r+0x90>
   10e48:	69a2      	ldr	r2, [r4, #24]
   10e4a:	4293      	cmp	r3, r2
   10e4c:	db01      	blt.n	10e52 <_puts_r+0x82>
   10e4e:	290a      	cmp	r1, #10
   10e50:	d1f1      	bne.n	10e36 <_puts_r+0x66>
   10e52:	0022      	movs	r2, r4
   10e54:	0028      	movs	r0, r5
   10e56:	f000 fa0f 	bl	11278 <__swbuf_r>
   10e5a:	1c43      	adds	r3, r0, #1
   10e5c:	d1ef      	bne.n	10e3e <_puts_r+0x6e>
   10e5e:	e7e2      	b.n	10e26 <_puts_r+0x56>
   10e60:	3b01      	subs	r3, #1
   10e62:	60a3      	str	r3, [r4, #8]
   10e64:	2b00      	cmp	r3, #0
   10e66:	da08      	bge.n	10e7a <_puts_r+0xaa>
   10e68:	0022      	movs	r2, r4
   10e6a:	310a      	adds	r1, #10
   10e6c:	0028      	movs	r0, r5
   10e6e:	f000 fa03 	bl	11278 <__swbuf_r>
   10e72:	1c43      	adds	r3, r0, #1
   10e74:	d0d7      	beq.n	10e26 <_puts_r+0x56>
   10e76:	200a      	movs	r0, #10
   10e78:	e004      	b.n	10e84 <_puts_r+0xb4>
   10e7a:	200a      	movs	r0, #10
   10e7c:	6823      	ldr	r3, [r4, #0]
   10e7e:	1c5a      	adds	r2, r3, #1
   10e80:	6022      	str	r2, [r4, #0]
   10e82:	7018      	strb	r0, [r3, #0]
   10e84:	bd70      	pop	{r4, r5, r6, pc}
   10e86:	46c0      	nop			; (mov r8, r8)
   10e88:	0001391c 	.word	0x0001391c
   10e8c:	0001393c 	.word	0x0001393c
   10e90:	0001395c 	.word	0x0001395c

00010e94 <puts>:
   10e94:	b510      	push	{r4, lr}
   10e96:	4b03      	ldr	r3, [pc, #12]	; (10ea4 <puts+0x10>)
   10e98:	0001      	movs	r1, r0
   10e9a:	6818      	ldr	r0, [r3, #0]
   10e9c:	f7ff ff98 	bl	10dd0 <_puts_r>
   10ea0:	bd10      	pop	{r4, pc}
   10ea2:	46c0      	nop			; (mov r8, r8)
   10ea4:	2000008c 	.word	0x2000008c

00010ea8 <setbuf>:
   10ea8:	424a      	negs	r2, r1
   10eaa:	414a      	adcs	r2, r1
   10eac:	2380      	movs	r3, #128	; 0x80
   10eae:	b510      	push	{r4, lr}
   10eb0:	0052      	lsls	r2, r2, #1
   10eb2:	00db      	lsls	r3, r3, #3
   10eb4:	f000 f802 	bl	10ebc <setvbuf>
   10eb8:	bd10      	pop	{r4, pc}
	...

00010ebc <setvbuf>:
   10ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ebe:	001d      	movs	r5, r3
   10ec0:	4b51      	ldr	r3, [pc, #324]	; (11008 <setvbuf+0x14c>)
   10ec2:	b085      	sub	sp, #20
   10ec4:	681e      	ldr	r6, [r3, #0]
   10ec6:	0004      	movs	r4, r0
   10ec8:	000f      	movs	r7, r1
   10eca:	9200      	str	r2, [sp, #0]
   10ecc:	2e00      	cmp	r6, #0
   10ece:	d005      	beq.n	10edc <setvbuf+0x20>
   10ed0:	69b3      	ldr	r3, [r6, #24]
   10ed2:	2b00      	cmp	r3, #0
   10ed4:	d102      	bne.n	10edc <setvbuf+0x20>
   10ed6:	0030      	movs	r0, r6
   10ed8:	f000 fb98 	bl	1160c <__sinit>
   10edc:	4b4b      	ldr	r3, [pc, #300]	; (1100c <setvbuf+0x150>)
   10ede:	429c      	cmp	r4, r3
   10ee0:	d101      	bne.n	10ee6 <setvbuf+0x2a>
   10ee2:	6874      	ldr	r4, [r6, #4]
   10ee4:	e008      	b.n	10ef8 <setvbuf+0x3c>
   10ee6:	4b4a      	ldr	r3, [pc, #296]	; (11010 <setvbuf+0x154>)
   10ee8:	429c      	cmp	r4, r3
   10eea:	d101      	bne.n	10ef0 <setvbuf+0x34>
   10eec:	68b4      	ldr	r4, [r6, #8]
   10eee:	e003      	b.n	10ef8 <setvbuf+0x3c>
   10ef0:	4b48      	ldr	r3, [pc, #288]	; (11014 <setvbuf+0x158>)
   10ef2:	429c      	cmp	r4, r3
   10ef4:	d100      	bne.n	10ef8 <setvbuf+0x3c>
   10ef6:	68f4      	ldr	r4, [r6, #12]
   10ef8:	9b00      	ldr	r3, [sp, #0]
   10efa:	2b02      	cmp	r3, #2
   10efc:	d005      	beq.n	10f0a <setvbuf+0x4e>
   10efe:	2b01      	cmp	r3, #1
   10f00:	d900      	bls.n	10f04 <setvbuf+0x48>
   10f02:	e07c      	b.n	10ffe <setvbuf+0x142>
   10f04:	2d00      	cmp	r5, #0
   10f06:	da00      	bge.n	10f0a <setvbuf+0x4e>
   10f08:	e079      	b.n	10ffe <setvbuf+0x142>
   10f0a:	0021      	movs	r1, r4
   10f0c:	0030      	movs	r0, r6
   10f0e:	f000 fb0f 	bl	11530 <_fflush_r>
   10f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10f14:	2900      	cmp	r1, #0
   10f16:	d008      	beq.n	10f2a <setvbuf+0x6e>
   10f18:	0023      	movs	r3, r4
   10f1a:	3344      	adds	r3, #68	; 0x44
   10f1c:	4299      	cmp	r1, r3
   10f1e:	d002      	beq.n	10f26 <setvbuf+0x6a>
   10f20:	0030      	movs	r0, r6
   10f22:	f000 fc95 	bl	11850 <_free_r>
   10f26:	2300      	movs	r3, #0
   10f28:	6363      	str	r3, [r4, #52]	; 0x34
   10f2a:	2300      	movs	r3, #0
   10f2c:	61a3      	str	r3, [r4, #24]
   10f2e:	6063      	str	r3, [r4, #4]
   10f30:	89a3      	ldrh	r3, [r4, #12]
   10f32:	061b      	lsls	r3, r3, #24
   10f34:	d503      	bpl.n	10f3e <setvbuf+0x82>
   10f36:	6921      	ldr	r1, [r4, #16]
   10f38:	0030      	movs	r0, r6
   10f3a:	f000 fc89 	bl	11850 <_free_r>
   10f3e:	89a2      	ldrh	r2, [r4, #12]
   10f40:	4b35      	ldr	r3, [pc, #212]	; (11018 <setvbuf+0x15c>)
   10f42:	4013      	ands	r3, r2
   10f44:	81a3      	strh	r3, [r4, #12]
   10f46:	9b00      	ldr	r3, [sp, #0]
   10f48:	2b02      	cmp	r3, #2
   10f4a:	d021      	beq.n	10f90 <setvbuf+0xd4>
   10f4c:	ab03      	add	r3, sp, #12
   10f4e:	aa02      	add	r2, sp, #8
   10f50:	0021      	movs	r1, r4
   10f52:	0030      	movs	r0, r6
   10f54:	f000 fbee 	bl	11734 <__swhatbuf_r>
   10f58:	89a3      	ldrh	r3, [r4, #12]
   10f5a:	4318      	orrs	r0, r3
   10f5c:	81a0      	strh	r0, [r4, #12]
   10f5e:	2d00      	cmp	r5, #0
   10f60:	d101      	bne.n	10f66 <setvbuf+0xaa>
   10f62:	9d02      	ldr	r5, [sp, #8]
   10f64:	e001      	b.n	10f6a <setvbuf+0xae>
   10f66:	2f00      	cmp	r7, #0
   10f68:	d125      	bne.n	10fb6 <setvbuf+0xfa>
   10f6a:	0028      	movs	r0, r5
   10f6c:	f000 fc46 	bl	117fc <malloc>
   10f70:	9501      	str	r5, [sp, #4]
   10f72:	1e07      	subs	r7, r0, #0
   10f74:	d11a      	bne.n	10fac <setvbuf+0xf0>
   10f76:	9b02      	ldr	r3, [sp, #8]
   10f78:	9301      	str	r3, [sp, #4]
   10f7a:	42ab      	cmp	r3, r5
   10f7c:	d102      	bne.n	10f84 <setvbuf+0xc8>
   10f7e:	2001      	movs	r0, #1
   10f80:	4240      	negs	r0, r0
   10f82:	e006      	b.n	10f92 <setvbuf+0xd6>
   10f84:	9801      	ldr	r0, [sp, #4]
   10f86:	f000 fc39 	bl	117fc <malloc>
   10f8a:	1e07      	subs	r7, r0, #0
   10f8c:	d10e      	bne.n	10fac <setvbuf+0xf0>
   10f8e:	e7f6      	b.n	10f7e <setvbuf+0xc2>
   10f90:	2000      	movs	r0, #0
   10f92:	2202      	movs	r2, #2
   10f94:	89a3      	ldrh	r3, [r4, #12]
   10f96:	4313      	orrs	r3, r2
   10f98:	81a3      	strh	r3, [r4, #12]
   10f9a:	2300      	movs	r3, #0
   10f9c:	60a3      	str	r3, [r4, #8]
   10f9e:	0023      	movs	r3, r4
   10fa0:	3347      	adds	r3, #71	; 0x47
   10fa2:	6023      	str	r3, [r4, #0]
   10fa4:	6123      	str	r3, [r4, #16]
   10fa6:	2301      	movs	r3, #1
   10fa8:	6163      	str	r3, [r4, #20]
   10faa:	e02a      	b.n	11002 <setvbuf+0x146>
   10fac:	2280      	movs	r2, #128	; 0x80
   10fae:	89a3      	ldrh	r3, [r4, #12]
   10fb0:	9d01      	ldr	r5, [sp, #4]
   10fb2:	4313      	orrs	r3, r2
   10fb4:	81a3      	strh	r3, [r4, #12]
   10fb6:	69b3      	ldr	r3, [r6, #24]
   10fb8:	2b00      	cmp	r3, #0
   10fba:	d102      	bne.n	10fc2 <setvbuf+0x106>
   10fbc:	0030      	movs	r0, r6
   10fbe:	f000 fb25 	bl	1160c <__sinit>
   10fc2:	9b00      	ldr	r3, [sp, #0]
   10fc4:	2b01      	cmp	r3, #1
   10fc6:	d103      	bne.n	10fd0 <setvbuf+0x114>
   10fc8:	89a3      	ldrh	r3, [r4, #12]
   10fca:	9a00      	ldr	r2, [sp, #0]
   10fcc:	431a      	orrs	r2, r3
   10fce:	81a2      	strh	r2, [r4, #12]
   10fd0:	2308      	movs	r3, #8
   10fd2:	89a2      	ldrh	r2, [r4, #12]
   10fd4:	6027      	str	r7, [r4, #0]
   10fd6:	4013      	ands	r3, r2
   10fd8:	6127      	str	r7, [r4, #16]
   10fda:	6165      	str	r5, [r4, #20]
   10fdc:	1e18      	subs	r0, r3, #0
   10fde:	d00c      	beq.n	10ffa <setvbuf+0x13e>
   10fe0:	2301      	movs	r3, #1
   10fe2:	401a      	ands	r2, r3
   10fe4:	2300      	movs	r3, #0
   10fe6:	1e10      	subs	r0, r2, #0
   10fe8:	4298      	cmp	r0, r3
   10fea:	d004      	beq.n	10ff6 <setvbuf+0x13a>
   10fec:	426d      	negs	r5, r5
   10fee:	60a3      	str	r3, [r4, #8]
   10ff0:	61a5      	str	r5, [r4, #24]
   10ff2:	0018      	movs	r0, r3
   10ff4:	e005      	b.n	11002 <setvbuf+0x146>
   10ff6:	60a5      	str	r5, [r4, #8]
   10ff8:	e003      	b.n	11002 <setvbuf+0x146>
   10ffa:	60a3      	str	r3, [r4, #8]
   10ffc:	e001      	b.n	11002 <setvbuf+0x146>
   10ffe:	2001      	movs	r0, #1
   11000:	4240      	negs	r0, r0
   11002:	b005      	add	sp, #20
   11004:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11006:	46c0      	nop			; (mov r8, r8)
   11008:	2000008c 	.word	0x2000008c
   1100c:	0001391c 	.word	0x0001391c
   11010:	0001393c 	.word	0x0001393c
   11014:	0001395c 	.word	0x0001395c
   11018:	fffff35c 	.word	0xfffff35c

0001101c <sniprintf>:
   1101c:	b40c      	push	{r2, r3}
   1101e:	b530      	push	{r4, r5, lr}
   11020:	4b16      	ldr	r3, [pc, #88]	; (1107c <sniprintf+0x60>)
   11022:	b09d      	sub	sp, #116	; 0x74
   11024:	1e0c      	subs	r4, r1, #0
   11026:	681d      	ldr	r5, [r3, #0]
   11028:	da04      	bge.n	11034 <sniprintf+0x18>
   1102a:	238b      	movs	r3, #139	; 0x8b
   1102c:	2001      	movs	r0, #1
   1102e:	602b      	str	r3, [r5, #0]
   11030:	4240      	negs	r0, r0
   11032:	e01d      	b.n	11070 <sniprintf+0x54>
   11034:	2382      	movs	r3, #130	; 0x82
   11036:	a902      	add	r1, sp, #8
   11038:	009b      	lsls	r3, r3, #2
   1103a:	818b      	strh	r3, [r1, #12]
   1103c:	2300      	movs	r3, #0
   1103e:	9002      	str	r0, [sp, #8]
   11040:	6108      	str	r0, [r1, #16]
   11042:	429c      	cmp	r4, r3
   11044:	d000      	beq.n	11048 <sniprintf+0x2c>
   11046:	1e63      	subs	r3, r4, #1
   11048:	608b      	str	r3, [r1, #8]
   1104a:	614b      	str	r3, [r1, #20]
   1104c:	2301      	movs	r3, #1
   1104e:	425b      	negs	r3, r3
   11050:	81cb      	strh	r3, [r1, #14]
   11052:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11054:	ab21      	add	r3, sp, #132	; 0x84
   11056:	0028      	movs	r0, r5
   11058:	9301      	str	r3, [sp, #4]
   1105a:	f000 fd1d 	bl	11a98 <_svfiprintf_r>
   1105e:	1c43      	adds	r3, r0, #1
   11060:	da01      	bge.n	11066 <sniprintf+0x4a>
   11062:	238b      	movs	r3, #139	; 0x8b
   11064:	602b      	str	r3, [r5, #0]
   11066:	2c00      	cmp	r4, #0
   11068:	d002      	beq.n	11070 <sniprintf+0x54>
   1106a:	2300      	movs	r3, #0
   1106c:	9a02      	ldr	r2, [sp, #8]
   1106e:	7013      	strb	r3, [r2, #0]
   11070:	b01d      	add	sp, #116	; 0x74
   11072:	bc30      	pop	{r4, r5}
   11074:	bc08      	pop	{r3}
   11076:	b002      	add	sp, #8
   11078:	4718      	bx	r3
   1107a:	46c0      	nop			; (mov r8, r8)
   1107c:	2000008c 	.word	0x2000008c

00011080 <siprintf>:
   11080:	b40e      	push	{r1, r2, r3}
   11082:	b510      	push	{r4, lr}
   11084:	b09d      	sub	sp, #116	; 0x74
   11086:	a902      	add	r1, sp, #8
   11088:	9002      	str	r0, [sp, #8]
   1108a:	6108      	str	r0, [r1, #16]
   1108c:	480b      	ldr	r0, [pc, #44]	; (110bc <siprintf+0x3c>)
   1108e:	2482      	movs	r4, #130	; 0x82
   11090:	6088      	str	r0, [r1, #8]
   11092:	6148      	str	r0, [r1, #20]
   11094:	2001      	movs	r0, #1
   11096:	4240      	negs	r0, r0
   11098:	ab1f      	add	r3, sp, #124	; 0x7c
   1109a:	81c8      	strh	r0, [r1, #14]
   1109c:	4808      	ldr	r0, [pc, #32]	; (110c0 <siprintf+0x40>)
   1109e:	cb04      	ldmia	r3!, {r2}
   110a0:	00a4      	lsls	r4, r4, #2
   110a2:	6800      	ldr	r0, [r0, #0]
   110a4:	9301      	str	r3, [sp, #4]
   110a6:	818c      	strh	r4, [r1, #12]
   110a8:	f000 fcf6 	bl	11a98 <_svfiprintf_r>
   110ac:	2300      	movs	r3, #0
   110ae:	9a02      	ldr	r2, [sp, #8]
   110b0:	7013      	strb	r3, [r2, #0]
   110b2:	b01d      	add	sp, #116	; 0x74
   110b4:	bc10      	pop	{r4}
   110b6:	bc08      	pop	{r3}
   110b8:	b003      	add	sp, #12
   110ba:	4718      	bx	r3
   110bc:	7fffffff 	.word	0x7fffffff
   110c0:	2000008c 	.word	0x2000008c

000110c4 <strcmp>:
   110c4:	7802      	ldrb	r2, [r0, #0]
   110c6:	780b      	ldrb	r3, [r1, #0]
   110c8:	2a00      	cmp	r2, #0
   110ca:	d003      	beq.n	110d4 <strcmp+0x10>
   110cc:	3001      	adds	r0, #1
   110ce:	3101      	adds	r1, #1
   110d0:	429a      	cmp	r2, r3
   110d2:	d0f7      	beq.n	110c4 <strcmp>
   110d4:	1ad0      	subs	r0, r2, r3
   110d6:	4770      	bx	lr

000110d8 <strcpy>:
   110d8:	1c03      	adds	r3, r0, #0
   110da:	780a      	ldrb	r2, [r1, #0]
   110dc:	3101      	adds	r1, #1
   110de:	701a      	strb	r2, [r3, #0]
   110e0:	3301      	adds	r3, #1
   110e2:	2a00      	cmp	r2, #0
   110e4:	d1f9      	bne.n	110da <strcpy+0x2>
   110e6:	4770      	bx	lr

000110e8 <strlen>:
   110e8:	2300      	movs	r3, #0
   110ea:	5cc2      	ldrb	r2, [r0, r3]
   110ec:	3301      	adds	r3, #1
   110ee:	2a00      	cmp	r2, #0
   110f0:	d1fb      	bne.n	110ea <strlen+0x2>
   110f2:	1e58      	subs	r0, r3, #1
   110f4:	4770      	bx	lr

000110f6 <strncmp>:
   110f6:	2300      	movs	r3, #0
   110f8:	b530      	push	{r4, r5, lr}
   110fa:	429a      	cmp	r2, r3
   110fc:	d00b      	beq.n	11116 <strncmp+0x20>
   110fe:	3a01      	subs	r2, #1
   11100:	5cc4      	ldrb	r4, [r0, r3]
   11102:	5ccd      	ldrb	r5, [r1, r3]
   11104:	42ac      	cmp	r4, r5
   11106:	d105      	bne.n	11114 <strncmp+0x1e>
   11108:	429a      	cmp	r2, r3
   1110a:	d002      	beq.n	11112 <strncmp+0x1c>
   1110c:	3301      	adds	r3, #1
   1110e:	2c00      	cmp	r4, #0
   11110:	d1f6      	bne.n	11100 <strncmp+0xa>
   11112:	0025      	movs	r5, r4
   11114:	1b63      	subs	r3, r4, r5
   11116:	0018      	movs	r0, r3
   11118:	bd30      	pop	{r4, r5, pc}

0001111a <strspn>:
   1111a:	0003      	movs	r3, r0
   1111c:	b530      	push	{r4, r5, lr}
   1111e:	781c      	ldrb	r4, [r3, #0]
   11120:	2c00      	cmp	r4, #0
   11122:	d009      	beq.n	11138 <strspn+0x1e>
   11124:	000a      	movs	r2, r1
   11126:	7815      	ldrb	r5, [r2, #0]
   11128:	2d00      	cmp	r5, #0
   1112a:	d005      	beq.n	11138 <strspn+0x1e>
   1112c:	42ac      	cmp	r4, r5
   1112e:	d001      	beq.n	11134 <strspn+0x1a>
   11130:	3201      	adds	r2, #1
   11132:	e7f8      	b.n	11126 <strspn+0xc>
   11134:	3301      	adds	r3, #1
   11136:	e7f2      	b.n	1111e <strspn+0x4>
   11138:	1a18      	subs	r0, r3, r0
   1113a:	bd30      	pop	{r4, r5, pc}

0001113c <_strtol_r>:
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113e:	001e      	movs	r6, r3
   11140:	4b45      	ldr	r3, [pc, #276]	; (11258 <_strtol_r+0x11c>)
   11142:	b087      	sub	sp, #28
   11144:	681b      	ldr	r3, [r3, #0]
   11146:	9201      	str	r2, [sp, #4]
   11148:	9302      	str	r3, [sp, #8]
   1114a:	2208      	movs	r2, #8
   1114c:	000b      	movs	r3, r1
   1114e:	9005      	str	r0, [sp, #20]
   11150:	9103      	str	r1, [sp, #12]
   11152:	781c      	ldrb	r4, [r3, #0]
   11154:	9902      	ldr	r1, [sp, #8]
   11156:	1c5d      	adds	r5, r3, #1
   11158:	1909      	adds	r1, r1, r4
   1115a:	7848      	ldrb	r0, [r1, #1]
   1115c:	4010      	ands	r0, r2
   1115e:	d001      	beq.n	11164 <_strtol_r+0x28>
   11160:	002b      	movs	r3, r5
   11162:	e7f6      	b.n	11152 <_strtol_r+0x16>
   11164:	2c2d      	cmp	r4, #45	; 0x2d
   11166:	d104      	bne.n	11172 <_strtol_r+0x36>
   11168:	1c9d      	adds	r5, r3, #2
   1116a:	785c      	ldrb	r4, [r3, #1]
   1116c:	2301      	movs	r3, #1
   1116e:	9300      	str	r3, [sp, #0]
   11170:	e004      	b.n	1117c <_strtol_r+0x40>
   11172:	9000      	str	r0, [sp, #0]
   11174:	2c2b      	cmp	r4, #43	; 0x2b
   11176:	d101      	bne.n	1117c <_strtol_r+0x40>
   11178:	785c      	ldrb	r4, [r3, #1]
   1117a:	1c9d      	adds	r5, r3, #2
   1117c:	2e00      	cmp	r6, #0
   1117e:	d002      	beq.n	11186 <_strtol_r+0x4a>
   11180:	2e10      	cmp	r6, #16
   11182:	d10a      	bne.n	1119a <_strtol_r+0x5e>
   11184:	e062      	b.n	1124c <_strtol_r+0x110>
   11186:	2c30      	cmp	r4, #48	; 0x30
   11188:	d15e      	bne.n	11248 <_strtol_r+0x10c>
   1118a:	2220      	movs	r2, #32
   1118c:	782b      	ldrb	r3, [r5, #0]
   1118e:	4393      	bics	r3, r2
   11190:	2b58      	cmp	r3, #88	; 0x58
   11192:	d154      	bne.n	1123e <_strtol_r+0x102>
   11194:	2610      	movs	r6, #16
   11196:	786c      	ldrb	r4, [r5, #1]
   11198:	3502      	adds	r5, #2
   1119a:	9f00      	ldr	r7, [sp, #0]
   1119c:	0031      	movs	r1, r6
   1119e:	1e7b      	subs	r3, r7, #1
   111a0:	419f      	sbcs	r7, r3
   111a2:	4b2e      	ldr	r3, [pc, #184]	; (1125c <_strtol_r+0x120>)
   111a4:	18ff      	adds	r7, r7, r3
   111a6:	0038      	movs	r0, r7
   111a8:	f7fd fcaa 	bl	eb00 <__aeabi_uidivmod>
   111ac:	0038      	movs	r0, r7
   111ae:	9104      	str	r1, [sp, #16]
   111b0:	0031      	movs	r1, r6
   111b2:	f7fd fc1f 	bl	e9f4 <__aeabi_uidiv>
   111b6:	2300      	movs	r3, #0
   111b8:	2203      	movs	r2, #3
   111ba:	0007      	movs	r7, r0
   111bc:	4694      	mov	ip, r2
   111be:	0018      	movs	r0, r3
   111c0:	9a02      	ldr	r2, [sp, #8]
   111c2:	1912      	adds	r2, r2, r4
   111c4:	7851      	ldrb	r1, [r2, #1]
   111c6:	2204      	movs	r2, #4
   111c8:	4211      	tst	r1, r2
   111ca:	d001      	beq.n	111d0 <_strtol_r+0x94>
   111cc:	3c30      	subs	r4, #48	; 0x30
   111ce:	e007      	b.n	111e0 <_strtol_r+0xa4>
   111d0:	4662      	mov	r2, ip
   111d2:	4011      	ands	r1, r2
   111d4:	d017      	beq.n	11206 <_strtol_r+0xca>
   111d6:	2237      	movs	r2, #55	; 0x37
   111d8:	2901      	cmp	r1, #1
   111da:	d000      	beq.n	111de <_strtol_r+0xa2>
   111dc:	3220      	adds	r2, #32
   111de:	1aa4      	subs	r4, r4, r2
   111e0:	42a6      	cmp	r6, r4
   111e2:	dd10      	ble.n	11206 <_strtol_r+0xca>
   111e4:	1c5a      	adds	r2, r3, #1
   111e6:	d00b      	beq.n	11200 <_strtol_r+0xc4>
   111e8:	42b8      	cmp	r0, r7
   111ea:	d807      	bhi.n	111fc <_strtol_r+0xc0>
   111ec:	d102      	bne.n	111f4 <_strtol_r+0xb8>
   111ee:	9b04      	ldr	r3, [sp, #16]
   111f0:	429c      	cmp	r4, r3
   111f2:	dc03      	bgt.n	111fc <_strtol_r+0xc0>
   111f4:	4370      	muls	r0, r6
   111f6:	2301      	movs	r3, #1
   111f8:	1820      	adds	r0, r4, r0
   111fa:	e001      	b.n	11200 <_strtol_r+0xc4>
   111fc:	2301      	movs	r3, #1
   111fe:	425b      	negs	r3, r3
   11200:	782c      	ldrb	r4, [r5, #0]
   11202:	3501      	adds	r5, #1
   11204:	e7dc      	b.n	111c0 <_strtol_r+0x84>
   11206:	1c5a      	adds	r2, r3, #1
   11208:	d10b      	bne.n	11222 <_strtol_r+0xe6>
   1120a:	9800      	ldr	r0, [sp, #0]
   1120c:	9a05      	ldr	r2, [sp, #20]
   1120e:	1e43      	subs	r3, r0, #1
   11210:	4198      	sbcs	r0, r3
   11212:	4b12      	ldr	r3, [pc, #72]	; (1125c <_strtol_r+0x120>)
   11214:	18c0      	adds	r0, r0, r3
   11216:	2322      	movs	r3, #34	; 0x22
   11218:	6013      	str	r3, [r2, #0]
   1121a:	9b01      	ldr	r3, [sp, #4]
   1121c:	2b00      	cmp	r3, #0
   1121e:	d10a      	bne.n	11236 <_strtol_r+0xfa>
   11220:	e017      	b.n	11252 <_strtol_r+0x116>
   11222:	9a00      	ldr	r2, [sp, #0]
   11224:	2a00      	cmp	r2, #0
   11226:	d000      	beq.n	1122a <_strtol_r+0xee>
   11228:	4240      	negs	r0, r0
   1122a:	9a01      	ldr	r2, [sp, #4]
   1122c:	2a00      	cmp	r2, #0
   1122e:	d010      	beq.n	11252 <_strtol_r+0x116>
   11230:	9a03      	ldr	r2, [sp, #12]
   11232:	2b00      	cmp	r3, #0
   11234:	d000      	beq.n	11238 <_strtol_r+0xfc>
   11236:	1e6a      	subs	r2, r5, #1
   11238:	9b01      	ldr	r3, [sp, #4]
   1123a:	601a      	str	r2, [r3, #0]
   1123c:	e009      	b.n	11252 <_strtol_r+0x116>
   1123e:	2430      	movs	r4, #48	; 0x30
   11240:	2e00      	cmp	r6, #0
   11242:	d1aa      	bne.n	1119a <_strtol_r+0x5e>
   11244:	2608      	movs	r6, #8
   11246:	e7a8      	b.n	1119a <_strtol_r+0x5e>
   11248:	260a      	movs	r6, #10
   1124a:	e7a6      	b.n	1119a <_strtol_r+0x5e>
   1124c:	2c30      	cmp	r4, #48	; 0x30
   1124e:	d09c      	beq.n	1118a <_strtol_r+0x4e>
   11250:	e7a3      	b.n	1119a <_strtol_r+0x5e>
   11252:	b007      	add	sp, #28
   11254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11256:	46c0      	nop			; (mov r8, r8)
   11258:	20000090 	.word	0x20000090
   1125c:	7fffffff 	.word	0x7fffffff

00011260 <strtol>:
   11260:	b510      	push	{r4, lr}
   11262:	0013      	movs	r3, r2
   11264:	000a      	movs	r2, r1
   11266:	0001      	movs	r1, r0
   11268:	4802      	ldr	r0, [pc, #8]	; (11274 <strtol+0x14>)
   1126a:	6800      	ldr	r0, [r0, #0]
   1126c:	f7ff ff66 	bl	1113c <_strtol_r>
   11270:	bd10      	pop	{r4, pc}
   11272:	46c0      	nop			; (mov r8, r8)
   11274:	2000008c 	.word	0x2000008c

00011278 <__swbuf_r>:
   11278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1127a:	0005      	movs	r5, r0
   1127c:	000f      	movs	r7, r1
   1127e:	0014      	movs	r4, r2
   11280:	2800      	cmp	r0, #0
   11282:	d004      	beq.n	1128e <__swbuf_r+0x16>
   11284:	6983      	ldr	r3, [r0, #24]
   11286:	2b00      	cmp	r3, #0
   11288:	d101      	bne.n	1128e <__swbuf_r+0x16>
   1128a:	f000 f9bf 	bl	1160c <__sinit>
   1128e:	4b23      	ldr	r3, [pc, #140]	; (1131c <__swbuf_r+0xa4>)
   11290:	429c      	cmp	r4, r3
   11292:	d101      	bne.n	11298 <__swbuf_r+0x20>
   11294:	686c      	ldr	r4, [r5, #4]
   11296:	e008      	b.n	112aa <__swbuf_r+0x32>
   11298:	4b21      	ldr	r3, [pc, #132]	; (11320 <__swbuf_r+0xa8>)
   1129a:	429c      	cmp	r4, r3
   1129c:	d101      	bne.n	112a2 <__swbuf_r+0x2a>
   1129e:	68ac      	ldr	r4, [r5, #8]
   112a0:	e003      	b.n	112aa <__swbuf_r+0x32>
   112a2:	4b20      	ldr	r3, [pc, #128]	; (11324 <__swbuf_r+0xac>)
   112a4:	429c      	cmp	r4, r3
   112a6:	d100      	bne.n	112aa <__swbuf_r+0x32>
   112a8:	68ec      	ldr	r4, [r5, #12]
   112aa:	69a3      	ldr	r3, [r4, #24]
   112ac:	60a3      	str	r3, [r4, #8]
   112ae:	89a3      	ldrh	r3, [r4, #12]
   112b0:	071b      	lsls	r3, r3, #28
   112b2:	d50a      	bpl.n	112ca <__swbuf_r+0x52>
   112b4:	6923      	ldr	r3, [r4, #16]
   112b6:	2b00      	cmp	r3, #0
   112b8:	d007      	beq.n	112ca <__swbuf_r+0x52>
   112ba:	6823      	ldr	r3, [r4, #0]
   112bc:	6922      	ldr	r2, [r4, #16]
   112be:	b2fe      	uxtb	r6, r7
   112c0:	1a98      	subs	r0, r3, r2
   112c2:	6963      	ldr	r3, [r4, #20]
   112c4:	4298      	cmp	r0, r3
   112c6:	db0f      	blt.n	112e8 <__swbuf_r+0x70>
   112c8:	e008      	b.n	112dc <__swbuf_r+0x64>
   112ca:	0021      	movs	r1, r4
   112cc:	0028      	movs	r0, r5
   112ce:	f000 f82b 	bl	11328 <__swsetup_r>
   112d2:	2800      	cmp	r0, #0
   112d4:	d0f1      	beq.n	112ba <__swbuf_r+0x42>
   112d6:	2001      	movs	r0, #1
   112d8:	4240      	negs	r0, r0
   112da:	e01d      	b.n	11318 <__swbuf_r+0xa0>
   112dc:	0021      	movs	r1, r4
   112de:	0028      	movs	r0, r5
   112e0:	f000 f926 	bl	11530 <_fflush_r>
   112e4:	2800      	cmp	r0, #0
   112e6:	d1f6      	bne.n	112d6 <__swbuf_r+0x5e>
   112e8:	68a3      	ldr	r3, [r4, #8]
   112ea:	3001      	adds	r0, #1
   112ec:	3b01      	subs	r3, #1
   112ee:	60a3      	str	r3, [r4, #8]
   112f0:	6823      	ldr	r3, [r4, #0]
   112f2:	1c5a      	adds	r2, r3, #1
   112f4:	6022      	str	r2, [r4, #0]
   112f6:	701f      	strb	r7, [r3, #0]
   112f8:	6963      	ldr	r3, [r4, #20]
   112fa:	4298      	cmp	r0, r3
   112fc:	d005      	beq.n	1130a <__swbuf_r+0x92>
   112fe:	89a3      	ldrh	r3, [r4, #12]
   11300:	0030      	movs	r0, r6
   11302:	07db      	lsls	r3, r3, #31
   11304:	d508      	bpl.n	11318 <__swbuf_r+0xa0>
   11306:	2e0a      	cmp	r6, #10
   11308:	d106      	bne.n	11318 <__swbuf_r+0xa0>
   1130a:	0021      	movs	r1, r4
   1130c:	0028      	movs	r0, r5
   1130e:	f000 f90f 	bl	11530 <_fflush_r>
   11312:	2800      	cmp	r0, #0
   11314:	d1df      	bne.n	112d6 <__swbuf_r+0x5e>
   11316:	0030      	movs	r0, r6
   11318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1131a:	46c0      	nop			; (mov r8, r8)
   1131c:	0001391c 	.word	0x0001391c
   11320:	0001393c 	.word	0x0001393c
   11324:	0001395c 	.word	0x0001395c

00011328 <__swsetup_r>:
   11328:	4b36      	ldr	r3, [pc, #216]	; (11404 <__swsetup_r+0xdc>)
   1132a:	b570      	push	{r4, r5, r6, lr}
   1132c:	681d      	ldr	r5, [r3, #0]
   1132e:	0006      	movs	r6, r0
   11330:	000c      	movs	r4, r1
   11332:	2d00      	cmp	r5, #0
   11334:	d005      	beq.n	11342 <__swsetup_r+0x1a>
   11336:	69ab      	ldr	r3, [r5, #24]
   11338:	2b00      	cmp	r3, #0
   1133a:	d102      	bne.n	11342 <__swsetup_r+0x1a>
   1133c:	0028      	movs	r0, r5
   1133e:	f000 f965 	bl	1160c <__sinit>
   11342:	4b31      	ldr	r3, [pc, #196]	; (11408 <__swsetup_r+0xe0>)
   11344:	429c      	cmp	r4, r3
   11346:	d101      	bne.n	1134c <__swsetup_r+0x24>
   11348:	686c      	ldr	r4, [r5, #4]
   1134a:	e008      	b.n	1135e <__swsetup_r+0x36>
   1134c:	4b2f      	ldr	r3, [pc, #188]	; (1140c <__swsetup_r+0xe4>)
   1134e:	429c      	cmp	r4, r3
   11350:	d101      	bne.n	11356 <__swsetup_r+0x2e>
   11352:	68ac      	ldr	r4, [r5, #8]
   11354:	e003      	b.n	1135e <__swsetup_r+0x36>
   11356:	4b2e      	ldr	r3, [pc, #184]	; (11410 <__swsetup_r+0xe8>)
   11358:	429c      	cmp	r4, r3
   1135a:	d100      	bne.n	1135e <__swsetup_r+0x36>
   1135c:	68ec      	ldr	r4, [r5, #12]
   1135e:	220c      	movs	r2, #12
   11360:	5ea3      	ldrsh	r3, [r4, r2]
   11362:	b29a      	uxth	r2, r3
   11364:	0711      	lsls	r1, r2, #28
   11366:	d423      	bmi.n	113b0 <__swsetup_r+0x88>
   11368:	06d1      	lsls	r1, r2, #27
   1136a:	d407      	bmi.n	1137c <__swsetup_r+0x54>
   1136c:	2209      	movs	r2, #9
   1136e:	2001      	movs	r0, #1
   11370:	6032      	str	r2, [r6, #0]
   11372:	3237      	adds	r2, #55	; 0x37
   11374:	4313      	orrs	r3, r2
   11376:	81a3      	strh	r3, [r4, #12]
   11378:	4240      	negs	r0, r0
   1137a:	e042      	b.n	11402 <__swsetup_r+0xda>
   1137c:	0753      	lsls	r3, r2, #29
   1137e:	d513      	bpl.n	113a8 <__swsetup_r+0x80>
   11380:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11382:	2900      	cmp	r1, #0
   11384:	d008      	beq.n	11398 <__swsetup_r+0x70>
   11386:	0023      	movs	r3, r4
   11388:	3344      	adds	r3, #68	; 0x44
   1138a:	4299      	cmp	r1, r3
   1138c:	d002      	beq.n	11394 <__swsetup_r+0x6c>
   1138e:	0030      	movs	r0, r6
   11390:	f000 fa5e 	bl	11850 <_free_r>
   11394:	2300      	movs	r3, #0
   11396:	6363      	str	r3, [r4, #52]	; 0x34
   11398:	2224      	movs	r2, #36	; 0x24
   1139a:	89a3      	ldrh	r3, [r4, #12]
   1139c:	4393      	bics	r3, r2
   1139e:	81a3      	strh	r3, [r4, #12]
   113a0:	2300      	movs	r3, #0
   113a2:	6063      	str	r3, [r4, #4]
   113a4:	6923      	ldr	r3, [r4, #16]
   113a6:	6023      	str	r3, [r4, #0]
   113a8:	2208      	movs	r2, #8
   113aa:	89a3      	ldrh	r3, [r4, #12]
   113ac:	4313      	orrs	r3, r2
   113ae:	81a3      	strh	r3, [r4, #12]
   113b0:	6923      	ldr	r3, [r4, #16]
   113b2:	2b00      	cmp	r3, #0
   113b4:	d10b      	bne.n	113ce <__swsetup_r+0xa6>
   113b6:	23a0      	movs	r3, #160	; 0xa0
   113b8:	89a2      	ldrh	r2, [r4, #12]
   113ba:	009b      	lsls	r3, r3, #2
   113bc:	4013      	ands	r3, r2
   113be:	2280      	movs	r2, #128	; 0x80
   113c0:	0092      	lsls	r2, r2, #2
   113c2:	4293      	cmp	r3, r2
   113c4:	d003      	beq.n	113ce <__swsetup_r+0xa6>
   113c6:	0021      	movs	r1, r4
   113c8:	0030      	movs	r0, r6
   113ca:	f000 f9d9 	bl	11780 <__smakebuf_r>
   113ce:	2301      	movs	r3, #1
   113d0:	89a2      	ldrh	r2, [r4, #12]
   113d2:	4013      	ands	r3, r2
   113d4:	d005      	beq.n	113e2 <__swsetup_r+0xba>
   113d6:	2300      	movs	r3, #0
   113d8:	60a3      	str	r3, [r4, #8]
   113da:	6963      	ldr	r3, [r4, #20]
   113dc:	425b      	negs	r3, r3
   113de:	61a3      	str	r3, [r4, #24]
   113e0:	e003      	b.n	113ea <__swsetup_r+0xc2>
   113e2:	0792      	lsls	r2, r2, #30
   113e4:	d400      	bmi.n	113e8 <__swsetup_r+0xc0>
   113e6:	6963      	ldr	r3, [r4, #20]
   113e8:	60a3      	str	r3, [r4, #8]
   113ea:	2000      	movs	r0, #0
   113ec:	6923      	ldr	r3, [r4, #16]
   113ee:	4283      	cmp	r3, r0
   113f0:	d107      	bne.n	11402 <__swsetup_r+0xda>
   113f2:	220c      	movs	r2, #12
   113f4:	5ea3      	ldrsh	r3, [r4, r2]
   113f6:	061a      	lsls	r2, r3, #24
   113f8:	d503      	bpl.n	11402 <__swsetup_r+0xda>
   113fa:	2240      	movs	r2, #64	; 0x40
   113fc:	4313      	orrs	r3, r2
   113fe:	81a3      	strh	r3, [r4, #12]
   11400:	3801      	subs	r0, #1
   11402:	bd70      	pop	{r4, r5, r6, pc}
   11404:	2000008c 	.word	0x2000008c
   11408:	0001391c 	.word	0x0001391c
   1140c:	0001393c 	.word	0x0001393c
   11410:	0001395c 	.word	0x0001395c

00011414 <abort>:
   11414:	b510      	push	{r4, lr}
   11416:	2006      	movs	r0, #6
   11418:	f000 fcae 	bl	11d78 <raise>
   1141c:	2001      	movs	r0, #1
   1141e:	f7f9 fb87 	bl	ab30 <_exit>
	...

00011424 <__sflush_r>:
   11424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11426:	898a      	ldrh	r2, [r1, #12]
   11428:	0005      	movs	r5, r0
   1142a:	000c      	movs	r4, r1
   1142c:	0713      	lsls	r3, r2, #28
   1142e:	d45a      	bmi.n	114e6 <__sflush_r+0xc2>
   11430:	684b      	ldr	r3, [r1, #4]
   11432:	2b00      	cmp	r3, #0
   11434:	dc02      	bgt.n	1143c <__sflush_r+0x18>
   11436:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11438:	2b00      	cmp	r3, #0
   1143a:	dd19      	ble.n	11470 <__sflush_r+0x4c>
   1143c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1143e:	2f00      	cmp	r7, #0
   11440:	d016      	beq.n	11470 <__sflush_r+0x4c>
   11442:	2300      	movs	r3, #0
   11444:	682e      	ldr	r6, [r5, #0]
   11446:	602b      	str	r3, [r5, #0]
   11448:	2380      	movs	r3, #128	; 0x80
   1144a:	015b      	lsls	r3, r3, #5
   1144c:	401a      	ands	r2, r3
   1144e:	d001      	beq.n	11454 <__sflush_r+0x30>
   11450:	6d60      	ldr	r0, [r4, #84]	; 0x54
   11452:	e014      	b.n	1147e <__sflush_r+0x5a>
   11454:	2301      	movs	r3, #1
   11456:	6a21      	ldr	r1, [r4, #32]
   11458:	0028      	movs	r0, r5
   1145a:	47b8      	blx	r7
   1145c:	1c43      	adds	r3, r0, #1
   1145e:	d10e      	bne.n	1147e <__sflush_r+0x5a>
   11460:	682b      	ldr	r3, [r5, #0]
   11462:	2b00      	cmp	r3, #0
   11464:	d00b      	beq.n	1147e <__sflush_r+0x5a>
   11466:	2b1d      	cmp	r3, #29
   11468:	d001      	beq.n	1146e <__sflush_r+0x4a>
   1146a:	2b16      	cmp	r3, #22
   1146c:	d102      	bne.n	11474 <__sflush_r+0x50>
   1146e:	602e      	str	r6, [r5, #0]
   11470:	2000      	movs	r0, #0
   11472:	e05a      	b.n	1152a <__sflush_r+0x106>
   11474:	2240      	movs	r2, #64	; 0x40
   11476:	89a3      	ldrh	r3, [r4, #12]
   11478:	4313      	orrs	r3, r2
   1147a:	81a3      	strh	r3, [r4, #12]
   1147c:	e055      	b.n	1152a <__sflush_r+0x106>
   1147e:	89a3      	ldrh	r3, [r4, #12]
   11480:	075b      	lsls	r3, r3, #29
   11482:	d506      	bpl.n	11492 <__sflush_r+0x6e>
   11484:	6863      	ldr	r3, [r4, #4]
   11486:	1ac0      	subs	r0, r0, r3
   11488:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1148a:	2b00      	cmp	r3, #0
   1148c:	d001      	beq.n	11492 <__sflush_r+0x6e>
   1148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11490:	1ac0      	subs	r0, r0, r3
   11492:	2300      	movs	r3, #0
   11494:	0002      	movs	r2, r0
   11496:	6a21      	ldr	r1, [r4, #32]
   11498:	0028      	movs	r0, r5
   1149a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1149c:	47b8      	blx	r7
   1149e:	89a3      	ldrh	r3, [r4, #12]
   114a0:	1c42      	adds	r2, r0, #1
   114a2:	d106      	bne.n	114b2 <__sflush_r+0x8e>
   114a4:	6829      	ldr	r1, [r5, #0]
   114a6:	291d      	cmp	r1, #29
   114a8:	d83a      	bhi.n	11520 <__sflush_r+0xfc>
   114aa:	4a20      	ldr	r2, [pc, #128]	; (1152c <__sflush_r+0x108>)
   114ac:	40ca      	lsrs	r2, r1
   114ae:	07d2      	lsls	r2, r2, #31
   114b0:	d536      	bpl.n	11520 <__sflush_r+0xfc>
   114b2:	2200      	movs	r2, #0
   114b4:	6062      	str	r2, [r4, #4]
   114b6:	6922      	ldr	r2, [r4, #16]
   114b8:	6022      	str	r2, [r4, #0]
   114ba:	04db      	lsls	r3, r3, #19
   114bc:	d505      	bpl.n	114ca <__sflush_r+0xa6>
   114be:	1c43      	adds	r3, r0, #1
   114c0:	d102      	bne.n	114c8 <__sflush_r+0xa4>
   114c2:	682b      	ldr	r3, [r5, #0]
   114c4:	2b00      	cmp	r3, #0
   114c6:	d100      	bne.n	114ca <__sflush_r+0xa6>
   114c8:	6560      	str	r0, [r4, #84]	; 0x54
   114ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   114cc:	602e      	str	r6, [r5, #0]
   114ce:	2900      	cmp	r1, #0
   114d0:	d0ce      	beq.n	11470 <__sflush_r+0x4c>
   114d2:	0023      	movs	r3, r4
   114d4:	3344      	adds	r3, #68	; 0x44
   114d6:	4299      	cmp	r1, r3
   114d8:	d002      	beq.n	114e0 <__sflush_r+0xbc>
   114da:	0028      	movs	r0, r5
   114dc:	f000 f9b8 	bl	11850 <_free_r>
   114e0:	2000      	movs	r0, #0
   114e2:	6360      	str	r0, [r4, #52]	; 0x34
   114e4:	e021      	b.n	1152a <__sflush_r+0x106>
   114e6:	690f      	ldr	r7, [r1, #16]
   114e8:	2f00      	cmp	r7, #0
   114ea:	d0c1      	beq.n	11470 <__sflush_r+0x4c>
   114ec:	680b      	ldr	r3, [r1, #0]
   114ee:	600f      	str	r7, [r1, #0]
   114f0:	1bdb      	subs	r3, r3, r7
   114f2:	9301      	str	r3, [sp, #4]
   114f4:	2300      	movs	r3, #0
   114f6:	0792      	lsls	r2, r2, #30
   114f8:	d100      	bne.n	114fc <__sflush_r+0xd8>
   114fa:	694b      	ldr	r3, [r1, #20]
   114fc:	60a3      	str	r3, [r4, #8]
   114fe:	e003      	b.n	11508 <__sflush_r+0xe4>
   11500:	9b01      	ldr	r3, [sp, #4]
   11502:	183f      	adds	r7, r7, r0
   11504:	1a1b      	subs	r3, r3, r0
   11506:	9301      	str	r3, [sp, #4]
   11508:	9b01      	ldr	r3, [sp, #4]
   1150a:	2b00      	cmp	r3, #0
   1150c:	ddb0      	ble.n	11470 <__sflush_r+0x4c>
   1150e:	9b01      	ldr	r3, [sp, #4]
   11510:	003a      	movs	r2, r7
   11512:	6a21      	ldr	r1, [r4, #32]
   11514:	0028      	movs	r0, r5
   11516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11518:	47b0      	blx	r6
   1151a:	2800      	cmp	r0, #0
   1151c:	dcf0      	bgt.n	11500 <__sflush_r+0xdc>
   1151e:	89a3      	ldrh	r3, [r4, #12]
   11520:	2240      	movs	r2, #64	; 0x40
   11522:	2001      	movs	r0, #1
   11524:	4313      	orrs	r3, r2
   11526:	81a3      	strh	r3, [r4, #12]
   11528:	4240      	negs	r0, r0
   1152a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1152c:	20400001 	.word	0x20400001

00011530 <_fflush_r>:
   11530:	690b      	ldr	r3, [r1, #16]
   11532:	b570      	push	{r4, r5, r6, lr}
   11534:	0005      	movs	r5, r0
   11536:	000c      	movs	r4, r1
   11538:	2b00      	cmp	r3, #0
   1153a:	d101      	bne.n	11540 <_fflush_r+0x10>
   1153c:	2000      	movs	r0, #0
   1153e:	e01c      	b.n	1157a <_fflush_r+0x4a>
   11540:	2800      	cmp	r0, #0
   11542:	d004      	beq.n	1154e <_fflush_r+0x1e>
   11544:	6983      	ldr	r3, [r0, #24]
   11546:	2b00      	cmp	r3, #0
   11548:	d101      	bne.n	1154e <_fflush_r+0x1e>
   1154a:	f000 f85f 	bl	1160c <__sinit>
   1154e:	4b0b      	ldr	r3, [pc, #44]	; (1157c <_fflush_r+0x4c>)
   11550:	429c      	cmp	r4, r3
   11552:	d101      	bne.n	11558 <_fflush_r+0x28>
   11554:	686c      	ldr	r4, [r5, #4]
   11556:	e008      	b.n	1156a <_fflush_r+0x3a>
   11558:	4b09      	ldr	r3, [pc, #36]	; (11580 <_fflush_r+0x50>)
   1155a:	429c      	cmp	r4, r3
   1155c:	d101      	bne.n	11562 <_fflush_r+0x32>
   1155e:	68ac      	ldr	r4, [r5, #8]
   11560:	e003      	b.n	1156a <_fflush_r+0x3a>
   11562:	4b08      	ldr	r3, [pc, #32]	; (11584 <_fflush_r+0x54>)
   11564:	429c      	cmp	r4, r3
   11566:	d100      	bne.n	1156a <_fflush_r+0x3a>
   11568:	68ec      	ldr	r4, [r5, #12]
   1156a:	220c      	movs	r2, #12
   1156c:	5ea3      	ldrsh	r3, [r4, r2]
   1156e:	2b00      	cmp	r3, #0
   11570:	d0e4      	beq.n	1153c <_fflush_r+0xc>
   11572:	0021      	movs	r1, r4
   11574:	0028      	movs	r0, r5
   11576:	f7ff ff55 	bl	11424 <__sflush_r>
   1157a:	bd70      	pop	{r4, r5, r6, pc}
   1157c:	0001391c 	.word	0x0001391c
   11580:	0001393c 	.word	0x0001393c
   11584:	0001395c 	.word	0x0001395c

00011588 <_cleanup_r>:
   11588:	b510      	push	{r4, lr}
   1158a:	4902      	ldr	r1, [pc, #8]	; (11594 <_cleanup_r+0xc>)
   1158c:	f000 f8b0 	bl	116f0 <_fwalk_reent>
   11590:	bd10      	pop	{r4, pc}
   11592:	46c0      	nop			; (mov r8, r8)
   11594:	00011531 	.word	0x00011531

00011598 <std.isra.0>:
   11598:	2300      	movs	r3, #0
   1159a:	b510      	push	{r4, lr}
   1159c:	0004      	movs	r4, r0
   1159e:	6003      	str	r3, [r0, #0]
   115a0:	6043      	str	r3, [r0, #4]
   115a2:	6083      	str	r3, [r0, #8]
   115a4:	8181      	strh	r1, [r0, #12]
   115a6:	6643      	str	r3, [r0, #100]	; 0x64
   115a8:	81c2      	strh	r2, [r0, #14]
   115aa:	6103      	str	r3, [r0, #16]
   115ac:	6143      	str	r3, [r0, #20]
   115ae:	6183      	str	r3, [r0, #24]
   115b0:	0019      	movs	r1, r3
   115b2:	2208      	movs	r2, #8
   115b4:	305c      	adds	r0, #92	; 0x5c
   115b6:	f7ff f902 	bl	107be <memset>
   115ba:	4b05      	ldr	r3, [pc, #20]	; (115d0 <std.isra.0+0x38>)
   115bc:	6224      	str	r4, [r4, #32]
   115be:	6263      	str	r3, [r4, #36]	; 0x24
   115c0:	4b04      	ldr	r3, [pc, #16]	; (115d4 <std.isra.0+0x3c>)
   115c2:	62a3      	str	r3, [r4, #40]	; 0x28
   115c4:	4b04      	ldr	r3, [pc, #16]	; (115d8 <std.isra.0+0x40>)
   115c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   115c8:	4b04      	ldr	r3, [pc, #16]	; (115dc <std.isra.0+0x44>)
   115ca:	6323      	str	r3, [r4, #48]	; 0x30
   115cc:	bd10      	pop	{r4, pc}
   115ce:	46c0      	nop			; (mov r8, r8)
   115d0:	00011db9 	.word	0x00011db9
   115d4:	00011de1 	.word	0x00011de1
   115d8:	00011e19 	.word	0x00011e19
   115dc:	00011e45 	.word	0x00011e45

000115e0 <__sfmoreglue>:
   115e0:	b570      	push	{r4, r5, r6, lr}
   115e2:	2568      	movs	r5, #104	; 0x68
   115e4:	1e4b      	subs	r3, r1, #1
   115e6:	435d      	muls	r5, r3
   115e8:	000e      	movs	r6, r1
   115ea:	0029      	movs	r1, r5
   115ec:	3174      	adds	r1, #116	; 0x74
   115ee:	f000 f975 	bl	118dc <_malloc_r>
   115f2:	1e04      	subs	r4, r0, #0
   115f4:	d008      	beq.n	11608 <__sfmoreglue+0x28>
   115f6:	2100      	movs	r1, #0
   115f8:	002a      	movs	r2, r5
   115fa:	6001      	str	r1, [r0, #0]
   115fc:	6046      	str	r6, [r0, #4]
   115fe:	300c      	adds	r0, #12
   11600:	60a0      	str	r0, [r4, #8]
   11602:	3268      	adds	r2, #104	; 0x68
   11604:	f7ff f8db 	bl	107be <memset>
   11608:	0020      	movs	r0, r4
   1160a:	bd70      	pop	{r4, r5, r6, pc}

0001160c <__sinit>:
   1160c:	6983      	ldr	r3, [r0, #24]
   1160e:	b513      	push	{r0, r1, r4, lr}
   11610:	0004      	movs	r4, r0
   11612:	2b00      	cmp	r3, #0
   11614:	d128      	bne.n	11668 <__sinit+0x5c>
   11616:	6483      	str	r3, [r0, #72]	; 0x48
   11618:	64c3      	str	r3, [r0, #76]	; 0x4c
   1161a:	6503      	str	r3, [r0, #80]	; 0x50
   1161c:	4b13      	ldr	r3, [pc, #76]	; (1166c <__sinit+0x60>)
   1161e:	4a14      	ldr	r2, [pc, #80]	; (11670 <__sinit+0x64>)
   11620:	681b      	ldr	r3, [r3, #0]
   11622:	6282      	str	r2, [r0, #40]	; 0x28
   11624:	9301      	str	r3, [sp, #4]
   11626:	4298      	cmp	r0, r3
   11628:	d101      	bne.n	1162e <__sinit+0x22>
   1162a:	2301      	movs	r3, #1
   1162c:	6183      	str	r3, [r0, #24]
   1162e:	0020      	movs	r0, r4
   11630:	f000 f820 	bl	11674 <__sfp>
   11634:	6060      	str	r0, [r4, #4]
   11636:	0020      	movs	r0, r4
   11638:	f000 f81c 	bl	11674 <__sfp>
   1163c:	60a0      	str	r0, [r4, #8]
   1163e:	0020      	movs	r0, r4
   11640:	f000 f818 	bl	11674 <__sfp>
   11644:	2200      	movs	r2, #0
   11646:	60e0      	str	r0, [r4, #12]
   11648:	2104      	movs	r1, #4
   1164a:	6860      	ldr	r0, [r4, #4]
   1164c:	f7ff ffa4 	bl	11598 <std.isra.0>
   11650:	2201      	movs	r2, #1
   11652:	2109      	movs	r1, #9
   11654:	68a0      	ldr	r0, [r4, #8]
   11656:	f7ff ff9f 	bl	11598 <std.isra.0>
   1165a:	2202      	movs	r2, #2
   1165c:	2112      	movs	r1, #18
   1165e:	68e0      	ldr	r0, [r4, #12]
   11660:	f7ff ff9a 	bl	11598 <std.isra.0>
   11664:	2301      	movs	r3, #1
   11666:	61a3      	str	r3, [r4, #24]
   11668:	bd13      	pop	{r0, r1, r4, pc}
   1166a:	46c0      	nop			; (mov r8, r8)
   1166c:	000137e4 	.word	0x000137e4
   11670:	00011589 	.word	0x00011589

00011674 <__sfp>:
   11674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11676:	4b1d      	ldr	r3, [pc, #116]	; (116ec <__sfp+0x78>)
   11678:	0006      	movs	r6, r0
   1167a:	681d      	ldr	r5, [r3, #0]
   1167c:	69ab      	ldr	r3, [r5, #24]
   1167e:	2b00      	cmp	r3, #0
   11680:	d102      	bne.n	11688 <__sfp+0x14>
   11682:	0028      	movs	r0, r5
   11684:	f7ff ffc2 	bl	1160c <__sinit>
   11688:	3548      	adds	r5, #72	; 0x48
   1168a:	68ac      	ldr	r4, [r5, #8]
   1168c:	686b      	ldr	r3, [r5, #4]
   1168e:	3b01      	subs	r3, #1
   11690:	d405      	bmi.n	1169e <__sfp+0x2a>
   11692:	220c      	movs	r2, #12
   11694:	5ea7      	ldrsh	r7, [r4, r2]
   11696:	2f00      	cmp	r7, #0
   11698:	d010      	beq.n	116bc <__sfp+0x48>
   1169a:	3468      	adds	r4, #104	; 0x68
   1169c:	e7f7      	b.n	1168e <__sfp+0x1a>
   1169e:	682b      	ldr	r3, [r5, #0]
   116a0:	2b00      	cmp	r3, #0
   116a2:	d001      	beq.n	116a8 <__sfp+0x34>
   116a4:	682d      	ldr	r5, [r5, #0]
   116a6:	e7f0      	b.n	1168a <__sfp+0x16>
   116a8:	2104      	movs	r1, #4
   116aa:	0030      	movs	r0, r6
   116ac:	f7ff ff98 	bl	115e0 <__sfmoreglue>
   116b0:	6028      	str	r0, [r5, #0]
   116b2:	2800      	cmp	r0, #0
   116b4:	d1f6      	bne.n	116a4 <__sfp+0x30>
   116b6:	230c      	movs	r3, #12
   116b8:	6033      	str	r3, [r6, #0]
   116ba:	e016      	b.n	116ea <__sfp+0x76>
   116bc:	2301      	movs	r3, #1
   116be:	0020      	movs	r0, r4
   116c0:	425b      	negs	r3, r3
   116c2:	81e3      	strh	r3, [r4, #14]
   116c4:	3302      	adds	r3, #2
   116c6:	81a3      	strh	r3, [r4, #12]
   116c8:	6667      	str	r7, [r4, #100]	; 0x64
   116ca:	6027      	str	r7, [r4, #0]
   116cc:	60a7      	str	r7, [r4, #8]
   116ce:	6067      	str	r7, [r4, #4]
   116d0:	6127      	str	r7, [r4, #16]
   116d2:	6167      	str	r7, [r4, #20]
   116d4:	61a7      	str	r7, [r4, #24]
   116d6:	305c      	adds	r0, #92	; 0x5c
   116d8:	2208      	movs	r2, #8
   116da:	0039      	movs	r1, r7
   116dc:	f7ff f86f 	bl	107be <memset>
   116e0:	0020      	movs	r0, r4
   116e2:	6367      	str	r7, [r4, #52]	; 0x34
   116e4:	63a7      	str	r7, [r4, #56]	; 0x38
   116e6:	64a7      	str	r7, [r4, #72]	; 0x48
   116e8:	64e7      	str	r7, [r4, #76]	; 0x4c
   116ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   116ec:	000137e4 	.word	0x000137e4

000116f0 <_fwalk_reent>:
   116f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   116f2:	0004      	movs	r4, r0
   116f4:	0007      	movs	r7, r0
   116f6:	2600      	movs	r6, #0
   116f8:	9101      	str	r1, [sp, #4]
   116fa:	3448      	adds	r4, #72	; 0x48
   116fc:	2c00      	cmp	r4, #0
   116fe:	d016      	beq.n	1172e <_fwalk_reent+0x3e>
   11700:	6863      	ldr	r3, [r4, #4]
   11702:	68a5      	ldr	r5, [r4, #8]
   11704:	9300      	str	r3, [sp, #0]
   11706:	9b00      	ldr	r3, [sp, #0]
   11708:	3b01      	subs	r3, #1
   1170a:	9300      	str	r3, [sp, #0]
   1170c:	d40d      	bmi.n	1172a <_fwalk_reent+0x3a>
   1170e:	89ab      	ldrh	r3, [r5, #12]
   11710:	2b01      	cmp	r3, #1
   11712:	d908      	bls.n	11726 <_fwalk_reent+0x36>
   11714:	220e      	movs	r2, #14
   11716:	5eab      	ldrsh	r3, [r5, r2]
   11718:	3301      	adds	r3, #1
   1171a:	d004      	beq.n	11726 <_fwalk_reent+0x36>
   1171c:	0029      	movs	r1, r5
   1171e:	0038      	movs	r0, r7
   11720:	9b01      	ldr	r3, [sp, #4]
   11722:	4798      	blx	r3
   11724:	4306      	orrs	r6, r0
   11726:	3568      	adds	r5, #104	; 0x68
   11728:	e7ed      	b.n	11706 <_fwalk_reent+0x16>
   1172a:	6824      	ldr	r4, [r4, #0]
   1172c:	e7e6      	b.n	116fc <_fwalk_reent+0xc>
   1172e:	0030      	movs	r0, r6
   11730:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00011734 <__swhatbuf_r>:
   11734:	b570      	push	{r4, r5, r6, lr}
   11736:	000e      	movs	r6, r1
   11738:	001d      	movs	r5, r3
   1173a:	230e      	movs	r3, #14
   1173c:	5ec9      	ldrsh	r1, [r1, r3]
   1173e:	b090      	sub	sp, #64	; 0x40
   11740:	0014      	movs	r4, r2
   11742:	2900      	cmp	r1, #0
   11744:	da06      	bge.n	11754 <__swhatbuf_r+0x20>
   11746:	2300      	movs	r3, #0
   11748:	602b      	str	r3, [r5, #0]
   1174a:	89b3      	ldrh	r3, [r6, #12]
   1174c:	061b      	lsls	r3, r3, #24
   1174e:	d50f      	bpl.n	11770 <__swhatbuf_r+0x3c>
   11750:	2340      	movs	r3, #64	; 0x40
   11752:	e00f      	b.n	11774 <__swhatbuf_r+0x40>
   11754:	aa01      	add	r2, sp, #4
   11756:	f000 fba1 	bl	11e9c <_fstat_r>
   1175a:	2800      	cmp	r0, #0
   1175c:	dbf3      	blt.n	11746 <__swhatbuf_r+0x12>
   1175e:	23f0      	movs	r3, #240	; 0xf0
   11760:	9a02      	ldr	r2, [sp, #8]
   11762:	021b      	lsls	r3, r3, #8
   11764:	4013      	ands	r3, r2
   11766:	4a05      	ldr	r2, [pc, #20]	; (1177c <__swhatbuf_r+0x48>)
   11768:	189b      	adds	r3, r3, r2
   1176a:	425a      	negs	r2, r3
   1176c:	4153      	adcs	r3, r2
   1176e:	602b      	str	r3, [r5, #0]
   11770:	2380      	movs	r3, #128	; 0x80
   11772:	00db      	lsls	r3, r3, #3
   11774:	2000      	movs	r0, #0
   11776:	6023      	str	r3, [r4, #0]
   11778:	b010      	add	sp, #64	; 0x40
   1177a:	bd70      	pop	{r4, r5, r6, pc}
   1177c:	ffffe000 	.word	0xffffe000

00011780 <__smakebuf_r>:
   11780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11782:	2602      	movs	r6, #2
   11784:	898b      	ldrh	r3, [r1, #12]
   11786:	0005      	movs	r5, r0
   11788:	000c      	movs	r4, r1
   1178a:	4233      	tst	r3, r6
   1178c:	d110      	bne.n	117b0 <__smakebuf_r+0x30>
   1178e:	ab01      	add	r3, sp, #4
   11790:	466a      	mov	r2, sp
   11792:	f7ff ffcf 	bl	11734 <__swhatbuf_r>
   11796:	9900      	ldr	r1, [sp, #0]
   11798:	0007      	movs	r7, r0
   1179a:	0028      	movs	r0, r5
   1179c:	f000 f89e 	bl	118dc <_malloc_r>
   117a0:	2800      	cmp	r0, #0
   117a2:	d10c      	bne.n	117be <__smakebuf_r+0x3e>
   117a4:	220c      	movs	r2, #12
   117a6:	5ea3      	ldrsh	r3, [r4, r2]
   117a8:	059a      	lsls	r2, r3, #22
   117aa:	d423      	bmi.n	117f4 <__smakebuf_r+0x74>
   117ac:	4333      	orrs	r3, r6
   117ae:	81a3      	strh	r3, [r4, #12]
   117b0:	0023      	movs	r3, r4
   117b2:	3347      	adds	r3, #71	; 0x47
   117b4:	6023      	str	r3, [r4, #0]
   117b6:	6123      	str	r3, [r4, #16]
   117b8:	2301      	movs	r3, #1
   117ba:	6163      	str	r3, [r4, #20]
   117bc:	e01a      	b.n	117f4 <__smakebuf_r+0x74>
   117be:	2280      	movs	r2, #128	; 0x80
   117c0:	4b0d      	ldr	r3, [pc, #52]	; (117f8 <__smakebuf_r+0x78>)
   117c2:	62ab      	str	r3, [r5, #40]	; 0x28
   117c4:	89a3      	ldrh	r3, [r4, #12]
   117c6:	6020      	str	r0, [r4, #0]
   117c8:	4313      	orrs	r3, r2
   117ca:	81a3      	strh	r3, [r4, #12]
   117cc:	9b00      	ldr	r3, [sp, #0]
   117ce:	6120      	str	r0, [r4, #16]
   117d0:	6163      	str	r3, [r4, #20]
   117d2:	9b01      	ldr	r3, [sp, #4]
   117d4:	2b00      	cmp	r3, #0
   117d6:	d00a      	beq.n	117ee <__smakebuf_r+0x6e>
   117d8:	230e      	movs	r3, #14
   117da:	5ee1      	ldrsh	r1, [r4, r3]
   117dc:	0028      	movs	r0, r5
   117de:	f000 fb6f 	bl	11ec0 <_isatty_r>
   117e2:	2800      	cmp	r0, #0
   117e4:	d003      	beq.n	117ee <__smakebuf_r+0x6e>
   117e6:	2201      	movs	r2, #1
   117e8:	89a3      	ldrh	r3, [r4, #12]
   117ea:	4313      	orrs	r3, r2
   117ec:	81a3      	strh	r3, [r4, #12]
   117ee:	89a3      	ldrh	r3, [r4, #12]
   117f0:	431f      	orrs	r7, r3
   117f2:	81a7      	strh	r7, [r4, #12]
   117f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   117f6:	46c0      	nop			; (mov r8, r8)
   117f8:	00011589 	.word	0x00011589

000117fc <malloc>:
   117fc:	b510      	push	{r4, lr}
   117fe:	4b03      	ldr	r3, [pc, #12]	; (1180c <malloc+0x10>)
   11800:	0001      	movs	r1, r0
   11802:	6818      	ldr	r0, [r3, #0]
   11804:	f000 f86a 	bl	118dc <_malloc_r>
   11808:	bd10      	pop	{r4, pc}
   1180a:	46c0      	nop			; (mov r8, r8)
   1180c:	2000008c 	.word	0x2000008c

00011810 <memchr>:
   11810:	b2c9      	uxtb	r1, r1
   11812:	1882      	adds	r2, r0, r2
   11814:	4290      	cmp	r0, r2
   11816:	d004      	beq.n	11822 <memchr+0x12>
   11818:	7803      	ldrb	r3, [r0, #0]
   1181a:	428b      	cmp	r3, r1
   1181c:	d002      	beq.n	11824 <memchr+0x14>
   1181e:	3001      	adds	r0, #1
   11820:	e7f8      	b.n	11814 <memchr+0x4>
   11822:	2000      	movs	r0, #0
   11824:	4770      	bx	lr

00011826 <memmove>:
   11826:	b510      	push	{r4, lr}
   11828:	4288      	cmp	r0, r1
   1182a:	d902      	bls.n	11832 <memmove+0xc>
   1182c:	188b      	adds	r3, r1, r2
   1182e:	4298      	cmp	r0, r3
   11830:	d301      	bcc.n	11836 <memmove+0x10>
   11832:	2300      	movs	r3, #0
   11834:	e005      	b.n	11842 <memmove+0x1c>
   11836:	1a9b      	subs	r3, r3, r2
   11838:	3a01      	subs	r2, #1
   1183a:	d308      	bcc.n	1184e <memmove+0x28>
   1183c:	5c99      	ldrb	r1, [r3, r2]
   1183e:	5481      	strb	r1, [r0, r2]
   11840:	e7fa      	b.n	11838 <memmove+0x12>
   11842:	4293      	cmp	r3, r2
   11844:	d003      	beq.n	1184e <memmove+0x28>
   11846:	5ccc      	ldrb	r4, [r1, r3]
   11848:	54c4      	strb	r4, [r0, r3]
   1184a:	3301      	adds	r3, #1
   1184c:	e7f9      	b.n	11842 <memmove+0x1c>
   1184e:	bd10      	pop	{r4, pc}

00011850 <_free_r>:
   11850:	b530      	push	{r4, r5, lr}
   11852:	2900      	cmp	r1, #0
   11854:	d03e      	beq.n	118d4 <_free_r+0x84>
   11856:	3904      	subs	r1, #4
   11858:	680b      	ldr	r3, [r1, #0]
   1185a:	2b00      	cmp	r3, #0
   1185c:	da00      	bge.n	11860 <_free_r+0x10>
   1185e:	18c9      	adds	r1, r1, r3
   11860:	4a1d      	ldr	r2, [pc, #116]	; (118d8 <_free_r+0x88>)
   11862:	6813      	ldr	r3, [r2, #0]
   11864:	0014      	movs	r4, r2
   11866:	2b00      	cmp	r3, #0
   11868:	d102      	bne.n	11870 <_free_r+0x20>
   1186a:	604b      	str	r3, [r1, #4]
   1186c:	6011      	str	r1, [r2, #0]
   1186e:	e031      	b.n	118d4 <_free_r+0x84>
   11870:	428b      	cmp	r3, r1
   11872:	d90d      	bls.n	11890 <_free_r+0x40>
   11874:	680a      	ldr	r2, [r1, #0]
   11876:	1888      	adds	r0, r1, r2
   11878:	4283      	cmp	r3, r0
   1187a:	d103      	bne.n	11884 <_free_r+0x34>
   1187c:	6818      	ldr	r0, [r3, #0]
   1187e:	685b      	ldr	r3, [r3, #4]
   11880:	1882      	adds	r2, r0, r2
   11882:	600a      	str	r2, [r1, #0]
   11884:	604b      	str	r3, [r1, #4]
   11886:	6021      	str	r1, [r4, #0]
   11888:	e024      	b.n	118d4 <_free_r+0x84>
   1188a:	428a      	cmp	r2, r1
   1188c:	d803      	bhi.n	11896 <_free_r+0x46>
   1188e:	0013      	movs	r3, r2
   11890:	685a      	ldr	r2, [r3, #4]
   11892:	2a00      	cmp	r2, #0
   11894:	d1f9      	bne.n	1188a <_free_r+0x3a>
   11896:	681d      	ldr	r5, [r3, #0]
   11898:	195c      	adds	r4, r3, r5
   1189a:	428c      	cmp	r4, r1
   1189c:	d10b      	bne.n	118b6 <_free_r+0x66>
   1189e:	6809      	ldr	r1, [r1, #0]
   118a0:	1869      	adds	r1, r5, r1
   118a2:	1858      	adds	r0, r3, r1
   118a4:	6019      	str	r1, [r3, #0]
   118a6:	4282      	cmp	r2, r0
   118a8:	d114      	bne.n	118d4 <_free_r+0x84>
   118aa:	6810      	ldr	r0, [r2, #0]
   118ac:	6852      	ldr	r2, [r2, #4]
   118ae:	1841      	adds	r1, r0, r1
   118b0:	6019      	str	r1, [r3, #0]
   118b2:	605a      	str	r2, [r3, #4]
   118b4:	e00e      	b.n	118d4 <_free_r+0x84>
   118b6:	428c      	cmp	r4, r1
   118b8:	d902      	bls.n	118c0 <_free_r+0x70>
   118ba:	230c      	movs	r3, #12
   118bc:	6003      	str	r3, [r0, #0]
   118be:	e009      	b.n	118d4 <_free_r+0x84>
   118c0:	6808      	ldr	r0, [r1, #0]
   118c2:	180c      	adds	r4, r1, r0
   118c4:	42a2      	cmp	r2, r4
   118c6:	d103      	bne.n	118d0 <_free_r+0x80>
   118c8:	6814      	ldr	r4, [r2, #0]
   118ca:	6852      	ldr	r2, [r2, #4]
   118cc:	1820      	adds	r0, r4, r0
   118ce:	6008      	str	r0, [r1, #0]
   118d0:	604a      	str	r2, [r1, #4]
   118d2:	6059      	str	r1, [r3, #4]
   118d4:	bd30      	pop	{r4, r5, pc}
   118d6:	46c0      	nop			; (mov r8, r8)
   118d8:	20004438 	.word	0x20004438

000118dc <_malloc_r>:
   118dc:	2303      	movs	r3, #3
   118de:	b570      	push	{r4, r5, r6, lr}
   118e0:	1ccd      	adds	r5, r1, #3
   118e2:	439d      	bics	r5, r3
   118e4:	3508      	adds	r5, #8
   118e6:	0006      	movs	r6, r0
   118e8:	2d0c      	cmp	r5, #12
   118ea:	d201      	bcs.n	118f0 <_malloc_r+0x14>
   118ec:	250c      	movs	r5, #12
   118ee:	e005      	b.n	118fc <_malloc_r+0x20>
   118f0:	2d00      	cmp	r5, #0
   118f2:	da03      	bge.n	118fc <_malloc_r+0x20>
   118f4:	230c      	movs	r3, #12
   118f6:	2000      	movs	r0, #0
   118f8:	6033      	str	r3, [r6, #0]
   118fa:	e040      	b.n	1197e <_malloc_r+0xa2>
   118fc:	42a9      	cmp	r1, r5
   118fe:	d8f9      	bhi.n	118f4 <_malloc_r+0x18>
   11900:	4b1f      	ldr	r3, [pc, #124]	; (11980 <_malloc_r+0xa4>)
   11902:	681c      	ldr	r4, [r3, #0]
   11904:	001a      	movs	r2, r3
   11906:	0021      	movs	r1, r4
   11908:	2900      	cmp	r1, #0
   1190a:	d013      	beq.n	11934 <_malloc_r+0x58>
   1190c:	680b      	ldr	r3, [r1, #0]
   1190e:	1b5b      	subs	r3, r3, r5
   11910:	d40d      	bmi.n	1192e <_malloc_r+0x52>
   11912:	2b0b      	cmp	r3, #11
   11914:	d902      	bls.n	1191c <_malloc_r+0x40>
   11916:	600b      	str	r3, [r1, #0]
   11918:	18cc      	adds	r4, r1, r3
   1191a:	e01e      	b.n	1195a <_malloc_r+0x7e>
   1191c:	428c      	cmp	r4, r1
   1191e:	d102      	bne.n	11926 <_malloc_r+0x4a>
   11920:	6863      	ldr	r3, [r4, #4]
   11922:	6013      	str	r3, [r2, #0]
   11924:	e01a      	b.n	1195c <_malloc_r+0x80>
   11926:	684b      	ldr	r3, [r1, #4]
   11928:	6063      	str	r3, [r4, #4]
   1192a:	000c      	movs	r4, r1
   1192c:	e016      	b.n	1195c <_malloc_r+0x80>
   1192e:	000c      	movs	r4, r1
   11930:	6849      	ldr	r1, [r1, #4]
   11932:	e7e9      	b.n	11908 <_malloc_r+0x2c>
   11934:	4c13      	ldr	r4, [pc, #76]	; (11984 <_malloc_r+0xa8>)
   11936:	6823      	ldr	r3, [r4, #0]
   11938:	2b00      	cmp	r3, #0
   1193a:	d103      	bne.n	11944 <_malloc_r+0x68>
   1193c:	0030      	movs	r0, r6
   1193e:	f000 f9df 	bl	11d00 <_sbrk_r>
   11942:	6020      	str	r0, [r4, #0]
   11944:	0029      	movs	r1, r5
   11946:	0030      	movs	r0, r6
   11948:	f000 f9da 	bl	11d00 <_sbrk_r>
   1194c:	1c43      	adds	r3, r0, #1
   1194e:	d0d1      	beq.n	118f4 <_malloc_r+0x18>
   11950:	2303      	movs	r3, #3
   11952:	1cc4      	adds	r4, r0, #3
   11954:	439c      	bics	r4, r3
   11956:	42a0      	cmp	r0, r4
   11958:	d10a      	bne.n	11970 <_malloc_r+0x94>
   1195a:	6025      	str	r5, [r4, #0]
   1195c:	0020      	movs	r0, r4
   1195e:	2207      	movs	r2, #7
   11960:	300b      	adds	r0, #11
   11962:	1d23      	adds	r3, r4, #4
   11964:	4390      	bics	r0, r2
   11966:	1ac3      	subs	r3, r0, r3
   11968:	d009      	beq.n	1197e <_malloc_r+0xa2>
   1196a:	425a      	negs	r2, r3
   1196c:	50e2      	str	r2, [r4, r3]
   1196e:	e006      	b.n	1197e <_malloc_r+0xa2>
   11970:	1a21      	subs	r1, r4, r0
   11972:	0030      	movs	r0, r6
   11974:	f000 f9c4 	bl	11d00 <_sbrk_r>
   11978:	1c43      	adds	r3, r0, #1
   1197a:	d1ee      	bne.n	1195a <_malloc_r+0x7e>
   1197c:	e7ba      	b.n	118f4 <_malloc_r+0x18>
   1197e:	bd70      	pop	{r4, r5, r6, pc}
   11980:	20004438 	.word	0x20004438
   11984:	20004434 	.word	0x20004434

00011988 <_realloc_r>:
   11988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1198a:	0006      	movs	r6, r0
   1198c:	000c      	movs	r4, r1
   1198e:	0015      	movs	r5, r2
   11990:	2900      	cmp	r1, #0
   11992:	d104      	bne.n	1199e <_realloc_r+0x16>
   11994:	0011      	movs	r1, r2
   11996:	f7ff ffa1 	bl	118dc <_malloc_r>
   1199a:	0004      	movs	r4, r0
   1199c:	e018      	b.n	119d0 <_realloc_r+0x48>
   1199e:	2a00      	cmp	r2, #0
   119a0:	d103      	bne.n	119aa <_realloc_r+0x22>
   119a2:	f7ff ff55 	bl	11850 <_free_r>
   119a6:	002c      	movs	r4, r5
   119a8:	e012      	b.n	119d0 <_realloc_r+0x48>
   119aa:	f000 faaf 	bl	11f0c <_malloc_usable_size_r>
   119ae:	4285      	cmp	r5, r0
   119b0:	d90e      	bls.n	119d0 <_realloc_r+0x48>
   119b2:	0029      	movs	r1, r5
   119b4:	0030      	movs	r0, r6
   119b6:	f7ff ff91 	bl	118dc <_malloc_r>
   119ba:	1e07      	subs	r7, r0, #0
   119bc:	d007      	beq.n	119ce <_realloc_r+0x46>
   119be:	0021      	movs	r1, r4
   119c0:	002a      	movs	r2, r5
   119c2:	f7fe fef3 	bl	107ac <memcpy>
   119c6:	0021      	movs	r1, r4
   119c8:	0030      	movs	r0, r6
   119ca:	f7ff ff41 	bl	11850 <_free_r>
   119ce:	003c      	movs	r4, r7
   119d0:	0020      	movs	r0, r4
   119d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000119d4 <__ssputs_r>:
   119d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119d6:	688e      	ldr	r6, [r1, #8]
   119d8:	b085      	sub	sp, #20
   119da:	0007      	movs	r7, r0
   119dc:	000c      	movs	r4, r1
   119de:	9203      	str	r2, [sp, #12]
   119e0:	9301      	str	r3, [sp, #4]
   119e2:	429e      	cmp	r6, r3
   119e4:	d843      	bhi.n	11a6e <__ssputs_r+0x9a>
   119e6:	2390      	movs	r3, #144	; 0x90
   119e8:	898a      	ldrh	r2, [r1, #12]
   119ea:	00db      	lsls	r3, r3, #3
   119ec:	421a      	tst	r2, r3
   119ee:	d03e      	beq.n	11a6e <__ssputs_r+0x9a>
   119f0:	2503      	movs	r5, #3
   119f2:	6909      	ldr	r1, [r1, #16]
   119f4:	6823      	ldr	r3, [r4, #0]
   119f6:	9801      	ldr	r0, [sp, #4]
   119f8:	1a5b      	subs	r3, r3, r1
   119fa:	9302      	str	r3, [sp, #8]
   119fc:	6963      	ldr	r3, [r4, #20]
   119fe:	435d      	muls	r5, r3
   11a00:	0feb      	lsrs	r3, r5, #31
   11a02:	195d      	adds	r5, r3, r5
   11a04:	9b02      	ldr	r3, [sp, #8]
   11a06:	106d      	asrs	r5, r5, #1
   11a08:	3301      	adds	r3, #1
   11a0a:	181b      	adds	r3, r3, r0
   11a0c:	42ab      	cmp	r3, r5
   11a0e:	d900      	bls.n	11a12 <__ssputs_r+0x3e>
   11a10:	001d      	movs	r5, r3
   11a12:	0553      	lsls	r3, r2, #21
   11a14:	d510      	bpl.n	11a38 <__ssputs_r+0x64>
   11a16:	0029      	movs	r1, r5
   11a18:	0038      	movs	r0, r7
   11a1a:	f7ff ff5f 	bl	118dc <_malloc_r>
   11a1e:	1e06      	subs	r6, r0, #0
   11a20:	d014      	beq.n	11a4c <__ssputs_r+0x78>
   11a22:	9a02      	ldr	r2, [sp, #8]
   11a24:	6921      	ldr	r1, [r4, #16]
   11a26:	f7fe fec1 	bl	107ac <memcpy>
   11a2a:	89a2      	ldrh	r2, [r4, #12]
   11a2c:	4b19      	ldr	r3, [pc, #100]	; (11a94 <__ssputs_r+0xc0>)
   11a2e:	4013      	ands	r3, r2
   11a30:	2280      	movs	r2, #128	; 0x80
   11a32:	4313      	orrs	r3, r2
   11a34:	81a3      	strh	r3, [r4, #12]
   11a36:	e012      	b.n	11a5e <__ssputs_r+0x8a>
   11a38:	002a      	movs	r2, r5
   11a3a:	0038      	movs	r0, r7
   11a3c:	f7ff ffa4 	bl	11988 <_realloc_r>
   11a40:	1e06      	subs	r6, r0, #0
   11a42:	d10c      	bne.n	11a5e <__ssputs_r+0x8a>
   11a44:	6921      	ldr	r1, [r4, #16]
   11a46:	0038      	movs	r0, r7
   11a48:	f7ff ff02 	bl	11850 <_free_r>
   11a4c:	230c      	movs	r3, #12
   11a4e:	2240      	movs	r2, #64	; 0x40
   11a50:	2001      	movs	r0, #1
   11a52:	603b      	str	r3, [r7, #0]
   11a54:	89a3      	ldrh	r3, [r4, #12]
   11a56:	4240      	negs	r0, r0
   11a58:	4313      	orrs	r3, r2
   11a5a:	81a3      	strh	r3, [r4, #12]
   11a5c:	e017      	b.n	11a8e <__ssputs_r+0xba>
   11a5e:	9b02      	ldr	r3, [sp, #8]
   11a60:	6126      	str	r6, [r4, #16]
   11a62:	18f6      	adds	r6, r6, r3
   11a64:	6026      	str	r6, [r4, #0]
   11a66:	6165      	str	r5, [r4, #20]
   11a68:	9e01      	ldr	r6, [sp, #4]
   11a6a:	1aed      	subs	r5, r5, r3
   11a6c:	60a5      	str	r5, [r4, #8]
   11a6e:	9b01      	ldr	r3, [sp, #4]
   11a70:	42b3      	cmp	r3, r6
   11a72:	d200      	bcs.n	11a76 <__ssputs_r+0xa2>
   11a74:	001e      	movs	r6, r3
   11a76:	0032      	movs	r2, r6
   11a78:	9903      	ldr	r1, [sp, #12]
   11a7a:	6820      	ldr	r0, [r4, #0]
   11a7c:	f7ff fed3 	bl	11826 <memmove>
   11a80:	2000      	movs	r0, #0
   11a82:	68a3      	ldr	r3, [r4, #8]
   11a84:	1b9b      	subs	r3, r3, r6
   11a86:	60a3      	str	r3, [r4, #8]
   11a88:	6823      	ldr	r3, [r4, #0]
   11a8a:	199e      	adds	r6, r3, r6
   11a8c:	6026      	str	r6, [r4, #0]
   11a8e:	b005      	add	sp, #20
   11a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a92:	46c0      	nop			; (mov r8, r8)
   11a94:	fffffb7f 	.word	0xfffffb7f

00011a98 <_svfiprintf_r>:
   11a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a9a:	b09f      	sub	sp, #124	; 0x7c
   11a9c:	9002      	str	r0, [sp, #8]
   11a9e:	9305      	str	r3, [sp, #20]
   11aa0:	898b      	ldrh	r3, [r1, #12]
   11aa2:	000f      	movs	r7, r1
   11aa4:	0016      	movs	r6, r2
   11aa6:	061b      	lsls	r3, r3, #24
   11aa8:	d510      	bpl.n	11acc <_svfiprintf_r+0x34>
   11aaa:	690b      	ldr	r3, [r1, #16]
   11aac:	2b00      	cmp	r3, #0
   11aae:	d10d      	bne.n	11acc <_svfiprintf_r+0x34>
   11ab0:	2140      	movs	r1, #64	; 0x40
   11ab2:	f7ff ff13 	bl	118dc <_malloc_r>
   11ab6:	6038      	str	r0, [r7, #0]
   11ab8:	6138      	str	r0, [r7, #16]
   11aba:	2800      	cmp	r0, #0
   11abc:	d104      	bne.n	11ac8 <_svfiprintf_r+0x30>
   11abe:	230c      	movs	r3, #12
   11ac0:	9a02      	ldr	r2, [sp, #8]
   11ac2:	3801      	subs	r0, #1
   11ac4:	6013      	str	r3, [r2, #0]
   11ac6:	e0d8      	b.n	11c7a <_svfiprintf_r+0x1e2>
   11ac8:	2340      	movs	r3, #64	; 0x40
   11aca:	617b      	str	r3, [r7, #20]
   11acc:	2300      	movs	r3, #0
   11ace:	ad06      	add	r5, sp, #24
   11ad0:	616b      	str	r3, [r5, #20]
   11ad2:	3320      	adds	r3, #32
   11ad4:	766b      	strb	r3, [r5, #25]
   11ad6:	3310      	adds	r3, #16
   11ad8:	76ab      	strb	r3, [r5, #26]
   11ada:	0034      	movs	r4, r6
   11adc:	7823      	ldrb	r3, [r4, #0]
   11ade:	2b00      	cmp	r3, #0
   11ae0:	d103      	bne.n	11aea <_svfiprintf_r+0x52>
   11ae2:	1ba3      	subs	r3, r4, r6
   11ae4:	9304      	str	r3, [sp, #16]
   11ae6:	d012      	beq.n	11b0e <_svfiprintf_r+0x76>
   11ae8:	e003      	b.n	11af2 <_svfiprintf_r+0x5a>
   11aea:	2b25      	cmp	r3, #37	; 0x25
   11aec:	d0f9      	beq.n	11ae2 <_svfiprintf_r+0x4a>
   11aee:	3401      	adds	r4, #1
   11af0:	e7f4      	b.n	11adc <_svfiprintf_r+0x44>
   11af2:	1ba3      	subs	r3, r4, r6
   11af4:	0032      	movs	r2, r6
   11af6:	0039      	movs	r1, r7
   11af8:	9802      	ldr	r0, [sp, #8]
   11afa:	f7ff ff6b 	bl	119d4 <__ssputs_r>
   11afe:	1c43      	adds	r3, r0, #1
   11b00:	d100      	bne.n	11b04 <_svfiprintf_r+0x6c>
   11b02:	e0b4      	b.n	11c6e <_svfiprintf_r+0x1d6>
   11b04:	696a      	ldr	r2, [r5, #20]
   11b06:	9b04      	ldr	r3, [sp, #16]
   11b08:	4694      	mov	ip, r2
   11b0a:	4463      	add	r3, ip
   11b0c:	616b      	str	r3, [r5, #20]
   11b0e:	7823      	ldrb	r3, [r4, #0]
   11b10:	2b00      	cmp	r3, #0
   11b12:	d100      	bne.n	11b16 <_svfiprintf_r+0x7e>
   11b14:	e0ab      	b.n	11c6e <_svfiprintf_r+0x1d6>
   11b16:	2201      	movs	r2, #1
   11b18:	2300      	movs	r3, #0
   11b1a:	4252      	negs	r2, r2
   11b1c:	606a      	str	r2, [r5, #4]
   11b1e:	a902      	add	r1, sp, #8
   11b20:	3254      	adds	r2, #84	; 0x54
   11b22:	1852      	adds	r2, r2, r1
   11b24:	3401      	adds	r4, #1
   11b26:	602b      	str	r3, [r5, #0]
   11b28:	60eb      	str	r3, [r5, #12]
   11b2a:	60ab      	str	r3, [r5, #8]
   11b2c:	7013      	strb	r3, [r2, #0]
   11b2e:	65ab      	str	r3, [r5, #88]	; 0x58
   11b30:	4e53      	ldr	r6, [pc, #332]	; (11c80 <_svfiprintf_r+0x1e8>)
   11b32:	7821      	ldrb	r1, [r4, #0]
   11b34:	2205      	movs	r2, #5
   11b36:	0030      	movs	r0, r6
   11b38:	f7ff fe6a 	bl	11810 <memchr>
   11b3c:	2800      	cmp	r0, #0
   11b3e:	d007      	beq.n	11b50 <_svfiprintf_r+0xb8>
   11b40:	2301      	movs	r3, #1
   11b42:	1b80      	subs	r0, r0, r6
   11b44:	4083      	lsls	r3, r0
   11b46:	682a      	ldr	r2, [r5, #0]
   11b48:	3401      	adds	r4, #1
   11b4a:	4313      	orrs	r3, r2
   11b4c:	602b      	str	r3, [r5, #0]
   11b4e:	e7ef      	b.n	11b30 <_svfiprintf_r+0x98>
   11b50:	682b      	ldr	r3, [r5, #0]
   11b52:	06da      	lsls	r2, r3, #27
   11b54:	d504      	bpl.n	11b60 <_svfiprintf_r+0xc8>
   11b56:	2253      	movs	r2, #83	; 0x53
   11b58:	2120      	movs	r1, #32
   11b5a:	a802      	add	r0, sp, #8
   11b5c:	1812      	adds	r2, r2, r0
   11b5e:	7011      	strb	r1, [r2, #0]
   11b60:	071a      	lsls	r2, r3, #28
   11b62:	d504      	bpl.n	11b6e <_svfiprintf_r+0xd6>
   11b64:	2253      	movs	r2, #83	; 0x53
   11b66:	212b      	movs	r1, #43	; 0x2b
   11b68:	a802      	add	r0, sp, #8
   11b6a:	1812      	adds	r2, r2, r0
   11b6c:	7011      	strb	r1, [r2, #0]
   11b6e:	7822      	ldrb	r2, [r4, #0]
   11b70:	2a2a      	cmp	r2, #42	; 0x2a
   11b72:	d003      	beq.n	11b7c <_svfiprintf_r+0xe4>
   11b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11b76:	2000      	movs	r0, #0
   11b78:	210a      	movs	r1, #10
   11b7a:	e00e      	b.n	11b9a <_svfiprintf_r+0x102>
   11b7c:	9a05      	ldr	r2, [sp, #20]
   11b7e:	1d11      	adds	r1, r2, #4
   11b80:	6812      	ldr	r2, [r2, #0]
   11b82:	9105      	str	r1, [sp, #20]
   11b84:	2a00      	cmp	r2, #0
   11b86:	db01      	blt.n	11b8c <_svfiprintf_r+0xf4>
   11b88:	9209      	str	r2, [sp, #36]	; 0x24
   11b8a:	e004      	b.n	11b96 <_svfiprintf_r+0xfe>
   11b8c:	4252      	negs	r2, r2
   11b8e:	60ea      	str	r2, [r5, #12]
   11b90:	2202      	movs	r2, #2
   11b92:	4313      	orrs	r3, r2
   11b94:	602b      	str	r3, [r5, #0]
   11b96:	3401      	adds	r4, #1
   11b98:	e00b      	b.n	11bb2 <_svfiprintf_r+0x11a>
   11b9a:	7822      	ldrb	r2, [r4, #0]
   11b9c:	3a30      	subs	r2, #48	; 0x30
   11b9e:	2a09      	cmp	r2, #9
   11ba0:	d804      	bhi.n	11bac <_svfiprintf_r+0x114>
   11ba2:	434b      	muls	r3, r1
   11ba4:	3401      	adds	r4, #1
   11ba6:	189b      	adds	r3, r3, r2
   11ba8:	2001      	movs	r0, #1
   11baa:	e7f6      	b.n	11b9a <_svfiprintf_r+0x102>
   11bac:	2800      	cmp	r0, #0
   11bae:	d000      	beq.n	11bb2 <_svfiprintf_r+0x11a>
   11bb0:	9309      	str	r3, [sp, #36]	; 0x24
   11bb2:	7823      	ldrb	r3, [r4, #0]
   11bb4:	2b2e      	cmp	r3, #46	; 0x2e
   11bb6:	d11e      	bne.n	11bf6 <_svfiprintf_r+0x15e>
   11bb8:	7863      	ldrb	r3, [r4, #1]
   11bba:	2b2a      	cmp	r3, #42	; 0x2a
   11bbc:	d10a      	bne.n	11bd4 <_svfiprintf_r+0x13c>
   11bbe:	9b05      	ldr	r3, [sp, #20]
   11bc0:	3402      	adds	r4, #2
   11bc2:	1d1a      	adds	r2, r3, #4
   11bc4:	681b      	ldr	r3, [r3, #0]
   11bc6:	9205      	str	r2, [sp, #20]
   11bc8:	2b00      	cmp	r3, #0
   11bca:	da01      	bge.n	11bd0 <_svfiprintf_r+0x138>
   11bcc:	2301      	movs	r3, #1
   11bce:	425b      	negs	r3, r3
   11bd0:	9307      	str	r3, [sp, #28]
   11bd2:	e010      	b.n	11bf6 <_svfiprintf_r+0x15e>
   11bd4:	2300      	movs	r3, #0
   11bd6:	200a      	movs	r0, #10
   11bd8:	001a      	movs	r2, r3
   11bda:	3401      	adds	r4, #1
   11bdc:	606b      	str	r3, [r5, #4]
   11bde:	7821      	ldrb	r1, [r4, #0]
   11be0:	3930      	subs	r1, #48	; 0x30
   11be2:	2909      	cmp	r1, #9
   11be4:	d804      	bhi.n	11bf0 <_svfiprintf_r+0x158>
   11be6:	4342      	muls	r2, r0
   11be8:	3401      	adds	r4, #1
   11bea:	1852      	adds	r2, r2, r1
   11bec:	2301      	movs	r3, #1
   11bee:	e7f6      	b.n	11bde <_svfiprintf_r+0x146>
   11bf0:	2b00      	cmp	r3, #0
   11bf2:	d000      	beq.n	11bf6 <_svfiprintf_r+0x15e>
   11bf4:	9207      	str	r2, [sp, #28]
   11bf6:	4e23      	ldr	r6, [pc, #140]	; (11c84 <_svfiprintf_r+0x1ec>)
   11bf8:	7821      	ldrb	r1, [r4, #0]
   11bfa:	2203      	movs	r2, #3
   11bfc:	0030      	movs	r0, r6
   11bfe:	f7ff fe07 	bl	11810 <memchr>
   11c02:	2800      	cmp	r0, #0
   11c04:	d006      	beq.n	11c14 <_svfiprintf_r+0x17c>
   11c06:	2340      	movs	r3, #64	; 0x40
   11c08:	1b80      	subs	r0, r0, r6
   11c0a:	4083      	lsls	r3, r0
   11c0c:	682a      	ldr	r2, [r5, #0]
   11c0e:	3401      	adds	r4, #1
   11c10:	4313      	orrs	r3, r2
   11c12:	602b      	str	r3, [r5, #0]
   11c14:	7821      	ldrb	r1, [r4, #0]
   11c16:	2206      	movs	r2, #6
   11c18:	481b      	ldr	r0, [pc, #108]	; (11c88 <_svfiprintf_r+0x1f0>)
   11c1a:	1c66      	adds	r6, r4, #1
   11c1c:	7629      	strb	r1, [r5, #24]
   11c1e:	f7ff fdf7 	bl	11810 <memchr>
   11c22:	2800      	cmp	r0, #0
   11c24:	d012      	beq.n	11c4c <_svfiprintf_r+0x1b4>
   11c26:	4b19      	ldr	r3, [pc, #100]	; (11c8c <_svfiprintf_r+0x1f4>)
   11c28:	2b00      	cmp	r3, #0
   11c2a:	d106      	bne.n	11c3a <_svfiprintf_r+0x1a2>
   11c2c:	2207      	movs	r2, #7
   11c2e:	9b05      	ldr	r3, [sp, #20]
   11c30:	3307      	adds	r3, #7
   11c32:	4393      	bics	r3, r2
   11c34:	3308      	adds	r3, #8
   11c36:	9305      	str	r3, [sp, #20]
   11c38:	e014      	b.n	11c64 <_svfiprintf_r+0x1cc>
   11c3a:	ab05      	add	r3, sp, #20
   11c3c:	9300      	str	r3, [sp, #0]
   11c3e:	003a      	movs	r2, r7
   11c40:	4b13      	ldr	r3, [pc, #76]	; (11c90 <_svfiprintf_r+0x1f8>)
   11c42:	0029      	movs	r1, r5
   11c44:	9802      	ldr	r0, [sp, #8]
   11c46:	e000      	b.n	11c4a <_svfiprintf_r+0x1b2>
   11c48:	bf00      	nop
   11c4a:	e007      	b.n	11c5c <_svfiprintf_r+0x1c4>
   11c4c:	ab05      	add	r3, sp, #20
   11c4e:	9300      	str	r3, [sp, #0]
   11c50:	003a      	movs	r2, r7
   11c52:	4b0f      	ldr	r3, [pc, #60]	; (11c90 <_svfiprintf_r+0x1f8>)
   11c54:	0029      	movs	r1, r5
   11c56:	9802      	ldr	r0, [sp, #8]
   11c58:	f7fe ff6a 	bl	10b30 <_printf_i>
   11c5c:	9003      	str	r0, [sp, #12]
   11c5e:	9b03      	ldr	r3, [sp, #12]
   11c60:	3301      	adds	r3, #1
   11c62:	d004      	beq.n	11c6e <_svfiprintf_r+0x1d6>
   11c64:	696b      	ldr	r3, [r5, #20]
   11c66:	9a03      	ldr	r2, [sp, #12]
   11c68:	189b      	adds	r3, r3, r2
   11c6a:	616b      	str	r3, [r5, #20]
   11c6c:	e735      	b.n	11ada <_svfiprintf_r+0x42>
   11c6e:	89bb      	ldrh	r3, [r7, #12]
   11c70:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11c72:	065b      	lsls	r3, r3, #25
   11c74:	d501      	bpl.n	11c7a <_svfiprintf_r+0x1e2>
   11c76:	2001      	movs	r0, #1
   11c78:	4240      	negs	r0, r0
   11c7a:	b01f      	add	sp, #124	; 0x7c
   11c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c7e:	46c0      	nop			; (mov r8, r8)
   11c80:	000137e8 	.word	0x000137e8
   11c84:	000137ee 	.word	0x000137ee
   11c88:	000137f2 	.word	0x000137f2
   11c8c:	00000000 	.word	0x00000000
   11c90:	000119d5 	.word	0x000119d5

00011c94 <_putc_r>:
   11c94:	b570      	push	{r4, r5, r6, lr}
   11c96:	0006      	movs	r6, r0
   11c98:	000d      	movs	r5, r1
   11c9a:	0014      	movs	r4, r2
   11c9c:	2800      	cmp	r0, #0
   11c9e:	d004      	beq.n	11caa <_putc_r+0x16>
   11ca0:	6983      	ldr	r3, [r0, #24]
   11ca2:	2b00      	cmp	r3, #0
   11ca4:	d101      	bne.n	11caa <_putc_r+0x16>
   11ca6:	f7ff fcb1 	bl	1160c <__sinit>
   11caa:	4b12      	ldr	r3, [pc, #72]	; (11cf4 <_putc_r+0x60>)
   11cac:	429c      	cmp	r4, r3
   11cae:	d101      	bne.n	11cb4 <_putc_r+0x20>
   11cb0:	6874      	ldr	r4, [r6, #4]
   11cb2:	e008      	b.n	11cc6 <_putc_r+0x32>
   11cb4:	4b10      	ldr	r3, [pc, #64]	; (11cf8 <_putc_r+0x64>)
   11cb6:	429c      	cmp	r4, r3
   11cb8:	d101      	bne.n	11cbe <_putc_r+0x2a>
   11cba:	68b4      	ldr	r4, [r6, #8]
   11cbc:	e003      	b.n	11cc6 <_putc_r+0x32>
   11cbe:	4b0f      	ldr	r3, [pc, #60]	; (11cfc <_putc_r+0x68>)
   11cc0:	429c      	cmp	r4, r3
   11cc2:	d100      	bne.n	11cc6 <_putc_r+0x32>
   11cc4:	68f4      	ldr	r4, [r6, #12]
   11cc6:	68a3      	ldr	r3, [r4, #8]
   11cc8:	3b01      	subs	r3, #1
   11cca:	60a3      	str	r3, [r4, #8]
   11ccc:	2b00      	cmp	r3, #0
   11cce:	da05      	bge.n	11cdc <_putc_r+0x48>
   11cd0:	69a2      	ldr	r2, [r4, #24]
   11cd2:	4293      	cmp	r3, r2
   11cd4:	db08      	blt.n	11ce8 <_putc_r+0x54>
   11cd6:	b2eb      	uxtb	r3, r5
   11cd8:	2b0a      	cmp	r3, #10
   11cda:	d005      	beq.n	11ce8 <_putc_r+0x54>
   11cdc:	6823      	ldr	r3, [r4, #0]
   11cde:	b2e8      	uxtb	r0, r5
   11ce0:	1c5a      	adds	r2, r3, #1
   11ce2:	6022      	str	r2, [r4, #0]
   11ce4:	701d      	strb	r5, [r3, #0]
   11ce6:	e004      	b.n	11cf2 <_putc_r+0x5e>
   11ce8:	0022      	movs	r2, r4
   11cea:	0029      	movs	r1, r5
   11cec:	0030      	movs	r0, r6
   11cee:	f7ff fac3 	bl	11278 <__swbuf_r>
   11cf2:	bd70      	pop	{r4, r5, r6, pc}
   11cf4:	0001391c 	.word	0x0001391c
   11cf8:	0001393c 	.word	0x0001393c
   11cfc:	0001395c 	.word	0x0001395c

00011d00 <_sbrk_r>:
   11d00:	2300      	movs	r3, #0
   11d02:	b570      	push	{r4, r5, r6, lr}
   11d04:	4c06      	ldr	r4, [pc, #24]	; (11d20 <_sbrk_r+0x20>)
   11d06:	0005      	movs	r5, r0
   11d08:	0008      	movs	r0, r1
   11d0a:	6023      	str	r3, [r4, #0]
   11d0c:	f7f8 fec4 	bl	aa98 <_sbrk>
   11d10:	1c43      	adds	r3, r0, #1
   11d12:	d103      	bne.n	11d1c <_sbrk_r+0x1c>
   11d14:	6823      	ldr	r3, [r4, #0]
   11d16:	2b00      	cmp	r3, #0
   11d18:	d000      	beq.n	11d1c <_sbrk_r+0x1c>
   11d1a:	602b      	str	r3, [r5, #0]
   11d1c:	bd70      	pop	{r4, r5, r6, pc}
   11d1e:	46c0      	nop			; (mov r8, r8)
   11d20:	20004614 	.word	0x20004614

00011d24 <_raise_r>:
   11d24:	b570      	push	{r4, r5, r6, lr}
   11d26:	0004      	movs	r4, r0
   11d28:	1e0d      	subs	r5, r1, #0
   11d2a:	2d1f      	cmp	r5, #31
   11d2c:	d904      	bls.n	11d38 <_raise_r+0x14>
   11d2e:	2316      	movs	r3, #22
   11d30:	6003      	str	r3, [r0, #0]
   11d32:	2001      	movs	r0, #1
   11d34:	4240      	negs	r0, r0
   11d36:	e01e      	b.n	11d76 <_raise_r+0x52>
   11d38:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11d3a:	2a00      	cmp	r2, #0
   11d3c:	d004      	beq.n	11d48 <_raise_r+0x24>
   11d3e:	008b      	lsls	r3, r1, #2
   11d40:	18d2      	adds	r2, r2, r3
   11d42:	6813      	ldr	r3, [r2, #0]
   11d44:	2b00      	cmp	r3, #0
   11d46:	d108      	bne.n	11d5a <_raise_r+0x36>
   11d48:	0020      	movs	r0, r4
   11d4a:	f000 f831 	bl	11db0 <_getpid_r>
   11d4e:	002a      	movs	r2, r5
   11d50:	0001      	movs	r1, r0
   11d52:	0020      	movs	r0, r4
   11d54:	f000 f81a 	bl	11d8c <_kill_r>
   11d58:	e00d      	b.n	11d76 <_raise_r+0x52>
   11d5a:	2000      	movs	r0, #0
   11d5c:	2b01      	cmp	r3, #1
   11d5e:	d00a      	beq.n	11d76 <_raise_r+0x52>
   11d60:	1c59      	adds	r1, r3, #1
   11d62:	d103      	bne.n	11d6c <_raise_r+0x48>
   11d64:	3317      	adds	r3, #23
   11d66:	6023      	str	r3, [r4, #0]
   11d68:	3001      	adds	r0, #1
   11d6a:	e004      	b.n	11d76 <_raise_r+0x52>
   11d6c:	2400      	movs	r4, #0
   11d6e:	0028      	movs	r0, r5
   11d70:	6014      	str	r4, [r2, #0]
   11d72:	4798      	blx	r3
   11d74:	0020      	movs	r0, r4
   11d76:	bd70      	pop	{r4, r5, r6, pc}

00011d78 <raise>:
   11d78:	b510      	push	{r4, lr}
   11d7a:	4b03      	ldr	r3, [pc, #12]	; (11d88 <raise+0x10>)
   11d7c:	0001      	movs	r1, r0
   11d7e:	6818      	ldr	r0, [r3, #0]
   11d80:	f7ff ffd0 	bl	11d24 <_raise_r>
   11d84:	bd10      	pop	{r4, pc}
   11d86:	46c0      	nop			; (mov r8, r8)
   11d88:	2000008c 	.word	0x2000008c

00011d8c <_kill_r>:
   11d8c:	2300      	movs	r3, #0
   11d8e:	b570      	push	{r4, r5, r6, lr}
   11d90:	4c06      	ldr	r4, [pc, #24]	; (11dac <_kill_r+0x20>)
   11d92:	0005      	movs	r5, r0
   11d94:	0008      	movs	r0, r1
   11d96:	0011      	movs	r1, r2
   11d98:	6023      	str	r3, [r4, #0]
   11d9a:	f7f8 fed3 	bl	ab44 <_kill>
   11d9e:	1c43      	adds	r3, r0, #1
   11da0:	d103      	bne.n	11daa <_kill_r+0x1e>
   11da2:	6823      	ldr	r3, [r4, #0]
   11da4:	2b00      	cmp	r3, #0
   11da6:	d000      	beq.n	11daa <_kill_r+0x1e>
   11da8:	602b      	str	r3, [r5, #0]
   11daa:	bd70      	pop	{r4, r5, r6, pc}
   11dac:	20004614 	.word	0x20004614

00011db0 <_getpid_r>:
   11db0:	b510      	push	{r4, lr}
   11db2:	f7f8 fed1 	bl	ab58 <_getpid>
   11db6:	bd10      	pop	{r4, pc}

00011db8 <__sread>:
   11db8:	b570      	push	{r4, r5, r6, lr}
   11dba:	000c      	movs	r4, r1
   11dbc:	250e      	movs	r5, #14
   11dbe:	5f49      	ldrsh	r1, [r1, r5]
   11dc0:	f000 f8b0 	bl	11f24 <_read_r>
   11dc4:	2800      	cmp	r0, #0
   11dc6:	db03      	blt.n	11dd0 <__sread+0x18>
   11dc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11dca:	181b      	adds	r3, r3, r0
   11dcc:	6563      	str	r3, [r4, #84]	; 0x54
   11dce:	e003      	b.n	11dd8 <__sread+0x20>
   11dd0:	89a2      	ldrh	r2, [r4, #12]
   11dd2:	4b02      	ldr	r3, [pc, #8]	; (11ddc <__sread+0x24>)
   11dd4:	4013      	ands	r3, r2
   11dd6:	81a3      	strh	r3, [r4, #12]
   11dd8:	bd70      	pop	{r4, r5, r6, pc}
   11dda:	46c0      	nop			; (mov r8, r8)
   11ddc:	ffffefff 	.word	0xffffefff

00011de0 <__swrite>:
   11de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11de2:	001f      	movs	r7, r3
   11de4:	898b      	ldrh	r3, [r1, #12]
   11de6:	0005      	movs	r5, r0
   11de8:	000c      	movs	r4, r1
   11dea:	0016      	movs	r6, r2
   11dec:	05db      	lsls	r3, r3, #23
   11dee:	d505      	bpl.n	11dfc <__swrite+0x1c>
   11df0:	230e      	movs	r3, #14
   11df2:	5ec9      	ldrsh	r1, [r1, r3]
   11df4:	2200      	movs	r2, #0
   11df6:	2302      	movs	r3, #2
   11df8:	f000 f874 	bl	11ee4 <_lseek_r>
   11dfc:	89a2      	ldrh	r2, [r4, #12]
   11dfe:	4b05      	ldr	r3, [pc, #20]	; (11e14 <__swrite+0x34>)
   11e00:	0028      	movs	r0, r5
   11e02:	4013      	ands	r3, r2
   11e04:	81a3      	strh	r3, [r4, #12]
   11e06:	0032      	movs	r2, r6
   11e08:	230e      	movs	r3, #14
   11e0a:	5ee1      	ldrsh	r1, [r4, r3]
   11e0c:	003b      	movs	r3, r7
   11e0e:	f000 f81f 	bl	11e50 <_write_r>
   11e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11e14:	ffffefff 	.word	0xffffefff

00011e18 <__sseek>:
   11e18:	b570      	push	{r4, r5, r6, lr}
   11e1a:	000c      	movs	r4, r1
   11e1c:	250e      	movs	r5, #14
   11e1e:	5f49      	ldrsh	r1, [r1, r5]
   11e20:	f000 f860 	bl	11ee4 <_lseek_r>
   11e24:	89a3      	ldrh	r3, [r4, #12]
   11e26:	1c42      	adds	r2, r0, #1
   11e28:	d103      	bne.n	11e32 <__sseek+0x1a>
   11e2a:	4a05      	ldr	r2, [pc, #20]	; (11e40 <__sseek+0x28>)
   11e2c:	4013      	ands	r3, r2
   11e2e:	81a3      	strh	r3, [r4, #12]
   11e30:	e004      	b.n	11e3c <__sseek+0x24>
   11e32:	2280      	movs	r2, #128	; 0x80
   11e34:	0152      	lsls	r2, r2, #5
   11e36:	4313      	orrs	r3, r2
   11e38:	81a3      	strh	r3, [r4, #12]
   11e3a:	6560      	str	r0, [r4, #84]	; 0x54
   11e3c:	bd70      	pop	{r4, r5, r6, pc}
   11e3e:	46c0      	nop			; (mov r8, r8)
   11e40:	ffffefff 	.word	0xffffefff

00011e44 <__sclose>:
   11e44:	b510      	push	{r4, lr}
   11e46:	230e      	movs	r3, #14
   11e48:	5ec9      	ldrsh	r1, [r1, r3]
   11e4a:	f000 f815 	bl	11e78 <_close_r>
   11e4e:	bd10      	pop	{r4, pc}

00011e50 <_write_r>:
   11e50:	b570      	push	{r4, r5, r6, lr}
   11e52:	0005      	movs	r5, r0
   11e54:	0008      	movs	r0, r1
   11e56:	0011      	movs	r1, r2
   11e58:	2200      	movs	r2, #0
   11e5a:	4c06      	ldr	r4, [pc, #24]	; (11e74 <_write_r+0x24>)
   11e5c:	6022      	str	r2, [r4, #0]
   11e5e:	001a      	movs	r2, r3
   11e60:	f7f8 fde4 	bl	aa2c <_write>
   11e64:	1c43      	adds	r3, r0, #1
   11e66:	d103      	bne.n	11e70 <_write_r+0x20>
   11e68:	6823      	ldr	r3, [r4, #0]
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d000      	beq.n	11e70 <_write_r+0x20>
   11e6e:	602b      	str	r3, [r5, #0]
   11e70:	bd70      	pop	{r4, r5, r6, pc}
   11e72:	46c0      	nop			; (mov r8, r8)
   11e74:	20004614 	.word	0x20004614

00011e78 <_close_r>:
   11e78:	2300      	movs	r3, #0
   11e7a:	b570      	push	{r4, r5, r6, lr}
   11e7c:	4c06      	ldr	r4, [pc, #24]	; (11e98 <_close_r+0x20>)
   11e7e:	0005      	movs	r5, r0
   11e80:	0008      	movs	r0, r1
   11e82:	6023      	str	r3, [r4, #0]
   11e84:	f7f8 fe26 	bl	aad4 <_close>
   11e88:	1c43      	adds	r3, r0, #1
   11e8a:	d103      	bne.n	11e94 <_close_r+0x1c>
   11e8c:	6823      	ldr	r3, [r4, #0]
   11e8e:	2b00      	cmp	r3, #0
   11e90:	d000      	beq.n	11e94 <_close_r+0x1c>
   11e92:	602b      	str	r3, [r5, #0]
   11e94:	bd70      	pop	{r4, r5, r6, pc}
   11e96:	46c0      	nop			; (mov r8, r8)
   11e98:	20004614 	.word	0x20004614

00011e9c <_fstat_r>:
   11e9c:	2300      	movs	r3, #0
   11e9e:	b570      	push	{r4, r5, r6, lr}
   11ea0:	4c06      	ldr	r4, [pc, #24]	; (11ebc <_fstat_r+0x20>)
   11ea2:	0005      	movs	r5, r0
   11ea4:	0008      	movs	r0, r1
   11ea6:	0011      	movs	r1, r2
   11ea8:	6023      	str	r3, [r4, #0]
   11eaa:	f7f8 fe1d 	bl	aae8 <_fstat>
   11eae:	1c43      	adds	r3, r0, #1
   11eb0:	d103      	bne.n	11eba <_fstat_r+0x1e>
   11eb2:	6823      	ldr	r3, [r4, #0]
   11eb4:	2b00      	cmp	r3, #0
   11eb6:	d000      	beq.n	11eba <_fstat_r+0x1e>
   11eb8:	602b      	str	r3, [r5, #0]
   11eba:	bd70      	pop	{r4, r5, r6, pc}
   11ebc:	20004614 	.word	0x20004614

00011ec0 <_isatty_r>:
   11ec0:	2300      	movs	r3, #0
   11ec2:	b570      	push	{r4, r5, r6, lr}
   11ec4:	4c06      	ldr	r4, [pc, #24]	; (11ee0 <_isatty_r+0x20>)
   11ec6:	0005      	movs	r5, r0
   11ec8:	0008      	movs	r0, r1
   11eca:	6023      	str	r3, [r4, #0]
   11ecc:	f7f8 fe1a 	bl	ab04 <_isatty>
   11ed0:	1c43      	adds	r3, r0, #1
   11ed2:	d103      	bne.n	11edc <_isatty_r+0x1c>
   11ed4:	6823      	ldr	r3, [r4, #0]
   11ed6:	2b00      	cmp	r3, #0
   11ed8:	d000      	beq.n	11edc <_isatty_r+0x1c>
   11eda:	602b      	str	r3, [r5, #0]
   11edc:	bd70      	pop	{r4, r5, r6, pc}
   11ede:	46c0      	nop			; (mov r8, r8)
   11ee0:	20004614 	.word	0x20004614

00011ee4 <_lseek_r>:
   11ee4:	b570      	push	{r4, r5, r6, lr}
   11ee6:	0005      	movs	r5, r0
   11ee8:	0008      	movs	r0, r1
   11eea:	0011      	movs	r1, r2
   11eec:	2200      	movs	r2, #0
   11eee:	4c06      	ldr	r4, [pc, #24]	; (11f08 <_lseek_r+0x24>)
   11ef0:	6022      	str	r2, [r4, #0]
   11ef2:	001a      	movs	r2, r3
   11ef4:	f7f8 fe10 	bl	ab18 <_lseek>
   11ef8:	1c43      	adds	r3, r0, #1
   11efa:	d103      	bne.n	11f04 <_lseek_r+0x20>
   11efc:	6823      	ldr	r3, [r4, #0]
   11efe:	2b00      	cmp	r3, #0
   11f00:	d000      	beq.n	11f04 <_lseek_r+0x20>
   11f02:	602b      	str	r3, [r5, #0]
   11f04:	bd70      	pop	{r4, r5, r6, pc}
   11f06:	46c0      	nop			; (mov r8, r8)
   11f08:	20004614 	.word	0x20004614

00011f0c <_malloc_usable_size_r>:
   11f0c:	1f0b      	subs	r3, r1, #4
   11f0e:	681a      	ldr	r2, [r3, #0]
   11f10:	1f10      	subs	r0, r2, #4
   11f12:	2a00      	cmp	r2, #0
   11f14:	da04      	bge.n	11f20 <_malloc_usable_size_r+0x14>
   11f16:	1889      	adds	r1, r1, r2
   11f18:	3904      	subs	r1, #4
   11f1a:	680b      	ldr	r3, [r1, #0]
   11f1c:	18d0      	adds	r0, r2, r3
   11f1e:	3804      	subs	r0, #4
   11f20:	4770      	bx	lr
	...

00011f24 <_read_r>:
   11f24:	b570      	push	{r4, r5, r6, lr}
   11f26:	0005      	movs	r5, r0
   11f28:	0008      	movs	r0, r1
   11f2a:	0011      	movs	r1, r2
   11f2c:	2200      	movs	r2, #0
   11f2e:	4c06      	ldr	r4, [pc, #24]	; (11f48 <_read_r+0x24>)
   11f30:	6022      	str	r2, [r4, #0]
   11f32:	001a      	movs	r2, r3
   11f34:	f7f8 fd50 	bl	a9d8 <_read>
   11f38:	1c43      	adds	r3, r0, #1
   11f3a:	d103      	bne.n	11f44 <_read_r+0x20>
   11f3c:	6823      	ldr	r3, [r4, #0]
   11f3e:	2b00      	cmp	r3, #0
   11f40:	d000      	beq.n	11f44 <_read_r+0x20>
   11f42:	602b      	str	r3, [r5, #0]
   11f44:	bd70      	pop	{r4, r5, r6, pc}
   11f46:	46c0      	nop			; (mov r8, r8)
   11f48:	20004614 	.word	0x20004614
   11f4c:	50504128 	.word	0x50504128
   11f50:	52452829 	.word	0x52452829
   11f54:	255b2952 	.word	0x255b2952
   11f58:	255b5d73 	.word	0x255b5d73
   11f5c:	00005d64 	.word	0x00005d64
   11f60:	61766e69 	.word	0x61766e69
   11f64:	6564696c 	.word	0x6564696c
   11f68:	636f6920 	.word	0x636f6920
   11f6c:	6320746c 	.word	0x6320746c
   11f70:	0000646d 	.word	0x0000646d

00011f74 <__FUNCTION__.14731>:
   11f74:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   11f84:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   11f94:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
   11fa4:	6b617720 74207075 63206568 00706968      wakup the chip.
   11fb4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   11fc4:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   11fd4:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   11fe4:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   11ff4:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   12004:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   12014:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   12024:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
   12034:	6e692029 696c6176 72672064 2070756f     ) invalid group 
   12044:	00004449 66696828 6f682029 61207473     ID..(hif) host a
   12054:	64207070 276e6469 65732074 58522074     pp didn't set RX
   12064:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
   12074:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   12084:	61462029 2065736c 65746e69 70757272     ) False interrup
   12094:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   120a4:	74206c69 6552206f 69206461 7265746e     il to Read inter
   120b4:	74707572 67657220 00000000 66696828     rupt reg....(hif
   120c4:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
   120d4:	65687420 69686320 00000070 46494828      the chip...(HIF
   120e4:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   120f4:	746e6920 75727265 25207470 72742064      interrupt %d tr
   12104:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   12114:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   12124:	72612064 656d7567 0000746e 20505041     d argument..APP 
   12134:	75716552 65747365 69532064 6920657a     Requested Size i
   12144:	616c2073 72656772 61687420 6874206e     s larger than th
   12154:	65722065 65766963 75622064 72656666     e recived buffer
   12164:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
   12174:	20505041 75716552 65747365 64412064     APP Requested Ad
   12184:	73657264 65622073 646e6f79 65687420     dress beyond the
   12194:	63657220 64657669 66756220 20726566      recived buffer 
   121a4:	72646461 20737365 20646e61 676e656c     address and leng
   121b4:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
   121c4:	000015f4 000015cc 000015c4 000015dc     ................
   121d4:	000015d4 000015f4 000015e4 000015ec     ................

000121e4 <__FUNCTION__.12480>:
   121e4:	5f666968 646e6573 00000000              hif_send....

000121f0 <__FUNCTION__.12511>:
   121f0:	5f666968 65636572 00657669              hif_receive.

000121fc <__FUNCTION__.12526>:
   121fc:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1220c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1221c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1222c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   1223c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1224c:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   1225c:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   1226c:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1227c:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1228c:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1229c:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   122ac:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   122bc:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   122cc:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   122dc:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   122ec:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   122fc:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1230c:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   1231c:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   1232c:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   1233c:	2065626f 75716572 73747365 72657020     obe requests per
   1234c:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   1235c:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   1236c:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
   1237c:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   1238c:	00000a75 206e694d 76697264 76207265     u...Min driver v
   1239c:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   123ac:	72727543 69726420 20726576 3a726576     Curr driver ver:
   123bc:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
   123cc:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
   123dc:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
   123ec:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   123fc:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   1240c:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   1241c:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   1242c:	20706557 2079656b 65646e69 64252078     Wep key index %d
   1243c:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   1244c:	2079656b 676e656c 25206874 00000a64     key length %d...
   1245c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   1246c:	656c2079 6874676e 00000000 65646e75     y length....unde
   1247c:	656e6966 65732064 79742063 00006570     fined sec type..
   1248c:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   1249c:	6420746f 6e696665 00006465 7473694c     ot defined..List
   124ac:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   124bc:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
   124cc:	31312072 00000000 45574f50 41532052     r 11....POWER SA
   124dc:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   124ec:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   124fc:	66754220 20726566 65637865 64656465      Buffer exceeded
   1250c:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1251c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1252c:	00000000                                ....

00012530 <__FUNCTION__.12453>:
   12530:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001253c <__FUNCTION__.12477>:
   1253c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001254c <__FUNCTION__.12505>:
   1254c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1255c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   1256c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   1257c:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   1258c:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   1259c:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   125ac:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   125bc:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   125cc:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   125dc:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   125ec:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   125fc:	0000002e 6c696166 74206465 6564206f     ....failed to de
   1260c:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   1261c:	68772072 20656c69 74697277 20676e69     r while writing 
   1262c:	00676572 6f727245 68772072 20656c69     reg.Error while 
   1263c:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   1264c:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   1265c:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   1266c:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   1267c:	6f742064 69727720 00006574              d to write..

00012688 <__FUNCTION__.12290>:
   12688:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00012698 <__FUNCTION__.12384>:
   12698:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   126a8:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   126b8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   126c8:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   126d8:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   126e8:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   126f8:	6e65206f 656c6261 746e6920 75727265     o enable interru
   12708:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   12718:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   12728:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   12738:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   12748:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   12758:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   12768:	75622074 00000073                       t bus...

00012770 <__FUNCTION__.12371>:
   12770:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001277c <__FUNCTION__.12378>:
   1277c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

0001278c <crc7_syndrome_table>:
   1278c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1279c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   127ac:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   127bc:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   127cc:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   127dc:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   127ec:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   127fc:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1280c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1281c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1282c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1283c:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1284c:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1285c:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1286c:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1287c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1288c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1289c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   128ac:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   128bc:	73756220 72726520 2e2e726f 0000002e      bus error......
   128cc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   128dc:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   128ec:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   128fc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1290c:	656c6961 61642064 72206174 6f707365     ailed data respo
   1291c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1292c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1293c:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1294c:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1295c:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1296c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1297c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1298c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1299c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   129ac:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   129bc:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   129cc:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   129dc:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   129ec:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   129fc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12a0c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   12a1c:	69727720 202c6574 20737562 6f727265      write, bus erro
   12a2c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   12a3c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   12a4c:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   12a5c:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   12a6c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12a7c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   12a8c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   12a9c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   12aac:	65722064 6e6f7073 202c6573 74697277     d response, writ
   12abc:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   12acc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12adc:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   12aec:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   12afc:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   12b0c:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   12b1c:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   12b2c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   12b3c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   12b4c:	206b636f 61746164 69727720 2e2e6574     ock data write..
   12b5c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12b6c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   12b7c:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   12b8c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12b9c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   12bac:	64616572 67657220 30252820 2e297838     read reg (%08x).
   12bbc:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12bcc:	656c6961 61642064 72206174 2e646165     ailed data read.
   12bdc:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12bec:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   12bfc:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   12c0c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12c1c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   12c2c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   12c3c:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   12c4c:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   12c5c:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   12c6c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12c7c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   12c8c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   12c9c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   12cac:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   12cbc:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12ccc:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   12cdc:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   12cec:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12cfc:	6e692064 6e726574 77206c61 65746972     d internal write
   12d0c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   12d1c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12d2c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   12d3c:	64692070 002e2e2e 00003334 00003334     p id....43..43..
   12d4c:	000033c4 00003288 000032ce 000032f0     .3...2...2...2..
   12d5c:	00003376 00003376 00003430 0000325c     v3..v3..04..\2..
   12d6c:	0000348a 0000348a 0000348a 0000348a     .4...4...4...4..
   12d7c:	00003312                                .3..

00012d80 <__FUNCTION__.11755>:
   12d80:	5f697073 00646d63                       spi_cmd.

00012d88 <__FUNCTION__.11763>:
   12d88:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00012d94 <__FUNCTION__.11779>:
   12d94:	5f697073 61746164 6165725f 00000064     spi_data_read...

00012da4 <__FUNCTION__.11794>:
   12da4:	5f697073 61746164 6972775f 00006574     spi_data_write..

00012db4 <__FUNCTION__.11804>:
   12db4:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00012dc4 <__FUNCTION__.11812>:
   12dc4:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00012dd4 <__FUNCTION__.11821>:
   12dd4:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00012de4 <__FUNCTION__.11829>:
   12de4:	735f6d6e 725f6970 00646165              nm_spi_read.

00012df0 <__FUNCTION__.11846>:
   12df0:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   12e00:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   12e10:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   12e20:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12e30:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   12e40:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   12e50:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   12e60:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   12e70:	6b636f53 00007465 00000002 00000003     Socket..........
   12e80:	00000028 00000029 00000004 00000005     (...)...........
   12e90:	00000006 00000007 0000ffff 0000ffff     ................
   12ea0:	00000022 00000023 0000ffff 0000ffff     "...#...........
   12eb0:	0000ffff 0000ffff 00000008 00000009     ................
   12ec0:	0000000a 0000000b 00005c9a 00005ca0     .........\...\..
   12ed0:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12ee0:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12ef0:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f00:	00005ca0 00005ca0 00005c78 00005ca0     .\...\..x\...\..
   12f10:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f20:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f30:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f40:	00005ca0 00005ca0 00005c94 00005ca0     .\...\...\...\..
   12f50:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f60:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f70:	00005ca0 00005ca0 00005ca0 00005ca0     .\...\...\...\..
   12f80:	00005ca0 00005ca0 00005c8e 00005c36     .\...\...\..6\..
   12f90:	00005c4c 00005c62 00005c1c 42000800     L\..b\...\.....B
   12fa0:	42000c00 42001000 42001400 42001800     ...B...B...B...B
   12fb0:	42001c00 0c0b0a09 00000e0d 00009a86     ...B............
   12fc0:	00009afe 00009afe 00009aa4 00009a9e     ................
   12fd0:	00009aaa 00009a8c 00009ab0 00009ae4     ................
   12fe0:	00009dc8 00009e18 00009e18 00009e14     ................
   12ff0:	00009dba 00009dda 00009daa 00009dec     ................
   13000:	00009dfe 00009e66 00009e94 00009e94     ....f...........
   13010:	00009e90 00009e60 00009e6c 00009e5a     ....`...l...Z...
   13020:	00009e72 00009e78                       r...x...

00013028 <_tcc_intflag>:
   13028:	00000001 00000002 00000004 00000008     ................
   13038:	00001000 00002000 00004000 00008000     ..... ...@......
   13048:	00010000 00020000 00040000 00080000     ................
   13058:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   13068:	0000cb78 0000cb78 0000cb78 0000cc06     x...x...x.......
   13078:	0000cbd0 0000cbfa 0000cb78 0000cb78     ........x...x...
   13088:	0000cc06 0000cbd0                       ........

00013090 <PubNubPublishKey>:
   13090:	6f6d6564 00000000                       demo....

00013098 <PubNubSubscribeKey>:
   13098:	6f6d6564 00000000 6b636f73 725f7465     demo....socket_r
   130a8:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
   130b8:	766c6f73 77206465 20687469 25205049     solved with IP %
   130c8:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
   130d8:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
   130e8:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
   130f8:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
   13108:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
   13118:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
   13128:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
   13138:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
   13148:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
   13158:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
   13168:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
   13178:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
   13188:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
   13198:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
   131a8:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
   131b8:	00000030 00000031 6564227b 65636976     0...1...{"device
   131c8:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
   131d8:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
   131e8:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
   131f8:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
   13208:	7570203a 73696c62 76652068 3a746e65     : publish event:
   13218:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
   13228:	72637362 20656269 6e657665 50202c74     bscribe event, P
   13238:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
   13248:	6572203a 76696563 4c206465 63204445     : received LED c
   13258:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
   13268:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
   13278:	6e69616d 6572203a 76696563 6d206465     main: received m
   13288:	61737365 203a6567 0a0d7325 00000000     essage: %s......
   13298:	6e69616d 7573203a 72637362 20656269     main: subscribe 
   132a8:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
   132b8:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
   132c8:	3a21776f 0a732520 0000000d 53202d2d     ow!: %s.....-- S
   132d8:	32574d41 75502035 62754e62 61786520     AMW25 PubNub exa
   132e8:	656c706d 0d2d2d20 202d2d0a 574d4153     mple --..-- SAMW
   132f8:	585f3532 49414c50 5f44454e 204f5250     25_XPLAINED_PRO 
   13308:	0a0d2d2d 43202d2d 69706d6f 3a64656c     --..-- Compiled:
   13318:	766f4e20 20333120 36313032 3a393120      Nov 13 2016 19:
   13328:	313a3933 2d2d2034 0000000d 6e69616d     39:14 --....main
   13338:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   13348:	6c6c6163 72726520 0d21726f 00000000     call error!.....
   13358:	6e69616d 414d203a 64612043 73657264     main: MAC addres
   13368:	75662073 62206573 68207469 6e207361     s fuse bit has n
   13378:	6220746f 206e6565 666e6f63 72756769     ot been configur
   13388:	0d216465 00000000 6e69616d 7355203a     ed!.....main: Us
   13398:	326d2065 69775f6d 735f6966 6d5f7465     e m2m_wifi_set_m
   133a8:	615f6361 65726464 29287373 49504120     ac_address() API
   133b8:	206f7420 20746573 2043414d 72646461      to set MAC addr
   133c8:	20737365 20616976 74666f73 65726177     ess via software
   133d8:	00000d2e 0000000d 6e69616d 7550203a     ........main: Pu
   133e8:	62754e62 6e6f6320 75676966 20646572     bNub configured 
   133f8:	68746977 6c6f6620 69776f6c 7320676e     with following s
   13408:	69747465 3a73676e 0000000d 6e69616d     ettings:....main
   13418:	2d20203a 62755020 6873696c 79656b20     :  - Publish key
   13428:	2522203a 202c2273 73627553 62697263     : "%s", Subscrib
   13438:	656b2065 22203a79 2c227325 61684320     e key: "%s", Cha
   13448:	6c656e6e 2522203a 0d2e2273 000a0d0a     nnel: "%s"......
   13458:	6e69616d 6957203a 2069462d 6e6e6f63     main: Wi-Fi conn
   13468:	69746365 7420676e 5041206f 69737520     ecting to AP usi
   13478:	6820676e 63647261 6465646f 65726320     ng hardcoded cre
   13488:	746e6564 736c6169 0d2e2e2e 00000000     dentials........
   13498:	6b736174 0073335f 6b736174 0073315f     task_3s.task_1s.
   134a8:	6b736174 3030315f 00007a48 73627570     task_100Hz..pubs
   134b8:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
   134c8:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
   134d8:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
   134e8:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
   134f8:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
   13508:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   13518:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
   13528:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
   13538:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
   13548:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
   13558:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
   13568:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
   13578:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
   13588:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
   13598:	6c696166 74206465 7263206f 65746165     failed to create
   135a8:	50435420 696c6320 20746e65 6b636f73      TCP client sock
   135b8:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
   135c8:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
   135d8:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
   135e8:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
   135f8:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
   13608:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
   13618:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
   13628:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
   13638:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
   13648:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
   13658:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   13668:	00000000 64697575 0000003d 00000000     ....uuid=.......
   13678:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
   13688:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
   13698:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
   136a8:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
   136b8:	00732546 00312e30                       F%s.0.1.

000136c0 <__func__.12046>:
   136c0:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
   136d0:	7463656e 00000000                       nect....

000136d8 <__func__.12124>:
   136d8:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

000136e8 <__func__.12130>:
   136e8:	6e627570 695f6275 0074696e              pubnub_init.

000136f4 <__func__.12136>:
   136f4:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

00013704 <__func__.12147>:
   13704:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
   13714:	00000000                                ....

00013718 <__func__.12151>:
   13718:	6e627570 675f6275 00007465 0000f580     pubnub_get......
   13728:	0000f44e 0000f554 0000f444 0000f554     N...T...D...T...
   13738:	0000f55e 0000f554 0000f444 0000f44e     ^...T...D...N...
   13748:	0000f44e 0000f55e 0000f444 0000f43a     N...^...D...:...
   13758:	0000f43a 0000f43a 0000f7b0 0000fbac     :...:...........
   13768:	0000fa6c 0000fa6c 0000fa6a 0000fb84     l...l...j.......
   13778:	0000fb84 0000fb76 0000fa6a 0000fb84     ....v...j.......
   13788:	0000fb76 0000fb84 0000fa6a 0000fb8c     v.......j.......
   13798:	0000fb8c 0000fb8c 0000fd8c 7566202c     ............, fu
   137a8:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   137b8:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   137c8:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   137d8:	73256425 000a7325 00000043              %d%s%s..C...

000137e4 <_global_impure_ptr>:
   137e4:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
   137f4:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   13804:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   13814:	64636261 00006665                                abcdef.

0001381b <_ctype_>:
   1381b:	20202000 20202020 28282020 20282828     .         ((((( 
   1382b:	20202020 20202020 20202020 20202020                     
   1383b:	10108820 10101010 10101010 10101010      ...............
   1384b:	04040410 04040404 10040404 10101010     ................
   1385b:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1386b:	01010101 01010101 01010101 10101010     ................
   1387b:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1388b:	02020202 02020202 02020202 10101010     ................
   1389b:	00000020 00000000 00000000 00000000      ...............
	...

0001391c <__sf_fake_stdin>:
	...

0001393c <__sf_fake_stdout>:
	...

0001395c <__sf_fake_stderr>:
	...

0001397c <_init>:
   1397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1397e:	46c0      	nop			; (mov r8, r8)
   13980:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13982:	bc08      	pop	{r3}
   13984:	469e      	mov	lr, r3
   13986:	4770      	bx	lr

00013988 <__init_array_start>:
   13988:	000000dd 	.word	0x000000dd

0001398c <_fini>:
   1398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1398e:	46c0      	nop			; (mov r8, r8)
   13990:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13992:	bc08      	pop	{r3}
   13994:	469e      	mov	lr, r3
   13996:	4770      	bx	lr

00013998 <__fini_array_start>:
   13998:	000000b5 	.word	0x000000b5
